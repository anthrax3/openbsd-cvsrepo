head	1.75;
access;
symbols
	OPENBSD_5_9:1.74.0.2
	OPENBSD_5_9_BASE:1.74
	OPENBSD_5_8:1.69.0.10
	OPENBSD_5_8_BASE:1.69
	OPENBSD_5_7:1.69.0.2
	OPENBSD_5_7_BASE:1.69
	OPENBSD_5_6:1.69.0.6
	OPENBSD_5_6_BASE:1.69
	OPENBSD_5_5:1.69.0.4
	OPENBSD_5_5_BASE:1.69
	OPENBSD_5_4:1.68.0.8
	OPENBSD_5_4_BASE:1.68
	OPENBSD_5_3:1.68.0.6
	OPENBSD_5_3_BASE:1.68
	OPENBSD_5_2:1.68.0.4
	OPENBSD_5_2_BASE:1.68
	OPENBSD_5_1_BASE:1.68
	OPENBSD_5_1:1.68.0.2
	OPENBSD_5_0:1.67.0.2
	OPENBSD_5_0_BASE:1.67
	OPENBSD_4_9:1.61.0.2
	OPENBSD_4_9_BASE:1.61
	OPENBSD_4_8:1.60.0.4
	OPENBSD_4_8_BASE:1.60
	OPENBSD_4_7:1.60.0.2
	OPENBSD_4_7_BASE:1.60
	OPENBSD_4_6:1.59.0.4
	OPENBSD_4_6_BASE:1.59
	OPENBSD_4_5:1.56.0.4
	OPENBSD_4_5_BASE:1.56
	OPENBSD_4_4:1.56.0.2
	OPENBSD_4_4_BASE:1.56
	OPENBSD_4_3:1.53.0.2
	OPENBSD_4_3_BASE:1.53
	OPENBSD_4_2:1.52.0.2
	OPENBSD_4_2_BASE:1.52
	OPENBSD_4_1:1.30.0.2
	OPENBSD_4_1_BASE:1.30
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.75
date	2016.05.11.21.52.50;	author deraadt;	state dead;
branches;
next	1.74;
commitid	VpgRpYXqYSJy4P7J;

1.74
date	2016.02.24.18.25.50;	author krw;	state Exp;
branches;
next	1.73;
commitid	49hQIFvRrM4V62Hl;

1.73
date	2015.09.28.21.52.28;	author krw;	state Exp;
branches;
next	1.72;
commitid	3cyDis1K6Ba6t55F;

1.72
date	2015.09.28.01.17.57;	author krw;	state Exp;
branches;
next	1.71;
commitid	o3W0gqYXacBi9CkD;

1.71
date	2015.09.27.15.23.09;	author krw;	state Exp;
branches;
next	1.70;
commitid	taKKp4Bg2hPgxg2Y;

1.70
date	2015.09.27.12.29.21;	author krw;	state Exp;
branches;
next	1.69;
commitid	tuLVdAkwMl9MV3n9;

1.69
date	2013.10.19.09.32.13;	author krw;	state Exp;
branches;
next	1.68;

1.68
date	2011.09.22.13.41.38;	author deraadt;	state Exp;
branches;
next	1.67;

1.67
date	2011.07.10.04.49.39;	author krw;	state Exp;
branches;
next	1.66;

1.66
date	2011.07.08.00.08.00;	author krw;	state Exp;
branches;
next	1.65;

1.65
date	2011.07.07.22.48.23;	author krw;	state Exp;
branches;
next	1.64;

1.64
date	2011.04.16.03.21.15;	author krw;	state Exp;
branches;
next	1.63;

1.63
date	2011.04.15.14.57.28;	author krw;	state Exp;
branches;
next	1.62;

1.62
date	2011.04.06.13.46.50;	author miod;	state Exp;
branches;
next	1.61;

1.61
date	2011.02.26.13.07.48;	author krw;	state Exp;
branches;
next	1.60;

1.60
date	2009.08.13.15.23.10;	author deraadt;	state Exp;
branches;
next	1.59;

1.59
date	2009.06.17.07.00.45;	author deraadt;	state Exp;
branches;
next	1.58;

1.58
date	2009.06.14.00.09.38;	author deraadt;	state Exp;
branches;
next	1.57;

1.57
date	2009.06.11.18.54.13;	author deraadt;	state Exp;
branches;
next	1.56;

1.56
date	2008.06.12.06.58.34;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2008.06.11.12.35.41;	author deraadt;	state Exp;
branches;
next	1.54;

1.54
date	2008.06.10.20.50.22;	author beck;	state Exp;
branches;
next	1.53;

1.53
date	2007.10.06.14.25.47;	author kettenis;	state Exp;
branches;
next	1.52;

1.52
date	2007.06.20.18.15.45;	author deraadt;	state Exp;
branches;
next	1.51;

1.51
date	2007.06.18.21.45.21;	author krw;	state Exp;
branches;
next	1.50;

1.50
date	2007.06.18.07.10.31;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2007.06.17.00.27.28;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	2007.06.14.03.37.23;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2007.06.14.03.35.29;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2007.06.14.03.29.34;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	2007.06.09.23.06.46;	author krw;	state Exp;
branches;
next	1.44;

1.44
date	2007.06.09.18.05.47;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2007.06.09.04.08.39;	author deraadt;	state Exp;
branches;
next	1.42;

1.42
date	2007.06.09.02.03.47;	author deraadt;	state Exp;
branches;
next	1.41;

1.41
date	2007.06.08.05.34.27;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2007.06.07.02.55.12;	author krw;	state Exp;
branches;
next	1.39;

1.39
date	2007.06.07.00.28.17;	author krw;	state Exp;
branches;
next	1.38;

1.38
date	2007.06.06.17.15.12;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2007.06.06.16.42.06;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2007.06.05.00.38.15;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2007.06.02.02.35.26;	author krw;	state Exp;
branches;
next	1.34;

1.34
date	2007.05.31.19.57.43;	author krw;	state Exp;
branches;
next	1.33;

1.33
date	2007.05.31.16.05.50;	author krw;	state Exp;
branches;
next	1.32;

1.32
date	2007.05.29.06.28.15;	author otto;	state Exp;
branches;
next	1.31;

1.31
date	2007.05.29.05.08.19;	author krw;	state Exp;
branches;
next	1.30;

1.30
date	2007.02.18.14.18.28;	author krw;	state Exp;
branches;
next	1.29;

1.29
date	2007.02.18.13.49.22;	author krw;	state Exp;
branches;
next	1.28;

1.28
date	2007.02.03.18.22.33;	author krw;	state Exp;
branches;
next	1.27;

1.27
date	2006.10.28.23.26.05;	author krw;	state Exp;
branches;
next	1.26;

1.26
date	2006.10.21.20.10.39;	author krw;	state Exp;
branches;
next	1.25;

1.25
date	2006.10.21.16.01.54;	author krw;	state Exp;
branches;
next	1.24;

1.24
date	2006.10.21.14.18.37;	author krw;	state Exp;
branches;
next	1.23;

1.23
date	2006.10.20.23.47.42;	author krw;	state Exp;
branches;
next	1.22;

1.22
date	2006.10.18.20.09.38;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2006.10.17.23.42.37;	author krw;	state Exp;
branches;
next	1.20;

1.20
date	2006.10.10.03.17.45;	author krw;	state Exp;
branches;
next	1.19;

1.19
date	2006.10.04.23.58.12;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2006.10.04.03.23.01;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2006.10.03.01.37.22;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2006.09.16.14.56.11;	author krw;	state Exp;
branches;
next	1.15;

1.15
date	2006.08.20.03.14.21;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2006.08.18.00.39.17;	author krw;	state Exp;
branches;
next	1.13;

1.13
date	2006.08.17.10.34.14;	author krw;	state Exp;
branches;
next	1.12;

1.12
date	2006.08.11.21.32.40;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2006.07.09.21.06.39;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.07.23.47.37;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.03.20.00.22;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.01.16.50.32;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.11.21.15.35;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.15.20.20.39;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.04.19.33.21;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.22.00.40.01;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.22.03.02.48;	author krw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.27.23.56.11;	author krw;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.01.10.40.47;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.75
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@/*	$OpenBSD: disksubr.c,v 1.74 2016/02/24 18:25:50 krw Exp $	*/

/*
 * Copyright (c) 1999 Michael Shalayeff
 * Copyright (c) 1997 Niklas Hallqvist
 * Copyright (c) 1996 Theo de Raadt
 * Copyright (c) 1982, 1986, 1988 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/disklabel.h>
#include <sys/disk.h>

int	readliflabel(struct buf *, void (*)(struct buf *),
	    struct disklabel *, daddr_t *, int);

/*
 * Attempt to read a disk label from a device
 * using the indicated strategy routine.
 * The label must be partly set up before this:
 * secpercyl, secsize and anything required for a block i/o read
 * operation in the driver's strategy/start routines
 * must be filled in before calling us.
 */
int
readdisklabel(dev_t dev, void (*strat)(struct buf *),
    struct disklabel *lp, int spoofonly)
{
	struct buf *bp = NULL;
	int error;

	if ((error = initdisklabel(lp)))
		goto done;

	/* get a buffer and initialize it */
	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = dev;

	error = readliflabel(bp, strat, lp, NULL, spoofonly);
	if (error == 0)
		goto done;

	error = readdoslabel(bp, strat, lp, NULL, spoofonly);
	if (error == 0)
		goto done;

#if defined(CD9660)
	error = iso_disklabelspoof(dev, strat, lp);
	if (error == 0)
		goto done;
#endif
#if defined(UDF)
	error = udf_disklabelspoof(dev, strat, lp);
	if (error == 0)
		goto done;
#endif

done:
	if (bp) {
		bp->b_flags |= B_INVAL;
		brelse(bp);
	}
	disk_change = 1;
	return (error);
}

int
readliflabel(struct buf *bp, void (*strat)(struct buf *),
    struct disklabel *lp, daddr_t *partoffp, int spoofonly)
{
	struct lifdir *p;
	struct lifvol *lvp;
	int error = 0;
	daddr_t fsoff = 0, openbsdstart = MAXLIFSPACE;
	int i;

	/* read LIF volume header */
	error = readdisksector(bp, strat, lp, DL_BLKTOSEC(lp,
	    btodb(LIF_VOLSTART)));
	if (error)
		return (error);

	lvp = (struct lifvol *)bp->b_data;
	if (lvp->vol_id != LIF_VOL_ID) {
		error = EINVAL;		/* no LIF volume header */
		goto done;
	}

	/* read LIF directory */
	error = readdisksector(bp, strat, lp, DL_BLKTOSEC(lp,
	    lifstodb(lvp->vol_addr)));
	if (error)
		goto done;

	/* scan for LIF_DIR_FS dir entry */
	for (i=0, p=(struct lifdir *)bp->b_data; i < LIF_NUMDIR; p++, i++) {
		if (p->dir_type == LIF_DIR_FS || p->dir_type == LIF_DIR_HPLBL)
			break;
	}

	if (p->dir_type == LIF_DIR_FS) {
		fsoff = lifstodb(p->dir_addr);
		openbsdstart = 0;
		goto finished;
	}

	/* Only came here to find the offset... */
	if (partoffp)
		goto finished;

	if (p->dir_type == LIF_DIR_HPLBL) {
		struct hpux_label *hl;
		struct partition *pp;
		u_int8_t fstype;
		int i;

		/* read LIF directory */
		error = readdisksector(bp, strat, lp, DL_BLKTOSEC(lp,
		    lifstodb(p->dir_addr)));
		if (error)
			goto done;

		hl = (struct hpux_label *)bp->b_data;
		if (hl->hl_magic1 != hl->hl_magic2 ||
		    hl->hl_magic != HPUX_MAGIC || hl->hl_version != 1) {
			error = EINVAL;	 /* HPUX label magic mismatch */
			goto done;
		}

		lp->d_bbsize = 8192;
		lp->d_sbsize = 8192;
		for (i = 0; i < MAXPARTITIONS; i++) {
			DL_SETPSIZE(&lp->d_partitions[i], 0);
			DL_SETPOFFSET(&lp->d_partitions[i], 0);
			lp->d_partitions[i].p_fstype = 0;
		}

		for (i = 0; i < HPUX_MAXPART; i++) {
			if (!hl->hl_flags[i])
				continue;
			if (hl->hl_flags[i] == HPUX_PART_ROOT) {
				pp = &lp->d_partitions[0];
				fstype = FS_BSDFFS;
			} else if (hl->hl_flags[i] == HPUX_PART_SWAP) {
				pp = &lp->d_partitions[1];
				fstype = FS_SWAP;
			} else if (hl->hl_flags[i] == HPUX_PART_BOOT) {
				pp = &lp->d_partitions[RAW_PART + 1];
				fstype = FS_BSDFFS;
			} else
				continue;

			DL_SETPSIZE(pp, hl->hl_parts[i].hlp_length * 2);
			DL_SETPOFFSET(pp, hl->hl_parts[i].hlp_start * 2);
			pp->p_fstype = fstype;
		}

		DL_SETPSIZE(&lp->d_partitions[RAW_PART], DL_GETDSIZE(lp));
		DL_SETPOFFSET(&lp->d_partitions[RAW_PART], 0);
		lp->d_partitions[RAW_PART].p_fstype = FS_UNUSED;
		lp->d_npartitions = MAXPARTITIONS;
		lp->d_magic = DISKMAGIC;
		lp->d_magic2 = DISKMAGIC;
		lp->d_version = 1;
		lp->d_checksum = 0;
		lp->d_checksum = dkcksum(lp);
		/* drop through */
	}

finished:
	/* record the OpenBSD partition's placement for the caller */
	if (partoffp)
		*partoffp = fsoff;
	else {
		DL_SETBSTART(lp, DL_BLKTOSEC(lp, openbsdstart));
		DL_SETBEND(lp, DL_GETDSIZE(lp));	/* XXX */
	}

	/* don't read the on-disk label if we are in spoofed-only mode */
	if (spoofonly)
		goto done;

	error = readdisksector(bp, strat, lp, DL_BLKTOSEC(lp, fsoff +
	    LABELSECTOR));
	if (error)
		goto done;

	error = checkdisklabel(bp->b_data, lp, openbsdstart, DL_GETDSIZE(lp));

done:
	return (error);
}

/*
 * Write disk label back to device after modification.
 */
int
writedisklabel(dev_t dev, void (*strat)(struct buf *), struct disklabel *lp)
{
	daddr_t partoff = -1;
	int error = EIO;
	int offset;
	struct disklabel *dlp;
	struct buf *bp = NULL;

	/* get a buffer and initialize it */
	bp = geteblk((int)lp->d_secsize);
	bp->b_dev = dev;

	/* Read it in, slap the new label in, and write it back out */
	if (readliflabel(bp, strat, lp, &partoff, 1) == 0) {
		error = readdisksector(bp, strat, lp, DL_BLKTOSEC(lp,
		    partoff + LABELSECTOR));
		offset = LABELOFFSET;
	} else if (readdoslabel(bp, strat, lp, &partoff, 1) == 0) {
		error = readdisksector(bp, strat, lp, DL_BLKTOSEC(lp,
		    partoff + DOS_LABELSECTOR));
		offset = DL_BLKOFFSET(lp, partoff + DOS_LABELSECTOR);
	} else
		goto done;

	if (error)
		goto done;

	dlp = (struct disklabel *)(bp->b_data + offset);
	*dlp = *lp;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_WRITE | B_RAW);
	(*strat)(bp);
	error = biowait(bp);

done:
	if (bp) {
		bp->b_flags |= B_INVAL;
		brelse(bp);
	}
	disk_change = 1;
	return (error);
}
@


1.74
log
@Restore validity checks for the disklabels read from disk. They
were suppressed in 2011 to address a problem that has since been
solved in a more permanent way. Without the validity check proper
disklabel discovery relied on a particular I/O failure, and the I/O
failure was 'solved' by the introduction of readdisksector().

Fixes problem reading CDROM disklabels discovered by mlarkin@@ while
trying to install hppa.

Compile check/typo discovery and ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.73 2015/09/28 21:52:28 krw Exp $	*/
@


1.73
log
@More mechanical switching to readdisksector(), although this is a
slightly different pattern. hppa/macppc compile and boot so
hppa64/aviion surely do too!

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.72 2015/09/28 01:17:57 krw Exp $	*/
d215 1
a215 9
	/*
	 * Do OpenBSD disklabel validation/adjustment.
	 *
	 * N.B: No matter what the bits are on the disk, we now have the
	 * OpenBSD disklabel for this lif disk. DO NOT proceed to
	 * readdoslabel(), iso_spooflabel(), etc.
	 */
	checkdisklabel(bp->b_data, lp, openbsdstart, DL_GETDSIZE(lp));
	error = 0;
@


1.72
log
@Use readdisksector() instead of manual buf initialization. hppa compiles
and boots, so the identical hppa64 should too!

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.71 2015/09/27 15:23:09 krw Exp $	*/
d245 1
d247 2
a248 1
		bp->b_blkno = partoff + LABELSECTOR;
d251 2
a252 2
		bp->b_blkno = DL_BLKTOSEC(lp, partoff + DOS_LABELSECTOR) *
		    DL_BLKSPERSEC(lp);
d257 1
a257 6
	/* Read it in, slap the new label in, and write it back out */
	bp->b_bcount = lp->d_secsize;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
	(*strat)(bp);
	if ((error = biowait(bp)) != 0)
@


1.71
log
@Tweak a bit of daddr_t goodness and make hppa64 disksubr.c identical to
hppa disksubr.c.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.70 2015/09/27 12:29:21 krw Exp $	*/
d105 4
a108 7
	bp->b_blkno = btodb(LIF_VOLSTART);
	bp->b_bcount = lp->d_secsize;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
	(*strat)(bp);
	if (biowait(bp))
		return (bp->b_error);
d117 3
a119 7
	bp->b_blkno = lifstodb(lvp->vol_addr);
	bp->b_bcount = lp->d_secsize;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
	(*strat)(bp);
	if (biowait(bp)) {
		error = bp->b_error;
a120 1
	}
d145 3
a147 8
		bp->b_blkno = lifstodb(p->dir_addr);
		bp->b_bcount = lp->d_secsize;
		CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
		SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
		(*strat)(bp);

		if (biowait(bp)) {
			error = bp->b_error;
a148 1
		}
d210 3
a212 7
	bp->b_blkno = fsoff + LABELSECTOR;
	bp->b_bcount = lp->d_secsize;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
	(*strat)(bp);
	if (biowait(bp)) {
		error = bp->b_error;
a213 1
	}
@


1.70
log
@Eliminate unneeded 2nd buf (dbp). One is enough for any i/o needed during
disklabel processing. Especially when the 2nd one was not asking for a
disk sector worth of buffer space.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.69 2013/10/19 09:32:13 krw Exp $	*/
d101 2
a102 1
	int fsoff = 0, openbsdstart = MAXLIFSPACE, i;
d216 1
a216 1
		DL_SETBSTART(lp, openbsdstart);
@


1.69
log
@Use daddr_t * instead of int * for the partoffp parameter to
readdoslabel(). Ditto all the MD variables whose addresses are passed
to readdoslabel() via partoffp.

Fix some 512-byte block vs disk sector confusion in hppa and sgi.
All the DL_GETxxxxx() defines return disk sector values. All
DL_SETxxxx() take disk sector values. These changes should be no-ops
until a drive using non-512-byte-sectors is encountered.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.68 2011/09/22 13:41:38 deraadt Exp $	*/
a97 1
	struct buf *dbp = NULL;
a117 3
	dbp = geteblk(LIF_DIRSIZE);
	dbp->b_dev = bp->b_dev;

d119 7
a125 7
	dbp->b_blkno = lifstodb(lvp->vol_addr);
	dbp->b_bcount = lp->d_secsize;
	CLR(dbp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(dbp->b_flags, B_BUSY | B_READ | B_RAW);
	(*strat)(dbp);
	if (biowait(dbp)) {
		error = dbp->b_error;
d130 1
a130 1
	for (i=0, p=(struct lifdir *)dbp->b_data; i < LIF_NUMDIR; p++, i++) {
d152 5
a156 5
		dbp->b_blkno = lifstodb(p->dir_addr);
		dbp->b_bcount = lp->d_secsize;
		CLR(dbp->b_flags, B_READ | B_WRITE | B_DONE);
		SET(dbp->b_flags, B_BUSY | B_READ | B_RAW);
		(*strat)(dbp);
d158 2
a159 2
		if (biowait(dbp)) {
			error = dbp->b_error;
d163 1
a163 1
		hl = (struct hpux_label *)dbp->b_data;
a243 4
	if (dbp) {
		dbp->b_flags |= B_INVAL;
		brelse(dbp);
	}
@


1.68
log
@Catchup to hppa disksubr: determining label offset the new way
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.67 2011/07/10 04:49:39 krw Exp $	*/
d42 1
a42 1
	    struct disklabel *, int *, int);
d96 1
a96 1
    struct disklabel *lp, int *partoffp, int spoofonly)
d261 2
a262 1
	int error = EIO, partoff = -1;
@


1.67
log
@If there is recognized MD disk partitioning info, use it to determine
where to write the OpenBSD disklabel even if there isn't yet a valid
OpenBSD disklabel at that location.

Alpha/Mac68k/Sparc/Sparc64 to come.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.66 2011/07/08 00:08:00 krw Exp $	*/
a280 1
	bp->b_blkno = partoff + LABELSECTOR;
@


1.66
log
@When reading dos labels use DOS_LABELSECTOR and don't use LABELOFFSET. For all these
arch's LABELSECTOR == DOS_LABELSECTOR == 1, and LABELOFFSET == 0. Thus, to quote bob,
"This is a no-op". Makes the expression used when writing label the same as the one
used in readdoslabel().
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.65 2011/07/07 22:48:23 krw Exp $	*/
d237 9
a245 2
	error = checkdisklabel(bp->b_data + LABELOFFSET, lp, openbsdstart,
	    DL_GETDSIZE(lp));	/* XXX */
@


1.65
log
@Take more care to write 'dos' labels in the same place readdoslabel()
will look for them. Without changing native label handling.

Compile tested on hppa by kettenis@@.

"I see no issues" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.64 2011/04/16 03:21:15 krw Exp $	*/
d267 1
a267 1
		bp->b_blkno = DL_BLKTOSEC(lp, partoff + LABELSECTOR) *
d269 1
a269 1
		offset = DL_BLKOFFSET(lp, partoff + LABELSECTOR) + LABELOFFSET;
@


1.64
log
@Use 'CLR(<buf>->b_flags, B_READ | B_WRITE | B_DONE)' regardless of
what the previous IO was. Less chance of copy and paste errors.
Suggested by miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.63 2011/04/15 14:57:28 krw Exp $	*/
d255 1
d263 8
a270 2
	if (readliflabel(bp, strat, lp, &partoff, 1) != 0 &&
	    readdoslabel(bp, strat, lp, &partoff, 1) != 0)
d282 1
a282 1
	dlp = (struct disklabel *)(bp->b_data + LABELOFFSET);
@


1.63
log
@In days of yore one could arbitrarily whack buffer flags. Those days
are past. Use CLR() and SET() to modify necessary flags while leaving
the flags used by the buffer cache in peace.

Should make bufcache code much less confused about the state of the
bufs used in reading/writing disklabels. Other such flag abuses no
doubt await a visit.

Errors in original diff found by miod@@.

ok beck@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.62 2011/04/06 13:46:50 miod Exp $	*/
d107 1
a107 1
	CLR(bp->b_flags, B_WRITE | B_DONE);
d125 1
a125 1
	CLR(dbp->b_flags, B_WRITE | B_DONE);
d158 1
a158 1
		CLR(dbp->b_flags, B_WRITE | B_DONE);
d229 1
a229 1
	CLR(bp->b_flags, B_WRITE | B_DONE);
d269 1
a269 1
	CLR(bp->b_flags, B_WRITE | B_DONE);
d277 1
a277 1
	CLR(bp->b_flags, B_READ | B_DONE);
@


1.62
log
@The various read*label() have stopped returning error strings for quite
some time, and return errnos instead. Fix or remove out-of-date comments
mentioning the error strings, and make their callers check the return value
against zero, not NULL.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.61 2011/02/26 13:07:48 krw Exp $	*/
d107 2
a108 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d125 2
a126 1
	dbp->b_flags = B_BUSY | B_READ | B_RAW;
d158 2
a159 1
		dbp->b_flags = B_BUSY | B_READ | B_RAW;
d229 2
a230 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d269 2
a270 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d277 2
a278 1
	bp->b_flags = B_BUSY | B_WRITE | B_RAW;
@


1.61
log
@Force the DUID cache used to generate hw.disknames to be updated
after every disklabel read or write. This keeps the DUID cache more
in sync with the physical world. De-syncing noted by drahn@@ while
zapping disklabels with dd.

ok jsing@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.60 2009/08/13 15:23:10 deraadt Exp $	*/
a50 2
 *
 * Returns null on success and an error string on failure.
d258 2
a259 2
	if (readliflabel(bp, strat, lp, &partoff, 1) != NULL &&
	    readdoslabel(bp, strat, lp, &partoff, 1) != NULL)
@


1.60
log
@Replace the error strings that were being passed around with much simpler
errnos.  Note that the error strings are being ignored, since we long ago
decided to not spam the console, and there is no other nice way to use the
errors (without changing the ioctls to pass it back)
The errno is now useful, since we can pass b_error from failing IO up, and
the drive can decide how to use that
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.59 2009/06/17 07:00:45 deraadt Exp $	*/
d92 1
d283 1
@


1.59
log
@Really avoid changing the start of the bounds if we found no LIF
a diff by kettenis but he is gone for a day or so
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.58 2009/06/14 00:09:38 deraadt Exp $	*/
d41 2
a42 2
char   *readliflabel(struct buf *, void (*)(struct buf *),
    struct disklabel *, int *, int);
d54 1
a54 1
char *
d59 1
a59 1
	char *msg;
d61 1
a61 1
	if ((msg = initdisklabel(lp)))
d68 2
a69 2
	msg = readliflabel(bp, strat, lp, NULL, spoofonly);
	if (msg == NULL)
d72 2
a73 2
	msg = readdoslabel(bp, strat, lp, NULL, spoofonly);
	if (msg == NULL)
d77 2
a78 2
	if (iso_disklabelspoof(dev, strat, lp) == 0) {
		msg = NULL;
a79 1
	}
d82 2
a83 2
	if (udf_disklabelspoof(dev, strat, lp) == 0) {
		msg = NULL;
a84 1
	}
d92 1
a92 1
	return (msg);
d95 1
a95 1
char *
d102 1
a102 1
	char *msg = NULL;
d111 1
a111 1
		return "LIF volume header I/O error";
d114 4
a117 2
	if (lvp->vol_id != LIF_VOL_ID)
		return "no LIF volume header";
a126 1

d128 1
a128 1
		msg = "LIF directory I/O error";
d161 1
a161 1
			msg = "HPUX label I/O error";
d168 1
a168 1
			msg = "HPUX label magic mismatch";
d230 1
a230 1
		msg = "disk label I/O error";
d234 1
a234 1
	return checkdisklabel(bp->b_data + LABELOFFSET, lp, openbsdstart,
d242 1
a242 1
	return (msg);
@


1.58
log
@Don't mess with the bounds in the lp if *partoffp is non-NULL, since this
indicates that writedisklabel is trying to find the location for writing
the label.  If the lp is messed with, an invalid checksum is written.
done with miod and kettenis, lots of moaning and gnashing of teeth, etc
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.57 2009/06/11 18:54:13 deraadt Exp $	*/
d116 2
a117 4
	if (lvp->vol_id != LIF_VOL_ID) {
		openbsdstart = 0;
		goto finished;
	}
a129 1
		openbsdstart = 0;
@


1.57
log
@sync disklabel changes from hppa
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.73 2009/06/04 21:13:01 deraadt Exp $	*/
d105 1
a105 1
	int fsoff = 0, i;
d116 2
a117 1
	if (lvp->vol_id != LIF_VOL_ID)
d119 1
d132 1
d144 1
d149 1
a149 1
	if (partoffp && spoofonly)
d217 1
d220 4
d225 1
a225 3
	DL_SETBSTART(lp, fsoff);
	DL_SETBEND(lp, DL_GETDSIZE(lp));	/* XXX */

a232 2

	/* if successful, locate disk label within block and validate */
d238 1
a238 1
	return checkdisklabel(bp->b_data + LABELOFFSET, lp, fsoff,
@


1.56
log
@Bring biomem diff back into the tree after the nfs_bio.c fix went in.
ok thib beck art
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.54 2008/06/10 20:50:22 beck Exp $	*/
d216 3
d233 2
a234 1
	return checkdisklabel(bp->b_data + LABELOFFSET, lp);
@


1.55
log
@back out biomem diff since it is not right yet.  Doing very large
file copies to nfsv2 causes the system to eventually peg the console.
On the console ^T indicates that the load is increasing rapidly, ddb
indicates many calls to getbuf, there is some very slow nfs traffic
making none (or extremely slow) progress.  Eventually some machines
seize up entirely.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.53 2007/10/06 14:25:47 kettenis Exp $	*/
d110 1
a110 1
	bp->b_flags = B_BUSY | B_READ;
d125 1
a125 1
	dbp->b_flags = B_BUSY | B_READ;
d157 1
a157 1
		dbp->b_flags = B_BUSY | B_READ;
d221 1
a221 1
	bp->b_flags = B_BUSY | B_READ;
d261 1
a261 1
	bp->b_flags = B_BUSY | B_READ;
d268 1
a268 1
	bp->b_flags = B_BUSY | B_WRITE;
@


1.54
log
@Fix buffer cache pending read statistics by ensuring we can identify
biowait() reads that do *not* come from the buffer cache - we use the
B_RAW flag to identify these at art's suggestion - since it makes sense
and the flag was not being used. this just flags all these buffers with
B_RAW - biodone already ignores returned buffers marked B_RAW.
ok art@@
@
text
@d110 1
a110 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d125 1
a125 1
	dbp->b_flags = B_BUSY | B_READ | B_RAW;
d157 1
a157 1
		dbp->b_flags = B_BUSY | B_READ | B_RAW;
d221 1
a221 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d261 1
a261 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d268 1
a268 1
	bp->b_flags = B_BUSY | B_WRITE | B_RAW;
@


1.53
log
@Remove unused variable.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.52 2007/06/20 18:15:45 deraadt Exp $	*/
d110 1
a110 1
	bp->b_flags = B_BUSY | B_READ;
d125 1
a125 1
	dbp->b_flags = B_BUSY | B_READ;
d157 1
a157 1
		dbp->b_flags = B_BUSY | B_READ;
d221 1
a221 1
	bp->b_flags = B_BUSY | B_READ;
d261 1
a261 1
	bp->b_flags = B_BUSY | B_READ;
d268 1
a268 1
	bp->b_flags = B_BUSY | B_WRITE;
@


1.52
log
@b_cylinder does not need to be set on the callpath down into drivers.
cpu_disklabel can go away, since nothing anymore needs to use it; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.51 2007/06/18 21:45:21 krw Exp $	*/
d246 1
a246 1
	int error = EIO, partoff = -1, cyl = 0;
@


1.51
log
@Don't use cpu_disklabel as local storage. Use local variables and discard
the unneeded info when done with it. Another empty struct cpu_disklabel.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.50 2007/06/18 07:10:31 deraadt Exp $	*/
d42 1
a42 1
    struct disklabel *, struct cpu_disklabel *, int *, int *, int);
d56 1
a56 1
    struct disklabel *lp, struct cpu_disklabel *osdep, int spoofonly)
d68 1
a68 1
	msg = readliflabel(bp, strat, lp, osdep, NULL, NULL, spoofonly);
d72 1
a72 1
	msg = readdoslabel(bp, strat, lp, osdep, NULL, NULL, spoofonly);
d99 1
a99 2
    struct disklabel *lp, struct cpu_disklabel *osdep,
    int *partoffp, int *cylp, int spoofonly)
a110 1
	bp->b_cylinder = btodb(LIF_VOLSTART) / lp->d_secpercyl;
a125 1
	dbp->b_cylinder = dbp->b_blkno / lp->d_secpercyl;
a157 1
		dbp->b_cylinder = dbp->b_blkno / lp->d_secpercyl;
a219 1
	bp->b_cylinder = 0;
d244 1
a244 2
writedisklabel(dev_t dev, void (*strat)(struct buf *),
    struct disklabel *lp, struct cpu_disklabel *osdep)
d254 2
a255 2
	if (readliflabel(bp, strat, lp, osdep, &partoff, &cyl, 1) != NULL &&
	    readdoslabel(bp, strat, lp, osdep, &partoff, &cyl, 1) != NULL)
a259 1
	bp->b_cylinder = cyl;
@


1.50
log
@simplify error return case from writedisklabel()
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.49 2007/06/17 00:27:28 deraadt Exp $	*/
d104 1
d106 1
a106 1
	int fsoff = 0;
d117 2
a118 3
	bcopy(bp->b_data, &osdep->u._hppa.lifvol, sizeof(struct lifvol));
	if (osdep->u._hppa.lifvol.vol_id != LIF_VOL_ID) {
		fsoff = 0;
a119 1
	}
d125 1
a125 1
	dbp->b_blkno = lifstodb(osdep->u._hppa.lifvol.vol_addr);
a135 2
	bcopy(dbp->b_data, osdep->u._hppa.lifdir, LIF_DIRSIZE);

d137 2
a138 4
	for (fsoff = -1,  p = &osdep->u._hppa.lifdir[0];
	    fsoff < 0 && p < &osdep->u._hppa.lifdir[LIF_NUMDIR]; p++) {
		if (p->dir_type == LIF_DIR_FS ||
		    p->dir_type == LIF_DIR_HPLBL)
d169 1
a169 4
		bcopy(dbp->b_data, &osdep->u._hppa.hplabel,
		    sizeof(osdep->u._hppa.hplabel));

		hl = &osdep->u._hppa.hplabel;
a216 3
	/* if no suitable lifdir entry found assume zero */
	if (fsoff < 0)
		fsoff = 0;
@


1.49
log
@significantly simplified disklabel infrastructure.  MBR handling becomes MI
to support hotplug media on most architectures.  disklabel setup and
verification done using new helper functions.  Disklabels must *always*
have a correct checksum now.  Same code paths are used to learn on-disk
location disklabels, to avoid new errors sneaking in.  Tested on almost all
cases, testing help from todd, kettenis, krw, otto, dlg, robert, gwk, drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.48 2007/06/14 03:37:23 deraadt Exp $	*/
d263 1
a263 1
	int error, partoff = -1, cyl = 0;
d271 3
a273 8
	if (readliflabel(bp, strat, lp, osdep, &partoff, &cyl, 1) == NULL)
		goto writeit;

	if (readdoslabel(bp, strat, lp, osdep, &partoff, &cyl, 1) == NULL)
		goto writeit;

	error = EIO;
	goto done;
a274 1
writeit:
@


1.48
log
@excessive blank lines making the versions different
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.47 2007/06/14 03:35:29 deraadt Exp $	*/
a32 10
 *
 *	@@(#)ufs_disksubr.c	7.16 (Berkeley) 5/4/91
 */

/*
 * This disksubr.c module started to take its present form on OpenBSD/alpha
 * but it was always thought it should be made completely MI and not need to
 * be in that alpha-specific tree at all.
 *
 * XXX HPUX disklabel is not understood yet.
a37 1
#include <sys/device.h>
a38 1
#include <sys/syslog.h>
a40 4
char   *readbsdlabel(struct buf *, void (*)(struct buf *), int, int,
    int, struct disklabel *, int);
char   *readdoslabel(struct buf *, void (*)(struct buf *),
    struct disklabel *, struct cpu_disklabel *, int *, int *, int);
a44 57
 * Try to read a standard BSD disklabel at a certain sector.
 */
char *
readbsdlabel(struct buf *bp, void (*strat)(struct buf *),
    int cyl, int sec, int off, struct disklabel *lp, int spoofonly)
{
	struct disklabel *dlp;
	char *msg = NULL;
	u_int16_t cksum;

	/* don't read the on-disk label if we are in spoofed-only mode */
	if (spoofonly)
		return (NULL);

	bp->b_blkno = sec;
	bp->b_cylinder = cyl;
	bp->b_bcount = lp->d_secsize;
	bp->b_flags = B_BUSY | B_READ;
	(*strat)(bp);

	/* if successful, locate disk label within block and validate */
	if (biowait(bp)) {
		/* XXX we return the faked label built so far */
		msg = "disk label I/O error";
		return (msg);
	}

	/*
	 * If off is negative, search until the end of the sector for
	 * the label, otherwise, just look at the specific location
	 * we're given.
	 */
	dlp = (struct disklabel *)(bp->b_data + (off >= 0 ? off : 0));
	do {
		if (dlp->d_magic != DISKMAGIC || dlp->d_magic2 != DISKMAGIC) {
			if (msg == NULL)
				msg = "no disk label";
		} else {
			cksum = dkcksum(dlp);
			if (dlp->d_npartitions > MAXPARTITIONS || cksum != 0) {
				msg = "disk label corrupted";
			} else {
				DL_SETDSIZE(dlp, DL_GETDSIZE(lp));
				*lp = *dlp;
				msg = NULL;
				break;
			}
		}
		if (off >= 0)
			break;
		dlp = (struct disklabel *)((char *)dlp + sizeof(int32_t));
	} while (dlp <= (struct disklabel *)(bp->b_data + lp->d_secsize -
	    sizeof(*dlp)));
	return (msg);
}

/*
d59 3
a61 11
	char *msg = "no disk label";
	int i;
	struct disklabel minilabel, fallbacklabel;

	/* minimal requirements for archetypal disk label */
	if (lp->d_secsize < DEV_BSIZE)
		lp->d_secsize = DEV_BSIZE;
	if (DL_GETDSIZE(lp) == 0)
		DL_SETDSIZE(lp, MAXDISKSIZE);
	if (lp->d_secpercyl == 0) {
		msg = "invalid geometry";
a62 11
	}
	lp->d_npartitions = RAW_PART + 1;
	for (i = 0; i < RAW_PART; i++) {
		DL_SETPSIZE(&lp->d_partitions[i], 0);
		DL_SETPOFFSET(&lp->d_partitions[i], 0);
	}
	if (DL_GETPSIZE(&lp->d_partitions[RAW_PART]) == 0)
		DL_SETPSIZE(&lp->d_partitions[RAW_PART], DL_GETDSIZE(lp));
	DL_SETPOFFSET(&lp->d_partitions[RAW_PART], 0);
	lp->d_version = 1;
	minilabel = fallbacklabel = *lp;
d68 7
a74 11
	msg = readliflabel(bp, strat, lp, osdep, 0, 0, spoofonly);
	if (msg)
		*lp = minilabel;
	if (msg) {
		msg = readdoslabel(bp, strat, lp, osdep, 0, 0, spoofonly);
		if (msg) {
			/* Fallback alternative XXX always valid? */
			fallbacklabel = *lp;
			*lp = minilabel;
		}
	}
d77 1
a77 1
	if (msg && iso_disklabelspoof(dev, strat, lp) == 0)
d79 2
d83 1
a83 1
	if (msg && udf_disklabelspoof(dev, strat, lp) == 0)
d85 2
a88 4
	/* If there was an error, still provide a decent fake one.  */
	if (msg)
		*lp = fallbacklabel;

a93 1
	disklabeltokernlabel(lp);
a96 9
/*
 * If dos partition table requested, attempt to load it and
 * find disklabel inside a DOS partition. Return buffer
 * for use in signalling errors if requested.
 *
 * We would like to check if each MBR has a valid BOOT_MAGIC, but
 * we cannot because it doesn't always exist. So.. we assume the
 * MBR is valid.
 */
d98 1
a98 1
readdoslabel(struct buf *bp, void (*strat)(struct buf *),
d102 2
a103 5
	struct dos_partition dp[NDOSPART], *dp2;
	struct partition *pp;
	unsigned long extoff = 0;
	unsigned int fattest;
	daddr64_t part_blkno = DOSBBSECTOR;
d105 1
a105 180
	int dospartoff, cyl, i, ourpart = -1;
	int wander = 1, n = 0, loop = 0;

	if (lp->d_secpercyl == 0) {
		msg = "invalid label, d_secpercyl == 0";
		return (msg);
	}
	if (lp->d_secsize == 0) {
		msg = "invalid label, d_secsize == 0";
		return (msg);
	}

	/* do dos partitions in the process of getting disklabel? */
	dospartoff = 0;
	cyl = LABELSECTOR / lp->d_secpercyl;

	/*
	 * Read dos partition table, follow extended partitions.
	 * Map the partitions to disklabel entries i-p
	 */
	while (wander && n < 8 && loop < 8) {
		loop++;
		wander = 0;
		if (part_blkno < extoff)
			part_blkno = extoff;

		/* read boot record */
		bp->b_blkno = part_blkno;
		bp->b_bcount = lp->d_secsize;
		bp->b_flags = B_BUSY | B_READ;
		bp->b_cylinder = part_blkno / lp->d_secpercyl;
		(*strat)(bp);

		/* if successful, wander through dos partition table */
		if (biowait(bp)) {
			msg = "dos partition I/O error";
			if (partoffp)
				*partoffp = -1;
			return (msg);
		}
		bcopy(bp->b_data + DOSPARTOFF, dp, sizeof(dp));

		if (ourpart == -1 && part_blkno == DOSBBSECTOR) {
			/* Search for our MBR partition */
			for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
			    i++, dp2++)
				if (letoh32(dp2->dp_size) &&
				    dp2->dp_typ == DOSPTYP_OPENBSD)
					ourpart = i;
			if (ourpart == -1)
				goto donot;
			/*
			 * This is our MBR partition. need sector
			 * address for SCSI/IDE, cylinder for
			 * ESDI/ST506/RLL
			 */
			dp2 = &dp[ourpart];
			dospartoff = letoh32(dp2->dp_start) + part_blkno;
			cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);

			/* XXX build a temporary disklabel */
			DL_SETPSIZE(&lp->d_partitions[0], letoh32(dp2->dp_size));
			DL_SETPOFFSET(&lp->d_partitions[0],
			    letoh32(dp2->dp_start) + part_blkno);
			if (lp->d_ntracks == 0)
				lp->d_ntracks = dp2->dp_ehd + 1;
			if (lp->d_nsectors == 0)
				lp->d_nsectors = DPSECT(dp2->dp_esect);
			if (lp->d_secpercyl == 0)
				lp->d_secpercyl = lp->d_ntracks *
				    lp->d_nsectors;
		}
donot:
		/*
		 * In case the disklabel read below fails, we want to
		 * provide a fake label in i-p.
		 */
		for (dp2=dp, i=0; i < NDOSPART && n < 8; i++, dp2++) {
			pp = &lp->d_partitions[8+n];

			if (dp2->dp_typ == DOSPTYP_OPENBSD)
				continue;
			if (letoh32(dp2->dp_size) > DL_GETDSIZE(lp))
				continue;
			if (letoh32(dp2->dp_start) > DL_GETDSIZE(lp))
				continue;
			if (letoh32(dp2->dp_size) == 0)
				continue;
			if (letoh32(dp2->dp_start))
				DL_SETPOFFSET(pp,
				    letoh32(dp2->dp_start) + part_blkno);

			DL_SETPSIZE(pp, letoh32(dp2->dp_size));

			switch (dp2->dp_typ) {
			case DOSPTYP_UNUSED:
				pp->p_fstype = FS_UNUSED;
				n++;
				break;

			case DOSPTYP_LINUX:
				pp->p_fstype = FS_EXT2FS;
				n++;
				break;

			case DOSPTYP_FAT12:
			case DOSPTYP_FAT16S:
			case DOSPTYP_FAT16B:
			case DOSPTYP_FAT16L:
			case DOSPTYP_FAT32:
			case DOSPTYP_FAT32L:
				pp->p_fstype = FS_MSDOS;
				n++;
				break;
			case DOSPTYP_EXTEND:
			case DOSPTYP_EXTENDL:
				part_blkno = letoh32(dp2->dp_start) + extoff;
				if (!extoff) {
					extoff = letoh32(dp2->dp_start);
					part_blkno = 0;
				}
				wander = 1;
				break;
			default:
				pp->p_fstype = FS_OTHER;
				n++;
				break;
			}
		}
	}
	lp->d_bbsize = 8192;
	lp->d_sbsize = 64*1024;		/* XXX ? */
	lp->d_npartitions = MAXPARTITIONS;

	if (n == 0 && part_blkno == DOSBBSECTOR) {
		/* Check for a short jump instruction. */
		fattest = ((bp->b_data[0] << 8) & 0xff00) | (bp->b_data[2] &
		    0xff);
		if (fattest != 0xeb90 && fattest != 0xe900)
			goto notfat;

		/* Check for a valid bytes per sector value. */
		fattest = ((bp->b_data[12] << 8) & 0xff00) | (bp->b_data[11] &
		    0xff);
		if (fattest < 512 || fattest > 4096 || (fattest % 512 != 0))
			goto notfat;

		/* Check the end of sector marker. */
		fattest = ((bp->b_data[510] << 8) & 0xff00) | (bp->b_data[511] &
		    0xff);
		if (fattest != 0x55aa)
			goto notfat;

		/* Looks like a FAT filesystem. Spoof 'i'. */
		DL_SETPSIZE(&lp->d_partitions['i' - 'a'],
		    DL_GETPSIZE(&lp->d_partitions[RAW_PART]));
		DL_SETPOFFSET(&lp->d_partitions['i' - 'a'], 0);
		lp->d_partitions['i' - 'a'].p_fstype = FS_MSDOS;
	}
notfat:

	/* record the OpenBSD partition's placement for the caller */
	if (partoffp)
		*partoffp = dospartoff;
	if (cylp)
		*cylp = cyl;

	/* next, dig out disk label */
	msg = readbsdlabel(bp, strat, cyl, dospartoff + LABELSECTOR, -1,
	    lp, spoofonly);

	return (msg);
}

char *
readliflabel(struct buf *bp, void (*strat)(struct buf *),
    struct disklabel *lp, struct cpu_disklabel *osdep,
    int *partoffp, int *cylp, int spoofonly)
{
	int fsoff;
d113 1
a113 4

	if (biowait(bp)) {
		if (partoffp)
			*partoffp = -1;
a114 1
	}
d116 1
a116 1
	bcopy (bp->b_data, &osdep->u._hppa.lifvol, sizeof(struct lifvol));
d119 42
a160 8
	} else {
		struct lifdir *p;
		struct buf *dbp;
		dev_t dev;

		dev = bp->b_dev;
		dbp = geteblk(LIF_DIRSIZE);
		dbp->b_dev = dev;
d163 1
a163 1
		dbp->b_blkno = lifstodb(osdep->u._hppa.lifvol.vol_addr);
d170 6
a175 2
			if (partoffp)
				*partoffp = -1;
d177 5
a181 3
			dbp->b_flags |= B_INVAL;
			brelse(dbp);
			return ("LIF directory I/O error");
d184 6
a189 10
		bcopy(dbp->b_data, osdep->u._hppa.lifdir, LIF_DIRSIZE);
		dbp->b_flags |= B_INVAL;
		brelse(dbp);

		/* scan for LIF_DIR_FS dir entry */
		for (fsoff = -1,  p = &osdep->u._hppa.lifdir[0];
		    fsoff < 0 && p < &osdep->u._hppa.lifdir[LIF_NUMDIR]; p++) {
			if (p->dir_type == LIF_DIR_FS ||
			    p->dir_type == LIF_DIR_HPLBL)
				break;
d192 14
a205 80
		if (p->dir_type == LIF_DIR_FS)
			fsoff = lifstodb(p->dir_addr);
		else if (p->dir_type == LIF_DIR_HPLBL) {
			struct hpux_label *hl;
			struct partition *pp;
			u_int8_t fstype;
			int i;

			dev = bp->b_dev;
			dbp = geteblk(LIF_DIRSIZE);
			dbp->b_dev = dev;

			/* read LIF directory */
			dbp->b_blkno = lifstodb(p->dir_addr);
			dbp->b_bcount = lp->d_secsize;
			dbp->b_flags = B_BUSY | B_READ;
			dbp->b_cylinder = dbp->b_blkno / lp->d_secpercyl;
			(*strat)(dbp);

			if (biowait(dbp)) {
				if (partoffp)
					*partoffp = -1;

				dbp->b_flags |= B_INVAL;
				brelse(dbp);
				return ("HOUX label I/O error");
			}

			bcopy(dbp->b_data, &osdep->u._hppa.hplabel,
			    sizeof(osdep->u._hppa.hplabel));
			dbp->b_flags |= B_INVAL;
			brelse(dbp);

			hl = &osdep->u._hppa.hplabel;
			if (hl->hl_magic1 != hl->hl_magic2 ||
			    hl->hl_magic != HPUX_MAGIC ||
			    hl->hl_version != 1) {
				if (partoffp)
					*partoffp = -1;

				return "HPUX label magic mismatch";
			}

			lp->d_bbsize = 8192;
			lp->d_sbsize = 8192;
			for (i = 0; i < MAXPARTITIONS; i++) {
				DL_SETPSIZE(&lp->d_partitions[i], 0);
				DL_SETPOFFSET(&lp->d_partitions[i], 0);
				lp->d_partitions[i].p_fstype = 0;
			}

			for (i = 0; i < HPUX_MAXPART; i++) {
				if (!hl->hl_flags[i])
					continue;

				if (hl->hl_flags[i] == HPUX_PART_ROOT) {
					pp = &lp->d_partitions[0];
					fstype = FS_BSDFFS;
				} else if (hl->hl_flags[i] == HPUX_PART_SWAP) {
					pp = &lp->d_partitions[1];
					fstype = FS_SWAP;
				} else if (hl->hl_flags[i] == HPUX_PART_BOOT) {
					pp = &lp->d_partitions[RAW_PART + 1];
					fstype = FS_BSDFFS;
				} else
					continue;

				DL_SETPSIZE(pp, hl->hl_parts[i].hlp_length * 2);
				DL_SETPOFFSET(pp, hl->hl_parts[i].hlp_start * 2);
				pp->p_fstype = fstype;
			}

			DL_SETPSIZE(&lp->d_partitions[RAW_PART], DL_GETDSIZE(lp));
			DL_SETPOFFSET(&lp->d_partitions[RAW_PART], 0);
			lp->d_partitions[RAW_PART].p_fstype = FS_UNUSED;
			lp->d_npartitions = MAXPARTITIONS;
			lp->d_magic = DISKMAGIC;
			lp->d_magic2 = DISKMAGIC;
			lp->d_checksum = 0;
			lp->d_checksum = dkcksum(lp);
d207 3
a209 1
			return (NULL);
d212 10
a221 4
		/* if no suitable lifdir entry found assume zero */
		if (fsoff < 0) {
			fsoff = 0;
		}
d224 4
d231 23
a253 2
	return readbsdlabel(bp, strat, 0,  fsoff + LABELSECTOR,
	    LABELOFFSET, lp, spoofonly);
d263 3
a265 5
	char *msg = "no disk label";
	struct buf *bp;
	struct disklabel dl;
	struct cpu_disklabel cdl;
	int labeloffset, error, partoff = 0, cyl = 0;
d271 8
a278 18
	dl = *lp;
	msg = readliflabel(bp, strat, &dl, &cdl, &partoff, &cyl, 0);
	labeloffset = LABELOFFSET;
	if (msg) {
		dl = *lp;
		msg = readdoslabel(bp, strat, &dl, &cdl, &partoff, &cyl, 0);
		labeloffset = LABELOFFSET;
	}
	if (msg) {
		if (partoff == -1)
			return EIO;

		/* Write it in the regular place with native byte order. */
		labeloffset = LABELOFFSET;
		bp->b_blkno = partoff + LABELSECTOR;
		bp->b_cylinder = cyl;
		bp->b_bcount = lp->d_secsize;
	}
d280 9
a288 1
	*(struct disklabel *)(bp->b_data + labeloffset) = *lp;
d290 2
d296 5
a300 2
	bp->b_flags |= B_INVAL;
	brelse(bp);
@


1.47
log
@set the prototype disklabel to version 1
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.46 2007/06/14 03:29:34 deraadt Exp $	*/
a543 2


@


1.46
log
@do not depend on previous loop variable, use a constant instead
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.45 2007/06/09 23:06:46 krw Exp $	*/
d153 1
@


1.45
log
@The differences in the last non-homogeneous bounds_check_with_label()
routines (alpha, vax) prove to be not worth keeping. Move
bounds_check_with_label() into the MI world. Eliminate unreliable and
almost certainly useless checks for overwriting a disklabel.

After discussion with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.44 2007/06/09 18:05:47 deraadt Exp $	*/
d150 3
a152 3
	if (DL_GETPSIZE(&lp->d_partitions[i]) == 0)
		DL_SETPSIZE(&lp->d_partitions[i], DL_GETDSIZE(lp));
	DL_SETPOFFSET(&lp->d_partitions[i], 0);
@


1.44
log
@unify DOSPTYP_FAT* code (some architectures missed a filesystem type or two)
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.43 2007/06/09 04:08:39 deraadt Exp $	*/
a590 56
}

/*
 * Determine the size of the transfer, and make sure it is
 * within the boundaries of the partition. Adjust transfer
 * if needed, and signal errors or early completion.
 */
int
bounds_check_with_label(struct buf *bp, struct disklabel *lp,
    struct cpu_disklabel *osdep, int wlabel)
{
#define blockpersec(count, lp) ((count) * (((lp)->d_secsize) / DEV_BSIZE))
	struct partition *p = lp->d_partitions + DISKPART(bp->b_dev);
	int labelsector = blockpersec(DL_GETPOFFSET(&lp->d_partitions[RAW_PART]), lp) +
	    LABELSECTOR;
	int sz = howmany(bp->b_bcount, DEV_BSIZE);

	/* avoid division by zero */
	if (lp->d_secpercyl == 0) {
		bp->b_error = EINVAL;
		goto bad;
	}

	/* beyond partition? */
	if (bp->b_blkno + sz > blockpersec(DL_GETPSIZE(p), lp)) {
		sz = blockpersec(DL_GETPSIZE(p), lp) - bp->b_blkno;
		if (sz == 0) {
			/* If exactly at end of disk, return EOF. */
			bp->b_resid = bp->b_bcount;
			return (-1);
		}
		if (sz < 0) {
			/* If past end of disk, return EINVAL. */
			bp->b_error = EINVAL;
			goto bad;
		}
		/* Otherwise, truncate request. */
		bp->b_bcount = sz << DEV_BSHIFT;
	}

	/* Overwriting disk label? */
	if (bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp) <= labelsector &&
	    bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp) + sz > labelsector &&
	    (bp->b_flags & B_READ) == 0 && !wlabel) {
		bp->b_error = EROFS;
		goto bad;
	}

	/* calculate cylinder for disksort to order transfers with */
	bp->b_cylinder = (bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp)) /
	    lp->d_secpercyl;
	return (1);

bad:
	bp->b_flags |= B_ERROR;
	return (-1);
@


1.43
log
@by hand i carefully found that all the differences in setdisklabel()
implimentations were simply either missing code, or spacing and such.
setdisklabel() can become MI now.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.42 2007/06/09 02:03:47 deraadt Exp $	*/
d321 1
a323 1
			case DOSPTYP_FAT16L:
d329 1
a329 2
				part_blkno =
				    letoh32(dp2->dp_start) + extoff;
@


1.42
log
@annoying spacing glitch which makes the diffs bigger
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.41 2007/06/08 05:34:27 deraadt Exp $	*/
a544 60
/*
 * Check new disk label for sensibility
 * before setting it.
 */
int
setdisklabel(struct disklabel *olp, struct disklabel *nlp,
    u_int openmask, struct cpu_disklabel *osdep)
{
	int i;
	struct partition *opp, *npp;

	/* sanity clause */
	if (nlp->d_secpercyl == 0 || nlp->d_secsize == 0 ||
	    (nlp->d_secsize % DEV_BSIZE) != 0)
		return (EINVAL);

	/*
	 * XXX Nice thought, but it doesn't work, if the intention was to
	 * force a reread at the next *readdisklabel call.  That does not
	 * happen.  There's still some use for it though as you can pseudo-
	 * partition the disk.
	 *
	 * Special case to allow disklabel to be invalidated.
	 */
	if (nlp->d_magic == 0xffffffff) {
		*olp = *nlp;
		return (0);
	}

	if (nlp->d_magic != DISKMAGIC || nlp->d_magic2 != DISKMAGIC ||
	    dkcksum(nlp) != 0)
		return (EINVAL);

	/* XXX missing check if other dos partitions will be overwritten */

	while (openmask != 0) {
		i = ffs(openmask) - 1;
		openmask &= ~(1 << i);
		if (nlp->d_npartitions <= i)
			return (EBUSY);
		opp = &olp->d_partitions[i];
		npp = &nlp->d_partitions[i];
		if (DL_GETPOFFSET(npp) != DL_GETPOFFSET(opp) ||
		    DL_GETPSIZE(npp) < DL_GETPSIZE(opp))
			return (EBUSY);
		/*
		 * Copy internally-set partition information
		 * if new label doesn't include it.		XXX
		 */
		if (npp->p_fstype == FS_UNUSED && opp->p_fstype != FS_UNUSED) {
			npp->p_fstype = opp->p_fstype;
			npp->p_fragblock = opp->p_fragblock;
			npp->p_cpg = opp->p_cpg;
		}
	}
	nlp->d_checksum = 0;
	nlp->d_checksum = dkcksum(nlp);
	*olp = *nlp;
	return (0);
}
@


1.41
log
@all disklabels read from the kernel now always contain a total sector
size which is the REAL DISK SIZE.  always.  if a driver fails to set
this right, please fix it.  agreed with otto and krw
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.40 2007/06/07 02:55:12 krw Exp $	*/
d559 1
a559 1
		return(EINVAL);
@


1.40
log
@Eliminate unnecessary duplicate defines *_LABELSECTOR and
*_LABELOFFSET.  Don't use osdep->labelsector since it will always be
LABELSECTOR, since we don't support extended DOS partitions holding
the OpenBSD disk label.

No functional change. Now only Alpha and Vax bounds_check_with_label
differ by more than comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.39 2007/06/07 00:28:17 krw Exp $	*/
d103 1
@


1.39
log
@More bounds_check_with_label homogenization. Fix a couple of typos while
there.

'so go to it!' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.38 2007/06/06 17:15:12 deraadt Exp $	*/
a168 4
	/* Record metainformation about the disklabel.  */
	if (msg == NULL) {
		osdep->labelsector = bp->b_blkno;
	}
d226 1
a226 1
	cyl = I386_LABELSECTOR / lp->d_secpercyl;
d381 1
a381 1
	msg = readbsdlabel(bp, strat, cyl, dospartoff + I386_LABELSECTOR, -1,
d540 2
a541 2
	return readbsdlabel(bp, strat, 0,  fsoff + HPPA_LABELSECTOR,
	    HPPA_LABELOFFSET, lp, spoofonly);
a622 6
	/*
	 * I once played with the thought of using osdep->label{tag,sector}
	 * as a cache for knowing where (and what) to write.  However, now I
	 * think it might be useful to reprobe if someone has written
	 * a newer disklabel of another type with disklabel(8) and -r.
	 */
d625 1
a625 1
	labeloffset = HPPA_LABELOFFSET;
d629 1
a629 1
		labeloffset = I386_LABELOFFSET;
d665 1
a665 1
	    osdep->labelsector;
@


1.38
log
@now that all partition size/offsets are potentially 64-bit, change the
type of all variables to daddr64_t.  this includes the APIs for XXsize()
and XXdump(), all range checks inside bio drivers, internal variables
for disklabel handling, and even uvm's swap offsets.  re-read numerous
times by otto, miod, krw, thib to look for errors
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.37 2007/06/06 16:42:06 deraadt Exp $	*/
d690 1
a690 1
			goto done;
a715 1
done:
@


1.37
log
@a fair sprinking of knf, code movement, and sometimes character-by-character
accuracy so that the variious disksubr.c's can be compared easier.
setdisklabel() starts taking an int for openmask.
ok krw, and read by quite a few other people
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.53 2007/06/05 00:38:15 deraadt Exp $	*/
d214 1
a214 1
	daddr_t part_blkno = DOSBBSECTOR;
@


1.36
log
@use six new macros to access & store the 48-bit disklabel fields related
to size.  tested on almost all machines, double checked by miod and krw
next comes the type handling surrounding these values
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.35 2007/06/02 02:35:26 krw Exp $	*/
d64 2
a65 6
readbsdlabel(bp, strat, cyl, sec, off, lp, spoofonly)
	struct buf *bp;
	void (*strat)(struct buf *);
	int cyl, sec, off;
	struct disklabel *lp;
	int spoofonly;
d127 2
a128 6
readdisklabel(dev, strat, lp, osdep, spoofonly)
	dev_t dev;
	void (*strat)(struct buf *);
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int spoofonly;
d178 4
d206 3
a208 8
readdoslabel(bp, strat, lp, osdep, partoffp, cylp, spoofonly)
	struct buf *bp;
	void (*strat)(struct buf *);
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int *partoffp;
	int *cylp;
	int spoofonly;
d392 3
a394 8
readliflabel (bp, strat, lp, osdep, partoffp, cylp, spoofonly)
	struct buf *bp;
	void (*strat)(struct buf *);
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int *partoffp;
	int *cylp;
	int spoofonly;
d553 2
a554 4
setdisklabel(olp, nlp, openmask, osdep)
	struct disklabel *olp, *nlp;
	u_long openmask;
	struct cpu_disklabel *osdep;
d584 1
a584 1
		i = ffs((long)openmask) - 1;
d614 2
a615 5
writedisklabel(dev, strat, lp, osdep)
	dev_t dev;
	void (*strat)(struct buf *);
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
d636 1
a636 1
	if (msg) {	
@


1.35
log
@Rename cvtdisklabelv1 -> disklabeltokernlabel. It does more than just
convert version 0 to version 1 disklabels.

Suggested by deraadt@@.

ok deraadt@@ otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.34 2007/05/31 19:57:43 krw Exp $	*/
d146 2
a147 2
	if (lp->d_secperunit == 0)
		lp->d_secperunit = 0x1fffffff;
d154 2
a155 2
		lp->d_partitions[i].p_size = 0;
		lp->d_partitions[i].p_offset = 0;
d157 3
a159 3
	if (lp->d_partitions[i].p_size == 0)
		lp->d_partitions[i].p_size = lp->d_secperunit;
	lp->d_partitions[i].p_offset = 0;
d286 3
a288 3
			lp->d_partitions[0].p_size = letoh32(dp2->dp_size);
			lp->d_partitions[0].p_offset =
			    letoh32(dp2->dp_start) + part_blkno;
d307 1
a307 1
			if (letoh32(dp2->dp_size) > lp->d_secperunit)
d309 1
a309 1
			if (letoh32(dp2->dp_start) > lp->d_secperunit)
d314 2
a315 2
				pp->p_offset =
				    letoh32(dp2->dp_start) + part_blkno;
d317 1
a317 1
			pp->p_size = letoh32(dp2->dp_size);
d380 3
a382 3
		lp->d_partitions['i' - 'a'].p_size =
		    lp->d_partitions[RAW_PART].p_size;
		lp->d_partitions['i' - 'a'].p_offset = 0;
d511 2
a512 2
				lp->d_partitions[i].p_size = 0;
				lp->d_partitions[i].p_offset = 0;
d532 2
a533 2
				pp->p_size = hl->hl_parts[i].hlp_length * 2;
				pp->p_offset = hl->hl_parts[i].hlp_start * 2;
d537 2
a538 2
			lp->d_partitions[RAW_PART].p_size = lp->d_secperunit;
			lp->d_partitions[RAW_PART].p_offset = 0;
d606 2
a607 2
		if (npp->p_offset != opp->p_offset ||
		    npp->p_size < opp->p_size)
d693 1
a693 1
	int labelsector = blockpersec(lp->d_partitions[RAW_PART].p_offset, lp) +
d704 2
a705 2
	if (bp->b_blkno + sz > blockpersec(p->p_size, lp)) {
		sz = blockpersec(p->p_size, lp) - bp->b_blkno;
d721 2
a722 2
	if (bp->b_blkno + blockpersec(p->p_offset, lp) <= labelsector &&
	    bp->b_blkno + blockpersec(p->p_offset, lp) + sz > labelsector &&
d729 1
a729 1
	bp->b_cylinder = (bp->b_blkno + blockpersec(p->p_offset, lp)) /
@


1.34
log
@KNF, whitespace and comment rectification to make all
bounds_check_with_label() routines as identical as possible without
changing any code. Code nits and adjustments to come.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.33 2007/05/31 16:05:50 krw Exp $	*/
d196 1
a196 1
	cvtdisklabelv1(lp);
@


1.33
log
@Standardize on -1 as the error return value for
bounds_check_with_label. All callers check for <= 0, so no functional
change.

Feedback from miod@@.

ok weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.32 2007/05/29 06:28:15 otto Exp $	*/
d688 2
a689 5
bounds_check_with_label(bp, lp, osdep, wlabel)
	struct buf *bp;
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int wlabel;
d693 2
a694 2
	int labelsector = blockpersec(lp->d_partitions[RAW_PART].p_offset,
	    lp) + osdep->labelsector;
@


1.32
log
@Updated disklabel format to support larger disks and partitions. We
free room in struct partition by packing fragment size and
fragments/block more tighlty and use the resulting space to make
offset and size 48 bits.  For the disk part we use spare fields in
struct disklabel.  Kernel converts in-mem copy of the on-disk
label if needed, disklabel(8) writes new version.
We are careful to only change fields not used by bootloaders.
Conception of basic scheme by deraadt.
ok deraadt@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.31 2007/05/29 05:08:19 krw Exp $	*/
d739 1
a739 1
	return (0);
@


1.31
log
@Refactor readdisklabel() to ensure there is a single point of return, in
preparation for translating all disk labels visible to the kernel to
the soon to arrive V1 format.

ok otto@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.30 2007/02/18 14:18:28 krw Exp $	*/
d196 1
d615 1
a615 2
			npp->p_fsize = opp->p_fsize;
			npp->p_frag = opp->p_frag;
@


1.30
log
@Remove #ifdef/#endif's around MBR checking code. Remove now unused
option DISKLABEL_I386.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.29 2007/02/18 13:49:22 krw Exp $	*/
d148 4
a151 2
	if (lp->d_secpercyl == 0)
		return ("invalid geometry");
d191 1
@


1.29
log
@If no MBR partitions are found when spoofing a disklabel, try looking
for a bare FAT12/16/32 filesystem.  If one is found, spoof it as 'i'.
This enables iPod shuffles and other umass devices that are shipped
with a bare FAT32 filesystem to be used as install media. And
generally makes things easier for the user just trying to mount some
media, e.g.  floppies.

Does not make it safe to write a disklabel or MBR on such a device!
That will still obliterate the FAT filesystem.

Help and suggestions from tom@@ and deraadt@@. Feedback and suggestions
for future enhancements from espie@@ mickey@@ and peter@@.

ok tom@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.28 2007/02/03 18:22:33 krw Exp $	*/
a54 1
#if defined(DISKLABEL_I386)
a56 1
#endif
a166 1
#if defined(DISKLABEL_I386)
a174 1
#endif
a195 1
#if defined(DISKLABEL_I386)
a394 1
#endif
a651 1
#if defined(DISKLABEL_I386)
a656 1
#endif
@


1.28
log
@Don't spoof an msdosfs partition if it claims to start after the end
of the disk. Fixes the creation of spurious 'i' partitions on new iPod
Shuffle.  And other devices with no MBR, just a FAT32 filesystem.

Pointed out most recently by Stephan A. Rickauer for his sixth
generation, clip-on iPod shuffle.

Fix tested by Stephan.

ok pedro@@ tom@@ miod@@ 'nice' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.27 2006/10/28 23:26:05 krw Exp $	*/
d223 1
d359 28
a386 1
	lp->d_npartitions = n > 0 ? n + 8 : 3;
@


1.27
log
@We don't currently write a disklabel into an OpenBSD ('A6') DOS MBR
extended partition except on alpha, hppa, hppa64 and mips64. So don't
spoof extended partitions as 'a' and try to read a disklabel from
them. Make all archs consistant.

When we can boot from extended partitions we can change to reading and
writing disklabels from them.

This means the first OpenBSD ('A6') extended partition will now be
ignored during spoofing, just as subsequent ones have always been.

Feedback from tom@@, weingart@@ and deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.26 2006/10/21 20:10:39 krw Exp $	*/
d308 2
@


1.26
log
@Don't try to spoof 0 length DOS MBR/EBR partitions. By skipping
partitions with 0 in the length field we don't need to test for
and skip partitions that are all zeros. Eliminating that code
allows elimination of a local pointer.

"0 length partitions are definately dead" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.25 2006/10/21 16:01:54 krw Exp $	*/
d267 1
a267 1
		if (ourpart == -1) {
@


1.25
log
@Some KNF cleanup.

De-register. Move declaration to top of function for DOS MBR
processing. Indent nit in macppc.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.24 2006/10/21 14:18:37 krw Exp $	*/
d224 1
a224 1
	char *msg = NULL, *cp;
d309 2
a310 2
			if (letoh32(dp2->dp_size))
				pp->p_size = letoh32(dp2->dp_size);
d315 2
a318 11
				for (cp = (char *)dp2;
				    cp < (char *)(dp2 + 1); cp++)
					if (*cp)
						break;
				/*
				 * Was it all zeroes?  If so, it is
				 * an unused entry that we don't
				 * want to show.
				 */
				if (cp == (char *)(dp2 + 1))
				    continue;
@


1.24
log
@We have a pointer (pp), so use it in the DOSPTYP_UNUSED case rather
than lp->d_partitions[8+n++]. All other cases already use the pointer.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.23 2006/10/20 23:47:42 krw Exp $	*/
d221 1
d303 1
a303 1
			struct partition *pp = &lp->d_partitions[8+n];
@


1.23
log
@Try again with local variable to avoid alignment issues.

"The dosparts member of cpu_disklabel was not used for any persistant
data. Eliminate it, and just use the data being read in while
processing MBR and EBR records.

Should be no functional change.

ok weingart@@ deraadt@@"
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.22 2006/10/18 20:09:38 deraadt Exp $	*/
d327 2
a328 2
				lp->d_partitions[8 + n++].p_fstype =
				    FS_UNUSED;
@


1.22
log
@back out disksubr changes ... since they violate strict alignment on
some architectures (kaboom); that will be fixed in the next iteration
hopefully!
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.20 2006/10/10 03:17:45 krw Exp $	*/
d220 3
a222 1
	struct dos_partition *dp = osdep->u._i386.dosparts, *dp2;
d225 1
a238 4
	if (dp) {
		daddr_t part_blkno = DOSBBSECTOR;
		unsigned long extoff = 0;
		int wander = 1, n = 0, loop = 0;
d240 57
d298 2
a299 2
		 * Read dos partition table, follow extended partitions.
		 * Map the partitions to disklabel entries i-p
d301 12
a312 22
		while (wander && n < 8 && loop < 8) {
			loop++;
			wander = 0;
			if (part_blkno < extoff)
				part_blkno = extoff;

			/* read boot record */
			bp->b_blkno = part_blkno;
			bp->b_bcount = lp->d_secsize;
			bp->b_flags = B_BUSY | B_READ;
			bp->b_cylinder = part_blkno / lp->d_secpercyl;
			(*strat)(bp);
 
			/* if successful, wander through dos partition table */
			if (biowait(bp)) {
				msg = "dos partition I/O error";
				if (partoffp)
					*partoffp = -1;
				return (msg);
			}
			bcopy(bp->b_data + DOSPARTOFF, dp,
			    NDOSPART * sizeof(*dp));
d314 6
a319 9
			if (ourpart == -1) {
				/* Search for our MBR partition */
				for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
				    i++, dp2++)
					if (letoh32(dp2->dp_size) &&
					    dp2->dp_typ == DOSPTYP_OPENBSD)
						ourpart = i;
				if (ourpart == -1)
					goto donot;
d321 3
a323 3
				 * This is our MBR partition. need sector
				 * address for SCSI/IDE, cylinder for
				 * ESDI/ST506/RLL
d325 10
a334 23
				dp2 = &dp[ourpart];
				dospartoff = letoh32(dp2->dp_start) + part_blkno;
				cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);

				/* XXX build a temporary disklabel */
				lp->d_partitions[0].p_size = letoh32(dp2->dp_size);
				lp->d_partitions[0].p_offset =
				    letoh32(dp2->dp_start) + part_blkno;
				if (lp->d_ntracks == 0)
					lp->d_ntracks = dp2->dp_ehd + 1;
				if (lp->d_nsectors == 0)
					lp->d_nsectors = DPSECT(dp2->dp_esect);
				if (lp->d_secpercyl == 0)
					lp->d_secpercyl = lp->d_ntracks *
					    lp->d_nsectors;
			}
donot:
			/*
			 * In case the disklabel read below fails, we want to
			 * provide a fake label in i-p.
			 */
			for (dp2=dp, i=0; i < NDOSPART && n < 8; i++, dp2++) {
				struct partition *pp = &lp->d_partitions[8+n];
d336 16
a351 55
				if (dp2->dp_typ == DOSPTYP_OPENBSD)
					continue;
				if (letoh32(dp2->dp_size) > lp->d_secperunit)
					continue;
				if (letoh32(dp2->dp_size))
					pp->p_size = letoh32(dp2->dp_size);
				if (letoh32(dp2->dp_start))
					pp->p_offset =
					    letoh32(dp2->dp_start) + part_blkno;

				switch (dp2->dp_typ) {
				case DOSPTYP_UNUSED:
					for (cp = (char *)dp2;
					    cp < (char *)(dp2 + 1); cp++)
						if (*cp)
							break;
					/*
					 * Was it all zeroes?  If so, it is
					 * an unused entry that we don't
					 * want to show.
					 */
					if (cp == (char *)(dp2 + 1))
					    continue;
					lp->d_partitions[8 + n++].p_fstype =
					    FS_UNUSED;
					break;

				case DOSPTYP_LINUX:
					pp->p_fstype = FS_EXT2FS;
					n++;
					break;

				case DOSPTYP_FAT12:
				case DOSPTYP_FAT16S:
				case DOSPTYP_FAT16B:
				case DOSPTYP_FAT32:
				case DOSPTYP_FAT32L:
				case DOSPTYP_FAT16L:
					pp->p_fstype = FS_MSDOS;
					n++;
					break;
				case DOSPTYP_EXTEND:
				case DOSPTYP_EXTENDL:
					part_blkno =
					    letoh32(dp2->dp_start) + extoff;
					if (!extoff) {
						extoff = letoh32(dp2->dp_start);
						part_blkno = 0;
					}
					wander = 1;
					break;
				default:
					pp->p_fstype = FS_OTHER;
					n++;
					break;
d353 6
a360 3
		lp->d_bbsize = 8192;
		lp->d_sbsize = 64*1024;		/* XXX ? */
		lp->d_npartitions = n > 0 ? n + 8 : 3;
d362 3
@


1.21
log
@The dosparts member of cpu_disklabel was not used for any persistant
data. Eliminate it, and just use the data being read in while
processing MBR and EBR records.

Should be no functional change.

ok weingart@@ deraadt@@
@
text
@d220 1
a220 3
	struct dos_partition *dp, *dp2;
	unsigned long extoff = 0;
	daddr_t part_blkno = DOSBBSECTOR;
a222 1
	int wander = 1, n = 0, loop = 0;
d236 4
a240 57
	/*
	 * Read dos partition table, follow extended partitions.
	 * Map the partitions to disklabel entries i-p
	 */
	while (wander && n < 8 && loop < 8) {
		loop++;
		wander = 0;
		if (part_blkno < extoff)
			part_blkno = extoff;

		/* read boot record */
		bp->b_blkno = part_blkno;
		bp->b_bcount = lp->d_secsize;
		bp->b_flags = B_BUSY | B_READ;
		bp->b_cylinder = part_blkno / lp->d_secpercyl;
		(*strat)(bp);

		/* if successful, wander through dos partition table */
		if (biowait(bp)) {
			msg = "dos partition I/O error";
			if (partoffp)
				*partoffp = -1;
			return (msg);
		}
		dp = (struct dos_partition *)(bp->b_data + DOSPARTOFF);

		if (ourpart == -1) {
			/* Search for our MBR partition */
			for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
			    i++, dp2++)
				if (letoh32(dp2->dp_size) &&
				    dp2->dp_typ == DOSPTYP_OPENBSD)
					ourpart = i;
			if (ourpart == -1)
				goto donot;
			/*
			 * This is our MBR partition. need sector
			 * address for SCSI/IDE, cylinder for
			 * ESDI/ST506/RLL
			 */
			dp2 = &dp[ourpart];
			dospartoff = letoh32(dp2->dp_start) + part_blkno;
			cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);

			/* XXX build a temporary disklabel */
			lp->d_partitions[0].p_size = letoh32(dp2->dp_size);
			lp->d_partitions[0].p_offset =
			    letoh32(dp2->dp_start) + part_blkno;
			if (lp->d_ntracks == 0)
				lp->d_ntracks = dp2->dp_ehd + 1;
			if (lp->d_nsectors == 0)
				lp->d_nsectors = DPSECT(dp2->dp_esect);
			if (lp->d_secpercyl == 0)
				lp->d_secpercyl = lp->d_ntracks *
				    lp->d_nsectors;
		}
donot:
d242 2
a243 2
		 * In case the disklabel read below fails, we want to
		 * provide a fake label in i-p.
d245 22
a266 2
		for (dp2=dp, i=0; i < NDOSPART && n < 8; i++, dp2++) {
			struct partition *pp = &lp->d_partitions[8+n];
d268 21
a288 8
			if (dp2->dp_typ == DOSPTYP_OPENBSD)
				continue;
			if (letoh32(dp2->dp_size) > lp->d_secperunit)
				continue;
			if (letoh32(dp2->dp_size))
				pp->p_size = letoh32(dp2->dp_size);
			if (letoh32(dp2->dp_start))
				pp->p_offset =
d290 15
d306 55
a360 38
			switch (dp2->dp_typ) {
			case DOSPTYP_UNUSED:
				for (cp = (char *)dp2;
				    cp < (char *)(dp2 + 1); cp++)
					if (*cp)
						break;
				/*
				 * Was it all zeroes?  If so, it is
				 * an unused entry that we don't
				 * want to show.
				 */
				if (cp == (char *)(dp2 + 1))
				    continue;
				lp->d_partitions[8 + n++].p_fstype =
				    FS_UNUSED;
				break;

			case DOSPTYP_LINUX:
				pp->p_fstype = FS_EXT2FS;
				n++;
				break;

			case DOSPTYP_FAT12:
			case DOSPTYP_FAT16S:
			case DOSPTYP_FAT16B:
			case DOSPTYP_FAT32:
			case DOSPTYP_FAT32L:
			case DOSPTYP_FAT16L:
				pp->p_fstype = FS_MSDOS;
				n++;
				break;
			case DOSPTYP_EXTEND:
			case DOSPTYP_EXTENDL:
				part_blkno =
				    letoh32(dp2->dp_start) + extoff;
				if (!extoff) {
					extoff = letoh32(dp2->dp_start);
					part_blkno = 0;
a361 6
				wander = 1;
				break;
			default:
				pp->p_fstype = FS_OTHER;
				n++;
				break;
d364 3
a367 3
	lp->d_bbsize = 8192;
	lp->d_sbsize = 64*1024;		/* XXX ? */
	lp->d_npartitions = n > 0 ? n + 8 : 3;
@


1.20
log
@Don't spoof a Free/NetBSD MBR partition as the 'a' partition in a
disklabel. Fixes 'double spoofing' of these partitions as both 'a' and
something in the 'i' to 'p' range.

OpenBSD changed its MBR partition type to 'A6' eight years ago.  As a
backward compatibility measure NetBSD and FreeBSD MBR partitions were
still spoofed as 'a' partitions when no OpenBSD partition could be
found. This bit of backward compatibility is no longer required.

'we can get rid of it' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.19 2006/10/04 23:58:12 krw Exp $	*/
d220 3
a222 1
	struct dos_partition *dp = osdep->u._i386.dosparts, *dp2;
d225 1
a238 4
	if (dp) {
		daddr_t part_blkno = DOSBBSECTOR;
		unsigned long extoff = 0;
		int wander = 1, n = 0, loop = 0;
d240 57
d298 2
a299 2
		 * Read dos partition table, follow extended partitions.
		 * Map the partitions to disklabel entries i-p
d301 12
a312 22
		while (wander && n < 8 && loop < 8) {
			loop++;
			wander = 0;
			if (part_blkno < extoff)
				part_blkno = extoff;

			/* read boot record */
			bp->b_blkno = part_blkno;
			bp->b_bcount = lp->d_secsize;
			bp->b_flags = B_BUSY | B_READ;
			bp->b_cylinder = part_blkno / lp->d_secpercyl;
			(*strat)(bp);
 
			/* if successful, wander through dos partition table */
			if (biowait(bp)) {
				msg = "dos partition I/O error";
				if (partoffp)
					*partoffp = -1;
				return (msg);
			}
			bcopy(bp->b_data + DOSPARTOFF, dp,
			    NDOSPART * sizeof(*dp));
d314 6
a319 9
			if (ourpart == -1) {
				/* Search for our MBR partition */
				for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
				    i++, dp2++)
					if (letoh32(dp2->dp_size) &&
					    dp2->dp_typ == DOSPTYP_OPENBSD)
						ourpart = i;
				if (ourpart == -1)
					goto donot;
d321 3
a323 3
				 * This is our MBR partition. need sector
				 * address for SCSI/IDE, cylinder for
				 * ESDI/ST506/RLL
d325 10
a334 23
				dp2 = &dp[ourpart];
				dospartoff = letoh32(dp2->dp_start) + part_blkno;
				cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);

				/* XXX build a temporary disklabel */
				lp->d_partitions[0].p_size = letoh32(dp2->dp_size);
				lp->d_partitions[0].p_offset =
				    letoh32(dp2->dp_start) + part_blkno;
				if (lp->d_ntracks == 0)
					lp->d_ntracks = dp2->dp_ehd + 1;
				if (lp->d_nsectors == 0)
					lp->d_nsectors = DPSECT(dp2->dp_esect);
				if (lp->d_secpercyl == 0)
					lp->d_secpercyl = lp->d_ntracks *
					    lp->d_nsectors;
			}
donot:
			/*
			 * In case the disklabel read below fails, we want to
			 * provide a fake label in i-p.
			 */
			for (dp2=dp, i=0; i < NDOSPART && n < 8; i++, dp2++) {
				struct partition *pp = &lp->d_partitions[8+n];
d336 16
a351 55
				if (dp2->dp_typ == DOSPTYP_OPENBSD)
					continue;
				if (letoh32(dp2->dp_size) > lp->d_secperunit)
					continue;
				if (letoh32(dp2->dp_size))
					pp->p_size = letoh32(dp2->dp_size);
				if (letoh32(dp2->dp_start))
					pp->p_offset =
					    letoh32(dp2->dp_start) + part_blkno;

				switch (dp2->dp_typ) {
				case DOSPTYP_UNUSED:
					for (cp = (char *)dp2;
					    cp < (char *)(dp2 + 1); cp++)
						if (*cp)
							break;
					/*
					 * Was it all zeroes?  If so, it is
					 * an unused entry that we don't
					 * want to show.
					 */
					if (cp == (char *)(dp2 + 1))
					    continue;
					lp->d_partitions[8 + n++].p_fstype =
					    FS_UNUSED;
					break;

				case DOSPTYP_LINUX:
					pp->p_fstype = FS_EXT2FS;
					n++;
					break;

				case DOSPTYP_FAT12:
				case DOSPTYP_FAT16S:
				case DOSPTYP_FAT16B:
				case DOSPTYP_FAT32:
				case DOSPTYP_FAT32L:
				case DOSPTYP_FAT16L:
					pp->p_fstype = FS_MSDOS;
					n++;
					break;
				case DOSPTYP_EXTEND:
				case DOSPTYP_EXTENDL:
					part_blkno =
					    letoh32(dp2->dp_start) + extoff;
					if (!extoff) {
						extoff = letoh32(dp2->dp_start);
						part_blkno = 0;
					}
					wander = 1;
					break;
				default:
					pp->p_fstype = FS_OTHER;
					n++;
					break;
d353 6
a360 3
		lp->d_bbsize = 8192;
		lp->d_sbsize = 64*1024;		/* XXX ? */
		lp->d_npartitions = n > 0 ? n + 8 : 3;
d362 3
@


1.19
log
@More instances of the same now unused variable as in alpha's
readdoslabel(). A bit of bad144 fallout.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.18 2006/10/04 03:23:01 krw Exp $	*/
a273 10
						ourpart = i;
				for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
				    i++, dp2++)
					if (letoh32(dp2->dp_size) &&
					    dp2->dp_typ == DOSPTYP_FREEBSD)
						ourpart = i;
				for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
				    i++, dp2++)
					if (letoh32(dp2->dp_size) &&
					    dp2->dp_typ == DOSPTYP_NETBSD)
@


1.18
log
@More tidying up after bad144. Remove references in comments and
don't include dkbad.h when nothing in it is used. Missed
arm/include/disklabel.h first time around.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.17 2006/10/03 01:37:22 krw Exp $	*/
a222 1
	dev_t dev;
@


1.17
log
@Don't load bad144 bad sector information into disklabels for archs that
don't have wd* in GENERIC, since wd* is the only place such info is
being used. First step of eliminating bad144 bad sector info from all
disklabels.

'go go go' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.16 2006/09/16 14:56:11 krw Exp $	*/
d203 1
a203 2
 * find disklabel inside a DOS partition. Also, if bad block
 * table needed, attempt to extract it as well. Return buffer
@


1.16
log
@Revert new check for DOS partitions running past d_secperunit (e.g.
r1.54 of i386/disksubr.c). The check incorrectly handled extended
partitions. Possibly a symptom of a deeper problem with extended
partition offsets that will be addressed post-4.0.

Problem reported/fix tested by A. Velichinsky, cause diagnosed by
otto@@.

ok pedro@@ mickey@@ miod@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.15 2006/08/20 03:14:21 krw Exp $	*/
a221 1
	struct dkbad *db, *bdp = &DKBAD(osdep);
a389 42
	if (msg)
		return (msg);

	/* obtain bad sector table if requested and present */
	if (bdp && (lp->d_flags & D_BADSECT)) {
		/*
		 * get a new buffer and initialize it as callers trust the
		 * buffer given to us, to point at the disklabel sector.
		 */
		dev = bp->b_dev;
		bp = geteblk((int)lp->d_secsize);
		bp->b_dev = dev;

		i = 0;
		do {
			/* read a bad sector table */
			bp->b_flags = B_BUSY | B_READ;
			bp->b_blkno = lp->d_secperunit - lp->d_nsectors + i;
			if (lp->d_secsize > DEV_BSIZE)
				bp->b_blkno *= lp->d_secsize / DEV_BSIZE;
			else
				bp->b_blkno /= DEV_BSIZE / lp->d_secsize;
			bp->b_bcount = lp->d_secsize;
			bp->b_cylinder = lp->d_ncylinders - 1;
			(*strat)(bp);

			/* if successful, validate, otherwise try another */
			if (biowait(bp))
				msg = "bad sector table I/O error";
			else {
				db = (struct dkbad *)(bp->b_data);
#define DKBAD_MAGIC 0x4321
				if (db->bt_mbz == 0 &&
				    db->bt_flag == DKBAD_MAGIC) {
					msg = NULL;
					*bdp = *db;
					break;
				} else
					msg = "bad sector table corrupted";
			}
		} while ((bp->b_flags & B_ERROR) && (i += 2) < 10 &&
		    i < lp->d_nsectors);
a390 4
		/* Give back the bad block buffer.  */
		bp->b_flags |= B_INVAL;
		brelse(bp);
	}
@


1.15
log
@When spoofing an MSDOS disklabel, don't create partitions with a final
block past d_secperunit.

Fixes devices where bogus partitions with a starting offset >
d_secperunit were created. e.g. floppies formatted by Caldera DR-DOS.

ok pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.14 2006/08/18 00:39:17 krw Exp $	*/
a317 3
				u_int64_t blkno = (u_int64_t)part_blkno +
				    (u_int64_t)letoh32(dp2->dp_start) +
				    (u_int64_t)letoh32(dp2->dp_size);
d321 1
a321 1
				if (blkno > lp->d_secperunit)
@


1.14
log
@Oops. If you don't use a label, remove it.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.13 2006/08/17 10:34:14 krw Exp $	*/
d318 3
d324 1
a324 1
				if (letoh32(dp2->dp_size) > lp->d_secperunit)
@


1.13
log
@Check d_secpercyl in all readdisklable() functions, and have all of
them return 'invalid geometry' when d_secpercyl == 0. While there move
the check to a consistant location (after the check of d_secperunit)
and use a consistant idiom (i.e. some readdisklabel()'s have no 'done'
label).

prodded by thib@@ after a bad macppc experience. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.12 2006/08/11 21:32:40 krw Exp $	*/
a192 1
done:
@


1.12
log
@Use d_secperunit rather than 0x1fffffff as the default value for
RAW_PART's p_size. Since d_secperunit is initialized to 0x1fffffff if
not specified there should be no need to use the magic number again.
And if d_secperunit was specified then that value should be used
instead of the magic number.

This was already being done for hp300, luna88k, mac68k, mvme68k,
mvme88k.

Should be a no-op.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.11 2006/07/09 21:06:39 krw Exp $	*/
d150 2
a151 4
	if (lp->d_secpercyl == 0) {
		msg = "invalid geometry";
		goto done;
	}
@


1.11
log
@DISKLABEL_ALL was never used in hppa, hppa64, mips64 config files so
just eliminate the check to set DISKLABEL_I386 with it. If you want
DISKLABEL_I386, use that option.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.10 2006/07/07 23:47:37 krw Exp $	*/
d160 1
a160 1
		lp->d_partitions[i].p_size = 0x1fffffff;
@


1.10
log
@Unroll DLT_* logic into simple 'look for native disklabel, then try
DOS MBR' logic.

Leave DOS MBR logic inside #if defined(DISKLABEL_I386) blocks until
impact on install media can be evaluated. Eliminates most remnants
of cross-endian, cross-architecture disklabel processing attempts.

Fix some mips64 issues with last commit, found by kettenis@@.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.9 2006/07/03 20:00:22 krw Exp $	*/
a51 5

/* The native defaults... */
#if defined(DISKLABEL_ALL) && !defined(DISKLABEL_I386)
#define DISKLABEL_I386
#endif
@


1.9
log
@Eliminate most of the #if/#endif maze in alpha, hppa, hppa64, and mips64
disklabel code that was intended to support cross-endian and cross-architecture
use of disklabels. Never actually used except for Alpha<->Amiga moves that now
can't happen anyway.

Leave native and DOS MBR disklabel code. Tested on alpha and hppa.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.8 2006/07/01 16:50:32 krw Exp $	*/
d38 1
a38 1
 * This disksubr.c module started to take it's present form on OpenBSD/alpha
a66 2
static enum disklabel_tag probe_order[] = { LABELPROBES, -1 };

a146 1
	enum disklabel_tag *tp;
d173 3
a175 3
	for (tp = probe_order; msg && *tp != -1; tp++) {
		switch (*tp) {
		case DLT_I386:
d177 6
a182 13
			msg = readdoslabel(bp, strat, lp, osdep, 0, 0, spoofonly);
			if (msg)
				/* Fallback alternative */
				fallbacklabel = *lp;
#endif
			break;

		case DLT_HPPA:
			msg = readliflabel(bp, strat, lp, osdep, 0, 0, spoofonly);
			break;

		default:
			panic("unrecognized disklabel tag %d", *tp);
a183 2
		if (msg)
			*lp = minilabel;
d185 1
a185 1

a188 1
		osdep->labeltag = *tp;
d634 1
a634 1
	 * partitition the disk.
a686 1
	enum disklabel_tag *tp;
d703 5
a707 1
	for (tp = probe_order; msg && *tp != -1; tp++) {
d709 3
a711 6
		switch (*tp) {
		case DLT_I386:
#if defined(DISKLABEL_I386)
			msg = readdoslabel(bp, strat, &dl, &cdl, &partoff,
			    &cyl, 0);
			labeloffset = I386_LABELOFFSET;
a712 13
			break;

		case DLT_HPPA:
			msg = readliflabel(bp, strat, &dl, &cdl, &partoff,
			    &cyl, 0);
			labeloffset = HPPA_LABELOFFSET;
			break;

		default:
			panic("unrecognized disklabel tag %d", *tp);
		}
	}

@


1.8
log
@Eliminate redundant get_le() in favour of letoh32(). Add letoh32()
calls in alpha, hppa, hppa64 and mips63 when accessing the two DOS MBR
u_int32_t fields dp_size and dp_start.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.7 2006/06/11 21:15:35 krw Exp $	*/
a41 3
 * XXX The DOS partitioning code is not endian-independent, only native
 * endian DOS partition tables can be parsed yet.
 *
d54 1
a54 3
#if defined(alpha) && !defined(DISKLABEL_ALPHA)
#define DISKLABEL_ALPHA
#elif (defined(i386) || defined(arc)) && !defined(DISKLABEL_I386)
a55 2
#elif (defined(hppa) || defined(hppa64)) && !defined(DISKLABEL_HPPA)
#define DISKLABEL_HPPA
a57 2
#if defined(DISKLABEL_I386) || defined(DISKLABEL_ALPHA) || defined(DISKLABEL_HPPA) || defined(DISKLABEL_ALL)
void	swapdisklabel(struct disklabel *d);
d59 2
a60 3
    int, int, struct disklabel *, int);
#endif
#if defined(DISKLABEL_I386) || defined(DISKLABEL_ALL)
a63 1
#if defined(DISKLABEL_HPPA) || defined(DISKLABEL_ALL)
a65 1
#endif
a68 49
#if defined(DISKLABEL_I386) || defined(DISKLABEL_ALPHA) || defined(DISKLABEL_HPPA) || defined(DISKLABEL_ALL)

/*
 * Byteswap all the fields that might be swapped.
 */
void
swapdisklabel(dlp)
	struct disklabel *dlp;
{
	int i;
	struct partition *pp;

	swap32(dlp->d_magic);
	swap16(dlp->d_type);
	swap16(dlp->d_subtype);
	swap32(dlp->d_secsize);
	swap32(dlp->d_nsectors);
	swap32(dlp->d_ntracks);
	swap32(dlp->d_ncylinders);
	swap32(dlp->d_secpercyl);
	swap32(dlp->d_secperunit);
	swap16(dlp->d_sparespertrack);
	swap16(dlp->d_sparespercyl);
	swap32(dlp->d_acylinders);
	swap16(dlp->d_rpm);
	swap16(dlp->d_interleave);
	swap16(dlp->d_trackskew);
	swap16(dlp->d_cylskew);
	swap32(dlp->d_headswitch);
	swap32(dlp->d_trkseek);
	swap32(dlp->d_flags);
	for (i = 0; i < NDDATA; i++)
		swap32(dlp->d_drivedata[i]);
	for (i = 0; i < NSPARE; i++)
		swap32(dlp->d_spare[i]);
	swap32(dlp->d_magic2);
	swap16(dlp->d_checksum);
	swap16(dlp->d_npartitions);
	swap32(dlp->d_bbsize);
	swap32(dlp->d_sbsize);
	for (i = 0; i < MAXPARTITIONS; i++) {
		pp = &dlp->d_partitions[i];
		swap32(pp->p_size);
		swap32(pp->p_offset);
		swap32(pp->p_fsize);
		swap16(pp->p_cpg);
	}
}

d73 1
a73 1
readbsdlabel(bp, strat, cyl, sec, off, endian, lp, spoofonly)
d76 1
a76 1
	int cyl, sec, off, endian;
a82 4
	u_int32_t magic;

	if (endian != LITTLE_ENDIAN && endian != BIG_ENDIAN)
		panic("readbsdlabel: unsupported byteorder %d", endian);
a100 2
	magic = endian == BIG_ENDIAN ? htobe32(DISKMAGIC) : htole32(DISKMAGIC);

d108 1
a108 1
		if (dlp->d_magic != magic || dlp->d_magic2 != magic) {
a112 2
			if (endian != BYTE_ORDER)
				swapdisklabel(dlp);
a114 3
				/* swap back if necessary.  */
				if (off < 0 && endian != BYTE_ORDER)
					swapdisklabel(dlp);
a116 5
				/* Recalc magic on foreign labels */
				if (endian != BYTE_ORDER) {
					lp->d_checksum = 0;
					lp->d_checksum = dkcksum(lp);
				}
a127 1
#endif
a177 7
		case DLT_ALPHA:
#if defined(DISKLABEL_ALPHA) || defined(DISKLABEL_ALL)
			msg = readbsdlabel(bp, strat, 0, ALPHA_LABELSECTOR,
			    ALPHA_LABELOFFSET, LITTLE_ENDIAN, lp, spoofonly);
#endif
			break;

d179 1
a179 1
#if defined(DISKLABEL_I386) || defined(DISKLABEL_ALL)
a187 1
#if defined(DISKLABEL_HPPA) || defined(DISKLABEL_ALL)
a188 1
#endif
d221 1
a221 1
#if defined(DISKLABEL_I386) || defined(DISKLABEL_ALL)
d411 1
a411 1
	    LITTLE_ENDIAN, lp, spoofonly);
a462 1
#if defined(DISKLABEL_HPPA) || defined(DISKLABEL_ALL)
d622 1
a622 1
	    HPPA_LABELOFFSET, BIG_ENDIAN, lp, spoofonly);
a623 1
#endif
a703 1
#if defined(DISKLABEL_I386) || defined(DISKLABEL_HPPA) || defined(DISKLABEL_ALL)
d705 1
a705 3
#endif
	int labeloffset, error, i, endian, partoff = 0, cyl = 0;
	u_int64_t csum, *p;
a719 9
		case DLT_ALPHA:
#if defined(DISKLABEL_ALPHA) || defined(DISKLABEL_ALL)
			msg = readbsdlabel(bp, strat, 0, ALPHA_LABELSECTOR,
			    ALPHA_LABELOFFSET, LITTLE_ENDIAN, &dl, 0);
			labeloffset = ALPHA_LABELOFFSET;
			endian = LITTLE_ENDIAN;
#endif
			break;

d721 1
a721 1
#if defined(DISKLABEL_I386) || defined(DISKLABEL_ALL)
a724 1
			endian = LITTLE_ENDIAN;
a728 1
#if defined(DISKLABEL_HPPA) || defined(DISKLABEL_ALL)
a731 2
			endian = BIG_ENDIAN;
#endif
a744 1
		endian = BYTE_ORDER;
a749 7
	if (endian != BYTE_ORDER) {
		swapdisklabel(lp);
		/* recalc checksum */
		lp->d_checksum = 0;
		lp->d_checksum = dkcksum(lp);
	}

a750 7

	/* Alpha bootblocks are checksummed.  */
	if (*tp == DLT_ALPHA) {
		for (csum = i = 0, p = (u_int64_t *)bp->b_data; i < 63; i++)
			csum += *p++;
		*p = csum;
	}
@


1.7
log
@Amiga is no longer amoung us. Some architectures were too sentimental
to cut all ties when it left for the attic. Eliminate (theoretical)
ability to read Amiga disklabels on those architectures.

mips64 compile tested by miod@@

"whack away" deraadt@@ "my amiga runs 3.2" niklas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.6 2006/03/15 20:20:39 miod Exp $	*/
d368 1
a368 1

d381 3
a383 3
				for (dp2=dp, i=0;
				    i < NDOSPART && ourpart == -1; i++, dp2++)
					if (dp2->dp_size &&
d386 3
a388 3
				for (dp2=dp, i=0;
				    i < NDOSPART && ourpart == -1; i++, dp2++)
					if (dp2->dp_size &&
d391 3
a393 3
				for (dp2=dp, i=0;
				    i < NDOSPART && ourpart == -1; i++, dp2++)
					if (dp2->dp_size &&
d404 1
a404 1
				dospartoff = dp2->dp_start + part_blkno;
d408 3
a410 3
				lp->d_partitions[0].p_size = dp2->dp_size;
				lp->d_partitions[0].p_offset = dp2->dp_start +
				    part_blkno;
d429 5
a433 3
				if (dp2->dp_size)
					pp->p_size = dp2->dp_size;
				if (dp2->dp_start)
d435 1
a435 1
					    dp2->dp_start + part_blkno;
d469 3
a471 1
					part_blkno = dp2->dp_start + extoff;
d473 1
a473 1
						extoff = dp2->dp_start;
@


1.6
log
@Nuke dk_establish(), no longer used.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.5 2006/03/04 19:33:21 miod Exp $	*/
a44 2
 * XXX Amiga RDB partitioning is not understood yet.
 *
a60 2
#elif defined(amiga) && !defined(DISKLABEL_AMIGA)
#define DISKLABEL_AMIGA
d65 1
a65 1
#if defined(DISKLABEL_I386) || defined(DISKLABEL_ALPHA) || defined(DISKLABEL_AMIGA) || defined(DISKLABEL_HPPA) || defined(DISKLABEL_ALL)
a73 4
#if defined(DISKLABEL_AMIGA) || defined(DISKLABEL_ALL)
char   *readamigalabel(struct buf *, void (*)(struct buf *),
    struct disklabel *, struct cpu_disklabel *, int);
#endif
d81 1
a81 1
#if defined(DISKLABEL_I386) || defined(DISKLABEL_ALPHA) || defined(DISKLABEL_AMIGA) || defined(DISKLABEL_HPPA) || defined(DISKLABEL_ALL)
a271 6
		case DLT_AMIGA:
#if defined(DISKLABEL_AMIGA) || defined(DISKLABEL_ALL)
			msg = readamigalabel(bp, strat, lp, osdep, spoofonly);
#endif
			break;

a545 20
#if defined(DISKLABEL_AMIGA) || defined(DISKLABEL_ALL)
/*
 * XXX RDB parsing is missing still.
 */
char *
readamigalabel(bp, strat, lp, osdep, spoofonly)
	struct buf *bp;
	void (*strat)(struct buf *);
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int spoofonly;
{
	char *msg;

	msg = readbsdlabel(bp, strat, 0, AMIGA_LABELSECTOR, AMIGA_LABELOFFSET,
	    BIG_ENDIAN, lp, spoofonly);
	return (msg);
}
#endif

a822 8
#endif
			break;

		case DLT_AMIGA:
#if defined(DISKLABEL_AMIGA) || defined(DISKLABEL_ALL)
			msg = readamigalabel(bp, strat, &dl, &cdl, 0);
			labeloffset = AMIGA_LABELOFFSET;
			endian = BIG_ENDIAN;
@


1.5
log
@Typos grab bag of the month, eyeballed by jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.4 2006/01/22 00:40:01 miod Exp $	*/
a87 7

void
dk_establish(dk, dev)
	struct disk *dk;
	struct device *dev;
{
}
@


1.4
log
@b_cylin -> b_cylinder; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.3 2005/12/22 03:02:48 krw Exp $	*/
d246 1
a246 1
	/* minimal requirements for archtypal disk label */
@


1.3
log
@'spoofonly' does not mean what I thought it meant. The whole point is
to read non-OpenBSD label information like MBRs and populate ('spoof')
the OpenBSD disk label appropriately. So avoiding an I/O when doing
'spoofonly' is to miss the whole point.

Backout all Sept. 26 and subsequent changes to disksubr.c files. The
original CD problem with I/O errors on blank media will be addressed
another way.

Should fix the ext3 vs amd64 problems discussed on misc@@. Thanks to
steven@@ for finally putting it terms that I understood.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.2 2005/09/27 23:56:11 krw Exp $	*/
a68 2
#define	b_cylin	b_resid

d169 1
a169 1
	bp->b_cylin = cyl;
d387 1
a387 1
			bp->b_cylin = part_blkno / lp->d_secpercyl;
d539 1
a539 1
			bp->b_cylin = lp->d_ncylinders - 1;
d604 1
a604 1
	bp->b_cylin = btodb(LIF_VOLSTART) / lp->d_secpercyl;
d629 1
a629 1
		dbp->b_cylin = dbp->b_blkno / lp->d_secpercyl;
d669 1
a669 1
			dbp->b_cylin = dbp->b_blkno / lp->d_secpercyl;
d897 1
a897 1
		bp->b_cylin = cyl;
d976 1
a976 1
	bp->b_cylin = (bp->b_blkno + blockpersec(p->p_offset, lp)) /
@


1.2
log
@Don't try to read the DOS label from the device if spoofonly is 1.
This changes the architectures which use code identical to the amd64
disksubr.c.

macppc seems different so it will be separate. The remaining archs
don't try to read a DOS label.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.1 2005/04/01 10:40:47 mickey Exp $	*/
a383 5

			if (spoofonly) {
				bzero(dp, NDOSPART * sizeof(*dp));
				goto donot;
			}
@


1.1
log
@small batch early bottling hppa64 port
matured in mighty ukrainian oak for 23 months
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d384 5
@

