head	1.13;
access;
symbols
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2016.05.11.21.52.50;	author deraadt;	state dead;
branches;
next	1.12;
commitid	VpgRpYXqYSJy4P7J;

1.12
date	2016.02.27.21.58.48;	author mmcc;	state Exp;
branches;
next	1.11;
commitid	w3j5LhbTzXbMEfau;

1.11
date	2015.02.11.13.05.44;	author miod;	state Exp;
branches;
next	1.10;
commitid	hkUAsHIKecmhY0T0;

1.10
date	2014.07.12.18.44.41;	author tedu;	state Exp;
branches;
next	1.9;
commitid	uKVPYMN2MLxdZxzH;

1.9
date	2014.07.08.17.19.24;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	EF98ch02VpFassUi;

1.8
date	2013.07.12.04.08.26;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.22.12.53.00;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2011.08.07.15.47.39;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.13.15.23.53;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.07.13.13.01;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.05.15.30.45;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.02.23.24.21;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.01.03.44.35;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.13
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@/*	$OpenBSD: intr.c,v 1.12 2016/02/27 21:58:48 mmcc Exp $	*/

/*
 * Copyright (c) 2002-2004 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#define INTRDEBUG

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/atomic.h>
#include <sys/device.h>
#include <sys/evcount.h>
#include <sys/malloc.h>

#include <uvm/uvm_extern.h>

#include <machine/autoconf.h>
#include <machine/cpufunc.h>
#include <machine/frame.h>
#include <machine/intr.h>
#include <machine/iomod.h>
#include <machine/psl.h>
#include <machine/reg.h>

struct hppa_iv {
	char pri;
	char irq;
	char flags;
#define	HPPA_IV_SOFT	0x01
	char pad;
	u_int bit;
	int (*handler)(void *);
	void *arg;
	struct hppa_iv *share;
	struct hppa_iv *next;
	struct evcount *cnt;
};

struct hppa_iv *intr_list;
struct hppa_iv intr_table[CPU_NINTS] __attribute__ ((aligned(64))) = {
	{ IPL_SOFTCLOCK, 0, HPPA_IV_SOFT, 0, 0, NULL },
	{ IPL_SOFTNET  , 0, HPPA_IV_SOFT, 0, 0, NULL },
	{ 0 },
	{ 0 },
	{ IPL_SOFTTTY  , 0, HPPA_IV_SOFT, 0, 0, NULL }
};

volatile u_long imask[NIPL] = {
	1 << (IPL_SOFTCLOCK - 1),
	1 << (IPL_SOFTNET - 1),
	0,
	0,
	1 << (IPL_SOFTTTY - 1)
};

void
cpu_intr_init(void)
{
	u_long mask;
	int level;

	for (level = NIPL - 1; level > 0; level--) {
		imask[level - 1] |= imask[level];
#ifdef INTRDEBUG
		printf("IPL %i 0x%lx\n", level - 1, imask[level - 1]);
#endif
	}

	/* Prevent hardclock from happening early. */
	mask = mfctl(CR_ITMR);
	mtctl(mask - 1, CR_ITMR);

	/* Clear unwanted interrupts. */
	mask = mfctl(CR_EIRR);
	mtctl(mask & (1UL << 63), CR_EIRR);

	/* Time to enable interrupts. */
	curcpu()->ci_psw |= PSL_I;
	ssm(PSL_I, mask);
}

int
cpu_intr_findirq(void)
{
	int irq;

	for (irq = 0; irq < CPU_NINTS; irq++)
		if (intr_table[irq].handler == NULL &&
		    intr_table[irq].pri == 0)
			return irq;

	return -1;
}

void *
cpu_intr_map(void *v, int pri, int irq, int (*handler)(void *), void *arg,
    const char *name)
{
	struct hppa_iv *iv, *pv = v, *ivb = pv->next;
	struct evcount *cnt;

	if (irq < 0 || irq >= CPU_NINTS)
		return (NULL);

	cnt = malloc(sizeof(*cnt), M_DEVBUF, M_NOWAIT);
	if (!cnt)
		return (NULL);

	iv = &ivb[irq];
	if (iv->handler) {
		if (!pv->share) {
			free(cnt, M_DEVBUF, 0);
			return (NULL);
		} else {
			iv = pv->share;
			pv->share = iv->share;
			iv->share = ivb[irq].share;
			ivb[irq].share = iv;
		}
	}

	evcount_attach(cnt, name, NULL);
	iv->pri = pri;
	iv->irq = irq;
	iv->flags = 0;
	iv->handler = handler;
	iv->arg = arg;
	iv->cnt = cnt;
	iv->next = intr_list;
	intr_list = iv;

	return (iv);
}

void *
cpu_intr_establish(int pri, int irq, int (*handler)(void *), void *arg,
    const char *name)
{
	struct hppa_iv *iv;
	struct evcount *cnt;

	if (irq < 0 || irq >= CPU_NINTS || intr_table[irq].handler)
		return (NULL);

	if ((intr_table[irq].flags & HPPA_IV_SOFT) != 0)
		return (NULL);

	cnt = malloc(sizeof(*cnt), M_DEVBUF, M_NOWAIT);
	if (!cnt)
		return (NULL);

	imask[pri - 1] |= (1UL << irq);

	iv = &intr_table[irq];
	iv->pri = pri;
	iv->irq = irq;
	iv->bit = 1 << irq;
	iv->flags = 0;
	iv->handler = handler;
	iv->arg = arg;
	iv->cnt = cnt;
	iv->next = NULL;
	iv->share = NULL;

	evcount_attach(cnt, name, NULL);

	return (iv);
}

void
cpu_intr(void *v)
{
	struct cpu_info *ci = curcpu();
	struct trapframe *frame = v;
	struct hppa_iv *iv;
	int pri, r, s, bit;
	u_long mask, tmp;
	void *arg;

	ci->ci_ipending |= mfctl(CR_EIRR);

	s = ci->ci_cpl;
	if (ci->ci_in_intr++)
		frame->tf_flags |= TFF_INTR;

	/* Process higher priority interrupts first. */
	for (pri = NIPL - 1; pri > s; pri--) {

		mask = imask[pri] ^ imask[pri - 1];

		while (ci->ci_ipending & mask) {

			bit = flsl(ci->ci_ipending & mask) - 1;
			iv = &intr_table[bit];

#ifdef INTRDEBUG
			if (iv->pri <= s)
				panic("irq %i: handler pri %i <= ipl %i\n",
				    bit, iv->pri, s);
#endif

			ci->ci_ipending &= ~(1UL << bit);
			mtctl(1UL << bit, CR_EIRR);
			ci->ci_ipending |= mfctl(CR_EIRR);

			uvmexp.intrs++;
			if (iv->flags & HPPA_IV_SOFT)
				uvmexp.softs++;

			ci->ci_cpl = iv->pri;
			mtctl(imask[ci->ci_cpl], CR_EIEM);
		       	ssm(PSL_I, tmp);

			for (r = iv->flags & HPPA_IV_SOFT;
			     iv && iv->handler; iv = iv->next) {
				/* No arg means pass the frame. */
				arg = iv->arg ? iv->arg : v;
				if ((iv->handler)(arg) == 1) {
					if (iv->cnt)
						iv->cnt->ec_count++;
					r |= 1;
				}
			}

			rsm(PSL_I, tmp);
		}
	}
	ci->ci_in_intr--;
	ci->ci_cpl = s;

	mtctl(imask[ci->ci_cpl], CR_EIEM);
	ssm(PSL_I, tmp);
}

void *
softintr_establish(int pri, void (*handler)(void *), void *arg)
{
	struct hppa_iv *iv;
	int irq;

	if (pri == IPL_TTY)
		pri = IPL_SOFTTTY;

	irq = pri - 1;
	iv = &intr_table[irq];
	if ((iv->flags & HPPA_IV_SOFT) == 0 || iv->pri != pri)
		return (NULL);

	if (iv->handler) {
		struct hppa_iv *nv;

		nv = malloc(sizeof *iv, M_DEVBUF, M_NOWAIT);
		if (!nv)
			return (NULL);
		while (iv->next)
			iv = iv->next;
		iv->next = nv;
		iv = nv;
	} else
		imask[pri - 1] |= (1 << irq);

	iv->pri = pri;
	iv->irq = 0;
	iv->bit = 1 << irq;
	iv->flags = HPPA_IV_SOFT;
	iv->handler = (int (*)(void *))handler;	/* XXX */
	iv->arg = arg;
	iv->cnt = NULL;
	iv->next = NULL;
	iv->share = NULL;

	return (iv);
}

void
softintr_disestablish(void *cookie)
{
	struct hppa_iv *iv = cookie;
	int irq = iv->pri - 1;

	if (&intr_table[irq] == cookie) {
		if (iv->next) {
			struct hppa_iv *nv = iv->next;

			iv->handler = nv->handler;
			iv->arg = nv->arg;
			iv->next = nv->next;
			free(nv, M_DEVBUF, 0);
			return;
		} else {
			iv->handler = NULL;
			iv->arg = NULL;
			return;
		}
	}

	for (iv = &intr_table[irq]; iv; iv = iv->next) {
		if (iv->next == cookie) {
			iv->next = iv->next->next;
			free(cookie, M_DEVBUF, 0);
			return;
		}
	}
}

void
softintr_schedule(void *cookie)
{
	struct hppa_iv *iv = cookie;

	softintr(1 << (iv->pri - 1));
}
@


1.12
log
@Remove a couple malloc casts. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.c,v 1.11 2015/02/11 13:05:44 miod Exp $	*/
@


1.11
log
@Needs <sys/atomic.h> explicitely now.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.c,v 1.10 2014/07/12 18:44:41 tedu Exp $	*/
d129 1
a129 1
	cnt = (struct evcount *)malloc(sizeof *cnt, M_DEVBUF, M_NOWAIT);
d172 1
a172 1
	cnt = (struct evcount *)malloc(sizeof *cnt, M_DEVBUF, M_NOWAIT);
@


1.10
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.c,v 1.9 2014/07/08 17:19:24 deraadt Exp $	*/
d34 1
@


1.9
log
@decouple struct uvmexp into a new file, so that uvm_extern.h and sysctl.h
don't need to be married.
ok guenther miod beck jsing kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.c,v 1.8 2013/07/12 04:08:26 jsg Exp $	*/
d135 1
a135 1
			free(cnt, M_DEVBUF);
d311 1
a311 1
			free(nv, M_DEVBUF);
d323 1
a323 1
			free(cookie, M_DEVBUF);
@


1.8
log
@replace fls functions with calls to the libkern versions
found the hard way by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.c,v 1.7 2011/09/22 12:53:00 jsing Exp $	*/
d38 1
a38 1
#include <uvm/uvm_extern.h>	/* for uvmexp */
@


1.7
log
@Do not trash the mask value when setting and clearing the system mask.
Add a diagnostic for interrupt handler IPL levels.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.c,v 1.5 2011/04/13 15:23:53 jsing Exp $	*/
a192 40
int	fls(u_long mask);

int
fls(u_long mask)
{
	int bit = 64;

	if (!(mask & 0xffffffff00000000)) {
		bit -= 32;
		mask <<= 32;
	}

	if (!(mask & 0xffff000000000000)) {
		bit -= 16;
		mask <<= 16;
	}

	if (!(mask & 0xff00000000000000)) {
		bit -= 8;
		mask <<= 8;
	}

	if (!(mask & 0xf000000000000000)) {
		bit -= 4;
		mask <<= 4;
	}

	if (!(mask & 0xc000000000000000)) {
		bit -= 2;
		mask <<= 2;
	}

	if (!(mask & 0x8000000000000000)) {
		bit -= 1;
		mask <<= 1;
	}

	return mask ? bit : 0;
}

d216 1
a216 1
			bit = fls(ci->ci_ipending & mask) - 1;
@


1.6
log
@Make sure interrupts are properly masked at the level they're established at.
The old code left an interrupt enabled at that level, making spl-protection
non functional.

Remove __packed from struct hppa_iv.  Instead re-order the members to pack
things efficient on a 64-bit host.  Remove explicit padding.
@
text
@d240 1
a240 1
	u_long mask;
d259 6
d275 1
a275 1
		       	ssm(PSL_I, mask);
d288 1
a288 1
			rsm(PSL_I, mask);
d295 1
a295 1
	ssm(PSL_I, mask);
@


1.5
log
@Remove some very noisy debug code.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.c,v 1.4 2011/04/07 13:13:01 jsing Exp $	*/
d54 1
a54 1
	int pad2;
a56 1
	u_int bit;
d60 1
a60 1
} __packed;
d175 1
a175 1
	imask[pri] |= (1UL << irq);
d317 1
a317 1
		imask[pri] |= (1 << irq);
@


1.4
log
@Initial interrupt handling implementation for hppa64.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.c,v 1.3 2011/04/05 15:30:45 jsing Exp $	*/
a47 8
#ifdef DDB
#include <machine/db_machdep.h>
#endif

#ifdef INTRDEBUG
#include <ddb/db_output.h>
#endif

a287 7

#ifdef INTRDEBUG
	if (uvmexp.intrs % 10000)
		db_printf(".");
	if (uvmexp.softs % 10000)
		db_printf("+");
#endif
@


1.3
log
@Fix logic bug in debug code and enable spllower()/splraise().

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.c,v 1.1 2010/07/01 03:44:35 jsing Exp $	*/
d4 2
a5 1
 * Copyright (c) Joel Sing <jsing@@openbsd.org>
d7 8
a14 3
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
d16 11
a26 7
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
d29 2
d32 7
d40 3
d44 220
d265 42
a306 1
volatile u_long imask[NIPL];
d311 35
a345 1
	return (void *)1;
d351 26
d382 3
a385 1

@


1.2
log
@Pretend that softintr_establish() actually works.

ok kettenis@@
@
text
@d23 1
a23 1
volatile u_long imask;
@


1.1
log
@Add stubs for soft interrupts.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d28 1
a28 1
	return NULL;
@

