head	1.33;
access;
symbols
	OPENBSD_6_1:1.21.0.4
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3;
locks; strict;
comment	@# @;


1.33
date	2017.07.18.16.43.27;	author tb;	state Exp;
branches;
next	1.32;
commitid	iapv8276IrtCm0Fi;

1.32
date	2017.07.16.16.47.06;	author visa;	state Exp;
branches;
next	1.31;
commitid	DJI7cWKgRtc5pA4A;

1.31
date	2017.06.29.16.51.35;	author espie;	state Exp;
branches;
next	1.30;
commitid	aLZBh2QedXJF67Iu;

1.30
date	2017.06.29.13.04.09;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	pBfQQs0DgQlo3LEQ;

1.29
date	2017.06.25.14.02.23;	author deraadt;	state Exp;
branches;
next	1.28;
commitid	6ubMSsuFvcb59SX4;

1.28
date	2017.06.22.16.01.48;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	NU9rSPp0mUySxS04;

1.27
date	2017.06.14.13.12.49;	author patrick;	state Exp;
branches;
next	1.26;
commitid	MrUJFiQ4a9fNTd1z;

1.26
date	2017.06.13.16.40.01;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	IBnCjqwIAePNl11k;

1.25
date	2017.06.11.22.51.21;	author deraadt;	state Exp;
branches;
next	1.24;
commitid	aJQfgtCEBEOL2P4T;

1.24
date	2017.06.11.20.50.32;	author bluhm;	state Exp;
branches;
next	1.23;
commitid	UEZLHpDQ2LYKTb3D;

1.23
date	2017.06.05.12.43.59;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	wfRVAv0JN8rqN4EA;

1.22
date	2017.06.03.22.21.33;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	SGp9KIY6OZAZGoKD;

1.21
date	2017.01.25.11.15.07;	author kettenis;	state Exp;
branches;
next	1.20;
commitid	SbX05HnGufiooA06;

1.20
date	2016.11.29.09.08.34;	author mpi;	state Exp;
branches;
next	1.19;
commitid	yUJbDchhkVm6F1HA;

1.19
date	2016.11.15.09.08.37;	author natano;	state Exp;
branches;
next	1.18;
commitid	uQeojuKIzgIWOEnv;

1.18
date	2016.10.27.20.44.20;	author natano;	state Exp;
branches;
next	1.17;
commitid	eR4vLZnymgQjVxbj;

1.17
date	2016.10.24.18.26.17;	author deraadt;	state Exp;
branches;
next	1.16;
commitid	84F8eQ949AbxN83e;

1.16
date	2016.10.15.13.45.08;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	TtDw6IYffbT8oPEE;

1.15
date	2016.10.14.18.43.01;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	dUZQxi6w3YqAb6KQ;

1.14
date	2016.09.24.19.13.03;	author kettenis;	state Exp;
branches;
next	1.13;
commitid	N8Z5nlTJHj3pmauV;

1.13
date	2016.04.29.12.44.52;	author mpi;	state Exp;
branches;
next	1.12;
commitid	Vbd8R29nZBKG6KtM;

1.12
date	2015.06.08.06.33.16;	author jsg;	state Exp;
branches;
next	1.11;
commitid	TKnNVNES86I6ApFq;

1.11
date	2015.06.02.02.30.16;	author jsg;	state Exp;
branches;
next	1.10;
commitid	MDqoReLKfFLYYM4U;

1.10
date	2015.05.27.00.06.14;	author jsg;	state Exp;
branches;
next	1.9;
commitid	G6QP18Ap4gF8hOTp;

1.9
date	2015.05.20.01.44.20;	author jsg;	state Exp;
branches;
next	1.8;
commitid	AyYz7FgJK6jKwvRv;

1.8
date	2015.05.19.00.05.59;	author jsg;	state Exp;
branches;
next	1.7;
commitid	bo8vCG1OOftVcP5V;

1.7
date	2015.01.13.01.12.49;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	xEYSgcMiEU7N21VE;

1.6
date	2015.01.11.19.25.13;	author tedu;	state Exp;
branches;
next	1.5;
commitid	Jqptj5xcqx8IMSNU;

1.5
date	2014.10.04.18.10.14;	author brad;	state Exp;
branches;
next	1.4;
commitid	iaz4yUwbbR9oynrV;

1.4
date	2014.05.08.21.17.01;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2014.02.02.03.59.25;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.15.19.23.26;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2013.09.04.14.38.25;	author patrick;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Stop automatically regenerating gap.o (and hence linking a new kernel)
whenever make is issued. Only do this when there are actual source changes
below /sys. This restores the behavior prior to the KARL implementation.

Problem noticed and patiently explained by mpi
implementation with a lot of help from espie

ok mpi, espie, deraadt
@
text
@#	$OpenBSD: Makefile.armv7,v 1.32 2017/07/16 16:47:06 visa Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I. -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__ -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-uninitialized -Wno-pointer-sign \
		-Wframe-larger-than=2047

CMACHFLAGS=	-msoft-float -march=armv6 -Wa,-march=armv7a
CMACHFLAGS+=	-ffreestanding ${NOPIE_FLAGS}
SORTR=		sort -R
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
.if ${IDENT:M-DSMALL_KERNEL}
SORTR=		cat
.endif

DEBUG?=		-g
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CWARNFLAGS} ${CMACHFLAGS}
LINKFLAGS=	-T ld.script --warn-common -nopie

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore0.o gap.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS} param.o ioconf.o
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ld.script
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		umask 007; \
		echo ${OBJS} param.o ioconf.o vers.o | tr " " "\n" | ${SORTR} > lorder; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} `cat lorder`
SYSTEM_LD_TAIL=	@@${SIZE} $@@

.if ${DEBUG} == "-g"
STRIPFLAGS=	-S
SYSTEM_LD_TAIL+=; umask 007; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

ld.script: ${_archdir}/conf/ldscript.head ${_archdir}/conf/ldscript.tail
	cat ${_archdir}/conf/ldscript.head ${_archdir}/conf/ldscript.tail | \
	    sed -e 's/@@KERNEL_BASE_PHYS@@/0/' \
	    -e 's/@@KERNEL_BASE_VIRT@@/${KERNEL_BASE_VIRT}/' \
	    -e 's/(KERNEL_BASE_phys)/(KERNEL_BASE_virt)/' > ld.script

gapdummy.o:
	echo 'const char gapdummy;' > gapdummy.c
	${CC} -c ${CFLAGS} ${CPPFLAGS} gapdummy.c -o $@@

makegap.sh:
	cp $S/conf/makegap.sh $@@

MAKE_GAP = LD="${LD}" sh makegap.sh 0xffffffff gapdummy.o

gap.o:	Makefile makegap.sh gapdummy.o vers.o
	${MAKE_GAP}

vers.o: ${SYSTEM_DEP:Ngap.o}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

clean:
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} \
	    gap.link ld.script lorder makegap.sh param.c

cleandir: clean
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c

depend obj:

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

locore0.o: ${_machdir}/${_mach}/locore0.S assym.h
in_cksum_arm.o fiq_subr.o bcopyinout.o copystr.o sigcode.o: assym.h
vectors.o cpuswitch7.o exception.o bcopy_page.o irq_dispatch.o: assym.h
${_mach}_start.o locore.o: assym.h

newinstall:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	umask 077 && cp bsd /nbsd && mv /nbsd /bsd && \
	    sha256 -h /var/db/kernel.SHA256 /bsd

install: update-link newinstall

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ:Ngap.o} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif


# until we get native booting working, put this in the tree.
KERNADDR_OMAP=0x80300000
KERNADDR_IMX=0x10300000
KERNADDR_SUNXI=0x40300000
KERNADDR_EXYNOS=0x40300000
KERNADDR_VEXPRESSA15=0x80300000
KERNADDR_VEXPRESSA9=0x60300000

.for SOC in IMX OMAP SUNXI EXYNOS VEXPRESSA9 VEXPRESSA15
bsd.${SOC}.umg: bsd
	mkuboot -a arm -o linux -e ${KERNADDR_${SOC}} -l ${KERNADDR_${SOC}} \
	    bsd bsd.${SOC}.umg
.endfor

bsd.rd: bsd
	cp bsd bsd.rd
	$S/../distrib/${_mach}/ramdisk/rdsetroot < $S/../distrib/${_mach}/ramdisk/mr.fs bsd.rd

%RULES
@


1.32
log
@Pass the linker from make environment to makegap.sh. This is (only)
a partial solution to cross compiling the kernel with KARL.

OK deraadt@@ a while ago
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.31 2017/06/29 16:51:35 espie Exp $
d132 4
a135 2
gap.o:	Makefile makegap.sh gapdummy.o
	LD="${LD}" sh makegap.sh 0xffffffff gapdummy.o
d172 1
a172 1
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
@


1.31
log
@put SYSTEM_SWAP_DEP out of its misery, it died in 1997, along with config.old
"go for it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.30 2017/06/29 13:04:09 deraadt Exp $
d133 1
a133 1
	sh makegap.sh 0xffffffff gapdummy.o
@


1.30
log
@0xd4d4d4d4 is a useful 'trap instruction' on arm64, but not on arm32.
0xffffffff seems better in userland and kernel. still not exactly happy
with the situation.
long discussion with kettenis.  anyone else have an opinion?
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.29 2017/06/25 14:02:23 deraadt Exp $
d135 1
a135 1
vers.o: ${SYSTEM_DEP:Ngap.o} ${SYSTEM_SWAP_DEP}
@


1.29
log
@dull dependency for copying makegap.sh to obj, so that installs
without src and comp work.  That is what we've designed for, but since
we always have src and comp on our systems it is so easy to slide...
problem first noted by rpe.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.28 2017/06/22 16:01:48 deraadt Exp $
d133 1
a133 1
	sh makegap.sh 0xd4d4d4d4 gapdummy.o
@


1.28
log
@Generate a gap.link script, and use that to generate gap.o.  On multi-ABI
architectures we must also link against a gapdummy.o to repair the ABI
of the resulting .o file.  Woe is me.
Also repair install: target to update the linkkit & hash when a kernel
is installed.
ok rpe tb mlarkin and tested by others also
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.27 2017/06/14 13:12:49 patrick Exp $
d129 1
a129 1
makegap.sh: Makefile $S/conf/makegap.sh
@


1.27
log
@Split early startup code out of armv7_start.S into locore0.S.  Adjust
link run so that this locore0.o is always at the start of the
executable.  But randomize the link order of all other .o files in the
kernel, so that their exec/rodata/data/bss segments land all over the
place.  Note that this commit does not yet unmap the early bootcode
since this is not as easy as on arm64.

As a result, the internal layout of every newly build bsd kernel is
different from past kernels.  Internal relative offsets are not known
to an outside attacker.  The only known offsets are in the startup code,
which has been unmapped.

Ramdisk kernels cannot be compiled like this, because they are gzip'd.
When the internal pointer references change, the compression dictionary
bloats and results in poorer compression.

With guidance and ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.26 2017/06/13 16:40:01 deraadt Exp $
a93 6
newbsd:
	${SYSTEM_LD_HEAD}
	${SYSTEM_LD} swapgeneric.o
	${SYSTEM_LD_TAIL}
	mv -f newbsd bsd

d125 10
a138 6
gap.S: ${SYSTEM_SWAP_DEP} Makefile
	umask 007; sh $S/conf/makegap.sh 0xd4 > gap.S

gap.o: gap.S
	umask 007; ${CC} ${AFLAGS} ${CPPFLAGS} ${PROF} -c gap.S

d141 1
a141 1
	    gap.S lorder param.c
d158 1
a158 6
# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
d160 4
a163 3
	umask 077; cp bsd /nbsd
	mv /nbsd /bsd
.endif
@


1.26
log
@newbsd: target which re-links a kernel.  We cannot use the bsd: target
since it has source dependencies, and relinking doesn't have any.  Also
the bsd: target is created by config(8)...
worked on with rpe.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.25 2017/06/11 22:51:21 deraadt Exp $
d32 1
d36 3
d72 2
a73 2
SYSTEM_HEAD=	${_mach}_start.o locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
d78 2
a79 1
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
d135 6
d142 2
a143 1
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} param.c
d155 1
a155 2
${_mach}_start.o: ${_machdir}/${_mach}/${_mach}_start.S
locore.o: ${_archdir}/${_arch}/locore.S assym.h
d158 1
a158 1
armv7_start.o: assym.h
@


1.25
log
@make vers.o not depend on gap.o using a trick, because it is piece of
fiction participating only in the linkphase.
tricks from rpe and espie
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.24 2017/06/11 20:50:32 bluhm Exp $
d88 6
@


1.24
log
@Use umask 077 instead of cp -p when installing the kernel as root.
Otherwise owner of /bsd could be the build user with permissions
inherited from the compile directory.
OK deraadt@@ tb@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.23 2017/06/05 12:43:59 deraadt Exp $
d120 1
a120 1
vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.23
log
@The arm* architectures edit the ld.script, creating a copy in the compile
directories.  Copy it in the same way on other architectures, for the same
effect.  Something upcoming will want that file there anyways.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.22 2017/06/03 22:21:33 deraadt Exp $
d150 1
a150 1
	cp -p bsd /nbsd
@


1.22
log
@Create gap.S and gap.o with umask 077.  Create lorder and bsd* with umask 007.
Prying eyes cannot look at the kernels in the compile directory.
ok tb rpe, kernel developers seem unimpacted
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.21 2017/01/25 11:15:07 kettenis Exp $
d40 1
a40 1
LINKFLAGS=	-T ldscript --warn-common -nopie
d70 1
a70 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
a71 5
SYSTEM_LD_HEAD+=; \
		cat ${_archdir}/conf/ldscript.head ${_archdir}/conf/ldscript.tail | \
		    sed -e 's/@@KERNEL_BASE_PHYS@@/0/' \
		    -e 's/@@KERNEL_BASE_VIRT@@/${KERNEL_BASE_VIRT}/' \
		    -e 's/(KERNEL_BASE_phys)/(KERNEL_BASE_virt)/' > ldscript
d113 6
@


1.21
log
@Build amd64 kernels with -ffreestanding.  Synchronize the arm64 and armv7
kernel makefiles, that are using -ffreestanding already, with the amd64 one.
Other architectures will follow later.

ok jca@@, visa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.20 2016/11/29 09:08:34 mpi Exp $
a76 1

d78 1
d80 1
a80 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
d84 1
a84 1
SYSTEM_LD_TAIL+=; \
d149 1
a149 1
	cp bsd /nbsd
@


1.20
log
@Build kernel with DEBUG=-g by default.

This will allow us to extract type informations from DWARF2 sections.  It
also makes developer life easier as debug information are now included in
every object.

Resulting kernels will be stripped using strip(1) instead of ld(1).

Kernel build time increases by approximately 10%.  However it is still
possible to disable this by defining DEBUG="".

ok kettenis@@, bluhm@@, natano@@, jasper@@, reyk@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.19 2016/11/15 09:08:37 natano Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-pointer-sign \
d30 2
a31 4
CMACHFLAGS=	-ffreestanding -msoft-float -march=armv6 -Wa,-march=armv7a
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
@


1.19
log
@Clean up the kernel Makefile's:

- Remove the 'lint' target. lint has been removed with OpenBSD 5.2.
- Remove the 'tags' target. It does nothing of value.
- Replace 'clean::' with 'clean:', as requested by espie and millert,
  and remove files from the 'clean' target, that are never generated.
- Don't create a file called 'depend' in 'make depend', but just do
  nothing instead.

ok mpi tb
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.18 2016/10/27 20:44:20 natano Exp $
d38 1
a83 1
DEBUG?=
@


1.18
log
@We don't generate an eddep script for kernel builds nowadays. The last
reference to eddep in the kernel Makefile I could find is in 4.3BSD,
released some 30 years ago.

ok tb millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.17 2016/10/24 18:26:17 deraadt Exp $
d125 2
a126 3
clean::
	rm -f *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.* ${DB_STRUCTINFO} param.c
d131 1
a131 12
lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

obj:

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"
@


1.17
log
@make cleandir should skip the version file; ok otto millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.16 2016/10/15 13:45:08 deraadt Exp $
d126 1
a126 1
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
@


1.16
log
@cleandir: target for kernel compile directories
ok natano
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.15 2016/10/14 18:43:01 deraadt Exp $
d130 1
a130 1
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c version
@


1.15
log
@Kernel builds now happen in compile/CONFIG/obj@@ -> /usr/obj/... [or ./obj/,
if srctree is not rooted at /usr/src].  As a result, stock GENERIC & RAMDISK
kernels are commited to the tree, to ensure the src tree can be "readonly"
during builds, with all writes occuring inside the obj space.  config -b
options are handled by ../Makefile.inc.  The canonical new way to configure
one of these kernels is:
    % cd /sys/arch/amd64/compile/GENERIC.MP
    % doas make obj
    % make config
    % make
    % doas cp obj/bsd /bsd
The build infrastructure will use this new mechanism in a de-escalation
way using BUILDUSER.
Much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.14 2016/09/24 19:13:03 kettenis Exp $
d127 4
a130 1
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}
@


1.14
log
@Add -Wno-pointer-sign to all our gcc4 architectures.

ok patrick@@ (for armv7), deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.13 2016/04/29 12:44:52 mpi Exp $
d133 2
@


1.13
log
@Do not remove local symbols from the table.

ddb(4) can now see static functions.  That doesn't mean we should start
declaring functions as ``static'', however it helps for the few existing
exceptions.

ok deraadt@@, kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.12 2015/06/08 06:33:16 jsg Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized \
@


1.12
log
@Add initial support for the ARM Versatile Express boards as emulated by
qemu with virtio memory ranges.

Unfortunately the vexpress-a9 and vexpress-a15 boards/targets have
different load addresses and memory maps.

Code for the PL011 UART and mmio virtio attachment from Patrick Wildt
in bitrig.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.11 2015/06/02 02:30:16 jsg Exp $
d85 1
a85 2
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
d91 1
a91 1
LINKFLAGS+=	-x
@


1.11
log
@with binutils 2.17 we can change some raw opcodes into instruction names
ok miod@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.10 2015/05/27 00:06:14 jsg Exp $
d183 2
d186 1
a186 1
.for SOC in IMX OMAP SUNXI EXYNOS
@


1.10
log
@make the exynos code compile without fdt
ok bmercer@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.9 2015/05/20 01:44:20 jsg Exp $
d30 1
a30 1
CMACHFLAGS=	-ffreestanding -msoft-float -march=armv6
@


1.9
log
@Now all the socs use the same va entry point and don't have any
conflicting symbols we can combine the configs.

Multiple umg files are still required however.  The bsd.umg target in
the kernel is replaced by targets for bsd.IMX.umg, bsd.OMAP.umg and
bsd.SUNXI.umg.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.8 2015/05/19 00:05:59 jsg Exp $
d182 1
d184 1
a184 1
.for SOC in IMX OMAP SUNXI
@


1.8
log
@use the same va entry point on all armv7 socs
Similiar changes were made in bitrig by Patrick Wildt.

As part of this change the physical load address for imx and sunxi have
changed.  Any u-boot settings that include it will need to be modified.

imx: 0x10800000 -> 0x10300000
sunxi: 0x40800000 -> 0x40300000

Tested by bmercer, canacar and myself.
ok bmercer@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.7 2015/01/13 01:12:49 deraadt Exp $
d179 9
a187 6

bsdrd.umg: bsd.rd
	mkuboot -a arm -o linux -e ${KERNEL_BASE_PHYS} -l ${KERNEL_BASE_PHYS} bsd.rd bsdrd.umg

bsd.umg: bsd
	mkuboot -a arm -o linux -e ${KERNEL_BASE_PHYS} -l ${KERNEL_BASE_PHYS} bsd bsd.umg
@


1.7
log
@for the install: target, use cmp as a rough attempt for avoiding repeated
make install
from Simon Nicolussi
ok jsing tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.6 2015/01/11 19:25:13 tedu Exp $
d75 3
a77 2
		    sed -e 's/@@KERNEL_BASE_PHYS@@/${KERNEL_BASE_PHYS}/' \
		    -e 's/@@KERNEL_BASE_VIRT@@/${KERNEL_BASE_VIRT}/' > ldscript
@


1.6
log
@switch prototype warnings to implicit-declaration warnings.
This should catch all the same bad cases, but be a little less aggravating
in circumstances where a prototype isn't necessary
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.5 2014/10/04 18:10:14 brad Exp $
d157 1
a157 2
	rm -f /obsd
	ln /bsd /obsd
@


1.5
log
@Switch the kernel configs over to using -Wframe-larger-than= instead of
-Wstack-larger-than-. This is what modern GCC supports as well as LLVM.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.4 2014/05/08 21:17:01 miod Exp $
d26 1
a26 1
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
@


1.4
log
@Format string fixes and removal of -Wno-format for arm kernels.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.3 2014/02/02 03:59:25 miod Exp $
d28 1
a28 1
		-Wstack-larger-than-2047
@


1.3
log
@armv7_start.o needs an explicit dependency on assym.h now; nick
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.2 2013/10/15 19:23:26 guenther Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-format \
@


1.2
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.armv7,v 1.1 2013/09/04 14:38:25 patrick Exp $
d149 1
@


1.1
log
@In the future, we shouldn't have one port port ARM SoC, that's just
ridiculous.  This is the first step for a common and generic ARM port
for ARMv7 SoCs.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.beagle,v 1.45 2013/08/02 09:09:17 rapha Exp $
d140 1
a140 1
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
d142 1
a142 1
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
@

