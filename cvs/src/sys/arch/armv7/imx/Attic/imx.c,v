head	1.27;
access;
symbols
	OPENBSD_6_0:1.24.0.2
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.27
date	2016.10.05.22.06.48;	author kettenis;	state dead;
branches;
next	1.26;
commitid	WddFsarPAXG7fLxc;

1.26
date	2016.09.23.17.59.17;	author kettenis;	state Exp;
branches;
next	1.25;
commitid	G6vP1hjedt063xQO;

1.25
date	2016.09.18.18.16.00;	author kettenis;	state Exp;
branches;
next	1.24;
commitid	baEd1JYtYxyO1XyV;

1.24
date	2016.07.22.13.40.39;	author jsg;	state Exp;
branches;
next	1.23;
commitid	CdmU8HRBTtJv9x5J;

1.23
date	2016.07.10.14.01.10;	author kettenis;	state Exp;
branches;
next	1.22;
commitid	kY49vfFOAjzEfi87;

1.22
date	2016.07.09.18.14.18;	author kettenis;	state Exp;
branches;
next	1.21;
commitid	t6Lfw8XWLQD1Dmvu;

1.21
date	2016.07.09.12.32.50;	author kettenis;	state Exp;
branches;
next	1.20;
commitid	F6qY7qK1yCCGr9gt;

1.20
date	2016.06.13.23.43.58;	author kettenis;	state Exp;
branches;
next	1.19;
commitid	0PJieNgDwKc9Zqx2;

1.19
date	2016.06.12.13.02.06;	author kettenis;	state Exp;
branches;
next	1.18;
commitid	OAwuwG6755ENLV7d;

1.18
date	2016.06.11.14.26.18;	author jsg;	state Exp;
branches;
next	1.17;
commitid	fpeQM4i2VQYEVdrK;

1.17
date	2016.06.09.15.38.30;	author kettenis;	state Exp;
branches;
next	1.16;
commitid	mdntq3kwoQcLMJEO;

1.16
date	2016.06.09.12.39.17;	author kettenis;	state Exp;
branches;
next	1.15;
commitid	5vNPvRRkE4tnKZEK;

1.15
date	2016.06.04.18.09.16;	author jsg;	state Exp;
branches;
next	1.14;
commitid	tYyT96DOGdhLjy9v;

1.14
date	2016.06.03.01.36.46;	author jsg;	state Exp;
branches;
next	1.13;
commitid	YA7F4i0IfchI1r7q;

1.13
date	2016.05.21.12.37.28;	author kettenis;	state Exp;
branches;
next	1.12;
commitid	G3o1EvQ7WmmxJj2I;

1.12
date	2016.05.19.09.54.18;	author jsg;	state Exp;
branches;
next	1.11;
commitid	YOVLhJEd9hDJJgxl;

1.11
date	2016.05.17.00.04.35;	author kettenis;	state Exp;
branches;
next	1.10;
commitid	CijrNWNJP9xbGk7R;

1.10
date	2016.05.02.15.27.24;	author patrick;	state Exp;
branches;
next	1.9;
commitid	gOMXBf6ijXFQHRgk;

1.9
date	2016.02.02.03.31.22;	author jsg;	state Exp;
branches;
next	1.8;
commitid	RbRzD1v0uZj2WQEC;

1.8
date	2015.05.20.00.14.55;	author jsg;	state Exp;
branches;
next	1.7;
commitid	Y47vqpZ6HtQSLXGx;

1.7
date	2015.05.19.03.30.54;	author jsg;	state Exp;
branches;
next	1.6;
commitid	l6xI4SC4UUe6il2U;

1.6
date	2015.05.17.12.28.03;	author jsg;	state Exp;
branches;
next	1.5;
commitid	EOSs8zkylOuJ0AbK;

1.5
date	2015.05.15.17.01.18;	author jsg;	state Exp;
branches;
next	1.4;
commitid	gjgGa2XQ19CHARyr;

1.4
date	2015.05.15.15.35.43;	author jsg;	state Exp;
branches;
next	1.3;
commitid	AFNG6oUBgS2y44wd;

1.3
date	2013.11.06.19.03.07;	author syl;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.05.23.05.11;	author patrick;	state Exp;
branches;
next	1.1;

1.1
date	2013.09.06.20.45.53;	author patrick;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Make imxdog(4) set cpuresetfn, and remove all the imx platform that is no
longer needed, including the imx board IDs.

ok patrick@@, jsg@@
@
text
@/* $OpenBSD: imx.c,v 1.26 2016/09/23 17:59:17 kettenis Exp $ */
/*
 * Copyright (c) 2005,2008 Dale Rahn <drahn@@openbsd.com>
 * Copyright (c) 2012-2013 Patrick Wildt <patrick@@blueri.se>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <machine/bus.h>

#include <arm/mainbus/mainbus.h>
#include <armv7/armv7/armv7var.h>

#include <dev/ofw/fdt.h>

int	imx_match(struct device *, void *, void *);
void	imx6_init();

struct cfattach imx_ca = {
	sizeof(struct armv7_softc), imx_match, armv7_attach
};

struct cfdriver imx_cd = {
	NULL, "imx", DV_DULL
};

struct board_dev imx_devs[] = {
	{ NULL,		0 }
};

const char *imx_compatible[] = {
	"fsl,imx6sl",
	"fsl,imx6sx",
	"fsl,imx6dl",
	"fsl,imx6q",
	"fsl,imx6qp",
	NULL
};

struct board_dev *
imx_board_devs(void)
{
	void *node;
	int i;

	node = fdt_find_node("/");
	if (node == NULL)
		return NULL;

	for (i = 0; imx_compatible[i] != NULL; i++) {
		if (fdt_is_compatible(node, imx_compatible[i]))
			return imx_devs;
	}
	return NULL;
}

void
imx_board_init(void)
{
	imx6_init();
}

int
imx_match(struct device *parent, void *cfdata, void *aux)
{
	union mainbus_attach_args *ma = (union mainbus_attach_args *)aux;
	struct cfdata *cf = (struct cfdata *)cfdata;

	if (ma->ma_name == NULL)
		return (0);

	if (strcmp(cf->cf_driver->cd_name, ma->ma_name) != 0)
		return (0);

	return (imx_board_devs() != NULL);
}
@


1.26
log
@Attach imxocotp(4) using the fdt.  Since this means that imxtemp(4) attaches
before imxocotp(4), delay reading the temperature sensor calibration
information until after imxocotp(4) attaches.
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.25 2016/09/18 18:16:00 kettenis Exp $ */
@


1.25
log
@Convert imxccm(4) and imxiomuxc(4) to attach using the fdt.  Use the "early"
locator to attach them before other drivers that might need their services.

ok patrick@@, jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.24 2016/07/22 13:40:39 jsg Exp $ */
a40 1
	{ "imxocotp",	0 },
@


1.24
log
@Attach imx(4) on i.mx6 quad plus which appears to be largely compatible
with i.mx6 quad but with more memory bandwidth and some graphics tweaks.

ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.23 2016/07/10 14:01:10 kettenis Exp $ */
a40 2
	{ "imxccm",	0 },
	{ "imxiomuxc",	0 },
@


1.23
log
@Dynamically attach imxgpio(4) using the FDT.
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.22 2016/07/09 18:14:18 kettenis Exp $ */
d52 1
@


1.22
log
@Simplify the i.MX6 platform code.  The list of board devices is now
(essentially) the same for all boards, so we can use a single list and
match based on the compatible property of the root node in the device tree.

ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.21 2016/07/09 12:32:50 kettenis Exp $ */
a43 7
	{ "imxgpio",	0 },
	{ "imxgpio",	1 },
	{ "imxgpio",	2 },
	{ "imxgpio",	3 },
	{ "imxgpio",	4 },
	{ "imxgpio",	5 },
	{ "imxgpio",	6 },
@


1.21
log
@Dynamically attach i.MX6 ehci(4) using the FDT.

ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.20 2016/06/13 23:43:58 kettenis Exp $ */
d27 2
d33 1
a33 2
	sizeof(struct armv7_softc), imx_match, armv7_attach, NULL,
	config_activate_children
d40 1
a40 86
struct board_dev hummingboard_devs[] = {
	{ "imxocotp",	0 },
	{ "imxccm",	0 },
	{ "imxiomuxc",	0 },
	{ "imxgpio",	0 },
	{ "imxgpio",	1 },
	{ "imxgpio",	2 },
	{ "imxgpio",	3 },
	{ "imxgpio",	4 },
	{ "imxgpio",	5 },
	{ "imxgpio",	6 },
	{ NULL,		0 }
};

struct board_dev sabrelite_devs[] = {
	{ "imxccm",	0 },
	{ "imxiomuxc",	0 },
	{ "imxocotp",	0 },
	{ "imxgpio",	0 },
	{ "imxgpio",	1 },
	{ "imxgpio",	2 },
	{ "imxgpio",	3 },
	{ "imxgpio",	4 },
	{ "imxgpio",	5 },
	{ "imxgpio",	6 },
	{ NULL,		0 }
};

struct board_dev sabresd_devs[] = {
	{ "imxocotp",	0 },
	{ "imxccm",	0 },
	{ "imxtemp",	0 },
	{ "imxiomuxc",	0 },
	{ "imxgpio",	0 },
	{ "imxgpio",	1 },
	{ "imxgpio",	2 },
	{ "imxgpio",	3 },
	{ "imxgpio",	4 },
	{ "imxgpio",	5 },
	{ "imxgpio",	6 },
	{ NULL,		0 }
};

struct board_dev udoo_devs[] = {
	{ "imxocotp",	0 },
	{ "imxccm",	0 },
	{ "imxiomuxc",	0 },
	{ "imxgpio",	0 },
	{ "imxgpio",	1 },
	{ "imxgpio",	2 },
	{ "imxgpio",	3 },
	{ "imxgpio",	4 },
	{ "imxgpio",	5 },
	{ "imxgpio",	6 },
	{ NULL,		0 }
};

struct board_dev utilite_devs[] = {
	{ "imxocotp",	0 },
	{ "imxccm",	0 },
	{ "imxiomuxc",	0 },
	{ "imxgpio",	0 },
	{ "imxgpio",	1 },
	{ "imxgpio",	2 },
	{ "imxgpio",	3 },
	{ "imxgpio",	4 },
	{ "imxgpio",	5 },
	{ "imxgpio",	6 },
	{ NULL,		0 }
};

struct board_dev novena_devs[] = {
	{ "imxccm",	0 },
	{ "imxiomuxc",	0 },
	{ "imxocotp",	0 },
	{ "imxgpio",	0 },
	{ "imxgpio",	1 },
	{ "imxgpio",	2 },
	{ "imxgpio",	3 },
	{ "imxgpio",	4 },
	{ "imxgpio",	5 },
	{ "imxgpio",	6 },
	{ NULL,		0 }
};

struct board_dev wandboard_devs[] = {
d54 6
a59 42
struct armv7_board imx_boards[] = {
	{
		BOARD_ID_IMX6_CUBOXI,
		hummingboard_devs,
		imx6_init,
	},
	{
		BOARD_ID_IMX6_HUMMINGBOARD,
		hummingboard_devs,
		imx6_init,
	},
	{
		BOARD_ID_IMX6_SABRELITE,
		sabrelite_devs,
		imx6_init,
	},
	{
		BOARD_ID_IMX6_SABRESD,
		sabresd_devs,
		imx6_init,
	},
	{
		BOARD_ID_IMX6_UDOO,
		udoo_devs,
		imx6_init,
	},
	{
		BOARD_ID_IMX6_UTILITE,
		utilite_devs,
		imx6_init,
	},
	{
		BOARD_ID_IMX6_NOVENA,
		novena_devs,
		imx6_init,
	},
	{
		BOARD_ID_IMX6_WANDBOARD,
		wandboard_devs,
		imx6_init,
	},
	{ 0, NULL, NULL },
d65 1
d68 7
a74 3
	for (i = 0; imx_boards[i].board_id != 0; i++) {
		if (imx_boards[i].board_id == board_id)
			return (imx_boards[i].devs);
d76 1
a76 1
	return (NULL);
d82 1
a82 8
	int i;

	for (i = 0; imx_boards[i].board_id != 0; i++) {
		if (imx_boards[i].board_id == board_id) {
			imx_boards[i].init();
			break;
		}
	}
@


1.20
log
@Dynamically attach imxdog(4) using the FDT.
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.19 2016/06/12 13:02:06 kettenis Exp $ */
a49 2
	{ "ehci",	0 },
	{ "ehci",	1 },
a63 1
	{ "ehci",	0 },
a78 1
	{ "ehci",	0 },
a92 1
	{ "ehci",	0 },
a106 1
	{ "ehci",	0 },
a120 1
	{ "ehci",	0 },
a134 1
	{ "ehci",	0 },
@


1.19
log
@Dynamically attach fec(4) using the FDT.

ok jsg@@, patrick@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.18 2016/06/11 14:26:18 jsg Exp $ */
a42 1
	{ "imxdog",	0 },
a57 1
	{ "imxdog",	0 },
a74 1
	{ "imxdog",	0 },
a89 1
	{ "imxdog",	0 },
a104 1
	{ "imxdog",	0 },
a118 1
	{ "imxdog",	0 },
a133 1
	{ "imxdog",	0 },
@


1.18
log
@dynamically attach imxuart using the FDT
ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.17 2016/06/09 15:38:30 kettenis Exp $ */
a52 1
	{ "fec",	0 },
a68 1
	{ "fec",	0 },
a85 1
	{ "fec",	0 },
a101 1
	{ "fec",	0 },
a117 1
	{ "fec",	0 },
a133 1
	{ "fec",	0 },
a148 1
	{ "fec",	0 },
@


1.17
log
@Dynamically attach imxesdhc(4) using the FDT.

ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.16 2016/06/09 12:39:17 kettenis Exp $ */
a43 1
	{ "imxuart",	0 },
a61 1
	{ "imxuart",	1 },
a79 1
	{ "imxuart",	0 },
a96 1
	{ "imxuart",	1 },
a113 1
	{ "imxuart",	3 },
a130 1
	{ "imxuart",	1 },
a147 1
	{ "imxuart",	0 },
@


1.16
log
@Dynamically attach i.MX6 ahci(4) using the FDT.

ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.15 2016/06/04 18:09:16 jsg Exp $ */
a51 1
	{ "imxesdhc",	1 },
a70 2
	{ "imxesdhc",	2 },
	{ "imxesdhc",	3 },
a89 3
	{ "imxesdhc",	1 },
	{ "imxesdhc",	2 },
	{ "imxesdhc",	3 },
a107 1
	{ "imxesdhc",	2 },
a125 1
	{ "imxesdhc",	2 },
a143 2
	{ "imxesdhc",	1 },
	{ "imxesdhc",	2 },
a162 2
	{ "imxesdhc",	2 },
	{ "imxesdhc",	0 },
@


1.15
log
@Remove model specific strings keyed off the board id.
We now pull the model string from fdt.
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.14 2016/06/03 01:36:46 jsg Exp $ */
a55 1
	{ "ahci",	0 },
a75 1
	{ "ahci",	0 },
a97 1
	{ "ahci",	0 },
a116 1
	{ "ahci",	0 },
a135 1
	{ "ahci",	0 },
a155 1
	{ "ahci",	0 },
a175 1
	{ "ahci",	0 },	/* only on quad, afaik. */
@


1.14
log
@rename imxenet to fec
ok patrick@@ kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.13 2016/05/21 12:37:28 kettenis Exp $ */
a188 1
		"SolidRun CuBox-i",
a193 1
		"SolidRun HummingBoard",
a198 1
		"Freescale i.MX6 SABRE Lite",
a203 1
		"Freescale i.MX6 SABRE SD",
a208 1
		"Udoo i.MX6",
a213 1
		"CompuLab Utilite",
a218 1
		"Kosagi Novena",
a223 1
		"Wandboard i.MX6",
d227 1
a227 1
	{ 0, NULL, NULL, NULL },
d235 1
a235 1
	for (i = 0; imx_boards[i].name != NULL; i++) {
d247 1
a247 1
	for (i = 0; imx_boards[i].name != NULL; i++) {
a252 12
}

const char *
imx_board_name(void)
{
	int i;

	for (i = 0; imx_boards[i].name != NULL; i++) {
		if (imx_boards[i].board_id == board_id)
			return (imx_boards[i].name);
	}
	return (NULL);
@


1.13
log
@Dynamically attach imxiic(4) and use the FDT to enumerate devices on i2c
busses.  Users of the CuBox-i and Hummingboard now need to boot with an FDT
to see the RTC.

ok jsg@@, patrick@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.12 2016/05/19 09:54:18 jsg Exp $ */
d55 1
a55 1
	{ "imxenet",	0 },
d76 1
a76 1
	{ "imxenet",	0 },
d99 1
a99 1
	{ "imxenet",	0 },
d119 1
a119 1
	{ "imxenet",	0 },
d139 1
a139 1
	{ "imxenet",	0 },
d160 1
a160 1
	{ "imxenet",	0 },
d178 1
a178 1
	{ "imxenet",	0 },
@


1.12
log
@Remove the PHYTEC phyFLEX support code, patrick says he no longer
has the hardware for the eval kit.

ok patrick@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.11 2016/05/17 00:04:35 kettenis Exp $ */
a51 1
	{ "imxiic",	2 },
@


1.11
log
@Enable the pcf8523 RTC on Hummingboard and CuBox-i.

ok patrick@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.10 2016/05/02 15:27:24 patrick Exp $ */
a60 21
struct board_dev phyflex_imx6_devs[] = {
	{ "imxccm",	0 },
	{ "imxiomuxc",	0 },
	{ "imxdog",	0 },
	{ "imxocotp",	0 },
	{ "imxuart",	3 },
	{ "imxgpio",	0 },
	{ "imxgpio",	1 },
	{ "imxgpio",	2 },
	{ "imxgpio",	3 },
	{ "imxgpio",	4 },
	{ "imxgpio",	5 },
	{ "imxgpio",	6 },
	{ "imxesdhc",	1 },
	{ "imxesdhc",	2 },
	{ "ehci",	0 },
	{ "imxenet",	0 },
	{ "ahci",	0 },
	{ NULL,		0 }
};

a197 6
		imx6_init,
	},
	{
		BOARD_ID_IMX6_PHYFLEX,
		"Phytec phyFLEX-i.MX6",
		phyflex_imx6_devs,
@


1.10
log
@Add check to armv7 platform bus match code, so that those busses only
attach if we are running in legacy mode.

ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.9 2016/02/02 03:31:22 jsg Exp $ */
d52 1
@


1.9
log
@remove uneeded break statements
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.8 2015/05/20 00:14:55 jsg Exp $ */
d24 1
d305 9
@


1.8
log
@add per soc match functions instead of using armv7_match
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.7 2015/05/19 03:30:54 jsg Exp $ */
d295 1
a295 1
		if (imx_boards[i].board_id == board_id) {
a296 2
			break;
		}
@


1.7
log
@Abstract the soc_machdep.c functions to allow a kernel to be built for
multiple socs.

From Patrick Wildt in bitrig with some additional changes.
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.6 2015/05/17 12:28:03 jsg Exp $ */
d26 2
a27 1
void imx6_init();
d30 1
a30 1
	sizeof(struct armv7_softc), armv7_match, armv7_attach, NULL,
d301 6
@


1.6
log
@Checking the dts files turned up some more imx sdhc problems.
- use the correct CD gpios on phyflex and wandboard usdhc3 (unit 2)
- udoo has just the one sd slot with no CD
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.5 2015/05/15 17:01:18 jsg Exp $ */
d26 2
d264 13
a276 1
imx_board_attach(void)
a282 1
			return (imx_boards[i].devs);
a285 1
	return (NULL);
@


1.5
log
@Decrement the unit numbers on the novena sdhc devices.  The imx6 dts
files seem to have labels numbered one higher than the nodes they are
assigned to.

Tested by djm
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.4 2015/05/15 15:35:43 jsg Exp $ */
a134 1
	{ "imxesdhc",	3 },
@


1.4
log
@Make board attaching table driven and move it out into the soc
directories.  Move the device tables while here as was done in bitrig.
With these changes the only use of the board id defines is in the soc
directories.

Tested by matthieu and djm on imx and myself on omap and sunxi (qemu).
ok djm@@, ok jasper@@ on an earlier version
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.3 2013/11/06 19:03:07 syl Exp $ */
d175 1
a176 1
	{ "imxesdhc",	3 },
@


1.3
log
@After factorizing armv7_machdep code here is an effort to factorize all
the code present in omap/omap.c imx/imx.c and sunxi/sunxi.c

All this code looks quite the same, so we move it in a generic armv7/armv7.c

This is a step closer to only one kernel for all armv7 boards.

ok patrick@@, rapha@@
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.2 2013/10/05 23:05:11 patrick Exp $ */
d35 255
@


1.2
log
@Support for the i.MX6-based Wandboard Quad.

From Artturi Alm.
@
text
@d1 1
a1 1
/* $OpenBSD: imx.c,v 1.1 2013/09/06 20:45:53 patrick Exp $ */
d21 1
a21 4
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/reboot.h>
#define _ARM32_BUS_DMA_PRIVATE
a22 26
#include <arch/arm/armv7/armv7var.h>
#include <armv7/imx/imxvar.h>

struct arm32_bus_dma_tag imx_bus_dma_tag = {
	0,
	0,
	NULL,
	_bus_dmamap_create,
	_bus_dmamap_destroy,
	_bus_dmamap_load,
	_bus_dmamap_load_mbuf,
	_bus_dmamap_load_uio,
	_bus_dmamap_load_raw,
	_bus_dmamap_unload,
	_bus_dmamap_sync,
	_bus_dmamem_alloc,
	_bus_dmamem_free,
	_bus_dmamem_map,
	_bus_dmamem_unmap,
	_bus_dmamem_mmap,
};

struct board_dev {
	char *name;
	int unit;
};
d24 1
a24 74
struct board_dev phyflex_imx6_devs[] = {
	{ "imxccm",	0 },
	{ "imxiomuxc",	0 },
	{ "imxdog",	0 },
	{ "imxocotp",	0 },
	{ "imxuart",	3 },
	{ "imxgpio",	0 },
	{ "imxgpio",	1 },
	{ "imxgpio",	2 },
	{ "imxgpio",	3 },
	{ "imxgpio",	4 },
	{ "imxgpio",	5 },
	{ "imxgpio",	6 },
	{ "imxesdhc",	1 },
	{ "imxesdhc",	2 },
	{ "ehci",	0 },
	{ "imxenet",	0 },
	{ "ahci",	0 },
	{ NULL,		0 }
};

struct board_dev sabrelite_devs[] = {
	{ "imxccm",	0 },
	{ "imxiomuxc",	0 },
	{ "imxdog",	0 },
	{ "imxocotp",	0 },
	{ "imxuart",	1 },
	{ "imxgpio",	0 },
	{ "imxgpio",	1 },
	{ "imxgpio",	2 },
	{ "imxgpio",	3 },
	{ "imxgpio",	4 },
	{ "imxgpio",	5 },
	{ "imxgpio",	6 },
	{ "imxesdhc",	2 },
	{ "imxesdhc",	3 },
	{ "ehci",	0 },
	{ "imxenet",	0 },
	{ "ahci",	0 },
	{ NULL,		0 }
};

struct board_dev wandboard_devs[] = {
	{ "imxccm",	0 },
	{ "imxiomuxc",	0 },
	{ "imxdog",	0 },
	{ "imxocotp",	0 },
	{ "imxuart",	0 },
	{ "imxgpio",	0 },
	{ "imxgpio",	1 },
	{ "imxgpio",	2 },
	{ "imxgpio",	3 },
	{ "imxgpio",	4 },
	{ "imxgpio",	5 },
	{ "imxgpio",	6 },
	{ "imxenet",	0 },
	{ "imxesdhc",	2 },
	{ "imxesdhc",	0 },
	{ "ehci",	0 },
	{ "ahci",	0 },	/* only on quad, afaik. */
	{ NULL,		0 }
};

struct board_dev *board_devs;

struct imx_dev *imx_devs = NULL;

struct imx_softc {
	struct device sc_dv;
};

int	imx_match(struct device *, void *, void *);
void	imx_attach(struct device *, struct device *, void *);
int	imx_submatch(struct device *, void *, void *);
d27 1
a27 1
	sizeof(struct imx_softc), imx_match, imx_attach, NULL,
a34 91
int
imx_match(struct device *parent, void *cfdata, void *aux)
{
	return (1);
}

void
imx_attach(struct device *parent, struct device *self, void *aux)
{
	struct board_dev *bd;

	switch (board_id) {
	case BOARD_ID_IMX6_PHYFLEX:
		printf(": PhyFLEX-i.MX6\n");
		imx6_init();
		board_devs = phyflex_imx6_devs;
		break;
	case BOARD_ID_IMX6_SABRELITE:
		printf(": i.MX6 SABRE Lite\n");
		imx6_init();
		board_devs = sabrelite_devs;
		break;
	case BOARD_ID_IMX6_WANDBOARD:
		printf(": i.MX6 Wandboard\n");
		imx6_init();
		board_devs = wandboard_devs;
		break;
	default:
		printf("\n");
		panic("%s: board type 0x%x unknown", __func__, board_id);
	}

	/* Directly configure on-board devices (dev* in config file). */
	for (bd = board_devs; bd->name != NULL; bd++) {
		struct imx_dev *id = imx_find_dev(bd->name, bd->unit);
		struct imx_attach_args ia;

		if (id == NULL)
			printf("%s: device %s unit %d not found\n",
			    self->dv_xname, bd->name, bd->unit);

		memset(&ia, 0, sizeof(ia));
		ia.ia_dev = id;
		ia.ia_iot = &armv7_bs_tag;
		ia.ia_dmat = &imx_bus_dma_tag;

		if (config_found_sm(self, &ia, NULL, imx_submatch) == NULL)
			printf("%s: device %s unit %d not configured\n",
			    self->dv_xname, bd->name, bd->unit);
	}
}

/*
 * We do direct configuration of devices on this SoC "bus", so we
 * never call the child device's match function at all (it can be
 * NULL in the struct cfattach).
 */
int
imx_submatch(struct device *parent, void *child, void *aux)
{
	struct cfdata *cf = child;
	struct imx_attach_args *ia = aux;

	if (strcmp(cf->cf_driver->cd_name, ia->ia_dev->name) == 0)
		return (1);

	/* "These are not the droids you are looking for." */
	return (0);
}

void
imx_set_devs(struct imx_dev *devs)
{
	imx_devs = devs;
}

struct imx_dev *
imx_find_dev(const char *name, int unit)
{
	struct imx_dev *id;

	if (imx_devs == NULL)
		panic("%s: imx_devs == NULL", __func__);

	for (id = imx_devs; id->name != NULL; id++) {
		if (id->unit == unit && strcmp(id->name, name) == 0)
			return (id);
	}

	return (NULL);
}
@


1.1
log
@Support for FreeScale's i.MX6 SoC.
@
text
@d1 1
a1 1
/* $OpenBSD: omap.c,v 1.3 2011/11/15 23:01:11 drahn Exp $ */
d95 21
d158 5
@

