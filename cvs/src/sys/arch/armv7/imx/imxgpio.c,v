head	1.12;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.9.0.2
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.12
date	2017.06.22.11.34.51;	author tom;	state Exp;
branches;
next	1.11;
commitid	UB6ah54suwoUhGTY;

1.11
date	2016.08.06.18.12.13;	author patrick;	state Exp;
branches;
next	1.10;
commitid	3RUq0vJwJq7ruKqj;

1.10
date	2016.07.27.11.45.02;	author patrick;	state Exp;
branches;
next	1.9;
commitid	yc14meyJgxIAcvAg;

1.9
date	2016.07.11.14.51.31;	author kettenis;	state Exp;
branches;
next	1.8;
commitid	WkkV8BpwXrk8sF5x;

1.8
date	2016.07.10.14.01.10;	author kettenis;	state Exp;
branches;
next	1.7;
commitid	kY49vfFOAjzEfi87;

1.7
date	2015.05.14.03.13.20;	author jsg;	state Exp;
branches;
next	1.6;
commitid	eEGRsDXnfhOltJCs;

1.6
date	2015.05.08.04.47.27;	author jsg;	state Exp;
branches;
next	1.5;
commitid	YCsMdO18RnsfmjNZ;

1.5
date	2015.05.08.03.38.26;	author jsg;	state Exp;
branches;
next	1.4;
commitid	zVOTE2eSG0EuTsRj;

1.4
date	2015.01.02.01.57.33;	author jsg;	state Exp;
branches;
next	1.3;
commitid	HaF7XDn04ChceeoJ;

1.3
date	2013.11.06.19.03.07;	author syl;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.19.19.45.17;	author patrick;	state Exp;
branches;
next	1.1;

1.1
date	2013.09.06.20.45.53;	author patrick;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Fix the remaining ';;'s in sys/
@
text
@/* $OpenBSD: imxgpio.c,v 1.11 2016/08/06 18:12:13 patrick Exp $ */
/*
 * Copyright (c) 2007,2009 Dale Rahn <drahn@@openbsd.org>
 * Copyright (c) 2012-2013 Patrick Wildt <patrick@@blueri.se>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/queue.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/evcount.h>

#include <arm/cpufunc.h>

#include <machine/bus.h>
#include <machine/fdt.h>
#include <machine/intr.h>

#include <armv7/armv7/armv7var.h>
#include <armv7/imx/imxgpiovar.h>

#include <dev/ofw/openfirm.h>
#include <dev/ofw/ofw_gpio.h>
#include <dev/ofw/fdt.h>

/* iMX6 registers */
#define GPIO_DR			0x00
#define GPIO_GDIR		0x04
#define GPIO_PSR		0x08
#define GPIO_ICR1		0x0C
#define GPIO_ICR2		0x10
#define GPIO_IMR		0x14
#define GPIO_ISR		0x18
#define GPIO_EDGE_SEL		0x1C

#define GPIO_NUM_PINS		32

struct intrhand {
	int (*ih_func)(void *);		/* handler */
	void *ih_arg;			/* arg for handler */
	int ih_ipl;			/* IPL_* */
	int ih_irq;			/* IRQ number */
	int ih_level;			/* GPIO level */
	struct evcount	ih_count;
	char *ih_name;
	void *ih_sc;
};

struct imxgpio_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
	int			sc_node;

	void			*sc_ih_h;
	void			*sc_ih_l;
	int			sc_ipl;
	int			sc_irq;
	struct intrhand		*sc_handlers[GPIO_NUM_PINS];
	struct interrupt_controller sc_ic;

	unsigned int (*sc_get_bit)(struct imxgpio_softc *sc,
	    unsigned int gpio);
	void (*sc_set_bit)(struct imxgpio_softc *sc,
	    unsigned int gpio);
	void (*sc_clear_bit)(struct imxgpio_softc *sc,
	    unsigned int gpio);
	void (*sc_set_dir)(struct imxgpio_softc *sc,
	    unsigned int gpio, unsigned int dir);
	struct gpio_controller sc_gc;
};

#define GPIO_PIN_TO_INST(x)	((x) >> 5)
#define GPIO_PIN_TO_OFFSET(x)	((x) & 0x1f)

int imxgpio_match(struct device *, void *, void *);
void imxgpio_attach(struct device *, struct device *, void *);

void imxgpio_config_pin(void *, uint32_t *, int);
int imxgpio_get_pin(void *, uint32_t *);
void imxgpio_set_pin(void *, uint32_t *, int);

int imxgpio_intr(void *);
void *imxgpio_intr_establish(void *, int *, int, int (*)(void *),
    void *, char *);
void imxgpio_intr_disestablish(void *);
void imxgpio_recalc_ipl(struct imxgpio_softc *);

unsigned int imxgpio_v6_get_bit(struct imxgpio_softc *, unsigned int);
void imxgpio_v6_set_bit(struct imxgpio_softc *, unsigned int);
void imxgpio_v6_clear_bit(struct imxgpio_softc *, unsigned int);
void imxgpio_v6_set_dir(struct imxgpio_softc *, unsigned int, unsigned int);
unsigned int imxgpio_v6_get_dir(struct imxgpio_softc *, unsigned int);


struct cfattach	imxgpio_ca = {
	sizeof (struct imxgpio_softc), imxgpio_match, imxgpio_attach
};

struct cfdriver imxgpio_cd = {
	NULL, "imxgpio", DV_DULL
};

int
imxgpio_match(struct device *parent, void *match, void *aux)
{
	struct fdt_attach_args *faa = aux;

	return OF_is_compatible(faa->fa_node, "fsl,imx35-gpio");
}

void
imxgpio_attach(struct device *parent, struct device *self, void *aux)
{
	struct imxgpio_softc *sc = (struct imxgpio_softc *)self;
	struct fdt_attach_args *faa = aux;

	if (faa->fa_nreg < 1)
		return;

	sc->sc_node = faa->fa_node;
	sc->sc_iot = faa->fa_iot;
	if (bus_space_map(sc->sc_iot, faa->fa_reg[0].addr,
	    faa->fa_reg[0].size, 0, &sc->sc_ioh))
		panic("imxgpio_attach: bus_space_map failed!");

	sc->sc_gc.gc_node = faa->fa_node;
	sc->sc_gc.gc_cookie = sc;
	sc->sc_gc.gc_config_pin = imxgpio_config_pin;
	sc->sc_gc.gc_get_pin = imxgpio_get_pin;
	sc->sc_gc.gc_set_pin = imxgpio_set_pin;
	gpio_controller_register(&sc->sc_gc);

	sc->sc_get_bit  = imxgpio_v6_get_bit;
	sc->sc_set_bit = imxgpio_v6_set_bit;
	sc->sc_clear_bit = imxgpio_v6_clear_bit;
	sc->sc_set_dir = imxgpio_v6_set_dir;

	sc->sc_ipl = IPL_NONE;
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GPIO_IMR, 0);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GPIO_ISR, ~0);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GPIO_EDGE_SEL, 0);

	sc->sc_ic.ic_node = faa->fa_node;
	sc->sc_ic.ic_cookie = sc;
	sc->sc_ic.ic_establish = imxgpio_intr_establish;
	sc->sc_ic.ic_disestablish = imxgpio_intr_disestablish;
	arm_intr_register_fdt(&sc->sc_ic);

	printf("\n");

	/* XXX - SYSCONFIG */
	/* XXX - CTRL */
	/* XXX - DEBOUNCE */
}

void
imxgpio_config_pin(void *cookie, uint32_t *cells, int config)
{
	struct imxgpio_softc *sc = cookie;
	uint32_t pin = cells[0];
	uint32_t val;

	if (pin >= GPIO_NUM_PINS)
		return;

	val = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GPIO_GDIR);
	if (config & GPIO_CONFIG_OUTPUT)
		val |= 1 << pin;
	else
		val &= ~(1 << pin);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GPIO_GDIR, val);
}

int
imxgpio_get_pin(void *cookie, uint32_t *cells)
{
	struct imxgpio_softc *sc = cookie;
	uint32_t pin = cells[0];
	uint32_t flags = cells[1];
	uint32_t reg;
	int val;

	reg = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GPIO_DR);
	reg &= (1 << pin);
	val = (reg >> pin) & 1;
	if (flags & GPIO_ACTIVE_LOW)
		val = !val;
	return val;
}

void
imxgpio_set_pin(void *cookie, uint32_t *cells, int val)
{
	struct imxgpio_softc *sc = cookie;
	uint32_t pin = cells[0];
	uint32_t flags = cells[1];
	uint32_t reg;

	reg = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GPIO_DR);
	if (flags & GPIO_ACTIVE_LOW)
		val = !val;
	if (val)
		reg |= (1 << pin);
	else
		reg &= ~(1 << pin);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GPIO_DR, reg);
}

unsigned int
imxgpio_get_bit(unsigned int gpio)
{
	struct imxgpio_softc *sc = imxgpio_cd.cd_devs[GPIO_PIN_TO_INST(gpio)];

	return sc->sc_get_bit(sc, gpio);
	
}

void
imxgpio_set_bit(unsigned int gpio)
{
	struct imxgpio_softc *sc = imxgpio_cd.cd_devs[GPIO_PIN_TO_INST(gpio)];

	sc->sc_set_bit(sc, gpio);
}

void
imxgpio_clear_bit(unsigned int gpio)
{
	struct imxgpio_softc *sc = imxgpio_cd.cd_devs[GPIO_PIN_TO_INST(gpio)];

	sc->sc_clear_bit(sc, gpio);
}
void
imxgpio_set_dir(unsigned int gpio, unsigned int dir)
{
	struct imxgpio_softc *sc = imxgpio_cd.cd_devs[GPIO_PIN_TO_INST(gpio)];

	sc->sc_set_dir(sc, gpio, dir);
}

unsigned int
imxgpio_v6_get_bit(struct imxgpio_softc *sc, unsigned int gpio)
{
	u_int32_t val;

	val = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GPIO_DR);

	return (val >> GPIO_PIN_TO_OFFSET(gpio)) & 0x1;
}

void
imxgpio_v6_set_bit(struct imxgpio_softc *sc, unsigned int gpio)
{
	u_int32_t val;

	val = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GPIO_DR);

	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GPIO_DR,
		val | (1 << GPIO_PIN_TO_OFFSET(gpio)));
}

void
imxgpio_v6_clear_bit(struct imxgpio_softc *sc, unsigned int gpio)
{
	u_int32_t val;

	val = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GPIO_DR);

	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GPIO_DR,
		val & ~(1 << GPIO_PIN_TO_OFFSET(gpio)));
}

void
imxgpio_v6_set_dir(struct imxgpio_softc *sc, unsigned int gpio, unsigned int dir)
{
	int s;
	u_int32_t val;

	s = splhigh();

	val = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GPIO_GDIR);
	if (dir == IMXGPIO_DIR_OUT)
		val |= 1 << GPIO_PIN_TO_OFFSET(gpio);
	else
		val &= ~(1 << GPIO_PIN_TO_OFFSET(gpio));
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GPIO_GDIR, val);

	splx(s);
}

unsigned int
imxgpio_v6_get_dir(struct imxgpio_softc *sc, unsigned int gpio)
{
	int s;
	u_int32_t val;

	s = splhigh();

	val = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GPIO_GDIR);
	if (val & (1 << GPIO_PIN_TO_OFFSET(gpio)))
		val = IMXGPIO_DIR_OUT;
	else
		val = IMXGPIO_DIR_IN;

	splx(s);
	return val;
}

int
imxgpio_intr(void *cookie)
{
	struct imxgpio_softc	*sc = (struct imxgpio_softc *)cookie;
	struct intrhand		*ih;
	uint32_t		 status, pending, mask;
	int			 pin, s;

	status = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GPIO_ISR);
	mask = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GPIO_IMR);

	status &= mask;
	pending = status;

	while (pending) {
		pin = ffs(pending) - 1;

		if ((ih = sc->sc_handlers[pin]) != NULL) {
			s = splraise(ih->ih_ipl);
			if (ih->ih_func(ih->ih_arg))
				ih->ih_count.ec_count++;
			splx(s);
		}

		pending &= ~(1 << pin);
	}

	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GPIO_ISR, status);

	return 1;
}

void *
imxgpio_intr_establish(void *cookie, int *cells, int ipl,
    int (*func)(void *), void *arg, char *name)
{
	struct imxgpio_softc	*sc = (struct imxgpio_softc *)cookie;
	struct intrhand		*ih;
	int			 psw, val, reg, shift;
	int			 irqno = cells[0];
	int			 level = cells[1];

	if (irqno < 0 || irqno >= GPIO_NUM_PINS)
		panic("%s: bogus irqnumber %d: %s", __func__,
		     irqno, name);

	if (sc->sc_handlers[irqno] != NULL)
		panic("%s: irqnumber %d reused: %s", __func__,
		     irqno, name);

	ih = malloc(sizeof(*ih), M_DEVBUF, M_WAITOK);
	ih->ih_func = func;
	ih->ih_arg = arg;
	ih->ih_ipl = ipl;
	ih->ih_irq = irqno;
	ih->ih_name = name;
	ih->ih_level = level;
	ih->ih_sc = sc;

	psw = disable_interrupts(PSR_I);

	sc->sc_handlers[irqno] = ih;

	if (name != NULL)
		evcount_attach(&ih->ih_count, name, &ih->ih_irq);

#ifdef DEBUG_INTC
	printf("%s: irq %d ipl %d [%s]\n", __func__, ih->ih_irq, ih->ih_ipl,
	    ih->ih_name);
#endif

	imxgpio_recalc_ipl(sc);

	switch (level) {
		case 1: /* rising */
			val = 2;
			break;
		case 2: /* falling */
			val = 3;
			break;
		case 4: /* high */
			val = 1;
			break;
		case 8: /* low */
			val = 0;
			break;
		default:
			panic("%s: unsupported trigger type", __func__);
	}

	if (irqno < 16) {
		reg = GPIO_ICR1;
		shift = irqno << 1;
	} else {
		reg = GPIO_ICR2;
		shift = (irqno - 16) << 1;
	}

	bus_space_write_4(sc->sc_iot, sc->sc_ioh, reg,
	    bus_space_read_4(sc->sc_iot, sc->sc_ioh, reg) & ~(0x3 << shift));
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, reg,
	    bus_space_read_4(sc->sc_iot, sc->sc_ioh, reg) | val << shift);

	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GPIO_IMR,
	    bus_space_read_4(sc->sc_iot, sc->sc_ioh, GPIO_IMR) | 1 << irqno);

	restore_interrupts(psw);
	return (ih);
}

void
imxgpio_intr_disestablish(void *cookie)
{
	struct intrhand		*ih = cookie;
	struct imxgpio_softc	*sc = ih->ih_sc;
	uint32_t		 mask;
	int			 psw;

	psw = disable_interrupts(PSR_I);

#ifdef DEBUG_INTC
	printf("%s: irq %d ipl %d [%s]\n", __func__, ih->ih_irq, ih->ih_ipl,
	    ih->ih_name);
#endif

	mask = bus_space_read_4(sc->sc_iot, sc->sc_ioh, GPIO_IMR);
	mask &= ~(1 << ih->ih_irq);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, GPIO_IMR, mask);

	sc->sc_handlers[ih->ih_irq] = NULL;
	if (ih->ih_name != NULL)
		evcount_detach(&ih->ih_count);
	free(ih, M_DEVBUF, sizeof(*ih));

	imxgpio_recalc_ipl(sc);

	restore_interrupts(psw);
}

void
imxgpio_recalc_ipl(struct imxgpio_softc *sc)
{
	struct intrhand		*ih;
	int			 pin;
	int			 max = IPL_NONE;
	int			 min = IPL_HIGH;

	for (pin = 0; pin < GPIO_NUM_PINS; pin++) {
		ih = sc->sc_handlers[pin];
		if (ih == NULL)
			continue;

		if (ih->ih_ipl > max)
			max = ih->ih_ipl;

		if (ih->ih_ipl < min)
			min = ih->ih_ipl;
	}

	if (max == IPL_NONE)
		min = IPL_NONE;

	if (sc->sc_ipl != max) {
		sc->sc_ipl = max;

		if (sc->sc_ih_l != NULL)
			arm_intr_disestablish_fdt(sc->sc_ih_l);

		if (sc->sc_ih_h != NULL)
			arm_intr_disestablish_fdt(sc->sc_ih_h);

		if (sc->sc_ipl != IPL_NONE) {
			sc->sc_ih_l = arm_intr_establish_fdt_idx(sc->sc_node, 0,
			    sc->sc_ipl, imxgpio_intr, sc, sc->sc_dev.dv_xname);
			sc->sc_ih_h = arm_intr_establish_fdt_idx(sc->sc_node, 1,
			    sc->sc_ipl, imxgpio_intr, sc, sc->sc_dev.dv_xname);
		}
	}
}
@


1.11
log
@Implement interrupt controller functionality in the i.MX6 GPIO
driver.  This allows us to use to hook up the Ethernet interrupt
on the Nitrogen6x, SabreLite and WandBoard like it's described
in the device tree.

ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: imxgpio.c,v 1.10 2016/07/27 11:45:02 patrick Exp $ */
d201 1
a201 1
		val = !val;;
@


1.10
log
@Instead of passing the raw reg property to simplebus nodes,
pass a pre-processed array of fdt_reg structs.  This means
that the drivers don't have to understand the cell properties
themselves but can rely on the 64-bit addr/size pairs.

ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: imxgpio.c,v 1.9 2016/07/11 14:51:31 kettenis Exp $ */
d56 1
a56 1
	int ih_gpio;			/* gpio pin */
d59 1
d66 2
d70 1
a70 2
	int 			sc_max_il;
	int 			sc_min_il;
d73 2
d96 6
d134 1
d152 11
a164 1
	/* XXX - IRQ */
d321 180
@


1.9
log
@Hook up imxgpio(4) to the FDT gpio framework.

ok visa@@, jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: imxgpio.c,v 1.8 2016/07/10 14:01:10 kettenis Exp $ */
d37 1
d121 1
a121 1
	if (faa->fa_nreg < 2)
d125 2
a126 2
	if (bus_space_map(sc->sc_iot, faa->fa_reg[0],
	    faa->fa_reg[1], 0, &sc->sc_ioh))
@


1.8
log
@Dynamically attach imxgpio(4) using the FDT.
@
text
@d1 1
a1 1
/* $OpenBSD: imxgpio.c,v 1.7 2015/05/14 03:13:20 jsg Exp $ */
d36 1
d78 1
d87 4
d128 7
d146 53
@


1.7
log
@Remove BOARD_ID* tests that do the same thing for every imx board.
Tested by and ok djm@@
@
text
@d1 1
a1 1
/* $OpenBSD: imxgpio.c,v 1.6 2015/05/08 04:47:27 jsg Exp $ */
d29 1
d35 2
d82 2
a83 4
void imxgpio_attach(struct device *parent, struct device *self, void *args);
void imxgpio_recalc_interrupts(struct imxgpio_softc *sc);
int imxgpio_irq(void *);
int imxgpio_irq_dummy(void *);
d93 1
a93 1
	sizeof (struct imxgpio_softc), NULL, imxgpio_attach
d100 8
d109 1
a109 1
imxgpio_attach(struct device *parent, struct device *self, void *args)
d111 5
a115 2
	struct armv7_attach_args *aa = args;
	struct imxgpio_softc *sc = (struct imxgpio_softc *) self;
d117 3
a119 3
	sc->sc_iot = aa->aa_iot;
	if (bus_space_map(sc->sc_iot, aa->aa_dev->mem[0].addr,
	    aa->aa_dev->mem[0].size, 0, &sc->sc_ioh))
@


1.6
log
@Add missing sabresd case statements.  As sabresd_devs[] includes imxgpio
an attempt to boot on sabresd would have tried to deref NULL function
pointers.
@
text
@d1 1
a1 1
/* $OpenBSD: imxgpio.c,v 1.5 2015/05/08 03:38:26 jsg Exp $ */
a78 1
int imxgpio_match(struct device *parent, void *v, void *aux);
d92 1
a92 1
	sizeof (struct imxgpio_softc), imxgpio_match, imxgpio_attach
a98 20
int
imxgpio_match(struct device *parent, void *v, void *aux)
{
	switch (board_id) {
	case BOARD_ID_IMX6_CUBOXI:
	case BOARD_ID_IMX6_HUMMINGBOARD:
	case BOARD_ID_IMX6_NOVENA:
	case BOARD_ID_IMX6_PHYFLEX:
	case BOARD_ID_IMX6_SABRELITE:
	case BOARD_ID_IMX6_SABRESD:
	case BOARD_ID_IMX6_UDOO:
	case BOARD_ID_IMX6_UTILITE:
	case BOARD_ID_IMX6_WANDBOARD:
		break; /* continue trying */
	default:
		return 0; /* unknown */
	}
	return (1);
}

d110 4
a113 17

	switch (board_id) {
		case BOARD_ID_IMX6_CUBOXI:
		case BOARD_ID_IMX6_HUMMINGBOARD:
		case BOARD_ID_IMX6_NOVENA:
		case BOARD_ID_IMX6_PHYFLEX:
		case BOARD_ID_IMX6_SABRELITE:
		case BOARD_ID_IMX6_SABRESD:
		case BOARD_ID_IMX6_UDOO:
		case BOARD_ID_IMX6_UTILITE:
		case BOARD_ID_IMX6_WANDBOARD:
			sc->sc_get_bit  = imxgpio_v6_get_bit;
			sc->sc_set_bit = imxgpio_v6_set_bit;
			sc->sc_clear_bit = imxgpio_v6_clear_bit;
			sc->sc_set_dir = imxgpio_v6_set_dir;
			break;
	}
@


1.5
log
@Add initial board specific parts of novena support, tested by djm@@
While novena has it's own board id it's u-boot does not set it.
"setenv machid 10ad" in u-boot will set the novena board id (0x10ad/4269).
@
text
@d1 1
a1 1
/* $OpenBSD: imxgpio.c,v 1.4 2015/01/02 01:57:33 jsg Exp $ */
d109 1
d138 1
@


1.4
log
@Add some additional i.MX6 board types from Bitrig.
CompuLab Utilite, SolidRun HummingBoard/CuBox-i and UDOO.
@
text
@d1 1
a1 1
/* $OpenBSD: imxgpio.c,v 1.3 2013/11/06 19:03:07 syl Exp $ */
d106 1
d134 1
@


1.3
log
@After factorizing armv7_machdep code here is an effort to factorize all
the code present in omap/omap.c imx/imx.c and sunxi/sunxi.c

All this code looks quite the same, so we move it in a generic armv7/armv7.c

This is a step closer to only one kernel for all armv7 boards.

ok patrick@@, rapha@@
@
text
@d1 1
a1 1
/* $OpenBSD: imxgpio.c,v 1.2 2013/10/19 19:45:17 patrick Exp $ */
d104 2
d108 2
d131 2
d135 2
@


1.2
log
@Wandboard also is a supported board of this driver.  Every i.MX6 based
device is.
@
text
@d1 1
a1 1
/* $OpenBSD: imxgpio.c,v 1.1 2013/09/06 20:45:53 patrick Exp $ */
d31 1
a31 1
#include <armv7/imx/imxvar.h>
d117 1
a117 1
	struct imx_attach_args *ia = args;
d120 3
a122 3
	sc->sc_iot = ia->ia_iot;
	if (bus_space_map(sc->sc_iot, ia->ia_dev->mem[0].addr,
	    ia->ia_dev->mem[0].size, 0, &sc->sc_ioh))
@


1.1
log
@Support for FreeScale's i.MX6 SoC.
@
text
@d1 1
a1 1
/* $OpenBSD: omgpio.c,v 1.8 2011/11/10 19:37:01 uwe Exp $ */
d106 1
d129 1
@

