head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2016.08.31.14.23.37;	author jsg;	state Exp;
branches;
next	1.4;
commitid	y5ChsIZak6GZdFjO;

1.4
date	2016.06.08.15.27.05;	author jsg;	state Exp;
branches;
next	1.3;
commitid	O8sdMmMKqczNQU5p;

1.3
date	2016.06.04.18.09.16;	author jsg;	state Exp;
branches;
next	1.2;
commitid	tYyT96DOGdhLjy9v;

1.2
date	2016.05.20.01.42.56;	author jsg;	state Exp;
branches;
next	1.1;
commitid	YGjyg8G0BIwpBGtt;

1.1
date	2015.06.08.06.33.16;	author jsg;	state Exp;
branches;
next	;
commitid	TKnNVNES86I6ApFq;


desc
@@


1.5
log
@remove no longer required pl011var.h include
@
text
@/*	$OpenBSD: vexpress_machdep.c,v 1.4 2016/06/08 15:27:05 jsg Exp $	*/
/*
 * Copyright (c) 2013 Sylvestre Gallon <ccna.syl@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/systm.h>
#include <sys/termios.h>

#include <machine/bus.h>
#include <machine/bootconfig.h>

#include <dev/ic/comreg.h>
#include <dev/ic/comvar.h>

#include <arm/cortex/smc.h>
#include <arm/armv7/armv7var.h>
#include <arm/mainbus/mainbus.h>
#include <armv7/armv7/armv7var.h>
#include <armv7/armv7/armv7_machdep.h>

extern void sysconf_reboot(void);
extern void sysconf_shutdown(void);
extern struct board_dev *vexpress_board_devs(void);
extern void vexpress_board_init(void);
extern int vexpress_legacy_map(void);

void
vexpress_platform_smc_write(bus_space_tag_t iot, bus_space_handle_t ioh, bus_size_t off,
    uint32_t op, uint32_t val)
{
	bus_space_write_4(iot, ioh, off, val);
}

void
vexpress_platform_init_mainbus(struct device *self)
{
	mainbus_legacy_found(self, "cortex");
	mainbus_legacy_found(self, "vexpress");
}

void
vexpress_platform_watchdog_reset(void)
{
	sysconf_reboot();
}

void
vexpress_platform_powerdown(void)
{
	sysconf_shutdown();
}

void
vexpress_platform_disable_l2_if_needed(void)
{

}

void
vexpress_platform_board_init(void)
{
	vexpress_board_init();
}

struct armv7_platform vexpress_platform = {
	.board_init = vexpress_platform_board_init,
	.smc_write = vexpress_platform_smc_write,
	.watchdog_reset = vexpress_platform_watchdog_reset,
	.powerdown = vexpress_platform_powerdown,
	.disable_l2_if_needed = vexpress_platform_disable_l2_if_needed,
	.init_mainbus = vexpress_platform_init_mainbus,
};

struct armv7_platform *
vexpress_platform_match(void)
{
	struct board_dev *devs;

	devs = vexpress_board_devs();
	if (devs == NULL)
		return (NULL);

	vexpress_platform.devs = devs;
	return (&vexpress_platform);
}
@


1.4
log
@Use fdt to find the console to initialise.  Try to use /chosen/stdout-path
if present otherwise fallback to /aliases/serial0.

Don't require a platform match to run the various console init functions
so the init functions will run for unknown board ids.

With and ok kettenis@@ on a earlier version.
@
text
@d1 1
a1 1
/*	$OpenBSD: vexpress_machdep.c,v 1.3 2016/06/04 18:09:16 jsg Exp $	*/
a32 1
#include <armv7/vexpress/pl011var.h>
@


1.3
log
@Remove model specific strings keyed off the board id.
We now pull the model string from fdt.
@
text
@d1 1
a1 1
/*	$OpenBSD: vexpress_machdep.c,v 1.2 2016/05/20 01:42:56 jsg Exp $	*/
a40 2
extern int comcnspeed;
extern int comcnmode;
a49 17
vexpress_platform_init_cons(void)
{
	paddr_t paddr;

	switch (board_id) {
	default:
	case BOARD_ID_VEXPRESS:
		if (vexpress_legacy_map())
			paddr = 0x10009000;
		else
			paddr = 0x1c090000;
		break;
	}
	pl011cnattach(&armv7_bs_tag, paddr, comcnspeed, comcnmode);
}

void
a82 1
	.init_cons = vexpress_platform_init_cons,
@


1.2
log
@add init_mainbus() hooks for the other armv7 platforms
@
text
@d1 1
a1 1
/*	$OpenBSD: vexpress_machdep.c,v 1.1 2015/06/08 06:33:16 jsg Exp $	*/
a37 1
extern char *vexpress_board_name(void);
a86 6
const char *
vexpress_platform_board_name(void)
{
	return (vexpress_board_name());
}

a99 2
	.boot_name = "OpenBSD/vexpress",
	.board_name = vexpress_platform_board_name,
@


1.1
log
@Add initial support for the ARM Versatile Express boards as emulated by
qemu with virtio memory ranges.

Unfortunately the vexpress-a9 and vexpress-a15 boards/targets have
different load addresses and memory maps.

Code for the PL011 UART and mmio virtio attachment from Patrick Wildt
in bitrig.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d31 1
d70 7
d115 1
@

