head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.6
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.1.0.6
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2016.10.09.01.40.43;	author jsg;	state Exp;
branches;
next	1.2;
commitid	Of2rCa9qI1b33BPT;

1.2
date	2016.10.08.06.45.02;	author jsg;	state Exp;
branches;
next	1.1;
commitid	CJbbKA8PC6YsqXGt;

1.1
date	2015.06.08.06.33.16;	author jsg;	state Exp;
branches;
next	;
commitid	TKnNVNES86I6ApFq;


desc
@@


1.3
log
@Remove the vexpress platform abstraction and board id.  All the devices
that attached to vexpress have been converted to fdt so this is no
longer required.
@
text
@/*	$OpenBSD: sysreg.c,v 1.2 2016/10/08 06:45:02 jsg Exp $	*/

/*
 * Copyright (c) 2015 Jonathan Gray <jsg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h> 
#include <sys/systm.h> 
#include <sys/device.h> 
#include <machine/bus.h> 
#include <machine/fdt.h>

#include <armv7/armv7/armv7var.h>
#include <armv7/armv7/armv7_machdep.h>

#include <dev/ofw/openfirm.h>
#include <dev/ofw/fdt.h>

#define SYS_ID			0x00
#define SYS_PROCID0		0x84
#define SYS_PROCID1		0x88
#define SYS_CFGDATA		0xa0
#define SYS_CFGCTRL		0xa4
#define SYS_CFGSTAT		0xa8

#define SYS_CFG_WRITE		(1 << 30)
#define SYS_CFG_START		(1U << 31)

#define SYS_CFG_RESET		5
#define SYS_CFG_SHUTDOWN	8
#define SYS_CFG_REBOOT		9

#define SYS_CFGSTAT_COMPLETE	(1 << 0)
#define SYS_CFGSTAT_ERROR	(1 << 1)

struct sysreg_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
};

struct sysreg_softc *sysreg_sc;

int sysreg_match(struct device *, void *, void *);
void sysreg_attach(struct device *, struct device *, void *);
void sysconf_function(struct sysreg_softc *, int);
void sysconf_reboot(void);
void sysconf_shutdown(void);

struct cfattach sysreg_ca = {
	sizeof (struct sysreg_softc), sysreg_match, sysreg_attach
};

struct cfdriver sysreg_cd = {
	NULL, "sysreg", DV_DULL
};

int
sysreg_match(struct device *parent, void *match, void *aux)
{
	struct fdt_attach_args *faa = aux;

	return OF_is_compatible(faa->fa_node, "arm,vexpress-sysreg");
}

void
sysreg_attach(struct device *parent, struct device *self, void *aux)
{
	struct fdt_attach_args *faa = aux;
	struct sysreg_softc *sc = (struct sysreg_softc *)self;
	uint32_t id;

	sc->sc_iot = faa->fa_iot;
	if (bus_space_map(sc->sc_iot, faa->fa_reg[0].addr,
	    faa->fa_reg[0].size, 0, &sc->sc_ioh))
		panic(": bus_space_map failed!");
	sysreg_sc = sc;
	
	id = bus_space_read_4(sc->sc_iot, sc->sc_ioh, SYS_ID);
	printf(": ID 0x%x", id);

	id = bus_space_read_4(sc->sc_iot, sc->sc_ioh, SYS_PROCID0);
	printf(" PROCID0 0x%x\n", id);

	cpuresetfn = sysconf_reboot;
	powerdownfn = sysconf_shutdown;
}

void
sysconf_function(struct sysreg_softc *sc, int function)
{
	int dcc, site, position, device;

	dcc = 0;
	site = 0;
	position = 0;
	device = 0;

	bus_space_write_4(sc->sc_iot, sc->sc_ioh, SYS_CFGSTAT, 0);
	bus_space_write_4(sc->sc_iot, sc->sc_ioh, SYS_CFGCTRL,
	    SYS_CFG_START | SYS_CFG_WRITE |
	    (dcc << 26) | (function << 20) | (site << 16) |
	    (position << 12) | device);

	while ((bus_space_read_4(sc->sc_iot, sc->sc_ioh, SYS_CFGSTAT) &
	    SYS_CFGSTAT_COMPLETE) == 0);

	if (bus_space_read_4(sc->sc_iot, sc->sc_ioh, SYS_CFGSTAT) &
	    SYS_CFGSTAT_ERROR)
		printf("SYS_CFGSTAT error\n");
}

void
sysconf_reboot(void)
{
	struct sysreg_softc *sc = sysreg_sc;

	if (sc == NULL)
		return;

	sysconf_function(sc, SYS_CFG_REBOOT);
}

void
sysconf_shutdown(void)
{
	struct sysreg_softc *sc = sysreg_sc;

	if (sc == NULL)
		return;

	sysconf_function(sc, SYS_CFG_SHUTDOWN);
}
@


1.2
log
@Dynamically attach sysreg(4) using the FDT.
@
text
@d1 1
a1 1
/*	$OpenBSD: sysreg.c,v 1.1 2015/06/08 06:33:16 jsg Exp $	*/
d26 1
d58 3
a60 1
void sysreg_reset(void);
d96 3
@


1.1
log
@Add initial support for the ARM Versatile Express boards as emulated by
qemu with virtio memory ranges.

Unfortunately the vexpress-a9 and vexpress-a15 boards/targets have
different load addresses and memory maps.

Code for the PL011 UART and mmio virtio attachment from Patrick Wildt
in bitrig.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d23 2
d27 3
d55 1
d60 1
a60 1
	sizeof (struct sysreg_softc), NULL, sysreg_attach
d67 8
d76 1
a76 1
sysreg_attach(struct device *parent, struct device *self, void *args)
d78 1
a78 1
	struct armv7_attach_args *aa = args;
d82 3
a84 3
	sc->sc_iot = aa->aa_iot;
	if (bus_space_map(sc->sc_iot, aa->aa_dev->mem[0].addr,
	    aa->aa_dev->mem[0].size, 0, &sc->sc_ioh))
@

