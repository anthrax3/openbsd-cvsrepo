head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2017.03.04.18.17.24;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	2mAkX7pa0O4Pk7zC;

1.4
date	2016.07.26.22.10.10;	author patrick;	state Exp;
branches;
next	1.3;
commitid	QHTy0YAECnrTlcSQ;

1.3
date	2016.04.24.00.57.23;	author patrick;	state Exp;
branches;
next	1.2;
commitid	LnsUZ9pocLJscsAz;

1.2
date	2015.05.27.00.06.14;	author jsg;	state Exp;
branches;
next	1.1;
commitid	G6QP18Ap4gF8hOTp;

1.1
date	2015.01.26.02.48.24;	author bmercer;	state Exp;
branches;
next	;
commitid	PStGWtijE9UAf7Yd;


desc
@@


1.5
log
@Convert a few exynos drivers to attach using the FDT.
@
text
@/* $OpenBSD: exmct.c,v 1.4 2016/07/26 22:10:10 patrick Exp $ */
/*
 * Copyright (c) 2012-2013 Patrick Wildt <patrick@@blueri.se>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <arm/cpufunc.h>

#include <machine/intr.h>
#include <machine/bus.h>
#include <machine/fdt.h>

#include <dev/ofw/openfirm.h>
#include <dev/ofw/fdt.h>

/* registers */
#define MCT_CTRL	0x240
#define MCT_WRITE_STAT	0x24C

/* bits and bytes */
#define MCT_CTRL_START	(1 << 8)

struct exmct_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
};

struct exmct_softc *exmct_sc;

int exmct_match(struct device *, void *, void *);
void exmct_attach(struct device *, struct device *, void *);
void exmct_stop(void);
void exmct_reset(void);

struct cfattach	exmct_ca = {
	sizeof (struct exmct_softc), exmct_match, exmct_attach
};

struct cfdriver exmct_cd = {
	NULL, "exmct", DV_DULL
};

int
exmct_match(struct device *parent, void *match, void *aux)
{
	struct fdt_attach_args *faa = aux;

	return OF_is_compatible(faa->fa_node, "samsung,exynos4210-mct");
}

void
exmct_attach(struct device *parent, struct device *self, void *aux)
{
	struct exmct_softc *sc = (struct exmct_softc *)self;
	struct fdt_attach_args *faa = aux;
	uint32_t i, mask, reg;

	sc->sc_iot = faa->fa_iot;

	if (bus_space_map(sc->sc_iot, faa->fa_reg[0].addr,
	    faa->fa_reg[0].size, 0, &sc->sc_ioh))
		panic("%s: bus_space_map failed!", __func__);

	printf("\n");

	exmct_sc = sc;

	extern void agtimer_delay(u_int);
	arm_clock_register(NULL, agtimer_delay, NULL, NULL);

	bus_space_write_4(sc->sc_iot, sc->sc_ioh, MCT_CTRL,
	    bus_space_read_4(sc->sc_iot, sc->sc_ioh, MCT_CTRL) | MCT_CTRL_START);

	mask = (1 << 16);

	/* Wait 10 times until written value is applied */
	for (i = 0; i < 10; i++) {
		reg = bus_space_read_4(sc->sc_iot, sc->sc_ioh, MCT_WRITE_STAT);
		if (reg & mask) {
			bus_space_write_4(sc->sc_iot, sc->sc_ioh,
			    MCT_WRITE_STAT, mask);
			return;
		}
		cpufunc_nullop();
	}

	/* NOTREACHED */

	panic("%s: can't enable timer!", __func__);
}
@


1.4
log
@Rename struct fdt_memory to fdt_reg to match the member name
used in the fdt attach args and the device tree.

ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: exmct.c,v 1.3 2016/04/24 00:57:23 patrick Exp $ */
a19 2
#include <sys/queue.h>
#include <sys/malloc.h>
d21 1
a21 3
#include <sys/evcount.h>
#include <sys/socket.h>
#include <sys/timeout.h>
d23 1
a25 1
#if NFDT > 0
d27 3
a29 2
#endif
#include <armv7/armv7/armv7var.h>
d46 2
a47 2
int exmct_match(struct device *parent, void *v, void *aux);
void exmct_attach(struct device *parent, struct device *self, void *args);
a51 3
	sizeof (struct exmct_softc), NULL, exmct_attach
};
struct cfattach	exmct_fdt_ca = {
d60 1
a60 1
exmct_match(struct device *parent, void *v, void *aux)
d62 1
a62 2
#if NFDT > 0
	struct armv7_attach_args *aa = aux;
d64 1
a64 5
	if (fdt_node_compatible("samsung,exynos4210-mct", aa->aa_node))
		return 1;
#endif

	return 0;
d68 1
a68 1
exmct_attach(struct device *parent, struct device *self, void *args)
d70 2
a71 3
	struct armv7_attach_args *aa = args;
	struct exmct_softc *sc = (struct exmct_softc *) self;
	struct armv7mem mem;
d74 4
a77 16
	sc->sc_iot = aa->aa_iot;
#if NFDT > 0
	if (aa->aa_node) {
		struct fdt_reg reg;
		if (fdt_get_reg(aa->aa_node, 0, &reg))
			panic("%s: could not extract memory data from FDT",
			    __func__);
		mem.addr = reg.addr;
		mem.size = reg.size;
	} else
#endif
	{
		mem.addr = aa->aa_dev->mem[0].addr;
		mem.size = aa->aa_dev->mem[0].size;
	}
	if (bus_space_map(sc->sc_iot, mem.addr, mem.size, 0, &sc->sc_ioh))
d84 3
d105 1
a105 1
	panic("%s: Can't enable timer!", __func__);
@


1.3
log
@New FDT-enabled busses will use a new "fdt" attribute.  Unfortunately
this attribute is currently already defined.  This define is only used
to disable the unused FDT functionality in the exynos and virtio code.
As the FDT code will be developed in a different manner than the way
those drivers are written today and the functionality has never been
enabled, simply remove the attribute and its users.

ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: exmct.c,v 1.2 2015/05/27 00:06:14 jsg Exp $ */
d89 2
a90 2
		struct fdt_memory fdtmem;
		if (fdt_get_memory_address(aa->aa_node, 0, &fdtmem))
d93 2
a94 2
		mem.addr = fdtmem.addr;
		mem.size = fdtmem.size;
@


1.2
log
@make the exynos code compile without fdt
ok bmercer@@
@
text
@d1 1
a1 1
/* $OpenBSD: exmct.c,v 1.1 2015/01/26 02:48:24 bmercer Exp $ */
a16 2

#include "fdt.h"
@


1.1
log
@Import the exynos work into tree. This is from Bitrig. Discussed with and OK jsg, also OK from krw.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d18 2
d31 1
d33 1
d70 1
d75 1
d85 1
a85 1
	struct fdt_memory mem;
d89 1
d91 2
a92 1
		if (fdt_get_memory_address(aa->aa_node, 0, &mem))
d95 5
a99 1
	} else {
@

