head	1.7;
access;
symbols
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2017.03.10.21.26.19;	author kettenis;	state Exp;
branches;
next	1.6;
commitid	ui9SENzjsBk9Dubt;

1.6
date	2017.03.09.20.13.12;	author kettenis;	state Exp;
branches;
next	1.5;
commitid	CkEwCKLYncBrvKsS;

1.5
date	2017.03.04.18.17.24;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	2mAkX7pa0O4Pk7zC;

1.4
date	2016.07.26.22.10.10;	author patrick;	state Exp;
branches;
next	1.3;
commitid	QHTy0YAECnrTlcSQ;

1.3
date	2016.04.24.00.57.23;	author patrick;	state Exp;
branches;
next	1.2;
commitid	LnsUZ9pocLJscsAz;

1.2
date	2015.05.27.00.06.14;	author jsg;	state Exp;
branches;
next	1.1;
commitid	G6QP18Ap4gF8hOTp;

1.1
date	2015.01.26.02.48.24;	author bmercer;	state Exp;
branches;
next	;
commitid	PStGWtijE9UAf7Yd;


desc
@@


1.7
log
@Use regmap interface to power up the PHY block.
@
text
@/* $OpenBSD: expower.c,v 1.6 2017/03/09 20:13:12 kettenis Exp $ */
/*
 * Copyright (c) 2012-2013 Patrick Wildt <patrick@@blueri.se>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/intr.h>
#include <machine/bus.h>
#include <machine/fdt.h>

#include <dev/ofw/openfirm.h>
#include <dev/ofw/ofw_misc.h>
#include <dev/ofw/fdt.h>

#define HREAD4(sc, reg)							\
	(bus_space_read_4((sc)->sc_iot, (sc)->sc_ioh, (reg)))
#define HWRITE4(sc, reg, val)						\
	bus_space_write_4((sc)->sc_iot, (sc)->sc_ioh, (reg), (val))
#define HSET4(sc, reg, bits)						\
	HWRITE4((sc), (reg), HREAD4((sc), (reg)) | (bits))
#define HCLR4(sc, reg, bits)						\
	HWRITE4((sc), (reg), HREAD4((sc), (reg)) & ~(bits))

struct expower_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
};

int expower_match(struct device *, void *, void *);
void expower_attach(struct device *, struct device *, void *);

struct cfattach	expower_ca = {
	sizeof (struct expower_softc), expower_match, expower_attach
};

struct cfdriver expower_cd = {
	NULL, "expower", DV_DULL
};

int
expower_match(struct device *parent, void *match, void *aux)
{
	struct fdt_attach_args *faa = aux;

	return (OF_is_compatible(faa->fa_node, "samsung,exynos5250-pmu") ||
	    OF_is_compatible(faa->fa_node, "samsung,exynos5420-pmu"));
}

void
expower_attach(struct device *parent, struct device *self, void *aux)
{
	struct expower_softc *sc = (struct expower_softc *)self;
	struct fdt_attach_args *faa = aux;

	sc->sc_iot = faa->fa_iot;

	if (bus_space_map(sc->sc_iot, faa->fa_reg[0].addr,
	    faa->fa_reg[0].size, 0, &sc->sc_ioh))
		panic("%s: bus_space_map failed!", __func__);

	printf("\n");

	regmap_register(faa->fa_node, sc->sc_iot, sc->sc_ioh,
	    faa->fa_reg[0].size);
}
@


1.6
log
@Provide access to our registers through the regmap interface.

ok patrick@@
@
text
@d1 1
a1 1
/* $OpenBSD: expower.c,v 1.5 2017/03/04 18:17:24 kettenis Exp $ */
a29 8
#include <armv7/exynos/expowervar.h>

/* registers */
#define POWER_PHY_CTRL				0x708

/* bits and bytes */
#define POWER_PHY_CTRL_USB_HOST_EN		(1 << 0)

a44 2
struct expower_softc *expower_sc;

a80 13
	expower_sc = sc;
}

void
expower_usbhost_phy_ctrl(int on)
{
	struct expower_softc *sc = expower_sc;
	KASSERT(sc);

	if (on)
		HSET4(sc, POWER_PHY_CTRL, POWER_PHY_CTRL_USB_HOST_EN);
	else
		HCLR4(sc, POWER_PHY_CTRL, POWER_PHY_CTRL_USB_HOST_EN);
@


1.5
log
@Convert a few exynos drivers to attach using the FDT.
@
text
@d1 1
a1 1
/* $OpenBSD: expower.c,v 1.4 2016/07/26 22:10:10 patrick Exp $ */
d27 1
d89 2
@


1.4
log
@Rename struct fdt_memory to fdt_reg to match the member name
used in the fdt attach args and the device tree.

ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: expower.c,v 1.3 2016/04/24 00:57:23 patrick Exp $ */
a19 3
#include <sys/queue.h>
#include <sys/malloc.h>
#include <sys/sysctl.h>
d21 1
a21 3
#include <sys/evcount.h>
#include <sys/socket.h>
#include <sys/timeout.h>
a23 1
#if NFDT > 0
d25 4
a28 2
#endif
#include <armv7/armv7/armv7var.h>
d54 2
a55 2
int expower_match(struct device *parent, void *v, void *aux);
void expower_attach(struct device *parent, struct device *self, void *args);
a57 3
	sizeof (struct expower_softc), NULL, expower_attach
};
struct cfattach	expower_fdt_ca = {
d66 1
a66 1
expower_match(struct device *parent, void *v, void *aux)
d68 1
a68 2
#if NFDT > 0
	struct armv7_attach_args *aa = aux;
d70 2
a71 5
	if (fdt_node_compatible("samsung,exynos5250-pmu", aa->aa_node))
		return 1;
#endif

	return 0;
d75 1
a75 1
expower_attach(struct device *parent, struct device *self, void *args)
d77 7
a83 20
	struct armv7_attach_args *aa = args;
	struct expower_softc *sc = (struct expower_softc *) self;
	struct armv7mem mem;

	sc->sc_iot = aa->aa_iot;
#if NFDT > 0
	if (aa->aa_node) {
		struct fdt_reg reg;
		if (fdt_get_reg(aa->aa_node, 0, &reg))
			panic("%s: could not extract memory data from FDT",
			    __func__);
		mem.addr = reg.addr;
		mem.size = reg.size;
	} else
#endif
	{
		mem.addr = aa->aa_dev->mem[0].addr;
		mem.size = aa->aa_dev->mem[0].size;
	}
	if (bus_space_map(sc->sc_iot, mem.addr, mem.size, 0, &sc->sc_ioh))
d95 1
@


1.3
log
@New FDT-enabled busses will use a new "fdt" attribute.  Unfortunately
this attribute is currently already defined.  This define is only used
to disable the unused FDT functionality in the exynos and virtio code.
As the FDT code will be developed in a different manner than the way
those drivers are written today and the functionality has never been
enabled, simply remove the attribute and its users.

ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: expower.c,v 1.2 2015/05/27 00:06:14 jsg Exp $ */
d95 2
a96 2
		struct fdt_memory fdtmem;
		if (fdt_get_memory_address(aa->aa_node, 0, &fdtmem))
d99 2
a100 2
		mem.addr = fdtmem.addr;
		mem.size = fdtmem.size;
@


1.2
log
@make the exynos code compile without fdt
ok bmercer@@
@
text
@d1 1
a1 1
/* $OpenBSD: expower.c,v 1.1 2015/01/26 02:48:24 bmercer Exp $ */
a16 2

#include "fdt.h"
@


1.1
log
@Import the exynos work into tree. This is from Bitrig. Discussed with and OK jsg, also OK from krw.
@
text
@d1 1
a1 1
/* $OpenBSD: omdog.c,v 1.5 2011/11/15 23:01:11 drahn Exp $ */
d18 2
d31 1
d33 1
d77 1
d82 1
d92 1
a92 1
	struct fdt_memory mem;
d95 1
d97 2
a98 1
		if (fdt_get_memory_address(aa->aa_node, 0, &mem))
d101 5
a105 1
	} else {
@

