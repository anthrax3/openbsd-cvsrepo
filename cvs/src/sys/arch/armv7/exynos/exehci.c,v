head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.6
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2017.03.10.21.26.19;	author kettenis;	state Exp;
branches;
next	1.6;
commitid	ui9SENzjsBk9Dubt;

1.6
date	2017.03.05.20.53.19;	author kettenis;	state Exp;
branches;
next	1.5;
commitid	NkmnZmNzQt5qa35Q;

1.5
date	2017.03.04.18.17.24;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	2mAkX7pa0O4Pk7zC;

1.4
date	2016.07.26.22.10.10;	author patrick;	state Exp;
branches;
next	1.3;
commitid	QHTy0YAECnrTlcSQ;

1.3
date	2016.04.24.00.57.23;	author patrick;	state Exp;
branches;
next	1.2;
commitid	LnsUZ9pocLJscsAz;

1.2
date	2015.05.27.00.06.14;	author jsg;	state Exp;
branches;
next	1.1;
commitid	G6QP18Ap4gF8hOTp;

1.1
date	2015.01.26.02.48.24;	author bmercer;	state Exp;
branches;
next	;
commitid	PStGWtijE9UAf7Yd;


desc
@@


1.7
log
@Use regmap interface to power up the PHY block.
@
text
@/*	$OpenBSD: exehci.c,v 1.6 2017/03/05 20:53:19 kettenis Exp $ */
/*
 * Copyright (c) 2012-2013 Patrick Wildt <patrick@@blueri.se>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/kernel.h>

#include <machine/intr.h>
#include <machine/bus.h>
#include <machine/fdt.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>
#include <dev/usb/usb_mem.h>

#include <armv7/exynos/exsysregvar.h>

#include <dev/ofw/openfirm.h>
#include <dev/ofw/ofw_clock.h>
#include <dev/ofw/ofw_gpio.h>
#include <dev/ofw/ofw_misc.h>
#include <dev/ofw/ofw_pinctrl.h>
#include <dev/ofw/ofw_regulator.h>
#include <dev/ofw/fdt.h>

#include <dev/usb/ehcireg.h>
#include <dev/usb/ehcivar.h>

/* registers */
#define USBPHY_CTRL0			0x00
#define USBPHY_TUNE0			0x04
#define HSICPHY_CTRL1			0x10
#define HSICPHY_TUNE1			0x14
#define HSICPHY_CTRL2			0x20
#define HSICPHY_TUNE2			0x24
#define EHCI_CTRL			0x30
#define OHCI_CTRL			0x34
#define USBOTG_SYS			0x38
#define USBOTG_TUNE			0x40

/* bits and bytes */
#define CLK_24MHZ			5

#define HOST_CTRL0_PHYSWRSTALL		(1U << 31)
#define HOST_CTRL0_COMMONON_N		(1 << 9)
#define HOST_CTRL0_SIDDQ		(1 << 6)
#define HOST_CTRL0_FORCESLEEP		(1 << 5)
#define HOST_CTRL0_FORCESUSPEND		(1 << 4)
#define HOST_CTRL0_WORDINTERFACE	(1 << 3)
#define HOST_CTRL0_UTMISWRST		(1 << 2)
#define HOST_CTRL0_LINKSWRST		(1 << 1)
#define HOST_CTRL0_PHYSWRST		(1 << 0)

#define HOST_CTRL0_FSEL_MASK		(7 << 16)

#define EHCI_CTRL_ENAINCRXALIGN		(1 << 29)
#define EHCI_CTRL_ENAINCR4		(1 << 28)
#define EHCI_CTRL_ENAINCR8		(1 << 27)
#define EHCI_CTRL_ENAINCR16		(1 << 26)

/* PMU registers */
#define USB_HOST_POWER_5250	0x708
#define USB_HOST_POWER_54XX	0x70c
#define USB_HOST_POWER_EN	(1 << 0)

int	exehci_match(struct device *, void *, void *);
void	exehci_attach(struct device *, struct device *, void *);
int	exehci_detach(struct device *, int);

struct exehci_softc {
	struct ehci_softc	sc;
	void			*sc_ih;
	int			sc_phy;
	bus_space_handle_t	ph_ioh;
};

struct cfattach exehci_ca = {
	sizeof (struct exehci_softc), exehci_match, exehci_attach,
	exehci_detach
};

struct cfdriver exehci_cd = {
	NULL, "exehci", DV_DULL
};

void	exehci_setup(struct exehci_softc *);

int
exehci_match(struct device *parent, void *match, void *aux)
{
	struct fdt_attach_args *faa = aux;

	return OF_is_compatible(faa->fa_node, "samsung,exynos4210-ehci");
}

void
exehci_attach(struct device *parent, struct device *self, void *aux)
{
	struct exehci_softc *sc = (struct exehci_softc *)self;
	struct fdt_attach_args *faa = aux;
	usbd_status r;
	char *devname = sc->sc.sc_bus.bdev.dv_xname;
	uint32_t phys[2];
	uint32_t phy_reg[2];
	int node;

	if (faa->fa_nreg < 1)
		return;

	node = OF_child(faa->fa_node);
	if (node == 0)
		return;

	if (OF_getpropintarray(node, "phys", phys,
	    sizeof(phys)) != sizeof(phys))
		return;

	sc->sc_phy = OF_getnodebyphandle(phys[0]);
	if (sc->sc_phy == 0)
		return;

	if (OF_getpropintarray(sc->sc_phy, "reg", phy_reg,
	    sizeof(phy_reg)) != sizeof(phy_reg))
		return;

	sc->sc.iot = faa->fa_iot;
	sc->sc.sc_bus.dmatag = faa->fa_dmat;
	sc->sc.sc_size = faa->fa_reg[0].size;

	/* Map I/O space */
	if (bus_space_map(sc->sc.iot, faa->fa_reg[0].addr,
	    faa->fa_reg[0].size, 0, &sc->sc.ioh)) {
		printf(": cannot map mem space\n");
		goto out;
	}

	if (bus_space_map(sc->sc.iot, phy_reg[0],
	    phy_reg[1], 0, &sc->ph_ioh)) {
		printf(": cannot map mem space\n");
		goto mem0;
	}

	printf("\n");

	exehci_setup(sc);

	sc->sc_ih = arm_intr_establish_fdt(faa->fa_node, IPL_USB,
	    ehci_intr, &sc->sc, devname);
	if (sc->sc_ih == NULL) {
		printf(": unable to establish interrupt\n");
		goto mem1;
	}

	strlcpy(sc->sc.sc_vendor, "Exynos 5", sizeof(sc->sc.sc_vendor));
	r = ehci_init(&sc->sc);
	if (r != USBD_NORMAL_COMPLETION) {
		printf("%s: init failed, error=%d\n", devname, r);
		goto intr;
	}

	config_found(self, &sc->sc.sc_bus, usbctlprint);

	goto out;

intr:
	arm_intr_disestablish(sc->sc_ih);
	sc->sc_ih = NULL;
mem1:
	bus_space_unmap(sc->sc.iot, sc->ph_ioh, phy_reg[1]);
mem0:
	bus_space_unmap(sc->sc.iot, sc->sc.ioh, sc->sc.sc_size);
	sc->sc.sc_size = 0;
out:
	return;
}

int
exehci_detach(struct device *self, int flags)
{
	struct exehci_softc *sc = (struct exehci_softc *)self;
	int rv;

	rv = ehci_detach(self, flags);
	if (rv)
		return rv;

	if (sc->sc_ih != NULL) {
		arm_intr_disestablish(sc->sc_ih);
		sc->sc_ih = NULL;
	}

	if (sc->sc.sc_size) {
		bus_space_unmap(sc->sc.iot, sc->sc.ioh, sc->sc.sc_size);
		sc->sc.sc_size = 0;
	}

	return 0;
}

void
exehci_setup(struct exehci_softc *sc)
{
	struct regmap *pmurm;
	uint32_t pmureg;
	bus_size_t offset;
	uint32_t val;
	int node;

#if 0
	/* VBUS, GPIO_X11, only on SMDK5250 and Chromebooks */
	exgpio_set_dir(0xa9, EXGPIO_DIR_OUT);
	exgpio_set_bit(0xa9);
	delay(3000);
#endif

	exsysreg_usbhost_mode(1);

	/* Power up the PHY block. */
	pmureg = OF_getpropint(sc->sc_phy, "samsung,pmureg-phandle", 0);
	pmurm = regmap_byphandle(pmureg);
	if (pmurm) {
		node = OF_getnodebyphandle(pmureg);
		if (OF_is_compatible(node, "samsung,exynos5250-pmu"))
			offset = USB_HOST_POWER_5250;
		else
			offset = USB_HOST_POWER_54XX;
		
		val = regmap_read_4(pmurm, offset);
		val |= USB_HOST_POWER_EN;
		regmap_write_4(pmurm, offset, val);
	}

	delay(10000);

	/* Setting up host and device simultaneously */
	val = bus_space_read_4(sc->sc.iot, sc->ph_ioh, USBPHY_CTRL0);
	val &= ~(HOST_CTRL0_FSEL_MASK |
		 /* HOST Phy setting */
		 HOST_CTRL0_PHYSWRST |
		 HOST_CTRL0_PHYSWRSTALL |
		 HOST_CTRL0_SIDDQ |
		 HOST_CTRL0_FORCESUSPEND |
		 HOST_CTRL0_FORCESLEEP);
	val |= (/* Setting up the ref freq */
		 CLK_24MHZ << 16 |
		 HOST_CTRL0_COMMONON_N |
		 /* HOST Phy setting */
		 HOST_CTRL0_LINKSWRST |
		 HOST_CTRL0_UTMISWRST);
	bus_space_write_4(sc->sc.iot, sc->ph_ioh, USBPHY_CTRL0, val);
	delay(10000);
	bus_space_write_4(sc->sc.iot, sc->ph_ioh, USBPHY_CTRL0,
	    bus_space_read_4(sc->sc.iot, sc->ph_ioh, USBPHY_CTRL0) &
		~(HOST_CTRL0_LINKSWRST | HOST_CTRL0_UTMISWRST));
	delay(20000);

	/* EHCI Ctrl setting */
	bus_space_write_4(sc->sc.iot, sc->ph_ioh, EHCI_CTRL,
	    bus_space_read_4(sc->sc.iot, sc->ph_ioh, EHCI_CTRL) |
		EHCI_CTRL_ENAINCRXALIGN |
		EHCI_CTRL_ENAINCR4 |
		EHCI_CTRL_ENAINCR8 |
		EHCI_CTRL_ENAINCR16);

#if 0
	/* HSIC USB Hub initialization. */
	if (1) {
		exgpio_set_dir(0xc8, EXGPIO_DIR_OUT);
		exgpio_clear_bit(0xc8);
		delay(1000);
		exgpio_set_bit(0xc8);
		delay(5000);

		val = bus_space_read_4(sc->sc.iot, sc->ph_ioh, HSICPHY_CTRL1);
		val &= ~(HOST_CTRL0_SIDDQ |
			 HOST_CTRL0_FORCESLEEP |
			 HOST_CTRL0_FORCESUSPEND);
		bus_space_write_4(sc->sc.iot, sc->ph_ioh, HSICPHY_CTRL1, val);
		val |= HOST_CTRL0_PHYSWRST;
		bus_space_write_4(sc->sc.iot, sc->ph_ioh, HSICPHY_CTRL1, val);
		delay(1000);
		val &= ~HOST_CTRL0_PHYSWRST;
		bus_space_write_4(sc->sc.iot, sc->ph_ioh, HSICPHY_CTRL1, val);
	}
#endif

	/* PHY clock and power setup time */
	delay(50000);
}
@


1.6
log
@Turn exgpio(4) into a pinctrl driver.
@
text
@d1 1
a1 1
/*	$OpenBSD: exehci.c,v 1.5 2017/03/04 18:17:24 kettenis Exp $ */
a31 1
#include <armv7/armv7/armv7var.h>
a32 1
#include <armv7/exynos/expowervar.h>
d37 1
d77 5
d89 1
d134 2
a135 2
	node = OF_getnodebyphandle(phys[0]);
	if (node == 0)
d138 1
a138 1
	if (OF_getpropintarray(node, "reg", phy_reg,
d219 3
d223 1
d233 15
a247 1
	expower_usbhost_phy_ctrl(1);
@


1.5
log
@Convert a few exynos drivers to attach using the FDT.
@
text
@d1 1
a1 1
/*	$OpenBSD: exehci.c,v 1.4 2016/07/26 22:10:10 patrick Exp $ */
a34 1
#include <armv7/exynos/exgpiovar.h>
@


1.4
log
@Rename struct fdt_memory to fdt_reg to match the member name
used in the fdt attach args and the device tree.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exehci.c,v 1.3 2016/04/24 00:57:23 patrick Exp $ */
a21 2
#include <sys/rwlock.h>
#include <sys/timeout.h>
a24 1
#if NFDT > 0
a25 1
#endif
d37 7
d84 1
a84 2
	struct device		sc_dev;
	struct ehci_softc	*sc_ehci;
a85 4
	bus_dma_tag_t		sc_dmat;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
	bus_size_t		sc_size;
d89 5
a97 9
struct cfattach exehci_ca = {
	sizeof (struct exehci_softc), NULL, exehci_attach,
	exehci_detach, NULL
};
struct cfattach exehci_fdt_ca = {
	sizeof (struct exehci_softc), exehci_match, exehci_attach,
	exehci_detach, NULL
};

d101 1
a101 1
exehci_match(struct device *parent, void *v, void *aux)
d103 1
a103 2
#if NFDT > 0
	struct armv7_attach_args *aa = aux;
d105 1
a105 5
	if (fdt_node_compatible("samsung,exynos4210-ehci", aa->aa_node))
		return 1;
#endif

	return 0;
d111 30
a140 46
	struct exehci_softc		*sc = (struct exehci_softc *)self;
	struct ehci_softc		*esc;
	struct armv7_attach_args	*aa = aux;
	struct armv7mem			 hmem, pmem;
	int				 irq;
	usbd_status			 r;

	sc->sc_iot = aa->aa_iot;
	sc->sc_dmat = aa->aa_dmat;

#if NFDT > 0
	if (aa->aa_node) {
		struct fdt_reg hreg, preg;
		uint32_t ints[3];

		if (fdt_get_reg(aa->aa_node, 0, &hreg))
			panic("%s: could not extract memory data from FDT",
			    __func__);

		/* XXX: In a different way, please. */
		void *node = fdt_find_compatible("samsung,exynos5250-usb2-phy");
		if (node == NULL || fdt_get_reg(node, 0, &preg))
			panic("%s: could not extract phy data from FDT",
			    __func__);

		/* TODO: Add interrupt FDT API. */
		if (fdt_node_property_ints(aa->aa_node, "interrupts",
		    ints, 3) != 3)
			panic("%s: could not extract interrupt data from FDT",
			    __func__);

		hmem.addr = hreg.addr;
		hmem.size = hreg.size;
		pmem.addr = preg.addr;
		pmem.size = preg.size;

		irq = ints[1];
	} else
#endif
	{
		hmem.addr = aa->aa_dev->mem[0].addr;
		hmem.size = aa->aa_dev->mem[0].size;
		pmem.addr = aa->aa_dev->mem[1].addr;
		pmem.size = aa->aa_dev->mem[1].size;
		irq = aa->aa_dev->irq[0];
	}
d143 2
a144 2
	sc->sc_size = hmem.size;
	if (bus_space_map(sc->sc_iot, hmem.addr, hmem.size, 0, &sc->sc_ioh)) {
d149 2
a150 1
	if (bus_space_map(sc->sc_iot, pmem.addr, pmem.size, 0, &sc->ph_ioh)) {
d152 1
a152 1
		goto pmem;
d159 2
a160 10
	if ((esc = (struct ehci_softc *)config_found(self, NULL, NULL)) == NULL)
		goto hmem;

	sc->sc_ehci = esc;
	esc->iot = sc->sc_iot;
	esc->ioh = sc->sc_ioh;
	esc->sc_bus.dmatag = aa->aa_dmat;

	sc->sc_ih = arm_intr_establish(irq, IPL_USB,
	    ehci_intr, esc, esc->sc_bus.bdev.dv_xname);
d163 1
a163 1
		goto hmem;
d166 2
a167 2
	strlcpy(esc->sc_vendor, "Exynos 5", sizeof(esc->sc_vendor));
	r = ehci_init(esc);
d169 1
a169 2
		printf("%s: init failed, error=%d\n",
		    esc->sc_bus.bdev.dv_xname, r);
d173 1
a173 3
	printf("\n");

	config_found((struct device *)esc, &esc->sc_bus, usbctlprint);
d180 5
a184 5
hmem:
	bus_space_unmap(sc->sc_iot, sc->ph_ioh, hmem.size);
pmem:
	bus_space_unmap(sc->sc_iot, sc->sc_ioh, sc->sc_size);
	sc->sc_size = 0;
d192 2
a193 2
	struct exehci_softc		*sc = (struct exehci_softc *)self;
	int				 rv = 0;
d197 1
a197 1
		return (rv);
d204 3
a206 3
	if (sc->sc_size) {
		bus_space_unmap(sc->sc_iot, sc->sc_ioh, sc->sc_size);
		sc->sc_size = 0;
d217 1
d222 1
d230 1
a230 1
	val = bus_space_read_4(sc->sc_iot, sc->ph_ioh, USBPHY_CTRL0);
a231 1
		 HOST_CTRL0_COMMONON_N |
d240 1
d244 1
a244 1
	bus_space_write_4(sc->sc_iot, sc->ph_ioh, USBPHY_CTRL0, val);
d246 2
a247 2
	bus_space_write_4(sc->sc_iot, sc->ph_ioh, USBPHY_CTRL0,
	    bus_space_read_4(sc->sc_iot, sc->ph_ioh, USBPHY_CTRL0) &
d252 2
a253 2
	bus_space_write_4(sc->sc_iot, sc->ph_ioh, EHCI_CTRL,
	    bus_space_read_4(sc->sc_iot, sc->ph_ioh, EHCI_CTRL) |
d259 1
d268 1
a268 1
		val = bus_space_read_4(sc->sc_iot, sc->ph_ioh, HSICPHY_CTRL1);
d272 1
a272 1
		bus_space_write_4(sc->sc_iot, sc->ph_ioh, HSICPHY_CTRL1, val);
d274 1
a274 1
		bus_space_write_4(sc->sc_iot, sc->ph_ioh, HSICPHY_CTRL1, val);
d277 1
a277 1
		bus_space_write_4(sc->sc_iot, sc->ph_ioh, HSICPHY_CTRL1, val);
d279 1
a282 18
}

int	ehci_ex_match(struct device *, void *, void *);
void	ehci_ex_attach(struct device *, struct device *, void *);

struct cfattach ehci_ex_ca = {
	sizeof (struct ehci_softc), ehci_ex_match, ehci_ex_attach
};

int
ehci_ex_match(struct device *parent, void *v, void *aux)
{
	return 1;
}

void
ehci_ex_attach(struct device *parent, struct device *self, void *aux)
{
@


1.3
log
@New FDT-enabled busses will use a new "fdt" attribute.  Unfortunately
this attribute is currently already defined.  This define is only used
to disable the unused FDT functionality in the exynos and virtio code.
As the FDT code will be developed in a different manner than the way
those drivers are written today and the functionality has never been
enabled, simply remove the attribute and its users.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exehci.c,v 1.2 2015/05/27 00:06:14 jsg Exp $ */
d134 1
a134 1
		struct fdt_memory fhmem, fpmem;
d137 1
a137 1
		if (fdt_get_memory_address(aa->aa_node, 0, &fhmem))
d143 1
a143 1
		if (node == NULL || fdt_get_memory_address(node, 0, &fpmem))
d153 4
a156 4
		hmem.addr = fhmem.addr;
		hmem.size = fhmem.size;
		pmem.addr = fpmem.addr;
		pmem.size = fpmem.size;
@


1.2
log
@make the exynos code compile without fdt
ok bmercer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exehci.c,v 1.1 2015/01/26 02:48:24 bmercer Exp $ */
a16 2

#include "fdt.h"
@


1.1
log
@Import the exynos work into tree. This is from Bitrig. Discussed with and OK jsg, also OK from krw.
@
text
@d1 1
a1 1
/*	$OpenBSD: exehci.c,v 1.10 2011/11/10 19:37:01 uwe Exp $ */
d18 2
d29 1
d31 1
d111 1
d116 1
d127 1
a127 1
	struct fdt_memory		 hmem, pmem;
d134 1
d136 1
d139 1
a139 1
		if (fdt_get_memory_address(aa->aa_node, 0, &hmem))
d145 1
a145 1
		if (node == NULL || fdt_get_memory_address(node, 0, &pmem))
d155 5
d161 3
a163 1
	} else {
@

