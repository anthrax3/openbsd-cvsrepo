head	1.6;
access;
symbols
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2017.03.09.20.07.35;	author kettenis;	state Exp;
branches;
next	1.5;
commitid	LUibwjBzguuK11FA;

1.5
date	2017.03.04.18.17.24;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	2mAkX7pa0O4Pk7zC;

1.4
date	2016.07.26.22.10.10;	author patrick;	state Exp;
branches;
next	1.3;
commitid	QHTy0YAECnrTlcSQ;

1.3
date	2016.04.24.00.57.23;	author patrick;	state Exp;
branches;
next	1.2;
commitid	LnsUZ9pocLJscsAz;

1.2
date	2015.05.27.00.06.14;	author jsg;	state Exp;
branches;
next	1.1;
commitid	G6QP18Ap4gF8hOTp;

1.1
date	2015.01.26.02.48.24;	author bmercer;	state Exp;
branches;
next	;
commitid	PStGWtijE9UAf7Yd;


desc
@@


1.6
log
@Only set cpuresetfn if it isn't set already such that other reboot mechanisms
(like psci or syscon) are preferred over letting the watchdog fire.

ok patrick@@
@
text
@/* $OpenBSD: exdog.c,v 1.5 2017/03/04 18:17:24 kettenis Exp $ */
/*
 * Copyright (c) 2012-2013 Patrick Wildt <patrick@@blueri.se>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/queue.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/evcount.h>
#include <sys/socket.h>
#include <sys/timeout.h>

#include <machine/intr.h>
#include <machine/bus.h>
#include <machine/fdt.h>

#include <armv7/armv7/armv7_machdep.h>

#include <dev/ofw/openfirm.h>
#include <dev/ofw/fdt.h>

/* registers */
#define WTCON		0x00
#define WTDAT		0x04
#define WTCNT		0x08
#define WTCLRINT	0x0C

/* bits and bytes */
#define WTCON_RESET		(1 << 0)
#define WTCON_INT		(1 << 2)
#define WTCON_CLKSEL_16		(0x0 << 3)
#define WTCON_CLKSEL_32		(0x1 << 3)
#define WTCON_CLKSEL_64		(0x2 << 3)
#define WTCON_CLKSEL_128	(0x3 << 3)
#define WTCON_EN		(1 << 5)
#define WTCON_PRESCALER(x)	(((x) & 0xff) << 8)

struct exdog_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
};

struct exdog_softc *exdog_sc;

int exdog_match(struct device *parent, void *v, void *aux);
void exdog_attach(struct device *parent, struct device *self, void *args);
void exdog_stop(void);
void exdog_reset(void);

struct cfattach	exdog_ca = {
	sizeof (struct exdog_softc), exdog_match, exdog_attach
};

struct cfdriver exdog_cd = {
	NULL, "exdog", DV_DULL
};

int
exdog_match(struct device *parent, void *cfdata, void *aux)
{
	struct fdt_attach_args *fa = aux;

	return (OF_is_compatible(fa->fa_node, "samsung,exynos5250-wdt") ||
	    OF_is_compatible(fa->fa_node, "samsung,exynos5420-wdt"));
}

void
exdog_attach(struct device *parent, struct device *self, void *aux)
{
	struct exdog_softc *sc = (struct exdog_softc *)self;
	struct fdt_attach_args *fa = aux;

	sc->sc_iot = fa->fa_iot;

	if (bus_space_map(sc->sc_iot, fa->fa_reg[0].addr,
	    fa->fa_reg[0].size, 0, &sc->sc_ioh))
		panic("%s: bus_space_map failed!", __func__);

	printf("\n");

	exdog_sc = sc;
	if (cpuresetfn == NULL)
		cpuresetfn = exdog_reset;
}

void
exdog_stop(void)
{
	uint32_t wtcon;

	if (exdog_sc == NULL)
		return;

	wtcon = bus_space_read_4(exdog_sc->sc_iot, exdog_sc->sc_ioh, WTCON);

	wtcon &= ~(WTCON_EN | WTCON_INT | WTCON_RESET);

	bus_space_write_4(exdog_sc->sc_iot, exdog_sc->sc_ioh, WTCON, wtcon);
}

void
exdog_reset(void)
{
	uint32_t wtcon;

	if (exdog_sc == NULL)
		return;

	/* disable watchdog */
	exdog_stop();

	wtcon = bus_space_read_4(exdog_sc->sc_iot, exdog_sc->sc_ioh, WTCON);

	wtcon |= WTCON_EN | WTCON_CLKSEL_128;
	wtcon &= ~WTCON_INT;
	wtcon |= WTCON_RESET;
	wtcon |= WTCON_PRESCALER(0xff);

	/* set timeout to 1 */
	bus_space_write_4(exdog_sc->sc_iot, exdog_sc->sc_ioh, WTDAT, 1);
	bus_space_write_4(exdog_sc->sc_iot, exdog_sc->sc_ioh, WTCNT, 1);

	/* kick off the watchdog */
	bus_space_write_4(exdog_sc->sc_iot, exdog_sc->sc_ioh, WTCON, wtcon);

	delay(100000);
}
@


1.5
log
@Convert a few exynos drivers to attach using the FDT.
@
text
@d1 1
a1 1
/* $OpenBSD: exdog.c,v 1.4 2016/07/26 22:10:10 patrick Exp $ */
d97 2
a98 1
	cpuresetfn = exdog_reset;
@


1.4
log
@Rename struct fdt_memory to fdt_reg to match the member name
used in the fdt attach args and the device tree.

ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: exdog.c,v 1.3 2016/04/24 00:57:23 patrick Exp $ */
d26 2
a28 1
#if NFDT > 0
d30 5
a34 3
#endif
#include <machine/intr.h>
#include <armv7/armv7/armv7var.h>
a65 3
	sizeof (struct exdog_softc), NULL, exdog_attach
};
struct cfattach	exdog_fdt_ca = {
d74 1
a74 1
exdog_match(struct device *parent, void *v, void *aux)
d76 1
a76 6
#if NFDT > 0
	struct armv7_attach_args *aa = aux;

	if (fdt_node_compatible("samsung,exynos5250-wdt", aa->aa_node))
		return 1;
#endif
d78 2
a79 1
	return 0;
d83 1
a83 1
exdog_attach(struct device *parent, struct device *self, void *args)
d85 7
a91 20
	struct armv7_attach_args *aa = args;
	struct exdog_softc *sc = (struct exdog_softc *) self;
	struct armv7mem mem;

	sc->sc_iot = aa->aa_iot;
#if NFDT > 0
	if (aa->aa_node) {
		struct fdt_reg reg;
		if (fdt_get_reg(aa->aa_node, 0, &reg))
			panic("%s: could not extract memory data from FDT",
			    __func__);
		mem.addr = reg.addr;
		mem.size = reg.size;
	} else
#endif
	{
		mem.addr = aa->aa_dev->mem[0].addr;
		mem.size = aa->aa_dev->mem[0].size;
	}
	if (bus_space_map(sc->sc_iot, mem.addr, mem.size, 0, &sc->sc_ioh))
d95 1
d97 1
d101 1
a101 1
exdog_stop()
d116 1
a116 1
exdog_reset()
@


1.3
log
@New FDT-enabled busses will use a new "fdt" attribute.  Unfortunately
this attribute is currently already defined.  This define is only used
to disable the unused FDT functionality in the exynos and virtio code.
As the FDT code will be developed in a different manner than the way
those drivers are written today and the functionality has never been
enabled, simply remove the attribute and its users.

ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: exdog.c,v 1.2 2015/05/27 00:06:14 jsg Exp $ */
d96 2
a97 2
		struct fdt_memory fdtmem;
		if (fdt_get_memory_address(aa->aa_node, 0, &fdtmem))
d100 2
a101 2
		mem.addr = fdtmem.addr;
		mem.size = fdtmem.size;
@


1.2
log
@make the exynos code compile without fdt
ok bmercer@@
@
text
@d1 1
a1 1
/* $OpenBSD: exdog.c,v 1.1 2015/01/26 02:48:24 bmercer Exp $ */
a16 2

#include "fdt.h"
@


1.1
log
@Import the exynos work into tree. This is from Bitrig. Discussed with and OK jsg, also OK from krw.
@
text
@d1 1
a1 1
/* $OpenBSD: omdog.c,v 1.5 2011/11/15 23:01:11 drahn Exp $ */
d18 2
d29 1
d31 1
d78 1
d83 1
d93 1
a93 1
	struct fdt_memory mem;
d96 1
d98 2
a99 1
		if (fdt_get_memory_address(aa->aa_node, 0, &mem))
d102 5
a106 1
	} else {
@

