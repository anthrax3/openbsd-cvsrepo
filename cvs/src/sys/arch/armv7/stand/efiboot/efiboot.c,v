head	1.19;
access;
symbols
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11;
locks; strict;
comment	@ * @;


1.19
date	2017.08.21.20.05.32;	author kettenis;	state Exp;
branches;
next	1.18;
commitid	ZtRULBVnq9vYcbgE;

1.18
date	2017.08.07.19.34.53;	author kettenis;	state Exp;
branches;
next	1.17;
commitid	9gJdvyH7ZN4Nyv48;

1.17
date	2017.07.31.14.05.57;	author kettenis;	state Exp;
branches;
next	1.16;
commitid	p3t5q42UUWAtrX6X;

1.16
date	2017.07.29.19.38.01;	author kettenis;	state Exp;
branches;
next	1.15;
commitid	i1w0ErqWv21Br1mf;

1.15
date	2017.07.24.11.15.34;	author patrick;	state Exp;
branches;
next	1.14;
commitid	xjraNNAQseTa1JtE;

1.14
date	2017.03.11.09.09.14;	author jsg;	state Exp;
branches;
next	1.13;
commitid	LVN2NjaWttDAvafA;

1.13
date	2016.10.23.19.06.08;	author kettenis;	state Exp;
branches;
next	1.12;
commitid	Jm2RcEnymdSNb8Fg;

1.12
date	2016.10.06.18.15.44;	author kettenis;	state Exp;
branches;
next	1.11;
commitid	BQmlDk49Vlbp1uQn;

1.11
date	2016.07.01.09.34.39;	author patrick;	state Exp;
branches;
next	1.10;
commitid	WEWQU1uOWuiy34Ca;

1.10
date	2016.05.20.23.25.09;	author jsg;	state Exp;
branches;
next	1.9;
commitid	i3vM7YHlpslNx18t;

1.9
date	2016.05.20.19.09.24;	author kettenis;	state Exp;
branches;
next	1.8;
commitid	RXn98eBqOnj6tDCp;

1.8
date	2016.05.20.11.53.19;	author kettenis;	state Exp;
branches;
next	1.7;
commitid	8rRZNx9TkAuhmzMz;

1.7
date	2016.05.19.09.39.06;	author jsg;	state Exp;
branches;
next	1.6;
commitid	IUM6V1V3H5bNDis9;

1.6
date	2016.05.17.22.41.20;	author kettenis;	state Exp;
branches;
next	1.5;
commitid	NNtn5vXpUWa3YUEk;

1.5
date	2016.05.17.21.26.32;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	3n9DvpmBesrJfZVA;

1.4
date	2016.05.14.21.22.56;	author kettenis;	state Exp;
branches;
next	1.3;
commitid	Oen2JBO8jzcomo5a;

1.3
date	2016.05.14.20.00.24;	author kettenis;	state Exp;
branches;
next	1.2;
commitid	tHmXcV1FdW3Zog5T;

1.2
date	2016.05.14.19.45.37;	author kettenis;	state Exp;
branches;
next	1.1;
commitid	RQpRS1WVIfmudf5L;

1.1
date	2016.05.14.17.55.15;	author kettenis;	state Exp;
branches;
next	;
commitid	IdQZw2Pw0GuFYXCI;


desc
@@


1.19
log
@Pass the address of the EFI system table and the EFI memory map through
properties in the /chosen node of the FDT.  The properties match the ones
used by Linux (see Documentation/arm/uefi.txt in the Linux kernel source
tree) but with the "linux," prefix replaced by "openbsd,".

While there, reduce the diffs to the arm64 efiboot.

ok tom@@, jsg@@
@
text
@/*	$OpenBSD: efiboot.c,v 1.18 2017/08/07 19:34:53 kettenis Exp $	*/

/*
 * Copyright (c) 2015 YASUOKA Masahiko <yasuoka@@yasuoka.net>
 * Copyright (c) 2016 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/queue.h>
#include <dev/cons.h>
#include <sys/disklabel.h>

#include <efi.h>
#include <efiapi.h>
#include <efiprot.h>
#include <eficonsctl.h>

#include <lib/libkern/libkern.h>
#include <stand/boot/cmd.h>

#include "disk.h"
#include "eficall.h"
#include "fdt.h"
#include "libsa.h"

EFI_SYSTEM_TABLE	*ST;
EFI_BOOT_SERVICES	*BS;
EFI_RUNTIME_SERVICES	*RS;
EFI_HANDLE		 IH, efi_bootdp;

EFI_PHYSICAL_ADDRESS	 heap;
UINTN			 heapsiz = 1 * 1024 * 1024;
EFI_MEMORY_DESCRIPTOR	*mmap;
UINTN			 mmap_key;
UINTN			 mmap_ndesc;
UINTN			 mmap_descsiz;
UINT32			 mmap_version;

static EFI_GUID		 imgp_guid = LOADED_IMAGE_PROTOCOL;
static EFI_GUID		 blkio_guid = BLOCK_IO_PROTOCOL;
static EFI_GUID		 devp_guid = DEVICE_PATH_PROTOCOL;

static int efi_device_path_depth(EFI_DEVICE_PATH *dp, int);
static int efi_device_path_ncmp(EFI_DEVICE_PATH *, EFI_DEVICE_PATH *, int);
static void efi_heap_init(void);
static void efi_memprobe_internal(void);
static void efi_timer_init(void);
static void efi_timer_cleanup(void);

EFI_STATUS
efi_main(EFI_HANDLE image, EFI_SYSTEM_TABLE *systab)
{
	extern char		*progname;
	EFI_LOADED_IMAGE	*imgp;
	EFI_DEVICE_PATH		*dp = NULL;
	EFI_STATUS		 status;

	ST = systab;
	BS = ST->BootServices;
	IH = image;

	status = EFI_CALL(BS->HandleProtocol, image, &imgp_guid,
	    (void **)&imgp);
	if (status == EFI_SUCCESS)
		status = EFI_CALL(BS->HandleProtocol, imgp->DeviceHandle,
		    &devp_guid, (void **)&dp);
	if (status == EFI_SUCCESS)
		efi_bootdp = dp;

	progname = "BOOTARM";

	boot(0);

	return (EFI_SUCCESS);
}

static SIMPLE_TEXT_OUTPUT_INTERFACE *conout;
static SIMPLE_INPUT_INTERFACE *conin;

void
efi_cons_probe(struct consdev *cn)
{
	cn->cn_pri = CN_MIDPRI;
	cn->cn_dev = makedev(12, 0);
}

void
efi_cons_init(struct consdev *cp)
{
	conin = ST->ConIn;
	conout = ST->ConOut;
}

int
efi_cons_getc(dev_t dev)
{
	EFI_INPUT_KEY	 key;
	EFI_STATUS	 status;
#if 0
	UINTN		 dummy;
#endif
	static int	 lastchar = 0;

	if (lastchar) {
		int r = lastchar;
		if ((dev & 0x80) == 0)
			lastchar = 0;
		return (r);
	}

	status = conin->ReadKeyStroke(conin, &key);
	while (status == EFI_NOT_READY) {
		if (dev & 0x80)
			return (0);
		/*
		 * XXX The implementation of WaitForEvent() in U-boot
		 * is broken and neverreturns.
		 */
#if 0
		BS->WaitForEvent(1, &conin->WaitForKey, &dummy);
#endif
		status = conin->ReadKeyStroke(conin, &key);
	}

	if (dev & 0x80)
		lastchar = key.UnicodeChar;

	return (key.UnicodeChar);
}

void
efi_cons_putc(dev_t dev, int c)
{
	CHAR16	buf[2];

	if (c == '\n')
		efi_cons_putc(dev, '\r');

	buf[0] = c;
	buf[1] = 0;

	conout->OutputString(conout, buf);
}

static void
efi_heap_init(void)
{
	EFI_STATUS	 status;

	status = EFI_CALL(BS->AllocatePages, AllocateAnyPages, EfiLoaderData,
	    EFI_SIZE_TO_PAGES(heapsiz), &heap);
	if (status != EFI_SUCCESS)
		panic("BS->AllocatePages()");
}

EFI_BLOCK_IO	*disk;

void
efi_diskprobe(void)
{
	int			 i, depth = -1;
	UINTN			 sz;
	EFI_STATUS		 status;
	EFI_HANDLE		*handles = NULL;
	EFI_BLOCK_IO		*blkio;
	EFI_BLOCK_IO_MEDIA	*media;
	EFI_DEVICE_PATH		*dp;

	sz = 0;
	status = EFI_CALL(BS->LocateHandle, ByProtocol, &blkio_guid, 0, &sz, 0);
	if (status == EFI_BUFFER_TOO_SMALL) {
		handles = alloc(sz);
		status = EFI_CALL(BS->LocateHandle, ByProtocol, &blkio_guid,
		    0, &sz, handles);
	}
	if (handles == NULL || EFI_ERROR(status))
		panic("BS->LocateHandle() returns %d", status);

	if (efi_bootdp != NULL)
		depth = efi_device_path_depth(efi_bootdp, MEDIA_DEVICE_PATH);

	/*
	 * U-Boot incorrectly represents devices with a single
	 * MEDIA_DEVICE_PATH component.  In that case include that
	 * component into the matching, otherwise we'll blindly select
	 * the first device.
	 */
	if (depth == 0)
		depth = 1;

	for (i = 0; i < sz / sizeof(EFI_HANDLE); i++) {
		status = EFI_CALL(BS->HandleProtocol, handles[i], &blkio_guid,
		    (void **)&blkio);
		if (EFI_ERROR(status))
			panic("BS->HandleProtocol() returns %d", status);

		media = blkio->Media;
		if (media->LogicalPartition || !media->MediaPresent)
			continue;

		if (efi_bootdp == NULL || depth == -1)
			continue;
		status = EFI_CALL(BS->HandleProtocol, handles[i], &devp_guid,
		    (void **)&dp);
		if (EFI_ERROR(status))
			continue;
		if (efi_device_path_ncmp(efi_bootdp, dp, depth) == 0) {
			disk = blkio;
			break;
		}
	}

	free(handles, sz);
}

/*
 * Determine the number of nodes up to, but not including, the first
 * node of the specified type.
 */
static int
efi_device_path_depth(EFI_DEVICE_PATH *dp, int dptype)
{
	int	i;

	for (i = 0; !IsDevicePathEnd(dp); dp = NextDevicePathNode(dp), i++) {
		if (DevicePathType(dp) == dptype)
			return (i);
	}

	return (-1);
}

static int
efi_device_path_ncmp(EFI_DEVICE_PATH *dpa, EFI_DEVICE_PATH *dpb, int deptn)
{
	int	 i, cmp;

	for (i = 0; i < deptn; i++) {
		if (IsDevicePathEnd(dpa) || IsDevicePathEnd(dpb))
			return ((IsDevicePathEnd(dpa) && IsDevicePathEnd(dpb))
			    ? 0 : (IsDevicePathEnd(dpa))? -1 : 1);
		cmp = DevicePathNodeLength(dpa) - DevicePathNodeLength(dpb);
		if (cmp)
			return (cmp);
		cmp = memcmp(dpa, dpb, DevicePathNodeLength(dpa));
		if (cmp)
			return (cmp);
		dpa = NextDevicePathNode(dpa);
		dpb = NextDevicePathNode(dpb);
	}

	return (0);
}

struct board_id {
	const char *name;
	uint32_t board_id;
};

struct board_id board_id_table[] = {
	{ "arm,vexpress",			2272 },
	{ "google,snow",			3774 },
	{ "google,spring",			3774 },
	{ "samsung,universal_c210",		2838 },
	{ "ti,am335x-bone",			3589 },
	{ "ti,omap3-beagle",			1546 },
	{ "ti,omap3-beagle-xm",			1546 },
	{ "ti,omap4-panda",			2791 },
};

static EFI_GUID fdt_guid = FDT_TABLE_GUID;

#define	efi_guidcmp(_a, _b)	memcmp((_a), (_b), sizeof(EFI_GUID))

void *
efi_makebootargs(char *bootargs, uint32_t *board_id)
{
	void *fdt = NULL;
	u_char bootduid[8];
	u_char zero[8] = { 0 };
	uint64_t uefi_system_table = htobe64((uintptr_t)ST);
	void *node;
	size_t len;
	int i;

	for (i = 0; i < ST->NumberOfTableEntries; i++) {
		if (efi_guidcmp(&fdt_guid,
		    &ST->ConfigurationTable[i].VendorGuid) == 0)
			fdt = ST->ConfigurationTable[i].VendorTable;
	}

	if (!fdt_init(fdt))
		return NULL;

	node = fdt_find_node("/chosen");
	if (!node)
		return NULL;

	len = strlen(bootargs) + 1;
	fdt_node_add_property(node, "bootargs", bootargs, len);

	/* Pass DUID of the boot disk. */
	memcpy(&bootduid, diskinfo.disklabel.d_uid, sizeof(bootduid));
	if (memcmp(bootduid, zero, sizeof(bootduid)) != 0) {
		fdt_node_add_property(node, "openbsd,bootduid", bootduid,
		    sizeof(bootduid));
	}

	/* Pass EFI system table. */
	fdt_node_add_property(node, "openbsd,uefi-system-table",
	    &uefi_system_table, sizeof(uefi_system_table));

	/* Placeholders for EFI memory map. */
	fdt_node_add_property(node, "openbsd,uefi-mmap-start", zero, 8);
	fdt_node_add_property(node, "openbsd,uefi-mmap-size", zero, 4);
	fdt_node_add_property(node, "openbsd,uefi-mmap-desc-size", zero, 4);
	fdt_node_add_property(node, "openbsd,uefi-mmap-desc-ver", zero, 4);

	fdt_finalize();

	node = fdt_find_node("/");
	for (i = 0; i < nitems(board_id_table); i++) {
		if (fdt_node_is_compatible(node, board_id_table[i].name)) {
			*board_id = board_id_table[i].board_id;
			break;
		}
	}

	return fdt;
}

void
efi_updatefdt(void)
{
	uint64_t uefi_mmap_start = htobe64((uintptr_t)mmap);
	uint32_t uefi_mmap_size = htobe32(mmap_ndesc * mmap_descsiz);
	uint32_t uefi_mmap_desc_size = htobe32(mmap_descsiz);
	uint32_t uefi_mmap_desc_ver = htobe32(mmap_version);
	void *node;

	node = fdt_find_node("/chosen");
	if (!node)
		return;

	/* Pass EFI memory map. */
	fdt_node_set_property(node, "openbsd,uefi-mmap-start",
	    &uefi_mmap_start, sizeof(uefi_mmap_start));
	fdt_node_set_property(node, "openbsd,uefi-mmap-size",
	    &uefi_mmap_size, sizeof(uefi_mmap_size));
	fdt_node_set_property(node, "openbsd,uefi-mmap-desc-size",
	    &uefi_mmap_desc_size, sizeof(uefi_mmap_desc_size));
	fdt_node_set_property(node, "openbsd,uefi-mmap-desc-ver",
	    &uefi_mmap_desc_ver, sizeof(uefi_mmap_desc_ver));

	fdt_finalize();
}

u_long efi_loadaddr;

void
machdep(void)
{
	EFI_PHYSICAL_ADDRESS addr;
	EFI_STATUS status;

	cninit();

	/*
	 * The kernel expects to be loaded at offset 0x00300000 into a
	 * block of memory aligned on a 256MB boundary.  We allocate a
	 * block of 32MB of memory, which gives us plenty of room for
	 * growth.
	 */
	for (addr = 0x10000000; addr <= 0xf0000000; addr += 0x10000000) {
		status = BS->AllocatePages(AllocateAddress, EfiLoaderData,
		    EFI_SIZE_TO_PAGES(32 * 1024 * 1024), &addr);
		if (status == EFI_SUCCESS) {
			efi_loadaddr = addr;
			break;
		}
	}
	if (efi_loadaddr == 0)
		printf("Can't allocate memory\n");

	efi_heap_init();
	efi_timer_init();
	efi_diskprobe();
}

void
efi_cleanup(void)
{
	int		 retry;
	EFI_STATUS	 status;

	efi_timer_cleanup();

	/* retry once in case of failure */
	for (retry = 1; retry >= 0; retry--) {
		efi_memprobe_internal();	/* sync the current map */
		efi_updatefdt();
		status = EFI_CALL(BS->ExitBootServices, IH, mmap_key);
		if (status == EFI_SUCCESS)
			break;
		if (retry == 0)
			panic("ExitBootServices failed (%d)", status);
	}
}

void
_rtt(void)
{
#ifdef EFI_DEBUG
	printf("Hit any key to reboot\n");
	efi_cons_getc(0);
#endif
	/*
	 * XXX ResetSystem doesn't seem to work on U-Boot 2017.03 on
	 * the CuBox-i.  So trigger an unimplemented instruction trap
	 * instead.
	 */
#if 1
	asm volatile(".word 0xa000f7f0\n");
#else
	RS->ResetSystem(EfiResetCold, EFI_SUCCESS, 0, NULL);
#endif
	for (;;)
		continue;
}

/*
 * U-Boot only implements the GetTime() Runtime Service if it has been
 * configured with CONFIG_DM_RTC.  Most board configurations don't
 * include that option, so we can't use it to implement our boot
 * prompt timeout.  Instead we use timer events to simulate a clock
 * that ticks ever second.
 */

EFI_EVENT timer;
int ticks;

static VOID
efi_timer(EFI_EVENT event, VOID *context)
{
	ticks++;
}

static void
efi_timer_init(void)
{
	EFI_STATUS status;

	status = BS->CreateEvent(EVT_TIMER | EVT_NOTIFY_SIGNAL, TPL_CALLBACK,
	    efi_timer, NULL, &timer);
	if (status == EFI_SUCCESS)
		status = BS->SetTimer(timer, TimerPeriodic, 10000000);
	if (EFI_ERROR(status))
		printf("Can't create timer\n");
}

static void
efi_timer_cleanup(void)
{
	BS->CloseEvent(timer);
}

time_t
getsecs(void)
{
	return ticks;
}

/*
 * Various device-related bits.
 */

void
devboot(dev_t dev, char *p)
{
	strlcpy(p, "sd0a", 5);
}

int
cnspeed(dev_t dev, int sp)
{
	return 115200;
}

char *
ttyname(int fd)
{
	return "com0";
}

dev_t
ttydev(char *name)
{
	return NODEV;
}

#define MAXDEVNAME	16

/*
 * Parse a device spec.
 *
 * [A-Za-z]*[0-9]*[A-Za-z]:file
 *    dev   uint    part
 */
int
devparse(const char *fname, int *dev, int *unit, int *part, const char **file)
{
	const char *s;

	*unit = 0;	/* default to wd0a */
	*part = 0;
	*dev  = 0;

	s = strchr(fname, ':');
	if (s != NULL) {
		int devlen;
		int i, u, p = 0;
		struct devsw *dp;
		char devname[MAXDEVNAME];

		devlen = s - fname;
		if (devlen > MAXDEVNAME)
			return (EINVAL);

		/* extract device name */
		for (i = 0; isalpha(fname[i]) && (i < devlen); i++)
			devname[i] = fname[i];
		devname[i] = 0;

		if (!isdigit(fname[i]))
			return (EUNIT);

		/* device number */
		for (u = 0; isdigit(fname[i]) && (i < devlen); i++)
			u = u * 10 + (fname[i] - '0');

		if (!isalpha(fname[i]))
			return (EPART);

		/* partition number */
		if (i < devlen)
			p = fname[i++] - 'a';

		if (i != devlen)
			return (ENXIO);

		/* check device name */
		for (dp = devsw, i = 0; i < ndevs; dp++, i++) {
			if (dp->dv_name && !strcmp(devname, dp->dv_name))
				break;
		}

		if (i >= ndevs)
			return (ENXIO);

		*unit = u;
		*part = p;
		*dev  = i;
		fname = ++s;
	}

	*file = fname;

	return (0);
}

int
devopen(struct open_file *f, const char *fname, char **file)
{
	struct devsw *dp;
	int dev, unit, part, error;

	error = devparse(fname, &dev, &unit, &part, (const char **)file);
	if (error)
		return (error);

	dp = &devsw[0];
	f->f_dev = dp;

	return (*dp->dv_open)(f, unit, part);
}

static void
efi_memprobe_internal(void)
{
	EFI_STATUS		 status;
	UINTN			 mapkey, mmsiz, siz;
	UINT32			 mmver;
	EFI_MEMORY_DESCRIPTOR	*mm;
	int			 n;

	free(mmap, mmap_ndesc * mmap_descsiz);

	siz = 0;
	status = EFI_CALL(BS->GetMemoryMap, &siz, NULL, &mapkey, &mmsiz,
	    &mmver);
	if (status != EFI_BUFFER_TOO_SMALL)
		panic("cannot get the size of memory map");
	mm = alloc(siz);
	status = EFI_CALL(BS->GetMemoryMap, &siz, mm, &mapkey, &mmsiz, &mmver);
	if (status != EFI_SUCCESS)
		panic("cannot get the memory map");
	n = siz / mmsiz;
	mmap = mm;
	mmap_key = mapkey;
	mmap_ndesc = n;
	mmap_descsiz = mmsiz;
	mmap_version = mmver;
}

/*
 * Commands
 */

int Xexit_efi(void);
int Xpoweroff_efi(void);

const struct cmd_table cmd_machine[] = {
	{ "exit",	CMDT_CMD, Xexit_efi },
	{ "poweroff",	CMDT_CMD, Xpoweroff_efi },
	{ NULL, 0 }
};

int
Xexit_efi(void)
{
	EFI_CALL(BS->Exit, IH, 0, 0, NULL);
	for (;;)
		continue;
	return (0);
}

int
Xpoweroff_efi(void)
{
	EFI_CALL(RS->ResetSystem, EfiResetShutdown, EFI_SUCCESS, 0, NULL);
	return (0);
}
@


1.18
log
@Add "machine exit" and "machine poweroff" commands to the arm64 and armv7
bootloaders.  Replace while (1) { } with for (;;) continue; per request
from tom@@.

ok tom@@, jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.17 2017/07/31 14:05:57 kettenis Exp $	*/
d41 1
a41 1
EFI_HANDLE		 IH;
d43 7
a49 1
EFI_HANDLE		 efi_bootdp;
d57 2
a156 3
EFI_PHYSICAL_ADDRESS	 heap;
UINTN			 heapsiz = 1 * 1024 * 1024;

d292 2
a293 1
	u_char zero[8];
a314 1
	memset(&zero, 0, sizeof(zero));
d321 10
d344 26
d405 3
d410 10
a419 1
	BS->ExitBootServices(NULL, 0);
d597 28
@


1.17
log
@Back out previous commit but handle the case where the device path consists
of a single MEDIA_DEVICE_PATH component specially to cater for U-Boot's
somewhat broken device path handling.  Add comments to prevent confusion
in the future.  Bump the version number once again.

ok brynet@@
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.16 2017/07/29 19:38:01 kettenis Exp $	*/
d377 1
a377 1
	 * XXX ResetSystem doesn't seem to work on U-Boot 2016.05 on
d386 2
a387 1
	while (1) { }
d544 29
@


1.16
log
@Fix off-by-one in return value of efi_device_path_depth().

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.15 2017/07/24 11:15:34 patrick Exp $	*/
d189 9
d223 4
d234 1
a234 1
			return (i + 1);
@


1.15
log
@Port amd64's updates to the device path comparison to armv7.  Fixes
bootup on the i.MX6UL evaluation kit.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.14 2017/03/11 09:09:14 jsg Exp $	*/
d221 1
a221 1
			return (i);
@


1.14
log
@Set EVT_NOTIFY_SIGNAL when calling boot services CreateEvent().
The UEFI specification states this is required to have the notification
function called.  U-Boot's EFI loader calls the notification function
without the flag set but the EDK2 implementation of UEFI requires the
flag.

With this change the timer ticks and autoboot works on the OverDrive
3000.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.13 2016/10/23 19:06:08 kettenis Exp $	*/
d49 2
d168 1
a168 1
	int			 i, bootdev;
d174 1
a174 1
	EFI_DEVICE_PATH		*dp, *bp;
d186 3
a189 1
		bootdev = 0;
d199 2
a200 2
		if (efi_bootdp == NULL)
			goto next;
d204 2
a205 15
			goto next;
		bp = efi_bootdp;
		while (1) {
			if (IsDevicePathEnd(dp)) {
				bootdev = 1;
				break;
			}
			if (memcmp(dp, bp, sizeof(EFI_DEVICE_PATH)) != 0 ||
			    memcmp(dp, bp, DevicePathNodeLength(dp)) != 0)
				break;
			dp = NextDevicePathNode(dp);
			bp = NextDevicePathNode(bp);
		}
next:
		if (bootdev) {
d212 35
@


1.13
log
@Remove sunxi board IDs.
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.12 2016/10/06 18:15:44 kettenis Exp $	*/
d372 1
a372 1
	status = BS->CreateEvent(EVT_TIMER, TPL_CALLBACK,
@


1.12
log
@Remove board IDs for the i.MX platform.  The kernel doesn't need them anymore.
Make sure we pass 0 as the board ID instead of random garbage if we don't
find a matching compatible string.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.11 2016/07/01 09:34:39 patrick Exp $	*/
a228 2
	{ "allwinner,sun4i-a10",		4104 },
	{ "allwinner,sun7i-a20",		4283 },
@


1.11
log
@SolidRun's HummingBoards and CuBoxes are also available with
the i.MX6 Solo and DualLite SoCs.  Those are slightly different
to the bigger versions and thus have a different FDT compatible
name.  To be able for us to boot on those machines, add those
compatible names to the list and re-use the board ids.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.10 2016/05/20 23:25:09 jsg Exp $	*/
a231 5
	{ "boundary,imx6q-nitrogen6_max",	3769 },
	{ "boundary,imx6q-nitrogen6x",		3769 },
	{ "compulab,cm-fx6",			4273 },
	{ "fsl,imx6q-sabrelite",		3769 },
	{ "fsl,imx6q-sabresd",			3980 },
a233 1
	{ "kosagi,imx6q-novena",		4269 },
a234 4
	{ "solidrun,cubox-i/dl",		4821 },
	{ "solidrun,cubox-i/q",			4821 },
	{ "solidrun,hummingboard/dl",		4773 },
	{ "solidrun,hummingboard/q",		4773 },
a238 2
	{ "udoo,imx6q-udoo",			4800 },
	{ "wand,imx6q-wandboard",		4412 },
@


1.10
log
@Add compatible string to board id mappings for almost all of the other
board ids we match on.

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.9 2016/05/20 19:09:24 kettenis Exp $	*/
d241 1
d243 1
@


1.9
log
@Attempt to allocate 32MB at the lowest address that is aligned on a 256MB
border.  Our kernel currently relies on being loaded at the start of physical
memory.  Hopefully this algorithm achieves that.  In the future I hope to
make it possible to load the kernel at any 256MB aligned border such that
the algorithm works even if the lowest 32MB are not available.
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.8 2016/05/20 11:53:19 kettenis Exp $	*/
d229 3
d237 2
d240 1
d243 4
@


1.8
log
@Set "openbsd.bootduid" property of "/chosen" to the DUID of the boot disk.

ok patrick@@, jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.7 2016/05/19 09:39:06 jsg Exp $	*/
d297 2
a298 2
	EFI_STATUS		 status;
	EFI_PHYSICAL_ADDRESS	 addr = 0x10000000;
d302 15
a316 5
	printf("pos %p\n", machdep);

	status = BS->AllocatePages(AllocateAddress, EfiLoaderData,
	    EFI_SIZE_TO_PAGES(32 * 1024 * 1024), &addr);
	if (status != EFI_SUCCESS)
a317 1
	efi_loadaddr = addr;
@


1.7
log
@Match compatible strings for utilite which identifies as "cm-fx6" in
fdt/u-boot, and nitrogen6x which shares a board id with sabre lite but
has a different compatible string.

ok patrick@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.6 2016/05/17 22:41:20 kettenis Exp $	*/
d33 1
d249 2
a250 1
	char *dummy;
d269 10
a278 4
	if (fdt_node_property(node, "bootargs", &dummy))
		fdt_node_set_property(node, "bootargs", bootargs, len);
	else
		fdt_node_add_property(node, "bootargs", bootargs, len);
@


1.6
log
@Enable -Wall -Werror.  Fix warnings uncovered by this.

Set board IDs for i.IMX6 boards based on the "compatible" property of the
root node for now to ease the transition to full FDT support in the
kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.5 2016/05/17 21:26:32 kettenis Exp $	*/
d228 10
a237 8
	{ "phytec,imx6q-pbab01",	3529 },
	{ "fsl,imx6q-sabrelite",	3769 },
	{ "fsl,imx6q-sabresd",		3980 },
	{ "kosagi,imx6q-novena",	4269 },
	{ "solidrun,hummingboard/q",	4773 },
	{ "solidrun,cubox-i/q",		4821 },
	{ "wand,imx6q-wandboard",	4412 },
	{ "udoo,imx6q-udoo",		4800 },
@


1.5
log
@Add support for passing an FDT.  The bootloader will update the "bootargs"
property of the "/chosen" node to pass arguments to the kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.4 2016/05/14 21:22:56 kettenis Exp $	*/
d30 3
d222 16
d243 1
a243 1
efi_makebootargs(char *bootargs)
d258 1
a258 1
		return;
d262 1
a262 1
		return;
d265 1
a265 1
	if (fdt_node_property(node, "bootargs", &bootargs))
d271 8
d423 1
a423 1
		int i, u, p;
@


1.4
log
@Since GetTime() doesn't work on U-Boot, use timer events to simulate a clock
that ticks at every second.  This makes the boot prompt timeout work.
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.3 2016/05/14 20:00:24 kettenis Exp $	*/
d31 1
d217 36
@


1.3
log
@Handle boot options, and pass the boot device to the kernel.  The boot device
is currently hardcoded to be sd0.  Still need to figure out how we will do
proper boot device selection when we start using the FDT.
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.2 2016/05/14 19:45:37 kettenis Exp $	*/
d44 3
d237 1
d242 8
d269 19
a287 2
time_t
getsecs(void)
d289 1
a289 9
	EFI_TIME	t;
	EFI_STATUS	status;
	time_t		r = 0;
	int		y = 0;
	const int	daytab[][14] = {
	    { 0, -1, 30, 58, 89, 119, 150, 180, 211, 242, 272, 303, 333, 364 },
	    { 0, -1, 30, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 },
	};
#define isleap(_y) (((_y) % 4) == 0 && (((_y) % 100) != 0 || ((_y) % 400) == 0))
d291 4
a294 1
	status = EFI_CALL(ST->RuntimeServices->GetTime, &t, NULL);
d296 2
a297 1
		return 0;
d299 5
a303 7
	/* Calc days from UNIX epoch */
	r = (t.Year - 1970) * 365;
	for (y = 1970; y < t.Year; y++) {
		if (isleap(y))
			r++;
	}
	r += daytab[isleap(t.Year)? 1 : 0][t.Month] + t.Day;
d305 5
a309 5
	/* Calc secs */
	r *= 60 * 60 * 24;
	r += ((t.Hour * 60) + t.Minute) * 60 + t.Second;
	if (-24 * 60 < t.TimeZone && t.TimeZone < 24 * 60)
		r += t.TimeZone * 60;
d311 3
a313 2
	return (r);
}
@


1.2
log
@Make getsecs() return 0 if EFI doesn't tell us the time.
@
text
@d1 1
a1 1
/*	$OpenBSD: efiboot.c,v 1.1 2016/05/14 17:55:15 kettenis Exp $	*/
d294 1
a294 1
	strlcpy(p, "efi0a", 6);
@


1.1
log
@Initial stab at an EFI bootloader for armv7.  Bits and pieces from FreeBSD
and our amd64 EFI bootloader.  The current code works on a 2GB CuBox-i,
but probably not on anything else.  It needs a u-boot with EFI loader
support.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d261 1
d270 3
a272 1
	EFI_CALL(ST->RuntimeServices->GetTime, &t, NULL);
@

