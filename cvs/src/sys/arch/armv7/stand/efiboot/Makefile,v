head	1.7;
access;
symbols
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.6.0.4
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5;
locks; strict;
comment	@# @;


1.7
date	2017.07.04.14.54.15;	author espie;	state Exp;
branches;
next	1.6;
commitid	Kc7cQ50ScYsvVzUJ;

1.6
date	2016.11.06.16.42.00;	author tb;	state Exp;
branches;
next	1.5;
commitid	peo8JdlgBE9dXbST;

1.5
date	2016.05.23.02.19.46;	author jsg;	state Exp;
branches;
next	1.4;
commitid	nc4rJGPfGmGS9MGQ;

1.4
date	2016.05.23.00.45.48;	author jsg;	state Exp;
branches;
next	1.3;
commitid	MbQYrTCddYg3YlcG;

1.3
date	2016.05.17.22.41.20;	author kettenis;	state Exp;
branches;
next	1.2;
commitid	NNtn5vXpUWa3YUEk;

1.2
date	2016.05.17.21.26.32;	author kettenis;	state Exp;
branches;
next	1.1;
commitid	3n9DvpmBesrJfZVA;

1.1
date	2016.05.14.17.55.15;	author kettenis;	state Exp;
branches;
next	;
commitid	IdQZw2Pw0GuFYXCI;


desc
@@


1.7
log
@zap .o, put both .c at deraadt@@'s request
@
text
@#	$OpenBSD: Makefile,v 1.6 2016/11/06 16:42:00 tb Exp $

NOMAN=		#

.if ${MACHINE} == "armv7"

PROG=		BOOTARM.EFI
OBJFMT=		binary
INSTALL_STRIP=
BINDIR=		/usr/mdec
SRCS=		start.S self_reloc.c efiboot.c conf.c exec.c efidev.c fdt.c

S=		${.CURDIR}/../../../..
EFIDIR=		${S}/stand/efi

OBJCOPY?=	objcopy
OBJDUMP?=	objdump

LDFLAGS+=-nostdlib -T ${.CURDIR}/ldscript.arm -Bsymbolic -shared

.PATH:	${S}/stand/boot
SRCS+=	boot.c cmd.c vars.c

.PATH:	${S}/lib/libsa
SRCS+=	alloc.c ctime.c exit.c getchar.c memcmp.c memcpy.c memmove.c memset.c \
	printf.c putchar.c snprintf.c strchr.c strcmp.c strerror.c strncmp.c \
	strncpy.c strtol.c
SRCS+=	close.c closeall.c cons.c cread.c dev.c disklabel.c dkcksum.c fstat.c \
	lseek.c open.c read.c readdir.c stat.c
SRCS+=	loadfile.c
SRCS+=	ufs.c

.PATH:	${S}/lib/libkern/arch/arm ${S}/lib/libkern
SRCS+=	divsi3.S divdi3.c moddi3.c qdivrem.c strlcpy.c strlen.c

.PATH:	${S}/lib/libz
SRCS+=	adler32.c crc32.c inflate.c inftrees.c

CPPFLAGS+=	-nostdinc
CPPFLAGS+=	-I${S} -I. -I${.CURDIR}
CPPFLAGS+=	-I${EFIDIR}/include -I${EFIDIR}/include/arm
CPPFLAGS+=	-D_STANDALONE
CPPFLAGS+=	-DSMALL -DSLOW -DNOBYFOUR -D__INTERNAL_LIBSA_CREAD
CPPFLAGS+=	-DNEEDS_HEAP_H
COPTS+=		-ffreestanding -fno-stack-protector
COPTS+=		-fshort-wchar -fPIC -fno-builtin
COPTS+=		-Wall -Werror

PROG.elf=	${PROG:S/.EFI/.elf/}
CLEANFILES+=	${PROG.elf} ${PROG.elf}.tmp

${PROG}: ${PROG.elf}
	${OBJCOPY} -j .peheader -j .text -j .sdata -j .data \
		-j .dynamic -j .dynsym -j .dynstr -j .rel -j .rel.dyn \
		-j .rela -j .rela.dyn -j .reloc \
		--output-target=${OBJFMT} ${PROG.elf} ${.TARGET}

.include <bsd.prog.mk>

${PROG.elf}: ${OBJS}
	${LD} ${LDFLAGS} -o ${.TARGET}.tmp ${OBJS} ${LDADD}
	@@if ${OBJDUMP} -t ${.TARGET}.tmp | grep 'UND'; then	\
		(echo Undefined symbols; false);		\
	fi
	mv ${.TARGET}.tmp ${.TARGET}

.if !make(clean) && !make(cleandir) && !make(includes) && !make(obj)
.BEGIN:
	@@([ -h machine ] || ln -s ${.CURDIR}/../../../${MACHINE}/include machine)
	@@([ -h arm ] || ln -s ${.CURDIR}/../../../arm/include arm)
.NOPATH: machine arm
CLEANFILES+=	machine arm
.endif

.else
NOPROG=yes
.include <bsd.prog.mk>
.endif
@


1.6
log
@Do not create machine@@ symlinks in obj as root during includes:, but
defer their creation to later, so that they are owned by BUILDUSER.
This eliminates the last root-owned files in obj/ from 'make build'.
In addition, place a MACHINE == hppa test in hppa/stand/Makefile.inc
to avoid creating bogus symlinks on all other archs.

joint work with & ok natano, "let's try it" deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2016/05/23 02:19:46 jsg Exp $
d25 1
a25 1
SRCS+=	alloc.c ctime.c exit.c getchar.c memcmp.o memcpy.o memmove.c memset.c \
@


1.5
log
@build armv7 efiboot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2016/05/23 00:45:48 jsg Exp $
d67 1
a67 1
.if !make(obj)
@


1.4
log
@install into mdec
@
text
@d1 5
a5 1
#	$OpenBSD: Makefile,v 1.3 2016/05/17 22:41:20 kettenis Exp $
a7 1
NOMAN=		#
d73 5
@


1.3
log
@Enable -Wall -Werror.  Fix warnings uncovered by this.

Set board IDs for i.IMX6 boards based on the "compatible" property of the
root node for now to ease the transition to full FDT support in the
kernel.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2016/05/17 21:26:32 kettenis Exp $
d6 2
@


1.2
log
@Add support for passing an FDT.  The bootloader will update the "bootargs"
property of the "/chosen" node to pass arguments to the kernel.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2016/05/14 17:55:15 kettenis Exp $
d42 1
@


1.1
log
@Initial stab at an EFI bootloader for armv7.  Bits and pieces from FreeBSD
and our amd64 EFI bootloader.  The current code works on a 2GB CuBox-i,
but probably not on anything else.  It needs a u-boot with EFI loader
support.
@
text
@d1 1
a1 1
#	$OpenBSD$
d6 1
a6 1
SRCS=		start.S self_reloc.c efiboot.c conf.c exec.c efidev.c
d20 3
a22 3
SRCS+=	alloc.c ctime.c exit.c getchar.c memcmp.o memcpy.o memset.c printf.c \
	putchar.c snprintf.c strchr.c strcmp.c strerror.c strncmp.c strncpy.c \
	strtol.c
@

