head	1.19;
access;
symbols
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.19
date	2017.01.21.07.10.04;	author kettenis;	state Exp;
branches;
next	1.18;
commitid	pW9hgDNTIEswAZvq;

1.18
date	2017.01.04.12.15.37;	author kettenis;	state Exp;
branches;
next	1.17;
commitid	XaCWYHN0M2qn21UH;

1.17
date	2016.12.27.14.37.02;	author kettenis;	state Exp;
branches;
next	1.16;
commitid	7sedU1peRSusGlzF;

1.16
date	2016.12.24.22.42.26;	author kettenis;	state Exp;
branches;
next	1.15;
commitid	o1jSXOiKIVjsjtlK;

1.15
date	2016.11.08.19.36.41;	author kettenis;	state Exp;
branches;
next	1.14;
commitid	OX6J42L7ZwuVV3bO;

1.14
date	2016.10.08.09.50.14;	author kettenis;	state Exp;
branches;
next	1.13;
commitid	FICmyJkPAYUIRIay;

1.13
date	2016.08.28.20.20.37;	author kettenis;	state Exp;
branches;
next	1.12;
commitid	fg40ROb5vOJm44u6;

1.12
date	2016.08.28.17.31.44;	author kettenis;	state Exp;
branches;
next	1.11;
commitid	KmehlqjWANEiBpGo;

1.11
date	2016.08.26.21.23.41;	author kettenis;	state Exp;
branches;
next	1.10;
commitid	fzEIxiNsdyTy38mu;

1.10
date	2016.08.23.18.16.06;	author kettenis;	state Exp;
branches;
next	1.9;
commitid	98EjhCHboQQyTWi8;

1.9
date	2016.08.12.19.55.54;	author kettenis;	state Exp;
branches;
next	1.8;
commitid	6ca6tEXXvG3hOE3Y;

1.8
date	2016.08.12.16.02.31;	author kettenis;	state Exp;
branches;
next	1.7;
commitid	34wLCJ12lwEroMmh;

1.7
date	2015.05.20.03.49.23;	author jsg;	state Exp;
branches;
next	1.6;
commitid	5bX9oiRmCoApfSjg;

1.6
date	2015.05.04.03.59.42;	author jsg;	state Exp;
branches;
next	1.5;
commitid	a8MWvErr5z5NNDlo;

1.5
date	2013.11.06.19.03.07;	author syl;	state Exp;
branches;
next	1.4;

1.4
date	2013.11.03.14.08.56;	author rapha;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.31.17.15.19;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.23.18.01.52;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.23.17.08.48;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Add support for the Allwinner A64 (sun50i-a64).

Requested by patrick@@
@
text
@/*	$OpenBSD: sxipio.c,v 1.18 2017/01/04 12:15:37 kettenis Exp $	*/
/*
 * Copyright (c) 2010 Miodrag Vallat.
 * Copyright (c) 2013 Artturi Alm
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/gpio.h>
#include <sys/evcount.h>
#include <sys/malloc.h>

#include <machine/bus.h>
#include <machine/fdt.h>
#include <machine/intr.h>

#include <dev/gpio/gpiovar.h>
#include <dev/ofw/openfirm.h>
#include <dev/ofw/ofw_clock.h>
#include <dev/ofw/ofw_gpio.h>
#include <dev/ofw/ofw_pinctrl.h>
#include <dev/ofw/fdt.h>

#include <armv7/sunxi/sunxireg.h>
#include <armv7/sunxi/sxipiovar.h>

#include "gpio.h"

#define	SXIPIO_NPORT		9

struct sxipio_softc;

struct sxipio_gpio {
	struct sxipio_softc *sc;
	int port;
};

struct intrhand {
	int (*ih_func)(void *);		/* handler */
	void *ih_arg;			/* arg for handler */
	int ih_ipl;			/* IPL_* */
	int ih_irq;			/* IRQ number */
	int ih_gpio;			/* gpio pin */
	struct evcount ih_count;
	char *ih_name;
};

struct sxipio_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
	void			*sc_ih_h;
	void			*sc_ih_l;
	int 			sc_max_il;
	int 			sc_min_il;

	struct sxipio_pin	*sc_pins;
	int			sc_npins;
	struct gpio_controller	sc_gc;

	struct sxipio_gpio	sc_gpio[SXIPIO_NPORT];
	struct gpio_chipset_tag	sc_gpio_tag[SXIPIO_NPORT];
	gpio_pin_t		sc_gpio_pins[SXIPIO_NPORT][32];

	struct intrhand		*sc_handlers[32];
};

#define	SXIPIO_CFG(port, pin)	0x00 + ((port) * 0x24) + (((pin) >> 3) * 0x04)
#define	SXIPIO_DAT(port)	0x10 + ((port) * 0x24)
#define	SXIPIO_DRV(port, pin)	0x14 + ((port) * 0x24) + (((pin) >> 4) * 0x04)
#define	SXIPIO_PUL(port, pin)	0x1c + ((port) * 0x24) + (((pin) >> 4) * 0x04)
#define	SXIPIO_INT_CFG0(port)	0x0200 + ((port) * 0x04)
#define	SXIPIO_INT_CTL		0x0210
#define	SXIPIO_INT_STA		0x0214
#define	SXIPIO_INT_DEB		0x0218 /* debounce register */

#define SXIPIO_GPIO_IN		0
#define SXIPIO_GPIO_OUT		1

int	sxipio_match(struct device *, void *, void *);
void	sxipio_attach(struct device *, struct device *, void *);

struct cfattach sxipio_ca = {
	sizeof (struct sxipio_softc), sxipio_match, sxipio_attach
};

struct cfdriver sxipio_cd = {
	NULL, "sxipio", DV_DULL
};

void	sxipio_attach_gpio(struct device *);
int	sxipio_pinctrl(uint32_t, void *);
void	sxipio_config_pin(void *, uint32_t *, int);
int	sxipio_get_pin(void *, uint32_t *);
void	sxipio_set_pin(void *, uint32_t *, int);

#include "sxipio_pins.h"

struct sxipio_pins {
	const char *compat;
	struct sxipio_pin *pins;
	int npins;
};

struct sxipio_pins sxipio_pins[] = {
	{
		"allwinner,sun4i-a10-pinctrl",
		sun4i_a10_pins, nitems(sun4i_a10_pins)
	},
	{
		"allwinner,sun5i-a13-pinctrl",
		sun5i_a13_pins, nitems(sun5i_a13_pins)
	},
	{
		"allwinner,sun5i-a10s-pinctrl",
		sun5i_a10s_pins, nitems(sun5i_a10s_pins)
	},
	{
		"allwinner,sun7i-a20-pinctrl",
		sun7i_a20_pins, nitems(sun7i_a20_pins)
	},
	{
		"allwinner,sun8i-h3-pinctrl",
		sun8i_h3_pins, nitems(sun8i_h3_pins)
	},
	{
		"allwinner,sun8i-h3-r-pinctrl",
		sun8i_h3_r_pins, nitems(sun8i_h3_r_pins)
	},
	{
		"allwinner,sun9i-a80-pinctrl",
		sun9i_a80_pins, nitems(sun9i_a80_pins)
	},
	{
		"allwinner,sun9i-a80-r-pinctrl",
		sun9i_a80_r_pins, nitems(sun9i_a80_r_pins)
	},
	{
		"allwinner,sun50i-a64-pinctrl",
		sun50i_a64_pins, nitems(sun50i_a64_pins)
	}
};

int
sxipio_match(struct device *parent, void *match, void *aux)
{
	struct fdt_attach_args *faa = aux;
	int i;

	for (i = 0; i < nitems(sxipio_pins); i++) {
		if (OF_is_compatible(faa->fa_node, sxipio_pins[i].compat))
			return 1;
	}

	return 0;
}

void
sxipio_attach(struct device *parent, struct device *self, void *aux)
{
	struct sxipio_softc *sc = (struct sxipio_softc *)self;
	struct fdt_attach_args	*faa = aux;
	int i;

	sc->sc_iot = faa->fa_iot;
	if (bus_space_map(sc->sc_iot, faa->fa_reg[0].addr,
	    faa->fa_reg[0].size, 0, &sc->sc_ioh))
		panic("%s: bus_space_map failed!", __func__);

	clock_enable_all(faa->fa_node);
	reset_deassert_all(faa->fa_node);

	for (i = 0; i < nitems(sxipio_pins); i++) {
		if (OF_is_compatible(faa->fa_node, sxipio_pins[i].compat)) {
			sc->sc_pins = sxipio_pins[i].pins;
			sc->sc_npins = sxipio_pins[i].npins;
			break;
		}
	}

	KASSERT(sc->sc_pins);
	pinctrl_register(faa->fa_node, sxipio_pinctrl, sc);

	sc->sc_gc.gc_node = faa->fa_node;
	sc->sc_gc.gc_cookie = sc;
	sc->sc_gc.gc_config_pin = sxipio_config_pin;
	sc->sc_gc.gc_get_pin = sxipio_get_pin;
	sc->sc_gc.gc_set_pin = sxipio_set_pin;
	gpio_controller_register(&sc->sc_gc);

	config_defer(self, sxipio_attach_gpio);

	printf(": %d pins\n", sc->sc_npins);
}


int
sxipio_pinctrl(uint32_t phandle, void *cookie)
{
	struct sxipio_softc *sc = cookie;
	char func[32];
	char *names, *name;
	int port, pin, off;
	int mux, drive, pull;
	int node;
	int len;
	int i, j;
	int s;

	node = OF_getnodebyphandle(phandle);
	if (node == 0)
		return -1;

	len = OF_getprop(node, "allwinner,function", func, sizeof(func));
	if (len <= 0 || len >= sizeof(func))
		return -1;

	len = OF_getproplen(node, "allwinner,pins");
	if (len <= 0)
		return -1;

	names = malloc(len, M_TEMP, M_WAITOK);
	OF_getprop(node, "allwinner,pins", names, len);

	drive = OF_getpropint(node, "allwinner,drive", 0);
	pull = OF_getpropint(node, "allwinner,pull", 0);

	name = names;
	while (len > 0) {
		/* Lookup the pin. */
		for (i = 0; i < sc->sc_npins; i++) {
			if (strcmp(name, sc->sc_pins[i].name) == 0)
				break;
		}
		if (i >= sc->sc_npins)
			goto err;

		/* Lookup the function of the pin. */
		for (j = 0; j < nitems(sc->sc_pins[i].funcs); j++) {
			if (strcmp(func, sc->sc_pins[i].funcs[j].name) == 0)
				break;
		}
		if (j > nitems(sc->sc_pins[i].funcs))
			goto err;

		port = sc->sc_pins[i].port;
		pin = sc->sc_pins[i].pin;
		mux = sc->sc_pins[i].funcs[j].mux;

		s = splhigh();
		off = (pin & 0x7) << 2;
		SXICMS4(sc, SXIPIO_CFG(port, pin), 0x7 << off, mux << off);
		off = (pin & 0xf) << 1;
		SXICMS4(sc, SXIPIO_DRV(port, pin), 0x3 << off, drive << off);
		SXICMS4(sc, SXIPIO_PUL(port, pin), 0x3 << off, pull << off);
		splx(s);

		len -= strlen(name) + 1;
		name += strlen(name) + 1;
	}

	free(names, M_TEMP, len);
	return 0;

err:
	free(names, M_TEMP, len);
	return -1;
}

void
sxipio_config_pin(void *cookie, uint32_t *cells, int config)
{
	struct sxipio_softc *sc = cookie;
	uint32_t port = cells[0];
	uint32_t pin = cells[1];
	int mux, off;

	if (port > SXIPIO_NPORT || pin > 32)
		return;

	mux = (config & GPIO_CONFIG_OUTPUT) ? 1 : 0;
	off = (pin & 0x7) << 2;
	SXICMS4(sc, SXIPIO_CFG(port, pin), 0x7 << off, mux << off);
}

int
sxipio_get_pin(void *cookie, uint32_t *cells)
{
	struct sxipio_softc *sc = cookie;
	uint32_t port = cells[0];
	uint32_t pin = cells[1];
	uint32_t flags = cells[2];
	uint32_t reg;
	int val;

	if (port > SXIPIO_NPORT || pin > 32)
		return 0;

	reg = SXIREAD4(sc, SXIPIO_DAT(port));
	reg &= (1 << pin);
	val = (reg >> pin) & 1;
	if (flags & GPIO_ACTIVE_LOW)
		val = !val;
	return val;
}

void
sxipio_set_pin(void *cookie, uint32_t *cells, int val)
{
	struct sxipio_softc *sc = cookie;
	uint32_t port = cells[0];
	uint32_t pin = cells[1];
	uint32_t flags = cells[2];
	uint32_t reg;

	if (port > SXIPIO_NPORT || pin > 32)
		return;

	reg = SXIREAD4(sc, SXIPIO_DAT(port));
	if (flags & GPIO_ACTIVE_LOW)
		val = !val;
	if (val)
		reg |= (1 << pin);
	else
		reg &= ~(1 << pin);
	SXIWRITE4(sc, SXIPIO_DAT(port), reg);
}

/*
 * GPIO support code
 */

int	sxipio_pin_read(void *, int);
void	sxipio_pin_write(void *, int, int);
void	sxipio_pin_ctl(void *, int, int);

static const struct gpio_chipset_tag sxipio_gpio_tag = {
	.gp_pin_read = sxipio_pin_read,
	.gp_pin_write = sxipio_pin_write,
	.gp_pin_ctl = sxipio_pin_ctl
};

int
sxipio_pin_read(void *cookie, int pin)
{
	struct sxipio_gpio *gpio = cookie;
	uint32_t cells[3];

	cells[0] = gpio->port;
	cells[1] = pin;
	cells[2] = 0;

	return sxipio_get_pin(gpio->sc, cells) ? GPIO_PIN_HIGH : GPIO_PIN_LOW;
}

void
sxipio_pin_write(void *cookie, int pin, int val)
{
	struct sxipio_gpio *gpio = cookie;
	uint32_t cells[3];

	cells[0] = gpio->port;
	cells[1] = pin;
	cells[2] = 0;

	sxipio_set_pin(gpio->sc, cells, val);
}

void
sxipio_pin_ctl(void *cookie, int pin, int flags)
{
	struct sxipio_gpio *gpio = cookie;
	uint32_t cells[3];

	cells[0] = gpio->port;
	cells[1] = pin;
	cells[2] = 0;

	if (ISSET(flags, GPIO_PIN_OUTPUT))
		sxipio_config_pin(gpio->sc, cells, GPIO_CONFIG_OUTPUT);
	else
		sxipio_config_pin(gpio->sc, cells, 0);
}

void
sxipio_attach_gpio(struct device *parent)
{
	struct sxipio_softc *sc = (struct sxipio_softc *)parent;
	struct gpiobus_attach_args gba;
	uint32_t reg;
	int port, pin;
	int cfg, state;
	int i;

	for (i = 0; i < sc->sc_npins; i++) {
		/* Skip pins that have no gpio function. */
		if (strcmp(sc->sc_pins[i].funcs[0].name, "gpio_in") != 0 ||
		    strcmp(sc->sc_pins[i].funcs[1].name, "gpio_out") != 0)
			continue;

		port = sc->sc_pins[i].port;
		pin = sc->sc_pins[i].pin;

		/* Get pin configuration. */
		reg = SXIREAD4(sc, SXIPIO_CFG(port, pin));
		cfg = (reg >> (pin & 0x7)) & 0x7;

		/* Skip pins that have been assigned other functions. */
		if (cfg != SXIPIO_GPIO_IN && cfg != SXIPIO_GPIO_OUT)
			continue;

		/* Get pin state. */
		reg = SXIREAD4(sc, SXIPIO_DAT(port));
		state = (reg >> pin) & 1;

		sc->sc_gpio_pins[port][pin].pin_caps =
		    GPIO_PIN_INPUT | GPIO_PIN_OUTPUT;
		sc->sc_gpio_pins[port][pin].pin_flags =
		    GPIO_PIN_SET | (cfg ? GPIO_PIN_OUTPUT : GPIO_PIN_INPUT);
		sc->sc_gpio_pins[port][pin].pin_state = state;
		sc->sc_gpio_pins[port][pin].pin_num = pin;
	}

	for (i = 0; i <= port; i++) {
		memcpy(&sc->sc_gpio_tag[i], &sxipio_gpio_tag, sizeof(sxipio_gpio_tag));
		sc->sc_gpio_tag[i].gp_cookie = &sc->sc_gpio[i];
		sc->sc_gpio[i].sc = sc;
		sc->sc_gpio[i].port = i;

		gba.gba_name = "gpio";
		gba.gba_gc = &sc->sc_gpio_tag[i];
		gba.gba_pins = &sc->sc_gpio_pins[i][0];
		gba.gba_npins = 32;
		
#if NGPIO > 0
		config_found(&sc->sc_dev, &gba, gpiobus_print);
#endif
	}
}
@


1.18
log
@Cleanup gpio(4) support code.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.17 2016/12/27 14:37:02 kettenis Exp $	*/
d150 4
@


1.17
log
@Add support for the 2nd sxipio(4) device on the Allwinner A80.
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.16 2016/12/24 22:42:26 kettenis Exp $	*/
d43 7
a49 13
#define	SXIPIO_PA_NPIN		18
#define	SXIPIO_PB_NPIN		24
#define	SXIPIO_PC_NPIN		25
#define	SXIPIO_PD_NPIN		28
#define	SXIPIO_PE_NPIN		12
#define	SXIPIO_PF_NPIN		6
#define	SXIPIO_PG_NPIN		12
#define	SXIPIO_PH_NPIN		28
#define	SXIPIO_PI_NPIN		22
#define	SXIPIO_NPIN	(SXIPIO_PA_NPIN + SXIPIO_PB_NPIN + SXIPIO_PC_NPIN + \
	SXIPIO_PD_NPIN + SXIPIO_PE_NPIN + SXIPIO_PF_NPIN + SXIPIO_PG_NPIN + \
	SXIPIO_PH_NPIN + SXIPIO_PI_NPIN)
#define	SXIPIO_PS_NPIN		84 /* for DRAM controller */
d74 3
a76 2
	struct gpio_chipset_tag	 sc_gpio_tag[SXIPIO_NPORT];
	gpio_pin_t		 sc_gpio_pins[SXIPIO_NPORT][32];
d90 3
a109 2
struct sxipio_softc *sxipio_sc;

a178 2
	sxipio_sc = sc;

a204 230
/*
 * GPIO support code
 */

int	sxipio_pin_read(void *, int);
void	sxipio_pin_write(void *, int, int);
void	sxipio_pin_ctl(void *, int, int);

static const struct gpio_chipset_tag sxipio_gpio_tag = {
	.gp_pin_read = sxipio_pin_read,
	.gp_pin_write = sxipio_pin_write,
	.gp_pin_ctl = sxipio_pin_ctl
};

int
sxipio_pin_read(void *portno, int pin)
{
	return sxipio_getpin((*(uint32_t *)portno * 32) + pin)
	    ? GPIO_PIN_HIGH : GPIO_PIN_LOW;
}

void
sxipio_pin_write(void *portno, int pin, int val)
{
	if (val)
		sxipio_setpin((*(uint32_t *)portno * 32) + pin);
	else
		sxipio_clrpin((*(uint32_t *)portno * 32) + pin);
}

void
sxipio_pin_ctl(void *portno, int pin, int flags)
{
	if (ISSET(flags, GPIO_PIN_OUTPUT))
		sxipio_setcfg((*(uint32_t *)portno * 32) + pin, SXIPIO_OUTPUT);
	else
		sxipio_setcfg((*(uint32_t *)portno * 32) + pin, SXIPIO_INPUT);
}

/* XXX ugly, but cookie has no other purposeful use. */
static const uint32_t sxipio_ports[SXIPIO_NPORT] = {
	0, 1, 2, 3, 4, 5, 6, 7, 8
};

static const int sxipio_last_pin[SXIPIO_NPORT] = {
	SXIPIO_PA_NPIN,
	SXIPIO_PB_NPIN,
	SXIPIO_PC_NPIN,
	SXIPIO_PD_NPIN,
	SXIPIO_PE_NPIN,
	SXIPIO_PF_NPIN,
	SXIPIO_PG_NPIN,
	SXIPIO_PH_NPIN,
	SXIPIO_PI_NPIN
};

void
sxipio_attach_gpio(struct device *parent)
{
	struct sxipio_softc *sc = (struct sxipio_softc *)parent;
	struct gpiobus_attach_args gba;
	int cfg, pin, port;
	/* get value & state of enabled pins, and disable those in use */
	pin = 0;
	port = 0;
next:
	sc->sc_gpio_pins[port][pin].pin_num = pin;
	cfg = sxipio_getcfg((port * 32) + pin);
#if DEBUG
	printf("port %d pin %d cfg %d\n", port, pin, cfg);
#endif
	if (cfg < 2) {
		sc->sc_gpio_pins[port][pin].pin_caps =
		    GPIO_PIN_INPUT | GPIO_PIN_OUTPUT;
		sc->sc_gpio_pins[port][pin].pin_state =
		    sxipio_getpin((port * 32) + pin);
		sc->sc_gpio_pins[port][pin].pin_flags = GPIO_PIN_SET |
		    (cfg ? GPIO_PIN_OUTPUT : GPIO_PIN_INPUT);
	} else {
		/* disable control of taken over pins */
		sc->sc_gpio_pins[port][pin].pin_caps = 0;
		sc->sc_gpio_pins[port][pin].pin_state = 0;
		sc->sc_gpio_pins[port][pin].pin_flags = 0;
	}

	if (++pin < sxipio_last_pin[port])
		goto next;

	bcopy(&sxipio_gpio_tag, &sc->sc_gpio_tag[port], sizeof(sxipio_gpio_tag));
	sc->sc_gpio_tag[port].gp_cookie = (void *)&sxipio_ports[port];
	gba.gba_name = "gpio";
	gba.gba_gc = &sc->sc_gpio_tag[port];
	gba.gba_pins = &sc->sc_gpio_pins[port][0];
	gba.gba_npins = pin;

#if NGPIO > 0
	config_found(&sc->sc_dev, &gba, gpiobus_print);
#endif

	pin = 0;
	if (++port < SXIPIO_NPORT)
		goto next;
}

/*
 * Lower Port I/O for MD code under arch/armv7/sunxi.
 * XXX see the comment in sxipiovar.h
 */
int
sxipio_getcfg(int pin)
{
	struct sxipio_softc *sc = sxipio_sc;
	uint32_t bit, data, off, reg, port;
	int s;

	port = pin >> 5;
	bit = pin - (port << 5);
	reg = SXIPIO_CFG(port, bit);
	off = (bit & 7) << 2;

	s = splhigh();

	data = SXIREAD4(sc, reg);

	splx(s);

	return data >> off & 7;
}

void
sxipio_setcfg(int pin, int mux)
{
	struct sxipio_softc *sc = sxipio_sc;
	uint32_t bit, cmask, mask, off, reg, port;
	int s;

	port = pin >> 5;
	bit = pin - (port << 5);
	reg = SXIPIO_CFG(port, bit);
	off = (bit & 7) << 2;
	cmask = 7 << off;
	mask = mux << off;

	s = splhigh();

	SXICMS4(sc, reg, cmask, mask);

	splx(s);
}

int
sxipio_getpin(int pin)
{
	struct sxipio_softc *sc = sxipio_sc;
	uint32_t bit, data, mask, reg, port;
	int s;

	port = pin >> 5;
	bit = pin - (port << 5);
	reg = SXIPIO_DAT(port);
	mask = 1 << (bit & 31);

	s = splhigh();

	data = SXIREAD4(sc, reg);

	splx(s);

	return data & mask ? 1 : 0;
}

void
sxipio_setpin(int pin)
{
	struct sxipio_softc *sc = sxipio_sc;
	uint32_t bit, mask, reg, port;
	int s;

	port = pin >> 5;
	bit = pin - (port << 5);
	reg = SXIPIO_DAT(port);
	mask = 1 << (bit & 31);

	s = splhigh();

	SXISET4(sc, reg, mask);

	splx(s);
}

void
sxipio_clrpin(int pin)
{
	struct sxipio_softc *sc = sxipio_sc;
	uint32_t bit, mask, reg, port;
	int s;

	port = pin >> 5;
	bit = pin - (port << 5);
	reg = SXIPIO_DAT(port);
	mask = 1 << (bit & 31);

	s = splhigh();

	SXICLR4(sc, reg, mask);

	splx(s);
}

int
sxipio_togglepin(int pin)
{
	struct sxipio_softc *sc = sxipio_sc;
	uint32_t bit, data, mask, reg, port;
	int s;

	port = pin >> 5;
	bit = pin - (port << 5);
	reg = SXIPIO_DAT(port);
	mask = 1 << (bit & 31);

	s = splhigh();

	data = SXIREAD4(sc, reg);
	SXIWRITE4(sc, reg, data ^ mask);

	splx(s);

	return data & mask ? GPIO_PIN_HIGH : GPIO_PIN_LOW;
}
d336 112
@


1.16
log
@Add support for the 2nd sxipio(4) device on the Allwinner H3.
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.15 2016/11/08 19:36:41 kettenis Exp $	*/
d150 4
@


1.15
log
@Add support for sun9i-a80, the Allwinner A80.
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.14 2016/10/08 09:50:14 kettenis Exp $	*/
d32 1
d144 4
d180 3
@


1.14
log
@Attach sxipio(4) using the fdt.

ok jsg@@, patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.13 2016/08/28 20:20:37 kettenis Exp $	*/
d141 4
@


1.13
log
@Get rid of sxipio_ioh and sxipio_iot; they're not used (anymore).
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.12 2016/08/28 17:31:44 kettenis Exp $	*/
d27 1
d34 1
a35 1
#include <armv7/armv7/armv7var.h>
a73 1
	int			sc_irq;
d94 2
a95 2
void sxipio_attach(struct device *, struct device *, void *);
void sxipio_attach_gpio(struct device *);
d98 1
a98 1
	sizeof (struct sxipio_softc), NULL, sxipio_attach
d105 1
d111 1
a111 1
struct sxipio_softc	*sxipio_sc = NULL;
d144 14
d159 1
a159 1
sxipio_attach(struct device *parent, struct device *self, void *args)
d162 2
a163 4
	struct armv7_attach_args *aa = args;
	int node, i;

	/* XXX check unit, bail if != 0 */
d165 4
a168 4
	sc->sc_iot = aa->aa_iot;
	if (bus_space_map(sc->sc_iot, aa->aa_dev->mem[0].addr,
	    aa->aa_dev->mem[0].size, 0, &sc->sc_ioh))
		panic("sxipio_attach: bus_space_map failed!");
a171 6
	sc->sc_irq = aa->aa_dev->irq[0];

	node = OF_finddevice("/soc/pinctrl@@01c20800");
	if (node == -1)
		panic("sxipio: can't find device tree node");

d173 1
a173 1
		if (OF_is_compatible(node, sxipio_pins[i].compat)) {
d181 1
a181 1
	pinctrl_register(node, sxipio_pinctrl, sc);
d183 1
a183 1
	sc->sc_gc.gc_node = node;
@


1.12
log
@Fix the macros that determine the register offsets based on port and pin.
These were didn't work as I expected, and returned the wrong offsets.  As a
result, pinctrl and gpio code was twiddling the wrong bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.11 2016/08/26 21:23:41 kettenis Exp $	*/
a110 2
bus_space_tag_t		 sxipio_iot;
bus_space_handle_t	 sxipio_ioh;
d152 2
a153 2
	sc->sc_iot = sxipio_iot = aa->aa_iot;
	if (bus_space_map(sxipio_iot, aa->aa_dev->mem[0].addr,
a155 1
	sxipio_ioh = sc->sc_ioh;
@


1.11
log
@Add support for the Allwinner H3 (sun8i-h3).
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.10 2016/08/23 18:16:06 kettenis Exp $	*/
d85 4
a88 5
#define	SXIPIO_CFG(port, pin)	0x00 + ((port) * 0x24) + ((pin) << 2)
#define	SXIPIO_DAT(port)		0x10 + ((port) * 0x24)
/* XXX add support for registers below */
#define	SXIPIO_DRV(port, pin)	0x14 + ((port) * 0x24) + ((pin) << 2)
#define	SXIPIO_PUL(port, pin)	0x1c + ((port) * 0x24) + ((pin) << 2)
d308 1
a308 1
	reg = SXIPIO_CFG(port, bit >> 3);
d329 1
a329 1
	reg = SXIPIO_CFG(port, bit >> 3);
@


1.10
log
@The device trees for sun8i and sun9i no longer include an address in the
name of the /soc node.  Leave it off, as the device path will still match
on nodes that include it.
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.9 2016/08/12 19:55:54 kettenis Exp $	*/
d139 4
@


1.9
log
@Hook up sxipio(4) to the generic gpio code.
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.8 2016/08/12 16:02:31 kettenis Exp $	*/
d161 1
a161 1
	node = OF_finddevice("/soc@@01c00000/pinctrl@@01c20800");
@


1.8
log
@Hook up sxipio(4) to the generic pinctrl code.  The device binding is pretty
retarded, requiring tables to map text strings to the apropriate numbers.
These tables were generated automatically from data extracted from the
Linux kernel and are kept in a separate file.  This should make it easy
to add support for more SoCs from the same family.

ok deraadt@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.7 2015/05/20 03:49:23 jsg Exp $	*/
d31 1
d77 1
a96 1
int sxipio_pinctrl(uint32_t, void *);
d106 5
d162 8
a169 7
	if (node != -1) {
		for (i = 0; i < nitems(sxipio_pins); i++) {
			if (OF_is_compatible(node, sxipio_pins[i].compat)) {
				sc->sc_pins = sxipio_pins[i].pins;
				sc->sc_npins = sxipio_pins[i].npins;
				break;
			}
d171 4
d176 6
a181 3
		if (sc->sc_pins)
			pinctrl_register(node, sxipio_pinctrl, sc);
	}
d490 59
@


1.7
log
@Remove cubieboard specific gpio led setting.
From Artturi Alm in bitrig.
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.6 2015/05/04 03:59:42 jsg Exp $	*/
d24 1
d30 2
a53 1

d74 3
d95 1
d109 27
d141 1
d155 14
d171 1
a171 1
	printf("\n");
d403 73
@


1.6
log
@Fix some misuse of the | operator.  In particular | has higher
precedence than ?:
ok guenther@@ krw@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.5 2013/11/06 19:03:07 syl Exp $	*/
a119 4
	sxipio_setcfg(SXIPIO_LED_GREEN, SXIPIO_OUTPUT);
	sxipio_setcfg(SXIPIO_LED_BLUE, SXIPIO_OUTPUT);
	sxipio_setpin(SXIPIO_LED_GREEN);
	sxipio_setpin(SXIPIO_LED_BLUE);
@


1.5
log
@After factorizing armv7_machdep code here is an effort to factorize all
the code present in omap/omap.c imx/imx.c and sunxi/sunxi.c

All this code looks quite the same, so we move it in a generic armv7/armv7.c

This is a step closer to only one kernel for all armv7 boards.

ok patrick@@, rapha@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.4 2013/11/03 14:08:56 rapha Exp $	*/
d207 1
a207 1
		    cfg ? GPIO_PIN_OUTPUT : GPIO_PIN_INPUT;
@


1.4
log
@Include "gpio.h"

ok jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.3 2013/10/31 17:15:19 jasper Exp $	*/
d30 2
a31 1
#include <armv7/sunxi/sunxivar.h>
d107 1
a107 1
	struct sxi_attach_args *sxi = args;
d111 3
a113 3
	sc->sc_iot = sxipio_iot = sxi->sxi_iot;
	if (bus_space_map(sxipio_iot, sxi->sxi_dev->mem[0].addr,
	    sxi->sxi_dev->mem[0].size, 0, &sc->sc_ioh))
d119 1
a119 1
	sc->sc_irq = sxi->sxi_dev->irq[0];
@


1.3
log
@add proper guard around gpiobus_print() to allow RAMDISK-SUNXI to compile

ok aalm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.2 2013/10/23 18:01:52 jasper Exp $	*/
d32 2
@


1.2
log
@rename some defines as well
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.1 2013/10/23 17:08:48 jasper Exp $	*/
d222 1
d224 1
@


1.1
log
@rename 'allwinner' to 'sunxi' to actually match the SoC name instead of using
the vendor to follow our naming convention.

ok aalm@@ patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sxipio.c,v 1.1 2013/10/22 13:22:19 jasper Exp $	*/
d33 14
a46 14
#define	AWPIO_NPORT		9
#define	AWPIO_PA_NPIN		18
#define	AWPIO_PB_NPIN		24
#define	AWPIO_PC_NPIN		25
#define	AWPIO_PD_NPIN		28
#define	AWPIO_PE_NPIN		12
#define	AWPIO_PF_NPIN		6
#define	AWPIO_PG_NPIN		12
#define	AWPIO_PH_NPIN		28
#define	AWPIO_PI_NPIN		22
#define	AWPIO_NPIN	(AWPIO_PA_NPIN + AWPIO_PB_NPIN + AWPIO_PC_NPIN + \
	AWPIO_PD_NPIN + AWPIO_PE_NPIN + AWPIO_PF_NPIN + AWPIO_PG_NPIN + \
	AWPIO_PH_NPIN + AWPIO_PI_NPIN)
#define	AWPIO_PS_NPIN		84 /* for DRAM controller */
d69 2
a70 2
	struct gpio_chipset_tag	 sc_gpio_tag[AWPIO_NPORT];
	gpio_pin_t		 sc_gpio_pins[AWPIO_NPORT][32];
d75 2
a76 2
#define	AWPIO_CFG(port, pin)	0x00 + ((port) * 0x24) + ((pin) << 2)
#define	AWPIO_DAT(port)		0x10 + ((port) * 0x24)
d78 6
a83 6
#define	AWPIO_DRV(port, pin)	0x14 + ((port) * 0x24) + ((pin) << 2)
#define	AWPIO_PUL(port, pin)	0x1c + ((port) * 0x24) + ((pin) << 2)
#define	AWPIO_INT_CFG0(port)	0x0200 + ((port) * 0x04)
#define	AWPIO_INT_CTL		0x0210
#define	AWPIO_INT_STA		0x0214
#define	AWPIO_INT_DEB		0x0218 /* debounce register */
d117 4
a120 4
	sxipio_setcfg(AWPIO_LED_GREEN, AWPIO_OUTPUT);
	sxipio_setcfg(AWPIO_LED_BLUE, AWPIO_OUTPUT);
	sxipio_setpin(AWPIO_LED_GREEN);
	sxipio_setpin(AWPIO_LED_BLUE);
d161 1
a161 1
		sxipio_setcfg((*(uint32_t *)portno * 32) + pin, AWPIO_OUTPUT);
d163 1
a163 1
		sxipio_setcfg((*(uint32_t *)portno * 32) + pin, AWPIO_INPUT);
d167 1
a167 1
static const uint32_t sxipio_ports[AWPIO_NPORT] = {
d171 10
a180 10
static const int sxipio_last_pin[AWPIO_NPORT] = {
	AWPIO_PA_NPIN,
	AWPIO_PB_NPIN,
	AWPIO_PC_NPIN,
	AWPIO_PD_NPIN,
	AWPIO_PE_NPIN,
	AWPIO_PF_NPIN,
	AWPIO_PG_NPIN,
	AWPIO_PH_NPIN,
	AWPIO_PI_NPIN
d225 1
a225 1
	if (++port < AWPIO_NPORT)
d242 1
a242 1
	reg = AWPIO_CFG(port, bit >> 3);
d247 1
a247 1
	data = AWREAD4(sc, reg);
d263 1
a263 1
	reg = AWPIO_CFG(port, bit >> 3);
d270 1
a270 1
	AWCMS4(sc, reg, cmask, mask);
d284 1
a284 1
	reg = AWPIO_DAT(port);
d289 1
a289 1
	data = AWREAD4(sc, reg);
d305 1
a305 1
	reg = AWPIO_DAT(port);
d310 1
a310 1
	AWSET4(sc, reg, mask);
d324 1
a324 1
	reg = AWPIO_DAT(port);
d329 1
a329 1
	AWCLR4(sc, reg, mask);
d343 1
a343 1
	reg = AWPIO_DAT(port);
d348 2
a349 2
	data = AWREAD4(sc, reg);
	AWWRITE4(sc, reg, data ^ mask);
@

