head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5;
locks; strict;
comment	@ * @;


1.12
date	2017.01.21.08.26.49;	author patrick;	state Exp;
branches;
next	1.11;
commitid	dvP7gLmLqGu2JY3W;

1.11
date	2016.08.22.11.24.45;	author kettenis;	state Exp;
branches;
next	1.10;
commitid	6VAtlGMceNHTMYlQ;

1.10
date	2016.08.15.09.16.26;	author kettenis;	state Exp;
branches;
next	1.9;
commitid	c6u2SzePQ3IsWdqI;

1.9
date	2016.08.05.19.00.25;	author kettenis;	state Exp;
branches;
next	1.8;
commitid	PWnrMbYWs67oDQuR;

1.8
date	2015.01.22.14.33.01;	author krw;	state Exp;
branches;
next	1.7;
commitid	zVCYt6mjbluLi3jT;

1.7
date	2014.12.03.04.33.06;	author jsg;	state Exp;
branches;
next	1.6;
commitid	i5Lgbixkn1sRpeFj;

1.6
date	2014.04.14.04.42.22;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2013.11.06.19.03.07;	author syl;	state Exp;
branches;
next	1.4;

1.4
date	2013.11.01.20.20.08;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.30.20.12.06;	author syl;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.23.18.01.52;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.23.17.08.48;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Move Allwinner drivers that will soon be used by OpenBSD/arm64
to the new MI FDT driver directory.

"go ahead" kettenis@@
@
text
@/*	$OpenBSD: sxiahci.c,v 1.11 2016/08/22 11:24:45 kettenis Exp $	*/
/*
 * Copyright (c) 2013 Patrick Wildt <patrick@@blueri.se>
 * Copyright (c) 2013,2014 Artturi Alm
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/queue.h>

#include <machine/bus.h>
#include <machine/fdt.h>

#include <dev/ic/ahcireg.h>
#include <dev/ic/ahcivar.h>

#include <armv7/armv7/armv7var.h>
#include <dev/fdt/sunxireg.h>

#include <dev/ofw/openfirm.h>
#include <dev/ofw/ofw_clock.h>
#include <dev/ofw/ofw_regulator.h>
#include <dev/ofw/fdt.h>

#define	SXIAHCI_CAP	0x0000
#define	SXIAHCI_GHC	0x0004
#define	SXIAHCI_PI	0x000c
#define	SXIAHCI_PHYCS0	0x00c0
#define	SXIAHCI_PHYCS1	0x00c4
#define	SXIAHCI_PHYCS2	0x00c8
#define	SXIAHCI_TIMER1MS	0x00e0
#define	SXIAHCI_RWC	0x00fc
#define	SXIAHCI_TIMEOUT	0x100000
#define SXIAHCI_PWRPIN	40

#define SXIAHCI_PREG_DMA	0x70
#define  SXIAHCI_PREG_DMA_MASK	(0xff<<8)
#define  SXIAHCI_PREG_DMA_INIT	(0x44<<8)

int	sxiahci_match(struct device *, void *, void *);
void	sxiahci_attach(struct device *, struct device *, void *);
int	sxiahci_detach(struct device *, int);
int	sxiahci_activate(struct device *, int);
int	sxiahci_port_start(struct ahci_port *, int);

extern int ahci_intr(void *);
extern u_int32_t ahci_read(struct ahci_softc *, bus_size_t);
extern void ahci_write(struct ahci_softc *, bus_size_t, u_int32_t);
extern u_int32_t ahci_pread(struct ahci_port *, bus_size_t);
extern void ahci_pwrite(struct ahci_port *, bus_size_t, u_int32_t);
extern int ahci_default_port_start(struct ahci_port *, int);

struct sxiahci_softc {
	struct ahci_softc	sc;

};

struct cfattach sxiahci_ca = {
	sizeof(struct sxiahci_softc),
	sxiahci_match,
	sxiahci_attach,
	sxiahci_detach,
	sxiahci_activate
};

struct cfdriver sxiahci_cd = {
	NULL, "sxiahci", DV_DULL
};

int
sxiahci_match(struct device *parent, void *match, void *aux)
{
	struct fdt_attach_args *faa = aux;

	return OF_is_compatible(faa->fa_node, "allwinner,sun4i-a10-ahci");
}

void
sxiahci_attach(struct device *parent, struct device *self, void *aux)
{
	struct sxiahci_softc *sxisc = (struct sxiahci_softc *)self;
	struct ahci_softc *sc = &sxisc->sc;
	struct fdt_attach_args *faa = aux;
	uint32_t target_supply;
	uint32_t timo;

	if (faa->fa_nreg < 1)
		return;

	sc->sc_iot = faa->fa_iot;
	sc->sc_ios = faa->fa_reg[0].size;
	sc->sc_dmat = faa->fa_dmat;

	if (bus_space_map(sc->sc_iot, faa->fa_reg[0].addr,
	    faa->fa_reg[0].size, 0, &sc->sc_ioh))
		panic("sxiahci_attach: bus_space_map failed!");

	/* enable clocks */
	clock_enable_all(faa->fa_node);
	delay(5000);

	/* XXX setup magix */
	SXIWRITE4(sc, SXIAHCI_RWC, 0);
	delay(10);

	SXISET4(sc, SXIAHCI_PHYCS1, 1 << 19);
	delay(10);

	SXICMS4(sc, SXIAHCI_PHYCS0, 7 << 24,
	    1 << 23 | 5 << 24 | 1 << 18);
	delay(10);

	SXICMS4(sc, SXIAHCI_PHYCS1,
	    3 << 16 | 0x1f << 8 | 3 << 6,
	    2 << 16 | 0x06 << 8 | 2 << 6);
	delay(10);

	SXISET4(sc, SXIAHCI_PHYCS1, 1 << 28 | 1 << 15);
	delay(10);

	SXICLR4(sc, SXIAHCI_PHYCS1, 1 << 19);
	delay(10);

	SXICMS4(sc, SXIAHCI_PHYCS0, 0x07 << 20, 0x03 << 20);
	SXICMS4(sc, SXIAHCI_PHYCS2, 0x1f <<  5, 0x19 << 5);
	delay(5000);

	SXISET4(sc, SXIAHCI_PHYCS0, 1 << 19);
	delay(20);

	timo = SXIAHCI_TIMEOUT;
	while ((SXIREAD4(sc, SXIAHCI_PHYCS0) >> 28 & 7) != 2 && --timo)
		delay(10);
	if (!timo) {
		printf(": AHCI phy power up failed.\n");
		goto dismod;
	}

	SXISET4(sc, SXIAHCI_PHYCS2, 1 << 24);

	timo = SXIAHCI_TIMEOUT;
	while ((SXIREAD4(sc, SXIAHCI_PHYCS2) & (1 << 24)) && --timo)
		delay(10);
	if (!timo) {
		printf(": AHCI phy calibration failed.\n");
		goto dismod;
	}

	delay(15000);
	SXIWRITE4(sc, SXIAHCI_RWC, 7);

	/* power up phy */
	target_supply = OF_getpropint(faa->fa_node, "target-supply", 0);
	if (target_supply)
		regulator_enable(target_supply);

	sc->sc_ih = arm_intr_establish_fdt(faa->fa_node, IPL_BIO,
	    ahci_intr, sc, sc->sc_dev.dv_xname);
	if (sc->sc_ih == NULL) {
		printf(": unable to establish interrupt\n");
		goto clrpwr;
	}

	printf(":");

	SXIWRITE4(sc, SXIAHCI_PI, 1);
	SXICLR4(sc, SXIAHCI_CAP, AHCI_REG_CAP_SPM);
	sc->sc_flags |= AHCI_F_NO_PMP;
	sc->sc_port_start = sxiahci_port_start;
	if (ahci_attach(sc) != 0) {
		/* error printed by ahci_attach */
		goto irq;
	}

	return;
irq:
	arm_intr_disestablish(sc->sc_ih);
clrpwr:
	if (target_supply)
		regulator_disable(target_supply);
dismod:
	clock_disable_all(faa->fa_node);
	bus_space_unmap(sc->sc_iot, sc->sc_ioh, sc->sc_ios);
}

int
sxiahci_detach(struct device *self, int flags)
{
	struct sxiahci_softc *sxisc = (struct sxiahci_softc *) self;
	struct ahci_softc *sc = &sxisc->sc;

	ahci_detach(sc, flags);
	bus_space_unmap(sc->sc_iot, sc->sc_ioh, sc->sc_ios);
	return 0;
}

int
sxiahci_activate(struct device *self, int act)
{
	struct sxiahci_softc *sxisc = (struct sxiahci_softc *) self;
	struct ahci_softc *sc = &sxisc->sc;

	return ahci_activate((struct device *)sc, act);
}

int
sxiahci_port_start(struct ahci_port *ap, int fre_only)
{
	uint32_t r;

	/* Setup DMA */
	r = ahci_pread(ap, SXIAHCI_PREG_DMA);
	r &= ~SXIAHCI_PREG_DMA_MASK;
	r |= SXIAHCI_PREG_DMA_INIT; /* XXX if fre_only? */
	ahci_pwrite(ap, SXIAHCI_PREG_DMA, r);

	return (ahci_default_port_start(ap, fre_only));
}
@


1.11
log
@Use the new clock API.
@
text
@d1 1
a1 1
/*	$OpenBSD: sxiahci.c,v 1.10 2016/08/15 09:16:26 kettenis Exp $	*/
d34 1
a34 1
#include <armv7/sunxi/sunxireg.h>
@


1.10
log
@Use the regulator API to supply power to the target.

Tested by Daniel Bolgheroni on a Cubietech Cubieboard2.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sxiahci.c,v 1.9 2016/08/05 19:00:25 kettenis Exp $	*/
a34 1
#include <armv7/sunxi/sxiccmuvar.h>
d37 1
d114 2
a115 2
	/* enable clock */
	sxiccmu_enablemodule(CCMU_AHCI);
d198 1
a198 1
	sxiccmu_disablemodule(CCMU_AHCI);
d225 1
a225 1
	u_int32_t			r;
@


1.9
log
@Switch the sunxi platform over to the new interrupt establish API.  This
involves turning sxiahci(4) into a real driver that dynamically attaches.
ehci(4) now also attaches dynamically.

ok jsg@@, patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sxiahci.c,v 1.8 2015/01/22 14:33:01 krw Exp $	*/
a35 1
#include <armv7/sunxi/sxipiovar.h>
d38 1
d100 1
d169 3
a171 2
	sxipio_setcfg(SXIAHCI_PWRPIN, SXIPIO_OUTPUT);
	sxipio_setpin(SXIAHCI_PWRPIN);
d195 2
a196 1
	sxipio_clrpin(SXIAHCI_PWRPIN);
@


1.8
log
@Replace some obvious '$OpenBSD' and '$OpenBSD:' typos with '$OpenBSD$'.

Pointed out by dickman@@.

ok sthen@@ phessler@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d28 1
d38 3
d56 1
d76 1
a76 1
	NULL,
d83 1
a83 1
	NULL, "ahci", DV_DULL
d86 8
d95 1
a95 1
sxiahci_attach(struct device *parent, struct device *self, void *args)
a96 1
	struct armv7_attach_args *aa = args;
d99 1
d102 6
a107 3
	sc->sc_iot = aa->aa_iot;
	sc->sc_ios = aa->aa_dev->mem[0].size;
	sc->sc_dmat = aa->aa_dmat;
d109 2
a110 2
	if (bus_space_map(sc->sc_iot, aa->aa_dev->mem[0].addr,
	    sc->sc_ios, 0, &sc->sc_ioh))
d171 1
a171 1
	sc->sc_ih = arm_intr_establish(aa->aa_dev->irq[0], IPL_BIO,
d177 2
@


1.7
log
@Turn ahci port start into a callback so sxiahci can do some magic to
setup dma.  Modified version of a patch from Edwin Amsler which was
based on changes made in Bitrig by Artturi Alm.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD	*/
@


1.6
log
@move the hardware structures into ahcireg.h.
@
text
@d4 1
d48 4
d55 1
d60 3
a86 2
	bus_space_tag_t iot;
	bus_space_handle_t ioh;
d89 1
a89 1
	sc->sc_iot = iot = aa->aa_iot;
d94 1
a94 1
	    aa->aa_dev->mem[0].size, 0, &sc->sc_ioh))
a95 1
	ioh = sc->sc_ioh;
d108 2
a109 2
	SXICMS4(sc, SXIAHCI_PHYCS0, 1 << 25,
	    1 << 23 | 1 << 24 | 1 << 18 | 1 << 26);
d113 2
a114 2
	    1 << 16 | 1 << 12 | 1 << 11 | 1 << 8 | 1 << 6,
	    1 << 17 | 1 << 10 | 1 << 9 | 1 << 7);
d123 2
a124 5
	SXICMS4(sc, SXIAHCI_PHYCS0, 1 << 21 | 1 << 20, 1 << 22);
	delay(10);

	SXICMS4(sc, SXIAHCI_PHYCS2, 1 << 7 | 1 << 6,
	    1 << 9 | 1 << 8 | 1 << 5);
d131 1
a131 1
	while ((SXIREAD4(sc, SXIAHCI_PHYCS0) >> 28 & 3) != 2 && --timo)
d164 2
a165 1
	sc->sc_flags |= AHCI_F_NO_PMP; /* XXX enough? */
d199 14
@


1.5
log
@After factorizing armv7_machdep code here is an effort to factorize all
the code present in omap/omap.c imx/imx.c and sunxi/sunxi.c

All this code looks quite the same, so we move it in a generic armv7/armv7.c

This is a step closer to only one kernel for all armv7 boards.

ok patrick@@, rapha@@
@
text
@d28 1
a29 1
#include <dev/ic/ahcireg.h>
@


1.4
log
@when we fail to power up the AHCI phy don't bother trying to make
things work; just fail.

committing on behalf of aalm@@
@
text
@d31 1
a31 1
#include <armv7/sunxi/sunxivar.h>
d75 1
a75 1
	struct sxi_attach_args *sxi = args;
d82 3
a84 3
	sc->sc_iot = iot = sxi->sxi_iot;
	sc->sc_ios = sxi->sxi_dev->mem[0].size;
	sc->sc_dmat = sxi->sxi_dmat;
d86 2
a87 2
	if (bus_space_map(sc->sc_iot, sxi->sxi_dev->mem[0].addr,
	    sxi->sxi_dev->mem[0].size, 0, &sc->sc_ioh))
d111 1
a111 1
	SXISET4(sc, SXIAHCI_PHYCS1, 1 << 28 | 1 << 15); 
d114 1
a114 1
	SXICLR4(sc, SXIAHCI_PHYCS1, 1 << 19); 
d152 1
a152 1
	sc->sc_ih = arm_intr_establish(sxi->sxi_dev->irq[0], IPL_BIO,
@


1.3
log
@Add missing rcsid.

ok patrick@@ jasper@@
@
text
@d130 4
a133 2
	if (!timo)
		printf("sxiahci_attach: AHCI phy power up failed.\n");
d140 4
a143 2
	if (!timo)
		printf("sxiahci_attach: AHCI phy calibration failed.\n");
d156 1
a156 1
		goto unmap;
d170 4
a173 1
unmap:
@


1.2
log
@rename some defines as well
@
text
@d1 1
@


1.1
log
@rename 'allwinner' to 'sunxi' to actually match the SoC name instead of using
the vendor to follow our naming convention.

ok aalm@@ patrick@@
@
text
@d35 10
a44 10
#define	AWAHCI_CAP	0x0000
#define	AWAHCI_GHC	0x0004
#define	AWAHCI_PI	0x000c
#define	AWAHCI_PHYCS0	0x00c0
#define	AWAHCI_PHYCS1	0x00c4
#define	AWAHCI_PHYCS2	0x00c8
#define	AWAHCI_TIMER1MS	0x00e0
#define	AWAHCI_RWC	0x00fc
#define	AWAHCI_TIMEOUT	0x100000
#define AWAHCI_PWRPIN	40
d95 1
a95 1
	AWWRITE4(sc, AWAHCI_RWC, 0);
d98 1
a98 1
	AWSET4(sc, AWAHCI_PHYCS1, 1 << 19);
d101 1
a101 1
	AWCMS4(sc, AWAHCI_PHYCS0, 1 << 25,
d105 1
a105 1
	AWCMS4(sc, AWAHCI_PHYCS1,
d110 1
a110 1
	AWSET4(sc, AWAHCI_PHYCS1, 1 << 28 | 1 << 15); 
d113 1
a113 1
	AWCLR4(sc, AWAHCI_PHYCS1, 1 << 19); 
d116 1
a116 1
	AWCMS4(sc, AWAHCI_PHYCS0, 1 << 21 | 1 << 20, 1 << 22);
d119 1
a119 1
	AWCMS4(sc, AWAHCI_PHYCS2, 1 << 7 | 1 << 6,
d123 1
a123 1
	AWSET4(sc, AWAHCI_PHYCS0, 1 << 19);
d126 2
a127 2
	timo = AWAHCI_TIMEOUT;
	while ((AWREAD4(sc, AWAHCI_PHYCS0) >> 28 & 3) != 2 && --timo)
d132 1
a132 1
	AWSET4(sc, AWAHCI_PHYCS2, 1 << 24);
d134 2
a135 2
	timo = AWAHCI_TIMEOUT;
	while ((AWREAD4(sc, AWAHCI_PHYCS2) & (1 << 24)) && --timo)
d141 1
a141 1
	AWWRITE4(sc, AWAHCI_RWC, 7);
d144 2
a145 2
	sxipio_setcfg(AWAHCI_PWRPIN, AWPIO_OUTPUT);
	sxipio_setpin(AWAHCI_PWRPIN);
d154 2
a155 2
	AWWRITE4(sc, AWAHCI_PI, 1);
	AWCLR4(sc, AWAHCI_CAP, AHCI_REG_CAP_SPM);
@

