head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2013.12.11.12.27.38;	author naddy;	state dead;
branches;
next	1.3;

1.3
date	2013.11.06.19.03.07;	author syl;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.23.18.01.52;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.23.17.08.48;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove empty files; ok syl@@
@
text
@@


1.3
log
@After factorizing armv7_machdep code here is an effort to factorize all
the code present in omap/omap.c imx/imx.c and sunxi/sunxi.c

All this code looks quite the same, so we move it in a generic armv7/armv7.c

This is a step closer to only one kernel for all armv7 boards.

ok patrick@@, rapha@@
@
text
@@


1.2
log
@rename some defines as well
@
text
@a0 74
/*	$OpenBSD: sunxivar.h,v 1.1 2013/10/23 17:08:48 jasper Exp $	*/
/*
 * Copyright (c) 2005,2008 Dale Rahn <drahn@@drahn.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <machine/bus.h>


#define SXIREAD1(sc, reg)						\
	(bus_space_read_1((sc)->sc_iot, (sc)->sc_ioh, (reg)))
#define SXIWRITE1(sc, reg, val)						\
	bus_space_write_1((sc)->sc_iot, (sc)->sc_ioh, (reg), (val))
#define SXISET1(sc, reg, bits)						\
	SXIWRITE1((sc), (reg), SXIREAD1((sc), (reg)) | (bits))
#define SXICLR1(sc, reg, bits)						\
	SXIWRITE1((sc), (reg), SXIREAD1((sc), (reg)) & ~(bits))
#define	SXICMS1(sc, reg, mask, bits)					\
	SXIWRITE1((sc), (reg), (SXIREAD1((sc), (reg)) & ~(mask)) | (bits))

#define SXIREAD4(sc, reg)						\
	(bus_space_read_4((sc)->sc_iot, (sc)->sc_ioh, (reg)))
#define SXIWRITE4(sc, reg, val)						\
	bus_space_write_4((sc)->sc_iot, (sc)->sc_ioh, (reg), (val))
#define SXISET4(sc, reg, bits)						\
	SXIWRITE4((sc), (reg), SXIREAD4((sc), (reg)) | (bits))
#define SXICLR4(sc, reg, bits)						\
	SXIWRITE4((sc), (reg), SXIREAD4((sc), (reg)) & ~(bits))
#define	SXICMS4(sc, reg, mask, bits)					\
	SXIWRITE4((sc), (reg), (SXIREAD4((sc), (reg)) & ~(mask)) | (bits))


/* Physical memory range for on-chip devices. */
struct sxi_mem {
	bus_addr_t addr;		/* physical start address */
	bus_size_t size;		/* size of range in bytes */
};

#define SXI_DEV_NMEM 4			/* max number of memory ranges */
#define SXI_DEV_NIRQ 4			/* max number of IRQs per device */

/* Descriptor for all on-chip devices. */
struct sxi_dev {
	char *name;			/* driver name or made up name */
	int unit;			/* driver instance number or -1 */
	struct sxi_mem mem[SXI_DEV_NMEM]; /* memory ranges */
	int irq[SXI_DEV_NIRQ];		/* IRQ number(s) */
};

/* Passed as third arg to attach functions. */
struct sxi_attach_args {
	struct sxi_dev *sxi_dev;
	bus_space_tag_t	sxi_iot;
	bus_dma_tag_t sxi_dmat;
};

void sxi_set_devs(struct sxi_dev *);
struct sxi_dev *sxi_find_dev(const char *, int);

/* board identification - from uboot */
#define BOARD_ID_SUN4I_A10 4104
#define BOARD_ID_SUN7I_A20 4283
extern uint32_t board_id;
@


1.1
log
@rename 'allwinner' to 'sunxi' to actually match the SoC name instead of using
the vendor to follow our naming convention.

ok aalm@@ patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sunxivar.h,v 1.1 2013/10/22 13:22:19 jasper Exp $	*/
d21 1
a21 1
#define AWREAD1(sc, reg)						\
d23 1
a23 1
#define AWWRITE1(sc, reg, val)						\
d25 6
a30 6
#define AWSET1(sc, reg, bits)						\
	AWWRITE1((sc), (reg), AWREAD1((sc), (reg)) | (bits))
#define AWCLR1(sc, reg, bits)						\
	AWWRITE1((sc), (reg), AWREAD1((sc), (reg)) & ~(bits))
#define	AWCMS1(sc, reg, mask, bits)					\
	AWWRITE1((sc), (reg), (AWREAD1((sc), (reg)) & ~(mask)) | (bits))
d32 1
a32 1
#define AWREAD4(sc, reg)						\
d34 1
a34 1
#define AWWRITE4(sc, reg, val)						\
d36 6
a41 6
#define AWSET4(sc, reg, bits)						\
	AWWRITE4((sc), (reg), AWREAD4((sc), (reg)) | (bits))
#define AWCLR4(sc, reg, bits)						\
	AWWRITE4((sc), (reg), AWREAD4((sc), (reg)) & ~(bits))
#define	AWCMS4(sc, reg, mask, bits)					\
	AWWRITE4((sc), (reg), (AWREAD4((sc), (reg)) & ~(mask)) | (bits))
d50 2
a51 2
#define AW_DEV_NMEM 4			/* max number of memory ranges */
#define AW_DEV_NIRQ 4			/* max number of IRQs per device */
d57 2
a58 2
	struct sxi_mem mem[AW_DEV_NMEM]; /* memory ranges */
	int irq[AW_DEV_NIRQ];		/* IRQ number(s) */
@

