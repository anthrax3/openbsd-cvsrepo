head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.12
date	2017.01.21.08.26.49;	author patrick;	state Exp;
branches;
next	1.11;
commitid	dvP7gLmLqGu2JY3W;

1.11
date	2016.10.08.11.21.41;	author kettenis;	state Exp;
branches;
next	1.10;
commitid	8SMEhzavNCEgvTtL;

1.10
date	2016.09.04.11.56.59;	author mglocker;	state Exp;
branches;
next	1.9;
commitid	2trGbDydGkJmwTwp;

1.9
date	2016.08.27.14.13.14;	author kettenis;	state Exp;
branches;
next	1.8;
commitid	0L9MA4kON3497jX7;

1.8
date	2016.08.05.21.45.37;	author kettenis;	state Exp;
branches;
next	1.7;
commitid	cC1sDGu6YTDVjn44;

1.7
date	2016.02.02.21.40.47;	author jsg;	state Exp;
branches;
next	1.6;
commitid	dTYf5eaBfHyV3ZtL;

1.6
date	2014.12.13.00.49.20;	author jsg;	state Exp;
branches;
next	1.5;
commitid	C8Yy97ca4X43D7xc;

1.5
date	2014.12.10.12.27.56;	author mikeb;	state Exp;
branches;
next	1.4;
commitid	v6PAeA18rydwc5Vx;

1.4
date	2014.11.01.07.08.43;	author jsg;	state Exp;
branches;
next	1.3;
commitid	Ipx6m0KXI8Srntav;

1.3
date	2013.11.06.19.03.07;	author syl;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.23.18.01.52;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.23.17.08.48;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Move Allwinner drivers that will soon be used by OpenBSD/arm64
to the new MI FDT driver directory.

"go ahead" kettenis@@
@
text
@/* $OpenBSD: sxidog.c,v 1.11 2016/10/08 11:21:41 kettenis Exp $ */
/*
 * Copyright (c) 2007,2009 Dale Rahn <drahn@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/bus.h>
#include <machine/fdt.h>

#include <armv7/armv7/armv7_machdep.h>
#include <dev/fdt/sunxireg.h>

#include <dev/ofw/openfirm.h>
#include <dev/ofw/fdt.h>

/* Allwinner A10 registers */
#define WDOG_CTRL_REG		0x00
#define  WDOG_KEY		(0x0a57 << 1)
#define  WDOG_RSTART		0x01
#define WDOG_MODE_REG		0x04
#define  WDOG_EN		(1 << 0)
#define  WDOG_RST_EN		(1 << 1) /* system reset */
#define  WDOG_INTV_VALUE(x)	((x) << 3)

/* Allwinner A31 registers */
#define WDOG0_CTRL_REG		0x10
#define  WDOG0_KEY		(0x0a57 << 1)
#define  WDOG0_RSTART		(1 << 0)
#define WDOG0_CFG_REG		0x14
#define  WDOG0_RST_EN		(1 << 0)
#define WDOG0_MODE_REG		0x18
#define  WDOG0_EN		(1 << 0)
#define  WDOG0_INTV_VALUE(x)	((x) << 4)

struct sxidog_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
	int			sc_type;
#define SXIDOG_A10		0
#define SXIDOG_A31		1
};

struct sxidog_softc *sxidog_sc = NULL;	/* for sxidog_reset() */

int sxidog_match(struct device *, void *, void *);
void sxidog_attach(struct device *, struct device *, void *);
int sxidog_activate(struct device *, int);
int sxidog_callback(void *, int);
void sxidog_reset(void);

struct cfattach	sxidog_ca = {
	sizeof (struct sxidog_softc), sxidog_match, sxidog_attach,
	NULL, sxidog_activate
};

struct cfdriver sxidog_cd = {
	NULL, "sxidog", DV_DULL
};

int
sxidog_match(struct device *parent, void *match, void *aux)
{
	struct fdt_attach_args *faa = aux;

	return (OF_is_compatible(faa->fa_node, "allwinner,sun4i-a10-wdt") ||
	    OF_is_compatible(faa->fa_node, "allwinner,sun6i-a31-wdt"));
}

void
sxidog_attach(struct device *parent, struct device *self, void *aux)
{
	struct sxidog_softc *sc = (struct sxidog_softc *)self;
	struct fdt_attach_args *faa = aux;

	if (faa->fa_nreg < 1)
		return;

	sc->sc_iot = faa->fa_iot;
	if (bus_space_map(sc->sc_iot, faa->fa_reg[0].addr,
	    faa->fa_reg[0].size, 0, &sc->sc_ioh))
		panic("sxidog_attach: bus_space_map failed!");

	if (OF_is_compatible(faa->fa_node, "allwinner,sun6i-a31-wdt")) {
		SXIWRITE4(sc, WDOG0_CFG_REG, WDOG0_RST_EN);
		sc->sc_type = SXIDOG_A31;
	} else
		sc->sc_type = SXIDOG_A10;

	sxidog_sc = sc;
	cpuresetfn = sxidog_reset;

#ifndef SMALL_KERNEL
	wdog_register(sxidog_callback, sc);
#endif

	printf("\n");
}

int
sxidog_activate(struct device *self, int act)
{
	switch (act) {
	case DVACT_POWERDOWN:
#ifndef SMALL_KERNEL
		wdog_shutdown(self);
#endif
		break;
	}

	return (0);
}

int
sxidog_callback(void *arg, int period)
{
	struct sxidog_softc *sc = (struct sxidog_softc *)arg;
	int enable;

	if (period > 16)
		period = 16;
	else if (period < 0)
		period = 0;

	/* Convert to register encoding. */
	if (period > 6)
		period = 6 + (period - 5) / 2;

	switch (sc->sc_type) {
	case SXIDOG_A10:
		enable = (period > 0) ? WDOG_RST_EN : 0;
		SXIWRITE4(sc, WDOG_MODE_REG,
		    enable | WDOG_EN | WDOG_INTV_VALUE(period));
		SXIWRITE4(sc, WDOG_CTRL_REG, WDOG_KEY | WDOG_RSTART);
		break;
	case SXIDOG_A31:
		enable = (period > 0) ? WDOG0_EN : 0;
		SXIWRITE4(sc, WDOG0_MODE_REG,
		    enable | WDOG0_INTV_VALUE(period));
		SXIWRITE4(sc, WDOG0_CTRL_REG, WDOG0_KEY | WDOG0_RSTART);
		break;
	}

	/* Convert back to seconds. */
	if (period > 6)
		period = 6 + (period - 6) * 2;

	return period;
}

void
sxidog_reset(void)
{
	if (sxidog_sc == NULL)
		return;

	sxidog_callback(sxidog_sc, 1);
	delay(1500000);
}
@


1.11
log
@Make sxidog(4) set cpuresetfn, and cut some dead wood from the platform code.
@
text
@d1 1
a1 1
/* $OpenBSD: sxidog.c,v 1.10 2016/09/04 11:56:59 mglocker Exp $ */
d26 1
a26 1
#include <armv7/sunxi/sunxireg.h>
@


1.10
log
@For the allwinner,sun4i-a10-wdt disable/enable the reset-bit instead of
the enable-bit.  Fixes system reboot ('reboot failed; spinning') seen on
the allwinner,sun5i-r8.

Suggested and ok kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: sxidog.c,v 1.9 2016/08/27 14:13:14 kettenis Exp $ */
a19 2
#include <sys/queue.h>
#include <sys/malloc.h>
a20 3
#include <sys/evcount.h>
#include <sys/socket.h>
#include <sys/timeout.h>
a21 1
#include <machine/intr.h>
d25 1
a26 1
#include <armv7/armv7/armv7var.h>
d106 1
@


1.9
log
@Add support for the watchdog timer found on A31 and later SoCs, which has a
slightly different register layout.  Also fix the watchdog such that it
actually disables itself when you set the period to 0 and actually gives you
a period that is close to what you asked for.
@
text
@d1 1
a1 1
/* $OpenBSD: sxidog.c,v 1.8 2016/08/05 21:45:37 kettenis Exp $ */
d151 1
a151 1
		enable = (period > 0) ? WDOG_EN : 0;
d153 1
a153 1
		    enable | WDOG_RST_EN | WDOG_INTV_VALUE(period));
@


1.8
log
@Dynamically attach sxidog(4).
@
text
@d1 1
a1 1
/* $OpenBSD: sxidog.c,v 1.7 2016/02/02 21:40:47 jsg Exp $ */
d37 18
a54 23
/* registers */
#define WDOG_CR			0x00
#define WDOG_MR			0x04

#define WDOG_CTRL_KEY		(0x0a57 << 1)
#define WDOG_RESTART		0x01
/*
 * 0x00 0,5sec
 * 0x01 1sec
 * 0x02 2sec
 * 0x03 3sec
 * 0x04 4sec
 * 0x05 5sec
 * 0x06 6sec
 * 0x07 8sec
 * 0x08 10sec
 * 0x09 12sec
 * 0x0a 14sec
 * 0x0b 16sec
 */
#define WDOG_INTV_VALUE(x)	((x) << 3)
#define WDOG_RST_EN		(1 << 1) /* system reset */
#define WDOG_EN			(1 << 0)
d60 3
a70 3
#if 0
int sxidog_intr(void *);
#endif
d87 2
a88 1
	return OF_is_compatible(faa->fa_node, "allwinner,sun4i-a10-wdt");
d105 6
a110 8
#ifdef DEBUG
	printf(": ctrl %x mode %x\n", SXIREAD4(sc, WDOG_CR),
	    SXIREAD4(sc, WDOG_MR));
#endif
#if 0
	(void)intc_intr_establish_fdt(faa->fa_node, IPL_HIGH, /* XXX */
	    sxidog_intr, sc, sc->sc_dev.dv_xname);
#endif
d138 1
d140 2
a141 2
	if (period > 0x0b)
		period = 0x0b;
a143 9
	/*
	 * clearing bits in mode reg has no effect according
	 * to the user manual, so just set new timeout and enable it.
	 * XXX
	 */
	SXIWRITE4(sc, WDOG_MR, WDOG_EN | WDOG_RST_EN |
	    WDOG_INTV_VALUE(period));
	/* reset */
	SXIWRITE4(sc, WDOG_CR, WDOG_CTRL_KEY | WDOG_RESTART);
d145 18
a162 2
	return period;
}
d164 3
a166 5
#if 0
int
sxidog_intr(void *arg)
{
	struct sxidog_softc *sc = (struct sxidog_softc *)arg;
d168 1
a168 3
	/* XXX */
	SXIWRITE4(sc, WDOG_CR, WDOG_CTRL_KEY | WDOG_RESTART);
	return 1;
a169 1
#endif
d177 2
a178 4
	SXIWRITE4(sxidog_sc, WDOG_MR, WDOG_INTV_VALUE(0x00) |
	    WDOG_RST_EN | WDOG_EN);
	SXIWRITE4(sxidog_sc, WDOG_CR, WDOG_CTRL_KEY | WDOG_RESTART);
	delay(900000);
@


1.7
log
@give sxidog it's own mapping as well so it wont't require sxitimer
from Artturi Alm
@
text
@d1 1
a1 1
/* $OpenBSD: sxidog.c,v 1.6 2014/12/13 00:49:20 jsg Exp $ */
d29 1
d34 3
d69 1
d79 1
a79 1
	sizeof (struct sxidog_softc), NULL, sxidog_attach,
d87 8
d96 1
a96 1
sxidog_attach(struct device *parent, struct device *self, void *args)
a97 1
	struct armv7_attach_args *aa = args;
d99 4
d104 3
a106 3
	sc->sc_iot = aa->aa_iot;
	if (bus_space_map(sc->sc_iot, aa->aa_dev->mem[0].addr,
	    aa->aa_dev->mem[0].size, 0, &sc->sc_ioh))
d114 1
a114 1
	(void)intc_intr_establish(aa->aa_dev->irq[0], IPL_HIGH, /* XXX */
@


1.6
log
@add a sxidog_activate() function so the kernel will link again
after the changes made in rev 1.5
@
text
@d1 1
a1 1
/* $OpenBSD: sxidog.c,v 1.5 2014/12/10 12:27:56 mikeb Exp $ */
a32 3
/* XXX other way around than bus_space_subregion? */
extern bus_space_handle_t sxitimer_ioh;

d89 3
a91 3
	if (bus_space_subregion(sc->sc_iot, sxitimer_ioh,
	    aa->aa_dev->mem[0].addr, aa->aa_dev->mem[0].size, &sc->sc_ioh))
		panic("sxidog_attach: bus_space_subregion failed!");
@


1.5
log
@Convert watchdog(4) devices to use autoconf(9) framework.

ok deraadt, tests on glxpcib and ok mpi
@
text
@d1 1
a1 1
/* $OpenBSD: sxidog.c,v 1.4 2014/11/01 07:08:43 jsg Exp $ */
d111 14
@


1.4
log
@Now the armv7 ramdisks are compiled with SMALL_KERNEL
the omap and sunxi ramdisks won't build because they
call wdog_register() and kern_watchdog.c is !small_kernel
in config.

Leaving the watchdog devices out of the ramdisks won't
work either as armv7_machdep.c uses platform_watchdog_reset()
to reboot.

Deal with this by only calling wdog_register() when
not compiled with SMALL_KERNEL.
@
text
@d1 1
a1 1
/* $OpenBSD: sxidog.c,v 1.3 2013/11/06 19:03:07 syl Exp $ */
d69 1
d77 2
a78 1
	sizeof (struct sxidog_softc), NULL, sxidog_attach
@


1.3
log
@After factorizing armv7_machdep code here is an effort to factorize all
the code present in omap/omap.c imx/imx.c and sunxi/sunxi.c

All this code looks quite the same, so we move it in a generic armv7/armv7.c

This is a step closer to only one kernel for all armv7 boards.

ok patrick@@, rapha@@
@
text
@d1 1
a1 1
/* $OpenBSD: sxidog.c,v 1.2 2013/10/23 18:01:52 jasper Exp $ */
d104 1
d106 1
@


1.2
log
@rename some defines as well
@
text
@d1 1
a1 1
/* $OpenBSD: sxidog.c,v 1.1 2013/10/23 17:08:48 jasper Exp $ */
d30 2
a31 1
#include <armv7/sunxi/sunxivar.h>
d86 1
a86 1
	struct sxi_attach_args *sxi = args;
d89 1
a89 1
	sc->sc_iot = sxi->sxi_iot;
d91 1
a91 1
	    sxi->sxi_dev->mem[0].addr, sxi->sxi_dev->mem[0].size, &sc->sc_ioh))
d99 1
a99 1
	(void)intc_intr_establish(sxi->sxi_dev->irq[0], IPL_HIGH, /* XXX */
d121 1
a121 1
	 * XXX 
d127 1
a127 1
	
@


1.1
log
@rename 'allwinner' to 'sunxi' to actually match the SoC name instead of using
the vendor to follow our naming convention.

ok aalm@@ patrick@@
@
text
@d1 1
a1 1
/* $OpenBSD: sxidog.c,v 1.1 2013/10/22 13:22:19 jasper Exp $ */
d94 2
a95 2
	printf(": ctrl %x mode %x\n", AWREAD4(sc, WDOG_CR),
	    AWREAD4(sc, WDOG_MR));
d122 1
a122 1
	AWWRITE4(sc, WDOG_MR, WDOG_EN | WDOG_RST_EN |
d125 1
a125 1
	AWWRITE4(sc, WDOG_CR, WDOG_CTRL_KEY | WDOG_RESTART);
d137 1
a137 1
	AWWRITE4(sc, WDOG_CR, WDOG_CTRL_KEY | WDOG_RESTART);
d148 1
a148 1
	AWWRITE4(sxidog_sc, WDOG_MR, WDOG_INTV_VALUE(0x00) |
d150 1
a150 1
	AWWRITE4(sxidog_sc, WDOG_CR, WDOG_CTRL_KEY | WDOG_RESTART);
@

