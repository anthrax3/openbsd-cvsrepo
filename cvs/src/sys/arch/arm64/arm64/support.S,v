head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.2
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5;
locks; strict;
comment	@# @;


1.6
date	2017.08.09.03.06.55;	author jsg;	state Exp;
branches;
next	1.5;
commitid	4TCmiaCE7k0sNuH7;

1.5
date	2017.01.25.10.23.17;	author patrick;	state Exp;
branches;
next	1.4;
commitid	mWN73q8nGl8y1JYJ;

1.4
date	2017.01.25.09.43.50;	author patrick;	state Exp;
branches;
next	1.3;
commitid	D86tiflF2KAYld9d;

1.3
date	2017.01.24.10.23.11;	author patrick;	state Exp;
branches;
next	1.2;
commitid	vw7A0FwtEfK5DHs2;

1.2
date	2016.12.18.14.40.25;	author patrick;	state Exp;
branches;
next	1.1;
commitid	Pj557aWhjAUQGvhw;

1.1
date	2016.12.17.23.38.33;	author patrick;	state Exp;
branches;
next	;
commitid	uicSPzuCfsvjSNQ4;


desc
@@


1.6
log
@remove duplicated PAGE macros and drop type suffix
ok kettenis@@
@
text
@/* $OpenBSD: support.S,v 1.5 2017/01/25 10:23:17 patrick Exp $ */
/*-
 * Copyright (c) 2014 Andrew Turner
 * Copyright (c) 2014-2015 The FreeBSD Foundation
 * All rights reserved.
 *
 * Portions of this software were developed by Andrew Turner
 * under sponsorship from the FreeBSD Foundation
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <machine/asm.h>
#if 0
__FBSDID("$FreeBSD: head/sys/arm64/arm64/support.S 297615 2016-04-06 14:08:10Z andrew $");
#endif

#include <machine/setjmp.h>
#include <machine/param.h>
#include <machine/vmparam.h>

#include "assym.h"

#ifdef DDB
ENTRY(setjmp)
	/* Store the stack pointer */
	mov	x8, sp
	str	x8, [x0], #8

	/* Store the general purpose registers and lr */
	stp	x19, x20, [x0], #16
	stp	x21, x22, [x0], #16
	stp	x23, x24, [x0], #16
	stp	x25, x26, [x0], #16
	stp	x27, x28, [x0], #16
	stp	x29, lr, [x0], #16

	/* Return zero */
	mov	x0, #0
	ret
END(setjmp)

ENTRY(longjmp)
	/* Restore the stack pointer */
	ldr	x8, [x0], #8
	mov	sp, x8

	/* Restore the general purpose registers and lr */
	ldp	x19, x20, [x0], #16
	ldp	x21, x22, [x0], #16
	ldp	x23, x24, [x0], #16
	ldp	x25, x26, [x0], #16
	ldp	x27, x28, [x0], #16
	ldp	x29, lr, [x0], #16

	/* Return nonzero */
	mov	x0, #1
	ret
END(longjmp)
#endif

/*
 * pagezero, simple implementation
 */
ENTRY(pagezero_simple)
	add	x1, x0, #PAGE_SIZE

1:
	stp	xzr, xzr, [x0], #0x10
	stp	xzr, xzr, [x0], #0x10
	stp	xzr, xzr, [x0], #0x10
	stp	xzr, xzr, [x0], #0x10
	cmp	x0, x1
	b.ne	1b
	ret

END(pagezero_simple)

/*
 * pagezero, cache assisted
 */
ENTRY(pagezero_cache)
	add	x1, x0, #PAGE_SIZE

	ldr	x2, =dczva_line_size
	ldr	x2, [x2]

1:
	dc	zva, x0
	add	x0, x0, x2
	cmp	x0, x1
	b.ne	1b
	ret

END(pagezero_cache)

ENTRY(smc_call)
	smc	#0
	ret

END(smc_call)

ENTRY(hvc_call)
	hvc	#0
	ret

END(hvc_call)
@


1.5
log
@Setjmp should return zero, while longjmp should return nonzero in
kernel.  Since those are only used by ddb, guard them with DDB.
@
text
@d1 1
a1 1
/* $OpenBSD: support.S,v 1.4 2017/01/25 09:43:50 patrick Exp $ */
d39 1
@


1.4
log
@Add assembly helpers for calling the hypervisor and secure monitor.

ok jsg@@
@
text
@d1 1
a1 1
/* $OpenBSD: support.S,v 1.3 2017/01/24 10:23:11 patrick Exp $ */
d43 1
d57 1
a57 1
	/* Return value */
d75 2
a76 2
	/* Load the return value */
	mov	x0, x1
d79 1
@


1.3
log
@Remove the [fs]u{byte,word,swintr} fetch(9) functions that have
been removed years ago.

From miod
@
text
@d1 1
a1 1
/* $OpenBSD: support.S,v 1.2 2016/12/18 14:40:25 patrick Exp $ */
d113 12
@


1.2
log
@Adjust OpenBSD/arm64 files with FreeBSD origin to show the upstream
revision.  While there, update a few of those files.

Prompted by mikeb@@.
@
text
@d1 1
a1 1
/* $OpenBSD: support.S,v 1.1 2016/12/17 23:38:33 patrick Exp $ */
a41 219

/*
 * One of the fu* or su* functions failed, return -1.
 */
ENTRY(fsu_fault)
	SET_FAULT_HANDLER(xzr, x1)	/* Reset the handler function */
fsu_fault_nopcb:
	mov	x0, #-1
	ret
END(fsu_fault)

/*
 * int casueword32(volatile uint32_t *, uint32_t, uint32_t *, uint32_t)
 */
ENTRY(casueword32)
	ldr	x4, =(VM_MAXUSER_ADDRESS-3)
	cmp	x0, x4
	b.cs	fsu_fault_nopcb
	adr	x6, fsu_fault		/* Load the fault handler */
	SET_FAULT_HANDLER(x6, x4)	/* And set it */
1:	ldxr	w4, [x0]		/* Load-exclusive the data */
	cmp	w4, w1			/* Compare */
	b.ne	2f			/* Not equal, exit */
	stxr	w5, w3, [x0]		/* Store the new data */
	cbnz	w5, 1b			/* Retry on failure */
2:	SET_FAULT_HANDLER(xzr, x5)	/* Reset the fault handler */
	str	w4, [x2]		/* Store the read data */
	mov	x0, #0			/* Success */
	ret				/* Return */
END(casueword32)

/*
 * int casueword(volatile u_long *, u_long, u_long *, u_long)
 */
ENTRY(casueword)
	ldr	x4, =(VM_MAXUSER_ADDRESS-7)
	cmp	x0, x4
	b.cs	fsu_fault_nopcb
	adr	x6, fsu_fault		/* Load the fault handler */
	SET_FAULT_HANDLER(x6, x4)	/* And set it */
1:	ldxr	x4, [x0]		/* Load-exclusive the data */
	cmp	x4, x1			/* Compare */
	b.ne	2f			/* Not equal, exit */
	stxr	w5, x3, [x0]		/* Store the new data */
	cbnz	w5, 1b			/* Retry on failure */
2:	SET_FAULT_HANDLER(xzr, x5)	/* Reset the fault handler */
	str	x4, [x2]		/* Store the read data */
	mov	x0, #0			/* Success */
	ret				/* Return */
END(casueword)

/*
 * int fubyte(volatile const void *)
 */
ENTRY(fubyte)
	ldr	x1, =VM_MAXUSER_ADDRESS
	cmp	x0, x1
	b.cs	fsu_fault_nopcb
	adr	x6, fsu_fault		/* Load the fault handler */
	SET_FAULT_HANDLER(x6, x1)	/* And set it */
	ldrb	w0, [x0]		/* Try loading the data */
	SET_FAULT_HANDLER(xzr, x1)	/* Reset the fault handler */
	ret				/* Return */
END(fubyte)

/*
 * int fuword(volatile const void *)
 */
ENTRY(fuword16)
	ldr	x1, =(VM_MAXUSER_ADDRESS-1)
	cmp	x0, x1
	b.cs	fsu_fault_nopcb
	adr	x6, fsu_fault		/* Load the fault handler */
	SET_FAULT_HANDLER(x6, x1)	/* And set it */
	ldrh	w0, [x0]		/* Try loading the data */
	SET_FAULT_HANDLER(xzr, x1)	/* Reset the fault handler */
	ret				/* Return */
END(fuword16)

/*
 * int32_t fueword32(volatile const void *, int32_t *)
 */
ENTRY(fueword32)
	ldr	x2, =(VM_MAXUSER_ADDRESS-3)
	cmp	x0, x2
	b.cs	fsu_fault_nopcb
	adr	x6, fsu_fault		/* Load the fault handler */
	SET_FAULT_HANDLER(x6, x2)	/* And set it */
	ldr	w0, [x0]		/* Try loading the data */
	SET_FAULT_HANDLER(xzr, x2)	/* Reset the fault handler */
	str	w0, [x1]		/* Save the data in kernel space */
	mov	w0, #0			/* Success */
	ret				/* Return */
END(fueword32)

/*
 * long fueword(volatile const void *, int64_t *)
 * int64_t fueword64(volatile const void *, int64_t *)
 */
ENTRY(fueword)
EENTRY(fueword64)
	ldr	x2, =(VM_MAXUSER_ADDRESS-7)
	cmp	x0, x2
	b.cs	fsu_fault_nopcb
	adr	x6, fsu_fault		/* Load the fault handler */
	SET_FAULT_HANDLER(x6, x2)	/* And set it */
	ldr	x0, [x0]		/* Try loading the data */
	SET_FAULT_HANDLER(xzr, x2)	/* Reset the fault handler */
	str	x0, [x1]		/* Save the data in kernel space */
	mov	x0, #0			/* Success */
	ret				/* Return */
EEND(fueword64)
END(fueword)

/*
 * int subyte(volatile void *, int)
 */
ENTRY(subyte)
	ldr	x2, =VM_MAXUSER_ADDRESS
	cmp	x0, x2
	b.cs	fsu_fault_nopcb
	adr	x6, fsu_fault		/* Load the fault handler */
	SET_FAULT_HANDLER(x6, x2)	/* And set it */
	strb	w1, [x0]		/* Try storing the data */
	SET_FAULT_HANDLER(xzr, x2)	/* Reset the fault handler */
	mov	x0, #0			/* Success */
	ret				/* Return */
END(subyte)

/*
 * int suword16(volatile void *, int)
 */
ENTRY(suword16)
	ldr	x2, =(VM_MAXUSER_ADDRESS-1)
	cmp	x0, x2
	b.cs	fsu_fault_nopcb
	adr	x6, fsu_fault		/* Load the fault handler */
	SET_FAULT_HANDLER(x6, x2)	/* And set it */
	strh	w1, [x0]		/* Try storing the data */
	SET_FAULT_HANDLER(xzr, x2)	/* Reset the fault handler */
	mov	x0, #0			/* Success */
	ret				/* Return */
END(suword16)

/*
 * int suword32(volatile void *, int)
 */
ENTRY(suword32)
	ldr	x2, =(VM_MAXUSER_ADDRESS-3)
	cmp	x0, x2
	b.cs	fsu_fault_nopcb
	adr	x6, fsu_fault		/* Load the fault handler */
	SET_FAULT_HANDLER(x6, x2)	/* And set it */
	str	w1, [x0]		/* Try storing the data */
	SET_FAULT_HANDLER(xzr, x2)	/* Reset the fault handler */
	mov	x0, #0			/* Success */
	ret				/* Return */
END(suword32)

/*
 * int suword(volatile void *, long)
 */
ENTRY(suword)
EENTRY(suword64)
	ldr	x2, =(VM_MAXUSER_ADDRESS-7)
	cmp	x0, x2
	b.cs	fsu_fault_nopcb
	adr	x6, fsu_fault		/* Load the fault handler */
	SET_FAULT_HANDLER(x6, x2)	/* And set it */
	str	x1, [x0]		/* Try storing the data */
	SET_FAULT_HANDLER(xzr, x2)	/* Reset the fault handler */
	mov	x0, #0			/* Success */
	ret				/* Return */
EEND(suword64)
END(suword)

/*
 * fuswintr and suswintr are just like fusword and susword except that if
 * the page is not in memory or would cause a trap, then we return an error.
 * The important thing is to prevent sleep() and switch().
 */

/*
 * Special handler so the trap code knows not to sleep.
 */
ENTRY(fsu_intr_fault)
	SET_FAULT_HANDLER(xzr, x1)	/* Reset the handler function */
	mov	x0, #-1
	ret
END(fsu_fault)

/*
 * int fuswintr(void *)
 */
ENTRY(fuswintr)
	ldr	x1, =(VM_MAXUSER_ADDRESS-3)
	cmp	x0, x1
	b.cs	fsu_fault_nopcb
	adr	x6, fsu_intr_fault	/* Load the fault handler */
	SET_FAULT_HANDLER(x6, x1)	/* And set it */
	ldr	w0, [x0]		/* Try loading the data */
	SET_FAULT_HANDLER(xzr, x1)	/* Reset the fault handler */
	ret				/* Return */
END(fuswintr)

/*
 * int suswintr(void *base, int word)
 */
ENTRY(suswintr)
	ldr	x2, =(VM_MAXUSER_ADDRESS-3)
	cmp	x0, x2
	b.cs	fsu_fault_nopcb
	adr	x6, fsu_intr_fault	/* Load the fault handler */
	SET_FAULT_HANDLER(x6, x2)	/* And set it */
	str	w1, [x0]		/* Try storing the data */
	SET_FAULT_HANDLER(xzr, x2)	/* Reset the fault handler */
	mov	x0, #0			/* Success */
	ret				/* Return */
END(suswintr)
@


1.1
log
@Import of OpenBSD/arm64

This commit contains all the kernel files related to the OpenBSD/arm64
port.  It is based on the PowerPC pmap, loongson, arm/armv7 code and
FreeBSD aarch64 code.  Hard work done by Dale Rahn.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d34 3
d39 1
d48 1
d57 3
a66 1
	ldrb	w0, [x0]		/* Try loading the data */
d69 1
d77 3
a86 1
	ldrb	w0, [x0]		/* Try loading the data */
d89 1
d97 3
d111 3
d125 3
d143 3
d160 3
d175 3
d190 3
d206 3
d237 3
d251 3
d265 1
a265 1
	str	x8, [x0]
d297 35
@

