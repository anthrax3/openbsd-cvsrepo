head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3;
locks; strict;
comment	@# @;


1.3
date	2017.02.15.21.39.50;	author patrick;	state Exp;
branches;
next	1.2;
commitid	jMvs3KGGih4qVhtq;

1.2
date	2017.02.15.21.38.09;	author patrick;	state Exp;
branches;
next	1.1;
commitid	WHKj8SsEwNjxpCLG;

1.1
date	2016.12.17.23.38.33;	author patrick;	state Exp;
branches;
next	;
commitid	uicSPzuCfsvjSNQ4;


desc
@@


1.3
log
@whitespace fixes
@
text
@/* $OpenBSD: copystr.S,v 1.2 2017/02/15 21:38:09 patrick Exp $ */
/*
 * Copyright (c) 2015 Dale Rahn <drahn@@dalerahn.com>
 * Copyright (c) 2014 Patrick Wildt <patrick@@blueri.se>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "assym.h"
#include <machine/asm.h>
#include <sys/errno.h>
#include <sys/errno.h>

	.text
	.align	2

/*
 * x0 - from
 * x1 - to
 * x2 - maxlens
 * x3 - lencopied
 * x4 - scratch
 * x5 - hold old onfault
 *
 * Copy string from x0 to x1
 */
ENTRY(copystr)
	mrs	x6, tpidr_el1			// load curcpu
	ldr	x6, [x6, #(CI_CURPCB)]
	ldr	x5, [x6, #(PCB_ONFAULT)]
	adr	x7, .Lcopystrfault
	str	x7, [x6, #(PCB_ONFAULT)]	// set handler

	mov	x8, xzr

1:	ldrb	w4, [x0], 1
	strb	w4, [x1], #1
	sub	x2, x2, #1
	add	x8, x8, #1
	cbz	w4, .Lcopystrsuccess
	cbnz	x2, 1b

	mov	x0, #ENAMETOOLONG
	b	.Lcopystrcleanup

.Lcopystrfault:
	mov	x0, #EFAULT
	b	.Lcopystrcleanup

.Lcopystrsuccess:
	mov	x0, xzr

.Lcopystrcleanup:
	cbz	x3, 2f
	str	x8, [x3]
2:
	str	x5, [x6, #(PCB_ONFAULT)]
	ret

/*
 * x0 - user space address
 * x1 - kernel space address
 * x2 - maxlens
 * x3 - lencopied
 *
 * Copy string from user space to kernel space
 */
ENTRY(copyinstr)
	mrs	x6, tpidr_el1			// load curcpu
	ldr	x6, [x6, #(CI_CURPCB)]
	ldr	x5, [x6, #(PCB_ONFAULT)]
	adr	x7, .Lcopystrfault
	str	x7, [x6, #(PCB_ONFAULT)]	// set handler

	mov	x8, xzr

1:	ldtrb	w4, [x0]
	strb	w4, [x1], #1
	add	x0, x0, #1
	sub	x2, x2, #1
	add	x8, x8, #1
	cbz	w4, .Lcopystrsuccess
	cbnz	x2, 1b

	mov	x0, #ENAMETOOLONG
	b	.Lcopystrcleanup

/*
 * x0 - kernel space address
 * x1 - user space address
 * x2 - maxlens
 * x3 - lencopied
 *
 * Copy string from kernel space to user space
 */
ENTRY(copyoutstr)
	mrs	x6, tpidr_el1			// load curcpu
	ldr	x6, [x6, #(CI_CURPCB)]
	ldr	x5, [x6, #(PCB_ONFAULT)]
	adr	x7, .Lcopystrfault
	str	x7, [x6, #(PCB_ONFAULT)]	// set handler

	mov	x8, xzr

1:	ldrb	w4, [x0], 1
	sttrb	w4, [x1]
	add	x1, x1, #1
	sub	x2, x2, #1
	add	x8, x8, #1
	cbz	w4, .Lcopystrsuccess
	cbnz	x2, 1b

	mov	x0, #ENAMETOOLONG
	b	.Lcopystrcleanup
@


1.2
log
@Implement permission checks in the copy routines.  When they were
initially copied from armv7 no parallel instructions to ldrbt and strbt
were found, so a different permission model based on the addressing was
assumed.  This was incorrect as the AArch64 provides ldtrb and sttrb to
do load/store operations with userland permissions.

From Dale Rahn.
@
text
@d1 1
a1 1
/* $OpenBSD: copystr.S,v 1.1 2016/12/17 23:38:33 patrick Exp $ */
d46 1
a46 1
1:	ldrb 	w4, [x0], 1
d49 1
a49 1
	add     x8, x8, #1
d54 1
a54 1
	b .Lcopystrcleanup
d58 1
a58 1
	b 	.Lcopystrcleanup
@


1.1
log
@Import of OpenBSD/arm64

This commit contains all the kernel files related to the OpenBSD/arm64
port.  It is based on the PowerPC pmap, loongson, arm/armv7 code and
FreeBSD aarch64 code.  Hard work done by Dale Rahn.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d42 1
a42 2
// set handler
	str	x7, [x6, #(PCB_ONFAULT)]
d52 1
a52 1
	
d79 18
a96 2
// XXX verify that x0 is user and x1 is kernel
	b copystr
d107 18
a124 2
// XXX verify that x0 is kernel and x1 is user
	b copystr
@

