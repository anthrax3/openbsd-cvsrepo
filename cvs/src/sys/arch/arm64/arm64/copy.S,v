head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3;
locks; strict;
comment	@# @;


1.3
date	2017.02.15.21.39.50;	author patrick;	state Exp;
branches;
next	1.2;
commitid	jMvs3KGGih4qVhtq;

1.2
date	2017.02.15.21.38.09;	author patrick;	state Exp;
branches;
next	1.1;
commitid	WHKj8SsEwNjxpCLG;

1.1
date	2016.12.17.23.38.33;	author patrick;	state Exp;
branches;
next	;
commitid	uicSPzuCfsvjSNQ4;


desc
@@


1.3
log
@whitespace fixes
@
text
@/* $OpenBSD: copy.S,v 1.2 2017/02/15 21:38:09 patrick Exp $ */
/*
 * Copyright (c) 2015 Dale Rahn <drahn@@dalerahn.com>
 * Copyright (c) 2014 Patrick Wildt <patrick@@blueri.se>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "assym.h"
#include <sys/syscall.h>
#include <machine/asm.h>
#include <sys/errno.h>

	.text
	.align	2

/*
 * x0 = user space address
 * x1 = kernel space address
 * x2 = length
 *
 * Copies bytes from user space to kernel space
 *
 * XXX should this assert that address spaces are correct for each address?
 */
ENTRY(copyin)
	cbnz	x2, 1f
	mov	x0, 0
	ret
1:
	mrs	x3, tpidr_el1			// load cpuinfo
	ldr	x3, [x3, #(CI_CURPCB)]
	ldr	x4, [x3, #(PCB_ONFAULT)]
	adr	x5, .Lcopyfault
	str	x5, [x3, #(PCB_ONFAULT)]	// set handler

// This probably should be optimized
2:	ldtrb	w6, [x0]
	strb	w6, [x1], #1
	add	x0, x0, #1
	sub	x2, x2, #1
	cbnz	x2, 2b

	str	x4, [x3, #(PCB_ONFAULT)]	// clear handler
	mov	x0, xzr
	ret

.Lcopyfault:
	mov	x0, #EFAULT
	ldr	x4, [x3, #(PCB_ONFAULT)]
	ret

/*
 * x0 = kernel space address
 * x1 = user space address
 * x2 = length
 *
 * Copies bytes from kernel space to user space
 *
 * XXX should this assert that address spaces are correct for each address?
 */

ENTRY(copyout)
	cbnz	x2, 1f
	mov	x0, 0
	ret
1:
	mrs	x3, tpidr_el1			// load cpuinfo
	ldr	x3, [x3, #(CI_CURPCB)]
	ldr	x4, [x3, #(PCB_ONFAULT)]
	adr	x5, .Lcopyfault
	str	x5, [x3, #(PCB_ONFAULT)]	// set handler

// This probably should be optimized
2:	ldrb	w6, [x0], #1
	sttrb	w6, [x1]
	add	x1, x1, #1
	sub	x2, x2, #1
	cbnz	x2, 2b

	str	x4, [x3, #(PCB_ONFAULT)]	// clear handler
	mov	x0, xzr
	ret

/*
 * x0 = kernel space source address
 * x1 = kernel space destination address
 * x2 = length
 *
 * Copies bytes from kernel space to kernel space, aborting on page fault
 */

ENTRY(kcopy)
	cbnz	x2, 1f
	mov	x0, 0
	ret
1:
	mrs	x3, tpidr_el1			// load cpuinfo
	ldr	x3, [x3, #(CI_CURPCB)]
	ldr	x4, [x3, #(PCB_ONFAULT)]
	adr	x5, .Lcopyfault
	str	x5, [x3, #(PCB_ONFAULT)]	// set handler

// This probably should be optimized
2:	ldrb	w6, [x0], #1
	strb	w6, [x1], #1
	sub	x2, x2, #1
	cbnz	x2, 2b

	str	x4, [x3, #(PCB_ONFAULT)]	// clear handler
	mov	x0, xzr
	ret
@


1.2
log
@Implement permission checks in the copy routines.  When they were
initially copied from armv7 no parallel instructions to ldrbt and strbt
were found, so a different permission model based on the addressing was
assumed.  This was incorrect as the AArch64 provides ldtrb and sttrb to
do load/store operations with userland permissions.

From Dale Rahn.
@
text
@d1 1
a1 1
/* $OpenBSD: copy.S,v 1.1 2016/12/17 23:38:33 patrick Exp $ */
d48 1
a48 1
2:	ldtrb 	w6, [x0]
d85 1
a85 1
2:	ldrb 	w6, [x0], #1
d115 1
a115 1
2:	ldrb 	w6, [x0], #1
@


1.1
log
@Import of OpenBSD/arm64

This commit contains all the kernel files related to the OpenBSD/arm64
port.  It is based on the PowerPC pmap, loongson, arm/armv7 code and
FreeBSD aarch64 code.  Hard work done by Dale Rahn.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d48 1
a48 1
2:	ldrb 	w6, [x0], #1
d50 1
d86 2
a87 1
	strb	w6, [x1], #1
@

