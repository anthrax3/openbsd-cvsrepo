head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.2
	OPENBSD_6_2_BASE:1.7;
locks; strict;
comment	@ * @;


1.7
date	2017.08.20.04.22.57;	author jsg;	state Exp;
branches;
next	1.6;
commitid	HHXFz9lYPZ3fFREd;

1.6
date	2017.08.09.05.53.11;	author jsg;	state Exp;
branches;
next	1.5;
commitid	to8hWPhbWEY6e67h;

1.5
date	2017.05.06.11.27.34;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	avm7B3NQox2w872u;

1.4
date	2017.05.06.06.43.02;	author jsg;	state Exp;
branches;
next	1.3;
commitid	3y1vc5V5noHZnJlo;

1.3
date	2017.05.04.20.51.51;	author kettenis;	state Exp;
branches;
next	1.2;
commitid	EN3yHiO5SOxK7jHs;

1.2
date	2017.04.29.10.05.49;	author jsg;	state Exp;
branches;
next	1.1;
commitid	A0mJOFxNMfi0Uael;

1.1
date	2017.04.27.10.23.19;	author kettenis;	state Exp;
branches;
next	;
commitid	1OdRkvdhr84s63Do;


desc
@@


1.7
log
@Add Cortex-A55 and Cortex-A75 part numbers.
@
text
@/*	$OpenBSD: cpu.c,v 1.6 2017/08/09 05:53:11 jsg Exp $	*/

/*
 * Copyright (c) 2016 Dale Rahn <drahn@@dalerahn.com>
 * Copyright (c) 2017 Mark Kettenis <kettenis@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <machine/fdt.h>

#include <dev/ofw/openfirm.h>
#include <dev/ofw/fdt.h>

/* CPU Identification */
#define CPU_IMPL_ARM		0x41
#define CPU_IMPL_CAVIUM		0x43

#define CPU_PART_CORTEX_A53	0xd03
#define CPU_PART_CORTEX_A35	0xd04
#define CPU_PART_CORTEX_A55	0xd05
#define CPU_PART_CORTEX_A57	0xd07
#define CPU_PART_CORTEX_A72	0xd08
#define CPU_PART_CORTEX_A73	0xd09
#define CPU_PART_CORTEX_A75	0xd0a

#define CPU_PART_THUNDERX_T88	0x0a1
#define CPU_PART_THUNDERX_T81	0x0a2
#define CPU_PART_THUNDERX_T83	0x0a3
#define CPU_PART_THUNDERX2_T99	0x0af

#define CPU_IMPL(midr)  (((midr) >> 24) & 0xff)
#define CPU_PART(midr)  (((midr) >> 4) & 0xfff)
#define CPU_VAR(midr)   (((midr) >> 20) & 0xf)
#define CPU_REV(midr)   (((midr) >> 0) & 0xf)

struct cpu_cores {
	int	id;
	char	*name;
};

struct cpu_cores cpu_cores_none[] = {
	{ 0, NULL },
};

struct cpu_cores cpu_cores_arm[] = {
	{ CPU_PART_CORTEX_A35, "Cortex-A35" },
	{ CPU_PART_CORTEX_A53, "Cortex-A53" },
	{ CPU_PART_CORTEX_A55, "Cortex-A55" },
	{ CPU_PART_CORTEX_A57, "Cortex-A57" },
	{ CPU_PART_CORTEX_A72, "Cortex-A72" },
	{ CPU_PART_CORTEX_A73, "Cortex-A73" },
	{ CPU_PART_CORTEX_A75, "Cortex-A75" },
	{ 0 },
};

struct cpu_cores cpu_cores_cavium[] = {
	{ CPU_PART_THUNDERX_T88, "ThunderX T88" },
	{ CPU_PART_THUNDERX_T81, "ThunderX T81" },
	{ CPU_PART_THUNDERX_T83, "ThunderX T83" },
	{ CPU_PART_THUNDERX2_T99, "ThunderX2 T99" },
	{ 0 },
};

/* arm cores makers */
const struct implementers {
	int			id;
	char			*name;
	struct cpu_cores	*corelist;
} cpu_implementers[] = {
	{ CPU_IMPL_ARM,	"ARM", cpu_cores_arm },
	{ CPU_IMPL_CAVIUM, "Cavium", cpu_cores_cavium },
	{ 0 },
};

char cpu_model[64];

int	cpu_match(struct device *, void *, void *);
void	cpu_attach(struct device *, struct device *, void *);

struct cfattach cpu_ca = {
	sizeof(struct device), cpu_match, cpu_attach
};

struct cfdriver cpu_cd = {
	NULL, "cpu", DV_DULL
};

void
cpu_identify(struct cpu_info *ci)
{
	uint64_t midr, impl, part;
	char *impl_name = NULL;
	char *part_name = NULL;
	struct cpu_cores *coreselecter = cpu_cores_none;
	int i;

	midr = READ_SPECIALREG(midr_el1);
	impl = CPU_IMPL(midr);
	part = CPU_PART(midr);

	for (i = 0; cpu_implementers[i].id != 0; i++) {
		if (impl == cpu_implementers[i].id) {
			impl_name = cpu_implementers[i].name;
			coreselecter = cpu_implementers[i].corelist;
			break;
		}
	}

	for (i = 0; coreselecter[i].id != 0; i++) {
		if (part == coreselecter[i].id) {
			part_name = coreselecter[i].name;
			break;
		}
	}

	if (impl_name && part_name) {
		printf(" %s %s r%llup%llu", impl_name, part_name, CPU_VAR(midr),
		    CPU_REV(midr));

		if (CPU_IS_PRIMARY(ci))
			snprintf(cpu_model, sizeof(cpu_model),
			    "%s %s r%llup%llu", impl_name, part_name,
			    CPU_VAR(midr), CPU_REV(midr));
	} else {
		printf(" Unknown, MIDR 0x%llx", midr);

		if (CPU_IS_PRIMARY(ci))
			snprintf(cpu_model, sizeof(cpu_model), "Unknown");
	}
}

int
cpu_match(struct device *parent, void *cfdata, void *aux)
{
	struct fdt_attach_args *faa = aux;
	char buf[32];

	if (OF_getprop(faa->fa_node, "device_type", buf, sizeof(buf)) > 0 &&
	    strcmp(buf, "cpu") == 0)
		return 1;

	return 0;
}

void
cpu_attach(struct device *parent, struct device *dev, void *aux)
{
	struct fdt_attach_args *faa = aux;
	struct cpu_info *ci;
	uint64_t mpidr = READ_SPECIALREG(mpidr_el1);

	KASSERT(faa->fa_nreg > 0);

	if (faa->fa_reg[0].addr == (mpidr & MPIDR_AFF)) {
		ci = &cpu_info_primary;
		ci->ci_cpuid = dev->dv_unit;
		ci->ci_dev = dev;

		printf(":");
		cpu_identify(ci);
	} else {
		printf(": not configured");
	}

	printf("\n");
}
@


1.6
log
@Fix format strings to make the kernel build on arm64 again after the
recent kprintf changes in clang.

ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.5 2017/05/06 11:27:34 kettenis Exp $	*/
d34 1
d38 1
d62 1
d66 1
@


1.5
log
@Print full MIDR for CPUs that can't be identified.

ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.4 2017/05/06 06:43:02 jsg Exp $	*/
d127 1
a127 1
		printf(" %s %s r%dp%d", impl_name, part_name, CPU_VAR(midr),
d131 3
a133 2
			snprintf(cpu_model, sizeof(cpu_model), "%s %s r%dp%d",
			    impl_name, part_name, CPU_VAR(midr), CPU_REV(midr));
@


1.4
log
@Now that we have a table of Cavium part numbers add the part number for
Broadcom's Vulcan design with a Cavium implementer code
(ThunderX2 T99/CN99xx).  Suggested by kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.3 2017/05/04 20:51:51 kettenis Exp $	*/
d54 1
a54 1
	{ 0x0, "Unknown" },
d63 1
a63 1
	{ 0x0, "Unknown" },
d71 1
a71 1
	{ 0x0, "Unknown" },
d80 3
a82 3
	{ CPU_IMPL_ARM,		"ARM",		cpu_cores_arm },
	{ CPU_IMPL_CAVIUM,	"Cavium",	cpu_cores_cavium },
	{ 0,			"",		NULL },
d102 2
a103 2
	char *impl_name = "Unknown";
	char *part_name = "Unknown";
d126 9
a134 2
	printf(" %s %s r%dp%d", impl_name, part_name, CPU_VAR(midr),
	    CPU_REV(midr));
d136 3
a138 3
	if (CPU_IS_PRIMARY(ci))
		snprintf(cpu_model, sizeof(cpu_model), "%s %s r%dp%d",
		    impl_name, part_name, CPU_VAR(midr), CPU_REV(midr));
@


1.3
log
@Recognize various Cavium ThunderX cores.

ok patrick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.2 2017/04/29 10:05:49 jsg Exp $	*/
d41 1
d70 1
@


1.2
log
@store cpu model information in the buffer used by the hw.model sysctl
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.c,v 1.1 2017/04/27 10:23:19 kettenis Exp $	*/
d29 2
a30 1
#define CPU_IMPL_ARM            0x41
d32 9
a40 5
#define CPU_PART_CORTEX_A53     0xd03
#define CPU_PART_CORTEX_A35     0xd04
#define CPU_PART_CORTEX_A57     0xd07
#define CPU_PART_CORTEX_A72     0xd08
#define CPU_PART_CORTEX_A73     0xd09
d65 7
d78 3
a80 2
	{ CPU_IMPL_ARM,		"ARM",	cpu_cores_arm },
	{ 0,			"",	NULL },
@


1.1
log
@Add code to identify the CPUs on arm64 systems.  The primary CPU is attached
and identified early on.  For the secondary CPUs this happens late, such that
the drivers we need to spin up CPUs, such as psci(4), will be available.

This also fixes some code in simplebus(4) where the return value of
OF_getprop() was not properly checked.

Heavily based on an earlier diff from drahn@@.

ok drahn@@, jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d70 2
d113 4
@

