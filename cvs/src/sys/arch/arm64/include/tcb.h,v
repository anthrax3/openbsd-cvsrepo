head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2017.01.10.13.13.12;	author patrick;	state Exp;
branches;
next	1.1;
commitid	wv75eyuD653uMoym;

1.1
date	2016.12.17.23.38.33;	author patrick;	state Exp;
branches;
next	;
commitid	uicSPzuCfsvjSNQ4;


desc
@@


1.2
log
@Cleanup TCB header a la OpenBSD/armv7.
@
text
@/*	$OpenBSD: tcb.h,v 1.1 2016/12/17 23:38:33 patrick Exp $	*/

/*
 * Copyright (c) 2011 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _MACHINE_TCB_H_
#define _MACHINE_TCB_H_

#ifdef _KERNEL

#include <machine/pcb.h>

static inline void
__aarch64_set_tcb(void *tcb)
{
	__asm volatile("msr tpidr_el0, %x0" : : "r" (tcb));
}

#define TCB_GET(p)		\
	((struct pcb *)(p)->p_addr)->pcb_tcb

#define TCB_SET(p, addr)	\
	do {							\
		((struct pcb *)(p)->p_addr)->pcb_tcb = (addr);	\
		__aarch64_set_tcb(addr);			\
	} while (0)

#else /* _KERNEL */

/* ELF TLS ABI calls for small TCB, with static TLS data after it */
#define TLS_VARIANT	1

static inline void *
__aarch64_read_tcb(void)
{
	void *tcb;
	__asm volatile("mrs %x0, tpidr_el0": "=r" (tcb));
	return tcb;
}

#define TCB_GET()		__aarch64_read_tcb()

#endif /* _KERNEL */

#endif /* _MACHINE_TCB_H_ */
@


1.1
log
@Import of OpenBSD/arm64

This commit contains all the kernel files related to the OpenBSD/arm64
port.  It is based on the PowerPC pmap, loongson, arm/armv7 code and
FreeBSD aarch64 code.  Hard work done by Dale Rahn.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.1 2011/10/27 04:01:17 guenther Exp $	*/
d27 3
a29 3
__aarch64_set_tcb(uint64_t tcb) {
	__asm volatile("msr tpidr_el0, %x0" :: "r" (tcb));
	return ;
d31 8
a38 6
#define TCB_GET(p)              \
	((void *)((struct pcb *)(p)->p_addr)->pcb_tcb)
#define TCB_SET(p, addr)        \
	do {								\
	(((struct pcb *)(p)->p_addr)->pcb_tcb = (uint64_t)(addr));	\
	__aarch64_set_tcb((uint64_t)addr);						\
d46 4
a49 3
static inline uint64_t
__aarch64_read_tcb(void) {
        uint64_t tcb;
a50 1

d54 1
a54 5
#define TCB_GET(p)              \
	((void *)__aarch64_read_tcb())

#define TCB_GET_MEMBER(member)	\
	(((struct thread_control_block *)__aarch64_read_tcb())->member)
@

