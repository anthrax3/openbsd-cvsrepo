head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.2
date	2017.02.04.04.17.43;	author jsg;	state Exp;
branches;
next	1.1;
commitid	ihagO82dURrDjLrX;

1.1
date	2016.12.17.23.38.33;	author patrick;	state Exp;
branches;
next	;
commitid	uicSPzuCfsvjSNQ4;


desc
@@


1.2
log
@Implement atomic_{set,clear}bits_int and membars for arm64.
With feedback from Dale Rahn, ok patrick@@.
@
text
@/* $OpenBSD: atomic.h,v 1.1 2016/12/17 23:38:33 patrick Exp $ */

/* Public Domain */

#ifndef _MACHINE_ATOMIC_H_
#define _MACHINE_ATOMIC_H_

#if defined(_KERNEL)

#define __membar(_f) do { __asm __volatile(_f ::: "memory"); } while (0)

#define membar_enter()		__membar("dmb sy")
#define membar_exit()		__membar("dmb sy")
#define membar_producer()	__membar("dmb st")
#define membar_consumer()	__membar("dmb ld")
#define membar_sync()		__membar("dmb sy")

/* virtio needs MP membars even on SP kernels */
#define virtio_membar_producer()	__membar("dmb st")
#define virtio_membar_consumer()	__membar("dmb ld")
#define virtio_membar_sync()		__membar("dmb sy")

/*
 * Set bits
 * *p = *p | v
 */
static inline void
atomic_setbits_int(volatile unsigned int *p, unsigned int v)
{
	unsigned int modified, tmp;

	__asm volatile (
	    "1:	ldxr %w0, [%x3]		\n\t"
	    "	orr %w0, %w0, %w2	\n\t"
	    "	stxr %w1, %w0, [%x3]	\n\t"
	    "	cbnz %w1, 1b		\n\t"
	    : "=&r" (tmp), "=&r" (modified)
	    : "r" (v), "r" (p)
	    : "memory", "cc"
	);
}

/*
 * Clear bits
 * *p = *p & (~v)
 */
static inline void
atomic_clearbits_int(volatile unsigned int *p, unsigned int v)
{
	unsigned int modified, tmp;

	__asm volatile (
	    "1:	ldxr %w0, [%x3]		\n\t"
	    "	bic %w0, %w0, %w2	\n\t"
	    "	stxr %w1, %w0, [%x3]	\n\t"
	    "	cbnz %w1, 1b		\n\t"
	    : "=&r" (tmp), "=&r" (modified)
	    : "r" (v), "r" (p)
	    : "memory", "cc"
	);
}

#endif /* defined(_KERNEL) */
#endif /* _MACHINE_ATOMIC_H_ */
@


1.1
log
@Import of OpenBSD/arm64

This commit contains all the kernel files related to the OpenBSD/arm64
port.  It is based on the PowerPC pmap, loongson, arm/armv7 code and
FreeBSD aarch64 code.  Hard work done by Dale Rahn.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a8 1
//#include <sys/stdatomic.h>
d12 6
d19 8
a26 4
#define virtio_membar_producer()	__membar("")
#define virtio_membar_consumer()	__membar("")
#define virtio_membar_sync()		__membar("dmb sy") /* XXX dmb? */

d28 1
a28 1
atomic_setbits_int(__volatile unsigned int *ptr, unsigned int val)
d30 11
a40 6
#if 0
	//FIXME
	atomic_fetch_or_explicit((atomic_uint *)ptr, val, memory_order_seq_cst);
#else
	*ptr |= val;
#endif
d42 5
d48 1
a48 1
atomic_clearbits_int(__volatile unsigned int *ptr, unsigned int val)
d50 11
a60 6
#if 0
	//FIXME
	atomic_fetch_and_explicit((atomic_uint *)ptr, ~val, memory_order_seq_cst);
#else
	*ptr &= ~val;
#endif
d62 1
@

