head	1.6;
access;
symbols
	OPENBSD_6_2:1.5.0.6
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5;
locks; strict;
comment	@# @;


1.6
date	2017.10.04.21.04.56;	author patrick;	state Exp;
branches;
next	1.5;
commitid	nFcLd1mxYTFEwkot;

1.5
date	2017.03.22.10.47.29;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	bhvormSUid1cctQZ;

1.4
date	2017.01.23.14.11.21;	author kettenis;	state Exp;
branches;
next	1.3;
commitid	Buai8S66xEbmBL88;

1.3
date	2017.01.23.13.29.06;	author patrick;	state Exp;
branches;
next	1.2;
commitid	msLJgkLbZHL9ThNE;

1.2
date	2017.01.23.08.21.34;	author kettenis;	state Exp;
branches;
next	1.1;
commitid	W2Bv76CRK6M6PamV;

1.1
date	2016.12.17.23.38.33;	author patrick;	state Exp;
branches;
next	;
commitid	uicSPzuCfsvjSNQ4;


desc
@@


1.6
log
@Due to changes in LLD where sections are sorted in a different way,
the .got section was put into the randomdata segment.  This caused
the bootloader to overwrite parts of the .got and leads to broken
pointers.  Explicitly put the .got section into the .data segment.

ok kettenis@@
@
text
@/*     $OpenBSD: kern.ldscript,v 1.5 2017/03/22 10:47:29 kettenis Exp $         */
/*     $NetBSD: ldscript.evbarm,v 1.2 2003/03/05 23:54:22 thorpej Exp $        */

OUTPUT_ARCH(aarch64)

/* Define how we want our ELF binary to look like. */
PHDRS
{
	text PT_LOAD;
	rodata PT_LOAD;
	data PT_LOAD;
	openbsd_randomize PT_OPENBSD_RANDOMIZE;
}

__ALIGN_SIZE = 0x200000;
__kernel_base = @@KERNEL_BASE_VIRT@@;

ENTRY(_start)
SECTIONS
{
	. = __kernel_base;
	PROVIDE (__text_start = .);
	.text :
	{
		*(.text .text.*)
		*(.stub)
		*(.glue_7t) *(.glue_7)
	} :text =0
	PROVIDE (_etext = .);
	PROVIDE (etext = .);

	/* Move rodata to the next page, so we can nuke X and W bit on it */
	. = ALIGN(__ALIGN_SIZE);
	PROVIDE (__rodata_start = .);
	.rodata :
	{
		*(.rodata .rodata.*)
	} :rodata
	PROVIDE (_erodata = .);

	/* Move .random to the next page, so we can add W bit on it and .data */
	. = ALIGN(__ALIGN_SIZE);
	PROVIDE (__data_start = .);
	.openbsd.randomdata :
	{
		*(.openbsd.randomdata)
	} :openbsd_randomize :data
	.got :
	{
		*(.got .got.*)
	} :data
	.data :
	{
		*(.data .data.*)
	} :data
	.sdata :
	{
		*(.sdata .sdata.*)
	} :data
	PROVIDE (_edata = .);

	PROVIDE (__bss_start = .);
	.sbss :
	{
		*(.dynsbss)
		*(.sbss)
		*(.sbss.*)
		*(.scommon)
	} :data
	.bss :
	{
		*(.dynbss)
		*(.bss)
		*(.bss.*)
		*(COMMON)
		/* Align here to ensure that the .bss section occupies space up to
		   _end.  Align after .bss to ensure correct alignment even if the
		   .bss section disappears because there are no input sections.  */
		. = ALIGN(64 / 8);
	} :data
	PROVIDE (_end = .);
	PROVIDE (end = .);
}
@


1.5
log
@Implement kernel W^X for arm64.  For this purpose align the different segments
containing .text, .rodata and .data/.bss at 2MB boundaries and set the
appropriate access permissions on the block translations.

ok patrick@@
@
text
@d1 1
a1 1
/*     $OpenBSD: kern.ldscript,v 1.4 2017/01/23 14:11:21 kettenis Exp $         */
d48 4
@


1.4
log
@Remove duplicate $OpenBSD$ tag.
@
text
@d1 1
a1 1
/*     $OpenBSD: kern.ldscript,v 1.3 2017/01/23 13:29:06 patrick Exp $         */
d15 1
a15 1
__ALIGN_SIZE = 0x1000;
d22 1
a28 1
	PROVIDE (__etext = .);
d34 1
d39 1
a39 2
	PROVIDE (erodata = .);
	_erodata = .;
d43 1
d56 1
a56 2
	PROVIDE (edata = .);
	_edata = .;
d77 1
a78 1
	_end = .;
@


1.3
log
@_end should be on a 64-bit boundary, so make sure to align
the end of BSS by 64-bit and not 32-bit.

With and ok kettenis@@
@
text
@d1 1
a1 2
/*     $OpenBSD: kern.ldscript,v 1.2 2017/01/23 08:21:34 kettenis Exp $         */
/*     $OpenBSD: kern.ldscript,v 1.2 2017/01/23 08:21:34 kettenis Exp $         */
@


1.2
log
@Remove final align as it confuses lld.

ok patrick@@
@
text
@d1 2
a2 2
/*     $OpenBSD: kern.ldscript,v 1.1 2016/12/17 23:38:33 patrick Exp $         */
/*     $OpenBSD: kern.ldscript,v 1.1 2016/12/17 23:38:33 patrick Exp $         */
d76 1
a76 1
		. = ALIGN(32 / 8);
@


1.1
log
@Import of OpenBSD/arm64

This commit contains all the kernel files related to the OpenBSD/arm64
port.  It is based on the PowerPC pmap, loongson, arm/armv7 code and
FreeBSD aarch64 code.  Hard work done by Dale Rahn.
@
text
@d1 2
a2 2
/*     $OpenBSD: ldscript.head,v 1.2 2005/01/02 19:57:57 drahn Exp $         */
/*     $OpenBSD: ldscript.tail,v 1.4 2009/06/27 14:44:39 drahn Exp $         */
d78 1
a78 1
	. = ALIGN(32 / 8);
a79 1
	PROVIDE (end = .);
@

