head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11;
locks; strict;
comment	@# @;


1.11
date	2017.02.25.17.04.19;	author patrick;	state Exp;
branches;
next	1.10;
commitid	p2EYCwnazH2Umgw1;

1.10
date	2017.02.24.10.13.13;	author patrick;	state Exp;
branches;
next	1.9;
commitid	BmmI7qP1ZsMJEgAk;

1.9
date	2017.02.06.19.23.45;	author patrick;	state Exp;
branches;
next	1.8;
commitid	5it27ZRIjA5PXf5f;

1.8
date	2017.01.26.01.46.19;	author jsg;	state Exp;
branches;
next	1.7;
commitid	DVor4li8N6n5BUTd;

1.7
date	2017.01.23.13.58.11;	author patrick;	state Exp;
branches;
next	1.6;
commitid	S0O91Ahg8IDRMV9Y;

1.6
date	2017.01.23.12.34.06;	author kettenis;	state Exp;
branches;
next	1.5;
commitid	FC9zZqeFWyvI5Z2v;

1.5
date	2017.01.23.08.05.47;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	W2ekE4xLzb8ECWtV;

1.4
date	2017.01.21.10.58.15;	author reyk;	state Exp;
branches;
next	1.3;
commitid	swIiw8mtZ7Pk0W3t;

1.3
date	2017.01.21.08.54.24;	author patrick;	state Exp;
branches;
next	1.2;
commitid	dZ9VSgFBr4znGOR8;

1.2
date	2016.12.18.22.19.36;	author patrick;	state Exp;
branches;
next	1.1;
commitid	exuVAnrigmv4IbSg;

1.1
date	2016.12.17.23.38.33;	author patrick;	state Exp;
branches;
next	;
commitid	uicSPzuCfsvjSNQ4;


desc
@@


1.11
log
@Implement ampintcmsi(4) in ampintc(4) to support MSI.  The GICv2M is an
extension to the GIC controller, which is represented as subnode in the
device tree.  There can be multiple GICv2Ms, so it makes sense to attach
those to ampintc(4) as some kind of simplebus.  The GICv2M is simply an
interrupt generator that can be used by PCIe devices to ring the door
bell.  There is no need for further configuration, we only need to find
out which SPIs we are allowed to use for MSI and to register an edge
triggered interrupt on a (randomly) allocated SPI.

ok kettenis@@
@
text
@# $OpenBSD: files.arm64,v 1.10 2017/02/24 10:13:13 patrick Exp $

maxpartitions	16
maxusers	2 8 64

major	{wd = 16}
major	{sd = 24}
major	{cd = 26}
major	{rd = 17}

file	arch/arm64/arm64/autoconf.c
file	arch/arm64/arm64/copy.S
file	arch/arm64/arm64/copystr.S
file	arch/arm64/arm64/cpuswitch.S
file	arch/arm64/arm64/conf.c
file	arch/arm64/arm64/disksubr.c
file	arch/arm64/arm64/machdep.c
file	arch/arm64/arm64/mem.c
file	arch/arm64/arm64/pmap.c
file	arch/arm64/arm64/vm_machdep.c
file	arch/arm64/arm64/process_machdep.c
file	arch/arm64/arm64/sig_machdep.c
file	arch/arm64/arm64/syscall.c
file	arch/arm64/arm64/sys_machdep.c

file	arch/arm64/arm64/intr.c
file	arch/arm64/arm64/softintr.c
file	arch/arm64/arm64/vfp.c
file	arch/arm64/arm64/exception.S
file	arch/arm64/arm64/trap.c
file	arch/arm64/arm64/ast.c
file	arch/arm64/arm64/arm64_mutex.c

file	arch/arm64/arm64/cpufunc_asm.S
file	arch/arm64/arm64/support.S
file	arch/arm64/arm64/bus_dma.c

file	arch/arm64/dev/arm64_bus_space.c

file	arch/arm64/arm64/db_disasm.c		ddb
file	arch/arm64/arm64/db_interface.c		ddb
file	arch/arm64/arm64/db_trace.c		ddb

pseudo-device	openprom
file	arch/arm/arm/openprom.c			openprom needs-flag

define	fdt {[early = 0]}

# mainbus files
define	mainbus {}
device	mainbus: fdt
attach	mainbus at root
file	arch/arm64/dev/mainbus.c		mainbus

device	simplebus: fdt
attach	simplebus at fdt
file	arch/arm64/dev/simplebus.c		simplebus

# FDT support
file	dev/ofw/fdt.c
file	dev/ofw/ofw_clock.c
file	dev/ofw/ofw_gpio.c
file	dev/ofw/ofw_pinctrl.c
file	dev/ofw/ofw_regulator.c

# Machine-independent SCSI drivers
include "scsi/files.scsi"
include "dev/atapiscsi/files.atapiscsi"

# Machine-independent ATA drivers
include "dev/ata/files.ata"

# Include WSCONS stuff
include "dev/wscons/files.wscons"
include "dev/rasops/files.rasops"
include "dev/wsfont/files.wsfont"

#
# Machine-independent HID support
#
include	"dev/hid/files.hid"

# Machine-independent I2C drivers
include "dev/i2c/files.i2c"

# Include USB stuff
include "dev/usb/files.usb"

# Machine-independent GPIO drivers
include "dev/gpio/files.gpio"

# Machine-independent 1-Wire drivers
include "dev/onewire/files.onewire"

file	netinet/in_cksum.c
file	netinet/in4_cksum.c

# Paravirtual device bus and virtio
include "dev/pv/files.pv"

# MII and PCI
include "dev/mii/files.mii"
include "dev/pci/files.pci"
include "dev/sdmmc/files.sdmmc"

# Machine-independent FDT drivers
include "dev/fdt/files.fdt"

# Console related stuff
attach	com at fdt with com_fdt
file	arch/arm64/dev/com_fdt.c		com_fdt

# ARM PrimeCell PL011 UART
device	pluart
attach	pluart at fdt
file	arch/arm64/dev/pluart.c			pluart

device	ampintc: fdt
attach	ampintc at fdt
device	ampintcmsi
attach	ampintcmsi at fdt
file	arch/arm64/dev/ampintc.c		ampintc | ampintcmsi

device	agtimer
attach	agtimer at fdt
file	arch/arm64/dev/agtimer.c		agtimer

device	bcmintc
attach	bcmintc at fdt
file	arch/arm64/dev/bcm2836_intr.c		bcmintc

include	"dev/usb/dwc2/files.dwc2"
attach	dwctwo at fdt with bcmdwctwo
file	arch/arm64/dev/bcm2835_dwctwo.c		bcmdwctwo	needs-flag

device	pciecam: pcibus
attach	pciecam at fdt
file	arch/arm64/dev/pciecam.c		pciecam
@


1.10
log
@Hook up pciecam(4), but don't compile it yet.
@
text
@d1 1
a1 1
# $OpenBSD: files.arm64,v 1.9 2017/02/06 19:23:45 patrick Exp $
d118 1
a118 1
device	ampintc
d120 3
a122 1
file	arch/arm64/dev/ampintc.c		ampintc
@


1.9
log
@Move cache and tlb flush functions, which were mostly inline assembly,
into separate functions.  This makes them reusable from other parts in
the kernel.  Assembly and header are taken from FreeBSD, but modified
to fit our requirements and with some unnecessary stuff removed.  While
there remove micro optimization for uniprocessor kernels.
@
text
@d1 1
a1 1
# $OpenBSD: files.arm64,v 1.8 2017/01/26 01:46:19 jsg Exp $
d133 4
@


1.8
log
@The only difference between armv7 and arm64 fdt virtio attachments is an
uneeded include.  Remove the include and move to MI fdt directory.
@
text
@d1 1
a1 1
# $OpenBSD: files.arm64,v 1.7 2017/01/23 13:58:11 patrick Exp $
d34 1
a34 1

@


1.7
log
@Make the RAMDISK kernel actually try to boot the ramdisk.
@
text
@d1 1
a1 1
# $OpenBSD: files.arm64,v 1.6 2017/01/23 12:34:06 kettenis Exp $
a132 3

attach	virtio at fdt with virtio_mmio
file	arch/arm64/dev/virtio_mmio.c		virtio_mmio
@


1.6
log
@openprom(4)
@
text
@d1 1
a1 1
# $OpenBSD: files.arm64,v 1.5 2017/01/23 08:05:47 kettenis Exp $
d9 1
@


1.5
log
@Add drivers for the Raspberry Pi 3.
@
text
@d1 1
a1 1
# $OpenBSD: files.arm64,v 1.4 2017/01/21 10:58:15 reyk Exp $
d42 3
@


1.4
log
@Move virtio config from files.pci to files.pci

virtio itself is not PCI, it is a paravirtual bus on top of either PCI
or MMIO (arm).  This is the first step of moving the virtio files to
dev/pv.  No functional change.

arm kernel changes tested by jsg@@ and patrick@@
no objections from sf@@ mlarkin@@
@
text
@d1 1
a1 1
# $OpenBSD: files.arm64,v 1.3 2017/01/21 08:54:24 patrick Exp $
d121 8
@


1.3
log
@Add Allwinner A64 devices to OpenBSD/arm64.  This means we can run
on the Pine64.  While there add a few more usb and pseudo devices.
@
text
@d1 1
a1 1
# $OpenBSD: files.arm64,v 1.2 2016/12/18 22:19:36 patrick Exp $
d46 1
d94 4
@


1.2
log
@Consolidate bus space tags into generic bus space code.  Especially
considering we don't have a separate iobus and the a4x iobus wasn't
even compiled it does not make sense to declare those in iobus.
Improves code readability as well.
@
text
@d1 1
a1 1
# $OpenBSD: files.arm64,v 1.1 2016/12/17 23:38:33 patrick Exp $
d78 3
d84 6
d95 4
@


1.1
log
@Import of OpenBSD/arm64

This commit contains all the kernel files related to the OpenBSD/arm64
port.  It is based on the PowerPC pmap, loongson, arm/armv7 code and
FreeBSD aarch64 code.  Hard work done by Dale Rahn.
@
text
@d1 1
a1 1
# $OpenBSD$
a35 1
file	arch/arm64/arm64/arm64_iobus.c
@

