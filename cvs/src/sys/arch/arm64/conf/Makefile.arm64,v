head	1.7;
access;
symbols
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5;
locks; strict;
comment	@# @;


1.7
date	2017.06.04.14.10.42;	author patrick;	state Exp;
branches;
next	1.6;
commitid	PDY9roovIgqHrrEo;

1.6
date	2017.06.03.22.21.33;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	SGp9KIY6OZAZGoKD;

1.5
date	2017.02.05.13.28.05;	author jsg;	state Exp;
branches;
next	1.4;
commitid	atUpzlQ2DWkFrv56;

1.4
date	2017.01.25.11.15.07;	author kettenis;	state Exp;
branches;
next	1.3;
commitid	SbX05HnGufiooA06;

1.3
date	2017.01.25.03.48.11;	author patrick;	state Exp;
branches;
next	1.2;
commitid	AJnLpo3yKKAe0Stx;

1.2
date	2016.12.19.09.53.21;	author patrick;	state Exp;
branches;
next	1.1;
commitid	eWB3fWyB8LsH1jaD;

1.1
date	2016.12.17.23.38.33;	author patrick;	state Exp;
branches;
next	;
commitid	uicSPzuCfsvjSNQ4;


desc
@@


1.7
log
@Split early startup code out of locore.S into locore0.S.  Adjust link
run so that this locore0.o is always at the start of the executable.
But randomize the link order of all other .o files in the kernel, so
that their exec/rodata/data/bss segments land all over the place.
Late during kernel boot, unmap the early startup code.

As a result, the internal layout of every newly build bsd kernel is
different from past kernels.  Internal relative offsets are not known
to an outside attacker.  The only known offsets are in the startup code,
which has been unmapped.

Ramdisk kernels cannot be compiled like this, because they are gzip'd.
When the internal pointer references change, the compression dictionary
bloats and results in poorer compression.

With guidance and ok deraadt@@
@
text
@#	$OpenBSD: Makefile.arm64,v 1.6 2017/06/03 22:21:33 deraadt Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I${.OBJDIR} -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__ -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-uninitialized -Wno-pointer-sign \
		-Wno-constant-conversion -Wno-address-of-packed-member \
		-Wframe-larger-than=2047

CMACHFLAGS=	-march=armv8-a+nofp+nosimd \
		-fno-omit-frame-pointer -mno-omit-leaf-frame-pointer \
		-ffixed-x18
CMACHFLAGS+=	-ffreestanding ${NOPIE_FLAGS}
SORTR=		sort -R
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
.if ${IDENT:M-DSMALL_KERNEL}
SORTR=		cat
.endif

DEBUG?=		-g
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CWARNFLAGS} ${CMACHFLAGS}
LINKFLAGS=	-T ldscript -X --warn-common -nopie

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore0.o gap.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS} param.o ioconf.o
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD_HEAD+=; \
		cat ${_archdir}/conf/kern.ldscript | \
		    sed -e 's/@@KERNEL_BASE_PHYS@@/${KERNEL_BASE_PHYS}/' \
		    -e 's/@@KERNEL_BASE_VIRT@@/${KERNEL_BASE_VIRT}/' > ldscript
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		umask 007; \
		echo ${OBJS} param.o ioconf.o vers.o | tr " " "\n" | ${SORTR} > lorder; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} `cat lorder`
SYSTEM_LD_TAIL=	@@${SIZE} $@@

.if ${DEBUG} == "-g"
STRIPFLAGS=	-S
SYSTEM_LD_TAIL+=; umask 007; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -no-integrated-as -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

gap.S:	${SYSTEM_SWAP_DEP} Makefile
	umask 077; sh $S/conf/makegap.sh 0xd4 > gap.S

gap.o:	gap.S
	umask 077; ${CC} ${AFLAGS} ${CPPFLAGS} ${PROF} -c gap.S

clean:
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} \
	    gap.S lorder param.c

cleandir: clean
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c

depend obj:

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

locore0.o: ${_archdir}/${_arch}/locore0.S assym.h
in_cksum_arm.o fiq_subr.o bcopyinout.o copystr.o sigcode.o copy.o: assym.h
vectors.o cpuswitch.o exception.o bcopy_page.o irq_dispatch.o support.o: assym.h
locore.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	cp -p bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif


## for qemu this is where ram is located
RAM_ADDR?=0x40000000
#KERNEL_LOAD_ADDR!=echo "x = hex(${KERNEL_BASE_PHYS} + ${RAM_ADDR}); print x" | python
KERNEL_LOAD_ADDR=0x40200000

# until we get native booting working, put this in the tree.
bsdrd.umg: bsd.rd
	mkuboot -a arm -o linux -e ${KERNEL_LOAD_ADDR} -l ${KERNEL_LOAD_ADDR} bsd.rd bsdrd.umg

bsd.umg: bsd
	mkuboot -a arm -o linux -e ${KERNEL_LOAD_ADDR} -l ${KERNEL_LOAD_ADDR} bsd bsd.umg

bsd.rd: bsd
	cp bsd bsd.rd
	rdconfig bsd.rd $S/../distrib/${_mach}/ramdisk/mr.fs

%RULES
@


1.6
log
@Create gap.S and gap.o with umask 077.  Create lorder and bsd* with umask 007.
Prying eyes cannot look at the kernels in the compile directory.
ok tb rpe, kernel developers seem unimpacted
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.arm64,v 1.5 2017/02/05 13:28:05 jsg Exp $
d35 1
d39 3
d75 2
a76 2
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
d85 2
a86 1
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
d130 6
d137 2
a138 1
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} param.c
d150 1
a150 1
locore.o: ${_archdir}/${_arch}/locore.S assym.h
d153 1
@


1.5
log
@Ask for a generic armv8-a encoding rather than one based on and tuned
for cortex-a57.

ok patrick@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.arm64,v 1.4 2017/01/25 11:15:07 kettenis Exp $
a78 1

d80 1
d82 1
a82 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
d86 1
a86 1
SYSTEM_LD_TAIL+=; \
d149 1
a149 1
	cp bsd /nbsd
@


1.4
log
@Build amd64 kernels with -ffreestanding.  Synchronize the arm64 and armv7
kernel makefiles, that are using -ffreestanding already, with the amd64 one.
Other architectures will follow later.

ok jca@@, visa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.arm64,v 1.3 2017/01/25 03:48:11 patrick Exp $
d31 1
a31 1
CMACHFLAGS=	-mcpu=cortex-a57+nofp+nosimd \
@


1.3
log
@Silence warnings caused by LLVM upgrade.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.arm64,v 1.2 2016/12/19 09:53:21 patrick Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-pointer-sign \
d31 1
a31 1
CMACHFLAGS=	-ffreestanding -mcpu=cortex-a57+nofp+nosimd \
d34 1
a34 3
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
@


1.2
log
@Adjust Makefile to gain improvements that were made in other archs
already.  This means for example dropping -Wno-format or adding -g
by default.

Prompted by jsg@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.arm64,v 1.1 2016/12/17 23:38:33 patrick Exp $
d28 1
@


1.1
log
@Import of OpenBSD/arm64

This commit contains all the kernel files related to the OpenBSD/arm64
port.  It is based on the PowerPC pmap, loongson, arm/armv7 code and
FreeBSD aarch64 code.  Hard work done by Dale Rahn.
@
text
@d1 1
a1 1
#	$OpenBSD$
d24 1
a24 1
INCLUDES=	-nostdinc -I$S -I. -I$S/arch
d26 3
a28 5
#CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes \
		-Wno-main -Wno-uninitialized -Wno-format -Wno-pointer-sign \
		-Wno-conditional-uninitialized
#		-Wstack-larger-than-2047
d33 3
a35 3
#CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
#		-fno-builtin-vsnprintf -fno-builtin-log \
#		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
d40 1
d44 1
a44 1
LINKFLAGS=	-T ldscript --warn-common -nopie
a84 1
DEBUG?=
d86 1
a86 2
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
d92 1
a92 1
LINKFLAGS+=	-x
d126 2
a127 8
clean::
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}

lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'
d129 2
a130 2
depend:
	@@touch $@@
d132 1
a132 2
tags:
	@@echo "see $S/kern/Makefile for tags"
d149 1
a149 2
	rm -f /obsd
	ln /bsd /obsd
@

