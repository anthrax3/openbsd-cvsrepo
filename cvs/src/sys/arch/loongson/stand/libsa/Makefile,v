head	1.8;
access;
symbols
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.4.0.8
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.1.0.12
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.10
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2016.11.06.16.42.00;	author tb;	state Exp;
branches;
next	1.7;
commitid	peo8JdlgBE9dXbST;

1.7
date	2015.11.16.19.33.52;	author miod;	state Exp;
branches;
next	1.6;
commitid	5gnqUR6VheSiU9SF;

1.6
date	2014.07.13.09.26.08;	author jasper;	state Exp;
branches;
next	1.5;
commitid	Cnjup0HpCIRrcQ6o;

1.5
date	2014.07.12.21.54.58;	author jasper;	state Exp;
branches;
next	1.4;
commitid	3HeD4LaLGiS22I3y;

1.4
date	2013.01.02.12.29.33;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2012.08.31.16.13.59;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2012.08.02.13.38.39;	author okan;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.14.22.39.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Do not create machine@@ symlinks in obj as root during includes:, but
defer their creation to later, so that they are owned by BUILDUSER.
This eliminates the last root-owned files in obj/ from 'make build'.
In addition, place a MACHINE == hppa test in hppa/stand/Makefile.inc
to avoid creating bogus symlinks on all other archs.

joint work with & ok natano, "let's try it" deraadt
@
text
@#	$OpenBSD: Makefile,v 1.7 2015/11/16 19:33:52 miod Exp $

.include "${.CURDIR}/../Makefile.inc"

LIB=	sa

.PATH:	${.CURDIR}/../../../../lib/libsa

CLEANFILES += machine mips64

CFLAGS+= ${CEXTRAFLAGS} ${SAABI} -nostdinc -mno-abicalls -D_NO_ABICALLS \
	-fno-pie \
	-I${.CURDIR} -I${.CURDIR}/../include -I${.CURDIR}/../.. \
	-I${.CURDIR}/../../.. -I${.CURDIR}/../../../.. \
	-I${.CURDIR}/../../../../lib/libsa \
	-I${.OBJDIR}

# stand routines
SRCS=	alloc.c cons.c ctime.c exit.c getchar.c getfile.c getln.c globals.c \
	memcmp.c memcpy.c memset.c printf.c putchar.c \
	snprintf.c strchr.c strcmp.c strerror.c strncmp.c strncpy.c strtol.c

# io routines
SRCS+=	close.c closeall.c dev.c disklabel.c dkcksum.c fstat.c ioctl.c \
	lseek.c open.c read.c readdir.c stat.c write.c
#SRCS+=	nullfs.c

#SRCS+=	cread.c
#CPPFLAGS+= -D__INTERNAL_LIBSA_CREAD

# boot filesystems
SRCS+=	ufs.c cd9660.c

CFLAGS+=-DNO_NET

SRCS+=	loadfile.c

${OBJS}:	${.CURDIR}/../Makefile.inc

NOPROFILE=
NOPIC=

.if !make(clean) && !make(cleandir) && !make(includes) && !make(obj)
.BEGIN:
	@@([ -h machine ] || ln -s ${.CURDIR}/../../include machine)
	@@([ -h mips64 ] || ln -s ${.CURDIR}/../../../mips64/include mips64)
CLEANFILES+=	machine mips64
.endif

install:

.include <bsd.lib.mk>
@


1.7
log
@Replace unbounded gets() in libsa with getln() which takes a buffer size,
and convert all gets() users.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2014/07/13 09:26:08 jasper Exp $
d43 1
a43 1
.if !make(obj)
@


1.6
log
@move putchar() into libsa

"sure" miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2014/07/12 21:54:58 jasper Exp $
d19 1
a19 1
SRCS=	alloc.c cons.c ctime.c exit.c getchar.c getfile.c gets.c globals.c \
@


1.5
log
@move getchar() into libsa where applicable

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2013/01/02 12:29:33 deraadt Exp $
d20 1
a20 1
	memcmp.c memcpy.c memset.c printf.c \
@


1.4
log
@miod let one exec.c slide
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2012/08/31 16:13:59 pascal Exp $
d19 1
a19 1
SRCS=	alloc.c cons.c ctime.c exit.c getfile.c gets.c globals.c \
@


1.3
log
@Kill NOPIE and NOPIE_FLAGS in loongson/stand.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2012/08/02 13:38:39 okan Exp $
d19 1
a19 1
SRCS=	alloc.c cons.c ctime.c exit.c exec.c getfile.c gets.c globals.c \
@


1.2
log
@remove leftover NOLINT, WANTLINT, LINTFLAGS, LOBJ vars and lint targets.

ok guenther@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2010/02/14 22:39:33 miod Exp $
d12 1
@


1.1
log
@Work in progress standalone boot blocks for OpenBSD/loongson systems. Will
load a kernel from the OpenBSD partition, with symbols.
However:
- does not work on gdium (usb i/o errors)
- no countdown due to PMON limitations, so either `bsd' in the PMON
  environment contains a kernel filename to load, and it will get loaded
  immediately, or it doesn't (e.g. the variable does no exist) and you get
  a prompt and can pass options to the kernel. Note that /etc/boot.conf
  commands can still be used in both cases.
- does not work for me when loaded automatically from PMON (put in the `al'
  environment variable). However, `boot $al' works fine. Need to investigate.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2009/05/14 18:57:43 miod Exp $
a40 1
WANTLINT=	no
@

