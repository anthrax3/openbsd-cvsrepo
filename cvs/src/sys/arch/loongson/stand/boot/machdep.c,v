head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.10
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.6
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.4.0.14
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.8
date	2014.07.13.09.26.08;	author jasper;	state Exp;
branches;
next	1.7;
commitid	Cnjup0HpCIRrcQ6o;

1.7
date	2014.07.12.23.34.54;	author jasper;	state Exp;
branches;
next	1.6;
commitid	r9k2SIaE5isJATNY;

1.6
date	2014.07.12.21.54.58;	author jasper;	state Exp;
branches;
next	1.5;
commitid	3HeD4LaLGiS22I3y;

1.5
date	2013.09.30.19.27.02;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.03.19.13.27;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.17.21.25.49;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.16.21.28.39;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.14.22.39.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@move putchar() into libsa

"sure" miod@@
@
text
@/*	$OpenBSD: machdep.c,v 1.7 2014/07/12 23:34:54 jasper Exp $	*/

/*
 * Copyright (c) 2010 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/*
 * Copyright (c) 1998-2004 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <lib/libkern/libkern.h>
#include "libsa.h"
#include <machine/cpu.h>
#include <machine/pmon.h>
#include <stand/boot/cmd.h>

void	gdium_abort(void);
int	is_gdium;
int	boot_rd;

extern int bootprompt;

/*
 * Console
 */

int
cnspeed(dev_t dev, int sp)
{
	return CONSPEED;
}

char *
ttyname(int fd)
{
	return "pmon console";
}

dev_t
ttydev(char *name)
{
	/* we do not support any other console than pmon */
	return NODEV;
}

/*
 * Configuration and device path aerobics
 */

/*
 * Return the default boot device.
 */
void
devboot(dev_t dev, char *path)
{
	const char *bootpath = NULL;
	size_t bootpathlen = 0;	/* gcc -Wall */
	const char *tmp;
	int i;

	/*
	 * If we are booting the initrd image, things are easy...
	 */

	if (dev != 0) {
		strlcpy(path, "rd0a", BOOTDEVLEN);
		return;
	}

	/*
	 * First, try to figure where we have been loaded from; we'll assume
	 * the default device to load the kernel from is the same.
	 *
	 * We may have been loaded in three different ways:
	 * - automatic load from `al' environment variable (similar to a
	 *   `load' and `go' sequence).
	 * - manual `boot' command, with path on the commandline.
	 * - manual `load' and `go' commands, with no path on the commandline.
	 */

	if (pmon_argc > 0) {
		tmp = (const char *)pmon_getarg(0);
		if (tmp[0] != 'g') {
			/* manual load */
			for (i = 1; i < pmon_argc; i++) {
				tmp = (const char *)pmon_getarg(i);
				if (tmp[0] != '-') {
					bootpath = tmp;
					break;
				}
			}
		} else {
			/* possible automatic load */
			bootpath = pmon_getenv("al");
		}
	}

	/*
	 * If the bootblocks have been loaded from the network,
	 * use the default disk.
	 */

	if (bootpath != NULL && strncmp(bootpath, "tftp://", 7) == 0)
		bootpath = NULL;

	/*
	 * Now extract the device name from the bootpath.
	 */

	if (bootpath != NULL) {
		tmp = strchr(bootpath, '@@');
		if (tmp == NULL) {
			bootpath = NULL;
		} else {
			bootpath = tmp + 1;
			tmp = strchr(bootpath, '/');
			if (tmp == NULL) {
				bootpath = NULL;
			} else {
				bootpathlen = tmp - bootpath;
			}
		}
	}
		
	if (bootpath != NULL && bootpathlen >= 3) {
		if (bootpathlen >= BOOTDEVLEN)
			bootpathlen = BOOTDEVLEN - 1;
		strncpy(path, bootpath, bootpathlen);
		path[bootpathlen] = '\0';
		/* only add a partition letter if there is none */
		if (bootpath[bootpathlen - 1] >= '0' &&
		    bootpath[bootpathlen - 1] <= '9')
			strlcat(path, "a", BOOTDEVLEN);
	} else {
		strlcpy(path, "wd0a", BOOTDEVLEN);
	}
}

/*
 * Ugly (lack of) clock routines
 */

time_t
getsecs()
{
	return 0;
}

/*
 * Initialization
 */

void
machdep()
{
	const char *envvar;

	/*
	 * Since we can't have non-blocking input, we will try to
	 * autoload the kernel pointed to by the `bsd' environment
	 * variable, and fallback to interactive mode if the variable
	 * is empty or the load fails.
	 */

	if (boot_rd == 0) {
		envvar = pmon_getenv("bsd");
		if (envvar != NULL) {
			bootprompt = 0;
			kernelfile = (char *)envvar;
		} else {
			if (is_gdium)
				gdium_abort();
		}
	}
}

int
main()
{
	const char *envvar;

	cninit();

	/*
	 * Figure out whether we are running on a Gdium system, which
	 * has an horribly castrated PMON. If we do, the best we can do
	 * is boot an initrd image.
	 */
	envvar = pmon_getenv("Version");
	if (envvar != NULL && strncmp(envvar, "Gdium", 5) == 0)
		is_gdium = 1;

	/*
	 * Check if we have a valid initrd loaded.
	 */

	envvar = pmon_getenv("rd");
	if (envvar != NULL && *envvar != '\0')
		boot_rd = rd_isvalid();

	if (boot_rd != 0)
		bootprompt = 0;

	boot(boot_rd);
	return 0;
}

void
gdium_abort()
{
	/* Here's a nickel, kid.  Get yourself a better firmware */
	printf("\n\nSorry, OpenBSD boot blocks do not work on Gdium, "
	    "because of dire firmware limitations.\n"
	    "Also, the firmware has reset the USB controller so you "
	    "will need to power cycle.\n"
	    "We would apologize for this inconvenience, but we have "
	    "no control about the firmware of your machine.\n\n");
	rd_invalidate();
	_rtt();
}
@


1.7
log
@unify cnspeed()
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.6 2014/07/12 21:54:58 jasper Exp $	*/
a64 31
}

int pch_pos;

void
putchar(int c)
{
	switch (c) {
	case '\177':	/* DEL erases */
		cnputc('\b');
		cnputc(' ');
	case '\b':
		cnputc('\b');
		if (pch_pos)
			pch_pos--;
		break;
	case '\t':
		do
			cnputc(' ');
		while (++pch_pos % 8) ;
		break;
	case '\n':
	case '\r':
		cnputc(c);
		pch_pos = 0;
		break;
	default:
		cnputc(c);
		pch_pos++;
		break;
	}
@


1.6
log
@move getchar() into libsa where applicable

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.5 2013/09/30 19:27:02 miod Exp $	*/
d64 1
a64 1
	return 9600;
@


1.5
log
@typo in snarky message
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.4 2010/04/03 19:13:27 miod Exp $	*/
a64 16
}

int
getchar()
{
	int c = cngetc();

	if (c == '\r')
		c = '\n';

	if ((c < ' ' && c != '\n') || c == '\177')
		return c;

	putchar(c);

	return c;
@


1.4
log
@Minor reliability fixes:
- clear initrd signature before returning to PMON or to the loaded kernel
- fail /etc/boot.conf access when loading from an initrd image, instead of
  letting it point to the beginning of the kernel image and have the code
  complain of lines being too long.
Bump minor version.
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.3 2010/02/17 21:25:49 miod Exp $	*/
d297 1
a297 1
	    "We would apologize for this incovenience, but we have "
@


1.3
log
@If PMON has loaded an initrd binary, and this binary looks like a valid
ELF image, assume it's the kernel and try to boot it immediately.

This allows a Gdium system with both the bootloader and the kernel image on
an ext2fs partition, with `al' pointing to the bootblocks and `rd' pointing
to the kernel in PMON environment, to boot a kernel with proper kernel
symbols, for the first time.
(please don't get me started on how reliable `load -k' is on the Gdium)

Bump bootblocks version to 0.2.
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.2 2010/02/16 21:28:39 miod Exp $	*/
a55 1
extern char *kernelfile;
d299 1
@


1.2
log
@Actually, both the Gdium and the Lemote PMON reset the USB controllers
before transferring control to any binary, so trying to boot anything
on the Gdium without bringing half the kernel code is a no-go.

So, only keep `wd' as a possible boot device, for the Lemote systems,
and complain loudly if run on a Gdium.
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.1 2010/02/14 22:39:33 miod Exp $	*/
d51 7
d144 9
d222 1
a222 1
 * Ugly clock routines
d240 24
d268 2
a269 1
	 * has an horribly castrated PMON. If we do, return immediately.
d272 2
a273 10
	if (envvar != NULL && strncmp(envvar, "Gdium", 5) == 0) {
		/* Here's a nickel, kid.  Get yourself a better firmware */
		printf("\n\nSorry, OpenBSD boot blocks do not work on Gdium, "
		    "because of dire firmware limitations.\n"
		    "Also, the firmware has reset the USB controller so you "
		    "will need to power cycle.\n"
		    "We would apologize for this incovenience, but we have "
		    "no control about the firmware of your machine.\n\n");
		_rtt();
	}
d276 1
a276 4
	 * Since we can't have non-blocking input, we will try to
	 * autoload the kernel pointed to by the `bsd' environment
	 * variable, and fallback to interactive mode if the variable
	 * is empty or the load fails.
d279 3
a281 4
	envvar = pmon_getenv("bsd");
	if (envvar != NULL) {
		extern int bootprompt;
		extern char *kernelfile;
d283 1
d285 3
a287 2
		kernelfile = (char *)envvar;
	}
d290 2
a291 2
int
main()
d293 8
a300 2
	boot(0);
	return 0;
@


1.1
log
@Work in progress standalone boot blocks for OpenBSD/loongson systems. Will
load a kernel from the OpenBSD partition, with symbols.
However:
- does not work on gdium (usb i/o errors)
- no countdown due to PMON limitations, so either `bsd' in the PMON
  environment contains a kernel filename to load, and it will get loaded
  immediately, or it doesn't (e.g. the variable does no exist) and you get
  a prompt and can pass options to the kernel. Note that /etc/boot.conf
  commands can still be used in both cases.
- does not work for me when loaded automatically from PMON (put in the `al'
  environment variable). However, `boot $al' works fine. Need to investigate.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a50 2
int	pmon_quirks = 0;

d132 1
a132 1
	size_t bootpathlen;
d141 2
a142 1
	 * - automatic load from `al' environment variable.
a147 1
		/* manual load */
d150 1
d158 3
a161 3
	} else {
		/* automatic load */
		bootpath = pmon_getenv("al");
d191 1
a191 1
	if (bootpath != NULL) {
d196 4
d201 1
a201 5
		tmp = pmon_getenv("Version");
		if (tmp != NULL && strncmp(tmp, "Gdium", 5) == 0)
			strlcpy(path, "usbg0", BOOTDEVLEN);
		else
			strlcpy(path, "wd0", BOOTDEVLEN);
a202 1
	strlcat(path, "a", BOOTDEVLEN);
d224 2
d228 1
a228 1
	 * has an horribly castrated PMON.
d231 10
a240 4
	if (envvar != NULL && strncmp(envvar, "Gdium", 5) == 0)
		pmon_quirks |= PQ_GDIUM;

	cninit();
@

