head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.24
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.26
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.22
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.18
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.20
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.12
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.16
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.14
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.03.19.13.27;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.17.21.25.49;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.16.21.28.39;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.14.22.39.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@/*	$OpenBSD: libsa.h,v 1.4 2010/04/03 19:13:27 miod Exp $	*/

/*
 * Copyright (c) 2010 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <lib/libsa/stand.h>

#define	DEFAULT_KERNEL_ADDRESS	0

/* where the initrd is loaded */
#define	INITRD_BASE	PHYS_TO_CKSEG0(0x04000000)

/*
 * MD interfaces for MI boot(9)
 */
void	devboot(dev_t, char *);
void	machdep(void);
void	run_loadfile(u_long *, int);

/*
 * PMON console
 */
void	pmon_cnprobe(struct consdev *);
void	pmon_cninit(struct consdev *);
int	pmon_cngetc(dev_t);
void	pmon_cnputc(dev_t, int);

/*
 * PMON I/O
 */
int	pmon_iostrategy(void *, int, daddr32_t, size_t, void *, size_t *);
int	pmon_ioopen(struct open_file *, ...);
int	pmon_ioclose(struct open_file *);

/*
 * INITRD I/O
 */
int	rd_iostrategy(void *, int, daddr32_t, size_t, void *, size_t *);
int	rd_ioopen(struct open_file *, ...);
int	rd_ioclose(struct open_file *);
int	rd_isvalid(void);
void	rd_invalidate(void);

/*
 * INITRD ``filesystem''
 */
int	rdfs_open(char *path, struct open_file *f);
int	rdfs_close(struct open_file *f);
int	rdfs_read(struct open_file *f, void *buf, size_t size, size_t *resid);
int	rdfs_write(struct open_file *f, void *buf, size_t size, size_t *resid);
off_t	rdfs_seek(struct open_file *f, off_t offset, int where);
int	rdfs_stat(struct open_file *f, struct stat *sb);
int	rdfs_readdir(struct open_file *f, char *name);

extern int pmon_argc;
extern int32_t *pmon_argv;
extern int32_t *pmon_envp;
extern int32_t pmon_callvec;

extern char pmon_bootdev[];

extern char *kernelfile;
@


1.4
log
@Minor reliability fixes:
- clear initrd signature before returning to PMON or to the loaded kernel
- fail /etc/boot.conf access when loading from an initrd image, instead of
  letting it point to the beginning of the kernel image and have the code
  complain of lines being too long.
Bump minor version.
@
text
@d1 1
a1 1
/*	$OpenBSD: libsa.h,v 1.3 2010/02/17 21:25:49 miod Exp $	*/
d44 1
a44 1
int	pmon_iostrategy(void *, int, daddr_t, size_t, void *, size_t *);
d51 1
a51 1
int	rd_iostrategy(void *, int, daddr_t, size_t, void *, size_t *);
@


1.3
log
@If PMON has loaded an initrd binary, and this binary looks like a valid
ELF image, assume it's the kernel and try to boot it immediately.

This allows a Gdium system with both the bootloader and the kernel image on
an ext2fs partition, with `al' pointing to the bootblocks and `rd' pointing
to the kernel in PMON environment, to boot a kernel with proper kernel
symbols, for the first time.
(please don't get me started on how reliable `load -k' is on the Gdium)

Bump bootblocks version to 0.2.
@
text
@d1 1
a1 1
/*	$OpenBSD: libsa.h,v 1.2 2010/02/16 21:28:39 miod Exp $	*/
d55 1
d74 2
@


1.2
log
@Actually, both the Gdium and the Lemote PMON reset the USB controllers
before transferring control to any binary, so trying to boot anything
on the Gdium without bringing half the kernel code is a no-go.

So, only keep `wd' as a possible boot device, for the Lemote systems,
and complain loudly if run on a Gdium.
@
text
@d1 1
a1 1
/*	$OpenBSD: libsa.h,v 1.1 2010/02/14 22:39:33 miod Exp $	*/
d23 3
d47 19
@


1.1
log
@Work in progress standalone boot blocks for OpenBSD/loongson systems. Will
load a kernel from the OpenBSD partition, with symbols.
However:
- does not work on gdium (usb i/o errors)
- no countdown due to PMON limitations, so either `bsd' in the PMON
  environment contains a kernel filename to load, and it will get loaded
  immediately, or it doesn't (e.g. the variable does no exist) and you get
  a prompt and can pass options to the kernel. Note that /etc/boot.conf
  commands can still be used in both cases.
- does not work for me when loaded automatically from PMON (put in the `al'
  environment variable). However, `boot $al' works fine. Need to investigate.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a48 6

/*
 * Mask of PMON workarounds required due to castration by the vendor.
 */
#define	PQ_GDIUM	0x00000001
extern int pmon_quirks;
@

