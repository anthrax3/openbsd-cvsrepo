head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.12
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2016.11.06.16.42.00;	author tb;	state Exp;
branches;
next	1.4;
commitid	peo8JdlgBE9dXbST;

1.4
date	2014.07.12.23.34.54;	author jasper;	state Exp;
branches;
next	1.3;
commitid	r9k2SIaE5isJATNY;

1.3
date	2012.11.04.16.30.44;	author matthieu;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.17.21.25.49;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.17.19.51.30;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Do not create machine@@ symlinks in obj as root during includes:, but
defer their creation to later, so that they are owned by BUILDUSER.
This eliminates the last root-owned files in obj/ from 'make build'.
In addition, place a MACHINE == hppa test in hppa/stand/Makefile.inc
to avoid creating bogus symlinks on all other archs.

joint work with & ok natano, "let's try it" deraadt
@
text
@#	$OpenBSD: Makefile.inc,v 1.4 2014/07/12 23:34:54 jasper Exp $

NOMAN=
S=		${.CURDIR}/../../../..
BOOTDIR=	${S}/arch/loongson/stand/boot

CPPFLAGS+=	${SAABI} -mno-abicalls -D_NO_ABICALLS -DCONSPEED=9600 \
		-nostdinc -D__loongson__ \
		-I${S} -I${S}/lib/libsa \
		-I${.OBJDIR} -I${BOOTDIR}

LDSCRIPT=	${.CURDIR}/ld.script
LDFLAGS+=	${SALDFLAGS} -T ${LDSCRIPT} -e __start

AFLAGS+=	${SAABI}

.PATH:		${BOOTDIR}
SRCS=		start.S
SRCS+=		conf.c cons.c dev.c devopen.c exec.c machdep.c rd.c
.PATH:		${S}/arch/loongson/loongson
SRCS+=		pmon.c pmon32.S

#### MI boot code
.PATH:		${S}/stand/boot
SRCS+=		boot.c cmd.c vars.c

#### libkern
.PATH:		${S}/lib/libkern/arch/mips64 ${S}/lib/libkern
SRCS+=		strlcat.c strlcpy.c strlen.c
SRCS+=		udivdi3.c qdivrem.c

.if !make(clean) && !make(cleandir) && !make(includes) && !make(obj)
.BEGIN:
	@@([ -h machine ] || ln -s ${.CURDIR}/../../include machine)
	@@([ -h mips64 ] || ln -s ${.CURDIR}/../../../mips64/include mips64)
CLEANFILES+= machine mips64
.endif

${PROG}: ${OBJS} ${LIBSA}
	${LD} ${LDFLAGS} -o ${PROG} ${OBJS} ${LIBSA}
@


1.4
log
@unify cnspeed()
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2012/11/04 16:30:44 matthieu Exp $
d32 1
a32 1
.if !make(obj)
@


1.3
log
@Simplify Makefiles a bit, removing redundant stuff. ok espie@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 2010/02/17 21:25:49 miod Exp $
d7 1
a7 1
CPPFLAGS+=	${SAABI} -mno-abicalls -D_NO_ABICALLS \
@


1.2
log
@If PMON has loaded an initrd binary, and this binary looks like a valid
ELF image, assume it's the kernel and try to boot it immediately.

This allows a Gdium system with both the bootloader and the kernel image on
an ext2fs partition, with `al' pointing to the bootblocks and `rd' pointing
to the kernel in PMON environment, to boot a kernel with proper kernel
symbols, for the first time.
(please don't get me started on how reliable `load -k' is on the Gdium)

Bump bootblocks version to 0.2.
@
text
@d1 1
a1 3
#	$OpenBSD: Makefile.inc,v 1.1 2010/02/17 19:51:30 miod Exp $

.include	"${.CURDIR}/../Makefile.inc"
d40 1
a40 1
	${LD} ${LDFLAGS} -o ${PROG} ${OBJS} -L${LIBSADIR} ${LIBSA}
@


1.1
log
@Split boot/Makefile in case we need to build several boot.${VENDOR} compiled
from the same sources with different CFLAGS; the need for this has not arisen
yet but I fear it will hit the fan soon enough; no functional change in the
meantime.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2010/02/14 22:39:33 miod Exp $
d21 1
a21 1
SRCS+=		conf.c cons.c dev.c devopen.c exec.c machdep.c
@

