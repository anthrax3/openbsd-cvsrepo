head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.12
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.8
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.12
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.10
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.8
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2016.09.13.18.27.49;	author jasper;	state Exp;
branches;
next	1.6;
commitid	PHzGPdVfpKxkA6ei;

1.6
date	2013.12.28.02.53.04;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.06.18.44.49;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.03.19.13.27;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.17.21.25.49;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.16.21.28.39;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.14.22.39.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@crank bootloader version after .SUNW_ctf change

as discussed with jsing@@ it's easier this way to ensure people have
bootblocks capable of loading the section
@
text
@/*	$OpenBSD: conf.c,v 1.6 2013/12/28 02:53:04 deraadt Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)conf.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>

#include <dev/cons.h>

#include "libsa.h"
#include <lib/libsa/ufs.h>
#include <lib/libsa/cd9660.h>

const char version[] = "0.5";
#if 0	/* network code not compiled in */
int	debug = 0;
#endif

/*
 * Device configuration
 */
struct devsw devsw[] = {
	/* initrd */
	{ "rd",		rd_iostrategy, rd_ioopen, rd_ioclose, noioctl },
	/* ATA storage device */
	{ "wd",		pmon_iostrategy, pmon_ioopen, pmon_ioclose, noioctl }
};
int ndevs = nitems(devsw);

/*
 * Filesystem configuration
 */
struct fs_ops file_system[] = {
	/* initrd ``filesystem'' */
	{	rdfs_open,	rdfs_close,	rdfs_read,	rdfs_write,
		rdfs_seek,	rdfs_stat,	rdfs_readdir	},
	/* ufs filesystem */
	{	ufs_open,	ufs_close,	ufs_read,	ufs_write,
		ufs_seek,	ufs_stat,	ufs_readdir	},
	/* cd9660 filesystem - in case a cd image is dd'ed on non USB media */
	{	cd9660_open,	cd9660_close,	cd9660_read,	cd9660_write,
		cd9660_seek,	cd9660_stat,	cd9660_readdir	}
};
int nfsys = nitems(file_system);

/*
 * Console configuration
 */
struct consdev constab[] = {
	{ pmon_cnprobe, pmon_cninit, pmon_cngetc, pmon_cnputc },
	{ NULL }
};
struct consdev *cn_tab;
@


1.6
log
@crank the version
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.5 2010/12/06 18:44:49 jasper Exp $	*/
d42 1
a42 1
const char version[] = "0.4";
@


1.5
log
@- drop NENTS(), which was yet another copy of nitems().
no binary change


ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.4 2010/04/03 19:13:27 miod Exp $	*/
d42 1
a42 1
const char version[] = "0.3";
@


1.4
log
@Minor reliability fixes:
- clear initrd signature before returning to PMON or to the loaded kernel
- fail /etc/boot.conf access when loading from an initrd image, instead of
  letting it point to the beginning of the kernel image and have the code
  complain of lines being too long.
Bump minor version.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.3 2010/02/17 21:25:49 miod Exp $	*/
d56 1
a56 1
int ndevs = NENTS(devsw);
d72 1
a72 1
int nfsys = NENTS(file_system);
@


1.3
log
@If PMON has loaded an initrd binary, and this binary looks like a valid
ELF image, assume it's the kernel and try to boot it immediately.

This allows a Gdium system with both the bootloader and the kernel image on
an ext2fs partition, with `al' pointing to the bootblocks and `rd' pointing
to the kernel in PMON environment, to boot a kernel with proper kernel
symbols, for the first time.
(please don't get me started on how reliable `load -k' is on the Gdium)

Bump bootblocks version to 0.2.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.2 2010/02/16 21:28:39 miod Exp $	*/
d42 1
a42 1
const char version[] = "0.2";
@


1.2
log
@Actually, both the Gdium and the Lemote PMON reset the USB controllers
before transferring control to any binary, so trying to boot anything
on the Gdium without bringing half the kernel code is a no-go.

So, only keep `wd' as a possible boot device, for the Lemote systems,
and complain loudly if run on a Gdium.
@
text
@d1 1
a1 1
/*	$OpenBSD: conf.c,v 1.1 2010/02/14 22:39:33 miod Exp $	*/
d42 1
a42 1
const char version[] = "0.1";
d51 3
d62 9
a70 4
	{ ufs_open,    ufs_close,    ufs_read,    ufs_write,    ufs_seek,
	  ufs_stat,    ufs_readdir },
	{ cd9660_open, cd9660_close, cd9660_read, cd9660_write, cd9660_seek,
	  cd9660_stat, cd9660_readdir }
@


1.1
log
@Work in progress standalone boot blocks for OpenBSD/loongson systems. Will
load a kernel from the OpenBSD partition, with symbols.
However:
- does not work on gdium (usb i/o errors)
- no countdown due to PMON limitations, so either `bsd' in the PMON
  environment contains a kernel filename to load, and it will get loaded
  immediately, or it doesn't (e.g. the variable does no exist) and you get
  a prompt and can pass options to the kernel. Note that /etc/boot.conf
  commands can still be used in both cases.
- does not work for me when loaded automatically from PMON (put in the `al'
  environment variable). However, `boot $al' works fine. Need to investigate.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 1
a51 2
	{ "wd",		pmon_iostrategy, pmon_ioopen, pmon_ioclose, noioctl },
	{ "usbg",	pmon_iostrategy, pmon_ioopen, pmon_ioclose, noioctl }
@

