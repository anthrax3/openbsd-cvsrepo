head	1.8;
access;
symbols
	OPENBSD_6_1:1.7.0.4
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.10
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	xmas_lemote:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2017.07.30.16.05.24;	author visa;	state Exp;
branches;
next	1.7;
commitid	OXR2nDTbL2KN6sIb;

1.7
date	2017.01.19.15.09.04;	author visa;	state Exp;
branches;
next	1.6;
commitid	8FHInuctPjWFPH6r;

1.6
date	2016.01.05.05.27.54;	author visa;	state Exp;
branches;
next	1.5;
commitid	916i76I5mjNtTg33;

1.5
date	2015.08.15.22.31.38;	author miod;	state Exp;
branches;
next	1.4;
commitid	yF3Npu6AQ8EgYJml;

1.4
date	2014.03.31.20.21.18;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.21.12.20.30;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.09.23.34.26;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.23.10.32.35;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.11.23.10.32.35;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Define MAXCPUS per mips64 port.
@
text
@/* $OpenBSD: cpu.h,v 1.7 2017/01/19 15:09:04 visa Exp $ */
/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell and Rick Macklem.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	Copyright (C) 1989 Digital Equipment Corporation.
 *	Permission to use, copy, modify, and distribute this software and
 *	its documentation for any purpose and without fee is hereby granted,
 *	provided that the above copyright notice appears in all copies.
 *	Digital Equipment Corporation makes no representations about the
 *	suitability of this software for any purpose.  It is provided "as is"
 *	without express or implied warranty.
 *
 *	from: @@(#)cpu.h	8.4 (Berkeley) 1/4/94
 */

#ifdef	_KERNEL

#if defined(MULTIPROCESSOR) && !defined(_LOCORE)
#define MAXCPUS 4
struct cpu_info;
struct cpu_info *hw_getcurcpu(void);
void hw_setcurcpu(struct cpu_info *);
void hw_cpu_boot_secondary(struct cpu_info *);
void hw_cpu_hatch(struct cpu_info *);
void hw_cpu_spinup_trampoline(struct cpu_info *);
int hw_ipi_intr_establish(int (*)(void *), u_long);
void hw_ipi_intr_set(u_long);
void hw_ipi_intr_clear(u_long);
#endif	/* MULTIPROCESSOR && !_LOCORE */

#if defined(CPU_LOONGSON2) && !defined(CPU_LOONGSON3)
#define	Mips_SyncCache(ci)			\
	Loongson2_SyncCache((ci))
#define	Mips_InvalidateICache(ci, va, l)	\
	Loongson2_InvalidateICache((ci), (va), (l))
#define	Mips_InvalidateICachePage(ci, va)	\
	Loongson2_InvalidateICachePage((ci), (va))
#define	Mips_SyncICache(ci)			\
	Loongson2_SyncICache((ci))
#define	Mips_SyncDCachePage(ci, va, pa)		\
	Loongson2_SyncDCachePage((ci), (va), (pa))
#define	Mips_HitSyncDCachePage(ci, va, pa)	\
	Loongson2_SyncDCachePage((ci), (va), (pa))
#define	Mips_HitSyncDCache(ci, va, l)	\
	Loongson2_HitSyncDCache((ci), (va), (l))
#define	Mips_IOSyncDCache(ci, va, l, h)	\
	Loongson2_IOSyncDCache((ci), (va), (l), (h))
#define	Mips_HitInvalidateDCache(ci, va, l)	\
	Loongson2_HitInvalidateDCache((ci), (va), (l))
#endif

#if defined(CPU_LOONGSON3) && !defined(CPU_LOONGSON2)
#define	Mips_SyncCache(ci)			\
	Loongson3_SyncCache((ci))
#define	Mips_InvalidateICache(ci, va, l)	\
	Loongson3_InvalidateICache((ci), (va), (l))
#define	Mips_InvalidateICachePage(ci, va)	\
	Loongson3_InvalidateICachePage((ci), (va))
#define	Mips_SyncICache(ci)			\
	Loongson3_SyncICache((ci))
#define	Mips_SyncDCachePage(ci, va, pa)		\
	Loongson3_SyncDCachePage((ci), (va), (pa))
#define	Mips_HitSyncDCachePage(ci, va, pa)	\
	Loongson3_SyncDCachePage((ci), (va), (pa))
#define	Mips_HitSyncDCache(ci, va, l)	\
	Loongson3_HitSyncDCache((ci), (va), (l))
#define	Mips_IOSyncDCache(ci, va, l, h)	\
	Loongson3_IOSyncDCache((ci), (va), (l), (h))
#define	Mips_HitInvalidateDCache(ci, va, l)	\
	Loongson3_HitInvalidateDCache((ci), (va), (l))
#endif

#endif	/* _KERNEL */

#include <mips64/cpu.h>
@


1.7
log
@Extend struct platform with MP control functions, and add bootstrap code
for secondary CPUs.

Discussed with miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.h,v 1.6 2016/01/05 05:27:54 visa Exp $ */
d47 1
@


1.6
log
@Some implementations of HitSyncDCache() call pmap_extract() for va->pa
conversion. Because pmap_extract() acquires the PTE mutex, a "locking
against myself" panic is triggered if the cache routine gets called in
a context where the mutex is already held.

In the pmap, all calls to HitSyncDCache() are for a whole page. Add a
new cache routine, HitSyncDCachePage(), which gets both the va and the
pa of a page. This removes the need of the va->pa conversion. The new
routine has the same signature as SyncDCachePage(), allowing reuse of
the same routine for cache implementations that do not need differences
between "Hit" and non-"Hit" routines.

With the diff, POWER Indigo2 R8000 boots multiuser again. Tested on sgi
GENERIC-IP27.MP and octeon GENERIC.MP, too.

Diff from miod@@, ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.h,v 1.5 2015/08/15 22:31:38 miod Exp $ */
d45 12
@


1.5
log
@Some bits for Loongson 3A support.
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.h,v 1.4 2014/03/31 20:21:18 miod Exp $ */
d57 2
d77 2
@


1.4
log
@Due the virtually indexed nature of the L1 instruction cache on most mips
processors, every time a new text page is mapped in a pmap, the L1 I$ is
flushed for the va spanned by this page.

Since we map pages of our binaries upon demand, as they get faulted in, but
uvm_fault() tries to map the few neighbour pages, this can end up in a
bunch of pmap_enter() calls in a row, for executable mappings. If the L1
I$ is small enough, this can cause the whole L1 I$ cache to be flushed
several times.

Change pmap_enter() to postpone these flushes by only registering the
pending flushes, and have pmap_update() perform them. The cpu-specific
cache code can then optimize this to avoid unnecessary operations.

Tested on R4000SC, R4600SC, R5000SC, RM7000, R10000 with 4KB and 16KB
page sizes (coherent and non-coherent designs), and Loongson 2F by mikeb@@ and
me. Should not affect anything on Octeon since there is no way to flush a
subset of I$ anyway.
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.h,v 1.3 2012/04/21 12:20:30 miod Exp $ */
d46 1
d63 20
@


1.3
log
@Rework the signature of the cache handling routines again. It makes more sense
to pass both the virtual and physical addresses of the page to clean to
SyncDCachePage, which is the only routine using `Index' operations on the data
cache, which might be virtually indexed at some levels but physically indexed
at others. On the other hand, it does not make any sense to pass a physical
address to routines using `Hit' operations (and they were discarding them
anyway).

In addition to making things cleaner, this fixes sporadic userland misbehaviour
(read: SIGSGEV) on RM7000 O2 systems.
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.h,v 1.2 2010/01/09 23:34:26 miod Exp $ */
d50 4
@


1.2
log
@Move cache information from global variables to per-cpu_info fields; this
allows processors with different cache sizes to be used.

Cache management routines now take a struct cpu_info * as first parameter.
@
text
@d1 1
a1 1
/* $OpenBSD: cpu.h,v 1.1.1.1 2009/11/23 10:32:35 miod Exp $ */
d51 7
a57 7
	Loongson2_SyncDCachePage((ci), (pa))
#define	Mips_HitSyncDCache(ci, va, pa, l)	\
	Loongson2_HitSyncDCache((ci), (pa), (l))
#define	Mips_IOSyncDCache(ci, va, pa, l, h)	\
	Loongson2_IOSyncDCache((ci), (pa), (l), (h))
#define	Mips_HitInvalidateDCache(ci, va, pa, l)	\
	Loongson2_HitInvalidateDCache((ci), (pa), (l))
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d46 12
a57 12
#define	Mips_SyncCache()			\
	Loongson2_SyncCache()
#define	Mips_InvalidateICache(va, l)		\
	Loongson2_InvalidateICache((va), (l))
#define	Mips_SyncDCachePage(va, pa)		\
	Loongson2_SyncDCachePage((pa))
#define	Mips_HitSyncDCache(va, pa, l)		\
	Loongson2_HitSyncDCache((pa), (l))
#define	Mips_IOSyncDCache(va, pa, l, h)		\
	Loongson2_IOSyncDCache((pa), (l), (h))
#define	Mips_HitInvalidateDCache(va, pa, l)	\
	Loongson2_HitInvalidateDCache((pa), (l))
@


1.1.1.1
log
@By popular demand and peer pressure, check-in work in progress work to support
the Yeelong Lemote mips-based netbook. Kernel bits only for now, needs
polishing; most of this work done during h2k9 last month, although the
porting effort started earlier this year.
@
text
@@
