head	1.54;
access;
symbols
	OPENBSD_6_0:1.46.0.2
	OPENBSD_6_0_BASE:1.46
	OPENBSD_5_9:1.45.0.4
	OPENBSD_5_9_BASE:1.45
	OPENBSD_5_8:1.45.0.6
	OPENBSD_5_8_BASE:1.45
	OPENBSD_5_7:1.45.0.2
	OPENBSD_5_7_BASE:1.45
	OPENBSD_5_6:1.40.0.4
	OPENBSD_5_6_BASE:1.40
	OPENBSD_5_5:1.39.0.4
	OPENBSD_5_5_BASE:1.39
	OPENBSD_5_4:1.38.0.2
	OPENBSD_5_4_BASE:1.38
	OPENBSD_5_3:1.35.0.2
	OPENBSD_5_3_BASE:1.35
	OPENBSD_5_2:1.33.0.4
	OPENBSD_5_2_BASE:1.33
	OPENBSD_5_1_BASE:1.33
	OPENBSD_5_1:1.33.0.2
	OPENBSD_5_0:1.32.0.2
	OPENBSD_5_0_BASE:1.32
	OPENBSD_4_9:1.29.0.2
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.26.0.2
	OPENBSD_4_8_BASE:1.26
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	xmas_lemote:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@# @;


1.54
date	2017.03.18.17.31.31;	author visa;	state Exp;
branches;
next	1.53;
commitid	vFbZyjXkw28QhPsX;

1.53
date	2016.11.29.09.08.34;	author mpi;	state Exp;
branches;
next	1.52;
commitid	yUJbDchhkVm6F1HA;

1.52
date	2016.11.15.09.08.38;	author natano;	state Exp;
branches;
next	1.51;
commitid	uQeojuKIzgIWOEnv;

1.51
date	2016.10.27.20.44.20;	author natano;	state Exp;
branches;
next	1.50;
commitid	eR4vLZnymgQjVxbj;

1.50
date	2016.10.24.18.26.17;	author deraadt;	state Exp;
branches;
next	1.49;
commitid	84F8eQ949AbxN83e;

1.49
date	2016.10.15.13.45.08;	author deraadt;	state Exp;
branches;
next	1.48;
commitid	TtDw6IYffbT8oPEE;

1.48
date	2016.10.14.18.43.01;	author deraadt;	state Exp;
branches;
next	1.47;
commitid	dUZQxi6w3YqAb6KQ;

1.47
date	2016.09.24.19.13.03;	author kettenis;	state Exp;
branches;
next	1.46;
commitid	N8Z5nlTJHj3pmauV;

1.46
date	2016.04.29.12.44.52;	author mpi;	state Exp;
branches;
next	1.45;
commitid	Vbd8R29nZBKG6KtM;

1.45
date	2015.01.13.01.12.49;	author deraadt;	state Exp;
branches;
next	1.44;
commitid	xEYSgcMiEU7N21VE;

1.44
date	2015.01.11.19.25.13;	author tedu;	state Exp;
branches;
next	1.43;
commitid	Jqptj5xcqx8IMSNU;

1.43
date	2014.11.18.01.17.37;	author deraadt;	state Exp;
branches;
next	1.42;
commitid	Qj1gzxwenHvm4gTb;

1.42
date	2014.10.04.18.10.14;	author brad;	state Exp;
branches;
next	1.41;
commitid	iaz4yUwbbR9oynrV;

1.41
date	2014.09.26.14.39.43;	author jsg;	state Exp;
branches;
next	1.40;
commitid	0pCintPvtppH9B3p;

1.40
date	2014.06.27.17.28.10;	author miod;	state Exp;
branches;
next	1.39;
commitid	4oLMUaAeehjjGoUk;

1.39
date	2013.10.15.19.23.28;	author guenther;	state Exp;
branches;
next	1.38;

1.38
date	2013.06.23.20.33.51;	author miod;	state Exp;
branches;
next	1.37;

1.37
date	2013.04.01.19.12.13;	author miod;	state Exp;
branches;
next	1.36;

1.36
date	2013.03.30.07.25.20;	author tedu;	state Exp;
branches;
next	1.35;

1.35
date	2012.08.28.21.03.32;	author pascal;	state Exp;
branches;
next	1.34;

1.34
date	2012.08.23.15.09.10;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.32;

1.32
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.31;

1.31
date	2011.07.06.02.08.05;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2011.04.15.02.41.28;	author guenther;	state Exp;
branches;
next	1.29;

1.29
date	2010.12.30.18.49.31;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2010.12.02.20.57.08;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2010.12.02.04.35.02;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2010.06.01.23.49.22;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.24;

1.24
date	2010.05.25.17.27.55;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2010.05.25.15.05.01;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2010.05.25.02.35.02;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2010.05.24.23.19.22;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2010.05.24.17.40.33;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2010.05.24.14.59.15;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2010.05.23.16.56.07;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2010.04.28.15.31.33;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2010.04.27.17.25.19;	author drahn;	state Exp;
branches;
next	1.15;

1.15
date	2010.04.27.16.54.53;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2010.04.27.16.50.15;	author jsg;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.27.15.40.23;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.27.06.46.26;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.27.05.07.29;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2010.04.27.05.05.21;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.27.04.31.47;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.27.03.37.37;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.26.22.21.15;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.26.22.11.37;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.26.20.50.16;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.26.18.58.30;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.03.21.45.21;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.03.14.17.26;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.25.21.05.14;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.12.25.21.05.14;	author miod;	state Exp;
branches;
next	;


desc
@@


1.54
log
@Build mips64 kernels with -ffreestanding.

OK kettenis@@
@
text
@#	$OpenBSD: Makefile.loongson,v 1.53 2016/11/29 09:08:34 mpi Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip
AS?=	as
CC?=	cc
LD?=	ld ${ENDIAN}

AS+=${ENDIAN}
CC+=${ENDIAN}
LD+=${ENDIAN}

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I${.OBJDIR} -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__ -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-uninitialized -Wno-pointer-sign \
		-Wframe-larger-than=2047

CMACHFLAGS=	-mno-abicalls ${ABI} -msoft-float -Wa,-mfix-loongson2f-btb -G 0
CMACHFLAGS+=	-ffreestanding ${NOPIE_FLAGS}
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif

DEBUG?=		-g
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CWARNFLAGS} ${CMACHFLAGS}
LDSCRIPT=	${_machdir}/conf/ld.script
LINKFLAGS=	-e start -T ${LDSCRIPT} -Ttext=${LINK_ADDRESS} -warn-common -nopie

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ${LDSCRIPT}
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@

.if ${DEBUG} == "-g"
STRIPFLAGS=	-S
SYSTEM_LD_TAIL+=; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

clean:
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} param.c

cleandir: clean
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c

symbols.sort: ${_machdir}/${_mach}/symbols.raw
	grep -v '^#' ${_machdir}/${_mach}/symbols.raw \
	    | sed 's/^	//' | sort -u > symbols.sort

depend obj:

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

locore.o: ${_machdir}/${_mach}/locore.S assym.h
context.o cp0access.o exception.o: assym.h
lcore_access.o lcore_ddb.o lcore_float.o tlbhandler.o: assym.h
pmon32.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif

%RULES
@


1.53
log
@Build kernel with DEBUG=-g by default.

This will allow us to extract type informations from DWARF2 sections.  It
also makes developer life easier as debug information are now included in
every object.

Resulting kernels will be stripped using strip(1) instead of ld(1).

Kernel build time increases by approximately 10%.  However it is still
possible to disable this by defining DEBUG="".

ok kettenis@@, bluhm@@, natano@@, jasper@@, reyk@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.52 2016/11/15 09:08:38 natano Exp $
d34 1
a34 1
		-Wno-main -Wno-uninitialized -Wno-pointer-sign \
d38 1
a38 3
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
@


1.52
log
@Clean up the kernel Makefile's:

- Remove the 'lint' target. lint has been removed with OpenBSD 5.2.
- Remove the 'tags' target. It does nothing of value.
- Replace 'clean::' with 'clean:', as requested by espie and millert,
  and remove files from the 'clean' target, that are never generated.
- Don't create a file called 'depend' in 'make depend', but just do
  nothing instead.

ok mpi tb
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.51 2016/10/27 20:44:20 natano Exp $
d45 1
a85 1
DEBUG?=
@


1.51
log
@We don't generate an eddep script for kernel builds nowadays. The last
reference to eddep in the kernel Makefile I could find is in 4.3BSD,
released some 30 years ago.

ok tb millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.50 2016/10/24 18:26:17 deraadt Exp $
d127 2
a128 3
clean::
	rm -f *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.* ${DB_STRUCTINFO} param.c
a132 5
lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

d137 1
a137 7
obj:

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"
@


1.50
log
@make cleandir should skip the version file; ok otto millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.49 2016/10/15 13:45:08 deraadt Exp $
d128 1
a128 1
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
@


1.49
log
@cleandir: target for kernel compile directories
ok natano
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.48 2016/10/14 18:43:01 deraadt Exp $
d132 1
a132 1
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c version
@


1.48
log
@Kernel builds now happen in compile/CONFIG/obj@@ -> /usr/obj/... [or ./obj/,
if srctree is not rooted at /usr/src].  As a result, stock GENERIC & RAMDISK
kernels are commited to the tree, to ensure the src tree can be "readonly"
during builds, with all writes occuring inside the obj space.  config -b
options are handled by ../Makefile.inc.  The canonical new way to configure
one of these kernels is:
    % cd /sys/arch/amd64/compile/GENERIC.MP
    % doas make obj
    % make config
    % make
    % doas cp obj/bsd /bsd
The build infrastructure will use this new mechanism in a de-escalation
way using BUILDUSER.
Much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.47 2016/09/24 19:13:03 kettenis Exp $
d129 4
a132 1
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}
@


1.47
log
@Add -Wno-pointer-sign to all our gcc4 architectures.

ok patrick@@ (for armv7), deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.46 2016/04/29 12:44:52 mpi Exp $
d31 1
a31 1
INCLUDES=	-nostdinc -I$S -I. -I$S/arch
d139 2
@


1.46
log
@Do not remove local symbols from the table.

ddb(4) can now see static functions.  That doesn't mean we should start
declaring functions as ``static'', however it helps for the few existing
exceptions.

ok deraadt@@, kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.45 2015/01/13 01:12:49 deraadt Exp $
d34 1
a34 1
		-Wno-main -Wno-uninitialized \
@


1.45
log
@for the install: target, use cmp as a rough attempt for avoiding repeated
make install
from Simon Nicolussi
ok jsing tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.44 2015/01/11 19:25:13 tedu Exp $
d87 1
a87 2
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
d93 1
a93 1
LINKFLAGS+=	-x
@


1.44
log
@switch prototype warnings to implicit-declaration warnings.
This should catch all the same bad cases, but be a little less aggravating
in circumstances where a prototype isn't necessary
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.43 2014/11/18 01:17:37 deraadt Exp $
d163 1
a163 2
	rm -f /obsd
	ln /bsd /obsd
@


1.43
log
@(except for the arm architectures...) unify the way the ld.script is
used and depended, mimicking new changes by guenther to amd64.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.42 2014/10/04 18:10:14 brad Exp $
d33 1
a33 1
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
@


1.42
log
@Switch the kernel configs over to using -Wframe-larger-than= instead of
-Wstack-larger-than-. This is what modern GCC supports as well as LLVM.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.41 2014/09/26 14:39:43 jsg Exp $
d48 2
a49 2
LINKFLAGS=	-e start -T ${_machdir}/conf/ld.script -Ttext=${LINK_ADDRESS} \
		-warn-common -nopie
d79 1
a79 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
@


1.41
log
@remove the last uses of -Wno-format
ok miod@@ deraadt@@ jsing@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.40 2014/06/27 17:28:10 miod Exp $
d35 1
a35 1
		-Wstack-larger-than-2047
@


1.40
log
@Update list of .S depencies over assym.h.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.39 2013/10/15 19:23:28 guenther Exp $
d34 1
a34 1
		-Wno-main -Wno-uninitialized -Wno-format \
@


1.39
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.38 2013/06/23 20:33:51 miod Exp $
d153 3
a155 2
cache_loongson2.o context.o cp0access.o exception.o: assym.h
fp.o lcore_access.o lcore_float.o tlbhandler.o lcore_ddb.o pmon32.o: assym.h
@


1.38
log
@Stop using -traditional-cpp on gcc3/4 platforms.

Add CWARNFLAGS to the command line when using -xassembler-with-cpp. We are
mostly interested in -Werror here.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.37 2013/04/01 19:12:13 miod Exp $
d147 1
a147 1
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
d149 1
a149 1
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
@


1.37
log
@Build mips kernels with -G 0, to disable use of so-called `small' data and
bss sections. The current kernel linker script is not gp-friendly enough for
that; and while gas 2.15 was not attempting to output gp-relative relocations
for variables which might have ended up in .sdata or .sbss, gas 2.17 will,
and the kernel will fail to link.

To be improved eventually with a better kernel ld script putting the
gp-addressable sections close enough to gp... and making sure kernel gp is
reloaded in all the userland->kernel code paths which might need gp in the
kernel.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.36 2013/03/30 07:25:20 tedu Exp $
d47 1
a47 1
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CMACHFLAGS}
@


1.36
log
@reorder include search directories. cuts lookups by quite a bit.
ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.35 2012/08/28 21:03:32 pascal Exp $
d37 1
a37 1
CMACHFLAGS=	-mno-abicalls ${ABI} -msoft-float -Wa,-mfix-loongson2f-btb
@


1.35
log
@Add -nopie to LINKFLAGS on ELF architectures.  Note that this needs an
updated gcc and ld to understand the new -nopie flag.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.34 2012/08/23 15:09:10 deraadt Exp $
d31 1
a31 1
INCLUDES=	-nostdinc -I. -I$S -I$S/arch
@


1.34
log
@missing ${NOPIE_FLAGS}; ok pascal
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.33 2011/11/08 18:41:34 matthieu Exp $
d48 2
a49 1
LINKFLAGS=	-e start -T ${_machdir}/conf/ld.script -Ttext=${LINK_ADDRESS} -warn-common
@


1.33
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.32 2011/07/07 22:28:18 guenther Exp $
d40 1
a40 1
		-fno-builtin-log2 -fno-builtin-malloc 
@


1.32
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.31 2011/07/06 02:08:05 tedu Exp $
a12 1
MKDEP?=	mkdep
@


1.31
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.30 2011/04/15 02:41:28 guenther Exp $
d173 5
a177 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.30
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.29 2010/12/30 18:49:31 deraadt Exp $
d129 1
a129 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.29
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.28 2010/12/02 20:57:08 deraadt Exp $
d33 1
a33 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__
d78 2
a79 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d99 5
d107 2
a108 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d141 3
a146 14
AFILES=	${_machdir}/${_mach}/locore.S
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d148 1
a148 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d166 12
@


1.28
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.27 2010/12/02 04:35:02 deraadt Exp $
d101 2
a102 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.27
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.26 2010/06/01 23:49:22 deraadt Exp $
d77 2
a78 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d80 2
a81 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.26
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.25 2010/05/28 14:27:08 guenther Exp $
d77 1
a77 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS}
d80 2
a81 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.25
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.24 2010/05/25 17:27:55 deraadt Exp $
d49 1
a49 2
LINKFLAGS=	-e start -T ${_machdir}/conf/ld.script -Ttext=${LINK_ADDRESS}
STRIPFLAGS=	-g -x
d87 1
@


1.24
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.23 2010/05/25 15:05:01 deraadt Exp $
d101 1
a101 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.23
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.22 2010/05/25 02:35:02 deraadt Exp $
a28 2
_mach?=		loongson
_arch?=		mips64
@


1.22
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.21 2010/05/24 23:19:22 deraadt Exp $
d160 2
a161 1
	${NORMAL_S}
@


1.21
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.20 2010/05/24 17:40:33 deraadt Exp $
a140 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d142 1
a142 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.20
log
@CPP and TOUCH are not used
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.19 2010/05/24 14:59:15 deraadt Exp $
d38 1
a38 1
		-Wstack-larger-than-2047 -Wvariable-decl
d52 1
a52 1
STRIPFLAGS=	-g -X -x
a99 16
clean::
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}

lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

symbols.sort: ${_machdir}/${_mach}/symbols.raw
	grep -v '^#' ${_machdir}/${_mach}/symbols.raw \
	    | sed 's/^	//' | sort -u > symbols.sort

locore.o: ${_machdir}/${_mach}/locore.S assym.h
	${NORMAL_S}

a106 11
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

tags:
	@@echo "see $S/kern/Makefile for tags"

d124 18
a141 2
SRCS=   ${_machdir}/${_mach}/locore.S \
	param.c ioconf.c ${CFILES} ${SFILES}
d144 1
a144 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/${_mach}/locore.S
d159 3
@


1.19
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.18 2010/05/23 16:56:07 deraadt Exp $
a17 1
CPP?=	cpp
a18 1
TOUCH?=	touch
d20 1
a20 1
CPP+=${ENDIAN}
a21 1
AS+=${ENDIAN}
d157 1
d159 1
@


1.18
log
@Does not need -Dloongson, and instead, but -D__loongson__ is nice since that is
the mach (arch is mips64).  Also move towards passing $PARAM around in CPPFLAGS,
instead of compiling param.c in a special way, as discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.17 2010/04/28 15:31:33 deraadt Exp $
d13 3
a17 2
MKDEP?=	mkdep
SIZE?=	size
a19 1
STRIP?=	strip
d39 2
a40 2
CDIAGFLAGS=	-Werror -Wall -Wmissing-prototypes -Wstrict-prototypes \
		-Wno-uninitialized -Wno-format -Wno-main \
d42 5
a46 4
CMACHFLAGS+=	-mno-abicalls ${ABI} -msoft-float \
		-Wa,-mfix-loongson2f-btb \
		-fno-builtin-printf -fno-builtin-log -fno-builtin-log2 \
		-fno-builtin-malloc
d50 1
d52 3
a54 2
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-x assembler-with-cpp -D_LOCORE ${CMACHFLAGS}
d63 5
a69 1

a70 1
NORMAL_S_C=	${AS}  ${COPTS} ${PARAM} $< -o $@@
d85 3
a87 9
SYSTEM_LD_HEAD=	rm -f $@@
SYSTEM_LD=	@@if [ X${DEBUG} = X-g ]; \
		then strip=-X; \
		else strip=-x; \
		fi; \
		echo ${LD} $$strip -o $@@ -e start -T ${_machdir}/conf/ld.script \
			-Ttext=${LINK_ADDRESS} '$${SYSTEM_OBJ}' vers.o; \
		${LD} $$strip -o $@@ -e start -T ${_machdir}/conf/ld.script \
			-Ttext=${LINK_ADDRESS} ${SYSTEM_OBJ} vers.o
d92 1
d97 2
d104 1
a104 1
	rm -f eddep bsd bsd.gdb bsd.ecoff tags *.o [a-z]*.s \
d108 3
a110 2
	@@lint -hbxn -DGENERIC -Dvolatile= ${COPTS} ${PARAM} -UKGDB \
	    ${CFILES} ioconf.c param.c
@


1.17
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.16 2010/04/27 17:25:19 drahn Exp $
d38 1
a38 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D__${_mach}__
d62 1
a62 1
NORMAL_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<
d138 1
a138 1
	${NORMAL_C_C}
@


1.16
log
@Killing a few more diffs for theo, arm makes #LINKFLAGS, beagle cleanup,
INCLUDE= common.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.15 2010/04/27 16:54:53 deraadt Exp $
d102 1
a102 1
	    Errs errs linterrs makelinks assym.h ${DB_STRUCTINFO}
d104 1
a104 1
lint: /tmp param.c
d127 2
a128 2
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink
@


1.15
log
@Unifity CPPFLAGS= (using ${_mach}), SYSTEM_LD_TAIL= (always on one line),
and SRCS= (common files always after the \)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.14 2010/04/27 16:50:15 jsg Exp $
d37 1
a37 1
INCLUDES=	-I. -I$S -I$S/arch -nostdinc
@


1.14
log
@Disable builtin malloc and log2 on gcc3 arches, a no-op for gcc3
but required for gcc4.

ok kettenis@@ deraadt@@ marco@@, log2 suggested by robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.13 2010/04/27 15:40:23 deraadt Exp $
d88 1
a88 2
SYSTEM_LD_TAIL=	chmod 755 $@@; \
		${SIZE} $@@
@


1.13
log
@locore.i is not generated at all, so no need to rm it
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.12 2010/04/27 06:46:26 deraadt Exp $
d44 2
a45 1
		-fno-builtin-printf -fno-builtin-log
@


1.12
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.11 2010/04/27 05:07:29 deraadt Exp $
d101 1
a101 1
	rm -f eddep bsd bsd.gdb bsd.ecoff tags *.o locore.i [a-z]*.s \
@


1.11
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.10 2010/04/27 05:05:21 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config ``machineid''
# Most changes should be made in the machine description
#	/sys/arch/loongson/conf/``machineid''
# after which you should do
#	config ``machineid''
# Machine generic makefile changes should be made in
#	/sys/arch/loongson/conf/Makefile.``machinetype''
# after which config should be rerun for all machines of that type.
@


1.10
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.9 2010/04/27 04:31:47 deraadt Exp $
a14 4
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

@


1.9
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.8 2010/04/27 03:37:37 deraadt Exp $
d64 6
d113 1
a113 1
	    Errs errs linterrs makelinks
d119 2
a120 2
symbols.sort: ${_machdir}/loongson/symbols.raw
	grep -v '^#' ${_machdir}/loongson/symbols.raw \
d123 1
a123 1
locore.o: ${_machdir}/loongson/locore.S assym.h
d161 1
a161 1
SRCS=   ${_machdir}/loongson/locore.S \
d164 2
a165 2
.depend: ${SRCS} assym.h param.c
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/loongson/locore.S
d173 5
@


1.8
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.7 2010/04/26 22:21:15 deraadt Exp $
d163 1
a163 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.7
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.6 2010/04/26 22:11:37 deraadt Exp $
a118 11

# the following are necessary because the files depend on the types of
# cpu's included in the system configuration
clock.o machdep.o autoconf.o conf.o locore.o: Makefile

# depend on network configuration
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile
if_tun.o if_loop.o if_ethersubr.o: Makefile
if_arp.o if_ether.o: Makefile
ip_input.o ip_output.o in_pcb.o in_proto.o: Makefile
tcp_subr.o tcp_timer.o tcp_output.o: Makefile
@


1.6
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.5 2010/04/26 20:50:16 deraadt Exp $
a43 1
_machdir?=	$S/arch/loongson
d45 2
a46 1
_archdir?=	$S/arch/mips64
@


1.5
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.4 2010/04/26 18:58:30 deraadt Exp $
d131 5
a135 5
assym.h: $S/kern/genassym.sh \
	 ${_archdir}/mips64/genassym.cf ${_machdir}/loongson/genassym.cf Makefile
	cat ${_archdir}/mips64/genassym.cf ${_machdir}/loongson/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} \
	    > assym.h.tmp && \
d173 3
a175 2
	cat ${_archdir}/mips64/genassym.cf ${_machdir}/loongson/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
@


1.4
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.3 2010/02/03 21:45:21 miod Exp $
d42 5
a46 2
LOONGSON=$S/arch/loongson
MIPS64=	$S/arch/mips64
d49 1
a49 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D__loongson__
d88 1
a88 1
		echo ${LD} $$strip -o $@@ -e start -T ${LOONGSON}/conf/ld.script \
d90 1
a90 1
		${LD} $$strip -o $@@ -e start -T ${LOONGSON}/conf/ld.script \
d113 2
a114 2
symbols.sort: ${LOONGSON}/loongson/symbols.raw
	grep -v '^#' ${LOONGSON}/loongson/symbols.raw \
d117 1
a117 1
locore.o: ${LOONGSON}/loongson/locore.S assym.h
d132 2
a133 2
	 ${MIPS64}/mips64/genassym.cf ${LOONGSON}/loongson/genassym.cf Makefile
	cat ${MIPS64}/mips64/genassym.cf ${LOONGSON}/loongson/genassym.cf | \
d166 1
a166 1
SRCS=   ${LOONGSON}/loongson/locore.S \
d170 1
a170 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${LOONGSON}/loongson/locore.S
d173 1
a173 1
	cat ${MIPS64}/mips64/genassym.cf ${LOONGSON}/loongson/genassym.cf | \
@


1.3
log
@Build the kernel with -mfix-loongson2f-btb. Requires up-to-date binutils.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.2 2010/01/03 14:17:26 miod Exp $
a2 2
# Makefile for OpenBSD
#
d8 1
a8 1
#	 config ``machineid''
d19 2
a20 3

# DEBUG is set to -g if debugging
# PROF is set to -pg if profiling
@


1.2
log
@Use a split genassym.cf scheme on mips64 ports. Don't forget to rerun config(8).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.loongson,v 1.1.1.1 2009/12/25 21:05:14 miod Exp $
d54 1
d61 1
a61 1
AFLAGS=		-x assembler-with-cpp -mno-abicalls ${ABI} -D_LOCORE
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$OpenBSD$
d130 5
a134 3
assym.h: $S/kern/genassym.sh ${LOONGSON}/loongson/genassym.cf Makefile
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${LOONGSON}/loongson/genassym.cf > assym.h.tmp && \
d172 2
a173 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${LOONGSON}/loongson/genassym.cf
@


1.1.1.1
log
@By popular demand and peer pressure, check-in work in progress work to support
the Yeelong Lemote mips-based netbook. Kernel bits only for now, needs
polishing; most of this work done during h2k9 last month, although the
porting effort started earlier this year.
@
text
@@
