head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.6
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.6
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.8
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	xmas_lemote:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.10.09.11.25.39;	author tom;	state Exp;
branches;
next	1.12;
commitid	DfYvEDcFmu1LY9q1;

1.12
date	2016.10.07.04.08.30;	author visa;	state Exp;
branches;
next	1.11;
commitid	N65eYRkx9CQdfwO5;

1.11
date	2014.03.27.22.16.03;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.03.21.44.51;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2010.11.23.04.07.55;	author shadchin;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.18.13.36.14;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.08.21.59.56;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.28.22.32.50;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.28.21.35.43;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.12.08.14.02;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.11.20.15.29;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.05.20.53.28;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.25.21.11.16;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.12.25.21.11.16;	author miod;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Apply consistency to forever loops with continue and NOTREACHED

Same thought from kettenis@@, ok krw@@ phessler@@ millert@@
@
text
@/*	$OpenBSD: wscons_machdep.c,v 1.12 2016/10/07 04:08:30 visa Exp $ */

/*
 * Copyright (c) 2010 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/*
 * Copyright (c) 2001 Aaron Campbell
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/extent.h>

#include <machine/autoconf.h>
#include <machine/bus.h>

#include <dev/cons.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>
#include <dev/pci/vga_pcivar.h>

#include "wsdisplay.h"
#if NWSDISPLAY > 0
#include <dev/wscons/wsdisplayvar.h>
#endif
#include "radeonfb.h"
extern int radeonfb_cnattach(bus_space_tag_t, bus_space_tag_t, pcitag_t, pcireg_t);
#include "sisfb.h"
extern int sisfb_cnattach(bus_space_tag_t, bus_space_tag_t, pcitag_t, pcireg_t);
#include "smfb.h"
extern int smfb_cnattach(bus_space_tag_t, bus_space_tag_t, pcitag_t, pcireg_t);
#include "vga.h"

#include "pckbc.h"
#if NPCKBC > 0
#include <dev/isa/isareg.h>
#include <dev/ic/i8042reg.h>
#include <dev/ic/pckbcvar.h>
#endif
#include "pckbd.h"
#include "ukbd.h"
#if NUKBD > 0
#include <dev/usb/ukbdvar.h>
#endif
#if NPCKBD > 0 || NUKBD > 0
#include <dev/wscons/wskbdvar.h>
#endif

cons_decl(ws);

#include <machine/pmon.h>

void
wscnprobe(struct consdev *cp)
{
	pcitag_t tag;
	pcireg_t id, class;
	int maj, dev, bus, maxbus;

	cp->cn_pri = CN_DEAD;

	/* Locate the major number. */
	for (maj = 0; maj < nchrdev; maj++) {
		if (cdevsw[maj].d_open == wsdisplayopen)
			break;
	}

	if (maj == nchrdev) {
		/* We are not in cdevsw[], give up. */
		return;
	}

	/*
	 * Loongson 3A systems have their video board on the second bus.
	 *
	 * XXX We might need a pci_maxdevs_early() routine if more systems
	 * XXX end up needing more than one bus to be walked.
	 */
	if (loongson_ver >= 0x3a)
		maxbus = 2;
	else
		maxbus = 1;

	/*
	 * Look for a suitable video device.
	 */

	for (bus = 0; bus < maxbus; bus++) {
		for (dev = 0; dev < 32; dev++) {
			tag = pci_make_tag_early(bus, dev, 0);
			id = pci_conf_read_early(tag, PCI_ID_REG);
			if (id == 0 || PCI_VENDOR(id) == PCI_VENDOR_INVALID)
				continue;

			class = pci_conf_read_early(tag, PCI_CLASS_REG);
			if (!DEVICE_IS_VGA_PCI(class) &&
			    !(PCI_CLASS(class) == PCI_CLASS_DISPLAY &&
			      PCI_SUBCLASS(class) == PCI_SUBCLASS_DISPLAY_MISC))
				continue;

			cp->cn_dev = makedev(maj, 0);
			cp->cn_pri = CN_MIDPRI;
			return;
		}
	}
}

void
wscninit(struct consdev *cp)
{
static	int initted;
	pcitag_t tag;
	pcireg_t id, class;
	int dev, bus, maxbus, rc;
	extern struct consdev pmoncons;

	if (initted)
		return;

	initted = 1;

	cn_tab = &pmoncons;	/* to be able to panic */

	/*
	 * Loongson 3A systems have their video board on the second bus.
	 *
	 * XXX We might need a pci_maxdevs_early() routine if more systems
	 * XXX end up needing more than one bus to be walked.
	 */
	if (loongson_ver >= 0x3a)
		maxbus = 2;
	else
		maxbus = 1;

	/*
	 * Look for a suitable video device.
	 */

	for (bus = 0; bus < maxbus; bus++) {
		for (dev = 0; dev < 32; dev++) {
			tag = pci_make_tag_early(bus, dev, 0);
			id = pci_conf_read_early(tag, PCI_ID_REG);
			if (id == 0 || PCI_VENDOR(id) == PCI_VENDOR_INVALID)
				continue;

			class = pci_conf_read_early(tag, PCI_CLASS_REG);
			if (!DEVICE_IS_VGA_PCI(class) &&
			    !(PCI_CLASS(class) == PCI_CLASS_DISPLAY &&
			      PCI_SUBCLASS(class) == PCI_SUBCLASS_DISPLAY_MISC))
				continue;

			/*
			 * Try to configure this device as glass console.
			 */

			rc = ENXIO;

			/*
			 * Bitmapped frame buffer won't be of PREHISTORIC
			 * class.
			 */
			if (PCI_CLASS(class) == PCI_CLASS_DISPLAY) {
#if NRADEONFB > 0
				if (rc != 0)
					rc = radeonfb_cnattach(early_mem_t,
					    early_io_t, tag, id);
#endif
#if NSISFB > 0
				if (rc != 0 && early_io_t != NULL)
					rc = sisfb_cnattach(early_mem_t,
					    early_io_t, tag, id);
#endif
#if NSMFB > 0
				if (rc != 0 && early_io_t != NULL)
					rc = smfb_cnattach(early_mem_t,
					    early_io_t, tag, id);
#endif
			}
#if NVGA > 0
			if (rc != 0 && early_io_t != NULL) {
				/* thanks $DEITY the pci_chipset_tag_t arg is ignored */
				rc = vga_pci_cnattach(early_io_t,
				    early_mem_t, NULL, 0, dev, 0);
			}
#endif
			if (rc == 0)
				goto setup_kbd;
		}
	}

	cn_tab = cp;

	/* no glass console... */
	return;

setup_kbd:

	/*
	 * Look for a suitable input device.
	 */

	rc = ENXIO;

#if NPCKBC > 0
	if (rc != 0 && early_io_t != NULL)
		rc = pckbc_cnattach(early_io_t, IO_KBD, KBCMDP, 0);
#endif
#if NUKBD > 0
	if (rc != 0)
		rc = ukbd_cnattach();
#endif

	cn_tab = cp;
}

void
wscnputc(dev_t dev, int i)
{
#if NWSDISPLAY > 0
	wsdisplay_cnputc(dev, i);
#endif
}

int
wscngetc(dev_t dev)
{
#if NPCKBD > 0 || NUKBD > 0
	int c;

	wskbd_cnpollc(dev, 1);
	c = wskbd_cngetc(dev);
	wskbd_cnpollc(dev, 0);

	return c;
#else
	for (;;)
		continue;
	/* NOTREACHED */
#endif
}

void
wscnpollc(dev_t dev, int on)
{
#if NPCKBD > 0 || NUKBD > 0
	wskbd_cnpollc(dev, on);
#endif
}
@


1.12
log
@Add an initial framebuffer driver for the RS780E chipset on loongson,
ported from sparc64. For now, it works without hardware acceleration,
but otherwise it is usable enough as a console and with X.

Diff from Miod's hoard
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.11 2014/03/27 22:16:03 miod Exp $ */
d275 3
a277 1
	for (;;) ;
@


1.11
log
@Remove dependency from wscons_machdep upon bonito. Instead of hardcoding bonito
as the northbridge, have the per-platform early setup code register functions
providing access to the PCI configuration space, for the wscons code to walk the
PCI space in search of a graphics board.

No functional change yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.10 2012/10/03 21:44:51 miod Exp $ */
d65 2
d90 2
d97 1
a97 1
	int maj, dev;
d113 11
d127 17
a143 15
	for (dev = 0; dev < 32; dev++) {
		tag = pci_make_tag_early(0, dev, 0);
		id = pci_conf_read_early(tag, PCI_ID_REG);
		if (id == 0 || PCI_VENDOR(id) == PCI_VENDOR_INVALID)
			continue;

		class = pci_conf_read_early(tag, PCI_CLASS_REG);
		if (!DEVICE_IS_VGA_PCI(class) &&
		    !(PCI_CLASS(class) == PCI_CLASS_DISPLAY &&
		      PCI_SUBCLASS(class) == PCI_SUBCLASS_DISPLAY_MISC))
			continue;

		cp->cn_dev = makedev(maj, 0);
		cp->cn_pri = CN_MIDPRI;
		break;
d153 1
a153 1
	int dev, rc;
d164 11
d178 29
a206 20
	for (dev = 0; dev < 32; dev++) {
		tag = pci_make_tag_early(0, dev, 0);
		id = pci_conf_read_early(tag, PCI_ID_REG);
		if (id == 0 || PCI_VENDOR(id) == PCI_VENDOR_INVALID)
			continue;

		class = pci_conf_read_early(tag, PCI_CLASS_REG);
		if (!DEVICE_IS_VGA_PCI(class) &&
		    !(PCI_CLASS(class) == PCI_CLASS_DISPLAY &&
		      PCI_SUBCLASS(class) == PCI_SUBCLASS_DISPLAY_MISC))
			continue;

		/*
		 * Try to configure this device as glass console.
		 */

		rc = ENXIO;

		/* bitmapped frame buffer won't be of PREHISTORIC class */
		if (PCI_CLASS(class) == PCI_CLASS_DISPLAY) {
d208 3
a210 3
			if (rc != 0 && early_io_t != NULL)
				rc = sisfb_cnattach(early_mem_t,
				    early_io_t, tag, id);
d213 3
a215 3
			if (rc != 0 && early_io_t != NULL)
				rc = smfb_cnattach(early_mem_t,
				    early_io_t, tag, id);
d219 8
a226 4
		if (rc != 0 && early_io_t != NULL) {
			/* thanks $DEITY the pci_chipset_tag_t arg is ignored */
			rc = vga_pci_cnattach(early_io_t,
			    early_mem_t, NULL, 0, dev, 0);
a227 3
#endif
		if (rc == 0)
			goto setup_kbd;
@


1.10
log
@Do not use <mips64/archtype.h> for loongson model numbers, but rather put the
list in loongson's <machine/autoconf.h> directly. <mips64/archtype.h> is
intended to be only used on ARCBios-like platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.9 2010/11/23 04:07:55 shadchin Exp $ */
a136 2
	extern struct mips_bus_space bonito_pci_io_space_tag;
	extern struct mips_bus_space bonito_pci_mem_space_tag;
d171 3
a173 3
			if (rc != 0)
				rc = sisfb_cnattach(&bonito_pci_mem_space_tag,
				    &bonito_pci_io_space_tag, tag, id);
d176 3
a178 3
			if (rc != 0)
				rc = smfb_cnattach(&bonito_pci_mem_space_tag,
				    &bonito_pci_io_space_tag, tag, id);
d180 1
a180 1
		}
d182 1
a182 1
		if (rc != 0) {
d184 2
a185 2
			rc = vga_pci_cnattach(&bonito_pci_io_space_tag,
			    &bonito_pci_mem_space_tag, NULL, 0, dev, 0);
d206 2
a207 3
	if (rc != 0)
		rc = pckbc_cnattach(&bonito_pci_io_space_tag, IO_KBD,
		    KBCMDP, 0);
@


1.9
log
@removed slot argument of function pckbc_cnattach
because it is always PCKBC_KBD_SLOT

ok krw@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.8 2010/07/18 13:36:14 miod Exp $ */
a49 2

#include <mips64/archtype.h>
@


1.8
log
@Repair Gdium support.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.7 2010/05/08 21:59:56 miod Exp $ */
d212 1
a212 1
		    KBCMDP, PCKBC_KBD_SLOT, 0);
@


1.7
log
@Huge work-in-progress commit to support Loongson 2E-based evaluation boards
with a VIA 686 southbridge.

Features:
- 686 setup code (no thanks to PMON for not initializing the beast).
- work in progress ISA interrupt handling code.
- support for vga(4) compatible devices as console, in PC-compatible text mode.
- move legacy (ISA) support code out of bonito(4) to make things clearer.
- support more than 256MB on 2E-based systems.

Tested on a generic 2E-based evaluation board by someone who wishes to remain
anonymous; you know who you are, thank you very much for testing.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.6 2010/02/28 22:32:50 miod Exp $ */
d121 3
a123 1
		if (!DEVICE_IS_VGA_PCI(class))
d161 3
a163 1
		if (!DEVICE_IS_VGA_PCI(class))
@


1.6
log
@Minimal frame buffer driver for the SiS 315 found on Lemote Fuloong systems.
Currently unable to change video modes or provide any form of acceleration,
so you are stuck in a 640x400x8 mode, but at least people scared of serial
consoles will get a chance to use their Fuloongs now.

Tested by otto@@ (early developments) and jasper@@ (final version)
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.5 2010/02/28 21:35:43 miod Exp $ */
d61 1
d71 1
d93 5
a97 1
	int maj;
d107 1
a107 1
		panic("wsdisplay is not in cdevsw[]");
d110 18
a127 2
	cp->cn_dev = makedev(maj, 0);
	cp->cn_pri = CN_MIDPRI;
d139 1
d146 2
d159 1
a159 1
		if (PCI_CLASS(class) != PCI_CLASS_DISPLAY)
d167 3
d171 3
a173 3
		if (rc != 0)
			rc = sisfb_cnattach(&bonito_pci_mem_space_tag,
			    &bonito_pci_io_space_tag, tag, id);
d176 11
a186 3
		if (rc != 0)
			rc = smfb_cnattach(&bonito_pci_mem_space_tag,
			    &bonito_pci_io_space_tag, tag, id);
d192 2
d206 3
a208 10
	switch (sys_platform->system_type) {
	default:
		/* no pckbc or no legacy hardware */
		break;
	case LOONGSON_YEELOONG:
		if (rc != 0)
			rc = pckbc_cnattach(&bonito_pci_io_space_tag, IO_KBD,
			    KBCMDP, PCKBC_KBD_SLOT, 0);
		break;
	}
d214 2
d229 1
a229 1
#if NPCKBD > 0
d245 1
a245 1
#if NPCKBD > 0
@


1.5
log
@A better bus_space_map() function for bonito PCI memory space, which no
longers assumes all requested mappings fit in the three 64MB PCILO windows,
but will instead check whether the requested mappings can be provided by
PCILO regions or PCIHI regions (and on 2F-based systems, making sure we
only use addresses which get properly routed from CPU to PCI within the
2F crossbar).

This in turn requires early console code to abide the bus_space rules and
get its resources from bus_space_map() rather than doing PCI BAR arithmetic
by itself.

No functional change on Lemote Yeeloong and Gdium Liberty; on Lemote Fuloong
2F this allows BAR set up in PCIHI space by PMON to be mapped by kernel code
without having to compensate for the PCILO offset.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.4 2010/02/12 08:14:02 miod Exp $ */
d66 2
d142 5
@


1.4
log
@Overhaul per-platform specific operation by moving all the differences into
per-platform structs or function pointers; therefore bonito(4) no longer needs
to know about particular systems.

While there, bring little bits of Fuloong 2F support, tested on otto@@'s
machine.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.3 2010/02/11 20:15:29 otto Exp $ */
d67 1
a67 1
extern int smfb_cnattach(bus_space_tag_t, pcitag_t, pcireg_t);
d142 2
a143 1
			rc = smfb_cnattach(&bonito_pci_mem_space_tag, tag, id);
@


1.3
log
@default to no pckbc and no legacy hardware; ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.2 2010/02/05 20:53:28 miod Exp $ */
d160 1
a160 1
	switch (sys_config.system_type) {
@


1.2
log
@Add a set of functions to access PCI configuration space before bonito(4)
attaches, and use it to walk the PCI bus to figure out where the onboard
frame buffer device lies, if any; and get the frame buffer memory address
from reading the proper PCI BAR instead of hardcoding it; this should allow
the Gdium Liberty to configure its console correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.1.1.1 2009/12/25 21:11:16 miod Exp $ */
d161 2
a162 2
	case LOONGSON_GDIUM:
		/* no legacy hardware */
a163 1
	default:
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.3 2008/01/23 16:37:56 jsing Exp $ */
d4 15
d51 2
d56 1
a56 1
#include <loongson/dev/bonitoreg.h>
d58 3
a60 4
#include <dev/cons.h>
#if 0
#include <dev/wscons/wsconsio.h>
#endif
d66 2
a74 1

d76 5
a80 1
#if NPCKBD > 0
a82 1
#include "smfb.h"
d109 6
a114 1
static int initted;
d121 19
d141 11
a151 2
	{
		extern int smfb_cnattach(void);
d153 17
a169 2
		if (smfb_cnattach() != 0)
			return;
d172 3
a174 7
#if NPCKBC > 0
	{
		extern struct mips_bus_space bonito_pci_io_space_tag;
		if (!pckbc_cnattach(&bonito_pci_io_space_tag, IO_KBD, KBCMDP,
		    PCKBC_KBD_SLOT, 0 /* PCKBC_CANT_TRANSLATE */))
			return;
	}
@


1.1.1.1
log
@By popular demand and peer pressure, check-in work in progress work to support
the Yeelong Lemote mips-based netbook. Kernel bits only for now, needs
polishing; most of this work done during h2k9 last month, although the
porting effort started earlier this year.
@
text
@@
