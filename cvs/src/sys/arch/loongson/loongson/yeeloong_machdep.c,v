head	1.25;
access;
symbols
	OPENBSD_6_0:1.25.0.2
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.24.0.6
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.24.0.8
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.24.0.4
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.23.0.8
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.4
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.2
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.17.0.6
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11;
locks; strict;
comment	@ * @;


1.25
date	2016.03.06.19.42.27;	author mpi;	state Exp;
branches;
next	1.24;
commitid	cyYKarj4qRTft4gD;

1.24
date	2014.03.27.22.16.03;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2013.01.16.20.28.06;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2013.01.16.07.17.59;	author pirofti;	state Exp;
branches;
next	1.21;

1.21
date	2013.01.14.21.18.47;	author pirofti;	state Exp;
branches;
next	1.20;

1.20
date	2012.10.03.21.44.51;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2012.10.03.11.18.23;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2012.09.29.18.54.38;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2011.07.21.20.36.12;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2011.04.15.20.40.06;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2010.10.14.21.23.04;	author pirofti;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.01.04.52.43;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2010.08.31.10.24.46;	author pirofti;	state Exp;
branches;
next	1.12;

1.12
date	2010.05.08.21.59.56;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2010.03.02.20.54.51;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2010.03.01.09.29.37;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2010.02.28.22.39.14;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2010.02.28.22.32.50;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2010.02.23.21.04.16;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.16.21.31.36;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.12.19.43.43;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.12.19.37.31;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.12.08.14.02;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.09.21.31.47;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.05.20.51.22;	author miod;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Rename mips64's trap_frame into trapframe.

For coherency with other archs and in order to use it in MI code.

ok visa@@, tobiasu@@
@
text
@/*	$OpenBSD: yeeloong_machdep.c,v 1.24 2014/03/27 22:16:03 miod Exp $	*/

/*
 * Copyright (c) 2009, 2010 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * eBenton EBT700 and Lemote {Fu,Lyn,Yee}loong specific code and
 * configuration data.
 * (this file probably ought to be named lemote_machdep.c by now)
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/autoconf.h>
#include <machine/cpu.h>
#include <mips64/loongson2.h>
#include <mips64/mips_cpu.h>
#include <machine/pmon.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <dev/pci/glxreg.h>
#include <dev/pci/glxvar.h>

#include <loongson/dev/bonitoreg.h>
#include <loongson/dev/bonitovar.h>
#include <loongson/dev/bonito_irq.h>
#include <loongson/dev/kb3310var.h>

#include "com.h"
#include "ykbec.h"

#if NCOM > 0
#include <sys/termios.h>
#include <dev/ic/comvar.h>
extern struct mips_bus_space bonito_pci_io_space_tag;
#endif

void	 lemote_device_register(struct device *, void *);
void	 lemote_reset(void);

void	 ebenton_setup(void);

void	 fuloong_powerdown(void);
void	 fuloong_setup(void);

void	 yeeloong_powerdown(void);
void	 yeeloong_setup(void);

void	 lemote_pci_attach_hook(pci_chipset_tag_t);
int	 lemote_intr_map(int, int, int);

void	 lemote_isa_attach_hook(struct device *, struct device *,
	    struct isabus_attach_args *);
void	*lemote_isa_intr_establish(void *, int, int, int, int (*)(void *),
	    void *, char *);
void	 lemote_isa_intr_disestablish(void *, void *);

uint	 lemote_get_isa_imr(void);
uint	 lemote_get_isa_isr(void);
uint32_t lemote_isa_intr(uint32_t, struct trapframe *);
extern void	(*cpu_setperf)(int);

const struct bonito_config lemote_bonito = {
	.bc_adbase = 11,

	.bc_gpioIE = LOONGSON_INTRMASK_GPIO,
	.bc_intEdge = LOONGSON_INTRMASK_PCI_SYSERR |
	    LOONGSON_INTRMASK_PCI_PARERR,
	.bc_intSteer = 0,
	.bc_intPol = LOONGSON_INTRMASK_DRAM_PARERR |
	    LOONGSON_INTRMASK_PCI_SYSERR | LOONGSON_INTRMASK_PCI_PARERR |
	    LOONGSON_INTRMASK_INT0 | LOONGSON_INTRMASK_INT1,

	.bc_attach_hook = lemote_pci_attach_hook,
	.bc_intr_map = lemote_intr_map
};

const struct legacy_io_range fuloong_legacy_ranges[] = {
	/* isa */
	{ IO_DMAPG + 4,	IO_DMAPG + 4 },
	/* mcclock */
	{ IO_RTC,	IO_RTC + 1 },
	/* pciide */
	{ 0x170,	0x170 + 7 },
	{ 0x1f0,	0x1f0 + 7 },
	{ 0x376,	0x376 },
	{ 0x3f6,	0x3f6 },
	/* com */
	{ IO_COM1,	IO_COM1 + 8 },		/* IR port */
	{ IO_COM2,	IO_COM2 + 8 },		/* serial port */

	{ 0 }
};

const struct legacy_io_range lynloong_legacy_ranges[] = {
	/* isa */
	{ IO_DMAPG + 4,	IO_DMAPG + 4 },
	/* mcclock */
	{ IO_RTC,	IO_RTC + 1 },
	/* pciide */
	{ 0x170,	0x170 + 7 },
	{ 0x1f0,	0x1f0 + 7 },
	{ 0x376,	0x376 },
	{ 0x3f6,	0x3f6 },
#if 0	/* no external connector */
	/* com */
	{ IO_COM2,	IO_COM2 + 8 },
#endif

	{ 0 }
};

const struct legacy_io_range yeeloong_legacy_ranges[] = {
	/* isa */
	{ IO_DMAPG + 4,	IO_DMAPG + 4 },
	/* pckbc */
	{ IO_KBD,	IO_KBD },
	{ IO_KBD + 4,	IO_KBD + 4 },
	/* mcclock */
	{ IO_RTC,	IO_RTC + 1 },
	/* pciide */
	{ 0x170,	0x170 + 7 },
	{ 0x1f0,	0x1f0 + 7 },
	{ 0x376,	0x376 },
	{ 0x3f6,	0x3f6 },
	/* kb3110b embedded controller */
	{ 0x381,	0x383 },

	{ 0 }
};

struct mips_isa_chipset lemote_isa_chipset = {
	.ic_v = NULL,

	.ic_attach_hook = lemote_isa_attach_hook,
	.ic_intr_establish = lemote_isa_intr_establish,
	.ic_intr_disestablish = lemote_isa_intr_disestablish
};

const struct platform fuloong_platform = {
	.system_type = LOONGSON_FULOONG,
	.vendor = "Lemote",
	.product = "Fuloong",

	.bonito_config = &lemote_bonito,
	.isa_chipset = &lemote_isa_chipset,
	.legacy_io_ranges = fuloong_legacy_ranges,

	.setup = fuloong_setup,
	.device_register = lemote_device_register,

	.powerdown = fuloong_powerdown,
	.reset = lemote_reset
};

const struct platform lynloong_platform = {
	.system_type = LOONGSON_LYNLOONG,
	.vendor = "Lemote",
	.product = "Lynloong",

	.bonito_config = &lemote_bonito,
	.isa_chipset = &lemote_isa_chipset,
	.legacy_io_ranges = lynloong_legacy_ranges,

	.setup = fuloong_setup,
	.device_register = lemote_device_register,

	.powerdown = fuloong_powerdown,
	.reset = lemote_reset
};

const struct platform yeeloong_platform = {
	.system_type = LOONGSON_YEELOONG,
	.vendor = "Lemote",
	.product = "Yeeloong",

	.bonito_config = &lemote_bonito,
	.isa_chipset = &lemote_isa_chipset,
	.legacy_io_ranges = yeeloong_legacy_ranges,

	.setup = yeeloong_setup,
	.device_register = lemote_device_register,

	.powerdown = yeeloong_powerdown,
	.reset = lemote_reset,
#if NYKBEC > 0
	.suspend = ykbec_suspend,
	.resume = ykbec_resume
#endif
};

/* eBenton EBT700 is similar to Lemote Yeeloong, except for a smaller screen */
const struct platform ebenton_platform = {
	.system_type = LOONGSON_EBT700,
	.vendor = "eBenton",
	.product = "EBT700",

	.bonito_config = &lemote_bonito,
	.isa_chipset = &lemote_isa_chipset,
	.legacy_io_ranges = yeeloong_legacy_ranges,

	.setup = ebenton_setup,
	.device_register = lemote_device_register,

	.powerdown = yeeloong_powerdown,
	.reset = lemote_reset,
#ifdef notyet
#if NYKBEC > 0
	.suspend = ykbec_suspend,
	.resume = ykbec_resume
#endif
#endif
};

/*
 * PCI model specific routines
 */

void
lemote_pci_attach_hook(pci_chipset_tag_t pc)
{
	pcireg_t id;
	pcitag_t tag;
	int dev;

	/*
	 * Check for an AMD CS5536 chip; if one is found, register
	 * the proper PCI configuration space hooks.
	 */

	for (dev = pci_bus_maxdevs(pc, 0); dev >= 0; dev--) {
		tag = pci_make_tag(pc, 0, dev, 0);
		id = pci_conf_read(pc, tag, PCI_ID_REG);
		if (id == PCI_ID_CODE(PCI_VENDOR_AMD,
		    PCI_PRODUCT_AMD_CS5536_PCISB)) {
			glx_init(pc, tag, dev);
			break;
		}
	}
}

int
lemote_intr_map(int dev, int fn, int pin)
{
	switch (dev) {
	/* onboard devices, only pin A is wired */
	case 6:
	case 7:
	case 8:
	case 9:
		if (pin == PCI_INTERRUPT_PIN_A)
			return BONITO_DIRECT_IRQ(LOONGSON_INTR_PCIA +
			    (dev - 6));
		break;
	/* PCI slot */
	case 10:
		return BONITO_DIRECT_IRQ(LOONGSON_INTR_PCIA +
		    (pin - PCI_INTERRUPT_PIN_A));
	/* Geode chip */
	case 14:
		switch (fn) {
		case 1:	/* Flash */
			return BONITO_ISA_IRQ(6);
		case 3:	/* AC97 */
			return BONITO_ISA_IRQ(9);
		case 4:	/* OHCI */
		case 5:	/* EHCI */
			return BONITO_ISA_IRQ(11);
		}
		break;
	default:
		break;
	}

	return -1;
}

/*
 * ISA model specific routines
 */

void
lemote_isa_attach_hook(struct device *parent, struct device *self,
    struct isabus_attach_args *iba)
{
	set_intr(INTPRI_ISA, CR_INT_0, lemote_isa_intr);

	/* disable all isa interrupt sources */
	REGVAL8(BONITO_PCIIO_BASE + IO_ICU2 + 1) = 0xff;
	REGVAL8(BONITO_PCIIO_BASE + IO_ICU2 + 2) = 0xff;

	loongson_generic_isa_attach_hook(parent, self, iba);
}

void *
lemote_isa_intr_establish(void *v, int irq, int type, int level,
    int (*handler)(void *), void *arg, char *name)
{
	return bonito_intr_establish(BONITO_ISA_IRQ(irq), type, level,
	    handler, arg, name);
}

void
lemote_isa_intr_disestablish(void *v, void *ih)
{
	bonito_intr_disestablish(ih);
}

/*
 * Legacy (ISA) interrupt handling
 */

/*
 * Process legacy interrupts.
 *
 * XXX On 2F, ISA interrupts only occur on LOONGSON_INTR_INT0, but since
 * XXX the other LOONGSON_INTR_INT# are unmaskable, bad things will happen
 * XXX if they ever are triggered...
 */
uint32_t
lemote_isa_intr(uint32_t hwpend, struct trapframe *frame)
{
	uint64_t imr, isr, mask;
	int bit;
	struct intrhand *ih;
	int rc;

	isr = lemote_get_isa_isr();
	imr = lemote_get_isa_imr();

	isr &= imr;
	isr &= ~(1 << 2);	/* cascade */
#ifdef DEBUG
	printf("isa interrupt: imr %04x isr %04x\n", imr, isr);
#endif
	if (isr == 0)
		return 0;	/* not for us */

	/*
	 * Mask all pending interrupts.
	 */

	loongson_set_isa_imr(imr & ~isr);

	/*
	 * If interrupts are spl-masked, mask them and wait for splx()
	 * to reenable them when necessary.
	 */
	if ((mask = isr & (BONITO_ISA_MASK(bonito_imask[frame->ipl]))) != 0) {
		isr &= ~mask;
		imr &= ~mask;
	}

	/*
	 * Now process allowed interrupts.
	 */
	if (isr != 0) {
		int lvl, bitno, ret;
		uint64_t tmpisr;

		/* Service higher level interrupts first */
		bit = BONITO_NISA - 1;
		for (lvl = IPL_HIGH - 1; lvl != IPL_NONE; lvl--) {
			tmpisr = isr & BONITO_ISA_MASK(bonito_imask[lvl] ^
			    bonito_imask[lvl - 1]);
			if (tmpisr == 0)
				continue;
			for (bitno = bit, mask = 1UL << bitno; mask != 0;
			    bitno--, mask >>= 1) {
				if ((tmpisr & mask) == 0)
					continue;

				rc = 0;
				for (ih = bonito_intrhand[BONITO_ISA_IRQ(bitno)];
				    ih != NULL; ih = ih->ih_next) {
					void *arg;

					splraise(ih->ih_level);
					if (ih->ih_arg != NULL)
						arg = ih->ih_arg;
					else
						/* clock interrupt */
						arg = frame;
					ret = (*ih->ih_fun)(arg);
					if (ret) {
						rc = 1;
						ih->ih_count.ec_count++;
					}
					__asm__ (".set noreorder\n");
					curcpu()->ci_ipl = frame->ipl;
					mips_sync();
					__asm__ (".set reorder\n");
					if (ret == 1)
						break;
				}
				if (rc == 0)
					printf("spurious isa interrupt %d\n",
					    bitno);

				loongson_isa_specific_eoi(bitno);

				if ((isr ^= mask) == 0)
					goto done;
				if ((tmpisr ^= mask) == 0)
					break;
			}
		}
done:

		/*
		 * Reenable interrupts which have been serviced.
		 */
		loongson_set_isa_imr(imr);
	}

	return hwpend;
}

uint
lemote_get_isa_imr()
{
	uint imr1, imr2;

	imr1 = 0xff & ~REGVAL8(BONITO_PCIIO_BASE + IO_ICU1 + 1);
	imr1 &= ~(1 << 2);	/* hide cascade */
	imr2 = 0xff & ~REGVAL8(BONITO_PCIIO_BASE + IO_ICU2 + 1);

	return (imr2 << 8) | imr1;
}

uint
lemote_get_isa_isr()
{
	uint isr1, isr2;

	isr1 = 0xff & REGVAL8(BONITO_PCIIO_BASE + IO_ICU1);
	isr2 = 0xff & REGVAL8(BONITO_PCIIO_BASE + IO_ICU2);

	return (isr2 << 8) | isr1;
}

/*
 * Other model specific routines
 */

void
fuloong_powerdown()
{
	vaddr_t gpiobase;

	gpiobase = BONITO_PCIIO_BASE + (rdmsr(DIVIL_LBAR_GPIO) & 0xff00);
	/* enable GPIO 13 */
	REGVAL(gpiobase + GPIOL_OUT_EN) = GPIO_ATOMIC_VALUE(13, 1);
	/* set GPIO13 value to zero */
	REGVAL(gpiobase + GPIOL_OUT_VAL) = GPIO_ATOMIC_VALUE(13, 0);
}

void
yeeloong_powerdown()
{
	REGVAL(BONITO_GPIODATA) &= ~0x00000001;
	REGVAL(BONITO_GPIOIE) &= ~0x00000001;
}

void
lemote_reset()
{
	cpu_setperf(100);
	wrmsr(GLCP_SYS_RST, rdmsr(GLCP_SYS_RST) | 1);
}

void
fuloong_setup(void)
{
#if NCOM > 0
	const char *envvar;
	int serial;

	envvar = pmon_getenv("nokbd");
	serial = envvar != NULL;
	envvar = pmon_getenv("novga");
	serial = serial && envvar != NULL;

	if (serial) {
                comconsiot = &bonito_pci_io_space_tag;
                comconsaddr = 0x2f8;
                comconsrate = 115200; /* default PMON console speed */
		comconscflag = (TTYDEF_CFLAG & ~(CSIZE | CSTOPB | PARENB)) |
		    CS8 | CLOCAL; /* 8N1 */
	}
#endif

	cpu_setperf = loongson2f_setperf;

	bonito_early_setup();
}

void
yeeloong_setup(void)
{
	cpu_setperf = loongson2f_setperf;

	bonito_early_setup();
}

void
ebenton_setup(void)
{
	bonito_early_setup();
}

void
lemote_device_register(struct device *dev, void *aux)
{
	const char *drvrname = dev->dv_cfdata->cf_driver->cd_name;
	const char *name = dev->dv_xname;

	if (dev->dv_class != bootdev_class)
		return;	

	/* 
	 * The device numbering must match. There's no way
	 * pmon tells us more info. Depending on the usb slot
	 * and hubs used you may be lucky. Also, assume umass/sd for usb
	 * attached devices.
	 */
	switch (bootdev_class) {
	case DV_DISK:
		if (strcmp(drvrname, "wd") == 0 && strcmp(name, bootdev) == 0)
			bootdv = dev;
		else {
			/* XXX this really only works safely for usb0... */
		    	if ((strcmp(drvrname, "sd") == 0 ||
			    strcmp(drvrname, "cd") == 0) &&
			    strncmp(bootdev, "usb", 3) == 0 &&
			    strcmp(name + 2, bootdev + 3) == 0)
				bootdv = dev;
		}
		break;
	case DV_IFNET:
		/*
		 * This relies on the onboard Ethernet interface being
		 * attached before any other (usb) interface.
		 */
		bootdv = dev;
		break;
	default:
		break;
	}
}
@


1.24
log
@Remove dependency from wscons_machdep upon bonito. Instead of hardcoding bonito
as the northbridge, have the per-platform early setup code register functions
providing access to the PCI configuration space, for the wscons code to walk the
PCI space in search of a graphics board.

No functional change yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.23 2013/01/16 20:28:06 miod Exp $	*/
d81 1
a81 1
uint32_t lemote_isa_intr(uint32_t, struct trap_frame *);
d342 1
a342 1
lemote_isa_intr(uint32_t hwpend, struct trap_frame *frame)
@


1.23
log
@On second thought, do not unconditionnaly register the cpu throttling code
on all Loongson2F systems yet; Gdium does not have a separate scheduling
clock yet and can't afford throttling until then.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.22 2013/01/16 07:17:59 pirofti Exp $	*/
d62 2
d223 1
a223 1
	.setup = NULL,
d515 2
d523 8
@


1.22
log
@Loongson: add throttling support.

This commit allows CPU throttling on the 2F systems.

Inspired by an old diff from otto@@.

Help from and okay miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.21 2013/01/14 21:18:47 pirofti Exp $	*/
d31 1
d66 1
d200 1
a200 1
	.setup = NULL,
d507 2
d511 8
@


1.21
log
@Loongson: Replace the system clock provided by the CPU with a GLX MFGPT.

CPU throttling was not possible due to the fact that the system clock
was the CPU clock. So slowing down the CPU would also slow down the
passing of time.

This commit adds a driver for the MFGPT1 clock from the AMD companion
chip found on lemote and hooks it up as the system clock.

It also changes the frequency value of hz from the default, which was
100, to 128. That's because the scaling on MFGPT clocks is represented
by powers of two.

Okay miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.20 2012/10/03 21:44:51 miod Exp $	*/
d78 1
d485 1
@


1.20
log
@Do not use <mips64/archtype.h> for loongson model numbers, but rather put the
list in loongson's <machine/autoconf.h> directly. <mips64/archtype.h> is
intended to be only used on ARCBios-like platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.19 2012/10/03 11:18:23 miod Exp $	*/
d392 2
d395 6
a400 1
					ret = (*ih->ih_fun)(ih->ih_arg);
@


1.19
log
@Split ever-growing mips <machine/cpu.h> into what 99% of the kernel needs,
which will remain in <machine/cpu.h>, and a new mips_cpu.h containing only the
goriest md details, which are only of interest to a handful set of files; this
is similar in spirit to what alpha does, but here <machine/cpu.h> does not
include the new file.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.18 2012/09/29 18:54:38 miod Exp $	*/
a28 1
#include <mips64/archtype.h>
@


1.18
log
@Proide a mips_sync() macro to wrap asm("sync"), and replace gazillions of
such statements with it.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.17 2011/07/21 20:36:12 miod Exp $	*/
d32 1
@


1.17
log
@Support for the eBenton EBT-700 netbook, which is similar to the Lemote
Yeeloong, but with a 7" display with a 800x480 resolution, and no webcam.

There are still problems to get it booting from disk from PMON (colour me
unsurprised), which are being looked at. Loading the boot blocks from a FAT
USB stick, to then boot the kernel from the disk, is a reliable workaround
in the meantime.

Tested by Ban Keong Yee (bankeong dot yee on gmail) who is the ``lucky''
owner of such a machine, thanks for your time!
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.16 2011/04/15 20:40:06 deraadt Exp $	*/
d31 1
d400 2
a401 1
					__asm__ ("sync\n\t.set reorder\n");
@


1.16
log
@More than a decade ago, interrupt handlers on sparc started returning 0
(interrupt was not for me), 1 (positive interrupt was for me), or -1
(i am not sure...).  We have continued with this practice in as many
drivers as possible, throughout the tree.

This makes some of the architectures use that information in their
interrupt handler calling code -- if 1 is returned (and we know
this specific machine does not have edge-shared interrupts), we
finish servicing other possible handlers on the same pin.  If the
interrupt pin remains asserted (from a different device), we will
end up back in the interrupt servicing code of course... but this is
cheaper than calling all the chained interrupts on a pin.

This does of course count on shared level interrupts being properly
sorted by IPL.

There have been some concerns about starvation of drivers which
incorrectly return 1.  Those drivers should be hunted down so that
they return -1.

(other architectures will follow)

ok kettenis drahn dlg miod
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.15 2010/10/14 21:23:04 pirofti Exp $	*/
d20 3
a22 2
 * Lemote {Fu,Lyn,Yee}loong specific code and configuration data.
 * (this file really ought to be named lemote_machdep.c by now)
d204 23
@


1.15
log
@Move glxpcib(4) to MI land unifying the two MD drivers.

Specific features of the companion chip will be handled in MD land.

Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.14 2010/09/01 04:52:43 miod Exp $	*/
d349 1
a349 1
		int lvl, bitno;
d368 2
a369 1
					if ((*ih->ih_fun)(ih->ih_arg) != 0) {
d376 2
@


1.14
log
@Let non-ykbec kernels link again.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.13 2010/08/31 10:24:46 pirofti Exp $	*/
d39 3
a44 2
#include <loongson/dev/glxreg.h>
#include <loongson/dev/glxvar.h>
@


1.13
log
@WIP suspend/resume support for loongson lemote. Okay miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.12 2010/05/08 21:59:56 miod Exp $	*/
d47 1
d199 1
d202 1
@


1.12
log
@Huge work-in-progress commit to support Loongson 2E-based evaluation boards
with a VIA 686 southbridge.

Features:
- 686 setup code (no thanks to PMON for not initializing the beast).
- work in progress ISA interrupt handling code.
- support for vga(4) compatible devices as console, in PC-compatible text mode.
- move legacy (ISA) support code out of bonito(4) to make things clearer.
- support more than 256MB on 2E-based systems.

Tested on a generic 2E-based evaluation board by someone who wishes to remain
anonymous; you know who you are, thank you very much for testing.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.11 2010/03/02 20:54:51 miod Exp $	*/
d44 1
d197 3
a199 1
	.reset = lemote_reset
@


1.11
log
@Add support for the Lemote Lynloong all-in-one PC (basically a Fuloong without
the serial and IR ports, built into a mac-like case). At least PMON initializes
the frame buffer in a much friendlier video mode (1360x768x16), but there is
still no frame buffer acceleration yet.

Tested by wvdputte.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.10 2010/03/01 09:29:37 otto Exp $	*/
d33 1
d36 1
d53 2
a54 4
void	lemote_attach_hook(pci_chipset_tag_t);
void	lemote_device_register(struct device *, void *);
int	lemote_intr_map(int, int, int);
void	lemote_reset(void);
d56 2
a57 2
void	fuloong_powerdown(void);
void	fuloong_setup(void);
d59 14
a72 1
void	yeeloong_powerdown(void);
d85 1
a85 3
	.bc_legacy_pic = 1,

	.bc_attach_hook = lemote_attach_hook,
d143 8
d157 1
d173 1
d189 1
d199 4
d204 1
a204 1
lemote_attach_hook(pci_chipset_tag_t pc)
d261 157
@


1.10
log
@fix serial console switching logic; ok miod@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.9 2010/02/28 22:39:14 miod Exp $	*/
d20 2
a21 1
 * Lemote Fuloong 2F and Yeeloong specific code and configuration data.
d89 18
a106 1
	{ IO_COM1,	IO_COM1 + 8 },
d108 1
d139 15
@


1.9
log
@Attach the IR port as a second serial port on Fuloong 2F. Verified to attach
and get interrupts by otto@@, no further testing due to lack of IR devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.8 2010/02/28 22:32:50 miod Exp $	*/
d235 1
a235 1
	serial = envvar == 0;
d237 1
a237 1
	serial = serial && envvar == 0;
@


1.8
log
@Minimal frame buffer driver for the SiS 315 found on Lemote Fuloong systems.
Currently unable to change video modes or provide any form of acceleration,
so you are stuck in a 640x400x8 mode, but at least people scared of serial
consoles will get a chance to use their Fuloongs now.

Tested by otto@@ (early developments) and jasper@@ (final version)
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.7 2010/02/23 21:04:16 otto Exp $	*/
d88 1
@


1.7
log
@ykbec(4), a driver to read fan, temperature and battery status using
the kb3310b embedded controller chip on the yeeloong. With help & ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.6 2010/02/16 21:31:36 miod Exp $	*/
d238 1
a238 2
	/* XXX always switch to serial until we have framebuffer */
	if (serial || 1) {
@


1.6
log
@Move part of the device_register() logic into platform-specific code. Add
correct root device identification for Gdium (assuming it is booted from the
G-Key), although it will not attach as sd0 if there is anything connected to
the usb port next to the Ethernet port.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.5 2010/02/12 19:43:43 otto Exp $	*/
d106 2
@


1.5
log
@use early setup hook to get serial console on the fuloong; with & ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.4 2010/02/12 19:37:31 miod Exp $	*/
d50 4
a53 2
void	yeeloong_attach_hook(pci_chipset_tag_t);
int	yeeloong_intr_map(int, int, int);
d56 2
a58 2
void	yeeloong_reset(void);
void	fuloong_setup(void);
d60 1
a60 1
const struct bonito_config yeeloong_bonito = {
d73 2
a74 2
	.bc_attach_hook = yeeloong_attach_hook,
	.bc_intr_map = yeeloong_intr_map
d115 1
a115 1
	.bonito_config = &yeeloong_bonito,
d119 2
d122 1
a122 1
	.reset = yeeloong_reset
d130 1
a130 1
	.bonito_config = &yeeloong_bonito,
d134 2
d137 1
a137 1
	.reset = yeeloong_reset
d141 1
a141 1
yeeloong_attach_hook(pci_chipset_tag_t pc)
d164 1
a164 1
yeeloong_intr_map(int dev, int fn, int pin)
d219 1
a219 1
yeeloong_reset()
d243 40
@


1.4
log
@Allow for two more per-platform function pointers, one for extra setup work
while pmon is still available, and one for reset (in addition to the already
existing powerdown routine).
Add reset and powerdown code to the fuloong 2f platform; this also fixes
reset on yeeloong.
Tested by otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.3 2010/02/12 08:14:02 miod Exp $	*/
d29 1
d42 8
d56 1
d116 1
a116 1
	.setup = NULL,
d216 21
@


1.3
log
@Overhaul per-platform specific operation by moving all the differences into
per-platform structs or function pointers; therefore bonito(4) no longer needs
to know about particular systems.

While there, bring little bits of Fuloong 2F support, tested on otto@@'s
machine.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.2 2010/02/09 21:31:47 miod Exp $	*/
d38 1
d44 1
d46 1
d106 3
a108 1
	.powerdown = NULL	/* XXX TBD */
d119 3
a121 1
	.powerdown = yeeloong_powerdown
d184 12
d200 6
@


1.2
log
@Make the bonito_pci_attach_hook per-platform, as a new callback in struct
bonito_config. Move the Geode initalization code previously found there
to yeeloong-specific code; and on Gdium, clear all the BAR of the internal
mini pci slot - it does not get initialized by PMON and the MI PCI code
complains about the bogus values it finds there on cold boots.
@
text
@d1 1
a1 1
/*	$OpenBSD: yeeloong_machdep.c,v 1.1 2010/02/05 20:51:22 miod Exp $	*/
d20 1
a20 1
 * Lemote Yeeloong specific code and configuration data.
d27 1
d30 2
d35 1
d43 2
d56 2
d62 55
d162 1
a162 1
		case 2:	/* AC97 */
d174 7
@


1.1
log
@Blind support for the EMTEC Gdium Liberty netbook. Per-platform configuration
is moved to specific files, and a pointer to the key configuration structure
is now kept in struct sys_config.
bonito(4) interrupt handling is split, to allow PCI+Legacy interrupt systems
(Lemote Yeelong) and PCI-only Legacy-free systems (Gdium) to coexist
peacefully.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 1
d34 1
d36 2
a37 1
int	 yeeloong_intr_map(int, int, int);
d50 1
d53 23
@

