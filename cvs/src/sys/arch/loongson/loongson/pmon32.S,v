head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.30
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.28
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.24
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.26
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.18
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.22
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.20
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.16
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.14
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	xmas_lemote:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2010.02.18.18.53.33;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.14.22.39.33;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.03.21.45.48;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.11.05.15.14;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.12.11.05.15.14;	author miod;	state Exp;
branches;
next	;


desc
@@


1.4
log
@The PMON code is compiled as 64 bit code but still using the old ABI (actually,
a 64-bit version of the old ABI), which explains why these wrappers are needed.
Update comments to match reality, and make cpp write all the code of this file.
(``survival of the laziest'' motto)
Keep the misleading file name though (lazyness again)
@
text
@/*	$OpenBSD: pmon32.S,v 1.3 2010/02/14 22:39:33 miod Exp $	*/

/*
 * Copyright (c) 2009 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Wrapper routines to invoke PMON2000 functions from 64-bit code.
 *
 * PMON is compiled as 64 bit code, using the gcc o64 ABI (similar to the o32
 * ABI, but using 64 bit registers).
 *
 * As a result, only up to four arguments to functions will be passed through
 * registers.  It's up to the caller to never invoke pmon_printf() with more
 * than four arguments; other functions are not affected.
 */

#include <machine/param.h>
#include <machine/asm.h>

#ifndef _STANDALONE
#include "assym.h"
#endif

	.set	mips3

	.data
	.globl	pmon_callvec
pmon_callvec:
	.word	0

	.text

/*
 * Note that we need to provide a CF_SZ untouched area above sp, or we'll risk
 * our stack being corrupted upon return.
 */
#define	PMON_WRAP(name, index) \
	NNON_LEAF(name, FRAMESZ(CF_SZ + 9 * REGSZ),  ra); \
	PTR_SUBU sp, sp, FRAMESZ(CF_SZ + 9 * REGSZ); \
	REG_S	ra, CF_RA_OFFS(sp); \
	.mask	0xc0ff0000, (CF_RA_OFFS - FRAMESZ(CF_SZ + 9 * REGSZ)); \
	REG_S	s0, (0 * REGSZ + CF_SZ)(sp); \
	REG_S	s1, (1 * REGSZ + CF_SZ)(sp); \
	REG_S	s2, (2 * REGSZ + CF_SZ)(sp); \
	REG_S	s3, (3 * REGSZ + CF_SZ)(sp); \
	REG_S	s4, (4 * REGSZ + CF_SZ)(sp); \
	REG_S	s5, (5 * REGSZ + CF_SZ)(sp); \
	REG_S	s6, (6 * REGSZ + CF_SZ)(sp); \
	REG_S	s7, (7 * REGSZ + CF_SZ)(sp); \
	REG_S	s8, (8 * REGSZ + CF_SZ)(sp); \
	lw	t0, pmon_callvec; \
	lw	t0, (index) * 4 (t0); \
	jalr	t0; \
	nop; \
	REG_L	s8, (8 * REGSZ + CF_SZ)(sp); \
	REG_L	s7, (7 * REGSZ + CF_SZ)(sp); \
	REG_L	s6, (6 * REGSZ + CF_SZ)(sp); \
	REG_L	s5, (5 * REGSZ + CF_SZ)(sp); \
	REG_L	s4, (4 * REGSZ + CF_SZ)(sp); \
	REG_L	s3, (3 * REGSZ + CF_SZ)(sp); \
	REG_L	s2, (2 * REGSZ + CF_SZ)(sp); \
	REG_L	s1, (1 * REGSZ + CF_SZ)(sp); \
	REG_L	s0, (0 * REGSZ + CF_SZ)(sp); \
	REG_L	ra, CF_RA_OFFS(sp); \
	PTR_ADDU sp, sp, FRAMESZ(CF_SZ + 9 * REGSZ); \
	jr	ra; \
	nop; \
	END(name)

PMON_WRAP(pmon_printf, 5)
PMON_WRAP(pmon_gets, 7)
#ifdef _STANDALONE
PMON_WRAP(pmon_open, 0)
PMON_WRAP(pmon_close, 1)
PMON_WRAP(pmon_read, 2)
PMON_WRAP(pmon_lseek, 4)
PMON_WRAP(pmon_cacheflush, 6)
#endif
#if 0	/* unused */
PMON_WRAP(pmon_write, 3)
#endif
@


1.3
log
@Work in progress standalone boot blocks for OpenBSD/loongson systems. Will
load a kernel from the OpenBSD partition, with symbols.
However:
- does not work on gdium (usb i/o errors)
- no countdown due to PMON limitations, so either `bsd' in the PMON
  environment contains a kernel filename to load, and it will get loaded
  immediately, or it doesn't (e.g. the variable does no exist) and you get
  a prompt and can pass options to the kernel. Note that /etc/boot.conf
  commands can still be used in both cases.
- does not work for me when loaded automatically from PMON (put in the `al'
  environment variable). However, `boot $al' works fine. Need to investigate.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmon32.S,v 1.2 2010/02/03 21:45:48 miod Exp $	*/
d22 2
a23 2
 * Since the PMON code is compiled as 32 bit code, the upper part of the
 * registers may be destroyed.
d25 3
a27 10
 * As a result, we need to explicitely save all caller-saved registers,
 * prior to invoking any PMON function.
 *
 * Moreover, O32 calling convention only allows up to four arguments to
 * be passed through registers.  It's up to the caller to never invoke
 * pmon_printf() with more than four arguments; other functions are not
 * affected.
 *
 * 64-bit (off_t) return values are preserved (by merging v1 and v0) on a
 * case-by-case basis.
d47 2
a48 2
 * Note that we need to provide a 32-bit CF_SZ untouched area above sp, or
 * we'll get our stack corrupted upon return.
d50 1
a50 2

#define	PMON_WRAP(name) \
d63 5
a67 3
	REG_S	s8, (8 * REGSZ + CF_SZ)(sp)

#define	PMON_END(name) \
d83 2
a84 17
PMON_WRAP(pmon_printf)
	lw	t0, pmon_callvec
	lw	t0, 5 * 4 (t0)
	jalr	t0
	nop
PMON_END(pmon_printf)

PMON_WRAP(pmon_gets)
	lw	t0, pmon_callvec
	lw	t0, 7 * 4 (t0)
	jalr	t0
	nop
	/* make sure the return value is sign extended */
	dsll32	v0, 0
	dsra32	v0, 0
PMON_END(pmon_gets)

d86 5
a90 61

PMON_WRAP(pmon_cacheflush)
	lw	t0, pmon_callvec
	lw	t0, 6 * 4 (t0)
	jalr	t0
	nop
PMON_END(pmon_cacheflush)

PMON_WRAP(pmon_open)
	lw	t0, pmon_callvec
	lw	t0, 0 * 4 (t0)
	jalr	t0
	nop
PMON_END(pmon_open)

PMON_WRAP(pmon_close)
	lw	t0, pmon_callvec
	lw	t0, 1 * 4 (t0)
	jalr	t0
	nop
PMON_END(pmon_close)

PMON_WRAP(pmon_read)
	lw	t0, pmon_callvec
	lw	t0, 2 * 4 (t0)
	jalr	t0
	nop
PMON_END(pmon_read)

PMON_WRAP(pmon_lseek)
	lw	t0, pmon_callvec
	lw	t0, 4 * 4 (t0)
#if 0
	/*
	 * Setup arguments the way 32-bit PMON expects them.
	 * 64-bit mode: a0 = fd, a1 = off, a2 = whence
	 * 32-bit mode: a0 = fd, a2:a3 = off, 16(sp) = whence
	 */
	sw	a2, 16(sp)
#ifdef __MIPSEB__
	dsll32	a3, a1, 0
	dsrl32	a2, a1, 0	/* a2 = hi */
	dsrl32	a3, a3, 0	/* a3 = low */
#else
	dsll32	a2, a1, 0
	dsrl32	a3, a1, 0	/* a3 = hi */
	dsrl32	a2, a2, 0	/* a2 = low */
#endif
#endif
	jalr	t0
	nop
#if 0
	/* rebuild the 64 bit return value */
	dsll32	v0, 0
	dsll32	v1, 0
#ifdef __MIPSEB__
	/* v1 = lo << 32, v0 = hi << 32 */
	dsrl32	v1, 0
#else
	/* v1 = hi << 32, v0 = lo << 32 */
	dsrl32	v0, 0
d92 2
a93 19
	or	v0, v1, v0
#endif
PMON_END(pmon_lseek)

#endif

/*
 * The following routines are untested.
 */

#if 0

PMON_WRAP(pmon_write)
	lw	t0, pmon_callvec
	lw	t0, 3 * 4 (t0)
	jalr	t0
	nop
PMON_END(pmon_write)

@


1.2
log
@There is no need to compile this code with .set noat, really.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmon32.S,v 1.1.1.1 2009/12/11 05:15:14 miod Exp $	*/
d40 1
d42 1
d106 1
a106 1
#if 0
a114 4
/*
 * The following routines are untested.
 */

a135 7
PMON_WRAP(pmon_write)
	lw	t0, pmon_callvec
	lw	t0, 3 * 4 (t0)
	jalr	t0
	nop
PMON_END(pmon_write)

d139 17
d158 1
d170 1
d172 15
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a49 2

	.set	noat
@


1.1.1.1
log
@By popular demand and peer pressure, check-in work in progress work to support
the Yeelong Lemote mips-based netbook. Kernel bits only for now, needs
polishing; most of this work done during h2k9 last month, although the
porting effort started earlier this year.
@
text
@@
