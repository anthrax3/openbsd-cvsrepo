head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.5.0.14
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.12
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.8
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.12
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	xmas_lemote:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2017.01.19.15.09.04;	author visa;	state Exp;
branches;
next	1.6;
commitid	8FHInuctPjWFPH6r;

1.6
date	2016.11.18.15.38.14;	author visa;	state Exp;
branches;
next	1.5;
commitid	BDpOIONGnT9sDbAo;

1.5
date	2013.06.05.01.28.04;	author pirofti;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.02.21.46.04;	author pirofti;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.03.11.18.23;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.14.22.39.33;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.11.05.14.52;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.12.11.05.14.52;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Extend struct platform with MP control functions, and add bootstrap code
for secondary CPUs.

Discussed with miod@@
@
text
@/*	$OpenBSD: locore.S,v 1.6 2016/11/18 15:38:14 visa Exp $ */

/*
 * Copyright (c) 2001-2004 Opsycon AB  (www.opsycon.se / www.opsycon.com)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */
#include <sys/errno.h>
#include <sys/syscall.h>

#include <machine/param.h>
#include <machine/asm.h>
#include <machine/cpu.h>
#include <mips64/mips_cpu.h>
#include <machine/regnum.h>
#include <machine/cpustate.h>

#include "assym.h"

	.set	noreorder		# Noreorder is default style!

	.globl	start
	.globl	kernel_text
kernel_text = start
start:
	mfc0    v0, COP_0_STATUS_REG
	li	v1, ~SR_INT_ENAB
	and	v0, v1
	mtc0    v0, COP_0_STATUS_REG    # disable all interrupts

	mtc0	zero, COP_0_CAUSE_REG	# Clear soft interrupts

	/*
	 * Initialize stack and call machine startup.
	 */
	LA	t0, start - FRAMESZ(CF_SZ)
	LA	gp, _gp
	PTR_S	ra, CF_RA_OFFS(t0)		# save pmon return address
	PTR_S	sp, 0(t0)			# and stack
	move	sp, t0
	jal	mips_init			# mips_init(argc, argv, envp,
	nop					#    callvec, esym)

	beqz	v0, 1f				# upon failure, return to pmon
	nop

	PTR_S	zero, CF_RA_OFFS(sp)		# Zero out old ra for debugger
	move	sp, v0				# switch to new stack
	jal	main				# main(regs)
	move	a0, zero
	PANIC("Startup failed!")

1:	PTR_L	ra, CF_RA_OFFS(sp)
	PTR_L	sp, 0(sp)
	jr	ra
	nop

#ifdef HIBERNATE

	/* Switch to hibernate resume pagetable */
LEAF(hibernate_activate_resume_pt_machdep, 0)				/* { */
	/* XXX TBD */
	j	ra
END(hibernate_activate_resume_pt_machdep)				/* } */

LEAF(hibernate_switch_stack_machdep, 0)					/* { */
	/* XXX TBD */
	j	ra
END(hibernate_switch_stack_machdep)					/* } */

LEAF(hibernate_resume_machdep, 0)					/* { */
	j	ra
END(hibernate_resume_machdep)					/* } */

#endif /* HIBERNATE */

#ifdef MULTIPROCESSOR

LEAF(hw_cpu_spinup_trampoline, 0)
	/* Disable interrupts. */
	mfc0    v0, COP_0_STATUS_REG
	li	v1, ~SR_INT_ENAB
	and	v0, v1
	mtc0    v0, COP_0_STATUS_REG

	/* Clear any pending soft interrupts. */
	mtc0	zero, COP_0_CAUSE_REG

	LA	t0, cpu_spinup_a0
	ld	a0, 0(t0)
	LA	t0, cpu_spinup_sp
	ld	sp, 0(t0)
	jal	hw_cpu_hatch
	 LA	gp, _gp
END(hw_cpu_spinup_trampoline)

LEAF(hw_getcurcpu, 0)
	GET_CPU_INFO(v0, v1)
	jr	ra
	nop
END(hw_getcurcpu)

LEAF(hw_setcurcpu, 0)
	dmtc0	a0, COP_0_ERROR_PC
	jr	ra
	nop
END(hw_setcurcpu)

#endif /* MULTIPROCESSOR */
@


1.6
log
@Use the ErrorEPC register for curcpu().
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.S,v 1.5 2013/06/05 01:28:04 pirofti Exp $ */
d98 18
@


1.5
log
@Implement hibernate_flush.

Might have to find a better place for the cache.h header but until then
it will have to do.

Discussed with miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.S,v 1.4 2013/06/02 21:46:04 pirofti Exp $ */
d96 16
@


1.4
log
@Start working on hibernate support for Loongson

This is work in progress. Nothing to test or play with for now.
Commiting it now so that I can work on it in-tree.

Okay miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.S,v 1.3 2012/10/03 11:18:23 miod Exp $ */
a78 5

LEAF(hibernate_flush, 0)						/* { */
	/* XXX TBD */
	j	ra
END(hibernate_flush)							/* } */
@


1.3
log
@Split ever-growing mips <machine/cpu.h> into what 99% of the kernel needs,
which will remain in <machine/cpu.h>, and a new mips_cpu.h containing only the
goriest md details, which are only of interest to a handful set of files; this
is similar in spirit to what alpha does, but here <machine/cpu.h> does not
include the new file.
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.S,v 1.2 2010/02/14 22:39:33 miod Exp $ */
d77 24
@


1.2
log
@Work in progress standalone boot blocks for OpenBSD/loongson systems. Will
load a kernel from the OpenBSD partition, with symbols.
However:
- does not work on gdium (usb i/o errors)
- no countdown due to PMON limitations, so either `bsd' in the PMON
  environment contains a kernel filename to load, and it will get loaded
  immediately, or it doesn't (e.g. the variable does no exist) and you get
  a prompt and can pass options to the kernel. Note that /etc/boot.conf
  commands can still be used in both cases.
- does not work for me when loaded automatically from PMON (put in the `al'
  environment variable). However, `boot $al' works fine. Need to investigate.
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.S,v 1.1.1.1 2009/12/11 05:14:52 miod Exp $ */
d34 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: locore.S,v 1.9 2009/05/22 20:37:54 miod Exp $ */
d60 2
a61 2
	jal	mips_init			# mips_init(argc, argv, envp, callvec)
	nop
@


1.1.1.1
log
@By popular demand and peer pressure, check-in work in progress work to support
the Yeelong Lemote mips-based netbook. Kernel bits only for now, needs
polishing; most of this work done during h2k9 last month, although the
porting effort started earlier this year.
@
text
@@
