head	1.8;
access;
symbols
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.6.0.18
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.14
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.10
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.12
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.8
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.6
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	xmas_lemote:1.1.1.1
	miod:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2017.06.08.12.02.52;	author visa;	state Exp;
branches;
next	1.7;
commitid	zGzjYZWjWwx4nSCj;

1.7
date	2017.06.08.11.44.00;	author visa;	state Exp;
branches;
next	1.6;
commitid	hQac7FQGfhHx2lWY;

1.6
date	2013.06.02.21.46.04;	author pirofti;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.16.21.31.36;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.14.22.39.33;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.11.20.14.08;	author otto;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.04.16.41.16;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.24.11.28.11;	author miod;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.11.24.11.28.11;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Move loongson/octeon/sgi unmap_startup() under arch/mips64.
@
text
@/*	$OpenBSD: autoconf.c,v 1.7 2017/06/08 11:44:00 visa Exp $	*/
/*
 * Copyright (c) 2009 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/reboot.h>
#include <sys/hibernate.h>

#include <machine/autoconf.h>

extern void dumpconf(void);
void	parsepmonbp(void);

int	cold = 1;
struct device *bootdv = NULL;
char    bootdev[16];
enum devclass bootdev_class = DV_DULL;

extern char pmon_bootp[];

void
cpu_configure(void)
{
	(void)splhigh();

	softintr_init();
	(void)config_rootfound("mainbus", NULL);

	unmap_startup();

	splinit();
	cold = 0;
}

void
parsepmonbp(void)
{
	char *p, *q;
	size_t len;

	if (strncmp(pmon_bootp, "tftp://", 7) == 0) {
		bootdev_class = DV_IFNET;
		strlcpy(bootdev, "netboot", sizeof bootdev);
		return;
	}
	strlcpy(bootdev, "unknown", sizeof bootdev);

	if (strncmp(pmon_bootp, "/dev/disk/", 10) == 0) {
		/* kernel loaded by our boot blocks */
		p = pmon_bootp + 10;
		len = strlen(p);
	} else {
		/* kernel loaded by PMON */
		p = strchr(pmon_bootp, '@@');
		if (p == NULL)
			return;
		p++;

		q = strchr(p, '/');
		if (q == NULL)
			return;
		len = q - p;
	}

	if (len <= 2 || len >= sizeof bootdev - 1)
		return;
	memcpy(bootdev, p, len);
	bootdev[len] = '\0';
	bootdev_class = DV_DISK;
}

void
diskconf(void)
{
	if (*pmon_bootp != '\0')
		printf("pmon bootpath: %s\n", pmon_bootp);

	if (bootdv != NULL)
		printf("boot device: %s\n", bootdv->dv_xname);

	setroot(bootdv, 0, RB_USERREQ);
	dumpconf();

#ifdef HIBERNATE
	hibernate_resume();
#endif /* HIBERNATE */
}

void
device_register(struct device *dev, void *aux)
{
	if (bootdv != NULL)
		return;

	(*sys_platform->device_register)(dev, aux);
}

struct nam2blk nam2blk[] = {
	{ "sd",		0 },
	{ "cd",		3 },
	{ "wd",		4 },
	{ "rd",		8 },
	{ "vnd",	2 },
	{ NULL,		-1 }
};
@


1.7
log
@Split early startup code out of locore.S into locore0.S.  Adjust link
run so that this locore0.o is always at the start of the executable.
But randomize the link order of all other .o files in the kernel, so
that their exec/rodata/data/bss segments land all over the place.

Late during kernel boot, smash the startup code with traps so that
it does not point to the other randomly placed code.  It has be smashed,
because loongson runs in the kseg0 space.

As a result, the internal layout of every newly build bsd kernel is
different from past kernels.  Internal relative offsets are not known
to an outside attacker.

Ramdisk kernels cannot be compiled like this, because they are gzip'd.
When the internal pointer references change, the compression dictionary
bloats and results in poorer compression.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.6 2013/06/02 21:46:04 pirofti Exp $	*/
a35 11

void
unmap_startup(void)
{
	extern uint32_t kernel_text[], endboot[];
	uint32_t *word = kernel_text;

	/* Cannot unmap kseg0; smash with trap. */
	while (word < endboot)
		*word++ = 0x00000034u;	/* TEQ zero, zero */
}
@


1.6
log
@Start working on hibernate support for Loongson

This is work in progress. Nothing to test or play with for now.
Commiting it now so that I can work on it in-tree.

Okay miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.5 2010/02/16 21:31:36 miod Exp $	*/
d38 11
d55 2
@


1.5
log
@Move part of the device_register() logic into platform-specific code. Add
correct root device identification for Gdium (assuming it is booted from the
G-Key), although it will not attach as sd0 if there is anything connected to
the usb port next to the Ethernet port.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.4 2010/02/14 22:39:33 miod Exp $	*/
d23 1
d97 4
@


1.4
log
@Work in progress standalone boot blocks for OpenBSD/loongson systems. Will
load a kernel from the OpenBSD partition, with symbols.
However:
- does not work on gdium (usb i/o errors)
- no countdown due to PMON limitations, so either `bsd' in the PMON
  environment contains a kernel filename to load, and it will get loaded
  immediately, or it doesn't (e.g. the variable does no exist) and you get
  a prompt and can pass options to the kernel. Note that /etc/boot.conf
  commands can still be used in both cases.
- does not work for me when loaded automatically from PMON (put in the `al'
  environment variable). However, `boot $al' works fine. Need to investigate.
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.3 2010/02/11 20:14:08 otto Exp $	*/
d24 2
d88 2
a89 1
	printf("pmon bootpath: %s\n", pmon_bootp);
a100 3
	const char *drvrname = dev->dv_cfdata->cf_driver->cd_name;
	const char *name = dev->dv_xname;

d104 1
a104 31
	if (dev->dv_class != bootdev_class)
		return;	
	/* 
	 * The device numbering must match. There's no way
	 * pmon tells us more info. Depending on the usb slot
	 * and hubs used you may be lucky. Also, assume umass/sd for usb
	 * attached devices.
	 */
	switch (bootdev_class) {
	case DV_DISK:
		if (strcmp(drvrname, "wd") == 0 && strcmp(name, bootdev) == 0)
			bootdv = dev;
		else {
			/* XXX this really only works safely for usb0... */
		    	if ((strcmp(drvrname, "sd") == 0 ||
			    strcmp(drvrname, "cd") == 0) &&
			    strncmp(bootdev, "usb", 3) == 0 &&
			    strcmp(name + 2, bootdev + 3) == 0)
				bootdv = dev;
		}
		break;
	case DV_IFNET:
		/*
		 * This relies on the onboard Ethernet interface being
		 * attached before any other (usb) interface.
		 */
		bootdv = dev;
		break;
	default:
		break;
	}
@


1.3
log
@cd in nam2blk; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.2 2010/02/04 16:41:16 otto Exp $	*/
d25 1
a25 1
void parsepmonbp(void);
d59 17
a75 8
	p = strchr(pmon_bootp, '@@');
	if (p == NULL)
		return;
	p++;
	q = strchr(p, '/');
	if (q == NULL)
		return;
	len = q - p;
@


1.2
log
@basic bootpath -> bootdev translation; ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: autoconf.c,v 1.1.1.1 2009/11/24 11:28:11 miod Exp $	*/
d130 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d25 1
d29 4
d47 28
d77 2
d89 3
d95 31
a125 1
	/* ... */
@


1.1.1.1
log
@By popular demand and peer pressure, check-in work in progress work to support
the Yeelong Lemote mips-based netbook. Kernel bits only for now, needs
polishing; most of this work done during h2k9 last month, although the
porting effort started earlier this year.
@
text
@@
