head	1.23;
access;
symbols
	OPENBSD_6_2:1.23.0.2
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.23.0.4
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.19.0.10
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.18.0.4
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.2
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.17.0.6
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.4
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9;
locks; strict;
comment	@ * @;


1.23
date	2017.01.23.10.54.51;	author fcambus;	state Exp;
branches;
next	1.22;
commitid	UWZ2cpfFOFrPr59u;

1.22
date	2016.12.05.15.04.15;	author fcambus;	state Exp;
branches;
next	1.21;
commitid	aMf0uryIVAssQMo0;

1.21
date	2016.11.15.13.53.35;	author fcambus;	state Exp;
branches;
next	1.20;
commitid	xsxlcedY26glsgBB;

1.20
date	2016.01.08.15.54.13;	author jcs;	state Exp;
branches;
next	1.19;
commitid	kI4H556ZKYkRQGw5;

1.19
date	2013.12.24.01.11.04;	author dlg;	state Exp;
branches;
next	1.18;

1.18
date	2012.10.03.21.44.51;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2011.07.21.20.36.12;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2010.10.14.21.23.04;	author pirofti;	state Exp;
branches;
next	1.15;

1.15
date	2010.09.09.19.06.15;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.01.13.10.42;	author pirofti;	state Exp;
branches;
next	1.13;

1.13
date	2010.08.31.12.22.38;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.31.10.24.46;	author pirofti;	state Exp;
branches;
next	1.11;

1.11
date	2010.07.31.16.04.46;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2010.05.08.21.59.56;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2010.03.02.17.49.38;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2010.03.02.09.58.19;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2010.02.28.17.32.30;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.28.09.40.06;	author otto;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.28.08.30.27;	author otto;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.24.18.29.39;	author otto;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.24.17.38.39;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.23.21.59.38;	author otto;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.23.21.04.16;	author otto;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Nuke extraneous whitespace and tabs.
@
text
@/*	$OpenBSD: kb3310.c,v 1.22 2016/12/05 15:04:15 fcambus Exp $	*/
/*
 * Copyright (c) 2010 Otto Moerbeek <otto@@drijf.net>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/sensors.h>
#include <sys/timeout.h>

#include <machine/apmvar.h>
#include <machine/autoconf.h>
#include <machine/bus.h>
#include <dev/isa/isavar.h>

#include <dev/pci/glxreg.h>

#include <loongson/dev/bonitoreg.h>
#include <loongson/dev/kb3310var.h>

#include "apm.h"
#include "pckbd.h"
#include "hidkbd.h"

#if NPCKBD > 0 || NHIDKBD > 0
#include <dev/ic/pckbcvar.h>
#include <dev/pckbc/pckbdvar.h>
#include <dev/hid/hidkbdvar.h>
#endif

struct cfdriver ykbec_cd = {
	NULL, "ykbec", DV_DULL,
};

#ifdef KB3310_DEBUG
#define DPRINTF(x)	printf x
#else
#define DPRINTF(x)
#endif

#define IO_YKBEC		0x381
#define IO_YKBECSIZE		0x3

static const struct {
	const char *desc;
	int type;
} ykbec_table[] = {
#define YKBEC_FAN	0
	{ NULL,				SENSOR_FANRPM },
#define YKBEC_ITEMP	1
	{ "Internal temperature",	SENSOR_TEMP },
#define YKBEC_FCAP	2
	{ "Battery full charge capacity", SENSOR_AMPHOUR },
#define YKBEC_BCURRENT	3
	{ "Battery current",		SENSOR_AMPS },
#define YKBEC_BVOLT	4
	{ "Battery voltage",		SENSOR_VOLTS_DC },
#define YKBEC_BTEMP	5
	{ "Battery temperature",	SENSOR_TEMP },
#define YKBEC_CAP	6
	{ "Battery capacity",		SENSOR_PERCENT },
#define YKBEC_CHARGING	7
	{ "Battery charging",		SENSOR_INDICATOR },
#define YKBEC_AC	8
	{ "AC-Power",			SENSOR_INDICATOR },
#define YKBEC_LID	9
	{ "Lid open",			SENSOR_INDICATOR }
#define YKBEC_NSENSORS	10
};

struct ykbec_softc {
	struct device		sc_dev;
	bus_space_tag_t		sc_iot;
	bus_space_handle_t	sc_ioh;
	struct ksensor		sc_sensor[YKBEC_NSENSORS];
	struct ksensordev	sc_sensordev;
#if NPCKBD > 0 || NHIDKBD > 0
	struct timeout		sc_bell_tmo;
#endif
};

static struct ykbec_softc *ykbec_sc;
static int ykbec_chip_config;

extern void loongson_set_isa_imr(uint);

int	ykbec_match(struct device *, void *, void *);
void	ykbec_attach(struct device *, struct device *, void *);

const struct cfattach ykbec_ca = {
	sizeof(struct ykbec_softc), ykbec_match, ykbec_attach
};

int	ykbec_apminfo(struct apm_power_info *);
void	ykbec_bell(void *, u_int, u_int, u_int, int);
void	ykbec_bell_stop(void *);
void	ykbec_print_bat_info(struct ykbec_softc *);
u_int	ykbec_read(struct ykbec_softc *, u_int);
u_int	ykbec_read16(struct ykbec_softc *, u_int);
void	ykbec_refresh(void *arg);
void	ykbec_write(struct ykbec_softc *, u_int, u_int);

#if NAPM > 0
struct apm_power_info ykbec_apmdata;
const char *ykbec_batstate[] = {
	"high",
	"low",
	"critical",
	"charging",
	"unknown"
};
#define BATTERY_STRING(x) ((x) < nitems(ykbec_batstate) ? \
	ykbec_batstate[x] : ykbec_batstate[4])
#endif

int
ykbec_match(struct device *parent, void *match, void *aux)
{
	struct isa_attach_args *ia = aux;
	bus_space_handle_t ioh;

	/* XXX maybe allow LOONGSON_EBT700 ??? */
	if (sys_platform->system_type != LOONGSON_YEELOONG)
		return (0);

	if ((ia->ia_iobase != IOBASEUNK && ia->ia_iobase != IO_YKBEC) ||
	    /* (ia->ia_iosize != 0 && ia->ia_iosize != IO_YKBECSIZE) || XXX isa.c */
	    ia->ia_maddr != MADDRUNK || ia->ia_msize != 0 ||
	    ia->ia_irq != IRQUNK || ia->ia_drq != DRQUNK)
		return (0);

	if (bus_space_map(ia->ia_iot, IO_YKBEC, IO_YKBECSIZE, 0, &ioh))
		return (0);

	bus_space_unmap(ia->ia_iot, ioh, IO_YKBECSIZE);

	ia->ia_iobase = IO_YKBEC;
	ia->ia_iosize = IO_YKBECSIZE;

	return (1);
}

void
ykbec_attach(struct device *parent, struct device *self, void *aux)
{
	struct isa_attach_args *ia = aux;
	struct ykbec_softc *sc = (struct ykbec_softc *)self;
	int i;

	sc->sc_iot = ia->ia_iot;
	if (bus_space_map(sc->sc_iot, ia->ia_iobase, ia->ia_iosize, 0,
	    &sc->sc_ioh)) {
		printf(": couldn't map I/O space");
		return;
	}

	/* Initialize sensor data. */
	strlcpy(sc->sc_sensordev.xname, sc->sc_dev.dv_xname,
	    sizeof(sc->sc_sensordev.xname));
	if (sensor_task_register(sc, ykbec_refresh, 5) == NULL) {
		printf(", unable to register update task\n");
		return;
	}

#ifdef DEBUG
	ykbec_print_bat_info(sc);
#endif
	printf("\n");

	for (i = 0; i < YKBEC_NSENSORS; i++) {
		sc->sc_sensor[i].type = ykbec_table[i].type;
		if (ykbec_table[i].desc)
			strlcpy(sc->sc_sensor[i].desc, ykbec_table[i].desc,
			    sizeof(sc->sc_sensor[i].desc));
		sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[i]);
	}

	sensordev_install(&sc->sc_sensordev);

#if NAPM > 0
	/* make sure we have the apm state initialized before apm attaches */
	ykbec_refresh(sc);
	apm_setinfohook(ykbec_apminfo);
#endif
#if NPCKBD > 0 || NHIDKBD > 0
	timeout_set(&sc->sc_bell_tmo, ykbec_bell_stop, sc);
#if NPCKBD > 0
	pckbd_hookup_bell(ykbec_bell, sc);
#endif
#if NHIDKBD > 0
	hidkbd_hookup_bell(ykbec_bell, sc);
#endif
#endif
	ykbec_sc = sc;
}

void
ykbec_write(struct ykbec_softc *mcsc, u_int reg, u_int datum)
{
	struct ykbec_softc *sc = (struct ykbec_softc *)mcsc;
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;

	bus_space_write_1(iot, ioh, 0, (reg >> 8) & 0xff);
	bus_space_write_1(iot, ioh, 1, (reg >> 0) & 0xff);
	bus_space_write_1(iot, ioh, 2, datum);
}

u_int
ykbec_read(struct ykbec_softc *mcsc, u_int reg)
{
	struct ykbec_softc *sc = (struct ykbec_softc *)mcsc;
	bus_space_tag_t iot = sc->sc_iot;
	bus_space_handle_t ioh = sc->sc_ioh;

	bus_space_write_1(iot, ioh, 0, (reg >> 8) & 0xff);
	bus_space_write_1(iot, ioh, 1, (reg >> 0) & 0xff);
	return bus_space_read_1(iot, ioh, 2);
}

u_int
ykbec_read16(struct ykbec_softc *mcsc, u_int reg)
{
	u_int val;

	val = ykbec_read(mcsc, reg);
	return (val << 8) | ykbec_read(mcsc, reg + 1);
}

#define KB3310_FAN_SPEED_DIVIDER	480000

#define ECTEMP_CURRENT_REG		0xf458
#define REG_FAN_SPEED_HIGH		0xfe22
#define REG_FAN_SPEED_LOW		0xfe23

#define REG_DESIGN_CAP_HIGH		0xf77d
#define REG_DESIGN_CAP_LOW		0xf77e
#define REG_FULLCHG_CAP_HIGH		0xf780
#define REG_FULLCHG_CAP_LOW		0xf781

#define REG_DESIGN_VOL_HIGH		0xf782
#define REG_DESIGN_VOL_LOW		0xf783
#define REG_CURRENT_HIGH		0xf784
#define REG_CURRENT_LOW			0xf785
#define REG_VOLTAGE_HIGH		0xf786
#define REG_VOLTAGE_LOW			0xf787
#define REG_TEMPERATURE_HIGH		0xf788
#define REG_TEMPERATURE_LOW		0xf789
#define REG_RELATIVE_CAT_HIGH		0xf492
#define REG_RELATIVE_CAT_LOW		0xf493
#define REG_BAT_VENDOR			0xf4c4
#define REG_BAT_CELL_COUNT		0xf4c6

#define REG_BAT_CHARGE			0xf4a2
#define BAT_CHARGE_AC			0x00
#define BAT_CHARGE_DISCHARGE		0x01
#define BAT_CHARGE_CHARGE		0x02

#define REG_POWER_FLAG			0xf440
#define POWER_FLAG_ADAPTER_IN		(1<<0)
#define POWER_FLAG_POWER_ON		(1<<1)
#define POWER_FLAG_ENTER_SUS		(1<<2)

#define REG_BAT_STATUS			0xf4b0
#define BAT_STATUS_BAT_EXISTS		(1<<0)
#define BAT_STATUS_BAT_FULL		(1<<1)
#define BAT_STATUS_BAT_DESTROY		(1<<2)
#define BAT_STATUS_BAT_LOW		(1<<5)

#define REG_CHARGE_STATUS		0xf4b1
#define CHARGE_STATUS_PRECHARGE		(1<<1)
#define CHARGE_STATUS_OVERHEAT		(1<<2)

#define REG_BAT_STATE			0xf482
#define BAT_STATE_DISCHARGING		(1<<0)
#define BAT_STATE_CHARGING		(1<<1)

#define	REG_BEEP_CONTROL		0xf4d0
#define	BEEP_ENABLE			(1<<0)

#define REG_PMUCFG			0xff0c
#define PMUCFG_STOP_MODE		(1<<7)
#define PMUCFG_IDLE_MODE		(1<<6)
#define PMUCFG_LPC_WAKEUP		(1<<5)
#define PMUCFG_RESET_8051		(1<<4)
#define PMUCFG_SCI_WAKEUP		(1<<3)
#define PMUCFG_WDT_WAKEUP		(1<<2)
#define PMUCFG_GPWU_WAKEUP		(1<<1)
#define PMUCFG_IRQ_IDLE			(1<<0)

#define REG_USB0			0xf461
#define REG_USB1			0xf462
#define REG_USB2			0xf463
#define USB_FLAG_ON			1
#define USB_FLAG_OFF			0

#define REG_FAN_CONTROL			0xf4d2
#define	REG_FAN_ON			1
#define REG_FAN_OFF			0

#define REG_LID_STATE			0xf4bd
#define LID_OPEN			1
#define LID_CLOSED			0

#define YKBEC_SCI_IRQ			0xa

#ifdef DEBUG
void
ykbec_print_bat_info(struct ykbec_softc *sc)
{
	uint bat_status, count, dvolt, dcap;

	printf(": battery ");
	bat_status = ykbec_read(sc, REG_BAT_STATUS);
	if (!ISSET(bat_status, BAT_STATUS_BAT_EXISTS)) {
		printf("absent");
		return;
	}

	count = ykbec_read(sc, REG_BAT_CELL_COUNT);
	dvolt = ykbec_read16(sc, REG_DESIGN_VOL_HIGH);
	dcap = ykbec_read16(sc, REG_DESIGN_CAP_HIGH);
	printf("%d cells, design capacity %dmV %dmAh", count, dvolt, dcap);
}
#endif

void
ykbec_refresh(void *arg)
{
	struct ykbec_softc *sc = (struct ykbec_softc *)arg;
	u_int val, bat_charge, bat_status, charge_status, bat_state, power_flag;
	u_int lid_state, cap_pct, fullcap;
	int current;
#if NAPM > 0
	struct apm_power_info old;
#endif

	val = ykbec_read16(sc, REG_FAN_SPEED_HIGH) & 0xfffff;
	if (val != 0) {
		val = KB3310_FAN_SPEED_DIVIDER / val;
		sc->sc_sensor[YKBEC_FAN].value = val;
		CLR(sc->sc_sensor[YKBEC_FAN].flags, SENSOR_FINVALID);
	} else
		SET(sc->sc_sensor[YKBEC_FAN].flags, SENSOR_FINVALID);

	val = ykbec_read(sc, ECTEMP_CURRENT_REG);
	sc->sc_sensor[YKBEC_ITEMP].value = val * 1000000 + 273150000;

	fullcap = ykbec_read16(sc, REG_FULLCHG_CAP_HIGH);
	sc->sc_sensor[YKBEC_FCAP].value = fullcap * 1000;

	current = ykbec_read16(sc, REG_CURRENT_HIGH);
	/* sign extend short -> int, int -> int64 will be done next statement */
	current |= -(current & 0x8000);
	sc->sc_sensor[YKBEC_BCURRENT].value = -1000 * current;

	sc->sc_sensor[YKBEC_BVOLT].value = ykbec_read16(sc, REG_VOLTAGE_HIGH) *
	    1000;

	val = ykbec_read16(sc, REG_TEMPERATURE_HIGH);
	sc->sc_sensor[YKBEC_BTEMP].value = val * 1000000 + 273150000;

	cap_pct = ykbec_read16(sc, REG_RELATIVE_CAT_HIGH);
	sc->sc_sensor[YKBEC_CAP].value = cap_pct * 1000;

	bat_charge = ykbec_read(sc, REG_BAT_CHARGE);
	bat_status = ykbec_read(sc, REG_BAT_STATUS);
	charge_status = ykbec_read(sc, REG_CHARGE_STATUS);
	bat_state = ykbec_read(sc, REG_BAT_STATE);
	power_flag = ykbec_read(sc, REG_POWER_FLAG);
	lid_state = ykbec_read(sc, REG_LID_STATE);

	sc->sc_sensor[YKBEC_CHARGING].value = !!ISSET(bat_state,
	    BAT_STATE_CHARGING);
	sc->sc_sensor[YKBEC_AC].value = !!ISSET(power_flag,
	    POWER_FLAG_ADAPTER_IN);

	sc->sc_sensor[YKBEC_LID].value = !!ISSET(lid_state, LID_OPEN);

	sc->sc_sensor[YKBEC_CAP].status = ISSET(bat_status, BAT_STATUS_BAT_LOW) ?
		SENSOR_S_CRIT : SENSOR_S_OK;

#if NAPM > 0
	bcopy(&ykbec_apmdata, &old, sizeof(old));
	ykbec_apmdata.battery_life = cap_pct;
	ykbec_apmdata.ac_state = ISSET(power_flag, POWER_FLAG_ADAPTER_IN) ?
	    APM_AC_ON : APM_AC_OFF;
	if (!ISSET(bat_status, BAT_STATUS_BAT_EXISTS)) {
		ykbec_apmdata.battery_state = APM_BATTERY_ABSENT;
		ykbec_apmdata.minutes_left = 0;
		ykbec_apmdata.battery_life = 0;
	} else {
		if (ISSET(bat_state, BAT_STATE_CHARGING))
			ykbec_apmdata.battery_state = APM_BATT_CHARGING;
		else if (ISSET(bat_status, BAT_STATUS_BAT_LOW))
			ykbec_apmdata.battery_state = APM_BATT_CRITICAL;
		else if (cap_pct > 50)
			ykbec_apmdata.battery_state = APM_BATT_HIGH;
		else
			ykbec_apmdata.battery_state = APM_BATT_LOW;

		/* if charging, current is positive */
		if (ISSET(bat_state, BAT_STATE_CHARGING))
			current = 0;
		else
			current = -current;
		/* XXX Yeeloong draw is about 1A */
		if (current <= 0)
			current = 1000;
		/* XXX at 5?%, the Yeeloong shuts down */
		if (cap_pct <= 5)
			cap_pct = 0;
		else
			cap_pct -= 5;
		fullcap = cap_pct * 60 * fullcap / 100;
		ykbec_apmdata.minutes_left = fullcap / current;

	}
	if (old.ac_state != ykbec_apmdata.ac_state)
		apm_record_event(APM_POWER_CHANGE, "AC power",
			ykbec_apmdata.ac_state ? "restored" : "lost");
	if (old.battery_state != ykbec_apmdata.battery_state)
		apm_record_event(APM_POWER_CHANGE, "battery",
		    BATTERY_STRING(ykbec_apmdata.battery_state));
#endif
}

#if NAPM > 0
int
ykbec_apminfo(struct apm_power_info *info)
{
	bcopy(&ykbec_apmdata, info, sizeof(struct apm_power_info));
	return 0;
}

int
ykbec_suspend()
{
	struct ykbec_softc *sc = ykbec_sc;
	int ctrl;

	/*
	 * Set up wakeup sources: currently only the internal keyboard.
	 */
	loongson_set_isa_imr(1 << 1);

	/* USB */
	DPRINTF(("USB\n"));
	ykbec_write(sc, REG_USB0, USB_FLAG_OFF);
	ykbec_write(sc, REG_USB1, USB_FLAG_OFF);
	ykbec_write(sc, REG_USB2, USB_FLAG_OFF);

	/* EC */
	DPRINTF(("REG_PMUCFG\n"));
	ctrl = PMUCFG_SCI_WAKEUP | PMUCFG_WDT_WAKEUP | PMUCFG_GPWU_WAKEUP |
	    PMUCFG_LPC_WAKEUP | PMUCFG_STOP_MODE | PMUCFG_RESET_8051;
	ykbec_write(sc, REG_PMUCFG, ctrl);

	/* FAN */
	DPRINTF(("FAN\n"));
	ykbec_write(sc, REG_FAN_CONTROL, REG_FAN_OFF);

	/* CPU */
	DPRINTF(("CPU\n"));
	ykbec_chip_config = REGVAL(LOONGSON_CHIP_CONFIG0);
	enableintr();
	REGVAL(LOONGSON_CHIP_CONFIG0) = ykbec_chip_config & ~0x7;
	(void)REGVAL(LOONGSON_CHIP_CONFIG0);

	/*
	 * When a resume interrupt fires, we will enter the interrupt
	 * dispatcher, which will do nothing because we are at splhigh,
	 * and execution flow will return here and continue.
	 */
	(void)disableintr();

	return 0;
}

int
ykbec_resume()
{
	struct ykbec_softc *sc = ykbec_sc;

	/* CPU */
	DPRINTF(("CPU\n"));
	REGVAL(LOONGSON_CHIP_CONFIG0) = ykbec_chip_config;
	(void)REGVAL(LOONGSON_CHIP_CONFIG0);

	/* FAN */
	DPRINTF(("FAN\n"));
	ykbec_write(sc, REG_FAN_CONTROL, REG_FAN_ON);

	/* USB */
	DPRINTF(("USB\n"));
	ykbec_write(sc, REG_USB0, USB_FLAG_ON);
	ykbec_write(sc, REG_USB1, USB_FLAG_ON);
	ykbec_write(sc, REG_USB2, USB_FLAG_ON);

	ykbec_refresh(sc);

	return 0;
}
#endif

#if NPCKBD > 0 || NHIDKBD > 0
void
ykbec_bell(void *arg, u_int pitch, u_int period, u_int volume, int poll)
{
	struct ykbec_softc *sc = (struct ykbec_softc *)arg;
	int bctrl;
	int s;

	s = spltty();
	bctrl = ykbec_read(sc, REG_BEEP_CONTROL);
	if (timeout_del(&sc->sc_bell_tmo) || volume == 0) {
		/* inline ykbec_bell_stop(arg); */
		ykbec_write(sc, REG_BEEP_CONTROL, bctrl & ~BEEP_ENABLE);
	}

	if (volume != 0) {
		ykbec_write(sc, REG_BEEP_CONTROL, bctrl | BEEP_ENABLE);
		if (poll) {
			delay(period * 1000);
			ykbec_write(sc, REG_BEEP_CONTROL, bctrl & ~BEEP_ENABLE);
		} else {
			timeout_add_msec(&sc->sc_bell_tmo, period);
		}
	}
	splx(s);
}

void
ykbec_bell_stop(void *arg)
{
	struct ykbec_softc *sc = (struct ykbec_softc *)arg;
	int s;

	s = spltty();
	ykbec_write(sc, REG_BEEP_CONTROL,
	    ykbec_read(sc, REG_BEEP_CONTROL) & ~BEEP_ENABLE);
	splx(s);
}
#endif
@


1.22
log
@Harmonize battery state thresholds accross platforms.

Use the same values hardcoded in sys/dev/acpi/acpi.c where possible.

OK visa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.21 2016/11/15 13:53:35 fcambus Exp $	*/
d59 1
a59 1
	const char *desc;	
d69 1
a69 1
	{ "Battery current", 		SENSOR_AMPS },
d75 1
a75 1
	{ "Battery capacity", 		SENSOR_PERCENT },
d185 2
a186 2
		sc->sc_sensor[i].type = ykbec_table[i].type; 
		if (ykbec_table[i].desc) 
d333 1
a333 1
		
d433 1
a433 1
	if (old.ac_state != ykbec_apmdata.ac_state) 
d436 1
a436 1
	if (old.battery_state != ykbec_apmdata.battery_state) 
a441 1

d446 2
a447 2
	 bcopy(&ykbec_apmdata, info, sizeof(struct apm_power_info));
	 return 0;
d463 3
a465 3
	ykbec_write(sc, REG_USB0, USB_FLAG_OFF); 
	ykbec_write(sc, REG_USB1, USB_FLAG_OFF); 
	ykbec_write(sc, REG_USB2, USB_FLAG_OFF); 
d510 3
a512 3
	ykbec_write(sc, REG_USB0, USB_FLAG_ON); 
	ykbec_write(sc, REG_USB1, USB_FLAG_ON); 
	ykbec_write(sc, REG_USB2, USB_FLAG_ON); 
@


1.21
log
@Add support for lid state detection in ykbec(4).

Tested on a Lemote Yeeloong 8101B.

OK visa@@, looks good to deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.20 2016/01/08 15:54:13 jcs Exp $	*/
d411 1
a411 2
		/* XXX arbitrary */
		else if (cap_pct > 60)
@


1.20
log
@Move HID support files out of dev/usb into new dev/hid directory

These files aren't USB-specific and were used by the previous
Bluetooth implementation, and will be used by the upcoming
HID-over-i2C implementation

ok deraadt
previous version ok kettenis and mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.19 2013/12/24 01:11:04 dlg Exp $	*/
d79 4
a82 2
	{ "AC-Power",			SENSOR_INDICATOR }
#define YKBEC_NSENSORS	9
d315 4
d346 1
a346 1
	u_int cap_pct, fullcap;
d385 1
d391 2
@


1.19
log
@get rid of if (timeout_pending()) timeout_del(). this is racy. any
conditionals you did on timeout_pending can now be done on timeout_del
now that it returns what it did.

ok and a very good fix from kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.18 2012/10/03 21:44:51 miod Exp $	*/
d42 1
a42 1
#include <dev/usb/hidkbdvar.h>
@


1.18
log
@Do not use <mips64/archtype.h> for loongson model numbers, but rather put the
list in loongson's <machine/autoconf.h> directly. <mips64/archtype.h> is
intended to be only used on ARCBios-like platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.17 2011/07/21 20:36:12 miod Exp $	*/
d523 1
a523 2
	if (volume == 0 || timeout_pending(&sc->sc_bell_tmo)) {
		timeout_del(&sc->sc_bell_tmo);
@


1.17
log
@Support for the eBenton EBT-700 netbook, which is similar to the Lemote
Yeeloong, but with a 7" display with a 800x480 resolution, and no webcam.

There are still problems to get it booting from disk from PMON (colour me
unsurprised), which are being looked at. Loading the boot blocks from a FAT
USB stick, to then boot the kernel from the disk, is a reliable workaround
in the meantime.

Tested by Ban Keong Yee (bankeong dot yee on gmail) who is the ``lucky''
owner of such a machine, thanks for your time!
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.16 2010/10/14 21:23:04 pirofti Exp $	*/
a24 1
#include <mips64/archtype.h>
@


1.16
log
@Move glxpcib(4) to MI land unifying the two MD drivers.

Specific features of the companion chip will be handled in MD land.

Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.15 2010/09/09 19:06:15 miod Exp $	*/
d135 1
@


1.15
log
@Sync suspend logic with current practice, and try to handle failure
consistently; discussed with pirofti and deraadt.
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.14 2010/09/01 13:10:42 pirofti Exp $	*/
d31 2
a34 1
#include <loongson/dev/glxreg.h>
@


1.14
log
@Clean-up the spl dance around suspend/resume. Okay miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.13 2010/08/31 12:22:38 miod Exp $	*/
d448 4
a451 2
	/* enable isa irq 1 and 12 (PS/2 input devices) */
	loongson_set_isa_imr((1 << 1) | (1 << 12));
d472 1
d476 7
d505 2
@


1.13
log
@Correctly enable wakeup interrupts after splhigh().
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.12 2010/08/31 10:24:46 pirofti Exp $	*/
a95 1
static int ykbec_apmspl;
a447 3
	/* IRQ */
	DPRINTF(("IRQ\n"));
	ykbec_apmspl = splhigh();
a479 4

	/* IRQ */
	DPRINTF(("IRQ\n"));
	splx(ykbec_apmspl);
@


1.12
log
@WIP suspend/resume support for loongson lemote. Okay miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.11 2010/07/31 16:04:46 miod Exp $	*/
d453 1
a453 1
	loongson_set_isa_imr(0xffff & ~(1 << 1) & ~(1 << 12));
@


1.11
log
@Factorization of the bluetooth and usb hid input driver logic, to reduce code
duplication and divergence.
Thanks to mlarkin@@ for bluetooth devices tests.
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.10 2010/05/08 21:59:56 miod Exp $	*/
d31 4
d49 6
d94 6
d206 1
d293 22
d441 64
@


1.10
log
@Huge work-in-progress commit to support Loongson 2E-based evaluation boards
with a VIA 686 southbridge.

Features:
- 686 setup code (no thanks to PMON for not initializing the beast).
- work in progress ISA interrupt handling code.
- support for vga(4) compatible devices as console, in PC-compatible text mode.
- move legacy (ISA) support code out of bonito(4) to make things clearer.
- support more than 256MB on 2E-based systems.

Tested on a generic 2E-based evaluation board by someone who wishes to remain
anonymous; you know who you are, thank you very much for testing.
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.9 2010/03/02 17:49:38 otto Exp $	*/
d33 1
a33 1
#include "ukbd.h"
d35 1
a35 1
#if NPCKBD > 0 || NUKBD > 0
d38 1
a38 1
#include <dev/usb/ukbdvar.h>
d79 1
a79 1
#if NPCKBD > 0 || NUKBD > 0
d181 1
a181 1
#if NPCKBD > 0 || NUKBD > 0
d186 2
a187 2
#if NUKBD > 0
	ukbd_hookup_bell(ykbec_bell, sc);
d405 1
a405 1
#if NPCKBD > 0 || NUKBD > 0
@


1.9
log
@remove never changing values (design capacity, design voltage) from sensor
info; ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.8 2010/03/02 09:58:19 otto Exp $	*/
d25 1
d27 1
d118 3
@


1.8
log
@Use the battery controller bit that signals the battery almost empty
condition to determine crtical status for the sensor and apm. This makes
the critical status correspond to the flashing red battery led.
Furthermore, use ISSET macros and friends.
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.7 2010/02/28 17:32:30 miod Exp $	*/
d54 1
a54 3
#define YKBEC_DCAP	2
	{ "Battery design capacity",	SENSOR_AMPHOUR },
#define YKBEC_FCAP	3
d56 1
a56 3
#define YKBEC_DVOLT	4
	{ "Battery design voltage",	SENSOR_VOLTS_DC },
#define YKBEC_BCURRENT	5
d58 1
a58 1
#define YKBEC_BVOLT	6
d60 1
a60 1
#define YKBEC_BTEMP	7
d62 1
a62 1
#define YKBEC_CAP	8
d64 1
a64 1
#define YKBEC_CHARGING	9
d66 1
a66 1
#define YKBEC_AC	10
d68 1
a68 1
#define YKBEC_NSENSORS	11
d92 1
d135 1
a135 1
ykbec_attach( struct device *parent, struct device *self, void *aux)
d156 3
d271 20
a312 2
	sc->sc_sensor[YKBEC_DCAP].value = ykbec_read16(sc, REG_DESIGN_CAP_HIGH)
	    * 1000;
a314 2
	sc->sc_sensor[YKBEC_DVOLT].value = ykbec_read16(sc, REG_DESIGN_VOL_HIGH)
	    * 1000;
@


1.7
log
@Add a bell routine and let pckbd and ukbd use it; ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.6 2010/02/28 09:40:06 otto Exp $	*/
d286 1
a286 1
		sc->sc_sensor[YKBEC_FAN].flags &= ~SENSOR_FINVALID;
d288 1
a288 1
		sc->sc_sensor[YKBEC_FAN].flags |= SENSOR_FINVALID;
d320 7
a326 4
	sc->sc_sensor[YKBEC_CHARGING].value = (bat_state & BAT_STATE_CHARGING) ?
	    1 : 0;
	sc->sc_sensor[YKBEC_AC].value = (power_flag & POWER_FLAG_ADAPTER_IN) ?
	    1 : 0;
d331 1
a331 1
	ykbec_apmdata.ac_state = (power_flag & POWER_FLAG_ADAPTER_IN) ?
d333 1
a333 1
	if ((bat_status & BAT_STATUS_BAT_EXISTS) == 0) {
d338 1
a338 1
		if (bat_state & BAT_STATE_CHARGING)
d340 2
a344 2
		else if (cap_pct < 10)
			ykbec_apmdata.battery_state = APM_BATT_CRITICAL;
d349 1
a349 1
		if (bat_state & BAT_STATE_CHARGING)
@


1.6
log
@Bring battery life estimate when charging in line with most other apm(4)
devices. Original code was inspired by/copied/stolen from the macppc
apm(4), which has different semantics for battery life while charging.
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.5 2010/02/28 08:30:27 otto Exp $	*/
d23 1
d30 8
d81 3
a83 1

a87 1
void	ykbec_refresh(void *arg);
d93 3
a95 1
void	ykbec_write(struct ykbec_softc *, u_int, u_int);
d98 2
a101 1
int	ykbec_apminfo(struct apm_power_info *);
a113 1

a136 1

d159 2
d172 2
d176 9
a184 1
	printf("\n");
d268 3
a372 1

d379 17
d397 23
@


1.5
log
@Basic apm(4), providing battery/power status and events. apm(4) is the
generic part, ykbec(4) provides the device specific parts. Other
battery/power status drivers can easily hook to adb(4). With help
from miod@@; ok matthieu@@ miod@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.4 2010/02/24 18:29:39 otto Exp $	*/
d309 1
a309 2
		/* if charging, return the minutes until full */
		if (bat_state & BAT_STATE_CHARGING) {
d311 12
a322 14
			if (current > 0) {
				fullcap = (100 - cap_pct) * 60 * fullcap / 100;
				ykbec_apmdata.minutes_left = fullcap / current;
			} else
				ykbec_apmdata.minutes_left = 0;
		} else {
			/* arbitrary */
			if (cap_pct > 60)
				ykbec_apmdata.battery_state = APM_BATT_HIGH;
			else if (cap_pct < 10)
				ykbec_apmdata.battery_state = APM_BATT_CRITICAL;
			else
				ykbec_apmdata.battery_state = APM_BATT_LOW;

d324 10
a333 11
			/* Yeeloong draw is about 1A */
			if (current <= 0)
				current = 1000;
			/* at 5?%, the Yeeloong shuts down */
			if (cap_pct <= 5)
				cap_pct = 0;
			else
				cap_pct -= 5;
			fullcap = cap_pct * 60 * fullcap / 100;
			ykbec_apmdata.minutes_left = fullcap / current;
		}
@


1.4
log
@fix scaling of battery current
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.3 2010/02/24 17:38:39 deraadt Exp $	*/
d24 1
d28 2
d37 28
a64 1
#define KB3310_NUM_SENSORS	12
d70 1
a70 1
	struct ksensor		sc_sensor[KB3310_NUM_SENSORS];
d87 15
d131 1
a146 2
	sc->sc_sensor[0].type = SENSOR_FANRPM;
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[0]);
d148 7
a154 54
	sc->sc_sensor[1].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[1].desc, "Internal temperature",
	    sizeof(sc->sc_sensor[1].desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[1]);

	sc->sc_sensor[2].type = SENSOR_AMPHOUR;
	strlcpy(sc->sc_sensor[2].desc, "Battery design capacity",
	    sizeof(sc->sc_sensor[2].desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[2]);

	sc->sc_sensor[3].type = SENSOR_AMPHOUR;
	strlcpy(sc->sc_sensor[3].desc, "Battery full charge capacity",
	    sizeof(sc->sc_sensor[3].desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[3]);

	sc->sc_sensor[4].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[4].desc, "Battery design voltage",
	    sizeof(sc->sc_sensor[4].desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[4]);

	sc->sc_sensor[5].type = SENSOR_AMPS;
	strlcpy(sc->sc_sensor[5].desc, "Battery current",
	    sizeof(sc->sc_sensor[5].desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[5]);

	sc->sc_sensor[6].type = SENSOR_VOLTS_DC;
	strlcpy(sc->sc_sensor[6].desc, "Battery voltage",
	    sizeof(sc->sc_sensor[6].desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[6]);

	sc->sc_sensor[7].type = SENSOR_TEMP;
	strlcpy(sc->sc_sensor[7].desc, "Battery temperature",
	    sizeof(sc->sc_sensor[7].desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[7]);

	sc->sc_sensor[8].type = SENSOR_PERCENT;
	strlcpy(sc->sc_sensor[8].desc, "Battery capacity",
	    sizeof(sc->sc_sensor[8].desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[8]);

	sc->sc_sensor[9].type = SENSOR_INDICATOR;
	strlcpy(sc->sc_sensor[9].desc, "Battery charging",
	    sizeof(sc->sc_sensor[9].desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[9]);

	sc->sc_sensor[10].type = SENSOR_INDICATOR;
	strlcpy(sc->sc_sensor[10].desc, "AC-Power",
	    sizeof(sc->sc_sensor[10].desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[10]);

	sc->sc_sensor[11].type = SENSOR_INTEGER;
	strlcpy(sc->sc_sensor[11].desc, "Battery low-level status",
	    sizeof(sc->sc_sensor[11].desc));
	sensor_attach(&sc->sc_sensordev, &sc->sc_sensor[11]);
d158 3
d250 1
d252 3
d257 1
a257 1
	if (val != 0)
d259 4
a262 3
	else
		val = UINT_MAX;
	sc->sc_sensor[0].value = val;
d265 1
a265 1
	sc->sc_sensor[1].value = val * 1000000 + 273150000;
d267 6
a272 3
	sc->sc_sensor[2].value = ykbec_read16(sc, REG_DESIGN_CAP_HIGH) * 1000;
	sc->sc_sensor[3].value = ykbec_read16(sc, REG_FULLCHG_CAP_HIGH) * 1000;
	sc->sc_sensor[4].value = ykbec_read16(sc, REG_DESIGN_VOL_HIGH) * 1000;
d277 1
a277 1
	sc->sc_sensor[5].value = current * -1000;
d279 2
a280 1
	sc->sc_sensor[6].value = ykbec_read16(sc, REG_VOLTAGE_HIGH) * 1000;
d283 1
a283 1
	sc->sc_sensor[7].value = val * 1000000 + 273150000;
d285 2
a286 1
	sc->sc_sensor[8].value = ykbec_read16(sc, REG_RELATIVE_CAT_HIGH) * 1000;
d294 53
a346 4
	sc->sc_sensor[9].value = (bat_state & BAT_STATE_CHARGING) ? 1 : 0;
	sc->sc_sensor[10].value = (power_flag & POWER_FLAG_ADAPTER_IN) ? 1 : 0;
	sc->sc_sensor[11].value = (bat_state << 24) | (charge_status << 16) |
	    (bat_status << 8) | bat_charge;
d348 12
@


1.3
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.2 2010/02/23 21:59:38 otto Exp $	*/
d252 1
a252 1
	val = ykbec_read16(sc, REG_FAN_SPEED_HIGH);
d265 1
d267 4
a270 4
	if (current & 0x8000)
		sc->sc_sensor[5].value = (0xffff - current) * 1000;
	else
		sc->sc_sensor[5].value = current * 1000;
@


1.2
log
@switch to simple indicators instead of playing string games; prompted
by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kb3310.c,v 1.1 2010/02/23 21:04:16 otto Exp $	*/
d119 1
a119 1
	sc->sc_sensor[4].type = SENSOR_VOLTS_DC; 
d253 1
a253 1
	if (val != 0) 
@


1.1
log
@ykbec(4), a driver to read fan, temperature and battery status using
the kb3310b embedded controller chip on the yeeloong. With help & ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ykbec.c,v 1.3 2010/01/22 21:44:00 miod Exp $	*/
d34 1
a34 1
#define KB3310_NUM_SENSORS	10
d144 3
a146 1
	sc->sc_sensor[9].type = SENSOR_INTEGER;
d149 10
d220 1
d222 4
d227 3
a244 6
const char *REG_BAT_CHARGE_state[] = {
    "AC-power", "Battery discharging", "Battery charging"
};

#define STATUS(a, i)  ((i) >= nitems(a) ? "unknown" : (a)[i])

d249 1
a249 1
	u_int val;
d277 10
a286 35
	val = ykbec_read(sc, REG_BAT_CHARGE);
	strlcpy(sc->sc_sensor[9].desc, STATUS(REG_BAT_CHARGE_state, val),
	    sizeof(sc->sc_sensor[9].desc));

	val = (val << 8) | ykbec_read(sc, REG_BAT_STATUS);
	if (!(val & BAT_STATUS_BAT_EXISTS))
		strlcat(sc->sc_sensor[9].desc, ",not available",
		    sizeof(sc->sc_sensor[9].desc));
	if (val & BAT_STATUS_BAT_FULL)
		strlcat(sc->sc_sensor[9].desc, ",full",
		    sizeof(sc->sc_sensor[9].desc));
	if (val & BAT_STATUS_BAT_DESTROY)
		strlcat(sc->sc_sensor[9].desc, ",bad",
		    sizeof(sc->sc_sensor[9].desc));
	if (val & BAT_STATUS_BAT_LOW)
		strlcat(sc->sc_sensor[9].desc, ",low",
		    sizeof(sc->sc_sensor[9].desc));

	val = (val << 8) | ykbec_read(sc, REG_CHARGE_STATUS);
	if (val & CHARGE_STATUS_PRECHARGE)
		strlcat(sc->sc_sensor[9].desc, ",precharge",
		    sizeof(sc->sc_sensor[9].desc));
	if (val & CHARGE_STATUS_OVERHEAT)
		strlcat(sc->sc_sensor[9].desc, ",overheat",
		    sizeof(sc->sc_sensor[9].desc));
#if 0
	val = ykbec_read(sc, REG_BAT_STATE);
	if (val & BAT_STATE_CHARGING)
		strlcat(sc->sc_sensor[9].desc, ",charging",
		    sizeof(sc->sc_sensor[9].desc));
	if (val & BAT_STATE_DISCHARGING)
		strlcat(sc->sc_sensor[9].desc, ",discharging",
		    sizeof(sc->sc_sensor[9].desc));
#endif
	sc->sc_sensor[9].value = val;
@

