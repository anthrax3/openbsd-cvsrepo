head	1.4;
access;
symbols
	OPENBSD_6_0:1.3.0.22
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.18
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.20
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.16
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.14
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.20
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.18
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.14
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.16
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.12
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.10
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.8
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2016.08.10.14.27.17;	author deraadt;	state dead;
branches;
next	1.3;
commitid	nJ2GKPOeS3xtih2N;

1.3
date	2011.03.13.00.13.52;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.29.15.01.49;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.28.17.12.06;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.4
log
@armish handled some early-gen arm machines, which required tons of
workarounds.  Some of them will soon stand in the way of armv7.
Off to the attic you go.
@
text
@/*	$OpenBSD: wdvar.h,v 1.3 2011/03/13 00:13:52 deraadt Exp $	*/
/*	$NetBSD: wdvar.h,v 1.6 2005/12/11 12:17:06 christos Exp $	*/

/*-
 * Copyright (c) 2003 The NetBSD Foundation, Inc.
 * Copyright (c) 2001 Dynarc AB, Sweden. All rights reserved.
 *
 * This code is derived from software written by Anders Magnusson,
 * ragge@@ludd.luth.se
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _STAND_WDVAR_H
#define _STAND_WDVAR_H

#include <sys/disklabel.h>

#include <dev/ic/wdcreg.h>
#include <dev/ata/atareg.h>
#include <dev/pci/pciidereg.h>

/*
 * WD1003 / ATA Disk Controller register definitions.
 */

/* offsets of registers in the 'regular' register region */
#define wd_data                 0       /* data register (R/W - 16 bits) */
#define wd_error                1       /* error register (R) */
#define wd_precomp              1       /* write precompensation (W) */
#define wd_seccnt               2       /* sector count (R/W) */
#define wd_ireason              2       /* interrupt reason (R/W) (for atapi) */
#define wd_sector               3       /* first sector number (R/W) */
#define wd_cyl_lo               4       /* cylinder address, low byte (R/W) */
#define wd_cyl_hi               5       /* cylinder address, high byte (R/W) */
#define wd_sdh                  6       /* sector size/drive/head (R/W) */
#define wd_command              7       /* command register (W) */
#define wd_lba_lo               3       /* lba address, low byte (RW) */
#define wd_lba_mi               4       /* lba address, middle byte (RW) */
#define wd_lba_hi               5       /* lba address, high byte (RW) */

/* "shadow" registers; these may or may not overlap regular registers */
#define wd_status               8       /* immediate status (R) */
#define wd_features             9       /* features (W) */

/* offsets of registers in the auxiliary register region */
#define wd_aux_altsts           0       /* alternate fixed disk status (R) */
#define wd_aux_ctlr             0       /* fixed disk controller control (W) */
#define  WDCTL_4BIT              0x08   /* use four head bits (wd1003) */
#define  WDCTL_RST               0x04   /* reset the controller */
#define  WDCTL_IDS               0x02   /* disable controller interrupts */

#define WDC_TIMEOUT		2000000
#define PCIIDE_CHANNEL_NDEV	2
#define NUNITS			(PCIIDE_CHANNEL_NDEV * PCIIDE_NUM_CHANNELS)
#define WDC_NPORTS		8	/* XXX */
#define WDC_NSHADOWREG		2	/* XXX */

struct wdc_channel {
	volatile u_int8_t *c_cmdbase;
	volatile u_int8_t *c_ctlbase;
	volatile u_int8_t *c_cmdreg[WDC_NPORTS + WDC_NSHADOWREG];
	volatile u_int16_t *c_data;

	u_int8_t ndrives;
};

#define WDC_READ_REG(chp, reg)		*(chp)->c_cmdreg[(reg)]
#define WDC_WRITE_REG(chp, reg, val)	*(chp)->c_cmdreg[(reg)] = (val)
#define WDC_READ_CTLREG(chp, reg)	(chp)->c_ctlbase[(reg)]
#define WDC_WRITE_CTLREG(chp, reg, val)	(chp)->c_ctlbase[(reg)] = (val)
#define WDC_READ_DATA(chp)		*(chp)->c_data

struct wd_softc {
#define WDF_LBA		0x0001
#define WDF_LBA48	0x0002
	u_int16_t sc_flags;

	u_int sc_part;
	u_int sc_unit;

	u_int64_t sc_capacity;

	struct ataparams sc_params;
	struct disklabel sc_label;
	struct wdc_channel sc_channel;
	u_int sc_drive;
};

struct wdc_command {
	u_int8_t drive;		/* drive id */

	u_int8_t r_command;	/* Parameters to upload to registers */
	u_int8_t r_head;
	u_int16_t r_cyl;
	u_int8_t r_sector;
	u_int8_t r_count;
	u_int8_t r_precomp;

	u_int16_t bcount;
	void *data;

	u_int64_t r_blkno;
};

int	wdc_init		(struct wd_softc*, u_int);
int	wdccommand		(struct wd_softc*, struct wdc_command*);
int	wdccommandext		(struct wd_softc*, struct wdc_command*);
int	wdc_exec_read		(struct wd_softc*, u_int8_t, daddr32_t, void*);
int	wdc_exec_identify	(struct wd_softc*, void*);

int	pciide_init		(struct wdc_channel*, u_int);

#endif /* _STAND_WDVAR_H */
@


1.3
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: wdvar.h,v 1.2 2006/07/29 15:01:49 kettenis Exp $	*/
@


1.2
log
@ework armish bootloader into an interactive one, much like i386 has.
Make sure disk names match those used by the kernel.  This means that now
it boots from wd0 by default, whatever slot it is in.
@
text
@d1 1
a1 1
/*	$OpenBSD: wdvar.h,v 1.1 2006/07/28 17:12:06 kettenis Exp $	*/
d129 1
a129 1
int	wdc_exec_read		(struct wd_softc*, u_int8_t, daddr_t, void*);
@


1.1
log
@First stab at an armish bootloader.  It will load /bsd from the drive in the
upper slot of the Thecus n2100.  Glued together from bits from the NetBSD
cobalt and evbarm ports.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 2
d43 29
a71 1
#include <sys/disklabel.h>
d85 1
a85 1
	u_int8_t compatchan;
d107 1
d126 1
a126 1
int	wdc_init		(struct wd_softc*, u_int*);
d132 1
a132 1
int	pciide_init		(struct wdc_channel*, u_int*);
@

