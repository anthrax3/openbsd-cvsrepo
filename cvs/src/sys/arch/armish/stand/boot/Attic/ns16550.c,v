head	1.4;
access;
symbols
	OPENBSD_6_0:1.3.0.36
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.32
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.34
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.26
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.30
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.28
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.24
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.22
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.20
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.18
	OPENBSD_5_0:1.3.0.16
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2016.08.10.14.27.17;	author deraadt;	state dead;
branches;
next	1.3;
commitid	nJ2GKPOeS3xtih2N;

1.3
date	2008.01.23.16.37.57;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.29.15.01.49;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.28.17.12.06;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.4
log
@armish handled some early-gen arm machines, which required tons of
workarounds.  Some of them will soon stand in the way of armv7.
Off to the attic you go.
@
text
@/*	$OpenBSD: ns16550.c,v 1.3 2008/01/23 16:37:57 jsing Exp $	*/
/*	$NetBSD: ns16550.c,v 1.3 2005/12/24 20:07:03 perry Exp $	*/

/*
 * Copyright (c) 2002 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Jason R. Thorpe for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project by
 *	Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/* 
 * This file provides console I/O routines for boards that use
 * 16550-compatible UARTs.
 */

#include <sys/types.h>

#include <dev/cons.h>
#include <dev/ic/comreg.h>

#include "libsa.h"

#define	INB(x)		*((volatile uint8_t *) (CONADDR + (x)))
#define	OUTB(x, v)	*((volatile uint8_t *) (CONADDR + (x))) = (v)

#define	ISSET(t,f)	((t) & (f))

#ifndef NS16550_FREQ
#define	NS16550_FREQ	COM_FREQ
#endif

static int
comspeed(int speed)
{
#define	divrnd(n, q)	(((n)*2/(q)+1)/2)	/* divide and round off */

	int x, err;

	if (speed <= 0)  
		return (-1);
	x = divrnd((NS16550_FREQ / 16), speed);
	if (x <= 0)
		return (-1);
	err = divrnd((((quad_t)NS16550_FREQ) / 16) * 1000, speed * x) - 1000;
	if (err < 0)
		err = -err; 
	if (err > COM_TOLERANCE)
		return (-1);
	return (x);
#undef divrnd
}

void
com_probe(struct consdev *cn)
{
	cn->cn_pri = CN_LOWPRI;
	cn->cn_dev = makedev(12, 0);
}

void
com_init(struct consdev *cn)
{
	int rate;

	OUTB(com_cfcr, LCR_DLAB);
	rate = comspeed(CONSPEED);
	OUTB(com_dlbl, rate);
	OUTB(com_dlbh, rate >> 8);
	OUTB(com_cfcr, LCR_8BITS);
	OUTB(com_mcr, MCR_DTR | MCR_RTS); 
	OUTB(com_fifo,
	    FIFO_ENABLE | FIFO_RCV_RST | FIFO_XMT_RST | FIFO_TRIGGER_1);
	OUTB(com_ier, 0);
}

int
com_getc(dev_t dev)
{
	uint8_t stat;

	if (dev & 0x80)
		return ISSET(stat = INB(com_lsr), LSR_RXRDY);

	while (!ISSET(stat = INB(com_lsr), LSR_RXRDY))
		/* spin */ ;
	return (INB(com_data));
}

void
com_putc(dev_t dev, int c)
{
	uint8_t stat;
	int timo;

	/* Wait for any pending transmission to finish. */
	timo = 50000;   
	while (!ISSET(stat = INB(com_lsr), LSR_TXRDY) && --timo)
		/* spin */ ;

	OUTB(com_data, c);

	/* Wait for this transmission to complete. */
	timo = 1500000;
	while (!ISSET(stat = INB(com_lsr), LSR_TXRDY) && --timo)
		/* spin */ ;

	/* Clear any interrupts generated by this transmission. */
	(void) INB(com_iir);
}
@


1.3
log
@Cleanup cn_pri. Change constants to more meaningful names, rather than
the hp300 related ones currently in use. CN_NORMAL becomes CN_LOWPRI,
CN_INTERNAL becomes CN_MIDPRI and CN_REMOTE becomes CN_HIGHPRI.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ns16550.c,v 1.2 2006/07/29 15:01:49 kettenis Exp $	*/
@


1.2
log
@ework armish bootloader into an interactive one, much like i386 has.
Make sure disk names match those used by the kernel.  This means that now
it boots from wd0 by default, whatever slot it is in.
@
text
@d1 1
a1 1
/*	$OpenBSD: ns16550.c,v 1.1 2006/07/28 17:12:06 kettenis Exp $	*/
d84 1
a84 1
	cn->cn_pri = CN_NORMAL;
@


1.1
log
@First stab at an armish bootloader.  It will load /bsd from the drive in the
upper slot of the Thecus n2100.  Glued together from bits from the NetBSD
cobalt and evbarm ports.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 2
a41 2
 * This file provides the cons_init() function and console I/O routines
 * for boards that use 16550-compatible UARTs.
d45 2
d48 2
a49 1
#include <lib/libsa/stand.h>
d82 8
a89 1
cons_init(void)
d105 1
a105 1
getchar(void)
d109 3
d117 2
a118 2
static void
iputchar(int c)
a136 9
}

void
putchar(int c)
{

	if (c == '\n')
		iputchar('\r');
	iputchar(c);
@

