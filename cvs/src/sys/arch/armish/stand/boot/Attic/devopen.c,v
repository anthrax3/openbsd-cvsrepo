head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.12
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.8
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.10
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.22
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.20
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.18
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	OPENBSD_5_0:1.3.0.14
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.12
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.10
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.2.0.8
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2016.08.10.14.27.17;	author deraadt;	state dead;
branches;
next	1.4;
commitid	nJ2GKPOeS3xtih2N;

1.4
date	2013.09.28.10.05.36;	author mlarkin;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.26.05.42.10;	author ray;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.29.15.01.49;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.28.17.12.06;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.5
log
@armish handled some early-gen arm machines, which required tons of
workarounds.  Some of them will soon stand in the way of armv7.
Off to the attic you go.
@
text
@/*	$OpenBSD: devopen.c,v 1.4 2013/09/28 10:05:36 mlarkin Exp $	*/
/*	$NetBSD: devopen.c,v 1.1 2003/06/25 17:24:22 cdi Exp $	*/

/*-
 * Copyright (c) 2003 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Rolf Grossmann.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "libsa.h"

#define MAXDEVNAME      16

/*
 * Parse a device spec.
 *
 * [A-Za-z]*[0-9]*[A-Za-z]:file
 *    dev   uint    part
 */
int
devparse(const char *fname, int *dev, int *unit, int *part, const char **file)
{
	const char *s;

	*unit = 0;	/* default to wd0a */
	*part = 0;
	*dev  = 0;

	s = strchr(fname, ':');
	if (s != NULL) {
		int devlen;
		int i, u, p = 0;
		struct devsw *dp;
		char devname[MAXDEVNAME];

		devlen = s - fname;
		if (devlen > MAXDEVNAME)
			return (EINVAL);

		/* extract device name */
		for (i = 0; isalpha(fname[i]) && (i < devlen); i++)
			devname[i] = fname[i];
		devname[i] = 0;

		if (!isdigit(fname[i]))
			return (EUNIT);

		/* device number */
		for (u = 0; isdigit(fname[i]) && (i < devlen); i++)
			u = u * 10 + (fname[i] - '0');

		if (!isalpha(fname[i]))
			return (EPART);

		/* partition number */
		if (i < devlen)
			p = fname[i++] - 'a';

		if (i != devlen)
			return (ENXIO);

		/* check device name */
		for (dp = devsw, i = 0; i < ndevs; dp++, i++) {
			if (dp->dv_name && !strcmp(devname, dp->dv_name))
				break;
		}

		if (i >= ndevs)
			return (ENXIO);

		*unit = u;
		*part = p;
		*dev  = i;
		fname = ++s;
	}

	*file = fname;

	return (0);
}

int
devopen(struct open_file *f, const char *fname, char **file)
{
	struct devsw *dp;
	int dev, unit, part, error;

	error = devparse(fname, &dev, &unit, &part, (const char **)file);
	if (error)
		return (error);

	dp = &devsw[dev];
	if ((void *)dp->dv_open == (void *)nodev)
		return (ENXIO);

	f->f_dev = dp;

	return (*dp->dv_open)(f, unit, part);
}
@


1.4
log
@

Use of uninitialized variable. Found by Maxime Villard

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.3 2008/06/26 05:42:10 ray Exp $	*/
@


1.3
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.2 2006/07/29 15:01:49 kettenis Exp $	*/
d55 1
a55 1
		int i, u, p;
@


1.2
log
@ework armish bootloader into an interactive one, much like i386 has.
Make sure disk names match those used by the kernel.  This means that now
it boots from wd0 by default, whatever slot it is in.
@
text
@d1 1
a1 1
/*	$OpenBSD: devopen.c,v 1.1 2006/07/28 17:12:06 kettenis Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.1
log
@First stab at an armish bootloader.  It will load /bsd from the drive in the
upper slot of the Thecus n2100.  Glued together from bits from the NetBSD
cobalt and evbarm ports.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
#include <lib/libsa/stand.h>
d42 1
a42 1
#include "boot.h"
d47 2
a48 2
 * Format:
 *  [device:][filename]
d51 1
a51 2
devparse(const char *fname, int *dev, u_int8_t *unit,
		u_int8_t *part, const char **file)
d53 1
a53 1
	const char *col;
a57 1
	*file = DEFKERNELNAME;
d59 2
a60 4
	if (fname == NULL)
		return (0);

	if ( (col = strchr(fname, ':')) != NULL) {
d62 1
a62 1
		u_int8_t i, u, p;
d66 1
a66 1
		devlen = col - fname;
a69 5
#define isnum(c)	(((c) >= '0') && ((c) <= '9'))
#if 0
#define isalpha(c)	(((c) >= 'a') && ((c) <= 'z'))
#endif

d75 1
a75 1
		if (!isnum(fname[i]))
d79 1
a79 1
		for (u = 0; isnum(fname[i]) && (i < devlen); i++)
d104 1
a104 1
		fname = ++col;
d107 1
a107 2
	if (*fname)
		*file = fname;
d115 12
a126 19
    struct devsw *dp;
    u_int8_t unit, part;
    int dev, error;

    DPRINTF(("devopen(%s)\n", fname));

    if ( (error = devparse(fname, &dev, &unit, &part,
				    (const char **)file)) != 0)
	    return error;

    dp = &devsw[dev];
    if ((void *)dp->dv_open == (void *)nodev)
	return ENXIO;

    f->f_dev = dp;
    
    if ( (error = (*dp->dv_open)(f, unit, part)) != 0)
	printf("%s%d%c: %d = %s\n", devsw[dev].dv_name,
	       unit, 'a' + part, error, strerror(error));
d128 1
a128 1
    return error;
@

