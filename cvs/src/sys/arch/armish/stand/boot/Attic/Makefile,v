head	1.14;
access;
symbols
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.7.0.18
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.16
	OPENBSD_5_0:1.7.0.14
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.12
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.10
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.6
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4;
locks; strict;
comment	@# @;


1.14
date	2016.08.10.14.27.17;	author deraadt;	state dead;
branches;
next	1.13;
commitid	nJ2GKPOeS3xtih2N;

1.13
date	2016.03.30.06.38.45;	author jmc;	state Exp;
branches;
next	1.12;
commitid	LN9ijdk9SEnzWAbM;

1.12
date	2014.07.13.21.18.44;	author jasper;	state Exp;
branches;
next	1.11;
commitid	Y3LcLObEiHDZvy27;

1.11
date	2014.07.13.09.26.08;	author jasper;	state Exp;
branches;
next	1.10;
commitid	Cnjup0HpCIRrcQ6o;

1.10
date	2014.07.12.21.54.58;	author jasper;	state Exp;
branches;
next	1.9;
commitid	3HeD4LaLGiS22I3y;

1.9
date	2012.09.11.17.11.35;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.21.14.46.18;	author pascal;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.09.15.01.56;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.28.21.36.11;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.25.18.25.30;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2006.07.29.15.01.49;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2006.07.29.00.48.52;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2006.07.28.17.24.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.28.17.12.06;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.14
log
@armish handled some early-gen arm machines, which required tons of
workarounds.  Some of them will soon stand in the way of armv7.
Off to the attic you go.
@
text
@#	$OpenBSD: Makefile,v 1.13 2016/03/30 06:38:45 jmc Exp $

.include "${.CURDIR}/../Makefile.inc"

MAN=	boot.8

.if ${MACHINE} == "armish"
PROG=		boot
S=		${.CURDIR}/../../../..

.PATH:		${S}/stand/boot
.PATH:		${S}/lib/libsa

CPPFLAGS+=	-D_STANDALONE
CPPFLAGS+= 	-nostdinc -I../.. -I. -I${.CURDIR} -I${S}
CPPFLAGS+=	-DCONADDR=0xfe800000UL -DCONSPEED=115200 -fno-pie

COPTS+=		-ffreestanding -fno-stack-protector

SRCS=		start.S
SRCS+=		boot.c cmd.c vars.c
SRCS+=		conf.c devopen.c exec.c machdep.c dev_armish.c time.c
SRCS+=		clock.c ns16550.c wd.c wdc.c pciide.c
SRCS+=		ctime.c strtol.c getchar.c putchar.c

.PATH:	${S}/lib/libkern/arch/arm ${S}/lib/libkern
SRCS+=	divsi3.S divdi3.c moddi3.c qdivrem.c strlcpy.c strlen.c ashrdi3.c

### find out what to use for libsa
SA_AS=          library
SAREL=
USE_LOADFILE=	yes
.include "${S}/lib/libsa/Makefile.inc"
LIBSA=          ${SALIB}

LDFLAGS=	-T ${.CURDIR}/ldscript

${PROG}: ${OBJS} ${LIBSA}
	${LD} ${LDFLAGS} -o boot ${OBJS} ${LIBSA} ${LIBSA}

.if !make(obj)
.BEGIN:
	@@([ -h machine ] || ln -s ${.CURDIR}/../../../${MACHINE}/include machine)
	@@([ -h arm ] || ln -s ${.CURDIR}/../../../arm/include arm)
.NOPATH: machine arm
CLEANFILES+=	machine arm
.endif

.else
NOPROG=
.endif

.include <bsd.prog.mk>
@


1.13
log
@for some time now mandoc has not required MLINKS to function
correctly - logically complete that now by removing MLINKS from base;

authors need only to ensure there is an entry in NAME for any function/
util being added. MLINKS will still work, and remain for perl to ease
upgrades;

ok nicm (curses) bcook (ssl)
ok schwarze, who provided a lot of feedback and assistance
ok tb natano jung
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2014/07/13 21:18:44 jasper Exp $
@


1.12
log
@fix even more trailing tabs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2014/07/13 09:26:08 jasper Exp $
a5 1
MLINKS=	boot.8 boot.conf.5
@


1.11
log
@move putchar() into libsa

"sure" miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2014/07/12 21:54:58 jasper Exp $
d21 1
a21 1
SRCS=		start.S 
@


1.10
log
@move getchar() into libsa where applicable

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2012/09/11 17:11:35 deraadt Exp $
d25 1
a25 1
SRCS+=		ctime.c strtol.c getchar.c
@


1.9
log
@Cope with PIE, if it is enabled
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2012/08/21 14:46:18 pascal Exp $
d25 1
a25 1
SRCS+=		ctime.c strtol.c
@


1.8
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2008/06/09 15:01:56 deraadt Exp $
d17 1
a17 1
CPPFLAGS+=	-DCONADDR=0xfe800000UL -DCONSPEED=115200
a37 1
NOPIE=
@


1.7
log
@Place manuals in the MD directories; from pierre.riteau@@gmail
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2008/05/28 21:36:11 miod Exp $
d38 1
@


1.6
log
@Add a boot.8 manual page (adapted from other platforms which use the MI
secondary boot loader).  This will in turn act as a reminder to write
boot_armish.8 (soon).
@
text
@d1 3
a3 1
#	$OpenBSD: Makefile,v 1.5 2007/11/25 18:25:30 deraadt Exp $
@


1.5
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2006/07/29 15:01:49 kettenis Exp $
d3 2
a4 1
NOMAN=
@


1.4
log
@ework armish bootloader into an interactive one, much like i386 has.
Make sure disk names match those used by the kernel.  This means that now
it boots from wd0 by default, whatever slot it is in.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2006/07/29 00:48:52 deraadt Exp $
d24 2
a25 4
### find out what to use for libkern
KERN_AS=        library
.include "${S}/lib/libkern/Makefile.inc"
LIBKERN=        ${KERNLIB}
d36 2
a37 2
${PROG}: ${OBJS} ${LIBKERN} ${LIBSA}
	${LD} ${LDFLAGS} -o boot ${OBJS} ${LIBSA} ${LIBKERN} ${LIBSA}
@


1.3
log
@only enter for armish
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2006/07/28 17:24:27 deraadt Exp $
d9 2
a10 3
CPPFLAGS+= 	-nostdinc -I../.. -I. -I${S} -D_STANDALONE
CPPFLAGS+=	-DCONSPEED=115200
CPPFLAGS+=	-DCONADDR=0xfe800000UL
d12 3
a14 1
COPTS+=		-ffreestanding -fno-stack-protector -malignment-traps
d16 7
a22 2
SRCS=		start.S boot.c conf.c clock.c ns16550.c wd.c wdc.c pciide.c
SRCS+=		devopen.c exec.c
@


1.2
log
@no man page for now
@
text
@d1 1
a1 1
#	$OpenBSD$
d4 2
a6 1

d41 4
@


1.1
log
@First stab at an armish bootloader.  It will load /bsd from the drive in the
upper slot of the Thecus n2100.  Glued together from bits from the NetBSD
cobalt and evbarm ports.
@
text
@d1 3
@

