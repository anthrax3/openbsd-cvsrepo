head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.0.42
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.38
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.40
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.32
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.36
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.34
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.30
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.28
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.26
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.24
	OPENBSD_5_0:1.1.0.22
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.20
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.18
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.14
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.16
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.12
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.10
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.8
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.6
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.4
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2016.08.10.14.27.17;	author deraadt;	state dead;
branches;
next	1.1;
commitid	nJ2GKPOeS3xtih2N;

1.1
date	2006.07.28.17.12.06;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.2
log
@armish handled some early-gen arm machines, which required tons of
workarounds.  Some of them will soon stand in the way of armv7.
Off to the attic you go.
@
text
@/*	$OpenBSD: ldscript,v 1.1 2006/07/28 17:12:06 kettenis Exp $	*/
/*	$NetBSD: ldscript,v 1.6 2005/12/11 12:17:10 christos Exp $	*/

OUTPUT_FORMAT("elf32-littlearm", "elf32-bigarm",
	      "elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(FLASH)
MEMORY
{
  /* We will locate the .text section in flash, and will run directly
     from there just long enough to relocate our .text and .data into
     a small chunk of SDRAM starting at (SDRAM + 1M).  */
  flash : o = 0xf0080000, l = 6M
  sdram : o = 0x00100000, l = 1M	/* kernel loads at 0xa0200000 */
}
SECTIONS
{
  FLASH = 0x00100000;

  /* Read-only sections, merged into text segment: */
  __text_store = FLASH;
  .text      :
  AT (FLASH)
  {
    *(.text)
    *(.text.*)
    *(.stub)
    *(.glue_7t) *(.glue_7)
    *(.rodata) *(.rodata.*)
  } > sdram =0
  PROVIDE (__etext = .);
  PROVIDE (_etext = .);
  PROVIDE (etext = .);
  __data_store = FLASH + SIZEOF(.text);
  .data    :
  AT (LOADADDR(.text) + SIZEOF(.text))
  {
    __data_start = . ;
    *(.data)
    *(.data.*)
  } > sdram
  .sdata     : 
  AT (LOADADDR(.data) + SIZEOF(.data))
  {
    *(.sdata) 
    *(.sdata.*)
    . = ALIGN(32 / 8);
  } > sdram
  _edata = .;
  PROVIDE (edata = .);
  __bss_start = .;
  __bss_start__ = .;
  .sbss      :
  {
    PROVIDE (__sbss_start = .);
    PROVIDE (___sbss_start = .);
    *(.dynsbss)
    *(.sbss)
    *(.sbss.*)
    *(.scommon)
    PROVIDE (__sbss_end = .);
    PROVIDE (___sbss_end = .);
  } > sdram
  .bss       :
  {
   *(.dynbss)
   *(.bss)
   *(.bss.*)
   *(COMMON)
   /* Align here to ensure that the .bss section occupies space up to
      _end.  Align after .bss to ensure correct alignment even if the
      .bss section disappears because there are no input sections.  */
   . = ALIGN(32 / 8);
  } > sdram
  . = ALIGN(32 / 8);
  _end = .;
  _bss_end__ = . ; __bss_end__ = . ; __end__ = . ;
  PROVIDE (end = .);
  .image   (FLASH + SIZEOF(.text) + SIZEOF(.data) + SIZEOF(.sdata)) :
  AT (LOADADDR(.sdata) + SIZEOF(.sdata))
  {
    *(.image)
  }
}
@


1.1
log
@First stab at an armish bootloader.  It will load /bsd from the drive in the
upper slot of the Thecus n2100.  Glued together from bits from the NetBSD
cobalt and evbarm ports.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

