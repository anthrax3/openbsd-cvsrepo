head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.34
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.30
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.32
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.24
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.28
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.26
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.22
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.20
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.18
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.16
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.6
date	2016.08.10.14.27.16;	author deraadt;	state dead;
branches;
next	1.5;
commitid	nJ2GKPOeS3xtih2N;

1.5
date	2008.06.26.05.42.09;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.16.01.31.35;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.01.18.46.05;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.29.17.30.26;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.29.17.13.19;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@armish handled some early-gen arm machines, which required tons of
workarounds.  Some of them will soon stand in the way of armv7.
Off to the attic you go.
@
text
@/*	$OpenBSD: com_obio.c,v 1.5 2008/06/26 05:42:09 ray Exp $	*/
/*	$NetBSD: com_obio.c,v 1.9 2005/12/11 12:17:09 christos Exp $	*/

/*-
 * Copyright (c) 2001 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Matt Thomas <matt@@3am-software.com>.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/termios.h>

#include <machine/bus.h>

#include <arm/xscale/i80321var.h>
#include <armish/dev/obiovar.h>

#include <dev/ic/comreg.h>
#include <dev/ic/comvar.h>

struct com_obio_softc {
	struct com_softc sc_com;

	void *sc_ih;
};

int	com_obio_match(struct device *, void *, void *);
void	com_obio_attach(struct device *, struct device *, void *);

struct cfattach com_obio_ca = {
	sizeof(struct com_obio_softc), com_obio_match, com_obio_attach
};

struct cfdriver com_obio_cd = {
	NULL, "com_obio", DV_DULL
};

int com_irq_override = -1;

int
com_obio_match(struct device *parent, void *cf, void *aux)
{
	struct obio_attach_args *oba = aux;

	/* if the irq does not match, do not attach */
	if (com_irq_override != -1)
		oba->oba_irq = com_irq_override;

	/* We take it on faith that the device is there. */
	return (1);
}


void
com_obio_attach(struct device *parent, struct device *self, void *aux)
{
	struct obio_attach_args *oba = aux;
	struct com_obio_softc *osc = (void *) self;
	struct com_softc *sc = &osc->sc_com;
	int error;

	sc->sc_iot = oba->oba_st;
	sc->sc_iobase = oba->oba_addr;
	sc->sc_frequency = COM_FREQ;
/* 	sc->sc_hwflags = COM_HW_NO_TXPRELOAD; */
	sc->sc_hwflags = 0;
	error = bus_space_map(sc->sc_iot, oba->oba_addr, 8, 0, &sc->sc_ioh);

	if (error) {
		printf(": failed to map registers: %d\n", error);
		return;
	}

	com_attach_subr(sc);
	osc->sc_ih = i80321_intr_establish(oba->oba_irq, IPL_TTY,
	    comintr, sc, sc->sc_dev.dv_xname);
	if (osc->sc_ih == NULL)
		printf("%s: unable to establish interrupt at CPLD irq %d\n",
		    sc->sc_dev.dv_xname, oba->oba_irq);
}
@


1.5
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com_obio.c,v 1.4 2006/06/16 01:31:35 drahn Exp $	*/
@


1.4
log
@If there is going to be a kludge to change the irq for com, do it early
enough so that the used irq is printed in dmesg.
@
text
@d1 1
a1 1
/*	$OpenBSD: com_obio.c,v 1.3 2006/06/01 18:46:05 drahn Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.3
log
@After changing J3 to J4 on the thecus board, serial interrupts work just
fine (on XINT1), so remove the poll console hacks and rewire the com
irq to the correct value for thecus.
@
text
@d1 1
a1 1
/*	$OpenBSD: com_obio.c,v 1.2 2006/05/29 17:30:26 drahn Exp $	*/
d70 2
d75 6
a84 1
int com_irq_override = -1;
a92 4

	/* XXX old value is already printed */
	if (com_irq_override != -1)
		oba->oba_irq = com_irq_override;
@


1.2
log
@Tag.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a72 1

d77 1
a77 26
int comintr0(void *a);
int comintr1(void *a);
int comintr2(void *a);
int comintr3(void *a);
int
comintr0(void *a)
{
	return comintr(a);
}
int
comintr1(void *a)
{
	return comintr(a);
}
int
comintr2(void *a)
{
	return comintr(a);
}
int
comintr3(void *a)
{
	return comintr(a);
}

uint32_t get_pending_irq(void);
a78 19
struct com_softc *console_comsc;
int poll_console(void);
int poll_console()
{
	int ret;
#if 0
	uint32_t pending0, pending1;
	pending0 = get_pending_irq();
#endif
	ret = comintr(console_comsc);
#if 0
	if (ret != 0) {
		pending1 = get_pending_irq();
		printf("serviced com irq, opending %x npending %x\n",
		    pending0, pending1);
	}
#endif
	return ret;
}
d87 4
a90 1
	console_comsc = sc;
a103 2
	oba->oba_irq = 0x1c;
#if 1
a105 14
#else
#define	ICU_INT_XINT0 27
#define	ICU_INT_XINT(x)	((x) + ICU_INT_XINT0)
#if 1
	osc->sc_ih = i80321_intr_establish(ICU_INT_XINT(0), IPL_TTY,
	    comintr0, sc, sc->sc_dev.dv_xname);
#endif
	osc->sc_ih = i80321_intr_establish(ICU_INT_XINT(1), IPL_TTY,
	    comintr1, sc, sc->sc_dev.dv_xname);
	osc->sc_ih = i80321_intr_establish(ICU_INT_XINT(2), IPL_TTY,
	    comintr2, sc, sc->sc_dev.dv_xname);
	osc->sc_ih = i80321_intr_establish(ICU_INT_XINT(3), IPL_TTY,
	    comintr3, sc, sc->sc_dev.dv_xname);
#endif
@


1.1
log
@Add a new port for ARM based products from a variety of vendors, typically
using Redboot as a loader and using pci, that have a variety of fairly minor
hardware differences between them.
@
text
@d1 1
@

