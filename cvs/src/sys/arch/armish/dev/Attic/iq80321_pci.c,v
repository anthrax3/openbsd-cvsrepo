head	1.12;
access;
symbols
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.6
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.20
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.12
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.8
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.6
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.4
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8;
locks; strict;
comment	@ * @;


1.12
date	2016.08.10.14.27.16;	author deraadt;	state dead;
branches;
next	1.11;
commitid	nJ2GKPOeS3xtih2N;

1.11
date	2014.05.08.21.17.01;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2009.08.22.02.54.50;	author mk;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.10.17.59.24;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.16.06.24.12;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.15.21.26.05;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.01.18.46.05;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.01.08.26.36;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.01.03.44.53;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.31.05.49.54;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.29.17.30.26;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.29.17.13.19;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.12
log
@armish handled some early-gen arm machines, which required tons of
workarounds.  Some of them will soon stand in the way of armv7.
Off to the attic you go.
@
text
@/*	$OpenBSD: iq80321_pci.c,v 1.11 2014/05/08 21:17:01 miod Exp $	*/
/*	$NetBSD: iq80321_pci.c,v 1.5 2005/12/11 12:17:09 christos Exp $	*/

/*
 * Copyright (c) 2001, 2002 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Jason R. Thorpe for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project by
 *	Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * IQ80321 PCI interrupt support.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/bus.h>

#include <armish/dev/iq80321reg.h>
#include <armish/dev/iq80321var.h>

#include <arm/xscale/i80321reg.h>
#include <arm/xscale/i80321var.h>

#include <dev/pci/pcidevs.h>
#include <dev/pci/ppbreg.h>

int	iq80321_pci_intr_map(struct pci_attach_args *, pci_intr_handle_t *);
const char *iq80321_pci_intr_string(void *, pci_intr_handle_t);
void	*iq80321_pci_intr_establish(void *, pci_intr_handle_t,
	    int, int (*func)(void *), void *, const char *);
void	iq80321_pci_intr_disestablish(void *, void *);

struct irq_map {
	uint8_t	dev;
	uint8_t	intrpin;
	uint8_t	irq;
};


struct pci_id_list {
	uint8_t bus;
	uint8_t dev;
	pci_vendor_id_t	vend;
	pci_product_id_t prod;
};

struct board_id {
	char *name;
	struct irq_map *irq_map;
	struct pci_id_list list[]; 
};

struct irq_map *iq80321_irq_map;

struct irq_map iq80321_thecus_irq_map[] = {
	{ 1, 1, ICU_INT_XINT(0) }, /* thecus re0 27 */
	{ 2, 1, ICU_INT_XINT(3) }, /* thecus re1 30 */
	{ 3, 1, ICU_INT_XINT(2) }, /* thecus sata 29 */
	{ 4, 1, ICU_INT_XINT(0) }, /* thecus uhci0 27 ??? */
	{ 4, 2, ICU_INT_XINT(0) }, /* thecus uhci1 27 */
	{ 4, 3, ICU_INT_XINT(2) }, /* thecus ehci0 29 */
	{ 5, 1, ICU_INT_XINT(3) }, /* thecus minipci slot */
	{ 0, 0, 255}
};

struct irq_map iq80321_hdlg_irq_map[] = {
	{ 1, 1, ICU_INT_XINT(0) }, /* em0 27 */
	{ 2, 1, ICU_INT_XINT(1) }, /* wdc0 28 */
	{ 3, 1, ICU_INT_XINT(2) }, /* ochi0 29 */
	{ 3, 2, ICU_INT_XINT(2) }, /* ochi0 29 */
	{ 3, 3, ICU_INT_XINT(2) }, /* echi0 29 */
	{ 0, 0, 255}
};
struct irq_map certance_irq_map[] = {
	{ 0, 1, ICU_INT_XINT(0) }, /* em0 27 */
	{ 0, 2, ICU_INT_XINT(0) }, /* em0 27 */
	{ 1, 1, ICU_INT_XINT(1) }, /* sata 28 */
#if 0
	{ 2, 1, ICU_INT_XINT(0) }, /* scsi 29 */
#endif
	{ 2, 2, ICU_INT_XINT(3) }, /* scsi 30 */
	{ 0, 0, 255}
};
struct board_id thecus = {
	"Thecus Nx100",
	iq80321_thecus_irq_map,
	{
	{ 0, 	1,	PCI_VENDOR_REALTEK,	PCI_PRODUCT_REALTEK_RT8169 },
	/* fill in the rest of the devices */
	{ 0, 	0,	0,	0 }
	}
};
struct board_id iodata = {
	"I/O Data HDL-G",
	iq80321_hdlg_irq_map,
	{
	{ 0, 	1,	PCI_VENDOR_INTEL,	PCI_PRODUCT_INTEL_82541GI },
	/* fill in the rest of the devices */
	{ 0, 	0,	0,	0 }
	}
};
struct board_id certance = {
	"Certance CP3100",
	certance_irq_map,
	{
	{ 0, 	0,	PCI_VENDOR_INTEL, PCI_PRODUCT_INTEL_82546EB_COPPER },
	{ 0, 	1,	PCI_VENDOR_INTEL,	PCI_PRODUCT_INTEL_31244 },
	{ 0, 	2,	PCI_VENDOR_SYMBIOS,	PCI_PRODUCT_SYMBIOS_1010_2 },
	/* fill in the rest of the devices */
	{ 0, 	0,	0,	0 }
	}
};

struct board_id *systems[] = {
	&thecus,
	&iodata,
	&certance,
	NULL
};

void
iq80321_pci_init(pci_chipset_tag_t pc, void *cookie)
{
	pc->pc_intr_v = cookie;		/* the i80321 softc */
	pc->pc_intr_map = iq80321_pci_intr_map;
	pc->pc_intr_string = iq80321_pci_intr_string;
	pc->pc_intr_establish = iq80321_pci_intr_establish;
	pc->pc_intr_disestablish = iq80321_pci_intr_disestablish;

}
void
iq80321_pci_init2(pci_chipset_tag_t pc, void *cookie)
{
	pcitag_t tag;
	int i, j;
	struct board_id *sys;
	u_int32_t reg;


	for (i = 0; systems[i] != NULL; i++) {
		sys = systems[i];
		for (j = 0; sys->list[j].vend != 0; j++) {
			tag = pci_make_tag(pc, sys->list[j].bus,
			    sys->list[j].dev, 0);
			reg = pci_conf_read(pc, tag, 0 /* ID */);
#ifdef PROBE_NEW_BOARD
			printf("read %x expected %x\n", reg,
			    (sys->list[j].vend | sys->list[j].prod << 16));
#endif
			if ((sys->list[j].vend | sys->list[j].prod << 16)  !=
			     reg){ 
				sys = NULL;
				break;
			}
		}
		if (sys != NULL)
			break;
	}
	if (sys == NULL) {
		printf("board id failed\n");
#ifdef PROBE_NEW_BOARD
		for (i = 0; i < 16; i++) {
			tag = pci_make_tag(pc, 0, i, 0);
			printf("bus 0, dev %d: %x\n", i,
			    pci_conf_read(pc, tag, 0 /* ID */));
		}
#endif
	} else
		printf(": %s", sys->name);
	iq80321_irq_map = sys->irq_map;

	/* XXX */
	if (sys == &thecus) {
		/*
		 * thecus com irq appears to not be attached, override
		 * it's irq here, it is tied to the tick timer, irq9
		 * - yes this is a hack.
		 */
		 extern int com_irq_override;
		 com_irq_override = 28;
	}
}

int
iq80321_pci_intr_map(struct pci_attach_args *pa, pci_intr_handle_t *ihp)
{
	struct i80321_softc *sc = pa->pa_pc->pc_intr_v;
	pci_chipset_tag_t pc = pa->pa_pc;
	pcitag_t tag = pa->pa_intrtag;
	int i;

	int b, d, f;
	uint32_t busno;
	uint32_t intr;

	busno = bus_space_read_4(sc->sc_st, sc->sc_atu_sh, ATU_PCIXSR);
	busno = PCIXSR_BUSNO(busno);
	if (busno == 0xff)
		busno = 0;

	pci_decompose_tag(pc, tag, &b, &d, &f);

	/* No mappings for devices not on our bus. */
	if (b != busno)
		goto no_mapping;

	for (i = 0; iq80321_irq_map[i].irq != 255; i++) {
		if (d == iq80321_irq_map[i].dev &&
		    pa->pa_intrpin == iq80321_irq_map[i].intrpin) {
			*ihp = iq80321_irq_map[i].irq;
			intr = pci_conf_read(pa->pa_pc, pa->pa_intrtag,
			    PCI_INTERRUPT_REG);
			intr = (intr & ~0xff) | iq80321_irq_map[i].irq;
			pci_conf_write(pa->pa_pc, pa->pa_intrtag,
			    PCI_INTERRUPT_REG, intr);
			return (0);
		}
	}

 no_mapping:
	intr = pci_conf_read(pa->pa_pc, pa->pa_intrtag,
	    PCI_INTERRUPT_REG);

	printf("iq80321_pci_intr_map: no mapping for %d/%d/%d (%d, %d, %d)\n",
	    pa->pa_bus, pa->pa_device, pa->pa_function, d, pa->pa_intrpin, intr);
	return (1);
}

const char *
iq80321_pci_intr_string(void *v, pci_intr_handle_t ih)
{
	static char irqname[32];

	snprintf(irqname, sizeof irqname, "irq %ld", ih);
	return (irqname);
}

void *
iq80321_pci_intr_establish(void *v, pci_intr_handle_t ih, int ipl,
    int (*func)(void *), void *arg, const char *name)
{

	return (i80321_intr_establish(ih, ipl, func, arg, name));
}

void
iq80321_pci_intr_disestablish(void *v, void *cookie)
{

	i80321_intr_disestablish(cookie);
}
@


1.11
log
@Format string fixes and removal of -Wno-format for arm kernels.
@
text
@d1 1
a1 1
/*	$OpenBSD: iq80321_pci.c,v 1.10 2009/08/22 02:54:50 mk Exp $	*/
@


1.10
log
@Constify the what/name parameter of pci_intr_establish().

Tested by myself, sthen, oga, kettenis, and jasper.
Input from sthen and jasper.

ok kettenis

(Manpage follows shortly.)
@
text
@d1 1
a1 1
/*	$OpenBSD: iq80321_pci.c,v 1.9 2007/05/10 17:59:24 deraadt Exp $	*/
d265 1
a265 1
	snprintf(irqname, sizeof irqname, "irq %d", ih);
@


1.9
log
@evcnt & friends were replaced by a proper interrupt counting mechanism 3 years ago; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: iq80321_pci.c,v 1.8 2006/06/16 06:24:12 drahn Exp $	*/
d61 1
a61 1
	    int, int (*func)(void *), void *, char *);
d271 1
a271 1
    int (*func)(void *), void *arg, char *name)
@


1.8
log
@On the road to certance support.
@
text
@d1 1
a1 1
/*	$OpenBSD: iq80321_pci.c,v 1.7 2006/06/15 21:26:05 drahn Exp $	*/
a59 1
const struct evcnt *iq80321_pci_intr_evcnt(void *, pci_intr_handle_t);
a266 8
}

const struct evcnt *
iq80321_pci_intr_evcnt(void *v, pci_intr_handle_t ih)
{

	/* XXX For now. */
	return (NULL);
@


1.7
log
@sane irq numbers for pci interrupts, remove uncertanty on armish irq table.
@
text
@d1 1
a1 1
/*	$OpenBSD: iq80321_pci.c,v 1.6 2006/06/01 18:46:05 drahn Exp $	*/
d106 10
d134 11
d149 1
d169 1
a170 1
	tag = pci_make_tag(pc, 0, 1, 0);
d175 7
d183 1
a183 1
			     pci_conf_read(pc, tag, 0 /* ID */)) {
d191 1
a191 1
	if (sys == NULL)
d193 8
a200 1
	else
@


1.6
log
@After changing J3 to J4 on the thecus board, serial interrupts work just
fine (on XINT1), so remove the poll console hacks and rewire the com
irq to the correct value for thecus.
@
text
@d1 1
a1 1
/*	$OpenBSD: iq80321_pci.c,v 1.5 2006/06/01 08:26:36 drahn Exp $	*/
d99 2
a100 2
	{ 1, 1, ICU_INT_XINT(0) }, /* em0 27 ??? */
	{ 2, 1, ICU_INT_XINT(1) }, /* wdc0 28 ??? */
d228 1
d230 2
a231 1
	return (i80321_irqnames[ih]);
@


1.5
log
@Correct IRQ mappings for thecus devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: iq80321_pci.c,v 1.4 2006/06/01 03:44:53 drahn Exp $	*/
d88 1
a88 1
	{ 1, 1, ICU_INT_XINT(0) }, /* thecus re0 27 ??? */
a94 1

a103 1

d168 10
@


1.4
log
@Now that this maps correctly, allow the interrupt to map properly.
@
text
@d1 1
a1 1
/*	$OpenBSD: iq80321_pci.c,v 1.3 2006/05/31 05:49:54 drahn Exp $	*/
d88 2
a89 2
	{ 1, 1, ICU_INT_XINT(2) }, /* thecus re0 29 ??? */
	{ 2, 1, ICU_INT_XINT(2) }, /* thecus re1 29 ??? */
d91 2
a92 2
	{ 4, 1, ICU_INT_XINT(2) }, /* thecus uhci0 29 ??? */
	{ 4, 2, ICU_INT_XINT(2) }, /* thecus uhci1 29 ??? */
d94 1
a94 1
	{ 5, 1, ICU_INT_XINT(2) }, /* thecus minipci slot */
@


1.3
log
@Preserve ATU translations instead of forcing the values to something.
Detect device type using some simple checks and use table driven
interrupt maps for known devices.
IO space appears to not want to be at 0, but at some bus offset (0x90000000)
so skew mappings into this io bus base.
Thecus N2100 and I/O Data Landisk (HDL-G) are now partially working.
@
text
@d1 1
a1 1
/*	$OpenBSD: iq80321_pci.c,v 1.2 2006/05/29 17:30:26 drahn Exp $	*/
a90 1
#if 0
a91 1
#endif
@


1.2
log
@Tag.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 70
a137 1

d143 29
d180 1
a185 12
	/*
	 * The IQ80321's interrupts are routed like so:
	 *
	 *	XINT0	i82544 Gig-E
	 *
	 *	XINT1	UART
	 *
	 *	XINT2	INTA# from S-PCI-X slot
	 *
	 *	XINT3	INTB# from S-PCI-X slot
	 */

d197 9
a205 7
	switch (d) {
#if 1
	case 1:			/* theucs re(4) 0 */
		if (pa->pa_intrpin == 1) {
			*ihp = ICU_INT_XINT(2); /* 29 */
			pci_conf_write(pc, tag, PCI_INTERRUPT_REG, *ihp);

d208 1
a208 56
		goto no_mapping;
	case 2:			/* theucs re(4) 1 */
		if (pa->pa_intrpin == 1) {
			*ihp = ICU_INT_XINT(2); /* 30 */
			pci_conf_write(pc, tag, PCI_INTERRUPT_REG, *ihp);
			return (0);
		}
		goto no_mapping;
#endif
	case 3:			/* thecus sata */
		if (pa->pa_intrpin == 1) {
			*ihp = ICU_INT_XINT(2);
			pci_conf_write(pc, tag, PCI_INTERRUPT_REG, *ihp);
			return (0);
		}
		goto no_mapping;
	case 4:			/* thecus */
#if 0
		if (pa->pa_intrpin == 1) {	/* thecus uhci1 */
			*ihp = ICU_INT_XINT(2);
			pci_conf_write(pc, tag, PCI_INTERRUPT_REG, *ihp);
			return (0);
		}
#endif
#if 0
		if (pa->pa_intrpin == 2) {	/* thecus uhci1 */
			*ihp = ICU_INT_XINT(2);
			pci_conf_write(pc, tag, PCI_INTERRUPT_REG, *ihp);
			return (0);
		}
#endif
		if (pa->pa_intrpin == 3) {	/* thecus ehci1 */
			*ihp = ICU_INT_XINT(2);
			pci_conf_write(pc, tag, PCI_INTERRUPT_REG, *ihp);
			return (0);
		}
		goto no_mapping;
	case 5:			/* thecus minipci slot */
		if (pa->pa_intrpin == 1) {
			*ihp = ICU_INT_XINT(3);
			pci_conf_write(pc, tag, PCI_INTERRUPT_REG, *ihp);
			return (0);
		}
		goto no_mapping;
	case 6:			/* S-PCI-X slot */
		if (pa->pa_intrpin == 1) {
			*ihp = ICU_INT_XINT(2);
			pci_conf_write(pc, tag, PCI_INTERRUPT_REG, *ihp);
			return (0);
		}
		if (pa->pa_intrpin == 2) {
			*ihp = ICU_INT_XINT(3);
			pci_conf_write(pc, tag, PCI_INTERRUPT_REG, *ihp);
			return (0);
		}
		goto no_mapping;
a209 1
	default:
d211 2
a212 7
		intr = pci_conf_read(pa->pa_pc, pa->pa_intrtag,
		    PCI_INTERRUPT_REG);

		printf("iq80321_pci_intr_map: no mapping for %d/%d/%d (%d, %d, %d)\n",
		    pa->pa_bus, pa->pa_device, pa->pa_function, d, pa->pa_intrpin, intr);
		return (1);
	}
d214 3
a216 1
	return (0);
@


1.1
log
@Add a new port for ARM based products from a variety of vendors, typically
using Redboot as a loader and using pci, that have a variety of fairly minor
hardware differences between them.
@
text
@d1 1
@

