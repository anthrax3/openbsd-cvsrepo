head	1.11;
access;
symbols
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.8.0.10
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.14
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.12
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.8
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.6
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.4
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.14
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.10
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.12
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.8
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.6
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.11
date	2016.08.10.14.27.17;	author deraadt;	state dead;
branches;
next	1.10;
commitid	nJ2GKPOeS3xtih2N;

1.10
date	2015.06.24.21.35.00;	author miod;	state Exp;
branches;
next	1.9;
commitid	W4YvjXi8Y69IvwP4;

1.9
date	2015.05.10.15.56.28;	author jsg;	state Exp;
branches;
next	1.8;
commitid	MKYLBBkRhYmhiqiC;

1.8
date	2011.09.21.10.09.52;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2011.05.30.22.25.20;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.15.05.30.19;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.09.05.57.32;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.04.17.21.22;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.30.17.38.21;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.29.17.13.19;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.11
log
@armish handled some early-gen arm machines, which required tons of
workarounds.  Some of them will soon stand in the way of armv7.
Off to the attic you go.
@
text
@/* 	$OpenBSD: vmparam.h,v 1.10 2015/06/24 21:35:00 miod Exp $	*/
/*	$NetBSD: vmparam.h,v 1.23 2003/05/22 05:47:07 thorpej Exp $	*/

/*
 * Copyright (c) 1988 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef	_MACHINE_VMPARAM_H_
#define	_MACHINE_VMPARAM_H_

#define	ARM_KERNEL_BASE		0xc0000000U

/* Allow armish to have bigger DSIZ than generic arm, allow user to override */
#ifndef	MAXDSIZ
#define	MAXDSIZ		(1024*1024*1024)		/* max data size */
#endif
#ifndef BRKSIZ
#define	BRKSIZ		MAXDSIZ				/* heap gap size */
#endif

#include <arm/vmparam.h>

#ifdef _KERNEL
/*
 * Address space constants
 */

/*
 * The line between user space and kernel space
 * Mappings >= KERNEL_BASE are constant across all processes
 */
#define	KERNEL_BASE		ARM_KERNEL_BASE

#define VM_KERNEL_SPACE_SIZE	0x20000000

/*
 * Override the default pager_map size, there's not enough KVA.
 */
#define PAGER_MAP_SIZE		(4 * 1024 * 1024)

/*
 * Size of User Raw I/O map
 */

#define USRIOSIZE       300

/* virtual sizes (bytes) for various kernel submaps */

#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)

/*
 * max number of non-contig chunks of physical RAM you can have
 */

#define	VM_PHYSSEG_MAX		1
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_RANDOM

/*
 * this indicates that we can't add RAM to the VM system after the
 * vm system is init'd.
 */

#define	VM_PHYSSEG_NOADD

#endif /* _KERNEL */

#endif	/* _MACHINE_VMPARAM_H_ */
@


1.10
log
@Make ARM_KERNEL_BASE explicitely unsigned
@
text
@d1 1
a1 1
/* 	$OpenBSD: vmparam.h,v 1.9 2015/05/10 15:56:28 jsg Exp $	*/
@


1.9
log
@VM_MAX_KERNEL_ADDRESS is the end of the kva range not the end of
addressable virtual memory space but arm ports were using a value of
0xffffffff for this.

Instead of using a shared VM_MAX_KERNEL_ADDRESS define add md
VM_KERNEL_SPACE_SIZE defines based on the KERNEL_VM_SIZE values
from the respective machdep.c files.

djm's novena was hitting "panic: bufinit: can't reserve VM for buffers"
without a similiar change.

ok miod@@
@
text
@d1 1
a1 1
/* 	$OpenBSD: vmparam.h,v 1.8 2011/09/21 10:09:52 miod Exp $	*/
d36 1
a36 1
#define	ARM_KERNEL_BASE		0xc0000000
@


1.8
log
@Remove stale comments about vm freelists
@
text
@d1 1
a1 1
/* 	$OpenBSD: vmparam.h,v 1.7 2011/05/30 22:25:20 oga Exp $	*/
d58 2
@


1.7
log
@Remove the freelist member from vm_physseg

The new world order of pmemrange makes this data completely redundant
(being dealt with by the pmemrange constraints instead). Remove all code
that messes with the freelist.

While touching every caller of uvm_page_physload() anyway, add the flags
argument to all callers (all but one is 0 and that one already used
PHYSLOAD_DEVICE) and remove the macro magic to allow callers to continue
without it.

Should shrink the code a bit, as well.

matthew@@ pointed out some mistakes i'd made.
``freelist death, I like. Ok.' ariane@@
`I agree with the general direction, go ahead and i'll fix any fallout
shortly'' miod@@ (68k 88k and vax i could not check would build)
@
text
@d1 1
a1 1
/* 	$OpenBSD: vmparam.h,v 1.6 2011/03/23 16:54:34 pirofti Exp $	*/
a87 6
/*
 * we support 2 free lists:
 *
 *	- DEFAULT for all systems
 *	- ISADMA for the ISA DMA range on Sharks only
 */
@


1.6
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/* 	$OpenBSD: vmparam.h,v 1.5 2010/12/15 05:30:19 tedu Exp $	*/
a94 4

#define	VM_NFREELIST		2
#define	VM_FREELIST_DEFAULT	0

@


1.5
log
@oops, i forgot to check in the BRKSIZ define in uvm, but deraadt thinks
its better as a per arch MD define anyway.  all default to MAXDSIZ as before.
@
text
@d1 1
a1 1
/* 	$OpenBSD: vmparam.h,v 1.4 2007/06/09 05:57:32 drahn Exp $	*/
d33 2
a34 2
#ifndef	_ARMISH_VMPARAM_H_
#define	_ARMISH_VMPARAM_H_
d100 1
a100 1
#endif	/* _ARMISH_VMPARAM_H_ */
@


1.4
log
@Increase MAXDSIZ on armish to 1GB, requested long ago, ok robert@@
@
text
@d1 1
a1 1
/* 	$OpenBSD: vmparam.h,v 1.3 2006/06/04 17:21:22 miod Exp $	*/
d41 3
@


1.3
log
@Shrink VM_PHYSSEG_MAX to 1 on platforms where physical memory is contiguous
and there is only one call to uvm_page_physload().
@
text
@d1 1
a1 1
/* 	$OpenBSD: vmparam.h,v 1.2 2006/05/30 17:38:21 drahn Exp $	*/
d33 2
a34 2
#ifndef	_ARM32_VMPARAM_H_
#define	_ARM32_VMPARAM_H_
d38 5
d97 1
a97 1
#endif	/* _ARM32_VMPARAM_H_ */
@


1.2
log
@Several pieces were copied over from previous ports that are unnecessary,
pointed out by miod@@
@
text
@d1 1
a1 1
/* 	$OpenBSD: vmparam.h,v 1.1 2006/05/29 17:13:19 drahn Exp $	*/
d70 2
a71 9
#define	VM_PHYSSEG_MAX		32

/*
 * when converting a physical address to a vm_page structure, we
 * want to use a binary search on the chunks of physical memory
 * to find our RAM
 */

#define	VM_PHYSSEG_STRAT	VM_PSTRAT_BSEARCH
@


1.1
log
@Add a new port for ARM based products from a variety of vendors, typically
using Redboot as a loader and using pci, that have a variety of fairly minor
hardware differences between them.
@
text
@d1 1
a1 1
/* 	$OpenBSD: vmparam.h,v 1.1 2004/12/31 00:04:35 drahn Exp $	*/
a96 1
#define	VM_FREELIST_ISADMA	1
@

