head	1.9;
access;
symbols
	OPENBSD_6_0:1.8.0.10
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.6
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.14
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.8
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.6
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2016.08.10.14.27.17;	author deraadt;	state dead;
branches;
next	1.8;
commitid	nJ2GKPOeS3xtih2N;

1.8
date	2014.03.29.18.09.28;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.23.07.53.57;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.15.19.40.40;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.19.15.47.18;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.15.05.26.44;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.15.21.35.30;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.29.17.13.19;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.9
log
@armish handled some early-gen arm machines, which required tons of
workarounds.  Some of them will soon stand in the way of armv7.
Off to the attic you go.
@
text
@/*	$OpenBSD: armish_intr.h,v 1.8 2014/03/29 18:09:28 guenther Exp $ */
/*	$NetBSD: i80321_intr.h,v 1.4 2003/07/05 06:53:08 dogcow Exp $ */

/*
 * Copyright (c) 2001, 2002 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Jason R. Thorpe for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project by
 *	Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_ARMISH_INTR_H_
#define _MACHINE_ARMISH_INTR_H_

#define	ARM_IRQ_HANDLER	_C_LABEL(i80321_irq_handler)

#ifndef _LOCORE

#include <arm/armreg.h>
#include <arm/cpufunc.h>
#include <arm/softintr.h>

extern volatile int current_ipl_level;
extern volatile int softint_pending;
extern int i80321_imask[];
void i80321_do_pending(void);

void i80321_setipl(int new);
void i80321_splx(int new);
int i80321_splraise(int ipl);
int i80321_spllower(int ipl);
void i80321_setsoftintr(int si);

/*
 * An useful function for interrupt handlers.
 * XXX: This shouldn't be here.
 */
static __inline int
find_first_bit( uint32_t bits )
{
	int count;

	/* since CLZ is available only on ARMv5, this isn't portable
	 * to all ARM CPUs.  This file is for I80321 processor. 
	 */
	asm( "clz %0, %1" : "=r" (count) : "r" (bits) );
	return 31-count;
}


int	_splraise(int);
int	_spllower(int);
void	splx(int);
void	_setsoftintr(int);

/*
 * This function *MUST* be called very early on in a port's
 * initarm() function, before ANY spl*() functions are called.
 *
 * The parameter is the virtual address of the I80321's Interrupt
 * Controller registers.
 */
void i80321_intr_bootstrap(vaddr_t);

void i80321_irq_handler(void *);
void *i80321_intr_establish(int irqno, int level, int (*func)(void *),
    void *cookie, const char *name);
void i80321_intr_disestablish(void *cookie);
const char *i80321_intr_string(void *cookie);

#ifdef DIAGNOSTIC
/*
 * Although this function is implemented in MI code, it must be in this MD
 * header because we don't want this header to include MI includes.
 */
void splassert_fail(int, int, const char *);
extern int splassert_ctl;
void i80321_splassert_check(int, const char *);
#define splassert(__wantipl) do {				\
	if (splassert_ctl > 0) {				\
		i80321_splassert_check(__wantipl, __func__);	\
	}							\
} while (0)
#define	splsoftassert(wantipl) splassert(wantipl)
#else
#define	splassert(wantipl)	do { /* nothing */ } while (0)
#define	splsoftassert(wantipl)	do { /* nothing */ } while (0)
#endif

#endif /* ! _LOCORE */

#endif /* _MACHINE_ARMISH_INTR_H_ */

@


1.8
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armish_intr.h,v 1.7 2011/03/23 16:54:34 pirofti Exp $ */
@


1.7
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: armish_intr.h,v 1.6 2009/08/23 07:53:57 krw Exp $ */
d50 2
a51 2
extern __volatile int current_ipl_level;
extern __volatile int softint_pending;
@


1.6
log
@Missed 'const' change in definition of i80321_intr_establish().
Allows armish GENERIC to compile again.
@
text
@d1 1
a1 1
/*	$OpenBSD: armish_intr.h,v 1.5 2009/03/15 19:40:40 miod Exp $ */
d39 2
a40 2
#ifndef _I80321_INTR_H_
#define _I80321_INTR_H_
d119 1
a119 1
#endif /* _I80321_INTR_H_ */
@


1.5
log
@Introduce splsoftassert(), similar to splassert() but for soft interrupt
levels. This will allow for platforms where soft interrupt levels do not
map to real hardware interrupt levels to have soft ipl values overlapping
hard ipl values without breaking spl asserts.
@
text
@d1 1
a1 1
/*	$OpenBSD: armish_intr.h,v 1.4 2007/05/19 15:47:18 miod Exp $ */
d94 1
a94 1
    void *cookie, char *name);
@


1.4
log
@Implement splassert for armish and zaurus.
@
text
@d1 1
a1 1
/*	$OpenBSD: armish_intr.h,v 1.3 2007/05/15 05:26:44 miod Exp $ */
d111 1
d114 1
@


1.3
log
@Dummy mutex code for arm platforms. ok drahn@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: armish_intr.h,v 1.2 2006/06/15 21:35:30 drahn Exp $ */
d98 16
a113 1
#define splassert(wantipl) do { /* nada */ } while (0)
@


1.2
log
@rewritten, simplifed interrupt controller for 80321, half the lines
and much less complex. IPL_SERIAL goes at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: armish_intr.h,v 1.1 2006/05/29 17:13:19 drahn Exp $ */
a47 1
#include <machine/intr.h>
a60 1

d97 2
@


1.1
log
@Add a new port for ARM based products from a variety of vendors, typically
using Redboot as a loader and using pci, that have a variety of fairly minor
hardware differences between them.
@
text
@d1 1
a1 1
/*	$OpenBSD: i80321_intr.h,v 1.9 2005/09/22 04:14:44 drahn Exp $ */
d51 1
a51 1
extern __volatile int current_spl_level;
@

