head	1.10;
access;
symbols
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.12
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.8
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.6
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2016.08.10.14.27.17;	author deraadt;	state dead;
branches;
next	1.9;
commitid	nJ2GKPOeS3xtih2N;

1.9
date	2015.09.19.02.13.05;	author jsg;	state Exp;
branches;
next	1.8;
commitid	Ce0wEVwBF798D4MX;

1.8
date	2013.05.17.19.38.51;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.23.03.50.22;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.04.08.21.19.31;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.15.05.26.44;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.15.21.35.30;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.31.18.01.05;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.29.17.13.19;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.10
log
@armish handled some early-gen arm machines, which required tons of
workarounds.  Some of them will soon stand in the way of armv7.
Off to the attic you go.
@
text
@/*	$OpenBSD: intr.h,v 1.9 2015/09/19 02:13:05 jsg Exp $	*/
/*	$NetBSD: intr.h,v 1.12 2003/06/16 20:00:59 thorpej Exp $	*/

/*
 * Copyright (c) 2001, 2003 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Jason R. Thorpe for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project by
 *	Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef	_MACHINE_INTR_H_
#define	_MACHINE_INTR_H_

#ifdef _KERNEL

/* Interrupt priority "levels". */
#define	IPL_NONE	0	/* nothing */
#define	IPL_SOFT	1	/* generic software interrupts */
#define	IPL_SOFTCLOCK	2	/* software clock interrupt */
#define	IPL_SOFTNET	3	/* software network interrupt */
#define	IPL_BIO		4	/* block I/O */
#define	IPL_NET		5	/* network */
#define	IPL_SOFTTTY	6	/* software serial interrupt */
#define	IPL_TTY		7	/* terminals */
#define	IPL_VM		8	/* memory allocation */
#define	IPL_AUDIO	9	/* audio device */
#define	IPL_CLOCK	10	/* clock interrupt */
#define	IPL_STATCLOCK	11	/* statistics clock interrupt */
#define	IPL_SCHED	12	/* everything */
#define	IPL_HIGH	12	/* everything */

#define	NIPL		13

/* Interrupt priority "flags". */
#define	IPL_MPSAFE	0	/* no "mpsafe" interrupts */

/* Interrupt sharing types. */
#define	IST_NONE	0	/* none */
#define	IST_PULSE	1	/* pulsed */
#define	IST_EDGE	2	/* edge-triggered */
#define	IST_LEVEL	3	/* level-triggered */

#define IST_LEVEL_LOW	 IST_LEVEL
#define IST_LEVEL_HIGH   4
#define IST_EDGE_FALLING IST_EDGE
#define IST_EDGE_RISING  5
#define IST_EDGE_BOTH    6

#ifndef _LOCORE

#include <sys/device.h>
#include <sys/queue.h>

#define	splhigh()	_splraise(IPL_HIGH)
#define	splsoft()	_splraise(IPL_SOFT)
#define	splsoftclock()	_splraise(IPL_SOFTCLOCK)
#define	splsoftnet()	_splraise(IPL_SOFTNET)
#define	splbio()	_splraise(IPL_BIO)
#define	splnet()	_splraise(IPL_NET)
#define	spltty()	_splraise(IPL_TTY)
#define	splvm()		_splraise(IPL_VM)
#define	splaudio()	_splraise(IPL_AUDIO)
#define	splclock()	_splraise(IPL_CLOCK)
#define	splstatclock()	_splraise(IPL_STATCLOCK)

#define	spl0()		_spllower(IPL_NONE)

#define	splsched()	splhigh()
#define	spllock()	splhigh()

void	intr_barrier(void *);

#endif /* ! _LOCORE */

#include <machine/armish_intr.h>

#endif /* _KERNEL */

#endif	/* _MACHINE_INTR_H_ */

@


1.9
log
@intr_barrier(9) for arm
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.8 2013/05/17 19:38:51 kettenis Exp $	*/
@


1.8
log
@Add a dummy IPL_MPSAFE definition.

ok miod@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.7 2011/03/23 16:54:34 pirofti Exp $	*/
d98 2
@


1.7
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.6 2010/04/23 03:50:22 miod Exp $	*/
a43 1

d61 3
@


1.6
log
@Make sure IPL_SCHED is always defined by MD headers, instead of having a MI
fallback definition in <sys/sched.h>, so that there is no hidden include
ordering requirement between <machine/intr.h> and <sys/sched.h>.
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.5 2009/04/08 21:19:31 kettenis Exp $	*/
d39 2
a40 2
#ifndef	_ARMISH_INTR_H_
#define	_ARMISH_INTR_H_
d103 1
a103 1
#endif	/* _ARMISH_INTR_H_ */
@


1.5
log
@Cleanup arm soft interrupt handling; remove the unused IPL_SERIAL and rename
IPL_SOFTSERIAL to IPL_SOFTTTY.

tested by oga@@
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.4 2007/05/15 05:26:44 miod Exp $	*/
d58 1
@


1.4
log
@Dummy mutex code for arm platforms. ok drahn@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.3 2006/06/15 21:35:30 drahn Exp $	*/
d52 1
a52 1
#define	IPL_SOFTSERIAL	6	/* software serial interrupt */
@


1.3
log
@rewritten, simplifed interrupt controller for 80321, half the lines
and much less complex. IPL_SERIAL goes at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.2 2006/05/31 18:01:05 miod Exp $	*/
a78 44
#if defined(_LKM)

int	_splraise(int);
int	_spllower(int);
void	splx(int);
void	_setsoftintr(int);

#else	/* _LKM */

/*
 * Each board needs to define the following functions:
 *
 * int	_splraise(int);
 * int	_spllower(int);
 * void	splx(int);
 * void	_setsoftintr(int);
 *
 * These may be defined as functions, static __inline functions, or macros,
 * but there must be a _spllower() and splx() defined as functions callable
 * from assembly language (for cpu_switch()).  However, since it's quite
 * useful to be able to inline splx(), you could do something like the
 * following:
 *
 * in <boardtype>_intr.h:
 * 	static __inline int
 *	boardtype_splx(int spl)
 *	{...}
 *
 *	#define splx(nspl)	boardtype_splx(nspl)
 *	...
 * and in boardtype's machdep code:
 *
 *	...
 *	#undef splx
 *	int
 *	splx(int spl)
 *	{
 *		return boardtype_splx(spl);
 *	}
 */


#endif /* _LKM */

a95 3
/* Use generic software interrupt support. */
#include <arm/softintr.h>

a98 2

#define splassert(wantipl) do { /* nada */ } while (0)
@


1.2
log
@Ding dong, __NEWINTR is dead
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.1 2006/05/29 17:13:19 drahn Exp $	*/
a58 1
#define	IPL_SERIAL	13	/* serial device */
d60 1
a60 1
#define	NIPL		14
a133 1
#define	splserial()	_splraise(IPL_SERIAL)
@


1.1
log
@Add a new port for ARM based products from a variety of vendors, typically
using Redboot as a loader and using pci, that have a variety of fairly minor
hardware differences between them.
@
text
@d1 1
a1 1
/*	$OpenBSD: intr.h,v 1.4 2005/12/27 20:05:34 drahn Exp $	*/
a73 3


#define	__NEWINTR	/* enables new hooks in cpu_fork()/cpu_switch() */
@

