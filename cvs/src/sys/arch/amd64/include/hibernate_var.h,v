head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.10
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.8
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.12.08.07.12.37;	author mlarkin;	state Exp;
branches;
next	1.11;
commitid	9gsjQWzKEbWkbtZI;

1.11
date	2014.11.22.20.09.36;	author mlarkin;	state Exp;
branches;
next	1.10;
commitid	wRLVawd8196eSbjn;

1.10
date	2014.11.22.18.31.46;	author mlarkin;	state Exp;
branches;
next	1.9;
commitid	OZhulzwbZ5ey9UWV;

1.9
date	2014.10.01.19.41.06;	author mlarkin;	state Exp;
branches;
next	1.8;
commitid	8DlKHWU83o4MRkyW;

1.8
date	2014.01.05.23.06.54;	author mlarkin;	state Exp;
branches;
next	1.7;

1.7
date	2014.01.05.20.23.57;	author mlarkin;	state Exp;
branches;
next	1.6;

1.6
date	2013.06.04.16.21.23;	author mlarkin;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.04.01.20.23;	author pirofti;	state Exp;
branches;
next	1.4;

1.4
date	2013.05.30.17.15.38;	author mlarkin;	state Exp;
branches;
next	1.3;

1.3
date	2013.01.16.23.10.03;	author mlarkin;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.19.16.38.30;	author mlarkin;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.13.10.30.38;	author mlarkin;	state Exp;
branches;
next	;


desc
@@


1.12
log
@
Split the ACPI resume trampoline into code and data, move the data page to
.rodata (kernel copies to the RW page), protect the code page with RX
permissions, protect the code page with RW permissions.

ok deraadt@@
@
text
@/*	$OpenBSD: hibernate_var.h,v 1.11 2014/11/22 20:09:36 mlarkin Exp $	*/

/*
 * Copyright (c) 2011 Mike Larkin <mlarkin@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define PIGLET_PAGE_MASK (L2_FRAME)

/*
 * PML4 table for resume
 */
#define HIBERNATE_PML4T		(PAGE_SIZE * 21)

/*
 * amd64 uses a PDPT to map the first 512GB phys mem plus one more
 * to map any ranges of phys mem past 512GB (if needed)
 */
#define HIBERNATE_PDPT_LOW	(PAGE_SIZE * 22)
#define HIBERNATE_PDPT_HI	(PAGE_SIZE * 23)

/*
 * amd64 uses one PD to map the first 1GB phys mem plus one more to map any
 * other 1GB ranges within the first 512GB phys, plus one more to map any
 * 1GB range in any subsequent 512GB range
 */
#define HIBERNATE_PD_LOW	(PAGE_SIZE * 24)
#define HIBERNATE_PD_LOW2	(PAGE_SIZE * 25)
#define HIBERNATE_PD_HI		(PAGE_SIZE * 26)

/*
 * amd64 uses one PT to map the first 2MB phys mem plus one more to map any
 * other 2MB range within the first 1GB, plus one more to map any 2MB range
 * in any subsequent 512GB range.
 */
#define HIBERNATE_PT_LOW	(PAGE_SIZE * 27)
#define HIBERNATE_PT_LOW2	(PAGE_SIZE * 28)
#define HIBERNATE_PT_HI		(PAGE_SIZE * 29)

/* 3 pages for stack */
#define HIBERNATE_STACK_PAGE	(PAGE_SIZE * 32)

#define HIBERNATE_INFLATE_PAGE	(PAGE_SIZE * 33)
/* HIBERNATE_HIBALLOC_PAGE must be the last stolen page (see machdep.c) */
#define HIBERNATE_HIBALLOC_PAGE	(PAGE_SIZE * 34)

/* Use 4MB hibernation chunks */
#define HIBERNATE_CHUNK_SIZE		0x400000

#define HIBERNATE_CHUNK_TABLE_SIZE	0x100000

#define HIBERNATE_STACK_OFFSET	0x0F00
@


1.11
log
@
Previous diff changed the location of the ACPI S3/S4 trampoline, which has
a common #defined location for both i386 and amd64. This diff fixes i386 to
match.

Also fix a tab/space issue in amd64 hibernate_var.h

discussed with deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: hibernate_var.h,v 1.10 2014/11/22 18:31:46 mlarkin Exp $	*/
d24 1
a24 1
#define HIBERNATE_PML4T		(PAGE_SIZE * 20)
d30 2
a31 2
#define HIBERNATE_PDPT_LOW	(PAGE_SIZE * 21)
#define HIBERNATE_PDPT_HI	(PAGE_SIZE * 22)
d38 3
a40 3
#define HIBERNATE_PD_LOW	(PAGE_SIZE * 23)
#define HIBERNATE_PD_LOW2	(PAGE_SIZE * 24)
#define HIBERNATE_PD_HI		(PAGE_SIZE * 25)
d47 3
a49 3
#define HIBERNATE_PT_LOW	(PAGE_SIZE * 26)
#define HIBERNATE_PT_LOW2	(PAGE_SIZE * 27)
#define HIBERNATE_PT_HI		(PAGE_SIZE * 28)
d52 1
a52 1
#define HIBERNATE_STACK_PAGE	(PAGE_SIZE * 31)
d54 1
a54 1
#define HIBERNATE_INFLATE_PAGE	(PAGE_SIZE * 32)
d56 1
a56 1
#define HIBERNATE_HIBALLOC_PAGE	(PAGE_SIZE * 33)
@


1.10
log
@
Split the MP trampoline into two pages, one for code and one for data/stack
and then protect the code page as RX and the data/stack page as RW (NX).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hibernate_var.h,v 1.9 2014/10/01 19:41:06 mlarkin Exp $	*/
d56 1
a56 1
#define HIBERNATE_HIBALLOC_PAGE (PAGE_SIZE * 33)
@


1.9
log
@

Move some hibernate #defines to pte.h and eliminate some duplicate defines
from hibernate code that were already defined in pte.h (with different
names). No functional change.

ok sf@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hibernate_var.h,v 1.8 2014/01/05 23:06:54 mlarkin Exp $	*/
d24 1
a24 1
#define HIBERNATE_PML4T		(PAGE_SIZE * 18)
d30 2
a31 2
#define HIBERNATE_PDPT_LOW	(PAGE_SIZE * 19)
#define HIBERNATE_PDPT_HI	(PAGE_SIZE * 20)
d38 3
a40 3
#define HIBERNATE_PD_LOW	(PAGE_SIZE * 21)
#define HIBERNATE_PD_LOW2	(PAGE_SIZE * 22)
#define HIBERNATE_PD_HI		(PAGE_SIZE * 23)
d47 3
a49 3
#define HIBERNATE_PT_LOW	(PAGE_SIZE * 24)
#define HIBERNATE_PT_LOW2	(PAGE_SIZE * 25)
#define HIBERNATE_PT_HI		(PAGE_SIZE * 26)
d52 1
a52 1
#define HIBERNATE_STACK_PAGE	(PAGE_SIZE * 29)
d54 1
a54 1
#define HIBERNATE_INFLATE_PAGE	(PAGE_SIZE * 30)
d56 1
a56 1
#define HIBERNATE_HIBALLOC_PAGE (PAGE_SIZE * 31)
@


1.8
log
@

HIBERNATE_SELTABLE is not used anymore. Remove, and reclaim its stolen
page.
@
text
@d1 1
a1 1
/*	$OpenBSD: hibernate_var.h,v 1.7 2014/01/05 20:23:57 mlarkin Exp $	*/
d19 1
a19 7
/* amd64 hibernate support definitions */

#define PAGE_MASK_2M (NBPD_L2 - 1)
#define PAGE_MASK_1G (NBPD_L3 - 1)
#define PAGE_MASK_512G (NBPD_L4 - 1)

#define PIGLET_PAGE_MASK ~((paddr_t)PAGE_MASK_2M)
@


1.7
log
@

Don't use the first 64KB for anything, including tramps. Move tramps and
hibernate goo up after 64KB to avoid posible corruption by buggy BIOS SMM
code. Diff also ensures the first 64KB doesn't get handed to UVM either.

ok deraadt@@, tested by many with no regressions reported
@
text
@d1 1
a1 1
/*	$OpenBSD: hibernate_var.h,v 1.6 2013/06/04 16:21:23 mlarkin Exp $	*/
a56 2
#define HIBERNATE_SELTABLE	(PAGE_SIZE * 27)

d58 1
a58 1
#define HIBERNATE_STACK_PAGE	(PAGE_SIZE * 30)
d60 1
a60 1
#define HIBERNATE_INFLATE_PAGE	(PAGE_SIZE * 31)
d62 1
a62 1
#define HIBERNATE_HIBALLOC_PAGE (PAGE_SIZE * 32)
@


1.6
log
@

Remove remaining references to HIBERNATE_COPY_PAGE. It was effectively
removed at n2k13 but a few errant references still remained. No functional
change. Spot tested by my on i386 and amd64 UP environments, no regressions
seen.

noticed by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hibernate_var.h,v 1.5 2013/06/04 01:20:23 pirofti Exp $	*/
d30 1
a30 1
#define HIBERNATE_PML4T		(PAGE_SIZE * 5)
d36 2
a37 2
#define HIBERNATE_PDPT_LOW	(PAGE_SIZE * 6)
#define HIBERNATE_PDPT_HI	(PAGE_SIZE * 7)
d44 3
a46 3
#define HIBERNATE_PD_LOW	(PAGE_SIZE * 8)
#define HIBERNATE_PD_LOW2	(PAGE_SIZE * 9)
#define HIBERNATE_PD_HI		(PAGE_SIZE * 10)
d53 3
a55 3
#define HIBERNATE_PT_LOW	(PAGE_SIZE * 11)
#define HIBERNATE_PT_LOW2	(PAGE_SIZE * 12)
#define HIBERNATE_PT_HI		(PAGE_SIZE * 13)
d57 1
a57 1
#define HIBERNATE_SELTABLE	(PAGE_SIZE * 14)
d60 1
a60 1
#define HIBERNATE_STACK_PAGE	(PAGE_SIZE * 17)
d62 1
a62 1
#define HIBERNATE_INFLATE_PAGE	(PAGE_SIZE * 18)
d64 1
a64 1
#define HIBERNATE_HIBALLOC_PAGE (PAGE_SIZE * 19)
@


1.5
log
@Add RCS ids.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a62 1
#define HIBERNATE_COPY_PAGE	(PAGE_SIZE * 19)
d64 1
a64 1
#define HIBERNATE_HIBALLOC_PAGE (PAGE_SIZE * 20)
@


1.4
log
@

Even though we reserve 3 pages for the amd64 hibernate stack, we set the
resume time stack pointer to the first page reserved, effectively giving us
only one page to work with. Found when I was debugging some unrelated stack
issues in the resume code.
@
text
@d1 2
@


1.3
log
@

MD hibernate goo for amd64
@
text
@d58 1
a58 1
#define HIBERNATE_STACK_PAGE	(PAGE_SIZE * 15)
@


1.2
log
@

amd64 hibernate "unpack-time" mmu/pmap code and asm goo. Work in
progress.
@
text
@a19 2
#define PMAP_PA_MASK_2M ~((paddr_t)PAGE_MASK_2M)

a20 2
#define PMAP_PA_MASK_1G ~((paddr_t)PAGE_MASK_1G)

a21 1
#define PMAP_PA_MASK_512G ~((paddr_t)PAGE_MASK_512G)
d23 1
a23 2
#define HIBERNATE_512GB ((paddr_t)1 << (paddr_t)39)
#define HIBERNATE_1GB ((paddr_t)1 << (paddr_t)30)
d25 4
a28 1
#define PIGLET_PAGE_MASK ~((paddr_t)PAGE_MASK_2M)
d31 1
a31 1
 * amd64 uses a fixed PML4E to map the first 512GB phys mem plus one more
d34 2
a35 3
#define HIBERNATE_PML4_PAGE	(PAGE_SIZE * 5)
#define HIBERNATE_PML4E_LOW	(PAGE_SIZE * 6)
#define HIBERNATE_PML4E_HI	(PAGE_SIZE * 7)
d38 3
a40 3
 * amd64 uses one fixed PDPTE to map the first 1GB phys mem plus one more
 * to map any other 1GB ranges within the first 512GB phys, plus one more to
 * map any 1GB range in any subsequent 512GB range
d42 3
a44 3
#define HIBERNATE_PDPTE_LOW	(PAGE_SIZE * 8)
#define HIBERNATE_PDPTE_LOW2	(PAGE_SIZE * 9)
#define HIBERNATE_PDPTE_HI	(PAGE_SIZE * 10)
d47 3
a49 4
 * amd64 uses one fixed PDE to map the first 2MB phys mem plus one more
 * to map any other 2MB range within the first 1GB, plus one more to map any
 * 2MB range in any subsequent 512GB range. These PDEs point to 512 PTEs each
 * (4KB pages) or may directly map a 2MB range
d51 11
a61 7
#define HIBERNATE_PDE_LOW	(PAGE_SIZE * 11)
#define HIBERNATE_PDE_LOW2	(PAGE_SIZE * 12)
#define HIBERNATE_PDE_HI	(PAGE_SIZE * 13)

#define HIBERNATE_STACK_PAGE	(PAGE_SIZE * 14)
#define HIBERNATE_INFLATE_PAGE	(PAGE_SIZE * 15)
#define HIBERNATE_COPY_PAGE	(PAGE_SIZE * 16)
d63 1
a63 1
#define HIBERNATE_HIBALLOC_PAGE (PAGE_SIZE * 17)
a70 17

#define atop_4k(x) ((x) >> L1_SHIFT)
#define atop_2m(x) ((x) >> L2_SHIFT)
#define atop_1g(x) ((x) >> L3_SHIFT)
#define atop_512g(x) ((x) >> L4_SHIFT)

#define s4pte_4k_low(va) ((pt_entry_t *)HIBERNATE_PDE_LOW + atop_4k(va))
#define s4pte_4k_low2(va) ((pt_entry_t *)HIBERNATE_PDE_LOW2 + atop_4k(va))
#define s4pte_4k_hi(va) ((pt_entry_t *)HIBERNATE_PDE_HI + atop_4k(va))

#define s4pde_2m_low(va) ((pt_entry_t *)HIBERNATE_PDPTE_LOW + atop_2m(va))
#define s4pde_2m_low2(va) ((pt_entry_t *)HIBERNATE_PDPTE_LOW2 + atop_2m(va))
#define s4pde_2m_hi(va) ((pt_entry_t *)HIBERNATE_PDPTE_HI + atop_2m(va))
#define s4pde_1g_low(va) ((pt_entry_t *)HIBERNATE_PML4E_LOW + atop_1g(va))
#define s4pde_1g_low2(va) ((pt_entry_t *)HIBERNATE_PML4E_LOW + atop_1g(va))
#define s4pde_1g_hi(va) ((pt_entry_t *)HIBERNATE_PML4E_HI + atop_1g(va))
#define s4pde_512g(va) ((pt_entry_t *)HIBERNATE_PML4_PAGE + atop_512g(va))
@


1.1
log
@

Starting point for amd64 hibernate ... some goo copied from i386.
This does not yet work for amd64 - getting the structure into the tree so
others can help.
@
text
@d19 2
a20 1
#define NBPD 4194304
d22 43
a64 12
#define PAGE_SHIFT_4M 22
#define PAGE_MASK_4M (NBPD - 1)
#define PMAP_PA_MASK_4M ~((paddr_t)PAGE_MASK_4M)

#define PIGLET_PAGE_MASK ~((paddr_t)PAGE_MASK_4M)

#define HIBERNATE_PD_PAGE	(PAGE_SIZE * 5)
#define HIBERNATE_PT_PAGE	(PAGE_SIZE * 6)
#define HIBERNATE_STACK_PAGE	(PAGE_SIZE * 8)
#define HIBERNATE_INFLATE_PAGE	(PAGE_SIZE * 9)
#define HIBERNATE_COPY_PAGE	(PAGE_SIZE * 10)
#define HIBERNATE_HIBALLOC_PAGE (PAGE_SIZE * 11)
d73 16
a88 5
#define atop_4m(x) ((x) >> PAGE_SHIFT_4M)
#define atop_4k(x) ((x) >> PAGE_SHIFT)
#define s4pde_4m(va) ((pt_entry_t *)HIBERNATE_PD_PAGE + atop_4m(va))
#define s4pde_4k(va) ((pt_entry_t *)HIBERNATE_PD_PAGE + atop_4k(va))
#define s4pte_4k(va) ((pt_entry_t *)HIBERNATE_PT_PAGE + atop_4k(va))
@

