head	1.21;
access;
symbols
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.8
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.4
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.16.0.4
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.15.0.6
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.4
	OPENBSD_5_0:1.15.0.2
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.12.0.6
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.21
date	2015.02.08.03.48.25;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	FyI2yQpd2OUfUZHS;

1.20
date	2015.02.05.23.06.22;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	3ih3vC0eJxychlMb;

1.19
date	2014.03.26.19.39.39;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2014.01.30.18.16.41;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2014.01.23.22.06.29;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2013.01.27.16.12.16;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2011.05.30.22.25.20;	author oga;	state Exp;
branches;
next	1.14;

1.14
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.13;

1.13
date	2010.12.15.05.30.19;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2009.06.16.16.42.40;	author ariane;	state Exp;
branches;
next	1.11;

1.11
date	2009.06.01.17.42.33;	author ariane;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.18.16.40.17;	author kurt;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.24.21.24.03;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.10.02.55.39;	author weingart;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.15.16.38.33;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.29.03.17.31;	author weingart;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.13.00.18.19;	author jsg;	state Exp;
branches
	1.5.2.1
	1.5.6.1;
next	1.4;

1.4
date	2005.08.01.19.44.53;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.11.15.13.01;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.28.01.36.38;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.39.39;	author mickey;	state Exp;
branches;
next	;

1.5.2.1
date	2007.06.30.15.25.57;	author ckuethe;	state Exp;
branches;
next	;

1.5.6.1
date	2007.06.30.15.25.09;	author ckuethe;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Hilarious!  We are not ready yet for large stack random biases, due to
the stack region handling in uvm.
@
text
@/*	$OpenBSD: vmparam.h,v 1.20 2015/02/05 23:06:22 deraadt Exp $	*/
/*	$NetBSD: vmparam.h,v 1.1 2003/04/26 18:39:49 fvdl Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)vmparam.h	5.9 (Berkeley) 5/12/91
 */

#ifndef _MACHINE_VMPARAM_H_
#define _MACHINE_VMPARAM_H_

/*
 * Machine dependent constants for amd64.
 */

/*
 * USRSTACK is the top (end) of the user stack. Immediately above the
 * user stack resides the user structure, which is UPAGES long and contains
 * the kernel stack.
 *
 * Immediately after the user structure is the page table map, and then
 * kernel address space.
 */
#define	USRSTACK	VM_MAXUSER_ADDRESS

/*
 * Virtual memory related constants, all in bytes
 */
#define	MAXTSIZ		((paddr_t)128*1024*1024)	/* max text size */
#ifndef DFLDSIZ
#define	DFLDSIZ		((paddr_t)128*1024*1024)	/* initial data size limit */
#endif
#ifndef MAXDSIZ
#define	MAXDSIZ		((paddr_t)32*1024*1024*1024)	/* max data size */
#endif
#ifndef BRKSIZ
#define	BRKSIZ		((paddr_t)8*1024*1024*1024)	/* heap gap size */
#endif
#ifndef	DFLSSIZ
#define	DFLSSIZ		((paddr_t)2*1024*1024)		/* initial stack size limit */
#endif
#ifndef	MAXSSIZ
#define	MAXSSIZ		((paddr_t)32*1024*1024)		/* max stack size */
#endif

#define STACKGAP_RANDOM	256*1024

/*
 * Size of shared memory map
 */
#ifndef SHMMAXPGS
#define SHMMAXPGS	8192
#endif

/*
 * Size of User Raw I/O map
 */
#define	USRIOSIZE 	300

/*
 * Mach derived constants
 */

/* user/kernel map constants */
#define VM_MIN_ADDRESS		PAGE_SIZE
#define VM_MAXUSER_ADDRESS	0x00007f7fffffc000
#define VM_MAX_ADDRESS		0x00007fbfdfeff000
#define VM_MIN_KERNEL_ADDRESS	0xffff800000000000
#define VM_MAX_KERNEL_ADDRESS	0xffff800100000000

#define VM_MAXUSER_ADDRESS32	0xffffc000

/* map PIE into approximately the first quarter of user va space */
#define VM_PIE_MIN_ADDR		VM_MIN_ADDRESS
#define VM_PIE_MAX_ADDR		0x200000000000

/* virtual sizes (bytes) for various kernel submaps */
#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)

#define VM_PHYSSEG_MAX		16	/* actually we could have this many segments */
#define VM_PHYSSEG_STRAT	VM_PSTRAT_BIGFIRST
#define VM_PHYSSEG_NOADD		/* can't add RAM after vm_mem_init */

#endif /* _MACHINE_VMPARAM_H_ */
@


1.20
log
@Expand STACKGAP_RANDOM to 2MB on machines with large user VA
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.20 2015/02/05 22:49:05 deraadt Exp $	*/
d75 1
a75 1
#define STACKGAP_RANDOM	2*1024*1024
@


1.19
log
@Increase max data size. 32G is the new 640K.
Using this much memory may have negative side effects, but at least now
you have the option. Here's some rope; have fun.
maybe ok a few people.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.18 2014/01/30 18:16:41 miod Exp $	*/
d75 1
a75 1
#define STACKGAP_RANDOM	256*1024
@


1.18
log
@Move declaration of struct vm_page_md from <machine/vmparam.h> to
<machine/pmap.h> where it belongs, and compensate in <uvm/uvm_extern.h>
by including <uvm/uvm_pmap.h> before <uvm/uvm_page.h>. Tested on all
MACHINE_ARCH but amd64 and i386 (and hppa64).
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.17 2014/01/23 22:06:29 miod Exp $	*/
d63 1
a63 1
#define	MAXDSIZ		((paddr_t)8*1024*1024*1024)	/* max data size */
d66 1
a66 1
#define	BRKSIZ		MAXDSIZ				/* heap gap size */
@


1.17
log
@unifdef -D__HAVE_VM_PAGE_MD - no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.16 2013/01/27 16:12:16 fgsch Exp $	*/
a111 9

struct pv_entry;
struct vm_page_md {
	struct pv_entry *pv_list;
};

#define VM_MDPAGE_INIT(pg) do {		\
	(pg)->mdpage.pv_list = NULL;	\
} while (0)
@


1.16
log
@Bump MAXTSIZ to 128 MB, some binaries are quite large.
Agreed with millert@@ and guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.15 2011/05/30 22:25:20 oga Exp $	*/
a112 1
#define __HAVE_VM_PAGE_MD
@


1.15
log
@Remove the freelist member from vm_physseg

The new world order of pmemrange makes this data completely redundant
(being dealt with by the pmemrange constraints instead). Remove all code
that messes with the freelist.

While touching every caller of uvm_page_physload() anyway, add the flags
argument to all callers (all but one is 0 and that one already used
PHYSLOAD_DEVICE) and remove the macro magic to allow callers to continue
without it.

Should shrink the code a bit, as well.

matthew@@ pointed out some mistakes i'd made.
``freelist death, I like. Ok.' ariane@@
`I agree with the general direction, go ahead and i'll fix any fallout
shortly'' miod@@ (68k 88k and vax i could not check would build)
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14 2011/03/23 16:54:34 pirofti Exp $	*/
d58 1
a58 1
#define	MAXTSIZ		((paddr_t)64*1024*1024)		/* max text size */
@


1.14
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.13 2010/12/15 05:30:19 tedu Exp $	*/
a111 5

#define	VM_NFREELIST		3
#define	VM_FREELIST_DEFAULT	0
#define	VM_FREELIST_LOW	1
#define	VM_FREELIST_HIGH	2
@


1.13
log
@oops, i forgot to check in the BRKSIZ define in uvm, but deraadt thinks
its better as a per arch MD define anyway.  all default to MAXDSIZ as before.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 2009/06/16 16:42:40 ariane Exp $	*/
d38 2
a39 2
#ifndef _VMPARAM_H_
#define _VMPARAM_H_
d128 1
a128 1
#endif /* _VMPARAM_H_ */
@


1.12
log
@Backout pmemrange (which to most people is more well known as physmem
allocator).

"i can't see any obvious problems" oga
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.10 2008/07/18 16:40:17 kurt Exp $	*/
d64 3
@


1.11
log
@physmem allocator: change the view of free memory from single free pages
to free ranges.
Classify memory based on region with associated use-counter (which is used
to construct a priority list of where to allocate memory).

Based on code from tedu@@, help from many.
Ok art@@
@
text
@a114 7
/* reserve ISA-DMA and 32-bit DMA memory */
#define UVM_IO_RANGES							\
	{								\
		{ 0, 0x00ffffffUL },					\
		{ 0, 0xffffffffUL },					\
	}

@


1.10
log
@Add new uvm function called uvm_map_pie() which takes align as a
parameter and returns an aligned random load address for position
independent executables to use. This also adds three new vmparam.h
defines to specify the maximum address, minimum address and minimum
allowed alignment for uvm_map_pie() to use. The PIE address range
for i386 was carefully selected to work well within the i386 W^X
framework.

With much help and feedback from weingart@@.
okay weingart@@, miod@@, kettenis@@, drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9 2008/06/24 21:24:03 deraadt Exp $	*/
d114 7
@


1.9
log
@On user/kernel shared page table machines, do not let processes map their
own page 0, as discussed with miod (and many others previously, including
art and toby).  On sparc, make this __LDPGSZ because PAGE_SIZE is non-constant
ok miod tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8 2008/06/10 02:55:39 weingart Exp $	*/
d98 4
@


1.8
log
@All your memory belong to us.  This has been in snaps for a while,
and seems to work.  If it breaks, people had plenty of chances to
complain.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.7 2007/05/15 16:38:33 art Exp $	*/
d91 1
a91 1
#define VM_MIN_ADDRESS		0
@


1.7
log
@Switch amd64 to VM_PAGE_MD. Mostly just imitating i386. flags in pg_flags.

deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6 2007/03/29 03:17:31 weingart Exp $	*/
d58 1
a58 1
#define	MAXTSIZ		(64*1024*1024)		/* max text size */
d60 1
a60 1
#define	DFLDSIZ		(128*1024*1024)		/* initial data size limit */
d63 1
a63 1
#define	MAXDSIZ		(1*1024*1024*1024)	/* max data size */
d66 1
a66 1
#define	DFLSSIZ		(2*1024*1024)		/* initial stack size limit */
d69 1
a69 1
#define	MAXSSIZ		(32*1024*1024)		/* max stack size */
d106 1
a106 1
#define	VM_NFREELIST		2
d108 2
a109 1
#define	VM_FREELIST_FIRST16	1
@


1.6
log
@Equiv diff to amd64 as was done on i386, bump VM_PHYSSEG_MAX.  Amd64 are
PCs too...

Tested by dlg@@ and brad.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 2005/12/13 00:18:19 jsg Exp $	*/
d110 4
a113 7
/*
 * pmap specific data stored in the vm_physmem[] array
 */
#define __HAVE_PMAP_PHYSSEG
struct pmap_physseg {
	struct pv_head *pvhead;		/* pv_head array */
	unsigned char *attrs;		/* attrs array */
d115 4
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.
Checked by ian@@, deraadt@@ and millert@@, arm portion checked by drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4 2005/08/01 19:44:53 jmc Exp $	*/
d102 1
a102 1
#define VM_PHYSSEG_MAX		5	/* 1 "hole" + 4 free lists */
@


1.5.2.1
log
@increase VM_PHYSSEG_MAX some more, some systems need it.
Diff from todd, ok weingart
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 2005/12/13 00:18:19 jsg Exp $	*/
d102 1
a102 1
#define VM_PHYSSEG_MAX		16	/* actually we could have this many segments */
@


1.5.6.1
log
@increase VM_PHYSSEG_MAX some more, some systems need it.
Diff from todd, ok weingart
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 2005/12/13 00:18:19 jsg Exp $	*/
d102 1
a102 1
#define VM_PHYSSEG_MAX		16	/* actually we could have this many segments */
@


1.4
log
@kernal->kernel;
from netbsd pr #30872 (anonymous post);
ok deraadt@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3 2005/04/11 15:13:01 deraadt Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@use MD #define to choose stackgap size per-architecture.  on sparc, special
case sun4c/sun4 -- because address space is more constrained
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.2 2004/11/28 01:36:38 mickey Exp $	*/
d55 1
a55 1
 * kernal address space.
@


1.2
log
@MAXSLP is not really an MD-configurable define so move it to param.h; miod@@ testing
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.1 2004/01/28 01:39:39 mickey Exp $	*/
d75 2
@


1.1
log
@an amd64 arch support.
hacked by art@@ from netbsd sources and then later debugged
by me into the shape where it can host itself.
no bootloader yet as needs redoing from the
recent advanced i386 sources (anyone? ;)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a86 11

/*
 * The time for a process to be blocked before being very swappable.
 * This is a number of seconds which the system takes as being a non-trivial
 * amount of real time.  You probably shouldn't change this;
 * it is used in subtle ways (fractions and multiples of it are, that is, like
 * half of a ``long time'', almost a long time, etc.)
 * It is related to human patience and other factors which don't really
 * change over time.
 */
#define MAXSLP	20
@

