head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.4
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.5.0.12
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.14
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	SMP:1.3.0.2;
locks; strict;
comment	@ * @;


1.13
date	2015.11.09.00.49.33;	author mlarkin;	state Exp;
branches;
next	1.12;
commitid	YRgDRBPn3vhtKxgH;

1.12
date	2014.11.20.06.51.41;	author mlarkin;	state Exp;
branches;
next	1.11;
commitid	rZAY1nGaAOyEEKdK;

1.11
date	2014.10.01.19.41.06;	author mlarkin;	state Exp;
branches;
next	1.10;
commitid	8DlKHWU83o4MRkyW;

1.10
date	2014.04.21.11.58.48;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.23.16.12.20;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.08.16.54.07;	author oga;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.20.19.22.06;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.16.15.51.26;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.23.08.32.36;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.07.17.00.15;	author miod;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2004.02.06.00.23.21;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.39.39;	author mickey;	state Exp;
branches;
next	;

1.3.2.1
date	2004.02.22.22.08.18;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2004.06.05.23.09.25;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.13
log
@
EPT paging permission bits for amd64, will be used in subsequent pmap
changes for vmm.
@
text
@/*	$OpenBSD: pte.h,v 1.12 2014/11/20 06:51:41 mlarkin Exp $	*/
/*	$NetBSD: pte.h,v 1.1 2003/04/26 18:39:47 fvdl Exp $	*/

/*
 * Copyright (c) 2001 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Frank van der Linden for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed for the NetBSD Project by
 *      Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_PTE_H_
#define _MACHINE_PTE_H_

/*
 * amd64 MMU hardware structure:
 *
 * the (first generation) amd64 MMU is a 4-level MMU which maps 2^48 bytes
 * of  virtual memory. The  pagesize we use is 4K (4096 [0x1000] bytes), 
 * although 2M and 4M can be used as well. The indexes in the levels
 * are 9 bits wide (512 64bit entries per level), dividing the bits
 * 9-9-9-9-12.
 *
 * The top level table, called PML4, contains 512 64bit entries pointing
 * to 3rd level table. The 3rd level table is called the 'page directory
 * pointers directory' and has 512 entries pointing to page directories.
 * The 2nd level is the page directory, containing 512 pointers to
 * page table pages. Lastly, level 1 consists of pages containing 512
 * PTEs.
 *
 * Simply put, levels 4-1 all consist of pages containing 512
 * entries pointing to the next level. Level 0 is the actual PTEs
 * themselves.
 *
 * For a description on the other bits, which are i386 compatible,
 * see the i386 pte.h
 */

#if !defined(_LOCORE)

/*
 * here we define the data types for PDEs and PTEs
 */

typedef u_int64_t pd_entry_t;		/* PDE */
typedef u_int64_t pt_entry_t;		/* PTE */

#endif

/*
 * now we define various for playing with virtual addresses
 */

#define L1_SHIFT	12
#define	L2_SHIFT	21
#define	L3_SHIFT	30
#define	L4_SHIFT	39
#define	NBPD_L1		(1ULL << L1_SHIFT) /* # bytes mapped by L1 ent (4K) */
#define	NBPD_L2		(1ULL << L2_SHIFT) /* # bytes mapped by L2 ent (2MB) */
#define	NBPD_L3		(1ULL << L3_SHIFT) /* # bytes mapped by L3 ent (1G) */
#define	NBPD_L4		(1ULL << L4_SHIFT) /* # bytes mapped by L4 ent (512G) */

#define L4_MASK		0x0000ff8000000000UL
#define L3_MASK		0x0000007fc0000000UL
#define L2_MASK		0x000000003fe00000UL
#define L1_MASK		0x00000000001ff000UL

#define L4_FRAME	L4_MASK
#define L3_FRAME	(L4_FRAME|L3_MASK)
#define L2_FRAME	(L3_FRAME|L2_MASK)
#define L1_FRAME	(L2_FRAME|L1_MASK)

#define PAGE_MASK_L2 	(NBPD_L2 - 1)

#define	x86_round_pdr(x) \
	((((unsigned long)(x)) + (NBPD_L2 - 1)) & ~(NBPD_L2 - 1))

/*
 * PDE/PTE bits. These are no different from their i386 counterparts.
 */

#define	PG_V		0x0000000000000001UL	/* valid */
#define	PG_RO		0x0000000000000000UL	/* read-only */
#define	PG_RW		0x0000000000000002UL	/* read-write */
#define	PG_u		0x0000000000000004UL	/* user accessible */
#define	PG_PROT		0x0000000000000006UL
#define	PG_WT		0x0000000000000008UL	/* write through */
#define	PG_N		0x0000000000000010UL	/* non-cacheable */
#define	PG_U		0x0000000000000020UL	/* used */
#define	PG_M		0x0000000000000040UL	/* modified */
#define	PG_PAT		0x0000000000000080UL	/* PAT bit. (on pte) */
#define	PG_PS		0x0000000000000080UL	/* 2MB page size (on pde) */
#define	PG_G		0x0000000000000100UL	/* not flushed */
#define	PG_AVAIL1	0x0000000000000200UL
#define	PG_AVAIL2	0x0000000000000400UL
#define	PG_AVAIL3	0x0000000000000800UL
#define	PG_PATLG	0x0000000000001000UL	/* PAT on large pages */
#define	PG_NX		0x8000000000000000UL	/* non-executable */
#define	PG_FRAME	0x000ffffffffff000UL

#define	PG_LGFRAME	0x000fffffffe00000UL	/* large (2M) page frame mask */

/* EPT PTE bits */
#define EPT_R		(1ULL << 0)
#define EPT_W		(1ULL << 1)
#define EPT_X		(1ULL << 2)
#define EPT_WB		(6ULL << 3)
#define EPT_PS		(1ULL << 7)

/* Cacheability bits when we are using PAT */
#define	PG_WB		(0)		/* The default */
#define	PG_WC		(PG_WT)		/* WT and CD is WC */
#define	PG_UCMINUS	(PG_N)		/* UC but mtrr can override */
#define	PG_UC		(PG_WT | PG_N)	/* hard UC */

/*
 * short forms of protection codes
 */

#define	PG_KR		0x0000000000000000UL	/* kernel read-only */
#define	PG_KW		0x0000000000000002UL	/* kernel read-write */

/*
 * page protection exception bits
 */

#define PGEX_P		0x01	/* protection violation (vs. no mapping) */
#define PGEX_W		0x02	/* exception during a write cycle */
#define PGEX_U		0x04	/* exception while in user mode (upl) */
#define PGEX_I		0x10	/* instruction fetch blocked by NX */

#ifdef _KERNEL
extern pt_entry_t pg_nx;	/* NX pte bit */
#endif /* _KERNEL */

#endif /* _MACHINE_PTE_H_ */
@


1.12
log
@
Move previous PTE permission fixup code into locore, and fixup some more
ranges while we're there.

ok deraadt@@, tested by many and in snaps
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.11 2014/10/01 19:41:06 mlarkin Exp $	*/
d129 7
@


1.11
log
@

Move some hibernate #defines to pte.h and eliminate some duplicate defines
from hibernate code that were already defined in pte.h (with different
names). No functional change.

ok sf@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.10 2014/04/21 11:58:48 guenther Exp $	*/
d151 4
@


1.10
log
@Fix off-by-one error in PG_LGFRAME mask

ok mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.9 2013/03/23 16:12:20 deraadt Exp $	*/
d99 2
@


1.9
log
@refactor sys/param.h and machine/param.h.  A lot of #ifdef _KERNEL is added
to keep definitions our of user space.  The MD files now follow a consistant
order -- all namespace intrusion is at the tail can be cleaned up
independently.  locore, bootblocks, and libkvm still see enough visibility to
build.  Checked on 90% of platforms...
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.8 2011/03/23 16:54:34 pirofti Exp $	*/
d126 1
a126 1
#define	PG_LGFRAME	0x000fffffffc00000UL	/* large (2M) page frame mask */
@


1.8
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.7 2010/05/08 16:54:07 oga Exp $	*/
d99 3
@


1.7
log
@Page Attribute Tables (PAT) support for x86.

PAT allows setting per-mapping cachability bits. Our main interest in it
for write combining mappings so we do not have to rely so heaviliy on
mtrrs (which are stupidly set up on more and more machines). MD flags to
pmap allow setting these bits (which bus_space now uses for PREFETCHABLE
maps), if a vm page has a bit set, then we will use WC for all mappings
of a page (used for userland mappings). We also check for known errata
and fall back to UC- mappings in that case.

comments from kettenis@@, tedu@@ and william@@. kettenis@@, tedu@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.6 2010/04/20 19:22:06 oga Exp $	*/
d39 2
a40 2
#ifndef _AMD64_PTE_H_
#define _AMD64_PTE_H_
d147 1
a147 1
#endif /* _AMD64_PTE_H_ */
@


1.6
log
@Instead of using PWT|PCD for uncached (which is wrong on old cpus and
HARD uncached on anything since the P3), use just PCD which is UC-
(uncached but mtrrs can override it to write combining).

Now kernel mappings of WC-mtrred memory actually get write combining
memory.

the speed up is very very nice.

ok kettenis@@, deraadt@@, beck@@ (who likes his scrollbars non-wibbly)
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.5 2006/10/16 15:51:26 tom Exp $	*/
d113 8
a120 6
#define PG_PS		0x0000000000000080UL	/* 2MB page size */
#define PG_G		0x0000000000000100UL	/* not flushed */
#define PG_AVAIL1	0x0000000000000200UL
#define PG_AVAIL2	0x0000000000000400UL
#define PG_AVAIL3	0x0000000000000800UL
#define PG_NX		0x8000000000000000UL	/* non-executable */
d124 6
@


1.5
log
@Fix some more "is is"s.  ok otto@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.4 2004/02/23 08:32:36 mickey Exp $	*/
d109 2
a110 1
#define	PG_N		0x0000000000000018UL	/* non-cacheable */
@


1.4
log
@get use of NX; partially from netbsd; passes the regress; deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.3 2004/02/07 17:00:15 miod Exp $	*/
d46 1
a46 1
 * of  virtual memory. The  pagesize we use is is 4K (4096 [0x1000] bytes), 
@


1.3
log
@Be sure to flag pte constants as UL, and cope with this in locore.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.2 2004/02/06 00:23:21 deraadt Exp $	*/
d118 1
a118 1
#define	PG_FRAME	0xfffffffffffff000UL
d120 1
a120 1
#define	PG_LGFRAME	0xffffffffffc00000UL	/* large (2M) page frame mask */
@


1.3.2.1
log
@The merge of these files were done to another date than the rest, fix.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d90 4
a93 4
#define L4_MASK		0x0000ff8000000000
#define L3_MASK		0x0000007fc0000000
#define L2_MASK		0x000000003fe00000
#define L1_MASK		0x00000000001ff000
d104 15
a118 15
#define	PG_V		0x0000000000000001	/* valid */
#define	PG_RO		0x0000000000000000	/* read-only */
#define	PG_RW		0x0000000000000002	/* read-write */
#define	PG_u		0x0000000000000004	/* user accessible */
#define	PG_PROT		0x0000000000000006
#define	PG_N		0x0000000000000018	/* non-cacheable */
#define	PG_U		0x0000000000000020	/* used */
#define	PG_M		0x0000000000000040	/* modified */
#define PG_PS		0x0000000000000080	/* 2MB page size */
#define PG_G		0x0000000000000100	/* not flushed */
#define PG_AVAIL1	0x0000000000000200
#define PG_AVAIL2	0x0000000000000400
#define PG_AVAIL3	0x0000000000000800
#define PG_NX		0x8000000000000000	/* non-executable */
#define	PG_FRAME	0xfffffffffffff000
d120 1
a120 1
#define	PG_LGFRAME	0xffffffffffc00000	/* large (2M) page frame mask */
d126 2
a127 2
#define	PG_KR		0x0000000000000000	/* kernel read-only */
#define	PG_KW		0x0000000000000002	/* kernel read-write */
d136 1
@


1.3.2.2
log
@Merge with the trunk
@
text
@d90 4
a93 4
#define L4_MASK		0x0000ff8000000000UL
#define L3_MASK		0x0000007fc0000000UL
#define L2_MASK		0x000000003fe00000UL
#define L1_MASK		0x00000000001ff000UL
d104 15
a118 15
#define	PG_V		0x0000000000000001UL	/* valid */
#define	PG_RO		0x0000000000000000UL	/* read-only */
#define	PG_RW		0x0000000000000002UL	/* read-write */
#define	PG_u		0x0000000000000004UL	/* user accessible */
#define	PG_PROT		0x0000000000000006UL
#define	PG_N		0x0000000000000018UL	/* non-cacheable */
#define	PG_U		0x0000000000000020UL	/* used */
#define	PG_M		0x0000000000000040UL	/* modified */
#define PG_PS		0x0000000000000080UL	/* 2MB page size */
#define PG_G		0x0000000000000100UL	/* not flushed */
#define PG_AVAIL1	0x0000000000000200UL
#define PG_AVAIL2	0x0000000000000400UL
#define PG_AVAIL3	0x0000000000000800UL
#define PG_NX		0x8000000000000000UL	/* non-executable */
#define	PG_FRAME	0x000ffffffffff000UL
d120 1
a120 1
#define	PG_LGFRAME	0x000fffffffc00000UL	/* large (2M) page frame mask */
d126 2
a127 2
#define	PG_KR		0x0000000000000000UL	/* kernel read-only */
#define	PG_KW		0x0000000000000002UL	/* kernel read-write */
a135 1
#define PGEX_I		0x10	/* instruction fetch blocked by NX */
@


1.2
log
@some cpus start to have a NX oriented PGEX_I
@
text
@d1 1
a1 1
/*	$OpenBSD: pte.h,v 1.1 2004/01/28 01:39:39 mickey Exp $	*/
d90 4
a93 4
#define L4_MASK		0x0000ff8000000000
#define L3_MASK		0x0000007fc0000000
#define L2_MASK		0x000000003fe00000
#define L1_MASK		0x00000000001ff000
d104 15
a118 15
#define	PG_V		0x0000000000000001	/* valid */
#define	PG_RO		0x0000000000000000	/* read-only */
#define	PG_RW		0x0000000000000002	/* read-write */
#define	PG_u		0x0000000000000004	/* user accessible */
#define	PG_PROT		0x0000000000000006
#define	PG_N		0x0000000000000018	/* non-cacheable */
#define	PG_U		0x0000000000000020	/* used */
#define	PG_M		0x0000000000000040	/* modified */
#define PG_PS		0x0000000000000080	/* 2MB page size */
#define PG_G		0x0000000000000100	/* not flushed */
#define PG_AVAIL1	0x0000000000000200
#define PG_AVAIL2	0x0000000000000400
#define PG_AVAIL3	0x0000000000000800
#define PG_NX		0x8000000000000000	/* non-executable */
#define	PG_FRAME	0xfffffffffffff000
d120 1
a120 1
#define	PG_LGFRAME	0xffffffffffc00000	/* large (2M) page frame mask */
d126 2
a127 2
#define	PG_KR		0x0000000000000000	/* kernel read-only */
#define	PG_KW		0x0000000000000002	/* kernel read-write */
@


1.1
log
@an amd64 arch support.
hacked by art@@ from netbsd sources and then later debugged
by me into the shape where it can host itself.
no bootloader yet as needs redoing from the
recent advanced i386 sources (anyone? ;)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d136 1
@

