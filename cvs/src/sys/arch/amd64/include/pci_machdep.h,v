head	1.25;
access;
symbols
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.2
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.23.0.4
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.22.0.2
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.6
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.21.0.4
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.2
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.19.0.4
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.2
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.11.0.4
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.4.0.12
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.10
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.25
date	2016.05.04.14.30.00;	author kettenis;	state Exp;
branches;
next	1.24;
commitid	n9OfCKyY3NAvSMg8;

1.24
date	2015.10.29.23.08.45;	author miod;	state Exp;
branches;
next	1.23;
commitid	ghc8hTy2E0Ju0zis;

1.23
date	2015.07.17.22.42.09;	author kettenis;	state Exp;
branches;
next	1.22;
commitid	sxsJOzAOv43HRI0o;

1.22
date	2013.11.06.10.40.36;	author mpi;	state Exp;
branches;
next	1.21;

1.21
date	2012.09.19.23.23.50;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2012.09.07.19.23.16;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2011.10.10.19.42.36;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2011.05.21.15.58.27;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2011.01.04.21.17.49;	author kettenis;	state Exp;
branches;
next	1.16;

1.16
date	2010.12.04.17.06.31;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.29.22.08.28;	author jordan;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.06.21.35.43;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2009.08.22.02.54.50;	author mk;	state Exp;
branches;
next	1.12;

1.12
date	2009.07.20.23.40.41;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.21.19.18.09;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.11.17.13.33;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.04.16.03.17;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2008.12.06.19.59.38;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2008.12.06.04.31.24;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.03.15.46.06;	author oga;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.26.12.27.31;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.05.21.48.34;	author tdeval;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.04.19.19.40;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.07.02.29.40;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.39.39;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Initial support for MSI-X.  Only supported on amd64 for now.  I have diffs to
actually use this in em(4) and xhci(4), but I'm not committing those yet
because we almost certainly need to save and restore the MSI-X registers
during suspend/resume.  However, this allows mpi@@ to play with multiple-vector
support in networking hardware.

Requested by mpi@@
ok mlarkin@@, mikeb@@
@
text
@/*	$OpenBSD: pci_machdep.h,v 1.24 2015/10/29 23:08:45 miod Exp $	*/
/*	$NetBSD: pci_machdep.h,v 1.1 2003/02/26 21:26:11 fvdl Exp $	*/

/*
 * Copyright (c) 1996 Christopher G. Demetriou.  All rights reserved.
 * Copyright (c) 1994 Charles M. Hannum.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Charles M. Hannum.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Machine-specific definitions for PCI autoconfiguration.
 */

/*
 * amd64-specific PCI structure and type definitions.
 * NOT TO BE USED DIRECTLY BY MACHINE INDEPENDENT CODE.
 */

extern struct bus_dma_tag pci_bus_dma_tag;

/*
 * Types provided to machine-independent PCI code
 */
typedef void *pci_chipset_tag_t;
typedef u_int32_t pcitag_t;

typedef struct {
	pcitag_t tag;
	int line, pin;
} pci_intr_handle_t;

#define	pci_intr_line(pc,ih)	((ih.line) & 0xff)

/*
 * amd64-specific PCI variables and functions.
 * NOT TO BE USED DIRECTLY BY MACHINE INDEPENDENT CODE.
 */
extern bus_addr_t pci_mcfg_addr;
extern int pci_mcfg_min_bus, pci_mcfg_max_bus;

struct		pci_attach_args;

extern struct extent *pciio_ex;
extern struct extent *pcimem_ex;
extern struct extent *pcibus_ex;
void		pci_init_extents(void);

/*
 * Functions provided to machine-independent PCI code.
 */
void		pci_attach_hook(struct device *, struct device *,
		    struct pcibus_attach_args *);
int		pci_bus_maxdevs(pci_chipset_tag_t, int);
pcitag_t	pci_make_tag(pci_chipset_tag_t, int, int, int);
void		pci_decompose_tag(pci_chipset_tag_t, pcitag_t,
		    int *, int *, int *);
int		pci_conf_size(pci_chipset_tag_t, pcitag_t);
pcireg_t	pci_conf_read(pci_chipset_tag_t, pcitag_t, int);
void		pci_conf_write(pci_chipset_tag_t, pcitag_t, int,
		    pcireg_t);
int		pci_intr_map_msi(struct pci_attach_args *,
		    pci_intr_handle_t *);
int		pci_intr_map_msix(struct pci_attach_args *,
		    int, pci_intr_handle_t *);
int		pci_intr_map(struct pci_attach_args *, pci_intr_handle_t *);
const char	*pci_intr_string(pci_chipset_tag_t, pci_intr_handle_t);
void		*pci_intr_establish(pci_chipset_tag_t, pci_intr_handle_t,
		    int, int (*)(void *), void *, const char *);
void		pci_intr_disestablish(pci_chipset_tag_t, void *);
#define	pci_probe_device_hook(c, a)	(0)

void 		pci_dev_postattach(struct device *, struct pci_attach_args *);

pcireg_t	pci_min_powerstate(pci_chipset_tag_t, pcitag_t);
void		pci_set_powerstate_md(pci_chipset_tag_t, pcitag_t, int, int);

/*
 * ALL OF THE FOLLOWING ARE MACHINE-DEPENDENT, AND SHOULD NOT BE USED
 * BY PORTABLE CODE.
 */

/*
 * Section 6.2.4, `Miscellaneous Functions' of the PCI Specification,
 * says that 255 means `unknown' or `no connection' to the interrupt
 * controller on a PC.
 */
#define	X86_PCI_INTERRUPT_LINE_NO_CONNECTION	0xff

/*
 * PCI address space is shared with ISA, so avoid legacy ISA I/O
 * registers.
 */
#define PCI_IO_START	0x400
#define PCI_IO_END	0xffff

/*
 * Avoid the DOS Compatibility Memory area.
 */
#define PCI_MEM_START	0x100000
@


1.24
log
@Remove duplicated prototype.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.23 2015/07/17 22:42:09 kettenis Exp $	*/
d85 4
a88 1
int		pci_intr_map_msi(struct pci_attach_args *, pci_intr_handle_t *);
@


1.23
log
@Avoid assigning low addresses to PCI BARs.  Some machines don't claim these
memory addresses in their BIOS memory map making us believe they are
available.  However these addresses will never actually be routed to the
PCI bus and therefore guaranteed not to work.

ok krw@@, mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.22 2013/11/06 10:40:36 mpi Exp $	*/
a90 2
void		pci_decompose_tag(pci_chipset_tag_t, pcitag_t,
		    int *, int *, int *);
@


1.22
log
@Add support for Power Resources for Dx states and the necessary hook
for PCI devices.  This hook should be called twice, before and after
changing the power state of a PCI device.

Before setting the device to the new state, the ACPI layer will notify
every power resources linked to the device for that state and make sure
they are turned "_ON".  After changing the state of the device, it will
decrement the reference of every power resources linked to that device
for the old state and turn them "_OFF" if they are no longer referenced.

This fixes the no-USB after resume problem seen on various ThinkPad,
problem initialy diagnosed with Alexander Polakov.

ok kettenis@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.21 2012/09/19 23:23:50 kettenis Exp $	*/
d118 5
@


1.21
log
@Set up PCI bus number resource accounting for the main PCI bus hierarchy.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.20 2012/09/07 19:23:16 kettenis Exp $	*/
d98 1
@


1.20
log
@Implement pci_min_powerstate().
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.19 2011/10/10 19:42:36 miod Exp $	*/
d69 1
@


1.19
log
@Introduce pci_probe_device_hook(pci_chipset_tag_t, struct pci_attach_args *).
This mandatory function will get invoked in pci_probe_device(), and allows
a pci host driver to alter the pci_attach_args passed to a device when
attaching.

This function will also, if returning non-zero, cause the device to be
skipped completely during all the phases of the PCI device discovery
(i.e. ressource enumeration, ressource assignment, and actual attachment).
This particular feature is experimental and might be reverted in the future
(or the scope narrowed to device attachment only).

A dummy #define pci_probe_device_hook() 0 is added to all platforms except
sgi, where real functions (currently only returning 0) are added; real meat
will be added shortly.

Discussed at s2k11, no objection from the usual suspects.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.18 2011/05/21 15:58:27 kettenis Exp $	*/
d95 2
@


1.18
log
@First stab at suporting Message Signaled Interrupts on amd64.  Unfortunately
this code differs somewhat from the i386 code because the amd64 interrupt
subsystem is quite different.  Still disabled like on i386.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.17 2011/01/04 21:17:49 kettenis Exp $	*/
d92 1
@


1.17
log
@Add support for Memory Mapped Configuration space access.  This gives us
access to PCIe extended configuration space access on modern i386 and amd64
machines.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.16 2010/12/04 17:06:31 miod Exp $	*/
d84 1
@


1.16
log
@Introduce a new pci routine, pci_conf_size(), which returns the size of a
given pcitag_t configuration address space. Currently, all pci controllers
will return the usual 0x100 bytes of PCI configuration space, but this will
eventually change on PCIe-capable controlers.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.15 2010/06/29 22:08:28 jordan Exp $	*/
d62 3
@


1.15
log
@Add support for mapping ACPI to PCI devices
ok kettenis, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.14 2009/10/06 21:35:43 kettenis Exp $	*/
d77 1
@


1.14
log
@Allow MD limits for allocating PCI io and mem space and specify limits on
i386 and amd64 to make avoid legacy ISA I/O registers.  Fixes issues with
ThinkPad T-series Dock II units as reported by sobrado@@

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.13 2009/08/22 02:54:50 mk Exp $	*/
d87 2
@


1.13
log
@Constify the what/name parameter of pci_intr_establish().

Tested by myself, sthen, oga, kettenis, and jasper.
Input from sthen and jasper.

ok kettenis

(Manpage follows shortly.)
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.12 2009/07/20 23:40:41 miod Exp $	*/
d99 7
@


1.12
log
@Pass a pci_chipset_tag_t to pci_intr_line(), to eventually allow the
logic to be chipset dependent; no functional change yet.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.11 2009/04/21 19:18:09 kettenis Exp $	*/
d83 1
a83 1
		    int, int (*)(void *), void *, char *);
@


1.11
log
@Simplify PCI config space access code.  There is no way we're ever going to
see the ancient mode 2 on machines capable of running OpenBSD/amd64.

ok deraadt@@, toby@@, oga@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.10 2009/04/11 17:13:33 kettenis Exp $	*/
d56 1
a56 1
#define	pci_intr_line(ih)	((ih.line) & 0xff)
@


1.10
log
@Create extents for resource accounting on the root PCI bus and populate them
based on the BIOS memory map.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.9 2009/04/04 16:03:17 kettenis Exp $	*/
d39 1
a39 1
 * i386-specific PCI structure and type definitions.
a40 7
 *
 * Configuration tag; created from a {bus,device,function} triplet by
 * pci_make_tag(), and passed to pci_conf_read() and pci_conf_write().
 * We could instead always pass the {bus,device,function} triplet to
 * the read and write routines, but this would cause extra overhead.
 *
 * Mode 2 is historical and deprecated by the Revision 2.0 specification.
a41 8
union x86_pci_tag_u {
	u_int32_t mode1;
	struct {
		u_int16_t port;
		u_int8_t enable;
		u_int8_t forward;
	} mode2;
};
d49 1
a49 1
typedef union x86_pci_tag_u pcitag_t;
d59 1
a59 1
 * i386-specific PCI variables and functions.
a61 2
extern int pci_mode;
int		pci_mode_detect(void);
@


1.9
log
@Remove an unused function inherited from NetBSD that deals with a broken
SiS chipset that we'll never see on and amd64 machine.

ok oga@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.8 2008/12/06 19:59:38 tedu Exp $	*/
d80 4
@


1.8
log
@revert all changes related to the mpsafe intr handler.  i screwed up the commit
and even then it didn't work.  we have higher standards than this.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.7 2008/12/06 04:31:24 tedu Exp $	*/
a78 1
int		pci_bus_flags(void);
@


1.7
log
@mpsafe intr_establish that doesn't get biglock, so that we may dream of the day when this is useful.
mostly macro magic that does nothing.  only actually useful on amd64 for now, compliments of art.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.6 2008/12/03 15:46:06 oga Exp $	*/
d96 2
a97 7

void		*pci_intr_establish_flags(pci_chipset_tag_t, pci_intr_handle_t,
		    int, int (*)(void *), void *, char *, int);
#define		pci_intr_establish(t,h,l,f,a,w) \
	pci_intr_establish_flags(t,h,l,f,a,w,0)
#define		pci_intr_establish_mpsafe(t,h,l,f,a,w) \
	pci_intr_establish_flags(t,h,l,f,a,w,INTR_ESTABLISH_MPSAFE)
@


1.6
log
@Remove the x86 and i386 prefixes to the bus_dma types. It's really quite
pointless and just makes the code different for no reason. This moves i386 and
amd64 bus_dma to being a lot closer to identical.

suggestion to just remove the prefix instead of merge them from deraadt@@.

no objections art@@, kettenis@@, ok weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.5 2008/11/26 12:27:31 kettenis Exp $	*/
d96 7
a102 2
void		*pci_intr_establish(pci_chipset_tag_t, pci_intr_handle_t,
		    int, int (*)(void *), void *, char *);
@


1.5
log
@Change pci_intr_handle_t to be like i386 where it is a struct that stores the
tag and pin.  Reduces the differences between the two architectures and I need
it to fix acpiprt(4)-based interrupt routing.

ok toby@@, jordan@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.4 2005/10/05 21:48:34 tdeval Exp $	*/
d58 1
a58 1
extern struct x86_bus_dma_tag pci_bus_dma_tag;
@


1.4
log
@Add CardBus/PCMCIA support to AMD64.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.3 2005/09/04 19:19:40 brad Exp $	*/
a64 1
typedef int pci_intr_handle_t;
d66 6
a71 1
#define	pci_intr_line(ih)	((ih) & 0xff)
@


1.3
log
@remove unused NetBSD pci_intr_evcnt() function.

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.2 2004/12/07 02:29:40 brad Exp $	*/
d66 2
@


1.2
log
@remove old and unused NetBSD specific cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: pci_machdep.h,v 1.1 2004/01/28 01:39:39 mickey Exp $	*/
a89 1
const struct evcnt *pci_intr_evcnt(pci_chipset_tag_t, pci_intr_handle_t);
@


1.1
log
@an amd64 arch support.
hacked by art@@ from netbsd sources and then later debugged
by me into the shape where it can host itself.
no bootloader yet as needs redoing from the
recent advanced i386 sources (anyone? ;)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a95 3

#define	pci_enumerate_bus(sc, m, p)					\
	pci_enumerate_bus_generic((sc), (m), (p))
@

