head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.2
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.6
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.7.0.8
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.12
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.10
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.6
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.4
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.2
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.30
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.26
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.28
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.24
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.22
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.20
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.18
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.16
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.14
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.10
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.8
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.10
date	2016.09.04.09.22.28;	author mpi;	state Exp;
branches;
next	1.9;
commitid	jBolvsPoQ0BaYiLs;

1.9
date	2015.07.17.15.37.58;	author guenther;	state Exp;
branches;
next	1.8;
commitid	fZhyUgCUYQOMyZ4Z;

1.8
date	2015.05.18.19.59.27;	author guenther;	state Exp;
branches;
next	1.7;
commitid	MLFvGCnCMKMdmAtY;

1.7
date	2012.04.17.16.02.33;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.04.15.54.24;	author guenther;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.13.02.49.12;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2011.04.10.03.56.38;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.05.21.14.00;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.28.03.53.14;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.39.39;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Introduce Dynamic Profiling, a ddb(4) based & gprof compatible kernel
profiling framework.

Code patching is used to enable probes when entering functions.  The
probes will call a mcount()-like function to match the behavior of a
GPROF kernel.

Currently only available on amd64 and guarded under DDBPROF.  Support
for other archs will follow soon.

A new sysctl knob, ddb.console, need to be set to 1 in securelevel 0
to be able to use this feature.

Inputs and ok guenther@@
@
text
@/*	$OpenBSD: frameasm.h,v 1.9 2015/07/17 15:37:58 guenther Exp $	*/
/*	$NetBSD: frameasm.h,v 1.1 2003/04/26 18:39:40 fvdl Exp $	*/

#ifndef _AMD64_MACHINE_FRAMEASM_H
#define _AMD64_MACHINE_FRAMEASM_H

/*
 * Macros to define pushing/popping frames for interrupts, traps
 * and system calls. Currently all the same; will diverge later.
 */

/*
 * These are used on interrupt or trap entry or exit.
 */
#define INTR_SAVE_GPRS \
	subq	$120,%rsp	; \
	movq	%r15,TF_R15(%rsp)	; \
	movq	%r14,TF_R14(%rsp)	; \
	movq	%r13,TF_R13(%rsp)	; \
	movq	%r12,TF_R12(%rsp)	; \
	movq	%r11,TF_R11(%rsp)	; \
	movq	%r10,TF_R10(%rsp)	; \
	movq	%r9,TF_R9(%rsp)		; \
	movq	%r8,TF_R8(%rsp)		; \
	movq	%rdi,TF_RDI(%rsp)	; \
	movq	%rsi,TF_RSI(%rsp)	; \
	movq	%rbp,TF_RBP(%rsp)	; \
	movq	%rbx,TF_RBX(%rsp)	; \
	movq	%rdx,TF_RDX(%rsp)	; \
	movq	%rcx,TF_RCX(%rsp)	; \
	movq	%rax,TF_RAX(%rsp)

#define	INTRENTRY \
	subq	$32,%rsp		; \
	testq	$SEL_RPL,56(%rsp)	; \
	je	98f			; \
	swapgs				; \
98: 	INTR_SAVE_GPRS

#define INTRFASTEXIT \
	jmp	intr_fast_exit

#define INTR_RECURSE_HWFRAME \
	movq	%rsp,%r10		; \
	movl	%ss,%r11d		; \
	pushq	%r11			; \
	pushq	%r10			; \
	pushfq				; \
	movl	%cs,%r11d		; \
	pushq	%r11			; \
	pushq	%r13			;

/*
 * Restore FS.base if it's not already in the CPU, and do the cli/swapgs.
 * Uses %rax, %rcx, and %rdx
 */
#define INTR_RESTORE_SELECTORS						\
	btsl	$CPUF_USERSEGS_BIT, CPUVAR(FLAGS)			; \
	jc	99f							; \
	movq	CPUVAR(CURPCB),%rdx	/* for below */			; \
	movq	PCB_FSBASE(%rdx),%rax					; \
	cmpq	$0,%rax							; \
	je	99f		/* setting %fs has zeroed FS.base */	; \
	movq	%rax,%rdx						; \
	shrq	$32,%rdx						; \
	movl	$MSR_FSBASE,%ecx					; \
	wrmsr								; \
99:	movw    $(GSEL(GUDATA_SEL, SEL_UPL)),%ax			; \
	cli								; \
	swapgs								; \
	movw	%ax,%gs

#define	INTR_FAKE_TRAP	0xbadabada

#define CHECK_ASTPENDING(reg)	movq	CPUVAR(CURPROC),reg		; \
				cmpq	$0, reg				; \
				je	99f				; \
				cmpl	$0, P_MD_ASTPENDING(reg)	; \
				99:

#define CLEAR_ASTPENDING(reg)	movl	$0, P_MD_ASTPENDING(reg)

#endif /* _AMD64_MACHINE_FRAMEASM_H */
@


1.9
log
@Consistently use SEL_RPL as the mask when testing selector privilege level
@
text
@d1 1
a1 1
/*	$OpenBSD: frameasm.h,v 1.8 2015/05/18 19:59:27 guenther Exp $	*/
d73 1
@


1.8
log
@Do lazy update/reset of the FS.base and %[def]s segment registers: reseting
segment registers in cpu_switchto if the old thread had made it to userspace
and restoring FS.base only on first return to userspace since context switch.

ok mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: frameasm.h,v 1.7 2012/04/17 16:02:33 guenther Exp $	*/
d35 1
a35 1
	testq	$SEL_UPL,56(%rsp)	; \
@


1.7
log
@Don't try to cache the CPU's FS.base, as userland can make it a lie by
setting %fs, resulting in it not getting restored properly later

ok mikeb@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: frameasm.h,v 1.6 2011/07/04 15:54:24 guenther Exp $	*/
a37 4
	movw	%gs,0(%rsp)		; \
	movw	%fs,8(%rsp)		; \
	movw	%es,16(%rsp)		; \
	movw	%ds,24(%rsp)		; \
d54 2
a55 2
 * Restore %ds, %es, %fs, and %gs, dealing with the FS.base MSR for
 * %fs and doing the cli/swapgs for %gs.  Uses %rax, %rcx, and %rdx
d58 2
a60 6
	/* %es and %ds */						  \
	movw	TF_ES(%rsp),%es						; \
	movw	$(GSEL(GUDATA_SEL, SEL_UPL)),%ax			; \
	movw	%ax,%ds							; \
	/* Make sure both %fs and FS.base are the desired values */	  \
	movw	TF_FS(%rsp),%fs						; \
d68 2
a69 1
99:	cli		/* %fs done, so swapgs and do %gs */		; \
d71 1
a71 1
	movw	TF_GS(%rsp),%gs
@


1.6
log
@Force the sigreturn syscall to return to userspace via iretq by setting
the MDP_IRET flag in md_proc, then switch sigcode to enter the kernel
via syscall instead of int$80.  Rearrange the return paths in both the
sysretq and iretq paths to reduce how long interrupts are blocked and
shave instructions.

ok kettenis@@, extra testing krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: frameasm.h,v 1.5 2011/04/13 02:49:12 guenther Exp $	*/
d68 1
d71 1
a71 9
	jne	96f							; \
	movw	TF_FS(%rsp),%fs	/* zero FS.base by setting %fs */	; \
	jmp	98f							; \
96:	cmpq	CPUVAR(CUR_FSBASE),%rax					; \
	jne	97f							; \
	movw	%fs,%cx		/* FS.base same, how about %fs? */	; \
	cmpw	TF_FS(%rsp),%cx						; \
	je	99f							; \
97:	movw	TF_FS(%rsp),%fs		/* set them both */		; \
a75 1
98:	movq	%rax,CPUVAR(CUR_FSBASE)					; \
@


1.5
log
@Unrevert the FS.base diff: the issues were actually elsewhere
Additional testing by jasper@@ and pea@@
@
text
@d1 1
a1 1
/*	$OpenBSD: frameasm.h,v 1.4 2011/04/10 03:56:38 guenther Exp $	*/
a31 18

#define	INTR_RESTORE_GPRS \
	movq	TF_R15(%rsp),%r15	; \
	movq	TF_R14(%rsp),%r14	; \
	movq	TF_R13(%rsp),%r13	; \
	movq	TF_R12(%rsp),%r12	; \
	movq	TF_R11(%rsp),%r11	; \
	movq	TF_R10(%rsp),%r10	; \
	movq	TF_R9(%rsp),%r9		; \
	movq	TF_R8(%rsp),%r8		; \
	movq	TF_RDI(%rsp),%rdi	; \
	movq	TF_RSI(%rsp),%rsi	; \
	movq	TF_RBP(%rsp),%rbp	; \
	movq	TF_RBX(%rsp),%rbx	; \
	movq	TF_RDX(%rsp),%rdx	; \
	movq	TF_RCX(%rsp),%rcx	; \
	movq	TF_RAX(%rsp),%rax	; \
	addq	$120,%rsp
@


1.4
log
@Revert bulk of the FS.base diff, as it causes issues on some machines
and the problem isn't obvious yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: frameasm.h,v 1.3 2011/04/05 21:14:00 guenther Exp $	*/
d74 31
@


1.3
log
@Add support for per-rthread base-offset for the %fs selector on amd64.
Add pcb_fsbase to the PCB for tracking what the value for the thread
is, and ci_cur_fsbase to struct cpu_info for tracking the CPU's current
value for FS.base, then on return to user-space, skip the setting if the
CPU has the right value already.  Non-threaded processes without TLS leave
FS.base zero, which can be conveniently optimized: setting %fs zeros
FS.base for fewer cycles than wrmsr.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: frameasm.h,v 1.2 2010/09/28 03:53:14 guenther Exp $	*/
a73 31

/*
 * Restore %ds, %es, %fs, and %gs, dealing with the FS.base MSR for
 * %fs and doing the cli/swapgs for %gs.  Uses %rax, %rcx, and %rdx
 */
#define INTR_RESTORE_SELECTORS						\
	movq	CPUVAR(CURPCB),%rdx	/* for below */			; \
	/* %es and %ds */						  \
	movw	TF_ES(%rsp),%es						; \
	movw	$(GSEL(GUDATA_SEL, SEL_UPL)),%ax			; \
	movw	%ax,%ds							; \
	/* Make sure both %fs and FS.base are the desired values */	  \
	movq	PCB_FSBASE(%rdx),%rax					; \
	cmpq	$0,%rax							; \
	jne	96f							; \
	movw	TF_FS(%rsp),%fs	/* zero FS.base by setting %fs */	; \
	jmp	98f							; \
96:	cmpq	CPUVAR(CUR_FSBASE),%rax					; \
	jne	97f							; \
	movw	%fs,%cx		/* FS.base same, how about %fs? */	; \
	cmpw	TF_FS(%rsp),%cx						; \
	je	99f							; \
97:	movw	TF_FS(%rsp),%fs		/* set them both */		; \
	movq	%rax,%rdx						; \
	shrq	$32,%rdx						; \
	movl	$MSR_FSBASE,%ecx					; \
	wrmsr								; \
98:	movq	%rax,CPUVAR(CUR_FSBASE)					; \
99:	cli		/* %fs done, so swapgs and do %gs */		; \
	swapgs								; \
	movw	TF_GS(%rsp),%gs
@


1.2
log
@Correct the handling of GS.base when iretq faults: the fault happens
with CPL == 0 but the user's GS.base, so the normal INTRENTRY handling
won't work.  Contrawise, the asm that trap() redirects us to when that
happens (resume_iret) sees a trapframe showing CPL==3 but it's run with
the kernel's GS.base, so INTRENTRY won't work there either.

asm style fixes drahn@@ and mikeb@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: frameasm.h,v 1.1 2004/01/28 01:39:39 mickey Exp $	*/
d74 31
@


1.1
log
@an amd64 arch support.
hacked by art@@ from netbsd sources and then later debugged
by me into the shape where it can host itself.
no bootloader yet as needs redoing from the
recent advanced i386 sources (anyone? ;)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 1
a63 11
	INTR_RESTORE_GPRS 		; \
	testq	$SEL_UPL,56(%rsp)	; \
	je	99f			; \
	cli				; \
	swapgs				; \
	movw	0(%rsp),%gs		; \
	movw	8(%rsp),%fs		; \
	movw	16(%rsp),%es		; \
	movw	24(%rsp),%ds		; \
99:	addq	$48,%rsp		; \
	iretq
@

