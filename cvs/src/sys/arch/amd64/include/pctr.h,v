head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.14
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.6
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.8
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.14
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.10
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2014.03.29.18.09.28;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.24.17.56.57;	author mikeb;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.17.02.30.26;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2007.09.12.18.18.27;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@/*	$OpenBSD: pctr.h,v 1.4 2011/03/23 16:54:34 pirofti Exp $	*/

/*
 * Pentium performance counter driver for OpenBSD.
 * Copyright 1996 David Mazieres <dm@@lcs.mit.edu>.
 *
 * Modification and redistribution in source and binary forms is
 * permitted provided that due credit is given to the author and the
 * OpenBSD project by leaving this copyright notice intact.
 */

#ifndef _MACHINE_PCTR_H_
#define _MACHINE_PCTR_H_

#include <sys/ioccom.h>

typedef u_int64_t	pctrval;

#define PCTR_NUM	4

struct pctrst {
	u_int pctr_fn[PCTR_NUM];	/* Current settings of counters */
	pctrval pctr_tsc;		/* Free-running 64-bit cycle counter */
	pctrval	pctr_hwc[PCTR_NUM];	/* Values of the hardware counters */
};

/* Bit values in fn fields and PIOCS ioctl's */
#define PCTR_U		0x010000	/* Monitor user-level events */
#define PCTR_K		0x020000	/* Monitor kernel-level events */
#define PCTR_E		0x040000	/* Edge detect */
#define PCTR_EN		0x400000	/* Enable counters (counter 0 only) */
#define PCTR_I		0x800000	/* Invert counter mask */

/* Unit Mask values to distinguish cache coherent states */
#define PCTR_UM_M	0x0800		/* Modified cache lines */
#define PCTR_UM_E	0x0400		/* Exclusive cache lines */
#define PCTR_UM_S	0x0200		/* Shared cache lines */
#define PCTR_UM_I	0x0100		/* Invalid cache lines */
#define PCTR_UM_MESI	(PCTR_UM_M|PCTR_UM_E|PCTR_UM_S|PCTR_UM_I)
#define PCTR_UM_A	0x2000		/* Any initiator */

#define PCTR_UM_SHIFT	8		/* Left shift for unit mask */
#define PCTR_CM_SHIFT	24		/* Left shift for counter mask */

/* ioctl to set which counter a device tracks */
#define PCIOCRD	_IOR('c', 1,  struct pctrst)	/* Read counter value */
#define PCIOCS0	_IOW('c', 8,  unsigned int)	/* Set counter 0 function */
#define PCIOCS1 _IOW('c', 9,  unsigned int)	/* Set counter 1 function */
#define PCIOCS2 _IOW('c', 10, unsigned int)	/* Set counter 2 function */
#define PCIOCS3 _IOW('c', 11, unsigned int)	/* Set counter 3 function */

#define _PATH_PCTR	"/dev/pctr"

#define rdtsc()							\
({								\
	u_int32_t hi, lo;					\
	__asm volatile("rdtsc" : "=d" (hi), "=a" (lo));		\
	((u_int64_t)hi << 32) | (u_int64_t)lo;			\
})

#define rdpmc(pmc)						\
({								\
	u_int32_t hi, lo;					\
	__asm volatile("rdpmc"					\
	    : "=d" (hi), "=a" (lo) : "c" (pmc));		\
	hi &= 0xffffff;						\
	(((u_int64_t)hi << 32) | (u_int64_t)lo);		\
})

#ifdef _KERNEL

#define rdmsr(msr)						\
({								\
	u_int32_t hi, lo;					\
	__asm volatile("rdmsr"					\
	     : "=d" (hi), "=a" (lo) : "c" (msr));		\
	((u_int64_t)hi << 32) | (u_int64_t) lo;			\
})

#define wrmsr(msr, v)						\
({								\
	__asm volatile("wrmsr" :				\
	    : "a" ((u_int64_t)v & 0xffffffff),			\
	      "d" ((u_int64_t)v >> 32), "c" (msr));		\
})

void	pctrattach(int);
int	pctropen(dev_t, int, int, struct proc *);
int	pctrclose(dev_t, int, int, struct proc *);
int	pctrioctl(dev_t, u_long, caddr_t, int, struct proc *);

#endif /* _KERNEL */
#endif /* ! _MACHINE_PCTR_H_ */
@


1.4
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: pctr.h,v 1.3 2007/10/24 17:56:57 mikeb Exp $	*/
d57 1
a57 1
	__asm __volatile("rdtsc" : "=d" (hi), "=a" (lo));	\
d64 1
a64 1
	__asm __volatile("rdpmc"				\
d75 1
a75 1
	__asm __volatile("rdmsr"				\
d82 1
a82 1
	__asm __volatile("wrmsr" :				\
@


1.3
log
@Remove idle loop counter.

ok art deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: pctr.h,v 1.2 2007/10/17 02:30:26 deraadt Exp $	*/
d12 2
a13 2
#ifndef _AMD64_PCTR_H_
#define _AMD64_PCTR_H_
d93 1
a93 1
#endif /* ! _AMD64_PCTR_H_ */
@


1.2
log
@replacement for the pctr codebase that can handle amd64 processors as
well (in fact, all 4 combinations of codebase and processor) written by
Mike Belopuhov and Aleksey Lomovtsev
@
text
@d1 1
a1 1
/*	$OpenBSD: pctr.h,v 1.1 2007/09/12 18:18:27 deraadt Exp $	*/
a24 1
	pctrval pctr_idl;		/* Iterations of the idle loop */
@


1.1
log
@port of i386 pctr code to amd64; Mike Belopuhov
@
text
@d1 1
a1 17
/*	$OpenBSD$	*/

/*
 * Copyright (c) 2007 Mike Belopuhov
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
d17 2
a19 2
#define PCTR_AMD_NUM	PCTR_NUM
#define PCTR_INTEL_NUM	2		/* Intel supports only 2 counters */
d22 4
a25 4
	u_int64_t pctr_hwc[PCTR_NUM];	/* Values of the hardware counters */
	u_int64_t pctr_tsc;		/* Free-running 64-bit cycle counter */
	u_int64_t pctr_idl;		/* Iterations of the idle loop */
	u_int32_t pctr_fn[PCTR_NUM];	/* Current settings of counters */
d35 10
a44 8
/* Unit Mask bits */
#define PCTR_UM_M	0x10		/* Modified cache lines */
#define PCTR_UM_O	0x08		/* Owned cache lines */
#define PCTR_UM_E	0x04		/* Exclusive cache lines */
#define PCTR_UM_S	0x02		/* Shared cache lines */
#define PCTR_UM_I	0x01		/* Invalid cache lines */
#define PCTR_UM_MESI	(PCTR_UM_O|PCTR_UM_E|PCTR_UM_S|PCTR_UM_I)
#define PCTR_UM_MOESI	(PCTR_UM_M|PCTR_UM_O|PCTR_UM_E|PCTR_UM_S|PCTR_UM_I)
d46 1
a46 1
/* ioctl to set which counter a device tracks. */
d55 16
d73 15
d91 1
a91 2
int	pctrioctl(dev_t, u_int64_t, caddr_t, int, struct proc *);
int	pctrsel(int fflag, u_int32_t, u_int32_t);
@

