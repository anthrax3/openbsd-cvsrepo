head	1.15;
access;
symbols
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.10.0.14
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.12
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.4
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.15
date	2016.09.04.09.22.28;	author mpi;	state Exp;
branches;
next	1.14;
commitid	jBolvsPoQ0BaYiLs;

1.14
date	2016.04.27.11.10.48;	author mpi;	state Exp;
branches;
next	1.13;
commitid	57btDderNGPG4fjG;

1.13
date	2016.02.27.13.08.06;	author mpi;	state Exp;
branches;
next	1.12;
commitid	hnv9KfQtxhCytAnd;

1.12
date	2014.03.16.20.31.45;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2014.03.16.07.48.00;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.9;

1.9
date	2010.11.27.19.57.23;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2008.02.11.20.44.09;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.19.18.11.18;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.15.15.50.41;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.13.17.51.53;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.10.21.20.52;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.22.11.15.00;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.25.17.27.01;	author andreas;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.39.39;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Introduce Dynamic Profiling, a ddb(4) based & gprof compatible kernel
profiling framework.

Code patching is used to enable probes when entering functions.  The
probes will call a mcount()-like function to match the behavior of a
GPROF kernel.

Currently only available on amd64 and guarded under DDBPROF.  Support
for other archs will follow soon.

A new sysctl knob, ddb.console, need to be set to 1 in securelevel 0
to be able to use this feature.

Inputs and ok guenther@@
@
text
@/*	$OpenBSD: db_machdep.h,v 1.14 2016/04/27 11:10:48 mpi Exp $	*/
/*	$NetBSD: db_machdep.h,v 1.2 2003/04/29 17:06:04 scw Exp $	*/

/* 
 * Mach Operating System
 * Copyright (c) 1991,1990 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

#ifndef	_MACHINE_DB_MACHDEP_H_
#define	_MACHINE_DB_MACHDEP_H_

/*
 * Machine-dependent defines for new kernel debugger.
 */

#include <sys/param.h>
#include <uvm/uvm_extern.h>
#include <machine/trap.h>
#include <sys/mutex.h>

typedef	vaddr_t		db_addr_t;	/* address - unsigned */
typedef	long		db_expr_t;	/* expression - signed */

typedef struct trapframe db_regs_t;

extern db_regs_t ddb_regs;	/* register state */

#define	PC_REGS(regs)	((db_addr_t)(regs)->tf_rip)
#define	SET_PC_REGS(regs, value) (regs)->tf_rip = (int64_t)(value)

#define	BKPT_ADDR(addr)	(addr)		/* breakpoint address */
#define	BKPT_INST	0xcc		/* breakpoint instruction */
#define	BKPT_SIZE	(1)		/* size of breakpoint inst */
#define	BKPT_SET(inst)	(BKPT_INST)

#define	SSF_INST	0x55
#define	SSF_SIZE	(1)

#define	FIXUP_PC_AFTER_BREAK(regs)	((regs)->tf_rip -= BKPT_SIZE)

#define	db_clear_single_step(regs)	((regs)->tf_rflags &= ~PSL_T)
#define	db_set_single_step(regs)	((regs)->tf_rflags |=  PSL_T)

#define	IS_BREAKPOINT_TRAP(type, code)	((type) == T_BPTFLT)
#define IS_WATCHPOINT_TRAP(type, code)	((type) == T_TRCTRAP && (code) & 15)

#define	I_CALL		0xe8
#define	I_CALLI		0xff
#define	I_RET		0xc3
#define	I_IRET		0xcf

#define	inst_trap_return(ins)	(((ins)&0xff) == I_IRET)
#define	inst_return(ins)	(((ins)&0xff) == I_RET)
#define	inst_call(ins)		(((ins)&0xff) == I_CALL || \
				 (((ins)&0xff) == I_CALLI && \
				  ((ins)&0x3800) == 0x1000))

/*
 * Constants for KGDB.
 */
typedef	long		kgdb_reg_t;
#define	KGDB_NUMREGS	20
#define	KGDB_BUFLEN	512

#define KGDB_ENTER	breakpoint()

/* macro for checking if a thread has used floating-point */

int db_ktrap(int, int, db_regs_t *);

void db_machine_init(void);
int db_enter_ddb(void);
void db_startcpu(int);
void db_stopcpu(int);
void x86_ipi_db(struct cpu_info *);

extern struct mutex ddb_mp_mutex;

#define DDB_STATE_NOT_RUNNING	0
#define DDB_STATE_RUNNING	1
#define DDB_STATE_EXITING	2

/*
 * We define some of our own commands
 */
#define DB_MACHINE_COMMANDS

extern void db_machine_init(void);

extern void cpu_debug_dump(void);

#endif	/* _MACHINE_DB_MACHDEP_H_ */
@


1.14
log
@G/C DDB_REGS.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.13 2016/02/27 13:08:06 mpi Exp $	*/
d56 3
@


1.13
log
@Rename kdb_trap() into db_ktrap().

The goal is to include it in the list of functions that must not be
instrumented.  All ddb(8) functions should be in this list and have
their names start with 'db_'.

ok visa@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.12 2014/03/16 20:31:45 guenther Exp $	*/
a47 1
#define	DDB_REGS	(&ddb_regs)
@


1.12
log
@DDB supports ELF symbols are all archs, and it's always the same as the
native size, so eliminate the #defines.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.11 2014/03/16 07:48:00 guenther Exp $	*/
d88 1
a88 1
int kdb_trap(int, int, db_regs_t *);
@


1.11
log
@Kill DB_*TASK_NAME* macros which were only ever on i386/amd64 and never used.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.10 2011/03/23 16:54:34 pirofti Exp $	*/
a105 3

#define	DB_ELF_SYMBOLS
#define	DB_ELFSIZE	64
@


1.10
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.9 2010/11/27 19:57:23 miod Exp $	*/
a76 7
/* macros for printing OS server dependent task name */

#define DB_TASK_NAME(task)	db_task_name(task)
#define DB_TASK_NAME_TITLE	"COMMAND                "
#define DB_TASK_NAME_LEN	23
#define DB_NULL_TASK_NAME	"?                      "

a84 4

#if 0
void		db_task_name(/* task_t */);
#endif
@


1.9
log
@Remove ddb single-step load and store counters. Most platforms do not
implement them, and they are of questionable usefulness.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.8 2008/02/11 20:44:09 miod Exp $	*/
d30 2
a31 2
#ifndef	_I386_DB_MACHDEP_H_
#define	_I386_DB_MACHDEP_H_
d125 1
a125 1
#endif	/* _I386_DB_MACHDEP_H_ */
@


1.8
log
@g/c db_thread_fp_used()
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.7 2007/10/19 18:11:18 fgsch Exp $	*/
a75 2
#define inst_load(ins)		0
#define inst_store(ins)		0
@


1.7
log
@remove vars from some prototypes.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.6 2006/03/15 15:50:41 mickey Exp $	*/
a99 2

#define db_thread_fp_used(thread)	((thread)->pcb->ims.ifps != 0)
@


1.6
log
@remove dead macros
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.5 2005/11/13 17:51:53 fgsch Exp $	*/
d107 2
a108 2
void db_startcpu(int cpu);
void db_stopcpu(int cpu);
@


1.5
log
@untested kgdb support for amd64. prolly needs more work when
getting and setting the registers, but it's a start. kettenis@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.4 2005/01/10 21:20:52 espie Exp $	*/
a77 19

/* access capability and access macros */

#define DB_ACCESS_LEVEL		2	/* access any space */
#define DB_CHECK_ACCESS(addr,size,task)				\
	db_check_access(addr,size,task)
#define DB_PHYS_EQ(task1,addr1,task2,addr2)			\
	db_phys_eq(task1,addr1,task2,addr2)
#define DB_VALID_KERN_ADDR(addr)				\
	((addr) >= VM_MIN_KERNEL_ADDRESS && 			\
	 (addr) < VM_MAX_KERNEL_ADDRESS)
#define DB_VALID_ADDRESS(addr,user)				\
	((!(user) && DB_VALID_KERN_ADDR(addr)) ||		\
	 ((user) && (addr) < VM_MAX_ADDRESS))

#if 0
boolean_t 	db_check_access(vaddr_t, int, task_t);
boolean_t	db_phys_eq(task_t, vaddr_t, task_t, vaddr_t);
#endif
@


1.4
log
@proper SET_PC_REGS,
okay kettenis@@,
something-vaguely-looking-like-an-okay mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.3 2004/07/22 11:15:00 art Exp $	*/
d109 1
a109 1
#define	KGDB_NUMREGS	16
d111 2
@


1.3
log
@mutex instead of SIMPLELOCK for mp ddb.

"reads good" niklas@@
"looks good" andreas@@
"works" tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.2 2004/06/25 17:27:01 andreas Exp $	*/
a49 3
#if defined(lint)
#define	PC_REGS(regs)	((regs)->tf_rip)
#else
d51 1
a51 1
#endif
@


1.2
log
@'machine cpuinfo' and 'machine ddbcpu' in ddb for amd64
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.1 2004/01/28 01:39:39 mickey Exp $	*/
d40 1
d131 1
a131 1
extern struct SIMPLELOCK ddb_mp_slock;
@


1.1
log
@an amd64 arch support.
hacked by art@@ from netbsd sources and then later debugged
by me into the shape where it can host itself.
no bootloader yet as needs redoing from the
recent advanced i386 sources (anyone? ;)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
#ifndef MULTIPROCESSOR
a47 5
#else
extern db_regs_t *ddb_regp;
#define DDB_REGS	(ddb_regp)
#define ddb_regs	(*ddb_regp)
#endif
d123 12
@

