head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.4
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.3.0.14
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.10
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.6
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.28
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.24
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.22
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.20
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.18
	OPENBSD_5_0:1.2.0.16
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.14
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.12
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.10
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2017.04.20.13.20.17;	author visa;	state Exp;
branches;
next	1.3;
commitid	sZ4zTrZbj3VK0Rkg;

1.3
date	2014.03.14.02.08.57;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.26.23.50.03;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.26.17.15.29;	author art;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Hook up mplock to witness(4) on amd64 and i386.
@
text
@/*	$OpenBSD: mplock.h,v 1.3 2014/03/14 02:08:57 dlg Exp $	*/

/*
 * Copyright (c) 2004 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_MPLOCK_H_
#define _MACHINE_MPLOCK_H_

#include <sys/_lock.h>

struct __mp_lock_cpu {
	u_int			mplc_ticket;
	u_int			mplc_depth;
};

struct __mp_lock {
	struct __mp_lock_cpu	mpl_cpus[MAXCPUS];
	volatile u_int		mpl_ticket;
	u_int			mpl_users;
#ifdef WITNESS
	struct lock_object	mpl_lock_obj;
#endif
};

#ifndef _LOCORE

void ___mp_lock_init(struct __mp_lock *);
void ___mp_lock(struct __mp_lock * LOCK_FL_VARS);
void ___mp_unlock(struct __mp_lock * LOCK_FL_VARS);
int ___mp_release_all(struct __mp_lock * LOCK_FL_VARS);
int ___mp_release_all_but_one(struct __mp_lock * LOCK_FL_VARS);
void ___mp_acquire_count(struct __mp_lock *, int LOCK_FL_VARS);
int __mp_lock_held(struct __mp_lock *);

#ifdef WITNESS

void _mp_lock_init(struct __mp_lock *, struct lock_type *);

#define __mp_lock_init(mpl) do {					\
	static struct lock_type __lock_type = { .lt_name = #mpl };	\
	_mp_lock_init((mpl), &__lock_type);				\
} while (0)

#else /* WITNESS */

#define __mp_lock_init		___mp_lock_init

#endif /* WITNESS */

#define __mp_lock(mpl)		___mp_lock((mpl) LOCK_FILE_LINE)
#define __mp_unlock(mpl)	___mp_unlock((mpl) LOCK_FILE_LINE)

#define __mp_release_all(mpl) \
	___mp_release_all((mpl) LOCK_FILE_LINE)
#define __mp_release_all_but_one(mpl) \
	___mp_release_all_but_one((mpl) LOCK_FILE_LINE)
#define __mp_acquire_count(mpl, count) \
	___mp_acquire_count((mpl), (count) LOCK_FILE_LINE)

#endif

#endif /* !_MACHINE_MPLOCK_H */
@


1.3
log
@rework mplocks to use tickets instead of spinning. this provides
fairer access to the kernel lock between logical cpus, especially
in multi socket systems.

i first wrote this diff in 2011. it provided the model for the i386
and sparc64 ticket locks.

ok n2k14 for post 5.5 (deraadt@@ and kettenis@@ in particular)
@
text
@d1 1
a1 1
/*	$OpenBSD: mplock.h,v 1.2 2007/11/26 23:50:03 art Exp $	*/
d30 2
d41 3
d48 6
a53 6
void __mp_lock_init(struct __mp_lock *);
void __mp_lock(struct __mp_lock *);
void __mp_unlock(struct __mp_lock *);
int __mp_release_all(struct __mp_lock *);
int __mp_release_all_but_one(struct __mp_lock *);
void __mp_acquire_count(struct __mp_lock *, int);
d55 25
@


1.2
log
@Like i386 - make the __mp_lock not spin at splhigh.

deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mplock.h,v 1.1 2007/11/26 17:15:29 art Exp $	*/
d30 5
d36 3
a38 2
	volatile struct cpu_info *mpl_cpu;
	volatile long	mpl_count;
@


1.1
log
@Move the implementation of __mp_lock (biglock) into machine dependent
code. At this moment all architectures get the copy of the old code
except i386 which gets a new shiny implementation that doesn't spin
at splhigh (doh!) and doesn't try to grab the biglock when releasing
the biglock (double doh!).

Shaves 10% of system time during kernel compile and might solve a few
bugs as a bonus.

Other architectures coming shortly.

miod@@ deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mplock.h,v 1.8 2005/06/17 22:33:34 niklas Exp $	*/
a29 5
/*
 * Really simple spinlock implementation with recursive capabilities.
 * Correctness is paramount, no fancyness allowed.
 */

d31 2
a32 3
	__cpu_simple_lock_t mpl_lock;
	cpuid_t	mpl_cpu;
	int	mpl_count;
d35 1
a35 16
static __inline void
__mp_lock_init(struct __mp_lock *lock)
{
	__cpu_simple_lock_init(&lock->mpl_lock);
	lock->mpl_cpu = LK_NOCPU;
	lock->mpl_count = 0;
}

#if defined(MP_LOCKDEBUG)
#ifndef DDB
#error "MP_LOCKDEBUG requires DDB"
#endif

extern void Debugger(void);
extern int db_printf(const char *, ...)
    __attribute__((__format__(__kprintf__,1,2)));
d37 7
a43 3
/* CPU-dependent timing, needs this to be settable from ddb. */
extern int __mp_lock_spinout;
#endif
a44 26
static __inline void
__mp_lock(struct __mp_lock *lock)
{
	int s = spllock();

	if (lock->mpl_cpu != cpu_number()) {
#ifndef MP_LOCKDEBUG
		__cpu_simple_lock(&lock->mpl_lock);
#else
		{
			int got_it;
			do {
				int ticks = __mp_lock_spinout;

				do {
					got_it = __cpu_simple_lock_try(
					    &lock->mpl_lock);
				} while (!got_it && ticks-- > 0);
				if (!got_it) {
 					db_printf(
					    "__mp_lock(0x%x): lock spun out",
					    lock);
					Debugger();
				}
			} while (!got_it);
		}
a45 101
		lock->mpl_cpu = cpu_number();
	}
	lock->mpl_count++;
	splx(s);
}

/*
 * Try to acquire the lock, if another cpu has it, fill it in the
 * call-by-reference cpu parameter.  Return true if acquired.
 */
static __inline int
__mp_lock_try(struct __mp_lock *lock, cpuid_t *cpu)
{
	int s = spllock();

	if (lock->mpl_cpu != cpu_number()) {
		if (!__cpu_simple_lock_try(&lock->mpl_lock)) {
			*cpu = lock->mpl_cpu;
			splx(s);
			return 0;
		}
		lock->mpl_cpu = cpu_number();
	}
	lock->mpl_count++;
	splx(s);
	return 1;
}

static __inline void
__mp_unlock(struct __mp_lock *lock)
{
	int s = spllock();

#ifdef MP_LOCKDEBUG
	if (lock->mpl_count == 0 || lock->mpl_cpu == LK_NOCPU) {
		db_printf("__mp_unlock(0x%x): releasing not locked lock\n",
		    lock);
		Debugger();
	}
#endif

	if (--lock->mpl_count == 0) {
		lock->mpl_cpu = LK_NOCPU;
		__cpu_simple_unlock(&lock->mpl_lock);
	}
	splx(s);
}

static __inline int
__mp_release_all(struct __mp_lock *lock) {
	int s = spllock();
	int rv = lock->mpl_count;

#ifdef MP_LOCKDEBUG
	if (lock->mpl_count == 0 || lock->mpl_cpu == LK_NOCPU) {
		db_printf(
		    "__mp_release_all(0x%x): releasing not locked lock\n",
		    lock);
		Debugger();
	}
#endif

	lock->mpl_cpu = LK_NOCPU;
	lock->mpl_count = 0;
	__cpu_simple_unlock(&lock->mpl_lock);
	splx(s);
	return (rv);
}

static __inline int
__mp_release_all_but_one(struct __mp_lock *lock) {
	int s = spllock();
	int rv = lock->mpl_count - 1;

#ifdef MP_LOCKDEBUG
	if (lock->mpl_count == 0 || lock->mpl_cpu == LK_NOCPU) {
		db_printf(
		    "__mp_release_all_but_one(0x%x): releasing not locked lock\n",
		    lock);
		Debugger();
	}
#endif

	lock->mpl_count = 1;
	splx(s);
	return (rv);
}

static __inline void
__mp_acquire_count(struct __mp_lock *lock, int count) {
	int s = spllock();

	while (count--)
		__mp_lock(lock);
	splx(s);
}

static __inline int
__mp_lock_held(struct __mp_lock *lock) {
	return lock->mpl_count && lock->mpl_cpu == cpu_number();
}
@

