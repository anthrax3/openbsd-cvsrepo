head	1.13;
access;
symbols
	OPENBSD_6_1:1.11.0.6
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.10
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.1.0.12
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.8
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.6
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2017.05.29.14.19.49;	author mpi;	state Exp;
branches;
next	1.12;
commitid	4u6PWvBw90PH7UDq;

1.12
date	2017.05.25.03.50.10;	author visa;	state Exp;
branches;
next	1.11;
commitid	r6ETKbqbyJEY56iW;

1.11
date	2016.04.03.11.05.26;	author jsg;	state Exp;
branches;
next	1.10;
commitid	IigiJlpH0gYGeBho;

1.10
date	2015.02.11.00.14.11;	author dlg;	state Exp;
branches;
next	1.9;
commitid	OPUATglsyqcmeG4g;

1.9
date	2014.03.29.18.09.28;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2014.03.27.10.24.40;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2013.05.21.20.05.30;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.5;

1.5
date	2008.12.04.15.48.19;	author weingart;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.05.42.09;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2008.01.02.06.01.46;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.25.20.48.33;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.25.11.03.28;	author art;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Kill SPINLOCK_SPIN_HOOK, use CPU_BUSY_CYCLE() instead.

ok visa@@, kettenis@@
@
text
@/*	$OpenBSD: lock.h,v 1.12 2017/05/25 03:50:10 visa Exp $	*/

/* public domain */

#ifndef _MACHINE_LOCK_H_
#define	_MACHINE_LOCK_H_

#endif /* _MACHINE_LOCK_H_ */
@


1.12
log
@Drop trailing semicolon from a macro.

OK dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.11 2016/04/03 11:05:26 jsg Exp $	*/
a6 2

#define SPINLOCK_SPIN_HOOK __asm volatile("pause": : :"memory")
@


1.11
log
@Remove __lockbarrier() defines, unused since cpu_lock removal a few
years ago.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.10 2015/02/11 00:14:11 dlg Exp $	*/
d8 1
a8 1
#define SPINLOCK_SPIN_HOOK __asm volatile("pause": : :"memory");
@


1.10
log
@make the rwlock implementation MI.

each arch used to have to provide an rw_cas operation, but now we
have the rwlock code build its own version. on smp machines it uses
atomic_cas_ulong. on uniproc machines it avoids interlocked
instructions by using straight loads and stores. this is safe because
rwlocks are only used from process context and processes are currently
not preemptible in our kernel. so alpha/ppc/etc might get a benefit.

ok miod@@ kettenis@@ deraadt@@
@
text
@d1 1
a1 2
/*	$OpenBSD: lock.h,v 1.9 2014/03/29 18:09:28 guenther Exp $	*/
/*	$NetBSD: lock.h,v 1.1.2.2 2000/05/03 14:40:55 sommerfeld Exp $	*/
d3 1
a3 32
/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Machine-dependent spin lock operations.
 */
a7 9
/*
 * compiler barrier: prevent reordering of instructions.
 * XXX something similar will move to <sys/cdefs.h>
 * or thereabouts.
 * This prevents the compiler from reordering code around
 * this "instruction", acting as a sequence point for code generation.
 */

#define __lockbarrier() __asm volatile("": : :"memory")
@


1.9
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.8 2014/03/27 10:24:40 dlg Exp $	*/
a49 4

#include <machine/atomic.h>

#define rw_cas(p, o, n) (atomic_cas_ulong(p, o, n) != o)
@


1.8
log
@replace x86_atomic_cas_things with atomic_cas_foo equivalents.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.7 2013/05/21 20:05:30 tedu Exp $	*/
d48 2
a49 2
#define __lockbarrier() __asm __volatile("": : :"memory")
#define SPINLOCK_SPIN_HOOK __asm __volatile("pause": : :"memory");
@


1.7
log
@remove unused cpu_lock code (where it is truly unused). it is not
part of the future we have planned. middling ok from a few
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.6 2011/03/23 16:54:34 pirofti Exp $	*/
d53 1
a53 1
#define rw_cas(p, o, n) (x86_atomic_cas_ul(p, o, n) != o)
@


1.6
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.5 2008/12/04 15:48:19 weingart Exp $	*/
a39 5
typedef	__volatile int		__cpu_simple_lock_t;

#define	__SIMPLELOCK_LOCKED	1
#define	__SIMPLELOCK_UNLOCKED	0

a51 55

#ifdef LOCKDEBUG

extern void __cpu_simple_lock_init(__cpu_simple_lock_t *);
extern void __cpu_simple_lock(__cpu_simple_lock_t *);
extern int __cpu_simple_lock_try(__cpu_simple_lock_t *);
extern void __cpu_simple_unlock(__cpu_simple_lock_t *);

#else

static __inline void __cpu_simple_lock_init(__cpu_simple_lock_t *)
	__attribute__((__unused__));
static __inline void __cpu_simple_lock(__cpu_simple_lock_t *)
	__attribute__((__unused__));
static __inline int __cpu_simple_lock_try(__cpu_simple_lock_t *)
	__attribute__((__unused__));
static __inline void __cpu_simple_unlock(__cpu_simple_lock_t *)
	__attribute__((__unused__));

static __inline void
__cpu_simple_lock_init(__cpu_simple_lock_t *lockp)
{
	*lockp = __SIMPLELOCK_UNLOCKED;
	__lockbarrier();
}

static __inline void
__cpu_simple_lock(__cpu_simple_lock_t *lockp)
{
	while (x86_atomic_testset_i(lockp, __SIMPLELOCK_LOCKED)
	    == __SIMPLELOCK_LOCKED) {
		continue;	/* spin */
	}
	__lockbarrier();
}

static __inline int
__cpu_simple_lock_try(__cpu_simple_lock_t *lockp)
{
	int r = (x86_atomic_testset_i(lockp, __SIMPLELOCK_LOCKED)
	    == __SIMPLELOCK_UNLOCKED);

	__lockbarrier();

	return (r);
}

static __inline void
__cpu_simple_unlock(__cpu_simple_lock_t *lockp)
{
	__lockbarrier();
	*lockp = __SIMPLELOCK_UNLOCKED;
}

#endif /* !LOCKDEBUG */
@


1.5
log
@Fix "fp_save ipi didn't" panic, and move i386/amd64 closer in the process.
Positive test results by a handful of people.  Ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.4 2008/06/26 05:42:09 ray Exp $	*/
d37 2
a38 2
#ifndef _AMD64_LOCK_H_
#define	_AMD64_LOCK_H_
d115 1
a115 1
#endif /* _AMD64_LOCK_H_ */
@


1.4
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.3 2008/01/02 06:01:46 miod Exp $	*/
d54 1
@


1.3
log
@Give LOCKDEBUG kernels a chance to compile; ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.2 2007/05/25 20:48:33 art Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.2
log
@Define rw_cas. Trivially simple on amd64 with atomic_cas_ul.

miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.1 2004/06/25 11:03:28 art Exp $	*/
d62 2
a72 2
#include <machine/atomic.h>

d117 2
a119 2

#endif /* !LOCKDEBUG */
@


1.1
log
@SMP support. Big parts from NetBSD, but with some really serious debugging
done by me, niklas and others. Especially wrt. NXE support.

Still needs some polishing, especially in dmesg messages, but we're now
building kernel faster than ever.
@
text
@d1 1
a1 1
/*	$OpenBSD: lock.h,v 1.2 2004/06/13 21:49:16 niklas Exp $	*/
d116 2
@

