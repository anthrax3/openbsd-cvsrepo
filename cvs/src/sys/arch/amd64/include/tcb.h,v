head	1.5;
access;
symbols
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.6
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.14
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.12
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2;
locks; strict;
comment	@ * @;


1.5
date	2017.09.27.05.43.55;	author guenther;	state Exp;
branches;
next	1.4;
commitid	m0jpE9Hsl0sQMZwI;

1.4
date	2016.09.04.08.49.35;	author guenther;	state Exp;
branches
	1.4.4.1;
next	1.3;
commitid	9U1gSnTGyMYe1aHL;

1.3
date	2015.05.18.19.59.27;	author guenther;	state Exp;
branches
	1.3.6.1;
next	1.2;
commitid	MLFvGCnCMKMdmAtY;

1.2
date	2011.10.19.06.48.56;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2011.10.15.23.35.29;	author guenther;	state Exp;
branches;
next	;

1.3.6.1
date	2017.09.27.18.09.57;	author tj;	state Exp;
branches;
next	;
commitid	X1NkgasNEMArnSXc;

1.4.4.1
date	2017.09.27.18.06.45;	author tj;	state Exp;
branches;
next	;
commitid	s3Hl6hYwtRryEvU2;


desc
@@


1.5
log
@amd64 needs FS.base values (the TCB pointer) to be validated, as noncanonical
addresses will cause a fault on load by the kernel.

Problem observed by Maxime Villard
ok kettenis@@ deraadt@@
@
text
@/*	$OpenBSD: tcb.h,v 1.4 2016/09/04 08:49:35 guenther Exp $	*/

/*
 * Copyright (c) 2011 Philip Guenther <guenther@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _MACHINE_TCB_H_
#define _MACHINE_TCB_H_

#ifdef _KERNEL

void	*tcb_get(struct proc *_p);
void	tcb_set(struct proc *_p, void *_newtcb);

#define TCB_GET(p)		tcb_get(p)
#define TCB_SET(p, addr)	tcb_set(p, addr)

/* address must be in canonical form; requiring lower-half is okay */
#define TCB_INVALID(addr)	((u_long)(addr) > 0x0000ffffffffffff)

#else /* _KERNEL */

/* ELF TLS ABI calls for big TCB, with static TLS data at negative offsets */
#define TLS_VARIANT	2

/* Read a slot from the TCB */
static inline void *
__amd64_read_tcb(long offset)
{
	void	*val;
	__asm__ ("movq %%fs:(%1),%0" : "=r" (val) : "r" (offset));
	return val;
}

/* Get a pointer to the TCB itself */
#define TCB_GET()		__amd64_read_tcb(0)

/* Setting the TCB pointer can only be done via syscall, so no TCB_SET() */

#endif /* _KERNEL */
#endif /* _MACHINE_TCB_H_ */
@


1.4
log
@TCB_GET_MEMBER() is no longer used after the TIB changes
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.3 2015/05/18 19:59:27 guenther Exp $	*/
d29 3
@


1.4.4.1
log
@MFC: amd64 needs FS.base values (the TCB pointer) to be validated,
as noncanonical addresses will cause a fault on load by the kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.4 2016/09/04 08:49:35 guenther Exp $	*/
a28 3

/* address must be in canonical form; requiring lower-half is okay */
#define TCB_INVALID(addr)	((u_long)(addr) > 0x0000ffffffffffff)
@


1.3
log
@Do lazy update/reset of the FS.base and %[def]s segment registers: reseting
segment registers in cpu_switchto if the old thread had made it to userspace
and restoring FS.base only on first return to userspace since context switch.

ok mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.2 2011/10/19 06:48:56 guenther Exp $	*/
a31 2
#include <stddef.h>		/* for offsetof */

a46 4
/* Get the value of a specific member in the TCB */
#define TCB_GET_MEMBER(member)	\
	__amd64_read_tcb(offsetof(struct thread_control_block, member))

a49 1

@


1.3.6.1
log
@MFC: amd64 needs FS.base values (the TCB pointers) to be validated,
as noncanonical addresses will cause a fault on load by the kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcb.h,v 1.3 2015/05/18 19:59:27 guenther Exp $	*/
a28 3

/* address must be in canonical form; requiring lower-half is okay */
#define TCB_INVALID(addr)	((u_long)(addr) > 0x0000ffffffffffff)
@


1.2
log
@Oh yeah, a cvs id is good
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d24 2
a25 1
#include <machine/pcb.h>
d27 2
a28 4
#define TCB_GET(p)		\
	((void *)((struct pcb *)(p)->p_addr)->pcb_fsbase)
#define TCB_SET(p, addr)	\
	(((struct pcb *)(p)->p_addr)->pcb_fsbase = (u_int64_t)(addr))
@


1.1
log
@"TLS-lite": add kernel support for a per-thread userspace pointer,
for pointing to the thread-control-block.  Support for mapping this
to the correct hardware register can be added as it's finished;
start with support for amd64, sparc, and sparc64.  Includes syscalls
for getting and setting it (for a portable __errno implementation) as
well as creating a new thread with an initial value for it.

discussed with miod@@, kettenis@@, deraadt@@; committing to get the syscalls
in with the impending libc bump and do further refinements in tree
@
text
@d1 2
@

