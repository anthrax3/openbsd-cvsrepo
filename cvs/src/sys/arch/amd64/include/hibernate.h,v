head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.10
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.07.09.11.37.16;	author mlarkin;	state Exp;
branches;
next	1.5;
commitid	ZzCjmXn3ZAUY3nHp;

1.5
date	2014.05.31.06.30.16;	author mlarkin;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.04.01.20.23;	author pirofti;	state Exp;
branches;
next	1.3;

1.3
date	2013.05.31.19.59.59;	author mlarkin;	state Exp;
branches;
next	1.2;

1.2
date	2013.05.30.19.00.59;	author mlarkin;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.13.10.30.38;	author mlarkin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
Fixes a hibernate issue wherein we locked the kernel lock while hatching
but then parked ourselves in real mode without completing acquisition of
said lock. Also removes the park routine from i386 since we don't need it
(the APs are already parked at the time we start unpack).

discussed with and ok kettenis@@, also ok deraadt@@
@
text
@/*	$OpenBSD: hibernate.h,v 1.5 2014/05/31 06:30:16 mlarkin Exp $	*/

/*
 * Copyright (c) 2011 Mike Larkin <mlarkin@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <machine/hibernate_var.h>

/* amd64 hibernate support structures and functions */

int	get_hibernate_info_md(union hibernate_info *);
void	hibernate_flush(void);
void	hibernate_enter_resume_mapping(vaddr_t, paddr_t, int);
int	hibernate_inflate_skip(union hibernate_info *, paddr_t);
int	hibernate_suspend(void);
void	hibernate_switch_stack_machdep(void);
void	hibernate_resume_machdep(void);
void	hibernate_activate_resume_pt_machdep(void);
void	hibernate_enable_intr_machdep(void);
void	hibernate_disable_intr_machdep(void);
#ifdef MULTIPROCESSOR
void	hibernate_quiesce_cpus(void);
void	hibernate_drop_to_real_mode(void);
#endif /* MULTIPROCESSOR */
@


1.5
log
@
Remove some unused code that we added at the 2013 Toronto hackathon but
don't need anymore.
@
text
@d1 1
a1 1
/*	$OpenBSD: hibernate.h,v 1.4 2013/06/04 01:20:23 pirofti Exp $	*/
d35 1
@


1.4
log
@Add RCS ids.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a26 1
void	hibernate_prepare_resume_machdep(union hibernate_info *);
@


1.3
log
@

We need to halt the APs on MP hibernate resume or else they will be
executing code possibly causing side effects during the image unpack
operation. But before we can halt the APs, we need to complete their init
(as they will be hatched but idling, possibly with interrupts off).

Introduces MD function hibernate_quiesce_cpus to do this, called from the
MI hibernate resume code.

ok deraadt
@
text
@d1 2
@


1.2
log
@

Make interrupt handling in hibernate resume MI by providing MD-specific
functions to enable and disable interrupts, if needed. If a platform doesnt
need interrupt handling in this way, the MD function can be a no-op.

discussed with pirofti and deraadt
@
text
@d32 3
@


1.1
log
@

Starting point for amd64 hibernate ... some goo copied from i386.
This does not yet work for amd64 - getting the structure into the tree so
others can help.
@
text
@d30 2
@

