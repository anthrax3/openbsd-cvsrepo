head	1.5;
access;
symbols
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.1.0.14
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.12
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.10
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2014.11.18.01.11.13;	author deraadt;	state dead;
branches;
next	1.4;
commitid	yKb6V6q931TzDlbT;

1.4
date	2014.11.17.23.54.32;	author guenther;	state Exp;
branches;
next	1.3;
commitid	iRg54MZYsliqy8SK;

1.3
date	2013.12.28.17.57.14;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.21.15.50.28;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.13.13.35.54;	author weingart;	state Exp;
branches;
next	;


desc
@@


1.5
log
@rename ld.script to same name as other architectures
@
text
@/*	$OpenBSD: kern.ldscript,v 1.4 2014/11/17 23:54:32 guenther Exp $	*/

/*
 * Copyright (c) 2009 Tobias Weingartner <weingart@@tepid.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64", "elf64-x86-64")
OUTPUT_ARCH(i386:x86-64)

/* Define how we want out ELF binary to look like. */
PHDRS
{
	text PT_LOAD FILEHDR PHDRS;
	rodata PT_LOAD;
	data PT_LOAD;
	bss PT_LOAD;
	openbsd_randomize 0x65a3dbe6; /* PT_OPENBSD_RANDOMIZE */
}

/*
 * If we want the text/rodata/data sections aligned on 2M boundaries,
 * we could use the following instead.  Note, file size would increase
 * due to necessary padding.
 *
 *__ALIGN_SIZE = 0x200000;
 */
__ALIGN_SIZE = 0x1000;
__kernel_base_virt = 0xffffffff81000000 + SIZEOF_HEADERS;
__kernel_base_phys = __kernel_base_virt & 0x7fffffff;

/* We use physical address to jump to kernel */
start_phys = LOADADDR(.text) + (start - __kernel_base_virt);
ENTRY(start_phys)
SECTIONS
{
	__kernel_text_virt = __kernel_base_virt;
	__kernel_text_phys = __kernel_base_phys;
	.text (__kernel_text_virt) : AT (__kernel_text_phys)
	{
		__text_start = ABSOLUTE(.) & 0xfffffffffffff000;
		__text_size = SIZEOF(.text);
		__text_load = LOADADDR(.text);
		locore.o(.text)
		*(.text .text.*)
	} :text
	PROVIDE (__etext = .);
	PROVIDE (etext = .);
	_etext = .;

	/* Move rodata to the next page, so we can nuke X and W bit on them */
	. = ALIGN(__ALIGN_SIZE);
	__kernel_rodata_virt = .;
	__kernel_rodata_phys = . & 0x7fffffff;
	.rodata (__kernel_rodata_virt) : AT (__kernel_rodata_phys)
	{
		__rodata_start = ABSOLUTE(.);
		__rodata_size = SIZEOF(.rodata);
		__rodata_load = LOADADDR(.rodata);
		*(.rodata .rodata.*)
	} :rodata
	PROVIDE (erodata = .);
	_erodata = .;

	/* Move data to the next page, so we can add W bit on them */
	. = ALIGN(__ALIGN_SIZE);
	__kernel_data_virt = .;
	__kernel_data_phys = . & 0x7fffffff;
	.data (__kernel_data_virt) : AT (__kernel_data_phys)
	{
		__data_start = ABSOLUTE(.);
		__data_size = SIZEOF(.data);
		__data_load = LOADADDR(.data);
		*(.data .data.*)
	} :data
	. = ALIGN(0x1000);
	__kernel_randomdata_phys = . & 0x7fffffff;
	.openbsd.randomdata : AT (__kernel_randomdata_phys)
	{
		*(.openbsd.randomdata)
	} :data :openbsd_randomize
	. = ALIGN(0x1000);
	PROVIDE (edata = .);
	_edata = .;

	/* BSS starts right after padded data */
	__kernel_bss_virt = .;
	__kernel_bss_phys = . & 0x7fffffff;
	.bss (__kernel_bss_virt) : AT (__kernel_bss_phys)
	{
		__bss_start = ABSOLUTE(.);
		__bss_size = SIZEOF(.bss);
		__bss_load = LOADADDR(.bss);
		*(.bss .bss.*)
		*(COMMON)
		/* Align here to ensure that the .bss section occupies space
		 * up to _end.  Align after .bss to ensure correct alignment
		 * even if the .bss section disappears because there are no
		 * input sections.
		 */
		. = ALIGN(64 / 8);
	} :bss
	. = ALIGN(64 / 8);
	_end = .;
	PROVIDE (end = .);

	/* XXX - hack alert, since we are not C++, nuke these */
	/DISCARD/ :
	{
		*(.note.GNU-stack)
		*(.eh_frame)
	}
}

@


1.4
log
@Pull in the .openbsd.randomdata sections, assigned to both the data and
openbsd_randomize segments.  While here, make the 'bsd' target depend on
the ldscript.

problem noted by and ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern.ldscript,v 1.3 2013/12/28 17:57:14 miod Exp $	*/
@


1.3
log
@Require an explicit PT_OPENBSD_RANDOMIZE program header in the kernel linker
script (note that the amd64 linker script is currently not used).
Discussed with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern.ldscript,v 1.2 2013/03/21 15:50:28 deraadt Exp $	*/
d87 6
@


1.2
log
@move kernel after 16MB. needed for additional growth that might come in a
little while...
diff from martynas who is not around now
@
text
@d1 1
a1 1
/*	$OpenBSD: kern.ldscript,v 1.1 2009/08/13 13:35:54 weingart Exp $	*/
d29 1
@


1.1
log
@Start using a linking script for this kernel.  This
should help in future using large pages for text/etc.
Also, since we do not use the .eh frame stuff, we can
nuke them, saving some bytes...

Ok kettenis@@, "more control over linking is a good thing,
but I can't comment further" art@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d39 1
a39 1
__kernel_base_virt = 0xffffffff80100000 + SIZEOF_HEADERS;
@

