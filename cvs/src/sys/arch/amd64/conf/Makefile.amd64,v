head	1.80;
access;
symbols
	OPENBSD_6_1:1.75.0.4
	OPENBSD_6_1_BASE:1.75
	OPENBSD_6_0:1.67.0.2
	OPENBSD_6_0_BASE:1.67
	OPENBSD_5_9:1.66.0.2
	OPENBSD_5_9_BASE:1.66
	OPENBSD_5_8:1.65.0.6
	OPENBSD_5_8_BASE:1.65
	OPENBSD_5_7:1.65.0.2
	OPENBSD_5_7_BASE:1.65
	OPENBSD_5_6:1.59.0.4
	OPENBSD_5_6_BASE:1.59
	OPENBSD_5_5:1.58.0.4
	OPENBSD_5_5_BASE:1.58
	OPENBSD_5_4:1.56.0.2
	OPENBSD_5_4_BASE:1.56
	OPENBSD_5_3:1.53.0.2
	OPENBSD_5_3_BASE:1.53
	OPENBSD_5_2:1.51.0.4
	OPENBSD_5_2_BASE:1.51
	OPENBSD_5_1_BASE:1.51
	OPENBSD_5_1:1.51.0.2
	OPENBSD_5_0:1.50.0.2
	OPENBSD_5_0_BASE:1.50
	OPENBSD_4_9:1.47.0.2
	OPENBSD_4_9_BASE:1.47
	OPENBSD_4_8:1.44.0.2
	OPENBSD_4_8_BASE:1.44
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.16.0.4
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.15.0.6
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.4
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.2
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.11.0.2
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	SMP:1.3.0.2;
locks; strict;
comment	@# @;


1.80
date	2017.06.05.12.43.59;	author deraadt;	state Exp;
branches;
next	1.79;
commitid	wfRVAv0JN8rqN4EA;

1.79
date	2017.06.04.17.03.39;	author tb;	state Exp;
branches;
next	1.78;
commitid	w2DLfnTBmLxpUmMv;

1.78
date	2017.06.03.22.21.33;	author deraadt;	state Exp;
branches;
next	1.77;
commitid	SGp9KIY6OZAZGoKD;

1.77
date	2017.05.31.19.18.18;	author deraadt;	state Exp;
branches;
next	1.76;
commitid	HlDgymhwBU2bW7Tm;

1.76
date	2017.05.08.00.13.38;	author dlg;	state Exp;
branches;
next	1.75;
commitid	TeAd99ze4UAoyHfq;

1.75
date	2017.01.25.11.15.07;	author kettenis;	state Exp;
branches;
next	1.74;
commitid	SbX05HnGufiooA06;

1.74
date	2016.11.29.09.08.34;	author mpi;	state Exp;
branches;
next	1.73;
commitid	yUJbDchhkVm6F1HA;

1.73
date	2016.11.15.09.08.37;	author natano;	state Exp;
branches;
next	1.72;
commitid	uQeojuKIzgIWOEnv;

1.72
date	2016.10.27.20.44.19;	author natano;	state Exp;
branches;
next	1.71;
commitid	eR4vLZnymgQjVxbj;

1.71
date	2016.10.24.18.26.17;	author deraadt;	state Exp;
branches;
next	1.70;
commitid	84F8eQ949AbxN83e;

1.70
date	2016.10.15.13.45.08;	author deraadt;	state Exp;
branches;
next	1.69;
commitid	TtDw6IYffbT8oPEE;

1.69
date	2016.10.14.18.43.01;	author deraadt;	state Exp;
branches;
next	1.68;
commitid	dUZQxi6w3YqAb6KQ;

1.68
date	2016.09.24.19.13.03;	author kettenis;	state Exp;
branches;
next	1.67;
commitid	N8Z5nlTJHj3pmauV;

1.67
date	2016.04.29.12.44.52;	author mpi;	state Exp;
branches;
next	1.66;
commitid	Vbd8R29nZBKG6KtM;

1.66
date	2015.11.13.07.52.20;	author mlarkin;	state Exp;
branches;
next	1.65;
commitid	KdsjYlqLpqhwOUHf;

1.65
date	2015.01.13.01.12.49;	author deraadt;	state Exp;
branches;
next	1.64;
commitid	xEYSgcMiEU7N21VE;

1.64
date	2015.01.11.19.25.13;	author tedu;	state Exp;
branches;
next	1.63;
commitid	Jqptj5xcqx8IMSNU;

1.63
date	2014.11.18.01.11.13;	author deraadt;	state Exp;
branches;
next	1.62;
commitid	yKb6V6q931TzDlbT;

1.62
date	2014.11.17.23.54.32;	author guenther;	state Exp;
branches;
next	1.61;
commitid	iRg54MZYsliqy8SK;

1.61
date	2014.11.05.05.40.02;	author mlarkin;	state Exp;
branches;
next	1.60;
commitid	fkdKbrT5EFqNsWev;

1.60
date	2014.10.04.18.10.14;	author brad;	state Exp;
branches;
next	1.59;
commitid	iaz4yUwbbR9oynrV;

1.59
date	2014.05.08.17.59.28;	author sf;	state Exp;
branches;
next	1.58;

1.58
date	2013.10.16.17.34.02;	author florian;	state Exp;
branches;
next	1.57;

1.57
date	2013.10.15.19.23.25;	author guenther;	state Exp;
branches;
next	1.56;

1.56
date	2013.06.23.20.33.51;	author miod;	state Exp;
branches;
next	1.55;

1.55
date	2013.03.30.07.25.20;	author tedu;	state Exp;
branches;
next	1.54;

1.54
date	2013.03.21.15.50.28;	author deraadt;	state Exp;
branches;
next	1.53;

1.53
date	2012.08.28.21.03.32;	author pascal;	state Exp;
branches;
next	1.52;

1.52
date	2012.08.22.16.58.26;	author pascal;	state Exp;
branches;
next	1.51;

1.51
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.50;

1.50
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.49;

1.49
date	2011.07.06.02.08.04;	author tedu;	state Exp;
branches;
next	1.48;

1.48
date	2011.04.15.02.41.27;	author guenther;	state Exp;
branches;
next	1.47;

1.47
date	2010.12.30.18.49.30;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2010.12.02.20.57.07;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	2010.12.02.04.35.01;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2010.06.02.14.40.04;	author kettenis;	state Exp;
branches
	1.44.2.1;
next	1.43;

1.43
date	2010.06.01.23.49.22;	author deraadt;	state Exp;
branches;
next	1.42;

1.42
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.41;

1.41
date	2010.05.25.17.27.55;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2010.05.25.15.05.00;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2010.05.25.02.35.02;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2010.05.24.23.19.21;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2010.05.24.17.49.37;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2010.05.24.14.59.15;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2010.05.23.15.32.18;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2010.04.28.15.31.32;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2010.04.27.16.54.53;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2010.04.27.16.50.14;	author jsg;	state Exp;
branches;
next	1.31;

1.31
date	2010.04.27.06.46.25;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2010.04.27.05.07.28;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2010.04.27.05.05.21;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2010.04.27.04.31.45;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2010.04.27.03.37.37;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2010.04.26.22.21.14;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2010.04.26.22.11.37;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2010.04.26.21.46.36;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2010.04.26.20.50.16;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2010.04.26.18.58.30;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2009.12.03.17.51.22;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2009.10.19.19.46.56;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2009.08.13.13.35.54;	author weingart;	state Exp;
branches;
next	1.18;

1.18
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2009.07.10.13.51.47;	author jsg;	state Exp;
branches;
next	1.16;

1.16
date	2009.03.23.18.51.51;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2007.11.30.07.52.06;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2007.11.25.18.25.27;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2007.11.25.11.23.33;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2007.10.29.22.29.13;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.27.13.39.00;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2006.11.07.09.09.42;	author otto;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.27.05.58.11;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.01.21.46.27;	author pascoe;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.31.02.53.48;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2004.11.19.06.41.13;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.23.04.03.14;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.22.00.08.17;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.08.18.30.21;	author deraadt;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2004.01.28.02.55.57;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.39.39;	author mickey;	state Exp;
branches;
next	;

1.3.2.1
date	2004.02.22.22.08.18;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2004.06.05.23.09.25;	author niklas;	state Exp;
branches;
next	;

1.44.2.1
date	2011.03.29.17.22.12;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.80
log
@The arm* architectures edit the ld.script, creating a copy in the compile
directories.  Copy it in the same way on other architectures, for the same
effect.  Something upcoming will want that file there anyways.
@
text
@#	$OpenBSD: Makefile.amd64,v 1.79 2017/06/04 17:03:39 tb Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I${.OBJDIR} -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-uninitialized -Wno-pointer-sign \
		-Wframe-larger-than=2047

CMACHFLAGS=	-mcmodel=kernel -mno-red-zone -mno-sse2 -mno-sse -mno-3dnow \
		-mno-mmx -msoft-float -fno-omit-frame-pointer
CMACHFLAGS+=	-ffreestanding ${NOPIE_FLAGS}
SORTR=		sort -R
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
.if ${IDENT:M-DDDB}
CMACHFLAGS+=	-msave-args
.endif
.if ${IDENT:M-DSMALL_KERNEL}
CMACHFLAGS+=	-Wa,-n
SORTR=		cat
.endif

DEBUG?=		-g
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CWARNFLAGS} ${CMACHFLAGS}
LINKFLAGS=	-T ld.script -X --warn-common -nopie

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore0.o gap.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS} param.o ioconf.o
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ld.script
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		umask 007; \
		echo ${OBJS} param.o ioconf.o vers.o | tr " " "\n" | ${SORTR} > lorder; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} `cat lorder`
SYSTEM_LD_TAIL=	@@${SIZE} $@@

.if ${DEBUG} == "-g"
STRIPFLAGS=	-S
SYSTEM_LD_TAIL+=; umask 007; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

ld.script: ${_machdir}/conf/ld.script
	cp ${_machdir}/conf/ld.script ld.script

vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

gap.S:	${SYSTEM_SWAP_DEP} Makefile
	umask 007; sh $S/conf/makegap.sh 0xcc > gap.S

gap.o:	gap.S
	umask 007; ${CC} ${AFLAGS} ${CPPFLAGS} ${PROF} -c gap.S

clean:
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} \
	    gap.S lorder param.c

cleandir: clean
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c

depend obj:

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

locore0.o: ${_machdir}/${_mach}/locore0.S assym.h
locore.o mutex.o vector.o copy.o spl.o: assym.h
mptramp.o acpi_wakecode.o vmm_support.o: assym.h

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	cp -p bsd /nbsd
	mv /nbsd /bsd
.endif

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif

%RULES
@


1.79
log
@Create gap.* with umask 007 instead of 077 to make kernel builds after
make release work without prior cleanup.

discussed with deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.78 2017/06/03 22:21:33 deraadt Exp $
d49 1
a49 2
LDSCRIPT=	${_machdir}/conf/ld.script
LINKFLAGS=	-T ${LDSCRIPT} -X --warn-common -nopie
d79 1
a79 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ${LDSCRIPT}
d123 3
@


1.78
log
@Create gap.S and gap.o with umask 077.  Create lorder and bsd* with umask 007.
Prying eyes cannot look at the kernels in the compile directory.
ok tb rpe, kernel developers seem unimpacted
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.77 2017/05/31 19:18:18 deraadt Exp $
d130 1
a130 1
	umask 077; sh $S/conf/makegap.sh 0xcc > gap.S
d133 1
a133 1
	umask 077; ${CC} ${AFLAGS} ${CPPFLAGS} ${PROF} -c gap.S
@


1.77
log
@Split early startup code out of locore.S into locore0.S.  Adjust link
run so that this locore0.o is always at the start of the executable.
But randomize the link order of all other .o files in the kernel, so
that their exec/rodata/data/bss segments land all over the place.
Late during kernel boot, unmap the early startup code.

As a result, the internal layout of every newly build bsd kernel is
different from past kernels.  Internal relative offsets are not known
to an outside attacker.  The only known offsets are in the startup code,
which has been unmapped.

Ramdisk kernels cannot be compiled like this, because they are gzip'd.
When the internal pointer references change, the compression dictionary
bloats and results in poorer compression.

ok kettenis mlarkin visa, also thanks to tedu for getting me back to this
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.76 2017/05/08 00:13:38 dlg Exp $
d83 1
d86 1
a86 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
d90 1
a90 1
SYSTEM_LD_TAIL+=; \
d130 1
a130 1
	sh $S/conf/makegap.sh 0xcc > gap.S
d133 1
a133 1
	${CC} ${AFLAGS} ${CPPFLAGS} ${PROF} -c gap.S
d160 1
a160 1
	cp bsd /nbsd
@


1.76
log
@add printing of arguments in stack traces.

this relies on building the kernel with -msave-args, which has
functions save their register arguments on the stack, so ddb can
easily find them and print them.

while here try to print arguments out of registers if we're at the
top of the stack (ie, if we set a breakpoint on a function entry).

-msave-args is only added to the compiler flags if the kernel has
been configured with ddb. this means it wont waste the space on
RAMDISK kernels because they don't include ddb.

inspired by similar functionality that has been in use on solaris
and its derivatives for well over a decade.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.75 2017/01/25 11:15:07 kettenis Exp $
d33 1
d42 1
d78 2
a79 2
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
d83 2
a84 1
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
d128 6
d135 2
a136 1
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} param.c
d148 3
a150 2
locore.o: ${_machdir}/${_mach}/locore.S assym.h
mutex.o vector.o copy.o spl.o mptramp.o acpi_wakecode.o vmm_support.o: assym.h
@


1.75
log
@Build amd64 kernels with -ffreestanding.  Synchronize the arm64 and armv7
kernel makefiles, that are using -ffreestanding already, with the amd64 one.
Other architectures will follow later.

ok jca@@, visa@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.74 2016/11/29 09:08:34 mpi Exp $
d35 3
@


1.74
log
@Build kernel with DEBUG=-g by default.

This will allow us to extract type informations from DWARF2 sections.  It
also makes developer life easier as debug information are now included in
every object.

Resulting kernels will be stripped using strip(1) instead of ld(1).

Kernel build time increases by approximately 10%.  However it is still
possible to disable this by defining DEBUG="".

ok kettenis@@, bluhm@@, natano@@, jasper@@, reyk@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.73 2016/11/15 09:08:37 natano Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-pointer-sign \
d32 1
a32 3
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
@


1.73
log
@Clean up the kernel Makefile's:

- Remove the 'lint' target. lint has been removed with OpenBSD 5.2.
- Remove the 'tags' target. It does nothing of value.
- Replace 'clean::' with 'clean:', as requested by espie and millert,
  and remove files from the 'clean' target, that are never generated.
- Don't create a file called 'depend' in 'make depend', but just do
  nothing instead.

ok mpi tb
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.72 2016/10/27 20:44:19 natano Exp $
d42 1
a82 1
DEBUG?=
@


1.72
log
@We don't generate an eddep script for kernel builds nowadays. The last
reference to eddep in the kernel Makefile I could find is in 4.3BSD,
released some 30 years ago.

ok tb millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.71 2016/10/24 18:26:17 deraadt Exp $
d124 2
a125 3
clean::
	rm -f *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.* ${DB_STRUCTINFO} param.c
d130 1
a130 12
lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

obj:

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"
@


1.71
log
@make cleandir should skip the version file; ok otto millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.70 2016/10/15 13:45:08 deraadt Exp $
d125 1
a125 1
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
@


1.70
log
@cleandir: target for kernel compile directories
ok natano
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.69 2016/10/14 18:43:01 deraadt Exp $
d129 1
a129 1
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c version
@


1.69
log
@Kernel builds now happen in compile/CONFIG/obj@@ -> /usr/obj/... [or ./obj/,
if srctree is not rooted at /usr/src].  As a result, stock GENERIC & RAMDISK
kernels are commited to the tree, to ensure the src tree can be "readonly"
during builds, with all writes occuring inside the obj space.  config -b
options are handled by ../Makefile.inc.  The canonical new way to configure
one of these kernels is:
    % cd /sys/arch/amd64/compile/GENERIC.MP
    % doas make obj
    % make config
    % make
    % doas cp obj/bsd /bsd
The build infrastructure will use this new mechanism in a de-escalation
way using BUILDUSER.
Much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.68 2016/09/24 19:13:03 kettenis Exp $
d126 4
a129 1
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}
@


1.68
log
@Add -Wno-pointer-sign to all our gcc4 architectures.

ok patrick@@ (for armv7), deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.67 2016/04/29 12:44:52 mpi Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I$S -I. -I$S/arch
d132 2
@


1.67
log
@Do not remove local symbols from the table.

ddb(4) can now see static functions.  That doesn't mean we should start
declaring functions as ``static'', however it helps for the few existing
exceptions.

ok deraadt@@, kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.66 2015/11/13 07:52:20 mlarkin Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized \
@


1.66
log
@
vmm(4) kernel code

circulated on hackers@@, no objections. Disabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.65 2015/01/13 01:12:49 deraadt Exp $
d84 1
a84 1
STRIPFLAGS=	-g -x
d90 1
a90 1
LINKFLAGS+=	-S -x
@


1.65
log
@for the install: target, use cmp as a rough attempt for avoiding repeated
make install
from Simon Nicolussi
ok jsing tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.64 2015/01/11 19:25:13 tedu Exp $
d145 1
a145 1
mutex.o vector.o copy.o spl.o mptramp.o acpi_wakecode.o: assym.h
@


1.64
log
@switch prototype warnings to implicit-declaration warnings.
This should catch all the same bad cases, but be a little less aggravating
in circumstances where a prototype isn't necessary
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.63 2014/11/18 01:11:13 deraadt Exp $
d153 1
a153 2
	rm -f /obsd
	ln /bsd /obsd
@


1.63
log
@rename ld.script to same name as other architectures
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.62 2014/11/17 23:54:32 guenther Exp $
d26 1
a26 1
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
@


1.62
log
@Pull in the .openbsd.randomdata sections, assigned to both the data and
openbsd_randomize segments.  While here, make the 'bsd' target depend on
the ldscript.

problem noted by and ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.61 2014/11/05 05:40:02 mlarkin Exp $
d45 1
a45 1
LDSCRIPT=	${_machdir}/conf/kern.ldscript
@


1.61
log
@
Map .rodata RO after boot on amd64. Makefile.amd64 changes from deraadt.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.60 2014/10/04 18:10:14 brad Exp $
d45 2
a46 1
LINKFLAGS=	-T ${_machdir}/conf/kern.ldscript -X --warn-common -nopie
d76 1
a76 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
@


1.60
log
@Switch the kernel configs over to using -Wframe-larger-than= instead of
-Wstack-larger-than-. This is what modern GCC supports as well as LLVM.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.59 2014/05/08 17:59:28 sf Exp $
d45 1
a45 1
LINKFLAGS=	-Ttext 0xffffffff810001e0 -e start --warn-common -nopie
a82 1
LINKFLAGS+=	-X
@


1.59
log
@Enable -Wno-format in the kernel on i386 & amd64

ok jsg@@
"go for it" kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.58 2013/10/16 17:34:02 florian Exp $
d28 1
a28 1
		-Wstack-larger-than-2047
@


1.58
log
@Revert unintended changes.
Requested by guenther@@ how is currently off net.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.57 2013/10/15 19:23:25 guenther Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-format \
@


1.57
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.56 2013/06/23 20:33:51 miod Exp $
d153 4
a156 5
	${SUDO} rm -f /obsd
	${SUDO} ln /bsd /obsd
	${SUDO} cp bsd /nbsd
	${SUDO} mv /nbsd /bsd
	cp bsd.gdb /var/crash
@


1.56
log
@Stop using -traditional-cpp on gcc3/4 platforms.

Add CWARNFLAGS to the command line when using -xassembler-with-cpp. We are
mostly interested in -Werror here.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.55 2013/03/30 07:25:20 tedu Exp $
d139 1
a139 1
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
d141 1
a141 1
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
d153 5
a157 4
	rm -f /obsd
	ln /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
@


1.55
log
@reorder include search directories. cuts lookups by quite a bit.
ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.54 2013/03/21 15:50:28 deraadt Exp $
d38 3
d44 1
a44 1
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CMACHFLAGS}
@


1.54
log
@move kernel after 16MB. needed for additional growth that might come in a
little while...
diff from martynas who is not around now
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.53 2012/08/28 21:03:32 pascal Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I. -I$S -I$S/arch
@


1.53
log
@Add -nopie to LINKFLAGS on ELF architectures.  Note that this needs an
updated gcc and ld to understand the new -nopie flag.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.52 2012/08/22 16:58:26 pascal Exp $
d42 1
a42 1
LINKFLAGS=	-Ttext 0xffffffff801001e0 -e start --warn-common -nopie
@


1.52
log
@Build the kernel with -fno-pie.  Just getting Ms out of my tree; this will be
cleaned up later.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.51 2011/11/08 18:41:34 matthieu Exp $
d42 1
a42 1
LINKFLAGS=	-Ttext 0xffffffff801001e0 -e start --warn-common
@


1.51
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.50 2011/07/07 22:28:18 guenther Exp $
d34 1
a34 1
		-fno-builtin-log2 -fno-builtin-malloc 
@


1.50
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.49 2011/07/06 02:08:04 tedu Exp $
a12 1
MKDEP?=	mkdep
@


1.49
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.48 2011/04/15 02:41:27 guenther Exp $
d162 5
a166 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.48
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.47 2010/12/30 18:49:30 deraadt Exp $
d123 1
a123 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.47
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.46 2010/12/02 20:57:07 deraadt Exp $
d26 1
a26 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL
d72 2
a73 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d93 5
d101 2
a102 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d131 3
a136 14
AFILES=	${_machdir}/${_mach}/locore.S
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d138 1
a138 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d155 12
@


1.46
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.45 2010/12/02 04:35:01 deraadt Exp $
d95 2
a96 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.45
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.44 2010/06/02 14:40:04 kettenis Exp $
d71 2
a72 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d74 2
a75 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.44
log
@Add back -fno-omit-frame-pointer, which was accidentally deleted by
deraadt@@ in one of the big restructuring diffs.

ok marco@@, millert@@, marco@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.43 2010/06/01 23:49:22 deraadt Exp $
d71 1
a71 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS}
d74 2
a75 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.44.2.1
log
@MFC, fixing failures during savecore (in the boot process) on some systems.
Spotted by Mitja Muzenic and deraadt@@ on various Dells. ok deraadt@@

---
revision 1.46
date: 2010/12/02 20:57:07;  author: deraadt;  state: Exp;  lines: +5 -5
After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
---
revision 1.45
date: 2010/12/02 04:35:01;  author: deraadt;  state: Exp;  lines: +4 -4
move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
---
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.46 2010/12/02 20:57:07 deraadt Exp $
d71 2
a72 2
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d74 2
a75 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
@


1.43
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.42 2010/05/28 14:27:08 guenther Exp $
d32 1
a32 1
		-mno-mmx -msoft-float
@


1.42
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.41 2010/05/25 17:27:55 deraadt Exp $
d43 1
a43 2
LINKFLAGS=	-Ttext 0xffffffff801001e0 -e start # -X bug?
STRIPFLAGS=	-g -x
d81 1
@


1.41
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.40 2010/05/25 15:05:00 deraadt Exp $
d95 1
a95 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.40
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.39 2010/05/25 02:35:02 deraadt Exp $
a21 2
_mach?=		amd64
_arch?=		amd64
@


1.39
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.38 2010/05/24 23:19:21 deraadt Exp $
d150 1
a150 1
	${NORMAL_S}
@


1.38
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.37 2010/05/24 17:49:37 deraadt Exp $
a130 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d132 1
a132 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.37
log
@Unify the dependency time check for whether an architecture has SFILES
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.36 2010/05/24 14:59:15 deraadt Exp $
d31 1
a31 1
		-Wstack-larger-than-2047 -Wvariable-decl
d74 1
a74 1
SYSTEM_OBJ=	locore.o vector.o copy.o spl.o param.o ioconf.o ${OBJS}
a117 1

d120 1
a120 1
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}
d130 2
a131 12
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

AFILES=	${_machdir}/${_mach}/locore.S ${_machdir}/${_mach}/vector.S \
	${_machdir}/${_mach}/copy.S ${_machdir}/${_mach}/spl.S
SRCS=	${AFILES} \
	param.c ioconf.c ${CFILES} ${SFILES}
a150 9
	${NORMAL_S}

vector.o: ${_machdir}/${_mach}/vector.S assym.h
	${NORMAL_S}

copy.o: ${_machdir}/${_mach}/copy.S assym.h
	${NORMAL_S}

spl.o: ${_machdir}/${_mach}/spl.S assym.h
@


1.36
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.35 2010/05/23 15:32:18 deraadt Exp $
d147 1
d149 1
@


1.35
log
@no need for -Dx86_64 or -Damd64, since __amd64__ is supplied by the
compiler. Also move towards passing $PARAM around in CPPFLAGS, instead
of compiling param.c in a special way, as discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.34 2010/04/28 15:31:32 deraadt Exp $
d29 9
a37 8
CDIAGFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
		-Wno-uninitialized -Wno-format -Wno-main -Wno-sign-compare \
		-Wstack-larger-than-2047

CMACHFLAGS+=	-mcmodel=kernel -mno-red-zone -fno-strict-aliasing \
		-mno-sse2 -mno-sse -mno-3dnow -mno-mmx -msoft-float \
		-fno-builtin-printf -fno-builtin-log -fno-builtin-log2 \
		-fno-builtin-malloc -fno-omit-frame-pointer
d43 3
a45 3
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-x assembler-with-cpp -D_LOCORE
LINKFLAGS=	-Ttext 0xffffffff801001e0 -e start -X
d54 1
a54 1
HOSTCC= ${CC}
d57 1
a57 5

# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, or PROFILE; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.
a60 1

a61 3
NORMAL_S_C=	${CC} ${AFLAGS} ${CPPFLAGS} ${PARAM} -c $<

HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<
d76 1
a76 1
SYSTEM_LD_HEAD=	rm -f $@@
d120 1
a120 1
	rm -f eddep *bsd bsd.gdb tags *.[io] [a-z]*.s \
d124 1
a124 1
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} ${PARAM} -UKGDB \
@


1.34
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.33 2010/04/27 16:54:53 deraadt Exp $
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -D${_mach} -Dx86_64
a63 1
NORMAL_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<
d113 1
a113 1
	${NORMAL_C_C}
@


1.33
log
@Unifity CPPFLAGS= (using ${_mach}), SYSTEM_LD_TAIL= (always on one line),
and SRCS= (common files always after the \)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.32 2010/04/27 16:50:14 jsg Exp $
d58 1
a58 1
# where TYPE is NORMAL, DRIVER, or PROFILE; SUFFIX is the file suffix,
a64 3

DRIVER_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
DRIVER_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<
@


1.32
log
@Disable builtin malloc and log2 on gcc3 arches, a no-op for gcc3
but required for gcc4.

ok kettenis@@ deraadt@@ marco@@, log2 suggested by robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.31 2010/04/27 06:46:25 deraadt Exp $
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -Damd64 -Dx86_64
d150 4
a153 3
AFILES=	${_machdir}/${_mach}/locore.S ${_machdir}/${_mach}/vector.S ${_machdir}/${_mach}/copy.S \
	${_machdir}/${_mach}/spl.S
SRCS=	param.c ioconf.c ${AFILES} ${CFILES} ${SFILES}
@


1.31
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.30 2010/04/27 05:07:28 deraadt Exp $
d35 2
a36 1
		-fno-builtin-printf -fno-builtin-log -fno-omit-frame-pointer
@


1.30
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.29 2010/04/27 05:05:21 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/amd64/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/amd64/conf/Makefile.amd64
# after which config should be rerun for all machines of that type.
@


1.29
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.28 2010/04/27 04:31:45 deraadt Exp $
a14 4
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

@


1.28
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.27 2010/04/27 03:37:37 deraadt Exp $
d160 2
a161 2
AFILES=	${_machdir}/amd64/locore.S ${_machdir}/amd64/vector.S ${_machdir}/amd64/copy.S \
	${_machdir}/amd64/spl.S
d164 1
a164 1
.depend: ${SRCS} assym.h param.c ${APMINC} ${DB_STRUCTINFO}
d179 1
a179 1
locore.o: ${_machdir}/amd64/locore.S assym.h
d182 1
a182 1
vector.o: ${_machdir}/amd64/vector.S assym.h
d185 1
a185 1
copy.o: ${_machdir}/amd64/copy.S assym.h
d188 1
a188 1
spl.o: ${_machdir}/amd64/spl.S assym.h
@


1.27
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.26 2010/04/26 22:21:14 deraadt Exp $
d169 1
a169 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.26
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.25 2010/04/26 22:11:37 deraadt Exp $
a178 18


# depend on root or device configuration
autoconf.o conf.o: Makefile

# depend on network or filesystem configuration
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile
if.o if_tun.o if_loop.o if_ethersubr.o: Makefile
if_arp.o if_ether.o: Makefile
ip_input.o ip_output.o in_pcb.o in_proto.o: Makefile
tcp_subr.o tcp_timer.o tcp_output.o: Makefile

# depend on maxusers
machdep.o: Makefile

# depend on CPU configuration
locore.o machdep.o: Makefile

@


1.25
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.24 2010/04/26 21:46:36 deraadt Exp $
a33 1
_machdir?=	$S/arch/amd64
d35 2
a36 1
_archdir?=	$S/arch/amd64
@


1.24
log
@typo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.23 2010/04/26 20:50:16 deraadt Exp $
d115 5
a119 3
assym.h: $S/kern/genassym.sh ${_machdir}/amd64/genassym.cf Makefile
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${_machdir}/amd64/genassym.cf > assym.h.tmp && \
d168 3
a170 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} ${PARAM} < ${_machdir}/amd64/genassym.cf
@


1.23
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.22 2010/04/26 18:58:30 deraadt Exp $
d36 1
a36 1
_archdir?=	$S/arch/amd46
@


1.22
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.21 2009/12/03 17:51:22 deraadt Exp $
d32 5
a36 1
AMD64=	$S/arch/amd64
d115 1
a115 1
assym.h: $S/kern/genassym.sh ${AMD64}/amd64/genassym.cf Makefile
d117 1
a117 1
	    ${PARAM} < ${AMD64}/amd64/genassym.cf > assym.h.tmp && \
d158 2
a159 2
AFILES=	${AMD64}/amd64/locore.S ${AMD64}/amd64/vector.S ${AMD64}/amd64/copy.S \
	${AMD64}/amd64/spl.S
d167 1
a167 1
	    ${CPPFLAGS} ${PARAM} < ${AMD64}/amd64/genassym.cf
d195 1
a195 1
locore.o: ${AMD64}/amd64/locore.S assym.h
d198 1
a198 1
vector.o: ${AMD64}/amd64/vector.S assym.h
d201 1
a201 1
copy.o: ${AMD64}/amd64/copy.S assym.h
d204 1
a204 1
spl.o: ${AMD64}/amd64/spl.S assym.h
@


1.21
log
@Stop using the linker script.  Something is arranging memory just so
resulting in kernels starting up the other cpu's incorrectly on processors
with very long pipelines, perhaps some bug instruction prefetch dependency
in the mptramp.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.18 2009/08/09 23:04:49 miod Exp $
a2 2
# Makefile for OpenBSD
#
d19 2
a20 2
# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.
d176 3
a178 3
 
# depend on network or filesystem configuration 
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile 
d187 1
a187 1
# depend on CPU configuration 
@


1.20
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.19 2009/08/13 13:35:54 weingart Exp $
d52 1
a52 1
LINKFLAGS=	-T ${AMD64}/conf/kern.ldscript -X
d102 1
@


1.19
log
@Start using a linking script for this kernel.  This
should help in future using large pages for text/etc.
Also, since we do not use the .eh frame stuff, we can
nuke them, saving some bytes...

Ok kettenis@@, "more control over linking is a good thing,
but I can't comment further" art@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.18 2009/08/09 23:04:49 miod Exp $
d130 1
a130 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.18
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.17 2009/07/10 13:51:47 jsg Exp $
d52 1
a52 1
LINKFLAGS=	-Ttext 0xffffffff801001e0 -e start -X
a101 1
LINKFLAGS+=	-X
@


1.17
log
@Switch away from using -traditional-cpp to iso/ansi cpp for asm files.
More architectures hopefully to follow.
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.16 2009/03/23 18:51:51 guenther Exp $
d55 6
d138 1
a138 1
	    [Ee]rrs linterrs makelinks assym.h
d160 1
a160 1
.depend: ${SRCS} assym.h param.c ${APMINC}
d169 5
@


1.16
log
@Add missing dependency generation for assym.h (...the lack of which
made testers of art's affinity diff go insane)

ok krw@@ miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.15 2007/11/30 07:52:06 miod Exp $
d51 1
a51 1
AFLAGS=		-x assembler-with-cpp -traditional-cpp -D_LOCORE
@


1.15
log
@Define NORMAL_C_NOP everywhere.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.14 2007/11/25 18:25:27 deraadt Exp $
d158 5
@


1.14
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.13 2007/11/25 11:23:33 deraadt Exp $
d64 1
@


1.13
log
@Get rid of the kernel 'libcompat' framework, and instead use conf/files to
decide which files must be pulled into the kernel.  Also conditionalize
the pulling of those files based on the COMPAT_* options.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.12 2007/10/29 22:29:13 espie Exp $
a58 8
### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

d86 1
a86 1
SYSTEM_OBJ=	locore.o vector.o copy.o spl.o param.o ioconf.o ${OBJS} ${LIBKERN}
d117 3
@


1.12
log
@run depend so that SFILES depend on assym.h, which allows them to build
with make -j on fast SMP boxes.
noticed by robert@@, input by miod, kettenis, okay toby@@, robert@@,
and tested to work if people build kernels correctly...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.11 2007/07/27 13:39:00 deraadt Exp $
a66 8
### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

d94 1
a94 2
SYSTEM_OBJ=	locore.o vector.o copy.o spl.o \
		param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
@


1.11
log
@grow ramdisk filesystem size
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.10 2006/11/07 09:09:42 otto Exp $
d170 1
a170 1
#	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
@


1.10
log
@Timecounters for amd64. Diff by art@@, tested by many. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.9 2006/07/27 05:58:11 miod Exp $
d36 1
a36 1
INCLUDES=	-nostdinc -I. -I$S/arch -I$S
@


1.9
log
@Compile all kernels with -Wstack-usage-larger-than-2047, now that all
offending code has been taken out and shot. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.8 2006/06/01 21:46:27 pascoe Exp $
d102 1
a102 1
SYSTEM_OBJ=	locore.o vector.o copy.o microtime.o spl.o \
d164 1
a164 1
	${AMD64}/amd64/microtime.S ${AMD64}/amd64/spl.S
a196 3
	${NORMAL_S}

microtime.o: ${AMD64}/amd64/microtime.S assym.h
@


1.8
log
@Right at the end of a debug kernel build, the current Makefile copies bsd
(with symbols) to bsd.gdb, then strips bsd.  This diff makes it rename the
file with symbols, and then asks strip to output the stripped version as
bsd.  Avoids a potentially lengthy wait when we would otherwise copy the
large (50MB+) kernel with debug symbols.

ok reyk@@ ketennis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.7 2005/03/31 02:53:48 tedu Exp $
d39 2
a40 1
		-Wno-uninitialized -Wno-format -Wno-main -Wno-sign-compare
@


1.7
log
@go back to the old trace code, but add -fno-omit-frame-pointer so it works.
makes trace output more reasonable.  ok andreas
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.6 2004/11/19 06:41:13 miod Exp $
d113 3
a115 2
		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@@; ${STRIP} ${STRIPFLAGS} $@@
@


1.6
log
@More aggressive strip flags for non debug kernels; this is a noop on some
architectures, but saves a few dozen KB on alpha and ppc.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.5 2004/05/23 04:03:14 drahn Exp $
d43 1
a43 1
		-fno-builtin-printf -fno-builtin-log
@


1.5
log
@Adjust the link address to elinate the nearly 1MB of pad which was getting
added to amd64 kernel. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.4 2004/02/22 00:08:17 deraadt Exp $
d116 1
a116 1
LINKFLAGS+=	-x
@


1.4
log
@support -DNO_PROPOLICE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.3 2004/02/08 18:30:21 deraadt Exp $
d51 1
a51 1
LINKFLAGS=	-Ttext 0xffffffff80100000 -e start -X
@


1.3
log
@minimum CPPFLAGS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.2 2004/01/28 02:55:57 mickey Exp $
d44 3
@


1.3.2.1
log
@The merge of these files were done to another date than the rest, fix.
@
text
@d1 1
a1 1
#	$OpenBSD$
d37 1
a37 2
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -U__NetBSD__ -D__OpenBSD__ \
		-Damd64 -Dx86_64
a43 1
#		-fno-stack-protector
@


1.3.2.2
log
@Merge with the trunk
@
text
@d37 2
a38 1
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -Damd64 -Dx86_64
d45 1
a45 3
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
d50 1
a50 1
LINKFLAGS=	-Ttext 0xffffffff801001e0 -e start -X
@


1.2
log
@duh. no need for swapgeneric here too; from deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.amd64,v 1.1 2004/01/28 01:39:39 mickey Exp $
d37 1
a37 2
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -U__NetBSD__ -D__OpenBSD__ \
		-Damd64 -Dx86_64
a43 1
#		-fno-stack-protector
@


1.1
log
@an amd64 arch support.
hacked by art@@ from netbsd sources and then later debugged
by me into the shape where it can host itself.
no bootloader yet as needs redoing from the
recent advanced i386 sources (anyone? ;)
@
text
@d1 1
a1 1
#	$OpenBSD$
d146 1
a146 1
	    ${CFILES} ${AMD64}/amd64/swapgeneric.c ioconf.c param.c | \
@

