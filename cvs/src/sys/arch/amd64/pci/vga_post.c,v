head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.10
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.8
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.14
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.12
	OPENBSD_5_0:1.4.0.10
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.8
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.6
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.10
date	2015.08.28.00.03.53;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	NdgfPIGUgJxQPnT7;

1.9
date	2015.03.14.03.38.46;	author jsg;	state Exp;
branches;
next	1.8;
commitid	p4LJxGKbi0BU2cG6;

1.8
date	2014.11.16.12.30.56;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	yv0ECmCdICvq576h;

1.7
date	2014.07.12.18.44.41;	author tedu;	state Exp;
branches;
next	1.6;
commitid	uKVPYMN2MLxdZxzH;

1.6
date	2014.04.08.09.02.51;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2012.12.05.23.20.10;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.14.20.27.24;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.06.03.20.57;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.06.00.49.08;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.06.00.35.00;	author pirofti;	state Exp;
branches;
next	;


desc
@@


1.10
log
@fairly simple sizes for free(); ok tedu
@
text
@/* $OpenBSD: vga_post.c,v 1.9 2015/03/14 03:38:46 jsg Exp $ */
/* $NetBSD: vga_post.c,v 1.12 2009/03/15 21:32:36 cegger Exp $ */

/*-
 * Copyright (c) 2007 Joerg Sonnenberger <joerg@@NetBSD.org>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <uvm/uvm_extern.h>

#include <machine/pio.h>

#include <dev/x86emu/x86emu.h>
#include <dev/x86emu/x86emu_regs.h>

#define	BASE_MEMORY	65536	/* How much memory to allocate in Real Mode */

struct vga_post {
	struct x86emu emu;
	vaddr_t sys_image;
	uint32_t initial_eax;
	uint8_t bios_data[PAGE_SIZE];
	struct pglist ram_backing;
};

#ifdef DDB
static struct vga_post *ddb_vgapostp;
void ddb_vgapost(void);
#endif

static uint8_t
vm86_emu_inb(struct x86emu *emu, uint16_t port)
{
	if (port == 0xb2) /* APM scratch register */
		return 0;

	if (port >= 0x80 && port < 0x88) /* POST status register */
		return 0;

	return inb(port);
}

static uint16_t
vm86_emu_inw(struct x86emu *emu, uint16_t port)
{
	if (port >= 0x80 && port < 0x88) /* POST status register */
		return 0;

	return inw(port);
}

static uint32_t
vm86_emu_inl(struct x86emu *emu, uint16_t port)
{
	if (port >= 0x80 && port < 0x88) /* POST status register */
		return 0;

	return inl(port);
}

static void
vm86_emu_outb(struct x86emu *emu, uint16_t port, uint8_t val)
{
	if (port == 0xb2) /* APM scratch register */
		return;

	if (port >= 0x80 && port < 0x88) /* POST status register */
		return;

	outb(port, val);
}

static void
vm86_emu_outw(struct x86emu *emu, uint16_t port, uint16_t val)
{
	if (port >= 0x80 && port < 0x88) /* POST status register */
		return;

	outw(port, val);
}

static void
vm86_emu_outl(struct x86emu *emu, uint16_t port, uint32_t val)
{
	if (port >= 0x80 && port < 0x88) /* POST status register */
		return;

	outl(port, val);
}

struct vga_post *
vga_post_init(int bus, int device, int function)
{
	struct vga_post *sc;
	vaddr_t iter;
	struct vm_page *pg;
	vaddr_t sys_image, sys_bios_data;
	int err;

	sys_bios_data = uvm_km_valloc(kernel_map, PAGE_SIZE);
	if (sys_bios_data == 0)
		return NULL;

	sys_image = uvm_km_valloc(kernel_map, 1024 * 1024);
	if (sys_image == 0) {
		uvm_km_free(kernel_map, sys_bios_data, PAGE_SIZE);
		return NULL;
	}
	sc = malloc(sizeof(*sc), M_DEVBUF, M_WAITOK|M_ZERO);

	TAILQ_INIT(&sc->ram_backing);
	err = uvm_pglistalloc(BASE_MEMORY, 0, (paddr_t)-1, 0, 0,
	    &sc->ram_backing, BASE_MEMORY/PAGE_SIZE, UVM_PLA_WAITOK);
	if (err) {
		uvm_km_free(kernel_map, sc->sys_image, 1024 * 1024);
		free(sc, M_DEVBUF, sizeof(*sc));
		return NULL;
	}

	sc->sys_image = sys_image;
	sc->emu.sys_private = sc;

	pmap_kenter_pa(sys_bios_data, 0, PROT_READ);
	pmap_update(pmap_kernel());
	memcpy((void *)sc->bios_data, (void *)sys_bios_data, PAGE_SIZE);
	pmap_kremove(sys_bios_data, PAGE_SIZE);
	uvm_km_free(kernel_map, sys_bios_data, PAGE_SIZE);

	iter = 0;
	TAILQ_FOREACH(pg, &sc->ram_backing, pageq) {
		pmap_kenter_pa(sc->sys_image + iter, VM_PAGE_TO_PHYS(pg),
		    PROT_READ | PROT_WRITE);
		iter += PAGE_SIZE;
	}
	KASSERT(iter == BASE_MEMORY);

	for (iter = 640 * 1024; iter < 1024 * 1024; iter += PAGE_SIZE)
		pmap_kenter_pa(sc->sys_image + iter, iter,
		    PROT_READ | PROT_WRITE);
	pmap_update(pmap_kernel());

	memset(&sc->emu, 0, sizeof(sc->emu));
	x86emu_init_default(&sc->emu);
	sc->emu.emu_inb = vm86_emu_inb;
	sc->emu.emu_inw = vm86_emu_inw;
	sc->emu.emu_inl = vm86_emu_inl;
	sc->emu.emu_outb = vm86_emu_outb;
	sc->emu.emu_outw = vm86_emu_outw;
	sc->emu.emu_outl = vm86_emu_outl;

	sc->emu.mem_base = (char *)sc->sys_image;
	sc->emu.mem_size = 1024 * 1024;

	sc->initial_eax = bus * 256 + device * 8 + function;
#ifdef DDB
	ddb_vgapostp = sc;
#endif
	return sc;
}

void
vga_post_call(struct vga_post *sc)
{
	sc->emu.x86.R_EAX = sc->initial_eax;
	sc->emu.x86.R_EDX = 0x00000080;
	sc->emu.x86.R_DS = 0x0040;
	sc->emu.x86.register_flags = 0x3200;

	memcpy((void *)sc->sys_image, sc->bios_data, PAGE_SIZE);

	/* stack is at the end of the first 64KB */
	sc->emu.x86.R_SS = 0;
	sc->emu.x86.R_ESP = 0;

	/* Jump straight into the VGA BIOS POST code */
	x86emu_exec_call(&sc->emu, 0xc000, 0x0003);
}

void
vga_post_free(struct vga_post *sc)
{
	uvm_pglistfree(&sc->ram_backing);
	pmap_kremove(sc->sys_image, 1024 * 1024);
	uvm_km_free(kernel_map, sc->sys_image, 1024 * 1024);
	pmap_update(pmap_kernel());
	free(sc, M_DEVBUF, sizeof(*sc));
}

#ifdef DDB
void
ddb_vgapost(void)
{

	if (ddb_vgapostp)
		vga_post_call(ddb_vgapostp);
	else
		printf("ddb_vgapost: vga_post not initialized\n");
}
#endif
@


1.9
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: vga_post.c,v 1.8 2014/11/16 12:30:56 deraadt Exp $ */
d144 1
a144 1
		free(sc, M_DEVBUF, 0);
d214 1
a214 1
	free(sc, M_DEVBUF, 0);
@


1.8
log
@Replace a plethora of historical protection options with just
PROT_NONE, PROT_READ, PROT_WRITE, and PROT_EXEC from mman.h.
PROT_MASK is introduced as the one true way of extracting those bits.
Remove UVM_ADV_* wrapper, using the standard names.
ok doug guenther kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: vga_post.c,v 1.7 2014/07/12 18:44:41 tedu Exp $ */
a39 1
#include <machine/vga_post.h>
@


1.7
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/* $OpenBSD: vga_post.c,v 1.6 2014/04/08 09:02:51 mpi Exp $ */
d152 1
a152 1
	pmap_kenter_pa(sys_bios_data, 0, VM_PROT_READ);
d161 1
a161 1
				VM_PROT_READ | VM_PROT_WRITE);
d168 1
a168 1
				VM_PROT_READ | VM_PROT_WRITE);
@


1.6
log
@No need for <uvm/uvm_page.h>
@
text
@d1 1
a1 1
/* $OpenBSD: vga_post.c,v 1.5 2012/12/05 23:20:10 deraadt Exp $ */
d145 1
a145 1
		free(sc, M_DEVBUF);
d215 1
a215 1
	free(sc, M_DEVBUF);
@


1.5
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: vga_post.c,v 1.4 2009/06/14 20:27:24 miod Exp $ */
d36 1
a37 1
#include <uvm/uvm_page.h>
a39 1

@


1.4
log
@Make sure the pglist is TAILQ_INIT()'ed before invoking uvm_pglistalloc().
ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: vga_post.c,v 1.3 2009/06/06 03:20:57 deraadt Exp $ */
a31 2

#include <sys/cdefs.h>
@


1.3
log
@option X86EMU is how this subsystem is brought into a kernel
@
text
@d1 1
a1 1
/* $OpenBSD: vga_post.c,v 1.2 2009/06/06 00:49:08 deraadt Exp $ */
d143 1
d167 1
a167 1
	KASSERT(iter == 65536);
@


1.2
log
@fix include paths
@
text
@d1 1
a2 1
/* $OpenBSD: vga_post.c,v 1.1 2009/06/06 00:35:00 pirofti Exp $ */
d51 1
a51 1
	struct X86EMU emu;
d64 1
a64 1
vm86_emu_inb(struct X86EMU *emu, uint16_t port)
d76 1
a76 1
vm86_emu_inw(struct X86EMU *emu, uint16_t port)
d85 1
a85 1
vm86_emu_inl(struct X86EMU *emu, uint16_t port)
d94 1
a94 1
vm86_emu_outb(struct X86EMU *emu, uint16_t port, uint8_t val)
d106 1
a106 1
vm86_emu_outw(struct X86EMU *emu, uint16_t port, uint16_t val)
d115 1
a115 1
vm86_emu_outl(struct X86EMU *emu, uint16_t port, uint32_t val)
d174 1
a174 1
	X86EMU_init_default(&sc->emu);
d207 1
a207 1
	X86EMU_exec_call(&sc->emu, 0xc000, 0x0003);
@


1.1
log
@Add vga bios repost support. Fetched from the NetBSD tree mostly.

Tested on multiple i386 and it works, amd64 works also with a few
exceptions that will get fixed.

The initial effort of importing was done by oga@@, thanks!

Lots of testing and debugging by mlarkin@@ and me.
Okay deraadt@@, oga@@, mlarkin@@.
@
text
@d2 1
a2 1
/* $OpenBSD$ */
d45 2
a46 2
#include <lib/libkern/x86emu.h>
#include <lib/libkern/x86emu_regs.h>
@

