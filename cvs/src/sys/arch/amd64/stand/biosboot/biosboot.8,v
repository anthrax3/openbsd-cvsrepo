head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.8
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.10
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.8
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.4
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.10
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.12
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	SMP:1.1.0.2;
locks; strict;
comment	@.\" @;


1.12
date	2015.09.10.15.16.43;	author schwarze;	state Exp;
branches;
next	1.11;
commitid	yPhLfPulVSum2r0H;

1.11
date	2013.10.28.15.15.08;	author stsp;	state Exp;
branches;
next	1.10;

1.10
date	2011.12.03.23.01.21;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2010.08.10.20.34.16;	author sobrado;	state Exp;
branches;
next	1.8;

1.8
date	2010.07.09.17.36.38;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.31.19.20.02;	author jmc;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.15.09.19.07;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.15.09.12.04;	author jmc;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.03.10.15.37;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.12.15.18.11;	author jmc;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.20.11.04.14;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.03.12.09.47;	author mickey;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.25;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.12
log
@reduce .Nd to one line and kill .Tn while here
@
text
@.\"	$OpenBSD: biosboot.8,v 1.11 2013/10/28 15:15:08 stsp Exp $
.\"
.\" Copyright (c) 2003 Tom Cosgrove <tom.cosgrove@@arches-consulting.com>
.\" Copyright (c) 1997 Michael Shalayeff
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd $Mdocdate: October 28 2013 $
.Dt BIOSBOOT 8 amd64
.Os
.Sh NAME
.Nm biosboot
.Nd amd64-specific first-stage system bootstrap
.Sh DESCRIPTION
This small program (roughly 512 bytes of code) is responsible for
loading the second-stage
.Xr boot 8
program (typically /boot), which in turn will load the kernel.
.Pp
.Nm
must be installed by
.Xr installboot 8 .
As part of the installation,
.Xr installboot 8
patches
.Nm
with information about the location of
.Xr boot 8
on disk.
Specifically, it writes the filesystem block number of
.Xr boot 8 Ns 's
inode,
the offset within this block of the inode,
and various filesystem parameters (taken from the superblock)
required to convert filesystem blocks to disk sectors.
Usually,
.Xr boot 8
is loaded from the root filesystem of the boot disk.
If the boot disk is a
.Xr softraid 4
volume,
.Xr installboot 8
arranges for a copy of
.Xr boot 8
to be loaded from a dedicated single-inode filesystem located within
the volume's meta data area.
.Pp
You must re-run
.Xr installboot 8
whenever
.Xr boot 8
is changed, as its inode may change.
While it should not be necessary,
it may also be advisable to re-run
.Xr installboot 8
if you move your disk between machines and/or controllers.
.Pp
When
.Nm
receives control from either the BIOS or the
master boot record (MBR) it will print the message:
.Pp
.Dl Loading
.Pp
followed by a dot for every filesystem block it attempts to load.
If /boot is loaded successfully,
.Nm
will put the cursor on the next line just before
transferring control to the newly-loaded program.
.Pp
If possible,
.Nm
will read disk sectors using calls detailed in the Phoenix
Enhanced Disk Drive Specification (EDD, sometimes known as LBA, reads).
It will fall back to CHS reads only if EDD calls are not available.
However, to allow users to boot on hardware that claims LBA capability,
but which requires CHS reads in order to boot,
the user may hold down either Shift key during boot.
If
.Nm
detects this, it will force itself to use CHS calls, ignoring
any LBA capability.
This will of course prevent booting if /boot lies above the 8 GB
CHS limit.
There is an exported symbol
.Dq force_chs
of type u_int8_t
which may be set to 1 to force CHS reads always.
(However, no tool is currently provided to set this flag.)
.Sh DIAGNOSTICS
.Nm
prints a
.Sq !\&
before the
.Dq Loading
message if it is being forced to use CHS rather than LBA reads
(by the user holding down either Shift key during boot,
or having set the
.Dq force_chs
flag in the boot sector).
.Pp
.Nm
prints a
.Sq ;\&
after the
.Dq Loading
message if it is going to use CHS reads for any reason.
For example, when booting from floppy or CD-ROM.
.Pp
.Nm
may fail with any of the following error messages:
.Bl -tag -width ERR_X__
.It Er ERR I
Too many indirect blocks.
.Nm
is capable of reading the direct blocks in
.Xr boot 8 Ns 's
inode (the location of which is patched into
.Nm
by
.Xr installboot 8 )
and the first indirect block,
but it is not capable of reading further indirect blocks.
This error indicates that further such indirect blocks were found.
The system will not be able to boot.
.Pp
This is unlikely to ever happen in practice, as
.Xr boot 8
has to be quite large for this to be an issue.
The smallest possible filesystem block size is 512 bytes
(one sector per filesystem block).
On such a system, there are 140 filesystem blocks that
.Nm
can read, so
.Xr boot 8
can be up to 70 KB.
.Pp
However, even on floppy disks the filesystem block size is 1024 bytes.
This allows
.Xr boot 8
to occupy up to 268 disk blocks,
i.e. to be 268 KB.
On hard disks (default filesystem block size 16 KB)
4,108 disk blocks are available, to allow
.Xr boot 8
to be over 64 MB in size!
(Only direct blocks are required for
.Xr boot 8 Ns s
of up to 192 KB.)
.It Er ERR M
Bad magic.
The ELF
.Dq magic number
\e7fELF in
.Xr boot 8 Ns 's
header was not found.
This indicates that the first block of
.Xr boot 8
was not read correctly.
This could be due to disk corruption,
failing to run
.Xr installboot 8 ,
giving an invalid
.Xr boot 8
program as the
.Ar boot
argument to
.Xr installboot 8 ,
or
incorrect geometry translation.
.It Er ERR R
Read error.
The BIOS returned an error indication when
.Nm
attempted to read a disk sector.
This might be any media error, including bad sectors (common on floppy disks),
and invalid sectors (can occur with bad geometry translations).
.Pp
If this error occurs during an LBA boot (no
.Sq ;\&
after
.Dq Loading ) ,
then a CHS boot may succeed.
To do this, you should reboot, then hold down either Shift key
before
.Nm
starts.
You should see a
.Sq !\&
before
.Dq Loading
as confirmation that your
override was accepted.
.It Er ERR X
Can't boot.
Issued when trying to read sectors in CHS mode,
but the BIOS call
.Em get\ drive\ parameters
failed or gave a value of 0 for the number of sectors per track.
In either case, it is not possible for
.Nm
to calculate the (cylinder, head, sector) values required to
read any sectors.
.El
.Sh NOTES
Using
.Nm
as the MBR,
as has been done in the past,
is not recommended, and is not supported.
Instead, create a single
.Xr fdisk 8
partition that spans the entire disk.
.Pp
Despite the support for
.Xr boot 8
over the 8 GB boundary,
good
.Xr disklabel 8
partitioning practices should still be followed.
.Sh FILES
.Bl -tag -width /usr/mdec/biosbootxx -compact
.It Pa /usr/mdec/mbr
Master Boot Record block
.It Pa /usr/mdec/biosboot
primary bootstrap
.It Pa /boot
secondary bootstrap
.It Pa /usr/mdec/pxeboot
PXE bootstrap
.It Pa /bsd
.Ox
kernel
.It Pa /bsd.sp
.Ox
kernel for single processor machines
.It Pa /bsd.mp
.Ox
kernel for multiprocessor machines
.It Pa /bsd.rd
.Ox
kernel for installation/recovery
.El
.Sh SEE ALSO
.Xr softraid 4 ,
.Xr boot 8 ,
.Xr boot_amd64 8 ,
.Xr disklabel 8 ,
.Xr fdisk 8 ,
.Xr installboot 8 ,
.Xr pxeboot 8
.Sh HISTORY
.Nm
was originally written by Michael Shalayeff for
.Ox 2.1 .
However it was based on bootstrap code from older versions of this
operating system, other operating systems, other programs, and
other people's work.
.Pp
It was significantly revised in December 2003 by Tom Cosgrove,
in order to support LBA disk access (via the Phoenix Enhanced Disk
Drive Specification API).
At that time the internal table of disk blocks was removed, and
.Nm
modified to read filesystem block numbers from the inode.
.Sh BUGS
.Nm
should perform and verify a checksum across the entire loaded
.Xr boot 8
image,
rather than just checking the magic number in the first block.
.Pp
There is no BIOS error number reported nor is the location of the error
reported.
.Pp
You can pick your motherboard, and you can pick your BIOS,
but you can't pick your motherboard's BIOS.
@


1.11
log
@Document softraid boot process for i386/amd64.

Requested by Adam Thompson.
suggestions and ok deraadt, earlier version ok jmc
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.10 2011/12/03 23:01:21 schwarze Exp $
d28 1
a28 1
.Dd $Mdocdate: December 3 2011 $
d33 1
a33 2
.Nd
amd64-specific first-stage system bootstrap
@


1.10
log
@Remove an OpenBSD-specific tweak regarding .Xr spacing
and make it compatible with bsd.lv mandoc and with groff-1.21.
This tweak was originally added for compatibility with groff-1.15,
which is no longer needed.

ok jmc@@ kristaps@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.9 2010/08/10 20:34:16 sobrado Exp $
d28 1
a28 1
.Dd $Mdocdate: August 10 2010 $
d57 11
d266 1
@


1.9
log
@add a description for bsd.sp where appropriate; while here, write
"multiprocessor" in a consistent way.

written with lots of good advice from jmc@@, who noted that changing
hier(7) was not enough and carefully reviewed this diff.

ok jmc@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.8 2010/07/09 17:36:38 deraadt Exp $
d28 1
a28 1
.Dd $Mdocdate: July 9 2010 $
d52 1
a52 1
.Xr boot 8 's
d127 1
a127 1
.Xr boot 8 's
d158 1
a158 1
.Xr boot 8 s
d165 1
a165 1
.Xr boot 8 's
@


1.8
log
@un-terminated string found when comparing to i386 boot code.  These
should be 100% identical.
ok toby
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.7 2007/05/31 19:20:02 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate: May 31 2007 $
d244 3
d249 1
a249 1
kernel for multi-processor machines
@


1.7
log
@convert to new .Dd format;
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.6 2005/07/15 09:19:07 jmc Exp $
d28 1
a28 1
.Dd $Mdocdate$
d261 1
a261 2
.Ox 2.1
on the i386 platform.
@


1.6
log
@kill trailing whitespace;
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.5 2005/07/15 09:12:04 jmc Exp $
d28 1
a28 1
.Dd February 20, 2004
@


1.5
log
@- add /bsd.rd to FILES
- for amd64/i386 add /bsd.mp to FILES

ok tom@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.4 2004/04/03 10:15:37 jmc Exp $
d261 1
a261 1
.Ox 2.1 
@


1.4
log
@add pxeboot references to FILES and SEE ALSO;
ok deraadt@@
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.3 2004/03/12 15:18:11 jmc Exp $
d244 6
@


1.3
log
@missing .El here, too;
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.2 2004/02/20 11:04:14 miod Exp $
d239 2
d250 2
a251 1
.Xr installboot 8
@


1.2
log
@This is amd64, not i386.
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.1 2004/02/03 12:09:47 mickey Exp $
d214 1
@


1.1
log
@das boot; das cloned das from das i386
@
text
@d1 1
a1 1
.\"	$OpenBSD: biosboot.8,v 1.18 2004/01/26 23:21:49 tom Exp $
d28 2
a29 2
.Dd December 23, 2003
.Dt BIOSBOOT 8 i386
d34 1
a34 1
i386-specific first-stage system bootstrap
d244 1
a244 1
.Xr boot_i386 8 ,
d251 2
a252 1
.Ox 2.1 .
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
.\"	$OpenBSD$
d28 2
a29 2
.Dd February 20, 2004
.Dt BIOSBOOT 8 amd64
d34 1
a34 1
amd64-specific first-stage system bootstrap
a213 1
.El
a237 2
.It Pa /usr/mdec/pxeboot
PXE bootstrap
d244 1
a244 1
.Xr boot_amd64 8 ,
d247 1
a247 2
.Xr installboot 8 ,
.Xr pxeboot 8
d251 1
a251 2
.Ox 2.1 
on the i386 platform.
@


