head	1.33;
access;
symbols
	OPENBSD_6_1:1.32.0.4
	OPENBSD_6_1_BASE:1.32
	OPENBSD_6_0:1.27.0.4
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.26.0.8
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.21.0.2
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.19.0.2
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.11.0.20
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.18
	OPENBSD_5_0:1.11.0.16
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.14
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.12
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.8
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.10
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.6
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@# @;


1.33
date	2017.05.30.22.32.10;	author naddy;	state Exp;
branches;
next	1.32;
commitid	ZnHLUGxOdWWbvSX2;

1.32
date	2016.09.18.16.34.59;	author jsing;	state Exp;
branches;
next	1.31;
commitid	xxSOamF7jPcxnio1;

1.31
date	2016.09.11.17.51.21;	author jsing;	state Exp;
branches;
next	1.30;
commitid	OdBRlx3Vvs2tfqrF;

1.30
date	2016.09.11.15.54.11;	author jsing;	state Exp;
branches;
next	1.29;
commitid	m28Q0aUDbVqwDb3p;

1.29
date	2016.09.10.16.38.16;	author jsing;	state Exp;
branches;
next	1.28;
commitid	Guvt83tYQgzHIRwk;

1.28
date	2016.07.30.03.25.48;	author guenther;	state Exp;
branches;
next	1.27;
commitid	HVbAtwruDlJazNH2;

1.27
date	2015.09.02.01.52.25;	author yasuoka;	state Exp;
branches;
next	1.26;
commitid	CUwlbzT4LejFC15d;

1.26
date	2014.07.15.22.14.37;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	NR8siXEkpaNp3MWn;

1.25
date	2014.07.13.21.18.44;	author jasper;	state Exp;
branches;
next	1.24;
commitid	Y3LcLObEiHDZvy27;

1.24
date	2014.07.13.09.26.08;	author jasper;	state Exp;
branches;
next	1.23;
commitid	Cnjup0HpCIRrcQ6o;

1.23
date	2014.07.12.21.54.57;	author jasper;	state Exp;
branches;
next	1.22;
commitid	3HeD4LaLGiS22I3y;

1.22
date	2013.12.28.02.51.06;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2013.06.02.21.01.48;	author guenther;	state Exp;
branches;
next	1.20;

1.20
date	2013.04.23.16.41.13;	author jsing;	state Exp;
branches;
next	1.19;

1.19
date	2013.01.18.21.09.04;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2013.01.17.12.37.44;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2013.01.17.12.25.11;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2012.10.29.13.56.25;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2012.10.09.11.43.22;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2012.09.25.09.01.03;	author pascal;	state Exp;
branches;
next	1.13;

1.13
date	2012.08.29.17.45.00;	author pascal;	state Exp;
branches;
next	1.12;

1.12
date	2012.08.21.14.46.18;	author pascal;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.25.18.25.30;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.30.01.25.43;	author tom;	state Exp;
branches;
next	1.9;

1.9
date	2007.05.29.08.16.54;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.29.00.03.08;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.27.18.38.33;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.01.13.20.23;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.30.14.37.39;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.03.13.18.05;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.09.21.15.21;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.24.15.34.59;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.21.18.53.38;	author tom;	state Exp;
branches;
next	;


desc
@@


1.33
log
@Allow building the bootstrap with clang:
* skip the integrated assembler for assym.h
* use as(1) to build biosboot.S and the various versions of srt0.S
ok deraadt@@
@
text
@#	$OpenBSD: Makefile,v 1.32 2016/09/18 16:34:59 jsing Exp $

MAN=	cdboot.8

.if ${MACHINE} == "amd64"
S=	${.CURDIR}/../../../..
SADIR=	${.CURDIR}/..

PROG=	cdboot
SRCS=	srt0.S boot.c conf.c
LD?=	ld
SIZE?=	size
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -nopie -znorelro
LDFLAGS+=-melf_i386 -L/usr/libdata
INSTALL_STRIP=
BINMODE=644

.PATH:	${SADIR}/libsa
SRCS+=	machdep.c dev_i386.c exec_i386.c cmd_i386.c
SRCS+=	gidt.S random_i386.S biosdev.c bioscons.c gateA20.c \
	memprobe.c diskprobe.c time.c
SRCS+=	softraid_amd64.c

.PATH:	${S}/stand/boot
SRCS+=	cmd.c vars.c bootarg.c

.PATH:	${S}/lib/libsa
SRCS+=	alloc.c exit.c getchar.c putchar.c strcmp.c strlen.c \
	strncmp.c memcmp.c memcpy.c memset.c printf.c snprintf.c \
	strerror.c strncpy.c strtol.c strtoll.c ctime.c strlcpy.c
SRCS+=	close.c closeall.c dev.c disklabel.c dkcksum.c fstat.c lseek.c \
	open.c read.c stat.c cread.c readdir.c cons.c loadfile.c \
	elf32.c elf64.c
SRCS+=	ufs.c cd9660.c
SRCS+=	aes_xts.c bcrypt_pbkdf.c blowfish.c explicit_bzero.c hmac_sha1.c \
	pkcs5_pbkdf2.c rijndael.c sha1.c sha2.c softraid.c

.PATH:	${S}/lib/libkern/arch/i386 ${S}/lib/libkern
SRCS+=	divdi3.c moddi3.c qdivrem.c

.PATH:	${S}/lib/libz
SRCS+=	adler32.c crc32.c inflate.c inftrees.c

.depend srt0.o gidt.o: assym.h

${PROG}: $(OBJS)
	$(LD) $(LDFLAGS) -o ${PROG} $(OBJS)
	@@$(SIZE) $(PROG)
	@@if [ -x ${.OBJDIR}/${PROG} ]; then \
		objcopy -O binary ${PROG} ${.OBJDIR}/.tmp;\
		mv -f ${.OBJDIR}/.tmp ${.OBJDIR}/${PROG}; \
		ls -l ${.OBJDIR}/${PROG}; \
	fi

.else
NOPROG=
.endif

.include <bsd.prog.mk>

CPPFLAGS+=-DSOFTRAID
CPPFLAGS+=-DBOOTMAGIC=$(BOOTMAGIC) ${DEBUGFLAGS}
CPPFLAGS+=-DLINKADDR=${LINKADDR}
CPPFLAGS+=-DSLOW -DSMALL -DNOBYFOUR -DNO_GZIP -DDYNAMIC_CRC_TABLE
CPPFLAGS+=-I${S}/stand/boot
CFLAGS+=-m32
CFLAGS+=${SACFLAGS} -D__INTERNAL_LIBSA_CREAD
CFLAGS+=-DOSREV=\"${OSREV}\" -DMACHINE=\"${MACHINE}\"
CFLAGS+=-DKERNEL=\"/${OSREV}/${MACHINE}/bsd.rd\"
CFLAGS+=-fno-pie
AFLAGS+=${NO_INTEGR_AS}
AFLAGS+=-m32
AFLAGS+=-fno-pie
@


1.32
log
@Add bcrypt pbkdf support to the softraid crypto boot loader code.

Based on a diff from djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.31 2016/09/11 17:51:21 jsing Exp $
d71 1
@


1.31
log
@Switch amd64 to libsa MI softraid.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.30 2016/09/11 15:54:11 jsing Exp $
d35 2
a36 2
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pkcs5_pbkdf2.c rijndael.c \
	sha1.c softraid.c
@


1.30
log
@Rename softraid boot files, which are currently in an MD location. This
will allow us to bring in a MI softraid.{c,h} in lib/libsa.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.29 2016/09/10 16:38:16 jsing Exp $
d35 2
a36 1
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pkcs5_pbkdf2.c rijndael.c sha1.c
@


1.29
log
@Rename libsa pbkdf2.c to pkcs5_pbkdf2.c so that we match libutil.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 2016/07/30 03:25:48 guenther Exp $
d22 1
a22 1
SRCS+=	softraid.c
@


1.28
log
@Prep for relro: make sure it's off for any non-PIE stand/ program

ok millert@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 2015/09/02 01:52:25 yasuoka Exp $
d35 1
a35 1
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pbkdf2.c rijndael.c sha1.c
@


1.27
log
@Initial commit of uefi boot loader of OpenBSD.

ok deraadt yuo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 2014/07/15 22:14:37 deraadt Exp $
d13 1
a13 1
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -nopie
@


1.26
log
@mode 644 for installing these files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 2014/07/13 21:18:44 jasper Exp $
d20 1
a20 1
SRCS+=	gidt.S random_i386.S alloca.S biosdev.c bioscons.c gateA20.c \
@


1.25
log
@fix even more trailing tabs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2014/07/13 09:26:08 jasper Exp $
d16 1
@


1.24
log
@move putchar() into libsa

"sure" miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2014/07/12 21:54:57 jasper Exp $
d13 2
a14 2
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -nopie 
LDFLAGS+=-melf_i386 -L/usr/libdata 
@


1.23
log
@move getchar() into libsa where applicable

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2013/12/28 02:51:06 deraadt Exp $
d27 1
a27 1
SRCS+=	alloc.c exit.c getchar.c strcmp.c strlen.c \
@


1.22
log
@Try to load entropy data from disk:/etc/random.seed, and additionally
use a MD-supplied random function.  Then, insert this into the ELF
openbsd.randomdata of the kernel, so that it has entropy right from
the start.  Some help from jsing for the softraid aspects.
Also tested by phessler
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2013/06/02 21:01:48 guenther Exp $
d27 1
a27 1
SRCS+=	alloc.c exit.c strcmp.c strlen.c \
@


1.21
log
@Revert previous: libsa/ufs.c was fixed to not use big types when not
necessary.  If something crawls in again that needs these we want to know

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2013/04/23 16:41:13 jsing Exp $
d19 1
a19 1
SRCS+=	gidt.S alloca.S biosdev.c bioscons.c gateA20.c \
@


1.20
log
@Include udivdi3/umoddi3 when compiling the amd64/i386 boot blocks - they
are needed for the upcoming type changes.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2013/01/18 21:09:04 espie Exp $
d37 1
a37 1
SRCS+=	divdi3.c moddi3.c qdivrem.c udivdi3.c umoddi3.c
@


1.19
log
@fix bogus dependencies, and allow mkdep to run
checked on amd64 by rpe@@
okay jsing@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2013/01/17 12:37:44 jsing Exp $
d37 1
a37 1
SRCS+=	divdi3.c moddi3.c qdivrem.c
@


1.18
log
@Generate assym.h where we need it, instead of reaching around into other
object directories.

Discussed with deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2012/10/29 13:56:25 jsing Exp $
d42 1
a42 2
${.CURDIR}/srt0.S: assym.h
${SADIR}/libsa/gidt.S: assym.h
@


1.17
log
@Clean up/standardise makefiles for amd64/stand.
@
text
@d42 3
@


1.16
log
@Enable softraid boot support in cdboot(8).
@
text
@d1 1
a1 3
#	$OpenBSD: Makefile,v 1.14 2012/09/25 09:01:03 pascal Exp $

.include "${.CURDIR}/../Makefile.inc"
d6 1
a6 1
S	=${.CURDIR}/../../../..
a17 1
# i386 stuff (so, it will possibly load in the same 64k)
d20 1
a20 1
	memprobe.c diskprobe.c time.c ## biosprobe.c
d42 2
a43 5
#LDADD=	${LIBSA} ${LIBZ}
#DPADD=	${LIBSA} ${LIBZ}

${PROG}: $(OBJS) $(DPADD)
	$(LD) $(LDFLAGS) -o ${PROG} $(OBJS) $(LDADD)
@


1.15
log
@Remove -noinhibit-exec now that we no longer have to deal with
"relocation truncated" linker errors.
@
text
@d24 1
d37 1
d63 1
@


1.14
log
@Reduce the diff between amd64/stand and i386/stand, requested by deraadt@@.
These create essentially the same bootblocks, so the build system should not be
diverging too much, or at least easily diffable.
There is still a lot of work to be done here, but this is the low-hanging fruit.

ok jsing@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2012/08/29 17:45:00 pascal Exp $
d15 1
a15 1
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -noinhibit-exec -nopie 
@


1.13
log
@Get rid of all NOPIE and NOPIE_FLAGS in amd64/stand and use -fno-pie and -nopie
directly instead.  This will be the approach taken by every other arch too
in the near future.  It is easier than relying on bsd.own.mk to set these
correctly.

discussed with and ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2012/08/21 14:46:18 pascal Exp $
d15 2
a16 2
LDFLAGS+=-melf_i386 -nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -noinhibit-exec
LDFLAGS+=-nopie -L/usr/libdata 
d62 1
d64 3
a66 2
CPPFLAGS+=-DLINKADDR=${LINKADDR} -I${S}/stand/boot
CFLAGS+=-m32 ${SACFLAGS} -D__INTERNAL_LIBSA_CREAD
@


1.12
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2007/11/25 18:25:30 deraadt Exp $
d16 1
a16 1
LDFLAGS+=-L/usr/libdata 
d67 1
a67 1
CFLAGS+=${NOPIE_FLAGS}
d69 1
a69 1
AFLAGS+=${NOPIE_FLAGS}
@


1.11
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2007/05/30 01:25:43 tom Exp $
d67 1
d69 1
@


1.10
log
@Pull out the ELF loadfile pieces from the standalone libraries, so that
both 32- and 64-bit versions can be created (previously only one or the
other could be built for a given boot loader).

Use this to allow the i386 and amd64 boot blocks to boot both ELF32 and
ELF64 kernels (i.e. amd64 boot blocks can now load i386 kernels, and
vice versa).  Obviously the system must support LONG mode in order to
successfully run the amd64 kernel once it is loaded.

Advice and discussions from/with dale@@ (going back three years).  Much
testing nick@@ and todd@@; thanks.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2007/05/29 08:16:54 deraadt Exp $
a28 3
.PATH:	${S}/lib/libkern	# for strl* and gcc support
# stand routines
# not required: getfile.c gets.c globals.c strlcat.c
a31 2
# io routines
# not required: ioctl.c write.c
a34 1
# boot filesystems
d36 2
a37 1
# gcc support
@


1.9
log
@forgot to move to using shared boot.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2007/05/29 00:03:08 deraadt Exp $
d38 2
a39 1
	open.c read.c stat.c cread.c readdir.c cons.c loadfile.c
@


1.8
log
@remove support for many alternative kernel choices -- only try /bsd and
not the other stupid names.  that feature was retarded.  tested on a few
architectures by a few people
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2007/05/27 18:38:33 tom Exp $
d12 1
a12 1
SRCS=	srt0.S cdboot.c conf.c
@


1.7
log
@Unbreak cdboot and pxeboot machine memory +/-; bad mpf@@.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2005/08/01 13:20:23 mickey Exp $
d70 1
@


1.6
log
@do not include boot.c since cdboot.c is a copy of it; shrink 1k off the cdboot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2005/07/30 14:37:39 millert Exp $
d34 1
a34 1
	strerror.c strncpy.c strtol.c ctime.c strlcpy.c
d42 1
a42 1
SRCS+=	moddi3.c qdivrem.c
@


1.5
log
@Need moddi3.c qdivrem.c for libz
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2005/05/03 13:18:05 tom Exp $
d26 1
a26 1
SRCS+=	boot.c cmd.c vars.c bootarg.c
@


1.4
log
@The return value from getEBDAaddr() (info) is not used in bios_E820(),
so nuke it.  amd64 no longer needs biosprobe.c listed in SRCS.  Trims
100 bytes from the boot blocks.

Bump versions on boot, cdboot and pxeboot, as I'm getting cautious in
my old age.

ok weingart@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2004/10/09 21:15:21 mickey Exp $
d29 1
a29 1
.PATH:	${S}/lib/libkern	# for strl*
d41 2
@


1.3
log
@size works now on cross-size .o files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2004/08/24 15:34:59 tom Exp $
d23 1
a23 1
	memprobe.c diskprobe.c time.c biosprobe.c
@


1.2
log
@Have cdboot look for /3.6/amd64/bsd.rd first.

"go for it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/08/21 18:53:38 tom Exp $
d50 1
@


1.1
log
@Enter cdboot, a CD-specific second-stage bootrap.  Based on the i386
cdboot that Toby and I put together at the hackathon.

"go for it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/06/23 00:21:49 tom Exp $
d12 1
a12 1
SRCS=	srt0.S conf.c
d66 1
@

