head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.4.0.36
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.28
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.32
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.30
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.26
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.24
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.22
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.20
	OPENBSD_5_0:1.4.0.18
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.16
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.14
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.10
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.12
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.8
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.6
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.3.0.14
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.12
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.6
date	2015.09.18.13.30.56;	author miod;	state Exp;
branches;
next	1.5;
commitid	1BEcCDYd9p5DIl0g;

1.5
date	2015.09.02.01.52.26;	author yasuoka;	state Exp;
branches;
next	1.4;
commitid	CUwlbzT4LejFC15d;

1.4
date	2007.04.28.19.23.10;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.03.21.21.37.41;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.23.01.19.52;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.03.12.09.47;	author mickey;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.25;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove support for building the boot blocks with DEBUGFLAGS=-D_TEST, which is
supposed to create a userland binary in order to test non-boot related
functionality. This feature has been bitrotting in a non-compiling state
for years, and causes a too-many-ifdefs disease now that there are intrusive
EFI changes.

No functional change.
@
text
@/*	$OpenBSD: machdep.c,v 1.5 2015/09/02 01:52:26 yasuoka Exp $	*/

/*
 * Copyright (c) 2004 Tom Cosgrove
 * Copyright (c) 1997-1999 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "libsa.h"
#include "biosdev.h"
#include <machine/apmvar.h>
#include <machine/biosvar.h>

#ifdef EFIBOOT
#include "efiboot.h"
#endif

volatile struct BIOS_regs	BIOS_regs;

#if defined(DEBUG)
#define CKPT(c)	(*(u_int16_t*)0xb8148 = 0x4700 + (c))
#else
#define CKPT(c) /* c */
#endif

void
machdep(void)
{
	int i, j;
	struct i386_boot_probes *pr;

	/*
	 * The list of probe routines is now in conf.c.
	 */
	for (i = 0; i < nibprobes; i++) {
		pr = &probe_list[i];
		if (pr != NULL) {
			printf("%s:", pr->name);

			for (j = 0; j < pr->count; j++) {
				(*(pr->probes)[j])();
			}

			printf("\n");
		}
	}
}

int
check_skip_conf(void)
{
	/* Return non-zero (skip boot.conf) if Control "shift" key down */
#ifndef EFIBOOT
	return (pc_getshifts(0) & 0x04);
#else
	return (efi_cons_getshifts(0) & 0x04);
#endif
}
@


1.5
log
@Initial commit of uefi boot loader of OpenBSD.

ok deraadt yuo
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.4 2007/04/28 19:23:10 deraadt Exp $	*/
d41 1
a41 1
#if defined(DEBUG) && !defined(_TEST)
d70 2
a71 1
int check_skip_conf(void)
@


1.4
log
@clone "Control key" logic from i386 written by tom; tested by art
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.3 2004/03/21 21:37:41 tom Exp $	*/
d35 4
d73 1
d75 3
@


1.3
log
@Enter pxeboot on amd64.  Initially intended to support network installs
using bsd.rd over TFTP.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.35 2004/03/19 13:48:18 tom Exp $	*/
d31 1
d64 6
@


1.2
log
@- Pick up the /boot argc, argv in locore.S (though not currently used)
- Probe for console devices (incl serial) in /boot
- Pass console device from /boot to kernel (temp via additional param)

With this, boot> set tty com0 now works.

"just don't break a build" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.1 2004/02/03 12:09:47 mickey Exp $	*/
d4 1
a41 3
extern int debug;
int ps2model;

d45 2
a46 8
	/* here */	CKPT('0');
	printf("probing:");
	/* probe for a model number, gateA20() neds ps2model */
	gateA20(1);	CKPT('1');
	/* initialise a console (and probe for com* devices) */
	cninit();	CKPT('2');
	memprobe();	CKPT('3');
	printf("\n");
d48 15
a62 2
	diskprobe();	CKPT('4');
			CKPT('Z');
@


1.1
log
@das boot; das cloned das from das i386
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.34 2003/08/11 06:23:09 deraadt Exp $	*/
d51 3
a53 1
	memprobe();	CKPT('2');
d56 1
a56 1
	diskprobe();	CKPT('3');
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a3 1
 * Copyright (c) 2004 Tom Cosgrove
d41 3
d47 6
a52 2
	int i, j;
	struct i386_boot_probes *pr;
d54 2
a55 15
	/*
	 * The list of probe routines is now in conf.c.
	 */
	for (i = 0; i < nibprobes; i++) {
		pr = &probe_list[i];
		if (pr != NULL) {
			printf("%s:", pr->name);

			for (j = 0; j < pr->count; j++) {
				(*(pr->probes)[j])();
			}

			printf("\n");
		}
	}
@


