head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.2
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.12.0.14
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.6
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.10
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.6.0.8
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.6
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.5.0.8
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.6
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.18
date	2016.09.11.17.51.21;	author jsing;	state Exp;
branches;
next	1.17;
commitid	OdBRlx3Vvs2tfqrF;

1.17
date	2016.09.11.15.54.11;	author jsing;	state Exp;
branches;
next	1.16;
commitid	m28Q0aUDbVqwDb3p;

1.16
date	2015.11.26.10.52.40;	author yasuoka;	state Exp;
branches;
next	1.15;
commitid	TOCBtI2zCKfBzHtA;

1.15
date	2015.10.05.22.59.39;	author yasuoka;	state Exp;
branches;
next	1.14;
commitid	AT2154iJ6M9q2Mea;

1.14
date	2015.09.02.04.09.24;	author yasuoka;	state Exp;
branches;
next	1.13;
commitid	1T0xGkKNIiRZnTmz;

1.13
date	2015.09.02.01.52.26;	author yasuoka;	state Exp;
branches;
next	1.12;
commitid	CUwlbzT4LejFC15d;

1.12
date	2012.10.30.14.06.29;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2012.10.27.15.43.42;	author jsing;	state Exp;
branches;
next	1.10;

1.10
date	2012.10.09.13.55.36;	author jsing;	state Exp;
branches;
next	1.9;

1.9
date	2012.06.03.13.18.33;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2012.01.11.15.58.27;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2011.04.26.17.33.17;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2009.04.30.01.16.56;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.27.17.48.01;	author tom;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.21.21.37.41;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.25.00.16.42;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.23.01.19.52;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.03.12.09.47;	author mickey;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.25;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Switch amd64 to libsa MI softraid.
@
text
@/*	$OpenBSD: exec_i386.c,v 1.17 2016/09/11 15:54:11 jsing Exp $	*/

/*
 * Copyright (c) 1997-1998 Michael Shalayeff
 * Copyright (c) 1997 Tobias Weingartner
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/disklabel.h>
#include <dev/cons.h>
#include <lib/libsa/loadfile.h>
#include <machine/biosvar.h>
#include <stand/boot/bootarg.h>

#include "disk.h"
#include "libsa.h"

#ifdef SOFTRAID
#include <dev/softraidvar.h>
#include <lib/libsa/softraid.h>
#include "softraid_amd64.h"
#endif

#ifdef EFIBOOT
#include "efiboot.h"
#endif

typedef void (*startfuncp)(int, int, int, int, int, int, int, int)
    __attribute__ ((noreturn));

char *bootmac = NULL;

void
run_loadfile(u_long *marks, int howto)
{
	u_long entry;
#ifdef EXEC_DEBUG
	extern int debug;
#endif
	dev_t bootdev = bootdev_dip->bootdev;
	size_t ac = BOOTARG_LEN;
	caddr_t av = (caddr_t)BOOTARG_OFF;
	bios_consdev_t cd;
	extern int com_speed; /* from bioscons.c */
	extern int com_addr;
	bios_ddb_t ddb;
	extern int db_console;
	bios_bootduid_t bootduid;
#ifdef SOFTRAID
	bios_bootsr_t bootsr;
	struct sr_boot_volume *bv;
#endif
#if defined(EFIBOOT)
	int i;
	u_long delta;
	extern u_long efi_loadaddr;

	if ((av = alloc(ac)) == NULL)
		panic("alloc for bootarg");
	efi_makebootargs();
#endif
	if (sa_cleanup != NULL)
		(*sa_cleanup)();

	cd.consdev = cn_tab->cn_dev;
	cd.conspeed = com_speed;
	cd.consaddr = com_addr;
	cd.consfreq = 0;
	addbootarg(BOOTARG_CONSDEV, sizeof(cd), &cd);

	if (bootmac != NULL)
		addbootarg(BOOTARG_BOOTMAC, sizeof(bios_bootmac_t), bootmac);

	if (db_console != -1) {
		ddb.db_console = db_console;
		addbootarg(BOOTARG_DDB, sizeof(ddb), &ddb);
	}

	bcopy(bootdev_dip->disklabel.d_uid, &bootduid.duid, sizeof(bootduid));
	addbootarg(BOOTARG_BOOTDUID, sizeof(bootduid), &bootduid);

#ifdef SOFTRAID
	if (bootdev_dip->sr_vol != NULL) {
		bv = bootdev_dip->sr_vol;
		bzero(&bootsr, sizeof(bootsr));
		bcopy(&bv->sbv_uuid, &bootsr.uuid, sizeof(bootsr.uuid));
		if (bv->sbv_maskkey != NULL)
			bcopy(bv->sbv_maskkey, &bootsr.maskkey,
			    sizeof(bootsr.maskkey));
		addbootarg(BOOTARG_BOOTSR, sizeof(bios_bootsr_t), &bootsr);
		explicit_bzero(&bootsr, sizeof(bootsr));
	}

	sr_clear_keys();
#endif

	/* Pass memory map to the kernel */
	mem_pass();

	/*
	 * This code may be used both for 64bit and 32bit.  Make sure the
	 * bootarg is 32bit always on even on amd64.
	 */
#ifdef __amd64__
	makebootargs32(av, &ac);
#else
	makebootargs(av, &ac);
#endif

	entry = marks[MARK_ENTRY] & 0x0fffffff;

	printf("entry point at 0x%lx [%x, %x, %x, %x]\n", entry,
	    ((int *)entry)[0], ((int *)entry)[1],
	    ((int *)entry)[2], ((int *)entry)[3]);
#ifndef EFIBOOT
	/* stack and the gung is ok at this point, so, no need for asm setup */
	(*(startfuncp)entry)(howto, bootdev, BOOTARG_APIVER, marks[MARK_END],
	    extmem, cnvmem, ac, (int)av);
#else
	/*
	 * Move the loaded kernel image to the usual place after calling
	 * ExitBootServices().
	 */
	delta = DEFAULT_KERNEL_ADDRESS - efi_loadaddr;
	efi_cleanup();
	memcpy((void *)marks[MARK_START] + delta, (void *)marks[MARK_START],
	    marks[MARK_END] - marks[MARK_START]);
	for (i = 0; i < MARK_MAX; i++)
		marks[i] += delta;
	entry += delta;
#ifdef __amd64__
	(*run_i386)((u_long)run_i386, entry, howto, bootdev, BOOTARG_APIVER,
	    marks[MARK_END], extmem, cnvmem, ac, (intptr_t)av);
#else
	(*(startfuncp)entry)(howto, bootdev, BOOTARG_APIVER, marks[MARK_END],
	    extmem, cnvmem, ac, (int)av);
#endif
#endif
	/* not reached */
}
@


1.17
log
@Rename softraid boot files, which are currently in an MD location. This
will allow us to bring in a MI softraid.{c,h} in lib/libsa.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.16 2015/11/26 10:52:40 yasuoka Exp $	*/
d43 1
@


1.16
log
@Fix a typo in comment.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.15 2015/10/05 22:59:39 yasuoka Exp $	*/
d43 1
a43 1
#include "softraid.h"
@


1.15
log
@Fix efiboot not to use the usual kernel load address.  Load the kernel in
an allocated region and also move the stack to the end of the heap region.
Then move the kernel to the usual place just before run the kernel, after
calling ExitBootService().

report/test Toby Slight, Brian Conway
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.14 2015/09/02 04:09:24 yasuoka Exp $	*/
d144 1
a144 1
	 * ExitBootServervice()
@


1.14
log
@Bring the boot changes on amd64 to i386.  alloca is deleted.
Also fix the boot from BIOS and bump the version.

input and ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.13 2015/09/02 01:52:26 yasuoka Exp $	*/
d75 4
a79 1
#ifdef EFIBOOT
d137 10
a146 2

#if defined(EFIBOOT)
d148 6
a153 2
#endif
#if defined(EFIBOOT) && defined(__amd64__)
a156 1
	/* stack and the gung is ok at this point, so, no need for asm setup */
d159 2
a161 1
#endif
@


1.13
log
@Initial commit of uefi boot loader of OpenBSD.

ok deraadt yuo
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.12 2012/10/30 14:06:29 jsing Exp $	*/
d123 1
d125 3
@


1.12
log
@Apply a bunch of style(9) and whitespace fixes to i386/amd64 libsa, making
the code actually diffable. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.11 2012/10/27 15:43:42 jsing Exp $	*/
d46 4
d76 5
d119 5
a123 1
	makebootargs(av, &ac);
d131 7
d142 1
@


1.11
log
@Move the code for softraid boot into separate files, leaving only minimal
hooks that are called from the normal code path. This allows softraid boot
support to be completely enabled or disabled at compile time. For boot(8)
all softraid boot support is now enabled by default, including support for
booting from crypto volumes. Disable softraid boot support for fdboot,
which further shrinks the binary.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.8 2012/01/11 15:58:27 jsing Exp $	*/
d47 1
a47 1
	__attribute__ ((noreturn));
d115 3
a117 1
	    ((int *)entry)[0], ((int *)entry)[1], ((int *)entry)[2], ((int *)entry)[3]);
d119 2
a120 2
	(*(startfuncp)entry)(howto, bootdev, BOOTARG_APIVER,
		marks[MARK_END], extmem, cnvmem, ac, (int)av);
@


1.10
log
@Teach amd64 boot(8) how to access a softraid crypto volume. This allows for
full disk encryption since the kernel can now be loaded directly from the
crypto volume, instead of needing to be on FFS.

This is currently disabled by default, however can be enabled by compiling
with boot(8) 'make -DBOOT_CRYPTO'.
@
text
@d32 1
d34 2
d37 1
a37 2
#include <machine/biosvar.h>
#include <sys/disklabel.h>
a39 1
#include <lib/libsa/loadfile.h>
d41 1
a41 1
#ifdef BOOT_CRYPTO
d43 1
a50 4
#ifdef BOOT_CRYPTO
void sr_clear_keys();
#endif

d67 1
a67 1
#ifdef BOOT_CRYPTO
d92 1
a92 1
#ifdef BOOT_CRYPTO
a102 1
#endif
a103 1
#ifdef BOOT_CRYPTO
@


1.9
log
@Add support for serial consoles at non-standard addresses.  This implements
a new "machine comaddr" command that makes it possible to configure the
io port used to access the serial port.  This can be used to use serial ports
on a puc(4) device as serial console.
@
text
@d17 2
a18 2
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
d40 4
d49 4
d69 4
d93 17
@


1.8
log
@Pass the DUID of the boot disk via bootduid instead of rootduid, since it
is the DUID that we booted from, which is not always going to be the same
as the DUID that we mount root on.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.7 2011/04/26 17:33:17 jsing Exp $	*/
d57 1
d67 2
@


1.7
log
@Make amd64/i386 boot(8) pass the DUID of the selected boot device to the
kernel so that it can use it to identify the root disk. This will be
needed in order to correctly boot from a softraid volume.

ok deraadt@@ marco@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.4 2004/03/21 21:37:41 tom Exp $	*/
d59 1
a59 1
	bios_rootduid_t rootduid;
d76 2
a77 2
	bcopy(bootdev_dip->disklabel.d_uid, &rootduid.duid, sizeof(rootduid));
	addbootarg(BOOTARG_ROOTDUID, sizeof(rootduid), &rootduid);
@


1.6
log
@pass db_console from the bootloader to the kernel, and then use it to
set ddb.console real early.

requested by art@@
no problem! deraadt@@
@
text
@d59 1
d75 3
@


1.5
log
@As on i386:

We don't want to pass the PXE MAC address to the kernel when booting
from a local disk, since the MAC address causes the kernel to look for
root on NFS.  Do this by remembering (not adding to boot arguments) the
MAC address when opening the PXE device, and clearing this if we happen
to load a file off a non-network disk.

"works as advertised for me" todd@@;
"stop sitting on this/no objections" deraadt@@;
amd64 code mainly written by patch(1).
@
text
@d57 2
d69 5
@


1.4
log
@Enter pxeboot on amd64.  Initially intended to support network installs
using bsd.rd over TFTP.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.3 2004/02/25 00:16:42 deraadt Exp $	*/
d43 2
d64 3
@


1.3
log
@dkcsum stuff for amd64, written by tom, who cannot commit it at the moment.
now the amd64 knows what drive it was booted from.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.2 2004/02/23 01:19:52 tom Exp $	*/
d55 3
@


1.2
log
@- Pick up the /boot argc, argv in locore.S (though not currently used)
- Probe for console devices (incl serial) in /boot
- Pass console device from /boot to kernel (temp via additional param)

With this, boot> set tty com0 now works.

"just don't break a build" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.1 2004/02/03 12:09:47 mickey Exp $	*/
d40 1
a40 1
typedef void (*startfuncp)(int, int, int, int, int, int, int, int, int)
d71 1
a71 1
		marks[MARK_END], extmem, cnvmem, ac, (int)av, cd.consdev);
@


1.1
log
@das boot; das cloned das from das i386
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_i386.c,v 1.28 2003/06/03 20:22:11 mickey Exp $	*/
d40 1
a40 1
typedef void (*startfuncp)(int, int, int, int, int, int, int, int)
d71 1
a71 1
		marks[MARK_END], extmem, cnvmem, ac, (int)av);
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a54 3

	if (sa_cleanup != NULL)
		(*sa_cleanup)();
@


