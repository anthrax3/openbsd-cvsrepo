head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.6
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.8
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5;
locks; strict;
comment	@# @;


1.5
date	2016.02.12.21.36.33;	author naddy;	state Exp;
branches;
next	1.4;
commitid	PmlOsxipnUk4JUg8;

1.4
date	2016.01.12.23.00.10;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	ceWFevP8qPpN0ggJ;

1.3
date	2016.01.10.22.30.23;	author naddy;	state Exp;
branches;
next	1.2;
commitid	DBCYmHkyZOkstOxy;

1.2
date	2015.09.02.14.25.36;	author naddy;	state Exp;
branches;
next	1.1;
commitid	ugw6SVmj6eImT9Be;

1.1
date	2015.09.02.01.52.26;	author yasuoka;	state Exp;
branches;
next	;
commitid	CUwlbzT4LejFC15d;


desc
@@


1.5
log
@Remove the "GenuineIntel" check from x86 mdrandom().  Checking the
CPU features is enough, and this enables the use of RDRAND and the
TSC fallback on CPUs from other vendors, notably AMD.

Tested in snapshots for a month.
@
text
@/*	$OpenBSD: random_amd64.S,v 1.4 2016/01/12 23:00:10 deraadt Exp $	*/

/*
 * Copyright (c) 2013 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <machine/param.h>
#include <machine/asm.h>
#include <machine/psl.h>
#include <machine/specialreg.h>

/*
 * Random data is xored into the buffer in 8-byte blocks. If the buffer size
 * is not a multiple of 8, the remaining bytes may be left untouched.
 */
ENTRY(mdrandom)
	pushq   %rbx

	// See if we have CPU identification.
	pushf
	pop	%rax
	mov	%eax, %ecx
	or	$PSL_ID, %eax
	push	%rax
	popf
	pushf
	pop	%rax
	push	%rcx
	popf
	and	$PSL_ID, %eax
	jz	done

	// CPUID leaf = 1, subleaf = 0
	mov	$1, %eax
	mov	$0, %ecx
	cpuid
	mov	%edx, %eax

	movq	%rdi, %rbx
	movq	%rsi, %rdx
	xorq	%rdi, %rdi

	and	$CPUIDECX_RDRAND, %ecx	// See if we have rdrand.
	jnz	userand

	mov	%edx, %ecx
	and	$CPUID_TSC, %eax	// See if we have rdtsc.
	jnz	usetsc

	jmp	done

userand:
	shrq	$3, %rdx		// 8 bytes at a time
1:
	rdrand	%rax
	xorq	%rax, (%rbx, %rdi, 8)
	incq	%rdi
	cmpq	%rdi, %rdx
	jne	1b
	jmp	done

usetsc:
	rdtsc				// Populates edx:eax.

	/*
	 *   Cope with high=0
	 * high = (high << 1) | 1;		
	 *   Spread bits
	 * bits = low * high;
	 *   Accumulate spread bits into a byte
	 * bits = bits ^ (bits>>8) ^ (bits>>16) ^ (bits>>24);
	 * buf[i] ^= (u_char) bits;
	 */
	shlq	$1, %rdx
	orq	$1, %rdx
	mull	%edx
	movq	%rax, %rdx
	shrq	$8, %rdx
	xorq	%rdx, %rax
	shrq	$8, %rdx
	xorq	%rdx, %rax
	shrq	$8, %rdx
	xorq	%rdx, %rax

	xorb	%al, (%rbx,%rdi)

	incq	%rdi
	cmpq	%rdi, %rcx
	jne	usetsc
	jmp	done

done:
	popq	%rbx
	retq
@


1.4
log
@naddy observed the TSC fallback code could encounter (high word) %edx
being 0; after multiply there is no perturbance to the from-disk entropy
buffer.  Further investigation showed perturbance was biased towards
the lower bytes of a word.  Compensate for this with a hocus pocus
bit-spreading operation which applies a result byte by byte.
discussion with kettenis, tb, mlarkin, naddy
ok naddy
@
text
@d1 1
a1 1
/*	$OpenBSD: random_amd64.S,v 1.3 2016/01/10 22:30:23 naddy Exp $	*/
a43 11

	// CPUID leaf = 0, subleaf = 0
	mov	$0, %eax
	mov	$0, %ecx
	cpuid
	cmp	$0x756e6547, %ebx	// "Genu"
	jne	done
	cmp	$0x49656e69, %edx	// "ineI"
	jne	done
	cmp	$0x6c65746e, %ecx	// "ntel"
	jne	done
@


1.3
log
@match up code and comments, add missing $OpenBSD$; ok jsing@@ a while ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d26 1
a26 1
 * is not a multiple of 8, the remaining bytes will be left untouched.
a63 1
	shrq	$3, %rdx
d76 2
d82 1
a82 1
	jne	userand
d87 23
a109 2
	mulq	%rdx
	xorq	%rax, (%rbx, %rdi, 8)
@


1.2
log
@sync comment
@
text
@d1 2
d51 1
a51 1
	cmp	$0x6c65746e, %ecx	// "ineI"
d53 1
a53 1
	cmp	$0x49656e69, %edx	// "ntel"
@


1.1
log
@Initial commit of uefi boot loader of OpenBSD.

ok deraadt yuo
@
text
@d23 2
a24 2
 * Random data is xored into the buffer in 4 byte blocks. If the buffer size
 * is not a multiple of 4, the remaining bytes will be left untouched.
@

