head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.7.0.10
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7;
locks; strict;
comment	@# @;


1.10
date	2016.02.12.21.36.33;	author naddy;	state Exp;
branches;
next	1.9;
commitid	PmlOsxipnUk4JUg8;

1.9
date	2016.01.12.23.00.10;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	ceWFevP8qPpN0ggJ;

1.8
date	2016.01.10.22.30.23;	author naddy;	state Exp;
branches;
next	1.7;
commitid	DBCYmHkyZOkstOxy;

1.7
date	2014.02.18.13.47.53;	author jsing;	state Exp;
branches;
next	1.6;

1.6
date	2014.01.18.07.22.08;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2014.01.06.22.34.24;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2014.01.02.04.39.56;	author jsing;	state Exp;
branches;
next	1.3;

1.3
date	2014.01.02.04.23.57;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2013.12.28.02.33.15;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2013.12.28.02.25.26;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove the "GenuineIntel" check from x86 mdrandom().  Checking the
CPU features is enough, and this enables the use of RDRAND and the
TSC fallback on CPUs from other vendors, notably AMD.

Tested in snapshots for a month.
@
text
@/*	$OpenBSD: random_i386.S,v 1.9 2016/01/12 23:00:10 deraadt Exp $	*/

/*
 * Copyright (c) 2013 Joel Sing <jsing@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <machine/param.h>
#include <machine/asm.h>
#include <machine/psl.h>
#include <machine/specialreg.h>

/*
 * Random data is xored into the buffer in 4 byte blocks. If the buffer size
 * is not a multiple of 4, the remaining bytes may be left untouched.
 */
ENTRY(mdrandom)
	pushal

	// See if we have CPU identification.
	pushfl
	popl	%eax
	movl	%eax, %ecx
	orl	$PSL_ID, %eax
	pushl	%eax
	popfl
	pushfl
	popl	%eax
	pushl	%ecx
	popfl
	andl	$PSL_ID, %eax
	jz	done

	// CPUID leaf = 1, subleaf = 0
	movl	$1, %eax
	movl	$0, %ecx
	cpuid
	movl	%edx, %eax

	movl	36(%esp), %ebx
	movl	40(%esp), %edx
	xorl	%edi, %edi

	andl	$CPUIDECX_RDRAND, %ecx	// See if we have rdrand.
	jnz	userand

	movl	%edx, %ecx
	andl	$CPUID_TSC, %eax	// See if we have rdtsc.
	jnz	usetsc

	jmp	done

userand:
	shrl	$2, %edx		// 4 bytes at a time
1:
	rdrand	%eax
	xorl	%eax, (%ebx,%edi,4)
	incl	%edi
	cmpl	%edi, %edx
	jne	1b
	jmp	done

usetsc:
	rdtsc				// Populates edx:eax.

	/*
	 *   Cope with high=0
	 * high = (high << 1) | 1;		
	 *   Spread bits
	 * bits = low * high;
	 *   Accumulate spread bits into a byte
	 * bits = bits ^ (bits>>8) ^ (bits>>16) ^ (bits>>24);
	 * buf[i] ^= (u_char) bits;
	 */
	shll	$1, %edx
	orl	$1, %edx
	mull	%edx
	movl	%eax, %edx
	shrl	$8, %edx
	xorl	%edx, %eax
	shrl	$8, %edx
	xorl	%edx, %eax
	shrl	$8, %edx
	xorl	%edx, %eax

	xorb	%al, (%ebx,%edi)

	incl	%edi
	cmpl	%edi, %ecx
	jne	usetsc
	jmp	done

done:
	popal
	ret
@


1.9
log
@naddy observed the TSC fallback code could encounter (high word) %edx
being 0; after multiply there is no perturbance to the from-disk entropy
buffer.  Further investigation showed perturbance was biased towards
the lower bytes of a word.  Compensate for this with a hocus pocus
bit-spreading operation which applies a result byte by byte.
discussion with kettenis, tb, mlarkin, naddy
ok naddy
@
text
@d1 1
a1 1
/*	$OpenBSD: random_i386.S,v 1.8 2016/01/10 22:30:23 naddy Exp $	*/
a43 11

	// CPUID leaf = 0, subleaf = 0
	movl	$0, %eax
	movl	$0, %ecx
	cpuid
	cmpl	$0x756e6547, %ebx	// "Genu"
	jne	done
	cmpl	$0x49656e69, %edx	// "ineI"
	jne	done
	cmpl	$0x6c65746e, %ecx	// "ntel"
	jne	done
@


1.8
log
@match up code and comments, add missing $OpenBSD$; ok jsing@@ a while ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d26 1
a26 1
 * is not a multiple of 4, the remaining bytes will be left untouched.
a63 1
	shrl	$2, %edx
d76 2
d82 1
a82 1
	jne	userand
d87 12
d100 10
a109 1
	xorl	%eax, (%ebx,%edi,4)
@


1.7
log
@Actually check to see if the CPU supports tsc, rather than assuming that
it does and triggering an illegal instruction trap when it does not.

Found the hard way and fix tested by nick@@
@
text
@d1 2
d51 1
a51 1
	cmpl	$0x6c65746e, %ecx	// "ineI"
d53 1
a53 1
	cmpl	$0x49656e69, %edx	// "ntel"
@


1.6
log
@Fix comment re size of input buffer.
@
text
@d58 1
d69 4
a72 1
	jmp	usetsc
@


1.5
log
@document random buffer must be multiple of 4 in size
@
text
@d23 2
a24 1
 * Buffer size must be multiple of 4
@


1.4
log
@Simplify things slightly by using four byte indexing.
@
text
@d22 3
@


1.3
log
@Ensure that we preserve callee-save registers.
@
text
@a57 1
	shll	$2, %edx
d68 2
a69 2
	xorl	%eax, 0(%edi,%ebx)
	addl	$4, %edi
d77 2
a78 2
	xorl	%eax, 0(%edi,%ebx)
	addl	$4, %edi
@


1.2
log
@Use preprocessor symbols where possible.
@
text
@d23 2
d55 2
a56 2
	movl	4(%esp), %ebx
	movl	8(%esp), %edx
d73 1
a73 1
	ret
d82 1
a82 1
	ret
d85 1
@


1.1
log
@Add initial implementations of early MD random, for use in the boot code.
This makes use of rdrand if the CPU supports it, otherwise we fall back to
using rdtsc. Further development will happen in the tree.

Tested by phessler@@

ok deraadt@@
@
text
@d20 1
d22 1
a22 1
ENTRY(md_random)
d59 1
a59 1
	andl	$0x40000000, %ecx	// See if we have rdrand.
@

