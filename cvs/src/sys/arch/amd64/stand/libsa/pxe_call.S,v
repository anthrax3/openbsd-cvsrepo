head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.44
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.40
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.42
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.34
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.38
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.36
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.32
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.30
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.28
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.26
	OPENBSD_5_0:1.4.0.24
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.22
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.20
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.16
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.18
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.14
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.12
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.10
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.4
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2006.01.02.00.26.29;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.29.16.14.04;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.13.22.14.54;	author tom;	state Exp;
branches;
next	1.1;

1.1
date	2004.03.21.21.37.41;	author tom;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2004.06.05.23.09.26;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Correctly set the %di register on PXENV calls.  This should help
older PXE clients get a bit further.  Prompted by Rolf Sommerhalder's
comments on misc@@.

ok krw@@ (thanks) "no objection" mbalmer@@ "go for it" fgsch@@
"fine" deraadt@@
@
text
@/*	$OpenBSD: pxe_call.S,v 1.3 2005/04/29 16:14:04 tom Exp $ */
/*	$NetBSD: pxe_call.S,v 1.2 2002/03/27 17:24:22 kanaoka Exp $	*/

/*
 * Copyright 2001 Wasabi Systems, Inc.
 * All rights reserved.
 *
 * Written by Jason R. Thorpe for Wasabi Systems, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed for the NetBSD Project by
 *	Wasabi Systems, Inc.
 * 4. The name of Wasabi Systems, Inc. may not be used to endorse
 *    or promote products derived from this software without specific prior
 *    written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY WASABI SYSTEMS, INC. ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL WASABI SYSTEMS, INC
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Low level PXE BIOS call glue.
 */

#include <machine/asm.h>
#include <assym.h>

#include "gidt.h"

ENTRY(pxecall_bangpxe)
	.code32
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%ecx
	pushl	%edx

	/* For simplicity, just move all 32 bits. */
	movl	8(%ebp), %ebx

	pushw	_C_LABEL(pxe_command_buf_seg)
	pushw	_C_LABEL(pxe_command_buf_off)
	pushw	%bx

	call	prot_to_real			/* Enter real mode */
	.code16

	sti
	/* The encoding is: 0x9a offlo offhi seglo seghi */
	lcall	$0, $0xffff
	.globl	_C_LABEL(bangpxe_off)
_C_LABEL(bangpxe_off) = . - 4
	.globl	_C_LABEL(bangpxe_seg)
_C_LABEL(bangpxe_seg) = . - 2

	cli
	call	real_to_prot			/* Leave real mode */
	.code32

	add	$6, %esp

	popl	%edx
	popl	%ecx
	popl	%ebx
	popl	%ebp
	ret

ENTRY(pxecall_pxenv)
	.code32
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%ecx
	pushl	%edx
	pushl	%edi

	/*
         * Using the PXENV+ calling convention, the (16 bit) function
         * number is passed in %bx, with the address of the command
         * buffer in %es:%di.
	 */
	movl	8(%ebp), %ebx	/* For simplicity, just move all 32 bits. */

	/*
	 * prot_to_real() will set %es to BOOTSEG, so we just need to set
	 * %(e)di up here.  Remember to relocate it!
	 */
	movl	$_C_LABEL(pxe_command_buf), %edi
	subl	$LINKADDR, %edi

	call	prot_to_real			/* Enter real mode */
	.code16

	/* The encoding is: 0x9a offlo offhi seglo seghi */
	lcall	$0, $0xffff
	.globl	_C_LABEL(pxenv_off)
_C_LABEL(pxenv_off) = . - 4
	.globl	_C_LABEL(pxenv_seg)
_C_LABEL(pxenv_seg) = . - 2

	call	real_to_prot			/* Leave real mode */
	.code32

	popl	%edi
	popl	%edx
	popl	%ecx
	popl	%ebx
	popl	%ebp
	ret

/*
 * prot_to_real()
 *
 * Switch the processor back into real mode.
 */
	.globl	prot_to_real
prot_to_real:
	.code32
	ljmp	$S16TEXT, $p2r16 - LINKADDR
p2r16:
	.code16

	movw	$S16DATA, %ax
	movw	%ax, %ds
	movw	%ax, %es

	movl	%cr0, %eax		/* Disable protected mode */
	andl 	$~CR0_PE, %eax
	movl	%eax, %cr0

	/* reload real cs:ip */
	data32 ljmp	$(LINKADDR >> 4), $p2r16real - LINKADDR
p2r16real:
	xorw	%ax, %ax		/* Reset segment registers: */
	movw	%ax, %ss		/* %ss: for our stack */

	movw	$LINKADDR >> 4, %ax	/* We're linked to LINKADDR/16:0000 */
	movw	%ax, %ds		/* %ds: so we can get at Idtr_real */

	.extern	Idtr_real
	data32 addr32 lidt (Idtr_real - LINKADDR);	/* Set up IDT for real mode */

	movw	%cs, %ax
	movw	%ax, %ds
	movw	%ax, %es		/* Set %ds = %es = %cs */

	/*
	 * We were called from 32-bit mode, so there's a 32-bit
	 * return address on the stack.  No segment.  This is within
	 * the flat memory model, so we need to adjust it back so
	 * that it's relative to our 16-bit %cs.
	 */
	popl	%eax
	subl	$LINKADDR, %eax
	pushw	%ax
	ret

/*
 * real_to_prot()
 *
 * Switch the processor back into protected mode.
 */
	.globl	real_to_prot
real_to_prot:
	.code16

	movw	$LINKADDR >> 4, %ax	/* We're linked to LINKADDR/16:0000 */
	movw	%ax, %ds
	data32 addr32 lgdt (Gdtr - LINKADDR)	/* Reload the GDT */

	movl	%cr0, %eax		/* Enable protected mode */
	orl	$CR0_PE, %eax
	movl	%eax, %cr0

	data32 ljmp	$S32TEXT, $r2p32 /* Reload %cs, flush pipeline */
r2p32:
	.code32
	/* Reload 32-bit %ds, %ss, %es */
	movl	$S32DATA, %eax
	mov	%ax, %ds
	mov	%ax, %ss
	mov	%ax, %es

	/* Load IDT for debugger and DOS/BIOS interface */
	.extern	Idtr
	lidt	Idtr

	xorl	%eax, %eax
	popw	%ax			/* 16-bit return addr on stack */
	addl	$LINKADDR, %eax
	pushl	%eax			/* Now have correct 32-bit ret addr */
	ret

	.end
@


1.3
log
@Make boot code use real mode with 64K segments instead of 1M segments,
to match i386 boot blocks.  Improves stability with some disk controller
cards.  Also expicitly state operand size on some moves.

Bump version on boot, cdboot and pxeboot accordingly.
@
text
@d1 1
a1 1
/*	$OpenBSD: pxe_call.S,v 1.1 2004/03/19 13:48:18 tom Exp $ */
d95 13
a107 2
	/* For simplicity, just move all 32 bits. */
	movl	8(%ebp), %ebx
a110 3

	/* prot_to_real() has already set %es to BOOTSEG */
	lea	_C_LABEL(pxe_command_buf), %di
@


1.2
log
@On return from real mode, reload the GDT using a 16-bit pointer rather
than a 32-bit value.  Found by Tim Fletcher <tim (at) parrswood (dot)
manchester (dot) sch (dot) uk> using Etherboot; thanks to Tim and the
Etherboot developers who narrowed this down.

Also bump the pxeboot version to 1.01.

Tested by Okan Demirmen <okan (at) demirmen (dot) com> and krw@@: thanks
guys.

"get these changes into the amd64" deraadt@@
@
text
@d145 3
a148 1
	movw	%ax, %ss		/* %ss: for our stack */
d151 1
a151 1
	data32 addr32 lidt Idtr_real;	/* Set up IDT for real mode */
d179 1
a179 1
	addr32 lgdt (Gdtr - LINKADDR)	/* Reload the GDT */
@


1.1
log
@Enter pxeboot on amd64.  Initially intended to support network installs
using bsd.rd over TFTP.

ok deraadt@@
@
text
@d175 3
a177 3
	xorw	%ax, %ax
	movw	%ax, %ds		/* Load %ds so we can get at Gdtr */
	data32 addr32 lgdt Gdtr		/* Load the GDT */
@


1.1.4.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@

