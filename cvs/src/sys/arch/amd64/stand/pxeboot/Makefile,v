head	1.31;
access;
symbols
	OPENBSD_6_2:1.31.0.4
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.30.0.4
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.25.0.4
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.2
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.8.0.20
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.18
	OPENBSD_5_0:1.8.0.16
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.14
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.12
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.5.0.8
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.2
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	SMP:1.2.0.2
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.31
date	2017.05.30.22.32.10;	author naddy;	state Exp;
branches;
next	1.30;
commitid	ZnHLUGxOdWWbvSX2;

1.30
date	2016.09.18.16.34.59;	author jsing;	state Exp;
branches;
next	1.29;
commitid	xxSOamF7jPcxnio1;

1.29
date	2016.09.11.17.51.21;	author jsing;	state Exp;
branches;
next	1.28;
commitid	OdBRlx3Vvs2tfqrF;

1.28
date	2016.09.11.15.54.11;	author jsing;	state Exp;
branches;
next	1.27;
commitid	m28Q0aUDbVqwDb3p;

1.27
date	2016.09.10.16.38.16;	author jsing;	state Exp;
branches;
next	1.26;
commitid	Guvt83tYQgzHIRwk;

1.26
date	2016.07.30.03.25.48;	author guenther;	state Exp;
branches;
next	1.25;
commitid	HVbAtwruDlJazNH2;

1.25
date	2015.11.16.19.33.52;	author miod;	state Exp;
branches;
next	1.24;
commitid	5gnqUR6VheSiU9SF;

1.24
date	2015.09.02.01.52.26;	author yasuoka;	state Exp;
branches;
next	1.23;
commitid	CUwlbzT4LejFC15d;

1.23
date	2014.11.19.20.09.58;	author miod;	state Exp;
branches;
next	1.22;
commitid	wpSvUTrFjUmf0cF9;

1.22
date	2014.07.15.22.14.37;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	NR8siXEkpaNp3MWn;

1.21
date	2014.07.13.21.18.44;	author jasper;	state Exp;
branches;
next	1.20;
commitid	Y3LcLObEiHDZvy27;

1.20
date	2014.07.13.09.26.08;	author jasper;	state Exp;
branches;
next	1.19;
commitid	Cnjup0HpCIRrcQ6o;

1.19
date	2014.07.12.21.54.58;	author jasper;	state Exp;
branches;
next	1.18;
commitid	3HeD4LaLGiS22I3y;

1.18
date	2013.12.28.02.51.07;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2013.04.23.16.41.13;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2013.01.18.21.09.04;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2013.01.17.12.37.44;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2013.01.17.12.25.11;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2012.10.29.14.20.10;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.09.11.43.22;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2012.09.25.09.01.03;	author pascal;	state Exp;
branches;
next	1.10;

1.10
date	2012.08.29.17.45.00;	author pascal;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.21.14.46.18;	author pascal;	state Exp;
branches;
next	1.8;

1.8
date	2007.11.25.18.25.30;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.30.01.25.43;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.27.18.38.33;	author tom;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.30.14.37.39;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.03.13.18.05;	author tom;	state Exp;
branches;
next	1.3;

1.3
date	2004.10.09.21.15.21;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.17.22.49.46;	author drahn;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.03.21.21.37.41;	author tom;	state Exp;
branches;
next	;

1.2.2.1
date	2004.06.05.23.09.26;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Allow building the bootstrap with clang:
* skip the integrated assembler for assym.h
* use as(1) to build biosboot.S and the various versions of srt0.S
ok deraadt@@
@
text
@#	$OpenBSD: Makefile,v 1.30 2016/09/18 16:34:59 jsing Exp $

MAN=	pxeboot.8

.if ${MACHINE} == "amd64"
S=	${.CURDIR}/../../../..
SADIR=	${.CURDIR}/..

PROG=	pxeboot
SRCS=	srt0.S conf.c devopen.c open.c
LD?=	ld
SIZE?=	size
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -nopie -znorelro
LDFLAGS+=-melf_i386 -L/usr/libdata
INSTALL_STRIP=
BINMODE=644

.PATH:	${SADIR}/libsa
# i386 stuff (so, it will possibly load in the same 64k)
SRCS+=	machdep.c exec_i386.c cmd_i386.c
SRCS+=	gidt.S random_i386.S biosdev.c bioscons.c gateA20.c \
	memprobe.c diskprobe.c time.c ## biosprobe.c
SRCS+=	pxe.c pxe_call.S pxe_net.c pxe_udp.c
SRCS+=	softraid_amd64.c

.PATH:	${S}/stand/boot
SRCS+=	boot.c cmd.c vars.c bootarg.c

.PATH:	${S}/lib/libsa
SRCS+=	alloc.c exit.c getchar.c getfile.c getln.c globals.c putchar.c \
	strcmp.c strlen.c strncmp.c memcmp.c memcpy.c memset.c printf.c \
	snprintf.c strerror.c strncpy.c strtol.c strtoll.c ctime.c strlcpy.c \
	strlcat.c
SRCS+=	aes_xts.c bcrypt_pbkdf.c blowfish.c explicit_bzero.c hmac_sha1.c \
	pkcs5_pbkdf2.c rijndael.c sha1.c sha2.c softraid.c

SRCS+=	close.c closeall.c dev.c disklabel.c dkcksum.c fstat.c ioctl.c lseek.c \
	read.c stat.c write.c cread.c readdir.c cons.c loadfile.c \
	elf32.c elf64.c
SRCS+=	ether.c net.c netif.c rpc.c
SRCS+=	bootp.c bootparam.c
SRCS+=	ufs.c nfs.c tftp.c

.PATH:	${S}/lib/libkern/arch/amd64 ${S}/lib/libkern
SRCS+=	divdi3.c moddi3.c qdivrem.c udivdi3.c umoddi3.c

.PATH:	${S}/lib/libz
SRCS+=	adler32.c crc32.c inflate.c inftrees.c

.depend srt0.o gidt.o pxe_call.o: assym.h

${PROG}: $(OBJS)
	$(LD) $(LDFLAGS) -o ${PROG} $(OBJS)
	@@$(SIZE) $(PROG)
	@@if [ -x ${.OBJDIR}/${PROG} ]; then \
		objcopy -O binary ${PROG} ${.OBJDIR}/.tmp;\
		mv -f ${.OBJDIR}/.tmp ${.OBJDIR}/${PROG}; \
		ls -l ${.OBJDIR}/${PROG}; \
	fi

.else
NOPROG=
.endif

.include <bsd.prog.mk>

CPPFLAGS+=-DSOFTRAID
CPPFLAGS+=-DBOOTMAGIC=$(BOOTMAGIC) ${DEBUGFLAGS} -DLINKADDR=${LINKADDR}
CPPFLAGS+=-DSLOW -DSMALL -DNOBYFOUR -DNO_GZIP -DDYNAMIC_CRC_TABLE
CPPFLAGS+=-DHEAP_LIMIT=${HEAP_LIMIT} -I${S}/stand/boot #-DCOMPAT_UFS
CFLAGS+=-m32
CFLAGS+=$(SACFLAGS) -D__INTERNAL_LIBSA_CREAD -fno-pie
AFLAGS+=${NO_INTEGR_AS}
# AFLAGS+=-Wa,-a
AFLAGS+=-m32 # -Wa,-R
AFLAGS+=-fno-pie
@


1.30
log
@Add bcrypt pbkdf support to the softraid crypto boot loader code.

Based on a diff from djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.29 2016/09/11 17:51:21 jsing Exp $
d73 1
@


1.29
log
@Switch amd64 to libsa MI softraid.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 2016/09/11 15:54:11 jsing Exp $
d34 2
a35 2
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pkcs5_pbkdf2.c rijndael.c \
	sha1.c softraid.c
@


1.28
log
@Rename softraid boot files, which are currently in an MD location. This
will allow us to bring in a MI softraid.{c,h} in lib/libsa.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 2016/09/10 16:38:16 jsing Exp $
d34 2
a35 1
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pkcs5_pbkdf2.c rijndael.c sha1.c
@


1.27
log
@Rename libsa pbkdf2.c to pkcs5_pbkdf2.c so that we match libutil.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 2016/07/30 03:25:48 guenther Exp $
d24 1
a24 1
SRCS+=	softraid.c
@


1.26
log
@Prep for relro: make sure it's off for any non-PIE stand/ program

ok millert@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 2015/11/16 19:33:52 miod Exp $
d34 1
a34 1
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pbkdf2.c rijndael.c sha1.c
@


1.25
log
@Replace unbounded gets() in libsa with getln() which takes a buffer size,
and convert all gets() users.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2015/09/02 01:52:26 yasuoka Exp $
d13 1
a13 1
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -nopie
@


1.24
log
@Initial commit of uefi boot loader of OpenBSD.

ok deraadt yuo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2014/11/19 20:09:58 miod Exp $
d30 4
a33 3
SRCS+=	alloc.c exit.c getchar.c getfile.c gets.c globals.c putchar.c strcmp.c \
	strlen.c strncmp.c memcmp.c memcpy.c memset.c printf.c snprintf.c \
	strerror.c strncpy.c strtol.c strtoll.c ctime.c strlcpy.c strlcat.c
@


1.23
log
@Only keep {recv,send}udp() in the pxe-specific code, the remainder of what
used to be local net.c (renamed to pxe_udp.c) can now be obtained from
libsa's net.c rather than being duplicated.

No functional change.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2014/07/15 22:14:37 deraadt Exp $
d21 1
a21 1
SRCS+=	gidt.S random_i386.S alloca.S biosdev.c bioscons.c gateA20.c \
@


1.22
log
@mode 644 for installing these files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2014/07/13 21:18:44 jasper Exp $
d10 1
a10 1
SRCS=	srt0.S conf.c devopen.c net.c open.c
d23 1
a23 1
SRCS+=	pxe.c pxe_call.S pxe_net.c
d38 1
a38 1
SRCS+=	ether.c netif.c rpc.c
@


1.21
log
@fix even more trailing tabs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2014/07/13 09:26:08 jasper Exp $
d16 1
@


1.20
log
@move putchar() into libsa

"sure" miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2014/07/12 21:54:58 jasper Exp $
d14 1
a14 1
LDFLAGS+=-melf_i386 -L/usr/libdata 
@


1.19
log
@move getchar() into libsa where applicable

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.18 2013/12/28 02:51:07 deraadt Exp $
d29 2
a30 2
SRCS+=	alloc.c exit.c getchar.c getfile.c gets.c globals.c strcmp.c strlen.c \
	strncmp.c memcmp.c memcpy.c memset.c printf.c snprintf.c \
@


1.18
log
@Try to load entropy data from disk:/etc/random.seed, and additionally
use a MD-supplied random function.  Then, insert this into the ELF
openbsd.randomdata of the kernel, so that it has entropy right from
the start.  Some help from jsing for the softraid aspects.
Also tested by phessler
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2013/04/23 16:41:13 jsing Exp $
d29 1
a29 1
SRCS+=	alloc.c exit.c getfile.c gets.c globals.c strcmp.c strlen.c \
@


1.17
log
@Include udivdi3/umoddi3 when compiling the amd64/i386 boot blocks - they
are needed for the upcoming type changes.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.16 2013/01/18 21:09:04 espie Exp $
d20 1
a20 1
SRCS+=	gidt.S alloca.S biosdev.c bioscons.c gateA20.c \
@


1.16
log
@fix bogus dependencies, and allow mkdep to run
checked on amd64 by rpe@@
okay jsing@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.15 2013/01/17 12:37:44 jsing Exp $
d42 1
a42 1
SRCS+=	divdi3.c moddi3.c qdivrem.c
@


1.15
log
@Generate assym.h where we need it, instead of reaching around into other
object directories.

Discussed with deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.13 2012/10/29 14:20:10 jsing Exp $
d47 1
a47 3
${.CURDIR}/srt0.S: assym.h
${SADIR}/libsa/gidt.S: assym.h
${SADIR}/libsa/pxe_call.S: assym.h
@


1.14
log
@Clean up/standardise makefiles for amd64/stand.
@
text
@d47 4
@


1.13
log
@Enable softraid boot support in pxeboot(8).
@
text
@d1 1
a1 3
#	$OpenBSD: Makefile,v 1.11 2012/09/25 09:01:03 pascal Exp $

.include "${.CURDIR}/../Makefile.inc"
d6 1
a6 1
S	=${.CURDIR}/../../../..
@


1.12
log
@Remove -noinhibit-exec now that we no longer have to deal with
"relocation truncated" linker errors.
@
text
@d25 1
d34 1
d64 1
@


1.11
log
@Reduce the diff between amd64/stand and i386/stand, requested by deraadt@@.
These create essentially the same bootblocks, so the build system should not be
diverging too much, or at least easily diffable.
There is still a lot of work to be done here, but this is the low-hanging fruit.

ok jsing@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2012/08/29 17:45:00 pascal Exp $
d15 1
a15 1
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -noinhibit-exec -nopie
@


1.10
log
@Get rid of all NOPIE and NOPIE_FLAGS in amd64/stand and use -fno-pie and -nopie
directly instead.  This will be the approach taken by every other arch too
in the near future.  It is easier than relying on bsd.own.mk to set these
correctly.

discussed with and ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2012/08/21 14:46:18 pascal Exp $
d15 2
a16 2
LDFLAGS+=-melf_i386 -nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -noinhibit-exec
LDFLAGS+=-nopie -L/usr/libdata 
d65 3
a67 1
CFLAGS+=-m32 $(SACFLAGS) -D__INTERNAL_LIBSA_CREAD -fno-pie
a69 1
# AFLAGS+=-Wa,-a
@


1.9
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2007/11/25 18:25:30 deraadt Exp $
d16 1
a16 1
LDFLAGS+=-L/usr/libdata 
d65 1
a65 2
CFLAGS+=-m32 $(SACFLAGS) -D__INTERNAL_LIBSA_CREAD
CFLAGS+=${NOPIE_FLAGS}
d67 1
a67 1
AFLAGS+=${NOPIE_FLAGS}
@


1.8
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2007/05/30 01:25:43 tom Exp $
d66 1
d68 1
@


1.7
log
@Pull out the ELF loadfile pieces from the standalone libraries, so that
both 32- and 64-bit versions can be created (previously only one or the
other could be built for a given boot loader).

Use this to allow the i386 and amd64 boot blocks to boot both ELF32 and
ELF64 kernels (i.e. amd64 boot blocks can now load i386 kernels, and
vice versa).  Obviously the system must support LONG mode in order to
successfully run the amd64 kernel once it is loaded.

Advice and discussions from/with dale@@ (going back three years).  Much
testing nick@@ and todd@@; thanks.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2007/05/27 18:38:33 tom Exp $
a29 2
.PATH:	${S}/lib/libkern	# for strl* and gcc support
# stand routines
d33 1
a33 1
# io routines
a36 1
# network routines
a37 1
# network info services
a38 1
# boot filesystems
d40 2
a41 1
# gcc support
@


1.6
log
@Unbreak cdboot and pxeboot machine memory +/-; bad mpf@@.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2005/07/30 14:37:39 millert Exp $
d37 2
a38 1
	read.c stat.c write.c cread.c readdir.c cons.c loadfile.c
@


1.5
log
@Need moddi3.c qdivrem.c for libz
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2005/05/03 13:18:05 tom Exp $
d34 1
a34 1
	strerror.c strncpy.c strtol.c ctime.c strlcpy.c strlcat.c
d45 1
a45 1
SRCS+=	moddi3.c qdivrem.c
@


1.4
log
@The return value from getEBDAaddr() (info) is not used in bios_E820(),
so nuke it.  amd64 no longer needs biosprobe.c listed in SRCS.  Trims
100 bytes from the boot blocks.

Bump versions on boot, cdboot and pxeboot, as I'm getting cautious in
my old age.

ok weingart@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2004/10/09 21:15:21 mickey Exp $
d30 1
a30 1
.PATH:	${S}/lib/libkern	# for strl*
d44 2
@


1.3
log
@size works now on cross-size .o files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2004/05/17 22:49:46 drahn Exp $
d23 1
a23 1
	memprobe.c diskprobe.c time.c biosprobe.c
@


1.2
log
@Work arounda behaviour change in binutils-2.14, now  -m<...> -nostdlib
removes /usr/libdata from the script search path. add it back with a -L
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/03/21 21:37:41 tom Exp $
d50 1
@


1.2.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
@


1.1
log
@Enter pxeboot on amd64.  Initially intended to support network installs
using bsd.rd over TFTP.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/02/03 12:09:47 mickey Exp $
d16 1
@

