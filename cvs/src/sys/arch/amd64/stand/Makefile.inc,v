head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.2
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.14.0.2
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.11.0.10
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.5.0.20
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.18
	OPENBSD_5_0:1.5.0.16
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.14
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.12
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.8
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@# @;


1.18
date	2017.07.25.13.32.14;	author robert;	state Exp;
branches;
next	1.17;
commitid	4ug2LPpW6jX7EOsH;

1.17
date	2017.05.30.22.32.10;	author naddy;	state Exp;
branches;
next	1.16;
commitid	ZnHLUGxOdWWbvSX2;

1.16
date	2017.05.30.15.02.22;	author naddy;	state Exp;
branches;
next	1.15;
commitid	nnGMFPONLwPWwGZN;

1.15
date	2016.11.06.16.04.20;	author tb;	state Exp;
branches;
next	1.14;
commitid	tupV2UpHQlnB6RWH;

1.14
date	2016.07.04.18.01.44;	author guenther;	state Exp;
branches;
next	1.13;
commitid	MDAws5Y7do6cFWlq;

1.13
date	2015.10.08.22.41.12;	author yasuoka;	state Exp;
branches;
next	1.12;
commitid	oKdWxNwZd3kC7x25;

1.12
date	2015.09.18.13.30.55;	author miod;	state Exp;
branches;
next	1.11;
commitid	1BEcCDYd9p5DIl0g;

1.11
date	2014.01.22.03.47.22;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2013.12.28.02.51.06;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2013.01.17.12.37.44;	author jsing;	state Exp;
branches;
next	1.8;

1.8
date	2012.09.12.09.19.54;	author haesbaert;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.29.17.45.00;	author pascal;	state Exp;
branches;
next	1.6;

1.6
date	2012.08.21.14.46.18;	author pascal;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.25.18.25.30;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.30.02.03.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.24.17.39.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.13.21.03.36;	author marc;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.03.12.09.47;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.18
log
@change -Os to -Oz all around the tree

clang optimizes better for size with -Oz so use that as a default to avoid
overflowing the ramdisk floppies. gcc now accepts -Oz as an alias for -Os.

ok kettenis@@
@
text
@#	$OpenBSD: Makefile.inc,v 1.17 2017/05/30 22:32:10 naddy Exp $

CFLAGS=${DEBUG} ${COPTS} -Oz -Wall -Werror
CFLAGS+=	-ffreestanding -fno-stack-protector -DMDRANDOM
CPPFLAGS+=-I${S} -I${SADIR}/libsa -I. -I${.CURDIR}
SACFLAGS=-D_STANDALONE
DEBUGFLAGS=
# DEBUGFLAGS+=-DDEBUG
# DEBUGFLAGS+=-DGIDT_DEBUG
# DEBUGFLAGS+=-DBIOS_DEBUG
# DEBUGFLAGS+=-DEXEC_DEBUG
# DEBUGFLAGS+=-DALLOC_TRACE
# DEBUGFLAGS+=-DUNIX_DEBUG
# DEBUGFLAGS+=-DBOOTP_DEBUG -DNETIF_DEBUG -DETHER_DEBUG
# DEBUGFLAGS+=-DNFS_DEBUG -DRPC_DEBUG -DRARP_DEBUG
LINKADDR=0x40120
LOADADDR=0x40000
HEAP_LIMIT=0xA0000
BOOTREL=0x60000
BOOTMAGIC=0xc001d00d
#ROM_SIZE=32768
CLEANFILES+=	assym.h machine

SACFLAGS+=-nostdinc -fno-builtin -fpack-struct

.include <bsd.own.mk>
.if ${COMPILER_VERSION:Mclang}
NO_INTEGR_AS=	-no-integrated-as
.endif

.if !make(clean) && !make(cleandir) && !make(includes) && !make(libdep) && \
    !make(sadep) && !make(salibdir) && !make(obj)
.BEGIN:
	@@([ X$(S) = X -o -h machine ] || ln -s $(S)/arch/amd64/include machine)

assym.h: ${S}/kern/genassym.sh ${SADIR}/etc/genassym.cf
	sh ${S}/kern/genassym.sh ${CC} ${NO_INTEGR_AS} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${SADIR}/etc/genassym.cf > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
.endif

# NO_NET=no_net
BINDIR=	/usr/mdec

MANSUBDIR=amd64
@


1.17
log
@Allow building the bootstrap with clang:
* skip the integrated assembler for assym.h
* use as(1) to build biosboot.S and the various versions of srt0.S
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.16 2017/05/30 15:02:22 naddy Exp $
d3 1
a3 1
CFLAGS=${DEBUG} ${COPTS} -Os -Wall -Werror
@


1.16
log
@Build amd64 bootstrap with -ffreestanding.
"totally makes sense" kettenis@@
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.15 2016/11/06 16:04:20 tb Exp $
d26 5
d37 1
a37 1
	sh ${S}/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
@


1.15
log
@Do not create machine@@ symlinks in obj as root during includes:, but
defer their creation to later, so that they are owned by BUILDUSER.
This eliminates the last root-owned files in obj/ from 'make build'.
In addition, place a MACHINE == hppa test in hppa/stand/Makefile.inc
to avoid creating bogus symlinks on all other archs.

joint work with & ok natano, "let's try it" deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.14 2016/07/04 18:01:44 guenther Exp $
d4 1
a4 1
CFLAGS+=	-fno-stack-protector -DMDRANDOM
@


1.14
log
@DEBUGLIBS has been broken since the gcc4 switch, so delete it.  CFLAGS
contains -g by default anyway

problem noted by Edgar Pettijohn (edgar (at) pettijohn-web.com)
ok millert@@ kettenis@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.13 2015/10/08 22:41:12 yasuoka Exp $
d26 2
a27 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(obj)
@


1.13
log
@After replacement alloca() with alloc(), out-of-heap happened when booting
on a large block size (32K) partition.  Increase the HEAP_LIMIT from
0x90000 to 0xA0000.

try this, deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.12 2015/09/18 13:30:55 miod Exp $
a6 1
DEBUGLIBS=no
@


1.12
log
@Remove support for building the boot blocks with DEBUGFLAGS=-D_TEST, which is
supposed to create a userland binary in order to test non-boot related
functionality. This feature has been bitrotting in a non-compiling state
for years, and causes a too-many-ifdefs disease now that there are intrusive
EFI changes.

No functional change.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 2014/01/22 03:47:22 deraadt Exp $
d19 1
a19 1
HEAP_LIMIT=0x90000
@


1.11
log
@CDIAGFLAGS= not needed
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2013/12/28 02:51:06 deraadt Exp $
a13 1
# DEBUGFLAGS+=-g -D_TEST
a24 1
.if empty(DEBUGFLAGS:M-D_TEST)
a25 1
.endif
@


1.10
log
@Try to load entropy data from disk:/etc/random.seed, and additionally
use a MD-supplied random function.  Then, insert this into the ELF
openbsd.randomdata of the kernel, so that it has entropy right from
the start.  Some help from jsing for the softraid aspects.
Also tested by phessler
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2013/01/17 12:37:44 jsing Exp $
a4 1
CDIAGFLAGS=
@


1.9
log
@Generate assym.h where we need it, instead of reaching around into other
object directories.

Discussed with deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2012/08/29 17:45:00 pascal Exp $
d4 1
a4 1
CFLAGS+=	-fno-stack-protector
@


1.8
log
@Define empty CDIAGFLAGS for programs that use Werror.
Makes "make build" build with WARNINGS=Yes on amd64.

ok espie
@
text
@d25 1
a25 1
CLEANFILES+=	machine
a33 2
.endif

d35 4
a38 14
.if exists(${SADIR}/etc/assym.h)
CPPFLAGS+=-I${SADIR}/etc
.else
CPPFLAGS+=-I${SADIR}/etc/${__objdir}
.endif
.if exists(${SADIR}/libsa/libsa.a)
LIBSA=${SADIR}/libsa/libsa.a
.else
LIBSA=${SADIR}/libsa/${__objdir}/libsa.a
.endif
.if exists(${SADIR}/libz/libz.a)
LIBZ=${SADIR}/libz/libz.a
.else
LIBZ=${SADIR}/libz/${__objdir}/libz.a
@


1.7
log
@Get rid of all NOPIE and NOPIE_FLAGS in amd64/stand and use -fno-pie and -nopie
directly instead.  This will be the approach taken by every other arch too
in the near future.  It is easier than relying on bsd.own.mk to set these
correctly.

discussed with and ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 2012/08/21 14:46:18 pascal Exp $
d5 1
@


1.6
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 2007/11/25 18:25:30 deraadt Exp $
a4 1
CFLAGS+=	${NOPIE_FLAGS}
@


1.5
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 2005/12/30 02:03:48 millert Exp $
d5 1
@


1.4
log
@Now that errno.h and sys/errno.h are separate header files there is no
need to use the -Derrno=errno workaround added when __errno() was
introduced.  OK deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 2004/07/24 17:39:27 millert Exp $
d30 1
a30 1
.if !make(libdep) && !make(sadep) && !make(salibdir) && !make(kernlibdir) && !make(obj)
@


1.3
log
@Use '=' not '==' with test.  While ksh accepts '==' as a synomym for '=',
it is not valid in sh.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 2004/07/13 21:03:36 marc Exp $
d5 1
a5 1
CPPFLAGS+=-I${S} -I${SADIR}/libsa -I. -I${.CURDIR} -Derrno=errno
@


1.2
log
@errno changes, lib major version bumps, and general flag day
To build you must:
cd /usr/src && make obj && make includes
cd lib/libc && make depend && make && NOMAN=1 sudo make install
cd /usr/src && make build
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.1 2004/02/03 12:09:47 mickey Exp $
d32 1
a32 1
	@@([ X$(S) == X -o -h machine ] || ln -s $(S)/arch/amd64/include machine)
@


1.1
log
@das boot; das cloned das from das i386
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.34 2003/08/08 07:37:15 deraadt Exp $
d5 1
a5 1
CPPFLAGS+=-I${S} -I${SADIR}/libsa -I. -I${.CURDIR}
@

