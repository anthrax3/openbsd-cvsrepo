head	1.10;
access;
symbols
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4;
locks; strict;
comment	@# @;


1.10
date	2016.09.18.16.34.59;	author jsing;	state Exp;
branches;
next	1.9;
commitid	xxSOamF7jPcxnio1;

1.9
date	2016.09.11.17.51.21;	author jsing;	state Exp;
branches;
next	1.8;
commitid	OdBRlx3Vvs2tfqrF;

1.8
date	2016.09.11.15.54.11;	author jsing;	state Exp;
branches;
next	1.7;
commitid	m28Q0aUDbVqwDb3p;

1.7
date	2016.09.10.16.38.16;	author jsing;	state Exp;
branches;
next	1.6;
commitid	Guvt83tYQgzHIRwk;

1.6
date	2016.08.31.15.11.22;	author yasuoka;	state Exp;
branches;
next	1.5;
commitid	EJKMsAOhEcnTDdLM;

1.5
date	2016.05.11.08.30.58;	author kettenis;	state Exp;
branches;
next	1.4;
commitid	iUGi09b7ZyvHwN1F;

1.4
date	2015.11.07.17.53.23;	author yasuoka;	state Exp;
branches;
next	1.3;
commitid	lxMiCICDY4pypSTb;

1.3
date	2015.09.23.03.27.59;	author yasuoka;	state Exp;
branches;
next	1.2;
commitid	BkGxITKJnQSUlOl7;

1.2
date	2015.09.23.03.19.55;	author yasuoka;	state Exp;
branches;
next	1.1;
commitid	z7f6J8PFVkXAL0et;

1.1
date	2015.09.02.01.52.25;	author yasuoka;	state Exp;
branches;
next	;
commitid	CUwlbzT4LejFC15d;


desc
@@


1.10
log
@Add bcrypt pbkdf support to the softraid crypto boot loader code.

Based on a diff from djm@@
@
text
@#	$OpenBSD: Makefile.common,v 1.9 2016/09/11 17:51:21 jsing Exp $

S=		${.CURDIR}/../../../../..
SADIR=		${.CURDIR}/../..
EFIDIR=		${S}/stand/efi

OBJCOPY?=	objcopy
OBJDUMP?=	objdump

EFI_HEAP_LIMIT=	0xc00000

LDFLAGS+=	-nostdlib -T${.CURDIR}/../${LDSCRIPT} -Bsymbolic -shared

COPTS+=		-DEFIBOOT -DNEEDS_HEAP_H -I${.CURDIR}/..
COPTS+=		-I${EFIDIR}/include -I${S}/stand/boot
COPTS+=		-ffreestanding -std=gnu99
COPTS+=		-fshort-wchar -fPIC -mno-red-zone
.if ${SOFTRAID:L} == "yes"
COPTS+=		-DSOFTRAID
.endif
COPTS+=		-D_STANDALONE -nostdinc -fno-builtin

AFLAGS+=	-pipe -fPIC

.PATH:	${.CURDIR}/..
SRCS+=	self_reloc.c
SRCS+=	efiboot.c efidev.c
SRCS+=	conf.c

.PATH:	${S}/stand/boot
SRCS+=	boot.c bootarg.c cmd.c vars.c

.PATH:	${S}/lib/libsa
SRCS+=	alloc.c ctime.c exit.c getchar.c memcmp.c memcpy.c memset.c printf.c \
	putchar.c snprintf.c strcmp.c strerror.c strlen.c strncmp.c strncpy.c \
	strtol.c strtoll.c
SRCS+=	close.c closeall.c cons.c cread.c dev.c disklabel.c dkcksum.c fstat.c \
	lseek.c open.c read.c readdir.c stat.c
SRCS+=	ufs.c cd9660.c
.if ${SOFTRAID:L} == "yes"
SRCS+=	aes_xts.c bcrypt_pbkdf.c blowfish.c explicit_bzero.c hmac_sha1.c \
	pkcs5_pbkdf2.c rijndael.c sha1.c sha2.c softraid.c
.endif

.PATH:	${S}/lib/libz
SRCS+=	adler32.c crc32.c inflate.c inftrees.c

.PATH:	${S}/lib/libkern
SRCS+=	divdi3.c moddi3.c qdivrem.c
SRCS+=	strlcpy.c

.PATH:	${SADIR}/libsa
SRCS+=	loadfile.c elf64.c elf32.c memprobe.c cmd_i386.c dev_i386.c exec_i386.c
SRCS+=	machdep.c diskprobe.c

.if ${SOFTRAID:L} == "yes"
SRCS+=	softraid_amd64.c
.endif

PROG.so=	${PROG:S/.EFI/.so/}
CLEANFILES+=	${PROG.so} ${PROG.so}.tmp

${PROG}: ${PROG.so}
	${OBJCOPY} -j .text -j .sdata -j .data -j .dynamic -j .dynsym -j .rel \
	    -j .rel.* -j .rela -j .rela.* -j .reloc \
	    --target=${OBJFMT} ${PROG.so} ${.TARGET}

.include <bsd.prog.mk>
CFLAGS+=	-Wno-pointer-sign
CPPFLAGS+=	-DSMALL -DSLOW -DNOBYFOUR -D__INTERNAL_LIBSA_CREAD
CPPFLAGS+=	-DHEAP_LIMIT=${EFI_HEAP_LIMIT}

${PROG.so}: ${OBJS}
	${LD} ${LDFLAGS} -o ${.TARGET}.tmp ${OBJS} ${LDADD}
	@@if ${OBJDUMP} -t ${.TARGET}.tmp | grep 'UND'; then	\
		(echo Undefined symbols; false);		\
	fi
	mv ${.TARGET}.tmp ${.TARGET}
@


1.9
log
@Switch amd64 to libsa MI softraid.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.common,v 1.8 2016/09/11 15:54:11 jsing Exp $
d41 2
a42 2
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pkcs5_pbkdf2.c rijndael.c \
	sha1.c softraid.c
@


1.8
log
@Rename softraid boot files, which are currently in an MD location. This
will allow us to bring in a MI softraid.{c,h} in lib/libsa.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.common,v 1.7 2016/09/10 16:38:16 jsing Exp $
d41 2
a42 1
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pkcs5_pbkdf2.c rijndael.c sha1.c
@


1.7
log
@Rename libsa pbkdf2.c to pkcs5_pbkdf2.c so that we match libutil.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.common,v 1.6 2016/08/31 15:11:22 yasuoka Exp $
d56 1
a56 1
SRCS+=	softraid.c
@


1.6
log
@Enable cd9660 in efiboot.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.common,v 1.5 2016/05/11 08:30:58 kettenis Exp $
d41 1
a41 1
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pbkdf2.c rijndael.c sha1.c
@


1.5
log
@Move EFI header files to a location where they can be used on other
architectures besides amd64.

ok deraadt@@, krw@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.common,v 1.4 2015/11/07 17:53:23 yasuoka Exp $
d39 1
a39 1
SRCS+=	ufs.c
@


1.4
log
@Disable red-zone since EFI is running with a different ABI.

This may fixes the issue when loading a compressed kernel on macbook
reported by gonzalo, jung, Joel Roberts, Bryan Vyhmeist and many.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.common,v 1.3 2015/09/23 03:27:59 yasuoka Exp $
d5 1
a5 1
EFIDIR=		${.CURDIR}/../../efi
@


1.3
log
@Remove -DLINKADDR=.  It is for first-stage bootstrap.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.common,v 1.2 2015/09/23 03:19:55 yasuoka Exp $
d17 1
a17 1
COPTS+=		-fshort-wchar -fPIC
@


1.2
log
@efiboot used 3MB memory below the region for the kernel, but UEFI
firmware on some machines allocates larger area whose upper part
overlaps the kernel region.  Let the efiboot use lower area for its
heap.  Also change its size from 3MB to 1MB and limit it by
HEAP_LIMIT.

The problem is reported by Toby Slight and Brian Conway.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.common,v 1.1 2015/09/02 01:52:25 yasuoka Exp $
d14 1
a14 1
COPTS+=		-DEFIBOOT -DNEEDS_HEAP_H -DLINKADDR=${LINKADDR} -I${.CURDIR}/..
@


1.1
log
@Initial commit of uefi boot loader of OpenBSD.

ok deraadt yuo
@
text
@d1 1
a1 1
#	$OpenBSD$
d10 2
d70 1
@

