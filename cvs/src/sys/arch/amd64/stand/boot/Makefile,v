head	1.38;
access;
symbols
	OPENBSD_6_2:1.38.0.4
	OPENBSD_6_2_BASE:1.38
	OPENBSD_6_1:1.36.0.4
	OPENBSD_6_1_BASE:1.36
	OPENBSD_6_0:1.31.0.2
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.30.0.2
	OPENBSD_5_9_BASE:1.30
	OPENBSD_5_8:1.29.0.8
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.29.0.2
	OPENBSD_5_7_BASE:1.29
	OPENBSD_5_6:1.29.0.4
	OPENBSD_5_6_BASE:1.29
	OPENBSD_5_5:1.26.0.4
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.24.0.2
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.21.0.2
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.8.0.20
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.18
	OPENBSD_5_0:1.8.0.16
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.14
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.12
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@# @;


1.38
date	2017.06.19.22.50.50;	author deraadt;	state Exp;
branches;
next	1.37;
commitid	qxUetDs8y9dCgVHx;

1.37
date	2017.05.30.22.32.10;	author naddy;	state Exp;
branches;
next	1.36;
commitid	ZnHLUGxOdWWbvSX2;

1.36
date	2016.09.18.16.34.59;	author jsing;	state Exp;
branches;
next	1.35;
commitid	xxSOamF7jPcxnio1;

1.35
date	2016.09.11.17.51.21;	author jsing;	state Exp;
branches;
next	1.34;
commitid	OdBRlx3Vvs2tfqrF;

1.34
date	2016.09.11.15.54.11;	author jsing;	state Exp;
branches;
next	1.33;
commitid	m28Q0aUDbVqwDb3p;

1.33
date	2016.09.10.16.38.16;	author jsing;	state Exp;
branches;
next	1.32;
commitid	Guvt83tYQgzHIRwk;

1.32
date	2016.07.30.03.25.48;	author guenther;	state Exp;
branches;
next	1.31;
commitid	HVbAtwruDlJazNH2;

1.31
date	2016.03.30.06.38.45;	author jmc;	state Exp;
branches;
next	1.30;
commitid	LN9ijdk9SEnzWAbM;

1.30
date	2015.09.02.01.52.25;	author yasuoka;	state Exp;
branches;
next	1.29;
commitid	CUwlbzT4LejFC15d;

1.29
date	2014.07.13.21.18.44;	author jasper;	state Exp;
branches;
next	1.28;
commitid	Y3LcLObEiHDZvy27;

1.28
date	2014.07.13.09.26.08;	author jasper;	state Exp;
branches;
next	1.27;
commitid	Cnjup0HpCIRrcQ6o;

1.27
date	2014.07.12.21.54.57;	author jasper;	state Exp;
branches;
next	1.26;
commitid	3HeD4LaLGiS22I3y;

1.26
date	2013.12.28.15.16.28;	author jsing;	state Exp;
branches;
next	1.25;

1.25
date	2013.12.28.02.51.06;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2013.06.02.21.01.48;	author guenther;	state Exp;
branches;
next	1.23;

1.23
date	2013.04.23.16.41.13;	author jsing;	state Exp;
branches;
next	1.22;

1.22
date	2013.04.23.12.28.51;	author jsing;	state Exp;
branches;
next	1.21;

1.21
date	2013.01.18.21.09.04;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2013.01.18.11.35.24;	author jsing;	state Exp;
branches;
next	1.19;

1.19
date	2013.01.17.12.37.44;	author jsing;	state Exp;
branches;
next	1.18;

1.18
date	2013.01.17.12.25.11;	author jsing;	state Exp;
branches;
next	1.17;

1.17
date	2012.10.27.15.43.42;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2012.10.13.14.10.35;	author jsing;	state Exp;
branches;
next	1.15;

1.15
date	2012.10.12.14.58.26;	author jsing;	state Exp;
branches;
next	1.14;

1.14
date	2012.10.12.14.00.02;	author jsing;	state Exp;
branches;
next	1.13;

1.13
date	2012.10.09.13.55.36;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2012.10.09.11.43.22;	author jsing;	state Exp;
branches;
next	1.11;

1.11
date	2012.09.25.09.01.03;	author pascal;	state Exp;
branches;
next	1.10;

1.10
date	2012.08.29.17.45.00;	author pascal;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.21.14.46.18;	author pascal;	state Exp;
branches;
next	1.8;

1.8
date	2007.11.25.18.25.30;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.30.01.25.43;	author tom;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.30.18.28.57;	author jmc;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.18.21.15.33;	author mpf;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.30.14.37.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.03.13.18.05;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.17.22.49.46;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.03.12.09.47;	author mickey;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.25;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.38
log
@As early as possible, create a link /bsd.booted to the /bsd kernel we
presume we booted from.  If you boot from another kernel, we cannot help
you later with hibernate, sorry -- The kernel does not get a useable
filename from the bootblocks.

In the bootblocks, detect a live hibernate signature and boot from
/bsd.booted instead.

with yasuoka, lots of discussion with mlarkin, ok tom
@
text
@#	$OpenBSD: Makefile,v 1.37 2017/05/30 22:32:10 naddy Exp $

COPTS?=
MAN?=	boot.8

.if !empty(COPTS:M-DFDBOOT)
SOFTRAID?=no
.else
SOFTRAID?=yes
.endif

.if ${MACHINE} == "amd64"
S=	${.CURDIR}/../../../..
SADIR=	${.CURDIR}/..

PROG?=	boot
SRCS=	srt0.S conf.c
LD?=	ld
SIZE?=	size
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -nopie -znorelro
LDFLAGS+=-melf_i386 -L/usr/libdata

.PATH:	${S}/stand/boot
SRCS+=	boot.c bootarg.c cmd.c vars.c

.PATH:	${SADIR}/libsa
SRCS+=	gidt.S random_i386.S
SRCS+=	cmd_i386.c dev_i386.c exec_i386.c gateA20.c machdep.c
SRCS+=	bioscons.c biosdev.c diskprobe.c memprobe.c time.c
.if ${SOFTRAID:L} == "yes"
SRCS+=	softraid_amd64.c
.endif

.PATH:	${S}/lib/libsa
SRCS+=	alloc.c ctime.c exit.c getchar.c memcmp.c memcpy.c memset.c printf.c \
	putchar.c snprintf.c strcmp.c strerror.c strlen.c strncmp.c strncpy.c \
	strtol.c strtoll.c
SRCS+=	close.c closeall.c cons.c cread.c dev.c disklabel.c dkcksum.c fstat.c \
	lseek.c open.c read.c readdir.c stat.c
SRCS+=	elf32.c elf64.c loadfile.c
SRCS+=	ufs.c
.if ${SOFTRAID:L} == "yes"
SRCS+=	aes_xts.c bcrypt_pbkdf.c blowfish.c explicit_bzero.c hmac_sha1.c \
	pkcs5_pbkdf2.c rijndael.c sha1.c sha2.c softraid.c
.endif

.PATH:	${S}/lib/libkern
SRCS+=	divdi3.c moddi3.c qdivrem.c
SRCS+=	strlcpy.c

.PATH:	${S}/lib/libz
SRCS+=	adler32.c crc32.c inflate.c inftrees.c

boot.bin: boot
	objcopy -v -O binary ${PROG} boot.bin

CLEANFILES+= ${PROG}.new

.depend srt0.o gidt.o: assym.h

${PROG}: $(OBJS)
	$(LD) $(LDFLAGS) -o ${PROG}.new $(OBJS)
	@@perl ${SADIR}/boot/check-boot.pl ${PROG}.new
	@@mv ${PROG}.new ${PROG}
	@@$(SIZE) ${PROG}

.else
NOPROG=
.endif

.include <bsd.prog.mk>

.if ${SOFTRAID:L} == "yes"
CPPFLAGS+=-DSOFTRAID
.endif
CPPFLAGS+=-DBOOTMAGIC=$(BOOTMAGIC) ${DEBUGFLAGS} -DLINKADDR=${LINKADDR}
CPPFLAGS+=-DSLOW -DSMALL -DNOBYFOUR -DNO_GZIP -DDYNAMIC_CRC_TABLE
CPPFLAGS+=-DHIBERNATE
CPPFLAGS+=-DHEAP_LIMIT=${HEAP_LIMIT} -I${S}/stand/boot #-DCOMPAT_UFS
CFLAGS+=-m32 $(SACFLAGS) -D__INTERNAL_LIBSA_CREAD -fno-pie
AFLAGS+=${NO_INTEGR_AS}
AFLAGS+=-m32 # -Wa,-R
# AFLAGS+=-Wa,-a
AFLAGS+=-fno-pie
@


1.37
log
@Allow building the bootstrap with clang:
* skip the integrated assembler for assym.h
* use as(1) to build biosboot.S and the various versions of srt0.S
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.36 2016/09/18 16:34:59 jsing Exp $
d78 1
@


1.36
log
@Add bcrypt pbkdf support to the softraid crypto boot loader code.

Based on a diff from djm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.35 2016/09/11 17:51:21 jsing Exp $
d80 1
@


1.35
log
@Switch amd64 to libsa MI softraid.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.34 2016/09/11 15:54:11 jsing Exp $
d43 2
a44 2
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pkcs5_pbkdf2.c rijndael.c \
	sha1.c softraid.c
@


1.34
log
@Rename softraid boot files, which are currently in an MD location. This
will allow us to bring in a MI softraid.{c,h} in lib/libsa.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.33 2016/09/10 16:38:16 jsing Exp $
d43 2
a44 1
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pkcs5_pbkdf2.c rijndael.c sha1.c
@


1.33
log
@Rename libsa pbkdf2.c to pkcs5_pbkdf2.c so that we match libutil.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.32 2016/07/30 03:25:48 guenther Exp $
d31 1
a31 1
SRCS+=	softraid.c
@


1.32
log
@Prep for relro: make sure it's off for any non-PIE stand/ program

ok millert@@ kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.31 2016/03/30 06:38:45 jmc Exp $
d43 1
a43 1
SRCS+=	aes_xts.c explicit_bzero.c hmac_sha1.c pbkdf2.c rijndael.c sha1.c
@


1.31
log
@for some time now mandoc has not required MLINKS to function
correctly - logically complete that now by removing MLINKS from base;

authors need only to ensure there is an entry in NAME for any function/
util being added. MLINKS will still work, and remain for perl to ease
upgrades;

ok nicm (curses) bcook (ssl)
ok schwarze, who provided a lot of feedback and assistance
ok tb natano jung
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.30 2015/09/02 01:52:25 yasuoka Exp $
d20 1
a20 1
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -nopie
@


1.30
log
@Initial commit of uefi boot loader of OpenBSD.

ok deraadt yuo
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.29 2014/07/13 21:18:44 jasper Exp $
a4 1
MLINKS?=boot.8 boot.conf.5
@


1.29
log
@fix even more trailing tabs
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.28 2014/07/13 09:26:08 jasper Exp $
d28 1
a28 1
SRCS+=	alloca.S gidt.S random_i386.S
@


1.28
log
@move putchar() into libsa

"sure" miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.27 2014/07/12 21:54:57 jasper Exp $
d22 1
a22 1
LDFLAGS+=-melf_i386 -L/usr/libdata 
@


1.27
log
@move getchar() into libsa where applicable

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.26 2013/12/28 15:16:28 jsing Exp $
d37 2
a38 2
	snprintf.c strcmp.c strerror.c strlen.c strncmp.c strncpy.c strtol.c \
	strtoll.c
@


1.26
log
@Further clean up and unification of the amd64 and i386 boot(8) makefiles.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.25 2013/12/28 02:51:06 deraadt Exp $
d36 3
a38 2
SRCS+=	alloc.c ctime.c exit.c memcmp.c memcpy.c memset.c printf.c snprintf.c \
	strcmp.c strerror.c strlen.c strncmp.c strncpy.c strtol.c strtoll.c
@


1.25
log
@Try to load entropy data from disk:/etc/random.seed, and additionally
use a MD-supplied random function.  Then, insert this into the ELF
openbsd.randomdata of the kernel, so that it has entropy right from
the start.  Some help from jsing for the softraid aspects.
Also tested by phessler
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.24 2013/06/02 21:01:48 guenther Exp $
d24 3
a34 3
.PATH:	${S}/stand/boot
SRCS+=	boot.c bootarg.c cmd.c vars.c

d36 2
a37 3
SRCS+=	alloc.c ctime.c exit.c getfile.c gets.c globals.c memcmp.c memcpy.c \
	memset.c printf.c snprintf.c strcmp.c strerror.c strlcat.c strlcpy.c \
	strlen.c strncmp.c strncpy.c strtol.c strtoll.c
d39 1
a39 1
	ioctl.c lseek.c open.c read.c readdir.c stat.c write.c
d46 1
a46 1
.PATH:	${S}/lib/libkern/arch/amd64 ${S}/lib/libkern
d48 1
@


1.24
log
@Revert previous: libsa/ufs.c was fixed to not use big types when not
necessary.  If something crawls in again that needs these we want to know

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.23 2013/04/23 16:41:13 jsing Exp $
d25 1
a25 1
SRCS+=	alloca.S gidt.S
@


1.23
log
@Include udivdi3/umoddi3 when compiling the amd64/i386 boot blocks - they
are needed for the upcoming type changes.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.22 2013/04/23 12:28:51 jsing Exp $
d48 1
a48 1
SRCS+=	divdi3.c moddi3.c qdivrem.c udivdi3.c umoddi3.c
@


1.22
log
@Remove softraid boot support from fdboot (again).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.21 2013/01/18 21:09:04 espie Exp $
d48 1
a48 1
SRCS+=	divdi3.c moddi3.c qdivrem.c
@


1.21
log
@fix bogus dependencies, and allow mkdep to run
checked on amd64 by rpe@@
okay jsing@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.20 2013/01/18 11:35:24 jsing Exp $
d3 1
d7 1
a7 1
.if !empty(CFLAGS:M-DFDBOOT)
@


1.20
log
@Fix the makefile so it works on other architectures.

Found the hard way by bluhm@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.19 2013/01/17 12:37:44 jsing Exp $
d57 1
a57 2
${.CURDIR}/srt0.S: assym.h
${SADIR}/libsa/gidt.S: assym.h
@


1.19
log
@Generate assym.h where we need it, instead of reaching around into other
object directories.

Discussed with deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2012/10/27 15:43:42 jsing Exp $
d6 6
a14 6

.if !empty(CFLAGS:M-DFDBOOT)
SOFTRAID=no
.else
SOFTRAID=yes
.endif
@


1.18
log
@Clean up/standardise makefiles for amd64/stand.
@
text
@d57 3
@


1.17
log
@Move the code for softraid boot into separate files, leaving only minimal
hooks that are called from the normal code path. This allows softraid boot
support to be completely enabled or disabled at compile time. For boot(8)
all softraid boot support is now enabled by default, including support for
booting from crypto volumes. Disable softraid boot support for fdboot,
which further shrinks the binary.
@
text
@d1 1
a1 3
#	$OpenBSD: Makefile,v 1.14 2012/10/12 14:00:02 jsing Exp $

.include "${.CURDIR}/../Makefile.inc"
d7 1
a7 1
S	=${.CURDIR}/../../../..
d10 3
a12 1
.if empty(CFLAGS:M-DFDBOOT)
d24 4
a27 5
# i386 stuff (so, it will possibly load in the same 64k)
SRCS+=	machdep.c dev_i386.c exec_i386.c cmd_i386.c
SRCS+=	gidt.S alloca.S biosdev.c bioscons.c gateA20.c \
	memprobe.c diskprobe.c time.c ## biosprobe.c
.if defined(SOFTRAID)
d32 1
a32 1
SRCS+=	boot.c cmd.c vars.c bootarg.c
d35 6
a40 6
SRCS+=	alloc.c exit.c getfile.c gets.c globals.c strcmp.c strlen.c \
	strncmp.c memcmp.c memcpy.c memset.c printf.c snprintf.c \
	strerror.c strncpy.c strtol.c strtoll.c ctime.c strlcpy.c strlcat.c
SRCS+=	close.c closeall.c dev.c disklabel.c dkcksum.c fstat.c ioctl.c lseek.c \
	open.c read.c stat.c write.c cread.c readdir.c cons.c loadfile.c \
	elf32.c elf64.c
d42 1
a42 1
.if defined(SOFTRAID)
d69 1
a69 1
.if defined(SOFTRAID)
@


1.16
log
@Only build fdboot on the appropriate architectures. Also fix the path to
check-boot.pl so that it works with both boot and fdboot.
@
text
@d12 4
d28 3
d43 2
a44 2
.if defined(BOOT_CRYPTO)
SRCS+=  aes_xts.c explicit_bzero.c hmac_sha1.c pbkdf2.c rijndael.c sha1.c
d70 2
a71 2
.if defined(BOOT_CRYPTO)
CPPFLAGS+=-DBOOT_CRYPTO
@


1.15
log
@Add a script that checks the file offsets for boot(8)'s .text and .data
sections match up with their LMAs. This is necessary since biosboot does
not perform relocation.

Discussed with deraadt@@
@
text
@d53 1
a53 1
	@@perl ${.CURDIR}/check-boot.pl ${PROG}.new
@


1.14
log
@Build a 'fdboot' that will be used for floppy disk media. This can be made
smaller than the normal 'boot', however for now it is identical.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2012/10/09 11:43:22 jsing Exp $
d49 2
d52 3
a54 1
	$(LD) $(LDFLAGS) -o ${PROG} $(OBJS)
@


1.13
log
@Teach amd64 boot(8) how to access a softraid crypto volume. This allows for
full disk encryption since the kernel can now be loaded directly from the
crypto volume, instead of needing to be on FFS.

This is currently disabled by default, however can be enabled by compiling
with boot(8) 'make -DBOOT_CRYPTO'.
@
text
@d5 2
a6 2
MAN=	boot.8
MLINKS=	boot.8 boot.conf.5
d12 1
a12 1
PROG=	boot
@


1.12
log
@Remove -noinhibit-exec now that we no longer have to deal with
"relocation truncated" linker errors.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2012/09/25 09:01:03 pascal Exp $
d36 3
d59 3
@


1.11
log
@Reduce the diff between amd64/stand and i386/stand, requested by deraadt@@.
These create essentially the same bootblocks, so the build system should not be
diverging too much, or at least easily diffable.
There is still a lot of work to be done here, but this is the low-hanging fruit.

ok jsing@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2012/08/29 17:45:00 pascal Exp $
d16 1
a16 1
LDFLAGS+=-nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -noinhibit-exec -nopie
@


1.10
log
@Get rid of all NOPIE and NOPIE_FLAGS in amd64/stand and use -fno-pie and -nopie
directly instead.  This will be the approach taken by every other arch too
in the near future.  It is easier than relying on bsd.own.mk to set these
correctly.

discussed with and ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2012/08/21 14:46:18 pascal Exp $
d16 2
a17 2
LDFLAGS+=-melf_i386 -nostdlib -Bstatic -Ttext $(LINKADDR) -N -x -noinhibit-exec
LDFLAGS+=-nopie -L/usr/libdata 
d61 1
a62 1
# AFLAGS+=-Wa,-a
@


1.9
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2007/11/25 18:25:30 deraadt Exp $
d17 1
a17 1
LDFLAGS+=-L/usr/libdata 
d59 1
a59 2
CFLAGS+=-m32 $(SACFLAGS) -D__INTERNAL_LIBSA_CREAD
CFLAGS+=${NOPIE_FLAGS}
d61 1
a61 1
AFLAGS+=${NOPIE_FLAGS}
@


1.8
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2007/05/30 01:25:43 tom Exp $
d60 1
d62 1
@


1.7
log
@Pull out the ELF loadfile pieces from the standalone libraries, so that
both 32- and 64-bit versions can be created (previously only one or the
other could be built for a given boot loader).

Use this to allow the i386 and amd64 boot blocks to boot both ELF32 and
ELF64 kernels (i.e. amd64 boot blocks can now load i386 kernels, and
vice versa).  Obviously the system must support LONG mode in order to
successfully run the amd64 kernel once it is loaded.

Advice and discussions from/with dale@@ (going back three years).  Much
testing nick@@ and todd@@; thanks.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2006/10/30 18:28:57 jmc Exp $
a28 2
.PATH:	${S}/lib/libkern	# for strl* and gcc support
# stand routines
a31 1
# io routines
a34 1
# boot filesystems
d36 2
a37 1
# gcc support
d48 1
a48 1
	#@@$(SIZE) ${PROG}
@


1.6
log
@install boot.conf as a section 5 page, not section 8;

from mikolaj kucharski;
ok mk deraadt krw
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2006/09/18 21:15:33 mpf Exp $
d36 2
a37 1
	open.c read.c stat.c write.c cread.c readdir.c cons.c loadfile.c
@


1.5
log
@boot(8) ``machine memory'' support for > 4G.
Convert parser to strtoll(3) and use 64bit printf.
With help from mickey@@
i386 and amd64 tests by me, alpha test by mickey@@
OK mickey@@, miod@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2005/07/30 14:37:39 millert Exp $
d6 1
a6 1
MLINKS=	boot.8 boot.conf.8
@


1.4
log
@Need moddi3.c qdivrem.c for libz
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2005/05/03 13:18:05 tom Exp $
d33 1
a33 1
	strerror.c strncpy.c strtol.c ctime.c strlcpy.c strlcat.c
d40 1
a40 1
SRCS+=	moddi3.c qdivrem.c
@


1.3
log
@The return value from getEBDAaddr() (info) is not used in bios_E820(),
so nuke it.  amd64 no longer needs biosprobe.c listed in SRCS.  Trims
100 bytes from the boot blocks.

Bump versions on boot, cdboot and pxeboot, as I'm getting cautious in
my old age.

ok weingart@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2004/05/17 22:49:46 drahn Exp $
d29 1
a29 1
.PATH:	${S}/lib/libkern	# for strl*
d39 2
@


1.2
log
@Work arounda behaviour change in binutils-2.14, now  -m<...> -nostdlib
removes /usr/libdata from the script search path. add it back with a -L
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/02/03 12:09:47 mickey Exp $
d23 1
a23 1
	memprobe.c diskprobe.c time.c biosprobe.c
@


1.1
log
@das boot; das cloned das from das i386
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.31 2003/04/17 12:06:05 mickey Exp $
d17 1
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
a16 1
LDFLAGS+=-L/usr/libdata 
@


