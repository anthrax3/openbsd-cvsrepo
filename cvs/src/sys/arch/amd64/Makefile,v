head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.2
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.10.0.12
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.8
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.10
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.12
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.14
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.10
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.8
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.6
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.4
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.1.0.8
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@# @;


1.12
date	2017.01.22.03.27.31;	author tb;	state Exp;
branches;
next	1.11;
commitid	7xfCYX9g3lREuZZf;

1.11
date	2016.10.14.18.42.58;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	dUZQxi6w3YqAb6KQ;

1.10
date	2013.12.08.14.46.39;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.26.19.43.01;	author jasper;	state Exp;
branches;
next	1.8;

1.8
date	2010.11.12.17.11.44;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.11.03.20.08.02;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.31.22.21.43;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.09.27.09.13.31;	author grange;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.06.11.16.47;	author pedro;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.06.02.59.51;	author marco;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.06.00.56.40;	author marco;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.39.38;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Introduce the KEEPKERNELS variable: if this is set either in mk.conf or
the environment, 'make cleandir' does not descend into kernel build
directories.  Thus, kernel object files survive 'make build' on slower
architectures.

WARNING:
If you set this variable, you run the risk of breaking 'make release':
Be sure to run 'make cleandir' from /sys/arch/$(machine)/compile before
doing 'make release'.  This issue will be addressed shortly.

requested by kettenis;
ok deraadt
@
text
@#	$OpenBSD: Makefile,v 1.11 2016/10/14 18:42:58 deraadt Exp $

.include <bsd.own.mk>    # for KEEPKERNELS

S=	${.CURDIR}/../..
KFILE=	GENERIC
.if exists(conf/GENERIC.MP)
KFILE=	GENERIC.MP
.endif
TDIRS=	${_arch} include pci isa
TAGS=	${.CURDIR}/tags

NOPROG=
NOMAN=
NOOBJ=
SUBDIR=	stand
.if !defined(KEEPKERNELS) || !(make(clean) || make(cleandir))
SUBDIR+=compile
.endif

# config the fattest kernel we can find into a temporary dir
# to create a Makefile.  Then use make to pull some variables
# out and push them into the sub-shell to expand the paths,
# and finally run ctags.
tags::
	TDIR=`mktemp -d /tmp/_tagXXXXXXXXXX` || exit 1; \
	eval "S=${S}" && \
	config -s ${S} -b $${TDIR} ${.CURDIR}/conf/${KFILE} && \
	eval "_arch=\"`make -V _arch -f $${TDIR}/Makefile`\"" && \
	eval "_mach=\"`make -V _mach -f $${TDIR}/Makefile`\"" && \
	eval "_machdir=\$S/arch/$${_mach}" && \
	eval "_archdir=\$S/arch/$${_arch}" && \
	eval "HFILES=\"`find $S \( -path $S/'arch' -o -path $S/stand -o -path $S/lib/libsa -o -path $S'/lib/libkern/arch' \) -prune -o -name '*.h'; find $${_machdir} $${_archdir} $S/lib/libkern/arch/$${_mach} \( -name boot -o -name stand \) -prune -o -name '*.h'`\"" && \
	eval "SFILES=\"`make -V SFILES -f $${TDIR}/Makefile`\"" && \
	eval "CFILES=\"`make -V CFILES -f $${TDIR}/Makefile`\"" && \
	eval "AFILES=\"`make -V AFILES -f $${TDIR}/Makefile`\"" && \
	ctags -wd -f ${TAGS} $${CFILES} $${HFILES} && \
	egrep "^[_A-Z]*ENTRY[_A-Z]*\(.*\)" $${SFILES} $${AFILES} | \
	    sed "s;\\([^:]*\\):\\([^(]*\\)(\\([^, )]*\\)\\(.*\\);\\3	\\1	/^\\2(\\3\\4$$/;" \
	    >> ${TAGS} && \
	sort -o ${TAGS} ${TAGS} && \
	rm -rf $${TDIR}

links:
	-for i in conf ${TDIRS}; do \
	    (cd $$i && rm -f tags; ln -s tags tags); done

obj:	_SUBDIRUSE

.include <bsd.prog.mk>
@


1.11
log
@Kernel builds now happen in compile/CONFIG/obj@@ -> /usr/obj/... [or ./obj/,
if srctree is not rooted at /usr/src].  As a result, stock GENERIC & RAMDISK
kernels are commited to the tree, to ensure the src tree can be "readonly"
during builds, with all writes occuring inside the obj space.  config -b
options are handled by ../Makefile.inc.  The canonical new way to configure
one of these kernels is:
    % cd /sys/arch/amd64/compile/GENERIC.MP
    % doas make obj
    % make config
    % make
    % doas cp obj/bsd /bsd
The build infrastructure will use this new mechanism in a de-escalation
way using BUILDUSER.
Much help from natano and tb.
@
text
@d1 3
a3 1
#	$OpenBSD: Makefile,v 1.10 2013/12/08 14:46:39 espie Exp $
d16 4
a19 1
SUBDIR=	stand compile
@


1.10
log
@reflect reality, mark as NOOBJ
"sure" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2013/03/26 19:43:01 jasper Exp $
d14 1
a14 1
SUBDIR=	stand
@


1.9
log
@sync TDIRS with reality

"looks good" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2010/11/12 17:11:44 deraadt Exp $
d13 1
@


1.8
log
@Push all potential (as in, all system MI not utilized by the bootblocks)
.h files into the ctags run as well to bring #define's and structs and
such into scope.  Problem reported by thib
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2010/11/03 20:08:02 deraadt Exp $
d8 1
a8 1
TDIRS=	${_arch} include pci isa eisa
@


1.7
log
@no need to specify the -t flag to ctags
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2010/05/31 22:21:43 deraadt Exp $
d27 1
d31 1
a31 1
	ctags -wd -f ${TAGS} $${CFILES} && \
@


1.6
log
@Completely rewrite the tags file creation process.  use config(8) against
a fat kernel (GERERIC or GENERIC.MP) into a temporary dir, then extract some
variables using make -V, and after some more singing and dancing use this
full and (more) correct list of files with ctags.  Don't read this code.
ok guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2007/10/22 01:26:31 deraadt Exp $
d30 1
a30 1
	ctags -wdt -f ${TAGS} $${CFILES} && \
@


1.5
log
@Fix tags file creating by removing unexisting paths.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2005/05/06 11:16:47 pedro Exp $
d3 7
a9 5
S=${.CURDIR}/../..
.include "$S/kern/Make.tags.inc"

NOPROG=	noprog
NOMAN=	noman
d11 2
d15 21
a35 15
TAMD64=	$S/arch/amd64/tags
SAMD64=	$S/arch/amd64/amd64/*.[ch] \
	$S/arch/amd64/include/*.h  \
	$S/arch/amd64/isa/*.[ch] $S/arch/amd64/pci/*.[ch]
AAMD64=	$S/arch/amd64/amd64/*.[sS] $S/lib/libkern/arch/amd64/*.[sS]

# Directories in which to place amd64 tags links
DAMD64=	conf amd64 include isa pci

tags:
	-ctags -wdtf ${TAMD64} ${COMM} ${SAMD64}
	egrep "^ENTRY(.*)|^ALTENTRY(.*)" ${AAMD64} | \
	    sed "s;\([^:]*\):\([^(]*\)(\([^, )]*\)\(.*\);\3	\1	/^\2(\3\4$$/;" \
		>> ${TAMD64}
	sort -o ${TAMD64} ${TAMD64}
d38 2
a39 2
	-for i in ${DAMD64}; do \
	    (cd $$i && rm -f tags; ln -s ${TAMD64} tags); done
@


1.4
log
@generate vim-compatible tag files, from netbsd
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2005/05/06 02:59:51 marco Exp $
d15 1
a15 2
AAMD64=	$S/arch/amd64/amd64/*.[sS] $S/arch/amd64/isa/*.[sS] \
	$S/lib/libkern/arch/amd64/*.[sS]
@


1.3
log
@Fix links target.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2005/05/06 00:56:40 marco Exp $
d24 1
a24 1
	    sed "s;\([^:]*\):\([^(]*\)(\([^, )]*\)\(.*\);\3 \1 /^\2(\3\4$$/;" \
@


1.2
log
@Add tags to amd64.

<miod>	commit your stuff.
<miod>	make tags work.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2004/01/28 01:39:38 mickey Exp $
d30 1
a30 2
	    cd $$i && rm -f tags; ln -s ${TAMD64} tags; done

@


1.1
log
@an amd64 arch support.
hacked by art@@ from netbsd sources and then later debugged
by me into the shape where it can host itself.
no bootloader yet as needs redoing from the
recent advanced i386 sources (anyone? ;)
@
text
@d1 4
a4 1
#	$OpenBSD$
d10 22
@

