head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.6
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.12.0.14
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.18
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.16
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.12
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.4
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.03.14.03.38.46;	author jsg;	state Exp;
branches;
next	1.12;
commitid	p4LJxGKbi0BU2cG6;

1.12
date	2010.09.22.02.28.37;	author jsg;	state Exp;
branches;
next	1.11;

1.11
date	2010.01.13.09.10.33;	author jsg;	state Exp;
branches;
next	1.10;

1.10
date	2009.05.15.21.47.40;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.28.18.37.13;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2008.07.07.23.41.58;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.02.03.00.00;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.20.13.34.48;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2007.10.28.10.25.09;	author martin;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.12.13.56.40;	author chl;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.31.23.35.46;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2007.01.15.23.19.05;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.05.21.48.34;	author tdeval;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: rbus_machdep.c,v 1.12 2010/09/22 02:28:37 jsg Exp $	*/
/*	$NetBSD: rbus_machdep.c,v 1.2 1999/10/15 06:43:06 haya Exp $	*/

/*
 * Copyright (c) 1999
 *     HAYAKAWA Koichi.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/extent.h>

#include <uvm/uvm_extern.h>

#include <machine/bus.h>
#include <dev/cardbus/rbus.h>

#include <dev/pci/pcivar.h>

#ifndef RBUS_MEM_START
/* Avoid the ISA hole and everything below it. */
#define RBUS_MEM_START	0x00100000
#endif

#ifndef RBUS_IO_START
/* Try to avoid onboard legacy devices; just a guess. */
#define RBUS_IO_START	0xa000
#endif

struct rbustag rbus_null;

rbus_tag_t
rbus_pccbb_parent_mem(struct device *self, struct pci_attach_args *pa)
{
	struct extent *ex = pa->pa_memex;
	bus_addr_t start;
	bus_size_t size;

	if (ex == NULL)
		return &rbus_null;

	start = RBUS_MEM_START;
	size = ex->ex_end - start;

	return (rbus_new_root_share(pa->pa_memt, ex, start, size));
}

rbus_tag_t
rbus_pccbb_parent_io(struct device *self, struct pci_attach_args *pa)
{
	struct extent *ex = pa->pa_ioex;
	bus_addr_t start;
	bus_size_t size;

	if (ex == NULL)
		return &rbus_null;

	start = ex->ex_start;
	if (ex == pciio_ex) {
		/*
		 * We're on the root bus, or behind a subtractive
		 * decode PCI-PCI bridge.  To avoid conflicts with
		 * onboard legacy devices, we only make a subregion
		 * available.
		 */
		start = max(start, RBUS_IO_START);
	}
	size = ex->ex_end - start;

	return (rbus_new_root_share(pa->pa_iot, ex, start, size));
}

void
pccbb_attach_hook(struct device *parent, struct device *self,
    struct pci_attach_args *pa)
{
}
@


1.12
log
@remove unused offset argument to rbus functions
ok krw@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus_machdep.c,v 1.11 2010/01/13 09:10:33 jsg Exp $	*/
a30 1
#include <sys/device.h>
@


1.11
log
@As per NetBSD move HAYAKAWA Koichi's licenses to two clause.
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus_machdep.c,v 1.10 2009/05/15 21:47:40 kettenis Exp $	*/
d66 1
a66 1
	return (rbus_new_root_share(pa->pa_memt, ex, start, size, 0));
d91 1
a91 1
	return (rbus_new_root_share(pa->pa_iot, ex, start, size, 0));
@


1.10
log
@Always subregion the main PCI I/O extents.  This will handle things properly
when we pass the main PCI I/O extents to the secondary bus of subtractive
decode brigdes.
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus_machdep.c,v 1.9 2009/04/28 18:37:13 kettenis Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by HAYAKAWA Koichi.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.9
log
@Simplify rbus_machdep.c, and make it work more reliable behind PCI-PCI bridges
by using the pci resource accounting extents.
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus_machdep.c,v 1.8 2008/07/07 23:41:58 brad Exp $	*/
d85 1
a85 1
	if (pa->pa_bridgetag == NULL) {
d87 4
a90 3
		 * If we're not behind a PCI-PCI bridge, we must be on
		 * the root bus.  To avoid conflicts with onboard
		 * legacy devices, we only make a subregion available.
@


1.8
log
@Comment correction, actually -> actual

ok henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus_machdep.c,v 1.7 2008/07/02 03:00:00 fgsch Exp $	*/
d36 1
a40 2
#include <sys/device.h>

d46 5
d52 1
a54 51
#ifndef RBUS_IO_SIZE
#define RBUS_IO_SIZE	0x1000
#endif

#ifndef RBUS_MIN_START
#define RBUS_MIN_START	0x40000000	/* 1 GB */
#endif

/*
 * Dynamically set the start address for rbus.  This must be called
 * before rbus is initialized.  The start address should be determined
 * by the amount of installed memory.  Generally 1 GB has been found
 * to be a good value, but it fails on some Thinkpads (e.g. 2645-4AU),
 * for which 0.5 GB is a good value.  It also fails on (at least)
 * Thinkpads with 2GB of RAM, for which 2 GB is a good value.
 *
 * Thus, a general strategy of setting rbus_min_start to the amount of
 * memory seems in order.  However, the actual amount of memory is
 * generally slightly more than the amount found, e.g. 1014MB vs 1024,
 * or 2046 vs 2048.
 */
bus_addr_t
rbus_min_start_hint(void)
{
	bus_addr_t rbus_min_start = RBUS_MIN_START;
	size_t ram = ptoa(physmem);

	if (ram <= 192 * 1024 * 1024UL) {
		/*
		 * <= 192 MB, so try 0.5 GB.  This will work on
		 * Thinkpad 600E (2645-4AU), which fails at 1 GB, and
		 * on some other older machines that may have trouble
		 * with addresses needing more than 20 bits.
		 */
		rbus_min_start = 512 * 1024 * 1024UL;
	}

	if (ram >= 1024 * 1024 * 1024UL) {
		/*
		 * > 1 GB, so try 2 GB.
		 */
		rbus_min_start =  2 * 1024 * 1024 * 1024UL;
	}

	/* Not tested in > 2 GB case. */
	if (ram > 2 * 1024 * 1024 * 1024UL) {
		/*
		 * > 2 GB, so try 3 GB.
		 */
		rbus_min_start =  3 * 1024 * 1024 * 1024UL;
	}
d56 1
a56 2
	return (rbus_min_start);
}
a57 4
/*
 * This function makes an rbus tag for memory space.  This rbus tag
 * shares the all memory region of ex_iomem.
 */
d61 2
a62 1
	bus_addr_t start, rbus_min_start;
a63 2
	extern struct extent *iomem_ex;
	struct extent *ex = iomem_ex;
d65 2
a66 13
	start = ex->ex_start;

	/* XXX: unfortunately, iomem_ex cannot be used for the
	 * dynamic bus_space allocation.  There are some
	 * hidden memory (or some obstacles which do not
	 * recognised by the kernel) in the region governed by
	 * iomem_ex.  So I decide to use only very high
	 * address region.
	 */

	rbus_min_start = rbus_min_start_hint();
	if (start < rbus_min_start)
		start = rbus_min_start;
d68 1
d77 1
a79 2
	extern struct extent *ioport_ex;
	struct extent *ex = ioport_ex;
d81 13
a93 2
	size = RBUS_IO_SIZE;
	start = RBUS_IO_START;
d102 1
a102 1
}                 
@


1.7
log
@* Dynamically set the rbus start address. from netbsd.
* For amd64, remove pcibios traces.
* make RBUS_IO_START, RBUS_IO_SIZE, RBUS_MIN_START and RBUS_MEM_SIZE
  (on i386) configurable via kernel options.
* Remove unneeded headers.
* Some cleanups.

originally reported in pr/5829 and tested by viq <viq at viq dot ath dot cx>.
fixes ian@@ laptop too.
kettenis@@ and miod@@ agrees that although not perfect, this is the right
direction.
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus_machdep.c,v 1.6 2007/12/20 13:34:48 kettenis Exp $	*/
d67 1
a67 1
 * memory seems in order.  However, the actually amount of memory is
@


1.6
log
@Add an empty pccbb_attach_hook.
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus_machdep.c,v 1.5 2007/10/28 10:25:09 martin Exp $ */
a33 2
/*#include "pcibios.h"*/

a39 2
#include <sys/sysctl.h>

d45 1
a45 2
#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>
d47 6
a52 1
#include <dev/pci/pcivar.h>
d54 3
d58 7
a64 2
/**********************************************************************
 * rbus_tag_t rbus_fakeparent_mem(struct pci_attach_args *pa)
d66 27
a92 5
 *   This function makes an rbus tag for memory space.  This rbus tag
 *   shares the all memory region of ex_iomem.
 **********************************************************************/
#define RBUS_MEM_START	0x40000000
#define RBUS_MEM_SIZE	0x00100000
d94 15
d112 1
a112 1
	bus_addr_t start, min_start;
d114 2
a115 1
	struct extent *ex;
d117 1
a117 21
	size = RBUS_MEM_SIZE;
	start = min_start = max(RBUS_MEM_START, ptoa(physmem));
#if NPCIBIOS > 0
	if ((ex = pciaddr_search(PCIADDR_SEARCH_MEM, &start, size)) == NULL)
#endif
	{
		extern struct extent *iomem_ex;
		ex = iomem_ex;
		start = ex->ex_start;

		/* XXX: unfortunately, iomem_ex cannot be used for the
		 * dynamic bus_space allocation.  There are some
		 * hidden memory (or some obstacles which do not
		 * recognised by the kernel) in the region governed by
		 * iomem_ex.  So I decide to use only very high
		 * address region.
		 *
		 * if defined PCIBIOS_ADDR_FIXUP, PCI device using
		 * area which is not recognised by the kernel are
		 * already reserved.
		 */
d119 11
a129 3
		if (start < min_start) {
			start = min_start;
		}
d131 1
a131 2
		size = ex->ex_end - start;
	}
d133 1
a133 1
	return rbus_new_root_share(pa->pa_memt, ex, start, size, 0);
a135 7

/**********************************************************************
 * rbus_tag_t rbus_pccbb_parent_io(struct pci_attach_args *pa)
 **********************************************************************/
#define RBUS_IO_START	0xa000
#define RBUS_IO_SIZE	0x1000

a138 1
	struct extent *ex;
d141 2
d144 1
a144 1
	size =  RBUS_IO_SIZE;
a145 7
#if NPCIBIOS > 0
	if ((ex = pciaddr_search(PCIADDR_SEARCH_IO, &start, size)) == NULL)
#endif
	{
		extern struct extent *ioport_ex;
		ex = ioport_ex;
	}
d147 1
a147 1
	return rbus_new_root_share(pa->pa_iot, ex, start, size, 0);
d154 1
a154 1
}
@


1.5
log
@get rid of btoc/ctob in favor of atop/ptoa
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus_machdep.c,v 1.4 2007/09/12 13:56:40 chl Exp $ */
d128 6
@


1.4
log
@s/atoin/ation/ typos

ok ray@@ cnst@@ moritz@@ sobrado@@ millert@@ mbalmer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus_machdep.c,v 1.3 2007/05/31 23:35:46 tedu Exp $ */
d72 1
a72 1
	start = min_start = max(RBUS_MEM_START, ctob(physmem));
@


1.3
log
@intel pchb rnd support, from i386
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus_machdep.c,v 1.2 2007/01/15 23:19:05 jsg Exp $ */
d82 1
a82 1
		 * dynamic bus_space allocatoin.  There are some
@


1.2
log
@ansi/deregister
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus_machdep.c,v 1.1 2005/10/05 21:48:34 tdeval Exp $ */
a52 1
#include <arch/amd64/pci/pchbvar.h>
@


1.1
log
@Add CardBus/PCMCIA support to AMD64.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rbus_machdep.c,v 1.17 2005/04/09 00:41:27 reyk Exp $ */
d66 1
a66 3
rbus_pccbb_parent_mem(self, pa)
     struct device *self;
     struct pci_attach_args *pa;
d112 1
a112 3
rbus_pccbb_parent_io(self, pa)
     struct device *self;
     struct pci_attach_args *pa;
@

