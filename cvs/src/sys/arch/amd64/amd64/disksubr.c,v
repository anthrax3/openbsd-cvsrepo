head	1.78;
access;
symbols
	OPENBSD_6_0:1.77.0.4
	OPENBSD_6_0_BASE:1.77
	OPENBSD_5_9:1.77.0.2
	OPENBSD_5_9_BASE:1.77
	OPENBSD_5_8:1.72.0.4
	OPENBSD_5_8_BASE:1.72
	OPENBSD_5_7:1.68.0.2
	OPENBSD_5_7_BASE:1.68
	OPENBSD_5_6:1.67.0.4
	OPENBSD_5_6_BASE:1.67
	OPENBSD_5_5:1.65.0.4
	OPENBSD_5_5_BASE:1.65
	OPENBSD_5_4:1.64.0.10
	OPENBSD_5_4_BASE:1.64
	OPENBSD_5_3:1.64.0.8
	OPENBSD_5_3_BASE:1.64
	OPENBSD_5_2:1.64.0.6
	OPENBSD_5_2_BASE:1.64
	OPENBSD_5_1_BASE:1.64
	OPENBSD_5_1:1.64.0.4
	OPENBSD_5_0:1.64.0.2
	OPENBSD_5_0_BASE:1.64
	OPENBSD_4_9:1.58.0.2
	OPENBSD_4_9_BASE:1.58
	OPENBSD_4_8:1.57.0.4
	OPENBSD_4_8_BASE:1.57
	OPENBSD_4_7:1.57.0.2
	OPENBSD_4_7_BASE:1.57
	OPENBSD_4_6:1.56.0.8
	OPENBSD_4_6_BASE:1.56
	OPENBSD_4_5:1.56.0.4
	OPENBSD_4_5_BASE:1.56
	OPENBSD_4_4:1.56.0.2
	OPENBSD_4_4_BASE:1.56
	OPENBSD_4_3:1.53.0.4
	OPENBSD_4_3_BASE:1.53
	OPENBSD_4_2:1.53.0.2
	OPENBSD_4_2_BASE:1.53
	OPENBSD_4_1:1.30.0.2
	OPENBSD_4_1_BASE:1.30
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.78
date	2017.02.28.10.49.37;	author natano;	state Exp;
branches;
next	1.77;
commitid	9645cvu5lMcc7gZM;

1.77
date	2015.09.29.20.24.25;	author krw;	state Exp;
branches;
next	1.76;
commitid	eB7h5lgAEiQvP4gg;

1.76
date	2015.09.27.18.03.18;	author krw;	state Exp;
branches;
next	1.75;
commitid	M2GWQ3zsQ4HdRaIf;

1.75
date	2015.09.10.14.28.17;	author krw;	state Exp;
branches;
next	1.74;
commitid	uaY2IS0JsuWLMJ5D;

1.74
date	2015.09.01.16.47.24;	author krw;	state Exp;
branches;
next	1.73;
commitid	kodBeKdedwVKnIne;

1.73
date	2015.08.26.13.56.04;	author krw;	state Exp;
branches;
next	1.72;
commitid	nHsnIOWwjfNf2UPo;

1.72
date	2015.07.23.18.02.58;	author krw;	state Exp;
branches;
next	1.71;
commitid	q5wcyDnmemhtL3T8;

1.71
date	2015.05.09.17.11.26;	author krw;	state Exp;
branches;
next	1.70;
commitid	XgIfRGTOOf864WwV;

1.70
date	2015.04.15.14.06.03;	author naddy;	state Exp;
branches;
next	1.69;
commitid	v269xPZkM9tsR2dw;

1.69
date	2015.03.14.03.38.46;	author jsg;	state Exp;
branches;
next	1.68;
commitid	p4LJxGKbi0BU2cG6;

1.68
date	2014.08.30.10.41.10;	author miod;	state Exp;
branches;
next	1.67;
commitid	Ymik9BkktuNsHeMq;

1.67
date	2014.07.13.15.32.28;	author miod;	state Exp;
branches;
next	1.66;
commitid	PkUmoT9mKpliN2oG;

1.66
date	2014.06.15.11.43.24;	author sf;	state Exp;
branches;
next	1.65;
commitid	Y0AWLKcfCeF28jP4;

1.65
date	2013.10.19.09.32.12;	author krw;	state Exp;
branches;
next	1.64;

1.64
date	2011.07.08.00.08.00;	author krw;	state Exp;
branches;
next	1.63;

1.63
date	2011.07.06.00.48.55;	author krw;	state Exp;
branches;
next	1.62;

1.62
date	2011.07.05.17.38.54;	author krw;	state Exp;
branches;
next	1.61;

1.61
date	2011.04.16.03.21.15;	author krw;	state Exp;
branches;
next	1.60;

1.60
date	2011.04.15.14.57.28;	author krw;	state Exp;
branches;
next	1.59;

1.59
date	2011.04.06.13.46.50;	author miod;	state Exp;
branches;
next	1.58;

1.58
date	2011.02.26.13.07.48;	author krw;	state Exp;
branches;
next	1.57;

1.57
date	2009.08.13.15.23.10;	author deraadt;	state Exp;
branches;
next	1.56;

1.56
date	2008.06.12.06.58.33;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2008.06.11.12.35.40;	author deraadt;	state Exp;
branches;
next	1.54;

1.54
date	2008.06.10.20.50.22;	author beck;	state Exp;
branches;
next	1.53;

1.53
date	2007.06.20.18.15.45;	author deraadt;	state Exp;
branches;
next	1.52;

1.52
date	2007.06.18.07.09.25;	author deraadt;	state Exp;
branches;
next	1.51;

1.51
date	2007.06.18.05.25.06;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2007.06.17.00.27.28;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2007.06.14.03.37.23;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	2007.06.14.03.35.29;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2007.06.14.03.29.34;	author deraadt;	state Exp;
branches;
next	1.46;

1.46
date	2007.06.12.20.57.42;	author deraadt;	state Exp;
branches;
next	1.45;

1.45
date	2007.06.09.23.06.46;	author krw;	state Exp;
branches;
next	1.44;

1.44
date	2007.06.09.18.05.47;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2007.06.09.04.08.39;	author deraadt;	state Exp;
branches;
next	1.42;

1.42
date	2007.06.09.02.03.47;	author deraadt;	state Exp;
branches;
next	1.41;

1.41
date	2007.06.08.05.34.27;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2007.06.07.00.28.16;	author krw;	state Exp;
branches;
next	1.39;

1.39
date	2007.06.06.17.15.11;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2007.06.06.16.42.03;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2007.06.05.00.38.13;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2007.06.02.02.35.26;	author krw;	state Exp;
branches;
next	1.35;

1.35
date	2007.05.31.19.57.43;	author krw;	state Exp;
branches;
next	1.34;

1.34
date	2007.05.31.16.05.50;	author krw;	state Exp;
branches;
next	1.33;

1.33
date	2007.05.29.06.28.14;	author otto;	state Exp;
branches;
next	1.32;

1.32
date	2007.05.29.05.08.19;	author krw;	state Exp;
branches;
next	1.31;

1.31
date	2007.04.26.22.42.11;	author krw;	state Exp;
branches;
next	1.30;

1.30
date	2007.02.18.13.49.22;	author krw;	state Exp;
branches;
next	1.29;

1.29
date	2007.02.03.18.22.33;	author krw;	state Exp;
branches;
next	1.28;

1.28
date	2007.01.15.23.19.05;	author jsg;	state Exp;
branches;
next	1.27;

1.27
date	2006.10.29.14.12.21;	author krw;	state Exp;
branches;
next	1.26;

1.26
date	2006.10.29.00.02.35;	author krw;	state Exp;
branches;
next	1.25;

1.25
date	2006.10.28.23.26.05;	author krw;	state Exp;
branches;
next	1.24;

1.24
date	2006.10.21.20.10.39;	author krw;	state Exp;
branches;
next	1.23;

1.23
date	2006.10.21.16.01.53;	author krw;	state Exp;
branches;
next	1.22;

1.22
date	2006.10.21.14.18.36;	author krw;	state Exp;
branches;
next	1.21;

1.21
date	2006.10.20.23.47.42;	author krw;	state Exp;
branches;
next	1.20;

1.20
date	2006.10.18.20.09.38;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2006.10.17.23.42.37;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2006.10.12.00.25.19;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2006.10.10.03.17.45;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2006.10.04.03.23.01;	author krw;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.04.00.52.55;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2006.09.16.14.56.11;	author krw;	state Exp;
branches;
next	1.13;

1.13
date	2006.08.24.00.22.22;	author krw;	state Exp;
branches;
next	1.12;

1.12
date	2006.08.20.03.14.21;	author krw;	state Exp;
branches;
next	1.11;

1.11
date	2006.08.17.10.34.14;	author krw;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.11.21.32.39;	author krw;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.01.16.50.32;	author krw;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.15.20.20.38;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.04.19.33.20;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.22.03.02.48;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.13.00.18.19;	author jsg;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.26.22.52.50;	author krw;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.30.07.52.31;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.03.17.14.16.03;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.39.38;	author mickey;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.09.24;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.78
log
@Switch geteblks()'s size argument from int to size_t. It's called with
unsigned variables as argument in most places anyway. Decrease the
chance of signedness/range mismatch issues.

ok stefan
@
text
@/*	$OpenBSD: disksubr.c,v 1.77 2015/09/29 20:24:25 krw Exp $	*/
/*	$NetBSD: disksubr.c,v 1.21 1996/05/03 19:42:03 christos Exp $	*/

/*
 * Copyright (c) 1996 Theo de Raadt
 * Copyright (c) 1982, 1986, 1988 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/buf.h>
#include <sys/disklabel.h>
#include <sys/disk.h>
#include <sys/reboot.h>
#include <sys/conf.h>

#ifdef DEBUG
#include <sys/systm.h>
#endif

#include <machine/biosvar.h>

bios_diskinfo_t *bios_getdiskinfo(dev_t dev);

/*
 * Attempt to read a disk label from a device
 * using the indicated strategy routine.
 * The label must be partly set up before this:
 * secpercyl, secsize and anything required for a block i/o read
 * operation in the driver's strategy/start routines
 * must be filled in before calling us.
 *
 * If dos partition table requested, attempt to load it and
 * find disklabel inside a DOS partition.
 *
 * We would like to check if each MBR has a valid DOSMBR_SIGNATURE, but
 * we cannot because it doesn't always exist. So.. we assume the
 * MBR is valid.
 */
int
readdisklabel(dev_t dev, void (*strat)(struct buf *),
    struct disklabel *lp, int spoofonly)
{
	bios_diskinfo_t *pdi;
	struct buf *bp = NULL;
	dev_t devno;
	int error;

	if ((error = initdisklabel(lp)))
		goto done;

	/* Look for any BIOS geometry information we should honour. */
	devno = chrtoblk(dev);
	if (devno == NODEV)
		devno = dev;
	pdi = bios_getdiskinfo(MAKEBOOTDEV(major(devno), 0, 0, DISKUNIT(devno),
	    RAW_PART));
	if (pdi != NULL && pdi->bios_heads > 0 && pdi->bios_sectors > 0) {
#ifdef DEBUG
		printf("Disk GEOM %u/%u/%u -> BIOS GEOM %u/%u/%llu\n",
		    lp->d_ntracks, lp->d_nsectors, lp->d_ncylinders,
		    pdi->bios_heads, pdi->bios_sectors,
		    DL_GETDSIZE(lp) / (pdi->bios_heads * pdi->bios_sectors));
#endif
		lp->d_ntracks = pdi->bios_heads;
		lp->d_nsectors = pdi->bios_sectors;
		lp->d_secpercyl = pdi->bios_sectors * pdi->bios_heads;
		lp->d_ncylinders = DL_GETDSIZE(lp) / lp->d_secpercyl;
	}

	/* get a buffer and initialize it */
	bp = geteblk(lp->d_secsize);
	bp->b_dev = dev;

	error = readdoslabel(bp, strat, lp, NULL, spoofonly);
	if (error == 0)
		goto done;

#if defined(CD9660)
	error = iso_disklabelspoof(dev, strat, lp);
	if (error == 0)
		goto done;
#endif
#if defined(UDF)
	error = udf_disklabelspoof(dev, strat, lp);
	if (error == 0)
		goto done;
#endif

done:
	if (bp) {
		bp->b_flags |= B_INVAL;
		brelse(bp);
	}
	disk_change = 1;
	return (error);
}

/*
 * Write disk label back to device after modification.
 */
int
writedisklabel(dev_t dev, void (*strat)(struct buf *), struct disklabel *lp)
{
	daddr_t partoff = -1;
	int error = EIO;
	int offset;
	struct disklabel *dlp;
	struct buf *bp = NULL;

	/* get a buffer and initialize it */
	bp = geteblk(lp->d_secsize);
	bp->b_dev = dev;

	if (readdoslabel(bp, strat, lp, &partoff, 1) != 0)
		goto done;

	/* Read it in, slap the new label in, and write it back out */
	error = readdisksector(bp, strat, lp, DL_BLKTOSEC(lp, partoff +
	    DOS_LABELSECTOR));
	if (error)
		goto done;
	offset = DL_BLKOFFSET(lp, partoff + DOS_LABELSECTOR);

	dlp = (struct disklabel *)(bp->b_data + offset);
	*dlp = *lp;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_WRITE | B_RAW);
	(*strat)(bp);
	error = biowait(bp);

done:
	if (bp) {
		bp->b_flags |= B_INVAL;
		brelse(bp);
	}
	disk_change = 1;
	return (error);
}
@


1.77
log
@Add missing prototype for bios_getdiskinfo() to amd64/disksubr.c.
Include systm.h inside #ifdef DEBUG in i386/disksubr.c, as
amd64/disksubr.c.

Makes amd64 and i386 disksubr.c identical once more.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.76 2015/09/27 18:03:18 krw Exp $	*/
d96 1
a96 1
	bp = geteblk((int)lp->d_secsize);
d136 1
a136 1
	bp = geteblk((int)lp->d_secsize);
@


1.76
log
@Use readdisksector() instead of manual buf initialization.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.75 2015/09/10 14:28:17 krw Exp $	*/
d46 2
@


1.75
log
@Call readgptlabel() from readdoslabel() instead of MD readdisklabel().

Call it if and only if there is an MBR on sector 0 that contains 1
and only 1 partition; that partition is an EFI partition; and it
covers the entire disk or as much of the disk as can be covered in
an MBR partition.

Be paranoid about restoring any possible tweaks to the label being
built in the case that readgptlabel() fails, and in that case return
to the readdoslabel() code.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.74 2015/09/01 16:47:24 krw Exp $	*/
d141 4
a144 2
	bp->b_blkno = DL_BLKTOSEC(lp, partoff + DOS_LABELSECTOR) *
	    DL_BLKSPERSEC(lp);
a145 6
	bp->b_bcount = lp->d_secsize;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
	(*strat)(bp);
	if ((error = biowait(bp)) != 0)
		goto done;
@


1.74
log
@Always call readdoslabel() before readgptlabel(). Doubly always call them
in the same order. Fix writedisklabel() to follow these simple rules.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.73 2015/08/26 13:56:04 krw Exp $	*/
a100 6
#if defined(GPT)
	error = readgptlabel(bp, strat, lp, NULL, spoofonly);
	if (error == 0)
		goto done;
#endif

d138 1
a138 4
#if defined(GPT)
		if (readgptlabel(bp, strat, lp, &partoff, 1) != 0)
#endif
			goto done;
@


1.73
log
@MBR must have priority over GPT.

Found, fix tested & thus ok ajacoutot@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.72 2015/07/23 18:02:58 krw Exp $	*/
d143 1
d145 1
a145 1
        if (readgptlabel(bp, strat, lp, &partoff, 1) != 0)
d147 1
a147 2
		if (readdoslabel(bp, strat, lp, &partoff, 1) != 0)
                	goto done;
@


1.72
log
@Revert attempted GPT code cleanup. Too much code, too little testing.

Requested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.71 2015/05/09 17:11:26 krw Exp $	*/
d97 4
a105 4

	error = readdoslabel(bp, strat, lp, NULL, spoofonly);
	if (error == 0)
		goto done;
@


1.71
log
@Cleanup/rejig GPT code to be more readable, support different endian
archs and different sized disk sectors. Make MBR have higher priority
than GPT. Add many paranoia checks and associated DPRINTF's to make
further development easier. Keep everything hidden behind #ifdef
GPT.

Tested and ok doug@@ mpi@@. Nothing bad seen by millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.70 2015/04/15 14:06:03 naddy Exp $	*/
d97 6
d143 5
a147 2
	if (readdoslabel(bp, strat, lp, &partoff, 1) != 0)
		goto done;
@


1.70
log
@include header required for DEBUG build; ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.69 2015/03/14 03:38:46 jsg Exp $	*/
a96 6
#if defined(GPT)
	error = readgptlabel(bp, strat, lp, NULL, spoofonly);
	if (error == 0)
		goto done;
#endif

d137 2
a138 5
#if defined(GPT)
        if (readgptlabel(bp, strat, lp, &partoff, 1) != 0)
#endif
		if (readdoslabel(bp, strat, lp, &partoff, 1) != 0)
                	goto done;
@


1.69
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.68 2014/08/30 10:41:10 miod Exp $	*/
d40 4
@


1.68
log
@Make sure we check for GPT in writedisklabel() if kernel is compiled with GPT
support, for it would risk being overwritten otherwise.

From Markus Mueller
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.67 2014/07/13 15:32:28 miod Exp $	*/
a34 1
#include <sys/systm.h>
@


1.67
log
@Initial support to read GPT partition tables in the kernel, if option GPT.
Contributed by Markus Mueller; code based upon Bitrig's GPT support, with
stricter GPT structures validation and support for alternate header places.

ok deraadt@@ jsing@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.66 2014/06/15 11:43:24 sf Exp $	*/
d140 5
a144 2
	if (readdoslabel(bp, strat, lp, &partoff, 1) != 0)
		goto done;
@


1.66
log
@Fix a few format string bugs with -DDEBUG
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.65 2013/10/19 09:32:12 krw Exp $	*/
d93 6
@


1.65
log
@Use daddr_t * instead of int * for the partoffp parameter to
readdoslabel(). Ditto all the MD variables whose addresses are passed
to readdoslabel() via partoffp.

Fix some 512-byte block vs disk sector confusion in hppa and sgi.
All the DL_GETxxxxx() defines return disk sector values. All
DL_SETxxxx() take disk sector values. These changes should be no-ops
until a drive using non-512-byte-sectors is encountered.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.64 2011/07/08 00:08:00 krw Exp $	*/
d79 1
a79 1
		printf("Disk GEOM %u/%u/%u -> BIOS GEOM %u/%u/%u\n",
@


1.64
log
@When reading dos labels use DOS_LABELSECTOR and don't use LABELOFFSET. For all these
arch's LABELSECTOR == DOS_LABELSECTOR == 1, and LABELOFFSET == 0. Thus, to quote bob,
"This is a no-op". Makes the expression used when writing label the same as the one
used in readdoslabel().
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.63 2011/07/06 00:48:55 krw Exp $	*/
d124 2
a125 1
	int error = EIO, partoff = -1;
@


1.63
log
@Oops. I did an oga. Put back important line (set b_bcount) I didn't mean to delete.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.62 2011/07/05 17:38:54 krw Exp $	*/
d137 3
a139 2
	bp->b_blkno = DL_BLKTOSEC(lp, partoff+LABELSECTOR) * DL_BLKSPERSEC(lp);
	offset = DL_BLKOFFSET(lp, partoff + LABELSECTOR) + LABELOFFSET;
@


1.62
log
@More non-512-byte sector groundwork. Don't let disklabel hint that
a ffs frag size can be less than the d_secsize of the disk.  Make
sure amd64 writedisklabel() puts the disklabel where readdoslabel()
will read it. Tweak i386/amd64 installboot/biosboot so sectors are
indeed used where sectors are claimed.

Lets me fdisk, newfs, mount and installboot onto 2048 and 4096
byte sector devices. Other filesystem utilites will still hold
surprises.

Note that actually booting from such devices will await BIOSen that
acknowledge such devices as bootable.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.61 2011/04/16 03:21:15 krw Exp $	*/
d139 1
@


1.61
log
@Use 'CLR(<buf>->b_flags, B_READ | B_WRITE | B_DONE)' regardless of
what the previous IO was. Less chance of copy and paste errors.
Suggested by miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.60 2011/04/15 14:57:28 krw Exp $	*/
d125 1
d137 2
a138 2
	bp->b_blkno = partoff + LABELSECTOR;
	bp->b_bcount = lp->d_secsize;
d145 1
a145 1
	dlp = (struct disklabel *)(bp->b_data + LABELOFFSET);
@


1.60
log
@In days of yore one could arbitrarily whack buffer flags. Those days
are past. Use CLR() and SET() to modify necessary flags while leaving
the flags used by the buffer cache in peace.

Should make bufcache code much less confused about the state of the
bufs used in reading/writing disklabels. Other such flag abuses no
doubt await a visit.

Errors in original diff found by miod@@.

ok beck@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.59 2011/04/06 13:46:50 miod Exp $	*/
d138 1
a138 1
	CLR(bp->b_flags, B_WRITE | B_DONE);
d146 1
a146 1
	CLR(bp->b_flags, B_READ | B_DONE);
@


1.59
log
@The various read*label() have stopped returning error strings for quite
some time, and return errnos instead. Fix or remove out-of-date comments
mentioning the error strings, and make their callers check the return value
against zero, not NULL.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.58 2011/02/26 13:07:48 krw Exp $	*/
d138 2
a139 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d146 2
a147 1
	bp->b_flags = B_BUSY | B_WRITE | B_RAW;
@


1.58
log
@Force the DUID cache used to generate hw.disknames to be updated
after every disklabel read or write. This keeps the DUID cache more
in sync with the physical world. De-syncing noted by drahn@@ while
zapping disklabels with dd.

ok jsing@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.57 2009/08/13 15:23:10 deraadt Exp $	*/
d53 1
a53 2
 * find disklabel inside a DOS partition. Return buffer
 * for use in signalling errors if requested.
a57 2
 *
 * Returns null on success and an error string on failure.
a58 2
bios_diskinfo_t *bios_getdiskinfo(dev_t dev);

d95 1
a95 1
	if (error == NULL)
d132 1
a132 1
	if (readdoslabel(bp, strat, lp, &partoff, 1) != NULL)
@


1.57
log
@Replace the error strings that were being passed around with much simpler
errnos.  Note that the error strings are being ignored, since we long ago
decided to not spam the console, and there is no other nice way to use the
errors (without changing the ioctls to pass it back)
The errno is now useful, since we can pass b_error from failing IO up, and
the drive can decide how to use that
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.56 2008/06/12 06:58:33 deraadt Exp $	*/
d119 1
d159 1
@


1.56
log
@Bring biomem diff back into the tree after the nfs_bio.c fix went in.
ok thib beck art
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.54 2008/06/10 20:50:22 beck Exp $	*/
d64 1
a64 1
char *
d71 1
a71 1
	char *msg;
d73 1
a73 1
	if ((msg = initdisklabel(lp)))
d99 2
a100 2
	msg = readdoslabel(bp, strat, lp, NULL, spoofonly);
	if (msg == NULL)
d104 2
a105 2
	if (iso_disklabelspoof(dev, strat, lp) == 0) {
		msg = NULL;
a106 1
	}
d109 2
a110 2
	if (udf_disklabelspoof(dev, strat, lp) == 0) {
		msg = NULL;
a111 1
	}
d119 1
a119 1
	return (msg);
@


1.55
log
@back out biomem diff since it is not right yet.  Doing very large
file copies to nfsv2 causes the system to eventually peg the console.
On the console ^T indicates that the load is increasing rapidly, ddb
indicates many calls to getbuf, there is some very slow nfs traffic
making none (or extremely slow) progress.  Eventually some machines
seize up entirely.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.53 2007/06/20 18:15:45 deraadt Exp $	*/
d144 1
a144 1
	bp->b_flags = B_BUSY | B_READ;
d151 1
a151 1
	bp->b_flags = B_BUSY | B_WRITE;
@


1.54
log
@Fix buffer cache pending read statistics by ensuring we can identify
biowait() reads that do *not* come from the buffer cache - we use the
B_RAW flag to identify these at art's suggestion - since it makes sense
and the flag was not being used. this just flags all these buffers with
B_RAW - biodone already ignores returned buffers marked B_RAW.
ok art@@
@
text
@d144 1
a144 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d151 1
a151 1
	bp->b_flags = B_BUSY | B_WRITE | B_RAW;
@


1.53
log
@b_cylinder does not need to be set on the callpath down into drivers.
cpu_disklabel can go away, since nothing anymore needs to use it; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.52 2007/06/18 07:09:25 deraadt Exp $	*/
d144 1
a144 1
	bp->b_flags = B_BUSY | B_READ;
d151 1
a151 1
	bp->b_flags = B_BUSY | B_WRITE;
@


1.52
log
@simplify error return case from writedisklabel()
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.51 2007/06/18 05:25:06 deraadt Exp $	*/
d66 1
a66 1
    struct disklabel *lp, struct cpu_disklabel *osdep, int spoofonly)
d99 1
a99 1
	msg = readdoslabel(bp, strat, lp, osdep, NULL, NULL, spoofonly);
d128 1
a128 2
writedisklabel(dev_t dev, void (*strat)(struct buf *),
    struct disklabel *lp, struct cpu_disklabel *osdep)
d130 1
a130 1
	int error = EIO, partoff = -1, cyl = 0;
d138 1
a138 1
	if (readdoslabel(bp, strat, lp, osdep, &partoff, &cyl, 1) != NULL)
a142 1
	bp->b_cylinder = cyl;
@


1.51
log
@this XXX has no place here anymore.  extended partition label writing
might even work now (ie. if it works, it is because finding the label
location is now MI code shared for the read & write paths)
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.50 2007/06/17 00:27:28 deraadt Exp $	*/
d131 1
a131 1
	int error, partoff = -1, cyl = 0;
d139 1
a139 2
	if (readdoslabel(bp, strat, lp, osdep, &partoff, &cyl, 1) != NULL) {
		error = EIO;
a140 1
	}
@


1.50
log
@significantly simplified disklabel infrastructure.  MBR handling becomes MI
to support hotplug media on most architectures.  disklabel setup and
verification done using new helper functions.  Disklabels must *always*
have a correct checksum now.  Same code paths are used to learn on-disk
location disklabels, to avoid new errors sneaking in.  Tested on almost all
cases, testing help from todd, kettenis, krw, otto, dlg, robert, gwk, drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.49 2007/06/14 03:37:23 deraadt Exp $	*/
a125 1
 * XXX cannot handle OpenBSD partitions in extended partitions!
@


1.49
log
@excessive blank lines making the versions different
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.48 2007/06/14 03:35:29 deraadt Exp $	*/
a31 2
 *
 *	@@(#)ufs_disksubr.c	7.16 (Berkeley) 5/4/91
a36 1
#include <sys/device.h>
a37 1
#include <sys/syslog.h>
a67 3
	struct dos_partition dp[NDOSPART], *dp2;
	struct partition *pp;
	struct disklabel *dlp;
a68 2
	unsigned long extoff = 0;
	unsigned int fattest;
a69 1
	daddr64_t part_blkno = DOSBBSECTOR;
d71 3
a73 11
	char *msg = NULL;
	int dospartoff, cyl, i, ourpart = -1;
	int wander = 1, n = 0, loop = 0;

	/* minimal requirements for archetypal disk label */
	if (lp->d_secsize < DEV_BSIZE)
		lp->d_secsize = DEV_BSIZE;
	if (DL_GETDSIZE(lp) == 0)
		DL_SETDSIZE(lp, MAXDISKSIZE);
	if (lp->d_secpercyl == 0) {
		msg = "invalid geometry";
a74 10
	}
	lp->d_npartitions = RAW_PART + 1;
	for (i = 0; i < RAW_PART; i++) {
		DL_SETPSIZE(&lp->d_partitions[i], 0);
		DL_SETPOFFSET(&lp->d_partitions[i], 0);
	}
	if (DL_GETPSIZE(&lp->d_partitions[RAW_PART]) == 0)
		DL_SETPSIZE(&lp->d_partitions[RAW_PART], DL_GETDSIZE(lp));
	DL_SETPOFFSET(&lp->d_partitions[RAW_PART], 0);
	lp->d_version = 1;
d99 2
a100 148
	/* do dos partitions in the process of getting disklabel? */
	dospartoff = 0;
	cyl = LABELSECTOR / lp->d_secpercyl;

	/*
	 * Read dos partition table, follow extended partitions.
	 * Map the partitions to disklabel entries i-p
	 */
	while (wander && n < 8 && loop < 8) {
		loop++;
		wander = 0;
		if (part_blkno < extoff)
			part_blkno = extoff;

		/* read boot record */
		bp->b_blkno = part_blkno;
		bp->b_bcount = lp->d_secsize;
		bp->b_flags = B_BUSY | B_READ;
		bp->b_cylinder = part_blkno / lp->d_secpercyl;
		(*strat)(bp);

		/* if successful, wander through dos partition table */
		if (biowait(bp)) {
			msg = "dos partition I/O error";
			goto done;
		}
		bcopy(bp->b_data + DOSPARTOFF, dp, sizeof(dp));

		if (ourpart == -1 && part_blkno == DOSBBSECTOR) {
			/* Search for our MBR partition */
			for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
			    i++, dp2++)
				if (letoh32(dp2->dp_size) &&
				    dp2->dp_typ == DOSPTYP_OPENBSD)
					ourpart = i;
			if (ourpart == -1)
				goto donot;
			/*
			 * This is our MBR partition. need sector address
			 * for SCSI/IDE, cylinder for ESDI/ST506/RLL
			 */
			dp2 = &dp[ourpart];
			dospartoff = letoh32(dp2->dp_start) + part_blkno;
			cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);

			/* XXX build a temporary disklabel */
			DL_SETPSIZE(&lp->d_partitions[0], letoh32(dp2->dp_size));
			DL_SETPOFFSET(&lp->d_partitions[0],
			    letoh32(dp2->dp_start) + part_blkno);
			if (lp->d_ntracks == 0)
				lp->d_ntracks = dp2->dp_ehd + 1;
			if (lp->d_nsectors == 0)
				lp->d_nsectors = DPSECT(dp2->dp_esect);
			if (lp->d_secpercyl == 0)
				lp->d_secpercyl = lp->d_ntracks *
				    lp->d_nsectors;
		}
donot:
		/*
		 * In case the disklabel read below fails, we want to
		 * provide a fake label in i-p.
		 */
		for (dp2=dp, i=0; i < NDOSPART && n < 8; i++, dp2++) {
			pp = &lp->d_partitions[8+n];

			if (dp2->dp_typ == DOSPTYP_OPENBSD)
				continue;
			if (letoh32(dp2->dp_size) > DL_GETDSIZE(lp))
				continue;
			if (letoh32(dp2->dp_start) > DL_GETDSIZE(lp))
				continue;
			if (letoh32(dp2->dp_size) == 0)
				continue;
			if (letoh32(dp2->dp_start))
				DL_SETPOFFSET(pp,
				    letoh32(dp2->dp_start) + part_blkno);

			DL_SETPSIZE(pp, letoh32(dp2->dp_size));

			switch (dp2->dp_typ) {
			case DOSPTYP_UNUSED:
				pp->p_fstype = FS_UNUSED;
				n++;
				break;

			case DOSPTYP_LINUX:
				pp->p_fstype = FS_EXT2FS;
				n++;
				break;

			case DOSPTYP_FAT12:
			case DOSPTYP_FAT16S:
			case DOSPTYP_FAT16B:
			case DOSPTYP_FAT16L:
			case DOSPTYP_FAT32:
			case DOSPTYP_FAT32L:
				pp->p_fstype = FS_MSDOS;
				n++;
				break;
			case DOSPTYP_EXTEND:
			case DOSPTYP_EXTENDL:
				part_blkno = letoh32(dp2->dp_start) + extoff;
				if (!extoff) {
					extoff = letoh32(dp2->dp_start);
					part_blkno = 0;
				}
				wander = 1;
				break;
			default:
				pp->p_fstype = FS_OTHER;
				n++;
				break;
			}
		}
	}
	lp->d_bbsize = 8192;
	lp->d_sbsize = 64*1024;		/* XXX ? */
	lp->d_npartitions = MAXPARTITIONS;

	if (n == 0 && part_blkno == DOSBBSECTOR) {
		/* Check for a short jump instruction. */
		fattest = ((bp->b_data[0] << 8) & 0xff00) | (bp->b_data[2] &
		    0xff);
		if (fattest != 0xeb90 && fattest != 0xe900)
			goto notfat;

		/* Check for a valid bytes per sector value. */
		fattest = ((bp->b_data[12] << 8) & 0xff00) | (bp->b_data[11] &
		    0xff);
		if (fattest < 512 || fattest > 4096 || (fattest % 512 != 0))
			goto notfat;

		/* Check the end of sector marker. */
		fattest = ((bp->b_data[510] << 8) & 0xff00) | (bp->b_data[511] &
		    0xff);
		if (fattest != 0x55aa)
			goto notfat;

		/* Looks like a FAT filesystem. Spoof 'i'. */
		DL_SETPSIZE(&lp->d_partitions['i' - 'a'],
		    DL_GETPSIZE(&lp->d_partitions[RAW_PART]));
		DL_SETPOFFSET(&lp->d_partitions['i' - 'a'], 0);
		lp->d_partitions['i' - 'a'].p_fstype = FS_MSDOS;
	}
notfat:

	/* don't read the on-disk label if we are in spoofed-only mode */
	if (spoofonly)
d103 3
a105 11
	/* next, dig out disk label */
	bp->b_blkno = dospartoff + LABELSECTOR;
	bp->b_cylinder = cyl;
	bp->b_bcount = lp->d_secsize;
	bp->b_flags = B_BUSY | B_READ;
	(*strat)(bp);

	/* if successful, locate disk label within block and validate */
	if (biowait(bp)) {
		/* XXX we return the faked label built so far */
		msg = "disk label I/O error";
a107 20
	for (dlp = (struct disklabel *)bp->b_data;
	    dlp <= (struct disklabel *)(bp->b_data + lp->d_secsize - sizeof(*dlp));
	    dlp = (struct disklabel *)((char *)dlp + sizeof(long))) {
		if (dlp->d_magic != DISKMAGIC || dlp->d_magic2 != DISKMAGIC) {
			if (msg == NULL)
				msg = "no disk label";
		} else if (dlp->d_npartitions > MAXPARTITIONS ||
			   dkcksum(dlp) != 0)
			msg = "disk label corrupted";
		else {
			DL_SETDSIZE(dlp, DL_GETDSIZE(lp));
			*lp = *dlp;
			msg = NULL;
			break;
		}
	}

#if defined(CD9660)
	if (msg && iso_disklabelspoof(dev, strat, lp) == 0)
		msg = NULL;
d110 1
a110 1
	if (msg && udf_disklabelspoof(dev, strat, lp) == 0)
d112 2
a120 1
	disklabeltokernlabel(lp);
d132 1
a132 1
	struct dos_partition dp[NDOSPART], *dp2;
a134 2
	int error, dospartoff, cyl, i;
	int ourpart = -1;
d140 2
a141 12
	/* do dos partitions in the process of getting disklabel? */
	dospartoff = 0;
	cyl = LABELSECTOR / lp->d_secpercyl;

	/* read master boot record */
	bp->b_blkno = DOSBBSECTOR;
	bp->b_bcount = lp->d_secsize;
	bp->b_flags = B_BUSY | B_READ;
	bp->b_cylinder = DOSBBSECTOR / lp->d_secpercyl;
	(*strat)(bp);

	if ((error = biowait(bp)) != 0)
a142 17

	/* XXX how do we check veracity/bounds of this? */
	bcopy(bp->b_data + DOSPARTOFF, dp, sizeof(dp));

	for (dp2=dp, i=0; i < NDOSPART && ourpart == -1; i++, dp2++)
		if (letoh32(dp2->dp_size) && dp2->dp_typ == DOSPTYP_OPENBSD)
			ourpart = i;

	if (ourpart != -1) {
		dp2 = &dp[ourpart];

		/*
		 * need sector address for SCSI/IDE,
		 * cylinder for ESDI/ST506/RLL
		 */
		dospartoff = letoh32(dp2->dp_start);
		cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);
d145 2
a146 2
	/* next, dig out disk label */
	bp->b_blkno = dospartoff + LABELSECTOR;
a150 2

	/* if successful, locate disk label within block and validate */
a152 12
	for (dlp = (struct disklabel *)bp->b_data;
	    dlp <= (struct disklabel *)(bp->b_data + lp->d_secsize - sizeof(*dlp));
	    dlp = (struct disklabel *)((char *)dlp + sizeof(long))) {
		if (dlp->d_magic == DISKMAGIC && dlp->d_magic2 == DISKMAGIC &&
		    dkcksum(dlp) == 0) {
			*dlp = *lp;
			bp->b_flags = B_BUSY | B_WRITE;
			(*strat)(bp);
			error = biowait(bp);
			goto done;
		}
	}
d154 2
a155 2
	/* Write it in the regular place. */
	*(struct disklabel *)bp->b_data = *lp;
@


1.48
log
@set the prototype disklabel to version 1
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.47 2007/06/14 03:29:34 deraadt Exp $	*/
a323 2


@


1.47
log
@do not depend on previous loop variable, use a constant instead
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.46 2007/06/12 20:57:42 deraadt Exp $	*/
d102 1
@


1.46
log
@all disksubr.c did their b_flags manipulation differently (and wrong).
correct and unify; ok thib miod
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.45 2007/06/09 23:06:46 krw Exp $	*/
d99 3
a101 3
	if (DL_GETPSIZE(&lp->d_partitions[i]) == 0)
		DL_SETPSIZE(&lp->d_partitions[i], DL_GETDSIZE(lp));
	DL_SETPOFFSET(&lp->d_partitions[i], 0);
@


1.45
log
@The differences in the last non-homogeneous bounds_check_with_label()
routines (alpha, vax) prove to be not worth keeping. Move
bounds_check_with_label() into the MI world. Eliminate unreliable and
almost certainly useless checks for overwriting a disklabel.

After discussion with deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.44 2007/06/09 18:05:47 deraadt Exp $	*/
d336 1
a336 1
	struct buf *bp;
d406 4
a409 2
	bp->b_flags |= B_INVAL;
	brelse(bp);
@


1.44
log
@unify DOSPTYP_FAT* code (some architectures missed a filesystem type or two)
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.43 2007/06/09 04:08:39 deraadt Exp $	*/
a408 56
}

/*
 * Determine the size of the transfer, and make sure it is
 * within the boundaries of the partition. Adjust transfer
 * if needed, and signal errors or early completion.
 */
int
bounds_check_with_label(struct buf *bp, struct disklabel *lp,
    struct cpu_disklabel *osdep, int wlabel)
{
#define blockpersec(count, lp) ((count) * (((lp)->d_secsize) / DEV_BSIZE))
	struct partition *p = lp->d_partitions + DISKPART(bp->b_dev);
	int labelsector = blockpersec(DL_GETPOFFSET(&lp->d_partitions[RAW_PART]), lp) +
	    LABELSECTOR;
	int sz = howmany(bp->b_bcount, DEV_BSIZE);

	/* avoid division by zero */
	if (lp->d_secpercyl == 0) {
		bp->b_error = EINVAL;
		goto bad;
	}

	/* beyond partition? */
	if (bp->b_blkno + sz > blockpersec(DL_GETPSIZE(p), lp)) {
		sz = blockpersec(DL_GETPSIZE(p), lp) - bp->b_blkno;
		if (sz == 0) {
			/* If exactly at end of disk, return EOF. */
			bp->b_resid = bp->b_bcount;
			return (-1);
		}
		if (sz < 0) {
			/* If past end of disk, return EINVAL. */
			bp->b_error = EINVAL;
			goto bad;
		}
		/* Otherwise, truncate request. */
		bp->b_bcount = sz << DEV_BSHIFT;
	}

	/* Overwriting disk label? */
	if (bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp) <= labelsector &&
	    bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp) + sz > labelsector &&
	    (bp->b_flags & B_READ) == 0 && !wlabel) {
		bp->b_error = EROFS;
		goto bad;
	}

	/* calculate cylinder for disksort to order transfers with */
	bp->b_cylinder = (bp->b_blkno + blockpersec(DL_GETPOFFSET(p), lp)) /
	    lp->d_secpercyl;
	return (1);

bad:
	bp->b_flags |= B_ERROR;
	return (-1);
@


1.43
log
@by hand i carefully found that all the differences in setdisklabel()
implimentations were simply either missing code, or spacing and such.
setdisklabel() can become MI now.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.42 2007/06/09 02:03:47 deraadt Exp $	*/
a218 1
			case DOSPTYP_FAT32L:
d221 1
@


1.42
log
@annoying spacing glitch which makes the diffs bigger
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.41 2007/06/08 05:34:27 deraadt Exp $	*/
a323 53
/*
 * Check new disk label for sensibility
 * before setting it.
 */
int
setdisklabel(struct disklabel *olp, struct disklabel *nlp,
    u_int openmask, struct cpu_disklabel *osdep)
{
	int i;
	struct partition *opp, *npp;

	/* sanity clause */
	if (nlp->d_secpercyl == 0 || nlp->d_secsize == 0 ||
	    (nlp->d_secsize % DEV_BSIZE) != 0)
		return (EINVAL);

	/* special case to allow disklabel to be invalidated */
	if (nlp->d_magic == 0xffffffff) {
		*olp = *nlp;
		return (0);
	}

	if (nlp->d_magic != DISKMAGIC || nlp->d_magic2 != DISKMAGIC ||
	    dkcksum(nlp) != 0)
		return (EINVAL);

	/* XXX missing check if other dos partitions will be overwritten */

	while (openmask != 0) {
		i = ffs(openmask) - 1;
		openmask &= ~(1 << i);
		if (nlp->d_npartitions <= i)
			return (EBUSY);
		opp = &olp->d_partitions[i];
		npp = &nlp->d_partitions[i];
		if (DL_GETPOFFSET(npp) != DL_GETPOFFSET(opp) ||
		    DL_GETPSIZE(npp) < DL_GETPSIZE(opp))
			return (EBUSY);
		/*
		 * Copy internally-set partition information
		 * if new label doesn't include it.		XXX
		 */
		if (npp->p_fstype == FS_UNUSED && opp->p_fstype != FS_UNUSED) {
			npp->p_fstype = opp->p_fstype;
			npp->p_fragblock = opp->p_fragblock;
			npp->p_cpg = opp->p_cpg;
		}
	}
	nlp->d_checksum = 0;
	nlp->d_checksum = dkcksum(nlp);
	*olp = *nlp;
	return (0);
}
@


1.41
log
@all disklabels read from the kernel now always contain a total sector
size which is the REAL DISK SIZE.  always.  if a driver fails to set
this right, please fix it.  agreed with otto and krw
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.40 2007/06/07 00:28:16 krw Exp $	*/
d338 1
a338 1
		return(EINVAL);
@


1.40
log
@More bounds_check_with_label homogenization. Fix a couple of typos while
there.

'so go to it!' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.39 2007/06/06 17:15:11 deraadt Exp $	*/
d299 1
@


1.39
log
@now that all partition size/offsets are potentially 64-bit, change the
type of all variables to daddr64_t.  this includes the APIs for XXsize()
and XXdump(), all range checks inside bio drivers, internal variables
for disklabel handling, and even uvm's swap offsets.  re-read numerous
times by otto, miod, krw, thib to look for errors
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.38 2007/06/06 16:42:03 deraadt Exp $	*/
d490 1
a490 1
			goto done;
a502 1
#if LABELSECTOR != 0
a503 1
#endif
a515 1
done:
@


1.38
log
@a fair sprinking of knf, code movement, and sometimes character-by-character
accuracy so that the variious disksubr.c's can be compared easier.
setdisklabel() starts taking an int for openmask.
ok krw, and read by quite a few other people
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.37 2007/06/05 00:38:13 deraadt Exp $	*/
d79 1
a79 1
	daddr_t part_blkno = DOSBBSECTOR;
@


1.37
log
@use six new macros to access & store the 48-bit disklabel fields related
to size.  tested on almost all machines, double checked by miod and krw
next comes the type handling surrounding these values
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.36 2007/06/02 02:35:26 krw Exp $	*/
d69 2
a70 2
readdisklabel(dev_t dev, void (*strat)(struct buf *), struct disklabel *lp,
    struct cpu_disklabel *osdep, int spoofonly)
d73 1
a75 1
	struct partition *pp;
d146 1
a146 1
	     
a218 1
			case DOSPTYP_FAT32:
d221 1
d272 1
a272 1
	/* Don't read the on-disk label if we are in spoofed-only mode. */
d328 2
a329 2
setdisklabel(struct disklabel *olp, struct disklabel *nlp, u_long openmask,
    struct cpu_disklabel *osdep)
d383 2
a384 2
writedisklabel(dev_t dev, void (*strat)(struct buf *), struct disklabel *lp,
    struct cpu_disklabel *osdep)
@


1.36
log
@Rename cvtdisklabelv1 -> disklabeltokernlabel. It does more than just
convert version 0 to version 1 disklabels.

Suggested by deraadt@@.

ok deraadt@@ otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.35 2007/05/31 19:57:43 krw Exp $	*/
d88 2
a89 2
	if (lp->d_secperunit == 0)
		lp->d_secperunit = 0x1fffffff;
d96 2
a97 2
		lp->d_partitions[i].p_size = 0;
		lp->d_partitions[i].p_offset = 0;
d99 3
a101 3
	if (lp->d_partitions[i].p_size == 0)
		lp->d_partitions[i].p_size = lp->d_secperunit;
	lp->d_partitions[i].p_offset = 0;
d114 1
a114 1
		    lp->d_secperunit / (pdi->bios_heads * pdi->bios_sectors));
d119 1
a119 1
		lp->d_ncylinders = lp->d_secperunit / lp->d_secpercyl;
d172 3
a174 3
			lp->d_partitions[0].p_size = letoh32(dp2->dp_size);
			lp->d_partitions[0].p_offset =
				letoh32(dp2->dp_start) + part_blkno;
d193 1
a193 1
			if (letoh32(dp2->dp_size) > lp->d_secperunit)
d195 1
a195 1
			if (letoh32(dp2->dp_start) > lp->d_secperunit)
d200 2
a201 2
				pp->p_offset =
				    letoh32(dp2->dp_start) + part_blkno;
d203 1
a203 1
			pp->p_size = letoh32(dp2->dp_size);
d265 3
a267 3
		lp->d_partitions['i' - 'a'].p_size =
		    lp->d_partitions[RAW_PART].p_size;
		lp->d_partitions['i' - 'a'].p_offset = 0;
d358 2
a359 1
		if (npp->p_offset != opp->p_offset || npp->p_size < opp->p_size)
d474 1
a474 1
	int labelsector = blockpersec(lp->d_partitions[RAW_PART].p_offset, lp) +
d485 2
a486 2
	if (bp->b_blkno + sz > blockpersec(p->p_size, lp)) {
		sz = blockpersec(p->p_size, lp) - bp->b_blkno;
d502 1
a502 1
	if (bp->b_blkno + blockpersec(p->p_offset, lp) <= labelsector &&
d504 1
a504 1
	    bp->b_blkno + blockpersec(p->p_offset, lp) + sz > labelsector &&
d512 1
a512 1
	bp->b_cylinder = (bp->b_blkno + blockpersec(p->p_offset, lp)) /
@


1.35
log
@KNF, whitespace and comment rectification to make all
bounds_check_with_label() routines as identical as possible without
changing any code. Code nits and adjustments to come.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.34 2007/05/31 16:05:50 krw Exp $	*/
d319 1
a319 1
	cvtdisklabelv1(lp);
@


1.34
log
@Standardize on -1 as the error return value for
bounds_check_with_label. All callers check for <= 0, so no functional
change.

Feedback from miod@@.

ok weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.33 2007/05/29 06:28:14 otto Exp $	*/
d512 1
a512 1
		lp->d_secpercyl;
@


1.33
log
@Updated disklabel format to support larger disks and partitions. We
free room in struct partition by packing fragment size and
fragments/block more tighlty and use the resulting space to make
offset and size 48 bits.  For the disk part we use spare fields in
struct disklabel.  Kernel converts in-mem copy of the on-disk
label if needed, disklabel(8) writes new version.
We are careful to only change fields not used by bootloaders.
Conception of basic scheme by deraadt.
ok deraadt@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.32 2007/05/29 05:08:19 krw Exp $	*/
d518 1
a518 1
	return (0);
@


1.32
log
@Refactor readdisklabel() to ensure there is a single point of return, in
preparation for translating all disk labels visible to the kernel to
the soon to arrive V1 format.

ok otto@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.31 2007/04/26 22:42:11 krw Exp $	*/
d319 1
d366 1
a366 2
			npp->p_fsize = opp->p_fsize;
			npp->p_frag = opp->p_frag;
@


1.31
log
@Eliminate CPU_BIOS from userland and wd(4) by always using the BIOS
geometry in the disklabel when there is a BIOS geometry to provide.
This removes the option to set a disklabel to 'BIOS' geometry via the
'g b' command in the editor.

Makes reported geometry more consistant and moves MD code to MD land
where it should be.

Doc help from jmc@@, Feedback from millert@@, marco@@, weingart@@,
kettenis@@.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.30 2007/02/18 13:49:22 krw Exp $	*/
d90 4
a93 2
	if (lp->d_secpercyl == 0)
		return ("invalid geometry");
@


1.30
log
@If no MBR partitions are found when spoofing a disklabel, try looking
for a bare FAT12/16/32 filesystem.  If one is found, spoof it as 'i'.
This enables iPod shuffles and other umass devices that are shipped
with a bare FAT32 filesystem to be used as install media. And
generally makes things easier for the user just trying to mount some
media, e.g.  floppies.

Does not make it safe to write a disklabel or MBR on such a device!
That will still obliterate the FAT filesystem.

Help and suggestions from tom@@ and deraadt@@. Feedback and suggestions
for future enhancements from espie@@ mickey@@ and peter@@.

ok tom@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.29 2007/02/03 18:22:33 krw Exp $	*/
d43 4
d66 2
d74 1
d80 1
d100 19
@


1.29
log
@Don't spoof an msdosfs partition if it claims to start after the end
of the disk. Fixes the creation of spurious 'i' partitions on new iPod
Shuffle.  And other devices with no MBR, just a FAT32 filesystem.

Pointed out most recently by Stephan A. Rickauer for his sixth
generation, clip-on iPod shuffle.

Fix tested by Stephan.

ok pedro@@ tom@@ miod@@ 'nice' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.28 2007/01/15 23:19:05 jsg Exp $	*/
d70 1
d216 28
a243 1
	/* don't read the on-disk label if we are in spoofed-only mode */
@


1.28
log
@ansi/deregister
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.27 2006/10/29 14:12:21 krw Exp $	*/
d164 2
@


1.27
log
@Don't need to 'goto done;' when 'done:' is the next line.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.26 2006/10/29 00:02:35 krw Exp $	*/
d63 2
a64 6
readdisklabel(dev, strat, lp, osdep, spoofonly)
	dev_t dev;
	void (*strat)(struct buf *);
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int spoofonly;
d268 2
a269 4
setdisklabel(olp, nlp, openmask, osdep)
	struct disklabel *olp, *nlp;
	u_long openmask;
	struct cpu_disklabel *osdep;
d323 2
a324 5
writedisklabel(dev, strat, lp, osdep)
	dev_t dev;
	void (*strat)(struct buf *);
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
d409 2
a410 5
bounds_check_with_label(bp, lp, osdep, wlabel)
	struct buf *bp;
	struct disklabel *lp;
	struct cpu_disklabel *osdep;
	int wlabel;
@


1.26
log
@Remove redundant if (msg) {} block around invocations of
iso_disklabelspoof() and udf_disklabelspoof(). Use (msg &&
iso_disklabelspoof()) instead. Makes more arch's textually consistant.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.25 2006/10/28 23:26:05 krw Exp $	*/
a404 1
	goto done;
@


1.25
log
@We don't currently write a disklabel into an OpenBSD ('A6') DOS MBR
extended partition except on alpha, hppa, hppa64 and mips64. So don't
spoof extended partitions as 'a' and try to read a disklabel from
them. Make all archs consistant.

When we can boot from extended partitions we can change to reading and
writing disklabels from them.

This means the first OpenBSD ('A6') extended partition will now be
ignored during spoofing, just as subsequent ones have always been.

Feedback from tom@@, weingart@@ and deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.24 2006/10/21 20:10:39 krw Exp $	*/
a249 1
	if (msg) {
d251 2
a252 2
		if (iso_disklabelspoof(dev, strat, lp) == 0)
			msg = NULL;
d255 2
a256 2
		if (msg && udf_disklabelspoof(dev, strat, lp) == 0)
			msg = NULL;
a257 2
		goto done;
	}
@


1.24
log
@Don't try to spoof 0 length DOS MBR/EBR partitions. By skipping
partitions with 0 in the length field we don't need to test for
and skip partitions that are all zeros. Eliminating that code
allows elimination of a local pointer.

"0 length partitions are definately dead" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.23 2006/10/21 16:01:53 krw Exp $	*/
d128 1
a128 1
		if (ourpart == -1) {
@


1.23
log
@Some KNF cleanup.

De-register. Move declaration to top of function for DOS MBR
processing. Indent nit in macppc.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.22 2006/10/21 14:18:36 krw Exp $	*/
d76 1
a76 1
	char *msg = NULL, *cp;
d169 2
a170 2
			if (letoh32(dp2->dp_size))
				pp->p_size = letoh32(dp2->dp_size);
d175 2
a178 11
				for (cp = (char *)dp2;
				    cp < (char *)(dp2 + 1); cp++)
					if (*cp)
						break;
				/*
				 * Was it all zeroes?  If so, it is
				 * an unused entry that we don't
				 * want to show.
				 */
				if (cp == (char *)(dp2 + 1))
				    continue;
@


1.22
log
@We have a pointer (pp), so use it in the DOSPTYP_UNUSED case rather
than lp->d_partitions[8+n++]. All other cases already use the pointer.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.21 2006/10/20 23:47:42 krw Exp $	*/
d66 1
a66 1
	register struct disklabel *lp;
d72 1
d163 1
a163 1
			struct partition *pp = &lp->d_partitions[8+n];
d285 1
a285 1
	register struct disklabel *olp, *nlp;
d289 2
a290 2
	register int i;
	register struct partition *opp, *npp;
d344 1
a344 1
	register struct disklabel *lp;
@


1.21
log
@Try again with local variable to avoid alignment issues.

"The dosparts member of cpu_disklabel was not used for any persistant
data. Eliminate it, and just use the data being read in while
processing MBR and EBR records.

Should be no functional change.

ok weingart@@ deraadt@@"
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.20 2006/10/18 20:09:38 deraadt Exp $	*/
d187 2
a188 2
				lp->d_partitions[8 + n++].p_fstype =
				    FS_UNUSED;
@


1.20
log
@back out disksubr changes ... since they violate strict alignment on
some architectures (kaboom); that will be fixed in the next iteration
hopefully!
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.18 2006/10/12 00:25:19 krw Exp $	*/
d70 3
a72 1
	struct dos_partition *dp = osdep->dosparts, *dp2;
d74 1
a74 1
	struct disklabel *dlp;
d77 1
a101 4
	if (dp) {
	        daddr_t part_blkno = DOSBBSECTOR;
		unsigned long extoff = 0;
		int wander = 1, n = 0, loop = 0;
d103 54
d158 2
a159 2
		 * Read dos partition table, follow extended partitions.
		 * Map the partitions to disklabel entries i-p
d161 2
a162 19
		while (wander && n < 8 && loop < 8) {
		        loop++;
			wander = 0;
			if (part_blkno < extoff)
				part_blkno = extoff;

			/* read boot record */
			bp->b_blkno = part_blkno;
			bp->b_bcount = lp->d_secsize;
			bp->b_flags = B_BUSY | B_READ;
			bp->b_cylinder = part_blkno / lp->d_secpercyl;
			(*strat)(bp);
		     
			/* if successful, wander through dos partition table */
			if (biowait(bp)) {
				msg = "dos partition I/O error";
				goto done;
			}
			bcopy(bp->b_data + DOSPARTOFF, dp, NDOSPART * sizeof(*dp));
d164 16
a179 9
			if (ourpart == -1) {
				/* Search for our MBR partition */
				for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
				    i++, dp2++)
					if (letoh32(dp2->dp_size) &&
					    dp2->dp_typ == DOSPTYP_OPENBSD)
						ourpart = i;
				if (ourpart == -1)
					goto donot;
d181 3
a183 2
				 * This is our MBR partition. need sector address
				 * for SCSI/IDE, cylinder for ESDI/ST506/RLL
d185 26
a210 78
				dp2 = &dp[ourpart];
				dospartoff = letoh32(dp2->dp_start) + part_blkno;
				cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);

				/* XXX build a temporary disklabel */
				lp->d_partitions[0].p_size = letoh32(dp2->dp_size);
				lp->d_partitions[0].p_offset =
					letoh32(dp2->dp_start) + part_blkno;
				if (lp->d_ntracks == 0)
					lp->d_ntracks = dp2->dp_ehd + 1;
				if (lp->d_nsectors == 0)
					lp->d_nsectors = DPSECT(dp2->dp_esect);
				if (lp->d_secpercyl == 0)
					lp->d_secpercyl = lp->d_ntracks *
					    lp->d_nsectors;
			}
donot:
			/*
			 * In case the disklabel read below fails, we want to
			 * provide a fake label in i-p.
			 */
			for (dp2=dp, i=0; i < NDOSPART && n < 8; i++, dp2++) {
				struct partition *pp = &lp->d_partitions[8+n];

				if (dp2->dp_typ == DOSPTYP_OPENBSD)
					continue;
				if (letoh32(dp2->dp_size) > lp->d_secperunit)
					continue;
				if (letoh32(dp2->dp_size))
					pp->p_size = letoh32(dp2->dp_size);
				if (letoh32(dp2->dp_start))
					pp->p_offset =
					    letoh32(dp2->dp_start) + part_blkno;

				switch (dp2->dp_typ) {
				case DOSPTYP_UNUSED:
					for (cp = (char *)dp2;
					    cp < (char *)(dp2 + 1); cp++)
						if (*cp)
							break;
					/*
					 * Was it all zeroes?  If so, it is
					 * an unused entry that we don't
					 * want to show.
					 */
					if (cp == (char *)(dp2 + 1))
					    continue;
					lp->d_partitions[8 + n++].p_fstype =
					    FS_UNUSED;
					break;

				case DOSPTYP_LINUX:
					pp->p_fstype = FS_EXT2FS;
					n++;
					break;

				case DOSPTYP_FAT12:
				case DOSPTYP_FAT16S:
				case DOSPTYP_FAT16B:
				case DOSPTYP_FAT32:
				case DOSPTYP_FAT32L:
				case DOSPTYP_FAT16L:
					pp->p_fstype = FS_MSDOS;
					n++;
					break;
				case DOSPTYP_EXTEND:
				case DOSPTYP_EXTENDL:
					part_blkno = letoh32(dp2->dp_start) + extoff;
					if (!extoff) {
						extoff = letoh32(dp2->dp_start);
						part_blkno = 0;
					}
					wander = 1;
					break;
				default:
					pp->p_fstype = FS_OTHER;
					n++;
					break;
d212 6
a219 3
		lp->d_bbsize = 8192;
		lp->d_sbsize = 64*1024;		/* XXX ? */
		lp->d_npartitions = MAXPARTITIONS;
d221 3
d346 2
a347 1
	struct dos_partition *dp = osdep->dosparts, *dp2;
a348 1
	struct disklabel *dlp;
a358 7
	if (dp) {
		/* read master boot record */
		bp->b_blkno = DOSBBSECTOR;
		bp->b_bcount = lp->d_secsize;
		bp->b_flags = B_BUSY | B_READ;
		bp->b_cylinder = DOSBBSECTOR / lp->d_secpercyl;
		(*strat)(bp);
d360 12
a371 2
		if ((error = biowait(bp)) != 0)
			goto done;
d373 3
a375 7
		/* XXX how do we check veracity/bounds of this? */
		bcopy(bp->b_data + DOSPARTOFF, dp,
		    NDOSPART * sizeof(*dp));

		for (dp2=dp, i=0; i < NDOSPART && ourpart == -1; i++, dp2++)
			if (letoh32(dp2->dp_size) && dp2->dp_typ == DOSPTYP_OPENBSD)
				ourpart = i;
d377 2
a378 2
		if (ourpart != -1) {
			dp2 = &dp[ourpart];
d380 6
a385 7
			/*
			 * need sector address for SCSI/IDE,
			 * cylinder for ESDI/ST506/RLL
			 */
			dospartoff = letoh32(dp2->dp_start);
			cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);
		}
@


1.19
log
@The dosparts member of cpu_disklabel was not used for any persistant
data. Eliminate it, and just use the data being read in while
processing MBR and EBR records.

Should be no functional change.

ok weingart@@ deraadt@@
@
text
@d70 2
a71 1
	struct dos_partition *dp, *dp2;
a72 3
	unsigned long extoff = 0;
	struct buf *bp = NULL;
	daddr_t part_blkno = DOSBBSECTOR;
a74 1
	int wander = 1, n = 0, loop = 0;
d99 4
a103 54
	/*
	 * Read dos partition table, follow extended partitions.
	 * Map the partitions to disklabel entries i-p
	 */
	while (wander && n < 8 && loop < 8) {
		loop++;
		wander = 0;
		if (part_blkno < extoff)
			part_blkno = extoff;

		/* read boot record */
		bp->b_blkno = part_blkno;
		bp->b_bcount = lp->d_secsize;
		bp->b_flags = B_BUSY | B_READ;
		bp->b_cylinder = part_blkno / lp->d_secpercyl;
		(*strat)(bp);
	     
		/* if successful, wander through dos partition table */
		if (biowait(bp)) {
			msg = "dos partition I/O error";
			goto done;
		}
		dp = (struct dos_partition *)(bp->b_data + DOSPARTOFF);

		if (ourpart == -1) {
			/* Search for our MBR partition */
			for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
			    i++, dp2++)
				if (letoh32(dp2->dp_size) &&
				    dp2->dp_typ == DOSPTYP_OPENBSD)
					ourpart = i;
			if (ourpart == -1)
				goto donot;
			/*
			 * This is our MBR partition. need sector address
			 * for SCSI/IDE, cylinder for ESDI/ST506/RLL
			 */
			dp2 = &dp[ourpart];
			dospartoff = letoh32(dp2->dp_start) + part_blkno;
			cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);

			/* XXX build a temporary disklabel */
			lp->d_partitions[0].p_size = letoh32(dp2->dp_size);
			lp->d_partitions[0].p_offset =
				letoh32(dp2->dp_start) + part_blkno;
			if (lp->d_ntracks == 0)
				lp->d_ntracks = dp2->dp_ehd + 1;
			if (lp->d_nsectors == 0)
				lp->d_nsectors = DPSECT(dp2->dp_esect);
			if (lp->d_secpercyl == 0)
				lp->d_secpercyl = lp->d_ntracks *
				    lp->d_nsectors;
		}
donot:
d105 2
a106 2
		 * In case the disklabel read below fails, we want to
		 * provide a fake label in i-p.
d108 19
a126 2
		for (dp2=dp, i=0; i < NDOSPART && n < 8; i++, dp2++) {
			struct partition *pp = &lp->d_partitions[8+n];
d128 9
a136 16
			if (dp2->dp_typ == DOSPTYP_OPENBSD)
				continue;
			if (letoh32(dp2->dp_size) > lp->d_secperunit)
				continue;
			if (letoh32(dp2->dp_size))
				pp->p_size = letoh32(dp2->dp_size);
			if (letoh32(dp2->dp_start))
				pp->p_offset =
				    letoh32(dp2->dp_start) + part_blkno;

			switch (dp2->dp_typ) {
			case DOSPTYP_UNUSED:
				for (cp = (char *)dp2;
				    cp < (char *)(dp2 + 1); cp++)
					if (*cp)
						break;
d138 2
a139 3
				 * Was it all zeroes?  If so, it is
				 * an unused entry that we don't
				 * want to show.
d141 78
a218 26
				if (cp == (char *)(dp2 + 1))
				    continue;
				lp->d_partitions[8 + n++].p_fstype =
				    FS_UNUSED;
				break;

			case DOSPTYP_LINUX:
				pp->p_fstype = FS_EXT2FS;
				n++;
				break;

			case DOSPTYP_FAT12:
			case DOSPTYP_FAT16S:
			case DOSPTYP_FAT16B:
			case DOSPTYP_FAT32:
			case DOSPTYP_FAT32L:
			case DOSPTYP_FAT16L:
				pp->p_fstype = FS_MSDOS;
				n++;
				break;
			case DOSPTYP_EXTEND:
			case DOSPTYP_EXTENDL:
				part_blkno = letoh32(dp2->dp_start) + extoff;
				if (!extoff) {
					extoff = letoh32(dp2->dp_start);
					part_blkno = 0;
a219 6
				wander = 1;
				break;
			default:
				pp->p_fstype = FS_OTHER;
				n++;
				break;
d222 3
a225 3
	lp->d_bbsize = 8192;
	lp->d_sbsize = 64*1024;		/* XXX ? */
	lp->d_npartitions = MAXPARTITIONS;
d348 1
a348 1
	struct dos_partition *dp, *dp2;
d361 7
d369 2
a370 6
	/* read master boot record */
	bp->b_blkno = DOSBBSECTOR;
	bp->b_bcount = lp->d_secsize;
	bp->b_flags = B_BUSY | B_READ;
	bp->b_cylinder = DOSBBSECTOR / lp->d_secpercyl;
	(*strat)(bp);
d372 7
a378 2
	if ((error = biowait(bp)) != 0)
		goto done;
d380 2
a381 2
	/* XXX how do we check veracity/bounds of this? */
	dp = (struct dos_partition *)(bp->b_data + DOSPARTOFF);
d383 7
a389 13
	for (dp2=dp, i=0; i < NDOSPART && ourpart == -1; i++, dp2++)
		if (letoh32(dp2->dp_size) && dp2->dp_typ == DOSPTYP_OPENBSD)
			ourpart = i;

	if (ourpart != -1) {
		dp2 = &dp[ourpart];

		/*
		 * need sector address for SCSI/IDE,
		 * cylinder for ESDI/ST506/RLL
		 */
		dospartoff = letoh32(dp2->dp_start);
		cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);
@


1.18
log
@Since we no longer look in FreeBSD or NetBSD partitions for the
disklabel, we shouldn't write the disklabel in such partitions either.

Brings amd64, arm, i386, landisk, macppc, mvmeppc (which roll their
own MBR search in writedisklabel()) into line with alpha, hppa,
hppa64, mips64 (which use readdoslabel() in both reading and writing
the disklabel). If all goes well, soon everyone will be using
readdoslabel().
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.17 2006/10/10 03:17:45 krw Exp $	*/
d70 3
a72 1
	struct dos_partition *dp = osdep->dosparts, *dp2;
d74 1
a74 1
	struct disklabel *dlp;
d77 1
a101 4
	if (dp) {
	        daddr_t part_blkno = DOSBBSECTOR;
		unsigned long extoff = 0;
		int wander = 1, n = 0, loop = 0;
d103 54
d158 2
a159 2
		 * Read dos partition table, follow extended partitions.
		 * Map the partitions to disklabel entries i-p
d161 2
a162 19
		while (wander && n < 8 && loop < 8) {
		        loop++;
			wander = 0;
			if (part_blkno < extoff)
				part_blkno = extoff;

			/* read boot record */
			bp->b_blkno = part_blkno;
			bp->b_bcount = lp->d_secsize;
			bp->b_flags = B_BUSY | B_READ;
			bp->b_cylinder = part_blkno / lp->d_secpercyl;
			(*strat)(bp);
		     
			/* if successful, wander through dos partition table */
			if (biowait(bp)) {
				msg = "dos partition I/O error";
				goto done;
			}
			bcopy(bp->b_data + DOSPARTOFF, dp, NDOSPART * sizeof(*dp));
d164 16
a179 9
			if (ourpart == -1) {
				/* Search for our MBR partition */
				for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
				    i++, dp2++)
					if (letoh32(dp2->dp_size) &&
					    dp2->dp_typ == DOSPTYP_OPENBSD)
						ourpart = i;
				if (ourpart == -1)
					goto donot;
d181 3
a183 2
				 * This is our MBR partition. need sector address
				 * for SCSI/IDE, cylinder for ESDI/ST506/RLL
d185 26
a210 78
				dp2 = &dp[ourpart];
				dospartoff = letoh32(dp2->dp_start) + part_blkno;
				cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);

				/* XXX build a temporary disklabel */
				lp->d_partitions[0].p_size = letoh32(dp2->dp_size);
				lp->d_partitions[0].p_offset =
					letoh32(dp2->dp_start) + part_blkno;
				if (lp->d_ntracks == 0)
					lp->d_ntracks = dp2->dp_ehd + 1;
				if (lp->d_nsectors == 0)
					lp->d_nsectors = DPSECT(dp2->dp_esect);
				if (lp->d_secpercyl == 0)
					lp->d_secpercyl = lp->d_ntracks *
					    lp->d_nsectors;
			}
donot:
			/*
			 * In case the disklabel read below fails, we want to
			 * provide a fake label in i-p.
			 */
			for (dp2=dp, i=0; i < NDOSPART && n < 8; i++, dp2++) {
				struct partition *pp = &lp->d_partitions[8+n];

				if (dp2->dp_typ == DOSPTYP_OPENBSD)
					continue;
				if (letoh32(dp2->dp_size) > lp->d_secperunit)
					continue;
				if (letoh32(dp2->dp_size))
					pp->p_size = letoh32(dp2->dp_size);
				if (letoh32(dp2->dp_start))
					pp->p_offset =
					    letoh32(dp2->dp_start) + part_blkno;

				switch (dp2->dp_typ) {
				case DOSPTYP_UNUSED:
					for (cp = (char *)dp2;
					    cp < (char *)(dp2 + 1); cp++)
						if (*cp)
							break;
					/*
					 * Was it all zeroes?  If so, it is
					 * an unused entry that we don't
					 * want to show.
					 */
					if (cp == (char *)(dp2 + 1))
					    continue;
					lp->d_partitions[8 + n++].p_fstype =
					    FS_UNUSED;
					break;

				case DOSPTYP_LINUX:
					pp->p_fstype = FS_EXT2FS;
					n++;
					break;

				case DOSPTYP_FAT12:
				case DOSPTYP_FAT16S:
				case DOSPTYP_FAT16B:
				case DOSPTYP_FAT32:
				case DOSPTYP_FAT32L:
				case DOSPTYP_FAT16L:
					pp->p_fstype = FS_MSDOS;
					n++;
					break;
				case DOSPTYP_EXTEND:
				case DOSPTYP_EXTENDL:
					part_blkno = letoh32(dp2->dp_start) + extoff;
					if (!extoff) {
						extoff = letoh32(dp2->dp_start);
						part_blkno = 0;
					}
					wander = 1;
					break;
				default:
					pp->p_fstype = FS_OTHER;
					n++;
					break;
d212 6
a219 3
		lp->d_bbsize = 8192;
		lp->d_sbsize = 64*1024;		/* XXX ? */
		lp->d_npartitions = MAXPARTITIONS;
d221 3
d346 1
a346 1
	struct dos_partition *dp = osdep->dosparts, *dp2;
a358 7
	if (dp) {
		/* read master boot record */
		bp->b_blkno = DOSBBSECTOR;
		bp->b_bcount = lp->d_secsize;
		bp->b_flags = B_BUSY | B_READ;
		bp->b_cylinder = DOSBBSECTOR / lp->d_secpercyl;
		(*strat)(bp);
d360 12
a371 2
		if ((error = biowait(bp)) != 0)
			goto done;
d373 3
a375 7
		/* XXX how do we check veracity/bounds of this? */
		bcopy(bp->b_data + DOSPARTOFF, dp,
		    NDOSPART * sizeof(*dp));

		for (dp2=dp, i=0; i < NDOSPART && ourpart == -1; i++, dp2++)
			if (letoh32(dp2->dp_size) && dp2->dp_typ == DOSPTYP_OPENBSD)
				ourpart = i;
d377 2
a378 2
		if (ourpart != -1) {
			dp2 = &dp[ourpart];
d380 6
a385 7
			/*
			 * need sector address for SCSI/IDE,
			 * cylinder for ESDI/ST506/RLL
			 */
			dospartoff = letoh32(dp2->dp_start);
			cyl = DPCYL(dp2->dp_scyl, dp2->dp_ssect);
		}
@


1.17
log
@Don't spoof a Free/NetBSD MBR partition as the 'a' partition in a
disklabel. Fixes 'double spoofing' of these partitions as both 'a' and
something in the 'i' to 'p' range.

OpenBSD changed its MBR partition type to 'A6' eight years ago.  As a
backward compatibility measure NetBSD and FreeBSD MBR partitions were
still spoofed as 'a' partitions when no OpenBSD partition could be
found. This bit of backward compatibility is no longer required.

'we can get rid of it' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.16 2006/10/04 03:23:01 krw Exp $	*/
a377 6
				ourpart = i;
		for (dp2=dp, i=0; i < NDOSPART && ourpart == -1; i++, dp2++)
			if (letoh32(dp2->dp_size) && dp2->dp_typ == DOSPTYP_FREEBSD)
				ourpart = i;
		for (dp2=dp, i=0; i < NDOSPART && ourpart == -1; i++, dp2++)
			if (letoh32(dp2->dp_size) && dp2->dp_typ == DOSPTYP_NETBSD)
@


1.16
log
@More tidying up after bad144. Remove references in comments and
don't include dkbad.h when nothing in it is used. Missed
arm/include/disklabel.h first time around.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.15 2006/10/04 00:52:55 krw Exp $	*/
a133 10
						ourpart = i;
				for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
				    i++, dp2++)
					if (letoh32(dp2->dp_size) &&
					    dp2->dp_typ == DOSPTYP_FREEBSD)
						ourpart = i;
				for (dp2=dp, i=0; i < NDOSPART && ourpart == -1;
				    i++, dp2++)
					if (letoh32(dp2->dp_size) &&
					    dp2->dp_typ == DOSPTYP_NETBSD)
@


1.15
log
@Zap bad144 bad sector info in disklabels. Sparsely used if at all for
a few obsolete and easily replaced disk models. And didn't work anyway
according to Bob, who has tried.

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.14 2006/09/16 14:56:11 krw Exp $	*/
d53 1
a53 2
 * find disklabel inside a DOS partition. Also, if bad block
 * table needed, attempt to extract it as well. Return buffer
@


1.14
log
@Revert new check for DOS partitions running past d_secperunit (e.g.
r1.54 of i386/disksubr.c). The check incorrectly handled extended
partitions. Possibly a symptom of a deeper problem with extended
partition offsets that will be addressed post-4.0.

Problem reported/fix tested by A. Velichinsky, cause diagnosed by
otto@@.

ok pedro@@ mickey@@ miod@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.13 2006/08/24 00:22:22 krw Exp $	*/
a71 1
	struct dkbad *bdp = &DKBAD(osdep);
a280 35
	}

	/* obtain bad sector table if requested and present */
	if (bdp && (lp->d_flags & D_BADSECT)) {
		struct dkbad *db;

		i = 0;
		do {
			/* read a bad sector table */
			bp->b_flags = B_BUSY | B_READ;
			bp->b_blkno = lp->d_secperunit - lp->d_nsectors + i;
			if (lp->d_secsize > DEV_BSIZE)
				bp->b_blkno *= lp->d_secsize / DEV_BSIZE;
			else
				bp->b_blkno /= DEV_BSIZE / lp->d_secsize;
			bp->b_bcount = lp->d_secsize;
			bp->b_cylinder = lp->d_ncylinders - 1;
			(*strat)(bp);

			/* if successful, validate, otherwise try another */
			if (biowait(bp)) {
				msg = "bad sector table I/O error";
			} else {
				db = (struct dkbad *)(bp->b_data);
#define DKBAD_MAGIC 0x4321
				if (db->bt_mbz == 0
					&& db->bt_flag == DKBAD_MAGIC) {
					msg = NULL;
					*bdp = *db;
					break;
				} else
					msg = "bad sector table corrupted";
			}
		} while ((bp->b_flags & B_ERROR) && (i += 2) < 10 &&
			i < lp->d_nsectors);
@


1.13
log
@Move d_secpercyl test to after setting default size. Missed in earlier
adjustment of other disksubr.c's.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.12 2006/08/20 03:14:21 krw Exp $	*/
a175 3
				u_int64_t blkno = (u_int64_t)part_blkno +
				    (u_int64_t)letoh32(dp2->dp_start) +
				    (u_int64_t)letoh32(dp2->dp_size);
d179 1
a179 1
				if (blkno > lp->d_secperunit)
@


1.12
log
@When spoofing an MSDOS disklabel, don't create partitions with a final
block past d_secperunit.

Fixes devices where bogus partitions with a starting offset >
d_secperunit were created. e.g. floppies formatted by Caldera DR-DOS.

ok pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.11 2006/08/17 10:34:14 krw Exp $	*/
d81 2
a84 2
	if (lp->d_secperunit == 0)
		lp->d_secperunit = 0x1fffffff;
@


1.11
log
@Check d_secpercyl in all readdisklable() functions, and have all of
them return 'invalid geometry' when d_secpercyl == 0. While there move
the check to a consistant location (after the check of d_secperunit)
and use a consistant idiom (i.e. some readdisklabel()'s have no 'done'
label).

prodded by thib@@ after a bad macppc experience. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.10 2006/08/11 21:32:39 krw Exp $	*/
d176 3
d182 1
a182 1
				if (letoh32(dp2->dp_size) > lp->d_secperunit)
@


1.10
log
@Use d_secperunit rather than 0x1fffffff as the default value for
RAW_PART's p_size. Since d_secperunit is initialized to 0x1fffffff if
not specified there should be no need to use the magic number again.
And if d_secperunit was specified then that value should be used
instead of the magic number.

This was already being done for hp300, luna88k, mac68k, mvme68k,
mvme88k.

Should be a no-op.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.9 2006/07/01 16:50:32 krw Exp $	*/
d81 2
a82 4
	if (lp->d_secpercyl == 0) {
		msg = "invalid geometry";
		goto done;
	}
@


1.9
log
@Eliminate redundant get_le() in favour of letoh32(). Add letoh32()
calls in alpha, hppa, hppa64 and mips63 when accessing the two DOS MBR
u_int32_t fields dp_size and dp_start.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.8 2006/03/15 20:20:38 miod Exp $	*/
d93 1
a93 1
		lp->d_partitions[i].p_size = 0x1fffffff;
@


1.8
log
@Nuke dk_establish(), no longer used.
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.7 2006/03/04 19:33:20 miod Exp $	*/
d136 1
a136 1
					if (get_le(&dp2->dp_size) &&
d141 1
a141 1
					if (get_le(&dp2->dp_size) &&
d146 1
a146 1
					if (get_le(&dp2->dp_size) &&
d156 1
a156 1
				dospartoff = get_le(&dp2->dp_start) + part_blkno;
d160 1
a160 1
				lp->d_partitions[0].p_size = get_le(&dp2->dp_size);
d162 1
a162 1
					get_le(&dp2->dp_start) + part_blkno;
d181 1
a181 1
				if (get_le(&dp2->dp_size) > lp->d_secperunit)
d183 3
a185 3
				if (get_le(&dp2->dp_size))
					pp->p_size = get_le(&dp2->dp_size);
				if (get_le(&dp2->dp_start))
d187 1
a187 1
					    get_le(&dp2->dp_start) + part_blkno;
d222 1
a222 1
					part_blkno = get_le(&dp2->dp_start) + extoff;
d224 1
a224 1
						extoff = get_le(&dp2->dp_start);
d426 1
a426 1
			if (get_le(&dp2->dp_size) && dp2->dp_typ == DOSPTYP_OPENBSD)
d429 1
a429 1
			if (get_le(&dp2->dp_size) && dp2->dp_typ == DOSPTYP_FREEBSD)
d432 1
a432 1
			if (get_le(&dp2->dp_size) && dp2->dp_typ == DOSPTYP_NETBSD)
d442 1
a442 1
			dospartoff = get_le(&dp2->dp_start);
@


1.7
log
@Typos grab bag of the month, eyeballed by jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.6 2005/12/22 03:02:48 krw Exp $	*/
a42 7

void
dk_establish(dk, dev)
	struct disk *dk;
	struct device *dev;
{
}
@


1.6
log
@'spoofonly' does not mean what I thought it meant. The whole point is
to read non-OpenBSD label information like MBRs and populate ('spoof')
the OpenBSD disk label appropriately. So avoiding an I/O when doing
'spoofonly' is to miss the whole point.

Backout all Sept. 26 and subsequent changes to disksubr.c files. The
original CD problem with I/O errors on blank media will be addressed
another way.

Should fix the ext3 vs amd64 problems discussed on misc@@. Thanks to
steven@@ for finally putting it terms that I understood.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.5 2005/12/13 00:18:19 jsg Exp $	*/
d85 1
a85 1
	/* minimal requirements for archtypal disk label */
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.
Checked by ian@@, deraadt@@ and millert@@, arm portion checked by drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.4 2005/09/26 22:52:50 krw Exp $	*/
a123 5

			if (spoofonly) {
				bzero(dp, NDOSPART * sizeof(*dp));
				goto donot;
			}
@


1.4
log
@Use SCSI_IGNORE_ILLEGAL_REQUEST when reading a cd's table of contents.
ILLEGAL REQUEST is correctly reported for blank media, as an
informative FreeBSD comment pointed out. Ensure the returned table of
contents is always initialized to zero. Call readdisklabel with
spoofonly = 1 when no data tracks are found.

Don't try to read the DOS label from the device if spoofonly is 1.
Only done for amd64 here. More archs to follow.

Eliminates scsi error messages when attempting to open a cd containing
blank media, as pointed out by Michael Coulter.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.3 2005/03/30 07:52:31 deraadt Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@first approximation:  spoof UDF filesystem disklabels when we see them.
it is likely a slight bug or two will sneak in with this, so everyone
please keep an eye out on your disklabels
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.2 2004/03/17 14:16:03 miod Exp $	*/
d128 5
@


1.2
log
@Make sure disklabels use at least DEV_BSIZE as their sector size.
This allows the kernel to survive reading the disklabel off a 256-bytes/sector
scsi device...

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.1 2004/01/28 01:39:38 mickey Exp $	*/
d288 4
@


1.1
log
@an amd64 arch support.
hacked by art@@ from netbsd sources and then later debugged
by me into the shape where it can host itself.
no bootloader yet as needs redoing from the
recent advanced i386 sources (anyone? ;)
@
text
@d1 1
a1 1
/*	$OpenBSD: disksubr.c,v 1.42 2002/03/14 01:26:32 millert Exp $	*/
d90 1
a90 1
	if (lp->d_secsize == 0)
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d90 1
a90 1
	if (lp->d_secsize < DEV_BSIZE)
@


