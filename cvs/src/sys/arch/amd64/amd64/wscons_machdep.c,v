head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.20
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.12
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.16
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.14
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.13
date	2016.06.21.15.24.55;	author jcs;	state Exp;
branches;
next	1.12;
commitid	RnGuu1BeGyvYHPrZ;

1.12
date	2016.03.06.22.41.24;	author naddy;	state Exp;
branches;
next	1.11;
commitid	m1enxPveYSHWYNdC;

1.11
date	2015.08.30.10.05.09;	author yasuoka;	state Exp;
branches;
next	1.10;
commitid	8KYmU15QlyhusRif;

1.10
date	2011.06.28.20.19.18;	author matthieu;	state Exp;
branches;
next	1.9;

1.9
date	2010.11.23.04.07.55;	author shadchin;	state Exp;
branches;
next	1.8;

1.8
date	2009.08.25.19.16.34;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.16.20.03.22;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2008.01.23.16.37.56;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.11.21.00.48;	author matthieu;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.09.14.39.26;	author jsg;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.02.21.20.58;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.05.14.33.15;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.39.39;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.13
log
@add support to efifb for drawing a console on a coreboot framebuffer
if coreboot's memory table is found, it has a framebuffer entry, and
there is no previously attached efi, vga, or serial console.

useful on chromebooks that have no legacy vga device to get an early
console before inteldrm(4) attaches or, for newer chipsets, a full
console and X with wsfb(4).

ok kettenis
@
text
@/*	$OpenBSD: wscons_machdep.c,v 1.12 2016/03/06 22:41:24 naddy Exp $ */

/*
 * Copyright (c) 2001 Aaron Campbell
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR OR HIS RELATIVES BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/extent.h>

#include <machine/bus.h>

#include <dev/cons.h>

#include "vga.h"
#include "pcdisplay.h"
#if (NVGA > 0) || (NPCDISPLAY > 0)
#include <dev/ic/mc6845reg.h>
#include <dev/ic/pcdisplayvar.h>
#if (NVGA > 0)
#include <dev/ic/vgareg.h>
#include <dev/ic/vgavar.h>
#endif
#if (NPCDISPLAY > 0)
#include <dev/isa/pcdisplayvar.h>
#endif
#endif

#include "wsdisplay.h"
#if NWSDISPLAY > 0
#include <dev/wscons/wsdisplayvar.h>
#endif

#include "pckbc.h"
#if (NPCKBC > 0)
#include <dev/isa/isareg.h>
#include <dev/ic/i8042reg.h>
#include <dev/ic/pckbcvar.h>
#endif
#include "pckbd.h"
#include "ukbd.h"
#if (NUKBD > 0)
#include <dev/usb/ukbdvar.h>
#endif
#include "wskbd.h"
#if NWSKBD > 0
#include <dev/wscons/wskbdvar.h>
#endif
#include "efifb.h"
#if NEFIFB > 0
#include <machine/efifbvar.h>
#endif

int	wscn_video_init(void);
void	wscn_input_init(int);

cons_decl(ws);

void
wscnprobe(struct consdev *cp)
{
	int maj;

	/* locate the major number */
	for (maj = 0; maj < nchrdev; maj++) {
		if (cdevsw[maj].d_open == wsdisplayopen)
			break;
	}

	if (maj == nchrdev) {
		/* we are not in cdevsw[], give up */
		panic("wsdisplay is not in cdevsw[]");
	}

	cp->cn_dev = makedev(maj, 0);
	cp->cn_pri = CN_MIDPRI;
}

void
wscninit(struct consdev *cp)
{
	static int initted = 0;

	if (initted)
		return;

	if (wscn_video_init() == 0) {
		initted = 1;
		wscn_input_init(0);
	}
}

void
wscnputc(dev_t dev, int i)
{
	wsdisplay_cnputc(dev, i);
}

int
wscngetc(dev_t dev)
{
	return (wskbd_cngetc(dev));
}

void
wscnpollc(dev_t dev, int on)
{
	wskbd_cnpollc(dev, on);
}

/*
 * Configure the display part of the console.
 */
int
wscn_video_init(void)
{
#if (NEFIFB > 0)
	if (efifb_cnattach() == 0)
		return (0);
#endif
#if (NVGA > 0)
	if (vga_cnattach(X86_BUS_SPACE_IO, X86_BUS_SPACE_MEM, -1, 1) == 0)
		return (0);
#endif
#if (NEFIFB > 0)
	if (efifb_cb_cnattach() == 0)
		return (0);
#endif
#if (NPCDISPLAY > 0)
	if (pcdisplay_cnattach(X86_BUS_SPACE_IO, X86_BUS_SPACE_MEM) == 0)
		return (0);
#endif
	return (-1);
}

/*
 * Configure the keyboard part of the console.
 * This is tricky, because of the games USB controllers play.
 *
 * On a truly legacy-free design, no PS/2 keyboard controller will be
 * found, so we'll settle for the first USB keyboard as the console
 * input device.
 *
 * Otherwise, the PS/2 controller will claim console, even if no PS/2
 * keyboard is plugged into it.  This is intentional, so that a PS/2
 * keyboard can be plugged late (even though this is theoretically not
 * allowed, most PS/2 controllers survive this).
 *
 * However, if there isn't any PS/2 keyboard connector, but an USB
 * controller in Legacy mode, the kernel will detect a PS/2 keyboard
 * connected (while there really isn't any), until the USB controller
 * driver attaches. At that point the ghost of the legacy keyboard
 * flees away.
 *
 * The pckbc(4) driver will, however, detect that the keyboard is gone
 * missing, and will invoke this function again, allowing a new console
 * input device choice.
 */

void
wscn_input_init(int pass)
{
	if (pass != 0) {
#if NWSKBD > 0
		wskbd_cndetach();
#endif
	}

#if (NPCKBC > 0)
	if (pass == 0 &&
	    pckbc_cnattach(X86_BUS_SPACE_IO, IO_KBD, KBCMDP, 0) == 0)
			return;
#endif
#if (NUKBD > 0)
	if (ukbd_cnattach() == 0)
		return;
#endif
}
@


1.12
log
@Sync no-argument function declaration and definition by adding (void).
ok kettenis@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.11 2015/08/30 10:05:09 yasuoka Exp $ */
d148 4
@


1.11
log
@Modify kernel to prepare boot from UEFI.

- Add new boot arg "bios_efi_info_t" to pass the paramters from UEFI
- Make bios(4) and acpi(4) be able to probe with the parameters from
  UEFI
- Add efifb(8).  It uses the framebuffer from UEFI and it will work as
  a backend of wsdisplay(4) and wsfb (X11 video driver).  Disabled by
  the kernel config for this moment

input and ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.10 2011/06/28 20:19:18 matthieu Exp $ */
d140 1
a140 1
wscn_video_init()
@


1.10
log
@Remove the ega driver which is not referenced by any GENERIC kernel.

ok tedu@@, "I won't mourn it" miod@@, "no objection" oga@@,
"I won't cry" todd@@,  "fine, even happy" nick@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.9 2010/11/23 04:07:55 shadchin Exp $ */
d74 4
d79 1
a79 1
void	wscn_video_init(void);
a110 1
	initted = 1;
d112 4
a115 2
	wscn_video_init();
	wscn_input_init(0);
d139 1
a139 1
void
d142 4
d148 1
a148 1
		return;
d152 1
a152 1
		return;
d154 1
@


1.9
log
@removed slot argument of function pckbc_cnattach
because it is always PCKBC_KBD_SLOT

ok krw@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.8 2009/08/25 19:16:34 miod Exp $ */
a40 1
#include "ega.h"
d42 1
a42 1
#if (NVGA > 0) || (NEGA > 0) || (NPCDISPLAY > 0)
a48 3
#if (NEGA > 0)
#include <dev/isa/egavar.h>
#endif
a138 4
		return;
#endif
#if (NEGA > 0)
	if (ega_cnattach(X86_BUS_SPACE_IO, X86_BUS_SPACE_MEM) == 0)
@


1.8
log
@Legacy-free PC hardware do not have a real PS/2 keyboard controller, but
rather have the USB HCI emulate it during boot, while legacy mode is enabled.

This causes pckbd0 to attach as the console device, but is lost as soon as
the USB HCI driver attaches.

The disappearance of the emulated PS/2 controller can however be detected
in pckbc(4) - which is supposed to attach after [eou]hci(4), with the controller
refusing to ack commands and replying ``please resend'' instead.

In that case, the kernel will now no longer attach pckbd, and will perform a
new console input device selection, allowing the (real) usb keyboard to
become the console.

Thanks to krw@@ for countless tests on legacy-free hardware; also tested on
more conventional hardware by naddy@@ and I.

Only amd64 and i386 platforms are affected by this change.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.7 2008/07/16 20:03:22 miod Exp $ */
d189 2
a190 2
	if (pass == 0 && pckbc_cnattach(X86_BUS_SPACE_IO, IO_KBD, KBCMDP,
	    PCKBC_KBD_SLOT, 0) == 0)
@


1.7
log
@Add a new parameter to pckbc_cnattach(): flags to put in the pckbc bowels.
For now, only one such flag is defined, PCKBC_CANT_TRANSLATE. It hints
pckbc that the device does not behave correctly to the ``set translation''
commands.

Set this flag if we are running on a Tadpole Ultrabook machine, which needs it.
This makes the built-in keyboard work correctly on this laptop (with the
help of the software translation pckbd diff).

tested & ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.6 2008/01/23 16:37:56 jsing Exp $ */
a70 3
#if (NPCKBD > 0) || (NUKBD > 0)
#include <dev/wscons/wskbdvar.h>
#endif
d74 7
d107 1
a107 1
	static int initted;
a110 1

d113 2
a114 26
#if (NVGA > 0) || (NEGA > 0) || (NPCDISPLAY > 0)
#if (NVGA > 0)
	if (!vga_cnattach(X86_BUS_SPACE_IO, X86_BUS_SPACE_MEM, -1, 1))
		goto dokbd;
#endif
#if (NEGA > 0)
	if (!ega_cnattach(X86_BUS_SPACE_IO, X86_BUS_SPACE_MEM))
		goto dokbd;
#endif
#if (NPCDISPLAY > 0)
	if (!pcdisplay_cnattach(X86_BUS_SPACE_IO, X86_BUS_SPACE_MEM))
		goto dokbd;
#endif
	if (0) goto dokbd;	/* XXX stupid gcc */
dokbd:
#if (NPCKBC > 0)
	if (!pckbc_cnattach(X86_BUS_SPACE_IO, IO_KBD, KBCMDP, PCKBC_KBD_SLOT,
	    0))
		return;
#endif
#if (NUKBD > 0)
	if (!ukbd_cnattach())
		return;
#endif
#endif  /* VGA | EGA | PCDISPLAY */
	return;
d133 64
@


1.6
log
@Cleanup cn_pri. Change constants to more meaningful names, rather than
the hp300 related ones currently in use. CN_NORMAL becomes CN_LOWPRI,
CN_INTERNAL becomes CN_MIDPRI and CN_REMOTE becomes CN_HIGHPRI.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.5 2006/06/11 21:00:48 matthieu Exp $ */
d126 2
a127 1
	if (!pckbc_cnattach(X86_BUS_SPACE_IO, IO_KBD, KBCMDP, PCKBC_KBD_SLOT))
@


1.5
log
@Ansify. No binary change on amd64 and i386, not yet built on sgi. ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.4 2005/12/09 14:39:26 jsg Exp $ */
d97 1
a97 1
	cp->cn_pri = CN_INTERNAL;
@


1.4
log
@Drop clause 3/4 as per i386 version.
ok aaron@@ (Copyright holder).
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.3 2004/11/02 21:20:58 miod Exp $ */
d81 1
a81 2
wscnprobe(cp)
	struct consdev *cp;
d101 1
a101 2
wscninit(cp)
	struct consdev *cp;
d138 1
a138 3
wscnputc(dev, i)
	dev_t dev;
	int i;
d144 1
a144 2
wscngetc(dev)
	dev_t dev;
d150 1
a150 3
wscnpollc(dev, on)
	dev_t dev;
	int on;
@


1.3
log
@Remove __HAVE_NWSCONS and related remnants of pre-wscons days; no functional
change.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.2 2004/10/05 14:33:15 miod Exp $ */
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Aaron Campbell.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.2
log
@Get prototypes through cons_decl(), so that they are always right.
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.1 2004/01/28 01:39:39 mickey Exp $ */
d74 1
a74 1
#include "pckbd.h"     /* for pckbc_machdep_cnattach */
@


1.1
log
@an amd64 arch support.
hacked by art@@ from netbsd sources and then later debugged
by me into the shape where it can host itself.
no bootloader yet as needs redoing from the
recent advanced i386 sources (anyone? ;)
@
text
@d1 1
a1 1
/*	$OpenBSD: wscons_machdep.c,v 1.9 2002/06/18 12:50:55 nate Exp $ */
d83 1
a83 5
void wscnprobe(struct consdev *);
void wscninit(struct consdev *);
void wscnputc(dev_t, char);
int wscngetc(dev_t);
void wscnpollc(dev_t, int);
d147 1
a147 1
	char i;
d149 1
a149 1
	wsdisplay_cnputc(dev, (int)i);
@

