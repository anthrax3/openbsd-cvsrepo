head	1.28;
access;
symbols
	OPENBSD_6_2_BASE:1.28
	OPENBSD_6_1:1.28.0.8
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.28.0.4
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.26.0.4
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.4
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.16.0.6
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.16
	OPENBSD_5_1:1.16.0.4
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.13.0.2
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.8
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.28
date	2015.11.23.22.57.12;	author deraadt;	state Exp;
branches;
next	1.27;
commitid	lOkXFQaUGdej50W4;

1.27
date	2015.11.13.07.52.20;	author mlarkin;	state Exp;
branches;
next	1.26;
commitid	KdsjYlqLpqhwOUHf;

1.26
date	2015.03.14.03.38.46;	author jsg;	state Exp;
branches;
next	1.25;
commitid	p4LJxGKbi0BU2cG6;

1.25
date	2014.07.11.10.56.52;	author mlarkin;	state Exp;
branches;
next	1.24;
commitid	coKdWuxXuBFryssI;

1.24
date	2014.07.09.11.37.16;	author mlarkin;	state Exp;
branches;
next	1.23;
commitid	ZzCjmXn3ZAUY3nHp;

1.23
date	2014.03.29.18.09.28;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2014.01.21.09.40.54;	author kettenis;	state Exp;
branches;
next	1.21;

1.21
date	2013.12.19.21.30.02;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2013.10.18.15.09.22;	author mlarkin;	state Exp;
branches;
next	1.19;

1.19
date	2013.06.01.22.22.13;	author mlarkin;	state Exp;
branches;
next	1.18;

1.18
date	2013.03.20.21.23.05;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2012.12.05.23.20.10;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2011.03.18.03.10.47;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2010.11.13.04.16.42;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2010.10.02.23.14.32;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2010.07.21.14.08.09;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.26.15.56.40;	author mlarkin;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.07.06.33.06;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2009.11.29.17.11.30;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.26.05.42.09;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2008.04.13.16.11.28;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.25.16.22.11;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2007.05.06.03.37.08;	author gwk;	state Exp;
branches;
next	1.5;

1.5
date	2007.03.23.16.44.38;	author gwk;	state Exp;
branches;
next	1.4;

1.4
date	2007.02.01.20.39.42;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.04.01.16.36;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.25.17.27.01;	author andreas;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.25.11.03.27;	author art;	state Exp;
branches;
next	;


desc
@@


1.28
log
@No longer need 'option VMM', declaring the vmm0 device is sufficient.
ok mlarkin
@
text
@/*	$OpenBSD: ipifuncs.c,v 1.27 2015/11/13 07:52:20 mlarkin Exp $	*/
/*	$NetBSD: ipifuncs.c,v 1.1 2003/04/26 18:39:28 fvdl Exp $ */

/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by RedBack Networks Inc.
 *
 * Author: Bill Sommerfeld
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Interprocessor interrupt handlers.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/memrange.h>
#include <sys/systm.h>

#include <uvm/uvm_extern.h>

#include <machine/intr.h>
#include <machine/atomic.h>
#include <machine/cpuvar.h>
#include <machine/i82093var.h>
#include <machine/i82489reg.h>
#include <machine/i82489var.h>
#include <machine/fpu.h>
#include <machine/mplock.h>

#include <machine/db_machdep.h>

#include "vmm.h"
#if NVMM > 0
#include <machine/vmmvar.h>
#endif /* NVMM > 0 */

void x86_64_ipi_nop(struct cpu_info *);
void x86_64_ipi_halt(struct cpu_info *);

void x86_64_ipi_synch_fpu(struct cpu_info *);
void x86_64_ipi_flush_fpu(struct cpu_info *);

#if NVMM > 0
void x86_64_ipi_start_vmm(struct cpu_info *);
void x86_64_ipi_stop_vmm(struct cpu_info *);
#endif /* NVMM > 0 */

#ifdef HIBERNATE
void x86_64_ipi_halt_realmode(struct cpu_info *);
extern void hibernate_drop_to_real_mode(void);
#endif /* HIBERNATE */

#ifdef MTRR
void x86_64_ipi_reload_mtrr(struct cpu_info *);
#else
#define x86_64_ipi_reload_mtrr NULL
#endif

void (*ipifunc[X86_NIPI])(struct cpu_info *) =
{
	x86_64_ipi_halt,
	x86_64_ipi_nop,
	x86_64_ipi_flush_fpu,
	x86_64_ipi_synch_fpu,
	NULL,
	x86_64_ipi_reload_mtrr,
	x86_setperf_ipi,
#ifdef DDB
	x86_ipi_db,
#else
	NULL,
#endif
#if NVMM > 0
	x86_64_ipi_start_vmm,
	x86_64_ipi_stop_vmm,
#else
	NULL,
	NULL,
#endif
};

void
x86_64_ipi_nop(struct cpu_info *ci)
{
}

void
x86_64_ipi_halt(struct cpu_info *ci)
{
	SCHED_ASSERT_UNLOCKED();
	KASSERT(!__mp_lock_held(&kernel_lock));
	
	fpusave_cpu(ci, 1);
	disable_intr();
	lapic_disable();
	wbinvd();
	ci->ci_flags &= ~CPUF_RUNNING;
	wbinvd();

	for(;;) {
		__asm volatile("hlt");
	}
}

void
x86_64_ipi_flush_fpu(struct cpu_info *ci)
{
	if (ci->ci_fpsaveproc == ci->ci_fpcurproc)
		fpusave_cpu(ci, 0);
}

void
x86_64_ipi_synch_fpu(struct cpu_info *ci)
{
	if (ci->ci_fpsaveproc == ci->ci_fpcurproc)
		fpusave_cpu(ci, 1);
}

#ifdef MTRR
void
x86_64_ipi_reload_mtrr(struct cpu_info *ci)
{
	if (mem_range_softc.mr_op != NULL)
		mem_range_softc.mr_op->reload(&mem_range_softc);
}
#endif

#if NVMM > 0
void
x86_64_ipi_start_vmm(struct cpu_info *ci)
{
	start_vmm_on_cpu(ci);
}

void
x86_64_ipi_stop_vmm(struct cpu_info *ci)
{
	stop_vmm_on_cpu(ci);
}
#endif /* NVMM > 0 */
@


1.27
log
@
vmm(4) kernel code

circulated on hackers@@, no objections. Disabled by default.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.26 2015/03/14 03:38:46 jsg Exp $	*/
d58 1
a58 1
#ifdef VMM
d60 1
a60 1
#endif /* VMM */
d68 1
a68 1
#ifdef VMM
d71 1
a71 1
#endif /* VMM */
d98 1
a98 1
#ifdef VMM
d104 1
a104 1
#endif /* VMM */
d153 1
a153 1
#ifdef VMM
d165 1
a165 1
#endif /* VMM */
@


1.26
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.25 2014/07/11 10:56:52 mlarkin Exp $	*/
d57 5
d68 5
d98 7
d152 14
@


1.25
log
@

Don't hold the kernel lock while halting a processor. Assert if we detect
this happening.

ok kettenis@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.24 2014/07/09 11:37:16 mlarkin Exp $	*/
a54 1
#include <ddb/db_output.h>
@


1.24
log
@
Fixes a hibernate issue wherein we locked the kernel lock while hatching
but then parked ourselves in real mode without completing acquisition of
said lock. Also removes the park routine from i386 since we don't need it
(the APs are already parked at the time we start unpack).

discussed with and ok kettenis@@, also ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.23 2014/03/29 18:09:28 guenther Exp $	*/
d53 1
d100 2
@


1.23
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.22 2014/01/21 09:40:54 kettenis Exp $	*/
a87 5
#ifdef HIBERNATE
	x86_64_ipi_halt_realmode,
#else
	NULL,
#endif /* HIBERNATE */
a132 16

#ifdef HIBERNATE
void
x86_64_ipi_halt_realmode(struct cpu_info *ci)
{
	/* Halt CPUs and park in real mode */

	fpusave_cpu(ci, 1);
	disable_intr();
	wbinvd();
	ci->ci_flags &= ~CPUF_RUNNING;
	wbinvd();

	hibernate_drop_to_real_mode();
}
#endif /* HIBERNATE */
@


1.22
log
@Disable lapic when halting CPUs.  Allegedly this is necessary to make
suspend work on some machines.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.21 2013/12/19 21:30:02 deraadt Exp $	*/
d112 1
a112 1
		__asm __volatile("hlt");
@


1.21
log
@Mtrr stops being a pseudo-device.  We need to probe the cpu type and
initialize the structures when we see the first cpu.  We also need to
initialize each cpu's properly (for PAT) before we setup mtrr on that
cpu.  On i386 (late hatch) we were getting this desperately wrong on
the primary cpu.

After suspend/resume, we also need to do the same work.  re-initialize
PAT before mtrr.  On some laptops apparently PAT was not turned on by the
BIOS, so we ended up with incorrect setup for the primary cpu.  Oops.

This makes mplayer on the x201 (and similar) machines work without weird
pauses after a suspend/resume.  Many other things are likely fixed.
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.20 2013/10/18 15:09:22 mlarkin Exp $	*/
d106 1
@


1.20
log
@

Remove an incorrect assert used in the real mode parking code for
unhibernate.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.19 2013/06/01 22:22:13 mlarkin Exp $	*/
a38 2
#include "mtrr.h"

d68 1
a68 1
#if NMTRR > 0
d129 1
a129 1
#if NMTRR > 0
@


1.19
log
@

Introduce a new amd64 IPI, x86_ipi_halt_realmode to park CPUS into real
mode and halt them. Needed for hibernate.

ok deraadt@@ kettenis@@ "there's no risk there"
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.18 2013/03/20 21:23:05 kettenis Exp $	*/
a145 1
	SCHED_ASSERT_UNLOCKED();
@


1.18
log
@Previous commit to acpi_machdep.c broke suspend because the IPI to save the
FPU state needs a little bit more setup.  Fix things properly this time by
simplifying matters and saving the FPU state from the IPI that halts the
CPU.  With help from deraadt@@ and mlarkin@@.

ok deraadt@@, mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.17 2012/12/05 23:20:10 deraadt Exp $	*/
d65 5
d90 5
d139 17
@


1.17
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.16 2011/03/18 03:10:47 guenther Exp $	*/
d96 1
@


1.16
log
@Old-style MTRRs were never used on amd64, so remove the remaining traces
of them, as well as some other unused proc md_flags bits: MDP_COMPAT and
MDP_SYSCALL.

ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.15 2010/11/13 04:16:42 guenther Exp $	*/
a33 2

#include <sys/cdefs.h>			/* RCS ID & Copyright macro defns */
@


1.15
log
@Switch from TSS-per-process to TSS-per-CPU, placing the TSS right
next to the cpu's GDT, also making the double-fault stack per-CPU,
leaving it at the top of the page of the CPU's idle process.  Inline
pmap_activate() and pmap_deactivate() into the asm cpu_switchto
routine, adding a check for the new pmap already being marked as
active on the CPU.  Garbage collect the hasn't-been-used-in-years
GDT update IPI.

Tested by many; ok mikeb@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.14 2010/10/02 23:14:32 deraadt Exp $	*/
a55 1
#include <machine/mtrr.h>
@


1.14
log
@Ensure the caches are wbinvd'd before we say that the cpu is not running
anymore.
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.13 2010/07/21 14:08:09 kettenis Exp $	*/
a56 1
#include <machine/gdt.h>
d82 1
a82 1
	gdt_reload_cpu,
a87 1
	x86_setperf_ipi,
@


1.13
log
@Make sure that the FPU IPIs shoot down the right FPU context and not the FPU
context of some random process that happened to be switched onto the FPU
after the decision was made to send the IPI.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.12 2010/06/26 15:56:40 mlarkin Exp $	*/
d102 1
@


1.12
log
@

Don't try to halt an AP if holding sched_lock since that causes hangs
on resume. Fail early if this is detected, so that we have a chance to
catch it.

ok kettenis@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.11 2010/04/07 06:33:06 kettenis Exp $	*/
d113 2
a114 1
	fpusave_cpu(ci, 0);
d120 2
a121 1
	fpusave_cpu(ci, 1);
@


1.11
log
@Make suspend/resume work on MP machines (running an MP kernel).  Joint work
from mlarkin@@ and me, with some amd64 fixes thrown in by deraadt@@

ok marco@@, deraadt@@, pirofti@@, mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.10 2009/11/29 17:11:30 kettenis Exp $	*/
d100 1
@


1.10
log
@Reload mtrr state on all CPUs after updates.  Seems to speed up X on MP
systems, at least with Intel graphics.

ok marco@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.9 2008/06/26 05:42:09 ray Exp $	*/
d102 1
@


1.9
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.8 2008/04/13 16:11:28 kettenis Exp $	*/
d41 2
d45 1
d63 1
d69 2
a70 4
void x86_64_ipi_nop(struct cpu_info *);

#ifdef MTRR
void x86_64_reload_mtrr(struct cpu_info *);
d72 1
a72 1
#define x86_64_reload_mtrr NULL
d82 1
a82 1
	x86_64_reload_mtrr,
d120 1
a120 7
#ifdef MTRR

/*
 * mtrr_reload_cpu() is a macro in mtrr.h which picks the appropriate
 * function to use..
 */

d122 1
a122 1
x86_64_reload_mtrr(struct cpu_info *ci)
d124 2
a125 2
	if (mtrr_funcs != NULL)
		mtrr_reload_cpu(ci);
@


1.8
log
@lear CPUF_RUNNING when halting a CPU.  Fixes problems with powering dowm
MP amd64 systems for quite a few people.

ok deraadt@@, krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.7 2007/05/25 16:22:11 art Exp $	*/
a20 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.7
log
@Change the old slow and complicated TLB shootdown code to new, fast and
simple. This is basically the same code as on i386 and basically the same
performance improvements.

This change also includes code to delay the freeing of ptps until they
have been properly shot.

in snaps for a week, no problems reported.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.6 2007/05/06 03:37:08 gwk Exp $	*/
d106 1
@


1.6
log
@Add the mp setperf mechanism to AMD64, like its i386 counterpart it allows
all cpus in a system supporting frequency and voltage scaling to be scaled
by the same amount corresponding to the user (or apmd on their behalf)
performance level.

This diff also teaches amd64 about acpi_hasprocfvs (ACPI has processor
frequency and voltage scaling).

It also moves initilization of the underlying setperf mechanism such
as powernow to mainbus from the cpu indentification and initilization
code inspired by similar changes dim@@ made to i386 durring h2k6. This
is necessary to implement the AMD recommended method for retreiving
p_state data from the ACPI _PSS object (a diff comming soon). It will
also simplify the potential addition of enhanced speedstep as found
on newer intel processors with EMT64 capable of running OpenBSD/amd64.

MP setperf functionality verifed by myself and Johan M:son Lindman <tybolt
AT solace DOT miun DOT se> on opteron 265 and 270 systems respectively.
General testing done by many others thanks!

ok tedu, dim
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.5 2007/03/23 16:44:38 gwk Exp $	*/
d86 1
a86 1
	pmap_do_tlb_shootdown,
@


1.5
log
@Fix compiliation of MULTIPROCESSOR without DDB, being defined.
From: Mike Belopuhov <mkb AT crypt.org DOT ru>.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.4 2007/02/01 20:39:42 art Exp $	*/
d94 1
@


1.4
log
@Rename the MICROSET IPI we inherited from NetBSD to simply NOP since
it doesn't do anything (other than poking into the kernel a processing
ASTs).
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.3 2004/08/04 01:16:36 art Exp $	*/
d89 1
d91 3
@


1.3
log
@There are so many reasons why a printf in an ipi is a very bad idea.
Especially since it doesn't add anything but spam during reboot.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.2 2004/06/25 17:27:01 andreas Exp $	*/
a82 3
#if 0
	cc_microset,
#else
a83 1
#endif
@


1.2
log
@'machine cpuinfo' and 'machine ddbcpu' in ddb for amd64
@
text
@d1 1
a1 1
/*	$OpenBSD: ipifuncs.c,v 1.1 2004/06/25 11:03:27 art Exp $	*/
a105 1
	printf("%s: shutting down\n", ci->ci_dev->dv_xname);
@


1.1
log
@SMP support. Big parts from NetBSD, but with some really serious debugging
done by me, niklas and others. Especially wrt. NXE support.

Still needs some polishing, especially in dmesg messages, but we're now
building kernel faster than ever.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 1
d93 1
@

