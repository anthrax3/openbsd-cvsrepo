head	1.14;
access;
symbols
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.12
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.10
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.8
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.6
	OPENBSD_5_0:1.7.0.4
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.10
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@# @;


1.14
date	2016.12.19.20.03.15;	author kettenis;	state Exp;
branches;
next	1.13;
commitid	FPreFlAsNawLnJLw;

1.13
date	2016.05.16.01.54.15;	author mlarkin;	state Exp;
branches;
next	1.12;
commitid	DynAhAQyGsvgwtBe;

1.12
date	2015.04.19.19.45.21;	author sf;	state Exp;
branches;
next	1.11;
commitid	QHmlY8tYf1BGbIw1;

1.11
date	2014.12.08.07.49.17;	author mlarkin;	state Exp;
branches;
next	1.10;
commitid	0SICs8k6UHBhNEQC;

1.10
date	2014.11.22.18.31.46;	author mlarkin;	state Exp;
branches;
next	1.9;
commitid	OZhulzwbZ5ey9UWV;

1.9
date	2014.11.21.09.08.20;	author mlarkin;	state Exp;
branches;
next	1.8;
commitid	GnzVeEErLt3JHBWR;

1.8
date	2014.01.05.20.23.56;	author mlarkin;	state Exp;
branches;
next	1.7;

1.7
date	2010.11.13.04.16.42;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.01.19.47.59;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.26.05.42.09;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2007.10.10.15.53.51;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2005.07.26.08.38.29;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.19.15.09.05;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.25.11.03.27;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Generating mixed 16-bit/32-bit/64-bit code with clang's integrated
assembler is a bit tricky.  It supports the .code16, .code32 and
.code64 directives.  But it doesn't know about the data16/data32 and
addr16/addr32 instruction prefixes.  Instead it tries to determine
those from the instruction opcode.  It mostly succeeds, but there are
a couple of corner cases where clang will generate the "addr32" form
where gas generates the "addr16" form in .code16 segments.  That
should be no problem (and just waste a couple of bytes), but it makes
comparing the generated code a bit difficult.

Allow the trampoline code to be compiled with both.  For clang #define
away the addr32 prefix and avoid using the data32 prefix by using a
mnemonic that explicitly encodes the size of the operand.  Add a few
addr32 prefixes in .code16 blocks to reduce the differences between
code generated by clang and gas.

ok patrick@@, deraadt@@, mlarkin@@
@
text
@/*	$OpenBSD: mptramp.S,v 1.13 2016/05/16 01:54:15 mlarkin Exp $	*/
/*	$NetBSD: mptramp.S,v 1.1 2003/04/26 18:39:30 fvdl Exp $	*/

/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by RedBack Networks Inc.
 *
 * Author: Bill Sommerfeld
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
	
/*
 * Copyright (c) 1999 Stefan Grefen
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the NetBSD 
 *      Foundation, Inc. and its contributors.  
 * 4. Neither the name of The NetBSD Foundation nor the names of its 
 *    contributors may be used to endorse or promote products derived  
 *    from this software without specific prior written permission.   
 *
 * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR AND CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
/*
 * MP startup ...
 * the stuff from cpu_spinup_trampoline to mp_startup 
 * is copied into the first 640 KB
 *
 * We startup the processors now when the kthreads become ready.
 * The steps are:
 *        1)   Get the processors running kernel-code from a special
 *                  page-table and stack page, do chip identification.
 *        2)   halt the processors waiting for them to be enabled
 *              by a idle-thread 
 */
		
#include "assym.h"
#include <machine/param.h>
#include <machine/asm.h>
#include <machine/specialreg.h>
#include <machine/segments.h>
#include <machine/mpbiosvar.h>
#include <machine/i82489reg.h>

#ifdef __clang__
#define addr32
#endif

#define _RELOC(x)       ((x) - KERNBASE)
#define RELOC(x)        _RELOC(_C_LABEL(x))

#define _TRMP_LABEL(a)  a = . - _C_LABEL(cpu_spinup_trampoline) + MP_TRAMPOLINE
#define _TRMP_OFFSET(a)  a = . - _C_LABEL(cpu_spinup_trampoline)

#define _TRMP_DATA_LABEL(a)  a = . - _C_LABEL(mp_tramp_data_start) + \
				MP_TRAMP_DATA
#define _TRMP_DATA_OFFSET(a)  a = . - _C_LABEL(mp_tramp_data_start)

	.global _C_LABEL(cpu_spinup_trampoline)
	.global _C_LABEL(cpu_spinup_trampoline_end)
	.global _C_LABEL(cpu_hatch)
	.global _C_LABEL(local_apic)
	.global _C_LABEL(mp_pdirpa)
	.global _C_LABEL(mp_tramp_data_start)
	.global _C_LABEL(mp_tramp_data_end)

	.global	gdt64

	.text
	.align 4, 0xcc
	.code16
_C_LABEL(cpu_spinup_trampoline):
	cli
	movw    $(MP_TRAMP_DATA >> 4), %ax
	movw	%ax, %ds
	movw	%cs, %ax
	movw    %ax, %es
	movw    %ax, %ss
	addr32 lgdtl (mptramp_gdt32_desc)   # load flat descriptor table
	movl    %cr0, %eax       # get cr0
	orl     $0x1, %eax      # enable protected mode
	movl    %eax, %cr0      # doit
	ljmpl	$0x8, $mp_startup

_TRMP_LABEL(mp_startup)
	.code32

	movl    $0x10, %eax     # data segment
	movw    %ax, %ds
	movw    %ax, %ss
	movw    %ax, %es
	movw    %ax, %fs
	movw    %ax, %gs

	movl    $(MP_TRAMP_DATA + NBPG - 16),%esp	# bootstrap stack end,
							# with scratch space..

	/* First, reset the PSL. */
	pushl   $PSL_MBO
	popfl

	movl	%cr4,%eax
	orl	$(CR4_DEFAULT),%eax
	movl	%eax,%cr4

	movl	$MSR_EFER,%ecx
	rdmsr
	movl	%edx, %edi		# %edx is needed by wrmsr below

	# Check if we need to enable NXE
	movl	$0x80000001, %eax
	cpuid
	andl	$CPUID_NXE, %edx
	xorl	%eax,%eax
	testl	%edx, %edx
	jz	1f
	orl	$EFER_NXE, %eax
1:
	orl	$(EFER_LME|EFER_SCE), %eax

	movl	%edi, %edx		# Restore saved %edx
	movl	$MSR_EFER,%ecx
	wrmsr

	movl	$mp_tramp_pdirpa, %ecx
	movl	(%ecx), %ecx
        movl    %ecx,%cr3               # load ptd addr into mmu

	movl    $GSEL(GDATA_SEL, SEL_KPL),%eax 	#switch to new segment
	movl    %eax,%ds
	movl    %eax,%es
	movl    %eax,%ss

	movl	$mptramp_gdt64_desc,%eax
	lgdt	(%eax)

	movl	$mptramp_jmp64,%eax

	movl    %cr0,%ecx               # get control word
	orl     $(CR0_PE|CR0_PG|CR0_NE|CR0_TS|CR0_MP|CR0_WP),%ecx
	movl	%ecx, %cr0

	ljmp	*(%eax)

_TRMP_LABEL(mptramp_longmode)
	.code64
	movabsq	$_C_LABEL(cpu_spinup_trampoline_end),%rax
	jmp	*%rax

	
_C_LABEL(cpu_spinup_trampoline_end):	#end of code copied to MP_TRAMPOLINE
	.globl  _C_LABEL(x2apic_enabled)
	movl	x2apic_enabled,%eax
	testl	%eax,%eax
	jz	1f

	mov     $MSR_APICBASE,%ecx
	mov     $0,%edx
	rdmsr
	orl     $APICBASE_ENABLE_X2APIC,%eax
	wrmsr
	mov     $MSR_X2APIC_ID,%ecx
	rdmsr
	andl    $X2APIC_ID_MASK,%eax
	jmp	2f
1:
	movl	_C_LABEL(local_apic)+LAPIC_ID,%eax
	shrl	$LAPIC_ID_SHIFT,%eax
2:
	xorq	%rcx,%rcx
3:
	movq	_C_LABEL(cpu_info)(,%rcx,8),%rdi
	incq	%rcx
	movl	CPU_INFO_APICID(%rdi),%edx
	cmpl	%eax,%edx
	jne	3b

	movq	CPU_INFO_IDLE_PCB(%rdi),%rsi

	movq	PCB_RSP(%rsi),%rsp
	movq	PCB_RBP(%rsi),%rbp

	movq	CPU_INFO_GDT(%rdi),%rax
	movw	$(GDT_SIZE-1),-10(%rsp)
	movq	%rax,-8(%rsp)
	lgdt	-10(%rsp)

	/* Switch address space. */
	movq	PCB_CR3(%rsi),%rax
	movq	%rax,%cr3
	movl    PCB_CR0(%rsi),%eax
	movq    %rax,%cr0
	call	_C_LABEL(cpu_hatch)
	/* NOTREACHED */

	.section .rodata
_C_LABEL(mp_tramp_data_start):
_TRMP_DATA_LABEL(mptramp_jmp64)
	.long   mptramp_longmode
	.word   GSEL(GCODE_SEL, SEL_KPL)

	.global mp_pdirpa
_TRMP_DATA_LABEL(mp_pdirpa)
_TRMP_DATA_LABEL(mp_tramp_pdirpa)
	.long 0


_TRMP_DATA_LABEL(mptramp_gdt32)
	.quad 0x0000000000000000
	.quad 0x00cf9f000000ffff
	.quad 0x00cf93000000ffff
_TRMP_DATA_OFFSET(mptramp_gdt32_desc)
	.word 0x17
	.long mptramp_gdt32

_TRMP_DATA_LABEL(mptramp_gdt64)
	.quad 0x0000000000000000
	.quad 0x00af9a000000ffff
	.quad 0x00cf92000000ffff
_TRMP_DATA_LABEL(mptramp_gdt64_desc)
	.word 0x17
	.long mptramp_gdt64
_C_LABEL(mp_tramp_data_end):
@


1.13
log
@
default to int3 padding if we ever introduce ENTRY/NENTRY pads here

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mptramp.S,v 1.12 2015/04/19 19:45:21 sf Exp $	*/
d87 4
d121 1
a121 1
	data32 addr32 lgdt (mptramp_gdt32_desc)   # load flat descriptor table
@


1.12
log
@Add support for x2apic mode

This is currently only enabled on hypervisors because on real hardware, it
requires interrupt remapping which we don't support yet. But on virtualization
it reduces the number of vmexits required per IPI from 4 to 1, causing a
significant speed-up for MP guests.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mptramp.S,v 1.11 2014/12/08 07:49:17 mlarkin Exp $	*/
d108 1
a108 1
	.align 4,0x0
@


1.11
log
@
Move the data part of the mp trampoline to .rodata (initially). The kernel
moves a copy of this to the RW tramp data page during bootup.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mptramp.S,v 1.10 2014/11/22 18:31:46 mlarkin Exp $	*/
d190 15
d207 1
d209 1
a209 1
1:
d214 1
a214 1
	jne	1b
@


1.10
log
@
Split the MP trampoline into two pages, one for code and one for data/stack
and then protect the code page as RX and the data/stack page as RW (NX).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mptramp.S,v 1.9 2014/11/21 09:08:20 mlarkin Exp $	*/
d218 1
a218 1

@


1.9
log
@
remove unused #defines and labels.

ok deraadt, guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: mptramp.S,v 1.8 2014/01/05 20:23:56 mlarkin Exp $	*/
d93 4
d102 2
d112 2
a114 1
	movw    %ax, %ds
d132 3
a134 3
	
	movl    $ (MP_TRAMPOLINE+NBPG-16),%esp       # bootstrap stack end,
						     # with scratch space..
d174 1
a182 25
_TRMP_LABEL(mptramp_jmp64)
	.long   mptramp_longmode
	.word   GSEL(GCODE_SEL, SEL_KPL)

_TRMP_LABEL(mptramp_gdt32)
	.quad 0x0000000000000000
	.quad 0x00cf9f000000ffff
	.quad 0x00cf93000000ffff
_TRMP_OFFSET(mptramp_gdt32_desc)
	.word 0x17
	.long mptramp_gdt32

_TRMP_LABEL(mptramp_gdt64)
	.quad 0x0000000000000000
	.quad 0x00af9a000000ffff
	.quad 0x00cf92000000ffff
_TRMP_LABEL(mptramp_gdt64_desc)
	.word 0x17
	.long mptramp_gdt64

	.global mp_pdirpa
_TRMP_LABEL(mp_pdirpa)
_TRMP_LABEL(mp_tramp_pdirpa)
	.long 0

a186 1
	
d217 29
@


1.8
log
@

Don't use the first 64KB for anything, including tramps. Move tramps and
hibernate goo up after 64KB to avoid posible corruption by buggy BIOS SMM
code. Diff also ensures the first 64KB doesn't get handed to UVM either.

ok deraadt@@, tested by many with no regressions reported
@
text
@d1 1
a1 1
/*	$OpenBSD: mptramp.S,v 1.7 2010/11/13 04:16:42 guenther Exp $	*/
a92 1
	.globl	_C_LABEL(mpidle)
a99 2

#define HALT	1: jmp 1b
@


1.7
log
@Switch from TSS-per-process to TSS-per-CPU, placing the TSS right
next to the cpu's GDT, also making the double-fault stack per-CPU,
leaving it at the top of the page of the CPU's idle process.  Inline
pmap_activate() and pmap_deactivate() into the asm cpu_switchto
routine, adding a check for the new pmap already being marked as
active on the CPU.  Garbage collect the hasn't-been-used-in-years
GDT update IPI.

Tested by many; ok mikeb@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mptramp.S,v 1.6 2010/04/01 19:47:59 kettenis Exp $	*/
d91 1
d109 1
a109 1
	xorw    %ax,%ax
d186 1
a186 1
_TRMP_LABEL(mptramp_gdt32_desc)
@


1.6
log
@Don't index cpu_info by apic id, but by device unit number instead.  Recent
Intel CPUs come up with apic id's >= 32, even on systems with less than 32
logical CPUs.

ok krw@@, marco@@; tested by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mptramp.S,v 1.5 2008/06/26 05:42:09 ray Exp $	*/
a85 1
#include <machine/gdt.h>
d226 1
a226 1
	movw	$(MAXGDTSIZ-1),-10(%rsp)
@


1.5
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mptramp.S,v 1.4 2007/10/10 15:53:51 art Exp $	*/
d211 4
a214 2
	movl	_C_LABEL(local_apic)+LAPIC_ID,%ecx
	shrl	$LAPIC_ID_SHIFT,%ecx
d216 4
@


1.4
log
@Make context switching much more MI:
 - Move the functionality of choosing a process from cpu_switch into
   a much simpler function: cpu_switchto. Instead of having the locore
   code walk the run queues, let the MI code choose the process we
   want to run and only implement the context switching itself in MD
   code.
 - Let MD context switching run without worrying about spls or locks.
 - Instead of having the idle loop implemented with special contexts
   in MD code, implement one idle proc for each cpu. make the idle
   loop MI with MD hooks.
 - Change the proc lists from the old style vax queues to TAILQs.
 - Change the sleep queue from vax queues to TAILQs. This makes
   wakeup() go from O(n^2) to O(n)

there will be some MD fallout, but it will be fixed shortly.
There's also a few cleanups to be done after this.

deraadt@@, kettenis@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: mptramp.S,v 1.3 2005/07/26 08:38:29 art Exp $	*/
a20 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.3
log
@Instead of juggling around with cr4 and enabling parts of it sometimes,
other parts later, etc. Just set it to the same default value everywhere.
We won't survive without PSE and tt's not like someone will suddenly make
an amd64 that doesn't support PGE.

This will allow us to make the bootstrap process slightly more sane.
@
text
@d1 1
a1 1
/*	$OpenBSD: mptramp.S,v 1.2 2004/07/19 15:09:05 art Exp $	*/
d238 1
a238 2
	xorq	%r13,%r13
	jmp	_C_LABEL(mpidle)
@


1.2
log
@Implement __HAVE_PMAP_DIRECT on amd64 using large pages. At this moment
it's limited to 512GB (one L4 page table entry) physical memory. Only
used carefully at this moment, but more improvements are in the pipeline.

tested by many, deraadt@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: mptramp.S,v 1.1 2004/06/25 11:03:27 art Exp $	*/
d144 1
a144 1
	orl	$(CR4_PAE|CR4_OSFXSR|CR4_OSXMMEXCPT|CR4_PGE|CR4_PSE),%eax
@


1.1
log
@SMP support. Big parts from NetBSD, but with some really serious debugging
done by me, niklas and others. Especially wrt. NXE support.

Still needs some polishing, especially in dmesg messages, but we're now
building kernel faster than ever.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d144 1
a144 1
	orl	$(CR4_PAE|CR4_OSFXSR|CR4_OSXMMEXCPT),%eax
@

