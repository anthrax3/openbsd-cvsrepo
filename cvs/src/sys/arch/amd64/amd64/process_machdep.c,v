head	1.14;
access;
symbols
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.6
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.11.0.10
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.14
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.12
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.8
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.6
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.4
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.7.0.2
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.6.0.6
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.8
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.4
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.16
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.14
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	SMP:1.4.0.2;
locks; strict;
comment	@ * @;


1.14
date	2015.06.28.18.54.54;	author guenther;	state Exp;
branches;
next	1.13;
commitid	9qSlzkscc1lVVnYi;

1.13
date	2015.05.18.19.59.27;	author guenther;	state Exp;
branches;
next	1.12;
commitid	MLFvGCnCMKMdmAtY;

1.12
date	2015.03.14.03.38.46;	author jsg;	state Exp;
branches;
next	1.11;
commitid	p4LJxGKbi0BU2cG6;

1.11
date	2011.12.17.14.07.49;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.20.21.44.08;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2010.09.29.15.11.31;	author joshe;	state Exp;
branches;
next	1.8;

1.8
date	2010.09.29.13.46.38;	author joshe;	state Exp;
branches;
next	1.7;

1.7
date	2010.07.23.14.56.31;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.26.05.42.09;	author ray;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.10.18.56.59;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.01.15.00.42;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.29.13.21.10;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.29.12.43.35;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.01.39.39;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Force the return to userspace from execve to go through iretq to get all
registers.  This lets us kill the special handling of pid 1 in fork and
merge {proc,child}_trampoline(). Do the same if ptrace(PT_SETREGS) is used
to modify registers.

ok mlarkin@@ kettenis@@
@
text
@/*	$OpenBSD: process_machdep.c,v 1.13 2015/05/18 19:59:27 guenther Exp $	*/
/*	$NetBSD: process_machdep.c,v 1.1 2003/04/26 18:39:31 fvdl Exp $	*/

/*-
 * Copyright (c) 1998, 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Charles M. Hannum.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This file may seem a bit stylized, but that so that it's easier to port.
 * Functions to be implemented here are:
 *
 * process_read_regs(proc, regs)
 *	Get the current user-visible register set from the process
 *	and copy it into the regs structure (<machine/reg.h>).
 *	The process is stopped at the time read_regs is called.
 *
 * process_write_regs(proc, regs)
 *	Update the current register set from the passed in regs
 *	structure.  Take care to avoid clobbering special CPU
 *	registers or privileged bits in the PSL.
 *	The process is stopped at the time write_regs is called.
 *
 * process_sstep(proc)
 *	Arrange for the process to trap after executing a single instruction.
 *
 * process_set_pc(proc)
 *	Set the process's program counter.
 */


#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/user.h>
#include <sys/vnode.h>
#include <sys/ptrace.h>

#include <uvm/uvm_extern.h>

#include <machine/psl.h>
#include <machine/reg.h>
#include <machine/fpu.h>

static __inline struct trapframe *process_frame(struct proc *);
static __inline struct fxsave64 *process_fpframe(struct proc *);
#if 0
static __inline int verr_gdt(struct pmap *, int sel);
static __inline int verr_ldt(struct pmap *, int sel);
#endif

static __inline struct trapframe *
process_frame(struct proc *p)
{

	return (p->p_md.md_regs);
}

static __inline struct fxsave64 *
process_fpframe(struct proc *p)
{

	return (&p->p_addr->u_pcb.pcb_savefpu.fp_fxsave);
}

int
process_read_regs(struct proc *p, struct reg *regs)
{
	struct trapframe *tf = process_frame(p);

        regs->r_rdi = tf->tf_rdi;
        regs->r_rsi = tf->tf_rsi;
        regs->r_rdx = tf->tf_rdx;
        regs->r_rcx = tf->tf_rcx;
        regs->r_r8  = tf->tf_r8;
        regs->r_r9  = tf->tf_r9;
        regs->r_r10 = tf->tf_r10;
        regs->r_r11 = tf->tf_r11;
        regs->r_r12 = tf->tf_r12;
        regs->r_r13 = tf->tf_r13;
        regs->r_r14 = tf->tf_r14;
        regs->r_r15 = tf->tf_r15;
        regs->r_rbp = tf->tf_rbp;
        regs->r_rbx = tf->tf_rbx;
        regs->r_rax = tf->tf_rax;
        regs->r_rsp = tf->tf_rsp;
        regs->r_rip = tf->tf_rip;
        regs->r_rflags = tf->tf_rflags;
        regs->r_cs  = tf->tf_cs;
        regs->r_ss  = tf->tf_ss;
        regs->r_ds  = GSEL(GUDATA_SEL, SEL_UPL);
        regs->r_es  = GSEL(GUDATA_SEL, SEL_UPL);
        regs->r_fs  = GSEL(GUDATA_SEL, SEL_UPL);
        regs->r_gs  = GSEL(GUDATA_SEL, SEL_UPL);

	return (0);
}

int
process_read_fpregs(struct proc *p, struct fpreg *regs)
{
	struct fxsave64 *frame = process_fpframe(p);

	if (p->p_md.md_flags & MDP_USEDFPU) {
		fpusave_proc(p, 1);
	} else {
		/* Fake a FNINIT. */
		memset(frame, 0, sizeof(*regs));
		frame->fx_fcw = __INITIAL_NPXCW__;
		frame->fx_fsw = 0x0000;
		frame->fx_ftw = 0x00;
		frame->fx_mxcsr = __INITIAL_MXCSR__;
		frame->fx_mxcsr_mask = fpu_mxcsr_mask;
		p->p_md.md_flags |= MDP_USEDFPU;
	}

	memcpy(&regs->fxstate, frame, sizeof(*regs));
	return (0);
}

#ifdef	PTRACE

int
process_write_regs(struct proc *p, struct reg *regs)
{
	struct trapframe *tf = process_frame(p);

	/*
	 * Check for security violations.
	 */
	if (check_context(regs, tf))
		return (EINVAL);

        tf->tf_rdi = regs->r_rdi;
        tf->tf_rsi = regs->r_rsi;
        tf->tf_rdx = regs->r_rdx;
        tf->tf_rcx = regs->r_rcx;
        tf->tf_r8  = regs->r_r8;
        tf->tf_r9  = regs->r_r9;
        tf->tf_r10 = regs->r_r10;
        tf->tf_r11 = regs->r_r11;
        tf->tf_r12 = regs->r_r12;
        tf->tf_r13 = regs->r_r13;
        tf->tf_r14 = regs->r_r14;
        tf->tf_r15 = regs->r_r15;
        tf->tf_rbp = regs->r_rbp;
        tf->tf_rbx = regs->r_rbx;
        tf->tf_rax = regs->r_rax;
        tf->tf_rsp = regs->r_rsp;
        tf->tf_rip = regs->r_rip;
        tf->tf_rflags = regs->r_rflags;
        tf->tf_cs  = regs->r_cs;
        tf->tf_ss  = regs->r_ss;

	/* force target to return via iretq so all registers are updated */
	p->p_md.md_flags |= MDP_IRET;

	return (0);
}

int
process_write_fpregs(struct proc *p, struct fpreg *regs)
{
	struct fxsave64 *frame = process_fpframe(p);

	if (p->p_md.md_flags & MDP_USEDFPU) {
		fpusave_proc(p, 0);
	} else {
		p->p_md.md_flags |= MDP_USEDFPU;
	}

	memcpy(frame, &regs->fxstate, sizeof(*regs));
	frame->fx_mxcsr &= fpu_mxcsr_mask;
	return (0);
}

int
process_sstep(struct proc *p, int sstep)
{
	struct trapframe *tf = process_frame(p);

	if (sstep)
		tf->tf_rflags |= PSL_T;
	else
		tf->tf_rflags &= ~PSL_T;
	
	return (0);
}

int
process_set_pc(struct proc *p, caddr_t addr)
{
	struct trapframe *tf = process_frame(p);

	if ((u_int64_t)addr > VM_MAXUSER_ADDRESS)
		return EINVAL;
	tf->tf_rip = (u_int64_t)addr;

	return (0);
}

#endif	/* PTRACE */
@


1.13
log
@Do lazy update/reset of the FS.base and %[def]s segment registers: reseting
segment registers in cpu_switchto if the old thread had made it to userspace
and restoring FS.base only on first return to userspace since context switch.

ok mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.12 2015/03/14 03:38:46 jsg Exp $	*/
d180 3
@


1.12
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.11 2011/12/17 14:07:49 kettenis Exp $	*/
d117 4
a120 4
        regs->r_ds  = tf->tf_ds;
        regs->r_es  = tf->tf_es;
        regs->r_fs  = tf->tf_fs;
        regs->r_gs  = tf->tf_gs;
a179 4
        tf->tf_ds  = regs->r_ds;
        tf->tf_es  = regs->r_es;
        tf->tf_fs  = regs->r_fs;
        tf->tf_gs  = regs->r_gs;
@


1.11
log
@Initialize the (abridged) tag word correctly.

ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.10 2011/03/20 21:44:08 guenther Exp $	*/
a68 1
#include <machine/segments.h>
@


1.10
log
@When reading MXCSR from userland sigcontext or a ptrace request,
mask out invalid bits to prevent a protect fault.

Original diff by joshe@@; further feedback and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.9 2010/09/29 15:11:31 joshe Exp $	*/
d138 1
a138 1
		frame->fx_ftw = 0xff;
@


1.9
log
@Back out previous, it appears to be broken.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.7 2010/07/23 14:56:31 kettenis Exp $	*/
d140 1
a140 1
		frame->fx_mxcsr_mask = __INITIAL_MXCSR_MASK__;
d201 1
@


1.8
log
@When reading MXCSR from userland sigcontext, mask out invalid bits.

This prevents a protection fault if a userland signal handler
scribbles all over it's struct sigcontext

Help from and ok guenther@@ kettenis@@
@
text
@d140 1
a140 1
		frame->fx_mxcsr_mask = fpu_mxcsr_mask;
a200 1
	frame->fx_mxcsr &= fpu_mxcsr_mask;
@


1.7
log
@Don't leak the contents of the FPU and SSE registers between processes.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.6 2008/06/26 05:42:09 ray Exp $	*/
d140 1
a140 1
		frame->fx_mxcsr_mask = __INITIAL_MXCSR_MASK__;
d201 1
@


1.6
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.5 2004/07/10 18:56:59 kettenis Exp $	*/
d134 1
a134 11
		u_int16_t cw;
		u_int32_t mxcsr, mxcsr_mask;

		/*
		 * Fake a FNINIT.
		 * The initial control word was already set by setregs(), so
		 * save it temporarily.
		 */
		cw = frame->fx_fcw;
		mxcsr = frame->fx_mxcsr;
		mxcsr_mask = frame->fx_mxcsr_mask;
d136 1
a136 1
		frame->fx_fcw = cw;
d139 2
a140 2
		frame->fx_mxcsr = mxcsr;
		frame->fx_mxcsr_mask = mxcsr_mask;
@


1.5
log
@Keep mxcsr and mxcsr_mask across the fake init in process_read_fpregs.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.4 2004/02/01 15:00:42 miod Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.4
log
@Do not compile ptrace-related functions unless option PTRACE.
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.3 2004/01/29 13:21:10 mickey Exp $	*/
d142 1
d150 2
d156 2
@


1.3
log
@check struct reg for evil; from netbsd
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.2 2004/01/29 12:43:35 mickey Exp $	*/
d160 2
d240 2
@


1.2
log
@struct regs for real
@
text
@d1 1
a1 1
/*	$OpenBSD: process_machdep.c,v 1.1 2004/01/28 01:39:39 mickey Exp $	*/
d168 1
a168 2
	if (((regs->r_rflags ^ tf->tf_rflags) & PSL_USERSTATIC) != 0 ||
	    !USERMODE(regs->r_cs, regs->r_rflags))
@


1.1
log
@an amd64 arch support.
hacked by art@@ from netbsd sources and then later debugged
by me into the shape where it can host itself.
no bootloader yet as needs redoing from the
recent advanced i386 sources (anyone? ;)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d105 24
a128 1
	memcpy(regs, tf, sizeof (*regs));
d161 1
a161 1
process_write_regs(struct proc *p, struct reg *regp)
a163 1
	long *regs = regp->regs;
d168 2
a169 2
	if (((regs[_REG_RFL] ^ tf->tf_rflags) & PSL_USERSTATIC) != 0 ||
	    !USERMODE(regs[_REG_CS], regs[_REG_RFL]))
d172 24
a195 1
	memcpy(tf, regs, sizeof (*tf));
@

