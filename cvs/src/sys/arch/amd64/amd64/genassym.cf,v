head	1.31;
access;
symbols
	OPENBSD_6_2:1.31.0.8
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.31.0.10
	OPENBSD_6_1_BASE:1.31
	OPENBSD_6_0:1.31.0.6
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.31.0.2
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.31.0.4
	OPENBSD_5_8_BASE:1.31
	OPENBSD_5_7:1.30.0.2
	OPENBSD_5_7_BASE:1.30
	OPENBSD_5_6:1.30.0.4
	OPENBSD_5_6_BASE:1.30
	OPENBSD_5_5:1.29.0.10
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.29.0.6
	OPENBSD_5_4_BASE:1.29
	OPENBSD_5_3:1.29.0.4
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.2
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.4
	OPENBSD_5_0:1.28.0.2
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.25.0.2
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.22.0.2
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.21.0.4
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.15.0.6
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.4
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.2
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.9.0.8
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@# @;


1.31
date	2015.05.18.19.59.27;	author guenther;	state Exp;
branches;
next	1.30;
commitid	MLFvGCnCMKMdmAtY;

1.30
date	2014.04.01.09.05.03;	author mpi;	state Exp;
branches;
next	1.29;

1.29
date	2012.04.17.16.02.33;	author guenther;	state Exp;
branches;
next	1.28;

1.28
date	2011.04.13.02.49.12;	author guenther;	state Exp;
branches;
next	1.27;

1.27
date	2011.04.10.03.56.38;	author guenther;	state Exp;
branches;
next	1.26;

1.26
date	2011.04.05.21.14.00;	author guenther;	state Exp;
branches;
next	1.25;

1.25
date	2010.11.13.04.16.42;	author guenther;	state Exp;
branches;
next	1.24;

1.24
date	2010.10.26.05.49.10;	author guenther;	state Exp;
branches;
next	1.23;

1.23
date	2010.09.24.13.21.30;	author matthew;	state Exp;
branches;
next	1.22;

1.22
date	2010.04.01.19.47.59;	author kettenis;	state Exp;
branches;
next	1.21;

1.21
date	2009.06.09.02.56.38;	author krw;	state Exp;
branches;
next	1.20;

1.20
date	2009.06.06.23.45.35;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2009.06.05.10.51.44;	author guenther;	state Exp;
branches;
next	1.18;

1.18
date	2009.05.28.09.05.33;	author art;	state Exp;
branches;
next	1.17;

1.17
date	2009.04.27.17.48.21;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2009.04.23.07.42.02;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2007.10.10.15.53.51;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.01.21.01.51;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.27.08.58.31;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.25.16.22.11;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.10.17.59.23;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.05.07.19.10.31;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2005.07.26.08.38.29;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.20.20.17.16;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.28.01.52.24;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2004.06.25.11.03.27;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.22.01.16.50;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.13.21.49.12;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.13.20.20.24;	author sturm;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.07.17.00.12;	author miod;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.01.28.01.39.38;	author mickey;	state Exp;
branches;
next	;

1.2.2.1
date	2004.02.22.22.08.18;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2004.06.05.23.09.24;	author niklas;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2004.06.06.22.04.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Do lazy update/reset of the FS.base and %[def]s segment registers: reseting
segment registers in cpu_switchto if the old thread had made it to userspace
and restoring FS.base only on first return to userspace since context switch.

ok mlarkin@@
@
text
@#	$OpenBSD: genassym.cf,v 1.30 2014/04/01 09:05:03 mpi Exp $
#	Written by Artur Grabowski art@@openbsd.org, Public Domain

include <sys/param.h>
include <sys/proc.h>
include <sys/resourcevar.h>
include <sys/device.h>
include <sys/user.h>

include <uvm/uvm_extern.h>

include <machine/trap.h>
include <machine/pmap.h>
include <machine/pte.h>
include <machine/vmparam.h>
include <machine/intr.h>
include <machine/pic.h>
include <machine/tss.h>
include <machine/i82093var.h>
include <machine/mutex.h>

export	SRUN
export	SONPROC

export	L4_SLOT_KERNBASE
define	L3_SLOT_KERNBASE	pl3_pi(KERNBASE)
define	L2_SLOT_KERNBASE	pl2_pi(KERNBASE)
define	L1_SLOT_KERNBASE	pl1_pi(KERNBASE)

export	VM_MAXUSER_ADDRESS
export	VM_MIN_KERNEL_ADDRESS

struct	proc
member	p_addr
member	p_priority
member	p_stat
member	p_wchan
member	P_MD_REGS	p_md.md_regs
member	P_MD_FLAGS	p_md.md_flags
member	P_MD_ASTPENDING	p_md.md_astpending
member	p_flag
member	p_cpu

export	P_SYSTEM

export	MDP_IRET

struct	uvmexp		V_
member	INTR		intrs

struct	trapframe
member	tf_rdi
member	tf_rsi
member	tf_rdx
member	tf_rcx
member	tf_r8
member	tf_r9
member	tf_r10
member	tf_r11
member	tf_r12
member	tf_r13
member	tf_r14
member	tf_r15
member	tf_rbp
member	tf_rbx
member	tf_rax
member	tf_gs
member	tf_fs
member	tf_es
member	tf_ds
member	tf_trapno
member	tf_err
member	tf_rip
member	tf_cs
member	tf_rflags
member	tf_rsp
member	tf_ss

define  FRAMESIZE               sizeof(struct trapframe)

struct pcb
member	pcb_cr3
member	pcb_rsp
member	pcb_rbp
member	pcb_kstack
member	pcb_fsbase
member	pcb_onfault
member	pcb_fpcpu
member	pcb_pmap
member	pcb_cr0

struct pmap
member	pm_cpus

struct x86_64_tss
member	tss_rsp0

struct	cpu_info
member	CPU_INFO_SCRATCH	ci_scratch
member  CPU_INFO_SELF		ci_self
member  CPU_INFO_CPUID		ci_cpuid
member  CPU_INFO_APICID		ci_apicid
member  CPU_INFO_RESCHED	ci_want_resched
member  CPU_INFO_CURPROC	ci_curproc
member  CPU_INFO_CURPCB		ci_curpcb
member  CPU_INFO_IDLE_PCB	ci_idle_pcb
member	CPU_INFO_ILEVEL		ci_ilevel
member	CPU_INFO_IDEPTH		ci_idepth
member	CPU_INFO_ISOURCES	ci_isources
member	CPU_INFO_IPENDING	ci_ipending
member	CPU_INFO_IUNMASK	ci_iunmask
ifdef DIAGNOSTIC
member	CPU_INFO_MUTEX_LEVEL	ci_mutex_level
endif
member	CPU_INFO_GDT		ci_gdt
member	CPU_INFO_TSS		ci_tss
member	CPU_INFO_FLAGS		ci_flags

export	CPUF_USERSEGS_BIT

struct	intrsource
member	is_recurse
member	is_resume
member	is_handlers
member	is_pic
member	is_flags
member	is_pin
member	is_type
member	is_maxlevel

struct	intrhand
member	ih_fun
member	ih_arg
member	ih_next
member	ih_level
member	IH_COUNT	ih_count.ec_count

struct	ioapic_softc
member	IOAPIC_SC_REG	sc_reg
member	IOAPIC_SC_DATA	sc_data

struct	mutex
member	mtx_wantipl
member	mtx_oldipl
member	mtx_owner

# pte fields
export	PG_V
export	PG_KR
export	PG_KW
export	PG_N
export	PG_NX
export	PG_G
export	PG_PS

# pmap constants
export	PDIR_SLOT_PTE

export	NKL4_KIMG_ENTRIES
export	NKL3_KIMG_ENTRIES
export	NKL2_KIMG_ENTRIES

export	NDML4_ENTRIES
export	NDML3_ENTRIES
export	NDML2_ENTRIES

export	NBPD_L2
export	NPDPG

export	PDIR_SLOT_DIRECT

export	CR4_DEFAULT

@


1.30
log
@More <uvm/uvm.h> -> <uvm/uvm_extern.h> cleaning.

ok kettenis@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.29 2012/04/17 16:02:33 guenther Exp $
d117 3
@


1.29
log
@Don't try to cache the CPU's FS.base, as userland can make it a lie by
setting %fs, resulting in it not getting restored properly later

ok mikeb@@ deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.28 2011/04/13 02:49:12 guenther Exp $
d10 1
a10 1
include <uvm/uvm.h>
a31 2

define	UVM_PAGE_IDLE_ZERO	offsetof(struct uvm, page_idle_zero)
@


1.28
log
@Unrevert the FS.base diff: the issues were actually elsewhere
Additional testing by jasper@@ and pea@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.27 2011/04/10 03:56:38 guenther Exp $
a101 1
member	CPU_INFO_CUR_FSBASE	ci_cur_fsbase
@


1.27
log
@Revert bulk of the FS.base diff, as it causes issues on some machines
and the problem isn't obvious yet.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.26 2011/04/05 21:14:00 guenther Exp $
d88 1
d102 1
@


1.26
log
@Add support for per-rthread base-offset for the %fs selector on amd64.
Add pcb_fsbase to the PCB for tracking what the value for the thread
is, and ci_cur_fsbase to struct cpu_info for tracking the CPU's current
value for FS.base, then on return to user-space, skip the setting if the
CPU has the right value already.  Non-threaded processes without TLS leave
FS.base zero, which can be conveniently optimized: setting %fs zeros
FS.base for fewer cycles than wrmsr.

ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.25 2010/11/13 04:16:42 guenther Exp $
a87 1
member	pcb_fsbase
a100 1
member	CPU_INFO_CUR_FSBASE	ci_cur_fsbase
@


1.25
log
@Switch from TSS-per-process to TSS-per-CPU, placing the TSS right
next to the cpu's GDT, also making the double-fault stack per-CPU,
leaving it at the top of the page of the CPU's idle process.  Inline
pmap_activate() and pmap_deactivate() into the asm cpu_switchto
routine, adding a check for the new pmap already being marked as
active on the CPU.  Garbage collect the hasn't-been-used-in-years
GDT update IPI.

Tested by many; ok mikeb@@, kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.24 2010/10/26 05:49:10 guenther Exp $
d88 1
d102 1
@


1.24
log
@The LDT is only used by dead compat code now, so load the ldt
register with the null selector (disabling use of it), stop reloading
it on every context switch, and blow away the table itself, as well
as the pcb and pmap bits that were used to track it.  Also, delete
two other unused pcb members: pcb_usersp and pcb_flags.  (Deleting
pcb_usersp also keeps the pcb_savefpu member aligned properly.)
Finally, delete the defines for the unimplemented AMD64_{GET,SET}_LDT
sysarch() calls.

Tested by various with both AMD and Intel chips
ok mikeb@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.23 2010/09/24 13:21:30 matthew Exp $
d18 1
a39 1
member	P_MD_TSS_SEL	p_md.md_tss_sel
d85 1
d87 1
a87 3
member	pcb_rsp
member	PCB_RSP0	pcb_tss.tss_rsp0
member	pcb_cr0
d90 8
d102 1
a107 1
member  CPU_INFO_IDLE_TSS_SEL	ci_idle_tss_sel
d117 1
@


1.23
log
@Add stricter asserts to DIAGNOSTIC kernels to help catch mutex and
rwlock misuse.  In particular, this commit makes the following
changes:

  1. i386 and amd64 now count the number of active mutexes so that
assertwaitok(9) can detect attempts to sleep while holding a mutex.

  2. i386 and amd64 check that we actually hold mutexes when passed to
mtx_leave().

  3. Calls to rw_exit*() now call rw_assert_{rd,wr}lock() as
appropriate.

ok krw@@, oga@@; "sounds good to me" deraadt@@; assembly bits double
checked by pirofti@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.22 2010/04/01 19:47:59 kettenis Exp $
a86 1
member	pcb_usersp
a88 1
member	pcb_ldt_sel
@


1.22
log
@Don't index cpu_info by apic id, but by device unit number instead.  Recent
Intel CPUs come up with apic id's >= 32, even on systems with less than 32
logical CPUs.

ok krw@@, marco@@; tested by deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.21 2009/06/09 02:56:38 krw Exp $
d108 3
@


1.21
log
@revert guenther@@'s un-revert of art's curpmap.

My

bios0: ASUSTeK Computer INC. P5K-E
cpu0: Intel(R) Core(TM)2 Quad CPU Q6600 @@ 2.40GHz, 2405.74 MHz
cpu1: Intel(R) Core(TM)2 Quad CPU Q6600 @@ 2.40GHz, 2405.46 MHz
cpu2: Intel(R) Core(TM)2 Quad CPU Q6600 @@ 2.40GHz, 2405.46 MHz
cpu3: Intel(R) Core(TM)2 Quad CPU Q6600 @@ 2.40GHz, 2405.46 MHz

can't boot with this in. It always hangs somewhere in fsck'ing if
any, or between netstart and local daemons if no fsck'ing. Also
fubars theo's real amd machine.

Much more testing needed for this.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.20 2009/06/06 23:45:35 guenther Exp $
d97 1
@


1.20
log
@Unrevert the curpmap change with the addition of correct %gs handling
in the IPI handler so that it works when it interrupts userspace,
waiting for the droppmap IPI to complete when destroying it, and
(most importantly) don't call pmap_tlb_droppmap() from cpu_exit().
Tested by myself and ckuethe, as our machines choked on the original.

ok @@art
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.18 2009/05/28 09:05:33 art Exp $
a92 1
member	pcb_pmap
d95 1
a95 1
member	CPU_INFO_SCRATCH        ci_scratch
a107 4
member	CPU_INFO_CURPMAP	ci_curpmap

struct	pmap
member	pm_pdirpa
@


1.19
log
@Revert the curpmap change.  We know the IPI is broken on both ends,
but even with proposed fixes, the reaper panics are back.
@
text
@d93 1
d96 1
a96 1
member	CPU_INFO_SCRATCH	ci_scratch
d109 4
@


1.18
log
@Bring back the curpmap change. It was missing a reload of the pmap on
curcpu when we were freeing a pmap. Tested and working for a few weeks
now, but I was a bit too busy to commit it earlier.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.16 2009/04/23 07:42:02 art Exp $
a92 1
member	pcb_pmap
d95 1
a95 1
member	CPU_INFO_SCRATCH        ci_scratch
a107 4
member	CPU_INFO_CURPMAP	ci_curpmap

struct	pmap
member	pm_pdirpa
@


1.17
log
@turning pmap_deactivate into a NOP brought back the reaper panics, probably
because the reaper is running on the mappings of pmap from the process it
is about to unmap.  back it out until ht is fixed right; don't let this sit
in the tree waiting for a fix.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.15 2007/10/10 15:53:51 art Exp $
d93 1
d96 1
a96 1
member	CPU_INFO_SCRATCH	ci_scratch
d109 4
@


1.16
log
@Make pmap_deactivate a NOP.

Instead of keeping a bitmask of on which cpu the pmap might be active which
we clear in pmap_deactivate, always keep a pointer to the currently loaded
pmap in cpu_info. We can now optimize a context switch to the kernel pmap
(idle and kernel threads) to keep the previously loaded pmap still loaded
and then reuse that pmap if we context switch back to the same process.

Introduce a new IPI to force a pmap reload before the pmap is destroyed.

Clean up cpu_switchto.

toby@@ ok
@
text
@a92 1
member	pcb_pmap
d95 1
a95 1
member	CPU_INFO_SCRATCH        ci_scratch
a107 4
member	CPU_INFO_CURPMAP	ci_curpmap

struct	pmap
member	pm_pdirpa
@


1.15
log
@Make context switching much more MI:
 - Move the functionality of choosing a process from cpu_switch into
   a much simpler function: cpu_switchto. Instead of having the locore
   code walk the run queues, let the MI code choose the process we
   want to run and only implement the context switching itself in MD
   code.
 - Let MD context switching run without worrying about spls or locks.
 - Instead of having the idle loop implemented with special contexts
   in MD code, implement one idle proc for each cpu. make the idle
   loop MI with MD hooks.
 - Change the proc lists from the old style vax queues to TAILQs.
 - Change the sleep queue from vax queues to TAILQs. This makes
   wakeup() go from O(n^2) to O(n)

there will be some MD fallout, but it will be fixed shortly.
There's also a few cleanups to be done after this.

deraadt@@, kettenis@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.14 2007/06/01 21:01:51 art Exp $
d93 1
d96 1
a96 1
member	CPU_INFO_SCRATCH	ci_scratch
d109 4
@


1.14
log
@Instead of reexporting PAGE_SIZE from assym.h which causes warnings
for locore, just include machine/param.h in vector.S
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.13 2007/05/27 08:58:31 art Exp $
a35 2
member	p_back
member	p_forw
@


1.13
log
@- Redo the way we set up the direct map. Map the first 4GB of it
  in locore so that we can use the direct map in pmap_bootstrap when
  setting up the initial page tables.

- Introduce a second direct map (I love large address spaces) with
  uncached pages.

jason@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.12 2007/05/25 16:22:11 art Exp $
a163 1
export	PAGE_SIZE
@


1.12
log
@Change the old slow and complicated TLB shootdown code to new, fast and
simple. This is basically the same code as on i386 and basically the same
performance improvements.

This change also includes code to delay the freeing of ptps until they
have been properly shot.

in snaps for a week, no problems reported.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.11 2007/05/10 17:59:23 deraadt Exp $
d143 2
d152 9
@


1.11
log
@evcnt & friends were replaced by a proper interrupt counting mechanism 3 years ago; ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.10 2007/05/07 19:10:31 kettenis Exp $
d152 2
@


1.10
log
@Garbage collect ci_astpending; it's no longer used.

ok miod@@, art@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.9 2005/07/26 08:38:29 art Exp $
a113 1
member	is_evcnt
@


1.9
log
@Instead of juggling around with cr4 and enabling parts of it sometimes,
other parts later, etc. Just set it to the same default value everywhere.
We won't survive without PSE and tt's not like someone will suddenly make
an amd64 that doesn't support PGE.

This will allow us to make the bootstrap process slightly more sane.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.8 2004/07/20 20:17:16 art Exp $
a103 1
member  CPU_INFO_ASTPENDING	ci_astpending
@


1.8
log
@MD mutex implementation on amd64.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.7 2004/06/28 01:52:24 deraadt Exp $
d152 2
@


1.7
log
@Use new event counter API for interrupt counting on amd64.  Based in part
on some changes in the i386 codebase.
@
text
@d1 1
a1 2
#	$OpenBSD: genassym.cf,v 1.6 2004/06/25 11:03:27 art Exp $

d19 1
d133 5
@


1.6
log
@SMP support. Big parts from NetBSD, but with some really serious debugging
done by me, niklas and others. Especially wrt. NXE support.

Still needs some polishing, especially in dmesg messages, but we're now
building kernel faster than ever.
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.5 2004/06/22 01:16:50 art Exp $
d128 1
@


1.5
log
@Switch amd64 to __HAVE_CPUINFO

deraadt@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.4 2004/06/13 21:49:12 niklas Exp $
d18 2
d110 1
d128 4
@


1.4
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
#	$OpenBSD$
d44 1
@


1.3
log
@activate systrace on amd64, while here get rid of syscall_{plain,fancy}
instead use syscall() as everywhere else

ok mickey, tested and ok tedu@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.2 2004/02/07 17:00:12 miod Exp $
d20 1
@


1.2
log
@Be sure to flag pte constants as UL, and cope with this in locore.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.1 2004/01/28 01:39:38 mickey Exp $
a40 1
member	P_MD_SYSCALL	p_md.md_syscall
@


1.2.2.1
log
@The merge of these files were done to another date than the rest, fix.
@
text
@d1 1
a1 1
#	$OpenBSD$
d15 1
d21 1
d125 13
@


1.2.2.2
log
@Merge with the trunk
@
text
@a14 1
include <machine/pte.h>
a19 1
export	L4_SLOT_KERNBASE
d39 1
a122 13
# pte fields
export	PG_V
export	PG_KR
export	PG_KW
export	PG_N
export	PG_NX

# pmap constants
export	PDIR_SLOT_PTE

export	NKL4_KIMG_ENTRIES
export	NKL3_KIMG_ENTRIES
export	NKL2_KIMG_ENTRIES
@


1.2.2.3
log
@export SONPROC
@
text
@d1 1
a1 1
#	$OpenBSD: genassym.cf,v 1.2.2.2 2004/06/05 23:09:24 niklas Exp $
a19 1
export	SONPROC
@


1.1
log
@an amd64 arch support.
hacked by art@@ from netbsd sources and then later debugged
by me into the shape where it can host itself.
no bootloader yet as needs redoing from the
recent advanced i386 sources (anyone? ;)
@
text
@d1 1
a1 1
#	$OpenBSD$
d15 1
d21 1
d125 13
@

