head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.10
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.8
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.4
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.6
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.20.0.6
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.4
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.19.0.10
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.8
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.6
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.4
	OPENBSD_5_0:1.19.0.2
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.16.0.2
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.15.0.8
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.4
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.6
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.2
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.14.0.2
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.2
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.4
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.21
date	2014.09.14.14.17.23;	author jsg;	state Exp;
branches;
next	1.20;
commitid	uzzBR7hz9ncd4O6G;

1.20
date	2013.11.21.00.13.33;	author dlg;	state Exp;
branches;
next	1.19;

1.19
date	2011.06.27.01.14.24;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2011.04.16.03.21.15;	author krw;	state Exp;
branches;
next	1.17;

1.17
date	2011.04.15.14.57.28;	author krw;	state Exp;
branches;
next	1.16;

1.16
date	2010.12.07.00.30.40;	author dlg;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.10.23.41.19;	author krw;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.12.06.58.33;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2008.06.11.12.35.40;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2008.06.10.20.50.22;	author beck;	state Exp;
branches;
next	1.11;

1.11
date	2008.01.14.22.05.18;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2007.12.10.17.36.56;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.22.00.39.59;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.01.16.46.55;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2005.07.26.00.56.25;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.23.14.48.35;	author krw;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.01.23.34.38;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.01.03.07.08;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.25.23.02.23;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.11.18.51.04;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.25.00.16.04;	author deraadt;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2004.06.05.23.09.24;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.21
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@/*	$OpenBSD: dkcsum.c,v 1.20 2013/11/21 00:13:33 dlg Exp $	*/

/*-
 * Copyright (c) 1997 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * A checksumming pseudo device used to get unique labels of each disk
 * that needs to be matched to BIOS disks.
 */

#include <sys/param.h>
#include <sys/buf.h>
#include <sys/conf.h>
#include <sys/device.h>
#include <sys/disklabel.h>
#include <sys/fcntl.h>
#include <sys/reboot.h>
#include <sys/stat.h>
#include <sys/systm.h>

#include <machine/biosvar.h>

#include <lib/libz/zlib.h>

dev_t dev_rawpart(struct device *);	/* XXX */

extern u_int32_t bios_cksumlen;
extern bios_diskinfo_t *bios_diskinfo;
extern dev_t bootdev;

void
dkcsumattach(void)
{
	struct device *dv;
	struct buf *bp;
	struct bdevsw *bdsw;
	dev_t dev, pribootdev, altbootdev;
	int error, picked;
	u_int32_t csum;
	bios_diskinfo_t *bdi, *hit;

	/* do nothing if no diskinfo passed from /boot, or a bad length */
	if (bios_diskinfo == NULL || bios_cksumlen * DEV_BSIZE > MAXBSIZE)
		return;

	/* Do nothing if bootdev is a CD drive. */
	if (B_TYPE(bootdev) == 6)
		return;

#ifdef DEBUG
	printf("dkcsum: bootdev=%#x\n", bootdev);
	for (bdi = bios_diskinfo; bdi->bios_number != -1; bdi++) {
		if (bdi->bios_number & 0x80) {
			printf("dkcsum: BIOS drive %#x bsd_dev=%#x "
			    "checksum=%#x\n", bdi->bios_number, bdi->bsd_dev,
			    bdi->checksum);
		}
	}
#endif
	pribootdev = altbootdev = 0;

	/*
	 * XXX What if DEV_BSIZE is changed to something else than the BIOS
	 * blocksize?  Today, /boot doesn't cover that case so neither need
	 * I care here.
	 */
	bp = geteblk(bios_cksumlen * DEV_BSIZE);	/* XXX error check?  */

	TAILQ_FOREACH(dv, &alldevs, dv_list) {
		if (dv->dv_class != DV_DISK)
			continue;
		bp->b_dev = dev = dev_rawpart(dv);
		if (dev == NODEV)
			continue;
		bdsw = &bdevsw[major(dev)];

		/*
		 * This open operation guarantees a proper initialization
		 * of the device, for future strategy calls.
		 */
		error = (*bdsw->d_open)(dev, FREAD, S_IFCHR, curproc);
		if (error) {
			/* XXX What to do here? */
#ifdef DEBUG
			printf("dkcsum: %s open failed (%d)\n",
			    dv->dv_xname, error);
#endif
			continue;
		}

		/* Read blocks to cksum.  XXX maybe a d_read should be used. */
		bp->b_blkno = 0;
		bp->b_bcount = bios_cksumlen * DEV_BSIZE;
		bp->b_error = 0; /* B_ERROR and b_error may have stale data. */
		CLR(bp->b_flags, B_READ | B_WRITE | B_DONE | B_ERROR);
		SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
		(*bdsw->d_strategy)(bp);
		if ((error = biowait(bp))) {
			/* XXX What to do here? */
#ifdef DEBUG
			printf("dkcsum: %s read failed (%d)\n",
			    dv->dv_xname, error);
#endif
			error = (*bdsw->d_close)(dev, 0, S_IFCHR, curproc);
#ifdef DEBUG
			if (error)
				printf("dkcsum: %s close failed (%d)\n",
				    dv->dv_xname, error);
#endif
			continue;
		}
		error = (*bdsw->d_close)(dev, FREAD, S_IFCHR, curproc);
		if (error) {
			/* XXX What to do here? */
#ifdef DEBUG
			printf("dkcsum: %s closed failed (%d)\n",
			    dv->dv_xname, error);
#endif
			continue;
		}

		csum = adler32(0, bp->b_data, bios_cksumlen * DEV_BSIZE);
#ifdef DEBUG
		printf("dkcsum: %s checksum is %#x\n", dv->dv_xname, csum);
#endif

		/* Find the BIOS device */
		hit = 0;
		for (bdi = bios_diskinfo; bdi->bios_number != -1; bdi++) {
			/* Skip non-harddrives */
			if (!(bdi->bios_number & 0x80))
				continue;
			if (bdi->checksum != csum)
				continue;
			picked = hit || (bdi->flags & BDI_PICKED);
			if (!picked)
				hit = bdi;
#ifdef DEBUG
			printf("dkcsum: %s matches BIOS drive %#x%s\n",
			    dv->dv_xname, bdi->bios_number,
			    (picked ? " IGNORED" : ""));
#endif
		}

		/*
		 * If we have no hit, that's OK, we can see a lot more devices
		 * than the BIOS can, so this case is pretty normal.
		 */
		if (!hit) {
#ifdef DEBUG
			printf("dkcsum: %s has no matching BIOS drive\n",
			    dv->dv_xname);
#endif	
			continue;
		}

		/*
		 * Fixup bootdev if units match.  This means that all of
		 * hd*, sd*, wd*, will be interpreted the same.  Not 100%
		 * backwards compatible, but sd* and wd* should be phased-
		 * out in the bootblocks.
		 */

		/* B_TYPE dependent hd unit counting bootblocks */
		if ((B_ADAPTOR(bootdev) == B_ADAPTOR(hit->bsd_dev)) &&
		    (B_CONTROLLER(bootdev) == B_CONTROLLER(hit->bsd_dev)) &&
		    (B_TYPE(bootdev) == B_TYPE(hit->bsd_dev)) &&
		    (B_UNIT(bootdev) == B_UNIT(hit->bsd_dev))) {
			int type, ctrl, adap, part, unit;

			type = major(bp->b_dev);
			adap = B_ADAPTOR(bootdev);
			ctrl = B_CONTROLLER(bootdev);
			unit = DISKUNIT(bp->b_dev);
			part = B_PARTITION(bootdev);

			pribootdev = MAKEBOOTDEV(type, ctrl, adap, unit, part);
#ifdef DEBUG
			printf("dkcsum: %s is primary boot disk\n",
			    dv->dv_xname);
#endif
		}
		/* B_TYPE independent hd unit counting bootblocks */
		if (B_UNIT(bootdev) == (hit->bios_number & 0x7F)) {
			int type, ctrl, adap, part, unit;

			type = major(bp->b_dev);
			adap = B_ADAPTOR(bootdev);
			ctrl = B_CONTROLLER(bootdev);
			unit = DISKUNIT(bp->b_dev);
			part = B_PARTITION(bootdev);

			altbootdev = MAKEBOOTDEV(type, ctrl, adap, unit, part);
#ifdef DEBUG
			printf("dkcsum: %s is alternate boot disk\n",
			    dv->dv_xname);
#endif
		}

		/* This will overwrite /boot's guess, just so you remember */
		hit->bsd_dev = MAKEBOOTDEV(major(bp->b_dev), 0, 0,
		    DISKUNIT(bp->b_dev), RAW_PART);
		hit->flags |= BDI_PICKED;
	}
	bootdev = pribootdev ? pribootdev : altbootdev ? altbootdev : bootdev;

	bp->b_flags |= B_INVAL;
	brelse(bp);
}
@


1.20
log
@remove the #define b_cylinder b_resid from bufs. i hated the
overloading of that thing.

the only hardware that seems to care about cylinders in our tree
are floppy drives, and the drivers for those calculate their own
cylinders from logical block addresses and ignore whatever the rest
of the kernel thought b_cylinders should be.

most of this diff is moving the floppy drivers to using b_resid as
a resid and using that as part of the calculation for real cylinder
values.

the rest of the diff is getting rid of the useless assignments to
b_cylinder that dont get used by anything (now that disksort is
gone).

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.19 2011/06/27 01:14:24 krw Exp $	*/
a37 1
#include <sys/proc.h>
@


1.19
log
@Ensure we don't re-issue a failed buf without clearing B_ERROR and
b_error. Otherwise a good i/o will appear to have failed. Fixes
problem with dkcsum.c being unable to read data to checksum from
subsequent devices after an i/o fails. And thus failing to find
correct root in some cases.

Introduced at k2k11 with buf flags rectification. Scan of all
biowait() calls finds no other obvious re-use of a buf that could
have error'ed out. Just re-use of bufs that worked. So quick fix
pending closer review of all uses.

Problem noted by Jens A. Griepen.

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.18 2011/04/16 03:21:15 krw Exp $	*/
a118 1
		bp->b_cylinder = 0;
@


1.18
log
@Use 'CLR(<buf>->b_flags, B_READ | B_WRITE | B_DONE)' regardless of
what the previous IO was. Less chance of copy and paste errors.
Suggested by miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.17 2011/04/15 14:57:28 krw Exp $	*/
d116 2
a117 1
		CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
@


1.17
log
@In days of yore one could arbitrarily whack buffer flags. Those days
are past. Use CLR() and SET() to modify necessary flags while leaving
the flags used by the buffer cache in peace.

Should make bufcache code much less confused about the state of the
bufs used in reading/writing disklabels. Other such flag abuses no
doubt await a visit.

Errors in original diff found by miod@@.

ok beck@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.16 2010/12/07 00:30:40 dlg Exp $	*/
d116 1
a116 1
		CLR(bp->b_flags, B_WRITE | B_DONE);
@


1.16
log
@the boot loader passes a variable that identifies the disk its
booting off made up of a bunch of fields like adapter, controller,
disk, and partition offsets, plus a table of all the disks it can
see which includes this id and a checksum.

the kernel goes through and checksums the disks and then maps that
back to the id associated with that disk, and then compares some
of the fields in those ids against the boot disks id to figure out
which disk its on.

the problem is we overflow one of those fields (the disk id one).
since the other fields are set to 0 by the boot loader, this doesnt
really matter that much. however, since those fields are now
significant because of the overflow, we should compare them too.

this prevents sd16 being matched as the boot disk after sd0 on my
system with 25 disks attached.

ok krw@@ weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.15 2008/12/10 23:41:19 krw Exp $	*/
d116 2
a117 1
		bp->b_flags = B_BUSY | B_READ | B_RAW;
@


1.15
log
@When booting from a CD on i386/amd64, assume the root filesystem
is on the CD rather than always asking for its location.  Behaviour
pointed out at OpenCON by Stephan Rickauer.

Tested by Stephan. nick@@ has no objections.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.14 2008/06/12 06:58:33 deraadt Exp $	*/
d74 7
a80 4
	for (bdi = bios_diskinfo; bdi->bios_number != -1; bdi++)
		if (bdi->bios_number & 0x80)
			printf("dkcsum: BIOS drive %#x checksum is %#x\n",
			    bdi->bios_number, bdi->checksum);
d186 3
a188 1
		if ((B_TYPE(bootdev) == B_TYPE(hit->bsd_dev)) &&
@


1.14
log
@Bring biomem diff back into the tree after the nfs_bio.c fix went in.
ok thib beck art
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.12 2008/06/10 20:50:22 beck Exp $	*/
d66 4
@


1.13
log
@back out biomem diff since it is not right yet.  Doing very large
file copies to nfsv2 causes the system to eventually peg the console.
On the console ^T indicates that the load is increasing rapidly, ddb
indicates many calls to getbuf, there is some very slow nfs traffic
making none (or extremely slow) progress.  Eventually some machines
seize up entirely.
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.11 2008/01/14 22:05:18 kettenis Exp $	*/
d109 1
a109 1
		bp->b_flags = B_BUSY | B_READ;
@


1.12
log
@Fix buffer cache pending read statistics by ensuring we can identify
biowait() reads that do *not* come from the buffer cache - we use the
B_RAW flag to identify these at art's suggestion - since it makes sense
and the flag was not being used. this just flags all these buffers with
B_RAW - biodone already ignores returned buffers marked B_RAW.
ok art@@
@
text
@d109 1
a109 1
		bp->b_flags = B_BUSY | B_READ | B_RAW;
@


1.11
log
@Remove extra whitespace after comment; makes file identical to i386 version
(except for RCS string of course).
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.10 2007/12/10 17:36:56 deraadt Exp $	*/
d109 1
a109 1
		bp->b_flags = B_BUSY | B_READ;
@


1.10
log
@For a few years already, dkcsum can be silent
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.9 2006/01/22 00:39:59 miod Exp $	*/
d178 1
a178 1
		/* B_TYPE dependent hd unit counting bootblocks */ 
@


1.9
log
@b_cylin -> b_cylinder; no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.8 2005/08/01 16:46:55 krw Exp $	*/
d152 1
d156 1
@


1.8
log
@Fiddle with dkcsum output. Improve verbiage and grouping of messages.
Clean up code.

ok weingart@@ tom@@ 'go for it' deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.7 2005/07/26 00:56:25 krw Exp $	*/
a46 2
#define	b_cylin	b_resid

d110 1
a110 1
		bp->b_cylin = 0;
@


1.7
log
@Reduce verbosity during dkcsum by moving open/read/close error
messages inside #ifdef DEBUG/#endif sections. Helps with usb card
readers and such that will often have no media.

ok weingart@@ tom@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.6 2005/07/23 14:48:35 krw Exp $	*/
d62 1
a62 1
	int error;
d71 5
a75 1
	printf("dkcsum: bootdev=0x%x\n", bootdev);
d102 1
a102 1
			printf("dkcsum: open of %s failed (%d)\n",
d117 1
a117 1
			printf("dkcsum: read of %s failed (%d)\n",
d123 1
a123 1
				printf("dkcsum: close of %s failed (%d)\n",
d132 1
a132 1
			printf("dkcsum: close of %s failed (%d)\n",
d140 1
a140 1
		printf("dkcsum: checksum of %s is %x\n", dv->dv_xname, csum);
d149 8
a156 14
#ifdef DEBUG
			printf("dkcsum: "
			    "attempting to match with BIOS drive %x csum %x\n",
			    bdi->bios_number, bdi->checksum);
#endif
			if (bdi->checksum == csum) {
				if (!hit && !(bdi->flags & BDI_PICKED))
					hit = bdi;
				else {
					/* XXX add other heuristics here.  */
					printf("dkcsum: warning: "
					    "dup BSD->BIOS disk mapping\n");
				}
			}
d163 3
a165 8
		if (hit) {
#ifdef DIAGNOSTIC
			printf("dkcsum: %s matched BIOS disk %x\n",
			    dv->dv_xname, hit->bios_number);
#endif
		} else {
#ifdef DIAGNOSTIC
			printf("dkcsum: %s had no matching BIOS disk\n",
d167 1
a167 1
#endif
d191 1
a191 1
			printf("dkcsum: setting %s as primary boot disk\n",
d207 1
a207 1
			printf("dkcsum: setting %s as alternate boot disk\n",
@


1.6
log
@Fix a few typos.  Set 'error' variable before using it in message.
Makes i386 and amd64 dkcsum.c identical.

ok weingart@@ tom@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.5 2005/04/01 23:34:38 krw Exp $	*/
d97 4
a100 3
			if (error != ENODEV)
				printf("dkcsum: open of %s failed (%d)\n",
				    dv->dv_xname, error);
d112 1
d115 1
d117 1
d121 1
d127 1
d130 1
@


1.5
log
@Cleanup SKEY_NOT_READY logic. Only retry command if it's likely the
condition is going to clear up, which speeds up boot by avoiding
delays in disk matching. Return ENODEV if media is not present, which
avoids trying to spin up disks that are not present. Use ENODEV in
amd64/i386 dkcsum.c to filter failure reports.

Mostly from NetBSD.

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.4 2005/01/01 03:07:08 millert Exp $	*/
d76 1
a76 1
	 * XXX Whatif DEV_BSIZE is changed to something else than the BIOS
a82 1

d109 1
a109 1
		if (biowait(bp)) {
@


1.4
log
@Add more debugging printf #ifdef DEBUG.  This was useful when tracking
down the bootdev issue.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.3 2004/12/25 23:02:23 miod Exp $	*/
d98 1
a98 1
			if (error != EIO)
@


1.3
log
@Use list and queue macros where applicable to make the code easier to read;
no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.2 2004/08/11 18:51:04 millert Exp $	*/
d70 3
d191 4
d207 4
@


1.2
log
@In dkcsumattach() avoid modifying bootdev until we are done matching.
Also deal with mixed scsi/ide/whatever setups.  Based on a diff from
Fred de Jong.  OK deraadt@@ and tested by several people.
@
text
@d1 1
a1 1
/*	$OpenBSD: dkcsum.c,v 1.1 2004/02/25 00:16:04 deraadt Exp $	*/
d79 1
a79 1
	for (dv = alldevs.tqh_first; dv; dv = dv->dv_list.tqe_next) {
@


1.1
log
@dkcsum stuff for amd64, written by tom, who cannot commit it at the moment.
now the amd64 knows what drive it was booted from.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 1
a61 1
	dev_t dev;
d70 2
d169 2
a170 1
		/* Fixup bootdev if units match.  This means that all of
d175 15
a192 1
			/* Translate to MAKEBOOTDEV() style */
d199 1
a199 1
			bootdev = MAKEBOOTDEV(type, ctrl, adap, unit, part);
d207 2
@


1.1.4.1
log
@Merge with the trunk
@
text
@@

