head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.26
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.24
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.20
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.18
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.16
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.14
	OPENBSD_5_0:1.5.0.12
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.10
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.1.0.20
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.18
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.16
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.14
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.12
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.10
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	SMP:1.1.0.8
	OPENBSD_3_3:1.1.0.6
	OPENBSD_3_3_BASE:1.1
	UBC_SYNC_B:1.1
	OPENBSD_3_2:1.1.0.4
	OPENBSD_3_2_BASE:1.1
	UBC:1.1.0.2;
locks; strict;
comment	@ * @;


1.6
date	2014.12.13.21.05.32;	author doug;	state Exp;
branches;
next	1.5;
commitid	20ZyHa9gTJxHxhwD;

1.5
date	2009.02.01.14.34.02;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.05.42.09;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2007.10.06.23.50.54;	author krw;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.04.21.20.40;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.02.22.56.06;	author miod;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.06.11.03.33.41;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@yet more mallocarray() changes.

ok tedu@@ deraadt@@
@
text
@/* $OpenBSD: tc_dma_3000_500.c,v 1.5 2009/02/01 14:34:02 miod Exp $ */
/* $NetBSD: tc_dma_3000_500.c,v 1.13 2001/07/19 06:40:03 thorpej Exp $ */

/*-
 * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#define _ALPHA_BUS_DMA_PRIVATE

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/malloc.h>

#include <uvm/uvm_extern.h>

#include <machine/bus.h>

#include <dev/tc/tcvar.h>
#include <alpha/tc/tc_sgmap.h>
#include <alpha/tc/tc_dma_3000_500.h>

struct alpha_bus_dma_tag tc_dmat_sgmap = {
	NULL,				/* _cookie */
	0,				/* _wbase */
	0,				/* _wsize */
	NULL,				/* _next_window */
	0,				/* _boundary */
	NULL,				/* _sgmap */
	NULL,				/* _get_tag */
	tc_bus_dmamap_create_sgmap,
	tc_bus_dmamap_destroy_sgmap,
	tc_bus_dmamap_load_sgmap,
	tc_bus_dmamap_load_mbuf_sgmap,
	tc_bus_dmamap_load_uio_sgmap,
	tc_bus_dmamap_load_raw_sgmap,
	tc_bus_dmamap_unload_sgmap,
	_bus_dmamap_sync,
	_bus_dmamem_alloc,
	_bus_dmamem_free,
	_bus_dmamem_map,
	_bus_dmamem_unmap,
	_bus_dmamem_mmap,
};

struct tc_dma_slot_info {
	struct alpha_sgmap tdsi_sgmap;		/* sgmap for slot */
	struct alpha_bus_dma_tag tdsi_dmat;	/* dma tag for slot */
};
struct tc_dma_slot_info *tc_dma_slot_info;

void
tc_dma_init_3000_500(nslots)
	int nslots;
{
	extern struct alpha_bus_dma_tag tc_dmat_direct;
	int i;

	/* Allocate per-slot DMA info. */
	tc_dma_slot_info = mallocarray(nslots, sizeof(struct tc_dma_slot_info),
	    M_DEVBUF, M_NOWAIT | M_ZERO);
	if (tc_dma_slot_info == NULL)
		panic("tc_dma_init: can't allocate per-slot DMA info");

	/* Default all slots to direct-mapped. */
	for (i = 0; i < nslots; i++)
		memcpy(&tc_dma_slot_info[i].tdsi_dmat, &tc_dmat_direct,
		    sizeof(tc_dma_slot_info[i].tdsi_dmat));
}

/*
 * Return the DMA tag for the given slot.
 */
bus_dma_tag_t
tc_dma_get_tag_3000_500(slot)
	int slot;
{

	return (&tc_dma_slot_info[slot].tdsi_dmat);
}

/*
 * Create a TurboChannel SGMAP-mapped DMA map.
 */
int
tc_bus_dmamap_create_sgmap(t, size, nsegments, maxsegsz, boundary,
    flags, dmamp)
	bus_dma_tag_t t;
	bus_size_t size;
	int nsegments;
	bus_size_t maxsegsz;
	bus_size_t boundary;
	int flags;
	bus_dmamap_t *dmamp;
{
	bus_dmamap_t map;
	int error;

	error = _bus_dmamap_create(t, size, nsegments, maxsegsz,
	    boundary, flags, dmamp);
	if (error)
		return (error);

	map = *dmamp;

	/* XXX BUS_DMA_ALLOCNOW */

	return (error);
}

/*
 * Destroy a TurboChannel SGMAP-mapped DMA map.
 */
void
tc_bus_dmamap_destroy_sgmap(t, map)
	bus_dma_tag_t t;
	bus_dmamap_t map;
{

	KASSERT(map->dm_mapsize == 0);

	_bus_dmamap_destroy(t, map);
}

/*
 * Load a TurboChannel SGMAP-mapped DMA map with a linear buffer.
 */
int
tc_bus_dmamap_load_sgmap(t, map, buf, buflen, p, flags)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	void *buf;
	bus_size_t buflen;
	struct proc *p;
	int flags;
{
	struct tc_dma_slot_info *tdsi = t->_cookie;

	return (tc_sgmap_load(t, map, buf, buflen, p, flags,
	    &tdsi->tdsi_sgmap));
}

/*
 * Load a TurboChannel SGMAP-mapped DMA map with an mbuf chain.
 */
int
tc_bus_dmamap_load_mbuf_sgmap(t, map, m, flags)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	struct mbuf *m;
	int flags;
{
	struct tc_dma_slot_info *tdsi = t->_cookie;

	return (tc_sgmap_load_mbuf(t, map, m, flags, &tdsi->tdsi_sgmap));
}

/*
 * Load a TurboChannel SGMAP-mapped DMA map with a uio.
 */
int
tc_bus_dmamap_load_uio_sgmap(t, map, uio, flags)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	struct uio *uio;
	int flags;
{
	struct tc_dma_slot_info *tdsi = t->_cookie;

	return (tc_sgmap_load_uio(t, map, uio, flags, &tdsi->tdsi_sgmap));
}

/*
 * Load a TurboChannel SGMAP-mapped DMA map with raw memory.
 */
int
tc_bus_dmamap_load_raw_sgmap(t, map, segs, nsegs, size, flags)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	bus_dma_segment_t *segs;
	int nsegs;
	bus_size_t size;
	int flags;
{
	struct tc_dma_slot_info *tdsi = t->_cookie;

	return (tc_sgmap_load_raw(t, map, segs, nsegs, size, flags,
	    &tdsi->tdsi_sgmap));
}

/*
 * Unload a TurboChannel SGMAP-mapped DMA map.
 */
void
tc_bus_dmamap_unload_sgmap(t, map)
	bus_dma_tag_t t;
	bus_dmamap_t map;
{
	struct tc_dma_slot_info *tdsi = t->_cookie;

	/*
	 * Invalidate any SGMAP page table entries used by this
	 * mapping.
	 */
	tc_sgmap_unload(t, map, &tdsi->tdsi_sgmap);

	/*
	 * Do the generic bits of the unload.
	 */
	_bus_dmamap_unload(t, map);
}
@


1.5
log
@Remove unused _pfthresh member from struct alpha_bus_dma_tag.
@
text
@d1 1
a1 1
/* $OpenBSD: tc_dma_3000_500.c,v 1.4 2008/06/26 05:42:09 ray Exp $ */
a83 1
	size_t sisize;
d87 2
a88 2
	sisize = nslots * sizeof(struct tc_dma_slot_info);
	tc_dma_slot_info = malloc(sisize, M_DEVBUF, M_NOWAIT | M_ZERO);
@


1.4
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: tc_dma_3000_500.c,v 1.3 2007/10/06 23:50:54 krw Exp $ */
a56 1
	0,				/* _pfthresh */
@


1.3
log
@Simpliest memset(,0,) -> M_ZERO changes. One (caddr *) cast removal,
otherwise just adding M_ZERO to malloc() and removing the immediately
adjacent memset(,0,).
@
text
@d1 1
a1 1
/* $OpenBSD: tc_dma_3000_500.c,v 1.2 2006/04/04 21:20:40 brad Exp $ */
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.2
log
@Add a `prefetch threshold' member to the bus_dma_tag_t, so that
eventually we can determine whether or not to allocate a spill
page on a per-mapping basis.

From NetBSD

ok martin@@
@
text
@d1 1
a1 1
/* $OpenBSD: tc_dma_3000_500.c,v 1.1 2002/05/02 22:56:06 miod Exp $ */
d97 1
a97 1
	tc_dma_slot_info = malloc(sisize, M_DEVBUF, M_NOWAIT);
a99 1
	memset(tc_dma_slot_info, 0, sisize);
@


1.1
log
@Big TURBOchannel support catchup from NetBSD, part 1.
A few local changes and tweaks remain.

This bring DEC 3000 machines back in the game, but framebuffers are still
not supported at the moment.

Thanks to ericj@@ and nate@@ for supplying me a DEC 3000 for testing.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d64 1
@


1.1.2.1
log
@Sync UBC branch to -current
@
text
@@

