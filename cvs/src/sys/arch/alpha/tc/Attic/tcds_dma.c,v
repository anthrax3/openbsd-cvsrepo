head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_1:1.7.0.8
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.8
	UBC:1.7.0.6
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.16
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.14
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2002.05.02.22.56.07;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2000.11.08.16.01.26;	author art;	state Exp;
branches
	1.7.6.1;
next	1.6;

1.6
date	2000.07.05.21.50.39;	author ericj;	state Exp;
branches;
next	1.5;

1.5
date	97.01.24.19.58.23;	author niklas;	state Exp;
branches
	1.5.14.1;
next	1.4;

1.4
date	96.10.30.22.41.28;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.07.29.23.02.36;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.26.18.12.10;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.50;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.50;	author deraadt;	state Exp;
branches;
next	;

1.5.14.1
date	2001.04.18.16.01.53;	author niklas;	state Exp;
branches;
next	1.5.14.2;

1.5.14.2
date	2003.03.27.23.18.07;	author niklas;	state dead;
branches;
next	;

1.7.6.1
date	2002.06.11.03.33.41;	author art;	state dead;
branches;
next	;


desc
@@


1.8
log
@Big TURBOchannel support catchup from NetBSD, part 1.
A few local changes and tweaks remain.

This bring DEC 3000 machines back in the game, but framebuffers are still
not supported at the moment.

Thanks to ericj@@ and nate@@ for supplying me a DEC 3000 for testing.
@
text
@/*	$OpenBSD: tcds_dma.c,v 1.7 2000/11/08 16:01:26 art Exp $	*/
/*	$NetBSD: tcds_dma.c,v 1.15 1996/12/04 22:35:08 mycroft Exp $	*/

/*
 * Copyright (c) 1994 Peter Galbavy.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Peter Galbavy.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/errno.h>
#include <sys/ioctl.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/buf.h>
#include <sys/proc.h>
#include <sys/user.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include <dev/tc/tcvar.h>
#include <alpha/tc/tcdsreg.h>
#include <alpha/tc/tcdsvar.h>
#include <alpha/tc/ascreg.h>
#include <alpha/tc/ascvar.h>

void
tcds_dma_reset(sc)
	struct tcds_slotconfig *sc;
{
	/* TCDS SCSI disable/reset/enable. */
	tcds_scsi_reset(sc);			/* XXX */

	sc->sc_active = 0;			/* and of course we aren't */
}

int
tcds_dma_isintr(sc)
	struct tcds_slotconfig *sc;
{
	int x;

	x = tcds_scsi_isintr(sc, 1);

	/* XXX */
	return x;
}

/*
 * Pseudo (chained) interrupt from the esp driver to kick the
 * current running DMA transfer. I am replying on espintr() to
 * pickup and clean errors for now
 *
 * return 1 if it was a DMA continue.
 */
int
tcds_dma_intr(sc)
	struct tcds_slotconfig *sc;
{
	u_int32_t dud;
	int trans = 0, resid = 0;
	u_int32_t *addr, dudmask;
	u_char tcl, tcm, tch;

	ESP_DMA(("tcds_dma %d: intr", sc->sc_slot));

	if (tcds_scsi_iserr(sc))
		return (0);

	/* This is an "assertion" :) */
	if (sc->sc_active == 0)
		panic("dmaintr: DMA wasn't active");

	/* DMA has stopped */
	tcds_dma_enable(sc, 0);
	sc->sc_active = 0;

	if (sc->sc_dmasize == 0) {
		/* A "Transfer Pad" operation completed */
		tcl = ESP_READ_REG(sc->sc_esp, ESP_TCL);
		tcm = ESP_READ_REG(sc->sc_esp, ESP_TCM);
		ESP_DMA(("dmaintr: discarded %d bytes (tcl=%d, tcm=%d)\n",
		    tcl | (tcm << 8), tcl, tcm));
		return 0;
	}

	if (!sc->sc_iswrite &&
	    (resid = (ESP_READ_REG(sc->sc_esp, ESP_FFLAG) & ESPFIFO_FF)) != 0) {
		ESPCMD(sc->sc_esp, ESPCMD_FLUSH);
		DELAY(1);
	}

	resid += (tcl = ESP_READ_REG(sc->sc_esp, ESP_TCL));
	resid += (tcm = ESP_READ_REG(sc->sc_esp, ESP_TCM)) << 8;
	if (sc->sc_esp->sc_rev == ESP200)
		resid += (tch = ESP_READ_REG(sc->sc_esp, ESP_TCH)) << 16;
	else
		tch = 0;

	if (resid == 0 && (sc->sc_esp->sc_rev <= ESP100A) &&
	    (sc->sc_esp->sc_espstat & ESPSTAT_TC) == 0)
		resid = 65536;

	trans = sc->sc_dmasize - resid;
	if (trans < 0) {			/* transferred < 0 ? */
		printf("tcds_dma %d: xfer (%d) > req (%ld)\n",
		    sc->sc_slot, trans, sc->sc_dmasize);
		trans = sc->sc_dmasize;
	}

	ESP_DMA(("dmaintr: tcl=%d, tcm=%d, tch=%d; trans=%d, resid=%d\n",
	    tcl, tcm, tch, trans, resid));

	/*
	 * Clean up unaligned DMAs into main memory.
	 */
	if (sc->sc_iswrite) {
		/* Handle unaligned starting address, length. */
		dud = *sc->sc_dud0;
		if ((dud & TCDS_DUD0_VALIDBITS) != 0) {
			addr = (u_int32_t *)
			    ((vm_offset_t)sc->sc_dmaaddr & ~0x3);
			dudmask = 0;
			if (dud & TCDS_DUD0_VALID00)
				panic("tcds_dma: dud0 byte 0 valid");
			if (dud & TCDS_DUD0_VALID01)
				dudmask |= TCDS_DUD_BYTE01;
			if (dud & TCDS_DUD0_VALID10)
				dudmask |= TCDS_DUD_BYTE10;
#ifdef DIAGNOSTIC
			if (dud & TCDS_DUD0_VALID11)
				dudmask |= TCDS_DUD_BYTE11;
#endif
			ESP_DMA(("dud0 at 0x%p dudmask 0x%x\n",
			    addr, dudmask));
			addr = (u_int32_t *)ALPHA_PHYS_TO_K0SEG((vm_offset_t)addr);
			*addr = (*addr & ~dudmask) | (dud & dudmask);
		}
		dud = *sc->sc_dud1;
		if ((dud & TCDS_DUD1_VALIDBITS) != 0) {
	
			addr = (u_int32_t *)
			    ((vm_offset_t)*sc->sc_sda << 2);
			dudmask = 0;
			if (dud & TCDS_DUD1_VALID00)
				dudmask |= TCDS_DUD_BYTE00;
			if (dud & TCDS_DUD1_VALID01)
				dudmask |= TCDS_DUD_BYTE01;
			if (dud & TCDS_DUD1_VALID10)
				dudmask |= TCDS_DUD_BYTE10;
#ifdef DIAGNOSTIC
			if (dud & TCDS_DUD1_VALID11)
				panic("tcds_dma: dud1 byte 3 valid");
#endif
			ESP_DMA(("dud1 at 0x%p dudmask 0x%x\n",
			    addr, dudmask));
			addr = (u_int32_t *)ALPHA_PHYS_TO_K0SEG((vm_offset_t)addr);
			*addr = (*addr & ~dudmask) | (dud & dudmask);
		}
		/* XXX deal with saved residual byte? */
	}

	*sc->sc_dmalen -= trans;
	*sc->sc_dmaaddr += trans;

#if 0 /* this is not normal operation just yet */
	if (*sc->sc_dmalen == 0 ||
	    sc->sc_esp->sc_phase != sc->sc_esp->sc_prevphase)
		return 0;

	/* and again */
	dma_start(sc, sc->sc_dmaaddr, sc->sc_dmalen, sc->sc_iswrite);
	return 1;
#endif
	return 0;
}

#define DMAMAX(a)	(0x02000 - ((a) & 0x1fff))

/*
 * start a dma transfer or keep it going
 */
int
tcds_dma_setup(sc, addr, len, datain, dmasize)
	struct tcds_slotconfig *sc;
	caddr_t *addr;
	size_t *len, *dmasize;
	int datain;				/* DMA into main memory */
{
	u_int32_t dic;
	size_t size;

	sc->sc_dmaaddr = addr;
	sc->sc_dmalen = len;
	sc->sc_iswrite = datain;

	ESP_DMA(("tcds_dma %d: start %ld@@%p,%d\n", sc->sc_slot, *sc->sc_dmalen, *sc->sc_dmaaddr, sc->sc_iswrite));

	/*
	 * the rules say we cannot transfer more than the limit
	 * of this DMA chip (64k) and we cannot cross a 8k boundary.
	 */
	
	size = min(*dmasize, DMAMAX((size_t) *sc->sc_dmaaddr));
	*dmasize = sc->sc_dmasize = size;

	ESP_DMA(("dma_start: dmasize = %ld\n", sc->sc_dmasize));

	/* Load address, set/clear unaligned transfer and read/write bits. */
	/* XXX PICK AN ADDRESS TYPE, AND STICK TO IT! */
	if ((u_long)*addr > VM_MIN_KERNEL_ADDRESS) {
		*sc->sc_sda = vtophys((u_long)*addr) >> 2;
	} else {
		*sc->sc_sda = ALPHA_K0SEG_TO_PHYS((u_long)*addr) >> 2;
	}
	alpha_mb();
	dic = *sc->sc_dic;
	dic &= ~TCDS_DIC_ADDRMASK;
	dic |= (vm_offset_t)*addr & TCDS_DIC_ADDRMASK;
	if (datain)
		dic |= TCDS_DIC_WRITE;
	else
		dic &= ~TCDS_DIC_WRITE;
	*sc->sc_dic = dic;
	alpha_mb();

	return (0);
}

void
tcds_dma_go(sc)
	struct tcds_slotconfig *sc;
{

	/* mark unit as DMA-active */
	sc->sc_active = 1;

	/* Start DMA */
	tcds_dma_enable(sc, 1);
}

int
tcds_dma_isactive(sc)
	struct tcds_slotconfig *sc;
{

	return (sc->sc_active);
}
@


1.7
log
@Merge in big portions of the improvements NetBSD did to their alpha port.
Highlights: UVM, PMAP_NEW, bus_dma (only on some buses for now), new hardware
support, possiblity for ELF, etc, etc. Too much to mention.

This is still work in progress. video consoles might be broken, otherwise
we have basically the same functionality as before plus more.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcds_dma.c,v 1.6 2000/07/05 21:50:39 ericj Exp $	*/
@


1.7.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: tcds_dma.c,v 1.7 2000/11/08 16:01:26 art Exp $	*/
@


1.6
log
@
change the esp scsi driver name to asc as not to conflict with
the ncr53c9x driver. ok niklas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcds_dma.c,v 1.5 1997/01/24 19:58:23 niklas Exp $	*/
d239 1
a239 1
		*sc->sc_sda = vatopa((u_long)*addr) >> 2;
@


1.5
log
@Sync with NetBSD 961207
@
text
@d1 1
a1 1
/*	$OpenBSD: tcds_dma.c,v 1.4 1996/10/30 22:41:28 niklas Exp $	*/
d51 2
a52 2
#include <alpha/tc/espreg.h>
#include <alpha/tc/espvar.h>
@


1.5.14.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcds_dma.c,v 1.7 2000/11/08 16:01:26 art Exp $	*/
d51 2
a52 2
#include <alpha/tc/ascreg.h>
#include <alpha/tc/ascvar.h>
d239 1
a239 1
		*sc->sc_sda = vtophys((u_long)*addr) >> 2;
@


1.5.14.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: tcds_dma.c,v 1.5.14.1 2001/04/18 16:01:53 niklas Exp $	*/
@


1.4
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 2
a2 2
/*	$OpenBSD: tcds_dma.c,v 1.13 1996/10/13 03:00:43 christos Exp $	*/
/*	$NetBSD: tcds_dma.c,v 1.13 1996/10/13 03:00:43 christos Exp $	*/
d70 1
a70 4
	x = tcds_scsi_isintr(sc, 0);

	/* Clear the TCDS interrupt bit. */
	(void)tcds_scsi_isintr(sc, 1);
a115 1
		printf("empty FIFO of %d ", resid);
d133 1
a133 1
		printf("tcds_dma %d: xfer (%d) > req (%d)\n",
d161 1
a161 1
			ESP_DMA(("dud0 at 0x%lx dudmask 0x%x\n",
d182 1
a182 1
			ESP_DMA(("dud1 at 0x%lx dudmask 0x%x\n",
d224 1
a224 1
	ESP_DMA(("tcds_dma %d: start %d@@0x%lx,%d\n", sc->sc_slot, *sc->sc_dmalen, *sc->sc_dmaaddr, sc->sc_iswrite));
d234 1
a234 1
	ESP_DMA(("dma_start: dmasize = %d\n", sc->sc_dmasize));
@


1.3
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: tcds_dma.c,v 1.6 1995/12/20 00:40:32 cgd Exp $	*/
/*	$NetBSD: tcds_dma.c,v 1.6 1995/12/20 00:40:32 cgd Exp $	*/
a63 9

void
tcds_dma_enintr(sc)
	struct tcds_slotconfig *sc;
{

	/* XXX */
}

a78 73
#define ESPMAX		(64 * 1024)
#define DMAMAX(a)	(0x02000 - ((a) & 0x1fff))

/*
 * start a dma transfer or keep it going
 */
void
tcds_dma_start(sc, addr, len, datain)
	struct tcds_slotconfig *sc;
	caddr_t *addr;
	size_t *len;
	int datain;				/* DMA into main memory */
{
	u_int32_t dic;
	size_t size;

	sc->sc_dmaaddr = addr;
	sc->sc_dmalen = len;
	sc->sc_iswrite = datain;

	ESP_DMA(("tcds_dma %d: start %d@@0x%lx,%d\n", sc->sc_slot, *sc->sc_dmalen, *sc->sc_dmaaddr, sc->sc_iswrite));

	/*
	 * the rules say we cannot transfer more than the limit
	 * of this DMA chip (64k) and we cannot cross a 8k boundary.
	 */
	size = min(*sc->sc_dmalen, ESPMAX);
	size = min(size, DMAMAX((size_t) *sc->sc_dmaaddr));
	sc->sc_dmasize = size;

	ESP_DMA(("dma_start: dmasize = %d\n", sc->sc_dmasize));

	/* Load address, set/clear unaligned transfer and read/write bits. */
	/* XXX PICK AN ADDRESS TYPE, AND STICK TO IT! */
	if ((u_long)*addr > VM_MIN_KERNEL_ADDRESS) {
		*sc->sc_sda = vatopa((u_long)*addr) >> 2;
	} else {
		*sc->sc_sda = k0segtophys((u_long)*addr) >> 2;
	}
	wbflush();
	dic = *sc->sc_dic;
	dic &= ~TCDS_DIC_ADDRMASK;
	dic |= (vm_offset_t)*addr & TCDS_DIC_ADDRMASK;
	if (datain)
		dic |= TCDS_DIC_WRITE;
	else
		dic &= ~TCDS_DIC_WRITE;
	*sc->sc_dic = dic;
	wbflush();

	/* Program the SCSI counter */
	ESP_WRITE_REG(sc->sc_esp, ESP_TCL, size);
	ESP_WRITE_REG(sc->sc_esp, ESP_TCM, size >> 8);
	if (sc->sc_esp->sc_rev == ESP200) {
		ESP_WRITE_REG(sc->sc_esp, ESP_TCH, size >> 16);
	}
	/* load the count in */
	ESPCMD(sc->sc_esp, ESPCMD_NOP|ESPCMD_DMA);

	/*
	 * Note that if `size' is 0, we've already transceived all
	 * the bytes we want but we're still in the DATA PHASE.
	 * Apparently, the device needs padding. Also, a transfer
	 * size of 0 means "maximum" to the chip DMA logic.
	 */
	ESPCMD(sc->sc_esp, (size==0?ESPCMD_TRPAD:ESPCMD_TRANS)|ESPCMD_DMA);

	sc->sc_active = 1;

	/* Start DMA */
	tcds_dma_enable(sc, 1);
}

d167 1
a167 1
			addr = (u_int32_t *)phystok0seg(addr);
d188 1
a188 1
			addr = (u_int32_t *)phystok0seg(addr);
d207 72
@


1.2
log
@from netbsd:
machine-independent TurboChannel bus configuration.  These files
deal with stuff like:
        (1) configuring built-in devices,
        (2) looking at TC slots configuring any devices found.
The lists of slots, slot locations, etc. and built-in devices
are provided by machine-dependent code.  Interrupt handling
is also provided by machine-dependent code, but the MD code provides
hooks so that standard names for 'establish' and 'disestablish'
can be used in drivers.

This code requires <machine/tc_machdep.h>, which defines some
portability types specific to the TurboChannel bus code.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: tcds_dma.c,v 1.5 1995/09/05 15:07:05 cgd Exp $	*/
a43 3
#include <alpha/autoconf.h>
#include <alpha/cpu.h>

d47 3
a49 1
#include <alpha/tc/tcds_dmavar.h>
a51 1
#include <alpha/tc/tcds.h>
d53 10
a62 6
int dmaprint		__P((void *, char *));
void dmaattach		__P((struct device *, struct device *, void *));
int dmamatch		__P((struct device *, struct cfdata *, void *));
void dma_reset		__P((struct dma_softc *));
void dma_start		__P((struct dma_softc *, caddr_t *, size_t *, int));
int dmaintr		__P((struct dma_softc *));
a63 4
/*
 * dma_init --
 *	Initialize AXP DMA for ESP.
 */
d65 2
a66 2
dma_init(sc)
	struct dma_softc *sc;
a67 2
	/* TCDS register address initialization. */
	tcds_dma_init(sc, sc->sc_dev.dv_unit);
d69 1
a69 6
	/* Indirect functions. */
	sc->reset = dma_reset;
	sc->enintr = NULL;
	sc->start = dma_start;
	sc->isintr = NULL;
	sc->intr = dmaintr;
d72 3
a74 3
void
dma_reset(sc)
	struct dma_softc *sc;
d76 6
a81 2
	/* TCDS SCSI disable/reset/enable. */
	tcds_scsi_reset(sc->sc_dev.dv_unit);
d83 2
a84 1
	sc->sc_active = 0;			/* and of course we aren't */
d87 2
a88 16
/*
 * SPARC:
 *	The rules say we cannot transfer more than the limit of this
 *	DMA chip (64k for old and 16Mb for new), and we cannot cross
 *	a 16Mb boundary.
 * AXP:
 *	We're doing physical DMA.  Since pages on the AXP are 8K, we
 *	don't transfer more than that, or cross an 8K boundary, in a
 *	single transfer.
 */
#define ESPMAX								\
	((sc->sc_esp->sc_rev == ESP200) ? (16 * 1024 * 1024) :		\
	(sc->sc_esp->sc_rev == NCR53C94) ? (8 * 1024) : (64 * 1024))
#define DMAMAX(a)							\
	(sc->sc_esp->sc_rev == NCR53C94) ? 0x2000 - ((a) & 0x1fff) :	\
	(0x01000000 - ((a) & 0x00ffffff))
d94 3
a96 3
dma_start(sc, addr, len, datain)
	struct dma_softc *sc;
	char **addr;
d98 1
a98 1
	int datain;
a99 2
	/* we do the loading of the transfer counter */
	volatile espreg_t *esp = sc->sc_esp->sc_reg;
d101 1
a101 1
	int size;
d105 1
d107 8
a114 6
#ifdef DMA_DEBUG
	printf("%s: dma_start %d bytes %s 0x%08x\n",
	    sc->sc_dev.dv_xname, *len, datain ? "to" : "from", *addr);
#endif
	size = min(*len, ESPMAX);
	size = min(size, DMAMAX((size_t)*addr));
d117 1
a117 16
#ifdef DMA_DEBUG
	printf("dma_start: transfer = %d\n", sc->sc_dmasize);
#endif

#ifdef TK_NOT_NECESSARY
	tcds_dma_disable(sc->sc_dev.dv_unit);			wbflush();
	tcds_scsi_disable(sc->sc_dev.dv_unit);			wbflush();
#endif

	/* Load the count in. */
	esp->esp_tcl = size & 0xff;				wbflush();
	esp->esp_tcm = (size >> 8) & 0xff;			wbflush();
	if (sc->sc_esp->sc_rev == ESP200) {
		esp->esp_tch = (size >> 16) & 0xff;		wbflush();
	}
	ESPCMD(sc->sc_esp, ESPCMD_NOP|ESPCMD_DMA);
d122 1
a122 1
		*sc->sda = vatopa((u_long)*addr) >> 2;		wbflush();
d124 1
a124 1
		*sc->sda = k0segtophys((u_long)*addr) >> 2;	wbflush();
d126 2
a127 1
	dic = *sc->dic;
d134 2
a135 1
	*sc->dic = dic;						wbflush();
d137 8
a144 4
#ifdef TK_NOT_NECESSARY
	tcds_scsi_enable(sc->sc_dev.dv_unit);			wbflush();
	tcds_dma_enable(sc->sc_dev.dv_unit);			wbflush();
#endif
d146 7
a152 2
	/* and kick the SCSI */
	ESPCMD(sc->sc_esp, ESPCMD_TRANS|ESPCMD_DMA);
d155 3
d168 2
a169 2
dmaintr(sc)
	struct dma_softc *sc;
a170 1
	volatile espreg_t *esp = sc->sc_esp->sc_reg;
d172 3
a174 2
	int resid, trans;
	char *addr;
d176 1
a176 8
#ifdef DMA_DEBUG
	printf("%s: dmaintr\n", sc->sc_dev.dv_xname);
#endif

#ifdef DIAGNOSTIC
	if (sc->sc_active == 0)
		panic("dmaintr: %s: DMA inactive", sc->sc_dev.dv_xname);
#endif
d181 6
a186 4
#ifdef TK_NOT_NECESSARY
	tcds_dma_disable(sc->sc_dev.dv_unit);			wbflush();
	tcds_scsi_disable(sc->sc_dev.dv_unit);			wbflush();
#endif
d189 12
a200 3
	resid = RR(esp->esp_fflag) & ESPFIFO_FF;		wbflush();
	if (!(*sc->dic & TCDS_DIC_WRITE) && resid != 0) {	wbflush();
		printf("%s: empty FIFO of %d ", sc->sc_dev.dv_xname, resid);
d205 2
a206 2
	resid += RR(esp->esp_tcl);				wbflush();
	resid += RR(esp->esp_tcm) << 8;				wbflush();
d208 8
a215 1
		resid += RR(esp->esp_tch) << 16;		wbflush();
d217 3
a219 3
	if (trans < 0) {			/* transferred < 0? */
		printf("%s: xfer (%d) > req (%d)\n",
		    sc->sc_dev.dv_xname, trans, sc->sc_dmasize);
d223 2
a224 23
	/* Handle unaligned starting address, length. */
	dud = *sc->dud0;					wbflush();
	if (dud & (TCDS_SCSI0_DUD0_VALID01 |
	    TCDS_SCSI0_DUD0_VALID10 | TCDS_SCSI0_DUD0_VALID11)) {
		addr = (char *)((vm_offset_t)*sc->sc_dmaaddr & ~0x03);
		if (dud & TCDS_SCSI0_DUD0_VALID01)
			addr[1] = dud & TCDS_SCSI0_DUD0_BYTE01;
		if (dud & TCDS_SCSI0_DUD0_VALID10)
			addr[2] = dud & TCDS_SCSI0_DUD0_BYTE10;
		if (dud & TCDS_SCSI0_DUD0_VALID11)
			addr[3] = dud & TCDS_SCSI0_DUD0_BYTE11;
	}
	dud = *sc->dud1;					wbflush();
	if (dud & (TCDS_SCSI0_DUD1_VALID00 |
	    TCDS_SCSI0_DUD1_VALID01 | TCDS_SCSI0_DUD1_VALID10)) {
		addr = (char *)((vm_offset_t)(*sc->sc_dmaaddr + trans) & ~0x03);
		if (dud & TCDS_SCSI0_DUD1_VALID00)
			addr[0] = dud & TCDS_SCSI0_DUD1_BYTE00;
		if (dud & TCDS_SCSI0_DUD1_VALID01)
			addr[1] = dud & TCDS_SCSI0_DUD1_BYTE01;
		if (dud & TCDS_SCSI0_DUD1_VALID10)
			addr[2] = dud & TCDS_SCSI0_DUD1_BYTE10;
	}
d226 19
a244 9
#ifdef DMA_DEBUG
	{ u_int32_t tcl, tcm, tch;
	tcl = RR(esp->esp_tcl);					wbflush();
	tcm = RR(esp->esp_tcm);					wbflush();
	tch = sc->sc_esp->sc_rev == ESP200 ? RR(esp->esp_tch) : 0;
								wbflush();
	printf("dmaintr: tcl=%d, tcm=%d, tch=%d, resid=%d, trans=%d\n",
	    tcl, tcm, tch, resid, trans);
	}
d246 20
a265 3
#ifdef SPARC_DRIVER
	if (DMACSR(sc) & D_WRITE)
		cache_flush(*sc->sc_dmaaddr, trans);
d267 8
d278 3
a280 5
	if (!*sc->sc_dmalen ||
	    sc->sc_esp->sc_phase != sc->sc_esp->sc_prevphase) {
#ifdef TK_NOT_NECESSARY
		tcds_scsi_enable(sc->sc_dev.dv_unit);		wbflush();
#endif
a281 1
	}
d284 1
a284 1
	dma_start(sc, sc->sc_dmaaddr, sc->sc_dmalen, *sc->dic & TCDS_DIC_WRITE);
d286 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
