head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.30
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.26
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.22
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.24
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.16
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.20
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.18
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.14
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.12
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.10
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.8
	OPENBSD_5_0:1.17.0.6
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.4
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.2
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.13.0.32
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.28
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.26
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.24
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.22
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.20
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.18
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.16
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.14
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.12
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.10
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.8
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.6
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.13
	OPENBSD_3_3:1.13.0.4
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.13
	UBC:1.11.0.2
	UBC_BASE:1.11
	OPENBSD_3_0:1.10.0.20
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.18
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.16
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.14
	OPENBSD_2_7_BASE:1.10
	SMP:1.10.0.12
	SMP_BASE:1.10
	kame_19991208:1.10
	OPENBSD_2_6:1.10.0.10
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.8
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.6
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.4
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.17
date	2010.04.04.12.49.27;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2009.12.25.20.52.36;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2009.09.17.19.28.22;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2009.07.26.18.48.54;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2002.05.02.22.56.06;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.01.26.28;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.06.19.53.13;	author miod;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	97.07.19.20.44.19;	author niklas;	state Exp;
branches
	1.10.12.1;
next	1.9;

1.9
date	97.04.10.15.45.25;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.04.10.03.01.05;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	97.04.02.22.08.10;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.01.24.19.58.19;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.12.08.00.20.58;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.11.12.20.29.45;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.10.30.22.41.21;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.07.29.23.02.27;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.06.18.09.45.26;	author deraadt;	state Exp;
branches;
next	;

1.10.12.1
date	2001.11.13.21.00.49;	author niklas;	state Exp;
branches;
next	1.10.12.2;

1.10.12.2
date	2002.03.28.10.06.13;	author niklas;	state Exp;
branches;
next	1.10.12.3;

1.10.12.3
date	2003.03.27.23.18.07;	author niklas;	state Exp;
branches;
next	;

1.11.2.1
date	2002.06.11.03.33.41;	author art;	state Exp;
branches;
next	;


desc
@@


1.17
log
@OpenBSD uses bus_space_copy_#, not bus_space_copy_region_#. Make sure only the
first name is used, and remove any #define foo_region foo compatibility
defines.
Also, on sparc64, do not provide a `raw' version of bus_space_copy.
@
text
@/* $OpenBSD: tc_bus_mem.c,v 1.16 2009/12/25 20:52:36 miod Exp $ */
/* $NetBSD: tc_bus_mem.c,v 1.25 2001/09/04 05:31:28 thorpej Exp $ */

/*
 * Copyright (c) 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * Common TurboChannel Chipset "bus memory" functions.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/syslog.h>
#include <sys/device.h>

#include <uvm/uvm_extern.h>

#include <machine/bus.h>
#include <dev/tc/tcvar.h>

#define	__C(A,B)	__CONCAT(A,B)

/* mapping/unmapping */
int		tc_mem_map(void *, bus_addr_t, bus_size_t, int,
		    bus_space_handle_t *);
void		tc_mem_unmap(void *, bus_space_handle_t, bus_size_t);
int		tc_mem_subregion(void *, bus_space_handle_t, bus_size_t,
		    bus_size_t, bus_space_handle_t *);

/* allocation/deallocation */
int		tc_mem_alloc(void *, bus_addr_t, bus_addr_t, bus_size_t,
		    bus_size_t, bus_addr_t, int, bus_addr_t *,
		    bus_space_handle_t *);
void		tc_mem_free(void *, bus_space_handle_t, bus_size_t);

/* get kernel virtual address */
void *		tc_mem_vaddr(void *, bus_space_handle_t);

/* barrier */
inline void	tc_mem_barrier(void *, bus_space_handle_t,
		    bus_size_t, bus_size_t, int);

/* read (single) */
inline u_int8_t	tc_mem_read_1(void *, bus_space_handle_t, bus_size_t);
inline u_int16_t tc_mem_read_2(void *, bus_space_handle_t, bus_size_t);
inline u_int32_t tc_mem_read_4(void *, bus_space_handle_t, bus_size_t);
inline u_int64_t tc_mem_read_8(void *, bus_space_handle_t, bus_size_t);

/* read multiple */
void		tc_mem_read_multi_1(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t);
void		tc_mem_read_multi_2(void *, bus_space_handle_t,
		    bus_size_t, u_int16_t *, bus_size_t);
void		tc_mem_read_multi_4(void *, bus_space_handle_t,
		    bus_size_t, u_int32_t *, bus_size_t);
void		tc_mem_read_multi_8(void *, bus_space_handle_t,
		    bus_size_t, u_int64_t *, bus_size_t);

/* read region */
void		tc_mem_read_region_1(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t);
void		tc_mem_read_region_2(void *, bus_space_handle_t,
		    bus_size_t, u_int16_t *, bus_size_t);
void		tc_mem_read_region_4(void *, bus_space_handle_t,
		    bus_size_t, u_int32_t *, bus_size_t);
void		tc_mem_read_region_8(void *, bus_space_handle_t,
		    bus_size_t, u_int64_t *, bus_size_t);

/* write (single) */
inline void	tc_mem_write_1(void *, bus_space_handle_t, bus_size_t,
		    u_int8_t);
inline void	tc_mem_write_2(void *, bus_space_handle_t, bus_size_t,
		    u_int16_t);
inline void	tc_mem_write_4(void *, bus_space_handle_t, bus_size_t,
		    u_int32_t);
inline void	tc_mem_write_8(void *, bus_space_handle_t, bus_size_t,
		    u_int64_t);

/* write multiple */
void		tc_mem_write_multi_1(void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t);
void		tc_mem_write_multi_2(void *, bus_space_handle_t,
		    bus_size_t, const u_int16_t *, bus_size_t);
void		tc_mem_write_multi_4(void *, bus_space_handle_t,
		    bus_size_t, const u_int32_t *, bus_size_t);
void		tc_mem_write_multi_8(void *, bus_space_handle_t,
		    bus_size_t, const u_int64_t *, bus_size_t);

/* write region */
void		tc_mem_write_region_1(void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t);
void		tc_mem_write_region_2(void *, bus_space_handle_t,
		    bus_size_t, const u_int16_t *, bus_size_t);
void		tc_mem_write_region_4(void *, bus_space_handle_t,
		    bus_size_t, const u_int32_t *, bus_size_t);
void		tc_mem_write_region_8(void *, bus_space_handle_t,
		    bus_size_t, const u_int64_t *, bus_size_t);

/* set multiple */
void		tc_mem_set_multi_1(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t, bus_size_t);
void		tc_mem_set_multi_2(void *, bus_space_handle_t,
		    bus_size_t, u_int16_t, bus_size_t);
void		tc_mem_set_multi_4(void *, bus_space_handle_t,
		    bus_size_t, u_int32_t, bus_size_t);
void		tc_mem_set_multi_8(void *, bus_space_handle_t,
		    bus_size_t, u_int64_t, bus_size_t);

/* set region */
void		tc_mem_set_region_1(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t, bus_size_t);
void		tc_mem_set_region_2(void *, bus_space_handle_t,
		    bus_size_t, u_int16_t, bus_size_t);
void		tc_mem_set_region_4(void *, bus_space_handle_t,
		    bus_size_t, u_int32_t, bus_size_t);
void		tc_mem_set_region_8(void *, bus_space_handle_t,
		    bus_size_t, u_int64_t, bus_size_t);

/* copy */
void		tc_mem_copy_1(void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t);
void		tc_mem_copy_2(void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t);
void		tc_mem_copy_4(void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t);
void		tc_mem_copy_8(void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t);

struct alpha_bus_space tc_mem_space = {
	/* cookie */
	NULL,

	/* mapping/unmapping */
	tc_mem_map,
	tc_mem_unmap,
	tc_mem_subregion,

	/* allocation/deallocation */
	tc_mem_alloc,
	tc_mem_free,

	/* get kernel virtual address */
	tc_mem_vaddr,

	/* barrier */
	tc_mem_barrier,

	/* read (single) */
	tc_mem_read_1,
	tc_mem_read_2,
	tc_mem_read_4,
	tc_mem_read_8,

	/* read multiple */
	tc_mem_read_multi_1,
	tc_mem_read_multi_2,
	tc_mem_read_multi_4,
	tc_mem_read_multi_8,

	/* read region */
	tc_mem_read_region_1,
	tc_mem_read_region_2,
	tc_mem_read_region_4,
	tc_mem_read_region_8,

	/* write (single) */
	tc_mem_write_1,
	tc_mem_write_2,
	tc_mem_write_4,
	tc_mem_write_8,

	/* write multiple */
	tc_mem_write_multi_1,
	tc_mem_write_multi_2,
	tc_mem_write_multi_4,
	tc_mem_write_multi_8,

	/* write region */
	tc_mem_write_region_1,
	tc_mem_write_region_2,
	tc_mem_write_region_4,
	tc_mem_write_region_8,

	/* set multiple */
	tc_mem_set_multi_1,
	tc_mem_set_multi_2,
	tc_mem_set_multi_4,
	tc_mem_set_multi_8,

	/* set region */
	tc_mem_set_region_1,
	tc_mem_set_region_2,
	tc_mem_set_region_4,
	tc_mem_set_region_8,

	/* copy */
	tc_mem_copy_1,
	tc_mem_copy_2,
	tc_mem_copy_4,
	tc_mem_copy_8,
};

bus_space_tag_t
tc_bus_mem_init(memv)
	void *memv;
{
	bus_space_tag_t h = &tc_mem_space;

	h->abs_cookie = memv;
	return (h);
}

/* ARGSUSED */
int
tc_mem_map(v, memaddr, memsize, flags, memhp)
	void *v;
	bus_addr_t memaddr;
	bus_size_t memsize;
	int flags;
	bus_space_handle_t *memhp;
{
	int cacheable = flags & BUS_SPACE_MAP_CACHEABLE;
	int linear = flags & BUS_SPACE_MAP_LINEAR;

	/* Requests for linear uncacheable space can't be satisfied. */
	if (linear && !cacheable)
		return (EOPNOTSUPP);

	if (memaddr & 0x7)
		panic("tc_mem_map needs 8 byte alignment");
	if (cacheable)
		*memhp = ALPHA_PHYS_TO_K0SEG(memaddr);
	else
		*memhp = ALPHA_PHYS_TO_K0SEG(TC_DENSE_TO_SPARSE(memaddr));
	return (0);
}

/* ARGSUSED */
void
tc_mem_unmap(v, memh, memsize)
	void *v;
	bus_space_handle_t memh;
	bus_size_t memsize;
{

	/* XXX XX XXX nothing to do. */
}

int
tc_mem_subregion(v, memh, offset, size, nmemh)
	void *v;
	bus_space_handle_t memh, *nmemh;
	bus_size_t offset, size;
{

	/* Disallow subregioning that would make the handle unaligned. */
	if ((offset & 0x7) != 0)
		return (1);

	if ((memh & TC_SPACE_SPARSE) != 0)
		*nmemh = memh + (offset << 1);
	else
		*nmemh = memh + offset;

	return (0);
}

int
tc_mem_alloc(v, rstart, rend, size, align, boundary, flags, addrp, bshp)
	void *v;
	bus_addr_t rstart, rend, *addrp;
	bus_size_t size, align, boundary;
	int flags;
	bus_space_handle_t *bshp;
{

	/* XXX XXX XXX XXX XXX XXX */
	panic("tc_mem_alloc unimplemented");
}

void
tc_mem_free(v, bsh, size)
	void *v;
	bus_space_handle_t bsh;
	bus_size_t size;
{

	/* XXX XXX XXX XXX XXX XXX */
	panic("tc_mem_free unimplemented");
}

void *
tc_mem_vaddr(void *v, bus_space_handle_t bsh)
{
#ifdef DIAGNOSTIC
	if ((bsh & TC_SPACE_SPARSE) != 0) {
		/*
		 * tc_mem_map() catches linear && !cacheable,
		 * so we shouldn't come here
		 */
		panic("tc_mem_vaddr");
	}
#endif
	return ((void *)bsh);
}

inline void
tc_mem_barrier(v, h, o, l, f)
	void *v;
	bus_space_handle_t h;
	bus_size_t o, l;
	int f;
{

	if ((f & BUS_SPACE_BARRIER_READ) != 0)
		alpha_mb();
	else if ((f & BUS_SPACE_BARRIER_WRITE) != 0)
		alpha_wmb();
}

inline u_int8_t
tc_mem_read_1(v, memh, off)
	void *v;
	bus_space_handle_t memh;
	bus_size_t off;
{
	volatile u_int8_t *p;

	alpha_mb();		/* XXX XXX XXX */

	if ((memh & TC_SPACE_SPARSE) != 0)
		panic("tc_mem_read_1 not implemented for sparse space");

	p = (u_int8_t *)(memh + off);
	return (*p);
}

inline u_int16_t
tc_mem_read_2(v, memh, off)
	void *v;
	bus_space_handle_t memh;
	bus_size_t off;
{
	volatile u_int16_t *p;

	alpha_mb();		/* XXX XXX XXX */

	if ((memh & TC_SPACE_SPARSE) != 0)
		panic("tc_mem_read_2 not implemented for sparse space");

	p = (u_int16_t *)(memh + off);
	return (*p);
}

inline u_int32_t
tc_mem_read_4(v, memh, off)
	void *v;
	bus_space_handle_t memh;
	bus_size_t off;
{
	volatile u_int32_t *p;

	alpha_mb();		/* XXX XXX XXX */

	if ((memh & TC_SPACE_SPARSE) != 0)
		/* Nothing special to do for 4-byte sparse space accesses */
		p = (u_int32_t *)(memh + (off << 1));
	else
		p = (u_int32_t *)(memh + off);
	return (*p);
}

inline u_int64_t
tc_mem_read_8(v, memh, off)
	void *v;
	bus_space_handle_t memh;
	bus_size_t off;
{
	volatile u_int64_t *p;

	alpha_mb();		/* XXX XXX XXX */

	if ((memh & TC_SPACE_SPARSE) != 0)
		panic("tc_mem_read_8 not implemented for sparse space");

	p = (u_int64_t *)(memh + off);
	return (*p);
}

#define	tc_mem_read_multi_N(BYTES,TYPE)					\
void									\
__C(tc_mem_read_multi_,BYTES)(v, h, o, a, c)				\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	TYPE *a;							\
{									\
									\
	while (c-- > 0) {						\
		tc_mem_barrier(v, h, o, sizeof *a, BUS_SPACE_BARRIER_READ); \
		*a++ = __C(tc_mem_read_,BYTES)(v, h, o);		\
	}								\
}
tc_mem_read_multi_N(1,u_int8_t)
tc_mem_read_multi_N(2,u_int16_t)
tc_mem_read_multi_N(4,u_int32_t)
tc_mem_read_multi_N(8,u_int64_t)

#define	tc_mem_read_region_N(BYTES,TYPE)				\
void									\
__C(tc_mem_read_region_,BYTES)(v, h, o, a, c)				\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	TYPE *a;							\
{									\
									\
	while (c-- > 0) {						\
		*a++ = __C(tc_mem_read_,BYTES)(v, h, o);		\
		o += sizeof *a;						\
	}								\
}
tc_mem_read_region_N(1,u_int8_t)
tc_mem_read_region_N(2,u_int16_t)
tc_mem_read_region_N(4,u_int32_t)
tc_mem_read_region_N(8,u_int64_t)

inline void
tc_mem_write_1(v, memh, off, val)
	void *v;
	bus_space_handle_t memh;
	bus_size_t off;
	u_int8_t val;
{

	if ((memh & TC_SPACE_SPARSE) != 0) {
		volatile u_int64_t *p, v;
		u_int64_t shift, msk;

		shift = off & 0x3;
		off &= 0x3;

		p = (u_int64_t *)(memh + (off << 1));

		msk = ~(0x1 << shift) & 0xf;
		v = (msk << 32) | (((u_int64_t)val) << (shift * 8));

		*p = val;
	} else {
		volatile u_int8_t *p;

		p = (u_int8_t *)(memh + off);
		*p = val;
	}
        alpha_mb();		/* XXX XXX XXX */
}

inline void
tc_mem_write_2(v, memh, off, val)
	void *v;
	bus_space_handle_t memh;
	bus_size_t off;
	u_int16_t val;
{

	if ((memh & TC_SPACE_SPARSE) != 0) {
		volatile u_int64_t *p, v;
		u_int64_t shift, msk;

		shift = off & 0x2;
		off &= 0x3;

		p = (u_int64_t *)(memh + (off << 1));

		msk = ~(0x3 << shift) & 0xf;
		v = (msk << 32) | (((u_int64_t)val) << (shift * 8));

		*p = val;
	} else {
		volatile u_int16_t *p;

		p = (u_int16_t *)(memh + off);
		*p = val;
	}
        alpha_mb();		/* XXX XXX XXX */
}

inline void
tc_mem_write_4(v, memh, off, val)
	void *v;
	bus_space_handle_t memh;
	bus_size_t off;
	u_int32_t val;
{
	volatile u_int32_t *p;

	if ((memh & TC_SPACE_SPARSE) != 0)
		/* Nothing special to do for 4-byte sparse space accesses */
		p = (u_int32_t *)(memh + (off << 1));
	else
		p = (u_int32_t *)(memh + off);
	*p = val;
        alpha_mb();		/* XXX XXX XXX */
}

inline void
tc_mem_write_8(v, memh, off, val)
	void *v;
	bus_space_handle_t memh;
	bus_size_t off;
	u_int64_t val;
{
	volatile u_int64_t *p;

	if ((memh & TC_SPACE_SPARSE) != 0)
		panic("tc_mem_read_8 not implemented for sparse space");

	p = (u_int64_t *)(memh + off);
	*p = val;
        alpha_mb();		/* XXX XXX XXX */
}

#define	tc_mem_write_multi_N(BYTES,TYPE)				\
void									\
__C(tc_mem_write_multi_,BYTES)(v, h, o, a, c)				\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	const TYPE *a;							\
{									\
									\
	while (c-- > 0) {						\
		__C(tc_mem_write_,BYTES)(v, h, o, *a++);		\
		tc_mem_barrier(v, h, o, sizeof *a, BUS_SPACE_BARRIER_WRITE); \
	}								\
}
tc_mem_write_multi_N(1,u_int8_t)
tc_mem_write_multi_N(2,u_int16_t)
tc_mem_write_multi_N(4,u_int32_t)
tc_mem_write_multi_N(8,u_int64_t)

#define	tc_mem_write_region_N(BYTES,TYPE)				\
void									\
__C(tc_mem_write_region_,BYTES)(v, h, o, a, c)				\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	const TYPE *a;							\
{									\
									\
	while (c-- > 0) {						\
		__C(tc_mem_write_,BYTES)(v, h, o, *a++);		\
		o += sizeof *a;						\
	}								\
}
tc_mem_write_region_N(1,u_int8_t)
tc_mem_write_region_N(2,u_int16_t)
tc_mem_write_region_N(4,u_int32_t)
tc_mem_write_region_N(8,u_int64_t)

#define	tc_mem_set_multi_N(BYTES,TYPE)					\
void									\
__C(tc_mem_set_multi_,BYTES)(v, h, o, val, c)				\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	TYPE val;							\
{									\
									\
	while (c-- > 0) {						\
		__C(tc_mem_write_,BYTES)(v, h, o, val);			\
		tc_mem_barrier(v, h, o, sizeof val, BUS_SPACE_BARRIER_WRITE); \
	}								\
}
tc_mem_set_multi_N(1,u_int8_t)
tc_mem_set_multi_N(2,u_int16_t)
tc_mem_set_multi_N(4,u_int32_t)
tc_mem_set_multi_N(8,u_int64_t)

#define	tc_mem_set_region_N(BYTES,TYPE)					\
void									\
__C(tc_mem_set_region_,BYTES)(v, h, o, val, c)				\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	TYPE val;							\
{									\
									\
	while (c-- > 0) {						\
		__C(tc_mem_write_,BYTES)(v, h, o, val);			\
		o += sizeof val;					\
	}								\
}
tc_mem_set_region_N(1,u_int8_t)
tc_mem_set_region_N(2,u_int16_t)
tc_mem_set_region_N(4,u_int32_t)
tc_mem_set_region_N(8,u_int64_t)

#define	tc_mem_copy_N(BYTES)						\
void									\
__C(tc_mem_copy_,BYTES)(v, h1, o1, h2, o2, c)				\
	void *v;							\
	bus_space_handle_t h1, h2;					\
	bus_size_t o1, o2, c;						\
{									\
	bus_size_t o;							\
									\
	if ((h1 & TC_SPACE_SPARSE) != 0 &&				\
	    (h2 & TC_SPACE_SPARSE) != 0) {				\
		bcopy((void *)(h1 + o1), (void *)(h2 + o2), c * BYTES); \
		return;							\
	}								\
									\
	if (h1 + o1 >= h2 + o2)						\
		/* src after dest: copy forward */			\
		for (o = 0; c > 0; c--, o += BYTES)			\
			__C(tc_mem_write_,BYTES)(v, h2, o2 + o,		\
			    __C(tc_mem_read_,BYTES)(v, h1, o1 + o));	\
	else								\
		/* dest after src: copy backwards */			\
		for (o = (c - 1) * BYTES; c > 0; c--, o -= BYTES)	\
			__C(tc_mem_write_,BYTES)(v, h2, o2 + o,		\
			    __C(tc_mem_read_,BYTES)(v, h1, o1 + o));	\
}
tc_mem_copy_N(1)
tc_mem_copy_N(2)
tc_mem_copy_N(4)
tc_mem_copy_N(8)
@


1.16
log
@Add bus_space_vaddr() when applicable; from NetBSD.
@
text
@d1 1
a1 1
/* $OpenBSD: tc_bus_mem.c,v 1.15 2009/09/17 19:28:22 miod Exp $ */
d145 1
a145 1
void		tc_mem_copy_region_1(void *, bus_space_handle_t,
d147 1
a147 1
void		tc_mem_copy_region_2(void *, bus_space_handle_t,
d149 1
a149 1
void		tc_mem_copy_region_4(void *, bus_space_handle_t,
d151 1
a151 1
void		tc_mem_copy_region_8(void *, bus_space_handle_t,
d222 4
a225 4
	tc_mem_copy_region_1,
	tc_mem_copy_region_2,
	tc_mem_copy_region_4,
	tc_mem_copy_region_8,
d624 1
a624 1
#define	tc_mem_copy_region_N(BYTES)					\
d626 1
a626 1
__C(tc_mem_copy_region_,BYTES)(v, h1, o1, h2, o2, c)			\
d650 4
a653 4
tc_mem_copy_region_N(1)
tc_mem_copy_region_N(2)
tc_mem_copy_region_N(4)
tc_mem_copy_region_N(8)
@


1.15
log
@Fail bus_space_map() calls if the flags can't be honoured (such as
BUS_SPACE_MAP_LINEAR in i/o space, or noncacheable linear TURBOchannel
mappings).
From NetBSD
@
text
@d1 1
a1 1
/* $OpenBSD: tc_bus_mem.c,v 1.14 2009/07/26 18:48:54 miod Exp $ */
d61 3
d167 3
d315 15
@


1.14
log
@Make sure all platforms understand the flags argument of bus_space_map() and
bus_space_alloc() as a bitmask of flags, and not a boolean controlling
cacheability; and make sure the three MI BUS_SPACE_MAP_xxx values documented
in the manual page are defined on all platforms as well.
@
text
@d1 1
a1 1
/* $OpenBSD: tc_bus_mem.c,v 1.13 2002/05/02 22:56:06 miod Exp $ */
d241 6
d250 1
a250 1
	if (flags & BUS_SPACE_MAP_CACHEABLE)
@


1.13
log
@Big TURBOchannel support catchup from NetBSD, part 1.
A few local changes and tweaks remain.

This bring DEC 3000 machines back in the game, but framebuffers are still
not supported at the moment.

Thanks to ericj@@ and nate@@ for supplying me a DEC 3000 for testing.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d234 1
a234 1
tc_mem_map(v, memaddr, memsize, cacheable, memhp)
d238 1
a238 1
	int cacheable;
d244 1
a244 1
	if (cacheable)
@


1.12
log
@First round of __P removal in sys
@
text
@d1 2
a2 2
/*	$OpenBSD: tc_bus_mem.c,v 1.11 2001/11/06 19:53:13 miod Exp $	*/
/*	$NetBSD: tc_bus_mem.c,v 1.13 1996/12/02 22:19:34 cgd Exp $	*/
d40 1
d46 2
d142 1
a142 1
void		tc_mem_copy_1(void *, bus_space_handle_t,
d144 1
a144 1
void		tc_mem_copy_2(void *, bus_space_handle_t,
d146 1
a146 1
void		tc_mem_copy_4(void *, bus_space_handle_t,
d148 1
a148 1
void		tc_mem_copy_8(void *, bus_space_handle_t,
d151 1
a151 17
/* read multiple raw */
void		tc_mem_read_raw_multi_2(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t);
void		tc_mem_read_raw_multi_4(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t);
void		tc_mem_read_raw_multi_8(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t);

/* write multiple raw */
void		tc_mem_write_raw_multi_2(void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t);
void		tc_mem_write_raw_multi_4(void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t);
void		tc_mem_write_raw_multi_8(void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t);

static struct alpha_bus_space tc_mem_space = {
d216 4
a219 14
	tc_mem_copy_1,
	tc_mem_copy_2,
	tc_mem_copy_4,
	tc_mem_copy_8,

	/* write multiple raw */
	tc_mem_read_raw_multi_2,
	tc_mem_read_raw_multi_4,
	tc_mem_read_raw_multi_8,
	
	/* write multiple raw*/
	tc_mem_write_raw_multi_2,
	tc_mem_write_raw_multi_4,
	tc_mem_write_raw_multi_8,
d232 1
d251 1
d282 1
a282 1
tc_mem_alloc(v, rstart, rend, size, align, boundary, cacheable, addrp, bshp)
d286 1
a286 1
	int cacheable;
d313 1
a313 1
	if ((f & BUS_BARRIER_READ) != 0)
d315 1
a315 1
	else if ((f & BUS_BARRIER_WRITE) != 0)
d390 1
a390 1
__abs_c(tc_mem_read_multi_,BYTES)(v, h, o, a, c)			\
d398 2
a399 2
		tc_mem_barrier(v, h, o, sizeof *a, BUS_BARRIER_READ);	\
		*a++ = __abs_c(tc_mem_read_,BYTES)(v, h, o);		\
d409 1
a409 1
__abs_c(tc_mem_read_region_,BYTES)(v, h, o, a, c)			\
d417 1
a417 1
		*a++ = __abs_c(tc_mem_read_,BYTES)(v, h, o);		\
d523 1
a523 1
__abs_c(tc_mem_write_multi_,BYTES)(v, h, o, a, c)			\
d531 2
a532 2
		__abs_c(tc_mem_write_,BYTES)(v, h, o, *a++);		\
		tc_mem_barrier(v, h, o, sizeof *a, BUS_BARRIER_WRITE);	\
d542 1
a542 1
__abs_c(tc_mem_write_region_,BYTES)(v, h, o, a, c)			\
d550 1
a550 1
		__abs_c(tc_mem_write_,BYTES)(v, h, o, *a++);		\
d561 1
a561 1
__abs_c(tc_mem_set_multi_,BYTES)(v, h, o, val, c)			\
d569 2
a570 2
		__abs_c(tc_mem_write_,BYTES)(v, h, o, val);		\
		tc_mem_barrier(v, h, o, sizeof val, BUS_BARRIER_WRITE);	\
d580 1
a580 1
__abs_c(tc_mem_set_region_,BYTES)(v, h, o, val, c)			\
d588 1
a588 1
		__abs_c(tc_mem_write_,BYTES)(v, h, o, val);		\
d597 1
a597 1
#define	tc_mem_copy_N(BYTES)						\
d599 1
a599 1
__abs_c(tc_mem_copy_,BYTES)(v, h1, o1, h2, o2, c)			\
d604 1
a604 1
	bus_size_t i, o;						\
d608 1
a608 1
		bcopy((void *)(h1 + o1), (void *)(h2 + o2), c * BYTES);	\
d612 5
a616 5
	/* Circumvent a common case of overlapping problems */		\
	if (h1 == h2 && o2 > o1)					\
		for (i = 0, o = (c - 1) * BYTES; i < c; i++, o -= BYTES)\
			__abs_c(tc_mem_write_,BYTES)(v, h2, o2 + o,	\
			    __abs_c(tc_mem_read_,BYTES)(v, h1, o1 + o));\
d618 9
a626 60
		for (i = 0, o = 0; i < c; i++, o += BYTES)		\
			__abs_c(tc_mem_write_,BYTES)(v, h2, o2 + o,	\
			    __abs_c(tc_mem_read_,BYTES)(v, h1, o1 + o));\
}
tc_mem_copy_N(1)
tc_mem_copy_N(2)
tc_mem_copy_N(4)
tc_mem_copy_N(8)

#define tc_mem_read_raw_multi_N(BYTES,TYPE)				\
void									\
__abs_c(tc_mem_read_raw_multi_,BYTES)(v, h, o, a, c)			\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	u_int8_t *a;							\
{									\
	TYPE temp;							\
	int i;								\
									\
	while (c > 0) {							\
		tc_mem_barrier(v, h, o, BYTES, BUS_BARRIER_READ);	\
		temp = __abs_c(tc_mem_read_,BYTES)(v, h, o);		\
		for (i = 0; i < BYTES; i++) {				\
			*a++ = temp & 0xff;				\
			temp >>= 8;					\
		}							\
		c -= BYTES;						\
	}								\
}
tc_mem_read_raw_multi_N(2,u_int16_t)
tc_mem_read_raw_multi_N(4,u_int32_t)
tc_mem_read_raw_multi_N(8,u_int64_t)

#define tc_mem_write_raw_multi_N(BYTES,TYPE)				\
void									\
__abs_c(tc_mem_write_raw_multi_,BYTES)(v, h, o, a, c)			\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	const u_int8_t *a;						\
{									\
	TYPE temp;							\
	int i;								\
									\
	while (c > 0) {							\
		temp = 0;						\
		for (i = BYTES - 1; i >= 0; i--) {			\
			temp <<= 8;					\
			temp |= *(a + i);				\
		}							\
		__abs_c(tc_mem_write_,BYTES)(v, h, o, temp);		\
		tc_mem_barrier(v, h, o, BYTES, BUS_BARRIER_WRITE);	\
		c -= BYTES;						\
		a += BYTES;						\
	}								\
}
tc_mem_write_raw_multi_N(2,u_int16_t)
tc_mem_write_raw_multi_N(4,u_int32_t)
tc_mem_write_raw_multi_N(8,u_int64_t)
@


1.11
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: tc_bus_mem.c,v 1.10 1997/07/19 20:44:19 niklas Exp $	*/
d46 5
a50 5
int		tc_mem_map __P((void *, bus_addr_t, bus_size_t, int,
		    bus_space_handle_t *));
void		tc_mem_unmap __P((void *, bus_space_handle_t, bus_size_t));
int		tc_mem_subregion __P((void *, bus_space_handle_t, bus_size_t,
		    bus_size_t, bus_space_handle_t *));
d53 1
a53 1
int		tc_mem_alloc __P((void *, bus_addr_t, bus_addr_t, bus_size_t,
d55 2
a56 2
		    bus_space_handle_t *));
void		tc_mem_free __P((void *, bus_space_handle_t, bus_size_t));
d59 2
a60 2
inline void	tc_mem_barrier __P((void *, bus_space_handle_t,
		    bus_size_t, bus_size_t, int));
d63 4
a66 4
inline u_int8_t	tc_mem_read_1 __P((void *, bus_space_handle_t, bus_size_t));
inline u_int16_t tc_mem_read_2 __P((void *, bus_space_handle_t, bus_size_t));
inline u_int32_t tc_mem_read_4 __P((void *, bus_space_handle_t, bus_size_t));
inline u_int64_t tc_mem_read_8 __P((void *, bus_space_handle_t, bus_size_t));
d69 8
a76 8
void		tc_mem_read_multi_1 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t));
void		tc_mem_read_multi_2 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int16_t *, bus_size_t));
void		tc_mem_read_multi_4 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int32_t *, bus_size_t));
void		tc_mem_read_multi_8 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int64_t *, bus_size_t));
d79 8
a86 8
void		tc_mem_read_region_1 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t));
void		tc_mem_read_region_2 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int16_t *, bus_size_t));
void		tc_mem_read_region_4 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int32_t *, bus_size_t));
void		tc_mem_read_region_8 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int64_t *, bus_size_t));
d89 8
a96 8
inline void	tc_mem_write_1 __P((void *, bus_space_handle_t, bus_size_t,
		    u_int8_t));
inline void	tc_mem_write_2 __P((void *, bus_space_handle_t, bus_size_t,
		    u_int16_t));
inline void	tc_mem_write_4 __P((void *, bus_space_handle_t, bus_size_t,
		    u_int32_t));
inline void	tc_mem_write_8 __P((void *, bus_space_handle_t, bus_size_t,
		    u_int64_t));
d99 8
a106 8
void		tc_mem_write_multi_1 __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t));
void		tc_mem_write_multi_2 __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int16_t *, bus_size_t));
void		tc_mem_write_multi_4 __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int32_t *, bus_size_t));
void		tc_mem_write_multi_8 __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int64_t *, bus_size_t));
d109 8
a116 8
void		tc_mem_write_region_1 __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t));
void		tc_mem_write_region_2 __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int16_t *, bus_size_t));
void		tc_mem_write_region_4 __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int32_t *, bus_size_t));
void		tc_mem_write_region_8 __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int64_t *, bus_size_t));
d119 8
a126 8
void		tc_mem_set_multi_1 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t, bus_size_t));
void		tc_mem_set_multi_2 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int16_t, bus_size_t));
void		tc_mem_set_multi_4 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int32_t, bus_size_t));
void		tc_mem_set_multi_8 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int64_t, bus_size_t));
d129 8
a136 8
void		tc_mem_set_region_1 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t, bus_size_t));
void		tc_mem_set_region_2 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int16_t, bus_size_t));
void		tc_mem_set_region_4 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int32_t, bus_size_t));
void		tc_mem_set_region_8 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int64_t, bus_size_t));
d139 8
a146 8
void		tc_mem_copy_1 __P((void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t));
void		tc_mem_copy_2 __P((void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t));
void		tc_mem_copy_4 __P((void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t));
void		tc_mem_copy_8 __P((void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t));
d149 6
a154 6
void		tc_mem_read_raw_multi_2 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t));
void		tc_mem_read_raw_multi_4 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t));
void		tc_mem_read_raw_multi_8 __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t));
d157 6
a162 6
void		tc_mem_write_raw_multi_2 __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t));
void		tc_mem_write_raw_multi_4 __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t));
void		tc_mem_write_raw_multi_8 __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t));
@


1.11.2.1
log
@Sync UBC branch to -current
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $NetBSD: tc_bus_mem.c,v 1.25 2001/09/04 05:31:28 thorpej Exp $ */
a39 1

a44 2
#define	__C(A,B)	__CONCAT(A,B)

d46 5
a50 5
int		tc_mem_map(void *, bus_addr_t, bus_size_t, int,
		    bus_space_handle_t *);
void		tc_mem_unmap(void *, bus_space_handle_t, bus_size_t);
int		tc_mem_subregion(void *, bus_space_handle_t, bus_size_t,
		    bus_size_t, bus_space_handle_t *);
d53 1
a53 1
int		tc_mem_alloc(void *, bus_addr_t, bus_addr_t, bus_size_t,
d55 2
a56 2
		    bus_space_handle_t *);
void		tc_mem_free(void *, bus_space_handle_t, bus_size_t);
d59 2
a60 2
inline void	tc_mem_barrier(void *, bus_space_handle_t,
		    bus_size_t, bus_size_t, int);
d63 4
a66 4
inline u_int8_t	tc_mem_read_1(void *, bus_space_handle_t, bus_size_t);
inline u_int16_t tc_mem_read_2(void *, bus_space_handle_t, bus_size_t);
inline u_int32_t tc_mem_read_4(void *, bus_space_handle_t, bus_size_t);
inline u_int64_t tc_mem_read_8(void *, bus_space_handle_t, bus_size_t);
d69 8
a76 8
void		tc_mem_read_multi_1(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t);
void		tc_mem_read_multi_2(void *, bus_space_handle_t,
		    bus_size_t, u_int16_t *, bus_size_t);
void		tc_mem_read_multi_4(void *, bus_space_handle_t,
		    bus_size_t, u_int32_t *, bus_size_t);
void		tc_mem_read_multi_8(void *, bus_space_handle_t,
		    bus_size_t, u_int64_t *, bus_size_t);
d79 8
a86 8
void		tc_mem_read_region_1(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t);
void		tc_mem_read_region_2(void *, bus_space_handle_t,
		    bus_size_t, u_int16_t *, bus_size_t);
void		tc_mem_read_region_4(void *, bus_space_handle_t,
		    bus_size_t, u_int32_t *, bus_size_t);
void		tc_mem_read_region_8(void *, bus_space_handle_t,
		    bus_size_t, u_int64_t *, bus_size_t);
d89 8
a96 8
inline void	tc_mem_write_1(void *, bus_space_handle_t, bus_size_t,
		    u_int8_t);
inline void	tc_mem_write_2(void *, bus_space_handle_t, bus_size_t,
		    u_int16_t);
inline void	tc_mem_write_4(void *, bus_space_handle_t, bus_size_t,
		    u_int32_t);
inline void	tc_mem_write_8(void *, bus_space_handle_t, bus_size_t,
		    u_int64_t);
d99 8
a106 8
void		tc_mem_write_multi_1(void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t);
void		tc_mem_write_multi_2(void *, bus_space_handle_t,
		    bus_size_t, const u_int16_t *, bus_size_t);
void		tc_mem_write_multi_4(void *, bus_space_handle_t,
		    bus_size_t, const u_int32_t *, bus_size_t);
void		tc_mem_write_multi_8(void *, bus_space_handle_t,
		    bus_size_t, const u_int64_t *, bus_size_t);
d109 8
a116 8
void		tc_mem_write_region_1(void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t);
void		tc_mem_write_region_2(void *, bus_space_handle_t,
		    bus_size_t, const u_int16_t *, bus_size_t);
void		tc_mem_write_region_4(void *, bus_space_handle_t,
		    bus_size_t, const u_int32_t *, bus_size_t);
void		tc_mem_write_region_8(void *, bus_space_handle_t,
		    bus_size_t, const u_int64_t *, bus_size_t);
d119 8
a126 8
void		tc_mem_set_multi_1(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t, bus_size_t);
void		tc_mem_set_multi_2(void *, bus_space_handle_t,
		    bus_size_t, u_int16_t, bus_size_t);
void		tc_mem_set_multi_4(void *, bus_space_handle_t,
		    bus_size_t, u_int32_t, bus_size_t);
void		tc_mem_set_multi_8(void *, bus_space_handle_t,
		    bus_size_t, u_int64_t, bus_size_t);
d129 8
a136 8
void		tc_mem_set_region_1(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t, bus_size_t);
void		tc_mem_set_region_2(void *, bus_space_handle_t,
		    bus_size_t, u_int16_t, bus_size_t);
void		tc_mem_set_region_4(void *, bus_space_handle_t,
		    bus_size_t, u_int32_t, bus_size_t);
void		tc_mem_set_region_8(void *, bus_space_handle_t,
		    bus_size_t, u_int64_t, bus_size_t);
d139 24
a162 8
void		tc_mem_copy_region_1(void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t);
void		tc_mem_copy_region_2(void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t);
void		tc_mem_copy_region_4(void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t);
void		tc_mem_copy_region_8(void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t);
d164 1
a164 1
struct alpha_bus_space tc_mem_space = {
d229 14
a242 4
	tc_mem_copy_region_1,
	tc_mem_copy_region_2,
	tc_mem_copy_region_4,
	tc_mem_copy_region_8,
a254 1
/* ARGSUSED */
a272 1
/* ARGSUSED */
d303 1
a303 1
tc_mem_alloc(v, rstart, rend, size, align, boundary, flags, addrp, bshp)
d307 1
a307 1
	int flags;
d334 1
a334 1
	if ((f & BUS_SPACE_BARRIER_READ) != 0)
d336 1
a336 1
	else if ((f & BUS_SPACE_BARRIER_WRITE) != 0)
d411 1
a411 1
__C(tc_mem_read_multi_,BYTES)(v, h, o, a, c)				\
d419 2
a420 2
		tc_mem_barrier(v, h, o, sizeof *a, BUS_SPACE_BARRIER_READ); \
		*a++ = __C(tc_mem_read_,BYTES)(v, h, o);		\
d430 1
a430 1
__C(tc_mem_read_region_,BYTES)(v, h, o, a, c)				\
d438 1
a438 1
		*a++ = __C(tc_mem_read_,BYTES)(v, h, o);		\
d544 1
a544 1
__C(tc_mem_write_multi_,BYTES)(v, h, o, a, c)				\
d552 2
a553 2
		__C(tc_mem_write_,BYTES)(v, h, o, *a++);		\
		tc_mem_barrier(v, h, o, sizeof *a, BUS_SPACE_BARRIER_WRITE); \
d563 1
a563 1
__C(tc_mem_write_region_,BYTES)(v, h, o, a, c)				\
d571 1
a571 1
		__C(tc_mem_write_,BYTES)(v, h, o, *a++);		\
d582 1
a582 1
__C(tc_mem_set_multi_,BYTES)(v, h, o, val, c)				\
d590 2
a591 2
		__C(tc_mem_write_,BYTES)(v, h, o, val);			\
		tc_mem_barrier(v, h, o, sizeof val, BUS_SPACE_BARRIER_WRITE); \
d601 1
a601 1
__C(tc_mem_set_region_,BYTES)(v, h, o, val, c)				\
d609 1
a609 1
		__C(tc_mem_write_,BYTES)(v, h, o, val);			\
d618 1
a618 1
#define	tc_mem_copy_region_N(BYTES)					\
d620 1
a620 1
__C(tc_mem_copy_region_,BYTES)(v, h1, o1, h2, o2, c)			\
d625 1
a625 1
	bus_size_t o;							\
d629 1
a629 1
		bcopy((void *)(h1 + o1), (void *)(h2 + o2), c * BYTES); \
d633 5
a637 5
	if (h1 + o1 >= h2 + o2)						\
		/* src after dest: copy forward */			\
		for (o = 0; c > 0; c--, o += BYTES)			\
			__C(tc_mem_write_,BYTES)(v, h2, o2 + o,		\
			    __C(tc_mem_read_,BYTES)(v, h1, o1 + o));	\
d639 60
a698 9
		/* dest after src: copy backwards */			\
		for (o = (c - 1) * BYTES; c > 0; c--, o -= BYTES)	\
			__C(tc_mem_write_,BYTES)(v, h2, o2 + o,		\
			    __C(tc_mem_read_,BYTES)(v, h1, o1 + o));	\
}
tc_mem_copy_region_N(1)
tc_mem_copy_region_N(2)
tc_mem_copy_region_N(4)
tc_mem_copy_region_N(8)
@


1.10
log
@Protect against overlapping copies
@
text
@d1 1
a1 1
/*	$OpenBSD: tc_bus_mem.c,v 1.9 1997/04/10 15:45:25 millert Exp $	*/
d40 1
a40 1
#include <vm/vm.h>
@


1.10.12.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
#include <uvm/uvm_extern.h>
@


1.10.12.2
log
@Merge in -current from about a week ago
@
text
@d46 5
a50 5
int		tc_mem_map(void *, bus_addr_t, bus_size_t, int,
		    bus_space_handle_t *);
void		tc_mem_unmap(void *, bus_space_handle_t, bus_size_t);
int		tc_mem_subregion(void *, bus_space_handle_t, bus_size_t,
		    bus_size_t, bus_space_handle_t *);
d53 1
a53 1
int		tc_mem_alloc(void *, bus_addr_t, bus_addr_t, bus_size_t,
d55 2
a56 2
		    bus_space_handle_t *);
void		tc_mem_free(void *, bus_space_handle_t, bus_size_t);
d59 2
a60 2
inline void	tc_mem_barrier(void *, bus_space_handle_t,
		    bus_size_t, bus_size_t, int);
d63 4
a66 4
inline u_int8_t	tc_mem_read_1(void *, bus_space_handle_t, bus_size_t);
inline u_int16_t tc_mem_read_2(void *, bus_space_handle_t, bus_size_t);
inline u_int32_t tc_mem_read_4(void *, bus_space_handle_t, bus_size_t);
inline u_int64_t tc_mem_read_8(void *, bus_space_handle_t, bus_size_t);
d69 8
a76 8
void		tc_mem_read_multi_1(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t);
void		tc_mem_read_multi_2(void *, bus_space_handle_t,
		    bus_size_t, u_int16_t *, bus_size_t);
void		tc_mem_read_multi_4(void *, bus_space_handle_t,
		    bus_size_t, u_int32_t *, bus_size_t);
void		tc_mem_read_multi_8(void *, bus_space_handle_t,
		    bus_size_t, u_int64_t *, bus_size_t);
d79 8
a86 8
void		tc_mem_read_region_1(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t);
void		tc_mem_read_region_2(void *, bus_space_handle_t,
		    bus_size_t, u_int16_t *, bus_size_t);
void		tc_mem_read_region_4(void *, bus_space_handle_t,
		    bus_size_t, u_int32_t *, bus_size_t);
void		tc_mem_read_region_8(void *, bus_space_handle_t,
		    bus_size_t, u_int64_t *, bus_size_t);
d89 8
a96 8
inline void	tc_mem_write_1(void *, bus_space_handle_t, bus_size_t,
		    u_int8_t);
inline void	tc_mem_write_2(void *, bus_space_handle_t, bus_size_t,
		    u_int16_t);
inline void	tc_mem_write_4(void *, bus_space_handle_t, bus_size_t,
		    u_int32_t);
inline void	tc_mem_write_8(void *, bus_space_handle_t, bus_size_t,
		    u_int64_t);
d99 8
a106 8
void		tc_mem_write_multi_1(void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t);
void		tc_mem_write_multi_2(void *, bus_space_handle_t,
		    bus_size_t, const u_int16_t *, bus_size_t);
void		tc_mem_write_multi_4(void *, bus_space_handle_t,
		    bus_size_t, const u_int32_t *, bus_size_t);
void		tc_mem_write_multi_8(void *, bus_space_handle_t,
		    bus_size_t, const u_int64_t *, bus_size_t);
d109 8
a116 8
void		tc_mem_write_region_1(void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t);
void		tc_mem_write_region_2(void *, bus_space_handle_t,
		    bus_size_t, const u_int16_t *, bus_size_t);
void		tc_mem_write_region_4(void *, bus_space_handle_t,
		    bus_size_t, const u_int32_t *, bus_size_t);
void		tc_mem_write_region_8(void *, bus_space_handle_t,
		    bus_size_t, const u_int64_t *, bus_size_t);
d119 8
a126 8
void		tc_mem_set_multi_1(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t, bus_size_t);
void		tc_mem_set_multi_2(void *, bus_space_handle_t,
		    bus_size_t, u_int16_t, bus_size_t);
void		tc_mem_set_multi_4(void *, bus_space_handle_t,
		    bus_size_t, u_int32_t, bus_size_t);
void		tc_mem_set_multi_8(void *, bus_space_handle_t,
		    bus_size_t, u_int64_t, bus_size_t);
d129 8
a136 8
void		tc_mem_set_region_1(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t, bus_size_t);
void		tc_mem_set_region_2(void *, bus_space_handle_t,
		    bus_size_t, u_int16_t, bus_size_t);
void		tc_mem_set_region_4(void *, bus_space_handle_t,
		    bus_size_t, u_int32_t, bus_size_t);
void		tc_mem_set_region_8(void *, bus_space_handle_t,
		    bus_size_t, u_int64_t, bus_size_t);
d139 8
a146 8
void		tc_mem_copy_1(void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t);
void		tc_mem_copy_2(void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t);
void		tc_mem_copy_4(void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t);
void		tc_mem_copy_8(void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t);
d149 6
a154 6
void		tc_mem_read_raw_multi_2(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t);
void		tc_mem_read_raw_multi_4(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t);
void		tc_mem_read_raw_multi_8(void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t);
d157 6
a162 6
void		tc_mem_write_raw_multi_2(void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t);
void		tc_mem_write_raw_multi_4(void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t);
void		tc_mem_write_raw_multi_8(void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t);
@


1.10.12.3
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 2
/* $OpenBSD$ */
/* $NetBSD: tc_bus_mem.c,v 1.25 2001/09/04 05:31:28 thorpej Exp $ */
a39 1

a44 2
#define	__C(A,B)	__CONCAT(A,B)

d139 1
a139 1
void		tc_mem_copy_region_1(void *, bus_space_handle_t,
d141 1
a141 1
void		tc_mem_copy_region_2(void *, bus_space_handle_t,
d143 1
a143 1
void		tc_mem_copy_region_4(void *, bus_space_handle_t,
d145 1
a145 1
void		tc_mem_copy_region_8(void *, bus_space_handle_t,
d148 17
a164 1
struct alpha_bus_space tc_mem_space = {
d229 14
a242 4
	tc_mem_copy_region_1,
	tc_mem_copy_region_2,
	tc_mem_copy_region_4,
	tc_mem_copy_region_8,
a254 1
/* ARGSUSED */
a272 1
/* ARGSUSED */
d303 1
a303 1
tc_mem_alloc(v, rstart, rend, size, align, boundary, flags, addrp, bshp)
d307 1
a307 1
	int flags;
d334 1
a334 1
	if ((f & BUS_SPACE_BARRIER_READ) != 0)
d336 1
a336 1
	else if ((f & BUS_SPACE_BARRIER_WRITE) != 0)
d411 1
a411 1
__C(tc_mem_read_multi_,BYTES)(v, h, o, a, c)				\
d419 2
a420 2
		tc_mem_barrier(v, h, o, sizeof *a, BUS_SPACE_BARRIER_READ); \
		*a++ = __C(tc_mem_read_,BYTES)(v, h, o);		\
d430 1
a430 1
__C(tc_mem_read_region_,BYTES)(v, h, o, a, c)				\
d438 1
a438 1
		*a++ = __C(tc_mem_read_,BYTES)(v, h, o);		\
d544 1
a544 1
__C(tc_mem_write_multi_,BYTES)(v, h, o, a, c)				\
d552 2
a553 2
		__C(tc_mem_write_,BYTES)(v, h, o, *a++);		\
		tc_mem_barrier(v, h, o, sizeof *a, BUS_SPACE_BARRIER_WRITE); \
d563 1
a563 1
__C(tc_mem_write_region_,BYTES)(v, h, o, a, c)				\
d571 1
a571 1
		__C(tc_mem_write_,BYTES)(v, h, o, *a++);		\
d582 1
a582 1
__C(tc_mem_set_multi_,BYTES)(v, h, o, val, c)				\
d590 2
a591 2
		__C(tc_mem_write_,BYTES)(v, h, o, val);			\
		tc_mem_barrier(v, h, o, sizeof val, BUS_SPACE_BARRIER_WRITE); \
d601 1
a601 1
__C(tc_mem_set_region_,BYTES)(v, h, o, val, c)				\
d609 1
a609 1
		__C(tc_mem_write_,BYTES)(v, h, o, val);			\
d618 1
a618 1
#define	tc_mem_copy_region_N(BYTES)					\
d620 1
a620 1
__C(tc_mem_copy_region_,BYTES)(v, h1, o1, h2, o2, c)			\
d625 1
a625 1
	bus_size_t o;							\
d629 1
a629 1
		bcopy((void *)(h1 + o1), (void *)(h2 + o2), c * BYTES); \
d633 5
a637 5
	if (h1 + o1 >= h2 + o2)						\
		/* src after dest: copy forward */			\
		for (o = 0; c > 0; c--, o += BYTES)			\
			__C(tc_mem_write_,BYTES)(v, h2, o2 + o,		\
			    __C(tc_mem_read_,BYTES)(v, h1, o1 + o));	\
d639 60
a698 9
		/* dest after src: copy backwards */			\
		for (o = (c - 1) * BYTES; c > 0; c--, o -= BYTES)	\
			__C(tc_mem_write_,BYTES)(v, h2, o2 + o,		\
			    __C(tc_mem_read_,BYTES)(v, h1, o1 + o));	\
}
tc_mem_copy_region_N(1)
tc_mem_copy_region_N(2)
tc_mem_copy_region_N(4)
tc_mem_copy_region_N(8)
@


1.9
log
@__C -> __abs_c for consistency with usage in tc_*
@
text
@d1 1
a1 1
/*	$OpenBSD: tc_bus_mem.c,v 1.8 1997/04/10 03:01:05 millert Exp $	*/
d633 9
a641 3
	for (i = 0, o = 0; i < c; i++, o += BYTES)			\
		__abs_c(tc_mem_write_,BYTES)(v, h2, o2 + o,		\
		    __abs_c(tc_mem_read_,BYTES)(v, h1, o1 + o));	\
@


1.8
log
@Add missing __C #define
@
text
@d1 1
a1 1
/*	$OpenBSD: tc_bus_mem.c,v 1.7 1997/04/02 22:08:10 niklas Exp $	*/
a44 2
#define __C(A,B)	__CONCAT(A,B)                              

d644 1
a644 1
__C(tc_mem_read_raw_multi_,BYTES)(v, h, o, a, c)			\
d655 1
a655 1
		temp = __C(tc_mem_read_,BYTES)(v, h, o);		\
d669 1
a669 1
__C(tc_mem_write_raw_multi_,BYTES)(v, h, o, a, c)		\
d684 1
a684 1
		__C(tc_mem_write_,BYTES)(v, h, o, temp);		\
@


1.7
log
@Better implementation of buf_space_*_raw_multi_* that deals well
with unaligned buffers
@
text
@d1 1
a1 1
/*	$OpenBSD: tc_bus_mem.c,v 1.6 1997/01/24 19:58:19 niklas Exp $	*/
d44 2
@


1.6
log
@Sync with NetBSD 961207
@
text
@d1 1
a1 1
/*	$OpenBSD: tc_bus_mem.c,v 1.5 1996/12/08 00:20:58 niklas Exp $	*/
d148 16
d233 10
d641 52
@


1.5
log
@Merge to NetBSD 961107, i.e. mostly new bus.h
@
text
@d1 2
a2 2
/*	$OpenBSD: tc_bus_mem.c,v 1.4 1996/11/12 20:29:45 niklas Exp $	*/
/*	$NetBSD: tc_bus_mem.c,v 1.9 1996/10/23 04:12:37 cgd Exp $	*/
d58 4
d63 4
a66 4
u_int8_t	tc_mem_read_1 __P((void *, bus_space_handle_t, bus_size_t));
u_int16_t	tc_mem_read_2 __P((void *, bus_space_handle_t, bus_size_t));
u_int32_t	tc_mem_read_4 __P((void *, bus_space_handle_t, bus_size_t));
u_int64_t	tc_mem_read_8 __P((void *, bus_space_handle_t, bus_size_t));
d89 1
a89 1
void		tc_mem_write_1 __P((void *, bus_space_handle_t, bus_size_t,
d91 1
a91 1
void		tc_mem_write_2 __P((void *, bus_space_handle_t, bus_size_t,
d93 1
a93 1
void		tc_mem_write_4 __P((void *, bus_space_handle_t, bus_size_t,
d95 1
a95 1
void		tc_mem_write_8 __P((void *, bus_space_handle_t, bus_size_t,
d118 29
a146 4
/* barrier */
void		tc_mem_barrier __P((void *, bus_space_handle_t,
		    bus_size_t, bus_size_t, int));

d161 3
d170 1
a170 1
	/* read multi */
d188 1
a188 1
	/* write multi */
d200 5
a204 2
	/* set multi */
	/* XXX IMPLEMENT */
d207 4
a210 1
	/* XXX IMPLEMENT */
d213 4
a216 4
	/* XXX IMPLEMENT */

	/* barrier */
	tc_mem_barrier,
d300 15
a314 1
u_int8_t
d331 1
a331 1
u_int16_t
d348 1
a348 1
u_int32_t
d366 1
a366 1
u_int64_t
a382 1

d421 1
a421 1
void
d451 1
a451 1
void
d481 1
a481 1
void
d499 1
a499 1
void
d515 1
d554 18
a571 7
void
tc_mem_barrier(v, h, o, l, f)
	void *v;
	bus_space_handle_t h;
	bus_size_t o, l;
	int f;
{
d573 13
a585 4
	if ((f & BUS_BARRIER_READ) != 0)
		alpha_mb();
	else if ((f & BUS_BARRIER_WRITE) != 0)
		alpha_wmb();
d587 28
@


1.4
log
@s/bus.h/bus.old.h/ to make the transit to the bus_space bus.h an easy road
possibly taken in small steps
@
text
@d1 2
a2 2
/*	$OpenBSD: tc_bus_mem.c,v 1.3 1996/10/30 22:41:21 niklas Exp $	*/
/*	$NetBSD: tc_bus_mem.c,v 1.7 1996/07/09 00:55:33 cgd Exp $	*/
d42 1
a42 1
#include <machine/bus.old.h>
d45 135
a179 22
int		tc_mem_map __P((void *, bus_mem_addr_t, bus_mem_size_t,
		    int, bus_mem_handle_t *));
void		tc_mem_unmap __P((void *, bus_mem_handle_t,
		    bus_mem_size_t));
int		tc_mem_subregion __P((void *, bus_mem_handle_t, bus_mem_size_t,
		    bus_mem_size_t, bus_mem_handle_t *));
u_int8_t	tc_mem_read_1 __P((void *, bus_mem_handle_t,
		    bus_mem_size_t));
u_int16_t	tc_mem_read_2 __P((void *, bus_mem_handle_t,
		    bus_mem_size_t));
u_int32_t	tc_mem_read_4 __P((void *, bus_mem_handle_t,
		    bus_mem_size_t));
u_int64_t	tc_mem_read_8 __P((void *, bus_mem_handle_t,
		    bus_mem_size_t));
void		tc_mem_write_1 __P((void *, bus_mem_handle_t,
		    bus_mem_size_t, u_int8_t));
void		tc_mem_write_2 __P((void *, bus_mem_handle_t,
		    bus_mem_size_t, u_int16_t));
void		tc_mem_write_4 __P((void *, bus_mem_handle_t,
		    bus_mem_size_t, u_int32_t));
void		tc_mem_write_8 __P((void *, bus_mem_handle_t,
		    bus_mem_size_t, u_int64_t));
d181 2
a182 6
/* XXX DOES NOT BELONG */
vm_offset_t	tc_XXX_dmamap __P((void *));

void
tc_bus_mem_init(bc, memv)
	bus_chipset_tag_t bc;
d185 1
d187 2
a188 18
	bc->bc_m_v = memv;

	bc->bc_m_map = tc_mem_map;
	bc->bc_m_unmap = tc_mem_unmap;
	bc->bc_m_subregion = tc_mem_subregion;

	bc->bc_mr1 = tc_mem_read_1;
	bc->bc_mr2 = tc_mem_read_2;
	bc->bc_mr4 = tc_mem_read_4;
	bc->bc_mr8 = tc_mem_read_8;

	bc->bc_mw1 = tc_mem_write_1;
	bc->bc_mw2 = tc_mem_write_2;
	bc->bc_mw4 = tc_mem_write_4;
	bc->bc_mw8 = tc_mem_write_8;

	/* XXX DOES NOT BELONG */
	bc->bc_XXX_dmamap = tc_XXX_dmamap;
d194 2
a195 2
	bus_mem_addr_t memaddr;
	bus_mem_size_t memsize;
d197 1
a197 1
	bus_mem_handle_t *memhp;
d212 2
a213 2
	bus_mem_handle_t memh;
	bus_mem_size_t memsize;
d216 1
a216 1
	/* XXX nothing to do. */
d222 2
a223 2
	bus_mem_handle_t memh, *nmemh;
	bus_mem_size_t offset, size;
d238 24
d265 2
a266 2
	bus_mem_handle_t memh;
	bus_mem_size_t off;
d270 1
a270 1
	alpha_mb();
d282 2
a283 2
	bus_mem_handle_t memh;
	bus_mem_size_t off;
d287 1
a287 1
	alpha_mb();
d299 2
a300 2
	bus_mem_handle_t memh;
	bus_mem_size_t off;
d304 1
a304 1
	alpha_mb();
d317 2
a318 2
	bus_mem_handle_t memh;
	bus_mem_size_t off;
d322 1
a322 1
	alpha_mb();
d331 39
d373 2
a374 2
	bus_mem_handle_t memh;
	bus_mem_size_t off;
d397 1
a397 1
        alpha_mb();
d403 2
a404 2
	bus_mem_handle_t memh;
	bus_mem_size_t off;
d427 1
a427 1
        alpha_mb();
d433 2
a434 2
	bus_mem_handle_t memh;
	bus_mem_size_t off;
d445 1
a445 1
        alpha_mb();
d451 2
a452 2
	bus_mem_handle_t memh;
	bus_mem_size_t off;
d462 1
a462 1
        alpha_mb();
d464 37
d502 6
a507 4
/* XXX DOES NOT BELONG */
vm_offset_t
tc_XXX_dmamap(addr)
	void *addr;
d510 4
a513 1
	return (vtophys((vm_offset_t)addr));
@


1.3
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
/*	$OpenBSD: tc_bus_mem.c,v 1.7 1996/07/09 00:55:33 cgd Exp $	*/
d42 1
a42 1
#include <machine/bus.h>
@


1.2
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: tc_bus_mem.c,v 1.2.4.2 1996/06/13 17:42:51 cgd Exp $	*/
/*	$NetBSD: tc_bus_mem.c,v 1.2.4.2 1996/06/13 17:42:51 cgd Exp $	*/
d36 1
d109 1
a109 1
		*memhp = phystok0seg(memaddr);
d111 1
a111 1
		*memhp = phystok0seg(TC_DENSE_TO_SPARSE(memaddr));
d152 1
a152 1
	wbflush();
d169 1
a169 1
	wbflush();
d186 1
a186 1
	wbflush();
d204 1
a204 1
	wbflush();
d240 1
a240 1
        wbflush();
d270 1
a270 1
        wbflush();
d288 1
a288 1
        wbflush();
d305 1
a305 1
        wbflush();
d314 1
a314 1
	return (vtophys(addr));
@


1.1
log
@sync to 0616, retaining local diffs
@
text
@d1 1
@
