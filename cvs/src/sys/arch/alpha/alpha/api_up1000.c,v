head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.16
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.14
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.16
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.12
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.8
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.6
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.4
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.8
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.4.0.2
	UBC_BASE:1.4
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.12
date	2014.05.08.20.46.49;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2010.11.23.04.07.55;	author shadchin;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.26.20.17.26;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.16.20.03.20;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2006.11.28.16.56.50;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.18.02.29.11;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.25.21.33.19;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.14.00.44.59;	author nate;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2001.12.13.19.13.22;	author nate;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.17.14.51.32;	author art;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.04.14.17.51.41;	author art;	state Exp;
branches;
next	;

1.2.2.1
date	2001.04.18.16.00.07;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.03.06.00.24.08;	author niklas;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2002.03.28.10.06.12;	author niklas;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2003.03.27.22.29.47;	author niklas;	state Exp;
branches;
next	;

1.4.2.1
date	2002.06.11.03.33.39;	author art;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2002.10.29.00.28.00;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Format string fixes for alpha kernels, and remove -Wno-format
@
text
@/*	$OpenBSD: api_up1000.c,v 1.11 2010/11/23 04:07:55 shadchin Exp $	*/
/* $NetBSD: api_up1000.c,v 1.4 2000/06/20 03:48:53 matt Exp $ */

/*
 * Copyright (c) 1995, 1996, 1997 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */
/*
 * Additional Copyright (c) 1997 by Matthew Jacob for NASA/Ames Research Center
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/termios.h>
#include <dev/cons.h>
#include <sys/conf.h>

#include <machine/rpb.h>
#include <machine/autoconf.h>
#include <machine/cpuconf.h>
#include <machine/bus.h>

#include <dev/ic/comreg.h>
#include <dev/ic/comvar.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>
#include <dev/ic/i8042reg.h>
#include <dev/ic/pckbcvar.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>

#include <alpha/pci/irongatereg.h>
#include <alpha/pci/irongatevar.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>
#include <dev/ata/atavar.h>

#include "pckbd.h"

#ifndef CONSPEED
#define CONSPEED TTYDEF_SPEED
#endif
static int comcnrate = CONSPEED;

#ifdef DEBUG
int bootdev_debug;
#define	DPRINTF(x)	if (bootdev_debug) printf x
#else
#define DPRINTF(x)
#endif

void api_up1000_init(void);
static void api_up1000_cons_init(void);
static void api_up1000_device_register(struct device *, void *);

void
api_up1000_init()
{

	platform.family = "API UP1000";

	if ((platform.model = alpha_dsr_sysname()) == NULL) {
		/* XXX Don't know the system variations, yet. */
		platform.model = alpha_unknown_sysname();
	}

	platform.iobus = "irongate";
	platform.cons_init = api_up1000_cons_init;
	platform.device_register = api_up1000_device_register;
}

static void
api_up1000_cons_init()
{
	struct ctb *ctb;
	struct irongate_config *icp;
	extern struct irongate_config irongate_configuration;

	icp = &irongate_configuration;
	irongate_init(icp, 0);

	ctb = (struct ctb *)(((caddr_t)hwrpb) + hwrpb->rpb_ctb_off);

	switch (ctb->ctb_term_type) {
	case CTB_PRINTERPORT: 
		/* serial console ... */
		/* XXX */
		{
			/*
			 * Delay to allow PROM putchars to complete.
			 * FIFO depth * character time,
			 * character time = (1000000 / (defaultrate / 10))
			 */
			DELAY(160000000 / comcnrate);

			if (comcnattach(&icp->ic_iot, 0x3f8, comcnrate,
			    COM_FREQ,
			    (TTYDEF_CFLAG & ~(CSIZE | PARENB)) | CS8))
				panic("can't init serial console");

			break;
		}

	case CTB_GRAPHICS:
#if NPCKBD > 0
		/* display console ... */
		/* XXX */
		(void) pckbc_cnattach(&icp->ic_iot, IO_KBD, KBCMDP, 0);

		if (CTB_TURBOSLOT_TYPE(ctb->ctb_turboslot) ==
		    CTB_TURBOSLOT_TYPE_ISA)
			isa_display_console(&icp->ic_iot, &icp->ic_memt);
		else
			pci_display_console(&icp->ic_iot, &icp->ic_memt,
			    &icp->ic_pc, CTB_TURBOSLOT_BUS(ctb->ctb_turboslot),
			    CTB_TURBOSLOT_SLOT(ctb->ctb_turboslot), 0);
#else
		panic("not configured to use display && keyboard console");
#endif
		break;

	default:
		printf("ctb->ctb_term_type = 0x%lx\n",
		    (unsigned long)ctb->ctb_term_type);
		printf("ctb->ctb_turboslot = 0x%lx\n",
		    (unsigned long)ctb->ctb_turboslot);

		panic("consinit: unknown console type %lu",
		    (unsigned long)ctb->ctb_term_type);
	}
}

static void
api_up1000_device_register(dev, aux)
	struct device *dev;
	void *aux;
{
	static int found, initted, scsiboot, ideboot, netboot;
	static struct device *pcidev, *scsidev;
	struct bootdev_data *b = bootdev_data;
	struct device *parent = dev->dv_parent;
	struct cfdata *cf = dev->dv_cfdata;
	struct cfdriver *cd = cf->cf_driver;

	if (found)
		return;

	if (!initted) {
		scsiboot = (strcmp(b->protocol, "SCSI") == 0);
		netboot = (strcmp(b->protocol, "BOOTP") == 0) ||
		    (strcmp(b->protocol, "MOP") == 0);
		/*
		 * Add an extra check to boot from ide drives:
		 * Newer SRM firmware use the protocol identifier IDE,
		 * older SRM firmware use the protocol identifier SCSI.
		 */
		ideboot = (strcmp(b->protocol, "IDE") == 0);
		DPRINTF(("\nscsiboot = %d, ideboot = %d, netboot = %d\n",
		    scsiboot, ideboot, netboot));
		initted = 1;
	}

	if (pcidev == NULL) {
		if (strcmp(cd->cd_name, "pci"))
			return;
		else {
			struct pcibus_attach_args *pba = aux;

			if ((b->slot / 1000) != pba->pba_bus)
				return;
	
			pcidev = dev;
			DPRINTF(("\npcidev = %s\n", pcidev->dv_xname));
			return;
		}
	}

	if ((ideboot || scsiboot) && (scsidev == NULL)) {
		if (parent != pcidev)
			return;
		else {
			struct pci_attach_args *pa = aux;

			if (b->slot % 1000 / 100 != pa->pa_function)
				return;
			if (b->slot % 100 != pa->pa_device)
				return;
	
			scsidev = dev;
			DPRINTF(("\nscsidev = %s\n", scsidev->dv_xname));
			return;
		}
	}

	if ((ideboot || scsiboot) &&
	    (!strcmp(cd->cd_name, "sd") ||
	     !strcmp(cd->cd_name, "st") ||
	     !strcmp(cd->cd_name, "cd"))) {
		struct scsi_attach_args *sa = aux;

		if (parent->dv_parent != scsidev)
			return;

		if (b->unit / 100 != sa->sa_sc_link->target)
			return;

		/* XXX LUN! */

		switch (b->boot_dev_type) {
		case 0:
			if (strcmp(cd->cd_name, "sd") &&
			    strcmp(cd->cd_name, "cd"))
				return;
			break;
		case 1:
			if (strcmp(cd->cd_name, "st"))
				return;
			break;
		default:
			return;
		}

		/* we've found it! */
		booted_device = dev;
		DPRINTF(("\nbooted_device = %s\n", booted_device->dv_xname));
		found = 1;
	}

	/*
	 * Support to boot from IDE drives.
	 */
	if ((ideboot || scsiboot) && !strcmp(cd->cd_name, "wd")) {
		struct ata_atapi_attach *aa_link = aux;
		if ((strcmp("pciide", parent->dv_cfdata->cf_driver->cd_name) != 0)) {
			return;
		} else {
			if (parent != scsidev)
				return;
		}
		DPRINTF(("\natapi info: drive %d, channel %d\n",
		    aa_link->aa_drv_data->drive, aa_link->aa_channel));
		DPRINTF(("bootdev info: unit: %d, channel: %d\n",
		    b->unit, b->channel));
		if (b->unit != aa_link->aa_drv_data->drive ||
		    b->channel != aa_link->aa_channel)
			return;

		/* we've found it! */
		booted_device = dev;
		DPRINTF(("booted_device = %s\n", booted_device->dv_xname));
		found = 1;
	}

	if (netboot) {
		if (parent != pcidev)
			return;
		else {
			struct pci_attach_args *pa = aux;

			if ((b->slot % 1000) != pa->pa_device)
				return;

			/* XXX function? */
	
			booted_device = dev;
			DPRINTF(("\nbooted_device = %s\n",
			    booted_device->dv_xname));
			found = 1;
			return;
		}
	}
}
@


1.11
log
@removed slot argument of function pckbc_cnattach
because it is always PCKBC_KBD_SLOT

ok krw@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: api_up1000.c,v 1.10 2009/10/26 20:17:26 deraadt Exp $	*/
d148 4
a151 2
		printf("ctb->ctb_term_type = 0x%lx\n", ctb->ctb_term_type);
		printf("ctb->ctb_turboslot = 0x%lx\n", ctb->ctb_turboslot);
d153 2
a154 2
		panic("consinit: unknown console type %ld",
		    ctb->ctb_term_type);
@


1.10
log
@Do not do strncmp comparisons on dv_xname because longer device names which
look similar could arrive in the future.  Instead, compare directly against
dv_cfdata->cf_driver->cd_name
Issue originally spotted by miod
@
text
@d1 1
a1 1
/*	$OpenBSD: api_up1000.c,v 1.9 2008/07/16 20:03:20 miod Exp $	*/
d133 1
a133 2
		(void) pckbc_cnattach(&icp->ic_iot, IO_KBD, KBCMDP,
		    PCKBC_KBD_SLOT, 0);
@


1.9
log
@Add a new parameter to pckbc_cnattach(): flags to put in the pckbc bowels.
For now, only one such flag is defined, PCKBC_CANT_TRANSLATE. It hints
pckbc that the device does not behave correctly to the ``set translation''
commands.

Set this flag if we are running on a Tadpole Ultrabook machine, which needs it.
This makes the built-in keyboard work correctly on this laptop (with the
help of the software translation pckbd diff).

tested & ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: api_up1000.c,v 1.8 2006/11/28 16:56:50 dlg Exp $	*/
d258 1
a258 1
		if ((strncmp("pciide", parent->dv_xname, 6) != 0)) {
@


1.8
log
@rename scsibus_attach_args to scsi_attach_args. this can help avoid
confusing when trying to attach scsibus to a hba, since it is really meant
for attaching scsi devices to scsibus.

ok deraadt@@ marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: api_up1000.c,v 1.7 2004/07/18 02:29:11 deraadt Exp $	*/
d134 1
a134 1
		    PCKBC_KBD_SLOT);
@


1.7
log
@minor space savings
@
text
@d1 1
a1 1
/*	$OpenBSD: api_up1000.c,v 1.6 2002/06/25 21:33:19 miod Exp $	*/
d223 1
a223 1
		struct scsibus_attach_args *sa = aux;
@


1.6
log
@No \n at the end of a panic() message... I thought all occurences had been
squashed already.
@
text
@d1 1
a1 1
/*	$OpenBSD: api_up1000.c,v 1.5 2002/03/14 01:26:26 millert Exp $	*/
d85 1
a85 1
	platform.family = "Alpha Processor, Inc. UP1000";
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: api_up1000.c,v 1.4 2001/12/14 00:44:59 nate Exp $	*/
d152 1
a152 1
		panic("consinit: unknown console type %ld\n",
@


1.4
log
@Don't use a single static struct alpha_bus_space since there are machines
that can have more than one system bus attached to mainbus
@
text
@d1 1
a1 1
/*	$OpenBSD: api_up1000.c,v 1.3 2001/12/13 19:13:22 nate Exp $	*/
d77 3
a79 3
void api_up1000_init __P((void));
static void api_up1000_cons_init __P((void));
static void api_up1000_device_register __P((struct device *, void *));
@


1.4.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: api_up1000.c,v 1.4 2001/12/14 00:44:59 nate Exp $	*/
d77 3
a79 3
void api_up1000_init(void);
static void api_up1000_cons_init(void);
static void api_up1000_device_register(struct device *, void *);
@


1.4.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: api_up1000.c,v 1.4.2.1 2002/06/11 03:33:39 art Exp $	*/
d152 1
a152 1
		panic("consinit: unknown console type %ld",
@


1.3
log
@Get rid of magic numbers
@
text
@d1 1
a1 1
/*	$OpenBSD: api_up1000.c,v 1.2 2001/04/17 14:51:32 art Exp $	*/
d121 1
a121 1
			if (comcnattach(icp->ic_iot, 0x3f8, comcnrate,
d133 1
a133 1
		(void) pckbc_cnattach(icp->ic_iot, IO_KBD, KBCMDP,
d138 1
a138 1
			isa_display_console(icp->ic_iot, icp->ic_memt);
d140 1
a140 1
			pci_display_console(icp->ic_iot, icp->ic_memt,
@


1.2
log
@OpenBSD tag.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d110 1
a110 1
	case 2: 
d129 1
a129 1
	case 3:
@


1.2.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: api_up1000.c,v 1.2 2001/04/17 14:51:32 art Exp $	*/
@


1.2.2.2
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d110 1
a110 1
	case CTB_PRINTERPORT: 
d121 1
a121 1
			if (comcnattach(&icp->ic_iot, 0x3f8, comcnrate,
d129 1
a129 1
	case CTB_GRAPHICS:
d133 1
a133 1
		(void) pckbc_cnattach(&icp->ic_iot, IO_KBD, KBCMDP,
d138 1
a138 1
			isa_display_console(&icp->ic_iot, &icp->ic_memt);
d140 1
a140 1
			pci_display_console(&icp->ic_iot, &icp->ic_memt,
@


1.2.2.3
log
@Merge in -current from about a week ago
@
text
@d77 3
a79 3
void api_up1000_init(void);
static void api_up1000_cons_init(void);
static void api_up1000_device_register(struct device *, void *);
@


1.2.2.4
log
@Sync the SMP branch with 3.3
@
text
@d152 1
a152 1
		panic("consinit: unknown console type %ld",
@


1.1
log
@Add support for Alpha Processor, Inc. UP1000.
From NetBSD.
@
text
@d1 1
@

