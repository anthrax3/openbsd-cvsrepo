head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.7.0.10
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.8
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.6
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.1.0.8
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.6
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.16
date	2016.06.13.01.26.14;	author dlg;	state Exp;
branches;
next	1.15;
commitid	ofg7tRWmBtMrMB35;

1.15
date	2015.09.21.05.38.58;	author guenther;	state Exp;
branches;
next	1.14;
commitid	cKbqQNjiGET6OXiA;

1.14
date	2015.04.17.12.38.54;	author dlg;	state Exp;
branches;
next	1.13;
commitid	wEE5kSMOezpoVivp;

1.13
date	2015.02.11.01.15.06;	author dlg;	state Exp;
branches;
next	1.12;
commitid	rSptP4GoD64sp6ic;

1.12
date	2014.03.29.18.09.28;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2014.03.18.21.09.28;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2014.02.01.21.23.10;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2014.02.01.21.22.30;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2014.01.26.17.40.09;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2011.04.21.04.34.12;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.03.18.46.38;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.28.20.27.52;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.13.13.24.55;	author weingart;	state Exp;
branches;
next	1.3;

1.3
date	2009.04.27.21.48.56;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.25.20.14.42;	author weingart;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.05.21.05.43;	author martin;	state Exp;
branches;
next	;


desc
@@


1.16
log
@rename _splraise to splraise

gets us a bit closer to an MI splraise api.
@
text
@/*	$OpenBSD: mutex.c,v 1.15 2015/09/21 05:38:58 guenther Exp $	*/

/*
 * Copyright (c) 2004 Artur Grabowski <art@@openbsd.org>
 * All rights reserved. 
 *
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions 
 * are met: 
 *
 * 1. Redistributions of source code must retain the above copyright 
 *    notice, this list of conditions and the following disclaimer. 
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */

#include <sys/param.h>
#include <sys/mutex.h>
#include <sys/systm.h>
#include <sys/atomic.h>

#include <machine/intr.h>
#include <machine/lock.h>

#include <ddb/db_output.h>

void
__mtx_init(struct mutex *mtx, int wantipl)
{
	mtx->mtx_owner = NULL;
	mtx->mtx_oldipl = IPL_NONE;
	mtx->mtx_wantipl = wantipl;
}

#ifdef MULTIPROCESSOR
void
mtx_enter(struct mutex *mtx)
{
	while (mtx_enter_try(mtx) == 0)
		SPINLOCK_SPIN_HOOK;
}

int
mtx_enter_try(struct mutex *mtx)
{
	struct cpu_info *owner, *ci = curcpu();
	int s;

	if (mtx->mtx_wantipl != IPL_NONE)
		s = splraise(mtx->mtx_wantipl);

	owner = atomic_cas_ptr(&mtx->mtx_owner, NULL, ci);
#ifdef DIAGNOSTIC
	if (__predict_false(owner == ci))
		panic("mtx %p: locking against myself", mtx);
#endif
	if (owner == NULL) {
		membar_enter();
		if (mtx->mtx_wantipl != IPL_NONE)
			mtx->mtx_oldipl = s;
#ifdef DIAGNOSTIC
		ci->ci_mutex_level++;
#endif
		return (1);
	}

	if (mtx->mtx_wantipl != IPL_NONE)
		splx(s);

	return (0);
}
#else
void
mtx_enter(struct mutex *mtx)
{
	struct cpu_info *ci = curcpu();

#ifdef DIAGNOSTIC
	if (__predict_false(mtx->mtx_owner == ci))
		panic("mtx %p: locking against myself", mtx);
#endif
	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = splraise(mtx->mtx_wantipl);

	mtx->mtx_owner = ci;

#ifdef DIAGNOSTIC
	ci->ci_mutex_level++;
#endif
}

int
mtx_enter_try(struct mutex *mtx)
{
	mtx_enter(mtx);
	return (1);
}
#endif

void
mtx_leave(struct mutex *mtx)
{
	int s;

	MUTEX_ASSERT_LOCKED(mtx);

#ifdef DIAGNOSTIC
	curcpu()->ci_mutex_level--;
#endif

	s = mtx->mtx_oldipl;
#ifdef MULTIPROCESSOR
	membar_exit();
#endif
	mtx->mtx_owner = NULL;
	if (mtx->mtx_wantipl != IPL_NONE)
		splx(s);
}
@


1.15
log
@Fix membar positioning in mtx_enter_try() and (critically!) mtx_leave()

Problem noticed and initial diff by kettenis@@
ok kettenis@@ visa@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.14 2015/04/17 12:38:54 dlg Exp $	*/
d61 1
a61 1
		s = _splraise(mtx->mtx_wantipl);
d94 1
a94 1
		mtx->mtx_oldipl = _splraise(mtx->mtx_wantipl);
@


1.14
log
@while trying to reproduce lockups on mp alpha i hit an
MUTEX_ASSERT_UNLOCKED, but it turns out alpha mutexes arent very
friendly to diagnostics on smp systems.

alpha mutexes contained an mtx_lock member. when 0 the mutex was
unlocked, and when 1 it was locked. the MUTEX_ASSERT_UNLOCKED checked
if mtx_lock was 1 to see if the current cpu owned the mutex, but
in an mp system another cpu may have set mtx_lock to 1, which causes
the assert to fire.

this changes alpha mutexes so they record which cpu owns the lock
rather than just if the lock is held or not. the diagnostics compare
the owner to the current cpus curcpu() address so they can actually
tell if the current cpu holds the lock instead of whether any cpu
holds the lock.

instead of using custom asm to implement a cas this uses atomic_cas_ptr,
which on alpha uses gcc cas code. miod says he has far more confidence
in the gcc cas than the code that was there before.

while im here i also shuffled the code. on MULTIPROCESSOR systems
instead of duplicating code between mtx_enter and mtx_enter_try,
mtx_enter simply loops on mtx_enter_try until it succeeds.

this also provides an alternative implementation of mutexes on
!MULTIPROCESSOR systems that avoids interlocking opcodes. mutexes
wont contend on UP boxes, theyre basically wrappers around spls.
we can just do the splraise, stash the owner as a guard value for
DIAGNOSTIC and return. similarly, mtx_enter_try on UP will never
fail, so we can just call mtx_enter and return 1.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.13 2015/02/11 01:15:06 dlg Exp $	*/
d69 1
a74 1
		membar_enter();
a117 3
#ifdef MULTIPROCESSOR
	membar_exit();
#endif
d123 3
@


1.13
log
@get SPINLOCK bits from machine/lock.h instead of sys/lock.h
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.12 2014/03/29 18:09:28 guenther Exp $	*/
d31 1
a37 29
static inline int
try_lock(struct mutex *mtx)
{
#ifdef MULTIPROCESSOR
	unsigned long t0, v0;

	__asm volatile(
		"1:	ldl_l	%0, %3		\n"	/* t0 = mtx->mtx_lock */
		"	bne	%0, 2f		\n"
		"	bis	$31, 1, %0	\n"	/* t0 = 1 */
		"	stl_c	%0, %2		\n"	/* mtx->mtx_lock = 1 */
		"	beq	%0, 3f		\n"
		"	mb			\n"
		"	bis	$31, 1, %1	\n"	/* v0 = 1 */
		"	br	4f		\n"
		"3:	br	1b		\n"	/* update failed */
		"2:	bis	$31, $31, %1	\n"	/* v0 = 0 */
		"4:				\n"
		: "=&r" (t0), "=r" (v0), "=m" (mtx->mtx_lock)
		: "m" (mtx->mtx_lock)
		: "memory");

	return (v0 != 0);
#else
	mtx->mtx_lock = 1;
	return 1;
#endif
}

d41 1
a43 4
	mtx->mtx_lock = 0;
#ifdef MULTIPROCESSOR
	mtx->mtx_owner = NULL;
#endif
d46 1
d50 1
a50 18
	int s;

	for (;;) {
		if (mtx->mtx_wantipl != IPL_NONE)
			s = _splraise(mtx->mtx_wantipl);
		if (try_lock(mtx)) {
			if (mtx->mtx_wantipl != IPL_NONE)
				mtx->mtx_oldipl = s;
			mtx->mtx_owner = curcpu();
#ifdef DIAGNOSTIC
			curcpu()->ci_mutex_level++;
#endif
			return;
		}
		if (mtx->mtx_wantipl != IPL_NONE)
			splx(s);

#ifdef MULTIPROCESSOR
a51 2
#endif
	}
d57 1
d62 7
a68 1
	if (try_lock(mtx)) {
a70 1
		mtx->mtx_owner = curcpu();
d72 1
a72 1
		curcpu()->ci_mutex_level++;
d74 2
a75 1
		return 1;
d77 1
d80 21
a100 1
	return 0;
d103 8
d117 4
d124 1
a126 4
	mtx->mtx_lock = 0;
#ifdef MULTIPROCESSOR
	alpha_wmb();
#endif
@


1.12
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.11 2014/03/18 21:09:28 kettenis Exp $	*/
a30 1
#include <sys/lock.h>
d33 1
@


1.11
log
@To prevent lock ordering problems with the kernel lock, we need to make sure
we block all interrupts that can grab the kernel lock.  The simplest way to
achieve this is to make sure mutexes always raise the ipl to the highest
level that has interrupts that grab the kernel lock.  This will allow us
to have "mpsafe" interrupt handlers at lower priority levels.

No change for non-MULTIPROCESSOR kernels.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.10 2014/02/01 21:23:10 miod Exp $	*/
d43 1
a43 1
	__asm __volatile(
@


1.10
log
@On MP kernels, invoke SPINLOCK_SPIN_HOOK in mtx_enter() when it spins.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.9 2014/02/01 21:22:30 miod Exp $	*/
d67 1
a67 1
mtx_init(struct mutex *mtx, int wantipl)
@


1.9
log
@Simplify try_lock() to avoid one forward branch in the common case.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.8 2014/01/26 17:40:09 miod Exp $	*/
d31 1
d35 2
d96 4
@


1.8
log
@Work in progress work towards SMP, heavily based upon NetBSD. The MP kernel
will boot multiuser, but will deadlock under load, and I can't find my
mistake yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.7 2011/04/21 04:34:12 miod Exp $	*/
d49 1
a50 2
		"	br	4f		\n"
		"3:	br	1b		\n"	/* update failed */
d69 3
@


1.7
log
@Revert the ``remove the `skip splraise/splx for IPL_NONE mutexes' optimization''
change. It seems to have unexpected side effects, especially on MP systems,
and drahn@@ disagrees with the way this change has been done and think there
is a better way to solve the original problem of msleep() fiddling with
mutex internals.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.5 2010/09/28 20:27:52 miod Exp $	*/
d34 3
d38 23
a60 1
#error This code needs more work
d62 1
a63 4
/*
 * Single processor systems don't need any mutexes, but they need the spl
 * raising semantics of the mutexes.
 */
d67 1
a67 1
	mtx->mtx_oldipl = 0;
d75 9
a83 4
	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = _splraise(mtx->mtx_wantipl);
	MUTEX_ASSERT_UNLOCKED(mtx);
	mtx->mtx_lock = 1;
d85 1
a85 1
	curcpu()->ci_mutex_level++;
d87 5
d97 2
d100 5
a104 3
		mtx->mtx_oldipl = _splraise(mtx->mtx_wantipl);
	MUTEX_ASSERT_UNLOCKED(mtx);
	mtx->mtx_lock = 1;
d106 1
a106 1
	curcpu()->ci_mutex_level++;
d108 5
a112 2

	return 1;
d118 2
a120 1
	mtx->mtx_lock = 0;
d124 6
d131 1
a131 1
		splx(mtx->mtx_oldipl);
@


1.6
log
@Remove the `skip splraise/splx for IPL_NONE mutexes' optimizations. It is not
always gaining anything, and msleep() implementation depends upon mtx_leave()
invoking splx().
@
text
@d53 2
a54 1
	mtx->mtx_oldipl = _splraise(mtx->mtx_wantipl);
d65 2
a66 1
	mtx->mtx_oldipl = _splraise(mtx->mtx_wantipl);
d84 2
a85 1
	splx(mtx->mtx_oldipl);
@


1.5
log
@Implement a per-cpu held mutex counter if DIAGNOSTIC on all non-x86 platforms,
to complete matthew@@'s commit of a few days ago, and drop __HAVE_CPU_MUTEX_LEVEL
define. With help from, and ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.4 2009/08/13 13:24:55 weingart Exp $	*/
d53 1
a53 2
	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = _splraise(mtx->mtx_wantipl);
d64 1
a64 2
	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = _splraise(mtx->mtx_wantipl);
d82 1
a82 2
	if (mtx->mtx_wantipl != IPL_NONE)
		splx(mtx->mtx_oldipl);
@


1.4
log
@A new(er) mtx_enter_try().

Ok oga@@, "the time is now" deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.3 2009/04/27 21:48:56 kettenis Exp $	*/
d57 3
d69 3
d81 3
@


1.3
log
@Revert mtx_enter_try.  It didn't compile on hppa, it doesn't compile on
landisk, and the sparc implementation is obviously wrong.  That's where I
stopped looking, so who knows what else was broken.  A simple comparison of
the existing mtx_enter with the new mtx_enter_try would have told anybody.
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.1 2007/05/05 21:05:43 martin Exp $	*/
d57 11
@


1.2
log
@Enter mtx_enter_try.  In part for completeness, things may start
using this soon(ish).  Ok oga@@, sorta yes kettenis@@.
@
text
@a58 11
int
mtx_enter_try(struct mutex *mtx)
{
	if (mtx->mtx_wantipl != IPL_NONE)
		mtx->mtx_oldipl = _splraise(mtx->mtx_wantipl);
	MUTEX_ASSERT_UNLOCKED(mtx);
	mtx->mtx_lock = 1;

	return 1;
}

@


1.1
log
@simple single-processor only mutex implementation

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mutex.c,v 1.1 2007/05/01 18:59:40 miod Exp $	*/
d57 11
@

