head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.12
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.14
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.10
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.6
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.16
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.12
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.10
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.8
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.6
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.4
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.2
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.8.0.12
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.10
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.8
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.8
	UBC:1.6.0.2
	UBC_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	SMP:1.4.0.2;
locks; strict;
comment	@ * @;


1.14
date	2014.05.08.20.46.49;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2010.11.23.04.07.55;	author shadchin;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.26.20.17.26;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.16.20.03.20;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2006.11.28.16.56.50;	author dlg;	state Exp;
branches;
next	1.9;

1.9
date	2005.05.09.21.55.12;	author martin;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.25.21.33.19;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.26;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.14.00.44.59;	author nate;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2001.09.29.03.20.46;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.16.23.32.20;	author ericj;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.11.08.21.48.43;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.08.19.16.58;	author ericj;	state Exp;
branches;
next	1.1;

1.1
date	2000.11.08.16.00.59;	author art;	state Exp;
branches;
next	;

1.4.2.1
date	2001.04.18.16.00.16;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2001.10.31.02.52.43;	author nate;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2002.03.06.00.24.08;	author niklas;	state Exp;
branches;
next	1.4.2.4;

1.4.2.4
date	2002.03.28.10.06.12;	author niklas;	state Exp;
branches;
next	1.4.2.5;

1.4.2.5
date	2003.03.27.23.18.05;	author niklas;	state Exp;
branches;
next	;

1.6.2.1
date	2002.06.11.03.33.39;	author art;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2002.10.29.00.28.00;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Format string fixes for alpha kernels, and remove -Wno-format
@
text
@/* $OpenBSD: dec_550.c,v 1.13 2010/11/23 04:07:55 shadchin Exp $ */
/* $NetBSD: dec_550.c,v 1.10 2000/06/20 03:48:53 matt Exp $ */

/*
 * Copyright (c) 1995, 1996, 1997 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */
/*
 * Additional Copyright (c) 1997 by Matthew Jacob for NASA/Ames Research Center
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/termios.h>
#include <dev/cons.h>
#include <sys/conf.h>

#include <machine/rpb.h>
#include <machine/autoconf.h>
#include <machine/cpuconf.h>
#include <machine/bus.h>

#include <dev/ic/comreg.h>
#include <dev/ic/comvar.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>
#include <dev/ic/i8042reg.h>

#include <dev/ic/pckbcvar.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>

#include <alpha/pci/ciareg.h>
#include <alpha/pci/ciavar.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>
#include <dev/ata/atavar.h>

/* Write this to Pyxis General Purpose Output to turn off the power. */
#define	DEC_550_PYXIS_GPO_POWERDOWN	0x00000400

#include "pckbd.h"

#ifndef CONSPEED
#define CONSPEED TTYDEF_SPEED
#endif
static int comcnrate = CONSPEED;

#define	DR_VERBOSE(f) while (0)

void dec_550_init(void);
static void dec_550_cons_init(void);
static void dec_550_device_register(struct device *, void *);
static void dec_550_powerdown(void);

void
dec_550_init()
{

	platform.family = "Digital Personal Workstation";

	if ((platform.model = alpha_dsr_sysname()) == NULL) {
		/* XXX Don't know the system variations, yet. */
		platform.model = alpha_unknown_sysname();
	}

	platform.iobus = "cia";
	platform.cons_init = dec_550_cons_init;
	platform.device_register = dec_550_device_register;
	platform.powerdown = dec_550_powerdown;
}

static void
dec_550_cons_init()
{
	struct ctb *ctb;
	struct cia_config *ccp;
	extern struct cia_config cia_configuration;

	ccp = &cia_configuration;
	cia_init(ccp, 0);

	ctb = (struct ctb *)(((caddr_t)hwrpb) + hwrpb->rpb_ctb_off);

	switch (ctb->ctb_term_type) {
	case CTB_PRINTERPORT: 
		/* serial console ... */
		/* XXX */
		{
			/*
			 * Delay to allow PROM putchars to complete.
			 * FIFO depth * character time,
			 * character time = (1000000 / (defaultrate / 10))
			 */
			DELAY(160000000 / comcnrate);

			if(comcnattach(&ccp->cc_iot, 0x3f8, comcnrate,
			    COM_FREQ,
			    (TTYDEF_CFLAG & ~(CSIZE | PARENB)) | CS8))
				panic("can't init serial console");

			break;
		}

	case CTB_GRAPHICS:
#if NPCKBD > 0
		/* display console ... */
		/* XXX */
		(void) pckbc_cnattach(&ccp->cc_iot, IO_KBD, KBCMDP, 0);

		if (CTB_TURBOSLOT_TYPE(ctb->ctb_turboslot) ==
		    CTB_TURBOSLOT_TYPE_ISA)
			isa_display_console(&ccp->cc_iot, &ccp->cc_memt);
		else
			pci_display_console(&ccp->cc_iot, &ccp->cc_memt,
			    &ccp->cc_pc, CTB_TURBOSLOT_BUS(ctb->ctb_turboslot),
			    CTB_TURBOSLOT_SLOT(ctb->ctb_turboslot), 0);
#else
		panic("not configured to use display && keyboard console");
#endif
		break;

	default:
		printf("ctb->ctb_term_type = 0x%lx\n",
		    (unsigned long)ctb->ctb_term_type);
		printf("ctb->ctb_turboslot = 0x%lx\n",
		    (unsigned long)ctb->ctb_turboslot);

		panic("consinit: unknown console type %lu",
		    (unsigned long)ctb->ctb_term_type);
	}
}

static void
dec_550_device_register(dev, aux)
	struct device *dev;
	void *aux;
{
	static int found, initted, diskboot, netboot;
	static struct device *pcidev, *ctrlrdev;
	struct bootdev_data *b = bootdev_data;
	struct device *parent = dev->dv_parent;
	struct cfdata *cf = dev->dv_cfdata;
	struct cfdriver *cd = cf->cf_driver;

	if (found)
		return;

	if (!initted) {
		diskboot = (strncasecmp(b->protocol, "SCSI", 4) == 0) ||
		    (strncasecmp(b->protocol, "IDE", 3) == 0);
		netboot = (strncasecmp(b->protocol, "BOOTP", 5) == 0) ||
		    (strncasecmp(b->protocol, "MOP", 3) == 0);
		DR_VERBOSE(printf("diskboot = %d, netboot = %d\n", diskboot,
		    netboot));
		initted = 1;
	}

	if (pcidev == NULL) {
		if (strcmp(cd->cd_name, "pci"))
			return;
		else {
			struct pcibus_attach_args *pba = aux;

			if ((b->slot / 1000) != pba->pba_bus)
				return;
	
			pcidev = dev;
			DR_VERBOSE(printf("\npcidev = %s\n", pcidev->dv_xname));
			return;
		}
	}

	if (ctrlrdev == NULL) {
		if (parent != pcidev)
			return;
		else {
			struct pci_attach_args *pa = aux;
			int slot;

			slot = pa->pa_bus * 1000 + pa->pa_function * 100 +
			    pa->pa_device;
			if (b->slot != slot)
				return;

			if (netboot) {
				booted_device = dev;
				DR_VERBOSE(printf("\nbooted_device = %s\n",
				    dev->dv_xname));
				found = 1;
			} else {
				ctrlrdev = dev;
				DR_VERBOSE(printf("\nctrlrdev = %s\n",
				    dev->dv_xname));
			}
			return;
		}
	}

	if (!diskboot)
		return;

	if (!strcmp(cd->cd_name, "sd") || !strcmp(cd->cd_name, "st") ||
	    !strcmp(cd->cd_name, "cd")) {
		struct scsi_attach_args *sa = aux;
		struct scsi_link *periph = sa->sa_sc_link;
		int unit;

		if (parent->dv_parent != ctrlrdev)
			return;

		unit = periph->target * 100 + periph->lun;
		if (b->unit != unit)
			return;

		/* we've found it! */
		booted_device = dev;
		DR_VERBOSE(printf("\nbooted_device = %s\n", dev->dv_xname));
		found = 1;
	}

	/*
	 * Support to boot from IDE drives.
	 */
	if (!strcmp(cd->cd_name, "wd")) {
		struct ata_atapi_attach *aa_link = aux;

		if ((strcmp("pciide", parent->dv_cfdata->cf_driver->cd_name) != 0))
			return;
		if (parent != ctrlrdev)
			return;
	
		DR_VERBOSE(printf("\nAtapi info: drive: %d, channel %d\n",
		    aa_link->aa_drv_data->drive, aa_link->aa_channel));
		DR_VERBOSE(printf("Bootdev info: unit: %d, channel: %d\n",
		    b->unit, b->channel));
		if (b->unit != aa_link->aa_drv_data->drive ||
		    b->channel != aa_link->aa_channel)
			return;

		/* we've found it! */
		booted_device = dev;
		DR_VERBOSE(printf("booted_device = %s\n", dev->dv_xname));
		found = 1;
	}
}

static void
dec_550_powerdown()
{

	REGVAL(PYXIS_GPO) = DEC_550_PYXIS_GPO_POWERDOWN;
	alpha_mb();
}
@


1.13
log
@removed slot argument of function pckbc_cnattach
because it is always PCKBC_KBD_SLOT

ok krw@@, miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.12 2009/10/26 20:17:26 deraadt Exp $ */
d149 4
a152 2
		printf("ctb->ctb_term_type = 0x%lx\n", ctb->ctb_term_type);
		printf("ctb->ctb_turboslot = 0x%lx\n", ctb->ctb_turboslot);
d154 2
a155 2
		panic("consinit: unknown console type %ld",
		    ctb->ctb_term_type);
@


1.12
log
@Do not do strncmp comparisons on dv_xname because longer device names which
look similar could arrive in the future.  Instead, compare directly against
dv_cfdata->cf_driver->cd_name
Issue originally spotted by miod
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.11 2008/07/16 20:03:20 miod Exp $ */
d134 1
a134 2
		(void) pckbc_cnattach(&ccp->cc_iot, IO_KBD, KBCMDP,
		    PCKBC_KBD_SLOT, 0);
@


1.11
log
@Add a new parameter to pckbc_cnattach(): flags to put in the pckbc bowels.
For now, only one such flag is defined, PCKBC_CANT_TRANSLATE. It hints
pckbc that the device does not behave correctly to the ``set translation''
commands.

Set this flag if we are running on a Tadpole Ultrabook machine, which needs it.
This makes the built-in keyboard work correctly on this laptop (with the
help of the software translation pckbd diff).

tested & ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.10 2006/11/28 16:56:50 dlg Exp $ */
d252 1
a252 1
		if ((strncmp("pciide", parent->dv_xname, 6) != 0))
@


1.10
log
@rename scsibus_attach_args to scsi_attach_args. this can help avoid
confusing when trying to attach scsibus to a hba, since it is really meant
for attaching scsi devices to scsibus.

ok deraadt@@ marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.9 2005/05/09 21:55:12 martin Exp $ */
d135 1
a135 1
		    PCKBC_KBD_SLOT);
@


1.9
log
@fixes and updates for root device detection from NetBSD:

- remove unneeded checks and variables
- use strncasecmp() to check b->protocol because the case is dependant on the
  firmware revision
- check logical unit numbers
- consistently check PCI function numbers
- on the 6600 models check which PCI hierarchy is looked at
- makes root device detection on DS20 (6600) work

testing by claudio, xsa and miod; ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.8 2002/06/25 21:33:19 miod Exp $ */
d229 1
a229 1
		struct scsibus_attach_args *sa = aux;
@


1.8
log
@No \n at the end of a panic() message... I thought all occurences had been
squashed already.
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.7 2002/03/14 01:26:26 millert Exp $ */
d163 2
a164 2
	static int found, initted, scsiboot, ideboot, netboot;
	static struct device *pcidev, *scsidev;
d174 6
a179 11
		scsiboot = (strcmp(b->protocol, "SCSI") == 0);
		netboot = (strcmp(b->protocol, "BOOTP") == 0) ||
		    (strcmp(b->protocol, "MOP") == 0);
		/*
		 * Add an extra check to boot from ide drives:
		 * Newer SRM firmware use the protocol identifier IDE,
		 * older SRM firmware use the protocol identifier SCSI.
		 */
		ideboot = (strcmp(b->protocol, "IDE") == 0);
		DR_VERBOSE(printf("scsiboot = %d, ideboot = %d, netboot = %d\n",
		    scsiboot, ideboot, netboot));
d193 1
a193 2
			DR_VERBOSE(printf("\npcidev = %s\n",
			    pcidev->dv_xname));
d198 1
a198 1
	if ((ideboot || scsiboot) && (scsidev == NULL)) {
d203 1
d205 3
a207 1
			if ((b->slot % 1000) != pa->pa_device)
d210 10
a219 5
			/* XXX function? */
	
			scsidev = dev;
			DR_VERBOSE(printf("\nscsidev = %s\n",
			    scsidev->dv_xname));
d224 5
a228 4
	if ((ideboot || scsiboot) &&
	    (!strcmp(cd->cd_name, "sd") ||
	     !strcmp(cd->cd_name, "st") ||
	     !strcmp(cd->cd_name, "cd"))) {
d230 2
d233 1
a233 1
		if (parent->dv_parent != scsidev)
d236 2
a237 16
		if (b->unit / 100 != sa->sa_sc_link->target)
			return;

		/* XXX LUN! */

		switch (b->boot_dev_type) {
		case 0:
			if (strcmp(cd->cd_name, "sd") &&
			    strcmp(cd->cd_name, "cd"))
				return;
			break;
		case 1:
			if (strcmp(cd->cd_name, "st"))
				return;
			break;
		default:
a238 1
		}
d242 1
a242 2
		DR_VERBOSE(printf("\nbooted_device = %s\n",
		    booted_device->dv_xname));
d249 1
a249 1
	if ((ideboot || scsiboot) && !strcmp(cd->cd_name, "wd")) {
d251 4
a254 1
		if ((strncmp("pciide", parent->dv_xname, 6) != 0)) {
d256 1
a256 4
		} else {
			if (parent != scsidev)
				return;
		}
d267 1
a267 2
		DR_VERBOSE(printf("booted_device = %s\n",
		    booted_device->dv_xname));
a268 19
	}

	if (netboot) {
		if (parent != pcidev)
			return;
		else {
			struct pci_attach_args *pa = aux;

			if ((b->slot % 1000) != pa->pa_device)
				return;

			/* XXX function? */
	
			booted_device = dev;
			DR_VERBOSE(printf("\nbooted_device = %s\n",
			    booted_device->dv_xname));
			found = 1;
			return;
		}
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.6 2001/12/14 00:44:59 nate Exp $ */
d153 1
a153 1
		panic("consinit: unknown console type %ld\n",
@


1.6
log
@Don't use a single static struct alpha_bus_space since there are machines
that can have more than one system bus attached to mainbus
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.5 2001/09/29 03:20:46 millert Exp $ */
d76 4
a79 4
void dec_550_init __P((void));
static void dec_550_cons_init __P((void));
static void dec_550_device_register __P((struct device *, void *));
static void dec_550_powerdown __P((void));
@


1.6.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.6 2001/12/14 00:44:59 nate Exp $ */
d76 4
a79 4
void dec_550_init(void);
static void dec_550_cons_init(void);
static void dec_550_device_register(struct device *, void *);
static void dec_550_powerdown(void);
@


1.6.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.6.2.1 2002/06/11 03:33:39 art Exp $ */
d153 1
a153 1
		panic("consinit: unknown console type %ld",
@


1.5
log
@Enable pckbd support and use symbolic #defines for ctb_term_type
instead of hard-coding values.  art@@ OK
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.4 2000/11/16 23:32:20 ericj Exp $ */
d122 1
a122 1
			if(comcnattach(ccp->cc_iot, 0x3f8, comcnrate,
d134 1
a134 1
		(void) pckbc_cnattach(ccp->cc_iot, IO_KBD, KBCMDP,
d139 1
a139 1
			isa_display_console(ccp->cc_iot, ccp->cc_memt);
d141 1
a141 1
			pci_display_console(ccp->cc_iot, ccp->cc_memt,
@


1.4
log
@
allow the console to attach on the rest of the alpha's we support.
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.3 2000/11/08 21:48:43 art Exp $ */
a66 1
#ifdef notyet
a67 1
#endif
d111 1
a111 1
	case 2: 
d130 1
a130 1
	case 3:
@


1.4.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.4 2000/11/16 23:32:20 ericj Exp $ */
@


1.4.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.4.2.1 2001/04/18 16:00:16 niklas Exp $ */
d67 1
d69 1
d113 1
a113 1
	case CTB_PRINTERPORT: 
d132 1
a132 1
	case CTB_GRAPHICS:
@


1.4.2.3
log
@Merge in trunk
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d122 1
a122 1
			if(comcnattach(&ccp->cc_iot, 0x3f8, comcnrate,
d134 1
a134 1
		(void) pckbc_cnattach(&ccp->cc_iot, IO_KBD, KBCMDP,
d139 1
a139 1
			isa_display_console(&ccp->cc_iot, &ccp->cc_memt);
d141 1
a141 1
			pci_display_console(&ccp->cc_iot, &ccp->cc_memt,
@


1.4.2.4
log
@Merge in -current from about a week ago
@
text
@d76 4
a79 4
void dec_550_init(void);
static void dec_550_cons_init(void);
static void dec_550_device_register(struct device *, void *);
static void dec_550_powerdown(void);
@


1.4.2.5
log
@Sync the SMP branch with 3.3
@
text
@d153 1
a153 1
		panic("consinit: unknown console type %ld",
@


1.3
log
@no need to extern booted_device everywhere.
@
text
@d1 1
a1 1
/* $OpenBSD: dec_550.c,v 1.2 2000/11/08 19:16:58 ericj Exp $ */
d52 1
a52 1
#ifdef notyet
a53 1
#endif
d136 1
a136 1
		(void) pckbc_cnattach(&ccp->cc_iot, IO_KBD, KBCMDP,
d141 1
a141 1
			isa_display_console(&ccp->cc_iot, &ccp->cc_memt);
d143 1
a143 1
			pci_display_console(&ccp->cc_iot, &ccp->cc_memt,
@


1.2
log
@add tags
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a171 1
	extern struct device *booted_device;
@


1.1
log
@Merge in big portions of the improvements NetBSD did to their alpha port.
Highlights: UVM, PMAP_NEW, bus_dma (only on some buses for now), new hardware
support, possiblity for ELF, etc, etc. Too much to mention.

This is still work in progress. video consoles might be broken, otherwise
we have basically the same functionality as before plus more.
@
text
@d1 1
@

