head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.42
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.40
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.36
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.32
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.34
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.26
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.30
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.28
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.24
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.22
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.20
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.18
	OPENBSD_5_0:1.7.0.16
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.14
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.12
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.8
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.10
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.30
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.28
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.26
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.24
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.22
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.20
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.18
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.16
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.14
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.12
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.10
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.8
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.6
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.14
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.7
date	2008.01.13.20.59.52;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.08.19.16.59;	author ericj;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.08.16.01.02;	author art;	state Exp;
branches;
next	1.4;

1.4
date	96.10.30.22.38.18;	author niklas;	state Exp;
branches
	1.4.14.1;
next	1.3;

1.3
date	96.07.29.22.57.51;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.03.52.42;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.40;	author deraadt;	state Exp;
branches;
next	;

1.4.14.1
date	2001.04.18.16.00.26;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Replace STABS debug info (which causes problems with truncated relocations)
with some limited DWARF2 generating .file and .line symbols.  Makes it possible
to build kernels with debug information again.

ok miod@@
@
text
@/* $OpenBSD: pal.s,v 1.6 2000/11/08 19:16:59 ericj Exp $ */
/* $NetBSD: pal.s,v 1.14 1999/12/02 22:08:04 thorpej Exp $ */

/*
 * Copyright (c) 1994, 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

.file	3 __FILE__
.loc	3 __LINE__

/*
 * The various OSF PALcode routines.
 *
 * The following code is originally derived from pages: (I) 6-5 - (I) 6-7
 * and (III) 2-1 - (III) 2-25 of "Alpha Architecture Reference Manual" by
 * Richard L. Sites.
 *
 * Updates taken from pages: (II-B) 2-1 - (II-B) 2-33 of "Alpha AXP
 * Architecture Reference Manual, Second Edition" by Richard L. Sites
 * and Richard T. Witek.
 */

/*
 * alpha_amask: read architecture features (XXX INSTRUCTION, NOT PALcode OP)
 *
 * Arguments:
 *	a0	bitmask of features to test
 *
 * Returns:
 *	v0	bitmask - bit is _cleared_ if feature is supported
 */
	.text
LEAF(alpha_amask,1)
	amask	a0, v0
	RET
	END(alpha_amask)

/*
 * alpha_implver: read implementation version (XXX INSTRUCTION, NOT PALcode OP)
 *
 * Returns:
 *	v0	implementation version - see <machine/alpha_cpu.h>
 */
	.text
LEAF(alpha_implver,0)
#if 0
	implver	0x1, v0
#else
	.long	0x47e03d80	/* XXX gas(1) does the Wrong Thing */
#endif
	RET
	END(alpha_implver)

/*
 * alpha_pal_cflush: Cache flush [PRIVILEGED]
 *
 * Flush the entire physical page specified by the PFN specified in
 * a0 from any data caches associated with the current processor.
 *
 * Arguments:
 *	a0	page frame number of page to flush
 */
	.text
LEAF(alpha_pal_cflush,1)
	call_pal PAL_cflush
	RET
	END(alpha_pal_cflush)

/*
 * alpha_pal_halt: Halt the processor. [PRIVILEGED]
 */
	.text
LEAF(alpha_pal_halt,0)
	call_pal PAL_halt
	br	zero,alpha_pal_halt	/* Just in case */
	RET
	END(alpha_pal_halt)

/*
 * alpha_pal_rdps: Read processor status. [PRIVILEGED]
 *
 * Return:
 *	v0	current PS value
 */
	.text
LEAF(alpha_pal_rdps,0)
	call_pal PAL_OSF1_rdps
	RET
	END(alpha_pal_rdps)

/*
 * alpha_pal_swpipl: Swap Interrupt priority level. [PRIVILEGED]
 * _alpha_pal_swpipl: Same, from profiling code. [PRIVILEGED]
 *
 * Arguments:
 *	a0	new IPL
 *
 * Return:
 *	v0	old IPL
 */
	.text
LEAF(alpha_pal_swpipl,1)
	call_pal PAL_OSF1_swpipl
	RET
	END(alpha_pal_swpipl)

LEAF_NOPROFILE(_alpha_pal_swpipl,1)
	call_pal PAL_OSF1_swpipl
	RET
	END(_alpha_pal_swpipl)

/*
 * alpha_pal_wrent: Write system entry address. [PRIVILEGED]
 *
 * Arguments:
 *	a0	new vector
 *	a1	vector selector
 */
	.text
LEAF(alpha_pal_wrent,2)
	call_pal PAL_OSF1_wrent
	RET
	END(alpha_pal_wrent)

/*
 * alpha_pal_wrvptptr: Write virtual page table pointer. [PRIVILEGED]
 *
 * Arguments:
 *	a0	new virtual page table pointer
 */
	.text
LEAF(alpha_pal_wrvptptr,1)
	call_pal PAL_OSF1_wrvptptr
	RET
	END(alpha_pal_wrvptptr)
@


1.6
log
@add tags
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d31 3
a45 1
inc2:	.stabs	__FILE__,132,0,0,inc2; .loc	1 __LINE__
@


1.5
log
@Merge in big portions of the improvements NetBSD did to their alpha port.
Highlights: UVM, PMAP_NEW, bus_dma (only on some buses for now), new hardware
support, possiblity for ELF, etc, etc. Too much to mention.

This is still work in progress. video consoles might be broken, otherwise
we have basically the same functionality as before plus more.
@
text
@d1 1
@


1.4
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 2
/*	$OpenBSD: pal.s,v 1.5 1996/07/14 04:21:53 cgd Exp $	*/
/*	$NetBSD: pal.s,v 1.5 1996/07/14 04:21:53 cgd Exp $	*/
d33 2
a34 2
 * The following code is derived from pages: (I) 6-5 - (I) 6-7 and
 * (III) 2-1 - (III) 2-25 of "Alpha Architecture Reference Manual" by
d36 4
d42 1
d44 7
a50 10
 * alpha_rpcc: read process cycle counter (XXX INSTRUCTION, NOT PALcode OP)
 */
        .text
LEAF(alpha_rpcc,1)
        rpcc    v0
        RET
        END(alpha_rpcc)

/*
 * alpha_mb: memory barrier (XXX INSTRUCTION, NOT PALcode OP)
d53 2
a54 2
LEAF(alpha_mb,0)
	mb
d56 1
a56 1
	END(alpha_mb)
d59 4
a62 1
 * alpha_wmb: write memory barrier (XXX INSTRUCTION, NOT PALcode OP)
d65 6
a70 3
LEAF(alpha_wmb,0)
	/* wmb XXX */
	mb /* XXX */
d72 1
a72 1
	END(alpha_wmb)
d75 7
a81 2
 * alpha_pal_imb: I-Stream memory barrier. [UNPRIVILEGED]
 * (Makes instruction stream coherent with data stream.)
d84 2
a85 2
LEAF(alpha_pal_imb,0)
	call_pal PAL_imb
d87 1
a87 10
	END(alpha_pal_imb)

/*
 * alpha_pal_draina: Drain aborts. [PRIVILEGED]
 */
	.text
LEAF(alpha_pal_draina,0)
	call_pal PAL_draina
	RET
	END(alpha_pal_draina)
d100 1
a100 13
 * alpha_pal_rdmces: Read MCES processor register. [PRIVILEGED]
 *
 * Return:
 *	v0	current MCES value
 */
	.text
LEAF(alpha_pal_rdmces,1)
	call_pal PAL_OSF1_rdmces
	RET
	END(alpha_pal_rdmces)

/*
 * alpha_pal_rdusp: Read user stack pointer. [PRIVILEGED]
d103 1
a103 1
 *	v0	current user stack pointer
d106 2
a107 2
LEAF(alpha_pal_rdusp,0)
	call_pal PAL_OSF1_rdusp
d109 1
a109 1
	END(alpha_pal_rdusp)
a132 25
 * alpha_pal_tbi: Translation buffer invalidate. [PRIVILEGED]
 *
 * Arguments:
 *	a0	operation selector
 *	a1	address to operate on (if necessary)
 */
	.text
LEAF(alpha_pal_tbi,2)
	call_pal PAL_OSF1_tbi
	RET
	END(alpha_pal_tbi)

/*
 * alpha_pal_whami: Who am I? [PRIVILEGED]
 *
 * Return:
 *	v0	processor number
 */
	.text
LEAF(alpha_pal_whami,0)
	call_pal PAL_OSF1_whami
	RET
	END(alpha_pal_whami)

/*
a145 24
 * alpha_pal_wrfen: Write floating-point enable. [PRIVILEGED]
 *
 * Arguments:
 *	a0	new enable value (val & 0x1 -> enable).
 */
	.text
LEAF(alpha_pal_wrfen,1)
	call_pal PAL_OSF1_wrfen
	RET
	END(alpha_pal_wrfen)

/*
 * alpha_pal_wrusp: Write user stack pointer. [PRIVILEGED]
 *
 * Arguments:
 *	a0	new user stack pointer
 */
	.text
LEAF(alpha_pal_wrusp,1)
	call_pal PAL_OSF1_wrusp
	RET
	END(alpha_pal_wrusp)

/*
a155 12

/*
 * alpha_pal_wrmces: Write MCES processor register. [PRIVILEGED]
 *
 * Arguments:
 *	a0	value to write to MCES
 */
	.text
LEAF(alpha_pal_wrmces,1)
	call_pal PAL_OSF1_wrmces
	RET
	END(alpha_pal_wrmces)
@


1.4.14.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 2
a2 2
/* $OpenBSD: pal.s,v 1.6 2000/11/08 19:16:59 ericj Exp $ */
/* $NetBSD: pal.s,v 1.14 1999/12/02 22:08:04 thorpej Exp $ */
d34 2
a35 2
 * The following code is originally derived from pages: (I) 6-5 - (I) 6-7
 * and (III) 2-1 - (III) 2-25 of "Alpha Architecture Reference Manual" by
a36 4
 *
 * Updates taken from pages: (II-B) 2-1 - (II-B) 2-33 of "Alpha AXP
 * Architecture Reference Manual, Second Edition" by Richard L. Sites
 * and Richard T. Witek.
a38 1
inc2:	.stabs	__FILE__,132,0,0,inc2; .loc	1 __LINE__
d40 19
a58 7
 * alpha_amask: read architecture features (XXX INSTRUCTION, NOT PALcode OP)
 *
 * Arguments:
 *	a0	bitmask of features to test
 *
 * Returns:
 *	v0	bitmask - bit is _cleared_ if feature is supported
d61 3
a63 2
LEAF(alpha_amask,1)
	amask	a0, v0
d65 1
a65 1
	END(alpha_amask)
d68 2
a69 4
 * alpha_implver: read implementation version (XXX INSTRUCTION, NOT PALcode OP)
 *
 * Returns:
 *	v0	implementation version - see <machine/alpha_cpu.h>
d72 2
a73 6
LEAF(alpha_implver,0)
#if 0
	implver	0x1, v0
#else
	.long	0x47e03d80	/* XXX gas(1) does the Wrong Thing */
#endif
d75 1
a75 1
	END(alpha_implver)
d78 1
a78 7
 * alpha_pal_cflush: Cache flush [PRIVILEGED]
 *
 * Flush the entire physical page specified by the PFN specified in
 * a0 from any data caches associated with the current processor.
 *
 * Arguments:
 *	a0	page frame number of page to flush
d81 2
a82 2
LEAF(alpha_pal_cflush,1)
	call_pal PAL_cflush
d84 1
a84 1
	END(alpha_pal_cflush)
d97 13
a109 1
 * alpha_pal_rdps: Read processor status. [PRIVILEGED]
d112 1
a112 1
 *	v0	current PS value
d115 2
a116 2
LEAF(alpha_pal_rdps,0)
	call_pal PAL_OSF1_rdps
d118 1
a118 1
	END(alpha_pal_rdps)
d142 25
d180 24
d214 12
@


1.3
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: pal.s,v 1.2 1995/11/23 02:34:23 cgd Exp $	*/
/*	$NetBSD: pal.s,v 1.2 1995/11/23 02:34:23 cgd Exp $	*/
d40 1
a40 1
 * pal_bpt: Breakpoint trap [UNPRIVILEGED]
d42 5
a46 14
	.text
LEAF(pal_bpt,0)
	call_pal PAL_bpt
	RET
	END(pal_bpt)

/*
 * pal_bugchk: Bugcheck trap [UNPRIVILEGED]
 */
	.text
LEAF(pal_bugchk,0)
	call_pal PAL_bugchk
	RET
	END(pal_bugchk)
a47 1
#ifdef ILLEGAL	/* ILLEGAL FROM KERNEL MODE */
d49 1
a49 1
 * pal_callsys: System call [UNPRIVILEGED]
d52 2
a53 2
LEAF(pal_callsys,0)
	call_pal PAL_OSF1_callsys
d55 1
a55 2
	END(pal_callsys)
#endif /* ILLEGAL */
d58 1
a58 1
 * pal_gentrap: Generate trap [UNPRIVILEGED]
d61 3
a63 2
LEAF(pal_gentrap,0)
	call_pal PAL_gentrap
d65 1
a65 1
	END(pal_gentrap)
d68 1
a68 1
 * pal_imb: I-Stream memory barrier. [UNPRIVILEGED]
d72 1
a72 1
LEAF(pal_imb,0)
d75 1
a75 24
	END(pal_imb)

/*
 * pal_rdunique: Read process unique value. [UNPRIVILEGED]
 *
 * Return:
 *	v0	current process unique value
 */
	.text
LEAF(pal_rdunique,0)
	call_pal PAL_rdunique
	RET
	END(pal_rdunique)

/*
 * pal_wrunique: Write process unique value. [UNPRIVILEGED]
 * Arguments:
 *	a0	new process unique value
 */
	.text
LEAF(pal_wrunique,1)
	call_pal PAL_wrunique
	RET
	END(pal_wrunique)
d78 1
a78 1
 * pal_draina: Drain aborts. [PRIVILEGED]
d81 1
a81 1
LEAF(pal_draina,0)
d84 1
a84 1
	END(pal_draina)
d87 1
a87 1
 * pal_halt: Halt the processor. [PRIVILEGED]
d90 1
a90 1
LEAF(pal_halt,0)
d92 1
a92 1
	br	zero,pal_halt	/* Just in case */
d94 1
a94 1
	END(pal_halt)
d97 1
a97 1
 * pal_rdps: Read processor status. [PRIVILEGED]
d100 1
a100 1
 *	v0	current processor status
d103 2
a104 2
LEAF(pal_rdps,0)
	call_pal PAL_OSF1_rdps
d106 1
a106 1
	END(pal_rdps)
d109 1
a109 1
 * pal_rdusp: Read user stack pointer. [PRIVILEGED]
d115 1
a115 1
LEAF(pal_rdusp,0)
d118 1
a118 46
	END(pal_rdusp)

/*
 * pal_rdval: Read system value. [PRIVILEGED]
 *
 * Return:
 *	v0	current system value
 */
	.text
LEAF(pal_rdval,0)
	call_pal PAL_OSF1_rdval
	RET
	END(pal_rdval)

/*
 * pal_retsys: Return from system call. [PRIVILEGED]
 */
	.text
LEAF(pal_retsys,0)
	call_pal PAL_OSF1_retsys
	RET
	END(pal_retsys)

/*
 * pal_rti: Return from trap, fault, or interrupt. [PRIVILEGED]
 */
	.text
LEAF(pal_rti,0)
	call_pal PAL_OSF1_rti
	RET
	END(pal_rti)

/*
 * pal_swpctx: Swap process context. [PRIVILEGED] 
 *
 * Arguments:
 *	a0	new PCB
 *
 * Return:
 *	v0	old PCB
 */
	.text
LEAF(pal_swpctx,1)
	call_pal PAL_OSF1_swpctx
	RET
	END(pal_swpctx)
d121 2
a122 1
 * pal_swpipl: Swap Interrupt priority level. [PRIVILEGED]
d131 1
a131 1
LEAF(pal_swpipl,1)
d134 1
a134 1
	END(pal_swpipl)
d136 1
a136 1
LEAF_NOPROFILE(profile_swpipl,1)
d139 1
a139 1
	END(profile_swpipl)
d142 1
a142 1
 * pal_tbi: Translation buffer invalidate. [PRIVILEGED]
d149 1
a149 1
LEAF(pal_tbi,2)
d152 1
a152 1
	END(pal_tbi)
d155 1
a155 1
 * pal_whami: Who am I? [PRIVILEGED]
d161 1
a161 1
LEAF(pal_whami,0)
d164 1
a164 1
	END(pal_whami)
d167 1
a167 1
 * pal_wrent: Write system entry address. [PRIVILEGED]
d174 1
a174 1
LEAF(pal_wrent,2)
d177 1
a177 1
	END(pal_wrent)
d180 1
a180 1
 * pal_wrfen: Write floating-point enable. [PRIVILEGED]
d186 1
a186 1
LEAF(pal_wrfen,1)
d189 1
a189 13
	END(pal_wrfen)

/*
 * pal_wrkgp: Write kernel global pointer. [PRIVILEGED]
 *
 * Arguments:
 *	a0	new kernel global pointer
 */
	.text
LEAF(pal_wrkgp,1)
	call_pal PAL_OSF1_wrkgp
	RET
	END(pal_wrkgp)
d192 1
a192 1
 * pal_wrusp: Write user stack pointer. [PRIVILEGED]
d198 1
a198 1
LEAF(pal_wrusp,1)
d201 1
a201 13
	END(pal_wrusp)

/*
 * pal_wrval: Write system value. [PRIVILEGED]
 *
 * Arguments:
 *	a0	new system value
 */
	.text
LEAF(pal_wrval,1)
	call_pal PAL_OSF1_wrval
	RET
	END(pal_wrval)
d204 1
a204 1
 * pal_wrvptptr: Write virtual page table pointer. [PRIVILEGED]
d210 1
a210 1
LEAF(pal_wrvptptr,1)
d213 1
a213 1
	END(pal_wrvptptr)
d216 1
a216 1
 * pal_mtpr_mces: Write MCES processor register. [PRIVILEGED, VMS, XXX!]
d222 2
a223 2
LEAF(pal_mtpr_mces,1)
	call_pal PAL_VMS_mtpr_mces
d225 1
a225 1
	END(pal_mtpr_mces)
@


1.2
log
@update to netbsd
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: pal.s,v 1.1 1995/02/13 23:07:06 cgd Exp $	*/
d211 5
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
