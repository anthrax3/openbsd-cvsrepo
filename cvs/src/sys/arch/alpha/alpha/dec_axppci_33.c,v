head	1.23;
access;
symbols
	OPENBSD_6_0:1.23.0.10
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.6
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.8
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.4
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.22.0.16
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.12
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.10
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.8
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.6
	OPENBSD_5_0:1.22.0.4
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.2
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.21.0.4
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.21.0.2
	OPENBSD_4_7_BASE:1.21
	OPENBSD_4_6:1.20.0.8
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.4
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.2
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.19.0.6
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.4
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.2
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.18.0.6
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.4
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.2
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.17.0.12
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.10
	OPENBSD_3_6_BASE:1.17
	SMP_SYNC_A:1.17
	SMP_SYNC_B:1.17
	OPENBSD_3_5:1.17.0.8
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.6
	OPENBSD_3_4_BASE:1.17
	UBC_SYNC_A:1.17
	OPENBSD_3_3:1.17.0.4
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	UBC_SYNC_B:1.17
	UBC:1.15.0.2
	UBC_BASE:1.15
	OPENBSD_3_0:1.13.0.4
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.13.0.2
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_8:1.8.0.10
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.8
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.6
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.4
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.7.0.4
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.23
date	2014.05.08.20.46.49;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2010.11.23.04.07.55;	author shadchin;	state Exp;
branches;
next	1.21;

1.21
date	2009.07.30.21.39.13;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2008.07.16.20.03.20;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2006.11.28.16.56.50;	author dlg;	state Exp;
branches;
next	1.18;

1.18
date	2005.05.09.21.55.12;	author martin;	state Exp;
branches;
next	1.17;

1.17
date	2002.06.25.21.33.19;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.14.01.26.26;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.12.14.00.44.59;	author nate;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2001.12.13.19.13.22;	author nate;	state Exp;
branches;
next	1.13;

1.13
date	2001.01.20.20.27.40;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2000.11.16.23.32.20;	author ericj;	state Exp;
branches;
next	1.11;

1.11
date	2000.11.08.21.48.44;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.08.19.16.58;	author ericj;	state Exp;
branches;
next	1.9;

1.9
date	2000.11.08.16.00.59;	author art;	state Exp;
branches;
next	1.8;

1.8
date	99.01.11.05.10.59;	author millert;	state Exp;
branches
	1.8.6.1;
next	1.7;

1.7
date	97.11.04.22.07.42;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.01.24.19.56.27;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.12.08.00.20.16;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.10.30.22.38.06;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.07.29.22.57.29;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.18.09.42.10;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.03.52.35;	author deraadt;	state Exp;
branches;
next	;

1.8.6.1
date	2001.04.18.16.00.18;	author niklas;	state Exp;
branches;
next	1.8.6.2;

1.8.6.2
date	2002.03.06.00.24.08;	author niklas;	state Exp;
branches;
next	1.8.6.3;

1.8.6.3
date	2002.03.28.10.06.12;	author niklas;	state Exp;
branches;
next	1.8.6.4;

1.8.6.4
date	2003.03.27.23.18.05;	author niklas;	state Exp;
branches;
next	;

1.15.2.1
date	2002.06.11.03.33.39;	author art;	state Exp;
branches;
next	1.15.2.2;

1.15.2.2
date	2002.10.29.00.28.00;	author art;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Format string fixes for alpha kernels, and remove -Wno-format
@
text
@/* $OpenBSD: dec_axppci_33.c,v 1.22 2010/11/23 04:07:55 shadchin Exp $ */
/* $NetBSD: dec_axppci_33.c,v 1.44 2000/05/22 20:13:32 thorpej Exp $ */

/*
 * Copyright (c) 1995, 1996, 1997 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */
/*
 * Additional Copyright (c) 1997 by Matthew Jacob for NASA/Ames Research Center
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/termios.h>
#include <dev/cons.h>
#include <sys/conf.h>

#include <machine/rpb.h>
#include <machine/autoconf.h>
#include <machine/cpuconf.h>

#include <dev/ic/comreg.h>
#include <dev/ic/comvar.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>
#include <dev/ic/i8042reg.h>
#include <dev/ic/pckbcvar.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>

#include <alpha/pci/lcareg.h>
#include <alpha/pci/lcavar.h>

#include <scsi/scsi_all.h>
#include <scsi/scsiconf.h>

#include "pckbd.h"

#ifndef CONSPEED
#define CONSPEED TTYDEF_SPEED
#endif
static int comcnrate = CONSPEED;

void dec_axppci_33_init(void);
static void dec_axppci_33_cons_init(void);
static void dec_axppci_33_device_register(struct device *, void *);

const struct alpha_variation_table dec_axppci_33_variations[] = {
	{ 0, "Alpha PC AXPpci33 (\"NoName\")" },
	{ 0, NULL },
};

static struct lca_config *lca_preinit(void);

static struct lca_config *
lca_preinit()
{
	extern struct lca_config lca_configuration;

	lca_init(&lca_configuration, 0);
	return &lca_configuration;
}

#define	NSIO_PORT  0x26e	/* Hardware enabled option: 0x398 */
#define	NSIO_BASE  0
#define	NSIO_INDEX NSIO_BASE
#define	NSIO_DATA  1
#define	NSIO_SIZE  2
#define	NSIO_CFG0  0
#define	NSIO_CFG1  1
#define	NSIO_CFG2  2
#define	NSIO_IDE_ENABLE 0x40

void
dec_axppci_33_init()
{
	int cfg0val;
	u_int64_t variation;
	bus_space_tag_t iot;
	struct lca_config *lcp;
	bus_space_handle_t nsio;
#define	A33_NSIOBARRIER(type) bus_space_barrier(iot, nsio,\
				NSIO_BASE, NSIO_SIZE, (type))

	platform.family = "DEC AXPpci";

	if ((platform.model = alpha_dsr_sysname()) == NULL) {
		variation = hwrpb->rpb_variation & SV_ST_MASK;
		if ((platform.model = alpha_variation_name(variation,
		    dec_axppci_33_variations)) == NULL)
			platform.model = alpha_unknown_sysname();
	}

	platform.iobus = "lca";
	platform.cons_init = dec_axppci_33_cons_init;
	platform.device_register = dec_axppci_33_device_register;

	lcp = lca_preinit();
	iot = &lcp->lc_iot;
	if (bus_space_map(iot, NSIO_PORT, NSIO_SIZE, 0, &nsio))
		return;

	bus_space_write_1(iot, nsio, NSIO_INDEX, NSIO_CFG0);
	A33_NSIOBARRIER(BUS_SPACE_BARRIER_READ | BUS_SPACE_BARRIER_WRITE);
	cfg0val = bus_space_read_1(iot, nsio, NSIO_DATA);

	cfg0val |= NSIO_IDE_ENABLE;

	bus_space_write_1(iot, nsio, NSIO_INDEX, NSIO_CFG0);
	A33_NSIOBARRIER(BUS_SPACE_BARRIER_WRITE);
	bus_space_write_1(iot, nsio, NSIO_DATA, cfg0val);
	A33_NSIOBARRIER(BUS_SPACE_BARRIER_WRITE);
	bus_space_write_1(iot, nsio, NSIO_DATA, cfg0val);

	/* Leave nsio mapped to catch any accidental port space collisions  */
}

static void
dec_axppci_33_cons_init()
{
	struct ctb *ctb;
	struct lca_config *lcp;

	lcp = lca_preinit();

	ctb = (struct ctb *)(((caddr_t)hwrpb) + hwrpb->rpb_ctb_off);

	switch (ctb->ctb_term_type) {
	case CTB_PRINTERPORT: 
		/* serial console ... */
		/* XXX */
		{
			/*
			 * Delay to allow PROM putchars to complete.
			 * FIFO depth * character time,
			 * character time = (1000000 / (defaultrate / 10))
			 */
			DELAY(160000000 / comcnrate);

			if(comcnattach(&lcp->lc_iot, 0x3f8, comcnrate,
			    COM_FREQ,
			    (TTYDEF_CFLAG & ~(CSIZE | PARENB)) | CS8))
				panic("can't init serial console");

			break;
		}

	case CTB_GRAPHICS:
#if NPCKBD > 0
		/* display console ... */
		/* XXX */
		(void) pckbc_cnattach(&lcp->lc_iot, IO_KBD, KBCMDP, 0);

		if (CTB_TURBOSLOT_TYPE(ctb->ctb_turboslot) ==
		    CTB_TURBOSLOT_TYPE_ISA)
			isa_display_console(&lcp->lc_iot, &lcp->lc_memt);
		else
			pci_display_console(&lcp->lc_iot, &lcp->lc_memt,
			    &lcp->lc_pc, CTB_TURBOSLOT_BUS(ctb->ctb_turboslot),
			    CTB_TURBOSLOT_SLOT(ctb->ctb_turboslot), 0);
#else
		panic("not configured to use display && keyboard console");
#endif
		break;

	default:
		printf("ctb->ctb_term_type = 0x%lx\n",
		    (unsigned long)ctb->ctb_term_type);
		printf("ctb->ctb_turboslot = 0x%lx\n",
		    (unsigned long)ctb->ctb_turboslot);

		panic("consinit: unknown console type %lu",
		    (unsigned long)ctb->ctb_term_type);
	}
}

static void
dec_axppci_33_device_register(dev, aux)
	struct device *dev;
	void *aux;
{
	static int found, initted, diskboot, netboot;
	static struct device *pcidev, *ctrlrdev;
	struct bootdev_data *b = bootdev_data;
	struct device *parent = dev->dv_parent;
	struct cfdata *cf = dev->dv_cfdata;
	struct cfdriver *cd = cf->cf_driver;

	if (found)
		return;

	if (!initted) {
		diskboot = (strncasecmp(b->protocol, "SCSI", 4) == 0);
		netboot = (strncasecmp(b->protocol, "BOOTP", 5) == 0) ||
		    (strncasecmp(b->protocol, "MOP", 3) == 0);
#if 0
		printf("diskboot = %d, netboot = %d\n", diskboot, netboot);
#endif
		initted =1;
	}

	if (pcidev == NULL) {
		if (strcmp(cd->cd_name, "pci"))
			return;
		else {
			struct pcibus_attach_args *pba = aux;

			if ((b->slot / 1000) != pba->pba_bus)
				return;
	
			pcidev = dev;
#if 0
			printf("\npcidev = %s\n", dev->dv_xname);
#endif
			return;
		}
	}

	if (ctrlrdev == NULL) {
		if (parent != pcidev)
			return;
		else {
			struct pci_attach_args *pa = aux;
			int slot;

			slot = pa->pa_bus * 1000 + pa->pa_function * 100 +
			    pa->pa_device;
			if (b->slot != slot)
				return;
	
			if (netboot) {
				booted_device = dev;
#if 0
				printf("\nbooted_device = %s\n", dev->dv_xname);
#endif
				found = 1;
			} else {
				ctrlrdev = dev;
#if 0
				printf("\nctrlrdev = %s\n", dev->dv_xname);
#endif
			}
			return;
		}
	}

	if (!diskboot)
		return;

	if (!strcmp(cd->cd_name, "sd") || !strcmp(cd->cd_name, "st") ||
	    !strcmp(cd->cd_name, "cd")) {
		struct scsi_attach_args *sa = aux;
		struct scsi_link *periph = sa->sa_sc_link;
		int unit;

		if (parent->dv_parent != ctrlrdev)
			return;

		unit = periph->target * 100 + periph->lun;
		if (b->unit != unit)
			return;

		/* we've found it! */
		booted_device = dev;
#if 0
		printf("\nbooted_device = %s\n", dev->dv_xname);
#endif
		found = 1;
	}
}
@


1.22
log
@removed slot argument of function pckbc_cnattach
because it is always PCKBC_KBD_SLOT

ok krw@@, miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.21 2009/07/30 21:39:13 miod Exp $ */
d191 4
a194 2
		printf("ctb->ctb_term_type = 0x%lx\n", ctb->ctb_term_type);
		printf("ctb->ctb_turboslot = 0x%lx\n", ctb->ctb_turboslot);
d196 2
a197 2
		panic("consinit: unknown console type %ld",
		    ctb->ctb_term_type);
@


1.21
log
@Get rid of the obsolet BUS_BARRIER_xxx constants for bus_space_barrier(), only
provide and use BUS_SPACE_BARRIER_xxx.
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.20 2008/07/16 20:03:20 miod Exp $ */
d176 1
a176 2
		(void) pckbc_cnattach(&lcp->lc_iot, IO_KBD, KBCMDP,
		    PCKBC_KBD_SLOT, 0);
@


1.20
log
@Add a new parameter to pckbc_cnattach(): flags to put in the pckbc bowels.
For now, only one such flag is defined, PCKBC_CANT_TRANSLATE. It hints
pckbc that the device does not behave correctly to the ``set translation''
commands.

Set this flag if we are running on a Tadpole Ultrabook machine, which needs it.
This makes the built-in keyboard work correctly on this laptop (with the
help of the software translation pckbd diff).

tested & ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.19 2006/11/28 16:56:50 dlg Exp $ */
d128 1
a128 1
	A33_NSIOBARRIER(BUS_BARRIER_READ | BUS_BARRIER_WRITE);
d134 1
a134 1
	A33_NSIOBARRIER(BUS_BARRIER_WRITE);
d136 1
a136 1
	A33_NSIOBARRIER(BUS_BARRIER_WRITE);
@


1.19
log
@rename scsibus_attach_args to scsi_attach_args. this can help avoid
confusing when trying to attach scsibus to a hba, since it is really meant
for attaching scsi devices to scsibus.

ok deraadt@@ marco@@
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.18 2005/05/09 21:55:12 martin Exp $ */
d177 1
a177 1
		    PCKBC_KBD_SLOT);
@


1.18
log
@fixes and updates for root device detection from NetBSD:

- remove unneeded checks and variables
- use strncasecmp() to check b->protocol because the case is dependant on the
  firmware revision
- check logical unit numbers
- consistently check PCI function numbers
- on the 6600 models check which PCI hierarchy is looked at
- makes root device detection on DS20 (6600) work

testing by claudio, xsa and miod; ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.17 2002/06/25 21:33:19 miod Exp $ */
d275 1
a275 1
		struct scsibus_attach_args *sa = aux;
@


1.17
log
@No \n at the end of a panic() message... I thought all occurences had been
squashed already.
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.16 2002/03/14 01:26:26 millert Exp $ */
d205 2
a206 2
	static int found, initted, scsiboot, netboot;
	static struct device *pcidev, *scsidev;
d216 3
a218 3
		scsiboot = (strcmp(b->protocol, "SCSI") == 0);
		netboot = (strcmp(b->protocol, "BOOTP") == 0) ||
		    (strcmp(b->protocol, "MOP") == 0);
d220 1
a220 1
		printf("scsiboot = %d, netboot = %d\n", scsiboot, netboot);
d236 1
a236 1
			printf("\npcidev = %s\n", pcidev->dv_xname);
d242 1
a242 1
	if (scsiboot && (scsidev == NULL)) {
d247 1
d249 3
a251 1
			if ((b->slot % 1000) != pa->pa_device)
a252 2

			/* XXX function? */
d254 8
a261 1
			scsidev = dev;
d263 1
a263 1
			printf("\nscsidev = %s\n", scsidev->dv_xname);
d265 1
d270 5
a274 4
	if (scsiboot &&
	    (!strcmp(cd->cd_name, "sd") ||
	     !strcmp(cd->cd_name, "st") ||
	     !strcmp(cd->cd_name, "cd"))) {
d276 2
d279 1
a279 4
		if (parent->dv_parent != scsidev)
			return;

		if (b->unit / 100 != sa->sa_sc_link->target)
d282 2
a283 13
		/* XXX LUN! */

		switch (b->boot_dev_type) {
		case 0:
			if (strcmp(cd->cd_name, "sd") &&
			    strcmp(cd->cd_name, "cd"))
				return;
			break;
		case 1:
			if (strcmp(cd->cd_name, "st"))
				return;
			break;
		default:
a284 1
		}
d289 1
a289 1
		printf("\nbooted_device = %s\n", booted_device->dv_xname);
a291 20
	}

	if (netboot) {
		if (parent != pcidev)
			return;
		else {
			struct pci_attach_args *pa = aux;

			if ((b->slot % 1000) != pa->pa_device)
				return;

			/* XXX function? */
	
			booted_device = dev;
#if 0
			printf("\nbooted_device = %s\n", booted_device->dv_xname);
#endif
			found = 1;
			return;
		}
@


1.16
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.15 2001/12/14 00:44:59 nate Exp $ */
d195 1
a195 1
		panic("consinit: unknown console type %ld\n",
@


1.15
log
@Don't use a single static struct alpha_bus_space since there are machines
that can have more than one system bus attached to mainbus
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.14 2001/12/13 19:13:22 nate Exp $ */
d68 3
a70 3
void dec_axppci_33_init __P((void));
static void dec_axppci_33_cons_init __P((void));
static void dec_axppci_33_device_register __P((struct device *, void *));
d77 1
a77 1
static struct lca_config *lca_preinit __P((void));
@


1.15.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.15 2001/12/14 00:44:59 nate Exp $ */
d68 3
a70 3
void dec_axppci_33_init(void);
static void dec_axppci_33_cons_init(void);
static void dec_axppci_33_device_register(struct device *, void *);
d77 1
a77 1
static struct lca_config *lca_preinit(void);
@


1.15.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.15.2.1 2002/06/11 03:33:39 art Exp $ */
d195 1
a195 1
		panic("consinit: unknown console type %ld",
@


1.14
log
@Get rid of magic numbers
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.13 2001/01/20 20:27:40 art Exp $ */
d123 1
a123 1
	iot = lcp->lc_iot;
d164 1
a164 1
			if(comcnattach(lcp->lc_iot, 0x3f8, comcnrate,
d176 1
a176 1
		(void) pckbc_cnattach(lcp->lc_iot, IO_KBD, KBCMDP,
d181 1
a181 1
			isa_display_console(lcp->lc_iot, lcp->lc_memt);
d183 1
a183 1
			pci_display_console(lcp->lc_iot, lcp->lc_memt,
@


1.13
log
@No need to include machine/alpha.h here.
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.12 2000/11/16 23:32:20 ericj Exp $ */
d153 1
a153 1
	case 2: 
d172 1
a172 1
	case 3:
@


1.12
log
@
allow the console to attach on the rest of the alpha's we support.
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.11 2000/11/08 21:48:44 art Exp $ */
a41 1
#include <machine/alpha.h>
@


1.11
log
@no need to extern booted_device everywhere.
@
text
@d1 1
a1 1
/* $OpenBSD: dec_axppci_33.c,v 1.10 2000/11/08 19:16:58 ericj Exp $ */
d51 1
a51 1
#if 0
a52 1
#endif
a61 1
#if 0
a62 1
#endif
d177 2
a178 1
		(void) pckbc_cnattach(&lcp->lc_iot, IO_KBD, PCKBC_KBD_SLOT);
d182 1
a182 1
			isa_display_console(&lcp->lc_iot, &lcp->lc_memt);
d184 1
a184 1
			pci_display_console(&lcp->lc_iot, &lcp->lc_memt,
@


1.10
log
@add tags
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a213 1
	extern struct device *booted_device;
@


1.9
log
@Merge in big portions of the improvements NetBSD did to their alpha port.
Highlights: UVM, PMAP_NEW, bus_dma (only on some buses for now), new hardware
support, possiblity for ELF, etc, etc. Too much to mention.

This is still work in progress. video consoles might be broken, otherwise
we have basically the same functionality as before plus more.
@
text
@d1 1
@


1.8
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 2
/*	$OpenBSD: dec_axppci_33.c,v 1.7 1997/11/04 22:07:42 niklas Exp $	*/
/*	$NetBSD: dec_axppci_33.c,v 1.16 1996/11/25 03:59:20 cgd Exp $	*/
d4 1
a4 1
 * Copyright (c) 1995, 1996 Carnegie-Mellon University.
d29 3
d38 1
d41 1
a44 1
#include <dev/isa/isavar.h>
d47 6
d62 17
a78 1
cpu_decl(dec_axppci_33);
d80 4
a83 2
const char *
dec_axppci_33_model_name()
d85 1
d87 32
a118 8
	switch (hwrpb->rpb_variation & SV_ST_MASK) {
	case 0:						/* XXX */
		return "Alpha PC AXPpci33 (\"NoName\")";
		
	default:
		printf("unknown system variation %lx\n",
		    hwrpb->rpb_variation & SV_ST_MASK);
		return NULL;
d120 23
d145 1
a145 1
void
a149 1
	extern struct lca_config lca_configuration;
d151 1
a151 2
	lcp = &lca_configuration;
	lca_init(lcp, 0);
d160 11
a170 14
			static struct consdev comcons = { NULL, NULL,
			    comcngetc, comcnputc, comcnpollc, NODEV, 1 };

			/* Delay to allow PROM putchars to complete */
			DELAY(10000);

			comconsaddr = 0x3f8;
			comconsinit = 0;
			comconsiot = lcp->lc_iot;
			if (bus_space_map(comconsiot, comconsaddr, COM_NPORTS,
			    0, &comconsioh))
				panic("can't map serial console I/O ports");
			comconscflag = (TTYDEF_CFLAG & ~(CSIZE | PARENB)) | CS8;
			cominit(comconsiot, comconsioh, comdefaultrate);
a171 2
			cn_tab = &comcons;
			comcons.cn_dev = makedev(26, 0);	/* XXX */
d176 1
d178 12
a189 2
#if 0
		printf("turboslot 0x%x\n", ctb->ctb_turboslot);
a190 6
		if ((ctb->ctb_turboslot & 0xffff) == 0)
			isa_display_console(lcp->lc_iot, lcp->lc_memt);
		else
			pci_display_console(lcp->lc_iot, lcp->lc_memt,
			    &lcp->lc_pc, (ctb->ctb_turboslot >> 8) & 0xff,
			    ctb->ctb_turboslot & 0xff, 0);
d197 1
a197 1
		panic("consinit: unknown console type %d",
d202 1
a202 8
const char *
dec_axppci_33_iobus_name()
{

	return ("lca");
}

void
d213 1
d220 2
a221 1
		netboot = (strcmp(b->protocol, "BOOTP") == 0);
d234 1
a234 1
			if (b->bus != pba->pba_bus)
d251 1
a251 1
			if (b->slot != pa->pa_device)
d306 1
a306 1
			if (b->slot != pa->pa_device)
@


1.8.6.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 2
a2 2
/* $OpenBSD: dec_axppci_33.c,v 1.13 2001/01/20 20:27:40 art Exp $ */
/* $NetBSD: dec_axppci_33.c,v 1.44 2000/05/22 20:13:32 thorpej Exp $ */
d5 1
a5 1
 * Copyright (c) 1995, 1996, 1997 Carnegie-Mellon University.
a29 3
/*
 * Additional Copyright (c) 1997 by Matthew Jacob for NASA/Ames Research Center
 */
a35 1
#include <sys/conf.h>
d41 1
a43 5

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>
#include <dev/ic/i8042reg.h>
#include <dev/ic/pckbcvar.h>
d53 1
a53 15
#include "pckbd.h"

#ifndef CONSPEED
#define CONSPEED TTYDEF_SPEED
#endif
static int comcnrate = CONSPEED;

void dec_axppci_33_init __P((void));
static void dec_axppci_33_cons_init __P((void));
static void dec_axppci_33_device_register __P((struct device *, void *));

const struct alpha_variation_table dec_axppci_33_variations[] = {
	{ 0, "Alpha PC AXPpci33 (\"NoName\")" },
	{ 0, NULL },
};
d55 2
a56 4
static struct lca_config *lca_preinit __P((void));

static struct lca_config *
lca_preinit()
a57 1
	extern struct lca_config lca_configuration;
d59 9
a67 2
	lca_init(&lca_configuration, 0);
	return &lca_configuration;
a69 10
#define	NSIO_PORT  0x26e	/* Hardware enabled option: 0x398 */
#define	NSIO_BASE  0
#define	NSIO_INDEX NSIO_BASE
#define	NSIO_DATA  1
#define	NSIO_SIZE  2
#define	NSIO_CFG0  0
#define	NSIO_CFG1  1
#define	NSIO_CFG2  2
#define	NSIO_IDE_ENABLE 0x40

a70 44
dec_axppci_33_init()
{
	int cfg0val;
	u_int64_t variation;
	bus_space_tag_t iot;
	struct lca_config *lcp;
	bus_space_handle_t nsio;
#define	A33_NSIOBARRIER(type) bus_space_barrier(iot, nsio,\
				NSIO_BASE, NSIO_SIZE, (type))

	platform.family = "DEC AXPpci";

	if ((platform.model = alpha_dsr_sysname()) == NULL) {
		variation = hwrpb->rpb_variation & SV_ST_MASK;
		if ((platform.model = alpha_variation_name(variation,
		    dec_axppci_33_variations)) == NULL)
			platform.model = alpha_unknown_sysname();
	}

	platform.iobus = "lca";
	platform.cons_init = dec_axppci_33_cons_init;
	platform.device_register = dec_axppci_33_device_register;

	lcp = lca_preinit();
	iot = lcp->lc_iot;
	if (bus_space_map(iot, NSIO_PORT, NSIO_SIZE, 0, &nsio))
		return;

	bus_space_write_1(iot, nsio, NSIO_INDEX, NSIO_CFG0);
	A33_NSIOBARRIER(BUS_BARRIER_READ | BUS_BARRIER_WRITE);
	cfg0val = bus_space_read_1(iot, nsio, NSIO_DATA);

	cfg0val |= NSIO_IDE_ENABLE;

	bus_space_write_1(iot, nsio, NSIO_INDEX, NSIO_CFG0);
	A33_NSIOBARRIER(BUS_BARRIER_WRITE);
	bus_space_write_1(iot, nsio, NSIO_DATA, cfg0val);
	A33_NSIOBARRIER(BUS_BARRIER_WRITE);
	bus_space_write_1(iot, nsio, NSIO_DATA, cfg0val);

	/* Leave nsio mapped to catch any accidental port space collisions  */
}

static void
d75 1
d77 2
a78 1
	lcp = lca_preinit();
d87 5
a91 11
			/*
			 * Delay to allow PROM putchars to complete.
			 * FIFO depth * character time,
			 * character time = (1000000 / (defaultrate / 10))
			 */
			DELAY(160000000 / comcnrate);

			if(comcnattach(lcp->lc_iot, 0x3f8, comcnrate,
			    COM_FREQ,
			    (TTYDEF_CFLAG & ~(CSIZE | PARENB)) | CS8))
				panic("can't init serial console");
d93 11
a107 1
#if NPCKBD > 0
d109 4
a112 6
		/* XXX */
		(void) pckbc_cnattach(lcp->lc_iot, IO_KBD, KBCMDP,
		    PCKBC_KBD_SLOT);

		if (CTB_TURBOSLOT_TYPE(ctb->ctb_turboslot) ==
		    CTB_TURBOSLOT_TYPE_ISA)
d116 2
a117 5
			    &lcp->lc_pc, CTB_TURBOSLOT_BUS(ctb->ctb_turboslot),
			    CTB_TURBOSLOT_SLOT(ctb->ctb_turboslot), 0);
#else
		panic("not configured to use display && keyboard console");
#endif
d124 1
a124 1
		panic("consinit: unknown console type %ld\n",
d129 8
a136 1
static void
d153 1
a153 2
		netboot = (strcmp(b->protocol, "BOOTP") == 0) ||
		    (strcmp(b->protocol, "MOP") == 0);
d166 1
a166 1
			if ((b->slot / 1000) != pba->pba_bus)
d183 1
a183 1
			if ((b->slot % 1000) != pa->pa_device)
d238 1
a238 1
			if ((b->slot % 1000) != pa->pa_device)
@


1.8.6.2
log
@Merge in trunk
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d123 1
a123 1
	iot = &lcp->lc_iot;
d153 1
a153 1
	case CTB_PRINTERPORT: 
d164 1
a164 1
			if(comcnattach(&lcp->lc_iot, 0x3f8, comcnrate,
d172 1
a172 1
	case CTB_GRAPHICS:
d176 1
a176 1
		(void) pckbc_cnattach(&lcp->lc_iot, IO_KBD, KBCMDP,
d181 1
a181 1
			isa_display_console(&lcp->lc_iot, &lcp->lc_memt);
d183 1
a183 1
			pci_display_console(&lcp->lc_iot, &lcp->lc_memt,
@


1.8.6.3
log
@Merge in -current from about a week ago
@
text
@d68 3
a70 3
void dec_axppci_33_init(void);
static void dec_axppci_33_cons_init(void);
static void dec_axppci_33_device_register(struct device *, void *);
d77 1
a77 1
static struct lca_config *lca_preinit(void);
@


1.8.6.4
log
@Sync the SMP branch with 3.3
@
text
@d195 1
a195 1
		panic("consinit: unknown console type %ld",
@


1.7
log
@Support ISA VGA for real on DEC AXPPCI 33
@
text
@d1 1
a1 1
/*	$OpenBSD: dec_axppci_33.c,v 1.6 1997/01/24 19:56:27 niklas Exp $	*/
d124 1
a124 1
		panic("consinit: unknown console type %d\n",
@


1.6
log
@Sync with NetBSD 961207
@
text
@d1 1
a1 1
/*	$OpenBSD: dec_axppci_33.c,v 1.5 1996/12/08 00:20:16 niklas Exp $	*/
d109 4
a112 2
		/* XXX */
		if (ctb->ctb_turboslot == 0)
@


1.5
log
@Merge to NetBSD 961107, i.e. mostly new bus.h
@
text
@d1 2
a2 2
/*	$OpenBSD: dec_axppci_33.c,v 1.4 1996/10/30 22:38:06 niklas Exp $	*/
/*	$NetBSD: dec_axppci_33.c,v 1.13 1996/10/23 04:12:14 cgd Exp $	*/
d39 1
a49 2
#include <alpha/alpha/dec_axppci_33.h>

d53 4
a56 2
char *
dec_axppci_33_modelname()
d71 1
a71 1
dec_axppci_33_consinit()
d78 1
a78 1
	lca_init(lcp);
d110 6
a115 3
		pci_display_console(lcp->lc_iot, lcp->lc_memt, &lcp->lc_pc,
		    (ctb->ctb_turboslot >> 8) & 0xff,
		    ctb->ctb_turboslot & 0xff, 0);
d125 7
@


1.4
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 2
a2 2
/*	$OpenBSD: dec_axppci_33.c,v 1.12 1996/10/13 02:59:32 christos Exp $	*/
/*	$NetBSD: dec_axppci_33.c,v 1.12 1996/10/13 02:59:32 christos Exp $	*/
d41 2
a42 2
#include <dev/isa/comreg.h>
#include <dev/isa/comvar.h>
a85 5
			extern int comconsinit;	/* set */
			extern int comdefaultrate;
			extern int comcngetc __P((dev_t));
			extern void comcnputc __P((dev_t, int));
			extern void comcnpollc __P((dev_t, int));
d94 3
a96 3
			comconsbc = &lcp->lc_bc;
			if (bus_io_map(comconsbc, comconsaddr, COM_NPORTS,
			    &comconsioh))
d99 1
a99 1
			cominit(comconsbc, comconsioh, comdefaultrate);
d109 1
a109 1
		pci_display_console(&lcp->lc_bc, &lcp->lc_pc,
@


1.3
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: dec_axppci_33.c,v 1.4.4.2 1996/06/14 20:42:24 cgd Exp $	*/
/*	$NetBSD: dec_axppci_33.c,v 1.4.4.2 1996/06/14 20:42:24 cgd Exp $	*/
d32 1
d86 1
a86 3
			extern bus_chipset_tag_t comconsbc;	/* set */
			extern bus_io_handle_t comcomsioh;	/* set */
			extern int comconsaddr, comconsinit;	/* set */
d133 1
a133 1
	static int found;
d143 9
d169 1
a169 1
	if (scsidev == NULL) {
d188 4
a191 3
	if (!strcmp(cd->cd_name, "sd") ||
	    !strcmp(cd->cd_name, "st") ||
	    !strcmp(cd->cd_name, "cd")) {
d222 20
@


1.2
log
@sync to 0616, retaining local diffs
@
text
@d1 1
@


1.1
log
@update to netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: dec_axppci_33.c,v 1.1 1995/11/23 02:33:55 cgd Exp $	*/
d4 1
a4 1
 * Copyright (c) 1995 Carnegie-Mellon University.
d32 1
d36 1
d39 2
d49 3
d68 1
a68 2
dec_axppci_33_consinit(constype)
	char *constype;
a78 4
	printf("constype = %s\n", constype);
	printf("ctb->ctb_term_type = 0x%lx\n", ctb->ctb_term_type);
	printf("ctb->ctb_turboslot = 0x%lx\n", ctb->ctb_turboslot);

d84 4
a87 2
			extern int comdefaultrate, comconsole;
			extern int comconsaddr, comconsinit;
a90 2
			extern __const struct isa_pio_fns *comconsipf;
			extern __const void *comconsipfa;
d94 2
d97 1
a97 4
			cominit(lcp->lc_piofns, lcp->lc_pioarg, 0,
			    comdefaultrate);
			comconsole = 0;				/* XXX */
			comconsaddr = 0x3f8;			/* XXX */
d99 6
a104 2
			comconsipf = lcp->lc_piofns;
			comconsipfa = lcp->lc_pioarg;
d114 3
a116 3
		pci_display_console(lcp->lc_conffns, lcp->lc_confarg,
		    lcp->lc_memfns, lcp->lc_memarg, lcp->lc_piofns,
		    lcp->lc_pioarg, 0, ctb->ctb_turboslot & 0xffff, 0);
d120 3
d128 4
a131 3
dev_t
dec_axppci_33_bootdev(booted_dev)
	char *booted_dev;
d133 45
d179 34
a212 1
	panic("gack.");
@
