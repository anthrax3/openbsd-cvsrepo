head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.12
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.8
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.18
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.02.02.22.49.38;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2014.02.01.21.19.02;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2014.01.26.17.40.09;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.01.21.09.17;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.13.08.31.50;	author martin;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Force an fpu context synchronization before halting secondary processors.
Similar to what other platforms do.
@
text
@/* $OpenBSD: ipifuncs.c,v 1.5 2014/02/01 21:19:02 miod Exp $	*/
/* $NetBSD: ipifuncs.c,v 1.9 1999/12/02 01:09:11 thorpej Exp $ */

/*-
 * Copyright (c) 1998, 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Interprocessor interrupt handlers.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>
#include <sys/reboot.h>

#include <uvm/uvm_extern.h>

#include <machine/atomic.h>
#include <machine/alpha_cpu.h>
#include <machine/cpu.h>
#include <machine/intr.h>
#include <machine/prom.h>
#include <machine/rpb.h>

typedef void (*ipifunc_t)(struct cpu_info *, struct trapframe *);

void	alpha_ipi_halt(struct cpu_info *, struct trapframe *);
void	alpha_ipi_imb(struct cpu_info *, struct trapframe *);
void	alpha_ipi_ast(struct cpu_info *, struct trapframe *);
void	alpha_ipi_synch_fpu(struct cpu_info *, struct trapframe *);
void	alpha_ipi_discard_fpu(struct cpu_info *, struct trapframe *);
void	alpha_ipi_pause(struct cpu_info *, struct trapframe *);

/*
 * NOTE: This table must be kept in order with the bit definitions
 * in <machine/intr.h>.
 */
const ipifunc_t ipifuncs[ALPHA_NIPIS] = {
	alpha_ipi_halt,
	pmap_do_tlb_shootdown,
	alpha_ipi_imb,
	alpha_ipi_ast,
	alpha_ipi_synch_fpu,
	alpha_ipi_discard_fpu,
	alpha_ipi_pause
};

/*
 * Process IPIs for a CPU.
 */
void
alpha_ipi_process(struct cpu_info *ci, struct trapframe *framep)
{
	u_long pending_ipis, bit;

	while ((pending_ipis = atomic_loadlatch_ulong(&ci->ci_ipis, 0)) != 0) {
		for (bit = 0; bit < ALPHA_NIPIS; bit++) {
			if (pending_ipis & (1UL << bit)) {
				(*ipifuncs[bit])(ci, framep);
			}
		}
	}
}

/*
 * Send an interprocessor interrupt.
 */
void
alpha_send_ipi(u_long cpu_id, u_long ipimask)
{

#ifdef DIAGNOSTIC
	if (cpu_id >= hwrpb->rpb_pcs_cnt ||
	    cpu_info[cpu_id] == NULL)
		panic("alpha_send_ipi: bogus cpu_id");
	if (((1UL << cpu_id) & cpus_running) == 0)
		panic("alpha_send_ipi: CPU %ld not running", cpu_id);
#endif

	atomic_setbits_ulong(&cpu_info[cpu_id]->ci_ipis, ipimask);
	alpha_pal_wripir(cpu_id);
}

/*
 * Broadcast an IPI to all but ourselves.
 */
void
alpha_broadcast_ipi(u_long ipimask)
{
	struct cpu_info *ci;
	CPU_INFO_ITERATOR cii;
	u_long cpu_id = cpu_number();
	u_long cpumask;

	cpumask = cpus_running & ~(1UL << cpu_id);
	if (cpumask == 0)
		return;

	CPU_INFO_FOREACH(cii, ci) {
		if ((cpumask & (1UL << ci->ci_cpuid)) == 0)
			continue;
		alpha_send_ipi(ci->ci_cpuid, ipimask);
	}
}

/*
 * Send an IPI to all in the list but ourselves.
 */
void
alpha_multicast_ipi(u_long cpumask, u_long ipimask)
{
	struct cpu_info *ci;
	CPU_INFO_ITERATOR cii;
	u_long cpu_id = cpu_number();

	cpumask &= cpus_running;
	cpumask &= ~(1UL << cpu_id);
	if (cpumask == 0)
		return;

	CPU_INFO_FOREACH(cii, ci) {
		if ((cpumask & (1UL << ci->ci_cpuid)) == 0)
			continue;
		alpha_send_ipi(ci->ci_cpuid, ipimask);
	}
}

void
alpha_ipi_halt(struct cpu_info *ci, struct trapframe *framep)
{
	SCHED_ASSERT_UNLOCKED();
	fpusave_cpu(ci, 1);
	(void)splhigh();

	cpu_halt();
	/* NOTREACHED */
}

void
alpha_ipi_imb(struct cpu_info *ci, struct trapframe *framep)
{
	alpha_pal_imb();
}

void
alpha_ipi_ast(struct cpu_info *ci, struct trapframe *framep)
{
#if 0 /* useless */
	cpu_unidle(ci);
#endif
}

void
alpha_ipi_synch_fpu(struct cpu_info *ci, struct trapframe *framep)
{
	if (ci->ci_flags & CPUF_FPUSAVE)
		return;
	fpusave_cpu(ci, 1);
}

void
alpha_ipi_discard_fpu(struct cpu_info *ci, struct trapframe *framep)
{
	if (ci->ci_flags & CPUF_FPUSAVE)
		return;
	fpusave_cpu(ci, 0);
}

void
alpha_ipi_pause(struct cpu_info *ci, struct trapframe *framep)
{
	u_long cpumask = (1UL << ci->ci_cpuid);
	int s;

	s = splhigh();

	/* Point debuggers at our trapframe for register state. */
	ci->ci_db_regs = framep;

	atomic_setbits_ulong(&ci->ci_flags, CPUF_PAUSED);

	/* Spin with interrupts disabled until we're resumed. */
	do {
		alpha_mb();
	} while (cpus_paused & cpumask);

	atomic_clearbits_ulong(&ci->ci_flags, CPUF_PAUSED);

	ci->ci_db_regs = NULL;

	splx(s);

	/* Do an IMB on the way out, in case the kernel text was changed. */
	alpha_pal_imb();
}
@


1.5
log
@Use atomic_loadlatch_ulong() to speedup and simplify the ipi dispatcher.
No functional change.
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.4 2014/01/26 17:40:09 miod Exp $	*/
d158 3
a160 2
	/* Disable interrupts. */
	(void) splhigh();
@


1.4
log
@Work in progress work towards SMP, heavily based upon NetBSD. The MP kernel
will boot multiuser, but will deadlock under load, and I can't find my
mistake yet.
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.3 2012/11/01 21:09:17 miod Exp $	*/
d83 1
a83 7
	for (;;) {
		pending_ipis = ci->ci_ipis;
		if (pending_ipis == 0)
			break;

		atomic_clearbits_ulong(&ci->ci_ipis, pending_ipis);

@


1.3
log
@Switch alpha to per-process astpending.
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.2 2008/06/26 05:42:08 ray Exp $	*/
d41 1
d49 1
d52 8
a59 5
void	alpha_ipi_halt(void);
void	alpha_ipi_tbia(void);
void	alpha_ipi_tbiap(void);
void	alpha_ipi_imb(void);
void	alpha_ipi_ast(void);
d65 1
a65 1
ipifunc_t ipifuncs[ALPHA_NIPIS] = {
d67 1
a67 2
	alpha_ipi_tbia,
	alpha_ipi_tbiap,
d70 3
d76 23
d102 1
a102 2
alpha_send_ipi(cpu_id, ipimask)
	u_long cpu_id, ipimask;
d107 4
a110 2
	    cpu_info[cpu_id].ci_dev == NULL)
		panic("alpha_sched_ipi: bogus cpu_id");
d113 1
a113 1
	atomic_setbits_ulong(&cpu_info[cpu_id].ci_ipis, ipimask);
d121 1
a121 2
alpha_broadcast_ipi(ipimask)
	u_long ipimask;
d123 4
a126 1
	u_long i;
d128 6
a133 2
	for (i = 0; i < hwrpb->rpb_pcs_cnt; i++) {
		if (cpu_info[i].ci_dev == NULL)
d135 1
a135 1
		alpha_send_ipi(i, ipimask);
d143 1
a143 2
alpha_multicast_ipi(cpumask, ipimask)
	u_long cpumask, ipimask;
d145 3
a147 1
	u_long i;
d150 1
a150 1
	cpumask &= ~(1UL << cpu_number());
d154 2
a155 2
	for (i = 0; i < hwrpb->rpb_pcs_cnt; i++) {
		if ((cpumask & (1UL << i)) == 0)
d157 1
a157 1
		alpha_send_ipi(i, ipimask);
d162 1
a162 1
alpha_ipi_halt()
a163 3
	u_long cpu_id = alpha_pal_whami();
	struct pcs *pcsp = LOCATE_PCS(hwrpb, cpu_id);

d167 1
a167 6
	printf("%s: shutting down...\n", cpu_info[cpu_id].ci_dev->dv_xname);
	atomic_clearbits_ulong(&cpus_running, (1UL << cpu_id));

	pcsp->pcs_flags &= ~(PCS_RC | PCS_HALT_REQ);
	pcsp->pcs_flags |= PCS_HALT_STAY_HALTED;
	alpha_pal_halt();
d172 1
a172 1
alpha_ipi_tbia()
d174 2
a175 1
	u_long cpu_id = alpha_pal_whami();
d177 6
a182 5
	/* If we're doing a TBIA, we don't need to do a TBIAP or a SHOOTDOWN. */
	atomic_clearbits_ulong(&cpu_info[cpu_id].ci_ipis,
	    ALPHA_IPI_TBIAP|ALPHA_IPI_SHOOTDOWN);

	ALPHA_TBIA();
d186 1
a186 1
alpha_ipi_tbiap()
d188 3
a190 4

	/* Can't clear SHOOTDOWN here; might have PG_ASM mappings. */

	ALPHA_TBIAP();
d194 1
a194 1
alpha_ipi_imb()
d196 3
a198 2

	alpha_pal_imb();
d202 1
a202 1
alpha_ipi_ast()
d204 23
a226 1
	cpu_unidle(curcpu());
@


1.2
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: ipifuncs.c,v 1.1 2007/04/13 08:31:50 martin Exp $	*/
d172 1
a172 2

	aston(curcpu());
@


1.1
log
@get alpha SMP into a state where it at least compiles:

- add machine-dependent spinlock operations
- add basic interprocessor interrupt sending and receiving code

from NetBSD; ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD$	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@

