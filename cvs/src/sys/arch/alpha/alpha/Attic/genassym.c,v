head	1.11;
access;
symbols
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	UBC_SYNC_A:1.11
	UBC_SYNC_B:1.11
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.4
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2001.05.11.09.46.37;	author art;	state dead;
branches;
next	1.10;

1.10
date	2001.04.06.04.42.05;	author csapuntz;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.15.11.58.54;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.08.19.16.58;	author ericj;	state Exp;
branches;
next	1.7;

1.7
date	2000.11.08.16.01.00;	author art;	state Exp;
branches;
next	1.6;

1.6
date	99.09.26.11.07.32;	author kstailey;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	96.10.30.22.38.10;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.07.29.22.57.36;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.06.18.09.42.13;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.03.52.37;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.39;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.39;	author deraadt;	state Exp;
branches;
next	;

1.6.4.1
date	2001.04.18.16.00.21;	author niklas;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2001.07.04.10.14.19;	author niklas;	state dead;
branches;
next	;


desc
@@


1.11
log
@Bye bye.
@
text
@/* $OpenBSD: genassym.c,v 1.10 2001/04/06 04:42:05 csapuntz Exp $ */
/* $NetBSD: genassym.c,v 1.27 2000/05/26 00:36:42 thorpej Exp $ */

/*
 * Copyright (c) 1994, 1995 Gordon W. Ross
 * Copyright (c) 1993 Adam Glass
 * Copyright (c) 1982, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)genassym.c	8.3 (Berkeley) 1/4/94
 */

/*
 * This program is designed so that it can be both:
 * (1) Run on the native machine to generate assym.h
 * (2) Converted to assembly that genassym.awk will
 *     translate into the same assym.h as (1) does.
 * The second method is done as follows:
 *   m68k-xxx-gcc [options] -S .../genassym.c
 *   awk -f genassym.awk < genassym.s > assym.h
 *
 * Using actual C code here (instead of genassym.cf)
 * has the advantage that "make depend" automatically
 * tracks dependencies of this C code on the (many)
 * header files used here.  Also, the awk script used
 * to convert the assembly output to assym.h is much
 * smaller and simpler than sys/kern/genassym.sh.
 *
 * Both this method and the genassym.cf method have the
 * disadvantage that they depend on gcc-specific features.
 * This method depends on the format of assembly output for
 * data, and the genassym.cf method depends on features of
 * the gcc asm() statement (inline assembly).
 */

#include <sys/cdefs.h>			/* RCS ID & Copyright macro defns */
#include <sys/param.h>
#include <sys/buf.h>
#include <sys/map.h>
#include <sys/proc.h>
#include <sys/mbuf.h>
#include <sys/msgbuf.h>
#include <sys/syscall.h>
#include <sys/user.h>

#include <machine/cpu.h>
#include <machine/reg.h>
#include <machine/frame.h>
#include <machine/rpb.h>
#include <machine/vmparam.h>

#ifdef COMPAT_NETBSD
#include <compat/netbsd/netbsd_syscall.h>
#endif

#include <vm/vm.h>

/* Note: Avoid /usr/include for cross compilation! */
extern void printf __P((const char *fmt, ...));
extern void exit __P((int));

#ifdef	__STDC__
#define def(name, value) 	{ #name, value }
#define	def1(name)	 	{ #name, name }
#define	off(name, type, member)	{ #name, offsetof(type, member) }
#else
#define def(name, value) 	{ "name", value }
#define	def1(name)	 	{ "name", name }
#define	off(name, type, member)	{ "name", offsetof(type, member) }
#endif

/*
 * Note: genassym.awk cares about the form of this structure,
 * as well as the names and placement of the "asdefs" array
 * and the "nassefs" variable below.  Clever, but fragile.
 */
struct nv {
	char n[28];
	long v;
};

struct nv assyms[] = {
	/* general constants */
	def1(NBPG),
	def1(PGSHIFT),
	def1(VM_MAX_ADDRESS),

	/* Register offsets, for stack frames. */
	def1(FRAME_V0),
	def1(FRAME_T0),
	def1(FRAME_T1),
	def1(FRAME_T2),
	def1(FRAME_T3),
	def1(FRAME_T4),
	def1(FRAME_T5),
	def1(FRAME_T6),
	def1(FRAME_T7),
	def1(FRAME_S0),
	def1(FRAME_S1),
	def1(FRAME_S2),
	def1(FRAME_S3),
	def1(FRAME_S4),
	def1(FRAME_S5),
	def1(FRAME_S6),
	def1(FRAME_A3),
	def1(FRAME_A4),
	def1(FRAME_A5),
	def1(FRAME_T8),
	def1(FRAME_T9),
	def1(FRAME_T10),
	def1(FRAME_T11),
	def1(FRAME_RA),
	def1(FRAME_T12),
	def1(FRAME_AT),
	def1(FRAME_SP),

	def1(FRAME_SW_SIZE),

	def1(FRAME_PS),
	def1(FRAME_PC),
	def1(FRAME_GP),
	def1(FRAME_A0),
	def1(FRAME_A1),
	def1(FRAME_A2),

	def1(FRAME_SIZE),

	/* bits of the PS register */
	def1(ALPHA_PSL_USERMODE),
	def1(ALPHA_PSL_IPL_MASK),
	def1(ALPHA_PSL_IPL_0),
	def1(ALPHA_PSL_IPL_SOFT),
	def1(ALPHA_PSL_IPL_HIGH),

	/* pte bits */
	def1(ALPHA_PTE_VALID),
	def1(ALPHA_PTE_ASM),
	def1(ALPHA_PTE_KR),
	def1(ALPHA_PTE_KW),

	/* Important offsets into the proc struct & associated constants */
	off(P_FORW, struct proc, p_forw),
	off(P_BACK, struct proc, p_back),
	off(P_ADDR, struct proc, p_addr),
	off(P_VMSPACE, struct proc, p_vmspace),
	off(P_STAT, struct proc, p_stat),
	off(P_MD_FLAGS, struct proc, p_md.md_flags),
	off(P_MD_PCBPADDR, struct proc, p_md.md_pcbpaddr),
	off(PH_LINK, struct prochd, ph_link),
	off(PH_RLINK, struct prochd, ph_rlink),

	/* XXXXX - Extremly bogus! */
	def(SONPROC, SRUN),
	/* XXX */

	/* offsets needed by cpu_switch() to switch mappings. */
	off(VM_MAP_PMAP, struct vmspace, vm_map.pmap), 

	/* Important offsets into the user struct & associated constants */
	def1(UPAGES),
	off(U_PCB, struct user, u_pcb),
	off(U_PCB_HWPCB, struct user, u_pcb.pcb_hw),
	off(U_PCB_HWPCB_KSP, struct user, u_pcb.pcb_hw.apcb_ksp),
	off(U_PCB_CONTEXT, struct user, u_pcb.pcb_context[0]),
	off(U_PCB_ONFAULT, struct user, u_pcb.pcb_onfault),
	off(U_PCB_ACCESSADDR, struct user, u_pcb.pcb_accessaddr),

	/* Offsets into struct fpstate, for save, restore */
	off(FPREG_FPR_REGS, struct fpreg, fpr_regs[0]),
	off(FPREG_FPR_CR, struct fpreg, fpr_cr),

	/* Important other addresses */
	def1(HWRPB_ADDR),		/* Restart parameter block */
	def1(VPTBASE),			/* Virtual Page Table base */

	/* Offsets into the HWRPB. */
	off(RPB_PRIMARY_CPU_ID, struct rpb, rpb_primary_cpu_id),

	/* Kernel entries */
	def1(ALPHA_KENTRY_ARITH),
	def1(ALPHA_KENTRY_MM),
	def1(ALPHA_KENTRY_IF),
	def1(ALPHA_KENTRY_UNA),

	/* errno values */
	def1(ENAMETOOLONG),
	def1(EFAULT),

	/* Syscalls called from sigreturn. */
	def1(SYS_sigreturn),
	def1(SYS_exit),

#ifdef COMPAT_NETBSD
	/* XXX - these should probably use the magic macro from machine/asm.h */
	def1(NETBSD_SYS___sigreturn14),
	def1(NETBSD_SYS_exit),
#endif

	/* CPU info */
	off(CPU_INFO_CURPROC, struct cpu_info, ci_curproc),
	off(CPU_INFO_FPCURPROC, struct cpu_info, ci_fpcurproc),
	off(CPU_INFO_CURPCB, struct cpu_info, ci_curpcb),
	off(CPU_INFO_IDLE_PCB_PADDR, struct cpu_info, ci_idle_pcb_paddr),
	off(CPU_INFO_WANT_RESCHED, struct cpu_info, ci_want_resched),
	off(CPU_INFO_ASTPENDING, struct cpu_info, ci_astpending),
	def(CPU_INFO_SIZEOF, sizeof(struct cpu_info)),
};
int nassyms = sizeof(assyms)/sizeof(assyms[0]);

int main __P((int argc, char **argv));

int
main(argc, argv)
	int argc;
	char **argv;
{
	char *name;
	long i, val;

	for (i = 0; i < nassyms; i++) {
		name = assyms[i].n;
		val  = assyms[i].v;

		printf("#define\t%s\t", name);
		/* Hack to make the output easier to verify. */
		if ((val < 0) || (val > 999))
			printf("0x%lx\n", val);
		else
			printf("%ld\n", val);
	}

	exit(0);
}
@


1.10
log
@

Move offsetof define into sys/param.h
@
text
@d1 1
a1 1
/* $OpenBSD: genassym.c,v 1.9 2001/01/15 11:58:54 art Exp $ */
@


1.9
log
@define the constants that COMPAT_NETBSD code needs in locore
@
text
@d1 1
a1 1
/* $OpenBSD: genassym.c,v 1.8 2000/11/08 19:16:58 ericj Exp $ */
a88 2

#define	offsetof(type, member) ((size_t)(&((type *)0)->member))
@


1.8
log
@add tags
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d80 4
d222 6
@


1.7
log
@Merge in big portions of the improvements NetBSD did to their alpha port.
Highlights: UVM, PMAP_NEW, bus_dma (only on some buses for now), new hardware
support, possiblity for ELF, etc, etc. Too much to mention.

This is still work in progress. video consoles might be broken, otherwise
we have basically the same functionality as before plus more.
@
text
@d1 1
@


1.6
log
@netbsd_sendsig() + supporting code
@
text
@d1 1
a1 2
/*	$OpenBSD: genassym.c,v 1.5 1996/10/30 22:38:10 niklas Exp $	*/
/*	$NetBSD: genassym.c,v 1.9 1996/08/20 23:00:24 cgd Exp $	*/
d4 2
d37 1
a37 1
 *	@@(#)genassym.c	8.3 (Berkeley) 1/4/94
d40 24
a71 1
#include <sys/syscall.h>
d77 1
d79 1
a79 3
#include <stddef.h>
#include <stdio.h>
#include <err.h>
d81 14
a94 2
#ifdef COMPAT_NETBSD
# include <compat/netbsd/netbsd_syscall.h>
d97 9
a105 20
void	def __P((char *, long));
int	main __P((int argc, char **argv));

#define	off(what, s, m)	def(what, (int)offsetof(s, m))

void
def(what, val)
	char *what;
	long val;
{

	if (printf("#define\t%s\t%ld\n", what, val) < 0)
		err(1, "printf");
}

int
main(argc, argv)
	int argc;
	char **argv;
{
d107 1
d109 3
a111 3
	def("NBPG", NBPG);
	def("PGSHIFT", PGSHIFT);
	def("VM_MAX_ADDRESS", VM_MAX_ADDRESS);
d114 36
a149 36
	def("FRAME_V0", FRAME_V0);
	def("FRAME_T0", FRAME_T0);
	def("FRAME_T1", FRAME_T1);
	def("FRAME_T2", FRAME_T2);
	def("FRAME_T3", FRAME_T3);
	def("FRAME_T4", FRAME_T4);
	def("FRAME_T5", FRAME_T5);
	def("FRAME_T6", FRAME_T6);
	def("FRAME_T7", FRAME_T7);
	def("FRAME_S0", FRAME_S0);
	def("FRAME_S1", FRAME_S1);
	def("FRAME_S2", FRAME_S2);
	def("FRAME_S3", FRAME_S3);
	def("FRAME_S4", FRAME_S4);
	def("FRAME_S5", FRAME_S5);
	def("FRAME_S6", FRAME_S6);
	def("FRAME_A3", FRAME_A3);
	def("FRAME_A4", FRAME_A4);
	def("FRAME_A5", FRAME_A5);
	def("FRAME_T8", FRAME_T8);
	def("FRAME_T9", FRAME_T9);
	def("FRAME_T10", FRAME_T10);
	def("FRAME_T11", FRAME_T11);
	def("FRAME_RA", FRAME_RA);
	def("FRAME_T12", FRAME_T12);
	def("FRAME_AT", FRAME_AT);
	def("FRAME_SP", FRAME_SP);

	def("FRAME_SW_SIZE", FRAME_SW_SIZE);

	def("FRAME_PS", FRAME_PS);
	def("FRAME_PC", FRAME_PC);
	def("FRAME_GP", FRAME_GP);
	def("FRAME_A0", FRAME_A0);
	def("FRAME_A1", FRAME_A1);
	def("FRAME_A2", FRAME_A2);
d151 1
a151 1
	def("FRAME_SIZE", FRAME_SIZE);
d154 5
a158 5
	def("ALPHA_PSL_USERMODE", ALPHA_PSL_USERMODE);
	def("ALPHA_PSL_IPL_MASK", ALPHA_PSL_IPL_MASK);
	def("ALPHA_PSL_IPL_0", ALPHA_PSL_IPL_0);
	def("ALPHA_PSL_IPL_SOFT", ALPHA_PSL_IPL_SOFT);
	def("ALPHA_PSL_IPL_HIGH", ALPHA_PSL_IPL_HIGH);
d161 4
a164 4
	def("ALPHA_PTE_VALID", ALPHA_PTE_VALID);
	def("ALPHA_PTE_ASM", ALPHA_PTE_ASM);
	def("ALPHA_PTE_KR", ALPHA_PTE_KR);
	def("ALPHA_PTE_KW", ALPHA_PTE_KW);
d167 16
a182 16
	off("P_FORW", struct proc, p_forw);
	off("P_BACK", struct proc, p_back);
	off("P_ADDR", struct proc, p_addr);
	off("P_VMSPACE", struct proc, p_vmspace);
	off("P_MD_FLAGS", struct proc, p_md.md_flags);
	off("P_MD_PCBPADDR", struct proc, p_md.md_pcbpaddr);
	off("PH_LINK", struct prochd, ph_link);
	off("PH_RLINK", struct prochd, ph_rlink);

#ifndef NEW_PMAP
	/* offsets needed by cpu_switch(), et al., to switch mappings. */
	off("VM_PMAP_STPTE", struct vmspace, vm_pmap.pm_stpte);
	def("USTP_OFFSET", kvtol1pte(VM_MIN_ADDRESS) * sizeof(pt_entry_t));
#else /* NEW_PMAP */
	off("VM_PMAP", struct vmspace, vm_pmap);
#endif /* NEW_PMAP */
d185 7
a191 7
	def("UPAGES", UPAGES);
	off("U_PCB", struct user, u_pcb);
	off("PCB_HWPCB", struct pcb, pcb_hw);
	off("PCB_HWPCB_KSP", struct pcb, pcb_hw.apcb_ksp);
	off("PCB_CONTEXT", struct pcb, pcb_context[0]);
	off("PCB_ONFAULT", struct pcb, pcb_onfault);
	off("PCB_ACCESSADDR", struct pcb, pcb_accessaddr);
d194 2
a195 2
	off("FPREG_FPR_REGS", struct fpreg, fpr_regs[0]);
	off("FPREG_FPR_CR", struct fpreg, fpr_cr);
d198 5
a202 2
	def("HWRPB_ADDR", HWRPB_ADDR);		/* Restart parameter block */
	def("VPTBASE", VPTBASE);		/* Virtual Page Table base */
d205 4
a208 4
	def("ALPHA_KENTRY_ARITH", ALPHA_KENTRY_ARITH);
	def("ALPHA_KENTRY_MM", ALPHA_KENTRY_MM);
	def("ALPHA_KENTRY_IF", ALPHA_KENTRY_IF);
	def("ALPHA_KENTRY_UNA", ALPHA_KENTRY_UNA);
d211 2
a212 2
	def("ENAMETOOLONG", ENAMETOOLONG);
	def("EFAULT", EFAULT);
d215 35
a249 6
	def("SYS_sigreturn", SYS_sigreturn);
	def("SYS_exit", SYS_exit);
#ifdef COMPAT_NETBSD
	def("NETBSD_SYS___sigreturn14", NETBSD_SYS___sigreturn14);
	def("NETBSD_SYS_exit", NETBSD_SYS_exit);
#endif
@


1.6.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 2
a2 2
/* $OpenBSD: genassym.c,v 1.10 2001/04/06 04:42:05 csapuntz Exp $ */
/* $NetBSD: genassym.c,v 1.27 2000/05/26 00:36:42 thorpej Exp $ */
a4 2
 * Copyright (c) 1994, 1995 Gordon W. Ross
 * Copyright (c) 1993 Adam Glass
d36 1
a36 1
 *	from: @@(#)genassym.c	8.3 (Berkeley) 1/4/94
a38 24
/*
 * This program is designed so that it can be both:
 * (1) Run on the native machine to generate assym.h
 * (2) Converted to assembly that genassym.awk will
 *     translate into the same assym.h as (1) does.
 * The second method is done as follows:
 *   m68k-xxx-gcc [options] -S .../genassym.c
 *   awk -f genassym.awk < genassym.s > assym.h
 *
 * Using actual C code here (instead of genassym.cf)
 * has the advantage that "make depend" automatically
 * tracks dependencies of this C code on the (many)
 * header files used here.  Also, the awk script used
 * to convert the assembly output to assym.h is much
 * smaller and simpler than sys/kern/genassym.sh.
 *
 * Both this method and the genassym.cf method have the
 * disadvantage that they depend on gcc-specific features.
 * This method depends on the format of assembly output for
 * data, and the genassym.cf method depends on features of
 * the gcc asm() statement (inline assembly).
 */

#include <sys/cdefs.h>			/* RCS ID & Copyright macro defns */
d47 1
d53 4
a56 1
#include <machine/vmparam.h>
d59 1
a59 1
#include <compat/netbsd/netbsd_syscall.h>
d62 4
a65 1
#include <vm/vm.h>
d67 9
a75 13
/* Note: Avoid /usr/include for cross compilation! */
extern void printf __P((const char *fmt, ...));
extern void exit __P((int));

#ifdef	__STDC__
#define def(name, value) 	{ #name, value }
#define	def1(name)	 	{ #name, name }
#define	off(name, type, member)	{ #name, offsetof(type, member) }
#else
#define def(name, value) 	{ "name", value }
#define	def1(name)	 	{ "name", name }
#define	off(name, type, member)	{ "name", offsetof(type, member) }
#endif
d77 5
a81 9
/*
 * Note: genassym.awk cares about the form of this structure,
 * as well as the names and placement of the "asdefs" array
 * and the "nassefs" variable below.  Clever, but fragile.
 */
struct nv {
	char n[28];
	long v;
};
a82 1
struct nv assyms[] = {
d84 3
a86 3
	def1(NBPG),
	def1(PGSHIFT),
	def1(VM_MAX_ADDRESS),
d89 36
a124 36
	def1(FRAME_V0),
	def1(FRAME_T0),
	def1(FRAME_T1),
	def1(FRAME_T2),
	def1(FRAME_T3),
	def1(FRAME_T4),
	def1(FRAME_T5),
	def1(FRAME_T6),
	def1(FRAME_T7),
	def1(FRAME_S0),
	def1(FRAME_S1),
	def1(FRAME_S2),
	def1(FRAME_S3),
	def1(FRAME_S4),
	def1(FRAME_S5),
	def1(FRAME_S6),
	def1(FRAME_A3),
	def1(FRAME_A4),
	def1(FRAME_A5),
	def1(FRAME_T8),
	def1(FRAME_T9),
	def1(FRAME_T10),
	def1(FRAME_T11),
	def1(FRAME_RA),
	def1(FRAME_T12),
	def1(FRAME_AT),
	def1(FRAME_SP),

	def1(FRAME_SW_SIZE),

	def1(FRAME_PS),
	def1(FRAME_PC),
	def1(FRAME_GP),
	def1(FRAME_A0),
	def1(FRAME_A1),
	def1(FRAME_A2),
d126 1
a126 1
	def1(FRAME_SIZE),
d129 5
a133 5
	def1(ALPHA_PSL_USERMODE),
	def1(ALPHA_PSL_IPL_MASK),
	def1(ALPHA_PSL_IPL_0),
	def1(ALPHA_PSL_IPL_SOFT),
	def1(ALPHA_PSL_IPL_HIGH),
d136 4
a139 4
	def1(ALPHA_PTE_VALID),
	def1(ALPHA_PTE_ASM),
	def1(ALPHA_PTE_KR),
	def1(ALPHA_PTE_KW),
d142 16
a157 16
	off(P_FORW, struct proc, p_forw),
	off(P_BACK, struct proc, p_back),
	off(P_ADDR, struct proc, p_addr),
	off(P_VMSPACE, struct proc, p_vmspace),
	off(P_STAT, struct proc, p_stat),
	off(P_MD_FLAGS, struct proc, p_md.md_flags),
	off(P_MD_PCBPADDR, struct proc, p_md.md_pcbpaddr),
	off(PH_LINK, struct prochd, ph_link),
	off(PH_RLINK, struct prochd, ph_rlink),

	/* XXXXX - Extremly bogus! */
	def(SONPROC, SRUN),
	/* XXX */

	/* offsets needed by cpu_switch() to switch mappings. */
	off(VM_MAP_PMAP, struct vmspace, vm_map.pmap), 
d160 7
a166 7
	def1(UPAGES),
	off(U_PCB, struct user, u_pcb),
	off(U_PCB_HWPCB, struct user, u_pcb.pcb_hw),
	off(U_PCB_HWPCB_KSP, struct user, u_pcb.pcb_hw.apcb_ksp),
	off(U_PCB_CONTEXT, struct user, u_pcb.pcb_context[0]),
	off(U_PCB_ONFAULT, struct user, u_pcb.pcb_onfault),
	off(U_PCB_ACCESSADDR, struct user, u_pcb.pcb_accessaddr),
d169 2
a170 2
	off(FPREG_FPR_REGS, struct fpreg, fpr_regs[0]),
	off(FPREG_FPR_CR, struct fpreg, fpr_cr),
d173 2
a174 5
	def1(HWRPB_ADDR),		/* Restart parameter block */
	def1(VPTBASE),			/* Virtual Page Table base */

	/* Offsets into the HWRPB. */
	off(RPB_PRIMARY_CPU_ID, struct rpb, rpb_primary_cpu_id),
d177 4
a180 4
	def1(ALPHA_KENTRY_ARITH),
	def1(ALPHA_KENTRY_MM),
	def1(ALPHA_KENTRY_IF),
	def1(ALPHA_KENTRY_UNA),
d183 2
a184 2
	def1(ENAMETOOLONG),
	def1(EFAULT),
d187 2
a188 3
	def1(SYS_sigreturn),
	def1(SYS_exit),

d190 2
a191 3
	/* XXX - these should probably use the magic macro from machine/asm.h */
	def1(NETBSD_SYS___sigreturn14),
	def1(NETBSD_SYS_exit),
a192 33

	/* CPU info */
	off(CPU_INFO_CURPROC, struct cpu_info, ci_curproc),
	off(CPU_INFO_FPCURPROC, struct cpu_info, ci_fpcurproc),
	off(CPU_INFO_CURPCB, struct cpu_info, ci_curpcb),
	off(CPU_INFO_IDLE_PCB_PADDR, struct cpu_info, ci_idle_pcb_paddr),
	off(CPU_INFO_WANT_RESCHED, struct cpu_info, ci_want_resched),
	off(CPU_INFO_ASTPENDING, struct cpu_info, ci_astpending),
	def(CPU_INFO_SIZEOF, sizeof(struct cpu_info)),
};
int nassyms = sizeof(assyms)/sizeof(assyms[0]);

int main __P((int argc, char **argv));

int
main(argc, argv)
	int argc;
	char **argv;
{
	char *name;
	long i, val;

	for (i = 0; i < nassyms; i++) {
		name = assyms[i].n;
		val  = assyms[i].v;

		printf("#define\t%s\t", name);
		/* Hack to make the output easier to verify. */
		if ((val < 0) || (val > 999))
			printf("0x%lx\n", val);
		else
			printf("%ld\n", val);
	}
@


1.6.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/* $OpenBSD: genassym.c,v 1.6.4.1 2001/04/18 16:00:21 niklas Exp $ */
@


1.5
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
/*	$OpenBSD: genassym.c,v 1.9 1996/08/20 23:00:24 cgd Exp $	*/
d58 4
d189 4
@


1.4
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: genassym.c,v 1.4 1996/05/17 18:29:41 cgd Exp $	*/
/*	$NetBSD: genassym.c,v 1.4 1996/05/17 18:29:41 cgd Exp $	*/
a52 1
#include <machine/trap.h>
a84 2
	def("FRAMESIZE", sizeof(struct trapframe));
	def("FRAME_NSAVEREGS", FRAME_NSAVEREGS);
d112 11
a122 5
	off("TF_PS", struct trapframe, tf_ps);
	off("TF_PC", struct trapframe, tf_ps);
	off("TF_A0", struct trapframe, tf_a0);
	off("TF_A1", struct trapframe, tf_a1);
	off("TF_A2", struct trapframe, tf_a2);
d125 5
a129 5
	def("PSL_U", PSL_U);
	def("PSL_IPL", PSL_IPL);
	def("PSL_IPL_0", PSL_IPL_0);
	def("PSL_IPL_SOFT", PSL_IPL_SOFT);
	def("PSL_IPL_HIGH", PSL_IPL_HIGH);
d132 4
a135 5
	def("PG_V", PG_V);
	def("PG_ASM", PG_ASM);
	def("PG_KRE", PG_KRE);
	def("PG_KWE", PG_KWE);
	def("PG_SHIFT", PG_SHIFT);
d147 1
d151 3
d158 5
a162 3
	off("U_PCB_KSP", struct user, u_pcb.pcb_ksp);
	off("U_PCB_CONTEXT", struct user, u_pcb.pcb_context[0]);
	off("U_PCB_ONFAULT", struct user, u_pcb.pcb_onfault);
d172 5
a176 6
	/* Trap types and qualifiers */
	def("T_ASTFLT", T_ASTFLT);
	def("T_UNAFLT", T_UNAFLT);
	def("T_ARITHFLT", T_ARITHFLT);
	def("T_IFLT", T_IFLT);			/* qualifier */
	def("T_MMFLT", T_MMFLT);		/* qualifier */
@


1.3
log
@sync to 0616, retaining local diffs
@
text
@d1 1
@


1.2
log
@update to netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: genassym.c,v 1.3 1995/11/23 02:34:06 cgd Exp $	*/
d59 1
d73 4
a76 1
main()
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: genassym.c,v 1.2 1995/03/24 15:07:10 cgd Exp $	*/
d54 1
a54 2
#ifdef notdef /* XXX */
#include <errno.h>
d56 3
a58 6
#include <stddef.h>
#include <string.h>
#include <unistd.h>
#else /* XXX */
#define	offsetof(type, member)	((size_t)(&((type *)0)->member))
#endif /* XXX */
d60 1
a60 1
extern int errno;
d68 2
a69 7
	if (printf("#define\t%s\t%ld\n", what, val) < 0) {
#ifdef notdef /* XXX */
		(void)fprintf(stderr, "genassym: printf: %s\n",
		    strerror(errno));
#endif /* XXX */
		exit(1);
	}
a70 2

#define	off(what, s, m)	def(what, (int)offsetof(s, m))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
