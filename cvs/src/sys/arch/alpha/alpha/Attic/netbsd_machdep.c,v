head	1.12;
access;
symbols
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.9
	UBC:1.6.0.2
	UBC_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.12
date	2007.05.28.23.10.10;	author beck;	state dead;
branches;
next	1.11;

1.11
date	2005.08.06.12.10.25;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.10.00.03.21;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.20.23.08.30;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.20.19.24.55;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.26.26;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.06.19.53.13;	author miod;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2001.09.05.23.39.13;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.15.12.00.09;	author art;	state Exp;
branches;
next	1.3;

1.3
date	99.09.26.11.07.32;	author kstailey;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	99.09.16.13.20.06;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	99.09.14.01.05.24;	author kstailey;	state Exp;
branches;
next	;

1.3.4.1
date	2001.04.18.16.00.25;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.10.31.02.52.44;	author nate;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2001.11.13.21.00.48;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2002.03.28.10.06.13;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2003.03.27.23.18.06;	author niklas;	state Exp;
branches;
next	1.3.4.6;

1.3.4.6
date	2004.02.19.09.59.33;	author niklas;	state Exp;
branches;
next	;

1.6.2.1
date	2002.06.11.03.33.39;	author art;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2002.10.29.00.28.00;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Maintaining a broken compatibility layer for a broken OS is not a productive
activity for anyone. Bye bye COMPAT_NETBSD. ok tedu@@, deraadt@@, and many others
in the hackathon room.
@
text
@/*	$OpenBSD: netbsd_machdep.c,v 1.11 2005/08/06 12:10:25 miod Exp $	*/

/*
 * Copyright (c) 1994, 1995, 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signalvar.h>
#include <sys/kernel.h>
#include <sys/exec.h>
#include <sys/proc.h>
#include <sys/buf.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>
#include <sys/user.h>
#include <machine/cpu.h>

#include <uvm/uvm_extern.h>

#include <compat/netbsd/netbsd_types.h>
#include <compat/netbsd/netbsd_signal.h>
#include <compat/netbsd/netbsd_syscallargs.h>

#include <machine/netbsd_machdep.h>
#include <machine/signal.h>
#include <machine/reg.h>

#ifdef DEBUG
extern int sigdebug;
extern int sigpid;
#define SDB_FOLLOW      0x01
#define SDB_KSTACK      0x02
#endif

static void netbsd_to_openbsd_sigcontext(struct netbsd_sigcontext *,
	struct sigcontext *);

static void openbsd_to_netbsd_sigcontext(struct sigcontext *,
	struct netbsd_sigcontext *);

static void
netbsd_to_openbsd_sigcontext(nbsc, obsc)
	struct netbsd_sigcontext *nbsc;
	struct sigcontext *obsc;
{
	bzero(obsc, sizeof(obsc));
	obsc->sc_onstack = nbsc->sc_onstack;
	bcopy(&nbsc->sc_mask.__bits[0], &obsc->sc_mask, sizeof(sigset_t));
	obsc->sc_pc = nbsc->sc_pc;
	obsc->sc_ps = nbsc->sc_ps;
	bcopy(nbsc->sc_regs, obsc->sc_regs, sizeof(obsc->sc_regs));
	obsc->sc_ownedfp = nbsc->sc_ownedfp;
	bcopy(nbsc->sc_fpregs, obsc->sc_fpregs, sizeof(obsc->sc_fpregs));
	obsc->sc_fpcr = nbsc->sc_fpcr;
	obsc->sc_fp_control = nbsc->sc_fp_control;
}

static void
openbsd_to_netbsd_sigcontext(obsc, nbsc)
	struct sigcontext *obsc;
	struct netbsd_sigcontext *nbsc;
{
	bzero(nbsc, sizeof(nbsc));
	nbsc->sc_onstack = obsc->sc_onstack;
	nbsc->__sc_mask13 = obsc->sc_mask;
	bcopy(&obsc->sc_mask, &nbsc->sc_mask.__bits[0], sizeof(sigset_t));
	nbsc->sc_pc = obsc->sc_pc;
	nbsc->sc_ps = obsc->sc_ps;
	bcopy(obsc->sc_regs, nbsc->sc_regs, sizeof(obsc->sc_regs));
	nbsc->sc_ownedfp = obsc->sc_ownedfp;
	bcopy(obsc->sc_fpregs, nbsc->sc_fpregs, sizeof(obsc->sc_fpregs));
	nbsc->sc_fpcr = obsc->sc_fpcr;
	nbsc->sc_fp_control = obsc->sc_fp_control;
}

/*
 * Send an interrupt to process.
 */
void
netbsd_sendsig(catcher, sig, mask, code, type, val)
	sig_t catcher;
	int sig, mask;
	u_long code;
	int type;
	union sigval val;
{
	struct proc *p = curproc;
	struct sigcontext *scp, ksc;
	struct trapframe *frame;
	struct sigacts *psp = p->p_sigacts;
	int oonstack, fsize, rndfsize;
	struct netbsd_sigcontext nbsc;

	frame = p->p_md.md_tf;
	oonstack = psp->ps_sigstk.ss_flags & SS_ONSTACK;
	fsize = sizeof(nbsc);
	rndfsize = ((fsize + 15) / 16) * 16;
	/*
	 * Allocate and validate space for the signal handler
	 * context. Note that if the stack is in P0 space, the
	 * call to grow() is a nop, and the useracc() check
	 * will fail if the process has not already allocated
	 * the space with a `brk'.
	 */
	if ((psp->ps_flags & SAS_ALTSTACK) && !oonstack &&
	    (psp->ps_sigonstack & sigmask(sig))) {
		scp = (struct sigcontext *)(psp->ps_sigstk.ss_sp +
		    psp->ps_sigstk.ss_size - rndfsize);
		psp->ps_sigstk.ss_flags |= SS_ONSTACK;
	} else
		scp = (struct sigcontext *)(alpha_pal_rdusp() - rndfsize);
	if ((u_long)scp <= USRSTACK - ctob(p->p_vmspace->vm_ssize))
		(void)uvm_grow(p, (u_long)scp);
#ifdef DEBUG
	if ((sigdebug & SDB_KSTACK) && p->p_pid == sigpid)
		printf("netbsd_sendsig(%d): sig %d ssp %p usp %p scp %p\n",
		    p->p_pid, sig, &oonstack, alpha_pal_rdusp(), scp);
#endif

	/*
	 * Build the signal context to be used by sigreturn.
	 */
	ksc.sc_onstack = oonstack;
	ksc.sc_mask = mask;
	ksc.sc_pc = frame->tf_regs[FRAME_PC];
	ksc.sc_ps = frame->tf_regs[FRAME_PS];

	/* copy the registers. */
	frametoreg(frame, (struct reg *)ksc.sc_regs);
	ksc.sc_regs[R_ZERO] = 0xACEDBADE;		/* magic number */
	ksc.sc_regs[R_SP] = alpha_pal_rdusp();

	/* save the floating-point state, if necessary, then copy it. */
	if (p == fpcurproc) {
		alpha_pal_wrfen(1);
		savefpstate(&p->p_addr->u_pcb.pcb_fp);
		alpha_pal_wrfen(0);
		fpcurproc = NULL;
	}
	ksc.sc_ownedfp = p->p_md.md_flags & MDP_FPUSED;
	bcopy(&p->p_addr->u_pcb.pcb_fp, (struct fpreg *)ksc.sc_fpregs,
	    sizeof(struct fpreg));
	ksc.sc_fp_control = 0;					/* XXX ? */
	bzero(ksc.sc_reserved, sizeof ksc.sc_reserved);		/* XXX */
	bzero(ksc.sc_xxx, sizeof ksc.sc_xxx);			/* XXX */

	/*
	 * copy the frame out to userland.
	 */
	openbsd_to_netbsd_sigcontext(&ksc, &nbsc);
	if (copyout((caddr_t)&nbsc, (caddr_t)scp, sizeof(nbsc)) != 0) {
#ifdef DEBUG
		if ((sigdebug & SDB_KSTACK) && p->p_pid == sigpid)
			printf("netbsd_sendsig(%d): copyout failed on sig %d\n",
			    p->p_pid, sig);
#endif
		/*
		 * Process has trashed its stack; give it an illegal
		 * instruction to halt it in its tracks.
		 */
		sigexit(p, SIGILL);
		/* NOTREACHED */
	}
#ifdef DEBUG
	if (sigdebug & SDB_FOLLOW)
		printf("netbsd_sendsig(%d): sig %d scp %p code %lx\n",
		    p->p_pid, sig, scp, code);
#endif

	/*
	 * Set up the registers to return to netbsd_sigcode.
	 */
	frame->tf_regs[FRAME_PC] = p->p_sigcode;
	frame->tf_regs[FRAME_A0] = sig;
	frame->tf_regs[FRAME_A1] = code;
	frame->tf_regs[FRAME_A2] = (u_int64_t)scp;
	frame->tf_regs[FRAME_T12] = (u_int64_t)catcher;		/* t12 is pv */
	alpha_pal_wrusp((unsigned long)scp);

#ifdef DEBUG
	if (sigdebug & SDB_FOLLOW)
		printf("netbsd_sendsig(%d): pc %lx, catcher %lx\n", p->p_pid,
		    frame->tf_regs[FRAME_PC], frame->tf_regs[FRAME_T12]);
	if ((sigdebug & SDB_KSTACK) && p->p_pid == sigpid)
		printf("netbsd_sendsig(%d): sig %d returns\n", p->p_pid, sig);
#endif
}

/* ARGSUSED */
int
netbsd_sys___sigreturn14(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct netbsd_sys___sigreturn14_args /* {
		syscallarg(struct netbsd_sigcontext *) sigcntxp;
	} */ *uap = v;
	struct sigcontext ksc;
	struct netbsd_sigcontext *nbscp, nbsc;

	nbscp = SCARG(uap, sigcntxp);
#ifdef DEBUG
	if (sigdebug & SDB_FOLLOW)
	    printf("sigreturn: pid %d, nbscp %p\n", p->p_pid, nbscp);
#endif
	if (ALIGN(nbscp) != (u_int64_t)nbscp)
		return (EINVAL);

	/*
	 * Test and fetch the context structure.
	 * We grab it all at once for speed.
	 */
	if (copyin((caddr_t)nbscp, (caddr_t)&nbsc, sizeof (nbsc)))
		return (EFAULT);

	netbsd_to_openbsd_sigcontext(&nbsc, &ksc);

	if (ksc.sc_regs[R_ZERO] != 0xACEDBADE)		/* magic number */
		return (EINVAL);
	/*
	 * Restore the user-supplied information
	 */
	if (ksc.sc_onstack)
		p->p_sigacts->ps_sigstk.ss_flags |= SS_ONSTACK;
	else
		p->p_sigacts->ps_sigstk.ss_flags &= ~SS_ONSTACK;
	p->p_sigmask = ksc.sc_mask &~ sigcantmask;

	p->p_md.md_tf->tf_regs[FRAME_PC] = ksc.sc_pc;
	p->p_md.md_tf->tf_regs[FRAME_PS] =
	    (ksc.sc_ps | ALPHA_PSL_USERSET) & ~ALPHA_PSL_USERCLR;

	regtoframe((struct reg *)ksc.sc_regs, p->p_md.md_tf);
	alpha_pal_wrusp(ksc.sc_regs[R_SP]);

	/* XXX ksc.sc_ownedfp ? */
	if (p == fpcurproc)
		fpcurproc = NULL;
	bcopy((struct fpreg *)ksc.sc_fpregs, &p->p_addr->u_pcb.pcb_fp,
	    sizeof(struct fpreg));
	/* XXX ksc.sc_fp_control ? */

#ifdef DEBUG
	if (sigdebug & SDB_FOLLOW)
		printf("sigreturn(%d): returns\n", p->p_pid);
#endif
	return (EJUSTRETURN);
}
@


1.11
log
@If a process has trashed its stack, use sigexit() instead of psignal() to
terminate it with prejudice, as done in native sendsig().
Plus you get a memory leak in COMPAT_HPUX on m68k fixed for free.

review art@@ test martin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.10 2003/08/10 00:03:21 miod Exp $	*/
@


1.10
log
@Do not trust and use uvm_useracc, but rather always check copy{in,out} for
failure and act appropriately.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.9 2002/07/20 23:08:30 art Exp $	*/
d185 2
a186 7
		SIGACTION(p, SIGILL) = SIG_DFL;
		sig = sigmask(SIGILL);
		p->p_sigignore &= ~sig;
		p->p_sigcatch &= ~sig;
		p->p_sigmask &= ~sig;
		psignal(p, SIGILL);
		return;
@


1.9
log
@Remove unused variables.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.8 2002/07/20 19:24:55 art Exp $	*/
a142 18
	if (uvm_useracc((caddr_t)scp, fsize, B_WRITE) == 0) {
#ifdef DEBUG
		if ((sigdebug & SDB_KSTACK) && p->p_pid == sigpid)
			printf("netbsd_sendsig(%d): useracc failed on sig %d\n",
			    p->p_pid, sig);
#endif
		/*
		 * Process has trashed its stack; give it an illegal
		 * instruction to halt it in its tracks.
		 */
		SIGACTION(p, SIGILL) = SIG_DFL;
		sig = sigmask(SIGILL);
		p->p_sigignore &= ~sig;
		p->p_sigcatch &= ~sig;
		p->p_sigmask &= ~sig;
		psignal(p, SIGILL);
		return;
	}
d175 18
a192 1
	(void) copyout((caddr_t)&nbsc, (caddr_t)scp, sizeof(nbsc));
d243 1
a243 2
	if (uvm_useracc((caddr_t)nbscp, sizeof (*nbscp), B_WRITE) == 0 ||
	    copyin((caddr_t)nbscp, (caddr_t)&nbsc, sizeof (nbsc)))
@


1.8
log
@Instead of copying out the signal trampoline on top of the stack, create
an uvm aobj, copy out the signal trampoline into it and share that page
among all processes for the same emulation.

This also requires us to actually be able to tell signal code where the
trampoline is located, so introduce a new field in struct proc - p_sigcode
that is a pointer to sigcode. This allows us to remove all the ugly
calculations of the signal trampoline address done in every sendsig
function in the tree (that's why so many files are changed).

Tested by various people. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.7 2002/03/14 01:26:26 millert Exp $	*/
a115 1
	extern char netbsd_sigcode[], netbsd_esigcode[];
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.6 2001/11/06 19:53:13 miod Exp $	*/
d204 1
a204 2
	frame->tf_regs[FRAME_PC] =
	    (u_int64_t)PS_STRINGS - (netbsd_esigcode - netbsd_sigcode);
@


1.6
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.5 2001/09/05 23:39:13 art Exp $	*/
d59 2
a60 2
static void netbsd_to_openbsd_sigcontext __P ((struct netbsd_sigcontext *,
	struct sigcontext *));
d62 2
a63 2
static void openbsd_to_netbsd_sigcontext __P ((struct sigcontext *,
	struct netbsd_sigcontext *));
@


1.6.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.6 2001/11/06 19:53:13 miod Exp $	*/
d59 2
a60 2
static void netbsd_to_openbsd_sigcontext(struct netbsd_sigcontext *,
	struct sigcontext *);
d62 2
a63 2
static void openbsd_to_netbsd_sigcontext(struct sigcontext *,
	struct netbsd_sigcontext *);
@


1.6.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.6.2.1 2002/06/11 03:33:39 art Exp $	*/
d116 1
d204 2
a205 1
	frame->tf_regs[FRAME_PC] = p->p_sigcode;
@


1.5
log
@Will need netbsd_types.h very soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.4 2001/01/15 12:00:09 art Exp $	*/
d42 1
a42 1
#include <vm/vm.h>
@


1.4
log
@Make this work with new alpha code.
From d@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.3 1999/09/26 11:07:32 kstailey Exp $	*/
d44 1
@


1.3
log
@netbsd_sendsig() + supporting code
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.2 1999/09/16 13:20:06 kstailey Exp $	*/
d40 1
a115 1
	extern struct proc *fpcurproc;
d137 1
a137 1
		(void)grow(p, (u_long)scp);
d143 1
a143 1
	if (useracc((caddr_t)scp, fsize, B_WRITE) == 0) {
a230 1
	extern struct proc *fpcurproc;
d245 1
a245 1
	if (useracc((caddr_t)nbscp, sizeof (*nbscp), B_WRITE) == 0 ||
@


1.3.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.4 2001/01/15 12:00:09 art Exp $	*/
a39 1
#include <machine/cpu.h>
d115 1
d137 1
a137 1
		(void)uvm_grow(p, (u_long)scp);
d143 1
a143 1
	if (uvm_useracc((caddr_t)scp, fsize, B_WRITE) == 0) {
d231 1
d246 1
a246 1
	if (uvm_useracc((caddr_t)nbscp, sizeof (*nbscp), B_WRITE) == 0 ||
@


1.3.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.3.4.1 2001/04/18 16:00:25 niklas Exp $	*/
a43 1
#include <compat/netbsd/netbsd_types.h>
@


1.3.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
a42 1
#include <uvm/uvm_extern.h>
@


1.3.4.4
log
@Merge in -current from about a week ago
@
text
@d59 2
a60 2
static void netbsd_to_openbsd_sigcontext(struct netbsd_sigcontext *,
	struct sigcontext *);
d62 2
a63 2
static void openbsd_to_netbsd_sigcontext(struct sigcontext *,
	struct netbsd_sigcontext *);
@


1.3.4.5
log
@Sync the SMP branch with 3.3
@
text
@d116 1
d204 2
a205 1
	frame->tf_regs[FRAME_PC] = p->p_sigcode;
@


1.3.4.6
log
@Merge of -current from two weeks ago into the SMP branch
@
text
@d143 18
d193 1
a193 18
	if (copyout((caddr_t)&nbsc, (caddr_t)scp, sizeof(nbsc)) != 0) {
#ifdef DEBUG
		if ((sigdebug & SDB_KSTACK) && p->p_pid == sigpid)
			printf("netbsd_sendsig(%d): copyout failed on sig %d\n",
			    p->p_pid, sig);
#endif
		/*
		 * Process has trashed its stack; give it an illegal
		 * instruction to halt it in its tracks.
		 */
		SIGACTION(p, SIGILL) = SIG_DFL;
		sig = sigmask(SIGILL);
		p->p_sigignore &= ~sig;
		p->p_sigcatch &= ~sig;
		p->p_sigmask &= ~sig;
		psignal(p, SIGILL);
		return;
	}
d244 2
a245 1
	if (copyin((caddr_t)nbscp, (caddr_t)&nbsc, sizeof (nbsc)))
@


1.2
log
@signal fixes (csh runs)
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_machdep.c,v 1.1 1999/09/14 01:05:24 kstailey Exp $	*/
d34 1
d60 3
d80 140
d230 1
a230 1
	struct sigcontext *scp, ksc;
d237 1
a237 1
	    printf("sigreturn: pid %d, scp %p\n", p->p_pid, scp);
a238 1

d248 1
a248 1
		return (EINVAL);
@


1.1
log
@signals
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d64 1
a64 1
	memset(obsc, 0, sizeof(obsc));
d66 1
a66 1
	memcpy(&obsc->sc_mask, &nbsc->sc_mask.__bits[0], sizeof(sigset_t));
d69 1
a69 1
	memcpy(obsc->sc_regs, nbsc->sc_regs, sizeof(obsc->sc_regs));
d71 1
a71 1
	memcpy(obsc->sc_fpregs, nbsc->sc_fpregs, sizeof(obsc->sc_fpregs));
a85 1
	struct netbsd_sigcontext *nbscp;
d88 1
a90 1
	netbsd_to_openbsd_sigcontext(nbscp, scp);
d96 1
a96 1
	if (ALIGN(scp) != (u_int64_t)scp)
d103 2
a104 2
	if (useracc((caddr_t)scp, sizeof (*scp), B_WRITE) == 0 ||
	    copyin((caddr_t)scp, (caddr_t)&ksc, sizeof ksc))
d106 2
@

