head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.2
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.13.0.8
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.12.0.10
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.4
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.14
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.12
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.8
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.7.0.8
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.6
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.20
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.18
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.16
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.14
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.12
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.10
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.6
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.4
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.14
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@# @;


1.14
date	2016.07.30.03.25.48;	author guenther;	state Exp;
branches;
next	1.13;
commitid	HVbAtwruDlJazNH2;

1.13
date	2014.12.13.14.45.34;	author miod;	state Exp;
branches;
next	1.12;
commitid	OBCkOjml8NzcVRtV;

1.12
date	2012.09.01.15.10.06;	author pascal;	state Exp;
branches;
next	1.11;

1.11
date	2012.08.21.14.46.18;	author pascal;	state Exp;
branches;
next	1.10;

1.10
date	2011.06.05.21.49.36;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.25.19.12.59;	author martin;	state Exp;
branches;
next	1.8;

1.8
date	2007.11.25.18.25.30;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.15.12.40.50;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.10.16.58.42;	author todd;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.16.15.36.36;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2000.12.14.13.48.26;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.05.05.06.01.59;	author millert;	state Exp;
branches
	1.3.14.1;
next	1.2;

1.2
date	96.11.27.19.54.54;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.10.30.22.40.51;	author niklas;	state Exp;
branches;
next	;

1.3.14.1
date	2001.04.18.16.01.44;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Prep for relro: make sure it's off for any non-PIE stand/ program

ok millert@@ kettenis@@
@
text
@#	$OpenBSD: Makefile,v 1.13 2014/12/13 14:45:34 miod Exp $
#	$NetBSD: Makefile,v 1.11 1997/04/17 07:27:50 thorpej Exp $

S=	${.CURDIR}/../../../..

.PATH: ${.CURDIR}/.. ${.CURDIR}/../boot

PROG = netboot

SRCS = start.S boot.c prom.c prom_disp.S OSFpal.c prom_swpal.S
SRCS+= rpcc.S
SRCS+= dev_net.c conf.c devopen.c
SRCS+= if_prom.c getsecs.c
SRCS+= loadfile_subr.c
NOMAN=
INSTALL_STRIP=
BINMODE= 444

BOOT_RELOC = ${PRIMARY_LOAD_ADDRESS}

CLEANFILES+= vers.c vers.o ${PROG}.sym ${PROG}.nosym

.PATH:  ${S}/lib/libkern/arch/alpha ${S}/lib/libkern
SRCS+=  bzero.c __divqu.S strlen.c __remqu.S

.PATH:	${S}/lib/libkern/arch/alpha ${S}/lib/libsa
SRCS+=	loadfile.c

DEFNS= -DPRIMARY_BOOTBLOCK -DSUN_BOOTPARAMS

AFLAGS += -DASSEMBLER ${DEFNS} -fno-pie
CPPFLAGS += -I${.CURDIR}/../.. -I${S} ${DEFNS}
CFLAGS = -Werror -mno-fp-regs -fno-pie

${PROG}.nosym: ${PROG}.sym
	cp ${PROG}.sym ${PROG}.nosym
	strip ${PROG}.nosym

${PROG} ${PROG}.mop: ${PROG}.nosym
	objcopy --output-target=binary ${PROG}.nosym ${PROG}
	mopa.out ${PROG}.nosym ${PROG}.mop

realinstall:
	${INSTALL} ${INSTALL_COPY} -S ${INSTALL_STRIP} \
	    -o ${BINOWN} -g ${BINGRP} \
	    -m ${BINMODE} ${PROG} ${DESTDIR}${BINDIR}/${PROG}
	${INSTALL} ${INSTALL_COPY} -S ${INSTALL_STRIP} \
	    -o ${BINOWN} -g ${BINGRP} \
	    -m ${BINMODE} ${PROG}.mop ${DESTDIR}${BINDIR}/${PROG}.mop

# no lint here (yet?)
lint:

.include <bsd.prog.mk>

### find out what to use for libz
Z_AS=		library
ZDST=		${.CURDIR}/../libz/${__objdir}
.include "${.CURDIR}/../libz/Makefile.inc"
LIBZ=		${ZLIB}

### find out what to use for libsa
SA_AS=		library
SADST=		${.CURDIR}/../libsa/${__objdir}
SAREL=
SA_ZLIB=	yes
.include "${.CURDIR}/../libsa/Makefile.inc"
LIBSA=		${SALIB}

${PROG}.sym: ${OBJS} ${LIBSA} ${LIBZ}
	sh ${.CURDIR}/newvers.sh ${.CURDIR}/version
	${COMPILE.c} vers.c
	${LD} -nopie -znorelro -Ttext ${BOOT_RELOC} -N -e start \
	    -o ${PROG}.sym ${OBJS} vers.o ${LIBSA} ${LIBZ} ${LIBSA}
	size ${PROG}.sym
@


1.13
log
@Create a MOP version of the network boot loader; verified to boot on DEC 3000.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.12 2012/09/01 15:10:06 pascal Exp $
d73 2
a74 2
	${LD} -nopie -Ttext ${BOOT_RELOC} -N -e start -o ${PROG}.sym \
	    ${OBJS} vers.o ${LIBSA} ${LIBZ} ${LIBSA}
@


1.12
log
@Fix alpha bootblocks: Compile with -fno-pie, link with -nopie.

tested by naddy@@; ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2012/08/21 14:46:18 pascal Exp $
d39 1
a39 1
${PROG}: ${PROG}.nosym
d41 9
@


1.11
log
@Add NOPIE= bits for sys/arch/*/stand to ensure that bootblocks will always be
built with -fno-pie.  This gets the hairiest part of PIE out of the way ...

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2011/06/05 21:49:36 miod Exp $
a15 1
NOPIE=
d31 1
a31 1
AFLAGS += -DASSEMBLER ${DEFNS}
d33 1
a33 1
CFLAGS = -Werror -mno-fp-regs
d64 1
a64 1
	${LD} -Ttext ${BOOT_RELOC} -N -e start -o ${PROG}.sym \
@


1.10
log
@Update alpha bootblocks to use MI loadfile code instead of rolling our own;
also print a meaningful message if the kernel load address conflicts with the
SRM memory areas, so that we can know which kernel load address to use.

Requires `make includes' before attempting to build bootblocks.

Tweaks mk@@, `nice' deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2007/11/25 19:12:59 martin Exp $
d16 1
@


1.9
log
@we want strlen.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2007/11/25 18:25:30 deraadt Exp $
d13 2
a14 1
SRCS+= if_prom.c loadfile.c getsecs.c
a19 1
HEADERSIZE_PROG = headersize
d21 1
a21 1
CLEANFILES+= vers.c vers.o ${PROG}.sym ${PROG}.nosym ${HEADERSIZE_PROG}
d26 4
a29 1
DEFNS= -DPRIMARY_BOOTBLOCK -DALPHA_BOOT_ELF -DSUN_BOOTPARAMS
d39 1
a39 1
${PROG}: ${PROG}.nosym #${HEADERSIZE_PROG}
a40 2
#	dd if=${PROG}.nosym of=${PROG} \
#	    bs=`./${HEADERSIZE_PROG} ${BOOT_RELOC} ${PROG}.nosym` skip=1
@


1.8
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2006/02/15 12:40:50 mickey Exp $
d24 1
a24 1
SRCS+=  bzero.c __divqu.S strlen.S __remqu.S
@


1.7
log
@enable -DSUN_BOOTPARAMS; henning@@ martin@@ miod@@ ok
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2005/08/10 16:58:42 todd Exp $
d23 3
a45 6
### find out what to use for libkern
KERN_AS=	library
KERNDST=	${.CURDIR}/../libkern/${__objdir}
.include "${.CURDIR}/../libkern/Makefile.inc"
LIBKERN=	${KERNLIB}

d60 1
a60 1
${PROG}.sym: ${OBJS} ${LIBSA} ${LIBZ} ${LIBKERN}
d64 1
a64 1
	    ${OBJS} vers.o ${LIBSA} ${LIBZ} ${LIBSA} ${LIBKERN}
@


1.6
log
@suggested by art, go for it deraadt, ok miod@@
remove ECOFF support
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2001/01/16 15:36:36 art Exp $
d23 1
a23 1
DEFNS= -DPRIMARY_BOOTBLOCK -DALPHA_BOOT_ELF
@


1.5
log
@Use objcopy to build the bootblocks instead of a hairy dd.
Bootblock built with elf utils work now.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2000/12/14 13:48:26 art Exp $
d23 1
a23 1
DEFNS= -DPRIMARY_BOOTBLOCK -DALPHA_BOOT_ECOFF -DALPHA_BOOT_ELF
@


1.4
log
@Enable loading of ELF kernels.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 1997/05/05 06:01:59 millert Exp $
d33 4
a36 3
${PROG}: ${PROG}.nosym ${HEADERSIZE_PROG}
	dd if=${PROG}.nosym of=${PROG} \
	    bs=`./${HEADERSIZE_PROG} ${BOOT_RELOC} ${PROG}.nosym` skip=1
@


1.3
log
@Updates from NetBSD (cgd):
 - seriously clean up makefiles.  use libsa/libkern/libz as appropriate,
   and don't build the various sources into objs locally by specifying
   them directly in the Makefiles.
 - move the secondary bootstrap down (to 0x20004000), and add a HEAP_LIMIT
   so that we don't exhaust our bootstrap address space (when using the new,
   not yet checked in, memory allocator).
 - clean up installboot, deal with secondary bootstrap programs not on
   'a' partition or 'a' partition not starting at 0.
 - add padding to structures in bbinfo.h for future expansion.  Add a
   netbbinfo structure to allow netboot information to be hard-coded in
   network boot blocks, so that they can be made to work even on systems
   with firmware which doesn't support the new "ethernet address in boot
   device" convention.
 - move the sync() calls to the correct place in installboot.c
 - remove a kludge in disk.c which was breaking multiple opens/closes
   of the disk
 - allow netboot ethernet address to be hard-coded into binary so that
   machines with old firmware which doesn't pass it in the boot device
   can work.  Assume that if the ethernet address isn't passed in, it
   uses the old (dain-bramaged) 'read' interface works on my 3000/300LX.
 - Add setnetbootinfo, a program to hard code an ethernet address into
   a network boot.
 - move an 'int debug;' into boot.c (it was the only diff between boot.c and
   netboot.c), and nuke netboot.c (using boot.c instead for net boot blocks).
 - add cd9660 file system ops to the file system ops table in filesystem.c
 - if a file name is given (i.e. BOOTED_FILE) is set, boot only that file,
   but if not then try to boot "bsd", "bsd.bak", "bsd.old", and
   "obsd" (in that order) until one is found or until the list of names
   is exhausted.
 - add support for reading gzipped kernels.
 - use strerror() to print errors, rather than just printing error numbers
 - if no disk label exists, fake one up
 - slightly relax the block size checks in bootxx.c; they were a bit to paranoid

And local changes:
 - don't build a copy of libsa/libkern/libz for each boot prog,
   just build a single copy and use it for everything.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 1996/11/27 19:54:54 niklas Exp $
d23 1
a23 1
DEFNS= -DPRIMARY_BOOTBLOCK -DALPHA_BOOT_ECOFF # -DALPHA_BOOT_ELF
@


1.3.14.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2001/01/16 15:36:36 art Exp $
d23 1
a23 1
DEFNS= -DPRIMARY_BOOTBLOCK -DALPHA_BOOT_ECOFF -DALPHA_BOOT_ELF
d33 3
a35 4
${PROG}: ${PROG}.nosym #${HEADERSIZE_PROG}
	objcopy --output-target=binary ${PROG}.nosym ${PROG}
#	dd if=${PROG}.nosym of=${PROG} \
#	    bs=`./${HEADERSIZE_PROG} ${BOOT_RELOC} ${PROG}.nosym` skip=1
@


1.2
log
@Make compilable in our env.  Involved disabling ELF support,
reordering includes (due to -Wstrict-prototypes) and other -Wall goo
@
text
@d1 2
a2 2
#	$OpenBSD: Makefile,v 1.1 1996/10/30 22:40:51 niklas Exp $
#	$NetBSD: Makefile,v 1.3 1996/10/18 06:02:24 thorpej Exp $
d4 1
a4 1
.PATH: ${.CURDIR}/.. ${.CURDIR}/../../../../lib/libsa
d6 1
a6 2
BOOT_PROG = netboot
BOOT_RELOC = ${PRIMARY_LOAD_ADDRESS}
d8 1
a8 2
BOOT_SRCS = start.S netboot.c prom.c prom_disp.S OSFpal.c prom_swpal.S
BOOT_SRCS+= printf.c bzero.c rpcc.S
d10 7
a16 9
BOOT_SRCS+= dev_net.c conf.c devopen.c
BOOT_SRCS+= nfs.c rpc.c alloc.c ntohl.c htonl.c ntohs.c htons.c net.c bootp.c
BOOT_SRCS+= strlen.c dev.c bcmp.c strerror.c rarp.c read.c lseek.c
BOOT_SRCS+= in_cksum.c exit.c closeall.c arp.c strncpy.c globals.c open.c
BOOT_SRCS+= close.c ether.c netif.c

BOOT_SRCS+= if_prom.c loadfile.c getsecs.c

BOOT_OBJS = ${BOOT_SRCS:N*.h:R:S/$/.o/g}
d18 1
d21 1
a21 8
AFLAGS += -DASSEMBLER
CPPFLAGS += -I${.CURDIR}/../../../../ \
	    -I${.CURDIR}/../../../../lib/libsa \
	    -I${.CURDIR}/../.. -DPRIMARY_BOOTBLOCK \
	    -DALPHA_BOOT_ECOFF # -DALPHA_BOOT_ELF
CFLAGS = -Werror -mno-fp-regs -g

CLEANFILES+= vers.c vers.o
d23 1
a23 1
.PATH: ${.CURDIR} ${.CURDIR}/../../../../lib/libkern ${.CURDIR}/../boot
d25 36
a60 1
all: ${BOOT_PROG}
d62 1
a62 1
${BOOT_PROG}: ${BOOT_OBJS} ${HEADERSIZE_PROG}
d65 3
a67 22
	${LD} -Ttext ${BOOT_RELOC} -N -e start -o ${BOOT_PROG}.hdr \
	    ${BOOT_OBJS} vers.o -lc # XXX
	size ${BOOT_PROG}.hdr
	strip ${BOOT_PROG}.hdr
	dd if=${BOOT_PROG}.hdr of=${BOOT_PROG} \
	    bs=`./${HEADERSIZE_PROG} ${BOOT_RELOC} ${BOOT_PROG}.hdr` skip=1

install:
	${INSTALL} -c -o bin -g bin -m 444 ${BOOT_PROG} \
	    ${DESTDIR}${BINDIR}/${BOOT_PROG}

clean: _SUBDIRUSE
	rm -f a.out [Ee]rrs mklog core *.core \
	    ${BOOT_PROG} ${BOOT_OBJS} ${CLEANFILES} \
	    ${BOOT_PROG}.hdr ${BOOT_PROG}.nohdr ${HEADERSIZE_PROG}

cleandir: _SUBDIRUSE clean

.include "${.CURDIR}/../Makefile.inc"
.include <bsd.obj.mk>
.include <bsd.dep.mk>
.include <bsd.subdir.mk>
@


1.1
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 1996/10/18 06:02:24 thorpej Exp $
d14 1
a14 1
BOOT_SRCS+= strlen.c bcopy.c dev.c bcmp.c strerror.c rarp.c read.c lseek.c
d28 1
a28 1
	    -DALPHA_BOOT_ECOFF -DALPHA_BOOT_ELF
@
