head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.8
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.18
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.16
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.12
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.10
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.8
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.10
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.50
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.48
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.46
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.44
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.42
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.40
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.38
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.36
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.34
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.32
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.30
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.28
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.26
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.24
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.22
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.14
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2015.07.17.16.13.26;	author miod;	state Exp;
branches;
next	1.6;
commitid	IG60DdKPWzdWVOMv;

1.6
date	2014.08.21.14.24.08;	author mpi;	state Exp;
branches;
next	1.5;
commitid	5eFitDmQJIvEdtoI;

1.5
date	2010.12.06.18.44.49;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2008.03.09.12.03.03;	author sobrado;	state Exp;
branches;
next	1.3;

1.3
date	97.05.05.06.02.01;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.11.27.19.54.55;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.10.30.22.40.56;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Proper prototypes and return values.
@
text
@/*	$OpenBSD: if_prom.c,v 1.6 2014/08/21 14:24:08 mpi Exp $	*/
/*	$NetBSD: if_prom.c,v 1.9 1997/04/06 08:41:26 cgd Exp $	*/

/*
 * Copyright (c) 1997 Christopher G. Demetriou.  All rights reserved.
 * Copyright (c) 1993 Adam Glass.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Adam Glass.
 * 4. The name of the Author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Adam Glass ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/types.h>

#include <netinet/in.h>

#include <include/rpb.h>
#include <include/prom.h>

#include <lib/libkern/libkern.h>
#include <lib/libsa/netif.h>
#include <lib/libsa/stand.h>

#include "stand/bbinfo.h"

int	prom_match(struct netif *, void *);
int	prom_probe(struct netif *, void *);
void	prom_init(struct iodesc *, void *);
int	prom_get(struct iodesc *, void *, size_t, time_t);
int	prom_put(struct iodesc *, void *, size_t);
void	prom_end(struct netif *);

extern struct netif_stats	prom_stats[];

struct netif_dif prom_ifs[] = {
/*	dif_unit	dif_nsel	dif_stats	dif_private	*/
{	0,		1,		&prom_stats[0],	0,		},
};

struct netif_stats prom_stats[nitems(prom_ifs)];

struct netbbinfo netbbinfo = {
	0xfeedbabedeadbeef,			/* magic number */
	0,					/* set */
	0, 0, 0, 0, 0, 0,			/* ether address */
	0,					/* force */
	{ 0, },					/* pad2 */
	0,					/* cksum */
	0xfeedbeefdeadbabe,			/* magic number */
};

struct netif_driver prom_netif_driver = {
	"prom",			/* netif_bname */
	prom_match,		/* netif_match */
	prom_probe,		/* netif_probe */
	prom_init,		/* netif_init */
	prom_get,		/* netif_get */
	prom_put,		/* netif_put */
	prom_end,		/* netif_end */
	prom_ifs,		/* netif_ifs */
	nitems(prom_ifs)	/* netif_nifs */
};

int netfd, broken_firmware;

int
prom_match(struct netif *nif, void *machdep_hint)
{

	return (1);
}

int
prom_probe(struct netif *nif, void *machdep_hint)
{

	return 0;
}

int
prom_put(struct iodesc *desc, void *pkt, size_t len)
{

	prom_write(netfd, len, pkt, 0);

	return len;
}


int
prom_get(struct iodesc *desc, void *pkt, size_t len, time_t timeout)
{
	prom_return_t ret;
	time_t t;
	ssize_t cc;
	char hate[2000];

	t = getsecs();
	cc = 0;
	while (((getsecs() - t) < timeout) && !cc) {
		if (broken_firmware)
			ret.bits = prom_read(netfd, 0, hate, 0);
		else
			ret.bits = prom_read(netfd, sizeof hate, hate, 0);
		if (ret.u.status == 0)
			cc = ret.u.retval;
	}
	if (broken_firmware)
		cc = lmin(cc, len);
	else
		cc = len;
	bcopy(hate, pkt, cc);

	return cc;
}

extern char *strchr();

void
prom_init(struct iodesc *desc, void *machdep_hint)
{
	prom_return_t ret;
	char devname[64];
	int devlen, i, netbbinfovalid;
	char *enet_addr;
	u_int64_t *qp, csum;

	broken_firmware = 0;

	csum = 0;
	for (i = 0, qp = (u_int64_t *)&netbbinfo;
	    i < (sizeof netbbinfo / sizeof (u_int64_t)); i++, qp++)
		csum += *qp;
	netbbinfovalid = (csum == 0);
	if (netbbinfovalid)
		netbbinfovalid = netbbinfo.set;

#if 0
	printf("netbbinfo ");
	if (!netbbinfovalid)
		printf("invalid\n");
	else
		printf("valid: force = %d, ea = %s\n", netbbinfo.force,
		    ether_sprintf(netbbinfo.ether_addr));
#endif

	ret.bits = prom_getenv(PROM_E_BOOTED_DEV, devname, sizeof(devname));
	devlen = ret.u.retval;

	/* Ethernet address is the 9th component of the booted_dev string. */
	enet_addr = devname;
	for (i = 0; i < 8; i++) {
		enet_addr = strchr(enet_addr, ' ');
		if (enet_addr == NULL) {
			printf("boot: boot device name does not contain ethernet address.\n");
			goto punt;
		}
		enet_addr++;
	}
	if (enet_addr != NULL) {
		int hv, lv;

#define	dval(c)	(((c) >= '0' && (c) <= '9') ? ((c) - '0') : \
		 (((c) >= 'A' && (c) <= 'F') ? (10 + (c) - 'A') : \
		  (((c) >= 'a' && (c) <= 'f') ? (10 + (c) - 'a') : -1)))

		for (i = 0; i < 6; i++) {
			hv = dval(*enet_addr); enet_addr++;
			lv = dval(*enet_addr); enet_addr++;
			enet_addr++;

			if (hv == -1 || lv == -1) {
				printf("boot: boot device name contains bogus ethernet address.\n");
				goto punt;
			}

			desc->myea[i] = (hv << 4) | lv;
		}
#undef dval
	}

	if (netbbinfovalid && netbbinfo.force) {
		printf("boot: using hard-coded ethernet address (forced).\n");
		bcopy(netbbinfo.ether_addr, desc->myea, sizeof desc->myea);
	}

gotit:
	printf("boot: ethernet address: %s\n", ether_sprintf(desc->myea));

	ret.bits = prom_open(devname, devlen + 1);
	if (ret.u.status) {
		printf("prom_init: open failed: %d\n", ret.u.status);
		goto reallypunt;
	}
	netfd = ret.u.retval;
	return;

punt:
	broken_firmware = 1;
	if (netbbinfovalid) {
		printf("boot: using hard-coded ethernet address.\n");
		bcopy(netbbinfo.ether_addr, desc->myea, sizeof desc->myea);
		goto gotit;
	}

reallypunt:
	printf("\n");
	printf("Boot device name was: \"%s\"\n", devname);
	printf("\n");
	printf("Your firmware may be too old to network-boot OpenBSD/alpha,\n");
	printf("or you might have to hard-code an ethernet address into\n");
	printf("your network boot block with setnetbootinfo(8).\n");
	halt();
}

void
prom_end(struct netif *nif)
{

	prom_close(netfd);
}
@


1.6
log
@Kill the remaining <netinet/in_systm.h> inclusion!
@
text
@d1 1
a1 1
/*	$OpenBSD: if_prom.c,v 1.5 2010/12/06 18:44:49 jasper Exp $	*/
d49 6
a54 6
int prom_probe();
int prom_match();
void prom_init();
int prom_get();
int prom_put();
void prom_end();
d90 1
a90 3
prom_match(nif, machdep_hint)
	struct netif *nif;
	void *machdep_hint;
d97 1
a97 3
prom_probe(nif, machdep_hint)
	struct netif *nif;
	void *machdep_hint;
d104 1
a104 4
prom_put(desc, pkt, len)
	struct iodesc *desc;
	void *pkt;
	int len;
d114 1
a114 5
prom_get(desc, pkt, len, timeout)
	struct iodesc *desc;
	void *pkt;
	int len;
	time_t timeout;
d118 1
a118 1
	int cc;
d132 1
a132 1
		cc = min(cc, len);
d143 1
a143 3
prom_init(desc, machdep_hint)
	struct iodesc *desc;
	void *machdep_hint;
d240 1
a240 2
prom_end(nif)
	struct netif *nif;
@


1.5
log
@- drop NENTS(), which was yet another copy of nitems().
no binary change


ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_prom.c,v 1.4 2008/03/09 12:03:03 sobrado Exp $	*/
a38 1
#include <netinet/in_systm.h>
@


1.4
log
@use the right capitalization for platform names

ok jsing@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_prom.c,v 1.3 1997/05/05 06:02:01 millert Exp $	*/
d64 1
a64 1
struct netif_stats prom_stats[NENTS(prom_ifs)];
d85 1
a85 1
	NENTS(prom_ifs)		/* netif_nifs */
@


1.3
log
@Updates from NetBSD (cgd):
 - seriously clean up makefiles.  use libsa/libkern/libz as appropriate,
   and don't build the various sources into objs locally by specifying
   them directly in the Makefiles.
 - move the secondary bootstrap down (to 0x20004000), and add a HEAP_LIMIT
   so that we don't exhaust our bootstrap address space (when using the new,
   not yet checked in, memory allocator).
 - clean up installboot, deal with secondary bootstrap programs not on
   'a' partition or 'a' partition not starting at 0.
 - add padding to structures in bbinfo.h for future expansion.  Add a
   netbbinfo structure to allow netboot information to be hard-coded in
   network boot blocks, so that they can be made to work even on systems
   with firmware which doesn't support the new "ethernet address in boot
   device" convention.
 - move the sync() calls to the correct place in installboot.c
 - remove a kludge in disk.c which was breaking multiple opens/closes
   of the disk
 - allow netboot ethernet address to be hard-coded into binary so that
   machines with old firmware which doesn't pass it in the boot device
   can work.  Assume that if the ethernet address isn't passed in, it
   uses the old (dain-bramaged) 'read' interface works on my 3000/300LX.
 - Add setnetbootinfo, a program to hard code an ethernet address into
   a network boot.
 - move an 'int debug;' into boot.c (it was the only diff between boot.c and
   netboot.c), and nuke netboot.c (using boot.c instead for net boot blocks).
 - add cd9660 file system ops to the file system ops table in filesystem.c
 - if a file name is given (i.e. BOOTED_FILE) is set, boot only that file,
   but if not then try to boot "bsd", "bsd.bak", "bsd.old", and
   "obsd" (in that order) until one is found or until the list of names
   is exhausted.
 - add support for reading gzipped kernels.
 - use strerror() to print errors, rather than just printing error numbers
 - if no disk label exists, fake one up
 - slightly relax the block size checks in bootxx.c; they were a bit to paranoid

And local changes:
 - don't build a copy of libsa/libkern/libz for each boot prog,
   just build a single copy and use it for everything.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_prom.c,v 1.2 1996/11/27 19:54:55 niklas Exp $	*/
d247 1
a247 1
	printf("Your firmware may be too old to network-boot OpenBSD/Alpha,\n");
@


1.2
log
@Make compilable in our env.  Involved disabling ELF support,
reordering includes (due to -Wstrict-prototypes) and other -Wall goo
@
text
@d1 2
a2 2
/*	$OpenBSD: if_prom.c,v 1.1 1996/10/30 22:40:56 niklas Exp $	*/
/*	$NetBSD: if_prom.c,v 1.4 1996/10/02 21:18:49 cgd Exp $	*/
d5 2
a6 2
 * Copyright (c) 1993 Adam Glass
 * All rights reserved.
d41 8
a48 5
#include "netif.h"
#include "include/rpb.h"
#include "include/prom.h"
#include "lib/libkern/libkern.h"
#include "lib/libsa/stand.h"
d66 10
d88 1
a88 1
int netfd;
d136 4
a139 1
		ret.bits = prom_read(netfd, sizeof hate, hate, 0);
d141 1
a141 1
			cc += ret.u.retval;
d143 4
a146 1
	cc = len;
d161 1
a161 1
	int devlen, i;
d163 20
d192 1
a192 1
			printf("Boot device name does not contain ethernet address.\n");
d210 1
a210 1
				printf("Bogus ethernet address.\n");
d219 6
d230 1
a230 1
		goto punt;
d236 9
d247 3
a249 1
	printf("Your firmware may be too old to network-boot OpenBSD/Alpha.\n");
@


1.1
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_prom.c,v 1.4 1996/10/02 21:18:49 cgd Exp $	*/
d42 1
d45 1
@
