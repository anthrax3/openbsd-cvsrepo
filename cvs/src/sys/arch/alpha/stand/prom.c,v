head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.30
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.26
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.22
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.24
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.16
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.20
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.18
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.14
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.12
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.10
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.5.0.58
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.54
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.52
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.50
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.48
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.46
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.44
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.42
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.40
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.38
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.36
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.34
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.32
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.30
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.28
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.26
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.24
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.22
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.20
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.18
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.16
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.14
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2010.05.14.21.08.28;	author naddy;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.30.19.43.44;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.30.19.41.59;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	97.01.24.19.58.07;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.11.27.19.54.49;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.10.30.22.40.33;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.07.29.23.01.24;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.03.53.50;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@don't warn about libsa's exit(); pull in declaration for memcpy()
courtesy of gcc4; ok kettenis@@
@
text
@/*	$OpenBSD: prom.c,v 1.7 2009/09/30 19:43:44 miod Exp $	*/
/*	$NetBSD: prom.c,v 1.2 1996/11/25 16:18:16 cgd Exp $	*/

/*  
 * Mach Operating System
 * Copyright (c) 1992 Carnegie Mellon University
 * All Rights Reserved.
 * 
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 * 
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 * 
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

#include <lib/libsa/stand.h>

#include <sys/types.h>

#include <machine/rpb.h>
#include <machine/prom.h>

int console;

void
init_prom_calls()
{
	extern struct prom_vec prom_dispatch_v;
	struct rpb *r;
	struct crb *c;
	char buf[4];

	r = (struct rpb *)HWRPB_ADDR;
	c = (struct crb *)((u_int8_t *)r + r->rpb_crb_off);

	prom_dispatch_v.routine_arg = c->crb_v_dispatch;
	prom_dispatch_v.routine = c->crb_v_dispatch->entry_va;

	/* Look for console tty. */
	prom_getenv(PROM_E_TTY_DEV, buf, 4);
	console = buf[0] - '0';
}

int
getchar()
{
	prom_return_t ret;

	for (;;) {
		ret.bits = prom_dispatch(PROM_R_GETC, console);
		if (ret.u.status == 0 || ret.u.status == 1)
			return (ret.u.retval);
	}
}

void
putchar(c)
	int c;
{
	prom_return_t ret;
	char cbuf;

	if (c == '\r' || c == '\n') {
		cbuf = '\r';
		do {
			ret.bits = prom_dispatch(PROM_R_PUTS, console,
			    &cbuf, 1);
		} while ((ret.u.retval & 1) == 0);
		cbuf = '\n';
	} else
		cbuf = c;
	do {
		ret.bits = prom_dispatch(PROM_R_PUTS, console, &cbuf, 1);
	} while ((ret.u.retval & 1) == 0);
}

int
prom_getenv(id, buf, len)
	int id, len;
	char *buf;
{
	/*
	 * On at least some systems, the GETENV call requires a
	 * 8-byte-aligned buffer, or it bails out with a "kernel stack
	 * not valid halt". Provide a local, aligned buffer here and
	 * then copy to the caller's buffer.
	 */
	static char abuf[128] __attribute__ ((aligned (8)));
	prom_return_t ret;

	ret.bits = prom_dispatch(PROM_R_GETENV, id, abuf, 128);
	if (ret.u.status & 0x4)
		ret.u.retval = 0;
	len--;
	if (len > ret.u.retval)
		len = ret.u.retval;
	memcpy(buf, abuf, len);
	buf[len] = '\0';

	return (len);
}
@


1.7
log
@Some old SRM require 8-byte alignment of the buffer passed to the prom
getenv routine, so fulfill this requirement. From NetBSD. (Note this
only concerns the boot blocks, as the kernel itself uses extremely well
aligned addresses for getenv calls).
@
text
@d1 1
a1 1
/*	$OpenBSD: prom.c,v 1.6 2009/09/30 19:41:59 miod Exp $	*/
d29 2
@


1.6
log
@Get rid of prom_open() and implement it directly as a prom_dispatch() wrapper,
necessary for some old SRM version. From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: prom.c,v 1.5 1997/01/24 19:58:07 niklas Exp $	*/
d94 7
d103 1
a103 1
	ret.bits = prom_dispatch(PROM_R_GETENV, id, buf, len-1);
d106 5
a110 1
	buf[ret.u.retval] = '\0';
d112 1
a112 1
	return (ret.u.retval);
@


1.5
log
@Sync with NetBSD 961207
@
text
@d1 1
a1 1
/*	$OpenBSD: prom.c,v 1.4 1996/11/27 19:54:49 niklas Exp $	*/
a101 14
}

int
prom_open(dev, len)
	char *dev;
	int len;
{
	prom_return_t ret;

	ret.bits = prom_dispatch(PROM_R_OPEN, dev, len);
	if (ret.u.status & 0x4)
		return (-1);
	else
		return (ret.u.retval);
@


1.4
log
@Make compilable in our env.  Involved disabling ELF support,
reordering includes (due to -Wstrict-prototypes) and other -Wall goo
@
text
@d1 2
a2 2
/*	$OpenBSD: prom.c,v 1.3 1996/10/30 22:40:33 niklas Exp $	*/
/*	$NetBSD: prom.c,v 1.1 1995/11/23 02:39:07 cgd Exp $	*/
d49 1
a49 1
	prom_dispatch_v.routine = c->crb_v_dispatch->code;
@


1.3
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
/*	$OpenBSD: prom.c,v 1.1 1995/11/23 02:39:07 cgd Exp $	*/
d32 1
a33 1
#include <machine/rpb.h>
@


1.2
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@@


1.1
log
@update to netbsd
@
text
@d1 1
@
