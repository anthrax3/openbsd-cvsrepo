head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.14
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.10
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.6
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.8
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.4
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.5.0.26
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.22
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.20
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.18
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.16
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.2.0.18
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.16
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.14
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.12
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.10
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.8
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.6
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.7
date	2014.06.14.23.11.20;	author jmatthew;	state Exp;
branches;
next	1.6;
commitid	bNrqGO9e64n0bceZ;

1.6
date	2014.03.31.21.10.10;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.04.21.18.43;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.20.01.00.58;	author martin;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.26;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.21.17.26.38;	author art;	state Exp;
branches
	1.1.2.1
	1.1.8.1;
next	;

1.1.2.1
date	2001.04.18.16.00.44;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.03.28.10.06.13;	author niklas;	state Exp;
branches;
next	;

1.1.8.1
date	2002.06.11.03.33.40;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Preallocate sgmap extent regions for tsp, cia and mcpcia dma maps, which fall
back to sgmap if the direct mapping fails.

ok miod@@
@
text
@/* $OpenBSD: sgmapvar.h,v 1.6 2014/03/31 21:10:10 kettenis Exp $ */
/* $NetBSD: sgmapvar.h,v 1.10 1998/08/14 16:50:02 thorpej Exp $ */

/*-
 * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef	_ALPHA_COMMON_SGMAPVAR_H
#define	_ALPHA_COMMON_SGMAPVAR_H

#include <sys/extent.h>
#include <sys/mutex.h>
#include <machine/bus.h>

/*
 * Bits n:13 of the DMA address are the index of the PTE into
 * the SGMAP page table.
 */
#define	SGMAP_ADDR_PTEIDX_SHIFT	13

/*
 * An Alpha SGMAP's state information.  Nothing in the sgmap requires
 * locking[*], with the exception of the extent map.  Locking of the
 * extent map is handled within the extent manager itself.
 *
 * [*] While the page table is a `global' resource, access to it is
 * controlled by the extent map; once a region has been allocated from
 * the map, that region is effectively `locked'.
 */
struct alpha_sgmap {
	struct extent *aps_ex;		/* extent map to manage sgva space */
	struct mutex aps_mtx;
	void	*aps_pt;		/* page table */
	bus_addr_t aps_ptpa;		/* page table physical address */
	bus_addr_t aps_sgvabase;	/* base of the sgva space */
	bus_size_t aps_sgvasize;	/* size of the sgva space */
	bus_addr_t aps_wbase;		/* base of the dma window */
};

extern	vaddr_t alpha_sgmap_prefetch_spill_page_va;
extern	bus_addr_t alpha_sgmap_prefetch_spill_page_pa;

void	alpha_sgmap_init(bus_dma_tag_t, struct alpha_sgmap *,
	    const char *, bus_addr_t, bus_addr_t, bus_size_t, size_t, void *,
	    bus_size_t);

int	alpha_sgmap_dmamap_setup(bus_dmamap_t, int, int);
void	alpha_sgmap_dmamap_teardown(bus_dmamap_t);
int	alpha_sgmap_dmamap_create(bus_dma_tag_t, bus_size_t, int, bus_size_t,
	    bus_size_t, int, bus_dmamap_t *);
void	alpha_sgmap_dmamap_destroy(bus_dma_tag_t, bus_dmamap_t);

#endif	/* _ALPHA_COMMON_SGMAPVAR_H */
@


1.6
log
@Use extent_alloc_with_descr(9) and add a mutex to protect the extent.
This should make bus_dmamap_load(9) and bus_dmamap_unload(9) "mpsafe".

As a bonus this gets rid of a potential memory allocation in the IO path.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: sgmapvar.h,v 1.5 2008/06/26 05:42:08 ray Exp $ */
d73 2
@


1.5
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: sgmapvar.h,v 1.4 2006/04/04 21:18:43 brad Exp $ */
d38 1
d58 1
@


1.4
log
@clean up after Theo's "support mbuf handling in alpha sgmap dma maps" commit.

ok martin@@
@
text
@d1 1
a1 1
/* $OpenBSD: sgmapvar.h,v 1.3 2006/03/20 01:00:58 martin Exp $ */
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.3
log
@factorize SGMAP-mapped DMA map creation and destroy code

ok miod@@, additional testing jsg@@

from NetBSD
@
text
@d1 1
a1 1
/* $OpenBSD: sgmapvar.h,v 1.2 2002/03/14 01:26:26 millert Exp $ */
a70 14
/*
 * Log entry, used for debugging SGMAPs.
 */
struct sgmap_log_entry {
	int	sl_op;			/* op; 1 = load, 0 = unload */
	struct alpha_sgmap *sl_sgmap;	/* sgmap for entry */
	void	*sl_origbuf;		/* original buffer */
	u_long	sl_pgoffset;		/* page offset of buffer start */
	u_long	sl_origlen;		/* length of transfer */
	u_long	sl_sgva;		/* sgva of transfer */
	u_long	sl_dmaaddr;		/* dma address */
	int	sl_ptecnt;		/* pte count */
};

a76 4

int	alpha_sgmap_alloc(bus_dmamap_t, bus_size_t,
	    struct alpha_sgmap *, int);
void	alpha_sgmap_free(bus_dmamap_t, struct alpha_sgmap *);
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: sgmapvar.h,v 1.1 2001/03/21 17:26:38 art Exp $ */
d95 4
@


1.1
log
@Move files from common to dev to be more like other archs
(and so that tab completion on "compile" works as on other archs. :))
@
text
@d1 1
a1 1
/* $OpenBSD: sgmapvar.h,v 1.2 2000/11/08 21:27:12 ericj Exp $ */
d88 1
a88 1
void	alpha_sgmap_init __P((bus_dma_tag_t, struct alpha_sgmap *,
d90 1
a90 1
	    bus_size_t));
d92 3
a94 3
int	alpha_sgmap_alloc __P((bus_dmamap_t, bus_size_t,
	    struct alpha_sgmap *, int));
void	alpha_sgmap_free __P((bus_dmamap_t, struct alpha_sgmap *));
@


1.1.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: sgmapvar.h,v 1.1 2001/03/21 17:26:38 art Exp $ */
d88 1
a88 1
void	alpha_sgmap_init(bus_dma_tag_t, struct alpha_sgmap *,
d90 1
a90 1
	    bus_size_t);
d92 3
a94 3
int	alpha_sgmap_alloc(bus_dmamap_t, bus_size_t,
	    struct alpha_sgmap *, int);
void	alpha_sgmap_free(bus_dmamap_t, struct alpha_sgmap *);
@


1.1.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/* $OpenBSD: sgmapvar.h,v 1.1 2001/03/21 17:26:38 art Exp $ */
@


1.1.2.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d88 1
a88 1
void	alpha_sgmap_init(bus_dma_tag_t, struct alpha_sgmap *,
d90 1
a90 1
	    bus_size_t);
d92 3
a94 3
int	alpha_sgmap_alloc(bus_dmamap_t, bus_size_t,
	    struct alpha_sgmap *, int);
void	alpha_sgmap_free(bus_dmamap_t, struct alpha_sgmap *);
@


