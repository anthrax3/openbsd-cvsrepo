head	1.35;
access;
symbols
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.35.0.8
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.4
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.35.0.6
	OPENBSD_5_8_BASE:1.35
	OPENBSD_5_7:1.35.0.2
	OPENBSD_5_7_BASE:1.35
	OPENBSD_5_6:1.33.0.4
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.31.0.14
	OPENBSD_5_5_BASE:1.31
	OPENBSD_5_4:1.31.0.10
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.31.0.8
	OPENBSD_5_3_BASE:1.31
	OPENBSD_5_2:1.31.0.6
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.4
	OPENBSD_5_0:1.31.0.2
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.30.0.2
	OPENBSD_4_9_BASE:1.30
	OPENBSD_4_8:1.28.0.2
	OPENBSD_4_8_BASE:1.28
	OPENBSD_4_7:1.26.0.2
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.26.0.4
	OPENBSD_4_6_BASE:1.26
	OPENBSD_4_5:1.23.0.4
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.23.0.2
	OPENBSD_4_4_BASE:1.23
	OPENBSD_4_3:1.22.0.2
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.21.0.6
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.21.0.4
	OPENBSD_4_1_BASE:1.21
	OPENBSD_4_0:1.21.0.2
	OPENBSD_4_0_BASE:1.21
	OPENBSD_3_9:1.15.0.2
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.14.0.4
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.4
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.11
	UBC:1.8.0.2
	UBC_BASE:1.8
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_9_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.35
date	2014.11.16.12.30.56;	author deraadt;	state Exp;
branches;
next	1.34;
commitid	yv0ECmCdICvq576h;

1.34
date	2014.09.13.16.06.36;	author doug;	state Exp;
branches;
next	1.33;
commitid	jdBY2kKXhfcoQitp;

1.33
date	2014.07.12.18.44.40;	author tedu;	state Exp;
branches;
next	1.32;
commitid	uKVPYMN2MLxdZxzH;

1.32
date	2014.07.11.09.36.25;	author mpi;	state Exp;
branches;
next	1.31;
commitid	vsYjSRfS3Y783BvW;

1.31
date	2011.06.23.20.44.38;	author ariane;	state Exp;
branches;
next	1.30;

1.30
date	2010.12.26.15.40.58;	author miod;	state Exp;
branches;
next	1.29;

1.29
date	2010.11.20.20.33.21;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2010.04.10.13.46.12;	author oga;	state Exp;
branches;
next	1.27;

1.27
date	2010.03.29.19.21.58;	author oga;	state Exp;
branches;
next	1.26;

1.26
date	2009.04.20.00.42.05;	author oga;	state Exp;
branches;
next	1.25;

1.25
date	2009.04.14.16.01.04;	author oga;	state Exp;
branches;
next	1.24;

1.24
date	2009.03.07.15.34.32;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.22;

1.22
date	2007.10.02.00.59.12;	author krw;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.21.02.11.54;	author brad;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.21.02.00.08;	author brad;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.21.01.48.35;	author brad;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.12.20.48.19;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.13.14.41.08;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.18.19.00.06;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.28.19.10.26;	author martin;	state Exp;
branches;
next	1.14;

1.14
date	2004.12.25.23.02.23;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2004.11.09.19.17.00;	author claudio;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.18.20.14.40;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.07.18.35.56;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.06.22.06.15;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.26.26;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.08.02.24.05;	author art;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2001.11.28.16.24.26;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.06.19.53.13;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.05.17.25.57;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.19.20.50.56;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.25.13.25.31;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.08.08.08.39;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.21.17.26.38;	author art;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.04.18.16.00.40;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.07.04.10.14.32;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2001.10.31.02.52.44;	author nate;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2001.11.13.21.00.49;	author niklas;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2001.12.05.00.39.08;	author niklas;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2002.03.06.00.47.44;	author niklas;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2002.03.28.10.06.13;	author niklas;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2004.02.19.09.59.34;	author niklas;	state Exp;
branches;
next	;

1.8.2.1
date	2002.06.11.03.33.40;	author art;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2002.10.29.00.28.00;	author art;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Replace a plethora of historical protection options with just
PROT_NONE, PROT_READ, PROT_WRITE, and PROT_EXEC from mman.h.
PROT_MASK is introduced as the one true way of extracting those bits.
Remove UVM_ADV_* wrapper, using the standard names.
ok doug guenther kettenis
@
text
@/* $OpenBSD: bus_dma.c,v 1.34 2014/09/13 16:06:36 doug Exp $ */
/* $NetBSD: bus_dma.c,v 1.40 2000/07/17 04:47:56 thorpej Exp $ */

/*-
 * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#define _ALPHA_BUS_DMA_PRIVATE
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/malloc.h>
#include <sys/proc.h>
#include <sys/mbuf.h>

#include <uvm/uvm_extern.h>

#include <machine/bus.h>
#include <machine/intr.h>

int	_bus_dmamap_load_buffer_direct(bus_dma_tag_t,
	    bus_dmamap_t, void *, bus_size_t, struct proc *, int,
	    paddr_t *, int *, int);

/*
 * Common function for DMA map creation.  May be called by bus-specific
 * DMA map creation functions.
 */
int
_bus_dmamap_create(t, size, nsegments, maxsegsz, boundary, flags, dmamp)
	bus_dma_tag_t t;
	bus_size_t size;
	int nsegments;
	bus_size_t maxsegsz;
	bus_size_t boundary;
	int flags;
	bus_dmamap_t *dmamp;
{
	struct alpha_bus_dmamap *map;
	void *mapstore;
	size_t mapsize;

	/*
	 * Allocate and initialize the DMA map.  The end of the map
	 * is a variable-sized array of segments, so we allocate enough
	 * room for them in one shot.
	 *
	 * Note we don't preserve the WAITOK or NOWAIT flags.  Preservation
	 * of ALLOCNOW notifies others that we've reserved these resources,
	 * and they are not to be freed.
	 *
	 * The bus_dmamap_t includes one bus_dma_segment_t, hence
	 * the (nsegments - 1).
	 */
	mapsize = sizeof(struct alpha_bus_dmamap) +
	    (sizeof(bus_dma_segment_t) * (nsegments - 1));
	if ((mapstore = malloc(mapsize, M_DEVBUF, (flags & BUS_DMA_NOWAIT) ?
	    (M_NOWAIT | M_ZERO) : (M_WAITOK | M_ZERO))) == NULL)
		return (ENOMEM);

	map = (struct alpha_bus_dmamap *)mapstore;
	map->_dm_size = size;
	map->_dm_segcnt = nsegments;
	map->_dm_maxsegsz = maxsegsz;
	if (t->_boundary != 0 && t->_boundary < boundary)
		map->_dm_boundary = t->_boundary;
	else
		map->_dm_boundary = boundary;
	map->_dm_flags = flags & ~(BUS_DMA_WAITOK|BUS_DMA_NOWAIT);
	map->dm_mapsize = 0;		/* no valid mappings */
	map->dm_nsegs = 0;
	map->_dm_window = NULL;

	*dmamp = map;
	return (0);
}

/*
 * Common function for DMA map destruction.  May be called by bus-specific
 * DMA map destruction functions.
 */
void
_bus_dmamap_destroy(t, map)
	bus_dma_tag_t t;
	bus_dmamap_t map;
{

	free(map, M_DEVBUF, 0);
}

/*
 * Utility function to load a linear buffer.  lastaddrp holds state
 * between invocations (for multiple-buffer loads).  segp contains
 * the starting segment on entrance, and the ending segment on exit.
 * first indicates if this is the first invocation of this function.
 */
int
_bus_dmamap_load_buffer_direct(t, map, buf, buflen, p, flags,
    lastaddrp, segp, first)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	void *buf;
	bus_size_t buflen;
	struct proc *p;
	int flags;
	paddr_t *lastaddrp;
	int *segp;
	int first;
{
	bus_size_t sgsize;
	pmap_t pmap;
	bus_addr_t curaddr, lastaddr, baddr, bmask;
	vaddr_t vaddr = (vaddr_t)buf;
	int seg;

	if (p != NULL)
		pmap = p->p_vmspace->vm_map.pmap;
	else
		pmap = pmap_kernel();

	lastaddr = *lastaddrp;
	bmask = ~(map->_dm_boundary - 1);

	for (seg = *segp; buflen > 0 ; ) {
		/*
		 * Get the physical address for this segment.
		 */
		pmap_extract(pmap, vaddr, &curaddr);

		/*
		 * If we're beyond the current DMA window, indicate
		 * that and try to fall back into SGMAPs.
		 */
		if (t->_wsize != 0 && curaddr >= t->_wsize)
			return (EINVAL);

		curaddr |= t->_wbase;

		/*
		 * Compute the segment size, and adjust counts.
		 */
		sgsize = PAGE_SIZE - ((u_long)vaddr & PGOFSET);
		if (buflen < sgsize)
			sgsize = buflen;
		if (map->_dm_maxsegsz < sgsize)
			sgsize = map->_dm_maxsegsz;

		/*
		 * Make sure we don't cross any boundaries.
		 */
		if (map->_dm_boundary > 0) {
			baddr = (curaddr + map->_dm_boundary) & bmask;
			if (sgsize > (baddr - curaddr))
				sgsize = (baddr - curaddr);
		}

		/*
		 * Insert chunk into a segment, coalescing with
		 * the previous segment if possible.
		 */
		if (first) {
			map->dm_segs[seg].ds_addr = curaddr;
			map->dm_segs[seg].ds_len = sgsize;
			first = 0;
		} else {
			if ((map->_dm_flags & DMAMAP_NO_COALESCE) == 0 &&
			    curaddr == lastaddr &&
			    (map->dm_segs[seg].ds_len + sgsize) <=
			     map->_dm_maxsegsz &&
			    (map->_dm_boundary == 0 ||
			     (map->dm_segs[seg].ds_addr & bmask) ==
			     (curaddr & bmask)))
				map->dm_segs[seg].ds_len += sgsize;
			else {
				if (++seg >= map->_dm_segcnt)
					break;
				map->dm_segs[seg].ds_addr = curaddr;
				map->dm_segs[seg].ds_len = sgsize;
			}
		}

		lastaddr = curaddr + sgsize;
		vaddr += sgsize;
		buflen -= sgsize;
	}

	*segp = seg;
	*lastaddrp = lastaddr;

	/*
	 * Did we fit?
	 */
	if (buflen != 0) {
		/*
		 * If there is a chained window, we will automatically
		 * fall back to it.
		 */
		return (EFBIG);		/* XXX better return value here? */
	}

	return (0);
}

/*
 * Common function for loading a direct-mapped DMA map with a linear
 * buffer.  Called by bus-specific DMA map load functions with the
 * OR value appropriate for indicating "direct-mapped" for that
 * chipset.
 */
int
_bus_dmamap_load_direct(t, map, buf, buflen, p, flags)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	void *buf;
	bus_size_t buflen;
	struct proc *p;
	int flags;
{
	paddr_t lastaddr;
	int seg, error;

	/*
	 * Make sure that on error condition we return "no valid mappings".
	 */
	map->dm_mapsize = 0;
	map->dm_nsegs = 0;
	KASSERT((map->_dm_flags & (BUS_DMA_READ|BUS_DMA_WRITE)) == 0);

	if (buflen > map->_dm_size)
		return (EINVAL);

	seg = 0;
	error = _bus_dmamap_load_buffer_direct(t, map, buf, buflen,
	    p, flags, &lastaddr, &seg, 1);
	if (error == 0) {
		map->dm_mapsize = buflen;
		map->dm_nsegs = seg + 1;
		map->_dm_window = t;
	} else if (t->_next_window != NULL) {
		/*
		 * Give the next window a chance.
		 */
		error = bus_dmamap_load(t->_next_window, map, buf, buflen,
		    p, flags);
	}
	return (error);
}

/*
 * Like _bus_dmamap_load_direct(), but for mbufs.
 */
int
_bus_dmamap_load_mbuf_direct(t, map, m0, flags)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	struct mbuf *m0;
	int flags;
{
	paddr_t lastaddr;
	int seg, error, first;
	struct mbuf *m;

	/*
	 * Make sure that on error condition we return "no valid mappings."
	 */
	map->dm_mapsize = 0;
	map->dm_nsegs = 0;
	KASSERT((map->_dm_flags & (BUS_DMA_READ|BUS_DMA_WRITE)) == 0);

#ifdef DIAGNOSTIC
	if ((m0->m_flags & M_PKTHDR) == 0)
		panic("_bus_dmamap_load_mbuf_direct: no packet header");
#endif

	if (m0->m_pkthdr.len > map->_dm_size)
		return (EINVAL);

	first = 1;
	seg = 0;
	error = 0;
	for (m = m0; m != NULL && error == 0; m = m->m_next) {
		if (m->m_len == 0)
			continue;
		error = _bus_dmamap_load_buffer_direct(t, map,
		    m->m_data, m->m_len, NULL, flags, &lastaddr, &seg, first);
		first = 0;
	}
	if (error == 0) {
		map->dm_mapsize = m0->m_pkthdr.len;
		map->dm_nsegs = seg + 1;
		map->_dm_window = t;
	} else if (t->_next_window != NULL) {
		/*
		 * Give the next window a chance.
		 */
		error = bus_dmamap_load_mbuf(t->_next_window, map, m0, flags);
	}
	return (error);
}

/*
 * Like _bus_dmamap_load_direct(), but for uios.
 */
int
_bus_dmamap_load_uio_direct(t, map, uio, flags)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	struct uio *uio;
	int flags;
{
	paddr_t lastaddr;
	int seg, i, error, first;
	bus_size_t minlen, resid;
	struct proc *p = NULL;
	struct iovec *iov;
	caddr_t addr;

	/*
	 * Make sure that on error condition we return "no valid mappings."
	 */
	map->dm_mapsize = 0;
	map->dm_nsegs = 0;
	KASSERT((map->_dm_flags & (BUS_DMA_READ|BUS_DMA_WRITE)) == 0);

	resid = uio->uio_resid;
	iov = uio->uio_iov;

	if (uio->uio_segflg == UIO_USERSPACE) {
		p = uio->uio_procp;
#ifdef DIAGNOSTIC
		if (p == NULL)
			panic("_bus_dmamap_load_uio_direct: "
			    "USERSPACE but no proc");
#endif
	}

	first = 1;
	seg = 0;
	error = 0;
	for (i = 0; i < uio->uio_iovcnt && resid != 0 && error == 0; i++) {
		/*
		 * Now at the first iovec to load.  Load each iovec
		 * until we have exhausted the residual count.
		 */
		minlen = resid < iov[i].iov_len ? resid : iov[i].iov_len;
		addr = (caddr_t)iov[i].iov_base;

		error = _bus_dmamap_load_buffer_direct(t, map,
		    addr, minlen, p, flags, &lastaddr, &seg, first);
		first = 0;

		resid -= minlen;
	}
	if (error == 0) {
		map->dm_mapsize = uio->uio_resid;
		map->dm_nsegs = seg + 1;
		map->_dm_window = t;
	} else if (t->_next_window != NULL) {
		/*
		 * Give the next window a chance.
		 */
		error = bus_dmamap_load_uio(t->_next_window, map, uio, flags);
	}
	return (error);
}

/*
 * Like _bus_dmamap_load_direct(), but for raw memory.
 */
int
_bus_dmamap_load_raw_direct(t, map, segs, nsegs, size, flags)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	bus_dma_segment_t *segs;
	int nsegs;
	bus_size_t size;
	int flags;
{

	panic("_bus_dmamap_load_raw_direct: not implemented");
}

/*
 * Common function for unloading a DMA map.  May be called by
 * chipset-specific DMA map unload functions.
 */
void
_bus_dmamap_unload(t, map)
	bus_dma_tag_t t;
	bus_dmamap_t map;
{

	/*
	 * No resources to free; just mark the mappings as
	 * invalid.
	 */
	map->dm_mapsize = 0;
	map->dm_nsegs = 0;
	map->_dm_window = NULL;
	map->_dm_flags &= ~(BUS_DMA_READ|BUS_DMA_WRITE);
}

/*
 * Common function for DMA map synchronization.  May be called
 * by chipset-specific DMA map synchronization functions.
 */
void
_bus_dmamap_sync(t, map, offset, len, op)
	bus_dma_tag_t t;
	bus_dmamap_t map;
	bus_addr_t offset;
	bus_size_t len;
	int op;
{

	/*
	 * Flush the store buffer.
	 */
	alpha_mb();
}

/*
 * Common function for DMA-safe memory allocation.  May be called
 * by bus-specific DMA memory allocation functions.
 */
int
_bus_dmamem_alloc(t, size, alignment, boundary, segs, nsegs, rsegs, flags)
	bus_dma_tag_t t; 
	bus_size_t size, alignment, boundary;
	bus_dma_segment_t *segs;
	int nsegs;
	int *rsegs;
	int flags; 
{

	return (_bus_dmamem_alloc_range(t, size, alignment, boundary,
	    segs, nsegs, rsegs, flags, (paddr_t)0, (paddr_t)-1));
}

/*
 * Allocate physical memory from the given physical address range.
 * Called by DMA-safe memory allocation methods.
 */
int
_bus_dmamem_alloc_range(t, size, alignment, boundary, segs, nsegs, rsegs,
    flags, low, high)
	bus_dma_tag_t t; 
	bus_size_t size, alignment, boundary;
	bus_dma_segment_t *segs;
	int nsegs;
	int *rsegs;
	int flags; 
	paddr_t low;
	paddr_t high;
{
	paddr_t curaddr, lastaddr;
	struct vm_page *m;    
	struct pglist mlist;
	int curseg, error, plaflag;

	/* Always round the size. */
	size = round_page(size);

	/*
	 * Allocate pages from the VM system.
	 */
	plaflag = flags & BUS_DMA_NOWAIT ? UVM_PLA_NOWAIT : UVM_PLA_WAITOK;
	if (flags & BUS_DMA_ZERO)
		plaflag |= UVM_PLA_ZERO;

	TAILQ_INIT(&mlist);
	error = uvm_pglistalloc(size, low, high, alignment, boundary,
	    &mlist, nsegs, plaflag);
	if (error)
		return (error);

	/*
	 * Compute the location, size, and number of segments actually
	 * returned by the VM code.
	 */
	m = TAILQ_FIRST(&mlist);
	curseg = 0;
	lastaddr = segs[curseg].ds_addr = VM_PAGE_TO_PHYS(m);
	segs[curseg].ds_len = PAGE_SIZE;
	m = TAILQ_NEXT(m, pageq);

	for (; m != NULL; m = TAILQ_NEXT(m, pageq)) {
		curaddr = VM_PAGE_TO_PHYS(m);
#ifdef DIAGNOSTIC
		if (curaddr < low || curaddr >= high) {
			printf("uvm_pglistalloc returned non-sensical"
			    " address 0x%lx\n", curaddr);
			panic("_bus_dmamem_alloc");
		}
#endif
		if (curaddr == (lastaddr + PAGE_SIZE))
			segs[curseg].ds_len += PAGE_SIZE;
		else {
			curseg++;
			segs[curseg].ds_addr = curaddr;
			segs[curseg].ds_len = PAGE_SIZE;
		}
		lastaddr = curaddr;
	}

	*rsegs = curseg + 1;

	return (0);
}

/*
 * Common function for freeing DMA-safe memory.  May be called by
 * bus-specific DMA memory free functions.
 */
void
_bus_dmamem_free(t, segs, nsegs)
	bus_dma_tag_t t;
	bus_dma_segment_t *segs;
	int nsegs;
{
	struct vm_page *m;
	bus_addr_t addr;
	struct pglist mlist;
	int curseg;

	/*
	 * Build a list of pages to free back to the VM system.
	 */
	TAILQ_INIT(&mlist);
	for (curseg = 0; curseg < nsegs; curseg++) {
		for (addr = segs[curseg].ds_addr;
		    addr < (segs[curseg].ds_addr + segs[curseg].ds_len);
		    addr += PAGE_SIZE) {
			m = PHYS_TO_VM_PAGE(addr);
			TAILQ_INSERT_TAIL(&mlist, m, pageq);
		}
	}

	uvm_pglistfree(&mlist);
}

/*
 * Common function for mapping DMA-safe memory.  May be called by
 * bus-specific DMA memory map functions.
 */
int
_bus_dmamem_map(t, segs, nsegs, size, kvap, flags)
	bus_dma_tag_t t;
	bus_dma_segment_t *segs;
	int nsegs;
	size_t size;
	caddr_t *kvap;  
	int flags;
{
	vaddr_t va, sva;
	size_t ssize;
	bus_addr_t addr;
	int curseg, error;
	const struct kmem_dyn_mode *kd;

	/*
	 * If we're only mapping 1 segment, use K0SEG, to avoid
	 * TLB thrashing.
	 */
	if (nsegs == 1) {
		*kvap = (caddr_t)ALPHA_PHYS_TO_K0SEG(segs[0].ds_addr);
		return (0);
	}

	size = round_page(size);
	kd = flags & BUS_DMA_NOWAIT ? &kd_trylock : &kd_waitok;
	va = (vaddr_t)km_alloc(size, &kv_any, &kp_none, kd);
	if (va == 0)
		return (ENOMEM);

	*kvap = (caddr_t)va;

	sva = va;
	ssize = size;
	for (curseg = 0; curseg < nsegs; curseg++) {
		for (addr = segs[curseg].ds_addr;
		    addr < (segs[curseg].ds_addr + segs[curseg].ds_len);
		    addr += PAGE_SIZE, va += PAGE_SIZE, size -= PAGE_SIZE) {
			if (size == 0)
				panic("_bus_dmamem_map: size botch");
			error = pmap_enter(pmap_kernel(), va, addr,
			    PROT_READ | PROT_WRITE,
			    PROT_READ | PROT_WRITE | PMAP_WIRED | PMAP_CANFAIL);
			if (error) {
				pmap_update(pmap_kernel());
				km_free((void *)sva, ssize, &kv_any, &kp_none);
				return (error);
			}
		}
	}
	pmap_update(pmap_kernel());

	return (0);
}

/*
 * Common function for unmapping DMA-safe memory.  May be called by
 * bus-specific DMA memory unmapping functions.
 */
void
_bus_dmamem_unmap(t, kva, size)
	bus_dma_tag_t t;
	caddr_t kva;
	size_t size;
{

#ifdef DIAGNOSTIC
	if ((u_long)kva & PGOFSET)
		panic("_bus_dmamem_unmap");
#endif

	/*
	 * Nothing to do if we mapped it with K0SEG.
	 */
	if (kva >= (caddr_t)ALPHA_K0SEG_BASE &&
	    kva <= (caddr_t)ALPHA_K0SEG_END)
		return;

	km_free(kva, round_page(size), &kv_any, &kp_none);
}

/*
 * Common function for mmap(2)'ing DMA-safe memory.  May be called by
 * bus-specific DMA mmap(2)'ing functions.
 */
paddr_t
_bus_dmamem_mmap(t, segs, nsegs, off, prot, flags)
	bus_dma_tag_t t;
	bus_dma_segment_t *segs;
	int nsegs;
	off_t off;
	int prot, flags;
{
	int i;

	for (i = 0; i < nsegs; i++) {
#ifdef DIAGNOSTIC
		if (off & PGOFSET)
			panic("_bus_dmamem_mmap: offset unaligned");
		if (segs[i].ds_addr & PGOFSET)
			panic("_bus_dmamem_mmap: segment unaligned");
		if (segs[i].ds_len & PGOFSET)
			panic("_bus_dmamem_mmap: segment size not multiple"
			    " of page size");
#endif
		if (off >= segs[i].ds_len) {
			off -= segs[i].ds_len;
			continue;
		}

		return (segs[i].ds_addr + off);
	}

	/* Page not found. */
	return (-1);
}
@


1.34
log
@Replace all queue *_END macro calls except CIRCLEQ_END with NULL.

CIRCLEQ_* is deprecated and not called in the tree.  The other queue types
have *_END macros which were added for symmetry with CIRCLEQ_END.  They are
defined as NULL.  There's no reason to keep the other *_END macro calls.

ok millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.33 2014/07/12 18:44:40 tedu Exp $ */
d614 2
a615 2
			    VM_PROT_READ | VM_PROT_WRITE, VM_PROT_READ |
			    VM_PROT_WRITE | PMAP_WIRED | PMAP_CANFAIL);
@


1.33
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.32 2014/07/11 09:36:25 mpi Exp $ */
d514 1
a514 1
	for (; m != TAILQ_END(&mlist); m = TAILQ_NEXT(m, pageq)) {
@


1.32
log
@Convert bus_dmamem_map(9) to km_alloc(9) in order to make it fail and
not sleep if the allocator cannot obtain a lock when BUS_DMA_NOWAIT is
specified.

idea and inputs from kettenis@@, ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.31 2011/06/23 20:44:38 ariane Exp $ */
d115 1
a115 1
	free(map, M_DEVBUF);
@


1.31
log
@Fix the error path in bus_dmamem_map.
As discussed on icb: remove the comment,
remove pmap_remove (uvm_km_free does that for us).

ok oga@@, deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.30 2010/12/26 15:40:58 miod Exp $ */
d586 1
d598 2
a599 3

	va = uvm_km_valloc(kernel_map, size);

d618 1
a618 1
				uvm_km_free(kernel_map, sva, ssize);
d651 1
a651 2
	size = round_page(size);
	uvm_km_free(kernel_map, (vaddr_t)kva, size);
@


1.30
log
@Kill pmap_phys_address(), and force every driver's mmap() routine to return
a physical address [more precisely, something suitable to pass to pmap_enter()'sphysical address argument].

This allows MI drivers to implement mmap() routines without having to know
about the pmap_phys_address() implementation and #ifdef obfuscation.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.29 2010/11/20 20:33:21 miod Exp $ */
a616 4
				/*
				 * Clean up after ourselves.
				 * XXX uvm_wait on WAITOK
				 */
d618 1
a618 1
				uvm_km_free(kernel_map, va, ssize);
@


1.29
log
@This is a first step towards getting rid of avail_start and avail_end in the
kernel, currently limited to low-hanging fruit: these variables were used
by bus_dma to specify the range in which to allocate memory, back when
uvm_pglistalloc() was stupid and would not walk the vm_physseg[].

Nowadays, except on some platforms for early initialization, these variables
are not used, or do not need to be global variables. Therefore:
- remove `extern' declarations of avail_start and avail_end (or close cousins,
  such as arm physical_start and physical_end) from files which no longer need
  to use them.
- make them local variables whenever possible.
- remove them when they are assigned to but no longer used.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.28 2010/04/10 13:46:12 oga Exp $ */
d688 1
a688 1
		return (atop(segs[i].ds_addr + off));
@


1.28
log
@pmap_extract() does the equivalent of vtophys if pmap_kernel(), so instead of
doing if (p != NULL) pmap_extract() else vtophys() in a loop, just do
pmap_extract unconditionally.

ok miod@@ (he found a typo, all hail miod!)
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.27 2010/03/29 19:21:58 oga Exp $ */
a51 2
extern paddr_t avail_start, avail_end;	/* from pmap.c */

d517 1
a517 1
		if (curaddr < avail_start || curaddr >= high) {
@


1.27
log
@PMAP_CANFAIL for bus_dmamem_map on all other architectures (and some
whitespace tweaks on i386 so that it matches).

ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.26 2009/04/20 00:42:05 oga Exp $ */
d140 1
d145 5
d157 1
a157 5
		if (p != NULL)
			pmap_extract(p->p_vmspace->vm_map.pmap, vaddr,
				&curaddr);
		else
			curaddr = vtophys(vaddr);
@


1.26
log
@Add a BUS_DMA_ZERO flag for bus_dmamem_alloc() to return zeroed memory.

Saves every damned driver calling bzero(), and continues the M_ZERO,
PR_ZERO symmetry.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.25 2009/04/14 16:01:04 oga Exp $ */
d582 2
a583 1
	vaddr_t va;
d585 1
a585 1
	int curseg;
d605 2
d613 12
a624 3
			pmap_enter(pmap_kernel(), va, addr,
			    VM_PROT_READ | VM_PROT_WRITE,
			    VM_PROT_READ | VM_PROT_WRITE | PMAP_WIRED);
@


1.25
log
@Convert the waitok field of uvm_pglistalloc to "flags", more will be added soon.

For the possibility of sleeping, the first two flags are UVM_PLA_WAITOK
and UVM_PLA_NOWAIT. It is an error not to show intention, so assert that
one of the two is provided. Switch over every caller in the tree to
using the appropriate flag.

ok art@@, ariane@@
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.24 2009/03/07 15:34:32 miod Exp $ */
d495 2
@


1.24
log
@When allocating memory in bus_dmamem_alloc() with uvm_pglistalloc(), do not
try to be smart for the address range, uvm_pglistalloc() is smart enough
nowadays.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.23 2008/06/26 05:42:08 ray Exp $ */
d486 1
a486 1
	int curseg, error;
d494 2
d498 1
a498 1
	    &mlist, nsegs, (flags & BUS_DMA_NOWAIT) == 0);
@


1.23
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.22 2007/10/02 00:59:12 krw Exp $ */
d464 1
a464 1
	    segs, nsegs, rsegs, flags, 0, trunc_page(avail_end)));
@


1.22
log
@Apply (with slight variants) this elimination of bzero() with M_ZERO:

-	if ((mapstore = malloc(mapsize, M_DEVBUF,
-	    (flags & BUS_DMA_NOWAIT) ? M_NOWAIT : M_WAITOK)) == NULL)
+	if ((mapstore = malloc(mapsize, M_DEVBUF, (flags & BUS_DMA_NOWAIT) ?
+	    (M_NOWAIT | M_ZERO) : (M_WAITOK | M_ZERO))) == NULL)
 		return (ENOMEM);

-	bzero(mapstore, mapsize);
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.21 2006/05/21 02:11:54 brad Exp $ */
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.21
log
@Check for stale flags in the DMA map.

From thorpej NetBSD
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.20 2006/05/21 02:00:08 brad Exp $ */
d93 2
a94 2
	if ((mapstore = malloc(mapsize, M_DEVBUF,
	    (flags & BUS_DMA_NOWAIT) ? M_NOWAIT : M_WAITOK)) == NULL)
a96 1
	bzero(mapstore, mapsize);
@


1.20
log
@- _bus_dmamap_load_buffer_direct_common -> _bus_dmamap_load_buffer_direct
- fix _bus_dmamap_load_(uio/mbuf)_direct panic messages.
- s/vm_page_alloc_memory/uvm_pglistalloc/ in panic message.

From NetBSD
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.19 2006/05/21 01:48:35 brad Exp $ */
d262 1
d303 1
d358 1
d435 1
@


1.19
log
@Fix a couple of comments.

From NetBSD
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.18 2006/05/12 20:48:19 brad Exp $ */
d55 1
a55 1
int	_bus_dmamap_load_buffer_direct_common(bus_dma_tag_t,
d135 1
a135 1
_bus_dmamap_load_buffer_direct_common(t, map, buf, buflen, p, flags,
d267 1
a267 1
	error = _bus_dmamap_load_buffer_direct_common(t, map, buf, buflen,
d305 1
a305 1
		panic("_bus_dmamap_load_mbuf_direct_common: no packet header");
d317 1
a317 1
		error = _bus_dmamap_load_buffer_direct_common(t, map,
d364 2
a365 1
			panic("_bus_dmamap_load_direct_common: USERSPACE but no proc");
d380 1
a380 1
		error = _bus_dmamap_load_buffer_direct_common(t, map,
d518 1
a518 1
			printf("vm_page_alloc_memory returned non-sensical"
@


1.18
log
@Keep track of which DMA window was actually used to map the
request (not always the passed in DMA tag if we try direct-map
and then fall back to sgmap-mapped).  Use the actual window
when performing dmamap_sync and dmamap_unload operations.

From NetBSD

ok martin@@
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.17 2006/04/13 14:41:08 brad Exp $ */
d284 1
a284 1
 * Like _bus_dmamap_load_direct_common(), but for mbufs.
d335 1
a335 1
 * Like _bus_dmamap_load_direct_common(), but for uios.
d399 1
a399 1
 * Like _bus_dmamap_load_direct_common(), but for raw memory.
@


1.17
log
@Use PAGE_SIZE rather than NBPG.

From NetBSD

ok martin@@ miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.16 2006/03/18 19:00:06 miod Exp $ */
d109 1
d272 1
d324 1
d388 1
d430 1
@


1.16
log
@In _bus_dmamem_alloc_range(), do not ignore the caller's ``high'' parameter.
Makes isadma much happier.

From NetBSD
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.15 2005/10/28 19:10:26 martin Exp $ */
d176 1
a176 1
		sgsize = NBPG - ((u_long)vaddr & PGOFSET);
d601 1
a601 1
		    addr += NBPG, va += NBPG, size -= NBPG) {
@


1.15
log
@no more Mach-macros
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.14 2004/12/25 23:02:23 miod Exp $ */
a487 2

	high = avail_end - PAGE_SIZE;
@


1.14
log
@Use list and queue macros where applicable to make the code easier to read;
no functional change.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.13 2004/11/09 19:17:00 claudio Exp $ */
d672 1
a672 1
		return (alpha_btop((caddr_t)segs[i].ds_addr + off));
@


1.13
log
@Do not map empty mbufs (m_len == 0) in bus_dmamap_load_mbuf() as these mappings
may disturb the dma as seen in ipw(4). Emtpy mbufs are at the beginning of the
mbuf chain and are as example a "side-effect" of a previous m_adj() call.
OK miod@@ mickey@@ jason@@ markus@@
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.12 2003/10/18 20:14:40 jmc Exp $ */
d504 1
a504 1
	m = mlist.tqh_first;
d508 1
a508 1
	m = m->pageq.tqe_next;
d510 1
a510 1
	for (; m != NULL; m = m->pageq.tqe_next) {
@


1.12
log
@typos from Jared Yanovich;
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.11 2002/10/07 18:35:56 mickey Exp $ */
d313 2
@


1.11
log
@this removes the functionality of adding allocated
pages into the queue already containing allocated pages.
breaks i386:setup_buffers() because of this.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.10 2002/10/06 22:06:15 art Exp $ */
d85 1
a85 1
	 * of ALLOCNOW notifes others that we've reserved these resources,
d642 1
a642 1
 * Common functin for mmap(2)'ing DMA-safe memory.  May be called by
@


1.10
log
@No more need to initialize the result list before uvm_pglistalloc.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.9 2002/03/14 01:26:26 millert Exp $ */
d492 1
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.8 2001/12/08 02:24:05 art Exp $ */
a491 1
	TAILQ_INIT(&mlist);
@


1.8
log
@Sprinkle pmap_update calls where relevant and some other
misc pmap usage fixes.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.7 2001/11/28 16:24:26 art Exp $ */
d55 1
a55 1
int	_bus_dmamap_load_buffer_direct_common __P((bus_dma_tag_t,
d57 1
a57 1
	    paddr_t *, int *, int));
@


1.8.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.8 2001/12/08 02:24:05 art Exp $ */
d55 1
a55 1
int	_bus_dmamap_load_buffer_direct_common(bus_dma_tag_t,
d57 1
a57 1
	    paddr_t *, int *, int);
@


1.8.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.8.2.1 2002/06/11 03:33:40 art Exp $ */
@


1.7
log
@more typedef zapping vm_page_t -> struct vm_page *
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.6 2001/11/06 19:53:13 miod Exp $ */
d609 1
@


1.6
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.5 2001/11/05 17:25:57 art Exp $ */
d480 1
a480 1
	vm_page_t m;    
d542 1
a542 1
	vm_page_t m;
@


1.5
log
@Switch everything to the new bus_dmamap_sync API.
Most work by Wilbern Cobb <vedge@@csoft.org> with some fixes from me, mickey@@
and drahn@@.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.4 2001/09/19 20:50:56 mickey Exp $ */
a49 1
#include <vm/vm.h>
@


1.4
log
@merge vm/vm_kern.h into uvm/uvm_extern.h; art@@ ok
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.3 2001/07/25 13:25:31 art Exp $ */
d432 1
a432 1
_bus_dmamap_sync(t, map, op)
d435 3
a437 1
	bus_dmasync_op_t op;
@


1.3
log
@Change the pmap_enter interface to merge access_type and the wired boolean
and arbitrary flags into one argument.

One new flag is PMAP_CANFAIL that tells pmap_enter that it can fail if there
are not enough resources to satisfy the request. If this flag is not passed,
pmap_enter should panic as it should have done before this change (XXX - many
pmaps are still not doing that).

Only i386 and alpha implement CANFAIL for now.

Includes uvm updates from NetBSD.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.2 2001/06/08 08:08:39 art Exp $ */
a50 1
#include <vm/vm_kern.h>
@


1.2
log
@Change the paddr_t pmap_extract(struct pmap *, vaddr_t) interface to
boolean_t pmap_extract(struct pmap *, vaddr_t, paddr_t *).
Matches NetBSD. Tested by various people on various platforms.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.1 2001/03/21 17:26:38 art Exp $ */
d605 2
a606 2
			    VM_PROT_READ | VM_PROT_WRITE, 1,
			    VM_PROT_READ | VM_PROT_WRITE);
@


1.1
log
@Move files from common to dev to be more like other archs
(and so that tab completion on "compile" works as on other archs. :))
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.2 2000/11/08 21:27:09 ericj Exp $ */
d161 2
a162 2
			curaddr = pmap_extract(p->p_vmspace->vm_map.pmap,
			    vaddr);
@


1.1.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.1 2001/03/21 17:26:38 art Exp $ */
@


1.1.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.1.2.1 2001/04/18 16:00:40 niklas Exp $ */
d161 2
a162 2
			pmap_extract(p->p_vmspace->vm_map.pmap, vaddr,
				&curaddr);
@


1.1.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.1.2.2 2001/07/04 10:14:32 niklas Exp $ */
d51 1
d605 2
a606 2
			    VM_PROT_READ | VM_PROT_WRITE,
			    VM_PROT_READ | VM_PROT_WRITE | PMAP_WIRED);
@


1.1.2.4
log
@Merge in -current
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d50 1
d432 1
a432 1
_bus_dmamap_sync(t, map, offset, len, op)
d435 1
a435 3
	bus_addr_t offset;
	bus_size_t len;
	int op;
@


1.1.2.5
log
@Merge in -current
@
text
@d1 1
a1 1
/* $OpenBSD: bus_dma.c,v 1.1.2.4 2001/11/13 21:00:49 niklas Exp $ */
d480 1
a480 1
	struct vm_page *m;    
d542 1
a542 1
	struct vm_page *m;
@


1.1.2.6
log
@Merge in trunk
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a608 1
	pmap_update(pmap_kernel());
@


1.1.2.7
log
@Merge in -current from about a week ago
@
text
@d55 1
a55 1
int	_bus_dmamap_load_buffer_direct_common(bus_dma_tag_t,
d57 1
a57 1
	    paddr_t *, int *, int);
@


1.1.2.8
log
@Merge of -current from two weeks ago into the SMP branch
@
text
@d85 1
a85 1
	 * of ALLOCNOW notifies others that we've reserved these resources,
d642 1
a642 1
 * Common function for mmap(2)'ing DMA-safe memory.  May be called by
@


