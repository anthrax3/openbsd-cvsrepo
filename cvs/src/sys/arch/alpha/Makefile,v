head	1.14;
access;
symbols
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.12.0.12
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.8
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.10
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.18
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.20
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.16
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.14
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.12
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.10
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.8
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.6
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.4
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.5.0.12
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.14
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.4.0.12
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.14
date	2017.01.22.03.27.31;	author tb;	state Exp;
branches;
next	1.13;
commitid	7xfCYX9g3lREuZZf;

1.13
date	2016.10.14.18.42.58;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	dUZQxi6w3YqAb6KQ;

1.12
date	2013.12.08.14.46.39;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.26.19.43.00;	author jasper;	state Exp;
branches;
next	1.10;

1.10
date	2010.11.12.17.11.43;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2010.11.03.20.08.02;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2010.05.31.22.21.43;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.24.20.12.02;	author uwe;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.06.11.16.47;	author pedro;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.15.21.29.16;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	99.12.30.17.31.45;	author deraadt;	state Exp;
branches
	1.4.2.1
	1.4.12.1;
next	1.3;

1.3
date	96.10.30.22.37.51;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.07.29.22.57.03;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.38;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.38;	author deraadt;	state Exp;
branches;
next	;

1.4.2.1
date	2003.03.27.22.29.47;	author niklas;	state Exp;
branches;
next	;

1.4.12.1
date	2002.10.29.00.28.00;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Introduce the KEEPKERNELS variable: if this is set either in mk.conf or
the environment, 'make cleandir' does not descend into kernel build
directories.  Thus, kernel object files survive 'make build' on slower
architectures.

WARNING:
If you set this variable, you run the risk of breaking 'make release':
Be sure to run 'make cleandir' from /sys/arch/$(machine)/compile before
doing 'make release'.  This issue will be addressed shortly.

requested by kettenis;
ok deraadt
@
text
@#	$OpenBSD: Makefile,v 1.13 2016/10/14 18:42:58 deraadt Exp $

.include <bsd.own.mk>    # for KEEPKERNELS

S=	${.CURDIR}/../..
KFILE=	GENERIC
.if exists(conf/GENERIC.MP)
KFILE=	GENERIC.MP
.endif
TDIRS=	${_arch} include pci isa eisa mcbus tc
TAGS=	${.CURDIR}/tags

NOPROG=
NOMAN=
NOOBJ=
SUBDIR=	stand
.if !defined(KEEPKERNELS) || !(make(clean) || make(cleandir))
SUBDIR+=compile
.endif

# config the fattest kernel we can find into a temporary dir
# to create a Makefile.  Then use make to pull some variables
# out and push them into the sub-shell to expand the paths,
# and finally run ctags.
tags::
	TDIR=`mktemp -d /tmp/_tagXXXXXXXXXX` || exit 1; \
	eval "S=${S}" && \
	config -s ${S} -b $${TDIR} ${.CURDIR}/conf/${KFILE} && \
	eval "_arch=\"`make -V _arch -f $${TDIR}/Makefile`\"" && \
	eval "_mach=\"`make -V _mach -f $${TDIR}/Makefile`\"" && \
	eval "_machdir=\$S/arch/$${_mach}" && \
	eval "_archdir=\$S/arch/$${_arch}" && \
	eval "HFILES=\"`find $S \( -path $S/'arch' -o -path $S/stand -o -path $S/lib/libsa -o -path $S'/lib/libkern/arch' \) -prune -o -name '*.h'; find $${_machdir} $${_archdir} $S/lib/libkern/arch/$${_mach} \( -name boot -o -name stand \) -prune -o -name '*.h'`\"" && \
	eval "SFILES=\"`make -V SFILES -f $${TDIR}/Makefile`\"" && \
	eval "CFILES=\"`make -V CFILES -f $${TDIR}/Makefile`\"" && \
	eval "AFILES=\"`make -V AFILES -f $${TDIR}/Makefile`\"" && \
	ctags -wd -f ${TAGS} $${CFILES} $${HFILES} && \
	egrep "^[_A-Z]*ENTRY[_A-Z]*\(.*\)" $${SFILES} $${AFILES} | \
	    sed "s;\\([^:]*\\):\\([^(]*\\)(\\([^, )]*\\)\\(.*\\);\\3	\\1	/^\\2(\\3\\4$$/;" \
	    >> ${TAGS} && \
	sort -o ${TAGS} ${TAGS} && \
	rm -rf $${TDIR}

links:
	-for i in conf ${TDIRS}; do \
	    (cd $$i && rm -f tags; ln -s tags tags); done

obj:	_SUBDIRUSE

.include <bsd.prog.mk>
@


1.13
log
@Kernel builds now happen in compile/CONFIG/obj@@ -> /usr/obj/... [or ./obj/,
if srctree is not rooted at /usr/src].  As a result, stock GENERIC & RAMDISK
kernels are commited to the tree, to ensure the src tree can be "readonly"
during builds, with all writes occuring inside the obj space.  config -b
options are handled by ../Makefile.inc.  The canonical new way to configure
one of these kernels is:
    % cd /sys/arch/amd64/compile/GENERIC.MP
    % doas make obj
    % make config
    % make
    % doas cp obj/bsd /bsd
The build infrastructure will use this new mechanism in a de-escalation
way using BUILDUSER.
Much help from natano and tb.
@
text
@d1 3
a3 1
#	$OpenBSD: Makefile,v 1.12 2013/12/08 14:46:39 espie Exp $
d16 4
a19 1
SUBDIR=	stand compile
@


1.12
log
@reflect reality, mark as NOOBJ
"sure" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.11 2013/03/26 19:43:00 jasper Exp $
d14 1
a14 1
SUBDIR=	stand
@


1.11
log
@sync TDIRS with reality

"looks good" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2010/11/12 17:11:43 deraadt Exp $
d13 1
@


1.10
log
@Push all potential (as in, all system MI not utilized by the bootblocks)
.h files into the ctags run as well to bring #define's and structs and
such into scope.  Problem reported by thib
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2010/11/03 20:08:02 deraadt Exp $
d8 1
a8 1
TDIRS=	${_arch} include pci isa eisa
@


1.9
log
@no need to specify the -t flag to ctags
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2010/05/31 22:21:43 deraadt Exp $
d27 1
d31 1
a31 1
	ctags -wd -f ${TAGS} $${CFILES} && \
@


1.8
log
@Completely rewrite the tags file creation process.  use config(8) against
a fat kernel (GERERIC or GENERIC.MP) into a temporary dir, then extract some
variables using make -V, and after some more singing and dancing use this
full and (more) correct list of files with ctags.  Don't read this code.
ok guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2007/10/22 01:26:31 deraadt Exp $
d30 1
a30 1
	ctags -wdt -f ${TAGS} $${CFILES} && \
@


1.7
log
@fix links target
@
text
@d1 1
a1 2
#	$OpenBSD: Makefile,v 1.6 2005/05/06 11:16:47 pedro Exp $
#	$NetBSD: Makefile,v 1.3 1995/02/27 16:36:07 cgd Exp $
d3 7
a9 7
# Makefile for alpha tags file and boot blocks

S=${.CURDIR}/../..
.include "$S/kern/Make.tags.inc"

NOPROG=	noprog
NOMAN=	noman
d11 2
d15 21
a35 17
TALPHA=	$S/arch/alpha/tags
SALPHA=	$S/arch/alpha/alpha/*.[ch] $S/arch/alpha/include/*.h \
	$S/arch/alpha/tc/*.[ch] $S/arch/alpha/dev/*.[ch] \
	$S/arch/alpha/eisa/*.[ch] $S/arch/alpha/isa/*.[ch] \
	$S/arch/alpha/pci/*.[ch]
AALPHA=	$S/arch/alpha/alpha/*.[sS] $S/arch/alpha/pci/*.[Ss] \
	$S/lib/libkern/arch/alpha/*.[sS]

# Directories in which to place alpha tags links
DALPHA=	alpha eisa isa dev pci tc include

tags:
	-ctags -wdtf ${TALPHA} ${COMM} ${SALPHA}
	egrep "^ENTRY(.*)|^ALTENTRY(.*)" ${AALPHA} | \
	    sed "s;\([^:]*\):\([^(]*\)(\([^, )]*\)\(.*\);\3	\1	/^\2(\3\4$$/;" \
		>> ${TALPHA}
	sort -o ${TALPHA} ${TALPHA}
d38 2
a39 2
	-for i in ${DALPHA}; do \
	    (cd $$i && { rm -f tags; ln -s ${TALPHA} tags; }) done
d41 1
a41 1
obj: _SUBDIRUSE
@


1.6
log
@generate vim-compatible tag files, from netbsd
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.5 2002/07/15 21:29:16 mickey Exp $
d34 1
a34 1
	    (cd $$i && rm -f tags; ln -s ${TALPHA} tags); done
@


1.5
log
@repair tags building (due to obj dirs in /sys)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 1999/12/30 17:31:45 deraadt Exp $
d28 1
a28 1
	    sed "s;\([^:]*\):\([^(]*\)(\([^, )]*\)\(.*\);\3 \1 /^\2(\3\4$$/;" \
@


1.4
log
@fix tags link; tdeval@@PrimeOBJ.COM
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 1996/10/30 22:37:51 niklas Exp $
d6 3
d14 7
a20 3
TALPHA=	../alpha/tags
SALPHA=	../alpha/alpha/*.[ch] ../alpha/include/*.h ../alpha/tc/*.[ch]
AALPHA=	../alpha/alpha/*.S
d23 1
a23 1
DALPHA=	tc include
d26 1
a26 1
	-ctags -dtf ${TALPHA} ${COMM} ${SALPHA}
d34 1
a34 1
	    (cd $$i && rm -f tags; ln -s ../tags tags); done
@


1.4.2.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
#	$OpenBSD$
a5 3
S=${.CURDIR}/../..
.include "$S/kern/Make.tags.inc"

d11 3
a13 7
TALPHA=	$S/arch/alpha/tags
SALPHA=	$S/arch/alpha/alpha/*.[ch] $S/arch/alpha/include/*.h \
	$S/arch/alpha/tc/*.[ch] $S/arch/alpha/dev/*.[ch] \
	$S/arch/alpha/eisa/*.[ch] $S/arch/alpha/isa/*.[ch] \
	$S/arch/alpha/pci/*.[ch]
AALPHA=	$S/arch/alpha/alpha/*.[sS] $S/arch/alpha/pci/*.[Ss] \
	$S/lib/libkern/arch/alpha/*.[sS]
d16 1
a16 1
DALPHA=	alpha eisa isa dev pci tc include
d19 1
a19 1
	-ctags -wdtf ${TALPHA} ${COMM} ${SALPHA}
d27 1
a27 1
	    (cd $$i && rm -f tags; ln -s ${TALPHA} tags); done
@


1.4.12.1
log
@sync to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 1999/12/30 17:31:45 deraadt Exp $
a5 3
S=${.CURDIR}/../..
.include "$S/kern/Make.tags.inc"

d11 3
a13 7
TALPHA=	$S/arch/alpha/tags
SALPHA=	$S/arch/alpha/alpha/*.[ch] $S/arch/alpha/include/*.h \
	$S/arch/alpha/tc/*.[ch] $S/arch/alpha/dev/*.[ch] \
	$S/arch/alpha/eisa/*.[ch] $S/arch/alpha/isa/*.[ch] \
	$S/arch/alpha/pci/*.[ch]
AALPHA=	$S/arch/alpha/alpha/*.[sS] $S/arch/alpha/pci/*.[Ss] \
	$S/lib/libkern/arch/alpha/*.[sS]
d16 1
a16 1
DALPHA=	alpha eisa isa dev pci tc include
d19 1
a19 1
	-ctags -wdtf ${TALPHA} ${COMM} ${SALPHA}
d27 1
a27 1
	    (cd $$i && rm -f tags; ln -s ${TALPHA} tags); done
@


1.3
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 1995/02/27 16:36:07 cgd Exp $
d27 1
a27 1
	    cd $$i && rm -f tags; ln -s ../tags tags; done
@


1.2
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
