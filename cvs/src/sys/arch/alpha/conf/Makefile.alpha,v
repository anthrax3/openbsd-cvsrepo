head	1.105;
access;
symbols
	OPENBSD_6_1:1.95.0.4
	OPENBSD_6_1_BASE:1.95
	OPENBSD_6_0:1.88.0.2
	OPENBSD_6_0_BASE:1.88
	OPENBSD_5_9:1.87.0.4
	OPENBSD_5_9_BASE:1.87
	OPENBSD_5_8:1.87.0.6
	OPENBSD_5_8_BASE:1.87
	OPENBSD_5_7:1.87.0.2
	OPENBSD_5_7_BASE:1.87
	OPENBSD_5_6:1.83.0.4
	OPENBSD_5_6_BASE:1.83
	OPENBSD_5_5:1.82.0.4
	OPENBSD_5_5_BASE:1.82
	OPENBSD_5_4:1.81.0.2
	OPENBSD_5_4_BASE:1.81
	OPENBSD_5_3:1.79.0.2
	OPENBSD_5_3_BASE:1.79
	OPENBSD_5_2:1.77.0.4
	OPENBSD_5_2_BASE:1.77
	OPENBSD_5_1_BASE:1.77
	OPENBSD_5_1:1.77.0.2
	OPENBSD_5_0:1.76.0.2
	OPENBSD_5_0_BASE:1.76
	OPENBSD_4_9:1.73.0.2
	OPENBSD_4_9_BASE:1.73
	OPENBSD_4_8:1.70.0.2
	OPENBSD_4_8_BASE:1.70
	OPENBSD_4_7:1.47.0.2
	OPENBSD_4_7_BASE:1.47
	OPENBSD_4_6:1.44.0.6
	OPENBSD_4_6_BASE:1.44
	OPENBSD_4_5:1.44.0.2
	OPENBSD_4_5_BASE:1.44
	OPENBSD_4_4:1.43.0.2
	OPENBSD_4_4_BASE:1.43
	OPENBSD_4_3:1.42.0.2
	OPENBSD_4_3_BASE:1.42
	OPENBSD_4_2:1.39.0.2
	OPENBSD_4_2_BASE:1.39
	OPENBSD_4_1:1.38.0.4
	OPENBSD_4_1_BASE:1.38
	OPENBSD_4_0:1.38.0.2
	OPENBSD_4_0_BASE:1.38
	OPENBSD_3_9:1.36.0.2
	OPENBSD_3_9_BASE:1.36
	OPENBSD_3_8:1.35.0.2
	OPENBSD_3_8_BASE:1.35
	OPENBSD_3_7:1.34.0.2
	OPENBSD_3_7_BASE:1.34
	OPENBSD_3_6:1.32.0.4
	OPENBSD_3_6_BASE:1.32
	SMP_SYNC_A:1.32
	SMP_SYNC_B:1.32
	OPENBSD_3_5:1.32.0.2
	OPENBSD_3_5_BASE:1.32
	OPENBSD_3_4:1.31.0.2
	OPENBSD_3_4_BASE:1.31
	UBC_SYNC_A:1.29
	OPENBSD_3_3:1.27.0.2
	OPENBSD_3_3_BASE:1.27
	OPENBSD_3_2:1.25.0.2
	OPENBSD_3_2_BASE:1.25
	OPENBSD_3_1:1.23.0.2
	OPENBSD_3_1_BASE:1.23
	UBC_SYNC_B:1.25
	UBC:1.22.0.4
	UBC_BASE:1.22
	OPENBSD_3_0:1.22.0.2
	OPENBSD_3_0_BASE:1.22
	OPENBSD_2_9:1.19.0.2
	OPENBSD_2_9_BASE:1.19
	OPENBSD_2_8:1.17.0.12
	OPENBSD_2_8_BASE:1.17
	OPENBSD_2_7:1.17.0.10
	OPENBSD_2_7_BASE:1.17
	SMP:1.17.0.8
	SMP_BASE:1.17
	kame_19991208:1.17
	OPENBSD_2_6:1.17.0.6
	OPENBSD_2_6_BASE:1.17
	OPENBSD_2_5:1.17.0.4
	OPENBSD_2_5_BASE:1.17
	OPENBSD_2_4:1.17.0.2
	OPENBSD_2_4_BASE:1.17
	OPENBSD_2_3:1.16.0.2
	OPENBSD_2_3_BASE:1.16
	OPENBSD_2_2:1.15.0.2
	OPENBSD_2_2_BASE:1.15
	OPENBSD_2_1:1.13.0.2
	OPENBSD_2_1_BASE:1.13
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.105
date	2017.07.16.16.47.06;	author visa;	state Exp;
branches;
next	1.104;
commitid	DJI7cWKgRtc5pA4A;

1.104
date	2017.06.29.16.51.35;	author espie;	state Exp;
branches;
next	1.103;
commitid	aLZBh2QedXJF67Iu;

1.103
date	2017.06.25.14.02.21;	author deraadt;	state Exp;
branches;
next	1.102;
commitid	6ubMSsuFvcb59SX4;

1.102
date	2017.06.22.16.01.45;	author deraadt;	state Exp;
branches;
next	1.101;
commitid	NU9rSPp0mUySxS04;

1.101
date	2017.06.13.16.40.00;	author deraadt;	state Exp;
branches;
next	1.100;
commitid	IBnCjqwIAePNl11k;

1.100
date	2017.06.11.22.51.21;	author deraadt;	state Exp;
branches;
next	1.99;
commitid	aJQfgtCEBEOL2P4T;

1.99
date	2017.06.11.20.50.32;	author bluhm;	state Exp;
branches;
next	1.98;
commitid	UEZLHpDQ2LYKTb3D;

1.98
date	2017.06.05.17.49.06;	author deraadt;	state Exp;
branches;
next	1.97;
commitid	wXtA3KPnBnlZZwY8;

1.97
date	2017.06.05.12.43.57;	author deraadt;	state Exp;
branches;
next	1.96;
commitid	wfRVAv0JN8rqN4EA;

1.96
date	2017.06.03.22.21.33;	author deraadt;	state Exp;
branches;
next	1.95;
commitid	SGp9KIY6OZAZGoKD;

1.95
date	2016.11.29.09.08.34;	author mpi;	state Exp;
branches;
next	1.94;
commitid	yUJbDchhkVm6F1HA;

1.94
date	2016.11.15.09.08.37;	author natano;	state Exp;
branches;
next	1.93;
commitid	uQeojuKIzgIWOEnv;

1.93
date	2016.10.27.20.44.19;	author natano;	state Exp;
branches;
next	1.92;
commitid	eR4vLZnymgQjVxbj;

1.92
date	2016.10.24.18.26.17;	author deraadt;	state Exp;
branches;
next	1.91;
commitid	84F8eQ949AbxN83e;

1.91
date	2016.10.15.13.45.08;	author deraadt;	state Exp;
branches;
next	1.90;
commitid	TtDw6IYffbT8oPEE;

1.90
date	2016.10.14.18.43.01;	author deraadt;	state Exp;
branches;
next	1.89;
commitid	dUZQxi6w3YqAb6KQ;

1.89
date	2016.09.24.19.13.03;	author kettenis;	state Exp;
branches;
next	1.88;
commitid	N8Z5nlTJHj3pmauV;

1.88
date	2016.04.29.12.44.52;	author mpi;	state Exp;
branches;
next	1.87;
commitid	Vbd8R29nZBKG6KtM;

1.87
date	2015.01.13.01.12.48;	author deraadt;	state Exp;
branches;
next	1.86;
commitid	xEYSgcMiEU7N21VE;

1.86
date	2015.01.11.19.25.13;	author tedu;	state Exp;
branches;
next	1.85;
commitid	Jqptj5xcqx8IMSNU;

1.85
date	2014.11.18.01.17.36;	author deraadt;	state Exp;
branches;
next	1.84;
commitid	Qj1gzxwenHvm4gTb;

1.84
date	2014.10.04.18.10.14;	author brad;	state Exp;
branches;
next	1.83;
commitid	iaz4yUwbbR9oynrV;

1.83
date	2014.05.08.20.46.49;	author miod;	state Exp;
branches;
next	1.82;

1.82
date	2013.10.15.19.23.25;	author guenther;	state Exp;
branches;
next	1.81;

1.81
date	2013.06.23.20.33.51;	author miod;	state Exp;
branches;
next	1.80;

1.80
date	2013.03.30.07.25.20;	author tedu;	state Exp;
branches;
next	1.79;

1.79
date	2012.08.28.21.03.32;	author pascal;	state Exp;
branches;
next	1.78;

1.78
date	2012.08.22.16.58.26;	author pascal;	state Exp;
branches;
next	1.77;

1.77
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.76;

1.76
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.75;

1.75
date	2011.07.06.02.08.04;	author tedu;	state Exp;
branches;
next	1.74;

1.74
date	2011.04.15.02.41.27;	author guenther;	state Exp;
branches;
next	1.73;

1.73
date	2010.12.30.18.49.29;	author deraadt;	state Exp;
branches;
next	1.72;

1.72
date	2010.12.02.20.57.06;	author deraadt;	state Exp;
branches;
next	1.71;

1.71
date	2010.12.02.04.35.00;	author deraadt;	state Exp;
branches;
next	1.70;

1.70
date	2010.06.01.23.49.20;	author deraadt;	state Exp;
branches;
next	1.69;

1.69
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.68;

1.68
date	2010.05.25.17.27.54;	author deraadt;	state Exp;
branches;
next	1.67;

1.67
date	2010.05.25.15.04.59;	author deraadt;	state Exp;
branches;
next	1.66;

1.66
date	2010.05.25.02.35.01;	author deraadt;	state Exp;
branches;
next	1.65;

1.65
date	2010.05.24.23.19.20;	author deraadt;	state Exp;
branches;
next	1.64;

1.64
date	2010.05.24.17.49.36;	author deraadt;	state Exp;
branches;
next	1.63;

1.63
date	2010.05.24.14.59.14;	author deraadt;	state Exp;
branches;
next	1.62;

1.62
date	2010.05.23.15.30.54;	author deraadt;	state Exp;
branches;
next	1.61;

1.61
date	2010.04.28.15.47.41;	author deraadt;	state Exp;
branches;
next	1.60;

1.60
date	2010.04.28.15.31.31;	author deraadt;	state Exp;
branches;
next	1.59;

1.59
date	2010.04.27.17.25.19;	author drahn;	state Exp;
branches;
next	1.58;

1.58
date	2010.04.27.16.54.52;	author deraadt;	state Exp;
branches;
next	1.57;

1.57
date	2010.04.27.16.50.14;	author jsg;	state Exp;
branches;
next	1.56;

1.56
date	2010.04.27.06.46.25;	author deraadt;	state Exp;
branches;
next	1.55;

1.55
date	2010.04.27.05.07.28;	author deraadt;	state Exp;
branches;
next	1.54;

1.54
date	2010.04.27.05.05.20;	author deraadt;	state Exp;
branches;
next	1.53;

1.53
date	2010.04.27.04.31.45;	author deraadt;	state Exp;
branches;
next	1.52;

1.52
date	2010.04.27.03.41.54;	author deraadt;	state Exp;
branches;
next	1.51;

1.51
date	2010.04.26.22.21.14;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2010.04.26.22.11.36;	author deraadt;	state Exp;
branches;
next	1.49;

1.49
date	2010.04.26.20.50.15;	author deraadt;	state Exp;
branches;
next	1.48;

1.48
date	2010.04.26.18.58.29;	author deraadt;	state Exp;
branches;
next	1.47;

1.47
date	2009.10.19.19.46.56;	author guenther;	state Exp;
branches;
next	1.46;

1.46
date	2009.09.24.19.51.32;	author miod;	state Exp;
branches;
next	1.45;

1.45
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.44;

1.44
date	2009.01.11.21.02.03;	author pirofti;	state Exp;
branches;
next	1.43;

1.43
date	2008.04.12.21.04.15;	author miod;	state Exp;
branches;
next	1.42;

1.42
date	2007.11.30.07.52.02;	author miod;	state Exp;
branches;
next	1.41;

1.41
date	2007.11.25.18.25.25;	author deraadt;	state Exp;
branches;
next	1.40;

1.40
date	2007.11.25.11.23.33;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2007.07.30.16.23.33;	author thib;	state Exp;
branches;
next	1.38;

1.38
date	2006.07.27.05.58.09;	author miod;	state Exp;
branches;
next	1.37;

1.37
date	2006.06.01.21.46.27;	author pascoe;	state Exp;
branches;
next	1.36;

1.36
date	2006.02.23.23.54.59;	author miod;	state Exp;
branches;
next	1.35;

1.35
date	2005.06.17.21.53.06;	author miod;	state Exp;
branches;
next	1.34;

1.34
date	2004.11.19.06.41.12;	author miod;	state Exp;
branches;
next	1.33;

1.33
date	2004.10.06.14.52.17;	author miod;	state Exp;
branches;
next	1.32;

1.32
date	2003.11.21.17.53.19;	author espie;	state Exp;
branches;
next	1.31;

1.31
date	2003.07.22.19.39.50;	author otto;	state Exp;
branches;
next	1.30;

1.30
date	2003.05.23.22.16.16;	author tedu;	state Exp;
branches;
next	1.29;

1.29
date	2003.05.13.22.45.06;	author miod;	state Exp;
branches;
next	1.28;

1.28
date	2003.05.13.06.12.43;	author tedu;	state Exp;
branches;
next	1.27;

1.27
date	2002.12.25.21.10.23;	author miod;	state Exp;
branches;
next	1.26;

1.26
date	2002.12.02.09.00.21;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2002.08.09.20.24.41;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2002.06.22.14.05.51;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2001.12.24.23.12.12;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2001.09.14.14.50.33;	author art;	state Exp;
branches
	1.22.4.1;
next	1.21;

1.21
date	2001.07.15.13.10.46;	author assar;	state Exp;
branches;
next	1.20;

1.20
date	2001.05.11.09.46.02;	author art;	state Exp;
branches;
next	1.19;

1.19
date	2001.01.16.15.31.52;	author art;	state Exp;
branches;
next	1.18;

1.18
date	2000.11.07.21.54.45;	author art;	state Exp;
branches;
next	1.17;

1.17
date	98.07.01.01.11.12;	author deraadt;	state Exp;
branches
	1.17.8.1;
next	1.16;

1.16
date	98.03.03.22.34.40;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	97.09.15.02.40.24;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	97.07.06.01.34.35;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	97.04.20.10.57.23;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	97.04.19.21.12.51;	author tholo;	state Exp;
branches;
next	1.11;

1.11
date	97.02.26.16.30.58;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	97.01.24.19.56.58;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	96.12.08.00.20.21;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	96.10.30.22.38.41;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.07.29.20.01.25;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.06.24.16.39.57;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.06.18.09.42.54;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.03.26.15.09.37;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	95.12.14.03.52.57;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.13.06.49.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.41;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.41;	author deraadt;	state Exp;
branches;
next	;

1.17.8.1
date	2001.04.18.16.00.36;	author niklas;	state Exp;
branches;
next	1.17.8.2;

1.17.8.2
date	2001.07.04.10.14.27;	author niklas;	state Exp;
branches;
next	1.17.8.3;

1.17.8.3
date	2001.10.31.02.52.44;	author nate;	state Exp;
branches;
next	1.17.8.4;

1.17.8.4
date	2002.03.06.00.47.43;	author niklas;	state Exp;
branches;
next	1.17.8.5;

1.17.8.5
date	2003.03.27.23.18.06;	author niklas;	state Exp;
branches;
next	1.17.8.6;

1.17.8.6
date	2003.05.16.00.29.38;	author niklas;	state Exp;
branches;
next	1.17.8.7;

1.17.8.7
date	2003.06.07.11.11.33;	author ho;	state Exp;
branches;
next	1.17.8.8;

1.17.8.8
date	2004.02.19.09.59.34;	author niklas;	state Exp;
branches;
next	;

1.22.4.1
date	2002.01.31.22.55.05;	author niklas;	state Exp;
branches;
next	1.22.4.2;

1.22.4.2
date	2002.10.29.00.28.00;	author art;	state Exp;
branches;
next	1.22.4.3;

1.22.4.3
date	2003.05.19.21.38.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.105
log
@Pass the linker from make environment to makegap.sh. This is (only)
a partial solution to cross compiling the kernel with KARL.

OK deraadt@@ a while ago
@
text
@#	$OpenBSD: Makefile.alpha,v 1.104 2017/06/29 16:51:35 espie Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	strip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I${.OBJDIR} -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-main -Wno-uninitialized -Wno-pointer-sign \
		-Wframe-larger-than=2047

CMACHFLAGS=	-mno-fp-regs -Wa,-mev56
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc ${NOPIE_FLAGS}
SORTR=		sort -R
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
.if ${IDENT:M-DSMALL_KERNEL}
SORTR=		cat
.endif

DEBUG?=		-g
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CWARNFLAGS} ${CMACHFLAGS}
LINKFLAGS=	-T ld.script -X -N -G 4 --warn-common -nopie

.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore0.o gap.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS} param.o ioconf.o
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ld.script
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		umask 007; \
		echo ${OBJS} param.o ioconf.o vers.o | tr " " "\n" | ${SORTR} > lorder; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} `cat lorder`
SYSTEM_LD_TAIL=	@@${SIZE} $@@

.if ${DEBUG} == "-g"
STRIPFLAGS=	-S
SYSTEM_LD_TAIL+=; umask 007; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

ld.script: ${_machdir}/conf/ld.script
	cp ${_machdir}/conf/ld.script $@@

makegap.sh:
	cp $S/conf/makegap.sh $@@

gap.o:	Makefile makegap.sh
	LD="${LD}" sh makegap.sh 0x00000000

vers.o: ${SYSTEM_DEP:Ngap.o}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

clean:
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} \
	    gap.link ld.script lorder makegap.sh param.c

cleandir: clean
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c

depend obj:

db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

locore0.o: ${_machdir}/${_mach}/locore0.S assym.h
locore.o: ${_machdir}/${_mach}/locore.s assym.h

newinstall:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	umask 077 && cp bsd /nbsd && mv /nbsd /bsd && \
	    sha256 -h /var/db/kernel.SHA256 /bsd

install: update-link newinstall

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif

%RULES
@


1.104
log
@put SYSTEM_SWAP_DEP out of its misery, it died in 1997, along with config.old
"go for it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.103 2017/06/25 14:02:21 deraadt Exp $
d128 1
a128 1
	sh makegap.sh 0x00000000
@


1.103
log
@dull dependency for copying makegap.sh to obj, so that installs
without src and comp work.  That is what we've designed for, but since
we always have src and comp on our systems it is so easy to slide...
problem first noted by rpe.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.102 2017/06/22 16:01:45 deraadt Exp $
d130 1
a130 1
vers.o: ${SYSTEM_DEP:Ngap.o} ${SYSTEM_SWAP_DEP}
@


1.102
log
@Generate a gap.link script, and use that to generate gap.o.  On multi-ABI
architectures we must also link against a gapdummy.o to repair the ABI
of the resulting .o file.  Woe is me.
Also repair install: target to update the linkkit & hash when a kernel
is installed.
ok rpe tb mlarkin and tested by others also
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.101 2017/06/13 16:40:00 deraadt Exp $
d124 1
a124 1
makegap.sh: $S/conf/makegap.sh
@


1.101
log
@newbsd: target which re-links a kernel.  We cannot use the bsd: target
since it has source dependencies, and relinking doesn't have any.  Also
the bsd: target is created by config(8)...
worked on with rpe.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.100 2017/06/11 22:51:21 deraadt Exp $
a95 6
newbsd:
	${SYSTEM_LD_HEAD}
	${SYSTEM_LD} swapgeneric.o
	${SYSTEM_LD_TAIL}
	mv -f newbsd bsd

d124 6
a133 6
gap.S:	${SYSTEM_SWAP_DEP} Makefile
	umask 007; sh $S/conf/makegap.sh 0x00 > gap.S

gap.o:	gap.S
	umask 007; ${CC} ${AFLAGS} ${CPPFLAGS} ${PROF} -c gap.S

d136 1
a136 1
	    gap.S lorder param.c
d151 1
a151 6
# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
d153 4
a156 3
	umask 077; cp bsd /nbsd
	mv /nbsd /bsd
.endif
@


1.100
log
@make vers.o not depend on gap.o using a trick, because it is piece of
fiction participating only in the linkphase.
tricks from rpe and espie
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.99 2017/06/11 20:50:32 bluhm Exp $
d95 6
@


1.99
log
@Use umask 077 instead of cp -p when installing the kernel as root.
Otherwise owner of /bsd could be the build user with permissions
inherited from the compile directory.
OK deraadt@@ tb@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.98 2017/06/05 17:49:06 deraadt Exp $
d124 1
a124 1
vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.98
log
@Split early startup code out of locore.S into locore0.S.  Adjust link
run so that this locore0.o is always at the start of the executable.
But randomize the link order of all other .o files in the kernel, so
that their exec/rodata/data/bss segments land all over the place.

Late during kernel boot, smash the startup code with traps so that
it does not point to the other randomly placed code.  It has be smashed,
because alpha (insecurely in my view) runs in the KSEG0 space.

As a result, the internal layout of every newly build bsd kernel is
different from past kernels.  Internal relative offsets are not known
to an outside attacker.  The only known offsets are in the startup code,
which is gone.

Ramdisk kernels cannot be compiled like this, because they are gzip'd.
When the internal pointer references change, the compression dictionary
bloats and results in poorer compression.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.97 2017/06/05 12:43:57 deraadt Exp $
d158 1
a158 1
	cp -p bsd /nbsd
@


1.97
log
@The arm* architectures edit the ld.script, creating a copy in the compile
directories.  Copy it in the same way on other architectures, for the same
effect.  Something upcoming will want that file there anyways.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.96 2017/06/03 22:21:33 deraadt Exp $
d34 1
d38 3
d74 2
a75 2
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
d80 2
a81 1
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
d128 6
d135 2
a136 1
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} param.c
d148 1
d158 1
a158 1
	cp bsd /nbsd
@


1.96
log
@Create gap.S and gap.o with umask 077.  Create lorder and bsd* with umask 007.
Prying eyes cannot look at the kernels in the compile directory.
ok tb rpe, kernel developers seem unimpacted
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.95 2016/11/29 09:08:34 mpi Exp $
d42 1
a42 2
LDSCRIPT=	${_machdir}/conf/ld.script
LINKFLAGS=	-T ${LDSCRIPT} -X -N -G 4 --warn-common -nopie
d72 1
a72 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ${LDSCRIPT}
d115 3
@


1.95
log
@Build kernel with DEBUG=-g by default.

This will allow us to extract type informations from DWARF2 sections.  It
also makes developer life easier as debug information are now included in
every object.

Resulting kernels will be stripped using strip(1) instead of ld(1).

Kernel build time increases by approximately 10%.  However it is still
possible to disable this by defining DEBUG="".

ok kettenis@@, bluhm@@, natano@@, jasper@@, reyk@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.94 2016/11/15 09:08:37 natano Exp $
d76 1
d78 1
a78 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
d82 1
a82 1
SYSTEM_LD_TAIL+=; \
@


1.94
log
@Clean up the kernel Makefile's:

- Remove the 'lint' target. lint has been removed with OpenBSD 5.2.
- Remove the 'tags' target. It does nothing of value.
- Replace 'clean::' with 'clean:', as requested by espie and millert,
  and remove files from the 'clean' target, that are never generated.
- Don't create a file called 'depend' in 'make depend', but just do
  nothing instead.

ok mpi tb
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.93 2016/10/27 20:44:19 natano Exp $
d38 1
a78 1
DEBUG?=
@


1.93
log
@We don't generate an eddep script for kernel builds nowadays. The last
reference to eddep in the kernel Makefile I could find is in 4.3BSD,
released some 30 years ago.

ok tb millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.92 2016/10/24 18:26:17 deraadt Exp $
d120 2
a121 3
clean::
	rm -f *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.* ${DB_STRUCTINFO} param.c
d126 1
a126 12
lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

obj:

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"
@


1.92
log
@make cleandir should skip the version file; ok otto millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.91 2016/10/15 13:45:08 deraadt Exp $
d121 1
a121 1
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
@


1.91
log
@cleandir: target for kernel compile directories
ok natano
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.90 2016/10/14 18:43:01 deraadt Exp $
d125 1
a125 1
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c version
@


1.90
log
@Kernel builds now happen in compile/CONFIG/obj@@ -> /usr/obj/... [or ./obj/,
if srctree is not rooted at /usr/src].  As a result, stock GENERIC & RAMDISK
kernels are commited to the tree, to ensure the src tree can be "readonly"
during builds, with all writes occuring inside the obj space.  config -b
options are handled by ../Makefile.inc.  The canonical new way to configure
one of these kernels is:
    % cd /sys/arch/amd64/compile/GENERIC.MP
    % doas make obj
    % make config
    % make
    % doas cp obj/bsd /bsd
The build infrastructure will use this new mechanism in a de-escalation
way using BUILDUSER.
Much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.89 2016/09/24 19:13:03 kettenis Exp $
d122 4
a125 1
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}
@


1.89
log
@Add -Wno-pointer-sign to all our gcc4 architectures.

ok patrick@@ (for armv7), deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.88 2016/04/29 12:44:52 mpi Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I$S -I. -I$S/arch
d128 2
@


1.88
log
@Do not remove local symbols from the table.

ddb(4) can now see static functions.  That doesn't mean we should start
declaring functions as ``static'', however it helps for the few existing
exceptions.

ok deraadt@@, kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.87 2015/01/13 01:12:48 deraadt Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized \
@


1.87
log
@for the install: target, use cmp as a rough attempt for avoiding repeated
make install
from Simon Nicolussi
ok jsing tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.86 2015/01/11 19:25:13 tedu Exp $
d80 1
a80 2
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
d86 1
a86 1
LINKFLAGS+=	-S -x
@


1.86
log
@switch prototype warnings to implicit-declaration warnings.
This should catch all the same bad cases, but be a little less aggravating
in circumstances where a prototype isn't necessary
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.85 2014/11/18 01:17:36 deraadt Exp $
d149 1
a149 2
	rm -f /obsd
	ln /bsd /obsd
@


1.85
log
@(except for the arm architectures...) unify the way the ld.script is
used and depended, mimicking new changes by guenther to amd64.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.84 2014/10/04 18:10:14 brad Exp $
d26 1
a26 1
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
@


1.84
log
@Switch the kernel configs over to using -Wframe-larger-than= instead of
-Wstack-larger-than-. This is what modern GCC supports as well as LLVM.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.83 2014/05/08 20:46:49 miod Exp $
d41 2
a42 1
LINKFLAGS=	-T ${_machdir}/conf/ld.script -X -N -G 4 --warn-common -nopie
d72 1
a72 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
@


1.83
log
@Format string fixes for alpha kernels, and remove -Wno-format
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.82 2013/10/15 19:23:25 guenther Exp $
d28 1
a28 1
		-Wstack-larger-than-2047
@


1.82
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.81 2013/06/23 20:33:51 miod Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-format \
@


1.81
log
@Stop using -traditional-cpp on gcc3/4 platforms.

Add CWARNFLAGS to the command line when using -xassembler-with-cpp. We are
mostly interested in -Werror here.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.80 2013/03/30 07:25:20 tedu Exp $
d135 1
a135 1
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
d137 1
a137 1
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
@


1.80
log
@reorder include search directories. cuts lookups by quite a bit.
ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.79 2012/08/28 21:03:32 pascal Exp $
d40 1
a40 1
AFLAGS=		-D_LOCORE -x assembler-with-cpp -traditional-cpp ${CMACHFLAGS}
@


1.79
log
@Add -nopie to LINKFLAGS on ELF architectures.  Note that this needs an
updated gcc and ld to understand the new -nopie flag.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.78 2012/08/22 16:58:26 pascal Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I. -I$S -I$S/arch
@


1.78
log
@Build the kernel with -fno-pie.  Just getting Ms out of my tree; this will be
cleaned up later.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.77 2011/11/08 18:41:34 matthieu Exp $
d41 1
a41 1
LINKFLAGS=	-T ${_machdir}/conf/ld.script -X -N -G 4 --warn-common
@


1.77
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.76 2011/07/07 22:28:18 guenther Exp $
d33 1
a33 1
		-fno-builtin-log2 -fno-builtin-malloc 
@


1.76
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.75 2011/07/06 02:08:04 tedu Exp $
a12 1
MKDEP?=	mkdep
@


1.75
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.74 2011/04/15 02:41:27 guenther Exp $
d160 5
a164 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.74
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.73 2010/12/30 18:49:29 deraadt Exp $
d122 1
a122 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.73
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.72 2010/12/02 20:57:06 deraadt Exp $
d26 1
a26 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL
d71 2
a72 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d92 5
d100 2
a101 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d130 3
a135 14
AFILES=	${_machdir}/${_mach}/locore.s
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d137 1
a137 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d153 12
@


1.72
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.71 2010/12/02 04:35:00 deraadt Exp $
d94 2
a95 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.71
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.70 2010/06/01 23:49:20 deraadt Exp $
d70 2
a71 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d73 2
a74 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.70
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.69 2010/05/28 14:27:08 guenther Exp $
d70 1
a70 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS}
d73 2
a74 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.69
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.68 2010/05/25 17:27:54 deraadt Exp $
d42 1
a42 2
LINKFLAGS=	-T ${_machdir}/conf/ld.script -X -N -G 4
STRIPFLAGS=	-g -x
d80 1
@


1.68
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.67 2010/05/25 15:04:59 deraadt Exp $
d94 1
a94 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.67
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.66 2010/05/25 02:35:01 deraadt Exp $
a21 2
_mach?=		alpha
_arch?=		alpha
@


1.66
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.65 2010/05/24 23:19:20 deraadt Exp $
a148 1
	${NORMAL_S}
@


1.65
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.64 2010/05/24 17:49:36 deraadt Exp $
a129 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d131 1
a131 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.64
log
@Unify the dependency time check for whether an architecture has SFILES
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.63 2010/05/24 14:59:14 deraadt Exp $
d31 1
a31 1
		-Wstack-larger-than-2047 -Wvariable-decl
d119 1
a119 1
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}
d129 2
a130 10
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

SRCS=	${_machdir}/${_mach}/locore.s \
	param.c ioconf.c ${CFILES} ${SFILES}
d133 1
a133 1
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/${_mach}/locore.s
@


1.63
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.62 2010/05/23 15:30:54 deraadt Exp $
d143 1
d145 1
@


1.62
log
@alpha does not need to -Dalpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.61 2010/04/28 15:47:41 deraadt Exp $
d29 2
a30 2
CDIAGFLAGS?=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
		-Wno-uninitialized -Wno-format -Wno-main \
d33 4
a36 2
CMACHFLAGS=	-mno-fp-regs -fno-builtin-printf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc -Wa,-mev56
d40 1
d42 2
a43 2
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-traditional -D_LOCORE
d53 1
a53 1
HOSTED_CC=	${CC}
d56 1
a56 3

# compile rules: rules are named ${TYPE}_${SUFFIX} where TYPE is NORMAL or
# HOSTED}, and SUFFIX is the file suffix, capitalized (e.g. C for a .c file).
d60 1
a60 3
NORMAL_S=	${CC} -xassembler-with-cpp ${AFLAGS} ${CPPFLAGS} -c $<

HOSTED_C=	${HOSTED_CC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<
d118 1
a118 1
	rm -f eddep *bsd bsd.gdb tags *.[io] [a-z]*.s \
d122 1
a122 1
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} -UKGDB \
@


1.61
log
@no need to depend on a file twice
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.60 2010/04/28 15:31:31 deraadt Exp $
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D${_mach}
@


1.60
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.59 2010/04/27 17:25:19 drahn Exp $
a117 1

d141 1
a141 1
.depend: ${SRCS} assym.h param.c ${_machdir}/${_mach}/cpuconf.c ${DB_STRUCTINFO}
d143 1
a143 2
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} ${_machdir}/${_mach}/cpuconf.c \
	    param.c ioconf.c ${CFILES}
@


1.59
log
@Killing a few more diffs for theo, arm makes #LINKFLAGS, beagle cleanup,
INCLUDE= common.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.58 2010/04/27 16:54:52 deraadt Exp $
d137 1
a137 1
	sh makelinks && rm -f dontlink
@


1.58
log
@Unifity CPPFLAGS= (using ${_mach}), SYSTEM_LD_TAIL= (always on one line),
and SRCS= (common files always after the \)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.57 2010/04/27 16:50:14 jsg Exp $
d27 1
a27 1
INCLUDES=	-I. -I$S -I$S/arch -nostdinc
@


1.57
log
@Disable builtin malloc and log2 on gcc3 arches, a no-op for gcc3
but required for gcc4.

ok kettenis@@ deraadt@@ marco@@, log2 suggested by robert@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.56 2010/04/27 06:46:25 deraadt Exp $
d28 1
a28 2
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -Dalpha

d139 2
a140 1
SRCS=	${_machdir}/${_mach}/locore.s param.c ioconf.c ${CFILES} ${SFILES}
@


1.56
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.55 2010/04/27 05:07:28 deraadt Exp $
d35 1
a35 1
		-Wa,-mev56
@


1.55
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.54 2010/04/27 05:05:20 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/alpha/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/alpha/conf/Makefile.alpha
# after which config should be rerun for all machines of that type.
@


1.54
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.53 2010/04/27 04:31:45 deraadt Exp $
a14 4
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

@


1.53
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.52 2010/04/27 03:41:54 deraadt Exp $
d151 1
a151 1
SRCS=	${_machdir}/alpha/locore.s param.c ioconf.c ${CFILES} ${SFILES}
d153 3
a155 3
.depend: ${SRCS} assym.h param.c ${_machdir}/alpha/cpuconf.c ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${_machdir}/alpha/locore.s
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} ${_machdir}/alpha/cpuconf.c \
d169 1
a169 1
locore.o: ${_machdir}/alpha/locore.s assym.h
@


1.52
log
@next phase: get rid of bogus dependencies on Makefile from the day when
people thought skipping "make depend" or "make clean" was acceptable
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.51 2010/04/26 22:21:14 deraadt Exp $
d159 1
a159 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.51
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.50 2010/04/26 22:11:36 deraadt Exp $
a168 14


# depend on root or device configuration
autoconf.o conf.o: Makefile

# depend on network or filesystem configuration
uipc_proto.o vfs_conf.o: Makefile

# depend on maxusers
machdep.o: Makefile

# depend on CPU configuration
clock.o machdep.o apecs.o cia.o lca.o ioasic.o scc.o icasic.o: Makefile

@


1.50
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.49 2010/04/26 20:50:15 deraadt Exp $
a33 1
_machdir?=	$S/arch/alpha
d35 2
a36 1
_archdir?=	$S/arch/alpha
@


1.49
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.48 2010/04/26 18:58:29 deraadt Exp $
d106 5
a110 3
assym.h: $S/kern/genassym.sh ${_machdir}/alpha/genassym.cf Makefile
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${_machdir}/alpha/genassym.cf > assym.h.tmp && \
d158 3
a160 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${_machdir}/alpha/genassym.cf
@


1.48
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.47 2009/10/19 19:46:56 guenther Exp $
d32 5
a36 1
ALPHA=	$S/arch/alpha
d53 1
a53 1
LINKFLAGS=	-T ${ALPHA}/conf/ld.script -X -N -G 4
d106 1
a106 1
assym.h: $S/kern/genassym.sh ${ALPHA}/alpha/genassym.cf Makefile
d108 1
a108 1
	    ${PARAM} < ${ALPHA}/alpha/genassym.cf > assym.h.tmp && \
d149 1
a149 1
SRCS=	${ALPHA}/alpha/locore.s param.c ioconf.c ${CFILES} ${SFILES}
d151 3
a153 3
.depend: ${SRCS} assym.h param.c ${ALPHA}/alpha/cpuconf.c ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${ALPHA}/alpha/locore.s
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} ${ALPHA}/alpha/cpuconf.c \
d157 1
a157 1
	    ${CPPFLAGS} < ${ALPHA}/alpha/genassym.cf
d181 1
a181 1
locore.o: ${ALPHA}/alpha/locore.s assym.h
@


1.47
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 1
a1 2
#	$OpenBSD: Makefile.alpha,v 1.46 2009/09/24 19:51:32 miod Exp $
#	$NetBSD: Makefile.alpha,v 1.27 1996/12/01 06:12:25 jonathan Exp $
a2 2
# Makefile for OpenBSD
#
d13 8
a20 2
# DEBUG is set to -g if debugging.
# PROF is set to -pg if profiling.
d46 1
a46 1
COPTS?= 	-O2
d166 3
a168 3
 
# depend on network or filesystem configuration 
uipc_proto.o vfs_conf.o: Makefile 
d173 1
a173 1
# depend on CPU configuration 
@


1.46
log
@Link alpha kernels with an ld.script to discard unwanted sections; this
allows us to no longer need to compile with -finhibit-size-directive, which
in turns allows the (future) use of !samegp relocations by as(1).
ok kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.45 2009/08/09 23:04:49 miod Exp $
d117 1
a117 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.45
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.44 2009/01/11 21:02:03 pirofti Exp $
d39 1
a39 1
		-finhibit-size-directive -Wa,-mev56
d46 2
a47 2
LINKFLAGS=	-N -Ttext fffffc0000230000 -e __start -G 4
STRIPFLAGS=	-g -X -x
@


1.44
log
@Fix a sed bug in the makefile's depend target.

What happened was that the output of mkdep was fed to a sed expression
that trimmed a bit more than required and also failed to work when
attempting to do make depend with pcc.

Example:

genassym_c.o: /tmp/genassym.whatever ../../../../../sys/param.h \

was changed to:

assym.h: \

but what was intended was:

assym.h: ../../../../../sys/param.h \

For the pcc -M output things were a bit different and after the make
depend the genassym entry would still remain and make would fail. This
affected all platforms except amd64 and sgi.

Okay miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.43 2008/04/12 21:04:15 miod Exp $
d49 6
d124 1
a124 1
	    [Ee]rrs linterrs makelinks assym.h
d144 1
a144 1
.depend: ${SRCS} assym.h param.c ${ALPHA}/alpha/cpuconf.c
d154 5
@


1.43
log
@Compile kernels with -Wvariable-decl (except on arches with ipmi, for now).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.42 2007/11/30 07:52:02 miod Exp $
d145 2
a146 1
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
@


1.42
log
@Define NORMAL_C_NOP everywhere.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.41 2007/11/25 18:25:25 deraadt Exp $
d36 1
a36 1
		-Wstack-larger-than-2047
@


1.41
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.40 2007/11/25 11:23:33 deraadt Exp $
d56 1
@


1.40
log
@Get rid of the kernel 'libcompat' framework, and instead use conf/files to
decide which files must be pulled into the kernel.  Also conditionalize
the pulling of those files based on the COMPAT_* options.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.39 2007/07/30 16:23:33 thib Exp $
a52 8
### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

d72 1
a72 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBKERN}
d103 3
@


1.39
log
@Shuffle the order in which we look for header files, when doing
kernel builds locally this doesnt change much but over NFS this
cuts about 12% of the build time on my setup (i386).

OK miod@@, deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.38 2006/07/27 05:58:09 miod Exp $
a60 8
### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

d80 1
a80 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
@


1.38
log
@Compile all kernels with -Wstack-usage-larger-than-2047, now that all
offending code has been taken out and shot. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.37 2006/06/01 21:46:27 pascoe Exp $
d31 1
a31 1
INCLUDES=	-I. -I$S/arch -I$S -nostdinc
@


1.37
log
@Right at the end of a debug kernel build, the current Makefile copies bsd
(with symbols) to bsd.gdb, then strips bsd.  This diff makes it rename the
file with symbols, and then asks strip to output the stripped version as
bsd.  Avoids a potentially lengthy wait when we would otherwise copy the
large (50MB+) kernel with debug symbols.

ok reyk@@ ketennis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.36 2006/02/23 23:54:59 miod Exp $
d35 2
a36 1
		-Wno-uninitialized -Wno-format -Wno-main
@


1.36
log
@Better dependency rules in files.alpha, also point to cpuconf.c in the
source tree instead of copying it to the kernel compilation directory for
no good reason.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.35 2005/06/17 21:53:06 miod Exp $
d98 3
a100 2
		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@@; ${STRIP} ${STRIPFLAGS} $@@
@


1.35
log
@Allow ev56 opcodes in the .s files by default (gas on alpha does not yet have
.ev56, .ev4, etc, in-file modifiers).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.34 2004/11/19 06:41:12 miod Exp $
d87 1
a87 2
SYSTEM_OBJ=	locore.o cpuconf.o \
		param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
d146 1
a146 2
SRCS=	${ALPHA}/alpha/locore.s ${ALPHA}/alpha/cpuconf.c \
	param.c ioconf.c ${CFILES} ${SFILES}
d148 1
a148 1
.depend: ${SRCS} assym.h param.c cpuconf.c
d150 2
a151 1
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} cpuconf.c param.c ioconf.c ${CFILES}
a173 6

cpuconf.o: cpuconf.c
	${NORMAL_C}

cpuconf.c: ${ALPHA}/alpha/cpuconf.c
	cp ${ALPHA}/alpha/cpuconf.c .
@


1.34
log
@More aggressive strip flags for non debug kernels; this is a noop on some
architectures, but saves a few dozen KB on alpha and ppc.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.33 2004/10/06 14:52:17 miod Exp $
d38 1
a38 1
		-finhibit-size-directive
@


1.33
log
@Pass -finhibit-size-directive to the compiler, so that binutils 2.15
do not create an .eh_frame section in object files.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.32 2003/11/21 17:53:19 espie Exp $
d102 1
a102 1
LINKFLAGS+=	-S
@


1.32
log
@+ -fno-builtin-* on architectures confirmed to work.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.31 2003/07/22 19:39:50 otto Exp $
d37 2
a38 1
CMACHFLAGS=	-mno-fp-regs -fno-builtin-printf -fno-builtin-log
@


1.31
log
@Fix .depend generation for assym.h. Resolves PR 1154.
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.30 2003/05/23 22:16:16 tedu Exp $
d37 1
a37 1
CMACHFLAGS=	-mno-fp-regs
@


1.30
log
@move swapgeneric to truly generic code.  tested on many archs by miod and mickey.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.29 2003/05/13 22:45:06 miod Exp $
d153 4
@


1.29
log
@Add option NO_PROPOLICE, which explicitely disables the use of the propolice
stack protection when building kernels. Intended to be used on installation
media, with tight space constraints - currently, only added where
SMALL_KERNEL was already defined.

Not thoroughly tested, but requested by deraadt.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.28 2003/05/13 06:12:43 tedu Exp $
d132 1
a132 1
	    ${CFILES} ${ALPHA}/alpha/swapgeneric.c ioconf.c param.c | \
@


1.28
log
@remove -fno-stack-protector (enable propolice)
ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.27 2002/12/25 21:10:23 miod Exp $
d38 3
@


1.27
log
@No need to define FOO?=foo for AS, CC, CPP and LD, as they are always already
set from <sys.mk>
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.26 2002/12/02 09:00:21 miod Exp $
d37 1
a37 1
CMACHFLAGS=	-mno-fp-regs -fno-stack-protector
@


1.26
log
@Import propolice (http://www.trl.ibm.com/projects/security/ssp), a stack
attack protection scheme, into gcc.

This protection is enabled by default. It can be turned off by using the
-fno-stack-protector flag.

Code by Hiroaki Etoh (etoh at jp dot ibm dot com); work on openbsd-specific
integration by fgsch@@, deraadt@@ and myself; tests by fgsch@@, naddy@@ and
myself; beer drinking by myself.

Please note that system upgrades with this new code will require a new
libc and ld.so to be build and installed before the propolice-enabled
compiler can be installed.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.25 2002/08/09 20:24:41 miod Exp $
a20 4
AS?=	as
CC?=	cc
CPP?=	cpp
LD?=	ld
@


1.25
log
@Add an explicit dependancy of assym.h to Makefile.
This makes sure it will be regenerated if you run config(8) again.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.24 2002/06/22 14:05:51 millert Exp $
d41 1
a41 1
CMACHFLAGS=	-mno-fp-regs
@


1.24
log
@Add ${PIPE} to CFLAGS
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.23 2001/12/24 23:12:12 miod Exp $
d107 1
a107 1
assym.h: $S/kern/genassym.sh ${ALPHA}/alpha/genassym.cf
@


1.23
log
@Harmonize and complete wrt cross-compilation.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.22 2001/09/14 14:50:33 art Exp $
d43 1
a43 1
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS}
@


1.22
log
@Don't just use 'size'. Use SIZE and make it settable.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.21 2001/07/15 13:10:46 assar Exp $
d21 1
d23 1
d26 1
a27 2
COPTS?= 	-O2
SIZE?=	size
d42 1
@


1.22.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.23 2001/12/24 23:12:12 miod Exp $
a20 1
AS?=	as
a21 1
CPP?=	cpp
d24 2
a26 1
STRIP?=	strip
a40 1
COPTS?= 	-O2
@


1.22.4.2
log
@sync to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.22.4.1 2002/01/31 22:55:05 niklas Exp $
d43 1
a43 1
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
d107 1
a107 1
assym.h: $S/kern/genassym.sh ${ALPHA}/alpha/genassym.cf Makefile
@


1.22.4.3
log
@sync
@
text
@d1 1
a1 1
#	$OpenBSD$
d21 4
a41 3
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
@


1.21
log
@add install target
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.20 2001/05/11 09:46:02 art Exp $
a15 6
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

d26 1
d91 1
a91 1
SYSTEM_LD_TAIL=	@@size $@@; chmod 755 $@@
@


1.20
log
@Use genassym.cf
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.19 2001/01/16 15:31:52 art Exp $
d25 2
d180 12
@


1.19
log
@Fix cross-builds of the kernel. (ELF only).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.18 2000/11/07 21:54:45 art Exp $
d108 4
a111 12
assym.h: genassym
	./genassym >assym.h

genassym: genassym.o
.if defined(DESTDIR)
	${CC} -o $@@ -nostdlib -L${DESTDIR}/usr/lib ${DESTDIR}/usr/lib/crtbegin.o ${DESTDIR}/usr/lib/crtend.o ${DESTDIR}/usr/lib/crt0.o genassym.o -lgcc -lc -lgcc
.else
	${CC} -o $@@ genassym.o
.endif

genassym.o: ${ALPHA}/alpha/genassym.c
	${HOSTED_C}
d130 1
a130 1
	    [Ee]rrs linterrs makelinks genassym genassym.o assym.h
a154 2
	${MKDEP} -a ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} \
	    ${ALPHA}/alpha/genassym.c
d164 1
a164 1
genassym.o machdep.o: Makefile
@


1.18
log
@Use cc -xassembler-with-cpp instead of cpp | as
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.17 1998/07/01 01:11:12 deraadt Exp $
d112 3
d116 1
@


1.17
log
@let COPTS override -02
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.16 1998/03/03 22:34:40 niklas Exp $
d73 1
a73 1
NORMAL_S=	${CPP} ${AFLAGS} ${CPPFLAGS} $< | sed -e 's,^\#.*,,' | ${AS} -o ${.TARGET}
@


1.17.8.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.19 2001/01/16 15:31:52 art Exp $
d73 1
a73 1
NORMAL_S=	${CC} -xassembler-with-cpp ${AFLAGS} ${CPPFLAGS} -c $<
a111 3
.if defined(DESTDIR)
	${CC} -o $@@ -nostdlib -L${DESTDIR}/usr/lib ${DESTDIR}/usr/lib/crtbegin.o ${DESTDIR}/usr/lib/crtend.o ${DESTDIR}/usr/lib/crt0.o genassym.o -lgcc -lc -lgcc
.else
a112 1
.endif
@


1.17.8.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.17.8.1 2001/04/18 16:00:36 niklas Exp $
d108 12
a119 4
assym.h: $S/kern/genassym.sh ${ALPHA}/alpha/genassym.cf
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${ALPHA}/alpha/genassym.cf > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
d138 1
a138 1
	    [Ee]rrs linterrs makelinks assym.h
d163 2
d174 1
a174 1
machdep.o: Makefile
@


1.17.8.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.17.8.2 2001/07/04 10:14:27 niklas Exp $
d16 6
a24 2
.include <bsd.own.mk>

a29 1
SIZE?=	size
d94 1
a94 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
a177 12

# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
	rm -f /obsd
	ln /bsd /obsd
	cp bsd /nbsd
	mv /nbsd /bsd
.endif
@


1.17.8.4
log
@Merge in trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
a20 1
AS?=	as
a21 1
CPP?=	cpp
d24 2
a26 1
STRIP?=	strip
a40 1
COPTS?= 	-O2
@


1.17.8.5
log
@Sync the SMP branch with 3.3
@
text
@d21 4
d41 1
a41 1
CMACHFLAGS=	-mno-fp-regs -fno-stack-protector
d43 1
a43 1
CFLAGS=		${DEBUG} ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
d107 1
a107 1
assym.h: $S/kern/genassym.sh ${ALPHA}/alpha/genassym.cf Makefile
@


1.17.8.6
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@d37 1
a37 4
CMACHFLAGS=	-mno-fp-regs
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
@


1.17.8.7
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.17.8.6 2003/05/16 00:29:38 niklas Exp $
d132 1
a132 1
	    ${CFILES} ioconf.c param.c | \
@


1.17.8.8
log
@Merge of -current from two weeks ago into the SMP branch
@
text
@d1 1
a1 1
#	$OpenBSD$
d37 1
a37 1
CMACHFLAGS=	-mno-fp-regs -fno-builtin-printf -fno-builtin-log
a152 4
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${ALPHA}/alpha/genassym.cf
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
	@@rm -f assym.dep
@


1.16
log
@Add -Wno-main for GCC 2.8
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.15 1997/09/15 02:40:24 deraadt Exp $
d44 1
a44 1
CFLAGS=		${DEBUG} -O2 ${CDIAGFLAGS} ${CMACHFLAGS} ${COPTS}
@


1.15
log
@kill Locore.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.14 1997/07/06 01:34:35 millert Exp $
d41 1
a41 1
		-Wno-uninitialized -Wno-format
@


1.14
log
@Remove -Wcast-qual unless someone has a way to make it not care
about discarding "volatile".  Implicit casts via prototypes cause
major headaches in conjunction with volatile variables.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.13 1997/04/20 10:57:23 niklas Exp $
d138 1
a138 2
	    ${ALPHA}/alpha/Locore.c ${CFILES} ${ALPHA}/alpha/swapgeneric.c \
	    ioconf.c param.c | \
@


1.13
log
@Use ${ALPHA} instead of ../..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.12 1997/04/19 21:12:51 tholo Exp $
d41 1
a41 1
		-Wcast-qual -Wno-uninitialized -Wno-format
@


1.12
log
@.depend needs cpuconf.c
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.11 1997/02/26 16:30:58 niklas Exp $
d184 2
a185 1
	cp ../../alpha/cpuconf.c .
@


1.11
log
@Workaround for some weird cpp bug that made cpuconf.o builds fail
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.10 1997/01/24 19:56:58 niklas Exp $
d156 1
a156 1
.depend: ${SRCS} assym.h param.c
@


1.10
log
@Sync with NetBSD 961207
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.9 1996/12/08 00:20:21 niklas Exp $
d88 1
a88 1
SYSTEM_OBJ=	locore.o \
d153 1
a153 1
SRCS=	${ALPHA}/alpha/locore.s \
d158 1
a158 1
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
d180 5
@


1.9
log
@Merge to NetBSD 961107, i.e. mostly new bus.h
@
text
@d1 2
a2 2
#	$OpenBSD: Makefile.alpha,v 1.8 1996/10/30 22:38:41 niklas Exp $
#	$NetBSD: Makefile.alpha,v 1.25 1996/09/27 17:33:04 cgd Exp $
d29 1
@


1.8
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.alpha,v 1.25 1996/09/27 17:33:04 cgd Exp $
d40 1
a40 1
		-Wno-uninitialized -Wno-format
@


1.7
log
@Bring forward alpha configuration files to 0722.  Add OpenBSD
tags. s/netbsd/bsd/.  Add ATAPI and dummy PCMCIA defines.
@
text
@d1 2
a2 2
#	$OpenBSD: Makefile.alpha,v 1.16 1996/05/19 21:16:51 cgd Exp $
#	$NetBSD: Makefile.alpha,v 1.16 1996/05/19 21:16:51 cgd Exp $
d4 1
a4 1
# Makefile for NetBSD
a24 1
AS?=	as
a25 1
CPP?=	cpp
d27 2
a28 2
STRIP?=	strip -g -X -x
TOUCH?=	touch -f -c
d31 10
a40 2
S=	../../../..
ALPHA=	../..
d42 3
a44 4
INCLUDES=	-I. -I$S/arch -I$S
CPPFLAGS=	${INCLUDES} ${IDENT} -D_KERNEL -Dalpha
CFLAGS=		${DEBUG} -O2 -Werror -mno-fp-regs
AFLAGS=		-x assembler-with-cpp -traditional-cpp -D_LOCORE
d46 5
d68 2
a69 4
# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, DRIVER, or PROFILE}; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.
d72 1
a72 4
NORMAL_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<

DRIVER_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
DRIVER_C_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} ${PARAM} -c $<
d74 1
a74 2
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<
NORMAL_S_C=	${CC} ${AFLAGS} ${CPPFLAGS} ${PARAM} -c $<
d100 1
a100 1
		echo ${STRIP} $@@; ${STRIP} $@@
d102 1
a102 1
LINKFLAGS+=	-x
d114 1
a114 1
	${NORMAL_C_C}
d121 1
a121 1
	${NORMAL_C_C}
d132 1
a132 1
	rm -f eddep *bsd netbsd.gdb tags *.[io] [a-z]*.s \
d136 1
a136 1
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} ${PARAM} -UKGDB \
d156 5
a160 4
	mkdep ${AFLAGS} ${CPPFLAGS} ${ALPHA}/alpha/locore.s
	mkdep -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
	mkdep -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
	mkdep -a ${CFLAGS} ${CPPFLAGS} ${PARAM} ${ALPHA}/alpha/genassym.c
@


1.6
log
@kernel is /bsd
@
text
@d1 1
@


1.5
log
@sync to 0616, retaining local diffs
@
text
@d127 1
a127 1
	rm -f eddep *netbsd netbsd.gdb tags *.[io] [a-z]*.s \
@


1.4
log
@From NetBSD: vnode_if.[ch] made machine independent.
very usefull (for <sys/vnode.h> inclusion).
from the other side this is really machine independent ...
tested w/ i386, but should not cause errors w/ other arch's.
pls, test it (don't forget to reconfig kernel ;)
@
text
@d1 2
a2 2
#	$NetBSD: Makefile.alpha,v 1.8 1995/11/23 02:35:16 cgd Exp $
#
d8 1
a8 1
#	/sys/conf/``machineid''
d10 1
a10 1
#	 config machineid
d12 1
a12 1
#	/sys/conf/Makefile.``machinetype''
a24 1
AWK?=	awk
d28 1
d35 5
a39 5
INCLUDES= -I. -I$S/arch -I$S -I$S/sys
COPTS=	${INCLUDES} ${IDENT} -D_KERNEL
CFLAGS=	-Werror -fno-builtin -mno-fp-regs ${DEBUG} ${COPTS} -Dalpha
#CFLAGS+=-Wmissing-prototypes -Wmissing-declarations
AFLAGS=	${COPTS}
d62 8
a69 8
NORMAL_C=	${CC} -c ${CFLAGS} ${PROF} $<
NORMAL_C_C=	${CC} -c ${CFLAGS} ${PROF} ${PARAM} $<
NORMAL_S=	rm -f $*.c; ln -s $< $*.c; \
		${CC} ${AFLAGS} -I${ALPHA}/alpha -E $*.c > $*.i; \
		${AS} -o $@@ $*.i; rm -f $*.c $*.i
NORMAL_S_C=	rm -f $*.c; ln -s $< $*.c; \
		${CC} ${AFLAGS} ${PARAM} -I${ALPHA}/alpha -E $*.c > $*.i; \
		${AS} -o $@@ $*.i; rm -f $*.c $*.i
d75 2
d82 2
a83 9
DEBUG?=
.if ${DEBUG} == "-g"
LDX=-X
.else
LDX=-x
.endif
LDFLAGS= ${LDX} -G 4 -N -e __start -Ttext fffffc0000230000
SYSTEM_OBJ=	locore.o ${OBJS} param.o ioconf.o ${LIBKERN} \
		${LIBCOMPAT}
d85 3
a87 3
SYSTEM_LD_HEAD=	@@echo loading $@@; rm -f $@@
SYSTEM_LD=	-@@echo ${LD} ${LDFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o ${XXX}; \
		${LD} ${LDFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o ${XXX}
d89 2
d92 4
a95 3
.if 0
SYSTEM_LD_TAIL+=; echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo strip -d $@@; strip -d $@@
d97 1
a97 3
SYSTEM_LD_TAIL+=; echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo strip -g -X -x $@@; strip -g -X -x $@@
.endif
d102 8
a109 3
newvers:
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} -c vers.c
d111 3
a113 3
clean::
	rm -f eddep *netbsd netbsd.gdb tags tags1 *.[io] \
		[a-z]*.s Errs errs linterrs makelinks genassym
d115 2
d118 2
a119 3
locore.o: ${ALPHA}/alpha/locore.s ${ALPHA}/alpha/pal.s \
	  ${ALPHA}/alpha/prom_disp.s ${ALPHA}/include/intrcnt.h assym.s
	${NORMAL_S_C}
d121 3
a123 2
# depend on maxusers
assym.s: Makefile
a124 3
./assym.s: assym.s
assym.s: genassym
	./genassym >assym.s
d126 3
a128 2
genassym: genassym.o
	${CC} -o $@@ genassym.o
d130 5
a134 2
genassym.o: ${ALPHA}/alpha/genassym.c
	${CC} -c ${CFLAGS} ${PARAM} $<
d136 2
a137 5
SRCS= ${CFILES} ${ALPHA}/alpha/genassym.c ioconf.c param.c
depend: .depend
.depend: ${SRCS} assym.s
	mkdep ${COPTS} ${SRCS}
	mkdep -a -p ${COPTS} ${ALPHA}/alpha/genassym.c
d144 1
a144 1
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
d147 18
a164 4
tags: depend
	sh $S/conf/systags.sh
	rm -f tags1
	sed -e 's,	../,	,' tags > tags1
d166 2
a167 2
ioconf.o: ioconf.c
	${CC} -c ${CFLAGS} ioconf.c
a168 3
param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .
d170 2
a171 2
param.o: param.c Makefile
	${CC} -c ${CFLAGS} ${PARAM} param.c
@


1.3
log
@update to netbsd
@
text
@d87 1
a87 1
SYSTEM_OBJ=	locore.o vnode_if.o ${OBJS} param.o ioconf.o ${LIBKERN} \
d111 1
a111 1
	rm -f eddep *netbsd netbsd.gdb tags tags1 vnode_if.[ch] *.[io] \
d132 1
a132 1
SRCS= ${CFILES} ${ALPHA}/alpha/genassym.c ioconf.c param.c vnode_if.c
a159 3

vnode_if.c vnode_if.h: $S/kern/vnode_if.sh $S/kern/vnode_if.src
	AWK="${AWK}" sh $S/kern/vnode_if.sh $S/kern/vnode_if.src
@


1.2
log
@do not use -fno-builtin for kernels; the reasons why are manifold
@
text
@d1 1
a1 1
#	$NetBSD: Makefile.alpha,v 1.7 1995/09/19 23:28:06 thorpej Exp $
d37 2
a38 1
CFLAGS=	-Werror -mno-fp-regs ${DEBUG} ${COPTS} -Dalpha
d94 9
a102 4
#.if ${DEBUG} == "-g"
#SYSTEM_LD_TAIL+=; echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
#		echo strip -d $@@; strip -d $@@
#.endif
d116 1
a116 1
	  ${ALPHA}/alpha/prom_disp.s assym.s
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
CFLAGS=	-Werror -fno-builtin -mno-fp-regs ${DEBUG} ${COPTS} -Dalpha
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

