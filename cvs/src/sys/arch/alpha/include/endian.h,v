head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.16
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.14
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.10
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.6
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.14
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.10
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.8
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.6
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.4
	OPENBSD_5_0:1.13.0.2
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.12.0.22
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.20
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.16
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.18
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.14
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.12
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.10
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.8
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.6
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.12
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.10
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.8
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.10.0.6
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.4
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.9.0.8
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.6
	OPENBSD_2_7_BASE:1.9
	SMP:1.9.0.4
	SMP_BASE:1.9
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.07.12.16.25.08;	author guenther;	state Exp;
branches;
next	1.13;
commitid	r9gXh8PA6rI3P7q2;

1.13
date	2011.03.11.15.17.08;	author pirofti;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.13.00.35.22;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.21.09.01;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.02.20.45.20;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	99.05.10.16.02.07;	author espie;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	97.11.09.23.05.00;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	97.08.08.18.27.17;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.06.25.12.52.07;	author grr;	state Exp;
branches;
next	1.5;

1.5
date	97.06.25.12.32.48;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	97.04.04.03.05.28;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.10.30.22.39.03;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.07.29.22.58.40;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.42;	author deraadt;	state Exp;
branches;
next	;

1.9.4.1
date	2001.04.18.16.00.53;	author niklas;	state Exp;
branches;
next	1.9.4.2;

1.9.4.2
date	2003.06.07.11.11.33;	author ho;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Tackle the endian.h mess.  Make it so that:
 * you can #include <sys/endian.h> instead of <machine/endian.h>,
   and ditto <endian.h>  (fixes code that pulls in <sys/endian.h> first)

 * those will always export the symbols that POSIX specified for
   <endian.h>, including the new {be,le}{16,32,64}toh() set.  c.f.
	http://austingroupbugs.net/view.php?id=162

   if __BSD_VISIBLE then you also get the symbols that our <machine/endian.h>
   currently exports (ntohs, NTOHS, dlg's bemtoh*, etc)

 * when doing POSIX compiles (not __BSD_VISIBLE), then <netinet/in.h> and
   <arpa/inet.h> will *stop* exporting the extra symbols like BYTE_ORDER
   and betoh*

ok deraadt@@
@
text
@/*	$OpenBSD: endian.h,v 1.13 2011/03/11 15:17:08 pirofti Exp $	*/

/*-
 * Copyright (c) 1997 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_ENDIAN_H_
#define _MACHINE_ENDIAN_H_

#define _BYTE_ORDER _LITTLE_ENDIAN
#define	__STRICT_ALIGNMENT

#ifndef __FROM_SYS__ENDIAN
#include <sys/endian.h>
#endif

#endif /* _MACHINE_ENDIAN_H_ */
@


1.13
log
@Use _MACHINE_ENDIAN_H_ for this is The Right Thing To Do.

Okay guenther@@, millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.12 2005/12/13 00:35:22 millert Exp $	*/
d31 3
d35 1
a35 2

#define	__STRICT_ALIGNMENT
@


1.12
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.11 2003/06/03 21:09:01 deraadt Exp $	*/
d27 2
a28 2
#ifndef _ALPHA_ENDIAN_H_
#define _ALPHA_ENDIAN_H_
d35 1
a35 1
#endif /* _ALPHA_ENDIAN_H_ */
@


1.11
log
@terms 3 & 4 cleanup based on "terms" file
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.10 2001/03/02 20:45:20 jason Exp $	*/
d30 1
a30 1
#define BYTE_ORDER LITTLE_ENDIAN
@


1.10
log
@add #define __STRICT_ALIGNMENT
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.9 1999/05/10 16:02:07 espie Exp $	*/
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Niklas Hallqvist.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.9
log
@Use symbolic define for BYTE_ORDER.

(don't forget that cpp is `lazy':
#define A B
#define B value
#if A == value

works, since A isn't extended before it's needed, by which time B is known)
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.8 1997/11/09 23:05:00 niklas Exp $	*/
d37 2
@


1.9.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.10 2001/03/02 20:45:20 jason Exp $	*/
a36 2

#define	__STRICT_ALIGNMENT
@


1.9.4.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.9.4.1 2001/04/18 16:00:53 niklas Exp $	*/
d14 5
@


1.8
log
@New endian.h design.  All architectures now use a common file for the bulk
part.  Some ports can optimize the swap operations.  This also means the
general API is extended with swap16, swap32, htobe16, htobe32, betoh16,
betoh32, htole16, htole32, letoh16 and letoh32.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.7 1997/08/08 18:27:17 niklas Exp $	*/
d35 1
a35 1
#define BYTE_ORDER 1234
@


1.7
log
@Add htobe32 and similar friends
@
text
@d1 1
a1 2
/*	$OpenBSD: endian.h,v 1.6 1997/06/25 12:52:07 grr Exp $	*/
/*	$NetBSD: endian.h,v 1.3 1996/10/13 19:57:59 cgd Exp $	*/
d3 2
a4 3
/*
 * Copyright (c) 1987, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
d16 3
a18 5
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d20 10
a29 101
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)endian.h	8.1 (Berkeley) 6/10/93
 */

#ifndef _ENDIAN_H_
#define	_ENDIAN_H_

/*
 * Define the order of 32-bit words in 64-bit words.
 */
#define _QUAD_HIGHWORD 1
#define _QUAD_LOWWORD 0

#ifndef _POSIX_SOURCE
/*
 * Definitions for byte order, according to byte significance from low
 * address to high.
 */
#define	LITTLE_ENDIAN	1234	/* LSB first: i386, vax */
#define	BIG_ENDIAN	4321	/* MSB first: 68000, ibm, net */
#define	PDP_ENDIAN	3412	/* LSB first in word, MSW first in long */

#define	BYTE_ORDER	LITTLE_ENDIAN

#include <sys/cdefs.h>

typedef u_int32_t in_addr_t;
typedef u_int16_t in_port_t;

__BEGIN_DECLS
#if 0
/*
 * prototypes supplied for documentation purposes solely
 */
u_int32_t	htobe32 __P((u_int32_t));
u_int16_t	htobe16 __P((u_int16_t));
u_int32_t	betoh32 __P((u_int32_t));
u_int16_t	betoh16 __P((u_int16_t));

u_int32_t	htole32 __P((u_int32_t));
u_int16_t	htole16 __P((u_int16_t));
u_int32_t	letoh32 __P((u_int32_t));
u_int16_t	letoh16 __P((u_int16_t));

u_int32_t	htonl __P((u_int32_t));
u_int16_t	htons __P((u_int16_t));
u_int32_t	ntohl __P((u_int32_t));
u_int16_t	ntohs __P((u_int16_t));
#endif
__END_DECLS

#ifdef __GNUC__

/* XXX perhaps some __asm would be better here?  */
#define	__byte_swap_int32_variable(x) \
({ register u_int32_t __x = (x); \
    (((__x) & 0xff000000) >> 24) | (((__x) & 0x00ff0000) >> 8) | \
    (((__x) & 0x0000ff00) << 8) | (((__x) & 0x000000ff) << 24); })

#define	__byte_swap_int16_variable(x) \
({ register u_int16_t __x = (x); \
    (((__x) & 0xff00) >> 8) | (((__x) & 0x00ff) << 8); })

#ifdef __OPTIMIZE__

#define	__byte_swap_int32_constant(x) \
	((((x) & 0xff000000) >> 24) | \
	 (((x) & 0x00ff0000) >>  8) | \
	 (((x) & 0x0000ff00) <<  8) | \
	 (((x) & 0x000000ff) << 24))
#define	__byte_swap_int16_constant(x) \
	((((x) & 0xff00) >> 8) | \
	 (((x) & 0x00ff) << 8))
#define	__byte_swap_int32(x) \
	(__builtin_constant_p((x)) ? \
	 __byte_swap_int32_constant(x) : __byte_swap_int32_variable(x))
#define	__byte_swap_int16(x) \
	(__builtin_constant_p((x)) ? \
	 __byte_swap_int16_constant(x) : __byte_swap_int16_variable(x))

#else /* __OPTIMIZE__ */

#define	__byte_swap_int32(x)	__byte_swap_int32_variable(x)
#define	__byte_swap_int16(x)	__byte_swap_int16_variable(x)

#endif /* __OPTIMIZE__ */
#endif /* __GNUC__ */

/*
 * Macros for big/little endian to host and vice versa.
a30 4
#define	betoh32(x)	__byte_swap_int32(x)
#define	betoh16(x)	__byte_swap_int16(x)
#define	htobe32(x)	__byte_swap_int32(x)
#define	htobe16(x)	__byte_swap_int16(x)
d32 2
a33 19
#define	letoh32(x)	(x)
#define	letoh16(x)	(x)
#define	htole32(x)	(x)
#define	htole16(x)	(x)

/*
 * Macros for network/external number representation conversion.
 *
 * The way this works is that HTONS(x) modifies x and *can't* be used as
 * and rvalue i.e.  foo=HTONS(bar) is wrong.  Likewise x=htons(x) should
 * never be used where HTONS(x) will serve i.e. foo=htons(foo) is wrong.
 * Failing to observe these rule will result in code that appears to work
 * and probably does work, but generates gcc warnings on architectures
 * where the macros are used to optimize away an unneeded conversion.
 */
#define	ntohl(x)	betoh32(x)
#define	ntohs(x)	betoh16(x)
#define	htonl(x)	htobe32(x)
#define	htons(x)	htobe16(x)
d35 2
a36 4
#define	NTOHL(x)	(void)((x) = ntohl(x))
#define	NTOHS(x)	(void)((x) = ntohs(x))
#define	HTONL(x)	(void)((x) = htonl(x))
#define	HTONS(x)	(void)((x) = htons(x))
d38 1
a38 2
#endif /* !_POSIX_SOURCE */
#endif /* !_ENDIAN_H_ */
@


1.6
log
@Include usage notes in the rest of the endian.h files for consistancy.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.5 1997/06/25 12:32:48 downsj Exp $	*/
d65 14
d83 1
d86 50
d146 10
a155 18
#if BYTE_ORDER == BIG_ENDIAN && !defined(lint)
#define	ntohl(x)	(x)
#define	ntohs(x)	(x)
#define	htonl(x)	(x)
#define	htons(x)	(x)

#define	NTOHL(x)	(void)(x)
#define	NTOHS(x)	(void)(x)
#define	HTONL(x)	(void)(x)
#define	HTONS(x)	(void)(x)

#else

#define	NTOHL(x)	(x) = ntohl((u_int32_t)x)
#define	NTOHS(x)	(x) = ntohs((u_int16_t)x)
#define	HTONL(x)	(x) = htonl((u_int32_t)x)
#define	HTONS(x)	(x) = htons((u_int16_t)x)
#endif
@


1.5
log
@Big endian HTON?() macros should be (void)(x).
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.4 1997/04/04 03:05:28 millert Exp $	*/
d73 7
@


1.4
log
@Define in_addr_t and in_port_t everywhere but use u_intXX_t for
htonl and friends.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.3 1996/10/30 22:39:03 niklas Exp $	*/
d80 4
a83 4
#define	NTOHL(x)	(x)
#define	NTOHS(x)	(x)
#define	HTONL(x)	(x)
#define	HTONS(x)	(x)
@


1.3
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.3 1996/10/13 19:57:59 cgd Exp $	*/
d65 4
a68 4
in_addr_t	htonl __P((in_addr_t));
in_port_t	htons __P((in_port_t));
in_addr_t	ntohl __P((in_addr_t));
in_port_t	ntohs __P((in_port_t));
d87 4
a90 4
#define	NTOHL(x)	(x) = ntohl((in_addr_t)x)
#define	NTOHS(x)	(x) = ntohs((in_port_t)x)
#define	HTONL(x)	(x) = htonl((in_addr_t)x)
#define	HTONS(x)	(x) = htons((in_port_t)x)
@


1.2
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: endian.h,v 1.1 1995/02/13 23:07:36 cgd Exp $	*/
/*	$NetBSD: endian.h,v 1.1 1995/02/13 23:07:36 cgd Exp $	*/
d61 3
d65 4
a68 4
unsigned long	htonl __P((unsigned long));
unsigned short	htons __P((unsigned short));
unsigned long	ntohl __P((unsigned long));
unsigned short	ntohs __P((unsigned short));
d87 4
a90 4
#define	NTOHL(x)	(x) = ntohl((u_long)x)
#define	NTOHS(x)	(x) = ntohs((u_short)x)
#define	HTONL(x)	(x) = htonl((u_long)x)
#define	HTONS(x)	(x) = htons((u_short)x)
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
