head	1.10;
access;
symbols
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.40
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.36
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.34
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.32
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.30
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.28
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.26
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.24
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.22
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.20
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.18
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.16
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.14
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.12
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.10
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.8
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.8.0.6
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.6.0.18
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.16
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.14
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.12
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.12.18.10.45.29;	author dlg;	state Exp;
branches;
next	1.9;
commitid	zg1bM1PjCP9I7uhL;

1.9
date	2009.09.30.19.41.54;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.08.21.27.22;	author ericj;	state Exp;
branches;
next	1.7;

1.7
date	2000.11.08.16.01.13;	author art;	state Exp;
branches;
next	1.6;

1.6
date	97.01.24.19.57.18;	author niklas;	state Exp;
branches
	1.6.14.1;
next	1.5;

1.5
date	96.11.28.20.09.29;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.10.30.22.39.21;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.07.29.22.59.07;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.18.09.43.29;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.43;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.43;	author deraadt;	state Exp;
branches;
next	;

1.6.14.1
date	2001.04.18.16.00.58;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.10
log
@replace splhigh and a simplelock with a mutex.

slight tweak and testing by deraadt@@
ok miod@@
@
text
@/* $OpenBSD: prom.h,v 1.9 2009/09/30 19:41:54 miod Exp $ */
/* $NetBSD: prom.h,v 1.12 2000/06/08 03:10:06 thorpej Exp $ */

/*
 * Copyright (c) 1994, 1995, 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Keith Bostic, Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef	ASSEMBLER
struct prom_vec {
	u_int64_t	routine;
	void		*routine_arg;
};

/* The return value from a prom call. */
typedef union {
	struct {
		u_int64_t
			retval	: 32,		/* return value. */
			unit	: 8,
			mbz	: 8,
			error	: 13,
			status	: 3;
	} u;
	u_int64_t bits;
} prom_return_t;

#ifdef _STANDALONE
int	getchar(void);
void	putchar(int);
#endif

void	prom_halt(int) __attribute__((__noreturn__));
int	prom_getenv(int, char *, int);

void	hwrpb_primary_init(void);
void	hwrpb_restart_setup(void);
#endif

/* Prom operation values. */
#define	PROM_R_CLOSE		0x11
#define	PROM_R_GETC		0x01
#define	PROM_R_GETENV		0x22
#define	PROM_R_OPEN		0x10
#define	PROM_R_PUTS		0x02
#define	PROM_R_READ		0x13
#define	PROM_R_WRITE		0x14
#define	PROM_R_IOCTL		0x12

/* Prom IOCTL operation subcodes */
#define	PROM_I_SKIP2IRG		1
#define	PROM_I_SKIP2MARK	2
#define	PROM_I_REWIND		3
#define	PROM_I_WRITEMARK	4

/* Environment variable values. */
#define	PROM_E_BOOTED_DEV	0x4
#define	PROM_E_BOOTED_FILE	0x6
#define	PROM_E_BOOTED_OSFLAGS	0x8
#define	PROM_E_TTY_DEV		0xf
#define	PROM_E_SCSIID		0x42
#define	PROM_E_SCSIFAST		0x43

#if defined(_STANDALONE) || defined(ENABLEPROM)
/*
 * These can't be called from the kernel without great care.
 *
 * There have to be stub routines to do the copying that ensures that the
 * PROM doesn't get called with an address larger than 32 bits.  Calls that
 * either don't need to copy anything, or don't need the copy because it's
 * already being done elsewhere, are defined here.
 */
#define	prom_open(dev, len)						\
	prom_dispatch(PROM_R_OPEN, (dev), (len), 0, 0)
#define	prom_close(chan)						\
	prom_dispatch(PROM_R_CLOSE, chan, 0, 0, 0)
#define	prom_read(chan, len, buf, blkno)				\
	prom_dispatch(PROM_R_READ, chan, len, (u_int64_t)buf, blkno)
#define	prom_write(chan, len, buf, blkno)				\
	prom_dispatch(PROM_R_WRITE, chan, len, (u_int64_t)buf, blkno)
#define	prom_ioctl(chan, op, count)					\
	prom_dispatch(PROM_R_IOCTL, chan, op, (int64_t)count, 0, 0)
#define	prom_putstr(chan, str, len)					\
	prom_dispatch(PROM_R_PUTS, chan, (u_int64_t)str, len, 0)
#define	prom_getc(chan)							\
	prom_dispatch(PROM_R_GETC, chan, 0, 0, 0)
#define prom_getenv_disp(id, buf, len)					\
	prom_dispatch(PROM_R_GETENV, id, (u_int64_t)buf, len, 0)
#endif

#ifndef ASSEMBLER
#ifdef _KERNEL
void	promcnputc(dev_t, int);
int	promcngetc(dev_t);
int	promcnlookc(dev_t, char *);

u_int64_t	prom_dispatch(u_int64_t, u_int64_t, u_int64_t, u_int64_t,
		    u_int64_t);
#endif /* _KERNEL */
#endif /* ASSEMBLER */
@


1.9
log
@Get rid of prom_open() and implement it directly as a prom_dispatch() wrapper,
necessary for some old SRM version. From NetBSD.
@
text
@d1 1
a1 1
/* $OpenBSD: prom.h,v 1.8 2000/11/08 21:27:22 ericj Exp $ */
a114 3
int	prom_enter(void);
void	prom_leave(int);

@


1.8
log
@tag the rest of alpha tree
@
text
@d1 1
a1 1
/* $OpenBSD: prom.h,v 1.12 2000/06/08 03:10:06 thorpej Exp $ */
a51 1
int	prom_open(char *, int);
d95 2
@


1.7
log
@Merge in big portions of the improvements NetBSD did to their alpha port.
Highlights: UVM, PMAP_NEW, bus_dma (only on some buses for now), new hardware
support, possiblity for ELF, etc, etc. Too much to mention.

This is still work in progress. video consoles might be broken, otherwise
we have basically the same functionality as before plus more.
@
text
@d1 1
@


1.6
log
@Sync with NetBSD 961207
@
text
@d1 1
a1 2
/*	$OpenBSD: prom.h,v 1.5 1996/11/28 20:09:29 niklas Exp $	*/
/*	$NetBSD: prom.h,v 1.6 1996/11/13 22:21:03 cgd Exp $	*/
d32 2
a33 2
	int	(*routine) __P((struct crd *));
	struct crd *routine_arg;
d49 4
a52 4
#ifdef STANDALONE
int	getchar __P((void));
int	prom_open __P((char *, int));
void	putchar __P((int));
d55 2
a56 2
void	prom_halt __P((int)) __attribute__((__noreturn__));
int	prom_getenv __P((int, char *, int));
d58 2
a59 2
void	init_prom_interface __P((void));
void	hwrbp_restart_setup __P((void));
d70 7
d83 2
d86 1
d88 2
d101 2
d109 1
d113 6
a118 3
void	promcnputc __P((dev_t, int));
int	promcngetc __P((dev_t));
int	promcnlookc __P((dev_t, char *));
d120 2
a121 2
u_int64_t	prom_dispatch __P((u_int64_t, u_int64_t, u_int64_t, u_int64_t,
		    u_int64_t));
@


1.6.14.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 2
a2 2
/* $OpenBSD: prom.h,v 1.8 2000/11/08 21:27:22 ericj Exp $ */
/* $NetBSD: prom.h,v 1.12 2000/06/08 03:10:06 thorpej Exp $ */
d33 2
a34 2
	u_int64_t	routine;
	void		*routine_arg;
d50 4
a53 4
#ifdef _STANDALONE
int	getchar(void);
int	prom_open(char *, int);
void	putchar(int);
d56 2
a57 2
void	prom_halt(int) __attribute__((__noreturn__));
int	prom_getenv(int, char *, int);
d59 2
a60 2
void	hwrpb_primary_init(void);
void	hwrpb_restart_setup(void);
a70 7
#define	PROM_R_IOCTL		0x12

/* Prom IOCTL operation subcodes */
#define	PROM_I_SKIP2IRG		1
#define	PROM_I_SKIP2MARK	2
#define	PROM_I_REWIND		3
#define	PROM_I_WRITEMARK	4
a76 2
#define	PROM_E_SCSIID		0x42
#define	PROM_E_SCSIFAST		0x43
a77 1
#if defined(_STANDALONE) || defined(ENABLEPROM)
a78 2
 * These can't be called from the kernel without great care.
 *
a89 2
#define	prom_ioctl(chan, op, count)					\
	prom_dispatch(PROM_R_IOCTL, chan, op, (int64_t)count, 0, 0)
a95 1
#endif
d99 3
a101 6
int	prom_enter(void);
void	prom_leave(int);

void	promcnputc(dev_t, int);
int	promcngetc(dev_t);
int	promcnlookc(dev_t, char *);
d103 2
a104 2
u_int64_t	prom_dispatch(u_int64_t, u_int64_t, u_int64_t, u_int64_t,
		    u_int64_t);
@


1.5
log
@Fix a vararg proto
@
text
@d1 2
a2 2
/*	$OpenBSD: prom.h,v 1.4 1996/10/30 22:39:21 niklas Exp $	*/
/*	$NetBSD: prom.h,v 1.4 1996/10/15 23:52:49 cgd Exp $	*/
d5 1
a5 1
 * Copyright (c) 1994, 1995 Carnegie-Mellon University.
a60 2
int	prom_dispatch __P((int, ...));
int	promcnlookc __P((dev_t, char *));
d84 23
a106 5
#define	prom_close(chan)	prom_dispatch(PROM_R_CLOSE, chan)
#define	prom_read(chan, len, buf, blkno) \
	prom_dispatch(PROM_R_READ, chan, len, buf, blkno)
#define	prom_write(chan, len, buf, blkno) \
	prom_dispatch(PROM_R_WRITE, chan, len, buf, blkno)
@


1.4
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
/*	$OpenBSD: prom.h,v 1.4 1996/10/15 23:52:49 cgd Exp $	*/
d61 1
a61 1
int	prom_dispatch __P((int, int, u_char *, int));
@


1.3
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: prom.h,v 1.2 1996/04/23 15:23:18 cgd Exp $	*/
/*	$NetBSD: prom.h,v 1.2 1996/04/23 15:23:18 cgd Exp $	*/
d33 1
a33 1
	int	(*routine)();
d58 5
d72 1
d89 2
@


1.2
log
@sync to 0616, retaining local diffs
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: prom.h,v 1.1 1995/02/13 23:07:48 cgd Exp $	*/
d55 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
