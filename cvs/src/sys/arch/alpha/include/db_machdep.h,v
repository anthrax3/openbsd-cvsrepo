head	1.25;
access;
symbols
	OPENBSD_6_0:1.25.0.2
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.23.0.6
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.8
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.4
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.22.0.4
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.21.0.10
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.8
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.6
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.4
	OPENBSD_5_0:1.21.0.2
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.20.0.2
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.19.0.20
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.16
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.18
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.14
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.12
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.10
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.8
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.6
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.4
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.2
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.18.0.4
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.2
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.17.0.4
	OPENBSD_3_6_BASE:1.17
	SMP_SYNC_A:1.17
	SMP_SYNC_B:1.17
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.13
	UBC:1.12.0.2
	UBC_BASE:1.12
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	SMP:1.7.0.12
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.10
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.8
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.6
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.4
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.25
date	2016.04.27.11.10.48;	author mpi;	state Exp;
branches;
next	1.24;
commitid	57btDderNGPG4fjG;

1.24
date	2016.02.27.13.08.06;	author mpi;	state Exp;
branches;
next	1.23;
commitid	hnv9KfQtxhCytAnd;

1.23
date	2014.03.16.20.31.45;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2014.01.26.17.40.11;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2011.03.23.16.54.34;	author pirofti;	state Exp;
branches;
next	1.20;

1.20
date	2010.11.27.19.57.23;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2005.12.17.07.31.23;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2005.01.04.21.14.35;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2004.01.22.17.47.03;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.18.20.14.41;	author jmc;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.12.01.07.28;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.19.19.32.46;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.14.01.26.27;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.06.19.53.13;	author miod;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2001.03.04.19.19.43;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.08.21.27.19;	author ericj;	state Exp;
branches;
next	1.9;

1.9
date	2000.11.08.16.01.11;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.06.13.30.47;	author art;	state Exp;
branches;
next	1.7;

1.7
date	97.07.23.23.32.43;	author niklas;	state Exp;
branches
	1.7.12.1;
next	1.6;

1.6
date	97.07.19.20.50.50;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.07.06.16.20.23;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.03.21.00.48.43;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.10.30.22.38.58;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.07.29.22.58.35;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.03.53.04;	author deraadt;	state Exp;
branches;
next	;

1.7.12.1
date	2001.04.18.16.00.49;	author niklas;	state Exp;
branches;
next	1.7.12.2;

1.7.12.2
date	2001.11.13.21.00.49;	author niklas;	state Exp;
branches;
next	1.7.12.3;

1.7.12.3
date	2002.03.28.10.06.13;	author niklas;	state Exp;
branches;
next	1.7.12.4;

1.7.12.4
date	2003.03.27.23.18.06;	author niklas;	state Exp;
branches;
next	1.7.12.5;

1.7.12.5
date	2004.02.19.09.59.34;	author niklas;	state Exp;
branches;
next	;

1.12.2.1
date	2002.06.11.03.33.40;	author art;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2003.05.19.21.38.53;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.25
log
@G/C DDB_REGS.
@
text
@/*	$OpenBSD: db_machdep.h,v 1.24 2016/02/27 13:08:06 mpi Exp $	*/

/*
 * Copyright (c) 1997 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef	_MACHINE_DB_MACHDEP_H_
#define	_MACHINE_DB_MACHDEP_H_

/* XXX - Need to include vm.h for boolean_t */
#include <uvm/uvm_extern.h>

struct opcode {
	enum opc_fmt { OPC_PAL, OPC_RES, OPC_MEM, OPC_OP, OPC_BR } opc_fmt;
	char *opc_name;
	int opc_print;
};
extern struct opcode opcode[];

/* types the generic ddb module needs */
typedef	vaddr_t db_addr_t;
typedef	long db_expr_t;
typedef struct trapframe db_regs_t;

extern db_regs_t	ddb_regs;

#define	PC_REGS(regs)	((db_addr_t)(regs)->tf_regs[FRAME_PC])
#define	SET_PC_REGS(regs, value) (regs)->tf_regs[FRAME_PC] = (unsigned long)(value)

/* Breakpoint related definitions */
#define	BKPT_INST	0x00000080	/* call_pal bpt */
#define	BKPT_SIZE	sizeof(int)
#define	BKPT_SET(inst)	BKPT_INST

#define	IS_BREAKPOINT_TRAP(type, code) \
    ((type) == ALPHA_KENTRY_IF && (code) == ALPHA_IF_CODE_BPT)
#ifdef notyet
#define	IS_WATCHPOINT_TRAP(type, code)	((type) == ALPHA_KENTRY_MM)
#else
#define	IS_WATCHPOINT_TRAP(type, code)	0
#endif

#define	FIXUP_PC_AFTER_BREAK(regs) ((regs)->tf_regs[FRAME_PC] -= sizeof(int))

#define SOFTWARE_SSTEP
#define DB_VALID_BREAKPOINT(addr) db_valid_breakpoint(addr)

/* Hack to skip GCC "unused" warnings. */
#define	inst_trap_return(ins)	((ins) & 0)		/* XXX */
#define	inst_return(ins)	(((ins) & 0xfc000000) == 0x68000000)

int	alpha_debug(unsigned long, unsigned long, unsigned long,
    unsigned long, struct trapframe *);
db_addr_t db_branch_taken(int, db_addr_t, db_regs_t *);
boolean_t db_inst_branch(int);
boolean_t db_inst_call(int);
boolean_t db_inst_load(int);
boolean_t db_inst_return(int);
boolean_t db_inst_trap_return(int);
boolean_t db_inst_unconditional_flow_transfer(int);
u_long	db_register_value(db_regs_t *, int);
int	db_valid_breakpoint(db_addr_t);
int	ddb_trap(unsigned long, unsigned long, unsigned long,
    unsigned long, struct trapframe *);
int	db_ktrap(int, int, db_regs_t *);
db_addr_t next_instr_address(db_addr_t, int);

#if 1
/* Backwards compatibility until we switch all archs to use the db_ prefix */
#define branch_taken(ins, pc, fun, regs) db_branch_taken((ins), (pc), (regs))
#define inst_branch db_inst_branch
#define inst_call db_inst_call
#endif

#define	DB_MACHINE_COMMANDS

#endif	/* _MACHINE_DB_MACHDEP_H_ */
@


1.24
log
@Rename kdb_trap() into db_ktrap().

The goal is to include it in the list of functions that must not be
instrumented.  All ddb(8) functions should be in this list and have
their names start with 'db_'.

ok visa@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.23 2014/03/16 20:31:45 guenther Exp $	*/
a45 1
#define	DDB_REGS	(&ddb_regs)
@


1.23
log
@DDB supports ELF symbols are all archs, and it's always the same as the
native size, so eliminate the #defines.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.22 2014/01/26 17:40:11 miod Exp $	*/
d86 1
a86 1
int	kdb_trap(int, int, db_regs_t *);
@


1.22
log
@Work in progress work towards SMP, heavily based upon NetBSD. The MP kernel
will boot multiuser, but will deadlock under load, and I can't find my
mistake yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.21 2011/03/23 16:54:34 pirofti Exp $	*/
a31 6

/*
 * We use Elf64 symbols in DDB.
 */
#define	DB_ELF_SYMBOLS
#define	DB_ELFSIZE	64
@


1.21
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.20 2010/11/27 19:57:23 miod Exp $	*/
d101 2
@


1.20
log
@Remove ddb single-step load and store counters. Most platforms do not
implement them, and they are of questionable usefulness.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.19 2005/12/17 07:31:23 miod Exp $	*/
d27 2
a28 2
#ifndef	_ALPHA_DB_MACHDEP_H_
#define	_ALPHA_DB_MACHDEP_H_
d102 1
a102 1
#endif	/* _ALPHA_DB_MACHDEP_H_ */
@


1.19
log
@Get rid of deprecated vm_{offset,size}_t types for good, use {p,v}{addr,size}_t
instead; looked at millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.18 2005/01/04 21:14:35 espie Exp $	*/
a85 1
boolean_t db_inst_store(int);
a99 2
#define inst_load db_inst_load
#define inst_store db_inst_store
@


1.18
log
@SET_PC_REGS, arches tested between me and miod.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.17 2004/01/22 17:47:03 miod Exp $	*/
d47 1
a47 1
typedef	vm_offset_t db_addr_t;
@


1.17
log
@Nuke ddb_regs common.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.16 2003/10/18 20:14:41 jmc Exp $	*/
d55 1
@


1.16
log
@typos from Jared Yanovich;
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.15 2003/06/12 01:07:28 deraadt Exp $	*/
d51 1
a51 1
db_regs_t		ddb_regs;
@


1.15
log
@final bits of obvious UCB term 3 removal
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.14 2003/02/19 19:32:46 miod Exp $	*/
d4 1
a4 1
 * Copyright (c) 1997 Niklas Hallqvist.  All rights reserverd.
@


1.14
log
@Remove ddb machine commands, they are already available as "bo ha" and "bo re".
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.13 2002/03/14 01:26:27 millert Exp $	*/
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Niklas Hallqvist.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.13
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.12 2001/11/06 19:53:13 miod Exp $	*/
a36 2

#define DB_MACHINE_COMMANDS
@


1.12
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.11 2001/03/04 19:19:43 niklas Exp $	*/
d85 16
a100 16
int	alpha_debug __P((unsigned long, unsigned long, unsigned long,
    unsigned long, struct trapframe *));
db_addr_t db_branch_taken __P((int, db_addr_t, db_regs_t *));
boolean_t db_inst_branch __P((int));
boolean_t db_inst_call __P((int));
boolean_t db_inst_load __P((int));
boolean_t db_inst_return __P((int));
boolean_t db_inst_store __P((int));
boolean_t db_inst_trap_return __P((int));
boolean_t db_inst_unconditional_flow_transfer __P((int));
u_long	db_register_value  __P((db_regs_t *, int));
int	db_valid_breakpoint __P((db_addr_t));
int	ddb_trap __P((unsigned long, unsigned long, unsigned long,
    unsigned long, struct trapframe *));
int	kdb_trap __P((int, int, db_regs_t *));
db_addr_t next_instr_address __P((db_addr_t, int));
@


1.12.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.12 2001/11/06 19:53:13 miod Exp $	*/
d85 16
a100 16
int	alpha_debug(unsigned long, unsigned long, unsigned long,
    unsigned long, struct trapframe *);
db_addr_t db_branch_taken(int, db_addr_t, db_regs_t *);
boolean_t db_inst_branch(int);
boolean_t db_inst_call(int);
boolean_t db_inst_load(int);
boolean_t db_inst_return(int);
boolean_t db_inst_store(int);
boolean_t db_inst_trap_return(int);
boolean_t db_inst_unconditional_flow_transfer(int);
u_long	db_register_value(db_regs_t *, int);
int	db_valid_breakpoint(db_addr_t);
int	ddb_trap(unsigned long, unsigned long, unsigned long,
    unsigned long, struct trapframe *);
int	kdb_trap(int, int, db_regs_t *);
db_addr_t next_instr_address(db_addr_t, int);
@


1.12.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 2
@


1.11
log
@Revert to our old traceback code, with heuristic argument printout.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.8 2000/04/06 13:30:47 art Exp $	*/
d36 1
a36 1
#include <vm/vm.h>
@


1.10
log
@tag the rest of alpha tree
@
text
@d1 1
a1 2
/* $OpenBSD: db_machdep.h,v 1.11 2000/06/29 09:02:57 mrg Exp $ */
/* $NetBSD: db_machdep.h,v 1.11 2000/06/29 09:02:57 mrg Exp $ */
d4 1
a4 2
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
d6 24
a29 21
 * Author: Chris G. Demetriou
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
d35 5
d41 1
a41 1
 * Machine-dependent defines for new kernel debugger.
d43 2
d46 11
a56 7
#include <sys/param.h>
#include <vm/vm.h>
#include <uvm/uvm_extern.h>
#include <machine/frame.h>

typedef	vaddr_t		db_addr_t;	/* address - unsigned */
typedef	long		db_expr_t;	/* expression - signed */
d58 1
a58 2
typedef struct trapframe db_regs_t;
db_regs_t		ddb_regs;	/* register state */
d63 10
a72 10
#define	BKPT_INST	0x00000080	/* breakpoint instruction */
#define	BKPT_SIZE	(4)		/* size of breakpoint inst */
#define	BKPT_SET(inst)	(BKPT_INST)

#define	FIXUP_PC_AFTER_BREAK(regs) \
	((regs)->tf_regs[FRAME_PC] -= BKPT_SIZE)

#define	SOFTWARE_SSTEP	1		/* no hardware support */
#define	IS_BREAKPOINT_TRAP(type, code)	((type) == ALPHA_KENTRY_IF && \
					 (code) == ALPHA_IF_CODE_BPT)
d74 1
d76 1
a76 33
/*
 * Functions needed for software single-stepping.
 */

boolean_t	db_inst_trap_return(int inst);
boolean_t	db_inst_return(int inst);
boolean_t	db_inst_call(int inst);
boolean_t	db_inst_branch(int inst);
boolean_t	db_inst_load(int inst);
boolean_t	db_inst_store(int inst);
boolean_t	db_inst_unconditional_flow_transfer(int inst);
db_addr_t	db_branch_taken(int inst, db_addr_t pc, db_regs_t *regs);

#define	inst_trap_return(ins)	db_inst_trap_return(ins)
#define	inst_return(ins)	db_inst_return(ins)
#define	inst_call(ins)		db_inst_call(ins)
#define	inst_branch(ins)	db_inst_branch(ins)
#define	inst_load(ins)		db_inst_load(ins)
#define	inst_store(ins)		db_inst_store(ins)
#define	inst_unconditional_flow_transfer(ins) \
				db_inst_unconditional_flow_transfer(ins)
#define	branch_taken(ins, pc, getreg, regs) \
				db_branch_taken((ins), (pc), (regs))

/* No delay slots on Alpha. */
#define	next_instr_address(v, b) ((db_addr_t) ((b) ? (v) : ((v) + 4)))

u_long	db_register_value(db_regs_t *, int);
int	ddb_trap(unsigned long, unsigned long, unsigned long,
	    unsigned long, struct trapframe *);

int	alpha_debug(unsigned long, unsigned long, unsigned long,
	    unsigned long, struct trapframe *);
d78 2
a79 82
/*
 * We define some of our own commands.
 */
#define	DB_MACHINE_COMMANDS

/*
 * We use Elf64 symbols in DDB.
 */
#define	DB_ELF_SYMBOLS
#define	DB_ELFSIZE	64

/*
 * Stuff for KGDB.
 */
typedef long		kgdb_reg_t;
#define	KGDB_NUMREGS	66	/* from tm-alpha.h, NUM_REGS */
#define	KGDB_REG_V0	0
#define	KGDB_REG_T0	1
#define	KGDB_REG_T1	2
#define	KGDB_REG_T2	3
#define	KGDB_REG_T3	4
#define	KGDB_REG_T4	5
#define	KGDB_REG_T5	6
#define	KGDB_REG_T6	7
#define	KGDB_REG_T7	8
#define	KGDB_REG_S0	9
#define	KGDB_REG_S1	10
#define	KGDB_REG_S2	11
#define	KGDB_REG_S3	12
#define	KGDB_REG_S4	13
#define	KGDB_REG_S5	14
#define	KGDB_REG_S6	15	/* FP */
#define	KGDB_REG_A0	16
#define	KGDB_REG_A1	17
#define	KGDB_REG_A2	18
#define	KGDB_REG_A3	19
#define	KGDB_REG_A4	20
#define	KGDB_REG_A5	21
#define	KGDB_REG_T8	22
#define	KGDB_REG_T9	23
#define	KGDB_REG_T10	24
#define	KGDB_REG_T11	25
#define	KGDB_REG_RA	26
#define	KGDB_REG_T12	27
#define	KGDB_REG_AT	28
#define	KGDB_REG_GP	29
#define	KGDB_REG_SP	30
#define	KGDB_REG_ZERO	31
#define	KGDB_REG_F0	32
#define	KGDB_REG_F1	33
#define	KGDB_REG_F2	34
#define	KGDB_REG_F3	35
#define	KGDB_REG_F4	36
#define	KGDB_REG_F5	37
#define	KGDB_REG_F6	38
#define	KGDB_REG_F7	39
#define	KGDB_REG_F8	40
#define	KGDB_REG_F9	41
#define	KGDB_REG_F10	42
#define	KGDB_REG_F11	43
#define	KGDB_REG_F12	44
#define	KGDB_REG_F13	45
#define	KGDB_REG_F14	46
#define	KGDB_REG_F15	47
#define	KGDB_REG_F16	48
#define	KGDB_REG_F17	49
#define	KGDB_REG_F18	50
#define	KGDB_REG_F19	51
#define	KGDB_REG_F20	52
#define	KGDB_REG_F21	53
#define	KGDB_REG_F22	54
#define	KGDB_REG_F23	55
#define	KGDB_REG_F24	56
#define	KGDB_REG_F25	57
#define	KGDB_REG_F26	58
#define	KGDB_REG_F27	59
#define	KGDB_REG_F28	60
#define	KGDB_REG_F29	61
#define	KGDB_REG_F30	62
#define	KGDB_REG_F31	63
#define	KGDB_REG_PC	64
#define	KGDB_REG_VFP	65
d81 29
a109 2
/* Too much?  Must be large enough for register transfer. */
#define	KGDB_BUFLEN	1024
@


1.9
log
@Merge in big portions of the improvements NetBSD did to their alpha port.
Highlights: UVM, PMAP_NEW, bus_dma (only on some buses for now), new hardware
support, possiblity for ELF, etc, etc. Too much to mention.

This is still work in progress. video consoles might be broken, otherwise
we have basically the same functionality as before plus more.
@
text
@d1 1
@


1.8
log
@include vm/vm.h because some stuff in the kernel depends on that.
(all other archs include it)
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.7 1997/07/23 23:32:43 niklas Exp $	*/
d4 2
a5 1
 * Copyright (c) 1997 Niklas Hallqvist.  All rights reserverd.
d7 21
a27 24
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Niklas Hallqvist.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d33 5
a37 1
/* XXX - Need to include vm.h for boolean_t */
d39 5
a44 10
struct opcode {
	enum opc_fmt { OPC_PAL, OPC_RES, OPC_MEM, OPC_OP, OPC_BR } opc_fmt;
	char *opc_name;
	int opc_print;
};
extern struct opcode opcode[];

/* types the generic ddb module needs */
typedef	vm_offset_t db_addr_t;
typedef	long db_expr_t;
d46 1
a46 2

db_regs_t		ddb_regs;
d51 10
a60 10
/* Breakpoint related definitions */
#define	BKPT_INST	0x00000080	/* call_pal bpt */
#define	BKPT_SIZE	sizeof(int)
#define	BKPT_SET(inst)	BKPT_INST

#define	IS_BREAKPOINT_TRAP(type, code) \
    ((type) == ALPHA_KENTRY_IF && (code) == ALPHA_IF_CODE_BPT)
#ifdef notyet
#define	IS_WATCHPOINT_TRAP(type, code)	((type) == ALPHA_KENTRY_MM)
#else
a61 1
#endif
d63 38
a100 1
#define	FIXUP_PC_AFTER_BREAK(regs) ((regs)->tf_regs[FRAME_PC] -= sizeof(int))
d102 77
a178 2
#define SOFTWARE_SSTEP
#define DB_VALID_BREAKPOINT(addr) db_valid_breakpoint(addr)
d180 2
a181 13
/* Hack to skip GCC "unused" warnings. */
#define	inst_trap_return(ins)	((ins) & 0)		/* XXX */
#define	inst_return(ins)	(((ins) & 0xfc000000) == 0x68000000)

int inst_call __P((u_int));
int inst_branch __P((u_int));
int inst_load __P((u_int));
int inst_store __P((u_int));
db_addr_t branch_taken __P((u_int, db_addr_t,
    register_t (*) __P((db_regs_t *, int)), db_regs_t *));
db_addr_t next_instr_address __P((db_addr_t, int));
int kdb_trap __P((int, int, db_regs_t *));
int db_valid_breakpoint __P((db_addr_t));
@


1.7
log
@Correct the return instruction recognizer.  Add the DB_VALID_BREAKPOINT macro
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.6 1997/07/19 20:50:50 niklas Exp $	*/
d34 3
@


1.7.12.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.11 2001/03/04 19:19:43 niklas Exp $	*/
a34 11
/* XXX - Need to include vm.h for boolean_t */
#include <vm/vm.h>

#define DB_MACHINE_COMMANDS

/*
 * We use Elf64 symbols in DDB.
 */
#define	DB_ELF_SYMBOLS
#define	DB_ELFSIZE	64

d74 6
a79 15
int	alpha_debug __P((unsigned long, unsigned long, unsigned long,
    unsigned long, struct trapframe *));
db_addr_t db_branch_taken __P((int, db_addr_t, db_regs_t *));
boolean_t db_inst_branch __P((int));
boolean_t db_inst_call __P((int));
boolean_t db_inst_load __P((int));
boolean_t db_inst_return __P((int));
boolean_t db_inst_store __P((int));
boolean_t db_inst_trap_return __P((int));
boolean_t db_inst_unconditional_flow_transfer __P((int));
u_long	db_register_value  __P((db_regs_t *, int));
int	db_valid_breakpoint __P((db_addr_t));
int	ddb_trap __P((unsigned long, unsigned long, unsigned long,
    unsigned long, struct trapframe *));
int	kdb_trap __P((int, int, db_regs_t *));
d81 2
a82 9

#if 1
/* Backwards compatibility until we switch all archs to use the db_ prefix */
#define branch_taken(ins, pc, fun, regs) db_branch_taken((ins), (pc), (regs))
#define inst_branch db_inst_branch
#define inst_call db_inst_call
#define inst_load db_inst_load
#define inst_store db_inst_store
#endif
@


1.7.12.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 1
#include <uvm/uvm_extern.h>
@


1.7.12.3
log
@Merge in -current from about a week ago
@
text
@d85 16
a100 16
int	alpha_debug(unsigned long, unsigned long, unsigned long,
    unsigned long, struct trapframe *);
db_addr_t db_branch_taken(int, db_addr_t, db_regs_t *);
boolean_t db_inst_branch(int);
boolean_t db_inst_call(int);
boolean_t db_inst_load(int);
boolean_t db_inst_return(int);
boolean_t db_inst_store(int);
boolean_t db_inst_trap_return(int);
boolean_t db_inst_unconditional_flow_transfer(int);
u_long	db_register_value(db_regs_t *, int);
int	db_valid_breakpoint(db_addr_t);
int	ddb_trap(unsigned long, unsigned long, unsigned long,
    unsigned long, struct trapframe *);
int	kdb_trap(int, int, db_regs_t *);
db_addr_t next_instr_address(db_addr_t, int);
@


1.7.12.4
log
@Sync the SMP branch with 3.3
@
text
@d38 2
@


1.7.12.5
log
@Merge of -current from two weeks ago into the SMP branch
@
text
@d4 1
a4 1
 * Copyright (c) 1997 Niklas Hallqvist.  All rights reserved.
d14 5
d56 1
a56 1
extern db_regs_t	ddb_regs;
@


1.6
log
@Rewritten
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.5 1997/07/06 16:20:23 niklas Exp $	*/
d68 1
d72 1
a72 1
#define	inst_return(ins)	((ins) == 0x6bfa8001)
d82 1
@


1.5
log
@Make DDB support more complete (still faking a lot)
@
text
@d1 1
a1 2
/*	$OpenBSD: db_machdep.h,v 1.4 1997/03/21 00:48:43 niklas Exp $	*/
/*	$NetBSD: db_machdep.h,v 1.2 1996/07/11 05:31:31 cgd Exp $	*/
d4 1
a4 2
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
d6 24
a29 21
 * Author: Chris G. Demetriou
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
d35 11
a45 10
/*
 * Machine-dependent defines for new kernel debugger.
 */

#include <sys/param.h>
#include <vm/vm.h>
#include <machine/frame.h>

typedef	vm_offset_t	db_addr_t;	/* address - unsigned */
typedef	long		db_expr_t;	/* expression - signed */
d47 1
a47 2
typedef struct trapframe db_regs_t;
db_regs_t		ddb_regs;	/* register state */
d52 12
a63 5
#define	BKPT_INST	0x00000080	/* breakpoint instruction */
#define	BKPT_SIZE	(4)		/* size of breakpoint inst */
#define	BKPT_SET(inst)	(BKPT_INST)

#define	FIXUP_PC_AFTER_BREAK(regs) ((regs)->tf_regs[FRAME_PC] -= BKPT_SIZE)
d65 1
a65 2
#define	IS_BREAKPOINT_TRAP(type, code)	0
#define	IS_WATCHPOINT_TRAP(type, code)	0
d70 2
a71 20
#ifdef __GNUC__
#define	inst_trap_return(ins)	({(ins); 0;})
#define	inst_return(ins)	({(ins); 0;})
#define	inst_call(ins)		({(ins); 0;})
#define	inst_branch(ins)	({(ins); 0;})
#define inst_load(ins)		({(ins); 0;})
#define inst_store(ins)		({(ins); 0;})
#else
#define	inst_trap_return(ins)	0
#define	inst_return(ins)	0
#define	inst_call(ins)		0
#define	inst_branch(ins)	0
#define inst_load(ins)		0
#define inst_store(ins)		0
#endif

#define next_instr_address(pc, bd)	(pc + 4)

/* XXX temporary hack until we implement singlestepping */
#define branch_taken(a, b, c, d)	0
d73 7
@


1.4
log
@New FIXUP_PC_AFTER_BREAK convention from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.3 1996/10/30 22:38:58 niklas Exp $	*/
d56 29
@


1.3
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_machdep.h,v 1.2 1996/07/11 05:31:31 cgd Exp $	*/
d55 1
a55 1
#define	FIXUP_PC_AFTER_BREAK	ddb_regs.tf_regs[FRAME_PC] -= BKPT_SIZE;
@


1.2
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: db_machdep.h,v 1.1 1995/11/23 02:35:54 cgd Exp $	*/
/*	$NetBSD: db_machdep.h,v 1.1 1995/11/23 02:35:54 cgd Exp $	*/
d49 1
a49 1
#define	PC_REGS(regs)	((db_addr_t)(regs)->tf_pc)
d55 1
a55 1
#define	FIXUP_PC_AFTER_BREAK	ddb_regs.tf_pc -= BKPT_SIZE;
@


1.1
log
@update to netbsd
@
text
@d1 1
@
