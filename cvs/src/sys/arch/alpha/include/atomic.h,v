head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.12
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.14
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.8
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.4
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.8
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.6
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.4
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.4
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.2
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.5.0.2
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.3.0.20
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.18
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.16
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.14
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.12
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.8
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.12
date	2014.03.29.18.09.28;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2014.01.26.17.40.11;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.25.05.25.00;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.23.16.54.33;	author pirofti;	state Exp;
branches;
next	1.8;

1.8
date	2009.04.25.19.14.58;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.17.09.12.03;	author martin;	state Exp;
branches;
next	1.5;

1.5
date	2007.02.19.17.18.40;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2007.02.06.17.13.33;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.15.15.31.58;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.08.21.27.16;	author ericj;	state Exp;
branches
	1.2.2.1
	1.2.8.1;
next	1.1;

1.1
date	2000.11.08.16.01.10;	author art;	state Exp;
branches;
next	;

1.2.2.1
date	2001.04.18.16.00.46;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.03.06.00.47.44;	author niklas;	state Exp;
branches;
next	;

1.2.8.1
date	2002.06.11.03.33.40;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@/*	$OpenBSD: atomic.h,v 1.11 2014/01/26 17:40:11 miod Exp $	*/
/* $NetBSD: atomic.h,v 1.7 2001/12/17 23:34:57 thorpej Exp $ */

/*-
 * Copyright (c) 1998, 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Misc. `atomic' operations.
 */

#ifndef _MACHINE_ATOMIC_H_
#define	_MACHINE_ATOMIC_H_

#if defined(_KERNEL)

/*
 * atomic_setbits_ulong:
 *
 *	Atomically set bits in a `unsigned long'.
 */
static __inline void
atomic_setbits_ulong(volatile unsigned long *ulp, unsigned long v)
{
	unsigned long t0;

	__asm volatile(
		"# BEGIN atomic_setbits_ulong\n"
		"1:	ldq_l	%0, %1		\n"
		"	or	%0, %2, %0	\n"
		"	stq_c	%0, %1		\n"
		"	beq	%0, 2f		\n"
		"	mb			\n"
		"	br	3f		\n"
		"2:	br	1b		\n"
		"3:				\n"
		"	# END atomic_setbits_ulong"
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v)
		: "memory");
}

/*
 * atomic_clearbits_ulong:
 *
 *	Atomically clear bits in a `unsigned long'.
 */
static __inline void
atomic_clearbits_ulong(volatile unsigned long *ulp, unsigned long v)
{
	unsigned long t0;

	__asm volatile(
		"# BEGIN atomic_clearbits_ulong\n"
		"1:	ldq_l	%0, %1		\n"
		"	and	%0, %2, %0	\n"
		"	stq_c	%0, %1		\n"
		"	beq	%0, 2f		\n"
		"	mb			\n"
		"	br	3f		\n"
		"2:	br	1b		\n"
		"3:				\n"
		"	# END atomic_clearbits_ulong"
		: "=&r" (t0), "=m" (*ulp)
		: "r" (~v)
		: "memory");
}

/*
 * atomic_add_ulong:
 *
 *	Atomically add a value to a `unsigned long'.
 */
static __inline void
atomic_add_ulong(volatile unsigned long *ulp, unsigned long v)
{
	unsigned long t0;

	__asm volatile(
		"# BEGIN atomic_add_ulong\n"
		"1:	ldq_l	%0, %1		\n"
		"	addq	%0, %2, %0	\n"
		"	stq_c	%0, %1		\n"
		"	beq	%0, 2f		\n"
		"	mb			\n"
		"	br	3f		\n"
		"2:	br	1b		\n"
		"3:				\n"
		"	# END atomic_add_ulong"
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v)
		: "memory");
}

/*
 * atomic_sub_ulong:
 *
 *	Atomically subtract a value from a `unsigned long'.
 */
static __inline void
atomic_sub_ulong(volatile unsigned long *ulp, unsigned long v)
{
	unsigned long t0;

	__asm volatile(
		"# BEGIN atomic_sub_ulong\n"
		"1:	ldq_l	%0, %1		\n"
		"	subq	%0, %2, %0	\n"
		"	stq_c	%0, %1		\n"
		"	beq	%0, 2f		\n"
		"	mb			\n"
		"	br	3f		\n"
		"2:	br	1b		\n"
		"3:				\n"
		"	# END atomic_sub_ulong"
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v)
		: "memory");
}

/*
 * atomic_loadlatch_ulong:
 *
 *	Atomically load and latch a `unsigned long' value.
 */
static __inline unsigned long
atomic_loadlatch_ulong(volatile unsigned long *ulp, unsigned long v)
{
	unsigned long t0, v0;

	__asm volatile(
		"# BEGIN atomic_loadlatch_ulong\n"
		"1:	mov	%3, %0		\n"
		"	ldq_l	%1, %2		\n"
		"	stq_c	%0, %2		\n"
		"	beq	%0, 2f		\n"
		"	mb			\n"
		"	br	3f		\n"
		"2:	br	1b		\n"
		"3:				\n"
		"	# END atomic_loadlatch_ulong"
		: "=&r" (t0), "=r" (v0), "=m" (*ulp)
		: "r" (v)
		: "memory");

	return (v0);
}

/*
 * atomic_setbits_int:
 *
 *	Atomically set bits in a `unsigned int'.
 */
static __inline void
atomic_setbits_int(volatile unsigned int *uip, unsigned int v)
{
	unsigned int t0;

	__asm volatile(
		"# BEGIN atomic_setbits_ulong\n"
		"1:	ldl_l	%0, %1		\n"
		"	or	%0, %2, %0	\n"
		"	stl_c	%0, %1		\n"
		"	beq	%0, 2f		\n"
		"	mb			\n"
		"	br	3f		\n"
		"2:	br	1b		\n"
		"3:				\n"
		"	# END atomic_setbits_int"
		: "=&r" (t0), "=m" (*uip)
		: "r" (v)
		: "memory");
}

/*
 * atomic_clearbits_int:
 *
 *	Atomically clear bits in a `unsigned int'.
 */
static __inline void
atomic_clearbits_int(volatile unsigned int *uip, unsigned int v)
{
	unsigned int t0;

	__asm volatile(
		"# BEGIN atomic_clearbits_int\n"
		"1:	ldl_l	%0, %1		\n"
		"	and	%0, %2, %0	\n"
		"	stl_c	%0, %1		\n"
		"	beq	%0, 2f		\n"
		"	mb			\n"
		"	br	3f		\n"
		"2:	br	1b		\n"
		"3:				\n"
		"	# END atomic_clearbits_int"
		: "=&r" (t0), "=m" (*uip)
		: "r" (~v)
		: "memory");
}

/*
 * atomic_add_int:
 *
 *	Atomically add a value to an `int'.
 */
static __inline void
atomic_add_int(volatile int *ulp, int v)
{
	unsigned long t0;

	__asm volatile(
		"# BEGIN atomic_add_int\n"
		"1:	ldl_l	%0, %1		\n"
		"	addl	%0, %2, %0	\n"
		"	stl_c	%0, %1		\n"
		"	beq	%0, 2f		\n"
		"	mb			\n"
		"	br	3f		\n"
		"2:	br	1b		\n"
		"3:				\n"
		"	# END atomic_add_ulong"
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v)
		: "memory");
}

#endif /* defined(_KERNEL) */
#endif /* _MACHINE_ATOMIC_H_ */
@


1.11
log
@Work in progress work towards SMP, heavily based upon NetBSD. The MP kernel
will boot multiuser, but will deadlock under load, and I can't find my
mistake yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.10 2011/11/25 05:25:00 miod Exp $	*/
d49 1
a49 1
atomic_setbits_ulong(__volatile unsigned long *ulp, unsigned long v)
d53 1
a53 1
	__asm __volatile(
d75 1
a75 1
atomic_clearbits_ulong(__volatile unsigned long *ulp, unsigned long v)
d79 1
a79 1
	__asm __volatile(
d101 1
a101 1
atomic_add_ulong(__volatile unsigned long *ulp, unsigned long v)
d105 1
a105 1
	__asm __volatile(
d127 1
a127 1
atomic_sub_ulong(__volatile unsigned long *ulp, unsigned long v)
d131 1
a131 1
	__asm __volatile(
d153 1
a153 1
atomic_loadlatch_ulong(__volatile unsigned long *ulp, unsigned long v)
d157 1
a157 1
	__asm __volatile(
d181 1
a181 1
atomic_setbits_int(__volatile unsigned int *uip, unsigned int v)
d185 1
a185 1
	__asm __volatile(
d207 1
a207 1
atomic_clearbits_int(__volatile unsigned int *uip, unsigned int v)
d211 1
a211 1
	__asm __volatile(
d233 1
a233 1
atomic_add_int(__volatile int *ulp, int v)
d237 1
a237 1
	__asm __volatile(
@


1.10
log
@Rework assembler constraints to satisfy gcc 4. Unfortunately this could not
been done earlier because these new and improved constraints lose bigtime
with gcc3, so be sure to compile your kernel with gcc 4 only if you have
atomic.h 1.10 onwards.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.9 2011/03/23 16:54:33 pirofti Exp $	*/
d224 26
@


1.9
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.8 2009/04/25 19:14:58 miod Exp $	*/
d55 1
a55 1
		"1:	ldq_l	%0, %3		\n"
d64 2
a65 2
		: "=&r" (t0), "+m" (*ulp)
		: "r" (v), "1" (*ulp)
d81 1
a81 1
		"1:	ldq_l	%0, %3		\n"
d90 2
a91 2
		: "=&r" (t0), "+m" (*ulp)
		: "r" (~v), "1" (*ulp)
d107 1
a107 1
		"1:	ldq_l	%0, %3		\n"
d116 2
a117 2
		: "=&r" (t0), "+m" (*ulp)
		: "r" (v), "1" (*ulp)
d133 1
a133 1
		"1:	ldq_l	%0, %3		\n"
d142 2
a143 2
		: "=&r" (t0), "+m" (*ulp)
		: "r" (v), "1" (*ulp)
d160 1
a160 1
		"	ldq_l	%1, %4		\n"
d168 2
a169 2
		: "=&r" (t0), "=r" (v0), "+m" (*ulp)
		: "r" (v), "2" (*ulp)
d187 1
a187 1
		"1:	ldl_l	%0, %3		\n"
d196 2
a197 2
		: "=&r" (t0), "+m" (*uip)
		: "r" (v), "1" (*uip)
d213 1
a213 1
		"1:	ldl_l	%0, %3		\n"
d222 2
a223 2
		: "=&r" (t0), "+m" (*uip)
		: "r" (~v), "1" (*uip)
@


1.8
log
@Strengthen the constraints of the atomic operations assembly statements
to make sure the register holding the ld_l and st_c addresses doesn't
get reused when gcc's register allocator is too aggressive.
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.7 2008/06/26 05:42:08 ray Exp $	*/
d38 2
a39 2
#ifndef _ALPHA_ATOMIC_H_
#define	_ALPHA_ATOMIC_H_
d228 1
a228 1
#endif /* _ALPHA_ATOMIC_H_ */
@


1.7
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.6 2007/03/17 09:12:03 martin Exp $	*/
d64 2
a65 2
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v), "m" (*ulp)
d90 2
a91 2
		: "=&r" (t0), "=m" (*ulp)
		: "r" (~v), "m" (*ulp)
d116 2
a117 2
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v), "m" (*ulp)
d142 2
a143 2
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v), "m" (*ulp)
d168 2
a169 2
		: "=&r" (t0), "=r" (v0), "=m" (*ulp)
		: "r" (v), "m" (*ulp)
d196 2
a197 2
		: "=&r" (t0), "=m" (*uip)
		: "r" (v), "m" (*uip)
d222 2
a223 2
		: "=&r" (t0), "=m" (*uip)
		: "r" (~v), "m" (*uip)
@


1.6
log
@add proper atomic_{set,clear}bits_int implementation

prodded by art@@ ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.5 2007/02/19 17:18:40 deraadt Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.5
log
@only make this interface available to the kernel for now, discussed witha
rt and such; tested and ok miod drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.4 2007/02/06 17:13:33 art Exp $	*/
d182 5
d190 16
a205 1
	*uip |= v;
d208 5
d216 16
a231 1
	*uip &= ~v;
@


1.4
log
@Add machine/atomic.h to all architectures and define two operations
right now that are supposed to be atomic with respect to interrupts and
SMP: atomic_setbits_int and atomic_clearbits_int.

All architectures other than i386 and amd64 get dummy implementations
since at first we'll be replacing operations that are done with
"a |= bit" and "a &= ~bit" today. More proper implementations will follow

kettenis@@, miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: atomic.h,v 1.3 2002/02/15 15:31:58 art Exp $	*/
d48 2
d194 1
@


1.3
log
@Fix the __asm__ statements and remove the workarounds.
From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d178 12
@


1.2
log
@tag the rest of alpha tree
@
text
@d1 2
a2 2
/* $OpenBSD: atomic.h,v 1.5 2000/06/08 02:54:55 thorpej Exp $ */
/* $NetBSD: atomic.h,v 1.5 2000/06/08 02:54:55 thorpej Exp $ */
a55 3
#if 1
	*ulp |= v;
#else
d69 3
a71 3
		: "=r" (t0), "=m" (*ulp)
		: "r" (v), "1" (*ulp));
#endif
a81 3
#if 1
	*ulp &= ~v;
#else
d95 3
a97 3
		: "=r" (t0), "=m" (*ulp)
		: "r" (~v), "1" (*ulp));
#endif
d121 3
a123 2
		: "=r" (t0), "=m" (*ulp)
		: "r" (v), "1" (*ulp));
d147 3
a149 2
		: "=r" (t0), "=m" (*ulp)
		: "r" (v), "1" (*ulp));
d173 3
a175 2
		: "=r" (t0), "=r" (v0), "=m" (*ulp)
		: "r" (v), "2" (*ulp));
@


1.2.8.1
log
@Sync UBC branch to -current
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/* $NetBSD: atomic.h,v 1.7 2001/12/17 23:34:57 thorpej Exp $ */
d56 3
d72 3
a74 3
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v), "m" (*ulp)
		: "memory");
d85 3
d101 3
a103 3
		: "=&r" (t0), "=m" (*ulp)
		: "r" (~v), "m" (*ulp)
		: "memory");
d127 2
a128 3
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v), "m" (*ulp)
		: "memory");
d152 2
a153 3
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v), "m" (*ulp)
		: "memory");
d177 2
a178 3
		: "=&r" (t0), "=r" (v0), "=m" (*ulp)
		: "r" (v), "m" (*ulp)
		: "memory");
@


1.2.2.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/* $OpenBSD: atomic.h,v 1.2 2000/11/08 21:27:16 ericj Exp $ */
@


1.2.2.2
log
@Merge in trunk
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/* $NetBSD: atomic.h,v 1.7 2001/12/17 23:34:57 thorpej Exp $ */
d56 3
d72 3
a74 3
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v), "m" (*ulp)
		: "memory");
d85 3
d101 3
a103 3
		: "=&r" (t0), "=m" (*ulp)
		: "r" (~v), "m" (*ulp)
		: "memory");
d127 2
a128 3
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v), "m" (*ulp)
		: "memory");
d152 2
a153 3
		: "=&r" (t0), "=m" (*ulp)
		: "r" (v), "m" (*ulp)
		: "memory");
d177 2
a178 3
		: "=&r" (t0), "=r" (v0), "=m" (*ulp)
		: "r" (v), "m" (*ulp)
		: "memory");
@


1.1
log
@Merge in big portions of the improvements NetBSD did to their alpha port.
Highlights: UVM, PMAP_NEW, bus_dma (only on some buses for now), new hardware
support, possiblity for ELF, etc, etc. Too much to mention.

This is still work in progress. video consoles might be broken, otherwise
we have basically the same functionality as before plus more.
@
text
@d1 1
@

