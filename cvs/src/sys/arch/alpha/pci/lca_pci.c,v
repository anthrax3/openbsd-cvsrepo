head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.8
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.4
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.10.0.14
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.18
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.18
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.14
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.16
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.12
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.18
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.16
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.14
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.12
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.10
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.8
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.5.0.18
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.16
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.14
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.12
date	2015.10.30.07.51.49;	author miod;	state Exp;
branches;
next	1.11;
commitid	z4wcFsTNnTFyyLXA;

1.11
date	2015.07.18.00.21.14;	author miod;	state Exp;
branches;
next	1.10;
commitid	LQ2OVsbSkYFQWN26;

1.10
date	2010.12.04.17.06.31;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.26.20.23.08;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.27;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.06.19.53.13;	author miod;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.02.16.16.02.54;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	97.01.24.19.57.44;	author niklas;	state Exp;
branches
	1.5.14.1;
next	1.4;

1.4
date	96.10.30.22.40.00;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.07.29.23.00.28;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.18.09.44.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.03.53.26;	author deraadt;	state Exp;
branches;
next	;

1.5.14.1
date	2001.04.18.16.01.19;	author niklas;	state Exp;
branches;
next	1.5.14.2;

1.5.14.2
date	2001.11.13.21.00.49;	author niklas;	state Exp;
branches;
next	1.5.14.3;

1.5.14.3
date	2002.03.28.10.06.13;	author niklas;	state Exp;
branches;
next	;

1.7.2.1
date	2002.06.11.03.33.40;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Use NULL instead of 0 for pci_decompose_tag() pointer arguments.
@
text
@/*	$OpenBSD: lca_pci.c,v 1.11 2015/07/18 00:21:14 miod Exp $	*/
/* $NetBSD: lca_pci.c,v 1.13 1997/09/02 13:19:35 thorpej Exp $ */

/*
 * Copyright (c) 1995, 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>

#include <uvm/uvm_extern.h>

#include <machine/autoconf.h>	/* badaddr proto */

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <alpha/pci/lcareg.h>
#include <alpha/pci/lcavar.h>

void		lca_attach_hook(struct device *, struct device *,
		    struct pcibus_attach_args *);
int		lca_bus_maxdevs(void *, int);
pcitag_t	lca_make_tag(void *, int, int, int);
void		lca_decompose_tag(void *, pcitag_t, int *, int *,
		    int *);
int		lca_conf_size(void *, pcitag_t);
pcireg_t	lca_conf_read(void *, pcitag_t, int);
void		lca_conf_write(void *, pcitag_t, int, pcireg_t);

void
lca_pci_init(pc, v)
	pci_chipset_tag_t pc;
	void *v;
{

	pc->pc_conf_v = v;
	pc->pc_attach_hook = lca_attach_hook;
	pc->pc_bus_maxdevs = lca_bus_maxdevs;
	pc->pc_make_tag = lca_make_tag;
	pc->pc_decompose_tag = lca_decompose_tag;
	pc->pc_conf_size = lca_conf_size;
	pc->pc_conf_read = lca_conf_read;
	pc->pc_conf_write = lca_conf_write;
}

void
lca_attach_hook(parent, self, pba)
	struct device *parent, *self;
	struct pcibus_attach_args *pba;
{
}

int
lca_bus_maxdevs(cpv, busno)
	void *cpv;
	int busno;
{

	if (busno == 0)
		return 16;
	else
		return 32;
}

pcitag_t
lca_make_tag(cpv, b, d, f)
	void *cpv;
	int b, d, f;
{

	return (b << 16) | (d << 11) | (f << 8);
}

void
lca_decompose_tag(cpv, tag, bp, dp, fp)
	void *cpv;
	pcitag_t tag;
	int *bp, *dp, *fp;
{

	if (bp != NULL)
		*bp = (tag >> 16) & 0xff;
	if (dp != NULL)
		*dp = (tag >> 11) & 0x1f;
	if (fp != NULL)
		*fp = (tag >> 8) & 0x7;
}

int
lca_conf_size(void *cpv, pcitag_t tag)
{
	return PCI_CONFIG_SPACE_SIZE;
}

pcireg_t
lca_conf_read(cpv, tag, offset)
	void *cpv;
	pcitag_t tag;
	int offset;
{
	struct lca_config *lcp = cpv;
	pcireg_t *datap, data;
	int s, secondary, device, ba;

	s = 0;					/* XXX gcc -Wuninitialized */

	alpha_mb();
	REGVAL64(LCA_IOC_STAT0) = REGVAL64(LCA_IOC_STAT0);
	alpha_mb();

	/* secondary if bus # != 0 */
	pci_decompose_tag(&lcp->lc_pc, tag, &secondary, &device, NULL);
	if (secondary) {
		s = splhigh();
		alpha_mb();
		REGVAL(LCA_IOC_CONF) = 0x01;
		alpha_mb();
	} else {
		/*
		 * on the LCA, must frob the tag used for
		 * devices on the primary bus, in the same ways
		 * as is used by type 1 configuration cycles
		 * on PCs.
		 */
		tag = (1 << (device + 11)) | (tag & 0x7ff);
	}

	datap = (pcireg_t *)ALPHA_PHYS_TO_K0SEG(LCA_PCI_CONF |
	    tag << 5UL |					/* XXX */
	    (offset & ~0x03) << 5 |				/* XXX */
	    0 << 5 |						/* XXX */
	    0x3 << 3);						/* XXX */
	data = (pcireg_t)-1;
	if (!(ba = badaddr(datap, sizeof *datap))) {
		if (REGVAL64(LCA_IOC_STAT0) & IOC_STAT0_ERR) {
			alpha_mb();
			REGVAL64(LCA_IOC_STAT0) = REGVAL64(LCA_IOC_STAT0);
			alpha_mb();
		} else
			data = *datap;
	}

	if (secondary) {
		alpha_mb();
		REGVAL(LCA_IOC_CONF) = 0x00;
		alpha_mb();
		splx(s);
	}

#if 0
	printf("lca_conf_read: tag 0x%lx, reg 0x%lx -> %x @@ %p%s\n", tag, reg,
	    data, datap, ba ? " (badaddr)" : "");
#endif

	return data;
}

void
lca_conf_write(cpv, tag, offset, data)
	void *cpv;
	pcitag_t tag;
	int offset;
	pcireg_t data;
{
	struct lca_config *lcp = cpv;
	pcireg_t *datap;
	int s, secondary, device;

	s = 0;					/* XXX gcc -Wuninitialized */

	/* secondary if bus # != 0 */
	pci_decompose_tag(&lcp->lc_pc, tag, &secondary, &device, NULL);
	if (secondary) {
		s = splhigh();
		alpha_mb();
		REGVAL(LCA_IOC_CONF) = 0x01;
		alpha_mb();
	} else {
		/*
		 * on the LCA, must frob the tag used for
		 * devices on the primary bus, in the same ways
		 * as is used by type 1 configuration cycles
		 * on PCs.
		 */
		tag = (1 << (device + 11)) | (tag & 0x7ff);
	}

	datap = (pcireg_t *)ALPHA_PHYS_TO_K0SEG(LCA_PCI_CONF |
	    tag << 5UL |					/* XXX */
	    (offset & ~0x03) << 5 |				/* XXX */
	    0 << 5 |						/* XXX */
	    0x3 << 3);						/* XXX */
	*datap = data;

	if (secondary) {
		alpha_mb();
		REGVAL(LCA_IOC_CONF) = 0x00;	
		alpha_mb();
		splx(s);
	}

#if 0
	printf("lca_conf_write: tag 0x%lx, reg 0x%lx -> 0x%x @@ %p\n", tag,
	    reg, data, datap);
#endif
}
@


1.11
log
@Check for errors in the status register after performing a PCI configuration
space read, for errors may not cause a machine check.
This makes phantom PCI devices disappear on alphabook.
@
text
@d1 1
a1 1
/*	$OpenBSD: lca_pci.c,v 1.10 2010/12/04 17:06:31 miod Exp $	*/
d137 1
a137 1
	pci_decompose_tag(&lcp->lc_pc, tag, &secondary, &device, 0);
d197 1
a197 1
	pci_decompose_tag(&lcp->lc_pc, tag, &secondary, &device, 0);
@


1.10
log
@Introduce a new pci routine, pci_conf_size(), which returns the size of a
given pcitag_t configuration address space. Currently, all pci controllers
will return the usual 0x100 bytes of PCI configuration space, but this will
eventually change on PCIe-capable controlers.
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lca_pci.c,v 1.9 2006/03/26 20:23:08 brad Exp $	*/
d132 4
d159 8
a166 2
	if (!(ba = badaddr(datap, sizeof *datap)))
		data = *datap;
@


1.9
log
@Replace usage of alpha_pci_decompose_tag() with pci_decompose_tag() and
remove alpha_pci_decompose_tag().

From NetBSD

ok martin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lca_pci.c,v 1.8 2002/03/14 01:26:27 millert Exp $	*/
d51 1
d66 1
d112 6
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: lca_pci.c,v 1.7 2001/11/06 19:53:13 miod Exp $	*/
d125 1
a125 1
	alpha_pci_decompose_tag(&lcp->lc_pc, tag, &secondary, &device, 0);
d179 1
a179 1
	alpha_pci_decompose_tag(&lcp->lc_pc, tag, &secondary, &device, 0);
@


1.7
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: lca_pci.c,v 1.6 2001/02/16 16:02:54 jason Exp $	*/
d45 8
a52 8
void		lca_attach_hook __P((struct device *, struct device *,
		    struct pcibus_attach_args *));
int		lca_bus_maxdevs __P((void *, int));
pcitag_t	lca_make_tag __P((void *, int, int, int));
void		lca_decompose_tag __P((void *, pcitag_t, int *, int *,
		    int *));
pcireg_t	lca_conf_read __P((void *, pcitag_t, int));
void		lca_conf_write __P((void *, pcitag_t, int, pcireg_t));
@


1.7.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lca_pci.c,v 1.7 2001/11/06 19:53:13 miod Exp $	*/
d45 8
a52 8
void		lca_attach_hook(struct device *, struct device *,
		    struct pcibus_attach_args *);
int		lca_bus_maxdevs(void *, int);
pcitag_t	lca_make_tag(void *, int, int, int);
void		lca_decompose_tag(void *, pcitag_t, int *, int *,
		    int *);
pcireg_t	lca_conf_read(void *, pcitag_t, int);
void		lca_conf_write(void *, pcitag_t, int, pcireg_t);
@


1.6
log
@Finish merging lca to become closer to current netbsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: lca_pci.c,v 1.5 1997/01/24 19:57:44 niklas Exp $	*/
d36 1
a36 1
#include <vm/vm.h>
@


1.5
log
@Sync with NetBSD 961207
@
text
@d1 2
a2 2
/*	$OpenBSD: lca_pci.c,v 1.4 1996/10/30 22:40:00 niklas Exp $	*/
/*	$NetBSD: lca_pci.c,v 1.7 1996/11/13 21:13:28 cgd Exp $	*/
d35 1
a121 1
#ifdef DIAGNOSTIC
a122 1
#endif
d125 1
a125 1
	pci_decompose_tag(&lcp->lc_pc, tag, &secondary, &device, 0);
a175 1
#ifdef DIAGNOSTIC
a176 1
#endif
d179 1
a179 1
	pci_decompose_tag(&lcp->lc_pc, tag, &secondary, &device, 0);
@


1.5.14.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 2
a2 2
/*	$OpenBSD: lca_pci.c,v 1.6 2001/02/16 16:02:54 jason Exp $	*/
/* $NetBSD: lca_pci.c,v 1.13 1997/09/02 13:19:35 thorpej Exp $ */
a34 1

d121 1
d123 1
d126 1
a126 1
	alpha_pci_decompose_tag(&lcp->lc_pc, tag, &secondary, &device, 0);
d177 1
d179 1
d182 1
a182 1
	alpha_pci_decompose_tag(&lcp->lc_pc, tag, &secondary, &device, 0);
@


1.5.14.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 1
#include <uvm/uvm_extern.h>
@


1.5.14.3
log
@Merge in -current from about a week ago
@
text
@d45 8
a52 8
void		lca_attach_hook(struct device *, struct device *,
		    struct pcibus_attach_args *);
int		lca_bus_maxdevs(void *, int);
pcitag_t	lca_make_tag(void *, int, int, int);
void		lca_decompose_tag(void *, pcitag_t, int *, int *,
		    int *);
pcireg_t	lca_conf_read(void *, pcitag_t, int);
void		lca_conf_write(void *, pcitag_t, int, pcireg_t);
@


1.4
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 2
a2 2
/*	$OpenBSD: lca_pci.c,v 1.6 1996/10/13 03:00:08 christos Exp $	*/
/*	$NetBSD: lca_pci.c,v 1.6 1996/10/13 03:00:08 christos Exp $	*/
d121 4
d176 4
@


1.3
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: lca_pci.c,v 1.3 1996/04/23 14:01:00 cgd Exp $	*/
/*	$NetBSD: lca_pci.c,v 1.3 1996/04/23 14:01:00 cgd Exp $	*/
d37 2
d125 1
a125 1
		wbflush();
d127 1
a127 1
		wbflush();
d138 1
a138 1
	datap = (pcireg_t *)phystok0seg(LCA_PCI_CONF |
d148 1
a148 1
		wbflush();
d150 1
a150 1
		wbflush();
d177 1
a177 1
		wbflush();
d179 1
a179 1
		wbflush();
d190 1
a190 1
	datap = (pcireg_t *)phystok0seg(LCA_PCI_CONF |
d198 1
a198 1
		wbflush();
d200 1
a200 1
		wbflush();
@


1.2
log
@sync to 0616, retaining local diffs
@
text
@d1 1
@


1.1
log
@update to netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: lca_pci.c,v 1.1 1995/11/23 02:37:42 cgd Exp $	*/
d4 1
a4 1
 * Copyright (c) 1995 Carnegie-Mellon University.
d7 1
a7 1
 * Author: Jeffrey Hsu
d41 8
a48 14
pci_confreg_t	lca_conf_read __P((void *, pci_conftag_t, pci_confoffset_t));
void		lca_conf_write __P((void *, pci_conftag_t,
		    pci_confoffset_t, pci_confreg_t));
int		lca_find_io __P((void *, pci_conftag_t,
		    pci_confoffset_t, pci_iooffset_t *, pci_iosize_t *));
int		lca_find_mem __P((void *, pci_conftag_t,
		    pci_confoffset_t, pci_moffset_t *, pci_msize_t *, int *));

__const struct pci_conf_fns lca_conf_fns = {
	lca_conf_read,
	lca_conf_write,
	lca_find_io,
	lca_find_mem,
};
d50 59
a108 1
pci_confreg_t
d111 2
a112 2
	pci_conftag_t tag;
	pci_confoffset_t offset;
d114 3
a116 4
	pci_confreg_t *datap, data;
	int s, secondary, ba;
	int32_t old_ioc_conf;					/* XXX */
	u_int64_t dev_sel;
d118 2
a119 3
	dev_sel = 1 << PCI_TAG_DEVICE(tag) + 11;

	secondary = PCI_TAG_BUS(tag) != 0;
a121 1
		old_ioc_conf = REGVAL(LCA_IOC_CONF);
d123 1
a123 1
		REGVAL(LCA_IOC_CONF) = old_ioc_conf | 0x1;
d125 8
d135 2
a136 2
	datap = (pci_confreg_t *)phystok0seg(LCA_PCI_CONF |
	    dev_sel << 5UL |				/* XXX */
d140 1
a140 1
	data = (pci_confreg_t)-1;
d146 1
a146 1
		REGVAL(LCA_IOC_CONF) = old_ioc_conf;
d152 2
a153 2
	printf("lca_conf_read: tag 0x%x, offset 0x%x -> %x @@ %p%s\n", tag,
	    offset, data, datap, ba ? " (badaddr)" : "");
d162 7
a168 10
	pci_conftag_t tag;
	pci_confoffset_t offset;
	pci_confreg_t data;
{
	pci_confreg_t *datap;
	int s, secondary;
	int32_t old_ioc_conf;					/* XXX */
	int32_t dev_sel;

	dev_sel = 1 << PCI_TAG_DEVICE(tag) + 11;
d170 2
a171 1
	secondary = PCI_TAG_BUS(tag) != 0;
a173 1
		old_ioc_conf = REGVAL(LCA_IOC_CONF);
d175 1
a175 1
		REGVAL(LCA_IOC_CONF) = old_ioc_conf | 0x1;
d177 8
d187 2
a188 2
	datap = (pci_confreg_t *)phystok0seg(LCA_PCI_CONF |
	    dev_sel << 5UL |				/* XXX */
d196 1
a196 1
		REGVAL(LCA_IOC_CONF) = old_ioc_conf;	
d202 2
a203 2
	printf("lca_conf_write: tag 0x%x, offset 0x%x -> 0x%x @@ %p\n", tag,
	    offset, data, datap);
a204 83
}

int
lca_find_io(cpv, tag, reg, iobasep, sizep)
	void *cpv;
	pci_conftag_t tag;
	pci_confoffset_t reg;
	pci_iooffset_t *iobasep;
	pci_iosize_t *sizep;
{
	struct lca_config *lcp = cpv;
	pci_confreg_t addrdata, sizedata;
	pci_iooffset_t pci_iobase;

	if (reg < PCI_MAPREG_START || reg >= PCI_MAPREG_END || (reg & 3))
		panic("lca_map_io: bad request");

	addrdata = PCI_CONF_READ(lcp->lc_conffns, lcp->lc_confarg, tag, reg);

	PCI_CONF_WRITE(lcp->lc_conffns, lcp->lc_confarg, tag, reg, 0xffffffff);
	sizedata = PCI_CONF_READ(lcp->lc_conffns, lcp->lc_confarg, tag, reg);
	PCI_CONF_WRITE(lcp->lc_conffns, lcp->lc_confarg, tag, reg, addrdata);

	if (PCI_MAPREG_TYPE(addrdata) == PCI_MAPREG_TYPE_MEM)
		panic("lca_map_io: attempt to I/O map an memory region");

	if (iobasep != NULL)
		*iobasep = PCI_MAPREG_IO_ADDRESS(addrdata);
	if (sizep != NULL)
		*sizep = ~PCI_MAPREG_IO_ADDRESS(sizedata) + 1;

	return (0);
}

int
lca_find_mem(cpv, tag, reg, paddrp, sizep, cacheablep)
	void *cpv;
	pci_conftag_t tag;
	pci_confoffset_t reg;
	pci_moffset_t *paddrp;
	pci_msize_t *sizep;
	int *cacheablep;
{
	struct lca_config *lcp = cpv;
	pci_confreg_t addrdata, sizedata;

	if (reg < PCI_MAPREG_START || reg >= PCI_MAPREG_END || (reg & 3))
		panic("lca_map_mem: bad request");

	/*
	 * The PROM has mapped the device for us.  We take the address
	 * that's been assigned to the register, and figure out what
	 * physical and virtual addresses go with it...
	 */
	addrdata = PCI_CONF_READ(lcp->lc_conffns, lcp->lc_confarg, tag, reg);

	PCI_CONF_WRITE(lcp->lc_conffns, lcp->lc_confarg, tag, reg, 0xffffffff);
	sizedata = PCI_CONF_READ(lcp->lc_conffns, lcp->lc_confarg, tag, reg);
	PCI_CONF_WRITE(lcp->lc_conffns, lcp->lc_confarg, tag, reg, addrdata);

	if (PCI_MAPREG_TYPE(addrdata) == PCI_MAPREG_TYPE_IO)
		panic("lca_map_mem: attempt to memory map an I/O region");

	switch (PCI_MAPREG_MEM_TYPE(addrdata)) {
	case PCI_MAPREG_MEM_TYPE_32BIT:
	case PCI_MAPREG_MEM_TYPE_32BIT_1M:
		break;
	case PCI_MAPREG_MEM_TYPE_64BIT:
/* XXX */	printf("lca_map_mem: attempt to map 64-bit region\n");
/* XXX */	break;
	default:
		printf("lca_map_mem: reserved mapping type\n");
		return EINVAL;
	}

	if (paddrp != NULL)
		*paddrp = PCI_MAPREG_MEM_ADDRESS(addrdata);	/* PCI addr */
	if (sizep != NULL)
		*sizep = ~PCI_MAPREG_MEM_ADDRESS(sizedata) + 1;
	if (cacheablep != NULL)
		*cacheablep = PCI_MAPREG_MEM_CACHEABLE(addrdata);

	return 0;
@
