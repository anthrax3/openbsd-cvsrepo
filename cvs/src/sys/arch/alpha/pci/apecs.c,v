head	1.22;
access;
symbols
	OPENBSD_6_2:1.22.0.36
	OPENBSD_6_2_BASE:1.22
	OPENBSD_6_1:1.22.0.34
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.30
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.26
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.28
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.20
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.24
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.22
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.18
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.16
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.14
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.12
	OPENBSD_5_0:1.22.0.10
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.8
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.6
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.4
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.21.0.4
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.2
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.20.0.6
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.4
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.2
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.19.0.2
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.17.0.18
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.16
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.14
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.12
	OPENBSD_3_6_BASE:1.17
	SMP_SYNC_A:1.17
	SMP_SYNC_B:1.17
	OPENBSD_3_5:1.17.0.10
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.8
	OPENBSD_3_4_BASE:1.17
	UBC_SYNC_A:1.17
	OPENBSD_3_3:1.17.0.6
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.4
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	UBC_SYNC_B:1.17
	UBC:1.16.0.2
	UBC_BASE:1.16
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.8.0.18
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.16
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.14
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.12
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.10
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.8
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.6
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.4
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2009.03.30.21.43.13;	author kettenis;	state Exp;
branches;
next	1.21;

1.21
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.20;

1.20
date	2006.12.14.17.36.12;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.16.22.32.44;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.13.20.10.49;	author brad;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.14.01.26.27;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2001.12.14.00.44.59;	author nate;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2001.11.06.19.53.13;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.04.23.12.46;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.26.21.13.43;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.26.20.46.18;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.02.16.08.23.38;	author jason;	state Exp;
branches;
next	1.10;

1.10
date	2001.02.16.05.17.31;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2000.11.08.16.01.16;	author art;	state Exp;
branches;
next	1.8;

1.8
date	97.01.24.19.57.32;	author niklas;	state Exp;
branches
	1.8.14.1;
next	1.7;

1.7
date	96.12.08.00.20.30;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.11.23.21.44.53;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	96.10.30.22.39.46;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.07.29.23.00.01;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.06.18.09.43.55;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.03.53.18;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.44;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.44;	author deraadt;	state Exp;
branches;
next	;

1.8.14.1
date	2001.04.18.16.01.05;	author niklas;	state Exp;
branches;
next	1.8.14.2;

1.8.14.2
date	2001.07.04.10.14.38;	author niklas;	state Exp;
branches;
next	1.8.14.3;

1.8.14.3
date	2001.11.13.21.00.49;	author niklas;	state Exp;
branches;
next	1.8.14.4;

1.8.14.4
date	2002.03.06.00.47.44;	author niklas;	state Exp;
branches;
next	1.8.14.5;

1.8.14.5
date	2002.03.28.10.06.13;	author niklas;	state Exp;
branches;
next	;

1.16.2.1
date	2002.06.11.03.33.40;	author art;	state Exp;
branches;
next	;


desc
@@


1.22
log
@bzero pci attach args
@
text
@/*	$OpenBSD: apecs.c,v 1.21 2008/06/26 05:42:08 ray Exp $	*/
/*	$NetBSD: apecs.c,v 1.16 1996/12/05 01:39:34 cgd Exp $	*/

/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1995, 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <uvm/uvm_extern.h>

#include <machine/autoconf.h>
#include <machine/rpb.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <alpha/pci/apecsreg.h>
#include <alpha/pci/apecsvar.h>
#ifdef DEC_2100_A50
#include <alpha/pci/pci_2100_a50.h>
#endif
#ifdef DEC_EB64PLUS
#include <alpha/pci/pci_eb64plus.h>
#endif
#ifdef DEC_1000A
#include <alpha/pci/pci_1000a.h>
#endif
#ifdef DEC_1000
#include <alpha/pci/pci_1000.h>
#endif

int	apecsmatch(struct device *, void *, void *);
void	apecsattach(struct device *, struct device *, void *);

struct cfattach apecs_ca = {
	sizeof(struct device), apecsmatch, apecsattach,
};

struct cfdriver apecs_cd = {
	NULL, "apecs", DV_DULL,
};

int	apecsprint(void *, const char *pnp);

/* There can be only one. */
int apecsfound;
struct apecs_config apecs_configuration;

int
apecsmatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct mainbus_attach_args *ma = aux;

	/* Make sure that we're looking for an APECS. */
	if (strcmp(ma->ma_name, apecs_cd.cd_name) != 0)
		return (0);

	if (apecsfound)
		return (0);

	return (1);
}

/*
 * Set up the chipset's function pointers.
 */
void
apecs_init(acp, mallocsafe)
	struct apecs_config *acp;
	int mallocsafe;
{
	acp->ac_comanche_pass2 =
	    (REGVAL(COMANCHE_ED) & COMANCHE_ED_PASS2) != 0;
	acp->ac_memwidth =
	    (REGVAL(COMANCHE_GCR) & COMANCHE_GCR_WIDEMEM) != 0 ? 128 : 64;
	acp->ac_epic_pass2 =
	    (REGVAL(EPIC_DCSR) & EPIC_DCSR_PASS2) != 0;

	acp->ac_haxr1 = REGVAL(EPIC_HAXR1);
	acp->ac_haxr2 = REGVAL(EPIC_HAXR2);

	if (!acp->ac_initted) {
		/* don't do these twice since they set up extents */
		apecs_bus_io_init(&acp->ac_iot, acp);
		apecs_bus_mem_init(&acp->ac_memt, acp);

#if 0
		/*
		 * We have two I/O windows and 3 MEM windows.
		 */
		alpha_bus_window_count[ALPHA_BUS_TYPE_PCI_IO] = 2;
		alpha_bus_window_count[ALPHA_BUS_TYPE_PCI_MEM] = 3;
		alpha_bus_get_window = apecs_bus_get_window;
#endif
	}
	acp->ac_mallocsafe = mallocsafe;

	apecs_pci_init(&acp->ac_pc, acp);
	alpha_pci_chipset = &acp->ac_pc;
	alpha_pci_chipset->pc_name = "apecs";
	alpha_pci_chipset->pc_mem = APECS_PCI_SPARSE;
	alpha_pci_chipset->pc_dense = APECS_PCI_DENSE;
	alpha_pci_chipset->pc_ports = APECS_PCI_SIO;
	alpha_pci_chipset->pc_bwx = 0;
	alpha_pci_chipset->pc_hae_mask = EPIC_HAXR1_EADDR;

	acp->ac_initted = 1;
}

void
apecsattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct apecs_config *acp;
	struct pcibus_attach_args pba;

	/* note that we've attached the chipset; can't have 2 APECSes. */
	apecsfound = 1;

	/*
	 * set up the chipset's info; done once at console init time
	 * (maybe), but doesn't hurt to do twice.
	 */
	acp = &apecs_configuration;
	apecs_init(acp, 1);

	apecs_dma_init(acp);

	printf(": DECchip %s Core Logic chipset\n",
	    acp->ac_memwidth == 128 ? "21072" : "21071");
	printf("%s: DC21071-CA pass %d, %d-bit memory bus\n",
	    self->dv_xname, acp->ac_comanche_pass2 ? 2 : 1, acp->ac_memwidth);
	printf("%s: DC21071-DA pass %d\n", self->dv_xname,
	    acp->ac_epic_pass2 ? 2 : 1);
	/* XXX print bcache size */

	if (!acp->ac_epic_pass2)
		printf("WARNING: 21071-DA NOT PASS2... NO BETS...\n");

	switch (cputype) {
#ifdef DEC_2100_A50
	case ST_DEC_2100_A50:
		pci_2100_a50_pickintr(acp);
		break;
#endif

#ifdef DEC_EB64PLUS
	case ST_EB64P:
		pci_eb64plus_pickintr(acp);
		break;
#endif

#ifdef DEC_1000A
	case ST_DEC_1000A:
		pci_1000a_pickintr(acp, &acp->ac_iot, &acp->ac_memt,
			&acp->ac_pc);
		break;
#endif

#ifdef DEC_1000
	case ST_DEC_1000:
		pci_1000_pickintr(acp, &acp->ac_iot, &acp->ac_memt,
			&acp->ac_pc);
		break;
#endif

	default:
		panic("apecsattach: shouldn't be here, really...");
	}

	bzero(&pba, sizeof(pba));
	pba.pba_busname = "pci";
	pba.pba_iot = &acp->ac_iot;
	pba.pba_memt = &acp->ac_memt;
	pba.pba_dmat =
	    alphabus_dma_get_tag(&acp->ac_dmat_direct, ALPHA_BUS_PCI);
	pba.pba_pc = &acp->ac_pc;
	pba.pba_domain = pci_ndomains++;
	pba.pba_bus = 0;
#ifdef notyet
	pba.pba_flags = PCI_FLAGS_IO_ENABLED | PCI_FLAGS_MEM_ENABLED |
	    PCI_FLAGS_MRL_OKAY | PCI_FLAGS_MRM_OKAY | PCI_FLAGS_MWI_OKAY;
#endif
	config_found(self, &pba, apecsprint);
}

int
apecsprint(aux, pnp)
	void *aux;
	const char *pnp;
{
	register struct pcibus_attach_args *pba = aux;

	/* only PCIs can attach to APECSes; easy. */
	if (pnp)
		printf("%s at %s", pba->pba_busname, pnp);
	printf(" bus %d", pba->pba_bus);
	return (UNCONF);
}

#if 0
int
apecs_bus_get_window(type, window, abst)
	int type, window;
	struct alpha_bus_space_translation *abst;
{
	struct apecs_config *acp = &apecs_configuration;
	bus_space_tag_t st;

	switch (type) {
	case ALPHA_BUS_TYPE_PCI_IO:
		st = &acp->ac_iot;
		break;

	case ALPHA_BUS_TYPE_PCI_MEM:
		st = &acp->ac_memt;
		break;

	default:
		panic("apecs_bus_get_window");
	}

	return (alpha_bus_space_get_window(st, window, abst));
}
#endif
@


1.21
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.20 2006/12/14 17:36:12 kettenis Exp $	*/
d233 1
a241 1
	pba.pba_bridgetag = NULL;
@


1.20
log
@Make pci subsystem aware of domains.  Each host bridge gets assigned a unique
domain number such that we can distinguish between busses with the same bus
number that are behind different host bridges.  Domains can be accessed by
using different device nodes.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.19 2006/03/16 22:32:44 miod Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.19
log
@Get rid of specific softc structure for pci host bridges, as it is never
used. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.18 2006/03/13 20:10:49 brad Exp $	*/
d246 1
@


1.18
log
@* Add "pcitag_t *pba_bridgetag" to pci_attach_args.  This is set to
  NULL for root PCI busses.  For busses behind a bridge, it points to
  a persistent copy of the bridge's pcitag_t.  This can be very useful
  for machine-dependent PCI bus enumeration code.

From NetBSD

ok grange@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.17 2002/03/14 01:26:27 millert Exp $	*/
d101 1
a101 1
	sizeof(struct apecs_softc), apecsmatch, apecsattach,
a182 1
	struct apecs_softc *sc = (struct apecs_softc *)self;
d193 1
a193 1
	acp = sc->sc_acp = &apecs_configuration;
@


1.17
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.16 2001/12/14 00:44:59 nate Exp $	*/
d248 1
@


1.16
log
@Don't use a single static struct alpha_bus_space since there are machines
that can have more than one system bus attached to mainbus
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.15 2001/11/06 19:53:13 miod Exp $	*/
d97 2
a98 2
int	apecsmatch __P((struct device *, void *, void *));
void	apecsattach __P((struct device *, struct device *, void *));
d108 1
a108 1
int	apecsprint __P((void *, const char *pnp));
@


1.16.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.16 2001/12/14 00:44:59 nate Exp $	*/
d97 2
a98 2
int	apecsmatch(struct device *, void *, void *);
void	apecsattach(struct device *, struct device *, void *);
d108 1
a108 1
int	apecsprint(void *, const char *pnp);
@


1.15
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.14 2001/11/04 23:12:46 art Exp $	*/
d152 2
a153 2
		acp->ac_iot = apecs_bus_io_init(acp);
		acp->ac_memt = apecs_bus_mem_init(acp);
d242 2
a243 2
	pba.pba_iot = acp->ac_iot;
	pba.pba_memt = acp->ac_memt;
@


1.14
log
@Two new sysctls in the chipset tree.
CPU_CHIPSET_PORTS - address of the I/O ports.
CPU_CHIPSET_HAE_MASK - mask for the HAE register.
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.13 2001/06/26 21:13:43 art Exp $	*/
d72 1
a72 1
#include <vm/vm.h>
@


1.13
log
@More chipset info needed by X.
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.12 2001/06/26 20:46:18 art Exp $	*/
d171 1
d173 1
@


1.12
log
@Provide chipset configuration to sysctls.
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.11 2001/02/16 08:23:38 jason Exp $	*/
d170 1
@


1.11
log
@Bring apecs closer to current netbsd work (updated copyrights, plus
a few bug fixes I missed earlier).
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.10 2001/02/16 05:17:31 jason Exp $	*/
d167 4
@


1.10
log
@bring in netbsd bus_dma stuff for lca and apecs busses
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.9 2000/11/08 16:01:16 art Exp $	*/
d4 36
d87 9
d154 9
d203 1
a203 1
	switch (hwrpb->rpb_type) {
d210 20
d261 26
@


1.9
log
@Merge in big portions of the improvements NetBSD did to their alpha port.
Highlights: UVM, PMAP_NEW, bus_dma (only on some buses for now), new hardware
support, possiblity for ELF, etc, etc. Too much to mention.

This is still work in progress. video consoles might be broken, otherwise
we have basically the same functionality as before plus more.
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.8 1997/01/24 19:57:32 niklas Exp $	*/
d48 1
a48 1
#if defined(DEC_2100_A50)
a51 1
#ifdef __BROKEN_INDIRECT_CONFIG
a52 3
#else
int	apecsmatch __P((struct device *, struct cfdata *, void *));
#endif
a71 1
#ifdef __BROKEN_INDIRECT_CONFIG
a72 3
#else
	struct cfdata *match;
#endif
a104 5
	/*
	 * Can't set up SGMAP data here; can be called before malloc().
	 * XXX THIS COMMENT NO LONGER MAKES SENSE.
	 */

a113 13
	/* Turn off DMA window enables in PCI Base Reg 1. */
	REGVAL(EPIC_PCI_BASE_1) = 0;
	alpha_mb();

	/* XXX SGMAP? */

	/* XXX XXX BEGIN XXX XXX */
	{							/* XXX */
		extern vm_offset_t alpha_XXX_dmamap_or;		/* XXX */
		alpha_XXX_dmamap_or = 0x40000000;		/* XXX */
	}							/* XXX */
	/* XXX XXX END XXX XXX */

d136 1
a136 1
	/* XXX SGMAP FOO */
d150 1
a150 1
#if defined(DEC_2100_A50)
d163 2
d167 4
@


1.8
log
@Sync with NetBSD 961207
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.7 1996/12/08 00:20:30 niklas Exp $	*/
d83 1
a83 1
	struct confargs *ca = aux;
d86 1
a86 1
	if (strcmp(ca->ca_name, apecs_cd.cd_name) != 0)
@


1.8.14.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.11 2001/02/16 08:23:38 jason Exp $	*/
a3 36
/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

d48 1
a48 1
#ifdef DEC_2100_A50
a50 9
#ifdef DEC_EB64PLUS
#include <alpha/pci/pci_eb64plus.h>
#endif
#ifdef DEC_1000A
#include <alpha/pci/pci_1000a.h>
#endif
#ifdef DEC_1000
#include <alpha/pci/pci_1000.h>
#endif
d52 1
d54 3
d76 1
d78 3
d83 1
a83 1
	struct mainbus_attach_args *ma = aux;
d86 1
a86 1
	if (strcmp(ma->ma_name, apecs_cd.cd_name) != 0)
d113 5
a121 9

#if 0
		/*
		 * We have two I/O windows and 3 MEM windows.
		 */
		alpha_bus_window_count[ALPHA_BUS_TYPE_PCI_IO] = 2;
		alpha_bus_window_count[ALPHA_BUS_TYPE_PCI_MEM] = 3;
		alpha_bus_get_window = apecs_bus_get_window;
#endif
d127 13
d162 1
a162 1
	apecs_dma_init(acp);
d175 2
a176 2
	switch (cputype) {
#ifdef DEC_2100_A50
a181 20
#ifdef DEC_EB64PLUS
	case ST_EB64P:
		pci_eb64plus_pickintr(acp);
		break;
#endif

#ifdef DEC_1000A
	case ST_DEC_1000A:
		pci_1000a_pickintr(acp, &acp->ac_iot, &acp->ac_memt,
			&acp->ac_pc);
		break;
#endif

#ifdef DEC_1000
	case ST_DEC_1000:
		pci_1000_pickintr(acp, &acp->ac_iot, &acp->ac_memt,
			&acp->ac_pc);
		break;
#endif

a188 2
	pba.pba_dmat =
	    alphabus_dma_get_tag(&acp->ac_dmat_direct, ALPHA_BUS_PCI);
a190 4
#ifdef notyet
	pba.pba_flags = PCI_FLAGS_IO_ENABLED | PCI_FLAGS_MEM_ENABLED |
	    PCI_FLAGS_MRL_OKAY | PCI_FLAGS_MRM_OKAY | PCI_FLAGS_MWI_OKAY;
#endif
a206 26

#if 0
int
apecs_bus_get_window(type, window, abst)
	int type, window;
	struct alpha_bus_space_translation *abst;
{
	struct apecs_config *acp = &apecs_configuration;
	bus_space_tag_t st;

	switch (type) {
	case ALPHA_BUS_TYPE_PCI_IO:
		st = &acp->ac_iot;
		break;

	case ALPHA_BUS_TYPE_PCI_MEM:
		st = &acp->ac_memt;
		break;

	default:
		panic("apecs_bus_get_window");
	}

	return (alpha_bus_space_get_window(st, window, abst));
}
#endif
@


1.8.14.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.8.14.1 2001/04/18 16:01:05 niklas Exp $	*/
a166 5
	alpha_pci_chipset = &acp->ac_pc;
	alpha_pci_chipset->pc_name = "apecs";
	alpha_pci_chipset->pc_mem = APECS_PCI_SPARSE;
	alpha_pci_chipset->pc_dense = APECS_PCI_DENSE;
	alpha_pci_chipset->pc_bwx = 0;
@


1.8.14.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d72 1
a72 1
#include <uvm/uvm_extern.h>
a170 1
	alpha_pci_chipset->pc_ports = APECS_PCI_SIO;
a171 1
	alpha_pci_chipset->pc_hae_mask = EPIC_HAXR1_EADDR;
@


1.8.14.4
log
@Merge in trunk
@
text
@d152 2
a153 2
		apecs_bus_io_init(&acp->ac_iot, acp);
		apecs_bus_mem_init(&acp->ac_memt, acp);
d242 2
a243 2
	pba.pba_iot = &acp->ac_iot;
	pba.pba_memt = &acp->ac_memt;
@


1.8.14.5
log
@Merge in -current from about a week ago
@
text
@d97 2
a98 2
int	apecsmatch(struct device *, void *, void *);
void	apecsattach(struct device *, struct device *, void *);
d108 1
a108 1
int	apecsprint(void *, const char *pnp);
@


1.7
log
@Merge to NetBSD 961107, i.e. mostly new bus.h
@
text
@d1 2
a2 2
/*	$OpenBSD: apecs.c,v 1.6 1996/11/23 21:44:53 kstailey Exp $	*/
/*	$NetBSD: apecs.c,v 1.13 1996/10/23 04:12:22 cgd Exp $	*/
d52 1
d54 3
d76 6
a81 1
	void *match, *aux;
d99 1
a99 1
apecs_init(acp)
d101 1
a102 1

d110 3
d115 1
d118 7
a124 2
	acp->ac_iot = apecs_lca_bus_io_init(acp);
	acp->ac_memt = apecs_lca_bus_mem_init(acp);
d139 2
d160 1
a160 1
	apecs_init(acp);
d181 1
d199 1
a199 1
        register struct pcibus_attach_args *pba = aux;
@


1.6
log
@added const to second parameter of cfprint_t routines
@
text
@d1 2
a2 2
/*	$OpenBSD: apecs.c,v 1.5 1996/10/30 22:39:46 niklas Exp $	*/
/*	$NetBSD: apecs.c,v 1.12 1996/10/13 03:00:00 christos Exp $	*/
a47 1
#include <alpha/pci/apecs_lca.h>
d105 2
a106 2
	apecs_lca_bus_io_init(&acp->ac_bc, acp);
	apecs_lca_bus_mem_init(&acp->ac_bc, acp);
d114 7
d166 2
a167 1
	pba.pba_bc = &acp->ac_bc;
@


1.5
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
/*	$OpenBSD: apecs.c,v 1.12 1996/10/13 03:00:00 christos Exp $	*/
d64 1
a64 1
int	apecsprint __P((void *, /* const */ char *pnp));
d169 1
a169 1
	/* const */ char *pnp;
@


1.4
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: apecs.c,v 1.7 1996/04/12 06:08:01 cgd Exp $	*/
/*	$NetBSD: apecs.c,v 1.7 1996/04/12 06:08:01 cgd Exp $	*/
d48 2
d51 1
d64 1
a64 1
static int	apecsprint __P((void *, char *pnp));
a74 1
	struct cfdata *cf = match;
d112 1
a112 1
	wbflush();
d166 1
a166 1
static int
d169 1
a169 1
	char *pnp;
@


1.3
log
@sync to 0616, retaining local diffs
@
text
@d1 1
@


1.2
log
@update to netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: apecs.c,v 1.4 1995/11/23 02:37:11 cgd Exp $	*/
d4 1
a4 1
 * Copyright (c) 1995 Carnegie-Mellon University.
d47 1
d52 6
a57 3
struct cfdriver apecscd = {
	NULL, "apecs", apecsmatch, apecsattach, DV_DULL,
	    sizeof(struct apecs_softc)
a61 2
#define	REGVAL(r)	(*(int32_t *)phystok0seg(r))

d75 1
a75 1
	if (strcmp(ca->ca_name, apecscd.cd_name) != 0)
d103 3
a105 9
	acp->ac_conffns = &apecs_conf_fns;
	acp->ac_confarg = acp;
	acp->ac_dmafns = &apecs_dma_fns;
	acp->ac_dmaarg = acp;
	/* Interrupt routines set up in 'attach' */
	acp->ac_memfns = &apecs_mem_fns;
	acp->ac_memarg = acp;
	acp->ac_piofns = &apecs_pio_fns;
	acp->ac_pioarg = acp;
a118 1
	struct confargs *ca = aux;
d121 1
a121 1
	struct pci_attach_args pa;
d149 1
a149 3
		pci_2100_a50_pickintr(acp->ac_conffns, acp->ac_confarg,
		    acp->ac_piofns, acp->ac_pioarg,
		    &acp->ac_intrfns, &acp->ac_intrarg);
d156 5
a160 16
	pa.pa_bus = 0;
	pa.pa_maxdev = 32;
	pa.pa_burstlog2 = 8;

	pa.pa_conffns = acp->ac_conffns;
	pa.pa_confarg = acp->ac_confarg;
	pa.pa_dmafns = acp->ac_dmafns;
	pa.pa_dmaarg = acp->ac_dmaarg;
	pa.pa_intrfns = acp->ac_intrfns;
	pa.pa_intrarg = acp->ac_intrarg;
	pa.pa_memfns = acp->ac_memfns;
	pa.pa_memarg = acp->ac_memarg;
	pa.pa_piofns = acp->ac_piofns;
	pa.pa_pioarg = acp->ac_pioarg;

	config_found(self, &pa, apecsprint);
d168 1
a168 1
        register struct pci_attach_args *pa = aux;
d172 2
a173 2
		printf("pci at %s", pnp);
	printf(" bus %d", pa->pa_bus);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: apecs.c,v 1.3 1995/08/03 01:16:47 cgd Exp $	*/
a37 1
#include <machine/pio.h>
a41 1
#include <alpha/isa/isa_dma.h>
a44 1
#include <alpha/pci/pci_chipset.h>
d46 1
d52 2
a53 1
	NULL, "apecs", apecsmatch, apecsattach, DV_DULL, sizeof(struct device)
a57 4
#ifdef DEC_2100_A50
extern void	pci_2100_a50_pickintr __P((void));
#endif

d60 3
a62 4
static int		nsgmapent = 1024;
static vm_offset_t	sgmap_pci_base = 0x800000;
/*static */struct sgmapent	*sgmap;
static char		/* * */ sgbitmap[1024 / NBBY];
d70 1
a70 1
	struct confargs *pa = aux;
d72 6
a77 1
	/* XXX */
d86 2
a87 1
apecs_init()
a88 1
	int pass2_epic;
d90 24
a113 1
	pass2_epic = (REGVAL(EPIC_DCSR) & EPIC_DCSR_PASS2) != 0;
d115 1
a115 6
	isadma_fcns = &apecs_isadma_fcns;
	isa_pio_fcns = &apecs_pio_fcns;
	if (!pass2_epic)
		pci_cs_fcns = &apecs_p1e_cs_fcns;
	else
		pci_cs_fcns = &apecs_p2e_cs_fcns;
d124 13
a136 6
	struct confargs nca;
	int pass2_comanche, widemem, pass2_epic;

	pass2_comanche = (REGVAL(COMANCHE_ED) & COMANCHE_ED_PASS2) != 0;
	widemem = (REGVAL(COMANCHE_GCR) & COMANCHE_GCR_WIDEMEM) != 0;
	pass2_epic = (REGVAL(EPIC_DCSR) & EPIC_DCSR_PASS2) != 0;
d138 1
a138 2
	sgmap = (struct sgmapent *)malloc(1024 * sizeof(struct sgmapent),
	    M_DEVBUF, M_WAITOK);
d141 1
a141 1
	    widemem ? "21072" : "21071");
d143 3
a145 2
	    self->dv_xname, pass2_comanche ? 2 : 1, widemem ? 128 : 64);
	printf("%s: DC21071-DA pass %d\n", self->dv_xname, pass2_epic ? 2 : 1);
d148 1
a148 1
	if (!pass2_epic)
a150 3
	/* set up the chipset's functions */
	apecs_init();

d154 3
a156 1
		pci_2100_a50_pickintr();
d163 16
a178 7
	/* attach the PCI bus that hangs off of it... */
	nca.ca_name = "pci";
	nca.ca_slot = 0;
	nca.ca_offset = 0;
	nca.ca_bus = NULL;
	if (!config_found(self, &nca, apecsprint))
		panic("apecsattach: couldn't attach PCI bus");
d186 1
a186 114
        register struct confargs *ca = aux;

        if (pnp)
                printf("%s at %s", ca->ca_name, pnp);
        return (UNCONF);
}

vm_offset_t						/* XXX? */
apecs_sgmap_alloc(va, npg, nocross, waitok)
	caddr_t	va;
	int npg;
	vm_size_t nocross;
	int waitok;
{
	int s;
	int base, i, stride;

#ifdef DIAGNOSTIC
	/* Quick sanity checks. */
	if ((vm_offset_t)va & PGOFSET)
		panic("apecs_sgmap_alloc: va not page aligned");
	if ((nocross & (nocross - 1)) != 0 || nocross == 0)
		panic("apecs_sgmap_alloc: bogus alignment 0x%lx", nocross);
	if (npg <= 0)
		panic("apecs_sgmap_alloc: not allocating anything");
	if (npg > nsgmapent)
		panic("apecs_sgmap_alloc: insane allocation");
	if (ptoa(npg) > nocross)
		panic("apecs_sgmap_alloc: must cross boundary");
#endif

	stride = atop(nocross);
#ifdef DIAGNOSTIC
	if (stride > nsgmapent)
		panic("apecs_sgmap_alloc: cheesy implementation loses");
#endif

top:
	s = splhigh();
	for (base = 0; base < nsgmapent; base += stride) {
		for (i = base; i < base + npg; i++)
			if (isset(sgbitmap, i))
				goto nextstride;
		break;
nextstride:
	}
	if (base < nsgmapent)		/* found a free chunk, claim it */
		for (i = base; i < base + npg; i++)
			setbit(sgbitmap, i);
	splx(s);

	if (base >= nsgmapent) {	/* didn't find a free chunk */
		if (!waitok)
			return 0;
		tsleep(&sgmap, PRIBIO+1, "sgmap", 0);
		goto top;
	}

	for (i = base; i < base + npg; i++) {
#ifdef DIAGNOSTIC
		if ((sgmap[i].val & SGMAPENT_EVAL) != 0)
			panic("apecs_sgmap_alloc: unallocated entry valid");
#endif
		sgmap[i].val = SGMAP_MAKEENTRY(atop(vtophys(va)));
		va += PAGE_SIZE;
	}

	/* Invalidate old cached entries. */
	REGVAL(EPIC_TBIA) = 1;

	/* Return the PCI address. */
	return (ptoa(base) + sgmap_pci_base);
}

void
apecs_sgmap_dealloc(pa, npg)
	vm_offset_t pa;
	int npg;
{
	int i, pfn;

#ifdef DIAGNOSTIC
	/* Quick sanity checks. */
	if (pa & PGOFSET)
		panic("apecs_sgmap_dealloc: pa not page aligned");
	if (npg <= 0)
		panic("apecs_sgmap_dealloc: not deallocating anything");
	if (npg > nsgmapent)
		panic("apecs_sgmap_dealloc: insane deallocation");
#endif

	pfn = atop(pa - sgmap_pci_base);
#ifdef DIAGNOSTIC
	/* Bounds check the deallocation range.  Paranoid about wraparound. */
	if (pfn < 0 || pfn >= nsgmapent || (pfn + npg) >= nsgmapent)
		panic("apecs_sgmap_dealloc: pa out of range (%s)",
			pfn < 0 ? "too low" : "too high");
#endif

	for (i = 0; i < npg; i++) {
#ifdef DIAGNOSTIC
		/* Make sure it's actually allocated. */
		if (isclr(sgbitmap, i + pfn))
			panic("apecs_sgmap_dealloc: multiple frees: entry %d",
			    i + pfn);
#endif

		/* Clear the entries and the allocation map bits. */
		clrbit(sgbitmap, i + pfn);
		sgmap[i + pfn].val &= ~SGMAPENT_EVAL;
	}

	/* Invalidate old cached entries. */
	REGVAL(EPIC_TBIA) = 1;
d188 5
a192 2
	/* Wake up anybody waiting for map entries. */
	wakeup(&sgmap);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
