head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.4
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.7.0.10
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.12
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.10
	OPENBSD_5_0:1.4.0.8
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2017.09.08.05.36.51;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	uRv5pa9QDlZaYgwD;

1.7
date	2015.07.26.05.09.44;	author miod;	state Exp;
branches;
next	1.6;
commitid	5evJqb5U3VOxLlWE;

1.6
date	2014.05.08.20.46.49;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2012.12.05.23.20.10;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.30.20.18.06;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.22.02.54.50;	author mk;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.22.18.45.51;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.16.21.22.27;	author robert;	state Exp;
branches;
next	;


desc
@@


1.8
log
@If you use sys/param.h, you don't need sys/types.h
@
text
@/* $OpenBSD: pci_kn300.c,v 1.7 2015/07/26 05:09:44 miod Exp $ */
/* $NetBSD: pci_kn300.c,v 1.28 2005/12/11 12:16:17 christos Exp $ */

/*
 * Copyright (c) 1998 by Matthew Jacob
 * NASA AMES Research Center.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice immediately at the beginning of the file, without modification,
 *    this list of conditions, and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/time.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/malloc.h>
#include <sys/device.h>
#include <sys/syslog.h>

#include <uvm/uvm_extern.h>

#include <machine/autoconf.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/ppbreg.h>

#include <alpha/mcbus/mcbusvar.h>
#include <alpha/mcbus/mcbusreg.h>
#include <alpha/pci/mcpciareg.h>
#include <alpha/pci/mcpciavar.h>
#include <alpha/pci/pci_kn300.h>

#include "sio.h"
#if NSIO > 0 || NPCEB > 0
#include <alpha/pci/siovar.h>
#endif

int	dec_kn300_intr_map(struct pci_attach_args *, pci_intr_handle_t *);

const char *dec_kn300_intr_string(void *, pci_intr_handle_t);
void	*dec_kn300_intr_establish(void *, pci_intr_handle_t,
	    int, int (*func)(void *), void *, const char *);
void	dec_kn300_intr_disestablish(void *, void *);

#define	KN300_PCEB_IRQ	16
#define	NPIN		4

#define	NIRQ	(MAX_MC_BUS * MCPCIA_PER_MCBUS * MCPCIA_MAXSLOT * NPIN)
static int savirqs[NIRQ];

static struct alpha_shared_intr *kn300_pci_intr;

static struct mcpcia_config *mcpcia_eisaccp = NULL;

void	kn300_iointr (void *, unsigned long);
void	kn300_enable_intr (struct mcpcia_config *, int);
void	kn300_disable_intr (struct mcpcia_config *, int);

void
pci_kn300_pickintr(ccp, first)
	struct mcpcia_config *ccp;
	int first;
{
	pci_chipset_tag_t pc = &ccp->cc_pc;

	if (first) {
		int g;

		kn300_pci_intr = alpha_shared_intr_alloc(NIRQ);
		for (g = 0; g < NIRQ; g++) {
			alpha_shared_intr_set_maxstrays(kn300_pci_intr, g, 25);
			savirqs[g] = (char) -1;
		}
	}

	pc->pc_intr_v = ccp;
	pc->pc_intr_map = dec_kn300_intr_map;
	pc->pc_intr_string = dec_kn300_intr_string;
	pc->pc_intr_establish = dec_kn300_intr_establish;
	pc->pc_intr_disestablish = dec_kn300_intr_disestablish;

	/* Not supported on KN300. */
	pc->pc_pciide_compat_intr_establish = NULL;

	if (EISA_PRESENT(REGVAL(MCPCIA_PCI_REV(ccp)))) {
		mcpcia_eisaccp = ccp;
#if NSIO > 0 || NPCEB > 0
		sio_intr_setup(pc, &ccp->cc_iot);
		kn300_enable_intr(ccp, KN300_PCEB_IRQ);
#endif
	}
}

int     
dec_kn300_intr_map(pa, ihp)
	struct pci_attach_args *pa;
	pci_intr_handle_t *ihp;
{
	pcitag_t bustag = pa->pa_intrtag;
	int buspin = pa->pa_intrpin;
	pci_chipset_tag_t pc = pa->pa_pc;
	struct mcpcia_config *ccp = (struct mcpcia_config *)pc->pc_intr_v;
	int device;
	int mcpcia_irq;

	if (pa->pa_bridgetag) {
		buspin = PPB_INTERRUPT_SWIZZLE(pa->pa_rawintrpin,
		    pa->pa_device);
		if (pa->pa_bridgeih[buspin - 1] != 0) {
			*ihp = pa->pa_bridgeih[buspin - 1];
			return 0;
		}

		return 1;
	}

	pci_decompose_tag(pc, bustag, NULL, &device, NULL);

	/*
	 * On MID 5 device 1 is the internal NCR 53c810.
	 */
	if (ccp->cc_mid == 5 && device == 1) {
		mcpcia_irq = 16;
	} else if (device >= 2 && device <= 5) {
		mcpcia_irq = (device - 2) * 4 + buspin - 1;
	} else {
		printf("dec_kn300_intr_map: don't know how to setup %d/%d/%d\n",
		    pa->pa_bus, pa->pa_device, pa->pa_function);
		return 1;
	}

	/*
	 * handle layout:
	 *
	 *	Determine kn300 IRQ (encoded in SCB vector):
	 *	bits 0..1	buspin-1
	 *	bits 2..4	PCI Slot (0..7- yes, some don't exist)
	 *	bits 5..7	MID-4
	 *	bits 8..10	7-GID
	 *
	 *	Software only:
	 *	bits 11-15	MCPCIA IRQ
	 */
	*ihp = (pci_intr_handle_t)
		(buspin - 1			    )	|
		((device & 0x7)			<< 2)	|
		((ccp->cc_mid - 4)		<< 5)	|
		((7 - ccp->cc_gid)		<< 8)	|
		(mcpcia_irq			<< 11);

	return (0);
}

const char *
dec_kn300_intr_string(ccv, ih)
	void *ccv;
	pci_intr_handle_t ih;
{
	static char irqstr[64];
	int irq;

	irq = ih & 0x3ff;
	if (irq >= NIRQ)
		panic("dec_kn300_intr_string: bogus kn300 IRQ 0x%x", irq);

	snprintf(irqstr, sizeof irqstr, "kn300 irq %d", irq);

	return (irqstr);
}

void *
dec_kn300_intr_establish(ccv, ih, level, func, arg, name)
        void *ccv, *arg;
        pci_intr_handle_t ih;
        int level;
        int (*func) (void *);
	const char *name;
{           
	struct mcpcia_config *ccp = ccv;
	void *cookie;
	int irq;

	irq = ih & 0x3ff;
	if (irq >= NIRQ)
		panic("dec_kn300_intr_establish: bogus kn300 IRQ 0x%x", irq);

	cookie = alpha_shared_intr_establish(kn300_pci_intr, irq, IST_LEVEL,
	    level, func, arg, "kn300 irq");

	if (cookie != NULL &&
	    alpha_shared_intr_firstactive(kn300_pci_intr, irq)) {
		scb_set(MCPCIA_VEC_PCI + SCB_IDXTOVEC(irq),
		    kn300_iointr, NULL);
		alpha_shared_intr_set_private(kn300_pci_intr, irq, ccp);
		savirqs[irq] = (ih >> 11) & 0x1f;
		kn300_enable_intr(ccp, savirqs[irq]);
		alpha_mb();
	}
	return (cookie);
}

void    
dec_kn300_intr_disestablish(ccv, cookie)
	void *ccv, *cookie;
{
	panic("dec_kn300_intr_disestablish not implemented");
}

void
kn300_iointr(arg, vec)
	void *arg;
	unsigned long vec;
{
	struct mcpcia_softc *mcp;
	u_long irq;

	irq = SCB_VECTOIDX(vec - MCPCIA_VEC_PCI);

	if (alpha_shared_intr_dispatch(kn300_pci_intr, irq)) {
		/*
		 * Any claim of an interrupt at this level is a hint to
		 * reset the stray interrupt count- elsewise a slow leak
		 * over time will cause this level to be shutdown.
		 */
		alpha_shared_intr_reset_strays(kn300_pci_intr, irq);
		return;
	}

	/*
	 * If we haven't finished configuring yet, or there is no mcp
	 * registered for this level yet, just return.
	 */
	mcp = alpha_shared_intr_get_private(kn300_pci_intr, irq);
	if (mcp == NULL || mcp->mcpcia_cc == NULL)
		return;

	/*
	 * We're getting an interrupt for a device we haven't enabled.
	 * We had better not try and use -1 to find the right bit to disable.
	 */
	if (savirqs[irq] == -1) {
		printf("kn300_iointr: stray interrupt vector 0x%lx\n", vec);
		return;
	}

	/*
	 * Stray interrupt; disable the IRQ on the appropriate MCPCIA
	 * if we've reached the limit.
	 */
	alpha_shared_intr_stray(kn300_pci_intr, irq, "kn300 irq");
	if (ALPHA_SHARED_INTR_DISABLE(kn300_pci_intr, irq) == 0)
		return;
	kn300_disable_intr(mcp->mcpcia_cc, savirqs[irq]);
}

void
kn300_enable_intr(ccp, irq)
	struct mcpcia_config *ccp;
	int irq;
{
	alpha_mb();
	REGVAL(MCPCIA_INT_MASK0(ccp)) |= (1 << irq);
	alpha_mb();
}

void
kn300_disable_intr(ccp, irq)
	struct mcpcia_config *ccp;
	int irq;
{
	alpha_mb();
	REGVAL(MCPCIA_INT_MASK0(ccp)) &= ~(1 << irq);
	alpha_mb();
}
@


1.7
log
@Make sure pci_intr_map() will perform proper interrupt swizzling for devices
behind a bridge, if the SRM didn't pick an interrupt line for them.
@
text
@d1 1
a1 1
/* $OpenBSD: pci_kn300.c,v 1.6 2014/05/08 20:46:49 miod Exp $ */
a33 1
#include <sys/types.h>
@


1.6
log
@Format string fixes for alpha kernels, and remove -Wno-format
@
text
@d1 1
a1 1
/* $OpenBSD: pci_kn300.c,v 1.5 2012/12/05 23:20:10 deraadt Exp $ */
d49 1
d130 8
a137 6
	if (buspin == 0) {
		/* No IRQ used. */
		return 1;
	}
	if (buspin > 4 || buspin < 0) {
		printf("dec_kn300_intr_map: bad interrupt pin %d\n", buspin);
d151 3
a153 2
		printf("dec_kn300_intr_map: weird device number %d\n", device);
		return(1);
d174 1
@


1.5
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: pci_kn300.c,v 1.4 2009/09/30 20:18:06 miod Exp $ */
d185 1
a185 1
	snprintf(irqstr, sizeof irqstr, "kn300 irq %ld", irq);
@


1.4
log
@Fix various off-by-ones in irq number validation.
@
text
@d1 1
a1 1
/* $OpenBSD: pci_kn300.c,v 1.3 2009/08/22 02:54:50 mk Exp $ */
a33 1
#include <sys/cdefs.h>			/* RCS ID & Copyright macro defns */
@


1.3
log
@Constify the what/name parameter of pci_intr_establish().

Tested by myself, sthen, oga, kettenis, and jasper.
Input from sthen and jasper.

ok kettenis

(Manpage follows shortly.)
@
text
@d1 1
a1 1
/* $OpenBSD: pci_kn300.c,v 1.2 2008/07/22 18:45:51 miod Exp $ */
d183 1
a183 1
	if (irq > NIRQ)
d204 1
a204 1
	if (irq > NIRQ)
@


1.2
log
@Modify pci_intr_map() implementation to pass the pci_attach_args to the
per-platform implementation, instead of selected members of it; this allows
us to get rid of some globals, and paves the way for better bridge support
on some models.
@
text
@d1 1
a1 1
/* $OpenBSD: pci_kn300.c,v 1.1 2007/03/16 21:22:27 robert Exp $ */
d66 1
a66 1
	    int, int (*func)(void *), void *, char *);
d197 1
a197 1
	char *name;
@


1.1
log
@add DEC_KN300 support from NetBSD;

This code makes it possible to run on some of the AlphaServers,
namely AlphaServer 4100 and 1200.

add mcbus(4) and mcpcia(4) to provide support for the system bus and
the MCPCIA-to-PCI bus adapter that can be found in these systems

allow the pci_swiz_bus code to handle variable extent names
to be able to handle more than one mcpcia(4)

"just commit it" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d62 1
a62 1
int	dec_kn300_intr_map (void *, pcitag_t, int, int, pci_intr_handle_t *);
d64 2
a65 2
const char *dec_kn300_intr_string (void *, pci_intr_handle_t);
void	*dec_kn300_intr_establish (void *, pci_intr_handle_t,
d67 1
a67 1
void	dec_kn300_intr_disestablish (void *, void *);
d119 2
a120 4
dec_kn300_intr_map(ccv, bustag, buspin, line, ihp)
	void *ccv;
	pcitag_t bustag;
	int buspin, line;
d123 4
a126 2
	struct mcpcia_config *ccp = ccv; 
	pci_chipset_tag_t pc = &ccp->cc_pc;
@

