head	1.3;
access;
symbols
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	UBC_SYNC_A:1.3
	UBC_SYNC_B:1.3
	SMP:1.3.0.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.3
date	96.06.18.09.43.57;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	95.12.14.03.53.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.44;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.44;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@sync to 0616, retaining local diffs
@
text
@/*	$NetBSD: apecs_isa.c,v 1.4 1995/11/23 02:37:13 cgd Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/malloc.h>
#include <sys/syslog.h>
#include <sys/device.h>
#include <vm/vm.h>

#include <dev/isa/isavar.h>

#include <alpha/pci/apecsreg.h>
#include <alpha/pci/apecsvar.h>

/*
 * Allocation/deallocation functions.
 */
int	apecs_pio_alloc __P((void *, isa_iooffset_t, isa_iosize_t));
int	apecs_pio_dealloc __P((void *, isa_iooffset_t, isa_iosize_t));

/*
 * Byte functions.
 */
isa_byte_t	apecs_inb __P((void *, isa_iooffset_t));
#define	apecs_insb	0					/* XXX */
void		apecs_outb __P((void *, isa_iooffset_t, isa_byte_t));
#define	apecs_outsb	0					/* XXX */

/*
 * Word functions.
 */
isa_word_t	apecs_inw __P((void *, isa_iooffset_t));
#define	apecs_insw	0					/* XXX */
void		apecs_outw __P((void *, isa_iooffset_t, isa_word_t));
#define	apecs_outsw	0					/* XXX */

/*
 * Longword functions.
 */
isa_long_t	apecs_inl __P((void *, isa_iooffset_t));
#define	apecs_insl	0					/* XXX */
void		apecs_outl __P((void *, isa_iooffset_t, isa_long_t));
#define	apecs_outsl	0					/* XXX */

__const struct pci_pio_fns apecs_pio_fns = {
	/* Allocation/deallocation functions. */
	apecs_pio_alloc,	apecs_pio_dealloc,

	/* Byte functions. */
	apecs_inb,	apecs_insb,
	apecs_outb,	apecs_outsb,

	/* Word functions. */
	apecs_inw,	apecs_insw,
	apecs_outw,	apecs_outsw,

	/* Longword functions. */
	apecs_inl,	apecs_insl,
	apecs_outl,	apecs_outsl,
};

int
apecs_pio_alloc(ipfarg, start, size)
	void *ipfarg;
	isa_iooffset_t start;
	isa_iosize_t size;
{

	/* XXX should do something */
}

int
apecs_pio_dealloc(ipfarg, start, size)
	void *ipfarg;
	isa_iooffset_t start;
	isa_iosize_t size;
{

	/* XXX should do something */
}

isa_byte_t
apecs_inb(ipfa, ioaddr)
	void *ipfa;
	isa_iooffset_t ioaddr;
{
	u_int32_t *port, val;
	isa_byte_t rval;
	int offset;

	wbflush();
	offset = ioaddr & 3;
	port = (int32_t *)phystok0seg(APECS_PCI_SIO | 0 << 3 | ioaddr << 5);
	val = *port;
	rval = ((val) >> (8 * offset)) & 0xff;
/*	rval = val & 0xff; */

	return rval;
}

void
apecs_outb(ipfa, ioaddr, val)
	void *ipfa;
	isa_iooffset_t ioaddr;
	isa_byte_t val;
{
	u_int32_t *port, nval;
	int offset;

	offset = ioaddr & 3;
	nval = val /*<< (8 * offset)*/;
	nval = val << (8 * offset);
	port = (int32_t *)phystok0seg(APECS_PCI_SIO | 0 << 3 | ioaddr << 5);

	*port = nval;
	wbflush();
}

isa_word_t
apecs_inw(ipfa, ioaddr)
	void *ipfa;
	isa_iooffset_t ioaddr;
{
	u_int32_t *port, val;
	isa_word_t rval;
	int offset;

	wbflush();
	offset = ioaddr & 3;
	port = (int32_t *)phystok0seg(APECS_PCI_SIO | 1 << 3 | ioaddr << 5);
	val = *port;
	rval = ((val) >> (8 * offset)) & 0xffff;
	rval = val & 0xffff;

panic("inw(0x%x) => 0x%x @@ %p => 0x%x\n", ioaddr, val, port, rval);

	return rval;
}

void
apecs_outw(ipfa, ioaddr, val)
	void *ipfa;
	isa_iooffset_t ioaddr;
	isa_word_t val;
{
	u_int32_t *port, nval;
	int offset;

	offset = ioaddr & 3;
	nval = val /*<< (8 * offset)*/;
	port = (int32_t *)phystok0seg(APECS_PCI_SIO | 1 << 3 | ioaddr << 5);

	*port = nval;
	wbflush();
}

isa_long_t
apecs_inl(ipfa, ioaddr)
	void *ipfa;
	isa_iooffset_t ioaddr;
{
	u_int32_t *port, val;
	isa_long_t rval;
	int offset;

	wbflush();
	offset = ioaddr & 3;
	port = (int32_t *)phystok0seg(APECS_PCI_SIO | 3 << 3 | ioaddr << 5);
	val = *port;
	rval = ((val) >> (8 * offset)) & 0xffffffff;
	rval = val & 0xffffffff;

	return rval;
}

void
apecs_outl(ipfa, ioaddr, val)
	void *ipfa;
	isa_iooffset_t ioaddr;
	isa_long_t val;
{
	u_int32_t *port, nval;
	int offset;

	offset = ioaddr & 3;
	nval = val /*<< (8 * offset)*/;
	port = (int32_t *)phystok0seg(APECS_PCI_SIO | 3 << 3 | ioaddr << 5);

	*port = nval;
	wbflush();
}

/* XXX XXX XXX */

#define pf(fn, args)	fn args { panic(__STRING(fn)); }

void	pf(apecs_dma_cascade, (void *idfa, isa_drq_t chan))
void	pf(apecs_dma_copytobuf, ())
void	pf(apecs_dma_copyfrombuf, ())
void	pf(apecs_dma_start, (void *idfa, vm_offset_t addr,
	    isa_msize_t size, isa_drq_t chan, int flags))
void	pf(apecs_dma_abort, (void *idfa, isa_drq_t chan))
void	pf(apecs_dma_done, (void *idfa, isa_drq_t chan))

int	apecs_dma_map __P((void *, vm_offset_t, isa_msize_t,
	    isa_moffset_t *, int));
void	apecs_dma_unmap __P((void *, vm_offset_t, isa_msize_t, int,
	    isa_moffset_t *));

__const struct isa_dma_fns apecs_dma_fns = {
	apecs_dma_cascade,
	apecs_dma_map,
	apecs_dma_unmap,
	apecs_dma_copytobuf,
	apecs_dma_copyfrombuf,
	apecs_dma_start,
	apecs_dma_abort,
	apecs_dma_done,
};

int
apecs_dma_map(idfa, va, isasize, mappingsp, flags)
	void *idfa;
	vm_offset_t va;
	isa_msize_t isasize;
	isa_moffset_t *mappingsp;
	int flags;
{
	struct apecs_config *acp = idfa;
	long todo;
	int i;

	if (ISA_DMA_NEEDCONTIG(flags) && isasize > NBPG ||
	    ISA_DMA_SIZEBOUND(flags) != ISA_DMA_SIZEBOUND_NONE ||
	    ISA_DMA_ADDRBOUND(flags) != ISA_DMA_ADDRBOUND_NONE)
		panic("apecs_dma_map: punt");

	i = 0;
	todo = isasize;

	while (todo > 0) {
		mappingsp[i] = vtophys(va) | 0x40000000;
#if 0
		printf("a_pd_m mapping %d: %lx -> %lx -> %lx\n", i, va,
		    vtophys(va), mappingsp[i]);
#endif
		i++;
		todo -= PAGE_SIZE - (va - trunc_page(va));
		va += PAGE_SIZE - (va - trunc_page(va));
	}
	return (i);
}

void
apecs_dma_unmap(idfa, va, isasize, nmappings, mappingsp)
	void *idfa;
	vm_offset_t va;
	isa_msize_t isasize;
	int nmappings;
	isa_moffset_t *mappingsp;
{

	printf("apecs_dma_unmap: called\n");
}

vm_offset_t	apecs_mem_map __P((void *, isa_moffset_t, isa_msize_t, int));
void		apecs_mem_unmap __P((void *, vm_offset_t, isa_msize_t));

#if 0
void		apecs_mem_copytoisa __P((void *, char *, vm_offset_t,
		    isa_moffset_t, isa_msize_t));
void		apecs_mem_copyfromisa __P((void *, char *, vm_offset_t,
		    isa_moffset_t, isa_msize_t));
void		apecs_mem_zero __P((void *, vm_offset_t, isa_moffset_t,
		    isa_msize_t));
#else
void		pf(apecs_mem_copytoisa, ())
void		pf(apecs_mem_copyfromisa, ())
void		pf(apecs_mem_zero, ())
#endif

__const struct isa_mem_fns apecs_mem_fns = {
	apecs_mem_map,
	apecs_mem_unmap,
	apecs_mem_copytoisa,
	apecs_mem_copyfromisa,
	apecs_mem_zero,
};

vm_offset_t
apecs_mem_map(imfa, isapa, isasize, cacheable)
	void *imfa;
	isa_moffset_t isapa;
	isa_msize_t isasize;
	int cacheable;
{
	vm_offset_t sbpa;

	/* XXX sanity checks on sizes, use of windows, etc. */

	/* XXX MAGIC NUMBERS */
	if (cacheable)
		sbpa = (isapa & 0xffffffff) | APECS_PCI_DENSE;
	else
		sbpa = ((isapa & 0x7ffffff) << 5) | APECS_PCI_SPARSE;

	return phystok0seg(sbpa);
}

void
apecs_mem_unmap(imfa, va, isasize)
	void *imfa;
	vm_offset_t va;
	isa_msize_t isasize;
{

	/* XXX sanity checks on va */

	/* Nothing to do; mapping was done in direct-mapped segment. */
}
@


1.2
log
@update to netbsd
@
text
@@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: apecs_isa.c,v 1.3 1995/08/03 01:16:53 cgd Exp $	*/
d33 1
d36 1
a36 1
#include <machine/pio.h>
d38 2
a39 3
#include <dev/isa/isareg.h>
#include <dev/isa/isadmavar.h>
#include <alpha/isa/isa_dma.h>
d41 5
a45 1
#include <alpha/pci/apecsreg.h>
d47 4
a50 2
static u_int8_t		apecs_inb __P((int port));
/* static void		apecs_insb __P((int port, void *addr, int cnt)); */
d52 7
a58 2
static u_int16_t	apecs_inw __P((int port));
/* static void		apecs_insw __P((int port, void *addr, int cnt)); */
d60 7
a66 2
u_int32_t		apecs_inl __P((int port));
/* static void		apecs_insl __P((int port, void *addr, int cnt)); */
d68 2
d71 3
a73 9
static void		apecs_outb __P((int port, u_int8_t datum));
/* static void		apecs_outsb __P((int port, void *addr, int cnt)); */
#define	apecs_outsb	0					/* XXX */
static void		apecs_outw __P((int port, u_int16_t datum));
/* static void		apecs_outsw __P((int port, void *addr, int cnt)); */
#define	apecs_outsw	0					/* XXX */
static void		apecs_outl __P((int port, u_int32_t datum));
/* static void		apecs_outsl __P((int port, void *addr, int cnt)); */
#define	apecs_outsl	0					/* XXX */
d75 1
a75 1
struct isa_pio_fcns apecs_pio_fcns = {
d77 3
d81 3
a84 2
	apecs_outb,	apecs_outsb,
	apecs_outw,	apecs_outsw,
d88 19
a106 13
static int	apecs_isadma_map __P((caddr_t addr, vm_size_t size,
		    vm_offset_t *mappings, int flags));
static void	apecs_isadma_unmap __P((caddr_t addr, vm_size_t size,
		    int nmappings, vm_offset_t *mappings));
static void	apecs_isadma_copytobuf __P((caddr_t addr, vm_size_t size,
		    int nmappings, vm_offset_t *mappings));
static void	apecs_isadma_copyfrombuf __P((caddr_t addr, vm_size_t size,
		    int nmappings, vm_offset_t *mappings));

struct isadma_fcns apecs_isadma_fcns = {
	apecs_isadma_map,	apecs_isadma_unmap,
	apecs_isadma_copytobuf,	apecs_isadma_copyfrombuf,
};
d108 4
a111 3
u_int8_t
apecs_inb(ioaddr)
	int ioaddr;
d114 1
a114 1
	u_int8_t rval;
d127 5
a131 3
u_int16_t
apecs_inw(ioaddr)
	int ioaddr;
d133 1
a133 2
	u_int32_t *port, val;
	u_int16_t rval;
a135 1
	wbflush();
d137 3
a139 4
	port = (int32_t *)phystok0seg(APECS_PCI_SIO | 1 << 3 | ioaddr << 5);
	val = *port;
	rval = ((val) >> (8 * offset)) & 0xffff;
	rval = val & 0xffff;
d141 2
a142 3
panic("inw(0x%x) => 0x%x @@ %p => 0x%x\n", ioaddr, val, port, rval);

	return rval;
d145 4
a148 3
u_int32_t
apecs_inl(ioaddr)
	int ioaddr;
d151 1
a151 1
	u_int32_t rval;
d156 1
a156 1
	port = (int32_t *)phystok0seg(APECS_PCI_SIO | 3 << 3 | ioaddr << 5);
d158 4
a161 2
	rval = ((val) >> (8 * offset)) & 0xffffffff;
	rval = val & 0xffffffff;
d167 4
a170 3
apecs_outb(ioaddr, val)
	int ioaddr;
	u_int8_t val;
d177 1
a177 2
	nval = val << (8 * offset);
	port = (int32_t *)phystok0seg(APECS_PCI_SIO | 0 << 3 | ioaddr << 5);
d183 4
a186 4
void
apecs_outw(ioaddr, val)
	int ioaddr;
	u_int16_t val;
d188 2
a189 1
	u_int32_t *port, nval;
d192 1
d194 4
a197 2
	nval = val /*<< (8 * offset)*/;
	port = (int32_t *)phystok0seg(APECS_PCI_SIO | 1 << 3 | ioaddr << 5);
d199 1
a199 2
	*port = nval;
	wbflush();
d203 4
a206 3
apecs_outl(ioaddr, val)
	int ioaddr;
	u_int32_t val;
d219 27
a245 3
static caddr_t bounced_addr;
static caddr_t bounce_buffer;
static vm_size_t bounce_size;
d248 5
a252 4
apecs_isadma_map(addr, size, mappings, flags)
	caddr_t addr;
	vm_size_t size;
	vm_offset_t *mappings;
d255 21
a275 73
	vm_offset_t off, truncaddr;
	vm_offset_t isa_truncpa;			/* XXX? */
	vm_size_t alignment;
	int i, npages, waitok;

	/*
	 * ISADMA_MAP_{,NO}BOUNCE and ISADMA_MAP_{CONTIG,SCATTER} are
	 * completely ignored, because all allocations will be in the
	 * low 16M and will be contiguous.  I LOVE VIRTUAL DMA!
	 */

	truncaddr = trunc_page(addr);
	off = (vm_offset_t)addr - truncaddr;
	npages = num_pages(size + off);
	if (npages == 0)
		panic("apecs_isadma_map: map nothing");

	alignment = 64 * 1024;
	if ((flags & ISADMA_MAP_16BIT) != 0)
		alignment <<= 1;
	waitok = (flags & ISADMA_MAP_WAITOK) != 0;

	if (npages > atop(alignment)) {
		int s;
		void *tmpbb;

		/*
		 * Allocate a bounce buffer.
		 */
		s = splhigh();
retry:
		while (bounce_buffer != NULL) {
			/*
			 * If a bounce buffer is in use and we can't
			 * wait, bug out now, otherwise sleep.
			 */
			if (!waitok) {
				splx(s);
				return 0;
			}

			tsleep(&bounce_buffer, PRIBIO+1, "apecsbb", 0);
		}

		/*
		 * Try to allocate a bounce buffer.
		 */
		tmpbb = malloc(alignment, M_DEVBUF,
		    waitok ? M_WAITOK : M_NOWAIT);
		if (tmpbb == NULL) {	/* couldn't wait, and failed */
			splx(s);
			return 0;
		}

		/*
		 * If we slept in malloc() and somebody else got it,
		 * give it up and try it again!
		 */
		if (bounce_buffer != NULL) {
			free(tmpbb, M_DEVBUF);
			goto retry;
		}

		/*
		 * It's ours, all ours!
		 */
		bounce_buffer = tmpbb;
		splx(s);

		bounced_addr = addr;
		bounce_size = size;
		truncaddr = (vm_offset_t)bounce_buffer;
		npages = atop(alignment);
d277 1
a277 8

	isa_truncpa = apecs_sgmap_alloc(truncaddr, npages, alignment, waitok);

	mappings[0] = isa_truncpa + off;
	for (i = 1; i < npages; i++)
		mappings[i] = isa_truncpa + ptoa(i);

	return (npages);
d281 4
a284 3
apecs_isadma_unmap(addr, size, nmappings, mappings)
	caddr_t addr;
	vm_size_t size;
d286 1
a286 1
	vm_offset_t *mappings;
a287 1
	int npages;
d289 1
a289 16
	npages = nmappings;
	if (npages == 0)
		panic("apecs_isadma_unmap: unmap nothing");
	apecs_sgmap_dealloc(trunc_page(mappings[0]), npages);

	if (addr == bounced_addr) {
		/*
		 * Free the bounce buffer and wake up anybody who
		 * wants to bounce.
		 */
		bounced_addr = NULL;
		bounce_size = 0;
		free(bounce_buffer, M_DEVBUF);
		bounce_buffer = NULL;
		wakeup(&bounce_buffer);
	}
d292 30
a321 6
void
apecs_isadma_copytobuf(addr, size, nmappings, mappings)
	caddr_t addr;
	vm_size_t size;
	int nmappings;
	vm_offset_t *mappings;
d323 1
d325 1
a325 2
	if (addr != bounced_addr)
		return;
d327 7
a333 3
	log(LOG_NOTICE, "apecs_isa_copytobuf: copied %d byte buffer\n",
	    bounce_size);
	bcopy(addr, bounce_buffer, bounce_size);
d337 4
a340 5
apecs_isadma_copyfrombuf(addr, size, nmappings, mappings)
	caddr_t addr;
	vm_size_t size;
	int nmappings;
	vm_offset_t *mappings;
d343 1
a343 2
	if (addr != bounced_addr)
		return;
d345 1
a345 3
	log(LOG_NOTICE, "apecs_isa_copyfrombuf: copied %d byte buffer\n",
	    bounce_size);
	bcopy(bounce_buffer, addr, bounce_size);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
