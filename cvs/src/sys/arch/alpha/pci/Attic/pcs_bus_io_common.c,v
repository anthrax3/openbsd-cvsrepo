head	1.10;
access;
symbols
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	UBC_SYNC_A:1.10
	UBC_SYNC_B:1.10
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.8.0.14
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.12
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.10
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.8
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.6
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.4
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2001.02.06.19.26.39;	author art;	state dead;
branches;
next	1.9;

1.9
date	2000.06.16.21.47.09;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	97.07.07.07.15.41;	author niklas;	state Exp;
branches
	1.8.12.1;
next	1.7;

1.7
date	97.07.06.18.28.00;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.04.02.22.08.09;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.01.24.19.57.55;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.12.08.00.20.45;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.10.30.22.40.12;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.07.29.23.00.50;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.06.18.09.44.35;	author deraadt;	state Exp;
branches;
next	;

1.8.12.1
date	2001.04.18.16.01.29;	author niklas;	state dead;
branches;
next	;


desc
@@


1.10
log
@Rename pcs_bus* to pci_swiz_bus* to reduce confusion and match NetBSD.
@
text
@/*	$OpenBSD: pcs_bus_io_common.c,v 1.9 2000/06/16 21:47:09 provos Exp $	*/
/*	$NetBSD: pcs_bus_io_common.c,v 1.14 1996/12/02 22:19:35 cgd Exp $	*/

/*
 * Copyright (c) 1995, 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * Common PCI Chipset "bus I/O" functions, for chipsets which have to
 * deal with only a single PCI interface chip in a machine.
 *
 * uses:
 *	CHIP		name of the 'chip' it's being compiled for.
 *	CHIP_IO_BASE	Sparse I/O space base to use.
 */

#include <sys/extent.h>

#define	__C(A,B)	__CONCAT(A,B)
#define	__S(S)		__STRING(S)

/* mapping/unmapping */
int		__C(CHIP,_io_map) __P((void *, bus_addr_t, bus_size_t, int,
		    bus_space_handle_t *));
void		__C(CHIP,_io_unmap) __P((void *, bus_space_handle_t,
		    bus_size_t));
int		__C(CHIP,_io_subregion) __P((void *, bus_space_handle_t,
		    bus_size_t, bus_size_t, bus_space_handle_t *));

/* allocation/deallocation */
int		__C(CHIP,_io_alloc) __P((void *, bus_addr_t, bus_addr_t,
		    bus_size_t, bus_size_t, bus_addr_t, int, bus_addr_t *,
                    bus_space_handle_t *));
void		__C(CHIP,_io_free) __P((void *, bus_space_handle_t,
		    bus_size_t));

/* barrier */
inline void	__C(CHIP,_io_barrier) __P((void *, bus_space_handle_t,
		    bus_size_t, bus_size_t, int));

/* read (single) */
inline u_int8_t	__C(CHIP,_io_read_1) __P((void *, bus_space_handle_t,
		    bus_size_t));
inline u_int16_t __C(CHIP,_io_read_2) __P((void *, bus_space_handle_t,
		    bus_size_t));
inline u_int32_t __C(CHIP,_io_read_4) __P((void *, bus_space_handle_t,
		    bus_size_t));
inline u_int64_t __C(CHIP,_io_read_8) __P((void *, bus_space_handle_t,
		    bus_size_t));

/* read multiple */
void		__C(CHIP,_io_read_multi_1) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t));
void		__C(CHIP,_io_read_multi_2) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int16_t *, bus_size_t));
void		__C(CHIP,_io_read_multi_4) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int32_t *, bus_size_t));
void		__C(CHIP,_io_read_multi_8) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int64_t *, bus_size_t));

/* read region */
void		__C(CHIP,_io_read_region_1) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t));
void		__C(CHIP,_io_read_region_2) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int16_t *, bus_size_t));
void		__C(CHIP,_io_read_region_4) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int32_t *, bus_size_t));
void		__C(CHIP,_io_read_region_8) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int64_t *, bus_size_t));

/* write (single) */
inline void	__C(CHIP,_io_write_1) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t));
inline void	__C(CHIP,_io_write_2) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int16_t));
inline void	__C(CHIP,_io_write_4) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int32_t));
inline void	__C(CHIP,_io_write_8) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int64_t));

/* write multiple */
void		__C(CHIP,_io_write_multi_1) __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t));
void		__C(CHIP,_io_write_multi_2) __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int16_t *, bus_size_t));
void		__C(CHIP,_io_write_multi_4) __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int32_t *, bus_size_t));
void		__C(CHIP,_io_write_multi_8) __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int64_t *, bus_size_t));

/* write region */
void		__C(CHIP,_io_write_region_1) __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int8_t *, bus_size_t));
void		__C(CHIP,_io_write_region_2) __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int16_t *, bus_size_t));
void		__C(CHIP,_io_write_region_4) __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int32_t *, bus_size_t));
void		__C(CHIP,_io_write_region_8) __P((void *, bus_space_handle_t,
		    bus_size_t, const u_int64_t *, bus_size_t));

/* set multiple */
void		__C(CHIP,_io_set_multi_1) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t, bus_size_t));
void		__C(CHIP,_io_set_multi_2) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int16_t, bus_size_t));
void		__C(CHIP,_io_set_multi_4) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int32_t, bus_size_t));
void		__C(CHIP,_io_set_multi_8) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int64_t, bus_size_t));

/* set region */
void		__C(CHIP,_io_set_region_1) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t, bus_size_t));
void		__C(CHIP,_io_set_region_2) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int16_t, bus_size_t));
void		__C(CHIP,_io_set_region_4) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int32_t, bus_size_t));
void		__C(CHIP,_io_set_region_8) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int64_t, bus_size_t));

/* copy */
void		__C(CHIP,_io_copy_1) __P((void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t));
void		__C(CHIP,_io_copy_2) __P((void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t));
void		__C(CHIP,_io_copy_4) __P((void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t));
void		__C(CHIP,_io_copy_8) __P((void *, bus_space_handle_t,
		    bus_size_t, bus_space_handle_t, bus_size_t, bus_size_t));

/* read multiple raw */
void		__C(CHIP,_io_read_raw_multi_2) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t));
void		__C(CHIP,_io_read_raw_multi_4) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t));
void		__C(CHIP,_io_read_raw_multi_8) __P((void *, bus_space_handle_t,
		    bus_size_t, u_int8_t *, bus_size_t));

/* write multiple raw */
void		__C(CHIP,_io_write_raw_multi_2) __P((void *,
		    bus_space_handle_t, bus_size_t, const u_int8_t *,
		    bus_size_t));
void		__C(CHIP,_io_write_raw_multi_4) __P((void *,
		    bus_space_handle_t, bus_size_t, const u_int8_t *,
		    bus_size_t));
void		__C(CHIP,_io_write_raw_multi_8) __P((void *,
		    bus_space_handle_t, bus_size_t, const u_int8_t *,
		    bus_size_t));

static long
    __C(CHIP,_io_ex_storage)[EXTENT_FIXED_STORAGE_SIZE(8) / sizeof(long)];

static struct alpha_bus_space __C(CHIP,_io_space) = {
	/* cookie */
	NULL,

	/* mapping/unmapping */
	__C(CHIP,_io_map),
	__C(CHIP,_io_unmap),
	__C(CHIP,_io_subregion),

	/* allocation/deallocation */
	__C(CHIP,_io_alloc),
	__C(CHIP,_io_free),

	/* barrier */
	__C(CHIP,_io_barrier),
	
	/* read (single) */
	__C(CHIP,_io_read_1),
	__C(CHIP,_io_read_2),
	__C(CHIP,_io_read_4),
	__C(CHIP,_io_read_8),
	
	/* read multiple */
	__C(CHIP,_io_read_multi_1),
	__C(CHIP,_io_read_multi_2),
	__C(CHIP,_io_read_multi_4),
	__C(CHIP,_io_read_multi_8),
	
	/* read region */
	__C(CHIP,_io_read_region_1),
	__C(CHIP,_io_read_region_2),
	__C(CHIP,_io_read_region_4),
	__C(CHIP,_io_read_region_8),
	
	/* write (single) */
	__C(CHIP,_io_write_1),
	__C(CHIP,_io_write_2),
	__C(CHIP,_io_write_4),
	__C(CHIP,_io_write_8),
	
	/* write multiple */
	__C(CHIP,_io_write_multi_1),
	__C(CHIP,_io_write_multi_2),
	__C(CHIP,_io_write_multi_4),
	__C(CHIP,_io_write_multi_8),
	
	/* write region */
	__C(CHIP,_io_write_region_1),
	__C(CHIP,_io_write_region_2),
	__C(CHIP,_io_write_region_4),
	__C(CHIP,_io_write_region_8),

	/* set multiple */
	__C(CHIP,_io_set_multi_1),
	__C(CHIP,_io_set_multi_2),
	__C(CHIP,_io_set_multi_4),
	__C(CHIP,_io_set_multi_8),
	
	/* set region */
	__C(CHIP,_io_set_region_1),
	__C(CHIP,_io_set_region_2),
	__C(CHIP,_io_set_region_4),
	__C(CHIP,_io_set_region_8),

	/* copy */
	__C(CHIP,_io_copy_1),
	__C(CHIP,_io_copy_2),
	__C(CHIP,_io_copy_4),
	__C(CHIP,_io_copy_8),

	/* read multiple raw */
	__C(CHIP,_io_read_raw_multi_2),
	__C(CHIP,_io_read_raw_multi_4),
	__C(CHIP,_io_read_raw_multi_8),
	
	/* write multiple raw*/
	__C(CHIP,_io_write_raw_multi_2),
	__C(CHIP,_io_write_raw_multi_4),
	__C(CHIP,_io_write_raw_multi_8),
};

bus_space_tag_t
__C(CHIP,_bus_io_init)(v)
	void *v;
{
        bus_space_tag_t t = &__C(CHIP,_io_space);
	struct extent *ex;

	t->abs_cookie = v;

	/* XXX WE WANT EXTENT_NOCOALESCE, BUT WE CAN'T USE IT. XXX */
	ex = extent_create(__S(__C(CHIP,_bus_io)), 0x0UL, 0xffffffffUL,
	    M_DEVBUF, (caddr_t)__C(CHIP,_io_ex_storage),
	    sizeof(__C(CHIP,_io_ex_storage)), EX_NOWAIT);
	extent_alloc_region(ex, 0, 0xffffffffUL, EX_NOWAIT);

#ifdef CHIP_IO_W1_BUS_START
#ifdef EXTENT_DEBUG
	printf("io: freeing from 0x%lx to 0x%lx\n", CHIP_IO_W1_BUS_START(v),
	    CHIP_IO_W1_BUS_END(v));
#endif
	extent_free(ex, CHIP_IO_W1_BUS_START(v),
	    CHIP_IO_W1_BUS_END(v) - CHIP_IO_W1_BUS_START(v) + 1, EX_NOWAIT);
#endif
#ifdef CHIP_IO_W2_BUS_START
#ifdef EXTENT_DEBUG
	printf("io: freeing from 0x%lx to 0x%lx\n", CHIP_IO_W2_BUS_START(v),
	    CHIP_IO_W2_BUS_END(v));
#endif
	extent_free(ex, CHIP_IO_W2_BUS_START(v),
	    CHIP_IO_W2_BUS_END(v) - CHIP_IO_W2_BUS_START(v) + 1, EX_NOWAIT);
#endif

#ifdef EXTENT_DEBUG
	extent_print(ex);
#endif
	CHIP_IO_EXTENT(v) = ex;

	return (t);
}

int
__C(CHIP,_io_map)(v, ioaddr, iosize, cacheable, iohp)
	void *v;
	bus_addr_t ioaddr;
	bus_size_t iosize;
	int cacheable;
	bus_space_handle_t *iohp;
{
	int error;

#ifdef EXTENT_DEBUG
	printf("io: allocating 0x%lx to 0x%lx\n", ioaddr, ioaddr + iosize - 1);
#endif
        error = extent_alloc_region(CHIP_IO_EXTENT(v), ioaddr, iosize,
            EX_NOWAIT | (CHIP_EX_MALLOC_SAFE(v) ? EX_MALLOCOK : 0));
	if (error) {
#ifdef EXTENT_DEBUG
		printf("io: allocation failed (%d)\n", error);
		extent_print(CHIP_IO_EXTENT(v));
#endif
		return (error);
	}

#ifdef CHIP_IO_W1_BUS_START
	if (ioaddr >= CHIP_IO_W1_BUS_START(v) &&
	    ioaddr <= CHIP_IO_W1_BUS_END(v)) {
		*iohp = (ALPHA_PHYS_TO_K0SEG(CHIP_IO_W1_SYS_START(v)) >> 5) +
		    (ioaddr - CHIP_IO_W1_BUS_START(v));
	} else
#endif
#ifdef CHIP_IO_W2_BUS_START
	if (ioaddr >= CHIP_IO_W2_BUS_START(v) &&
	    ioaddr <= CHIP_IO_W2_BUS_END(v)) {
		*iohp = (ALPHA_PHYS_TO_K0SEG(CHIP_IO_W2_SYS_START(v)) >> 5) +
		    (ioaddr - CHIP_IO_W2_BUS_START(v));
	} else
#endif
	{
		printf("\n");
#ifdef CHIP_IO_W1_BUS_START
		printf("%s: window[1]=0x%lx-0x%lx\n",
		    __S(__C(CHIP,_io_map)), CHIP_IO_W1_BUS_START(v),
		    CHIP_IO_W1_BUS_END(v));
#endif
#ifdef CHIP_IO_W2_BUS_START
		printf("%s: window[2]=0x%lx-0x%lx\n",
		    __S(__C(CHIP,_io_map)), CHIP_IO_W2_BUS_START(v),
		    CHIP_IO_W2_BUS_END(v));
#endif
		panic("%s: don't know how to map %lx",
		    __S(__C(CHIP,_io_map)), ioaddr);
	}

	return (0);
}

void
__C(CHIP,_io_unmap)(v, ioh, iosize)
	void *v;
	bus_space_handle_t ioh;
	bus_size_t iosize;
{
	bus_addr_t ioaddr;
	int error;

#ifdef EXTENT_DEBUG
	printf("io: freeing handle 0x%lx for 0x%lx\n", ioh, iosize);
#endif

	ioh = ALPHA_K0SEG_TO_PHYS(ioh << 5) >> 5;

#ifdef CHIP_IO_W1_BUS_START
	if ((ioh << 5) >= CHIP_IO_W1_SYS_START(v) &&
	    (ioh << 5) <= CHIP_IO_W1_SYS_END(v)) {
		ioaddr = CHIP_IO_W1_BUS_START(v) +
		    (ioh - (CHIP_IO_W1_SYS_START(v) >> 5));
	} else
#endif
#ifdef CHIP_IO_W2_BUS_START
	if ((ioh << 5) >= CHIP_IO_W2_SYS_START(v) &&
	    (ioh << 5) <= CHIP_IO_W2_SYS_END(v)) {
		ioaddr = CHIP_IO_W2_BUS_START(v) +
		    (ioh - (CHIP_IO_W2_SYS_START(v) >> 5));
	} else
#endif
	{
		printf("\n");
#ifdef CHIP_IO_W1_BUS_START
		printf("%s: sys window[1]=0x%lx-0x%lx\n",
		    __S(__C(CHIP,_io_map)), CHIP_IO_W1_SYS_START(v),
		    CHIP_IO_W1_SYS_END(v));
#endif
#ifdef CHIP_IO_W2_BUS_START
		printf("%s: sys window[2]=0x%lx-0x%lx\n",
		    __S(__C(CHIP,_io_map)), CHIP_IO_W2_SYS_START(v),
		    CHIP_IO_W2_SYS_END(v));
#endif
		panic("%s: don't know how to unmap %lx",
		    __S(__C(CHIP,_io_unmap)), (ioh << 5));
	}

#ifdef EXTENT_DEBUG
	printf("io: freeing 0x%lx to 0x%lx\n", ioaddr, ioaddr + iosize - 1);
#endif
        error = extent_free(CHIP_IO_EXTENT(v), ioaddr, iosize,
            EX_NOWAIT | (CHIP_EX_MALLOC_SAFE(v) ? EX_MALLOCOK : 0));
	if (error) {
		printf("%s: WARNING: could not unmap 0x%lx-0x%lx (error %d)\n",
		   __S(__C(CHIP,_io_unmap)), ioaddr, ioaddr + iosize - 1,
		   error);
#ifdef EXTENT_DEBUG
		extent_print(CHIP_IO_EXTENT(v));
#endif
	}	
}

int
__C(CHIP,_io_subregion)(v, ioh, offset, size, nioh)
	void *v;
	bus_space_handle_t ioh, *nioh;
	bus_size_t offset, size;
{

	*nioh = ioh + offset;
	return (0);
}

int
__C(CHIP,_io_alloc)(v, rstart, rend, size, align, boundary, cacheable,
    addrp, bshp)
	void *v;
	bus_addr_t rstart, rend, *addrp;
	bus_size_t size, align, boundary;
	int cacheable;
	bus_space_handle_t *bshp;
{

	/* XXX XXX XXX XXX XXX XXX */
	panic("%s not implemented", __S(__C(CHIP,_io_alloc)));
}

void
__C(CHIP,_io_free)(v, bsh, size)
	void *v;
	bus_space_handle_t bsh;
	bus_size_t size;
{

	/* XXX XXX XXX XXX XXX XXX */
	panic("%s not implemented", __S(__C(CHIP,_io_free)));
}

inline void
__C(CHIP,_io_barrier)(v, h, o, l, f)
	void *v;
	bus_space_handle_t h;
	bus_size_t o, l;
	int f;
{

	if ((f & BUS_BARRIER_READ) != 0)
		alpha_mb();
	else if ((f & BUS_BARRIER_WRITE) != 0)
		alpha_wmb();
}

inline u_int8_t
__C(CHIP,_io_read_1)(v, ioh, off)
	void *v;
	bus_space_handle_t ioh;
	bus_size_t off;
{
	register bus_space_handle_t tmpioh;
	register u_int32_t *port, val;
	register u_int8_t rval;
	register int offset;

	alpha_mb();

	tmpioh = ioh + off;
	offset = tmpioh & 3;
	port = (u_int32_t *)((tmpioh << 5) | (0 << 3));
	val = *port;
	rval = ((val) >> (8 * offset)) & 0xff;

	return rval;
}

inline u_int16_t
__C(CHIP,_io_read_2)(v, ioh, off)
	void *v;
	bus_space_handle_t ioh;
	bus_size_t off;
{
	register bus_space_handle_t tmpioh;
	register u_int32_t *port, val;
	register u_int16_t rval;
	register int offset;

	alpha_mb();

	tmpioh = ioh + off;
	offset = tmpioh & 3;
	port = (u_int32_t *)((tmpioh << 5) | (1 << 3));
	val = *port;
	rval = ((val) >> (8 * offset)) & 0xffff;

	return rval;
}

inline u_int32_t
__C(CHIP,_io_read_4)(v, ioh, off)
	void *v;
	bus_space_handle_t ioh;
	bus_size_t off;
{
	register bus_space_handle_t tmpioh;
	register u_int32_t *port, val;
	register u_int32_t rval;
	register int offset;

	alpha_mb();

	tmpioh = ioh + off;
	offset = tmpioh & 3;
	port = (u_int32_t *)((tmpioh << 5) | (3 << 3));
	val = *port;
#if 0
	rval = ((val) >> (8 * offset)) & 0xffffffff;
#else
	rval = val;
#endif

	return rval;
}

inline u_int64_t
__C(CHIP,_io_read_8)(v, ioh, off)
	void *v;
	bus_space_handle_t ioh;
	bus_size_t off;
{

	/* XXX XXX XXX */
	panic("%s not implemented", __S(__C(CHIP,_io_read_8)));
}

#define CHIP_io_read_multi_N(BYTES,TYPE)				\
void									\
__C(__C(CHIP,_io_read_multi_),BYTES)(v, h, o, a, c)			\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	TYPE *a;							\
{									\
									\
	while (c-- > 0) {						\
		__C(CHIP,_io_barrier)(v, h, o, sizeof *a,		\
		    BUS_BARRIER_READ);					\
		*a++ = __C(__C(CHIP,_io_read_),BYTES)(v, h, o);		\
	}								\
}
CHIP_io_read_multi_N(1,u_int8_t)
CHIP_io_read_multi_N(2,u_int16_t)
CHIP_io_read_multi_N(4,u_int32_t)
CHIP_io_read_multi_N(8,u_int64_t)

#define CHIP_io_read_region_N(BYTES,TYPE)				\
void									\
__C(__C(CHIP,_io_read_region_),BYTES)(v, h, o, a, c)			\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	TYPE *a;							\
{									\
									\
	while (c-- > 0) {						\
		*a++ = __C(__C(CHIP,_io_read_),BYTES)(v, h, o);		\
		o += sizeof *a;						\
	}								\
}
CHIP_io_read_region_N(1,u_int8_t)
CHIP_io_read_region_N(2,u_int16_t)
CHIP_io_read_region_N(4,u_int32_t)
CHIP_io_read_region_N(8,u_int64_t)

inline void
__C(CHIP,_io_write_1)(v, ioh, off, val)
	void *v;
	bus_space_handle_t ioh;
	bus_size_t off;
	u_int8_t val;
{
	register bus_space_handle_t tmpioh;
	register u_int32_t *port, nval;
	register int offset;

	tmpioh = ioh + off;
	offset = tmpioh & 3;
        nval = val << (8 * offset);
        port = (u_int32_t *)((tmpioh << 5) | (0 << 3));
        *port = nval;
        alpha_mb();
}

inline void
__C(CHIP,_io_write_2)(v, ioh, off, val)
	void *v;
	bus_space_handle_t ioh;
	bus_size_t off;
	u_int16_t val;
{
	register bus_space_handle_t tmpioh;
	register u_int32_t *port, nval;
	register int offset;

	tmpioh = ioh + off;
	offset = tmpioh & 3;
        nval = val << (8 * offset);
        port = (u_int32_t *)((tmpioh << 5) | (1 << 3));
        *port = nval;
        alpha_mb();
}

inline void
__C(CHIP,_io_write_4)(v, ioh, off, val)
	void *v;
	bus_space_handle_t ioh;
	bus_size_t off;
	u_int32_t val;
{
	register bus_space_handle_t tmpioh;
	register u_int32_t *port, nval;
	register int offset;

	tmpioh = ioh + off;
	offset = tmpioh & 3;
        nval = val /*<< (8 * offset)*/;
        port = (u_int32_t *)((tmpioh << 5) | (3 << 3));
        *port = nval;
        alpha_mb();
}

inline void
__C(CHIP,_io_write_8)(v, ioh, off, val)
	void *v;
	bus_space_handle_t ioh;
	bus_size_t off;
	u_int64_t val;
{

	/* XXX XXX XXX */
	panic("%s not implemented", __S(__C(CHIP,_io_write_8)));
	alpha_mb();
}

#define CHIP_io_write_multi_N(BYTES,TYPE)				\
void									\
__C(__C(CHIP,_io_write_multi_),BYTES)(v, h, o, a, c)			\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	const TYPE *a;							\
{									\
									\
	while (c-- > 0) {						\
		__C(__C(CHIP,_io_write_),BYTES)(v, h, o, *a++);		\
		__C(CHIP,_io_barrier)(v, h, o, sizeof *a,		\
		    BUS_BARRIER_WRITE);					\
	}								\
}
CHIP_io_write_multi_N(1,u_int8_t)
CHIP_io_write_multi_N(2,u_int16_t)
CHIP_io_write_multi_N(4,u_int32_t)
CHIP_io_write_multi_N(8,u_int64_t)

#define CHIP_io_write_region_N(BYTES,TYPE)				\
void									\
__C(__C(CHIP,_io_write_region_),BYTES)(v, h, o, a, c)			\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	const TYPE *a;							\
{									\
									\
	while (c-- > 0) {						\
		__C(__C(CHIP,_io_write_),BYTES)(v, h, o, *a++);		\
		o += sizeof *a;						\
	}								\
}
CHIP_io_write_region_N(1,u_int8_t)
CHIP_io_write_region_N(2,u_int16_t)
CHIP_io_write_region_N(4,u_int32_t)
CHIP_io_write_region_N(8,u_int64_t)

#define CHIP_io_set_multi_N(BYTES,TYPE)					\
void									\
__C(__C(CHIP,_io_set_multi_),BYTES)(v, h, o, val, c)			\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	TYPE val;							\
{									\
									\
	while (c-- > 0) {						\
		__C(__C(CHIP,_io_write_),BYTES)(v, h, o, val);		\
		__C(CHIP,_io_barrier)(v, h, o, sizeof val,		\
		    BUS_BARRIER_WRITE);					\
	}								\
}
CHIP_io_set_multi_N(1,u_int8_t)
CHIP_io_set_multi_N(2,u_int16_t)
CHIP_io_set_multi_N(4,u_int32_t)
CHIP_io_set_multi_N(8,u_int64_t)

#define CHIP_io_set_region_N(BYTES,TYPE)				\
void									\
__C(__C(CHIP,_io_set_region_),BYTES)(v, h, o, val, c)			\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	TYPE val;							\
{									\
									\
	while (c-- > 0) {						\
		__C(__C(CHIP,_io_write_),BYTES)(v, h, o, val);		\
		o += sizeof val;					\
	}								\
}
CHIP_io_set_region_N(1,u_int8_t)
CHIP_io_set_region_N(2,u_int16_t)
CHIP_io_set_region_N(4,u_int32_t)
CHIP_io_set_region_N(8,u_int64_t)

#define	CHIP_io_copy_N(BYTES)						\
void									\
__C(__C(CHIP,_io_copy_),BYTES)(v, h1, o1, h2, o2, c)			\
	void *v;							\
	bus_space_handle_t h1, h2;					\
	bus_size_t o1, o2, c;						\
{									\
	bus_size_t i, o;						\
									\
	for (i = 0, o = 0; i < c; i++, o += BYTES)			\
		__C(__C(CHIP,_io_write_),BYTES)(v, h2, o2 + o,		\
		    __C(__C(CHIP,_io_read_),BYTES)(v, h1, o1 + o));	\
}
CHIP_io_copy_N(1)
CHIP_io_copy_N(2)
CHIP_io_copy_N(4)
CHIP_io_copy_N(8)

#define CHIP_io_read_raw_multi_N(BYTES,TYPE)				\
void									\
__C(__C(CHIP,_io_read_raw_multi_),BYTES)(v, h, o, a, c)			\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	u_int8_t *a;							\
{									\
	TYPE temp;							\
	int i;								\
									\
	while (c > 0) {							\
		__C(CHIP,_io_barrier)(v, h, o, BYTES, BUS_BARRIER_READ); \
		temp = __C(__C(CHIP,_io_read_),BYTES)(v, h, o);		\
		i = MIN(c, BYTES);					\
		c -= i;							\
		while (i--) {						\
			*a++ = temp & 0xff;				\
			temp >>= 8;					\
		}							\
	}								\
}
CHIP_io_read_raw_multi_N(2,u_int16_t)
CHIP_io_read_raw_multi_N(4,u_int32_t)
CHIP_io_read_raw_multi_N(8,u_int64_t)

#define CHIP_io_write_raw_multi_N(BYTES,TYPE)				\
void									\
__C(__C(CHIP,_io_write_raw_multi_),BYTES)(v, h, o, a, c)		\
	void *v;							\
	bus_space_handle_t h;						\
	bus_size_t o, c;						\
	const u_int8_t *a;						\
{									\
	TYPE temp;							\
	int i;								\
									\
	while (c > 0) {							\
		temp = 0;						\
		for (i = BYTES - 1; i >= 0; i--) {			\
			temp <<= 8;					\
			if (i < c)					\
				temp |= *(a + i);			\
		}							\
		__C(__C(CHIP,_io_write_),BYTES)(v, h, o, temp);		\
		__C(CHIP,_io_barrier)(v, h, o, BYTES, BUS_BARRIER_WRITE); \
		i = MIN(c, BYTES); 					\
		c -= i;							\
		a += i;							\
	}								\
}
CHIP_io_write_raw_multi_N(2,u_int16_t)
CHIP_io_write_raw_multi_N(4,u_int32_t)
CHIP_io_write_raw_multi_N(8,u_int64_t)
@


1.9
log
@take MIN/MAX from param.h, okay theo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcs_bus_io_common.c,v 1.8 1997/07/07 07:15:41 niklas Exp $	*/
@


1.8
log
@DOH! I got this right in the mem case but not in the io one.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcs_bus_io_common.c,v 1.7 1997/07/06 18:28:00 niklas Exp $	*/
a43 2

#define MIN(x,y)	((x) < (y) ? (x) : (y))
@


1.8.12.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcs_bus_io_common.c,v 1.8 1997/07/07 07:15:41 niklas Exp $	*/
@


1.7
log
@Safer implementations of *_raw_multi_* funcs
@
text
@d1 1
a1 1
/*	$OpenBSD: pcs_bus_io_common.c,v 1.6 1997/04/02 22:08:09 niklas Exp $	*/
d797 1
a797 1
		i = MIN(c, BYTES) - 1; 					\
@


1.6
log
@Better implementation of buf_space_*_raw_multi_* that deals well
with unaligned buffers
@
text
@d1 1
a1 1
/*	$OpenBSD: pcs_bus_io_common.c,v 1.5 1997/01/24 19:57:55 niklas Exp $	*/
d45 2
d765 3
a767 1
		for (i = 0; i < BYTES; i++) {				\
a770 1
		c -= BYTES;						\
d792 2
a793 1
			temp |= *(a + i);				\
d797 3
a799 2
		c -= BYTES;						\
		a += BYTES;						\
@


1.5
log
@Sync with NetBSD 961207
@
text
@d1 1
a1 1
/*	$OpenBSD: pcs_bus_io_common.c,v 1.4 1996/12/08 00:20:45 niklas Exp $	*/
d154 19
d245 10
d748 52
@


1.4
log
@Merge to NetBSD 961107, i.e. mostly new bus.h
@
text
@d1 2
a2 2
/*	$OpenBSD: pcs_bus_io_common.c,v 1.3 1996/10/30 22:40:12 niklas Exp $	*/
/*	$NetBSD: pcs_bus_io_common.c,v 1.9 1996/10/23 04:12:31 cgd Exp $	*/
d40 2
d60 4
d65 1
a65 1
u_int8_t	__C(CHIP,_io_read_1) __P((void *, bus_space_handle_t,
d67 1
a67 1
u_int16_t	__C(CHIP,_io_read_2) __P((void *, bus_space_handle_t,
d69 1
a69 1
u_int32_t	__C(CHIP,_io_read_4) __P((void *, bus_space_handle_t,
d71 1
a71 1
u_int64_t	__C(CHIP,_io_read_8) __P((void *, bus_space_handle_t,
d95 1
a95 1
void		__C(CHIP,_io_write_1) __P((void *, bus_space_handle_t,
d97 1
a97 1
void		__C(CHIP,_io_write_2) __P((void *, bus_space_handle_t,
d99 1
a99 1
void		__C(CHIP,_io_write_4) __P((void *, bus_space_handle_t,
d101 1
a101 1
void		__C(CHIP,_io_write_8) __P((void *, bus_space_handle_t,
d124 32
a155 3
/* barrier */
void		__C(CHIP,_io_barrier) __P((void *, bus_space_handle_t,
		    bus_size_t, bus_size_t, int));
d169 3
d179 1
a179 1
	/* read multi */
d197 1
a197 1
	/* write multi */
d209 6
a214 3
	/* set multi */
	/* XXX IMPLEMENT */

d216 4
a219 1
	/* XXX IMPLEMENT */
d222 4
a225 4
	/* XXX IMPLEMENT */

	/* barrier */
	__C(CHIP,_io_barrier),
d229 2
a230 2
__C(CHIP,_bus_io_init)(iov)
	void *iov;
d232 32
a263 1
        bus_space_tag_t h = &__C(CHIP,_io_space);;
d265 1
a265 2
	h->abs_cookie = iov;
	return (h);
d276 1
d278 18
a295 5
#ifdef CHIP_IO_W1_START
	if (ioaddr >= CHIP_IO_W1_START(v) &&
	    ioaddr <= CHIP_IO_W1_END(v)) {
		*iohp = (ALPHA_PHYS_TO_K0SEG(CHIP_IO_W1_BASE(v)) >> 5) +
		    (ioaddr & CHIP_IO_W1_MASK(v));
d298 5
a302 5
#ifdef CHIP_IO_W2_START
	if (ioaddr >= CHIP_IO_W2_START(v) &&
	    ioaddr <= CHIP_IO_W2_END(v)) {
		*iohp = (ALPHA_PHYS_TO_K0SEG(CHIP_IO_W2_BASE(v)) >> 5) +
		    (ioaddr & CHIP_IO_W2_MASK(v));
d307 1
a307 1
#ifdef CHIP_IO_W1_START
d309 2
a310 2
		    __S(__C(CHIP,_io_map)), CHIP_IO_W1_START(v),
		    CHIP_IO_W1_END(v)-1);
d312 1
a312 1
#ifdef CHIP_IO_W2_START
d314 2
a315 2
		    __S(__C(CHIP,_io_map)), CHIP_IO_W2_START(v),
		    CHIP_IO_W2_END(v)-1);
d317 1
a317 1
		panic("%s: don't know how to map %lx non-cacheable",
a320 1
	/* XXX XXX XXX XXX XXX XXX */
d330 38
d369 13
a381 2
	/* XXX nothing to do. */
	/* XXX XXX XXX XXX XXX XXX */
d420 15
a434 1
u_int8_t
d456 1
a456 1
u_int16_t
d478 1
a478 1
u_int32_t
d504 1
a504 1
u_int64_t
d554 1
a554 1
void
d573 1
a573 1
void
d592 1
a592 1
void
d611 1
a611 1
void
d663 19
a681 7
void
__C(CHIP,_io_barrier)(v, h, o, l, f)
	void *v;
	bus_space_handle_t h;
	bus_size_t o, l;
	int f;
{
d683 13
a695 4
	if ((f & BUS_BARRIER_READ) != 0)
		alpha_mb();
	else if ((f & BUS_BARRIER_WRITE) != 0)
		alpha_wmb();
d697 22
@


1.3
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 2
a2 2
/*	$OpenBSD: pcs_bus_io_common.c,v 1.8 1996/10/13 03:00:15 christos Exp $	*/
/*	$NetBSD: pcs_bus_io_common.c,v 1.8 1996/10/13 03:00:15 christos Exp $	*/
d43 140
a182 38
int		__C(CHIP,_io_map) __P((void *, bus_io_addr_t, bus_io_size_t,
		    bus_io_handle_t *));
void		__C(CHIP,_io_unmap) __P((void *, bus_io_handle_t,
		    bus_io_size_t));
int		__C(CHIP,_io_subregion) __P((void *, bus_io_handle_t,
		    bus_io_size_t, bus_io_size_t, bus_io_handle_t *));
u_int8_t	__C(CHIP,_io_read_1) __P((void *, bus_io_handle_t,
		    bus_io_size_t));
u_int16_t	__C(CHIP,_io_read_2) __P((void *, bus_io_handle_t,
		    bus_io_size_t));
u_int32_t	__C(CHIP,_io_read_4) __P((void *, bus_io_handle_t,
		    bus_io_size_t));
u_int64_t	__C(CHIP,_io_read_8) __P((void *, bus_io_handle_t,
		    bus_io_size_t));
void		__C(CHIP,_io_read_multi_1) __P((void *, bus_io_handle_t,
		    bus_io_size_t, u_int8_t *, bus_io_size_t));
void		__C(CHIP,_io_read_multi_2) __P((void *, bus_io_handle_t,
		    bus_io_size_t, u_int16_t *, bus_io_size_t));
void		__C(CHIP,_io_read_multi_4) __P((void *, bus_io_handle_t,
		    bus_io_size_t, u_int32_t *, bus_io_size_t));
void		__C(CHIP,_io_read_multi_8) __P((void *, bus_io_handle_t,
		    bus_io_size_t, u_int64_t *, bus_io_size_t));
void		__C(CHIP,_io_write_1) __P((void *, bus_io_handle_t,
		    bus_io_size_t, u_int8_t));
void		__C(CHIP,_io_write_2) __P((void *, bus_io_handle_t,
		    bus_io_size_t, u_int16_t));
void		__C(CHIP,_io_write_4) __P((void *, bus_io_handle_t,
		    bus_io_size_t, u_int32_t));
void		__C(CHIP,_io_write_8) __P((void *, bus_io_handle_t,
		    bus_io_size_t, u_int64_t));
void		__C(CHIP,_io_write_multi_1) __P((void *, bus_io_handle_t,
		    bus_io_size_t, const u_int8_t *, bus_io_size_t));
void		__C(CHIP,_io_write_multi_2) __P((void *, bus_io_handle_t,
		    bus_io_size_t, const u_int16_t *, bus_io_size_t));
void		__C(CHIP,_io_write_multi_4) __P((void *, bus_io_handle_t,
		    bus_io_size_t, const u_int32_t *, bus_io_size_t));
void		__C(CHIP,_io_write_multi_8) __P((void *, bus_io_handle_t,
		    bus_io_size_t, const u_int64_t *, bus_io_size_t));
d184 2
a185 3
void
__C(CHIP,_bus_io_init)(bc, iov)
	bus_chipset_tag_t bc;
d188 1
d190 2
a191 25
	bc->bc_i_v = iov;

	bc->bc_i_map = __C(CHIP,_io_map);
	bc->bc_i_unmap = __C(CHIP,_io_unmap);
	bc->bc_i_subregion = __C(CHIP,_io_subregion);

	bc->bc_ir1 = __C(CHIP,_io_read_1);
	bc->bc_ir2 = __C(CHIP,_io_read_2);
	bc->bc_ir4 = __C(CHIP,_io_read_4);
	bc->bc_ir8 = __C(CHIP,_io_read_8);

	bc->bc_irm1 = __C(CHIP,_io_read_multi_1);
	bc->bc_irm2 = __C(CHIP,_io_read_multi_2);
	bc->bc_irm4 = __C(CHIP,_io_read_multi_4);
	bc->bc_irm8 = __C(CHIP,_io_read_multi_8);

	bc->bc_iw1 = __C(CHIP,_io_write_1);
	bc->bc_iw2 = __C(CHIP,_io_write_2);
	bc->bc_iw4 = __C(CHIP,_io_write_4);
	bc->bc_iw8 = __C(CHIP,_io_write_8);

	bc->bc_iwm1 = __C(CHIP,_io_write_multi_1);
	bc->bc_iwm2 = __C(CHIP,_io_write_multi_2);
	bc->bc_iwm4 = __C(CHIP,_io_write_multi_4);
	bc->bc_iwm8 = __C(CHIP,_io_write_multi_8);
d195 1
a195 1
__C(CHIP,_io_map)(v, ioaddr, iosize, iohp)
d197 4
a200 3
	bus_io_addr_t ioaddr;
	bus_io_size_t iosize;
	bus_io_handle_t *iohp;
d229 1
a229 1
		panic("%s: don't know how to map %lx non-cacheable\n",
d233 1
d240 2
a241 2
	bus_io_handle_t ioh;
	bus_io_size_t iosize;
d245 1
d251 2
a252 2
	bus_io_handle_t ioh, *nioh;
	bus_io_size_t offset, size;
d259 25
d287 2
a288 2
	bus_io_handle_t ioh;
	bus_io_size_t off;
d290 1
a290 1
	register bus_io_handle_t tmpioh;
d309 2
a310 2
	bus_io_handle_t ioh;
	bus_io_size_t off;
d312 1
a312 1
	register bus_io_handle_t tmpioh;
d331 2
a332 2
	bus_io_handle_t ioh;
	bus_io_size_t off;
d334 1
a334 1
	register bus_io_handle_t tmpioh;
d357 2
a358 2
	bus_io_handle_t ioh;
	bus_io_size_t off;
d362 1
a362 24
	panic("%s not implemented\n", __S(__C(CHIP,_io_read_8)));
}

void
__C(CHIP,_io_read_multi_1)(v, ioh, off, addr, count)
	void *v;
	bus_io_handle_t ioh;
	bus_io_size_t off, count;
	u_int8_t *addr;
{
	register bus_io_handle_t tmpioh;
	register u_int32_t *port, val;
	register int offset;

	alpha_mb();

	while (count--) {
		tmpioh = ioh + off;
		offset = tmpioh & 3;
		port = (u_int32_t *)((tmpioh << 5) | (0 << 3));
		val = *port;
		*addr++ = ((val) >> (8 * offset)) & 0xff;
		off++;
	}
d365 38
a402 61
void
__C(CHIP,_io_read_multi_2)(v, ioh, off, addr, count)
	void *v;
	bus_io_handle_t ioh;
	bus_io_size_t off, count;
	u_int16_t *addr;
{
	register bus_io_handle_t tmpioh;
	register u_int32_t *port, val;
	register int offset;

	alpha_mb();

	while (count--) {
		tmpioh = ioh + off;
		offset = tmpioh & 3;
		port = (u_int32_t *)((tmpioh << 5) | (1 << 3));
		val = *port;
		*addr++ = ((val) >> (8 * offset)) & 0xffff;
		off++;
	}
}

void
__C(CHIP,_io_read_multi_4)(v, ioh, off, addr, count)
	void *v;
	bus_io_handle_t ioh;
	bus_io_size_t off, count;
	u_int32_t *addr;
{
	register bus_io_handle_t tmpioh;
	register u_int32_t *port, val;
	register int offset;

	alpha_mb();

	while (count--) {
		tmpioh = ioh + off;
		offset = tmpioh & 3;
		port = (u_int32_t *)((tmpioh << 5) | (3 << 3));
		val = *port;
#if 0
		*addr++ = ((val) >> (8 * offset)) & 0xffffffff;
#else
		*addr++ = val;
#endif
		off++;
	}
}

void
__C(CHIP,_io_read_multi_8)(v, ioh, off, addr, count)
	void *v;
	bus_io_handle_t ioh;
	bus_io_size_t off, count;
	u_int64_t *addr;
{

	/* XXX XXX XXX */
	panic("%s not implemented\n", __S(__C(CHIP,_io_read_multi_8)));
}
d407 2
a408 2
	bus_io_handle_t ioh;
	bus_io_size_t off;
d411 1
a411 1
	register bus_io_handle_t tmpioh;
d426 2
a427 2
	bus_io_handle_t ioh;
	bus_io_size_t off;
d430 1
a430 1
	register bus_io_handle_t tmpioh;
d445 2
a446 2
	bus_io_handle_t ioh;
	bus_io_size_t off;
d449 1
a449 1
	register bus_io_handle_t tmpioh;
d464 2
a465 2
	bus_io_handle_t ioh;
	bus_io_size_t off;
d470 1
a470 1
	panic("%s not implemented\n", __S(__C(CHIP,_io_write_8)));
d474 51
a524 76
void
__C(CHIP,_io_write_multi_1)(v, ioh, off, addr, count)
	void *v;
	bus_io_handle_t ioh;
	bus_io_size_t off, count;
	const u_int8_t *addr;
{
	register bus_io_handle_t tmpioh;
	register u_int32_t *port, nval;
	register int offset;

	while (count--) {
		tmpioh = ioh + off;
		offset = tmpioh & 3;
        	nval = (*addr++) << (8 * offset);
		port = (u_int32_t *)((tmpioh << 5) | (0 << 3));
		*port = nval;
		off++;
	}
	alpha_mb();
}

void
__C(CHIP,_io_write_multi_2)(v, ioh, off, addr, count)
	void *v;
	bus_io_handle_t ioh;
	bus_io_size_t off, count;
	const u_int16_t *addr;
{
	register bus_io_handle_t tmpioh;
	register u_int32_t *port, nval;
	register int offset;

	while (count--) {
		tmpioh = ioh + off;
		offset = tmpioh & 3;
        	nval = (*addr++) << (8 * offset);
		port = (u_int32_t *)((tmpioh << 5) | (1 << 3));
		*port = nval;
		off++;
	}
	alpha_mb();
}

void
__C(CHIP,_io_write_multi_4)(v, ioh, off, addr, count)
	void *v;
	bus_io_handle_t ioh;
	bus_io_size_t off, count;
	const u_int32_t *addr;
{
	register bus_io_handle_t tmpioh;
	register u_int32_t *port, nval;
	register int offset;

	while (count--) {
		tmpioh = ioh + off;
		offset = tmpioh & 3;
        	nval = (*addr++) /*<< (8 * offset)*/;
		port = (u_int32_t *)((tmpioh << 5) | (3 << 3));
		*port = nval;
		off++;
	}
	alpha_mb();
}

void
__C(CHIP,_io_write_multi_8)(v, ioh, off, addr, count)
	void *v;
	bus_io_handle_t ioh;
	bus_io_size_t off, count;
	const u_int64_t *addr;
{

	/* XXX XXX XXX */
	panic("%s not implemented\n", __S(__C(CHIP,_io_write_multi_8)));
@


1.2
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: pcs_bus_io_common.c,v 1.2.4.2 1996/06/13 18:16:59 cgd Exp $	*/
/*	$NetBSD: pcs_bus_io_common.c,v 1.2.4.2 1996/06/13 18:16:59 cgd Exp $	*/
d126 1
a126 1
		*iohp = (phystok0seg(CHIP_IO_W1_BASE(v)) >> 5) +
d133 1
a133 1
		*iohp = (phystok0seg(CHIP_IO_W2_BASE(v)) >> 5) +
d188 1
a188 1
	wbflush();
d210 1
a210 1
	wbflush();
d232 1
a232 1
	wbflush();
d269 1
a269 1
	wbflush();
d292 1
a292 1
	wbflush();
d315 1
a315 1
	wbflush();
d359 1
a359 1
        wbflush();
d378 1
a378 1
        wbflush();
d397 1
a397 1
        wbflush();
d410 1
a410 1
	wbflush();
d432 1
a432 1
	wbflush();
d454 1
a454 1
	wbflush();
d476 1
a476 1
	wbflush();
@


1.1
log
@sync to 0616, retaining local diffs
@
text
@d1 1
@
