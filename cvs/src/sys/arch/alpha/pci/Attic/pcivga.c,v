head	1.10;
access;
symbols
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	UBC_SYNC_A:1.10
	UBC_SYNC_B:1.10
	SMP:1.10.0.2
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	97.07.05.10.38.41;	author niklas;	state dead;
branches;
next	1.9;

1.9
date	96.12.08.00.20.44;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	96.11.23.21.44.55;	author kstailey;	state Exp;
branches;
next	1.7;

1.7
date	96.10.30.22.40.10;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.07.29.23.00.46;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.06.18.09.44.32;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.02.20.04.35.25;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	95.12.27.22.25.36;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.03.53.33;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.45;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.45;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove obsolete files
@
text
@/*	$OpenBSD: pcivga.c,v 1.9 1996/12/08 00:20:44 niklas Exp $	*/
/*	$NetBSD: pcivga.c,v 1.12 1996/10/23 04:12:29 cgd Exp $	*/

/*
 * Copyright (c) 1995, 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/malloc.h>

#include <machine/autoconf.h>
#include <machine/pte.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/pcidevs.h>

#include <alpha/pci/pcivgavar.h>
#include <alpha/wscons/wsconsvar.h>

#define	PCIVGA_6845_ADDR	0x24
#define	PCIVGA_6845_DATA	0x25

int	pcivgamatch __P((struct device *, void *, void *));
void	pcivgaattach __P((struct device *, struct device *, void *));
int	pcivgaprint __P((void *, const char *));

struct cfattach pcivga_ca = {
	sizeof(struct pcivga_softc), pcivgamatch, pcivgaattach,
};

struct cfdriver pcivga_cd = {
	NULL, "pcivga", DV_DULL,
};

void	pcivga_getdevconfig __P((bus_space_tag_t, bus_space_tag_t,
	    pci_chipset_tag_t, pcitag_t, struct pcivga_devconfig *dc));

struct pcivga_devconfig pcivga_console_dc;

void	pcivga_cursor __P((void *, int, int, int));
void	pcivga_putstr __P((void *, int, int, char *, int));
void	pcivga_copycols __P((void *, int, int, int,int));
void	pcivga_erasecols __P((void *, int, int, int));
void	pcivga_copyrows __P((void *, int, int, int));
void	pcivga_eraserows __P((void *, int, int));

struct wscons_emulfuncs pcivga_emulfuncs = {
	pcivga_cursor,
	pcivga_putstr,
	pcivga_copycols,
	pcivga_erasecols,
	pcivga_copyrows,
	pcivga_eraserows,
};

int	pcivgaioctl __P((struct device *, u_long, caddr_t, int,
	    struct proc *));
int	pcivgammap __P((struct device *, off_t, int));

int
pcivgamatch(parent, match, aux)
	struct device *parent;
	void *match, *aux;
{
	struct pci_attach_args *pa = aux;

	/*
	 * If it's prehistoric/vga or display/vga, we match.
	 */
	if (PCI_CLASS(pa->pa_class) == PCI_CLASS_PREHISTORIC &&
	    PCI_SUBCLASS(pa->pa_class) == PCI_SUBCLASS_PREHISTORIC_VGA)
		return (1);
	if (PCI_CLASS(pa->pa_class) == PCI_CLASS_DISPLAY &&
	     PCI_SUBCLASS(pa->pa_class) == PCI_SUBCLASS_DISPLAY_VGA)
		return (1);

	return (0);
}

void
pcivga_getdevconfig(iot, memt, pc, tag, dc)
	bus_space_tag_t iot, memt;
	pci_chipset_tag_t pc;
	pcitag_t tag;
	struct pcivga_devconfig *dc;
{
	bus_space_handle_t ioh;
	int cpos;

	dc->dc_iot = iot;
	dc->dc_memt = memt;
	dc->dc_pc = pc;
	dc->dc_pcitag = tag;

	/* XXX deal with mapping foo */

	if (bus_space_map(memt, 0xb8000, 0x8000, 0, &dc->dc_memh))
		panic("pcivga_getdevconfig: couldn't map memory");
	if (bus_space_map(iot, 0x3b0, 0x30, 0, &ioh))
		panic("pcivga_getdevconfig: couldn't map io");
	dc->dc_ioh = ioh;

	dc->dc_nrow = 25;
	dc->dc_ncol = 80;

	dc->dc_ccol = dc->dc_crow = 0;

	bus_space_write_1(iot, ioh, PCIVGA_6845_ADDR, 14);
	cpos = bus_space_read_1(iot, ioh, PCIVGA_6845_DATA) << 8;
	bus_space_write_1(iot, ioh, PCIVGA_6845_ADDR, 15);
	cpos |= bus_space_read_1(iot, ioh, PCIVGA_6845_DATA);

	dc->dc_crow = cpos / dc->dc_ncol;
	dc->dc_ccol = cpos % dc->dc_ncol;

	dc->dc_so = 0;
#if 0
	dc->dc_at = 0x00 | 0xf;		  /* black bg | white fg */
	dc->dc_so_at = 0x00 | 0xf | 0x80; /* black bg | white fg | blink */

	/* clear screen, frob cursor, etc.? */
	pcivga_eraserows(dc, 0, dc->dc_nrow);
#endif
	/*
	 * XXX DEC HAS SWITCHED THE CODES FOR BLUE AND RED!!!
	 * XXX Therefore, though the comments say "blue bg", the code uses
	 * XXX the value for a red background!
	 */
	dc->dc_at = 0x40 | 0x0f;		/* blue bg | white fg */
	dc->dc_so_at = 0x40 | 0x0f | 0x80;	/* blue bg | white fg | blink */
}

void
pcivgaattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct pci_attach_args *pa = aux;
	struct pcivga_softc *sc = (struct pcivga_softc *)self;
	struct wscons_attach_args waa;
	struct wscons_odev_spec *wo;
	char devinfo[256];
	int console;

	console = (pa->pa_tag == pcivga_console_dc.dc_pcitag);
	if (console)
		sc->sc_dc = &pcivga_console_dc;
	else {
		sc->sc_dc = (struct pcivga_devconfig *)
		    malloc(sizeof(struct pcivga_devconfig), M_DEVBUF, M_WAITOK);
		pcivga_getdevconfig(pa->pa_iot, pa->pa_memt, pa->pa_pc,
		    pa->pa_tag, sc->sc_dc);
	}

	pci_devinfo(pa->pa_id, pa->pa_class, 0, devinfo);
	printf(": %s (rev. 0x%02x)\n", devinfo,
	    PCI_REVISION(pa->pa_class));

#if 0
	if (sc->sc_dc->dc_tgaconf == NULL) {
		printf("unknown board configuration\n");
		return;
	}
	printf("board type %s\n", sc->sc_dc->dc_tgaconf->tgac_name);
	printf("%s: %d x %d, %dbpp, %s RAMDAC\n", sc->sc_dev.dv_xname,
	    sc->sc_dc->dc_wid, sc->sc_dc->dc_ht,
	    sc->sc_dc->dc_tgaconf->tgac_phys_depth, 
	    sc->sc_dc->dc_tgaconf->tgac_ramdac->tgar_name);
#endif

#if 0
	pci_intrdata = pci_conf_read(sc->sc_pcitag, PCI_INTERRUPT_REG);
	if (PCI_INTERRUPT_PIN(pci_intrdata) != PCI_INTERRUPT_PIN_NONE) {
		sc->sc_intr = pci_map_int(sc->sc_pcitag, IPL_TTY, tgaintr, sc);
		if (sc->sc_intr == NULL)
			printf("%s: WARNING: couldn't map interrupt\n",
			    sc->sc_dev.dv_xname);
	}
#endif

	waa.waa_isconsole = console;
	wo = &waa.waa_odev_spec;
	wo->wo_ef = &pcivga_emulfuncs;
	wo->wo_efa = sc->sc_dc;
	wo->wo_nrows = sc->sc_dc->dc_nrow;
	wo->wo_ncols = sc->sc_dc->dc_ncol;
	wo->wo_crow = sc->sc_dc->dc_crow;
	wo->wo_ccol = sc->sc_dc->dc_ccol;
	wo->wo_ioctl = pcivgaioctl;
	wo->wo_mmap = pcivgammap;

	config_found(self, &waa, pcivgaprint);
}

int
pcivgaprint(aux, pnp)
	void *aux;
	const char *pnp;
{

	if (pnp)
		printf("wscons at %s", pnp);
	return (UNCONF);
}

int
pcivgaioctl(dev, cmd, data, flag, p)
	struct device *dev;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
{

	return -1; /* XXX */
}

int
pcivgammap(dev, offset, prot)
	struct device *dev;
	off_t offset;
	int prot;
{
#if 0
	struct pcivga_softc *sc = (struct pcivga_softc *)dev;
#endif
	int rv;

	rv = -1;
#if 0 /* XXX */
	if (offset >= 0 && offset < 0x100000) {		/* 1MB */
		/* Deal with mapping the VGA memory */
		if (offset >= 0xb8000 && offset < 0xc0000) {
			offset -= 0xb8000;
			rv = alpha_btop(k0segtophys(sc->sc_dc->dc_crtat) +
			    offset);
		}
	} else {
		/* XXX should do something with PCI memory */
		rv = -1;
	}
#endif
	return rv;
}

void
pcivga_console(iot, memt, pc, bus, device, function)
	bus_space_tag_t iot, memt;
	pci_chipset_tag_t pc;
	int bus, device, function;
{
	struct pcivga_devconfig *dcp = &pcivga_console_dc;
	struct wscons_odev_spec wo;

	pcivga_getdevconfig(iot, memt, pc,
	    pci_make_tag(pc, bus, device, function), dcp);

        wo.wo_ef = &pcivga_emulfuncs;
        wo.wo_efa = dcp;
        wo.wo_nrows = dcp->dc_nrow;
        wo.wo_ncols = dcp->dc_ncol;
	wo.wo_crow = dcp->dc_crow;
	wo.wo_ccol = dcp->dc_ccol;
        /* ioctl and mmap are unused until real attachment. */

        wscons_attach_console(&wo);
}

/*
 * The following functions implement the MI ANSI terminal emulation on
 * a VGA display.
 */
void
pcivga_cursor(id, on, row, col)
	void *id;
	int on, row, col;
{
	struct pcivga_devconfig *dc = id;
	bus_space_tag_t iot = dc->dc_iot;
	bus_space_handle_t ioh = dc->dc_ioh;
	int pos;

#if 0
	printf("pcivga_cursor: %d %d\n", row, col);
#endif
        /* turn the cursor off */
        if (!on) {
		/* XXX disable cursor how??? */
		dc->dc_crow = dc->dc_ccol = -1;
        } else {
		dc->dc_crow = row;
		dc->dc_ccol = col;
        }

	pos = row * dc->dc_ncol + col;

        bus_space_write_1(iot, ioh, PCIVGA_6845_ADDR, 14);
        bus_space_write_1(iot, ioh, PCIVGA_6845_DATA, pos >> 8);
        bus_space_write_1(iot, ioh, PCIVGA_6845_ADDR, 15);
        bus_space_write_1(iot, ioh, PCIVGA_6845_DATA, pos);
}

void
pcivga_putstr(id, row, col, cp, len)
	void *id;
	int row, col;
	char *cp;
	int len;
{
	struct pcivga_devconfig *dc = id;
	bus_space_tag_t memt = dc->dc_memt;
	bus_space_handle_t memh = dc->dc_memh;
	int i, off;

	off = (row * dc->dc_ncol + col) * 2;
	for (i = 0; i < len; i++, cp++, off += 2) {
		bus_space_write_1(memt, memh, off, *cp);
		bus_space_write_1(memt, memh, off + 1,
		    dc->dc_so ? dc->dc_so_at : dc->dc_at);
	}
}

void
pcivga_copycols(id, row, srccol, dstcol, ncols)
	void *id;
	int row, srccol, dstcol, ncols;
{
	struct pcivga_devconfig *dc = id;
	bus_space_tag_t memt = dc->dc_memt;
	bus_space_handle_t memh = dc->dc_memh;
	bus_size_t srcoff, srcend, dstoff;

	/*
	 * YUCK.  Need bus copy functions.
	 */
	srcoff = (row * dc->dc_ncol + srccol) * 2;
	srcend = srcoff + ncols * 2;
	dstoff = (row * dc->dc_ncol + dstcol) * 2;

	for (; srcoff < srcend; srcoff += 2, dstoff += 2)
		bus_space_write_2(memt, memh, dstoff,
		    bus_space_read_2(memt, memh, srcoff));
}

void
pcivga_erasecols(id, row, startcol, ncols)
	void *id;
	int row, startcol, ncols;
{
	struct pcivga_devconfig *dc = id;
	bus_space_tag_t memt = dc->dc_memt;
	bus_space_handle_t memh = dc->dc_memh;
	bus_size_t off, endoff;
	u_int16_t val;

	/*
	 * YUCK.  Need bus 'set' functions.
	 */
	off = (row * dc->dc_ncol + startcol) * 2;
	endoff = off + ncols * 2;
	val = (dc->dc_at << 8) | ' ';

	for (; off < endoff; off += 2)
		bus_space_write_2(memt, memh, off, val);
}

void
pcivga_copyrows(id, srcrow, dstrow, nrows)
	void *id;
	int srcrow, dstrow, nrows;
{
	struct pcivga_devconfig *dc = id;
	bus_space_tag_t memt = dc->dc_memt;
	bus_space_handle_t memh = dc->dc_memh;
	bus_size_t srcoff, srcend, dstoff;

	/*
	 * YUCK.  Need bus copy functions.
	 */
	srcoff = (srcrow * dc->dc_ncol + 0) * 2;
	srcend = srcoff + (nrows * dc->dc_ncol * 2);
	dstoff = (dstrow * dc->dc_ncol + 0) * 2;

	for (; srcoff < srcend; srcoff += 2, dstoff += 2)
		bus_space_write_2(memt, memh, dstoff,
		    bus_space_read_2(memt, memh, srcoff));
}

void
pcivga_eraserows(id, startrow, nrows)
	void *id;
	int startrow, nrows;
{
	struct pcivga_devconfig *dc = id;
	bus_space_tag_t memt = dc->dc_memt;
	bus_space_handle_t memh = dc->dc_memh;
	bus_size_t off, endoff;
	u_int16_t val;

	/*
	 * YUCK.  Need bus 'set' functions.
	 */
	off = (startrow * dc->dc_ncol + 0) * 2;
	endoff = off + (nrows * dc->dc_ncol) * 2;
	val = (dc->dc_at << 8) | ' ';

	for (; off < endoff; off += 2)
		bus_space_write_2(memt, memh, off, val);
}
@


1.9
log
@Merge to NetBSD 961107, i.e. mostly new bus.h
@
text
@d1 1
a1 1
/*	$OpenBSD: pcivga.c,v 1.8 1996/11/23 21:44:55 kstailey Exp $	*/
@


1.8
log
@added const to second parameter of cfprint_t routines
@
text
@d1 2
a2 2
/*	$OpenBSD: pcivga.c,v 1.7 1996/10/30 22:40:10 niklas Exp $	*/
/*	$NetBSD: pcivga.c,v 1.11 1996/10/13 03:00:13 christos Exp $	*/
d62 2
a63 2
void	pcivga_getdevconfig __P((bus_chipset_tag_t, pci_chipset_tag_t,
	    pcitag_t, struct pcivga_devconfig *dc));
d108 2
a109 2
pcivga_getdevconfig(bc, pc, tag, dc)
	bus_chipset_tag_t bc;
d114 1
a114 1
	bus_io_handle_t ioh;
d117 2
a118 1
	dc->dc_bc = bc;
d124 1
a124 1
	if (bus_mem_map(bc, 0xb8000, 0x8000, 0, &dc->dc_memh))
d126 1
a126 1
	if (bus_io_map(bc, 0x3b0, 0x30, &ioh))
d135 4
a138 4
	bus_io_write_1(bc, ioh, PCIVGA_6845_ADDR, 14);
	cpos = bus_io_read_1(bc, ioh, PCIVGA_6845_DATA) << 8;
	bus_io_write_1(bc, ioh, PCIVGA_6845_ADDR, 15);
	cpos |= bus_io_read_1(bc, ioh, PCIVGA_6845_DATA);
d178 2
a179 2
		pcivga_getdevconfig(pa->pa_bc, pa->pa_pc, pa->pa_tag,
		    sc->sc_dc);
d274 2
a275 2
pcivga_console(bc, pc, bus, device, function)
	bus_chipset_tag_t bc;
d282 1
a282 1
	pcivga_getdevconfig(bc, pc,
d306 2
a307 2
	bus_chipset_tag_t bc = dc->dc_bc;
	bus_io_handle_t ioh = dc->dc_ioh;
d324 4
a327 4
        bus_io_write_1(bc, ioh, PCIVGA_6845_ADDR, 14);
        bus_io_write_1(bc, ioh, PCIVGA_6845_DATA, pos >> 8);
        bus_io_write_1(bc, ioh, PCIVGA_6845_ADDR, 15);
        bus_io_write_1(bc, ioh, PCIVGA_6845_DATA, pos);
d338 2
a339 2
	bus_chipset_tag_t bc = dc->dc_bc;
	bus_mem_handle_t memh = dc->dc_memh;
d344 2
a345 2
		bus_mem_write_1(bc, memh, off, *cp);
		bus_mem_write_1(bc, memh, off + 1,
d356 3
a358 3
	bus_chipset_tag_t bc = dc->dc_bc;
	bus_mem_handle_t memh = dc->dc_memh;
	bus_mem_size_t srcoff, srcend, dstoff;
d368 2
a369 2
		bus_mem_write_2(bc, memh, dstoff,
		    bus_mem_read_2(bc, memh, srcoff));
d378 3
a380 3
	bus_chipset_tag_t bc = dc->dc_bc;
	bus_mem_handle_t memh = dc->dc_memh;
	bus_mem_size_t off, endoff;
d391 1
a391 1
		bus_mem_write_2(bc, memh, off, val);
d400 3
a402 3
	bus_chipset_tag_t bc = dc->dc_bc;
	bus_mem_handle_t memh = dc->dc_memh;
	bus_mem_size_t srcoff, srcend, dstoff;
d412 2
a413 2
		bus_mem_write_2(bc, memh, dstoff,
		    bus_mem_read_2(bc, memh, srcoff));
d422 3
a424 3
	bus_chipset_tag_t bc = dc->dc_bc;
	bus_mem_handle_t memh = dc->dc_memh;
	bus_mem_size_t off, endoff;
d435 1
a435 1
		bus_mem_write_2(bc, memh, off, val);
@


1.7
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
/*	$OpenBSD: pcivga.c,v 1.11 1996/10/13 03:00:13 christos Exp $	*/
d52 1
a52 1
int	pcivgaprint __P((void *, /* const */ char *));
d224 1
a224 1
	/* const */ char *pnp;
@


1.6
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: pcivga.c,v 1.8 1996/04/17 21:49:58 cgd Exp $	*/
/*	$NetBSD: pcivga.c,v 1.8 1996/04/17 21:49:58 cgd Exp $	*/
d52 1
a52 1
int	pcivgaprint __P((void *, char *));
a91 1
	struct cfdata *cf = match;
d224 1
a224 1
	char *pnp;
d250 1
d252 1
a338 1
	char *dcp;
@


1.5
log
@sync to 0616, retaining local diffs
@
text
@d1 1
@


1.4
log
@Pass device name to interrupt establish routines so it can be recorded in
the device interrupt chain structures (isa, pci)

Move interrupt chain structure definition to <machine/psl.h> so vmstat can
get at it (i386)

Remove hack to count interrupts the old way (i386)
@
text
@d1 1
a1 1
/*	$NetBSD: pcivga.c,v 1.4 1995/12/24 02:29:47 mycroft Exp $	*/
d4 1
a4 1
 * Copyright (c) 1995 Carnegie-Mellon University.
a38 1
#include <dev/pseudo/ansicons.h>
d44 4
a47 1
#include <alpha/pci/wsconsvar.h>
d51 5
d57 2
a58 3
struct cfdriver pcivgacd = {
	NULL, "pcivga", pcivgamatch, pcivgaattach, DV_DULL,
	    sizeof(struct pcivga_softc)
d61 2
a62 4
void	pcivga_getdevconfig __P((__const struct pci_conf_fns *, void *,
	    __const struct pci_mem_fns *, void *,
	    __const struct pci_pio_fns *, void *,
	    pci_conftag_t tag, struct pcivga_devconfig *dc));
d66 1
a66 1
void	pcivga_cursor __P((void *, int, int));
a71 1
void	pcivga_bell __P((void *));			/* XXX */
d73 1
a73 2
struct ansicons_functions pcivga_acf = {
	pcivga_bell,
d82 3
a84 1
#define	PCIVGAUNIT(dev)	minor(dev)
d92 1
a92 1
	struct pcidev_attach_args *pda = aux;
d97 2
a98 2
	if (PCI_CLASS(pda->pda_class) == PCI_CLASS_PREHISTORIC &&
	    PCI_SUBCLASS(pda->pda_class) == PCI_SUBCLASS_PREHISTORIC_VGA)
d100 2
a101 2
	if (PCI_CLASS(pda->pda_class) == PCI_CLASS_DISPLAY &&
	     PCI_SUBCLASS(pda->pda_class) == PCI_SUBCLASS_DISPLAY_VGA)
d108 4
a111 6
pcivga_getdevconfig(pcf, pcfa, pmf, pmfa, ppf, ppfa, tag, dc)
	__const struct pci_conf_fns *pcf;
	__const struct pci_mem_fns *pmf;
	__const struct pci_pio_fns *ppf;
	void *pcfa, *pmfa, *ppfa;
	pci_conftag_t tag;
d114 2
d117 2
a118 6
	dc->dc_pcf = pcf;
	dc->dc_pcfa = pcfa;
	dc->dc_pmf = pmf;
	dc->dc_pmfa = pmfa;
	dc->dc_ppf = ppf;
	dc->dc_ppfa = ppfa;
d123 5
a127 3
	/* XXX */
	dc->dc_crtat = (u_short *)PCI_MEM_MAP(pmf, pmfa, 0xb8000, 0x8000, 1);
	dc->dc_iobase = 0x3d4;			/* XXX */
d131 1
d134 8
d143 1
d149 8
d164 1
a164 1
	struct pcidev_attach_args *pda = aux;
d166 2
d171 1
a171 1
	console = (pda->pda_tag == pcivga_console_dc.dc_pcitag);
d177 2
a178 7
		pcivga_getdevconfig(pda->pda_conffns, pda->pda_confarg,
		    pda->pda_memfns, pda->pda_memarg, pda->pda_piofns,
		    pda->pda_memarg, pda->pda_tag, sc->sc_dc);
	}
	if (sc->sc_dc->dc_crtat == NULL) {
		printf(": couldn't map memory space; punt!\n");
		return;
d181 1
a181 1
	pci_devinfo(pda->pda_id, pda->pda_class, 0, devinfo);
d183 1
a183 1
	    PCI_REVISION(pda->pda_class));
d200 1
a200 2
		sc->sc_intr = pci_map_int(sc->sc_pcitag, IPL_TTY, tgaintr, sc,
					  sc->sc_dev.dv_xname);
d207 23
a229 6
	if (!wscattach_output(self, console, &sc->sc_dc->dc_ansicons,
	    &pcivga_acf, sc->sc_dc, sc->sc_dc->dc_nrow, sc->sc_dc->dc_ncol,
	    0, 0)) {
		panic("pcivgaattach: wscattach failed");
		/* NOTREACHED */
	}
a231 1
#if 0
d233 9
a241 10
tgammap(dev, offset, nprot)
	dev_t dev;
	int offset;
	int nprot;
{
	struct pcivga_softc *sc = pcivgacd.cd_devs[TGAUNIT(dev)];

	if (offset > sc->sc_dc->dc_pcivgaconf->pcivgac_cspace_size)
		return -1;
	return alpha_btop(sc->sc_dc->dc_paddr + offset);
d243 23
d267 2
d271 4
a274 8
pcivga_console(pcf, pcfa, pmf, pmfa, ppf, ppfa, bus, device, function)
	__const struct pci_conf_fns *pcf;
	__const struct pci_mem_fns *pmf;
	__const struct pci_pio_fns *ppf;
	void *pcfa, *pmfa, *ppfa;
	pci_bus_t bus;
	pci_device_t device;
	pci_function_t function;
d277 1
d279 2
a280 2
	pcivga_getdevconfig(pcf, pcfa, pmf, pmfa, ppf, ppfa,
	    PCI_MAKE_TAG(bus, device, function), dcp);
d282 7
a288 9
	/* sanity checks */
	if (dcp->dc_crtat == NULL)
		panic("pcivga_console(%d, %d): couldn't map memory space",
		    device, function);
#if 0
	if (dcp->dc_pcivgaconf == NULL)
		panic("pcivga_console(%d, %d): unknown board configuration",
		    device, function);
#endif
d290 1
a290 2
	wsc_console(&dcp->dc_ansicons, &pcivga_acf, dcp,
	    dcp->dc_nrow, dcp->dc_ncol, 0, 0);
a296 8
void							/* XXX */
pcivga_bell(id)						/* XXX */
	void *id;					/* XXX */
{							/* XXX */
							/* XXX */
	printf("pcivga_bell: unimplemented\n");		/* XXX */
}							/* XXX */

d298 1
a298 1
pcivga_cursor(id, row, col)
d300 1
a300 1
	int row, col;
d303 2
d311 3
a313 4
        if (row == -1 || col == -1) {
		dc->dc_crow = dc->dc_ccol = PCIVGA_CURSOR_OFF;

		/* XXX disable cursor??? */
d321 4
a324 4
	OUTB(dc->dc_ppf, dc->dc_ppfa, dc->dc_iobase, 14);
	OUTB(dc->dc_ppf, dc->dc_ppfa, dc->dc_iobase+1, pos >> 8);
	OUTB(dc->dc_ppf, dc->dc_ppfa, dc->dc_iobase, 15);
	OUTB(dc->dc_ppf, dc->dc_ppfa, dc->dc_iobase+1, pos);
d335 2
d338 1
a338 1
	int i;
d340 5
a344 11
	for (i = 0; i < len; i++, cp++) {
		dcp = (char *)&dc->dc_crtat[row * dc->dc_ncol + col];
#if 0
printf("*cp = %c, attr = 0x%x\n", *cp, dc->dc_so ? dc->dc_so_at : dc->dc_at);
printf("was: %c/", *dcp);
#endif
		*dcp++ = *cp;
#if 0
printf("0x%x\n", *dcp);
#endif
		*dcp++ = dc->dc_so ? dc->dc_so_at : dc->dc_at;
d354 3
a356 2
	u_short *ssp, *dsp;
	int nclr;
d358 10
a367 7
#if 0
	printf("pcivga_copycols: row %d: %d, %d -> %d\n", row, srccol, ncols,
	    dstcol);
#endif
	ssp = &dc->dc_crtat[row * dc->dc_ncol + srccol];
	dsp = &dc->dc_crtat[row * dc->dc_ncol + dstcol];
	bcopy(ssp, dsp, ncols * sizeof(u_short));
d376 4
a379 2
	u_short *ssp;
	int i;
d381 9
a389 6
#if 0
	printf("pcivga_erasecols: row %d: %d, %d\n", row, startcol, ncols);
#endif
	ssp = &dc->dc_crtat[row * dc->dc_ncol + startcol];
	for (i = 0; i < ncols; i++)
		*ssp++ = (dc->dc_at << 8) | ' ';
d398 3
a400 2
	u_short *ssp, *dsp;
	int nclr;
d402 10
a411 6
#if 0
	printf("pcivga_copyrows: %d, %d -> %d\n", srcrow, nrows, dstrow);
#endif
	ssp = &dc->dc_crtat[srcrow * dc->dc_ncol + 0];
	dsp = &dc->dc_crtat[dstrow * dc->dc_ncol + 0];
	bcopy(ssp, dsp, nrows * dc->dc_ncol * sizeof(u_short));
d420 11
a430 2
	u_short *ssp;
	int i;
d432 2
a433 6
#if 0
	printf("pcivga_eraserows: %d, %d\n", startrow, nrows);
#endif
	ssp = &dc->dc_crtat[startrow * dc->dc_ncol + 0];
	for (i = 0; i < nrows * dc->dc_ncol; i++)
		*ssp++ = (dc->dc_at << 8) | ' ';
@


1.3
log
@from netbsd:
The IST_* and IPL_* constants are not bus-specific; don't treat them as such.
@
text
@d183 2
a184 1
		sc->sc_intr = pci_map_int(sc->sc_pcitag, IPL_TTY, tgaintr, sc);
@


1.2
log
@update to netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: pcivga.c,v 1.3 1995/11/23 02:38:11 cgd Exp $	*/
d183 1
a183 2
		sc->sc_intr = pci_map_int(sc->sc_pcitag, PCI_IPL_TTY,
		    tgaintr, sc);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: pcivga.c,v 1.2 1995/08/03 01:17:17 cgd Exp $	*/
a37 1
#include <machine/pio.h>
d45 1
d55 5
d62 6
d88 1
a88 1
	struct pci_attach_args *pa = aux;
d93 5
a97 4
	if ((PCI_CLASS(pa->pa_class) == PCI_CLASS_PREHISTORIC &&
	     PCI_SUBCLASS(pa->pa_class) == PCI_SUBCLASS_PREHISTORIC_VGA) ||
	    (PCI_CLASS(pa->pa_class) == PCI_CLASS_DISPLAY &&
	     PCI_SUBCLASS(pa->pa_class) == PCI_SUBCLASS_DISPLAY_VGA))
d104 6
a109 2
pcivga_getdevconfig(tag, dc)
	pcitag_t tag;
d113 6
d121 1
a121 24
#if 0
	vm_offset_t pciva, pcipa;
	int i;

	dc->dc_vaddr = 0;
	if (pci_map_mem(tag, 0x10, &dc->dc_vaddr, &pcipa))
		return;
#endif

#if 0
	int i;
	pcireg_t old;

	printf("\n");
	for (i = PCI_MAP_REG_START; i < PCI_MAP_REG_END; i += 4) {
		old = pci_conf_read(tag, i);
		pci_conf_write(tag, i, 0xffffffff);
		printf("pcivga_getdevconfig: ");
		printf("mapping reg @@ %d = 0x%x (mask 0x%x)\n",
			i, old, pci_conf_read(tag, i));
		pci_conf_write(tag, i, old);
	}
	printf("foo");
#endif
d123 2
a124 1
	dc->dc_crtat = (u_short *)phystok0seg(0xb8000 | (3L << 32)); /* XXX */
d144 1
a144 1
	struct pci_attach_args *pa = aux;
d149 1
a149 1
	console = (pa->pa_tag == pcivga_console_dc.dc_pcitag);
d155 3
a157 1
		pcivga_getdevconfig(pa->pa_tag, sc->sc_dc);
d164 3
a166 2
	pci_devinfo(pa->pa_id, pa->pa_class, 0, devinfo, NULL);
	printf(": %s (revision 0x%x)\n", devinfo, PCI_REVISION(pa->pa_class));
d215 8
a222 2
pcivga_console(bus, device, function)
	int bus, device, function;
d226 2
a227 1
	pcivga_getdevconfig(pci_make_tag(bus, device, function), dcp);
d231 2
a232 2
		panic("pcivga_console(%d, %d, %d): couldn't map memory space",
		    bus, device, function);
d235 2
a236 2
		panic("pcivga_console(%d, %d, %d): unknown board configuration",
		    bus, device, function);
d278 4
a281 4
	outb(dc->dc_iobase, 14);
	outb(dc->dc_iobase+1, pos >> 8);
	outb(dc->dc_iobase, 15);
	outb(dc->dc_iobase+1, pos);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
