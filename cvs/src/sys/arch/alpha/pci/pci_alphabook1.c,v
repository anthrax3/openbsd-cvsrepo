head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.8
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.6
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2015.08.15.19.18.27;	author miod;	state Exp;
branches;
next	1.3;
commitid	W6qKMuv75Fevdi8E;

1.3
date	2015.07.26.05.09.44;	author miod;	state Exp;
branches;
next	1.2;
commitid	5evJqb5U3VOxLlWE;

1.2
date	2015.07.18.00.27.44;	author miod;	state Exp;
branches;
next	1.1;
commitid	ItBhCTpI6WGA9qxA;

1.1
date	2013.03.09.02.10.45;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.4
log
@No need to cargo-cult include <alpha/pci/sioreg.h> here.
@
text
@/* $OpenBSD: pci_alphabook1.c,v 1.3 2015/07/26 05:09:44 miod Exp $ */
/* $NetBSD: pci_alphabook1.c,v 1.16 2012/02/06 02:14:15 matt Exp $ */

/*-
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1995, 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Authors: Jeffrey Hsu and Chris G. Demetriou
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/types.h>
#include <sys/param.h>
#include <sys/time.h>
#include <sys/systm.h>
#include <sys/errno.h>
#include <sys/device.h>

#include <machine/intr.h>

#include <dev/isa/isavar.h>
#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <dev/pci/ppbreg.h>

#include <alpha/pci/lcavar.h>

#include <alpha/pci/pci_alphabook1.h>
#include <alpha/pci/siovar.h>

#include "sio.h"

int     dec_alphabook1_intr_map(struct pci_attach_args *,
	    pci_intr_handle_t *);
const char *dec_alphabook1_intr_string(void *, pci_intr_handle_t);
int	 dec_alphabook1_intr_line(void *, pci_intr_handle_t);
void    *dec_alphabook1_intr_establish(void *, pci_intr_handle_t,
	    int, int (*func)(void *), void *, const char *);
void    dec_alphabook1_intr_disestablish(void *, void *);

#define	LCA_SIO_DEVICE	7	/* XXX */

void
pci_alphabook1_pickintr(struct lca_config *lcp)
{
	bus_space_tag_t iot = &lcp->lc_iot;
	pci_chipset_tag_t pc = &lcp->lc_pc;
	pcireg_t sioclass;
	int sioII;

	/* XXX MAGIC NUMBER */
	sioclass = pci_conf_read(pc, pci_make_tag(pc, 0, LCA_SIO_DEVICE, 0),
	    PCI_CLASS_REG);
	sioII = (sioclass & 0xff) >= 3;

	if (!sioII)
		printf("WARNING: SIO NOT SIO II... NO BETS...\n");

	pc->pc_intr_v = lcp;
	pc->pc_intr_map = dec_alphabook1_intr_map;
	pc->pc_intr_string = dec_alphabook1_intr_string;
	pc->pc_intr_line = dec_alphabook1_intr_line;
	pc->pc_intr_establish = dec_alphabook1_intr_establish;
	pc->pc_intr_disestablish = dec_alphabook1_intr_disestablish;

	/* Not supported on AlphaBook. */
	pc->pc_pciide_compat_intr_establish = NULL;

#if NSIO
	sio_intr_setup(pc, iot);
#else
	panic("pci_alphabook1_pickintr: no I/O interrupt handler (no sio)");
#endif
}

int
dec_alphabook1_intr_map(struct pci_attach_args *pa, pci_intr_handle_t *ihp)
{
	pcitag_t bustag = pa->pa_intrtag;
	int buspin, device;

#ifdef notyet
	if (pa->pa_bridgetag) {
		buspin = PPB_INTERRUPT_SWIZZLE(pa->pa_rawintrpin,
		    pa->pa_device);
		if (pa->pa_bridgeih[buspin - 1] == 0)
			return 1;

		*ihp = pa->pa_bridgeih[buspin - 1];
		return 0;
	}
#endif

	buspin = pa->pa_intrpin;
	pci_decompose_tag(pa->pa_pc, bustag, NULL, &device, NULL);

	/*
	 * There are only two interrupting PCI devices on the AlphaBook:
	 * the SCSI and PCMCIA controllers. The other PCI device is the
	 * SIO, and there are no option slots available.
	 *
	 * NOTE!  Apparently, there was a later AlphaBook which uses
	 * a different interrupt scheme, and has a built-in Tulip Ethernet
	 * interface!  We do not handle that here!
	 */

	switch (device) {
	case 6:					/* NCR SCSI */
		*ihp = 14;
		return 0;
	case 8:					/* Cirrus CL-PD6729 */
		*ihp = 15;
		return 0;
	default:
	        return 1;
	}
}

const char *
dec_alphabook1_intr_string(void *lcv, pci_intr_handle_t ih)
{
	return sio_intr_string(NULL /*XXX*/, ih);
}

int
dec_alphabook1_intr_line(void *lcv, pci_intr_handle_t ih)
{
	return sio_intr_line(NULL /*XXX*/, ih);
}

void *
dec_alphabook1_intr_establish(void *lcv, pci_intr_handle_t ih,
    int level, int (*func)(void *), void *arg, const char *name)
{
	/*
	 * PCI interrupts on that platform are ISA interrupts in disguise,
	 * and are edge- rather than level-triggered.
	 */
	return sio_intr_establish(NULL /*XXX*/, ih, IST_EDGE, level, func,
	    arg, name);
}

void
dec_alphabook1_intr_disestablish(void *lcv, void *cookie)
{
	sio_intr_disestablish(NULL /*XXX*/, cookie);
}
@


1.3
log
@Make sure pci_intr_map() will perform proper interrupt swizzling for devices
behind a bridge, if the SRM didn't pick an interrupt line for them.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a78 1
#include <alpha/pci/sioreg.h>
@


1.2
log
@Correctly set up interrupts; now the kernel no longer get stuck with an SCSI
interrupt storm at the end of autoconf.
@
text
@d1 1
d73 1
d127 1
a127 2
dec_alphabook1_intr_map(struct pci_attach_args *pa,
    pci_intr_handle_t *ihp)
d130 11
a140 12
	int buspin = pa->pa_intrpin;
	pci_chipset_tag_t pc = pa->pa_pc;
	int device, irq;

	if (buspin == 0) {
		/* No IRQ used. */
		return 1;
	}
	if (buspin > 4) {
		printf("dec_alphabook1_intr_map: bad interrupt pin %d\n",
		    buspin);
		return 1;
d142 1
d144 2
a145 1
	pci_decompose_tag(pc, bustag, NULL, &device, NULL);
d159 2
a160 2
		irq = 14;
		break;
d162 2
a163 2
		irq = 15;
		break;
a166 3

	*ihp = irq;
	return (0);
@


1.1
log
@First steps towards alphabook1 support; from netbsd
miod did not disagree.
@
text
@d146 3
a148 4
	 * There is only one interrupting PCI device on the AlphaBook: an
	 * NCR SCSI at device 6.  Devices 7 and 8 are the SIO and a
	 * Cirrus PD6729 PCMCIA controller.  There are no option slots
	 * available.
d159 3
a161 1

a162 2
	        printf("dec_alphabook1_intr_map: weird device number %d\n",
		    device);
d186 5
a190 1
	return sio_intr_establish(NULL /*XXX*/, ih, IST_LEVEL, level, func,
@

