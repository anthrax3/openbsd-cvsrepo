head	1.23;
access;
symbols
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.23.0.14
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.10
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.12
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.4
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.23.0.8
	OPENBSD_5_6_BASE:1.23
	OPENBSD_5_5:1.23.0.6
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.22.0.14
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.12
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.10
	OPENBSD_5_0:1.22.0.8
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.6
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.4
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.21.0.4
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.20.0.4
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.2
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.19.0.6
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.4
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.2
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.18.0.2
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.16.0.18
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.16
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.14
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.12
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.16.0.10
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.8
	OPENBSD_3_4_BASE:1.16
	UBC_SYNC_A:1.16
	OPENBSD_3_3:1.16.0.6
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.4
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	UBC_SYNC_B:1.16
	UBC:1.15.0.2
	UBC_BASE:1.15
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.7.0.18
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.16
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.14
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.12
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.10
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.8
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.6
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.23
date	2013.06.04.19.12.34;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2009.09.30.19.32.11;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2009.03.30.21.43.13;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2008.06.26.05.42.08;	author ray;	state Exp;
branches;
next	1.19;

1.19
date	2006.12.14.17.36.12;	author kettenis;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.16.22.32.44;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.13.20.10.49;	author brad;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.14.01.26.27;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.12.14.00.44.59;	author nate;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2001.11.06.19.53.13;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2001.11.04.23.12.46;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.26.21.13.43;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.26.20.46.18;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2001.02.16.16.02.52;	author jason;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.16.05.17.31;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.08.16.01.19;	author art;	state Exp;
branches;
next	1.7;

1.7
date	97.01.24.19.57.41;	author niklas;	state Exp;
branches
	1.7.14.1;
next	1.6;

1.6
date	96.12.08.00.20.37;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.11.23.21.44.54;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.10.30.22.39.59;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.07.29.23.00.26;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.18.09.44.13;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.03.53.24;	author deraadt;	state Exp;
branches;
next	;

1.7.14.1
date	2001.04.18.16.01.18;	author niklas;	state Exp;
branches;
next	1.7.14.2;

1.7.14.2
date	2001.07.04.10.14.41;	author niklas;	state Exp;
branches;
next	1.7.14.3;

1.7.14.3
date	2001.11.13.21.00.49;	author niklas;	state Exp;
branches;
next	1.7.14.4;

1.7.14.4
date	2002.03.06.00.47.44;	author niklas;	state Exp;
branches;
next	1.7.14.5;

1.7.14.5
date	2002.03.28.10.06.13;	author niklas;	state Exp;
branches;
next	;

1.15.2.1
date	2002.06.11.03.33.40;	author art;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Disable parity on the PCI bus; according to Linux, some lca-based systems hit
siop data parity errors when parity is enabled. This ought to help Alphabook
systems, as well as early Multia. Tested on Multia.
@
text
@/*	$OpenBSD: lca.c,v 1.22 2009/09/30 19:32:11 miod Exp $	*/
/*	$NetBSD: lca.c,v 1.14 1996/12/05 01:39:35 cgd Exp $	*/

/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1995, 1996 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Authors: Jeffrey Hsu and Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/device.h>

#include <uvm/uvm_extern.h>

#include <machine/autoconf.h>
#include <machine/cpuconf.h>
#include <machine/rpb.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>

#include <dev/pci/pcireg.h>
#include <dev/pci/pcivar.h>
#include <alpha/pci/lcareg.h>
#include <alpha/pci/lcavar.h>
#ifdef DEC_AXPPCI_33
#include <alpha/pci/pci_axppci_33.h>
#endif
#ifdef DEC_ALPHABOOK1
#include <alpha/pci/pci_alphabook1.h>
#endif
#ifdef DEC_EB66
#include <alpha/pci/pci_eb66.h>
#endif

int	lcamatch(struct device *, void *, void *);
void	lcaattach(struct device *, struct device *, void *);

struct cfattach lca_ca = {
	sizeof(struct device), lcamatch, lcaattach,
};

struct cfdriver lca_cd = {
	NULL, "lca", DV_DULL,
};

int	lcaprint(void *, const char *pnp);

#if 0
int	lca_bus_get_window(int, int,
	    struct alpha_bus_space_translation *);
#endif
void	lca_machine_check(unsigned long, struct trapframe *, unsigned long,
	    unsigned long);

/* There can be only one. */
int lcafound;
struct lca_config lca_configuration;

int
lcamatch(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
{
	struct mainbus_attach_args *ma = aux;

	/* Make sure that we're looking for a LCA. */
	if (strcmp(ma->ma_name, lca_cd.cd_name) != 0)
		return (0);

	if (lcafound)
		return (0);

	return (1);
}

/*
 * Set up the chipset's function pointers.
 */
void
lca_init(lcp, mallocsafe)
	struct lca_config *lcp;
	int mallocsafe;
{

	/*
	 * The LCA HAE register is WRITE-ONLY, so we can't tell where
	 * the second sparse window is actually mapped.  Therefore,
	 * we have to guess where it is.  This seems to be the normal
	 * address.
	 */
	lcp->lc_s_mem_w2_masked_base = 0x80000000;

	if (!lcp->lc_initted) {
		/* don't do these twice since they set up extents */
		lca_bus_io_init(&lcp->lc_iot, lcp);
		lca_bus_mem_init(&lcp->lc_memt, lcp);

#if 0
		/*
		 * We have 1 I/O window and 3 MEM windows.
		 */
		alpha_bus_window_count[ALPHA_BUS_TYPE_PCI_IO] = 1;
		alpha_bus_window_count[ALPHA_BUS_TYPE_PCI_MEM] = 3;
		alpha_bus_get_window = lca_bus_get_window;
#endif
	}
	lcp->lc_mallocsafe = mallocsafe;

	lca_pci_init(&lcp->lc_pc, lcp);
	alpha_pci_chipset = &lcp->lc_pc;
	alpha_pci_chipset->pc_name = "lca";
	alpha_pci_chipset->pc_mem = LCA_PCI_SPARSE;
	alpha_pci_chipset->pc_ports = LCA_PCI_SIO;
	alpha_pci_chipset->pc_hae_mask = IOC_HAE_ADDREXT;
	alpha_pci_chipset->pc_dense = LCA_PCI_DENSE;
	alpha_pci_chipset->pc_bwx = 0;

	/*
	 * Refer to ``DECchip 21066 and DECchip 21068 Alpha AXP Microprocessors
	 * Hardware Reference Manual''.
	 * ...
	 */

	/*
	 * According to section 6.4.1, all bits of the IOC_HAE register are
	 * undefined after reset.  Bits <31:27> are write-only.  However, we
	 * cannot blindly set it to zero.  The serial ROM code that initializes
	 * the PCI devices' address spaces, allocates sparse memory blocks in
	 * the range that must use the IOC_HAE register for address translation,
	 * and sets this register accordingly (see section 6.4.14).
	 *
	 *	IOC_HAE left AS IS.
	 */

	/*
	 * According to section 6.4.2, all bits of the IOC_CONF register are
	 * undefined after reset.  Bits <1:0> are write-only.  Set them to
	 * 0x00 for PCI Type 0 configuration access.
	 *
	 *	IOC_CONF set to ZERO.
	 */
	REGVAL64(LCA_IOC_CONF) = 0;

	/*
	 * Disable parity on the bus. According to Linux, on some systems,
	 * siop(4) behaves badly unless parity is disabled.
	 */
	REGVAL64(LCA_IOC_PAR_DIS) = IOC_PAR_DISABLE;

	lcp->lc_initted = 1;
}

void
lcaattach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
{
	struct lca_config *lcp;
	struct pcibus_attach_args pba;

	/* note that we've attached the chipset; can't have 2 LCAs. */
	/* Um, not sure about this.  XXX JH */
	lcafound = 1;

	/*
	 * set up the chipset's info; done once at console init time
	 * (maybe), but we must do it twice to take care of things
	 * that need to use memory allocation.
	 */
	lcp = &lca_configuration;
	lca_init(lcp, 1);

	/* XXX print chipset information */
	printf("\n");

	lca_dma_init(lcp);

	/* safe to override since LCA machines do not set mcheck_handler */
	platform.mcheck_handler = lca_machine_check;

	switch (cputype) {
#ifdef DEC_AXPPCI_33
	case ST_DEC_AXPPCI_33:
		pci_axppci_33_pickintr(lcp);
		break;
#endif
#ifdef DEC_ALPHABOOK1
	case ST_ALPHABOOK1:
		pci_alphabook1_pickintr(lcp);
		break;
#endif
#ifdef DEC_EB66
	case ST_EB66:
		pci_eb66_pickintr(lcp);
		break;
#endif

	default:
		panic("lcaattach: shouldn't be here, really...");
	}

	bzero(&pba, sizeof(pba));
	pba.pba_busname = "pci";
	pba.pba_iot = &lcp->lc_iot;
	pba.pba_memt = &lcp->lc_memt;
	pba.pba_dmat =
	    alphabus_dma_get_tag(&lcp->lc_dmat_direct, ALPHA_BUS_PCI);
	pba.pba_pc = &lcp->lc_pc;
	pba.pba_domain = pci_ndomains++;
	pba.pba_bus = 0;
#ifdef notyet
	pba.pba_flags = PCI_FLAGS_IO_ENABLED | PCI_FLAGS_MEM_ENABLED |
	    PCI_FLAGS_MRL_OKAY | PCI_FLAGS_MRM_OKAY | PCI_FLAGS_MWI_OKAY;
#endif
	config_found(self, &pba, lcaprint);
}

int
lcaprint(aux, pnp)
	void *aux;
	const char *pnp;
{
	register struct pcibus_attach_args *pba = aux;

	/* only PCIs can attach to LCAes; easy. */
	if (pnp)
		printf("%s at %s", pba->pba_busname, pnp);
	printf(" bus %d", pba->pba_bus);
	return (UNCONF);
}

#if 0
int
lca_bus_get_window(type, window, abst)
	int type, window;
	struct alpha_bus_space_translation *abst;
{
	struct lca_config *lcp = &lca_configuration;
	bus_space_tag_t st;

	switch (type) {
	case ALPHA_BUS_TYPE_PCI_IO:
		st = &lcp->lc_iot;
		break;

	case ALPHA_BUS_TYPE_PCI_MEM:
		st = &lcp->lc_memt;
		break;

	default:
		panic("lca_bus_get_window");
	}

	return (alpha_bus_space_get_window(st, window, abst));
}
#endif

void
lca_machine_check(unsigned long mces, struct trapframe *framep,
    unsigned long vector, unsigned long param)
{
	int64_t stat0;

	machine_check(mces, framep, vector, param);
	/* clear error flags in IOC_STATUS0 register */
	stat0 = REGVAL64(LCA_IOC_STAT0);
	REGVAL64(LCA_IOC_STAT0) = stat0;
}
@


1.22
log
@Clear sticky error status after recoverable machine check.
From FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.21 2009/03/30 21:43:13 kettenis Exp $	*/
d190 2
a191 1
	/* According to section 6.4.2, all bits of the IOC_CONF register are
d198 6
@


1.21
log
@bzero pci attach args
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.20 2008/06/26 05:42:08 ray Exp $	*/
d69 1
d106 2
d226 3
d305 12
@


1.20
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.19 2006/12/14 17:36:12 kettenis Exp $	*/
d244 1
a252 1
	pba.pba_bridgetag = NULL;
@


1.19
log
@Make pci subsystem aware of domains.  Each host bridge gets assigned a unique
domain number such that we can distinguish between busses with the same bus
number that are behind different host bridges.  Domains can be accessed by
using different device nodes.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.18 2006/03/16 22:32:44 miod Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.18
log
@Get rid of specific softc structure for pci host bridges, as it is never
used. No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.17 2006/03/13 20:10:49 brad Exp $	*/
d257 1
@


1.17
log
@* Add "pcitag_t *pba_bridgetag" to pci_attach_args.  This is set to
  NULL for root PCI busses.  For busses behind a bridge, it points to
  a persistent copy of the bridge's pcitag_t.  This can be very useful
  for machine-dependent PCI bus enumeration code.

From NetBSD

ok grange@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.16 2002/03/14 01:26:27 millert Exp $	*/
d99 1
a99 1
	sizeof(struct lca_softc), lcamatch, lcaattach,
a209 1
	struct lca_softc *sc = (struct lca_softc *)self;
d222 1
a222 1
	lcp = sc->sc_lcp = &lca_configuration;
@


1.16
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.15 2001/12/14 00:44:59 nate Exp $	*/
d259 1
@


1.15
log
@Don't use a single static struct alpha_bus_space since there are machines
that can have more than one system bus attached to mainbus
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.14 2001/11/06 19:53:13 miod Exp $	*/
d95 2
a96 2
int	lcamatch __P((struct device *, void *, void *));
void	lcaattach __P((struct device *, struct device *, void *));
d106 1
a106 1
int	lcaprint __P((void *, const char *pnp));
d109 2
a110 2
int	lca_bus_get_window __P((int, int,
	    struct alpha_bus_space_translation *));
@


1.15.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.15 2001/12/14 00:44:59 nate Exp $	*/
d95 2
a96 2
int	lcamatch(struct device *, void *, void *);
void	lcaattach(struct device *, struct device *, void *);
d106 1
a106 1
int	lcaprint(void *, const char *pnp);
d109 2
a110 2
int	lca_bus_get_window(int, int,
	    struct alpha_bus_space_translation *);
@


1.14
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.13 2001/11/04 23:12:46 art Exp $	*/
d154 2
a155 2
		lcp->lc_iot = lca_bus_io_init(lcp);
		lcp->lc_memt = lca_bus_mem_init(lcp);
d253 2
a254 2
	pba.pba_iot = lcp->lc_iot;
	pba.pba_memt = lcp->lc_memt;
@


1.13
log
@Two new sysctls in the chipset tree.
CPU_CHIPSET_PORTS - address of the I/O ports.
CPU_CHIPSET_HAE_MASK - mask for the HAE register.
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.12 2001/06/26 21:13:43 art Exp $	*/
d73 1
a73 1
#include <vm/vm.h>
@


1.12
log
@More chipset info needed by X.
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.11 2001/06/26 20:46:18 art Exp $	*/
d172 2
@


1.11
log
@Provide chipset configuration to sysctls.
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.10 2001/02/16 16:02:52 jason Exp $	*/
d172 1
@


1.10
log
@Finish merging lca to become closer to current netbsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.9 2001/02/16 05:17:31 jason Exp $	*/
d169 4
@


1.9
log
@bring in netbsd bus_dma stuff for lca and apecs busses
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.8 2000/11/08 16:01:19 art Exp $	*/
d4 36
d72 1
d88 6
d108 5
d156 9
d224 1
a224 1
	switch (hwrpb->rpb_type) {
d230 10
d248 2
a249 2
	pba.pba_dmat = alphabus_dma_get_tag(&lcp->lc_dmat_direct,
	    ALPHA_BUS_PCI);
d272 26
@


1.8
log
@Merge in big portions of the improvements NetBSD did to their alpha port.
Highlights: UVM, PMAP_NEW, bus_dma (only on some buses for now), new hardware
support, possiblity for ELF, etc, etc. Too much to mention.

This is still work in progress. video consoles might be broken, otherwise
we have basically the same functionality as before plus more.
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.7 1997/01/24 19:57:41 niklas Exp $	*/
d48 1
a48 1
#if defined(DEC_AXPPCI_33)
a51 1
#ifdef __BROKEN_INDIRECT_CONFIG
a52 3
#else
int	lcamatch __P((struct device *, struct cfdata *, void *));
#endif
a71 1
#ifdef __BROKEN_INDIRECT_CONFIG
a72 3
#else
	struct cfdata *match;
#endif
a96 4
	 * Can't set up SGMAP data here; can be called before malloc().
	 */

	/*
d136 1
a136 13
	REGVAL(LCA_IOC_CONF) = 0;

	/* Turn off DMA window enables in Window Base Registers */
/*	REGVAL(LCA_IOC_W_BASE0) = 0;
	REGVAL(LCA_IOC_W_BASE1) = 0; */
	alpha_mb();

	/* XXX XXX BEGIN XXX XXX */
	{							/* XXX */
		extern vm_offset_t alpha_XXX_dmamap_or;		/* XXX */
		alpha_XXX_dmamap_or = 0x40000000;		/* XXX */
	}							/* XXX */
	/* XXX XXX END XXX XXX */
a140 26
#ifdef notdef
void
lca_init_sgmap(lcp)
	struct lca_config *lcp;
{

	/* XXX */
	lcp->lc_sgmap = malloc(1024 * 8, M_DEVBUF, M_WAITOK);
	bzero(lcp->lc_sgmap, 1024 * 8);		/* clear all entries. */

	REGVAL(LCA_IOC_W_BASE0) = 0;
	alpha_mb();

	/* Set up Translated Base Register 1; translate to sybBus addr 0. */
	/* check size against APEC XXX JH */
	REGVAL(LCA_IOC_T_BASE_0) = vtophys(lcp->lc_sgmap) >> 1;

	/* Set up PCI mask register 1; map 8MB space. */
	REGVAL(LCA_IOC_W_MASK0) = 0x00700000;

	/* Enable window 1; from PCI address 8MB, direct mapped. */
	REGVAL(LCA_IOC_W_BASE0) = 0x300800000;
	alpha_mb();
}
#endif

d156 2
a157 1
	 * (maybe), but doesn't hurt to do twice.
a160 3
#ifdef notdef
	lca_init_sgmap(lcp);
#endif
d165 2
d168 1
a168 1
#if defined(DEC_AXPPCI_33)
d181 2
d185 4
@


1.7
log
@Sync with NetBSD 961207
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.6 1996/12/08 00:20:37 niklas Exp $	*/
d83 1
a83 1
	struct confargs *ca = aux;
d86 1
a86 1
	if (strcmp(ca->ca_name, lca_cd.cd_name) != 0)
@


1.7.14.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.10 2001/02/16 16:02:52 jason Exp $	*/
a3 36
/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

a35 1

d48 1
a48 1
#ifdef DEC_AXPPCI_33
a50 6
#ifdef DEC_ALPHABOOK1
#include <alpha/pci/pci_alphabook1.h>
#endif
#ifdef DEC_EB66
#include <alpha/pci/pci_eb66.h>
#endif
d52 1
d54 3
a68 5
#if 0
int	lca_bus_get_window __P((int, int,
	    struct alpha_bus_space_translation *));
#endif

d76 1
d78 3
d83 1
a83 1
	struct mainbus_attach_args *ma = aux;
d86 1
a86 1
	if (strcmp(ma->ma_name, lca_cd.cd_name) != 0)
d105 4
a119 9

#if 0
		/*
		 * We have 1 I/O window and 3 MEM windows.
		 */
		alpha_bus_window_count[ALPHA_BUS_TYPE_PCI_IO] = 1;
		alpha_bus_window_count[ALPHA_BUS_TYPE_PCI_MEM] = 3;
		alpha_bus_get_window = lca_bus_get_window;
#endif
d148 13
a160 1
	REGVAL64(LCA_IOC_CONF) = 0;
d165 26
d206 1
a206 2
	 * (maybe), but we must do it twice to take care of things
	 * that need to use memory allocation.
d210 3
d217 2
a218 4
	lca_dma_init(lcp);

	switch (cputype) {
#ifdef DEC_AXPPCI_33
a222 10
#ifdef DEC_ALPHABOOK1
	case ST_ALPHABOOK1:
		pci_alphabook1_pickintr(lcp);
		break;
#endif
#ifdef DEC_EB66
	case ST_EB66:
		pci_eb66_pickintr(lcp);
		break;
#endif
a230 2
	pba.pba_dmat =
	    alphabus_dma_get_tag(&lcp->lc_dmat_direct, ALPHA_BUS_PCI);
a232 4
#ifdef notyet
	pba.pba_flags = PCI_FLAGS_IO_ENABLED | PCI_FLAGS_MEM_ENABLED |
	    PCI_FLAGS_MRL_OKAY | PCI_FLAGS_MRM_OKAY | PCI_FLAGS_MWI_OKAY;
#endif
a248 26

#if 0
int
lca_bus_get_window(type, window, abst)
	int type, window;
	struct alpha_bus_space_translation *abst;
{
	struct lca_config *lcp = &lca_configuration;
	bus_space_tag_t st;

	switch (type) {
	case ALPHA_BUS_TYPE_PCI_IO:
		st = &lcp->lc_iot;
		break;

	case ALPHA_BUS_TYPE_PCI_MEM:
		st = &lcp->lc_memt;
		break;

	default:
		panic("lca_bus_get_window");
	}

	return (alpha_bus_space_get_window(st, window, abst));
}
#endif
@


1.7.14.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.7.14.1 2001/04/18 16:01:18 niklas Exp $	*/
a168 5
	alpha_pci_chipset = &lcp->lc_pc;
	alpha_pci_chipset->pc_name = "lca";
	alpha_pci_chipset->pc_mem = LCA_PCI_SPARSE;
	alpha_pci_chipset->pc_dense = LCA_PCI_DENSE;
	alpha_pci_chipset->pc_bwx = 0;
@


1.7.14.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d73 1
a73 1
#include <uvm/uvm_extern.h>
a171 2
	alpha_pci_chipset->pc_ports = LCA_PCI_SIO;
	alpha_pci_chipset->pc_hae_mask = IOC_HAE_ADDREXT;
@


1.7.14.4
log
@Merge in trunk
@
text
@d154 2
a155 2
		lca_bus_io_init(&lcp->lc_iot, lcp);
		lca_bus_mem_init(&lcp->lc_memt, lcp);
d253 2
a254 2
	pba.pba_iot = &lcp->lc_iot;
	pba.pba_memt = &lcp->lc_memt;
@


1.7.14.5
log
@Merge in -current from about a week ago
@
text
@d95 2
a96 2
int	lcamatch(struct device *, void *, void *);
void	lcaattach(struct device *, struct device *, void *);
d106 1
a106 1
int	lcaprint(void *, const char *pnp);
d109 2
a110 2
int	lca_bus_get_window(int, int,
	    struct alpha_bus_space_translation *);
@


1.6
log
@Merge to NetBSD 961107, i.e. mostly new bus.h
@
text
@d1 2
a2 2
/*	$OpenBSD: lca.c,v 1.5 1996/11/23 21:44:54 kstailey Exp $	*/
/*	$NetBSD: lca.c,v 1.11 1996/10/23 04:12:25 cgd Exp $	*/
d52 1
d54 3
d76 6
a81 1
	void *match, *aux;
d99 1
a99 1
lca_init(lcp)
d101 1
d108 15
a122 2
	lcp->lc_iot = apecs_lca_bus_io_init(lcp);
	lcp->lc_memt = apecs_lca_bus_mem_init(lcp);
d161 2
d180 1
a180 1
        REGVAL(LCA_IOC_T_BASE_0) = vtophys(lcp->lc_sgmap) >> 1;
d182 2
a183 2
        /* Set up PCI mask register 1; map 8MB space. */
        REGVAL(LCA_IOC_W_MASK0) = 0x00700000;
d185 3
a187 3
        /* Enable window 1; from PCI address 8MB, direct mapped. */
        REGVAL(LCA_IOC_W_BASE0) = 0x300800000;
        alpha_mb();
d209 1
a209 1
	lca_init(lcp);
d223 1
d241 1
a241 1
        register struct pcibus_attach_args *pba = aux;
@


1.5
log
@added const to second parameter of cfprint_t routines
@
text
@d1 2
a2 2
/*	$OpenBSD: lca.c,v 1.4 1996/10/30 22:39:59 niklas Exp $	*/
/*	$NetBSD: lca.c,v 1.10 1996/10/13 03:00:07 christos Exp $	*/
a47 1
#include <alpha/pci/apecs_lca.h>
d98 2
a99 2
	apecs_lca_bus_io_init(&lcp->lc_bc, lcp);
	apecs_lca_bus_mem_init(&lcp->lc_bc, lcp);
d131 7
d203 2
a204 1
	pba.pba_bc = &lcp->lc_bc;
@


1.4
log
@Merge to NetBSD 961020.  Retained our kernel APIs where NetBSD has changed.
-Wall -Wstrict-prototypes -Wmissing-prototypes too.
@
text
@d1 1
a1 1
/*	$OpenBSD: lca.c,v 1.10 1996/10/13 03:00:07 christos Exp $	*/
d64 1
a64 1
int	lcaprint __P((void *, /* const */ char *pnp));
d206 1
a206 1
	/* const */ char *pnp;
@


1.3
log
@Add OpenBSD tags.  Adapt to OpenBSD *_intr_establish calling convention
@
text
@d1 2
a2 2
/*	$OpenBSD: lca.c,v 1.5 1996/04/23 14:00:53 cgd Exp $	*/
/*	$NetBSD: lca.c,v 1.5 1996/04/23 14:00:53 cgd Exp $	*/
d48 4
d64 1
a64 1
static int	lcaprint __P((void *, char *pnp));
a74 1
	struct cfdata *cf = match;
d131 1
a131 1
	wbflush();
d145 1
a145 1
	wbflush();
d156 1
a156 1
        wbflush();
d203 1
a203 1
static int
d206 1
a206 1
	char *pnp;
@


1.2
log
@sync to 0616, retaining local diffs
@
text
@d1 1
@


1.1
log
@update to netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: lca.c,v 1.1 1995/11/23 02:37:38 cgd Exp $	*/
d4 1
a4 1
 * Copyright (c) 1995 Carnegie-Mellon University.
d7 1
a7 1
 * Author: Jeffrey Hsu
d51 6
a56 3
struct cfdriver lcacd = {
	NULL, "lca", lcamatch, lcaattach, DV_DULL,
	    sizeof(struct lca_softc)
d74 1
a74 1
	if (strcmp(ca->ca_name, lcacd.cd_name) != 0)
d95 9
a103 9
	lcp->lc_conffns = &lca_conf_fns;
	lcp->lc_confarg = lcp;
	lcp->lc_dmafns = &lca_dma_fns;
	lcp->lc_dmaarg = lcp;
	/* Interrupt routines set up in 'attach' */
	lcp->lc_memfns = &lca_mem_fns;
	lcp->lc_memarg = lcp;
	lcp->lc_piofns = &lca_pio_fns;
	lcp->lc_pioarg = lcp;
d105 10
a114 3
/*
printf("lca_init: before IOC_HAE=0x%x\n", REGVAL(LCA_IOC_HAE));
	REGVAL(LCA_IOC_HAE) = 0; */
d116 6
a160 1
	struct confargs *ca = aux;
d163 1
a163 1
	struct pci_attach_args pa;
d185 1
a185 3
		pci_axppci_33_pickintr(lcp->lc_conffns, lcp->lc_confarg,
		    lcp->lc_piofns, lcp->lc_pioarg,
		    &lcp->lc_intrfns, &lcp->lc_intrarg);
d192 5
a196 16
	pa.pa_bus = 0;
	pa.pa_maxdev = 13;
	pa.pa_burstlog2 = 8;

	pa.pa_conffns = lcp->lc_conffns;
	pa.pa_confarg = lcp->lc_confarg;
	pa.pa_dmafns = lcp->lc_dmafns;
	pa.pa_dmaarg = lcp->lc_dmaarg;
	pa.pa_intrfns = lcp->lc_intrfns;
	pa.pa_intrarg = lcp->lc_intrarg;
	pa.pa_memfns = lcp->lc_memfns;
	pa.pa_memarg = lcp->lc_memarg;
	pa.pa_piofns = lcp->lc_piofns;
	pa.pa_pioarg = lcp->lc_pioarg;

	config_found(self, &pa, lcaprint);
d204 1
a204 1
        register struct pci_attach_args *pa = aux;
a205 1
	/* what does this do?  XXX JH */
d208 2
a209 2
		printf("pci at %s", pnp);
	printf(" bus %d", pa->pa_bus);
@
