head	1.16;
access;
symbols
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	UBC_SYNC_A:1.16
	UBC_SYNC_B:1.16
	NIKLAS_UNDEAD:1.15.0.10
	OPENBSD_2_8:1.15.0.8
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.15.0.6
	OPENBSD_2_7_BASE:1.15
	SMP:1.15.0.4
	SMP_BASE:1.15
	kame_19991208:1.15
	OPENBSD_2_6:1.15.0.2
	OPENBSD_2_6_BASE:1.15
	OPENBSD_2_5:1.14.0.6
	OPENBSD_2_5_BASE:1.14
	OPENBSD_2_4:1.14.0.4
	OPENBSD_2_4_BASE:1.14
	OPENBSD_2_3:1.14.0.2
	OPENBSD_2_3_BASE:1.14
	OPENBSD_2_2:1.13.0.4
	OPENBSD_2_2_BASE:1.13
	OPENBSD_2_1:1.13.0.2
	OPENBSD_2_1_BASE:1.13
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	PEFO_960624:1.1.1.1
	PEFO:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2001.02.07.07.45.05;	author art;	state dead;
branches;
next	1.15;

1.15
date	99.08.11.23.15.21;	author niklas;	state Exp;
branches
	1.15.4.1;
next	1.14;

1.14
date	98.01.20.18.40.11;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	97.04.19.17.19.56;	author pefo;	state Exp;
branches;
next	1.12;

1.12
date	97.04.10.16.29.22;	author pefo;	state Exp;
branches;
next	1.11;

1.11
date	97.03.26.14.44.38;	author pefo;	state Exp;
branches;
next	1.10;

1.10
date	97.03.12.19.16.55;	author pefo;	state Exp;
branches;
next	1.9;

1.9
date	97.01.10.23.41.25;	author pefo;	state Exp;
branches;
next	1.8;

1.8
date	96.11.28.23.35.42;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.10.17.18.58.58;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.09.18.17.20.54;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.09.18.11.39.24;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.09.14.15.58.25;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	96.07.30.20.24.24;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	96.06.24.20.05.36;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	96.06.24.09.07.18;	author pefo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.06.24.09.07.18;	author pefo;	state Exp;
branches;
next	;

1.15.4.1
date	2001.04.18.16.02.44;	author niklas;	state dead;
branches;
next	;


desc
@@


1.16
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@/*	$OpenBSD: bus.h,v 1.15 1999/08/11 23:15:21 niklas Exp $	*/

/*
 * Copyright (c) 1997 Per Fogelstrom.  All rights reserved.
 * Copyright (c) 1996 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _ARC_BUS_H_
#define _ARC_BUS_H_

#include <machine/pio.h>

#ifdef __STDC__
#define CAT(a,b)	a##b
#define CAT3(a,b,c)	a##b##c
#else
#define CAT(a,b)	a/**/b
#define CAT3(a,b,c)	a/**/b/**/c
#endif

/*
 * Bus access types.
 */
typedef u_int32_t bus_addr_t;
typedef u_int32_t bus_size_t;
typedef u_int32_t bus_space_handle_t;
typedef struct arc_bus_space *bus_space_tag_t;

struct arc_bus_space {
	u_int32_t	bus_base;
	u_int8_t	bus_sparse1;	/* Sparse addressing shift count */
	u_int8_t	bus_sparse2;	/* Sparse addressing shift count */
	u_int8_t	bus_sparse4;	/* Sparse addressing shift count */
	u_int8_t	bus_sparse8;	/* Sparse addressing shift count */
};

extern struct arc_bus_space arc_bus_io, arc_bus_mem;

/*
 * Access methods for bus resources
 */
#define bus_space_map(t, addr, size, cacheable, bshp)			      \
    ((*(bshp) = (t)->bus_base + (addr)), 0)

#define bus_space_unmap(t, bsh, size)

#define bus_space_subregion(t, bsh, offset, size, nbshp)		      \
    ((*(nbshp) = (bsh) + (offset)), 0)

#define bus_space_read(n,m)						      \
static __inline CAT3(u_int,m,_t)					      \
CAT(bus_space_read_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,	      \
     bus_addr_t ba)							      \
{									      \
	return *(volatile CAT3(u_int,m,_t) *)(bsh + ((ba) << CAT(bst->bus_sparse,n)));		      \
}

bus_space_read(1,8)
bus_space_read(2,16)
bus_space_read(4,32)

#define	bus_space_read_8	!!! bus_space_read_8 unimplemented !!!

#define bus_space_read_multi_1(t, h, o, a, c) do {			      \
		insb((u_int8_t *)((h) + (o)), (a), (c));		      \
	} while(0)

#define bus_space_read_multi_2(t, h, o, a, c) do {			      \
		insw((u_int16_t *)((h) + (o)), (a), (c));		      \
	} while(0)

#define bus_space_read_multi_4(t, h, o, a, c) do {			      \
		insl((u_int32_t *)((h) + (o)), (a), (c));		      \
	} while(0)

#define	bus_space_read_multi_8	!!! bus_space_read_multi_8 not implemented !!!

#define bus_space_read_region(n,m)					      \
static __inline void							      \
CAT(bus_space_read_region_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,    \
     bus_addr_t ba, CAT3(u_int,m,_t) *x, size_t cnt)			      \
{									      \
	while (cnt--)							      \
		*x++ = CAT(bus_space_read_,n)(bst, bsh, ba++);		      \
}

bus_space_read_region(1,8)
bus_space_read_region(2,16)
bus_space_read_region(4,32)

#define	bus_space_read_region_8	!!! bus_space_read_region_8 not implemented !!!

#define bus_space_write(n,m)						      \
static __inline void							      \
CAT(bus_space_write_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,	      \
     bus_addr_t ba, CAT3(u_int,m,_t) x)					      \
{									      \
	*(volatile CAT3(u_int,m,_t) *)(bsh + ((ba) << CAT(bst->bus_sparse,n))) = x;      \
}

bus_space_write(1,8)
bus_space_write(2,16)
bus_space_write(4,32)

#define	bus_space_write_8	!!! bus_space_write_8 unimplemented !!!


#define bus_space_write_multi_1(t, h, o, a, c) do {			      \
		outsb((u_int8_t *)((h) + (o)), (a), (c));		      \
	} while(0)

#define bus_space_write_multi_2(t, h, o, a, c) do {			      \
		outsw((u_int16_t *)((h) + (o)), (a), (c));		      \
	} while(0)

#define bus_space_write_multi_4(t, h, o, a, c) do {			      \
		outsl((u_int32_t *)((h) + (o)), (a), (c));		      \
	} while(0)

#define	bus_space_write_multi_8	!!! bus_space_write_multi_8 not implemented !!!

#define bus_space_write_region(n,m)					      \
static __inline void							      \
CAT(bus_space_write_region_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,   \
     bus_addr_t ba, const CAT3(u_int,m,_t) *x, size_t cnt)		      \
{									      \
	while (cnt--)							      \
		CAT(bus_space_write_,n)(bst, bsh, ba++, *x++);		      \
}

bus_space_write_region(1,8)
bus_space_write_region(2,16)
bus_space_write_region(4,32)

#define	bus_space_write_region_8					      \
    !!! bus_space_write_region_8 not implemented !!!

#define bus_space_set_region(n,m)					      \
static __inline void							      \
CAT(bus_space_set_region_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,     \
     bus_addr_t ba, CAT3(u_int,m,_t) x, size_t cnt)			      \
{									      \
	while (cnt--)							      \
		CAT(bus_space_write_,n)(bst, bsh, ba++, x);		      \
}

bus_space_set_region(1,8)
bus_space_set_region(2,16)
bus_space_set_region(4,32)

#define	bus_space_write_8	!!! bus_space_write_8 unimplemented !!!


/* These are OpenBSD extensions to the general NetBSD bus interface.  */
#define	bus_space_read_raw_multi(n,m,l)					      \
static __inline void							      \
CAT(bus_space_read_raw_multi_,n)(bus_space_tag_t bst, bus_space_handle_t bsh, \
    bus_addr_t ba, u_int8_t *buf, bus_size_t cnt)			      \
{									      \
	CAT(bus_space_read_multi_,n)(bst, bsh, ba, (CAT3(u_int,m,_t) *)buf,   \
	    cnt >> l);							      \
}

bus_space_read_raw_multi(2,16,1)
bus_space_read_raw_multi(4,32,2)

#define	bus_space_read_raw_multi_8 \
    !!! bus_space_read_raw_multi_8 not implemented !!!

#define	bus_space_write_raw_multi(n,m,l)				      \
static __inline void							      \
CAT(bus_space_write_raw_multi_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,\
    bus_addr_t ba, const u_int8_t *buf, bus_size_t cnt)			      \
{									      \
	CAT(bus_space_write_multi_,n)(bst, bsh, ba,			      \
	    (const CAT3(u_int,m,_t) *)buf, cnt >> l);			      \
}

bus_space_write_raw_multi(2,16,1)
bus_space_write_raw_multi(4,32,2)

#define	bus_space_write_raw_multi_8 \
    !!! bus_space_write_raw_multi_8 not implemented !!!

/* XXX placeholders */
typedef void *bus_dma_tag_t;
typedef void *bus_dmamap_t;

#endif /* _ARC_BUS_H_ */
@


1.15
log
@Add a slew of new bus_*_region_* functions
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.14 1998/01/20 18:40:11 niklas Exp $	*/
@


1.15.4.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.15 1999/08/11 23:15:21 niklas Exp $	*/
@


1.14
log
@Merge bus_dma support from NetBSD, mostly by Jason Thorpe.  Only i386 uses it
 so far, the other archs gets placeholders for now.  I wrote a compatibility
layer for OpenBSD's old isadma code so we can still use our old
driver sources.  They will however get changed to native bus_dma use,
on a case by case basis.   Oh yes, I almost forgot, I kept our notion
of isadma being a device so DMA-less ISA-busses still work
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.13 1997/04/19 17:19:56 pefo Exp $	*/
d73 3
d104 15
d147 32
@


1.13
log
@-Wall cleanup.
Change to new MI assym.h file generation. (genassym.cf)
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.12 1997/04/10 16:29:22 pefo Exp $	*/
d160 4
@


1.12
log
@Attempt to clean up local devices.
Added support for new QED RT52x0 processors.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.11 1997/03/26 14:44:38 pefo Exp $	*/
d37 2
d88 1
a88 1
		insb((h) + (o), (a), (c));				      \
d92 1
a92 1
		insw((h) + (o), (a), (c));				      \
d96 1
a96 1
		insl((h) + (o), (a), (c));				      \
d117 1
a117 1
		outsb((h) + (o), (a), (c));				      \
d121 1
a121 1
		outsw((h) + (o), (a), (c));				      \
d125 1
a125 1
		outsl((h) + (o), (a), (c));				      \
@


1.11
log
@Replace "isa_io" with "bus". Not isa specific.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.10 1997/03/12 19:16:55 pefo Exp $	*/
a44 2
#define HIT_FLUSH_DCACHE(addr, len)    R4K_HitFlushDCache(addr, len)

d61 1
a61 1
extern struct arc_bus_space arc_bus;
@


1.10
log
@Addition of support for a PCI based Vr4300 board from Algorithmics, the P-4032.
Changes to io macros were done to handle sparse bus addressing dynamically.
This is a first cut (rough).
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.9 1997/01/10 23:41:25 pefo Exp $	*/
d56 5
a60 6
	u_int32_t	isa_io_base;
	u_int32_t	isa_mem_base;
	u_int8_t	isa_io_sparse1;	/* Sparse addressing shift count */
	u_int8_t	isa_io_sparse2;	/* Sparse addressing shift count */
	u_int8_t	isa_io_sparse4;	/* Sparse addressing shift count */
	u_int8_t	isa_io_sparse8;	/* Sparse addressing shift count */
d69 1
a69 1
    ((*(bshp) = (t)->isa_io_base + (addr)), 0)
d78 1
a78 1
	return *(volatile CAT3(u_int,m,_t) *)(bsh + ((ba) << CAT(bst->isa_io_sparse,n)));		      \
d106 1
a106 1
	*(volatile CAT3(u_int,m,_t) *)(bsh + ((ba) << CAT(bst->isa_io_sparse,n))) = x;      \
@


1.9
log
@Use "locore.S" versions of block io operations.
They handle unaligned memory references.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.8 1996/11/28 23:35:42 niklas Exp $	*/
d4 1
d45 2
d53 12
a64 1
typedef u_int32_t bus_space_tag_t;
d69 3
a71 2
#define bus_space_map(t, addr, size, cacheable, bshp) \
    ((*(bshp) = (t) + (addr)), 0)
d79 1
a79 1
	return *(volatile CAT3(u_int,m,_t) *)(bsh + ba);		      \
d107 1
a107 1
	*(volatile CAT3(u_int,m,_t) *)(bsh + ba) = x;			      \
@


1.8
log
@Adaption to new bus.h from NetBSD.  Various driver has been updated to
NetBSD 961107 state.  Other has not, partly because sometimes the bus.h
changes was coupled with other changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.7 1996/10/17 18:58:58 niklas Exp $	*/
d73 11
a83 12
#define bus_space_read_multi(n, m)					      \
static __inline void						       	      \
CAT(bus_space_read_multi_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,     \
    bus_addr_t ba, CAT3(u_int,m,_t) *buf, bus_size_t cnt)		      \
{									      \
	while (cnt--)							      \
		*buf++ = CAT(bus_space_read_,n)(bst, bsh, ba);		      \
}

bus_space_read_multi(1,8)
bus_space_read_multi(2,16)
bus_space_read_multi(4,32)
a100 8
#define bus_space_write_multi(n, m)					      \
static __inline void						       	      \
CAT(bus_space_write_multi_,n)(bus_space_tag_t bst, bus_space_handle_t bsh,    \
    bus_addr_t ba, const CAT3(u_int,m,_t) *buf, bus_size_t cnt)		      \
{									      \
	while (cnt--)							      \
		CAT(bus_space_write_,n)(bst, bsh, ba, *buf++);		      \
}
d102 11
a112 3
bus_space_write_multi(1,8)
bus_space_write_multi(2,16)
bus_space_write_multi(4,32)
@


1.7
log
@Remove unnecessary macros, what was I thinking?
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.6 1996/09/18 17:20:54 niklas Exp $	*/
d4 1
a4 1
 * Copyright (c) 1996 Christopher G. Demetriou.  All rights reserved.
d36 7
a42 2
#include <machine/autoconf.h>
#include <machine/pio.h>
d45 1
a45 1
 * I/O addresses (in bus space)
d47 4
a50 3
typedef u_long bus_io_addr_t;
typedef u_long bus_io_size_t;
typedef u_long bus_io_handle_t;
d53 1
a53 1
 * Memory addresses (in bus space)
d55 86
a140 3
typedef u_long bus_mem_addr_t;
typedef u_long bus_mem_size_t;
typedef caddr_t bus_mem_handle_t;
d142 2
a143 20
/*
 * Access methods for bus resources, I/O space, and memory space.
 */
typedef
struct arc_isa_busmap {
	void	*isa_io_base;
	void	*isa_mem_base;
} *bus_chipset_tag_t;


#define bus_io_map(t, port, size, iohp)					\
    (*iohp = (t == NULL ? port : port + (ulong)(t->isa_io_base)), 0)
#define bus_io_unmap(t, ioh, size)

#define	bus_io_read_1(t, h, o)		inb((h) + (o))
#define	bus_io_read_2(t, h, o)		inw((h) + (o))
#define	bus_io_read_4(t, h, o)		inl((h) + (o))
#if 0 /* Cause a link error for bus_io_read_8 */
#define	bus_io_read_8(t, h, o)		!!! bus_io_read_8 unimplemented !!!
#endif
d145 2
a146 65
#define	bus_io_read_multi_1(t, h, o, a, c)	\
					insb((h) + (o), (a), (c))
#define	bus_io_read_multi_2(t, h, o, a, c)	\
					insw((h) + (o), (a), (c))
#define	bus_io_read_multi_4(t, h, o, a, c)	\
					insl((h) + (o), (a), (c))
#if 0 /* Cause a link error for bus_io_read_multi_8 */
#define	bus_io_read_multi_8(t, h, o, a, c)	\
				!!! bus_io_read_multi_8 unimplemented !!!
#endif

#define	bus_io_write_1(t, h, o, v)	outb((h) + (o), (v))
#define	bus_io_write_2(t, h, o, v)	outw((h) + (o), (v))
#define	bus_io_write_4(t, h, o, v)	outl((h) + (o), (v))
#if 0 /* Cause a link error for bus_io_write_8 */
#define	bus_io_write_8(t, h, o, v)	!!! bus_io_write_8 unimplemented !!!
#endif

#define	bus_io_write_multi_1(t, h, o, a, c)	\
					outsb((h) + (o), (a), (c))
#define	bus_io_write_multi_2(t, h, o, a, c)	\
					outsw((h) + (o), (a), (c))
#define	bus_io_write_multi_4(t, h, o, a, c)	\
					outsl((h) + (o), (a), (c))
#if 0 /* Cause a link error for bus_io_write_multi_8 */
#define	bus_io_write_multi_8(t, h, o, a, c)	\
				!!! bus_io_write_multi_8 unimplimented !!!
#endif

#define bus_mem_map(t, addr, size, cacheable, mhp)			\
    (*mhp = (bus_mem_handle_t)(t == NULL ? addr : addr + (ulong)(t->isa_mem_base)), 0)
#define bus_mem_unmap(t, ioh, size)

#define	bus_mem_read_1(t, h, o)		(*(volatile u_int8_t *)((h) + (o)))
#define	bus_mem_read_2(t, h, o)		(*(volatile u_int16_t *)((h) + (o)))
#define	bus_mem_read_4(t, h, o)		(*(volatile u_int32_t *)((h) + (o)))
#define	bus_mem_read_8(t, h, o)		(*(volatile u_int64_t *)((h) + (o)))

#define	bus_mem_write_1(t, h, o, v)					\
    ((void)(*(volatile u_int8_t *)((h) + (o)) = (v)))
#define	bus_mem_write_2(t, h, o, v)					\
    ((void)(*(volatile u_int16_t *)((h) + (o)) = (v)))
#define	bus_mem_write_4(t, h, o, v)					\
    ((void)(*(volatile u_int32_t *)((h) + (o)) = (v)))
#define	bus_mem_write_8(t, h, o, v)					\
    ((void)(*(volatile u_int64_t *)((h) + (o)) = (v)))

/* These are extensions to the general NetBSD bus interface.  */
#define	bus_io_read_raw_multi_2(t, h, o, a, c)	\
					insw((h) + (o), (a), ((c) >> 1))
#define	bus_io_read_raw_multi_4(t, h, o, a, c)	\
					insl((h) + (o), (a), ((c) >> 2))
#if 0 /* Cause a link error for bus_io_read_raw_multi_8 */
#define	bus_io_read_raw_multi_8(t, h, o, a, c)	\
				!!! bus_io_read_raw_multi_8 unimplemented !!!
#endif

#define	bus_io_write_raw_multi_2(t, h, o, a, c)	\
					outsw((h) + (o), (a), ((c) >> 1))
#define	bus_io_write_raw_multi_4(t, h, o, a, c)	\
					outsl((h) + (o), (a), ((c) >> 2))
#if 0 /* Cause a link error for bus_io_write_raw_multi_8 */
#define	bus_io_write_raw_multi_8(t, h, o, a, c)	\
				!!! bus_io_write_raw_multi_8 unimplimented !!!
#endif
@


1.6
log
@Correct last arg handling of the *_raw_multi_* macros
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.5 1996/09/18 11:39:24 niklas Exp $	*/
a121 2
#define	bus_io_read_raw_multi_1(t, h, o, a, c)	\
					insb((h) + (o), (a), (c))
a130 2
#define	bus_io_write_raw_multi_1(t, h, o, a, c)	\
					outsb((h) + (o), (a), (c))
@


1.5
log
@remove the obsolete bus_{from,to}_host macros and add the *_raw_multi_*
ones instead
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.4 1996/09/14 15:58:25 pefo Exp $	*/
d125 1
a125 1
					insw((h) + (o), (a), (c))
d127 1
a127 1
					insl((h) + (o), (a), (c))
d136 1
a136 1
					outsw((h) + (o), (a), (c))
d138 1
a138 1
					outsl((h) + (o), (a), (c))
@


1.4
log
@First shot at a multivendor kernel. This version handles pica's and desk-
station tyne's. Auto detection still needs to be compleeted.
Checked in version is hardwired for pica's. Use the PICA config file.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.3 1996/07/30 20:24:24 pefo Exp $	*/
d122 21
a142 8
/* XXX Check endianess */
#define bus_to_host_2(t, v) (v)
#define bus_to_host_4(t, v) (v)
#define bus_to_host_8(t, v) (v)

#define bus_from_host_2(t, v) (v)
#define bus_from_host_4(t, v) (v)
#define bus_from_host_8(t, v) (v)
@


1.3
log
@Cleanup, endian and abi stuff fixies. Some stuff added for MIPS Magnum.
(PICA and Magnum uses very similar core chipsets).
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.2 1996/06/24 20:05:36 pefo Exp $	*/
d104 1
a104 1
    (*mhp = (t == NULL ? port : port + (ulong)(t->isa_mem_base)), 0)
@


1.2
log
@com.c -> local ace.c, lpt -> local lpr.c
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.1.1.1 1996/06/24 09:07:18 pefo Exp $	*/
d122 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 2
/*	$OpenBSD: bus.h,v 1.2 1996/06/06 23:06:33 deraadt Exp $	*/
/*	$NetBSD: bus.h,v 1.2 1996/04/05 23:59:37 thorpej Exp $	*/
d103 3
a105 4
int	bus_mem_map __P((bus_chipset_tag_t t, bus_mem_addr_t bpa,
	    bus_mem_size_t size, int cacheable, bus_mem_handle_t *mhp));
void	bus_mem_unmap __P((bus_chipset_tag_t t, bus_mem_handle_t memh,
	    bus_mem_size_t size));
@


1.1.1.1
log
@Next try. ARC tree import. "New" Mips (spim) ARC compliant systems tree.
This tree will eventually suport viritualy all ARC compliant Mips systems,
that is all we can lay our hands on for porting/testing. It will supersede
the pica tree which will be removed shortly when this tree is functioning.
@
text
@@
