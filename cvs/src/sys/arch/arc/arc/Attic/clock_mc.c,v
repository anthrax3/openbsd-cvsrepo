head	1.10;
access;
symbols
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	UBC_SYNC_A:1.10
	UBC_SYNC_B:1.10
	NIKLAS_UNDEAD:1.9.0.16
	OPENBSD_2_8:1.9.0.14
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.12
	OPENBSD_2_7_BASE:1.9
	SMP:1.9.0.10
	SMP_BASE:1.9
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.8
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.6
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.4
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	PEFO_960624:1.1.1.1
	PEFO:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2001.02.07.07.44.59;	author art;	state dead;
branches;
next	1.9;

1.9
date	98.03.16.09.38.26;	author pefo;	state Exp;
branches
	1.9.10.1;
next	1.8;

1.8
date	98.01.28.13.45.47;	author pefo;	state Exp;
branches;
next	1.7;

1.7
date	97.04.19.17.19.40;	author pefo;	state Exp;
branches;
next	1.6;

1.6
date	97.03.23.11.34.27;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	97.03.12.19.16.39;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	96.09.19.00.30.35;	author imp;	state Exp;
branches;
next	1.3;

1.3
date	96.09.14.15.58.13;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	96.07.30.20.24.13;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	96.06.24.09.07.20;	author pefo;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.06.24.09.07.20;	author pefo;	state Exp;
branches;
next	;

1.9.10.1
date	2001.04.18.16.02.27;	author niklas;	state dead;
branches;
next	;


desc
@@


1.10
log
@We need to loose some weight.
If someone feels very opposed to this, the code is left in the Attic.
Just revive and _make_it_work_.
@
text
@/*	$OpenBSD: clock_mc.c,v 1.9 1998/03/16 09:38:26 pefo Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department and Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah Hdr: clock.c 1.18 91/01/21
 *
 *	@@(#)clock.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/systm.h>
#include <sys/device.h>

#include <machine/autoconf.h>
#include <machine/pio.h>

#include <dev/isa/isareg.h>
#include <dev/isa/isavar.h>
#include <dev/ic/mc146818reg.h>

#include <mips/archtype.h>

#include <mips/dev/clockvar.h>

#include <arc/pica/pica.h>
#include <arc/algor/algor.h>
#include <arc/isa/isa_machdep.h>
#include <arc/isa/timerreg.h>

extern int	cpu_int_mask;
extern int	clock_started;

int		clockintr __P((void *cf));            
void		md_clk_attach __P((struct device *parent,
		    struct device *self, void *aux));
static void	mcclock_init_pica __P((struct clock_softc *csc));
static void	mcclock_init_tyne __P((struct clock_softc *csc));
static void	mcclock_init_algor __P((struct clock_softc *csc));
static void	mcclock_get __P((struct clock_softc *csc, time_t base,
		    struct tod_time *ct));
static void	mcclock_set __P((struct clock_softc *csc,
		    struct tod_time *ct));

struct mcclockdata {
	void	(*mc_write) __P((struct clock_softc *csc, u_int reg,
		    u_int datum));
	u_int	(*mc_read) __P((struct clock_softc *csc, u_int reg));
};

#define	mc146818_write(sc, reg, datum)					\
	    (*((struct mcclockdata *)sc->sc_data)->mc_write)(sc, reg, datum)
#define	mc146818_read(sc, reg)						\
	    (*((struct mcclockdata *)sc->sc_data)->mc_read)(sc, reg)

/* Acer Pica clock access code */
static void	mc_write_pica __P((struct clock_softc *csc, u_int reg,
		    u_int datum));
static u_int	mc_read_pica __P((struct clock_softc *csc, u_int reg));
static struct mcclockdata mcclockdata_pica = { mc_write_pica, mc_read_pica };

/* Deskstation clock access code */
static void	mc_write_tyne __P((struct clock_softc *csc, u_int reg,
		    u_int datum));
static u_int	mc_read_tyne __P((struct clock_softc *csc, u_int reg));
static struct mcclockdata mcclockdata_tyne = { mc_write_tyne, mc_read_tyne };

/* Algorithmics clock access code */
static void	mc_write_algor __P((struct clock_softc *csc, u_int reg,
		    u_int datum));
static u_int	mc_read_algor __P((struct clock_softc *csc, u_int reg));
static struct mcclockdata mcclockdata_algor = { mc_write_algor, mc_read_algor };

void
md_clk_attach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
{
	struct clock_softc *csc = (struct clock_softc *)self;

	printf(": mc146818 or compatible");

	csc->sc_get = mcclock_get;
	csc->sc_set = mcclock_set;

        switch (system_type) {

        case ACER_PICA_61:
	case MAGNUM:
		csc->sc_init = mcclock_init_pica;
		csc->sc_data = &mcclockdata_pica;
		mc146818_write(csc, MC_REGB, MC_REGB_BINARY | MC_REGB_24HR);
		break;

	case DESKSTATION_RPC44:
	case DESKSTATION_TYNE:
		csc->sc_init = mcclock_init_tyne;
		csc->sc_data = &mcclockdata_tyne;
		mc146818_write(csc, MC_REGB, MC_REGB_BINARY | MC_REGB_24HR);
		break;

	case ALGOR_P4032:
	case ALGOR_P5064:
		csc->sc_init = mcclock_init_algor;
		csc->sc_data = &mcclockdata_algor;
		mc146818_write(csc, MC_REGB, MC_REGB_BINARY|MC_REGB_24HR|MC_REGB_SQWE);
		break;

	default:
		printf("\n");
		panic("don't know how to set up for other system types.");
	}
}

static void
mcclock_init_pica(csc)
	struct clock_softc *csc;
{
/* XXX Does not really belong here but for the moment we don't care */
	out32(R4030_SYS_IT_VALUE, 9); /* 10ms - 1 */
	/* Enable periodic clock interrupt */
	out32(R4030_SYS_EXT_IMASK, cpu_int_mask);
}

static void
mcclock_init_tyne(csc)
	struct clock_softc *csc;
{
	isa_outb(TIMER_MODE, TIMER_SEL0 | TIMER_16BIT | TIMER_RATEGEN);
	isa_outb(TIMER_CNTR0, TIMER_DIV(hz) % 256);
	isa_outb(TIMER_CNTR0, TIMER_DIV(hz) / 256);
}

int                          
clockintr(cf)           
        void *cf;            
{
        if(clock_started)
                hardclock((struct clockframe *)cf);
        return(1);              
}

static void
mcclock_init_algor(csc)
	struct clock_softc *csc;
{
	int s;
	char cv;

	hz = 256;	/* NOTE! We are going at 256 Hz! */
	s = splclock();
	cv = mc146818_read(csc, MC_REGA) & ~MC_REGA_RSMASK;
	mc146818_write(csc, MC_REGA, cv | MC_RATE_256_Hz);
	cv = mc146818_read(csc, MC_REGB);
	mc146818_write(csc, MC_REGB, cv | MC_REGB_PIE);
	splx(s);
}

/*
 * Get the time of day, based on the clock's value and/or the base value.
 */
static void
mcclock_get(csc, base, ct)
	struct clock_softc *csc;
	time_t base;
	struct tod_time *ct;
{
	mc_todregs regs;
	int s;

	s = splclock();
	MC146818_GETTOD(csc, &regs)
	splx(s);

	ct->sec = regs[MC_SEC];
	ct->min = regs[MC_MIN];
	ct->hour = regs[MC_HOUR];
	ct->dow = regs[MC_DOW];
	ct->day = regs[MC_DOM];
	ct->mon = regs[MC_MONTH];
	ct->year = regs[MC_YEAR];
	if(system_type == ALGOR_P4032 ||
	   system_type == ALGOR_P5064) {
		ct->year -= 80;
	}
}

/*
 * Reset the TODR based on the time value.
 */
static void
mcclock_set(csc, ct)
	struct clock_softc *csc;
	struct tod_time *ct;
{
	mc_todregs regs;
	int s;

	s = splclock();
	MC146818_GETTOD(csc, &regs);
printf("%d-%d-%d, %d:%d:%d\n", regs[MC_YEAR], regs[MC_MONTH], regs[MC_DOM], regs[MC_HOUR], regs[MC_MIN], regs[MC_SEC]);

	regs[MC_SEC] = ct->sec;
	regs[MC_MIN] = ct->min;
	regs[MC_HOUR] = ct->hour;
	regs[MC_DOW] = ct->dow;
	regs[MC_DOM] = ct->day;
	regs[MC_MONTH] = ct->mon;
	if(system_type == ALGOR_P4032 ||
	   system_type == ALGOR_P4032) {
		regs[MC_YEAR] = ct->year + 80;
	}
	else {
		regs[MC_YEAR] = ct->year;
	}

	MC146818_PUTTOD(csc, &regs);
	MC146818_GETTOD(csc, &regs);
printf("%d-%d-%d, %d:%d:%d\n", regs[MC_YEAR], regs[MC_MONTH], regs[MC_DOM], regs[MC_HOUR], regs[MC_MIN], regs[MC_SEC]);
	splx(s);
}

static void
mc_write_pica(csc, reg, datum)
	struct clock_softc *csc;
	u_int reg, datum;
{
	int as;

	as = in32(PICA_SYS_ISA_AS) & 0x80;
	out32(PICA_SYS_ISA_AS, as | reg);
	outb(PICA_SYS_CLOCK, datum);
}

static u_int
mc_read_pica(csc, reg)
	struct clock_softc *csc;
	u_int reg;
{
	int i,as;

	as = in32(PICA_SYS_ISA_AS) & 0x80;
	out32(PICA_SYS_ISA_AS, as | reg);
	i = inb(PICA_SYS_CLOCK);
	return(i);
}

static void
mc_write_tyne(csc, reg, datum)
	struct clock_softc *csc;
	u_int reg, datum;
{
	isa_outb(IO_RTC, reg);
	isa_outb(IO_RTC+1, datum);
}

static u_int
mc_read_tyne(csc, reg)
	struct clock_softc *csc;
	u_int reg;
{
	int i;

	isa_outb(IO_RTC, reg);
	i = isa_inb(IO_RTC+1);
	return(i);
}

static void
mc_write_algor(csc, reg, datum)
	struct clock_softc *csc;
	u_int reg, datum;
{
	if(system_type == ALGOR_P4032) {
		outb(P4032_CLOCK, reg);
		outb(P4032_CLOCK+4, datum);
	}
	else {
		outb(P5064_CLOCK, reg);
		outb(P5064_CLOCK+1, datum);
	}
}

static u_int
mc_read_algor(csc, reg)
	struct clock_softc *csc;
	u_int reg;
{
	int i;

	if(system_type == ALGOR_P4032) {
		outb(P4032_CLOCK, reg);
		i = inb(P4032_CLOCK+4) & 0xff;
	}
	else {
		outb(P5064_CLOCK, reg);
		i = inb(P5064_CLOCK+1) & 0xff;
	}
	return(i);
}
@


1.9
log
@DDB.

Support for Algorithmics R5000/R10000 evaluation board. So far only the
RM5260 is supported. RM5270 - RM7000 later. R5000 and R10000 depending
on access to cpu modules.

vm_machdep.c moved to arch/mips/mips.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_mc.c,v 1.8 1998/01/28 13:45:47 pefo Exp $	*/
@


1.9.10.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_mc.c,v 1.9 1998/03/16 09:38:26 pefo Exp $	*/
@


1.8
log
@Moving around files for new mips arch layout
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_mc.c,v 1.7 1997/04/19 17:19:40 pefo Exp $	*/
d74 1
a74 1
static void	mcclock_init_p4032 __P((struct clock_softc *csc));
d103 2
a104 2
/* Algorithmics P4032 clock access code */
static void	mc_write_p4032 __P((struct clock_softc *csc, u_int reg,
d106 2
a107 2
static u_int	mc_read_p4032 __P((struct clock_softc *csc, u_int reg));
static struct mcclockdata mcclockdata_p4032 = { mc_write_p4032, mc_read_p4032 };
d125 1
d139 3
a141 2
		csc->sc_init = mcclock_init_p4032;
		csc->sc_data = &mcclockdata_p4032;
d180 1
a180 1
mcclock_init_p4032(csc)
d218 2
a219 1
	if(system_type == ALGOR_P4032)
d221 1
d245 2
a246 1
	if(system_type == ALGOR_P4032)
d248 2
a249 1
	else
d251 1
d306 1
a306 1
mc_write_p4032(csc, reg, datum)
d310 8
a317 2
	outb(P4032_CLOCK, reg);
	outb(P4032_CLOCK+4, datum);
d321 1
a321 1
mc_read_p4032(csc, reg)
d327 8
a334 2
	outb(P4032_CLOCK, reg);
	i = inb(P4032_CLOCK+4) & 0xff;
@


1.7
log
@-Wall cleanup.
Change to new MI assym.h file generation. (genassym.cf)
@
text
@d1 1
a1 2
/*	$OpenBSD: clock_mc.c,v 1.6 1997/03/23 11:34:27 pefo Exp $	*/
/*	$NetBSD: clock_mc.c,v 1.2 1995/06/28 04:30:30 cgd Exp $	*/
d57 4
a60 2
#include <arc/arc/clockvar.h>
#include <arc/arc/arctype.h>
a65 1
extern u_int	cputype;
d67 1
d69 2
a70 1
void		mcclock_attach __P((struct device *parent,
d110 1
a110 1
mcclock_attach(parent, self, aux)
d122 1
a122 1
        switch (cputype) {
d168 9
d216 1
a216 1
	if(cputype == ALGOR_P4032)
d241 1
a241 1
	if(cputype == ALGOR_P4032)
@


1.6
log
@Adding more arches require more structuring and cleanup. More to come...
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_mc.c,v 1.5 1997/03/12 19:16:39 pefo Exp $	*/
a114 3
	register volatile struct chiptime *c;
	struct confargs *ca = aux;

d246 1
a246 1
	int i,as;
@


1.5
log
@Addition of support for a PCI based Vr4300 board from Algorithmics, the P-4032.
Changes to io macros were done to handle sparse bus addressing dynamically.
This is a first cut (rough).
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_mc.c,v 1.4 1996/09/19 00:30:35 imp Exp $	*/
a81 1
	void	*mc_addr;
d89 1
a89 1
/* Acer pica clock read code */
d95 1
a95 1
/* Deskstation clock read code */
d101 1
a101 1
/* Algorithmics P4032 clock read code */
a125 4
		/* 
		 * XXX should really allocate a new one and copy, or
		 * something.  unlikely we'll have more than one...
		 */
a127 1
		mcclockdata_tyne.mc_addr = BUS_CVTADDR(ca);
d225 1
d239 2
@


1.4
log
@Deskstation rPC44 tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_mc.c,v 1.3 1996/09/14 15:58:13 pefo Exp $	*/
d61 1
d72 1
d102 6
d134 1
d141 7
a153 3

	/* Turn interrupts off, just in case. */
	mc146818_write(csc, MC_REGB, MC_REGB_BINARY | MC_REGB_24HR);
d175 16
d214 2
d238 4
a241 1
	regs[MC_YEAR] = ct->year;
d290 21
@


1.3
log
@First shot at a multivendor kernel. This version handles pica's and desk-
station tyne's. Auto detection still needs to be compleeted.
Checked in version is hardwired for pica's. Use the PICA config file.
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_mc.c,v 1.2 1996/07/30 20:24:13 pefo Exp $	*/
d128 1
@


1.2
log
@Cleanup, endian and abi stuff fixies. Some stuff added for MIPS Magnum.
(PICA and Magnum uses very similar core chipsets).
@
text
@d1 1
a1 1
/*	$OpenBSD: clock_mc.c,v 1.1.1.1 1996/06/24 09:07:20 pefo Exp $	*/
d54 4
d61 2
a62 1
#include <dev/ic/mc146818reg.h>
d69 2
a70 1
static void	mcclock_init __P((struct clock_softc *csc));
d88 8
a95 2
#if defined(ACER_PICA_61)
static void	mc_write_arc __P((struct clock_softc *csc, u_int reg,
d97 2
a98 3
static u_int	mc_read_arc __P((struct clock_softc *csc, u_int reg));
static struct mcclockdata mcclockdata_arc = { mc_write_arc, mc_read_arc };
#endif
a112 1
	csc->sc_init = mcclock_init;
d123 8
a130 2
		csc->sc_data = &mcclockdata_arc;
		mcclockdata_arc.mc_addr = BUS_CVTADDR(ca);
d143 1
a143 1
mcclock_init(csc)
d152 9
a198 1
	splx(s);
a207 1
	s = splclock();
a211 3

#if defined(ACER_PICA_61)

d213 1
a213 1
mc_write_arc(csc, reg, datum)
d225 1
a225 1
mc_read_arc(csc, reg)
d236 21
a256 1
#endif /*ACER_PICA_61*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d131 1
a131 1
	out32(PICA_SYS_IT_VALUE, 9); /* 10ms - 1 */
d133 1
a133 1
	out32(PICA_SYS_EXT_IMASK, cpu_int_mask);
@


1.1.1.1
log
@Next try. ARC tree import. "New" Mips (spim) ARC compliant systems tree.
This tree will eventually suport viritualy all ARC compliant Mips systems,
that is all we can lay our hands on for porting/testing. It will supersede
the pica tree which will be removed shortly when this tree is functioning.
@
text
@@

