head	1.14;
access;
symbols
	OPENBSD_4_1:1.13.0.6
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.4
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.8
	UBC:1.3.0.2
	UBC_BASE:1.3
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.14
date	2007.06.13.02.17.32;	author drahn;	state dead;
branches;
next	1.13;

1.13
date	2005.12.24.01.05.17;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.09.15.14.48;	author drahn;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.08.06.27.58;	author drahn;	state Exp;
branches;
next	1.10;

1.10
date	2003.10.16.04.30.09;	author drahn;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.01.17.00.36;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.09.15.09.01.59;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.15.02.02.44;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.13.02.05.56;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.03.15.56;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.15.22.26.18;	author deraadt;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2001.09.21.16.58.41;	author drahn;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2001.09.01.15.39.02;	author drahn;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.01.16;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.06.01.06.11;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2002.03.28.10.36.02;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2003.03.27.23.29.46;	author niklas;	state Exp;
branches;
next	1.2.4.5;

1.2.4.5
date	2003.06.07.11.13.14;	author ho;	state Exp;
branches;
next	1.2.4.6;

1.2.4.6
date	2004.02.19.10.49.04;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2002.06.11.03.36.34;	author art;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2002.10.29.00.28.06;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Switch macppc to the interactive bootloader in stand/boot.
Much more useable on serial console systems.
@
text
@/*	$OpenBSD: boot.c,v 1.13 2005/12/24 01:05:17 kettenis Exp $	*/
/*	$NetBSD: boot.c,v 1.1 1997/04/16 20:29:17 thorpej Exp $	*/

/*
 * Copyright (c) 1997 Jason R. Thorpe.  All rights reserved.
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
 * All rights reserved.
 *
 * ELF support derived from NetBSD/alpha's boot loader, written
 * by Christopher G. Demetriou.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * First try for the boot code
 *
 * Input syntax is:
 *	[promdev[{:|,}partition]]/[filename] [flags]
 */

#define	ELFSIZE		32		/* We use 32-bit ELF. */

#include <sys/param.h>
#include <sys/exec.h>
#include <sys/exec_elf.h>
#include <sys/reboot.h>
#include <sys/disklabel.h>

#include <lib/libkern/libkern.h>
#include <lib/libsa/stand.h>
#include <lib/libsa/loadfile.h>


#include <machine/cpu.h>

#include <macppc/stand/ofdev.h>
#include <macppc/stand/openfirm.h>

char bootdev[128];
char bootfile[128];
int boothowto;
int debug;

static void
prom2boot(char *dev)
{
	char *cp, *lp = 0;

	for (cp = dev; *cp; cp++)
		if (*cp == ':')
			lp = cp;
	if (!lp)
		lp = cp;
	*lp = 0;
}

static void
parseargs(char *str, int *howtop)
{
	char *cp;

	/* Allow user to drop back to the PROM. */
	if (strcmp(str, "exit") == 0)
		_rtt();

	*howtop = 0;
	if (str[0] == '\0')
		return;

	cp = str;
	while (*cp != 0) {
		/* check for - */
		if (*cp == '-')
			break;	/* start of options found */

		while (*cp != 0 && *cp != ' ')
			cp++;	/* character in the middle of the name, skip */

		while (*cp == ' ')
			*cp++ = 0;
	}
	if (!*cp)
		return;

	*cp++ = 0;
	while (*cp) {
		switch (*cp++) {
		case 'a':
			*howtop |= RB_ASKNAME;
			break;
		case 'c':
			*howtop |= RB_CONFIG;
			break;
		case 's':
			*howtop |= RB_SINGLE;
			break;
		case 'd':
			*howtop |= RB_KDB;
			debug = 1;
			break;
		}
	}
}

static void
chain(void (*entry)(), char *args, void *ssym, void *esym)
{
	extern char end[];
	int l, machine_tag;

	freeall();

	/*
	 * Stash pointer to end of symbol table after the argument
	 * strings.
	 */
	l = strlen(args) + 1;
	bcopy(&ssym, args + l, sizeof(ssym));
	l += sizeof(ssym);
	bcopy(&esym, args + l, sizeof(esym));
	l += sizeof(esym);

#ifdef __notyet__
	/*
	 * Tell the kernel we're an OpenFirmware system.
	 */
	machine_tag = POWERPC_MACHINE_OPENFIRMWARE;
	bcopy(&machine_tag, args + l, sizeof(machine_tag));
	l += sizeof(machine_tag);
#endif

	OF_chain((void *)RELOC, end - (char *)RELOC, entry, args, l);
	panic("chain");
}

/*
 * XXX This limits the maximum size of the (uncompressed) bsd.rd to a
 * little under 11MB.
 */
#define CLAIM_LIMIT	0x00c00000

int
main()
{
	int chosen;
	char bootline[512];		/* Should check size? */
	char *cp;
	u_long marks[MARK_MAX];
	u_int32_t entry;
	void *ssym, *esym;
	int fd;

	printf("\n>> OpenBSD/macppc Boot\n");

	/*
	 * Get the boot arguments from Openfirmware
	 */
	if ((chosen = OF_finddevice("/chosen")) == -1 ||
	    OF_getprop(chosen, "bootpath", bootdev, sizeof bootdev) < 0 ||
	    OF_getprop(chosen, "bootargs", bootline, sizeof bootline) < 0) {
		printf("Invalid Openfirmware environment\n");
		exit();
	}
	prom2boot(bootdev);
	parseargs(bootline, &boothowto);
	for (;;) {
		if (boothowto & RB_ASKNAME) {
			printf("Boot (or \"exit\"): ");
			gets(bootline);
			parseargs(bootline, &boothowto);
		}
		OF_claim((void *)0x00100000, CLAIM_LIMIT, 0); /* XXX */
		marks[MARK_START] = 0;
		if (loadfile(bootline, marks, LOAD_ALL) >= 0)
			break;
		if (errno)
			printf("open %s: %s\n", opened_name, strerror(errno));
		boothowto |= RB_ASKNAME;
	}
#ifdef	__notyet__
	OF_setprop(chosen, "bootpath", opened_name, strlen(opened_name) + 1);
	cp = bootline;
#else
	strlcpy(bootline, opened_name, sizeof bootline);
	cp = bootline + strlen(bootline);
	*cp++ = ' ';
#endif
	*cp = '-';
	if (boothowto & RB_ASKNAME)
		*++cp = 'a';
	if (boothowto & RB_CONFIG)
		*++cp = 'c';
	if (boothowto & RB_SINGLE)
		*++cp = 's';
	if (boothowto & RB_KDB)
		*++cp = 'd';
	if (*cp == '-')
#ifdef	__notyet__
		*cp = 0;
#else
		*--cp = 0;
#endif
	else
		*++cp = 0;
#ifdef	__notyet__
	OF_setprop(chosen, "bootargs", bootline, strlen(bootline) + 1);
#endif
	entry = marks[MARK_ENTRY];
	ssym = (void *)marks[MARK_SYM];
	esym = (void *)marks[MARK_END];
	{
		u_int32_t lastpage;
		lastpage = roundup(marks[MARK_END], NBPG);
		OF_release((void*)lastpage, CLAIM_LIMIT - lastpage);
	}

	chain((void *)entry, bootline, ssym, esym);

	_rtt();
	return 0;
}
@


1.13
log
@Claim a bit more memory such that we can load bsd.rd.
tested by many; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.12 2005/10/09 15:14:48 drahn Exp $	*/
@


1.12
log
@Try to recover part of the reserved space from the OF_claim above.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.11 2005/10/08 06:27:58 drahn Exp $	*/
d161 6
d197 1
a197 1
		OF_claim((void *)0x00100000, 0x00800000, 0); /* XXX */
d239 1
a239 1
		OF_release((void*)lastpage, 0x00800000 - lastpage);
@


1.11
log
@Preallocate the space where the kernel would live, needs to be at least
as large as the ramdisk kernel, however currently on GENERIC this causes
about 4MB loss of avail mem, once the kernel is loaded, the remainder
needs to be returned.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.10 2003/10/16 04:30:09 drahn Exp $	*/
d230 5
@


1.10
log
@There is no end to the ANSI/KNF journey.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.10 2003/10/16 04:26:36 drahn Exp $	*/
d191 1
@


1.9
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.8 2002/09/15 09:01:59 deraadt Exp $	*/
d70 1
a70 2
prom2boot(dev)
	char *dev;
d73 1
a73 1
	
d83 1
a83 3
parseargs(str, howtop)
	char *str;
	int *howtop;
d109 1
a109 1
	
d131 1
a131 5
chain(entry, args, ssym, esym)
	void (*entry)();
	char *args;
	void *ssym;
	void *esym;
d171 1
a171 1
	
@


1.8
log
@backout premature
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.6 2002/08/13 02:05:56 drahn Exp $	*/
d184 3
a186 3
	if ((chosen = OF_finddevice("/chosen")) == -1
	    || OF_getprop(chosen, "bootpath", bootdev, sizeof bootdev) < 0
	    || OF_getprop(chosen, "bootargs", bootline, sizeof bootline) < 0) {
d209 1
a209 1
	strcpy(bootline, opened_name);
d237 1
a237 1
	chain ((void *)entry, bootline, ssym, esym);
@


1.7
log
@KNF
@
text
@d58 1
d74 1
a74 1

d112 1
a112 1

d178 1
a178 1

d184 3
a186 3
	if ((chosen = OF_finddevice("/chosen")) == -1 ||
	    OF_getprop(chosen, "bootpath", bootdev, sizeof bootdev) < 0 ||
	    OF_getprop(chosen, "bootargs", bootline, sizeof bootline) < 0) {
@


1.6
log
@Remove some unused prototypes, KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.5 2002/03/14 03:15:56 millert Exp $	*/
a57 1

d73 1
a73 1
	
d111 1
a111 1
	
d177 1
a177 1
	
d183 3
a185 3
	if ((chosen = OF_finddevice("/chosen")) == -1
	    || OF_getprop(chosen, "bootpath", bootdev, sizeof bootdev) < 0
	    || OF_getprop(chosen, "bootargs", bootline, sizeof bootline) < 0) {
@


1.5
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.4 2002/03/14 01:26:37 millert Exp $	*/
a68 8
#ifdef POWERPC_BOOT_ELF
int	elf_exec(int, Elf32_Ehdr *, u_int32_t *, void **);
#endif

#ifdef POWERPC_BOOT_AOUT
int	aout_exec(int, struct exec *, u_int32_t *, void **);
#endif

d95 1
a95 1
	if (str[0] == '\0') {
d97 1
a97 1
	}
d101 7
a107 9
		if (*cp == '-') {
			/* start of options found */
			break;
		}
		while (*cp != 0 && *cp != ' ') {
			/* character in the middle of the name, skip */
			cp++;
		}
		while (*cp == ' ') {
a108 1
		}
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.3 2001/12/15 22:26:18 deraadt Exp $	*/
d248 1
a248 1
	chain ((void*)entry, bootline, ssym, esym);
@


1.3
log
@document exit command at Boot: prompt; pvalchev tested
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.2 2001/09/21 16:58:41 drahn Exp $	*/
d70 1
a70 1
int	elf_exec __P((int, Elf32_Ehdr *, u_int32_t *, void **));
d74 1
a74 1
int	aout_exec __P((int, struct exec *, u_int32_t *, void **));
@


1.3.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.3 2001/12/15 22:26:18 deraadt Exp $	*/
d70 1
a70 1
int	elf_exec(int, Elf32_Ehdr *, u_int32_t *, void **);
d74 1
a74 1
int	aout_exec(int, struct exec *, u_int32_t *, void **);
d248 1
a248 1
	chain ((void *)entry, bootline, ssym, esym);
@


1.3.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.3.2.1 2002/06/11 03:36:34 art Exp $	*/
d69 8
d103 1
a103 1
	if (str[0] == '\0')
d105 1
a105 1

d109 9
a117 7
		if (*cp == '-')
			break;	/* start of options found */

		while (*cp != 0 && *cp != ' ')
			cp++;	/* character in the middle of the name, skip */

		while (*cp == ' ')
d119 1
@


1.2
log
@Add the support for "-c", UKC in the bootloader. Note that currently this
is not fully supported by the kernel, so will just hang the machine.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.1 2001/09/01 15:39:02 drahn Exp $	*/
d205 1
a205 1
			printf("Boot: ");
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.4.2
log
@Merge in trunk
@
text
@d205 1
a205 1
			printf("Boot (or \"exit\"): ");
@


1.2.4.3
log
@Merge in -current from about a week ago
@
text
@d70 1
a70 1
int	elf_exec(int, Elf32_Ehdr *, u_int32_t *, void **);
d74 1
a74 1
int	aout_exec(int, struct exec *, u_int32_t *, void **);
d248 1
a248 1
	chain ((void *)entry, bootline, ssym, esym);
@


1.2.4.4
log
@Sync the SMP branch with 3.3
@
text
@d69 8
d103 1
a103 1
	if (str[0] == '\0')
d105 1
a105 1

d109 9
a117 7
		if (*cp == '-')
			break;	/* start of options found */

		while (*cp != 0 && *cp != ' ')
			cp++;	/* character in the middle of the name, skip */

		while (*cp == ' ')
d119 1
@


1.2.4.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.2.4.4 2003/03/27 23:29:46 niklas Exp $	*/
d184 3
a186 3
	if ((chosen = OF_finddevice("/chosen")) == -1 ||
	    OF_getprop(chosen, "bootpath", bootdev, sizeof bootdev) < 0 ||
	    OF_getprop(chosen, "bootargs", bootline, sizeof bootline) < 0) {
d209 1
a209 1
	strlcpy(bootline, opened_name, sizeof bootline);
d237 1
a237 1
	chain((void *)entry, bootline, ssym, esym);
@


1.2.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d70 2
a71 1
prom2boot(char *dev)
d74 1
a74 1

d84 3
a86 1
parseargs(char *str, int *howtop)
d112 1
a112 1

d134 5
a138 1
chain(void (*entry)(), char *args, void *ssym, void *esym)
d178 1
a178 1

@


1.1
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/stand to macppc/stand
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.13 2001/06/23 01:53:01 drahn Exp $	*/
d130 3
d227 2
@

