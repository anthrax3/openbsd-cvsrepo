head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.14
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.10
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.12
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.2
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.6.0.4
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.2
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3;
locks; strict;
comment	@ * @;


1.8
date	2013.03.21.21.51.00;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2013.02.09.20.38.44;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.19.16.15.11;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.25.16.55.31;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.27.16.22.13;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.24.14.58.12;	author tom;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.14.03.32.53;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.13.02.17.32;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.8
log
@NBPG -> PAGE_SIZE, PGSHIFT -> PAGE_SHIFT, PGOFSET -> PAGE_MASK
@
text
@/*	$OpenBSD: main.c,v 1.7 2013/02/09 20:38:44 miod Exp $	*/
/*	$NetBSD: boot.c,v 1.1 1997/04/16 20:29:17 thorpej Exp $	*/

/*
 * Copyright (c) 1997 Jason R. Thorpe.  All rights reserved.
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
 * All rights reserved.
 *
 * ELF support derived from NetBSD/alpha's boot loader, written
 * by Christopher G. Demetriou.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * First try for the boot code
 *
 * Input syntax is:
 *	[promdev[{:|,}partition]]/[filename] [flags]
 */

#define	ELFSIZE		32		/* We use 32-bit ELF. */

#include <sys/param.h>
#include <sys/exec.h>
#include <sys/exec_elf.h>
#include <sys/reboot.h>
#include <sys/disklabel.h>

#include <lib/libkern/libkern.h>
#include <lib/libsa/stand.h>
#include <lib/libsa/loadfile.h>
#include <stand/boot/cmd.h>


#include <machine/cpu.h>

#include <macppc/stand/ofdev.h>
#include <macppc/stand/openfirm.h>

char bootdev[128];
int boothowto;
int debug;


void
get_alt_bootdev(char *, size_t, char *, size_t);

static void
prom2boot(char *dev)
{
	char *cp, *lp = 0;

	for (cp = dev; *cp; cp++)
		if (*cp == ':')
			lp = cp;
	if (!lp)
		lp = cp;
	*lp = 0;
}

static void
chain(void (*entry)(), char *args, void *ssym, void *esym)
{
	extern char end[];
	int l;
#ifdef __notyet__
	int machine_tag;
#endif

	freeall();

	/*
	 * Stash pointer to end of symbol table after the argument
	 * strings.
	 */
	l = strlen(args) + 1;
	bcopy(&ssym, args + l, sizeof(ssym));
	l += sizeof(ssym);
	bcopy(&esym, args + l, sizeof(esym));
	l += sizeof(esym);

#ifdef __notyet__
	/*
	 * Tell the kernel we're an OpenFirmware system.
	 */
	machine_tag = POWERPC_MACHINE_OPENFIRMWARE;
	bcopy(&machine_tag, args + l, sizeof(machine_tag));
	l += sizeof(machine_tag);
#endif

	OF_chain((void *)RELOC, end - (char *)RELOC, entry, args, l);
	panic("chain");
}

/*
 * XXX This limits the maximum size of the (uncompressed) bsd.rd to a
 * little under 11MB.
 */
#define CLAIM_LIMIT	0x00c00000

char bootline[512];

extern char *kernelfile;
int
main()
{
	int chosen;

	/*
	 * Get the boot arguments from Openfirmware
	 */
	if ((chosen = OF_finddevice("/chosen")) == -1 ||
	    OF_getprop(chosen, "bootpath", bootdev, sizeof bootdev) < 0 ||
	    OF_getprop(chosen, "bootargs", bootline, sizeof bootline) < 0) {
		printf("Invalid Openfirmware environment\n");
		exit();
	}
	prom2boot(bootdev);
	get_alt_bootdev(bootdev, sizeof(bootdev), bootline, sizeof(bootline));
	if (bootline[0] != '\0')
		kernelfile = bootline;

	OF_claim((void *)0x00100000, CLAIM_LIMIT, 0); /* XXX */
	boot(0);
	return 0;
}

void
get_alt_bootdev(char *dev, size_t devsz, char *line, size_t linesz)
{
	char *p;
	int len;
	/*
	 * if the kernel image specified contains a ':' it is
	 * [device]:[kernel], so separate the two fields.
	 */
	p = strrchr(line, ':');
	if (p == NULL)
		return;
	/* user specified boot device for kernel */
	len = p - line + 1; /* str len plus nil */
	strlcpy(dev, line, len > devsz ? devsz : len);

	strlcpy(line, p+1, linesz); /* rest of string after ':' */
}


void
devboot(dev_t dev, char *p)
{
	strlcpy(p, bootdev, BOOTDEVLEN);
}

int
run_loadfile(u_long *marks, int howto)
{
	char bootline[512];		/* Should check size? */
	u_int32_t entry;
	char *cp;
	void *ssym, *esym;

	strlcpy(bootline, opened_name, sizeof bootline);
	cp = bootline + strlen(bootline);
	*cp++ = ' ';
        *cp = '-';
        if (howto & RB_ASKNAME)
                *++cp = 'a';
        if (howto & RB_CONFIG)
                *++cp = 'c';
        if (howto & RB_SINGLE)
                *++cp = 's';
        if (howto & RB_KDB)
                *++cp = 'd';
        if (*cp == '-')
		*--cp = 0;
	else
		*++cp = 0;

	entry = marks[MARK_ENTRY];
	ssym = (void *)marks[MARK_SYM];
	esym = (void *)marks[MARK_END];
	{
		u_int32_t lastpage;
		lastpage = roundup(marks[MARK_END], PAGE_SIZE);
		OF_release((void*)lastpage, CLAIM_LIMIT - lastpage);
	}

	chain((void *)entry, bootline, ssym, esym);

	_rtt();
	return 0;
}

int
cnspeed(dev_t dev, int sp)
{
	return CONSPEED;
}

char ttyname_buf[8];

char *
ttyname(int fd)
{
        snprintf(ttyname_buf, sizeof ttyname_buf, "ofc0");
	return ttyname_buf;
}

dev_t
ttydev(char *name)
{
	return makedev(0,0);
}
@


1.7
log
@ater -> after
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.6 2011/11/19 16:15:11 mpi Exp $	*/
d209 1
a209 1
		lastpage = roundup(marks[MARK_END], NBPG);
@


1.6
log
@Remove unused function forgotten during the switch to the interactive
bootloader and make use of strrchr() in hfs_open because we have it.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.5 2008/05/25 16:55:31 miod Exp $	*/
d169 1
a169 1
	strlcpy(line, p+1, linesz); /* rest of string ater ':' */
@


1.5
log
@Don't forget to actually return a value in ttyname(), and fix a bunch of
warnings while there.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.4 2007/11/27 16:22:13 martynas Exp $	*/
a83 48
}

static void
parseargs(char *str, int *howtop)
{
	char *cp;

	/* Allow user to drop back to the PROM. */
	if (strcmp(str, "exit") == 0)
		_rtt();

	*howtop = 0;
	if (str[0] == '\0')
		return;

	cp = str;
	while (*cp != 0) {
		/* check for - */
		if (*cp == '-')
			break;	/* start of options found */

		while (*cp != 0 && *cp != ' ')
			cp++;	/* character in the middle of the name, skip */

		while (*cp == ' ')
			*cp++ = 0;
	}
	if (!*cp)
		return;

	*cp++ = 0;
	while (*cp) {
		switch (*cp++) {
		case 'a':
			*howtop |= RB_ASKNAME;
			break;
		case 'c':
			*howtop |= RB_CONFIG;
			break;
		case 's':
			*howtop |= RB_SINGLE;
			break;
		case 'd':
			*howtop |= RB_KDB;
			debug = 1;
			break;
		}
	}
@


1.4
log
@typos;  ok jmc@@
sys/dev/pci/pciide.c from naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.3 2007/06/24 14:58:12 tom Exp $	*/
d138 4
a141 1
	int l, machine_tag;
a180 3
	u_long marks[MARK_MAX];
	int fd;

d227 1
a264 1

d279 1
a279 1

@


1.3
log
@When bootfile was made global so that macppc could modify it, it
clashed with a global variable already used by the bootblocks.
Therefore rename bootfile here to kernelfile.

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.2 2007/06/14 03:32:53 drahn Exp $	*/
d208 1
a208 1
	 * [device]:[kernel], so seperate the two fields.
@


1.2
log
@Remove some debug prints which I let slip in.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.1 2007/06/13 02:17:32 drahn Exp $	*/
d173 1
a173 1
extern const char *bootfile;
d194 1
a194 1
		bootfile = bootline;
@


1.1
log
@Switch macppc to the interactive bootloader in stand/boot.
Much more useable on serial console systems.
@
text
@d1 1
a1 1
/*	$OpenBSD: boot.c,v 1.13 2005/12/24 01:05:17 kettenis Exp $	*/
a191 1
	printf("bootline [%s]\n", bootline);
a223 1
	printf("bootdev [%s]\n", bootdev);
@

