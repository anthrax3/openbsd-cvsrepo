head	1.9;
access;
symbols
	OPENBSD_6_0:1.9.0.14
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.10
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.12
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.8
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.12
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.10
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.8
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.6
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.4
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.2
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.3
	UBC:1.1.0.6
	UBC_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2013.04.21.14.44.16;	author sebastia;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.01.20.19.18;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.13.00.31.09;	author krw;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.23.23.26.55;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2004.06.14.00.32.31;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.23.27.50;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.06.13.56.51;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.36;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.26.22.45.43;	author mickey;	state Exp;
branches
	1.1.4.1
	1.1.6.1;
next	;

1.1.4.1
date	2001.10.31.03.01.16;	author nate;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.28.10.36.01;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.03.27.23.29.46;	author niklas;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2003.06.07.11.13.14;	author ho;	state Exp;
branches;
next	;

1.1.6.1
date	2002.06.11.03.36.34;	author art;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2002.10.29.00.28.06;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Unify the zs tty driver.

Most of the hard work by mpi@@, who provided the initial diff.
Fixes for sparc from myself. Tested on sgi and sparc myself.
Compiles and detects zstty on my powerbook, compile tested on
sparc64 by me. Real testing with zs device on sparc64 by miod@@
who also gave a lot of help and feedback.

ok miod@@, mpi@@
@
text
@/*	$OpenBSD: z8530var.h,v 1.8 2009/10/01 20:19:18 kettenis Exp $	*/
/*	$NetBSD: z8530var.h,v 1.5 2002/03/17 19:40:45 atatat Exp $	*/

/*
 * Copyright (c) 1994 Gordon W. Ross
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)zsvar.h	8.1 (Berkeley) 6/11/93
 */

#include <dev/ic/z8530sc.h>
#include <macppc/dev/dbdma.h>

/*
 * Clock source info structure, added here so xzs_chanstate works
 */
struct zsclksrc {
	long    clk;    /* clock rate, in MHz, present on signal line */
	int     flags;  /* Specifies how this source can be used
			   (RTxC divided, RTxC BRG, PCLK BRG, TRxC divided)
			   and also if the source is "external" and if it
			   is changeable (by an ioctl ex.). The
			   source usage flags are used by the tty
			   child. The other bits tell zsloadchannelregs
			   if it should call an md signal source
			   changing routine. ZSC_VARIABLE says if
			   an ioctl should be able to cahnge the
			   clock rate.*/
};
#define ZSC_PCLK        0x01
#define ZSC_RTXBRG      0x02
#define ZSC_RTXDIV      0x04
#define ZSC_TRXDIV      0x08
#define ZSC_VARIABLE    0x40
#define ZSC_EXTERN      0x80

#define ZSC_BRG         0x03
#define ZSC_DIV         0x0c


/*
 * These are the machine-dependent (extended) variants of
 * struct zs_chanstate and struct zsc_softc
 */
struct xzs_chanstate {
	/* machine-independent part (First!)*/
	struct zs_chanstate xzs_cs;
	/* machine-dependent extensions */
	int cs_hwflags;
	int	cs_chip;		/* type of chip */
	/* Clock source info... */
	int	cs_clock_count;		/* how many signal sources available */
	struct zsclksrc cs_clocks[4];	/* info on available signal sources */
	long	cs_cclk_flag;		/* flag for current clock source */
	long	cs_pclk_flag;		/* flag for pending clock source */
	int	cs_csource;		/* current source # */
	int	cs_psource;		/* pending source # */
};

struct zsc_softc {
	struct device		zsc_dev;	/* base device */
	struct zs_chanstate 	*zsc_cs[2];	/* channel A and B soft state */
	/* Machine-dependent part follows... */
	void			*zsc_softintr;
	struct xzs_chanstate	xzsc_xcs_store[2];
	dbdma_regmap_t		*zsc_txdmareg[2];
	dbdma_command_t		*zsc_txdmacmd[2];
	/* XXX tx only, for now */
};

/*
 * Functions to read and write individual registers in a channel.
 * The ZS chip requires a 1.6 uSec. recovery time between accesses,
 * and the Sun3 hardware does NOT take care of this for you.
 * MacII hardware DOES dake care of the delay for us. :-)
 * XXX - Then these should be inline functions! -gwr
 * Some clock-chirped macs lose serial ports. It could be that the
 * hardware delay is tied to the CPU speed, and that the minimum delay
 * no longer's respected. For them, ZS_DELAY might help.
 * XXX - no one seems to want to try and check this -wrs
 */

u_char zs_read_reg(struct zs_chanstate *cs, u_char reg);
u_char zs_read_csr(struct zs_chanstate *cs);
u_char zs_read_data(struct zs_chanstate *cs);

void  zs_write_reg(struct zs_chanstate *cs, u_char reg, u_char val);
void  zs_write_csr(struct zs_chanstate *cs, u_char val);
void  zs_write_data(struct zs_chanstate *cs, u_char val);

/* XXX - Could define splzs() here instead of in psl.h */
#define splzs spltty

/* Hook for MD ioctl support */
int	zsmdioctl(struct zs_chanstate *cs, u_long cmd, caddr_t data);
/* XXX - This is a bit gross... */
/*
#define ZS_MD_IOCTL(cs, cmd, data) zsmdioctl(cs, cmd, data)
*/

/* Callback for "external" clock sources */
void zsmd_setclock(struct zs_chanstate *cs);
#define ZS_MD_SETCLK(cs) zsmd_setclock(cs)

#define PCLK	(9600 * 384)	/* PCLK pin input clock rate */

/* The layout of this is hardware-dependent (padding, order). */
struct zschan {
	volatile u_char	zc_csr;		/* ctrl,status, and indirect access */
	u_char		zc_xxx0[15];
	volatile u_char	zc_data;	/* data */
	u_char		zc_xxx1[15];
};
void	zs_kgdb_init (void);

#ifndef ZSCCF_CHANNEL
#define ZSCCF_CHANNEL 0
#define ZSCCF_CHANNEL_DEFAULT -1
#endif
@


1.8
log
@Generic soft interrupts for macppc.  Tested by mk@@, deraadt@@
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530var.h,v 1.7 2008/06/13 00:31:09 krw Exp $	*/
d45 1
a45 1
#include <macppc/dev/z8530sc.h>
@


1.7
log
@Add some missing $OpenBSD$ tags.

ok drahn@@ gwk@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d95 2
a96 2
	struct	device zsc_dev;		/* required first: base device */
	struct	zs_chanstate *zsc_cs[2];	/* channel A and B soft state */
d98 4
a101 3
	struct xzs_chanstate xzsc_xcs_store[2];
	dbdma_regmap_t *zsc_txdmareg[2];
	dbdma_command_t *zsc_txdmacmd[2];
@


1.6
log
@loose is not lose. ok deraadt tdeval and a few more typos from jfb
@
text
@d1 1
@


1.5
log
@de-__P
@
text
@d109 1
a109 1
 * Some clock-chirped macs loose serial ports. It could be that the
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d115 3
a117 3
u_char zs_read_reg __P((struct zs_chanstate *cs, u_char reg));
u_char zs_read_csr __P((struct zs_chanstate *cs));
u_char zs_read_data __P((struct zs_chanstate *cs));
d119 3
a121 3
void  zs_write_reg __P((struct zs_chanstate *cs, u_char reg, u_char val));
void  zs_write_csr __P((struct zs_chanstate *cs, u_char val));
void  zs_write_data __P((struct zs_chanstate *cs, u_char val));
d127 1
a127 1
int	zsmdioctl __P((struct zs_chanstate *cs, u_long cmd, caddr_t data));
d134 1
a134 1
void zsmd_setclock  __P((struct zs_chanstate *cs));
@


1.3
log
@Serial console support for macppc. Serial console will work if the modem
has been replaced with a serial port adapter on any machine that has
a real serial port internally. This will also power on the internal modem
for keylargo based machines (tested on original PBG4) when the serial port
is open. ok miod@@
@
text
@d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 2
/*	$OpenBSD: z8530var.h,v 1.1 2001/09/26 22:45:43 mickey Exp $	*/
/*	$NetBSD: z8530var.h,v 1.1 1998/05/15 10:15:57 tsubai Exp $	*/
d48 1
a48 2
#include <dev/ic/z8530sc.h>
#include <machine/bus.h>
d99 3
a101 1
	struct	zs_chanstate zsc_cs[2];	/* channel A and B soft state */
d119 7
a125 7
u_char zs_read_reg(struct zs_chanstate *cs, u_char reg);
u_char zs_read_csr(struct zs_chanstate *cs);
u_char zs_read_data(struct zs_chanstate *cs);

void  zs_write_reg(struct zs_chanstate *cs, u_char reg, u_char val);
void  zs_write_csr(struct zs_chanstate *cs, u_char val);
void  zs_write_data(struct zs_chanstate *cs, u_char val);
d131 1
a131 1
int	zsmdioctl(struct zs_chanstate *cs, u_long cmd, caddr_t data);
d133 3
a135 1
#define ZS_MD_IOCTL zsmdioctl(cs, cmd, data)
d138 1
a138 1
void zsmd_setclock(struct zs_chanstate *cs);
d141 1
a141 1
#define	zsc_req_softint(zsc)	(void)(zsc)
d143 8
a150 1
void	zs_abort(void);
d152 4
a155 1
#define	ZSTTY_MAJOR	7
@


1.1
log
@zs driver, from different srcs, including netbsd/macppc and out mac68k/zs, etc.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d119 7
a125 7
u_char zs_read_reg __P((struct zs_chanstate *cs, u_char reg));
u_char zs_read_csr __P((struct zs_chanstate *cs));
u_char zs_read_data __P((struct zs_chanstate *cs));

void  zs_write_reg __P((struct zs_chanstate *cs, u_char reg, u_char val));
void  zs_write_csr __P((struct zs_chanstate *cs, u_char val));
void  zs_write_data __P((struct zs_chanstate *cs, u_char val));
d131 1
a131 1
int	zsmdioctl __P((struct zs_chanstate *cs, u_long cmd, caddr_t data));
d136 1
a136 1
void zsmd_setclock  __P((struct zs_chanstate *cs));
d141 1
a141 1
void	zs_abort __P((void));
@


1.1.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: z8530var.h,v 1.1 2001/09/26 22:45:43 mickey Exp $	*/
d119 7
a125 7
u_char zs_read_reg(struct zs_chanstate *cs, u_char reg);
u_char zs_read_csr(struct zs_chanstate *cs);
u_char zs_read_data(struct zs_chanstate *cs);

void  zs_write_reg(struct zs_chanstate *cs, u_char reg, u_char val);
void  zs_write_csr(struct zs_chanstate *cs, u_char val);
void  zs_write_data(struct zs_chanstate *cs, u_char val);
d131 1
a131 1
int	zsmdioctl(struct zs_chanstate *cs, u_long cmd, caddr_t data);
d136 1
a136 1
void zsmd_setclock(struct zs_chanstate *cs);
d141 1
a141 1
void	zs_abort(void);
@


1.1.6.2
log
@sync to -current
@
text
@d1 2
a2 1
/*	$NetBSD: z8530var.h,v 1.5 2002/03/17 19:40:45 atatat Exp $	*/
d49 2
a50 1
#include <macppc/dev/z8530sc.h>
d101 1
a101 3
	struct	zs_chanstate *zsc_cs[2];	/* channel A and B soft state */
	/* Machine-dependent part follows... */
	struct xzs_chanstate xzsc_xcs_store[2];
d119 7
a125 7
u_char zs_read_reg __P((struct zs_chanstate *cs, u_char reg));
u_char zs_read_csr __P((struct zs_chanstate *cs));
u_char zs_read_data __P((struct zs_chanstate *cs));

void  zs_write_reg __P((struct zs_chanstate *cs, u_char reg, u_char val));
void  zs_write_csr __P((struct zs_chanstate *cs, u_char val));
void  zs_write_data __P((struct zs_chanstate *cs, u_char val));
d131 1
a131 1
int	zsmdioctl __P((struct zs_chanstate *cs, u_long cmd, caddr_t data));
d133 1
a133 3
/*
#define ZS_MD_IOCTL(cs, cmd, data) zsmdioctl(cs, cmd, data)
*/
d136 1
a136 1
void zsmd_setclock  __P((struct zs_chanstate *cs));
d139 1
a139 1
#define PCLK	(9600 * 384)	/* PCLK pin input clock rate */
d141 1
a141 8
/* The layout of this is hardware-dependent (padding, order). */
struct zschan {
	volatile u_char	zc_csr;		/* ctrl,status, and indirect access */
	u_char		zc_xxx0[15];
	volatile u_char	zc_data;	/* data */
	u_char		zc_xxx1[15];
};
void	zs_kgdb_init (void);
d143 1
a143 4
#ifndef ZSCCF_CHANNEL
#define ZSCCF_CHANNEL 0
#define ZSCCF_CHANNEL_DEFAULT -1
#endif
@


1.1.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@@


1.1.4.2
log
@Merge in -current from about a week ago
@
text
@d119 7
a125 7
u_char zs_read_reg(struct zs_chanstate *cs, u_char reg);
u_char zs_read_csr(struct zs_chanstate *cs);
u_char zs_read_data(struct zs_chanstate *cs);

void  zs_write_reg(struct zs_chanstate *cs, u_char reg, u_char val);
void  zs_write_csr(struct zs_chanstate *cs, u_char val);
void  zs_write_data(struct zs_chanstate *cs, u_char val);
d131 1
a131 1
int	zsmdioctl(struct zs_chanstate *cs, u_long cmd, caddr_t data);
d136 1
a136 1
void zsmd_setclock(struct zs_chanstate *cs);
d141 1
a141 1
void	zs_abort(void);
@


1.1.4.3
log
@Sync the SMP branch with 3.3
@
text
@d1 2
a2 1
/*	$NetBSD: z8530var.h,v 1.5 2002/03/17 19:40:45 atatat Exp $	*/
d49 2
a50 1
#include <macppc/dev/z8530sc.h>
d101 1
a101 3
	struct	zs_chanstate *zsc_cs[2];	/* channel A and B soft state */
	/* Machine-dependent part follows... */
	struct xzs_chanstate xzsc_xcs_store[2];
d119 7
a125 7
u_char zs_read_reg __P((struct zs_chanstate *cs, u_char reg));
u_char zs_read_csr __P((struct zs_chanstate *cs));
u_char zs_read_data __P((struct zs_chanstate *cs));

void  zs_write_reg __P((struct zs_chanstate *cs, u_char reg, u_char val));
void  zs_write_csr __P((struct zs_chanstate *cs, u_char val));
void  zs_write_data __P((struct zs_chanstate *cs, u_char val));
d131 1
a131 1
int	zsmdioctl __P((struct zs_chanstate *cs, u_long cmd, caddr_t data));
d133 1
a133 3
/*
#define ZS_MD_IOCTL(cs, cmd, data) zsmdioctl(cs, cmd, data)
*/
d136 1
a136 1
void zsmd_setclock  __P((struct zs_chanstate *cs));
d139 1
a139 1
#define PCLK	(9600 * 384)	/* PCLK pin input clock rate */
d141 1
a141 8
/* The layout of this is hardware-dependent (padding, order). */
struct zschan {
	volatile u_char	zc_csr;		/* ctrl,status, and indirect access */
	u_char		zc_xxx0[15];
	volatile u_char	zc_data;	/* data */
	u_char		zc_xxx1[15];
};
void	zs_kgdb_init (void);
d143 1
a143 4
#ifndef ZSCCF_CHANNEL
#define ZSCCF_CHANNEL 0
#define ZSCCF_CHANNEL_DEFAULT -1
#endif
@


1.1.4.4
log
@Sync SMP branch to -current
@
text
@d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


