head	1.31;
access;
symbols
	OPENBSD_6_0:1.31.0.4
	OPENBSD_6_0_BASE:1.31
	OPENBSD_5_9:1.31.0.2
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.30.0.6
	OPENBSD_5_8_BASE:1.30
	OPENBSD_5_7:1.30.0.2
	OPENBSD_5_7_BASE:1.30
	OPENBSD_5_6:1.27.0.4
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.26.0.4
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.23.0.10
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.8
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.6
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.4
	OPENBSD_5_0:1.23.0.2
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.21.0.2
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.20.0.10
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.6
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.8
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.4
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.2
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.19.0.4
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.2
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.17.0.2
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.16.0.4
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.2
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.6
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.11
	UBC:1.6.0.2
	UBC_BASE:1.6
	SMP:1.3.0.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.31
date	2015.11.01.20.10.00;	author miod;	state Exp;
branches;
next	1.30;
commitid	sHllVPiKPJBfwmTJ;

1.30
date	2015.02.10.10.02.55;	author tedu;	state Exp;
branches;
next	1.29;
commitid	X8GpdpDRNqUOBsMT;

1.29
date	2014.10.09.04.01.27;	author tedu;	state Exp;
branches;
next	1.28;
commitid	wAdRwhtUH36R0JxT;

1.28
date	2014.10.09.03.59.59;	author tedu;	state Exp;
branches;
next	1.27;
commitid	I0KLtD9aVxAdm6aW;

1.27
date	2014.06.02.19.32.10;	author brad;	state Exp;
branches;
next	1.26;
commitid	ExBRxXzuxKlwnkQv;

1.26
date	2014.01.30.18.16.41;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2014.01.24.05.21.19;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2014.01.23.22.06.29;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2011.05.30.22.25.21;	author oga;	state Exp;
branches;
next	1.22;

1.22
date	2011.03.03.21.38.49;	author ajacoutot;	state Exp;
branches;
next	1.21;

1.21
date	2010.12.15.05.30.19;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2008.07.18.16.40.17;	author kurt;	state Exp;
branches;
next	1.19;

1.19
date	2007.06.14.14.27.46;	author drahn;	state Exp;
branches;
next	1.18;

1.18
date	2007.05.27.15.46.02;	author drahn;	state Exp;
branches;
next	1.17;

1.17
date	2006.09.18.16.57.23;	author marco;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.17.07.31.26;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2005.04.11.15.13.01;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.11.28.01.36.39;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2004.06.24.22.35.56;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.23.21.20.54;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.09.15.09.01.58;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.09.15.02.02.43;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.13.18.27.36;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.17.22.59.52;	author maja;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.07.05.31.27;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.05.16.25.44;	author art;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2001.11.30.17.37.43;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.05.22.16.52;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2001.09.22.18.00.09;	author miod;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.09.05.15.07.06;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.01.15.49.06;	author drahn;	state Exp;
branches;
next	;

1.3.4.1
date	2001.10.31.03.01.16;	author nate;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.11.13.21.00.53;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2001.12.05.00.39.11;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2002.03.06.01.06.11;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2002.03.28.10.36.01;	author niklas;	state Exp;
branches;
next	1.3.4.6;

1.3.4.6
date	2004.02.19.10.49.03;	author niklas;	state Exp;
branches;
next	;

1.6.2.1
date	2002.01.31.22.55.14;	author niklas;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2002.06.11.03.36.34;	author art;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2002.10.29.00.28.06;	author art;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Remove the definition of USRTEXT. It has no relevance outside of the non-PIE
a.out world.
ok deraadt@@ kettenis@@
@
text
@/*	$OpenBSD: vmparam.h,v 1.30 2015/02/10 10:02:55 tedu Exp $	*/
/*	$NetBSD: vmparam.h,v 1.1 1996/09/30 16:34:38 ws Exp $	*/

/*-
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef MACHINE_VMPARAM_H
#define MACHINE_VMPARAM_H

#define	USRSTACK	VM_MAXUSER_ADDRESS

#ifndef	MAXTSIZ
#define	MAXTSIZ		(64*1024*1024)		/* max text size */
#endif

#ifndef	DFLDSIZ
#define	DFLDSIZ		(64*1024*1024)		/* default data size */
#endif

#ifndef	MAXDSIZ
#define	MAXDSIZ		(2UL*1024*1024*1024)	/* max data size */
#endif

#ifndef BRKSIZ
#define	BRKSIZ		MAXDSIZ			/* heap gap size */
#endif

#ifndef	DFLSSIZ
#define	DFLSSIZ		(2*1024*1024)		/* default stack size */
#endif

#ifndef	MAXSSIZ
#define	MAXSSIZ		(32*1024*1024)		/* max stack size */
#endif

#define STACKGAP_RANDOM	256*1024

/*
 * Size of shared memory map
 */
#ifndef	SHMMAXPGS
#define	SHMMAXPGS       8192			/* 32mb */
#endif

/*
 * Size of User Raw I/O map
 */
#define	USRIOSIZE	1024

/*
 * Would like to have MAX addresses = 0, but this doesn't (currently) work
 */
#define	VM_MIN_ADDRESS		((vaddr_t)PAGE_SIZE)
#define	VM_MAXUSER_ADDRESS	((vaddr_t)0xfffff000)
#define	VM_MAX_ADDRESS		VM_MAXUSER_ADDRESS
#define	VM_MIN_KERNEL_ADDRESS	((vaddr_t)(PPC_KERNEL_SR << ADDR_SR_SHIFT))

/* map PIE into approximately the first quarter of user va space */
#define VM_PIE_MIN_ADDR		PAGE_SIZE
#define VM_PIE_MAX_ADDR		0x40000000

/* ppc_kvm_stolen is so that vm space can be stolen before vm is fully
 * initialized.
 */
extern vaddr_t ppc_kvm_stolen;
#define VM_KERN_ADDRESS_SIZE  (PPC_SEGMENT_LENGTH - (32 * 1024 * 1024))
#define	VM_MAX_KERNEL_ADDRESS	(VM_MIN_KERNEL_ADDRESS + VM_KERN_ADDRESS_SIZE)

#define	VM_PHYS_SIZE		(USRIOSIZE * PAGE_SIZE)

#define	VM_PHYSSEG_MAX	32	/* actually we could have this many segments */
#define	VM_PHYSSEG_STRAT	VM_PSTRAT_BSEARCH
#define	VM_PHYSSEG_NOADD	/* can't add RAM after vm_mem_init */

#endif
@


1.30
log
@increase min address to page size for all remaining min == 0 systems.
not necessary, but consistent with other platforms. ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.29 2014/10/09 04:01:27 tedu Exp $	*/
a37 1
#define	USRTEXT		PAGE_SIZE
@


1.29
log
@revert unintentional commit unrelated to LKM
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.28 2014/10/09 03:59:59 tedu Exp $	*/
d82 1
a82 1
#define	VM_MIN_ADDRESS		((vaddr_t)0)
@


1.28
log
@remove LKM devices
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.27 2014/06/02 19:32:10 brad Exp $	*/
d82 1
a82 1
#define	VM_MIN_ADDRESS		((vaddr_t)PAGE_SIZE)
@


1.27
log
@Bump DFLSSIZ to 2MB to match most of the other platforms.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.26 2014/01/30 18:16:41 miod Exp $	*/
d82 1
a82 1
#define	VM_MIN_ADDRESS		((vaddr_t)0)
@


1.26
log
@Move declaration of struct vm_page_md from <machine/vmparam.h> to
<machine/pmap.h> where it belongs, and compensate in <uvm/uvm_extern.h>
by including <uvm/uvm_pmap.h> before <uvm/uvm_page.h>. Tested on all
MACHINE_ARCH but amd64 and i386 (and hppa64).
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.25 2014/01/24 05:21:19 miod Exp $	*/
d58 1
a58 1
#define	DFLSSIZ		(1*1024*1024)		/* default stack size */
@


1.25
log
@Do not protect struct vm_page_md with defined(_KERNEL), for userland uvm
grovellers need to know it to be able to get the right size for struct
vm_page.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.24 2014/01/23 22:06:29 miod Exp $	*/
a102 9

struct pv_entry;
struct vm_page_md {
	LIST_HEAD(,pte_desc) pv_list;
};

#define VM_MDPAGE_INIT(pg) do {                 \
	LIST_INIT(&((pg)->mdpage.pv_list)); 	\
} while (0)
@


1.24
log
@unifdef -D__HAVE_VM_PAGE_MD - no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.23 2011/05/30 22:25:21 oga Exp $	*/
a103 2
#ifdef _KERNEL

a111 3

#endif

@


1.23
log
@Remove the freelist member from vm_physseg

The new world order of pmemrange makes this data completely redundant
(being dealt with by the pmemrange constraints instead). Remove all code
that messes with the freelist.

While touching every caller of uvm_page_physload() anyway, add the flags
argument to all callers (all but one is 0 and that one already used
PHYSLOAD_DEVICE) and remove the macro magic to allow callers to continue
without it.

Should shrink the code a bit, as well.

matthew@@ pointed out some mistakes i'd made.
``freelist death, I like. Ok.' ariane@@
`I agree with the general direction, go ahead and i'll fix any fallout
shortly'' miod@@ (68k 88k and vax i could not check would build)
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.22 2011/03/03 21:38:49 ajacoutot Exp $	*/
a105 1
#define __HAVE_VM_PAGE_MD
@


1.22
log
@Crank MAXDSIZ up to 2G on macppc and socppc.

ok miod@@ drahn@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.21 2010/12/15 05:30:19 tedu Exp $	*/
a102 3

#define VM_NFREELIST		1
#define VM_FREELIST_DEFAULT	0
@


1.21
log
@oops, i forgot to check in the BRKSIZ define in uvm, but deraadt thinks
its better as a per arch MD define anyway.  all default to MAXDSIZ as before.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.20 2008/07/18 16:40:17 kurt Exp $	*/
d50 1
a50 1
#define	MAXDSIZ		(512*1024*1024)		/* max data size */
@


1.20
log
@Add new uvm function called uvm_map_pie() which takes align as a
parameter and returns an aligned random load address for position
independent executables to use. This also adds three new vmparam.h
defines to specify the maximum address, minimum address and minimum
allowed alignment for uvm_map_pie() to use. The PIE address range
for i386 was carefully selected to work well within the i386 W^X
framework.

With much help and feedback from weingart@@.
okay weingart@@, miod@@, kettenis@@, drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.19 2007/06/14 14:27:46 drahn Exp $	*/
d51 4
@


1.19
log
@When macppc was switched to __HAVE_VM_PAGE_MD, data structures were incorrectly
exposed to userland, protect with _KERNEL. Tested by Antoine Jacoutot
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.18 2007/05/27 15:46:02 drahn Exp $	*/
d82 4
@


1.18
log
@Move powerpc to vm_page_md, 'throw it in' kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.17 2006/09/18 16:57:23 marco Exp $	*/
d99 2
d110 2
@


1.17
log
@Extend the .text and .data segments to 64MB.  This allows programs with
large .text segments, like xmame, to run.

ok drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.16 2005/12/17 07:31:26 miod Exp $	*/
a91 7
#define __HAVE_PMAP_PHYSSEG
struct pmap_physseg {
	struct pted_pv_head *pvent;
	char *attrs;
	/* NULL ??? */
};

d98 11
@


1.16
log
@Get rid of deprecated vm_{offset,size}_t types for good, use {p,v}{addr,size}_t
instead; looked at millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.15 2005/04/11 15:13:01 deraadt Exp $	*/
d42 1
a42 1
#define	MAXTSIZ		(16*1024*1024)		/* max text size */
d46 1
a46 1
#define	DFLDSIZ		(32*1024*1024)		/* default data size */
@


1.15
log
@use MD #define to choose stackgap size per-architecture.  on sparc, special
case sun4c/sun4 -- because address space is more constrained
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.14 2004/11/28 01:36:39 mickey Exp $	*/
d78 2
a79 2
#define	VM_MIN_ADDRESS		((vm_offset_t)0)
#define	VM_MAXUSER_ADDRESS	((vm_offset_t)0xfffff000)
d81 1
a81 1
#define	VM_MIN_KERNEL_ADDRESS	((vm_offset_t)(PPC_KERNEL_SR << ADDR_SR_SHIFT))
d86 1
a86 1
extern vm_offset_t ppc_kvm_stolen;
@


1.14
log
@MAXSLP is not really an MD-configurable define so move it to param.h; miod@@ testing
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.13 2004/06/24 22:35:56 drahn Exp $	*/
d60 2
@


1.13
log
@Do a better job at containing powerpc specific #defines to PPC_...
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 2004/01/23 21:20:54 millert Exp $	*/
a71 11

/*
 * The time for a process to be blocked before being very swappable.
 * This is a number of seconds which the system takes as being a non-trivial
 * amount of real time.  You probably shouldn't change this;
 * it is used in subtle ways (fractions and multiples of it are, that is, like
 * half of a ``long time'', almost a long time, etc.)
 * It is related to human patience and other factors which don't really
 * change over time.
 */
#define	MAXSLP 		20
@


1.12
log
@Crank SHMMAXPGS to 32mb; deraadt@@ OK for all, drahn@@ OK for macppc + pegasos
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 2002/09/15 09:01:58 deraadt Exp $	*/
d90 1
a90 1
#define	VM_MIN_KERNEL_ADDRESS	((vm_offset_t)(KERNEL_SR << ADDR_SR_SHIFT))
d96 1
a96 1
#define VM_KERN_ADDRESS_SIZE  (SEGMENT_LENGTH - (32 * 1024 * 1024))
@


1.11
log
@backout premature
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9 2002/03/13 18:27:36 drahn Exp $	*/
d65 1
a65 1
#define	SHMMAXPGS       4096
@


1.10
log
@KNF
@
text
@d65 1
a65 1
#define	SHMMAXPGS	4096
d82 1
a82 1
#define	MAXSLP		20
@


1.9
log
@Complete rewrite of the powerpc pmap handling, Instead of keeping
the spill list for each PTEG, the V->P translations are stored in
trees for each pmap. All valid kernel mappings are preallocated
in 1-1 memory so that tlb spill/loads for kernel accesses can be
looked up while physical, user mappings are not guaranteed to
be 1-1 mapped, thus the kernel must go virtual to look up user
mappings. While this is more expensive, the tree search is much
lower cost than the long linked list search. Also on each pmap_remove()
it was necessary to search the linked lists for each possible mapping,
now it just looks up the entry in the tree.
This change gives a 25-36% speedup in 'make build' time. What was
around 2:50 is now around 1:55 on a 733MHz G4.

This change causes a likely existing bug to appear quite often,
it deals with the segment register invalidation in kernel mode.
Because of that problem, currently this change limits the physical
memory used to 256MB. This limitation will be fixed soon, it is not
an error in the pmap code.

 * Effort sponsored in part by the Defense Advanced Research Projects
 * Agency (DARPA) and Air Force Research Laboratory, Air Force
 * Materiel Command, USAF, under agreement number F30602-01-2-0537.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8 2002/02/17 22:59:52 maja Exp $	*/
d65 1
a65 1
#define	SHMMAXPGS       4096
d82 1
a82 1
#define	MAXSLP 		20
@


1.8
log
@Patch from Daniel Lucq <daniel@@lucq.org>

The patch allows you to change the value of NMBCLUSTERS, BUFCACHEPERCENT
and NKMEMPAGES using the config command, instead of recompiling the kernel.

This is the kernel part of the patch. I have compiled it on i386, sparc64,
alpha and macppc. -moj ok art@@ maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.7 2002/01/07 05:31:27 drahn Exp $	*/
d90 1
a90 1
#define	VM_MIN_KERNEL_ADDRESS	((vm_offset_t)(KERNEL_SR << ADDR_SR_SHFT))
d92 1
a92 1
/* ppc_kvm_size is so that vm space can be stolen before vm is fully
d95 1
a95 1
#define VM_KERN_ADDR_SIZE_DEF SEGMENT_LENGTH
d97 1
a97 2
#define	VM_MAX_KERNEL_ADDRESS	((vm_offset_t)((KERNEL_SR << ADDR_SR_SHFT) \
						+ VM_KERN_ADDRESS_SIZE))
d103 1
a103 1
	struct pv_entry *pvent;
@


1.7
log
@Paranoia on my part, do not let the condition exist where kvm space could
be claimed by the pre kvm init stealing process and kvm.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6 2001/12/05 16:25:44 art Exp $	*/
a99 1
#define	VM_MBUF_SIZE		(NMBCLUSTERS * PAGE_SIZE)
@


1.6
log
@VM_KMEM_SIZE no longer needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 2001/11/30 17:37:43 art Exp $	*/
d96 1
a96 2
extern vm_offset_t ppc_kvm_size;
#define VM_KERN_ADDRESS_SIZE  (ppc_kvm_size)
d98 1
a98 1
						+ SEGMENT_LENGTH))
@


1.6.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.7 2002/01/07 05:31:27 drahn Exp $	*/
d96 2
a97 1
#define VM_KERN_ADDRESS_SIZE  (SEGMENT_LENGTH - (32 * 1024 * 1024))
d99 1
a99 1
						+ VM_KERN_ADDRESS_SIZE))
@


1.6.2.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6.2.1 2002/01/31 22:55:14 niklas Exp $	*/
d90 1
a90 1
#define	VM_MIN_KERNEL_ADDRESS	((vm_offset_t)(KERNEL_SR << ADDR_SR_SHIFT))
d92 1
a92 1
/* ppc_kvm_stolen is so that vm space can be stolen before vm is fully
d95 1
a95 1
extern vm_offset_t ppc_kvm_stolen;
d97 2
a98 1
#define	VM_MAX_KERNEL_ADDRESS	(VM_MIN_KERNEL_ADDRESS + VM_KERN_ADDRESS_SIZE)
d100 1
d105 1
a105 1
	struct pted_pv_head *pvent;
@


1.6.2.3
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6.2.2 2002/06/11 03:36:34 art Exp $	*/
@


1.5
log
@Now that pmaps can have vm_page_md, make pmap_physseg optional.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4 2001/11/05 22:16:52 drahn Exp $	*/
a100 1
#define	VM_KMEM_SIZE		(NKMEMCLUSTERS * PAGE_SIZE)
@


1.4
log
@Raise the shared memory size to 16MB from 4MB. 4MB is too small for current
memory machines and current program demands.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3 2001/09/22 18:00:09 miod Exp $	*/
d105 1
@


1.3
log
@Remove more old, dusty, unused defines.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.2 2001/09/05 15:07:06 drahn Exp $	*/
d65 1
a65 1
#define	SHMMAXPGS	1024
@


1.3.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3.4.2
log
@Merge in -current
@
text
@d65 1
a65 1
#define	SHMMAXPGS       4096
@


1.3.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3.4.2 2001/11/13 21:00:53 niklas Exp $	*/
a104 1
#define __HAVE_PMAP_PHYSSEG
@


1.3.4.4
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d96 2
a97 1
#define VM_KERN_ADDRESS_SIZE  (SEGMENT_LENGTH - (32 * 1024 * 1024))
d99 1
a99 1
						+ VM_KERN_ADDRESS_SIZE))
d101 2
@


1.3.4.5
log
@Merge in -current from about a week ago
@
text
@d90 1
a90 1
#define	VM_MIN_KERNEL_ADDRESS	((vm_offset_t)(KERNEL_SR << ADDR_SR_SHIFT))
d92 1
a92 1
/* ppc_kvm_stolen is so that vm space can be stolen before vm is fully
d95 1
a95 1
extern vm_offset_t ppc_kvm_stolen;
d97 2
a98 1
#define	VM_MAX_KERNEL_ADDRESS	(VM_MIN_KERNEL_ADDRESS + VM_KERN_ADDRESS_SIZE)
d104 1
a104 1
	struct pted_pv_head *pvent;
@


1.3.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d65 1
a65 1
#define	SHMMAXPGS       8192			/* 32mb */
@


1.2
log
@kvm space is limited by by pmap_virtual_space, Do not play with the
kvm min and max addresses.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.1 2001/09/01 15:49:06 drahn Exp $	*/
a59 6

/*
 * Min & Max swap space allocation chunks
 */
#define	DMMIN		32
#define	DMMAX		4096
@


1.1
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/include to macppc/include
Some files were not "moved" but wrapper files were created which include
the powerpc/include version.

Several of the powerpc/include files where changed to reflect that they
are POWERPC_* not MACHINE_*.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.10 2001/06/27 06:19:53 art Exp $	*/
d105 1
a105 1
						+ VM_KERN_ADDRESS_SIZE))
@

