head	1.7;
access;
symbols
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.16
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.14
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.12
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.10
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.06.26.11.15.32;	author dlg;	state dead;
branches;
next	1.6;
commitid	mhhlde0dPvyGCPxF;

1.6
date	2015.04.07.09.52.27;	author mpi;	state Exp;
branches;
next	1.5;
commitid	4uBA9LYboE7jMxwH;

1.5
date	2015.02.11.07.05.39;	author dlg;	state Exp;
branches;
next	1.4;
commitid	JTpbkhDknrIuy9pn;

1.4
date	2014.09.19.11.40.16;	author mpi;	state Exp;
branches;
next	1.3;
commitid	u72DqVBTrLxatAIp;

1.3
date	2014.03.29.18.09.30;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2013.12.05.01.28.45;	author uebayasi;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.07.19.29.33;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@move the ppc mplock implementation from macppc to powerpc.

ok mpi@@
@
text
@/*	$OpenBSD: lock_machdep.c,v 1.6 2015/04/07 09:52:27 mpi Exp $	*/

/*
 * Copyright (c) 2007 Artur Grabowski <art@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */


#include <sys/param.h>
#include <sys/systm.h>
#include <sys/atomic.h>

#include <machine/lock.h>
#include <machine/psl.h>

#include <ddb/db_output.h>

void
__mp_lock_init(struct __mp_lock *lock)
{
	lock->mpl_cpu = NULL;
	lock->mpl_count = 0;
}

#if defined(MP_LOCKDEBUG)
#ifndef DDB
#error "MP_LOCKDEBUG requires DDB"
#endif

/* CPU-dependent timing, needs this to be settable from ddb. */
extern int __mp_lock_spinout;
#endif

#define SPINLOCK_SPIN_HOOK	/**/

static __inline void
__mp_lock_spin(struct __mp_lock *mpl)
{
#ifndef MP_LOCKDEBUG
	while (mpl->mpl_count != 0)
		SPINLOCK_SPIN_HOOK;
#else
	int ticks = __mp_lock_spinout;

	while (mpl->mpl_count != 0 && --ticks > 0)
		SPINLOCK_SPIN_HOOK;

	if (ticks == 0) {
		db_printf("__mp_lock(%p): lock spun out", mpl);
		Debugger();
	}
#endif
}

void
__mp_lock(struct __mp_lock *mpl)
{
	/*
	 * Please notice that mpl_count gets incremented twice for the
	 * first lock. This is on purpose. The way we release the lock
	 * in mp_unlock is to decrement the mpl_count and then check if
	 * the lock should be released. Since mpl_count is what we're
	 * spinning on, decrementing it in mpl_unlock to 0 means that
	 * we can't clear mpl_cpu, because we're no longer holding the
	 * lock. In theory mpl_cpu doesn't need to be cleared, but it's
	 * safer to clear it and besides, setting mpl_count to 2 on the
	 * first lock makes most of this code much simpler.
	 */

	while (1) {
		int s;

		s = ppc_intr_disable();
		if (__cpu_cas(&mpl->mpl_count, 0, 1) == 0) {
			membar_enter();
			mpl->mpl_cpu = curcpu();
		}

		if (mpl->mpl_cpu == curcpu()) {
			mpl->mpl_count++;
			ppc_intr_enable(s);
			break;
		}
		ppc_intr_enable(s);

		__mp_lock_spin(mpl);
	}
}

void
__mp_unlock(struct __mp_lock *mpl)
{
	int s;

#ifdef MP_LOCKDEBUG
	if (mpl->mpl_cpu != curcpu()) {
		db_printf("__mp_unlock(%p): not held lock\n", mpl);
		Debugger();
	}
#endif

	s = ppc_intr_disable();
	if (--mpl->mpl_count == 1) {
		mpl->mpl_cpu = NULL;
		membar_exit();
		mpl->mpl_count = 0;
	}
	ppc_intr_enable(s);
}

int
__mp_release_all(struct __mp_lock *mpl)
{
	int rv = mpl->mpl_count - 1;
	int s;

#ifdef MP_LOCKDEBUG
	if (mpl->mpl_cpu != curcpu()) {
		db_printf("__mp_release_all(%p): not held lock\n", mpl);
		Debugger();
	}
#endif

	s = ppc_intr_disable();
	mpl->mpl_cpu = NULL;
	membar_exit();
	mpl->mpl_count = 0;
	ppc_intr_enable(s);

	return (rv);
}

int
__mp_release_all_but_one(struct __mp_lock *mpl)
{
	int rv = mpl->mpl_count - 2;

#ifdef MP_LOCKDEBUG
	if (mpl->mpl_cpu != curcpu()) {
		db_printf("__mp_release_all_but_one(%p): not held lock\n", mpl);
		Debugger();
	}
#endif

	mpl->mpl_count = 2;

	return (rv);
}

void
__mp_acquire_count(struct __mp_lock *mpl, int count)
{
	while (count--)
		__mp_lock(mpl);
}

int
__mp_lock_held(struct __mp_lock *mpl)
{
	return mpl->mpl_cpu == curcpu();
}
@


1.6
log
@Use appropriate memory barriers.

ok kettenis@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.5 2015/02/11 07:05:39 dlg Exp $	*/
@


1.5
log
@no md code wants lockmgr locks, so no md code needs to include sys/lock.h

with and ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.4 2014/09/19 11:40:16 mpi Exp $	*/
d22 1
a23 1
#include <machine/atomic.h>
d86 1
a86 1
			__asm volatile("eieio" ::: "memory");
d116 1
a116 1
		__asm volatile("eieio" ::: "memory");
d137 1
a137 1
	__asm volatile("eieio" ::: "memory");
@


1.4
log
@Use correct printf format when MP_LOCKDEBUG is defined.
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.3 2014/03/29 18:09:30 guenther Exp $	*/
a20 1
#include <sys/lock.h>
@


1.3
log
@It's been a quarter century: we can assume volatile is present with that name.

ok dlg@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.2 2013/12/05 01:28:45 uebayasi Exp $	*/
d61 1
a61 1
		db_printf("__mp_lock(0x%x): lock spun out", mpl);
@


1.2
log
@Correct spin timeout detection in __mp_lock debug code.

OK pirofti@@ krw@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d87 1
a87 1
			__asm __volatile("eieio" ::: "memory");
d117 1
a117 1
		__asm __volatile("eieio" ::: "memory");
d138 1
a138 1
	__asm __volatile("eieio" ::: "memory");
@


1.1
log
@Sync mplock code with the current paradigm used in all other MP platforms.
macppc was left unchanged by mistake.
@
text
@d1 1
a1 1
/*	$OpenBSD: lock_machdep.c,v 1.1 2007/11/27 23:29:57 kettenis Exp $	*/
d57 1
a57 1
	while (mpl->mpl_count != 0 && ticks-- > 0)
@

