head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.48
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.46
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.42
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.38
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.40
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.32
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.36
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.34
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.30
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.28
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.26
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.24
	OPENBSD_5_0:1.9.0.22
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.20
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.18
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.14
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.16
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.12
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2006.03.09.23.06.19;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.07.22.45.59;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.16.05.03.22;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.15.17.50.16;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.15.18.19.52;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.36;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.03.19.28.37;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.05.22.32.38;	author deraadt;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.09.01.15.44.20;	author drahn;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.01.16;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.06.01.06.11;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2002.03.28.10.36.01;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2004.02.19.10.49.04;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2002.01.31.22.55.14;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.06.11.03.36.34;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Do not include <lib/libkern/libkern.h> explicitely, get it via <sys/systm.h>.
@
text
@/*	$OpenBSD: opendev.c,v 1.8 2004/01/07 22:45:59 brad Exp $	*/
/*	$NetBSD: openfirm.c,v 1.1 1996/09/30 16:34:52 ws Exp $	*/

/*
 * Copyright (C) 1995, 1996 Wolfgang Solfrank.
 * Copyright (C) 1995, 1996 TooLs GmbH.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by TooLs GmbH.
 * 4. The name of TooLs GmbH may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY TOOLS GMBH ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL TOOLS GMBH BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/stdarg.h>
#include <machine/psl.h>

#include <dev/ofw/openfirm.h>

extern void ofw_stack(void);
extern void ofbcopy(const void *, void *, size_t);

int
OF_instance_to_package(int ihandle)
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int ihandle;
		int phandle;
	} args = {
		"instance-to-package",
		1,
		1,
	};

	ofw_stack();
	args.ihandle = ihandle;
	if (openfirmware(&args) == -1)
		return -1;
	return args.phandle;
}

int
OF_package_to_path(int phandle, char *buf, int buflen)
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int phandle;
		char *buf;
		int buflen;
		int length;
	} args = {
		"package-to-path",
		3,
		1,
	};

	ofw_stack();
	if (buflen > PAGE_SIZE)
		return -1;
	args.phandle = phandle;
	args.buf = OF_buf;
	args.buflen = buflen;
	if (openfirmware(&args) < 0)
		return -1;
	if (args.length > 0)
		ofbcopy(OF_buf, buf, args.length);
	return args.length;
}


int
OF_call_method(char *method, int ihandle, int nargs, int nreturns, ...)
{
	va_list ap;
	static struct {
		char *name;
		int nargs;
		int nreturns;
		char *method;
		int ihandle;
		int args_n_results[12];
	} args = {
		"call-method",
		2,
		1,
	};
	int *ip, n;

	if (nargs > 6)
		return -1;
	args.nargs = nargs + 2;
	args.nreturns = nreturns + 1;
	args.method = method;
	args.ihandle = ihandle;
	va_start(ap, nreturns);
	for (ip = args.args_n_results + (n = nargs); --n >= 0;)
		*--ip = va_arg(ap, int);
	ofw_stack();
	if (openfirmware(&args) == -1) {
		va_end(ap);
		return -1;
	}
	if (args.args_n_results[nargs]) {
		va_end(ap);
		return args.args_n_results[nargs];
	}
	for (ip = args.args_n_results + nargs + (n = args.nreturns); --n > 0;)
		*va_arg(ap, int *) = *--ip;
	va_end(ap);
	return 0;
}
int
OF_call_method_1(char *method, int ihandle, int nargs, ...)
{
	va_list ap;
	static struct {
		char *name;
		int nargs;
		int nreturns;
		char *method;
		int ihandle;
		int args_n_results[8];
	} args = {
		"call-method",
		2,
		2,
	};
	int *ip, n;

	if (nargs > 6)
		return -1;
	args.nargs = nargs + 2;
	args.method = method;
	args.ihandle = ihandle;
	va_start(ap, nargs);
	for (ip = args.args_n_results + (n = nargs); --n >= 0;)
		*--ip = va_arg(ap, int);
	va_end(ap);
	ofw_stack();
	if (openfirmware(&args) == -1)
		return -1;
	if (args.args_n_results[nargs])
		return -1;
	return args.args_n_results[nargs + 1];
}

int
OF_open(char *dname)
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		char *dname;
		int handle;
	} args = {
		"open",
		1,
		1,
	};
	int l;

	ofw_stack();
	if ((l = strlen(dname)) >= PAGE_SIZE)
		return -1;
	ofbcopy(dname, OF_buf, l + 1);
	args.dname = OF_buf;
	if (openfirmware(&args) == -1)
		return -1;
	return args.handle;
}

void
OF_close(int handle)
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int handle;
	} args = {
		"close",
		1,
		0,
	};

	ofw_stack();
	args.handle = handle;
	openfirmware(&args);
}

/*
 * This assumes that character devices don't read in multiples of PAGE_SIZE.
 */
int
OF_read(int handle, void *addr, int len)
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int ihandle;
		void *addr;
		int len;
		int actual;
	} args = {
		"read",
		3,
		1,
	};
	int l, act = 0;

	ofw_stack();
	args.ihandle = handle;
	args.addr = OF_buf;
	for (; len > 0; len -= l, addr += l) {
		l = min(PAGE_SIZE, len);
		args.len = l;
		if (openfirmware(&args) == -1)
			return -1;
		if (args.actual > 0) {
			ofbcopy(OF_buf, addr, args.actual);
			act += args.actual;
		}
		if (args.actual < l) {
			if (act)
				return act;
			else
				return args.actual;
		}
	}
	return act;
}

int
OF_write(int handle, void *addr, int len)
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int ihandle;
		void *addr;
		int len;
		int actual;
	} args = {
		"write",
		3,
		1,
	};
	int l, act = 0;

	ofw_stack();
	args.ihandle = handle;
	args.addr = OF_buf;
	for (; len > 0; len -= l, addr += l) {
		l = min(PAGE_SIZE, len);
		ofbcopy(addr, OF_buf, l);
		args.len = l;
		if (openfirmware(&args) == -1)
			return -1;
		l = args.actual;
		act += l;
	}
	return act;
}

int
OF_seek(int handle, u_quad_t pos)
{
	static struct {
		char *name;
		int nargs;
		int nreturns;
		int handle;
		int poshi;
		int poslo;
		int status;
	} args = {
		"seek",
		3,
		1,
	};

	ofw_stack();
	args.handle = handle;
	args.poshi = (int)(pos >> 32);
	args.poslo = (int)pos;
	if (openfirmware(&args) == -1)
		return -1;
	return args.status;
}
@


1.8
log
@machine/stdarg.h -> sys/stdarg.h

ok drahn@@ espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.7 2003/10/16 05:03:22 deraadt Exp $	*/
d35 1
a39 1
#include <lib/libkern/libkern.h>
@


1.7
log
@more white
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.6 2003/10/15 17:50:16 drahn Exp $	*/
d35 1
a35 1

a36 1
#include <machine/stdarg.h>
@


1.6
log
@The ANSI/KNF trail continues. No binary differences.
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.5 2002/03/15 18:19:52 millert Exp $	*/
d83 1
a83 1
	
d115 1
a115 1
	
d156 1
a156 1
	
d189 1
a189 1
	
d219 1
a219 1
/* 
d239 1
a239 1
	
a256 1
			
d279 1
a279 1
	
@


1.5
log
@Kill #if __STDC__ used to do K&R vs. ANSI varargs/stdarg; just do things
the ANSI way.
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.4 2002/03/14 01:26:36 millert Exp $	*/
d46 1
a46 2
OF_instance_to_package(ihandle)
	int ihandle;
d68 1
a68 4
OF_package_to_path(phandle, buf, buflen)
	int phandle;
	char *buf;
	int buflen;
d175 1
a175 2
OF_open(dname)
	char *dname;
d201 1
a201 2
OF_close(handle)
	int handle;
d223 1
a223 4
OF_read(handle, addr, len)
	int handle;
	void *addr;
	int len;
d264 1
a264 4
OF_write(handle, addr, len)
	int handle;
	void *addr;
	int len;
d297 1
a297 3
OF_seek(handle, pos)
	int handle;
	u_quad_t pos;
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.3 2002/01/03 19:28:37 jason Exp $	*/
a102 1
#ifdef	__STDC__
a103 8
#else
OF_call_method(method, ihandle, nargs, nreturns, va_alist)
	char *method;
	int ihandle;
	int nargs;
	int nreturns;
	va_dcl
#endif
a143 1
#ifdef	__STDC__
a144 7
#else
OF_call_method_1(method, ihandle, nargs, va_alist)
	char *method;
	int ihandle;
	int nargs;
	va_dcl
#endif
@


1.3
log
@Proper va_end calling (no double calls)
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.2 2001/09/05 22:32:38 deraadt Exp $	*/
d42 2
a43 2
extern void ofw_stack __P((void));
extern void ofbcopy __P((const void *, void *, size_t));
@


1.2
log
@make sure that va_start() has matching va_end()
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.1 2001/09/01 15:44:20 drahn Exp $	*/
d188 1
a188 2
	if (openfirmware(&args) == -1) {
		va_end(ap);
d190 1
a190 3
	}
	if (args.args_n_results[nargs]) {
		va_end(ap);
a191 1
	}
@


1.2.6.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.3 2002/01/03 19:28:37 jason Exp $	*/
d188 2
a189 1
	if (openfirmware(&args) == -1)
d191 3
a193 1
	if (args.args_n_results[nargs])
d195 1
@


1.2.6.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.2.6.1 2002/01/31 22:55:14 niklas Exp $	*/
d42 2
a43 2
extern void ofw_stack(void);
extern void ofbcopy(const void *, void *, size_t);
d103 1
d105 8
d153 1
d155 7
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.4.2
log
@Merge in trunk
@
text
@d188 2
a189 1
	if (openfirmware(&args) == -1)
d191 3
a193 1
	if (args.args_n_results[nargs])
d195 1
@


1.2.4.3
log
@Merge in -current from about a week ago
@
text
@d42 2
a43 2
extern void ofw_stack(void);
extern void ofbcopy(const void *, void *, size_t);
d103 1
d105 8
d153 1
d155 7
@


1.2.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d35 1
a35 1
#include <sys/stdarg.h>
d37 1
d46 2
a47 1
OF_instance_to_package(int ihandle)
d69 4
a72 1
OF_package_to_path(int phandle, char *buf, int buflen)
d87 1
a87 1

d119 1
a119 1

d160 1
a160 1

d179 2
a180 1
OF_open(char *dname)
d194 1
a194 1

d206 2
a207 1
OF_close(int handle)
d225 1
a225 1
/*
d229 4
a232 1
OF_read(int handle, void *addr, int len)
d248 1
a248 1

d266 1
d273 4
a276 1
OF_write(int handle, void *addr, int len)
d292 1
a292 1

d309 3
a311 1
OF_seek(int handle, u_quad_t pos)
@


1.1
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/powerpc to macppc/macppc

This moves hardware specific files from the common directory to the
platform specific directory. This leaves common files.
With this change all of the debugger (db_) files have been moved to
the platform specific directory. The debugger should be reconsidered
and commonized.
@
text
@d1 1
a1 1
/*	$OpenBSD: opendev.c,v 1.5 2001/08/18 21:59:48 drahn Exp $	*/
d139 2
a140 1
	if (openfirmware(&args) == -1)
d142 3
a144 1
	if (args.args_n_results[nargs])
d146 1
d188 2
a189 1
	if (openfirmware(&args) == -1)
d191 3
a193 1
	if (args.args_n_results[nargs])
d195 1
@

