head	1.13;
access;
symbols
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.8
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.10
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.10
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.12
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.8
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.6
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.1.0.20
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.18
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.16
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.14
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	OPENBSD_3_3:1.1.0.12
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.10
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.8
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.6
	UBC_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@# @;


1.13
date	2017.01.22.03.27.31;	author tb;	state Exp;
branches;
next	1.12;
commitid	7xfCYX9g3lREuZZf;

1.12
date	2016.10.14.18.42.58;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	dUZQxi6w3YqAb6KQ;

1.11
date	2016.05.31.18.37.04;	author tedu;	state Exp;
branches;
next	1.10;
commitid	sBYPGaH3LSicYd3U;

1.10
date	2013.12.08.14.46.39;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.26.19.43.01;	author jasper;	state Exp;
branches;
next	1.8;

1.8
date	2010.11.12.17.11.44;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2010.11.03.20.08.03;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.31.22.21.43;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.11.16.27.49;	author thib;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.01.15.48.35;	author grange;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.06.11.16.47;	author pedro;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.06.02.03.15;	author marco;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.01.15.28.42;	author drahn;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.10.31.03.01.15;	author nate;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Introduce the KEEPKERNELS variable: if this is set either in mk.conf or
the environment, 'make cleandir' does not descend into kernel build
directories.  Thus, kernel object files survive 'make build' on slower
architectures.

WARNING:
If you set this variable, you run the risk of breaking 'make release':
Be sure to run 'make cleandir' from /sys/arch/$(machine)/compile before
doing 'make release'.  This issue will be addressed shortly.

requested by kettenis;
ok deraadt
@
text
@#	$OpenBSD: Makefile,v 1.12 2016/10/14 18:42:58 deraadt Exp $

.include <bsd.own.mk>    # for KEEPKERNELS

S=	${.CURDIR}/../..
KFILE=	GENERIC
.if exists(conf/GENERIC.MP)
KFILE=	GENERIC.MP
.endif
TDIRS=	${_arch} include pci
TAGS=	${.CURDIR}/tags

NOPROG=
NOMAN=
NOOBJ=
SUBDIR=	stand
.if !defined(KEEPKERNELS) || !(make(clean) || make(cleandir))
SUBDIR+=compile
.endif

# config the fattest kernel we can find into a temporary dir
# to create a Makefile.  Then use make to pull some variables
# out and push them into the sub-shell to expand the paths,
# and finally run ctags.
tags::
	TDIR=`mktemp -d /tmp/_tagXXXXXXXXXX` || exit 1; \
	eval "S=${S}" && \
	config -s ${S} -b $${TDIR} ${.CURDIR}/conf/${KFILE} && \
	eval "_arch=\"`make -V _arch -f $${TDIR}/Makefile`\"" && \
	eval "_mach=\"`make -V _mach -f $${TDIR}/Makefile`\"" && \
	eval "_machdir=\$S/arch/$${_mach}" && \
	eval "_archdir=\$S/arch/$${_arch}" && \
	eval "HFILES=\"`find $S \( -path $S/arch -o -path $S/stand -o -path $S/lib/libsa -o -path $S/lib/libkern/arch \) -prune -o -name '*.h'; find $${_machdir} $${_archdir} $S/lib/libkern/arch/$${_arch} \( -name boot -o -name stand \) -prune -o -name '*.h'`\"" && \
	eval "SFILES=\"`make -V SFILES -f $${TDIR}/Makefile`\"" && \
	eval "CFILES=\"`make -V CFILES -f $${TDIR}/Makefile`\"" && \
	eval "AFILES=\"`make -V AFILES -f $${TDIR}/Makefile`\"" && \
	ctags -wd -f ${TAGS} $${CFILES} $${HFILES} && \
	egrep "^[_A-Z]*ENTRY[_A-Z]*\(.*\)" $${SFILES} $${AFILES} | \
	    sed "s;\\([^:]*\\):\\([^(]*\\)(\\([^, )]*\\)\\(.*\\);\\3	\\1	/^\\2(\\3\\4$$/;" \
	    >> ${TAGS} && \
	sort -o ${TAGS} ${TAGS} && \
	rm -rf $${TDIR}

links:
	-for i in conf ${TDIRS}; do \
	    (cd $$i && rm -f tags; ln -s tags tags); done

obj:	_SUBDIRUSE

.include <bsd.prog.mk>
@


1.12
log
@Kernel builds now happen in compile/CONFIG/obj@@ -> /usr/obj/... [or ./obj/,
if srctree is not rooted at /usr/src].  As a result, stock GENERIC & RAMDISK
kernels are commited to the tree, to ensure the src tree can be "readonly"
during builds, with all writes occuring inside the obj space.  config -b
options are handled by ../Makefile.inc.  The canonical new way to configure
one of these kernels is:
    % cd /sys/arch/amd64/compile/GENERIC.MP
    % doas make obj
    % make config
    % make
    % doas cp obj/bsd /bsd
The build infrastructure will use this new mechanism in a de-escalation
way using BUILDUSER.
Much help from natano and tb.
@
text
@d1 3
a3 1
#	$OpenBSD: Makefile,v 1.11 2016/05/31 18:37:04 tedu Exp $
d16 4
a19 1
SUBDIR=	stand compile
@


1.11
log
@fix arch/mach confusion in make tags. from frantisek holop
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.10 2013/12/08 14:46:39 espie Exp $
d14 1
a14 1
SUBDIR=	stand
@


1.10
log
@reflect reality, mark as NOOBJ
"sure" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.9 2013/03/26 19:43:01 jasper Exp $
d28 1
a28 1
	eval "HFILES=\"`find $S \( -path $S/'arch' -o -path $S/stand -o -path $S/lib/libsa -o -path $S'/lib/libkern/arch' \) -prune -o -name '*.h'; find $${_machdir} $${_archdir} $S/lib/libkern/arch/$${_mach} \( -name boot -o -name stand \) -prune -o -name '*.h'`\"" && \
@


1.9
log
@sync TDIRS with reality

"looks good" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.8 2010/11/12 17:11:44 deraadt Exp $
d13 1
@


1.8
log
@Push all potential (as in, all system MI not utilized by the bootblocks)
.h files into the ctags run as well to bring #define's and structs and
such into scope.  Problem reported by thib
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.7 2010/11/03 20:08:03 deraadt Exp $
d8 1
a8 1
TDIRS=	${_arch} include pci isa eisa
@


1.7
log
@no need to specify the -t flag to ctags
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.6 2010/05/31 22:21:43 deraadt Exp $
d27 1
d31 1
a31 1
	ctags -wd -f ${TAGS} $${CFILES} && \
@


1.6
log
@Completely rewrite the tags file creation process.  use config(8) against
a fat kernel (GERERIC or GENERIC.MP) into a temporary dir, then extract some
variables using make -V, and after some more singing and dancing use this
full and (more) correct list of files with ctags.  Don't read this code.
ok guenther
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.17 2007/10/22 01:26:31 deraadt Exp $
d30 1
a30 1
	ctags -wdt -f ${TAGS} $${CFILES} && \
@


1.5
log
@inlude powerpc/include/*.h in macppc's make tags target.

ok drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.4 2007/06/01 15:48:35 grange Exp $
d3 4
a6 8
S=${.CURDIR}/../..
.include "$S/kern/Make.tags.inc"

NOPROG=	noprog
NOMAN=	noman

.if ${MACHINE} == "macppc"
SUBDIR= stand
d8 2
d11 25
a35 17
TMACPPC=	$S/arch/macppc/tags
SMACPPC=	$S/arch/macppc/macppc/*.[ch]	\
		$S/arch/macppc/include/*.h	\
		$S/arch/macppc/dev/*.[ch]	\
		$S/arch/macppc/pci/*.[ch]	\
		$S/arch/powerpc/include/*.h
AMACPPC=	$S/arch/macppc/macppc/*.[sS]

# Directories in which to place macppc tags links
DMACPPC=	conf macppc include pci

tags:
	-ctags -wdtf ${TMACPPC} ${COMM} ${SMACPPC}
	egrep "^ENTRY(.*)|^ALTENTRY(.*)" ${AMACPPC} | \
	    sed "s;\([^:]*\):\([^(]*\)(\([^, )]*\)\(.*\);\3	\1	/^\2(\3\4$$/;" \
		>> ${TMACPPC}
	sort -o ${TMACPPC} ${TMACPPC}
d38 2
a39 3
	-for i in ${DMACPPC}; do \
	    cd $$i && rm -f tags; ln -s ${TMACPPC} tags; done

@


1.4
log
@Fix macppc tags.
ok drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.3 2005/05/06 11:16:47 pedro Exp $
d14 5
a18 4
SMACPPC=	$S/arch/macppc/macppc/*.[ch] \
		$S/arch/macppc/include/*.h   \
		$S/arch/macppc/dev/*.[ch]    \
		$S/arch/macppc/pci/*.[ch]
@


1.3
log
@generate vim-compatible tag files, from netbsd
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.2 2005/05/06 02:03:15 marco Exp $
d16 1
@


1.2
log
@Add tags to macppc.

<miod>	commit your stuff.
<miod>	make tags work.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile,v 1.1 2001/09/01 15:28:42 drahn Exp $
d25 1
a25 1
	    sed "s;\([^:]*\):\([^(]*\)(\([^, )]*\)\(.*\);\3 \1 /^\2(\3\4$$/;" \
@


1.1
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from arch/powerpc to arch/macppc.
@
text
@d1 4
a4 1
#	$OpenBSD: Makefile,v 1.5 2001/07/04 08:38:47 niklas Exp $
d12 21
@


1.1.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
#	$OpenBSD$
@

