head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.10
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.12
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.8
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.4
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.6
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.4
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.14.0.10
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.8
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.12.0.10
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.8
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.4
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.11.0.12
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.10
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.8
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.6
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.9.0.8
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.5
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.17
date	2015.01.27.09.45.51;	author dlg;	state Exp;
branches;
next	1.16;
commitid	k73tjR0B76MlcpJX;

1.16
date	2014.07.12.07.20.00;	author blambert;	state Exp;
branches;
next	1.15;
commitid	38fIrGx3fwTSCAbB;

1.15
date	2013.11.04.11.57.26;	author mpi;	state Exp;
branches;
next	1.14;

1.14
date	2011.06.15.21.32.04;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2011.06.07.16.18.00;	author mpi;	state Exp;
branches;
next	1.12;

1.12
date	2009.01.10.18.00.59;	author robert;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.18.23.21.17;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.08.17.25.05;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.16.03.54.48;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.16.03.31.25;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.07.22.05.40;	author pvalchev;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.02.22.00.29;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.19.06.31.23;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.22.21.01.14;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.01.17.43.08;	author drahn;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.09.01.15.50.00;	author drahn;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.01.15;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.10.36.01;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.27.23.29.46;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2004.02.19.10.49.03;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.36.33;	author art;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.10.29.00.28.05;	author art;	state Exp;
branches;
next	;


desc
@@


1.17
log
@ENOGREP.

i didnt find this TASK_INITIALIZER call when changing tasks.

more beatings from deraadt@@
@
text
@/*	$OpenBSD: abtn.c,v 1.16 2014/07/12 07:20:00 blambert Exp $	*/
/*	$NetBSD: abtn.c,v 1.1 1999/07/12 17:48:26 tsubai Exp $	*/

/*-
 * Copyright (c) 2002, Miodrag Vallat.
 * Copyright (C) 1999 Tsubai Masanari.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>
#include <sys/task.h>

#include <machine/bus.h>

#include <dev/ofw/openfirm.h>
#include <macppc/macppc/ofw_machdep.h>

#include <dev/adb/adb.h>

#include "audio.h"
#include "cd.h"
#include "wskbd.h"

#define ABTN_HANDLER_ID 31

struct abtn_softc {
	struct device sc_dev;

	int origaddr;		/* ADB device type */
	int adbaddr;		/* current ADB address */
	int handler_id;
};

int abtn_match(struct device *, void *, void *);
void abtn_attach(struct device *, struct device *, void *);
void abtn_adbcomplete(caddr_t, caddr_t, int);

#if NWSKBD > 0 
extern int cd_eject(void);
#if NAUDIO > 0
extern int wskbd_set_mixervolume(long, long);
#endif
#endif

struct cfattach abtn_ca = {
	sizeof(struct abtn_softc), abtn_match, abtn_attach
};
struct cfdriver abtn_cd = {
	NULL, "abtn", DV_DULL
};

struct task eject_task =
    TASK_INITIALIZER((void (*)(void *))cd_eject, NULL);

int
abtn_match(struct device *parent, void *cf, void *aux)
{
	struct adb_attach_args *aa = aux;

	if (strcmp(aa->name, adb_device_name) != 0)
		return (0);

	if (aa->origaddr == ADBADDR_MISC &&
	    aa->handler_id == ABTN_HANDLER_ID)
		return 1;

	return 0;
}

void
abtn_attach(struct device *parent, struct device *self, void *aux)
{
	struct abtn_softc *sc = (struct abtn_softc *)self;
	struct adb_attach_args *aa = aux;
	ADBSetInfoBlock adbinfo;

	printf(": brightness/volume/eject buttons\n");

	sc->origaddr = aa->origaddr;
	sc->adbaddr = aa->adbaddr;
	sc->handler_id = aa->handler_id;

	adbinfo.siServiceRtPtr = (Ptr)abtn_adbcomplete;
	adbinfo.siDataAreaAddr = (caddr_t)sc;

	set_adb_info(&adbinfo, sc->adbaddr);
}

void
abtn_adbcomplete(caddr_t buffer, caddr_t data, int adb_command)
{
	u_int cmd, brightness;

	cmd = buffer[1];

	switch (cmd) {
	case 0x0a:	/* decrease brightness */
		brightness = cons_brightness;
		if (brightness == MAX_BRIGHTNESS)
			brightness++;		/* get round values */
		brightness -= STEP_BRIGHTNESS;
		of_setbrightness(brightness);
		break;

	case 0x09:	/* increase brightness */
		brightness = cons_brightness + STEP_BRIGHTNESS;
		of_setbrightness(brightness);
		break;

#if NAUDIO > 0 && NWSKBD > 0
	case 0x08:	/* mute */
	case 0x01:	/* mute, AV hardware */
		wskbd_set_mixervolume(0, 1);
		break;
	case 0x07:	/* decrease volume */
	case 0x02:	/* decrease volume, AV hardware */
		wskbd_set_mixervolume(-1, 1);
		break;
	case 0x06:	/* increase volume */
	case 0x03:	/* increase volume, AV hardware */
		wskbd_set_mixervolume(1, 1);
		break;
#endif
	case 0x0c:	/* mirror display key */
		/* Need callback to do something with this */
		break;
#if NWSKBD > 0 && NCD > 0
	case 0x0b:	/* eject tray */
		task_add(systq, &eject_task);
		break;
#endif
	case 0x7f:	/* numlock */
		/* Need callback to do something with this */
		break;

	default:
#ifdef DEBUG
		if ((cmd & ~0x7f) == 0)
			printf("unknown ADB button 0x%x\n", cmd);
#endif
		break;
	}
}
@


1.16
log
@move macppc abtn(4) driver from workq to taskq

thanks to Fred Crowson (fred () crowsons ! net) who was able
to make sure his cd would still eject when the button was pushed,
and stsp@@ who lent me his macppc laptop
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.15 2013/11/04 11:57:26 mpi Exp $	*/
d76 1
a76 1
    TASK_INITIALIZER((void (*)(void *, void *))cd_eject, NULL, NULL);
@


1.15
log
@Convert wskbd_set_mixervolume() to use a task internally instead of
being called in a workq.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.14 2011/06/15 21:32:04 miod Exp $	*/
d34 1
a34 1
#include <sys/workq.h>
d75 3
d152 1
a152 1
		workq_add_task(NULL, 0, (workq_fn)cd_eject, NULL, NULL);
@


1.14
log
@Add a const char* as first member of struct adb_attach_args, so that we can
pass a struct confargs * on macppc for some specific children of the adb
node, and not confuse real adb device attachments.
ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.13 2011/06/07 16:18:00 mpi Exp $	*/
d64 1
a64 1
extern int wskbd_set_mixervolume(long dir);
d133 1
a133 2
		workq_add_task(NULL, 0, (workq_fn)wskbd_set_mixervolume,
		    (void *)(long)0, (void *)(int)1);
d137 1
a137 2
		workq_add_task(NULL, 0, (workq_fn)wskbd_set_mixervolume,
		    (void *)(long)-1, (void *)(int)1);
d141 1
a141 2
		workq_add_task(NULL, 0, (workq_fn)wskbd_set_mixervolume,
		    (void *)(long)1, (void *)(int)1);
@


1.13
log
@Fix the use of mute/volume keys broken by the last API change in audio.c

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.12 2009/01/10 18:00:59 robert Exp $	*/
d79 3
@


1.12
log
@Add support for the volume buttons and for the eject button found
on apple laptops.
The eject button will only eject the disc when it's not used by
anything.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.11 2006/01/18 23:21:17 miod Exp $	*/
d131 1
a131 1
		    (void *)(long)0, NULL);
d136 1
a136 1
		    (void *)(long)-1, NULL);
d141 1
a141 1
		    (void *)(long)1, NULL);
@


1.11
log
@Factorize akbd and ams drivers between mac68k and macppc; while there, start
moving out common adb code as well, and merge adb_direct.c into adb.c to
simplify external header files.

No functional change; more cleanups to come.
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.10 2006/01/08 17:25:05 miod Exp $	*/
d34 1
d43 4
d61 7
d127 1
a127 1
#ifdef DEBUG
d130 3
d135 3
d140 2
a141 1
		/* Need callback to do something with these */
d143 1
a143 1

d147 1
a147 1

d149 1
a149 1
		/* Need callback to do something with this */
d151 1
a151 1

d157 1
d160 1
a161 1
#endif
@


1.10
log
@Display unhandled adb devices as "whatever at adb0 addr X" like all buses do;
while there, make the detailed descriptions dependent on ADBVERBOSE (enabled
in GENERIC) instead of DIAGNOSTIC.
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.9 2003/10/16 03:54:48 deraadt Exp $	*/
d40 1
a40 1
#include <macppc/dev/adbvar.h>
d91 1
a91 1
	SetADBInfo(&adbinfo, sc->adbaddr);
@


1.9
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.8 2003/10/16 03:31:25 drahn Exp $	*/
d82 1
a82 1
	printf("brightness/volume/eject buttons\n");
@


1.8
log
@more ANSI/KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.7 2003/07/07 22:05:40 pvalchev Exp $	*/
d94 1
a94 1
void 
@


1.7
log
@disable accidentially enabled 'debug' flag; ok drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.6 2003/07/02 22:00:29 drahn Exp $	*/
d64 1
a64 4
abtn_match(parent, cf, aux)
	struct device *parent;
	void *cf;
	void *aux;
d76 1
a76 3
abtn_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
d95 1
a95 3
abtn_adbcomplete(buffer, data, adb_command)
	caddr_t buffer, data;
	int adb_command;
@


1.6
log
@Add a stub where code could be added to make use of the new key on recent
laptop keyboards (mirror display on F7). Documents the key, no functionality.
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.5 2002/06/19 06:31:23 miod Exp $	*/
a121 1
#define DEBUG
@


1.5
log
@Fix compilation error if option DEBUG is defined.
Reported by Peter Philipp (pphilipp at mac dot com)
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.4 2002/05/22 21:01:14 miod Exp $	*/
d122 1
d130 5
d138 1
d142 1
d147 1
a147 1
			printf("unknown ADB button %d\n", cmd);
@


1.4
log
@Allow brightness buttons to affect the console brightness whenever possible;
however, the brightness settings are neither saved in nor read from the nvram.
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.3 2002/03/14 01:26:36 millert Exp $	*/
d138 1
a138 1
		if ((cmd & ~0x7f) == 0))
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.2 2001/09/01 17:43:08 drahn Exp $	*/
d5 1
d35 5
a40 1
#include <macppc/dev/pm_direct.h>
a41 1
#define NVRAM_BRIGHTNESS 0x140e
a49 3

	int brightness;		/* backlight brightness */
	int volume;		/* speaker volume (not yet) */
d52 3
a54 3
static int abtn_match(struct device *, void *, void *);
static void abtn_attach(struct device *, struct device *, void *);
static void abtn_adbcomplete(caddr_t, caddr_t, int);
a85 1
	int bright;
d87 1
a87 5
	printf("brightness/volume button\n");

	bright = pm_read_nvram(NVRAM_BRIGHTNESS);
	pm_set_brightness(bright);
	sc->brightness = bright;
d104 1
a104 2
	struct abtn_softc *sc = (struct abtn_softc *)data;
	u_int cmd;
d109 26
a134 6
	case 0x0a:
		sc->brightness -= 8;
		if (sc->brightness < 8)
			sc->brightness = 8;
		pm_set_brightness(sc->brightness);
		pm_write_nvram(NVRAM_BRIGHTNESS, sc->brightness);
d137 3
a139 6
	case 0x09:
		sc->brightness += 8;
		if (sc->brightness > 0x78)
			sc->brightness = 0x78;
		pm_set_brightness(sc->brightness);
		pm_write_nvram(NVRAM_BRIGHTNESS, sc->brightness);
d141 1
@


1.2
log
@correct files for the powerpc/mac/ -> macppc/dev which did not get
renamed correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.1 2001/09/01 15:50:00 drahn Exp $	*/
d51 3
a53 3
static int abtn_match __P((struct device *, void *, void *));
static void abtn_attach __P((struct device *, struct device *, void *));
static void abtn_adbcomplete __P((caddr_t, caddr_t, int));
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.2 2001/09/01 17:43:08 drahn Exp $	*/
a4 1
 * Copyright (c) 2002, Miodrag Vallat.
a33 5
#include <machine/bus.h>

#include <dev/ofw/openfirm.h>
#include <macppc/macppc/ofw_machdep.h>

d35 1
d37 1
d46 3
d51 3
a53 3
int abtn_match(struct device *, void *, void *);
void abtn_attach(struct device *, struct device *, void *);
void abtn_adbcomplete(caddr_t, caddr_t, int);
d85 1
d87 5
a91 1
	printf("brightness/volume/eject buttons\n");
d108 2
a109 1
	u_int cmd, brightness;
d114 6
a119 26
	case 0x0a:	/* decrease brightness */
		brightness = cons_brightness;
		if (brightness == MAX_BRIGHTNESS)
			brightness++;		/* get round values */
		brightness -= STEP_BRIGHTNESS;
		of_setbrightness(brightness);
		break;

	case 0x09:	/* increase brightness */
		brightness = cons_brightness + STEP_BRIGHTNESS;
		of_setbrightness(brightness);
		break;

#ifdef DEBUG
	case 0x08:	/* mute */
	case 0x01:	/* mute, AV hardware */
	case 0x07:	/* decrease volume */
	case 0x02:	/* decrease volume, AV hardware */
	case 0x06:	/* increase volume */
	case 0x03:	/* increase volume, AV hardware */
		break;

	case 0x0b:	/* eject tray */
		break;

	case 0x7f:	/* numlock */
d122 6
a127 3
	default:
		if ((cmd & ~0x7f) == 0))
			printf("unknown ADB button %d\n", cmd);
a128 1
#endif
@


1.2.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.2.6.1 2002/06/11 03:36:33 art Exp $	*/
d138 1
a138 1
		if ((cmd & ~0x7f) == 0)
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.4.2
log
@Merge in -current from about a week ago
@
text
@d51 3
a53 3
static int abtn_match(struct device *, void *, void *);
static void abtn_attach(struct device *, struct device *, void *);
static void abtn_adbcomplete(caddr_t, caddr_t, int);
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@a4 1
 * Copyright (c) 2002, Miodrag Vallat.
a33 5
#include <machine/bus.h>

#include <dev/ofw/openfirm.h>
#include <macppc/macppc/ofw_machdep.h>

d35 1
d37 1
d46 3
d51 3
a53 3
int abtn_match(struct device *, void *, void *);
void abtn_attach(struct device *, struct device *, void *);
void abtn_adbcomplete(caddr_t, caddr_t, int);
d85 1
d87 5
a91 1
	printf("brightness/volume/eject buttons\n");
d108 2
a109 1
	u_int cmd, brightness;
d114 6
a119 26
	case 0x0a:	/* decrease brightness */
		brightness = cons_brightness;
		if (brightness == MAX_BRIGHTNESS)
			brightness++;		/* get round values */
		brightness -= STEP_BRIGHTNESS;
		of_setbrightness(brightness);
		break;

	case 0x09:	/* increase brightness */
		brightness = cons_brightness + STEP_BRIGHTNESS;
		of_setbrightness(brightness);
		break;

#ifdef DEBUG
	case 0x08:	/* mute */
	case 0x01:	/* mute, AV hardware */
	case 0x07:	/* decrease volume */
	case 0x02:	/* decrease volume, AV hardware */
	case 0x06:	/* increase volume */
	case 0x03:	/* increase volume, AV hardware */
		break;

	case 0x0b:	/* eject tray */
		break;

	case 0x7f:	/* numlock */
d122 6
a127 3
	default:
		if ((cmd & ~0x7f) == 0)
			printf("unknown ADB button %d\n", cmd);
a128 1
#endif
@


1.2.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d64 4
a67 1
abtn_match(struct device *parent, void *cf, void *aux)
d79 3
a81 1
abtn_attach(struct device *parent, struct device *self, void *aux)
d99 4
a102 2
void
abtn_adbcomplete(caddr_t buffer, caddr_t data, int adb_command)
a128 5
		/* Need callback to do something with these */
		break;

	case 0x0c:	/* mirror display key */
		/* Need callback to do something with this */
a131 1
		/* Need callback to do something with this */
a134 1
		/* Need callback to do something with this */
d139 1
a139 1
			printf("unknown ADB button 0x%x\n", cmd);
@


1.1
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/mac to macppc/dev
@
text
@d1 1
a1 1
/*	$OpenBSD: abtn.c,v 1.3 2001/07/09 03:30:19 mickey Exp $	*/
d34 2
a35 2
#include <macppc/mac/adbvar.h>
#include <macppc/mac/pm_direct.h>
@

