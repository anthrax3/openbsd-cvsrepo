head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.22
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.24
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.16
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.20
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.18
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.14
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.12
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.10
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.8
	OPENBSD_5_0:1.10.0.6
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.4
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.2
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.9.0.16
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.18
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.14
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.12
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.10
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.8
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.6
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9;
locks; strict;
comment	@ * @;


1.11
date	2016.05.23.15.23.20;	author mglocker;	state Exp;
branches;
next	1.10;
commitid	CPMkCnxbIaqATNxE;

1.10
date	2010.04.09.17.01.30;	author jasper;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.14.20.54.45;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.23.15.58;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.09.01.48.17;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.01.21.30.09;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.01.20.52.25;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.27.17.18.18;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.16.00.09.31;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.15.16.23.34;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.11.16.22.50;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Pass the device node to ia_cookie so we can pick it up in the i2c driver.

ok deraadt kettenis
@
text
@/*	$OpenBSD: maci2c.c,v 1.10 2010/04/09 17:01:30 jasper Exp $	*/

/*
 * Copyright (c) 2005 Mark Kettenis
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>

#define _I2C_PRIVATE
#include <dev/i2c/i2cvar.h>
#include <dev/ofw/openfirm.h>

#include <arch/macppc/dev/maci2cvar.h>

void
maciic_scan(struct device *self, struct i2cbus_attach_args *iba, void *aux)
{
	int iba_node = *(int *)aux;
	struct i2c_attach_args ia;
	char name[32];
	u_int32_t reg;
	int node;

	for (node = OF_child(iba_node); node; node = OF_peer(node)) {
		if (OF_getprop(node, "reg", &reg, sizeof reg) != sizeof reg &&
		    OF_getprop(node, "i2c-address", &reg, sizeof reg) != sizeof reg)
			continue;
		bzero(&ia, sizeof ia);
		ia.ia_tag = iba->iba_tag;
		ia.ia_addr = (reg >> 1);
		ia.ia_cookie = &node;
		bzero(name, sizeof name);
		if (OF_getprop(node, "compatible", &name,
		    sizeof name) && name[0])
			ia.ia_name = name;
		if (ia.ia_name == NULL && 
		    OF_getprop(node, "name", &name,
		    sizeof name) && name[0]) {
			if (strcmp(name, "cereal") == 0)
				continue;
			ia.ia_name = name;
		}
		/* XXX We should write a real driver for these instead
		   of reaching over from the sound driver that sits on
		   the i2s port.  For now hide them.  */
		if (strcmp(name, "deq") == 0 || strcmp(name, "tas3004") == 0)
			continue;
		if (ia.ia_name)
			config_found(self, &ia, iic_print);
	}
}
@


1.10
log
@- don't use memset() where we should use bzero()
* no binary change

ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: maci2c.c,v 1.9 2006/02/14 20:54:45 kettenis Exp $	*/
d45 1
@


1.9
log
@Knock out "deq" and "tas3004" i2c nodes.
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: maci2c.c,v 1.8 2006/02/08 23:15:58 dlg Exp $	*/
d42 1
a42 1
		memset(&ia, 0, sizeof ia);
d45 1
a45 1
		memset(name, 0, sizeof name);
@


1.8
log
@add a member to the i2c_attach args so that a controller can pass a
cookie down to the device. the most obvious use of this is to pass a
device its ofw node on sparc64 and macppc so it can configure itself more
appropriately.

ok kettenis@@ henning@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: maci2c.c,v 1.7 2006/01/09 01:48:17 deraadt Exp $	*/
d23 1
a32 1
	extern int iic_print(void *, const char *);
d56 5
@


1.7
log
@skip the darn cereal devices, which i think are just markers for the host chip i think
@
text
@d1 1
a1 1
/*	$OpenBSD: maci2c.c,v 1.6 2006/01/01 21:30:09 deraadt Exp $	*/
d42 1
a44 1
		ia.ia_name = NULL;
@


1.6
log
@proto not needed
@
text
@d1 1
a1 1
/*	$OpenBSD: maci2c.c,v 1.5 2006/01/01 20:52:25 deraadt Exp $	*/
d51 3
a53 1
		    sizeof name) && name[0])
d55 1
@


1.5
log
@switch from macppc-specific maciic(4) driver to the generic iic(4),
after teaching it to use a function pointer to get back to the OFW
scan.. this will also help the sparc64 later; ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: maci2c.c,v 1.4 2005/12/27 17:18:18 deraadt Exp $	*/
a26 2

int	maciic_print(void *, const char *);
@


1.4
log
@no longer use ia_compat; tested by a few
@
text
@d1 1
a1 1
/*	$OpenBSD: maci2c.c,v 1.3 2005/11/16 00:09:31 deraadt Exp $	*/
a27 2
int	maciic_match(struct device *, void *, void *);
void	maciic_attach(struct device *, struct device *, void *);
a29 14
struct cfattach maciic_ca = {
	sizeof (struct device), maciic_match, maciic_attach
};

struct cfdriver maciic_cd = {
	NULL, "maciic", DV_DULL
};

int
maciic_match(struct device *parent, void *cf, void *aux)
{
	return (1);
}

d31 1
a31 1
maciic_attach(struct device *parent, struct device *self, void *aux)
d33 2
a34 1
	struct maci2cbus_attach_args *iba = aux;
d40 1
a40 3
	printf("\n");

	for (node = OF_child(iba->iba_node); node; node = OF_peer(node)) {
d56 1
a56 1
			config_found(self, &ia, maciic_print);
a57 13
}

int
maciic_print(void *aux, const char *pnp)
{
	struct i2c_attach_args *ia = aux;

	if (pnp != NULL) {
		printf("\"%s\" at %s", ia->ia_name, pnp);
	}
	printf(" addr 0x%x", ia->ia_addr);

	return (UNCONF);
@


1.3
log
@some older apple machines did not have a 'regs' property for i2c devices,
but 'i2c-address'.  some have both.  crazy.  ok drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: maci2c.c,v 1.2 2005/11/15 16:23:34 deraadt Exp $	*/
d51 1
a51 1
	char name[32], compat[32];
a63 2
		ia.ia_compat = NULL;
		memset(compat, 0, sizeof compat);
d65 2
a66 2
		if (OF_getprop(node, "name", &name,
		    sizeof name))
d68 6
a73 4
		if (OF_getprop(node, "compatible", &compat,
		    sizeof compat))
			ia.ia_compat = compat;
		config_found(self, &ia, maciic_print);
d83 1
a83 1
		printf("%s at %s", ia->ia_name, pnp);
@


1.2
log
@instead of passing OF nodes down to the drivers, pass name/compat string
pointers.  This lets their match() functions actually make real decisions.
OF-capable machines will pass name/compat pointers, but other machines
will not.  grudging ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: maci2c.c,v 1.1 2005/11/11 16:22:50 kettenis Exp $	*/
d58 2
a59 1
		if (OF_getprop(node, "reg", &reg, sizeof reg) != sizeof reg)
@


1.1
log
@Add maciic(4), an OpenFirware aware version of iic(4).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 2
a51 1
	struct maci2c_attach_args ia;
d62 10
a71 1
		ia.ia_node = node;
d79 1
a79 2
	struct maci2c_attach_args *ia = aux;
	char name[32];
d82 1
a82 3
		OF_getprop(ia->ia_node, "name", name, sizeof name);
		name[sizeof(name) - 1] = 0;
		printf("%s at %s", name, pnp);
@

