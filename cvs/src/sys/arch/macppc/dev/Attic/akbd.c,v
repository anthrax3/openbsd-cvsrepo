head	1.21;
access;
symbols
	OPENBSD_3_8:1.16.0.8
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.6
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.4
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.16.0.2
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.14.0.6
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.14
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.21
date	2006.01.18.23.21.17;	author miod;	state dead;
branches;
next	1.20;

1.20
date	2006.01.08.17.25.05;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2005.12.21.18.50.52;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.21.18.16.37;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.15.15.01.23;	author martin;	state Exp;
branches;
next	1.16;

1.16
date	2003.10.16.03.54.48;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.16.03.31.25;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2002.09.15.09.01.58;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.09.15.02.02.43;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.23.23.19.46;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	2002.06.18.03.32.41;	author itojun;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.07.07.14.48;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.28.04.17.40;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.28.01.27.23;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.28.01.05.18;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.28.01.02.55;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.28.00.58.27;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.27.21.48.12;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.01.17.43.08;	author drahn;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.09.01.15.50.00;	author drahn;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.01.15;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.10.36.01;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.27.23.29.46;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2004.02.19.10.49.03;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.36.33;	author art;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.10.29.00.28.06;	author art;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Factorize akbd and ams drivers between mac68k and macppc; while there, start
moving out common adb code as well, and merge adb_direct.c into adb.c to
simplify external header files.

No functional change; more cleanups to come.
@
text
@/*	$OpenBSD: akbd.c,v 1.20 2006/01/08 17:25:05 miod Exp $	*/
/*	$NetBSD: akbd.c,v 1.13 2001/01/25 14:08:55 tsubai Exp $	*/

/*
 * Copyright (C) 1998	Colin Wood
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Colin Wood.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/timeout.h>
#include <sys/kernel.h>
#include <sys/device.h>
#include <sys/fcntl.h>
#include <sys/poll.h>
#include <sys/selinfo.h>
#include <sys/proc.h>
#include <sys/signalvar.h>
#include <sys/systm.h>

#include <dev/wscons/wsconsio.h>
#include <dev/wscons/wskbdvar.h>
#include <dev/wscons/wsksymdef.h>
#include <dev/wscons/wsksymvar.h>

#include <machine/autoconf.h>
#define KEYBOARD_ARRAY

#include <macppc/dev/keyboard.h>
#include <macppc/dev/adbvar.h>
#include <macppc/dev/akbdmap.h>
#include <macppc/dev/akbdvar.h>
#include <macppc/dev/amsvar.h>

/*
 * Function declarations.
 */
static int	akbdmatch(struct device *, void *, void *);
static void	akbdattach(struct device *, struct device *, void *);
void		kbd_adbcomplete(caddr_t buffer, caddr_t data_area, int adb_command);
static void	kbd_processevent(adb_event_t *event, struct akbd_softc *);
#ifdef notyet
static u_char	getleds(int);
static int	setleds(struct akbd_softc *, u_char);
static void	blinkleds(struct akbd_softc *);
#endif

/* Driver definition. */
struct cfattach akbd_ca = {
	sizeof(struct akbd_softc), akbdmatch, akbdattach
};
struct cfdriver akbd_cd = {
	NULL, "akbd", DV_DULL
};


int akbd_enable(void *, int);
void akbd_set_leds(void *, int);
int akbd_ioctl(void *, u_long, caddr_t, int, struct proc *);
int akbd_intr(adb_event_t *event);
void akbd_rawrepeat(void *v);


struct wskbd_accessops akbd_accessops = {
	akbd_enable,
	akbd_set_leds,
	akbd_ioctl,
};

void akbd_cngetc(void *, u_int *, int *);
void akbd_cnpollc(void *, int);

struct wskbd_consops akbd_consops = {
	akbd_cngetc,
	akbd_cnpollc,
};

struct wskbd_mapdata akbd_keymapdata = {
	akbd_keydesctab,
#ifdef AKBD_LAYOUT
	AKBD_LAYOUT,
#else
	KB_US,
#endif
};

static int akbd_is_console;

static int
akbdmatch(struct device *parent, void *cf, void *aux)
{
	struct adb_attach_args *aa_args = aux;

	if (aa_args->origaddr == ADBADDR_KBD)
		return 1;
	else
		return 0;
}

static void
akbdattach(struct device *parent, struct device *self, void *aux)
{
	ADBSetInfoBlock adbinfo;
	struct akbd_softc *sc = (struct akbd_softc *)self;
	struct adb_attach_args *aa_args = aux;
	int error, kbd_done;
	short cmd;
	u_char buffer[9];
	struct wskbddev_attach_args a;

	sc->origaddr = aa_args->origaddr;
	sc->adbaddr = aa_args->adbaddr;
	sc->handler_id = aa_args->handler_id;

	sc->sc_leds = (u_int8_t)0x00;	/* initially off */

	adbinfo.siServiceRtPtr = (Ptr)kbd_adbcomplete;
	adbinfo.siDataAreaAddr = (caddr_t)sc;

	printf(": ");
	switch (sc->handler_id) {
	case ADB_STDKBD:
		printf("standard keyboard\n");
		break;
	case ADB_ISOKBD:
		printf("standard keyboard (ISO layout)\n");
		break;
	case ADB_EXTKBD:
		cmd = ADBTALK(sc->adbaddr, 1);
		kbd_done =
		    (adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd) == 0);

		/* Ignore Logitech MouseMan/Trackman pseudo keyboard */
		if (kbd_done && buffer[1] == 0x9a && buffer[2] == 0x20) {
			printf("Mouseman (non-EMP) pseudo keyboard\n");
			adbinfo.siServiceRtPtr = (Ptr)0;
			adbinfo.siDataAreaAddr = (Ptr)0;
		} else if (kbd_done && buffer[1] == 0x9a && buffer[2] == 0x21) {
			printf("Trackman (non-EMP) pseudo keyboard\n");
			adbinfo.siServiceRtPtr = (Ptr)0;
			adbinfo.siDataAreaAddr = (Ptr)0;
		} else {
			printf("extended keyboard\n");
#ifdef notyet
			blinkleds(sc);
#endif
		}
		break;
	case ADB_EXTISOKBD:
		printf("extended keyboard (ISO layout)\n");
#ifdef notyet
		blinkleds(sc);
#endif
		break;
	case ADB_KBDII:
		printf("keyboard II\n");
		break;
	case ADB_ISOKBDII:
		printf("keyboard II (ISO layout)\n");
		break;
	case ADB_PBKBD:
		printf("PowerBook keyboard\n");
		break;
	case ADB_PBISOKBD:
		printf("PowerBook keyboard (ISO layout)\n");
		break;
	case ADB_ADJKPD:
		printf("adjustable keypad\n");
		break;
	case ADB_ADJKBD:
		printf("adjustable keyboard\n");
		break;
	case ADB_ADJISOKBD:
		printf("adjustable keyboard (ISO layout)\n");
		break;
	case ADB_ADJJAPKBD:
		printf("adjustable keyboard (Japanese layout)\n");
		break;
	case ADB_PBEXTISOKBD:
		printf("PowerBook extended keyboard (ISO layout)\n");
		break;
	case ADB_PBEXTJAPKBD:
		printf("PowerBook extended keyboard (Japanese layout)\n");
		break;
	case ADB_JPKBDII:
		printf("keyboard II (Japanese layout)\n");
		break;
	case ADB_PBEXTKBD:
		printf("PowerBook extended keyboard\n");
		break;
	case ADB_DESIGNKBD:
		printf("extended keyboard\n");
#ifdef notyet
		blinkleds(sc);
#endif
		break;
	case ADB_PBJPKBD:
		printf("PowerBook keyboard (Japanese layout)\n");
		break;
	case ADB_PBG3JPKBD:
		printf("PowerBook G3 keyboard (Japanese layout)\n");
		break;
	case ADB_PBG4KBD:
		printf("PowerBook G4 keyboard (Inverted T)\n");
		break;
	case ADB_IBITISOKBD:
		printf("iBook keyboard with inverted T (ISO layout)\n");
		break;
	default:
		printf("mapped device (%d)\n", sc->handler_id);
		break;
	}
	error = SetADBInfo(&adbinfo, sc->adbaddr);
#ifdef ADB_DEBUG
	if (adb_debug)
		printf("akbd: returned %d from SetADBInfo\n", error);
#endif

#ifdef WSDISPLAY_COMPAT_RAWKBD
	timeout_set(&sc->sc_rawrepeat_ch, akbd_rawrepeat, sc);
#endif


	a.console = akbd_is_console;
	a.keymap = &akbd_keymapdata;
	a.accessops = &akbd_accessops;
	a.accesscookie = sc;

	sc->sc_wskbddev = config_found(self, &a, wskbddevprint);
}


/*
 * Handle putting the keyboard data received from the ADB into
 * an ADB event record.
 */
void
kbd_adbcomplete(caddr_t buffer, caddr_t data_area, int adb_command)
{
	adb_event_t event;
	struct akbd_softc *ksc;
	int adbaddr;
#ifdef ADB_DEBUG
	int i;

	if (adb_debug)
		printf("adb: transaction completion\n");
#endif

	adbaddr = ADB_CMDADDR(adb_command);
	ksc = (struct akbd_softc *)data_area;

	event.addr = adbaddr;
	event.hand_id = ksc->handler_id;
	event.def_addr = ksc->origaddr;
	event.byte_count = buffer[0];
	memcpy(event.bytes, buffer + 1, event.byte_count);

#ifdef ADB_DEBUG
	if (adb_debug) {
		printf("akbd: from %d at %d (org %d) %d:", event.addr,
		    event.hand_id, event.def_addr, buffer[0]);
		for (i = 1; i <= buffer[0]; i++)
			printf(" %x", buffer[i]);
		printf("\n");
	}
#endif

	microtime(&event.timestamp);

	kbd_processevent(&event, ksc);
}

/*
 * Given a keyboard ADB event, record the keycodes and call the key
 * repeat handler, optionally passing the event through the mouse
 * button emulation handler first.
 */
static void
kbd_processevent(adb_event_t *event, struct akbd_softc *ksc)
{
        adb_event_t new_event;

        new_event = *event;
	new_event.u.k.key = event->bytes[0];
	new_event.bytes[1] = 0xff;
	akbd_intr(&new_event);
	if (event->bytes[1] != 0xff) {
		new_event.u.k.key = event->bytes[1];
		new_event.bytes[0] = event->bytes[1];
		new_event.bytes[1] = 0xff;
		akbd_intr(&new_event);
	}

}

#ifdef notyet
/*
 * Get the actual hardware LED state and convert it to softc format.
 */
static u_char
getleds(int addr)
{
	short cmd;
	u_char buffer[9], leds;

	leds = 0x00;	/* all off */
	buffer[0] = 0;

	/* talk R2 */
	cmd = ADBTALK(addr, 2);
	if (adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd) == 0 &&
	    buffer[0] > 0)
		leds = ~(buffer[2]) & 0x07;

	return (leds);
}

/*
 * Set the keyboard LED's.
 *
 * Automatically translates from ioctl/softc format to the
 * actual keyboard register format
 */
static int
setleds(struct akbd_softc *ksc, u_char leds)
{
	int addr;
	short cmd;
	u_char buffer[9];

	if ((leds & 0x07) == (ksc->sc_leds & 0x07))
		return (0);

	addr = ksc->adbaddr;
	buffer[0] = 0;

	cmd = ADBTALK(addr, 2);
	if (adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd) || buffer[0] == 0)
		return (EIO);

	leds = ~leds & 0x07;
	buffer[2] &= 0xf8;
	buffer[2] |= leds;

	cmd = ADBLISTEN(addr, 2);
	adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd);

	cmd = ADBTALK(addr, 2);
	if (adb_op_sync((Ptr)buffer, (Ptr)0, (Ptr)0, cmd) || buffer[0] == 0)
		return (EIO);

	ksc->sc_leds = ~((u_int8_t)buffer[2]) & 0x07;

	if ((buffer[2] & 0xf8) != leds)
		return (EIO);
	else
		return (0);
}

/*
 * Toggle all of the LED's on and off, just for show.
 */
static void
blinkleds(struct akbd_softc *ksc)
{
	int addr, i;
	u_char blinkleds, origleds;

	addr = ksc->adbaddr;
	origleds = getleds(addr);
	blinkleds = LED_NUMLOCK | LED_CAPSLOCK | LED_SCROLL_LOCK;

	(void)setleds(ksc, blinkleds);

	for (i = 0; i < 10000; i++)
		delay(50);

	/* make sure that we restore the LED settings */
	i = 10;
	do {
		(void)setleds(ksc, (u_char)0x00);
	} while (setleds(ksc, (u_char)0x00) && (i-- > 0));

	return;
}
#endif

int
akbd_enable(void *v, int on)
{
	return 0;
}

void
akbd_set_leds(void *v, int on)
{
}

int
akbd_ioctl(void *v, u_long cmd, caddr_t data, int flag, struct proc *p)
{
#ifdef WSDISPLAY_COMPAT_RAWKBD
	struct akbd_softc *sc = v;
#endif

	switch (cmd) {

	case WSKBDIO_GTYPE:
		*(int *)data = WSKBD_TYPE_ADB;
		return 0;
	case WSKBDIO_SETLEDS:
		return 0;
	case WSKBDIO_GETLEDS:
		*(int *)data = 0;
		return 0;
#ifdef WSDISPLAY_COMPAT_RAWKBD
	case WSKBDIO_SETMODE:
		sc->sc_rawkbd = *(int *)data == WSKBD_RAW;
		timeout_del(&sc->sc_rawrepeat_ch);
		return (0);
#endif

	}
	/* kbdioctl(...); */

	return -1;
}

#ifdef WSDISPLAY_COMPAT_RAWKBD
void
akbd_rawrepeat(void *v)
{
	struct akbd_softc *sc = v;
	int s;

	s = spltty();
	wskbd_rawinput(sc->sc_wskbddev, sc->sc_rep, sc->sc_nrep);
	splx(s);
	timeout_add(&sc->sc_rawrepeat_ch, hz * REP_DELAYN / 1000);
}
#endif


static int polledkey;

int
akbd_intr(adb_event_t *event)
{
	int key, press, val;
	int type;
	static int shift;

	struct akbd_softc *sc = akbd_cd.cd_devs[0];

	key = event->u.k.key;

	/*
	 * Caps lock is weird. The key sequence generated is:
	 * press:   down(57) [57]  (LED turns on)
	 * release: up(127)  [255]
	 * press:   up(127)  [255]
	 * release: up(57)   [185] (LED turns off)
	 */
	if (ADBK_KEYVAL(key) == ADBK_CAPSLOCK)
		shift = 0;

	if (key == 255) {
		if (shift == 0) {
			key = ADBK_KEYUP(ADBK_CAPSLOCK);
			shift = 1;
		} else {
			key = ADBK_KEYDOWN(ADBK_CAPSLOCK);
			shift = 0;
		}
	}

	press = ADBK_PRESS(key);
	val = ADBK_KEYVAL(key);

	type = press ? WSCONS_EVENT_KEY_DOWN : WSCONS_EVENT_KEY_UP;

	switch (val) {
#if 0
	/* not supported... */
	case ADBK_KEYVAL(245):
		pm_eject_pcmcia(0);
		break;
	case ADBK_KEYVAL(244):
		pm_eject_pcmcia(1);
		break;
#endif
	}

	if (adb_polling) {
		polledkey = key;
#ifdef WSDISPLAY_COMPAT_RAWKBD
	} else if (sc->sc_rawkbd) {
		char cbuf[MAXKEYS *2];
		int c, j, s;
		int npress;

		j = npress = 0;

		c = keyboard[val][3];
		if (c == 0) {
			return 0; /* XXX */
		}
		if (c & 0x80)
			cbuf[j++] = 0xe0;
		cbuf[j] = c & 0x7f;
		if (type == WSCONS_EVENT_KEY_UP) {
			cbuf[j] |= 0x80;
		} else {
			/* this only records last key pressed */
			if (c & 0x80)
				sc->sc_rep[npress++] = 0xe0;
			sc->sc_rep[npress++] = c & 0x7f;
		}
		j++;
		s = spltty();
		wskbd_rawinput(sc->sc_wskbddev, cbuf, j);
		splx(s);
		timeout_del(&sc->sc_rawrepeat_ch);
		sc->sc_nrep = npress;
		if (npress != 0)
			timeout_add(&sc->sc_rawrepeat_ch, hz * REP_DELAY1/1000);
		return 0;
#endif
	} else {
		wskbd_input(sc->sc_wskbddev, type, val);
	}

	return 0;
}

int
akbd_cnattach()
{

	akbd_is_console = 1;
	wskbd_cnattach(&akbd_consops, NULL, &akbd_keymapdata);
	return 0;
}

void
akbd_cngetc(void *v, u_int *type, int *data)
{
	int key, press, val;
	int s;

	s = splhigh();

	polledkey = -1;
	adb_polling = 1;

	while (polledkey == -1) {
		adb_intr(NULL); /* adb does not use the argument */
		DELAY(10000);				/* XXX */
	}

	adb_polling = 0;
	splx(s);

	key = polledkey;
	press = ADBK_PRESS(key);
	val = ADBK_KEYVAL(key);

	*data = val;
	*type = press ? WSCONS_EVENT_KEY_DOWN : WSCONS_EVENT_KEY_UP;
}

void
akbd_cnpollc(void *v, int on)
{
}
@


1.20
log
@Display unhandled adb devices as "whatever at adb0 addr X" like all buses do;
while there, make the detailed descriptions dependent on ADBVERBOSE (enabled
in GENERIC) instead of DIAGNOSTIC.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.19 2005/12/21 18:50:52 miod Exp $	*/
@


1.19
log
@Remove aed(4) on macppc, nothing uses its functionality since key repeat is
handled by wscons and mouse emulation was never enabled or documented.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.18 2005/11/21 18:16:37 millert Exp $	*/
d144 1
@


1.18
log
@Move contents of sys/select.h to sys/selinfo.h in preparation for a
userland-visible sys/select.h.  Consistent with what Net and Free do.
OK deraadt@@, tested with full ports build by naddy@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.17 2005/10/15 15:01:23 martin Exp $	*/
a54 1
#include <macppc/dev/aedvar.h>
a58 2
#include "aed.h"

a310 3
#if NAED > 0
	aed_input(&new_event);
#endif
a315 3
#if NAED > 0
		aed_input(&new_event);
#endif
@


1.17
log
@- merge adb_direct.h bits into adbvar.h
- rename ADB_HW_PB to ADB_HW_PMU

from NetBSD

ok brad@@; additonal testing krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.16 2003/10/16 03:54:48 deraadt Exp $	*/
d40 1
a40 1
#include <sys/select.h>
@


1.16
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.15 2003/10/16 03:31:25 drahn Exp $	*/
a58 1
#include <macppc/dev/adb_direct.h>
@


1.15
log
@more ANSI/KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.14 2002/09/15 09:01:58 deraadt Exp $	*/
d264 1
a264 1
void 
d302 1
a302 1
 * Given a keyboard ADB event, record the keycodes and call the key 
d354 1
a354 1
 * 
d358 1
a358 1
static int 
d391 1
a391 1
		return (0); 
d397 1
a397 1
static void 
d416 1
a416 1
	} while (setleds(ksc, (u_char)0x00) && (i-- > 0)); 
d470 1
a470 1
	s = spltty();   
d533 1
a533 1
		int c, j, s; 
@


1.14
log
@backout premature
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.12 2002/06/23 23:19:46 itojun Exp $	*/
d118 1
a118 4
akbdmatch(parent, cf, aux)
	struct device *parent;
	void *cf;
	void   *aux;
d129 1
a129 3
akbdattach(parent, self, aux)
	struct device *parent, *self;
	void   *aux;
d265 1
a265 4
kbd_adbcomplete(buffer, data_area, adb_command)
	caddr_t buffer;
	caddr_t data_area;
	int adb_command;
d307 1
a307 3
kbd_processevent(event, ksc)
        adb_event_t *event;
        struct akbd_softc *ksc;
d335 1
a335 2
getleds(addr)
	int	addr;
d359 1
a359 3
setleds(ksc, leds)
	struct akbd_softc *ksc;
	u_char	leds;
d398 1
a398 2
blinkleds(ksc)
	struct akbd_softc *ksc;
d423 1
a423 3
akbd_enable(v, on)
	void *v;
	int on;
d429 1
a429 3
akbd_set_leds(v, on)
	void *v;
	int on;
d434 1
a434 6
akbd_ioctl(v, cmd, data, flag, p)
	void *v;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
d481 1
a481 2
akbd_intr(event)
	adb_event_t *event;
d580 1
a580 4
akbd_cngetc(v, type, data)
	void *v;
	u_int *type;
	int *data;
d607 1
a607 3
akbd_cnpollc(v, on)
	void *v;
	int on;
@


1.13
log
@KNF
@
text
@d269 1
a269 1
void
d310 1
a310 1
 * Given a keyboard ADB event, record the keycodes and call the key
d316 2
a317 2
	adb_event_t *event;
	struct akbd_softc *ksc;
d319 1
a319 1
	adb_event_t new_event;
d321 1
a321 1
	new_event = *event;
d365 1
a365 1
 *
d369 1
a369 1
static int
d404 1
a404 1
		return (0);
d410 1
a410 1
static void
d430 1
a430 1
	} while (setleds(ksc, (u_char)0x00) && (i-- > 0));
d493 1
a493 1
	s = spltty();
d557 1
a557 1
		int c, j, s;
@


1.12
log
@make CAPS_IS_CONTROL a default.  pvalchev ok
(translates weird ADB capslock keycode to more normal behavior)
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.11 2002/06/18 03:32:41 itojun Exp $	*/
d269 1
a269 1
void 
d310 1
a310 1
 * Given a keyboard ADB event, record the keycodes and call the key 
d316 2
a317 2
        adb_event_t *event;
        struct akbd_softc *ksc;
d319 1
a319 1
        adb_event_t new_event;
d321 1
a321 1
        new_event = *event;
d365 1
a365 1
 * 
d369 1
a369 1
static int 
d404 1
a404 1
		return (0); 
d410 1
a410 1
static void 
d430 1
a430 1
	} while (setleds(ksc, (u_char)0x00) && (i-- > 0)); 
d493 1
a493 1
	s = spltty();   
d557 1
a557 1
		int c, j, s; 
@


1.11
log
@"option CAPS_IS_CONTROL" will enable use of caps key as control
(need wsconsctl keymap too)
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.10 2002/06/07 07:14:48 miod Exp $	*/
a508 1
#ifdef CAPS_IS_CONTROL
a509 1
#endif
a514 1
#ifdef CAPS_IS_CONTROL
a533 1
#endif
a540 8
#ifndef CAPS_IS_CONTROL
	case ADBK_CAPSLOCK:
		type = WSCONS_EVENT_KEY_DOWN;
		wskbd_input(sc->sc_wskbddev, type, val);
		type = WSCONS_EVENT_KEY_UP;
		break;
#endif

@


1.10
log
@Vacuum cleaning of the adb code, step 1: random KNF, remove mac68k
leftovers, unused variables and functions, fix some comments, etc.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.9 2002/03/28 04:17:40 drahn Exp $	*/
d509 3
d516 23
d545 1
d551 1
@


1.9
log
@Remove debugging that was forgotten.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.8 2002/03/28 01:27:23 miod Exp $	*/
a59 1
#include <macppc/dev/pm_direct.h>
a84 2
extern struct cfdriver akbd_cd;

a501 1
extern int adb_polling;
@


1.8
log
@Replace magic values with appropriate constants.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.7 2002/03/28 01:05:18 miod Exp $	*/
a477 3
		printf("akbd_ioctl: set raw = %d\n", *(int *)data);
		/*
		*/
@


1.7
log
@Doh, I'm on drugs.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.6 2002/03/28 01:02:55 miod Exp $	*/
d525 2
a526 3
	switch (key) {
	case 57:	/* Caps Lock pressed */
	case 185:	/* Caps Lock released */
d531 1
d534 1
a534 1
	case 245:
d537 1
a537 1
	case 244:
@


1.6
log
@Better fix.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.5 2002/03/28 00:58:27 deraadt Exp $	*/
a515 3
#ifdef WSDISPLAY_COMPAT_RAWKBD
	int s;
#endif
@


1.5
log
@be more careful about breaking the RAMDISK guys
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.4 2002/03/27 21:48:12 drahn Exp $	*/
d516 3
@


1.4
log
@add WSDISPLAY_COMPAT_RAWKBD support for macppc, not complete yet, Fx keys
are missing in translation table. Not enabled yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.3 2002/03/14 01:26:36 millert Exp $	*/
d462 1
d464 2
a515 1
	int s;
d548 1
a548 1
		int c, j; 
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.2 2001/09/01 17:43:08 drahn Exp $	*/
d35 2
d92 2
d254 5
d462 1
d473 10
d489 15
d513 1
d541 1
a541 1
	if (adb_polling)
d543 34
a576 1
	else
d578 1
@


1.2
log
@correct files for the powerpc/mac/ -> macppc/dev which did not get
renamed correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.1 2001/09/01 15:50:00 drahn Exp $	*/
d65 4
a68 4
static int	akbdmatch __P((struct device *, void *, void *));
static void	akbdattach __P((struct device *, struct device *, void *));
void		kbd_adbcomplete __P((caddr_t buffer, caddr_t data_area, int adb_command));
static void	kbd_processevent __P((adb_event_t *event, struct akbd_softc *));
d70 3
a72 3
static u_char	getleds __P((int));
static int	setleds __P((struct akbd_softc *, u_char));
static void	blinkleds __P((struct akbd_softc *));
d86 4
a89 4
int akbd_enable __P((void *, int));
void akbd_set_leds __P((void *, int));
int akbd_ioctl __P((void *, u_long, caddr_t, int, struct proc *));
int akbd_intr __P((adb_event_t *event));
d97 2
a98 2
void akbd_cngetc __P((void *, u_int *, int *));
void akbd_cnpollc __P((void *, int));
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.2 2001/09/01 17:43:08 drahn Exp $	*/
a34 2
#include <sys/timeout.h>
#include <sys/kernel.h>
d58 1
d65 4
a68 4
static int	akbdmatch(struct device *, void *, void *);
static void	akbdattach(struct device *, struct device *, void *);
void		kbd_adbcomplete(caddr_t buffer, caddr_t data_area, int adb_command);
static void	kbd_processevent(adb_event_t *event, struct akbd_softc *);
d70 3
a72 3
static u_char	getleds(int);
static int	setleds(struct akbd_softc *, u_char);
static void	blinkleds(struct akbd_softc *);
d84 1
a84 5
int akbd_enable(void *, int);
void akbd_set_leds(void *, int);
int akbd_ioctl(void *, u_long, caddr_t, int, struct proc *);
int akbd_intr(adb_event_t *event);
void akbd_rawrepeat(void *v);
d86 4
d97 2
a98 2
void akbd_cngetc(void *, u_int *, int *);
void akbd_cnpollc(void *, int);
a249 5
#ifdef WSDISPLAY_COMPAT_RAWKBD
	timeout_set(&sc->sc_rawrepeat_ch, akbd_rawrepeat, sc);
#endif


a452 4
#ifdef WSDISPLAY_COMPAT_RAWKBD
	struct akbd_softc *sc = v;
#endif

a462 7
#ifdef WSDISPLAY_COMPAT_RAWKBD
	case WSKBDIO_SETMODE:
		sc->sc_rawkbd = *(int *)data == WSKBD_RAW;
		timeout_del(&sc->sc_rawrepeat_ch);
		return (0);
#endif

a468 15
#ifdef WSDISPLAY_COMPAT_RAWKBD
void
akbd_rawrepeat(void *v)
{
	struct akbd_softc *sc = v;
	int s;

	s = spltty();   
	wskbd_rawinput(sc->sc_wskbddev, sc->sc_rep, sc->sc_nrep);
	splx(s);
	timeout_add(&sc->sc_rawrepeat_ch, hz * REP_DELAYN / 1000);
}
#endif


d470 1
d487 3
a489 2
	switch (val) {
	case ADBK_CAPSLOCK:
a493 1

d496 1
a496 1
	case ADBK_KEYVAL(245):
d499 1
a499 1
	case ADBK_KEYVAL(244):
d505 1
a505 1
	if (adb_polling) {
d507 1
a507 34
#ifdef WSDISPLAY_COMPAT_RAWKBD
	} else if (sc->sc_rawkbd) {
		char cbuf[MAXKEYS *2];
		int c, j, s; 
		int npress;

		j = npress = 0;

		c = keyboard[val][3];
		if (c == 0) {
			return 0; /* XXX */
		}
		if (c & 0x80)
			cbuf[j++] = 0xe0;
		cbuf[j] = c & 0x7f;
		if (type == WSCONS_EVENT_KEY_UP) {
			cbuf[j] |= 0x80;
		} else {
			/* this only records last key pressed */
			if (c & 0x80)
				sc->sc_rep[npress++] = 0xe0;
			sc->sc_rep[npress++] = c & 0x7f;
		}
		j++;
		s = spltty();
		wskbd_rawinput(sc->sc_wskbddev, cbuf, j);
		splx(s);
		timeout_del(&sc->sc_rawrepeat_ch);
		sc->sc_nrep = npress;
		if (npress != 0)
			timeout_add(&sc->sc_rawrepeat_ch, hz * REP_DELAY1/1000);
		return 0;
#endif
	} else {
a508 1
	}
@


1.2.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.2.6.1 2002/06/11 03:36:33 art Exp $	*/
a508 1
	static int shift;
a512 21

	/*
	 * Caps lock is weird. The key sequence generated is:
	 * press:   down(57) [57]  (LED turns on)
	 * release: up(127)  [255]
	 * press:   up(127)  [255]
	 * release: up(57)   [185] (LED turns off)
	 */
	if (ADBK_KEYVAL(key) == ADBK_CAPSLOCK)
		shift = 0;

	if (key == 255) {
		if (shift == 0) {
			key = ADBK_KEYUP(ADBK_CAPSLOCK);
			shift = 1;
		} else {
			key = ADBK_KEYDOWN(ADBK_CAPSLOCK);
			shift = 0;
		}
	}

d519 6
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.4.2
log
@Merge in -current from about a week ago
@
text
@d65 4
a68 4
static int	akbdmatch(struct device *, void *, void *);
static void	akbdattach(struct device *, struct device *, void *);
void		kbd_adbcomplete(caddr_t buffer, caddr_t data_area, int adb_command);
static void	kbd_processevent(adb_event_t *event, struct akbd_softc *);
d70 3
a72 3
static u_char	getleds(int);
static int	setleds(struct akbd_softc *, u_char);
static void	blinkleds(struct akbd_softc *);
d86 4
a89 4
int akbd_enable(void *, int);
void akbd_set_leds(void *, int);
int akbd_ioctl(void *, u_long, caddr_t, int, struct proc *);
int akbd_intr(adb_event_t *event);
d97 2
a98 2
void akbd_cngetc(void *, u_int *, int *);
void akbd_cnpollc(void *, int);
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@a34 2
#include <sys/timeout.h>
#include <sys/kernel.h>
d58 1
d84 2
a89 2
void akbd_rawrepeat(void *v);

a249 5
#ifdef WSDISPLAY_COMPAT_RAWKBD
	timeout_set(&sc->sc_rawrepeat_ch, akbd_rawrepeat, sc);
#endif


a452 4
#ifdef WSDISPLAY_COMPAT_RAWKBD
	struct akbd_softc *sc = v;
#endif

a462 7
#ifdef WSDISPLAY_COMPAT_RAWKBD
	case WSKBDIO_SETMODE:
		sc->sc_rawkbd = *(int *)data == WSKBD_RAW;
		timeout_del(&sc->sc_rawrepeat_ch);
		return (0);
#endif

a468 15
#ifdef WSDISPLAY_COMPAT_RAWKBD
void
akbd_rawrepeat(void *v)
{
	struct akbd_softc *sc = v;
	int s;

	s = spltty();   
	wskbd_rawinput(sc->sc_wskbddev, sc->sc_rep, sc->sc_nrep);
	splx(s);
	timeout_add(&sc->sc_rawrepeat_ch, hz * REP_DELAYN / 1000);
}
#endif


d470 1
a477 1
	static int shift;
a481 21

	/*
	 * Caps lock is weird. The key sequence generated is:
	 * press:   down(57) [57]  (LED turns on)
	 * release: up(127)  [255]
	 * press:   up(127)  [255]
	 * release: up(57)   [185] (LED turns off)
	 */
	if (ADBK_KEYVAL(key) == ADBK_CAPSLOCK)
		shift = 0;

	if (key == 255) {
		if (shift == 0) {
			key = ADBK_KEYUP(ADBK_CAPSLOCK);
			shift = 1;
		} else {
			key = ADBK_KEYDOWN(ADBK_CAPSLOCK);
			shift = 0;
		}
	}

d487 7
a493 1
	switch (val) {
d496 1
a496 1
	case ADBK_KEYVAL(245):
d499 1
a499 1
	case ADBK_KEYVAL(244):
d505 1
a505 1
	if (adb_polling) {
d507 1
a507 34
#ifdef WSDISPLAY_COMPAT_RAWKBD
	} else if (sc->sc_rawkbd) {
		char cbuf[MAXKEYS *2];
		int c, j, s; 
		int npress;

		j = npress = 0;

		c = keyboard[val][3];
		if (c == 0) {
			return 0; /* XXX */
		}
		if (c & 0x80)
			cbuf[j++] = 0xe0;
		cbuf[j] = c & 0x7f;
		if (type == WSCONS_EVENT_KEY_UP) {
			cbuf[j] |= 0x80;
		} else {
			/* this only records last key pressed */
			if (c & 0x80)
				sc->sc_rep[npress++] = 0xe0;
			sc->sc_rep[npress++] = c & 0x7f;
		}
		j++;
		s = spltty();
		wskbd_rawinput(sc->sc_wskbddev, cbuf, j);
		splx(s);
		timeout_del(&sc->sc_rawrepeat_ch);
		sc->sc_nrep = npress;
		if (npress != 0)
			timeout_add(&sc->sc_rawrepeat_ch, hz * REP_DELAY1/1000);
		return 0;
#endif
	} else {
a508 1
	}
@


1.2.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d118 4
a121 1
akbdmatch(struct device *parent, void *cf, void *aux)
d132 3
a134 1
akbdattach(struct device *parent, struct device *self, void *aux)
d269 5
a273 2
void
kbd_adbcomplete(caddr_t buffer, caddr_t data_area, int adb_command)
d310 1
a310 1
 * Given a keyboard ADB event, record the keycodes and call the key
d315 3
a317 1
kbd_processevent(adb_event_t *event, struct akbd_softc *ksc)
d345 2
a346 1
getleds(int addr)
d365 1
a365 1
 *
d369 4
a372 2
static int
setleds(struct akbd_softc *ksc, u_char leds)
d404 1
a404 1
		return (0);
d410 3
a412 2
static void
blinkleds(struct akbd_softc *ksc)
d430 1
a430 1
	} while (setleds(ksc, (u_char)0x00) && (i-- > 0));
d437 3
a439 1
akbd_enable(void *v, int on)
d445 3
a447 1
akbd_set_leds(void *v, int on)
d452 6
a457 1
akbd_ioctl(void *v, u_long cmd, caddr_t data, int flag, struct proc *p)
d493 1
a493 1
	s = spltty();
d504 2
a505 1
akbd_intr(adb_event_t *event)
d557 1
a557 1
		int c, j, s;
d604 4
a607 1
akbd_cngetc(void *v, u_int *type, int *data)
d634 3
a636 1
akbd_cnpollc(void *v, int on)
@


1.1
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/mac to macppc/dev
@
text
@d1 1
a1 1
/*	$OpenBSD: akbd.c,v 1.10 2001/07/25 08:21:08 maja Exp $	*/
d51 8
a58 8
#include <macppc/mac/keyboard.h>
#include <macppc/mac/adbvar.h>
#include <macppc/mac/aedvar.h>
#include <macppc/mac/akbdmap.h>
#include <macppc/mac/akbdvar.h>
#include <macppc/mac/amsvar.h>
#include <macppc/mac/adb_direct.h>
#include <macppc/mac/pm_direct.h>
@

