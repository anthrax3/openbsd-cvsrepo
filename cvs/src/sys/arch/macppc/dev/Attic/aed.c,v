head	1.10;
access;
symbols
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.6.0.6
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.6
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2005.12.21.18.50.52;	author miod;	state dead;
branches;
next	1.9;

1.9
date	2005.11.21.18.16.37;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.16.03.54.48;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.10.16.03.31.25;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.15.09.01.58;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.15.02.02.43;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.07.14.48;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.01.17.43.08;	author drahn;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.09.01.15.50.00;	author drahn;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.01.15;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.10.36.01;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.27.23.29.46;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2004.02.19.10.49.03;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.36.33;	author art;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.10.29.00.28.06;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove aed(4) on macppc, nothing uses its functionality since key repeat is
handled by wscons and mouse emulation was never enabled or documented.
@
text
@/*	$OpenBSD: aed.c,v 1.9 2005/11/21 18:16:37 millert Exp $	*/
/*	$NetBSD: aed.c,v 1.5 2000/03/23 06:40:33 thorpej Exp $	*/

/*
 * Copyright (C) 1994	Bradley A. Grantham
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bradley A. Grantham.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/fcntl.h>
#include <sys/poll.h>
#include <sys/selinfo.h>
#include <sys/proc.h>
#include <sys/signalvar.h>
#include <sys/systm.h>

#include <machine/autoconf.h>
#include <machine/conf.h>
#include <machine/cpu.h>

#include <macppc/dev/keyboard.h>
#include <macppc/dev/adbvar.h>
#include <macppc/dev/aedvar.h>
#include <macppc/dev/akbdvar.h>

#define spladb splhigh

/*
 * Function declarations.
 */
int	aedmatch(struct device *, void *, void *);
void	aedattach(struct device *, struct device *, void *);
void	aed_emulate_mouse(adb_event_t *event);
void	aed_kbdrpt(void *kstate);
void	aed_dokeyupdown(adb_event_t *event);
void	aed_handoff(adb_event_t *event);
void	aed_enqevent(adb_event_t *event);

/*
 * Local variables.
 */
struct aed_softc *aed_sc = NULL;
int aed_options = 0; /* | AED_MSEMUL; */

/* Driver definition */
struct cfdriver aed_cd = {
	NULL, "aed", DV_DULL
};
/* Driver definition */
struct cfattach aed_ca = {
	sizeof(struct aed_softc), aedmatch, aedattach
};

int
aedmatch(struct device *parent, void *cf, void *aux)
{
	struct adb_attach_args *aa_args = (struct adb_attach_args *)aux;
	static int aed_matched = 0;

	/* Allow only one instance. */
        if ((aa_args->origaddr == 0) && (!aed_matched)) {
		aed_matched = 1;
                return (1);
        } else
                return (0);
}

void
aedattach(struct device *parent, struct device *self, void *aux)
{
	struct adb_attach_args *aa_args = (struct adb_attach_args *)aux;
	struct aed_softc *sc = (struct aed_softc *)self;

	aed_sc = sc;

	timeout_set(&sc->sc_repeat_ch, aed_kbdrpt, aed_sc);

	sc->origaddr = aa_args->origaddr;
	sc->adbaddr = aa_args->adbaddr;
	sc->handler_id = aa_args->handler_id;

	sc->sc_evq_tail = 0;
	sc->sc_evq_len = 0;

	sc->sc_rptdelay = 20;
	sc->sc_rptinterval = 6;
	sc->sc_repeating = -1;          /* not repeating */

	/* Pull in the options flags. */
	sc->sc_options = (sc->sc_dev.dv_cfdata->cf_flags | aed_options);

	sc->sc_ioproc = NULL;

	sc->sc_buttons = 0;

	sc->sc_open = 0;

	printf("ADB Event device\n");
}

/*
 * Given a keyboard ADB event, record the keycode and call the key
 * repeat handler, optionally passing the event through the mouse
 * button emulation handler first.  Pass mouse events directly to
 * the handoff function.
 */
void
aed_input(adb_event_t *event)
{
        adb_event_t new_event = *event;

	switch (event->def_addr) {
	case ADBADDR_KBD:
		if (aed_sc->sc_options & AED_MSEMUL)
			aed_emulate_mouse(&new_event);
		else
			aed_dokeyupdown(&new_event);
		break;
	case ADBADDR_MS:
		new_event.u.m.buttons |= aed_sc->sc_buttons;
		aed_handoff(&new_event);
		break;
	default:                /* God only knows. */
#ifdef DIAGNOSTIC
		panic("aed: received event from unsupported device!");
#endif
		break;
	}

}

/*
 * Handles mouse button emulation via the keyboard.  If the emulation
 * modifier key is down, left and right arrows will generate 2nd and
 * 3rd mouse button events while the 1, 2, and 3 keys will generate
 * the corresponding mouse button event.
 */
void
aed_emulate_mouse(adb_event_t *event)
{
	static int emulmodkey_down = 0;
	adb_event_t new_event;

	if (event->u.k.key == ADBK_KEYDOWN(ADBK_OPTION)) {
		emulmodkey_down = 1;
	} else if (event->u.k.key == ADBK_KEYUP(ADBK_OPTION)) {
		/* key up */
		emulmodkey_down = 0;
		if (aed_sc->sc_buttons & 0xfe) {
			aed_sc->sc_buttons &= 1;
			new_event.def_addr = ADBADDR_MS;
			new_event.u.m.buttons = aed_sc->sc_buttons;
			new_event.u.m.dx = new_event.u.m.dy = 0;
			microtime(&new_event.timestamp);
			aed_handoff(&new_event);
		}
	} else if (emulmodkey_down) {
		switch(event->u.k.key) {
#ifdef ALTXBUTTONS
		case ADBK_KEYDOWN(ADBK_1):
			aed_sc->sc_buttons |= 1;	/* left down */
			new_event.def_addr = ADBADDR_MS;
			new_event.u.m.buttons = aed_sc->sc_buttons;
			new_event.u.m.dx = new_event.u.m.dy = 0;
			microtime(&new_event.timestamp);
			aed_handoff(&new_event);
			break;
		case ADBK_KEYUP(ADBK_1):
			aed_sc->sc_buttons &= ~1;	/* left up */
			new_event.def_addr = ADBADDR_MS;
			new_event.u.m.buttons = aed_sc->sc_buttons;
			new_event.u.m.dx = new_event.u.m.dy = 0;
			microtime(&new_event.timestamp);
			aed_handoff(&new_event);
			break;
#endif
		case ADBK_KEYDOWN(ADBK_LEFT):
#ifdef ALTXBUTTONS
		case ADBK_KEYDOWN(ADBK_2):
#endif
			aed_sc->sc_buttons |= 2;	/* middle down */
			new_event.def_addr = ADBADDR_MS;
			new_event.u.m.buttons = aed_sc->sc_buttons;
			new_event.u.m.dx = new_event.u.m.dy = 0;
			microtime(&new_event.timestamp);
			aed_handoff(&new_event);
			break;
		case ADBK_KEYUP(ADBK_LEFT):
#ifdef ALTXBUTTONS
		case ADBK_KEYUP(ADBK_2):
#endif
			aed_sc->sc_buttons &= ~2;	/* middle up */
			new_event.def_addr = ADBADDR_MS;
			new_event.u.m.buttons = aed_sc->sc_buttons;
			new_event.u.m.dx = new_event.u.m.dy = 0;
			microtime(&new_event.timestamp);
			aed_handoff(&new_event);
			break;
		case ADBK_KEYDOWN(ADBK_RIGHT):
#ifdef ALTXBUTTONS
		case ADBK_KEYDOWN(ADBK_3):
#endif
			aed_sc->sc_buttons |= 4;	/* right down */
			new_event.def_addr = ADBADDR_MS;
			new_event.u.m.buttons = aed_sc->sc_buttons;
			new_event.u.m.dx = new_event.u.m.dy = 0;
			microtime(&new_event.timestamp);
			aed_handoff(&new_event);
			break;
		case ADBK_KEYUP(ADBK_RIGHT):
#ifdef ALTXBUTTONS
		case ADBK_KEYUP(ADBK_3):
#endif
			aed_sc->sc_buttons &= ~4;	/* right up */
			new_event.def_addr = ADBADDR_MS;
			new_event.u.m.buttons = aed_sc->sc_buttons;
			new_event.u.m.dx = new_event.u.m.dy = 0;
			microtime(&new_event.timestamp);
			aed_handoff(&new_event);
			break;
		case ADBK_KEYUP(ADBK_SHIFT):
		case ADBK_KEYDOWN(ADBK_SHIFT):
		case ADBK_KEYUP(ADBK_CONTROL):
		case ADBK_KEYDOWN(ADBK_CONTROL):
		case ADBK_KEYUP(ADBK_FLOWER):
		case ADBK_KEYDOWN(ADBK_FLOWER):
			/* ctrl, shift, cmd */
			aed_dokeyupdown(event);
			break;
		default:
			if (event->u.k.key & 0x80)
				/* ignore keyup */
				break;

			/* key down */
			new_event = *event;

			/* send option-down */
			new_event.u.k.key = ADBK_KEYDOWN(ADBK_OPTION);
			new_event.bytes[0] = new_event.u.k.key;
			microtime(&new_event.timestamp);
			aed_dokeyupdown(&new_event);

			/* send key-down */
			new_event.u.k.key = event->bytes[0];
			new_event.bytes[0] = new_event.u.k.key;
			microtime(&new_event.timestamp);
			aed_dokeyupdown(&new_event);

			/* send key-up */
			new_event.u.k.key =
				ADBK_KEYUP(ADBK_KEYVAL(event->bytes[0]));
			microtime(&new_event.timestamp);
			new_event.bytes[0] = new_event.u.k.key;
			aed_dokeyupdown(&new_event);

			/* send option-up */
			new_event.u.k.key = ADBK_KEYUP(ADBK_OPTION);
			new_event.bytes[0] = new_event.u.k.key;
			microtime(&new_event.timestamp);
			aed_dokeyupdown(&new_event);
			break;
		}
	} else {
		aed_dokeyupdown(event);
	}
}

/*
 * Keyboard autorepeat timeout function.  Sends key up/down events
 * for the repeating key and schedules the next call at sc_rptinterval
 * ticks in the future.
 */
void
aed_kbdrpt(void *kstate)
{
	struct aed_softc *aed_sc = (struct aed_softc *)kstate;

	aed_sc->sc_rptevent.bytes[0] |= 0x80;
	microtime(&aed_sc->sc_rptevent.timestamp);
	aed_handoff(&aed_sc->sc_rptevent);	/* do key up */

	aed_sc->sc_rptevent.bytes[0] &= 0x7f;
	microtime(&aed_sc->sc_rptevent.timestamp);
	aed_handoff(&aed_sc->sc_rptevent);	/* do key down */

	if (aed_sc->sc_repeating == aed_sc->sc_rptevent.u.k.key) {
		timeout_add(&aed_sc->sc_repeat_ch, aed_sc->sc_rptinterval);
	}
}


/*
 * Cancels the currently repeating key event if there is one, schedules
 * a new repeating key event if needed, and hands the event off to the
 * appropriate subsystem.
 */
void
aed_dokeyupdown(adb_event_t *event)
{
	int     kbd_key;

	kbd_key = ADBK_KEYVAL(event->u.k.key);
	if (ADBK_PRESS(event->u.k.key) && keyboard[kbd_key][0] != 0) {
		/* ignore shift & control */
		if (aed_sc->sc_repeating != -1)
			timeout_del(&aed_sc->sc_repeat_ch);

		aed_sc->sc_rptevent = *event;
		aed_sc->sc_repeating = kbd_key;
		timeout_add(&aed_sc->sc_repeat_ch, aed_sc->sc_rptdelay);
	} else {
		if (aed_sc->sc_repeating != -1) {
			aed_sc->sc_repeating = -1;
			timeout_del(&aed_sc->sc_repeat_ch);
		}
		aed_sc->sc_rptevent = *event;
	}
	aed_handoff(event);
}

/*
 * Place the event in the event queue if a requesting device is open
 * and we are not polling.
 */
void
aed_handoff(adb_event_t *event)
{
	if (aed_sc->sc_open && !adb_polling)
		aed_enqevent(event);
}

/*
 * Place the event in the event queue and wakeup any waiting processes.
 */
void
aed_enqevent(adb_event_t *event)
{
	int     s;

	s = spladb();

#ifdef DIAGNOSTIC
	if (aed_sc->sc_evq_tail < 0 || aed_sc->sc_evq_tail >= AED_MAX_EVENTS)
		panic("adb: event queue tail is out of bounds");

	if (aed_sc->sc_evq_len < 0 || aed_sc->sc_evq_len > AED_MAX_EVENTS)
		panic("adb: event queue len is out of bounds");
#endif

	if (aed_sc->sc_evq_len == AED_MAX_EVENTS) {
		splx(s);
		return;		/* Oh, well... */
	}
	aed_sc->sc_evq[(aed_sc->sc_evq_len + aed_sc->sc_evq_tail) %
	    AED_MAX_EVENTS] = *event;
	aed_sc->sc_evq_len++;

	selwakeup(&aed_sc->sc_selinfo);
	if (aed_sc->sc_ioproc)
		psignal(aed_sc->sc_ioproc, SIGIO);

	splx(s);
}

int
aedopen(dev_t dev, int flag, int mode, struct proc *p)
{
	int unit;
	int error = 0;
	int s;

	unit = minor(dev);

	if (unit != 0)
		return (ENXIO);

	s = spladb();
	if (aed_sc->sc_open) {
		splx(s);
		return (EBUSY);
	}
	aed_sc->sc_evq_tail = 0;
	aed_sc->sc_evq_len = 0;
	aed_sc->sc_open = 1;
	aed_sc->sc_ioproc = p;
	splx(s);

	return (error);
}


int
aedclose(dev_t dev, int flag, int mode, struct proc *p)
{
	int s = spladb();

	aed_sc->sc_open = 0;
	aed_sc->sc_ioproc = NULL;
	splx(s);

	return (0);
}


int
aedread(dev_t dev, struct uio *uio, int flag)
{
	int s, error;
	int willfit;
	int total;
	int firstmove;
	int moremove;

	if (uio->uio_resid < sizeof(adb_event_t))
		return (EMSGSIZE);	/* close enough. */

	s = spladb();
	if (aed_sc->sc_evq_len == 0) {
		splx(s);
		return (0);
	}
	willfit = howmany(uio->uio_resid, sizeof(adb_event_t));
	total = (aed_sc->sc_evq_len < willfit) ? aed_sc->sc_evq_len : willfit;

	firstmove = (aed_sc->sc_evq_tail + total > AED_MAX_EVENTS)
	    ? (AED_MAX_EVENTS - aed_sc->sc_evq_tail) : total;

	error = uiomove((caddr_t) & aed_sc->sc_evq[aed_sc->sc_evq_tail],
	    firstmove * sizeof(adb_event_t), uio);
	if (error) {
		splx(s);
		return (error);
	}
	moremove = total - firstmove;

	if (moremove > 0) {
		error = uiomove((caddr_t) & aed_sc->sc_evq[0],
		    moremove * sizeof(adb_event_t), uio);
		if (error) {
			splx(s);
			return (error);
		}
	}
	aed_sc->sc_evq_tail = (aed_sc->sc_evq_tail + total) % AED_MAX_EVENTS;
	aed_sc->sc_evq_len -= total;
	splx(s);
	return (0);
}


int
aedwrite(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
{
	return 0;
}


int
aedioctl(dev_t dev, u_long cmd, caddr_t data, int flag, struct proc *p)
{
	switch (cmd) {
	case ADBIOCDEVSINFO:
	{
		adb_devinfo_t *di;
		ADBDataBlock adbdata;
		int totaldevs;
		int adbaddr;
		int i;

		di = (void *)data;

		/* Initialize to no devices */
		for (i = 0; i < 16; i++)
			di->dev[i].addr = -1;

		totaldevs = CountADBs();
		for (i = 1; i <= totaldevs; i++) {
			adbaddr = GetIndADB(&adbdata, i);
			di->dev[adbaddr].addr = adbaddr;
			di->dev[adbaddr].default_addr = (int)(adbdata.origADBAddr);
			di->dev[adbaddr].handler_id = (int)(adbdata.devType);
		}

		/* Must call ADB Manager to get devices now */
	}
		break;

	case ADBIOCGETREPEAT:
	{
		adb_rptinfo_t *ri;

		ri = (void *)data;
		ri->delay_ticks = aed_sc->sc_rptdelay;
		ri->interval_ticks = aed_sc->sc_rptinterval;
	}
		break;

	case ADBIOCSETREPEAT:
	{
		adb_rptinfo_t *ri;

		ri = (void *) data;
		aed_sc->sc_rptdelay = ri->delay_ticks;
		aed_sc->sc_rptinterval = ri->interval_ticks;
	}
		break;

	case ADBIOCRESET:
		/* Do nothing for now */
		break;

	case ADBIOCLISTENCMD:
	{
		adb_listencmd_t *lc;

		lc = (void *)data;
	}
		/* FALLTHROUGH */

	default:
		return (EINVAL);
	}

	return (0);
}
@


1.9
log
@Move contents of sys/select.h to sys/selinfo.h in preparation for a
userland-visible sys/select.h.  Consistent with what Net and Free do.
OK deraadt@@, tested with full ports build by naddy@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: aed.c,v 1.8 2003/10/16 03:54:48 deraadt Exp $	*/
@


1.8
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: aed.c,v 1.7 2003/10/16 03:31:25 drahn Exp $	*/
d38 1
a38 1
#include <sys/select.h>
@


1.7
log
@more ANSI/KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: aed.c,v 1.6 2002/09/15 09:01:58 deraadt Exp $	*/
d115 1
a115 1
	/* Pull in the options flags. */ 
d119 1
a119 1
	
d128 1
a128 1
 * Given a keyboard ADB event, record the keycode and call the key 
d164 1
a164 1
void 
d300 1
a300 1
void 
d324 1
a324 1
void 
d362 1
a362 1
void 
d392 1
a392 1
int 
d419 1
a419 1
int 
d432 1
a432 1
int 
d478 1
a478 1
int 
d488 1
a488 1
int 
@


1.6
log
@backout premature
@
text
@d1 1
a1 1
/*	$OpenBSD: aed.c,v 1.4 2002/06/07 07:14:48 miod Exp $	*/
d81 1
a81 4
aedmatch(parent, cf, aux)
	struct device *parent;
	void *cf;
	void *aux;
d95 1
a95 3
aedattach(parent, self, aux)
	struct device *parent, *self;
	void   *aux;
d134 1
a134 2
aed_input(event)
        adb_event_t *event;
d165 1
a165 2
aed_emulate_mouse(event)
	adb_event_t *event;
d301 1
a301 2
aed_kbdrpt(kstate)
	void *kstate;
d325 1
a325 2
aed_dokeyupdown(event)
	adb_event_t *event;
d332 1
a332 1
		if (aed_sc->sc_repeating != -1) {
d334 1
a334 1
		}
d353 1
a353 2
aed_handoff(event)
	adb_event_t *event;
d363 1
a363 2
aed_enqevent(event)
	adb_event_t *event;
d393 1
a393 4
aedopen(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
d420 1
a420 4
aedclose(dev, flag, mode, p)
	dev_t dev;
	int flag, mode;
	struct proc *p;
d433 1
a433 4
aedread(dev, uio, flag)
	dev_t dev;
	struct uio *uio;
	int flag;
d489 1
a489 6
aedioctl(dev, cmd, data, flag, p)
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
@


1.5
log
@KNF
@
text
@d191 1
a191 1
		switch (event->u.k.key) {
@


1.4
log
@Vacuum cleaning of the adb code, step 1: random KNF, remove mac68k
leftovers, unused variables and functions, fix some comments, etc.
@
text
@d1 1
a1 1
/*	$OpenBSD: aed.c,v 1.3 2002/03/14 01:26:36 millert Exp $	*/
d191 1
a191 1
		switch(event->u.k.key) {
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: aed.c,v 1.2 2001/09/01 17:43:08 drahn Exp $	*/
d44 1
d57 7
a63 17
#ifdef __NetBSD__
static int	aedmatch(struct device *, struct cfdata *, void *);
#endif /* __NetBSD__ */
#ifdef __OpenBSD__
static int	aedmatch(struct device *, void *, void *);
#endif /* __OpenBSD__ */
static void	aedattach(struct device *, struct device *, void *);
static void	aed_emulate_mouse(adb_event_t *event);
static void	aed_kbdrpt(void *kstate);
static void	aed_dokeyupdown(adb_event_t *event);
static void	aed_handoff(adb_event_t *event);
static void	aed_enqevent(adb_event_t *event);

/*
 * Global variables.
 */
extern int adb_polling;			/* Are we polling?  (Debugger mode) */
d68 2
a69 2
static struct aed_softc *aed_sc = NULL;
static int aed_options = 0; /* | AED_MSEMUL; */
d80 1
a80 3
extern struct cfdriver aed_cd;

static int
a82 4
#ifdef __NetBSD__
	struct cfdata *cf;
#endif /* __NetBSD__ */
#ifdef __OpenBSD__
a83 1
#endif /* __OpenBSD__ */
d97 1
a97 1
static void
a128 1

a129 2

	return;
d157 1
a157 1
		panic("aed: received event from unsupported device!\n");
d170 1
a170 1
static void 
d307 1
a307 1
static void 
d332 1
a332 1
static void 
d361 1
a361 1
static void
d372 1
a372 1
static void 
d374 1
a374 1
    adb_event_t *event;
d405 3
a407 3
    dev_t dev;
    int flag, mode;
    struct proc *p;
d435 3
a437 3
    dev_t dev;
    int flag, mode;
    struct proc *p;
d451 3
a453 3
    dev_t dev;
    struct uio *uio;
    int flag;
d500 3
a502 3
    dev_t dev;
    struct uio *uio;
    int flag;
d510 5
a514 5
    dev_t dev;
    int cmd;
    caddr_t data;
    int flag;
    struct proc *p;
d517 2
a518 1
	case ADBIOCDEVSINFO: {
d537 1
a537 1
			}
d540 1
a541 1
	}
d543 2
a544 1
	case ADBIOCGETREPEAT:{
d550 1
a551 1
	}
d553 2
a554 1
	case ADBIOCSETREPEAT:{
d560 1
a561 1
	}
d567 2
a568 1
	case ADBIOCLISTENCMD:{
d573 1
d578 1
a579 24
}


int 
aedpoll(dev, events, p)
	dev_t dev;
	int events;
	struct proc *p;
{
	int s, revents;

	revents = events & (POLLOUT | POLLWRNORM);
	
	if ((events & (POLLIN | POLLRDNORM)) == 0)
		return (revents);

	s = spladb();
	if (aed_sc->sc_evq_len > 0)
		revents |= events & (POLLIN | POLLRDNORM);
	else
		selrecord(p, &aed_sc->sc_selinfo);
	splx(s);

	return (revents);
@


1.2
log
@correct files for the powerpc/mac/ -> macppc/dev which did not get
renamed correctly.
@
text
@d1 1
a1 1
/*	$OpenBSD: aed.c,v 1.1 2001/09/01 15:50:00 drahn Exp $	*/
d57 1
a57 1
static int	aedmatch __P((struct device *, struct cfdata *, void *));
d60 1
a60 1
static int	aedmatch __P((struct device *, void *, void *));
d62 6
a67 6
static void	aedattach __P((struct device *, struct device *, void *));
static void	aed_emulate_mouse __P((adb_event_t *event));
static void	aed_kbdrpt __P((void *kstate));
static void	aed_dokeyupdown __P((adb_event_t *event));
static void	aed_handoff __P((adb_event_t *event));
static void	aed_enqevent __P((adb_event_t *event));
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: aed.c,v 1.2 2001/09/01 17:43:08 drahn Exp $	*/
a43 1
#include <machine/conf.h>
d56 17
a72 7
int	aedmatch(struct device *, void *, void *);
void	aedattach(struct device *, struct device *, void *);
void	aed_emulate_mouse(adb_event_t *event);
void	aed_kbdrpt(void *kstate);
void	aed_dokeyupdown(adb_event_t *event);
void	aed_handoff(adb_event_t *event);
void	aed_enqevent(adb_event_t *event);
d77 2
a78 2
struct aed_softc *aed_sc = NULL;
int aed_options = 0; /* | AED_MSEMUL; */
d89 3
a91 1
int
d94 4
d99 1
d113 1
a113 1
void
d145 1
d147 2
d176 1
a176 1
		panic("aed: received event from unsupported device!");
d189 1
a189 1
void 
d326 1
a326 1
void 
d351 1
a351 1
void 
d380 1
a380 1
void
d391 1
a391 1
void 
d393 1
a393 1
	adb_event_t *event;
d424 3
a426 3
	dev_t dev;
	int flag, mode;
	struct proc *p;
d454 3
a456 3
	dev_t dev;
	int flag, mode;
	struct proc *p;
d470 3
a472 3
	dev_t dev;
	struct uio *uio;
	int flag;
d519 3
a521 3
	dev_t dev;
	struct uio *uio;
	int flag;
d529 5
a533 5
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
d536 1
a536 2
	case ADBIOCDEVSINFO:
	{
d555 1
a555 1
		}
d558 1
a559 1
		break;
d561 1
a561 2
	case ADBIOCGETREPEAT:
	{
d567 1
a568 1
		break;
d570 1
a570 2
	case ADBIOCSETREPEAT:
	{
d576 1
a577 1
		break;
d583 1
a583 2
	case ADBIOCLISTENCMD:
	{
a587 1
		/* FALLTHROUGH */
d592 3
d596 21
a616 1
	return (0);
@


1.2.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: aed.c,v 1.2.6.1 2002/06/11 03:36:33 art Exp $	*/
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.4.2
log
@Merge in -current from about a week ago
@
text
@d57 1
a57 1
static int	aedmatch(struct device *, struct cfdata *, void *);
d60 1
a60 1
static int	aedmatch(struct device *, void *, void *);
d62 6
a67 6
static void	aedattach(struct device *, struct device *, void *);
static void	aed_emulate_mouse(adb_event_t *event);
static void	aed_kbdrpt(void *kstate);
static void	aed_dokeyupdown(adb_event_t *event);
static void	aed_handoff(adb_event_t *event);
static void	aed_enqevent(adb_event_t *event);
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@a43 1
#include <machine/conf.h>
d56 17
a72 7
int	aedmatch(struct device *, void *, void *);
void	aedattach(struct device *, struct device *, void *);
void	aed_emulate_mouse(adb_event_t *event);
void	aed_kbdrpt(void *kstate);
void	aed_dokeyupdown(adb_event_t *event);
void	aed_handoff(adb_event_t *event);
void	aed_enqevent(adb_event_t *event);
d77 2
a78 2
struct aed_softc *aed_sc = NULL;
int aed_options = 0; /* | AED_MSEMUL; */
d89 3
a91 1
int
d94 4
d99 1
d113 1
a113 1
void
d145 1
d147 2
d176 1
a176 1
		panic("aed: received event from unsupported device!");
d189 1
a189 1
void 
d326 1
a326 1
void 
d351 1
a351 1
void 
d380 1
a380 1
void
d391 1
a391 1
void 
d393 1
a393 1
	adb_event_t *event;
d424 3
a426 3
	dev_t dev;
	int flag, mode;
	struct proc *p;
d454 3
a456 3
	dev_t dev;
	int flag, mode;
	struct proc *p;
d470 3
a472 3
	dev_t dev;
	struct uio *uio;
	int flag;
d519 3
a521 3
	dev_t dev;
	struct uio *uio;
	int flag;
d529 5
a533 5
	dev_t dev;
	u_long cmd;
	caddr_t data;
	int flag;
	struct proc *p;
d536 1
a536 2
	case ADBIOCDEVSINFO:
	{
d555 1
a555 1
		}
d558 1
a559 1
		break;
d561 1
a561 2
	case ADBIOCGETREPEAT:
	{
d567 1
a568 1
		break;
d570 1
a570 2
	case ADBIOCSETREPEAT:
	{
d576 1
a577 1
		break;
d583 1
a583 2
	case ADBIOCLISTENCMD:
	{
a587 1
		/* FALLTHROUGH */
d592 3
d596 21
a616 1
	return (0);
@


1.2.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d81 4
a84 1
aedmatch(struct device *parent, void *cf, void *aux)
d98 3
a100 1
aedattach(struct device *parent, struct device *self, void *aux)
d120 1
a120 1
	/* Pull in the options flags. */
d124 1
a124 1

d133 1
a133 1
 * Given a keyboard ADB event, record the keycode and call the key
d139 2
a140 1
aed_input(adb_event_t *event)
d170 3
a172 2
void
aed_emulate_mouse(adb_event_t *event)
d307 3
a309 2
void
aed_kbdrpt(void *kstate)
d332 3
a334 2
void
aed_dokeyupdown(adb_event_t *event)
d341 1
a341 1
		if (aed_sc->sc_repeating != -1)
d343 1
a343 1

d362 2
a363 1
aed_handoff(adb_event_t *event)
d372 3
a374 2
void
aed_enqevent(adb_event_t *event)
d403 5
a407 2
int
aedopen(dev_t dev, int flag, int mode, struct proc *p)
d433 5
a437 2
int
aedclose(dev_t dev, int flag, int mode, struct proc *p)
d449 5
a453 2
int
aedread(dev_t dev, struct uio *uio, int flag)
d498 1
a498 1
int
d508 7
a514 2
int
aedioctl(dev_t dev, u_long cmd, caddr_t data, int flag, struct proc *p)
@


1.1
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/mac to macppc/dev
@
text
@d1 1
a1 1
/*	$OpenBSD: aed.c,v 1.3 2001/07/04 08:38:50 niklas Exp $	*/
d46 4
a49 4
#include <macppc/mac/keyboard.h>
#include <macppc/mac/adbvar.h>
#include <macppc/mac/aedvar.h>
#include <macppc/mac/akbdvar.h>
@

