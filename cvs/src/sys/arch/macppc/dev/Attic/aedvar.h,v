head	1.5;
access;
symbols
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.3
	UBC:1.1.0.6
	UBC_BASE:1.1
	SMP:1.1.0.4
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2005.12.21.18.50.52;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2003.10.16.03.54.48;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.07.07.13.37;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.36;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.01.15.50.00;	author drahn;	state Exp;
branches
	1.1.4.1
	1.1.6.1;
next	;

1.1.4.1
date	2001.10.31.03.01.15;	author nate;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2002.03.28.10.36.01;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.03.27.23.29.46;	author niklas;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2004.02.19.10.49.03;	author niklas;	state Exp;
branches;
next	;

1.1.6.1
date	2002.06.11.03.36.33;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove aed(4) on macppc, nothing uses its functionality since key repeat is
handled by wscons and mouse emulation was never enabled or documented.
@
text
@/*	$OpenBSD: aedvar.h,v 1.4 2003/10/16 03:54:48 deraadt Exp $	*/
/*	$NetBSD: aedvar.h,v 1.2 2000/03/23 06:40:33 thorpej Exp $	*/

/*
 * Copyright (C) 1994	Bradley A. Grantham
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bradley A. Grantham.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/timeout.h>
#include <machine/adbsys.h>

/* Event queue definitions */
#ifndef AED_MAX_EVENTS
#define AED_MAX_EVENTS 200	/* Maximum events to be kept in queue */
				/* maybe should be higher for slower macs? */
#endif				/* AED_MAX_EVENTS */

struct aed_softc {
	struct  device  sc_dev;

	struct timeout sc_repeat_ch;

	/* ADB info */
	u_char		origaddr;	/* ADB device type (ADBADDR_AED) */
	u_char		adbaddr;	/* current ADB address */
	u_char		handler_id;	/* type of device */

	/* ADB event queue */
	adb_event_t	sc_evq[AED_MAX_EVENTS];	/* the queue */
	int		sc_evq_tail;	/* event queue tail pointer */
	int		sc_evq_len;	/* event queue length */

	/* Keyboard repeat state */
	int		sc_rptdelay;	/* ticks before auto-repeat */
	int		sc_rptinterval;	/* ticks between auto-repeat */
	int		sc_repeating;	/* key that is auto-repeating */
	adb_event_t	sc_rptevent;	/* event to auto-repeat */

	int		sc_buttons;	/* mouse button state */

	struct selinfo	sc_selinfo;	/* select() info */
	struct proc *	sc_ioproc;	/* process to wakeup */

	int		sc_open;	/* Are we queuing events? */
	int		sc_options;	/* config options */
};

/* Options */
#define AED_MSEMUL	0x1		/* emulate mouse buttons */

void	aed_input(adb_event_t *event);
@


1.4
log
@spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: aedvar.h,v 1.3 2002/06/07 07:13:37 miod Exp $	*/
@


1.3
log
@Move more function prototypes to <machine/conf.h> as cdev_decl(foo)
for safety.
@
text
@d1 1
a1 1
/*	$OpenBSD: aedvar.h,v 1.2 2002/03/14 01:26:36 millert Exp $	*/
d39 1
a39 1
#define AED_MAX_EVENTS 200	/* Maximum events to be kept in queue */  
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: aedvar.h,v 1.1 2001/09/01 15:50:00 drahn Exp $	*/
a33 4
#ifdef __NetBSD__
#include <sys/callout.h>
#endif /* __NetBSD__ */
#ifdef __OpenBSD__
a34 1
#endif /* __OpenBSD__ */
a45 4
#ifdef __NetBSD__
	struct callout sc_repeat_ch;
#endif /* __NetBSD__ */
#ifdef __OpenBSD__
a46 1
#endif /* __OpenBSD__ */
a76 6
int	aedopen(dev_t dev, int flag, int mode, struct proc *p);
int	aedclose(dev_t dev, int flag, int mode, struct proc *p);
int	aedread(dev_t dev, struct uio *uio, int flag);
int	aedwrite(dev_t dev, struct uio *uio, int flag);
int	aedioctl(dev_t , int , caddr_t , int , struct proc *);
int	aedpoll(dev_t dev, int events, struct proc *p);
@


1.1
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/mac to macppc/dev
@
text
@d1 1
a1 1
/*	$OpenBSD: aedvar.h,v 1.2 2001/07/04 08:38:50 niklas Exp $	*/
d86 7
a92 7
void	aed_input __P((adb_event_t *event));
int	aedopen __P((dev_t dev, int flag, int mode, struct proc *p));
int	aedclose __P((dev_t dev, int flag, int mode, struct proc *p));
int	aedread __P((dev_t dev, struct uio *uio, int flag));
int	aedwrite __P((dev_t dev, struct uio *uio, int flag));
int	aedioctl __P((dev_t , int , caddr_t , int , struct proc *));
int	aedpoll __P((dev_t dev, int events, struct proc *p));
@


1.1.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: aedvar.h,v 1.1 2001/09/01 15:50:00 drahn Exp $	*/
d34 4
d39 1
d51 4
d56 1
d86 7
a92 1
void	aed_input(adb_event_t *event);
@


1.1.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1.4.2
log
@Merge in -current from about a week ago
@
text
@d86 7
a92 7
void	aed_input(adb_event_t *event);
int	aedopen(dev_t dev, int flag, int mode, struct proc *p);
int	aedclose(dev_t dev, int flag, int mode, struct proc *p);
int	aedread(dev_t dev, struct uio *uio, int flag);
int	aedwrite(dev_t dev, struct uio *uio, int flag);
int	aedioctl(dev_t , int , caddr_t , int , struct proc *);
int	aedpoll(dev_t dev, int events, struct proc *p);
@


1.1.4.3
log
@Sync the SMP branch with 3.3
@
text
@d34 4
d39 1
d51 4
d56 1
d87 6
@


1.1.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d39 1
a39 1
#define AED_MAX_EVENTS 200	/* Maximum events to be kept in queue */
@


