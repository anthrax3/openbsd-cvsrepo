head	1.14;
access;
symbols
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.14
date	2007.04.23.16.27.20;	author deraadt;	state dead;
branches;
next	1.13;

1.13
date	2006.06.19.22.42.33;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.01.20.52.25;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.13.19.21.45;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.19.21.46.41;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.19.02.18.00;	author pedro;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.18.23.19.28;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.15.15.35.34;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.14.22.29.35;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.13.19.26.30;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.06.03.10.09;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.05.04.33.20;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.11.21.01.04;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.11.16.32.15;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.14
log
@rename drivers with numbers in them; ok gwk drahn
@
text
@/*	$OpenBSD: ki2c.c,v 1.13 2006/06/19 22:42:33 miod Exp $	*/
/*	$NetBSD: ki2c.c,v 1.1 2003/12/27 02:19:34 grant Exp $	*/

/*-
 * Copyright (c) 2001 Tsubai Masanari.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <dev/ofw/openfirm.h>
#include <uvm/uvm_extern.h>
#include <machine/autoconf.h>

#include <macppc/dev/ki2cvar.h>
#include <macppc/dev/maci2cvar.h>

int ki2c_match(struct device *, void *, void *);
void ki2c_attach(struct device *, struct device *, void *);
void ki2c_attach_bus(struct ki2c_softc *, struct ki2c_bus *, int);
inline u_int ki2c_readreg(struct ki2c_softc *, int);
inline void ki2c_writereg(struct ki2c_softc *, int, u_int);
u_int ki2c_getmode(struct ki2c_softc *);
void ki2c_setmode(struct ki2c_softc *, u_int, u_int);
u_int ki2c_getspeed(struct ki2c_softc *);
void ki2c_setspeed(struct ki2c_softc *, u_int);
int ki2c_intr(struct ki2c_softc *);
int ki2c_poll(struct ki2c_softc *, int);
int ki2c_start(struct ki2c_softc *, int, int, void *, int);
int ki2c_read(struct ki2c_softc *, int, int, void *, int);
int ki2c_write(struct ki2c_softc *, int, int, const void *, int);

/* I2C glue */
int ki2c_i2c_acquire_bus(void *, int);
void ki2c_i2c_release_bus(void *, int);
int ki2c_i2c_exec(void *, i2c_op_t, i2c_addr_t, const void *, size_t,
    void *, size_t, int);

struct cfattach ki2c_ca = {
	sizeof(struct ki2c_softc), ki2c_match, ki2c_attach
};
struct cfattach ki2c_memc_ca = {
	sizeof(struct ki2c_softc), ki2c_match, ki2c_attach
};

struct cfdriver ki2c_cd = {
	NULL, "ki2c", DV_DULL
};

int
ki2c_match(struct device *parent, void *match, void *aux)
{
	struct confargs *ca = aux;

	if (strcmp(ca->ca_name, "i2c") == 0 &&
	   ca->ca_nreg >= 4)
		return (1);

	return (0);
}

void
ki2c_attach(struct device *parent, struct device *self, void *aux)
{
	struct ki2c_softc *sc = (struct ki2c_softc *)self;
	struct confargs *ca = aux;
	int node = ca->ca_node;
	int rate, count = 0;
	char name[32];

	ca->ca_reg[0] += ca->ca_baseaddr;

	if (OF_getprop(node, "AAPL,i2c-rate", &rate, 4) != 4) {
		printf(": cannot get i2c-rate\n");
		return;
	}
	if (OF_getprop(node, "AAPL,address", &sc->sc_paddr, 4) != 4) {
		printf(": unable to find i2c address\n");
		return;
	}
	if (OF_getprop(node, "AAPL,address-step", &sc->sc_regstep, 4) != 4) {
		printf(": unable to find i2c address step\n");
		return;
	}
	sc->sc_reg = mapiodev(sc->sc_paddr, (DATA+1)*sc->sc_regstep);

	printf("\n");

	ki2c_writereg(sc, STATUS, 0);
	ki2c_writereg(sc, ISR, 0);
	ki2c_writereg(sc, IER, 0);

	ki2c_setmode(sc, I2C_STDSUBMODE, 0);
	ki2c_setspeed(sc, I2C_100kHz);		/* XXX rate */

	lockinit(&sc->sc_buslock, PZERO, sc->sc_dev.dv_xname, 0, 0);
	ki2c_writereg(sc, IER,I2C_INT_DATA|I2C_INT_ADDR|I2C_INT_STOP);

	for (node = OF_child(ca->ca_node); node; node = OF_peer(node)) {
		if (OF_getprop(node, "name", &name, sizeof name) > 0) {
			if (strcmp(name, "i2c-bus") == 0) {
				ki2c_attach_bus(sc, &sc->sc_bus[count], node);
				if (++count >= KI2C_MAX_BUSSES)
					break;
			}
		}
	}

	/* 
	 * If we didn't find any i2c-bus nodes, there is only a single
	 * i2c bus.
	 */

	if (count == 0)
		ki2c_attach_bus(sc, &sc->sc_bus[0], ca->ca_node);
}

void
ki2c_attach_bus(struct ki2c_softc *sc, struct ki2c_bus *bus, int node)
{
	struct i2cbus_attach_args iba;
	u_int32_t reg;

	if (OF_getprop(node, "reg", &reg, sizeof reg) != sizeof reg)
		return;

	bus->sc = sc;
	bus->i2c_tag.ic_cookie = bus;
	bus->i2c_tag.ic_acquire_bus = ki2c_i2c_acquire_bus;
	bus->i2c_tag.ic_release_bus = ki2c_i2c_release_bus;
	bus->i2c_tag.ic_exec = ki2c_i2c_exec;
	bus->reg = reg;

	bzero(&iba, sizeof iba);
	iba.iba_name = "iic";
	iba.iba_tag = &bus->i2c_tag;
	iba.iba_bus_scan = maciic_scan;
	iba.iba_bus_scan_arg = &node;
	config_found(&sc->sc_dev, &iba, NULL);
}

u_int
ki2c_readreg(struct ki2c_softc *sc, int reg)
{
	u_char *addr = sc->sc_reg + sc->sc_regstep * reg;

	return (*addr);
}

void
ki2c_writereg(struct ki2c_softc *sc, int reg, u_int val)
{
	u_char *addr = sc->sc_reg + sc->sc_regstep * reg;

	*addr = val;
	asm volatile ("eieio");
	delay(10);
}

u_int
ki2c_getmode(struct ki2c_softc *sc)
{
	return ki2c_readreg(sc, MODE) & I2C_MODE;
}

void
ki2c_setmode(struct ki2c_softc *sc, u_int mode, u_int bus)
{
	u_int x;

	KASSERT((mode & ~I2C_MODE) == 0);
	x = ki2c_readreg(sc, MODE);
	x &= ~(I2C_MODE);
	if (bus)
		x |= I2C_BUS1;
	else
		x &= ~I2C_BUS1;
	x |= mode;
	ki2c_writereg(sc, MODE, x);
}

u_int
ki2c_getspeed(struct ki2c_softc *sc)
{
	return ki2c_readreg(sc, MODE) & I2C_SPEED;
}

void
ki2c_setspeed(struct ki2c_softc *sc, u_int speed)
{
	u_int x;

	KASSERT((speed & ~I2C_SPEED) == 0);
	x = ki2c_readreg(sc, MODE);
	x &= ~I2C_SPEED;
	x |= speed;
	ki2c_writereg(sc, MODE, x);
}

int
ki2c_intr(struct ki2c_softc *sc)
{
	u_int isr, x;

	isr = ki2c_readreg(sc, ISR);
	if (isr & I2C_INT_ADDR) {
#if 0
		if ((ki2c_readreg(sc, STATUS) & I2C_ST_LASTAAK) == 0) {
			/* No slave responded. */
			sc->sc_flags |= I2C_ERROR;
			goto out;
		}
#endif

		if (sc->sc_flags & I2C_READING) {
			if (sc->sc_resid > 1) {
				x = ki2c_readreg(sc, CONTROL);
				x |= I2C_CT_AAK;
				ki2c_writereg(sc, CONTROL, x);
			}
		} else {
			ki2c_writereg(sc, DATA, *sc->sc_data++);
			sc->sc_resid--;
		}
	}

	if (isr & I2C_INT_DATA) {
		if (sc->sc_flags & I2C_READING) {
			*sc->sc_data++ = ki2c_readreg(sc, DATA);
			sc->sc_resid--;

			if (sc->sc_resid == 0) {	/* Completed */
				ki2c_writereg(sc, CONTROL, 0);
				goto out;
			}
		} else {
#if 0
			if ((ki2c_readreg(sc, STATUS) & I2C_ST_LASTAAK) == 0) {
				/* No slave responded. */
				sc->sc_flags |= I2C_ERROR;
				goto out;
			}
#endif

			if (sc->sc_resid == 0) {
				x = ki2c_readreg(sc, CONTROL) | I2C_CT_STOP;
				ki2c_writereg(sc, CONTROL, x);
			} else {
				ki2c_writereg(sc, DATA, *sc->sc_data++);
				sc->sc_resid--;
			}
		}
	}

out:
	if (isr & I2C_INT_STOP) {
		ki2c_writereg(sc, CONTROL, 0);
		sc->sc_flags &= ~I2C_BUSY;
	}

	ki2c_writereg(sc, ISR, isr);

	return (1);
}

int
ki2c_poll(struct ki2c_softc *sc, int timo)
{
	while (sc->sc_flags & I2C_BUSY) {
		if (ki2c_readreg(sc, ISR))
			ki2c_intr(sc);
		timo -= 100;
		if (timo < 0) {
			printf("i2c_poll: timeout\n");
			return (-1);
		}
		delay(100);
	}
	return (0);
}

int
ki2c_start(struct ki2c_softc *sc, int addr, int subaddr, void *data, int len)
{
	int rw = (sc->sc_flags & I2C_READING) ? 1 : 0;
	int timo, x;

	KASSERT((addr & 1) == 0);

	sc->sc_data = data;
	sc->sc_resid = len;
	sc->sc_flags |= I2C_BUSY;

	timo = 1000 + len * 200;

	/* XXX TAS3001 sometimes takes 50ms to finish writing registers. */
	/* if (addr == 0x68) */
		timo += 100000;

	ki2c_writereg(sc, ADDR, addr | rw);
	ki2c_writereg(sc, SUBADDR, subaddr);

	x = ki2c_readreg(sc, CONTROL) | I2C_CT_ADDR;
	ki2c_writereg(sc, CONTROL, x);

	if (ki2c_poll(sc, timo))
		return (-1);
	if (sc->sc_flags & I2C_ERROR) {
		printf("I2C_ERROR\n");
		return (-1);
	}
	return (0);
}

int
ki2c_read(struct ki2c_softc *sc, int addr, int subaddr, void *data, int len)
{
	sc->sc_flags = I2C_READING;
	return ki2c_start(sc, addr, subaddr, data, len);
}

int
ki2c_write(struct ki2c_softc *sc, int addr, int subaddr, const void *data, int len)
{
	sc->sc_flags = 0;
	return ki2c_start(sc, addr, subaddr, (void *)data, len);
}

int
ki2c_i2c_acquire_bus(void *cookie, int flags)
{
	struct ki2c_bus *bus = cookie;

	return (lockmgr(&bus->sc->sc_buslock, LK_EXCLUSIVE, NULL));
}

void
ki2c_i2c_release_bus(void *cookie, int flags)
{
	struct ki2c_bus *bus = cookie;

	(void) lockmgr(&bus->sc->sc_buslock, LK_RELEASE, NULL);
}

int
ki2c_i2c_exec(void *cookie, i2c_op_t op, i2c_addr_t addr,
    const void *cmdbuf, size_t cmdlen, void *buf, size_t len, int flags)
{
	struct ki2c_bus *bus = cookie;
	u_int mode = I2C_STDSUBMODE;
	u_int8_t cmd = 0;

	if (!I2C_OP_STOP_P(op) || cmdlen > 1)
		return (EINVAL);

	if (cmdlen == 0)
		mode = I2C_STDMODE;
	else if (I2C_OP_READ_P(op))
		mode = I2C_COMBMODE;

	if (cmdlen > 0)
		cmd = *(u_int8_t *)cmdbuf;

	ki2c_setmode(bus->sc, mode, bus->reg || addr & 0x80);
	addr &= 0x7f;

	if (I2C_OP_READ_P(op)) {
		if (ki2c_read(bus->sc, (addr << 1), cmd, buf, len) != 0)
			return (EIO);
	} else {
		if (ki2c_write(bus->sc, (addr << 1), cmd, buf, len) != 0)
			return (EIO);
	}
	return (0);
}
@


1.13
log
@Be more strict in the probe routines and actually check ca_nintr and
ca_nreg are large enough for our greedy needs; tweaks and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ki2c.c,v 1.12 2006/01/01 20:52:25 deraadt Exp $	*/
@


1.12
log
@switch from macppc-specific maciic(4) driver to the generic iic(4),
after teaching it to use a function pointer to get back to the OFW
scan.. this will also help the sparc64 later; ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: ki2c.c,v 1.11 2005/12/13 19:21:45 kettenis Exp $	*/
d78 2
a79 1
	if (strcmp(ca->ca_name, "i2c") == 0)
@


1.11
log
@Deal with ki2c(4) controllers with multiple i2c busses.
tested by xsa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ki2c.c,v 1.10 2005/11/19 21:46:41 brad Exp $	*/
d143 1
a143 1
	struct maci2cbus_attach_args iba;
d156 2
a157 1
	iba.iba_node = node;
d159 2
@


1.10
log
@ANSI protos and some KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: ki2c.c,v 1.9 2005/11/19 02:18:00 pedro Exp $	*/
d43 1
a88 1
	struct maci2cbus_attach_args iba;
d90 2
a91 1
	int rate;
d121 34
a154 4
	sc->sc_i2c_tag.ic_cookie = sc;
	sc->sc_i2c_tag.ic_acquire_bus = ki2c_i2c_acquire_bus;
	sc->sc_i2c_tag.ic_release_bus = ki2c_i2c_release_bus;
	sc->sc_i2c_tag.ic_exec = ki2c_i2c_exec;
d157 1
a157 1
	iba.iba_tag = &sc->sc_i2c_tag;
d351 1
a351 1
	struct ki2c_softc *sc = cookie;
d353 1
a353 1
	return (lockmgr(&sc->sc_buslock, LK_EXCLUSIVE, NULL));
d359 1
a359 1
	struct ki2c_softc *sc = cookie;
d361 1
a361 1
	(void) lockmgr(&sc->sc_buslock, LK_RELEASE, NULL);
d368 1
a368 1
	struct ki2c_softc *sc = cookie;
d383 1
a383 1
	ki2c_setmode(sc, mode, addr & 0x80);
d387 1
a387 1
		if (ki2c_read(sc, (addr << 1), cmd, buf, len) != 0)
d390 1
a390 1
		if (ki2c_write(sc, (addr << 1), cmd, buf, len) != 0)
@


1.9
log
@Remove unnecessary lockmgr() archaism that was costing too much in terms
of panics and bugfixes. Access curproc directly, do not expect a process
pointer as an argument. Should fix many "process context required" bugs.
Incentive and okay millert@@, okay marc@@. Various testing, thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: ki2c.c,v 1.8 2005/11/18 23:19:28 kettenis Exp $	*/
d73 1
a73 4
ki2c_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d78 1
a78 1
		return 1;
d80 1
a80 1
	return 0;
d84 1
a84 4
ki2c_attach(parent, self, aux)
	struct device *parent;
	struct device *self;
	void *aux;
d131 1
a131 3
ki2c_readreg(sc, reg)
	struct ki2c_softc *sc;
	int reg;
d135 1
a135 1
	return *addr;
d139 1
a139 4
ki2c_writereg(sc, reg, val)
	struct ki2c_softc *sc;
	int reg;
	u_int val;
d149 1
a149 2
ki2c_getmode(sc)
	struct ki2c_softc *sc;
d155 1
a155 4
ki2c_setmode(sc, mode, bus)
	struct ki2c_softc *sc;
	u_int mode;
	u_int bus;
d171 1
a171 2
ki2c_getspeed(sc)
	struct ki2c_softc *sc;
d177 1
a177 3
ki2c_setspeed(sc, speed)
	struct ki2c_softc *sc;
	u_int speed;
d189 1
a189 2
ki2c_intr(sc)
	struct ki2c_softc *sc;
d251 1
a251 1
	return 1;
d255 1
a255 3
ki2c_poll(sc, timo)
	struct ki2c_softc *sc;
	int timo;
d263 1
a263 1
			return -1;
d267 1
a267 1
	return 0;
d271 1
a271 4
ki2c_start(sc, addr, subaddr, data, len)
	struct ki2c_softc *sc;
	int addr, subaddr, len;
	void *data;
d295 1
a295 1
		return -1;
d298 1
a298 1
		return -1;
d300 1
a300 1
	return 0;
d304 1
a304 4
ki2c_read(sc, addr, subaddr, data, len)
	struct ki2c_softc *sc;
	int addr, subaddr, len;
	void *data;
d311 1
a311 4
ki2c_write(sc, addr, subaddr, data, len)
	struct ki2c_softc *sc;
	int addr, subaddr, len;
	const void *data;
@


1.8
log
@Fix writes on the i2c bus.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ki2c.c,v 1.7 2005/11/15 15:35:34 deraadt Exp $	*/
d352 1
a352 1
	return (lockmgr(&sc->sc_buslock, LK_EXCLUSIVE, NULL, curproc));
d360 1
a360 1
	(void) lockmgr(&sc->sc_buslock, LK_RELEASE, NULL, curproc);
@


1.7
log
@oh, once we are on bus1, we must have a way to get back to bus0... duh
@
text
@d1 1
a1 1
/*	$OpenBSD: ki2c.c,v 1.6 2005/11/14 22:29:35 deraadt Exp $	*/
d368 2
d371 1
a371 1
	if (!I2C_OP_STOP_P(op))
d374 9
a382 2
	/* We handle the subaddress stuff ourselves. */
	ki2c_setmode(sc, I2C_STDMODE, addr & 0x80);
a384 2
	if (ki2c_write(sc, (addr << 1), 0, cmdbuf, cmdlen) != 0)
		return (EIO);
d386 1
a386 1
		if (ki2c_read(sc, (addr << 1), 0, buf, len) != 0)
d389 1
a389 1
		if (ki2c_write(sc, (addr << 1), 0, buf, len) != 0)
@


1.6
log
@there are actually two ports on the ki2c unit.  if the OF address has
the 0x80 bit set, the device is on the 2nd port.  ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: ki2c.c,v 1.5 2005/11/13 19:26:30 kettenis Exp $	*/
d176 1
a176 1
	x &= ~I2C_MODE;
d179 2
d373 1
a373 1
	ki2c_setmode(sc, I2C_STDMODE, addr >> 7);
@


1.5
log
@Add code to turn ki2c(4) into a proper i2c controller.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ki2c.c,v 1.4 2005/11/06 03:10:09 drahn Exp $	*/
d46 1
a46 1
void ki2c_setmode(struct ki2c_softc *, u_int);
d120 1
a120 1
	ki2c_setmode(sc, I2C_STDSUBMODE);
d167 1
a167 1
ki2c_setmode(sc, mode)
d170 1
d177 2
d371 2
a372 1
	ki2c_setmode(sc, I2C_STDMODE);
@


1.4
log
@Add attachment of ki2c at memc as well as macobio, wil be used on G5.
@
text
@d1 1
a1 1
/*	$OpenBSD: ki2c.c,v 1.3 2005/11/05 04:33:20 brad Exp $	*/
d39 1
d55 6
d94 1
d122 12
a207 1

d340 40
@


1.3
log
@split from ki2c.c
@
text
@d1 1
a1 1
/*	$OpenBSD: ki2c.c,v 1.2 2004/01/11 21:01:04 drahn Exp $	*/
d57 4
@


1.2
log
@$OpenBSD$ tags
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 1
a38 56
/* Keywest I2C Register offsets */
#define MODE	0
#define CONTROL	1
#define STATUS	2
#define ISR	3
#define IER	4
#define ADDR	5
#define SUBADDR	6
#define DATA	7

/* MODE */
#define I2C_SPEED	0x03	/* Speed mask */
#define  I2C_100kHz	0x00
#define  I2C_50kHz	0x01
#define  I2C_25kHz	0x02
#define I2C_MODE	0x0c	/* Mode mask */
#define  I2C_DUMBMODE	0x00	/*  Dumb mode */
#define  I2C_STDMODE	0x04	/*  Standard mode */
#define  I2C_STDSUBMODE	0x08	/*  Standard mode + sub address */
#define  I2C_COMBMODE	0x0c	/*  Combined mode */
#define I2C_PORT	0xf0	/* Port mask */

/* CONTROL */
#define I2C_CT_AAK	0x01	/* Send AAK */
#define I2C_CT_ADDR	0x02	/* Send address(es) */
#define I2C_CT_STOP	0x04	/* Send STOP */
#define I2C_CT_START	0x08	/* Send START */

/* STATUS */
#define I2C_ST_BUSY	0x01	/* Busy */
#define I2C_ST_LASTAAK	0x02	/* Last AAK */
#define I2C_ST_LASTRW	0x04	/* Last R/W */
#define I2C_ST_SDA	0x08	/* SDA */
#define I2C_ST_SCL	0x10	/* SCL */

/* ISR/IER */
#define I2C_INT_DATA	0x01	/* Data byte sent/received */
#define I2C_INT_ADDR	0x02	/* Address sent */
#define I2C_INT_STOP	0x04	/* STOP condition sent */
#define I2C_INT_START	0x08	/* START condition sent */

/* I2C flags */
#define I2C_BUSY	0x01
#define I2C_READING	0x02
#define I2C_ERROR	0x04

struct ki2c_softc {
	struct device sc_dev;
	paddr_t sc_paddr;
	u_char *sc_reg;
	int sc_regstep;

	int sc_flags;
	u_char *sc_data;
	int sc_resid;
};
@


1.1
log
@Audio support for some newer macppc machines, any 'snapper' based systems.
Driver ported from netbsd with bus_dma addition/vtophys deletion.
This driver does not work on the first generation 'Digital audio' systems
those were 'tumbler' nor the latest version. ok dhartmei@@
@
text
@d1 1
a2 1
/*	Id: ki2c.c,v 1.7 2002/10/05 09:56:05 tsubai Exp	*/
@

