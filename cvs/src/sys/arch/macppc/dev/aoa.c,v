head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.7.0.2
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.6.0.24
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.26
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.18
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.22
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.20
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2016.09.19.06.46.43;	author ratchov;	state Exp;
branches;
next	1.8;
commitid	qGgYgJTgEFuAoGj4;

1.8
date	2016.09.14.06.12.19;	author ratchov;	state Exp;
branches;
next	1.7;
commitid	pi1a9KN0itEngOc4;

1.7
date	2016.07.02.16.28.50;	author mglocker;	state Exp;
branches;
next	1.6;
commitid	KiEIkesoLHQ1lFD5;

1.6
date	2010.02.26.21.52.14;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.29.00.04.14;	author jakemsr;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.21.00.32.42;	author jakemsr;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.19.00.44.38;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.05.04.26.22;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.31.00.04.54;	author joris;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove unused getdev() audio driver functions.
@
text
@/*	$OpenBSD: aoa.c,v 1.8 2016/09/14 06:12:19 ratchov Exp $	*/

/*-
 * Copyright (c) 2005 Tsubai Masanari.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * WORK-IN-PROGRESS AOAKeylargo audio driver.
 */

#include <sys/param.h>
#include <sys/audioio.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <dev/audio_if.h>
#include <dev/ofw/openfirm.h>
#include <macppc/dev/dbdma.h>

#include <machine/autoconf.h>

#include <macppc/dev/i2svar.h>

#ifdef AOA_DEBUG
# define DPRINTF printf
#else
# define DPRINTF while (0) printf
#endif

/* XXX */
#define aoa_softc i2s_softc

int aoa_match(struct device *, void *, void *);
void aoa_attach(struct device *, struct device *, void *);
void aoa_defer(struct device *);
void aoa_set_volume(struct aoa_softc *, int, int);

struct cfattach aoa_ca = {
	sizeof(struct aoa_softc), aoa_match, aoa_attach
};

struct cfdriver aoa_cd = {
	NULL, "aoa", DV_DULL
};

struct audio_hw_if aoa_hw_if = {
	i2s_open,
	i2s_close,
	i2s_set_params,
	i2s_round_blocksize,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	i2s_halt_output,
	i2s_halt_input,
	NULL,
	NULL,
	i2s_set_port,
	i2s_get_port,
	i2s_query_devinfo,
	i2s_allocm,
	NULL,
	i2s_round_buffersize,
	i2s_get_props,
	i2s_trigger_output,
	i2s_trigger_input
};

int
aoa_match(struct device *parent, void *match, void *aux)
{
	struct confargs *ca = aux;
	int soundbus, soundchip;
	char compat[32];

	if (strcmp(ca->ca_name, "i2s") != 0)
		return (0);

	if ((soundbus = OF_child(ca->ca_node)) == 0 ||
	    (soundchip = OF_child(soundbus)) == 0)
		return (0);

	bzero(compat, sizeof compat);
	OF_getprop(soundchip, "compatible", compat, sizeof compat);

	if (strcmp(compat, "AOAKeylargo") == 0)
		return (1);
	if (strcmp(compat, "AOAK2") == 0)
		return (1);
	if (strcmp(compat, "AOAShasta") == 0)
		return (1);

	return (0);
}

void
aoa_attach(struct device *parent, struct device *self, void *aux)
{
	struct aoa_softc *sc = (struct aoa_softc *)self;

	sc->sc_setvolume = aoa_set_volume;

	i2s_attach(parent, sc, aux);
	config_defer(self, aoa_defer);
}

void
aoa_defer(struct device *dev)
{
	struct aoa_softc *sc = (struct aoa_softc *)dev;

	audio_attach_mi(&aoa_hw_if, sc, &sc->sc_dev);
	deq_reset(sc);
}

void
aoa_set_volume(struct aoa_softc *sc, int left, int right)
{
	/* This device doesn't provide volume control. */
}
@


1.8
log
@Remove drain(), query_encoding(), mappage() and get_default_params()
methods from all audio drivers and from the audio_if structure as they
are never called.
@
text
@d1 1
a1 1
/*	$OpenBSD: aoa.c,v 1.6 2010/02/26 21:52:14 jasper Exp $	*/
a54 1
int aoa_getdev(void *, struct audio_device *);
a80 1
	aoa_getdev,
a92 6
struct audio_device aoa_device = {
	"AOA",
	"",
	"aoa"
};

a137 7
}

int
aoa_getdev(void *h, struct audio_device *retp)
{
	*retp = aoa_device;
	return (0);
@


1.7
log
@Get 'AOAShasta' soundchip working found on PowerMac9,1.

ok deraadt
@
text
@a59 1
void aoa_get_default_params(void *, int, struct audio_params *);
a71 2
	NULL,
	i2s_query_encoding,
a89 1
	i2s_mappage,
d92 1
a92 2
	i2s_trigger_input,
	aoa_get_default_params
a158 6
}

void
aoa_get_default_params(void *addr, int mode, struct audio_params *params)
{
	i2s_get_default_params(params);
@


1.6
log
@- this device doesn't provide volume control, so stop whining about it. it's just not there.

ok jakemsr@@ drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: aoa.c,v 1.5 2008/10/29 00:04:14 jakemsr Exp $	*/
d58 1
d127 2
d141 8
d150 1
@


1.5
log
@
native default parameters for i2s devices instead of 8kHz
mulaw mono, which few can even do.

"Please just get this in." brad@@
@
text
@d1 1
a1 2
/*	$OpenBSD: aoa.c,v 1.4 2008/04/21 00:32:42 jakemsr Exp $	*/
/*	$Id: aoa.c,v 1.4 2008/04/21 00:32:42 jakemsr Exp $	*/
d151 1
a151 1
	printf("aoa_set_volume() not supported yet\n");
@


1.4
log
@
allow low level audio drivers to specify a default sample format,
instead of 8-bit mono mulaw @@ 8kHz.

this is just the infrastructure; no drivers are specifying a default
yet.

ok ratchov@@, deanna@@
@
text
@d1 2
a2 2
/*	$OpenBSD: aoa.c,v 1.3 2005/11/19 00:44:38 kettenis Exp $	*/
/*	$Id: aoa.c,v 1.3 2005/11/19 00:44:38 kettenis Exp $	*/
d60 1
d97 1
a97 1
	NULL
d153 6
@


1.3
log
@Don't match AOAbase, which is now handled by onyx(4).
@
text
@d1 2
a2 2
/*	$OpenBSD: aoa.c,v 1.2 2005/11/05 04:26:22 brad Exp $	*/
/*	$Id: aoa.c,v 1.2 2005/11/05 04:26:22 brad Exp $	*/
d96 1
@


1.2
log
@some driver cleanup, ANSI/KNF and more consistency between the drivers.

ok joris@@
@
text
@d1 2
a2 2
/*	$OpenBSD: aoa.c,v 1.1 2005/10/31 00:04:54 joris Exp $	*/
/*	$Id: aoa.c,v 1.1 2005/10/31 00:04:54 joris Exp $	*/
a123 2
		return (1);
	if (strcmp(compat, "AOAbase") == 0)
@


1.1
log
@add aoa audio support, found in several macppc machines
ok drahn@@
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$Id: aoa.c,v 1.1 2005/09/29 15:21:48 makoto Exp $	*/
d41 1
a43 1
#include <macppc/dev/dbdma.h>
d53 2
a54 1
#define aoa_softc i2s_softc		/* XXX */
d56 1
a58 4

/* XXX */
int aoa_getdev(void *, struct audio_device *);

d105 1
a105 4
aoa_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d112 1
a112 1
		return 0;
d116 1
a116 1
		return 0;
d122 1
a122 1
		return 1;
d124 1
a124 1
		return 1;
d126 1
a126 1
		return 1;
d128 1
a128 1
	return 0;
d132 1
a132 3
aoa_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
a135 1
	/* "set volume" callback */
d143 1
a143 3
aoa_getdev(h, retp)
	void *h;
	struct audio_device *retp;
d146 1
a146 1
	return 0;
d150 1
a150 3
aoa_set_volume(sc, left, right)
	struct aoa_softc *sc;
	int left, right;
@

