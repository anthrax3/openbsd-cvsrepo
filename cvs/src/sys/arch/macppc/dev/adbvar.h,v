head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.14
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.16
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.12
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.8
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.10
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.30
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.28
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.26
	OPENBSD_5_0:1.8.0.24
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.22
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.20
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.16
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.18
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.14
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.12
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.10
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.8
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.4
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2013.08.10.08.13.32;	author mpi;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.09.11.33.25;	author mpi;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.18.23.21.17;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.22.22.55.25;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.21.22.07.45;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.15.15.01.23;	author martin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.07.14.48;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.03.14.45.37;	author drahn;	state Exp;
branches
	1.2.4.1
	1.2.6.1;
next	1.1;

1.1
date	2001.09.01.15.50.00;	author drahn;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.01.15;	author nate;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.03.28.10.36.01;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.27.23.29.46;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2002.06.11.03.36.33;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Move the device table inside the softc.
@
text
@/*	$OpenBSD: adbvar.h,v 1.9 2013/03/09 11:33:25 mpi Exp $	*/
/*	$NetBSD: adbvar.h,v 1.3 2000/06/08 22:10:46 tsubai Exp $	*/

/*-
 * Copyright (C) 1994	Bradley A. Grantham
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


struct adb_device {
	int	handler_id;
	int	orig_addr;
	int	curr_addr;

	void	(*handler)(void);
	void	*data;
};

struct adb_softc {
	struct device sc_dev;
	char *sc_regbase;

	struct adb_device	sc_devtable[16];
};

extern int adbHardware;

/* types of adb hardware that we support */
#define ADB_HW_UNKNOWN		0x01	/* don't know */
#define ADB_HW_PMU		0x04	/* PowerBook series */
#define ADB_HW_CUDA		0x05	/* Machines with a Cuda chip */

int	adb_poweroff(void);
void	adb_restart(void);
int	adb_read_date_time(time_t *t);
int	adb_set_date_time(time_t t);
@


1.9
log
@Drop 3rd and 4th clauses from Bradley A. Grantham's license, from NetBSD
via Daniel Dickman.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.8 2006/01/18 23:21:17 miod Exp $	*/
d29 10
d42 2
@


1.8
log
@Factorize akbd and ams drivers between mac68k and macppc; while there, start
moving out common adb code as well, and merge adb_direct.c into adb.c to
simplify external header files.

No functional change; more cleanups to come.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.7 2005/12/22 22:55:25 miod Exp $	*/
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Bradley A. Grantham.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.7
log
@Remove orphaned adb/pmu stuff; ok hshoexer@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.6 2005/10/21 22:07:45 kettenis Exp $	*/
a33 36
#include <machine/adbsys.h>

/*
 * Arguments used to attach a device to the Apple Desktop Bus
 */
struct adb_attach_args {
	int	origaddr;
	int	adbaddr;
	int	handler_id;
};

#ifdef DEBUG
#ifndef ADB_DEBUG
#define ADB_DEBUG
#endif
#endif

extern int	adb_polling;	/* Are we polling?  (Debugger mode) */
#ifdef ADB_DEBUG
extern int	adb_debug;
#endif

typedef caddr_t Ptr;

/* ADB Manager */
typedef struct {
	Ptr siServiceRtPtr;
	Ptr siDataAreaAddr;
} ADBSetInfoBlock;
typedef struct {
	unsigned char	devType;
	unsigned char	origADBAddr;
	Ptr		dbServiceRtPtr;
	Ptr		dbDataAreaAddr;
} ADBDataBlock;

a38 1
/* adb_direct.c */
d41 1
a41 1
/* types of adb hardware that we (will eventually) support */
a45 5
#define ADB_CMDADDR(cmd)	((u_int8_t)((cmd) & 0xf0) >> 4)
#define ADBFLUSH(dev)		((((u_int8_t)(dev) & 0x0f) << 4) | 0x01)
#define ADBLISTEN(dev, reg)	((((u_int8_t)(dev) & 0x0f) << 4) | 0x08 | (reg))
#define ADBTALK(dev, reg)	((((u_int8_t)(dev) & 0x0f) << 4) | 0x0c | (reg))

d47 1
a47 4
int	CountADBs(void);
void	ADBReInit(void);
int	GetIndADB(ADBDataBlock * info, int index);
int	SetADBInfo(ADBSetInfoBlock * info, int adbAddr);
a49 3
int	adb_intr(void *arg);
void	adb_cuda_autopoll(void);
int	adb_op_sync(Ptr, Ptr, Ptr, short);
@


1.6
log
@Clean up RTC code.
ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.5 2005/10/15 15:01:23 martin Exp $	*/
a91 1
int	GetADBInfo(ADBDataBlock * info, int adbAddr);
@


1.5
log
@- merge adb_direct.h bits into adbvar.h
- rename ADB_HW_PB to ADB_HW_PMU

from NetBSD

ok brad@@; additonal testing krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.4 2002/06/07 07:14:48 miod Exp $	*/
d94 2
a95 2
int	adb_read_date_time(unsigned long *t);
int	adb_set_date_time(unsigned long t);
@


1.4
log
@Vacuum cleaning of the adb code, step 1: random KNF, remove mac68k
leftovers, unused variables and functions, fix some comments, etc.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.3 2002/03/14 01:26:36 millert Exp $	*/
d78 5
d98 1
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.2 2001/10/03 14:45:37 drahn Exp $	*/
a44 12
#define ADB_MAXTRACE	(NBPG / sizeof(int) - 1)
extern int adb_traceq[ADB_MAXTRACE];
extern int adb_traceq_tail;
extern int adb_traceq_len;

typedef struct adb_trace_xlate_s {
	int     params;
	char   *string;
}       adb_trace_xlate_t;

extern adb_trace_xlate_t adb_trace_xlations[];

d51 1
a56 1
typedef caddr_t *Handle;
d75 2
a76 30

/* adb.c */
void	adb_enqevent(adb_event_t *event);
void	adb_handoff(adb_event_t *event);
void	adb_autorepeat(void *keyp);
void	adb_dokeyupdown(adb_event_t *event);
void	adb_keymaybemouse(adb_event_t *event);
void	adb_processevent(adb_event_t *event);
int	adbopen(dev_t dev, int flag, int mode, struct proc *p);
int	adbclose(dev_t dev, int flag, int mode, struct proc *p);
int	adbread(dev_t dev, struct uio *uio, int flag);
int	adbwrite(dev_t dev, struct uio *uio, int flag);
int	adbioctl(dev_t , int , caddr_t , int , struct proc *);
int	adbpoll(dev_t dev, int events, struct proc *p);

/* adbsys.c */
void	adb_complete(caddr_t buffer, caddr_t data_area, int adb_command);
void	adb_msa3_complete(caddr_t buffer, caddr_t data_area, int adb_command);
void	adb_mm_nonemp_complete(caddr_t buffer, caddr_t data_area, int adb_command);
void	extdms_init(int);
void	extdms_complete(caddr_t, caddr_t, int);

/* types of adb hardware that we (will eventually) support */
#define ADB_HW_UNKNOWN		0x01	/* don't know */
#define ADB_HW_II		0x02	/* Mac II series */
#define ADB_HW_IISI		0x03	/* Mac IIsi series */
#define ADB_HW_PB		0x04	/* PowerBook series */
#define ADB_HW_CUDA		0x05	/* Machines with a Cuda chip */

extern int adbHardware;                 /* in adb_direct.c */
a82 1
/* adb_direct.c */
a88 1
int	ADBOp(Ptr buffer, Ptr compRout, Ptr data, short commandNum);
@


1.2
log
@apm support for macppc. This is not fully implemented, sleep modes
and power event are not handled, however it is enough support
to poll the battery/AC/charging states of the system.
Code by Alexander Guy.
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.1 2001/09/01 15:50:00 drahn Exp $	*/
d89 12
a100 12
void	adb_enqevent __P((adb_event_t *event));
void	adb_handoff __P((adb_event_t *event));
void	adb_autorepeat __P((void *keyp));
void	adb_dokeyupdown __P((adb_event_t *event));
void	adb_keymaybemouse __P((adb_event_t *event));
void	adb_processevent __P((adb_event_t *event));
int	adbopen __P((dev_t dev, int flag, int mode, struct proc *p));
int	adbclose __P((dev_t dev, int flag, int mode, struct proc *p));
int	adbread __P((dev_t dev, struct uio *uio, int flag));
int	adbwrite __P((dev_t dev, struct uio *uio, int flag));
int	adbioctl __P((dev_t , int , caddr_t , int , struct proc *));
int	adbpoll __P((dev_t dev, int events, struct proc *p));
d103 5
a107 5
void	adb_complete __P((caddr_t buffer, caddr_t data_area, int adb_command));
void	adb_msa3_complete __P((caddr_t buffer, caddr_t data_area, int adb_command));
void	adb_mm_nonemp_complete __P((caddr_t buffer, caddr_t data_area, int adb_command));
void	extdms_init __P((int));
void	extdms_complete __P((caddr_t, caddr_t, int));
d124 11
a134 11
int	adb_poweroff __P((void));
int	CountADBs __P((void));
void	ADBReInit __P((void));
int	GetIndADB __P((ADBDataBlock * info, int index));
int	GetADBInfo __P((ADBDataBlock * info, int adbAddr));
int	SetADBInfo __P((ADBSetInfoBlock * info, int adbAddr));
int	ADBOp __P((Ptr buffer, Ptr compRout, Ptr data, short commandNum));
int	adb_read_date_time __P((unsigned long *t));
int	adb_set_date_time __P((unsigned long t));
int	adb_intr __P((void *arg));
void	adb_cuda_autopoll __P((void));
@


1.2.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.2 2001/10/03 14:45:37 drahn Exp $	*/
d45 12
a62 1
extern int	adb_polling;	/* Are we polling?  (Debugger mode) */
d68 1
d87 30
a116 2
/* adb_direct.c */
extern int adbHardware;
d123 12
a134 10
int	adb_poweroff(void);
int	CountADBs(void);
void	ADBReInit(void);
int	GetIndADB(ADBDataBlock * info, int index);
int	GetADBInfo(ADBDataBlock * info, int adbAddr);
int	SetADBInfo(ADBSetInfoBlock * info, int adbAddr);
int	adb_read_date_time(unsigned long *t);
int	adb_set_date_time(unsigned long t);
int	adb_intr(void *arg);
void	adb_cuda_autopoll(void);
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.4.2
log
@Merge in -current from about a week ago
@
text
@d89 12
a100 12
void	adb_enqevent(adb_event_t *event);
void	adb_handoff(adb_event_t *event);
void	adb_autorepeat(void *keyp);
void	adb_dokeyupdown(adb_event_t *event);
void	adb_keymaybemouse(adb_event_t *event);
void	adb_processevent(adb_event_t *event);
int	adbopen(dev_t dev, int flag, int mode, struct proc *p);
int	adbclose(dev_t dev, int flag, int mode, struct proc *p);
int	adbread(dev_t dev, struct uio *uio, int flag);
int	adbwrite(dev_t dev, struct uio *uio, int flag);
int	adbioctl(dev_t , int , caddr_t , int , struct proc *);
int	adbpoll(dev_t dev, int events, struct proc *p);
d103 5
a107 5
void	adb_complete(caddr_t buffer, caddr_t data_area, int adb_command);
void	adb_msa3_complete(caddr_t buffer, caddr_t data_area, int adb_command);
void	adb_mm_nonemp_complete(caddr_t buffer, caddr_t data_area, int adb_command);
void	extdms_init(int);
void	extdms_complete(caddr_t, caddr_t, int);
d124 11
a134 11
int	adb_poweroff(void);
int	CountADBs(void);
void	ADBReInit(void);
int	GetIndADB(ADBDataBlock * info, int index);
int	GetADBInfo(ADBDataBlock * info, int adbAddr);
int	SetADBInfo(ADBSetInfoBlock * info, int adbAddr);
int	ADBOp(Ptr buffer, Ptr compRout, Ptr data, short commandNum);
int	adb_read_date_time(unsigned long *t);
int	adb_set_date_time(unsigned long t);
int	adb_intr(void *arg);
void	adb_cuda_autopoll(void);
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@d45 12
a62 1
extern int	adb_polling;	/* Are we polling?  (Debugger mode) */
d68 1
d87 30
a116 2
/* adb_direct.c */
extern int adbHardware;
d123 1
d130 1
@


1.1
log
@The "powerpc" port which has supported the newer Apple Macintosh powerpc based
is being renamed to macppc. This is to allow sharing of common code
between different powerpc base platforms.

Most of the work involved in the renaming process was performed by miod@@

Files moved from powerpc/mac to macppc/dev
@
text
@d1 1
a1 1
/*	$OpenBSD: adbvar.h,v 1.3 2001/07/04 08:38:50 niklas Exp $	*/
d115 2
@

