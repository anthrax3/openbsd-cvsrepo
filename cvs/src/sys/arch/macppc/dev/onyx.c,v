head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.2
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.10.0.28
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.24
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.26
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.18
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.22
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.20
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6;
locks; strict;
comment	@ * @;


1.12
date	2016.09.19.06.46.43;	author ratchov;	state Exp;
branches;
next	1.11;
commitid	qGgYgJTgEFuAoGj4;

1.11
date	2016.09.14.06.12.19;	author ratchov;	state Exp;
branches;
next	1.10;
commitid	pi1a9KN0itEngOc4;

1.10
date	2009.10.26.20.17.27;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.29.00.04.14;	author jakemsr;	state Exp;
branches;
next	1.8;

1.8
date	2008.04.21.00.32.42;	author jakemsr;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.23.16.27.20;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.28.10.08.07;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.17.00.04.10;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.20.19.54.04;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.20.02.56.44;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.20.02.36.34;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.19.00.43.42;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove unused getdev() audio driver functions.
@
text
@/*	$OpenBSD: onyx.c,v 1.11 2016/09/14 06:12:19 ratchov Exp $	*/

/*-
 * Copyright (c) 2005 Tsubai Masanari.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * http://focus.ti.com/docs/prod/folders/print/pcm3052.html
 *
 * Datasheet is available from
 * http://focus.ti.com/docs/prod/folders/print/pcm3052a.html
 */

#include <sys/param.h>
#include <sys/audioio.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <dev/audio_if.h>
#include <dev/ofw/openfirm.h>
#include <macppc/dev/dbdma.h>

#include <machine/autoconf.h>

#include <macppc/dev/i2svar.h>
#include <macppc/dev/kiicvar.h>

#ifdef ONYX_DEBUG
# define DPRINTF printf
#else
# define DPRINTF while (0) printf
#endif

/* XXX */
#define PCM3052_I2C_ADDR	0x8c

/* PCM3052 registers */
#define PCM3052_REG_LEFT_VOLUME		0x41
#define PCM3052_REG_RIGHT_VOLUME	0x42

/* XXX */
#define onyx_softc i2s_softc

/* XXX */
void kiic_setmode(struct kiic_softc *, u_int, u_int);
int kiic_write(struct device *, int, int, const void *, int);

int onyx_match(struct device *, void *, void *);
void onyx_attach(struct device *, struct device *, void *);
void onyx_defer(struct device *);
void onyx_set_volume(struct onyx_softc *, int, int);

struct cfattach onyx_ca = {
	sizeof(struct onyx_softc), onyx_match, onyx_attach
};

struct cfdriver onyx_cd = {
	NULL, "onyx", DV_DULL
};

struct audio_hw_if onyx_hw_if = {
	i2s_open,
	i2s_close,
	i2s_set_params,
	i2s_round_blocksize,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	i2s_halt_output,
	i2s_halt_input,
	NULL,
	NULL,
	i2s_set_port,
	i2s_get_port,
	i2s_query_devinfo,
	i2s_allocm,
	NULL,
	i2s_round_buffersize,
	i2s_get_props,
	i2s_trigger_output,
	i2s_trigger_input
};

int
onyx_match(struct device *parent, void *match, void *aux)
{
	struct confargs *ca = aux;
	int soundbus, soundchip, soundcodec;
	int32_t layout = 0;

	if (strcmp(ca->ca_name, "i2s") != 0)
		return (0);

	if ((soundbus = OF_child(ca->ca_node)) == 0 ||
	    (soundchip = OF_child(soundbus)) == 0)
		return (0);

	if (OF_getprop(soundchip, "platform-onyx-codec-ref",
	    &soundcodec, sizeof soundcodec) == sizeof soundcodec)
		return (1);

	/* 
	 * Apple really messed up.  First and second generation iMac
	 * G5 (PowerMac8,1 and PowerMac8,2) have a "deq" i2c device
	 * listed in the OF device tree, which is a telltale sign of
	 * snapper(4).  But in reality that chip isn't there.  So we
	 * match on "layout-id" instead.
	 */
	if (OF_getprop(soundchip, "layout-id", &layout, sizeof layout) &&
	    (layout == 0x2d || layout == 0x56))
		return (1);

	return (0);
}

void
onyx_attach(struct device *parent, struct device *self, void *aux)
{
	struct onyx_softc *sc = (struct onyx_softc *)self;

	sc->sc_setvolume = onyx_set_volume;

	i2s_attach(parent, sc, aux);
	config_defer(self, onyx_defer);
}

void
onyx_defer(struct device *dev)
{
	struct onyx_softc *sc = (struct onyx_softc *)dev;
	struct device *dv;

	TAILQ_FOREACH(dv, &alldevs, dv_list)
		if (strcmp(dv->dv_cfdata->cf_driver->cd_name, "kiic") == 0 &&
		    strcmp(dv->dv_parent->dv_cfdata->cf_driver->cd_name, "macobio") == 0)
			sc->sc_i2c = dv;
	if (sc->sc_i2c == NULL) {
		printf("%s: unable to find i2c\n", sc->sc_dev.dv_xname);
		return;
	}

	/* XXX If i2c has failed to attach, what should we do? */

	audio_attach_mi(&onyx_hw_if, sc, &sc->sc_dev);

	deq_reset(sc);
	onyx_set_volume(sc, 192, 192);
}

void
onyx_set_volume(struct onyx_softc *sc, int left, int right)
{
	u_int8_t data;

	sc->sc_vol_l = left;
	sc->sc_vol_r = right;

	kiic_setmode(sc->sc_i2c, I2C_STDSUBMODE, 0);
	data = 128 + (left >> 1);
	kiic_write(sc->sc_i2c, PCM3052_I2C_ADDR,
	    PCM3052_REG_LEFT_VOLUME, &data, 1);
	data = 128 + (right >> 1);
	kiic_write(sc->sc_i2c, PCM3052_I2C_ADDR,
	    PCM3052_REG_RIGHT_VOLUME, &data, 1);
}
@


1.11
log
@Remove drain(), query_encoding(), mappage() and get_default_params()
methods from all audio drivers and from the audio_if structure as they
are never called.
@
text
@d1 1
a1 1
/*	$OpenBSD: onyx.c,v 1.9 2008/10/29 00:04:14 jakemsr Exp $	*/
a69 1
int onyx_getdev(void *, struct audio_device *);
a95 1
	onyx_getdev,
a107 6
struct audio_device onyx_device = {
	"ONYX",
	"",
	"onyx"
};

a171 7
}

int
onyx_getdev(void *h, struct audio_device *retp)
{
	*retp = onyx_device;
	return (0);
@


1.10
log
@Do not do strncmp comparisons on dv_xname because longer device names which
look similar could arrive in the future.  Instead, compare directly against
dv_cfdata->cf_driver->cd_name
Issue originally spotted by miod
@
text
@a74 1
void onyx_get_default_params(void *, int, struct audio_params *);
a86 2
	NULL,
	i2s_query_encoding,
a104 1
	i2s_mappage,
d107 1
a107 2
	i2s_trigger_input,
	onyx_get_default_params
a203 6
}

void
onyx_get_default_params(void *addr, int mode, struct audio_params *params)
{
	i2s_get_default_params(params);
@


1.9
log
@
native default parameters for i2s devices instead of 8kHz
mulaw mono, which few can even do.

"Please just get this in." brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: onyx.c,v 1.8 2008/04/21 00:32:42 jakemsr Exp $	*/
d171 2
a172 2
		if (strncmp(dv->dv_xname, "kiic", 4) == 0 &&
		    strncmp(dv->dv_parent->dv_xname, "macobio", 7) == 0)
@


1.8
log
@
allow low level audio drivers to specify a default sample format,
instead of 8-bit mono mulaw @@ 8kHz.

this is just the infrastructure; no drivers are specifying a default
yet.

ok ratchov@@, deanna@@
@
text
@d1 1
a1 1
/*	$OpenBSD: onyx.c,v 1.7 2007/04/23 16:27:20 deraadt Exp $	*/
d75 1
d112 1
a112 1
	NULL
d209 6
@


1.7
log
@rename drivers with numbers in them; ok gwk drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: onyx.c,v 1.6 2005/12/28 10:08:07 kettenis Exp $	*/
d111 1
@


1.6
log
@Fix totally bogus previous commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: onyx.c,v 1.5 2005/12/17 00:04:10 kettenis Exp $	*/
d48 1
a48 1
#include <macppc/dev/ki2cvar.h>
d67 2
a68 2
void ki2c_setmode(struct ki2c_softc *, u_int, u_int);
int ki2c_write(struct device *, int, int, const void *, int);
d169 1
a169 1
		if (strncmp(dv->dv_xname, "ki2c", 4) == 0 &&
d200 1
a200 1
	ki2c_setmode(sc->sc_i2c, I2C_STDSUBMODE, 0);
d202 1
a202 1
	ki2c_write(sc->sc_i2c, PCM3052_I2C_ADDR,
d205 1
a205 1
	ki2c_write(sc->sc_i2c, PCM3052_I2C_ADDR,
@


1.5
log
@Make sure we match the correct driver for newer macppc systems.
tested by xsa@@, ok joris@@, brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: onyx.c,v 1.4 2005/11/20 19:54:04 brad Exp $	*/
d134 1
a134 1
	    &soundcodec, sizeof soundcodec))
@


1.4
log
@- add a datasheet for daca(4)
- add a datasheet for a very similar chipset to onyx(4); From kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: onyx.c,v 1.3 2005/11/20 02:56:44 brad Exp $	*/
d123 2
a124 2
	int soundbus, soundchip;
	char compat[32];
d133 13
a145 4
	bzero(compat, sizeof compat);
	OF_getprop(soundchip, "compatible", compat, sizeof compat);

	if (strcmp(compat, "AOAbase") == 0)
@


1.3
log
@don't say datasheet yet, but at least mention product info.
@
text
@d1 1
a1 1
/*	$OpenBSD: onyx.c,v 1.2 2005/11/20 02:36:34 brad Exp $	*/
d31 3
@


1.2
log
@add the datasheet URL.
@
text
@d1 1
a1 1
/*	$OpenBSD: onyx.c,v 1.1 2005/11/19 00:43:42 kettenis Exp $	*/
a29 1
 * Datasheet is available from
@


1.1
log
@Apple "onyx" audio device driver.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d27 5
@

