head	1.10;
access;
symbols
	OPENBSD_6_0:1.8.0.28
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.24
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.26
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.18
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2016.09.19.06.46.43;	author ratchov;	state Exp;
branches;
next	1.9;
commitid	qGgYgJTgEFuAoGj4;

1.9
date	2016.09.14.06.12.19;	author ratchov;	state Exp;
branches;
next	1.8;
commitid	pi1a9KN0itEngOc4;

1.8
date	2010.02.26.21.53.43;	author jasper;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.26.20.17.27;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2008.10.29.00.04.14;	author jakemsr;	state Exp;
branches;
next	1.5;

1.5
date	2008.04.21.00.32.42;	author jakemsr;	state Exp;
branches;
next	1.4;

1.4
date	2007.04.23.16.27.20;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.20.19.54.05;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.05.04.26.22;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.30.23.55.03;	author joris;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove unused getdev() audio driver functions.
@
text
@/*	$OpenBSD: daca.c,v 1.9 2016/09/14 06:12:19 ratchov Exp $	*/

/*-
 * Copyright (c) 2002,2003 Tsubai Masanari.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Datasheet is available from
 * http://www.indata.si/grega/pdfs/dac3550a.pdf
 */

#include <sys/param.h>
#include <sys/audioio.h>
#include <sys/device.h>
#include <sys/systm.h>

#include <dev/audio_if.h>
#include <dev/ofw/openfirm.h>
#include <macppc/dev/dbdma.h>

#include <machine/autoconf.h>

#include <macppc/dev/i2svar.h>

#ifdef DACA_DEBUG
# define DPRINTF printf
#else
# define DPRINTF while (0) printf
#endif

/* XXX */
#define daca_softc i2s_softc

/* XXX */
int kiic_write(struct device *, int, int, const void *, int);
int kiic_writereg(struct device *, int, u_int);

int daca_match(struct device *, void *, void *);
void daca_attach(struct device *, struct device *, void *);
void daca_defer(struct device *);
void daca_init(struct daca_softc *);
void daca_set_volume(struct daca_softc *, int, int);

struct cfattach daca_ca = {
	sizeof(struct daca_softc), daca_match, daca_attach
};

struct cfdriver daca_cd = {
	NULL, "daca", DV_DULL
};

struct audio_hw_if daca_hw_if = {
	i2s_open,
	i2s_close,
	i2s_set_params,
	i2s_round_blocksize,
	NULL,
	NULL,
	NULL,
	NULL,
	NULL,
	i2s_halt_output,
	i2s_halt_input,
	NULL,
	NULL,
	i2s_set_port,
	i2s_get_port,
	i2s_query_devinfo,
	i2s_allocm,		/* allocm */
	NULL,
	i2s_round_buffersize,
	i2s_get_props,
	i2s_trigger_output,
	i2s_trigger_input
};

/* DAC3550A registers */
#define DEQ_SR		0x01	/* Sample rate control (8) */
#define DEQ_AVOL	0x02	/* Analog volume (16) */
#define DEQ_GCFG	0x03	/* Global configuration (8) */

int
daca_match(struct device *parent, void *match, void *aux)
{
	struct confargs *ca = aux;
	int soundbus, soundchip;
	char compat[32];

	if (strcmp(ca->ca_name, "i2s") != 0)
		return (0);

	if ((soundbus = OF_child(ca->ca_node)) == 0 ||
	    (soundchip = OF_child(soundbus)) == 0)
		return (0);

	bzero(compat, sizeof compat);
	OF_getprop(soundchip, "compatible", compat, sizeof compat);

	if (strcmp(compat, "daca") != 0)
		return (0);

	return (1);
}

#define DEQaddr 0x9a

void
daca_attach(struct device *parent,struct device *self, void *aux)
{
	struct daca_softc *sc = (struct daca_softc *)self;

	sc->sc_setvolume = daca_set_volume;

	i2s_attach(parent, sc, aux);
	config_defer(self, daca_defer);
}

void
daca_defer(struct device *dev)
{
	struct daca_softc *sc = (struct daca_softc *)dev;
	struct device *dv;

	TAILQ_FOREACH(dv, &alldevs, dv_list)
		if (strcmp(dv->dv_cfdata->cf_driver->cd_name, "kiic") == 0 &&
		    strcmp(dv->dv_parent->dv_cfdata->cf_driver->cd_name, "macobio") == 0)
			sc->sc_i2c = dv;
	if (sc->sc_i2c == NULL) {
		printf("%s: unable to find i2c\n", sc->sc_dev.dv_xname);
		return;
	}

	/* XXX If i2c has failed to attach, what should we do? */

	audio_attach_mi(&daca_hw_if, sc, &sc->sc_dev);

	daca_init(sc);
}

void
daca_init(struct daca_softc *sc)
{
	i2s_set_rate(sc, 44100);
	kiic_writereg(sc->sc_i2c, 4, 0x01 | 0x02 | 0x04);
}

void
daca_set_volume(struct daca_softc *sc, int left, int right)
{
	u_int16_t data;

	sc->sc_vol_l = left;
	sc->sc_vol_r = right;

	left >>= 2;
	right >>= 2;
	data = left << 8 | right;
	kiic_write(sc->sc_i2c, DEQaddr, DEQ_AVOL, &data, 2);
}
@


1.9
log
@Remove drain(), query_encoding(), mappage() and get_default_params()
methods from all audio drivers and from the audio_if structure as they
are never called.
@
text
@d1 1
a1 1
/*	$OpenBSD: daca.c,v 1.7 2009/10/26 20:17:27 deraadt Exp $	*/
a59 1
int daca_getdev(void *, struct audio_device *);
a86 1
	daca_getdev,
a98 6
struct audio_device daca_device = {
	"DACA",
	"",
	"daca"
};

a166 7
}

int
daca_getdev(void *h, struct audio_device *retp)
{
	*retp = daca_device;
	return (0);
@


1.8
log
@- remove double cvs id's
@
text
@a65 1
void daca_get_default_params(void *, int, struct audio_params *);
a77 2
	NULL,
	i2s_query_encoding,
a95 1
	i2s_mappage,
d98 1
a98 2
	i2s_trigger_input,
	daca_get_default_params
a195 6
}

void
daca_get_default_params(void *addr, int mode, struct audio_params *params)
{
	i2s_get_default_params(params);
@


1.7
log
@Do not do strncmp comparisons on dv_xname because longer device names which
look similar could arrive in the future.  Instead, compare directly against
dv_cfdata->cf_driver->cd_name
Issue originally spotted by miod
@
text
@d1 1
a1 2
/*	$OpenBSD: daca.c,v 1.6 2008/10/29 00:04:14 jakemsr Exp $	*/
/*	$Id: daca.c,v 1.6 2008/10/29 00:04:14 jakemsr Exp $	*/
@


1.6
log
@
native default parameters for i2s devices instead of 8kHz
mulaw mono, which few can even do.

"Please just get this in." brad@@
@
text
@d1 2
a2 2
/*	$OpenBSD: daca.c,v 1.5 2008/04/21 00:32:42 jakemsr Exp $	*/
/*	$Id: daca.c,v 1.5 2008/04/21 00:32:42 jakemsr Exp $	*/
d161 2
a162 2
		if (strncmp(dv->dv_xname, "kiic", 4) == 0 &&
		    strncmp(dv->dv_parent->dv_xname, "macobio", 7) == 0)
@


1.5
log
@
allow low level audio drivers to specify a default sample format,
instead of 8-bit mono mulaw @@ 8kHz.

this is just the infrastructure; no drivers are specifying a default
yet.

ok ratchov@@, deanna@@
@
text
@d1 2
a2 2
/*	$OpenBSD: daca.c,v 1.4 2007/04/23 16:27:20 deraadt Exp $	*/
/*	$Id: daca.c,v 1.4 2007/04/23 16:27:20 deraadt Exp $	*/
d67 1
d104 1
a104 1
	NULL
d202 6
@


1.4
log
@rename drivers with numbers in them; ok gwk drahn
@
text
@d1 2
a2 2
/*	$OpenBSD: daca.c,v 1.3 2005/11/20 19:54:05 brad Exp $	*/
/*	$Id: daca.c,v 1.3 2005/11/20 19:54:05 brad Exp $	*/
d103 1
@


1.3
log
@- add a datasheet for daca(4)
- add a datasheet for a very similar chipset to onyx(4); From kettenis@@
@
text
@d1 2
a2 2
/*	$OpenBSD: daca.c,v 1.2 2005/11/05 04:26:22 brad Exp $	*/
/*	$Id: daca.c,v 1.2 2005/11/05 04:26:22 brad Exp $	*/
d58 2
a59 2
int ki2c_write(struct device *, int, int, const void *, int);
int ki2c_writereg(struct device *, int, u_int);
d159 1
a159 1
		if (strncmp(dv->dv_xname, "ki2c", 4) == 0 &&
d178 1
a178 1
	ki2c_writereg(sc->sc_i2c, 4, 0x01 | 0x02 | 0x04);
d199 1
a199 1
	ki2c_write(sc->sc_i2c, DEQaddr, DEQ_AVOL, &data, 2);
@


1.2
log
@some driver cleanup, ANSI/KNF and more consistency between the drivers.

ok joris@@
@
text
@d1 2
a2 2
/*	$OpenBSD: daca.c,v 1.1 2005/10/30 23:55:03 joris Exp $	*/
/*	$Id: daca.c,v 1.1 2005/10/30 23:55:03 joris Exp $	*/
d30 5
d111 1
a111 1
/* DAC3550 registers */
@


1.1
log
@add daca audio support, found in some macppc machines;
ok drahn@@
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$Id: daca.c,v 1.1 2005/09/29 15:21:48 makoto Exp $	*/
a32 1
#include <sys/malloc.h>
a34 1
#include <dev/auconv.h>
a35 1
#include <dev/mulaw.h>
d49 6
a54 1
#define daca_softc i2s_softc		/* XXX */
a62 4
/* XXX */
int ki2c_write(struct device *, int, int, const void *, int);
int ki2c_writereg(struct device *, int, u_int);

d91 1
a91 1
	i2s_allocm,
d112 1
a112 4
daca_match(parent, match, aux)
	struct device *parent;
	void *match;
	void *aux;
d119 1
a119 1
		return 0;
d123 1
a123 1
		return 0;
d129 1
a129 1
		return 0;
d131 1
a131 1
	return 1;
d137 1
a137 3
daca_attach(parent, self, aux)
	struct device *parent, *self;
	void *aux;
a140 1
	/* "set volume" callback */
d153 1
a153 1
	TAILQ_FOREACH(dv, &alldevs, dv_list) {
a156 2
	}

d162 2
d165 1
d177 1
a177 3
daca_getdev(h, retp)
	void *h;
	struct audio_device *retp;
d180 1
a180 1
	return 0;
d184 1
a184 3
daca_set_volume(sc, left, right)
	struct daca_softc *sc;
	int left, right;
@

