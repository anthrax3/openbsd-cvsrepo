head	1.14;
access;
symbols
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.6
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.8
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.4
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.5.0.10
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	UBC:1.1.0.6
	UBC_SYNC_A:1.1
	SMP:1.1.0.4
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.03.18.22.36.34;	author miod;	state dead;
branches;
next	1.13;

1.13
date	2014.01.30.18.16.41;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2014.01.23.22.06.29;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.23.16.12.24;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.30.22.25.21;	author oga;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.15.05.30.19;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.29.20.30.32;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.25.21.25.25;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2008.07.24.04.54.27;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.08.23.50.54;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2005.04.11.15.13.01;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.28.01.36.38;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.02.23.27.48;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.27.19.37.30;	author miod;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.06.07.11.11.39;	author ho;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: vmparam.h,v 1.13 2014/01/30 18:16:41 miod Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Machine dependent constants for m68k-based platforms.
 */
#ifndef	_M68K_VMPARAM_H_
#define	_M68K_VMPARAM_H_

/*
 * USRTEXT is the start of the user text/data space, while USRSTACK
 * is the top (end) of the user stack.
 *
 * NOTE: the ONLY reason that USRSTACK is 0xfff00000 instead of -USIZE
 * was for HPUX compatibility.  That's been removed, so this could
 * change now.
 */
#define	USRTEXT		8192
#define	USRSTACK	0xfff00000	/* Start of user stack */

/*
 * Virtual memory related constants, all in bytes
 */
#ifndef MAXTSIZ
#define	MAXTSIZ		(8*1024*1024)		/* max text size */
#endif
#ifndef DFLDSIZ
#define	DFLDSIZ		(32*1024*1024)		/* initial data size limit */
#endif
#ifndef MAXDSIZ
#define	MAXDSIZ		(64*1024*1024)		/* max data size */
#endif
#ifndef BRKSIZ
#define	BRKSIZ		MAXDSIZ			/* heap gap size */
#endif
#ifndef	DFLSSIZ
#define	DFLSSIZ		(2*1024*1024)		/* initial stack size limit */
#endif
#ifndef	MAXSSIZ
#define	MAXSSIZ		MAXDSIZ			/* max stack size */
#endif

#define STACKGAP_RANDOM	256*1024

/*
 * Sizes of the system and user portions of the system page table.
 */
#define	USRPTSIZE 	(1 * NPTEPG)	/* 4mb */

/*
 * PTEs for mapping user space into the kernel for physio operations.
 * One page is enough to handle 4Mb of simultaneous raw IO operations.
 */
#ifndef USRIOSIZE
#define USRIOSIZE	(1 * NPTEPG)	/* 4mb */
#endif

/*
 * PTEs for system V style shared memory.
 * This is basically slop for kmempt which we actually allocate (malloc) from.
 */
#ifndef SHMMAXPGS
#define SHMMAXPGS	1024		/* 4mb */
#endif

/* user/kernel map constants */
#define VM_MIN_ADDRESS		((vaddr_t)0)
#define VM_MAXUSER_ADDRESS	((vaddr_t)(USRSTACK))
#define VM_MAX_ADDRESS		((vaddr_t)(0-(UPAGES*PAGE_SIZE)))
#define VM_MIN_KERNEL_ADDRESS	((vaddr_t)0)
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)(0-PAGE_SIZE))

/* virtual sizes (bytes) for various kernel submaps */
#define VM_PHYS_SIZE		(USRIOSIZE*PAGE_SIZE)

/* # of kernel PT pages (initial only, can grow dynamically) */
#define VM_KERNEL_PT_PAGES	((vsize_t)2)

/*
 * Constants which control the way the VM system deals with memory segments.
 */
#define	VM_PHYSSEG_NOADD

#endif /* !_M68K_VMPARAM_H_ */
@


1.13
log
@Move declaration of struct vm_page_md from <machine/vmparam.h> to
<machine/pmap.h> where it belongs, and compensate in <uvm/uvm_extern.h>
by including <uvm/uvm_pmap.h> before <uvm/uvm_page.h>. Tested on all
MACHINE_ARCH but amd64 and i386 (and hppa64).
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.12 2014/01/23 22:06:29 miod Exp $	*/
@


1.12
log
@unifdef -D__HAVE_VM_PAGE_MD - no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.11 2013/03/23 16:12:24 deraadt Exp $	*/
a115 38

#ifndef _LOCORE

#include <machine/pte.h>	/* st_entry_t */

/* XXX - belongs in pmap.h, but put here because of ordering issues */
struct pv_entry {
	struct pv_entry	*pv_next;	/* next pv_entry */
	struct pmap	*pv_pmap;	/* pmap where mapping lies */
	vaddr_t		pv_va;		/* virtual address for mapping */
	st_entry_t	*pv_ptste;	/* non-zero if VA maps a PT page */
	struct pmap	*pv_ptpmap;	/* if pv_ptste, pmap for PT page */
	int		pv_flags;	/* flags */
};

/*
 * pv_flags carries some PTE permission bits as well - make sure extra flags
 * values are > (1 << PG_SHIFT)
 */
/* header: all entries are cache inhibited */
#define	PV_CI		(0x01 << PG_SHIFT)
/* header: entry maps a page table page */
#define PV_PTPAGE	(0x02 << PG_SHIFT)

struct vm_page_md {
	struct pv_entry pvent;
};

#define	VM_MDPAGE_INIT(pg) do {			\
	(pg)->mdpage.pvent.pv_next = NULL;	\
	(pg)->mdpage.pvent.pv_pmap = NULL;	\
	(pg)->mdpage.pvent.pv_va = 0;		\
	(pg)->mdpage.pvent.pv_ptste = NULL;	\
	(pg)->mdpage.pvent.pv_ptpmap = NULL;	\
	(pg)->mdpage.pvent.pv_flags = 0;	\
} while (0)

#endif	/* _LOCORE */
@


1.11
log
@refactor sys/param.h and machine/param.h.  A lot of #ifdef _KERNEL is added
to keep definitions our of user space.  The MD files now follow a consistant
order -- all namespace intrusion is at the tail can be cleaned up
independently.  locore, bootblocks, and libkvm still see enough visibility to
build.  Checked on 90% of platforms...
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.10 2011/05/30 22:25:21 oga Exp $	*/
a139 1
#define	__HAVE_VM_PAGE_MD
@


1.10
log
@Remove the freelist member from vm_physseg

The new world order of pmemrange makes this data completely redundant
(being dealt with by the pmemrange constraints instead). Remove all code
that messes with the freelist.

While touching every caller of uvm_page_physload() anyway, add the flags
argument to all callers (all but one is 0 and that one already used
PHYSLOAD_DEVICE) and remove the macro magic to allow callers to continue
without it.

Should shrink the code a bit, as well.

matthew@@ pointed out some mistakes i'd made.
``freelist death, I like. Ok.' ariane@@
`I agree with the general direction, go ahead and i'll fix any fallout
shortly'' miod@@ (68k 88k and vax i could not check would build)
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.9 2010/12/15 05:30:19 tedu Exp $	*/
d102 1
a102 1
#define VM_MAX_ADDRESS		((vaddr_t)(0-(UPAGES*NBPG)))
d104 1
a104 1
#define VM_MAX_KERNEL_ADDRESS	((vaddr_t)(0-NBPG))
@


1.9
log
@oops, i forgot to check in the BRKSIZ define in uvm, but deraadt thinks
its better as a per arch MD define anyway.  all default to MAXDSIZ as before.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.8 2010/06/29 20:30:32 guenther Exp $	*/
a115 3

#define	VM_NFREELIST		1
#define	VM_FREELIST_DEFAULT	0
@


1.8
log
@Remove COMPAT_HPUX.  No one wanted to support it and its fewmets were
blocking other cleanups
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.7 2008/07/25 21:25:25 miod Exp $	*/
d65 3
@


1.7
log
@phyio -> physio
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.6 2008/07/24 04:54:27 miod Exp $	*/
d48 2
a49 3
 * is for HPUX compatibility.  Why??  Because HPUX's debuggers
 * have the user's stack hard-wired at FFF00000 for post-mortems,
 * and we must be compatible...
@


1.6
log
@Do not define vax-inspired LOWPAGES and HIGHPAGES anymore, they make no
sense on m68k. Give USRSTACK its real (HP-UX compatible) value instead of
computing it from HIGHPAGES.

No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.5 2005/12/08 23:50:54 miod Exp $	*/
d82 1
a82 1
 * PTEs for mapping user space into the kernel for phyio operations.
@


1.5
log
@Remove unused pcbb define.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.4 2005/04/11 15:13:01 deraadt Exp $	*/
d45 1
a45 4
 * is the top (end) of the user stack.  LOWPAGES and HIGHPAGES are
 * the number of pages from the beginning of the P0 region to the
 * beginning of the text and from the beginning of the P1 region to the
 * beginning of the stack respectively.
d47 1
a47 1
 * NOTE: the ONLY reason that HIGHPAGES is 0x100 instead of UPAGES (3)
d53 1
a53 3
#define	USRSTACK	(-HIGHPAGES*NBPG)	/* Start of user stack */
#define	LOWPAGES	0
#define	HIGHPAGES	(0x100000/NBPG)
@


1.4
log
@use MD #define to choose stackgap size per-architecture.  on sparc, special
case sun4c/sun4 -- because address space is more constrained
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.3 2004/11/28 01:36:38 mickey Exp $	*/
a113 3

/* pcb base */
#define	pcbb(p)			((u_int)(p)->p_addr)
@


1.3
log
@MAXSLP is not really an MD-configurable define so move it to param.h; miod@@ testing
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.2 2003/06/02 23:27:48 millert Exp $	*/
d78 2
@


1.2
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.1 2003/01/27 19:37:30 miod Exp $	*/
a98 11

/*
 * The time for a process to be blocked before being very swappable.
 * This is a number of seconds which the system takes as being a non-trivial
 * amount of real time.  You probably shouldn't change this;
 * it is used in subtle ways (fractions and multiples of it are, that is, like
 * half of a ``long time'', almost a long time, etc.)
 * It is related to human patience and other factors which don't really
 * change over time.
 */
#define	MAXSLP 		20
@


1.1
log
@Convert m68k pmap from physseg to VM_PAGE_MD.

This allows us to remove some ambiguities on how some functions are called,
remove some diagnostic checks for conditions that can never happen and
remove the ugly hack with "pmap_initialized".

Then, rework internal function interfaces and some logic so as to stop
fetching vm_page from a pa and the reverse every now and then - this makes
some pmap operations run much faster.

per art@@'s idea.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1.4.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vmparam.h,v 1.1 2003/01/27 19:37:30 miod Exp $	*/
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
@


