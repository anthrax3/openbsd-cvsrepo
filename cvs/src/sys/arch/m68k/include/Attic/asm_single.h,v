head	1.4;
access;
symbols
	OPENBSD_5_2:1.3.0.50
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.48
	OPENBSD_5_0:1.3.0.46
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.44
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.42
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.38
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.40
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.36
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.34
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.32
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.30
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.28
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.26
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.24
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.22
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.20
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.18
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.16
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.14
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.12
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.10
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.6
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.12
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.10
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.8
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.01.16.19.52.11;	author miod;	state dead;
branches;
next	1.3;

1.3
date	2001.01.15.19.50.37;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	98.04.25.07.09.06;	author d;	state Exp;
branches
	1.2.8.1;
next	1.1;

1.1
date	97.01.13.11.51.09;	author niklas;	state Exp;
branches;
next	;

1.2.8.1
date	2001.04.18.16.09.57;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove orphaned files.
@
text
@/*	$OpenBSD: asm_single.h,v 1.3 2001/01/15 19:50:37 deraadt Exp $	*/
/*	$NetBSD: asm_single.h,v 1.1 1996/09/16 06:03:58 leo Exp $	*/

/*
 * Copyright (c) 1996 Leo Weppelman.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Leo Weppelman.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _M68K_ASM_SINGLE_H
#define _M68K_ASM_SINGLE_H
/*
 * Provide bit manipulation macro's that resolve to a single instruction.
 * These can be considered atomic on single processor architectures when
 * no page faults can occur when acessing <var>.
 * Their primary use is to avoid race conditions when manipulating device
 * registers.
 */

#define single_inst_bset_b(var, bit)	\
	__asm__ __volatile__ ("orb %0,%1" : : "di" ((u_char)bit), "g" (var))
#define single_inst_bclr_b(var, bit)	\
	__asm__ __volatile__ ("andb %0,%1" : : "di" ((u_char)~(bit)), "g" (var));

#define single_inst_bset_w(var, bit)	\
	__asm__ __volatile__ ("orw %0,%1" : : "di" ((u_short)bit), "g" (var))
#define single_inst_bclr_w(var, bit)	\
	__asm__ __volatile__ ("andw %0,%1" : : "di" ((u_short)~(bit)), "g" (var));

#define single_inst_bset_l(var, bit)	\
	__asm__ __volatile__ ("orl %0,%1" : : "di" ((u_long)bit), "g" (var))
#define single_inst_bclr_l(var, bit)	\
	__asm__ __volatile__ ("andl %0,%1" : : "di" ((u_long)~(bit)), "g" (var));

#endif /* _M68K_ASM_SINGLE_H */
@


1.3
log
@__asm__ and __volatile__
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_single.h,v 1.2 1998/04/25 07:09:06 d Exp $	*/
@


1.2
log
@spelling
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_single.h,v 1.1 1997/01/13 11:51:09 niklas Exp $	*/
d45 1
a45 1
	asm volatile ("orb %0,%1" : : "di" ((u_char)bit), "g" (var))
d47 1
a47 1
	asm volatile ("andb %0,%1" : : "di" ((u_char)~(bit)), "g" (var));
d50 1
a50 1
	asm volatile ("orw %0,%1" : : "di" ((u_short)bit), "g" (var))
d52 1
a52 1
	asm volatile ("andw %0,%1" : : "di" ((u_short)~(bit)), "g" (var));
d55 1
a55 1
	asm volatile ("orl %0,%1" : : "di" ((u_long)bit), "g" (var))
d57 1
a57 1
	asm volatile ("andl %0,%1" : : "di" ((u_long)~(bit)), "g" (var));
@


1.2.8.1
log
@Update the SMP branch to -current, this breaks the SMP branch though.
But it will be fixed soonish.  Note, nothing new has happened, this is just
a merge of the trunk into this branch.
@
text
@d1 1
a1 1
/*	$OpenBSD: asm_single.h,v 1.3 2001/01/15 19:50:37 deraadt Exp $	*/
d45 1
a45 1
	__asm__ __volatile__ ("orb %0,%1" : : "di" ((u_char)bit), "g" (var))
d47 1
a47 1
	__asm__ __volatile__ ("andb %0,%1" : : "di" ((u_char)~(bit)), "g" (var));
d50 1
a50 1
	__asm__ __volatile__ ("orw %0,%1" : : "di" ((u_short)bit), "g" (var))
d52 1
a52 1
	__asm__ __volatile__ ("andw %0,%1" : : "di" ((u_short)~(bit)), "g" (var));
d55 1
a55 1
	__asm__ __volatile__ ("orl %0,%1" : : "di" ((u_long)bit), "g" (var))
d57 1
a57 1
	__asm__ __volatile__ ("andl %0,%1" : : "di" ((u_long)~(bit)), "g" (var));
@


1.1
log
@Sync to 970110 NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
 * There primary use is to avoid race conditions when manipulating device
@

