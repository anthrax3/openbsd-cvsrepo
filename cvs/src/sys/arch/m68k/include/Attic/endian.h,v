head	1.19;
access;
symbols
	OPENBSD_5_5:1.18.0.14
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.10
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.8
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.15.0.22
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.20
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.16
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.15.0.18
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.14
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.12
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.10
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.8
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.6
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.4
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.2
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.14.0.4
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.20
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.18
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.16
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.12.0.14
	UBC_BASE:1.12
	OPENBSD_3_0:1.12.0.12
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.12.0.10
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.8
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.6
	OPENBSD_2_7_BASE:1.12
	SMP:1.12.0.4
	SMP_BASE:1.12
	kame_19991208:1.12
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.11.0.6
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.4
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2014.03.18.22.36.33;	author miod;	state dead;
branches;
next	1.18;

1.18
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.17;

1.17
date	2011.03.12.04.03.04;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2011.03.11.15.17.08;	author pirofti;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.13.00.35.23;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2004.10.16.14.26.01;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.21.09.01;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	99.05.10.16.02.09;	author espie;	state Exp;
branches
	1.12.4.1;
next	1.11;

1.11
date	97.11.10.10.36.05;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	97.11.10.05.52.57;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.11.09.23.05.09;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	97.06.25.12.52.09;	author grr;	state Exp;
branches;
next	1.7;

1.7
date	97.06.25.12.32.50;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	97.04.04.03.05.31;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.04.02.20.40.47;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	97.01.13.11.51.10;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.11.25.13.11.26;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.22.17.40;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.59;	author deraadt;	state Exp;
branches;
next	;

1.12.4.1
date	2003.06.07.11.11.38;	author ho;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: endian.h,v 1.18 2011/03/23 16:54:35 pirofti Exp $	*/

/*-
 * Copyright (c) 1997 Niklas Hallqvist.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _M68K_ENDIAN_H_
#define _M68K_ENDIAN_H_

#ifdef __GNUC__

#define	__swap64md	__swap64gen

#define	__swap32md(x) __statement({					\
	u_int32_t __swap32md_x = (x);					\
									\
	__asm ("rorw #8, %0; swap %0; rorw #8, %0" :			\
	    "=d" (__swap32md_x) : "0" (__swap32md_x));			\
	__swap32md_x;							\
})

#define	__swap16md(x) __statement({					\
	u_int16_t __swap16md_x = (x);					\
									\
	__asm ("rorw #8, %0" : "=d" (__swap16md_x) :			\
	    "0" (__swap16md_x));					\
	__swap16md_x;							\
})

/* Tell sys/endian.h we have MD variants of the swap macros.  */
#define MD_SWAP

#endif /* __GNUC__ */

#define _BYTE_ORDER _BIG_ENDIAN
#include <sys/endian.h>

#endif /* _M68K_ENDIAN_H_ */
@


1.18
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.17 2011/03/12 04:03:04 guenther Exp $	*/
@


1.17
log
@Add missing __statement modifiers in various endian.h files and correct
%1 to %0 in the i386 asm.

asm correction ok drahn@@
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.16 2011/03/11 15:17:08 pirofti Exp $	*/
d27 2
a28 2
#ifndef _MACHINE_ENDIAN_H_
#define _MACHINE_ENDIAN_H_
d58 1
a58 1
#endif /* _MACHINE_ENDIAN_H_ */
@


1.16
log
@Use _MACHINE_ENDIAN_H_ for this is The Right Thing To Do.

Okay guenther@@, millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.15 2005/12/13 00:35:23 millert Exp $	*/
d34 1
a34 1
#define	__swap32md(x) ({						\
d42 1
a42 1
#define	__swap16md(x) ({						\
@


1.15
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.14 2004/10/16 14:26:01 miod Exp $	*/
d27 2
a28 2
#ifndef _M68K_ENDIAN_H_
#define _M68K_ENDIAN_H_
d58 1
a58 1
#endif /* _M68K_ENDIAN_H_ */
@


1.14
log
@Provide a dummp __swap64md() on MD_SWAP architectures; needed by nm(1) now.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.13 2003/06/03 21:09:01 deraadt Exp $	*/
d55 1
a55 1
#define BYTE_ORDER BIG_ENDIAN
@


1.13
log
@terms 3 & 4 cleanup based on "terms" file
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.12 1999/05/10 16:02:09 espie Exp $	*/
d31 2
@


1.12
log
@Use symbolic define for BYTE_ORDER.

(don't forget that cpp is `lazy':
#define A B
#define B value
#if A == value

works, since A isn't extended before it's needed, by which time B is known)
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.11 1997/11/10 10:36:05 niklas Exp $	*/
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Niklas Hallqvist.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.12.4.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.12 1999/05/10 16:02:09 espie Exp $	*/
d14 5
@


1.11
log
@Be careful about local varnames in macros.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.10 1997/11/10 05:52:57 niklas Exp $	*/
d58 1
a58 1
#define BYTE_ORDER 4321
@


1.10
log
@Only use data registers as arguments to rorw
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.9 1997/11/09 23:05:09 niklas Exp $	*/
d37 6
a42 4
#define	__swap32md(x) ({ \
    register u_int32_t __x = (x); \
    __asm ("rorw #8, %0; swap %0; rorw #8, %0" : "=d" (__x) : "0" (__x)); \
    __x; \
d45 6
a50 4
#define	__swap16md(x) ({ \
    register u_int16_t __x = (x); \
    __asm ("rorw #8, %0" : "=d" (__x) : "0" (__x)); \
    __x; \
@


1.9
log
@New endian.h design.  All architectures now use a common file for the bulk
part.  Some ports can optimize the swap operations.  This also means the
general API is extended with swap16, swap32, htobe16, htobe32, betoh16,
betoh32, htole16, htole32, letoh16 and letoh32.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.7 1997/08/08 18:27:17 niklas Exp $	*/
d39 1
a39 1
    __asm ("rorw #8, %0; swap %0; rorw #8, %0" : "=r" (__x) : "0" (__x)); \
d45 1
a45 1
    __asm ("rorw #8, %0" : "=r" (__x) : "0" (__x)); \
@


1.8
log
@Include usage notes in the rest of the endian.h files for consistancy.
@
text
@d1 1
a1 2
/*	$OpenBSD: endian.h,v 1.7 1997/06/25 12:32:50 downsj Exp $	*/
/*	$NetBSD: endian.h,v 1.10 1996/10/13 02:59:55 christos Exp $	*/
d3 2
a4 3
/*
 * Copyright (c) 1987, 1991 Regents of the University of California.
 * All rights reserved.
d16 3
a18 5
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d20 10
a29 13
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)endian.h	7.7 (Berkeley) 4/3/91
a34 44
/*
 * Define the order of 32-bit words in 64-bit words.
 */
#define _QUAD_HIGHWORD	0
#define _QUAD_LOWWORD	1

#ifndef _POSIX_SOURCE
/*
 * Definitions for byte order, according to byte significance from low
 * address to high.
 */
#define	LITTLE_ENDIAN	1234	/* LSB first: i386, vax */
#define	BIG_ENDIAN	4321	/* MSB first: 68000, ibm, net */
#define	PDP_ENDIAN	3412	/* LSB first in word, MSW first in int32_t */

#define	BYTE_ORDER	BIG_ENDIAN

#include <sys/cdefs.h>

typedef u_int32_t in_addr_t;
typedef u_int16_t in_port_t;

__BEGIN_DECLS
#if 0
/*
 * prototypes supplied for documentation purposes solely
 */
u_int32_t	htobe32 __P((u_int32_t));
u_int16_t	htobe16 __P((u_int16_t));
u_int32_t	betoh32 __P((u_int32_t));
u_int16_t	betoh16 __P((u_int16_t));

u_int32_t	htole32 __P((u_int32_t));
u_int16_t	htole16 __P((u_int16_t));
u_int32_t	letoh32 __P((u_int32_t));
u_int16_t	letoh16 __P((u_int16_t));

u_int32_t	htonl __P((u_int32_t));
u_int16_t	htons __P((u_int16_t));
u_int32_t	ntohl __P((u_int32_t));
u_int16_t	ntohs __P((u_int16_t));
#endif
__END_DECLS

d37 11
a47 30
#define	__byte_swap_int32_variable(x) \
({ register u_int32_t __x = (x); \
   __asm ("rorw #8, %0; swap %0; rorw #8, %0" \
	: "=r" (__x) \
	: "0" (__x)); \
   __x; })

#define	__byte_swap_int16_variable(x) \
({ register u_int16_t __x = (x); \
   __asm ("rorw #8, %0" \
	: "=r" (__x) \
	: "0" (__x)); \
   __x; })

#ifdef __OPTIMIZE__

#define	__byte_swap_int32_constant(x) \
	((((x) & 0xff000000) >> 24) | \
	 (((x) & 0x00ff0000) >>  8) | \
	 (((x) & 0x0000ff00) <<  8) | \
	 (((x) & 0x000000ff) << 24))
#define	__byte_swap_int16_constant(x) \
	((((x) & 0xff00) >> 8) | \
	 (((x) & 0x00ff) << 8))
#define	__byte_swap_int32(x) \
	(__builtin_constant_p((x)) ? \
	 __byte_swap_int32_constant(x) : __byte_swap_int32_variable(x))
#define	__byte_swap_int16(x) \
	(__builtin_constant_p((x)) ? \
	 __byte_swap_int16_constant(x) : __byte_swap_int16_variable(x))
d49 2
a50 1
#else /* __OPTIMIZE__ */
a51 4
#define	__byte_swap_int32(x)	__byte_swap_int32_variable(x)
#define	__byte_swap_int16(x)	__byte_swap_int16_variable(x)

#endif /* __OPTIMIZE__ */
d54 2
a55 34
/*
 * Macros for big/little endian to host and vice versa.
 */
#define	betoh32(x)	(x)
#define	betoh16(x)	(x)
#define	htobe32(x)	(x)
#define	htobe16(x)	(x)

#define	letoh32(x)	__byte_swap_int32(x)
#define	letoh16(x)	__byte_swap_int16(x)
#define	htole32(x)	__byte_swap_int32(x)
#define	htole16(x)	__byte_swap_int16(x)

/*
 * Macros for network/external number representation conversion.
 *
 * The way this works is that HTONS(x) modifies x and *can't* be used as
 * and rvalue i.e.  foo=HTONS(bar) is wrong.  Likewise x=htons(x) should
 * never be used where HTONS(x) will serve i.e. foo=htons(foo) is wrong.
 * Failing to observe these rule will result in code that appears to work
 * and probably does work, but generates gcc warnings on architectures
 * where the macros are used to optimize away an unneeded conversion.
 */
#define	ntohl(x)	betoh32(x)
#define	ntohs(x)	betoh16(x)
#define	htonl(x)	htobe32(x)
#define	htons(x)	htobe16(x)

#define	NTOHL(x)	(void)(x)
#define	NTOHS(x)	(void)(x)
#define	HTONL(x)	(void)(x)
#define	HTONS(x)	(void)(x)

#endif /* _POSIX_SOURCE */
@


1.7
log
@Big endian HTON?() macros should be (void)(x).
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.6 1997/04/04 03:05:31 millert Exp $	*/
d142 7
@


1.6
log
@Define in_addr_t and in_port_t everywhere but use u_intXX_t for
htonl and friends.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.5 1997/04/02 20:40:47 niklas Exp $	*/
d148 4
a151 4
#define	NTOHL(x)	((x) = ntohl((u_int32_t)x))
#define	NTOHS(x)	((x) = ntohs((u_int16_t)x))
#define	HTONL(x)	((x) = htonl((u_int32_t)x))
#define	HTONS(x)	((x) = htons((u_int16_t)x))
@


1.5
log
@Restructured, as well as added a set of host-to-little/big-endian-16/32-bit
utility macros (and their opposites), named like htole16 etc.
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.4 1997/01/13 11:51:10 niklas Exp $	*/
d60 3
@


1.4
log
@Sync to 970110 NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: endian.h,v 1.3 1996/11/25 13:11:26 niklas Exp $	*/
d62 14
d80 1
d83 54
d140 9
a148 18
#if BYTE_ORDER == BIG_ENDIAN && !defined(lint)
#define	ntohl(x)	(x)
#define	ntohs(x)	(x)
#define	htonl(x)	(x)
#define	htons(x)	(x)

#define	NTOHL(x)	(void) (x)
#define	NTOHS(x)	(void) (x)
#define	HTONL(x)	(void) (x)
#define	HTONS(x)	(void) (x)

#else

#define	NTOHL(x)	(x) = ntohl((u_int32_t)x)
#define	NTOHS(x)	(x) = ntohs((u_int16_t)x)
#define	HTONL(x)	(x) = htonl((u_int32_t)x)
#define	HTONS(x)	(x) = htons((u_int16_t)x)
#endif
@


1.3
log
@htons et al. works on explicit 16- and 32-bit quantities and not the
machine dependent "short" and "long" integer.  Correct and enhance manpage.
Change all short and longs to u_int16_t and u_int32_t, respectively.
OpenBSD RCSIds
@
text
@d1 2
a2 2
/*	$OpenBSD: endian.h,v 1.2 1996/04/21 22:17:40 deraadt Exp $	*/
/*	$NetBSD: endian.h,v 1.7 1996/03/29 01:40:31 briggs Exp $	*/
@


1.2
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 1
a55 1
#define	PDP_ENDIAN	3412	/* LSB first in word, MSW first in long */
d62 4
a65 4
unsigned long	htonl __P((unsigned long));
unsigned short	htons __P((unsigned short));
unsigned long	ntohl __P((unsigned long));
unsigned short	ntohs __P((unsigned short));
d84 4
a87 4
#define	NTOHL(x)	(x) = ntohl((u_long)x)
#define	NTOHS(x)	(x) = ntohs((u_short)x)
#define	HTONL(x)	(x) = htonl((u_long)x)
#define	HTONS(x)	(x) = htons((u_short)x)
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: endian.h,v 1.6 1994/10/26 07:50:45 cgd Exp $	*/
d77 4
a80 4
#define	NTOHL(x)	(x)
#define	NTOHS(x)	(x)
#define	HTONL(x)	(x)
#define	HTONS(x)	(x)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
