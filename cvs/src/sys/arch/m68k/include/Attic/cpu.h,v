head	1.30;
access;
symbols
	OPENBSD_5_5:1.29.0.6
	OPENBSD_5_5_BASE:1.29
	OPENBSD_5_4:1.29.0.2
	OPENBSD_5_4_BASE:1.29
	OPENBSD_5_3:1.28.0.2
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.25.0.4
	OPENBSD_5_2_BASE:1.25
	OPENBSD_5_1_BASE:1.25
	OPENBSD_5_1:1.25.0.2
	OPENBSD_5_0:1.23.0.4
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.2
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.22.0.8
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.4
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.22.0.6
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.2
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.18.0.4
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.6
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.4.0.18
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.12
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.30
date	2014.03.18.22.36.33;	author miod;	state dead;
branches;
next	1.29;

1.29
date	2013.03.12.09.37.16;	author mpi;	state Exp;
branches;
next	1.28;

1.28
date	2013.02.12.08.06.22;	author mpi;	state Exp;
branches;
next	1.27;

1.27
date	2013.02.11.17.05.25;	author mpi;	state Exp;
branches;
next	1.26;

1.26
date	2012.12.02.07.03.31;	author guenther;	state Exp;
branches;
next	1.25;

1.25
date	2011.11.16.20.50.18;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2011.11.01.21.20.55;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2010.09.28.20.27.55;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2008.10.15.23.23.48;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2008.10.10.08.36.28;	author art;	state Exp;
branches;
next	1.20;

1.20
date	2008.10.10.08.05.45;	author art;	state Exp;
branches;
next	1.19;

1.19
date	2008.10.09.08.43.43;	author art;	state Exp;
branches;
next	1.18;

1.18
date	2007.10.10.15.53.52;	author art;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.22.10.31.08;	author martin;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.15.13.46.22;	author martin;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.28.16.38.47;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2006.11.29.13.22.07;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.11.20.48.13;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.01.11.54.23;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2003.09.26.21.43.30;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.23.27.48;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.09.22.27.09;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.34;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.25.17.15.19;	author miod;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.08.25.11.37.26;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.20.20.24.07;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	97.10.07.13.53.25;	author niklas;	state Exp;
branches
	1.4.12.1;
next	1.3;

1.3
date	97.04.20.06.59.58;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.02.10.11.11.48;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.10.14.00.59.24;	author briggs;	state Exp;
branches;
next	;

1.4.12.1
date	2001.10.31.03.01.14;	author nate;	state Exp;
branches;
next	1.4.12.2;

1.4.12.2
date	2001.12.05.00.39.11;	author niklas;	state Exp;
branches;
next	1.4.12.3;

1.4.12.3
date	2002.03.28.10.34.04;	author niklas;	state Exp;
branches;
next	1.4.12.4;

1.4.12.4
date	2003.03.27.23.28.43;	author niklas;	state Exp;
branches;
next	1.4.12.5;

1.4.12.5
date	2003.06.07.11.11.38;	author ho;	state Exp;
branches;
next	1.4.12.6;

1.4.12.6
date	2004.02.19.10.49.02;	author niklas;	state Exp;
branches;
next	;

1.7.2.1
date	2002.06.11.03.36.06;	author art;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2003.05.19.21.49.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: cpu.h,v 1.29 2013/03/12 09:37:16 mpi Exp $	*/
/*	$NetBSD: cpu.h,v 1.3 1997/02/02 06:56:57 thorpej Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: cpu.h 1.16 91/03/25$
 *
 *	@@(#)cpu.h	8.4 (Berkeley) 1/5/94
 */

#ifndef _M68K_CPU_H_
#define	_M68K_CPU_H_

/*
 * Exported definitions common to Motorola m68k-based ports.
 */

#ifdef _KERNEL
#ifndef _LOCORE
#include <sys/queue.h>
#include <sys/sched.h>

struct cpu_info {
	struct proc *ci_curproc;

	struct schedstate_percpu ci_schedstate;
	u_int32_t	ci_randseed;
#ifdef DIAGNOSTIC
	int	ci_mutex_level;
#endif
#ifdef GPROF
	struct gmonparam *ci_gmon;
#endif
};

extern struct cpu_info cpu_info_store;

#define	curcpu()	(&cpu_info_store)

#define CPU_IS_PRIMARY(ci)	1
#define	CPU_INFO_ITERATOR	int
#define	CPU_INFO_FOREACH(cii, ci) \
	for (cii = 0, ci = curcpu(); ci != NULL; ci = NULL)
#define CPU_INFO_UNIT(ci)	0
#define MAXCPUS	1
#define cpu_unidle(ci)

#define cpu_number()	0

/*
 * All m68k ports must provide these globals.
 */
extern	int cputype;		/* CPU on this host */
extern	int ectype;		/* external cache on this host */
extern	int fputype;		/* FPU on this host */
extern	int mmutype;		/* MMU on this host */

#endif /* !_LOCORE */
#endif /* _KERNEL */

/* values for cputype */
#define	CPU_68020	0	/* 68020 */
#define	CPU_68030	1	/* 68030 */
#define	CPU_68040	2	/* 68040 */
#define	CPU_68060	3	/* 68060 */

/* values for ectype */
#define	EC_PHYS		-1	/* external physical address cache */
#define	EC_NONE		0	/* no external cache */
#define	EC_VIRT		1	/* external virtual address cache */

/* values for fputype */
#define	FPU_NONE	0	/* no FPU */
#define	FPU_68881	1	/* 68881 FPU */
#define	FPU_68882	2	/* 68882 FPU */
#define	FPU_68040	3	/* 68040 on-chip FPU */
#define	FPU_68060	4	/* 68060 on-chip FPU */
#define	FPU_UNKNOWN	5	/* placeholder; unknown FPU */

/* values for mmutype (assigned for quick testing) */
#define	MMU_68060	-3	/* 68060 on-chip MMU */
#define	MMU_68040	-2	/* 68040 on-chip MMU */
#define	MMU_68030	-1	/* 68030 on-chip subset of 68851 */
#define	MMU_68851	1	/* Motorola 68851 */

/*
 * 68851 and 68030 MMU
 */
#define	PMMU_LVLMASK	0x0007
#define	PMMU_INV	0x0400
#define	PMMU_WP		0x0800
#define	PMMU_ALV	0x1000
#define	PMMU_SO		0x2000
#define	PMMU_LV		0x4000
#define	PMMU_BE		0x8000
#define	PMMU_FAULT	(PMMU_WP|PMMU_INV)

/*
 * 68040 MMU
 */
#define	MMU40_RES	0x001
#define	MMU40_TTR	0x002
#define	MMU40_WP	0x004
#define	MMU40_MOD	0x010
#define	MMU40_CMMASK	0x060
#define	MMU40_SUP	0x080
#define	MMU40_U0	0x100
#define	MMU40_U1	0x200
#define	MMU40_GLB	0x400
#define	MMU40_BE	0x800

/* 680X0 function codes */
#define	FC_USERD	1	/* user data space */
#define	FC_USERP	2	/* user program space */
#define	FC_PURGE	3	/* HPMMU: clear TLB entries */
#define	FC_SUPERD	5	/* supervisor data space */
#define	FC_SUPERP	6	/* supervisor program space */
#define	FC_CPU		7	/* CPU space */

/* fields in the 68020 cache control register */
#define	IC_ENABLE	0x0001	/* enable instruction cache */
#define	IC_FREEZE	0x0002	/* freeze instruction cache */
#define	IC_CE		0x0004	/* clear instruction cache entry */
#define	IC_CLR		0x0008	/* clear entire instruction cache */

/* additional fields in the 68030 cache control register */
#define	IC_BE		0x0010	/* instruction burst enable */
#define	DC_ENABLE	0x0100	/* data cache enable */
#define	DC_FREEZE	0x0200	/* data cache freeze */
#define	DC_CE		0x0400	/* clear data cache entry */
#define	DC_CLR		0x0800	/* clear entire data cache */
#define	DC_BE		0x1000	/* data burst enable */
#define	DC_WA		0x2000	/* write allocate */

/* fields in the 68040 cache control register */
#define	IC40_ENABLE	0x00008000	/* instruction cache enable bit */
#define	DC40_ENABLE	0x80000000	/* data cache enable bit */

/* additional fields in the 68060 cache control register */
#define	DC60_NAD	0x40000000	/* no allocate mode, data cache */
#define	DC60_ESB	0x20000000	/* enable store buffer */
#define	DC60_DPI	0x10000000	/* disable CPUSH invalidation */
#define	DC60_FOC	0x08000000	/* four kB data cache mode (else 8) */

#define	IC60_EBC	0x00800000	/* enable branch cache */
#define IC60_CABC	0x00400000	/* clear all branch cache entries */
#define	IC60_CUBC	0x00200000	/* clear user branch cache entries */

#define	IC60_NAI	0x00004000	/* no allocate mode, instr. cache */
#define	IC60_FIC	0x00002000	/* four kB instr. cache (else 8) */

#define	CACHE_ON	(DC_WA|DC_BE|DC_CLR|DC_ENABLE|IC_BE|IC_CLR|IC_ENABLE)
#define	CACHE_OFF	(DC_CLR|IC_CLR)
#define	CACHE_CLR	(CACHE_ON)
#define	IC_CLEAR	(DC_WA|DC_BE|DC_ENABLE|IC_BE|IC_CLR|IC_ENABLE)
#define	DC_CLEAR	(DC_WA|DC_BE|DC_CLR|DC_ENABLE|IC_BE|IC_ENABLE)

#define	CACHE40_ON	(IC40_ENABLE|DC40_ENABLE)
#define	CACHE40_OFF	(0x00000000)

#define	CACHE60_ON	(CACHE40_ON|IC60_CABC|IC60_EBC|DC60_ESB)
#define	CACHE60_OFF	(CACHE40_OFF|IC60_CABC)

/* bits in the 68060 Processor Control Register */
#define	PCR_IDSHIFT	16
#define	PCR_IDMASK	0xffff
#define	PCR_68060		0x430
#define	PCR_68060LC		0x431
#define	PCR_REVSHIFT	8
#define	PCR_REVMASK	0xff
#define	PCR_DEBUG	0x80
#define	PCR_FPUDIS	0x02
#define	PCR_SUPERSCALAR	0x01

#ifdef _KERNEL
struct frame;
struct fpframe;
struct pcb;
struct proc;
struct trapframe;

void	copypage(void *fromaddr, void *toaddr);
void	zeropage(void *addr);

/* locore.s */
void	TBIS(vaddr_t);
void	TBIAS(void);
void	TBIAU(void);
void	ICIA(void);
void	DCIA(void);
void	DCIS(void);
void	DCIU(void);
#if defined(M68040) || defined(M68060)
void	ICPA(void);
void	DCFA(void);
void	ICPL(paddr_t);
void	ICPP(paddr_t);
void	DCPL(paddr_t);
void	DCPP(paddr_t);
void	DCFL(paddr_t);
void	DCFP(paddr_t);
#endif

u_long	getdfc(void);
u_long	getsfc(void);
void	loadustp(int);
void	m68881_restore(struct fpframe *);
void	m68881_save(struct fpframe *);
void	proc_trampoline(void);
void	savectx(struct pcb *);
int	suline(caddr_t, caddr_t);
void	switch_exit(struct proc *);

/* regdump.c */
void regdump(struct trapframe *, int);

/* sys_machdep.c */
int	cachectl(struct proc *, int, vaddr_t, int);
#define	CC_PURGE	0x00000001
#define	CC_FLUSH	0x00000002
#define	CC_IPURGE	0x00000004
#define	CC_EXTPURGE	0x80000000

/*
 * This is used during profiling to integrate system time.
 */
#define	PROC_PC(p)	(((struct trapframe *)((p)->p_md.md_regs))->tf_pc)
#define	PROC_STACK(p)	(((struct trapframe *)((p)->p_md.md_regs))->tf_regs[15])

#define	cpu_idle_enter()	do { /* nothing */ } while (0)
#define	cpu_idle_leave()	do { /* nothing */ } while (0)

#endif /* _KERNEL */

#endif /* _M68K_CPU_H_ */
@


1.29
log
@Fix kernel profiling on MP systems by using per-CPU buffers and teach
kgmon(8) to deal with them, this time without public header changes.

Previously various CPUs were iterating over the same global buffer at
the same time to modify it and never ended.

This diff includes some ideas submited by Thor Simon to NetBSD via miod@@.

ok deraadt@@, mikeb@@, haesbaert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.28 2013/02/12 08:06:22 mpi Exp $	*/
@


1.28
log
@Back out per-CPU kernel profiling, it shouldn't modify a public header
at this moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.27 2013/02/11 17:05:25 mpi Exp $	*/
d61 3
@


1.27
log
@Fix kernel profiling on MP systems by using per-CPU buffer. Previously
various CPUs were iterating over the same global buffer at the same
time to modify it and never ended.

This diff includes some ideas submited by Thor Simon to NetBSD via miod@@.

ok mikeb@@, haesbaert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.26 2012/12/02 07:03:31 guenther Exp $	*/
a60 3
#endif
#ifdef GPROF
	struct gmonparam *ci_gmon;
@


1.26
log
@Determine whether we're currently on the alternative signal stack
dynamically, by comparing the stack pointer against the altstack
base and size, so that you get the correct answer if you longjmp
out of the signal handler, as tested by regress/sys/kern/stackjmp/.
Also, fix alt stack handling on vax, where it was completely broken.

Testing and corrections by miod@@, krw@@, tobiasu@@, pirofti@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.25 2011/11/16 20:50:18 deraadt Exp $	*/
d61 3
@


1.25
log
@Make userret() MI.  On architectures which jammed stuff into it in the
past, pull that code out seperately.
ok guenther miod
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.24 2011/11/01 21:20:55 miod Exp $	*/
d256 1
@


1.24
log
@Drop support for the HP MMU. It was only found on two hp300 systems (models
320 and 350), which have been unsupported since a bunch of release already,
because this annoying MMU does not have TT registers (or if it does, it is
not documented) and thus went in the way of PMAP_DIRECT for hp300.
In other words: remove a bunch of code which was either #ifdef'ed out or
had no chance to run in real life.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.23 2010/09/28 20:27:55 miod Exp $	*/
a240 3

/* m68k_machdep.c */
void userret(struct proc *);
@


1.23
log
@Implement a per-cpu held mutex counter if DIAGNOSTIC on all non-x86 platforms,
to complete matthew@@'s commit of a few days ago, and drop __HAVE_CPU_MUTEX_LEVEL
define. With help from, and ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.22 2008/10/15 23:23:48 deraadt Exp $	*/
a46 18
 *
 * Note that are some port-specific definitions here, such as
 * HP and Sun MMU types.  These facilitate adding very small
 * amounts of port-specific code to what would otherwise be
 * identical.  The is especially true in the case of the HP
 * and other m68k pmaps.
 *
 * Individual ports are expected to define the following CPP symbols
 * in <machine/cpu.h> to enable conditional code:
 *
 *	M68K_MMU_MOTOROLA	Machine may have a Motorola MMU (incl.
 *				68851, 68030, 68040, 68060)
 *
 *	M68K_MMU_HP		Machine may have an HP MMU.
 *
 * Note also that while m68k-generic code conditionalizes on the
 * M68K_MMU_HP CPP symbol, none of the HP MMU definitions are in this
 * file (since none are used in otherwise sharable code).
a111 1
#define	MMU_HP		0	/* HP proprietary */
a112 1
#define	MMU_SUN		2	/* Sun MMU */
@


1.22
log
@make random(9) return per-cpu values (by saving the seed in the cpuinfo),
which are uniform for the profclock on each cpu in a SMP system (but using
a different seed for each cpu).  on all cpus, avoid seeding with a value out
of the [0, 2^31-1] range (since that is not stable)
ok kettenis drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.21 2008/10/10 08:36:28 art Exp $	*/
d77 3
@


1.21
log
@Add empty cpu_unidle() macros for architectures that currently don't do
anything special to prod a cpu to leave the idle loop in signotify.
powerpc, i386, amd64 and sparc64 will follow soon so that everyone has
the same interface to wake an idling cpu.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.20 2008/10/10 08:05:45 art Exp $	*/
d76 1
@


1.20
log
@Define MAXCPUS on all architectures.
For now, sparc64 is arbitrarily set to 256 (only architecture that didn't have
a practical limit in the code on the number of cpus).
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.19 2008/10/09 08:43:43 art Exp $	*/
d88 1
@


1.19
log
@Implement CPU_INFO_UNIT for everyone, not just MP kernels.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.18 2007/10/10 15:53:52 art Exp $	*/
d87 1
@


1.18
log
@Make context switching much more MI:
 - Move the functionality of choosing a process from cpu_switch into
   a much simpler function: cpu_switchto. Instead of having the locore
   code walk the run queues, let the MI code choose the process we
   want to run and only implement the context switching itself in MD
   code.
 - Let MD context switching run without worrying about spls or locks.
 - Instead of having the idle loop implemented with special contexts
   in MD code, implement one idle proc for each cpu. make the idle
   loop MI with MD hooks.
 - Change the proc lists from the old style vax queues to TAILQs.
 - Change the sleep queue from vax queues to TAILQs. This makes
   wakeup() go from O(n^2) to O(n)

there will be some MD fallout, but it will be fixed shortly.
There's also a few cleanups to be done after this.

deraadt@@, kettenis@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.17 2007/05/22 10:31:08 martin Exp $	*/
d86 1
@


1.17
log
@protect more variables from existing outside of locore, should fix
cpuinfo breakage (but my make build is still running)

ok gwk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.16 2007/05/15 13:46:22 martin Exp $	*/
d69 1
d272 3
@


1.16
log
@switch m68k to __HAVE_CPUINFO

help miod@@, art@@
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.15 2007/01/28 16:38:47 miod Exp $	*/
a87 2
#endif /* !_LOCORE */

d95 3
a97 1
#endif
@


1.15
log
@optimize m68k writeback():
- it can really only be invoked from trap(), not from other userret() callers,
  so it is safe to hardcode its docachepush parameter to 1.
- use pmap_kenter_pa()/pmap_kremove() for the temporary mapping instead of
  pmap_enter()/pmap_remove().

optimize m68k userret():
- define PROC_PC for m68k systems.
- only check want_resched when processing T_ASTFLT traps.
- provide two version of userret(), one which will also invoke writeback()
  on 68040 if required, which is only invoked from trap(), and regular
  userret(). This speeds up system call returns.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.14 2006/11/29 13:22:07 miod Exp $	*/
d68 22
@


1.14
log
@Remove MAPPEDCOPY. It does not work and I am not convinced it is worth
fixing.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.13 2006/06/11 20:48:13 miod Exp $	*/
d233 1
a233 1
void userret(struct proc *, struct frame *, u_quad_t, u_int, int);
d244 5
@


1.13
log
@Move common prototypes to <m68k/{cpu,param}.h> instead of incomplete
declarations in <machine/{cpu,param}.h> and elsewhere.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.12 2005/08/01 11:54:23 miod Exp $	*/
a201 5
#ifdef MAPPEDCOPY
int	mappedcopyin(void *fromp, void *top, size_t count);
int	mappedcopyout(void *fromp, void *top, size_t count);
extern	u_int mappedcopysize;
#endif /* MAPPEDCOPY */
@


1.12
log
@Factorize cachectl() accross m68k platforms, and make the CC_ constants
public.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.11 2003/09/26 21:43:30 miod Exp $	*/
d57 1
a57 1
 *	M68K_MMU_MOTOROLA	Machine has a Motorola MMU (incl.
d60 1
a60 1
 *	M68K_MMU_HP		Machine has an HP MMU.
a66 5
/*
 * XXX Much more could be pulled out of port-specific header files
 * XXX and placed here.
 */

d182 11
d194 6
d209 27
a235 2
u_long getdfc(void);
u_long getsfc(void);
a237 2
struct proc;
struct frame;
a240 1
struct trapframe;
@


1.11
log
@Typos: defintion -> definition, proccess -> process

There are more occurences hiding in binutils, lynx and afs but I am too
lazy to report them upstream at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.10 2003/06/02 23:27:48 millert Exp $	*/
d209 6
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.9 2003/01/09 22:27:09 miod Exp $	*/
d63 1
a63 1
 * M68K_MMU_HP CPP symbol, none of the HP MMU defintions are in this
@


1.9
log
@Remove fetch(9) and store(9) functions from the kernel, and replace the few
remaining instances of them with appropriate copy(9) usage.

ok art@@, tested on all arches unless my memory is non-ECC
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.8 2002/03/14 01:26:34 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.7 2001/11/25 17:15:19 miod Exp $	*/
a202 4

/* copy.s */
int	fusword(caddr_t);
int	susword(caddr_t, u_short);
@


1.7
log
@Harmonize userret() prototypes across m68k arches.
XXX The userret() code is not factorized out yet, as this will require
XXX insane amiga cleaning work.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.6 2001/08/25 11:37:26 espie Exp $	*/
d192 2
a193 2
void	copypage __P((void *fromaddr, void *toaddr));
void	zeropage __P((void *addr));
d195 2
a196 2
int	mappedcopyin __P((void *fromp, void *top, size_t count));
int	mappedcopyout __P((void *fromp, void *top, size_t count));
d201 2
a202 2
u_long getdfc __P((void));
u_long getsfc __P((void));
d205 2
a206 2
int	fusword __P((caddr_t));
int	susword __P((caddr_t, u_short));
d211 1
a211 1
void userret __P((struct proc *, struct frame *, u_quad_t, u_int, int));
d215 1
a215 1
void regdump __P((struct trapframe *, int));
@


1.7.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.7 2001/11/25 17:15:19 miod Exp $	*/
d192 2
a193 2
void	copypage(void *fromaddr, void *toaddr);
void	zeropage(void *addr);
d195 2
a196 2
int	mappedcopyin(void *fromp, void *top, size_t count);
int	mappedcopyout(void *fromp, void *top, size_t count);
d201 2
a202 2
u_long getdfc(void);
u_long getsfc(void);
d205 2
a206 2
int	fusword(caddr_t);
int	susword(caddr_t, u_short);
d211 1
a211 1
void userret(struct proc *, struct frame *, u_quad_t, u_int, int);
d215 1
a215 1
void regdump(struct trapframe *, int);
@


1.7.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d203 4
@


1.6
log
@One regdump to dump them all...

(moid@@ wants that commit, because it interferes with stuff he's cleaning,
and he's prepared to clean up stuff I may have forgotten, even though this
was tested)
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.5 2001/08/20 20:24:07 miod Exp $	*/
d207 5
@


1.5
log
@cvs does not like me.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.4 1997/10/07 13:53:25 niklas Exp $	*/
d207 5
@


1.4
log
@Missing fusword prototype
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.3 1997/04/20 06:59:58 downsj Exp $	*/
d199 4
@


1.4.12.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.4 1997/10/07 13:53:25 niklas Exp $	*/
a199 4
/* locore.s */
u_long getdfc __P((void));
u_long getsfc __P((void));

a202 5

/* regdump.c */
struct trapframe;
void regdump __P((struct trapframe *, int));

@


1.4.12.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.4.12.1 2001/10/31 03:01:14 nate Exp $	*/
a206 5

/* m68k_machdep.c */
struct proc;
struct frame;
void userret __P((struct proc *, struct frame *, u_quad_t, u_int, int));
@


1.4.12.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d192 2
a193 2
void	copypage(void *fromaddr, void *toaddr);
void	zeropage(void *addr);
d195 2
a196 2
int	mappedcopyin(void *fromp, void *top, size_t count);
int	mappedcopyout(void *fromp, void *top, size_t count);
d201 2
a202 2
u_long getdfc(void);
u_long getsfc(void);
d205 2
a206 2
int	fusword(caddr_t);
int	susword(caddr_t, u_short);
d211 1
a211 1
void userret(struct proc *, struct frame *, u_quad_t, u_int, int);
d215 1
a215 1
void regdump(struct trapframe *, int);
@


1.4.12.4
log
@Sync the SMP branch with 3.3
@
text
@d204 4
@


1.4.12.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.4.12.4 2003/03/27 23:28:43 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4.12.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 1
a63 1
 * M68K_MMU_HP CPP symbol, none of the HP MMU definitions are in this
@


1.3
log
@Add a prototype for susword().
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.2 1997/02/10 11:11:48 downsj Exp $	*/
d201 1
@


1.2
log
@Add the generic m68k part of the copypage/zeropage/mappedcopy changes
from NetBSD.

m68k ports may/will need changing in order to cope with this.
@
text
@d1 1
a1 1
/*	$OpenBSD: cpu.h,v 1.1 1996/10/14 00:59:24 briggs Exp $	*/
d199 4
@


1.1
log
@A generic m68k cpu.h from NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: cpu.h,v 1.2 1996/09/12 02:52:34 thorpej Exp $	*/
d190 10
@
