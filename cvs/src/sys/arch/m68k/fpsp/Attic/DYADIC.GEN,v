head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.78
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.74
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.72
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.70
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.68
	OPENBSD_5_0:1.2.0.66
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.64
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.62
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.58
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.60
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.56
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.54
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.52
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.50
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.48
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.46
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.44
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.42
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.40
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.38
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.36
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.34
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.32
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.30
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.28
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.3
date	2014.03.18.22.36.33;	author miod;	state dead;
branches;
next	1.2;

1.2
date	96.05.29.21.05.19;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.50.54;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.50.54;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@*	$OpenBSD: DYADIC.GEN,v 1.2 1996/05/29 21:05:19 niklas Exp $
*	$NetBSD: DYADIC.GEN,v 1.2 1994/10/26 07:48:29 cgd Exp $

*	MOTOROLA MICROPROCESSOR & MEMORY TECHNOLOGY GROUP
*	M68000 Hi-Performance Microprocessor Division
*	M68040 Software Package 
*
*	M68040 Software Package Copyright (c) 1993, 1994 Motorola Inc.
*	All rights reserved.
*
*	THE SOFTWARE is provided on an "AS IS" basis and without warranty.
*	To the maximum extent permitted by applicable law,
*	MOTOROLA DISCLAIMS ALL WARRANTIES WHETHER EXPRESS OR IMPLIED,
*	INCLUDING IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A
*	PARTICULAR PURPOSE and any warranty against infringement with
*	regard to the SOFTWARE (INCLUDING ANY MODIFIED VERSIONS THEREOF)
*	and any accompanying written materials. 
*
*	To the maximum extent permitted by applicable law,
*	IN NO EVENT SHALL MOTOROLA BE LIABLE FOR ANY DAMAGES WHATSOEVER
*	(INCLUDING WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS
*	PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR
*	OTHER PECUNIARY LOSS) ARISING OF THE USE OR INABILITY TO USE THE
*	SOFTWARE.  Motorola assumes no responsibility for the maintenance
*	and support of the SOFTWARE.  
*
*	You are hereby granted a copyright license to use, modify, and
*	distribute the SOFTWARE so long as this entire notice is retained
*	without alteration in any modified and/or redistributed versions,
*	and that such modified versions are clearly identified as such.
*	No licenses are granted by implication, estoppel or otherwise
*	under any patents or trademarks of Motorola, Inc.

*
*	DYADIC.GEN 1.2 4/30/91
*
*	DYADIC.GEN --- generic DYADIC template
*
*	This version saves all registers that will be used by the emulation
*	routines and restores all but FP0 on exit.  The FPSR is
*	updated to reflect the result of the operation.  Return value
*	is placed in FP0 for single, double and extended results.
*	
*	The package subroutines expect the incoming FPCR to be zeroed
*	since they need extended precision to work properly.  The
*	'final' FPCR is expected in USER_FPCR(a6) so that the calculated result
*	can be properly sized and rounded.  Also, if the incoming FPCR
*	has enabled any exceptions, the exception will be taken on the
*	final fmovem in this template.
*
*	Customizations:  
*		1. Remove the movem.l at the entry and exit of
*		   each routine if your compiler treats those 
*		   registers as scratch.
*		2. Likewise, don't save FP0/FP1 if they are scratch
*		   registers.
*		3. Delete updating of the fpsr if you only care about
*		   the result.
*		4. Remove the _OPs_ and _OPx_ entry points if your compiler
*		   treats everything as doubles.
*		5. Move the result to d0/d1 if the compiler is that old.
*

	xref	_OPa_
	xref	tag

	xdef	_OPs_
_OPs_:
	link	a6,#-LOCAL_SIZE
	movem.l	d0-d1/a0-a1,USER_DA(a6)
	fmovem.x fp0-fp3,USER_FP0(a6)
	fmovem.l fpsr/fpcr,USER_FPSR(a6) ; user's rounding mode/precision
	fmove.l	#0,fpcr		; force rounding mode/prec to extended,rn
*
*	copy, convert and tag input arguments
*
	fmove.s	8(a6),fp0
	fmove.x	fp0,FPTEMP(a6)
	lea	FPTEMP(a6),a0
	bsr	tag
	move.b	d0,DTAG(a6)

	fmove.s	12(a6),fp0
	fmove.x	fp0,ETEMP(a6)
	lea	ETEMP(a6),a0
	bsr	tag
	move.b	d0,STAG(a6)

	bsr	_OPa_

	fmove.l	fpsr,d0		; update status register
	or.b	FPSR_AEXCEPT(a6),d0	;add previously accrued exceptions
	swap.w	d0
	or.b	FPSR_QBYTE(a6),d0	; pickup sign of quotient byte
	swap.w	d0
	fmove.l	d0,fpsr
*
*	Result is now in FP0
*
	movem.l	USER_DA(a6),d0-d1/a0-a1
	fmovem.x USER_FP1(a6),fp1-fp3	; note: FP0 not restored
	unlk	a6
	rts

	xdef	_OPd_
_OPd_:
	link	a6,#-LOCAL_SIZE
	movem.l	d0-d1/a0-a1,USER_DA(a6)
	fmovem.x fp0-fp3,USER_FP0(a6)
	fmovem.l fpsr/fpcr,USER_FPSR(a6) ; user's rounding mode/precision
	fmove.l	#0,fpcr		; force rounding mode/prec to extended,rn
*
*	copy, convert and tag input arguments
*
	fmove.d	8(a6),fp0
	fmove.x	fp0,FPTEMP(a6)
	lea	FPTEMP(a6),a0
	bsr	tag
	move.b	d0,DTAG(a6)

	fmove.d	16(a6),fp0
	fmove.x	fp0,ETEMP(a6)
	lea	ETEMP(a6),a0
	bsr	tag
	move.b	d0,STAG(a6)

	bsr	_OPa_

	fmove.l	fpsr,d0		; update status register
	or.b	FPSR_AEXCEPT(a6),d0	;add previously accrued exceptions
	swap.w	d0
	or.b	FPSR_QBYTE(a6),d0	; pickup sign of quotient byte
	swap.w	d0
	fmove.l	d0,fpsr
*
*	Result is now in FP0
*
	movem.l	USER_DA(a6),d0-d1/a0-a1
	fmovem.x USER_FP1(a6),fp1-fp3	; note: FP0 not restored
	unlk	a6
	rts

	xdef	_OPx_
_OPx_:
	link	a6,#-LOCAL_SIZE
	movem.l	d0-d1/a0-a1,USER_DA(a6)
	fmovem.x fp0-fp3,USER_FP0(a6)
	fmovem.l fpsr/fpcr,USER_FPSR(a6) ; user's rounding mode/precision
	fmove.l	#0,fpcr		; force rounding mode/prec to extended,rn
*
*	copy, convert and tag input arguments
*
	fmove.x	8(a6),fp0
	fmove.x	fp0,FPTEMP(a6)
	lea	FPTEMP(a6),a0
	bsr	tag
	move.b	d0,DTAG(a6)

	fmove.x	20(a6),fp0
	fmove.x	fp0,ETEMP(a6)
	lea	ETEMP(a6),a0
	bsr	tag
	move.b	d0,STAG(a6)

	bsr	_OPa_

	fmove.l	fpsr,d0		; update status register
	or.b	FPSR_AEXCEPT(a6),d0	;add previously accrued exceptions
	swap.w	d0
	or.b	FPSR_QBYTE(a6),d0	; pickup sign of quotient byte
	swap.w	d0
	fmove.l	d0,fpsr
*
*	Result is now in FP0
*
	movem.l	USER_DA(a6),d0-d1/a0-a1
	fmovem.x USER_FP1(a6),fp1-fp3	; note: FP0 not restored
	unlk	a6
	rts

@


1.2
log
@$OpenBSD$ additions
@
text
@d1 1
a1 1
*	$OpenBSD: DYADIC.GEN,v 1.2 1994/10/26 07:48:29 cgd Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
