head	1.5;
access;
symbols
	OPENBSD_3_8:1.4.0.38
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.36
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.34
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.32
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.30
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.28
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.26
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.24
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.22
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.20
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.18
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.16
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.14
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.12
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.10
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.8
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.6
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.5
date	2006.01.04.22.32.45;	author miod;	state dead;
branches;
next	1.4;

1.4
date	97.07.06.07.46.29;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.08.10.21.41.08;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.05.29.21.05.53;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.51.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.51.01;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Switch to the C version of random() on m68k platforms. It is almost as fast
as the assembly version on 0[234]0, but *fifteen* times faster than it on
68060 systems, since it uses a form of muls.l which has to be emulated.

And since we use random() for statclock variance, this means we were
gratuitously doing an average of 100 emulation traps per second.

ok deraadt@@ millert@@
@
text
@/*	$OpenBSD: random.s,v 1.4 1997/07/06 07:46:29 downsj Exp $	*/
/*	$NetBSD: random.s,v 1.6 1997/04/25 02:22:02 thorpej Exp $	*/

/*
 * Copyright (c) 1990,1993 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that: (1) source code distributions
 * retain the above copyright notice and this paragraph in its entirety, (2)
 * distributions including binary code include the above copyright notice and
 * this paragraph in its entirety in the documentation or other materials
 * provided with the distribution, and (3) all advertising materials mentioning
 * features or use of this software display the following acknowledgement:
 * ``This product includes software developed by the University of California,
 * Lawrence Berkeley Laboratory and its contributors.'' Neither the name of
 * the University nor the names of its contributors may be used to endorse
 * or promote products derived from this software without specific prior
 * written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * Here is a very good random number generator.  This implementation is
 * based on ``Two Fast Implementations of the "Minimal Standard" Random
 * Number Generator'', David G. Carta, Communications of the ACM, Jan 1990,
 * Vol 33 No 1.  Do NOT modify this code unless you have a very thorough
 * understanding of the algorithm.  It's trickier than you think.  If
 * you do change it, make sure that its 10,000'th invocation returns
 * 1043618065.
 *
 * Here is easier-to-decipher pseudocode:
 *
 * p = (16807*seed)<30:0>	# e.g., the low 31 bits of the product
 * q = (16807*seed)<62:31>	# e.g., the high 31 bits starting at bit 32
 * if (p + q < 2^31)
 * 	seed = p + q
 * else
 *	seed = ((p + q) & (2^31 - 1)) + 1
 * return (seed);
 *
 * The result is in (0,2^31), e.g., it's always positive.
 */
#include <machine/asm.h>

	.data
GLOBAL(_randseed)
	.long	1

ENTRY(random)
	movl	#16807, d0
	mulsl	_C_LABEL(_randseed), d1:d0
	lsll	#1, d0
	roxll	#2, d1
	addl	d1, d0
	moveql	#1, d1
	addxl	d1, d0
	lsrl	#1, d0
	movl	d0, _C_LABEL(_randseed)
	rts
@


1.4
log
@Sync with NetBSD changes, 970415 - 970705.

This includes a new asm.h, as well as even more code abstracted from hp300.
These changes are likely to break ports that don't know about them; hp300
runs at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: random.s,v 1.3 1996/08/10 21:41:08 deraadt Exp $	*/
@


1.3
log
@srandom() seeds random() at boottime
@
text
@d1 2
a2 2
/*	$OpenBSD: random.s,v 1.2 1996/05/29 21:05:53 niklas Exp $	*/
/*	$NetBSD: random.s,v 1.5 1995/01/15 22:32:35 mycroft Exp $	*/
d47 1
a47 2
	.globl	__randseed
__randseed:
d49 1
a49 1
	.text
d52 1
a52 1
	mulsl	__randseed, d1:d0
d59 1
a59 1
	movl	d0, __randseed
@


1.2
log
@$OpenBSD$ additions
@
text
@d1 1
a1 1
/*	$OpenBSD: random.s,v 1.5 1995/01/15 22:32:35 mycroft Exp $	*/
d47 2
a48 1
randseed:
d53 1
a53 1
	mulsl	randseed, d1:d0
d60 1
a60 1
	movl	d0, randseed
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
