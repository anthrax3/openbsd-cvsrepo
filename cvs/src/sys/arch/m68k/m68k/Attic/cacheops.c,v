head	1.3;
access;
symbols
	OPENBSD_3_7:1.2.0.18
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.16
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.14
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.12
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.10
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.8
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.6
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.4
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.1.0.18
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.16
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.14
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.12
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.10
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.8
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.6
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.4
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.2
	OPENBSD_2_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2005.08.14.12.51.25;	author miod;	state dead;
branches;
next	1.2;

1.2
date	2001.05.15.01.43.15;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.07.06.07.46.27;	author downsj;	state Exp;
branches
	1.1.12.1;
next	;

1.1.12.1
date	2001.07.04.10.18.16;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove the inline cache and TLB primitives - we don't use them at this point,
they do not cover the HP MMU for hp300, and they do not cover 040+060 kernels
(which share all cache operations) efficiently.
@
text
@/*	$OpenBSD: cacheops.c,v 1.2 2001/05/15 01:43:15 millert Exp $	*/
/*	$NetBSD: cacheops.c,v 1.1 1997/06/02 20:26:57 leo Exp $	*/

/*-
 * Copyright (c) 1997 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Leo Weppelman
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/cdefs.h>
#include <sys/types.h>
#include <m68k/cpu.h>
#include <m68k/cacheops.h>
#include <machine/cpu.h>

#if defined(_MULTI_CPU)

void _TBIA()
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		TBIA_20();
		break;
#endif
#ifdef M68030
	case CPU_68030:
		TBIA_30();
		break;
#endif
#ifdef M68040
	case CPU_68040:
		TBIA_40();
		break;
#endif
#ifdef M68060
	case CPU_68060:
		TBIA_60();
		break;
#endif
	}
}

void _TBIAS()
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		TBIAS_20();
		break;
#endif
#ifdef M68030
	case CPU_68030:
		TBIAS_30();
		break;
#endif
#ifdef M68040
	case CPU_68040:
		TBIAS_40();
		break;
#endif
#ifdef M68060
	case CPU_68060:
		TBIAS_60();
		break;
#endif
	}
}

void _TBIAU()
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		TBIAU_20();
		break;
#endif
#ifdef M68030
	case CPU_68030:
		TBIAU_30();
		break;
#endif
#ifdef M68040
	case CPU_68040:
		TBIAU_40();
		break;
#endif
#ifdef M68060
	case CPU_68060:
		TBIAU_60();
		break;
#endif
	}
}

void _ICIA()
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		ICIA_20();
		break;
#endif
#ifdef M68030
	case CPU_68030:
		ICIA_30();
		break;
#endif
#ifdef M68040
	case CPU_68040:
		ICIA_40();
		break;
#endif
#ifdef M68060
	case CPU_68060:
		ICIA_60();
		break;
#endif
	}
}

void _ICPA()
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		ICPA_20();
		break;
#endif
#ifdef M68030
	case CPU_68030:
		ICPA_30();
		break;
#endif
#ifdef M68040
	case CPU_68040:
		ICPA_40();
		break;
#endif
#ifdef M68060
	case CPU_68060:
		ICPA_60();
		break;
#endif
	}
}

void _DCIA()
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		DCIA_20();
		break;
#endif
#ifdef M68030
	case CPU_68030:
		DCIA_30();
		break;
#endif
#ifdef M68040
	case CPU_68040:
		DCIA_40();
		break;
#endif
#ifdef M68060
	case CPU_68060:
		DCIA_60();
		break;
#endif
	}
}

void _DCIS()
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		DCIS_20();
		break;
#endif
#ifdef M68030
	case CPU_68030:
		DCIS_30();
		break;
#endif
#ifdef M68040
	case CPU_68040:
		DCIS_40();
		break;
#endif
#ifdef M68060
	case CPU_68060:
		DCIS_60();
		break;
#endif
	}
}

void _DCIU()
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		DCIU_20();
		break;
#endif
#ifdef M68030
	case CPU_68030:
		DCIU_30();
		break;
#endif
#ifdef M68040
	case CPU_68040:
		DCIU_40();
		break;
#endif
#ifdef M68060
	case CPU_68060:
		DCIU_60();
		break;
#endif
	}
}

void _PCIA()
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		PCIA_20();
		break;
#endif
#ifdef M68030
	case CPU_68030:
		PCIA_30();
		break;
#endif
#ifdef M68040
	case CPU_68040:
		PCIA_40();
		break;
#endif
#ifdef M68060
	case CPU_68060:
		PCIA_60();
		break;
#endif
	}
}

void _DCFA()
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		DCFA_20();
		break;
#endif
#ifdef M68030
	case CPU_68030:
		DCFA_30();
		break;
#endif
#ifdef M68040
	case CPU_68040:
		DCFA_40();
		break;
#endif
#ifdef M68060
	case CPU_68060:
		DCFA_60();
		break;
#endif
	}
}

void _TBIS(va)
	vaddr_t	va;
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		TBIS_20(va);
		break;
#endif
#ifdef M68030
	case CPU_68030:
		TBIS_30(va);
		break;
#endif
#ifdef M68040
	case CPU_68040:
		TBIS_40(va);
		break;
#endif
#ifdef M68060
	case CPU_68060:
		TBIS_60(va);
		break;
#endif
	}
}

void _DCIAS(pa)
	paddr_t	pa;
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		DCIAS_20(pa);
		break;
#endif
#ifdef M68030
	case CPU_68030:
		DCIAS_30(pa);
		break;
#endif
#ifdef M68040
	case CPU_68040:
		DCIAS_40(pa);
		break;
#endif
#ifdef M68060
	case CPU_68060:
		DCIAS_60(pa);
		break;
#endif
	}
}

void _DCPA()
{
	switch (cputype) {
	default:
#ifdef M68020
	case CPU_68020:
		DCPA_20();
		break;
#endif
#ifdef M68030
	case CPU_68030:
		DCPA_30();
		break;
#endif
	}
}

void _ICPL(pa)
	paddr_t	pa;
{
	switch (cputype) {
	default:
#ifdef M68040
	case CPU_68040:
		ICPL_40(pa);
		break;
#endif
#ifdef M68060
	case CPU_68060:
		ICPL_60(pa);
		break;
#endif
	}
}

void _ICPP(pa)
	paddr_t	pa;
{
	switch (cputype) {
	default:
#ifdef M68040
	case CPU_68040:
		ICPP_40(pa);
		break;
#endif
#ifdef M68060
	case CPU_68060:
		ICPP_60(pa);
		break;
#endif
	}
}

void _DCPL(pa)
	paddr_t	pa;
{
	switch (cputype) {
	default:
#ifdef M68040
	case CPU_68040:
		DCPL_40(pa);
		break;
#endif
#ifdef M68060
	case CPU_68060:
		DCPL_60(pa);
		break;
#endif
	}
}

void _DCPP(pa)
	paddr_t	pa;
{
	switch (cputype) {
	default:
#ifdef M68040
	case CPU_68040:
		DCPP_40(pa);
		break;
#endif
#ifdef M68060
	case CPU_68060:
		DCPP_60(pa);
		break;
#endif
	}
}

void _DCFL(pa)
	paddr_t	pa;
{
	switch (cputype) {
	default:
#ifdef M68040
	case CPU_68040:
		DCFL_40(pa);
		break;
#endif
#ifdef M68060
	case CPU_68060:
		DCFL_60(pa);
		break;
#endif
	}
}

void _DCFP(pa)
	paddr_t	pa;
{
	switch (cputype) {
	default:
#ifdef M68040
	case CPU_68040:
		DCFP_40(pa);
		break;
#endif
#ifdef M68060
	case CPU_68060:
		DCFP_60(pa);
		break;
#endif
	}
}

#endif /* defined(_TBIA) */
@


1.2
log
@Replace vm_offset_t with vaddr_t and paddr_t as appropriate.
NetBSD used as a guide.
@
text
@d1 1
a1 1
/*	$OpenBSD: cacheops.c,v 1.1 1997/07/06 07:46:27 downsj Exp $	*/
@


1.1
log
@Sync with NetBSD changes, 970415 - 970705.

This includes a new asm.h, as well as even more code abstracted from hp300.
These changes are likely to break ports that don't know about them; hp300
runs at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d319 1
a319 1
	vm_offset_t	va;
d346 2
a347 2
void _DCIAS(va)
	vm_offset_t	va;
d353 1
a353 1
		DCIAS_20(va);
d358 1
a358 1
		DCIAS_30(va);
d363 1
a363 1
		DCIAS_40(va);
d368 1
a368 1
		DCIAS_60(va);
d391 2
a392 2
void _ICPL(va)
	vm_offset_t	va;
d398 1
a398 1
		ICPL_40(va);
d403 1
a403 1
		ICPL_60(va);
d409 2
a410 2
void _ICPP(va)
	vm_offset_t	va;
d416 1
a416 1
		ICPP_40(va);
d421 1
a421 1
		ICPP_60(va);
d427 2
a428 2
void _DCPL(va)
	vm_offset_t	va;
d434 1
a434 1
		DCPL_40(va);
d439 1
a439 1
		DCPL_60(va);
d445 2
a446 2
void _DCPP(va)
	vm_offset_t	va;
d452 1
a452 1
		DCPP_40(va);
d457 1
a457 1
		DCPP_60(va);
d463 2
a464 2
void _DCFL(va)
	vm_offset_t	va;
d470 1
a470 1
		DCFL_40(va);
d475 1
a475 1
		DCFL_60(va);
d481 2
a482 2
void _DCFP(va)
	vm_offset_t	va;
d488 1
a488 1
		DCFP_40(va);
d493 1
a493 1
		DCFP_60(va);
@


1.1.12.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: cacheops.c,v 1.1 1997/07/06 07:46:27 downsj Exp $	*/
d319 1
a319 1
	vaddr_t	va;
d346 2
a347 2
void _DCIAS(pa)
	paddr_t	pa;
d353 1
a353 1
		DCIAS_20(pa);
d358 1
a358 1
		DCIAS_30(pa);
d363 1
a363 1
		DCIAS_40(pa);
d368 1
a368 1
		DCIAS_60(pa);
d391 2
a392 2
void _ICPL(pa)
	paddr_t	pa;
d398 1
a398 1
		ICPL_40(pa);
d403 1
a403 1
		ICPL_60(pa);
d409 2
a410 2
void _ICPP(pa)
	paddr_t	pa;
d416 1
a416 1
		ICPP_40(pa);
d421 1
a421 1
		ICPP_60(pa);
d427 2
a428 2
void _DCPL(pa)
	paddr_t	pa;
d434 1
a434 1
		DCPL_40(pa);
d439 1
a439 1
		DCPL_60(pa);
d445 2
a446 2
void _DCPP(pa)
	paddr_t	pa;
d452 1
a452 1
		DCPP_40(pa);
d457 1
a457 1
		DCPP_60(pa);
d463 2
a464 2
void _DCFL(pa)
	paddr_t	pa;
d470 1
a470 1
		DCFL_40(pa);
d475 1
a475 1
		DCFL_60(pa);
d481 2
a482 2
void _DCFP(pa)
	paddr_t	pa;
d488 1
a488 1
		DCFP_40(pa);
d493 1
a493 1
		DCFP_60(pa);
@


