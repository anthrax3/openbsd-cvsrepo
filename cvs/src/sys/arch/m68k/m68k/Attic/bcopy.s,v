head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.20
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.18
	OPENBSD_5_0:1.3.0.16
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.1
	OPENBSD_3_3:1.1.0.30
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.28
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.26
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.24
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.22
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.20
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.18
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.16
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.14
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.12
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.10
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.8
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2014.03.18.22.36.34;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2013.06.17.17.50.07;	author jj;	state Exp;
branches;
next	1.4;

1.4
date	2013.02.02.13.32.06;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.24.20.58.26;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.02.23.27.48;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.03.26.08.23.53;	author downsj;	state Exp;
branches
	1.1.14.1;
next	;

1.1.14.1
date	2003.06.07.11.11.39;	author ho;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@@


1.5
log
@m68k kernel memcpy/memmove/bcopy implementation in libkern, remove ovbcopy, fix for larger than 128k size copies. Parts from deraadt@@, ok (and off-by-one fix) miod@@
@
text
@@


1.4
log
@Kernel bits for m68k/ELF, mostly from NetBSD. In addition, the `pmod' symbel
in fpsp has to be renamed due to a clash with other parts of the kernel.
@
text
@a0 122
/*	$OpenBSD: bcopy.s,v 1.3 2007/11/24 20:58:26 deraadt Exp $	*/
/*	$NetBSD: bcopy.s,v 1.1 1997/03/17 19:44:33 gwr Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * This is based on: src/lib/libc/arch/m68k/string/bcopy.S
 * identified as: @@(#)bcopy.s        5.1 (Berkeley) 5/12/90
 */	

#include <machine/asm.h>

	.file	"bcopy.s"
	.text

/*
 * {ov}bcopy(from, to, len)
 * memcpy(to, from, len)
 *
 * Works for counts up to 128K.
 */
ALTENTRY(memmove, memcpy)
ENTRY(memcpy)
	movl	%sp@@(12),%d0		| get count
	jeq	Lbccpyexit		| if zero, return
	movl	%sp@@(8), %a0		| src address
	movl	%sp@@(4), %a1		| dest address
	jra	Lbcdocopy		| jump into bcopy
ALTENTRY(ovbcopy, bcopy)
ENTRY(bcopy)
	movl	%sp@@(12),%d0		| get count
	jeq	Lbccpyexit		| if zero, return
	movl	%sp@@(4),%a0		| src address
	movl	%sp@@(8),%a1		| dest address
Lbcdocopy:
	cmpl	%a1,%a0			| src before dest?
	jlt	Lbccpyback		| yes, copy backwards (avoids overlap)
	movl	%a0,%d1
	btst	#0,%d1			| src address odd?
	jeq	Lbccfeven		| no, go check dest
	movb	%a0@@+,%a1@@+		| yes, copy a byte
	subql	#1,%d0			| update count
	jeq	Lbccpyexit		| exit if done
Lbccfeven:
	movl	%a1,%d1
	btst	#0,%d1			| dest address odd?
	jne	Lbccfbyte		| yes, must copy by bytes
	movl	%d0,%d1			| no, get count
	lsrl	#2,%d1			| convert to longwords
	jeq	Lbccfbyte		| no longwords, copy bytes
	subql	#1,%d1			| set up for dbf
Lbccflloop:
	movl	%a0@@+,%a1@@+		| copy longwords
	dbf	%d1,Lbccflloop		| til done
	andl	#3,%d0			| get remaining count
	jeq	Lbccpyexit		| done if none
Lbccfbyte:
	subql	#1,%d0			| set up for dbf
Lbccfbloop:
	movb	%a0@@+,%a1@@+		| copy bytes
	dbf	%d0,Lbccfbloop		| til done
Lbccpyexit:
	rts
Lbccpyback:
	addl	%d0,%a0			| add count to src
	addl	%d0,%a1			| add count to dest
	movl	%a0,%d1
	btst	#0,%d1			| src address odd?
	jeq	Lbccbeven		| no, go check dest
	movb	%a0@@-,%a1@@-		| yes, copy a byte
	subql	#1,%d0			| update count
	jeq	Lbccpyexit		| exit if done
Lbccbeven:
	movl	%a1,%d1
	btst	#0,%d1			| dest address odd?
	jne	Lbccbbyte		| yes, must copy by bytes
	movl	%d0,%d1			| no, get count
	lsrl	#2,%d1			| convert to longwords
	jeq	Lbccbbyte		| no longwords, copy bytes
	subql	#1,%d1			| set up for dbf
Lbccblloop:
	movl	%a0@@-,%a1@@-		| copy longwords
	dbf	%d1,Lbccblloop		| til done
	andl	#3,%d0			| get remaining count
	jeq	Lbccpyexit		| done if none
Lbccbbyte:
	subql	#1,%d0			| set up for dbf
Lbccbbloop:
	movb	%a0@@-,%a1@@-		| copy bytes
	dbf	%d0,Lbccbbloop		| til done
	rts
@


1.3
log
@make ALTENTRY() use _C_LABEL() for the 2nd argument, and adjust callers
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: bcopy.s,v 1.2 2003/06/02 23:27:48 millert Exp $	*/
d55 1
a55 1
	movl	sp@@(12),d0		| get count
d57 2
a58 2
	movl	sp@@(8), a0		| src address
	movl	sp@@(4), a1		| dest address
d62 1
a62 1
	movl	sp@@(12),d0		| get count
d64 2
a65 2
	movl	sp@@(4),a0		| src address
	movl	sp@@(8),a1		| dest address
d67 1
a67 1
	cmpl	a1,a0			| src before dest?
d69 2
a70 2
	movl	a0,d1
	btst	#0,d1			| src address odd?
d72 2
a73 2
	movb	a0@@+,a1@@+		| yes, copy a byte
	subql	#1,d0			| update count
d76 2
a77 2
	movl	a1,d1
	btst	#0,d1			| dest address odd?
d79 2
a80 2
	movl	d0,d1			| no, get count
	lsrl	#2,d1			| convert to longwords
d82 1
a82 1
	subql	#1,d1			| set up for dbf
d84 3
a86 3
	movl	a0@@+,a1@@+		| copy longwords
	dbf	d1,Lbccflloop		| til done
	andl	#3,d0			| get remaining count
d89 1
a89 1
	subql	#1,d0			| set up for dbf
d91 2
a92 2
	movb	a0@@+,a1@@+		| copy bytes
	dbf	d0,Lbccfbloop		| til done
d96 4
a99 4
	addl	d0,a0			| add count to src
	addl	d0,a1			| add count to dest
	movl	a0,d1
	btst	#0,d1			| src address odd?
d101 2
a102 2
	movb	a0@@-,a1@@-		| yes, copy a byte
	subql	#1,d0			| update count
d105 2
a106 2
	movl	a1,d1
	btst	#0,d1			| dest address odd?
d108 2
a109 2
	movl	d0,d1			| no, get count
	lsrl	#2,d1			| convert to longwords
d111 1
a111 1
	subql	#1,d1			| set up for dbf
d113 3
a115 3
	movl	a0@@-,a1@@-		| copy longwords
	dbf	d1,Lbccblloop		| til done
	andl	#3,d0			| get remaining count
d118 1
a118 1
	subql	#1,d0			| set up for dbf
d120 2
a121 2
	movb	a0@@-,a1@@-		| copy bytes
	dbf	d0,Lbccbbloop		| til done
@


1.2
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcopy.s,v 1.1 1997/03/26 08:23:53 downsj Exp $	*/
d53 1
a53 1
ALTENTRY(memmove, _memcpy)
d60 1
a60 1
ALTENTRY(ovbcopy, _bcopy)
@


1.1
log
@Merge changes from NetBSD, 3/19/97; enforce use of new files in file.m68k.

All of the m68k ports need fixing, in various ways.  From a casual look,
mvme68k and sun3 need the most work.

Tested on hp300, from which sig_machdep.c is based.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.1.14.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bcopy.s,v 1.1 1997/03/26 08:23:53 downsj Exp $	*/
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
@


