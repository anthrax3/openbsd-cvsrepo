head	1.12;
access;
symbols
	OPENBSD_4_0:1.11.0.14
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.12
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.9.0.6
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.4
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.9.0.2
	UBC_BASE:1.9
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.2.0.10
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.4
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.0.10
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.8
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2006.11.29.13.22.07;	author miod;	state dead;
branches;
next	1.11;

1.11
date	2003.06.02.23.27.48;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.09.22.27.09;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.08.02.24.06;	author art;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2001.11.06.19.53.14;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.11.20.05.24;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.25.13.25.32;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.08.08.08.57;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.15.01.43.16;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.05.21.26.37;	author art;	state Exp;
branches;
next	1.2;

1.2
date	99.09.03.18.01.04;	author art;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	97.02.10.11.11.51;	author downsj;	state Exp;
branches;
next	;

1.2.4.1
date	2001.07.04.10.18.21;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2001.10.31.03.01.14;	author nate;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2001.11.13.21.00.52;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2002.03.06.01.03.31;	author niklas;	state Exp;
branches;
next	1.2.4.5;

1.2.4.5
date	2003.03.27.23.28.43;	author niklas;	state Exp;
branches;
next	1.2.4.6;

1.2.4.6
date	2003.06.07.11.11.39;	author ho;	state Exp;
branches;
next	;

1.9.2.1
date	2003.05.19.21.49.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove MAPPEDCOPY. It does not work and I am not convinced it is worth
fixing.
@
text
@/*	$OpenBSD: mappedcopy.c,v 1.11 2003/06/02 23:27:48 millert Exp $	*/
/*	$NetBSD: mappedcopy.c,v 1.1 1997/02/02 06:54:10 thorpej Exp $	*/

/*
 * XXX This doesn't work yet.  Soon.  --thorpej@@netbsd.org
 */

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah $Hdr: vm_machdep.c 1.21 91/04/06$
 *
 *	@@(#)vm_machdep.c	8.6 (Berkeley) 1/12/94
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>

#include <uvm/uvm_extern.h>

#include <machine/cpu.h>

#ifdef DEBUG
#define	MDB_COPYIN	0x01
#define	MDB_COPYOUT	0x02
int	mappedcopydebug = 0;

int	mappedcopyincount;
int	mappedcopyoutcount;
#endif

/*
 * This turns off mappedcopy by default.  Ports initialize the
 * threshold in initcpu().
 */
u_int	mappedcopysize = -1;

/*
 * N.B. Both of these routines assume PAGE_SIZE == NBPG.
 */

int
mappedcopyin(fromp, top, count)
	register void *fromp, *top;
	register size_t count;
{
	register vaddr_t kva;
	register paddr_t upa;
	register size_t len;
	int off, alignable, tmp;
	pmap_t upmap;
	extern caddr_t CADDR1;

#ifdef DEBUG
	if (mappedcopydebug & MDB_COPYIN)
		printf("mappedcopyin(%p, %p, %lu), pid %d\n",
		    fromp, top, (u_long)count, curproc->p_pid);
	mappedcopyincount++;
#endif

	kva = (vaddr_t)CADDR1;
	off = (int)((u_long)fromp & PAGE_MASK);
	alignable = (off == ((u_long)top & PAGE_MASK));
	upmap = vm_map_pmap(&curproc->p_vmspace->vm_map);
	while (count > 0) {
		/*
		 * First access of a page, use copyin to make sure
		 * page is faulted in and read access allowed.
		 */
		if (copyin(fromp, &tmp, sizeof(u_char)) != 0)
			return (EFAULT);
		/*
		 * Map in the page and bcopy data in from it
		 */
		if (pmap_extract(upmap, trunc_page((vaddr_t)fromp), &upa) == FALSE)
			panic("mappedcopyin: null page frame");
		len = min(count, (PAGE_SIZE - off));
		pmap_enter(pmap_kernel(), kva, upa, VM_PROT_READ,
			   VM_PROT_READ|PMAP_WIRED);
		pmap_update(pmap_kernel());
		if (len == PAGE_SIZE && alignable && off == 0)
			copypage((caddr_t)kva, top);
		else
			bcopy((void *)(kva + off), top, len);
		fromp += len;
		top += len;
		count -= len;
		off = 0;
	}
	pmap_remove(pmap_kernel(), kva, kva + PAGE_SIZE);
	pmap_update(pmap_kernel());
	return (0);
}

int
mappedcopyout(fromp, top, count)
	register void *fromp, *top;
	register size_t count;
{
	register vaddr_t kva;
	register paddr_t upa;
	register size_t len;
	int off, alignable;
	pmap_t upmap;
	extern caddr_t CADDR2;

#ifdef DEBUG
	if (mappedcopydebug & MDB_COPYOUT)
		printf("mappedcopyout(%p, %p, %lu), pid %d\n",
		    fromp, top, (u_long)count, curproc->p_pid);
	mappedcopyoutcount++;
#endif

	kva = (vaddr_t) CADDR2;
	off = (int)((u_long)top & PAGE_MASK);
	alignable = (off == ((u_long)fromp & PAGE_MASK));
	upmap = vm_map_pmap(&curproc->p_vmspace->vm_map);
	while (count > 0) {
		/*
		 * First access of a page, use copyout to make sure
		 * page is faulted in and write access allowed.
		 */
		if (copyout(fromp, top, sizeof(char)) != 0)
			return (EFAULT);
		/*
		 * Map in the page and bcopy data out to it
		 */
		if (pmap_extract(upmap, trunc_page((vaddr_t)top), &upa) == FALSE)
			panic("mappedcopyout: null page frame");
		len = min(count, (PAGE_SIZE - off));
		pmap_enter(pmap_kernel(), kva, upa,
		    VM_PROT_READ|VM_PROT_WRITE,
		    VM_PROT_READ|VM_PROT_WRITE|PMAP_WIRED);
		pmap_update(pmap_kernel());
		if (len == PAGE_SIZE && alignable && off == 0)
			copypage(fromp, (caddr_t)kva);
		else
			bcopy(fromp, (void *)(kva + off), len);
		fromp += len;
		top += len;
		count -= len;
		off = 0;
	}
	pmap_remove(pmap_kernel(), kva, kva + PAGE_SIZE);
	pmap_update(pmap_kernel());
	return (0);
}
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.10 2003/01/09 22:27:09 miod Exp $	*/
@


1.10
log
@Remove fetch(9) and store(9) functions from the kernel, and replace the few
remaining instances of them with appropriate copy(9) usage.

ok art@@, tested on all arches unless my memory is non-ECC
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.9 2001/12/08 02:24:06 art Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.9
log
@Sprinkle pmap_update calls where relevant and some other
misc pmap usage fixes.
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.8 2001/11/06 19:53:14 miod Exp $	*/
d85 1
a85 1
	int off, alignable;
d102 1
a102 1
		 * First access of a page, use fubyte to make sure
d105 1
a105 1
		if (fubyte(fromp) == -1)
d155 1
a155 1
		 * First access of a page, use subyte to make sure
d158 1
a158 1
		if (subyte(top, *((char *)fromp)) == -1)
@


1.9.2.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d85 1
a85 1
	int off, alignable, tmp;
d102 1
a102 1
		 * First access of a page, use copyin to make sure
d105 1
a105 1
		if (copyin(fromp, &tmp, sizeof(u_char)) != 0)
d155 1
a155 1
		 * First access of a page, use copyout to make sure
d158 1
a158 1
		if (copyout(fromp, top, sizeof(char)) != 0)
@


1.8
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.7 2001/09/11 20:05:24 miod Exp $	*/
d115 1
d126 1
d169 1
d180 1
@


1.7
log
@Don't include <vm/vm_kern.h> if you don't need foo_map.
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.6 2001/07/25 13:25:32 art Exp $	*/
d54 1
a54 1
#include <vm/vm.h>
@


1.6
log
@Change the pmap_enter interface to merge access_type and the wired boolean
and arbitrary flags into one argument.

One new flag is PMAP_CANFAIL that tells pmap_enter that it can fail if there
are not enough resources to satisfy the request. If this flag is not passed,
pmap_enter should panic as it should have done before this change (XXX - many
pmaps are still not doing that).

Only i386 and alpha implement CANFAIL for now.

Includes uvm updates from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.5 2001/06/08 08:08:57 art Exp $	*/
a54 1
#include <vm/vm_kern.h>
@


1.5
log
@Change the paddr_t pmap_extract(struct pmap *, vaddr_t) interface to
boolean_t pmap_extract(struct pmap *, vaddr_t, paddr_t *).
Matches NetBSD. Tested by various people on various platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.4 2001/05/15 01:43:16 millert Exp $	*/
d114 2
a115 2
		pmap_enter(pmap_kernel(), kva, upa, VM_PROT_READ, TRUE,
			   VM_PROT_READ);
d166 2
a167 2
		    VM_PROT_READ|VM_PROT_WRITE, TRUE,
		    VM_PROT_READ|VM_PROT_WRITE);
@


1.4
log
@Replace vm_offset_t with vaddr_t and paddr_t as appropriate.
NetBSD used as a guide.
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.3 2001/05/05 21:26:37 art Exp $	*/
d111 1
a111 2
		upa = pmap_extract(upmap, trunc_page((vaddr_t)fromp));
		if (upa == 0)
d162 1
a162 2
		upa = pmap_extract(upmap, trunc_page((vaddr_t)top));
		if (upa == 0)
@


1.3
log
@Remove the (vaddr_t) casts inside the round_page and trunc_page macros.
We might want to use them on types that are bigger than vaddr_t.

Fix all callers that pass pointers without casts.
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.2 1999/09/03 18:01:04 art Exp $	*/
d83 2
a84 1
	register vm_offset_t kva, upa;
d97 1
a97 1
	kva = (vm_offset_t)CADDR1;
d135 2
a136 1
	register vm_offset_t kva, upa;
d149 1
a149 1
	kva = (vm_offset_t) CADDR2;
@


1.2
log
@Change the pmap_enter api to pass down an argument that indicates
the access type that caused this mapping. This is to simplify pmaps
with mod/ref emulation (none for the moment) and in some cases speed
up pmap_is_{referenced,modified}.
At the same time, clean up some mappings that had too high protection.

XXX - the access type is incorrect in old vm, it's only used by uvm and MD code.
The actual use of this in pmap_enter implementations is not in this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.1 1997/02/10 11:11:51 downsj Exp $	*/
d110 1
a110 1
		upa = pmap_extract(upmap, trunc_page(fromp));
d161 1
a161 1
		upa = pmap_extract(upmap, trunc_page(top));
@


1.2.4.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.2 1999/09/03 18:01:04 art Exp $	*/
d83 1
a83 2
	register vaddr_t kva;
	register paddr_t upa;
d96 1
a96 1
	kva = (vaddr_t)CADDR1;
d110 2
a111 1
		if (pmap_extract(upmap, trunc_page((vaddr_t)fromp), &upa) == FALSE)
d134 1
a134 2
	register vaddr_t kva;
	register paddr_t upa;
d147 1
a147 1
	kva = (vaddr_t) CADDR2;
d161 2
a162 1
		if (pmap_extract(upmap, trunc_page((vaddr_t)top), &upa) == FALSE)
@


1.2.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.2.4.1 2001/07/04 10:18:21 niklas Exp $	*/
d55 1
d114 2
a115 2
		pmap_enter(pmap_kernel(), kva, upa, VM_PROT_READ,
			   VM_PROT_READ|PMAP_WIRED);
d166 2
a167 2
		    VM_PROT_READ|VM_PROT_WRITE,
		    VM_PROT_READ|VM_PROT_WRITE|PMAP_WIRED);
@


1.2.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d54 1
a54 1
#include <uvm/uvm_extern.h>
@


1.2.4.4
log
@Merge in trunk
@
text
@a114 1
		pmap_update(pmap_kernel());
a124 1
	pmap_update(pmap_kernel());
a166 1
		pmap_update(pmap_kernel());
a176 1
	pmap_update(pmap_kernel());
@


1.2.4.5
log
@Sync the SMP branch with 3.3
@
text
@d85 1
a85 1
	int off, alignable, tmp;
d102 1
a102 1
		 * First access of a page, use copyin to make sure
d105 1
a105 1
		if (copyin(fromp, &tmp, sizeof(u_char)) != 0)
d155 1
a155 1
		 * First access of a page, use copyout to make sure
d158 1
a158 1
		if (copyout(fromp, top, sizeof(char)) != 0)
@


1.2.4.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mappedcopy.c,v 1.2.4.5 2003/03/27 23:28:43 niklas Exp $	*/
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@Add the generic m68k part of the copypage/zeropage/mappedcopy changes
from NetBSD.

m68k ports may/will need changing in order to cope with this.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d114 2
a115 1
		pmap_enter(pmap_kernel(), kva, upa, VM_PROT_READ, TRUE);
d166 2
a167 1
		    VM_PROT_READ|VM_PROT_WRITE, TRUE);
@

