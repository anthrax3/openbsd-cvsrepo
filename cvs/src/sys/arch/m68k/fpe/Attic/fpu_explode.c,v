head	1.7;
access;
symbols
	OPENBSD_5_3:1.6.0.28
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.26
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.24
	OPENBSD_5_0:1.6.0.22
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.20
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2013.03.25.19.08.56;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2006.06.11.20.43.28;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.16.22.08.26;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.23.27.48;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.34;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.05.09.22.20.45;	author niklas;	state Exp;
branches
	1.2.16.1
	1.2.26.1;
next	1.1;

1.1
date	95.12.14.04.53.08;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2002.03.28.10.34.04;	author niklas;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.06.07.11.11.38;	author ho;	state Exp;
branches;
next	;

1.2.26.1
date	2002.06.11.03.36.06;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove the m68k FPU emulator; it was only used by the mac68k port which has been
lying in the Attic for quite awhile; none of the remaining m68k-based ports
support FPU-less systems; assuming my HP332 cpu board is in working condition,
give me memory boards for it to have at least 8MB and a chassis, and I'll
consider bringing this code back. But then, the 332 has an FPU socket, and
I'd rather write a new glue to use the MI softloat code (bug-free) than try
and fix the bugs in this.
@
text
@/*	$OpenBSD: fpu_explode.c,v 1.6 2006/06/11 20:43:28 miod Exp $	*/
/*	$NetBSD: fpu_explode.c,v 1.6 2003/10/23 15:07:30 kleink Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)fpu_explode.c	8.1 (Berkeley) 6/11/93
 */

/*
 * FPU subroutines: `explode' the machine's `packed binary' format numbers
 * into our internal format.
 */

#include <sys/types.h>
#include <sys/systm.h>

#include <machine/ieee.h>
#include <machine/reg.h>

#include <m68k/fpe/fpu_arith.h>
#include <m68k/fpe/fpu_emulate.h>


/* Conversion to internal format -- note asymmetry. */
int	fpu_itof(struct fpn *fp, u_int i);
int	fpu_stof(struct fpn *fp, u_int i);
int	fpu_dtof(struct fpn *fp, u_int i, u_int j);
int	fpu_xtof(struct fpn *fp, u_int i, u_int j, u_int k);

/*
 * N.B.: in all of the following, we assume the FP format is
 *
 *	---------------------------
 *	| s | exponent | fraction |
 *	---------------------------
 *
 * (which represents -1**s * 1.fraction * 2**exponent), so that the
 * sign bit is way at the top (bit 31), the exponent is next, and
 * then the remaining bits mark the fraction.  A zero exponent means
 * zero or denormalized (0.fraction rather than 1.fraction), and the
 * maximum possible exponent, 2bias+1, signals inf (fraction==0) or NaN.
 *
 * Since the sign bit is always the topmost bit---this holds even for
 * integers---we set that outside all the *tof functions.  Each function
 * returns the class code for the new number (but note that we use
 * FPC_QNAN for all NaNs; fpu_explode will fix this if appropriate).
 */

/*
 * int -> fpn.
 */
int
fpu_itof(fp, i)
	struct fpn *fp;
	u_int i;
{

	if (i == 0)
		return (FPC_ZERO);
	/*
	 * The value FP_1 represents 2^FP_LG, so set the exponent
	 * there and let normalization fix it up.  Convert negative
	 * numbers to sign-and-magnitude.  Note that this relies on
	 * fpu_norm()'s handling of `supernormals'; see fpu_subr.c.
	 */
	fp->fp_exp = FP_LG;
	fp->fp_mant[0] = (int)i < 0 ? -i : i;
	fp->fp_mant[1] = 0;
	fp->fp_mant[2] = 0;
	fpu_norm(fp);
	return (FPC_NUM);
}

#define	mask(nbits) ((1 << (nbits)) - 1)

/*
 * All external floating formats convert to internal in the same manner,
 * as defined here.  Note that only normals get an implied 1.0 inserted.
 */
#define	FP_TOF(exp, expbias, allfrac, f0, f1, f2, f3) \
	if (exp == 0) { \
		if (allfrac == 0) \
			return (FPC_ZERO); \
		fp->fp_exp = 1 - expbias; \
		fp->fp_mant[0] = f0; \
		fp->fp_mant[1] = f1; \
		fp->fp_mant[2] = f2; \
		fpu_norm(fp); \
		return (FPC_NUM); \
	} \
	if (exp == (2 * expbias + 1)) { \
		if (allfrac == 0) \
			return (FPC_INF); \
		fp->fp_mant[0] = f0; \
		fp->fp_mant[1] = f1; \
		fp->fp_mant[2] = f2; \
		return (FPC_QNAN); \
	} \
	fp->fp_exp = exp - expbias; \
	fp->fp_mant[0] = FP_1 | f0; \
	fp->fp_mant[1] = f1; \
	fp->fp_mant[2] = f2; \
	return (FPC_NUM)

/*
 * 32-bit single precision -> fpn.
 * We assume a single occupies at most (64-FP_LG) bits in the internal
 * format: i.e., needs at most fp_mant[0] and fp_mant[1].
 */
int
fpu_stof(fp, i)
	struct fpn *fp;
	u_int i;
{
	int exp;
	u_int frac, f0, f1;
#define SNG_SHIFT (SNG_FRACBITS - FP_LG)

	exp = (i >> (32 - 1 - SNG_EXPBITS)) & mask(SNG_EXPBITS);
	frac = i & mask(SNG_FRACBITS);
	f0 = frac >> SNG_SHIFT;
	f1 = frac << (32 - SNG_SHIFT);
	FP_TOF(exp, SNG_EXP_BIAS, frac, f0, f1, 0, 0);
}

/*
 * 64-bit double -> fpn.
 * We assume this uses at most (96-FP_LG) bits.
 */
int
fpu_dtof(fp, i, j)
	struct fpn *fp;
	u_int i, j;
{
	int exp;
	u_int frac, f0, f1, f2;
#define DBL_SHIFT (DBL_FRACBITS - 32 - FP_LG)

	exp = (i >> (32 - 1 - DBL_EXPBITS)) & mask(DBL_EXPBITS);
	frac = i & mask(DBL_FRACBITS - 32);
	f0 = frac >> DBL_SHIFT;
	f1 = (frac << (32 - DBL_SHIFT)) | (j >> DBL_SHIFT);
	f2 = j << (32 - DBL_SHIFT);
	frac |= j;
	FP_TOF(exp, DBL_EXP_BIAS, frac, f0, f1, f2, 0);
}

/*
 * 96-bit extended -> fpn.
 */
int
fpu_xtof(fp, i, j, k)
	struct fpn *fp;
	u_int i, j, k;
{
	int exp;
	u_int frac, f0, f1, f2;
#define EXT_SHIFT (EXT_FRACBITS - 1 - 32 - FP_LG)

	exp = (i >> (32 - 1 - EXT_EXPBITS)) & mask(EXT_EXPBITS);
	f0 = j >> EXT_SHIFT;
	f1 = (j << (32 - EXT_SHIFT)) | (k >> EXT_SHIFT);
	f2 = k << (32 - EXT_SHIFT);
	frac = j | k;

	/* m68k extended does not imply denormal by exp==0 */
	if (exp == 0) {
		if (frac == 0)
			return (FPC_ZERO);
		fp->fp_exp = - EXT_EXP_BIAS;
		fp->fp_mant[0] = f0;
		fp->fp_mant[1] = f1;
		fp->fp_mant[2] = f2;
		fpu_norm(fp);
		return (FPC_NUM);
	}
	if (exp == (2 * EXT_EXP_BIAS + 1)) {
		if (frac == 0)
			return (FPC_INF);
		fp->fp_mant[0] = f0;
		fp->fp_mant[1] = f1;
		fp->fp_mant[2] = f2;
		return (FPC_QNAN);
	}
	fp->fp_exp = exp - EXT_EXP_BIAS;
	fp->fp_mant[0] = FP_1 | f0;
	fp->fp_mant[1] = f1;
	fp->fp_mant[2] = f2;
	return (FPC_NUM);
}

/*
 * Explode the contents of a memory operand.
 */
void
fpu_explode(fe, fp, type, space)
	struct fpemu *fe;
	struct fpn *fp;
	int type;
	u_int *space;
{
	u_int s;

	s = space[0];
	fp->fp_sign = s >> 31;
	fp->fp_sticky = 0;
	switch (type) {

	case FTYPE_BYT:
		s >>= 8;
	case FTYPE_WRD:
		s >>= 16;
	case FTYPE_LNG:
		s = fpu_itof(fp, s);
		break;

	case FTYPE_SNG:
		s = fpu_stof(fp, s);
		break;

	case FTYPE_DBL:
		s = fpu_dtof(fp, s, space[1]);
		break;

	case FTYPE_EXT:
		s = fpu_xtof(fp, s, space[1], space[2]);
		break;

	default:
		panic("fpu_explode");
	}
	if (s == FPC_QNAN && (fp->fp_mant[0] & FP_QUIETBIT) == 0) {
		/*
		 * Input is a signalling NaN.  All operations that return
		 * an input NaN operand put it through a ``NaN conversion'',
		 * which basically just means ``turn on the quiet bit''.
		 * We do this here so that all NaNs internally look quiet
		 * (we can tell signalling ones by their class).
		 */
		fp->fp_mant[0] |= FP_QUIETBIT;
		fe->fe_fpsr |= FPSR_SNAN;	/* assert SNAN exception */
		s = FPC_SNAN;
	}
	fp->fp_class = s;
}
@


1.6
log
@Use bracketed include paths.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_explode.c,v 1.5 2006/01/16 22:08:26 miod Exp $	*/
@


1.5
log
@Sync m68k fpe code with NetBSD; but remove unimplemented opcodes stubs, so
that we trigger SIGILL instead of propagating false results.

Tested by martin@@ on Macintosh LCIII.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d55 2
a56 2
#include "fpu_arith.h"
#include "fpu_emulate.h"
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: fpu_explode.c,v 1.3 2002/03/14 01:26:34 millert Exp $	*/
/*	$NetBSD: fpu_explode.c,v 1.2 1996/04/30 11:52:18 briggs Exp $ */
d52 1
a52 1
#include "ieee.h"
d60 4
a63 4
static int	fpu_itof(struct fpn *fp, u_int i);
static int	fpu_stof(struct fpn *fp, u_int i);
static int	fpu_dtof(struct fpn *fp, u_int i, u_int j);
static int	fpu_xtof(struct fpn *fp, u_int i, u_int j, u_int k);
d87 1
a87 1
static int
d89 2
a90 2
	register struct fpn *fp;
	register u_int i;
a104 1
	fp->fp_mant[3] = 0;
a122 1
		fp->fp_mant[3] = f3; \
a131 1
		fp->fp_mant[3] = f3; \
a137 1
	fp->fp_mant[3] = f3; \
d145 1
a145 1
static int
d147 2
a148 2
	register struct fpn *fp;
	register u_int i;
d150 2
a151 2
	register int exp;
	register u_int frac, f0, f1;
d165 1
a165 1
static int
d167 2
a168 2
	register struct fpn *fp;
	register u_int i, j;
d170 2
a171 2
	register int exp;
	register u_int frac, f0, f1, f2;
d186 1
a186 1
static int
d188 2
a189 2
	register struct fpn *fp;
	register u_int i, j, k;
d191 2
a192 2
	register int exp;
	register u_int frac, f0, f1, f2;
a208 1
		fp->fp_mant[3] = 0;
a217 1
		fp->fp_mant[3] = 0;
a223 1
	fp->fp_mant[3] = 0;
d232 2
a233 2
	register struct fpemu *fe;
	register struct fpn *fp;
d235 1
a235 1
	register u_int *space;
d237 1
a237 1
	register u_int s;
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_explode.c,v 1.2 1996/05/09 22:20:45 niklas Exp $	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@From NetBSD:
Update for -Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized.
Bring back Step9 and fix an oversight from Ken Nakata <kenn@@remus.rutgers.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d64 4
a67 4
static int	fpu_itof __P((struct fpn *fp, u_int i));
static int	fpu_stof __P((struct fpn *fp, u_int i));
static int	fpu_dtof __P((struct fpn *fp, u_int i, u_int j));
static int	fpu_xtof __P((struct fpn *fp, u_int i, u_int j, u_int k));
@


1.2.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_explode.c,v 1.2 1996/05/09 22:20:45 niklas Exp $	*/
d64 4
a67 4
static int	fpu_itof(struct fpn *fp, u_int i);
static int	fpu_stof(struct fpn *fp, u_int i);
static int	fpu_dtof(struct fpn *fp, u_int i, u_int j);
static int	fpu_xtof(struct fpn *fp, u_int i, u_int j, u_int k);
@


1.2.16.1
log
@Merge in -current from about a week ago
@
text
@d64 4
a67 4
static int	fpu_itof(struct fpn *fp, u_int i);
static int	fpu_stof(struct fpn *fp, u_int i);
static int	fpu_dtof(struct fpn *fp, u_int i, u_int j);
static int	fpu_xtof(struct fpn *fp, u_int i, u_int j, u_int k);
@


1.2.16.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_explode.c,v 1.2.16.1 2002/03/28 10:34:04 niklas Exp $	*/
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@from netbsd:
Still incomplete, but much more complete FPE from Ken Nakata
<kenn@@remus.rutgers.edu>.  This emulator does not yet emulate
the following functions:
        FSINH, FETOXM1, FTANH, FATAN, FASIN, FATANH, FSIN, FTAN,
        FETOX, FTWOTOX, FTENTOX, FCOSH, FACOS, FCOS, FSINCOS
It is sufficient, however, to allow programs like df, w, and newfs,
to run to completion with correct results.
Portions of this code were based on the sparc fpe and on initial
work by gwr.
@
text
@d1 2
a2 1
/*	$NetBSD: fpu_explode.c,v 1.1 1995/11/03 04:47:07 briggs Exp $ */
d54 1
@
