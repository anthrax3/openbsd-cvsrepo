head	1.7;
access;
symbols
	OPENBSD_5_3:1.6.0.28
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.26
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.24
	OPENBSD_5_0:1.6.0.22
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.20
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.3.0.40
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.38
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.36
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.34
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.32
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.30
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.28
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.26
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.24
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.22
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.20
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.18
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.14
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2013.03.25.19.08.56;	author miod;	state dead;
branches;
next	1.6;

1.6
date	2006.06.11.20.43.28;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.30.21.23.23;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.16.22.08.26;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	97.01.13.11.51.06;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.05.09.22.20.46;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.04.53.10;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Remove the m68k FPU emulator; it was only used by the mac68k port which has been
lying in the Attic for quite awhile; none of the remaining m68k-based ports
support FPU-less systems; assuming my HP332 cpu board is in working condition,
give me memory boards for it to have at least 8MB and a chassis, and I'll
consider bringing this code back. But then, the 332 has an FPU socket, and
I'd rather write a new glue to use the MI softloat code (bug-free) than try
and fix the bugs in this.
@
text
@/*	$OpenBSD: fpu_fstore.c,v 1.6 2006/06/11 20:43:28 miod Exp $	*/
/*	$NetBSD: fpu_fstore.c,v 1.8 2003/07/15 02:43:10 lukem Exp $	*/

/*
 * Copyright (c) 1995 Ken Nakata
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/types.h>
#include <sys/signal.h>
#include <sys/systm.h>
#include <machine/frame.h>

#include <m68k/fpe/fpu_emulate.h>

/*
 * type 0: fmove mem/fpr->fpr
 * In this function, we know
 *	(opcode & 0x01c0) == 0
 *	(word1 & 0xe000) == 0x6000
 */
int
fpu_emul_fstore(struct fpemu *fe, struct instruction *insn, int *typ)
{
    struct frame *frame = fe->fe_frame;
    u_int *fpregs = fe->fe_fpframe->fpf_regs;
    int word1, sig;
    int regnum;
    int format;
    u_int buf[3];

#if DEBUG_FPE
    printf("  fpu_emul_fstore: frame at %p fpframe at %p\n",
	   frame, fe->fe_fpframe);
#endif

    word1 = insn->is_word1;
    format = (word1 >> 10) & 7;
    regnum = (word1 >> 7) & 7;

    insn->is_advance = 4;

    if (format == FTYPE_DBL) {
	insn->is_datasize = 8;
    } else if (format == FTYPE_SNG || format == FTYPE_LNG) {
	insn->is_datasize = 4;
    } else if (format == FTYPE_WRD) {
	insn->is_datasize = 2;
	format = FTYPE_LNG;
    } else if (format == FTYPE_BYT) {
	insn->is_datasize = 1;
	format = FTYPE_LNG;
    } else if (format == FTYPE_EXT) {
	insn->is_datasize = 12;
    } else {
	/* invalid or unsupported operand format */
#if DEBUG_FPE
	printf("  fpu_emul_fstore: invalid format %d\n", format);
#endif
	*typ = ILL_ILLOPN;
	sig = SIGILL;
    }
#if DEBUG_FPE
    printf("  fpu_emul_fstore: format %d, size %d\n",
	   format, insn->is_datasize);
#endif

    fe->fe_fpsr &= ~FPSR_EXCP;

    /* Get effective address. (modreg=opcode&077) */
    sig = fpu_decode_ea(frame, insn, &insn->is_ea, insn->is_opcode, typ);
    if (sig) {
#if DEBUG_FPE
	printf("  fpu_emul_fstore: failed in decode_ea sig=%d\n", sig);
#endif
	return sig;
    }

    if (insn->is_datasize > 4 && insn->is_ea.ea_flags == EA_DIRECT) {
	/* trying to store dbl or ext into a data register */
#ifdef DEBUG
	printf("  fpu_fstore: attempted to store dbl/ext to reg\n");
#endif
	return SIGILL;
    }

#if DEBUG_FPE
    printf("  fpu_emul_fstore: saving FP%d (%08x,%08x,%08x)\n",
	   regnum, fpregs[regnum * 3], fpregs[regnum * 3 + 1],
	   fpregs[regnum * 3 + 2]);
#endif
    fpu_explode(fe, &fe->fe_f3, FTYPE_EXT, &fpregs[regnum * 3]);
#if DEBUG_FPE
    {
	static char *class_name[] = { "SNAN", "QNAN", "ZERO", "NUM", "INF" };
	printf("  fpu_emul_fstore: fpn (%s,%c,%d,%08x,%08x,%08x)\n",
	       class_name[fe->fe_f3.fp_class + 2],
	       fe->fe_f3.fp_sign ? '-' : '+', fe->fe_f3.fp_exp,
	       fe->fe_f3.fp_mant[0], fe->fe_f3.fp_mant[1],
	       fe->fe_f3.fp_mant[2]);
    }
#endif
    fpu_implode(fe, &fe->fe_f3, format, buf);

    fpu_store_ea(frame, insn, &insn->is_ea, (char *)buf);
#if DEBUG_FPE
    printf("  fpu_emul_fstore: %08x,%08x,%08x size %d\n",
	   buf[0], buf[1], buf[2], insn->is_datasize);
#endif

    return 0;
}
@


1.6
log
@Use bracketed include paths.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_fstore.c,v 1.5 2006/01/30 21:23:23 miod Exp $	*/
@


1.5
log
@Better siginfo field values for fpe failures.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_fstore.c,v 1.4 2006/01/16 22:08:26 miod Exp $	*/
d34 1
a34 1
#include "fpu_emulate.h"
@


1.4
log
@Sync m68k fpe code with NetBSD; but remove unimplemented opcodes stubs, so
that we trigger SIGILL instead of propagating false results.

Tested by martin@@ on Macintosh LCIII.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 1
a43 3
fpu_emul_fstore(fe, insn)
     struct fpemu *fe;
     struct instruction *insn;
d80 2
a81 1
	sig = SIGFPE;
d91 1
a91 1
    sig = fpu_decode_ea(frame, insn, &insn->is_ea, insn->is_opcode);
@


1.3
log
@Sync to 970110 NetBSD
@
text
@d2 1
a2 1
/*	$NetBSD: fpu_fstore.c,v 1.5 1996/10/13 03:19:17 christos Exp $	*/
d54 4
a57 4
    if (fpu_debug_level & DL_FSTORE) {
	printf("  fpu_emul_fstore: frame at %p fpframe at %p\n",
	       frame, fe->fe_fpframe);
    }
d79 3
a81 3
	if (fpu_debug_level & DL_FSTORE) {
	    printf("  fpu_emul_fstore: invalid format %d\n", format);
	}
d84 6
a89 4
    if (fpu_debug_level & DL_FSTORE) {
	printf("  fpu_emul_fstore: format %d, size %d\n",
	       format, insn->is_datasize);
    }
d92 1
a92 1
    sig = fpu_decode_ea(frame, insn, &insn->is_ea0, insn->is_opcode);
d94 3
a96 3
	if (fpu_debug_level & DL_FSTORE) {
	    printf("  fpu_emul_fstore: failed in decode_ea sig=%d\n", sig);
	}
d100 1
a100 1
    if (insn->is_datasize > 4 && insn->is_ea0.ea_flags == EA_DIRECT) {
d108 5
a112 4
    if (fpu_debug_level & DL_OPERANDS)
	printf("  fpu_emul_fstore: saving FP%d (%08x,%08x,%08x)\n",
	       regnum, fpregs[regnum * 3], fpregs[regnum * 3 + 1],
	       fpregs[regnum * 3 + 2]);
d114 2
a115 1
    if (fpu_debug_level & DL_VALUES) {
d117 1
a117 1
	printf("  fpu_emul_fstore: fpn (%s,%c,%d,%08x,%08x,%08x,%08x)\n",
d121 1
a121 1
	       fe->fe_f3.fp_mant[2], fe->fe_f3.fp_mant[3]);
d123 1
d126 5
a130 4
    fpu_store_ea(frame, insn, &insn->is_ea0, (char *)buf);
    if (fpu_debug_level & DL_RESULT)
	printf("  fpu_emul_fstore: %08x,%08x,%08x size %d\n",
	       buf[0], buf[1], buf[2], insn->is_datasize);
@


1.2
log
@From NetBSD:
Update for -Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized.
Bring back Step9 and fix an oversight from Ken Nakata <kenn@@remus.rutgers.edu>
@
text
@d2 1
a2 1
/*	$NetBSD: fpu_fstore.c,v 1.3 1996/04/30 11:52:27 briggs Exp $	*/
@


1.1
log
@from netbsd:
Still incomplete, but much more complete FPE from Ken Nakata
<kenn@@remus.rutgers.edu>.  This emulator does not yet emulate
the following functions:
        FSINH, FETOXM1, FTANH, FATAN, FASIN, FATANH, FSIN, FTAN,
        FETOX, FTWOTOX, FTENTOX, FCOSH, FACOS, FCOS, FSINCOS
It is sufficient, however, to allow programs like df, w, and newfs,
to run to completion with correct results.
Portions of this code were based on the sparc fpe and on initial
work by gwr.
@
text
@d1 2
a2 1
/*	$NetBSD: fpu_fstore.c,v 1.2 1995/11/05 00:35:29 briggs Exp $	*/
d31 1
a52 2
    u_int flags;
    char regname;
d55 1
a55 1
	printf("  fpu_emul_fstore: frame at %08x fpframe at %08x\n",
@
