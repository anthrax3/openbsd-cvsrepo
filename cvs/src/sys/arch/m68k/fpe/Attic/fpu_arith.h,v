head	1.6;
access;
symbols
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.24
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.22
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.20
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.16
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.18
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.14
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.12
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.10
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.32
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.30
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.28
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2013.03.25.19.08.55;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2011.09.17.08.38.07;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.16.22.08.26;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.23.27.48;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.05.29.21.05.14;	author niklas;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.12.14.04.53.03;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2003.06.07.11.11.38;	author ho;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove the m68k FPU emulator; it was only used by the mac68k port which has been
lying in the Attic for quite awhile; none of the remaining m68k-based ports
support FPU-less systems; assuming my HP332 cpu board is in working condition,
give me memory boards for it to have at least 8MB and a chassis, and I'll
consider bringing this code back. But then, the 332 has an FPU socket, and
I'd rather write a new glue to use the MI softloat code (bug-free) than try
and fix the bugs in this.
@
text
@/*	$OpenBSD: fpu_arith.h,v 1.5 2011/09/17 08:38:07 miod Exp $	*/
/*	$NetBSD: fpu_arith.h,v 1.3 2003/08/07 16:28:10 agc Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)fpu_arith.h	8.1 (Berkeley) 6/11/93
 */

/*
 * Extended-precision arithmetic.
 *
 * We hold the notion of a `carry register', which may or may not be a
 * machine carry bit or register.  On the SPARC, it is just the machine's
 * carry bit.
 *
 * In the worst case, you can compute the carry from x+y as
 *	(unsigned)(x + y) < (unsigned)x
 * and from x+y+c as
 *	((unsigned)(x + y + c) <= (unsigned)x && (y|c) != 0)
 * for example.
 */

#ifndef FPE_USE_ASM

/* set up for extended-precision arithmetic */
#define	FPU_DECL_CARRY quad_t fpu_carry, fpu_tmp;

/*
 * We have three kinds of add:
 *	add with carry:					  r = x + y + c
 *	add (ignoring current carry) and set carry:	c'r = x + y + 0
 *	add with carry and set carry:			c'r = x + y + c
 * The macros use `C' for `use carry' and `S' for `set carry'.
 * Note that the state of the carry is undefined after ADDC and SUBC,
 * so if all you have for these is `add with carry and set carry',
 * that is OK.
 *
 * The same goes for subtract, except that we compute x - y - c.
 *
 * Finally, we have a way to get the carry into a `regular' variable,
 * or set it from a value.  SET_CARRY turns 0 into no-carry, nonzero
 * into carry; GET_CARRY sets its argument to 0 or 1.
 */
#define	FPU_ADDC(r, x, y) \
	(r) = (x) + (y) + (!!fpu_carry)
#define	FPU_ADDS(r, x, y) \
	{ \
		fpu_tmp = (quad_t)(x) + (quad_t)(y); \
		(r) = (u_int)fpu_tmp; \
		fpu_carry = ((fpu_tmp & 0xffffffff00000000LL) != 0); \
	}
#define	FPU_ADDCS(r, x, y) \
	{ \
		fpu_tmp = (quad_t)(x) + (quad_t)(y) + (!!fpu_carry); \
		(r) = (u_int)fpu_tmp; \
		fpu_carry = ((fpu_tmp & 0xffffffff00000000LL) != 0); \
	}
#define	FPU_SUBC(r, x, y) \
	(r) = (x) - (y) - (!!fpu_carry)
#define	FPU_SUBS(r, x, y) \
	{ \
		fpu_tmp = (quad_t)(x) - (quad_t)(y); \
		(r) = (u_int)fpu_tmp; \
		fpu_carry = ((fpu_tmp & 0xffffffff00000000LL) != 0); \
	}
#define	FPU_SUBCS(r, x, y) \
	{ \
		fpu_tmp = (quad_t)(x) - (quad_t)(y) - (!!fpu_carry); \
		(r) = (u_int)fpu_tmp; \
		fpu_carry = ((fpu_tmp & 0xffffffff00000000LL) != 0); \
	}

#define	FPU_GET_CARRY(r) (r) = (!!fpu_carry)
#define	FPU_SET_CARRY(v) fpu_carry = ((v) != 0)

#else

/* set up for extended-precision arithmetic */
#define	FPU_DECL_CARRY int fpu_tmp;

/*
 * We have three kinds of add:
 *	add with carry:					  r = x + y + c
 *	add (ignoring current carry) and set carry:	c'r = x + y + 0
 *	add with carry and set carry:			c'r = x + y + c
 * The macros use `C' for `use carry' and `S' for `set carry'.
 * Note that the state of the carry is undefined after ADDC and SUBC,
 * so if all you have for these is `add with carry and set carry',
 * that is OK.
 *
 * The same goes for subtract, except that we compute x - y - c.
 *
 * Finally, we have a way to get the carry into a `regular' variable,
 * or set it from a value.  SET_CARRY turns 0 into no-carry, nonzero
 * into carry; GET_CARRY sets its argument to 0 or 1.
 */
#define	FPU_ADDC(r, x, y)						\
	{								\
		asm volatile("movel %1,%0" : "=d"(fpu_tmp) : "g"(x));	\
		asm volatile("addxl %1,%0" : "=d"(fpu_tmp) : "d"(y));	\
		asm volatile("movel %1,%0" : "=g"(r) : "r"(fpu_tmp));	\
	}
#define	FPU_ADDS(r, x, y)						\
	{								\
		asm volatile("movel %1,%0" : "=d"(fpu_tmp) : "g"(x));	\
		asm volatile("addl %1,%0" : "=d"(fpu_tmp) : "g"(y));	\
		asm volatile("movel %1,%0" : "=g"(r) : "r"(fpu_tmp));	\
	}
#define	FPU_ADDCS(r, x, y) FPU_ADDC(r, x, y)

#define	FPU_SUBC(r, x, y)						\
	{								\
		asm volatile("movel %1,%0" : "=d"(fpu_tmp) : "g"(x));	\
		asm volatile("subxl %1,%0" : "=d"(fpu_tmp) : "d"(y));	\
		asm volatile("movel %1,%0" : "=g"(r) : "r"(fpu_tmp));	\
	}
#define	FPU_SUBS(r, x, y)						\
	{								\
		asm volatile("movel %1,%0" : "=d"(fpu_tmp) : "g"(x));	\
		asm volatile("subl %1,%0" : "=d"(fpu_tmp) : "g"(y));	\
		asm volatile("movel %1,%0" : "=g"(r) : "r"(fpu_tmp));	\
	}
#define	FPU_SUBCS(r, x, y) FPU_SUBC(r, x, y)

#define	FPU_GET_CARRY(r)				\
	{						\
		asm volatile("moveq #0,%0" : "=d"(r));	\
		asm volatile("addxl %0,%0" : "+d"(r));	\
	}
#define	FPU_SET_CARRY(v)						\
	{								\
		asm volatile("moveq #0,%0" : "=d"(fpu_tmp));		\
		asm volatile("subl %1,%0" : "=d"(fpu_tmp) : "g"(v));	\
	}

#endif /* FPE_USE_ASM */
@


1.5
log
@arithemtic -> arithmetic
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_arith.h,v 1.4 2006/01/16 22:08:26 miod Exp $	*/
@


1.4
log
@Sync m68k fpe code with NetBSD; but remove unimplemented opcodes stubs, so
that we trigger SIGILL instead of propagating false results.

Tested by martin@@ on Macintosh LCIII.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d60 1
a60 1
/* set up for extended-precision arithemtic */
d113 1
a113 1
/* set up for extended-precision arithemtic */
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: fpu_arith.h,v 1.2 1996/05/29 21:05:14 niklas Exp $ */
/*	$NetBSD: fpu_arith.h,v 1.1 1995/11/03 04:46:59 briggs Exp $ */
d58 1
a58 1
#ifdef sparc
d61 1
a61 1
#define	FPU_DECL_CARRY
d80 1
a80 1
	asm volatile("addx %1,%2,%0" : "=r"(r) : "r"(x), "r"(y))
d82 5
a86 1
	asm volatile("addcc %1,%2,%0" : "=r"(r) : "r"(x), "r"(y))
d88 5
a92 1
	asm volatile("addxcc %1,%2,%0" : "=r"(r) : "r"(x), "r"(y))
d94 1
a94 1
	asm volatile("subx %1,%2,%0" : "=r"(r) : "r"(x), "r"(y))
d96 5
a100 1
	asm volatile("subcc %1,%2,%0" : "=r"(r) : "r"(x), "r"(y))
d102 5
a106 1
	asm volatile("subxcc %1,%2,%0" : "=r"(r) : "r"(x), "r"(y))
d108 2
a109 2
#define	FPU_GET_CARRY(r) asm volatile("addx %%g0,%%g0,%0" : "=r"(r))
#define	FPU_SET_CARRY(v) asm volatile("addcc %0,-1,%%g0" : : "r"(v))
d111 1
a111 3
#define	FPU_SHL1_BY_ADD	/* shift left 1 faster by ADDC than (a<<1)|(b>>31) */

#else /* non sparc */
d114 1
a114 1
#define	FPU_DECL_CARRY quad_t fpu_carry, fpu_tmp;
d132 5
a136 7
#define	FPU_ADDC(r, x, y) \
	(r) = (x) + (y) + (!!fpu_carry)
#define	FPU_ADDS(r, x, y) \
	{ \
		fpu_tmp = (quad_t)(x) + (quad_t)(y); \
		(r) = (u_int)fpu_tmp; \
		fpu_carry = ((fpu_tmp & 0xffffffff00000000LL) != 0); \
d138 5
a142 5
#define	FPU_ADDCS(r, x, y) \
	{ \
		fpu_tmp = (quad_t)(x) + (quad_t)(y) + (!!fpu_carry); \
		(r) = (u_int)fpu_tmp; \
		fpu_carry = ((fpu_tmp & 0xffffffff00000000LL) != 0); \
d144 7
a150 7
#define	FPU_SUBC(r, x, y) \
	(r) = (x) - (y) - (!!fpu_carry)
#define	FPU_SUBS(r, x, y) \
	{ \
		fpu_tmp = (quad_t)(x) - (quad_t)(y); \
		(r) = (u_int)fpu_tmp; \
		fpu_carry = ((fpu_tmp & 0xffffffff00000000LL) != 0); \
d152 5
a156 5
#define	FPU_SUBCS(r, x, y) \
	{ \
		fpu_tmp = (quad_t)(x) - (quad_t)(y) - (!!fpu_carry); \
		(r) = (u_int)fpu_tmp; \
		fpu_carry = ((fpu_tmp & 0xffffffff00000000LL) != 0); \
d158 1
d160 10
a169 2
#define	FPU_GET_CARRY(r) (r) = (!!fpu_carry)
#define	FPU_SET_CARRY(v) fpu_carry = ((v) != 0)
d171 1
a171 1
#endif
@


1.2
log
@$OpenBSD$ additions
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_arith.h,v 1.1 1995/11/03 04:46:59 briggs Exp $ */
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2.16.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_arith.h,v 1.2 1996/05/29 21:05:14 niklas Exp $ */
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@from netbsd:
Still incomplete, but much more complete FPE from Ken Nakata
<kenn@@remus.rutgers.edu>.  This emulator does not yet emulate
the following functions:
        FSINH, FETOXM1, FTANH, FATAN, FASIN, FATANH, FSIN, FTAN,
        FETOX, FTWOTOX, FTENTOX, FCOSH, FACOS, FCOS, FSINCOS
It is sufficient, however, to allow programs like df, w, and newfs,
to run to completion with correct results.
Portions of this code were based on the sparc fpe and on initial
work by gwr.
@
text
@d1 1
@
