head	1.6;
access;
symbols
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.10
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.8
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.6
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.32
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.30
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.28
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2013.03.25.19.08.56;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2006.06.11.20.43.28;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.16.22.08.26;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.23.27.48;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.05.09.22.20.48;	author niklas;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.12.14.04.53.15;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2003.06.07.11.11.38;	author ho;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove the m68k FPU emulator; it was only used by the mac68k port which has been
lying in the Attic for quite awhile; none of the remaining m68k-based ports
support FPU-less systems; assuming my HP332 cpu board is in working condition,
give me memory boards for it to have at least 8MB and a chassis, and I'll
consider bringing this code back. But then, the 332 has an FPU socket, and
I'd rather write a new glue to use the MI softloat code (bug-free) than try
and fix the bugs in this.
@
text
@/*	$OpenBSD: fpu_subr.c,v 1.5 2006/06/11 20:43:28 miod Exp $	*/
/*	$NetBSD: fpu_subr.c,v 1.6 2003/08/07 16:28:12 agc Exp $ */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)fpu_subr.c	8.1 (Berkeley) 6/11/93
 */

/*
 * FPU subroutines.
 */

#include <sys/types.h>
#include <sys/systm.h>

#include <machine/reg.h>

#include <m68k/fpe/fpu_emulate.h>
#include <m68k/fpe/fpu_arith.h>

/*
 * Shift the given number right rsh bits.  Any bits that `fall off' will get
 * shoved into the sticky field; we return the resulting sticky.  Note that
 * shifting NaNs is legal (this will never shift all bits out); a NaN's
 * sticky field is ignored anyway.
 */
int
fpu_shr(struct fpn *fp, int rsh)
{
	u_int m0, m1, m2, s;
	int lsh;

#ifdef DIAGNOSTIC
	if (rsh < 0 || (fp->fp_class != FPC_NUM && !ISNAN(fp)))
		panic("fpu_rightshift 1");
#endif

	m0 = fp->fp_mant[0];
	m1 = fp->fp_mant[1];
	m2 = fp->fp_mant[2];

	/* If shifting all the bits out, take a shortcut. */
	if (rsh >= FP_NMANT) {
#ifdef DIAGNOSTIC
		if ((m0 | m1 | m2) == 0)
			panic("fpu_rightshift 2");
#endif
		fp->fp_mant[0] = 0;
		fp->fp_mant[1] = 0;
		fp->fp_mant[2] = 0;
#ifdef notdef
		if ((m0 | m1 | m2) == 0)
			fp->fp_class = FPC_ZERO;
		else
#endif
			fp->fp_sticky = 1;
		return (1);
	}

	/* Squish out full words. */
	s = fp->fp_sticky;
	if (rsh >= 32 * 2) {
		s |= m2 | m1;
		m2 = m0, m1 = 0, m0 = 0;
	} else if (rsh >= 32) {
		s |= m2;
		m2 = m1, m1 = m0, m0 = 0;
	}

	/* Handle any remaining partial word. */
	if ((rsh &= 31) != 0) {
		lsh = 32 - rsh;
		s |= m2 << lsh;
		m2 = (m2 >> rsh) | (m1 << lsh);
		m1 = (m1 >> rsh) | (m0 << lsh);
		m0 >>= rsh;
	}
	fp->fp_mant[0] = m0;
	fp->fp_mant[1] = m1;
	fp->fp_mant[2] = m2;
	fp->fp_sticky = s;
	return (s);
}

/*
 * Force a number to be normal, i.e., make its fraction have all zero
 * bits before FP_1, then FP_1, then all 1 bits.  This is used for denorms
 * and (sometimes) for intermediate results.
 *
 * Internally, this may use a `supernormal' -- a number whose fp_mant
 * is greater than or equal to 2.0 -- so as a side effect you can hand it
 * a supernormal and it will fix it (provided fp->fp_mant[2] == 0).
 */
void
fpu_norm(struct fpn *fp)
{
	u_int m0, m1, m2, sup, nrm;
	int lsh, rsh, exp;

	exp = fp->fp_exp;
	m0 = fp->fp_mant[0];
	m1 = fp->fp_mant[1];
	m2 = fp->fp_mant[2];

	/* Handle severe subnormals with 32-bit moves. */
	if (m0 == 0) {
		if (m1) {
			m0 = m1;
			m1 = m2;
			m2 = 0;
			exp -= 32;
		} else if (m2) {
			m0 = m2;
			m1 = 0;
			m2 = 0;
			exp -= 2 * 32;
		} else {
			fp->fp_class = FPC_ZERO;
			return;
		}
	}

	/* Now fix any supernormal or remaining subnormal. */
	nrm = FP_1;
	sup = nrm << 1;
	if (m0 >= sup) {
		/*
		 * We have a supernormal number.  We need to shift it right.
		 * We may assume m2==0.
		 */
		__asm __volatile("bfffo %1{#0:#32},%0" : "=d"(rsh) : "g"(m0));
		rsh = 31 - rsh - FP_LG;
		exp += rsh;
		lsh = 32 - rsh;
		m2 = m1 << lsh;
		m1 = (m1 >> rsh) | (m0 << lsh);
		m0 = (m0 >> rsh);
	} else if (m0 < nrm) {
		/*
		 * We have a regular denorm (a subnormal number), and need
		 * to shift it left.
		 */
		__asm __volatile("bfffo %1{#0:#32},%0" : "=d"(lsh) : "g"(m0));
		lsh = FP_LG - 31 + lsh;
		exp -= lsh;
		rsh = 32 - lsh;
		m0 = (m0 << lsh) | (m1 >> rsh);
		m1 = (m1 << lsh) | (m2 >> rsh);
		m2 <<= lsh;
	}

	fp->fp_exp = exp;
	fp->fp_mant[0] = m0;
	fp->fp_mant[1] = m1;
	fp->fp_mant[2] = m2;
}

/*
 * Concoct a `fresh' Quiet NaN per Appendix N.
 * As a side effect, we set OPERR for the current exceptions.
 */
struct fpn *
fpu_newnan(struct fpemu *fe)
{
	struct fpn *fp;

	fe->fe_fpsr |= FPSR_OPERR;
	fp = &fe->fe_f3;
	fp->fp_class = FPC_QNAN;
	fp->fp_sign = 0;
	fp->fp_mant[0] = FP_1 - 1;
	fp->fp_mant[1] = fp->fp_mant[2] = ~0;
	return (fp);
}
@


1.5
log
@Use bracketed include paths.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_subr.c,v 1.4 2006/01/16 22:08:26 miod Exp $	*/
@


1.4
log
@Sync m68k fpe code with NetBSD; but remove unimplemented opcodes stubs, so
that we trigger SIGILL instead of propagating false results.

Tested by martin@@ on Macintosh LCIII.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 2
a54 2
#include "fpu_emulate.h"
#include "fpu_arith.h"
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 2
a2 2
/*	$OpenBSD: fpu_subr.c,v 1.2 1996/05/09 22:20:48 niklas Exp $	*/
/*	$NetBSD: fpu_subr.c,v 1.2 1996/04/30 11:52:38 briggs Exp $ */
d63 1
a63 1
fpu_shr(register struct fpn *fp, register int rsh)
d65 2
a66 2
	register u_int m0, m1, m2, m3, s;
	register int lsh;
d69 1
a69 1
	if (rsh <= 0 || (fp->fp_class != FPC_NUM && !ISNAN(fp)))
a75 1
	m3 = fp->fp_mant[3];
d80 1
a80 1
		if ((m0 | m1 | m2 | m3) == 0)
a85 1
		fp->fp_mant[3] = 0;
d87 1
a87 1
		if ((m0 | m1 | m2 | m3) == 0)
d97 3
a99 6
	if (rsh >= 32 * 3) {
		s |= m3 | m2 | m1;
		m3 = m0, m2 = 0, m1 = 0, m0 = 0;
	} else if (rsh >= 32 * 2) {
		s |= m3 | m2;
		m3 = m1, m2 = m0, m1 = 0, m0 = 0;
d101 2
a102 2
		s |= m3;
		m3 = m2, m2 = m1, m1 = m0, m0 = 0;
d108 1
a108 2
		s |= m3 << lsh;
		m3 = (m3 >> rsh) | (m2 << lsh);
a115 1
	fp->fp_mant[3] = m3;
d127 1
a127 1
 * a supernormal and it will fix it (provided fp->fp_mant[3] == 0).
d130 1
a130 1
fpu_norm(register struct fpn *fp)
d132 2
a133 2
	register u_int m0, m1, m2, m3, top, sup, nrm;
	register int lsh, rsh, exp;
a138 1
	m3 = fp->fp_mant[3];
d142 11
a152 7
		if (m1)
			m0 = m1, m1 = m2, m2 = m3, m3 = 0, exp -= 32;
		else if (m2)
			m0 = m2, m1 = m3, m2 = 0, m3 = 0, exp -= 2 * 32;
		else if (m3)
			m0 = m3, m1 = 0, m2 = 0, m3 = 0, exp -= 3 * 32;
		else {
d164 1
a164 1
		 * We may assume m3==0.
d166 2
a167 2
		for (rsh = 1, top = m0 >> 1; top >= sup; rsh++)	/* XXX slow */
			top >>= 1;
d170 1
a170 2
		m3 = m2 << lsh;
		m2 = (m2 >> rsh) | (m1 << lsh);
d172 1
a172 1
		m0 = top;
d178 2
a179 2
		for (lsh = 1, top = m0 << 1; top < nrm; lsh++)	/* XXX slow */
			top <<= 1;
d182 1
a182 1
		m0 = top | (m1 >> rsh);
d184 1
a184 2
		m2 = (m2 << lsh) | (m3 >> rsh);
		m3 <<= lsh;
a190 1
	fp->fp_mant[3] = m3;
d198 1
a198 1
fpu_newnan(register struct fpemu *fe)
d200 1
a200 1
	register struct fpn *fp;
d207 1
a207 1
	fp->fp_mant[1] = fp->fp_mant[2] = fp->fp_mant[3] = ~0;
@


1.2
log
@From NetBSD:
Update for -Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized.
Bring back Step9 and fix an oversight from Ken Nakata <kenn@@remus.rutgers.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d25 1
a25 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2.16.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_subr.c,v 1.2 1996/05/09 22:20:48 niklas Exp $	*/
d25 5
a29 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@from netbsd:
Still incomplete, but much more complete FPE from Ken Nakata
<kenn@@remus.rutgers.edu>.  This emulator does not yet emulate
the following functions:
        FSINH, FETOXM1, FTANH, FATAN, FASIN, FATANH, FSIN, FTAN,
        FETOX, FTWOTOX, FTENTOX, FCOSH, FACOS, FCOS, FSINCOS
It is sufficient, however, to allow programs like df, w, and newfs,
to run to completion with correct results.
Portions of this code were based on the sparc fpe and on initial
work by gwr.
@
text
@d1 2
a2 1
/*	$NetBSD: fpu_subr.c,v 1.1 1995/11/03 04:47:19 briggs Exp $ */
d53 1
@
