head	1.8;
access;
symbols
	OPENBSD_5_3:1.7.0.28
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.26
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.24
	OPENBSD_5_0:1.7.0.22
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.20
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.18
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.14
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.4.0.16
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.14
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.26
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.24
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.22
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.8
date	2013.03.25.19.08.56;	author miod;	state dead;
branches;
next	1.7;

1.7
date	2006.06.11.20.43.28;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.30.21.23.22;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.16.22.08.26;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.26.34;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.05.09.22.20.44;	author niklas;	state Exp;
branches
	1.3.16.1
	1.3.26.1;
next	1.2;

1.2
date	96.01.12.21.15.05;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.04.53.07;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2002.03.28.10.34.04;	author niklas;	state Exp;
branches;
next	;

1.3.26.1
date	2002.06.11.03.36.06;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove the m68k FPU emulator; it was only used by the mac68k port which has been
lying in the Attic for quite awhile; none of the remaining m68k-based ports
support FPU-less systems; assuming my HP332 cpu board is in working condition,
give me memory boards for it to have at least 8MB and a chassis, and I'll
consider bringing this code back. But then, the 332 has an FPU socket, and
I'd rather write a new glue to use the MI softloat code (bug-free) than try
and fix the bugs in this.
@
text
@/*	$OpenBSD: fpu_emulate.h,v 1.7 2006/06/11 20:43:28 miod Exp $	*/
/*	$NetBSD: fpu_emulate.h,v 1.11 2005/08/13 05:38:45 he Exp $	*/

/*
 * Copyright (c) 1995 Gordon Ross
 * Copyright (c) 1995 Ken Nakata
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Gordon Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _FPU_EMULATE_H_
#define _FPU_EMULATE_H_

#include <sys/types.h>

/*
 * Floating point emulator (tailored for SPARC/modified for m68k, but
 * structurally machine-independent).
 *
 * Floating point numbers are carried around internally in an `expanded'
 * or `unpacked' form consisting of:
 *	- sign
 *	- unbiased exponent
 *	- mantissa (`1.' + 80-bit fraction + guard + round)
 *	- sticky bit
 * Any implied `1' bit is inserted, giving a 81-bit mantissa that is
 * always nonzero.  Additional low-order `guard' and `round' bits are
 * scrunched in, making the entire mantissa 83 bits long.  This is divided
 * into three 32-bit words, with `spare' bits left over in the upper part
 * of the top word (the high bits of fp_mant[0]).  An internal `exploded'
 * number is thus kept within the half-open interval [1.0,2.0) (but see
 * the `number classes' below).  This holds even for denormalized numbers:
 * when we explode an external denorm, we normalize it, introducing low-order
 * zero bits, so that the rest of the code always sees normalized values.
 *
 * Note that a number of our algorithms use the `spare' bits at the top.
 * The most demanding algorithm---the one for sqrt---depends on two such
 * bits, so that it can represent values up to (but not including) 8.0,
 * and then it needs a carry on top of that, so that we need three `spares'.
 *
 * The sticky-word is 32 bits so that we can use `OR' operators to goosh
 * whole words from the mantissa into it.
 *
 * All operations are done in this internal extended precision.  According
 * to Hennesey & Patterson, Appendix A, rounding can be repeated---that is,
 * it is OK to do a+b in extended precision and then round the result to
 * single precision---provided single, double, and extended precisions are
 * `far enough apart' (they always are), but we will try to avoid any such
 * extra work where possible.
 */
struct fpn {
	int	fp_class;		/* see below */
	int	fp_sign;		/* 0 => positive, 1 => negative */
	int	fp_exp;			/* exponent (unbiased) */
	int	fp_sticky;		/* nonzero bits lost at right end */
	u_int	fp_mant[3];		/* 83-bit mantissa */
};

#define	FP_NMANT	83		/* total bits in mantissa (incl g,r) */
#define	FP_NG		2		/* number of low-order guard bits */
#define	FP_LG		((FP_NMANT - 1) & 31)	/* log2(1.0) for fp_mant[0] */
#define	FP_QUIETBIT	(1 << (FP_LG - 1))	/* Quiet bit in NaNs (0.5) */
#define	FP_1		(1 << FP_LG)		/* 1.0 in fp_mant[0] */
#define	FP_2		(1 << (FP_LG + 1))	/* 2.0 in fp_mant[0] */

#define CPYFPN(dst, src)						\
if ((dst) != (src)) {							\
    (dst)->fp_class = (src)->fp_class;					\
    (dst)->fp_sign = (src)->fp_sign;					\
    (dst)->fp_exp = (src)->fp_exp;					\
    (dst)->fp_sticky = (src)->fp_sticky;				\
    (dst)->fp_mant[0] = (src)->fp_mant[0];				\
    (dst)->fp_mant[1] = (src)->fp_mant[1];				\
    (dst)->fp_mant[2] = (src)->fp_mant[2];				\
}

/*
 * Number classes.  Since zero, Inf, and NaN cannot be represented using
 * the above layout, we distinguish these from other numbers via a class.
 */
#define	FPC_SNAN	-2		/* signalling NaN (sign irrelevant) */
#define	FPC_QNAN	-1		/* quiet NaN (sign irrelevant) */
#define	FPC_ZERO	0		/* zero (sign matters) */
#define	FPC_NUM		1		/* number (sign matters) */
#define	FPC_INF		2		/* infinity (sign matters) */

#define	ISNAN(fp)	((fp)->fp_class < 0)
#define	ISZERO(fp)	((fp)->fp_class == 0)
#define	ISINF(fp)	((fp)->fp_class == FPC_INF)

/*
 * ORDER(x,y) `sorts' a pair of `fpn *'s so that the right operand (y) points
 * to the `more significant' operand for our purposes.  Appendix N says that
 * the result of a computation involving two numbers are:
 *
 *	If both are SNaN: operand 2, converted to Quiet
 *	If only one is SNaN: the SNaN operand, converted to Quiet
 *	If both are QNaN: operand 2
 *	If only one is QNaN: the QNaN operand
 *
 * In addition, in operations with an Inf operand, the result is usually
 * Inf.  The class numbers are carefully arranged so that if
 *	(unsigned)class(op1) > (unsigned)class(op2)
 * then op1 is the one we want; otherwise op2 is the one we want.
 */
#define	ORDER(x, y) { \
	if ((u_int)(x)->fp_class > (u_int)(y)->fp_class) \
		SWAP(x, y); \
}
#define	SWAP(x, y) {				\
	struct fpn *swap;			\
	swap = (x), (x) = (y), (y) = swap;	\
}

/*
 * Emulator state.
 */
struct fpemu {
    struct	frame *fe_frame; /* integer regs, etc */
    struct	fpframe *fe_fpframe; /* FP registers, etc */
    u_int	fe_fpsr;	/* fpsr copy (modified during op) */
    u_int	fe_fpcr;	/* fpcr copy */
    struct	fpn fe_f1;	/* operand 1 */
    struct	fpn fe_f2;	/* operand 2, if required */
    struct	fpn fe_f3;	/* available storage for result */
};

/*****************************************************************************
 * End of definitions derived from Sparc FPE
 *****************************************************************************/

/*
 * Internal info about a decoded effective address.
 */
struct insn_ea {
    int	ea_regnum;
    int	ea_ext[3];		/* extension words if any */
    int	ea_flags;		/* flags == 0 means mode 2: An@@ */
#define	EA_DIRECT	0x001	/* mode [01]: Dn or An */
#define EA_PREDECR	0x002	/* mode 4: An@@- */
#define	EA_POSTINCR	0x004	/* mode 3: An@@+ */
#define EA_OFFSET	0x008	/* mode 5 or (7,2): APC@@(d16) */
#define	EA_INDEXED	0x010	/* mode 6 or (7,3): APC@@(Xn:*:*,d8) etc */
#define EA_ABS  	0x020	/* mode (7,[01]): abs */
#define EA_PC_REL	0x040	/* mode (7,[23]): PC@@(d16) etc */
#define	EA_IMMED	0x080	/* mode (7,4): #immed */
#define EA_MEM_INDIR	0x100	/* mode 6 or (7,3): APC@@(Xn:*:*,*)@@(*) etc */
#define EA_BASE_SUPPRSS	0x200	/* mode 6 or (7,3): base register suppressed */
#define EA_FRAME_EA	0x400	/* MC68LC040 only: precalculated EA from
				   format 4 stack frame */
    int	ea_moffs;		/* offset used for fmoveMulti */
};

#define ea_offset	ea_ext[0]	/* mode 5: offset word */
#define ea_absaddr	ea_ext[0]	/* mode (7,[01]): absolute address */
#define ea_immed	ea_ext		/* mode (7,4): immediate value */
#define ea_basedisp	ea_ext[0]	/* mode 6: base displacement */
#define ea_outerdisp	ea_ext[1]	/* mode 6: outer displacement */
#define	ea_idxreg	ea_ext[2]	/* mode 6: index register number */
#define ea_fea		ea_ext[0]	/* MC68LC040 only: frame EA */

struct instruction {
    u_int		is_pc;		/* insn's address */
    u_int		is_nextpc;	/* next PC */
    int			is_advance;	/* length of instruction */
    int			is_datasize;	/* size of memory operand */
    int			is_opcode;	/* opcode word */
    int			is_word1;	/* second word */
    struct insn_ea	is_ea;	/* decoded effective address mode */
};

/*
 * FP data types
 */
#define FTYPE_LNG 0 /* Long Word Integer */
#define FTYPE_SNG 1 /* Single Prec */
#define FTYPE_EXT 2 /* Extended Prec */
#define FTYPE_BCD 3 /* Packed BCD */
#define FTYPE_WRD 4 /* Word Integer */
#define FTYPE_DBL 5 /* Double Prec */
#define FTYPE_BYT 6 /* Byte Integer */

/*
 * MC68881/68882 FPcr bit definitions (should these go to <m68k/reg.h>
 * or <m68k/fpu.h> or something?)
 */

/* fpsr */
#define FPSR_CCB    0xff000000
# define FPSR_NEG   0x08000000
# define FPSR_ZERO  0x04000000
# define FPSR_INF   0x02000000
# define FPSR_NAN   0x01000000
#define FPSR_QTT    0x00ff0000
# define FPSR_QSG   0x00800000
# define FPSR_QUO   0x007f0000
#define FPSR_EXCP   0x0000ff00
# define FPSR_BSUN  0x00008000
# define FPSR_SNAN  0x00004000
# define FPSR_OPERR 0x00002000
# define FPSR_OVFL  0x00001000
# define FPSR_UNFL  0x00000800
# define FPSR_DZ    0x00000400
# define FPSR_INEX2 0x00000200
# define FPSR_INEX1 0x00000100
#define FPSR_AEX    0x000000ff
# define FPSR_AIOP  0x00000080
# define FPSR_AOVFL 0x00000040
# define FPSR_AUNFL 0x00000020
# define FPSR_ADZ   0x00000010
# define FPSR_AINEX 0x00000008

/* fpcr */
#define FPCR_EXCP   FPSR_EXCP
# define FPCR_BSUN  FPSR_BSUN
# define FPCR_SNAN  FPSR_SNAN
# define FPCR_OPERR FPSR_OPERR
# define FPCR_OVFL  FPSR_OVFL
# define FPCR_UNFL  FPSR_UNFL
# define FPCR_DZ    FPSR_DZ
# define FPCR_INEX2 FPSR_INEX2
# define FPCR_INEX1 FPSR_INEX1
#define FPCR_MODE   0x000000ff
# define FPCR_PREC  0x000000c0
#  define FPCR_EXTD 0x00000000
#  define FPCR_SNGL 0x00000040
#  define FPCR_DBL  0x00000080
# define FPCR_ROUND 0x00000030
#  define FPCR_NEAR 0x00000000
#  define FPCR_ZERO 0x00000010
#  define FPCR_MINF 0x00000020
#  define FPCR_PINF 0x00000030

/*
 * Other functions.
 */

/* Build a new Quiet NaN (sign=0, frac=all 1's). */
struct	fpn *fpu_newnan(struct fpemu *fe);

/*
 * Shift a number right some number of bits, taking care of round/sticky.
 * Note that the result is probably not a well-formed number (it will lack
 * the normal 1-bit mant[0]&FP_1).
 */
int	fpu_shr(struct fpn *fp, int shr);
/*
 * Round a number according to the round mode in FPCR
 */
int	fpu_round(struct fpemu *fe, struct fpn *fp);

/* type conversion */
void	fpu_explode(struct fpemu *fe, struct fpn *fp, int t, u_int *src);
void	fpu_implode(struct fpemu *fe, struct fpn *fp, int t, u_int *dst);

/*
 * non-static emulation functions
 */
/* type 0 */
int fpu_emul_fmovecr(struct fpemu *fe, struct instruction *insn, int *typ);
int fpu_emul_fstore(struct fpemu *fe, struct instruction *insn, int *typ);
int fpu_emul_fscale(struct fpemu *fe, struct instruction *insn, int *typ);

/*
 * include function declarations of those which are called by fpu_emul_arith()
 */
#include <m68k/fpe/fpu_arith_proto.h>

int fpu_emulate(struct frame *frame, struct fpframe *fpf, int *typ);

/*
 * "helper" functions
 */
/* return values from constant rom */
struct fpn *fpu_const(struct fpn *fp, u_int offset);
/* update exceptions and FPSR */
int fpu_upd_excp(struct fpemu *fe);
u_int fpu_upd_fpsr(struct fpemu *fe, struct fpn *fp) ;

/* address mode decoder, and load/store */
int fpu_decode_ea(struct frame *frame, struct instruction *insn,
		   struct insn_ea *ea, int modreg, int *typ);
int fpu_load_ea(struct frame *frame, struct instruction *insn,
		 struct insn_ea *ea, char *dst, int *typ);
int fpu_store_ea(struct frame *frame, struct instruction *insn,
		  struct insn_ea *ea, char *src);

/* fpu_subr.c */
void fpu_norm(struct fpn *fp);

#if !defined(FPE_DEBUG)
#  define FPE_DEBUG 0
#endif

#endif /* _FPU_EMULATE_H_ */
@


1.7
log
@Use bracketed include paths.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_emulate.h,v 1.6 2006/01/30 21:23:22 miod Exp $	*/
@


1.6
log
@Better siginfo field values for fpe failures.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_emulate.h,v 1.5 2006/01/16 22:08:26 miod Exp $	*/
d291 1
a291 1
#include "fpu_arith_proto.h"
@


1.5
log
@Sync m68k fpe code with NetBSD; but remove unimplemented opcodes stubs, so
that we trigger SIGILL instead of propagating false results.

Tested by martin@@ on Macintosh LCIII.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d284 3
a286 3
int fpu_emul_fmovecr(struct fpemu *fe, struct instruction *insn);
int fpu_emul_fstore(struct fpemu *fe, struct instruction *insn);
int fpu_emul_fscale(struct fpemu *fe, struct instruction *insn);
d293 1
a293 1
int fpu_emulate(struct frame *frame, struct fpframe *fpf);
d302 1
a302 1
u_int fpu_upd_fpsr(struct fpemu *fe, struct fpn *fp);
d306 1
a306 1
		   struct insn_ea *ea, int modreg);
d308 1
a308 1
		 struct insn_ea *ea, char *dst);
@


1.4
log
@First round of __P removal in sys
@
text
@d1 2
a2 2
/*	$OpenBSD: fpu_emulate.h,v 1.3 1996/05/09 22:20:44 niklas Exp $	*/
/*	$NetBSD: fpu_emulate.h,v 1.4 1996/04/30 11:52:14 briggs Exp $	*/
d48 1
a48 1
 *	- mantissa (`1.' + 112-bit fraction + guard + round)
d50 1
a50 1
 * Any implied `1' bit is inserted, giving a 113-bit mantissa that is
d52 2
a53 2
 * scrunched in, making the entire mantissa 115 bits long.  This is divided
 * into four 32-bit words, with `spare' bits left over in the upper part
d80 1
a80 1
	u_int	fp_mant[4];		/* 115-bit mantissa */
d83 1
a83 1
#define	FP_NMANT	115		/* total bits in mantissa (incl g,r) */
a98 1
    (dst)->fp_mant[3] = (src)->fp_mant[3];				\
d135 1
a135 1
	register struct fpn *swap;		\
d161 1
a161 1
    int	ea_ext[3];		/* extention words if any */
d173 3
a175 1
    int	ea_tdisp;		/* temp. displ. used to xfer many words */
d184 1
d187 7
a193 5
    int		is_advance;	/* length of instruction */
    int		is_datasize;	/* byte, word, long, float, double, ... */
    int		is_opcode;	/* opcode word */
    int		is_word1;	/* second word */
    struct	insn_ea	is_ea0;	/* decoded effective address mode */
d270 1
a270 1
int	fpu_shr(struct fpn * fp, int shr);
d274 1
a274 1
int	round(register struct fpemu *fe, register struct fpn *fp);
d313 1
a313 1
void fpu_norm(register struct fpn *fp);
d315 3
a317 28
/* declarations for debugging */

extern int fpu_debug_level;

/* debug classes */
#define DL_DUMPINSN 0x0001
#define DL_DECODEEA 0x0002
#define DL_LOADEA   0x0004
#define DL_STOREEA  0x0008
#define DL_OPERANDS 0x0010
#define DL_RESULT   0x0020
#define DL_TESTCC   0x0040
#define DL_BRANCH   0x0080
#define DL_FSTORE   0x0100
#define DL_FSCALE   0x0200
#define DL_ARITH    0x0400
#define DL_INSN     0x0800
#define DL_FMOVEM   0x1000
/* not defined yet
#define DL_2000     0x2000
#define DL_4000     0x4000
*/
#define DL_VERBOSE  0x8000
/* composit debug classes */
#define DL_EA       (DL_DECODEEA|DL_LOADEA|DL_STOREEA)
#define DL_VALUES   (DL_OPERANDS|DL_RESULT)
#define DL_COND     (DL_TESTCC|DL_BRANCH)
#define DL_ALL      0xffff
@


1.3
log
@From NetBSD:
Update for -Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized.
Bring back Step9 and fix an oversight from Ken Nakata <kenn@@remus.rutgers.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d259 1
a259 1
struct	fpn *fpu_newnan __P((struct fpemu *fe));
d266 1
a266 1
int	fpu_shr __P((struct fpn * fp, int shr));
d270 1
a270 1
int	round __P((register struct fpemu *fe, register struct fpn *fp));
d273 2
a274 2
void	fpu_explode __P((struct fpemu *fe, struct fpn *fp, int t, u_int *src));
void	fpu_implode __P((struct fpemu *fe, struct fpn *fp, int t, u_int *dst));
d280 3
a282 3
int fpu_emul_fmovecr __P((struct fpemu *fe, struct instruction *insn));
int fpu_emul_fstore __P((struct fpemu *fe, struct instruction *insn));
int fpu_emul_fscale __P((struct fpemu *fe, struct instruction *insn));
d289 1
a289 1
int fpu_emulate __P((struct frame *frame, struct fpframe *fpf));
d295 1
a295 1
struct fpn *fpu_const __P((struct fpn *fp, u_int offset));
d297 2
a298 2
int fpu_upd_excp __P((struct fpemu *fe));
u_int fpu_upd_fpsr __P((struct fpemu *fe, struct fpn *fp));
d301 6
a306 6
int fpu_decode_ea __P((struct frame *frame, struct instruction *insn,
		   struct insn_ea *ea, int modreg));
int fpu_load_ea __P((struct frame *frame, struct instruction *insn,
		 struct insn_ea *ea, char *dst));
int fpu_store_ea __P((struct frame *frame, struct instruction *insn,
		  struct insn_ea *ea, char *src));
d309 1
a309 1
void fpu_norm __P((register struct fpn *fp));
@


1.3.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_emulate.h,v 1.3 1996/05/09 22:20:44 niklas Exp $	*/
d259 1
a259 1
struct	fpn *fpu_newnan(struct fpemu *fe);
d266 1
a266 1
int	fpu_shr(struct fpn * fp, int shr);
d270 1
a270 1
int	round(register struct fpemu *fe, register struct fpn *fp);
d273 2
a274 2
void	fpu_explode(struct fpemu *fe, struct fpn *fp, int t, u_int *src);
void	fpu_implode(struct fpemu *fe, struct fpn *fp, int t, u_int *dst);
d280 3
a282 3
int fpu_emul_fmovecr(struct fpemu *fe, struct instruction *insn);
int fpu_emul_fstore(struct fpemu *fe, struct instruction *insn);
int fpu_emul_fscale(struct fpemu *fe, struct instruction *insn);
d289 1
a289 1
int fpu_emulate(struct frame *frame, struct fpframe *fpf);
d295 1
a295 1
struct fpn *fpu_const(struct fpn *fp, u_int offset);
d297 2
a298 2
int fpu_upd_excp(struct fpemu *fe);
u_int fpu_upd_fpsr(struct fpemu *fe, struct fpn *fp);
d301 6
a306 6
int fpu_decode_ea(struct frame *frame, struct instruction *insn,
		   struct insn_ea *ea, int modreg);
int fpu_load_ea(struct frame *frame, struct instruction *insn,
		 struct insn_ea *ea, char *dst);
int fpu_store_ea(struct frame *frame, struct instruction *insn,
		  struct insn_ea *ea, char *src);
d309 1
a309 1
void fpu_norm(register struct fpn *fp);
@


1.3.16.1
log
@Merge in -current from about a week ago
@
text
@d259 1
a259 1
struct	fpn *fpu_newnan(struct fpemu *fe);
d266 1
a266 1
int	fpu_shr(struct fpn * fp, int shr);
d270 1
a270 1
int	round(register struct fpemu *fe, register struct fpn *fp);
d273 2
a274 2
void	fpu_explode(struct fpemu *fe, struct fpn *fp, int t, u_int *src);
void	fpu_implode(struct fpemu *fe, struct fpn *fp, int t, u_int *dst);
d280 3
a282 3
int fpu_emul_fmovecr(struct fpemu *fe, struct instruction *insn);
int fpu_emul_fstore(struct fpemu *fe, struct instruction *insn);
int fpu_emul_fscale(struct fpemu *fe, struct instruction *insn);
d289 1
a289 1
int fpu_emulate(struct frame *frame, struct fpframe *fpf);
d295 1
a295 1
struct fpn *fpu_const(struct fpn *fp, u_int offset);
d297 2
a298 2
int fpu_upd_excp(struct fpemu *fe);
u_int fpu_upd_fpsr(struct fpemu *fe, struct fpn *fp);
d301 6
a306 6
int fpu_decode_ea(struct frame *frame, struct instruction *insn,
		   struct insn_ea *ea, int modreg);
int fpu_load_ea(struct frame *frame, struct instruction *insn,
		 struct insn_ea *ea, char *dst);
int fpu_store_ea(struct frame *frame, struct instruction *insn,
		  struct insn_ea *ea, char *src);
d309 1
a309 1
void fpu_norm(register struct fpn *fp);
@


1.2
log
@remove DEBUG
@
text
@d1 2
a2 1
/*	$NetBSD: fpu_emulate.h,v 1.3 1996/01/12 04:23:54 briggs Exp $	*/
d289 2
d307 3
@


1.1
log
@from netbsd:
Still incomplete, but much more complete FPE from Ken Nakata
<kenn@@remus.rutgers.edu>.  This emulator does not yet emulate
the following functions:
        FSINH, FETOXM1, FTANH, FATAN, FASIN, FATANH, FSIN, FTAN,
        FETOX, FTWOTOX, FTENTOX, FCOSH, FACOS, FCOS, FSINCOS
It is sufficient, however, to allow programs like df, w, and newfs,
to run to completion with correct results.
Portions of this code were based on the sparc fpe and on initial
work by gwr.
@
text
@d1 1
a1 1
/*	$NetBSD: fpu_emulate.h,v 1.2 1995/11/05 00:35:20 briggs Exp $	*/
d305 1
a305 2
/* macros for debugging */
#define	DEBUG			/* XXX */
@
