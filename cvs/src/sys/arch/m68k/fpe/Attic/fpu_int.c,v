head	1.6;
access;
symbols
	OPENBSD_5_3:1.5.0.12
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.10
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.42
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.40
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.38
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.36
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.34
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.32
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.30
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.28
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2013.03.25.19.08.56;	author miod;	state dead;
branches;
next	1.5;

1.5
date	2010.05.10.02.00.50;	author krw;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.11.20.43.28;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.16.22.08.26;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	96.05.29.21.05.16;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.04.53.12;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove the m68k FPU emulator; it was only used by the mac68k port which has been
lying in the Attic for quite awhile; none of the remaining m68k-based ports
support FPU-less systems; assuming my HP332 cpu board is in working condition,
give me memory boards for it to have at least 8MB and a chassis, and I'll
consider bringing this code back. But then, the 332 has an FPU socket, and
I'd rather write a new glue to use the MI softloat code (bug-free) than try
and fix the bugs in this.
@
text
@/*	$OpenBSD: fpu_int.c,v 1.5 2010/05/10 02:00:50 krw Exp $	*/
/*	$NetBSD: fpu_int.c,v 1.6 2003/07/15 02:43:10 lukem Exp $	*/

/*
 * Copyright (c) 1995 Ken Nakata
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)fpu_int.c
 */

#include <sys/types.h>

#include <machine/reg.h>

#include <m68k/fpe/fpu_arith.h>
#include <m68k/fpe/fpu_emulate.h>

/* FINTRZ - always round to zero */
struct fpn *
fpu_intrz(fe)
     struct fpemu *fe;
{
  struct fpn *x = &fe->fe_f2;
  int sh, clr, mask, i;

  /* special cases first */
  if (x->fp_class != FPC_NUM) {
    return x;
  }
  /* when |x| < 1.0 */
  if (x->fp_exp < 0) {
    x->fp_class = FPC_ZERO;
    x->fp_mant[0] = x->fp_mant[1] = x->fp_mant[2] = 0;
    return x;
  }

  /* real work */
  sh = FP_NMANT - 1 - x->fp_exp;
  if (sh <= 0) {
    return x;
  }

  clr = 2 - sh / 32;
  mask = (0xffffffff << (sh % 32));

  for (i = 2; i > clr; i--) {
    x->fp_mant[i] = 0;
  }
  x->fp_mant[i] &= mask;

  return x;
}

/* FINT */
struct fpn *
fpu_int(fe)
     struct fpemu *fe;
{
  struct fpn *x = &fe->fe_f2;
  int rsh, lsh, wsh, i;

  /* special cases first */
  if (x->fp_class != FPC_NUM) {
    return x;
  }
  /* even if we have exponent == -1, we still have possibility
     that the result >= 1.0 when mantissa ~= 1.0 and rounded up */
  if (x->fp_exp < -1) {
    x->fp_class = FPC_ZERO;
    x->fp_mant[0] = x->fp_mant[1] = x->fp_mant[2] = 0;
    return x;
  }

  /* real work */
  rsh = FP_NMANT - 1 - x->fp_exp;
  if (rsh - FP_NG <= 0) {
    return x;
  }

  fpu_shr(x, rsh - FP_NG);	/* shift to the right */

  if (fpu_round(fe, x) == 1 /* rounded up */ &&
      x->fp_mant[2 - (FP_NMANT-rsh)/32] & (1 << ((FP_NMANT-rsh)%32))
      /* x >= 2.0 */) {
    rsh--;			/* reduce shift count by 1 */
    x->fp_exp++;		/* adjust exponent */
  }

  /* shift it back to the left */
  wsh = rsh / 32;
  lsh = rsh % 32;
  rsh = 32 - lsh;
  for (i = 0; i + wsh < 2; i++) {
    x->fp_mant[i] = (x->fp_mant[i+wsh] << lsh) | (x->fp_mant[i+wsh+1] >> rsh);
  }
  x->fp_mant[i] = (x->fp_mant[i+wsh] << lsh);
  i++;
  for (; i < 3; i++) {
    x->fp_mant[i] = 0;
  }

  return x;
}
@


1.5
log
@Various comment typos. 'wether' -> 'whether' (most popular), 'possiblity' ->
'possibility', 'optins' -> 'options', 'resposne' -> 'response', 'unecessary' -> 'unnecessary', 'desination' -> 'destination'. Collected from various misc@@
and tech@@ postings, many by Brad Tilley.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_int.c,v 1.4 2006/06/11 20:43:28 miod Exp $	*/
@


1.4
log
@Use bracketed include paths.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_int.c,v 1.3 2006/01/16 22:08:26 miod Exp $	*/
d87 1
a87 1
  /* even if we have exponent == -1, we still have possiblity
@


1.3
log
@Sync m68k fpe code with NetBSD; but remove unimplemented opcodes stubs, so
that we trigger SIGILL instead of propagating false results.

Tested by martin@@ on Macintosh LCIII.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 2
a37 2
#include "fpu_arith.h"
#include "fpu_emulate.h"
@


1.2
log
@$OpenBSD$ additions
@
text
@d1 2
a2 2
/*	$OpenBSD: fpu_int.c,v 1.1 1995/11/03 04:47:14 briggs Exp $	*/
/*	$NetBSD: fpu_int.c,v 1.1 1995/11/03 04:47:14 briggs Exp $	*/
d44 2
a45 2
  register struct fpn *x = &fe->fe_f2;
  register int sh, clr, mask, i;
d54 1
a54 1
    x->fp_mant[0] = x->fp_mant[1] = x->fp_mant[2] = x->fp_mant[3] = 0;
d64 1
a64 1
  clr = 3 - sh / 32;
d67 1
a67 1
  for (i = 3; i > clr; i--) {
d80 2
a81 2
  register struct fpn *x = &fe->fe_f2;
  register int rsh, lsh, wsh, i;
d91 1
a91 1
    x->fp_mant[0] = x->fp_mant[1] = x->fp_mant[2] = x->fp_mant[3] = 0;
d103 2
a104 2
  if (round(fe, x) == 1 /* rounded up */ &&
      x->fp_mant[3 - (FP_NMANT-rsh)/32] & (1 << ((FP_NMANT-rsh)%32))
d114 1
a114 1
  for (i = 0; i + wsh < 3; i++) {
d117 3
a119 2
  x->fp_mant[i++] = (x->fp_mant[i+wsh] << lsh);
  for (; i < 4; i++) {
@


1.1
log
@from netbsd:
Still incomplete, but much more complete FPE from Ken Nakata
<kenn@@remus.rutgers.edu>.  This emulator does not yet emulate
the following functions:
        FSINH, FETOXM1, FTANH, FATAN, FASIN, FATANH, FSIN, FTAN,
        FETOX, FTWOTOX, FTENTOX, FCOSH, FACOS, FCOS, FSINCOS
It is sufficient, however, to allow programs like df, w, and newfs,
to run to completion with correct results.
Portions of this code were based on the sparc fpe and on initial
work by gwr.
@
text
@d1 1
@
