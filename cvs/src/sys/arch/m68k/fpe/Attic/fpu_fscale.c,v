head	1.9;
access;
symbols
	OPENBSD_5_3:1.8.0.28
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.26
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.24
	OPENBSD_5_0:1.8.0.22
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.20
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.18
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.14
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.5.0.16
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.24
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.22
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.20
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.14
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.9
date	2013.03.25.19.08.56;	author miod;	state dead;
branches;
next	1.8;

1.8
date	2006.06.11.20.43.28;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.30.21.23.23;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.16.22.08.26;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.03.15.54;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.01.13.11.51.05;	author niklas;	state Exp;
branches
	1.4.14.1
	1.4.24.1;
next	1.3;

1.3
date	96.05.29.11.29.32;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.05.09.22.20.46;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.04.53.09;	author deraadt;	state Exp;
branches;
next	;

1.4.14.1
date	2002.03.28.10.34.04;	author niklas;	state Exp;
branches;
next	;

1.4.24.1
date	2002.06.11.03.36.06;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove the m68k FPU emulator; it was only used by the mac68k port which has been
lying in the Attic for quite awhile; none of the remaining m68k-based ports
support FPU-less systems; assuming my HP332 cpu board is in working condition,
give me memory boards for it to have at least 8MB and a chassis, and I'll
consider bringing this code back. But then, the 332 has an FPU socket, and
I'd rather write a new glue to use the MI softloat code (bug-free) than try
and fix the bugs in this.
@
text
@/*	$OpenBSD: fpu_fscale.c,v 1.8 2006/06/11 20:43:28 miod Exp $	*/
/*	$NetBSD: fpu_fscale.c,v 1.11 2003/07/15 02:43:10 lukem Exp $	*/

/*
 * Copyright (c) 1995 Ken Nakata
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 * 4. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Gordon Ross
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * FSCALE - separated from the other type0 arithmetic instructions
 * for performance reason; maybe unnecessary, but FSCALE assumes
 * the source operand be an integer.  It performs type conversion
 * only if the source operand is *not* an integer.
 */

#include <sys/types.h>
#include <sys/signal.h>
#include <sys/systm.h>
#include <machine/frame.h>

#include <m68k/fpe/fpu_emulate.h>

int
fpu_emul_fscale(struct fpemu *fe, struct instruction *insn, int *typ)
{
    struct frame *frame;
    u_int *fpregs;
    int word1, sig;
    int regnum, format;
    int scale, sign, exp;
    u_int m0, m1;
    u_int buf[3], fpsr;
#if DEBUG_FPE
    int flags;
    char regname;
#endif

    scale = sig = 0;
    frame = fe->fe_frame;
    fpregs = &(fe->fe_fpframe->fpf_regs[0]);
    /* clear all exceptions and conditions */
    fpsr = fe->fe_fpsr & ~FPSR_EXCP & ~FPSR_CCB;
#if DEBUG_FPE
    printf("fpu_emul_fscale: FPSR = %08x, FPCR = %08x\n", fpsr, fe->fe_fpcr);
#endif

    word1 = insn->is_word1;
    format = (word1 >> 10) & 7;
    regnum = (word1 >> 7) & 7;

    fe->fe_fpcr &= FPCR_ROUND;
    fe->fe_fpcr |= FPCR_ZERO;

    /* get the source operand */
    if ((word1 & 0x4000) == 0) {
#if DEBUG_FPE
	printf("fpu_emul_fscale: FP%d op FP%d => FP%d\n",
	       format, regnum, regnum);
	/* the operand is an FP reg */
	printf("fpu_emul_scale: src opr FP%d=%08x%08x%08x\n",
	       format, fpregs[format*3], fpregs[format*3+1],
	       fpregs[format*3+2]);
#endif
	fpu_explode(fe, &fe->fe_f2, FTYPE_EXT, &fpregs[format * 3]);
	fpu_implode(fe, &fe->fe_f2, FTYPE_LNG, buf);
      scale = buf[0];
    } else {
	/* the operand is in memory */
	if (format == FTYPE_DBL) {
	    insn->is_datasize = 8;
	} else if (format == FTYPE_SNG || format == FTYPE_LNG) {
	    insn->is_datasize = 4;
	} else if (format == FTYPE_WRD) {
	    insn->is_datasize = 2;
	} else if (format == FTYPE_BYT) {
	    insn->is_datasize = 1;
	} else if (format == FTYPE_EXT) {
	    insn->is_datasize = 12;
	} else {
	    /* invalid or unsupported operand format */
	    *typ = ILL_ILLOPN;
	    sig = SIGILL;
	    return sig;
	}

	/* Get effective address. (modreg=opcode&077) */
	sig = fpu_decode_ea(frame, insn, &insn->is_ea, insn->is_opcode, typ);
	if (sig) {
#if DEBUG_FPE
	    printf("fpu_emul_fscale: error in decode_ea\n");
#endif
	    return sig;
	}

#if DEBUG_FPE
	printf("fpu_emul_fscale: addr mode = ");
	flags = insn->is_ea.ea_flags;
	regname = (insn->is_ea.ea_regnum & 8) ? 'a' : 'd';

	if (flags & EA_DIRECT) {
	    printf("%c%d\n", regname, insn->is_ea.ea_regnum & 7);
	} else if (flags & EA_PREDECR) {
	    printf("%c%d@@-\n", regname, insn->is_ea.ea_regnum & 7);
	} else if (flags & EA_POSTINCR) {
		printf("%c%d@@+\n", regname, insn->is_ea.ea_regnum & 7);
	} else if (flags & EA_OFFSET) {
	    printf("%c%d@@(%d)\n", regname, insn->is_ea.ea_regnum & 7,
		   insn->is_ea.ea_offset);
	} else if (flags & EA_INDEXED) {
	    printf("%c%d@@(...)\n", regname, insn->is_ea.ea_regnum & 7);
	} else if (flags & EA_ABS) {
		printf("0x%08x\n", insn->is_ea.ea_absaddr);
	} else if (flags & EA_PC_REL) {
	    printf("pc@@(%d)\n", insn->is_ea.ea_offset);
	} else if (flags & EA_IMMED) {
	    printf("#0x%08x%08x%08x\n",
		       insn->is_ea.ea_immed[0], insn->is_ea.ea_immed[1],
		   insn->is_ea.ea_immed[2]);
	} else {
	    printf("%c%d@@\n", regname, insn->is_ea.ea_regnum & 7);
	}
#endif
	fpu_load_ea(frame, insn, &insn->is_ea, (char *)buf, typ);

#if DEBUG_FPE
	printf("fpu_emul_fscale: src = %08x%08x%08x, siz = %d\n",
	       buf[0], buf[1], buf[2], insn->is_datasize);
#endif
	if (format == FTYPE_LNG) {
	    /* nothing */
          scale = buf[0];
	} else if (format == FTYPE_WRD) {
	    /* sign-extend */
	    scale = buf[0] & 0xffff;
	    if (scale & 0x8000) {
		scale |= 0xffff0000;
	    }
	} else if (format == FTYPE_BYT) {
	    /* sign-extend */
	    scale = buf[0] & 0xff;
	    if (scale & 0x80) {
		scale |= 0xffffff00;
	    }
	} else if (format == FTYPE_DBL || format == FTYPE_SNG ||
		   format == FTYPE_EXT) {
	    fpu_explode(fe, &fe->fe_f2, format, buf);
	    fpu_implode(fe, &fe->fe_f2, FTYPE_LNG, buf);
          scale = buf[0];
	}
	/* make it look like we've got an FP oprand */
	fe->fe_f2.fp_class = (buf[0] == 0) ? FPC_ZERO : FPC_NUM;
    }

    /* assume there's no exception */
    sig = 0;

    /* it's barbaric but we're going to operate directly on
     * the dst operand's bit pattern */
    sign = fpregs[regnum * 3] & 0x80000000;
    exp = (fpregs[regnum * 3] & 0x7fff0000) >> 16;
    m0 = fpregs[regnum * 3 + 1];
    m1 = fpregs[regnum * 3 + 2];

    switch (fe->fe_f2.fp_class) {
    case FPC_SNAN:
	fpsr |= FPSR_SNAN;
    case FPC_QNAN:
	/* dst = NaN */
	exp = 0x7fff;
	m0 = m1 = 0xffffffff;
	break;
    case FPC_ZERO:
    case FPC_NUM:
	if ((0 < exp && exp < 0x7fff) ||
	    (exp == 0 && (m0 | m1) != 0)) {
	    /* normal or denormal */
	    exp += scale;
	    if (exp < 0) {
		/* underflow */
		u_int grs;	/* guard, round and sticky */

		exp = 0;
		grs = m1 << (32 + exp);
		m1 = m0 << (32 + exp) | m1 >> -exp;
		m0 >>= -exp;
		if (grs != 0) {
		    fpsr |= FPSR_INEX2;

		    switch (fe->fe_fpcr & 0x30) {
		    case FPCR_MINF:
			if (sign != 0) {
			    if (++m1 == 0 &&
				++m0 == 0) {
				m0 = 0x80000000;
				exp++;
			    }
			}
			break;
		    case FPCR_NEAR:
			if (grs == 0x80000000) {
			    /* tie */
			    if ((m1 & 1) &&
				++m1 == 0 &&
				++m0 == 0) {
				m0 = 0x80000000;
				exp++;
			    }
			} else if (grs & 0x80000000) {
			    if (++m1 == 0 &&
				++m0 == 0) {
				m0 = 0x80000000;
				exp++;
			    }
			}
			break;
		    case FPCR_PINF:
			if (sign == 0) {
			    if (++m1 == 0 &&
				++m0 == 0) {
				m0 = 0x80000000;
				exp++;
			    }
			}
			break;
		    case FPCR_ZERO:
			break;
		    }
		}
		if (exp == 0 && (m0 & 0x80000000) == 0) {
		    fpsr |= FPSR_UNFL;
		    if ((m0 | m1) == 0) {
			fpsr |= FPSR_ZERO;
		    }
		}
	    } else if (exp >= 0x7fff) {
		/* overflow --> result = Inf */
		/* but first, try to normalize in case it's an unnormalized */
		while ((m0 & 0x80000000) == 0) {
		    exp--;
		    m0 = (m0 << 1) | (m1 >> 31);
		    m1 = m1 << 1;
		}
		/* if it's still too large, then return Inf */
		if (exp >= 0x7fff) {
		    exp = 0x7fff;
		    m0 = m1 = 0;
		    fpsr |= FPSR_OVFL | FPSR_INF;
		}
	    } else if ((m0 & 0x80000000) == 0) {
		/*
		 * it's a denormal; we try to normalize but
		 * result may and may not be a normal.
		 */
		while (exp > 0 && (m0 & 0x80000000) == 0) {
		    exp--;
		    m0 = (m0 << 1) | (m1 >> 31);
		    m1 = m1 << 1;
		}
		if ((m0 & 0x80000000) == 0) {
		    fpsr |= FPSR_UNFL;
		}
	    } /* exp in range and mantissa normalized */
	} else if (exp == 0 && m0 == 0 && m1 == 0) {
	    /* dst is Zero */
	    fpsr |= FPSR_ZERO;
	} /* else we know exp == 0x7fff */
	else if ((m0 | m1) == 0) {
	    fpsr |= FPSR_INF;
	} else if ((m0 & 0x40000000) == 0) {
	    /* a signaling NaN */
	    fpsr |= FPSR_NAN | FPSR_SNAN;
	} else {
	    /* a quiet NaN */
	    fpsr |= FPSR_NAN;
	}
	break;
    case FPC_INF:
	/* dst = NaN */
	exp = 0x7fff;
	m0 = m1 = 0xffffffff;
	fpsr |= FPSR_OPERR | FPSR_NAN;
	break;
    default:
#ifdef DEBUG
	panic("fpu_emul_fscale: invalid fp class");
#endif
	break;
    }

    /* store the result */
    fpregs[regnum * 3] = sign | (exp << 16);
    fpregs[regnum * 3 + 1] = m0;
    fpregs[regnum * 3 + 2] = m1;

    if (sign) {
	fpsr |= FPSR_NEG;
    }

    /* update fpsr according to the result of operation */
    fe->fe_fpframe->fpf_fpsr = fe->fe_fpsr = fpsr;

#if DEBUG_FPE
    printf("fpu_emul_fscale: FPSR = %08x, FPCR = %08x\n",
	   fe->fe_fpsr, fe->fe_fpcr);
#endif

    return (fpsr & fe->fe_fpcr & FPSR_EXCP) ? SIGFPE : sig;
}
@


1.8
log
@Use bracketed include paths.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_fscale.c,v 1.7 2006/01/30 21:23:23 miod Exp $	*/
@


1.7
log
@Better siginfo field values for fpe failures.
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_fscale.c,v 1.6 2006/01/16 22:08:26 miod Exp $	*/
d46 1
a46 1
#include "fpu_emulate.h"
@


1.6
log
@Sync m68k fpe code with NetBSD; but remove unimplemented opcodes stubs, so
that we trigger SIGILL instead of propagating false results.

Tested by martin@@ on Macintosh LCIII.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d49 1
a49 3
fpu_emul_fscale(fe, insn)
     struct fpemu *fe;
     struct instruction *insn;
d106 2
a107 1
	    sig = SIGFPE;
d112 1
a112 1
	sig = fpu_decode_ea(frame, insn, &insn->is_ea, insn->is_opcode);
d148 1
a148 1
	fpu_load_ea(frame, insn, &insn->is_ea, (char *)buf);
@


1.5
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 2
a2 2
/*	$OpenBSD: fpu_fscale.c,v 1.4 1997/01/13 11:51:05 niklas Exp $	*/
/*	$NetBSD: fpu_fscale.c,v 1.6 1996/10/13 03:19:14 christos Exp $	*/
d60 1
d63 1
d70 3
a72 3
    if (fpu_debug_level & DL_FSCALE) {
	printf("  fpu_emul_fscale: FPSR = %08x, FPCR = %08x\n", fpsr, fe->fe_fpcr);
    }
d83 3
a85 4
	if (fpu_debug_level & DL_FSCALE) {
	    printf("  fpu_emul_fscale: FP%d op FP%d => FP%d\n",
		   format, regnum, regnum);
	}
d87 4
a90 5
	if (fpu_debug_level & DL_FSCALE) {
	    printf("  fpu_emul_scale: src opr FP%d=%08x%08x%08x\n",
		   format, fpregs[format*3], fpregs[format*3+1],
		   fpregs[format*3+2]);
	}
d93 1
d113 1
a113 1
	sig = fpu_decode_ea(frame, insn, &insn->is_ea0, insn->is_opcode);
d115 3
a117 3
	    if (fpu_debug_level & DL_FSCALE) {
		printf("  fpu_emul_fscale: error in decode_ea\n");
	    }
d121 26
a146 27
	if (fpu_debug_level & DL_FSCALE) {
	    printf("  fpu_emul_fscale: addr mode = ");
	    flags = insn->is_ea0.ea_flags;
	    regname = (insn->is_ea0.ea_regnum & 8) ? 'a' : 'd';

	    if (flags & EA_DIRECT) {
		printf("%c%d\n", regname, insn->is_ea0.ea_regnum & 7);
	    } else if (insn->is_ea0.ea_flags & EA_PREDECR) {
		printf("%c%d@@-\n", regname, insn->is_ea0.ea_regnum & 7);
	    } else if (insn->is_ea0.ea_flags & EA_POSTINCR) {
		printf("%c%d@@+\n", regname, insn->is_ea0.ea_regnum & 7);
	    } else if (insn->is_ea0.ea_flags & EA_OFFSET) {
		printf("%c%d@@(%d)\n", regname, insn->is_ea0.ea_regnum & 7,
		       insn->is_ea0.ea_offset);
	    } else if (insn->is_ea0.ea_flags & EA_INDEXED) {
		printf("%c%d@@(...)\n", regname, insn->is_ea0.ea_regnum & 7);
	    } else if (insn->is_ea0.ea_flags & EA_ABS) {
		printf("0x%08x\n", insn->is_ea0.ea_absaddr);
	    } else if (insn->is_ea0.ea_flags & EA_PC_REL) {
		printf("pc@@(%d)\n", insn->is_ea0.ea_offset);
	    } else if (flags & EA_IMMED) {
		printf("#0x%08x%08x%08x\n",
		       insn->is_ea0.ea_immed[0], insn->is_ea0.ea_immed[1],
		       insn->is_ea0.ea_immed[2]);
	    } else {
		printf("%c%d@@\n", regname, insn->is_ea0.ea_regnum & 7);
	    }
d148 2
a149 1
	fpu_load_ea(frame, insn, &insn->is_ea0, (char *)buf);
d151 4
a154 4
	if (fpu_debug_level & DL_FSCALE) {
	    printf(" fpu_emul_fscale: src = %08x%08x%08x, siz = %d\n",
		   buf[0], buf[1], buf[2], insn->is_datasize);
	}
d157 1
d174 1
d311 1
a311 1
	panic("  fpu_emul_fscale: invalid fp class");
d328 4
a331 4
    if (fpu_debug_level & DL_FSCALE) {
	printf("  fpu_emul_fscale: FPSR = %08x, FPCR = %08x\n",
	       fe->fe_fpsr, fe->fe_fpcr);
    }
@


1.4
log
@Sync to 970110 NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_fscale.c,v 1.3 1996/05/29 11:29:32 niklas Exp $	*/
d148 1
a148 1
	fpu_load_ea(frame, insn, &insn->is_ea0, (char*)buf);
@


1.4.24.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fpu_fscale.c,v 1.4 1997/01/13 11:51:05 niklas Exp $	*/
d148 1
a148 1
	fpu_load_ea(frame, insn, &insn->is_ea0, (char *)buf);
@


1.4.14.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d148 1
a148 1
	fpu_load_ea(frame, insn, &insn->is_ea0, (char *)buf);
@


1.3
log
@From Netbsd: Fix "might be used uninitialized" warnings.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: fpu_fscale.c,v 1.4 1996/05/15 07:31:57 leo Exp $	*/
@


1.2
log
@From NetBSD:
Update for -Wall -Wstrict-prototypes -Wmissing-prototypes -Wno-uninitialized.
Bring back Step9 and fix an oversight from Ken Nakata <kenn@@remus.rutgers.edu>
@
text
@d2 1
a2 1
/*	$NetBSD: fpu_fscale.c,v 1.3 1996/04/30 11:52:25 briggs Exp $	*/
d63 1
a63 1
    sig = 0;
@


1.1
log
@from netbsd:
Still incomplete, but much more complete FPE from Ken Nakata
<kenn@@remus.rutgers.edu>.  This emulator does not yet emulate
the following functions:
        FSINH, FETOXM1, FTANH, FATAN, FASIN, FATANH, FSIN, FTAN,
        FETOX, FTWOTOX, FTENTOX, FCOSH, FACOS, FCOS, FSINCOS
It is sufficient, however, to allow programs like df, w, and newfs,
to run to completion with correct results.
Portions of this code were based on the sparc fpe and on initial
work by gwr.
@
text
@d1 2
a2 1
/*	$NetBSD: fpu_fscale.c,v 1.2 1995/11/05 00:35:25 briggs Exp $	*/
d43 1
@
