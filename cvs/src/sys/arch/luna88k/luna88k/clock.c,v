head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.2
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.10
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.24
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.22
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.20
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.16
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.18
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.14
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.12
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.10
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.8
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.6
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.4
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2
	LUNA88K_INIT:1.1.1.1
	AOYAMA:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2017.03.19.10.57.29;	author miod;	state Exp;
branches;
next	1.11;
commitid	VsXOX1rAnPUup9UH;

1.11
date	2016.09.04.00.56.08;	author aoyama;	state Exp;
branches;
next	1.10;
commitid	fbbZiva9Fh9yXAWR;

1.10
date	2014.09.27.19.50.10;	author aoyama;	state Exp;
branches;
next	1.9;
commitid	KaZSgFYBPSUmnKiq;

1.9
date	2012.11.13.19.21.19;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.18.17.45.08;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.13.05.01.21;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.09.21.01.45;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.13.19.48.31;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.28.12.06.49;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.24.22.50.30;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.18.13.29.46;	author aoyama;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.21.15.23.58;	author aoyama;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.04.21.15.23.58;	author aoyama;	state Exp;
branches;
next	;

1.1.2.1
date	2004.06.05.23.09.47;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Put the address of the per-cpu clock and interrupt registers into the cpu_info
struct, rather than fetching them from arrays every time they are needed.

ok aoyama@@
@
text
@/* $OpenBSD: clock.c,v 1.11 2016/09/04 00:56:08 aoyama Exp $ */
/* $NetBSD: clock.c,v 1.2 2000/01/11 10:29:35 nisimura Exp $ */

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department and Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * from: Utah Hdr: clock.c 1.18 91/01/21
 *
 *	@@(#)clock.c	8.1 (Berkeley) 6/10/93
 */

/* from NetBSD/luna68k sys/arch/luna68k/luna68k/clock.c */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/evcount.h>
#include <sys/timetc.h>

#include <machine/board.h>
#include <machine/cpu.h>

#include <dev/clock_subr.h>
#include <luna88k/luna88k/clockvar.h>

struct device *clockdev;
const struct clockfns *clockfns;
struct evcount *clockevc;
int clockinitted, todrvalid;

void
clockattach(struct device *dev, const struct clockfns *fns,
	struct evcount *evc)
{
	/*
	 * Just bookkeeping.
	 */
	if (clockfns != NULL)
		panic("clockattach: multiple clocks");
	clockdev = dev;
	clockfns = fns;
	clockevc = evc;
}

/*
 * Machine-dependent clock routines.
 *
 * Startrtclock restarts the real-time clock, which provides
 * hardclock interrupts to kern_clock.c.
 *
 * Inittodr initializes the time of day hardware which provides
 * date functions.  Its primary function is to use some file
 * system information in case the hardare clock lost state.
 *
 * Resettodr restores the time of day hardware after a time change.
 */

u_int	clock_get_tc(struct timecounter *);

struct timecounter clock_tc = {
	.tc_get_timecount = clock_get_tc,
	.tc_counter_mask = 0xffffffff,
	.tc_frequency = 0, /* will be filled in */
	.tc_name = "clock",
	.tc_quality = 0
};

/*
 * Start the real-time and statistics clocks. Leave stathz 0 since there
 * are no other timers available.
 */
void
cpu_initclocks()
{

#ifdef DIAGNOSTIC
	if (clockfns == NULL)
		panic("cpu_initclocks: no clock attached");
#endif

	tick = 1000000 / hz;	/* number of microseconds between interrupts */
	clock_tc.tc_frequency = hz;
	tc_init(&clock_tc);
	clockinitted = 1;
}

/*
 * We assume newhz is either stathz or profhz, and that neither will
 * change after being set up above.  Could recalculate intervals here
 * but that would be a drag.
 */
void
setstatclockrate(int newhz)
{
	/* nothing we can do */
}

/*
 * Initialze the time of day register, based on the time base which is, e.g.
 * from a filesystem.  Base provides the time to within six months,
 * and the time of year clock (if any) provides the rest.
 */
void
inittodr(time_t base)
{
	struct clock_ymdhms dt;
	struct timespec ts;
	time_t deltat;
	int badbase;

	ts.tv_sec = ts.tv_nsec = 0;

	if (base < (2012 - 1970) * SECYR) {
		printf("WARNING: preposterous time in file system");
		/* read the system clock anyway */
		base = (2012 - 1970) * SECYR;
		badbase = 1;
	} else
		badbase = 0;

	(*clockfns->cf_get)(clockdev, base, &dt);
	todrvalid = 1;
	/* simple sanity checks */
	if (dt.dt_year < 1970 || dt.dt_mon < 1 || dt.dt_mon > 12
		|| dt.dt_day < 1 || dt.dt_day > 31
		|| dt.dt_hour > 23 || dt.dt_min > 59 || dt.dt_sec > 59) {
		/*
		 * Believe the time in the file system for lack of
		 * anything better, resetting the TODR.
		 */
		ts.tv_sec = base;
		tc_setclock(&ts);
		if (!badbase) {
			printf("WARNING: preposterous clock chip time");
			resettodr();
		}
		goto bad;
	}
	/* now have days since Jan 1, 1970; the rest is easy... */
	ts.tv_sec = clock_ymdhms_to_secs(&dt);
	tc_setclock(&ts);

	if (!badbase) {
		/*
		 * See if we gained/lost two or more days;
		 * if so, assume something is amiss.
		 */
		deltat = ts.tv_sec - base;
		if (deltat < 0)
			deltat = -deltat;
		if (deltat < 2 * SECDAY)
			return;
		printf("WARNING: clock %s %d days",
		    ts.tv_sec < base ? "lost" : "gained",
		       (int) (deltat / SECDAY));
	}
bad:
	printf(" -- CHECK AND RESET THE DATE!\n");
}

/*
 * Reset the TODR based on the time value; used when the TODR
 * has a preposterous value and also when the time is reset
 * by the stime system call.  Also called when the TODR goes past
 * TODRZERO + 100*(SECYEAR+2*SECDAY) (e.g. on Jan 2 just after midnight)
 * to wrap the TODR around.
 */
void
resettodr()
{
	struct clock_ymdhms dt;

	if (!todrvalid)
		return;
	clock_secs_to_ymdhms(time_second, &dt);
	(*clockfns->cf_set)(clockdev, &dt);
}

/*
 * Clock interrupt routine
 */
int
clockintr(void *eframe)
{
	struct cpu_info *ci = curcpu();

#ifdef MULTIPROCESSOR
	if (CPU_IS_PRIMARY(ci))
#endif
		clockevc->ec_count++;

	*(volatile uint32_t *)(ci->ci_clock_ack) = ~0;
	if (clockinitted)
		hardclock(eframe);
	return 1;
}

u_int
clock_get_tc(struct timecounter *tc)
{
	return (u_int)clockevc->ec_count;
}
@


1.11
log
@Modify to ANSI-style function declarations.  No binary change.
@
text
@d1 1
a1 1
/* $OpenBSD: clock.c,v 1.10 2014/09/27 19:50:10 aoyama Exp $ */
a214 11
 * *clock_reg[CPU]
 * Points to the clock register for each CPU.
 */
volatile u_int32_t *clock_reg[] = {
	(u_int32_t *)OBIO_CLOCK0,
	(u_int32_t *)OBIO_CLOCK1,
	(u_int32_t *)OBIO_CLOCK2,
	(u_int32_t *)OBIO_CLOCK3
};

/*
a219 1
#ifdef MULTIPROCESSOR
a220 4
	u_int cpu = ci->ci_cpuid;
#else
	u_int cpu = cpu_number();
#endif
d227 1
a227 1
	*clock_reg[cpu] = 0xffffffff;
@


1.10
log
@Move clock_reg[] definition.

clock_reg[] is only used in clock.c, so move its definition from
machdep.c to clock.c.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: clock.c,v 1.9 2012/11/13 19:21:19 miod Exp $ */
d67 2
a68 4
clockattach(dev, fns, evc)
	struct device *dev;
	const struct clockfns *fns;
	struct evcount *evc;
d128 1
a128 2
setstatclockrate(newhz)
	int newhz;
d139 1
a139 2
inittodr(base)
	time_t base;
@


1.9
log
@Do not advance the timecounter too fast on MULTIPROCESSOR kernels; noticed
and ok aoyama@@
@
text
@d1 1
a1 1
/* $OpenBSD: clock.c,v 1.8 2012/10/18 17:45:08 miod Exp $ */
d55 1
d219 11
a234 1
	extern unsigned int *clock_reg[];
@


1.8
log
@Switch luna88k to timecounters; tested by aoyama@@
@
text
@d1 1
a1 1
/* $OpenBSD: clock.c,v 1.7 2011/09/13 05:01:21 miod Exp $ */
d224 6
a229 1
	int cpu = cpu_number();
d231 4
a234 1
	clockevc->ec_count++;
@


1.7
log
@Do not invoke hardclock() until cpu_initclocks() has been invoked; avoids
a NULL pointer dereference because the softclock interrupt handler cookie
is not initialized yet.
Found the hard way and fix tested by aoyama@@
@
text
@d1 1
a1 1
/* $OpenBSD: clock.c,v 1.6 2006/01/09 21:01:45 miod Exp $ */
d53 1
d94 10
d118 2
a119 1

d145 1
d149 3
a151 1
	if (base < 5*SECYR) {
d154 1
a154 1
		base = 6*SECYR + 186*SECDAY + SECDAY/2;
d169 2
a170 1
		time.tv_sec = base;
d178 2
a179 1
	time.tv_sec = clock_ymdhms_to_secs(&dt);
d186 1
a186 1
		deltat = time.tv_sec - base;
d192 1
a192 1
		    time.tv_sec < base ? "lost" : "gained",
d213 1
a213 1
	clock_secs_to_ymdhms(time.tv_sec, &dt);
d232 6
@


1.6
log
@Remove clock tick adjustment computation inherited from luna68k where some
models run with hz=60.
@
text
@d1 1
a1 1
/* $OpenBSD: clock.c,v 1.5 2005/10/13 19:48:31 miod Exp $ */
d62 1
a62 1
int clockinitted;
d107 2
d145 1
a145 1
	clockinitted = 1;
d194 1
a194 1
	if (!clockinitted)
d212 2
a213 1
	hardclock(eframe);
@


1.5
log
@Merge <machine/cpu_number.h> into <machine/cpu.h>, preparing for intrusive
changes.
@
text
@d1 1
a1 1
/* $OpenBSD: clock.c,v 1.4 2004/12/28 12:06:49 miod Exp $ */
a106 8
	tickfix = 1000000 - (hz * tick);
	if (tickfix) {
		int ftp;

		ftp = min(ffs(tickfix), ffs(hz));
		tickfix >>= (ftp - 1);
		tickfixinterval = hz >> (ftp - 1);
        }
@


1.4
log
@Since we don't enable interrupts until autoconf is over, we don't need
to skip the first few clock interrupts, as done on luna68k.
@
text
@d1 1
a1 1
/* $OpenBSD: clock.c,v 1.3 2004/12/24 22:50:30 miod Exp $ */
a54 1
#include <machine/cpu_number.h>
@


1.3
log
@{e,}intr{cnt,names} bye-bye.
@
text
@d1 1
a1 1
/* $OpenBSD: clock.c,v 1.2 2004/08/18 13:29:46 aoyama Exp $ */
a93 2
int clock_enable;		/* XXX to be removed XXX */

a100 1
	int s;
d102 1
d105 1
a115 12
	/*
	 * Get the clock started.
	 */
	s = splhigh();
	/*
	 * XXX 
	 * I guess it's necessary to program clock source with 
	 * approprivate mode/value.
	 * XXX
	 */
	clock_enable = 1;
	splx(s);
@


1.2
log
@Add 'irq6/clock0' to evcount on luna88k.
ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: clock.c,v 1.1 2004/04/21 15:23:58 aoyama Exp $ */
a228 1
	intrcnt[M88K_CLK_IRQ]++;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d52 1
d55 1
a59 5
#if 0 /* aoyama */
#define CLOCK_LEVEL 5
#include <luna68k/luna68k/isr.h>
#endif /* aoyama */

d62 1
d66 1
a66 1
clockattach(dev, fns)
d69 1
d78 1
d218 17
@


1.1.2.1
log
@Merge with the trunk
@
text
@@


1.1.1.1
log
@Initial commit for OpenBSD/luna88k, based on OpenBSD/mvme88k, NetBSD/luna68k and CMU Mach.
@
text
@@
