head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.14
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.5.0.10
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.8
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.10
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	SMP:1.2.0.2
	LUNA88K_INIT:1.1.1.1
	AOYAMA:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2014.06.07.11.55.35;	author aoyama;	state Exp;
branches;
next	1.8;
commitid	eFZIGuEBLAQNOVxZ;

1.8
date	2013.11.12.13.56.23;	author aoyama;	state Exp;
branches;
next	1.7;

1.7
date	2013.08.10.22.27.13;	author aoyama;	state Exp;
branches;
next	1.6;

1.6
date	2013.05.27.21.09.09;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.20.06.33.47;	author matthew;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.05.42.11;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.18.13.29.46;	author aoyama;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.07.14.11.05;	author aoyama;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.04.21.15.23.56;	author aoyama;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.04.21.15.23.56;	author aoyama;	state Exp;
branches;
next	;

1.2.2.1
date	2004.06.05.23.09.46;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Modify to ANSI-style function declarations.  No binary change.
@
text
@/* $OpenBSD: timekeeper.c,v 1.8 2013/11/12 13:56:23 aoyama Exp $ */
/* $NetBSD: timekeeper.c,v 1.1 2000/01/05 08:48:56 nisimura Exp $ */

/*-
 * Copyright (c) 2000 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Tohru Nishimura.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/device.h>
#include <sys/kernel.h>
#include <sys/evcount.h>

#include <machine/autoconf.h>
#include <machine/board.h>	/* machtype value */
#include <machine/cpu.h>

#include <dev/clock_subr.h>

#include <luna88k/luna88k/clockvar.h>
#include <luna88k/dev/timekeeper.h>

#define	MK_YEAR0	1970	/* year offset of MK */
#define	DS_YEAR0	1990	/* year offset of DS */

struct timekeeper_softc {
	struct device sc_dev;
	void *sc_clock, *sc_nvram;
	int sc_nvramsize;
	struct evcount sc_count;
};

/*
 * BCD to decimal and decimal to BCD.
 */
#define FROMBCD(x)      (((x) >> 4) * 10 + ((x) & 0xf))
#define TOBCD(x)        (((x) / 10 * 16) + ((x) % 10))

int  clock_match(struct device *, void *, void *);
void clock_attach(struct device *, struct device *, void *);

struct cfattach clock_ca = {
	sizeof (struct timekeeper_softc), clock_match, clock_attach
};

struct cfdriver clock_cd = {
        NULL, "clock", DV_DULL
};

void mkclock_get(struct device *, time_t, struct clock_ymdhms *);
void mkclock_set(struct device *, struct clock_ymdhms *);
void dsclock_get(struct device *, time_t, struct clock_ymdhms *);
void dsclock_set(struct device *, struct clock_ymdhms *);

const struct clockfns mkclock_clockfns = {
	NULL /* never used */, mkclock_get, mkclock_set,
};

const struct clockfns dsclock_clockfns = {
	NULL /* never used */, dsclock_get, dsclock_set,
};

int
clock_match(struct device *parent, void *match, void *aux)
{
	struct mainbus_attach_args *ma = aux;

	if (strcmp(ma->ma_name, clock_cd.cd_name))
		return 0;
	return 1;
}

extern int machtype; /* in machdep.c */

void
clock_attach(struct device *parent, struct device *self, void *aux)
{
	struct timekeeper_softc *sc = (void *)self;
	struct mainbus_attach_args *ma = aux;
	const struct clockfns *clockwork;

	switch (machtype) {
	default:
	case LUNA_88K:	/* Mostek MK48T02 */
		sc->sc_clock = (void *)(ma->ma_addr + MK_NVRAM_SPACE);
		sc->sc_nvram = (void *)ma->ma_addr;
		sc->sc_nvramsize = MK_NVRAM_SPACE;
		clockwork = &mkclock_clockfns;
		printf(": MK48T02\n");
		break;
	case LUNA_88K2: /* Dallas DS1397 */
		sc->sc_clock = (void *)ma->ma_addr;
		sc->sc_nvram = (void *)(ma->ma_addr + 50);
		sc->sc_nvramsize = 50;
		clockwork = &dsclock_clockfns;
		printf(": DS1397\n");
		break;
	}

	evcount_attach(&sc->sc_count, self->dv_xname, &ma->ma_ilvl);

	clockattach(&sc->sc_dev, clockwork, &sc->sc_count);
}

/*
 * On LUNA-88K, NVRAM contents and Timekeeper registers are mapped on the
 * most significant byte of each 32bit word. (i.e. 4-bytes stride)
 *
 * Get the time of day, based on the clock's value and/or the base value.
 */
void
mkclock_get(struct device *dev, time_t base, struct clock_ymdhms *dt)
{
	struct timekeeper_softc *sc = (void *)dev;
	volatile u_int32_t *chiptime = (void *)sc->sc_clock;
	int s;

	s = splclock();

	/* enable read (stop time) */
	chiptime[MK_CSR] |= (MK_CSR_READ << 24);

	dt->dt_sec  = FROMBCD(chiptime[MK_SEC]   >> 24);
	dt->dt_min  = FROMBCD(chiptime[MK_MIN]   >> 24);
	dt->dt_hour = FROMBCD(chiptime[MK_HOUR]  >> 24);
	dt->dt_wday = FROMBCD(chiptime[MK_DOW]   >> 24);
	dt->dt_day  = FROMBCD(chiptime[MK_DOM]   >> 24);
	dt->dt_mon  = FROMBCD(chiptime[MK_MONTH] >> 24);
	dt->dt_year = FROMBCD(chiptime[MK_YEAR]  >> 24);

	chiptime[MK_CSR] &= (~MK_CSR_READ << 24);	/* time wears on */

	/* UniOS-Mach doesn't set the correct BCD year after Y2K */
	if (dt->dt_year > 100) dt->dt_year -= (MK_YEAR0 % 100);

	dt->dt_year += MK_YEAR0;
	splx(s);
#ifdef TIMEKEEPER_DEBUG
	printf("get %02d/%02d/%02d %02d:%02d:%02d\n",
	    dt->dt_year, dt->dt_mon, dt->dt_day,
	    dt->dt_hour, dt->dt_min, dt->dt_sec);
#endif
}

/*
 * Reset the TODR based on the time value.
 */
void
mkclock_set(struct device *dev, struct clock_ymdhms *dt)
{
	struct timekeeper_softc *sc = (void *)dev;
	volatile u_int32_t *chiptime = (void *)sc->sc_clock;
	volatile u_int32_t *stamp = (void *)(sc->sc_nvram + (4 * 0x10));
	int s;

	s = splclock();
	chiptime[MK_CSR]  |= (MK_CSR_WRITE << 24);	/* enable write */

	chiptime[MK_SEC]   = TOBCD(dt->dt_sec)  << 24;
	chiptime[MK_MIN]   = TOBCD(dt->dt_min)  << 24;
	chiptime[MK_HOUR]  = TOBCD(dt->dt_hour) << 24;
	chiptime[MK_DOW]   = TOBCD(dt->dt_wday) << 24;
	chiptime[MK_DOM]   = TOBCD(dt->dt_day)  << 24;
	chiptime[MK_MONTH] = TOBCD(dt->dt_mon)  << 24;
	/* XXX: We don't consider UniOS-Mach Y2K problem */
	chiptime[MK_YEAR]  = TOBCD(dt->dt_year - MK_YEAR0) << 24;

	chiptime[MK_CSR]  &= (~MK_CSR_WRITE << 24);	/* load them up */
	splx(s);
#ifdef TIMEKEEPER_DEBUG
	printf("set %02d/%02d/%02d %02d:%02d:%02d\n",
	    dt->dt_year, dt->dt_mon, dt->dt_day,
	    dt->dt_hour, dt->dt_min, dt->dt_sec);
#endif

	/* Write a stamp at NVRAM address 0x10-0x13 */
	stamp[0] = 'R' << 24; stamp[1] = 'T' << 24;
	stamp[2] = 'C' << 24; stamp[3] = '\0' << 24;
}

#define _DS_GET(off, data) \
	do { *chiptime = (off); (data) = (*chipdata); } while (0)
#define _DS_SET(off, data) \
	do { *chiptime = (off); *chipdata = (u_int8_t)(data); } while (0)
#define _DS_GET_BCD(off, data) \
	do { \
		u_int8_t c; \
		*chiptime = (off); \
		c = *chipdata; (data) = FROMBCD(c); \
	} while (0)
#define _DS_SET_BCD(off, data) \
	do { \
		*chiptime = (off); \
		*chipdata = TOBCD((u_int8_t)(data)); \
	} while (0)

/*
 * Get the time of day, based on the clock's value and/or the base value.
 */
void
dsclock_get(struct device *dev, time_t base, struct clock_ymdhms *dt)
{
	struct timekeeper_softc *sc = (void *)dev;
	volatile u_int8_t *chiptime = (void *)sc->sc_clock;
	volatile u_int8_t *chipdata = (void *)(sc->sc_clock + 1);
	int s;
	u_int8_t c;

	s = splclock();

	/* specify 24hr and BCD mode */
	_DS_GET(DS_REGB, c);
	c |= DS_REGB_24HR;
	c &= ~DS_REGB_BINARY;
	_DS_SET(DS_REGB, c);

	/* update in progress; spin loop */
	for (;;) {
		*chiptime = DS_REGA;
		if ((*chipdata & DS_REGA_UIP) == 0)
			break;
	}

	_DS_GET_BCD(DS_SEC,   dt->dt_sec);
	_DS_GET_BCD(DS_MIN,   dt->dt_min);
	_DS_GET_BCD(DS_HOUR,  dt->dt_hour);
	_DS_GET_BCD(DS_DOW,   dt->dt_wday);
	_DS_GET_BCD(DS_DOM,   dt->dt_day);
	_DS_GET_BCD(DS_MONTH, dt->dt_mon);
	_DS_GET_BCD(DS_YEAR,  dt->dt_year);

	/* UniOS-Mach doesn't set the correct BCD year after Y2K */
	if (dt->dt_year > 100) dt->dt_year -= (DS_YEAR0 % 100);

	dt->dt_year += DS_YEAR0;
	splx(s);

#ifdef TIMEKEEPER_DEBUG
	printf("get %02d/%02d/%02d %02d:%02d:%02d\n",
	    dt->dt_year, dt->dt_mon, dt->dt_day,
	    dt->dt_hour, dt->dt_min, dt->dt_sec);
#endif
}

/*
 * Reset the TODR based on the time value.
 */
void
dsclock_set(struct device *dev, struct clock_ymdhms *dt)
{
	struct timekeeper_softc *sc = (void *)dev;
	volatile u_int8_t *chiptime = (void *)sc->sc_clock;
	volatile u_int8_t *chipdata = (void *)(sc->sc_clock + 1);
	int s;
	u_int8_t c;

	s = splclock();
	
	/* enable write */
	_DS_GET(DS_REGB, c);
	c |= DS_REGB_SET;
	_DS_SET(DS_REGB, c);

	_DS_SET_BCD(DS_SEC,   dt->dt_sec);
	_DS_SET_BCD(DS_MIN,   dt->dt_min);
	_DS_SET_BCD(DS_HOUR,  dt->dt_hour);
	_DS_SET_BCD(DS_DOW,   dt->dt_wday);
	_DS_SET_BCD(DS_DOM,   dt->dt_day);
	_DS_SET_BCD(DS_MONTH, dt->dt_mon);
	/* XXX: We don't consider UniOS-Mach Y2K problem */
	_DS_SET_BCD(DS_YEAR,  dt->dt_year - DS_YEAR0);

	_DS_GET(DS_REGB, c);
	c &= ~DS_REGB_SET;
	_DS_SET(DS_REGB, c);

	splx(s);

#ifdef TIMEKEEPER_DEBUG
	printf("set %02d/%02d/%02d %02d:%02d:%02d\n",
	    dt->dt_year, dt->dt_mon, dt->dt_day,
	    dt->dt_hour, dt->dt_min, dt->dt_sec);
#endif
}
@


1.8
log
@Fix the bootloader random hang-up while counting down on LUNA-88K2.
The same logic is also applied to luna88k/dev/timekeeper.c.

suggested and ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: timekeeper.c,v 1.7 2013/08/10 22:27:13 aoyama Exp $ */
d89 1
a89 3
clock_match(parent, match, aux)
        struct device *parent;
        void *match, *aux;
d101 1
a101 3
clock_attach(parent, self, aux)
        struct device *parent, *self;
        void *aux;
d137 1
a137 4
mkclock_get(dev, base, dt)
	struct device *dev;
	time_t base;
	struct clock_ymdhms *dt;
d174 1
a174 3
mkclock_set(dev, dt)
	struct device *dev;
	struct clock_ymdhms *dt;
d226 1
a226 4
dsclock_get(dev, base, dt)
	struct device *dev;
	time_t base;
	struct clock_ymdhms *dt;
d274 1
a274 3
dsclock_set(dev, dt)
	struct device *dev;
	struct clock_ymdhms *dt;
@


1.7
log
@On 'original' LUNA-88K, NVRAM contents and Timekeeper registers are
mapped on the most significant byte of each 32bit word. (i.e. 4-bytes
stride)
Also, add small 'Wrong year set by UniOS-Mach after Y2K' hack.

ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: timekeeper.c,v 1.6 2013/05/27 21:09:09 miod Exp $ */
d255 5
a259 3
	*chiptime = DS_REGA;
	while (*chipdata & DS_REGA_UIP)
		;
@


1.6
log
@Drop lvalue casts; allows this to compile with gcc 4.
@
text
@d1 1
a1 1
/* $OpenBSD: timekeeper.c,v 1.5 2010/09/20 06:33:47 matthew Exp $ */
d114 1
a114 1
		sc->sc_clock = (void *)(ma->ma_addr + 2040);
d116 1
a116 1
		sc->sc_nvramsize = 2040;
d135 3
d147 1
a147 1
	volatile u_int8_t *chiptime = (void *)sc->sc_clock;
d151 18
a168 9
	chiptime[MK_CSR] |= MK_CSR_READ;	/* enable read (stop time) */
	dt->dt_sec = FROMBCD(chiptime[MK_SEC]);
	dt->dt_min = FROMBCD(chiptime[MK_MIN]);
	dt->dt_hour = FROMBCD(chiptime[MK_HOUR]);
	dt->dt_wday = FROMBCD(chiptime[MK_DOW]);
	dt->dt_day = FROMBCD(chiptime[MK_DOM]);
	dt->dt_mon = FROMBCD(chiptime[MK_MONTH]);
	dt->dt_year = FROMBCD(chiptime[MK_YEAR]) + MK_YEAR0;
	chiptime[MK_CSR] &= ~MK_CSR_READ;	/* time wears on */
d171 1
a171 1
	printf("get %d/%d/%d %d:%d:%d\n",
d186 2
a187 2
	volatile u_int8_t *chiptime = (void *)sc->sc_clock;
	volatile u_int8_t *stamp = (u_int8_t *)sc->sc_nvram + 0x10;
d191 12
a202 9
	chiptime[MK_CSR] |= MK_CSR_WRITE;	/* enable write */
	chiptime[MK_SEC] = TOBCD(dt->dt_sec);
	chiptime[MK_MIN] = TOBCD(dt->dt_min);
	chiptime[MK_HOUR] = TOBCD(dt->dt_hour);
	chiptime[MK_DOW] = TOBCD(dt->dt_wday);
	chiptime[MK_DOM] = TOBCD(dt->dt_day);
	chiptime[MK_MONTH] = TOBCD(dt->dt_mon);
	chiptime[MK_YEAR] = TOBCD(dt->dt_year - MK_YEAR0);
	chiptime[MK_CSR] &= ~MK_CSR_WRITE;	/* load them up */
d205 1
a205 1
	printf("set %d/%d/%d %d:%d:%d\n",
d210 3
a212 1
	stamp[0] = 'R'; stamp[1] = 'T'; stamp[2] = 'C'; stamp[3] = '\0';
d259 5
a263 5
	_DS_GET_BCD(DS_SEC, dt->dt_sec);
	_DS_GET_BCD(DS_MIN, dt->dt_min);
	_DS_GET_BCD(DS_HOUR, dt->dt_hour);
	_DS_GET_BCD(DS_DOW, dt->dt_wday);
	_DS_GET_BCD(DS_DOM, dt->dt_day);
d265 5
a269 1
	_DS_GET_BCD(DS_YEAR, dt->dt_year);
a270 1

d274 1
a274 1
	printf("get %d/%d/%d %d:%d:%d\n",
d301 5
a305 5
	_DS_SET_BCD(DS_SEC, dt->dt_sec);
	_DS_SET_BCD(DS_MIN, dt->dt_min);
	_DS_SET_BCD(DS_HOUR, dt->dt_hour);
	_DS_SET_BCD(DS_DOW, dt->dt_wday);
	_DS_SET_BCD(DS_DOM, dt->dt_day);
d307 2
a308 1
	_DS_SET_BCD(DS_YEAR, dt->dt_year - DS_YEAR0);
d317 1
a317 1
	printf("set %d/%d/%d %d:%d:%d\n",
@


1.5
log
@Get rid of evcount's support for arranging counters in a tree
hierarchy.  Everything attached to a single root node anyway, so at
best we had a bush.

"i think it is good" deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: timekeeper.c,v 1.4 2008/06/26 05:42:11 ray Exp $ */
d199 1
a199 1
	do { *chiptime = (off); (u_int8_t)(data) = (*chipdata); } while (0)
d206 1
a206 1
		c = *chipdata; (u_int8_t)(data) = FROMBCD(c); \
@


1.4
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: timekeeper.c,v 1.3 2004/08/18 13:29:46 aoyama Exp $ */
d129 1
a129 1
	evcount_attach(&sc->sc_count, self->dv_xname, (void *)&ma->ma_ilvl, &evcount_intr);
@


1.3
log
@Add 'irq6/clock0' to evcount on luna88k.
ok miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: timekeeper.c,v 1.2 2004/05/07 14:11:05 aoyama Exp $ */
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.2
log
@Some clean up, especially delete unused nvram related part.  From miod@@
@
text
@d1 1
a1 1
/* $OpenBSD: timekeeper.c,v 1.1.1.1 2004/04/21 15:23:56 aoyama Exp $ */
d44 1
d62 1
d135 4
a138 1
	clockattach(&sc->sc_dev, clockwork);
@


1.2.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d45 1
d50 1
a52 1
#include <machine/autoconf.h>
d54 2
a55 2
#define	MK_YEAR0	1970	/* year offset of MK*/
#define	DS_YEAR0	1990	/* year offset of DS*/
a60 1
	u_int8_t sc_image[2040];
a133 1
	memcpy(sc->sc_image, sc->sc_nvram, sc->sc_nvramsize);
d162 2
a163 2
	dt->dt_year, dt->dt_mon, dt->dt_day,
	dt->dt_hour, dt->dt_min, dt->dt_sec);
d193 2
a194 2
	dt->dt_year, dt->dt_mon, dt->dt_day,
	dt->dt_hour, dt->dt_min, dt->dt_sec);
d257 2
a258 2
	dt->dt_year, dt->dt_mon, dt->dt_day,
	dt->dt_hour, dt->dt_min, dt->dt_sec);
d299 2
a300 2
	dt->dt_year, dt->dt_mon, dt->dt_day,
	dt->dt_hour, dt->dt_min, dt->dt_sec);
@


1.1.1.1
log
@Initial commit for OpenBSD/luna88k, based on OpenBSD/mvme88k, NetBSD/luna68k and CMU Mach.
@
text
@@
