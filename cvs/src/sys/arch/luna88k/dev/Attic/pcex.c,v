head	1.5;
access;
symbols
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2014.12.19.13.17.35;	author aoyama;	state dead;
branches;
next	1.4;
commitid	IpU9SvwyHLVnnHwt;

1.4
date	2014.12.08.13.24.04;	author aoyama;	state Exp;
branches;
next	1.3;
commitid	8mGnZAAHoBrwOFWt;

1.3
date	2014.05.17.10.06.43;	author aoyama;	state Exp;
branches;
next	1.2;

1.2
date	2014.05.08.13.31.00;	author aoyama;	state Exp;
branches;
next	1.1;

1.1
date	2014.04.16.12.01.33;	author aoyama;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Move cbus.c, cbusvar.h, and pcex.c to new 'cbus' directory, to gather
'C-bus' device drivers in it.

More devices on cbus(4) will be added, hopefully :-)

ok miod@@
@
text
@/*	$OpenBSD: pcex.c,v 1.4 2014/12/08 13:24:04 aoyama Exp $	*/

/*
 * Copyright (c) 2014 Kenji Aoyama.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * PC-9801 extension board slot direct access driver for LUNA-88K2.
 */

#include <sys/param.h>
#include <sys/systm.h>	/* tsleep()/wakeup() */
#include <sys/device.h>
#include <sys/ioctl.h>

#include <machine/autoconf.h>
#include <machine/board.h>	/* PC_BASE */
#include <machine/conf.h>
#include <machine/pcex.h>

#include <luna88k/dev/cbusvar.h>

extern int hz;

#if 0
#define PCEX_DEBUG
#endif

#define PCEXMEM_BASE	PC_BASE
#define PCEXIO_BASE	(PC_BASE + 0x1000000)

/* autoconf stuff */
int pcex_match(struct device *, void *, void *);
void pcex_attach(struct device *, struct device *, void *);

struct pcex_softc {
	struct device sc_dev;
	int intr_use[NCBUSISR];
};

const struct cfattach pcex_ca = {
	sizeof(struct pcex_softc), pcex_match, pcex_attach
};

struct cfdriver pcex_cd = {
	NULL, "pcex", DV_DULL
};

/* prototypes */
int pcex_intr(void *);
int pcex_set_int(struct pcex_softc *, u_int);
int pcex_reset_int(struct pcex_softc *, u_int);
int pcex_wait_int(struct pcex_softc *, u_int);

int
pcex_match(struct device *parent, void *cf, void *aux)
{
	return 1;	/* XXX: always matched */
}

void
pcex_attach(struct device *parent, struct device *self, void *args)
{
	struct pcex_softc *sc = (struct pcex_softc *)self;
	int i;

	for (i = 0; i < NCBUSISR; i++)
		sc->intr_use[i] = 0;

	printf("\n");
	return;
}

int
pcexopen(dev_t dev, int flag, int mode, struct proc *p)
{
	switch (minor(dev)) {
	case 0:	/* memory area */
	case 1:	/* I/O port area */
		return 0;
	default:
		return ENXIO;
	}
}

int
pcexclose(dev_t dev, int flag, int mode, struct proc *p)
{
	return (0);
}

paddr_t
pcexmmap(dev_t dev, off_t offset, int prot)
{
	paddr_t cookie = -1;

	switch (minor(dev)) {
	case 0:	/* memory area */
		if (offset >= 0 && offset < 0x1000000)
			cookie = (paddr_t)(PCEXMEM_BASE + offset);
		break;
	case 1:	/* I/O port area */
		if (offset >= 0 && offset < 0x10000)
			cookie = (paddr_t)(PCEXIO_BASE + offset);
		break;
	default:
		break;
	}

	return cookie;
}

int
pcexioctl(dev_t dev, u_long cmd, caddr_t data, int flags, struct proc *p)
{
	struct pcex_softc *sc = NULL;
	u_int level;

	if (pcex_cd.cd_ndevs != 0)
		sc = pcex_cd.cd_devs[0];
	if (sc == NULL)
		return ENXIO;

	level = *(u_int *)data;

	switch(cmd) {
	case PCEXSETLEVEL:
		return pcex_set_int(sc, level);

	case PCEXRESETLEVEL:
		return pcex_reset_int(sc, level);

	case PCEXWAITINT:
		return pcex_wait_int(sc, level);

	default:
		return ENOTTY;
	}
}

int
pcex_set_int(struct pcex_softc *sc, u_int level)
{
	if (level > 6)
		return EINVAL;
	if (sc->intr_use[level] != 0)
		return EINVAL;	/* Duplicate */

	sc->intr_use[level] = 1;
	cbus_isrlink(pcex_intr, &(sc->intr_use[level]), level,
	    sc->sc_dev.dv_xname);

	return 0;
}

int
pcex_reset_int(struct pcex_softc *sc, u_int level)
{
	if (level > 6)
		return EINVAL;
	if (sc->intr_use[level] == 0)
		return EINVAL;	/* Not registered */

	sc->intr_use[level] = 0;
	cbus_isrunlink(pcex_intr, level);

	return 0;
}

int
pcex_wait_int(struct pcex_softc *sc, u_int level)
{
	int ret;

	if (level > 6)
		return EINVAL;
	if (sc->intr_use[level] == 0)
		return EINVAL;	/* Not registered */

	ret = tsleep(&(sc->intr_use[level]), PWAIT | PCATCH, "pcex",
	    hz /* XXX: 1 sec. */);

#ifdef PCEX_DEBUG
	if (ret == EWOULDBLOCK)
		printf("pcex_wait_int: timeout in tsleep\n");
#endif
	return ret;
}

int
pcex_intr(void *arg)
{
#ifdef PCEX_DEBUG
	printf("pcex_intr: called, arg=%p\n", arg);
#endif
	/* Just wakeup(9) for now */
	wakeup(arg);

	return 1;
}
@


1.4
log
@Add an intermediate layer driver, cbus(4), to manage its own
interrupts of PC-9801 extension board slot bus (so-called 'C-bus') on
LUNA-88K2.

Existing pcex(4) is now attached at cbus(4), i.e.

cbus0 at mainbus0
pcex0 at cbus0

With this driver, some other PC-9801 boards might be supported on luna88k
in the (near?) future:-)

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcex.c,v 1.3 2014/05/17 10:06:43 aoyama Exp $	*/
@


1.3
log
@Change the return value of interrupt handler to 0 when nothing is
processed on this driver.

"This is correct" miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcex.c,v 1.2 2014/05/08 13:31:00 aoyama Exp $	*/
a27 1
#include <machine/asm_macro.h>	/* ff1() */
a30 1
#include <machine/intr.h>
d33 1
a33 3
#include <uvm/uvm_extern.h>

#include <luna88k/luna88k/isr.h>
a42 17
#define CBUS_ISR	(PC_BASE + 0x1100000)

/*
 * C-bus Interrupt Status Register
 */
volatile u_int8_t *cisr = (u_int8_t *)CBUS_ISR;

const u_int8_t cisr_int_bits[] = {
	0x40,	/* INT 0 */
	0x20,	/* INT 1 */
	0x10,	/* INT 2 */
	0x08,	/* INT 3 */
	0x04,	/* INT 4 */
	0x02,	/* INT 5 */
	0x01	/* INT 6 */
/*	0x80	   NMI(?), not supported in this driver now */
};
d50 1
a50 1
	u_int8_t int_bits;
d70 1
a70 9
	struct mainbus_attach_args *ma = aux;

	if (strcmp(ma->ma_name, pcex_cd.cd_name))
		return 0;
#if 0
	if (badaddr((vaddr_t)ma->ma_addr, 4))
		return 0;
#endif
	return 1;
d77 1
a77 2
	struct mainbus_attach_args *ma = args;
	u_int8_t i;
d79 2
a80 8
	sc->int_bits = 0x00;

	/* make sure of clearing interrupt flags for INT0-INT6 */
	for (i = 0; i < 7; i++)
		*cisr = i;

	isrlink_autovec(pcex_intr, (void *)self, ma->ma_ilvl,
		ISRPRI_TTY, self->dv_xname);
d83 1
d158 2
d161 3
a163 1
	sc->int_bits |= cisr_int_bits[level];
d173 2
d176 2
a177 1
	sc->int_bits &= ~cisr_int_bits[level];
d189 5
a194 1
	ret = tsleep((void *)sc, PWAIT | PCATCH, "pcex", hz /* XXX: 1 sec. */);
d197 1
a197 1
		printf("%s: timeout in tsleep\n", __func__);
a201 27
/*
 * Note about interrupt on PC-9801 extension board slot
 *
 * PC-9801 extension board slot bus (so-called 'C-bus' in Japan) use 8 own
 * interrupt levels, INT0-INT6, and NMI.  On LUNA-88K2, they all trigger
 * level 4 interrupt, so we need to check the dedicated interrupt status
 * register to know which C-bus interrupt is occurred.
 *
 * The interrupt status register for C-bus is located at (u_int8_t *)CBUS_ISR.
 * Each bit of the register becomes 0 when corresponding C-bus interrupt has
 * occurred, otherwise 1.
 *
 * bit 7 = NMI(?)
 * bit 6 = INT0
 * bit 5 = INT1
 *  :
 * bit 0 = INT6
 *
 * To clear the C-bus interrupt flag, write the corresponding 'bit' number
 * (as u_int_8) to the register.  For example, if you want to clear INT1,
 * you should write '5' like:
 *   *(u_int8_t *)CBUS_ISR = 5;
 */

/*
 * Interrupt handler
 */
a204 13
	struct pcex_softc *sc = (struct pcex_softc *)arg;
	u_int8_t int_status;
	int n;

	/*
	 * LUNA-88K2's interrupt level 4 is shared with other devices,
	 * such as le(4), for example.  So we check:
	 * - the value of our C-bus interrupt status register, and
	 * - if the INT level is what we are looking for.
	 */
	int_status = *cisr & sc->int_bits;
	if (int_status == sc->int_bits) return 0;	/* Not for me */

d206 1
a206 2
	printf("%s: called, *cisr=0x%02x, int_bits = 0x%02x\n",
		__func__, *cisr, sc->int_bits);
a207 1

d209 1
a209 10
	wakeup((void *)sc);

	/* Make the bit pattern that we should clear interrupt flag */
	int_status = int_status ^ sc->int_bits;

	/* Clear each interrupt flag */
	while ((n = ff1(int_status)) != 32) {
		*cisr = (u_int8_t)n;
		int_status &= ~(1 << n); 
	}
@


1.2
log
@The pcexmem(4) and pcexio(4) should be attached on LUNA-88K2 only.

Actually, there seems to be no PC-9801 extension board slot on
'original' LUNA-88K.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pcex.c,v 1.1 2014/04/16 12:01:33 aoyama Exp $	*/
d267 1
a267 1
	if (int_status == sc->int_bits) return -1;	/* Not for me */
@


1.1
log
@Add generic driver for "NEC PC-9801(*) extension board slot" on
LUNA-88K.

LUNA-88K{,2} has one or two slot(s) that can attach the extension
board designed for PC-9801.  This driver provides dedicated mmap(2)
and capability for waiting specified interrupt on that slot so that we
can use the extension board from userland program.

(*)PC-9801 is a Japanese popular personal computer, mainly used in
   1980-90's. (see http://en.wikipedia.org/wiki/NEC_PC-9801)

ok miod@@, and man pages jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD:$	*/
d20 1
a20 1
 * PC-9801 extension board slot direct access driver for LUNA-88K{,2}
d230 1
a230 1
 * interrupt levels, INT0-INT6, and NMI.  On LUNA-88K{,2}, they all trigger
d261 1
a261 1
	 * LUNA-88K{,2}'s interrupt level 4 is shared with other devices,
@

