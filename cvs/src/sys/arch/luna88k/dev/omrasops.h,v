head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.6
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.6
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2017.03.20.19.37.54;	author miod;	state Exp;
branches;
next	1.3;
commitid	QfsUP8Cps6nKwYtj;

1.3
date	2014.09.29.13.57.35;	author aoyama;	state Exp;
branches;
next	1.2;
commitid	uqI0XlMILDY28Lxq;

1.2
date	2014.01.02.15.30.34;	author aoyama;	state Exp;
branches;
next	1.1;

1.1
date	2013.11.16.22.45.37;	author aoyama;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Replace hardcoded addresses with symbolic constants from <machine/board.h>
for enhanced grepability and fewer bad surprises.

ok aoyama@@
@
text
@/*
 * Copyright (c) 2013 Kenji Aoyama
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Helper macros
 */
#define W(addr)  ((u_int32_t *)(addr))
#define R(addr)  ((u_int32_t *)((u_int8_t *)(addr) +  0x40000))
#define P0(addr) ((u_int32_t *)((u_int8_t *)(addr) +  0x40000))
#define P1(addr) ((u_int32_t *)((u_int8_t *)(addr) +  0x80000))
#define P2(addr) ((u_int32_t *)((u_int8_t *)(addr) +  0xC0000))
#define P3(addr) ((u_int32_t *)((u_int8_t *)(addr) + 0x100000))

/*
 * Replacement Rules (rops) (derived from hp300)
 */
#define RR_CLEAR        0x0
#define RR_COPY         0x3

/*
 * ROP function
 *
 * LUNA's frame buffer uses Hitach HM53462 video RAM, which has raster
 * (logic) operation, or ROP, function.  To use ROP function on LUNA, write
 * a 32bit `mask' value to the specified address corresponding to each ROP
 * logic.
 *
 * D: the data writing to the video RAM
 * M: the data already stored on the video RAM
 */

/* operation		index	the video RAM contents will be */
#define ROP_ZERO	 0	/* all 0	*/
#define ROP_AND1	 1	/* D & M	*/ 
#define ROP_AND2	 2	/* ~D & M	*/
/* Not used on LUNA	 3			*/
#define ROP_AND3	 4	/* D & ~M	*/
#define ROP_THROUGH	 5	/* D		*/
#define ROP_EOR		 6	/* (~D & M) | (D & ~M)	*/
#define ROP_OR1		 7	/* D | M	*/
#define ROP_NOR		 8	/* ~D | ~M	*/
#define ROP_ENOR	 9	/* (D & M) | (~D & ~M)	*/
#define ROP_INV1	10	/* ~D		*/
#define ROP_OR2		11	/* ~D | M	*/
#define ROP_INV2	12	/* ~M		*/
#define ROP_OR3		13	/* D | ~M	*/
#define ROP_NAND	14	/* ~D | ~M	*/
#define ROP_ONE		15	/* all 1	*/
@


1.3
log
@Use raster(logic) operation, or ROP, function on LUNA frame buffer.

It makes 4bpp wscons putchar ~20% faster.

ok @@miod
@
text
@a17 10
 * Base addresses of LUNA's frame buffer
 * XXX: We consider only 1bpp and 4bpp for now
 */

#define OMFB_PLANEMASK	0xB1040000	/* BMSEL register */
#define OMFB_FB_WADDR   0xB1080008      /* common plane */
#define OMFB_FB_RADDR   0xB10C0008      /* plane #0 */
#define OMFB_ROPFUNC	0xB12C0000	/* common ROP function */

/*
@


1.2
log
@Add primary support for LUNA-88K 4bpp/8bpp frame buffer.

This brings color support on LUNA's wscons.  And, with the help of recent
development version of 'mlterm-fb' (frame buffer version of ports/x11/mlterm),
graphic images can be displayed in 16/256 colors on the screen.  Thanks to
arakiken, the original developer of mlterm!

This diff is based on NetBSD/luna68k work:
http://mail-index.netbsd.org/source-changes/2013/12/28/msg050266.html

Need more work to coexist with the monochrome X.Org server.

"go ahead!" miod@@
@
text
@d21 2
d25 1
d30 2
a31 2
#define W(addr) ((u_int32_t *)(addr))
#define R(addr) ((u_int32_t *)((u_int8_t *)(addr) + 0x40000))
d42 30
@


1.1
log
@Re-organize luna88k rasops om_{copy,erase}{cols,rows} by using one
generic function, based on hp300/dev/diofb_mono.c.

This also fixes `screen is not updated when delete a character if it
is on the middle of a 32-bit word of the frame buffer' problem.

"Go for it!" miod@@
@
text
@d19 1
a19 1
 * XXX: We consider only 1bpp for now
d27 6
a32 2
#define W(p) (*(u_int32_t *)(p))
#define R(p) (*(u_int32_t *)((u_int8_t *)(p) + 0x40000))
@

