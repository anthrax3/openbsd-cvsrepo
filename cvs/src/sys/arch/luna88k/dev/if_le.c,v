head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.4
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.22
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.20
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.18
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.16
	OPENBSD_5_0:1.5.0.14
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.12
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.10
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.4
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.2
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2
	LUNA88K_INIT:1.1.1.1
	AOYAMA:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2017.03.20.19.37.54;	author miod;	state Exp;
branches;
next	1.10;
commitid	QfsUP8Cps6nKwYtj;

1.10
date	2016.09.01.00.02.57;	author aoyama;	state Exp;
branches;
next	1.9;
commitid	97Brua1spKhyWN4b;

1.9
date	2016.08.29.23.14.50;	author aoyama;	state Exp;
branches;
next	1.8;
commitid	DSUrKBKqVeEuae6b;

1.8
date	2014.12.22.02.26.53;	author tedu;	state Exp;
branches;
next	1.7;
commitid	2Ez9mHW0jDzojG4V;

1.7
date	2014.09.27.06.23.30;	author aoyama;	state Exp;
branches;
next	1.6;
commitid	NAq4Lc4S2S18hETU;

1.6
date	2013.09.24.20.10.45;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.26.05.42.11;	author ray;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.30.13.10.32;	author aoyama;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.27.12.36.32;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.19.18.33.37;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.21.15.23.52;	author aoyama;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.04.21.15.23.52;	author aoyama;	state Exp;
branches;
next	;

1.1.2.1
date	2004.06.05.23.09.46;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Replace hardcoded addresses with symbolic constants from <machine/board.h>
for enhanced grepability and fewer bad surprises.

ok aoyama@@
@
text
@/*	$OpenBSD: if_le.c,v 1.10 2016/09/01 00:02:57 aoyama Exp $	*/
/*	$NetBSD: if_le.c,v 1.33 1996/11/20 18:56:52 gwr Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Adam Glass and Gordon W. Ross.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/* based on OpenBSD: sys/arch/sun3/dev/if_le.c */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/syslog.h>
#include <sys/socket.h>
#include <sys/device.h>

#include <net/if.h>

#include <netinet/in.h>
#include <netinet/if_ether.h>

#include <net/if_media.h>

#include <machine/autoconf.h>
#include <machine/board.h>
#include <machine/cpu.h>

#include <dev/ic/lancereg.h>
#include <dev/ic/lancevar.h>
#include <dev/ic/am7990reg.h>
#include <dev/ic/am7990var.h>

#include <luna88k/luna88k/isr.h>

/*
 * LANCE registers.
 * The real stuff is in dev/ic/am7990reg.h
 */
struct lereg1 {
	volatile uint16_t	ler1_rdp;	/* data port */
	volatile unsigned	:16 ;		/* LUNA-88K2 has a 16 bit gap */
	volatile uint16_t	ler1_rap;	/* register select port */
};

/*
 * Ethernet software status per interface.
 * The real stuff is in dev/ic/am7990var.h
 */
struct	le_softc {
	struct	am7990_softc sc_am7990;	/* glue to MI code */

	struct	lereg1 *sc_r1;		/* LANCE registers */
};

int	le_match(struct device *, void *, void *);
void	le_attach(struct device *, struct device *, void *);

const struct cfattach le_ca = {
	sizeof(struct le_softc), le_match, le_attach
};

void lewrcsr(struct lance_softc *, uint16_t, uint16_t);
uint16_t lerdcsr(struct lance_softc *, uint16_t);
void myetheraddr(uint8_t *);

void
lewrcsr(struct lance_softc *sc, uint16_t port, uint16_t val)
{
	register struct lereg1 *ler1 = ((struct le_softc *)sc)->sc_r1;

	ler1->ler1_rap = port;
	ler1->ler1_rdp = val;
}

uint16_t
lerdcsr(struct lance_softc *sc, uint16_t port)
{
	register struct lereg1 *ler1 = ((struct le_softc *)sc)->sc_r1;
	uint16_t val;

	ler1->ler1_rap = port;
	val = ler1->ler1_rdp;
	return (val);
}

int
le_match(struct device *parent, void *cf, void *aux)
{
	struct mainbus_attach_args *ma = aux;

	if (strcmp(ma->ma_name, le_cd.cd_name))
		return (0);

	return (1);
}

void
le_attach(struct device *parent, struct device *self, void *aux)
{
	struct le_softc *lesc = (struct le_softc *)self;
	struct lance_softc *sc = &lesc->sc_am7990.lsc;
	struct mainbus_attach_args *ma = aux;

	lesc->sc_r1 = (struct lereg1 *)ma->ma_addr;	/* LANCE */

	sc->sc_mem = (void *)(TRI_PORT_RAM + 0x10000);	/* SRAM */
	sc->sc_conf3 = LE_C3_BSWP;
	sc->sc_addr = (u_long)sc->sc_mem & 0xffffff;
	sc->sc_memsize = 64 * 1024;			/* 64KB */

	myetheraddr(sc->sc_arpcom.ac_enaddr);

	sc->sc_copytodesc = lance_copytobuf_contig;
	sc->sc_copyfromdesc = lance_copyfrombuf_contig;
	sc->sc_copytobuf = lance_copytobuf_contig;
	sc->sc_copyfrombuf = lance_copyfrombuf_contig;
	sc->sc_zerobuf = lance_zerobuf_contig;

	sc->sc_rdcsr = lerdcsr;
	sc->sc_wrcsr = lewrcsr;
	sc->sc_hwreset = NULL;
	sc->sc_hwinit = NULL;

	am7990_config(&lesc->sc_am7990);

	isrlink_autovec(am7990_intr, (void *)sc, ma->ma_ilvl, ISRPRI_NET,
	    self->dv_xname);
}

/*
 * Partially taken from NetBSD/luna68k
 * 
 * LUNA-88K has FUSE ROM, which contains MAC address.  The FUSE ROM
 * contents are stored in fuse_rom_data[] during cpu_startup(). 
 * 
 * LUNA-88K2 has 16Kbit NVSRAM on its ethercard, whose contents are
 * accessible 4bit-wise by ctl register operation.  The register is
 * mapped at 0xF1000008.
 */

extern int machtype;
extern char fuse_rom_data[];

void
myetheraddr(uint8_t *ether)
{
	unsigned i, loc;
	volatile struct { uint32_t ctl; } *ds1220;

	switch (machtype) {
	case LUNA_88K:
		/*
		 * fuse_rom_data[] begins with "ENADDR=00000Axxxxxx"
		 */
		loc = 7;
		for (i = 0; i < 6; i++) {
			int u, l;

			u = fuse_rom_data[loc];
			u = (u < 'A') ? u & 0xf : u - 'A' + 10;
			l = fuse_rom_data[loc + 1];
			l = (l < 'A') ? l & 0xf : l - 'A' + 10;

			ether[i] = l | (u << 4);
			loc += 2;
		}
		break;
	case LUNA_88K2: 
		ds1220 = (void *)(LANCE_ADDR + 8);
		loc = 12;
		for (i = 0; i < 6; i++) {
			unsigned u, l, hex;

			ds1220->ctl = (loc) << 16;
			u = 0xf0 & (ds1220->ctl >> 12);
			ds1220->ctl = (loc + 1) << 16;
			l = 0x0f & (ds1220->ctl >> 16);
			hex = (u < '9') ? l : l + 9;

			ds1220->ctl = (loc + 2) << 16;
			u = 0xf0 & (ds1220->ctl >> 12);
			ds1220->ctl = (loc + 3) << 16;
			l = 0x0f & (ds1220->ctl >> 16);

			ether[i] = ((u < '9') ? l : l + 9) | (hex << 4);
			loc += 4;
		}
		break;
	default:
		ether[0] = 0x00; ether[1] = 0x00; ether[2] = 0x0a;
		ether[3] = 0xDE; ether[4] = 0xAD; ether[5] = 0x00;
		break;
	}
}
@


1.10
log
@space -> tab
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.9 2016/08/29 23:14:50 aoyama Exp $	*/
d131 1
a131 1
	sc->sc_mem = (void *)0x71010000;		/* SRAM */
d194 1
a194 1
		ds1220 = (void *)0xF1000008;
@


1.9
log
@Change le(4) buffer address to 0x71010000, which is the same address
with NetBSD/luna68k.

LUNA has 128KB so-called '3 port RAM' starting at 0x71000000.
Originally, first 64KB of this area is designed for I/O processor
HD647180, and next 64KB is designed for LANCE.

This makes possible to support I/O processor in the future:-)
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.8 2014/12/22 02:26:53 tedu Exp $	*/
d127 1
a127 1
        struct mainbus_attach_args *ma = aux;
d129 1
a129 1
        lesc->sc_r1 = (struct lereg1 *)ma->ma_addr;     /* LANCE */
d131 4
a134 4
        sc->sc_mem = (void *)0x71010000;                /* SRAM */
        sc->sc_conf3 = LE_C3_BSWP;
        sc->sc_addr = (u_long)sc->sc_mem & 0xffffff;
        sc->sc_memsize = 64 * 1024;                     /* 64KB */
d136 1
a136 1
        myetheraddr(sc->sc_arpcom.ac_enaddr);
d151 1
a151 1
        isrlink_autovec(am7990_intr, (void *)sc, ma->ma_ilvl, ISRPRI_NET,
@


1.8
log
@unifdef INET
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.7 2014/09/27 06:23:30 aoyama Exp $	*/
d131 1
a131 1
        sc->sc_mem = (void *)0x71000000;                /* SRAM */
@


1.7
log
@Change spaces to tab.  No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.6 2013/09/24 20:10:45 miod Exp $	*/
a43 1
#ifdef INET
a45 1
#endif
@


1.6
log
@Sync the MI LANCE code ( le(4) ) with NetBSD, except for the following:
- the am7990_get() - now lance_get() - is unchanged.
- the interrupt acknowledge logic is unchanged, and will disable interrupts,
  then acknowledge all interrupt conditions.

Add ILACC (79900) support (from NetBSD).

Both LANCE (am7990.c) and ILACC (am79900.c) code share as much common code
(lance.c) as possible. This affects all le(4) attachments, but the changes
are mostly mechanical, to split am7990-specific parts from lance-agnostic
parts.

Compile tested on all affected platforms. Tested on alpha, hp300, luna88k,
mvme88k, sparc, sparc64 and vax.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.5 2008/06/26 05:42:11 ray Exp $	*/
d116 1
a116 1
        struct mainbus_attach_args *ma = aux;
d118 2
a119 2
        if (strcmp(ma->ma_name, le_cd.cd_name))
                return (0);
d121 1
a121 1
        return (1);
d174 1
a174 1
        unsigned i, loc;
d190 1
a190 1
		
@


1.5
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.4 2004/08/30 13:10:32 aoyama Exp $	*/
d55 2
d67 3
a69 3
	volatile u_int16_t	ler1_rdp;	/* data port */
	volatile unsigned	: 16 ;		/* LUNA-88K2 has a 16 bit gap */
	volatile u_int16_t	ler1_rap;	/* register select port */
d82 2
a83 2
static int	le_match(struct device *, void *, void *);
static void	le_attach(struct device *, struct device *, void *);
d85 1
a85 1
struct cfattach le_ca = {
d89 6
a94 8
hide void lewrcsr(struct am7990_softc *, u_int16_t, u_int16_t);
hide u_int16_t lerdcsr(struct am7990_softc *, u_int16_t);
hide void myetheraddr(u_int8_t *);

hide void
lewrcsr(sc, port, val)
	struct am7990_softc *sc;
	u_int16_t port, val;
d102 2
a103 4
hide u_int16_t
lerdcsr(sc, port)
	struct am7990_softc *sc;
	u_int16_t port;
d106 1
a106 1
	u_int16_t val;
d113 2
a114 4
static int
le_match(parent, cf, aux)
        struct device *parent;
        void *cf, *aux;
d125 1
a125 3
le_attach(parent, self, aux)
        struct device *parent, *self;
        void *aux;
d128 1
a128 1
	struct am7990_softc *sc = &lesc->sc_am7990;
d140 5
a144 5
	sc->sc_copytodesc = am7990_copytobuf_contig;
	sc->sc_copyfromdesc = am7990_copyfrombuf_contig;
	sc->sc_copytobuf = am7990_copytobuf_contig;
	sc->sc_copyfrombuf = am7990_copyfrombuf_contig;
	sc->sc_zerobuf = am7990_zerobuf_contig;
d151 1
a151 1
	am7990_config(sc);
d171 2
a172 3
hide void
myetheraddr(ether)
        u_int8_t *ether;
d175 1
a175 1
	volatile struct { u_int32_t ctl; } *ds1220;
@


1.4
log
@Add the original LUNA-88K support.
- retrieve auto-boot information from NVRAM
- retrieve ethernet address information from FUSE ROM
They are stored different way from LUNA-88K2.

Tested by Jeff McMahill, ok by miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.3 2004/07/27 12:36:32 miod Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.3
log
@Add per-device evcount interrupt counters; also use LIST_xxx macros in isr.c

ok aaron@@, tested aoyama@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.2 2004/06/19 18:33:37 miod Exp $	*/
d59 1
d171 1
a171 1
 * Taken from NetBSD/luna68k
d173 6
a178 3
 * LUNA-88K2 (and LUNA-88K?) has 16Kbit NVSRAM on its ethercard, whose
 * contents are accessible 4bit-wise by ctl register operation.  The
 * register is mapped at 0xF1000008.
d181 3
d191 43
a233 18
	ds1220 = (void *)0xF1000008;
	loc = 12;
	for (i = 0; i < 6; i++) {
		unsigned u, l, hex;

		ds1220->ctl = (loc) << 16;
		u = 0xf0 & (ds1220->ctl >> 12);
		ds1220->ctl = (loc + 1) << 16;
		l = 0x0f & (ds1220->ctl >> 16);
		hex = (u < '9') ? l : l + 9;

		ds1220->ctl = (loc + 2) << 16;
		u = 0xf0 & (ds1220->ctl >> 12);
		ds1220->ctl = (loc + 3) << 16;
		l = 0x0f & (ds1220->ctl >> 16);

		ether[i] = ((u < '9') ? l : l + 9) | (hex << 4);
		loc += 4;
@


1.2
log
@Trim includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.1 2004/04/21 15:23:52 aoyama Exp $	*/
d165 2
a166 1
        isrlink_autovec(am7990_intr, (void *)sc, ma->ma_ilvl, ISRPRI_NET);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: if_le.c,v 1.12 2000/08/28 22:03:01 miod Exp $	*/
a40 2

#include "bpfilter.h"
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1.1.1
log
@Initial commit for OpenBSD/luna88k, based on OpenBSD/mvme88k, NetBSD/luna68k and CMU Mach.
@
text
@@
