head	1.78;
access;
symbols
	OPENBSD_6_1:1.66.0.4
	OPENBSD_6_1_BASE:1.66
	OPENBSD_6_0:1.60.0.2
	OPENBSD_6_0_BASE:1.60
	OPENBSD_5_9:1.59.0.4
	OPENBSD_5_9_BASE:1.59
	OPENBSD_5_8:1.59.0.6
	OPENBSD_5_8_BASE:1.59
	OPENBSD_5_7:1.59.0.2
	OPENBSD_5_7_BASE:1.59
	OPENBSD_5_6:1.55.0.4
	OPENBSD_5_6_BASE:1.55
	OPENBSD_5_5:1.52.0.4
	OPENBSD_5_5_BASE:1.52
	OPENBSD_5_4:1.48.0.2
	OPENBSD_5_4_BASE:1.48
	OPENBSD_5_3:1.46.0.2
	OPENBSD_5_3_BASE:1.46
	OPENBSD_5_2:1.44.0.4
	OPENBSD_5_2_BASE:1.44
	OPENBSD_5_1_BASE:1.44
	OPENBSD_5_1:1.44.0.2
	OPENBSD_5_0:1.43.0.2
	OPENBSD_5_0_BASE:1.43
	OPENBSD_4_9:1.40.0.2
	OPENBSD_4_9_BASE:1.40
	OPENBSD_4_8:1.37.0.2
	OPENBSD_4_8_BASE:1.37
	OPENBSD_4_7:1.16.0.2
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.14.0.6
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.2
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.9.0.2
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.6.0.2
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	SMP:1.3.0.2
	LUNA88K_INIT:1.1.1.1
	AOYAMA:1.1.1;
locks; strict;
comment	@# @;


1.78
date	2017.09.28.16.16.34;	author patrick;	state Exp;
branches;
next	1.77;
commitid	Ezr33FQDJBR1PYKP;

1.77
date	2017.09.12.08.23.42;	author mpi;	state Exp;
branches;
next	1.76;
commitid	Kz6PiS7Kl8MPR4Dx;

1.76
date	2017.08.12.20.26.11;	author mpi;	state Exp;
branches;
next	1.75;
commitid	roR0xsg7L0cDbiq8;

1.75
date	2017.07.23.09.17.17;	author aoyama;	state Exp;
branches;
next	1.74;
commitid	Xso53vaHdfOSocCV;

1.74
date	2017.07.21.13.27.21;	author aoyama;	state Exp;
branches;
next	1.73;
commitid	OE2r9OrOIj8K98se;

1.73
date	2017.07.20.12.07.54;	author aoyama;	state Exp;
branches;
next	1.72;
commitid	T7fLWDCeNRyp6m1i;

1.72
date	2017.07.18.16.43.27;	author tb;	state Exp;
branches;
next	1.71;
commitid	iapv8276IrtCm0Fi;

1.71
date	2017.06.29.16.51.35;	author espie;	state Exp;
branches;
next	1.70;
commitid	aLZBh2QedXJF67Iu;

1.70
date	2017.06.11.22.51.21;	author deraadt;	state Exp;
branches;
next	1.69;
commitid	aJQfgtCEBEOL2P4T;

1.69
date	2017.06.11.20.50.32;	author bluhm;	state Exp;
branches;
next	1.68;
commitid	UEZLHpDQ2LYKTb3D;

1.68
date	2017.06.05.12.43.59;	author deraadt;	state Exp;
branches;
next	1.67;
commitid	wfRVAv0JN8rqN4EA;

1.67
date	2017.06.03.22.21.33;	author deraadt;	state Exp;
branches;
next	1.66;
commitid	SGp9KIY6OZAZGoKD;

1.66
date	2016.11.29.09.08.34;	author mpi;	state Exp;
branches;
next	1.65;
commitid	yUJbDchhkVm6F1HA;

1.65
date	2016.11.15.09.08.38;	author natano;	state Exp;
branches;
next	1.64;
commitid	uQeojuKIzgIWOEnv;

1.64
date	2016.10.27.20.44.20;	author natano;	state Exp;
branches;
next	1.63;
commitid	eR4vLZnymgQjVxbj;

1.63
date	2016.10.24.18.26.17;	author deraadt;	state Exp;
branches;
next	1.62;
commitid	84F8eQ949AbxN83e;

1.62
date	2016.10.15.13.45.08;	author deraadt;	state Exp;
branches;
next	1.61;
commitid	TtDw6IYffbT8oPEE;

1.61
date	2016.10.14.18.43.01;	author deraadt;	state Exp;
branches;
next	1.60;
commitid	dUZQxi6w3YqAb6KQ;

1.60
date	2016.04.29.12.44.52;	author mpi;	state Exp;
branches;
next	1.59;
commitid	Vbd8R29nZBKG6KtM;

1.59
date	2015.01.13.01.12.49;	author deraadt;	state Exp;
branches;
next	1.58;
commitid	xEYSgcMiEU7N21VE;

1.58
date	2015.01.11.19.25.13;	author tedu;	state Exp;
branches;
next	1.57;
commitid	Jqptj5xcqx8IMSNU;

1.57
date	2014.11.18.01.17.37;	author deraadt;	state Exp;
branches;
next	1.56;
commitid	Qj1gzxwenHvm4gTb;

1.56
date	2014.10.04.18.10.14;	author brad;	state Exp;
branches;
next	1.55;
commitid	iaz4yUwbbR9oynrV;

1.55
date	2014.07.01.20.26.09;	author miod;	state Exp;
branches;
next	1.54;
commitid	iAtGSRVdQhSqPb5V;

1.54
date	2014.06.09.16.26.32;	author miod;	state Exp;
branches;
next	1.53;
commitid	CkVHFMR82yg837kv;

1.53
date	2014.05.08.22.17.33;	author miod;	state Exp;
branches;
next	1.52;

1.52
date	2013.11.02.23.42.12;	author miod;	state Exp;
branches;
next	1.51;

1.51
date	2013.11.02.23.06.18;	author miod;	state Exp;
branches;
next	1.50;

1.50
date	2013.10.30.18.20.59;	author miod;	state Exp;
branches;
next	1.49;

1.49
date	2013.10.15.19.23.28;	author guenther;	state Exp;
branches;
next	1.48;

1.48
date	2013.06.23.20.33.51;	author miod;	state Exp;
branches;
next	1.47;

1.47
date	2013.03.30.07.25.20;	author tedu;	state Exp;
branches;
next	1.46;

1.46
date	2013.01.07.13.05.14;	author aoyama;	state Exp;
branches;
next	1.45;

1.45
date	2013.01.05.11.20.55;	author miod;	state Exp;
branches;
next	1.44;

1.44
date	2011.11.08.18.41.34;	author matthieu;	state Exp;
branches;
next	1.43;

1.43
date	2011.07.07.22.28.18;	author guenther;	state Exp;
branches;
next	1.42;

1.42
date	2011.07.06.02.08.05;	author tedu;	state Exp;
branches;
next	1.41;

1.41
date	2011.04.15.02.41.28;	author guenther;	state Exp;
branches;
next	1.40;

1.40
date	2010.12.30.18.49.31;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2010.12.02.20.57.08;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2010.12.02.04.35.02;	author deraadt;	state Exp;
branches;
next	1.37;

1.37
date	2010.06.01.23.49.22;	author deraadt;	state Exp;
branches;
next	1.36;

1.36
date	2010.05.28.14.27.08;	author guenther;	state Exp;
branches;
next	1.35;

1.35
date	2010.05.25.21.15.27;	author deraadt;	state Exp;
branches;
next	1.34;

1.34
date	2010.05.25.17.27.55;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2010.05.25.15.05.01;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2010.05.25.02.35.02;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2010.05.24.23.19.22;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	2010.05.24.19.58.51;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2010.05.24.14.59.16;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2010.05.23.15.04.19;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2010.04.28.15.31.33;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2010.04.27.16.54.53;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2010.04.27.06.46.26;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2010.04.27.05.07.29;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2010.04.27.05.05.21;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2010.04.27.04.31.47;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2010.04.27.03.37.37;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2010.04.26.22.21.15;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2010.04.26.22.11.37;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2010.04.26.20.50.16;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2010.04.26.18.58.30;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2009.10.19.19.46.56;	author guenther;	state Exp;
branches;
next	1.15;

1.15
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.11.21.02.03;	author pirofti;	state Exp;
branches;
next	1.13;

1.13
date	2008.04.12.21.04.17;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2007.11.30.07.52.06;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.25.18.25.28;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.25.11.23.33;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2007.07.30.16.23.33;	author thib;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.27.05.58.11;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.04.19.24.11;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.26.13.56.15;	author aoyama;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.13.09.47.05;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.02.13.58.15;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.29.19.54.34;	author miod;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2004.04.29.14.33.24;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.21.15.23.47;	author aoyama;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.04.21.15.23.47;	author aoyama;	state Exp;
branches;
next	;

1.3.2.1
date	2004.06.05.23.09.45;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.78
log
@When option DDB_STRUCTINFO was removed from the kernel, too much from
the kernel makefiles was removed which lead to C files not being re-
compiled when a dependency changed.  This can lead to panics in odd
places and generally a broken system.

ok deraadt@@
@
text
@#	$OpenBSD: Makefile.luna88k,v 1.77 2017/09/12 08:23:42 mpi Exp $

# For instructions on building kernels consult the config(8) and options(4)
# manual pages.
#
# N.B.: NO DEPENDENCIES ON FOLLOWING FLAGS ARE VISIBLE TO MAKEFILE
#	IF YOU CHANGE THE DEFINITION OF ANY OF THESE RECOMPILE EVERYTHING
# DEBUG is set to -g by config if debugging is requested (config -g).
# PROF is set to -pg by config if profiling is requested (config -p).

.include <bsd.own.mk>

SIZE?=	size
STRIP?=	ctfstrip

# source tree is located via $S relative to the compilation directory
.ifndef S
S!=	cd ../../../..; pwd
.endif

_machdir?=	$S/arch/${_mach}
_archdir?=	$S/arch/${_arch}

INCLUDES=	-nostdinc -I$S -I${.OBJDIR} -I$S/arch
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__ -MD -MP
CWARNFLAGS=	-Werror -Wall -Wimplicit-function-declaration \
		-Wno-main -Wno-uninitialized \
		-Wframe-larger-than=2047

CMACHFLAGS=	-mno-check-zero-division -mmemcpy
CMACHFLAGS+=	-fno-builtin-printf -fno-builtin-snprintf \
		-fno-builtin-vsnprintf -fno-builtin-log \
		-fno-builtin-log2 -fno-builtin-malloc 
SORTR=		sort -R
.if ${IDENT:M-DNO_PROPOLICE}
CMACHFLAGS+=	-fno-stack-protector
.endif
.if ${IDENT:M-DSMALL_KERNEL}
SORTR=		cat
.endif

DEBUG?=		-g
COPTS?=		-O2
CFLAGS=		${DEBUG} ${CWARNFLAGS} ${CMACHFLAGS} ${COPTS} ${PIPE}
AFLAGS=		-D_LOCORE -x assembler-with-cpp ${CWARNFLAGS} ${CMACHFLAGS}
LINKFLAGS=	-T ld.script -Ttext 0x80000 -e __start -X -N --warn-common -nopie

HOSTCC?=	${CC}
HOSTED_CPPFLAGS=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS=	${CFLAGS}
HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

NORMAL_C_NOP=	${CC} ${CFLAGS} ${CPPFLAGS} -c $<
NORMAL_C=	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c $<
NORMAL_S=	${CC} ${AFLAGS} ${CPPFLAGS} -c $<
PROFILE_C=	${CC} -S -c ${CFLAGS} ${CPPFLAGS} $<; \
		sed -e s/_mcount/mcount/ -e s/subrmcount/subr_mcount/ <$*.s | \
		${AS} -o $@@; \
		rm -f $*.s

%OBJS

%CFILES

%SFILES

# load lines for config "xxx" will be emitted as:
# xxx: ${SYSTEM_DEP} swapxxx.o
#	${SYSTEM_LD_HEAD}
#	${SYSTEM_LD} swapxxx.o
#	${SYSTEM_LD_TAIL}
SYSTEM_HEAD=	locore0.o gap.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS} param.o ioconf.o
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ld.script
SYSTEM_LD_HEAD=	@@rm -f $@@
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_HEAD} vers.o $${OBJS}'; \
		umask 007; \
		echo ${OBJS} param.o ioconf.o vers.o | tr " " "\n" | ${SORTR} > lorder; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} `cat lorder`
SYSTEM_LD_TAIL=	@@${SIZE} $@@

.if ${DEBUG} == "-g"
STRIPFLAGS=	-S
SYSTEM_LD_TAIL+=; umask 007; \
		echo mv $@@ $@@.gdb; rm -f $@@.gdb; mv $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb; \
		${STRIP} ${STRIPFLAGS} -o $@@ $@@.gdb
.else
LINKFLAGS+=	-S
.endif

%LOAD

# cc's -MD puts the source and output paths in the dependency file;
# since those are temp files here we need to fix it up.  It also
# puts the file in /tmp, so we use -MF to put it in the current
# directory as assym.P and then generate assym.d from it with a
# good target name
assym.h: $S/kern/genassym.sh Makefile \
	 ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} -MF assym.P > assym.h.tmp
	sed '1s/.*/assym.h: \\/' assym.P > assym.d
	sort -u assym.h.tmp > assym.h

param.c: $S/conf/param.c
	rm -f param.c
	cp $S/conf/param.c .

param.o: param.c Makefile
	${NORMAL_C}

mcount.o: $S/lib/libkern/mcount.c Makefile
	${NORMAL_C_NOP}

ioconf.o: ioconf.c
	${NORMAL_C}

ld.script: ${_machdir}/conf/ld.script
	cp ${_machdir}/conf/ld.script $@@

makegap.sh:
	cp $S/conf/makegap.sh $@@

MAKE_GAP = LD="${LD}" sh makegap.sh 0x00000000

gap.o:	Makefile makegap.sh vers.o
	${MAKE_GAP}

vers.o: ${SYSTEM_DEP:Ngap.o}
	sh $S/conf/newvers.sh
	${CC} ${CFLAGS} ${CPPFLAGS} ${PROF} -c vers.c

clean:
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* \
	    gap.link ld.script lorder makegap.sh param.c

cleandir: clean
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c

depend obj:

locore0.o: ${_machdir}/${_mach}/locore0.S assym.h
locore.o eh.o mutex.o process.o subr.o: assym.h

newinstall:
	cmp -s bsd /bsd || ln -f /bsd /obsd
	umask 077 && cp bsd /nbsd && mv /nbsd /bsd && \
	    sha256 -h /var/db/kernel.SHA256 /bsd

install: update-link newinstall

# pull in the dependency information
.ifnmake clean
. for o in ${SYSTEM_OBJ:Ngap.o} assym.h
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif

%RULES
@


1.77
log
@Remove option DDB_STRUCTINFO.  Now that ddb(4) is CTF aware, similar
functionnalities are available in GENERIC.

ok jasper@@, deraadt@@, guenther@@, dlg@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.76 2017/08/12 20:26:11 mpi Exp $
d152 11
@


1.76
log
@Use ctfstrip(1) by default to strip kernels.

ok deraadt@@, jasper@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.75 2017/07/23 09:17:17 aoyama Exp $
a47 6
.if ${IDENT:M-DDDB_STRUCT}
DB_STRUCTINFO=	db_structinfo.h
.else
DB_STRUCTINFO=
.endif

d135 1
a135 1
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} \
a142 5
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.pl
	${CC} ${CFLAGS} ${CPPFLAGS} -MT $@@ -gstabs -c $S/ddb/db_structinfo.c
	objdump -g db_structinfo.o | perl $S/ddb/parse_structinfo.pl > $@@
	rm -f db_structinfo.o

a151 14

# pull in the dependency information
.if !empty(DB_STRUCTINFO) && !exists(${DB_STRUCTINFO})
 ${SYSTEM_OBJ}: ${DB_STRUCTINFO}
.endif
.ifnmake clean
. for o in ${SYSTEM_OBJ:Ngap.o} assym.h ${DB_STRUCTINFO}
.  if exists(${o:R}.d)
.   include "${o:R}.d"
.  elif exists($o)
    .PHONY: $o
.  endif
. endfor
.endif
@


1.75
log
@Splitting early startup code out of locore.S into locore0.S, like other
architectures.

"Looking good" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.74 2017/07/21 13:27:21 aoyama Exp $
d14 1
a14 1
STRIP?=	strip
@


1.74
log
@More consistent with other architectures.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.73 2017/07/20 12:07:54 aoyama Exp $
d78 1
a78 1
SYSTEM_HEAD=	locore.o gap.o
d154 2
a155 2
locore.o: ${_machdir}/${_mach}/locore.S assym.h
eh.o mutex.o process.o subr.o: assym.h
@


1.73
log
@Kernel relinking for luna88k, first step.
Not yet split locore.S to locore.S and locore0.S.

ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.72 2017/07/18 16:43:27 tb Exp $
d131 4
a134 2
gap.o:	Makefile makegap.sh
	LD="${LD}" sh makegap.sh 0x00000000
@


1.72
log
@Stop automatically regenerating gap.o (and hence linking a new kernel)
whenever make is issued. Only do this when there are actual source changes
below /sys. This restores the behavior prior to the KARL implementation.

Problem noticed and patiently explained by mpi
implementation with a lot of help from espie

ok mpi, espie, deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.71 2017/06/29 16:51:35 espie Exp $
d34 1
d38 3
d78 2
a79 2
SYSTEM_HEAD=	locore.o param.o ioconf.o
SYSTEM_OBJ=	${SYSTEM_HEAD} ${OBJS}
d84 2
a85 1
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_HEAD} vers.o ${OBJS}
d128 6
d139 2
a140 1
	rm -f *bsd *bsd.gdb *.[dio] [a-z]*.s assym.* ${DB_STRUCTINFO} param.c
d155 1
a155 6
# The install target can be redefined by putting a
# install-kernel-${MACHINE_NAME} target into /etc/mk.conf
MACHINE_NAME!=  uname -n
install: install-kernel-${MACHINE_NAME}
.if !target(install-kernel-${MACHINE_NAME}})
install-kernel-${MACHINE_NAME}:
d157 4
a160 3
	umask 077; cp bsd /nbsd
	mv /nbsd /bsd
.endif
@


1.71
log
@put SYSTEM_SWAP_DEP out of its misery, it died in 1997, along with config.old
"go for it" deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.70 2017/06/11 22:51:21 deraadt Exp $
d159 1
a159 1
. for o in ${SYSTEM_OBJ} assym.h ${DB_STRUCTINFO}
@


1.70
log
@make vers.o not depend on gap.o using a trick, because it is piece of
fiction participating only in the linkphase.
tricks from rpe and espie
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.69 2017/06/11 20:50:32 bluhm Exp $
d123 1
a123 1
vers.o: ${SYSTEM_DEP:Ngap.o} ${SYSTEM_SWAP_DEP}
@


1.69
log
@Use umask 077 instead of cp -p when installing the kernel as root.
Otherwise owner of /bsd could be the build user with permissions
inherited from the compile directory.
OK deraadt@@ tb@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.68 2017/06/05 12:43:59 deraadt Exp $
d123 1
a123 1
vers.o: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.68
log
@The arm* architectures edit the ld.script, creating a copy in the compile
directories.  Copy it in the same way on other architectures, for the same
effect.  Something upcoming will want that file there anyways.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.67 2017/06/03 22:21:33 deraadt Exp $
d150 1
a150 1
	cp -p bsd /nbsd
@


1.67
log
@Create gap.S and gap.o with umask 077.  Create lorder and bsd* with umask 007.
Prying eyes cannot look at the kernels in the compile directory.
ok tb rpe, kernel developers seem unimpacted
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.66 2016/11/29 09:08:34 mpi Exp $
d42 1
a42 2
LDSCRIPT=	${_machdir}/conf/ld.script
LINKFLAGS=	-T ${LDSCRIPT} -Ttext 0x80000 -e __start -X -N --warn-common -nopie
d76 1
a76 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ} ${LDSCRIPT}
d119 3
@


1.66
log
@Build kernel with DEBUG=-g by default.

This will allow us to extract type informations from DWARF2 sections.  It
also makes developer life easier as debug information are now included in
every object.

Resulting kernels will be stripped using strip(1) instead of ld(1).

Kernel build time increases by approximately 10%.  However it is still
possible to disable this by defining DEBUG="".

ok kettenis@@, bluhm@@, natano@@, jasper@@, reyk@@, deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.65 2016/11/15 09:08:38 natano Exp $
d80 1
d82 1
a82 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
d86 1
a86 1
SYSTEM_LD_TAIL+=; \
d148 1
a148 1
	cp bsd /nbsd
@


1.65
log
@Clean up the kernel Makefile's:

- Remove the 'lint' target. lint has been removed with OpenBSD 5.2.
- Remove the 'tags' target. It does nothing of value.
- Replace 'clean::' with 'clean:', as requested by espie and millert,
  and remove files from the 'clean' target, that are never generated.
- Don't create a file called 'depend' in 'make depend', but just do
  nothing instead.

ok mpi tb
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.64 2016/10/27 20:44:20 natano Exp $
d38 1
a82 1
DEBUG?=
@


1.64
log
@We don't generate an eddep script for kernel builds nowadays. The last
reference to eddep in the kernel Makefile I could find is in 4.3BSD,
released some 30 years ago.

ok tb millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.63 2016/10/24 18:26:17 deraadt Exp $
d124 2
a125 3
clean::
	rm -f *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
	    [Ee]rrs linterrs assym.* ${DB_STRUCTINFO} param.c
d130 1
a130 12
lint:
	@@lint -hbxncez -Dvolatile= ${CPPFLAGS} -UKGDB \
	    ${CFILES} ioconf.c param.c | \
	    grep -v 'static function .* unused'

obj:

depend:
	@@touch $@@

tags:
	@@echo "see $S/kern/Makefile for tags"
@


1.63
log
@make cleandir should skip the version file; ok otto millert
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.62 2016/10/15 13:45:08 deraadt Exp $
d125 1
a125 1
	rm -f eddep *bsd *bsd.gdb tags *.[dio] [a-z]*.s \
@


1.62
log
@cleandir: target for kernel compile directories
ok natano
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.61 2016/10/14 18:43:01 deraadt Exp $
d129 1
a129 1
	rm -f Makefile *.h ioconf.c options machine ${_mach} vers.c version
@


1.61
log
@Kernel builds now happen in compile/CONFIG/obj@@ -> /usr/obj/... [or ./obj/,
if srctree is not rooted at /usr/src].  As a result, stock GENERIC & RAMDISK
kernels are commited to the tree, to ensure the src tree can be "readonly"
during builds, with all writes occuring inside the obj space.  config -b
options are handled by ../Makefile.inc.  The canonical new way to configure
one of these kernels is:
    % cd /sys/arch/amd64/compile/GENERIC.MP
    % doas make obj
    % make config
    % make
    % doas cp obj/bsd /bsd
The build infrastructure will use this new mechanism in a de-escalation
way using BUILDUSER.
Much help from natano and tb.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.60 2016/04/29 12:44:52 mpi Exp $
d126 4
a129 1
	    [Ee]rrs linterrs assym.h ${DB_STRUCTINFO}
@


1.60
log
@Do not remove local symbols from the table.

ddb(4) can now see static functions.  That doesn't mean we should start
declaring functions as ``static'', however it helps for the few existing
exceptions.

ok deraadt@@, kettenis@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.59 2015/01/13 01:12:49 deraadt Exp $
d24 1
a24 1
INCLUDES=	-nostdinc -I$S -I. -I$S/arch
d132 2
@


1.59
log
@for the install: target, use cmp as a rough attempt for avoiding repeated
make install
from Simon Nicolussi
ok jsing tedu
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.58 2015/01/11 19:25:13 tedu Exp $
d84 1
a84 2
LINKFLAGS+=	-X
STRIPFLAGS=	-g -x
d90 1
a90 1
LINKFLAGS+=	-S -x
@


1.58
log
@switch prototype warnings to implicit-declaration warnings.
This should catch all the same bad cases, but be a little less aggravating
in circumstances where a prototype isn't necessary
ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.57 2014/11/18 01:17:37 deraadt Exp $
d154 1
a154 2
	rm -f /obsd
	ln /bsd /obsd
@


1.57
log
@(except for the arm architectures...) unify the way the ld.script is
used and depended, mimicking new changes by guenther to amd64.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.56 2014/10/04 18:10:14 brad Exp $
d26 1
a26 1
CWARNFLAGS=	-Werror -Wall -Wstrict-prototypes -Wmissing-prototypes \
@


1.56
log
@Switch the kernel configs over to using -Wframe-larger-than= instead of
-Wstack-larger-than-. This is what modern GCC supports as well as LLVM.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.55 2014/07/01 20:26:09 miod Exp $
d41 2
a42 2
LINKFLAGS=	-T ${_machdir}/conf/ld.script \
		-Ttext 0x80000 -e __start -X -N --warn-common -nopie
d76 1
a76 1
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
@


1.55
log
@Replace the assembly 88100 FPU imprecise exception code (mostly triggered by
denormal results) with C code using softfloat to correctly round the inexact
results in the best possible way according to the current rounding mode.

No functional change intended, and this assembly code was surprisingly almost
non-buggy, as opposed to the precise exception code replaced a few weeks ago;
still an improvement as this replaces 900 lines of arcane assembly with 90
lines of understandable C code.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.54 2014/06/09 16:26:32 miod Exp $
d28 1
a28 1
		-Wstack-larger-than-2047
@


1.54
log
@Replace the unmaintainable assembler code responsible for 88100 precise FPU
fault handling with a C wrapper around the softfloat code, as already done for
88110 kernels.

As a bonus, attempting to read or write FPU control registers but fcr62 and
fcr63 in userland will now correctly signal an illegal instruction, instead
of leaving the destination register unchanged and pretending nothing bad
happened.

Be sure to rm m88100_fp.d in your kernel compile directory after updating your
tree.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.53 2014/05/08 22:17:33 miod Exp $
d146 1
a146 1
eh.o m88100_fp_imp.o mutex.o process.o subr.o: assym.h
@


1.53
log
@Format string fixes for m88k; remove -Wno-format from the m88k kernels.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.52 2013/11/02 23:42:12 miod Exp $
d146 1
a146 1
eh.o m88100_fp.o mutex.o process.o subr.o: assym.h
@


1.52
log
@Use a linker script to align .data to a BATC boundary as well, so that no
DBATC may span over parts of .rodata.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.51 2013/11/02 23:06:18 miod Exp $
d27 1
a27 1
		-Wno-main -Wno-uninitialized -Wno-format \
@


1.51
log
@Link m88k kernels on a BATC boundary.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.50 2013/10/30 18:20:59 miod Exp $
d41 2
a42 1
LINKFLAGS=	-Ttext 0x80000 -e __start -X -N --warn-common -nopie
@


1.50
log
@No longer build luna88k kernels as a.out binaries, now that we have a native
bootloader for ELF kernels.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.49 2013/10/15 19:23:28 guenther Exp $
d41 1
a41 1
LINKFLAGS=	-Ttext 0x20000 -e __start -X -N --warn-common -nopie
@


1.49
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.48 2013/06/23 20:33:51 miod Exp $
a14 1
OBJCOPY?= objcopy
d41 1
a41 2
LINKFLAGS=	-T ${_machdir}/conf/ld.script -Ttext 0x20000 -e __start -X -N \
		    --warn-common -nopie
d79 1
a79 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@
a91 4
SYSTEM_LD_TAIL+=; \
		echo ${OBJCOPY} -O a.out-m88k-openbsd --impure $@@; \
		${OBJCOPY} -O a.out-m88k-openbsd --impure $@@; \
		chmod 755 $@@
@


1.48
log
@Stop using -traditional-cpp on gcc3/4 platforms.

Add CWARNFLAGS to the command line when using -xassembler-with-cpp. We are
mostly interested in -Werror here.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.47 2013/03/30 07:25:20 tedu Exp $
d145 1
a145 1
db_structinfo.h: $S/ddb/db_structinfo.c $S/ddb/parse_structinfo.awk
d147 1
a147 1
	objdump -g db_structinfo.o | awk -f $S/ddb/parse_structinfo.awk > $@@
@


1.47
log
@reorder include search directories. cuts lookups by quite a bit.
ok deraadt miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.46 2013/01/07 13:05:14 aoyama Exp $
d41 1
a41 1
AFLAGS=		-D_LOCORE -x assembler-with-cpp -traditional-cpp ${CMACHFLAGS}
@


1.46
log
@Fix typos.
"Please commit." miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.45 2013/01/05 11:20:55 miod Exp $
d25 1
a25 1
INCLUDES=	-nostdinc -I. -I$S -I$S/arch
@


1.45
log
@Switch m88k ports to ELF.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.44 2011/11/08 18:41:34 matthieu Exp $
d95 2
a96 2
		echo ${OBJCPY} -O a.out-m88k-openbsd --impure $@@; \
		${OBJCPY} -O a.out-m88k-openbsd --impure $@@; \
@


1.44
log
@Garbage collect now unused MKDEP definitions. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.43 2011/07/07 22:28:18 guenther Exp $
d15 1
d42 2
a43 1
LINKFLAGS=	-N -Ttext 0x20000 -e start
d81 1
a81 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@
d86 1
a86 1
STRIPFLAGS=	-g
d92 1
a92 1
LINKFLAGS+=	-x
d94 4
@


1.43
log
@The drahn memorial bad kernel build fix: prevent blood pressure
spikes in other developers by making it so that removal of a .d
file without removing the corresponding object will result in the
latter being treated as out of date.

ok beck@@ art@@ drahn@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.42 2011/07/06 02:08:05 tedu Exp $
a12 1
MKDEP?=	mkdep
@


1.42
log
@make clean should clean .d files, so as to leave a fresh canvas.
ok beck deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.41 2011/04/15 02:41:28 guenther Exp $
d165 5
a169 3
. for o in ${SYSTEM_OBJ:.o=.d} assym.d ${DB_STRUCTINFO:.h=.d}
.  if exists($o)
.   include "$o"
@


1.41
log
@Convert the kernel Makefiles to autogenerate dependencies during compilation
using the -MD option to cc, with -MP, -MT, and -MF where needed, converting
"make depend" to a no-op.  This increases parallelism for those using "make -j"
and keeps the dependencies up to date with each compilation automatically.

sparc and vax users will need to rebuild gcc with support for the
-M[PTF] options before config'ing with this diff.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.40 2010/12/30 18:49:31 deraadt Exp $
d126 1
a126 1
	rm -f eddep *bsd *bsd.gdb tags *.[io] [a-z]*.s \
@


1.40
log
@If genassym fails, sort on the pipeline will indicate no error resulting
in some grief.  Split this out.
From Vladimir Kirillov
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.39 2010/12/02 20:57:08 deraadt Exp $
d26 1
a26 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D__${_mach}__
d75 2
a76 1
SYSTEM_DEP=	Makefile ${SYSTEM_HEAD} ${OBJS}
d96 5
d104 2
a105 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} > assym.h.tmp
d134 3
a139 14
AFILES=	${_machdir}/${_mach}/locore.S
depend:: .depend
.depend: ${AFILES} param.c ioconf.c ${CFILES} ${SFILES} assym.h ${DB_STRUCTINFO}
	${MKDEP} ${AFLAGS} ${CPPFLAGS} ${AFILES}
	${MKDEP} -a ${CFLAGS} ${CPPFLAGS} param.c ioconf.c ${CFILES}
.if !empty(SFILES)
	${MKDEP} -a ${AFLAGS} ${CPPFLAGS} ${SFILES}
.endif
	cat ${_archdir}/${_arch}/genassym.cf ${_machdir}/${_mach}/genassym.cf | \
	    sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} ${CPPFLAGS}
	@@sed -e 's/.*\.o: /assym.h: /' -e 's/\/tmp\/genassym_c.[^ ]*//' \
	    < assym.dep >> .depend
	@@rm -f assym.dep

d141 1
a141 1
	${CC} ${CFLAGS} ${CPPFLAGS} -gstabs -c $S/ddb/db_structinfo.c
d158 12
@


1.39
log
@After the most recent change, make it possible to make -j again.  The
early MD and late MI files must be split up so that vers.o can sneak
between.  Issue spotted by bluhm, repair discussed with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.38 2010/12/02 04:35:02 deraadt Exp $
d98 2
a99 3
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.h.tmp && \
	    mv -f assym.h.tmp assym.h
@


1.38
log
@move vers.o to before the other objects, so that it is not linked last.
having it linked last is bad (on at least i386 and amd64) because the lapic
is mapped over the start of the data segment -- savecore(8) then reads the
version string for a fixed buffer space, and reads into the lapic area
causing unintended side-effects (at least on Intel X5570 and X5680)
found by pedro, discussed with kettenis and mpf and miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.37 2010/06/01 23:49:22 deraadt Exp $
d74 2
a75 2
SYSTEM_OBJ=	locore.o param.o ioconf.o vers.o ${OBJS}
SYSTEM_DEP=	Makefile ${SYSTEM_OBJ}
d77 2
a78 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}'; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ}
@


1.37
log
@use --warn-common for linking (some arch's will show new warnings), and
prefer binutils-compatible options in STRIPFLAGS (now that our non-binutils
strip(1) can handle them too)
ok drahn; miod kettenis (for parts)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.36 2010/05/28 14:27:08 guenther Exp $
d74 1
a74 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS}
d77 2
a78 2
SYSTEM_LD=	@@echo ${LD} ${LINKFLAGS} -o $@@ '$${SYSTEM_OBJ}' vers.o; \
		${LD} ${LINKFLAGS} -o $@@ ${SYSTEM_OBJ} vers.o
@


1.36
log
@${PARAM} is now included in ${CPPFLAGS}, so stop passing it separately
to genassym.sh

ok deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.35 2010/05/25 21:15:27 deraadt Exp $
a42 1
STRIPFLAGS=	-d
d84 1
@


1.35
log
@eh.S includes eh_common.S to make eh.o; fix this dependency
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.34 2010/05/25 17:27:55 deraadt Exp $
d98 1
a98 1
	    sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} ${PARAM} | \
@


1.34
log
@The _arch and _mach variables now come from config(8), decreasing even further
the differences between these files.  You will need a newer config(8) binary
to be able to build kernels.
ok kettenis miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.33 2010/05/25 15:05:01 deraadt Exp $
d151 1
a151 1
eh_common.o m88100_fp.o mutex.o process.o subr.o: assym.h
@


1.33
log
@Hand-list the two-step assym.h -> .[Ss] -> .o dependencies.  The
result: kernels built without 'make depend'-provided information
(ie. the .depend file) are more likely to have their *.[Ss] file
compilations track changes to *.h files.

The "*.o: assym.h" dependencies listed are gotten from reading the
.depend output --- from the biggest kernel possible (ie. GENERIC.MP).
When an architecture changes in a substantial way (new .[sS] files),
the list should be updated in the prettiest way possible.

This is not encouraging people to skip 'make depend'; other issues are
not resolved and may be solved later with a change guenther is working
on.  You can still screwed really easily, so continue running make
depend as config tells you.

Idea from a discussion with drahn
ok drahn, kettenis likes the idea too
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.32 2010/05/25 02:35:02 deraadt Exp $
a21 2
_mach?=		luna88k
_arch?=		m88k
@


1.32
log
@${SRCS} is only used once, and fits onto the line where it is used
idea that came out of discussion with drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.31 2010/05/24 23:19:22 deraadt Exp $
d153 1
a153 1
	${NORMAL_S}
@


1.31
log
@give up on -Wvariable-decl
delete the archaic links: target which is easily misused
handle special .[sS] files in a portable way
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.30 2010/05/24 19:58:51 deraadt Exp $
a133 1
SRCS=	${AFILES} param.c ioconf.c ${CFILES} ${SFILES}
d135 1
a135 1
.depend: ${SRCS} assym.h param.c ${DB_STRUCTINFO}
@


1.30
log
@use the same idiom for stripping gdb kernels.  This relies on strip -o
support for the non-binutils architectures (and that diff is coming..)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.29 2010/05/24 14:59:16 deraadt Exp $
d31 1
a31 1
		-Wstack-larger-than-2047 -Wvariable-decl
d123 1
a123 1
	    [Ee]rrs linterrs makelinks assym.h ${DB_STRUCTINFO}
d133 2
a134 11
links:
	egrep '#if' ${CFILES} | sed -f $S/conf/defines | \
	  sed -e 's/:.*//' -e 's/\.c/.o/' | sort -u > dontlink
	echo ${CFILES} | tr -s ' ' '\12' | sed 's/\.c/.o/' | \
	  sort -u | comm -23 - dontlink | \
	  sed 's,../.*/\(.*.o\),rm -f \1; ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink makelinks

SRCS=	\
	param.c ioconf.c ${CFILES} ${SFILES}

d137 1
@


1.29
log
@Reduce differences between the Makefile.* files for all architectures.
ok various people, tested by fewer people, tested by me on 15.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.28 2010/05/23 15:04:19 deraadt Exp $
d88 3
a90 2
		echo cp $@@ $@@.gdb; rm -f $@@.gdb; cp $@@ $@@.gdb; \
		echo ${STRIP} ${STRIPFLAGS} $@@; ${STRIP} ${STRIPFLAGS} $@@
@


1.28
log
@luna88k moves to defining __luna88k__ instead
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.27 2010/04/28 15:31:33 deraadt Exp $
d15 1
a15 1
STRIP?= strip
d29 2
a30 2
CWARNFLAGS=	-Wall -Werror -Wmissing-prototypes \
		-Wno-uninitialized -Wno-format -Wno-main -Wstrict-prototypes \
d32 5
a36 2
CMACHFLAGS=	-mno-check-zero-division -mmemcpy \
		-fno-builtin-printf -fno-builtin-log
d40 1
d43 1
a43 1
AFLAGS=		-x assembler-with-cpp -traditional-cpp -D_LOCORE ${CMACHFLAGS}
d54 3
a56 7
HOSTED_CPPFLAGS?=${CPPFLAGS:S/^-nostdinc$//}
HOSTED_CFLAGS?=	${CFLAGS}

# compile rules: rules are named ${TYPE}_${SUFFIX}${CONFIG_DEP}
# where TYPE is NORMAL, or PROFILE}; SUFFIX is the file suffix,
# capitalized (e.g. C for a .c file), and CONFIG_DEP is _C if the file
# is marked as config-dependent.
a60 3

HOSTED_C=	${HOSTCC} ${HOSTED_CFLAGS} ${HOSTED_CPPFLAGS} -c $<

d121 1
a121 1
	rm -f eddep *bsd bsd.gdb tags *.[io] [a-z]*.s \
d125 1
a125 1
	@@lint -hbxncez -DGENERIC -Dvolatile= ${CPPFLAGS} ${PARAM} -UKGDB \
d127 1
a127 2
	    grep -v 'struct/union .* never defined' | \
	    grep -v 'possible pointer alignment problem'
@


1.27
log
@clean up more more subtle and stupid differences between the various
Makefile.* files
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.26 2010/04/27 16:54:53 deraadt Exp $
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -D${_mach} -Dm88k
@


1.26
log
@Unifity CPPFLAGS= (using ${_mach}), SYSTEM_LD_TAIL= (always on one line),
and SRCS= (common files always after the \)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.25 2010/04/27 06:46:26 deraadt Exp $
d54 1
a54 1
# where TYPE is NORMAL, DRIVER, or PROFILE}; SUFFIX is the file suffix,
d141 2
a142 2
	  sed 's,../.*/\(.*.o\),rm -f \1;ln -s ../GENERIC/\1 \1,' > makelinks
	sh makelinks && rm -f dontlink
@


1.25
log
@shorten preamble
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.24 2010/04/27 05:07:29 deraadt Exp $
d28 1
a28 1
CPPFLAGS=	${INCLUDES} ${IDENT} ${PARAM} -D_KERNEL -Dluna88k -Dm88k
d85 1
a85 1
SYSTEM_LD_TAIL=	@@${SIZE} $@@; chmod 755 $@@;
d90 1
a90 1
SYSTEM_LD_TAIL+= \
d144 2
a145 1
SRCS=	param.c ioconf.c ${CFILES} ${SFILES}
@


1.24
log
@noone needs comments about QUOTA and TRACE
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.23 2010/04/27 05:05:21 deraadt Exp $
d3 2
a4 9
# This makefile is constructed from a machine description:
#	config machineid
# Most changes should be made in the machine description
#	/sys/arch/luna88k/conf/``machineid''
# after which you should do
#	config machineid
# Machine generic makefile changes should be made in
#	/sys/arch/luna88k/conf/Makefile.luna88k
# after which config should be rerun for all machines of that type.
@


1.23
log
@over the years we have moved to a machine+architectures scheme that has
two directories.  in reality, because of how we place files, it has four:
.../arch/A, .../arch/A/A, .../arch/M, and .../arch/M/M
formalize this A/A and M/M scheme directly in the Makefiles, which makes
them a lot more similar
drahn likes the idea a lot
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.22 2010/04/27 04:31:47 deraadt Exp $
a14 4
#
# -DTRACE	compile in kernel tracing hooks
# -DQUOTA	compile in file system quotas

@


1.22
log
@use -f assymp.dep again; worked out with miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.21 2010/04/27 03:37:37 deraadt Exp $
d174 1
a174 1
locore.o: ${_machdir}/luna88k/locore.S assym.h
@


1.21
log
@alpha/conf/Makefile.alpha
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.20 2010/04/26 22:21:15 deraadt Exp $
d164 1
a164 2
	    sh $S/kern/genassym.sh ${MKDEP} ${CFLAGS} ${CPPFLAGS} | \
	    sort -u > assym.dep
@


1.20
log
@even cleaner mach/arch/machdir/archdir
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.19 2010/04/26 22:11:37 deraadt Exp $
a173 14

# depend on root or device configuration
autoconf.o conf.o: Makefile

# depend on network or filesystem configuration
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile
if_tun.o if_loop.o if_ethersubr.o: Makefile
in_proto.o: Makefile

# depend on maxusers
assym.h machdep.o: Makefile

# depend on CPU configuration
locore.o machdep.o: Makefile
@


1.19
log
@next step towards unification:  make all the genassym chunks handle both
arch and machine dependent files (and add the missing files)
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.18 2010/04/26 20:50:16 deraadt Exp $
a33 1
_machdir?=	$S/arch/luna88k
d35 2
a36 1
_archdir?=	$S/arch/m88k
@


1.18
log
@next unification step: move all MD naming _mach, _machdir, _arch, and _archdir
ok miod drahn
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.17 2010/04/26 18:58:30 deraadt Exp $
d110 5
a114 3
assym.h: $S/kern/genassym.sh ${_archdir}/m88k/genassym.cf Makefile
	sh $S/kern/genassym.sh ${CC} ${CFLAGS} ${CPPFLAGS} \
	    ${PARAM} < ${_archdir}/m88k/genassym.cf > assym.h.tmp && \
d163 3
a165 2
	sh $S/kern/genassym.sh ${MKDEP} -f assym.dep ${CFLAGS} \
	    ${CPPFLAGS} < ${_archdir}/m88k/genassym.cf
@


1.17
log
@first step of unification: spaces at end of lines; comments, etc.
ok miod
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.16 2009/10/19 19:46:56 guenther Exp $
d32 5
a36 2
LUNA88K=	$S/arch/luna88k
M88K=		$S/arch/m88k
d110 1
a110 1
assym.h: $S/kern/genassym.sh ${M88K}/m88k/genassym.cf Makefile
d112 1
a112 1
	    ${PARAM} < ${M88K}/m88k/genassym.cf > assym.h.tmp && \
d162 1
a162 1
	    ${CPPFLAGS} < ${M88K}/m88k/genassym.cf
d186 1
a186 1
locore.o: ${LUNA88K}/luna88k/locore.S assym.h
@


1.16
log
@Correct a target name so that we don't rebuild vers.o (and then
bsd) unless some other object has changed.  Rebuild and reinstall
in /usr/src/usr.sbin/config/ after updating!

"I like it" deraadt@@
@
text
@d1 2
a2 4
#	$OpenBSD: Makefile.luna88k,v 1.15 2009/08/09 23:04:49 miod Exp $
#
# Makefile for OpenBSD
#
d8 1
a8 1
#	 config machineid
d171 3
a173 3
 
# depend on network or filesystem configuration 
uipc_domain.o uipc_proto.o vfs_conf.o: Makefile 
d180 1
a180 1
# depend on CPU configuration 
@


1.15
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.14 2009/01/11 21:02:03 pirofti Exp $
d127 1
a127 1
newvers: ${SYSTEM_DEP} ${SYSTEM_SWAP_DEP}
@


1.14
log
@Fix a sed bug in the makefile's depend target.

What happened was that the output of mkdep was fed to a sed expression
that trimmed a bit more than required and also failed to work when
attempting to do make depend with pcc.

Example:

genassym_c.o: /tmp/genassym.whatever ../../../../../sys/param.h \

was changed to:

assym.h: \

but what was intended was:

assym.h: ../../../../../sys/param.h \

For the pcc -M output things were a bit different and after the make
depend the genassym entry would still remain and make would fail. This
affected all platforms except amd64 and sgi.

Okay miod@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.13 2008/04/12 21:04:17 miod Exp $
d53 6
d133 1
a133 1
		[Ee]rrs linterrs makelinks assym.h
d155 1
a155 1
.depend: ${SRCS} assym.h param.c 
d165 5
@


1.13
log
@Compile kernels with -Wvariable-decl (except on arches with ipmi, for now).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.12 2007/11/30 07:52:06 miod Exp $
d156 2
a157 1
	@@sed -e 's/.*\.o:.* /assym.h: /' < assym.dep >> .depend
@


1.12
log
@Define NORMAL_C_NOP everywhere.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.11 2007/11/25 18:25:28 deraadt Exp $
d41 1
a41 1
		-Wstack-larger-than-2047
@


1.11
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.10 2007/11/25 11:23:33 deraadt Exp $
d62 1
@


1.10
log
@Get rid of the kernel 'libcompat' framework, and instead use conf/files to
decide which files must be pulled into the kernel.  Also conditionalize
the pulling of those files based on the COMPAT_* options.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.9 2007/07/30 16:23:33 thib Exp $
a56 8
### find out what to use for libkern
.include "$S/lib/libkern/Makefile.inc"
.ifndef PROF
LIBKERN=	${KERNLIB}
.else
LIBKERN=	${KERNLIB_PROF}
.endif

d83 1
a83 1
SYSTEM_OBJ=	locore.o param.o ioconf.o ${OBJS} ${LIBKERN}
d113 3
@


1.9
log
@Shuffle the order in which we look for header files, when doing
kernel builds locally this doesnt change much but over NFS this
cuts about 12% of the build time on my setup (i386).

OK miod@@, deraadt@@.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.8 2006/07/27 05:58:11 miod Exp $
a64 8
### find out what to use for libcompat
.include "$S/compat/common/Makefile.inc"
.ifndef PROF
LIBCOMPAT=	${COMPATLIB}
.else
LIBCOMPAT=	${COMPATLIB_PROF}
.endif

d91 1
a91 2
SYSTEM_OBJ=	locore.o \
		param.o ioconf.o ${OBJS} ${LIBKERN} ${LIBCOMPAT}
@


1.8
log
@Compile all kernels with -Wstack-usage-larger-than-2047, now that all
offending code has been taken out and shot. ok deraadt@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.7 2006/05/04 19:24:11 miod Exp $
d37 1
a37 1
INCLUDES=	-nostdinc -I. -I$S/arch -I$S
@


1.7
log
@Now that .S files have proper dependencies, do not hardcode dependencies
on assym.h in Makefile, especially since some files have been renamed...
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.6 2005/09/26 13:56:15 aoyama Exp $
d40 2
a41 1
		-Wno-uninitialized -Wno-format -Wno-main -Wstrict-prototypes
@


1.6
log
@Delete wrong comments, originally came from Makefile.mvme88k.
ok miod@@
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.5 2004/07/13 09:47:05 miod Exp $
a183 2
process.o locore_asm_routines.o eh.o: assym.h
m88100_fp.o : assym.h
@


1.5
log
@Remove compiler options workarounds for savectx breakage.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.4 2004/07/02 13:58:15 miod Exp $
a97 1
# Kernel is linked as a ZMAGIC executable, with start at 10020
@


1.4
log
@Disable a -O2 specific optimization which causes kern_fork (and probably other
files) to be miscompiled, until the problem is fixed in the compiler.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.3 2004/04/29 19:54:34 miod Exp $
d46 1
a46 1
COPTS?=		-O2 -fno-rerun-cse-after-loop
@


1.3
log
@Repair depend phase
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.2 2004/04/29 14:33:24 miod Exp $
d46 1
a46 1
COPTS?=		-O2
@


1.3.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
#	$OpenBSD$
@


1.2
log
@Continue factorizing m88k common code, this time files in <arch>/<arch>
which were copied verbatim from mvme88k to luna88k.

This requires backing out syntactic sugar in mvme88k kernel configuration
files which would deduct the required processor types from the board models,
as the common code only depends upon the M88100 and M88110 defines.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.luna88k,v 1.1.1.1 2004/04/21 15:23:47 aoyama Exp $
d168 1
a168 1
	    ${CPPFLAGS} < ${LUNA88K}/luna88k/genassym.cf
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.mvme88k,v 1.28 2003/08/30 21:15:59 miod Exp $
d35 1
a55 4
### CPU configuration

CPPFLAGS+=	-DM88100

d119 1
a119 1
assym.h: $S/kern/genassym.sh ${LUNA88K}/luna88k/genassym.cf Makefile
d121 1
a121 1
	    ${PARAM} < ${LUNA88K}/luna88k/genassym.cf > assym.h.tmp && \
@


1.1.1.1
log
@Initial commit for OpenBSD/luna88k, based on OpenBSD/mvme88k, NetBSD/luna68k and CMU Mach.
@
text
@@
