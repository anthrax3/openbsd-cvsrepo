head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.6
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.8.0.16
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.8
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.12
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.10
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2
	LUNA88K_INIT:1.1.1.1
	AOYAMA:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2017.03.16.18.13.44;	author miod;	state Exp;
branches;
next	1.10;
commitid	MsqKD4MWLX31WIPJ;

1.10
date	2015.03.03.23.50.37;	author aoyama;	state Exp;
branches;
next	1.9;
commitid	rOCVWqdqaeULSp8N;

1.9
date	2015.02.14.14.54.13;	author aoyama;	state Exp;
branches;
next	1.8;
commitid	cI9PRms3UdTqyOMp;

1.8
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.7;

1.7
date	2010.11.22.21.08.57;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.04.12.49.30;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.26.18.48.55;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.26.05.42.11;	author ray;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.04.13.09.52;	author aoyama;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.11.06.09.07;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.21.15.23.56;	author aoyama;	state Exp;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.04.21.15.23.56;	author aoyama;	state Exp;
branches;
next	;

1.1.2.1
date	2004.06.05.23.09.46;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Use a power of two and left shift, rather than integer multiplication, for
the bus_space access stride. This allows better instruction scheduling by
the compiler.

ok aoyama@@
@
text
@/*	$OpenBSD: bus.h,v 1.10 2015/03/03 23:50:37 aoyama Exp $	*/
/*	$NetBSD: bus.h,v 1.9 1998/01/13 18:32:15 scottr Exp $	*/

/*-
 * Copyright (c) 1996, 1997, 1998 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (C) 1997 Scott Reynolds.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _MACHINE_BUS_H_
#define _MACHINE_BUS_H_

/*
 * Bus address and size types
 */
typedef u_long bus_addr_t;
typedef u_long bus_size_t;

/*
 * Access methods for bus resources and address space.
 */
typedef u_long bus_space_handle_t;
typedef struct luna88k_bus_space_tag *bus_space_tag_t;

struct luna88k_bus_space_tag {
	/* 'stride' for each bytes reading/writing */
	uint8_t	bs_stride_1;
	uint8_t	bs_stride_2;
	uint8_t bs_stride_4;
	uint8_t	bs_stride_8;
	bus_size_t bs_offset;
	uint	bs_flags;
#define	TAG_LITTLE_ENDIAN	0x01
};

#define	SET_TAG_BIG_ENDIAN(t)		((t))->bs_flags &= ~TAG_LITTLE_ENDIAN
#define	SET_TAG_LITTLE_ENDIAN(t)	((t))->bs_flags |= TAG_LITTLE_ENDIAN

#define	IS_TAG_LITTLE_ENDIAN(t)		((t)->bs_flags & TAG_LITTLE_ENDIAN)

/*
 *	int bus_space_map(bus_space_tag_t t, bus_addr_t addr,
 *	    bus_size_t size, int flags, bus_space_handle_t *bshp);
 *
 * Map a region of bus space.
 */

#define	BUS_SPACE_MAP_CACHEABLE		0x01
#define	BUS_SPACE_MAP_LINEAR		0x02

static __inline__ int
bus_space_map(bus_space_tag_t t, bus_addr_t bpa, bus_size_t size, int flags,
    bus_space_handle_t *bshp)
{
	/* direct-mapped on luna88k, with offset */
	*bshp = (bus_space_handle_t)(bpa + (t->bs_offset));
	return 0;
}

/*
 *	void bus_space_unmap(bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t size);
 *
 * Unmap a region of bus space.
 */

static __inline__ void
bus_space_unmap(bus_space_tag_t t, bus_space_handle_t bsh, bus_size_t size)
{
	/* direct-mapped on luna88k; nothing to do */
	return;
}

/*
 *	int bus_space_subregion(bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t offset, bus_size_t size,
 *	    bus_space_handle_t *nbshp);
 *
 * Get a new handle for a subregion of an already-mapped area of bus space.
 */

static __inline__ int
bus_space_subregion(bus_space_tag_t t, bus_space_handle_t bsh,
    bus_size_t offset, bus_size_t size, bus_space_handle_t *nbshp)
{
	*nbshp = bsh + offset;
	return 0;
}

/*
 *	int bus_space_alloc(bus_space_tag_t t, bus_addr_t, rstart,
 *	    bus_addr_t rend, bus_size_t size, bus_size_t align,
 *	    bus_size_t boundary, int flags, bus_addr_t *addrp,
 *	    bus_space_handle_t *bshp);
 *
 * Allocate a region of bus space.
 */

static __inline__ int
bus_space_alloc(bus_space_tag_t tag, bus_addr_t rstart, bus_addr_t rend,
    bus_size_t size, bus_size_t alignment, bus_size_t boundary, int flags,
    bus_addr_t *addrp, bus_space_handle_t *handlep)
{
	panic("bus_space_alloc: unimplemented");
}

/*
 *	int bus_space_free(bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t size);
 *
 * Free a region of bus space.
 */

static __inline__ void
bus_space_free(bus_space_tag_t tag, bus_space_handle_t handle, bus_size_t size)
{
	panic("bus_space_free: unimplemented");
}

/*
 *	u_intN_t bus_space_read_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset);
 *
 * Read a 1, 2, 4, or 8 byte quantity from bus space
 * described by tag/handle/offset.
 */

#define	bus_space_read_1(t, h, o)					\
    (*(volatile u_int8_t *)((h) + ((o) << (t->bs_stride_1))))

#define	__bus_space_read_2(t, h, o)					\
    (*(volatile u_int16_t *)((h) + ((o) << (t->bs_stride_2))))

#define	__bus_space_read_4(t, h, o)					\
    (*(volatile u_int32_t *)((h) + ((o) << (t->bs_stride_4))))

#define bus_space_read_2(t, h, o)					\
    ((IS_TAG_LITTLE_ENDIAN(t)) ? 					\
	letoh16(__bus_space_read_2(t, h, o)) :				\
	__bus_space_read_2(t, h, o))
	
#define bus_space_read_4(t, h, o)					\
    ((IS_TAG_LITTLE_ENDIAN(t)) ? 					\
	letoh32(__bus_space_read_4(t, h, o)) :				\
	__bus_space_read_4(t, h, o))

#if 0	/* Cause a link error for bus_space_read_8 */
#define	bus_space_read_8(t, h, o)	!!! bus_space_read_8 unimplemented !!!
#endif

/*
 *	void bus_space_read_multi_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset,
 *	    u_intN_t *addr, size_t count);
 *
 * Read `count' 1, 2, 4, or 8 byte quantities from bus space
 * described by tag/handle/offset and copy into buffer provided.
 */

static __inline__ void
bus_space_read_multi_1(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int8_t *dest, size_t count)
{
	while ((int)--count >= 0)
		*dest++ = bus_space_read_1(tag, handle, offset);
}

static __inline__ void
bus_space_read_multi_2(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int16_t *dest, size_t count)
{
	while ((int)--count >= 0)
		*dest++ = bus_space_read_2(tag, handle, offset);
}

static __inline__ void
bus_space_read_multi_4(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int32_t *dest, size_t count)
{
	while ((int)--count >= 0)
		*dest++ = bus_space_read_4(tag, handle, offset);
}

#if 0	/* Cause a link error for bus_space_read_multi_8 */
#define	bus_space_read_multi_8	!!! bus_space_read_multi_8 unimplemented !!!
#endif

static __inline__ void
bus_space_read_raw_multi_2(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int8_t *dest, size_t size)
{
	size >>= 1;
	while ((int)--size >= 0) {
		*(u_int16_t *)dest =
		    __bus_space_read_2(tag, handle, offset);
		dest += 2;
	}
}

static __inline__ void
bus_space_read_raw_multi_4(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int8_t *dest, size_t size)
{
	size >>= 2;
	while ((int)--size >= 0) {
		*(u_int32_t *)dest =
		    __bus_space_read_4(tag, handle, offset);
		dest += 4;
	}
}

/*
 *	void bus_space_read_region_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset,
 *	    u_intN_t *addr, size_t count);
 *
 * Read `count' 1, 2, 4, or 8 byte quantities from bus space
 * described by tag/handle and starting at `offset' and copy into
 * buffer provided.
 */

static __inline__ void
bus_space_read_region_1(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int8_t *dest, size_t count)
{
	while ((int)--count >= 0)
		*dest++ = bus_space_read_1(tag, handle, offset++);
}

static __inline__ void
bus_space_read_region_2(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int16_t *dest, size_t count)
{
	while ((int)--count >= 0) {
		*dest++ = bus_space_read_2(tag, handle, offset);
		offset += 2;
	}
}

static __inline__ void
bus_space_read_region_4(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int32_t *dest, size_t count)
{
	while ((int)--count >= 0) {
		*dest++ = bus_space_read_4(tag, handle, offset);
		offset += 4;
	}
}

#if 0	/* Cause a link error for bus_space_read_region_8 */
#define	bus_space_read_region_8	!!! bus_space_read_region_8 unimplemented !!!
#endif

/*
 *	void bus_space_write_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset,
 *	    u_intN_t value);
 *
 * Write the 1, 2, 4, or 8 byte value `value' to bus space
 * described by tag/handle/offset.
 */

#define	bus_space_write_1(t, h, o, v)					\
    ((void)(*(volatile u_int8_t *)((h) + ((o) << (t->bs_stride_1))) = (v)))

#define	__bus_space_write_2(t, h, o, v)					\
    ((void)(*(volatile u_int16_t *)((h) + ((o) << (t->bs_stride_2))) = (v)))

#define	__bus_space_write_4(t, h, o, v)					\
    ((void)(*(volatile u_int32_t *)((h) + ((o) << (t->bs_stride_4))) = (v)))

#define	bus_space_write_2(t, h, o, v)					\
    __bus_space_write_2(t, h, o,					\
	(IS_TAG_LITTLE_ENDIAN(t)) ? htole16(v) : (v))

#define	bus_space_write_4(t, h, o, v)					\
    __bus_space_write_4(t, h, o,					\
	(IS_TAG_LITTLE_ENDIAN(t)) ? htole32(v) : (v))

#if 0	/* Cause a link error for bus_space_write_8 */
#define	bus_space_write_8	!!! bus_space_write_8 not implemented !!!
#endif

/*
 *	void bus_space_write_multi_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset,
 *	    const u_intN_t *addr, size_t count);
 *
 * Write `count' 1, 2, 4, or 8 byte quantities from the buffer
 * provided to bus space described by tag/handle/offset.
 */

static __inline__ void
bus_space_write_multi_1(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int8_t *dest, size_t count)
{
	while ((int)--count >= 0)
		bus_space_write_1(tag, handle, offset, *dest++);
}

static __inline__ void
bus_space_write_multi_2(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int16_t *dest, size_t count)
{
	while ((int)--count >= 0)
		bus_space_write_2(tag, handle, offset, *dest++);
}

static __inline__ void
bus_space_write_multi_4(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int32_t *dest, size_t count)
{
	while ((int)--count >= 0)
		bus_space_write_4(tag, handle, offset, *dest++);
}

#if 0	/* Cause a link error for bus_space_write_8 */
#define	bus_space_write_multi_8(t, h, o, a, c)				\
			!!! bus_space_write_multi_8 unimplemented !!!
#endif

static __inline__ void
bus_space_write_raw_multi_2(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int8_t *dest, size_t size)
{
	size >>= 1;
	while ((int)--size >= 0) {
		__bus_space_write_2(tag, handle, offset,*(u_int16_t *)dest);
		dest += 2;
	}
}

static __inline__ void
bus_space_write_raw_multi_4(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int8_t *dest, size_t size)
{
	size >>= 2;
	while ((int)--size >= 0) {
		__bus_space_write_4(tag, handle, offset, *(u_int32_t *)dest);
		dest += 4;
	}
}

/*
 *	void bus_space_write_region_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset,
 *	    const u_intN_t *addr, size_t count);
 *
 * Write `count' 1, 2, 4, or 8 byte quantities from the buffer provided
 * to bus space described by tag/handle starting at `offset'.
 */

static __inline__ void
bus_space_write_region_1(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int8_t *dest, size_t count)
{
	while ((int)--count >= 0)
		bus_space_write_1(tag, handle, offset++, *dest++);
}

static __inline__ void
bus_space_write_region_2(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int16_t *dest, size_t count)
{
	while ((int)--count >= 0) {
		bus_space_write_2(tag, handle, offset, *dest++);
		offset += 2;
	}
}

static __inline__ void
bus_space_write_region_4(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int32_t *dest, size_t count)
{
	while ((int)--count >= 0) {
		bus_space_write_4(tag, handle, offset, *dest++);
		offset += 4;
	}
}

#if 0	/* Cause a link error for bus_space_write_region_8 */
#define	bus_space_write_region_8					\
			!!! bus_space_write_region_8 unimplemented !!!
#endif

/*
 *	void bus_space_set_multi_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset, u_intN_t val,
 *	    size_t count);
 *
 * Write the 1, 2, 4, or 8 byte value `val' to bus space described
 * by tag/handle/offset `count' times.
 */

static __inline__ void
bus_space_set_multi_1(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int8_t value, size_t count)
{
	while ((int)--count >= 0)
		bus_space_write_1(tag, handle, offset, value);
}

static __inline__ void
bus_space_set_multi_2(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int16_t value, size_t count)
{
	while ((int)--count >= 0)
		bus_space_write_2(tag, handle, offset, value);
}

static __inline__ void
bus_space_set_multi_4(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int32_t value, size_t count)
{
	while ((int)--count >= 0)
		bus_space_write_4(tag, handle, offset, value);
}

#if 0	/* Cause a link error for bus_space_set_multi_8 */
#define	bus_space_set_multi_8						\
			!!! bus_space_set_multi_8 unimplemented !!!
#endif

/*
 *	void bus_space_set_region_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset, u_intN_t val,
 *	    size_t count);
 *
 * Write `count' 1, 2, 4, or 8 byte value `val' to bus space described
 * by tag/handle starting at `offset'.
 */

static __inline__ void
bus_space_set_region_1(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int8_t value, size_t count)
{
	while ((int)--count >= 0)
		bus_space_write_1(tag, handle, offset++, value);
}

static __inline__ void
bus_space_set_region_2(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int16_t value, size_t count)
{
	while ((int)--count >= 0) {
		bus_space_write_2(tag, handle, offset, value);
		offset += 2;
	}
}

static __inline__ void
bus_space_set_region_4(bus_space_tag_t tag, bus_space_handle_t handle,
    bus_addr_t offset, u_int32_t value, size_t count)
{
	while ((int)--count >= 0) {
		bus_space_write_4(tag, handle, offset, value);
		offset += 4;
	}
}

#if 0	/* Cause a link error for bus_space_set_region_8 */
#define	bus_space_set_region_8						\
			!!! bus_space_set_region_8 unimplemented !!!
#endif

/*
 *	void bus_space_copy_N(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh1, bus_size_t off1,
 *	    bus_space_handle_t bsh2, bus_size_t off2,
 *	    size_t count);
 *
 * Copy `count' 1, 2, 4, or 8 byte values from bus space starting
 * at tag/bsh1/off1 to bus space starting at tag/bsh2/off2.
 */

#define	__LUNA88K_copy_N(BYTES)					\
static __inline void __CONCAT(bus_space_copy_,BYTES)		\
	    (bus_space_tag_t,						\
	    bus_space_handle_t bsh1, bus_size_t off1,			\
	    bus_space_handle_t bsh2, bus_size_t off2,			\
	    bus_size_t count);						\
									\
static __inline void							\
__CONCAT(bus_space_copy_,BYTES)(t, h1, o1, h2, o2, c)		\
	bus_space_tag_t t;						\
	bus_space_handle_t h1, h2;					\
	bus_size_t o1, o2, c;						\
{									\
	bus_size_t o;							\
									\
	if ((h1 + o1) >= (h2 + o2)) {					\
		/* src after dest: copy forward */			\
		for (o = 0; c != 0; c--, o += BYTES)			\
			__CONCAT(bus_space_write_,BYTES)(t, h2, o2 + o,	\
			    __CONCAT(bus_space_read_,BYTES)(t, h1, o1 + o)); \
	} else {							\
		/* dest after src: copy backwards */			\
		for (o = (c - 1) * BYTES; c != 0; c--, o -= BYTES)	\
			__CONCAT(bus_space_write_,BYTES)(t, h2, o2 + o,	\
			    __CONCAT(bus_space_read_,BYTES)(t, h1, o1 + o)); \
	}								\
}
__LUNA88K_copy_N(1)
__LUNA88K_copy_N(2)
__LUNA88K_copy_N(4)
#if 0	/* Cause a link error for bus_space_copy_8 */
#define	bus_space_copy_8						\
			!!! bus_space_copy_8 unimplemented !!!
#endif

#undef __LUNA88K_copy_N

/*
 * Bus read/write barrier methods.
 *
 *	void bus_space_barrier(bus_space_tag_t tag,
 *	    bus_space_handle_t bsh, bus_size_t offset,
 *	    bus_size_t len, int flags);
 *
 */
#define	bus_space_barrier(t, h, o, l, f)	\
	((void)((void)(t), (void)(h), (void)(o), (void)(l), (void)(f)))
#define	BUS_SPACE_BARRIER_READ	0x01		/* force read barrier */
#define	BUS_SPACE_BARRIER_WRITE	0x02		/* force write barrier */

#endif /* _MACHINE_BUS_H_ */
@


1.10
log
@Add pcic(4) support on luna88k.

This is basically glue codes attaching pcic(4) at cbus(4/luna88k),
based on src/sys/dev/isa/i82365_isa{,subr}.c.

Tested on some ne(4) network interface cards, wdc(4) with a CF memory
card, and com(4) with an old XJACK modem card.  Currently wi(4) does
not work yet.

suggestions and ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.9 2015/02/14 14:54:13 aoyama Exp $	*/
d179 1
a179 1
    (*(volatile u_int8_t *)((h) + (t->bs_stride_1) * (o)))
d182 1
a182 1
    (*(volatile u_int16_t *)((h) + (t->bs_stride_2) * (o)))
d185 1
a185 1
    (*(volatile u_int32_t *)((h) + (t->bs_stride_4) * (o)))
d314 1
a314 1
    ((void)(*(volatile u_int8_t *)((h) + (t->bs_stride_1) * (o)) = (v)))
d317 1
a317 1
    ((void)(*(volatile u_int16_t *)((h) + (t->bs_stride_2) * (o)) = (v)))
d320 1
a320 1
    ((void)(*(volatile u_int32_t *)((h) + (t->bs_stride_4) * (o)) = (v)))
@


1.9
log
@Add simple bus_space_{map,unmap,subregion} implementation on luna88k.

These are preliminaries for upcoming pcic(4) support on cbus(4/luna88k).

suggestions and ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.8 2011/03/23 16:54:35 pirofti Exp $	*/
d82 2
d86 5
d181 1
a181 1
#define	bus_space_read_2(t, h, o)					\
d184 1
a184 1
#define	bus_space_read_4(t, h, o)					\
d187 10
d245 1
a245 1
		    bus_space_read_2(tag, handle, offset);
d257 1
a257 1
		    bus_space_read_4(tag, handle, offset);
d316 6
d323 2
a324 1
    ((void)(*(volatile u_int16_t *)((h) + (t->bs_stride_2) * (o)) = (v)))
d327 2
a328 1
    ((void)(*(volatile u_int32_t *)((h) + (t->bs_stride_4) * (o)) = (v)))
d378 1
a378 1
		bus_space_write_2(tag, handle, offset,*(u_int16_t *)dest);
d389 1
a389 1
		bus_space_write_4(tag, handle, offset, *(u_int32_t *)dest);
@


1.8
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.7 2010/11/22 21:08:57 miod Exp $	*/
d81 1
d94 8
a101 2
int	bus_space_map(bus_space_tag_t, bus_addr_t, bus_size_t,
	    int, bus_space_handle_t *);
d110 6
a115 1
void	bus_space_unmap(bus_space_tag_t, bus_space_handle_t, bus_size_t);
d125 7
a131 2
int	bus_space_subregion(bus_space_tag_t t, bus_space_handle_t bsh,
	    bus_size_t offset, bus_size_t size, bus_space_handle_t *nbshp);
d142 7
a148 4
int	bus_space_alloc(bus_space_tag_t t, bus_addr_t rstart,
	    bus_addr_t rend, bus_size_t size, bus_size_t align,
	    bus_size_t boundary, int flags, bus_addr_t *addrp,
	    bus_space_handle_t *bshp);
d157 5
a161 2
void	bus_space_free(bus_space_tag_t t, bus_space_handle_t bsh,
	    bus_size_t size);
d221 24
d346 22
@


1.7
log
@Remove bus_space_probe prototype, this function is not implemented.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.6 2010/04/04 12:49:30 miod Exp $	*/
d60 2
a61 2
#ifndef _LUNA88K_BUS_H_
#define _LUNA88K_BUS_H_
d482 1
a482 1
#endif /* _LUNA88K_BUS_H_ */
@


1.6
log
@OpenBSD uses bus_space_copy_#, not bus_space_copy_region_#. Make sure only the
first name is used, and remove any #define foo_region foo compatibility
defines.
Also, on sparc64, do not provide a `raw' version of bus_space_copy.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.5 2009/07/26 18:48:55 miod Exp $	*/
a138 13

/*
 *	int luna88k_bus_space_probe(bus_space_tag_t t,
 *	    bus_space_handle_t bsh, bus_size_t offset, int sz);
 *
 * Probe the bus at t/bsh/offset, using sz as the size of the load.
 *
 * This is a machine-dependent extension, and is not to be used by
 * machine-independent code.
 */

int	luna88k_bus_space_probe(bus_space_tag_t t,
	    bus_space_handle_t bsh, bus_size_t offset, int sz);
@


1.5
log
@Make sure all platforms understand the flags argument of bus_space_map() and
bus_space_alloc() as a bitmask of flags, and not a boolean controlling
cacheability; and make sure the three MI BUS_SPACE_MAP_xxx values documented
in the manual page are defined on all platforms as well.
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.4 2008/06/26 05:42:11 ray Exp $	*/
d445 2
a446 2
#define	__LUNA88K_copy_region_N(BYTES)					\
static __inline void __CONCAT(bus_space_copy_region_,BYTES)		\
d453 1
a453 1
__CONCAT(bus_space_copy_region_,BYTES)(t, h1, o1, h2, o2, c)		\
d472 3
a474 3
__LUNA88K_copy_region_N(1)
__LUNA88K_copy_region_N(2)
__LUNA88K_copy_region_N(4)
d480 1
a480 1
#undef __LUNA88K_copy_region_N
@


1.4
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.3 2005/04/04 13:09:52 aoyama Exp $	*/
d127 1
a127 1
	    bus_size_t boundary, int cacheable, bus_addr_t *addrp,
@


1.3
log
@- Delete implicit * 4 operation in bus_space offset calculation
- Change assembler codes to C codes
tested by myself, ok by miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.2 2004/08/11 06:09:07 miod Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.2
log
@Fix off-by-ones in bus_space_*_multi_*()
tested by aoyama@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.1 2004/04/21 15:23:56 aoyama Exp $	*/
a66 2
/* almost same as OpenBSD/mac68k */

a70 5
 * Value for the luna88k bus space tag, not to be used directly by MI code.
 */
#define LUNA88K_BUS_SPACE_MEM	0	/* space is mem space */

/*
d79 10
a88 2
typedef int	bus_space_tag_t;
typedef u_long	bus_space_handle_t;
d169 1
a169 1
    ((void) t, (*(volatile u_int8_t *)((h) + 4 * (o))))
d172 1
a172 1
    ((void) t, (*(volatile u_int16_t *)((h) + 4 * (o))))
d175 1
a175 1
    ((void) t, (*(volatile u_int32_t *)((h) + 4 * (o))))
d190 23
a212 47
#define	bus_space_read_multi_1(t, h, o, a, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	ld.bu	r13, r10, 0				;	\
		sub	r12, r12, 1				;	\
		st.b	r13, r11, 0				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r11, r11, 1"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (a), "r" (c)	:	\
		    "r10", "r11", "r12", "r13");			\
} while (0);

#define	bus_space_read_multi_2(t, h, o, a, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	ld.hu	r13, r10, 0				;	\
		sub	r12, r12, 1				;	\
		st.hu	r13, r11, 0				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r11, r11, 2"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (a), "r" (c)	:	\
		    "r10", "r11", "r12", "r13");			\
} while (0);

#define	bus_space_read_multi_4(t, h, o, a, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	ld	r13, r10, 0				;	\
		sub	r12, r12, 1				;	\
		st	r13, r11, 0				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r11, r11, 4"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (a), "r" (c)	:	\
		    "r10", "r11", "r12", "r13");			\
} while (0);
d228 27
a254 50
#define	bus_space_read_region_1(t, h, o, a, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	ld.bu	r13, r10, 0				;	\
		st.b	r13, r11, 0				;	\
		sub	r12, r12, 1				;	\
		add	r10, r10, 4				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r11, r11, 1"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (a), "r" (c)	:	\
		    "r10", "r11", "r12", "r13");			\
} while (0);

#define	bus_space_read_region_2(t, h, o, a, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	ld.hu	r13, r10, 0				;	\
		st.hu	r13, r11, 0				;	\
		sub	r12, r12, 1				;	\
		add	r10, r10, 4				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r11, r11, 2"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (a), "r" (c)	:	\
		    "r10", "r11", "r12", "r13");			\
} while (0);

#define	bus_space_read_region_4(t, h, o, a, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	ld	r13, r10, 0				;	\
		st	r13, r11, 0				;	\
		sub	r12, r12, 1				;	\
		add	r10, r10, 4				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r11, r11, 4"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (a), "r" (c)	:	\
		    "r10", "r11", "r12", "r13");			\
} while (0);
d270 1
a270 1
    ((void) t, ((void)(*(volatile u_int8_t *)((h) + 4 * (o)) = (v))))
d273 1
a273 1
    ((void) t, ((void)(*(volatile u_int16_t *)((h) + 4 * (o)) = (v))))
d276 1
a276 1
    ((void) t, ((void)(*(volatile u_int32_t *)((h) + 4 * (o)) = (v))))
d291 23
a313 47
#define	bus_space_write_multi_1(t, h, o, a, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	ld.bu	r13, r11, 0				;	\
		sub	r12, r12, 1				;	\
		st.b	r13, r10, 0				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r11, r11, 1"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (a), "r" (c)	:	\
		    "r10", "r11", "r12", "r13");			\
} while (0);

#define	bus_space_write_multi_2(t, h, o, a, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	ld.hu	r13, r11, 0				;	\
		sub	r12, r12, 1				;	\
		st.hu	r13, r10, 0				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r11, r11, 2"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (a), "r" (c)	:	\
		    "r10", "r11", "r12", "r13");			\
} while (0);

#define	bus_space_write_multi_4(t, h, o, a, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	ld	r13, r11, 0				;	\
		sub	r12, r12, 1				;	\
		st	r13, r10, 0				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r11, r11, 4"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (a), "r" (c)	:	\
		    "r10", "r11", "r12", "r13");			\
} while (0);
d329 27
a355 50
#define	bus_space_write_region_1(t, h, o, a, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	ld.bu	r13, r11, 0				;	\
		sub	r12, r12, 1				;	\
		st.b	r13, r10, 0				;	\
		add	r10, r10, 4				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r11, r11, 1"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (a), "r" (c)	:	\
		    "r10", "r11", "r12", "r13");			\
} while (0);

#define	bus_space_write_region_2(t, h, o, a, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	ld.hu	r13, r11, 0				;	\
		sub	r12, r12, 1				;	\
		st.hu	r13, r10, 0				;	\
		add	r10, r10, 4				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r11, r11, 2"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (a), "r" (c)	:	\
		    "r10", "r11", "r12", "r13");			\
} while (0);

#define	bus_space_write_region_4(t, h, o, a, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	ld	r13, r11, 0				;	\
		sub	r12, r12, 1				;	\
		st	r13, r10, 0				;	\
		add	r10, r10, 4				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r11, r11, 4"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (a), "r" (c)	:	\
		    "r10", "r11", "r12", "r13");			\
} while (0);
d371 23
a393 41
#define	bus_space_set_multi_1(t, h, o, val, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	st.b	r11, r10, 0				;	\
		sub	r12, r12, 1				;	\
		bcnd	ne0, r12, 1b"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (val), "r" (c)	:	\
		    "r10", "r11", "r12");				\
} while (0);

#define	bus_space_set_multi_2(t, h, o, val, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	st.hu	r11, r10, 0				;	\
		sub	r12, r12, 1				;	\
		bcnd	ne0, r12, 1b"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (val), "r" (c)	:	\
		    "r10", "r11", "r12");				\
} while (0);

#define	bus_space_set_multi_4(t, h, o, val, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	st	r11, r10, 0				;	\
		sub	r12, r12, 1				;	\
		bcnd	ne0, r12, 1b"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (val), "r" (c)	:	\
		    "r10", "r11", "r12");				\
} while (0);
d409 27
a435 44
#define	bus_space_set_region_1(t, h, o, val, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	st.b	r11, r10, 0				;	\
		sub	r12, r12, 1				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r10, r10, 4"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (val), "r" (c)	:	\
		    "r10", "r11", "r12");				\
} while (0);

#define	bus_space_set_region_2(t, h, o, val, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	st.hu	r11, r10, 0				;	\
		sub	r12, r12, 1				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r10, r10, 4"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (val), "r" (c)	:	\
		    "r10", "r11", "r12");				\
} while (0);

#define	bus_space_set_region_4(t, h, o, val, c) do {			\
	(void) t;							\
	__asm __volatile ("						\
		or	r10, r0, %0				;	\
		or	r11, r0, %1				;	\
		or	r12, r0, %2				;	\
	1:	st	r11, r10, 0				;	\
		sub	r12, r12, 1				;	\
		bcnd.n	ne0, r12, 1b				;	\
		 add	r10, r10, 4"				:	\
								:	\
		    "r" ((h) + 4 * (o)), "r" (val), "r" (c)	:	\
		    "r10", "r11", "r12");				\
} while (0);
a495 2
 * Note: the 680x0 does not currently require barriers, but we must
 * provide the flags to MI code.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: bus.h,v 1.8 2002/03/19 17:51:04 millert Exp $	*/
d196 1
a197 1
		add	r11, r11, 1				;	\
d199 1
a199 1
		 sub	r12, r12, 1"				:	\
d212 1
a213 1
		add	r11, r11, 2				;	\
d215 1
a215 1
		 sub	r12, r12, 1"				:	\
d228 1
a229 1
		add	r11, r11, 4				;	\
d231 1
a231 1
		 sub	r12, r12, 1"				:	\
d259 1
a260 1
		add	r11, r11, 1				;	\
d262 1
a262 1
		 sub	r12, r12, 1"				:	\
d276 1
a277 1
		add	r11, r11, 2				;	\
d279 1
a279 1
		 sub	r12, r12, 1"				:	\
d293 1
a294 1
		add	r11, r11, 4				;	\
d296 1
a296 1
		 sub	r12, r12, 1"				:	\
d344 1
a345 1
		add	r11, r11, 1				;	\
d347 1
a347 1
		 sub	r12, r12, 1"				:	\
d360 1
a361 1
		add	r11, r11, 2				;	\
d363 1
a363 1
		 sub	r12, r12, 1"				:	\
d376 1
a377 1
		add	r11, r11, 4				;	\
d379 1
a379 1
		 sub	r12, r12, 1"				:	\
d406 1
a408 1
		add	r11, r11, 1				;	\
d410 1
a410 1
		 sub	r12, r12, 1"				:	\
d423 1
a425 1
		add	r11, r11, 2				;	\
d427 1
a427 1
		 sub	r12, r12, 1"				:	\
d440 1
a442 1
		add	r11, r11, 4				;	\
d444 1
a444 1
		 sub	r12, r12, 1"				:	\
d471 2
a472 2
		bcnd.n	ne0, r12, 1b				;	\
		 sub	r12, r12, 1"				:	\
d485 2
a486 2
		bcnd.n	ne0, r12, 1b				;	\
		 sub	r12, r12, 1"				:	\
d499 2
a500 2
		bcnd.n	ne0, r12, 1b				;	\
		 sub	r12, r12, 1"				:	\
d527 1
a527 1
		add	r10, r10, 4
d529 1
a529 1
		 sub	r12, r12, 1"				:	\
d542 1
a542 1
		add	r10, r10, 4
d544 1
a544 1
		 sub	r12, r12, 1"				:	\
d557 1
a557 1
		add	r10, r10, 4
d559 1
a559 1
		 sub	r12, r12, 1"				:	\
@


1.1.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1.1.1
log
@Initial commit for OpenBSD/luna88k, based on OpenBSD/mvme88k, NetBSD/luna68k and CMU Mach.
@
text
@@
