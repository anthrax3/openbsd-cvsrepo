head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.54
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.52
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.48
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.50
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.42
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.46
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.44
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.40
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.38
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.36
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.34
	OPENBSD_5_0:1.3.0.32
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.30
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.28
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.24
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.26
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.22
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.20
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.18
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.16
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.14
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.12
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	SMP:1.3.0.2
	LUNA88K_INIT:1.1.1.1
	AOYAMA:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.04.26.14.31.08;	author miod;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2004.04.26.12.34.05;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.21.15.23.56;	author aoyama;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.04.21.15.23.56;	author aoyama;	state Exp;
branches;
next	;

1.3.2.1
date	2004.06.05.23.09.46;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fix RCSID
@
text
@/* $OpenBSD$ */
/* public domain */
#include <m88k/asm_macro.h>
@


1.3.2.1
log
@Merge with the trunk
@
text
@@


1.2
log
@Start factorizing luna88k and mvme88k common parts.
For now, include files only.
@
text
@d1 1
a1 1
/* $OpenBSD */
@


1.1
log
@Initial revision
@
text
@d1 3
a3 123
/*	$OpenBSD: asm_macro.h,v 1.23 2004/01/23 17:26:05 miod Exp $ */
/*
 * Mach Operating System
 * Copyright (c) 1993-1991 Carnegie Mellon University
 * Copyright (c) 1991 OMRON Corporation
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON AND OMRON ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON AND OMRON DISCLAIM ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef __MACHINE_M88K_ASM_MACRO_H__
#define __MACHINE_M88K_ASM_MACRO_H__

#include <machine/asm.h>
/*
 * Various compiler macros used for speed and efficiency.
 * Anyone can include.
 */

/*
 * Flushes the data pipeline.
 */
#define	flush_pipeline() \
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING)

/*
 * PSR_TYPE is the type of the Process Status Register.
 */
typedef unsigned long m88k_psr_type;

/*
 * disable_interrupts_return_psr()
 *
 *    The INTERRUPT_DISABLE bit is set in the PSR and the *PREVIOUS*
 *    PSR is returned.  Intended to be used with set_psr() [below] as in:
 *
 *	{
 *	    m88k_psr_type psr;
 *	        .
 *	        .
 *	    psr = disable_interrupts_return_psr();
 *	        .
 *   		SHORT [time-wise] CRITICAL SECTION HERE
 *	        .
 *	    set_psr(psr);
 *	        .
 *	        .
 */
static __inline__ m88k_psr_type disable_interrupts_return_psr(void)
{
	m88k_psr_type temp, oldpsr;
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (oldpsr));
	__asm__ __volatile__ ("set  %1, %0, 1<1>" : "=r" (oldpsr), "=r" (temp));
	__asm__ __volatile__ ("stcr %0, cr1" : "=r" (temp));
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
	return oldpsr;
}
#define disable_interrupt() (void)disable_interrupts_return_psr()

/*
 * Sets the PSR. See comments above.
 */
static __inline__ void set_psr(m88k_psr_type psr)
{
	__asm__ __volatile__ ("stcr %0, cr1" :: "r" (psr));
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
}

/*
 * Gets the PSR. See comments above.
 */
static __inline__ m88k_psr_type get_psr(void)
{
	m88k_psr_type psr;
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (psr));
	return psr;
}

/*
 * Enables interrupts.
 */
static __inline__ m88k_psr_type enable_interrupts_return_psr(void)
{
	m88k_psr_type temp, oldpsr; /* need a temporary register */
	__asm__ __volatile__ ("ldcr %0, cr1" : "=r" (oldpsr));
	__asm__ __volatile__ ("clr  %1, %0, 1<1>" : "=r" (oldpsr), "=r" (temp));
	__asm__ __volatile__ ("stcr %0, cr1" : "=r" (temp));
	__asm__ __volatile__ (FLUSH_PIPELINE_STRING);
	return oldpsr;
}
#define enable_interrupt() (void)enable_interrupts_return_psr()

#define db_enable_interrupt enable_interrupt
#define db_disable_interrupt disable_interrupt

/*
 * Provide access from C code to the assembly instruction ff1
 */
static __inline__ unsigned ff1(unsigned val)
{
	__asm__ __volatile__ ("ff1 %0, %0" : "=r" (val) : "0" (val));
	return val;
}

#endif /* __MACHINE_M88K_ASM_MACRO_H__ */
@


1.1.1.1
log
@Initial commit for OpenBSD/luna88k, based on OpenBSD/mvme88k, NetBSD/luna68k and CMU Mach.
@
text
@@
