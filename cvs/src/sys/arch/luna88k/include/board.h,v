head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.4
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.12.0.12
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.8
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.10
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.6
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.6
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.4
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.14
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.12
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.8
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	SMP:1.2.0.2
	LUNA88K_INIT:1.1.1.1
	AOYAMA:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2017.03.20.19.40.47;	author miod;	state Exp;
branches;
next	1.13;
commitid	FJwRtpr7Uy4gD0i3;

1.13
date	2017.03.20.19.38.56;	author miod;	state Exp;
branches;
next	1.12;
commitid	N3YugoohwsKVf1XX;

1.12
date	2014.01.06.21.28.53;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2012.02.28.13.40.53;	author aoyama;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.23.16.54.35;	author pirofti;	state Exp;
branches;
next	1.9;

1.9
date	2007.11.25.16.40.04;	author jmc;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.03.00.38.34;	author krw;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.12.19.59.01;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.04.19.27.36;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.10.17.07.20;	author aoyama;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.02.08.33.29;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.14.12.57.02;	author aoyama;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.29.14.35.22;	author miod;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.04.21.15.23.56;	author aoyama;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.04.21.15.23.56;	author aoyama;	state Exp;
branches;
next	;

1.2.2.1
date	2004.06.05.23.09.46;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Fix previous. Commited from the wrong tree.
@
text
@/*	$OpenBSD: board.h,v 1.12 2014/01/06 21:28:53 miod Exp $	*/
/*
 * Mach Operating System
 * Copyright (c) 1993-1991 Carnegie Mellon University
 * Copyright (c) 1991 OMRON Corporation
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON AND OMRON ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON AND OMRON DISCLAIM ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#ifndef _MACHINE_BOARD_H_
#define _MACHINE_BOARD_H_

/*
 *      OMRON SX9100DT CPU board constants
 */

/*
 * Something to put append a 'U' to a long constant if it's C so that
 * it'll be unsigned in both ANSI and traditional.
 */
#if defined(_LOCORE)
#define U(num)  num
#elif defined(__STDC__)
#define U(num)  num ## U
#else
#define U(num)  num/**/U
#endif

/* machtype values */
#define LUNA_88K	0x1
#define LUNA_88K2	0x2

#define MAXPHYSMEM	U(0x10000000) 	/* max physical memory */

#define PROM_ADDR	U(0x41000000) 	/* PROM */
#define PROM_SPACE	U(0x00040000) 
#define NVRAM_ADDR	U(0x45000000) 	/* Non Volatile */
#define NVRAM_SPACE	U(0x00001FDC) 
#define	FUSE_ROM_ADDR	U(0x43000000) 	/* FUSE_ROM */
#define	FUSE_ROM_SPACE	        1024
#define	OBIO_CAL_CTL	U(0x45001FE0) 	/* calendar control register */
#define OBIO_CAL_SEC	U(0x45001FE4) 	/* seconds */
#define OBIO_CAL_MIN	U(0x45001FE8) 	/* minutes */
#define OBIO_CAL_HOUR	U(0x45001FEC) 	/* hours */
#define OBIO_CAL_DOW	U(0x45001FF0) 	/* Day Of the Week */
#define OBIO_CAL_DAY	U(0x45001FF4) 	/* days */
#define OBIO_CAL_MON	U(0x45001FF8) 	/* months */
#define OBIO_CAL_YEAR	U(0x45001FFC) 	/* years */
#define NVRAM_ADDR_88K2	U(0x47000000)	/* Non Volatile RAM area for LUNA-88K2 */
#define OBIO_PIO0_BASE	U(0x49000000) 	/* PIO-0 */
#define OBIO_PIO0_SPACE	U(0x0000000C) 
#define OBIO_PIO0A	U(0x49000000) 	/* PIO-0 port A */
#define OBIO_PIO0B	U(0x49000004) 	/* PIO-0 port B */
#define OBIO_PIO0C	U(0x49000008) 	/* PIO-0 port C*/
#define OBIO_PIO0	U(0x4900000C) 	/* PIO-0 control */
#define OBIO_PIO1_BASE	U(0x4D000000) 	/* PIO-1 */
#define OBIO_PIO1_SPACE U(0x0000000C) 
#define OBIO_PIO1A	U(0x4D000000) 	/* PIO-1 port A */
#define OBIO_PIO1B	U(0x4D000004) 	/* PIO-1 port B */
#define OBIO_PIO1C	U(0x4D000008) 	/* PIO-1 port C*/
#define OBIO_PIO1	U(0x4D00000C) 	/* PIO-1 control */
#define OBIO_SIO	U(0x51000000) 	/* SIO */
#define	OBIO_TAS	U(0x61000000) 	/* TAS register */
#define OBIO_CLOCK0	U(0x63000000) 	/* system clock CPU 0 */
#define OBIO_CLOCK1	U(0x63000004) 	/* system clock CPU 1 */
#define OBIO_CLOCK2	U(0x63000008) 	/* system clock CPU 2 */
#define OBIO_CLOCK3	U(0x6300000C) 	/* system clock CPU 3 */
#define OBIO_CLK_INTR	          31	/* system clock interrupt flag */
#define INT_ST_MASK0	U(0x65000000) 	/* interrupt status register CPU 0 */
#define INT_ST_MASK1	U(0x65000004) 	/* interrupt status register CPU 1 */
#define INT_ST_MASK2	U(0x65000008) 	/* interrupt status register CPU 2 */
#define INT_ST_MASK3	U(0x6500000C) 	/* interrupt status register CPU 3 */
#define  INT_LEVEL	           8	/* # of interrupt level + 1 */
#define  INT_SET_LV7	U(0x00000000) 	/* disable interrupts */
#define  INT_SET_LV6	U(0x00000000) 	/* enable level 7 */
#define  INT_SET_LV5	U(0x84000000) 	/* enable level 7-6 */
#define  INT_SET_LV4	U(0xC4000000) 	/* enable level 7-5 */
#define  INT_SET_LV3	U(0xE4000000) 	/* enable level 7-4 */
#define  INT_SET_LV2	U(0xF4000000) 	/* enable level 7-3 */
#define  INT_SET_LV1	U(0xFC000000) 	/* enable level 7-2 */
#define  INT_SET_LV0	U(0xFC000000) 	/* enable interrupts */
#define  INT_SLAVE_MASK	U(0x84000000) 	/* slave can only enable 6 and 1 */

#define SOFT_INT0	U(0x69000000) 	/* software interrupt CPU 0 */
#define SOFT_INT1	U(0x69000004) 	/* software interrupt CPU 1 */
#define SOFT_INT2	U(0x69000008) 	/* software interrupt CPU 2 */
#define SOFT_INT3	U(0x6900000C)	/* software interrupt CPU 3 */
#define SOFT_INT_FLAG0	U(0x6B000000) 	/* software interrupt flag CPU 0 */
#define SOFT_INT_FLAG1	U(0x6B000000) 	/* software interrupt flag CPU 1 */
#define SOFT_INT_FLAG2	U(0x6B000000) 	/* software interrupt flag CPU 2 */
#define SOFT_INT_FLAG3	U(0x6B000000) 	/* software interrupt flag CPU 3  */
#define RESET_CPU0	U(0x6D000000) 	/* reset CPU 0 */
#define RESET_CPU1	U(0x6D000004) 	/* reset CPU 1 */
#define RESET_CPU2	U(0x6D000008)	/* reset CPU 2 */
#define RESET_CPU3	U(0x6D00000C) 	/* reset CPU 3 */
#define RESET_CPU_ALL	U(0x6D000010) 	/* reset ALL CPUs */
#define TRI_PORT_RAM	U(0x71000000) 	/* 3 port RAM */
#define TRI_PORT_RAM_SPACE	0x20000
#define EXT_A_ADDR	U(0x81000000) 	/* extension board A */
#define EXT_A_SPACE	U(0x02000000) 
#define EXT_B_ADDR	U(0x83000000) 	/* extension board B */
#define EXT_B_SPACE	U(0x01000000) 
#define	PC_BASE		U(0x90000000) 	/* pc-98 extension board */
#define	PC_SPACE	U(0x02000000) 

#define MROM_ADDR	U(0xA1000000) 	/* Mask ROM address */
#define MROM_SPACE		0x400000
#define	BMAP_START	U(0xB1000000) 	/* Bitmap start address */
#define	BMAP_SPACE	(BMAP_END - BMAP_START)
#define BMAP_RFCNT	U(0xB1000000) 	/* RFCNT register */
#define BMAP_BMSEL	U(0xB1040000) 	/* BMSEL register */
#define BMAP_BMP	U(0xB1080000) 	/* common bitmap plane */
#define BMAP_BMAP0	U(0xB10C0000) 	/* bitmap plane 0 */
#define BMAP_BMAP1	U(0xB1100000) 	/* bitmap plane 1 */
#define BMAP_BMAP2	U(0xB1140000) 	/* bitmap plane 2 */
#define BMAP_BMAP3	U(0xB1180000) 	/* bitmap plane 3 */
#define BMAP_BMAP4	U(0xB11C0000) 	/* bitmap plane 4 */
#define BMAP_BMAP5	U(0xB1200000) 	/* bitmap plane 5 */
#define BMAP_BMAP6	U(0xB1240000) 	/* bitmap plane 6 */
#define BMAP_BMAP7	U(0xB1280000) 	/* bitmap plane 7 */
#define BMAP_FN		U(0xB12C0000) 	/* common bitmap function */
#define BMAP_FN0	U(0xB1300000) 	/* bitmap function 0 */
#define BMAP_FN1	U(0xB1340000) 	/* bitmap function 1 */
#define BMAP_FN2	U(0xB1380000) 	/* bitmap function 2 */
#define BMAP_FN3	U(0xB13C0000) 	/* bitmap function 3 */
#define BMAP_FN4	U(0xB1400000) 	/* bitmap function 4 */
#define BMAP_FN5	U(0xB1440000) 	/* bitmap function 5 */
#define BMAP_FN6	U(0xB1480000) 	/* bitmap function 6 */
#define BMAP_FN7	U(0xB14C0000) 	/* bitmap function 7 */
#define BMAP_END	U(0xB1500000) 
#define BMAP_END24P     U(0xB1800000)   /* end of 24p framemem */
#define BMAP_PALLET0	U(0xC0000000) 	/* color pallet */
#define BMAP_PALLET1	U(0xC1000000) 	/* color pallet */
#define BMAP_PALLET2	U(0xC1100000) 	/* color pallet */
#define BOARD_CHECK_REG	U(0xD0000000) 	/* board check register */
#define BMAP_CRTC	U(0xD1000000) 	/* CRTC-II */
#define BMAP_IDENTROM   U(0xD1800000)   /* bitmap-board identify ROM */
#define SCSI_ADDR	U(0xE1000000) 	/* SCSI address */
#define LANCE_ADDR	U(0xF1000000) 	/* LANCE */

#define CMMU_I0		U(0xFFF07000) 	/* CMMU instruction cpu 0 */
#define CMMU_D0		U(0xFFF06000) 	/* CMMU data cpu 0 */
#define CMMU_I1		U(0xFFF05000) 	/* CMMU instruction cpu 1 */
#define CMMU_D1		U(0xFFF04000) 	/* CMMU data cpu 1 */
#define CMMU_I2		U(0xFFF03000) 	/* CMMU instruction cpu 2 */
#define CMMU_D2		U(0xFFF02000) 	/* CMMU data cpu 2 */
#define CMMU_I3		U(0xFFF01000) 	/* CMMU instruction cpu 3 */
#define CMMU_D3		U(0xFFF00000) 	/* CMMU data cpu 3 */

#endif /* _MACHINE_BOARD_H_ */
@


1.13
log
@Remove unused defines. Some of them can be traced to MVME188 and make no
sense on Omron hardware.

ok aoyama@@
@
text
@d92 10
@


1.12
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: board.h,v 1.11 2012/02/28 13:40:53 aoyama Exp $	*/
a46 1
#define UDEFINED
a51 14
#define	SYSV_BASE	U(0x00000000) 	/* system virtual base */
#define VEQR_ADDR	U(0x00000000)

#define OBIO_START	U(0x41000000)
#define OBIO_SIZE	U(0xBf000000)

#define OBIO1_BASE	U(0x41000000) 	/* on board i/o 1 base */
#define OBIO1_SPACE	U(0x1f000000) 	/* on board i/o 1 space */
#define OBIO2_BASE	U(0x61000000) 	/* on board i/o 2 base */
#define OBIO2_SPACE	U(0x1f000000) 	/* on board i/o 2 space */
#define OBIO3_BASE	U(0x80000000)	/* on board i/o 3 base */
#define OBIO3_SPACE	U(0x80000000)	/* on board i/o 3 space */

#define	MAXU_ADDR	U(0x40000000) 	/* size of user virtual space */
d92 1
a92 15
#define  INT_LEVEL	           8	/* # of interrupt level + 1 */
#define  INT_SET_LV7	U(0x00000000) 	/* disable interrupts */
#define  INT_SET_LV6	U(0x00000000) 	/* enable level 7 */
#define  INT_SET_LV5	U(0x84000000) 	/* enable level 7-6 */
#define  INT_SET_LV4	U(0xC4000000) 	/* enable level 7-5 */
#define  INT_SET_LV3	U(0xE4000000) 	/* enable level 7-4 */
#define  INT_SET_LV2	U(0xF4000000) 	/* enable level 7-3 */
#define  INT_SET_LV1	U(0xFC000000) 	/* enable level 7-2 */
#define  INT_SET_LV0	U(0xFC000000) 	/* enable interrupts */
#define  INT_SLAVE_MASK	U(0x84000000) 	/* slave can only enable 6 and 1 */
#define	 INT_CLOCK_MASK	0xBFFFFFFF 	/* mask clock */

#define NON_MASKABLE_LEVEL 7		/* non-maskable-interrupt (abort) */
#define	CLOCK_INT_LEVEL	6		/* clock interrupt level */
#define SOFT_INT_LEVEL	1		/* software interrupt level */
a100 1
#define  SOFT_INT_BIT	31		/* software interrupt flag bit */
a109 1
#define	EU_BASE		U(0x81fe0000) 	/* VME expand board */
a148 3
#define	EXT_IACK_ADDR	0xFFFFFFF7 	/* IACK Space for Extended Board */

#define	VDMA_STD(x)	((int)(x))
@


1.11
log
@Luna88k multi-processor support, step 3.

GENERIC.MP on luna88k is now stable.  Changes are:

- Make secondary processors boot sequence closer to OpenBSD/aviion.
  This makes boot sequence more stable.  Now we have not see any
  assertions or panics during boot.
- Implement IPI as level 1 hardware interrupt by using software
  interrupt register.
- Add IPI support and some clean-ups in interrupt handler function.
@
text
@d1 1
a1 1
/*	$OpenBSD: board.h,v 1.10 2011/03/23 16:54:35 pirofti Exp $	*/
d176 1
a176 1
#define BMAP_CRTC	U(0xD1000000) 	/* CTRC-II */
@


1.10
log
@Normalize sentinel. Use _MACHINE_*_H_ and _<ARCH>_*_H_ properly and consitently.

Discussed and okay drahn@@. Okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: board.h,v 1.9 2007/11/25 16:40:04 jmc Exp $	*/
d110 5
a114 5
#define  INT_SET_LV5	U(0x80000000) 	/* enable level 7-6 */
#define  INT_SET_LV4	U(0xC0000000) 	/* enable level 7-5 */
#define  INT_SET_LV3	U(0xE0000000) 	/* enable level 7-4 */
#define  INT_SET_LV2	U(0xF0000000) 	/* enable level 7-3 */
#define  INT_SET_LV1	U(0xF8000000) 	/* enable level 7-2 */
@


1.9
log
@spelling fixes, from Martynas Venckus;
@
text
@d1 1
a1 1
/*	$OpenBSD: board.h,v 1.8 2007/09/03 00:38:34 krw Exp $	*/
d29 2
a30 2
#ifndef __LUNA88K_BOARD_H__
#define __LUNA88K_BOARD_H__
d193 1
a193 1
#endif /* __LUNA88K_BOARD_H__ */
@


1.8
log
@Typos from miod. 'sfotware' -> 'software' in some comments.
@
text
@d1 1
a1 1
/*	$OpenBSD: board.h,v 1.7 2007/05/12 19:59:01 miod Exp $	*/
d107 1
a107 1
#define  INT_LEVEL	           8	/* # of intrrupt level + 1 */
@


1.7
log
@Remove unused code and definitions pasted over from mvme188 support, which do
not apply to luna88k.
@
text
@d1 1
a1 1
/*	$OpenBSD: board.h,v 1.6 2006/05/04 19:27:36 miod Exp $	*/
d126 4
a129 4
#define SOFT_INT_FLAG0	U(0x6B000000) 	/* sfotware interrupt flag CPU 0 */
#define SOFT_INT_FLAG1	U(0x6B000000) 	/* sfotware interrupt flag CPU 1 */
#define SOFT_INT_FLAG2	U(0x6B000000) 	/* sfotware interrupt flag CPU 2 */
#define SOFT_INT_FLAG3	U(0x6B000000) 	/* sfotware interrupt flag CPU 3  */
@


1.6
log
@eneble -> enable
@
text
@d1 1
a1 1
/*	$OpenBSD: board.h,v 1.5 2004/08/10 17:07:20 aoyama Exp $	*/
a68 3
/* #define ILLADDRESS	U(0x0F000000) */ 	/* any faulty address */
/* #define ILLADDRESS	U(0x3FFFFFF0) */	/* any faulty address for LUNA-88K2 */

a117 16
#define  INT_LV6	U(0x00800000) 	/* level 6 enabled */
#define  INT_LV5	U(0x00400000) 	/* level 5 enabled */
#define  INT_LV4	U(0x00200000) 	/* level 4 enabled */
#define  INT_LV3	U(0x00100000) 	/* level 3 enabled */
#define  INT_LV2	U(0x00080000) 	/* level 2 enabled */
#define  INT_LV1	U(0x00040000) 	/* level 1 enabled */
#define  INT_ST		U(0xE0000000) 	/* interrupt status */
#define  INT_MASK_LV0	INT_LV6 | INT_LV5 | INT_LV4 | INT_LV3 | INT_LV2 | INT_LV1
#define  INT_MASK_LV1	INT_LV6 | INT_LV5 | INT_LV4 | INT_LV3 | INT_LV2
#define  INT_MASK_LV2	INT_LV6 | INT_LV5 | INT_LV4 | INT_LV3
#define  INT_MASK_LV3	INT_LV6 | INT_LV5 | INT_LV4
#define  INT_MASK_LV4	INT_LV6 | INT_LV5
#define  INT_MASK_LV5	INT_LV6
#define  INT_MASK_LV6	0
#define  INT_MASK_LV7	0
#define  SLAVE_MASK     INT_LV6 | INT_LV1
@


1.5
log
@The second spc is missing on original LUNA-88K, so add and check the
machine type field in the internal device lists.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: board.h,v 1.4 2004/08/02 08:33:29 miod Exp $	*/
d121 6
a126 6
#define  INT_LV6	U(0x00800000) 	/* level 6 enebled */
#define  INT_LV5	U(0x00400000) 	/* level 5 enebled */
#define  INT_LV4	U(0x00200000) 	/* level 4 enebled */
#define  INT_LV3	U(0x00100000) 	/* level 3 enebled */
#define  INT_LV2	U(0x00080000) 	/* level 2 enebled */
#define  INT_LV1	U(0x00040000) 	/* level 1 enebled */
@


1.4
log
@Move MAX_CPUS constant to cpu.h
@
text
@d1 1
a1 1
/*	$OpenBSD: board.h,v 1.3 2004/06/14 12:57:02 aoyama Exp $	*/
d50 2
a51 2
#define LUNA_88K	1
#define LUNA_88K2	2
@


1.3
log
@Added some codes that check if the machine is LUNA-88K or LUNA-88K2
and retrieve the boot device information from NVRAM.
Only works on LUNA-88K2 at this moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: board.h,v 1.2 2004/04/29 14:35:22 miod Exp $	*/
a47 3

#define MAX_CPUS	4		/* maximum cpus on the board */
#define MAX_CMMUS	8		/* maximum cmmus on the board */
@


1.2
log
@Typos
@
text
@d1 1
a1 1
/*	$OpenBSD: board.h,v 1.1.1.1 2004/04/21 15:23:56 aoyama Exp $	*/
d89 1
@


1.2.2.1
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d198 1
a198 1
#define BMAP_IDENTROM   U(0xD1800000)   /* bitmap-boad identify ROM */
@


1.1.1.1
log
@Initial commit for OpenBSD/luna88k, based on OpenBSD/mvme88k, NetBSD/luna68k and CMU Mach.
@
text
@@
