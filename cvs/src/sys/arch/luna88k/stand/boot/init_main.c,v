head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.12
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.8
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6;
locks; strict;
comment	@ * @;


1.7
date	2017.03.16.18.08.58;	author miod;	state Exp;
branches;
next	1.6;
commitid	G8Owr7HwSA0X9pAf;

1.6
date	2014.02.23.20.01.04;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2013.11.01.07.43.09;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.29.22.13.28;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.29.21.49.07;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.29.18.51.37;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.28.22.13.12;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Fix passing entropy from boot loader to the kernel:
- make sure the kernel has a PT_OPENBSD_RANDOMIZE phdr.
- load /etc/random.conf in all cases, not only manual boot (oops).

ok aoyama@@
@
text
@/*	$OpenBSD: init_main.c,v 1.6 2014/02/23 20:01:04 miod Exp $	*/
/*	$NetBSD: init_main.c,v 1.6 2013/03/05 15:34:53 tsutsui Exp $	*/

/*
 * Copyright (c) 1992 OMRON Corporation.
 *
 * This code is derived from software contributed to Berkeley by
 * OMRON Corporation.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)init_main.c	8.2 (Berkeley) 8/15/93
 */
/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * OMRON Corporation.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)init_main.c	8.2 (Berkeley) 8/15/93
 */
/*
 * Mach Operating System
 * Copyright (c) 1993-1991 Carnegie Mellon University
 * Copyright (c) 1991 OMRON Corporation
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON AND OMRON ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON AND OMRON DISCLAIM ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <machine/board.h>
#include <luna88k/stand/boot/samachdep.h>
#include <luna88k/stand/boot/status.h>
#include <lib/libsa/loadfile.h>
#include "dev_net.h"

static void get_fuse_rom_data(void);
static void get_nvram_data(void);
static int get_plane_numbers(void);
static const char *nvram_by_symbol(char *);

int cpuspeed;	/* for DELAY() macro */
int machtype;
char default_file[64];

uint16_t dipswitch = 0;
int nplane;

/* for command parser */

#define BUFFSIZE 100
#define MAXARGS  30

char buffer[BUFFSIZE];

int   argc;
char *argv[MAXARGS];

#define BOOT_TIMEOUT 5
int boot_timeout = BOOT_TIMEOUT;

static const char prompt[] = "boot> ";

int debug;

/*
 * FUSE ROM and NVRAM data
 */
struct fuse_rom_byte {
	u_int32_t h;
	u_int32_t l;
};
#define	FUSE_ROM_SPACE		1024
#define FUSE_ROM_BYTES		(FUSE_ROM_SPACE / sizeof(struct fuse_rom_byte))
char fuse_rom_data[FUSE_ROM_BYTES];

#define NNVSYM		8
#define NVSYMLEN	16
#define NVVALLEN	16
struct nvram_t {
	char symbol[1 + NVSYMLEN];
	char value[1 + NVVALLEN];
} nvram[NNVSYM];

int
main(void)
{
	int status = ST_NORMAL;
	const char *machstr;
	const char *nvv;
	int unit, part;

	/* Determine the machine type from FUSE ROM data.  */
	get_fuse_rom_data();
	if (strncmp(fuse_rom_data, "MNAME=LUNA88K+", 14) == 0)
		machtype = LUNA_88K2;
	else
		machtype = LUNA_88K;

	/*
	 * Initialize the console before we print anything out.
	 */
	if (machtype == LUNA_88K) {
		machstr  = "LUNA-88K";
		cpuspeed = MHZ_25;
	} else {
		machstr  = "LUNA-88K2";
		cpuspeed = MHZ_33;
	}

	nplane = get_plane_numbers();
	cninit();

	printf("\nOpenBSD/" MACHINE " (%s) boot 0.5\n\n", machstr);

#ifdef SUPPORT_ETHERNET
	try_bootp = 1;
#endif

        /* Determine the 'auto-boot' device from NVRAM data */
        get_nvram_data();

	nvv = nvram_by_symbol("boot_unit");
	if (nvv != NULL)
		unit = (int)strtol(nvv, NULL, 10);
	else
		unit = 0;
	nvv = nvram_by_symbol("boot_partition");
	if (nvv != NULL)
		part = (int)strtol(nvv, NULL, 10);
	else
		part = 0;

	nvv = nvram_by_symbol("boot_device");

	snprintf(default_file, sizeof(default_file),
	    "%s(%d,%d)%s", nvv != NULL ? nvv : "sd", unit, part, "bsd");

	/* auto-boot? (SW1) */
	if ((dipswitch & 0x8000) != 0) {
		char c;

		printf("Press return to boot now,"
		    " any other key for boot menu\n");
		printf("booting %s - starting in ", default_file);
		c = awaitkey("%d seconds. ", boot_timeout, 1);
		if (c == '\r' || c == '\n' || c == 0) {
			printf("auto-boot %s\n", default_file);
			bootunix(default_file);
		}
	}

	/*
	 * Main Loop
	 */

	printf("type \"help\" for help.\n");

	do {
		memset(buffer, 0, BUFFSIZE);
		if (getline(prompt, buffer) > 0) {
			argc = getargs(buffer, argv, sizeof(argv)/sizeof(char *));

			status = parse(argc, argv);
			if (status == ST_NOTFOUND)
				printf("unknown command \"%s\"\n", argv[0]);
		}
	} while (status != ST_EXIT);

	_rtt();
	/* NOTREACHED */
}

int
get_plane_numbers(void)
{
	int r = *((int *)0x1114);
	int n = 0;

	for (; r ; r >>= 1)
		if (r & 0x1)
			n++;

	return(n);
}

/* Get data from FUSE ROM */

void
get_fuse_rom_data(void)
{
	int i;
	struct fuse_rom_byte *p = (struct fuse_rom_byte *)FUSE_ROM_ADDR;

	for (i = 0; i < FUSE_ROM_BYTES; i++) {
		fuse_rom_data[i] =
		    (char)((((p->h) >> 24) & 0x000000f0) |
		           (((p->l) >> 28) & 0x0000000f));
		p++;                                                                            
	}
}

/* Get data from NVRAM */

void
get_nvram_data(void)
{
	int i, j;
	u_int8_t *page;
	char buf[NVSYMLEN], *data;

	if (machtype == LUNA_88K) {
		data = (char *)(NVRAM_ADDR + 0x80);

		for (i = 0; i < NNVSYM; i++) {
			for (j = 0; j < NVSYMLEN; j++) {
				buf[j] = *data;
				data += 4;
			}
			strncpy(nvram[i].symbol, buf, sizeof(nvram[i].symbol));

			for (j = 0; j < NVVALLEN; j++) {
				buf[j] = *data;
				data += 4;
			}
			strncpy(nvram[i].value, buf, sizeof(nvram[i].value));
		}
	} else if (machtype == LUNA_88K2) {
		page = (u_int8_t *)(NVRAM_ADDR_88K2 + 0x20);

		for (i = 0; i < NNVSYM; i++) {
			*page = (u_int8_t)i;

			data = (char *)NVRAM_ADDR_88K2;
			strncpy(nvram[i].symbol, data, sizeof(nvram[i].symbol));

			data = (char *)(NVRAM_ADDR_88K2 + 0x10);
			strncpy(nvram[i].value, data, sizeof(nvram[i].value));
		}
	}
}

const char *
nvram_by_symbol(symbol)
	char *symbol;
{
	const char *value;
	int i;

	value = NULL;

	for (i = 0; i < NNVSYM; i++) {
		if (strncmp(nvram[i].symbol, symbol, NVSYMLEN) == 0) {
			value = nvram[i].value;
			break;
		}
	}

	return value;
}

void
_rtt(void)
{
	*(volatile unsigned int *)RESET_CPU_ALL = 0;
	for (;;) ;
	/* NOTREACHED */
}
@


1.6
log
@Try and load /etc/random.seed before attempting to load the kernel.
Bump version.
@
text
@d1 1
a1 1
/*	$OpenBSD: init_main.c,v 1.5 2013/11/01 07:43:09 miod Exp $	*/
d184 1
a184 1
	printf("\nOpenBSD/" MACHINE " (%s) boot 0.4\n\n", machstr);
@


1.5
log
@Better report of the system type, to match the OMRON spelling; aoyama@@
@
text
@d1 1
a1 1
/*	$OpenBSD: init_main.c,v 1.4 2013/10/29 22:13:28 miod Exp $	*/
d184 1
a184 1
	printf("\nOpenBSD/" MACHINE " (%s) boot 0.3\n\n", machstr);
@


1.4
log
@Get boot device and partition from NVRAM. Boot filename still defaults to
"bsd", since the PROM boot_filename has to point to the bootloader itself
(I store mine as /vmunix).
@
text
@d1 1
a1 1
/*	$OpenBSD: init_main.c,v 1.3 2013/10/29 21:49:07 miod Exp $	*/
d174 1
a174 1
		machstr  = "luna88k";
d177 1
a177 1
		machstr  = "luna88k-2";
d184 1
a184 1
	printf("\nOpenBSD/%s boot 0.3\n\n", machstr);
@


1.3
log
@More cleanups:
- accept empty controller and partition numbers, as well as empty filenames,
  and use defaults (0, 0 and "bsd") instead of complaining the boot path
  is invalid.
- do not attempt to detect and report devices at boot, using a small
  list of possible devices (only scsi id #6 and #5, come on!).
  Instead, parse the user-supplied boot string to figure out which controller
  and device to talk to. (still no SCSI LUN support, though).

Because of the last change, SCSI unit numbers ought to match the PROM
numbering now (10 * controller + 6 - device id).

Crank version to 0.2.
@
text
@d1 1
a1 1
/*	$OpenBSD: init_main.c,v 1.2 2013/10/29 18:51:37 miod Exp $	*/
d73 26
d108 1
d110 1
d147 8
d160 1
d181 1
a181 2
	nplane   = get_plane_numbers();

d184 1
a184 5
	printf("\nOpenBSD/%s boot 0.2\n\n", machstr);

	/*
	 * IO configuration
	 */
d190 16
a205 2
	unit = 0;	/* XXX should parse monitor's Boot-file constant */
	part = 0;
d207 1
a207 1
	    "sd(%d,%d)%s", unit, part, "bsd");
d271 59
@


1.2
log
@More cleanup and unused code or data removal.

Constify the bitmap font.

Bound check sd() numbers instead of accessing an array out of bounds (noticed
by aoyama@@).

Use the same SCSI select timeout as the kernel does (250ms instead of 2ms).
@
text
@d1 1
a1 1
/*	$OpenBSD: init_main.c,v 1.1 2013/10/28 22:13:12 miod Exp $	*/
d104 1
a104 1
char  prompt[16] = "boot> ";
d122 1
a122 1
	int i, status = 0;
d137 1
a137 1
		machstr  = "LUNA-88K";
d140 1
a140 1
		machstr  = "LUNA88K-2";
d148 1
a148 8
	printf("\nOpenBSD/luna88k boot 0.1\n");

	i = *((int *)0x1104);
	printf("Machine model   = %s\n", machstr);
	printf("Physical Memory = 0x%x  ", i);
	i >>= 20;
	printf("(%d MB)\n", i);
	printf("\n");
a157 4
	find_devs();
	configure();
	printf("\n");

d190 1
a190 1
				printf("Command \"%s\" is not found !!\n", argv[0]);
d192 1
a192 1
	} while(status != ST_EXIT);
d194 1
a194 1
	exit();
d230 1
a230 1
	*(volatile unsigned int *)0x6d000010 = 0;
@


1.1
log
@The first steps of a native OpenBSD/luna88k bootloader. Able to boot ELF
kernels with symbols from disk or network.
Based upon the NetBSD/luna68k bootloader which got recently overhauled from
4.3BSD (thanks, tsutsui@@ !), updated to match the luna88k hardware layout
and turned into a polling-only binary.
Tested on luna88k (not -2) only so far.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a123 1
	int netboot = 0;
d172 1
a172 1
	    "%s(%d,%d)%s", netboot ? "le" : "sd", unit, part, "bsd");
@

