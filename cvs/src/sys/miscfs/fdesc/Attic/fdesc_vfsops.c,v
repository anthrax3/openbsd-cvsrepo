head	1.14;
access;
symbols
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.10.0.4
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.2
	SMP_BASE:1.8
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.6
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2005.12.06.20.18.57;	author pedro;	state dead;
branches;
next	1.13;

1.13
date	2003.08.14.07.46.39;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.28.10;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.27.07;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.15.06.53.30;	author art;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2001.02.20.01.50.09;	author assar;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.07.04.57.16;	author assar;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	99.05.31.17.34.49;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.02.08.22.41.37;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	97.11.06.05.58.32;	author csapuntz;	state Exp;
branches;
next	1.4;

1.4
date	97.10.06.21.04.42;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.10.06.15.19.01;	author csapuntz;	state Exp;
branches;
next	1.2;

1.2
date	96.02.27.07.51.40;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.59;	author deraadt;	state Exp;
branches;
next	;

1.8.2.1
date	2001.05.14.22.32.53;	author niklas;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2001.07.04.10.49.06;	author niklas;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.8.2.4;

1.8.2.4
date	2003.06.07.11.06.05;	author ho;	state Exp;
branches;
next	1.8.2.5;

1.8.2.5
date	2004.02.19.10.57.19;	author niklas;	state Exp;
branches;
next	;

1.10.4.1
date	2002.06.11.03.30.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove fdescfs
@
text
@/*	$OpenBSD: fdesc_vfsops.c,v 1.13 2003/08/14 07:46:39 mickey Exp $	*/
/*	$NetBSD: fdesc_vfsops.c,v 1.21 1996/02/09 22:40:07 christos Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software donated to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)fdesc_vfsops.c	8.4 (Berkeley) 1/21/94
 *
 * #Id: fdesc_vfsops.c,v 1.9 1993/04/06 15:28:33 jsp Exp #
 */

/*
 * /dev/fd Filesystem
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/proc.h>
#include <sys/resourcevar.h>
#include <sys/filedesc.h>
#include <sys/vnode.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/malloc.h>
#include <miscfs/fdesc/fdesc.h>

int	fdesc_mount(struct mount *, const char *, void *,
			 struct nameidata *, struct proc *);
int	fdesc_start(struct mount *, int, struct proc *);
int	fdesc_unmount(struct mount *, int, struct proc *);
int	fdesc_root(struct mount *, struct vnode **);
int	fdesc_quotactl(struct mount *, int, uid_t, caddr_t,
			    struct proc *);
int	fdesc_statfs(struct mount *, struct statfs *, struct proc *);
int	fdesc_sync(struct mount *, int, struct ucred *, struct proc *);
int	fdesc_vget(struct mount *, ino_t, struct vnode **);
int	fdesc_fhtovp(struct mount *, struct fid *, struct vnode **);
int	fdesc_vptofh(struct vnode *, struct fid *);

/*
 * Mount the per-process file descriptors (/dev/fd)
 */
int
fdesc_mount(mp, path, data, ndp, p)
	struct mount *mp;
	const char *path;
	void *data;
	struct nameidata *ndp;
	struct proc *p;
{
	size_t size;

	/*
	 * Update is a no-op
	 */
	if (mp->mnt_flag & MNT_UPDATE)
		return (EOPNOTSUPP);

	mp->mnt_flag |= MNT_LOCAL;
	vfs_getnewfsid(mp);

	(void) copyinstr(path, mp->mnt_stat.f_mntonname, MNAMELEN - 1, &size);
	bzero(mp->mnt_stat.f_mntonname + size, MNAMELEN - size);
	bzero(mp->mnt_stat.f_mntfromname, MNAMELEN);
	bcopy("fdesc", mp->mnt_stat.f_mntfromname, sizeof("fdesc"));
	return (0);
}

int
fdesc_start(mp, flags, p)
	struct mount *mp;
	int flags;
	struct proc *p;
{
	return (0);
}

int
fdesc_unmount(mp, mntflags, p)
	struct mount *mp;
	int mntflags;
	struct proc *p;
{
	int flags = 0;
	int error;

	if (mntflags & MNT_FORCE) 
		flags |= FORCECLOSE;

	/*
	 * Flush out our vnodes.
	 */
	if ((error = vflush(mp, NULL, flags)) != 0)
		return (error);

	return (0);
}

int
fdesc_root(mp, vpp)
	struct mount *mp;
	struct vnode **vpp;
{
	struct vnode *vp;
	int error;
	/*
	 * Return locked reference to root.
	 */
	error = fdesc_allocvp(Froot, FD_ROOT, mp, &vp);
	if (error)
		return (error);
	vp->v_type = VDIR;
	vp->v_flag |= VROOT;
	*vpp = vp;
	return (0);
}

int
fdesc_statfs(mp, sbp, p)
	struct mount *mp;
	struct statfs *sbp;
	struct proc *p;
{
	struct filedesc *fdp;
	int lim;
	int i;
	int last;
	int freefd;

	/*
	 * Compute number of free file descriptors.
	 * [ Strange results will ensue if the open file
	 * limit is ever reduced below the current number
	 * of open files... ]
	 */
	lim = p->p_rlimit[RLIMIT_NOFILE].rlim_cur;
	fdp = p->p_fd;
	last = min(fdp->fd_nfiles, lim);
	freefd = 0;
	for (i = fdp->fd_freefile; i < last; i++)
		if (fdp->fd_ofiles[i] == NULL)
			freefd++;

	/*
	 * Adjust for the fact that the fdesc array may not
	 * have been fully allocated yet.
	 */
	if (fdp->fd_nfiles < lim)
		freefd += (lim - fdp->fd_nfiles);

	sbp->f_bsize = DEV_BSIZE;
	sbp->f_iosize = DEV_BSIZE;
	sbp->f_blocks = 2;		/* 1K to keep df happy */
	sbp->f_bfree = 0;
	sbp->f_bavail = 0;
	sbp->f_files = lim + 1;		/* Allow for "." */
	sbp->f_ffree = freefd;		/* See comments above */
	if (sbp != &mp->mnt_stat) {
		bcopy(&mp->mnt_stat.f_fsid, &sbp->f_fsid, sizeof(sbp->f_fsid));
		bcopy(mp->mnt_stat.f_mntonname, sbp->f_mntonname, MNAMELEN);
		bcopy(mp->mnt_stat.f_mntfromname, sbp->f_mntfromname, MNAMELEN);
	}
	strncpy(sbp->f_fstypename, mp->mnt_vfc->vfc_name, MFSNAMELEN);
	return (0);
}

/*ARGSUSED*/
int
fdesc_sync(mp, waitfor, uc, p)
	struct mount *mp;
	int waitfor;
	struct ucred *uc;
	struct proc *p;
{

	return (0);
}

#define fdesc_fhtovp ((int (*)(struct mount *, struct fid *, \
	    struct vnode **))eopnotsupp)
#define fdesc_quotactl ((int (*)(struct mount *, int, uid_t, caddr_t, \
	    struct proc *))eopnotsupp)
#define fdesc_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define fdesc_vget ((int (*)(struct mount *, ino_t, struct vnode **)) \
	    eopnotsupp)
#define fdesc_vptofh ((int (*)(struct vnode *, struct fid *))eopnotsupp)
 
#define fdesc_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)

const struct vfsops fdesc_vfsops = {
	fdesc_mount,
	fdesc_start,
	fdesc_unmount,
	fdesc_root,
	fdesc_quotactl,
	fdesc_statfs,
	fdesc_sync,
	fdesc_vget,
	fdesc_fhtovp,
	fdesc_vptofh,
	fdesc_init,
	fdesc_sysctl,
	fdesc_checkexp
};
@


1.13
log
@constify vfsops; tedu@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.12 2003/06/02 23:28:10 millert Exp $	*/
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.11 2002/03/14 01:27:07 millert Exp $	*/
d222 1
a222 1
struct vfsops fdesc_vfsops = {
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.10 2001/05/15 06:53:30 art Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@Don't keep the reference to the root vnode all the time. Treat the root vnode
just like all other vnodes.
This removes a lot of code, simplifies unmount (which was incorrect btw.) and
removes the need for our own mount structure.
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.9 2001/02/20 01:50:09 assar Exp $	*/
d61 12
a72 12
int	fdesc_mount __P((struct mount *, const char *, void *,
			 struct nameidata *, struct proc *));
int	fdesc_start __P((struct mount *, int, struct proc *));
int	fdesc_unmount __P((struct mount *, int, struct proc *));
int	fdesc_root __P((struct mount *, struct vnode **));
int	fdesc_quotactl __P((struct mount *, int, uid_t, caddr_t,
			    struct proc *));
int	fdesc_statfs __P((struct mount *, struct statfs *, struct proc *));
int	fdesc_sync __P((struct mount *, int, struct ucred *, struct proc *));
int	fdesc_vget __P((struct mount *, ino_t, struct vnode **));
int	fdesc_fhtovp __P((struct mount *, struct fid *, struct vnode **));
int	fdesc_vptofh __P((struct vnode *, struct fid *));
d213 7
a219 7
#define fdesc_fhtovp ((int (*) __P((struct mount *, struct fid *, \
	    struct vnode **)))eopnotsupp)
#define fdesc_quotactl ((int (*) __P((struct mount *, int, uid_t, caddr_t, \
	    struct proc *)))eopnotsupp)
#define fdesc_sysctl ((int (*) __P((int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *)))eopnotsupp)
#define fdesc_vget ((int (*) __P((struct mount *, ino_t, struct vnode **))) \
d221 1
a221 1
#define fdesc_vptofh ((int (*) __P((struct vnode *, struct fid *)))eopnotsupp)
d223 2
a224 2
#define fdesc_checkexp ((int (*) __P((struct mount *, struct mbuf *,	\
	int *, struct ucred **)))eopnotsupp)
@


1.10.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.10 2001/05/15 06:53:30 art Exp $	*/
d61 12
a72 12
int	fdesc_mount(struct mount *, const char *, void *,
			 struct nameidata *, struct proc *);
int	fdesc_start(struct mount *, int, struct proc *);
int	fdesc_unmount(struct mount *, int, struct proc *);
int	fdesc_root(struct mount *, struct vnode **);
int	fdesc_quotactl(struct mount *, int, uid_t, caddr_t,
			    struct proc *);
int	fdesc_statfs(struct mount *, struct statfs *, struct proc *);
int	fdesc_sync(struct mount *, int, struct ucred *, struct proc *);
int	fdesc_vget(struct mount *, ino_t, struct vnode **);
int	fdesc_fhtovp(struct mount *, struct fid *, struct vnode **);
int	fdesc_vptofh(struct vnode *, struct fid *);
d213 7
a219 7
#define fdesc_fhtovp ((int (*)(struct mount *, struct fid *, \
	    struct vnode **))eopnotsupp)
#define fdesc_quotactl ((int (*)(struct mount *, int, uid_t, caddr_t, \
	    struct proc *))eopnotsupp)
#define fdesc_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define fdesc_vget ((int (*)(struct mount *, ino_t, struct vnode **)) \
d221 1
a221 1
#define fdesc_vptofh ((int (*)(struct vnode *, struct fid *))eopnotsupp)
d223 2
a224 2
#define fdesc_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)
@


1.9
log
@use void * consistently in vfs_mount and sys_mount.  ok @@art
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.8 2000/02/07 04:57:16 assar Exp $	*/
a84 1
	int error = 0;
a85 2
	struct fdescmount *fmp;
	struct vnode *rvp;
a92 9
	error = fdesc_allocvp(Froot, FD_ROOT, mp, &rvp);
	if (error)
		return (error);

	MALLOC(fmp, struct fdescmount *, sizeof(struct fdescmount),
				M_UFSMNT, M_WAITOK);	/* XXX */
	rvp->v_type = VDIR;
	rvp->v_flag |= VROOT;
	fmp->f_root = rvp;
a93 1
	mp->mnt_data = (qaddr_t)fmp;
d118 1
a119 2
	int flags = 0;
	struct vnode *rootvp = VFSTOFDESC(mp)->f_root;
d125 1
a125 3
	 * Clear out buffer cache.  I don't think we
	 * ever get anything cached at this level at the
	 * moment, but who knows...
d127 1
a127 3
	if (rootvp->v_usecount > 1)
		return (EBUSY);
	if ((error = vflush(mp, rootvp, flags)) != 0)
a129 14
	/*
	 * Release reference on underlying root vnode
	 */
	vrele(rootvp);
	/*
	 * And blow it away for future re-use
	 */
	vgone(rootvp);
	/*
	 * Finally, throw away the fdescmount structure
	 */
	free(mp->mnt_data, M_UFSMNT);	/* XXX */
	mp->mnt_data = 0;

d139 1
a139 1
	struct proc *p = curproc;         /* XXX */
d143 5
a147 3
	vp = VFSTOFDESC(mp)->f_root;
	VREF(vp);
	vn_lock(vp, LK_EXCLUSIVE | LK_RETRY, p);
@


1.8
log
@update to use new checkexp vfs operation
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.7 1999/05/31 17:34:49 millert Exp $	*/
d61 1
a61 1
int	fdesc_mount __P((struct mount *, const char *, caddr_t,
d81 1
a81 1
	caddr_t data;
@


1.8.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.9 2001/02/20 01:50:09 assar Exp $	*/
d61 1
a61 1
int	fdesc_mount __P((struct mount *, const char *, void *,
d81 1
a81 1
	void *data;
@


1.8.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.8.2.1 2001/05/14 22:32:53 niklas Exp $	*/
d85 1
d87 2
d96 9
d106 1
d131 1
d133 1
a133 1
	int error;
d139 3
a141 1
	 * Flush out our vnodes.
d143 3
a145 1
	if ((error = vflush(mp, NULL, flags)) != 0)
d148 14
d171 1
a171 1
	int error;
d175 3
a177 5
	error = fdesc_allocvp(Froot, FD_ROOT, mp, &vp);
	if (error)
		return (error);
	vp->v_type = VDIR;
	vp->v_flag |= VROOT;
@


1.8.2.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 12
a72 12
int	fdesc_mount(struct mount *, const char *, void *,
			 struct nameidata *, struct proc *);
int	fdesc_start(struct mount *, int, struct proc *);
int	fdesc_unmount(struct mount *, int, struct proc *);
int	fdesc_root(struct mount *, struct vnode **);
int	fdesc_quotactl(struct mount *, int, uid_t, caddr_t,
			    struct proc *);
int	fdesc_statfs(struct mount *, struct statfs *, struct proc *);
int	fdesc_sync(struct mount *, int, struct ucred *, struct proc *);
int	fdesc_vget(struct mount *, ino_t, struct vnode **);
int	fdesc_fhtovp(struct mount *, struct fid *, struct vnode **);
int	fdesc_vptofh(struct vnode *, struct fid *);
d213 7
a219 7
#define fdesc_fhtovp ((int (*)(struct mount *, struct fid *, \
	    struct vnode **))eopnotsupp)
#define fdesc_quotactl ((int (*)(struct mount *, int, uid_t, caddr_t, \
	    struct proc *))eopnotsupp)
#define fdesc_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define fdesc_vget ((int (*)(struct mount *, ino_t, struct vnode **)) \
d221 1
a221 1
#define fdesc_vptofh ((int (*)(struct vnode *, struct fid *))eopnotsupp)
d223 2
a224 2
#define fdesc_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)
@


1.8.2.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.8.2.3 2002/03/28 15:02:00 niklas Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.8.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d222 1
a222 1
const struct vfsops fdesc_vfsops = {
@


1.7
log
@New struct statfs with mount options.  NOTE: this replaces statfs(2),
fstatfs(2), and getfsstat(2) so you will need to build a new kernel
before doing a "make build" or you will get "unimplemented syscall" errors.

The new struct statfs has the following featuires:
o Has a u_int32_t flags field--now softdep can have a real flag.

o Uses u_int32_t instead of longs (nicer on the alpha).  Note: the man
page used to lie about setting invalid/unused fields to -1.  SunOS does
that but our code never has.

o Gets rid of f_type completely.  It hasn't been used since NetBSD 0.9
and having it there but always 0 is confusing.  It is conceivable
that this may cause some old code to not compile but that is better
than silently breaking.

o Adds a mount_info union that contains the FSTYPE_args struct.  This
means that "mount" can now tell you all the options a filesystem was
mounted with.  This is especially nice for NFS.

Other changes:
o The linux statfs emulation didn't convert between BSD fs names
  and linux f_type numbers.  Now it does, since the BSD f_type
  number is useless to linux apps (and has been removed anyway)

o FreeBSD's struct statfs is different from our (both old and new)
and thus needs conversion.  Previously, the OpenBSD syscalls
were used without any real translation.

o mount(8) will now show extra info when invoked with no arguments.
However, to see *everything* you need to use the -v (verbose) flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.6 1998/02/08 22:41:37 tholo Exp $	*/
d71 1
a71 2
int	fdesc_fhtovp __P((struct mount *, struct fid *, struct mbuf *,
			  struct vnode **, int *, struct ucred **));
d244 1
a244 1
	    struct mbuf *, struct vnode **, int *, struct ucred **)))eopnotsupp)
d253 3
d268 2
a269 1
	fdesc_sysctl
a270 1

@


1.6
log
@Updates to match type changes in syscall tables
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.5 1997/11/06 05:58:32 csapuntz Exp $	*/
a215 5
#ifdef COMPAT_09
	sbp->f_type = 6;
#else
	sbp->f_type = 0;
#endif
a223 1
		sbp->f_type = mp->mnt_vfc->vfc_typenum;
@


1.5
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.4 1997/10/06 21:04:42 deraadt Exp $	*/
d61 1
a61 1
int	fdesc_mount __P((struct mount *, char *, caddr_t,
d81 1
a81 1
	char *path;
@


1.4
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: fdesc_vfsops.c,v 1.2 1996/02/27 07:51:40 niklas Exp $	*/
d108 1
a108 1
	getnewfsid(mp, makefstype(MOUNT_FDESC));
a133 1
	extern int doforce;
d136 1
a136 4
	if (mntflags & MNT_FORCE) {
		/* fdesc can never be rootfs so don't check for it */
		if (!doforce)
			return (EINVAL);
a137 1
	}
d172 1
a172 1

d178 1
a178 1
	VOP_LOCK(vp);
a183 12
fdesc_quotactl(mp, cmd, uid, arg, p)
	struct mount *mp;
	int cmd;
	uid_t uid;
	caddr_t arg;
	struct proc *p;
{

	return (EOPNOTSUPP);
}

int
d229 1
d234 1
a234 1
	strncpy(sbp->f_fstypename, mp->mnt_op->vfs_name, MFSNAMELEN);
d250 10
a259 38
/*
 * Fdesc flat namespace lookup.
 * Currently unsupported.
 */
int
fdesc_vget(mp, ino, vpp)
	struct mount *mp;
	ino_t ino;
	struct vnode **vpp;
{

	return (EOPNOTSUPP);
}


/*ARGSUSED*/
int
fdesc_fhtovp(mp, fhp, nam, vpp, exflagsp, credanonp)
	struct mount *mp;
	struct fid *fhp;
	struct mbuf *nam;
	struct vnode **vpp;
	int *exflagsp;
	struct ucred **credanonp;
{

	return (EOPNOTSUPP);
}

/*ARGSUSED*/
int
fdesc_vptofh(vp, fhp)
	struct vnode *vp;
	struct fid *fhp;
{
	return (EOPNOTSUPP);
}

a260 1
	MOUNT_FDESC,
d272 1
d274 1
@


1.3
log
@VFS Lite2 Changes
@
text
@d108 1
a108 1
	vfs_getnewfsid(mp);
d134 1
d137 4
a140 1
	if (mntflags & MNT_FORCE) 
d142 1
d177 1
a177 1
	struct proc *p = curproc;         /* XXX */
d183 1
a183 1
	vn_lock(vp, LK_EXCLUSIVE | LK_RETRY, p);
d189 12
a245 1
		sbp->f_type = mp->mnt_vfc->vfc_typenum;
d250 1
a250 1
	strncpy(sbp->f_fstypename, mp->mnt_vfc->vfc_name, MFSNAMELEN);
d266 38
a303 10
#define fdesc_fhtovp ((int (*) __P((struct mount *, struct fid *, \
	    struct mbuf *, struct vnode **, int *, struct ucred **)))eopnotsupp)
#define fdesc_quotactl ((int (*) __P((struct mount *, int, uid_t, caddr_t, \
	    struct proc *)))eopnotsupp)
#define fdesc_sysctl ((int (*) __P((int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *)))eopnotsupp)
#define fdesc_vget ((int (*) __P((struct mount *, ino_t, struct vnode **))) \
	    eopnotsupp)
#define fdesc_vptofh ((int (*) __P((struct vnode *, struct fid *)))eopnotsupp)
 
d305 1
a316 1
	fdesc_sysctl
a317 1

@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d108 1
a108 1
	getnewfsid(mp, makefstype(MOUNT_FDESC));
a133 1
	extern int doforce;
d136 1
a136 4
	if (mntflags & MNT_FORCE) {
		/* fdesc can never be rootfs so don't check for it */
		if (!doforce)
			return (EINVAL);
a137 1
	}
d172 1
a172 1

d178 1
a178 1
	VOP_LOCK(vp);
a183 12
fdesc_quotactl(mp, cmd, uid, arg, p)
	struct mount *mp;
	int cmd;
	uid_t uid;
	caddr_t arg;
	struct proc *p;
{

	return (EOPNOTSUPP);
}

int
d229 1
d234 1
a234 1
	strncpy(sbp->f_fstypename, mp->mnt_op->vfs_name, MFSNAMELEN);
d250 10
a259 38
/*
 * Fdesc flat namespace lookup.
 * Currently unsupported.
 */
int
fdesc_vget(mp, ino, vpp)
	struct mount *mp;
	ino_t ino;
	struct vnode **vpp;
{

	return (EOPNOTSUPP);
}


/*ARGSUSED*/
int
fdesc_fhtovp(mp, fhp, nam, vpp, exflagsp, credanonp)
	struct mount *mp;
	struct fid *fhp;
	struct mbuf *nam;
	struct vnode **vpp;
	int *exflagsp;
	struct ucred **credanonp;
{

	return (EOPNOTSUPP);
}

/*ARGSUSED*/
int
fdesc_vptofh(vp, fhp)
	struct vnode *vp;
	struct fid *fhp;
{
	return (EOPNOTSUPP);
}

a260 1
	MOUNT_FDESC,
d272 1
d274 1
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: fdesc_vfsops.c,v 1.20 1995/06/18 14:47:22 cgd Exp $	*/
d61 14
d151 1
a151 1
	if (error = vflush(mp, rootvp, flags))
d254 1
d256 1
a256 1
fdesc_sync(mp, waitfor)
d259 2
d280 2
d283 1
a283 1
fdesc_fhtovp(mp, fhp, setgen, vpp)
d286 1
a286 1
	int setgen;
d288 2
d291 1
d295 1
a300 1

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
