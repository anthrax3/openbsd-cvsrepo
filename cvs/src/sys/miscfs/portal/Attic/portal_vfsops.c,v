head	1.25;
access;
symbols
	OPENBSD_4_9:1.24.0.6
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.4
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.2
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.23.0.6
	OPENBSD_4_6_BASE:1.23
	OPENBSD_4_5:1.23.0.2
	OPENBSD_4_5_BASE:1.23
	OPENBSD_4_4:1.22.0.4
	OPENBSD_4_4_BASE:1.22
	OPENBSD_4_3:1.22.0.2
	OPENBSD_4_3_BASE:1.22
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.20.0.12
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.20.0.10
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.20.0.8
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.6
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.20.0.4
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.20.0.2
	OPENBSD_3_6_BASE:1.20
	SMP_SYNC_A:1.20
	SMP_SYNC_B:1.20
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	UBC_SYNC_A:1.16
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.14
	UBC:1.9.0.6
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.4
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.2
	SMP_BASE:1.8
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.6
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2011.04.05.18.51.26;	author thib;	state dead;
branches;
next	1.24;

1.24
date	2009.07.09.22.29.56;	author thib;	state Exp;
branches;
next	1.23;

1.23
date	2008.11.02.11.37.32;	author thib;	state Exp;
branches;
next	1.22;

1.22
date	2007.10.29.15.38.00;	author chl;	state Exp;
branches;
next	1.21;

1.21
date	2007.06.18.08.30.07;	author jasper;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.20.18.32.38;	author tedu;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.03.06.01.48;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2003.08.14.07.46.39;	author mickey;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.02.23.28.10;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.14.17.54.06;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.24.22.32.46;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2002.08.23.22.21.44;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.14.01.27.08;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.02.12.13.05.32;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.08.13.53.28;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.05.16.02.27;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.20.01.50.10;	author assar;	state Exp;
branches
	1.9.6.1;
next	1.8;

1.8
date	2000.02.07.04.57.16;	author assar;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	99.05.31.17.34.50;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.02.08.22.41.39;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	97.11.06.05.58.41;	author csapuntz;	state Exp;
branches;
next	1.4;

1.4
date	97.10.06.21.04.46;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.10.06.15.19.08;	author csapuntz;	state Exp;
branches;
next	1.2;

1.2
date	96.02.27.07.59.42;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.01;	author deraadt;	state Exp;
branches;
next	;

1.8.2.1
date	2001.05.14.22.32.54;	author niklas;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2002.03.06.02.13.24;	author niklas;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.8.2.4;

1.8.2.4
date	2003.03.28.00.00.20;	author niklas;	state Exp;
branches;
next	1.8.2.5;

1.8.2.5
date	2003.05.13.19.21.29;	author ho;	state Exp;
branches;
next	1.8.2.6;

1.8.2.6
date	2003.06.07.11.06.05;	author ho;	state Exp;
branches;
next	1.8.2.7;

1.8.2.7
date	2004.02.19.10.57.20;	author niklas;	state Exp;
branches;
next	1.8.2.8;

1.8.2.8
date	2004.06.05.23.13.06;	author niklas;	state Exp;
branches;
next	;

1.9.6.1
date	2002.06.11.03.30.20;	author art;	state Exp;
branches;
next	1.9.6.2;

1.9.6.2
date	2002.10.29.00.36.45;	author art;	state Exp;
branches;
next	1.9.6.3;

1.9.6.3
date	2003.05.19.22.36.11;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Remove portalfs.

While it is a terribly cool idea, it's just awful and since noone has stepped
up to the plate to keep it up with the current vop state, retire it to the
attic.

ok krw@@, deraadt@@, guenther@@, miod@@.
comments from jmc@@
@
text
@/*	$OpenBSD: portal_vfsops.c,v 1.24 2009/07/09 22:29:56 thib Exp $	*/
/*	$NetBSD: portal_vfsops.c,v 1.14 1996/02/09 22:40:41 christos Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software donated to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: Id: portal_vfsops.c,v 1.5 1992/05/30 10:25:27 jsp Exp
 *	@@(#)portal_vfsops.c	8.6 (Berkeley) 1/21/94
 */

/*
 * Portal Filesystem
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/proc.h>
#include <sys/filedesc.h>
#include <sys/file.h>
#include <sys/vnode.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/protosw.h>
#include <sys/domain.h>
#include <sys/un.h>
#include <sys/dirent.h>
#include <miscfs/portal/portal.h>

#define portal_init ((int (*)(struct vfsconf *))nullop)

int	portal_mount(struct mount *, const char *, void *,
			  struct nameidata *, struct proc *);
int	portal_start(struct mount *, int, struct proc *);
int	portal_unmount(struct mount *, int, struct proc *);
int	portal_root(struct mount *, struct vnode **);
int	portal_statfs(struct mount *, struct statfs *, struct proc *);


/*
 * Mount the per-process file descriptors (/dev/fd)
 */
int
portal_mount(struct mount *mp, const char *path, void *data, struct nameidata *ndp,
    struct proc *p)
{
	struct file *fp;
	struct portal_args args;
	struct portalmount *fmp;
	struct socket *so;
	struct vnode *rvp;
	size_t size;
	int error;

	/*
	 * Update is a no-op
	 */
	if (mp->mnt_flag & MNT_UPDATE)
		return (EOPNOTSUPP);

	error = copyin(data, &args, sizeof(struct portal_args));
	if (error)
		return (error);

	if ((error = getsock(p->p_fd, args.pa_socket, &fp)) != 0)
		return (error);
	so = (struct socket *) fp->f_data;
	if (so->so_proto->pr_domain->dom_family != AF_UNIX) {
		FRELE(fp);
		return (ESOCKTNOSUPPORT);
	}

	error = getnewvnode(VT_PORTAL, mp, portal_vnodeop_p, &rvp); /* XXX */
	if (error) {
		FRELE(fp);
		return (error);
	}
	rvp->v_data = malloc(sizeof(struct portalnode), M_TEMP, M_WAITOK);

	fmp = (struct portalmount *) malloc(sizeof(struct portalmount),
				 M_MISCFSMNT, M_WAITOK);
	rvp->v_type = VDIR;
	rvp->v_flag |= VROOT;
	VTOPORTAL(rvp)->pt_arg = 0;
	VTOPORTAL(rvp)->pt_size = 0;
	VTOPORTAL(rvp)->pt_fileid = PORTAL_ROOTFILEID;
	fmp->pm_root = rvp;
	fmp->pm_server = fp;
	fp->f_count++;
	FRELE(fp);

	mp->mnt_flag |= MNT_LOCAL;
	mp->mnt_data = fmp;
	vfs_getnewfsid(mp);

	mp->mnt_stat.f_namemax = MAXNAMLEN;

	(void) copyinstr(path, mp->mnt_stat.f_mntonname, MNAMELEN - 1, &size);
	bzero(mp->mnt_stat.f_mntonname + size, MNAMELEN - size);
	(void) copyinstr(args.pa_config, mp->mnt_stat.f_mntfromname,
	    MNAMELEN - 1, &size);
	bzero(mp->mnt_stat.f_mntfromname + size, MNAMELEN - size);
	return (0);
}

int
portal_start(struct mount *mp, int flags, struct proc *p)
{

	return (0);
}

int
portal_unmount(struct mount *mp, int mntflags, struct proc *p)
{
	struct vnode *rvp = VFSTOPORTAL(mp)->pm_root;
	int error, flags = 0;

	if (mntflags & MNT_FORCE) {
		flags |= FORCECLOSE;
	}

	/*
	 * Clear out buffer cache.  I don't think we
	 * ever get anything cached at this level at the
	 * moment, but who knows...
	 */
#ifdef notyet
	mntflushbuf(mp, 0); 
	if (mntinvalbuf(mp, 1))
		return (EBUSY);
#endif
	if (rvp->v_usecount > 1 && !(flags & FORCECLOSE))
		return (EBUSY);
	if ((error = vflush(mp, rvp, flags)) != 0)
		return (error);

	/*
	 * Release reference on underlying root vnode
	 */
	vrele(rvp);
	/*
	 * And blow it away for future re-use
	 */
	vgone(rvp);
	/*
	 * Shutdown the socket.  This will cause the select in the
	 * daemon to wake up, and then the accept will get ECONNABORTED
	 * which it interprets as a request to go and bury itself.
	 */
	FREF(VFSTOPORTAL(mp)->pm_server);
	soshutdown((struct socket *) VFSTOPORTAL(mp)->pm_server->f_data, 2);
	/*
	 * Discard reference to underlying file.  Must call closef because
	 * this may be the last reference.
	 */
	closef(VFSTOPORTAL(mp)->pm_server, NULL);
	/*
	 * Finally, throw away the portalmount structure
	 */
	free(mp->mnt_data, M_MISCFSMNT);
	mp->mnt_data = 0;
	return (0);
}

int
portal_root(struct mount *mp, struct vnode **vpp)
{
	struct vnode *vp;
	struct proc *p = curproc;

	/*
	 * Return locked reference to root.
	 */
	vp = VFSTOPORTAL(mp)->pm_root;
	vref(vp);
	vn_lock(vp, LK_EXCLUSIVE | LK_RETRY, p);
	*vpp = vp;
	return (0);
}

int
portal_statfs(struct mount *mp, struct statfs *sbp, struct proc *p)
{

	sbp->f_bsize = DEV_BSIZE;
	sbp->f_iosize = DEV_BSIZE;
	sbp->f_blocks = 2;		/* 1K to keep df happy */
	sbp->f_bfree = 0;
	sbp->f_bavail = 0;
	sbp->f_files = 1;		/* Allow for "." */
	sbp->f_ffree = 0;		/* See comments above */
	copy_statfs_info(sbp, mp);

	return (0);
}


#define portal_sync ((int (*)(struct mount *, int, struct ucred *, \
				  struct proc *))nullop)

#define portal_fhtovp ((int (*)(struct mount *, struct fid *, \
	    struct vnode **))eopnotsupp)
#define portal_quotactl ((int (*)(struct mount *, int, uid_t, caddr_t, \
	    struct proc *))eopnotsupp)
#define portal_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define portal_vget ((int (*)(struct mount *, ino_t, struct vnode **)) \
	    eopnotsupp)
#define portal_vptofh ((int (*)(struct vnode *, struct fid *))eopnotsupp)
#define portal_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)

const struct vfsops portal_vfsops = {
	portal_mount,
	portal_start,
	portal_unmount,
	portal_root,
	portal_quotactl,
	portal_statfs,
	portal_sync,
	portal_vget,
	portal_fhtovp,
	portal_vptofh,
	portal_init,
	portal_sysctl,
	portal_checkexp
};
@


1.24
log
@Remove the VREF() macro and replaces all instances with a call to verf(),
which is exactly what the macro does.

Macro's that are nothing more then:
#define FUNCTION(arg) function(arg)
are almost always pointless and should go away.

OK blambert@@
Agreed by many.
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.22 2007/10/29 15:38:00 chl Exp $	*/
@


1.23
log
@- Use CMSG_DATA(), to correctly to get a descriptor, fixing
  a locking botch in portal_open();
- set f_namemax at mount time and use copy_statfs_info() in
  portal_statfs();

This diff is a slight tweak of the diff sent in PR5968 by
Frank Denis (j at pureftpd.org) Thanks!
@
text
@d209 1
a209 1
	VREF(vp);
@


1.22
log
@MALLOC/FREE -> malloc/free

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.21 2007/06/18 08:30:07 jasper Exp $	*/
d60 1
d129 2
d226 2
a227 6
	if (sbp != &mp->mnt_stat) {
		bcopy(&mp->mnt_stat.f_fsid, &sbp->f_fsid, sizeof(sbp->f_fsid));
		bcopy(mp->mnt_stat.f_mntonname, sbp->f_mntonname, MNAMELEN);
		bcopy(mp->mnt_stat.f_mntfromname, sbp->f_mntfromname, MNAMELEN);
	}
	strncpy(sbp->f_fstypename, mp->mnt_vfc->vfc_name, MFSNAMELEN);
@


1.21
log
@ansify/de-register.
no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.20 2004/05/20 18:32:38 tedu Exp $	*/
d110 1
a110 2
	MALLOC(rvp->v_data, void *, sizeof(struct portalnode),
		M_TEMP, M_WAITOK);
@


1.20
log
@remove more caddr_t
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.19 2004/03/03 06:01:48 tedu Exp $	*/
d76 2
a77 6
portal_mount(mp, path, data, ndp, p)
	struct mount *mp;
	const char *path;
	void *data;
	struct nameidata *ndp;
	struct proc *p;
d138 1
a138 4
portal_start(mp, flags, p)
	struct mount *mp;
	int flags;
	struct proc *p;
d145 1
a145 4
portal_unmount(mp, mntflags, p)
	struct mount *mp;
	int mntflags;
	struct proc *p;
d198 1
a198 3
portal_root(mp, vpp)
	struct mount *mp;
	struct vnode **vpp;
d214 1
a214 4
portal_statfs(mp, sbp, p)
	struct mount *mp;
	struct statfs *sbp;
	struct proc *p;
@


1.19
log
@support forced unmounts.  pr2394 from peter werner
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.18 2003/08/14 07:46:39 mickey Exp $	*/
d130 1
a130 1
	mp->mnt_data = (qaddr_t)fmp;
@


1.18
log
@constify vfsops; tedu@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.17 2003/06/02 23:28:10 millert Exp $	*/
d174 1
a174 1
	if (rvp->v_usecount > 1)
@


1.17
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.16 2003/04/14 17:54:06 tedu Exp $	*/
d264 1
a264 1
struct vfsops portal_vfsops = {
@


1.16
log
@rename rootvp to rvp to avoid global.  ok deraadt@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.15 2003/02/24 22:32:46 tedu Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.15
log
@use M_MISCFSMNT instead of M_UFSMNT for mount data

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.14 2002/08/23 22:21:44 art Exp $	*/
d161 1
a161 1
	struct vnode *rootvp = VFSTOPORTAL(mp)->pm_root;
d178 1
a178 1
	if (rootvp->v_usecount > 1)
d180 1
a180 1
	if ((error = vflush(mp, rootvp, flags)) != 0)
d186 1
a186 1
	vrele(rootvp);
d190 1
a190 1
	vgone(rootvp);
@


1.14
log
@Just like getvnode, make getsock FREF the file so that we can't get away
with not refing it.

Eyeballed by lurene@@daemonkitty.net, fries@@, nordin@@ and fries@@
Some additional cleanups by nordin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.13 2002/03/14 01:27:08 millert Exp $	*/
d122 1
a122 1
				 M_UFSMNT, M_WAITOK);	/* XXX */
d206 1
a206 1
	free(mp->mnt_data, M_UFSMNT);	/* XXX */
@


1.13
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.12 2002/02/12 13:05:32 art Exp $	*/
d108 2
a109 1
	if (so->so_proto->pr_domain->dom_family != AF_UNIX)
d111 1
a111 2

	FREF(fp);
@


1.12
log
@Fix all users of getsock to use FREF/FRELE properly.
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.11 2002/02/08 13:53:28 art Exp $	*/
d66 1
a66 1
#define portal_init ((int (*) __P((struct vfsconf *)))nullop)
d68 6
a73 6
int	portal_mount __P((struct mount *, const char *, void *,
			  struct nameidata *, struct proc *));
int	portal_start __P((struct mount *, int, struct proc *));
int	portal_unmount __P((struct mount *, int, struct proc *));
int	portal_root __P((struct mount *, struct vnode **));
int	portal_statfs __P((struct mount *, struct statfs *, struct proc *));
d253 2
a254 2
#define portal_sync ((int (*) __P((struct mount *, int, struct ucred *, \
				  struct proc *)))nullop)
d256 7
a262 7
#define portal_fhtovp ((int (*) __P((struct mount *, struct fid *, \
	    struct vnode **)))eopnotsupp)
#define portal_quotactl ((int (*) __P((struct mount *, int, uid_t, caddr_t, \
	    struct proc *)))eopnotsupp)
#define portal_sysctl ((int (*) __P((int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *)))eopnotsupp)
#define portal_vget ((int (*) __P((struct mount *, ino_t, struct vnode **))) \
d264 3
a266 3
#define portal_vptofh ((int (*) __P((struct vnode *, struct fid *)))eopnotsupp)
#define portal_checkexp ((int (*) __P((struct mount *, struct mbuf *,	\
	int *, struct ucred **)))eopnotsupp)
@


1.11
log
@- Rename FILE_{,UN}USE to FREF and FRELE. USE is a bad verb and we don't have
  the same semantics as NetBSD anyway, so it's good to avoid name collissions.
- Always fdremove before freeing the file, not the other way around.
- falloc FREFs the file.
- have FILE_SET_MATURE FRELE the file (It feels like a good ortogonality to
  falloc FREFing the file).
- Use closef as much as possible instead of ffree in error paths of
  falloc:ing functions. closef is much more careful with the fd and can
  deal with the fd being forcibly closed by dup2. Also try to avoid
  manually calling *fo_close when closef can do that for us (this makes
  some error paths mroe complicated (sys_socketpair and sys_pipe), but
  others become simpler (sys_open)).
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.10 2002/02/05 16:02:27 art Exp $	*/
d111 2
d114 2
a115 1
	if (error)
d117 1
d129 3
a131 1
	fmp->pm_server = fp; fp->f_count++;
@


1.10
log
@Add counting of temporary references to a struct file (as opposed to references
from fd tables and other long-lived objects). This is to avoid races between
using a file descriptor and having another process (with shared fd table)
close it. We use a separate refence count so that error values from close(2)
will be correctly returned to the caller of close(2).

The macros for those reference counts are FILE_USE(fp) and FILE_UNUSE(fp).

Make sure that the cases where closef can be called "incorrectly" (most notably
dup2(2)) are handled.

Right now only callers of closef (and {,p}read) use FILE_{,UN}USE correctly,
more fixes incoming soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.9 2001/02/20 01:50:10 assar Exp $	*/
d190 1
a190 1
	FILE_USE(VFSTOPORTAL(mp)->pm_server);
@


1.9
log
@use void * consistently in vfs_mount and sys_mount.  ok @@art
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.8 2000/02/07 04:57:16 assar Exp $	*/
d190 1
d196 1
a196 1
	closef(VFSTOPORTAL(mp)->pm_server, (struct proc *) 0);
@


1.9.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.9 2001/02/20 01:50:10 assar Exp $	*/
d66 1
a66 1
#define portal_init ((int (*)(struct vfsconf *))nullop)
d68 6
a73 6
int	portal_mount(struct mount *, const char *, void *,
			  struct nameidata *, struct proc *);
int	portal_start(struct mount *, int, struct proc *);
int	portal_unmount(struct mount *, int, struct proc *);
int	portal_root(struct mount *, struct vnode **);
int	portal_statfs(struct mount *, struct statfs *, struct proc *);
a110 2
	FREF(fp);

d112 1
a112 2
	if (error) {
		FRELE(fp);
a113 1
	}
d125 1
a125 3
	fmp->pm_server = fp;
	fp->f_count++;
	FRELE(fp);
a189 1
	FREF(VFSTOPORTAL(mp)->pm_server);
d195 1
a195 1
	closef(VFSTOPORTAL(mp)->pm_server, NULL);
d246 2
a247 2
#define portal_sync ((int (*)(struct mount *, int, struct ucred *, \
				  struct proc *))nullop)
d249 7
a255 7
#define portal_fhtovp ((int (*)(struct mount *, struct fid *, \
	    struct vnode **))eopnotsupp)
#define portal_quotactl ((int (*)(struct mount *, int, uid_t, caddr_t, \
	    struct proc *))eopnotsupp)
#define portal_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define portal_vget ((int (*)(struct mount *, ino_t, struct vnode **)) \
d257 3
a259 3
#define portal_vptofh ((int (*)(struct vnode *, struct fid *))eopnotsupp)
#define portal_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)
@


1.9.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.9.6.1 2002/06/11 03:30:20 art Exp $	*/
d108 1
a108 2
	if (so->so_proto->pr_domain->dom_family != AF_UNIX) {
		FRELE(fp);
d110 2
a111 1
	}
@


1.9.6.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d122 1
a122 1
				 M_MISCFSMNT, M_WAITOK);
d161 1
a161 1
	struct vnode *rvp = VFSTOPORTAL(mp)->pm_root;
d178 1
a178 1
	if (rvp->v_usecount > 1)
d180 1
a180 1
	if ((error = vflush(mp, rvp, flags)) != 0)
d186 1
a186 1
	vrele(rvp);
d190 1
a190 1
	vgone(rvp);
d206 1
a206 1
	free(mp->mnt_data, M_MISCFSMNT);
@


1.8
log
@update to use new checkexp vfs operation
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.7 1999/05/31 17:34:50 millert Exp $	*/
d68 1
a68 1
int	portal_mount __P((struct mount *, const char *, caddr_t,
d83 1
a83 1
	caddr_t data;
d101 1
a101 1
	error = copyin(data, (caddr_t) &args, sizeof(struct portal_args));
@


1.8.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.9 2001/02/20 01:50:10 assar Exp $	*/
d68 1
a68 1
int	portal_mount __P((struct mount *, const char *, void *,
d83 1
a83 1
	void *data;
d101 1
a101 1
	error = copyin(data, &args, sizeof(struct portal_args));
@


1.8.2.2
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a110 2
	FREF(fp);

d112 1
a112 2
	if (error) {
		FRELE(fp);
a113 1
	}
d125 1
a125 3
	fmp->pm_server = fp;
	fp->f_count++;
	FRELE(fp);
a189 1
	FREF(VFSTOPORTAL(mp)->pm_server);
d195 1
a195 1
	closef(VFSTOPORTAL(mp)->pm_server, NULL);
@


1.8.2.3
log
@Merge in -current from roughly a week ago
@
text
@d66 1
a66 1
#define portal_init ((int (*)(struct vfsconf *))nullop)
d68 6
a73 6
int	portal_mount(struct mount *, const char *, void *,
			  struct nameidata *, struct proc *);
int	portal_start(struct mount *, int, struct proc *);
int	portal_unmount(struct mount *, int, struct proc *);
int	portal_root(struct mount *, struct vnode **);
int	portal_statfs(struct mount *, struct statfs *, struct proc *);
d253 2
a254 2
#define portal_sync ((int (*)(struct mount *, int, struct ucred *, \
				  struct proc *))nullop)
d256 7
a262 7
#define portal_fhtovp ((int (*)(struct mount *, struct fid *, \
	    struct vnode **))eopnotsupp)
#define portal_quotactl ((int (*)(struct mount *, int, uid_t, caddr_t, \
	    struct proc *))eopnotsupp)
#define portal_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define portal_vget ((int (*)(struct mount *, ino_t, struct vnode **)) \
d264 3
a266 3
#define portal_vptofh ((int (*)(struct vnode *, struct fid *))eopnotsupp)
#define portal_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)
@


1.8.2.4
log
@Sync the SMP branch with 3.3
@
text
@d108 1
a108 2
	if (so->so_proto->pr_domain->dom_family != AF_UNIX) {
		FRELE(fp);
d110 2
a111 1
	}
d122 1
a122 1
				 M_MISCFSMNT, M_WAITOK);
d206 1
a206 1
	free(mp->mnt_data, M_MISCFSMNT);
@


1.8.2.5
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.8.2.4 2003/03/28 00:00:20 niklas Exp $	*/
d161 1
a161 1
	struct vnode *rvp = VFSTOPORTAL(mp)->pm_root;
d178 1
a178 1
	if (rvp->v_usecount > 1)
d180 1
a180 1
	if ((error = vflush(mp, rvp, flags)) != 0)
d186 1
a186 1
	vrele(rvp);
d190 1
a190 1
	vgone(rvp);
@


1.8.2.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.8.2.5 2003/05/13 19:21:29 ho Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.8.2.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d264 1
a264 1
const struct vfsops portal_vfsops = {
@


1.8.2.8
log
@Merge with the trunk
@
text
@d130 1
a130 1
	mp->mnt_data = fmp;
d174 1
a174 1
	if (rvp->v_usecount > 1 && !(flags & FORCECLOSE))
@


1.7
log
@New struct statfs with mount options.  NOTE: this replaces statfs(2),
fstatfs(2), and getfsstat(2) so you will need to build a new kernel
before doing a "make build" or you will get "unimplemented syscall" errors.

The new struct statfs has the following featuires:
o Has a u_int32_t flags field--now softdep can have a real flag.

o Uses u_int32_t instead of longs (nicer on the alpha).  Note: the man
page used to lie about setting invalid/unused fields to -1.  SunOS does
that but our code never has.

o Gets rid of f_type completely.  It hasn't been used since NetBSD 0.9
and having it there but always 0 is confusing.  It is conceivable
that this may cause some old code to not compile but that is better
than silently breaking.

o Adds a mount_info union that contains the FSTYPE_args struct.  This
means that "mount" can now tell you all the options a filesystem was
mounted with.  This is especially nice for NFS.

Other changes:
o The linux statfs emulation didn't convert between BSD fs names
  and linux f_type numbers.  Now it does, since the BSD f_type
  number is useless to linux apps (and has been removed anyway)

o FreeBSD's struct statfs is different from our (both old and new)
and thus needs conversion.  Previously, the OpenBSD syscalls
were used without any real translation.

o mount(8) will now show extra info when invoked with no arguments.
However, to see *everything* you need to use the -v (verbose) flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.6 1998/02/08 22:41:39 tholo Exp $	*/
d250 1
a250 1
	    struct mbuf *, struct vnode **, int *, struct ucred **)))eopnotsupp)
d258 2
d273 2
a274 1
	portal_sysctl
@


1.6
log
@Updates to match type changes in syscall tables
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.5 1997/11/06 05:58:41 csapuntz Exp $	*/
a228 5
#ifdef COMPAT_09
	sbp->f_type = 12;
#else
	sbp->f_type = 0;
#endif
a236 1
		sbp->f_type = mp->mnt_vfc->vfc_typenum;
@


1.5
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.4 1997/10/06 21:04:46 deraadt Exp $	*/
d68 1
a68 1
int	portal_mount __P((struct mount *, char *, caddr_t,
d82 1
a82 1
	char *path;
@


1.4
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: portal_vfsops.c,v 1.2 1996/02/27 07:59:42 niklas Exp $	*/
d66 2
a67 1
void	portal_init __P((void));
a72 2
int	portal_quotactl __P((struct mount *, int, uid_t, caddr_t,
			     struct proc *));
a73 5
int	portal_sync __P((struct mount *, int, struct ucred *, struct proc *));
int	portal_vget __P((struct mount *, ino_t, struct vnode **));
int	portal_fhtovp __P((struct mount *, struct fid *, struct mbuf *,
			   struct vnode **, int *, struct ucred **));
int	portal_vptofh __P((struct vnode *, struct fid *));
a74 4
void
portal_init()
{
}
d129 1
a129 1
	getnewfsid(mp, makefstype(MOUNT_PORTAL));
a154 1
	extern int doforce;
a158 3
		/* portal can never be rootfs so don't check for it */
		if (!doforce)
			return (EINVAL);
d210 1
d217 1
a217 1
	VOP_LOCK(vp);
a222 12
portal_quotactl(mp, cmd, uid, arg, p)
	struct mount *mp;
	int cmd;
	uid_t uid;
	caddr_t arg;
	struct proc *p;
{

	return (EOPNOTSUPP);
}

int
d242 1
d247 1
a247 1
	strncpy(sbp->f_fstypename, mp->mnt_op->vfs_name, MFSNAMELEN);
a250 8
/*ARGSUSED*/
int
portal_sync(mp, waitfor, uc, p)
	struct mount *mp;
	int waitfor;
	struct ucred *uc;
	struct proc *p;
{
d252 2
a253 2
	return (0);
}
d255 9
a263 31
int
portal_vget(mp, ino, vpp)
	struct mount *mp;
	ino_t ino;
	struct vnode **vpp;
{

	return (EOPNOTSUPP);
}

int
portal_fhtovp(mp, fhp, mb, vpp, what, anon)
	struct mount *mp;
	struct fid *fhp;
	struct mbuf *mb;
	struct vnode **vpp;
	int *what;
	struct ucred **anon;
{

	return (EOPNOTSUPP);
}

int
portal_vptofh(vp, fhp)
	struct vnode *vp;
	struct fid *fhp;
{

	return (EOPNOTSUPP);
}
a265 1
	MOUNT_PORTAL,
d277 1
@


1.3
log
@VFS Lite2 Changes
@
text
@d66 1
a66 2
#define portal_init ((int (*) __P((struct vfsconf *)))nullop)

d72 2
d75 5
d81 4
d139 1
a139 1
	vfs_getnewfsid(mp);
d165 1
d170 3
a223 1
	struct proc *p = curproc;
d230 1
a230 1
	vn_lock(vp, LK_EXCLUSIVE | LK_RETRY, p);
d236 12
a266 1
		sbp->f_type = mp->mnt_vfc->vfc_typenum;
d271 1
a271 1
	strncpy(sbp->f_fstypename, mp->mnt_vfc->vfc_name, MFSNAMELEN);
d275 8
d284 2
a285 2
#define portal_sync ((int (*) __P((struct mount *, int, struct ucred *, \
				  struct proc *)))nullop)
d287 31
a317 9
#define portal_fhtovp ((int (*) __P((struct mount *, struct fid *, \
	    struct mbuf *, struct vnode **, int *, struct ucred **)))eopnotsupp)
#define portal_quotactl ((int (*) __P((struct mount *, int, uid_t, caddr_t, \
	    struct proc *)))eopnotsupp)
#define portal_sysctl ((int (*) __P((int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *)))eopnotsupp)
#define portal_vget ((int (*) __P((struct mount *, ino_t, struct vnode **))) \
	    eopnotsupp)
#define portal_vptofh ((int (*) __P((struct vnode *, struct fid *)))eopnotsupp)
d320 1
a331 1
	portal_sysctl
@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 2
a67 1
void	portal_init __P((void));
a72 2
int	portal_quotactl __P((struct mount *, int, uid_t, caddr_t,
			     struct proc *));
a73 5
int	portal_sync __P((struct mount *, int, struct ucred *, struct proc *));
int	portal_vget __P((struct mount *, ino_t, struct vnode **));
int	portal_fhtovp __P((struct mount *, struct fid *, struct mbuf *,
			   struct vnode **, int *, struct ucred **));
int	portal_vptofh __P((struct vnode *, struct fid *));
a74 4
void
portal_init()
{
}
d129 1
a129 1
	getnewfsid(mp, makefstype(MOUNT_PORTAL));
a154 1
	extern int doforce;
a158 3
		/* portal can never be rootfs so don't check for it */
		if (!doforce)
			return (EINVAL);
d210 1
d217 1
a217 1
	VOP_LOCK(vp);
a222 12
portal_quotactl(mp, cmd, uid, arg, p)
	struct mount *mp;
	int cmd;
	uid_t uid;
	caddr_t arg;
	struct proc *p;
{

	return (EOPNOTSUPP);
}

int
d242 1
d247 1
a247 1
	strncpy(sbp->f_fstypename, mp->mnt_op->vfs_name, MFSNAMELEN);
a250 8
/*ARGSUSED*/
int
portal_sync(mp, waitfor, uc, p)
	struct mount *mp;
	int waitfor;
	struct ucred *uc;
	struct proc *p;
{
d252 2
a253 2
	return (0);
}
d255 9
a263 31
int
portal_vget(mp, ino, vpp)
	struct mount *mp;
	ino_t ino;
	struct vnode **vpp;
{

	return (EOPNOTSUPP);
}

int
portal_fhtovp(mp, fhp, mb, vpp, what, anon)
	struct mount *mp;
	struct fid *fhp;
	struct mbuf *mb;
	struct vnode **vpp;
	int *what;
	struct ucred **anon;
{

	return (EOPNOTSUPP);
}

int
portal_vptofh(vp, fhp)
	struct vnode *vp;
	struct fid *fhp;
{

	return (EOPNOTSUPP);
}
a265 1
	MOUNT_PORTAL,
d277 1
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: portal_vfsops.c,v 1.13 1995/06/18 14:47:35 cgd Exp $	*/
d66 16
a81 1
int
a83 2

	return (0);
d111 2
a112 1
	if (error = copyin(data, (caddr_t) &args, sizeof(struct portal_args)))
d115 1
a115 1
	if (error = getsock(p->p_fd, args.pa_socket, &fp))
d188 1
a188 1
	if (error = vflush(mp, rootvp, flags))
d275 1
d277 1
a277 1
portal_sync(mp, waitfor)
d280 2
d298 1
a298 1
portal_fhtovp(mp, fhp, vpp)
d301 1
d303 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
