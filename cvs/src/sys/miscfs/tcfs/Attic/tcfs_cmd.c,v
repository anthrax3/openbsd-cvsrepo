head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_2:1.3.0.14
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.12
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.10
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	SMP:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2003.02.24.01.17.38;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2000.06.17.20.25.54;	author provos;	state Exp;
branches
	1.3.6.1
	1.3.10.1;
next	1.2;

1.2
date	2000.06.17.17.32.26;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.17.17.16.06;	author provos;	state Exp;
branches;
next	;

1.3.6.1
date	2001.05.14.22.32.57;	author niklas;	state Exp;
branches;
next	1.3.6.2;

1.3.6.2
date	2003.03.28.00.00.20;	author niklas;	state dead;
branches;
next	;

1.3.10.1
date	2003.05.19.22.36.12;	author tedu;	state dead;
branches;
next	;


desc
@@


1.4
log
@Remove tcfs until this entire licensing mess is cleaned up.  This is
ANOTHER case of a developer having ignored licenses when importing code.
@
text
@/*	$OpenBSD: tcfs_cmd.c,v 1.3 2000/06/17 20:25:54 provos Exp $	*/
/*
 * Copyright 2000 The TCFS Project at http://tcfs.dia.unisa.it/
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/vnode.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/malloc.h>
#include <sys/buf.h>
#include <miscfs/tcfs/tcfs.h>
#include <miscfs/tcfs/tcfs_rw.h>
#include <miscfs/tcfs/tcfs_keytab.h>
#include <miscfs/tcfs/tcfs_cmd.h>
#include <miscfs/tcfs/tcfs_cipher.h>

int
tcfs_init_mp(struct tcfs_mount *mp, struct tcfs_args *req)
{
	int result = 0;
	int status = 0;

	if (!(mp->tcfs_uid_kt = tcfs_keytab_init())) {
		result = ENOMEM;
		status = ALLOCATION_FAILED;
	} else {
		if (!(mp->tcfs_gid_kt = tcfs_keytab_init())) {
			tcfs_keytab_dispose(mp->tcfs_uid_kt);
			status = ALLOCATION_FAILED;
			result = ENOMEM;
		} else {
			if ((req->cipher_num >= MaxNumOfCipher)||
			    (tcfs_cipher_vect[req->cipher_num].cipher_keysize == 0)) {
			 	result = EINVAL;
			 	status = BAD_CIPHER_NUMBER;
			 	tcfs_keytab_dispose(mp->tcfs_uid_kt);
			 	tcfs_keytab_dispose(mp->tcfs_gid_kt);
			} else
				mp->tcfs_cipher_num=req->cipher_num;
		}
	}
	
	(void)tcfs_set_status(mp,req,status);
	return result;
}

int
tcfs_exec_cmd(struct tcfs_mount *mp, struct tcfs_args *req)
{
	void *ks;
	int result = 0;
	int status = 0;
	

	switch (req->cmd) {
	case TCFS_PUT_UIDKEY:
		ks=TCFS_INIT_KEY(mp, req->tcfs_key);
		if (!ks) {
			result = ENOMEM;
			status = ALLOCATION_FAILED;
			break;
		}
		result = tcfs_keytab_push_uid(mp->tcfs_uid_kt, req->user,ks);
		if(result) {
			TCFS_CLEANUP_KEY(mp,ks);
			status = PUSHKEY_ERROR;
		}
		break;

	case TCFS_RM_UIDKEY:
		result = tcfs_keytab_rm_uid(mp->tcfs_uid_kt, req->user);
		status = (result ? RMKEY_ERROR : TCFS_OK);
		break;

	case TCFS_PUT_PIDKEY:
		ks = TCFS_INIT_KEY(mp, req->tcfs_key);
		if(!ks) {
			result = ENOMEM;
			status = ALLOCATION_FAILED;
			break;
		}
		result = tcfs_keytab_push_pid(mp->tcfs_uid_kt, req->user,
					      req->proc, ks);
		if(result) {
			TCFS_CLEANUP_KEY(mp,ks);
			status = PUSHKEY_ERROR;
		}
		break;

	case TCFS_RM_PIDKEY:
		result = tcfs_keytab_rm_pid(mp->tcfs_uid_kt, 
					    req->user, req->proc);
		status = (result ? RMKEY_ERROR : TCFS_OK);
		break;

	case TCFS_PUT_GIDKEY:
		result = tcfs_keytab_push_gid(mp, mp->tcfs_gid_kt, req->user,
					      req->group, req->treshold,
					      req->tcfs_key);
			
		status = (result ? PUSHKEY_ERROR : TCFS_OK);
		break; 

	case TCFS_RM_GIDKEY:
		result = tcfs_keytab_rm_gid(mp->tcfs_gid_kt, req->user,
					    req->group);
		status = (result ? RMKEY_ERROR : TCFS_OK);
		break;

	case TCFS_GET_STATUS:
		return tcfs_set_status(mp, req, TCFS_OK);
	}
	(void)tcfs_set_status(mp, req, status);
	return result;
}

int
tcfs_set_status(struct tcfs_mount *mp, struct tcfs_args *req, int error)
{
	req->st.status = error;
	req->st.tcfs_version = TCFS_VERSION_NUM;

	if(error != TCFS_OK)
		return error;

	req->st.n_ukey = mp->tcfs_uid_kt->cnt;
	req->st.n_gkey = mp->tcfs_gid_kt->cnt;
	strncpy(req->st.cipher_desc, TCFS_CIPHER_DESC(mp), MaxCipherNameLen);
	req->st.cipher_keysize = TCFS_CIPHER_KEYSIZE(mp);
	req->st.cipher_version = TCFS_CIPHER_VERSION(mp);

	return error;
}
	
int
tcfs_checkukey(struct ucred *c, struct proc *p, struct vnode *vp)
{
	return tcfs_keytab_check_uid(TCFS_VP2UKT(vp), c->cr_uid);
}

void *
tcfs_getukey(struct ucred *c, struct proc *p, struct vnode *vp)
{
	tcfs_keytab_node *n;

	n = tcfs_keytab_fetch_uid(TCFS_VP2UKT(vp),c->cr_uid);

	if (n)
		return n->kn_key;
	else
		return (void*)NULL;
}

int
tcfs_checkpkey(struct ucred *c, struct proc *p, struct vnode *vp)
{
	struct proc *cp;

	if (!p)
		cp = curproc;
	else
		cp = p;

	return tcfs_keytab_check_pid(TCFS_VP2UKT(vp), c->cr_uid, cp->p_pid);
}

void *
tcfs_getpkey(struct ucred *c, struct proc *p, struct vnode *vp)
{
	tcfs_keytab_node *n;
	struct proc *cp;

	if (!p)
		cp = curproc;
	else
		cp = p;
	
	n = tcfs_keytab_fetch_pid(TCFS_VP2UKT(vp), c->cr_uid, cp->p_pid);

	if (n)
		return n->kn_key;
	else
		return (void*)NULL;
}

int 
tcfs_checkgkey(struct ucred *c, struct proc *p, struct vnode *vp)
{
	return tcfs_keytab_check_uid(TCFS_VP2GKT(vp), c->cr_gid);
}

void *
tcfs_getgkey(struct ucred *c, struct proc *p, struct vnode *vp)
{
	tcfs_keytab_node *n;

	n = tcfs_keytab_fetch_gid(TCFS_VP2GKT(vp), c->cr_gid);

	if (n)
		return n->kn_key;
	else
		return (void*)NULL;
}

@


1.3
log
@some KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cmd.c,v 1.2 2000/06/17 17:32:26 provos Exp $	*/
@


1.3.10.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cmd.c,v 1.3 2000/06/17 20:25:54 provos Exp $	*/
@


1.3.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cmd.c,v 1.3 2000/06/17 20:25:54 provos Exp $	*/
@


1.3.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cmd.c,v 1.3.6.1 2001/05/14 22:32:57 niklas Exp $	*/
@


1.2
log
@BSD copyright + tags
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.h,v 1.17 2000/06/12 17:24:26 itojun Exp $	*/
d39 16
a54 21
#include "tcfs_rw.h"
#ifndef _TCFS_KEYTAB_H_
#include "tcfs_keytab.h"
#endif
#include "tcfs_cmd.h"
#include "tcfs_cipher.h"

int tcfs_init_mp(struct tcfs_mount *mp, struct tcfs_args *req)
{
	int result=0;
	int status=0;

	if (!(mp->tcfs_uid_kt=tcfs_keytab_init()))
		{
		 result= ENOMEM;
		 status= ALLOCATION_FAILED;
		}
	else
	{
		if (!(mp->tcfs_gid_kt=tcfs_keytab_init()))
		{
d56 7
a62 10
			status= ALLOCATION_FAILED;
			result= ENOMEM;
		}
		else
		{
			if ((req->cipher_num>=MaxNumOfCipher)||
	    		(tcfs_cipher_vect[req->cipher_num].cipher_keysize==0))
			{
			 	result=EINVAL;
			 	status=BAD_CIPHER_NUMBER;
d65 1
a65 2
			}
			else
d74 2
a75 1
int tcfs_exec_cmd(struct tcfs_mount *mp, struct tcfs_args *req)
d78 2
a79 2
	int result=0;
	int status=0;
d82 6
a87 21
	switch (req->cmd)
	{
	 	case TCFS_PUT_UIDKEY:
			ks=TCFS_INIT_KEY(mp,req->tcfs_key);
			if(!ks)
				{
				 result= ENOMEM;
				 status= ALLOCATION_FAILED;
				 break;
				}
			   result=tcfs_keytab_push_uid(mp->tcfs_uid_kt,req->user,ks);
			   if(result)
				{
				  TCFS_CLEANUP_KEY(mp,ks);
				  status=PUSHKEY_ERROR;
				}
			   break;

	 	case TCFS_RM_UIDKEY:
			result = tcfs_keytab_rm_uid(mp->tcfs_uid_kt,req->user);
			status=(result?RMKEY_ERROR:TCFS_OK);
d89 7
d97 10
a106 19
	 	case TCFS_PUT_PIDKEY:
			ks=TCFS_INIT_KEY(mp,req->tcfs_key);
			if(!ks)
				{
				 result= ENOMEM;
				 status= ALLOCATION_FAILED;
				 break;
				}
			  result=tcfs_keytab_push_pid(mp->tcfs_uid_kt,req->user,req->proc,ks);
			  if(result)
				{
				  TCFS_CLEANUP_KEY(mp,ks);
				  status=PUSHKEY_ERROR;
				}
			  break;

	 	case TCFS_RM_PIDKEY:
			result=tcfs_keytab_rm_pid(mp->tcfs_uid_kt,req->user,req->proc);
			status=(result?RMKEY_ERROR:TCFS_OK);
d108 8
d117 10
a126 2
		case TCFS_PUT_GIDKEY:
			result=tcfs_keytab_push_gid(mp,mp->tcfs_gid_kt,req->user,req->group,req->treshold,req->tcfs_key);
d128 2
a129 2
			status=(result?PUSHKEY_ERROR:TCFS_OK);
			break; 
d131 5
a135 4
		case TCFS_RM_GIDKEY:
			result= tcfs_keytab_rm_gid(mp->tcfs_gid_kt,req->user,req->group);
			status=(result?RMKEY_ERROR:TCFS_OK);
			break;
d137 2
a138 2
		case TCFS_GET_STATUS:
			return tcfs_set_status(mp,req,TCFS_OK);
d140 1
a140 1
	(void)tcfs_set_status(mp,req,status);
d144 2
a145 1
int tcfs_set_status(struct tcfs_mount *mp, struct tcfs_args *req, int error)
d147 2
a148 2
	req->st.status=error;
	req->st.tcfs_version=TCFS_VERSION_NUM;
d150 1
a150 1
	if(error!=TCFS_OK)
d153 5
a157 5
	req->st.n_ukey=mp->tcfs_uid_kt->cnt;
	req->st.n_gkey=mp->tcfs_gid_kt->cnt;
	strncpy(req->st.cipher_desc,TCFS_CIPHER_DESC(mp),MaxCipherNameLen);
	req->st.cipher_keysize=TCFS_CIPHER_KEYSIZE(mp);
	req->st.cipher_version=TCFS_CIPHER_VERSION(mp);
d162 2
a163 1
int tcfs_checkukey(struct ucred *c, struct proc *p, struct vnode *vp)
d165 1
a165 1
	return tcfs_keytab_check_uid(TCFS_VP2UKT(vp),c->cr_uid);
d168 2
a169 1
void *tcfs_getukey(struct ucred *c, struct proc *p, struct vnode *vp)
d173 1
a173 1
	n=tcfs_keytab_fetch_uid(TCFS_VP2UKT(vp),c->cr_uid);
d175 1
a175 1
	if(n)
a177 1
		{
a178 1
		}
d180 3
a182 1
int tcfs_checkpkey(struct ucred *c, struct proc *p, struct vnode *vp)
d185 3
a187 2
	if(!p)
		cp=curproc;
d189 1
a189 1
		cp=p;
d191 1
a191 1
	return tcfs_keytab_check_pid(TCFS_VP2UKT(vp),c->cr_uid,cp->p_pid);
d194 2
a195 1
void *tcfs_getpkey(struct ucred *c, struct proc *p, struct vnode *vp)
d200 2
a201 2
	if(!p)
		cp=curproc;
d203 1
a203 1
		cp=p;
d205 1
a205 1
	n=tcfs_keytab_fetch_pid(TCFS_VP2UKT(vp),c->cr_uid,cp->p_pid);
d207 1
a207 1
	if(n)
d213 2
a214 1
int tcfs_checkgkey(struct ucred *c, struct proc *p, struct vnode *vp)
d216 1
a216 1
	return tcfs_keytab_check_uid(TCFS_VP2GKT(vp),c->cr_gid);
d219 2
a220 1
void *tcfs_getgkey(struct ucred *c, struct proc *p, struct vnode *vp)
d224 1
a224 1
	n=tcfs_keytab_fetch_gid(TCFS_VP2GKT(vp),c->cr_gid);
d226 1
a226 1
	if(n)
@


1.1
log
@initial import of tcfs.
@
text
@d1 27
@

