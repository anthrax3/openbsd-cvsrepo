head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_2:1.3.0.14
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.12
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.10
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	SMP:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2003.02.24.01.17.39;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2000.06.17.20.25.54;	author provos;	state Exp;
branches
	1.3.6.1
	1.3.10.1;
next	1.2;

1.2
date	2000.06.17.17.32.27;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.17.17.16.06;	author provos;	state Exp;
branches;
next	;

1.3.6.1
date	2001.05.14.22.32.57;	author niklas;	state Exp;
branches;
next	1.3.6.2;

1.3.6.2
date	2003.03.28.00.00.20;	author niklas;	state dead;
branches;
next	;

1.3.10.1
date	2003.05.19.22.36.12;	author tedu;	state dead;
branches;
next	;


desc
@@


1.4
log
@Remove tcfs until this entire licensing mess is cleaned up.  This is
ANOTHER case of a developer having ignored licenses when importing code.
@
text
@/*	$OpenBSD: tcfs_fileinfo.c,v 1.3 2000/06/17 20:25:54 provos Exp $	*/
/*
 * Copyright 2000 The TCFS Project at http://tcfs.dia.unisa.it/
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/vnode.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/malloc.h>
#include <sys/buf.h>
#include <sys/stat.h>

#include <miscfs/tcfs/tcfs.h>
#include <miscfs/tcfs/tcfs_rw.h>


tcfs_fileinfo
tcfs_xgetflags(struct vnode *v, struct proc *p, struct ucred *c)
{
        tcfs_fileinfo r;
        struct vop_getattr_args x;
        struct vattr att;
        int retval;

        att = va_null;
        x.a_desc = VDESC(vop_getattr);
        x.a_vp = v;
        x.a_vap = &att;
        x.a_cred = c;
        x.a_p = p;

        retval = tcfs_bypass((void*)&x);
        r.flag = (unsigned long)(x.a_vap->va_flags);
        r.end_of_file = x.a_vap->va_size;

        return r;
}

int 
tcfs_xsetflags(struct vnode *v, struct proc *p, struct ucred *c,
	       tcfs_fileinfo *i)
{
        struct vop_setattr_args x;
        struct vattr att;
        int retval;

        att = va_null;

	att.va_flags = i->flag;

        x.a_desc = VDESC(vop_setattr);
        x.a_vp = v;
        x.a_vap = &att;
        x.a_cred = c;
        x.a_p = p;

        retval = tcfs_bypass((void*)&x);
        return retval;
}



tcfs_fileinfo
tcfs_get_fileinfo(void *a)
{
	struct vop_read_args *arg;

	arg = (struct vop_read_args*)a;
	return tcfs_xgetflags(arg->a_vp, arg->a_uio->uio_procp, arg->a_cred);
}


int
tcfs_set_fileinfo(void *a, tcfs_fileinfo *i)
{
	struct vop_read_args *arg;

	arg = (struct vop_read_args*)a;
	return tcfs_xsetflags(arg->a_vp, arg->a_uio->uio_procp,
			      arg->a_cred, i);
}
@


1.3
log
@some KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_fileinfo.c,v 1.2 2000/06/17 17:32:27 provos Exp $	*/
@


1.3.10.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_fileinfo.c,v 1.3 2000/06/17 20:25:54 provos Exp $	*/
@


1.3.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_fileinfo.c,v 1.3 2000/06/17 20:25:54 provos Exp $	*/
@


1.3.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_fileinfo.c,v 1.3.6.1 2001/05/14 22:32:57 niklas Exp $	*/
@


1.2
log
@BSD copyright + tags
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.h,v 1.17 2000/06/12 17:24:26 itojun Exp $	*/
d39 1
d41 1
a41 1
#include "tcfs_rw.h"
d44 2
a45 1
tcfs_fileinfo tcfs_xgetflags(struct vnode *v, struct proc *p, struct ucred *c)
d52 10
a61 10
        att=va_null;
        x.a_desc=VDESC(vop_getattr);
        x.a_vp=v;
        x.a_vap=&att;
        x.a_cred=c;
        x.a_p=p;

        retval=tcfs_bypass((void*)&x);
        r.flag=(unsigned long)(x.a_vap->va_flags);
        r.end_of_file=x.a_vap->va_size;
d66 3
a68 1
int tcfs_xsetflags(struct vnode *v, struct proc *p, struct ucred *c, tcfs_fileinfo *i)
d74 1
a74 1
        att=va_null;
d76 1
a76 1
	att.va_flags=i->flag;
d78 5
a82 5
        x.a_desc=VDESC(vop_setattr);
        x.a_vp=v;
        x.a_vap=&att;
        x.a_cred=c;
        x.a_p=p;
d84 1
a84 1
        retval=tcfs_bypass((void*)&x);
d90 2
a91 1
tcfs_fileinfo tcfs_get_fileinfo(void *a)
d95 2
a96 2
	arg=(struct vop_read_args*)a;
	return tcfs_xgetflags(arg->a_vp,arg->a_uio->uio_procp,arg->a_cred);
d100 2
a101 1
int tcfs_set_fileinfo(void *a, tcfs_fileinfo *i)
d105 3
a107 2
	arg=(struct vop_read_args*)a;
	return tcfs_xsetflags(arg->a_vp, arg->a_uio->uio_procp,arg->a_cred,i); ;
a108 1

@


1.1
log
@initial import of tcfs.
@
text
@d1 27
@

