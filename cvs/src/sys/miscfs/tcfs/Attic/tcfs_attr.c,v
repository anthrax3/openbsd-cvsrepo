head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_2:1.3.0.14
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.12
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.10
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	SMP:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2003.02.24.01.17.38;	author deraadt;	state dead;
branches;
next	1.3;

1.3
date	2000.06.17.20.25.54;	author provos;	state Exp;
branches
	1.3.6.1
	1.3.10.1;
next	1.2;

1.2
date	2000.06.17.17.32.26;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.17.17.16.05;	author provos;	state Exp;
branches;
next	;

1.3.6.1
date	2001.05.14.22.32.56;	author niklas;	state Exp;
branches;
next	1.3.6.2;

1.3.6.2
date	2003.03.28.00.00.20;	author niklas;	state dead;
branches;
next	;

1.3.10.1
date	2003.05.19.22.36.12;	author tedu;	state dead;
branches;
next	;


desc
@@


1.4
log
@Remove tcfs until this entire licensing mess is cleaned up.  This is
ANOTHER case of a developer having ignored licenses when importing code.
@
text
@/*	$OpenBSD: tcfs_attr.c,v 1.3 2000/06/17 20:25:54 provos Exp $	*/
/*
 * Copyright 2000 The TCFS Project at http://tcfs.dia.unisa.it/
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/vnode.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/malloc.h>
#include <sys/buf.h>

#include <miscfs/tcfs/tcfs.h>
#include <miscfs/tcfs/tcfs_rw.h>

int
tcfs_getattr(v)
        void *v;
{
        struct vop_getattr_args *ap = v;
        int error;
	tcfs_fileinfo i;
        if ((error = tcfs_bypass(ap)) != 0)
                return (error);
        /* Requires that arguments be restored. */

        ap->a_vap->va_fsid = ap->a_vp->v_mount->mnt_stat.f_fsid.val[0];
	i.flag=ap->a_vap->va_flags; 
	ap->a_vap->va_size-=FI_SPURE(&i);

        return (0);
}


int           
tcfs_setattr(v)
	void *v;
{
	struct vop_setattr_args *a = v;
	struct vattr *ap;
	u_quad_t size = 0;
	tcfs_fileinfo i, n;
	int error, sp = 0;
			
	i = tcfs_xgetflags(a->a_vp,a->a_p,a->a_cred);
	ap = a->a_vap;

        if (FI_GSHAR(&i)) {
		if(!tcfs_getgkey(a->a_cred,a->a_p,a->a_vp))
                        return EACCES;
        } else {
		if (!tcfs_getpkey(a->a_cred, a->a_p,a->a_vp))
                 	if (!tcfs_getukey(a->a_cred, a->a_p,a->a_vp))
                         	return EACCES;
	}

	if ((ap->va_flags) != VNOVAL) {
		n.flag = ap->va_flags;
		n.end_of_file = i.end_of_file;

		if ((FI_CFLAG(&n) && FI_GSHAR(&i)) || 
		    (FI_GSHAR(&n) && FI_CFLAG(&i)))
			return EACCES;

		if (FI_SPURE(&n) != FI_SPURE(&i)) {
			/* le spure no (le settano solo write e trunc) */
			return EACCES;
		}
	
		if (FI_CFLAG(&n) && (!FI_CFLAG(&i))) {
			sp = tcfs_ed(a->a_vp, a->a_p, a->a_cred, &n);
			FI_SET_SP(&n, sp);
		}

		if ((!FI_CFLAG(&n)) && FI_CFLAG(&i)) {
			sp = tcfs_ed(a->a_vp, a->a_p, a->a_cred, &n);
			FI_SET_SP(&n, 0);
		}

		if (FI_GSHAR(&n) && (!FI_GSHAR(&i))) {
			sp = tcfs_ed(a->a_vp, a->a_p, a->a_cred, &n);
			FI_SET_SP(&n,sp);
		}

		if ((!FI_GSHAR(&n)) && FI_GSHAR(&i)) {
			sp = tcfs_ed(a->a_vp, a->a_p, a->a_cred, &n);
			FI_SET_SP(&n,0);
		}


		ap->va_flags = i.flag = n.flag;
		if (a->a_vp->v_type == VREG) {
			ap->va_size = FI_ENDOF(&i) + sp;
			error = tcfs_xsetflags(a->a_vp, a->a_p, a->a_cred,&i);
		}
		return tcfs_bypass((void *)v);
	}
	if ((ap->va_size) != VNOVAL) {
		if (ap->va_size == 0)
			size = 0;
		else
			size = (u_quad_t)(D_PFOFF(ap->va_size) + 1);

		FI_SET_SP(&i,(size-ap->va_size));
		ap->va_size = size;
		error = tcfs_xsetflags(a->a_vp, a->a_p,a->a_cred, &i);
	}

	return tcfs_bypass((void *)v);
}

@


1.3
log
@some KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_attr.c,v 1.2 2000/06/17 17:32:26 provos Exp $	*/
@


1.3.10.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_attr.c,v 1.3 2000/06/17 20:25:54 provos Exp $	*/
@


1.3.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_attr.c,v 1.3 2000/06/17 20:25:54 provos Exp $	*/
@


1.3.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_attr.c,v 1.3.6.1 2001/05/14 22:32:56 niklas Exp $	*/
@


1.2
log
@BSD copyright + tags
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.h,v 1.17 2000/06/12 17:24:26 itojun Exp $	*/
d38 1
d40 1
a40 1
#include "tcfs_rw.h"
d63 1
a63 1
void *v;
d67 3
a69 4
	u_quad_t size=0;
	tcfs_fileinfo i,n;
	int error,sp=0;
	
d71 2
a72 2
	i=tcfs_xgetflags(a->a_vp,a->a_p,a->a_cred);
	ap=a->a_vap;
d74 2
a75 4
        if(FI_GSHAR(&i))
                {
                 if(!tcfs_getgkey(a->a_cred,a->a_p,a->a_vp))
			{
d77 3
a79 7
			}
                }
        else
                {
                 if (!tcfs_getpkey(a->a_cred,a->a_p,a->a_vp))
                 	if (!tcfs_getukey(a->a_cred,a->a_p,a->a_vp))
			{
d81 1
a81 6
			}
                }

	if ((ap->va_flags)!=VNOVAL)
	{

d83 3
a85 2
		n.flag=ap->va_flags;
		n.end_of_file=i.end_of_file;
d87 2
a88 2
		if((FI_CFLAG(&n)&&FI_GSHAR(&i))||(FI_GSHAR(&n)&&FI_CFLAG(&i)))
			{ 
a89 1
			}
d91 1
a91 2
		if(FI_SPURE(&n)!=FI_SPURE(&i))
			{ 
d94 1
a94 1
			}
d96 3
a98 4
		if(FI_CFLAG(&n)&&(!FI_CFLAG(&i)))
		{
			sp=tcfs_ed(a->a_vp, a->a_p, a->a_cred, &n);
			FI_SET_SP(&n,sp);
d101 3
a103 4
		if((!FI_CFLAG(&n))&&FI_CFLAG(&i))
		{
			sp=tcfs_ed(a->a_vp, a->a_p, a->a_cred, &n);
			FI_SET_SP(&n,0);
d106 2
a107 3
		if(FI_GSHAR(&n)&&(!FI_GSHAR(&i)))
		{
			sp=tcfs_ed(a->a_vp, a->a_p, a->a_cred, &n);
d111 2
a112 3
		if((!FI_GSHAR(&n))&&FI_GSHAR(&i))
		{
			sp=tcfs_ed(a->a_vp, a->a_p, a->a_cred, &n);
d117 4
a120 5
		ap->va_flags=i.flag=n.flag;
		if(a->a_vp->v_type==VREG)
		{
			ap->va_size=FI_ENDOF(&i)+sp;
			error=tcfs_xsetflags(a->a_vp, a->a_p,a->a_cred,&i);
d122 1
a122 1
		return tcfs_bypass((void*)v);
d124 3
a126 5
	if ((ap->va_size)!=VNOVAL)
	{

		if(ap->va_size == 0)
			size=0;
d128 1
a128 1
			size=(u_quad_t)(D_PFOFF(ap->va_size)+1);
d131 2
a132 2
		ap->va_size=size;
		error=tcfs_xsetflags(a->a_vp, a->a_p,a->a_cred,&i);
d135 1
a135 1
	return tcfs_bypass((void*)v);
@


1.1
log
@initial import of tcfs.
@
text
@d1 27
@

