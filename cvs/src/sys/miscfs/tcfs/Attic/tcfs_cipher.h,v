head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_2:1.4.0.14
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.12
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.10
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	SMP:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2003.02.24.01.17.38;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2000.06.18.16.23.08;	author provos;	state Exp;
branches
	1.4.6.1
	1.4.10.1;
next	1.3;

1.3
date	2000.06.17.20.25.54;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.17.17.32.26;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.17.17.16.05;	author provos;	state Exp;
branches;
next	;

1.4.6.1
date	2001.05.14.22.32.56;	author niklas;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2003.03.28.00.00.20;	author niklas;	state dead;
branches;
next	;

1.4.10.1
date	2003.05.19.22.36.12;	author tedu;	state dead;
branches;
next	;


desc
@@


1.5
log
@Remove tcfs until this entire licensing mess is cleaned up.  This is
ANOTHER case of a developer having ignored licenses when importing code.
@
text
@/*	$OpenBSD: tcfs_cipher.h,v 1.4 2000/06/18 16:23:08 provos Exp $	*/
/*
 * Copyright 2000 The TCFS Project at http://tcfs.dia.unisa.it/
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef _TCFS_CIPHER_H_
#define _TCFS_CIPHER_H_

#include <miscfs/tcfs/tcfs_mount.h>

#define _TCFS_CIPHER_H_
#define MaxNumOfCipher	 8
#define MaxCipherNameLen 8

struct tcfs_cipher {
	char cipher_desc[MaxCipherNameLen];
	int  cipher_version;
	int cipher_keysize;
	void *(*init_key)(char*);
	void (*cleanup_key)(void*);
	void (*encrypt)(char*, int, void*);
	void (*decrypt)(char*, int, void*);
};

extern struct tcfs_cipher tcfs_cipher_vect[MaxNumOfCipher];

#define TCFS_MP_CIPHER(mp) (((struct tcfs_mount*)(mp))->tcfs_cipher_num)

#define TCFS_CIPHER_KEYSIZE(mp)\
	 (tcfs_cipher_vect[TCFS_MP_CIPHER((mp))].cipher_keysize)

#define TCFS_CIPHER_VERSION(mp)\
	 (tcfs_cipher_vect[TCFS_MP_CIPHER((mp))].cipher_version)

#define TCFS_CIPHER_DESC(mp)\
	 (tcfs_cipher_vect[TCFS_MP_CIPHER((mp))].cipher_desc)

static __inline void *TCFS_INIT_KEY(struct tcfs_mount *,char *);
static __inline void *TCFS_INIT_KEY(struct tcfs_mount *mp, char *tok)
{
	 return (tcfs_cipher_vect[TCFS_MP_CIPHER((mp))].init_key((tok)));
}

static __inline void  TCFS_CLEANUP_KEY(struct tcfs_mount*,void*);
static __inline void  TCFS_CLEANUP_KEY(struct tcfs_mount* mp,void* tok)
{
	 (tcfs_cipher_vect[TCFS_MP_CIPHER((mp))].cleanup_key((tok)));
	 return;
}
static __inline void  TCFS_ENCRYPT(struct tcfs_mount*,char*,int,void*);
static __inline void  TCFS_ENCRYPT(struct tcfs_mount *mp,char *blk,int len,void *key)
{
	 (tcfs_cipher_vect[TCFS_MP_CIPHER((mp))].encrypt((blk),(len),(key)));
	return;
}
static __inline void  TCFS_DECRYPT(struct tcfs_mount*,char*,int,void*);
static __inline void  TCFS_DECRYPT(struct tcfs_mount *mp,char *blk,int len,void *key)
{
	 (tcfs_cipher_vect[TCFS_MP_CIPHER((mp))].decrypt((blk),(len),(key)));
	 return;
}

void mkencrypt (struct tcfs_mount *, char *, int, void*);
void mkdecrypt (struct tcfs_mount *, char *, int, void*);

/* function prototypes */

void *cnone_init_key(char *);
void cnone_cleanup_key(void*);
void cnone_encrypt(char *, int , void*);
void cnone_decrypt(char *, int , void*);
#define NONE_KEYSIZE	0

void *TDES_init_key(char *);
void TDES_cleanup_key(void*);
void TDES_encrypt(char *, int , void*);
void TDES_decrypt(char *, int , void*);
#define TDES_KEYSIZE	24

void *BLOWFISH_init_key(char *);
void BLOWFISH_cleanup_key(void*);
void BLOWFISH_encrypt(char *, int , void*);
void BLOWFISH_decrypt(char *, int , void*);
#define BLOWFISH_KEYSIZE	32

#endif /* _TCFS_CIPHER_H_ */
@


1.4
log
@change keysize from 8 bytes to 24 for Triple-DES and to 32 for Blowfish.
This probably breaks group sharing.  copyin on userland pointers is required,
inline key into the argument structure.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cipher.h,v 1.3 2000/06/17 20:25:54 provos Exp $	*/
@


1.4.10.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cipher.h,v 1.4 2000/06/18 16:23:08 provos Exp $	*/
@


1.4.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cipher.h,v 1.4 2000/06/18 16:23:08 provos Exp $	*/
@


1.4.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cipher.h,v 1.4.6.1 2001/05/14 22:32:56 niklas Exp $	*/
@


1.3
log
@some KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cipher.h,v 1.2 2000/06/17 17:32:26 provos Exp $	*/
d100 1
a100 1
#define TDES_KEYSIZE	8
d106 1
a106 1
#define BLOWFISH_KEYSIZE	8
@


1.2
log
@BSD copyright + tags
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.h,v 1.17 2000/06/12 17:24:26 itojun Exp $	*/
d28 4
a31 3
#ifndef _TCFS_MOUNT_H_
#include "tcfs_mount.h"
#endif
d37 9
a45 14
enum {
	 C_TDES=0,C_BLOW=2
	} ;

struct tcfs_cipher
	{
	 char cipher_desc[MaxCipherNameLen];
	 int  cipher_version;
	 int cipher_keysize;
	 void *(*init_key)(char*);
	 void (*cleanup_key)(void*);
	 void (*encrypt)(char*, int, void*);
	 void (*decrypt)(char*, int, void*);
	};
d88 1
a88 1
/* prototipi funzioni */
d108 1
@


1.1
log
@initial import of tcfs.
@
text
@d1 27
@

