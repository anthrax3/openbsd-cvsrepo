head	1.5;
access;
symbols
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_2:1.4.0.14
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.12
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.10
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	SMP:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4;
locks; strict;
comment	@ * @;


1.5
date	2003.02.24.01.17.39;	author deraadt;	state dead;
branches;
next	1.4;

1.4
date	2000.06.18.06.26.12;	author provos;	state Exp;
branches
	1.4.6.1
	1.4.10.1;
next	1.3;

1.3
date	2000.06.17.20.25.55;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.17.17.32.27;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.17.17.16.06;	author provos;	state Exp;
branches;
next	;

1.4.6.1
date	2001.05.14.22.32.58;	author niklas;	state Exp;
branches;
next	1.4.6.2;

1.4.6.2
date	2003.03.28.00.00.20;	author niklas;	state dead;
branches;
next	;

1.4.10.1
date	2003.05.19.22.36.12;	author tedu;	state dead;
branches;
next	;


desc
@@


1.5
log
@Remove tcfs until this entire licensing mess is cleaned up.  This is
ANOTHER case of a developer having ignored licenses when importing code.
@
text
@/*	$OpenBSD: tcfs_rw.c,v 1.4 2000/06/18 06:26:12 provos Exp $	*/
/*
 * Copyright 2000 The TCFS Project at http://tcfs.dia.unisa.it/
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/vnode.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/malloc.h>
#include <sys/buf.h>

#include <miscfs/tcfs/tcfs.h>
#include <miscfs/tcfs/tcfs_rw.h>
#include <miscfs/tcfs/tcfs_cipher.h>

tcfs_opinfo
tcfs_get_opinfo(void *a)
{
	struct vop_read_args *arg;
	tcfs_opinfo r;
	tcfs_fileinfo *i;
	int iscr = 0;

	arg = (struct vop_read_args*)a;

	r.i = tcfs_get_fileinfo(a);
	i = &(r.i);

	iscr = FI_CFLAG(i) || FI_GSHAR(i);

	if(!iscr) {
		r.tcfs_op_desc=TCFS_NONE;
		return (r);
	}
		 

	r.off = arg->a_uio->uio_offset;
	r.req = arg->a_uio->uio_resid;

	if (arg->a_uio->uio_rw == UIO_READ) {
		if(r.off<FI_ENDOF(i)-FI_SPURE(i)) {
			r.tcfs_op_desc = TCFS_READ_C1;
			r.out_boff = BOFF(&r);
			r.out_foff = (LAST(&r)>FI_ENDOF(i)-FI_SPURE(i) ?
				      FI_ENDOF(i) : P_FOFF(&r));
			r.in_boff = r.out_boff;
			r.in_foff = r.out_foff;
			return (r);
		} else {
			r.tcfs_op_desc = TCFS_READ_C2;
			r.out_boff = 0;
			r.out_foff = 0;
			return (r);
		}
	}
	if (arg->a_uio->uio_rw == UIO_WRITE) {
		if (arg->a_ioflag&IO_APPEND) {
			r.off = FI_ENDOF(i)-FI_SPURE(i);
			arg->a_ioflag &= ~(IO_APPEND);
		}
		if (LAST(&r) < FI_ENDOF(i) - FI_SPURE(i)) {
			if (FI_ENDOF(i) - FI_SPURE(i) - LAST(&r) > BLOCKSIZE) {
				r.tcfs_op_desc = TCFS_WRITE_C1;
				r.out_boff = BOFF(&r);
				r.out_foff = FOFF(&r);
				r.in_boff = r.out_boff;
				r.in_foff = r.out_foff;
				return (r);
			} else {
				r.tcfs_op_desc = TCFS_WRITE_C2;
				r.out_boff = BOFF(&r);
				r.out_foff = FI_ENDOF(i) - 1;
				r.in_boff = r.out_boff;
				r.in_foff = r.out_foff;
				return (r);
			}
		}
		if (LAST(&r) >= FI_ENDOF(i) - FI_SPURE(i)) {
			r.out_boff = BOFF(&r);
			r.out_foff = P_FOFF(&r);
			if (r.off <= FI_ENDOF(i) - FI_SPURE(i)) {
				r.tcfs_op_desc = TCFS_WRITE_C3;
				r.in_boff = r.out_boff;
				r.in_foff = r.out_foff;
				return (r);
			} else if(D_BOFF(FI_ENDOF(i))==D_BOFF(r.off)) {
				r.tcfs_op_desc = TCFS_WRITE_C4;
				r.in_boff = r.out_boff;
				r.in_foff = r.out_foff;
				return (r);
			} else {    
				r.tcfs_op_desc = TCFS_WRITE_C5;
				r.in_boff = D_BOFF(FI_ENDOF(i));
				r.in_foff = D_FOFF(FI_ENDOF(i));
				r.out_boff = BOFF(&r);
				r.out_foff = P_FOFF(&r);
				return (r);
			}
		}
	}
	return (r);
}

char *
tcfs_new_uio_obs(struct uio *old, struct uio **new, int off, int bufsize)
{
	char *buffer;   
        struct uio *u;  
        struct iovec *n;

        u = malloc(sizeof(struct uio), M_FREE, M_NOWAIT);
	if (!u)
		return (NULL);
        n = malloc(sizeof(struct iovec), M_FREE, M_NOWAIT);
	if (!n) {
		free(u, M_FREE);
		return (NULL);
	}
        buffer = malloc(bufsize,M_FREE,M_NOWAIT);
	if (!buffer) {
		free(u, M_FREE);
		free(n, M_FREE);
		return (NULL);
	}
      
        u->uio_offset = off;
        u->uio_resid = bufsize;
        u->uio_iovcnt = 1;
        u->uio_segflg = UIO_SYSSPACE;
        u->uio_rw = old->uio_rw;
        u->uio_procp = old->uio_procp;
        u->uio_iov = n;
        n->iov_base = buffer;
        n->iov_len = bufsize;
      
        *new = u;
        return (buffer);
}

char *
tcfs_new_uio_i(struct uio *old, struct uio **new, tcfs_opinfo *r)
{
        int bufsize;
        char *buffer = NULL;

	
	switch(r->tcfs_op_desc) {
	case TCFS_READ_C2:
		buffer = NULL;
		return buffer;
	default:
	case TCFS_READ_C1:
	case TCFS_WRITE_C1:
	case TCFS_WRITE_C2:
	case TCFS_WRITE_C3:
		bufsize = r->in_foff-r->in_boff + 1;
		break;
	}
	
	return tcfs_new_uio_obs(old, new, r->in_boff, bufsize);
}

void
tcfs_dispose_new_uio(struct uio *vec)
{
        void *p, *q;
        p = (void*)vec;
        q = (void*)vec->uio_iov;

        free(p, M_FREE);
        free(q, M_FREE);
}

int
tcfs_read(v)
        void *v;
{
        char    *buffer,        /* buffer per la read interna 		*/
                *buffp,         /* puntatore all'inizio dei dati utili 	*/
                *buffpf;        /* puntatore alla fine dei dati utili 	*/

	int	bufsize = 0;	/* taglia del buffer allocato		*/

        struct uio
                *new,           /* puntatore all'uio rifatto    */
                *old;           /* puntatore all'uio originale  */

        int     terr,           /* val. ritorno read interna            */
                chdap,          /* caratteri da passare                 */
                chread,		/* caratteri letti dalla read int.      */
		r_off,		/* offset raggiunto			*/
		e_spure;	/* spure effettivamente letti		*/

        struct vop_read_args *arg;
        tcfs_opinfo f;
	tcfs_fileinfo *i;

	struct ucred *ucred;
	struct proc  *procp;

	struct tcfs_mount *mp;
	void *ks;

	f = tcfs_get_opinfo(v);

	if (f.tcfs_op_desc == TCFS_NONE)
		return tcfs_bypass(v);

	i = &(f.i);

        arg = (struct vop_read_args *)v;
	mp = MOUNTTOTCFSMOUNT(arg->a_vp->v_mount);
	ucred = arg->a_cred;
	procp = arg->a_uio->uio_procp;

	if (FI_GSHAR(i)) {
		ks = tcfs_getgkey(ucred,procp,arg->a_vp);
		if (!ks) {
			return (EACCES);
		}
	} else {
		ks = tcfs_getpkey(ucred,procp,arg->a_vp);
		if (!ks)
			ks = tcfs_getukey(ucred,procp,arg->a_vp);
		if (!ks)
			return (EACCES);
	}

        old = arg->a_uio;
        buffer = tcfs_new_uio_i(old, &new, &f);

	if (buffer == NULL)
		return (0); 

        arg->a_uio = new;
	bufsize = f.out_foff - f.out_boff + 1;

        terr = tcfs_bypass(arg);
        chread = bufsize - new->uio_resid;
	
	mkdecrypt(mp, buffer, chread, ks);

	r_off = f.out_boff + chread;

	if (r_off >= FI_ENDOF(i))
		e_spure = FI_SPURE(i);
	else
		if(r_off > FI_ENDOF(i) - FI_SPURE(i))
			e_spure = FI_SPURE(i) - FI_ENDOF(i) + r_off;
		else
			e_spure = 0;

        buffp = buffer + ROFF(&f);
        if (chread>ROFF(&f)) {
		chdap = MIN(f.req, chread-ROFF(&f) - e_spure);
		buffpf = buffp + chdap;

		uiomove(buffp, chdap, old);
	}
        arg->a_uio = old;
        tcfs_dispose_new_uio(new);
	free(buffer, M_FREE);
	
        return terr;
}

int
tcfs_write(v)
	void *v;
{
        char    *buffer,        /* buffer per la read interna */
                *buffp,         /* puntatore all'inizio dei dati utili */
                *buffpf;        /* puntatore alla fine dei dati utili */

        struct uio
                *tmp,           /* uio per la dimensione di un blocco */
                *old;           /* puntatore all'uio originale della chiamata */


        int     bufsize,        /* num. caratteri req. read interna     */
                terr,           /* val. ritorno read interna            */
                chdap,          /* caratteri da passare                 */
                chread = 0,       /* caratteri letti dalla read int.      */
		chwrote, e_chwrote,
		spure = 0;		/* ho scritto fino a qui		*/

        tcfs_opinfo f;
	tcfs_fileinfo *i;

        struct vop_read_args *arg;
	struct ucred *ucred;
	struct proc  *procp;
	void *ks;
	struct tcfs_mount *mp;

        int e;

        arg = (struct vop_read_args *)v;
        ucred = arg->a_cred;
        procp = arg->a_uio->uio_procp;
	mp = MOUNTTOTCFSMOUNT(arg->a_vp->v_mount);
	
	f = tcfs_get_opinfo(arg);

	if (f.tcfs_op_desc == TCFS_NONE)
		return tcfs_bypass(v);

	i = &(f.i);

	if (FI_GSHAR(i)) {
		ks = tcfs_getgkey(ucred,procp,arg->a_vp);
		if (!ks)
			return (EACCES);
	} else {
        	ks = tcfs_getpkey(ucred,procp,arg->a_vp);
        	if (!ks)
       			ks = tcfs_getukey(ucred,procp,arg->a_vp);
        	if (!ks)
               	 	return (EACCES);
	}

        old = arg->a_uio;

        buffer = (char*)tcfs_new_uio_i(old, &tmp, &f);
	if (buffer == NULL)
		return (EFAULT);

        arg->a_uio = tmp;
        arg->a_desc = VDESC(vop_read);
        arg->a_uio->uio_rw = UIO_READ;

	bufsize = f.in_foff-f.in_boff+1;

        terr = tcfs_bypass(arg);

	switch(f.tcfs_op_desc) {
	case TCFS_WRITE_C1:
	case TCFS_WRITE_C2:
		if(tmp->uio_resid != 0)
			goto ret;

		chread = bufsize;
		break;

	case TCFS_WRITE_C3:
	case TCFS_WRITE_C4:
		if(tmp->uio_resid != (P_FOFF(&f) - FI_ENDOF(i) + 1))
			goto ret;
			
		chread = bufsize;
		break;

	case TCFS_WRITE_C5:
		if(tmp->uio_resid != (D_FOFF(FI_ENDOF(i)) - FI_ENDOF(i) + 1))
			goto ret;
		chread = bufsize;
	}

        mkdecrypt(mp,buffer,chread,ks);

	if (f.tcfs_op_desc == TCFS_WRITE_C4) {
		for(e = FI_ENDOF(i) - FI_SPURE(i); e < f.off; e++)
			*(buffer + e - f.out_boff) = '\0';
	}

	if (f.tcfs_op_desc != TCFS_WRITE_C5) {
		buffp = buffer + ROFF(&f);
		chdap = f.req;
		buffpf = buffp + chdap;
	
		uiomove(buffp,chdap,old);

	} else { /*if not TCFS_WRITE_C5 */ 
		for (e = FI_ENDOF(i) - FI_SPURE(i) - f.in_boff; e < bufsize;
		     e++)
			*(buffer+e)='\0';
	}
		
	mkencrypt(mp, buffer, bufsize, ks);
	
        arg->a_desc = VDESC(vop_write);
        arg->a_uio->uio_rw = UIO_WRITE;
        arg->a_uio->uio_resid = bufsize;
        arg->a_uio->uio_offset = f.in_boff;
        arg->a_uio->uio_iov->iov_base = buffer;
        arg->a_uio->uio_iov->iov_len = bufsize;
        terr = tcfs_bypass(arg);

	if (f.tcfs_op_desc == TCFS_WRITE_C5) {
		tcfs_dispose_new_uio(tmp);
		free(buffer, M_FREE);

		bufsize = f.out_foff - f.out_boff + 1;
		buffer = tcfs_new_uio_obs(old, &tmp, f.out_boff, bufsize);
		arg->a_uio = tmp;
		arg->a_desc = VDESC(vop_write);
		arg->a_uio->uio_rw = UIO_WRITE;

		for(e = 0; e < ROFF(&f); e++)
			*(buffer+e) = '\0';

		buffp = buffer + ROFF(&f);
		chdap = f.req;
		buffpf = buffp+chdap;

		uiomove(buffp, chdap, old);
		mkencrypt(mp, buffer, bufsize, ks);
		terr = tcfs_bypass(arg);

	}

	chwrote = bufsize-tmp->uio_resid;
	e_chwrote = MIN(f.req, chwrote-ROFF(&f));

        switch(f.tcfs_op_desc) {
	case TCFS_WRITE_C1:
	case TCFS_WRITE_C2:
		break;
	case TCFS_WRITE_C3:
		if ((f.in_boff + chwrote) > FI_ENDOF(i) - FI_SPURE(i)) {
			if(chwrote > f.req){
				spure = D_SPURE(f.off + f.req);
			} else {
				spure = D_SPURE(f.out_boff + chwrote);
			}

			FI_SET_SP(i, spure);
			tcfs_set_fileinfo(v, i);
		}
		break;
	case TCFS_WRITE_C4:
	case TCFS_WRITE_C5:
		spure = D_SPURE(f.off + f.req);
		FI_SET_SP(i, spure);
		tcfs_set_fileinfo(v, i);
		break;
	}

        old->uio_resid = f.req - e_chwrote;

 ret:
        arg->a_uio = old;
        tcfs_dispose_new_uio(tmp);
	free(buffer, M_FREE);
        return (terr);
}

int
tcfs_ed(struct vnode *v, struct proc *p, struct ucred *c, tcfs_fileinfo *i)
{
	struct vop_read_args ra;
	struct vop_write_args wa;
	struct uio *u;
	struct iovec *n;
	char *buff;
	unsigned long  csize, resid, w_resid;
	unsigned long  size, w_size;
	int bufsize, e;
	int retval, sp;
	void *ks;
	int encr = 0;
	struct tcfs_mount *mp;

	mp = MOUNTTOTCFSMOUNT(v->v_mount);
	encr = FI_CFLAG(i) || FI_GSHAR(i);
	
	if (v->v_type != VREG)
		return (0);

	if (FI_GSHAR(i)) {
		ks = tcfs_getgkey(c, p, v);
		if(!ks)
			return (EACCES);
	} else {
		ks = tcfs_getpkey(c,p,v);
        	if (!ks)
        		ks = tcfs_getukey(c,p,v);
        	if (!ks) 
			return (EACCES);
	}

	u = malloc(sizeof(struct uio), M_FREE, M_NOWAIT);
	n = malloc(sizeof(struct iovec), M_FREE, M_NOWAIT);

	size = FI_ENDOF(i);

	if (encr) {
		resid = size;
		w_size = D_PFOFF(size);
		sp = D_SPURE(size);
	} else {
	  	resid = D_PFOFF(size);
		w_size= size - FI_SPURE(i);
		sp = -FI_SPURE(i);
	}

	csize = 0;
	w_resid = w_size;

	bufsize = BLOCKSIZE;

	buff = malloc(BLOCKSIZE, M_FREE, M_NOWAIT);

	u->uio_offset = 0;
	u->uio_resid = bufsize;
	u->uio_iovcnt = 1;
	u->uio_segflg = UIO_SYSSPACE;
	u->uio_procp = p;
	u->uio_iov = n;
	
	wa.a_desc = VDESC(vop_write);
	ra.a_desc = VDESC(vop_read);
	wa.a_vp = ra.a_vp = v;
	wa.a_cred = ra.a_cred = c;
	wa.a_ioflag = ra.a_ioflag = 0;
	wa.a_uio = ra.a_uio = u;

	
	for (e = 0; e < D_NOBLK(size); e++) {
		int x, y; 

		u->uio_offset = csize;
		u->uio_rw = UIO_READ;
		n->iov_base = buff;
		n->iov_len = u->uio_resid = x = MIN(bufsize, resid + 1);
		
		retval = tcfs_bypass((void*)&ra);

		u->uio_offset = csize;
		u->uio_rw = UIO_WRITE;
		n->iov_base = buff;
		n->iov_len = u->uio_resid = y = MIN(bufsize, w_resid + 1);

		if(!encr)
			mkdecrypt(mp, buff, x, ks);
		else
			mkencrypt(mp, buff, y, ks);
		
		retval = tcfs_bypass((void*)&wa);

		resid -= x; csize += x;
		w_resid -= y;

		/* I should call the scheduler here */
	}

	tcfs_dispose_new_uio(u);
	return (sp);
}
@


1.4
log
@fix off by one error in loop, prevent that odd lengths get passed to
decryption function.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_rw.c,v 1.3 2000/06/17 20:25:55 provos Exp $	*/
@


1.4.10.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_rw.c,v 1.4 2000/06/18 06:26:12 provos Exp $	*/
@


1.4.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_rw.c,v 1.4 2000/06/18 06:26:12 provos Exp $	*/
@


1.4.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_rw.c,v 1.4.6.1 2001/05/14 22:32:58 niklas Exp $	*/
@


1.3
log
@some KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_rw.c,v 1.2 2000/06/17 17:32:27 provos Exp $	*/
a493 1

d514 2
a515 1
	if(encr) {
d519 2
a520 1
		w_size=size-FI_SPURE(i);
a524 1
	resid = size;
d546 1
a546 1
	for(e = 0; e <= D_NOBLK(size); e++) {
@


1.2
log
@BSD copyright + tags
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.h,v 1.17 2000/06/12 17:24:26 itojun Exp $	*/
d38 1
d40 2
a41 2
#include "tcfs_rw.h"
#include "tcfs_cipher.h"
d43 2
a44 1
tcfs_opinfo tcfs_get_opinfo(void *a)
d49 1
a49 1
	int iscr=0;
d51 1
d53 2
a54 1
	arg=(struct vop_read_args*)a;
d56 1
a56 2
	r.i=tcfs_get_fileinfo(a);
	i=&(r.i);
d58 4
a61 7
	iscr=FI_CFLAG(i)||FI_GSHAR(i);

	if(!iscr)
		{
		 r.tcfs_op_desc=TCFS_NONE;
		 return r;
		}
d64 2
a65 2
	r.off=arg->a_uio->uio_offset;
	r.req=arg->a_uio->uio_resid;
d67 14
a80 18
	if(arg->a_uio->uio_rw==UIO_READ)
	{
		if(r.off<FI_ENDOF(i)-FI_SPURE(i))
		{
	 	 r.tcfs_op_desc=TCFS_READ_C1;
	 	 r.out_boff=BOFF(&r);
	 	 r.out_foff=
		      (LAST(&r)>FI_ENDOF(i)-FI_SPURE(i)?FI_ENDOF(i):P_FOFF(&r));
		 r.in_boff=r.out_boff;
		 r.in_foff=r.out_foff;
	 	 return r;
		}
		else
		{
		 r.tcfs_op_desc=TCFS_READ_C2;
		 r.out_boff=0;
		 r.out_foff=0;
		 return r;
d83 21
a103 6
	if(arg->a_uio->uio_rw==UIO_WRITE)
	{
	 	if(arg->a_ioflag&IO_APPEND)
		{
			r.off=FI_ENDOF(i)-FI_SPURE(i);
			arg->a_ioflag&=~(IO_APPEND);
d105 20
a124 49
		if(LAST(&r)<FI_ENDOF(i)-FI_SPURE(i))
			{
				if (FI_ENDOF(i)-FI_SPURE(i)-LAST(&r)>BLOCKSIZE)
				{
			  	 r.tcfs_op_desc=TCFS_WRITE_C1;
			  	 r.out_boff=BOFF(&r);
			  	 r.out_foff=FOFF(&r);
			 	 r.in_boff=r.out_boff;
			 	 r.in_foff=r.out_foff;
			  	 return r;
				}
				else
				{
				 r.tcfs_op_desc=TCFS_WRITE_C2;
				 r.out_boff=BOFF(&r);
				 r.out_foff=FI_ENDOF(i)-1;
			 	 r.in_boff=r.out_boff;
			 	 r.in_foff=r.out_foff;
				 return r;
				}
			}
		if(LAST(&r)>=FI_ENDOF(i)-FI_SPURE(i))
			{
			  	r.out_boff=BOFF(&r);
			  	r.out_foff=P_FOFF(&r);
			  	if (r.off<=FI_ENDOF(i)-FI_SPURE(i))
			  	{
			  	 r.tcfs_op_desc=TCFS_WRITE_C3;
		 		 r.in_boff=r.out_boff;
		 		 r.in_foff=r.out_foff;
			  	 return r;
			 	}
				else
			  	 if(D_BOFF(FI_ENDOF(i))==D_BOFF(r.off))
					{
					 r.tcfs_op_desc=TCFS_WRITE_C4;
		 			 r.in_boff=r.out_boff;
		 			 r.in_foff=r.out_foff;
					 return r;
					}
			  	 else
					{    
				 	 r.tcfs_op_desc=TCFS_WRITE_C5;
				  	 r.in_boff=D_BOFF(FI_ENDOF(i));
				 	 r.in_foff=D_FOFF(FI_ENDOF(i));
					 r.out_boff=BOFF(&r);
					 r.out_foff=P_FOFF(&r);
				 	 return r;
					}
d126 1
d128 1
a128 1
	return r;
d131 2
a132 1
char *tcfs_new_uio_obs(struct uio *old, struct uio **new, int off, int bufsize)
d138 14
a151 17
        u=malloc(sizeof(struct uio),M_FREE,M_NOWAIT);
	if(!u)
		return (char*)0;
        n=malloc(sizeof(struct iovec),M_FREE,M_NOWAIT);
	if(!n)
		{
		 free(u,M_FREE);
		 return (char*)0;
		}
        buffer=malloc(bufsize,M_FREE,M_NOWAIT);
	if(!buffer)
		{
		 free(u,M_FREE);
		 free(n,M_FREE);
		 return (char*)0;
		}

d153 9
a161 10
        u->uio_offset=off;
        u->uio_resid=bufsize;
        u->uio_iovcnt=1;
        u->uio_segflg=UIO_SYSSPACE;
        u->uio_rw=old->uio_rw;
        u->uio_procp=old->uio_procp;
        u->uio_iov=n;
        n->iov_base=buffer;
        n->iov_len=bufsize;

d163 2
a164 2
        *new=u;
        return buffer;
d167 2
a168 1
char *tcfs_new_uio_i(struct uio *old, struct uio **new,tcfs_opinfo *r)
d171 1
a171 1
        char *buffer=NULL;
d174 11
a184 12
	switch(r->tcfs_op_desc)
	{
		case TCFS_READ_C2:
			buffer=(char*)0;
			return buffer;
		default:
		case TCFS_READ_C1:
		case TCFS_WRITE_C1:
		case TCFS_WRITE_C2:
		case TCFS_WRITE_C3:
			bufsize=r->in_foff-r->in_boff+1;
		        break;
d187 1
a187 1
	return tcfs_new_uio_obs(old,new,r->in_boff,bufsize);
d190 2
a191 2

void    tcfs_dispose_new_uio(struct uio *vec)
d193 3
a195 3
        void *p,*q;
        p=(void*)vec;
        q=(void*)vec->uio_iov;
d197 2
a198 2
        free(p,M_FREE);
        free(q,M_FREE);
d209 1
a209 1
	int	bufsize=0;	/* taglia del buffer allocato		*/
d231 1
d233 1
a233 3
	f=tcfs_get_opinfo(v);

	if(f.tcfs_op_desc==TCFS_NONE)
d236 1
a236 1
	i=&(f.i);
d238 17
a254 21
        arg=(struct vop_read_args *)v;
	mp=MOUNTTOTCFSMOUNT(arg->a_vp->v_mount);
	ucred=arg->a_cred;
	procp=arg->a_uio->uio_procp;

	if(FI_GSHAR(i))
		{
		 ks=tcfs_getgkey(ucred,procp,arg->a_vp);
		 if(!ks)
			{
			return EACCES;
			}
		}
	else
		{
		 ks=tcfs_getpkey(ucred,procp,arg->a_vp);
		 if (!ks)
		 	 ks=tcfs_getukey(ucred,procp,arg->a_vp);
		 if (!ks)
		 	 return EACCES;
		}
d256 2
a257 2
        old=arg->a_uio;
        buffer=tcfs_new_uio_i(old,&new,&f);
d259 2
a260 2
	if (buffer==(char*)0)
		 return 0; 
d262 2
a263 2
        arg->a_uio=new;
	bufsize=f.out_foff-f.out_boff+1;
d265 2
a266 2
        terr=tcfs_bypass(arg);
        chread=bufsize-new->uio_resid;
d268 1
d270 1
a270 2
	mkdecrypt(mp,buffer,chread,ks);

d272 2
a273 4
	r_off=f.out_boff+chread;

	if(r_off>=FI_ENDOF(i))
		e_spure=FI_SPURE(i);
d275 2
a276 2
		if(r_off>FI_ENDOF(i)-FI_SPURE(i))
			e_spure=FI_SPURE(i)-FI_ENDOF(i)+r_off;
d278 6
a283 1
			e_spure=0;
d285 3
a287 9
        buffp=buffer+ROFF(&f);
        if (chread>ROFF(&f))
        {
		chdap=MIN(f.req,chread-ROFF(&f)-e_spure);
                buffpf=buffp+chdap;

	  uiomove(buffp,chdap,old);
        }
        arg->a_uio=old;
d289 1
a289 1
	free(buffer,M_FREE);
d310 3
a312 3
                chread=0,       /* caratteri letti dalla read int.      */
		chwrote,e_chwrote,
		spure=0;		/* ho scritto fino a qui		*/
d325 4
a328 6

        arg=(struct vop_read_args *)v;
        ucred=arg->a_cred;
        procp=arg->a_uio->uio_procp;
	mp=MOUNTTOTCFSMOUNT(arg->a_vp->v_mount);

d330 1
a330 1
	f=tcfs_get_opinfo(arg);
d332 1
a332 1
	if (f.tcfs_op_desc==TCFS_NONE)
d335 1
a335 1
	i=&(f.i);
d337 6
a342 9
	if(FI_GSHAR(i))
	{
		ks=tcfs_getgkey(ucred,procp,arg->a_vp);
		if(!ks)
			return EACCES;
	}
	else
	{
        	ks=tcfs_getpkey(ucred,procp,arg->a_vp);
d344 1
a344 1
       			ks=tcfs_getukey(ucred,procp,arg->a_vp);
d346 1
a346 1
               	 	return EACCES;
d349 1
a349 1
        old=arg->a_uio;
d351 3
a353 3
        buffer=(char*)tcfs_new_uio_i(old,&tmp,&f);
	if (buffer==(char*)0)
		return EFAULT;
d355 3
a357 3
        arg->a_uio=tmp;
        arg->a_desc=VDESC(vop_read);
        arg->a_uio->uio_rw=UIO_READ;
d359 1
a359 1
	bufsize=f.in_foff-f.in_boff+1;
d361 1
d363 5
d369 2
a370 1
        terr=tcfs_bypass(arg);
d372 4
a375 14
	switch(f.tcfs_op_desc)
	{
		case TCFS_WRITE_C1:
		case TCFS_WRITE_C2:
			if(tmp->uio_resid!=0)
				goto ret;

        		chread=bufsize;
			break;

		case TCFS_WRITE_C3:
		case TCFS_WRITE_C4:
			if(tmp->uio_resid!=(P_FOFF(&f)-FI_ENDOF(i)+1))
				goto ret;
d377 2
a378 2
			chread=bufsize;
			break;
d380 4
a383 4
		case TCFS_WRITE_C5:
			if(tmp->uio_resid!=(D_FOFF(FI_ENDOF(i))-FI_ENDOF(i)+1))
					 goto ret;
			chread=bufsize;
d388 3
a390 7

	if(f.tcfs_op_desc==TCFS_WRITE_C4)
	{

			for(e=FI_ENDOF(i)-FI_SPURE(i);e<f.off;e++)
				*(buffer+e-f.out_boff)='\0';

d393 4
a396 7

	if(f.tcfs_op_desc!=TCFS_WRITE_C5) 
	{

       	 buffp=buffer+ROFF(&f);
       	 chdap=f.req;
       	 buffpf=buffp+chdap;
d398 1
a398 1
	uiomove(buffp,chdap,old);
d400 5
a404 6
	} /*if not TCFS_WRITE_C5 */
	else
	{
		for(e=FI_ENDOF(i)-FI_SPURE(i)-f.in_boff;e<bufsize;e++)
			 *(buffer+e)='\0';
	 }
d406 1
a406 1
       	 mkencrypt(mp,buffer,bufsize,ks);
d408 28
a435 30
        arg->a_desc=VDESC(vop_write);
        arg->a_uio->uio_rw=UIO_WRITE;
        arg->a_uio->uio_resid=bufsize;
        arg->a_uio->uio_offset=f.in_boff;
        arg->a_uio->uio_iov->iov_base=buffer;
        arg->a_uio->uio_iov->iov_len=bufsize;
        terr=tcfs_bypass(arg);

	if (f.tcfs_op_desc==TCFS_WRITE_C5)
	{

        	tcfs_dispose_new_uio(tmp);
		free(buffer,M_FREE);

		bufsize=f.out_foff-f.out_boff+1;
		buffer=tcfs_new_uio_obs(old,&tmp,f.out_boff,bufsize);
		arg->a_uio=tmp;
        	arg->a_desc=VDESC(vop_write);
        	arg->a_uio->uio_rw=UIO_WRITE;

                for(e=0;e<ROFF(&f);e++)
                         *(buffer+e)='\0';

         	buffp=buffer+ROFF(&f);
         	chdap=f.req;
         	buffpf=buffp+chdap;

		uiomove(buffp,chdap,old);
       	 	mkencrypt(mp,buffer,bufsize,ks);
		terr=tcfs_bypass(arg);
d439 2
a440 2
	chwrote=bufsize-tmp->uio_resid;
	e_chwrote=MIN(f.req,chwrote-ROFF(&f));
d442 11
a452 16
        switch(f.tcfs_op_desc)
        {
         case TCFS_WRITE_C1:
         case TCFS_WRITE_C2:
                break;
         case TCFS_WRITE_C3:
		if ((f.in_boff+chwrote)>FI_ENDOF(i)-FI_SPURE(i))
		{


		if(chwrote>f.req){
			spure=D_SPURE(f.off+f.req);
		} else
		{
			spure=D_SPURE(f.out_boff+chwrote);
		}
d454 2
a455 2
			FI_SET_SP(i,spure);
			tcfs_set_fileinfo(v,i);
d458 5
a462 5
	 	case TCFS_WRITE_C4:
	 	case TCFS_WRITE_C5:
			spure=D_SPURE(f.off+f.req);
                	FI_SET_SP(i,spure);
                	tcfs_set_fileinfo(v,i);
d464 1
d466 1
a466 2
        }

d468 2
a469 4
        old->uio_resid=f.req-e_chwrote;

ret:
        arg->a_uio=old;
d471 2
a472 2
	free(buffer,M_FREE);
        return terr;
d475 2
a476 1
int tcfs_ed(struct vnode *v,struct proc *p,struct ucred *c, tcfs_fileinfo *i)
d483 4
a486 4
	unsigned long  csize,resid,w_resid;
	unsigned long  size,w_size;
	int bufsize,e;
	int retval,sp;
d488 1
a488 1
	int encr=0;
d491 2
a492 2
	mp=MOUNTTOTCFSMOUNT(v->v_mount);
	encr=FI_CFLAG(i)||FI_GSHAR(i);
d495 2
a496 2
	if(v->v_type!=VREG)
		return 0;
d498 2
a499 3
	if(FI_GSHAR(i))
	{
		ks=tcfs_getgkey(c,p,v);
d501 3
a503 6
			return EACCES;
	}	
	else
	{
	
        	ks=tcfs_getpkey(c,p,v);
d505 3
a507 6
        		ks=tcfs_getukey(c,p,v);
        	if (!ks)
			{
                	return EACCES;
			}

d510 2
a511 3
	u=malloc(sizeof(struct uio),M_FREE,M_NOWAIT);
	n=malloc(sizeof(struct iovec),M_FREE,M_NOWAIT);
	
d513 1
a513 1
	size=FI_ENDOF(i);
d515 7
a521 10
	if(encr)
		{
		 w_size=D_PFOFF(size);
		 sp=D_SPURE(size);
		}
	else
		{
		 w_size=size-FI_SPURE(i);
		 sp=-FI_SPURE(i);
		}
d523 30
a552 32
	csize=0;
	resid=size;
	w_resid=w_size;

	bufsize=BLOCKSIZE;

	buff=malloc(BLOCKSIZE,M_FREE,M_NOWAIT);

	u->uio_offset=0;
	u->uio_resid=bufsize;
	u->uio_iovcnt=1;
	u->uio_segflg=UIO_SYSSPACE;
	u->uio_procp=p;
	u->uio_iov=n;
	
	wa.a_desc=VDESC(vop_write);
	ra.a_desc=VDESC(vop_read);
	wa.a_vp=ra.a_vp=v;
	wa.a_cred=ra.a_cred=c;
	wa.a_ioflag=ra.a_ioflag=0;
	wa.a_uio=ra.a_uio=u;

	
	for(e=0;e<=D_NOBLK(size);e++)
	{

		int x,y; 

		u->uio_offset=csize;
		u->uio_rw=UIO_READ;
		n->iov_base=buff;
		n->iov_len=u->uio_resid=x=MIN(bufsize,resid+1);
d554 1
a554 1
 		retval=tcfs_bypass((void*)&ra);
d556 4
a559 5

		u->uio_offset=csize;
		u->uio_rw=UIO_WRITE;
		n->iov_base=buff;
		n->iov_len=u->uio_resid=y=MIN(bufsize,w_resid+1);
d562 1
a562 1
			 mkdecrypt(mp,buff,x,ks);
d564 1
a564 1
			mkencrypt(mp,buff,y,ks);
d566 1
a566 1
		retval=tcfs_bypass((void*)&wa);
d568 2
a569 2
		resid-=x; csize+=x;
		w_resid-=y;
d575 1
a575 1
	return sp;
a576 1

@


1.1
log
@initial import of tcfs.
@
text
@d1 27
@

