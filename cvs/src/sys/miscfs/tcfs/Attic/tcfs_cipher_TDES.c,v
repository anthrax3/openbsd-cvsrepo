head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_2:1.5.0.14
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.12
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.10
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.8
	OPENBSD_3_0_BASE:1.5
	SMP:1.5.0.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5;
locks; strict;
comment	@ * @;


1.6
date	2003.02.24.01.17.38;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2000.06.18.19.08.44;	author provos;	state Exp;
branches
	1.5.6.1
	1.5.10.1;
next	1.4;

1.4
date	2000.06.18.16.23.10;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.17.20.25.54;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.17.17.32.26;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.17.17.16.05;	author provos;	state Exp;
branches;
next	;

1.5.6.1
date	2001.05.14.22.32.56;	author niklas;	state Exp;
branches;
next	1.5.6.2;

1.5.6.2
date	2003.03.28.00.00.20;	author niklas;	state dead;
branches;
next	;

1.5.10.1
date	2003.05.19.22.36.12;	author tedu;	state dead;
branches;
next	;


desc
@@


1.6
log
@Remove tcfs until this entire licensing mess is cleaned up.  This is
ANOTHER case of a developer having ignored licenses when importing code.
@
text
@/*	$OpenBSD: tcfs_cipher_TDES.c,v 1.5 2000/06/18 19:08:44 provos Exp $	*/
/*
 * Copyright 2000 The TCFS Project at http://tcfs.dia.unisa.it/
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/md5k.h>

#include <miscfs/tcfs/tcfs_cipher.h>

#include <crypto/des_locl.h>
#include <crypto/des.h>

/* EDE Triple-DES with K1, K2 and K3 */

void *
TDES_init_key (char *key)
{
        des_key_schedule *ks;
	char dkey[TDES_KEYSIZE];
	char digest[16];
	MD5_CTX ctx;
	int i;
	
	/* Fold the bigger key into a Triple-DES suitable one */
	bcopy (key, dkey, sizeof(dkey));

	MD5Init(&ctx);
	MD5Update(&ctx, key, KEYSIZE);
	MD5Final(digest, &ctx);

	for (i = 0; i < sizeof(dkey); i++)
	  dkey[i] ^= digest[i % 16];

        ks = (des_key_schedule *)malloc (3 * sizeof (des_key_schedule),
					 M_FREE, M_NOWAIT);
        if (!ks) 
                return NULL;

        des_set_key ((des_cblock *) dkey,       ks[0]);
        des_set_key ((des_cblock *)(dkey + 8),  ks[1]);
        des_set_key ((des_cblock *)(dkey + 16), ks[2]);

	bzero(dkey, sizeof(dkey));
	bzero(digest, sizeof(digest));

        return (void *)ks;
}

void
TDES_cleanup_key(void *k)
{
/*	tcfs_keytab_dispnode does it
	free((des_key_schedule*)k,M_FREE);
*/
}

void
TDES_encrypt(char *block, int nb, void *key)
{
        u_int32_t * xi;
        int i;
        char *tmp;
        des_key_schedule *ks = (des_key_schedule *)key;

        xi = (u_int32_t *)block;
        tmp = block;
        des_ecb3_encrypt((des_cblock *)tmp, (des_cblock *)tmp,
			 ks[2], ks[1], ks[0], DES_ENCRYPT);
        tmp += 8;
        for (i = 1;i < nb/8; i++) {
                *(xi+2) ^= *xi;
                *(xi+3) ^= *(xi + 1);
                des_ecb3_encrypt((des_cblock *)tmp, (des_cblock *)tmp,
				 ks[2], ks[1], ks[0], DES_ENCRYPT);
                tmp += 8;
                xi += 2;
        }
}

void
TDES_decrypt(char *block, int nb, void *key)
{
        u_int32_t * xi, xo[2], xa[2];
        int i;
        char *tmp;
        des_key_schedule *ks = (des_key_schedule *)key;

        xi = (u_int32_t *)block;
        tmp = block;
        xo[0] = *xi; xo[1] = *(xi+1);
        des_ecb3_encrypt((des_cblock *)tmp, (des_cblock *)tmp,
			 ks[0], ks[1], ks[2], DES_DECRYPT);
        tmp += 8;
        xi = (u_int32_t *)tmp;
        for (i = 1;i < nb/8; i++) {
                xa[0] = *xi; xa[1] = *(xi+1);
                des_ecb3_encrypt((des_cblock *)tmp, (des_cblock *)tmp,
				 ks[0], ks[1], ks[2], DES_DECRYPT);
                *(xi) ^= xo[0];
                *(xi+1)^= xo[1];
                xo[0] = xa[0];  
                xo[1] = xa[1];
                tmp += 8;
                xi += 2;
        }
}
@


1.5
log
@fix 3des decryption
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cipher_TDES.c,v 1.4 2000/06/18 16:23:10 provos Exp $	*/
@


1.5.10.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cipher_TDES.c,v 1.5 2000/06/18 19:08:44 provos Exp $	*/
@


1.5.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cipher_TDES.c,v 1.5 2000/06/18 19:08:44 provos Exp $	*/
@


1.5.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cipher_TDES.c,v 1.5.6.1 2001/05/14 22:32:56 niklas Exp $	*/
@


1.4
log
@change keysize from 8 bytes to 24 for Triple-DES and to 32 for Blowfish.
This probably breaks group sharing.  copyin on userland pointers is required,
inline key into the argument structure.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cipher_TDES.c,v 1.3 2000/06/17 20:25:54 provos Exp $	*/
a47 1

d51 1
d93 1
a93 1
			 ks[0], ks[1], ks[2],DES_ENCRYPT);
d95 1
a95 1
        for (i = 1;i < nb/8;i++) {
d99 1
a99 1
				 ks[0], ks[1], ks[2], DES_ENCRYPT);
@


1.3
log
@some KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_cipher_TDES.c,v 1.2 2000/06/17 17:32:26 provos Exp $	*/
d31 1
d38 2
d44 14
d59 1
a59 1
        ks = (des_key_schedule *)malloc (2 * sizeof (des_key_schedule),
d64 6
a69 2
        des_set_key ((des_cblock *)key, ks[0]);
        des_set_key ((des_cblock *)(key + 8), ks[1]);
d93 1
a93 1
			 ks[0],ks[1],ks[0],DES_ENCRYPT);
d99 1
a99 1
				 ks[0], ks[1], ks[0], DES_ENCRYPT);
d117 1
a117 1
			 ks[0], ks[1], ks[0], DES_DECRYPT);
d123 1
a123 1
				 ks[0], ks[1], ks[0], DES_DECRYPT);
@


1.2
log
@BSD copyright + tags
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.h,v 1.17 2000/06/12 17:24:26 itojun Exp $	*/
d31 3
a33 1
#include "tcfs_cipher.h"
d37 2
a38 1
void *TDES_init_key (char *key)
d42 2
a43 1
        ks=(des_key_schedule *)malloc (2*sizeof (des_key_schedule), M_FREE,M_NOWAIT);
d48 1
a48 1
        des_set_key ((des_cblock *)(key+8), ks[1]);
d53 2
a54 1
void TDES_cleanup_key(void *k)
d61 2
a62 1
void TDES_encrypt(char *block, int nb, void *key)
d64 1
a64 1
        unsigned long * xi;
d67 14
a80 11
        des_key_schedule *ks=(des_key_schedule *)key;
        xi=(long *)block;
        tmp=block;
        des_ecb3_encrypt((des_cblock *)tmp,(des_cblock *)tmp,ks[0],ks[1],ks[0],DES_ENCRYPT);
        tmp+=8;
        for (i=1;i<nb/8;i++) {
                *(xi+2)^=*xi;
                *(xi+3)^=*(xi+1);
                des_ecb3_encrypt((des_cblock *)tmp,(des_cblock *)tmp,ks[0],ks[1],ks[0],DES_ENCRYPT);
                tmp+=8;
                xi+=2;
d84 2
a85 1
void TDES_decrypt(char *block, int nb, void *key)
d87 1
a87 1
        unsigned long * xi,xo[2],xa[2];
d90 1
a90 1
        des_key_schedule *ks=(des_key_schedule *)key;
d92 17
a108 15
        xi=(long *)block;
        tmp=block;
        xo[0]=*xi; xo[1]=*(xi+1);
        des_ecb3_encrypt((des_cblock *)tmp,(des_cblock *)tmp,ks[0],ks[1],ks[0],DES_DECRYPT);
        tmp+=8;
        xi=(long *)tmp;
        for (i=1;i<nb/8;i++) {
                xa[0]=*xi; xa[1]=*(xi+1);
                des_ecb3_encrypt((des_cblock *)tmp,(des_cblock *)tmp,ks[0],ks[1],ks[0],DES_DECRYPT);
                *(xi)^=xo[0];
                *(xi+1)^=xo[1];
                xo[0]=xa[0];  
                xo[1]=xa[1];
                tmp+=8;
                xi+=2;
a110 2


@


1.1
log
@initial import of tcfs.
@
text
@d1 27
@

