head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.5.0.8
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	SMP:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4;
locks; strict;
comment	@ * @;


1.8
date	2003.02.24.01.17.39;	author deraadt;	state dead;
branches;
next	1.7;

1.7
date	2002.03.14.03.16.10;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.27.08;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.16.20.02.21;	author provos;	state Exp;
branches
	1.5.4.1
	1.5.8.1;
next	1.4;

1.4
date	2000.06.18.16.23.10;	author provos;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.17.20.25.55;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.17.17.32.27;	author provos;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.17.17.16.06;	author provos;	state Exp;
branches;
next	;

1.5.4.1
date	2001.05.14.22.32.58;	author niklas;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2002.03.29.23.31.57;	author niklas;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2003.03.28.00.00.20;	author niklas;	state dead;
branches;
next	;

1.5.8.1
date	2002.06.11.03.30.21;	author art;	state Exp;
branches;
next	1.5.8.2;

1.5.8.2
date	2003.05.19.22.36.12;	author tedu;	state dead;
branches;
next	;


desc
@@


1.8
log
@Remove tcfs until this entire licensing mess is cleaned up.  This is
ANOTHER case of a developer having ignored licenses when importing code.
@
text
@/*	$OpenBSD: tcfs_keytab.h,v 1.7 2002/03/14 03:16:10 millert Exp $	*/
/*
 * Copyright 2000 The TCFS Project at http://tcfs.dia.unisa.it/
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef _TCFS_KEYTAB_H_
#define _TCFS_KEYTAB_H_

#include <sys/types.h>
struct tcfs_mount;

#define	KEYTABSIZE	20
#define KEYSIZE		32
#define KEYPARTSIZE	(KEYSIZE+KEYSIZE/8)

#define CLEAN		0x00
#define	PID_BIT		0x01
#define UID_KEY		0x02
#define GID_KEY		0x04
#define PID_KEY		(PID_BIT|UID_KEY)

#define IS_GID_NODE(np)	(((np)->kn_type)&GID_KEY)
#define IS_UID_NODE(np)	(((np)->kn_type)&UID_KEY)
#define IS_PID_NODE(np)	((((np)->kn_type)&PID_BIT)&&(IS_UID_NODE((np))))

#ifndef TCFS_OK
#define TCFS_OK 0
#endif

#define MAXUSRPERGRP	10

typedef struct {
	unsigned char gui_flag;
	uid_t gui_uid;
	unsigned char gui_tcfskey[KEYPARTSIZE];
} tcfs_grp_uinfo;

#define	GUI_CLEAN	0
#define GUI_SET		1
#define IS_SET_GUI(gui)	((gui).gui_flag==GUI_SET)

typedef struct _grp_data {
	int gd_flag;
	int gd_n;
	int gd_k;
	tcfs_grp_uinfo gd_part[MAXUSRPERGRP];
} tcfs_grp_data;

#define IS_CLEAN_GD(gd)	((gd)->gd_n==0)
#define IS_FULL_GD(gd)	((gd)->gd_n==MAXUSRPERGRP)
#define IS_READY_GD(gd)	(((gd)->gd_n)>=((gd)->gd_k))

typedef struct _kn {
	pid_t 		 kn_pid;
	uid_t 		 kn_uid;
	gid_t		 kn_gid;
	unsigned int	 kn_type;

	void *kn_key;
#undef kn_data
	tcfs_grp_data *kn_data;

	struct _kn *kn_n;
	struct _kn *kn_p;
}	tcfs_keytab_node;

typedef struct 	_kt {
	unsigned int cnt;
	tcfs_keytab_node* node[KEYTABSIZE]; 
} tcfs_keytab;

#define	NIL	((tcfs_keytab_node*)0)

#ifdef _HAVE_HASH_
int		_tcfs_keytab_hash(unsigned int);
#define		tcfs_keytab_hash(x)	_tcfs_keytab_hash((unsigned int)(x))
#else
#define		tcfs_keytab_hash(u)	((u)%KEYTABSIZE)
#endif

tcfs_keytab_node	*tcfs_keytab_newnode(void);
tcfs_keytab_node	*tcfs_keytab_newgidnode(void);
void			 tcfs_keytab_dispnode(tcfs_keytab_node*);
tcfs_keytab		*tcfs_keytab_init(void);
void			 tcfs_keytab_dispose(tcfs_keytab*);
tcfs_keytab_node	*tcfs_keytab_fetch_uid(tcfs_keytab *, uid_t);
int			 tcfs_keytab_push_gidpart(struct tcfs_mount *,tcfs_keytab_node *,uid_t, gid_t,int,char*);
tcfs_keytab_node	*tcfs_keytab_fetch_gid(tcfs_keytab *, gid_t);
tcfs_keytab_node	*tcfs_keytab_fetch_pid(tcfs_keytab *, uid_t, pid_t);
int			 tcfs_keytab_push_uid(tcfs_keytab*, uid_t, void* );
int			 tcfs_keytab_push_pid(tcfs_keytab*, uid_t, pid_t, void *);
int			 tcfs_keytab_push_gid(struct tcfs_mount *,tcfs_keytab *, uid_t, gid_t, int, char *);
int			 tcfs_keytab_rm_uid(tcfs_keytab *, uid_t);
int			 tcfs_keytab_rm_pid(tcfs_keytab *, uid_t, pid_t);
int			 tcfs_keytab_rm_gidpart(tcfs_keytab_node *,uid_t, gid_t);
int			 tcfs_keytab_rm_gid(tcfs_keytab*, uid_t, gid_t);
int			 tcfs_interp(struct tcfs_mount *, tcfs_keytab_node*);
int			 tcfs_keytab_check_uid(tcfs_keytab *, uid_t);
int			 tcfs_keytab_check_pid(tcfs_keytab *, uid_t, pid_t);
int			 tcfs_keytab_check_gid(tcfs_keytab *, gid_t);
#endif /* _TCFS_KEYTAB_H_ */
@


1.7
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_keytab.h,v 1.6 2002/03/14 01:27:08 millert Exp $	*/
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_keytab.h,v 1.5 2000/11/16 20:02:21 provos Exp $	*/
d97 1
a97 1
int		_tcfs_keytab_hash __P(unsigned int));
@


1.5
log
@support kernel event queues, from FreeBSD by Jonathan Lemon,
okay art@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_keytab.h,v 1.4 2000/06/18 16:23:10 provos Exp $	*/
d103 20
a122 20
tcfs_keytab_node	*tcfs_keytab_newnode __P((void));
tcfs_keytab_node	*tcfs_keytab_newgidnode __P((void));
void			 tcfs_keytab_dispnode __P((tcfs_keytab_node*));
tcfs_keytab		*tcfs_keytab_init __P((void));
void			 tcfs_keytab_dispose __P((tcfs_keytab*));
tcfs_keytab_node	*tcfs_keytab_fetch_uid __P((tcfs_keytab *, uid_t));
int			 tcfs_keytab_push_gidpart __P((struct tcfs_mount *,tcfs_keytab_node *,uid_t, gid_t,int,char*));
tcfs_keytab_node	*tcfs_keytab_fetch_gid __P((tcfs_keytab *, gid_t));
tcfs_keytab_node	*tcfs_keytab_fetch_pid __P((tcfs_keytab *, uid_t, pid_t));
int			 tcfs_keytab_push_uid __P((tcfs_keytab*, uid_t, void* ));
int			 tcfs_keytab_push_pid __P((tcfs_keytab*, uid_t, pid_t, void *));
int			 tcfs_keytab_push_gid __P((struct tcfs_mount *,tcfs_keytab *, uid_t, gid_t, int, char *));
int			 tcfs_keytab_rm_uid __P((tcfs_keytab *, uid_t));
int			 tcfs_keytab_rm_pid __P((tcfs_keytab *, uid_t, pid_t));
int			 tcfs_keytab_rm_gidpart __P((tcfs_keytab_node *,uid_t, gid_t));
int			 tcfs_keytab_rm_gid __P((tcfs_keytab*, uid_t, gid_t));
int			 tcfs_interp __P((struct tcfs_mount *, tcfs_keytab_node*));
int			 tcfs_keytab_check_uid __P((tcfs_keytab *, uid_t));
int			 tcfs_keytab_check_pid __P((tcfs_keytab *, uid_t, pid_t));
int			 tcfs_keytab_check_gid __P((tcfs_keytab *, gid_t));
@


1.5.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_keytab.h,v 1.5 2000/11/16 20:02:21 provos Exp $	*/
d97 1
a97 1
int		_tcfs_keytab_hash(unsigned int);
d103 20
a122 20
tcfs_keytab_node	*tcfs_keytab_newnode(void);
tcfs_keytab_node	*tcfs_keytab_newgidnode(void);
void			 tcfs_keytab_dispnode(tcfs_keytab_node*);
tcfs_keytab		*tcfs_keytab_init(void);
void			 tcfs_keytab_dispose(tcfs_keytab*);
tcfs_keytab_node	*tcfs_keytab_fetch_uid(tcfs_keytab *, uid_t);
int			 tcfs_keytab_push_gidpart(struct tcfs_mount *,tcfs_keytab_node *,uid_t, gid_t,int,char*);
tcfs_keytab_node	*tcfs_keytab_fetch_gid(tcfs_keytab *, gid_t);
tcfs_keytab_node	*tcfs_keytab_fetch_pid(tcfs_keytab *, uid_t, pid_t);
int			 tcfs_keytab_push_uid(tcfs_keytab*, uid_t, void* );
int			 tcfs_keytab_push_pid(tcfs_keytab*, uid_t, pid_t, void *);
int			 tcfs_keytab_push_gid(struct tcfs_mount *,tcfs_keytab *, uid_t, gid_t, int, char *);
int			 tcfs_keytab_rm_uid(tcfs_keytab *, uid_t);
int			 tcfs_keytab_rm_pid(tcfs_keytab *, uid_t, pid_t);
int			 tcfs_keytab_rm_gidpart(tcfs_keytab_node *,uid_t, gid_t);
int			 tcfs_keytab_rm_gid(tcfs_keytab*, uid_t, gid_t);
int			 tcfs_interp(struct tcfs_mount *, tcfs_keytab_node*);
int			 tcfs_keytab_check_uid(tcfs_keytab *, uid_t);
int			 tcfs_keytab_check_pid(tcfs_keytab *, uid_t, pid_t);
int			 tcfs_keytab_check_gid(tcfs_keytab *, gid_t);
@


1.5.8.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_keytab.h,v 1.5.8.1 2002/06/11 03:30:21 art Exp $	*/
@


1.5.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_keytab.h,v 1.5 2000/11/16 20:02:21 provos Exp $	*/
@


1.5.4.2
log
@tcfs got skipped by cvs for some reason
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_keytab.h,v 1.5.4.1 2001/05/14 22:32:58 niklas Exp $	*/
d97 1
a97 1
int		_tcfs_keytab_hash(unsigned int);
d103 20
a122 20
tcfs_keytab_node	*tcfs_keytab_newnode(void);
tcfs_keytab_node	*tcfs_keytab_newgidnode(void);
void			 tcfs_keytab_dispnode(tcfs_keytab_node*);
tcfs_keytab		*tcfs_keytab_init(void);
void			 tcfs_keytab_dispose(tcfs_keytab*);
tcfs_keytab_node	*tcfs_keytab_fetch_uid(tcfs_keytab *, uid_t);
int			 tcfs_keytab_push_gidpart(struct tcfs_mount *,tcfs_keytab_node *,uid_t, gid_t,int,char*);
tcfs_keytab_node	*tcfs_keytab_fetch_gid(tcfs_keytab *, gid_t);
tcfs_keytab_node	*tcfs_keytab_fetch_pid(tcfs_keytab *, uid_t, pid_t);
int			 tcfs_keytab_push_uid(tcfs_keytab*, uid_t, void* );
int			 tcfs_keytab_push_pid(tcfs_keytab*, uid_t, pid_t, void *);
int			 tcfs_keytab_push_gid(struct tcfs_mount *,tcfs_keytab *, uid_t, gid_t, int, char *);
int			 tcfs_keytab_rm_uid(tcfs_keytab *, uid_t);
int			 tcfs_keytab_rm_pid(tcfs_keytab *, uid_t, pid_t);
int			 tcfs_keytab_rm_gidpart(tcfs_keytab_node *,uid_t, gid_t);
int			 tcfs_keytab_rm_gid(tcfs_keytab*, uid_t, gid_t);
int			 tcfs_interp(struct tcfs_mount *, tcfs_keytab_node*);
int			 tcfs_keytab_check_uid(tcfs_keytab *, uid_t);
int			 tcfs_keytab_check_pid(tcfs_keytab *, uid_t, pid_t);
int			 tcfs_keytab_check_gid(tcfs_keytab *, gid_t);
@


1.5.4.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_keytab.h,v 1.5.4.2 2002/03/29 23:31:57 niklas Exp $	*/
@


1.4
log
@change keysize from 8 bytes to 24 for Triple-DES and to 32 for Blowfish.
This probably breaks group sharing.  copyin on userland pointers is required,
inline key into the argument structure.
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_keytab.h,v 1.3 2000/06/17 20:25:55 provos Exp $	*/
d82 1
@


1.3
log
@some KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: tcfs_keytab.h,v 1.2 2000/06/17 17:32:27 provos Exp $	*/
d35 1
a35 1
#define KEYSIZE		8
@


1.2
log
@BSD copyright + tags
@
text
@d1 1
a1 1
/*	$OpenBSD: mbuf.h,v 1.17 2000/06/12 17:24:26 itojun Exp $	*/
d28 4
a31 4
#ifndef _SYS_TYPES_H_
#include "sys/types.h"
#endif
#ifndef _TCFS_MOUNT_H_
a32 1
#endif
d34 1
a34 2
#define _TCFS_KEYTAB_H_
#define	KEYTABSIZE	 20
d54 5
a58 6
typedef struct 
		{
			 unsigned char gui_flag;
			 uid_t gui_uid;
			 unsigned char gui_tcfskey[KEYPARTSIZE];
		} tcfs_grp_uinfo;
d64 6
a69 6
typedef struct _grp_data	{
				 int gd_flag;
			  	 int gd_n;
			  	 int gd_k;
				 tcfs_grp_uinfo gd_part[MAXUSRPERGRP];
				} tcfs_grp_data;
d89 3
a91 3
		 unsigned int cnt;
		 tcfs_keytab_node* node[KEYTABSIZE]; 
		} tcfs_keytab;
d96 1
a96 1
int		_tcfs_keytab_hash(unsigned int);
d102 21
a122 20
tcfs_keytab_node  	*tcfs_keytab_newnode(void);
tcfs_keytab_node  	*tcfs_keytab_newgidnode(void);
void			tcfs_keytab_dispnode(tcfs_keytab_node*);
tcfs_keytab 		*tcfs_keytab_init(void);
void			tcfs_keytab_dispose(tcfs_keytab*);
tcfs_keytab_node	*tcfs_keytab_fetch_uid(tcfs_keytab *, uid_t);
int			tcfs_keytab_push_gidpart(struct tcfs_mount *,tcfs_keytab_node *,uid_t, gid_t,int,char*);
tcfs_keytab_node	*tcfs_keytab_fetch_gid(tcfs_keytab *, gid_t);
tcfs_keytab_node	*tcfs_keytab_fetch_pid(tcfs_keytab *, uid_t, pid_t);
int			tcfs_keytab_push_uid(tcfs_keytab*, uid_t, void* );
int			tcfs_keytab_push_pid(tcfs_keytab*, uid_t, pid_t, void* );
int			tcfs_keytab_push_gid(struct tcfs_mount *,tcfs_keytab*, uid_t, gid_t,int,char*);
int			tcfs_keytab_rm_uid(tcfs_keytab*, uid_t);
int			tcfs_keytab_rm_pid(tcfs_keytab*, uid_t, pid_t);
int			tcfs_keytab_rm_gidpart(tcfs_keytab_node *,uid_t, gid_t);
int			tcfs_keytab_rm_gid(tcfs_keytab*, uid_t, gid_t);
int			tcfs_interp(struct tcfs_mount *, tcfs_keytab_node*);
int			tcfs_keytab_check_uid(tcfs_keytab *, uid_t);
int			tcfs_keytab_check_pid(tcfs_keytab *, uid_t, pid_t);
int			tcfs_keytab_check_gid(tcfs_keytab *, gid_t);
@


1.1
log
@initial import of tcfs.
@
text
@d1 27
@

