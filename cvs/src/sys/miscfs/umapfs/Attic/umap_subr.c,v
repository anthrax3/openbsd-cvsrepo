head	1.17;
access;
symbols
	OPENBSD_3_7:1.16.0.8
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.6
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	UBC_SYNC_A:1.15
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.14
	UBC:1.12.0.14
	UBC_BASE:1.12
	OPENBSD_3_0:1.12.0.12
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.10
	OPENBSD_2_8:1.12.0.8
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.12.0.6
	OPENBSD_2_7_BASE:1.12
	SMP:1.12.0.4
	SMP_BASE:1.12
	kame_19991208:1.12
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.11.0.6
	OPENBSD_2_5_BASE:1.11
	OPENBSD_2_4:1.11.0.4
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.7.0.4
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2005.05.26.00.38.50;	author pedro;	state dead;
branches;
next	1.16;

1.16
date	2003.06.02.23.28.11;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.05.12.21.02.10;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.14.21.35.00;	author todd;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.14.01.27.08;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	99.04.28.09.28.15;	author art;	state Exp;
branches
	1.12.4.1
	1.12.14.1;
next	1.11;

1.11
date	97.11.06.05.58.47;	author csapuntz;	state Exp;
branches;
next	1.10;

1.10
date	97.10.06.20.20.41;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.10.06.15.19.14;	author csapuntz;	state Exp;
branches;
next	1.8;

1.8
date	97.09.11.05.26.14;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	96.04.19.16.09.57;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.03.25.18.02.56;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.03.19.21.10.42;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.03.02.00.08.06;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.02.29.13.08.05;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.26.07.20.07;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.03;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.03;	author deraadt;	state Exp;
branches;
next	;

1.12.4.1
date	2002.03.28.15.02.01;	author niklas;	state Exp;
branches;
next	1.12.4.2;

1.12.4.2
date	2003.03.28.00.00.20;	author niklas;	state Exp;
branches;
next	1.12.4.3;

1.12.4.3
date	2003.05.16.00.29.43;	author niklas;	state Exp;
branches;
next	1.12.4.4;

1.12.4.4
date	2003.06.07.11.06.06;	author ho;	state Exp;
branches;
next	;

1.12.14.1
date	2002.06.11.03.30.21;	author art;	state Exp;
branches;
next	1.12.14.2;

1.12.14.2
date	2002.10.29.00.36.45;	author art;	state Exp;
branches;
next	1.12.14.3;

1.12.14.3
date	2003.05.19.22.36.12;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.17
log
@bye bye, rest in attic ad infinitum, amen
@
text
@/*	$OpenBSD: umap_subr.c,v 1.16 2003/06/02 23:28:11 millert Exp $ */
/*	$NetBSD: umap_subr.c,v 1.19 2001/11/15 09:48:23 lukem Exp $	*/

/*
 * Copyright (c) 1999 National Aeronautics & Space Administration
 * All rights reserved.
 *
 * This software was written by William Studenmund of the
 * Numerical Aerospace Simulation Facility, NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the National Aeronautics & Space Administration
 *    nor the names of its contributors may be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NATIONAL AERONAUTICS & SPACE ADMINISTRATION
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE ADMINISTRATION OR CONTRIB-
 * UTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 1992, 1993, 1995
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software donated to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: Id: lofs_subr.c, v 1.11 1992/05/30 10:05:43 jsp Exp
 *	@@(#)umap_subr.c	8.9 (Berkeley) 5/14/95
 */


#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/time.h>
#include <sys/vnode.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/malloc.h>
#include <miscfs/specfs/specdev.h>
#include <miscfs/umapfs/umap.h>

u_long umap_findid(u_long, u_long [][2], int);
int umap_node_alloc(struct mount *, struct vnode *, struct vnode **);

/*
 * umap_findid is called by various routines in umap_vnodeops.c to
 * find a user or group id in a map.
 */
u_long
umap_findid(id, map, nentries)
	u_long id;
	u_long map[][2];
	int nentries;
{
	int i;

	/* Find uid entry in map */
	i = 0;
	while ((i<nentries) && ((map[i][0]) != id))
		i++;

	if (i < nentries)
		return (map[i][1]);
	else
		return (-1);

}

/*
 * umap_reverse_findid is called by umap_getattr() in umap_vnodeops.c to
 * find a user or group id in a map, in reverse.
 */
u_long
umap_reverse_findid(id, map, nentries)
	u_long id;
	u_long map[][2];
	int nentries;
{
	int i;

	/* Find uid entry in map */
	i = 0;
	while ((i<nentries) && ((map[i][1]) != id))
		i++;

	if (i < nentries)
		return (map[i][0]);
	else
		return (-1);

}

/* umap_mapids maps all of the ids in a credential, both user and group. */

void
umap_mapids(v_mount, credp)
	struct mount *v_mount;
	struct ucred *credp;
{
	int i, unentries, gnentries;
	uid_t uid;
	gid_t gid;
	u_long (*usermap)[2], (*groupmap)[2];

	if (credp == NOCRED)
		return;

	unentries =  MOUNTTOUMAPMOUNT(v_mount)->info_unentries;
	usermap =  MOUNTTOUMAPMOUNT(v_mount)->info_umapdata;
	gnentries =  MOUNTTOUMAPMOUNT(v_mount)->info_gnentries;
	groupmap =  MOUNTTOUMAPMOUNT(v_mount)->info_gmapdata;

	/* Find uid entry in map */

	uid = (uid_t) umap_findid(credp->cr_uid, usermap, unentries);

	if (uid != -1)
		credp->cr_uid = uid;
	else
		credp->cr_uid = (uid_t) NOBODY;

#if 1
	/* cr_gid is the same as cr_groups[0] in 4BSD, but not in NetBSD */

	/* Find gid entry in map */

	gid = (gid_t) umap_findid(credp->cr_gid, groupmap, gnentries);

	if (gid != -1)
		credp->cr_gid = gid;
	else
		credp->cr_gid = NULLGROUP;
#endif

	/* Now we must map each of the set of groups in the cr_groups 
		structure. */

	for(i=0; i < credp->cr_ngroups; i++) {
		gid = (gid_t) umap_findid(credp->cr_groups[i],
					  groupmap, gnentries);

		if (gid != -1)
			credp->cr_groups[i] = gid;
		else
			credp->cr_groups[i] = NULLGROUP;
	}
}
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.15 2003/05/12 21:02:10 tedu Exp $ */
@


1.15
log
@umapfs uses the new layer stuff now too.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d51 1
a51 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.14
log
@spelling; from Brian Poole <raj@@cerias.purdue.edu>
@
text
@d1 2
a2 2
/*	$OpenBSD: umap_subr.c,v 1.13 2002/03/14 01:27:08 millert Exp $	*/
/*	$NetBSD: umap_subr.c,v 1.8 1996/03/05 02:35:39 thorpej Exp $	*/
d5 33
a37 1
 * Copyright (c) 1992, 1993
d72 1
a72 1
 *	@@(#)umap_subr.c	8.6 (Berkeley) 1/26/94
d75 1
a79 1
#include <sys/types.h>
d87 2
a88 34
#define LOG2_SIZEVNODE 7		/* log2(sizeof struct vnode) */
#define	NUMAPNODECACHE 16

/*
 * Null layer cache:
 * Each cache entry holds a reference to the target vnode
 * along with a pointer to the alias vnode.  When an
 * entry is added the target vnode is VREF'd.  When the
 * alias is removed the target vnode is vrele'd.
 */

#define	UMAP_NHASH(vp) \
	(&umap_node_hashtbl[(((u_long)vp)>>LOG2_SIZEVNODE) & umap_node_hash])
LIST_HEAD(umap_node_hashhead, umap_node) *umap_node_hashtbl;
u_long umap_node_hash;

static id_t umap_findid(id_t, id_map_t, int);
static struct vnode *umap_node_find(struct mount *, struct vnode *);
static int umap_node_alloc(struct mount *, struct vnode *,
				struct vnode **);

/*
 * Initialise cache headers
 */
int
umapfs_init(struct vfsconf *vfsp)
{

#ifdef UMAPFS_DIAGNOSTIC
	printf("umapfs_init\n");		/* printed during system boot */
#endif
	umap_node_hashtbl = hashinit(NUMAPNODECACHE, M_CACHE, M_WAITOK, &umap_node_hash);
	return (0);
}
d94 1
a94 1
static id_t
d96 3
a98 3
	id_t	id;
	id_map_t map;
	int	nentries;
d102 1
a102 1
	/* Find {g,u}id entry in map */
d118 1
a118 1
id_t
d120 3
a122 3
	id_t	id;
	id_map_t map;
	int	nentries;
a137 258
/*
 * Return alias for target vnode if already exists, else 0.
 */
static struct vnode *
umap_node_find(mp, targetvp)
	struct mount *mp;
	struct vnode *targetvp;
{
	struct proc *p = curproc;
	struct umap_node_hashhead *hd;
	struct umap_node *a;
	struct vnode *vp;

#ifdef UMAPFS_DIAGNOSTIC
	printf("umap_node_find(mp = %p, target = %p)\n", mp, targetvp);
#endif

	/*
	 * Find hash base, and then search the (two-way) linked
	 * list looking for a umap_node structure which is referencing
	 * the target vnode.  If found, the increment the umap_node
	 * reference count (but NOT the target vnode's VREF counter).
	 */
	hd = UMAP_NHASH(targetvp);
loop:
	for (a = hd->lh_first; a != 0; a = a->umap_hash.le_next) {
		if (a->umap_lowervp == targetvp &&
		    a->umap_vnode->v_mount == mp) {
			vp = UMAPTOV(a);
			/*
			 * We need vget for the VXLOCK
			 * stuff, but we don't want to lock
			 * the lower node.
			 */
			if (vget(vp, 0, p)) {
#ifdef UMAPFS_DIAGNOSTIC
				printf ("umap_node_find: vget failed.\n");
#endif
				goto loop;
			}
			return (vp);
		}
	}

#ifdef UMAPFS_DIAGNOSTIC
	printf("umap_node_find(%p, %p): NOT found\n", mp, targetvp);
#endif

	return (0);
}

/*
 * Make a new umap_node node.
 * Vp is the alias vnode, lowervp is the target vnode.
 * Maintain a reference to lowervp.
 */
static int
umap_node_alloc(mp, lowervp, vpp)
	struct mount *mp;
	struct vnode *lowervp;
	struct vnode **vpp;
{
	struct umap_node_hashhead *hd;
	struct umap_node *xp;
	struct vnode *vp, *nvp;
	int error;
	struct proc *p = curproc;
	extern int (**dead_vnodeop_p)(void *);

	if ((error = getnewvnode(VT_UMAP, mp, umap_vnodeop_p, &vp)) != 0)
		return (error);
	vp->v_type = lowervp->v_type;

	MALLOC(xp, struct umap_node *, sizeof(struct umap_node), M_TEMP,
	    M_WAITOK);
	if (vp->v_type == VBLK || vp->v_type == VCHR) {
		MALLOC(vp->v_specinfo, struct specinfo *,
		    sizeof(struct specinfo), M_VNODE, M_WAITOK);
		vp->v_rdev = lowervp->v_rdev;
	}

	vp->v_data = xp;
	xp->umap_vnode = vp;
	xp->umap_lowervp = lowervp;
	/*
	 * Before we insert our new node onto the hash chains,
	 * check to see if someone else has beaten us to it.
	 * (We could have slept in MALLOC.)
	 */
	if ((nvp = umap_node_find(mp, lowervp)) != NULL) {
		*vpp = nvp;

		/* free the substructures we've allocated. */
		FREE(xp, M_TEMP);
		if (vp->v_type == VBLK || vp->v_type == VCHR)
			FREE(vp->v_specinfo, M_VNODE);

		vp->v_type = VBAD;		/* node is discarded */
		vp->v_op = dead_vnodeop_p;	/* so ops will still work */
		vrele(vp);			/* get rid of it. */
		return (0);
	}

	/*
	 * XXX if it's a device node, it needs to be checkalias()ed.
	 * however, for locking reasons, that's just not possible.
	 * so we have to do most of the dirty work inline.  Note that
	 * this is a limited case; we know that there's going to be
	 * an alias, and we know that that alias will be a "real"
	 * device node, i.e. not tagged VT_NON.
	 */
	if (vp->v_type == VBLK || vp->v_type == VCHR) {
		struct vnode *cvp, **cvpp;

		cvpp = &speclisth[SPECHASH(vp->v_rdev)];
loop:
		for (cvp = *cvpp; cvp; cvp = cvp->v_specnext) {
			if (vp->v_rdev != cvp->v_rdev ||
			    vp->v_type != cvp->v_type)
				continue;

			/*
			 * Alias, but not in use, so flush it out.
			 */
			if (cvp->v_usecount == 0) {
				vgone(cvp);
				goto loop;
			}
			if (vget(cvp, 0, p))	/* can't lock; will die! */
				goto loop;
			break;
		}

		vp->v_hashchain = cvpp;
		vp->v_specnext = *cvpp;
		vp->v_specmountpoint = NULL;
		*cvpp = vp;
#ifdef DIAGNOSTIC
		if (cvp == NULLVP)
			panic("umap_node_alloc: no alias for device");
#endif
		vp->v_flag |= VALIASED;
		cvp->v_flag |= VALIASED;
		vrele(cvp);
	}
	/* XXX end of transmogrified checkalias() */

	*vpp = vp;
	VREF(lowervp);	/* Extra VREF will be vrele'd in umap_node_create */
	hd = UMAP_NHASH(lowervp);
	LIST_INSERT_HEAD(hd, xp, umap_hash);
	return (0);
}


/*
 * Try to find an existing umap_node vnode referring
 * to it, otherwise make a new umap_node vnode which
 * contains a reference to the target vnode.
 */
int
umap_node_create(mp, targetvp, newvpp)
	struct mount *mp;
	struct vnode *targetvp;
	struct vnode **newvpp;
{
	struct vnode *aliasvp;

	if ((aliasvp = umap_node_find(mp, targetvp)) != NULL) {
		/*
		 * Take another reference to the alias vnode
		 */
#ifdef UMAPFS_DIAGNOSTIC
		vprint("umap_node_create: exists", aliasvp);
#endif
		/* VREF(aliasvp); */
	} else {
		int error;

		/*
		 * Get new vnode.
		 */
#ifdef UMAPFS_DIAGNOSTIC
		printf("umap_node_create: create new alias vnode\n");
#endif
		/*
		 * Make new vnode reference the umap_node.
		 */
		if ((error = umap_node_alloc(mp, targetvp, &aliasvp)) != 0)
			return (error);

		/*
		 * aliasvp is already VREF'd by getnewvnode()
		 */
	}

	vrele(targetvp);

#ifdef UMAPFS_DIAGNOSTIC
	vprint("umap_node_create: alias", aliasvp);
	vprint("umap_node_create: target", targetvp);
#endif

	*newvpp = aliasvp;
	return (0);
}

#ifdef UMAPFS_DIAGNOSTIC
int umap_checkvp_barrier = 1;
struct vnode *
umap_checkvp(vp, fil, lno)
	struct vnode *vp;
	char *fil;
	int lno;
{
	struct umap_node *a = VTOUMAP(vp);
#ifdef notyet
	/*
	 * Can't do this check because vop_reclaim runs
	 * with funny vop vector.
	 */
	if (vp->v_op != umap_vnodeop_p) {
		printf ("umap_checkvp: on non-umap-node\n");
		while (umap_checkvp_barrier) /*WAIT*/ ;
		panic("umap_checkvp");
	}
#endif
	if (a->umap_lowervp == NULL) {
		/* Should never happen */
		int i; u_long *p;
		printf("vp = %p, ZERO ptr\n", vp);
		for (p = (u_long *) a, i = 0; i < 8; i++)
			printf(" %lx", p[i]);
		printf("\n");
		/* wait for debugger */
		while (umap_checkvp_barrier) /*WAIT*/ ;
		panic("umap_checkvp");
	}
	if (a->umap_lowervp->v_usecount < 1) {
		int i; u_long *p;
		printf("vp = %p, unref'ed lowervp\n", vp);
		for (p = (u_long *) a, i = 0; i < 8; i++)
			printf(" %lx", p[i]);
		printf("\n");
		/* wait for debugger */
		while (umap_checkvp_barrier) /*WAIT*/ ;
		panic ("umap with unref'ed lowervp");
	}
#ifdef notyet
	printf("umap %p/%d -> %p/%d [%s, %d]\n",
	        a->umap_vnode, a->umap_vnode->v_usecount,
		a->umap_lowervp, a->umap_lowervp->v_usecount,
		fil, lno);
#endif
	return (a->umap_lowervp);
}
#endif

d145 4
a148 4
	int	i, unentries, gnentries;
	uid_t	uid;
	gid_t	gid;
	id_map_t usermap, groupmap;
d154 1
a154 1
	usermap   =  MOUNTTOUMAPMOUNT(v_mount)->info_umapdata;
d156 1
a156 1
	groupmap  =  MOUNTTOUMAPMOUNT(v_mount)->info_gmapdata;
d183 1
a183 1
	for ( i = 0 ; credp->cr_groups[i] != 0 ; i++ ) {
@


1.13
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.12 1999/04/28 09:28:15 art Exp $	*/
d294 1
a294 1
 * Try to find an existing umap_node vnode refering
@


1.12
log
@zap the newhashinit hack.
Add an extra flag to hashinit telling if it should wait in malloc.
update all calls to hashinit.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.11 1997/11/06 05:58:47 csapuntz Exp $	*/
d71 4
a74 4
static id_t umap_findid __P((id_t, id_map_t, int));
static struct vnode *umap_node_find __P((struct mount *, struct vnode *));
static int umap_node_alloc __P((struct mount *, struct vnode *,
				struct vnode **));
d205 1
a205 1
	extern int (**dead_vnodeop_p) __P((void *));
@


1.12.14.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.12 1999/04/28 09:28:15 art Exp $	*/
d71 4
a74 4
static id_t umap_findid(id_t, id_map_t, int);
static struct vnode *umap_node_find(struct mount *, struct vnode *);
static int umap_node_alloc(struct mount *, struct vnode *,
				struct vnode **);
d205 1
a205 1
	extern int (**dead_vnodeop_p)(void *);
@


1.12.14.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.12.14.1 2002/06/11 03:30:21 art Exp $	*/
d294 1
a294 1
 * Try to find an existing umap_node vnode referring
@


1.12.14.3
log
@sync
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: umap_subr.c,v 1.19 2001/11/15 09:48:23 lukem Exp $	*/
d5 1
a5 33
 * Copyright (c) 1999 National Aeronautics & Space Administration
 * All rights reserved.
 *
 * This software was written by William Studenmund of the
 * Numerical Aerospace Simulation Facility, NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the National Aeronautics & Space Administration
 *    nor the names of its contributors may be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NATIONAL AERONAUTICS & SPACE ADMINISTRATION
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE ADMINISTRATION OR CONTRIB-
 * UTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 1992, 1993, 1995
d40 1
a40 1
 *	@@(#)umap_subr.c	8.9 (Berkeley) 5/14/95
a42 1

d47 1
d55 34
a88 2
u_long umap_findid(u_long, u_long [][2], int);
int umap_node_alloc(struct mount *, struct vnode *, struct vnode **);
d94 1
a94 1
u_long
d96 3
a98 3
	u_long id;
	u_long map[][2];
	int nentries;
d102 1
a102 1
	/* Find uid entry in map */
d118 1
a118 1
u_long
d120 3
a122 3
	u_long id;
	u_long map[][2];
	int nentries;
d138 258
d403 4
a406 4
	int i, unentries, gnentries;
	uid_t uid;
	gid_t gid;
	u_long (*usermap)[2], (*groupmap)[2];
d412 1
a412 1
	usermap =  MOUNTTOUMAPMOUNT(v_mount)->info_umapdata;
d414 1
a414 1
	groupmap =  MOUNTTOUMAPMOUNT(v_mount)->info_gmapdata;
d441 1
a441 1
	for(i=0; i < credp->cr_ngroups; i++) {
@


1.12.4.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d71 4
a74 4
static id_t umap_findid(id_t, id_map_t, int);
static struct vnode *umap_node_find(struct mount *, struct vnode *);
static int umap_node_alloc(struct mount *, struct vnode *,
				struct vnode **);
d205 1
a205 1
	extern int (**dead_vnodeop_p)(void *);
@


1.12.4.2
log
@Sync the SMP branch with 3.3
@
text
@d294 1
a294 1
 * Try to find an existing umap_node vnode referring
@


1.12.4.3
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: umap_subr.c,v 1.19 2001/11/15 09:48:23 lukem Exp $	*/
d5 1
a5 33
 * Copyright (c) 1999 National Aeronautics & Space Administration
 * All rights reserved.
 *
 * This software was written by William Studenmund of the
 * Numerical Aerospace Simulation Facility, NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the National Aeronautics & Space Administration
 *    nor the names of its contributors may be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NATIONAL AERONAUTICS & SPACE ADMINISTRATION
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE ADMINISTRATION OR CONTRIB-
 * UTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 1992, 1993, 1995
d40 1
a40 1
 *	@@(#)umap_subr.c	8.9 (Berkeley) 5/14/95
a42 1

d47 1
d55 34
a88 2
u_long umap_findid(u_long, u_long [][2], int);
int umap_node_alloc(struct mount *, struct vnode *, struct vnode **);
d94 1
a94 1
u_long
d96 3
a98 3
	u_long id;
	u_long map[][2];
	int nentries;
d102 1
a102 1
	/* Find uid entry in map */
d118 1
a118 1
u_long
d120 3
a122 3
	u_long id;
	u_long map[][2];
	int nentries;
d138 258
d403 4
a406 4
	int i, unentries, gnentries;
	uid_t uid;
	gid_t gid;
	u_long (*usermap)[2], (*groupmap)[2];
d412 1
a412 1
	usermap =  MOUNTTOUMAPMOUNT(v_mount)->info_umapdata;
d414 1
a414 1
	groupmap =  MOUNTTOUMAPMOUNT(v_mount)->info_gmapdata;
d441 1
a441 1
	for(i=0; i < credp->cr_ngroups; i++) {
@


1.12.4.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.12.4.3 2003/05/16 00:29:43 niklas Exp $ */
d51 5
a55 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.11
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.10 1997/10/06 20:20:41 deraadt Exp $	*/
d86 1
a86 1
	umap_node_hashtbl = hashinit(NUMAPNODECACHE, M_CACHE, &umap_node_hash);
@


1.10
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.8 1997/09/11 05:26:14 millert Exp $	*/
d45 1
d79 2
a80 2
void
umapfs_init()
d87 1
d146 1
d172 1
a172 1
			if (vget(vp, 0)) {
d204 1
d266 1
a266 1
			if (vget(cvp, 0))	/* can't lock; will die! */
d273 1
a273 1
		vp->v_specflags = 0;
@


1.9
log
@VFS Lite2 Changes
@
text
@a44 1
#include <sys/proc.h>
d78 2
a79 2
int
umapfs_init(struct vfsconf *vfsp)
a85 1
	return (0);
a143 1
	struct proc *p = curproc;
d169 1
a169 1
			if (vget(vp, 0, p)) {
a200 1
	struct proc *p = curproc;
d262 1
a262 1
			if (vget(cvp, 0, p))	/* can't lock; will die! */
d269 1
a269 1
		vp->v_specmountpoint = NULL;
@


1.8
log
@Fix {KERNFS,NULLFS,UMAPFS,UNION}_DIAGNOSTIC kernel compilation errors.
From Alan Barrett <apb@@iafrica.com> with some changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.7 1996/04/19 16:09:57 niklas Exp $	*/
d45 1
d79 2
a80 2
void
umapfs_init()
d87 1
d146 1
d172 1
a172 1
			if (vget(vp, 0)) {
d204 1
d266 1
a266 1
			if (vget(cvp, 0))	/* can't lock; will die! */
d273 1
a273 1
		vp->v_specflags = 0;
@


1.7
log
@NetBSD 960317 merge
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.6 1996/03/25 18:02:56 mickey Exp $	*/
d149 1
a149 1
	printf("umap_node_find(mp = %x, target = %x)\n", mp, targetvp);
d180 1
a180 1
	printf("umap_node_find(%x, %x): NOT found\n", mp, targetvp);
d307 1
a307 1
		vprint("umap_node_create: exists", ap->umap_vnode);
d350 1
a350 1
#if 0
d364 1
a364 1
		printf("vp = %x, ZERO ptr\n", vp);
d366 1
a366 1
			printf(" %x", p[i]);
d374 1
a374 1
		printf("vp = %x, unref'ed lowervp\n", vp);
d376 1
a376 1
			printf(" %x", p[i]);
d382 2
a383 2
#if 0
	printf("umap %x/%d -> %x/%d [%s, %d]\n",
@


1.6
log
@Fixed bug while copying args in mount that may cause a crash.
Types changes and so.
@
text
@d1 2
a2 2
/*	$OpenBSD: umap_subr.c,v 1.5 1996/03/19 21:10:42 mickey Exp $	*/
/*	$NetBSD: umap_subr.c,v 1.7 1996/02/09 22:41:02 christos Exp $	*/
@


1.5
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.4 1996/03/02 00:08:06 niklas Exp $	*/
d70 1
a70 1
static u_long umap_findid __P((u_long, u_long [][2], int));
d92 1
a92 1
static u_long
d94 3
a96 3
	u_long id;
	u_long map[][2];
	int nentries;
d100 1
a100 1
	/* Find uid entry in map */
d116 1
a116 1
u_long
d118 3
a120 3
	u_long id;
	u_long map[][2];
	int nentries;
d399 4
a402 4
	int i, unentries, gnentries;
	uid_t uid;
	gid_t gid;
	u_long (*usermap)[2], (*groupmap)[2];
d407 2
a408 2
	unentries =  MOUNTTOUMAPMOUNT(v_mount)->info_nentries;
	usermap =  MOUNTTOUMAPMOUNT(v_mount)->info_mapdata;
d410 1
a410 1
	groupmap =  MOUNTTOUMAPMOUNT(v_mount)->info_gmapdata;
@


1.4
log
@Fixup umapfs_init prototype both on my part
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.3 1996/02/29 13:08:05 niklas Exp $	*/
d403 3
@


1.3
log
@Reinstate $NetBSD$ headers (we want them for tracking purposes)
Sync with NetBSD 960217
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_subr.c,v 1.2 1996/02/26 07:20:07 mickey Exp $	*/
a85 1
	return 0;
@


1.2
log
@Bug fixes (such as missing arguments).
Still seemed to have at least one bug. Strange panic happened
when unmounting from NFS tree.
@
text
@d1 2
a2 1
/*	$OpenBSD: umap_subr.c,v 1.7 1996/02/09 22:41:02 christos Exp $	*/
d78 1
a78 1
int
d437 1
a437 1
					groupmap, gnentries);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: umap_subr.c,v 1.6 1995/06/01 22:44:34 jtc Exp $	*/
d69 5
d77 1
d85 1
d201 1
a201 1
	extern int (**dead_vnodeop_p)();
d203 1
a203 1
	if (error = getnewvnode(VT_UMAP, mp, umap_vnodeop_p, &vp))
d223 1
a223 1
	if (nvp = umap_node_find(lowervp)) {
d302 1
a302 1
	if (aliasvp = umap_node_find(mp, targetvp)) {
d322 1
a322 1
		if (error = umap_node_alloc(mp, targetvp, &aliasvp))
d402 1
a402 1
	u_long *usermap, *groupmap;
d405 1
a405 1
	usermap =  &(MOUNTTOUMAPMOUNT(v_mount)->info_mapdata[0][0]);
d407 1
a407 1
	groupmap =  &(MOUNTTOUMAPMOUNT(v_mount)->info_gmapdata[0][0]);
d434 1
a434 2
	i = 0;
	while (credp->cr_groups[i] != 0) {
d439 1
a439 1
			credp->cr_groups[i++] = gid;
d441 1
a441 1
			credp->cr_groups[i++] = NULLGROUP;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
