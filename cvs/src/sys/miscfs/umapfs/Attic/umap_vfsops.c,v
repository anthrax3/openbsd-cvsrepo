head	1.28;
access;
symbols
	OPENBSD_3_7:1.27.0.4
	OPENBSD_3_7_BASE:1.27
	OPENBSD_3_6:1.27.0.2
	OPENBSD_3_6_BASE:1.27
	SMP_SYNC_A:1.27
	SMP_SYNC_B:1.27
	OPENBSD_3_5:1.25.0.2
	OPENBSD_3_5_BASE:1.25
	OPENBSD_3_4:1.24.0.2
	OPENBSD_3_4_BASE:1.24
	UBC_SYNC_A:1.21
	OPENBSD_3_3:1.19.0.2
	OPENBSD_3_3_BASE:1.19
	OPENBSD_3_2:1.18.0.4
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.18.0.2
	OPENBSD_3_1_BASE:1.18
	UBC_SYNC_B:1.18
	UBC:1.17.0.4
	UBC_BASE:1.17
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_9:1.16.0.2
	OPENBSD_2_8:1.15.0.6
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.15.0.4
	OPENBSD_2_7_BASE:1.15
	SMP:1.15.0.2
	SMP_BASE:1.15
	kame_19991208:1.14
	OPENBSD_2_6:1.14.0.2
	OPENBSD_2_6_BASE:1.14
	OPENBSD_2_5:1.13.0.2
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.12.0.4
	OPENBSD_2_4_BASE:1.12
	OPENBSD_2_3:1.12.0.2
	OPENBSD_2_3_BASE:1.12
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.7.0.4
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2005.05.26.00.38.50;	author pedro;	state dead;
branches;
next	1.27;

1.27
date	2004.05.28.15.41.41;	author mpech;	state Exp;
branches;
next	1.26;

1.26
date	2004.05.20.18.32.38;	author tedu;	state Exp;
branches;
next	1.25;

1.25
date	2004.03.03.06.39.49;	author tedu;	state Exp;
branches;
next	1.24;

1.24
date	2003.08.15.20.32.19;	author tedu;	state Exp;
branches;
next	1.23;

1.23
date	2003.08.14.07.46.40;	author mickey;	state Exp;
branches;
next	1.22;

1.22
date	2003.06.02.23.28.11;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2003.05.12.23.39.14;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2003.05.12.21.02.10;	author tedu;	state Exp;
branches;
next	1.19;

1.19
date	2003.02.24.22.32.46;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2002.03.14.01.27.08;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2001.09.16.00.42.44;	author millert;	state Exp;
branches
	1.17.4.1;
next	1.16;

1.16
date	2001.02.20.01.50.10;	author assar;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2000.02.07.04.57.17;	author assar;	state Exp;
branches
	1.15.2.1
	1.15.6.1;
next	1.14;

1.14
date	99.05.31.17.34.50;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	99.03.18.08.34.18;	author art;	state Exp;
branches;
next	1.12;

1.12
date	98.02.08.22.41.41;	author tholo;	state Exp;
branches;
next	1.11;

1.11
date	97.11.06.05.58.48;	author csapuntz;	state Exp;
branches;
next	1.10;

1.10
date	97.10.06.20.20.41;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.10.06.15.19.15;	author csapuntz;	state Exp;
branches;
next	1.8;

1.8
date	97.09.11.05.26.15;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	96.06.02.16.35.48;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.03.30.01.40.48;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.03.25.18.02.57;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.03.19.21.10.43;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.02.29.13.08.06;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.26.07.20.09;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.03;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.03;	author deraadt;	state Exp;
branches;
next	;

1.15.2.1
date	2001.05.14.22.32.58;	author niklas;	state Exp;
branches;
next	1.15.2.2;

1.15.2.2
date	2001.10.31.03.26.30;	author nate;	state Exp;
branches;
next	1.15.2.3;

1.15.2.3
date	2002.03.28.15.02.01;	author niklas;	state Exp;
branches;
next	1.15.2.4;

1.15.2.4
date	2003.03.28.00.00.20;	author niklas;	state Exp;
branches;
next	1.15.2.5;

1.15.2.5
date	2003.05.16.00.29.43;	author niklas;	state Exp;
branches;
next	1.15.2.6;

1.15.2.6
date	2003.06.07.11.06.06;	author ho;	state Exp;
branches;
next	1.15.2.7;

1.15.2.7
date	2004.02.19.10.57.20;	author niklas;	state Exp;
branches;
next	1.15.2.8;

1.15.2.8
date	2004.06.05.23.13.06;	author niklas;	state Exp;
branches;
next	;

1.15.6.1
date	2001.09.16.15.22.03;	author miod;	state Exp;
branches;
next	;

1.16.2.1
date	2001.10.14.20.44.49;	author jason;	state Exp;
branches;
next	;

1.17.4.1
date	2002.06.11.03.30.21;	author art;	state Exp;
branches;
next	1.17.4.2;

1.17.4.2
date	2003.05.19.22.36.12;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.28
log
@bye bye, rest in attic ad infinitum, amen
@
text
@/*	$OpenBSD: umap_vfsops.c,v 1.27 2004/05/28 15:41:41 mpech Exp $	*/
/*	$NetBSD: umap_vfsops.c,v 1.35 2002/09/21 18:09:31 christos Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software donated to Berkeley by
 * the UCLA Ficus project.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)null_vfsops.c       1.5 (Berkeley) 7/10/92
 *	@@(#)umap_vfsops.c	8.8 (Berkeley) 5/14/95
 */

/*
 * Umap Layer
 * (See mount_umap(8) for a description of this layer.)
 */


#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/time.h>
#include <sys/vnode.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/malloc.h>
#include <miscfs/umapfs/umap.h>
#include <miscfs/genfs/layer_extern.h>

int	umapfs_mount(struct mount *, const char *, void *,
	  struct nameidata *, struct proc *);
int	umapfs_unmount(struct mount *, int, struct proc *);

/*
 * Mount umap layer
 */
int
umapfs_mount(mp, path, data, ndp, p)
	struct mount *mp;
	const char *path;
	void *data;
	struct nameidata *ndp;
	struct proc *p;
{
	struct umap_args args;
	struct vnode *lowerrootvp, *vp;
	struct umap_mount *amp;
	size_t size;
	int error;
#ifdef UMAPFS_DIAGNOSTIC
	int i;
#endif
#if 0
	if (mp->mnt_flag & MNT_GETARGS) {
		amp = MOUNTTOUMAPMOUNT(mp);
		if (amp == NULL)
			return EIO;
		args.la.target = NULL;
		vfs_showexport(mp, &args.la.export, &amp->umapm_export);
		args.nentries = amp->info_nentries;
		args.gnentries = amp->info_gnentries;
		return copyout(&args, data, sizeof(args));
	}
#endif

	/* only for root */
	if ((error = suser(p, 0)) != 0)
		return error;

#ifdef UMAPFS_DIAGNOSTIC
	printf("umapfs_mount(mp = %p)\n", mp);
#endif

	/*
	 * Get argument
	 */
	error = copyin(data, &args, sizeof(struct umap_args));
	if (error)
		return (error);

	/*
	 * Update only does export updating.
	 */
	if (mp->mnt_flag & MNT_UPDATE) {
		amp = MOUNTTOUMAPMOUNT(mp);
		if (args.umap_target == 0)
			return (vfs_export(mp, &amp->umapm_export,
					&args.umap_export));
		else
			return (EOPNOTSUPP);
	}

	/*
	 * Find lower node
	 */
	NDINIT(ndp, LOOKUP, FOLLOW|LOCKLEAF,
		UIO_USERSPACE, args.umap_target, p);
	if ((error = namei(ndp)) != 0)
		return (error);

	/*
	 * Sanity check on lower vnode
	 */
	lowerrootvp = ndp->ni_vp;
#ifdef UMAPFS_DIAGNOSTIC
	printf("vp = %p, check for VDIR...\n", lowerrootvp);
#endif

	if (lowerrootvp->v_type != VDIR) {
		vput(lowerrootvp);
		return (EINVAL);
	}

#ifdef UMAPFS_DIAGNOSTIC
	printf("mp = %p\n", mp);
#endif

	amp = malloc(sizeof(struct umap_mount), M_MISCFSMNT, M_WAITOK);
	memset(amp, 0, sizeof(struct umap_mount));

	mp->mnt_data = amp;
	amp->umapm_vfs = lowerrootvp->v_mount;
	if (amp->umapm_vfs->mnt_flag & MNT_LOCAL)
		mp->mnt_flag |= MNT_LOCAL;

	/* 
	 * Now copy in the number of entries and maps for umap mapping.
	 */
	if (args.unentries > UMAPFILEENTRIES || args.gnentries > GMAPFILEENTRIES) {
		vput(lowerrootvp);
		return (error);
	}

	amp->info_unentries = args.unentries;
	amp->info_gnentries = args.gnentries;
	error = copyin(args.umapdata, amp->info_umapdata, 
	    2*sizeof(u_long)*args.unentries);
	if (error) {
		vput(lowerrootvp);
		return (error);
	}

#ifdef UMAPFS_DIAGNOSTIC
	printf("umap_mount:unentries %d\n",args.unentries);
	for (i = 0; i < args.unentries; i++)
		printf("   %ld maps to %ld\n", amp->info_umapdata[i][0],
	 	    amp->info_umapdata[i][1]);
#endif

	error = copyin(args.gmapdata, amp->info_gmapdata, 
	    2*sizeof(u_long)*args.gnentries);
	if (error) {
		vput(lowerrootvp);
		return (error);
	}

#ifdef UMAPFS_DIAGNOSTIC
	printf("umap_mount:gnentries %d\n",args.gnentries);
	for (i = 0; i < args.gnentries; i++)
		printf("\tgroup %ld maps to %ld\n", 
		    amp->info_gmapdata[i][0],
	 	    amp->info_gmapdata[i][1]);
#endif

	/*
	 * Make sure the mount point's sufficiently initialized
	 * that the node create call will work.
	 */
	vfs_getnewfsid(mp);
	amp->umapm_size = sizeof(struct umap_node);
	amp->umapm_tag = VT_UMAP;
	amp->umapm_bypass = umap_bypass;
	amp->umapm_alloc = layer_node_alloc;	/* the default alloc is fine */
	amp->umapm_vnodeop_p = umapfs_vnodeop_p;
	simple_lock_init(&amp->umapm_hashlock);
	amp->umapm_node_hashtbl = hashinit(NUMAPNODECACHE, M_CACHE,
	    M_WAITOK, &amp->umapm_node_hash);


	/*
	 * fix up umap node for root vnode.
	 */
	error = layer_node_create(mp, lowerrootvp, &vp);
	/*
	 * Make sure the node alias worked
	 */
	if (error) {
		vput(lowerrootvp);
		free(amp, M_MISCFSMNT);
		return (error);
	}
	/*
	 * Unlock the node (either the lower or the alias)
	 */
	VOP_UNLOCK(vp, 0, p);

	/*
	 * Keep a held reference to the root vnode.
	 * It is vrele'd in umapfs_unmount.
	 */
	vp->v_flag |= VROOT;
	amp->umapm_rootvp = vp;

	(void) copyinstr(path, mp->mnt_stat.f_mntonname, MNAMELEN - 1, &size);
	memset(mp->mnt_stat.f_mntonname + size, 0, MNAMELEN - size);
	(void) copyinstr(args.umap_target, mp->mnt_stat.f_mntfromname,
		MNAMELEN - 1, &size);
	memset(mp->mnt_stat.f_mntfromname + size, 0, MNAMELEN - size);
#ifdef UMAPFS_DIAGNOSTIC
	printf("umapfs_mount: lower %s, alias at %s\n",
		mp->mnt_stat.f_mntfromname, mp->mnt_stat.f_mntonname);
#endif
	return (0);
}

/*
 * Free reference to umap layer
 */
int
umapfs_unmount(mp, mntflags, p)
	struct mount *mp;
	int mntflags;
	struct proc *p;
{
	struct vnode *rootvp = MOUNTTOUMAPMOUNT(mp)->umapm_rootvp;
	int error;
	int flags = 0;

#ifdef UMAPFS_DIAGNOSTIC
	printf("umapfs_unmount(mp = %p)\n", mp);
#endif

	if (mntflags & MNT_FORCE)
		flags |= FORCECLOSE;

	/*
	 * Clear out buffer cache.  I don't think we
	 * ever get anything cached at this level at the
	 * moment, but who knows...
	 */
#ifdef notyet
	mntflushbuf(mp, 0); 
	if (mntinvalbuf(mp, 1))
		return (EBUSY);
#endif
	if (rootvp->v_usecount > 1 && !(flags & FORCECLOSE))
		return (EBUSY);
	if ((error = vflush(mp, rootvp, flags)) != 0)
		return (error);

#ifdef UMAPFS_DIAGNOSTIC
	vprint("alias root of lower", rootvp);
#endif	 
	/*
	 * Release reference on underlying root vnode
	 */
	vrele(rootvp);
	/*
	 * And blow it away for future re-use
	 */
	vgone(rootvp);
	/*
	 * Finally, throw away the umap_mount structure
	 */
	free(mp->mnt_data, M_MISCFSMNT);
	mp->mnt_data = 0;
	return (0);
}

extern const struct vnodeopv_desc umapfs_vnodeop_opv_desc;

const struct vnodeopv_desc * const umapfs_vnodeopv_descs[] = {
	&umapfs_vnodeop_opv_desc,
	NULL,
};

const struct vfsops umapfs_vfsops = {
	umapfs_mount,
	layerfs_start,
	umapfs_unmount,
	layerfs_root,
	layerfs_quotactl,
	layerfs_statfs,
	layerfs_sync,
	layerfs_vget,
	layerfs_fhtovp,
	layerfs_vptofh,
	layerfs_init,
	layerfs_sysctl,
	layerfs_checkexp,
};
@


1.27
log
@fix for: !(flags && FORCECLOSE)

hackers@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.26 2004/05/20 18:32:38 tedu Exp $	*/
@


1.26
log
@remove more caddr_t
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.25 2004/03/03 06:39:49 tedu Exp $	*/
d272 1
a272 1
	if (rootvp->v_usecount > 1 && !(flags && FORCECLOSE))
@


1.25
log
@allow force umount here too
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.24 2003/08/15 20:32:19 tedu Exp $	*/
d103 1
a103 1
	error = copyin(data, (caddr_t)&args, sizeof(struct umap_args));
d144 2
a145 3
	amp = (struct umap_mount *) malloc(sizeof(struct umap_mount),
				M_MISCFSMNT, M_WAITOK);
	memset((caddr_t)amp, 0, sizeof(struct umap_mount));
d147 1
a147 1
	mp->mnt_data = (qaddr_t)amp;
d162 1
a162 1
	error = copyin(args.umapdata, (caddr_t)amp->info_umapdata, 
d176 1
a176 1
	error = copyin(args.gmapdata, (caddr_t)amp->info_gmapdata, 
@


1.24
log
@change arguments to suser.  suser now takes the process, and a flags
argument.  old cred only calls user suser_ucred.  this will allow future
work to more flexibly implement the idea of a root process.  looks like
something i saw in freebsd, but a little different.
use of suser_ucred vs suser in file system code should be looked at again,
for the moment semantics remain unchanged.
review and input from art@@  testing and further review miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.23 2003/08/14 07:46:40 mickey Exp $	*/
d273 1
a273 1
	if (rootvp->v_usecount > 1)
@


1.23
log
@constify vfsops; tedu@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.22 2003/06/02 23:28:11 millert Exp $	*/
d93 1
a93 1
	if ((error = suser(p->p_ucred, &p->p_acflag)) != 0)
@


1.22
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.21 2003/05/12 23:39:14 tedu Exp $	*/
d304 1
a304 1
struct vfsops umapfs_vfsops = {
@


1.21
log
@mapdata -> umapdata like it was before
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.20 2003/05/12 21:02:10 tedu Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.20
log
@umapfs uses the new layer stuff now too.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.19 2003/02/24 22:32:46 tedu Exp $	*/
d167 1
a167 1
	error = copyin(args.mapdata, (caddr_t)amp->info_umapdata, 
@


1.19
log
@use M_MISCFSMNT instead of M_UFSMNT for mount data

ok art@@
@
text
@d1 2
a2 2
/*	$OpenBSD: umap_vfsops.c,v 1.18 2002/03/14 01:27:08 millert Exp $	*/
/*	$NetBSD: umap_vfsops.c,v 1.9 1996/02/09 22:41:05 christos Exp $	*/
d40 1
a40 1
 *	@@(#)umap_vfsops.c	8.3 (Berkeley) 1/21/94
d48 1
d51 1
a52 2
#include <sys/proc.h>
#include <sys/types.h>
d58 1
d61 1
a61 2
			  struct nameidata *, struct proc *);
int	umapfs_start(struct mount *, int, struct proc *);
a62 8
int	umapfs_root(struct mount *, struct vnode **);
int	umapfs_quotactl(struct mount *, int, uid_t, caddr_t,
			     struct proc *);
int	umapfs_statfs(struct mount *, struct statfs *, struct proc *);
int	umapfs_sync(struct mount *, int, struct ucred *, struct proc *);
int	umapfs_vget(struct mount *, ino_t, struct vnode **);
int	umapfs_fhtovp(struct mount *, struct fid *, struct vnode **);
int	umapfs_vptofh(struct vnode *, struct fid *);
a76 1
	struct vnode *umapm_rootvp;
d82 17
d100 1
d105 1
a105 1
	 * Don't allow users to play with umapfs (when usermount is true).
d107 3
a109 2
	if (p->p_ucred->cr_uid != 0)
		return EPERM;
d112 1
a112 1
	 * Update is a no-op
d115 6
a120 2
		return (EOPNOTSUPP);
		/* return (VFS_MOUNT(MOUNTTOUMAPMOUNT(mp)->umapm_vfs, path, data, ndp, p));*/
a123 7
	 * Get argument
	 */
	error = copyin(data, &args, sizeof(struct umap_args));
	if (error)
		return (error);

	/*
d126 2
a127 2
	NDINIT(ndp, LOOKUP, FOLLOW|WANTPARENT|LOCKLEAF,
		UIO_USERSPACE, args.target, p);
a137 2
	vrele(ndp->ni_dvp);
	ndp->ni_dvp = 0;
d150 1
d152 1
a152 3
	/*
	 * Save reference to underlying FS
	 */
d154 2
d160 1
a160 2
	if (args.unentries < 0 || args.unentries > UMAPFILEENTRIES ||
	    args.gnentries < 0 || args.gnentries > GMAPFILEENTRIES) {
d164 1
d167 4
a170 3
	error = copyin(args.umapdata, (caddr_t)amp->info_umapdata, 
	    2*sizeof(**amp->info_umapdata)*args.unentries);
	if (error)
d172 1
d177 1
a177 1
		printf("   %d maps to %d\n", amp->info_umapdata[i][0],
d182 3
a184 2
	    2*sizeof(**amp->info_gmapdata)*args.gnentries);
	if (error)
d186 1
d191 1
a191 1
		printf("	group %d maps to %d\n", 
a195 1

d197 2
a198 2
	 * Save reference.  Each mount also holds
	 * a reference on the root vnode.
d200 11
a210 1
	error = umap_node_create(mp, lowerrootvp, &vp);
d212 1
a212 1
	 * Unlock the node (either the lower or the alias)
d214 1
a214 1
	VOP_UNLOCK(vp, 0, p);
d219 1
a219 1
		vrele(lowerrootvp);
d223 4
d232 2
a233 7
	umapm_rootvp = vp;
	umapm_rootvp->v_flag |= VROOT;
	amp->umapm_rootvp = umapm_rootvp;
	if (UMAPVPTOLOWERVP(umapm_rootvp)->v_mount->mnt_flag & MNT_LOCAL)
		mp->mnt_flag |= MNT_LOCAL;
	mp->mnt_data = (qaddr_t) amp;
	vfs_getnewfsid(mp);
d236 4
a239 4
	bzero(mp->mnt_stat.f_mntonname + size, MNAMELEN - size);
	(void) copyinstr(args.target, mp->mnt_stat.f_mntfromname, MNAMELEN - 1, 
	    &size);
	bzero(mp->mnt_stat.f_mntfromname + size, MNAMELEN - size);
a247 15
 * VFS start.  Nothing needed here - the start routine
 * on the underlying filesystem will have been called
 * when that filesystem was mounted.
 */
int
umapfs_start(mp, flags, p)
	struct mount *mp;
	int flags;
	struct proc *p;
{

	return (0);
}

/*
d256 1
a256 1
	struct vnode *umapm_rootvp = MOUNTTOUMAPMOUNT(mp)->umapm_rootvp;
d264 1
a264 1
	if (mntflags & MNT_FORCE) {
a265 1
	}
d277 1
a277 1
	if (umapm_rootvp->v_usecount > 1 && !(flags & FORCECLOSE))
d279 1
a279 1
	if ((error = vflush(mp, umapm_rootvp, flags)) != 0)
d283 1
a283 1
	vprint("alias root of lower", umapm_rootvp);
d288 1
a288 1
	vrele(umapm_rootvp);
d292 1
a292 1
	vgone(umapm_rootvp);
d301 1
a301 114
int
umapfs_root(mp, vpp)
	struct mount *mp;
	struct vnode **vpp;
{
	struct proc *p = curproc;
	struct vnode *vp;

#ifdef UMAPFS_DIAGNOSTIC
	printf("umapfs_root(mp = %p, vp = %p->%p)\n", mp,
			MOUNTTOUMAPMOUNT(mp)->umapm_rootvp,
			UMAPVPTOLOWERVP(MOUNTTOUMAPMOUNT(mp)->umapm_rootvp)
			);
#endif

	/*
	 * Return locked reference to root.
	 */
	vp = MOUNTTOUMAPMOUNT(mp)->umapm_rootvp;
	VREF(vp);
	vn_lock(vp, LK_EXCLUSIVE | LK_RETRY, p);
	*vpp = vp;
	return (0);
}

int
umapfs_quotactl(mp, cmd, uid, arg, p)
	struct mount *mp;
	int cmd;
	uid_t uid;
	caddr_t arg;
	struct proc *p;
{
	return VFS_QUOTACTL(MOUNTTOUMAPMOUNT(mp)->umapm_vfs, cmd, uid, arg, p);
}

int
umapfs_statfs(mp, sbp, p)
	struct mount *mp;
	struct statfs *sbp;
	struct proc *p;
{
	int error;
	struct statfs mstat;

#ifdef UMAPFS_DIAGNOSTIC
	printf("umapfs_statfs(mp = %p, vp = %p->%p)\n", mp,
			MOUNTTOUMAPMOUNT(mp)->umapm_rootvp,
			UMAPVPTOLOWERVP(MOUNTTOUMAPMOUNT(mp)->umapm_rootvp)
			);
#endif

	bzero(&mstat, sizeof(mstat));

	error = VFS_STATFS(MOUNTTOUMAPMOUNT(mp)->umapm_vfs, &mstat, p);
	if (error)
		return (error);

	/* now copy across the "interesting" information and fake the rest */
	sbp->f_flags = mstat.f_flags;
	sbp->f_bsize = mstat.f_bsize;
	sbp->f_iosize = mstat.f_iosize;
	sbp->f_blocks = mstat.f_blocks;
	sbp->f_bfree = mstat.f_bfree;
	sbp->f_bavail = mstat.f_bavail;
	sbp->f_files = mstat.f_files;
	sbp->f_ffree = mstat.f_ffree;
	if (sbp != &mp->mnt_stat) {
		bcopy(&mp->mnt_stat.f_fsid, &sbp->f_fsid, sizeof(sbp->f_fsid));
		bcopy(mp->mnt_stat.f_mntonname, sbp->f_mntonname, MNAMELEN);
		bcopy(mp->mnt_stat.f_mntfromname, sbp->f_mntfromname, MNAMELEN);
	}
	strncpy(sbp->f_fstypename, mp->mnt_vfc->vfc_name, MFSNAMELEN);
	return (0);
}

int
umapfs_sync(mp, waitfor, cred, p)
	struct mount *mp;
	int waitfor;
	struct ucred *cred;
	struct proc *p;
{
	/*
	 * XXX - Assumes no data cached at umap layer.
	 */
	return (0);
}

int
umapfs_vget(mp, ino, vpp)
	struct mount *mp;
	ino_t ino;
	struct vnode **vpp;
{
	return VFS_VGET(MOUNTTOUMAPMOUNT(mp)->umapm_vfs, ino, vpp);
}

int
umapfs_fhtovp(mp, fidp, vpp)
	struct mount *mp;
	struct fid *fidp;
	struct vnode **vpp;
{
	return VFS_FHTOVP(MOUNTTOUMAPMOUNT(mp)->umapm_vfs, fidp, vpp);
}

int
umapfs_vptofh(vp, fhp)
	struct vnode *vp;
	struct fid *fhp;
{
	return VFS_VPTOFH(UMAPVPTOLOWERVP(vp), fhp);
}
d303 4
a306 4
#define umapfs_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define umapfs_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)
d308 1
a308 1
struct vfsops umap_vfsops = {
d310 1
a310 1
	umapfs_start,
d312 10
a321 10
	umapfs_root,
	umapfs_quotactl,
	umapfs_statfs,
	umapfs_sync,
	umapfs_vget,
	umapfs_fhtovp,
	umapfs_vptofh,
	umapfs_init,
	umapfs_sysctl,
	umapfs_checkexp
@


1.18
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.17 2001/09/16 00:42:44 millert Exp $	*/
d144 1
a144 1
				M_UFSMNT, M_WAITOK);	/* XXX */
d201 1
a201 1
		free(amp, M_UFSMNT);	/* XXX */
d294 1
a294 1
	free(mp->mnt_data, M_UFSMNT);	/* XXX */
@


1.17
log
@Add some missing lengths checks when passing data from userland to
kernel.  From based on NetBSD patches.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.16 2001/02/20 01:50:10 assar Exp $	*/
d59 12
a70 12
int	umapfs_mount __P((struct mount *, const char *, void *,
			  struct nameidata *, struct proc *));
int	umapfs_start __P((struct mount *, int, struct proc *));
int	umapfs_unmount __P((struct mount *, int, struct proc *));
int	umapfs_root __P((struct mount *, struct vnode **));
int	umapfs_quotactl __P((struct mount *, int, uid_t, caddr_t,
			     struct proc *));
int	umapfs_statfs __P((struct mount *, struct statfs *, struct proc *));
int	umapfs_sync __P((struct mount *, int, struct ucred *, struct proc *));
int	umapfs_vget __P((struct mount *, ino_t, struct vnode **));
int	umapfs_fhtovp __P((struct mount *, struct fid *, struct vnode **));
int	umapfs_vptofh __P((struct vnode *, struct fid *));
d414 4
a417 4
#define umapfs_sysctl ((int (*) __P((int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *)))eopnotsupp)
#define umapfs_checkexp ((int (*) __P((struct mount *, struct mbuf *,	\
	int *, struct ucred **)))eopnotsupp)
@


1.17.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.17 2001/09/16 00:42:44 millert Exp $	*/
d59 12
a70 12
int	umapfs_mount(struct mount *, const char *, void *,
			  struct nameidata *, struct proc *);
int	umapfs_start(struct mount *, int, struct proc *);
int	umapfs_unmount(struct mount *, int, struct proc *);
int	umapfs_root(struct mount *, struct vnode **);
int	umapfs_quotactl(struct mount *, int, uid_t, caddr_t,
			     struct proc *);
int	umapfs_statfs(struct mount *, struct statfs *, struct proc *);
int	umapfs_sync(struct mount *, int, struct ucred *, struct proc *);
int	umapfs_vget(struct mount *, ino_t, struct vnode **);
int	umapfs_fhtovp(struct mount *, struct fid *, struct vnode **);
int	umapfs_vptofh(struct vnode *, struct fid *);
d414 4
a417 4
#define umapfs_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define umapfs_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)
@


1.17.4.2
log
@sync
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: umap_vfsops.c,v 1.35 2002/09/21 18:09:31 christos Exp $	*/
d40 1
a40 1
 *	@@(#)umap_vfsops.c	8.8 (Berkeley) 5/14/95
a47 1

d50 1
d52 1
a52 1
#include <sys/time.h>
a57 1
#include <miscfs/genfs/layer_extern.h>
d60 2
a61 1
	  struct nameidata *, struct proc *);
d63 8
d85 1
a90 17
#endif
#if 0
	if (mp->mnt_flag & MNT_GETARGS) {
		amp = MOUNTTOUMAPMOUNT(mp);
		if (amp == NULL)
			return EIO;
		args.la.target = NULL;
		vfs_showexport(mp, &args.la.export, &amp->umapm_export);
		args.nentries = amp->info_nentries;
		args.gnentries = amp->info_gnentries;
		return copyout(&args, data, sizeof(args));
	}
#endif

	/* only for root */
	if ((error = suser(p->p_ucred, &p->p_acflag)) != 0)
		return error;
a91 1
#ifdef UMAPFS_DIAGNOSTIC
d96 1
a96 1
	 * Get argument
d98 2
a99 3
	error = copyin(data, (caddr_t)&args, sizeof(struct umap_args));
	if (error)
		return (error);
d102 1
a102 1
	 * Update only does export updating.
d105 2
a106 6
		amp = MOUNTTOUMAPMOUNT(mp);
		if (args.umap_target == 0)
			return (vfs_export(mp, &amp->umapm_export,
					&args.umap_export));
		else
			return (EOPNOTSUPP);
d110 7
d119 2
a120 2
	NDINIT(ndp, LOOKUP, FOLLOW|LOCKLEAF,
		UIO_USERSPACE, args.umap_target, p);
d131 2
d144 1
a144 2
				M_MISCFSMNT, M_WAITOK);
	memset((caddr_t)amp, 0, sizeof(struct umap_mount));
d146 3
a148 1
	mp->mnt_data = (qaddr_t)amp;
a149 2
	if (amp->umapm_vfs->mnt_flag & MNT_LOCAL)
		mp->mnt_flag |= MNT_LOCAL;
d154 2
a155 1
	if (args.unentries > UMAPFILEENTRIES || args.gnentries > GMAPFILEENTRIES) {
a158 1

d162 2
a163 3
	    2*sizeof(u_long)*args.unentries);
	if (error) {
		vput(lowerrootvp);
a164 1
	}
d169 1
a169 1
		printf("   %ld maps to %ld\n", amp->info_umapdata[i][0],
d174 2
a175 3
	    2*sizeof(u_long)*args.gnentries);
	if (error) {
		vput(lowerrootvp);
a176 1
	}
d181 1
a181 1
		printf("\tgroup %ld maps to %ld\n", 
d186 1
d188 2
a189 2
	 * Make sure the mount point's sufficiently initialized
	 * that the node create call will work.
d191 1
a191 11
	vfs_getnewfsid(mp);
	amp->umapm_size = sizeof(struct umap_node);
	amp->umapm_tag = VT_UMAP;
	amp->umapm_bypass = umap_bypass;
	amp->umapm_alloc = layer_node_alloc;	/* the default alloc is fine */
	amp->umapm_vnodeop_p = umapfs_vnodeop_p;
	simple_lock_init(&amp->umapm_hashlock);
	amp->umapm_node_hashtbl = hashinit(NUMAPNODECACHE, M_CACHE,
	    M_WAITOK, &amp->umapm_node_hash);


d193 1
a193 1
	 * fix up umap node for root vnode.
d195 1
a195 1
	error = layer_node_create(mp, lowerrootvp, &vp);
d200 2
a201 2
		vput(lowerrootvp);
		free(amp, M_MISCFSMNT);
a203 4
	/*
	 * Unlock the node (either the lower or the alias)
	 */
	VOP_UNLOCK(vp, 0, p);
d209 7
a215 2
	vp->v_flag |= VROOT;
	amp->umapm_rootvp = vp;
d218 4
a221 4
	memset(mp->mnt_stat.f_mntonname + size, 0, MNAMELEN - size);
	(void) copyinstr(args.umap_target, mp->mnt_stat.f_mntfromname,
		MNAMELEN - 1, &size);
	memset(mp->mnt_stat.f_mntfromname + size, 0, MNAMELEN - size);
d230 15
d253 1
a253 1
	struct vnode *rootvp = MOUNTTOUMAPMOUNT(mp)->umapm_rootvp;
d261 1
a261 1
	if (mntflags & MNT_FORCE)
d263 1
d275 1
a275 1
	if (rootvp->v_usecount > 1)
d277 1
a277 1
	if ((error = vflush(mp, rootvp, flags)) != 0)
d281 1
a281 1
	vprint("alias root of lower", rootvp);
d286 1
a286 1
	vrele(rootvp);
d290 1
a290 1
	vgone(rootvp);
d294 1
a294 1
	free(mp->mnt_data, M_MISCFSMNT);
d299 114
a412 1
extern const struct vnodeopv_desc umapfs_vnodeop_opv_desc;
d414 4
a417 4
const struct vnodeopv_desc * const umapfs_vnodeopv_descs[] = {
	&umapfs_vnodeop_opv_desc,
	NULL,
};
d419 1
a419 1
struct vfsops umapfs_vfsops = {
d421 1
a421 1
	layerfs_start,
d423 10
a432 10
	layerfs_root,
	layerfs_quotactl,
	layerfs_statfs,
	layerfs_sync,
	layerfs_vget,
	layerfs_fhtovp,
	layerfs_vptofh,
	layerfs_init,
	layerfs_sysctl,
	layerfs_checkexp,
@


1.16
log
@use void * consistently in vfs_mount and sys_mount.  ok @@art
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.15 2000/02/07 04:57:17 assar Exp $	*/
d154 5
@


1.16.2.1
log
@MFS (from millert):
Add some missing lengths checks when passing data from userland to
kernel.  From based on NetBSD patches.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.16 2001/02/20 01:50:10 assar Exp $	*/
a153 5
	if (args.unentries < 0 || args.unentries > UMAPFILEENTRIES ||
	    args.gnentries < 0 || args.gnentries > GMAPFILEENTRIES) {
		vput(lowerrootvp);
		return (error);
	}
@


1.15
log
@update to use new checkexp vfs operation
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.14 1999/05/31 17:34:50 millert Exp $	*/
d59 1
a59 1
int	umapfs_mount __P((struct mount *, const char *, caddr_t,
d79 1
a79 1
	caddr_t data;
d112 1
a112 1
	error = copyin(data, (caddr_t)&args, sizeof(struct umap_args));
@


1.15.6.1
log
@MFC:
Add some missing lengths checks when passing data from userland to the
kernel. From NetBSD via millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.17 2001/09/16 00:42:44 millert Exp $	*/
a153 5
	if (args.unentries < 0 || args.unentries > UMAPFILEENTRIES ||
	    args.gnentries < 0 || args.gnentries > GMAPFILEENTRIES) {
		vput(lowerrootvp);
		return (error);
	}
@


1.15.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.16 2001/02/20 01:50:10 assar Exp $	*/
d59 1
a59 1
int	umapfs_mount __P((struct mount *, const char *, void *,
d79 1
a79 1
	void *data;
d112 1
a112 1
	error = copyin(data, &args, sizeof(struct umap_args));
@


1.15.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.15.2.1 2001/05/14 22:32:58 niklas Exp $	*/
a153 5
	if (args.unentries < 0 || args.unentries > UMAPFILEENTRIES ||
	    args.gnentries < 0 || args.gnentries > GMAPFILEENTRIES) {
		vput(lowerrootvp);
		return (error);
	}
@


1.15.2.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d59 12
a70 12
int	umapfs_mount(struct mount *, const char *, void *,
			  struct nameidata *, struct proc *);
int	umapfs_start(struct mount *, int, struct proc *);
int	umapfs_unmount(struct mount *, int, struct proc *);
int	umapfs_root(struct mount *, struct vnode **);
int	umapfs_quotactl(struct mount *, int, uid_t, caddr_t,
			     struct proc *);
int	umapfs_statfs(struct mount *, struct statfs *, struct proc *);
int	umapfs_sync(struct mount *, int, struct ucred *, struct proc *);
int	umapfs_vget(struct mount *, ino_t, struct vnode **);
int	umapfs_fhtovp(struct mount *, struct fid *, struct vnode **);
int	umapfs_vptofh(struct vnode *, struct fid *);
d414 4
a417 4
#define umapfs_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define umapfs_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)
@


1.15.2.4
log
@Sync the SMP branch with 3.3
@
text
@d144 1
a144 1
				M_MISCFSMNT, M_WAITOK);
d201 1
a201 1
		free(amp, M_MISCFSMNT);
d294 1
a294 1
	free(mp->mnt_data, M_MISCFSMNT);
@


1.15.2.5
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@d2 1
a2 1
/*	$NetBSD: umap_vfsops.c,v 1.35 2002/09/21 18:09:31 christos Exp $	*/
d40 1
a40 1
 *	@@(#)umap_vfsops.c	8.8 (Berkeley) 5/14/95
a47 1

d50 1
d52 1
a52 1
#include <sys/time.h>
a57 1
#include <miscfs/genfs/layer_extern.h>
d60 2
a61 1
	  struct nameidata *, struct proc *);
d63 8
d85 1
a90 17
#endif
#if 0
	if (mp->mnt_flag & MNT_GETARGS) {
		amp = MOUNTTOUMAPMOUNT(mp);
		if (amp == NULL)
			return EIO;
		args.la.target = NULL;
		vfs_showexport(mp, &args.la.export, &amp->umapm_export);
		args.nentries = amp->info_nentries;
		args.gnentries = amp->info_gnentries;
		return copyout(&args, data, sizeof(args));
	}
#endif

	/* only for root */
	if ((error = suser(p->p_ucred, &p->p_acflag)) != 0)
		return error;
a91 1
#ifdef UMAPFS_DIAGNOSTIC
d96 1
a96 1
	 * Get argument
d98 2
a99 3
	error = copyin(data, (caddr_t)&args, sizeof(struct umap_args));
	if (error)
		return (error);
d102 1
a102 1
	 * Update only does export updating.
d105 2
a106 6
		amp = MOUNTTOUMAPMOUNT(mp);
		if (args.umap_target == 0)
			return (vfs_export(mp, &amp->umapm_export,
					&args.umap_export));
		else
			return (EOPNOTSUPP);
d110 7
d119 2
a120 2
	NDINIT(ndp, LOOKUP, FOLLOW|LOCKLEAF,
		UIO_USERSPACE, args.umap_target, p);
d131 2
a144 1
	memset((caddr_t)amp, 0, sizeof(struct umap_mount));
d146 3
a148 1
	mp->mnt_data = (qaddr_t)amp;
a149 2
	if (amp->umapm_vfs->mnt_flag & MNT_LOCAL)
		mp->mnt_flag |= MNT_LOCAL;
d154 2
a155 1
	if (args.unentries > UMAPFILEENTRIES || args.gnentries > GMAPFILEENTRIES) {
a158 1

d162 2
a163 3
	    2*sizeof(u_long)*args.unentries);
	if (error) {
		vput(lowerrootvp);
a164 1
	}
d169 1
a169 1
		printf("   %ld maps to %ld\n", amp->info_umapdata[i][0],
d174 2
a175 3
	    2*sizeof(u_long)*args.gnentries);
	if (error) {
		vput(lowerrootvp);
a176 1
	}
d181 1
a181 1
		printf("\tgroup %ld maps to %ld\n", 
d186 1
d188 2
a189 2
	 * Make sure the mount point's sufficiently initialized
	 * that the node create call will work.
d191 1
a191 11
	vfs_getnewfsid(mp);
	amp->umapm_size = sizeof(struct umap_node);
	amp->umapm_tag = VT_UMAP;
	amp->umapm_bypass = umap_bypass;
	amp->umapm_alloc = layer_node_alloc;	/* the default alloc is fine */
	amp->umapm_vnodeop_p = umapfs_vnodeop_p;
	simple_lock_init(&amp->umapm_hashlock);
	amp->umapm_node_hashtbl = hashinit(NUMAPNODECACHE, M_CACHE,
	    M_WAITOK, &amp->umapm_node_hash);


d193 1
a193 1
	 * fix up umap node for root vnode.
d195 1
a195 1
	error = layer_node_create(mp, lowerrootvp, &vp);
d200 1
a200 1
		vput(lowerrootvp);
a203 4
	/*
	 * Unlock the node (either the lower or the alias)
	 */
	VOP_UNLOCK(vp, 0, p);
d209 7
a215 2
	vp->v_flag |= VROOT;
	amp->umapm_rootvp = vp;
d218 4
a221 4
	memset(mp->mnt_stat.f_mntonname + size, 0, MNAMELEN - size);
	(void) copyinstr(args.umap_target, mp->mnt_stat.f_mntfromname,
		MNAMELEN - 1, &size);
	memset(mp->mnt_stat.f_mntfromname + size, 0, MNAMELEN - size);
d230 15
d253 1
a253 1
	struct vnode *rootvp = MOUNTTOUMAPMOUNT(mp)->umapm_rootvp;
d261 1
a261 1
	if (mntflags & MNT_FORCE)
d263 1
d275 1
a275 1
	if (rootvp->v_usecount > 1)
d277 1
a277 1
	if ((error = vflush(mp, rootvp, flags)) != 0)
d281 1
a281 1
	vprint("alias root of lower", rootvp);
d286 1
a286 1
	vrele(rootvp);
d290 1
a290 1
	vgone(rootvp);
d299 114
a412 1
extern const struct vnodeopv_desc umapfs_vnodeop_opv_desc;
d414 4
a417 4
const struct vnodeopv_desc * const umapfs_vnodeopv_descs[] = {
	&umapfs_vnodeop_opv_desc,
	NULL,
};
d419 1
a419 1
struct vfsops umapfs_vfsops = {
d421 1
a421 1
	layerfs_start,
d423 10
a432 10
	layerfs_root,
	layerfs_quotactl,
	layerfs_statfs,
	layerfs_sync,
	layerfs_vget,
	layerfs_fhtovp,
	layerfs_vptofh,
	layerfs_init,
	layerfs_sysctl,
	layerfs_checkexp,
@


1.15.2.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.15.2.5 2003/05/16 00:29:43 niklas Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.15.2.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d93 1
a93 1
	if ((error = suser(p, 0)) != 0)
d304 1
a304 1
const struct vfsops umapfs_vfsops = {
@


1.15.2.8
log
@Merge with the trunk
@
text
@d103 1
a103 1
	error = copyin(data, &args, sizeof(struct umap_args));
d144 3
a146 2
	amp = malloc(sizeof(struct umap_mount), M_MISCFSMNT, M_WAITOK);
	memset(amp, 0, sizeof(struct umap_mount));
d148 1
a148 1
	mp->mnt_data = amp;
d163 1
a163 1
	error = copyin(args.umapdata, amp->info_umapdata, 
d177 1
a177 1
	error = copyin(args.gmapdata, amp->info_gmapdata, 
d273 1
a273 1
	if (rootvp->v_usecount > 1 && !(flags & FORCECLOSE))
@


1.14
log
@New struct statfs with mount options.  NOTE: this replaces statfs(2),
fstatfs(2), and getfsstat(2) so you will need to build a new kernel
before doing a "make build" or you will get "unimplemented syscall" errors.

The new struct statfs has the following featuires:
o Has a u_int32_t flags field--now softdep can have a real flag.

o Uses u_int32_t instead of longs (nicer on the alpha).  Note: the man
page used to lie about setting invalid/unused fields to -1.  SunOS does
that but our code never has.

o Gets rid of f_type completely.  It hasn't been used since NetBSD 0.9
and having it there but always 0 is confusing.  It is conceivable
that this may cause some old code to not compile but that is better
than silently breaking.

o Adds a mount_info union that contains the FSTYPE_args struct.  This
means that "mount" can now tell you all the options a filesystem was
mounted with.  This is especially nice for NFS.

Other changes:
o The linux statfs emulation didn't convert between BSD fs names
  and linux f_type numbers.  Now it does, since the BSD f_type
  number is useless to linux apps (and has been removed anyway)

o FreeBSD's struct statfs is different from our (both old and new)
and thus needs conversion.  Previously, the OpenBSD syscalls
were used without any real translation.

o mount(8) will now show extra info when invoked with no arguments.
However, to see *everything* you need to use the -v (verbose) flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.13 1999/03/18 08:34:18 art Exp $	*/
d69 1
a69 2
int	umapfs_fhtovp __P((struct mount *, struct fid *, struct mbuf *,
			   struct vnode **, int *, struct ucred **));
d393 1
a393 1
umapfs_fhtovp(mp, fidp, nam, vpp, exflagsp, credanonp)
a395 1
	struct mbuf *nam;
a396 2
	int *exflagsp;
	struct ucred**credanonp;
d398 1
a398 1
	return VFS_FHTOVP(MOUNTTOUMAPMOUNT(mp)->umapm_vfs, fidp, nam, vpp, exflagsp, credanonp);
d411 2
a412 1
 
d426 2
a427 1
	umapfs_sysctl
@


1.13
log
@Don't allow users to mount umapfs.
(only a problem when kern.usermount == 1)
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.12 1998/02/08 22:41:41 tholo Exp $	*/
a353 1
	sbp->f_type = mstat.f_type;
@


1.12
log
@Updates to match type changes in syscall tables
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.11 1997/11/06 05:58:48 csapuntz Exp $	*/
d95 6
@


1.11
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.10 1997/10/06 20:20:41 deraadt Exp $	*/
d59 1
a59 1
int	umapfs_mount __P((struct mount *, char *, caddr_t,
d79 1
a79 1
	char *path;
@


1.10
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.8 1997/09/11 05:26:15 millert Exp $	*/
d51 1
d185 1
a185 1
	VOP_UNLOCK(vp);
d205 1
a205 1
	getnewfsid(mp, makefstype(MOUNT_UMAP));
a245 1
	extern int doforce;
a251 3
		/* lofs can never be rootfs so don't check for it */
		if (!doforce)
			return (EINVAL);
d294 1
d309 1
a309 1
	VOP_LOCK(vp);
d362 1
a362 1
	strncpy(sbp->f_fstypename, mp->mnt_op->vfs_name, MFSNAMELEN);
d408 4
a412 1
	MOUNT_UMAP,
d424 1
@


1.9
log
@VFS Lite2 Changes
@
text
@a50 1
#include <sys/proc.h>
d184 1
a184 1
	VOP_UNLOCK(vp, 0, p);
d204 1
a204 1
	vfs_getnewfsid(mp);
d245 1
d252 3
a296 1
	struct proc *p = curproc;
d311 1
a311 1
	vn_lock(vp, LK_EXCLUSIVE | LK_RETRY, p);
d364 1
a364 1
	strncpy(sbp->f_fstypename, mp->mnt_vfc->vfc_name, MFSNAMELEN);
a409 4
#define umapfs_sysctl ((int (*) __P((int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *)))eopnotsupp)
 

d411 1
a422 1
	umapfs_sysctl
@


1.8
log
@Fix {KERNFS,NULLFS,UMAPFS,UNION}_DIAGNOSTIC kernel compilation errors.
From Alan Barrett <apb@@iafrica.com> with some changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.7 1996/06/02 16:35:48 niklas Exp $	*/
d51 1
d185 1
a185 1
	VOP_UNLOCK(vp);
d205 1
a205 1
	getnewfsid(mp, makefstype(MOUNT_UMAP));
a245 1
	extern int doforce;
a251 3
		/* lofs can never be rootfs so don't check for it */
		if (!doforce)
			return (EINVAL);
d294 1
d309 1
a309 1
	VOP_LOCK(vp);
d362 1
a362 1
	strncpy(sbp->f_fstypename, mp->mnt_op->vfs_name, MFSNAMELEN);
d408 4
a412 1
	MOUNT_UMAP,
d424 1
@


1.7
log
@move a definition of a var inside #ifdef UMAPFS_DIAGNOSTIC as
it is only used inside such regions
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.6 1996/03/30 01:40:48 mickey Exp $	*/
d92 1
a92 1
	printf("umapfs_mount(mp = %x)\n", mp);
d123 1
a123 1
	printf("vp = %x, check for VDIR...\n", lowerrootvp);
d134 1
a134 1
	printf("mp = %x\n", mp);
d157 1
a157 1
	for (i = 0; i < args.nentries; i++)
d248 1
a248 1
	printf("umapfs_unmount(mp = %x)\n", mp);
d300 1
a300 1
	printf("umapfs_root(mp = %x, vp = %x->%x)\n", mp,
d337 1
a337 1
	printf("umapfs_statfs(mp = %x, vp = %x->%x)\n", mp,
@


1.6
log
@Bug w/ rename fixed.
Strange thing still present w/ removes, the situation
seemd to be like extra VREF made somewhere, that is,
lower nfs does not remove, but rename file in '.nfs*' thing that
disapears at umap umount. this thing happend w/ nullfs too.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.5 1996/03/25 18:02:57 mickey Exp $	*/
d88 3
a90 1
	int	error,i;
a91 1
#ifdef UMAPFS_DIAGNOSTIC
@


1.5
log
@Fixed bug while copying args in mount that may cause a crash.
Types changes and so.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.4 1996/03/19 21:10:43 mickey Exp $	*/
d203 1
a203 1
	getnewfsid(mp, makefstype(MOUNT_LOFS));
d398 1
a398 1
	return (EOPNOTSUPP);
d406 1
a406 1
	return (EOPNOTSUPP);
@


1.4
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.3 1996/02/29 13:08:06 niklas Exp $	*/
d88 1
a88 1
	int error,i;
d147 1
a147 1
	amp->info_nentries = args.nentries;
d149 2
a150 2
	error = copyin(args.mapdata, (caddr_t)amp->info_mapdata, 
	    2*sizeof(u_long)*args.nentries);
d155 1
a155 1
	printf("umap_mount:nentries %d\n",args.nentries);
d157 2
a158 2
		printf("   %d maps to %d\n", amp->info_mapdata[i][0],
	 	    amp->info_mapdata[i][1]);
d162 1
a162 1
	    2*sizeof(u_long)*args.nentries);
@


1.3
log
@Reinstate $NetBSD$ headers (we want them for tracking purposes)
Sync with NetBSD 960217
@
text
@d1 1
a1 1
/*	$OpenBSD: umap_vfsops.c,v 1.2 1996/02/26 07:20:09 mickey Exp $	*/
d323 1
a323 2

	return (EOPNOTSUPP);
a373 1

d386 1
a386 2
	
	return (EOPNOTSUPP);
@


1.2
log
@Bug fixes (such as missing arguments).
Still seemed to have at least one bug. Strange panic happened
when unmounting from NFS tree.
@
text
@d1 2
a2 1
/*	$OpenBSD: umap_vfsops.c,v 1.9 1996/02/09 22:41:05 christos Exp $	*/
d105 2
a106 1
	if (error = copyin(data, (caddr_t)&args, sizeof(struct umap_args)))
d114 1
a114 1
	if (error = namei(ndp))
d269 1
a269 1
	if (error = vflush(mp, umapm_rootvp, flags))
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: umap_vfsops.c,v 1.8 1995/06/18 14:47:44 cgd Exp $	*/
d57 14
d87 1
a87 1
	int error;
d152 1
a152 1
#ifdef UMAP_DIAGNOSTIC
d164 1
a164 1
#ifdef UMAP_DIAGNOSTIC
a227 1
	/* return (VFS_START(MOUNTTOUMAPMOUNT(mp)->umapm_vfs, flags, p)); */
d265 1
a265 1
	if (umapm_rootvp->v_usecount > 1)
d322 1
a322 1
	return (VFS_QUOTACTL(MOUNTTOUMAPMOUNT(mp)->umapm_vfs, cmd, uid, arg, p));
d387 1
a387 1
	return (VFS_VGET(MOUNTTOUMAPMOUNT(mp)->umapm_vfs, ino, vpp));
a398 1

a406 1

a408 2

int umapfs_init __P((void));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
