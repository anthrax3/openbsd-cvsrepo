head	1.14;
access;
symbols
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.20
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.18
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.16
	OPENBSD_2_8:1.8.0.14
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.12
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.10
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.8
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2005.05.26.00.38.50;	author pedro;	state dead;
branches;
next	1.13;

1.13
date	2003.08.14.07.46.40;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.28.11;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.12.23.39.14;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2003.05.12.21.02.10;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.27.08;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.11.06.05.58.46;	author csapuntz;	state Exp;
branches
	1.8.10.1
	1.8.20.1;
next	1.7;

1.7
date	97.10.06.20.20.40;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.10.06.15.19.14;	author csapuntz;	state Exp;
branches;
next	1.5;

1.5
date	96.03.25.18.02.55;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.03.02.00.08.02;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.02.29.13.08.04;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.26.07.20.03;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.03;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.03;	author deraadt;	state Exp;
branches;
next	;

1.8.10.1
date	2002.03.28.15.02.01;	author niklas;	state Exp;
branches;
next	1.8.10.2;

1.8.10.2
date	2003.05.16.00.29.43;	author niklas;	state Exp;
branches;
next	1.8.10.3;

1.8.10.3
date	2003.06.07.11.06.06;	author ho;	state Exp;
branches;
next	1.8.10.4;

1.8.10.4
date	2004.02.19.10.57.20;	author niklas;	state Exp;
branches;
next	;

1.8.20.1
date	2002.06.11.03.30.21;	author art;	state Exp;
branches;
next	1.8.20.2;

1.8.20.2
date	2003.05.19.22.36.12;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.14
log
@bye bye, rest in attic ad infinitum, amen
@
text
@/*	$OpenBSD: umap.h,v 1.13 2003/08/14 07:46:40 mickey Exp $ */
/*	$NetBSD: umap.h,v 1.9 1999/07/08 01:19:06 wrstuden Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software donated to Berkeley by
 * the UCLA Ficus project.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	from: @@(#)null_vnops.c       1.5 (Berkeley) 7/10/92
 *	@@(#)umap.h	8.4 (Berkeley) 8/20/94
 */

#include <miscfs/genfs/layer.h>

#define UMAPFILEENTRIES 64
#define GMAPFILEENTRIES 16
#define NOBODY 32767
#define NULLGROUP 65534

struct umap_args {
	struct layer_args la;		/* generic layerfs args. Includes
					 * target and export info */
#define	umap_target	la.target
#define	umap_export	la.export
	int 		unentries;       /* # of entries in user map array */
	int 		gnentries;	/* # of entries in group map array */
	u_long 		(*umapdata)[2];	/* pointer to array of user mappings */
	u_long 		(*gmapdata)[2];	/* pointer to array of group mappings */
};

#ifdef _KERNEL

struct umap_mount {
	struct layer_mount lm;		
	int             info_unentries;  /* number of uid mappings */
	int		info_gnentries;	/* number of gid mappings */
	u_long		info_umapdata[UMAPFILEENTRIES][2]; /* mapping data for 
	    user mapping in ficus */
	u_long		info_gmapdata[GMAPFILEENTRIES][2]; /*mapping data for 
	    group mapping in ficus */
};
#define	umapm_vfs		lm.layerm_vfs
#define	umapm_rootvp		lm.layerm_rootvp
#define	umapm_export		lm.layerm_export
#define	umapm_flags		lm.layerm_flags
#define	umapm_size		lm.layerm_size
#define	umapm_tag		lm.layerm_tag
#define	umapm_bypass		lm.layerm_bypass
#define	umapm_alloc		lm.layerm_alloc
#define	umapm_vnodeop_p		lm.layerm_vnodeop_p
#define	umapm_node_hashtbl	lm.layerm_node_hashtbl
#define	umapm_node_hash		lm.layerm_node_hash
#define	umapm_hashlock		lm.layerm_hashlock

/*
 * A cache of vnode references
 */
struct umap_node {
	struct	layer_node	ln;
};

u_long umap_reverse_findid(u_long id, u_long map[][2], int nentries);
void umap_mapids(struct mount *v_mount, struct ucred *credp);

#define	umap_hash	ln.layer_hash
#define	umap_lowervp	ln.layer_lowervp
#define	umap_vnode	ln.layer_vnode
#define	umap_flags	ln.layer_flags

#define	MOUNTTOUMAPMOUNT(mp) ((struct umap_mount *)((mp)->mnt_data))
#define	VTOUMAP(vp) ((struct umap_node *)(vp)->v_data)
#define UMAPTOV(xp) ((xp)->umap_vnode)
#ifdef UMAPFS_DIAGNOSTIC
#define	UMAPVPTOLOWERVP(vp) layer_checkvp((vp), __FILE__, __LINE__)
#else
#define	UMAPVPTOLOWERVP(vp) (VTOUMAP(vp)->umap_lowervp)
#endif

extern int (**umapfs_vnodeop_p)(void *);
extern const struct vfsops umapfs_vfsops;

int     umap_bypass(void *);

#define NUMAPNODECACHE	16

#endif /* _KERNEL */
@


1.13
log
@constify vfsops; tedu@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: umap.h,v 1.12 2003/06/02 23:28:11 millert Exp $ */
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap.h,v 1.11 2003/05/12 23:39:14 tedu Exp $ */
d106 1
a106 1
extern struct vfsops umapfs_vfsops;
@


1.11
log
@mapdata -> umapdata like it was before
@
text
@d1 1
a1 1
/*	$OpenBSD: umap.h,v 1.10 2003/05/12 21:02:10 tedu Exp $ */
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@umapfs uses the new layer stuff now too.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d57 1
a57 1
	u_long 		(*mapdata)[2];	/* pointer to array of user mappings */
@


1.9
log
@First round of __P removal in sys
@
text
@d1 2
a2 2
/*	$OpenBSD: umap.h,v 1.8 1997/11/06 05:58:46 csapuntz Exp $	*/
/*	$NetBSD: umap.h,v 1.6 1996/02/09 22:41:00 christos Exp $	*/
d40 1
a40 1
 *	@@(#)umap.h	8.3 (Berkeley) 1/21/94
d43 2
a49 3
typedef	u_int32_t	id_t;
typedef	id_t		(*id_map_t)[2];

d51 8
a58 5
	char	*target;	/* Target of loopback  */
	int 	unentries;	/* # of entries in user map array */
	int 	gnentries;	/* # of entries in group map array */
	id_map_t umapdata;	/* pointer to array of user mappings */
	id_map_t gmapdata;	/* pointer to array of group mappings */
d61 2
d64 2
a65 3
	struct mount	*umapm_vfs;
	struct vnode	*umapm_rootvp;	/* Reference to root umap_node */
	int		info_unentries;	/* number of uid mappings */
d67 1
a67 1
	id_t		info_umapdata[UMAPFILEENTRIES][2]; /* mapping data for 
d69 1
a69 1
	id_t		info_gmapdata[GMAPFILEENTRIES][2]; /*mapping data for 
d72 12
a84 1
#ifdef _KERNEL
d89 1
a89 3
	LIST_ENTRY(umap_node) umap_hash;	/* Hash list */
	struct vnode	*umap_lowervp;	/* Aliased vnode - VREFed once */
	struct vnode	*umap_vnode;	/* Back pointer to vnode/umap_node */
d92 7
a98 3
extern int	umap_node_create(struct mount *mp, struct vnode *target, struct vnode **vpp);
extern id_t	umap_reverse_findid(id_t id, id_map_t, int nentries);
extern void	umap_mapids(struct mount *v_mount, struct ucred *credp);
d104 1
a104 2
extern struct vnode *umap_checkvp(struct vnode *vp, char *fil, int lno);
#define	UMAPVPTOLOWERVP(vp) umap_checkvp((vp), __FILE__, __LINE__)
d109 4
a112 2
extern int (**umap_vnodeop_p)(void *);
extern struct vfsops umap_vfsops;
d114 1
a114 1
int umapfs_init(struct vfsconf *);
@


1.8
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap.h,v 1.7 1997/10/06 20:20:40 deraadt Exp $	*/
d80 3
a82 3
extern int	umap_node_create __P((struct mount *mp, struct vnode *target, struct vnode **vpp));
extern id_t	umap_reverse_findid __P((id_t id, id_map_t, int nentries));
extern void	umap_mapids __P((struct mount *v_mount, struct ucred *credp));
d88 1
a88 1
extern struct vnode *umap_checkvp __P((struct vnode *vp, char *fil, int lno));
d94 1
a94 1
extern int (**umap_vnodeop_p) __P((void *));
d97 1
a97 1
int umapfs_init __P((struct vfsconf *));
@


1.8.20.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: umap.h,v 1.8 1997/11/06 05:58:46 csapuntz Exp $	*/
d80 3
a82 3
extern int	umap_node_create(struct mount *mp, struct vnode *target, struct vnode **vpp);
extern id_t	umap_reverse_findid(id_t id, id_map_t, int nentries);
extern void	umap_mapids(struct mount *v_mount, struct ucred *credp);
d88 1
a88 1
extern struct vnode *umap_checkvp(struct vnode *vp, char *fil, int lno);
d94 1
a94 1
extern int (**umap_vnodeop_p)(void *);
d97 1
a97 1
int umapfs_init(struct vfsconf *);
@


1.8.20.2
log
@sync
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: umap.h,v 1.9 1999/07/08 01:19:06 wrstuden Exp $	*/
d40 1
a40 1
 *	@@(#)umap.h	8.4 (Berkeley) 8/20/94
a42 2
#include <miscfs/genfs/layer.h>

d48 3
d52 5
a56 8
	struct layer_args la;		/* generic layerfs args. Includes
					 * target and export info */
#define	umap_target	la.target
#define	umap_export	la.export
	int 		unentries;       /* # of entries in user map array */
	int 		gnentries;	/* # of entries in group map array */
	u_long 		(*umapdata)[2];	/* pointer to array of user mappings */
	u_long 		(*gmapdata)[2];	/* pointer to array of group mappings */
a58 2
#ifdef _KERNEL

d60 3
a62 2
	struct layer_mount lm;		
	int             info_unentries;  /* number of uid mappings */
d64 1
a64 1
	u_long		info_umapdata[UMAPFILEENTRIES][2]; /* mapping data for 
d66 1
a66 1
	u_long		info_gmapdata[GMAPFILEENTRIES][2]; /*mapping data for 
a68 12
#define	umapm_vfs		lm.layerm_vfs
#define	umapm_rootvp		lm.layerm_rootvp
#define	umapm_export		lm.layerm_export
#define	umapm_flags		lm.layerm_flags
#define	umapm_size		lm.layerm_size
#define	umapm_tag		lm.layerm_tag
#define	umapm_bypass		lm.layerm_bypass
#define	umapm_alloc		lm.layerm_alloc
#define	umapm_vnodeop_p		lm.layerm_vnodeop_p
#define	umapm_node_hashtbl	lm.layerm_node_hashtbl
#define	umapm_node_hash		lm.layerm_node_hash
#define	umapm_hashlock		lm.layerm_hashlock
d70 1
d75 3
a77 1
	struct	layer_node	ln;
d80 3
a82 7
u_long umap_reverse_findid(u_long id, u_long map[][2], int nentries);
void umap_mapids(struct mount *v_mount, struct ucred *credp);

#define	umap_hash	ln.layer_hash
#define	umap_lowervp	ln.layer_lowervp
#define	umap_vnode	ln.layer_vnode
#define	umap_flags	ln.layer_flags
d88 2
a89 1
#define	UMAPVPTOLOWERVP(vp) layer_checkvp((vp), __FILE__, __LINE__)
d94 2
a95 4
extern int (**umapfs_vnodeop_p)(void *);
extern struct vfsops umapfs_vfsops;

int     umap_bypass(void *);
d97 1
a97 1
#define NUMAPNODECACHE	16
@


1.8.10.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d80 3
a82 3
extern int	umap_node_create(struct mount *mp, struct vnode *target, struct vnode **vpp);
extern id_t	umap_reverse_findid(id_t id, id_map_t, int nentries);
extern void	umap_mapids(struct mount *v_mount, struct ucred *credp);
d88 1
a88 1
extern struct vnode *umap_checkvp(struct vnode *vp, char *fil, int lno);
d94 1
a94 1
extern int (**umap_vnodeop_p)(void *);
d97 1
a97 1
int umapfs_init(struct vfsconf *);
@


1.8.10.2
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: umap.h,v 1.9 1999/07/08 01:19:06 wrstuden Exp $	*/
d40 1
a40 1
 *	@@(#)umap.h	8.4 (Berkeley) 8/20/94
a42 2
#include <miscfs/genfs/layer.h>

d48 3
d52 5
a56 8
	struct layer_args la;		/* generic layerfs args. Includes
					 * target and export info */
#define	umap_target	la.target
#define	umap_export	la.export
	int 		unentries;       /* # of entries in user map array */
	int 		gnentries;	/* # of entries in group map array */
	u_long 		(*umapdata)[2];	/* pointer to array of user mappings */
	u_long 		(*gmapdata)[2];	/* pointer to array of group mappings */
a58 2
#ifdef _KERNEL

d60 3
a62 2
	struct layer_mount lm;		
	int             info_unentries;  /* number of uid mappings */
d64 1
a64 1
	u_long		info_umapdata[UMAPFILEENTRIES][2]; /* mapping data for 
d66 1
a66 1
	u_long		info_gmapdata[GMAPFILEENTRIES][2]; /*mapping data for 
a68 12
#define	umapm_vfs		lm.layerm_vfs
#define	umapm_rootvp		lm.layerm_rootvp
#define	umapm_export		lm.layerm_export
#define	umapm_flags		lm.layerm_flags
#define	umapm_size		lm.layerm_size
#define	umapm_tag		lm.layerm_tag
#define	umapm_bypass		lm.layerm_bypass
#define	umapm_alloc		lm.layerm_alloc
#define	umapm_vnodeop_p		lm.layerm_vnodeop_p
#define	umapm_node_hashtbl	lm.layerm_node_hashtbl
#define	umapm_node_hash		lm.layerm_node_hash
#define	umapm_hashlock		lm.layerm_hashlock
d70 1
d75 3
a77 1
	struct	layer_node	ln;
d80 3
a82 7
u_long umap_reverse_findid(u_long id, u_long map[][2], int nentries);
void umap_mapids(struct mount *v_mount, struct ucred *credp);

#define	umap_hash	ln.layer_hash
#define	umap_lowervp	ln.layer_lowervp
#define	umap_vnode	ln.layer_vnode
#define	umap_flags	ln.layer_flags
d88 2
a89 1
#define	UMAPVPTOLOWERVP(vp) layer_checkvp((vp), __FILE__, __LINE__)
d94 2
a95 4
extern int (**umapfs_vnodeop_p)(void *);
extern struct vfsops umapfs_vfsops;

int     umap_bypass(void *);
d97 1
a97 1
#define NUMAPNODECACHE	16
@


1.8.10.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: umap.h,v 1.8.10.2 2003/05/16 00:29:43 niklas Exp $ */
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.8.10.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d106 1
a106 1
extern const struct vfsops umapfs_vfsops;
@


1.7
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: umap.h,v 1.5 1996/03/25 18:02:55 mickey Exp $	*/
d97 1
a97 1
void umapfs_init __P((void));
@


1.6
log
@VFS Lite2 Changes
@
text
@d97 1
a97 1
int umapfs_init __P((struct vfsconf *));
@


1.5
log
@Fixed bug while copying args in mount that may cause a crash.
Types changes and so.
@
text
@d1 1
a1 1
/*	$OpenBSD: umap.h,v 1.4 1996/03/02 00:08:02 niklas Exp $	*/
d97 1
a97 1
void umapfs_init __P((void));
@


1.4
log
@Fixup umapfs_init prototype both on my part
@
text
@d1 1
a1 1
/*	$OpenBSD: umap.h,v 1.3 1996/02/29 13:08:04 niklas Exp $	*/
d43 1
a43 1
#define MAPFILEENTRIES 64
d48 3
d52 5
a56 5
	char		*target;	/* Target of loopback  */
	int 		nentries;       /* # of entries in user map array */
	int 		gnentries;	/* # of entries in group map array */
	u_long 		(*mapdata)[2];	/* pointer to array of user mappings */
	u_long 		(*gmapdata)[2];	/* pointer to array of group mappings */
d62 1
a62 1
	int             info_nentries;  /* number of uid mappings */
d64 1
a64 1
	u_long		info_mapdata[MAPFILEENTRIES][2]; /* mapping data for 
d66 1
a66 1
	u_long		info_gmapdata[GMAPFILEENTRIES][2]; /*mapping data for 
d80 3
a82 3
extern int umap_node_create __P((struct mount *mp, struct vnode *target, struct vnode **vpp));
extern u_long umap_reverse_findid __P((u_long id, u_long map[][2], int nentries));
extern void umap_mapids __P((struct mount *v_mount, struct ucred *credp));
@


1.3
log
@Reinstate $NetBSD$ headers (we want them for tracking purposes)
Sync with NetBSD 960217
@
text
@d1 1
a1 1
/*	$OpenBSD: umap.h,v 1.2 1996/02/26 07:20:03 mickey Exp $	*/
d94 1
a94 1
int umapfs_init __P((void));
@


1.2
log
@Bug fixes (such as missing arguments).
Still seemed to have at least one bug. Strange panic happened
when unmounting from NFS tree.
@
text
@d1 2
a2 1
/*	$OpenBSD: umap.h,v 1.6 1996/02/09 22:41:00 christos Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: umap.h,v 1.5 1995/04/15 01:57:35 cgd Exp $	*/
d90 1
a90 1
extern int (**umap_vnodeop_p)();
d92 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
