head	1.30;
access;
symbols
	OPENBSD_4_9:1.29.0.2
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.26.0.2
	OPENBSD_4_8_BASE:1.26
	OPENBSD_4_7:1.25.0.6
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.8
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.4
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.2
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.21.0.2
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.19.0.2
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.18.0.2
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.17.0.10
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.8
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.6
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.4
	OPENBSD_3_6_BASE:1.17
	SMP_SYNC_A:1.17
	SMP_SYNC_B:1.17
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	UBC_SYNC_A:1.15
	OPENBSD_3_3:1.15.0.2
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.13
	UBC:1.11.0.2
	UBC_BASE:1.11
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.7.0.12
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.10
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.8
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.6
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.30
date	2011.07.04.20.35.35;	author deraadt;	state dead;
branches;
next	1.29;

1.29
date	2010.12.21.20.14.43;	author thib;	state Exp;
branches;
next	1.28;

1.28
date	2010.09.10.16.34.08;	author thib;	state Exp;
branches;
next	1.27;

1.27
date	2010.09.06.23.44.10;	author thib;	state Exp;
branches;
next	1.26;

1.26
date	2010.07.17.19.24.58;	author guenther;	state Exp;
branches;
next	1.25;

1.25
date	2008.05.03.14.41.29;	author thib;	state Exp;
branches;
next	1.24;

1.24
date	2008.04.14.10.15.50;	author thib;	state Exp;
branches;
next	1.23;

1.23
date	2008.04.12.13.32.03;	author thib;	state Exp;
branches;
next	1.22;

1.22
date	2008.04.08.14.46.45;	author thib;	state Exp;
branches;
next	1.21;

1.21
date	2007.12.27.13.59.12;	author thib;	state Exp;
branches;
next	1.20;

1.20
date	2007.06.02.00.45.21;	author thib;	state Exp;
branches;
next	1.19;

1.19
date	2007.01.16.17.52.18;	author thib;	state Exp;
branches;
next	1.18;

1.18
date	2006.06.02.20.25.09;	author pedro;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.23.16.51.13;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.23.28.11;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.12.14.41.07;	author jason;	state Exp;
branches;
next	1.14;

1.14
date	2002.11.08.04.34.17;	author art;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.14.01.27.08;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.12.19.08.58.06;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.04.22.44.32;	author art;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.06.23.02.14.26;	author csapuntz;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.01.20.54.35;	author provos;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.23.14.42.39;	author csapuntz;	state Exp;
branches;
next	1.7;

1.7
date	98.08.06.19.34.48;	author csapuntz;	state Exp;
branches
	1.7.8.1;
next	1.6;

1.6
date	97.11.06.05.58.45;	author csapuntz;	state Exp;
branches;
next	1.5;

1.5
date	97.10.06.20.20.39;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.10.06.15.19.13;	author csapuntz;	state Exp;
branches;
next	1.3;

1.3
date	97.01.04.17.10.05;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.02.27.08.05.17;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.02;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.02;	author deraadt;	state Exp;
branches;
next	;

1.7.8.1
date	2001.05.14.22.32.56;	author niklas;	state Exp;
branches;
next	1.7.8.2;

1.7.8.2
date	2001.07.04.10.49.19;	author niklas;	state Exp;
branches;
next	1.7.8.3;

1.7.8.3
date	2002.03.28.15.02.01;	author niklas;	state Exp;
branches;
next	1.7.8.4;

1.7.8.4
date	2003.03.28.00.00.20;	author niklas;	state Exp;
branches;
next	1.7.8.5;

1.7.8.5
date	2003.06.07.11.06.06;	author ho;	state Exp;
branches;
next	1.7.8.6;

1.7.8.6
date	2004.02.19.10.57.20;	author niklas;	state Exp;
branches;
next	;

1.11.2.1
date	2002.06.11.03.30.21;	author art;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2002.11.04.18.02.31;	author art;	state Exp;
branches;
next	1.11.2.3;

1.11.2.3
date	2003.05.19.22.36.12;	author tedu;	state Exp;
branches;
next	1.11.2.4;

1.11.2.4
date	2003.05.20.04.05.39;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.30
log
@move the specfs code to a place people can see it; ok guenther thib krw
@
text
@/*	$OpenBSD: specdev.h,v 1.29 2010/12/21 20:14:43 thib Exp $	*/
/*	$NetBSD: specdev.h,v 1.12 1996/02/13 13:13:01 mycroft Exp $	*/

/*
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)specdev.h	8.3 (Berkeley) 8/10/94
 */

/*
 * This structure defines the information maintained about
 * special devices. It is allocated in checkalias and freed
 * in vgone.
 */
struct specinfo {
	struct	vnode **si_hashchain;
	struct	vnode *si_specnext;
	struct  mount *si_mountpoint;
	dev_t	si_rdev;
	struct	lockf *si_lockf;
	daddr64_t si_lastr;
	union {
		struct vnode *ci_parent; /* pointer back to parent device */
		u_int8_t ci_bitmap[8]; /* bitmap of devices cloned off us */
	} si_ci;
};

struct cloneinfo {
	struct vnode *ci_vp; /* cloned vnode */
	void *ci_data; /* original vnode's v_data */
};

/*
 * Exported shorthand
 */
#define v_rdev v_specinfo->si_rdev
#define v_hashchain v_specinfo->si_hashchain
#define v_specnext v_specinfo->si_specnext
#define v_specmountpoint v_specinfo->si_mountpoint
#define v_speclockf v_specinfo->si_lockf
#define v_specparent v_specinfo->si_ci.ci_parent
#define v_specbitmap v_specinfo->si_ci.ci_bitmap

/*
 * Special device management
 */
#define	SPECHSZ	64
#if	((SPECHSZ&(SPECHSZ-1)) == 0)
#define	SPECHASH(rdev)	(((rdev>>5)+(rdev))&(SPECHSZ-1))
#else
#define	SPECHASH(rdev)	(((unsigned)((rdev>>5)+(rdev)))%SPECHSZ)
#endif

extern struct vnode *speclisth[SPECHSZ];

#ifdef	_KERNEL
/*
 * Prototypes for special file operations on vnodes.
 */
extern struct vops spec_vops;
struct	nameidata;
struct	componentname;
struct	ucred;
struct	flock;
struct	buf;
struct	uio;

int	spec_badop(void *);
int	spec_getattr(void *);
int	spec_setattr(void *);
int	spec_access(void *);
int	spec_open(void *);
int	spec_close(void *);
int	spec_read(void *);
int	spec_write(void *);
int	spec_ioctl(void *);
int	spec_poll(void *);
int	spec_kqfilter(void *);
int	spec_fsync(void *);
int	spec_inactive(void *);
int	spec_strategy(void *);
int	spec_print(void *);
int	spec_pathconf(void *);
int	spec_advlock(void *);

/* spec_subr.c */
int	spec_open_clone(struct vop_open_args *);
int	spec_close_clone(struct vop_close_args *);
#endif	/* _KERNEL */
@


1.29
log
@Bring back the "End the VOP experiment." diff, naddy's issues where
unrelated, and his alpha is much happier now.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.28 2010/09/10 16:34:08 thib Exp $	*/
@


1.28
log
@Backout the VOP diff until the issues naddy was seeing on alpha (gcc3)
have been resolved.
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.27 2010/09/06 23:44:10 thib Exp $	*/
d85 1
a85 1
extern	int (**spec_vnodeop_p)(void *);
a109 2

int	spec_vnoperate(void *);
@


1.27
log
@End the VOP experiment. Instead of the ridicolusly complicated operation
vector setup that has questionable features (that have, as far as I can
tell never been used in practice, atleast not in OpenBSD), remove all
the gunk and favor a simple struct full of function pointers that get
set directly by each of the filesystems.

Removes gobs of ugly code and makes things simpler by a magnitude.

The only downside of this is that we loose the vnoperate feature so
the spec/fifo operations of the filesystems need to be kept in sync
with specfs and fifofs, this is no big deal as the API it self is pretty
static.

Many thanks to armani@@ who pulled an earlier version of this diff to
current after c2k10 and Gabriel Kihlman on tech@@ for testing.

Liked by many. "come on, find your balls" deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.26 2010/07/17 19:24:58 guenther Exp $	*/
d85 1
a85 1
extern struct vops spec_vops;
d110 2
@


1.26
log
@Wrap kernel function declarations in #ifdef _KERNEL to eliminate warnings
when the header is used by userspace.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.25 2008/05/03 14:41:29 thib Exp $	*/
d85 1
a85 1
extern	int (**spec_vnodeop_p)(void *);
a109 2

int	spec_vnoperate(void *);
@


1.25
log
@Introduce vop_generic_bmap(); use it where applicable.
one thing of note, fifofs changes in that its bmap now
sets the runp too 0, but that was an oversight in the
old code.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.24 2008/04/14 10:15:50 thib Exp $	*/
d81 1
d116 1
@


1.24
log
@garbage collect the now unused spec_ebadf();

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.23 2008/04/12 13:32:03 thib Exp $	*/
a104 1
int	spec_bmap(void *);
@


1.23
log
@remove useless defines for the vnode operations, and instead
init the op array functions with whatever the define was set
too.

ok dlg@@,blambert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.22 2008/04/08 14:46:45 thib Exp $	*/
a92 1
int	spec_ebadf(void *);
@


1.22
log
@bring cloning up too date; Munge it so it will work with atleast
oga@@'s upcoming DRM changes and too some degree ratchov@@'s audio
work. It still works for bpf's though.

Parts from ratchov@@; fstat(1) parts from Pedro Martelletto;
tested by many, ok'ed by a few;
"get going with cloning" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.21 2007/12/27 13:59:12 thib Exp $	*/
a96 2
#define	spec_create	spec_badop
#define	spec_mknod	spec_badop
d105 1
a105 14
#define	spec_remove	spec_badop
#define	spec_link	spec_badop
#define	spec_rename	spec_badop
#define	spec_mkdir	spec_badop
#define	spec_rmdir	spec_badop
#define	spec_symlink	spec_badop
#define	spec_readdir	spec_badop
#define	spec_readlink	spec_badop
#define	spec_abortop	spec_badop
int spec_inactive(void *);
#define	spec_reclaim	nullop
#define spec_lock       vop_generic_lock
#define spec_unlock     vop_generic_unlock
#define spec_islocked   vop_generic_islocked
a110 3
#define	spec_reallocblks spec_badop
#define	spec_bwrite	vop_generic_bwrite
#define spec_revoke     vop_generic_revoke
@


1.21
log
@fifofs, deadfs and specfs all have the same "trivial lookup routine that
always fails". Introduce vop_generic_lookup(), which is a trivial lookup
routine that always fails and use that instead, zap the redundant copies.

ok toby@@, tedu@@, art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.20 2007/06/02 00:45:21 thib Exp $	*/
d94 3
a96 1

a100 3
#define	spec_access	spec_ebadf
#define	spec_getattr	spec_ebadf
#define	spec_setattr	spec_ebadf
@


1.20
log
@daddr_t -> daddr64_t for specfs. convert some variables
to proper types along the way (ints), fixes a subtle bug
wich otto@@ pointed me at.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.19 2007/01/16 17:52:18 thib Exp $	*/
a94 1
int	spec_lookup(void *);
@


1.19
log
@Retire VOP_LEASE(); It was a bit for NQNFS and has
effectively been a no-op for quite some time now,
without promise for future usage.

ok pedro@@
Testing by krw@@ (earlier diff)
and Johan Mson Lindman (tybollt@@solace.miun.se)
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.18 2006/06/02 20:25:09 pedro Exp $	*/
d46 1
a46 1
	daddr_t si_lastr;
@


1.18
log
@Add a clonable devices implementation. Hacked along with thib@@, input
from krw@@ and toby@@, subliminal prodding from dlg@@, okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.17 2003/09/23 16:51:13 millert Exp $	*/
a104 1
#define	spec_lease_check nullop
@


1.17
log
@Replace select backends with poll backends.  selscan() and pollscan()
now call the poll backend.  With this change we implement greater
poll(2) functionality instead of emulating it via the select backend.
Adapted from NetBSD and including some changes from FreeBSD.
Tested by many, deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.16 2003/06/02 23:28:11 millert Exp $	*/
d47 4
d52 6
d66 2
d134 4
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.15 2003/02/12 14:41:07 jason Exp $	*/
d95 1
a95 1
int	spec_select(void *);
@


1.15
log
@Remove commons; inspired by netbsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.14 2002/11/08 04:34:17 art Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.14
log
@Implement simple vnodeop inheritance for specfs and fifofs.

The inheritace is implemented by setting the default vnodeop to a
bypass op that repeats the operation on the spec/fifo vnodeop vector.
The overhead of one extra indirect function call is worth the cleanup
and improved correctness.

This actually solves a few bugs where some vnode ops were missing from
some vectors (like kqfilter or revoke). (and even more on the ubc
branch).

Inspired by the same thing done in FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.13 2002/03/14 01:27:08 millert Exp $	*/
d71 1
a71 1
struct vnode *speclisth[SPECHSZ];
@


1.13
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.12 2001/12/19 08:58:06 art Exp $	*/
d124 2
@


1.12
log
@UBC was a disaster. It worked very good when it worked, but on some
machines or some configurations or in some phase of the moon (we actually
don't know when or why) files disappeared. Since we've not been able to
track down the problem in two weeks intense debugging and we need -current
to be stable, back out everything to a state it had before UBC.

We apologise for the inconvenience.
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.10 2001/06/23 02:14:26 csapuntz Exp $	*/
d76 1
a76 1
extern	int (**spec_vnodeop_p) __P((void *));
d84 2
a85 2
int	spec_badop	__P((void *));
int	spec_ebadf	__P((void *));
d87 1
a87 1
int	spec_lookup	__P((void *));
d90 2
a91 2
int	spec_open	__P((void *));
int	spec_close	__P((void *));
d95 2
a96 2
int	spec_read	__P((void *));
int	spec_write	__P((void *));
d98 4
a101 4
int	spec_ioctl	__P((void *));
int	spec_select	__P((void *));
int	spec_kqfilter	__P((void *));
int	spec_fsync	__P((void *));
d111 1
a111 1
int spec_inactive __P((void *));
d116 5
a120 5
int	spec_bmap	__P((void *));
int	spec_strategy	__P((void *));
int	spec_print	__P((void *));
int	spec_pathconf	__P((void *));
int	spec_advlock	__P((void *));
@


1.11
log
@Readd VOP_MMAP, will be used soon. Right now it's just a question to
the filesystem if we're allowed to mmap the file.
@
text
@a123 1
#define	spec_mmap	spec_badop
@


1.11.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.11 2001/12/04 22:44:32 art Exp $	*/
d76 1
a76 1
extern	int (**spec_vnodeop_p)(void *);
d84 2
a85 2
int	spec_badop(void *);
int	spec_ebadf(void *);
d87 1
a87 1
int	spec_lookup(void *);
d90 2
a91 2
int	spec_open(void *);
int	spec_close(void *);
d95 2
a96 2
int	spec_read(void *);
int	spec_write(void *);
d98 4
a101 4
int	spec_ioctl(void *);
int	spec_select(void *);
int	spec_kqfilter(void *);
int	spec_fsync(void *);
d111 1
a111 1
int spec_inactive(void *);
d116 5
a120 5
int	spec_bmap(void *);
int	spec_strategy(void *);
int	spec_print(void *);
int	spec_pathconf(void *);
int	spec_advlock(void *);
@


1.11.2.2
log
@Huge sync to NetBSD plus lots of bugfixes.
 - uvm is as in netbsd-current minus uvm_map forward merge.
 - various locking bugfixes in nfs.
 - make sure that all specops and fifoops are correct in all vnodeop vectors.
 - make the filesystem code more like filsystem code and less like vm code.
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.11.2.1 2002/06/11 03:30:21 art Exp $	*/
d124 1
a124 39
#define	spec_mmap	vop_generic_mmap
#define spec_getpages	genfs_getpages
#define spec_putpages	genfs_putpages

/*
 * Since most of the vnode op vectors for spec files share a bunch of
 * operations, we maintain them here instead of duplicating them everywhere.
 *
 * XXX - vnodeop inheritance would be nice.
 */
#define SPEC_VNODEOP_DESCS \
	{ &vop_open_desc, spec_open },			\
	{ &vop_lookup_desc, spec_lookup },		\
	{ &vop_create_desc, spec_create },		\
	{ &vop_mknod_desc, spec_mknod },		\
	{ &vop_select_desc, spec_select },		\
	{ &vop_kqfilter_desc, spec_kqfilter },		\
	{ &vop_ioctl_desc, spec_ioctl },		\
	{ &vop_revoke_desc, spec_revoke },		\
	{ &vop_remove_desc, spec_remove },		\
	{ &vop_link_desc, spec_link },			\
	{ &vop_rename_desc, spec_rename },		\
	{ &vop_mkdir_desc, spec_mkdir },		\
	{ &vop_rmdir_desc, spec_rmdir },		\
	{ &vop_symlink_desc, spec_symlink },		\
	{ &vop_readdir_desc, spec_readdir },		\
	{ &vop_readlink_desc, spec_readlink },		\
	{ &vop_abortop_desc, spec_abortop },		\
	{ &vop_bmap_desc, spec_bmap },			\
	{ &vop_strategy_desc, spec_strategy },		\
	{ &vop_lease_desc, spec_lease_check },		\
	{ &vop_bwrite_desc, spec_bwrite },		\
	{ &vop_pathconf_desc, spec_pathconf }, 		\
	{ &vop_advlock_desc, spec_advlock },		\
	{ &vop_reallocblks_desc, spec_reallocblks },	\
	{ &vop_mmap_desc, spec_mmap },			\
	{ &vop_getpages_desc, spec_getpages },		\
	{ &vop_putpages_desc, spec_putpages }
	
@


1.11.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d71 1
a71 1
extern struct vnode *speclisth[SPECHSZ];
d127 36
a162 1
int	spec_vnoperate(void *);
@


1.11.2.4
log
@convert to genfs_nolock.  genfs_lock for kern and procfs
@
text
@d113 3
a115 3
#define spec_lock	genfs_nolock
#define spec_unlock	genfs_nounlock
#define spec_islocked	genfs_noislocked
@


1.10
log
@Get rid of several unused vnode operations
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.9 2001/03/01 20:54:35 provos Exp $	*/
d124 1
@


1.9
log
@port kqueue changes from freebsd, plus all required openbsd glue.
okay deraadt@@, millert@@
from jlemon@@freebsd.org:
extend kqueue down to the device layer, backwards compatible approach
suggested by peter@@freebsd.org
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.8 2001/02/23 14:42:39 csapuntz Exp $	*/
a100 1
#define	spec_mmap	spec_badop
a101 1
#define	spec_seek	spec_badop
a120 2
#define	spec_blkatoff	spec_badop
#define	spec_valloc	spec_badop
a121 3
#define	spec_vfree	spec_badop
#define	spec_truncate	nullop
#define	spec_update	nullop
@


1.8
log
@

Remove the clustering fields from the vnodes and place them in the
file system inode instead
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.7 1998/08/06 19:34:48 csapuntz Exp $	*/
d100 1
@


1.7
log
@

Rename vop_revoke, vn_bwrite, vop_noislocked, vop_nolock, vop_nounlock
to be vop_generic_revoke, vop_generic_bwrite, vop_generic_islocked,
vop_generic_lock and vop_generic_unlock.

Create vop_generic_abortop and propogate change to all file systems.

Fix PR/371.

Get rid of locking in NULLFS (should be mostly unnecessary now except for
forced unmounts).
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.6 1997/11/06 05:58:45 csapuntz Exp $	*/
d50 1
@


1.7.8.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.9 2001/03/01 20:54:35 provos Exp $	*/
a49 1
	daddr_t si_lastr;
a98 1
int	spec_kqfilter	__P((void *));
@


1.7.8.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.7.8.1 2001/05/14 22:32:56 niklas Exp $	*/
d101 1
d103 1
d123 2
d126 3
@


1.7.8.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 1
a76 1
extern	int (**spec_vnodeop_p)(void *);
d84 2
a85 2
int	spec_badop(void *);
int	spec_ebadf(void *);
d87 1
a87 1
int	spec_lookup(void *);
d90 2
a91 2
int	spec_open(void *);
int	spec_close(void *);
d95 2
a96 2
int	spec_read(void *);
int	spec_write(void *);
d98 4
a101 4
int	spec_ioctl(void *);
int	spec_select(void *);
int	spec_kqfilter(void *);
int	spec_fsync(void *);
d111 1
a111 1
int spec_inactive(void *);
d116 5
a120 5
int	spec_bmap(void *);
int	spec_strategy(void *);
int	spec_print(void *);
int	spec_pathconf(void *);
int	spec_advlock(void *);
@


1.7.8.4
log
@Sync the SMP branch with 3.3
@
text
@d71 1
a71 1
extern struct vnode *speclisth[SPECHSZ];
a123 2

int	spec_vnoperate(void *);
@


1.7.8.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.7.8.4 2003/03/28 00:00:20 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.7.8.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d95 1
a95 1
int	spec_poll(void *);
@


1.6
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.5 1997/10/06 20:20:39 deraadt Exp $	*/
d113 3
a115 3
#define spec_lock       vop_nolock
#define spec_unlock     vop_nounlock
#define spec_islocked   vop_noislocked
d127 2
a128 2
#define	spec_bwrite	vn_bwrite
#define spec_revoke     vop_revoke
@


1.5
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: specdev.h,v 1.3 1997/01/04 17:10:05 kstailey Exp $	*/
d47 1
a47 1
	long	si_flags;
d57 1
a57 1
#define v_specflags v_specinfo->si_flags
a60 5
 * Flags for specinfo
 */
#define	SI_MOUNTEDON	0x0001	/* block special device is mounted on */

/*
d111 1
a111 1
#define	spec_inactive	nullop
d113 3
a115 2
int	spec_lock	__P((void *));
int	spec_unlock	__P((void *));
a118 1
#define	spec_islocked	nullop
d128 1
@


1.4
log
@VFS Lite2 Changes
@
text
@d47 1
a47 1
	struct  mount *si_mountpoint;
d57 1
a57 1
#define v_specmountpoint v_specinfo->si_mountpoint
d61 5
d116 1
a116 1
int spec_inactive __P((void *));
d118 2
a119 3
#define spec_lock       vop_nolock
#define spec_unlock     vop_nounlock
#define spec_islocked   vop_noislocked
d123 1
a132 1
#define spec_revoke     vop_revoke
@


1.3
log
@spec_advlock() via lf_advlock()
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
	long	si_flags;
d57 1
a57 1
#define v_specflags v_specinfo->si_flags
a60 5
 * Flags for specinfo
 */
#define	SI_MOUNTEDON	0x0001	/* block special device is mounted on */

/*
d111 1
a111 1
#define	spec_inactive	nullop
d113 3
a115 2
int	spec_lock	__P((void *));
int	spec_unlock	__P((void *));
a118 1
#define	spec_islocked	nullop
d128 1
@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d49 1
d58 1
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: specdev.h,v 1.9.2.1 1995/10/15 05:19:58 mycroft Exp $	*/
d78 1
a78 1
extern	int (**spec_vnodeop_p)();
d86 2
a87 2
int	spec_badop(),
	spec_ebadf();
d89 42
a130 42
int	spec_lookup __P((struct vop_lookup_args *));
#define spec_create ((int (*) __P((struct  vop_create_args *)))spec_badop)
#define spec_mknod ((int (*) __P((struct  vop_mknod_args *)))spec_badop)
int	spec_open __P((struct vop_open_args *));
int	spec_close __P((struct vop_close_args *));
#define spec_access ((int (*) __P((struct  vop_access_args *)))spec_ebadf)
#define spec_getattr ((int (*) __P((struct  vop_getattr_args *)))spec_ebadf)
#define spec_setattr ((int (*) __P((struct  vop_setattr_args *)))spec_ebadf)
int	spec_read __P((struct vop_read_args *));
int	spec_write __P((struct vop_write_args *));
#define	spec_lease_check ((int (*) __P((struct  vop_lease_args *)))nullop)
int	spec_ioctl __P((struct vop_ioctl_args *));
int	spec_select __P((struct vop_select_args *));
#define spec_mmap ((int (*) __P((struct  vop_mmap_args *)))spec_badop)
int	spec_fsync __P((struct  vop_fsync_args *));
#define spec_seek ((int (*) __P((struct  vop_seek_args *)))spec_badop)
#define spec_remove ((int (*) __P((struct  vop_remove_args *)))spec_badop)
#define spec_link ((int (*) __P((struct  vop_link_args *)))spec_badop)
#define spec_rename ((int (*) __P((struct  vop_rename_args *)))spec_badop)
#define spec_mkdir ((int (*) __P((struct  vop_mkdir_args *)))spec_badop)
#define spec_rmdir ((int (*) __P((struct  vop_rmdir_args *)))spec_badop)
#define spec_symlink ((int (*) __P((struct  vop_symlink_args *)))spec_badop)
#define spec_readdir ((int (*) __P((struct  vop_readdir_args *)))spec_badop)
#define spec_readlink ((int (*) __P((struct  vop_readlink_args *)))spec_badop)
#define spec_abortop ((int (*) __P((struct  vop_abortop_args *)))spec_badop)
#define spec_inactive ((int (*) __P((struct  vop_inactive_args *)))nullop)
#define spec_reclaim ((int (*) __P((struct  vop_reclaim_args *)))nullop)
int	spec_lock __P((struct vop_lock_args *));
int	spec_unlock __P((struct vop_unlock_args *));
int	spec_bmap __P((struct vop_bmap_args *));
int	spec_strategy __P((struct vop_strategy_args *));
int	spec_print __P((struct vop_print_args *));
#define spec_islocked ((int (*) __P((struct  vop_islocked_args *)))nullop)
int	spec_pathconf __P((struct vop_pathconf_args *));
int	spec_advlock __P((struct vop_advlock_args *));
#define spec_blkatoff ((int (*) __P((struct  vop_blkatoff_args *)))spec_badop)
#define spec_valloc ((int (*) __P((struct  vop_valloc_args *)))spec_badop)
#define spec_reallocblks \
	((int (*) __P((struct  vop_reallocblks_args *)))spec_badop)
#define spec_vfree ((int (*) __P((struct  vop_vfree_args *)))spec_badop)
#define spec_truncate ((int (*) __P((struct  vop_truncate_args *)))nullop)
#define spec_update ((int (*) __P((struct  vop_update_args *)))nullop)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
