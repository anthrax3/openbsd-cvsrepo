head	1.7;
access;
symbols
	OPENBSD_4_7:1.6.0.32
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.34
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.30
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.28
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.26
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.24
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.22
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.20
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.18
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.16
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.14
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.12
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.10
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.8
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.8
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.14
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.7
date	2010.07.01.00.43.07;	author tedu;	state dead;
branches;
next	1.6;

1.6
date	2002.03.14.00.42.25;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.15.06.11.45;	author jasoni;	state Exp;
branches
	1.5.8.1;
next	1.4;

1.4
date	2000.08.12.04.56.23;	author jasoni;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.12.04.33.02;	author jasoni;	state Exp;
branches;
next	1.2;

1.2
date	97.02.24.14.21.56;	author niklas;	state Exp;
branches
	1.2.14.1;
next	1.1;

1.1
date	95.10.18.08.53.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.01;	author deraadt;	state Exp;
branches;
next	;

1.2.14.1
date	2001.05.14.22.32.55;	author niklas;	state Exp;
branches;
next	1.2.14.2;

1.2.14.2
date	2002.03.28.15.02.01;	author niklas;	state Exp;
branches;
next	;

1.5.8.1
date	2002.06.11.03.30.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove crappy old README files
@
text
@/*	$OpenBSD: README,v 1.6 2002/03/14 00:42:25 miod Exp $	*/
/*	$NetBSD: README,v 1.4 1994/06/29 06:34:43 cgd Exp $	*/

saute procfs lyonnais

procfs supports two levels of directory.  the filesystem root
directory contains a representation of the system process table.
this consists of an entry for each active and zombie process, and
an additional entry "curproc" which always represents the process
making the lookup request.

each of the sub-directories contains several files.  these files
are used to control and interrogate processes.  the files implemented
are:

	file	- xxx.  the exec'ed file.

	status  - r/o.  returns process status.

	ctl	- w/o.  sends a control message to the process.
			for example:
				echo hup > /proc/curproc/note
			will send a SIGHUP to the shell.
			whereas
				echo attach > /proc/1293/ctl
			would set up process 1293 for debugging.
			see below for more details.

	mem	- r/w.  virtual memory image of the process.
			parts of the address space are readable
			only if they exist in the target process.
			a more reasonable alternative might be
			to return zero pages instead of an error.
			comments?

	note	- w/o.  writing a string here sends the
			equivalent note to the process.
			[ not implemented. ]

	notepg	- w/o.  the same as note, but sends to all
			members of the process group.
			[ not implemented. ]

	regs	- r/w.	process register set.  this can be read
			or written any time even if the process
			is not stopped.  since the bsd kernel
			is single-processor, this implementation
			will get the "right" register values.
			a multi-proc kernel would need to do some
			synchronisation.

	fpregs	- r/w.	same as regs, but for floating point registers
			when available.

	cmdline - r/o.	process command line parameters, separated
			by NULs

Note that regs and fpregs are not available if the kernel is compiled
without option PTRACE.

this then looks like:

% ls -li /proc
total 0
   9 dr-xr-xr-x  2 root  wheel  0 Sep 21 15:06 0
  17 dr-xr-xr-x  2 root  wheel  0 Sep 21 15:06 1
  89 dr-xr-xr-x  2 root  wheel  0 Sep 21 15:06 10
  25 dr-xr-xr-x  2 root  wheel  0 Sep 21 15:06 2
2065 dr-xr-xr-x  2 root  wheel  0 Sep 21 15:06 257
2481 dr-xr-xr-x  2 jsp   staff  0 Sep 21 15:06 309
 265 dr-xr-xr-x  2 root  wheel  0 Sep 21 15:06 32
3129 dr-xr-xr-x  2 jsp   staff  0 Sep 21 15:06 390
3209 dr-xr-xr-x  2 jsp   staff  0 Sep 21 15:06 400
3217 dr-xr-xr-x  2 jsp   staff  0 Sep 21 15:06 401
3273 dr-xr-xr-x  2 jsp   staff  0 Sep 21 15:06 408
 393 dr-xr-xr-x  2 root  wheel  0 Sep 21 15:06 48
 409 dr-xr-xr-x  2 root  wheel  0 Sep 21 15:06 50
 465 dr-xr-xr-x  2 root  wheel  0 Sep 21 15:06 57
 481 dr-xr-xr-x  2 root  wheel  0 Sep 21 15:06 59
 537 dr-xr-xr-x  2 root  kmem   0 Sep 21 15:06 66
 545 dr-xr-xr-x  2 root  wheel  0 Sep 21 15:06 67
 657 dr-xr-xr-x  2 jsp   staff  0 Sep 21 15:06 81
 665 dr-xr-xr-x  2 jsp   staff  0 Sep 21 15:06 82
 673 dr-xr-xr-x  2 jsp   staff  0 Sep 21 15:06 83
 681 dr-xr-xr-x  2 root  wheel  0 Sep 21 15:06 84
3273 dr-xr-xr-x  2 jsp   staff  0 Sep 21 15:06 curproc
% ls -li /proc/curproc
total 792
135147 -r--r--r--  1 jason  staff       0 Aug 11 22:52 cmdline
135143 --w-------  1 jason  staff       0 Aug 11 22:52 ctl
  3860 -r-xr-xr-x  1 root   bin    167936 Jul 30 14:23 file
135142 -rw-------  1 jason  staff     108 Aug 11 22:52 fpregs
135140 -rw-------  1 jason  staff  225280 Aug 11 22:52 mem
135145 --w-------  1 jason  staff       0 Aug 11 22:52 note
135146 --w-------  1 jason  staff       0 Aug 11 22:52 notepg
135141 -rw-------  1 jason  staff      64 Aug 11 22:52 regs
135144 -r--r--r--  1 jason  staff       0 Aug 11 22:52 status
% df /proc/curproc /proc/curproc/file
Filesystem  512-blocks    Used   Avail Capacity  Mounted on
proc                 2       2       0   100%    /proc
/dev/wd0a        16186   13548    1018    93%    /
% cat /proc/curproc/status
cat 446 439 400 81 12,0 ctty 748620684 270000 0 0 0 20000 nochan 11 20 20 20 0 21 117



the basic sequence of commands written to "ctl" would be

	attach		- this stops the target process and
			  arranges for the sending process
			  to become the debug control process
	wait		- wait for the target process to come to
			  a steady state ready for debugging.
	step		- single step, with no signal delivery.
	run		- continue running, with no signal delivery,
			  until next trap or breakpoint.
	<signame>	- deliver signal <signame> and continue running.
	detach		- continue execution of the target process
			  and remove it from control by the debug process

Note that attach, wait, step, run and detach are not available if the
kernel is compiled without option PTRACE.

in a normal debugging environment, where the target is fork/exec'd by
the debugger, the debugger should fork and the child should stop itself
(with a self-inflicted SIGSTOP).  the parent should do a "wait" then an
"attach".  as before, the child will hit a breakpoint on the first
instruction in any newly exec'd image.
@


1.6
log
@Turn the ptrace(2) syscall into a kernel compile option, option PTRACE in
your kernel configuration file.
By default, GENERIC will enable this.

When PTRACE is not enabled, several ptrace-like features of the procfs
filesystem will be disabled as well (namely, the ability to read and write
any process' registers, as well as attching, single stepping and detaching
to/from processes).

This should help paranoid people build better sandboxens, and us to build
smaller ramdisks.
@
text
@d1 1
a1 1
/*	$OpenBSD: README,v 1.5 2000/08/15 06:11:45 jasoni Exp $	*/
@


1.5
log
@NUL not NULL; noted by Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: README,v 1.4 2000/08/12 04:56:23 jasoni Exp $	*/
d52 3
d58 3
d120 3
@


1.5.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: README,v 1.5 2000/08/15 06:11:45 jasoni Exp $	*/
a51 3
	fpregs	- r/w.	same as regs, but for floating point registers
			when available.

a54 3
Note that regs and fpregs are not available if the kernel is compiled
without option PTRACE.

a113 3

Note that attach, wait, step, run and detach are not available if the
kernel is compiled without option PTRACE.
@


1.4
log
@update sample directory listing.
@
text
@d1 1
a1 1
/*	$OpenBSD: README,v 1.3 2000/08/12 04:33:02 jasoni Exp $	*/
d53 1
a53 1
			by NULLs
@


1.3
log
@document cmdline.
@
text
@d1 1
a1 1
/*	$OpenBSD: README,v 1.2 1997/02/24 14:21:56 niklas Exp $	*/
d82 10
a91 8
total 408
3341 --w-------  1 jsp  staff       0 Sep 21 15:06 ctl
1554 -r-xr-xr-x  1 bin  bin     90112 Mar 29 04:52 file
3339 -rw-------  1 jsp  staff  118784 Sep 21 15:06 mem
3343 --w-------  1 jsp  staff       0 Sep 21 15:06 note
3344 --w-------  1 jsp  staff       0 Sep 21 15:06 notepg
3340 -rw-------  1 jsp  staff       0 Sep 21 15:06 regs
3342 -r--r--r--  1 jsp  staff       0 Sep 21 15:06 status
@


1.2
log
@OpenBSD tag
@
text
@d1 1
a1 1
/*	$OpenBSD: README,v 1.4 1994/06/29 06:34:43 cgd Exp $	*/
d51 3
@


1.2.14.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: README,v 1.5 2000/08/15 06:11:45 jasoni Exp $	*/
a51 3
	cmdline - r/o.	process command line parameters, separated
			by NULs

d79 8
a86 10
total 792
135147 -r--r--r--  1 jason  staff       0 Aug 11 22:52 cmdline
135143 --w-------  1 jason  staff       0 Aug 11 22:52 ctl
  3860 -r-xr-xr-x  1 root   bin    167936 Jul 30 14:23 file
135142 -rw-------  1 jason  staff     108 Aug 11 22:52 fpregs
135140 -rw-------  1 jason  staff  225280 Aug 11 22:52 mem
135145 --w-------  1 jason  staff       0 Aug 11 22:52 note
135146 --w-------  1 jason  staff       0 Aug 11 22:52 notepg
135141 -rw-------  1 jason  staff      64 Aug 11 22:52 regs
135144 -r--r--r--  1 jason  staff       0 Aug 11 22:52 status
@


1.2.14.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a51 3
	fpregs	- r/w.	same as regs, but for floating point registers
			when available.

a54 3
Note that regs and fpregs are not available if the kernel is compiled
without option PTRACE.

a113 3

Note that attach, wait, step, run and detach are not available if the
kernel is compiled without option PTRACE.
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
