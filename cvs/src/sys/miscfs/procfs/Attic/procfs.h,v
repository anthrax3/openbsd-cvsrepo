head	1.29;
access;
symbols
	OPENBSD_5_6:1.28.0.14
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.28.0.12
	OPENBSD_5_5_BASE:1.28
	OPENBSD_5_4:1.28.0.8
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.28.0.6
	OPENBSD_5_3_BASE:1.28
	OPENBSD_5_2:1.28.0.4
	OPENBSD_5_2_BASE:1.28
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.2
	OPENBSD_5_0:1.27.0.4
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.27.0.2
	OPENBSD_4_9_BASE:1.27
	OPENBSD_4_8:1.24.0.14
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.10
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.24.0.12
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.8
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.6
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.4
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.2
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.23.0.6
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.23.0.4
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.23.0.2
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.22.0.8
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.6
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.4
	OPENBSD_3_6_BASE:1.22
	SMP_SYNC_A:1.22
	SMP_SYNC_B:1.22
	OPENBSD_3_5:1.22.0.2
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	UBC_SYNC_A:1.17
	OPENBSD_3_3:1.17.0.2
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.15.0.4
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	UBC_SYNC_B:1.15
	UBC:1.13.0.4
	UBC_BASE:1.13
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.8.0.12
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.10
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.8
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2014.09.08.01.57.00;	author guenther;	state dead;
branches;
next	1.28;
commitid	0HlTPhRuQ0I9ZG6q;

1.28
date	2011.12.24.04.34.20;	author guenther;	state Exp;
branches;
next	1.27;

1.27
date	2010.12.21.20.14.43;	author thib;	state Exp;
branches;
next	1.26;

1.26
date	2010.09.10.16.34.08;	author thib;	state Exp;
branches;
next	1.25;

1.25
date	2010.09.06.23.44.10;	author thib;	state Exp;
branches;
next	1.24;

1.24
date	2007.06.22.09.38.53;	author jasper;	state Exp;
branches;
next	1.23;

1.23
date	2005.12.11.21.30.31;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.23.16.51.13;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2003.08.14.07.46.40;	author mickey;	state Exp;
branches;
next	1.20;

1.20
date	2003.08.11.10.08.04;	author mickey;	state Exp;
branches;
next	1.19;

1.19
date	2003.08.05.20.47.36;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.23.28.10;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2003.01.31.20.41.29;	author art;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.31.17.37.50;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.14.01.27.08;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.30.20.29.44;	author nordin;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.27.04.58.43;	author art;	state Exp;
branches
	1.13.4.1;
next	1.12;

1.12
date	2001.05.24.07.32.42;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.09.07.14.21;	author tholo;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.15.02.44.12;	author ericj;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.12.04.29.24;	author jasoni;	state Exp;
branches;
next	1.8;

1.8
date	97.11.06.05.58.42;	author csapuntz;	state Exp;
branches
	1.8.10.1;
next	1.7;

1.7
date	97.10.06.20.20.33;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.10.06.15.19.10;	author csapuntz;	state Exp;
branches;
next	1.5;

1.5
date	97.08.29.04.24.36;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.08.16.02.00.47;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.06.21.12.49.54;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.02.27.08.03.34;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.01;	author deraadt;	state Exp;
branches;
next	;

1.8.10.1
date	2001.05.14.22.32.55;	author niklas;	state Exp;
branches;
next	1.8.10.2;

1.8.10.2
date	2001.07.04.10.49.13;	author niklas;	state Exp;
branches;
next	1.8.10.3;

1.8.10.3
date	2002.03.06.02.13.24;	author niklas;	state Exp;
branches;
next	1.8.10.4;

1.8.10.4
date	2002.03.28.15.02.01;	author niklas;	state Exp;
branches;
next	1.8.10.5;

1.8.10.5
date	2003.06.07.11.06.05;	author ho;	state Exp;
branches;
next	1.8.10.6;

1.8.10.6
date	2004.02.19.10.57.20;	author niklas;	state Exp;
branches;
next	;

1.13.4.1
date	2002.01.31.22.55.42;	author niklas;	state Exp;
branches;
next	1.13.4.2;

1.13.4.2
date	2002.06.11.03.30.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Actually remove the procfs files
@
text
@/*	$OpenBSD: procfs.h,v 1.28 2011/12/24 04:34:20 guenther Exp $	*/
/*	$NetBSD: procfs.h,v 1.17 1996/02/12 15:01:41 christos Exp $	*/

/*
 * Copyright (c) 1993 Jan-Simon Pendry
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)procfs.h	8.7 (Berkeley) 6/15/94
 */

/*
 * The different types of node in a procfs filesystem
 */
typedef enum {
	Proot,		/* the filesystem root */
	Pcurproc,	/* symbolic link for curproc */
	Pself,		/* like curproc, but this is the Linux name */
	Pproc,		/* a process-specific sub-directory */
	Pfile,		/* the executable file */
	Pmem,		/* the process's memory image */
	Pregs,		/* the process's register set */
	Pfpregs,	/* the process's FP register set */
	Pctl,		/* process control */
	Pstatus,	/* process status */
	Pnote,		/* process notifier */
	Pnotepg,	/* process group notifier */
	Pcmdline,	/* process command line args */
	Pmeminfo,	/* system memory info (if -o linux) */
	Pcpuinfo	/* CPU info (if -o linux) */
} pfstype;

/*
 * control data for the proc file system.
 */
struct pfsnode {
	TAILQ_ENTRY(pfsnode)	list;
	struct vnode	*pfs_vnode;	/* vnode associated with this pfsnode */
	pfstype		pfs_type;	/* type of procfs node */
	pid_t		pfs_pid;	/* associated process */
	mode_t		pfs_mode;	/* mode bits for stat() */
	u_long		pfs_flags;	/* open flags */
	u_long		pfs_fileno;	/* unique file id */
};

/*
 * Kernel stuff follows
 */
#ifdef _KERNEL
#define CNEQ(cnp, s, len) \
	 ((cnp)->cn_namelen == (len) && \
	  (bcmp((s), (cnp)->cn_nameptr, (len)) == 0))

#define UIO_MX 32

#define PROCFS_FILENO(pid, type) \
	(((type) < Pproc) ? \
			((type) + 4) : \
			((((pid)+1) << 5) + ((int) (type))))

struct procfsmount {
	void *pmnt_exechook;
	int pmnt_flags;
};

#define VFSTOPROC(mp)	((struct procfsmount *)(mp)->mnt_data)

/*
 * Convert between pfsnode vnode
 */
#define VTOPFS(vp)	((struct pfsnode *)(vp)->v_data)
#define PFSTOV(pfs)	((pfs)->pfs_vnode)

typedef struct vfs_namemap vfs_namemap_t;
struct vfs_namemap {
	const char *nm_name;
	int nm_val;
};

int vfs_getuserstr(struct uio *, char *, int *);
const vfs_namemap_t *vfs_findname(const vfs_namemap_t *, char *, int);

int procfs_allocvp(struct mount *, struct vnode **, pid_t, pfstype);
int procfs_dostatus(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_docmdline(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_domeminfo(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_docpuinfo(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_freevp(struct vnode *);
int procfs_getcpuinfstr(char *, int *);
int procfs_poll(void *);

/* functions to check whether or not files should be displayed */
int procfs_validfile(struct proc *, struct mount *);

int procfs_rw(void *);

#define PROCFS_LOCKED	0x01
#define PROCFS_WANT	0x02

extern struct vops procfs_vops;
extern const struct vfsops procfs_vfsops;

struct vfsconf;

int	procfs_init(struct vfsconf *);
int	procfs_root(struct mount *, struct vnode **);

#endif /* _KERNEL */
@


1.28
log
@Remove the ability to ptrace via procfs, as no one is using it, so fixing
and extending it to support rthreads would be a waste of time.  Also, don't
show rthreads in the process listing in procfs.

Reassurances that compat_linux doesn't need this from ajacoutot@@
ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.27 2010/12/21 20:14:43 thib Exp $	*/
@


1.27
log
@Bring back the "End the VOP experiment." diff, naddy's issues where
unrelated, and his alpha is much happier now.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.26 2010/09/10 16:34:08 thib Exp $	*/
a72 3
#define PROCFS_NOTELEN	64	/* max length of a note (/proc/$pid/note) */
#define PROCFS_CTLLEN 	8	/* max length of a ctl msg (/proc/$pid/ctl */

a110 4
int procfs_doctl(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_dofpregs(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_donote(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_doregs(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
a114 1
int procfs_domap(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio, int);
a120 3
int procfs_validfpregs(struct proc *, struct mount *);
int procfs_validregs(struct proc *, struct mount *);
int procfs_validmap(struct proc *, struct mount *);
@


1.26
log
@Backout the VOP diff until the issues naddy was seeing on alpha (gcc3)
have been resolved.
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.25 2010/09/06 23:44:10 thib Exp $	*/
d138 1
a138 1
extern int (**procfs_vnodeop_p)(void *);
@


1.25
log
@End the VOP experiment. Instead of the ridicolusly complicated operation
vector setup that has questionable features (that have, as far as I can
tell never been used in practice, atleast not in OpenBSD), remove all
the gunk and favor a simple struct full of function pointers that get
set directly by each of the filesystems.

Removes gobs of ugly code and makes things simpler by a magnitude.

The only downside of this is that we loose the vnoperate feature so
the spec/fifo operations of the filesystems need to be kept in sync
with specfs and fifofs, this is no big deal as the API it self is pretty
static.

Many thanks to armani@@ who pulled an earlier version of this diff to
current after c2k10 and Gabriel Kihlman on tech@@ for testing.

Liked by many. "come on, find your balls" deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.24 2007/06/22 09:38:53 jasper Exp $	*/
d138 1
a138 1
extern struct vops procfs_vops;
@


1.24
log
@declare "pid" as pid_t instead of long, and remove unneeded cast to pid_t

ok pedro@@ thib@@
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.23 2005/12/11 21:30:31 miod Exp $	*/
d138 1
a138 1
extern int (**procfs_vnodeop_p)(void *);
@


1.23
log
@Replace procfs_domem() with a similar interface, process_domem(), which lives
out of procfs and gets a ptrace request PT_{READ,WRITE}_{I,D} as argument;
also procfs_checkioperm() becomes process_checkioperm().

From art@@ some time ago; ok kettenis@@ pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.22 2003/09/23 16:51:13 millert Exp $	*/
d113 1
a113 1
int procfs_allocvp(struct mount *, struct vnode **, long, pfstype);
@


1.22
log
@Replace select backends with poll backends.  selscan() and pollscan()
now call the poll backend.  With this change we implement greater
poll(2) functionality instead of emulating it via the select backend.
Adapted from NetBSD and including some changes from FreeBSD.
Tested by many, deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.21 2003/08/14 07:46:40 mickey Exp $	*/
a113 1
int procfs_checkioperm(struct proc *p, struct proc *t);
a115 1
int procfs_domem(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
@


1.21
log
@constify vfsops; tedu@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.20 2003/08/11 10:08:04 mickey Exp $	*/
d127 1
@


1.20
log
@constify constant names
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.19 2003/08/05 20:47:36 tedu Exp $	*/
d140 1
a140 1
extern struct vfsops procfs_vfsops;
@


1.19
log
@make procfs support statfs args.  lossage noticed and patch tested by jolan
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.18 2003/06/02 23:28:10 millert Exp $	*/
d111 1
a111 1
vfs_namemap_t *vfs_findname(vfs_namemap_t *, char *, int);
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.17 2003/01/31 20:41:29 art Exp $	*/
a74 9

struct procfs_args {
	int version;
	int flags;
};

#define PROCFS_ARGSVERSION	1

#define	PROCFSMNT_LINUXCOMPAT	0x01
@


1.17
log
@Sigh. I comitted the wrong diff in the last vfs changes.
These are the files that were ok:ed and tested.
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.16 2003/01/31 17:37:50 art Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.16
log
@File system locking fixups, mostly from NetBSD:
- cache_lookup
        move common code from various fs's here
        always return with vnode and parent locked
        adjust return codes
- PDIRUNLOCK - new flag set if lookup couldn't lock parent vnode
- kernfs and procfs
        lock vnode in get_root
        don't unlock (again) in kernfs_freevp
        fix memory leak in procfs

From tedu@@stanford.edu
deraadt@@ and various other ok
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.15 2002/03/14 01:27:08 millert Exp $	*/
a106 1
	struct vnode *rvp;
@


1.15
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.14 2002/01/30 20:29:44 nordin Exp $	*/
d107 1
@


1.14
log
@Add proc0 to the PIDHASH table. art@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.13 2001/06/27 04:58:43 art Exp $	*/
d123 2
a124 2
int vfs_getuserstr __P((struct uio *, char *, int *));
vfs_namemap_t *vfs_findname __P((vfs_namemap_t *, char *, int));
d126 14
a139 14
int procfs_allocvp __P((struct mount *, struct vnode **, long, pfstype));
int procfs_checkioperm __P((struct proc *p, struct proc *t));
int procfs_doctl __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_dofpregs __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_domem __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_donote __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_doregs __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_dostatus __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_docmdline __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_domeminfo __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_docpuinfo __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_domap __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio, int));
int procfs_freevp __P((struct vnode *));
int procfs_getcpuinfstr __P((char *, int *));
d142 4
a145 4
int procfs_validfile __P((struct proc *, struct mount *));
int procfs_validfpregs __P((struct proc *, struct mount *));
int procfs_validregs __P((struct proc *, struct mount *));
int procfs_validmap __P((struct proc *, struct mount *));
d147 1
a147 1
int procfs_rw __P((void *));
d152 1
a152 1
extern int (**procfs_vnodeop_p) __P((void *));
d157 2
a158 2
int	procfs_init __P((struct vfsconf *));
int	procfs_root __P((struct mount *, struct vnode **));
@


1.13
log
@Remove old vm.
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.12 2001/05/24 07:32:42 aaron Exp $	*/
a125 1
#define PFIND(pid) ((pid) ? pfind(pid) : &proc0)
@


1.13.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.14 2002/01/30 20:29:44 nordin Exp $	*/
d126 1
@


1.13.4.2
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.13.4.1 2002/01/31 22:55:42 niklas Exp $	*/
d123 2
a124 2
int vfs_getuserstr(struct uio *, char *, int *);
vfs_namemap_t *vfs_findname(vfs_namemap_t *, char *, int);
d126 14
a139 14
int procfs_allocvp(struct mount *, struct vnode **, long, pfstype);
int procfs_checkioperm(struct proc *p, struct proc *t);
int procfs_doctl(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_dofpregs(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_domem(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_donote(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_doregs(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_dostatus(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_docmdline(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_domeminfo(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_docpuinfo(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_domap(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio, int);
int procfs_freevp(struct vnode *);
int procfs_getcpuinfstr(char *, int *);
d142 4
a145 4
int procfs_validfile(struct proc *, struct mount *);
int procfs_validfpregs(struct proc *, struct mount *);
int procfs_validregs(struct proc *, struct mount *);
int procfs_validmap(struct proc *, struct mount *);
d147 1
a147 1
int procfs_rw(void *);
d152 1
a152 1
extern int (**procfs_vnodeop_p)(void *);
d157 2
a158 2
int	procfs_init(struct vfsconf *);
int	procfs_root(struct mount *, struct vnode **);
@


1.12
log
@Garbage collect procfs_findtextvp().
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.11 2001/04/09 07:14:21 tholo Exp $	*/
a140 4

#if !defined(UVM)
int procfs_rwmem __P((struct proc *, struct uio *));
#endif
@


1.11
log
@Add emulation of Linux features to procfs; mostly from NetBSD.  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.10 2000/08/15 02:44:12 ericj Exp $	*/
a138 1
struct vnode *procfs_findtextvp __P((struct proc *));
@


1.10
log
@make procfs compile on non-uvm systems
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.9 2000/08/12 04:29:24 jasoni Exp $	*/
d49 1
d59 3
a61 1
	Pcmdline	/* process command line args */
d80 9
d101 9
a109 2
			((type) + 2) : \
			((((pid)+1) << 4) + ((int) (type))))
d136 3
d141 1
d148 4
a151 3
int procfs_validfile __P((struct proc *));
int procfs_validfpregs __P((struct proc *));
int procfs_validregs __P((struct proc *));
@


1.9
log
@Add procfs/cmdline; to help with linux emulation.
From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.8 1997/11/06 05:58:42 csapuntz Exp $	*/
d119 4
@


1.8
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.7 1997/10/06 20:20:33 deraadt Exp $	*/
d57 2
a58 1
	Pnotepg		/* process group notifier */
d116 1
@


1.8.10.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.11 2001/04/09 07:14:21 tholo Exp $	*/
a48 1
	Pself,		/* like curproc, but this is the Linux name */
d57 1
a57 4
	Pnotepg,	/* process group notifier */
	Pcmdline,	/* process command line args */
	Pmeminfo,	/* system memory info (if -o linux) */
	Pcpuinfo	/* CPU info (if -o linux) */
a75 9
struct procfs_args {
	int version;
	int flags;
};

#define PROCFS_ARGSVERSION	1

#define	PROCFSMNT_LINUXCOMPAT	0x01

d88 2
a89 9
			((type) + 4) : \
			((((pid)+1) << 5) + ((int) (type))))

struct procfsmount {
	void *pmnt_exechook;
	int pmnt_flags;
};

#define VFSTOPROC(mp)	((struct procfsmount *)(mp)->mnt_data)
a114 4
int procfs_docmdline __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_domeminfo __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_docpuinfo __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_domap __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio, int));
a116 5
int procfs_getcpuinfstr __P((char *, int *));

#if !defined(UVM)
int procfs_rwmem __P((struct proc *, struct uio *));
#endif
d119 3
a121 4
int procfs_validfile __P((struct proc *, struct mount *));
int procfs_validfpregs __P((struct proc *, struct mount *));
int procfs_validregs __P((struct proc *, struct mount *));
int procfs_validmap __P((struct proc *, struct mount *));
@


1.8.10.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.8.10.1 2001/05/14 22:32:55 niklas Exp $	*/
d139 1
d142 4
@


1.8.10.3
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d126 1
@


1.8.10.4
log
@Merge in -current from roughly a week ago
@
text
@d123 2
a124 2
int vfs_getuserstr(struct uio *, char *, int *);
vfs_namemap_t *vfs_findname(vfs_namemap_t *, char *, int);
d126 14
a139 14
int procfs_allocvp(struct mount *, struct vnode **, long, pfstype);
int procfs_checkioperm(struct proc *p, struct proc *t);
int procfs_doctl(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_dofpregs(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_domem(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_donote(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_doregs(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_dostatus(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_docmdline(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_domeminfo(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_docpuinfo(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio);
int procfs_domap(struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio, int);
int procfs_freevp(struct vnode *);
int procfs_getcpuinfstr(char *, int *);
d142 4
a145 4
int procfs_validfile(struct proc *, struct mount *);
int procfs_validfpregs(struct proc *, struct mount *);
int procfs_validregs(struct proc *, struct mount *);
int procfs_validmap(struct proc *, struct mount *);
d147 1
a147 1
int procfs_rw(void *);
d152 1
a152 1
extern int (**procfs_vnodeop_p)(void *);
d157 2
a158 2
int	procfs_init(struct vfsconf *);
int	procfs_root(struct mount *, struct vnode **);
@


1.8.10.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.8.10.4 2002/03/28 15:02:01 niklas Exp $	*/
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.8.10.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 9
d120 1
a120 1
const vfs_namemap_t *vfs_findname(const vfs_namemap_t *, char *, int);
a135 1
int procfs_poll(void *);
d149 1
a149 1
extern const struct vfsops procfs_vfsops;
@


1.7
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.5 1997/08/29 04:24:36 millert Exp $	*/
d131 3
a133 1
void	procfs_init __P((void));
@


1.6
log
@VFS Lite2 Changes
@
text
@d131 1
a131 3
struct vfsconf;

int	procfs_init __P((struct vfsconf *));
@


1.5
log
@From NetBSD (thorpej):
    Fix a reversed argument which caused procfs_checkioperm() to always
    return OK".  Add a few comments to avoid further confusion.
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.4 1997/08/16 02:00:47 millert Exp $	*/
d131 3
a133 1
void	procfs_init __P((void));
@


1.4
log
@1) pfs_mode should be mode_t, not u_short
2) Fix procfs security hole.  This is basically the NetBSD fix
   (which is based in part on Sean Eric Fagan's FreeBSD fix)
   with a few minor changes.  The change creates as function,
   procfs_checkioperm(), that has check numbers 3 and 4 from sys_ptrace().
3) Make procfs_control() use procfs_checkioperm() as well (it
   already had the same basic checks but some of them were incorrect).
4) Minor stylistic cleanups, including the use of the SET/CLR/ISSET
   macros to aid general grokability.
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.3 1996/06/21 12:49:54 mickey Exp $	*/
d108 1
a108 1
int procfs_checkioperm __P((struct proc *t, struct proc *p));
@


1.3
log
@use <sys/queue.h> for pfsnode list.
$OpenBSD$ additions.
@
text
@d1 1
a1 1
/*	$OpenBSD: procfs.h,v 1.2 1996/02/27 08:03:34 niklas Exp $	*/
d68 1
a68 1
	u_short		pfs_mode;	/* mode bits for stat() */
a106 1
int procfs_freevp __P((struct vnode *));
d108 4
a111 1
struct vnode *procfs_findtextvp __P((struct proc *));
a113 3
int procfs_dofpregs __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_domem __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
int procfs_doctl __P((struct proc *, struct proc *, struct pfsnode *pfsp, struct uio *uio));
d115 2
@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d64 1
a64 1
	struct pfsnode	*pfs_next;	/* next on list */
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: procfs.h,v 1.14 1995/10/09 11:18:51 mycroft Exp $	*/
d122 2
d127 1
a127 1
extern int (**procfs_vnodeop_p)();
d130 3
a132 43
/*
 * Prototypes for procfs vnode ops
 */
int	procfs_badop();	/* varargs */
int	procfs_rw __P((struct vop_read_args *));
int	procfs_lookup __P((struct vop_lookup_args *));
#define procfs_create ((int (*) __P((struct vop_create_args *))) procfs_badop)
#define procfs_mknod ((int (*) __P((struct vop_mknod_args *))) procfs_badop)
int	procfs_open __P((struct vop_open_args *));
int	procfs_close __P((struct vop_close_args *));
int	procfs_access __P((struct vop_access_args *));
int	procfs_getattr __P((struct vop_getattr_args *));
int	procfs_setattr __P((struct vop_setattr_args *));
#define	procfs_read procfs_rw
#define	procfs_write procfs_rw
int	procfs_ioctl __P((struct vop_ioctl_args *));
#define procfs_select ((int (*) __P((struct vop_select_args *))) procfs_badop)
#define procfs_mmap ((int (*) __P((struct vop_mmap_args *))) procfs_badop)
#define procfs_fsync ((int (*) __P((struct vop_fsync_args *))) procfs_badop)
#define procfs_seek ((int (*) __P((struct vop_seek_args *))) procfs_badop)
#define procfs_remove ((int (*) __P((struct vop_remove_args *))) procfs_badop)
#define procfs_link ((int (*) __P((struct vop_link_args *))) procfs_badop)
#define procfs_rename ((int (*) __P((struct vop_rename_args *))) procfs_badop)
#define procfs_mkdir ((int (*) __P((struct vop_mkdir_args *))) procfs_badop)
#define procfs_rmdir ((int (*) __P((struct vop_rmdir_args *))) procfs_badop)
#define procfs_symlink ((int (*) __P((struct vop_symlink_args *))) procfs_badop)
int	procfs_readdir __P((struct vop_readdir_args *));
int	procfs_readlink __P((struct vop_readlink_args *));
int	procfs_abortop __P((struct vop_abortop_args *));
int	procfs_inactive __P((struct vop_inactive_args *));
int	procfs_reclaim __P((struct vop_reclaim_args *));
#define procfs_lock ((int (*) __P((struct vop_lock_args *))) nullop)
#define procfs_unlock ((int (*) __P((struct vop_unlock_args *))) nullop)
int	procfs_bmap __P((struct vop_bmap_args *));
#define	procfs_strategy ((int (*) __P((struct vop_strategy_args *))) procfs_badop)
int	procfs_print __P((struct vop_print_args *));
#define procfs_islocked ((int (*) __P((struct vop_islocked_args *))) nullop)
#define procfs_advlock ((int (*) __P((struct vop_advlock_args *))) procfs_badop)
#define procfs_blkatoff ((int (*) __P((struct vop_blkatoff_args *))) procfs_badop)
#define procfs_valloc ((int (*) __P((struct vop_valloc_args *))) procfs_badop)
#define procfs_vfree ((int (*) __P((struct vop_vfree_args *))) nullop)
#define procfs_truncate ((int (*) __P((struct vop_truncate_args *))) procfs_badop)
#define procfs_update ((int (*) __P((struct vop_update_args *))) nullop)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
