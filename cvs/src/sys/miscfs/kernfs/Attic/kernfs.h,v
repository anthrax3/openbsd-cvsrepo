head	1.15;
access;
symbols
	OPENBSD_3_8:1.14.0.8
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.6
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.8.0.12
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.10
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.8
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.2
	SMP_BASE:1.8
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	syms:1.2.0.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2005.11.24.12.08.16;	author pedro;	state dead;
branches;
next	1.14;

1.14
date	2003.09.23.16.51.13;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.14.07.46.39;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.11.10.19.24;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.23.28.10;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.27.08;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.17.04.29.52;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2000.02.07.04.57.16;	author assar;	state Exp;
branches
	1.8.2.1
	1.8.12.1;
next	1.7;

1.7
date	98.12.28.05.51.38;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.11.06.05.58.35;	author csapuntz;	state Exp;
branches;
next	1.5;

1.5
date	97.10.06.20.20.24;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.10.06.15.19.04;	author csapuntz;	state Exp;
branches;
next	1.3;

1.3
date	97.04.26.12.09.58;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.02.27.07.55.17;	author niklas;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	95.10.18.08.53.00;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.00;	author deraadt;	state Exp;
branches;
next	;

1.2.4.1
date	96.10.14.13.38.02;	author mickey;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	97.05.29.00.52.38;	author mickey;	state Exp;
branches;
next	;

1.8.2.1
date	2002.03.06.02.13.24;	author niklas;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2003.06.07.11.06.05;	author ho;	state Exp;
branches;
next	1.8.2.4;

1.8.2.4
date	2004.02.19.10.57.20;	author niklas;	state Exp;
branches;
next	;

1.8.12.1
date	2002.06.11.03.30.20;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove kernfs, okay deraadt@@.
@
text
@/*	$OpenBSD: kernfs.h,v 1.14 2003/09/23 16:51:13 millert Exp $	*/
/*	$NetBSD: kernfs.h,v 1.10 1996/02/09 22:40:21 christos Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software donated to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)kernfs.h	8.5 (Berkeley) 6/15/94
 */

#define	_PATH_KERNFS	"/kern"		/* Default mountpoint */

#ifdef _KERNEL

struct kern_target {
	u_char kt_type;
	u_char kt_namlen;
	char *kt_name;
	void *kt_data;
#define	KTT_NULL	 1
#define	KTT_TIME	 5
#define KTT_INT		17
#define	KTT_STRING	31
#define KTT_HOSTNAME	47
#define KTT_AVENRUN	53
#define KTT_DEVICE	71
#define	KTT_MSGBUF	89
#define KTT_USERMEM	91
#define KTT_DOMAIN	95
#define KTT_PHYSMEM	99
#ifdef IPSEC
#define KTT_IPSECSPI	107
#endif
	u_char kt_tag;
	u_char kt_vtype;
	mode_t kt_mode;
};

struct kernfs_node {
	TAILQ_ENTRY(kernfs_node) list;
	const struct kern_target *kf_kt;
	struct vnode	*kf_vnode;
#define kf_type		kf_kt->kt_type
#define kf_namlen	kf_kt->kt_namlen
#define kf_name		kf_kt->kt_name
#define kf_data		kf_kt->kt_data
#define kf_vtype	kf_kt->kt_vtype
#define kf_mode		kf_kt->kt_mode
#define kf_tag		kf_kt->kt_tag
};

#define KERNTOV(kn) ((struct vnode *)(kn)->kf_vnode)
#define	VTOKERN(vp) ((struct kernfs_node *)(vp)->v_data)

#define kernfs_fhtovp ((int (*)(struct mount *, struct fid *, \
	    struct vnode **))eopnotsupp)
#define kernfs_quotactl ((int (*)(struct mount *, int, uid_t, caddr_t, \
	    struct proc *))eopnotsupp)
#define kernfs_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define kernfs_vget ((int (*)(struct mount *, ino_t, struct vnode **)) \
	    eopnotsupp)
#define kernfs_vptofh ((int (*)(struct vnode *, struct fid *))eopnotsupp)
#define kernfs_sync ((int (*)(struct mount *, int, struct ucred *, \
				   struct proc *))nullop)
#define kernfs_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)

int	kernfs_init(struct vfsconf *);
int	kernfs_poll(void *);
int	kernfs_allocvp(const struct kern_target *, struct mount *, struct vnode **);
const struct kern_target *kernfs_findtarget(char *, int);
extern int (**kernfs_vnodeop_p)(void *);
extern const struct vfsops kernfs_vfsops;
extern dev_t rrootdev;
#endif /* _KERNEL */
@


1.14
log
@Replace select backends with poll backends.  selscan() and pollscan()
now call the poll backend.  With this change we implement greater
poll(2) functionality instead of emulating it via the select backend.
Adapted from NetBSD and including some changes from FreeBSD.
Tested by many, deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.13 2003/08/14 07:46:39 mickey Exp $	*/
@


1.13
log
@constify vfsops; tedu@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.12 2003/08/11 10:19:24 mickey Exp $	*/
d97 1
@


1.12
log
@constify constant targets
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.11 2003/06/02 23:28:10 millert Exp $	*/
d100 1
a100 1
extern struct vfsops kernfs_vfsops;
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.10 2002/03/14 01:27:08 millert Exp $	*/
d68 1
a68 1
	struct kern_target *kf_kt;
d97 2
a98 2
int	kernfs_allocvp(struct kern_target *, struct mount *, struct vnode **);
struct kern_target 	*kernfs_findtarget(char *, int);
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.9 2002/02/17 04:29:52 art Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.9
log
@Cache vnodes, don't hold on to the root vnode, some cleanups, handle
physmem and usermem correctly.

kernel/2404 from peterw@@ifost.org.au with some small fixups from me.
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.8 2000/02/07 04:57:16 assar Exp $	*/
d86 7
a92 7
#define kernfs_fhtovp ((int (*) __P((struct mount *, struct fid *, \
	    struct vnode **)))eopnotsupp)
#define kernfs_quotactl ((int (*) __P((struct mount *, int, uid_t, caddr_t, \
	    struct proc *)))eopnotsupp)
#define kernfs_sysctl ((int (*) __P((int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *)))eopnotsupp)
#define kernfs_vget ((int (*) __P((struct mount *, ino_t, struct vnode **))) \
d94 10
a103 10
#define kernfs_vptofh ((int (*) __P((struct vnode *, struct fid *)))eopnotsupp)
#define kernfs_sync ((int (*) __P((struct mount *, int, struct ucred *, \
				   struct proc *)))nullop)
#define kernfs_checkexp ((int (*) __P((struct mount *, struct mbuf *,	\
	int *, struct ucred **)))eopnotsupp)

int	kernfs_init __P((struct vfsconf *));
int	kernfs_allocvp __P((struct kern_target *, struct mount *, struct vnode **));
struct kern_target 	*kernfs_findtarget __P((char *, int));
extern int (**kernfs_vnodeop_p) __P((void *));
@


1.8
log
@update to use new checkexp vfs operation
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.7 1998/12/28 05:51:38 millert Exp $	*/
d61 1
a69 4
struct kernfs_mount {
	struct vnode	*kf_root;	/* Root node */
};

d71 1
d73 8
d83 1
a83 1
#define VFSTOKERNFS(mp)	((struct kernfs_mount *)((mp)->mnt_data))
d100 3
@


1.8.12.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.8 2000/02/07 04:57:16 assar Exp $	*/
a60 1
#define KTT_PHYSMEM	99
d69 4
a73 1
	TAILQ_ENTRY(kernfs_node) list;
a74 8
	struct vnode	*kf_vnode;
#define kf_type		kf_kt->kt_type
#define kf_namlen	kf_kt->kt_namlen
#define kf_name		kf_kt->kt_name
#define kf_data		kf_kt->kt_data
#define kf_vtype	kf_kt->kt_vtype
#define kf_mode		kf_kt->kt_mode
#define kf_tag		kf_kt->kt_tag
d77 1
a77 1
#define KERNTOV(kn) ((struct vnode *)(kn)->kf_vnode)
d80 7
a86 7
#define kernfs_fhtovp ((int (*)(struct mount *, struct fid *, \
	    struct vnode **))eopnotsupp)
#define kernfs_quotactl ((int (*)(struct mount *, int, uid_t, caddr_t, \
	    struct proc *))eopnotsupp)
#define kernfs_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define kernfs_vget ((int (*)(struct mount *, ino_t, struct vnode **)) \
d88 7
a94 10
#define kernfs_vptofh ((int (*)(struct vnode *, struct fid *))eopnotsupp)
#define kernfs_sync ((int (*)(struct mount *, int, struct ucred *, \
				   struct proc *))nullop)
#define kernfs_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)

int	kernfs_init(struct vfsconf *);
int	kernfs_allocvp(struct kern_target *, struct mount *, struct vnode **);
struct kern_target 	*kernfs_findtarget(char *, int);
extern int (**kernfs_vnodeop_p)(void *);
@


1.8.2.1
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a60 1
#define KTT_PHYSMEM	99
d69 4
a73 1
	TAILQ_ENTRY(kernfs_node) list;
a74 8
	struct vnode	*kf_vnode;
#define kf_type		kf_kt->kt_type
#define kf_namlen	kf_kt->kt_namlen
#define kf_name		kf_kt->kt_name
#define kf_data		kf_kt->kt_data
#define kf_vtype	kf_kt->kt_vtype
#define kf_mode		kf_kt->kt_mode
#define kf_tag		kf_kt->kt_tag
d77 1
a77 1
#define KERNTOV(kn) ((struct vnode *)(kn)->kf_vnode)
a93 3
int	kernfs_init __P((struct vfsconf *));
int	kernfs_allocvp __P((struct kern_target *, struct mount *, struct vnode **));
struct kern_target 	*kernfs_findtarget __P((char *, int));
@


1.8.2.2
log
@Merge in -current from roughly a week ago
@
text
@d86 7
a92 7
#define kernfs_fhtovp ((int (*)(struct mount *, struct fid *, \
	    struct vnode **))eopnotsupp)
#define kernfs_quotactl ((int (*)(struct mount *, int, uid_t, caddr_t, \
	    struct proc *))eopnotsupp)
#define kernfs_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define kernfs_vget ((int (*)(struct mount *, ino_t, struct vnode **)) \
d94 5
a98 5
#define kernfs_vptofh ((int (*)(struct vnode *, struct fid *))eopnotsupp)
#define kernfs_sync ((int (*)(struct mount *, int, struct ucred *, \
				   struct proc *))nullop)
#define kernfs_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)
d100 4
a103 4
int	kernfs_init(struct vfsconf *);
int	kernfs_allocvp(struct kern_target *, struct mount *, struct vnode **);
struct kern_target 	*kernfs_findtarget(char *, int);
extern int (**kernfs_vnodeop_p)(void *);
@


1.8.2.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.8.2.2 2002/03/28 15:02:00 niklas Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.8.2.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d68 1
a68 1
	const struct kern_target *kf_kt;
d97 2
a98 3
int	kernfs_poll(void *);
int	kernfs_allocvp(const struct kern_target *, struct mount *, struct vnode **);
const struct kern_target *kernfs_findtarget(char *, int);
d100 1
a100 1
extern const struct vfsops kernfs_vfsops;
@


1.7
log
@kernfs_sync needs to be nullop, not eopnotsupp for unmount to work
w/o MNT_FORCE.
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.6 1997/11/06 05:58:35 csapuntz Exp $	*/
d81 1
a81 1
	    struct mbuf *, struct vnode **, int *, struct ucred **)))eopnotsupp)
d91 2
@


1.6
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.5 1997/10/06 20:20:24 deraadt Exp $	*/
d90 1
a90 1
				   struct proc *)))eopnotsupp)
@


1.5
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.3 1997/04/26 12:09:58 kstailey Exp $	*/
d79 12
@


1.4
log
@VFS Lite2 Changes
@
text
@a79 12
#define kernfs_fhtovp ((int (*) __P((struct mount *, struct fid *, \
	    struct mbuf *, struct vnode **, int *, struct ucred **)))eopnotsupp)
#define kernfs_quotactl ((int (*) __P((struct mount *, int, uid_t, caddr_t, \
	    struct proc *)))eopnotsupp)
#define kernfs_sysctl ((int (*) __P((int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *)))eopnotsupp)
#define kernfs_vget ((int (*) __P((struct mount *, ino_t, struct vnode **))) \
	    eopnotsupp)
#define kernfs_vptofh ((int (*) __P((struct vnode *, struct fid *)))eopnotsupp)
#define kernfs_sync ((int (*) __P((struct mount *, int, struct ucred *, \
				   struct proc *)))eopnotsupp)

@


1.3
log
@struct definitions in .h files and instances in .c file please.

Vic Able:

> While <miscfs/kernfs/kernfs.h> has a kernfs_node, it depends
> on a structure that's defined in <miscfs/kernfs/kernfs_vnops.c>.
> Oops!  That's not very social.  :-)

[I built a new kernel fine, but don't have time to run "make build"
 it is my intuition that this will not have any bad effects, but
 I didn't test.  Just back it out if it hurts you and I'll try again.]
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d79 12
@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d45 24
@


1.2.4.1
log
@show symbol tables form ddb to userland.
@
text
@d1 1
a1 1
/*	$OpenBSD: kernfs.h,v 1.2 1996/02/27 07:55:17 niklas Exp $	*/
a42 1
/* #define KERNFS_DIAGNOSTIC */
a48 31
typedef
enum {
	Kroot,		/* root dir */
	Kvar,		/* kernel variable */
	Ksym,		/* symbol table's dir */
	Ksymtab,	/* symbol table */

}	kernfs_type;

struct kern_target {
	u_char kt_type;
	u_char kt_namlen;
	char *kt_name;
	void *kt_data;
#define KTT_NULL         1
#define KTT_TIME         5
#define KTT_INT         17
#define KTT_STRING      31
#define KTT_HOSTNAME    47
#define KTT_AVENRUN     53
#define KTT_DEVICE      71
#define KTT_MSGBUF      89
#define KTT_USERMEM     91
#define KTT_DOMAIN      97
#define KTT_SYMTAB      101
	u_char kt_tag;
	kernfs_type kt_ktype;
	u_char kt_vtype;
	mode_t kt_mode;
};

d50 1
a50 11
	TAILQ_ENTRY(kernfs_node) list;
	kernfs_type	kf_type;
	u_long		kf_mode;
	u_long		kf_flags;
	struct vnode	*kf_vnode;
	union {
		struct kern_target *ukf_kt;
#define	kf_kt	__u.ukf_kt
		struct db_symtab   *ukf_st;
#define kf_st	__u.ukf_st
	} __u;
d54 1
a54 2
#define	VTOKERN(vp)	((struct kernfs_node *)(vp)->v_data)
#define KFSTOV(kfs)	((kfs)->kf_vnode)
a58 7

int kernfs_freevp __P((struct vnode *));
int kernfs_allocvp __P((struct mount *, struct vnode **, void *, kernfs_type));

void	kernfs_init __P((void));
int	kernfs_root __P((struct mount *, struct vnode **));

@


1.2.4.2
log
@last (i hope ;) branch commit for kernfs
/kern/sym/* working now (after i'll put all the ddb pieces in
it's cool.
@
text
@d1 2
a2 1
/*	$OpenBSD: kernfs.h,v 1.2.4.1 1996/10/14 13:38:02 mickey Exp $	*/
a4 1
 * Copyright (c) 1996, 1997 Michael Shalayeff
a58 1
typedef
d79 1
a79 1
} kern_target_t;
d87 6
a92 4
	kern_target_t	*kf_kt;
	/* this is for Ksymtab only */
	struct db_symtab*kf_st;
	struct exec	kf_xh;
d104 1
a104 2
int kernfs_allocvp
	__P((struct mount *, struct vnode **, kern_target_t *, kernfs_type));
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: kernfs.h,v 1.9 1995/03/29 22:08:22 briggs Exp $	*/
d56 1
a56 1
extern int (**kernfs_vnodeop_p)();
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
