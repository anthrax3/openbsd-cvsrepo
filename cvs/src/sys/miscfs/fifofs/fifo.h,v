head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.28
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.24
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.20
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.22
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.14
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.18
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.16
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.12
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.10
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.8
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.6
	OPENBSD_5_0:1.22.0.4
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.2
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.19.0.10
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.6
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.8
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.4
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.2
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.17.0.2
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.16.0.4
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.2
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.15.0.12
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.10
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.8
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.6
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.9.0.2
	UBC_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.12
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.10
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.8
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2010.12.21.20.14.43;	author thib;	state Exp;
branches;
next	1.21;

1.21
date	2010.09.10.16.34.08;	author thib;	state Exp;
branches;
next	1.20;

1.20
date	2010.09.06.23.44.10;	author thib;	state Exp;
branches;
next	1.19;

1.19
date	2008.05.03.14.41.29;	author thib;	state Exp;
branches;
next	1.18;

1.18
date	2008.04.24.17.39.45;	author thib;	state Exp;
branches;
next	1.17;

1.17
date	2007.12.27.13.59.12;	author thib;	state Exp;
branches;
next	1.16;

1.16
date	2007.01.16.17.52.18;	author thib;	state Exp;
branches;
next	1.15;

1.15
date	2004.03.02.04.42.52;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.23.16.51.13;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.23.28.10;	author millert;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2002.11.08.04.34.17;	author art;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2002.03.14.01.27.07;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.19.08.58.06;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.04.22.44.31;	author art;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2001.06.23.02.14.24;	author csapuntz;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.01.20.54.34;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	98.08.06.19.34.34;	author csapuntz;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	97.11.06.05.58.33;	author csapuntz;	state Exp;
branches;
next	1.4;

1.4
date	97.10.06.20.20.22;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.10.06.15.19.02;	author csapuntz;	state Exp;
branches;
next	1.2;

1.2
date	96.02.27.07.53.42;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.00;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.00;	author deraadt;	state Exp;
branches;
next	;

1.6.8.1
date	2001.05.14.22.32.53;	author niklas;	state Exp;
branches;
next	1.6.8.2;

1.6.8.2
date	2001.07.04.10.49.08;	author niklas;	state Exp;
branches;
next	1.6.8.3;

1.6.8.3
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.6.8.4;

1.6.8.4
date	2003.03.28.00.00.19;	author niklas;	state Exp;
branches;
next	1.6.8.5;

1.6.8.5
date	2003.06.07.11.06.05;	author ho;	state Exp;
branches;
next	1.6.8.6;

1.6.8.6
date	2004.02.19.10.57.20;	author niklas;	state Exp;
branches;
next	1.6.8.7;

1.6.8.7
date	2004.06.05.23.13.05;	author niklas;	state Exp;
branches;
next	;

1.9.2.1
date	2002.06.11.03.30.20;	author art;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2002.11.04.18.02.31;	author art;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2003.05.19.22.36.11;	author tedu;	state Exp;
branches;
next	1.9.2.4;

1.9.2.4
date	2003.05.20.04.05.38;	author tedu;	state Exp;
branches;
next	;

1.12.2.1
date	2004.03.03.08.50.13;	author brad;	state Exp;
branches;
next	;

1.13.2.1
date	2004.03.03.08.32.11;	author brad;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Bring back the "End the VOP experiment." diff, naddy's issues where
unrelated, and his alpha is much happier now.

OK deraadt@@
@
text
@/*	$OpenBSD: fifo.h,v 1.21 2010/09/10 16:34:08 thib Exp $	*/
/*	$NetBSD: fifo.h,v 1.10 1996/02/09 22:40:15 christos Exp $	*/

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)fifo.h	8.3 (Berkeley) 8/10/94
 */
#ifdef FIFO

/*
 * Prototypes for fifo operations on vnodes.
 */
int	fifo_badop(void *);
int	fifo_ebadf(void *);

int	fifo_open(void *);
int	fifo_close(void *);
int	fifo_read(void *);
int	fifo_write(void *);
int	fifo_ioctl(void *);
int	fifo_poll(void *);
int	fifo_kqfilter(void *);
int	fifo_inactive(void *);
int	fifo_reclaim(void *);
int	fifo_print(void *);
int	fifo_pathconf(void *);
int	fifo_advlock(void *);

void 	fifo_printinfo(struct vnode *);
#endif /* FIFO */
@


1.21
log
@Backout the VOP diff until the issues naddy was seeing on alpha (gcc3)
have been resolved.
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.20 2010/09/06 23:44:10 thib Exp $	*/
a55 4
int	fifo_vnoperate(void *);

extern int (**fifo_vnodeop_p)(void *);

@


1.20
log
@End the VOP experiment. Instead of the ridicolusly complicated operation
vector setup that has questionable features (that have, as far as I can
tell never been used in practice, atleast not in OpenBSD), remove all
the gunk and favor a simple struct full of function pointers that get
set directly by each of the filesystems.

Removes gobs of ugly code and makes things simpler by a magnitude.

The only downside of this is that we loose the vnoperate feature so
the spec/fifo operations of the filesystems need to be kept in sync
with specfs and fifofs, this is no big deal as the API it self is pretty
static.

Many thanks to armani@@ who pulled an earlier version of this diff to
current after c2k10 and Gabriel Kihlman on tech@@ for testing.

Liked by many. "come on, find your balls" deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.19 2008/05/03 14:41:29 thib Exp $	*/
d56 4
@


1.19
log
@Introduce vop_generic_bmap(); use it where applicable.
one thing of note, fifofs changes in that its bmap now
sets the runp too 0, but that was an oversight in the
old code.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.18 2008/04/24 17:39:45 thib Exp $	*/
a55 4
int	fifo_vnoperate(void *);

extern int (**fifo_vnodeop_p)(void *);

@


1.18
log
@remove useless defines for the vnode operations, and instead
init the op array functions with whatever the define was set
too.

ok dlg@@,blambert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.17 2007/12/27 13:59:12 thib Exp $	*/
a50 1
int	fifo_bmap(void *);
@


1.17
log
@fifofs, deadfs and specfs all have the same "trivial lookup routine that
always fails". Introduce vop_generic_lookup(), which is a trivial lookup
routine that always fails and use that instead, zap the redundant copies.

ok toby@@, tedu@@, art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.16 2007/01/16 17:52:18 thib Exp $	*/
a41 2
#define fifo_create	fifo_badop
#define fifo_mknod	fifo_badop
a43 3
#define fifo_access	fifo_ebadf
#define fifo_getattr	fifo_ebadf
#define fifo_setattr	fifo_ebadf
a48 11
#define fifo_fsync	nullop
#define fifo_remove	fifo_badop
#define fifo_revoke     vop_generic_revoke
#define fifo_link	fifo_badop
#define fifo_rename	fifo_badop
#define fifo_mkdir	fifo_badop
#define fifo_rmdir	fifo_badop
#define fifo_symlink	fifo_badop
#define fifo_readdir	fifo_badop
#define fifo_readlink	fifo_badop
#define fifo_abortop	fifo_badop
a50 2
#define fifo_lock       vop_generic_lock
#define fifo_unlock     vop_generic_unlock
a51 1
#define fifo_strategy	fifo_badop
a52 1
#define fifo_islocked	vop_generic_islocked
a54 2
#define fifo_reallocblks fifo_badop
#define fifo_bwrite	nullop
a56 1

@


1.16
log
@Retire VOP_LEASE(); It was a bit for NQNFS and has
effectively been a no-op for quite some time now,
without promise for future usage.

ok pedro@@
Testing by krw@@ (earlier diff)
and Johan Mson Lindman (tybollt@@solace.miun.se)
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.15 2004/03/02 04:42:52 tedu Exp $	*/
a41 1
int	fifo_lookup(void *);
@


1.15
log
@prevent memory leak on revoke by freeing resources in a real reclaim
function.
also check fifoinfo is valid before deref.
ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.14 2003/09/23 16:51:13 millert Exp $	*/
a51 1
#define fifo_lease_check nullop
@


1.14
log
@Replace select backends with poll backends.  selscan() and pollscan()
now call the poll backend.  With this change we implement greater
poll(2) functionality instead of emulating it via the select backend.
Adapted from NetBSD and including some changes from FreeBSD.
Tested by many, deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.13 2003/06/02 23:28:10 millert Exp $	*/
d67 2
a68 2
int fifo_inactive(void *);
#define fifo_reclaim	nullop
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.12 2002/11/08 04:34:17 art Exp $	*/
d54 1
a54 1
int	fifo_select(void *);
@


1.13.2.1
log
@MFC:
Fix from tedu@@

prevent memory leak on revoke by freeing resources in a real reclaim
function.
also check fifoinfo is valid before deref.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.13 2003/06/02 23:28:10 millert Exp $	*/
d67 2
a68 2
int	fifo_inactive(void *);
int	fifo_reclaim(void *);
@


1.12
log
@Implement simple vnodeop inheritance for specfs and fifofs.

The inheritace is implemented by setting the default vnodeop to a
bypass op that repeats the operation on the spec/fifo vnodeop vector.
The overhead of one extra indirect function call is worth the cleanup
and improved correctness.

This actually solves a few bugs where some vnode ops were missing from
some vectors (like kqfilter or revoke). (and even more on the ubc
branch).

Inspired by the same thing done in FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.11 2002/03/14 01:27:07 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.12.2.1
log
@MFC:
Fix from tedu@@

prevent memory leak on revoke by freeing resources in a real reclaim
function.
also check fifoinfo is valid before deref.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.12 2002/11/08 04:34:17 art Exp $	*/
d71 2
a72 2
int	fifo_inactive(void *);
int	fifo_reclaim(void *);
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.10 2001/12/19 08:58:06 art Exp $	*/
d85 2
@


1.10
log
@UBC was a disaster. It worked very good when it worked, but on some
machines or some configurations or in some phase of the moon (we actually
don't know when or why) files disappeared. Since we've not been able to
track down the problem in two weeks intense debugging and we need -current
to be stable, back out everything to a state it had before UBC.

We apologise for the inconvenience.
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.8 2001/06/23 02:14:24 csapuntz Exp $	*/
d43 2
a44 2
int	fifo_badop	__P((void *));
int	fifo_ebadf	__P((void *));
d46 1
a46 1
int	fifo_lookup	__P((void *));
d49 2
a50 2
int	fifo_open	__P((void *));
int	fifo_close	__P((void *));
d54 2
a55 2
int	fifo_read	__P((void *));
int	fifo_write	__P((void *));
d57 3
a59 3
int	fifo_ioctl	__P((void *));
int	fifo_select	__P((void *));
int	fifo_kqfilter	__P((void *));
d71 1
a71 1
int fifo_inactive __P((void *));
d75 1
a75 1
int	fifo_bmap	__P((void *));
d77 1
a77 1
int	fifo_print	__P((void *));
d79 2
a80 2
int	fifo_pathconf	__P((void *));
int	fifo_advlock	__P((void *));
d84 1
a84 1
void 	fifo_printinfo __P((struct vnode *));
d86 1
a86 1
extern int (**fifo_vnodeop_p) __P((void *));
@


1.9
log
@Readd VOP_MMAP, will be used soon. Right now it's just a question to
the filesystem if we're allowed to mmap the file.
@
text
@a82 1
#define fifo_mmap	fifo_badop
@


1.9.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.9 2001/12/04 22:44:31 art Exp $	*/
d43 2
a44 2
int	fifo_badop(void *);
int	fifo_ebadf(void *);
d46 1
a46 1
int	fifo_lookup(void *);
d49 2
a50 2
int	fifo_open(void *);
int	fifo_close(void *);
d54 2
a55 2
int	fifo_read(void *);
int	fifo_write(void *);
d57 3
a59 3
int	fifo_ioctl(void *);
int	fifo_select(void *);
int	fifo_kqfilter(void *);
d71 1
a71 1
int fifo_inactive(void *);
d75 1
a75 1
int	fifo_bmap(void *);
d77 1
a77 1
int	fifo_print(void *);
d79 2
a80 2
int	fifo_pathconf(void *);
int	fifo_advlock(void *);
d85 1
a85 1
void 	fifo_printinfo(struct vnode *);
d87 1
a87 1
extern int (**fifo_vnodeop_p)(void *);
@


1.9.2.2
log
@Huge sync to NetBSD plus lots of bugfixes.
 - uvm is as in netbsd-current minus uvm_map forward merge.
 - various locking bugfixes in nfs.
 - make sure that all specops and fifoops are correct in all vnodeop vectors.
 - make the filesystem code more like filsystem code and less like vm code.
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.9.2.1 2002/06/11 03:30:20 art Exp $	*/
a39 2
#include <miscfs/genfs/genfs.h>

a83 1
#define fifo_putpages	genfs_null_putpages
a87 33

/*
 * Since most of the vnode op vectors for spec files share a bunch of
 * operations, we maintain them here instead of duplicating them everywhere.
 *
 * XXX - vnodeop inheritance would be nice.
 */
#define FIFO_VNODEOP_DESCS \
	{ &vop_open_desc, fifo_open },			\
	{ &vop_lookup_desc, fifo_lookup },		\
	{ &vop_create_desc, fifo_create },		\
	{ &vop_mknod_desc, fifo_mknod },		\
	{ &vop_remove_desc, fifo_remove },		\
	{ &vop_link_desc, fifo_link },			\
	{ &vop_rename_desc, fifo_rename },		\
	{ &vop_mkdir_desc, fifo_mkdir },		\
	{ &vop_rmdir_desc, fifo_rmdir },		\
	{ &vop_symlink_desc, fifo_symlink },		\
	{ &vop_readdir_desc, fifo_readdir },		\
	{ &vop_readlink_desc, fifo_readlink },		\
	{ &vop_abortop_desc, fifo_abortop },		\
	{ &vop_select_desc, fifo_select },		\
	{ &vop_lease_desc, fifo_lease_check },		\
	{ &vop_ioctl_desc, fifo_ioctl },		\
	{ &vop_select_desc, fifo_select },		\
	{ &vop_revoke_desc, fifo_revoke },		\
	{ &vop_pathconf_desc, fifo_pathconf },		\
	{ &vop_advlock_desc, fifo_advlock },		\
	{ &vop_strategy_desc, fifo_strategy },  	\
	{ &vop_reallocblks_desc, fifo_reallocblks },	\
	{ &vop_mmap_desc, fifo_mmap },			\
	{ &vop_putpages_desc, fifo_putpages }
	
@


1.9.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d90 1
a90 1
int	fifo_vnoperate(void *);
d92 32
a123 1
extern int (**fifo_vnodeop_p)(void *);
@


1.9.2.4
log
@convert to genfs_nolock.  genfs_lock for kern and procfs
@
text
@d75 2
a76 2
#define fifo_lock	genfs_nolock
#define fifo_unlock	genfs_nounlock
d80 1
a80 1
#define fifo_islocked	genfs_noislocked
@


1.8
log
@Get rid of several unused vnode operations
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.7 2001/03/01 20:54:34 provos Exp $	*/
d83 1
@


1.7
log
@port kqueue changes from freebsd, plus all required openbsd glue.
okay deraadt@@, millert@@
from jlemon@@freebsd.org:
extend kqueue down to the device layer, backwards compatible approach
suggested by peter@@freebsd.org
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.6 1998/08/06 19:34:34 csapuntz Exp $	*/
a59 1
#define fifo_mmap	fifo_badop
a60 1
#define fifo_seek	fifo_badop
a80 2
#define fifo_blkatoff	fifo_badop
#define fifo_valloc	fifo_badop
a81 3
#define fifo_vfree	fifo_badop
#define fifo_truncate	nullop
#define fifo_update	nullop
@


1.6
log
@

Rename vop_revoke, vn_bwrite, vop_noislocked, vop_nolock, vop_nounlock
to be vop_generic_revoke, vop_generic_bwrite, vop_generic_islocked,
vop_generic_lock and vop_generic_unlock.

Create vop_generic_abortop and propogate change to all file systems.

Fix PR/371.

Get rid of locking in NULLFS (should be mostly unnecessary now except for
forced unmounts).
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.5 1997/11/06 05:58:33 csapuntz Exp $	*/
d59 1
@


1.6.8.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.7 2001/03/01 20:54:34 provos Exp $	*/
a58 1
int	fifo_kqfilter	__P((void *));
@


1.6.8.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.6.8.1 2001/05/14 22:32:53 niklas Exp $	*/
d60 1
d62 1
d83 2
d86 3
@


1.6.8.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 2
a44 2
int	fifo_badop(void *);
int	fifo_ebadf(void *);
d46 1
a46 1
int	fifo_lookup(void *);
d49 2
a50 2
int	fifo_open(void *);
int	fifo_close(void *);
d54 2
a55 2
int	fifo_read(void *);
int	fifo_write(void *);
d57 3
a59 3
int	fifo_ioctl(void *);
int	fifo_select(void *);
int	fifo_kqfilter(void *);
d71 1
a71 1
int fifo_inactive(void *);
d75 1
a75 1
int	fifo_bmap(void *);
d77 1
a77 1
int	fifo_print(void *);
d79 2
a80 2
int	fifo_pathconf(void *);
int	fifo_advlock(void *);
d84 1
a84 1
void 	fifo_printinfo(struct vnode *);
d86 1
a86 1
extern int (**fifo_vnodeop_p)(void *);
@


1.6.8.4
log
@Sync the SMP branch with 3.3
@
text
@a85 2
int	fifo_vnoperate(void *);

@


1.6.8.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.6.8.4 2003/03/28 00:00:19 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.6.8.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d54 1
a54 1
int	fifo_poll(void *);
@


1.6.8.7
log
@Merge with the trunk
@
text
@d67 2
a68 2
int	fifo_inactive(void *);
int	fifo_reclaim(void *);
@


1.5
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.4 1997/10/06 20:20:22 deraadt Exp $	*/
d63 1
a63 1
#define fifo_revoke     vop_revoke
d74 2
a75 2
#define fifo_lock       vop_nolock
#define fifo_unlock     vop_nounlock
d79 1
a79 1
#define fifo_islocked	vop_noislocked
@


1.4
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: fifo.h,v 1.2 1996/02/27 07:53:42 niklas Exp $	*/
d63 1
d72 1
a72 1
#define fifo_inactive	nullop
d74 2
a75 2
int	fifo_lock	__P((void *));
int	fifo_unlock	__P((void *));
d79 1
a79 1
#define fifo_islocked	nullop
@


1.3
log
@VFS Lite2 Changes
@
text
@a62 1
#define fifo_revoke     vop_revoke
d71 1
a71 1
int fifo_inactive __P((void *));
d73 2
a74 2
#define fifo_lock       vop_nolock
#define fifo_unlock     vop_nounlock
d78 1
a78 1
#define fifo_islocked	vop_noislocked
@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 1
d72 1
a72 1
#define fifo_inactive	nullop
d74 2
a75 2
int	fifo_lock	__P((void *));
int	fifo_unlock	__P((void *));
d79 1
a79 1
#define fifo_islocked	nullop
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: fifo.h,v 1.9 1994/12/13 20:14:38 mycroft Exp $	*/
d38 1
a39 1
#ifdef FIFO
d43 49
a91 2
int	fifo_badop(),
	fifo_ebadf();
a92 43
int	fifo_lookup __P((struct vop_lookup_args *));
#define fifo_create ((int (*) __P((struct  vop_create_args *)))fifo_badop)
#define fifo_mknod ((int (*) __P((struct  vop_mknod_args *)))fifo_badop)
int	fifo_open __P((struct vop_open_args *));
int	fifo_close __P((struct vop_close_args *));
#define fifo_access ((int (*) __P((struct  vop_access_args *)))fifo_ebadf)
#define fifo_getattr ((int (*) __P((struct  vop_getattr_args *)))fifo_ebadf)
#define fifo_setattr ((int (*) __P((struct  vop_setattr_args *)))fifo_ebadf)
int	fifo_read __P((struct vop_read_args *));
int	fifo_write __P((struct vop_write_args *));
#define fifo_lease_check ((int (*) __P((struct  vop_lease_args *)))nullop)
int	fifo_ioctl __P((struct vop_ioctl_args *));
int	fifo_select __P((struct vop_select_args *));
#define fifo_mmap ((int (*) __P((struct  vop_mmap_args *)))fifo_badop)
#define fifo_fsync ((int (*) __P((struct  vop_fsync_args *)))nullop)
#define fifo_seek ((int (*) __P((struct  vop_seek_args *)))fifo_badop)
#define fifo_remove ((int (*) __P((struct  vop_remove_args *)))fifo_badop)
#define fifo_link ((int (*) __P((struct  vop_link_args *)))fifo_badop)
#define fifo_rename ((int (*) __P((struct  vop_rename_args *)))fifo_badop)
#define fifo_mkdir ((int (*) __P((struct  vop_mkdir_args *)))fifo_badop)
#define fifo_rmdir ((int (*) __P((struct  vop_rmdir_args *)))fifo_badop)
#define fifo_symlink ((int (*) __P((struct  vop_symlink_args *)))fifo_badop)
#define fifo_readdir ((int (*) __P((struct  vop_readdir_args *)))fifo_badop)
#define fifo_readlink ((int (*) __P((struct  vop_readlink_args *)))fifo_badop)
#define fifo_abortop ((int (*) __P((struct  vop_abortop_args *)))fifo_badop)
#define fifo_inactive ((int (*) __P((struct  vop_inactive_args *)))nullop)
#define fifo_reclaim ((int (*) __P((struct  vop_reclaim_args *)))nullop)
int	fifo_lock __P((struct vop_lock_args *));
int	fifo_unlock __P((struct vop_unlock_args *));
int	fifo_bmap __P((struct vop_bmap_args *));
#define fifo_strategy ((int (*) __P((struct  vop_strategy_args *)))fifo_badop)
int	fifo_print __P((struct vop_print_args *));
#define fifo_islocked ((int (*) __P((struct  vop_islocked_args *)))nullop)
int	fifo_pathconf __P((struct vop_pathconf_args *));
int	fifo_advlock __P((struct vop_advlock_args *));
#define fifo_blkatoff ((int (*) __P((struct  vop_blkatoff_args *)))fifo_badop)
#define fifo_valloc ((int (*) __P((struct  vop_valloc_args *)))fifo_badop)
#define fifo_reallocblks \
	((int (*) __P((struct  vop_reallocblks_args *)))fifo_badop)
#define fifo_vfree ((int (*) __P((struct  vop_vfree_args *)))fifo_badop)
#define fifo_truncate ((int (*) __P((struct  vop_truncate_args *)))nullop)
#define fifo_update ((int (*) __P((struct  vop_update_args *)))nullop)
#define fifo_bwrite ((int (*) __P((struct  vop_bwrite_args *)))nullop)
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
