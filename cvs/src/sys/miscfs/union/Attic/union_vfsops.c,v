head	1.22;
access;
symbols
	OPENBSD_3_7:1.21.0.4
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.21.0.2
	OPENBSD_3_6_BASE:1.21
	SMP_SYNC_A:1.19
	SMP_SYNC_B:1.19
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.13
	UBC:1.12.0.2
	UBC_BASE:1.12
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_8:1.10.0.6
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.4
	OPENBSD_2_7_BASE:1.10
	SMP:1.10.0.2
	SMP_BASE:1.10
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2005.05.26.00.38.50;	author pedro;	state dead;
branches;
next	1.21;

1.21
date	2004.07.11.00.11.50;	author pedro;	state Exp;
branches;
next	1.20;

1.20
date	2004.07.10.15.18.45;	author pedro;	state Exp;
branches;
next	1.19;

1.19
date	2004.05.20.18.32.38;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2004.04.25.19.46.40;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2004.04.25.19.40.51;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.14.07.46.40;	author mickey;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.23.28.11;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.24.22.32.46;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.14.01.27.08;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.21.22.23.14;	author csapuntz;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2001.02.20.01.50.11;	author assar;	state Exp;
branches;
next	1.10;

1.10
date	2000.02.07.04.57.17;	author assar;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	99.05.31.17.34.50;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.02.08.22.41.42;	author tholo;	state Exp;
branches;
next	1.7;

1.7
date	97.11.06.05.58.52;	author csapuntz;	state Exp;
branches;
next	1.6;

1.6
date	97.10.06.21.04.50;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.10.06.15.19.17;	author csapuntz;	state Exp;
branches;
next	1.4;

1.4
date	97.09.11.05.26.16;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.08.01.05.58.58;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.02.27.08.09.02;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.03;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.03;	author deraadt;	state Exp;
branches;
next	;

1.10.2.1
date	2001.05.14.22.32.59;	author niklas;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2001.12.05.01.02.39;	author niklas;	state Exp;
branches;
next	1.10.2.3;

1.10.2.3
date	2002.03.28.15.02.01;	author niklas;	state Exp;
branches;
next	1.10.2.4;

1.10.2.4
date	2003.03.28.00.00.21;	author niklas;	state Exp;
branches;
next	1.10.2.5;

1.10.2.5
date	2003.06.07.11.06.06;	author ho;	state Exp;
branches;
next	1.10.2.6;

1.10.2.6
date	2004.02.19.10.57.20;	author niklas;	state Exp;
branches;
next	1.10.2.7;

1.10.2.7
date	2004.06.05.23.13.06;	author niklas;	state Exp;
branches;
next	;

1.12.2.1
date	2002.06.11.03.30.21;	author art;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2003.05.19.22.36.12;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.22
log
@bye bye, rest in attic ad infinitum, amen
@
text
@/*	$OpenBSD: union_vfsops.c,v 1.21 2004/07/11 00:11:50 pedro Exp $	*/
/*	$NetBSD: union_vfsops.c,v 1.10 1995/06/18 14:47:47 cgd Exp $	*/

/*
 * Copyright (c) 1994 The Regents of the University of California.
 * Copyright (c) 1994 Jan-Simon Pendry.
 * All rights reserved.
 *
 * This code is derived from software donated to Berkeley by
 * Jan-Simon Pendry.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)union_vfsops.c	8.13 (Berkeley) 12/10/94
 */

/*
 * Union Layer
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/proc.h>
#include <sys/vnode.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/malloc.h>
#include <sys/filedesc.h>
#include <sys/queue.h>
#include <sys/stat.h>

#include <miscfs/union/union.h>

int union_mount(struct mount *, const char *, void *, struct nameidata *,
		     struct proc *);
int union_start(struct mount *, int, struct proc *);
int union_unmount(struct mount *, int, struct proc *);
int union_root(struct mount *, struct vnode **);
int union_statfs(struct mount *, struct statfs *, struct proc *);

/*
 * Mount union filesystem
 */
int
union_mount(mp, path, data, ndp, p)
	struct mount *mp;
	const char *path;
	void *data;
	struct nameidata *ndp;
	struct proc *p;
{
	int error = 0;
	struct union_args args;
	struct vnode *lowerrootvp = NULLVP;
	struct vnode *upperrootvp = NULLVP;
	struct union_mount *um = 0;
	struct ucred *cred = 0;
	char *cp;
	int len;
	size_t size;

#ifdef UNION_DIAGNOSTIC
	printf("union_mount(mp = %p)\n", mp);
#endif

	/*
	 * Update is a no-op
	 */
	if (mp->mnt_flag & MNT_UPDATE) {
		/*
		 * Need to provide.
		 * 1. a way to convert between rdonly and rdwr mounts.
		 * 2. support for nfs exports.
		 */
		error = EOPNOTSUPP;
		goto bad;
	}

	/*
	 * Get argument
	 */
	error = copyin(data, &args, sizeof(struct union_args));
	if (error)
		goto bad;

	lowerrootvp = mp->mnt_vnodecovered;
	VREF(lowerrootvp);

	/*
	 * Find upper node.
	 */
	NDINIT(ndp, LOOKUP, FOLLOW | LOCKLEAF, UIO_USERSPACE, args.target, p);

	if ((error = namei(ndp)) != 0)
		goto bad;

	upperrootvp = ndp->ni_vp;

	if (upperrootvp->v_type != VDIR) {
		error = EINVAL;
		goto bad_unlock;
	}
	
	um = malloc(sizeof(struct union_mount), M_MISCFSMNT, M_WAITOK);

	/*
	 * Keep a held reference to the target vnodes.
	 * They are vrele'd in union_unmount.
	 *
	 * Depending on the _BELOW flag, the filesystems are
	 * viewed in a different order.  In effect, this is the
	 * same as providing a mount under option to the mount syscall.
	 */

	um->um_op = args.mntflags & UNMNT_OPMASK;
	switch (um->um_op) {
	case UNMNT_ABOVE:
		um->um_lowervp = lowerrootvp;
		um->um_uppervp = upperrootvp;
		break;

	case UNMNT_BELOW:
		um->um_lowervp = upperrootvp;
		um->um_uppervp = lowerrootvp;
		break;

	case UNMNT_REPLACE:
		vrele(lowerrootvp);
		lowerrootvp = NULLVP;
		um->um_uppervp = upperrootvp;
		um->um_lowervp = lowerrootvp;
		break;

	default:
		error = EINVAL;
		goto bad_unlock;
	}

	/*
	 * Unless the mount is readonly, ensure that the top layer
	 * supports whiteout operations
	 */
	if ((mp->mnt_flag & MNT_RDONLY) == 0) {
		error = VOP_WHITEOUT(um->um_uppervp,
		    (struct componentname *) 0, LOOKUP);
		if (error)
			goto bad_unlock;
	}

	VOP_UNLOCK(ndp->ni_vp, 0, p);

	um->um_cred = p->p_ucred;
	crhold(um->um_cred);
	um->um_cmode = UN_DIRMODE &~ p->p_fd->fd_cmask;

	/*
	 * Depending on what you think the MNT_LOCAL flag might mean,
	 * you may want the && to be || on the conditional below.
	 * At the moment it has been defined that the filesystem is
	 * only local if it is all local, ie the MNT_LOCAL flag implies
	 * that the entire namespace is local.  If you think the MNT_LOCAL
	 * flag implies that some of the files might be stored locally
	 * then you will want to change the conditional.
	 */
	if (um->um_op == UNMNT_ABOVE) {
		if (((um->um_lowervp == NULLVP) ||
		     (um->um_lowervp->v_mount->mnt_flag & MNT_LOCAL)) &&
		    (um->um_uppervp->v_mount->mnt_flag & MNT_LOCAL))
			mp->mnt_flag |= MNT_LOCAL;
	}

	/*
	 * Copy in the upper layer's RDONLY flag.  This is for the benefit
	 * of lookup() which explicitly checks the flag, rather than asking
	 * the filesystem for it's own opinion.  This means, that an update
	 * mount of the underlying filesystem to go from rdonly to rdwr
	 * will leave the unioned view as read-only.
	 */
	mp->mnt_flag |= (um->um_uppervp->v_mount->mnt_flag & MNT_RDONLY);

	mp->mnt_data = um;
	vfs_getnewfsid(mp);

	(void) copyinstr(path, mp->mnt_stat.f_mntonname, MNAMELEN - 1, &size);
	bzero(mp->mnt_stat.f_mntonname + size, MNAMELEN - size);

	switch (um->um_op) {
	case UNMNT_ABOVE:
		cp = "<above>:";
		break;
	case UNMNT_BELOW:
		cp = "<below>:";
		break;
	case UNMNT_REPLACE:
		cp = "";
		break;
	default:
		cp = "<invalid>:";
#ifdef DIAGNOSTIC
		panic("union_mount: bad um_op");
#endif
		break;
	}
	len = strlen(cp);
	bcopy(cp, mp->mnt_stat.f_mntfromname, len);

	cp = mp->mnt_stat.f_mntfromname + len;
	len = MNAMELEN - len;

	(void) copyinstr(args.target, cp, len - 1, &size);
	bzero(cp + size, len - size);

#ifdef UNION_DIAGNOSTIC
	printf("union_mount: from %s, on %s\n",
		mp->mnt_stat.f_mntfromname, mp->mnt_stat.f_mntonname);
#endif
	return (0);

bad_unlock:
	VOP_UNLOCK(ndp->ni_vp, 0, p);
bad:
	if (um)
		free(um, M_MISCFSMNT);
	if (cred)
		crfree(cred);
	if (upperrootvp)
		vrele(upperrootvp);
	if (lowerrootvp)
		vrele(lowerrootvp);
	return (error);
}

/*
 * VFS start.  Nothing needed here - the start routine
 * on the underlying filesystem(s) will have been called
 * when that filesystem was mounted.
 */
 /*ARGSUSED*/
int
union_start(mp, flags, p)
	struct mount *mp;
	int flags;
	struct proc *p;
{

	return (0);
}


int union_unmount_count_vnode(struct vnode *vp, void *args);

int
union_unmount_count_vnode(struct vnode *vp, void *args) {
	int *n = args;

	*n = *n + 1;
	simple_unlock(&vp->v_interlock);
	return (0);
}

/*
 * Free reference to union layer
 */
int
union_unmount(mp, mntflags, p)
	struct mount *mp;
	int mntflags;
	struct proc *p;
{
	struct union_mount *um = MOUNTTOUNIONMOUNT(mp);
	struct vnode *um_rootvp;
	int error;
	int freeing;
	int flags = 0;

#ifdef UNION_DIAGNOSTIC
	printf("union_unmount(mp = %p)\n", mp);
#endif

	if (mntflags & MNT_FORCE) {
		flags |= FORCECLOSE;
	}

	if ((error = union_root(mp, &um_rootvp)) != 0)
		return (error);

	/*
	 * Keep flushing vnodes from the mount list.
	 * This is needed because of the un_pvp held
	 * reference to the parent vnode.
	 * If more vnodes have been freed on a given pass,
	 * the try again.  The loop will iterate at most
	 * (d) times, where (d) is the maximum tree depth
	 * in the filesystem.
	 */
	for (freeing = 0; vflush(mp, um_rootvp, flags) != 0;) {
		int n = 0;

		/* count #vnodes held on mount list */
		vfs_mount_foreach_vnode(mp, union_unmount_count_vnode, &n);

		/* if this is unchanged then stop */
		if (n == freeing)
			break;

		/* otherwise try once more time */
		freeing = n;
	}

	/* At this point the root vnode should have a single reference */
	if (um_rootvp->v_usecount > 1) {
		vput(um_rootvp);
		return (EBUSY);
	}

#ifdef UNION_DIAGNOSTIC
	vprint("union root", um_rootvp);
#endif	 
	/*
	 * Discard references to upper and lower target vnodes.
	 */
	if (um->um_lowervp)
		vrele(um->um_lowervp);
	vrele(um->um_uppervp);
	crfree(um->um_cred);
	/*
	 * Release reference on underlying root vnode
	 */
	vput(um_rootvp);
	/*
	 * And blow it away for future re-use
	 */
	vgone(um_rootvp);
	/*
	 * Finally, throw away the union_mount structure
	 */
	free(mp->mnt_data, M_MISCFSMNT);
	mp->mnt_data = 0;
	return (0);
}

int
union_root(mp, vpp)
	struct mount *mp;
	struct vnode **vpp;
{
	struct proc *p = curproc;
	struct union_mount *um = MOUNTTOUNIONMOUNT(mp);
	int error;
	int loselock;

	/*
	 * Return locked reference to root.
	 */
	VREF(um->um_uppervp);
	if ((um->um_op == UNMNT_BELOW) &&
	     VOP_ISLOCKED(um->um_uppervp)) {
		loselock = 1;
	} else {
		vn_lock(um->um_uppervp, LK_EXCLUSIVE | LK_RETRY, p);
		loselock = 0;
	}
	if (um->um_lowervp)
		VREF(um->um_lowervp);
	error = union_allocvp(vpp, mp,
			      (struct vnode *) 0,
			      (struct vnode *) 0,
			      (struct componentname *) 0,
			      um->um_uppervp,
			      um->um_lowervp,
			      1);

	if (error) {
		if (loselock)
			vrele(um->um_uppervp);
		else
			vput(um->um_uppervp);
		if (um->um_lowervp)
			vrele(um->um_lowervp);
	} else {
		if (loselock)
			VTOUNION(*vpp)->un_flags &= ~UN_ULOCK;
	}

	return (error);
}

int
union_statfs(mp, sbp, p)
	struct mount *mp;
	struct statfs *sbp;
	struct proc *p;
{
	int error;
	struct union_mount *um = MOUNTTOUNIONMOUNT(mp);
	struct statfs mstat;
	int lbsize;

#ifdef UNION_DIAGNOSTIC
	printf("union_statfs(mp = %p, lvp = %p, uvp = %p)\n", mp,
			um->um_lowervp,
	       		um->um_uppervp);
#endif

	bzero(&mstat, sizeof(mstat));

	if (um->um_lowervp) {
		error = VFS_STATFS(um->um_lowervp->v_mount, &mstat, p);
		if (error)
			return (error);
	}

	/* now copy across the "interesting" information and fake the rest */
#if 0
	sbp->f_flags = mstat.f_flags;
	sbp->f_bsize = mstat.f_bsize;
	sbp->f_iosize = mstat.f_iosize;
#endif
	lbsize = mstat.f_bsize;
	sbp->f_blocks = mstat.f_blocks;
	sbp->f_bfree = mstat.f_bfree;
	sbp->f_bavail = mstat.f_bavail;
	sbp->f_files = mstat.f_files;
	sbp->f_ffree = mstat.f_ffree;

	error = VFS_STATFS(um->um_uppervp->v_mount, &mstat, p);
	if (error)
		return (error);

	sbp->f_flags = mstat.f_flags;
	sbp->f_bsize = mstat.f_bsize;
	sbp->f_iosize = mstat.f_iosize;

	/*
	 * if the lower and upper blocksizes differ, then frig the
	 * block counts so that the sizes reported by df make some
	 * kind of sense.  none of this makes sense though.
	 */

	if (mstat.f_bsize != lbsize) {
		sbp->f_blocks = sbp->f_blocks * lbsize / mstat.f_bsize;
		sbp->f_bfree = sbp->f_bfree * lbsize / mstat.f_bsize;
		sbp->f_bavail = sbp->f_bavail * lbsize / mstat.f_bsize;
	}
	sbp->f_blocks += mstat.f_blocks;
	sbp->f_bfree += mstat.f_bfree;
	sbp->f_bavail += mstat.f_bavail;
	sbp->f_files += mstat.f_files;
	sbp->f_ffree += mstat.f_ffree;

	if (sbp != &mp->mnt_stat) {
		bcopy(&mp->mnt_stat.f_fsid, &sbp->f_fsid, sizeof(sbp->f_fsid));
		bcopy(mp->mnt_stat.f_mntonname, sbp->f_mntonname, MNAMELEN);
		bcopy(mp->mnt_stat.f_mntfromname, sbp->f_mntfromname, MNAMELEN);
	}
	strncpy(sbp->f_fstypename, mp->mnt_vfc->vfc_name, MFSNAMELEN);
	return (0);
}

#define union_sync ((int (*)(struct mount *, int, struct ucred *, \
				  struct proc *))nullop)

#define union_fhtovp ((int (*)(struct mount *, struct fid *, \
	    struct vnode **))eopnotsupp)
#define union_quotactl ((int (*)(struct mount *, int, uid_t, caddr_t, \
	    struct proc *))eopnotsupp)
#define union_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define union_vget ((int (*)(struct mount *, ino_t, struct vnode **)) \
	    eopnotsupp)
#define union_vptofh ((int (*)(struct vnode *, struct fid *))eopnotsupp)
#define union_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)

const struct vfsops union_vfsops = {
	union_mount,
	union_start,
	union_unmount,
	union_root,
	union_quotactl,
	union_statfs,
	union_sync,
	union_vget,
	union_fhtovp,
	union_vptofh,
	union_init,
	union_sysctl,
	union_checkexp
};
@


1.21
log
@explicitly initialize a variable that is used to control the vnode
flushing loop, otherwise we could hard-lock the machine when unmounting
an union filesystem

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.20 2004/07/10 15:18:45 pedro Exp $	*/
@


1.20
log
@make sure we pass vop_whiteout() a locked vnode, ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.19 2004/05/20 18:32:38 tedu Exp $	*/
d321 1
a321 1
		int n;
@


1.19
log
@remove more caddr_t
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.18 2004/04/25 19:46:40 tedu Exp $	*/
d116 1
a116 1
	NDINIT(ndp, LOOKUP, FOLLOW, UIO_USERSPACE, args.target, p);
d125 1
a125 1
		goto bad;
d160 1
a160 1
		goto bad;
d168 2
a169 1
		error = VOP_WHITEOUT(um->um_uppervp, (struct componentname *) 0, LOOKUP);
d171 1
a171 1
			goto bad;
d174 2
d243 2
@


1.18
log
@useless casts
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.17 2004/04/25 19:40:51 tedu Exp $	*/
d202 1
a202 1
	mp->mnt_data = (qaddr_t)um;
@


1.17
log
@if you don't want the parent, don't use WANTPARENT.  from pedro martelletto
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.16 2003/08/14 07:46:40 mickey Exp $	*/
d128 1
a128 2
	um = (struct union_mount *) malloc(sizeof(struct union_mount),
				M_MISCFSMNT, M_WAITOK);
@


1.16
log
@constify vfsops; tedu@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.15 2003/06/02 23:28:11 millert Exp $	*/
d116 1
a116 2
	NDINIT(ndp, LOOKUP, FOLLOW|WANTPARENT,
	       UIO_USERSPACE, args.target, p);
a121 2
	vrele(ndp->ni_dvp);
	ndp->ni_dvp = NULL;
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.14 2003/02/24 22:32:46 tedu Exp $	*/
d498 1
a498 1
struct vfsops union_vfsops = {
@


1.14
log
@use M_MISCFSMNT instead of M_UFSMNT for mount data

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.13 2002/03/14 01:27:08 millert Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.13
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.12 2001/11/21 22:23:14 csapuntz Exp $	*/
d136 1
a136 1
				M_UFSMNT, M_WAITOK);	/* XXX */
d250 1
a250 1
		free(um, M_UFSMNT);
d364 1
a364 1
	free(mp->mnt_data, M_UFSMNT);	/* XXX */
@


1.12
log
@Use vfs_mount_foreach_vnode
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.11 2001/02/20 01:50:11 assar Exp $	*/
d62 6
a67 6
int union_mount __P((struct mount *, const char *, void *, struct nameidata *,
		     struct proc *));
int union_start __P((struct mount *, int, struct proc *));
int union_unmount __P((struct mount *, int, struct proc *));
int union_root __P((struct mount *, struct vnode **));
int union_statfs __P((struct mount *, struct statfs *, struct proc *));
d487 2
a488 2
#define union_sync ((int (*) __P((struct mount *, int, struct ucred *, \
				  struct proc *)))nullop)
d490 7
a496 7
#define union_fhtovp ((int (*) __P((struct mount *, struct fid *, \
	    struct vnode **)))eopnotsupp)
#define union_quotactl ((int (*) __P((struct mount *, int, uid_t, caddr_t, \
	    struct proc *)))eopnotsupp)
#define union_sysctl ((int (*) __P((int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *)))eopnotsupp)
#define union_vget ((int (*) __P((struct mount *, ino_t, struct vnode **))) \
d498 3
a500 3
#define union_vptofh ((int (*) __P((struct vnode *, struct fid *)))eopnotsupp)
#define union_checkexp ((int (*) __P((struct mount *, struct mbuf *,	\
	int *, struct ucred **)))eopnotsupp)
@


1.12.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.12 2001/11/21 22:23:14 csapuntz Exp $	*/
d62 6
a67 6
int union_mount(struct mount *, const char *, void *, struct nameidata *,
		     struct proc *);
int union_start(struct mount *, int, struct proc *);
int union_unmount(struct mount *, int, struct proc *);
int union_root(struct mount *, struct vnode **);
int union_statfs(struct mount *, struct statfs *, struct proc *);
d487 2
a488 2
#define union_sync ((int (*)(struct mount *, int, struct ucred *, \
				  struct proc *))nullop)
d490 7
a496 7
#define union_fhtovp ((int (*)(struct mount *, struct fid *, \
	    struct vnode **))eopnotsupp)
#define union_quotactl ((int (*)(struct mount *, int, uid_t, caddr_t, \
	    struct proc *))eopnotsupp)
#define union_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define union_vget ((int (*)(struct mount *, ino_t, struct vnode **)) \
d498 3
a500 3
#define union_vptofh ((int (*)(struct vnode *, struct fid *))eopnotsupp)
#define union_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)
@


1.12.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d136 1
a136 1
				M_MISCFSMNT, M_WAITOK);
d250 1
a250 1
		free(um, M_MISCFSMNT);
d364 1
a364 1
	free(mp->mnt_data, M_MISCFSMNT);
@


1.11
log
@use void * consistently in vfs_mount and sys_mount.  ok @@art
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.10 2000/02/07 04:57:17 assar Exp $	*/
d276 12
a323 1
		struct vnode *vp;
d327 1
a327 4
		for (n = 0, vp = mp->mnt_vnodelist.lh_first;
				vp != NULLVP;
				vp = vp->v_mntvnodes.le_next)
			n++;
@


1.10
log
@update to use new checkexp vfs operation
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.9 1999/05/31 17:34:50 millert Exp $	*/
d62 1
a62 1
int union_mount __P((struct mount *, const char *, caddr_t, struct nameidata *,
d76 1
a76 1
	caddr_t data;
d110 1
a110 1
	error = copyin(data, (caddr_t)&args, sizeof(struct union_args));
@


1.10.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.11 2001/02/20 01:50:11 assar Exp $	*/
d62 1
a62 1
int union_mount __P((struct mount *, const char *, void *, struct nameidata *,
d76 1
a76 1
	void *data;
d110 1
a110 1
	error = copyin(data, &args, sizeof(struct union_args));
@


1.10.2.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a275 12

int union_unmount_count_vnode(struct vnode *vp, void *args);

int
union_unmount_count_vnode(struct vnode *vp, void *args) {
	int *n = args;

	*n = *n + 1;
	simple_unlock(&vp->v_interlock);
	return (0);
}

d312 1
d316 4
a319 1
		vfs_mount_foreach_vnode(mp, union_unmount_count_vnode, &n);
@


1.10.2.3
log
@Merge in -current from roughly a week ago
@
text
@d62 6
a67 6
int union_mount(struct mount *, const char *, void *, struct nameidata *,
		     struct proc *);
int union_start(struct mount *, int, struct proc *);
int union_unmount(struct mount *, int, struct proc *);
int union_root(struct mount *, struct vnode **);
int union_statfs(struct mount *, struct statfs *, struct proc *);
d487 2
a488 2
#define union_sync ((int (*)(struct mount *, int, struct ucred *, \
				  struct proc *))nullop)
d490 7
a496 7
#define union_fhtovp ((int (*)(struct mount *, struct fid *, \
	    struct vnode **))eopnotsupp)
#define union_quotactl ((int (*)(struct mount *, int, uid_t, caddr_t, \
	    struct proc *))eopnotsupp)
#define union_sysctl ((int (*)(int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *))eopnotsupp)
#define union_vget ((int (*)(struct mount *, ino_t, struct vnode **)) \
d498 3
a500 3
#define union_vptofh ((int (*)(struct vnode *, struct fid *))eopnotsupp)
#define union_checkexp ((int (*)(struct mount *, struct mbuf *,	\
	int *, struct ucred **))eopnotsupp)
@


1.10.2.4
log
@Sync the SMP branch with 3.3
@
text
@d136 1
a136 1
				M_MISCFSMNT, M_WAITOK);
d250 1
a250 1
		free(um, M_MISCFSMNT);
d364 1
a364 1
	free(mp->mnt_data, M_MISCFSMNT);
@


1.10.2.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.10.2.4 2003/03/28 00:00:21 niklas Exp $	*/
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.10.2.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d498 1
a498 1
const struct vfsops union_vfsops = {
@


1.10.2.7
log
@Merge with the trunk
@
text
@d116 2
a117 1
	NDINIT(ndp, LOOKUP, FOLLOW, UIO_USERSPACE, args.target, p);
d123 2
d131 2
a132 1
	um = malloc(sizeof(struct union_mount), M_MISCFSMNT, M_WAITOK);
d206 1
a206 1
	mp->mnt_data = um;
@


1.9
log
@New struct statfs with mount options.  NOTE: this replaces statfs(2),
fstatfs(2), and getfsstat(2) so you will need to build a new kernel
before doing a "make build" or you will get "unimplemented syscall" errors.

The new struct statfs has the following featuires:
o Has a u_int32_t flags field--now softdep can have a real flag.

o Uses u_int32_t instead of longs (nicer on the alpha).  Note: the man
page used to lie about setting invalid/unused fields to -1.  SunOS does
that but our code never has.

o Gets rid of f_type completely.  It hasn't been used since NetBSD 0.9
and having it there but always 0 is confusing.  It is conceivable
that this may cause some old code to not compile but that is better
than silently breaking.

o Adds a mount_info union that contains the FSTYPE_args struct.  This
means that "mount" can now tell you all the options a filesystem was
mounted with.  This is especially nice for NFS.

Other changes:
o The linux statfs emulation didn't convert between BSD fs names
  and linux f_type numbers.  Now it does, since the BSD f_type
  number is useless to linux apps (and has been removed anyway)

o FreeBSD's struct statfs is different from our (both old and new)
and thus needs conversion.  Previously, the OpenBSD syscalls
were used without any real translation.

o mount(8) will now show extra info when invoked with no arguments.
However, to see *everything* you need to use the -v (verbose) flag.
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.8 1998/02/08 22:41:42 tholo Exp $	*/
d483 1
a483 1
	    struct mbuf *, struct vnode **, int *, struct ucred **)))eopnotsupp)
d491 2
d506 2
a507 1
	union_sysctl
@


1.8
log
@Updates to match type changes in syscall tables
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.7 1997/11/06 05:58:52 csapuntz Exp $	*/
a433 1
	sbp->f_type = mstat.f_type;
a448 1
	sbp->f_type = 0;
a470 1
		sbp->f_type = mp->mnt_vfc->vfc_typenum;
@


1.7
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.6 1997/10/06 21:04:50 deraadt Exp $	*/
d62 1
a62 1
int union_mount __P((struct mount *, char *, caddr_t, struct nameidata *,
d75 1
a75 1
	char *path;
@


1.6
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.4 1997/09/11 05:26:16 millert Exp $	*/
a66 1
int union_quotactl __P((struct mount *, int, uid_t, caddr_t, struct proc *));
a67 5
int union_sync __P((struct mount *, int, struct ucred *, struct proc *));
int union_vget __P((struct mount *, ino_t, struct vnode **));
int union_fhtovp __P((struct mount *, struct fid *, struct mbuf *,
		      struct vnode **, int *, struct ucred **));
int union_vptofh __P((struct vnode *, struct fid *));
d211 1
a211 1
	getnewfsid(mp, makefstype(MOUNT_UNION));
a289 1
	extern int doforce;
a295 3
		/* union can never be rootfs so don't check for it */
		if (!doforce)
			return (EINVAL);
d366 1
d379 1
a379 1
		VOP_LOCK(um->um_uppervp);
d393 4
a396 3
		if (!loselock)
			VOP_UNLOCK(um->um_uppervp);
		vrele(um->um_uppervp);
a406 13
/*ARGSUSED*/
int
union_quotactl(mp, cmd, uid, arg, p)
	struct mount *mp;
	int cmd;
	uid_t uid;
	caddr_t arg;
	struct proc *p;
{

	return (EOPNOTSUPP);
}

d473 1
d478 1
a478 1
	strncpy(sbp->f_fstypename, mp->mnt_op->vfs_name, MFSNAMELEN);
d482 2
a483 14
/*ARGSUSED*/
int
union_sync(mp, waitfor, cred, p)
	struct mount *mp;
	int waitfor;
	struct ucred *cred;
	struct proc *p;
{

	/*
	 * XXX - Assumes no data cached at union layer.
	 */
	return (0);
}
d485 9
a493 34
/*ARGSUSED*/
int
union_vget(mp, ino, vpp)
	struct mount *mp;
	ino_t ino;
	struct vnode **vpp;
{
	
	return (EOPNOTSUPP);
}

/*ARGSUSED*/
int
union_fhtovp(mp, fidp, nam, vpp, exflagsp, credanonp)
	struct mount *mp;
	struct fid *fidp;
	struct mbuf *nam;
	struct vnode **vpp;
	int *exflagsp;
	struct ucred **credanonp;
{

	return (EOPNOTSUPP);
}

/*ARGSUSED*/
int
union_vptofh(vp, fhp)
	struct vnode *vp;
	struct fid *fhp;
{

	return (EOPNOTSUPP);
}
a495 1
	MOUNT_UNION,
d507 1
@


1.5
log
@VFS Lite2 Changes
@
text
@d67 1
d69 5
d217 1
a217 1
	vfs_getnewfsid(mp);
d296 1
d303 3
a375 1
	struct proc *p = curproc;
d388 1
a388 1
		vn_lock(um->um_uppervp, LK_EXCLUSIVE | LK_RETRY, p);
d402 3
a404 4
		if (loselock)
			vrele(um->um_uppervp);
		else
			vput(um->um_uppervp);
d415 13
a493 1
		sbp->f_type = mp->mnt_vfc->vfc_typenum;
d498 1
a498 1
	strncpy(sbp->f_fstypename, mp->mnt_vfc->vfc_name, MFSNAMELEN);
d502 14
a515 2
#define union_sync ((int (*) __P((struct mount *, int, struct ucred *, \
				  struct proc *)))nullop)
d517 34
a550 9
#define union_fhtovp ((int (*) __P((struct mount *, struct fid *, \
	    struct mbuf *, struct vnode **, int *, struct ucred **)))eopnotsupp)
#define union_quotactl ((int (*) __P((struct mount *, int, uid_t, caddr_t, \
	    struct proc *)))eopnotsupp)
#define union_sysctl ((int (*) __P((int *, u_int, void *, size_t *, void *, \
	    size_t, struct proc *)))eopnotsupp)
#define union_vget ((int (*) __P((struct mount *, ino_t, struct vnode **))) \
	    eopnotsupp)
#define union_vptofh ((int (*) __P((struct vnode *, struct fid *)))eopnotsupp)
d553 1
a564 1
	union_sysctl
@


1.4
log
@Fix {KERNFS,NULLFS,UMAPFS,UNION}_DIAGNOSTIC kernel compilation errors.
From Alan Barrett <apb@@iafrica.com> with some changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.3 1997/08/01 05:58:58 millert Exp $	*/
a66 1
int union_quotactl __P((struct mount *, int, uid_t, caddr_t, struct proc *));
a67 5
int union_sync __P((struct mount *, int, struct ucred *, struct proc *));
int union_vget __P((struct mount *, ino_t, struct vnode **));
int union_fhtovp __P((struct mount *, struct fid *, struct mbuf *,
		      struct vnode **, int *, struct ucred **));
int union_vptofh __P((struct vnode *, struct fid *));
d211 1
a211 1
	getnewfsid(mp, makefstype(MOUNT_UNION));
a289 1
	extern int doforce;
a295 3
		/* union can never be rootfs so don't check for it */
		if (!doforce)
			return (EINVAL);
d366 1
d379 1
a379 1
		VOP_LOCK(um->um_uppervp);
d393 4
a396 3
		if (!loselock)
			VOP_UNLOCK(um->um_uppervp);
		vrele(um->um_uppervp);
a406 13
/*ARGSUSED*/
int
union_quotactl(mp, cmd, uid, arg, p)
	struct mount *mp;
	int cmd;
	uid_t uid;
	caddr_t arg;
	struct proc *p;
{

	return (EOPNOTSUPP);
}

d473 1
d478 1
a478 1
	strncpy(sbp->f_fstypename, mp->mnt_op->vfs_name, MFSNAMELEN);
d482 2
a483 14
/*ARGSUSED*/
int
union_sync(mp, waitfor, cred, p)
	struct mount *mp;
	int waitfor;
	struct ucred *cred;
	struct proc *p;
{

	/*
	 * XXX - Assumes no data cached at union layer.
	 */
	return (0);
}
d485 9
a493 34
/*ARGSUSED*/
int
union_vget(mp, ino, vpp)
	struct mount *mp;
	ino_t ino;
	struct vnode **vpp;
{
	
	return (EOPNOTSUPP);
}

/*ARGSUSED*/
int
union_fhtovp(mp, fidp, nam, vpp, exflagsp, credanonp)
	struct mount *mp;
	struct fid *fidp;
	struct mbuf *nam;
	struct vnode **vpp;
	int *exflagsp;
	struct ucred **credanonp;
{

	return (EOPNOTSUPP);
}

/*ARGSUSED*/
int
union_vptofh(vp, fhp)
	struct vnode *vp;
	struct fid *fhp;
{

	return (EOPNOTSUPP);
}
a495 1
	MOUNT_UNION,
d507 1
@


1.3
log
@From NetBSD (mycroft):
    Eliminate bogus uses of V{READ,WRITE,EXEC}.  Use S_I[RWX]{USR,GRP,OTH}
    where appropriate.
@
text
@d1 1
a1 1
/*	$OpenBSD: union_vfsops.c,v 1.2 1996/02/27 08:09:02 niklas Exp $	*/
d97 1
a97 1
	printf("union_mount(mp = %x)\n", mp);
d299 1
a299 1
	printf("union_unmount(mp = %x)\n", mp);
d440 1
a440 1
	printf("union_statfs(mp = %x, lvp = %x, uvp = %x)\n", mp,
@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 2
@


1.1
log
@Initial revision
@
text
@d1 1
d60 13
a89 2
	struct ucred *scred;
	struct vattr va;
d114 2
a115 1
	if (error = copyin(data, (caddr_t)&args, sizeof(struct union_args)))
d127 1
a127 1
	if (error = namei(ndp))
d230 6
d269 1
d307 1
a307 1
	if (error = union_root(mp, &um_rootvp))
d413 1
d500 1
d515 1
d526 1
d540 1
a548 2

int union_init __P((void));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
