head	1.23;
access;
symbols
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.18.0.6
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4;
locks; strict;
comment	@ * @;


1.23
date	2017.08.10.14.36.34;	author mestre;	state Exp;
branches;
next	1.22;
commitid	5rh5lsTjtzT0saWK;

1.22
date	2017.01.10.19.48.32;	author bluhm;	state Exp;
branches;
next	1.21;
commitid	nzxicVheAaFpfTKW;

1.21
date	2016.08.30.16.45.54;	author natano;	state Exp;
branches;
next	1.20;
commitid	bR1BHPSoghZ5Wk7v;

1.20
date	2016.01.22.17.09.43;	author stefan;	state Exp;
branches;
next	1.19;
commitid	R7jOf0pHSmx9IO2d;

1.19
date	2015.09.02.04.07.11;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	L58VSZvm07qSrAPz;

1.18
date	2015.02.10.22.04.00;	author miod;	state Exp;
branches;
next	1.17;
commitid	xPdkHWWd7nmZkTX3;

1.17
date	2015.02.10.21.58.16;	author miod;	state Exp;
branches;
next	1.16;
commitid	8W7jyIoa34bQUU1a;

1.16
date	2015.02.10.21.56.10;	author miod;	state Exp;
branches;
next	1.15;
commitid	C5iGb36LQxjM60Q3;

1.15
date	2014.07.12.18.43.52;	author tedu;	state Exp;
branches;
next	1.14;
commitid	FE3DG5cICjyI4jWx;

1.14
date	2014.03.18.08.51.53;	author mpi;	state Exp;
branches;
next	1.13;

1.13
date	2014.01.16.10.36.33;	author syl;	state Exp;
branches;
next	1.12;

1.12
date	2013.12.10.13.43.05;	author pelikan;	state Exp;
branches;
next	1.11;

1.11
date	2013.12.03.09.53.37;	author syl;	state Exp;
branches;
next	1.10;

1.10
date	2013.11.28.12.53.59;	author syl;	state Exp;
branches;
next	1.9;

1.9
date	2013.10.07.18.25.32;	author syl;	state Exp;
branches;
next	1.8;

1.8
date	2013.10.07.18.15.21;	author syl;	state Exp;
branches;
next	1.7;

1.7
date	2013.10.07.18.07.04;	author syl;	state Exp;
branches;
next	1.6;

1.6
date	2013.10.07.18.04.53;	author syl;	state Exp;
branches;
next	1.5;

1.5
date	2013.08.10.00.12.44;	author syl;	state Exp;
branches;
next	1.4;

1.4
date	2013.07.11.11.38.10;	author syl;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.21.21.30.38;	author syl;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.12.22.55.02;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.03.15.50.56;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Avoid possible NULL pointer dereference on fuseioctl()

Found by Coverity Scan (CID 1453387)

OK mpi@@
@
text
@/* $OpenBSD: fuse_device.c,v 1.22 2017/01/10 19:48:32 bluhm Exp $ */
/*
 * Copyright (c) 2012-2013 Sylvestre Gallon <ccna.syl@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/fcntl.h>
#include <sys/ioctl.h>
#include <sys/malloc.h>
#include <sys/mount.h>
#include <sys/poll.h>
#include <sys/stat.h>
#include <sys/statvfs.h>
#include <sys/vnode.h>
#include <sys/fusebuf.h>

#include "fusefs_node.h"
#include "fusefs.h"

#ifdef	FUSE_DEBUG
#define	DPRINTF(fmt, arg...)	printf("%s: " fmt, "fuse", ##arg)
#else
#define	DPRINTF(fmt, arg...)
#endif

SIMPLEQ_HEAD(fusebuf_head, fusebuf);

struct fuse_d {
	struct fusefs_mnt *fd_fmp;
	int fd_unit;

	/*fusebufs queues*/
	struct fusebuf_head fd_fbufs_in;
	struct fusebuf_head fd_fbufs_wait;

	/* kq fields */
	struct selinfo fd_rsel;
	LIST_ENTRY(fuse_d) fd_list;
};

int stat_fbufs_in = 0;
int stat_fbufs_wait = 0;
int stat_opened_fusedev = 0;

LIST_HEAD(, fuse_d) fuse_d_list;
struct fuse_d *fuse_create(int);
struct fuse_d *fuse_lookup(int);
void	fuse_destroy(dev_t dev, struct fuse_d *fd);

void	fuseattach(int);
int	fuseopen(dev_t, int, int, struct proc *);
int	fuseclose(dev_t, int, int, struct proc *);
int	fuseioctl(dev_t, u_long, caddr_t, int, struct proc *);
int	fuseread(dev_t, struct uio *, int);
int	fusewrite(dev_t, struct uio *, int);
int	fusepoll(dev_t, int, struct proc *);
int	fusekqfilter(dev_t dev, struct knote *kn);
int	filt_fuse_read(struct knote *, long);
void	filt_fuse_rdetach(struct knote *);

const static struct filterops fuse_rd_filtops = {
	1,
	NULL,
	filt_fuse_rdetach,
	filt_fuse_read
};

const static struct filterops fuse_seltrue_filtops = {
	1,
	NULL,
	filt_fuse_rdetach,
	filt_seltrue
};

#ifdef FUSE_DEBUG
static void
fuse_dump_buff(char *buff, int len)
{
	char text[17];
	int i;

	bzero(text, 17);
	for (i = 0; i < len; i++) {
		if (i != 0 && (i % 16) == 0) {
			printf(": %s\n", text);
			bzero(text, 17);
		}

		printf("%.2x ", buff[i] & 0xff);

		if (buff[i] > ' ' && buff[i] < '~')
			text[i%16] = buff[i] & 0xff;
		else
			text[i%16] = '.';
	}

	if ((i % 16) != 0)
		while ((i % 16) != 0) {
			printf("   ");
			i++;
		}

	printf(": %s\n", text);
}
#endif

struct fuse_d *
fuse_lookup(int unit)
{
	struct fuse_d *fd;

	LIST_FOREACH(fd, &fuse_d_list, fd_list)
		if (fd->fd_unit == unit)
			return (fd);
	return (NULL);
}

struct fuse_d *
fuse_create(int unit)
{
	struct fuse_d *fd;

	if ((fd = fuse_lookup(unit)) != NULL)
		return (NULL);

	fd = malloc(sizeof(*fd), M_DEVBUF, M_WAITOK | M_ZERO);
	fd->fd_unit = unit;
	SIMPLEQ_INIT(&fd->fd_fbufs_in);
	SIMPLEQ_INIT(&fd->fd_fbufs_wait);
	LIST_INSERT_HEAD(&fuse_d_list, fd, fd_list);
	return (fd);
}

void
fuse_destroy(dev_t dev, struct fuse_d *fd)
{
	LIST_REMOVE(fd, fd_list);
	fuse_device_cleanup(dev, NULL);
	free(fd, M_DEVBUF, sizeof *fd);
}

/*
 * if fbuf == NULL cleanup all msgs else remove fbuf from
 * sc_fbufs_in and sc_fbufs_wait.
 */
void
fuse_device_cleanup(dev_t dev, struct fusebuf *fbuf)
{
	struct fuse_d *fd;
	struct fusebuf *f, *ftmp, *lprev;

	fd = fuse_lookup(minor(dev));
	if (fd == NULL)
		return;

	/* clear FIFO IN*/
	lprev = NULL;
	SIMPLEQ_FOREACH_SAFE(f, &fd->fd_fbufs_in, fb_next, ftmp) {
		if (fbuf == f || fbuf == NULL) {
			DPRINTF("cleanup unprocessed msg in sc_fbufs_in\n");
			if (lprev == NULL)
				SIMPLEQ_REMOVE_HEAD(&fd->fd_fbufs_in, fb_next);
			else
				SIMPLEQ_REMOVE_AFTER(&fd->fd_fbufs_in, lprev,
				    fb_next);

			stat_fbufs_in--;
			if (fbuf == NULL)
				fb_delete(f);
			else
				break;
		}
		lprev = f;
	}

	/* clear FIFO WAIT*/
	lprev = NULL;
	SIMPLEQ_FOREACH_SAFE(f, &fd->fd_fbufs_wait, fb_next, ftmp) {
		if (fbuf == f || fbuf == NULL) {
			DPRINTF("umount unprocessed msg in sc_fbufs_wait\n");
			if (lprev == NULL)
				SIMPLEQ_REMOVE_HEAD(&fd->fd_fbufs_wait,
				    fb_next);
			else
				SIMPLEQ_REMOVE_AFTER(&fd->fd_fbufs_wait, lprev,
				    fb_next);

			stat_fbufs_wait--;
			if (fbuf == NULL)
				fb_delete(f);
			else
				break;
		}
		lprev = f;
	}
}

void
fuse_device_queue_fbuf(dev_t dev, struct fusebuf *fbuf)
{
	struct fuse_d *fd;

	fd = fuse_lookup(minor(dev));
	if (fd == NULL)
		return;

	SIMPLEQ_INSERT_TAIL(&fd->fd_fbufs_in, fbuf, fb_next);
	stat_fbufs_in++;
	selwakeup(&fd->fd_rsel);
}

void
fuse_device_set_fmp(struct fusefs_mnt *fmp, int set)
{
	struct fuse_d *fd;

	fd = fuse_lookup(minor(fmp->dev));
	if (fd == NULL)
		return;

	fd->fd_fmp = set ? fmp : NULL;
}

void
fuseattach(int num)
{
	LIST_INIT(&fuse_d_list);
}

int
fuseopen(dev_t dev, int flags, int fmt, struct proc * p)
{
	struct fuse_d *fd;

	if (flags & O_EXCL)
		return (EBUSY); /* No exclusive opens */

	if ((fd = fuse_create(minor(dev))) == NULL)
		return (EBUSY);

	stat_opened_fusedev++;
	return (0);
}

int
fuseclose(dev_t dev, int flags, int fmt, struct proc *p)
{
	struct fuse_d *fd;
	int error;

	fd = fuse_lookup(minor(dev));
	if (fd == NULL)
		return (EINVAL);

	if (fd->fd_fmp) {
		printf("fuse: device close without umount\n");
		fd->fd_fmp->sess_init = 0;
		if ((vfs_busy(fd->fd_fmp->mp, VB_WRITE|VB_NOWAIT)) != 0)
			goto end;
		error = dounmount(fd->fd_fmp->mp, MNT_FORCE, curproc);
		if (error)
			printf("fuse: unmount failed with error %d\n", error);
		fd->fd_fmp = NULL;
	}

end:
	fuse_destroy(dev, fd);
	stat_opened_fusedev--;
	return (0);
}

/*
 * FIOCGETFBDAT		Get fusebuf datas from kernel to user
 * FIOCSETFBDAT		Set fusebuf datas from user to kernel
 */
int
fuseioctl(dev_t dev, u_long cmd, caddr_t addr, int flags, struct proc *p)
{
	struct fb_ioctl_xch *ioexch;
	struct fusebuf *lastfbuf;
	struct fusebuf *fbuf;
	struct fuse_d *fd;
	int error = 0;

	fd = fuse_lookup(minor(dev));
	if (fd == NULL)
		return (ENXIO);

	switch (cmd) {
	case FIOCGETFBDAT:
		ioexch = (struct fb_ioctl_xch *)addr;

		/* Looking for uuid in fd_fbufs_in */
		SIMPLEQ_FOREACH(fbuf, &fd->fd_fbufs_in, fb_next) {
			if (fbuf->fb_uuid == ioexch->fbxch_uuid)
				break;

			lastfbuf = fbuf;
		}
		if (fbuf == NULL) {
			printf("fuse: Cannot find fusebuf\n");
			return (EINVAL);
		}

		/* Remove the fbuf from fd_fbufs_in */
		if (fbuf == SIMPLEQ_FIRST(&fd->fd_fbufs_in))
			SIMPLEQ_REMOVE_HEAD(&fd->fd_fbufs_in, fb_next);
		else
			SIMPLEQ_REMOVE_AFTER(&fd->fd_fbufs_in, lastfbuf,
			    fb_next);
		stat_fbufs_in--;

		/* Do not handle fbufs with bad len */
		if (fbuf->fb_len != ioexch->fbxch_len) {
			printf("fuse: Bad fusebuf len\n");
			return (EINVAL);
		}

		/* Update the userland fbuf */
		error = copyout(fbuf->fb_dat, ioexch->fbxch_data,
		    ioexch->fbxch_len);
		if (error) {
			printf("fuse: cannot copyout\n");
			return (error);
		}

#ifdef FUSE_DEBUG
		fuse_dump_buff(ioexch->fbxch_data, ioexch->fbxch_len);
#endif

		/* Adding fbuf in fd_fbufs_wait */
		free(fbuf->fb_dat, M_FUSEFS, 0);
		fbuf->fb_dat = NULL;
		SIMPLEQ_INSERT_TAIL(&fd->fd_fbufs_wait, fbuf, fb_next);
		stat_fbufs_wait++;
		break;

	case FIOCSETFBDAT:
		DPRINTF("SET BUFFER\n");
		ioexch = (struct fb_ioctl_xch *)addr;

		/* looking for uuid in fd_fbufs_wait */
		SIMPLEQ_FOREACH(fbuf, &fd->fd_fbufs_wait, fb_next) {
			if (fbuf->fb_uuid == ioexch->fbxch_uuid)
				break;

			lastfbuf = fbuf;
		}
		if (fbuf == NULL) {
			printf("fuse: Cannot find fusebuf\n");
			return (EINVAL);
		}

		/* Do not handle fbufs with bad len */
		if (fbuf->fb_len != ioexch->fbxch_len) {
			printf("fuse: Bad fusebuf size\n");
			return (EINVAL);
		}

		/* fetching data from userland */
		fbuf->fb_dat = malloc(ioexch->fbxch_len, M_FUSEFS,
		    M_WAITOK | M_ZERO);
		error = copyin(ioexch->fbxch_data, fbuf->fb_dat,
		    ioexch->fbxch_len);
		if (error) {
			printf("fuse: Cannot copyin\n");
			free(fbuf->fb_dat, M_FUSEFS, 0);
			fbuf->fb_dat = NULL;
			return (error);
		}

#ifdef FUSE_DEBUG
		fuse_dump_buff(fbuf->fb_dat, fbuf->fb_len);
#endif

		/* Remove fbuf from fd_fbufs_wait */
		if (fbuf == SIMPLEQ_FIRST(&fd->fd_fbufs_wait))
			SIMPLEQ_REMOVE_HEAD(&fd->fd_fbufs_wait, fb_next);
		else
			SIMPLEQ_REMOVE_AFTER(&fd->fd_fbufs_wait, lastfbuf,
			    fb_next);
		stat_fbufs_wait--;
		wakeup(fbuf);
		break;
	default:
		error = EINVAL;
	}

	return (error);
}

int
fuseread(dev_t dev, struct uio *uio, int ioflag)
{
	struct fuse_d *fd;
	struct fusebuf *fbuf;
	struct fb_hdr hdr;
	void *tmpaddr;
	int error = 0;

	fd = fuse_lookup(minor(dev));
	if (fd == NULL)
		return (ENXIO);

	if (SIMPLEQ_EMPTY(&fd->fd_fbufs_in)) {
		if (ioflag & O_NONBLOCK)
			return (EAGAIN);

		goto end;
	}
	fbuf = SIMPLEQ_FIRST(&fd->fd_fbufs_in);

	/* We get the whole fusebuf or nothing */
	if (uio->uio_resid != FUSEBUFSIZE)
		return (EINVAL);

	/* Do not send kernel pointers */
	memcpy(&hdr.fh_next, &fbuf->fb_next, sizeof(fbuf->fb_next));
	bzero(&fbuf->fb_next, sizeof(fbuf->fb_next));
	tmpaddr = fbuf->fb_dat;
	fbuf->fb_dat = NULL;
	error = uiomove(fbuf, FUSEBUFSIZE, uio);
	if (error)
		goto end;

#ifdef FUSE_DEBUG
	fuse_dump_buff((char *)fbuf, FUSEBUFSIZE);
#endif
	/* Restore kernel pointers */
	memcpy(&fbuf->fb_next, &hdr.fh_next, sizeof(fbuf->fb_next));
	fbuf->fb_dat = tmpaddr;

	/* Remove the fbuf if it does not contains data */
	if (fbuf->fb_len == 0) {
		SIMPLEQ_REMOVE_HEAD(&fd->fd_fbufs_in, fb_next);
		stat_fbufs_in--;
		SIMPLEQ_INSERT_TAIL(&fd->fd_fbufs_wait, fbuf, fb_next);
		stat_fbufs_wait++;
	}

end:
	return (error);
}

int
fusewrite(dev_t dev, struct uio *uio, int ioflag)
{
	struct fusebuf *lastfbuf;
	struct fuse_d *fd;
	struct fusebuf *fbuf;
	struct fb_hdr hdr;
	int error = 0;

	fd = fuse_lookup(minor(dev));
	if (fd == NULL)
		return (ENXIO);

	/* We get the whole fusebuf or nothing */
	if (uio->uio_resid != FUSEBUFSIZE)
		return (EINVAL);

	if ((error = uiomove(&hdr, sizeof(hdr), uio)) != 0)
		return (error);

	/* looking for uuid in fd_fbufs_wait */
	SIMPLEQ_FOREACH(fbuf, &fd->fd_fbufs_wait, fb_next) {
		if (fbuf->fb_uuid == hdr.fh_uuid)
			break;

		lastfbuf = fbuf;
	}
	if (fbuf == NULL)
		return (EINVAL);

	/* Update fb_hdr */
	fbuf->fb_len = hdr.fh_len;
	fbuf->fb_err = hdr.fh_err;
	fbuf->fb_ino = hdr.fh_ino;

	/* Check for corrupted fbufs */
	if ((fbuf->fb_len && fbuf->fb_err) ||
	    SIMPLEQ_EMPTY(&fd->fd_fbufs_wait)) {
		printf("fuse: dropping corrupted fusebuf\n");
		error = EINVAL;
		goto end;
	}

	/* Get the missing datas from the fbuf */
	error = uiomove(&fbuf->FD, uio->uio_resid, uio);
	if (error)
		return error;
	fbuf->fb_dat = NULL;
#ifdef FUSE_DEBUG
	fuse_dump_buff((char *)fbuf, FUSEBUFSIZE);
#endif

	switch (fbuf->fb_type) {
	case FBT_INIT:
		fd->fd_fmp->sess_init = 1;
		break ;
	case FBT_DESTROY:
		fd->fd_fmp = NULL;
		break ;
	}
end:
	/* Remove the fbuf if it does not contains data */
	if (fbuf->fb_len == 0) {
		if (fbuf == SIMPLEQ_FIRST(&fd->fd_fbufs_wait))
			SIMPLEQ_REMOVE_HEAD(&fd->fd_fbufs_wait, fb_next);
		else
			SIMPLEQ_REMOVE_AFTER(&fd->fd_fbufs_wait, lastfbuf,
			    fb_next);
		stat_fbufs_wait--;
		if (fbuf->fb_type == FBT_INIT)
			fb_delete(fbuf);
		else
			wakeup(fbuf);
	}

	return (error);
}

int
fusepoll(dev_t dev, int events, struct proc *p)
{
	struct fuse_d *fd;
	int revents = 0;

	fd = fuse_lookup(minor(dev));
	if (fd == NULL)
		return (EINVAL);

	if (events & (POLLIN | POLLRDNORM))
		if (!SIMPLEQ_EMPTY(&fd->fd_fbufs_in))
			revents |= events & (POLLIN | POLLRDNORM);

	if (events & (POLLOUT | POLLWRNORM))
		revents |= events & (POLLOUT | POLLWRNORM);

	if (revents == 0)
		if (events & (POLLIN | POLLRDNORM))
			selrecord(p, &fd->fd_rsel);

	return (revents);
}

int
fusekqfilter(dev_t dev, struct knote *kn)
{
	struct fuse_d *fd;
	struct klist *klist;

	fd = fuse_lookup(minor(dev));
	if (fd == NULL)
		return (EINVAL);

	switch (kn->kn_filter) {
	case EVFILT_READ:
		klist = &fd->fd_rsel.si_note;
		kn->kn_fop = &fuse_rd_filtops;
		break;
	case EVFILT_WRITE:
		klist = &fd->fd_rsel.si_note;
		kn->kn_fop = &fuse_seltrue_filtops;
		break;
	default:
		return (EINVAL);
	}

	kn->kn_hook = fd;

	SLIST_INSERT_HEAD(klist, kn, kn_selnext);

	return (0);
}

void
filt_fuse_rdetach(struct knote *kn)
{
	struct fuse_d *fd = kn->kn_hook;
	struct klist *klist = &fd->fd_rsel.si_note;

	SLIST_REMOVE(klist, kn, knote, kn_selnext);
}

int
filt_fuse_read(struct knote *kn, long hint)
{
	struct fuse_d *fd = kn->kn_hook;
	int event = 0;

	if (!SIMPLEQ_EMPTY(&fd->fd_fbufs_in))
		event = 1;

	return (event);
}
@


1.22
log
@Remove the unused olddp parameter from function dounmount().
OK mpi@@ millert@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.21 2016/08/30 16:45:54 natano Exp $ */
d299 2
@


1.21
log
@Use struct stat for storing attributes in fusebufs, because using struct
vattr in userspace is suboptimal as some related helpers are not
available, e.g. VATTR_NULL() and IFTOVT(). The conversion is now done in
the kernel where it belongs. As a side effect the <sys/vnode.h> include
can be removed from libfuse.

tweaks and ok guenther
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.20 2016/01/22 17:09:43 stefan Exp $ */
d273 2
a274 2
		if ((error = dounmount(fd->fd_fmp->mp, MNT_FORCE, curproc,
		    NULL)) != 0)
@


1.20
log
@Straightforward uiomovei -> uiomove conversion. All size arguments for
uiomove had unsigned types already.

Diff from Martin Natano.
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.19 2015/09/02 04:07:11 deraadt Exp $ */
d25 1
@


1.19
log
@fairly easy size for free()
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.18 2015/02/10 22:04:00 miod Exp $ */
d499 1
a499 1
	error = uiomovei(&fbuf->FD, uio->uio_resid, uio);
@


1.18
log
@Convert uiomovei() with a constant size argument to uiomove().
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.17 2015/02/10 21:58:16 miod Exp $ */
d151 1
a151 1
	free(fd, M_DEVBUF, 0);
@


1.17
log
@Switch uiomovei(..., sizeof whatever, ...) to uiomove().
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.16 2015/02/10 21:56:10 miod Exp $ */
d432 1
a432 1
	error = uiomovei(fbuf, FUSEBUFSIZE, uio);
@


1.16
log
@First step towards making uiomove() take a size_t size argument:
- rename uiomove() to uiomovei() and update all its users.
- introduce uiomove(), which is similar to uiomovei() but with a size_t.
- rewrite uiomovei() as an uiomove() wrapper.
ok kettenis@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.15 2014/07/12 18:43:52 tedu Exp $ */
d472 1
a472 1
	if ((error = uiomovei(&hdr, sizeof(hdr), uio)) != 0)
@


1.15
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.14 2014/03/18 08:51:53 mpi Exp $ */
d432 1
a432 1
	error = uiomove(fbuf, FUSEBUFSIZE, uio);
d472 1
a472 1
	if ((error = uiomove(&hdr, sizeof(hdr), uio)) != 0)
d499 1
a499 1
	error = uiomove(&fbuf->FD, uio->uio_resid, uio);
@


1.14
log
@Do not rely on the fact that sys/vnode.h includes all the world
through uvm/uvm.h and add proper includes for function definitions.

ok syl@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.13 2014/01/16 10:36:33 syl Exp $ */
d151 1
a151 1
	free(fd, M_DEVBUF);
d342 1
a342 1
		free(fbuf->fb_dat, M_FUSEFS);
d377 1
a377 1
			free(fbuf->fb_dat, M_FUSEFS);
@


1.13
log
@Remove an infinite loop in fuse_device_cleanup().

Spotted by pelikan@@
Some input from stsp@@
OK stsp@@, pelikan@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.12 2013/12/10 13:43:05 pelikan Exp $ */
d19 1
@


1.12
log
@Unset fuse_mnt in fusefs_unmount after vflushing and freeing fbufs in use.

This way, if fuse unmounts a FS without FBT_DESTROY, the fuse_mnt pointer
is already invalidated.  Also, on weird unmount situations with vnodes in
use, vflush() them before doing fuse_device_cleanup().

Tested with ntfs-3g, ok syl@@.
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.11 2013/12/03 09:53:37 syl Exp $ */
d161 1
a161 1
	struct fusebuf *f;
d168 2
a169 1
	while ((f = SIMPLEQ_FIRST(&fd->fd_fbufs_in))) {
d172 6
a177 1
			SIMPLEQ_REMOVE_HEAD(&fd->fd_fbufs_in, fb_next);
d181 2
d184 1
d188 2
a189 1
	while ((f = SIMPLEQ_FIRST(&fd->fd_fbufs_wait))) {
d192 7
a198 1
			SIMPLEQ_REMOVE_HEAD(&fd->fd_fbufs_wait, fb_next);
d202 2
d205 1
@


1.11
log
@Unmount the fuse filesystem if the communication end with
the fuse device.

ok sthen@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.10 2013/11/28 12:53:59 syl Exp $ */
d205 1
a205 1
fuse_device_set_fmp(struct fusefs_mnt *fmp)
d213 1
a213 1
	fd->fd_fmp = fmp;
@


1.10
log
@Remove some double free on fusebuf datas.

Found the hard way and ok mpk@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.9 2013/10/07 18:25:32 syl Exp $ */
d22 1
a166 1
	fd->fd_fmp = NULL;
d241 1
d250 5
d258 1
@


1.9
log
@use printf(9) consistently in FUSE
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.8 2013/10/07 18:15:21 syl Exp $ */
d316 1
d351 1
@


1.8
log
@Introduce fb_delete() helper and use it in FUSE code.
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.7 2013/10/07 18:07:04 syl Exp $ */
d247 1
a247 1
		printf("libfuse close the device without umount\n");
d464 1
a464 1
		printf("corrupted fuse header or queue empty\n");
@


1.7
log
@Add new ioctl for handling FUSE buffers
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.6 2013/10/07 18:04:53 syl Exp $ */
a22 1
#include <sys/pool.h>
d174 1
a174 1
				pool_put(&fusefs_fbuf_pool, f);
d185 1
a185 1
				pool_put(&fusefs_fbuf_pool, f);
d496 1
a496 1
			pool_put(&fusefs_fbuf_pool, fbuf);
@


1.6
log
@Rework fuseread() and fusewrite().
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.5 2013/08/10 00:12:44 syl Exp $ */
d20 1
d258 4
d265 4
d271 2
d274 93
d368 1
a368 1
		return (ENODEV);
@


1.5
log
@Remove debug printfs.
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.4 2013/07/11 11:38:10 syl Exp $ */
d276 1
a277 4
	char *F_dat;
	int remain;
	int size;
	size_t len;
d291 3
a293 15
	/*
	 * If it was not taken by last read
	 * fetch the fb_hdr.
	 */
	len = sizeof(struct fb_hdr);
	if (fbuf->fb_resid == -1) {
		/* we get the whole header or nothing */
		if (uio->uio_resid < len)
			return (EINVAL);

		memcpy(&hdr, &fbuf->fb_hdr, sizeof(hdr));
		bzero(&hdr.fh_next, sizeof(hdr.fh_next));
		error = uiomove(&hdr, len, uio);
		if (error)
			goto end;
d295 8
a302 14
#ifdef FUSE_DEBUG
		fuse_dump_buff((char *)fbuf, len);
#endif
		fbuf->fb_resid = 0;
	}

	/* fetch F_dat if there is something present */
	if ((fbuf->fb_len > 0) && uio->uio_resid) {
		size = MIN(fbuf->fb_len - fbuf->fb_resid, uio->uio_resid);
		F_dat = (char *)&fbuf->F_dat;

		error = uiomove(&F_dat[fbuf->fb_resid], size, uio);
		if (error)
			goto end;
d305 1
a305 1
		fuse_dump_buff(&F_dat[fbuf->fb_resid], size);
d307 3
a309 2
		fbuf->fb_resid += size;
	}
d311 2
a312 6
	remain = (fbuf->fb_len - fbuf->fb_resid);

	/*
	 * fbuf moves from a simpleq to another
	 */
	if (remain == 0) {
d336 2
a337 1
	if (uio->uio_resid < sizeof(hdr)) {
a338 1
	}
a339 3
	/*
	 * get out header
	 */
d343 1
d350 2
d353 12
a364 3
#ifdef FUSE_DEBUG
	fuse_dump_buff((char *)&hdr, sizeof(hdr));
#endif
d366 5
a370 16
	if (fbuf != NULL) {
		fbuf->fb_len = hdr.fh_len;
		fbuf->fb_err = hdr.fh_err;
		fbuf->fb_ino = hdr.fh_ino;

		if (uio->uio_resid != hdr.fh_len ||
		    (uio->uio_resid != 0 && hdr.fh_err) ||
		    SIMPLEQ_EMPTY(&fd->fd_fbufs_wait)) {
			printf("corrupted fuse header or queue empty\n");
			return (EINVAL);
		}

		if (uio->uio_resid > 0  && fbuf->fb_len > 0) {
			error = uiomove(&fbuf->F_dat, fbuf->fb_len, uio);
			if (error)
				return error;
d372 1
a372 1
			fuse_dump_buff((char *)&fbuf->F_dat, fbuf->fb_len);
a373 1
		}
d375 11
a385 14
		if (!error) {
			switch (fbuf->fb_type) {
			case FBT_INIT:
				fd->fd_fmp->sess_init = 1;
				break ;
			case FBT_DESTROY:
				fd->fd_fmp = NULL;
				break ;
			}

			wakeup(fbuf);
		}

		/* the fbuf could not be the HEAD fbuf */
a391 1

d394 3
a396 3

	} else
		error = EINVAL;
@


1.4
log
@Fix a panic on multiple fuse device access.

ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.3 2013/06/21 21:30:38 syl Exp $ */
d85 1
a85 1
#ifdef	FUSE_DEBUG
a263 1
		DPRINTF("bad ioctl number %d\n", cmd);
a331 1
	DPRINTF("size remaining : %i\n", remain);
d371 1
a371 2
		if (fbuf->fb_uuid == hdr.fh_uuid) {
			DPRINTF("catch unique %lu\n", fbuf->fb_uuid);
a372 1
		}
@


1.3
log
@Make fuse device clonable.

ok tedu@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.2 2013/06/12 22:55:02 tedu Exp $ */
d276 1
d305 3
a307 1
		error = uiomove(fbuf, len, uio);
d386 3
a388 1
		memcpy(&fbuf->fb_hdr, &hdr, sizeof(fbuf->fb_hdr));
@


1.2
log
@remove extra whitespace
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_device.c,v 1.1 2013/06/03 15:50:56 tedu Exp $ */
a29 4
#define	FUSE_UNIT(dev)	(minor(dev))
#define FUSE_DEV2SC(a)	(&fuse_softc[FUSE_UNIT(a)])
#define DEVNAME(_s)	((_s)->sc_dev.dv_xname)

d31 1
a31 1
#define	DPRINTF(fmt, arg...)	printf("%s: " fmt, DEVNAME(sc), ##arg)
d38 7
a44 7
struct fuse_softc {
	struct fusefs_mnt *sc_fmp;
	struct device sc_dev;
	int sc_opened;

	struct fusebuf_head sc_fbufs_in;
	struct fusebuf_head sc_fbufs_wait;
d47 2
a48 1
	struct selinfo sc_rsel;
a50 6
#define FUSE_OPEN 1
#define FUSE_CLOSE 0
#define FUSE_DONE 2

struct fuse_softc *fuse_softc;
static int numfuse = 0;
d55 5
d117 35
d159 1
a159 1
	struct fuse_softc *sc;
d162 2
a163 1
	if (FUSE_UNIT(dev) >= numfuse)
d166 1
a166 3
	sc = FUSE_DEV2SC(dev);
	sc->sc_fmp = NULL;

d168 1
a168 1
	while ((f = SIMPLEQ_FIRST(&sc->sc_fbufs_in))) {
d171 1
a171 1
			SIMPLEQ_REMOVE_HEAD(&sc->sc_fbufs_in, fb_next);
d179 1
a179 1
	while ((f = SIMPLEQ_FIRST(&sc->sc_fbufs_wait))) {
d182 1
a182 1
			SIMPLEQ_REMOVE_HEAD(&sc->sc_fbufs_wait, fb_next);
d193 1
a193 1
	struct fuse_softc *sc;
d195 2
a196 1
	if (FUSE_UNIT(dev) >= numfuse)
d199 1
a199 2
	sc = FUSE_DEV2SC(dev);
	SIMPLEQ_INSERT_TAIL(&sc->sc_fbufs_in, fbuf, fb_next);
d201 1
a201 1
	selwakeup(&sc->sc_rsel);
d207 1
a207 1
	struct fuse_softc *sc;
d209 2
a210 1
	if (FUSE_UNIT(fmp->dev) >= numfuse)
d213 1
a213 2
	sc = FUSE_DEV2SC(fmp->dev);
	sc->sc_fmp = fmp;
d219 1
a219 25
	char *mem;
	u_long size;
	int i;

	if (num <= 0)
		return;
	size = num * sizeof(struct fuse_softc);
	mem = malloc(size, M_FUSEFS, M_NOWAIT | M_ZERO);

	if (mem == NULL) {
		printf("fuse: WARNING no memory for fuse device\n");
		return;
	}
	fuse_softc = (struct fuse_softc *)mem;
	for (i = 0; i < num; i++) {
		struct fuse_softc *sc = &fuse_softc[i];

		SIMPLEQ_INIT(&sc->sc_fbufs_in);
		SIMPLEQ_INIT(&sc->sc_fbufs_wait);
		sc->sc_dev.dv_unit = i;
		snprintf(sc->sc_dev.dv_xname, sizeof(sc->sc_dev.dv_xname),
		    "fuse%d", i);
		device_ref(&sc->sc_dev);
	}
	numfuse = num;
d225 1
a225 4
	struct fuse_softc *sc;

	if (FUSE_UNIT(dev) >= numfuse)
		return (ENXIO);
d227 2
a228 1
	sc = FUSE_DEV2SC(dev);
d230 1
a230 1
	if (sc->sc_opened != FUSE_CLOSE || sc->sc_fmp)
a232 1
	sc->sc_opened = FUSE_OPEN;
a233 1

d240 1
a240 1
	struct fuse_softc *sc;
d242 3
a244 2
	if (FUSE_UNIT(dev) >= numfuse)
		return (ENXIO);
d246 1
a246 2
	sc = FUSE_DEV2SC(dev);
	if (sc->sc_fmp) {
d248 2
a249 2
		sc->sc_fmp->sess_init = 0;
		sc->sc_fmp = NULL;
d252 1
a252 1
	sc->sc_opened = FUSE_CLOSE;
a259 1
	struct fuse_softc *sc;
a261 4
	if (FUSE_UNIT(dev) >= numfuse)
		return (ENXIO);

	sc = FUSE_DEV2SC(dev);
d274 1
a274 1
	struct fuse_softc *sc;
d282 2
a283 1
	if (FUSE_UNIT(dev) >= numfuse)
d286 1
a286 5
	sc = FUSE_DEV2SC(dev);
	if (sc->sc_opened != FUSE_OPEN)
		return (ENODEV);

	if (SIMPLEQ_EMPTY(&sc->sc_fbufs_in)) {
d292 1
a292 1
	fbuf = SIMPLEQ_FIRST(&sc->sc_fbufs_in);
d336 1
a336 1
		SIMPLEQ_REMOVE_HEAD(&sc->sc_fbufs_in, fb_next);
d338 1
a338 1
		SIMPLEQ_INSERT_TAIL(&sc->sc_fbufs_wait, fbuf, fb_next);
d350 1
a350 1
	struct fuse_softc *sc;
d355 2
a356 1
	if (FUSE_UNIT(dev) >= numfuse)
a358 1
	sc = FUSE_DEV2SC(dev);
d369 1
a369 1
	SIMPLEQ_FOREACH(fbuf, &sc->sc_fbufs_wait, fb_next) {
d387 1
a387 1
		    SIMPLEQ_EMPTY(&sc->sc_fbufs_wait)) {
d404 1
a404 1
				sc->sc_fmp->sess_init = 1;
d407 1
a407 1
				sc->sc_fmp = NULL;
d415 2
a416 2
		if (fbuf == SIMPLEQ_FIRST(&sc->sc_fbufs_wait))
			SIMPLEQ_REMOVE_HEAD(&sc->sc_fbufs_wait, fb_next);
d418 1
a418 1
			SIMPLEQ_REMOVE_AFTER(&sc->sc_fbufs_wait, lastfbuf,
d434 1
a434 1
	struct fuse_softc *sc;
d437 3
a439 2
	if (FUSE_UNIT(dev) >= numfuse)
		return (ENXIO);
a440 1
	sc = FUSE_DEV2SC(dev);
d442 1
a442 1
		if (!SIMPLEQ_EMPTY(&sc->sc_fbufs_in))
d450 1
a450 1
			selrecord(p, &sc->sc_rsel);
d458 1
a458 1
	struct fuse_softc *sc;
d461 3
a463 2
	if (FUSE_UNIT(dev) >= numfuse)
		return (ENXIO);
a464 1
	sc = FUSE_DEV2SC(dev);
d467 1
a467 1
		klist = &sc->sc_rsel.si_note;
d471 1
a471 1
		klist = &sc->sc_rsel.si_note;
d478 1
a478 1
	kn->kn_hook = sc;
d488 2
a489 2
	struct fuse_softc *sc = kn->kn_hook;
	struct klist *klist = &sc->sc_rsel.si_note;
d497 1
a497 1
	struct fuse_softc *sc = kn->kn_hook;
d500 1
a500 1
	if (!SIMPLEQ_EMPTY(&sc->sc_fbufs_in))
@


1.1
log
@add a bunch of files for ISC-licensed FUSE support. ok beck deraadt
from Sylvestre Gallon ccna.syl gmail.com. Many thanks to Sylvestre for
all the hard work.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d97 1
a97 2
	for (i = 0; i < len ; i++) {

a292 1

d393 1
a393 1
		    SIMPLEQ_EMPTY(&sc->sc_fbufs_wait) ) {
@

