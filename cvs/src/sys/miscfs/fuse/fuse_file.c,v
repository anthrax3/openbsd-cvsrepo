head	1.9;
access;
symbols
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.10
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.6
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.08.30.16.45.54;	author natano;	state Exp;
branches;
next	1.8;
commitid	bR1BHPSoghZ5Wk7v;

1.8
date	2014.03.18.08.51.53;	author mpi;	state Exp;
branches;
next	1.7;

1.7
date	2014.01.20.15.26.52;	author syl;	state Exp;
branches;
next	1.6;

1.6
date	2013.12.03.09.32.23;	author syl;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.07.18.25.32;	author syl;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.07.18.15.21;	author syl;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.07.18.04.53;	author syl;	state Exp;
branches;
next	1.2;

1.2
date	2013.08.10.00.12.45;	author syl;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.03.15.50.56;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Use struct stat for storing attributes in fusebufs, because using struct
vattr in userspace is suboptimal as some related helpers are not
available, e.g. VATTR_NULL() and IFTOVT(). The conversion is now done in
the kernel where it belongs. As a side effect the <sys/vnode.h> include
can be removed from libfuse.

tweaks and ok guenther
@
text
@/* $OpenBSD: fuse_file.c,v 1.8 2014/03/18 08:51:53 mpi Exp $ */
/*
 * Copyright (c) 2012-2013 Sylvestre Gallon <ccna.syl@@gmail.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/stat.h>
#include <sys/statvfs.h>
#include <sys/vnode.h>
#include <sys/fusebuf.h>

#include "fusefs_node.h"
#include "fusefs.h"

int
fusefs_file_open(struct fusefs_mnt *fmp, struct fusefs_node *ip,
    enum fufh_type fufh_type, int flags, int isdir, struct proc *p)
{
	struct fusebuf *fbuf;
	int error = 0;

	if (!fmp->sess_init)
		return (0);

	fbuf = fb_setup(0, ip->ufs_ino.i_number,
	    ((isdir) ? FBT_OPENDIR : FBT_OPEN), p);
	fbuf->fb_io_flags = flags;

	error = fb_queue(fmp->dev, fbuf);
	if (error) {
		fb_delete(fbuf);
		return (error);
	}

	ip->fufh[fufh_type].fh_id = fbuf->fb_io_fd;
	ip->fufh[fufh_type].fh_type = fufh_type;

	fb_delete(fbuf);
	return (0);
}

int
fusefs_file_close(struct fusefs_mnt *fmp, struct fusefs_node * ip,
    enum fufh_type fufh_type, int flags, int isdir, struct proc *p)
{
	struct fusebuf *fbuf;
	int error = 0;

	if (fmp->sess_init) {
		fbuf = fb_setup(0, ip->ufs_ino.i_number,
		    ((isdir) ? FBT_RELEASEDIR : FBT_RELEASE), p);
		fbuf->fb_io_fd  = ip->fufh[fufh_type].fh_id;
		fbuf->fb_io_flags = flags;

		error = fb_queue(fmp->dev, fbuf);
		if (error && (error != ENOSYS))
			printf("fusefs: file error %d\n", error);

		fb_delete(fbuf);
	}

	ip->fufh[fufh_type].fh_id = (uint64_t)-1;
	ip->fufh[fufh_type].fh_type = FUFH_INVALID;

	return (error);
}

uint64_t
fusefs_fd_get(struct fusefs_node *ip, enum fufh_type type)
{
	if (ip->fufh[type].fh_type == FUFH_INVALID)
		type = FUFH_RDWR;

	return (ip->fufh[type].fh_id);
}
@


1.8
log
@Do not rely on the fact that sys/vnode.h includes all the world
through uvm/uvm.h and add proper includes for function definitions.

ok syl@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_file.c,v 1.7 2014/01/20 15:26:52 syl Exp $ */
d20 1
@


1.7
log
@Do not complain if release is not implemented in fuse client.

ok millert@@.
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_file.c,v 1.6 2013/12/03 09:32:23 syl Exp $ */
d19 1
@


1.6
log
@Add some missing check to know if the communication channel with
libfuse is still open before sending fusebufs.

ok sthen@@
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_file.c,v 1.5 2013/10/07 18:25:32 syl Exp $ */
d67 1
a67 1
		if (error)
@


1.5
log
@use printf(9) consistently in FUSE
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_file.c,v 1.4 2013/10/07 18:15:21 syl Exp $ */
d33 3
d60 9
a68 4
	fbuf = fb_setup(0, ip->ufs_ino.i_number,
	    ((isdir) ? FBT_RELEASEDIR : FBT_RELEASE), p);
	fbuf->fb_io_fd  = ip->fufh[fufh_type].fh_id;
	fbuf->fb_io_flags = flags;
d70 2
a71 3
	error = fb_queue(fmp->dev, fbuf);
	if (error)
		printf("fusefs: file error %d\n", error);
a75 1
	fb_delete(fbuf);
@


1.4
log
@Introduce fb_delete() helper and use it in FUSE code.
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_file.c,v 1.3 2013/10/07 18:04:53 syl Exp $ */
d64 1
a64 1
		printf("fuse file error %d\n", error);
@


1.3
log
@Rework fuseread() and fusewrite().
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_file.c,v 1.2 2013/08/10 00:12:45 syl Exp $ */
a18 1
#include <sys/pool.h>
d39 1
a39 1
		pool_put(&fusefs_fbuf_pool, fbuf);
d46 1
a46 1
	pool_put(&fusefs_fbuf_pool, fbuf);
d69 1
a69 1
	pool_put(&fusefs_fbuf_pool, fbuf);
@


1.2
log
@Remove debug printfs.
@
text
@d1 1
a1 1
/* $OpenBSD: fuse_file.c,v 1.1 2013/06/03 15:50:56 tedu Exp $ */
d34 1
a34 1
	fbuf = fb_setup(FUSEFDSIZE, ip->ufs_ino.i_number,
d58 1
a58 1
	fbuf = fb_setup(FUSEFDSIZE, ip->ufs_ino.i_number,
@


1.1
log
@add a bunch of files for ISC-licensed FUSE support. ok beck deraadt
from Sylvestre Gallon ccna.syl gmail.com. Many thanks to Sylvestre for
all the hard work.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a25 6

#ifdef	FUSE_DEBUG_VNOP
#define	DPRINTF(fmt, arg...)	printf("fuse vnop: " fmt, ##arg)
#else
#define	DPRINTF(fmt, arg...)
#endif
@

