head	1.19;
access;
symbols
	OPENBSD_3_7:1.18.0.8
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.18.0.6
	OPENBSD_3_6_BASE:1.18
	SMP_SYNC_A:1.18
	SMP_SYNC_B:1.18
	OPENBSD_3_5:1.18.0.4
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	UBC_SYNC_A:1.17
	OPENBSD_3_3:1.16.0.2
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.15.0.4
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	UBC_SYNC_B:1.16
	UBC:1.14.0.2
	UBC_BASE:1.14
	OPENBSD_3_0:1.13.0.14
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.13
	OPENBSD_2_9:1.13.0.12
	OPENBSD_2_8:1.13.0.10
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.8
	OPENBSD_2_7_BASE:1.13
	SMP:1.13.0.6
	SMP_BASE:1.13
	kame_19991208:1.13
	OPENBSD_2_6:1.13.0.4
	OPENBSD_2_6_BASE:1.13
	OPENBSD_2_5:1.13.0.2
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.11.0.2
	OPENBSD_2_4_BASE:1.11
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2005.05.26.00.38.50;	author pedro;	state dead;
branches;
next	1.18;

1.18
date	2003.06.02.23.28.10;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2003.05.12.21.00.39;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2002.10.27.15.27.18;	author brad;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.14.01.27.08;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.12.04.22.44.32;	author art;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	99.02.08.22.25.29;	author art;	state Exp;
branches
	1.13.6.1;
next	1.12;

1.12
date	99.01.11.05.12.27;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	98.08.06.21.28.45;	author csapuntz;	state Exp;
branches;
next	1.10;

1.10
date	98.08.06.19.34.42;	author csapuntz;	state Exp;
branches;
next	1.9;

1.9
date	97.12.27.04.49.14;	author csapuntz;	state Exp;
branches;
next	1.8;

1.8
date	97.11.06.05.58.40;	author csapuntz;	state Exp;
branches;
next	1.7;

1.7
date	97.10.06.20.20.31;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.10.06.15.19.07;	author csapuntz;	state Exp;
branches;
next	1.5;

1.5
date	97.09.11.05.26.13;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.05.22.12.04.36;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.22.28.16;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.02.27.07.58.04;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.01;	author deraadt;	state Exp;
branches;
next	;

1.13.6.1
date	2002.03.06.02.13.24;	author niklas;	state Exp;
branches;
next	1.13.6.2;

1.13.6.2
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.13.6.3;

1.13.6.3
date	2003.03.28.00.00.20;	author niklas;	state Exp;
branches;
next	1.13.6.4;

1.13.6.4
date	2003.05.16.00.29.43;	author niklas;	state Exp;
branches;
next	1.13.6.5;

1.13.6.5
date	2003.06.07.11.06.05;	author ho;	state Exp;
branches;
next	;

1.14.2.1
date	2002.06.11.03.30.20;	author art;	state Exp;
branches;
next	1.14.2.2;

1.14.2.2
date	2002.10.29.00.36.45;	author art;	state Exp;
branches;
next	1.14.2.3;

1.14.2.3
date	2003.05.19.22.35.55;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.19
log
@bye bye, rest in attic ad infinitum, amen
@
text
@/*	$OpenBSD: null_vnops.c,v 1.18 2003/06/02 23:28:10 millert Exp $ */
/*	$NetBSD: null_vnops.c,v 1.26 2002/09/10 02:52:40 jtk Exp $	*/

/*
 * Copyright (c) 1999 National Aeronautics & Space Administration
 * All rights reserved.
 *
 * This software was written by William Studenmund of the
 * Numerical Aerospace Simulation Facility, NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the National Aeronautics & Space Administration
 *    nor the names of its contributors may be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NATIONAL AERONAUTICS & SPACE ADMINISTRATION
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE ADMINISTRATION OR CONTRIB-
 * UTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * John Heidemann of the UCLA Ficus project.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)null_vnops.c	8.6 (Berkeley) 5/27/95
 *
 * Ancestors:
 *	@@(#)lofs_vnops.c	1.2 (Berkeley) 6/18/92
 *      Id: lofs_vnops.c,v 1.11 1992/05/30 10:05:43 jsp Exp jsp 
 *	...and...
 *	@@(#)null_vnodeops.c 1.20 92/07/07 UCLA Ficus project
 */

/*
 * See miscfs/genfs/layer_vnops.c and mount_null(8) for a
 * description of the null file system.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/time.h>
#include <sys/vnode.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/malloc.h>
#include <sys/buf.h>
#include <miscfs/nullfs/null.h>
#include <miscfs/genfs/layer_extern.h>

/*
 * Global vfs data structures
 */
int (**nullfs_vnodeop_p)(void *);
struct vnodeopv_entry_desc nullfs_vnodeop_entries[] = {
	{ &vop_default_desc,  layer_bypass },

	{ &vop_lookup_desc,   layer_lookup },
	{ &vop_setattr_desc,  layer_setattr },
	{ &vop_getattr_desc,  layer_getattr },
	{ &vop_access_desc,   layer_access },
	{ &vop_lock_desc,     layer_lock },
	{ &vop_unlock_desc,   layer_unlock },
	{ &vop_islocked_desc, layer_islocked },
	{ &vop_fsync_desc,    layer_fsync },
	{ &vop_inactive_desc, layer_inactive },
	{ &vop_reclaim_desc,  layer_reclaim },
	{ &vop_print_desc,    layer_print },

	{ &vop_open_desc,     layer_open },	/* mount option handling */

	{ &vop_strategy_desc, layer_strategy },
	{ &vop_bwrite_desc,   layer_bwrite },
	{ &vop_bmap_desc,     layer_bmap },

	{ NULL, NULL }
};
const struct vnodeopv_desc nullfs_vnodeop_opv_desc =
	{ &nullfs_vnodeop_p, nullfs_vnodeop_entries };
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.17 2003/05/12 21:00:39 tedu Exp $ */
@


1.17
log
@most of the fixes for nullfs.  use the new common layer stuff in genfs.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d51 1
a51 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.16
log
@comment fixes.
--
From: Jean-Francois Brousseau <krapht@@secureops.com>
@
text
@d1 2
a2 2
/*	$OpenBSD: null_vnops.c,v 1.15 2002/03/14 01:27:08 millert Exp $	*/
/*	$NetBSD: null_vnops.c,v 1.7 1996/05/10 22:51:01 jtk Exp $	*/
d5 32
d71 1
a71 1
 *	@@(#)null_vnops.c	8.1 (Berkeley) 6/10/93
d75 1
a75 1
 *	Id: lofs_vnops.c,v 1.11 1992/05/30 10:05:43 jsp Exp
d81 2
a82 127
 * Null Layer
 *
 * (See mount_null(8) for more information.)
 *
 * The null layer duplicates a portion of the file system
 * name space under a new name.  In this respect, it is
 * similar to the loopback file system.  It differs from
 * the loopback fs in two respects:  it is implemented using
 * a stackable layers techniques, and its "null-node"s stack above
 * all lower-layer vnodes, not just over directory vnodes.
 *
 * The null layer has two purposes.  First, it serves as a demonstration
 * of layering by providing a layer which does nothing.  (It actually
 * does everything the loopback file system does, which is slightly
 * more than nothing.)  Second, the null layer can serve as a prototype
 * layer.  Since it provides all necessary layer framework,
 * new file system layers can be created very easily by starting
 * with a null layer.
 *
 * The remainder of this man page examines the null layer as a basis
 * for constructing new layers.
 *
 *
 * INSTANTIATING NEW NULL LAYERS
 *
 * New null layers are created with mount_null(8).
 * Mount_null(8) takes two arguments, the pathname
 * of the lower vfs (target-pn) and the pathname where the null
 * layer will appear in the namespace (alias-pn).  After
 * the null layer is put into place, the contents
 * of target-pn subtree will be aliased under alias-pn.
 *
 *
 * OPERATION OF A NULL LAYER
 *
 * The null layer is the minimum file system layer,
 * simply bypassing all possible operations to the lower layer
 * for processing there.  The majority of its activity centers
 * on the bypass routine, though which nearly all vnode operations
 * pass.
 *
 * The bypass routine accepts arbitrary vnode operations for
 * handling by the lower layer.  It begins by examining vnode
 * operation arguments and replacing any null-nodes by their
 * lower-layer equivalents.  It then invokes the operation
 * on the lower layer.  Finally, it replaces the null-nodes
 * in the arguments and, if a vnode is returned by the operation,
 * stacks a null-node on top of the returned vnode.
 *
 * Although bypass handles most operations, 
 * vop_getattr, _inactive, _reclaim, and _print are not bypassed.
 * Vop_getattr must change the fsid being returned.
 * Vop_lock and vop_unlock must handle any locking for the
 * current vnode as well as pass the lock request down.
 * Vop_inactive and vop_reclaim are not bypassed so that
 * they can handle freeing null-layer specific data. Vop_print
 * is not bypassed to avoid excessive debugging information.
 * Also, certain vnode operations change the locking state within
 * the operation (create, mknod, remove, link, rename, mkdir, rmdir,
 * and symlink). Ideally, these operations should not change the
 * lock state, but should be changed to let the caller of the
 * function unlock them. Otherwise all intermediate vnode layers
 * (such as union, umapfs, etc) must catch these functions
 * to the necessary locking at their layer
 *
 *
 * INSTANTIATING VNODE STACKS
 *
 * Mounting associates the null layer with a lower layer,
 * in effect stacking two VFSes.  Vnode stacks are instead
 * created on demand as files are accessed.
 *
 * The initial mount creates a single vnode stack for the
 * root of the new null layer.  All other vnode stacks
 * are created as a result of vnode operations on
 * this or other null vnode stacks.
 *
 * New vnode stacks come into existence as a result of
 * an operation which returns a vnode.  
 * The bypass routine stacks a null-node above the new
 * vnode before returning it to the caller.
 *
 * For example, imagine mounting a null layer with
 * "mount_null /usr/include /dev/layer/null".
 * Changing directory to /dev/layer/null will assign
 * the root null-node (which was created when the null layer was mounted).
 * Now consider opening "sys".  A vop_lookup would be
 * done on the root null-node.  This operation would bypass through
 * to the lower layer which would return a vnode representing 
 * the UFS "sys".  Null_bypass then builds a null-node
 * aliasing the UFS "sys" and returns this to the caller.
 * Later operations on the null-node "sys" will repeat this
 * process when constructing other vnode stacks.
 *
 *
 * CREATING OTHER FILE SYSTEM LAYERS
 *
 * One of the easiest ways to construct new file system layers is to make
 * a copy of the null layer, rename all files and variables, and
 * then begin modifing the copy.  sed(1) can be used to easily rename
 * all variables.
 *
 * The umap layer is an example of a layer descended from the 
 * null layer.
 *
 *
 * INVOKING OPERATIONS ON LOWER LAYERS
 *
 * There are two techniques to invoke operations on a lower layer 
 * when the operation cannot be completely bypassed.  Each method
 * is appropriate in different situations.  In both cases,
 * it is the responsibility of the aliasing layer to make
 * the operation arguments "correct" for the lower layer
 * by mapping an vnode arguments to the lower layer.
 *
 * The first approach is to call the aliasing layer's bypass routine.
 * This method is most suitable when you wish to invoke the operation
 * currently being handled on the lower layer.  It has the advantage
 * that the bypass routine already must do argument mapping.
 * An example of this is null_getattrs in the null layer.
 *
 * A second approach is to directly invoke vnode operations on
 * the lower layer with the VOP_OPERATIONNAME interface.
 * The advantage of this method is that it is easy to invoke
 * arbitrary operations on the lower layer.  The disadvantage
 * is that vnode arguments must be manually mapped.
 *
a88 1
#include <sys/types.h>
d95 1
a95 422


int null_bug_bypass = 0;   /* for debugging: enables bypass printf'ing */

int	null_getattr(void *);
int	null_inactive(void *);
int	null_reclaim(void *);
int	null_print(void *);
int	null_strategy(void *);
int	null_bwrite(void *);
int	null_lock(void *);
int	null_unlock(void *);
int	null_islocked(void *);
int	null_lookup(void *);
int	null_open(void *);

/*
 * This is the 10-Apr-92 bypass routine.
 *    This version has been optimized for speed, throwing away some
 * safety checks.  It should still always work, but it's not as
 * robust to programmer errors.
 *    Define SAFETY to include some error checking code.
 *
 * In general, we map all vnodes going down and unmap them on the way back.
 * As an exception to this, vnodes can be marked "unmapped" by setting
 * the Nth bit in operation's vdesc_flags.
 *
 * Also, some BSD vnode operations have the side effect of vrele'ing
 * their arguments.  With stacking, the reference counts are held
 * by the upper node, not the lower one, so we must handle these
 * side-effects here.  This is not of concern in Sun-derived systems
 * since there are no such side-effects.
 *
 * This makes the following assumptions:
 * - only one returned vpp
 * - no INOUT vpp's (Sun's vop_open has one of these)
 * - the vnode operation vector of the first vnode should be used
 *   to determine what implementation of the op should be invoked
 * - all mapped vnodes are of our vnode-type (NEEDSWORK:
 *   problems on rmdir'ing mount points and renaming?)
 */ 
int
null_bypass(v)
	void *v;
{
	struct vop_generic_args /* {
				   struct vnodeop_desc *a_desc;
				   <other random data follows, presumably>
				   } */ *ap = v;
	register struct vnode **this_vp_p;
	int error;
	struct vnode *old_vps[VDESC_MAX_VPS];
	struct vnode **vps_p[VDESC_MAX_VPS];
	struct vnode ***vppp;
	struct vnodeop_desc *descp = ap->a_desc;
	int reles, i;

	if (null_bug_bypass)
		printf ("null_bypass: %s\n", descp->vdesc_name);

#ifdef SAFETY
	/*
	 * We require at least one vp.
	 */
	if (descp->vdesc_vp_offsets == NULL ||
	    descp->vdesc_vp_offsets[0] == VDESC_NO_OFFSET)
		panic ("null_bypass: no vp's in map.");
#endif

	/*
	 * Map the vnodes going in.
	 * Later, we'll invoke the operation based on
	 * the first mapped vnode's operation vector.
	 */
	reles = descp->vdesc_flags;
	for (i = 0; i < VDESC_MAX_VPS; reles >>= 1, i++) {
		if (descp->vdesc_vp_offsets[i] == VDESC_NO_OFFSET)
			break;   /* bail out at end of list */
		vps_p[i] = this_vp_p = 
			VOPARG_OFFSETTO(struct vnode**,descp->vdesc_vp_offsets[i],ap);
		/*
		 * We're not guaranteed that any but the first vnode
		 * are of our type.  Check for and don't map any
		 * that aren't.  (We must always map first vp or vclean fails.)
		 */
		if (i && (*this_vp_p == NULLVP ||
			  (*this_vp_p)->v_op != null_vnodeop_p)) {
			old_vps[i] = NULLVP;
		} else {
			old_vps[i] = *this_vp_p;
			*(vps_p[i]) = NULLVPTOLOWERVP(*this_vp_p);
			/*
			 * XXX - Several operations have the side effect
			 * of vrele'ing their vp's.  We must account for
			 * that.  (This should go away in the future.)
			 */
			if (reles & 1)
				VREF(*this_vp_p);
		}
			
	}

	/*
	 * Call the operation on the lower layer
	 * with the modified argument structure.
	 */
	error = VCALL(*(vps_p[0]), descp->vdesc_offset, ap);

	/*
	 * Maintain the illusion of call-by-value
	 * by restoring vnodes in the argument structure
	 * to their original value.
	 */
	reles = descp->vdesc_flags;
	for (i = 0; i < VDESC_MAX_VPS; reles >>= 1, i++) {
		if (descp->vdesc_vp_offsets[i] == VDESC_NO_OFFSET)
			break;   /* bail out at end of list */
		if (old_vps[i] != NULLVP) {
			*(vps_p[i]) = old_vps[i];
			if (reles & 1) {
				vrele(*(vps_p[i]));
			}
		}

		/*
		 * Map the possible out-going vpp
		 * (Assumes that the lower layer always returns
		 * a VREF'ed vpp unless it gets an error.)
		 */
		if (descp->vdesc_vpp_offset != VDESC_NO_OFFSET &&
		    !(descp->vdesc_flags & VDESC_NOMAP_VPP) &&
		    !error) {
			/*
			 * XXX - even though some ops have vpp returned vp's,
			 * several ops actually vrele this before returning.
			 * We must avoid these ops.
			 * (This should go away when these ops are regularized.)
			 */
			if (descp->vdesc_flags & VDESC_VPP_WILLRELE)
				goto out;
			vppp = VOPARG_OFFSETTO(struct vnode***,
					       descp->vdesc_vpp_offset,ap);
			/*
			 * This assumes that **vppp is a locked vnode (it is always
			 * so as of this writing, NetBSD-current 1995/02/16)
			 *
			 * (don't want to lock it if being called on behalf
			 * of lookup--it plays weird locking games depending
			 * on whether or not it's looking up ".", "..", etc.
			 */
			error = null_node_create(old_vps[0]->v_mount, **vppp, *vppp,
						 descp == &vop_lookup_desc ? 0 : 1);
		}
	}

 out:
	return (error);
	
}

/*
 *  We handle getattr only to change the fsid.
 */
int
null_getattr(v)
	void *v;
{
	struct vop_getattr_args /* {
		struct vnode *a_vp;
		struct vattr *a_vap;
		struct ucred *a_cred;
		struct proc *a_p;
	} */ *ap = v;
	int error;
	if ((error = null_bypass(ap)) != NULL)
		return (error);
	/* Requires that arguments be restored. */
	ap->a_vap->va_fsid = ap->a_vp->v_mount->mnt_stat.f_fsid.val[0];
	return (0);
}

/*
 * We must handle open to be able to catch MNT_NODEV and friends.
 */
int
null_open(v)
	void *v;
{
	struct vop_open_args *ap = v;
	struct vnode *vp = ap->a_vp;
	enum vtype lower_type = VTONULL(vp)->null_lowervp->v_type;


	if (((lower_type == VBLK) || (lower_type == VCHR)) &&
	    (vp->v_mount->mnt_flag & MNT_NODEV))
		return ENXIO;

	return null_bypass(ap);
}

int
null_inactive(v)
	void *v;
{
	struct vop_inactive_args *ap = v;

	/*
	 * Do nothing (and _don't_ bypass).
	 * Wait to vrele lowervp until reclaim,
	 * so that until then our null_node is in the
	 * cache and reusable.
	 *
	 * NEEDSWORK: Someday, consider inactive'ing
	 * the lowervp and then trying to reactivate it
	 * with capabilities (v_id)
	 * like they do in the name lookup cache code.
	 * That's too much work for now.
	 */
	VOP_UNLOCK(ap->a_vp, 0, ap->a_p);

	return (0);
}

int
null_reclaim(v)
	void *v;
{
	struct vop_reclaim_args /* {
		struct vnode *a_vp;
	} */ *ap = v;
	struct vnode *vp = ap->a_vp;
	struct null_node *xp = VTONULL(vp);
	struct vnode *lowervp = xp->null_lowervp;

	/*
	 * Note: in vop_reclaim, vp->v_op == dead_vnodeop_p,
	 * so we can't call VOPs on ourself.
	 */
	/* After this assignment, this node will not be re-used. */
	xp->null_lowervp = NULL;
	LIST_REMOVE(xp, null_hash);
	FREE(vp->v_data, M_TEMP);
	vp->v_data = NULL;
	vrele (lowervp);
	return (0);
}


int
null_print(v)
	void *v;
{
	struct vop_print_args /* {
		struct vnode *a_vp;
	} */ *ap = v;
	register struct vnode *vp = ap->a_vp;

	printf ("\ttag VT_NULLFS, vp=%p, lowervp=%p\n", vp, NULLVPTOLOWERVP(vp));
	vprint("nullfs lowervp", NULLVPTOLOWERVP(vp));
	return (0);
}


/*
 * XXX - vop_strategy must be hand coded because it has no
 * vnode in its arguments.
 */
int
null_strategy(v)
	void *v;
{
	struct vop_strategy_args /* {
		struct buf *a_bp;
	} */ *ap = v;
	struct buf *bp = ap->a_bp;
	int error;
	struct vnode *savedvp;

	savedvp = bp->b_vp;
	bp->b_vp = NULLVPTOLOWERVP(bp->b_vp);

	error = VOP_STRATEGY(bp);

	bp->b_vp = savedvp;

	return (error);
}


/*
 * XXX - like vop_strategy, vop_bwrite must be hand coded because it has no
 * vnode in its arguments.
 */
int
null_bwrite(v)
	void *v;
{
	struct vop_bwrite_args /* {
		struct buf *a_bp;
	} */ *ap = v;
	struct buf *bp = ap->a_bp;
	int error;
	struct vnode *savedvp;

	savedvp = bp->b_vp;
	bp->b_vp = NULLVPTOLOWERVP(bp->b_vp);

	error = VOP_BWRITE(bp);

	bp->b_vp = savedvp;

	return (error);
}

/*
 * We need a separate null lock routine, to avoid deadlocks at reclaim time.
 * If a process holds the lower-vnode locked when it tries to reclaim
 * the null upper-vnode, _and_ null_bypass is used as the locking operation,
 * then a process can end up locking against itself.
 * This has been observed when a null mount is set up to "tunnel" beneath a
 * union mount (that setup is useful if you still wish to be able to access
 * the non-union version of either the above or below union layer)
 */
int
null_lock(v)
	void *v;
{
	struct vop_lock_args *ap = v;

#if 0
	vop_generic_lock(ap);
#endif
	if ((ap->a_flags & LK_TYPE_MASK) == LK_DRAIN)
		return (0);
	ap->a_flags &= ~LK_INTERLOCK;

	return (null_bypass((struct vop_generic_args *)ap));
}

int
null_unlock(v)
	void *v;
{
	struct vop_unlock_args *ap = v;
#if 0
	vop_generic_unlock(ap);
#endif
	ap->a_flags &= ~LK_INTERLOCK;

	return (null_bypass((struct vop_generic_args *)ap));
}

int
null_islocked(v)
	void *v;
{
	/* XXX */
	return (0);
}

int
null_lookup(v)
	void *v;
{
	register struct vop_lookup_args /* {
		struct vnodeop_desc *a_desc;
		struct vnode *a_dvp;
		struct vnode **a_vpp;
		struct componentname *a_cnp;
	} */ *ap = v;
	register int error;
	int flags = ap->a_cnp->cn_flags;
	struct componentname *cnp = ap->a_cnp;
#if 0
	register struct vnode *dvp, *vp;
	struct proc *p = cnp->cn_proc;
	struct vop_unlock_args unlockargs;
	struct vop_lock_args lockargs;
#endif

#ifdef NULLFS_DIAGNOSTIC
	printf("null_lookup: dvp=%lx, name='%s'\n",
	       ap->a_dvp, cnp->cn_nameptr);
#endif

	if ((flags & ISLASTCN) && (ap->a_dvp->v_mount->mnt_flag & MNT_RDONLY) &&
	    (cnp->cn_nameiop == DELETE || cnp->cn_nameiop == RENAME))
		return (EROFS);
	error = null_bypass((struct vop_generic_args *)ap);
	if (error == EJUSTRETURN && (flags & ISLASTCN) &&
	    (ap->a_dvp->v_mount->mnt_flag & MNT_RDONLY) &&
	    (cnp->cn_nameiop == CREATE || cnp->cn_nameiop == RENAME))
		error = EROFS;

#if 0
	/*
	 * We must do the same locking and unlocking at this layer as 
	 * is done in the layers below us. We could figure this out 
	 * based on the error return and the LASTCN, LOCKPARENT, and
	 * LOCKLEAF flags. However, it is more expidient to just find 
	 * out the state of the lower level vnodes and set ours to the
	 * same state.
	 */
	dvp = ap->a_dvp;
	vp = *ap->a_vpp;
	if (dvp == vp)
		return (error);
	if (!VOP_ISLOCKED(dvp)) {
		unlockargs.a_vp = dvp;
		unlockargs.a_flags = 0;
		unlockargs.a_p = p;
		vop_generic_unlock(&unlockargs);
	}
	if (vp != NULLVP && VOP_ISLOCKED(vp)) {
		lockargs.a_vp = vp;
		lockargs.a_flags = LK_SHARED;
		lockargs.a_p = p;
		vop_generic_lock(&lockargs);
	}
#endif
	return (error);
}
d100 21
a120 18
int (**null_vnodeop_p)(void *);
struct vnodeopv_entry_desc null_vnodeop_entries[] = {
	{ &vop_default_desc,	null_bypass },

	{ &vop_getattr_desc,	null_getattr },
	{ &vop_inactive_desc,	null_inactive },
	{ &vop_reclaim_desc,	null_reclaim },
	{ &vop_print_desc,	null_print },

	{ &vop_open_desc,	null_open },	/* mount option handling */

	{ &vop_lock_desc,	null_lock },
	{ &vop_unlock_desc,	null_unlock },
	{ &vop_islocked_desc,	null_islocked },
	{ &vop_lookup_desc,	null_lookup },	/* special locking frob */

	{ &vop_strategy_desc,	null_strategy },
	{ &vop_bwrite_desc,	null_bwrite },
d122 1
a122 1
	{ NULL,	NULL }
d124 2
a125 2
struct vnodeopv_desc null_vnodeop_opv_desc =
	{ &null_vnodeop_p, null_vnodeop_entries };
@


1.15
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.14 2001/12/04 22:44:32 art Exp $	*/
d57 1
a57 1
 * a stackable layers techniques, and it's "null-node"s stack above
d61 1
a61 1
 * of layering by proving a layer which does nothing.  (It actually
d65 1
a65 1
 * new file system layers can be created very easily be starting
d91 1
a91 1
 * handling by the lower layer.  It begins by examing vnode
d93 1
a93 1
 * lower-layer equivlants.  It then invokes the operation
d95 1
a95 1
 * in the arguments and, if a vnode is return by the operation,
d104 1
a104 1
 * the can handle freeing null-layer specific data. Vop_print
d106 1
a106 1
 * Also, certain vnod eoperations change the locking state within
d110 1
a110 1
 * function unlock them.Otherwise all intermediate vnode layers
d118 1
a118 1
 * effect stacking two VFSes.  Vnode stacks are instead
d126 1
a126 1
 * New vnode stacks come into existance as a result of
d148 1
a148 1
 * then begin modifing the copy.  Sed can be used to easily rename
d166 1
a166 1
 * currently being hanldled on the lower layer.  It has the advantage
d170 1
a170 1
 * A second approach is to directly invoked vnode operations on
d174 1
a174 1
 * is that vnodes arguments must be manualy mapped.
@


1.14
log
@Readd VOP_MMAP, will be used soon. Right now it's just a question to
the filesystem if we're allowed to mmap the file.
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.13 1999/02/08 22:25:29 art Exp $	*/
d193 11
a203 11
int	null_getattr __P((void *));
int	null_inactive __P((void *));
int	null_reclaim __P((void *));
int	null_print __P((void *));
int	null_strategy __P((void *));
int	null_bwrite __P((void *));
int	null_lock __P((void *));
int	null_unlock __P((void *));
int	null_islocked __P((void *));
int	null_lookup __P((void *));
int	null_open __P((void *));
d615 1
a615 1
int (**null_vnodeop_p) __P((void *));
@


1.14.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.14 2001/12/04 22:44:32 art Exp $	*/
d193 11
a203 11
int	null_getattr(void *);
int	null_inactive(void *);
int	null_reclaim(void *);
int	null_print(void *);
int	null_strategy(void *);
int	null_bwrite(void *);
int	null_lock(void *);
int	null_unlock(void *);
int	null_islocked(void *);
int	null_lookup(void *);
int	null_open(void *);
d615 1
a615 1
int (**null_vnodeop_p)(void *);
@


1.14.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.14.2.1 2002/06/11 03:30:20 art Exp $	*/
d57 1
a57 1
 * a stackable layers techniques, and its "null-node"s stack above
d61 1
a61 1
 * of layering by providing a layer which does nothing.  (It actually
d65 1
a65 1
 * new file system layers can be created very easily by starting
d91 1
a91 1
 * handling by the lower layer.  It begins by examining vnode
d93 1
a93 1
 * lower-layer equivalents.  It then invokes the operation
d95 1
a95 1
 * in the arguments and, if a vnode is returned by the operation,
d104 1
a104 1
 * they can handle freeing null-layer specific data. Vop_print
d106 1
a106 1
 * Also, certain vnode operations change the locking state within
d110 1
a110 1
 * function unlock them. Otherwise all intermediate vnode layers
d118 1
a118 1
 * in effect stacking two VFSes.  Vnode stacks are instead
d126 1
a126 1
 * New vnode stacks come into existence as a result of
d148 1
a148 1
 * then begin modifing the copy.  sed(1) can be used to easily rename
d166 1
a166 1
 * currently being handled on the lower layer.  It has the advantage
d170 1
a170 1
 * A second approach is to directly invoke vnode operations on
d174 1
a174 1
 * is that vnode arguments must be manually mapped.
@


1.14.2.3
log
@sync
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: null_vnops.c,v 1.26 2002/09/10 02:52:40 jtk Exp $	*/
a4 32
 * Copyright (c) 1999 National Aeronautics & Space Administration
 * All rights reserved.
 *
 * This software was written by William Studenmund of the
 * Numerical Aerospace Simulation Facility, NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the National Aeronautics & Space Administration
 *    nor the names of its contributors may be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NATIONAL AERONAUTICS & SPACE ADMINISTRATION
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE ADMINISTRATION OR CONTRIB-
 * UTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
d39 1
a39 1
 *	@@(#)null_vnops.c	8.6 (Berkeley) 5/27/95
d43 1
a43 1
 *      Id: lofs_vnops.c,v 1.11 1992/05/30 10:05:43 jsp Exp jsp 
d49 127
a175 2
 * See miscfs/genfs/layer_vnops.c and mount_null(8) for a
 * description of the null file system.
d182 1
d189 422
a610 1
#include <miscfs/genfs/layer_extern.h>
d615 18
a632 21
int (**nullfs_vnodeop_p)(void *);
struct vnodeopv_entry_desc nullfs_vnodeop_entries[] = {
	{ &vop_default_desc,  layer_bypass },

	{ &vop_lookup_desc,   layer_lookup },
	{ &vop_setattr_desc,  layer_setattr },
	{ &vop_getattr_desc,  layer_getattr },
	{ &vop_access_desc,   layer_access },
	{ &vop_lock_desc,     layer_lock },
	{ &vop_unlock_desc,   layer_unlock },
	{ &vop_islocked_desc, layer_islocked },
	{ &vop_fsync_desc,    layer_fsync },
	{ &vop_inactive_desc, layer_inactive },
	{ &vop_reclaim_desc,  layer_reclaim },
	{ &vop_print_desc,    layer_print },

	{ &vop_open_desc,     layer_open },	/* mount option handling */

	{ &vop_strategy_desc, layer_strategy },
	{ &vop_bwrite_desc,   layer_bwrite },
	{ &vop_bmap_desc,     layer_bmap },
d634 1
a634 1
	{ NULL, NULL }
d636 2
a637 2
const struct vnodeopv_desc nullfs_vnodeop_opv_desc =
	{ &nullfs_vnodeop_p, nullfs_vnodeop_entries };
@


1.13
log
@Don't allow open if the vnode is VBLK or VCHR and we are mounted with MNT_NODEV
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.12 1999/01/11 05:12:27 millert Exp $	*/
a454 1
 * This goes away with a merged VM/buffer cache.
a480 1
 * This goes away with a merged VM/buffer cache.
d634 1
a634 1
	{ (struct vnodeop_desc*)NULL,	(int(*) __P((void *)))NULL }
@


1.13.6.1
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d455 1
d482 1
d636 1
a636 1
	{ NULL,	NULL }
@


1.13.6.2
log
@Merge in -current from roughly a week ago
@
text
@d193 11
a203 11
int	null_getattr(void *);
int	null_inactive(void *);
int	null_reclaim(void *);
int	null_print(void *);
int	null_strategy(void *);
int	null_bwrite(void *);
int	null_lock(void *);
int	null_unlock(void *);
int	null_islocked(void *);
int	null_lookup(void *);
int	null_open(void *);
d615 1
a615 1
int (**null_vnodeop_p)(void *);
@


1.13.6.3
log
@Sync the SMP branch with 3.3
@
text
@d57 1
a57 1
 * a stackable layers techniques, and its "null-node"s stack above
d61 1
a61 1
 * of layering by providing a layer which does nothing.  (It actually
d65 1
a65 1
 * new file system layers can be created very easily by starting
d91 1
a91 1
 * handling by the lower layer.  It begins by examining vnode
d93 1
a93 1
 * lower-layer equivalents.  It then invokes the operation
d95 1
a95 1
 * in the arguments and, if a vnode is returned by the operation,
d104 1
a104 1
 * they can handle freeing null-layer specific data. Vop_print
d106 1
a106 1
 * Also, certain vnode operations change the locking state within
d110 1
a110 1
 * function unlock them. Otherwise all intermediate vnode layers
d118 1
a118 1
 * in effect stacking two VFSes.  Vnode stacks are instead
d126 1
a126 1
 * New vnode stacks come into existence as a result of
d148 1
a148 1
 * then begin modifing the copy.  sed(1) can be used to easily rename
d166 1
a166 1
 * currently being handled on the lower layer.  It has the advantage
d170 1
a170 1
 * A second approach is to directly invoke vnode operations on
d174 1
a174 1
 * is that vnode arguments must be manually mapped.
@


1.13.6.4
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@d1 2
a2 2
/*	$OpenBSD$ */
/*	$NetBSD: null_vnops.c,v 1.26 2002/09/10 02:52:40 jtk Exp $	*/
a4 32
 * Copyright (c) 1999 National Aeronautics & Space Administration
 * All rights reserved.
 *
 * This software was written by William Studenmund of the
 * Numerical Aerospace Simulation Facility, NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the National Aeronautics & Space Administration
 *    nor the names of its contributors may be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NATIONAL AERONAUTICS & SPACE ADMINISTRATION
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE ADMINISTRATION OR CONTRIB-
 * UTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
d39 1
a39 1
 *	@@(#)null_vnops.c	8.6 (Berkeley) 5/27/95
d43 1
a43 1
 *      Id: lofs_vnops.c,v 1.11 1992/05/30 10:05:43 jsp Exp jsp 
d49 127
a175 2
 * See miscfs/genfs/layer_vnops.c and mount_null(8) for a
 * description of the null file system.
d182 1
d189 422
a610 1
#include <miscfs/genfs/layer_extern.h>
d615 18
a632 21
int (**nullfs_vnodeop_p)(void *);
struct vnodeopv_entry_desc nullfs_vnodeop_entries[] = {
	{ &vop_default_desc,  layer_bypass },

	{ &vop_lookup_desc,   layer_lookup },
	{ &vop_setattr_desc,  layer_setattr },
	{ &vop_getattr_desc,  layer_getattr },
	{ &vop_access_desc,   layer_access },
	{ &vop_lock_desc,     layer_lock },
	{ &vop_unlock_desc,   layer_unlock },
	{ &vop_islocked_desc, layer_islocked },
	{ &vop_fsync_desc,    layer_fsync },
	{ &vop_inactive_desc, layer_inactive },
	{ &vop_reclaim_desc,  layer_reclaim },
	{ &vop_print_desc,    layer_print },

	{ &vop_open_desc,     layer_open },	/* mount option handling */

	{ &vop_strategy_desc, layer_strategy },
	{ &vop_bwrite_desc,   layer_bwrite },
	{ &vop_bmap_desc,     layer_bmap },
d634 1
a634 1
	{ NULL, NULL }
d636 2
a637 2
const struct vnodeopv_desc nullfs_vnodeop_opv_desc =
	{ &nullfs_vnodeop_p, nullfs_vnodeop_entries };
@


1.13.6.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.13.6.4 2003/05/16 00:29:43 niklas Exp $ */
d51 5
a55 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.12
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.11 1998/08/06 21:28:45 csapuntz Exp $	*/
d203 1
d370 18
d626 2
d631 1
a631 1
	{ &vop_lookup_desc,	null_lookup }, /* special locking frob */
@


1.11
log
@

Don't pass vclean related stuff to the lower vnode. It makes it very unhappy.
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.10 1998/08/06 19:34:42 csapuntz Exp $	*/
d254 1
a254 1
		panic ("null_bypass: no vp's in map.\n");
@


1.10
log
@

Rename vop_revoke, vn_bwrite, vop_noislocked, vop_nolock, vop_nounlock
to be vop_generic_revoke, vop_generic_bwrite, vop_generic_islocked,
vop_generic_lock and vop_generic_unlock.

Create vop_generic_abortop and propogate change to all file systems.

Fix PR/371.

Get rid of locking in NULLFS (should be mostly unnecessary now except for
forced unmounts).
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.9 1997/12/27 04:49:14 csapuntz Exp $	*/
d503 1
d507 1
a507 1
#endif
d518 1
d520 1
a520 1
#endif
@


1.9
log
@Fixed null_inactie so it odes the right thing.
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.8 1997/11/06 05:58:40 csapuntz Exp $	*/
d234 3
a236 3
		struct vnodeop_desc *a_desc;
		<other random data follows, presumably>
	} */ *ap = v;
d274 1
a274 1
		    (*this_vp_p)->v_op != null_vnodeop_p)) {
d308 1
a308 11
				/* they really vput them, so we must drop
				   our locks (but mark underneath as
				   unlocked first).
				   Beware of vnode duplication--put it once,
				   and rele the rest.  Check this 
				   by looking at our upper flag. */
			    if (VTONULL(*(vps_p[i]))->null_flags & NULL_LOCKED) {
				    VTONULL(*(vps_p[i]))->null_flags &= ~NULL_LLOCK;
				    vput(*(vps_p[i]));
			    } else
				    vrele(*(vps_p[i]));
a310 1
	}
a311 8
	/*
	 * Map the possible out-going vpp
	 * (Assumes that the lower layer always returns
	 * a VREF'ed vpp unless it gets an error.)
	 */
	if (descp->vdesc_vpp_offset != VDESC_NO_OFFSET &&
	    !(descp->vdesc_flags & VDESC_NOMAP_VPP) &&
	    !error) {
d313 3
a315 4
		 * XXX - even though some ops have vpp returned vp's,
		 * several ops actually vrele this before returning.
		 * We must avoid these ops.
		 * (This should go away when these ops are regularized.)
d317 24
a340 15
		if (descp->vdesc_flags & VDESC_VPP_WILLRELE)
			goto out;
		vppp = VOPARG_OFFSETTO(struct vnode***,
				 descp->vdesc_vpp_offset,ap);
		/*
		 * This assumes that **vppp is a locked vnode (it is always
		 * so as of this writing, NetBSD-current 1995/02/16)
		 */
		/*
		 * (don't want to lock it if being called on behalf
		 * of lookup--it plays weird locking games depending
		 * on whether or not it's looking up ".", "..", etc.
		 */
		error = null_node_create(old_vps[0]->v_mount, **vppp, *vppp,
					 descp == &vop_lookup_desc ? 0 : 1);
d345 1
a347 1

a425 1
	register struct null_node *nn = VTONULL(vp);
a427 10
#ifdef DIAGNOSTIC
	printf("%s%s owner pid %d retpc %p retret %p\n",
	       (nn->null_flags & NULL_LOCKED) ? "(LOCKED) " : "",
	       (nn->null_flags & NULL_LLOCK) ? "(LLOCK) " : "",
	       nn->null_pid, nn->null_lockpc, nn->null_lockpc2);
#else
	printf("%s%s\n",
	       (nn->null_flags & NULL_LOCKED) ? "(LOCKED) " : "",
	       (nn->null_flags & NULL_LLOCK) ? "(LLOCK) " : "");
#endif
a499 3
	struct vnode *vp = ap->a_vp;
	struct null_node *nn;
	struct proc *p = ap->a_p;
d501 5
a505 5
#ifdef NULLFS_DIAGNOSTIC
	vprint("null_lock_e", ap->a_vp);
	printf("retpc=%p, retretpc=%p\n",
	       RETURN_PC(0),
	       RETURN_PC(1));
d507 1
a507 44
start:
	while (vp->v_flag & VXLOCK) {
		vp->v_flag |= VXWANT;
		tsleep((caddr_t)vp, PINOD, "nulllock1", 0);
	}

	nn = VTONULL(vp);

	if ((nn->null_flags & NULL_LLOCK) == 0 &&
	    (vp->v_usecount != 0)) {
		/*
		 * only lock underlying node if we haven't locked it yet
		 * for null ops, and our refcount is nonzero.  If usecount
		 * is zero, we are probably being reclaimed so we need to
		 * keep our hands off the lower node.
		 */
		vn_lock(nn->null_lowervp, LK_EXCLUSIVE | LK_RETRY, p);
		nn->null_flags |= NULL_LLOCK;
	}

	if (nn->null_flags & NULL_LOCKED) {
#ifdef DIAGNOSTIC
		if (curproc && nn->null_pid == curproc->p_pid &&
		    nn->null_pid > -1 && curproc->p_pid > -1) {
			vprint("self-lock", vp);
			panic("null: locking against myself");
		}
#endif
		nn->null_flags |= NULL_WANTED;
		tsleep((caddr_t)nn, PINOD, "nulllock2", 0);
		goto start;
	}

#ifdef DIAGNOSTIC
	if (curproc)
		nn->null_pid = curproc->p_pid;
	else
		nn->null_pid = -1;
	nn->null_lockpc = RETURN_PC(0);
	nn->null_lockpc2 = RETURN_PC(1);
#endif

	nn->null_flags |= NULL_LOCKED;
	return (0);
d514 4
a517 17
	struct vop_lock_args *ap = v;
	struct proc *p = ap->a_p;
	struct null_node *nn = VTONULL(ap->a_vp);

#ifdef NULLFS_DIAGNOSTIC
	vprint("null_unlock_e", ap->a_vp);
#endif
#ifdef DIAGNOSTIC
	if ((nn->null_flags & NULL_LOCKED) == 0) {
		vprint("null_unlock", ap->a_vp);
		panic("null: unlocking unlocked node");
	}
	if (curproc && nn->null_pid != curproc->p_pid &&
	    curproc->p_pid > -1 && nn->null_pid > -1) {
		vprint("null_unlock", ap->a_vp);
		panic("null: unlocking other process's null node");
	}
d519 1
a519 16
	nn->null_flags &= ~NULL_LOCKED;

	if ((nn->null_flags & NULL_LLOCK) != 0)
		VOP_UNLOCK(nn->null_lowervp, 0, p);

	nn->null_flags &= ~NULL_LLOCK;
    
	if (nn->null_flags & NULL_WANTED) {
		nn->null_flags &= ~NULL_WANTED;
		wakeup((caddr_t)nn);
	}
#ifdef DIAGNOSTIC
	nn->null_pid = 0;
	nn->null_lockpc = nn->null_lockpc2 = 0;
#endif
	return (0);
d526 2
a527 2
	struct vop_islocked_args *ap = v;
	return ((VTONULL(ap->a_vp)->null_flags & NULL_LOCKED) ? 1 : 0);
a540 1
	register struct vnode *dvp;
d543 2
d546 4
d554 11
d566 6
a571 1
	 * the starting dir (ap->a_dvp) comes in locked.
d573 16
a588 49

	/* set LOCKPARENT to hold on to it until done below */
	cnp->cn_flags |= LOCKPARENT;
	error = null_bypass(ap);
	if (!(flags & LOCKPARENT))
		cnp->cn_flags &= ~LOCKPARENT;

	if (error)
		/*
		 * starting dir is still locked/has been relocked
		 * on error return.
		 */
		return error;

	if (ap->a_dvp != *ap->a_vpp) {
		/*
		 * Lookup returns node locked; we mark both lower and
		 * upper nodes as locked by setting the lower lock
		 * flag (it came back locked), and then call lock to
		 * set upper lock flag & record pid, etc.  see
		 * null_node_create()
		 */
		VTONULL(*ap->a_vpp)->null_flags |= NULL_LLOCK;

		dvp = ap->a_dvp;
		if (flags & ISDOTDOT) {
			/*
			 * If we're looking up `..' and this isn't the
			 * last component, then the starting directory
			 * ("parent") is _unlocked_ as a side-effect
			 * of lookups.  This is to avoid deadlocks:
			 * lock order is always parent, child, so
			 * looking up `..'  requires dropping the lock
			 * on the starting directory.
			 */
			/* see ufs_lookup() for hairy ugly locking protocol
			   examples */
			/*
			 * underlying starting dir comes back locked if flags &
			 * LOCKPARENT (which we artificially set above) and
			 * ISLASTCN.
			 */
			if (flags & ISLASTCN) {
				VTONULL(dvp)->null_flags |= NULL_LLOCK;	/* no-op, right? */
#ifdef NULLFS_DIAGNOSTIC
				if (!VOP_ISLOCKED(VTONULL(dvp)->null_lowervp)) {
					vprint("lowerdvp not locked after lookup\n", dvp);
					panic("null_lookup not locked");
				}
d590 1
a590 63
			} else {
				VTONULL(dvp)->null_flags &= ~NULL_LLOCK;
#ifdef NULLFS_DIAGNOSTIC
				if (VOP_ISLOCKED(VTONULL(dvp)->null_lowervp)) {
					vprint("lowerdvp locked after lookup?\n", dvp);
					panic("null_lookup locked");
				}
#endif
			}
			/*
			 * locking order: drop lock on lower-in-tree
			 * element, then get lock on higher-in-tree
			 * element, then (if needed) re-fetch lower
			 * lock.  No need for vget() since we hold a
			 * refcount to the starting directory
			 */
			VOP_UNLOCK(dvp, 0, p);
			vn_lock(*ap->a_vpp, LK_EXCLUSIVE | LK_RETRY, p);
			/*
			 * we should return our directory locked if
			 * (flags & LOCKPARENT) and (flags & ISLASTCN)
			 */
			if ((flags & LOCKPARENT) && (flags & ISLASTCN))
				vn_lock(dvp, LK_EXCLUSIVE | LK_RETRY, p);
		} else {
			/*
			 * Normal directory locking order: we hold the starting
			 * directory locked; now lock our layer of the target.
			 */
			vn_lock(*ap->a_vpp, LK_RETRY | LK_EXCLUSIVE, p);
			/*
			 * underlying starting dir comes back locked
			 * if lockparent (we set it) and no error
			 * (this leg) and ISLASTCN
			 */
			if (flags & ISLASTCN) {
				VTONULL(dvp)->null_flags |= NULL_LLOCK;	/* no op, right? */
#ifdef NULLFS_DIAGNOSTIC
				if (!VOP_ISLOCKED(VTONULL(dvp)->null_lowervp)) {
					vprint("lowerdvp not locked after lookup\n", dvp);
					panic("null_lookup not locked");
				}
#endif
			} else {
				VTONULL(dvp)->null_flags &= ~NULL_LLOCK;
#ifdef NULLFS_DIAGNOSTIC
				if (VOP_ISLOCKED(VTONULL(dvp)->null_lowervp)) {
					vprint("lowerdvp locked after lookup?\n", dvp);
					panic("null_lookup locked");
				}
#endif
			}
			/*
			 * we should return our directory unlocked if
			 * our caller didn't want the parent locked,
			 * !(flags & LOCKPARENT), or we're not at the
			 * end yet, !(flags & ISLASTCN)
			 */
			if (!(flags & LOCKPARENT) || !(flags & ISLASTCN))
				VOP_UNLOCK(dvp, 0, p);
		}
	}
	return error;
@


1.8
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.7 1997/10/06 20:20:31 deraadt Exp $	*/
d385 2
d399 2
@


1.7
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.5 1997/09/11 05:26:13 millert Exp $	*/
d101 2
d104 9
a112 3
 * they can handle freeing null-layer specific data.
 * Vop_print is not bypassed to avoid excessive debugging
 * information.
a192 1
int	null_bypass __P((void *));
d520 1
d544 1
a544 1
		VOP_LOCK(nn->null_lowervp);
d579 1
d599 1
a599 1
		VOP_UNLOCK(nn->null_lowervp);
d635 2
a636 1

d638 2
a639 2
	printf("null_lookup: dvp=%p, name='%s'\n",
	       ap->a_dvp, ap->a_cnp->cn_nameptr);
d646 1
a646 1
	ap->a_cnp->cn_flags |= LOCKPARENT;
d649 1
a649 1
		ap->a_cnp->cn_flags &= ~LOCKPARENT;
d710 2
a711 2
			VOP_UNLOCK(dvp);
			VOP_LOCK(*ap->a_vpp);
d717 1
a717 1
				VOP_LOCK(dvp);
d723 1
a723 1
			VOP_LOCK(*ap->a_vpp);
d753 1
a753 1
				VOP_UNLOCK(dvp);
@


1.6
log
@VFS Lite2 Changes
@
text
@a100 2
 * Vop_lock and vop_unlock must handle any locking for the
 * current vnode as well as pass the lock request down.
d102 3
a104 9
 * the can handle freeing null-layer specific data. Vop_print
 * is not bypassed to avoid excessive debugging information.
 * Also, certain vnod eoperations change the locking state within
 * the operation (create, mknod, remove, link, rename, mkdir, rmdir,
 * and symlink). Ideally, these operations should not change the
 * lock state, but should be changed to let the caller of the
 * function unlock them.Otherwise all intermediate vnode layers
 * (such as union, umapfs, etc) must catch these functions
 * to the necessary locking at their layer
d185 1
a512 1
	struct proc *p = ap->a_p;
d536 1
a536 1
		vn_lock(nn->null_lowervp, LK_EXCLUSIVE | LK_RETRY, p);
a570 1
	struct proc *p = ap->a_p;
d590 1
a590 1
		VOP_UNLOCK(nn->null_lowervp, 0, p);
d626 1
a626 2
	struct componentname *cnp = ap->a_cnp;
	struct proc *p = cnp->cn_proc;
d628 2
a629 2
	printf("null_lookup: dvp=%lx, name='%s'\n",
	       ap->a_dvp, cnp->cn_nameptr);
d636 1
a636 1
	cnp->cn_flags |= LOCKPARENT;
d639 1
a639 1
		cnp->cn_flags &= ~LOCKPARENT;
d700 2
a701 2
			VOP_UNLOCK(dvp, 0, p);
			vn_lock(*ap->a_vpp, LK_EXCLUSIVE | LK_RETRY, p);
d707 1
a707 1
				vn_lock(dvp, LK_EXCLUSIVE | LK_RETRY, p);
d713 1
a713 1
			vn_lock(*ap->a_vpp, LK_RETRY | LK_EXCLUSIVE, p);
d743 1
a743 1
				VOP_UNLOCK(dvp, 0, p);
@


1.5
log
@Fix {KERNFS,NULLFS,UMAPFS,UNION}_DIAGNOSTIC kernel compilation errors.
From Alan Barrett <apb@@iafrica.com> with some changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.4 1996/05/22 12:04:36 deraadt Exp $	*/
d101 2
d104 9
a112 3
 * they can handle freeing null-layer specific data.
 * Vop_print is not bypassed to avoid excessive debugging
 * information.
a192 1
int	null_bypass __P((void *));
d520 1
d544 1
a544 1
		VOP_LOCK(nn->null_lowervp);
d579 1
d599 1
a599 1
		VOP_UNLOCK(nn->null_lowervp);
d635 2
a636 1

d638 2
a639 2
	printf("null_lookup: dvp=%p, name='%s'\n",
	       ap->a_dvp, ap->a_cnp->cn_nameptr);
d646 1
a646 1
	ap->a_cnp->cn_flags |= LOCKPARENT;
d649 1
a649 1
		ap->a_cnp->cn_flags &= ~LOCKPARENT;
d710 2
a711 2
			VOP_UNLOCK(dvp);
			VOP_LOCK(*ap->a_vpp);
d717 1
a717 1
				VOP_LOCK(dvp);
d723 1
a723 1
			VOP_LOCK(*ap->a_vpp);
d753 1
a753 1
				VOP_UNLOCK(dvp);
@


1.4
log
@latest locking changes from jtk
@
text
@d1 1
a1 1
/*	$OpenBSD: null_vnops.c,v 1.2 1996/02/27 07:58:04 niklas Exp $	*/
d516 1
a516 1
	printf("retpc=%lx, retretpc=%lx\n",
d628 1
a628 1
	printf("null_lookup: dvp=%lx, name='%s'\n",
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d2 1
a2 1
/*	$NetBSD: null_vnops.c,v 1.6 1996/04/13 01:34:06 cgd Exp $	*/
d192 5
d300 13
a312 2
			if (reles & 1)
				vrele(*(vps_p[i]));
d334 11
a344 1
		error = null_node_create(old_vps[0]->v_mount, **vppp, *vppp);
d426 14
a439 2
	printf ("\ttag VT_NULLFS, vp=%p, lowervp=%p\n", vp,
	    NULLVPTOLOWERVP(vp));
d498 252
d760 5
@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: null_vnops.c,v 1.5 1996/02/09 22:40:34 christos Exp $	*/
d400 2
a401 2
	printf ("\ttag VT_NULLFS, vp=%x, lowervp=%x\n", (unsigned int) vp,
		(unsigned int) NULLVPTOLOWERVP(vp));
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: null_vnops.c,v 1.4 1994/08/19 11:25:37 mycroft Exp $	*/
d185 7
d218 3
a220 1
null_bypass(ap)
d224 1
a224 3
	} */ *ap;
{
	extern int (**null_vnodeop_p)();  /* not extern, really "forward" */
d330 3
a332 1
null_getattr(ap)
d338 1
a338 2
	} */ *ap;
{
d340 1
a340 1
	if (error = null_bypass(ap))
d349 2
a350 4
null_inactive(ap)
	struct vop_inactive_args /* {
		struct vnode *a_vp;
	} */ *ap;
d368 3
a370 1
null_reclaim(ap)
d373 1
a373 2
	} */ *ap;
{
d393 3
a395 1
null_print(ap)
d398 1
a398 2
	} */ *ap;
{
d400 2
a401 1
	printf ("\ttag VT_NULLFS, vp=%x, lowervp=%x\n", vp, NULLVPTOLOWERVP(vp));
d412 3
a414 1
null_strategy(ap)
d417 1
a417 2
	} */ *ap;
{
d439 3
a441 1
null_bwrite(ap)
d444 1
a444 2
	} */ *ap;
{
d462 1
a462 1
int (**null_vnodeop_p)();
d464 1
a464 1
	{ &vop_default_desc, null_bypass },
d466 4
a469 4
	{ &vop_getattr_desc, null_getattr },
	{ &vop_inactive_desc, null_inactive },
	{ &vop_reclaim_desc, null_reclaim },
	{ &vop_print_desc, null_print },
d471 2
a472 2
	{ &vop_strategy_desc, null_strategy },
	{ &vop_bwrite_desc, null_bwrite },
d474 1
a474 1
	{ (struct vnodeop_desc*)NULL, (int(*)())NULL }
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
