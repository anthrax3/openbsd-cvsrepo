head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.12
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.10
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.6
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.8
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.14.0.22
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.18
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.16
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.14
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.12
	OPENBSD_5_0:1.14.0.10
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.8
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.6
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.14.0.2
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.13.0.16
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.14
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.12
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.10
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.8
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.6
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.4
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.4
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.8
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.15
date	2014.07.11.12.33.12;	author jasper;	state Exp;
branches;
next	1.14;
commitid	PMVX1su0i0DxUz6L;

1.14
date	2009.04.30.01.12.44;	author dlg;	state Exp;
branches;
next	1.13;

1.13
date	2005.05.24.20.48.35;	author uwe;	state Exp;
branches;
next	1.12;

1.12
date	2004.06.24.22.41.39;	author tom;	state Exp;
branches;
next	1.11;

1.11
date	2004.01.29.00.54.08;	author tom;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.11.06.23.07;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.20.20.54;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.01.17.00.27;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.27.13;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.02.16.32.10;	author mickey;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2000.01.03.22.27.30;	author mickey;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	99.06.12.01.22.47;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	99.05.21.02.47.12;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.05.30.01.51.39;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.05.25.19.17.43;	author mickey;	state Exp;
branches;
next	;

1.5.2.1
date	2001.07.04.11.00.11;	author niklas;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2003.06.07.11.07.44;	author ho;	state Exp;
branches;
next	1.5.2.4;

1.5.2.4
date	2004.02.19.11.01.32;	author niklas;	state Exp;
branches;
next	;

1.6.4.1
date	2002.06.11.03.32.24;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@whatever mickey had to drink 13 years ago, he's not going to find it again. so
just remove the comment and unneeded functionality which has been "#ifdef notused"
for the past 13 years.

OK uebayasi@@
@
text
@/*	$OpenBSD: vars.c,v 1.14 2009/04/30 01:12:44 dlg Exp $	*/

/*
 * Copyright (c) 1998-2000 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF MIND, USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <libsa.h>
#include <sys/reboot.h>
#include <lib/libkern/funcs.h>
#include "cmd.h"

extern char prog_ident[];
extern int debug;
int db_console = -1;

static int Xaddr(void);
static int Xdevice(void);
#ifdef DEBUG
static int Xdebug(void);
#endif
static int Xdb_console(void);
static int Ximage(void);
static int Xhowto(void);
static int Xtty(void);
static int Xtimeout(void);
int Xset(void);
int Xenv(void);

const struct cmd_table cmd_set[] = {
	{"addr",   CMDT_VAR, Xaddr},
	{"howto",  CMDT_VAR, Xhowto},
#ifdef DEBUG
	{"debug",  CMDT_VAR, Xdebug},
#endif
	{"device", CMDT_VAR, Xdevice},
	{"tty",    CMDT_VAR, Xtty},
	{"image",  CMDT_VAR, Ximage},
	{"timeout",CMDT_VAR, Xtimeout},
	{"db_console", CMDT_VAR, Xdb_console},
	{NULL,0}
};

#ifdef DEBUG
static int
Xdebug(void)
{
	if (cmd.argc != 2)
		printf( "o%s\n", debug? "n": "ff" );
	else
		debug = (cmd.argv[1][0] == '0' ||
			 (cmd.argv[1][0] == 'o' && cmd.argv[1][1] == 'f'))?
			 0: 1;
	return 0;
}
#endif

int
Xdb_console(void)
{
	if (cmd.argc != 2) {
		switch (db_console) {
		case 0:
			printf("off\n");
			break;
		case 1:
			printf("on\n");
			break;
		default:
			printf("unset\n");
			break;
		}
	} else {
		if (strcmp(cmd.argv[1], "0") == 0 ||
		    strcmp(cmd.argv[1], "off") == 0)
			db_console = 0;
		else if (strcmp(cmd.argv[1], "1") == 0 ||
		    strcmp(cmd.argv[1], "on") == 0)
			db_console = 1;
	}

	return (0);
}

static int
Xtimeout(void)
{
	if (cmd.argc != 2)
		printf( "%d\n", cmd.timeout );
	else
		cmd.timeout = (int)strtol( cmd.argv[1], (char **)NULL, 0 );
	return 0;
}

/* called only w/ no arguments */
int
Xset(void)
{
	const struct cmd_table *ct;

	printf("%s\n", prog_ident);
	for (ct = cmd_set; ct->cmd_name != NULL; ct++) {
		printf("%s\t ", ct->cmd_name);
		(*ct->cmd_exec)();
	}
	return 0;
}

static int
Xdevice(void)
{
	if (cmd.argc != 2)
		printf("%s\n", cmd.bootdev);
	else
		strlcpy(cmd.bootdev, cmd.argv[1], sizeof(cmd.bootdev));
	return 0;
}

static int
Ximage(void)
{
	if (cmd.argc != 2)
		printf("%s\n", cmd.image);
	else
		strlcpy(cmd.image, cmd.argv[1], sizeof(cmd.image));
	return 0;
}

static int
Xaddr(void)
{
	if (cmd.argc != 2)
		printf("%p\n", cmd.addr);
	else
		cmd.addr = (void *)strtol(cmd.argv[1], NULL, 0);
	return 0;
}

static int
Xtty(void)
{
	dev_t dev;

	if (cmd.argc != 2)
		printf("%s\n", ttyname(0));
	else {
		dev = ttydev(cmd.argv[1]);
		if (dev == NODEV)
			printf("%s not a console device\n", cmd.argv[1]);
		else {
			printf("switching console to %s\n", cmd.argv[1]);
			if (cnset(dev))
				printf("%s console not present\n",
				    cmd.argv[1]);
			else
				printf("%s\n", prog_ident);
		}
	}
	return 0;
}

static int
Xhowto(void)
{
	if (cmd.argc == 1) {
		if (cmd.boothowto) {
			putchar('-');
			if (cmd.boothowto & RB_ASKNAME)
				putchar('a');
			if (cmd.boothowto & RB_CONFIG)
				putchar('c');
			if (cmd.boothowto & RB_SINGLE)
				putchar('s');
			if (cmd.boothowto & RB_KDB)
				putchar('d');
		}
		putchar('\n');
	} else
		bootparse(1);
	return 0;
}

int
bootparse(int i)
{
	char *cp;
	int howto = cmd.boothowto;

	for (; i < cmd.argc; i++) {
		cp = cmd.argv[i];
		if (*cp == '-') {
			while (*++cp) {
				switch (*cp) {
				case 'a':
					howto |= RB_ASKNAME;
					break;
				case 'c':
					howto |= RB_CONFIG;
					break;
				case 's':
					howto |= RB_SINGLE;
					break;
				case 'd':
					howto |= RB_KDB;
					break;
				default:
					printf("howto: bad option: %c\n", *cp);
					return 1;
				}
			}
		} else {
			printf("boot: illegal argument %s\n", cmd.argv[i]);
			return 1;
		}
	}
	cmd.boothowto = howto;
	return 0;
}

/*
 * maintain environment as a sequence of '\n' separated
 * variable definitions in the form <name>=[<value>]
 * terminated by the usual '\0'
 */
char *environ;

int
Xenv(void)
{
	if (cmd.argc == 1) {
		if (environ)
			printf("%s", environ);
		else
			printf("empty\n");
	} else {
		char *p, *q;
		int l;

		for (p = environ; p && *p; p = q) {
			l = strlen(cmd.argv[1]);
			for (q = p; *q != '='; q++)
				;
			l = max(l, q - p) + 1;
			for (q = p; *q != '\n'; q++)
				;
			if (*q)
				q++;
			if (!strncmp(p, cmd.argv[1], l)) {
				while((*p++ = *q++))
					;
				p--;
			}
		}
		if (!p)
			p = environ = alloc(4096);
		snprintf(p, environ + 4096 - p, "%s=%s\n",
		    cmd.argv[1], (cmd.argc==3?cmd.argv[2]:""));
	}

	return 0;
}
@


1.14
log
@add another settable variable called db_console which the MD parts of a
bootloader will pass to the kernel to allow you to force ddb.console to be
set (and set early) on a machine without having to do it on a per kernel
basis using code or config tweaks.

requested by art@@ (who owes me good whiskey now)
no problem! deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.12 2004/06/24 22:41:39 tom Exp $	*/
a192 4
#ifdef notused
			if (cmd.boothowto & RB_HALT)
				putchar('b');
#endif
a219 9
#ifdef notused
	/*
	 * one day i get the same nice drink i was having
	 * and figure out what is it supposed to be used for
	 */
				case 'b':
					howto |= RB_HALT;
					break;
#endif
@


1.13
log
@printf(s) -> printf("%s", s)
@
text
@d38 1
d45 1
d63 1
d80 27
@


1.12
log
@Identify ourselves on the new console device when it's changed.

ok weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.11 2004/01/29 00:54:08 tom Exp $	*/
d238 1
a238 1
			printf(environ);
@


1.11
log
@Allow the machine-dependent part of BOOT to change the program name.

ok weingart@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.9 2003/06/02 20:20:54 mickey Exp $	*/
d148 2
@


1.10
log
@ansification and knf and protos
@
text
@d36 1
a36 1
extern const char version[];
d94 1
a94 1
	printf(">> OpenBSD/" MACHINE_ARCH " BOOT %s\n", version);
@


1.9
log
@three four kill ...
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.8 2003/06/01 17:00:27 deraadt Exp $	*/
d66 1
a66 1
Xdebug()
d79 1
a79 1
Xtimeout()
d90 1
a90 1
Xset()
d92 1
a92 1
	register const struct cmd_table *ct;
d103 1
a103 1
Xdevice()
d113 1
a113 1
Ximage()
d123 1
a123 1
Xaddr()
d133 1
a133 1
Xtty()
d154 1
a154 1
Xhowto()
d179 1
a179 2
bootparse(i)
	int i;
d181 1
a181 1
	register char *cp;
d232 1
a232 1
Xenv()
d240 1
a240 1
		register char *p, *q;
d242 1
@


1.8
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.7 2002/03/14 01:27:13 millert Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.6 2001/05/02 16:32:10 mickey Exp $	*/
d38 1
d59 1
a59 1
#ifdef DEBUG	
d113 1
a113 1
		strncpy(cmd.bootdev, cmd.argv[1], sizeof(cmd.bootdev));
d123 1
a123 1
		strncpy(cmd.image, cmd.argv[1], sizeof(cmd.image));
d236 1
d250 2
a251 1
			for (q = p; *q != '='; q++);
d253 2
a254 1
			for (q = p; *q != '\n'; q++);
d258 2
a259 1
				while((*p++ = *q++));
d265 2
a266 2
		sprintf(p, "%s=%s\n",
			cmd.argv[1], (cmd.argc==3?cmd.argv[2]:""));
@


1.6
log
@-b i dunno, and it's hard to get auth .su liquer here to figure it out
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.5 2000/01/03 22:27:30 mickey Exp $	*/
d43 2
a44 2
static int Xaddr __P((void));
static int Xdevice __P((void));
d46 1
a46 1
static int Xdebug __P((void));
d48 6
a53 6
static int Ximage __P((void));
static int Xhowto __P((void));
static int Xtty __P((void));
static int Xtimeout __P((void));
int Xset __P((void));
int Xenv __P((void));
@


1.6.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.6 2001/05/02 16:32:10 mickey Exp $	*/
d43 2
a44 2
static int Xaddr(void);
static int Xdevice(void);
d46 1
a46 1
static int Xdebug(void);
d48 6
a53 6
static int Ximage(void);
static int Xhowto(void);
static int Xtty(void);
static int Xtimeout(void);
int Xset(void);
int Xenv(void);
@


1.5
log
@use strtol to parse timeout value; from Kenneth R Westerback <kwesterback@@home.com>, effectively closes pr/1006, plus a few space issues
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.4 1999/06/12 01:22:47 todd Exp $	*/
d165 1
d168 1
d197 5
d205 1
d259 1
a259 1
			p = environ = alloc(NBPG);
@


1.5.2.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.5 2000/01/03 22:27:30 mickey Exp $	*/
a164 1
#ifdef notused
a166 1
#endif
a194 5
#ifdef notused
	/*
	 * one day i get the same nice drink i was having
	 * and figure out what is it supposed to be used for
	 */
a197 1
#endif
d251 1
a251 1
			p = environ = alloc(4096);
@


1.5.2.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d43 2
a44 2
static int Xaddr(void);
static int Xdevice(void);
d46 1
a46 1
static int Xdebug(void);
d48 6
a53 6
static int Ximage(void);
static int Xhowto(void);
static int Xtty(void);
static int Xtimeout(void);
int Xset(void);
int Xenv(void);
@


1.5.2.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.5.2.2 2002/03/28 14:52:01 niklas Exp $	*/
d15 5
a37 1
#include <lib/libkern/funcs.h>
d58 1
a58 1
#ifdef DEBUG
d112 1
a112 1
		strlcpy(cmd.bootdev, cmd.argv[1], sizeof(cmd.bootdev));
d122 1
a122 1
		strlcpy(cmd.image, cmd.argv[1], sizeof(cmd.image));
a234 1

d248 1
a248 2
			for (q = p; *q != '='; q++)
				;
d250 1
a250 2
			for (q = p; *q != '\n'; q++)
				;
d254 1
a254 2
				while((*p++ = *q++))
					;
d260 2
a261 2
		snprintf(p, environ + 4096 - p, "%s=%s\n",
		    cmd.argv[1], (cmd.argc==3?cmd.argv[2]:""));
@


1.5.2.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 1
extern char prog_ident[];
d66 1
a66 1
Xdebug(void)
d79 1
a79 1
Xtimeout(void)
d90 1
a90 1
Xset(void)
d92 1
a92 1
	const struct cmd_table *ct;
d94 1
a94 1
	printf("%s\n", prog_ident);
d103 1
a103 1
Xdevice(void)
d113 1
a113 1
Ximage(void)
d123 1
a123 1
Xaddr(void)
d133 1
a133 1
Xtty(void)
d154 1
a154 1
Xhowto(void)
d179 2
a180 1
bootparse(int i)
d182 1
a182 1
	char *cp;
d233 1
a233 1
Xenv(void)
d241 1
a241 1
		char *p, *q;
a242 1

@


1.4
log
@fix displaying of variable value behavior
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.3 1999/05/21 02:47:12 millert Exp $	*/
d4 1
a4 1
 * Copyright (c) 1998 Michael Shalayeff
d21 2
a22 2
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
d27 1
a27 1
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
d72 1
a72 1
	if (cmd.argc !=2)
d85 1
a85 1
	if (cmd.argc !=2)
d88 1
a88 2
		if( (cmd.argv[1][0] >= 48) && (cmd.argv[1][0] <= 57) )
			cmd.timeout = cmd.argv[1][0] - 48;
d151 1
a151 1
				       cmd.argv[1]);
@


1.3
log
@typo; kwesterback@@home.com
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.2 1998/05/30 01:51:39 mickey Exp $	*/
d51 1
d64 1
d73 1
a73 1
		printf(debug? "on": "off");
d82 11
a102 1
		putchar('\n');
d111 1
a111 1
		printf(cmd.bootdev);
d121 1
a121 1
		printf(cmd.image);
d131 1
a131 1
		printf("%p", cmd.addr);
d143 1
a143 1
		printf(ttyname(0));
d175 1
@


1.2
log
@fix variable comparision algorythm so variable being changed/added
which name is a substr of the name of another one would not corrupt the list.
@
text
@d1 1
a1 1
/*	$OpenBSD: vars.c,v 1.1 1998/05/25 19:17:43 mickey Exp $	*/
d210 1
a210 1
 * maintain environmanet as a sequence of '\n' separated
@


1.1
log
@make a new file for variable manipulation code; add environment support
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d229 1
a229 1
			l = max(l, q - p);
@

