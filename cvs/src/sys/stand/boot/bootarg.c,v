head	1.12;
access;
symbols
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.8
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.46
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.42
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.40
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.38
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.36
	OPENBSD_5_0:1.10.0.34
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.32
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.30
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.26
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.28
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.24
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.22
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.20
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.18
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.16
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.14
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.14
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.12
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.4
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3;
locks; strict;
comment	@ * @;


1.12
date	2015.09.02.01.52.26;	author yasuoka;	state Exp;
branches;
next	1.11;
commitid	CUwlbzT4LejFC15d;

1.11
date	2014.06.27.16.05.20;	author tobias;	state Exp;
branches;
next	1.10;
commitid	k0WwW7fklhwivOCv;

1.10
date	2003.08.11.06.23.07;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.20.20.54;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.01.17.00.27;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.03.16.12;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.05.20.12.56.40;	author aaron;	state Exp;
branches
	1.6.4.1
	1.6.14.1;
next	1.5;

1.5
date	98.05.25.19.17.38;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	98.04.18.07.40.02;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.10.25.06.58.48;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.10.22.23.48.40;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	97.10.21.04.05.53;	author mickey;	state Exp;
branches;
next	;

1.6.4.1
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2003.06.07.11.07.44;	author ho;	state Exp;
branches;
next	1.6.4.3;

1.6.4.3
date	2004.02.19.11.01.32;	author niklas;	state Exp;
branches;
next	;

1.6.14.1
date	2002.06.11.03.32.24;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Initial commit of uefi boot loader of OpenBSD.

ok deraadt yuo
@
text
@/*	$OpenBSD: bootarg.c,v 1.11 2014/06/27 16:05:20 tobias Exp $	*/

/*
 * Copyright (c) 1997,1998 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <lib/libsa/stand.h>
#include <stand/boot/bootarg.h>

static bootarg_t *bootarg_list;

void
addbootarg(int t, size_t l, void *p)
{
	bootarg_t *q = alloc(sizeof(*q) + l - sizeof(q->ba_arg));

	q->ba_type = t;
	q->ba_size = sizeof(*q) + l - sizeof(q->ba_arg);
	bcopy(p, q->ba_arg, l);
	q->ba_next = bootarg_list;
	bootarg_list = q;
}

void
makebootargs(caddr_t v, size_t *lenp)
{
	bootarg_t *p;
	u_char *q;
	size_t l;

	/* get total size */
	l = sizeof(*p);
	for (p = bootarg_list; p != NULL; p = p->ba_next) {
		l += p->ba_size;
		if (*lenp < l) {
#ifdef DEBUG
			printf("makebootargs: too many args\n");
#endif
			l -= p->ba_size;
			break;
		}
	}
	*lenp = l;
	/* copy them out */
	for (p = bootarg_list, q = v;
	     p != NULL && ((q + p->ba_size) - (u_char *)v) <= l - sizeof(*p);
	     q += p->ba_size, p = p->ba_next) {
#ifdef DEBUG
		printf("%d,%d ", p->ba_type, p->ba_size);
#endif
		bcopy(p, q, p->ba_size);
	}
	p = (bootarg_t *)q;
	p->ba_type = BOOTARG_END;
}

void
makebootargs32(caddr_t v, size_t *lenp)
{
	bootarg_t       *p;
	u_char          *q;
	size_t           l;
	size_t           adj;
	struct bootarg32 {
		int      ba_type;
		int      ba_size;
		int      ba_nextX;
		char     ba_arg[1];
	}               *p32;

	adj = (ssize_t)sizeof(struct bootarg32) - sizeof(bootarg_t);
	/* get total size */
	l = sizeof(*p32);
	for (p = bootarg_list; p != NULL; p = p->ba_next) {
		l += p->ba_size + adj;
		if (*lenp < l) {
#ifdef DEBUG
			printf("makebootargs: too many args\n");
#endif
			l -= p->ba_size + adj;
			break;
		}
	}
	*lenp = l;
	/* copy them out */
	for (p = bootarg_list, q = v; p != NULL; p = p->ba_next) {
		if (q + p->ba_size + adj > (u_char *)v + l - sizeof(*p32))
			break;
		p32 = (struct bootarg32 *)q;
		p32->ba_type = p->ba_type;
		p32->ba_size = p->ba_size + adj;
		bcopy(p->ba_arg, p32->ba_arg,
		    p->ba_size - (sizeof(*p) - sizeof(p->ba_arg)));
#ifdef DEBUG
		printf("%d,%d ", p->ba_type, p->ba_size);
#endif
		q += p32->ba_size;
	}
	p32 = (struct bootarg32 *)q;
	p32->ba_type = BOOTARG_END;
}
@


1.11
log
@Avoid buffer overflow if there were too many arguments, also adjust lenp
to contain actually consumed space on truncation.

bootarg_list can be static again, it's not referenced from outside.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bootarg.c,v 1.10 2003/08/11 06:23:07 deraadt Exp $	*/
d80 45
@


1.10
log
@ansification and knf and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: bootarg.c,v 1.9 2003/06/02 20:20:54 mickey Exp $	*/
d33 1
a33 1
bootarg_t *bootarg_list;
d56 1
a56 1
	for (p = bootarg_list; p != NULL; p = p->ba_next)
d58 1
a58 1
	if (*lenp < l) {
d60 1
a60 1
		printf("makebootargs: too many args\n");
d62 3
a64 1
		l = *lenp;
d69 1
a69 1
	     p != NULL && ((q + p->ba_size) - (u_char *)v) < l;
@


1.9
log
@three four kill ...
@
text
@d1 1
a1 1
/*	$OpenBSD: bootarg.c,v 1.8 2003/06/01 17:00:27 deraadt Exp $	*/
d36 1
a36 4
addbootarg(t, l, p)
	int t;
	size_t l;
	void *p;
d48 1
a48 3
makebootargs(v, lenp)
	caddr_t v;
	size_t *lenp;
d50 3
a52 3
	register bootarg_t *p;
	register u_char *q;
	register size_t l;
@


1.8
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
/*	$OpenBSD: bootarg.c,v 1.7 2002/03/14 03:16:12 millert Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.7
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: bootarg.c,v 1.6 1999/05/20 12:56:40 aaron Exp $	*/
d21 2
a22 2
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
@


1.6
log
@fix some typos; kwesterback@@home.com
@
text
@d1 1
a1 1
/*	$OpenBSD: bootarg.c,v 1.5 1998/05/25 19:17:38 mickey Exp $	*/
d77 1
a77 1
	     p != NULL && ((q + p->ba_size) - (u_char*)v) < l;
@


1.6.14.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bootarg.c,v 1.6 1999/05/20 12:56:40 aaron Exp $	*/
d77 1
a77 1
	     p != NULL && ((q + p->ba_size) - (u_char *)v) < l;
@


1.6.4.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d77 1
a77 1
	     p != NULL && ((q + p->ba_size) - (u_char *)v) < l;
@


1.6.4.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bootarg.c,v 1.6.4.1 2002/03/28 14:52:01 niklas Exp $	*/
d15 5
d21 2
a22 2
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
@


1.6.4.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 4
a39 1
addbootarg(int t, size_t l, void *p)
d51 3
a53 1
makebootargs(caddr_t v, size_t *lenp)
d55 3
a57 3
	bootarg_t *p;
	u_char *q;
	size_t l;
@


1.5
log
@make a new file for variable manipulation code; add environment support
@
text
@d1 1
a1 1
/*	$OpenBSD: bootarg.c,v 1.4 1998/04/18 07:40:02 deraadt Exp $	*/
d70 1
a70 1
		printf("makebootargs: too much args\n");
@


1.4
log
@i386 bootblocks that work for 2.3. A tale too long to tell
@
text
@d1 1
a1 1
/*	$OpenBSD: bootarg.c,v 1.3 1997/10/25 06:58:48 mickey Exp $	*/
d4 1
a4 1
 * Copyright (c) 1997 Michael Shalayeff
@


1.3
log
@new bootargs, store argv at specified location
@
text
@d1 1
a1 1
/*	$OpenBSD: bootarg.c,v 1.2 1997/10/22 23:48:40 mickey Exp $	*/
d38 1
a38 1
static bootarg_t *list = NULL;
d51 2
a52 2
	q->ba_next = list;
	list = q;
d66 1
a66 1
	for (p = list; p != NULL; p = p->ba_next)
d76 2
a77 1
	for (p = list, q = v; p != NULL && ((q + p->ba_size) - (u_char*)v) < l;
@


1.2
log
@fix makebootargs
@
text
@d1 1
a1 1
/*	$OpenBSD: bootarg.c,v 1.1 1997/10/21 04:05:53 mickey Exp $	*/
d55 3
a57 2
void *
makebootargs(lenp)
d60 3
a62 2
	bootarg_t *p;
	u_char *r, *q;
d65 1
a65 1
	*lenp = 0;
d67 8
a74 2
		*lenp += p->ba_size;
	r = alloc(*lenp += sizeof(*p));
d76 2
a77 1
	for (p = list, q = r; p != NULL; q += p->ba_size, p = p->ba_next) {
a84 1
	return r;
@


1.1
log
@argument vector support
@
text
@d1 1
a1 1
/*	$OpenBSD: machdep.c,v 1.20 1997/10/18 05:13:17 mickey Exp $	*/
d50 1
a50 1
	memcpy(q->ba_arg, p, l);
d66 1
a66 1
	r = alloc(*lenp + sizeof(p->ba_type));
d68 8
a75 3
	for (p = list, q = r; p != NULL; p = p->ba_next, q += p->ba_size)
		memcpy(q, p, p->ba_size);
	*(int *)q = BOOTARG_END;
@
