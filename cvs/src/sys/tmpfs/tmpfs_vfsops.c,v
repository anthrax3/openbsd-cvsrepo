head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.2
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2017.09.08.05.36.53;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	uRv5pa9QDlZaYgwD;

1.12
date	2016.09.15.02.00.18;	author dlg;	state Exp;
branches;
next	1.11;
commitid	RlO92XR575sygHqm;

1.11
date	2016.08.23.04.28.18;	author dlg;	state Exp;
branches;
next	1.10;
commitid	9JBYfGNo0wKw1mQI;

1.10
date	2016.07.22.13.11.01;	author kettenis;	state Exp;
branches;
next	1.9;
commitid	Rts0BRN937omHwo0;

1.9
date	2016.07.11.22.36.25;	author tedu;	state Exp;
branches;
next	1.8;
commitid	rdE7sQt1bQTVCnAn;

1.8
date	2016.01.13.13.01.40;	author gsoares;	state Exp;
branches;
next	1.7;
commitid	0iYcUj8zlQTOE1tX;

1.7
date	2015.01.21.22.26.52;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	j7T930OrMIO9rRFp;

1.6
date	2014.12.23.01.53.57;	author tedu;	state Exp;
branches;
next	1.5;
commitid	SQ3WCWkkCDB38r6O;

1.5
date	2014.11.02.03.47.28;	author tedu;	state Exp;
branches;
next	1.4;
commitid	fgLd2cMfnltXAQ0p;

1.4
date	2014.07.12.18.50.25;	author tedu;	state Exp;
branches;
next	1.3;
commitid	iN7nvia2fLP712wt;

1.3
date	2013.12.14.18.01.52;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.03.10.37.02;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.01.14.37.32;	author espie;	state Exp;
branches;
next	;


desc
@@


1.13
log
@If you use sys/param.h, you don't need sys/types.h
@
text
@/*	$OpenBSD: tmpfs_vfsops.c,v 1.12 2016/09/15 02:00:18 dlg Exp $	*/
/*	$NetBSD: tmpfs_vfsops.c,v 1.52 2011/09/27 01:10:43 christos Exp $	*/

/*
 * Copyright (c) 2005, 2006, 2007 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Julio M. Merino Vidal, developed as part of Google's Summer of Code
 * 2005 program.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Efficient memory file system.
 *
 * tmpfs is a file system that uses NetBSD's virtual memory sub-system
 * (the well-known UVM) to store file data and metadata in an efficient
 * way.  This means that it does not follow the structure of an on-disk
 * file system because it simply does not need to.  Instead, it uses
 * memory-specific data structures and algorithms to automatically
 * allocate and release resources.
 */

#include <sys/param.h>
#include <sys/mount.h>
#include <sys/stat.h>
#include <sys/systm.h>
#include <sys/vnode.h>
#include <sys/malloc.h>

#include <tmpfs/tmpfs.h>

/* MODULE(MODULE_CLASS_VFS, tmpfs, NULL); */

struct pool	tmpfs_dirent_pool;
struct pool	tmpfs_node_pool;

int	tmpfs_mount(struct mount *, const char *, void *, struct nameidata *,
	    struct proc *);
int	tmpfs_start(struct mount *, int, struct proc *);
int	tmpfs_unmount(struct mount *, int, struct proc *);
int	tmpfs_root(struct mount *, struct vnode **);
int	tmpfs_vget(struct mount *, ino_t, struct vnode **);
int	tmpfs_fhtovp(struct mount *, struct fid *, struct vnode **);
int	tmpfs_vptofh(struct vnode *, struct fid *);
int	tmpfs_statfs(struct mount *, struct statfs *, struct proc *);
int	tmpfs_sync(struct mount *, int, struct ucred *, struct proc *);
int	tmpfs_init(struct vfsconf *);

int
tmpfs_init(struct vfsconf *vfsp)
{

	pool_init(&tmpfs_dirent_pool, sizeof(tmpfs_dirent_t), 0, IPL_NONE,
	    PR_WAITOK, "tmpfs_dirent", NULL);
	pool_init(&tmpfs_node_pool, sizeof(tmpfs_node_t), 0, IPL_NONE,
	    PR_WAITOK, "tmpfs_node", NULL);

	return 0;
}

int
tmpfs_mount(struct mount *mp, const char *path, void *data,
    struct nameidata *ndp, struct proc *p)
{
	struct tmpfs_args args;
	tmpfs_mount_t *tmp;
	tmpfs_node_t *root;
	uint64_t memlimit;
	uint64_t nodes;
	int error;

#if 0
	/* Handle retrieval of mount point arguments. */
	if (mp->mnt_flag & MNT_GETARGS) {
		if (mp->mnt_data == NULL)
			return EIO;
		tmp = VFS_TO_TMPFS(mp);

		args->ta_version = TMPFS_ARGS_VERSION;
		args->ta_nodes_max = tmp->tm_nodes_max;
		args->ta_size_max = tmp->tm_mem_limit;

		root = tmp->tm_root;
		args->ta_root_uid = root->tn_uid;
		args->ta_root_gid = root->tn_gid;
		args->ta_root_mode = root->tn_mode;

		*data_len = sizeof(*args);
		return 0;
	}
#endif

	if (mp->mnt_flag & MNT_UPDATE) {
		/* TODO */
		return EOPNOTSUPP;
	}

	/* Prohibit mounts if there is not enough memory. */
	if (tmpfs_mem_info(1) < TMPFS_PAGES_RESERVED)
		return EINVAL;

	error = copyin(data, &args, sizeof(struct tmpfs_args));
	if (error)
		return error;
	if (args.ta_root_uid == VNOVAL || args.ta_root_gid == VNOVAL ||
	    args.ta_root_mode == VNOVAL)
		return EINVAL;

	/* Get the memory usage limit for this file-system. */
	if (args.ta_size_max < PAGE_SIZE) {
		memlimit = UINT64_MAX;
	} else {
		memlimit = args.ta_size_max;
	}
	KASSERT(memlimit > 0);

	if (args.ta_nodes_max <= 3) {
		nodes = 3 + (memlimit / 1024);
	} else {
		nodes = args.ta_nodes_max;
	}
	nodes = MIN(nodes, INT_MAX);
	KASSERT(nodes >= 3);

	/* Allocate the tmpfs mount structure and fill it. */
	tmp = malloc(sizeof(tmpfs_mount_t), M_MISCFSMNT, M_WAITOK);

	tmp->tm_nodes_max = (ino_t)nodes;
	tmp->tm_nodes_cnt = 0;
	tmp->tm_highest_inode = 1;
	LIST_INIT(&tmp->tm_nodes);

	rw_init(&tmp->tm_lock, "tmplk");
	tmpfs_mntmem_init(tmp, memlimit);

	/* Allocate the root node. */
	error = tmpfs_alloc_node(tmp, VDIR, args.ta_root_uid,
	    args.ta_root_gid, args.ta_root_mode & ALLPERMS, NULL,
	    VNOVAL, &root);
	KASSERT(error == 0 && root != NULL);

	/*
	 * Parent of the root inode is itself.  Also, root inode has no
	 * directory entry (i.e. is never attached), thus hold an extra
	 * reference (link) for it.
	 */
	root->tn_links++;
	root->tn_spec.tn_dir.tn_parent = root;
	tmp->tm_root = root;

	mp->mnt_data = tmp;
	mp->mnt_flag |= MNT_LOCAL;
	mp->mnt_stat.f_namemax = TMPFS_MAXNAMLEN;
#if 0
	mp->mnt_fs_bshift = PAGE_SHIFT;
	mp->mnt_dev_bshift = DEV_BSHIFT;
	mp->mnt_iflag |= IMNT_MPSAFE;
#endif
	vfs_getnewfsid(mp);

	mp->mnt_stat.mount_info.tmpfs_args = args;

	bzero(&mp->mnt_stat.f_mntonname, sizeof(mp->mnt_stat.f_mntonname));
	bzero(&mp->mnt_stat.f_mntfromname, sizeof(mp->mnt_stat.f_mntfromname));
	bzero(&mp->mnt_stat.f_mntfromspec, sizeof(mp->mnt_stat.f_mntfromspec));

	strlcpy(mp->mnt_stat.f_mntonname, path,
	    sizeof(mp->mnt_stat.f_mntonname) - 1);
	strlcpy(mp->mnt_stat.f_mntfromname, "tmpfs",
	    sizeof(mp->mnt_stat.f_mntfromname) - 1);
	strlcpy(mp->mnt_stat.f_mntfromspec, "tmpfs",
	    sizeof(mp->mnt_stat.f_mntfromspec) - 1);

	return error;
}

int
tmpfs_start(struct mount *mp, int flags, struct proc *p)
{

	return 0;
}

int
tmpfs_unmount(struct mount *mp, int mntflags, struct proc *p)
{
	tmpfs_mount_t *tmp = VFS_TO_TMPFS(mp);
	tmpfs_node_t *node, *cnode;
	int error, flags = 0;

	/* Handle forced unmounts. */
	if (mntflags & MNT_FORCE)
		flags |= FORCECLOSE;

	/* Finalize all pending I/O. */
	error = vflush(mp, NULL, flags);
	if (error != 0)
		return error;


	/*
	 * First round, detach and destroy all directory entries.
	 * Also, clear the pointers to the vnodes - they are gone.
	 */
	LIST_FOREACH(node, &tmp->tm_nodes, tn_entries) {
		tmpfs_dirent_t *de;

		node->tn_vnode = NULL;
		if (node->tn_type != VDIR) {
			continue;
		}
		while ((de = TAILQ_FIRST(&node->tn_spec.tn_dir.tn_dir)) != NULL) {
			cnode = de->td_node;
			if (cnode) {
				cnode->tn_vnode = NULL;
			}
			tmpfs_dir_detach(node, de);
			tmpfs_free_dirent(tmp, de);
		}
	}

	/* Second round, destroy all inodes. */
	while ((node = LIST_FIRST(&tmp->tm_nodes)) != NULL) {
		tmpfs_free_node(tmp, node);
	}

	/* Throw away the tmpfs_mount structure. */
	tmpfs_mntmem_destroy(tmp);
	/* mutex_destroy(&tmp->tm_lock); */
	/* kmem_free(tmp, sizeof(*tmp)); */
	free(tmp, M_MISCFSMNT, sizeof(tmpfs_mount_t));
	mp->mnt_data = NULL;

	return 0;
}

int
tmpfs_root(struct mount *mp, struct vnode **vpp)
{
	tmpfs_node_t *node = VFS_TO_TMPFS(mp)->tm_root;

	rw_enter_write(&node->tn_nlock);
	return tmpfs_vnode_get(mp, node, vpp);
}

int
tmpfs_vget(struct mount *mp, ino_t ino, struct vnode **vpp)
{

	printf("tmpfs_vget called; need for it unknown yet\n");
	return EOPNOTSUPP;
}

int
tmpfs_fhtovp(struct mount *mp, struct fid *fhp, struct vnode **vpp)
{
	tmpfs_mount_t *tmp = VFS_TO_TMPFS(mp);
	tmpfs_node_t *node;
	tmpfs_fid_t tfh;

	if (fhp->fid_len != sizeof(tmpfs_fid_t)) {
		return EINVAL;
	}
	memcpy(&tfh, fhp, sizeof(tmpfs_fid_t));

	rw_enter_write(&tmp->tm_lock);
	LIST_FOREACH(node, &tmp->tm_nodes, tn_entries) {
		if (node->tn_id != tfh.tf_id) {
			continue;
		}
		if (TMPFS_NODE_GEN(node) != tfh.tf_gen) {
			continue;
		}
		rw_enter_write(&node->tn_nlock);
		break;
	}
	rw_exit_write(&tmp->tm_lock);

	/* Will release the tn_nlock. */
	return node ? tmpfs_vnode_get(mp, node, vpp) : ESTALE;
}

int
tmpfs_vptofh(struct vnode *vp, struct fid *fhp)
{
	tmpfs_fid_t tfh;
	tmpfs_node_t *node;

	node = VP_TO_TMPFS_NODE(vp);

	memset(&tfh, 0, sizeof(tfh));
	tfh.tf_len = sizeof(tmpfs_fid_t);
	tfh.tf_gen = TMPFS_NODE_GEN(node);
	tfh.tf_id = node->tn_id;
	memcpy(fhp, &tfh, sizeof(tfh));

	return 0;
}

int
tmpfs_statfs(struct mount *mp, struct statfs *sbp, struct proc *p)
{
	tmpfs_mount_t *tmp;
	fsfilcnt_t freenodes;
	uint64_t avail;

	tmp = VFS_TO_TMPFS(mp);

	sbp->f_iosize = sbp->f_bsize = PAGE_SIZE;

	rw_enter_write(&tmp->tm_acc_lock);
	avail =  tmpfs_pages_avail(tmp);
	sbp->f_blocks = (tmpfs_bytes_max(tmp) >> PAGE_SHIFT);
	sbp->f_bfree = avail;
	sbp->f_bavail = avail & INT64_MAX; /* f_bavail is int64_t */

	freenodes = MIN(tmp->tm_nodes_max - tmp->tm_nodes_cnt,
	    avail * PAGE_SIZE / sizeof(tmpfs_node_t));

	sbp->f_files = tmp->tm_nodes_cnt + freenodes;
	sbp->f_ffree = freenodes;
	sbp->f_favail = freenodes & INT64_MAX; /* f_favail is int64_t */
	rw_exit_write(&tmp->tm_acc_lock);

	copy_statfs_info(sbp, mp);

	return 0;
}

int
tmpfs_sync(struct mount *mp, int waitfor, struct ucred *cred, struct proc *p)
{

	return 0;
}

/*
 * tmpfs vfs operations.
 */

struct vfsops tmpfs_vfsops = {
	tmpfs_mount,			/* vfs_mount */
	tmpfs_start,			/* vfs_start */
	tmpfs_unmount,			/* vfs_unmount */
	tmpfs_root,			/* vfs_root */
	(void *)eopnotsupp,		/* vfs_quotactl */
	tmpfs_statfs,			/* vfs_statfs */
	tmpfs_sync,			/* vfs_sync */
	tmpfs_vget,			/* vfs_vget */
	tmpfs_fhtovp,			/* vfs_fhtovp */
	tmpfs_vptofh,			/* vfs_vptofh */
	tmpfs_init,			/* vfs_init */
	(void *)eopnotsupp,		/* vfs_sysctl */
	(void *)eopnotsupp,
};
@


1.12
log
@all pools have their ipl set via pool_setipl, so fold it into pool_init.

the ioff argument to pool_init() is unused and has been for many
years, so this replaces it with an ipl argument. because the ipl
will be set on init we no longer need pool_setipl.

most of these changes have been done with coccinelle using the spatch
below. cocci sucks at formatting code though, so i fixed that by hand.

the manpage and subr_pool.c bits i did myself.

ok tedu@@ jmatthew@@

@@ipl@@
expression pp;
expression ipl;
expression s, a, o, f, m, p;
@@@@
-pool_init(pp, s, a, o, f, m, p);
-pool_setipl(pp, ipl);
+pool_init(pp, s, a, ipl, f, m, p);
@
text
@d1 1
a1 1
/*	$OpenBSD: tmpfs_vfsops.c,v 1.11 2016/08/23 04:28:18 dlg Exp $	*/
a45 1
#include <sys/types.h>
@


1.11
log
@pool_setipl for tmpfs.
@
text
@d1 1
a1 1
/*	$OpenBSD: tmpfs_vfsops.c,v 1.10 2016/07/22 13:11:01 kettenis Exp $	*/
d76 4
a79 6
	pool_init(&tmpfs_dirent_pool, sizeof(tmpfs_dirent_t), 0, 0, PR_WAITOK,
	    "tmpfs_dirent", NULL);
	pool_setipl(&tmpfs_dirent_pool, IPL_NONE);
	pool_init(&tmpfs_node_pool, sizeof(tmpfs_node_t), 0, 0, PR_WAITOK,
	    "tmpfs_node", NULL);
	pool_setipl(&tmpfs_node_pool, IPL_NONE);
@


1.10
log
@Set the vfs_systcl member of the vsfops struct to eopnotsupp.  While we check
for a null pointer now, all other filesystems fill in the complete table.

ok deraadt@@, tom@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tmpfs_vfsops.c,v 1.9 2016/07/11 22:36:25 tedu Exp $	*/
d78 1
d81 1
@


1.9
log
@don't allow mounting with noval owner. panics later.
reported by Tim Newsham at NCC.
ok millert natano
@
text
@d1 1
a1 1
/*	$OpenBSD: tmpfs_vfsops.c,v 1.8 2016/01/13 13:01:40 gsoares Exp $	*/
d376 1
a376 1
	NULL,				/* vfs_sysctl */
@


1.8
log
@kill malloc(9) pointless check, malloc(9) call is using M_WAITOK flag and thus will sleep until
get memory available so shouln't fail.

OK deraadt@@ mmcc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tmpfs_vfsops.c,v 1.7 2015/01/21 22:26:52 deraadt Exp $	*/
d128 3
@


1.7
log
@remove #if 0 cdefs.h blocks
@
text
@d1 1
a1 1
/*	$OpenBSD: tmpfs_vfsops.c,v 1.6 2014/12/23 01:53:57 tedu Exp $	*/
a146 2
	if (tmp == NULL)
		return ENOMEM;
@


1.6
log
@change pool allocator to null and pass waitok to indicate nointr
@
text
@d1 1
a1 1
/*	$OpenBSD: tmpfs_vfsops.c,v 1.5 2014/11/02 03:47:28 tedu Exp $	*/
a43 5

#if 0
#include <sys/cdefs.h>
__KERNEL_RCSID(0, "$NetBSD: tmpfs_vfsops.c,v 1.52 2011/09/27 01:10:43 christos Exp $");
#endif
@


1.5
log
@tmpfs free sizes
@
text
@d1 1
a1 1
/*	$OpenBSD: tmpfs_vfsops.c,v 1.4 2014/07/12 18:50:25 tedu Exp $	*/
d81 4
a84 4
	pool_init(&tmpfs_dirent_pool, sizeof(tmpfs_dirent_t), 0, 0, 0,
	    "tmpfs_dirent", &pool_allocator_nointr);
	pool_init(&tmpfs_node_pool, sizeof(tmpfs_node_t), 0, 0, 0,
	    "tmpfs_node", &pool_allocator_nointr);
@


1.4
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: tmpfs_vfsops.c,v 1.3 2013/12/14 18:01:52 espie Exp $	*/
d258 1
a258 1
	free(tmp, M_MISCFSMNT, 0);
@


1.3
log
@bring in a few improvements from pedro, guenther, me...

thanks to krw@@ for the original cherry-picking, millert@@ for useful comment.

so:
- no longer expose internal kernel addresses, uses seq numbers instead
- make sure the numbers don't overflow (millert@@ UINT64_MAX)... a
conservative estimate is that tmpfs will run out of seqs in >600 years...
- don't malloc dents, put them on the stack and zero them
- gc whiteout code
- gc getpage/putpage code (shrink uvm instead)

okay krw@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tmpfs_vfsops.c,v 1.2 2013/06/03 10:37:02 espie Exp $	*/
d258 1
a258 1
	free(tmp, M_MISCFSMNT);
@


1.2
log
@sprinkle $OpenBSD$, pointed out by pedro
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a96 1
	size_t len;
d157 1
d188 12
a199 4
	copystr(path, mp->mnt_stat.f_mntonname, MNAMELEN - 1, &len);
	bzero(mp->mnt_stat.f_mntonname + len, MNAMELEN - len);
	len = strlcpy(mp->mnt_stat.f_mntfromname, "tmpfs", MNAMELEN - 1);
	bzero(mp->mnt_stat.f_mntfromname + len, MNAMELEN - len);
d214 2
a215 2
	tmpfs_mount_t *tmp;
	tmpfs_node_t *node;
a226 1
	tmp = VFS_TO_TMPFS(mp);
d228 6
a233 4
	/* Destroy any existing inodes. */
	while ((node = LIST_FIRST(&tmp->tm_nodes)) != NULL) {
		if (node->tn_type == VDIR) {
			tmpfs_dirent_t *de;
d235 8
a242 9
			/* Destroy any directory entries. */
			de = TAILQ_FIRST(&node->tn_spec.tn_dir.tn_dir);
			while (de != NULL) {
				tmpfs_dirent_t *nde;

				nde = TAILQ_NEXT(de, td_entries);
				tmpfs_free_dirent(tmp, de);
				node->tn_size -= sizeof(tmpfs_dirent_t);
				de = nde;
d244 2
d247 4
a250 1
		/* Removes inode from the list. */
d257 1
@


1.1
log
@import tmpfs code, originally from netbsd.
heavy lifting by Pedro Martelletto, timestamp fixes by me.

THIS IS NOT ENABLED YET, AND REQUIRES UVM CHANGES AND REVIEW.
Imported, so that working on it can be mostly done in tree with less painful
diff exchanges, and that we have history of further changes.

okay tedu@@, deraadt@@
@
text
@d1 1
@

