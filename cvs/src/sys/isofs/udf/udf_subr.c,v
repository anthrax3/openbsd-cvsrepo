head	1.25;
access;
symbols
	OPENBSD_6_2:1.25.0.10
	OPENBSD_6_2_BASE:1.25
	OPENBSD_6_1:1.25.0.12
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.8
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.25.0.4
	OPENBSD_5_9_BASE:1.25
	OPENBSD_5_8:1.25.0.6
	OPENBSD_5_8_BASE:1.25
	OPENBSD_5_7:1.25.0.2
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.22.0.16
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.14
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.10
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.22.0.8
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.6
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.4
	OPENBSD_5_0:1.22.0.2
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.20.0.8
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.6
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.4
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.18.0.4
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.13.0.4
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4;
locks; strict;
comment	@ * @;


1.25
date	2014.12.16.18.30.03;	author tedu;	state Exp;
branches;
next	1.24;
commitid	P6Av4XGqOi3rFasL;

1.24
date	2014.11.18.10.42.15;	author dlg;	state Exp;
branches;
next	1.23;
commitid	4DOHz2gKfCx7RejS;

1.23
date	2014.11.03.21.28.35;	author tedu;	state Exp;
branches;
next	1.22;
commitid	EkuwmBeHv2Tqmdnx;

1.22
date	2011.04.16.03.21.16;	author krw;	state Exp;
branches;
next	1.21;

1.21
date	2011.04.15.14.57.29;	author krw;	state Exp;
branches;
next	1.20;

1.20
date	2009.05.21.23.45.48;	author krw;	state Exp;
branches;
next	1.19;

1.19
date	2009.05.14.10.49.00;	author krw;	state Exp;
branches;
next	1.18;

1.18
date	2008.07.23.16.24.43;	author beck;	state Exp;
branches;
next	1.17;

1.17
date	2008.06.12.06.58.39;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2008.06.11.12.35.46;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2008.06.10.20.50.23;	author beck;	state Exp;
branches;
next	1.14;

1.14
date	2008.06.10.20.14.36;	author beck;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.08.05.35.32;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.05.00.38.22;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.07.11.22.02.08;	author pedro;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.11.16.24.09;	author pedro;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.09.04.14.25;	author pedro;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.08.23.29.20;	author pedro;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.08.23.11.59;	author pedro;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.08.20.53.31;	author pedro;	state Exp;
branches;
next	1.5;

1.5
date	2006.07.05.17.57.50;	author pedro;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.15.00.04.42;	author pedro;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.15.00.02.22;	author pedro;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.14.23.59.32;	author pedro;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.14.19.04.17;	author miod;	state Exp;
branches;
next	;


desc
@@


1.25
log
@primary change: move uvm_vnode out of vnode, keeping only a pointer.
objective: vnode.h doesn't include uvm_extern.h anymore.
followup changes: include uvm_extern.h or lock.h where necessary.
ok and help from deraadt
@
text
@/*	$OpenBSD: udf_subr.c,v 1.24 2014/11/18 10:42:15 dlg Exp $	*/

/*
 * Copyright (c) 2006, Miodrag Vallat
 * Copyright (c) 2006, Pedro Martelletto
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/mutex.h>
#include <sys/stat.h>
#include <sys/mount.h>
#include <sys/vnode.h>
#include <sys/lock.h>
#include <sys/dirent.h>
#include <sys/disklabel.h>

#include <crypto/siphash.h>

#include <isofs/udf/ecma167-udf.h>
#include <isofs/udf/udf.h>
#include <isofs/udf/udf_extern.h>

int udf_vat_read(struct umount *, uint32_t *);

/*
 * Convert a CS0 dstring to a 16-bit Unicode string.
 * Returns the length of the Unicode string, in unicode characters (not
 * bytes!), or -1 if an error arises.
 * Note that the transname destination buffer is expected to be large
 * enough to hold the result, and will not be terminated in any way.
 */
int
udf_rawnametounicode(u_int len, char *cs0string, unicode_t *transname)
{
	unicode_t *origname = transname;

	if (len-- == 0)
		return (-1);

	switch (*cs0string++) {
	case 8:		/* bytes string */
		while (len-- != 0)
			*transname++ = (unicode_t)*cs0string++;
		break;
	case 16:	/* 16 bit unicode string */
		if (len & 1)
			return (-1);
		len >>= 1;
		while (len-- != 0) {
			unicode_t tmpchar;

			tmpchar = (unicode_t)*cs0string++;
			tmpchar = (tmpchar << 8) | (unicode_t)*cs0string++;
			*transname++ = tmpchar;
		}
		break;
	default:
		return (-1);
	}

	return (transname - origname);
}

/*
 * Do a lazy probe on the underlying media to check if it's a UDF volume, in
 * which case we fake a disk label for it.
 */
int
udf_disklabelspoof(dev_t dev, void (*strat)(struct buf *),
    struct disklabel *lp)
{
	char vid[32];
	int i, bsize = 2048, error = EINVAL;
	uint32_t sector = 256, mvds_start, mvds_end;
	struct buf *bp;
	struct anchor_vdp avdp;
	struct pri_vol_desc *pvd;

	/*
	 * Get a buffer to work with.
	 */
	bp = geteblk(bsize);
	bp->b_dev = dev;

	/*
	 * Look for an Anchor Volume Descriptor at sector 256.
	 */
	bp->b_blkno = sector * btodb(bsize);
	bp->b_bcount = bsize;
	CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
	SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
	bp->b_resid = bp->b_blkno / lp->d_secpercyl;

	(*strat)(bp);
	if (biowait(bp))
		goto out;

	if (udf_checktag((struct desc_tag *)bp->b_data, TAGID_ANCHOR))
		goto out;

	bcopy(bp->b_data, &avdp, sizeof(avdp));
	mvds_start = letoh32(avdp.main_vds_ex.loc);
	mvds_end = mvds_start + (letoh32(avdp.main_vds_ex.len) - 1) / bsize;

	/*
	 * Then try to find a reference to a Primary Volume Descriptor.
	 */
	for (sector = mvds_start; sector < mvds_end; sector++) {
		bp->b_blkno = sector * btodb(bsize);
		bp->b_bcount = bsize;
		CLR(bp->b_flags, B_READ | B_WRITE | B_DONE);
		SET(bp->b_flags, B_BUSY | B_READ | B_RAW);
		bp->b_resid = bp->b_blkno / lp->d_secpercyl;

		(*strat)(bp);
		if (biowait(bp))
			goto out;

		pvd = (struct pri_vol_desc *)bp->b_data;
		if (!udf_checktag(&pvd->tag, TAGID_PRI_VOL))
			break;
	}

	/*
	 * If we couldn't find a reference, bail out.
	 */
	if (sector == mvds_end)
		goto out;

	/*
	 * Okay, it's a UDF volume. Spoof a disk label for it.
	 */
	if (udf_transname(pvd->vol_id, vid, sizeof(pvd->vol_id) - 1, NULL))
		strlcpy(lp->d_typename, vid, sizeof(lp->d_typename));

	for (i = 0; i < MAXPARTITIONS; i++) {
		DL_SETPSIZE(&lp->d_partitions[i], 0);
		DL_SETPOFFSET(&lp->d_partitions[i], 0);
	}

	/*
	 * Fake two partitions, 'a' and 'c'.
	 */
	DL_SETPSIZE(&lp->d_partitions[0], DL_GETDSIZE(lp));
	lp->d_partitions[0].p_fstype = FS_UDF;
	DL_SETPSIZE(&lp->d_partitions[RAW_PART], DL_GETDSIZE(lp));
	lp->d_partitions[RAW_PART].p_fstype = FS_UDF;
	lp->d_npartitions = MAXPARTITIONS;
	lp->d_version = 1;

	lp->d_bbsize = 8192;	/* Fake. */
	lp->d_sbsize = 64*1024;	/* Fake. */
	lp->d_magic = DISKMAGIC;
	lp->d_magic2 = DISKMAGIC;
	lp->d_checksum = dkcksum(lp);

	error = 0;
out:
	bp->b_flags |= B_INVAL;
	brelse(bp);

	return (error);
}

/* Get a vnode for the Virtual Allocation Table (VAT) */
int
udf_vat_get(struct umount *ump, uint32_t lb)
{
	struct vnode *vp;
	struct unode *up;
	int error;

	error = udf_vget(ump->um_mountp, lb - ump->um_start - 3, &vp);
	if (error)
		return (error);

	up = VTOU(vp);
	up->u_vatlen = (letoh64(up->u_fentry->inf_len) - 36) >> 2;

	ump->um_vat = malloc(sizeof(struct unode), M_UDFMOUNT, M_WAITOK);
       *ump->um_vat = *up;

	ump->um_flags &= ~UDF_MNT_FIND_VAT;
	ump->um_flags |=  UDF_MNT_USES_VAT;

	vput(vp);

	return (0);
}

/* Look up a sector in the VAT */
int
udf_vat_map(struct umount *ump, uint32_t *sector)
{
	/* If there's no VAT, then it's easy */
	if (!(ump->um_flags & UDF_MNT_USES_VAT)) {
		*sector += ump->um_start;
		return (0);
	}

	/* Sanity check the given sector */
	if (*sector >= ump->um_vat->u_vatlen)
		return (EINVAL);

	return (udf_vat_read(ump, sector));
}

/* Read from the VAT */
int
udf_vat_read(struct umount *ump, uint32_t *sector)
{
	struct buf *bp;
	uint8_t *data;
	int error, size;

	size = 4;

	/*
	 * Note that we rely on the buffer cache to keep frequently accessed
	 * buffers around to avoid reading them from the disk all the time.
	 */
	error = udf_readatoffset(ump->um_vat, &size, *sector << 2, &bp, &data);
	if (error) {
		if (bp != NULL)
			brelse(bp);

		return (error);
	}

	/* Make sure we read at least a whole entry */
	if (size < 4) {
		if (bp != NULL)
			brelse(bp);

		return (EINVAL);
	}

	/* Map the sector */
	*sector = letoh32(*(uint32_t *)data) + ump->um_start;

	brelse(bp);

	return (0);
}
@


1.24
log
@use siphash for key lookups in all the filesystem hashes.

ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.23 2014/11/03 21:28:35 tedu Exp $	*/
d38 1
@


1.23
log
@include sys/unistd.h where needed instead of indirect reliance. ok jsg
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.22 2011/04/16 03:21:16 krw Exp $	*/
d40 2
@


1.22
log
@Use 'CLR(<buf>->b_flags, B_READ | B_WRITE | B_DONE)' regardless of
what the previous IO was. Less chance of copy and paste errors.
Suggested by miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.21 2011/04/15 14:57:29 krw Exp $	*/
a38 1
#include <sys/unistd.h>
@


1.21
log
@In days of yore one could arbitrarily whack buffer flags. Those days
are past. Use CLR() and SET() to modify necessary flags while leaving
the flags used by the buffer cache in peace.

Should make bufcache code much less confused about the state of the
bufs used in reading/writing disklabels. Other such flag abuses no
doubt await a visit.

Errors in original diff found by miod@@.

ok beck@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.20 2009/05/21 23:45:48 krw Exp $	*/
d113 1
a113 1
	CLR(bp->b_flags, B_WRITE | B_DONE);
d134 1
a134 1
		CLR(bp->b_flags, B_WRITE | B_DONE);
@


1.20
log
@The only value that d_npartitions should have is MAXPARTITIONS.
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.19 2009/05/14 10:49:00 krw Exp $	*/
d113 2
a114 1
	bp->b_flags = B_BUSY | B_READ | B_RAW;
d134 2
a135 1
		bp->b_flags = B_BUSY | B_READ | B_RAW;
@


1.19
log
@Reset b_flags rather than just OR'ing in B_READ and B_RAW when
re-using a buf. Taken from the kern/subr_disk.c readdoslabel()
usage.

Avoids a loop in disksort() caused by trying to queue a buffer that is
already in cd->buf_queue. I can now 'disklabel cd0' with "Command
& Conquer 3: Kane's Wrath" in the drive and not hang the system.

Problem reported and fix tested by Jasper Valentij. Thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.18 2008/07/23 16:24:43 beck Exp $	*/
d169 1
a169 1
	lp->d_npartitions = RAW_PART + 1;
@


1.18
log
@
Correct cases of mishandling of pending reads and writes to prevent
them going negative - this consists of identifying a number of cases of
IO not going through the buffer cache and marking those buffers with
B_RAW - as well as fixing nfs_bio to show pending writes and reads through
the buffer cache via NFS

still has a problem with mishandling the counters I believe in the
async/sync fallback case where counters stay positive which will be
addressed seperately.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.17 2008/06/12 06:58:39 deraadt Exp $	*/
d113 1
a113 1
	bp->b_flags |= (B_READ | B_RAW);
d133 1
a133 1
		bp->b_flags |= (B_READ | B_RAW);
@


1.17
log
@Bring biomem diff back into the tree after the nfs_bio.c fix went in.
ok thib beck art
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.14 2008/06/10 20:14:36 beck Exp $	*/
d113 1
a113 1
	bp->b_flags |= B_READ;
d133 1
a133 1
		bp->b_flags |= B_READ;
@


1.16
log
@back out biomem diff since it is not right yet.  Doing very large
file copies to nfsv2 causes the system to eventually peg the console.
On the console ^T indicates that the load is increasing rapidly, ddb
indicates many calls to getbuf, there is some very slow nfs traffic
making none (or extremely slow) progress.  Eventually some machines
seize up entirely.
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.13 2007/06/08 05:35:32 deraadt Exp $	*/
d113 1
a113 1
	bp->b_flags = B_BUSY | B_READ;
d133 1
a133 1
		bp->b_flags = B_BUSY | B_READ;
@


1.15
log
@Fix buffer cache pending read statistics by ensuring we can identify
biowait() reads that do *not* come from the buffer cache - we use the
B_RAW flag to identify these at art's suggestion - since it makes sense
and the flag was not being used. this just flags all these buffers with
B_RAW - biodone already ignores returned buffers marked B_RAW.
ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.14 2008/06/10 20:14:36 beck Exp $	*/
d113 1
a113 1
	bp->b_flags |= (B_READ | B_RAW);
d133 1
a133 1
		bp->b_flags |= (B_READ | B_RAW);
@


1.14
log
@
Buffer cache revamp

1) remove multiple size queues, introduced as a stopgap.
2) decouple pages containing data from their mappings
3) only keep buffers mapped when they actually have to be mapped
  (right now, this is when buffers are B_BUSY)
4) New functions to make a buffer busy, and release the busy flag
   (buf_acquire and buf_release)
5) Move high/low water marks and statistics counters into a structure
6) Add a sysctl to retrieve buffer cache statistics

Tested in several variants and beat upon by bob and art for a year. run
accidentally on henning's nfs server for a few months...

ok deraadt@@, krw@@, art@@ - who promises to be around to deal with any fallout
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.13 2007/06/08 05:35:32 deraadt Exp $	*/
d113 1
a113 1
	bp->b_flags |= B_READ;
d133 1
a133 1
		bp->b_flags |= B_READ;
@


1.13
log
@all disklabels read from the kernel now always contain a total sector
size which is the REAL DISK SIZE.  always.  if a driver fails to set
this right, please fix it.  agreed with otto and krw
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.12 2007/06/05 00:38:22 deraadt Exp $	*/
d113 1
a113 1
	bp->b_flags = B_BUSY | B_READ;
d133 1
a133 1
		bp->b_flags = B_BUSY | B_READ;
@


1.12
log
@use six new macros to access & store the 48-bit disklabel fields related
to size.  tested on almost all machines, double checked by miod and krw
next comes the type handling surrounding these values
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.11 2006/07/11 22:02:08 pedro Exp $	*/
d170 1
@


1.11
log
@Don't hold up a vnode for the VAT when a unode is sufficient
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.10 2006/07/11 16:24:09 pedro Exp $	*/
d158 2
a159 2
		lp->d_partitions[i].p_size = 0;
		lp->d_partitions[i].p_offset = 0;
d165 1
a165 1
	lp->d_partitions[0].p_size = lp->d_secperunit;
d167 1
a167 1
	lp->d_partitions[RAW_PART].p_size = lp->d_secperunit;
@


1.10
log
@Make the mounting process pass a hint to the kernel of where to find the VAT
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.9 2006/07/09 04:14:25 pedro Exp $	*/
d33 1
d200 3
a202 1
	ump->um_vat = vp;
d222 1
a222 1
	if (*sector >= VTOU(ump->um_vat)->u_vatlen)
a231 1
	struct unode *up;
a235 1
	up = VTOU(ump->um_vat);
d242 1
a242 1
	error = udf_readatoffset(up, &size, *sector << 2, &bp, &data);
@


1.9
log
@udf_mnt -> umount and rename fields accordingly
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.8 2006/07/08 23:29:20 pedro Exp $	*/
d186 1
a186 1
udf_vat_get(struct umount *ump)
d192 1
a192 1
	error = udf_vget(ump->um_mountp, ump->um_len - 3, &vp);
@


1.8
log
@Be consistent about how we name 'struct unode' instances
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.7 2006/07/08 23:11:59 pedro Exp $	*/
d45 1
a45 1
int udf_vat_read(struct udf_mnt *, uint32_t *);
d186 1
a186 1
udf_vat_get(struct udf_mnt *ump)
d192 1
a192 1
	error = udf_vget(ump->im_mountp, ump->part_len - 3, &vp);
d199 3
a201 3
	ump->im_vat = vp;
	ump->im_flags &= ~UDF_MNT_FIND_VAT;
	ump->im_flags |=  UDF_MNT_USES_VAT;
d210 1
a210 1
udf_vat_map(struct udf_mnt *ump, uint32_t *sector)
d213 2
a214 2
	if (!(ump->im_flags & UDF_MNT_USES_VAT)) {
		*sector += ump->part_start;
d219 1
a219 1
	if (*sector >= VTOU(ump->im_vat)->u_vatlen)
d227 1
a227 1
udf_vat_read(struct udf_mnt *ump, uint32_t *sector)
d234 1
a234 1
	up = VTOU(ump->im_vat);
d258 1
a258 1
	*sector = letoh32(*(uint32_t *)data) + ump->part_start;
@


1.7
log
@udf_node -> unode and rename fields accordingly
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.6 2006/07/08 20:53:31 pedro Exp $	*/
d189 1
a189 1
	struct unode *unp;
d196 2
a197 2
	unp = VTOU(vp);
	unp->u_vatlen = (letoh64(unp->u_fentry->inf_len) - 36) >> 2;
d229 1
a229 1
	struct unode *unp;
d234 1
a234 1
	unp = VTOU(ump->im_vat);
d241 1
a241 1
	error = udf_readatoffset(unp, &size, *sector << 2, &bp, &data);
@


1.6
log
@Rename VTON() to VTOU()
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.5 2006/07/05 17:57:50 pedro Exp $	*/
d189 1
a189 1
	struct udf_node *unp;
d197 1
a197 1
	unp->vatlen = (letoh64(unp->fentry->inf_len) - 36) >> 2;
d219 1
a219 1
	if (*sector >= VTOU(ump->im_vat)->vatlen)
d229 1
a229 1
	struct udf_node *unp;
@


1.5
log
@Add VAT support a la UDF 1.50
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.4 2006/01/15 00:04:42 pedro Exp $	*/
d196 1
a196 1
	unp = VTON(vp);
d219 1
a219 1
	if (*sector >= VTON(ump->im_vat)->vatlen)
d234 1
a234 1
	unp = VTON(ump->im_vat);
@


1.4
log
@Fix reading of volume ID
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.3 2006/01/15 00:02:22 pedro Exp $	*/
d45 2
d182 81
@


1.3
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.2 2006/01/14 23:59:32 pedro Exp $	*/
d151 1
a151 1
	if (udf_transname(pvd->vol_id, vid, sizeof(pvd->vol_id), NULL))
@


1.2
log
@Move udf_disklabelspoof() to udf_subr.c, no functional change
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_subr.c,v 1.1 2006/01/14 19:04:17 miod Exp $	*/
d149 1
a149 1
	 * Okay, it's an UDF volume. Spoof a disk label for it.
@


1.1
log
@Better UDF name extraction code, which will not forget to report errors in
some cases; also silence a few udf messages unless option DIAGNOSTIC.

Tests and tweaks and ok pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d5 1
d31 1
d39 1
d82 98
@

