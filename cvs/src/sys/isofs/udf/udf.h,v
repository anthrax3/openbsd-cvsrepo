head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.4
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.6
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.2
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.20.0.4
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.14.0.8
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.6
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.4
	OPENBSD_5_0:1.14.0.2
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.10
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.6
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.4
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.2
	OPENBSD_3_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.21
date	2016.06.19.11.54.33;	author natano;	state Exp;
branches;
next	1.20;
commitid	wHLNY5GFNXJSFYaC;

1.20
date	2014.11.18.10.42.15;	author dlg;	state Exp;
branches;
next	1.19;
commitid	4DOHz2gKfCx7RejS;

1.19
date	2013.09.17.04.31.56;	author mlarkin;	state Exp;
branches;
next	1.18;

1.18
date	2013.08.16.14.27.28;	author mlarkin;	state Exp;
branches;
next	1.17;

1.17
date	2013.05.30.17.35.01;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2013.03.23.17.12.57;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2013.03.23.16.01.27;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2011.07.04.04.30.41;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2009.08.14.22.23.45;	author krw;	state Exp;
branches;
next	1.12;

1.12
date	2007.12.09.20.54.01;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2006.07.12.14.26.44;	author pedro;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.11.22.02.08;	author pedro;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.09.04.23.09;	author pedro;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.09.04.14.25;	author pedro;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.08.23.11.59;	author pedro;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.08.20.53.31;	author pedro;	state Exp;
branches;
next	1.5;

1.5
date	2006.07.05.17.57.50;	author pedro;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.24.21.47.50;	author pedro;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.24.15.09.17;	author pedro;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.14.19.04.17;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.29.17.24.52;	author pedro;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Remove the lockmgr() API. It is only used by filesystems, where it is a
trivial change to use rrw locks instead. All it needs is LK_* defines
for the RW_* flags.

tested by naddy and sthen on package building infrastructure
input and ok jmc mpi tedu
@
text
@/*	$OpenBSD: udf.h,v 1.20 2014/11/18 10:42:15 dlg Exp $	*/

/*
 * Copyright (c) 2001, 2002 Scott Long <scottl@@freebsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: src/sys/fs/udf/udf.h,v 1.9 2004/10/29 10:40:58 phk Exp $
 */

/*
 * Ported to OpenBSD by Pedro Martelletto in February 2005.
 */

#define UDF_HASHTBLSIZE 100

typedef uint32_t udfino_t;

struct unode {
	LIST_ENTRY(unode) u_le;
	struct vnode *u_vnode;
	struct vnode *u_devvp;
	struct umount *u_ump;
	struct rrwlock u_lock;
	dev_t u_dev;
	udfino_t u_ino;
	union {
		long u_diroff;
		long u_vatlen;
	} un_u;
	struct extfile_entry *u_fentry;
};

#define	u_diroff	un_u.u_diroff
#define	u_vatlen	un_u.u_vatlen

struct umount {
	int um_flags;
	struct mount *um_mountp;
	struct vnode *um_devvp;
	dev_t um_dev;
	int um_bsize;
	int um_bshift;
	int um_bmask;
	uint32_t um_start;
	uint32_t um_realstart;
	uint32_t um_len;
	uint32_t um_reallen;
	uint32_t um_meta_start;
	uint32_t um_meta_len;
	struct unode *um_vat;
	struct long_ad um_root_icb;
	LIST_HEAD(udf_hash_lh, unode) *um_hashtbl;
	SIPHASH_KEY um_hashkey;
	u_long um_hashsz;
	struct mutex um_hashmtx;
	int um_psecs;
	int um_stbl_len;
	struct udf_sparing_table *um_stbl;
};

#define	UDF_MNT_FIND_VAT	0x01	/* Indicates a VAT must be found */
#define	UDF_MNT_USES_VAT	0x02	/* Indicates a VAT must be used */
#define	UDF_MNT_USES_META	0x04	/* Indicates we are using a Metadata partition*/

#define	VTOU(vp)	((struct unode *)((vp)->v_data))

#ifdef _KERNEL

struct udf_dirstream {
	struct unode	*node;
	struct umount	*ump;
	struct buf	*bp;
	uint8_t		*data;
	uint8_t		*buf;
	int		fsize;
	int		off;
	int		this_off;
	int		offset;
	int		size;
	int		error;
	int		fid_fragment;
};

#define	VFSTOUDFFS(mp)	((struct umount *)((mp)->mnt_data))

/*
 * The block layer refers to things in terms of 512 byte blocks by default.
 * btodb() is expensive, so speed things up.
 * Can the block layer be forced to use a different block size?
 */
#define	RDSECTOR(devvp, sector, size, bp) \
	bread(devvp, \
		((daddr_t)(sector) << ump->um_bshift) / DEV_BSIZE, size, bp)

static __inline int
udf_readlblks(struct umount *ump, int sector, int size, struct buf **bp)
{
	return (RDSECTOR(ump->um_devvp, sector,
			 (size + ump->um_bmask) & ~ump->um_bmask, bp));
}

/*
 * Produce a suitable file number from an ICB.  The passed in ICB is expected
 * to be in little endian (meaning that it hasn't been swapped for big
 * endian machines yet).
 * If the fileno resolves to 0, we might be in big trouble.
 * Assumes the ICB is a long_ad.  This struct is compatible with short_ad,
 *     but not ext_ad.
 */
static __inline udfino_t
udf_getid(struct long_ad *icb)
{
	return (letoh32(icb->loc.lb_num));
}

int udf_allocv(struct mount *, struct vnode **, struct proc *);
int udf_hashlookup(struct umount *, udfino_t, int, struct vnode **);
int udf_hashins(struct unode *);
int udf_hashrem(struct unode *);
int udf_checktag(struct desc_tag *, uint16_t);

typedef	uint16_t unicode_t;

#endif /* _KERNEL */

@


1.20
log
@use siphash for key lookups in all the filesystem hashes.

ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.19 2013/09/17 04:31:56 mlarkin Exp $	*/
d44 1
a44 1
	struct lock u_lock;
@


1.19
log
@

KNF - extraneous blank line snuck in during last commit
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.18 2013/08/16 14:27:28 mlarkin Exp $	*/
d74 1
@


1.18
log
@

int overflow in sector calculation, broke UDF reads past 2GB. Diff promotes
sector to daddr_t before calculation to avoid overflow.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.17 2013/05/30 17:35:01 guenther Exp $	*/
a113 1

@


1.17
log
@CD filesystems don't do inode numbers >2^32, so use a smaller type internally,
only using ino_t in the VFS layer APIs: vget, readdir, getattr.

ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.16 2013/03/23 17:12:57 deraadt Exp $	*/
d112 2
a113 1
	bread(devvp, ((sector) << ump->um_bshift) / DEV_BSIZE, size, bp)
@


1.16
log
@A small sprinking of #ifdef _KERNEL
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.15 2013/03/23 16:01:27 deraadt Exp $	*/
d37 2
d46 1
a46 1
	ino_t u_ino;
d130 1
a130 1
static __inline ino_t
d137 1
a137 1
int udf_hashlookup(struct umount *, ino_t, int, struct vnode **);
@


1.15
log
@convert a DEV_BSHIFT use to DEV_BSIZE (this .h file is reused in
in userland by libkvm)
ok sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.14 2011/07/04 04:30:41 tedu Exp $	*/
d83 4
a102 1
#define	VTOU(vp)	((struct unode *)((vp)->v_data))
d112 1
d141 3
@


1.14
log
@bread does nothing with its ucred argument.  remove it.  ok matthew
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.13 2009/08/14 22:23:45 krw Exp $	*/
d107 1
a107 1
	bread(devvp, sector << (ump->um_bshift - DEV_BSHIFT), size, bp)
@


1.13
log
@First cut at UDF 2.[56] support, allowing read-only access to HDDVD
and Blu-ray disks. Previously working DVDs should still work.

Done at f2k9 with phessler@@. Vnode bug squashing by beck@@. Thanks
to Bryan Brake for sending HDDVD/Blu-ray hardware and disks to f2k9
in Stockholm.

ok beck@@ dlg@@ phessler@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.12 2007/12/09 20:54:01 jmc Exp $	*/
d107 1
a107 1
	bread(devvp, sector << (ump->um_bshift - DEV_BSHIFT), size, NOCRED, bp)
@


1.12
log
@update pedro's email address, at his request;
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.11 2006/07/12 14:26:44 pedro Exp $	*/
d49 1
a49 1
	struct file_entry *u_fentry;
d64 1
d66 3
d81 1
@


1.11
log
@Remove unused function
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.10 2006/07/11 22:02:08 pedro Exp $	*/
d32 1
a32 1
 * Ported to OpenBSD by Pedro Martelletto <pedro@@openbsd.org> in February 2005.
@


1.10
log
@Don't hold up a vnode for the VAT when a unode is sufficient
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.9 2006/07/09 04:23:09 pedro Exp $	*/
a108 15
}

static __inline int
udf_readalblks(struct umount *ump, int lsector, int size, struct buf **bp)
{
	daddr_t rablock, lblk;
	int rasize;

	lblk = (lsector + ump->um_start) << (ump->um_bshift - DEV_BSHIFT);
	rablock = (lblk + 1) << ump->um_bshift;
	rasize = size;

	return (breadn(ump->um_devvp, lblk,
		       (size + ump->um_bmask) & ~ump->um_bmask,
		       &rablock, &rasize, 1,  NOCRED, bp));
@


1.9
log
@Be consistent about how we name 'struct umount' instances
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.8 2006/07/09 04:14:25 pedro Exp $	*/
d65 1
a65 1
	struct vnode *um_vat;
@


1.8
log
@udf_mnt -> umount and rename fields accordingly
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.7 2006/07/08 23:11:59 pedro Exp $	*/
d80 1
a80 1
	struct umount	*udfmp;
d102 1
a102 1
    bread(devvp, sector << (udfmp->um_bshift - DEV_BSHIFT), size, NOCRED, bp)
d105 1
a105 1
udf_readlblks(struct umount *udfmp, int sector, int size, struct buf **bp)
d107 2
a108 2
	return (RDSECTOR(udfmp->um_devvp, sector,
			 (size + udfmp->um_bmask) & ~udfmp->um_bmask, bp));
d112 1
a112 1
udf_readalblks(struct umount *udfmp, int lsector, int size, struct buf **bp)
d117 2
a118 2
	lblk = (lsector + udfmp->um_start) << (udfmp->um_bshift - DEV_BSHIFT);
	rablock = (lblk + 1) << udfmp->um_bshift;
d121 2
a122 2
	return (breadn(udfmp->um_devvp, lblk,
		       (size + udfmp->um_bmask) & ~udfmp->um_bmask,
@


1.7
log
@udf_node -> unode and rename fields accordingly
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.6 2006/07/08 20:53:31 pedro Exp $	*/
d41 1
a41 1
	struct udf_mnt *u_ump;
d55 18
a72 19
struct udf_mnt {
	int			im_flags;
	struct mount		*im_mountp;
	struct vnode		*im_devvp;
	dev_t			im_dev;
	int			bsize;
	int			bshift;
	int			bmask;
	uint32_t		part_start;
	uint32_t		part_len;
	struct vnode		*im_vat;
	struct vnode		*root_vp;
	struct long_ad		root_icb;
	LIST_HEAD(udf_hash_lh, unode)	*hashtbl;
	u_long			hashsz;
	struct mutex		hash_mtx;
	int			p_sectors;
	int			s_table_entries;
	struct udf_sparing_table *s_table;
d80 1
a80 1
	struct udf_mnt	*udfmp;
d93 1
a93 1
#define	VFSTOUDFFS(mp)	((struct udf_mnt *)((mp)->mnt_data))
d102 1
a102 1
	bread(devvp, sector << (udfmp->bshift - DEV_BSHIFT), size, NOCRED, bp)
d105 1
a105 1
udf_readlblks(struct udf_mnt *udfmp, int sector, int size, struct buf **bp)
d107 2
a108 2
	return (RDSECTOR(udfmp->im_devvp, sector,
			 (size + udfmp->bmask) & ~udfmp->bmask, bp));
d112 1
a112 1
udf_readalblks(struct udf_mnt *udfmp, int lsector, int size, struct buf **bp)
d117 2
a118 2
	lblk = (lsector + udfmp->part_start) << (udfmp->bshift - DEV_BSHIFT);
	rablock = (lblk + 1) << udfmp->bshift;
d121 2
a122 2
	return (breadn(udfmp->im_devvp, lblk,
		       (size + udfmp->bmask) & ~udfmp->bmask,
d141 1
a141 1
int udf_hashlookup(struct udf_mnt *, ino_t, int, struct vnode **);
@


1.6
log
@Rename VTON() to VTOU()
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.5 2006/07/05 17:57:50 pedro Exp $	*/
d37 8
a44 8
struct udf_node {
	LIST_ENTRY(udf_node)	le;
	struct vnode	*i_vnode;
	struct vnode	*i_devvp;
	struct udf_mnt	*udfmp;
	struct lock	i_lock;
	dev_t		i_dev;
	ino_t		hash_id;
d46 2
a47 2
		long diroff;
		long vatlen;
d49 1
a49 1
	struct file_entry *fentry;
d52 2
a53 2
#define	diroff	un_u.diroff
#define	vatlen	un_u.vatlen
d68 1
a68 1
	LIST_HEAD(udf_hash_lh, udf_node)	*hashtbl;
d80 1
a80 1
	struct udf_node	*node;
d95 1
a95 1
#define	VTOU(vp)	((struct udf_node *)((vp)->v_data))
d143 2
a144 2
int udf_hashins(struct udf_node *);
int udf_hashrem(struct udf_node *);
@


1.5
log
@Add VAT support a la UDF 1.50
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.4 2006/06/24 21:47:50 pedro Exp $	*/
d95 1
a95 1
#define	VTON(vp)	((struct udf_node *)((vp)->v_data))
@


1.4
log
@Shave 8 bytes off struct udf_mnt
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.3 2006/06/24 15:09:17 pedro Exp $	*/
d45 4
a48 1
	long		diroff;
d52 3
d65 1
d75 3
@


1.3
log
@rearrange some comments
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.2 2006/01/14 19:04:17 miod Exp $	*/
a58 1
	uint64_t		root_id;
@


1.2
log
@Better UDF name extraction code, which will not forget to report errors in
some cases; also silence a few udf messages unless option DIAGNOSTIC.

Tests and tweaks and ok pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udf.h,v 1.1 2005/03/29 17:24:52 pedro Exp $	*/
d91 1
a91 1
 * XXX Can the block layer be forced to use a different block size?
d122 2
a123 2
 * XXX If the fileno resolves to 0, we might be in big trouble.
 * XXX Assumes the ICB is a long_ad.  This struct is compatible with short_ad,
@


1.1
log
@Bring in UDF support from FreeBSD, disabled for now.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d137 2
@

