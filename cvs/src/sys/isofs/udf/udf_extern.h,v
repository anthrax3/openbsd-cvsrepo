head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.16
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.14
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.10
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.12
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.8
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.8.0.12
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2013.06.02.15.35.18;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.23.17.12.57;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2010.12.21.20.14.43;	author thib;	state Exp;
branches;
next	1.10;

1.10
date	2010.09.10.16.34.08;	author thib;	state Exp;
branches;
next	1.9;

1.9
date	2010.09.06.23.44.10;	author thib;	state Exp;
branches;
next	1.8;

1.8
date	2007.12.09.20.54.01;	author jmc;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.11.16.24.09;	author pedro;	state Exp;
branches;
next	1.6;

1.6
date	2006.07.09.04.14.25;	author pedro;	state Exp;
branches;
next	1.5;

1.5
date	2006.07.08.23.11.59;	author pedro;	state Exp;
branches;
next	1.4;

1.4
date	2006.07.05.17.57.50;	author pedro;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.14.19.04.17;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.30.00.37.13;	author pedro;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.29.17.24.52;	author pedro;	state Exp;
branches;
next	;


desc
@@


1.13
log
@repair and activate pathconf support
ok guenther
@
text
@/*	$OpenBSD: udf_extern.h,v 1.12 2013/03/23 17:12:57 deraadt Exp $	*/

/*
 * Written by Pedro Martelletto <pedro@@ambientworks.net> in February 2005.
 * Public domain.
 */

#ifdef _KERNEL

/*
 * udf_subr.c
 */
int udf_rawnametounicode(u_int len, char *, unicode_t *);
int udf_vat_get(struct umount *, uint32_t);
int udf_vat_map(struct umount *, uint32_t *);

/*
 * udf_vfsops.c
 */
int udf_init(struct vfsconf *);
int udf_mount(struct mount *, const char *, void *, struct nameidata *,
    struct proc *);
int udf_unmount(struct mount *, int, struct proc *);
int udf_start(struct mount *, int, struct proc *);
int udf_root(struct mount *, struct vnode **);
int udf_quotactl(struct mount *, int, uid_t, caddr_t, struct proc *);
int udf_statfs(struct mount *, struct statfs *, struct proc *);
int udf_vget(struct mount *, ino_t, struct vnode **);
int udf_sync(struct mount *, int, struct ucred *, struct proc *);
int udf_sysctl(int *, u_int, void *, size_t *, void *, size_t, struct proc *);
int udf_checkexp(struct mount *, struct mbuf *, int *, struct ucred **);
int udf_fhtovp(struct mount *, struct fid *, struct vnode **);
int udf_vptofh(struct vnode *, struct fid *);

/*
 * udf_vnops.c
 */
int udf_access(void *v);
int udf_getattr(void *v);
int udf_open(void *v);
int udf_close(void *v);
int udf_ioctl(void *v);
int udf_read(void *v);
int udf_readdir(void *v);
int udf_readlink(void *v);
int udf_strategy(void *v);
int udf_bmap(void *v);
int udf_lookup(void *v);
int udf_inactive(void *v);
int udf_reclaim(void *v);
int udf_lock(void *v);
int udf_unlock(void *v);
int udf_pathconf(void *);
int udf_islocked(void *v);
int udf_print(void *v);
int udf_transname(char *, char *, int, struct umount *);
int udf_readatoffset(struct unode *, int *, off_t, struct buf **,
    uint8_t **);

/*
 * Memory pools.
 */
extern struct pool udf_trans_pool;
extern struct pool unode_pool;
extern struct pool udf_ds_pool;

/* Set of UDF vnode operations.*/
extern struct vops udf_vops;

#endif /* _KERNEL */
@


1.12
log
@A small sprinking of #ifdef _KERNEL
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_extern.h,v 1.11 2010/12/21 20:14:43 thib Exp $	*/
d53 1
@


1.11
log
@Bring back the "End the VOP experiment." diff, naddy's issues where
unrelated, and his alpha is much happier now.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_extern.h,v 1.10 2010/09/10 16:34:08 thib Exp $	*/
d8 2
d68 2
@


1.10
log
@Backout the VOP diff until the issues naddy was seeing on alpha (gcc3)
have been resolved.
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_extern.h,v 1.9 2010/09/06 23:44:10 thib Exp $	*/
d64 2
a65 4
/*
 * Set of UDF vnode operations.
 */
extern int (**udf_vnodeop_p)(void *);
@


1.9
log
@End the VOP experiment. Instead of the ridicolusly complicated operation
vector setup that has questionable features (that have, as far as I can
tell never been used in practice, atleast not in OpenBSD), remove all
the gunk and favor a simple struct full of function pointers that get
set directly by each of the filesystems.

Removes gobs of ugly code and makes things simpler by a magnitude.

The only downside of this is that we loose the vnoperate feature so
the spec/fifo operations of the filesystems need to be kept in sync
with specfs and fifofs, this is no big deal as the API it self is pretty
static.

Many thanks to armani@@ who pulled an earlier version of this diff to
current after c2k10 and Gabriel Kihlman on tech@@ for testing.

Liked by many. "come on, find your balls" deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_extern.h,v 1.8 2007/12/09 20:54:01 jmc Exp $	*/
d64 4
a67 2
/* Set of UDF vnode operations.*/
extern struct vops udf_vops;
@


1.8
log
@update pedro's email address, at his request;
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_extern.h,v 1.7 2006/07/11 16:24:09 pedro Exp $	*/
d64 2
a65 4
/*
 * Set of UDF vnode operations.
 */
extern int (**udf_vnodeop_p)(void *);
@


1.7
log
@Make the mounting process pass a hint to the kernel of where to find the VAT
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_extern.h,v 1.6 2006/07/09 04:14:25 pedro Exp $	*/
d4 1
a4 1
 * Written by Pedro Martelletto <pedro@@openbsd.org> in February 2005.
@


1.6
log
@udf_mnt -> umount and rename fields accordingly
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_extern.h,v 1.5 2006/07/08 23:11:59 pedro Exp $	*/
d12 1
a12 1
int udf_vat_get(struct umount *);
@


1.5
log
@udf_node -> unode and rename fields accordingly
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_extern.h,v 1.4 2006/07/05 17:57:50 pedro Exp $	*/
d12 2
a13 2
int udf_vat_get(struct udf_mnt *);
int udf_vat_map(struct udf_mnt *, uint32_t *);
d53 1
a53 1
int udf_transname(char *, char *, int, struct udf_mnt *);
@


1.4
log
@Add VAT support a la UDF 1.50
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_extern.h,v 1.3 2006/01/14 19:04:17 miod Exp $	*/
d54 1
a54 1
int udf_readatoffset(struct udf_node *, int *, off_t, struct buf **,
d61 1
a61 1
extern struct pool udf_node_pool;
@


1.3
log
@Better UDF name extraction code, which will not forget to report errors in
some cases; also silence a few udf messages unless option DIAGNOSTIC.

Tests and tweaks and ok pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_extern.h,v 1.2 2005/03/30 00:37:13 pedro Exp $	*/
d12 2
d20 1
a20 1
		struct proc *);
d54 2
@


1.2
log
@Export udf_transname(), which will be needed
by disklabel spoofing code later on.
@
text
@d1 1
a1 1
/*	$OpenBSD: udf_extern.h,v 1.1 2005/03/29 17:24:52 pedro Exp $	*/
d7 5
@


1.1
log
@Bring in UDF support from FreeBSD, disabled for now.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
@

