head	1.5;
access;
symbols
	OPENBSD_6_1:1.4.0.8
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.1.0.16
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.14
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.12
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.10
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2017.09.12.08.23.42;	author mpi;	state dead;
branches;
next	1.4;
commitid	Kz6PiS7Kl8MPR4Dx;

1.4
date	2015.09.01.05.26.10;	author jsg;	state Exp;
branches;
next	1.3;
commitid	JdA1N1z6R9jQDUxO;

1.3
date	2013.10.19.21.02.50;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.15.19.23.24;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.09.23.04.49;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove option DDB_STRUCTINFO.  Now that ddb(4) is CTF aware, similar
functionnalities are available in GENERIC.

ok jasper@@, deraadt@@, guenther@@, dlg@@
@
text
@/*	$OpenBSD: db_struct.c,v 1.4 2015/09/01 05:26:10 jsg Exp $	*/

/*
 * Copyright (c) 2009 Miodrag Vallat.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * ddb routines to describe struct information
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <machine/db_machdep.h>

#include <ddb/db_lex.h>
#include <ddb/db_output.h>
#include <ddb/db_access.h>
#include <ddb/db_command.h>
#include <ddb/db_extern.h>
#include <ddb/db_interface.h>
#include <ddb/db_var.h>

#include "db_structinfo.h"

void	db_struct_print_field(uint, int, db_expr_t);

/*
 * Flags to pass db_struct_printf().
 */

#define	DBSP_STRUCT_NAME	0x01	/* prepend struct name */
#define	DBSP_VALUE		0x02	/* display field value */

void
db_struct_print_field(uint fidx, int flags, db_expr_t baseaddr)
{
	const struct ddb_field_info *field;
	const struct ddb_struct_info *struc;
	db_expr_t value;
	uint tmp;
	size_t namelen;
	int width, basecol, curcol;
	char tmpfmt[28];

	field = &ddb_field_info[fidx];
	basecol = 0;

	if (ISSET(flags, DBSP_STRUCT_NAME)) {
		struc = &ddb_struct_info[field->sidx];
		namelen = strlen(ddb_structfield_strings + struc->name);
		db_printf("%-30s ", ddb_structfield_strings + struc->name);
		if (namelen > 30)
			basecol += namelen + 1;
		else
			basecol += 30 + 1;
	}

	namelen = strlen(ddb_structfield_strings + field->name);
	if (field->nitems == 1) {
		db_printf("%-30s ", ddb_structfield_strings + field->name);
		if (namelen > 30)
			basecol += namelen + 1;
		else
			basecol += 30 + 1;
	} else {
		width = 30 - 2;
		tmp = field->nitems;
		while (tmp != 0) {
			width--;
			tmp /= 10;
		}
		if (namelen >= width) {
			db_printf("%s[%hu] ",
			    ddb_structfield_strings + field->name,
			    field->nitems);
			basecol += namelen + (30 - width) + 1;
		} else {
			db_printf("%s[%hu]%*s ",
			    ddb_structfield_strings + field->name,
			    field->nitems, width - (int)namelen, "");
			/* namelen + (30-width) + (width-namelen) + 1 */
			basecol += 30 + 1;
		}
	}

	if (field->size == 0) {
		db_printf("bitfield");
		/* basecol irrelevant from there on */
	} else {
		snprintf(tmpfmt, sizeof tmpfmt, "%u", (u_int)field->size);
		basecol += strlen(tmpfmt) + 1;
		db_printf("%s ", tmpfmt);
	}

	if (ISSET(flags, DBSP_VALUE)) {
		/* only print the field value if it has a friendly size. */
		switch (field->size) {
		case 1:
			width = 4;
			break;
		case 2:
			width = 8;
			break;
		case 4:
			width = 12;
			break;
#ifdef __LP64__
		case 8:
			width = 20;
			break;
#endif
		default:
			width = 0;
		}
		if (width != 0) {
			baseaddr += field->offs;
			curcol = basecol;
			for (tmp = field->nitems; tmp != 0; tmp--) {
				value = db_get_value(baseaddr, field->size,
				    FALSE); /* assume unsigned */
				db_format(tmpfmt, sizeof tmpfmt, (long)value,
				    DB_FORMAT_N, 0, width);
				if (field->nitems > 1)
					db_printf("%s", tmpfmt);
				else
					db_printf("%20s", tmpfmt);
				baseaddr += field->size;

				/*
				 * Try to fit array elements on as few lines
				 * as possible.
				 */
				if (field->nitems > 1 && tmp > 1) {
					curcol += width + 1;
					if (basecol >= db_max_width ||
					    curcol + width >= db_max_width) {
						/* new line */
						db_printf("\n");
						if (basecol + width >=
						    db_max_width) {
							db_printf("\t");
							curcol = 8;
						} else {
							db_printf("%*s",
							    basecol, "");
							curcol = basecol;
						}
					} else
						db_printf(" ");
				}
			}
		}
	}

	db_printf("\n");
}


/*
 * show offset <value>: displays the list of struct fields which exist
 * at that particular offset from the beginning of the struct.
 */
void
db_struct_offset_cmd(db_expr_t addr, int have_addr, db_expr_t count,
    char *modifiers)
{
	db_expr_t offset = 0;
	const struct ddb_field_offsets *field;
	const ddb_field_off *fidx;
	uint oidx;
	int width;
	char tmpfmt[28];

	/*
	 * Read the offset from the debuggger input.
	 * We don't want to get it from the standard parsing code, because
	 * this would set `dot' to this value, which doesn't make sense.
	 */

	if (!db_expression(&offset) || offset < 0) {
		db_printf("not a valid offset\n");
		db_flush_lex();
		return;
	}

	db_skip_to_eol();

	for (field = ddb_field_offsets, oidx = 0; oidx < NOFFS; field++, oidx++)
		if (field->offs == (size_t)offset)
			break;

	if (oidx == NOFFS) {
		width = 0;
		db_format(tmpfmt, sizeof tmpfmt, (long)offset,
		    DB_FORMAT_N, 0, width);
		db_printf("no known structure element at offset %-*s\n",
		    width, tmpfmt);
		db_flush_lex();
		return;
	}

	db_printf("%-30s %-30s size\n", "struct", "member");
	for (fidx = ddb_fields_by_offset + field->list; *fidx != 0; fidx++)
		db_struct_print_field(*fidx, DBSP_STRUCT_NAME, 0);
}

/*
 * show struct <struct name> [addr]: displays the data starting at addr
 * (`dot' if unspecified) as a struct of the given type.
 */
void
db_struct_layout_cmd(db_expr_t addr, int have_addr, db_expr_t count,
    char *modifiers)
{
	const struct ddb_struct_info *struc;
	uint sidx, fidx;
	int t;

	/*
	 * Read the struct name from the debugger input.
	 */

	t = db_read_token();
	if (t != tIDENT) {
		db_printf("Bad struct name\n");
		db_flush_lex();
		return;
	}

	for (struc = ddb_struct_info, sidx = 0; sidx < NSTRUCT;
	    struc++, sidx++)
		if (strcmp(ddb_structfield_strings + struc->name,
		    db_tok_string) == 0)
			break;

	if (sidx == NSTRUCT) {
		db_printf("unknown struct %s\n", db_tok_string);
		db_flush_lex();
		return;
	}

	/*
	 * Read the address, if any, from the debugger input.
	 * In that case, update `dot' value.
	 */

	if (db_expression(&addr)) {
		db_dot = (db_addr_t)addr;
		db_last_addr = db_dot;
	} else
		addr = (db_expr_t)db_dot;

	db_skip_to_eol();

	/*
	 * Display the structure contents.
	 */

	db_printf("struct %s at %p (%u bytes)\n",
	    ddb_structfield_strings + struc->name, (void *)addr,
	    (u_int)struc->size);
	for (fidx = struc->fmin; fidx <= struc->fmax; fidx++)
		db_struct_print_field(fidx, DBSP_VALUE, addr);
}
@


1.4
log
@initialise the width var in db_struct_offset_cmd()
ok miod@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_struct.c,v 1.3 2013/10/19 21:02:50 guenther Exp $	*/
@


1.3
log
@LP64 non-PMAP_DIRECT archs like sparc64 have a structure larger
than 65536 bytes, so make parse_structinfo.pl detect that and
switch to u_int for sizes and offsets when that happens.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_struct.c,v 1.2 2013/10/15 19:23:24 guenther Exp $	*/
d206 1
@


1.2
log
@Rewrite the awk script that generates the data for option DDB_STRUCT:
 - switch to perl for better data structures and (thus) speed
 - fix a couple glitches in the interpretation of the stabs output
 - compress the strings by putting them in one big array and overlaying
   suffixes
 - all sizes and offsets are <64k, so use u_short for them
This results in ~60% reduction in the resulting text size and it now
takes less than a second to create on fast platforms.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_struct.c,v 1.1 2009/08/09 23:04:49 miod Exp $	*/
d103 1
a103 1
		snprintf(tmpfmt, sizeof tmpfmt, "%hu", field->size);
d182 1
a182 1
	const u_short *fidx;
d271 3
a273 2
	db_printf("struct %s at %p (%hu bytes)\n",
	    ddb_structfield_strings + struc->name, (void *)addr, struc->size);
@


1.1
log
@Introduce option DDB_STRUCT. Kernels compiled with this option (except on
a few arches where toolchain limitations apply) will embed some symbolic
information about the various structs used within the kernel, and have
new ddb commands allowing struct display and some useful information
gathering. Kernel rodata increase varies accross platforms from ~150KB to
~300KB.
This option is not enabled by default.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 2
a64 2
		namelen = strlen(struc->name);
		db_printf("%-30s ", struc->name);
d71 1
a71 1
	namelen = strlen(field->name);
d73 1
a73 1
		db_printf("%-30s ", field->name);
d86 3
a88 1
			db_printf("%s[%zu] ", field->name, field->nitems);
d91 3
a93 2
			db_printf("%s[%zu]%*s ", field->name, field->nitems,
			    width - (int)namelen, "");
d103 1
a103 1
		snprintf(tmpfmt, sizeof tmpfmt, "%zu", field->size);
d182 1
a182 1
	const uint *fidx;
d215 1
a215 1
	for (fidx = field->list; *fidx != 0; fidx++)
d244 2
a245 1
		if (strcmp(struc->name, db_tok_string) == 0)
d271 2
a272 2
	db_printf("struct %s at %p (%zu bytes)\n", struc->name, (vaddr_t)addr,
	    struc->size);
@

