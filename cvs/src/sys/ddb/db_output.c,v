head	1.31;
access;
symbols
	OPENBSD_6_2_BASE:1.31
	OPENBSD_6_1:1.30.0.4
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.29.0.6
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.29.0.2
	OPENBSD_5_9_BASE:1.29
	OPENBSD_5_8:1.29.0.4
	OPENBSD_5_8_BASE:1.29
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.27.0.4
	OPENBSD_5_6_BASE:1.27
	OPENBSD_5_5:1.26.0.16
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.12
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.26.0.10
	OPENBSD_5_3_BASE:1.26
	OPENBSD_5_2:1.26.0.8
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.6
	OPENBSD_5_0:1.26.0.4
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.26.0.2
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.25.0.18
	OPENBSD_4_8_BASE:1.25
	OPENBSD_4_7:1.25.0.14
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.25.0.16
	OPENBSD_4_6_BASE:1.25
	OPENBSD_4_5:1.25.0.12
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.25.0.10
	OPENBSD_4_4_BASE:1.25
	OPENBSD_4_3:1.25.0.8
	OPENBSD_4_3_BASE:1.25
	OPENBSD_4_2:1.25.0.6
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.25.0.4
	OPENBSD_4_1_BASE:1.25
	OPENBSD_4_0:1.25.0.2
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.22.0.10
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.8
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.6
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.4
	OPENBSD_3_6_BASE:1.22
	SMP_SYNC_A:1.22
	SMP_SYNC_B:1.22
	OPENBSD_3_5:1.22.0.2
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.21.0.6
	OPENBSD_3_4_BASE:1.21
	UBC_SYNC_A:1.21
	OPENBSD_3_3:1.21.0.4
	OPENBSD_3_3_BASE:1.21
	OPENBSD_3_2:1.21.0.2
	OPENBSD_3_2_BASE:1.21
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	UBC_SYNC_B:1.21
	UBC:1.16.0.2
	UBC_BASE:1.16
	OPENBSD_3_0:1.15.0.2
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_9:1.14.0.16
	OPENBSD_2_8:1.14.0.14
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.14.0.12
	OPENBSD_2_7_BASE:1.14
	SMP:1.14.0.10
	SMP_BASE:1.14
	kame_19991208:1.14
	OPENBSD_2_6:1.14.0.8
	OPENBSD_2_6_BASE:1.14
	OPENBSD_2_5:1.14.0.6
	OPENBSD_2_5_BASE:1.14
	OPENBSD_2_4:1.14.0.4
	OPENBSD_2_4_BASE:1.14
	OPENBSD_2_3:1.14.0.2
	OPENBSD_2_3_BASE:1.14
	OPENBSD_2_2:1.13.0.2
	OPENBSD_2_2_BASE:1.13
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.8.0.2
	OPENBSD_2_0_BASE:1.8
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.31
date	2017.04.20.12.41.43;	author visa;	state Exp;
branches;
next	1.30;
commitid	Ok8Q9JWEGQTbpDky;

1.30
date	2016.09.03.21.43.46;	author jasper;	state Exp;
branches;
next	1.29;
commitid	HuB52OFiudMl5iby;

1.29
date	2015.03.14.03.38.46;	author jsg;	state Exp;
branches;
next	1.28;
commitid	p4LJxGKbi0BU2cG6;

1.28
date	2014.09.14.14.17.24;	author jsg;	state Exp;
branches;
next	1.27;
commitid	uzzBR7hz9ncd4O6G;

1.27
date	2014.07.08.13.02.57;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	E2I6e8QZgMmNFC95;

1.26
date	2010.09.08.04.28.29;	author marco;	state Exp;
branches;
next	1.25;

1.25
date	2006.07.06.18.14.14;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.13.06.23.20;	author jsg;	state Exp;
branches;
next	1.23;

1.23
date	2006.03.09.23.06.20;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2004.01.03.14.08.53;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2002.07.10.23.38.09;	author art;	state Exp;
branches;
next	1.20;

1.20
date	2002.07.01.21.56.55;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2002.05.18.18.22.46;	author art;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.14.16.12.33;	author art;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.14.01.26.51;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.06.19.53.18;	author miod;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2001.07.04.23.14.53;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	97.11.04.20.45.15;	author chuck;	state Exp;
branches
	1.14.10.1;
next	1.13;

1.13
date	97.07.19.22.31.19;	author niklas;	state Exp;
branches;
next	1.12;

1.12
date	97.07.07.19.45.23;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	97.07.03.21.24.13;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	97.05.29.03.00.21;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	97.03.21.00.44.18;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	96.08.04.01.27.46;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.07.24.21.58.03;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.07.23.23.54.27;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.04.21.22.19.05;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.03.11.11.16.15;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.02.20.13.35.39;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.05.02.15;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.27;	author deraadt;	state Exp;
branches;
next	;

1.14.10.1
date	2001.10.31.03.11.47;	author nate;	state Exp;
branches;
next	1.14.10.2;

1.14.10.2
date	2001.11.13.21.05.48;	author niklas;	state Exp;
branches;
next	1.14.10.3;

1.14.10.3
date	2002.03.28.11.43.03;	author niklas;	state Exp;
branches;
next	1.14.10.4;

1.14.10.4
date	2003.03.28.00.00.19;	author niklas;	state Exp;
branches;
next	1.14.10.5;

1.14.10.5
date	2004.02.19.10.56.12;	author niklas;	state Exp;
branches;
next	;

1.16.2.1
date	2002.06.11.03.28.48;	author art;	state Exp;
branches;
next	1.16.2.2;

1.16.2.2
date	2002.10.29.00.30.52;	author art;	state Exp;
branches;
next	;


desc
@@


1.31
log
@Add routines for saving stack traces and printing saved traces
on amd64 and i386.

With guenther@@
@
text
@/*	$OpenBSD: db_output.c,v 1.30 2016/09/03 21:43:46 jasper Exp $	*/
/*	$NetBSD: db_output.c,v 1.13 1996/04/01 17:27:14 christos Exp $	*/

/*
 * Mach Operating System
 * Copyright (c) 1993,1992,1991,1990 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 */

/*
 * Printf and character output for debugger.
 */
#include <sys/param.h>
#include <sys/stdarg.h>
#include <sys/systm.h>

#include <dev/cons.h>

#include <machine/db_machdep.h>

#include <ddb/db_command.h>
#include <ddb/db_output.h>
#include <ddb/db_access.h>
#include <ddb/db_interface.h>
#include <ddb/db_sym.h>
#include <ddb/db_var.h>

/*
 *	Character output - tracks position in line.
 *	To do this correctly, we should know how wide
 *	the output device is - then we could zero
 *	the line position when the output device wraps
 *	around to the start of the next line.
 *
 *	Instead, we count the number of spaces printed
 *	since the last printing character so that we
 *	don't print trailing spaces.  This avoids most
 *	of the wraparounds.
 */

#ifndef	DB_MAX_LINE
#define	DB_MAX_LINE		24	/* maximum line */
#define DB_MAX_WIDTH		80	/* maximum width */
#endif	/* DB_MAX_LINE */

#define DB_MIN_MAX_WIDTH	20	/* minimum max width */
#define DB_MIN_MAX_LINE		3	/* minimum max line */
#define CTRL(c)			((c) & 0xff)

int	db_output_position = 0;		/* output column */
int	db_output_line = 0;		/* output line number */
int	db_last_non_space = 0;		/* last non-space character */
int	db_tab_stop_width = 8;		/* how wide are tab stops? */
#define	NEXT_TAB(i) \
	((((i) + db_tab_stop_width) / db_tab_stop_width) * db_tab_stop_width)
int	db_max_line = DB_MAX_LINE;	/* output max lines */
int	db_max_width = DB_MAX_WIDTH;	/* output line width */
int	db_radix = 16;			/* output numbers radix */

static void db_more(void);

/*
 * Force pending whitespace.
 */
void
db_force_whitespace(void)
{
	int last_print, next_tab;

	last_print = db_last_non_space;
	while (last_print < db_output_position) {
	    next_tab = NEXT_TAB(last_print);
	    if (next_tab <= db_output_position) {
		while (last_print < next_tab) { /* DON'T send a tab!!! */
			cnputc(' ');
			last_print++;
		}
	    }
	    else {
		cnputc(' ');
		last_print++;
	    }
	}
	db_last_non_space = db_output_position;
}

static void
db_more(void)
{
	char *p;
	int quit_output = 0;

	for (p = "--db_more--"; *p; p++)
	    cnputc(*p);
	switch(cngetc()) {
	case ' ':
	    db_output_line = 0;
	    break;
	case 'q':
	case CTRL('c'):
	    db_output_line = 0;
	    quit_output = 1;
	    break;
	default:
	    db_output_line--;
	    break;
	}
	p = "\b\b\b\b\b\b\b\b\b\b\b           \b\b\b\b\b\b\b\b\b\b\b";
	while (*p)
	    cnputc(*p++);
	if (quit_output) {
	    db_error(0);
	    /* NOTREACHED */
	}
}

/*
 * Output character.  Buffer whitespace.
 */
void
db_putchar(int c)
{
	if (db_max_line >= DB_MIN_MAX_LINE && db_output_line >= db_max_line-1)
	    db_more();

	if (c > ' ' && c <= '~') {
	    /*
	     * Printing character.
	     * If we have spaces to print, print them first.
	     * Use tabs if possible.
	     */
	    db_force_whitespace();
	    cnputc(c);
	    db_output_position++;
	    if (db_max_width >= DB_MIN_MAX_WIDTH
		&& db_output_position >= db_max_width-1) {
		/* auto new line */
		cnputc('\n');
		db_output_position = 0;
		db_last_non_space = 0;
		db_output_line++;
	    }
	    db_last_non_space = db_output_position;
	}
	else if (c == '\n') {
	    /* Return */
	    cnputc(c);
	    db_output_position = 0;
	    db_last_non_space = 0;
	    db_output_line++;
	}
	else if (c == '\t') {
	    /* assume tabs every 8 positions */
	    db_output_position = NEXT_TAB(db_output_position);
	}
	else if (c == ' ') {
	    /* space */
	    db_output_position++;
	}
	else if (c == '\007') {
	    /* bell */
	    cnputc(c);
	}
	/* other characters are assumed non-printing */
}

/*
 * Return output position
 */
int
db_print_position(void)
{
	return (db_output_position);
}

/*
 * End line if too long.
 */
void
db_end_line(int space)
{
	if (db_output_position >= db_max_width - space)
	    db_printf("\n");
}

char *
db_format(char *buf, size_t bufsize, long val, int format, int alt, int width)
{
	const char *fmt;

	if (format == DB_FORMAT_Z || db_radix == 16)
		fmt = alt ? "-%#*lx" : "-%*lx";
	else if (db_radix == 8)
		fmt = alt ? "-%#*lo" : "-%*lo";
	else
		fmt = alt ? "-%#*lu" : "-%*lu";

	/* The leading '-' is a nasty (and beautiful) idea from NetBSD */
	if (val < 0 && format != DB_FORMAT_N)
		val = -val;
	else
		fmt++;

	snprintf(buf, bufsize, fmt, width, val);

	return (buf);
}

void
db_stack_dump(void)
{
	static volatile int intrace;

	if (intrace) {
		printf("Faulted in traceback, aborting...\n");
		return;
	}

	intrace = 1;
	printf("Starting stack trace...\n");
	db_stack_trace_print((db_expr_t)__builtin_frame_address(0), TRUE,
	    256 /* low limit */, "", printf);
	printf("End of stack trace.\n");
	intrace = 0;
}

void
db_print_stack_trace(struct db_stack_trace *st)
{
	unsigned int i;

	for (i = 0; i < st->st_count; i++) {
		printf("#%-2u ", i);
		db_printsym(st->st_pc[i], DB_STGY_PROC, printf);
		printf("\n");
	}
}
@


1.30
log
@make intrace a volatile, while the compiler does the right thing still
(no change in the generated code), it's more correct and helps the reader.

ok deraadt@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.29 2015/03/14 03:38:46 jsg Exp $	*/
d43 1
d245 12
@


1.29
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.28 2014/09/14 14:17:24 jsg Exp $	*/
d231 1
a231 1
	static int intrace;
@


1.28
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.27 2014/07/08 13:02:57 deraadt Exp $	*/
a45 1
#include <ddb/db_extern.h>
@


1.27
log
@These do not need the extremely poorly named uvm/uvm_extern.h (which
pulls in the universe). occasionally they need sys/systm.h
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.26 2010/09/08 04:28:29 marco Exp $	*/
a33 1
#include <sys/proc.h>
@


1.26
log
@stray spaces no code change
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.25 2006/07/06 18:14:14 miod Exp $	*/
a38 2

#include <uvm/uvm_extern.h>
@


1.25
log
@Remove db_check_interrupt() related logic, since it was dummied in practice.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.24 2006/03/13 06:23:20 jsg Exp $	*/
d4 1
a4 1
/* 
d8 1
a8 1
 * 
d14 1
a14 1
 * 
d18 1
a18 1
 * 
d20 1
a20 1
 * 
d25 1
a25 1
 * 
@


1.24
log
@ansi/deregister. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.23 2006/03/09 23:06:20 miod Exp $	*/
a82 1
#ifdef DDB
a83 1
#endif
a109 1
#ifdef DDB
a138 1
#endif
a145 1
#ifdef DDB
d148 1
a148 1
#endif
a173 3
#ifdef DDB
	    db_check_interrupt();
#endif
@


1.23
log
@Do not include <lib/libkern/libkern.h> explicitely, get it via <sys/systm.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.22 2004/01/03 14:08:53 espie Exp $	*/
d91 1
a91 1
db_force_whitespace()
d93 1
a93 1
	register int last_print, next_tab;
d114 1
a114 1
db_more()
d116 1
a116 1
	register  char *p;
d148 1
a148 2
db_putchar(c)
	int	c;		/* character to output */
d202 1
a202 1
db_print_position()
d211 1
a211 2
db_end_line(space)
	int space;
@


1.22
log
@put an mi wrapper around stdarg.h/varargs.h. gcc3 moved stdarg/varargs macros
to built-ins, so eventually we will have one version of these files.
Special adjustments for the kernel to cope: machine/stdarg.h -> sys/stdarg.h
and machine/ansi.h needs to have a _BSD_VA_LIST_ for syslog* prototypes.
okay millert@@, drahn@@, miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.21 2002/07/10 23:38:09 art Exp $	*/
a34 1

d36 1
a49 2

#include <lib/libkern/libkern.h>
@


1.21
log
@It is supposed to be printf, not db_printf. This change costed me
several days of debugging my laptop because underneath the X it was sitting
on the console waiting for me to press some key on the '--db_more--' prompt.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.20 2002/07/01 21:56:55 miod Exp $	*/
d36 1
a36 1
#include <machine/stdarg.h>
@


1.20
log
@Don't let variable declarations without "extern" living in .h files.
While there fix a benign type mismatch in db_stack_dump() and remove
diag code left by art by mistake.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.19 2002/05/18 18:22:46 art Exp $	*/
d257 1
a257 1
	    256 /* low limit */, "", db_printf);
@


1.19
log
@Implement db_stack_dump - a function that will print a stack
trace with printf (to the console and into the msgbuf).
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.18 2002/05/14 16:12:33 art Exp $	*/
a249 2
db_panic = 1;
panic("foo");
d257 1
a257 1
	    256 /* low limit */, "", printf);
@


1.18
log
@db_printf has three non-standard formats that are not supported by
printf. Since we want to be able to have some ddb functions use db_printf
or normal printf, provide a new way to acheive the same kind of formatting.

The new function is called db_format and can emulate all variations of
how the nonstandard db_printf formats are used.

Note that this doesn't (yet?) mean that we want to convert all the
non-standard formats, we just want to have that option.

miod@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.17 2002/03/14 01:26:51 millert Exp $	*/
d242 20
@


1.17
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.16 2001/11/06 19:53:18 miod Exp $	*/
d219 23
@


1.16
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.15 2001/07/04 23:14:53 espie Exp $	*/
d86 1
a86 1
static void db_more __P((void));
@


1.16.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.16 2001/11/06 19:53:18 miod Exp $	*/
d86 1
a86 1
static void db_more(void);
a218 43
}

char *
db_format(char *buf, size_t bufsize, long val, int format, int alt, int width)
{
	const char *fmt;

	if (format == DB_FORMAT_Z || db_radix == 16)
		fmt = alt ? "-%#*lx" : "-%*lx";
	else if (db_radix == 8)
		fmt = alt ? "-%#*lo" : "-%*lo";
	else
		fmt = alt ? "-%#*lu" : "-%*lu";

	/* The leading '-' is a nasty (and beautiful) idea from NetBSD */
	if (val < 0 && format != DB_FORMAT_N)
		val = -val;
	else
		fmt++;

	snprintf(buf, bufsize, fmt, width, val);

	return (buf);
}

void
db_stack_dump(void)
{
	static int intrace;

	if (intrace) {
db_panic = 1;
panic("foo");
		printf("Faulted in traceback, aborting...\n");
		return;
	}

	intrace = 1;
	printf("Starting stack trace...\n");
	db_stack_trace_print((db_expr_t)__builtin_frame_address(0), TRUE,
	    256 /* low limit */, "", printf);
	printf("End of stack trace.\n");
	intrace = 0;
@


1.16.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.16.2.1 2002/06/11 03:28:48 art Exp $	*/
d250 2
@


1.15
log
@Make preprocessor happier, don't give it untasty tokens at end of input.
Ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.14 1997/11/04 20:45:15 chuck Exp $	*/
d40 1
a40 1
#include <vm/vm.h>
@


1.14
log
@db_output.c: kill db_ksprintn, db_printf_guts, kdbprintf, db_printf.
  db_printf moves to kern/subr_prf.c and uses the new kprintf located there.
db_output.h: kill kdbprintf [use db_printf]
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.13 1997/07/19 22:31:19 niklas Exp $	*/
d69 1
a69 1
#endif	DB_MAX_LINE
@


1.14.10.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.14 1997/11/04 20:45:15 chuck Exp $	*/
d69 1
a69 1
#endif	/* DB_MAX_LINE */
@


1.14.10.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
#include <uvm/uvm_extern.h>
@


1.14.10.3
log
@Merge in -current from about a week ago
@
text
@d86 1
a86 1
static void db_more(void);
@


1.14.10.4
log
@Sync the SMP branch with 3.3
@
text
@a219 41

char *
db_format(char *buf, size_t bufsize, long val, int format, int alt, int width)
{
	const char *fmt;

	if (format == DB_FORMAT_Z || db_radix == 16)
		fmt = alt ? "-%#*lx" : "-%*lx";
	else if (db_radix == 8)
		fmt = alt ? "-%#*lo" : "-%*lo";
	else
		fmt = alt ? "-%#*lu" : "-%*lu";

	/* The leading '-' is a nasty (and beautiful) idea from NetBSD */
	if (val < 0 && format != DB_FORMAT_N)
		val = -val;
	else
		fmt++;

	snprintf(buf, bufsize, fmt, width, val);

	return (buf);
}

void
db_stack_dump(void)
{
	static int intrace;

	if (intrace) {
		printf("Faulted in traceback, aborting...\n");
		return;
	}

	intrace = 1;
	printf("Starting stack trace...\n");
	db_stack_trace_print((db_expr_t)__builtin_frame_address(0), TRUE,
	    256 /* low limit */, "", printf);
	printf("End of stack trace.\n");
	intrace = 0;
}
@


1.14.10.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d36 1
a36 1
#include <sys/stdarg.h>
@


1.13
log
@Include vm/vm.h everywhere it is needed to get at boolean_t (I would prefer
to have it in sys/types.h but that is problematic).  Some KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.12 1997/07/07 19:45:23 niklas Exp $	*/
a87 2
static char *db_ksprintn __P((u_long, int, int *));
static void db_printf_guts __P((const char *, va_list));
a210 40
 * Printing
 */

/*VARARGS1*/
int
#if __STDC__
db_printf(const char *fmt, ...)
#else
db_printf(fmt, va_alist)
	const char *fmt;
	va_dcl
#endif
{
	va_list	listp;
	va_start(listp, fmt);
	db_printf_guts (fmt, listp);
	va_end(listp);
	return 0;
}

/* alternate name */

/*VARARGS1*/
int
#if __STDC__
kdbprintf(const char *fmt, ...)
#else
kdbprintf(fmt, va_alist)
	char *fmt;
	va_dcl
#endif
{
	va_list	listp;
	va_start(listp, fmt);
	db_printf_guts (fmt, listp);
	va_end(listp);
	return 0;
}

/*
a218 208
}

/*
 * Put a number (base <= 16) in a buffer in reverse order; return an
 * optional length and a pointer to the NULL terminated (preceded?)
 * buffer.
 */
static char *
db_ksprintn(ul, base, lenp)
	register u_long ul;
	register int base, *lenp;
{					/* A long in base 8, plus NULL. */
	static char buf[sizeof(long) * NBBY / 3 + 2];
	register char *p;

	p = buf;
	do {
		*++p = "0123456789abcdef"[ul % base];
	} while (ul /= base);
	if (lenp)
		*lenp = p - buf;
	return (p);
}

static void
db_printf_guts(fmt, ap)
	register const char *fmt;
	va_list ap;
{
	register char *p;
	register int ch, n;
	u_long ul;
	int base, lflag, tmp, width;
	char padc;
	int ladjust;
	int sharpflag;
	int neg;

	for (;;) {
		padc = ' ';
		width = 0;
		while ((ch = *(const u_char *)fmt++) != '%') {
			if (ch == '\0')
				return;
			db_putchar(ch);
		}
		lflag = 0;
		ladjust = 0;
		sharpflag = 0;
		neg = 0;
reswitch:	switch (ch = *(const u_char *)fmt++) {
		case '0':
			padc = '0';
			goto reswitch;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			for (width = 0;; ++fmt) {
				width = width * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto reswitch;
		case 'l':
			lflag = 1;
			goto reswitch;
		case '-':
			ladjust = 1;
			goto reswitch;
		case '#':
			sharpflag = 1;
			goto reswitch;
		case 'b':
			ul = va_arg(ap, int);
			p = va_arg(ap, char *);
			for (p = db_ksprintn(ul, *p++, NULL);
			     (ch = *p--) !='\0';)
				db_putchar(ch);

			if (!ul)
				break;

			for (tmp = 0; (n = *p++) != '\0';) {
				if (ul & (1 << (n - 1))) {
					db_putchar(tmp ? ',' : '<');
					for (; (n = *p) > ' '; ++p)
						db_putchar(n);
					tmp = 1;
				} else
					for (; *p > ' '; ++p);
			}
			if (tmp)
				db_putchar('>');
			break;
		case '*':
			width = va_arg (ap, int);
			if (width < 0) {
				ladjust = !ladjust;
				width = -width;
			}
			goto reswitch;
		case ':':
			p = va_arg(ap, char *);
			db_printf_guts (p, va_arg(ap, va_list));
			break;
		case 'c':
			db_putchar(va_arg(ap, int));
			break;
		case 's':
			p = va_arg(ap, char *);
			width -= strlen (p);
			if (!ladjust && width > 0)
				while (width--)
					db_putchar (padc);
			while ((ch = *p++) != '\0')
				db_putchar(ch);
			if (ladjust && width > 0)
				while (width--)
					db_putchar (padc);
			break;
		case 'r':
			ul = lflag ? va_arg(ap, u_long) : va_arg(ap, u_int);
			if ((long)ul < 0) {
				neg = 1;
				ul = -(long)ul;
			}
			base = db_radix;
			if (base < 8 || base > 16)
				base = 10;
			goto number;
		case 'n':
			ul = lflag ? va_arg(ap, u_long) : va_arg(ap, u_int);
			base = db_radix;
			if (base < 8 || base > 16)
				base = 10;
			goto number;
		case 'd':
			ul = lflag ? va_arg(ap, long) : va_arg(ap, int);
			if ((long)ul < 0) {
				neg = 1;
				ul = -(long)ul;
			}
			base = 10;
			goto number;
		case 'o':
			ul = lflag ? va_arg(ap, u_long) : va_arg(ap, u_int);
			base = 8;
			goto number;
		case 'p':
			db_putchar ('0');
			db_putchar ('x');
			ul = (u_long) va_arg(ap, void *);
			base = 16;
			goto number;
		case 'u':
			ul = lflag ? va_arg(ap, u_long) : va_arg(ap, u_int);
			base = 10;
			goto number;
		case 'z':
			ul = lflag ? va_arg(ap, u_long) : va_arg(ap, u_int);
			if ((long)ul < 0) {
				neg = 1;
				ul = -(long)ul;
			}
			base = 16;
			goto number;
		case 'x':
			ul = lflag ? va_arg(ap, u_long) : va_arg(ap, u_int);
			base = 16;
number:			p = (char *)db_ksprintn(ul, base, &tmp);
			if (sharpflag && ul != 0) {
				if (base == 8)
					tmp++;
				else if (base == 16)
					tmp += 2;
			}
			if (neg)
				tmp++;

			if (!ladjust && width && (width -= tmp) > 0)
				while (width--)
					db_putchar(padc);
			if (neg)
				db_putchar ('-');
			if (sharpflag && ul != 0) {
				if (base == 8) {
					db_putchar ('0');
				} else if (base == 16) {
					db_putchar ('0');
					db_putchar ('x');
				}
			}
			if (ladjust && width && (width -= tmp) > 0)
				while (width--)
					db_putchar(padc);

			while ((ch = *p--) != '\0')
				db_putchar(ch);
			break;
		default:
			db_putchar('%');
			if (lflag)
				db_putchar('l');
			/* FALLTHROUGH */
		case '%':
			db_putchar(ch);
		}
	}
@


1.12
log
@Do not wrap lines so often, much prettier x output
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.11 1997/07/03 21:24:13 niklas Exp $	*/
d39 2
@


1.11
log
@const happyness
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.10 1997/05/29 03:00:21 mickey Exp $	*/
d254 2
a255 1
db_end_line()
d257 1
a257 1
	if (db_output_position >= db_max_width)
@


1.10
log
@move db_radix to the db_output.c, where all the vars are.
some preliminary support for kernfs&syms&~ddb
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.9 1997/03/21 00:44:18 niklas Exp $	*/
d299 1
a299 1
		while ((ch = *(u_char *)fmt++) != '%') {
d308 1
a308 1
reswitch:	switch (ch = *(u_char *)fmt++) {
@


1.9
log
@Instead of explicit extern, include the include file which should do it
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.8 1996/08/04 01:27:46 niklas Exp $	*/
d81 1
d83 1
d85 1
d114 1
d144 1
d153 1
d156 1
d182 1
d184 1
@


1.8
log
@Make compile on OpenBSD/alpha.  MD stuff is still missing though.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.7 1996/07/24 21:58:03 niklas Exp $	*/
d46 1
a203 1
extern int	db_radix;
@


1.7
log
@printf style functions now are int, explicitly return 0
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.6 1996/07/23 23:54:27 deraadt Exp $	*/
d47 2
@


1.6
log
@make printf/addlog return 0, for compat to userland
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.4 1996/03/11 11:16:15 mickey Exp $	*/
d217 1
d223 1
a223 1
void
d236 1
@


1.5
log
@partial sync with netbsd 960418, more to come
@
text
@d204 1
a204 1
void
@


1.4
log
@Debbuger changed towards the latest Mach.
Some minor changes for Linux ;) emulation.
Small bug fixes from NetBSD.
@
text
@d1 2
a2 1
/*	$OpenBSD: db_output.c,v 1.3 1996/02/20 13:35:39 mickey Exp $	*/
a208 1
/*###207 [cc] warning: type of `va_alist' defaults to `int'%%%*/
a209 1
/*###208 [cc] parse error before `va_dcl'%%%*/
d346 4
d393 6
a453 1

@


1.3
log
@netbsd-current import & 'boot' cmd addition.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_output.c,v 1.10 1996/02/05 01:57:08 christos Exp $	*/
d5 1
a5 1
 * Copyright (c) 1991,1990 Carnegie Mellon University
d14 1
a14 1
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS 
d25 2
a26 2
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
d33 1
@


1.2
log
@update from netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: db_output.c,v 1.9 1995/10/16 05:28:16 mycroft Exp $	*/
d36 10
d77 3
a79 1
extern void	db_check_interrupt();
d139 1
d203 2
a204 2
#ifdef __STDC__
db_printf(char *fmt, ...)
d207 4
a210 1
	char *fmt;
d223 2
a224 2
#ifdef __STDC__
kdbprintf(char *fmt, ...)
d228 1
d269 1
d320 2
a321 1
			for (p = db_ksprintn(ul, *p++, NULL); ch = *p--;)
d327 1
a327 1
			for (tmp = 0; n = *p++;) {
d355 1
a355 1
			while (ch = *p++)
d431 1
a431 1
			while (ch = *p--)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: db_output.c,v 1.8 1994/06/29 22:41:41 deraadt Exp $	*/
d189 1
d206 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
