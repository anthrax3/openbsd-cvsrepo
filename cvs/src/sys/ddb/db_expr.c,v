head	1.14;
access;
symbols
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.14
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.10
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.20
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.18
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.14
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.20
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.18
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.16
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.14
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.12
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.10
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.8
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.6
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.6.0.20
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.18
	OPENBSD_2_8:1.6.0.16
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.14
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.12
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.10
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2017.08.10.19.39.38;	author mpi;	state Exp;
branches;
next	1.13;
commitid	31PvZ4r4dQH5StiR;

1.13
date	2016.04.19.12.23.25;	author mpi;	state Exp;
branches;
next	1.12;
commitid	8RTokESmYJ4rQpkq;

1.12
date	2016.01.25.14.30.30;	author mpi;	state Exp;
branches;
next	1.11;
commitid	7AkssaZPPd7mA8h3;

1.11
date	2014.09.14.14.17.24;	author jsg;	state Exp;
branches;
next	1.10;
commitid	uzzBR7hz9ncd4O6G;

1.10
date	2014.07.08.13.02.57;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	E2I6e8QZgMmNFC95;

1.9
date	2011.05.22.19.21.55;	author ariane;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.13.06.23.20;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.06.19.53.18;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	97.07.19.22.31.17;	author niklas;	state Exp;
branches
	1.6.12.1;
next	1.5;

1.5
date	97.07.06.16.45.21;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.04.21.22.19.00;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.03.11.11.16.06;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.02.20.13.35.35;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.27;	author deraadt;	state Exp;
branches;
next	;

1.6.12.1
date	2001.11.13.21.05.48;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.14
log
@With a CTF kernel, DDB's print command will now pretty-print symbols.

Casting a type is not yet supported.

ok kettenis@@, jasper@@
@
text
@/*	$OpenBSD: db_expr.c,v 1.13 2016/04/19 12:23:25 mpi Exp $	*/
/*	$NetBSD: db_expr.c,v 1.5 1996/02/05 01:56:58 christos Exp $	*/

/*
 * Mach Operating System
 * Copyright (c) 1993,1992,1991,1990 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 *
 *	Author: David B. Golub, Carnegie Mellon University
 *	Date:	7/90
 */

#include <sys/param.h>

#include <machine/db_machdep.h>

#include <ddb/db_lex.h>
#include <ddb/db_access.h>
#include <ddb/db_command.h>
#include <ddb/db_sym.h>
#include <ddb/db_extern.h>
#include <ddb/db_variables.h>

boolean_t db_term(db_expr_t *);
boolean_t db_unary(db_expr_t *);
boolean_t db_mult_expr(db_expr_t *);
boolean_t db_add_expr(db_expr_t *);
boolean_t db_shift_expr(db_expr_t *);

boolean_t
db_term(db_expr_t *valuep)
{
	int	t;

	t = db_read_token();
	if (t == tIDENT) {
	    if (db_symbol_by_name(db_tok_string, valuep) == NULL) {
		db_error("Symbol not found\n");
		/*NOTREACHED*/
	    }
	    return (TRUE);
	}
	if (t == tNUMBER) {
	    *valuep = db_tok_number;
	    return (TRUE);
	}
	if (t == tDOT) {
	    *valuep = (db_expr_t)db_dot;
	    return (TRUE);
	}
	if (t == tDOTDOT) {
	    *valuep = (db_expr_t)db_prev;
	    return (TRUE);
	}
	if (t == tPLUS) {
	    *valuep = (db_expr_t) db_next;
	    return (TRUE);
	}
	if (t == tDITTO) {
	    *valuep = (db_expr_t)db_last_addr;
	    return (TRUE);
	}
	if (t == tDOLLAR) {
	    if (!db_get_variable(valuep))
		return (FALSE);
	    return (TRUE);
	}
	if (t == tLPAREN) {
	    if (!db_expression(valuep)) {
		db_error("Syntax error\n");
		/*NOTREACHED*/
	    }
	    t = db_read_token();
	    if (t != tRPAREN) {
		db_error("Syntax error\n");
		/*NOTREACHED*/
	    }
	    return (TRUE);
	}
	db_unread_token(t);
	return (FALSE);
}

boolean_t
db_unary(db_expr_t *valuep)
{
	int	t;

	t = db_read_token();
	if (t == tMINUS) {
	    if (!db_unary(valuep)) {
		db_error("Syntax error\n");
		/*NOTREACHED*/
	    }
	    *valuep = -*valuep;
	    return (TRUE);
	}
	if (t == tSTAR) {
	    /* indirection */
	    if (!db_unary(valuep)) {
		db_error("Syntax error\n");
		/*NOTREACHED*/
	    }
	    *valuep = db_get_value((db_addr_t)*valuep, sizeof(db_addr_t), FALSE);
	    return (TRUE);
	}
	db_unread_token(t);
	return (db_term(valuep));
}

boolean_t
db_mult_expr(db_expr_t *valuep)
{
	db_expr_t	lhs, rhs;
	int		t;

	if (!db_unary(&lhs))
	    return (FALSE);

	t = db_read_token();
	while (t == tSTAR || t == tSLASH || t == tPCT || t == tHASH) {
	    if (!db_term(&rhs)) {
		db_error("Syntax error\n");
		/*NOTREACHED*/
	    }
	    if (t == tSTAR)
		lhs *= rhs;
	    else {
		if (rhs == 0) {
		    db_error("Divide by 0\n");
		    /*NOTREACHED*/
		}
		if (t == tSLASH)
		    lhs /= rhs;
		else if (t == tPCT)
		    lhs %= rhs;
		else
		    lhs = ((lhs+rhs-1)/rhs)*rhs;
	    }
	    t = db_read_token();
	}
	db_unread_token(t);
	*valuep = lhs;
	return (TRUE);
}

boolean_t
db_add_expr(db_expr_t *valuep)
{
	db_expr_t	lhs, rhs;
	int		t;

	if (!db_mult_expr(&lhs))
	    return (FALSE);

	t = db_read_token();
	while (t == tPLUS || t == tMINUS) {
	    if (!db_mult_expr(&rhs)) {
		db_error("Syntax error\n");
		/*NOTREACHED*/
	    }
	    if (t == tPLUS)
		lhs += rhs;
	    else
		lhs -= rhs;
	    t = db_read_token();
	}
	db_unread_token(t);
	*valuep = lhs;
	return (TRUE);
}

boolean_t
db_shift_expr(db_expr_t *valuep)
{
	db_expr_t	lhs, rhs;
	int		t;

	if (!db_add_expr(&lhs))
	    return (FALSE);

	t = db_read_token();
	while (t == tSHIFT_L || t == tSHIFT_R) {
	    if (!db_add_expr(&rhs)) {
		db_error("Syntax error\n");
		/*NOTREACHED*/
	    }
	    if (rhs < 0) {
		db_error("Negative shift amount\n");
		/*NOTREACHED*/
	    }
	    if (t == tSHIFT_L)
		lhs <<= rhs;
	    else {
		/* Shift right is unsigned */
		lhs = (unsigned) lhs >> rhs;
	    }
	    t = db_read_token();
	}
	db_unread_token(t);
	*valuep = lhs;
	return (TRUE);
}

int
db_expression(db_expr_t *valuep)
{
	return (db_shift_expr(valuep));
}
@


1.13
log
@Do not expose private functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_expr.c,v 1.12 2016/01/25 14:30:30 mpi Exp $	*/
d57 1
a57 1
	    if (!db_value_of_name(db_tok_string, valuep)) {
@


1.12
log
@Kill trailing whitespaces.  No object change.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_expr.c,v 1.11 2014/09/14 14:17:24 jsg Exp $	*/
d43 6
@


1.11
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_expr.c,v 1.10 2014/07/08 13:02:57 deraadt Exp $	*/
d4 1
a4 1
/* 
d8 1
a8 1
 * 
d14 1
a14 1
 * 
d18 1
a18 1
 * 
d20 1
a20 1
 * 
d25 1
a25 1
 * 
@


1.10
log
@These do not need the extremely poorly named uvm/uvm_extern.h (which
pulls in the universe). occasionally they need sys/systm.h
@
text
@d1 1
a1 1
/*	$OpenBSD: db_expr.c,v 1.9 2011/05/22 19:21:55 ariane Exp $	*/
a33 1
#include <sys/proc.h>
@


1.9
log
@In ddb, when dereferencing a pointer, use sizeof a pointer.
Enables  show map /f *kernel_map  to succeed without nullpointer errors on
64-bit archs.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_expr.c,v 1.8 2006/03/13 06:23:20 jsg Exp $	*/
a34 2

#include <uvm/uvm_extern.h>
@


1.8
log
@ansi/deregister. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_expr.c,v 1.7 2001/11/06 19:53:18 miod Exp $	*/
d121 1
a121 1
	    *valuep = db_get_value((db_addr_t)*valuep, sizeof(int), FALSE);
@


1.7
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: db_expr.c,v 1.6 1997/07/19 22:31:17 niklas Exp $	*/
d48 1
a48 2
db_term(valuep)
	db_expr_t *valuep;
d102 1
a102 2
db_unary(valuep)
	db_expr_t *valuep;
d129 1
a129 2
db_mult_expr(valuep)
	db_expr_t *valuep;
d165 1
a165 2
db_add_expr(valuep)
	db_expr_t *valuep;
d191 1
a191 2
db_shift_expr(valuep)
	db_expr_t *valuep;
d223 1
a223 2
db_expression(valuep)
	db_expr_t *valuep;
@


1.6
log
@Include vm/vm.h everywhere it is needed to get at boolean_t (I would prefer
to have it in sys/types.h but that is problematic).  Some KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_expr.c,v 1.5 1997/07/06 16:45:21 niklas Exp $	*/
d36 1
a36 1
#include <vm/vm.h>
@


1.6.12.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 1
#include <uvm/uvm_extern.h>
@


1.5
log
@A number should be db_expr_t
@
text
@d1 1
a1 1
/*	$OpenBSD: db_expr.c,v 1.4 1996/04/21 22:19:00 deraadt Exp $	*/
d35 2
@


1.4
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: db_expr.c,v 1.3 1996/03/11 11:16:06 mickey Exp $	*/
d60 1
a60 1
	    *valuep = (db_expr_t)db_tok_number;
@


1.3
log
@Debbuger changed towards the latest Mach.
Some minor changes for Linux ;) emulation.
Small bug fixes from NetBSD.
@
text
@d1 2
a2 1
/*	$OpenBSD: db_expr.c,v 1.2 1996/02/20 13:35:35 mickey Exp $	*/
@


1.2
log
@netbsd-current import & 'boot' cmd addition.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_expr.c,v 1.5 1996/02/05 01:56:58 christos Exp $	*/
d5 1
a5 1
 * Copyright (c) 1991,1990 Carnegie Mellon University
d14 1
a14 1
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS 
d25 2
a26 2
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: db_expr.c,v 1.4 1994/06/29 06:31:06 cgd Exp $	*/
d40 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
