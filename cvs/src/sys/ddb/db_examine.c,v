head	1.23;
access;
symbols
	OPENBSD_6_2:1.23.0.2
	OPENBSD_6_2_BASE:1.23
	OPENBSD_6_1:1.23.0.4
	OPENBSD_6_1_BASE:1.23
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.20.0.4
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.4
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.18.0.12
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.8
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.6
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.4
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.2
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.10
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.6
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.11.0.8
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.6
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.10.0.8
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.6
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.4
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.10
	UBC:1.9.0.2
	UBC_BASE:1.9
	OPENBSD_3_0:1.8.0.20
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.18
	OPENBSD_2_8:1.8.0.16
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.14
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.12
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.10
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.8
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.6
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.4
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2016.10.18.19.46.00;	author naddy;	state Exp;
branches;
next	1.22;
commitid	Ouig6tfflRrkDNsg;

1.22
date	2016.06.07.01.31.54;	author tedu;	state Exp;
branches;
next	1.21;
commitid	37V3kDRiYRccnYvB;

1.21
date	2016.04.19.12.23.25;	author mpi;	state Exp;
branches;
next	1.20;
commitid	8RTokESmYJ4rQpkq;

1.20
date	2014.09.14.14.17.24;	author jsg;	state Exp;
branches;
next	1.19;
commitid	uzzBR7hz9ncd4O6G;

1.19
date	2014.07.08.13.02.57;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	E2I6e8QZgMmNFC95;

1.18
date	2011.11.07.20.29.56;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2009.11.21.20.40.04;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2007.11.05.19.23.24;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2007.09.13.17.14.17;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2007.09.01.11.54.03;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2007.03.15.17.10.22;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.13.06.23.20;	author jsg;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.25.03.21.50;	author itojun;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.16.13.01.41;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.06.19.53.18;	author miod;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	97.07.19.22.31.16;	author niklas;	state Exp;
branches
	1.8.12.1;
next	1.7;

1.7
date	97.07.07.19.45.22;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	97.07.06.23.09.24;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.08.04.01.27.45;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.04.21.22.18.59;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.03.11.11.16.05;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.02.20.13.35.35;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.27;	author deraadt;	state Exp;
branches;
next	;

1.8.12.1
date	2001.11.13.21.05.48;	author niklas;	state Exp;
branches;
next	1.8.12.2;

1.8.12.2
date	2003.03.28.00.00.19;	author niklas;	state Exp;
branches;
next	1.8.12.3;

1.8.12.3
date	2004.06.05.23.12.36;	author niklas;	state Exp;
branches;
next	;

1.9.2.1
date	2002.06.11.03.28.48;	author art;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Add the examine /m format, "display in unsigned hex with character
dump at the end of each line", which has always been documented but
not implemented.

Mostly from NetBSD, but I fixed the column alignment code.

ok mlarkin@@, pirofti@@
@
text
@/*	$OpenBSD: db_examine.c,v 1.22 2016/06/07 01:31:54 tedu Exp $	*/
/*	$NetBSD: db_examine.c,v 1.11 1996/03/30 22:30:07 christos Exp $	*/

/*
 * Mach Operating System
 * Copyright (c) 1993,1992,1991,1990 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie Mellon
 * the rights to redistribute these changes.
 *
 *	Author: David B. Golub, Carnegie Mellon University
 *	Date:	7/90
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <machine/db_machdep.h>		/* type definitions */

#include <ddb/db_lex.h>
#include <ddb/db_output.h>
#include <ddb/db_command.h>
#include <ddb/db_sym.h>
#include <ddb/db_access.h>
#include <ddb/db_extern.h>
#include <ddb/db_interface.h>

char	db_examine_format[TOK_STRING_SIZE] = "x";

void db_examine(db_addr_t, char *, int);
void db_search(db_addr_t, int, db_expr_t, db_expr_t, db_expr_t);

/*
 * Examine (print) data.  Syntax is:
 *		x/[bhlq][cdiorsuxz]*
 * For example, the command:
 *  	x/bxxxx
 * should print:
 *  	address:  01  23  45  67
 */
/*ARGSUSED*/
void
db_examine_cmd(db_expr_t addr, int have_addr, db_expr_t count, char *modif)
{
	if (modif[0] != '\0')
		db_strlcpy(db_examine_format, modif, sizeof(db_examine_format));

	if (count == -1)
		count = 1;

	db_examine((db_addr_t)addr, db_examine_format, count);
}

void
db_examine(db_addr_t addr, char *fmt, int count)
{
	int		i, c;
	db_expr_t	value;
	int		size;
	int		width;
	int		bytes;
	char *		fp;
	db_addr_t	incr;
	int		dis;
	char		tmpfmt[28];

	while (--count >= 0) {
		fp = fmt;

		/* defaults */
		size = 4;
		width = 12;
		incr = 0;
		dis = 0;

		while ((c = *fp++) != 0) {
			if (db_print_position() == 0) {
				/* Always print the address. */
				db_printsym(addr, DB_STGY_ANY, db_printf);
				db_printf(":\t");
				db_prev = addr;
			}
			incr = size;
			switch (c) {
			case 'b':	/* byte */
				size = 1;
				width = 4;
				break;
			case 'h':	/* half-word */
				size = 2;
				width = 8;
				break;
			case 'l':	/* long-word */
				size = 4;
				width = 12;
				break;
#ifdef __LP64__
			case 'q':	/* quad-word */
				size = 8;
				width = 20;
				break;
#endif
			case 'a':	/* address */
				db_printf("= 0x%lx\n", (long)addr);
				incr = 0;
				break;
			case 'r':	/* signed, current radix */
				value = db_get_value(addr, size, TRUE);
				db_format(tmpfmt, sizeof tmpfmt,
				    (long)value, DB_FORMAT_R, 0, width);
				db_printf("%-*s", width, tmpfmt);
				break;
			case 'x':	/* unsigned hex */
				value = db_get_value(addr, size, FALSE);
				db_printf("%-*lx", width, (long)value);
				break;
			case 'm':	/* hex dump */
				/*
				 * Print off in chunks of size. Try to print 16
				 * bytes at a time into 4 columns. This
				 * loops modify's count extra times in order
				 * to get the nicely formatted lines.
				 */
				incr = 0;
				bytes = 0;
				do {
					for (i = 0; i < size; i++) {
						value =
						    db_get_value(addr+bytes, 1,
							FALSE);
						db_printf("%02lx",
						    (long)value);
						bytes++;
						if (!(bytes % 4))
							db_printf(" ");
					}
				} while ((bytes != 16) && count--);
				/* True up the columns before continuing */
				db_printf("%-*s",
			            (16-bytes)*2 + (4 - bytes/4) + 1, " ");
				/* Print chars, use . for non-printables */
				while (bytes--) {
					value = db_get_value(addr + incr, 1,
					    FALSE);
					incr++;
					if (value >= ' ' && value <= '~')
						db_printf("%c", (int)value);
					else
						db_printf(".");
				}
				db_printf("\n");
				break;
			case 'z':	/* signed hex */
				value = db_get_value(addr, size, TRUE);
				db_format(tmpfmt, sizeof tmpfmt,
				    (long)value, DB_FORMAT_Z, 0, width);
				db_printf("%-*s", width, tmpfmt);
				break;
			case 'd':	/* signed decimal */
				value = db_get_value(addr, size, TRUE);
				db_printf("%-*ld", width, (long)value);
				break;
			case 'u':	/* unsigned decimal */
				value = db_get_value(addr, size, FALSE);
				db_printf("%-*lu", width, (long)value);
				break;
			case 'o':	/* unsigned octal */
				value = db_get_value(addr, size, FALSE);
				db_printf("%-*lo", width, value);
				break;
			case 'c':	/* character */
				value = db_get_value(addr, 1, FALSE);
				incr = 1;
				if (value >= ' ' && value <= '~')
					db_printf("%c", (int)value);
				else
					db_printf("\\%03o", (int)value);
				break;
			case 's':	/* null-terminated string */
				incr = 0;
				for (;;) {
					value = db_get_value(addr + incr, 1,
					    FALSE);
					incr++;
					if (value == 0)
						break;
					if (value >= ' ' && value <= '~')
						db_printf("%c", (int)value);
					else
						db_printf("\\%03o", (int)value);
				}
				break;
			case 'i':	/* instruction */
			case 'I':	/* instruction, alternate form */
				dis = c;
				break;
			default:
				incr = 0;
				break;
			}
		}
		/* if we had a disassembly modifier, do it last */
		switch (dis) {
		case 'i':	/* instruction */
			addr = db_disasm(addr, FALSE);
			break;
		case 'I':	/* instruction, alternate form */
			addr = db_disasm(addr, TRUE);
			break;
		default:
			addr += incr;
			break;
		}
		if (db_print_position() != 0)
			db_printf("\n");
	}
	db_next = addr;
}

/*
 * Print value.
 */
char	db_print_format = 'x';

/*ARGSUSED*/
void
db_print_cmd(db_expr_t addr, int have_addr, db_expr_t count, char *modif)
{
	db_expr_t	value;
	char		tmpfmt[28];

	if (modif[0] != '\0')
		db_print_format = modif[0];

	switch (db_print_format) {
	case 'a':
		db_printsym((db_addr_t)addr, DB_STGY_ANY, db_printf);
		break;
	case 'r':
		db_printf("%s", db_format(tmpfmt, sizeof tmpfmt, addr,
		    DB_FORMAT_R, 0, sizeof(db_expr_t) * 2 * 6 / 5));
		break;
	case 'x':
		db_printf("%*lx", (uint)sizeof(db_expr_t) * 2, addr);
		break;
	case 'z':
		db_printf("%s", db_format(tmpfmt, sizeof tmpfmt, addr,
		    DB_FORMAT_Z, 0, sizeof(db_expr_t) * 2));
		break;
	case 'd':
		db_printf("%*ld", (uint)sizeof(db_expr_t) * 2 * 6 / 5, addr);
		break;
	case 'u':
		db_printf("%*lu", (uint)sizeof(db_expr_t) * 2 * 6 / 5, addr);
		break;
	case 'o':
		db_printf("%*lo", (uint)sizeof(db_expr_t) * 2 * 4 / 3, addr);
		break;
	case 'c':
		value = addr & 0xFF;
		if (value >= ' ' && value <= '~')
			db_printf("%c", (int)value);
		else
			db_printf("\\%03o", (int)value);
		break;
	}
	db_printf("\n");
}

void
db_print_loc_and_inst(db_addr_t loc)
{
	db_printsym(loc, DB_STGY_PROC, db_printf);
	db_printf(":\t");
	(void) db_disasm(loc, FALSE);
}

/* local copy is needed here so that we can trace strlcpy() in libkern */
size_t
db_strlcpy(char *dst, const char *src, size_t siz)
{
	char *d = dst;
	const char *s = src;
	size_t n = siz;

	/* Copy as many bytes as will fit */
	if (n != 0 && --n != 0) {
		do {
			if ((*d++ = *s++) == 0)
				break;
		} while (--n != 0);
	}

	/* Not enough room in dst, add NUL and traverse rest of src */
	if (n == 0) {
		if (siz != 0)
			*d = '\0';		/* NUL-terminate dst */
		while (*s++)
			continue;
	}

	return(s - src - 1);	/* count does not include NUL */
}

/*
 * Search for a value in memory.
 * Syntax: search [/bhl] addr value [mask] [,count]
 */
/*ARGSUSED*/
void
db_search_cmd(db_expr_t daddr, int have_addr, db_expr_t dcount, char *modif)
{
	int		t;
	db_addr_t	addr;
	int		size;
	db_expr_t	value;
	db_expr_t	mask;
	db_expr_t	count;

	t = db_read_token();
	if (t == tSLASH) {
		t = db_read_token();
		if (t != tIDENT) {
			bad_modifier:
			db_printf("Bad modifier\n");
			db_flush_lex();
			return;
		}

		if (!strcmp(db_tok_string, "b"))
			size = 1;
		else if (!strcmp(db_tok_string, "h"))
			size = 2;
		else if (!strcmp(db_tok_string, "l"))
			size = 4;
		else
			goto bad_modifier;
	} else {
		db_unread_token(t);
		size = 4;
	}

	if (!db_expression(&value)) {
		db_printf("Address missing\n");
		db_flush_lex();
		return;
	}
	addr = (db_addr_t) value;

	if (!db_expression(&value)) {
		db_printf("Value missing\n");
		db_flush_lex();
		return;
	}

	if (!db_expression(&mask))
		mask = (int) ~0;

	t = db_read_token();
	if (t == tCOMMA) {
		if (!db_expression(&count)) {
			db_printf("Count missing\n");
			db_flush_lex();
			return;
		}
	} else {
		db_unread_token(t);
		count = -1;		/* forever */
	}
	db_skip_to_eol();

	db_search(addr, size, value, mask, count);
}

void
db_search(db_addr_t addr, int size, db_expr_t value, db_expr_t mask,
    db_expr_t count)
{
	/* Negative counts means forever.  */
	while (count < 0 || count-- != 0) {
		db_prev = addr;
		if ((db_get_value(addr, size, FALSE) & mask) == value)
			break;
		addr += size;
	}
	db_next = addr;
}
@


1.22
log
@per trending style, add continue to empty loops.
ok mglocker
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.21 2016/04/19 12:23:25 mpi Exp $	*/
d75 1
a75 1
	int		c;
d79 1
d134 36
@


1.21
log
@Do not expose private functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.20 2014/09/14 14:17:24 jsg Exp $	*/
d280 1
a280 1
			;
@


1.20
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.19 2014/07/08 13:02:57 deraadt Exp $	*/
d47 3
@


1.19
log
@These do not need the extremely poorly named uvm/uvm_extern.h (which
pulls in the universe). occasionally they need sys/systm.h
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.18 2011/11/07 20:29:56 miod Exp $	*/
a34 1
#include <sys/proc.h>
@


1.18
log
@When multiple display modifiers are specified on a ddb examine command, do
not advance the address until the last modifier has been processed. This
allows sequences like `x/xi address,count' to yield meaningful results.
As a bonus, handle `i' and `I' modifiers last, so that I don't have to
fight my habit of using `x/ix' instead of `x/xi'.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.17 2009/11/21 20:40:04 miod Exp $	*/
d34 1
a35 2

#include <uvm/uvm_extern.h>
@


1.17
log
@Fix `print $registername' on 64 bit platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.16 2007/11/05 19:23:24 miod Exp $	*/
d79 2
d85 2
d89 3
d99 1
d121 1
a124 1
				addr += size;
a130 1
				addr += size;
a134 1
				addr += size;
a140 1
				addr += size;
a144 1
				addr += size;
a148 1
				addr += size;
d153 1
a153 1
				addr += 1;
d155 1
a155 1
					db_printf("%c", value);
d157 1
a157 1
					db_printf("\\%03o", value);
d160 1
d162 3
a164 2
					value = db_get_value(addr, 1, FALSE);
					addr += 1;
d168 1
a168 1
						db_printf("%c", value);
d170 1
a170 1
						db_printf("\\%03o", value);
a173 2
				addr = db_disasm(addr, FALSE);
				break;
d175 1
a175 1
				addr = db_disasm(addr, TRUE);
d178 1
a180 2
			if (db_print_position() != 0)
				db_end_line(width);
d182 14
d224 1
a224 1
		db_printf("%*lx", sizeof(db_expr_t) * 2, addr);
d231 1
a231 1
		db_printf("%*ld", sizeof(db_expr_t) * 2 * 6 / 5, addr);
d234 1
a234 1
		db_printf("%*lu", sizeof(db_expr_t) * 2 * 6 / 5, addr);
d237 1
a237 1
		db_printf("%*lo", sizeof(db_expr_t) * 2 * 4 / 3, addr);
d242 1
a242 1
			db_printf("%c", value);
d244 1
a244 1
			db_printf("\\%03o", value);
@


1.16
log
@temporary ddb buffers need to be a bit larger on 64 bit systems to cope with
some radix configurations.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.15 2007/09/13 17:14:17 miod Exp $	*/
d208 1
a208 1
		db_printf("%*x", sizeof(db_expr_t) * 2, addr);
d215 1
a215 1
		db_printf("%*d", sizeof(db_expr_t) * 2 * 6 / 5, addr);
d218 1
a218 1
		db_printf("%*u", sizeof(db_expr_t) * 2 * 6 / 5, addr);
d221 1
a221 1
		db_printf("%*o", sizeof(db_expr_t) * 2 * 4 / 3, addr);
@


1.15
log
@A few %n/%r/%z format strings were missed, convert these to db_format().
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.14 2007/09/01 11:54:03 miod Exp $	*/
d79 1
a79 1
	char		tmpfmt[24];
d194 1
a194 1
	char		tmpfmt[24];
@


1.14
log
@Use db_format() instead of ddb-specific format specifiers; no functional
change inteded.
ok ray@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.13 2007/03/15 17:10:22 miod Exp $	*/
d79 1
d117 3
a119 1
				db_printf("%-*lr", width, (long)value);
d129 3
a131 1
				db_printf("%-*lz", width, (long)value);
@


1.13
log
@Disable x/q functionnality on 32bit platforms, because the examination code
is not supposed to work on values larger than db_expr_t.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.12 2006/03/13 06:23:20 jsg Exp $	*/
d189 1
d199 2
a200 1
		db_printf("%*r", sizeof(db_expr_t) * 2 * 6 / 5, addr);
d206 2
a207 1
		db_printf("%*z", sizeof(db_expr_t) * 2, addr);
@


1.12
log
@ansi/deregister. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.11 2004/04/25 03:21:50 itojun Exp $	*/
d104 1
d109 1
@


1.11
log
@kill unbounded string op.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.10 2002/05/16 13:01:41 art Exp $	*/
d60 1
a60 5
db_examine_cmd(addr, have_addr, count, modif)
	db_expr_t	addr;
	int		have_addr;
	db_expr_t	count;
	char *		modif;
d72 1
a72 4
db_examine(addr, fmt, count)
	db_addr_t	addr;
	char *		fmt;	/* format string */
	int		count;	/* repeat count */
d184 1
a184 5
db_print_cmd(addr, have_addr, count, modif)
	db_expr_t	addr;
	int		have_addr;
	db_expr_t	count;
	char *		modif;
d225 1
a225 2
db_print_loc_and_inst(loc)
	db_addr_t	loc;
d265 1
a265 5
db_search_cmd(daddr, have_addr, dcount, modif)
	db_expr_t	daddr;
	int		have_addr;
	db_expr_t	dcount;
	char *		modif;
d330 2
a331 7
db_search(addr, size, value, mask, count)
	register
	db_addr_t	addr;
	int		size;
	db_expr_t	value;
	db_expr_t	mask;
	db_expr_t	count;
@


1.10
log
@Add a an argument to db_printsym that specifies the printf function
we'll use for printing the information.
miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.9 2001/11/06 19:53:18 miod Exp $	*/
d67 1
a67 1
		db_strcpy(db_examine_format, modif);
d244 3
a246 4
void
db_strcpy(dst, src)
	register char *dst;
	register char *src;
d248 21
a268 2
	while ((*dst++ = *src++) != '\0')
		;
@


1.9
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.8 1997/07/19 22:31:16 niklas Exp $	*/
d94 1
a94 1
				db_printsym(addr, DB_STGY_ANY);
d204 1
a204 1
		db_printsym((db_addr_t)addr, DB_STGY_ANY);
d239 1
a239 1
	db_printsym(loc, DB_STGY_PROC);
@


1.9.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.9 2001/11/06 19:53:18 miod Exp $	*/
d94 1
a94 1
				db_printsym(addr, DB_STGY_ANY, db_printf);
d204 1
a204 1
		db_printsym((db_addr_t)addr, DB_STGY_ANY, db_printf);
d239 1
a239 1
	db_printsym(loc, DB_STGY_PROC, db_printf);
@


1.8
log
@Include vm/vm.h everywhere it is needed to get at boolean_t (I would prefer
to have it in sys/types.h but that is problematic).  Some KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.7 1997/07/07 19:45:22 niklas Exp $	*/
d36 1
a36 1
#include <vm/vm.h>
@


1.8.12.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 1
#include <uvm/uvm_extern.h>
@


1.8.12.2
log
@Sync the SMP branch with 3.3
@
text
@d94 1
a94 1
				db_printsym(addr, DB_STGY_ANY, db_printf);
d204 1
a204 1
		db_printsym((db_addr_t)addr, DB_STGY_ANY, db_printf);
d239 1
a239 1
	db_printsym(loc, DB_STGY_PROC, db_printf);
@


1.8.12.3
log
@Merge with the trunk
@
text
@d67 1
a67 1
		db_strlcpy(db_examine_format, modif, sizeof(db_examine_format));
d244 4
a247 3
/* local copy is needed here so that we can trace strlcpy() in libkern */
size_t
db_strlcpy(char *dst, const char *src, size_t siz)
d249 2
a250 21
	char *d = dst;
	const char *s = src;
	size_t n = siz;

	/* Copy as many bytes as will fit */
	if (n != 0 && --n != 0) {
		do {
			if ((*d++ = *s++) == 0)
				break;
		} while (--n != 0);
	}

	/* Not enough room in dst, add NUL and traverse rest of src */
	if (n == 0) {
		if (siz != 0)
			*d = '\0';		/* NUL-terminate dst */
		while (*s++)
			;
	}

	return(s - src - 1);	/* count does not include NUL */
@


1.7
log
@Do not wrap lines so often, much prettier x output
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.6 1997/07/06 23:09:24 niklas Exp $	*/
d35 2
@


1.6
log
@64 bit fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.5 1996/08/04 01:27:45 niklas Exp $	*/
d70 1
a70 1
	db_examine((db_addr_t) addr, db_examine_format, count);
d176 1
a176 1
				db_end_line();
@


1.5
log
@Make compile on OpenBSD/alpha.  MD stuff is still missing though.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.4 1996/04/21 22:18:59 deraadt Exp $	*/
d50 1
a50 1
 *		x/[bhl][cdiorsuxz]*
d75 1
a75 2
	register
	    db_addr_t	addr;
d109 4
d114 1
a114 1
				db_printf("= 0x%lx\n", addr);
d119 1
a119 1
				db_printf("%-*r", width, value);
d124 1
a124 1
				db_printf("%-*x", width, value);
d129 1
a129 1
				db_printf("%-*z", width, value);
d134 1
a134 1
				db_printf("%-*d", width, value);
d139 1
a139 1
				db_printf("%-*u", width, value);
d144 1
a144 1
				db_printf("%-*o", width, value);
d205 1
a205 1
		db_printf("%11r", addr);
d208 1
a208 1
		db_printf("%8x", addr);
d211 1
a211 1
		db_printf("%8z", addr);
d214 1
a214 1
		db_printf("%11d", addr);
d217 1
a217 1
		db_printf("%11u", addr);
d220 1
a220 1
		db_printf("%16o", addr);
@


1.4
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.3 1996/03/11 11:16:05 mickey Exp $	*/
d265 1
a265 1
	unsigned int	count;
d315 1
a315 1
		count = -1;		/* effectively forever */
d329 1
a329 1
	unsigned int	count;
d331 2
a332 1
	while (count-- != 0) {
@


1.3
log
@Debbuger changed towards the latest Mach.
Some minor changes for Linux ;) emulation.
Small bug fixes from NetBSD.
@
text
@d1 2
a2 1
/*	$OpenBSD: db_examine.c,v 1.2 1996/02/20 13:35:35 mickey Exp $	*/
d111 1
a111 1
				db_printf("= 0x%x\n", addr);
@


1.2
log
@netbsd-current import & 'boot' cmd addition.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_examine.c,v 1.10 1996/02/05 01:56:57 christos Exp $	*/
d5 1
a5 1
 * Copyright (c) 1991,1990 Carnegie Mellon University
d14 1
a14 1
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS
d25 2
a26 2
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: db_examine.c,v 1.9 1994/11/17 04:51:50 gwr Exp $	*/
d41 3
a46 3
extern	db_addr_t db_disasm(/* db_addr_t, boolean_t */);
			/* instruction disassembler */

d72 1
d75 1
a75 1
		db_addr_t	addr;
d229 1
d238 1
d243 1
a243 1
	while (*dst++ = *src++)
d251 1
d253 5
a257 1
db_search_cmd()
d289 1
a289 1
	if (!db_expression(&addr)) {
d294 1
d303 1
a303 1
		mask = 0xffffffff;
d321 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
