head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.2
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.17.0.6
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.16.0.4
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.6
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.14.0.12
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.10
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.14
	OPENBSD_5_1:1.14.0.8
	OPENBSD_5_0:1.14.0.6
	OPENBSD_5_0_BASE:1.14
	OPENBSD_4_9:1.14.0.4
	OPENBSD_4_9_BASE:1.14
	OPENBSD_4_8:1.14.0.2
	OPENBSD_4_8_BASE:1.14
	OPENBSD_4_7:1.13.0.4
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.6
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.2
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.12.0.10
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.8
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.9.0.10
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.8
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.5.0.2
	UBC_BASE:1.5
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.10
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.8
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.20
date	2017.09.08.05.36.52;	author deraadt;	state Exp;
branches;
next	1.19;
commitid	uRv5pa9QDlZaYgwD;

1.19
date	2017.04.30.16.45.45;	author mpi;	state Exp;
branches;
next	1.18;
commitid	2Gtqjzrin9LL2yHk;

1.18
date	2016.09.04.09.22.29;	author mpi;	state Exp;
branches;
next	1.17;
commitid	jBolvsPoQ0BaYiLs;

1.17
date	2015.03.14.03.38.46;	author jsg;	state Exp;
branches;
next	1.16;
commitid	p4LJxGKbi0BU2cG6;

1.16
date	2014.07.08.13.02.57;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	E2I6e8QZgMmNFC95;

1.15
date	2013.06.10.22.46.13;	author bluhm;	state Exp;
branches;
next	1.14;

1.14
date	2010.07.26.01.56.27;	author guenther;	state Exp;
branches;
next	1.13;

1.13
date	2008.11.08.01.14.51;	author mpf;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.15.21.49.40;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.15.21.02.38;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.13.06.23.20;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.06.22.19.21;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.28.01.52.18;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.19.27.14;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.01.21.56.55;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.06.19.53.18;	author miod;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2000.02.27.04.57.29;	author hugh;	state Exp;
branches;
next	1.3;

1.3
date	98.02.05.16.49.22;	author deraadt;	state Exp;
branches
	1.3.10.1;
next	1.2;

1.2
date	97.12.29.14.31.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.03.30.04.51.31;	author mickey;	state Exp;
branches;
next	;

1.3.10.1
date	2000.03.02.07.04.37;	author niklas;	state Exp;
branches;
next	1.3.10.2;

1.3.10.2
date	2001.11.13.21.05.48;	author niklas;	state Exp;
branches;
next	1.3.10.3;

1.3.10.3
date	2003.03.28.00.00.19;	author niklas;	state Exp;
branches;
next	1.3.10.4;

1.3.10.4
date	2003.06.07.11.02.28;	author ho;	state Exp;
branches;
next	1.3.10.5;

1.3.10.5
date	2004.02.19.10.56.12;	author niklas;	state Exp;
branches;
next	1.3.10.6;

1.3.10.6
date	2004.06.05.23.12.36;	author niklas;	state Exp;
branches;
next	;

1.5.2.1
date	2002.10.29.00.30.52;	author art;	state Exp;
branches;
next	;


desc
@@


1.20
log
@If you use sys/param.h, you don't need sys/types.h
@
text
@/*	$OpenBSD: db_usrreq.c,v 1.19 2017/04/30 16:45:45 mpi Exp $	*/

/*
 * Copyright (c) 1996 Michael Shalayeff.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/tty.h>
#include <sys/sysctl.h>
#include <dev/cons.h>

#include <ddb/db_var.h>

int	db_log = 1;
int	db_profile;			/* Allow dynamic profiling */

int
ddb_sysctl(int *name, u_int namelen, void *oldp, size_t *oldlenp, void *newp,
    size_t newlen, struct proc *p)
{
	int error, ctlval;

	/* All sysctl names at this level are terminal. */
	if (namelen != 1)
		return (ENOTDIR);

	switch (name[0]) {

	case DBCTL_RADIX:
		return sysctl_int(oldp, oldlenp, newp, newlen, &db_radix);
	case DBCTL_MAXWIDTH:
		return sysctl_int(oldp, oldlenp, newp, newlen, &db_max_width);
	case DBCTL_TABSTOP:
		return sysctl_int(oldp, oldlenp, newp, newlen, &db_tab_stop_width);
	case DBCTL_MAXLINE:
		return sysctl_int(oldp, oldlenp, newp, newlen, &db_max_line);
	case DBCTL_PANIC:
		if (securelevel > 0)
			return (sysctl_int_lower(oldp, oldlenp, newp, newlen,
			    &db_panic));
		else {
			ctlval = db_panic;
			if ((error = sysctl_int(oldp, oldlenp, newp, newlen,
			    &ctlval)) || newp == NULL)
				return (error);
			if (ctlval != 1 && ctlval != 0)
				return (EINVAL);
			db_panic = ctlval;
			return (0);
		}
		break;
	case DBCTL_CONSOLE:
		if (securelevel > 0)
			return (sysctl_int_lower(oldp, oldlenp, newp, newlen,
			    &db_console));
		else {
			ctlval = db_console;
			if ((error = sysctl_int(oldp, oldlenp, newp, newlen,
			    &ctlval)) || newp == NULL)
				return (error);
			if (ctlval != 1 && ctlval != 0)
				return (EINVAL);
			db_console = ctlval;
			return (0);
		}
		break;
	case DBCTL_LOG:
		return (sysctl_int(oldp, oldlenp, newp, newlen, &db_log));
	case DBCTL_TRIGGER:
		if (newp && db_console) {
			struct process *pr = curproc->p_p;

			if (securelevel < 1 ||
			    (pr->ps_flags & PS_CONTROLT && cn_tab &&
			    cn_tab->cn_dev == pr->ps_session->s_ttyp->t_dev)) {
				db_enter();
				newp = NULL;
			} else
				return (ENODEV);
		}
		return (sysctl_rdint(oldp, oldlenp, newp, 0));
#if defined(DDBPROF)
	case DBCTL_PROFILE:
		if (securelevel > 0)
			return (sysctl_int_lower(oldp, oldlenp, newp, newlen,
			    &db_profile));
		else {
			ctlval = db_profile;
			if ((error = sysctl_int(oldp, oldlenp, newp, newlen,
			    &ctlval)) || newp == NULL)
				return (error);
			if (ctlval != 1 && ctlval != 0)
				return (EINVAL);
			db_profile = ctlval;
			return (0);
		}
		break;
#endif /* DDBPROF */
	default:
		return (EOPNOTSUPP);
	}
	/* NOTREACHED */
}
@


1.19
log
@Rename Debugger() into db_enter().

Using a name with the 'db_' prefix makes it invisible from the dynamic
profiler.

ok deraadt@@, kettenis@@, visa@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.18 2016/09/04 09:22:29 mpi Exp $	*/
a27 1
#include <sys/types.h>
@


1.18
log
@Introduce Dynamic Profiling, a ddb(4) based & gprof compatible kernel
profiling framework.

Code patching is used to enable probes when entering functions.  The
probes will call a mcount()-like function to match the behavior of a
GPROF kernel.

Currently only available on amd64 and guarded under DDBPROF.  Support
for other archs will follow soon.

A new sysctl knob, ddb.console, need to be set to 1 in securelevel 0
to be able to use this feature.

Inputs and ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.17 2015/03/14 03:38:46 jsg Exp $	*/
d99 1
a99 1
				Debugger();
@


1.17
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.16 2014/07/08 13:02:57 deraadt Exp $	*/
d38 1
d105 17
@


1.16
log
@These do not need the extremely poorly named uvm/uvm_extern.h (which
pulls in the universe). occasionally they need sys/systm.h
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.15 2013/06/10 22:46:13 bluhm Exp $	*/
a29 1
#include <sys/kernel.h>
@


1.15
log
@If sysctl ddb.trigger=1 is not called from the console, the error
message "value is not available" was misleading.  Use the ENODEV
error to generate the more appropriate message "Operation not
supported by device".  Note that ddb.console must be set to 1 to
see that error at all.
OK mpf@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.14 2010/07/26 01:56:27 guenther Exp $	*/
d29 1
a32 1
#include <uvm/uvm_extern.h>
@


1.14
log
@Correct the links between threads, processes, pgrps, and sessions,
so that the process-level stuff is to/from struct process and not
struct proc.  This fixes a bunch of problem cases in rthreads.
Based on earlier work by blambert and myself, but mostly written
at c2k10.

Tested by many: deraadt, sthen, krw, ray, and in snapshots
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.13 2008/11/08 01:14:51 mpf Exp $	*/
d102 1
a102 1
				return (EOPNOTSUPP);
@


1.13
log
@Add a new sysctl ``ddb.trigger''
Writing to it, will bring the system into the kernel debugger.
ddb.console=1 is required and the sysctl command has to be executed
from the actual console tty.
If the securelevel is < 1, the tty check is ignored.
Feedback and OK ckuethe@@, deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.12 2006/03/15 21:49:40 miod Exp $	*/
d94 2
a95 1
			struct proc *p = curproc;
d97 2
a98 2
			    (p->p_flag & P_CONTROLT && cn_tab &&
			    cn_tab->cn_dev == p->p_session->s_ttyp->t_dev)) {
@


1.12
log
@Still allow ddb.console and ddb.panic to be raised if securelevel <= 0;
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.11 2006/03/15 21:02:38 deraadt Exp $	*/
d31 1
d34 1
d92 12
@


1.11
log
@use sysctl_int_lower (old code had the negative bug)
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.10 2006/03/13 06:23:20 jsg Exp $	*/
d42 2
d59 14
a72 1
		return sysctl_int_lower(oldp, oldlenp, newp, newlen, &db_panic);
d74 14
a87 1
		return sysctl_int_lower(oldp, oldlenp, newp, newlen, &db_console);
@


1.10
log
@ansi/deregister. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.9 2004/02/06 22:19:21 tedu Exp $	*/
a41 2
	int error, ctlval;

d57 1
a57 10
		ctlval = db_panic;
		if ((error = sysctl_int(oldp, oldlenp, newp, newlen, &ctlval)) ||
		    newp == NULL)
			return (error);
		if (ctlval != 1 && ctlval != 0)
			return (EINVAL);
		if (ctlval > db_panic && securelevel > 1)
			return (EPERM);
		db_panic = ctlval;
		return (0);
d59 1
a59 10
		ctlval = db_console;
		if ((error = sysctl_int(oldp, oldlenp, newp, newlen, &ctlval)) ||
		    newp == NULL)
			return (error);
		if (ctlval != 1 && ctlval != 0)
			return (EINVAL);
		if (ctlval > db_console && securelevel > 1)
			return (EPERM);
		db_console = ctlval;
		return (0);
@


1.9
log
@default db.log=1.  as noted by Sam Smith, this is more useful.  mickey concurred
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.8 2003/06/28 01:52:18 tedu Exp $	*/
d39 2
a40 8
ddb_sysctl(name, namelen, oldp, oldlenp, newp, newlen, p)
	int	*name;
	u_int	namelen;
	void	*oldp;
	size_t	*oldlenp;
	void	*newp;
	size_t	newlen;
	struct proc *p;
@


1.8
log
@option to log ddb output to kernel message buffer, via sysctl ddb.log
ok deraadt@@ henric@@ djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.7 2003/06/02 19:27:14 mickey Exp $	*/
d36 1
a36 1
int	db_log;
@


1.7
log
@kill the clauses three and four on my sources
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.6 2002/07/01 21:56:55 miod Exp $	*/
d36 2
d86 2
@


1.6
log
@Don't let variable declarations without "extern" living in .h files.
While there fix a benign type mismatch in db_stack_dump() and remove
diag code left by art by mistake.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.5 2001/11/06 19:53:18 miod Exp $	*/
a13 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.5
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.4 2000/02/27 04:57:29 hugh Exp $	*/
a39 2

extern int securelevel;
@


1.5.2.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.5 2001/11/06 19:53:18 miod Exp $	*/
d40 2
@


1.4
log
@Provide a means to lock ddb off on systems at high securelevel, in order
reduce the need for a custom kernel sans ddb.
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.3 1998/02/05 16:49:22 deraadt Exp $	*/
d36 1
a36 1
#include <vm/vm.h>
@


1.3
log
@rename ddb.panic_ddb, and add ddb.console. Now you can stop console ddb entry
with a sysctl. There will be architectures and drivers that lack function,
and I trust the maintainers of those will forget to add the code..
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.2 1997/12/29 14:31:19 deraadt Exp $	*/
d41 2
d53 2
d70 10
a79 1
		return sysctl_int(oldp, oldlenp, newp, newlen, &db_panic);
d81 10
a90 1
		return sysctl_int(oldp, oldlenp, newp, newlen, &db_console);
@


1.3.10.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a40 2
extern int securelevel;

a50 2
	int error, ctlval;

d66 1
a66 10
		ctlval = db_panic;
		if ((error = sysctl_int(oldp, oldlenp, newp, newlen, &ctlval)) ||
		    newp == NULL)
			return (error);
		if (ctlval != 1 && ctlval != 0)
			return (EINVAL);
		if (ctlval > db_panic && securelevel > 1)
			return (EPERM);
		db_panic = ctlval;
		return (0);
d68 1
a68 10
		ctlval = db_console;
		if ((error = sysctl_int(oldp, oldlenp, newp, newlen, &ctlval)) ||
		    newp == NULL)
			return (error);
		if (ctlval != 1 && ctlval != 0)
			return (EINVAL);
		if (ctlval > db_console && securelevel > 1)
			return (EPERM);
		db_console = ctlval;
		return (0);
@


1.3.10.2
log
@Merge in -current
@
text
@d36 1
a36 1
#include <uvm/uvm_extern.h>
@


1.3.10.3
log
@Sync the SMP branch with 3.3
@
text
@d41 2
@


1.3.10.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: db_usrreq.c,v 1.3.10.3 2003/03/28 00:00:19 niklas Exp $	*/
d14 5
@


1.3.10.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a35 2
int	db_log;

a83 2
	case DBCTL_LOG:
		return (sysctl_int(oldp, oldlenp, newp, newlen, &db_log));
@


1.3.10.6
log
@Merge with the trunk
@
text
@d36 1
a36 1
int	db_log = 1;
@


1.2
log
@sysctl ddb.panic_ddb; felix@@mamba.pond.sub.org
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 4
a68 2
	case DBCTL_PANICDDB:
		return sysctl_int(oldp, oldlenp, newp, newlen, &db_panic_ddb);
@


1.1
log
@Added: sysctl access to the ddb variables.
Fixed: "netbsd" strings in sym table handling routines.
now it is usefull to change max_{width,line} according
to your real console geometry, just w/ sysctl program.
@
text
@d65 2
@
