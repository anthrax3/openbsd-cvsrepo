head	1.15;
access;
symbols
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.14
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.10
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.6
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.8
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.13.0.22
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.18
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.16
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.14
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.12
	OPENBSD_5_0:1.13.0.10
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.8
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.6
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.4
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.12.0.30
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.28
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.26
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.24
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.22
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.20
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.18
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.16
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.14
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.12
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.10
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.8
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.6
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.10.0.2
	UBC_BASE:1.10
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.15
date	2014.07.11.16.35.40;	author jsg;	state Exp;
branches;
next	1.14;
commitid	7NtJNW9udCOFtDNM;

1.14
date	2014.04.03.20.21.01;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.25.20.00.18;	author oga;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.01.27.18;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.19.08.58.07;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.28.19.28.14;	author art;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2001.11.05.22.14.54;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.09.15.58.29;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.07.16.08.40;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.09.05.34.38;	author smart;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.29.02.07.44;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.16.22.11.04;	author art;	state Exp;
branches;
next	1.3;

1.3
date	99.08.23.08.13.23;	author art;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	99.02.26.05.32.06;	author art;	state Exp;
branches;
next	1.1;

1.1
date	99.02.26.01.30.12;	author art;	state Exp;
branches;
next	;

1.3.4.1
date	2000.03.24.09.09.49;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.05.14.22.47.45;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2001.07.04.11.01.03;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2001.11.13.23.02.31;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2001.12.05.01.23.58;	author niklas;	state Exp;
branches;
next	1.3.4.6;

1.3.4.6
date	2002.03.06.02.17.14;	author niklas;	state Exp;
branches;
next	1.3.4.7;

1.3.4.7
date	2002.03.28.14.54.26;	author niklas;	state Exp;
branches;
next	;

1.10.2.1
date	2002.06.11.03.33.03;	author art;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2002.11.04.18.02.32;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Chuck Cranor rescinded clauses in his license
on the 2nd of February 2011 in NetBSD.

http://marc.info/?l=netbsd-source-changes&m=129658899212732&w=2
http://marc.info/?l=netbsd-source-changes&m=129659095515558&w=2
http://marc.info/?l=netbsd-source-changes&m=129659157916514&w=2
http://marc.info/?l=netbsd-source-changes&m=129665962324372&w=2
http://marc.info/?l=netbsd-source-changes&m=129666033625342&w=2
http://marc.info/?l=netbsd-source-changes&m=129666052825545&w=2
http://marc.info/?l=netbsd-source-changes&m=129666922906480&w=2
http://marc.info/?l=netbsd-source-changes&m=129667725518082&w=2
@
text
@/*	$OpenBSD: uvm_fault.h,v 1.14 2014/04/03 20:21:01 miod Exp $	*/
/*	$NetBSD: uvm_fault.h,v 1.14 2000/06/26 14:21:17 mrg Exp $	*/

/*
 * Copyright (c) 1997 Charles D. Cranor and Washington University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * from: Id: uvm_fault.h,v 1.1.2.2 1997/12/08 16:07:12 chuck Exp
 */

#ifndef _UVM_UVM_FAULT_H_
#define _UVM_UVM_FAULT_H_

/*
 * fault types
 */

#define VM_FAULT_INVALID ((vm_fault_t) 0x0)	/* invalid mapping */
#define VM_FAULT_PROTECT ((vm_fault_t) 0x1)	/* protection */
#define VM_FAULT_WIRE	 ((vm_fault_t) 0x2)	/* wire mapping */

/*
 * fault data structures
 */

/*
 * uvm_faultinfo: to load one of these fill in all orig_* fields and
 * then call uvmfault_lookup on it.
 */


struct uvm_faultinfo {
	vm_map_t orig_map;		/* IN: original map */
	vaddr_t orig_rvaddr;		/* IN: original rounded VA */
	vsize_t orig_size;		/* IN: original size of interest */
	vm_map_t map;			/* map (could be a submap) */
	unsigned int mapv;		/* map's version number */
	vm_map_entry_t entry;		/* map entry (from 'map') */
	vsize_t size;			/* size of interest */
};

#ifdef _KERNEL

/*
 * fault prototypes
 */

void		uvmfault_init(void);

boolean_t	uvmfault_lookup(struct uvm_faultinfo *, boolean_t);
boolean_t	uvmfault_relock(struct uvm_faultinfo *);
void		uvmfault_unlockall(struct uvm_faultinfo *, struct vm_amap *,
		    struct uvm_object *, struct vm_anon *);
int		uvmfault_anonget(struct uvm_faultinfo *, struct vm_amap *,
		    struct vm_anon *);

int		uvm_fault_wire(vm_map_t, vaddr_t, vaddr_t, vm_prot_t);
void		uvm_fault_unwire(vm_map_t, vaddr_t, vaddr_t);
void		uvm_fault_unwire_locked(vm_map_t, vaddr_t, vaddr_t);

#endif /* _KERNEL */

#endif /* _UVM_UVM_FAULT_H_ */
@


1.14
log
@uvm_fault() will try to fault neighbouring pages for the MADV_NORMAL case,
which is the default, unless the fault call is explicitly used to wire a given
page.

The amount of pages being faulted in was borrowed from the FreeBSD VM code,
about 15 years ago, at a time FreeBSD was only reliably running on 4KB page
size systems.

It is questionable whether faulting the same amount of pages, on platforms
where the page size is larger, is a good idea, as it may cause too much I/O.

Add an uvmfault_init() routine, which will compute the proper number of pages
at runtime, depending upon the actual page size, and attempting to fault in
the same overall size the previous code would have done with 4KB pages.

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_fault.h,v 1.13 2009/03/25 20:00:18 oga Exp $	*/
a4 1
 *
a15 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Charles D. Cranor and
 *      Washington University.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.13
log
@Move all of the pseudo-inline functions in uvm into C files.

By pseudo-inline, I mean that if a certain macro was defined, they would
be inlined. However, no architecture defines that, and none has for a
very very long time. Therefore mainly this just makes the code a damned
sight easier to read. Some k&r -> ansi declarations while I'm in there.

"just commit it" art@@. ok weingart@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_fault.h,v 1.12 2002/03/14 01:27:18 millert Exp $	*/
d75 1
@


1.12
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_fault.h,v 1.11 2001/12/19 08:58:07 art Exp $	*/
d76 10
a85 6
int uvmfault_anonget(struct uvm_faultinfo *, struct vm_amap *,
			  struct vm_anon *);

int uvm_fault_wire(vm_map_t, vaddr_t, vaddr_t, vm_prot_t);
void uvm_fault_unwire(vm_map_t, vaddr_t, vaddr_t);
void uvm_fault_unwire_locked(vm_map_t, vaddr_t, vaddr_t);
@


1.11
log
@UBC was a disaster. It worked very good when it worked, but on some
machines or some configurations or in some phase of the moon (we actually
don't know when or why) files disappeared. Since we've not been able to
track down the problem in two weeks intense debugging and we need -current
to be stable, back out everything to a state it had before UBC.

We apologise for the inconvenience.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_fault.h,v 1.9 2001/11/05 22:14:54 art Exp $	*/
d76 2
a77 2
int uvmfault_anonget __P((struct uvm_faultinfo *, struct vm_amap *,
			  struct vm_anon *));
d79 3
a81 3
int uvm_fault_wire __P((vm_map_t, vaddr_t, vaddr_t, vm_prot_t));
void uvm_fault_unwire __P((vm_map_t, vaddr_t, vaddr_t));
void uvm_fault_unwire_locked __P((vm_map_t, vaddr_t, vaddr_t));
@


1.10
log
@Sync in more uvm from NetBSD. Mostly just cosmetic stuff.
Contains also support for page coloring.
@
text
@d2 1
a2 1
/*	$NetBSD: uvm_fault.h,v 1.15 2001/06/02 18:09:26 chs Exp $	*/
d60 1
a60 1
	struct vm_map *orig_map;		/* IN: original map */
d63 1
a63 1
	struct vm_map *map;			/* map (could be a submap) */
d65 1
a65 1
	struct vm_map_entry *entry;		/* map entry (from 'map') */
d79 3
a81 3
int uvm_fault_wire __P((struct vm_map *, vaddr_t, vaddr_t, vm_prot_t));
void uvm_fault_unwire __P((struct vm_map *, vaddr_t, vaddr_t));
void uvm_fault_unwire_locked __P((struct vm_map *, vaddr_t, vaddr_t));
@


1.10.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_fault.h,v 1.10 2001/11/28 19:28:14 art Exp $	*/
d76 2
a77 2
int uvmfault_anonget(struct uvm_faultinfo *, struct vm_amap *,
			  struct vm_anon *);
d79 3
a81 3
int uvm_fault_wire(struct vm_map *, vaddr_t, vaddr_t, vm_prot_t);
void uvm_fault_unwire(struct vm_map *, vaddr_t, vaddr_t);
void uvm_fault_unwire_locked(struct vm_map *, vaddr_t, vaddr_t);
@


1.10.2.2
log
@Huge sync to NetBSD plus lots of bugfixes.
 - uvm is as in netbsd-current minus uvm_map forward merge.
 - various locking bugfixes in nfs.
 - make sure that all specops and fifoops are correct in all vnodeop vectors.
 - make the filesystem code more like filsystem code and less like vm code.
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_fault.h,v 1.10.2.1 2002/06/11 03:33:03 art Exp $	*/
/*	$NetBSD: uvm_fault.h,v 1.16 2001/12/31 22:34:39 chs Exp $	*/
a47 1
#define VM_FAULT_WIREMAX ((vm_fault_t) 0x3)	/* wire, allow maxprot */
d79 1
a79 1
int uvm_fault_wire(struct vm_map *, vaddr_t, vaddr_t, vm_fault_t, vm_prot_t);
@


1.9
log
@Minor sync to NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_fault.h,v 1.8 2001/05/09 15:58:29 art Exp $	*/
/*	$NetBSD: uvm_fault.h,v 1.14 2000/06/26 14:21:17 mrg Exp $	*/
d60 1
a60 1
	vm_map_t orig_map;		/* IN: original map */
d63 1
a63 1
	vm_map_t map;			/* map (could be a submap) */
d65 1
a65 1
	vm_map_entry_t entry;		/* map entry (from 'map') */
d79 3
a81 3
int uvm_fault_wire __P((vm_map_t, vaddr_t, vaddr_t, vm_prot_t));
void uvm_fault_unwire __P((vm_map_t, vaddr_t, vaddr_t));
void uvm_fault_unwire_locked __P((vm_map_t, vaddr_t, vaddr_t));
@


1.8
log
@update the NetBSD to the correct version
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_fault.h,v 1.7 2001/05/07 16:08:40 art Exp $	*/
/*	$NetBSD: uvm_fault.h,v 1.13 1999/06/21 17:25:11 thorpej Exp $	*/
d77 1
a77 7
													struct vm_anon *));
static boolean_t uvmfault_check_intrsafe __P((struct uvm_faultinfo *));
static boolean_t uvmfault_lookup __P((struct uvm_faultinfo *, boolean_t));
static boolean_t uvmfault_relock __P((struct uvm_faultinfo *));
static void uvmfault_unlockall __P((struct uvm_faultinfo *, struct vm_amap *,
			            struct uvm_object *, struct vm_anon *));
static void uvmfault_unlockmaps __P((struct uvm_faultinfo *, boolean_t));
@


1.7
log
@Few fixes from NetBSD.
 - make sure that vsunlock doesn't unwire mlocked memory.
 - fix locking in uvm_useracc.
 - Return the error uvm_fault_wire in uvm_vslock (will be used soon).
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_fault.h,v 1.6 2001/03/09 05:34:38 smart Exp $	*/
/*	$NetBSD: uvm_fault.h,v 1.12 1999/06/16 22:11:23 thorpej Exp $	*/
@


1.6
log
@Protect protypes, certain macros, and inlines from userland.  Checked userland
with a 'make build'.  From NetBSD.  art@@ ok
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_fault.h,v 1.5 2001/01/29 02:07:44 niklas Exp $	*/
/*	$NetBSD: uvm_fault.h,v 1.11 1999/06/04 23:38:41 thorpej Exp $	*/
d87 1
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_fault.h,v 1.11 1999/06/04 23:38:41 thorpej Exp $	*/
d69 2
d87 2
@


1.4
log
@Bring in some new UVM code from NetBSD (not current).

 - Introduce a new type of map that are interrupt safe and never allow faults
   in them. mb_map and kmem_map are made intrsafe.
 - Add "access protection" to uvm_vslock (to be passed down to uvm_fault and
   later to pmap_enter).
 - madvise(2) now works.
 - various cleanups.
@
text
@d1 1
@


1.3
log
@sync with NetBSD from 1999.05.24 (there is a reason for this date)
 Mostly cleanups, but also a few improvements to pagedaemon for better
 handling of low memory and/or low swap conditions.
@
text
@d1 1
a1 1
/*	$NetBSD: uvm_fault.h,v 1.7 1998/10/11 23:07:42 chuck Exp $	*/
d75 1
d82 2
a83 2
int uvm_fault_wire __P((vm_map_t, vaddr_t, vaddr_t));
void uvm_fault_unwire __P((struct pmap *, vaddr_t, vaddr_t));
@


1.3.4.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$NetBSD: uvm_fault.h,v 1.11 1999/06/04 23:38:41 thorpej Exp $	*/
a74 1
static boolean_t uvmfault_check_intrsafe __P((struct uvm_faultinfo *));
d81 2
a82 2
int uvm_fault_wire __P((vm_map_t, vaddr_t, vaddr_t, vm_prot_t));
void uvm_fault_unwire __P((vm_map_t, vaddr_t, vaddr_t));
@


1.3.4.2
log
@merge in approximately 2.9 into SMP branch
@
text
@a0 1
/*	$OpenBSD: uvm_fault.h,v 1.6 2001/03/09 05:34:38 smart Exp $	*/
a67 2
#ifdef _KERNEL

a83 2

#endif /* _KERNEL */
@


1.3.4.3
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: uvm_fault.h,v 1.13 1999/06/21 17:25:11 thorpej Exp $	*/
a86 1
void uvm_fault_unwire_locked __P((vm_map_t, vaddr_t, vaddr_t));
@


1.3.4.4
log
@merge in -current
@
text
@d2 1
a2 1
/*	$NetBSD: uvm_fault.h,v 1.14 2000/06/26 14:21:17 mrg Exp $	*/
d77 7
a83 1
			  struct vm_anon *));
@


1.3.4.5
log
@Merge in -current
@
text
@d2 1
a2 1
/*	$NetBSD: uvm_fault.h,v 1.15 2001/06/02 18:09:26 chs Exp $	*/
d60 1
a60 1
	struct vm_map *orig_map;		/* IN: original map */
d63 1
a63 1
	struct vm_map *map;			/* map (could be a submap) */
d65 1
a65 1
	struct vm_map_entry *entry;		/* map entry (from 'map') */
d79 3
a81 3
int uvm_fault_wire __P((struct vm_map *, vaddr_t, vaddr_t, vm_prot_t));
void uvm_fault_unwire __P((struct vm_map *, vaddr_t, vaddr_t));
void uvm_fault_unwire_locked __P((struct vm_map *, vaddr_t, vaddr_t));
@


1.3.4.6
log
@Merge in trunk
@
text
@d2 1
a2 1
/*	$NetBSD: uvm_fault.h,v 1.14 2000/06/26 14:21:17 mrg Exp $	*/
d60 1
a60 1
	vm_map_t orig_map;		/* IN: original map */
d63 1
a63 1
	vm_map_t map;			/* map (could be a submap) */
d65 1
a65 1
	vm_map_entry_t entry;		/* map entry (from 'map') */
d79 3
a81 3
int uvm_fault_wire __P((vm_map_t, vaddr_t, vaddr_t, vm_prot_t));
void uvm_fault_unwire __P((vm_map_t, vaddr_t, vaddr_t));
void uvm_fault_unwire_locked __P((vm_map_t, vaddr_t, vaddr_t));
@


1.3.4.7
log
@Merge in -current from roughly a week ago
@
text
@d76 2
a77 2
int uvmfault_anonget(struct uvm_faultinfo *, struct vm_amap *,
			  struct vm_anon *);
d79 3
a81 3
int uvm_fault_wire(vm_map_t, vaddr_t, vaddr_t, vm_prot_t);
void uvm_fault_unwire(vm_map_t, vaddr_t, vaddr_t);
void uvm_fault_unwire_locked(vm_map_t, vaddr_t, vaddr_t);
@


1.2
log
@add OpenBSD tags
@
text
@a0 1
/*	$OpenBSD$	*/
a2 4
/*
 * XXXCDC: "ROUGH DRAFT" QUALITY UVM PRE-RELEASE FILE!   
 *	   >>>USE AT YOUR OWN RISK, WORK IS NOT FINISHED<<<
 */
@


1.1
log
@Import of uvm from NetBSD. Some local changes, some code disabled
@
text
@d1 1
@

