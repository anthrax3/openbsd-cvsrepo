head	1.14;
access;
symbols
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.8
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.4
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.52
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.48
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.46
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.44
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.42
	OPENBSD_5_0:1.12.0.40
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.38
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.36
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.32
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.34
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.30
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.28
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.26
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.24
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.22
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.20
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.18
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.16
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.14
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.12
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.10
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.8
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.6
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.10.0.2
	UBC_BASE:1.10
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.14
date	2014.12.16.18.30.04;	author tedu;	state Exp;
branches;
next	1.13;
commitid	P6Av4XGqOi3rFasL;

1.13
date	2014.06.29.22.56.31;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	OVNW1RCVXEAK9NID;

1.12
date	2002.03.14.01.27.19;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.19.08.58.07;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.10.02.19.34;	author art;	state dead;
branches;
next	1.9;

1.9
date	2001.11.27.05.27.12;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.06.14.03.05;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.22.03.05.57;	author smart;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.09.05.34.38;	author smart;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.29.02.07.52;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.15.15.50.22;	author art;	state Exp;
branches;
next	1.3;

1.3
date	99.08.23.08.13.25;	author art;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	99.02.26.05.32.08;	author art;	state Exp;
branches;
next	1.1;

1.1
date	99.02.26.01.30.18;	author art;	state Exp;
branches;
next	;

1.3.4.1
date	2000.03.24.09.09.52;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.05.14.22.47.49;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2001.10.31.03.32.14;	author nate;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2001.12.05.01.23.58;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2002.03.06.02.17.14;	author niklas;	state Exp;
branches;
next	1.3.4.6;

1.3.4.6
date	2002.03.28.14.54.27;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.14
log
@primary change: move uvm_vnode out of vnode, keeping only a pointer.
objective: vnode.h doesn't include uvm_extern.h anymore.
followup changes: include uvm_extern.h or lock.h where necessary.
ok and help from deraadt
@
text
@/*	$OpenBSD: uvm_vnode.h,v 1.13 2014/06/29 22:56:31 deraadt Exp $	*/
/*	$NetBSD: uvm_vnode.h,v 1.9 2000/03/26 20:54:48 kleink Exp $	*/

/*
 *
 * Copyright (c) 1997 Charles D. Cranor and Washington University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Charles D. Cranor and
 *      Washington University.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * from: Id: uvm_vnode.h,v 1.1.2.4 1997/10/03 21:18:24 chuck Exp
 */

#ifndef _UVM_UVM_VNODE_H_
#define _UVM_UVM_VNODE_H_

/*
 * uvm_vnode.h
 *
 * vnode handle into the VM system.
 */

/*
 * the uvm_vnode structure.
 */

struct vnode;

struct uvm_vnode {
	struct uvm_object u_obj;	/* the actual VM object */
	struct vnode *u_vnode;		/* pointer back to vnode */
	int u_flags;			/* flags */
	int u_nio;			/* number of running I/O requests */
	voff_t u_size;			/* size of object */

	/* the following entry is locked by uvn_wl_lock */
	LIST_ENTRY(uvm_vnode) u_wlist;	/* list of writeable vnode objects */

	/* the following entry is locked by uvn_sync_lock */
	SIMPLEQ_ENTRY(uvm_vnode) u_syncq; /* vnode objects due for a "sync" */
};

/*
 * u_flags values
 */
#define UVM_VNODE_VALID		0x001	/* we are attached to the vnode */
#define UVM_VNODE_CANPERSIST	0x002	/* we can persist after ref == 0 */
#define UVM_VNODE_ALOCK		0x004	/* uvn_attach is locked out */
#define UVM_VNODE_DYING		0x008	/* final detach/terminate in 
					   progress */
#define UVM_VNODE_RELKILL	0x010	/* uvn should be killed by releasepg
					   when final i/o is done */
#define UVM_VNODE_WANTED	0x020	/* someone is waiting for alock,
					   dying, or relkill to clear */
#define UVM_VNODE_VNISLOCKED	0x040	/* underlying vnode struct is locked
					   (valid when DYING is true) */
#define UVM_VNODE_IOSYNC	0x080	/* I/O sync in progress ... setter
					   sleeps on &uvn->u_nio */
#define UVM_VNODE_IOSYNCWANTED	0x100	/* a process is waiting for the
					   i/o sync to clear so it can do
					   i/o */
#define UVM_VNODE_WRITEABLE	0x200	/* uvn has pages that are writeable */

/*
 * UVM_VNODE_BLOCKED: any condition that should new processes from
 * touching the vnode [set WANTED and sleep to wait for it to clear]
 */
#define UVM_VNODE_BLOCKED (UVM_VNODE_ALOCK|UVM_VNODE_DYING|UVM_VNODE_RELKILL)

#endif /* _UVM_UVM_VNODE_H_ */
@


1.13
log
@delete a #ifdef _KERNEL chunk protecting userland from an #if 0 chunk
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_vnode.h,v 1.12 2002/03/14 01:27:19 millert Exp $	*/
d48 1
a48 3
 * the uvm_vnode structure.   put at the top of the vnode data structure.
 * this allows:
 *   (struct vnode *) == (struct uvm_vnode *) == (struct uvm_object *)
d51 2
d55 1
@


1.12
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_vnode.h,v 1.11 2001/12/19 08:58:07 art Exp $	*/
a91 17

#ifdef _KERNEL

/*
 * prototypes
 */

#if 0
/*
 * moved uvn_attach to uvm_extern.h because uvm_vnode.h is needed to
 * include sys/vnode.h, and files that include sys/vnode.h don't know
 * what a vm_prot_t is.
 */
struct uvm_object  *uvn_attach(void *, vm_prot_t);
#endif

#endif /* _KERNEL */
@


1.11
log
@UBC was a disaster. It worked very good when it worked, but on some
machines or some configurations or in some phase of the moon (we actually
don't know when or why) files disappeared. Since we've not been able to
track down the problem in two weeks intense debugging and we need -current
to be stable, back out everything to a state it had before UBC.

We apologise for the inconvenience.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_vnode.h,v 1.8 2001/08/06 14:03:05 art Exp $	*/
d105 1
a105 1
struct uvm_object  *uvn_attach __P((void *, vm_prot_t));
@


1.10
log
@Merge in struct uvm_vnode into struct vnode.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_vnode.h,v 1.9 2001/11/27 05:27:12 art Exp $	*/
d58 6
d65 44
@


1.9
log
@Merge in the unified buffer cache code as found in NetBSD 2001/03/10. The
code is written mostly by Chuck Silvers <chuq@@chuq.com>/<chs@@netbsd.org>.

Tested for the past few weeks by many developers, should be in a pretty stable
state, but will require optimizations and additional cleanups.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_vnode.h,v 1.8 2001/08/06 14:03:05 art Exp $	*/
@


1.8
log
@Add a new type voff_t (right now it's typedefed as off_t) used for offsets
into objects.

Gives the possibilty to mmap beyond the size of vaddr_t.

From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_vnode.h,v 1.7 2001/03/22 03:05:57 smart Exp $	*/
a57 6

	/* the following entry is locked by uvn_wl_lock */
	LIST_ENTRY(uvm_vnode) u_wlist;	/* list of writeable vnode objects */

	/* the following entry is locked by uvn_sync_lock */
	SIMPLEQ_ENTRY(uvm_vnode) u_syncq; /* vnode objects due for a "sync" */
a58 44

/*
 * u_flags values
 */
#define UVM_VNODE_VALID		0x001	/* we are attached to the vnode */
#define UVM_VNODE_CANPERSIST	0x002	/* we can persist after ref == 0 */
#define UVM_VNODE_ALOCK		0x004	/* uvn_attach is locked out */
#define UVM_VNODE_DYING		0x008	/* final detach/terminate in 
					   progress */
#define UVM_VNODE_RELKILL	0x010	/* uvn should be killed by releasepg
					   when final i/o is done */
#define UVM_VNODE_WANTED	0x020	/* someone is waiting for alock,
					   dying, or relkill to clear */
#define UVM_VNODE_VNISLOCKED	0x040	/* underlying vnode struct is locked
					   (valid when DYING is true) */
#define UVM_VNODE_IOSYNC	0x080	/* I/O sync in progress ... setter
					   sleeps on &uvn->u_nio */
#define UVM_VNODE_IOSYNCWANTED	0x100	/* a process is waiting for the
					   i/o sync to clear so it can do
					   i/o */
#define UVM_VNODE_WRITEABLE	0x200	/* uvn has pages that are writeable */

/*
 * UVM_VNODE_BLOCKED: any condition that should new processes from
 * touching the vnode [set WANTED and sleep to wait for it to clear]
 */
#define UVM_VNODE_BLOCKED (UVM_VNODE_ALOCK|UVM_VNODE_DYING|UVM_VNODE_RELKILL)

#ifdef _KERNEL

/*
 * prototypes
 */

#if 0
/*
 * moved uvn_attach to uvm_extern.h because uvm_vnode.h is needed to
 * include sys/vnode.h, and files that include sys/vnode.h don't know
 * what a vm_prot_t is.
 */
struct uvm_object  *uvn_attach __P((void *, vm_prot_t));
#endif

#endif /* _KERNEL */
@


1.7
log
@Sync style, typo, and comments a little closer to NetBSD.  art@@ ok
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_vnode.h,v 1.6 2001/03/09 05:34:38 smart Exp $	*/
/*	$NetBSD: uvm_vnode.h,v 1.8 1999/06/21 17:25:12 thorpej Exp $	*/
d57 1
a57 1
	vsize_t u_size;			/* size of object */
@


1.6
log
@Protect protypes, certain macros, and inlines from userland.  Checked userland
with a 'make build'.  From NetBSD.  art@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_vnode.h,v 1.5 2001/01/29 02:07:52 niklas Exp $	*/
d57 1
a57 1
	vsize_t u_size;		/* size of object */
@


1.5
log
@$OpenBSD$
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_vnode.h,v 1.7 1999/03/25 18:48:56 mrg Exp $	*/
/*	$NetBSD: uvm_vnode.h,v 1.7 1999/03/25 18:48:56 mrg Exp $	*/
d93 1
d107 2
@


1.4
log
@Fix the NetBSD id strings.
@
text
@d1 1
@


1.3
log
@sync with NetBSD from 1999.05.24 (there is a reason for this date)
 Mostly cleanups, but also a few improvements to pagedaemon for better
 handling of low memory and/or low swap conditions.
@
text
@d1 1
a1 1
/*	$NetBSD: uvm_vnode.h,v 1.6 1998/08/13 02:11:04 eeh Exp $	*/
@


1.3.4.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$NetBSD: uvm_vnode.h,v 1.7 1999/03/25 18:48:56 mrg Exp $	*/
@


1.3.4.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 2
/*	$OpenBSD: uvm_vnode.h,v 1.7 2001/03/22 03:05:57 smart Exp $	*/
/*	$NetBSD: uvm_vnode.h,v 1.8 1999/06/21 17:25:12 thorpej Exp $	*/
d56 1
a56 1
	vsize_t u_size;			/* size of object */
a91 1
#ifdef _KERNEL
a104 2

#endif /* _KERNEL */
@


1.3.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: uvm_vnode.h,v 1.9 2000/03/26 20:54:48 kleink Exp $	*/
d57 1
a57 1
	voff_t u_size;			/* size of object */
@


1.3.4.4
log
@Merge in -current
@
text
@d58 6
d65 44
@


1.3.4.5
log
@Merge in trunk
@
text
@a57 6

	/* the following entry is locked by uvn_wl_lock */
	LIST_ENTRY(uvm_vnode) u_wlist;	/* list of writeable vnode objects */

	/* the following entry is locked by uvn_sync_lock */
	SIMPLEQ_ENTRY(uvm_vnode) u_syncq; /* vnode objects due for a "sync" */
a58 44

/*
 * u_flags values
 */
#define UVM_VNODE_VALID		0x001	/* we are attached to the vnode */
#define UVM_VNODE_CANPERSIST	0x002	/* we can persist after ref == 0 */
#define UVM_VNODE_ALOCK		0x004	/* uvn_attach is locked out */
#define UVM_VNODE_DYING		0x008	/* final detach/terminate in 
					   progress */
#define UVM_VNODE_RELKILL	0x010	/* uvn should be killed by releasepg
					   when final i/o is done */
#define UVM_VNODE_WANTED	0x020	/* someone is waiting for alock,
					   dying, or relkill to clear */
#define UVM_VNODE_VNISLOCKED	0x040	/* underlying vnode struct is locked
					   (valid when DYING is true) */
#define UVM_VNODE_IOSYNC	0x080	/* I/O sync in progress ... setter
					   sleeps on &uvn->u_nio */
#define UVM_VNODE_IOSYNCWANTED	0x100	/* a process is waiting for the
					   i/o sync to clear so it can do
					   i/o */
#define UVM_VNODE_WRITEABLE	0x200	/* uvn has pages that are writeable */

/*
 * UVM_VNODE_BLOCKED: any condition that should new processes from
 * touching the vnode [set WANTED and sleep to wait for it to clear]
 */
#define UVM_VNODE_BLOCKED (UVM_VNODE_ALOCK|UVM_VNODE_DYING|UVM_VNODE_RELKILL)

#ifdef _KERNEL

/*
 * prototypes
 */

#if 0
/*
 * moved uvn_attach to uvm_extern.h because uvm_vnode.h is needed to
 * include sys/vnode.h, and files that include sys/vnode.h don't know
 * what a vm_prot_t is.
 */
struct uvm_object  *uvn_attach __P((void *, vm_prot_t));
#endif

#endif /* _KERNEL */
@


1.3.4.6
log
@Merge in -current from roughly a week ago
@
text
@d105 1
a105 1
struct uvm_object  *uvn_attach(void *, vm_prot_t);
@


1.2
log
@add OpenBSD tags
@
text
@a0 1
/*	$OpenBSD$	*/
a2 4
/*
 * XXXCDC: "ROUGH DRAFT" QUALITY UVM PRE-RELEASE FILE!   
 *	   >>>USE AT YOUR OWN RISK, WORK IS NOT FINISHED<<<
 */
@


1.1
log
@Import of uvm from NetBSD. Some local changes, some code disabled
@
text
@d1 1
@

