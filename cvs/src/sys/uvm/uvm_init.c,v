head	1.39;
access;
symbols
	OPENBSD_6_1_BASE:1.39
	OPENBSD_6_0:1.39.0.6
	OPENBSD_6_0_BASE:1.39
	OPENBSD_5_9:1.39.0.2
	OPENBSD_5_9_BASE:1.39
	OPENBSD_5_8:1.39.0.4
	OPENBSD_5_8_BASE:1.39
	OPENBSD_5_7:1.38.0.2
	OPENBSD_5_7_BASE:1.38
	OPENBSD_5_6:1.33.0.4
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.30.0.10
	OPENBSD_5_5_BASE:1.30
	OPENBSD_5_4:1.30.0.6
	OPENBSD_5_4_BASE:1.30
	OPENBSD_5_3:1.30.0.4
	OPENBSD_5_3_BASE:1.30
	OPENBSD_5_2:1.30.0.2
	OPENBSD_5_2_BASE:1.30
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.8
	OPENBSD_5_0:1.28.0.6
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.28.0.4
	OPENBSD_4_9_BASE:1.28
	OPENBSD_4_8:1.28.0.2
	OPENBSD_4_8_BASE:1.28
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.24.0.4
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.19.0.2
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.16.0.6
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.4
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.11.0.8
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.6
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.10.0.12
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.10
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.8
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.6
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.4
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.10.0.2
	UBC_BASE:1.10
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.39
date	2015.03.14.03.38.53;	author jsg;	state Exp;
branches;
next	1.38;
commitid	p4LJxGKbi0BU2cG6;

1.38
date	2015.02.07.08.21.24;	author miod;	state Exp;
branches;
next	1.37;
commitid	3WN6O42yLCDNeEYy;

1.37
date	2014.12.17.06.58.11;	author guenther;	state Exp;
branches;
next	1.36;
commitid	DImukoCWyTxwdbuh;

1.36
date	2014.12.15.02.24.23;	author guenther;	state Exp;
branches;
next	1.35;
commitid	ZxaujiOM0aYQRjFY;

1.35
date	2014.11.16.12.31.00;	author deraadt;	state Exp;
branches;
next	1.34;
commitid	yv0ECmCdICvq576h;

1.34
date	2014.09.14.14.17.27;	author jsg;	state Exp;
branches;
next	1.33;
commitid	uzzBR7hz9ncd4O6G;

1.33
date	2014.07.11.16.35.40;	author jsg;	state Exp;
branches;
next	1.32;
commitid	7NtJNW9udCOFtDNM;

1.32
date	2014.04.13.23.14.15;	author tedu;	state Exp;
branches;
next	1.31;

1.31
date	2014.04.03.20.21.01;	author miod;	state Exp;
branches;
next	1.30;

1.30
date	2012.03.15.17.52.28;	author ariane;	state Exp;
branches;
next	1.29;

1.29
date	2012.03.09.13.01.29;	author ariane;	state Exp;
branches;
next	1.28;

1.28
date	2010.08.07.03.50.02;	author krw;	state Exp;
branches;
next	1.27;

1.27
date	2010.07.13.16.49.16;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2010.07.13.16.47.03;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2009.08.06.15.28.14;	author oga;	state Exp;
branches;
next	1.24;

1.24
date	2009.06.16.23.54.58;	author oga;	state Exp;
branches;
next	1.23;

1.23
date	2009.06.16.00.11.29;	author oga;	state Exp;
branches;
next	1.22;

1.22
date	2009.06.02.23.00.19;	author oga;	state Exp;
branches;
next	1.21;

1.21
date	2009.05.02.12.54.42;	author oga;	state Exp;
branches;
next	1.20;

1.20
date	2009.03.20.15.19.04;	author oga;	state Exp;
branches;
next	1.19;

1.19
date	2008.11.24.19.19.46;	author kurt;	state Exp;
branches;
next	1.18;

1.18
date	2008.10.18.12.11.30;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2008.09.29.12.34.18;	author art;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.18.21.51.15;	author pedro;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.09.11.23.35;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.12.21.47.46;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2006.07.13.22.51.26;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.21.16.20.05;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.19.22.52.33;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.06.01.35.04;	author art;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2001.11.05.22.14.54;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.19.20.50.59;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.11.10.57.22;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.29.02.07.44;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.07.20.15.28;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.15.15.50.20;	author art;	state Exp;
branches;
next	1.3;

1.3
date	99.08.23.08.13.23;	author art;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	99.02.26.05.32.07;	author art;	state Exp;
branches;
next	1.1;

1.1
date	99.02.26.01.30.13;	author art;	state Exp;
branches;
next	;

1.3.4.1
date	2000.03.24.09.09.49;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.05.14.22.47.45;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2001.10.31.03.32.14;	author nate;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2001.11.13.23.02.31;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2004.06.05.23.13.12;	author niklas;	state Exp;
branches;
next	;

1.10.2.1
date	2002.02.02.03.28.26;	author art;	state Exp;
branches;
next	;


desc
@@


1.39
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: uvm_init.c,v 1.38 2015/02/07 08:21:24 miod Exp $	*/
/*	$NetBSD: uvm_init.c,v 1.14 2000/06/27 17:29:23 mrg Exp $	*/

/*
 * Copyright (c) 1997 Charles D. Cranor and Washington University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * from: Id: uvm_init.c,v 1.1.2.3 1998/02/06 05:15:27 chs Exp
 */

/*
 * uvm_init.c: init the vm system.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/filedesc.h>
#include <sys/resourcevar.h>
#include <sys/mman.h>
#include <sys/malloc.h>
#include <sys/vnode.h>
#include <sys/pool.h>

#include <uvm/uvm.h>
#include <uvm/uvm_addr.h>

/*
 * struct uvm: we store all global vars in this structure to make them
 * easier to spot...
 */

struct uvm uvm;		/* decl */
struct uvmexp uvmexp;	/* decl */

#if defined(VM_MIN_KERNEL_ADDRESS)
vaddr_t vm_min_kernel_address = VM_MIN_KERNEL_ADDRESS;
#else
vaddr_t vm_min_kernel_address;
#endif

/*
 * local prototypes
 */

/*
 * uvm_init: init the VM system.   called from kern/init_main.c.
 */
void
uvm_init(void)
{
	vaddr_t kvm_start, kvm_end;

	/* step 0: ensure that the hardware set the page size */
	if (uvmexp.pagesize == 0) {
		panic("uvm_init: page size not set");
	}

	/* step 1: set up stats. */
	averunnable.fscale = FSCALE;

	/*
	 * step 2: init the page sub-system.  this includes allocating the
	 * vm_page structures, and setting up all the page queues (and
	 * locks).  available memory will be put in the "free" queue.
	 * kvm_start and kvm_end will be set to the area of kernel virtual
	 * memory which is available for general use.
	 */
	uvm_page_init(&kvm_start, &kvm_end);

	/*
	 * step 3: init the map sub-system.  allocates the static pool of
	 * vm_map_entry structures that are used for "special" kernel maps
	 * (e.g. kernel_map, kmem_map, etc...).
	 */
	uvm_map_init();

	/*
	 * step 4: setup the kernel's virtual memory data structures.  this
	 * includes setting up the kernel_map/kernel_object and the kmem_map/
	 * kmem_object.
	 */

	uvm_km_init(vm_min_kernel_address, kvm_start, kvm_end);

	/*
	 * step 4.5: init (tune) the fault recovery code.
	 */
	uvmfault_init();

	/*
	 * step 5: init the pmap module.   the pmap module is free to allocate
	 * memory for its private use (e.g. pvlists).
	 */
	pmap_init();

	/*
	 * step 6: init the kernel memory allocator.   after this call the
	 * kernel memory allocator (malloc) can be used.
	 */
	kmeminit();

	/*
	 * step 6.5: init the dma allocator, which is backed by pools.
	 */
	dma_alloc_init();

	/*
	 * step 7: init all pagers and the pager_map.
	 */
	uvm_pager_init();

	/*
	 * step 8: init anonymous memory system
	 */
	amap_init();

	/*
	 * step 9: init uvm_km_page allocator memory.
	 */
	uvm_km_page_init();

	/*
	 * the VM system is now up!  now that malloc is up we can
	 * enable paging of kernel objects.
	 */
	uao_create(VM_KERNEL_SPACE_SIZE, UAO_FLAG_KERNSWAP);

	/*
	 * reserve some unmapped space for malloc/pool use after free usage
	 */
#ifdef DEADBEEF0
	kvm_start = trunc_page(DEADBEEF0) - PAGE_SIZE;
	if (uvm_map(kernel_map, &kvm_start, 3 * PAGE_SIZE,
	    NULL, UVM_UNKNOWN_OFFSET, 0, UVM_MAPFLAG(PROT_NONE,
	    PROT_NONE, MAP_INHERIT_NONE, MADV_RANDOM, UVM_FLAG_FIXED)))
		panic("uvm_init: cannot reserve dead beef @@0x%x", DEADBEEF0);
#endif
#ifdef DEADBEEF1
	kvm_start = trunc_page(DEADBEEF1) - PAGE_SIZE;
	if (uvm_map(kernel_map, &kvm_start, 3 * PAGE_SIZE,
	    NULL, UVM_UNKNOWN_OFFSET, 0, UVM_MAPFLAG(PROT_NONE,
	    PROT_NONE, MAP_INHERIT_NONE, MADV_RANDOM, UVM_FLAG_FIXED)))
		panic("uvm_init: cannot reserve dead beef @@0x%x", DEADBEEF1);
#endif
	/*
	 * init anonymous memory systems
	 */
	uvm_anon_init();

#ifndef SMALL_KERNEL
	/*
	 * Switch kernel and kmem_map over to a best-fit allocator,
	 * instead of walking the tree.
	 */
	uvm_map_set_uaddr(kernel_map, &kernel_map->uaddr_any[3],
	    uaddr_bestfit_create(vm_map_min(kernel_map),
	    vm_map_max(kernel_map)));
	uvm_map_set_uaddr(kmem_map, &kmem_map->uaddr_any[3],
	    uaddr_bestfit_create(vm_map_min(kmem_map),
	    vm_map_max(kmem_map)));
#endif /* !SMALL_KERNEL */
}
@


1.38
log
@Introduce VM_KERNEL_SPACE_SIZE as a replacement for
(VM_MAX_KERNEL_ADDRESS - VM_MIN_KERNEL_ADDRESS). This will allow these to no
longer be constants in the future.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.37 2014/12/17 06:58:11 guenther Exp $	*/
a36 1
#include <sys/file.h>
@


1.37
log
@Prefer MADV_* over POSIX_MADV_* in kernel for consistency: the latter
doesn't have all the values and therefore can't be used everywhere.

ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.36 2014/12/15 02:24:23 guenther Exp $	*/
d56 6
d104 1
a104 1
	uvm_km_init(kvm_start, kvm_end);
d147 1
a147 2
	uao_create(VM_MAX_KERNEL_ADDRESS - VM_MIN_KERNEL_ADDRESS,
	    UAO_FLAG_KERNSWAP);
@


1.36
log
@Use MAP_INHERIT_* for the 'inh' argument to the UMV_MAPFLAG() macro,
eliminating the must-be-kept-in-sync UVM_INH_* macros

ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.35 2014/11/16 12:31:00 deraadt Exp $	*/
d151 1
a151 1
	    PROT_NONE, MAP_INHERIT_NONE, POSIX_MADV_RANDOM, UVM_FLAG_FIXED)))
d158 1
a158 1
	    PROT_NONE, MAP_INHERIT_NONE, POSIX_MADV_RANDOM, UVM_FLAG_FIXED)))
@


1.35
log
@Replace a plethora of historical protection options with just
PROT_NONE, PROT_READ, PROT_WRITE, and PROT_EXEC from mman.h.
PROT_MASK is introduced as the one true way of extracting those bits.
Remove UVM_ADV_* wrapper, using the standard names.
ok doug guenther kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.34 2014/09/14 14:17:27 jsg Exp $	*/
d151 1
a151 1
	    PROT_NONE, UVM_INH_NONE, POSIX_MADV_RANDOM, UVM_FLAG_FIXED)))
d158 1
a158 1
	    PROT_NONE, UVM_INH_NONE, POSIX_MADV_RANDOM, UVM_FLAG_FIXED)))
@


1.34
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.33 2014/07/11 16:35:40 jsg Exp $	*/
d150 2
a151 2
	    NULL, UVM_UNKNOWN_OFFSET, 0, UVM_MAPFLAG(UVM_PROT_NONE,
	    UVM_PROT_NONE, UVM_INH_NONE, UVM_ADV_RANDOM, UVM_FLAG_FIXED)))
d157 2
a158 2
	    NULL, UVM_UNKNOWN_OFFSET, 0, UVM_MAPFLAG(UVM_PROT_NONE,
	    UVM_PROT_NONE, UVM_INH_NONE, UVM_ADV_RANDOM, UVM_FLAG_FIXED)))
@


1.33
log
@Chuck Cranor rescinded clauses in his license
on the 2nd of February 2011 in NetBSD.

http://marc.info/?l=netbsd-source-changes&m=129658899212732&w=2
http://marc.info/?l=netbsd-source-changes&m=129659095515558&w=2
http://marc.info/?l=netbsd-source-changes&m=129659157916514&w=2
http://marc.info/?l=netbsd-source-changes&m=129665962324372&w=2
http://marc.info/?l=netbsd-source-changes&m=129666033625342&w=2
http://marc.info/?l=netbsd-source-changes&m=129666052825545&w=2
http://marc.info/?l=netbsd-source-changes&m=129666922906480&w=2
http://marc.info/?l=netbsd-source-changes&m=129667725518082&w=2
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.32 2014/04/13 23:14:15 tedu Exp $	*/
a40 1
#include <sys/proc.h>
@


1.32
log
@compress code by turning four line comments into one line comments.
emphatic ok usual suspects, grudging ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.31 2014/04/03 20:21:01 miod Exp $	*/
a4 1
 *
a15 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Charles D. Cranor and
 *      Washington University.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.31
log
@uvm_fault() will try to fault neighbouring pages for the MADV_NORMAL case,
which is the default, unless the fault call is explicitly used to wire a given
page.

The amount of pages being faulted in was borrowed from the FreeBSD VM code,
about 15 years ago, at a time FreeBSD was only reliably running on 4KB page
size systems.

It is questionable whether faulting the same amount of pages, on platforms
where the page size is larger, is a good idea, as it may cause too much I/O.

Add an uvmfault_init() routine, which will compute the proper number of pages
at runtime, depending upon the actual page size, and attempting to fault in
the same overall size the previous code would have done with 4KB pages.

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.30 2012/03/15 17:52:28 ariane Exp $	*/
a70 1

d76 1
a76 4
	/*
	 * step 0: ensure that the hardware set the page size
	 */

d81 1
a81 3
	/*
	 * step 1: set up stats.
	 */
a90 1

a97 1

a110 1

a116 1

a122 1

a132 1

d138 1
a138 2

	amap_init();		/* init amap module */
a148 1

@


1.30
log
@Reduce installmedia pressure from new vmmap.

Has less special allocators on install media (where they aren't required
anyway).
Bonus: makes the vmmap initialization code easier to read.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.29 2012/03/09 13:01:29 ariane Exp $	*/
d115 6
@


1.29
log
@New vmmap implementation.

no oks (it is really a pain to review properly)
extensively tested, I'm confident it'll be stable
'now is the time' from several icb inhabitants

Diff provides:
- ability to specify different allocators for different regions/maps
- a simpler implementation of the current allocator
- currently in compatibility mode: it will generate similar addresses
  as the old allocator
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.28 2010/08/07 03:50:02 krw Exp $	*/
d182 1
d193 1
@


1.28
log
@No "\n" needed at the end of panic() strings.

Bogus chunks pointed out by matthew@@ and miod@@. No cookies for
marco@@ and jasper@@.

ok deraadt@@ miod@@ matthew@@ jasper@@ macro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.27 2010/07/13 16:49:16 deraadt Exp $	*/
d54 1
d181 11
@


1.27
log
@need pool.h to initialize the dma allocator
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.26 2010/07/13 16:47:03 deraadt Exp $	*/
d167 1
a167 1
		panic("uvm_init: cannot reserve dead beef @@0x%x\n", DEADBEEF0);
d174 1
a174 1
		panic("uvm_init: cannot reserve dead beef @@0x%x\n", DEADBEEF1);
@


1.26
log
@dma_alloc() and dma_free().  This is a thin shim on top of a bag of
pools, sized by powers of 2, which are constrained to dma memory.
ok matthew tedu thib
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.25 2009/08/06 15:28:14 oga Exp $	*/
d51 1
@


1.25
log
@reintroduce the uvm_tree commit.

Now instead of the global object hashtable, we have a per object tree.

Testing shows no performance difference and a slight code shrink. OTOH when
locking is more fine grained this should be faster due to lock contention on
uvm.hashlock.

ok thib@@, art@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.24 2009/06/16 23:54:58 oga Exp $	*/
d127 5
@


1.24
log
@date based reversion of uvm to the 4th May.

We still have no idea why this stops the crashes. but it does.

a machine forced to 64mb of ram cycled 10GB through swap with this diff
and is still running as I type this. Other tests by ariane@@ and thib@@
also seem to show that it's alright.

ok deraadt@@, thib@@, ariane@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.21 2009/05/02 12:54:42 oga Exp $	*/
d146 2
a147 3
	 * the VM system is now up!  now that malloc is up we can resize the
	 * <obj,off> => <page> hash table for general use and enable paging
	 * of kernel objects.
a149 1
	uvm_page_rehash();
@


1.23
log
@Backout all changes to uvm after pmemrange (which will be backed out
separately).

a change at or just before the hackathon has either exposed or added a
very very nasty memory corruption bug that is giving us hell right now.
So in the interest of kernel stability these diffs are being backed out
until such a time as that corruption bug has been found and squashed,
then the ones that are proven good may slowly return.

a quick hitlist of the main commits this backs out:

mine:
uvm_objwire
the lock change in uvm_swap.c
using trees for uvm objects instead of the hash
removing the pgo_releasepg callback.

art@@'s:
putting pmap_page_protect(VM_PROT_NONE) in uvm_pagedeactivate() since
all callers called that just prior anyway.

ok beck@@, ariane@@.

prompted by deraadt@@.
@
text
@@


1.22
log
@Instead of the global hash table with the terrible hashfunction and a
global lock, switch the uvm object pages to being kept in a per-object
RB_TREE. Right now this is approximately the same speed, but cleaner.
When biglock usage is reduced this will improve concurrency due to lock
contention..

ok beck@@ art@@. Thanks to jasper for the speed testing.
@
text
@d151 1
@


1.21
log
@a few more memset changes.

two cases of pool_get() + memset(0) -> pool_get(,,,PR_ZERO)
1.5 cases of global variables are already zeroed, so don't zero them.

ok ariane@@, comments on stuff i'd missed from blambert@@ and cnst@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.20 2009/03/20 15:19:04 oga Exp $	*/
a150 1
	uvm_page_rehash();
@


1.20
log
@While working on some stuff in uvm I've gotten REALLY sick of reading
K&R function declarations, so switch them all over to ansi-style, in
accordance with the prophesy.

"go for it" art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.19 2008/11/24 19:19:46 kurt Exp $	*/
d84 1
a84 1
	 * step 1: zero the uvm structure
a85 2

	memset(&uvm, 0, sizeof(uvm));
@


1.19
log
@init uvm_km_page memory a bit earlier to reduce pressure on pmap bootstrap
pages.

"looks good/no problems with it" tedu@@ miod@@ art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.18 2008/10/18 12:11:30 kettenis Exp $	*/
d71 1
a71 1
uvm_init()
@


1.18
log
@Revert the change to use pools for <= PAGE_SIZE allocations.  It
changes the pressure on the uvm system, uncovering several bugs.  Some
of those bugs result in provable deadlocks.  We'll have to reconsider
integrating this diff again after fixing those bugs.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.16 2007/06/18 21:51:15 pedro Exp $	*/
d143 5
a155 2

	uvm_km_page_init();
@


1.17
log
@Use pools to do allocations for all sizes <= PAGE_SIZE.
This will allow us to escape the limitations of kmem_map.
At this moment, the per-type limits are still enforced for all sizes,
but we might loosen that limit in the future after some thinking.

Original diff from Mickey in kernel/5761 , I massaged it a little to
obey the per-type limits.

miod@@ ok
@
text
@a128 1
	uvm_km_page_init();
d151 2
@


1.16
log
@Bring back Mickey's UVM anon change. Testing by thib@@, beck@@ and
ckuethe@@ for a while. Okay beck@@, "it is good timing" deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.15 2007/05/09 11:23:35 art Exp $	*/
d129 1
a151 2

	uvm_km_page_init();
@


1.15
log
@Truncate the addresses for the deadbeef values so that they don't need
to be page aligned and can contain more "noise".

From mickey art@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.14 2007/04/12 21:47:46 miod Exp $	*/
d137 1
a137 1
	 * step 8: init anonymous memory systems (both amap and anons)
a140 1
	uvm_anon_init();	/* allocate initial anons */
d172 1
a172 1
	 * done!
d174 1
a174 2

	return;
@


1.14
log
@Allow machine-dependant overrides for the ``deadbeef'' sentinel values,
and make sure that nothing can ever be mapped at theses addresses.

Only i386 overrides the default for now.

From mickey@@, ok art@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.13 2006/07/13 22:51:26 deraadt Exp $	*/
d159 1
a159 1
	kvm_start = DEADBEEF0 - PAGE_SIZE;
d166 1
a166 1
	kvm_start = DEADBEEF1 - PAGE_SIZE;
@


1.13
log
@Back out the anon change.  Apparently it was tested by a few, but most of
us did not see it or get a chance to test it before it was commited. It
broke cvs, in the ami driver, making it not succeed at seeing it's devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.11 2004/04/19 22:52:33 tedu Exp $	*/
d155 17
@


1.12
log
@from netbsd: make anons dynamically allocated from pool.
this results in lesse kva waste due to static preallocation of those
for every phys page and also every swap page.
tested by beck krw miod
@
text
@d137 1
a137 1
	 * step 8: init anonymous memory system
d141 1
d156 1
a156 1
	 * init anonymous memory systems
d158 2
a159 1
	uvm_anon_init();
@


1.11
log
@introduce a new km_page allocator that gets pages from kernel_map using
an interrupt safe thread.
use this as the new backend for mbpool and mclpool, eliminating the mb_map.
introduce a sysctl kern.maxclusters which controls the limit of clusters
allocated.
testing by many people, works everywhere but m68k.  ok deraadt@@

this essentially deprecates the NMBCLUSTERS option, don't use it.
this should reduce pressure on the kmem_map and the uvm reserve of static
map entries.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.10 2001/11/06 01:35:04 art Exp $	*/
d137 1
a137 1
	 * step 8: init anonymous memory systems (both amap and anons)
a140 1
	uvm_anon_init();	/* allocate initial anons */
d155 1
a155 1
	 * done!
d157 1
a157 2

	return;
@


1.10
log
@Move the last content from vm/ to uvm/
The only thing left in vm/ are just dumb wrappers.
vm/vm.h includes uvm/uvm_extern.h
vm/pmap.h includes uvm/uvm_pmap.h
vm/vm_page.h includes uvm/uvm_page.h
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.9 2001/11/05 22:14:54 art Exp $	*/
d152 2
@


1.10.2.1
log
@Merge in UBC performance changes from NetBSD.
Fix a bunch of merge errors from yesterday.
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_init.c,v 1.10 2001/11/06 01:35:04 art Exp $	*/
/*	$NetBSD: uvm_init.c,v 1.15 2001/11/10 07:37:00 lukem Exp $	*/
@


1.9
log
@Minor sync to NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_init.c,v 1.8 2001/09/19 20:50:59 mickey Exp $	*/
/*	$NetBSD: uvm_init.c,v 1.13 2000/06/26 14:21:18 mrg Exp $	*/
a50 3


#include <vm/vm.h>
@


1.8
log
@merge vm/vm_kern.h into uvm/uvm_extern.h; art@@ ok
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_init.c,v 1.7 2001/08/11 10:57:22 art Exp $	*/
/*	$NetBSD: uvm_init.c,v 1.12 2000/03/29 03:43:34 simonb Exp $	*/
a53 1
#include <vm/vm_page.h>
@


1.7
log
@Various random fixes from NetBSD.
Including support for zeroing pages in the idle loop (not enabled yet).
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_init.c,v 1.6 2001/01/29 02:07:44 niklas Exp $	*/
a54 1
#include <vm/vm_kern.h>
@


1.6
log
@$OpenBSD$
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_init.c,v 1.11 1999/03/25 18:48:51 mrg Exp $	*/
/*	$NetBSD: uvm_init.c,v 1.11 1999/03/25 18:48:51 mrg Exp $	*/
a50 1
#include <sys/conf.h>
@


1.5
log
@Convert bzero to memset(X, 0..) and bcopy to memcpy.
This is to match (make diffs smaller) the code in NetBSD.
new gcc inlines those functions, so this could also be a performance win.
@
text
@d1 1
@


1.4
log
@Fix the NetBSD id strings.
@
text
@d92 1
a92 1
	bzero(&uvm, sizeof(uvm));
@


1.3
log
@sync with NetBSD from 1999.05.24 (there is a reason for this date)
 Mostly cleanups, but also a few improvements to pagedaemon for better
 handling of low memory and/or low swap conditions.
@
text
@d1 1
a1 1
/*	$NetBSD: uvm_init.c,v 1.10 1999/01/24 23:53:15 chuck Exp $	*/
@


1.3.4.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$NetBSD: uvm_init.c,v 1.11 1999/03/25 18:48:51 mrg Exp $	*/
@


1.3.4.2
log
@merge in approximately 2.9 into SMP branch
@
text
@a0 1
/*	$OpenBSD: uvm_init.c,v 1.6 2001/01/29 02:07:44 niklas Exp $	*/
d92 1
a92 1
	memset(&uvm, 0, sizeof(uvm));
@


1.3.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: uvm_init.c,v 1.12 2000/03/29 03:43:34 simonb Exp $	*/
d51 1
d56 1
@


1.3.4.4
log
@merge in -current
@
text
@d2 1
a2 1
/*	$NetBSD: uvm_init.c,v 1.14 2000/06/27 17:29:23 mrg Exp $	*/
d51 4
@


1.3.4.5
log
@Merge with the trunk
@
text
@a152 2
	uvm_km_page_init();

@


1.2
log
@add OpenBSD tags
@
text
@a0 1
/*	$OpenBSD$	*/
a2 4
/*
 * XXXCDC: "ROUGH DRAFT" QUALITY UVM PRE-RELEASE FILE!   
 *	   >>>USE AT YOUR OWN RISK, WORK IS NOT FINISHED<<<
 */
@


1.1
log
@Import of uvm from NetBSD. Some local changes, some code disabled
@
text
@d1 1
@

