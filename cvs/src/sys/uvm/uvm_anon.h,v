head	1.20;
access;
symbols
	OPENBSD_6_2:1.20.0.4
	OPENBSD_6_2_BASE:1.20
	OPENBSD_6_1:1.20.0.6
	OPENBSD_6_1_BASE:1.20
	OPENBSD_6_0:1.20.0.2
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.18.0.8
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.17.0.6
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.15.0.12
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.10
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.8
	OPENBSD_5_0:1.15.0.6
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.4
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.2
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.14.0.10
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.12
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.8
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.6
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.13.0.4
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.2
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.11.0.18
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.16
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.14
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.12
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.10
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.8
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.9.0.2
	UBC_BASE:1.9
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.20
date	2016.05.08.11.52.32;	author stefan;	state Exp;
branches;
next	1.19;
commitid	hUj20vPhiD6DQNDL;

1.19
date	2015.08.21.16.04.35;	author visa;	state Exp;
branches;
next	1.18;
commitid	gglpDr80UKmkkP9A;

1.18
date	2014.07.11.16.35.40;	author jsg;	state Exp;
branches;
next	1.17;
commitid	7NtJNW9udCOFtDNM;

1.17
date	2013.05.30.16.29.46;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2013.05.30.15.17.59;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2010.06.14.10.05.37;	author thib;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.18.21.51.15;	author pedro;	state Exp;
branches;
next	1.13;

1.13
date	2006.07.13.22.51.26;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.21.16.20.05;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.27.18;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.19.08.58.07;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.28.19.28.14;	author art;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2001.11.11.01.16.56;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.26.19.37.13;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.09.05.34.38;	author smart;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.29.02.07.42;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.15.15.50.19;	author art;	state Exp;
branches;
next	1.3;

1.3
date	99.08.23.08.13.23;	author art;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	99.02.26.05.32.06;	author art;	state Exp;
branches;
next	1.1;

1.1
date	99.02.26.01.30.11;	author art;	state Exp;
branches;
next	;

1.3.4.1
date	2000.03.24.09.09.48;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.05.14.22.47.44;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2001.10.31.03.32.14;	author nate;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2001.11.13.23.02.31;	author niklas;	state Exp;
branches;
next	1.3.4.5;

1.3.4.5
date	2001.12.05.01.19.55;	author niklas;	state Exp;
branches;
next	1.3.4.6;

1.3.4.6
date	2002.03.06.02.17.14;	author niklas;	state Exp;
branches;
next	1.3.4.7;

1.3.4.7
date	2002.03.28.14.54.26;	author niklas;	state Exp;
branches;
next	;

1.9.2.1
date	2002.06.11.03.33.03;	author art;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Wait for RAM in uvm_fault when allocating uvm structures fails

Only fail hard when running out of swap space also, as suggested by
kettenis@@

While there, let amap_add() return a success status and handle
amap_add() errors in uvm_fault() similar to other out of RAM situations.
These bits are needed for further amap reorganization diffs.

lots of feedback and ok kettenis@@
@
text
@/*	$OpenBSD: uvm_anon.h,v 1.19 2015/08/21 16:04:35 visa Exp $	*/
/*	$NetBSD: uvm_anon.h,v 1.13 2000/12/27 09:17:04 chs Exp $	*/

/*
 * Copyright (c) 1997 Charles D. Cranor and Washington University.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _UVM_UVM_ANON_H_
#define _UVM_UVM_ANON_H_

/*
 * anonymous memory management
 *
 * anonymous virtual memory is short term virtual memory that goes away
 * when the processes referencing it go away.    an anonymous page of
 * virtual memory is described by the following data structure:
 */

struct vm_anon {
	struct vm_page *an_page;	/* if in RAM */
	int an_ref;			/* reference count */

	/*
	 * Drum swap slot # (if != 0) [if we hold an_page, PG_BUSY]
	 */
	int an_swslot;
};

/*
 * for active vm_anon's the data can be in one of the following state:
 * [1] in a vm_page with no backing store allocated yet, [2] in a vm_page
 * with backing store allocated, or [3] paged out to backing store
 * (no vm_page).
 *
 * for pageout in case [2]: if the page has been modified then we must
 * flush it out to backing store, otherwise we can just dump the
 * vm_page.
 */

/*
 * anons are grouped together in anonymous memory maps, or amaps.
 * amaps are defined in uvm_amap.h.
 */

/*
 * processes reference anonymous virtual memory maps with an anonymous 
 * reference structure:
 * Note that the offset field indicates which part of the amap we are
 * referencing.
 * Locked by vm_map lock.
 */

struct vm_aref {
	int ar_pageoff;			/* page offset into amap we start */
	struct vm_amap *ar_amap;	/* pointer to amap */
};

#ifdef _KERNEL
struct vm_anon	*uvm_analloc(void);
void		 uvm_anfree(struct vm_anon *);
void		 uvm_anwait(void);
void		 uvm_anon_init(void);
void		 uvm_anon_dropswap(struct vm_anon *);
boolean_t	 uvm_anon_pagein(struct vm_anon *);
#endif /* _KERNEL */

#endif /* _UVM_UVM_ANON_H_ */
@


1.19
log
@Remove the unused loan_count field and the related uvm logic. Most of
the page loaning code is already in the Attic.

ok kettenis@@, beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_anon.h,v 1.18 2014/07/11 16:35:40 jsg Exp $	*/
d82 1
@


1.18
log
@Chuck Cranor rescinded clauses in his license
on the 2nd of February 2011 in NetBSD.

http://marc.info/?l=netbsd-source-changes&m=129658899212732&w=2
http://marc.info/?l=netbsd-source-changes&m=129659095515558&w=2
http://marc.info/?l=netbsd-source-changes&m=129659157916514&w=2
http://marc.info/?l=netbsd-source-changes&m=129665962324372&w=2
http://marc.info/?l=netbsd-source-changes&m=129666033625342&w=2
http://marc.info/?l=netbsd-source-changes&m=129666052825545&w=2
http://marc.info/?l=netbsd-source-changes&m=129666922906480&w=2
http://marc.info/?l=netbsd-source-changes&m=129667725518082&w=2
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_anon.h,v 1.17 2013/05/30 16:29:46 tedu Exp $	*/
a82 1
struct vm_page	*uvm_anon_lockloanpg(struct vm_anon *);
@


1.17
log
@remove lots of comments about locking per beck's request
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_anon.h,v 1.16 2013/05/30 15:17:59 tedu Exp $	*/
a4 1
 *
a15 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Charles D. Cranor and
 *      Washington University.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.16
log
@remove simple_locks from uvm code. ok beck deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_anon.h,v 1.15 2010/06/14 10:05:37 thib Exp $	*/
d48 2
a49 2
	struct vm_page *an_page;	/* if in RAM [an_lock] */
	int an_ref;			/* reference count [an_lock] */
d52 1
a52 2
	 * Drum swap slot # (if != 0) [an_lock or not, if we hold an_page
	 * PG_BUSY]
@


1.15
log
@tidy this file up a bit. reorder a few comments,
fix up prototypes etc.

ok oga@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_anon.h,v 1.14 2007/06/18 21:51:15 pedro Exp $	*/
a55 2

	simple_lock_data_t an_lock;
@


1.14
log
@Bring back Mickey's UVM anon change. Testing by thib@@, beck@@ and
ckuethe@@ for a while. Okay beck@@, "it is good timing" deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_anon.h,v 1.13 2006/07/13 22:51:26 deraadt Exp $	*/
a39 4
 * uvm_anon.h
 */

/*
d50 8
a57 4
	int an_swslot;		/* drum swap slot # (if != 0) 
				   [an_lock.  also, it is ok to read
				   an_swslot if we hold an_page PG_BUSY] */
	simple_lock_data_t an_lock;	/* lock for an_ref */
d79 3
a88 5
/*
 * the offset field indicates which part of the amap we are referencing.
 * locked by vm_map lock.
 */

d90 6
a95 11

/*
 * prototypes
 */

struct vm_anon *uvm_analloc(void);
void uvm_anfree(struct vm_anon *);
void uvm_anon_init(void);
struct vm_page *uvm_anon_lockloanpg(struct vm_anon *);
void uvm_anon_dropswap(struct vm_anon *);
boolean_t uvm_anon_pagein(struct vm_anon *);
@


1.13
log
@Back out the anon change.  Apparently it was tested by a few, but most of
us did not see it or get a chance to test it before it was commited. It
broke cvs, in the ami driver, making it not succeed at seeing it's devices.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_anon.h,v 1.11 2002/03/14 01:27:18 millert Exp $	*/
d52 1
a53 5
	simple_lock_data_t an_lock;	/* lock for an_ref */
	union {
		struct vm_anon *an_nxt;	/* if on free list [afreelock] */
		struct vm_page *an_page;/* if in RAM [an_lock] */
	} u;
d57 1
d61 4
a64 6
 * a pool of vm_anon data structures is allocated and put on a global
 * free list at boot time.  vm_anon's on the free list use "an_nxt" as
 * a pointer to the next item on the free list.  for active vm_anon's
 * the data can be in one of the following state: [1] in a vm_page
 * with no backing store allocated yet, [2] in a vm_page with backing
 * store allocated, or [3] paged out to backing store (no vm_page).
a99 2
int uvm_anon_add(int);
void uvm_anon_remove(int);
d102 1
a102 1
boolean_t anon_swap_off(int, int);
@


1.12
log
@from netbsd: make anons dynamically allocated from pool.
this results in lesse kva waste due to static preallocation of those
for every phys page and also every swap page.
tested by beck krw miod
@
text
@a51 1
	struct vm_page *an_page;	/* if in RAM [an_lock] */
d53 5
a60 1
	simple_lock_data_t an_lock;	/* lock for an_ref */
d64 6
a69 4
 * for active vm_anon's the data can be in one of the following state:
 * [1] in a vm_page with no backing store allocated yet, [2] in a vm_page
 * with backing store allocated, or [3] paged out to backing store
 * (no vm_page).
d105 2
d109 1
a109 1
boolean_t uvm_anon_pagein(struct vm_anon *);
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_anon.h,v 1.10 2001/12/19 08:58:07 art Exp $	*/
d52 1
a53 5
	simple_lock_data_t an_lock;	/* lock for an_ref */
	union {
		struct vm_anon *an_nxt;	/* if on free list [afreelock] */
		struct vm_page *an_page;/* if in RAM [an_lock] */
	} u;
d57 1
d61 4
a64 6
 * a pool of vm_anon data structures is allocated and put on a global
 * free list at boot time.  vm_anon's on the free list use "an_nxt" as
 * a pointer to the next item on the free list.  for active vm_anon's
 * the data can be in one of the following state: [1] in a vm_page
 * with no backing store allocated yet, [2] in a vm_page with backing
 * store allocated, or [3] paged out to backing store (no vm_page).
a99 2
int uvm_anon_add(int);
void uvm_anon_remove(int);
d102 1
a102 1
boolean_t anon_swap_off(int, int);
@


1.10
log
@UBC was a disaster. It worked very good when it worked, but on some
machines or some configurations or in some phase of the moon (we actually
don't know when or why) files disappeared. Since we've not been able to
track down the problem in two weeks intense debugging and we need -current
to be stable, back out everything to a state it had before UBC.

We apologise for the inconvenience.
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_anon.h,v 1.8 2001/11/11 01:16:56 art Exp $	*/
d102 8
a109 8
struct vm_anon *uvm_analloc __P((void));
void uvm_anfree __P((struct vm_anon *));
void uvm_anon_init __P((void));
int uvm_anon_add __P((int));
void uvm_anon_remove __P((int));
struct vm_page *uvm_anon_lockloanpg __P((struct vm_anon *));
void uvm_anon_dropswap __P((struct vm_anon *));
boolean_t anon_swap_off __P((int, int));
@


1.9
log
@Sync in more uvm from NetBSD. Mostly just cosmetic stuff.
Contains also support for page coloring.
@
text
@d2 1
a2 1
/*	$NetBSD: uvm_anon.h,v 1.15 2001/05/26 16:32:46 chs Exp $	*/
d53 1
a53 1
	struct simplelock an_lock;	/* lock for an_ref */
d58 1
a58 1
	int an_swslot;		/* drum swap slot # (if != 0)
d82 1
a82 1
 * processes reference anonymous virtual memory maps with an anonymous
@


1.9.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: uvm_anon.h,v 1.9 2001/11/28 19:28:14 art Exp $	*/
d102 8
a109 8
struct vm_anon *uvm_analloc(void);
void uvm_anfree(struct vm_anon *);
void uvm_anon_init(void);
int uvm_anon_add(int);
void uvm_anon_remove(int);
struct vm_page *uvm_anon_lockloanpg(struct vm_anon *);
void uvm_anon_dropswap(struct vm_anon *);
boolean_t anon_swap_off(int, int);
@


1.8
log
@Sync in more stuff from NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_anon.h,v 1.7 2001/07/26 19:37:13 art Exp $	*/
/*	$NetBSD: uvm_anon.h,v 1.13 2000/12/27 09:17:04 chs Exp $	*/
d53 1
a53 1
	simple_lock_data_t an_lock;	/* lock for an_ref */
d58 1
a58 1
	int an_swslot;		/* drum swap slot # (if != 0) 
d82 1
a82 1
 * processes reference anonymous virtual memory maps with an anonymous 
@


1.7
log
@Add support for disabling swap devices (swapctl -d).
Improve error handling on I/O errors to swap.
From NetBSD
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_anon.h,v 1.6 2001/03/09 05:34:38 smart Exp $	*/
/*	$NetBSD: uvm_anon.h,v 1.12 2000/01/11 06:57:49 chs Exp $	*/
d105 1
a105 1
void uvm_anon_add __P((int));
@


1.6
log
@Protect protypes, certain macros, and inlines from userland.  Checked userland
with a 'make build'.  From NetBSD.  art@@ ok
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_anon.h,v 1.5 2001/01/29 02:07:42 niklas Exp $	*/
/*	$NetBSD: uvm_anon.h,v 1.11 1999/06/21 17:25:11 thorpej Exp $	*/
d106 1
d109 1
a109 1

@


1.5
log
@$OpenBSD$
@
text
@d1 2
a2 2
/*	$OpenBSD: uvm_anon.h,v 1.10 1999/03/26 17:34:15 chs Exp $	*/
/*	$NetBSD: uvm_anon.h,v 1.10 1999/03/26 17:34:15 chs Exp $	*/
d96 2
d108 2
@


1.4
log
@Fix the NetBSD id strings.
@
text
@d1 1
@


1.3
log
@sync with NetBSD from 1999.05.24 (there is a reason for this date)
 Mostly cleanups, but also a few improvements to pagedaemon for better
 handling of low memory and/or low swap conditions.
@
text
@d1 1
a1 2
/*	$OpenBSD: uvm_anon.h,v 1.2 1999/02/26 05:32:06 art Exp $	*/
/*	$NetBSD: uvm_anon.h,v 1.9 1999/01/24 23:53:15 chuck Exp $	*/
@


1.3.4.1
log
@Sync with -current
@
text
@d1 2
a2 1
/*	$NetBSD: uvm_anon.h,v 1.10 1999/03/26 17:34:15 chs Exp $	*/
@


1.3.4.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 2
/*	$OpenBSD: uvm_anon.h,v 1.6 2001/03/09 05:34:38 smart Exp $	*/
/*	$NetBSD: uvm_anon.h,v 1.11 1999/06/21 17:25:11 thorpej Exp $	*/
a94 2
#ifdef _KERNEL

a104 2

#endif /* _KERNEL */
@


1.3.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: uvm_anon.h,v 1.12 2000/01/11 06:57:49 chs Exp $	*/
a105 1
void uvm_anon_remove __P((int));
d108 1
a108 1
boolean_t anon_swap_off __P((int, int));
@


1.3.4.4
log
@merge in -current
@
text
@d2 1
a2 1
/*	$NetBSD: uvm_anon.h,v 1.13 2000/12/27 09:17:04 chs Exp $	*/
d105 1
a105 1
int uvm_anon_add __P((int));
@


1.3.4.5
log
@Merge in -current
@
text
@d2 1
a2 1
/*	$NetBSD: uvm_anon.h,v 1.15 2001/05/26 16:32:46 chs Exp $	*/
d53 1
a53 1
	struct simplelock an_lock;	/* lock for an_ref */
d58 1
a58 1
	int an_swslot;		/* drum swap slot # (if != 0)
d82 1
a82 1
 * processes reference anonymous virtual memory maps with an anonymous
@


1.3.4.6
log
@Merge in trunk
@
text
@d2 1
a2 1
/*	$NetBSD: uvm_anon.h,v 1.13 2000/12/27 09:17:04 chs Exp $	*/
d53 1
a53 1
	simple_lock_data_t an_lock;	/* lock for an_ref */
d58 1
a58 1
	int an_swslot;		/* drum swap slot # (if != 0) 
d82 1
a82 1
 * processes reference anonymous virtual memory maps with an anonymous 
@


1.3.4.7
log
@Merge in -current from roughly a week ago
@
text
@d102 8
a109 8
struct vm_anon *uvm_analloc(void);
void uvm_anfree(struct vm_anon *);
void uvm_anon_init(void);
int uvm_anon_add(int);
void uvm_anon_remove(int);
struct vm_page *uvm_anon_lockloanpg(struct vm_anon *);
void uvm_anon_dropswap(struct vm_anon *);
boolean_t anon_swap_off(int, int);
@


1.2
log
@add OpenBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d105 1
@


1.1
log
@Import of uvm from NetBSD. Some local changes, some code disabled
@
text
@d1 1
@

