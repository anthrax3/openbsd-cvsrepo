head	1.8;
access;
symbols
	OPENBSD_4_5:1.7.0.6
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	arla-20030805:1.1.1.2
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.3.0.8
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	SMP:1.1.0.4
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.8
date	2009.06.03.14.45.55;	author jj;	state dead;
branches;
next	1.7;

1.7
date	2007.12.09.21.26.57;	author hshoexer;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.15.20.32.21;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.12.07.53.47;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.10.32;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.26.51;	author art;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	2000.03.03.00.54.57;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	99.04.30.01.58.59;	author art;	state Exp;
branches
	1.1.1.1
	1.1.4.1;
next	;

1.1.1.1
date	2002.06.07.03.32.58;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.12.07.43.52;	author hin;	state Exp;
branches;
next	;

1.1.4.1
date	2000.03.24.09.09.54;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2001.05.14.22.47.51;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2004.02.19.11.01.45;	author niklas;	state Exp;
branches;
next	;

1.3.8.1
date	2002.06.11.03.33.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <xfs/xfs_locl.h>
#include <xfs/xfs_common.h>
#include <xfs/xfs_deb.h>

RCSID("$arla: xfs_common-bsd.c,v 1.25 2002/12/18 16:32:03 lha Exp $");

#ifdef MALLOC_DEFINE
MALLOC_DEFINE(M_NNPFS, "xfs-misc", "xfs misc");
MALLOC_DEFINE(M_NNPFS_NODE, "xfs-node", "xfs node");
MALLOC_DEFINE(M_NNPFS_LINK, "xfs-link", "xfs link");
MALLOC_DEFINE(M_NNPFS_MSG, "xfs-msg", "xfs msg");
#endif

#ifdef NNPFS_DEBUG
static u_int xfs_allocs;
static u_int xfs_frees;

void *
xfs_alloc(u_int size, xfs_malloc_type type)
{
    void *ret;

    xfs_allocs++;
    NNPFSDEB(XDEBMEM, ("xfs_alloc: xfs_allocs - xfs_frees %d\n", 
		     xfs_allocs - xfs_frees));

    ret = malloc(size, type, M_WAITOK);
    return ret;
}

void
xfs_free(void *ptr, u_int size, xfs_malloc_type type)
{
    xfs_frees++;
    free(ptr, type);
}

#endif /* NNPFS_DEBUG */

int
xfs_suser(d_thread_t *p)
{
#if defined(HAVE_TWO_ARGUMENT_SUSER)
#ifdef __OpenBSD__
    return suser (p, SUSER_NOACCT);
#else
    return suser (xfs_proc_to_cred(p), NULL);
#endif
#else
    return suser (p);
#endif
}

/*
 * Print a `dev_t' in some readable format
 */

#ifdef HAVE_KERNEL_DEVTONAME

const char *
xfs_devtoname_r (dev_t dev, char *buf, size_t sz)
{
    return devtoname (dev);
}

#else /* !HAVE_KERNEL_DEVTONAME */

const char *
xfs_devtoname_r (dev_t dev, char *buf, size_t sz)
{
#ifdef HAVE_KERNEL_SNPRINTF
    snprintf (buf, sz, "%u/%u", major(dev), minor(dev));
    return buf;
#else
    return "<unknown device>";
#endif
}

#endif /* HAVE_KERNEL_DEVTONAME */
@


1.7
log
@MALLOC/FREE -> malloc/free

ok gilles
@
text
@@


1.6
log
@change arguments to suser.  suser now takes the process, and a flags
argument.  old cred only calls user suser_ucred.  this will allow future
work to more flexibly implement the idea of a root process.  looks like
something i saw in freebsd, but a little different.
use of suser_ucred vs suser in file system code should be looked at again,
for the moment semantics remain unchanged.
review and input from art@@  testing and further review miod@@
@
text
@d60 1
a60 1
    MALLOC(ret, void *, size, type, M_WAITOK);
d68 1
a68 1
    FREE(ptr, type);
@


1.5
log
@Merge
@
text
@d77 3
d81 1
@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d38 1
a38 1
RCSID("$Id: xfs_common-bsd.c,v 1.1.1.1 2002/06/07 03:32:58 hin Exp $");
d41 4
a44 1
MALLOC_DEFINE(M_XFS, "xfs", "xfs buffer");
d47 1
a47 1
#ifdef XFS_DEBUG
d52 1
a52 1
xfs_alloc(u_int size)
d57 1
a57 1
    XFSDEB(XDEBMEM, ("xfs_alloc: xfs_allocs - xfs_frees %d\n", 
d60 1
a60 1
    MALLOC(ret, void *, size, M_XFS, M_WAITOK);
d65 1
a65 1
xfs_free(void *ptr, u_int size)
d68 1
a68 1
    FREE(ptr, M_XFS);
d71 1
a71 1
#endif /* XFS_DEBUG */
d74 1
a74 1
xfs_suser(struct proc *p)
d76 1
a76 1
#ifdef HAVE_TWO_ARGUMENT_SUSER
@


1.3
log
@New xfs from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 *
 * 4. Neither the name of the Institute nor the names of its contributors
d38 1
a38 1
RCSID("$Id: xfs_common-bsd.c,v 1.15 2000/03/18 15:50:48 assar Exp $");
a78 9

#ifndef HAVE_KERNEL_MEMCPY
void *
memcpy (void *s1, const void *s2, size_t n)
{
    bcopy (s2, s1, n);
    return s1;
}
#endif
@


1.3.8.1
log
@Sync UBC branch to -current
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d43 1
a43 1
RCSID("$Id: xfs_common-bsd.c,v 1.3 2000/09/11 14:26:51 art Exp $");
d84 9
@


1.2
log
@$OpenBSD$
@
text
@a0 2
/*	$OpenBSD$	*/

d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
a38 1
#ifdef XFS_DEBUG
d43 5
a47 1
RCSID("$OpenBSD: xfs_common-bsd.c,v 1.1 1999/04/30 01:58:59 art Exp $");
d49 1
d56 2
d62 2
a63 1
    return malloc(size, M_TEMP, M_WAITOK); /* What kind? */
d70 34
a103 1
    free(ptr, M_TEMP);
d105 11
d117 3
@


1.1
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d1 2
d46 1
a46 1
RCSID("$Id: xfs_common-bsd.c,v 1.7 1998/12/22 13:16:11 lha Exp $");
@


1.1.1.1
log
@Import of xfs from arla-0.35.7
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
d44 1
a44 5
RCSID("$Id: xfs_common-bsd.c,v 1.1.1.1 2002/06/05 17:24:11 hin Exp $");

#ifdef MALLOC_DEFINE
MALLOC_DEFINE(M_XFS, "xfs", "xfs buffer");
#endif
a45 1
#ifdef XFS_DEBUG
a51 2
    void *ret;

d56 1
a56 2
    MALLOC(ret, void *, size, M_XFS, M_WAITOK);
    return ret;
d63 1
a63 13
    FREE(ptr, M_XFS);
}

#endif /* XFS_DEBUG */

int
xfs_suser(struct proc *p)
{
#ifdef HAVE_TWO_ARGUMENT_SUSER
    return suser (xfs_proc_to_cred(p), NULL);
#else
    return suser (p);
#endif
a64 23

/*
 * Print a `dev_t' in some readable format
 */

#ifdef HAVE_KERNEL_DEVTONAME

const char *
xfs_devtoname_r (dev_t dev, char *buf, size_t sz)
{
    return devtoname (dev);
}

#else /* !HAVE_KERNEL_DEVTONAME */

const char *
xfs_devtoname_r (dev_t dev, char *buf, size_t sz)
{
#ifdef HAVE_KERNEL_SNPRINTF
    snprintf (buf, sz, "%u/%u", major(dev), minor(dev));
    return buf;
#else
    return "<unknown device>";
a65 3
}

#endif /* HAVE_KERNEL_DEVTONAME */
@


1.1.1.2
log
@Import xfs from arla-current as of 5 Aug 2003.

ok deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d38 1
a38 1
RCSID("$arla: xfs_common-bsd.c,v 1.25 2002/12/18 16:32:03 lha Exp $");
d41 1
a41 4
MALLOC_DEFINE(M_NNPFS, "xfs-misc", "xfs misc");
MALLOC_DEFINE(M_NNPFS_NODE, "xfs-node", "xfs node");
MALLOC_DEFINE(M_NNPFS_LINK, "xfs-link", "xfs link");
MALLOC_DEFINE(M_NNPFS_MSG, "xfs-msg", "xfs msg");
d44 1
a44 1
#ifdef NNPFS_DEBUG
d49 1
a49 1
xfs_alloc(u_int size, xfs_malloc_type type)
d54 1
a54 1
    NNPFSDEB(XDEBMEM, ("xfs_alloc: xfs_allocs - xfs_frees %d\n", 
d57 1
a57 1
    MALLOC(ret, void *, size, type, M_WAITOK);
d62 1
a62 1
xfs_free(void *ptr, u_int size, xfs_malloc_type type)
d65 1
a65 1
    FREE(ptr, type);
d68 1
a68 1
#endif /* NNPFS_DEBUG */
d71 1
a71 1
xfs_suser(d_thread_t *p)
d73 1
a73 1
#if defined(HAVE_TWO_ARGUMENT_SUSER)
@


1.1.4.1
log
@Sync with -current
@
text
@a0 2
/*	$OpenBSD$	*/

d44 1
a44 1
RCSID("$OpenBSD$");
@


1.1.4.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
d4 1
a4 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d41 1
d46 1
a46 5
RCSID("$Id: xfs_common-bsd.c,v 1.3 2000/09/11 14:26:51 art Exp $");

#ifdef MALLOC_DEFINE
MALLOC_DEFINE(M_XFS, "xfs", "xfs buffer");
#endif
a47 1
#ifdef XFS_DEBUG
a53 2
    void *ret;

d58 1
a58 2
    MALLOC(ret, void *, size, M_XFS, M_WAITOK);
    return ret;
d65 1
a65 34
    FREE(ptr, M_XFS);
}

#endif /* XFS_DEBUG */

int
xfs_suser(struct proc *p)
{
#ifdef HAVE_TWO_ARGUMENT_SUSER
    return suser (xfs_proc_to_cred(p), NULL);
#else
    return suser (p);
#endif
}

#ifndef HAVE_KERNEL_MEMCPY
void *
memcpy (void *s1, const void *s2, size_t n)
{
    bcopy (s2, s1, n);
    return s1;
}
#endif

/*
 * Print a `dev_t' in some readable format
 */

#ifdef HAVE_KERNEL_DEVTONAME

const char *
xfs_devtoname_r (dev_t dev, char *buf, size_t sz)
{
    return devtoname (dev);
a66 11

#else /* !HAVE_KERNEL_DEVTONAME */

const char *
xfs_devtoname_r (dev_t dev, char *buf, size_t sz)
{
#ifdef HAVE_KERNEL_SNPRINTF
    snprintf (buf, sz, "%u/%u", major(dev), minor(dev));
    return buf;
#else
    return "<unknown device>";
a67 3
}

#endif /* HAVE_KERNEL_DEVTONAME */
@


1.1.4.3
log
@Sync the SMP branch with 3.3
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d43 1
a43 1
RCSID("$Id$");
d84 9
@


1.1.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d38 1
a38 1
RCSID("$arla: xfs_common-bsd.c,v 1.25 2002/12/18 16:32:03 lha Exp $");
d41 1
a41 4
MALLOC_DEFINE(M_NNPFS, "xfs-misc", "xfs misc");
MALLOC_DEFINE(M_NNPFS_NODE, "xfs-node", "xfs node");
MALLOC_DEFINE(M_NNPFS_LINK, "xfs-link", "xfs link");
MALLOC_DEFINE(M_NNPFS_MSG, "xfs-msg", "xfs msg");
d44 1
a44 1
#ifdef NNPFS_DEBUG
d49 1
a49 1
xfs_alloc(u_int size, xfs_malloc_type type)
d54 1
a54 1
    NNPFSDEB(XDEBMEM, ("xfs_alloc: xfs_allocs - xfs_frees %d\n", 
d57 1
a57 1
    MALLOC(ret, void *, size, type, M_WAITOK);
d62 1
a62 1
xfs_free(void *ptr, u_int size, xfs_malloc_type type)
d65 1
a65 1
    FREE(ptr, type);
d68 1
a68 1
#endif /* NNPFS_DEBUG */
d71 1
a71 1
xfs_suser(d_thread_t *p)
d73 1
a73 4
#if defined(HAVE_TWO_ARGUMENT_SUSER)
#ifdef __OpenBSD__
    return suser (p, SUSER_NOACCT);
#else
a74 1
#endif
@


