head	1.6;
access;
symbols
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.1
	arla:1.1.1
	UBC_SYNC_A:1.4
	UBC_SYNC_B:1.4
	SMP:1.4.0.2
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3;
locks; strict;
comment	@ * @;


1.6
date	2009.06.03.14.45.55;	author jj;	state dead;
branches;
next	1.5;

1.5
date	2003.08.12.10.54.32;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	99.04.30.02.13.23;	author art;	state dead;
branches
	1.4.2.1;
next	1.3;

1.3
date	98.09.06.01.48.58;	author art;	state Exp;
branches;
next	1.2;

1.2
date	98.08.31.05.13.16;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.08.30.16.47.21;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.08.12.07.43.50;	author hin;	state Exp;
branches;
next	;

1.4.2.1
date	2004.02.19.11.01.49;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@/*
 * Copyright (c) 2002 - 2003, Stockholms Universitet
 * (Stockholm University, Stockholm Sweden)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the university nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <xfs/xfs_locl.h>
#include <xfs/xfs_common.h>
#include <xfs/xfs_fs.h>
#include <xfs/xfs_deb.h>
#include <xfs/xfs_node.h>
#include <xfs/xfs_vnodeops.h>
#include <xfs/xfs_queue.h>

RCSID("$arla: xfs_node.c,v 1.3 2003/02/06 12:56:09 lha Exp $");

#define xfs_hash(node) \
  (((node)->a+(node)->b+(node)->c+(node)->d) % XN_HASHSIZE)

/*
 * Init the nnp node storage system
 */

void
nnfs_init_head(struct xfs_nodelist_head *head)
{
    int i;

    for (i = 0; i < XN_HASHSIZE; i++)
	NNPQUEUE_INIT(&head->nh_nodelist[i]);
}

/*
 * Tries to purge all nodes from the hashtable. Nodes that unpurgeable
 * (still used nodes) are given to proc for special termination
 * (conversion to dead node).
 */

void
xfs_node_purge(struct xfs_nodelist_head *head, 
		 void (*func)(struct xfs_node *))
{
    panic("xfs_node_purge");
}

/*
 * xfs_node_find returns the node with the handle `handlep'.
 */

struct xfs_node *
xfs_node_find(struct xfs_nodelist_head *head, xfs_handle *handlep)
{
    struct nh_node_list *h;
    struct xfs_node *nn;

    h = &head->nh_nodelist[xfs_hash(handlep)];

    NNPQUEUE_FOREACH(nn, h, nn_hash) {
	if (xfs_handle_eq(handlep, &nn->handle))
	    break;
    }

    return nn;
}

/*
 * Remove the node `node' from the node storage system.
 */

void
xfs_remove_node(struct xfs_nodelist_head *head, struct xfs_node *node)
{
    struct nh_node_list *h;

    h = &head->nh_nodelist[xfs_hash(&node->handle)];
    NNPQUEUE_REMOVE(node, h, nn_hash);
}

/*
 * Add the node `node' from the node storage system.
 */

void
xfs_insert(struct xfs_nodelist_head *head, struct xfs_node *node)
{
    struct nh_node_list *h;

    h = &head->nh_nodelist[xfs_hash(&node->handle)];
    NNPQUEUE_INSERT_HEAD(h, node, nn_hash);
}

/*
 * Update `old_handlep' in the node list `head' to `new_handlep'.
 */

int
xfs_update_handle(struct xfs_nodelist_head *head,
		    xfs_handle *old_handlep, xfs_handle *new_handlep)
{
    struct xfs_node *node;

    node = xfs_node_find(head, new_handlep);
    if (node)
	return EEXIST;
    node = xfs_node_find(head, old_handlep);
    if (node == NULL)
	return ENOENT;
    xfs_remove_node(head, node);
    node->handle = *new_handlep;
    xfs_insert(head, node);

    return 0;
}
@


1.5
log
@For whatever reason, cvs cannot import a file that already exists, but is
deleted. *sigh*
@
text
@@


1.4
log
@gc old files
@
text
@a0 1
/*	$OpenBSD: xfs_node.c,v 1.3 1998/09/06 01:48:58 art Exp $	*/
d2 2
a3 2
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 *
 * 4. Neither the name of the Institute nor the names of its contributors
d21 2
a22 2
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
d24 8
a31 8
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d34 1
a34 9
#include <sys/types.h>
#include <sys/param.h>
#include <sys/uio.h>
#include <sys/namei.h>
#include <sys/systm.h>
#include <sys/dirent.h>
#include <sys/mount.h>
#include <sys/vnode.h>

d38 3
d42 1
a42 1
RCSID("$KTH: xfs_node.c,v 1.16 1998/07/09 19:58:35 art Exp $");
d44 2
a45 5
#if defined(__NetBSD__) || defined(__OpenBSD__)
extern int (**xfs_vnodeop_p) (void *);
#elif defined(__FreeBSD__)
extern vop_t **xfs_vnodeop_p;
#endif
d48 1
a48 5
 * Create a new xfs_node and make a VN_HOLD()!
 *
 * Also prevents creation of duplicates. This happens
 * whenever there are more than one name to a file,
 * "." and ".." are common cases.
d51 2
a52 3
int
new_xfs_node(struct xfs *xfsp, struct xfs_msg_node *node,
	struct xfs_node **xpp, struct proc *p)
d54 1
a54 2
	int		do_vget = 0;
	struct xfs_node	*result;
d56 2
a57 61
	XFSDEB(XDEBNODE, ("new_xfs_node %d.%d.%d.%d\n",
			  node->handle.a,
			  node->handle.b,
			  node->handle.c,
			  node->handle.d));

	/* Does not allow duplicates */
	result = xfs_node_find(xfsp, &node->handle);
	if (result == 0) {
		int		error;
		struct vnode	*v;

		result = xfs_alloc(sizeof(*result));
		if (result == 0) {
			printf("xfs_alloc(%d) failed\n",
			       (int) sizeof(*result));
			panic("new_xfs_node: You Loose!");
		}

		bzero(result, sizeof(*result));

		error = getnewvnode(VT_XFS, XFS_TO_VFS(xfsp), xfs_vnodeop_p,
				    &v);
		if (error) {
			xfs_free(result, sizeof(*result));
			return error;
		}

		v->v_data = result;
		result->vn = v;

		result->anonrights = node->anonrights;
		result->handle = node->handle;
		result->flags = 0;
		result->tokens = 0;

		xfsp->nnodes++;
	} else {
		/* Node is already cached */
		do_vget = 1;
	}

	/* Init other fields */
	xfs_attr2vattr(&node->attr, &result->attr);
	result->vn->v_type = result->attr.va_type;
	XFS_TOKEN_SET(result, XFS_ATTR_R, XFS_ATTR_MASK);
	bcopy(node->id, result->id, sizeof(result->id));
	bcopy(node->rights, result->rights, sizeof(result->rights));

	/*
	 * We need to postpone this until here because (on FreeBSD) vget
	 * tries to install a pager on the vnode and for that it wants to
	 * retrieve the size with getattr.
	 */

	if(do_vget)
		vget(XNODE_TO_VNODE(result), 0, p);

	*xpp = result;
	XFSDEB(XDEBNODE, ("return: new_xfs_node\n"));
	return 0;
d60 6
d67 2
a68 1
free_xfs_node(struct xfs_node *node)
d70 1
a70 15
	struct xfs *xfsp = XFS_FROM_XNODE(node);

	XFSDEB(XDEBNODE, ("free_xfs_node starting\n"));

	/* XXX Really need to put back dirty data first. */

	if (DATA_FROM_XNODE(node)) {
		vrele(DATA_FROM_XNODE(node));
		DATA_FROM_XNODE(node) = NULL;
	}
	xfsp->nnodes--;
	XNODE_TO_VNODE(node)->v_data = NULL;
	xfs_free(node, sizeof(*node));

	XFSDEB(XDEBNODE, ("free_xfs_node done\n"));
d73 3
a75 35
int
free_all_xfs_nodes(struct xfs *xfsp, int flags)
{
	int		error = 0;
	struct mount	*mp = XFS_TO_VFS(xfsp);

	if (mp == NULL) {
		XFSDEB(XDEBNODE, ("free_all_xfs_nodes already freed\n"));
		return 0;
	}

	XFSDEB(XDEBNODE, ("free_all_xfs_nodes starting\n"));

	xfs_dnlc_purge(mp);

	XFSDEB(XDEBNODE, ("free_all_xfs_nodes now removing root\n"));

	if (xfsp->root) {
		vgone(XNODE_TO_VNODE(xfsp->root));
		xfsp->root = 0;
	}

	XFSDEB(XDEBNODE, ("free_all_xfs_nodes root removed\n"));
	XFSDEB(XDEBNODE, ("free_all_xfs_nodes killing all remaining nodes\n"));

	error = vflush(mp, NULL, flags);
	if (error) {
		XFSDEB(XDEBNODE, ("xfree_all_xfs_nodes: vflush error == %d\n",
				  error));
		return error;
	}

	XFSDEB(XDEBNODE, ("free_all_xfs_nodes done\n"));
	return error;
}
d78 1
a78 1
xfs_node_find(struct xfs *xfsp, xfs_handle *handlep)
d80 4
a83 2
	struct vnode	*t;
	struct xfs_node	*xn = NULL;
d85 4
a88 2
	XFSDEB(XDEBNODE, ("xfs_node_find: xfsp = %p handlep = %p\n", 
			  xfsp, handlep));
d90 1
a90 13
	for (t = XFS_TO_VFS(xfsp)->mnt_vnodelist.lh_first;
	     t != NULL;
	     t = t->v_mntvnodes.le_next) {
		xn = VNODE_TO_XNODE(t);

		if (xn && xfs_handle_eq(&xn->handle, handlep))
			break;
	}

	if (t != NULL)
		return xn;
	else
		return NULL;
d93 3
a95 54
void
vattr2xfs_attr(const struct vattr *va, struct xfs_attr *xa)
{
	bzero(xa, sizeof(*xa));
	if (va->va_mode != (mode_t) VNOVAL)
		XA_SET_MODE(xa, va->va_mode);
	if (va->va_nlink != VNOVAL)
		XA_SET_NLINK(xa, va->va_nlink);
	if (va->va_size != (u_quad_t) VNOVAL)
		XA_SET_SIZE(xa, va->va_size);
	if (va->va_uid != VNOVAL)
		XA_SET_UID(xa, va->va_uid);
	if (va->va_gid != VNOVAL)
		XA_SET_GID(xa, va->va_gid);
	if (va->va_atime.tv_sec != VNOVAL)
		XA_SET_ATIME(xa, va->va_atime.tv_sec);
	if (va->va_mtime.tv_sec != VNOVAL)
		XA_SET_MTIME(xa, va->va_mtime.tv_sec);
	if (va->va_ctime.tv_sec != VNOVAL)
		XA_SET_CTIME(xa, va->va_ctime.tv_sec);
	if (va->va_fileid != VNOVAL)
		XA_SET_FILEID(xa, va->va_fileid);
	switch (va->va_type) {
	case VNON:
		xa->xa_type = XFS_FILE_NON;
		break;
	case VREG:
		xa->xa_type = XFS_FILE_REG;
		break;
	case VDIR:
		xa->xa_type = XFS_FILE_DIR;
		break;
	case VBLK:
		xa->xa_type = XFS_FILE_BLK;
		break;
	case VCHR:
		xa->xa_type = XFS_FILE_CHR;
		break;
	case VLNK:
		xa->xa_type = XFS_FILE_LNK;
		break;
	case VSOCK:
		xa->xa_type = XFS_FILE_SOCK;
		break;
	case VFIFO:
		xa->xa_type = XFS_FILE_FIFO;
		break;
	case VBAD:
		xa->xa_type = XFS_FILE_BAD;
		break;
	default:
		panic("xfs_attr2attr: bad value");
	}
}
d98 1
a98 78
xfs_attr2vattr(const struct xfs_attr *xa, struct vattr *va)
{
	VATTR_NULL(va);
	if (XA_VALID_MODE(xa))
		va->va_mode = xa->xa_mode;
	if (XA_VALID_NLINK(xa))
		va->va_nlink = xa->xa_nlink;
	if (XA_VALID_SIZE(xa))
		va->va_size = xa->xa_size;
	if (XA_VALID_UID(xa))
		va->va_uid = xa->xa_uid;
	if (XA_VALID_GID(xa))
		va->va_gid = xa->xa_gid;
	if (XA_VALID_ATIME(xa)) {
		va->va_atime.tv_sec = xa->xa_atime;
		va->va_atime.tv_nsec = 0;
	}
	if (XA_VALID_MTIME(xa)) {
		va->va_mtime.tv_sec = xa->xa_mtime;
		va->va_mtime.tv_nsec = 0;
	}
	if (XA_VALID_CTIME(xa)) {
		va->va_ctime.tv_sec = xa->xa_ctime;
		va->va_ctime.tv_nsec = 0;
	}
	if (XA_VALID_FILEID(xa)) {
		va->va_fileid = xa->xa_fileid;
	}
	if (XA_VALID_TYPE(xa)) {
		switch (xa->xa_type) {
		case XFS_FILE_NON:
			va->va_type = VNON;
			break;
		case XFS_FILE_REG:
			va->va_type = VREG;
			break;
		case XFS_FILE_DIR:
			va->va_type = VDIR;
			break;
		case XFS_FILE_BLK:
			va->va_type = VBLK;
			break;
		case XFS_FILE_CHR:
			va->va_type = VCHR;
			break;
		case XFS_FILE_LNK:
			va->va_type = VLNK;
			break;
		case XFS_FILE_SOCK:
			va->va_type = VSOCK;
			break;
		case XFS_FILE_FIFO:
			va->va_type = VFIFO;
			break;
		case XFS_FILE_BAD:
			va->va_type = VBAD;
			break;
		default:
			panic("xfs_attr2vattr: bad value");
		}
	}
	va->va_flags = 0;
	va->va_blocksize = 8192;
	va->va_bytes = va->va_size;
}


struct long_entry {
	struct vnode *dvp, *vp;
	char name[MAXNAMLEN + 1];
	size_t len;
	u_long dvpid, vpid;
};

static struct long_entry tbl;

int
xfs_dnlc_enter(struct vnode *dvp, char *name, struct vnode *vp)
d100 1
a100 8
	struct componentname	cn;
	char			*p;

	XFSDEB(XDEBDNLC, ("xfs_dnlc_enter(0x%x, \"%s\", 0x%x)\n",
			  (int) dvp, name, (int) vp));

	XFSDEB(XDEBDNLC, ("xfs_dnlc_enter: v_id = %ld\n",
			  dvp->v_id));
d102 2
a103 21
	cn.cn_namelen = strlen(name);
	cn.cn_nameptr = name;
	cn.cn_hash = 0;
	for (p = name; *p; ++p)
		cn.cn_hash += *p;

	XFSDEB(XDEBDNLC, ("xfs_dnlc_enter: calling cache_enter:"
			  "dvp = %p, vp = %p, cnp = (%s, %ld, %lu)\n",
			  dvp, vp, cn.cn_nameptr, cn.cn_namelen, cn.cn_hash));

	if (cn.cn_namelen <= NCHNAMLEN)
		cache_enter(dvp, vp, &cn);

	tbl.len = cn.cn_namelen;
	bcopy(name, tbl.name, tbl.len);
	tbl.dvp = dvp;
	tbl.vp = vp;
	tbl.dvpid = dvp->v_id;
	tbl.vpid = vp->v_id;

	return 0;
d106 3
a108 38
int
xfs_dnlc_lookup(struct vnode *dvp, struct componentname *cnp,
		struct vnode **res)
{
	int error;

	XFSDEB(XDEBDNLC, ("xfs_dnlc_lookup(0x%x, \"%s\")\n",
			  (int) dvp, cnp->cn_nameptr));

	XFSDEB(XDEBDNLC, ("xfs_dnlc_lookup: v_id = %ld\n",
			  dvp->v_id));

	XFSDEB(XDEBDNLC, ("xfs_dnlc_lookup: calling cache_lookup:"
			  "dvp = %p, cnp = (%s, %ld, %lu), flags = %lx\n",
			  dvp, cnp->cn_nameptr, cnp->cn_namelen, cnp->cn_hash,
			  cnp->cn_flags));

	cnp->cn_flags |= MAKEENTRY;

	error = cache_lookup(dvp, res, cnp);

	XFSDEB(XDEBDNLC, ("xfs_dnlc_lookup: cache_lookup returned. "
			  "error == %d, *res == %p\n", error, *res));

	if (error == -1 || error == ENOENT)
		return error;

	if (tbl.dvp == dvp
	    && tbl.len == cnp->cn_namelen
	    && strncmp(tbl.name, cnp->cn_nameptr, cnp->cn_namelen) == 0
	    && tbl.dvpid == tbl.dvp->v_id
	    && tbl.vpid == tbl.vp->v_id) {
		*res = tbl.vp;
		return -1;
	}

	return 0;
}
d111 1
a111 1
xfs_dnlc_purge(struct mount *mp)
d113 1
a113 6
	XFSDEB(XDEBDNLC, ("xfs_dnlc_purge()\n"));

	tbl.dvp = tbl.vp = NULL;
	tbl.name[0] = '\0';
	tbl.len = 0;
	tbl.dvpid = tbl.vpid = 0;
d115 2
a116 1
	cache_purgevfs(mp);
d120 1
a120 1
 * Returns 1 if pag has any rights set in the node
d122 1
d124 2
a125 1
xfs_has_pag(const struct xfs_node *xn, pag_t pag)
d127 1
a127 1
	int i;
d129 9
a137 3
	for (i = 0; i < MAXRIGHTS; i++)
		if (xn->id[i] == pag)
			return 1;
d139 1
a139 1
	return 0;
@


1.4.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
d3 2
a4 2
 * Copyright (c) 2002 - 2003, Stockholms Universitet
 * (Stockholm University, Stockholm Sweden)
d18 6
a23 1
 * 3. Neither the name of the university nor the names of its contributors
d27 2
a28 2
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
d30 8
a37 8
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
d40 9
a48 1
#include <xfs/xfs_locl.h>
a51 3
#include <xfs/xfs_node.h>
#include <xfs/xfs_vnodeops.h>
#include <xfs/xfs_queue.h>
d53 1
a53 1
RCSID("$arla: xfs_node.c,v 1.3 2003/02/06 12:56:09 lha Exp $");
d55 5
a59 2
#define xfs_hash(node) \
  (((node)->a+(node)->b+(node)->c+(node)->d) % XN_HASHSIZE)
d62 5
a66 1
 * Init the nnp node storage system
d69 3
a71 2
void
nnfs_init_head(struct xfs_nodelist_head *head)
d73 2
a74 1
    int i;
d76 61
a136 2
    for (i = 0; i < XN_HASHSIZE; i++)
	NNPQUEUE_INIT(&head->nh_nodelist[i]);
a138 6
/*
 * Tries to purge all nodes from the hashtable. Nodes that unpurgeable
 * (still used nodes) are given to proc for special termination
 * (conversion to dead node).
 */

d140 1
a140 2
xfs_node_purge(struct xfs_nodelist_head *head, 
		 void (*func)(struct xfs_node *))
d142 15
a156 1
    panic("xfs_node_purge");
d159 35
a193 3
/*
 * xfs_node_find returns the node with the handle `handlep'.
 */
d196 1
a196 1
xfs_node_find(struct xfs_nodelist_head *head, xfs_handle *handlep)
d198 2
a199 2
    struct nh_node_list *h;
    struct xfs_node *nn;
d201 2
a202 1
    h = &head->nh_nodelist[xfs_hash(handlep)];
d204 14
a217 4
    NNPQUEUE_FOREACH(nn, h, nn_hash) {
	if (xfs_handle_eq(handlep, &nn->handle))
	    break;
    }
d219 53
a271 1
    return nn;
d274 76
a349 3
/*
 * Remove the node `node' from the node storage system.
 */
d351 2
a352 2
void
xfs_remove_node(struct xfs_nodelist_head *head, struct xfs_node *node)
d354 8
a361 1
    struct nh_node_list *h;
d363 21
a383 2
    h = &head->nh_nodelist[xfs_hash(&node->handle)];
    NNPQUEUE_REMOVE(node, h, nn_hash);
d386 38
a423 3
/*
 * Add the node `node' from the node storage system.
 */
d426 1
a426 1
xfs_insert(struct xfs_nodelist_head *head, struct xfs_node *node)
d428 6
a433 1
    struct nh_node_list *h;
d435 1
a435 2
    h = &head->nh_nodelist[xfs_hash(&node->handle)];
    NNPQUEUE_INSERT_HEAD(h, node, nn_hash);
d439 1
a439 1
 * Update `old_handlep' in the node list `head' to `new_handlep'.
a440 1

d442 1
a442 2
xfs_update_handle(struct xfs_nodelist_head *head,
		    xfs_handle *old_handlep, xfs_handle *new_handlep)
d444 1
a444 1
    struct xfs_node *node;
d446 3
a448 9
    node = xfs_node_find(head, new_handlep);
    if (node)
	return EEXIST;
    node = xfs_node_find(head, old_handlep);
    if (node == NULL)
	return ENOENT;
    xfs_remove_node(head, node);
    node->handle = *new_handlep;
    xfs_insert(head, node);
d450 1
a450 1
    return 0;
@


1.3
log
@ * reorganize some includes
 * start using the VT_XFS tag on vnodes
 * be more paranoid about closed channel when going to sleep.
@
text
@d1 1
a1 1
/*	$OpenBSD: xfs_node.c,v 1.2 1998/08/31 05:13:16 art Exp $	*/
@


1.2
log
@indent the code and move around some includes, after discussion with Theo
@
text
@d1 1
a1 1
/*	$OpenBSD: xfs_node.c,v 1.1 1998/08/30 16:47:21 art Exp $	*/
d47 1
d97 1
a97 1
		error = getnewvnode(VT_AFS, XFS_TO_VFS(xfsp), xfs_vnodeop_p,
@


1.1
log
@xfs - a filesystem using a user-land cache manager. Designed for AFS.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d69 2
a70 4
new_xfs_node(struct xfs *xfsp,
	     struct xfs_msg_node *node,
	     struct xfs_node **xpp,
	     struct proc *p)
d72 2
a73 2
    int do_vget = 0;
    struct xfs_node *result;
d75 5
a79 5
    XFSDEB(XDEBNODE, ("new_xfs_node %d.%d.%d.%d\n",
		      node->handle.a,
		      node->handle.b,
		      node->handle.c,
		      node->handle.d));
d81 35
a115 2
    /* Does not allow duplicates */
    result = xfs_node_find(xfsp, &node->handle);
d117 12
a128 3
    if (result == 0) {
	int error;
	struct vnode *v;
d130 2
a131 6
	result = xfs_alloc(sizeof(*result));
	if (result == 0) {
	    printf("xfs_alloc(%d) failed\n", (int) sizeof(*result));
	    panic("new_xfs_node: You Loose!");
	}
	bzero(result, sizeof(*result));
d133 3
a135 40
	error = getnewvnode(VT_AFS, XFS_TO_VFS(xfsp), xfs_vnodeop_p, &v);
	if (error) {
	    XFSDEB(XDEBVNOPS,
		   ("XFS PANIC! new_xfs_node: could not allocate node"));
	    return error;
	}
	v->v_data = result;
	result->vn = v;

	result->anonrights = node->anonrights;

	result->handle = node->handle;
	result->flags = 0;
	result->tokens = 0;

	xfsp->nnodes++;
    } else {
	/* Node is already cached */
	do_vget = 1;
    }

    /* Init other fields */
    xfs_attr2vattr(&node->attr, &result->attr);
    result->vn->v_type = result->attr.va_type;
    XFS_TOKEN_SET(result, XFS_ATTR_R, XFS_ATTR_MASK);
    bcopy(node->id, result->id, sizeof(result->id));
    bcopy(node->rights, result->rights, sizeof(result->rights));

    /*
     * We need to postpone this until here because (on FreeBSD) vget
     * tries to install a pager on the vnode and for that it wants to
     * retrieve the size with getattr.
     */

    if(do_vget)
	vget(XNODE_TO_VNODE(result), 0, p);

    *xpp = result;
    XFSDEB(XDEBNODE, ("return: new_xfs_node\n"));
    return 0;
d141 1
a141 1
    struct xfs *xfsp = XFS_FROM_XNODE(node);
d143 1
a143 1
    XFSDEB(XDEBNODE, ("free_xfs_node starting\n"));
d145 1
a145 1
    /* XXX Really need to put back dirty data first. */
d147 7
a153 7
    if (DATA_FROM_XNODE(node)) {
	vrele(DATA_FROM_XNODE(node));
	DATA_FROM_XNODE(node) = NULL;
    }
    xfsp->nnodes--;
    XNODE_TO_VNODE(node)->v_data = NULL;
    xfs_free(node, sizeof(*node));
d155 1
a155 1
    XFSDEB(XDEBNODE, ("free_xfs_node done\n"));
d161 2
a162 2
    int error = 0;
    struct mount *mp = XFS_TO_VFS(xfsp);
d164 4
a167 4
    if (mp == NULL) {
	XFSDEB(XDEBNODE, ("free_all_xfs_nodes already freed\n"));
	return 0;
    }
d169 1
a169 1
    XFSDEB(XDEBNODE, ("free_all_xfs_nodes starting\n"));
d171 1
a171 1
    xfs_dnlc_purge(mp);
d173 1
a173 1
    XFSDEB(XDEBNODE, ("free_all_xfs_nodes now removing root\n"));
d175 4
a178 4
    if (xfsp->root) {
	vgone(XNODE_TO_VNODE(xfsp->root));
	xfsp->root = 0;
    }
d180 2
a181 2
    XFSDEB(XDEBNODE, ("free_all_xfs_nodes root removed\n"));
    XFSDEB(XDEBNODE, ("free_all_xfs_nodes now killing all remaining nodes\n"));
d183 6
a188 1
    error = vflush(mp, NULL, flags);
d190 1
a190 3
    if (error) {
	XFSDEB(XDEBNODE, ("xfree_all_xfs_nodes: vflush() error == %d\n",
			  error));
a191 4
    }

    XFSDEB(XDEBNODE, ("free_all_xfs_nodes done\n"));
    return error;
d197 5
a201 2
    struct vnode *t;
    struct xfs_node *xn = NULL;
d203 8
a210 2
    XFSDEB(XDEBNODE, ("xfs_node_find: xfsp = %p handlep = %p\n", 
		      xfsp, handlep));
d212 4
a215 13
    for (t = XFS_TO_VFS(xfsp)->mnt_vnodelist.lh_first;
	 t != NULL;
	 t = t->v_mntvnodes.le_next) {
	xn = VNODE_TO_XNODE(t);

	if (xn && xfs_handle_eq(&xn->handle, handlep))
	    break;
    }

    if (t != NULL)
	return xn;
    else
	return NULL;
d221 50
a270 50
    bzero(xa, sizeof(*xa));
    if (va->va_mode != (mode_t) VNOVAL)
	XA_SET_MODE(xa, va->va_mode);
    if (va->va_nlink != VNOVAL)
	XA_SET_NLINK(xa, va->va_nlink);
    if (va->va_size != (u_quad_t) VNOVAL)
	XA_SET_SIZE(xa, va->va_size);
    if (va->va_uid != VNOVAL)
	XA_SET_UID(xa, va->va_uid);
    if (va->va_gid != VNOVAL)
	XA_SET_GID(xa, va->va_gid);
    if (va->va_atime.tv_sec != VNOVAL)
	XA_SET_ATIME(xa, va->va_atime.tv_sec);
    if (va->va_mtime.tv_sec != VNOVAL)
	XA_SET_MTIME(xa, va->va_mtime.tv_sec);
    if (va->va_ctime.tv_sec != VNOVAL)
	XA_SET_CTIME(xa, va->va_ctime.tv_sec);
    if (va->va_fileid != VNOVAL)
	XA_SET_FILEID(xa, va->va_fileid);
    switch (va->va_type) {
    case VNON:
	xa->xa_type = XFS_FILE_NON;
	break;
    case VREG:
	xa->xa_type = XFS_FILE_REG;
	break;
    case VDIR:
	xa->xa_type = XFS_FILE_DIR;
	break;
    case VBLK:
	xa->xa_type = XFS_FILE_BLK;
	break;
    case VCHR:
	xa->xa_type = XFS_FILE_CHR;
	break;
    case VLNK:
	xa->xa_type = XFS_FILE_LNK;
	break;
    case VSOCK:
	xa->xa_type = XFS_FILE_SOCK;
	break;
    case VFIFO:
	xa->xa_type = XFS_FILE_FIFO;
	break;
    case VBAD:
	xa->xa_type = XFS_FILE_BAD;
	break;
    default:
	panic("xfs_attr2attr: bad value");
    }
d276 58
a333 57
    VATTR_NULL(va);
    if (XA_VALID_MODE(xa))
	va->va_mode = xa->xa_mode;
    if (XA_VALID_NLINK(xa))
	va->va_nlink = xa->xa_nlink;
    if (XA_VALID_SIZE(xa))
	va->va_size = xa->xa_size;
    if (XA_VALID_UID(xa))
	va->va_uid = xa->xa_uid;
    if (XA_VALID_GID(xa))
	va->va_gid = xa->xa_gid;
    if (XA_VALID_ATIME(xa)) {
	va->va_atime.tv_sec = xa->xa_atime;
	va->va_atime.tv_nsec = 0;
    }
    if (XA_VALID_MTIME(xa)) {
	va->va_mtime.tv_sec = xa->xa_mtime;
	va->va_mtime.tv_nsec = 0;
    }
    if (XA_VALID_CTIME(xa)) {
	va->va_ctime.tv_sec = xa->xa_ctime;
	va->va_ctime.tv_nsec = 0;
    }
    if (XA_VALID_FILEID(xa)) {
	va->va_fileid = xa->xa_fileid;
    }
    if (XA_VALID_TYPE(xa)) {
	switch (xa->xa_type) {
	case XFS_FILE_NON:
	    va->va_type = VNON;
	    break;
	case XFS_FILE_REG:
	    va->va_type = VREG;
	    break;
	case XFS_FILE_DIR:
	    va->va_type = VDIR;
	    break;
	case XFS_FILE_BLK:
	    va->va_type = VBLK;
	    break;
	case XFS_FILE_CHR:
	    va->va_type = VCHR;
	    break;
	case XFS_FILE_LNK:
	    va->va_type = VLNK;
	    break;
	case XFS_FILE_SOCK:
	    va->va_type = VSOCK;
	    break;
	case XFS_FILE_FIFO:
	    va->va_type = VFIFO;
	    break;
	case XFS_FILE_BAD:
	    va->va_type = VBAD;
	    break;
	default:
	    panic("xfs_attr2vattr: bad value");
d335 3
a337 4
    }
    va->va_flags = 0;
    va->va_blocksize = 8192;
    va->va_bytes = va->va_size;
d342 4
a345 4
    struct vnode *dvp, *vp;
    char name[MAXNAMLEN + 1];
    size_t len;
    u_long dvpid, vpid;
d353 2
a354 2
    struct componentname cn;
    char *p;
d356 2
a357 2
    XFSDEB(XDEBDNLC, ("xfs_dnlc_enter(0x%x, \"%s\", 0x%x)\n",
		      (int) dvp, name, (int) vp));
d359 2
a360 2
    XFSDEB(XDEBDNLC, ("xfs_dnlc_enter: v_id = %ld\n",
		      dvp->v_id));
d362 19
a380 19
    cn.cn_namelen = strlen(name);
    cn.cn_nameptr = name;
    cn.cn_hash = 0;
    for (p = name; *p; ++p)
	cn.cn_hash += *p;

    XFSDEB(XDEBDNLC, ("xfs_dnlc_enter: calling cache_enter:"
		      "dvp = %p, vp = %p, cnp = (%s, %ld, %lu)\n",
		      dvp, vp, cn.cn_nameptr, cn.cn_namelen, cn.cn_hash));

    if (cn.cn_namelen <= NCHNAMLEN)
	cache_enter(dvp, vp, &cn);

    tbl.len = cn.cn_namelen;
    bcopy(name, tbl.name, tbl.len);
    tbl.dvp = dvp;
    tbl.vp = vp;
    tbl.dvpid = dvp->v_id;
    tbl.vpid = vp->v_id;
d382 1
a382 1
    return 0;
d386 1
a386 2
xfs_dnlc_lookup(struct vnode *dvp,
		struct componentname *cnp,
d389 1
a389 1
    int error;
d391 2
a392 2
    XFSDEB(XDEBDNLC, ("xfs_dnlc_lookup(0x%x, \"%s\")\n",
		      (int) dvp, cnp->cn_nameptr));
d394 2
a395 2
    XFSDEB(XDEBDNLC, ("xfs_dnlc_lookup: v_id = %ld\n",
		      dvp->v_id));
d397 23
a419 4
    XFSDEB(XDEBDNLC, ("xfs_dnlc_lookup: calling cache_lookup:"
		      "dvp = %p, cnp = (%s, %ld, %lu), flags = %lx\n",
		      dvp, cnp->cn_nameptr, cnp->cn_namelen, cnp->cn_hash,
		      cnp->cn_flags));
d421 1
a421 20
    cnp->cn_flags |= MAKEENTRY;

    error = cache_lookup(dvp, res, cnp);

    XFSDEB(XDEBDNLC, ("xfs_dnlc_lookup: cache_lookup returned. "
		      "error == %d, *res == %p\n", error, *res));

    if (error == -1 || error == ENOENT)
	return error;

    if (tbl.dvp == dvp
	&& tbl.len == cnp->cn_namelen
	&& strncmp(tbl.name, cnp->cn_nameptr, cnp->cn_namelen) == 0
	&& tbl.dvpid == tbl.dvp->v_id
	&& tbl.vpid == tbl.vp->v_id) {
	*res = tbl.vp;
	return -1;
    }

    return 0;
d427 1
a427 1
    XFSDEB(XDEBDNLC, ("xfs_dnlc_purge()\n"));
d429 4
a432 4
    tbl.dvp = tbl.vp = NULL;
    tbl.name[0] = '\0';
    tbl.len = 0;
    tbl.dvpid = tbl.vpid = 0;
d434 1
a434 1
    cache_purgevfs(mp);
d443 1
a443 1
    int i;
d445 3
a447 3
    for (i = 0; i < MAXRIGHTS; i++)
	if (xn->id[i] == pag)
	    return 1;
d449 1
a449 1
    return 0;
@


1.1.1.1
log
@Import xfs from arla-current as of 5 Aug 2003.

ok deraadt@@
@
text
@d1 1
d3 2
a4 2
 * Copyright (c) 2002 - 2003, Stockholms Universitet
 * (Stockholm University, Stockholm Sweden)
d18 6
a23 1
 * 3. Neither the name of the university nor the names of its contributors
d27 2
a28 2
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
d30 8
a37 8
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
d40 8
a47 1
#include <xfs/xfs_locl.h>
a50 3
#include <xfs/xfs_node.h>
#include <xfs/xfs_vnodeops.h>
#include <xfs/xfs_queue.h>
d52 1
a52 1
RCSID("$arla: xfs_node.c,v 1.3 2003/02/06 12:56:09 lha Exp $");
d54 5
a58 2
#define xfs_hash(node) \
  (((node)->a+(node)->b+(node)->c+(node)->d) % XN_HASHSIZE)
d61 5
a65 1
 * Init the nnp node storage system
d68 5
a72 2
void
nnfs_init_head(struct xfs_nodelist_head *head)
d74 43
a116 1
    int i;
d118 19
a136 2
    for (i = 0; i < XN_HASHSIZE; i++)
	NNPQUEUE_INIT(&head->nh_nodelist[i]);
a138 6
/*
 * Tries to purge all nodes from the hashtable. Nodes that unpurgeable
 * (still used nodes) are given to proc for special termination
 * (conversion to dead node).
 */

d140 1
a140 2
xfs_node_purge(struct xfs_nodelist_head *head, 
		 void (*func)(struct xfs_node *))
d142 15
a156 1
    panic("xfs_node_purge");
d159 36
a194 3
/*
 * xfs_node_find returns the node with the handle `handlep'.
 */
d197 1
a197 1
xfs_node_find(struct xfs_nodelist_head *head, xfs_handle *handlep)
d199 5
a203 2
    struct nh_node_list *h;
    struct xfs_node *nn;
d205 4
a208 1
    h = &head->nh_nodelist[xfs_hash(handlep)];
d210 1
a210 2
    NNPQUEUE_FOREACH(nn, h, nn_hash) {
	if (xfs_handle_eq(handlep, &nn->handle))
d214 4
a217 1
    return nn;
d220 54
a273 3
/*
 * Remove the node `node' from the node storage system.
 */
d276 78
a353 1
xfs_remove_node(struct xfs_nodelist_head *head, struct xfs_node *node)
d355 5
a359 1
    struct nh_node_list *h;
d361 24
a384 2
    h = &head->nh_nodelist[xfs_hash(&node->handle)];
    NNPQUEUE_REMOVE(node, h, nn_hash);
d387 39
a425 3
/*
 * Add the node `node' from the node storage system.
 */
d428 1
a428 1
xfs_insert(struct xfs_nodelist_head *head, struct xfs_node *node)
d430 6
a435 1
    struct nh_node_list *h;
d437 1
a437 2
    h = &head->nh_nodelist[xfs_hash(&node->handle)];
    NNPQUEUE_INSERT_HEAD(h, node, nn_hash);
d441 1
a441 1
 * Update `old_handlep' in the node list `head' to `new_handlep'.
a442 1

d444 1
a444 2
xfs_update_handle(struct xfs_nodelist_head *head,
		    xfs_handle *old_handlep, xfs_handle *new_handlep)
d446 1
a446 1
    struct xfs_node *node;
d448 3
a450 9
    node = xfs_node_find(head, new_handlep);
    if (node)
	return EEXIST;
    node = xfs_node_find(head, old_handlep);
    if (node == NULL)
	return ENOENT;
    xfs_remove_node(head, node);
    node->handle = *new_handlep;
    xfs_insert(head, node);
@


