head	1.6;
access;
symbols
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.2
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.3.0.8
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	SMP:1.1.0.4
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2009.06.03.14.45.55;	author jj;	state dead;
branches;
next	1.5;

1.5
date	2003.08.12.07.53.47;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.10.32;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.26.54;	author art;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	2000.03.03.00.54.59;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	99.04.30.01.59.02;	author art;	state Exp;
branches
	1.1.1.1
	1.1.4.1;
next	;

1.1.1.1
date	2002.06.07.03.33.00;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.12.07.43.49;	author hin;	state Exp;
branches;
next	;

1.1.4.1
date	2000.03.24.09.09.56;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2001.05.14.22.47.54;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.03.28.00.41.31;	author niklas;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2004.02.19.11.01.52;	author niklas;	state Exp;
branches;
next	;

1.3.8.1
date	2002.06.11.03.33.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* $arla: xfs_vnodeops.h,v 1.25 2002/09/07 10:46:12 lha Exp $ */

#ifndef _xfs_vnodeops_h
#define _xfs_vnodeops_h

/*
 * xfs_vfs_readlock
 * xfs_vfs_writelock
 * xfs_vfs_unlock
 */

#ifdef __osf__			/* XXX - what about VN_LOCK? */

#define xfs_vfs_readlock(vp, proc) VREF((vp))
#define xfs_vfs_writelock(vp, proc) VREF((vp))
#define xfs_vfs_unlock(vp, proc) vrele((vp))

/* XXX - should this do anything? */

#define xfs_vfs_vn_lock(vp, flags, proc) (0)

#elif defined(HAVE_TWO_ARGUMENT_VOP_LOCK)

#define xfs_vfs_readlock(vp, proc) vn_lock((vp), LK_SHARED | LK_RETRY)
#define xfs_vfs_writelock(vp, proc) vn_lock((vp), LK_EXCLUSIVE | LK_RETRY)
#define xfs_vfs_unlock(vp, proc) VOP_UNLOCK((vp), 0)
#define xfs_vfs_vn_lock(vp, flags, proc) vn_lock((vp), (flags))

#elif defined(HAVE_THREE_ARGUMENT_VOP_LOCK)

#define xfs_vfs_readlock(vp, proc) vn_lock((vp), LK_SHARED | LK_RETRY, (proc))
#define xfs_vfs_writelock(vp, proc) vn_lock((vp), LK_EXCLUSIVE | LK_RETRY, (proc))
#define xfs_vfs_unlock(vp, proc) VOP_UNLOCK((vp), 0, (proc))
#define xfs_vfs_vn_lock(vp, flags, proc) vn_lock((vp), (flags), (proc))

#elif defined(HAVE_ONE_ARGUMENT_VOP_LOCK)

#define xfs_vfs_readlock(vp, proc) VOP_LOCK((vp))
#define xfs_vfs_writelock(vp, proc) VOP_LOCK((vp))
#define xfs_vfs_unlock(vp, proc) VOP_UNLOCK((vp))

/* XXX - should this do anything? */

#define xfs_vfs_vn_lock(vp, flags, proc) (0)

#else

#error what kind of VOP_LOCK?

#endif

int
xfs_open_valid(struct vnode *vp, struct ucred *cred, d_thread_t *p,
	       u_int tok);

int
xfs_attr_valid(struct vnode *vp, struct ucred *cred, d_thread_t *p,
	       u_int tok);

int
xfs_fetch_rights(struct vnode *vp, struct ucred *cred, d_thread_t *p);

int
xfs_data_valid(struct vnode *vp, struct ucred *cred, d_thread_t *p,
	       u_int tok, uint32_t offset);

int
xfs_open_common(struct vnode *vp,
		int mode,
		struct ucred *cred,
		d_thread_t *p);

int
xfs_fsync_common(struct vnode *vp, struct ucred *cred,
		 int waitfor, d_thread_t *proc);

int
xfs_close_common(struct vnode *vp, int fflag,
		 d_thread_t *proc, struct ucred *cred);

int
xfs_read_common(struct vnode *vp, struct uio *uio, int ioflag,
		struct ucred *cred);

int
xfs_write_common(struct vnode *vp, struct uio *uiop, int ioflag,
		 struct ucred *cred);

int
xfs_getattr_common(struct vnode *vp, struct vattr *vap,
		   struct ucred *cred, d_thread_t *p);

int
xfs_setattr_common(struct vnode *vp, struct vattr *vap,
		   struct ucred *cred, d_thread_t *p);

int
xfs_access_common(struct vnode *vp, int mode,
		  struct ucred *cred, d_thread_t *p);

int
xfs_lookup_common(struct vnode *dvp, 
		  xfs_componentname *cnp, 
		  struct vnode **vpp);

int
xfs_create_common(struct vnode *dvp,
		  const char *name,
		  struct vattr *vap, 
		  struct ucred *cred,
		  d_thread_t *p);

int
xfs_remove_common(struct vnode *dvp, 
		  struct vnode *vp, 
		  const char *name,
		  struct ucred *cred,
		  d_thread_t *p);

int
xfs_rename_common(struct vnode *fdvp, 
		  struct vnode *fvp,
		  const char *fname,
		  struct vnode *tdvp,
		  struct vnode *tvp,
		  const char *tname,
		  struct ucred *cred,
		  d_thread_t *p);

int
xfs_mkdir_common(struct vnode *dvp, 
		 const char *name,
		 struct vattr *vap, 
		 struct ucred *cred,
		 d_thread_t *p);

int
xfs_rmdir_common(struct vnode *dvp,
		 struct vnode *vp,
		 const char *name,
		 struct ucred *cred,
		 d_thread_t *p);

int
xfs_readdir_common(struct vnode *vp, 
		   struct uio *uiop, 
		   struct ucred *cred,
		   d_thread_t *p,
		   int *eofflag);

int
xfs_link_common(struct vnode *dvp, 
		struct vnode *vp, 
		const char *name,
		struct ucred *cred,
		d_thread_t *p);

int
xfs_symlink_common(struct vnode *dvp,
		   struct vnode **vpp,
		   xfs_componentname *cnp,
		   struct vattr *vap,
		   char *target);

int
xfs_readlink_common(struct vnode *vp, struct uio *uiop, struct ucred *cred);

int
xfs_inactive_common(struct vnode *vp, d_thread_t *p);

int
xfs_reclaim_common(struct vnode *vp);

int
xfs_eopnotsupp (struct vop_generic_args *ap);

int
xfs_returnzero (struct vop_generic_args *ap);

void
xfs_printnode_common (struct vnode *vp);

size_t
xfs_uio_end_length (struct uio *uio);


#endif /* _xfs_vnodeops_h */
@


1.5
log
@Merge
@
text
@@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d34 1
a34 1
/* $Id: xfs_vnodeops.h,v 1.3 2000/09/11 14:26:54 art Exp $ */
d86 1
a86 1
xfs_open_valid(struct vnode *vp, struct ucred *cred, struct proc *p,
d90 1
a90 1
xfs_attr_valid(struct vnode *vp, struct ucred *cred, struct proc *p,
d94 1
a94 1
xfs_fetch_rights(struct vnode *vp, struct ucred *cred, struct proc *p);
d97 2
a98 2
xfs_data_valid(struct vnode *vp, struct ucred *cred, struct proc *p,
	       u_int tok);
d104 1
a104 1
		struct proc *p);
d108 1
a108 1
		 int waitfor, struct proc *proc);
d112 1
a112 1
		 struct proc *proc, struct ucred *cred);
d124 1
a124 1
		   struct ucred *cred, struct proc *p);
d128 1
a128 1
		   struct ucred *cred, struct proc *p);
d132 1
a132 1
		  struct ucred *cred, struct proc *p);
d144 1
a144 1
		  struct proc *p);
d151 1
a151 1
		  struct proc *p);
d161 1
a161 1
		  struct proc *p);
d168 1
a168 1
		 struct proc *p);
d175 1
a175 1
		 struct proc *p);
d181 1
a181 1
		   struct proc *p,
d189 1
a189 1
		struct proc *p);
d202 1
a202 1
xfs_inactive_common(struct vnode *vp, struct proc *p);
d215 4
@


1.3
log
@New xfs from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 *
 * 4. Neither the name of the Institute nor the names of its contributors
d34 1
a34 1
/* $Id: xfs_vnodeops.h,v 1.18 2000/08/02 00:58:55 assar Exp $ */
@


1.3.8.1
log
@Sync UBC branch to -current
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
/* $Id: xfs_vnodeops.h,v 1.3 2000/09/11 14:26:54 art Exp $ */
@


1.2
log
@$OpenBSD$
@
text
@a0 1
/* $OpenBSD: xfs_vnodeops.h,v 1.1 1999/04/30 01:59:02 art Exp $ */
d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d39 1
d56 4
d65 1
d72 1
d74 1
a74 1
#else
d80 8
d91 2
a92 1
xfs_open_valid(struct vnode * vp, struct ucred * cred, u_int tok);
d95 2
a96 1
xfs_attr_valid(struct vnode * vp, struct ucred * cred, u_int tok);
d99 1
a99 1
xfs_fetch_rights(struct vnode * vp, struct ucred * cred);
d102 8
a109 1
xfs_data_valid(struct vnode * vp, struct ucred * cred, u_int tok);
d120 2
a121 1
xfs_read_common(struct vnode *vp, struct uio *uio, int ioflag, struct ucred *cred);
d124 2
a125 1
xfs_write_common(struct vnode *vp, struct uio *uiop, int ioflag, struct ucred *cred);
d128 2
a129 1
xfs_getattr_common(struct vnode *vp, struct vattr *vap, struct ucred *cred);
d132 2
a133 1
xfs_setattr_common(struct vnode *vp, struct vattr *vap, struct ucred *cred);
d136 2
a137 1
xfs_access_common(struct vnode *vp, int mode, struct ucred *cred);
a144 7
xfs_lookup_name(struct vnode *dvp, 
		const char *name,
		struct proc *proc,
		struct ucred *cred,
		struct vnode **vpp);

int
d148 2
a149 1
		  struct ucred *cred);
d155 2
a156 1
		  struct ucred *cred);
d165 2
a166 1
		  struct ucred *cred);
d172 2
a173 1
		 struct ucred *cred);
d179 2
a180 1
		 struct ucred *cred);
d186 1
d193 2
a194 1
		struct ucred *cred);
d199 1
a199 3
		   const char *name,
		   struct proc *proc,
		   struct ucred *cred,
d213 1
a213 1
xfs_eopnotsupp (void *);
d216 1
a216 1
xfs_returnzero (void *v);
@


1.1
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d1 1
a39 1
/* $Id: xfs_vnodeops.h,v 1.12 1999/02/06 03:51:12 assar Exp $ */
@


1.1.1.1
log
@Import of xfs from arla-0.35.7
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
/* $Id: xfs_vnodeops.h,v 1.1.1.1 2002/06/05 17:24:11 hin Exp $ */
a55 4
/* XXX - should this do anything? */

#define xfs_vfs_vn_lock(vp, flags, proc) (0)

a60 1
#define xfs_vfs_vn_lock(vp, flags, proc) vn_lock((vp), (flags))
a66 1
#define xfs_vfs_vn_lock(vp, flags, proc) vn_lock((vp), (flags), (proc))
d68 1
a68 1
#elif defined(HAVE_ONE_ARGUMENT_VOP_LOCK)
a73 8
/* XXX - should this do anything? */

#define xfs_vfs_vn_lock(vp, flags, proc) (0)

#else

#error what kind of VOP_LOCK?

d77 1
a77 2
xfs_open_valid(struct vnode *vp, struct ucred *cred, struct proc *p,
	       u_int tok);
d80 1
a80 2
xfs_attr_valid(struct vnode *vp, struct ucred *cred, struct proc *p,
	       u_int tok);
d83 1
a83 1
xfs_fetch_rights(struct vnode *vp, struct ucred *cred, struct proc *p);
d86 1
a86 8
xfs_data_valid(struct vnode *vp, struct ucred *cred, struct proc *p,
	       u_int tok);

int
xfs_open_common(struct vnode *vp,
		int mode,
		struct ucred *cred,
		struct proc *p);
d97 1
a97 2
xfs_read_common(struct vnode *vp, struct uio *uio, int ioflag,
		struct ucred *cred);
d100 1
a100 2
xfs_write_common(struct vnode *vp, struct uio *uiop, int ioflag,
		 struct ucred *cred);
d103 1
a103 2
xfs_getattr_common(struct vnode *vp, struct vattr *vap,
		   struct ucred *cred, struct proc *p);
d106 1
a106 2
xfs_setattr_common(struct vnode *vp, struct vattr *vap,
		   struct ucred *cred, struct proc *p);
d109 1
a109 2
xfs_access_common(struct vnode *vp, int mode,
		  struct ucred *cred, struct proc *p);
d117 7
d127 1
a127 2
		  struct ucred *cred,
		  struct proc *p);
d133 1
a133 2
		  struct ucred *cred,
		  struct proc *p);
d142 1
a142 2
		  struct ucred *cred,
		  struct proc *p);
d148 1
a148 2
		 struct ucred *cred,
		 struct proc *p);
d154 1
a154 2
		 struct ucred *cred,
		 struct proc *p);
a159 1
		   struct proc *p,
d166 1
a166 2
		struct ucred *cred,
		struct proc *p);
d171 3
a173 1
		   xfs_componentname *cnp,
d187 1
a187 1
xfs_eopnotsupp (struct vop_generic_args *ap);
d190 1
a190 1
xfs_returnzero (struct vop_generic_args *ap);
@


1.1.1.2
log
@Import xfs from arla-current as of 5 Aug 2003.

ok deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d34 1
a34 1
/* $arla: xfs_vnodeops.h,v 1.25 2002/09/07 10:46:12 lha Exp $ */
d86 1
a86 1
xfs_open_valid(struct vnode *vp, struct ucred *cred, d_thread_t *p,
d90 1
a90 1
xfs_attr_valid(struct vnode *vp, struct ucred *cred, d_thread_t *p,
d94 1
a94 1
xfs_fetch_rights(struct vnode *vp, struct ucred *cred, d_thread_t *p);
d97 2
a98 2
xfs_data_valid(struct vnode *vp, struct ucred *cred, d_thread_t *p,
	       u_int tok, uint32_t offset);
d104 1
a104 1
		d_thread_t *p);
d108 1
a108 1
		 int waitfor, d_thread_t *proc);
d112 1
a112 1
		 d_thread_t *proc, struct ucred *cred);
d124 1
a124 1
		   struct ucred *cred, d_thread_t *p);
d128 1
a128 1
		   struct ucred *cred, d_thread_t *p);
d132 1
a132 1
		  struct ucred *cred, d_thread_t *p);
d144 1
a144 1
		  d_thread_t *p);
d151 1
a151 1
		  d_thread_t *p);
d161 1
a161 1
		  d_thread_t *p);
d168 1
a168 1
		 d_thread_t *p);
d175 1
a175 1
		 d_thread_t *p);
d181 1
a181 1
		   d_thread_t *p,
d189 1
a189 1
		d_thread_t *p);
d202 1
a202 1
xfs_inactive_common(struct vnode *vp, d_thread_t *p);
a214 4

size_t
xfs_uio_end_length (struct uio *uio);

@


1.1.4.1
log
@Sync with -current
@
text
@a0 1
/* $OpenBSD$ */
d39 1
@


1.1.4.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
a39 1
/* $Id: xfs_vnodeops.h,v 1.3 2000/09/11 14:26:54 art Exp $ */
a55 4
/* XXX - should this do anything? */

#define xfs_vfs_vn_lock(vp, flags, proc) (0)

a60 1
#define xfs_vfs_vn_lock(vp, flags, proc) vn_lock((vp), (flags))
a66 1
#define xfs_vfs_vn_lock(vp, flags, proc) vn_lock((vp), (flags), (proc))
d68 1
a68 1
#elif defined(HAVE_ONE_ARGUMENT_VOP_LOCK)
a73 8
/* XXX - should this do anything? */

#define xfs_vfs_vn_lock(vp, flags, proc) (0)

#else

#error what kind of VOP_LOCK?

d77 1
a77 2
xfs_open_valid(struct vnode *vp, struct ucred *cred, struct proc *p,
	       u_int tok);
d80 1
a80 2
xfs_attr_valid(struct vnode *vp, struct ucred *cred, struct proc *p,
	       u_int tok);
d83 1
a83 1
xfs_fetch_rights(struct vnode *vp, struct ucred *cred, struct proc *p);
d86 1
a86 8
xfs_data_valid(struct vnode *vp, struct ucred *cred, struct proc *p,
	       u_int tok);

int
xfs_open_common(struct vnode *vp,
		int mode,
		struct ucred *cred,
		struct proc *p);
d97 1
a97 2
xfs_read_common(struct vnode *vp, struct uio *uio, int ioflag,
		struct ucred *cred);
d100 1
a100 2
xfs_write_common(struct vnode *vp, struct uio *uiop, int ioflag,
		 struct ucred *cred);
d103 1
a103 2
xfs_getattr_common(struct vnode *vp, struct vattr *vap,
		   struct ucred *cred, struct proc *p);
d106 1
a106 2
xfs_setattr_common(struct vnode *vp, struct vattr *vap,
		   struct ucred *cred, struct proc *p);
d109 1
a109 2
xfs_access_common(struct vnode *vp, int mode,
		  struct ucred *cred, struct proc *p);
d117 7
d127 1
a127 2
		  struct ucred *cred,
		  struct proc *p);
d133 1
a133 2
		  struct ucred *cred,
		  struct proc *p);
d142 1
a142 2
		  struct ucred *cred,
		  struct proc *p);
d148 1
a148 2
		 struct ucred *cred,
		 struct proc *p);
d154 1
a154 2
		 struct ucred *cred,
		 struct proc *p);
a159 1
		   struct proc *p,
d166 1
a166 2
		struct ucred *cred,
		struct proc *p);
d171 3
a173 1
		   xfs_componentname *cnp,
d187 1
a187 1
xfs_eopnotsupp (struct vop_generic_args *ap);
d190 1
a190 1
xfs_returnzero (struct vop_generic_args *ap);
@


1.1.4.3
log
@Sync the SMP branch with 3.3
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
/* $Id$ */
@


1.1.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d34 1
a34 1
/* $arla: xfs_vnodeops.h,v 1.25 2002/09/07 10:46:12 lha Exp $ */
d86 1
a86 1
xfs_open_valid(struct vnode *vp, struct ucred *cred, d_thread_t *p,
d90 1
a90 1
xfs_attr_valid(struct vnode *vp, struct ucred *cred, d_thread_t *p,
d94 1
a94 1
xfs_fetch_rights(struct vnode *vp, struct ucred *cred, d_thread_t *p);
d97 2
a98 2
xfs_data_valid(struct vnode *vp, struct ucred *cred, d_thread_t *p,
	       u_int tok, uint32_t offset);
d104 1
a104 1
		d_thread_t *p);
d108 1
a108 1
		 int waitfor, d_thread_t *proc);
d112 1
a112 1
		 d_thread_t *proc, struct ucred *cred);
d124 1
a124 1
		   struct ucred *cred, d_thread_t *p);
d128 1
a128 1
		   struct ucred *cred, d_thread_t *p);
d132 1
a132 1
		  struct ucred *cred, d_thread_t *p);
d144 1
a144 1
		  d_thread_t *p);
d151 1
a151 1
		  d_thread_t *p);
d161 1
a161 1
		  d_thread_t *p);
d168 1
a168 1
		 d_thread_t *p);
d175 1
a175 1
		 d_thread_t *p);
d181 1
a181 1
		   d_thread_t *p,
d189 1
a189 1
		d_thread_t *p);
d202 1
a202 1
xfs_inactive_common(struct vnode *vp, d_thread_t *p);
a214 4

size_t
xfs_uio_end_length (struct uio *uio);

@


