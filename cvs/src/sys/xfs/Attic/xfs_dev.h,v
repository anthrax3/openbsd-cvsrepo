head	1.9;
access;
symbols
	OPENBSD_4_5:1.8.0.22
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.20
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.18
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.16
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.14
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.12
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	arla-20030805:1.1.1.2
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.5.0.10
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.5.0.8
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.9
date	2009.06.03.14.45.55;	author jj;	state dead;
branches;
next	1.8;

1.8
date	2003.09.28.04.33.44;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.12.07.53.47;	author hin;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.07.04.10.32;	author hin;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.11.14.26.52;	author art;	state Exp;
branches
	1.5.8.1;
next	1.4;

1.4
date	2000.03.03.00.54.58;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	99.04.30.01.59.00;	author art;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	98.08.31.05.13.23;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.08.30.16.47.21;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.03.32.59;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.12.07.43.51;	author hin;	state Exp;
branches;
next	;

1.3.4.1
date	2000.03.24.09.09.54;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.05.14.22.47.52;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2004.02.19.11.01.47;	author niklas;	state Exp;
branches;
next	;

1.5.8.1
date	2002.06.11.03.33.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@/*
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* $arla: xfs_dev.h,v 1.19 2003/01/19 20:53:52 lha Exp $ */

#ifndef _xfs_dev_h
#define _xfs_dev_h

/*
 * Queues of xfs_links hold outbound messages and processes sleeping
 * for replies. The last field is used to return error to sleepers and
 * to keep record of memory to be deallocated when messages have been
 * delivered or dropped.
 */

struct xfs_link {
    struct xfs_link *prev, *next;
    struct xfs_message_header *message;
    u_int error_or_size;	       /* error on sleepq and size on
				        * messageq */
};

struct xfs_channel {
    struct xfs_link messageq;	       /* Messages not yet read */
    struct xfs_link sleepq;	       /* Waiting for reply message */
    u_int nsequence;
#ifdef __osf__
    sel_queue_t sel_q;
#else
    struct selinfo selinfo;
#endif
    struct xfs_message_header *message_buffer;
    int status;
#define CHANNEL_OPENED	0x1
#define CHANNEL_WAITING 0x2
    d_thread_t *proc;
};

extern struct xfs_channel xfs_channel[NNNPFS];

/*
 * These are variant dependent
 */

void xfs_select_wakeup(struct xfs_channel *);

int xfs_install_device(void);
int xfs_uninstall_device(void);

int xfs_install_filesys(void);
int xfs_may_uninstall_filesys(void);
int xfs_uninstall_filesys(void);

int xfs_stat_filesys(void);
int xfs_stat_device(void);

/*
 * And these should be generic
 */

void
xfs_initq(struct xfs_link *q);

int
xfs_emptyq(const struct xfs_link *q);

int
xfs_onq(const struct xfs_link *link);

void
xfs_appendq(struct xfs_link *q, struct xfs_link *p);

void
xfs_outq(struct xfs_link *p);

int
xfs_devopen_common(dev_t dev);

#ifndef __osf__ /* XXX - we should do the same for osf */
int xfs_devopen(dev_t dev, int flag, int devtype, d_thread_t *proc);
int xfs_devclose(dev_t dev, int flag, int devtype, d_thread_t *proc);
int xfs_devioctl(dev_t dev, u_long cmd, caddr_t data, int flags,
		 d_thread_t *p);
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
int xfs_devselect(dev_t dev, int which, void *wql, d_thread_t *p);
#else
int xfs_devselect(dev_t dev, int which, d_thread_t *p);
#endif
int xfs_devpoll(dev_t dev, int events, d_thread_t *p);
#endif /* ! __osf__ */

int
xfs_devclose_common(dev_t dev, d_thread_t *p);

int
xfs_devread(dev_t dev, struct uio * uiop, int ioflag);

int
xfs_devwrite(dev_t dev, struct uio *uiop, int ioflag);

int
xfs_message_send(int fd, struct xfs_message_header * message, u_int size);

int
xfs_message_rpc(int fd, struct xfs_message_header * message, u_int size,
		d_thread_t *p);

int
xfs_message_receive(int fd,
		    struct xfs_message_header *message,
		    u_int size,
		    d_thread_t *p);

int
xfs_message_wakeup(int fd,
		   struct xfs_message_wakeup *message,
		   u_int size,
		   d_thread_t *p);

int
xfs_message_wakeup_data(int fd,
			struct xfs_message_wakeup_data * message,
			u_int size,
			d_thread_t *p);

int
xfs_uprintf_device(void);

int
xfs_is_xfs_dev (dev_t dev);

#endif /* _xfs_dev_h */
@


1.8
log
@Missing xfs_devpoll proto.  You would think with all that HAVE_FOO
crap the protos would be done for you.  Apparently not...
@
text
@@


1.7
log
@Merge
@
text
@d119 1
@


1.6
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d34 1
a34 1
/* $Id: xfs_dev.h,v 1.1.1.1 2002/06/07 03:32:59 hin Exp $ */
d66 1
a66 1
    struct proc *proc;
d69 1
a69 1
extern struct xfs_channel xfs_channel[NXFS];
d107 1
a107 1
xfs_devopen_common(dev_t dev, struct proc *);
d110 2
a111 2
int xfs_devopen(dev_t dev, int flag, int devtype, struct proc *proc);
int xfs_devclose(dev_t dev, int flag, int devtype, struct proc *proc);
d113 1
a113 1
		 struct proc *p);
d115 1
a115 1
int xfs_devselect(dev_t dev, int which, void *wql, struct proc *p);
d117 1
a117 1
int xfs_devselect(dev_t dev, int which, struct proc *p);
d122 1
a122 1
xfs_devclose_common(dev_t dev, struct proc *p);
d135 1
a135 1
		struct proc *p);
d141 1
a141 1
		    struct proc *p);
d147 1
a147 1
		   struct proc *p);
d153 1
a153 1
			struct proc *p);
@


1.5
log
@New xfs from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 *
 * 4. Neither the name of the Institute nor the names of its contributors
d34 1
a34 1
/* $Id: xfs_dev.h,v 1.13 2000/04/02 21:28:24 assar Exp $ */
d66 1
d107 1
a107 1
xfs_devopen_common(dev_t dev);
d114 3
d118 1
d134 2
a135 1
xfs_message_rpc(int fd, struct xfs_message_header * message, u_int size);
@


1.5.8.1
log
@Sync UBC branch to -current
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
/* $Id: xfs_dev.h,v 1.5 2000/09/11 14:26:52 art Exp $ */
a70 1
    struct proc *proc;
d111 1
a111 1
xfs_devopen_common(dev_t dev, struct proc *);
a117 3
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
int xfs_devselect(dev_t dev, int which, void *wql, struct proc *p);
#else
a118 1
#endif
d134 1
a134 2
xfs_message_rpc(int fd, struct xfs_message_header * message, u_int size,
		struct proc *p);
@


1.4
log
@$OpenBSD$
@
text
@a0 1
/* $OpenBSD: xfs_dev.h,v 1.3 1999/04/30 01:59:00 art Exp $ */
d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997 Kungliga Tekniska Högskolan
d39 1
a78 1
int xfs_func_is_devopen(void*);
d99 1
a99 1
xfs_emptyq(struct xfs_link *q);
d102 1
a102 1
xfs_onq(struct xfs_link *link);
d116 2
a117 7
int xfs_devioctl(dev_t dev,
#if  defined(__NetBSD__) || defined(__OpenBSD__)
		 u_long cmd,
#else /* if defined(__FreeBSD__) */
		 int cmd,
#endif
		 caddr_t data, int flags, struct proc *p);
d156 3
@


1.3
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d1 1
a39 1
/* $Id: xfs_dev.h,v 1.9 1999/04/06 13:58:13 lha Exp $ */
@


1.3.4.1
log
@Sync with -current
@
text
@a0 1
/* $OpenBSD$ */
d39 1
@


1.3.4.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
a39 1
/* $Id: xfs_dev.h,v 1.5 2000/09/11 14:26:52 art Exp $ */
d79 1
d100 1
a100 1
xfs_emptyq(const struct xfs_link *q);
d103 1
a103 1
xfs_onq(const struct xfs_link *link);
d117 7
a123 2
int xfs_devioctl(dev_t dev, u_long cmd, caddr_t data, int flags,
		 struct proc *p);
a161 3

int
xfs_is_xfs_dev (dev_t dev);
@


1.3.4.3
log
@Sync the SMP branch with 3.3
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
/* $Id$ */
a70 1
    struct proc *proc;
d111 1
a111 1
xfs_devopen_common(dev_t dev, struct proc *);
a117 3
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
int xfs_devselect(dev_t dev, int which, void *wql, struct proc *p);
#else
a118 1
#endif
d134 1
a134 2
xfs_message_rpc(int fd, struct xfs_message_header * message, u_int size,
		struct proc *p);
@


1.3.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d34 1
a34 1
/* $arla: xfs_dev.h,v 1.19 2003/01/19 20:53:52 lha Exp $ */
d66 1
a66 1
    d_thread_t *proc;
d69 1
a69 1
extern struct xfs_channel xfs_channel[NNNPFS];
d107 1
a107 1
xfs_devopen_common(dev_t dev);
d110 2
a111 2
int xfs_devopen(dev_t dev, int flag, int devtype, d_thread_t *proc);
int xfs_devclose(dev_t dev, int flag, int devtype, d_thread_t *proc);
d113 1
a113 1
		 d_thread_t *p);
d115 1
a115 1
int xfs_devselect(dev_t dev, int which, void *wql, d_thread_t *p);
d117 1
a117 1
int xfs_devselect(dev_t dev, int which, d_thread_t *p);
a118 1
int xfs_devpoll(dev_t dev, int events, d_thread_t *p);
d122 1
a122 1
xfs_devclose_common(dev_t dev, d_thread_t *p);
d135 1
a135 1
		d_thread_t *p);
d141 1
a141 1
		    d_thread_t *p);
d147 1
a147 1
		   d_thread_t *p);
d153 1
a153 1
			d_thread_t *p);
@


1.2
log
@indent the code and move around some includes, after discussion with Theo
@
text
@a0 1
/*	$OpenBSD: xfs_dev.h,v 1.1 1998/08/30 16:47:21 art Exp $	*/
d39 1
a39 1
/* $KTH: xfs_dev.h,v 1.4 1998/04/05 18:19:50 art Exp $ */
d41 2
a42 2
#ifndef _XFS_XFS_DEV_H_
#define _XFS_XFS_DEV_H_
d44 37
a80 1
int xfs_devopen __P((dev_t dev, int flags, int devtype, struct proc * p));
d82 2
a83 21
int xfs_install_device __P((void));
int xfs_uninstall_device __P((void));

int xfs_install_filesys __P((void));
int xfs_uninstall_filesys __P((void));

int xfs_stat_filesys __P((void));
int xfs_stat_device __P((void));

int xfs_message_send __P((int fd, struct xfs_message_header *message,
			  u_int size));
int xfs_message_rpc __P((int fd, struct xfs_message_header *message,
			 u_int size));
int xfs_message_receive __P((int fd,struct xfs_message_header *message,
			     u_int size,struct proc *p));
int xfs_message_wakeup __P((int fd, struct xfs_message_wakeup *message,
			    u_int size, struct proc *p));
int xfs_message_wakeup_data __P((int fd,
				 struct xfs_message_wakeup_data *message,
				 u_int size, struct proc *p));
#define USE_SELECT
d85 37
d123 39
d163 1
@


1.1
log
@xfs - a filesystem using a user-land cache manager. Designed for AFS.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 2
a43 2
#ifndef _xfs_dev_h
#define _xfs_dev_h
d45 1
a45 1
int xfs_devopen(dev_t dev, int flags, int devtype, struct proc * p);
d47 2
a48 2
int xfs_install_device(void);
int xfs_uninstall_device(void);
d50 18
a67 29
int xfs_install_filesys(void);
int xfs_uninstall_filesys(void);

int xfs_stat_filesys(void);
int xfs_stat_device(void);

int
xfs_message_send(int fd, struct xfs_message_header * message, u_int size);

int
xfs_message_rpc(int fd, struct xfs_message_header * message, u_int size);

int
xfs_message_receive(int fd,
		    struct xfs_message_header *message,
		    u_int size,
		    struct proc *p);

int
xfs_message_wakeup(int fd,
		   struct xfs_message_wakeup *message,
		   u_int size,
		   struct proc *p);

int
xfs_message_wakeup_data(int fd,
			struct xfs_message_wakeup_data * message,
			u_int size,
			struct proc *p);
d69 1
a69 1
#define USE_SELECT
a70 1
#endif				       /* _xfs_dev_h */
@


1.1.1.1
log
@Import of xfs from arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
/* $Id: xfs_dev.h,v 1.1.1.1 2002/06/05 17:24:11 hin Exp $ */
d45 1
a45 37
/*
 * Queues of xfs_links hold outbound messages and processes sleeping
 * for replies. The last field is used to return error to sleepers and
 * to keep record of memory to be deallocated when messages have been
 * delivered or dropped.
 */

struct xfs_link {
    struct xfs_link *prev, *next;
    struct xfs_message_header *message;
    u_int error_or_size;	       /* error on sleepq and size on
				        * messageq */
};

struct xfs_channel {
    struct xfs_link messageq;	       /* Messages not yet read */
    struct xfs_link sleepq;	       /* Waiting for reply message */
    u_int nsequence;
#ifdef __osf__
    sel_queue_t sel_q;
#else
    struct selinfo selinfo;
#endif
    struct xfs_message_header *message_buffer;
    int status;
#define CHANNEL_OPENED	0x1
#define CHANNEL_WAITING 0x2
    struct proc *proc;
};

extern struct xfs_channel xfs_channel[NXFS];

/*
 * These are variant dependent
 */

void xfs_select_wakeup(struct xfs_channel *);
a50 1
int xfs_may_uninstall_filesys(void);
a55 43
/*
 * And these should be generic
 */

void
xfs_initq(struct xfs_link *q);

int
xfs_emptyq(const struct xfs_link *q);

int
xfs_onq(const struct xfs_link *link);

void
xfs_appendq(struct xfs_link *q, struct xfs_link *p);

void
xfs_outq(struct xfs_link *p);

int
xfs_devopen_common(dev_t dev, struct proc *);

#ifndef __osf__ /* XXX - we should do the same for osf */
int xfs_devopen(dev_t dev, int flag, int devtype, struct proc *proc);
int xfs_devclose(dev_t dev, int flag, int devtype, struct proc *proc);
int xfs_devioctl(dev_t dev, u_long cmd, caddr_t data, int flags,
		 struct proc *p);
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
int xfs_devselect(dev_t dev, int which, void *wql, struct proc *p);
#else
int xfs_devselect(dev_t dev, int which, struct proc *p);
#endif
#endif /* ! __osf__ */

int
xfs_devclose_common(dev_t dev, struct proc *p);

int
xfs_devread(dev_t dev, struct uio * uiop, int ioflag);

int
xfs_devwrite(dev_t dev, struct uio *uiop, int ioflag);

d60 1
a60 2
xfs_message_rpc(int fd, struct xfs_message_header * message, u_int size,
		struct proc *p);
d80 1
a80 5
int
xfs_uprintf_device(void);

int
xfs_is_xfs_dev (dev_t dev);
d82 1
a82 1
#endif /* _xfs_dev_h */
@


1.1.1.2
log
@Import xfs from arla-current as of 5 Aug 2003.

ok deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d34 1
a34 1
/* $arla: xfs_dev.h,v 1.19 2003/01/19 20:53:52 lha Exp $ */
d66 1
a66 1
    d_thread_t *proc;
d69 1
a69 1
extern struct xfs_channel xfs_channel[NNNPFS];
d107 1
a107 1
xfs_devopen_common(dev_t dev);
d110 2
a111 2
int xfs_devopen(dev_t dev, int flag, int devtype, d_thread_t *proc);
int xfs_devclose(dev_t dev, int flag, int devtype, d_thread_t *proc);
d113 1
a113 1
		 d_thread_t *p);
d115 1
a115 1
int xfs_devselect(dev_t dev, int which, void *wql, d_thread_t *p);
d117 1
a117 1
int xfs_devselect(dev_t dev, int which, d_thread_t *p);
d122 1
a122 1
xfs_devclose_common(dev_t dev, d_thread_t *p);
d135 1
a135 1
		d_thread_t *p);
d141 1
a141 1
		    d_thread_t *p);
d147 1
a147 1
		   d_thread_t *p);
d153 1
a153 1
			d_thread_t *p);
@


