head	1.9;
access;
symbols
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	arla-20030805:1.1.1.2
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.4.0.8
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	SMP:1.2.0.2
	SMP_BASE:1.2
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2009.06.03.14.45.55;	author jj;	state dead;
branches;
next	1.8;

1.8
date	2008.05.07.14.08.37;	author thib;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.14.07.46.40;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2003.08.12.07.53.47;	author hin;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.07.04.10.32;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.11.14.26.53;	author art;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2000.03.03.00.54.59;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.07.04.57.19;	author assar;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.04.30.01.59.01;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.03.33.00;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.12.07.43.49;	author hin;	state Exp;
branches;
next	;

1.2.2.1
date	2000.03.24.09.09.55;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2001.05.14.22.47.53;	author niklas;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2003.03.28.00.41.31;	author niklas;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2004.02.19.11.01.51;	author niklas;	state Exp;
branches;
next	;

1.4.8.1
date	2002.06.11.03.33.13;	author art;	state Exp;
branches;
next	1.4.8.2;

1.4.8.2
date	2004.02.21.00.24.54;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@/*
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <xfs/xfs_locl.h>

RCSID("$arla: xfs_vfsops-openbsd.c,v 1.16 2003/06/02 18:26:50 lha Exp $");

#include <xfs/xfs_common.h>
#include <xfs/xfs_message.h>
#include <xfs/xfs_fs.h>
#include <xfs/xfs_dev.h>
#include <xfs/xfs_deb.h>
#include <xfs/xfs_vfsops.h>
#include <xfs/xfs_vfsops-bsd.h>
#include <xfs/xfs_vnodeops.h>

static vop_t **xfs_dead_vnodeop_p;

int
xfs_make_dead_vnode(struct mount *mp, struct vnode **vpp)
{
    NNPFSDEB(XDEBNODE, ("make_dead_vnode mp = %lx\n",
		      (unsigned long)mp));

    return getnewvnode(VT_NON, mp, xfs_dead_vnodeop_p, vpp);
}

static struct vnodeopv_entry_desc xfs_dead_vnodeop_entries[] = {
    {&vop_default_desc, (vop_t *) xfs_eopnotsupp},
    {&vop_lookup_desc,	(vop_t *) xfs_dead_lookup},
    {&vop_reclaim_desc, (vop_t *) xfs_returnzero},
    {&vop_lock_desc,	(vop_t *) vop_generic_lock},
    {&vop_unlock_desc,	(vop_t *) vop_generic_unlock},
    {&vop_islocked_desc,(vop_t *) vop_generic_islocked},
    {NULL, NULL}};

static struct vnodeopv_desc xfs_dead_vnodeop_opv_desc =
{&xfs_dead_vnodeop_p, xfs_dead_vnodeop_entries};

extern struct vnodeopv_desc xfs_vnodeop_opv_desc;

static int
xfs_init(struct vfsconf *vfs)
{
    NNPFSDEB(XDEBVFOPS, ("xfs_init\n"));
    vfs_opv_init_explicit(&xfs_vnodeop_opv_desc);
    vfs_opv_init_default(&xfs_vnodeop_opv_desc);
    vfs_opv_init_explicit(&xfs_dead_vnodeop_opv_desc);
    vfs_opv_init_default(&xfs_dead_vnodeop_opv_desc);
    return 0;
}

const struct vfsops xfs_vfsops = {
#ifdef HAVE_STRUCT_VFSOPS_VFS_MOUNT
    xfs_mount_common,
#else
    xfs_mount_caddr,
#endif
    xfs_start,
    xfs_unmount,
    xfs_root,
    xfs_quotactl,
    xfs_statfs,
    xfs_sync,
    xfs_vget,
    xfs_fhtovp,
    xfs_vptofh,
    xfs_init,
    NULL,
#ifdef HAVE_STRUCT_VFSOPS_VFS_CHECKEXP
    xfs_checkexp,               /* checkexp */
#endif
};

static struct vfsconf xfs_vfc = {
    &xfs_vfsops,
    "xfs",
    0,
    0,
    0,
    NULL
};

#ifndef HAVE_KERNEL_VFS_REGISTER

static int
vfs_register (struct vfsconf *vfs)
{
    struct vfsconf *vfsp;
    struct vfsconf **vfspp;

    /* Check if filesystem already known */
    for (vfspp = &vfsconf, vfsp = vfsconf;
	 vfsp;
	 vfspp = &vfsp->vfc_next, vfsp = vfsp->vfc_next)
	if (strcmp(vfsp->vfc_name, vfs->vfc_name) == 0)
	    return (EEXIST);

    maxvfsconf++;

    /* Add to the end of the list */
    *vfspp = vfs;

    vfs->vfc_next = NULL;

    /* Call vfs_init() */
    NNPFSDEB(XDEBVFOPS, ("calling vfs_init\n"));
    (*(vfs->vfc_vfsops->vfs_init)) (vfs);

    /* done! */

    return 0;
}

static int
vfs_unregister (struct vfsconf *vfs)
{
    struct vfsconf *vfsp;
    struct vfsconf **vfspp;

    /* Find our vfsconf struct */
    for (vfspp = &vfsconf, vfsp = vfsconf;
	 vfsp;
	 vfspp = &vfsp->vfc_next, vfsp = vfsp->vfc_next)
	if (strcmp(vfsp->vfc_name, vfs->vfc_name) == 0)
	    break;

    if (!vfsp)			       /* Not found */
	return (ENOENT);

    if (vfsp->vfc_refcount)	       /* In use */
	return (EBUSY);

    /* Remove from list and free  */
    *vfspp = vfsp->vfc_next;

    maxvfsconf--;

    return 0;
}

#endif

int
xfs_install_filesys(void)
{
    return vfs_register (&xfs_vfc);
}

int
xfs_uninstall_filesys(void)
{
    return vfs_unregister (&xfs_vfc);
}

int
xfs_stat_filesys (void)
{
    return 0;
}
@


1.8
log
@remove the vfc_mountroot member from vfsconf and
do appropriate cleanup;

OK deraadt@@
@
text
@@


1.7
log
@constify vfsops; tedu@@ ok
@
text
@a110 1
    NULL,
@


1.6
log
@Merge
@
text
@d83 1
a83 1
struct vfsops xfs_vfsops = {
@


1.5
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$Id: xfs_vfsops-openbsd.c,v 1.1.1.1 2002/06/07 03:33:00 hin Exp $");
d50 1
a50 1
make_dead_vnode(struct mount *mp, struct vnode **vpp)
d52 1
a52 1
    XFSDEB(XDEBNODE, ("make_dead_vnode mp = %lx\n",
d75 1
a75 1
    XFSDEB(XDEBVFOPS, ("xfs_init\n"));
d84 5
a88 1
    xfs_mount,
d138 1
a138 1
    XFSDEB(XDEBVFOPS, ("calling vfs_init\n"));
@


1.4
log
@New xfs from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 *
 * 4. Neither the name of the Institute nor the names of its contributors
d36 1
a36 1
RCSID("$Id: xfs_vfsops-openbsd.c,v 1.11 2000/07/19 14:28:14 art Exp $");
@


1.4.8.1
log
@Sync UBC branch to -current
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d41 1
a41 1
RCSID("$Id: xfs_vfsops-openbsd.c,v 1.4 2000/09/11 14:26:53 art Exp $");
@


1.4.8.2
log
@compile
@
text
@d36 1
a36 1
RCSID("$Id: xfs_vfsops-openbsd.c,v 1.4.8.1 2002/06/11 03:33:13 art Exp $");
a46 2
#include <miscfs/genfs/genfs.h>

d62 3
a64 3
    {&vop_lock_desc,	(vop_t *) genfs_nolock},
    {&vop_unlock_desc,	(vop_t *) genfs_nounlock},
    {&vop_islocked_desc,(vop_t *) genfs_noislocked},
@


1.3
log
@$OpenBSD$
@
text
@a0 2
/*	$OpenBSD$	*/

d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d41 1
a41 1
RCSID("$OpenBSD: xfs_vfsops-openbsd.c,v 1.2 2000/02/07 04:57:19 assar Exp $");
d57 2
a58 1
    XFSDEB(XDEBNODE, ("make_dead_vnode mp = %p\n", mp));
d67 3
a87 16
static int
xfs_sysctl (int *name, u_int namelen, void *oldp, size_t *oldlenp,
	    void *newp, size_t newlen, struct proc *p)
{
    XFSDEB(XDEBVFOPS, ("xfs_sysctl\n"));
    return EOPNOTSUPP;
}

static int
xfs_checkexp(struct mount *mp, struct mbuf *nam, int *exflagsp,
	     struct ucred **credanonp)
{
    XFSDEB(XDEBVFOPS, ("xfs_checkexp\n"));
    return (EOPNOTSUPP);
}

d100 4
a103 2
    xfs_sysctl,
    xfs_checkexp
@


1.2
log
@update to use new checkexp vfs operation
@
text
@d1 2
d43 1
a43 1
RCSID("$Id: xfs_vfsops-openbsd.c,v 1.1 1999/04/30 01:59:01 art Exp $");
@


1.2.2.1
log
@Sync with -current
@
text
@a0 2
/*	$OpenBSD$	*/

d41 1
a41 1
RCSID("$OpenBSD$");
@


1.2.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
d4 1
a4 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d43 1
a43 1
RCSID("$Id: xfs_vfsops-openbsd.c,v 1.4 2000/09/11 14:26:53 art Exp $");
d59 1
a59 2
    XFSDEB(XDEBNODE, ("make_dead_vnode mp = %lx\n",
		      (unsigned long)mp));
a67 3
    {&vop_lock_desc,	(vop_t *) vop_generic_lock},
    {&vop_unlock_desc,	(vop_t *) vop_generic_unlock},
    {&vop_islocked_desc,(vop_t *) vop_generic_islocked},
d86 16
d114 2
a115 4
    NULL,
#ifdef HAVE_STRUCT_VFSOPS_VFS_CHECKEXP
    xfs_checkexp,               /* checkexp */
#endif
@


1.2.2.3
log
@Sync the SMP branch with 3.3
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d41 1
a41 1
RCSID("$Id$");
@


1.2.2.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$arla: xfs_vfsops-openbsd.c,v 1.16 2003/06/02 18:26:50 lha Exp $");
d50 1
a50 1
xfs_make_dead_vnode(struct mount *mp, struct vnode **vpp)
d52 1
a52 1
    NNPFSDEB(XDEBNODE, ("make_dead_vnode mp = %lx\n",
d75 1
a75 1
    NNPFSDEB(XDEBVFOPS, ("xfs_init\n"));
d83 2
a84 6
const struct vfsops xfs_vfsops = {
#ifdef HAVE_STRUCT_VFSOPS_VFS_MOUNT
    xfs_mount_common,
#else
    xfs_mount_caddr,
#endif
d134 1
a134 1
    NNPFSDEB(XDEBVFOPS, ("calling vfs_init\n"));
@


1.1
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d41 1
a41 1
RCSID("$Id: xfs_vfsops-openbsd.c,v 1.6 1999/01/19 20:01:12 art Exp $");
d84 16
d112 2
a113 1
    NULL,
@


1.1.1.1
log
@Import of xfs from arla-0.35.7
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d41 1
a41 1
RCSID("$Id: xfs_vfsops-openbsd.c,v 1.1.1.1 2002/06/05 17:24:11 hin Exp $");
d57 1
a57 2
    XFSDEB(XDEBNODE, ("make_dead_vnode mp = %lx\n",
		      (unsigned long)mp));
a65 3
    {&vop_lock_desc,	(vop_t *) vop_generic_lock},
    {&vop_unlock_desc,	(vop_t *) vop_generic_unlock},
    {&vop_islocked_desc,(vop_t *) vop_generic_islocked},
a96 3
#ifdef HAVE_STRUCT_VFSOPS_VFS_CHECKEXP
    xfs_checkexp,               /* checkexp */
#endif
@


1.1.1.2
log
@Import xfs from arla-current as of 5 Aug 2003.

ok deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2001 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$arla: xfs_vfsops-openbsd.c,v 1.16 2003/06/02 18:26:50 lha Exp $");
d50 1
a50 1
xfs_make_dead_vnode(struct mount *mp, struct vnode **vpp)
d52 1
a52 1
    NNPFSDEB(XDEBNODE, ("make_dead_vnode mp = %lx\n",
d75 1
a75 1
    NNPFSDEB(XDEBVFOPS, ("xfs_init\n"));
d84 1
a84 5
#ifdef HAVE_STRUCT_VFSOPS_VFS_MOUNT
    xfs_mount_common,
#else
    xfs_mount_caddr,
#endif
d134 1
a134 1
    NNPFSDEB(XDEBVFOPS, ("calling vfs_init\n"));
@


