head	1.11;
access;
symbols
	OPENBSD_4_5:1.10.0.22
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.20
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.18
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.16
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.14
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.12
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.10
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	arla-20030805:1.1.1.2
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.4
	UBC:1.3.0.8
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	SMP:1.1.0.4
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.11
date	2009.06.03.14.45.55;	author jj;	state dead;
branches;
next	1.10;

1.10
date	2004.01.18.21.46.54;	author beck;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.06.16.06.13;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.10.04.15.54.27;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.28.04.25.05;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.26.17.06.54;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.12.07.53.47;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.07.04.10.32;	author hin;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.11.14.26.51;	author art;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	2000.03.03.00.54.58;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	99.04.30.01.59.00;	author art;	state Exp;
branches
	1.1.1.1
	1.1.4.1;
next	;

1.1.1.1
date	2002.06.07.03.32.59;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.12.07.43.51;	author hin;	state Exp;
branches;
next	;

1.1.4.1
date	2000.03.24.09.09.54;	author niklas;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2001.05.14.22.47.51;	author niklas;	state Exp;
branches;
next	1.1.4.3;

1.1.4.3
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.1.4.4;

1.1.4.4
date	2004.02.19.11.01.46;	author niklas;	state Exp;
branches;
next	;

1.3.8.1
date	2002.06.11.03.33.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@/* $OpenBSD: xfs_dev-bsd.c,v 1.10 2004/01/18 21:46:54 beck Exp $

 * Copyright (c) 2004 Bob Beck
 * Copyright (c) 1995 - 2003 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <xfs/xfs_locl.h>
#include <xfs/xfs_message.h>
#include <xfs/xfs_msg_locl.h>
#include <xfs/xfs_fs.h>
#include <xfs/xfs_dev.h>
#include <xfs/xfs_deb.h>

int
xfs_devopen(dev_t dev, int flag, int devtype, d_thread_t *proc)
{
	NNPFSDEB(XDEBDEV, ("xfsopen dev = %d.%d, flag = %d, devtype = %d\n", 
	    major(dev), minor(dev), flag, devtype));
	return xfs_devopen_common(dev);
}

int
xfs_devclose(dev_t dev, int flag, int devtype, d_thread_t *p)
{
	NNPFSDEB(XDEBDEV, ("xfs_devclose dev = %d(%d), flag = 0x%x\n",
	   major(dev), minor(dev), flag));

	return xfs_devclose_common(dev, p);
}

int
xfs_devioctl(dev_t dev,  u_long cmd,  caddr_t data, int flags,  d_thread_t *p)
{
	NNPFSDEB(XDEBDEV, ("xfs_devioctl dev = %d.%d, cmd = %lu, "
	    "data = %lx, flags = %x\n", major(dev), minor(dev), 
	    (unsigned long)cmd, (unsigned long)data, flags));
	return ENOTTY;
}

int
xfs_devpoll(dev_t dev, int events, d_thread_t * p)
{
	struct xfs_channel *chan = &xfs_channel[minor(dev)];
	
	NNPFSDEB(XDEBDEV, ("xfs_devpoll dev = %d(%d), events = 0x%x\n",
	    major(dev), minor(dev), events));

	if ((events & (POLLIN | POLLRDNORM)) == 0)
		return 0;			/* only supports read */
	
	if (!xfs_emptyq(&chan->messageq))
		return (events & (POLLIN | POLLRDNORM));
	
	selrecord (p, &chan->selinfo);

	return 0;
}

void
xfs_select_wakeup(struct xfs_channel *chan)
{
	selwakeup (&chan->selinfo);
}

/*
 * Install and uninstall device.
 */

struct cdevsw xfs_dev = {
	xfs_devopen,
	xfs_devclose,
	xfs_devread,
	xfs_devwrite,
	xfs_devioctl,
	(dev_type_stop((*))) enodev,
	0,
	xfs_devpoll,
	(dev_type_mmap((*))) enodev,
	0
};

int
xfs_install_device(void)
{
	int i;

	for (i = 0; i < NNNPFS; i++) {
		NNPFSDEB(XDEBDEV, ("before initq(messageq and sleepq)\n"));
		xfs_initq(&xfs_channel[i].messageq);
		xfs_initq(&xfs_channel[i].sleepq);
		xfs_channel[i].status = 0;
	}
	return 0;
}

int
xfs_uninstall_device(void)
{
	int i;
	struct xfs_channel *chan;
	int ret = 0;
	
	for (i = 0; i < NNNPFS; i++) {
		chan = &xfs_channel[i];
		if (chan->status & CHANNEL_OPENED)
			xfs_devclose(makedev(0, i), 0, 0, NULL);
	}
	
	NNPFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
	return ret;
}

int
xfs_stat_device(void)
{
	return xfs_uprintf_device();
}

int
xfs_is_xfs_dev(dev_t dev)
{
    return major(dev) <= nchrdev &&
	cdevsw[major(dev)].d_open == xfs_devopen &&
	minor(dev) >= 0 && minor(dev) < NNNPFS;
}
@


1.10
log
@clean out #ifdef horror show in xfs_dev-bsd.c and enable XFS in GENERIC.
ok deraadt@@, todd@@
@
text
@d1 1
a1 1
/* $OpenBSD$
@


1.9
log
@Implement a real xfs_devpoll() and don't rely on xfs_realselect().
Tested by beck@@
@
text
@d1 3
a3 1
/*
a42 2
RCSID("$arla: xfs_dev-bsd.c,v 1.35 2003/04/01 14:04:11 lha Exp $");

d46 3
a48 3
    NNPFSDEB(XDEBDEV, ("xfsopen dev = %d.%d, flag = %d, devtype = %d\n", 
		     major(dev), minor(dev), flag, devtype));
    return xfs_devopen_common(dev);
d54 4
a57 8
#ifdef NNPFS_DEBUG
    char devname[64];
#endif

    NNPFSDEB(XDEBDEV, ("xfs_devclose dev = %s, flag = 0x%x\n",
		     xfs_devtoname_r(dev, devname, sizeof(devname)),
		     flag));
    return xfs_devclose_common(dev, p);
a59 4
/*
 * Not used.
 */

d61 1
a61 16
xfs_devioctl(dev_t dev, 
	     u_long cmd,
	     caddr_t data,
	     int flags,
	     d_thread_t *p)
{
    NNPFSDEB(XDEBDEV, ("xfs_devioctl dev = %d.%d, cmd = %lu, "
		     "data = %lx, flags = %x\n", 
		     major(dev), minor(dev), (unsigned long)cmd,
		     (unsigned long)data, flags));
    return ENOTTY;
}

#ifdef HAVE_VOP_SELECT
static int
xfs_realselect(dev_t dev, d_thread_t *p, void *wql)
d63 4
a66 11
    struct xfs_channel *chan = &xfs_channel[minor(dev)];

    if (!xfs_emptyq(&chan->messageq))
	return 1;		       /* Something to read */

#ifdef HAVE_THREE_ARGUMENT_SELRECORD
    selrecord (p, &chan->selinfo, wql);
#else
    selrecord (p, &chan->selinfo);
#endif
    return 0;
a67 1
#endif
a68 1
#ifdef HAVE_VOP_POLL
d72 12
a83 41
    struct xfs_channel *chan = &xfs_channel[minor(dev)];
#ifdef NNPFS_DEBUG
    char devname[64];
#endif

    NNPFSDEB(XDEBDEV, ("xfs_devpoll dev = %s, events = 0x%x\n",
		     xfs_devtoname_r (dev, devname, sizeof(devname)),
		     events));

    if ((events & (POLLIN | POLLRDNORM)) == 0)
	return 0;			/* only supports read */

    if (!xfs_emptyq(&chan->messageq))
	return (events & (POLLIN | POLLRDNORM));

#ifdef HAVE_THREE_ARGUMENT_SELRECORD
    selrecord (p, &chan->selinfo, wql);
#else
    selrecord (p, &chan->selinfo);
#endif
    return 0;
}
#endif

#ifdef HAVE_VOP_SELECT
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
int
xfs_devselect(dev_t dev, int which, void *wql, struct proc * p)
{
    NNPFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));

    if (which != FREAD)
	return 0;

    return xfs_realselect(dev, p, wql);
}
#else
int
xfs_devselect(dev_t dev, int which, d_thread_t * p)
{
    NNPFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));
a84 1
    if (which != FREAD)
a85 2

    return xfs_realselect(dev, p, NULL);
a86 2
#endif
#endif
d91 1
a91 1
    selwakeup (&chan->selinfo);
a97 29
#if defined(__NetBSD__)
struct cdevsw xfs_dev = {
    xfs_devopen,
    xfs_devclose,
    xfs_devread,
    xfs_devwrite,
    xfs_devioctl,
    (dev_type_stop((*))) enodev,
    0,
    xfs_devpoll,
    (dev_type_mmap((*))) enodev,
    0
};

#elif defined(__OpenBSD__)
struct cdevsw xfs_dev = {
    xfs_devopen,
    xfs_devclose,
    xfs_devread,
    xfs_devwrite,
    xfs_devioctl,
    (dev_type_stop((*))) enodev,
    0,
    xfs_devpoll,
    (dev_type_mmap((*))) enodev,
    0
};

#elif defined(__FreeBSD__)
d99 10
a108 49
    d_name: "xfs",
    d_open: xfs_devopen,
    d_close: xfs_devclose,
    d_read: xfs_devread,
    d_write: xfs_devwrite,
    d_ioctl: xfs_devioctl,
    d_mmap: nommap,
    d_strategy: nostrategy,
    d_flags: 0,
#ifdef HAVE_STRUCT_CDEVSW_D_STOP
    d_stop: nostop,
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_RESET
    d_reset: noreset,
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_BOGORESET
    d_bogoreset: noreset,
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_DEVTOTTY
    d_devtotty: nodevtotty,
#endif
#if defined(HAVE_VOP_SELECT)
    d_select: xfs_devselect,
#elif defined(HAVE_VOP_POLL)
    d_poll: xfs_devpoll,
#else
#error select or poll: that is the question
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_BOGOPARMS
    d_bogoparms: noparms,
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_SPARE
    d_spare: NULL,
#endif
    d_maj: 128,			/* XXX */
    d_dump: nodump,
#ifdef HAVE_STRUCT_CDEVSW_D_PSIZE
    d_psize: nopsize,
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_MAXIO
    d_maxio: 0,
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_BMAJ
#ifdef NOUDEV
    d_bmaj: NOUDEV
#else
    d_bmaj: NODEV
#endif
#endif /* HAVE_STRUCT_CDEVSW_D_BMAJ */
a110 27
#elif defined(__APPLE__)
static struct cdevsw xfs_dev = {
      xfs_devopen,
          xfs_devclose,
          xfs_devread,
          xfs_devwrite,
          xfs_devioctl,
          eno_stop,
          eno_reset,
          0,
          xfs_devselect,
          eno_mmap,
          eno_strat,
          eno_getc,
          eno_putc,
          0
};
#endif /* __APPLE__ */

#if defined(__APPLE__)
extern int xfs_dev_major;
#include <miscfs/devfs/devfs.h>

static void *devfs_handles[NNNPFS];

#endif

d114 1
a114 1
    int i;
d116 7
a122 24
#if defined(__APPLE__)
    xfs_dev_major = cdevsw_add(-1, &xfs_dev);
    if (xfs_dev_major == -1) {
	NNPFSDEB(XDEBDEV, ("failed installing cdev\n"));
	return ENFILE;
    }

    for (i = 0; i < NNNPFS; ++i)
	devfs_handles[i] = devfs_make_node(makedev(xfs_dev_major, i),
					   DEVFS_CHAR,
					   UID_ROOT, GID_WHEEL, 0600,
					   "xfs%d", i);

    NNPFSDEB(XDEBDEV, ("done installing cdev !\n"));
    NNPFSDEB(XDEBDEV, ("Char device number %d\n", xfs_dev_major));
#endif

    for (i = 0; i < NNNPFS; i++) {
	NNPFSDEB(XDEBDEV, ("before initq(messageq and sleepq)\n"));
	xfs_initq(&xfs_channel[i].messageq);
	xfs_initq(&xfs_channel[i].sleepq);
	xfs_channel[i].status = 0;
    }
    return 0;
d128 10
a137 16
    int i;
    struct xfs_channel *chan;
    int ret = 0;

    for (i = 0; i < NNNPFS; i++) {
	chan = &xfs_channel[i];
	if (chan->status & CHANNEL_OPENED)
	    xfs_devclose(makedev(0, i), 0, 0, NULL);
    }

#if defined(__APPLE__)
    for (i = 0; i < NNNPFS; ++i)
	devfs_remove (devfs_handles[i]);

    ret = cdevsw_remove(xfs_dev_major, &xfs_dev);
    if (ret == -1) {
d139 1
a139 9
    } else if (ret == xfs_dev_major) {
	ret = 0;
    } else {
	NNPFSDEB(XDEBLKM, ("xfs_uninstall_device unexpected error error %d\n",
			 ret));
    }
#endif
    NNPFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
    return ret;
d145 1
a145 1
    return xfs_uprintf_device();
a147 1
#if !defined(_LKM) && !defined(KLD_MODULE) && !defined(__APPLE__)
a154 1
#endif
@


1.8
log
@fix xfs_devpoll so it works.
ok millert@@
@
text
@d82 1
d98 1
a98 1

d104 1
d113 2
a114 2
    if (!(events & (POLLIN | POLLRDNORM)))
	return 0;
d116 9
a124 1
    return xfs_realselect(dev, p, NULL);
a125 1

@


1.7
log
@xfs_devpoll must not be static; found by beck@@ compiling an XFS kernel
@
text
@d111 1
a111 1
    if (!(events & POLLRDNORM))
@


1.6
log
@select to poll
@
text
@d100 1
a100 1
static int
@


1.5
log
@Merge
@
text
@d178 1
a178 1
    xfs_devselect,
@


1.4
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d41 1
a41 1
RCSID("$Id: xfs_dev-bsd.c,v 1.1.1.1 2002/06/07 03:32:59 hin Exp $");
d44 1
a44 1
xfs_devopen(dev_t dev, int flag, int devtype, struct proc *proc)
d46 1
a46 1
    XFSDEB(XDEBDEV, ("xfsopen dev = %d.%d, flag = %d, devtype = %d\n", 
d48 1
a48 1
    return xfs_devopen_common(dev, proc);
d52 1
a52 1
xfs_devclose(dev_t dev, int flag, int devtype, struct proc *p)
d54 1
a54 1
#ifdef XFS_DEBUG
d58 1
a58 1
    XFSDEB(XDEBDEV, ("xfs_devclose dev = %s, flag = 0x%x\n",
d73 1
a73 1
	     struct proc *p)
d75 1
a75 1
    XFSDEB(XDEBDEV, ("xfs_devioctl dev = %d.%d, cmd = %lu, "
d83 1
a83 1
xfs_realselect(dev_t dev, struct proc *p, void *wql)
d101 1
a101 1
xfs_devpoll(dev_t dev, int events, struct proc * p)
d103 1
d105 1
d107 1
a107 1
    XFSDEB(XDEBDEV, ("xfs_devpoll dev = %s, events = 0x%x\n",
d124 1
a124 1
    XFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));
d133 1
a133 1
xfs_devselect(dev_t dev, int which, struct proc * p)
d135 1
a135 1
    XFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));
d185 9
a193 5
    xfs_devopen,
    xfs_devclose,
    xfs_devread,
    xfs_devwrite,
    xfs_devioctl,
d195 4
a198 1
    nostop,
d200 2
a201 3
#if defined(HAVE_STRUCT_CDEVSW_D_BOGORESET) \
 || defined(HAVE_STRUCT_CDEVSW_D_RESET)
    noreset,
d204 1
a204 1
    nodevtotty,
d207 1
a207 1
    xfs_devselect,
d209 1
a209 1
    xfs_devpoll,
a212 3
    nommap,
    nostrategy,
    "xfs",
d214 1
a214 1
    noparms,			/* d_bogoparms */
d217 6
a222 1
    NULL,			/* d_spare */
a223 4
    128,			/* XXX */
    nodump,
    nopsize,
    0,				/* flags */
d225 1
a225 1
    0,				/* maxio */
d229 1
a229 1
    NOUDEV			/* bmaj */
d231 1
a231 1
    NODEV			/* bmaj */
d259 1
a259 1
static void *devfs_handles[NXFS];
d271 1
a271 1
	XFSDEB(XDEBDEV, ("failed installing cdev\n"));
d275 1
a275 1
    for (i = 0; i < NXFS; ++i)
d281 2
a282 2
    XFSDEB(XDEBDEV, ("done installing cdev !\n"));
    XFSDEB(XDEBDEV, ("Char device number %d\n", xfs_dev_major));
d285 2
a286 2
    for (i = 0; i < NXFS; i++) {
	XFSDEB(XDEBDEV, ("before initq(messageq and sleepq)\n"));
d301 1
a301 1
    for (i = 0; i < NXFS; i++) {
d308 1
a308 1
    for (i = 0; i < NXFS; ++i)
d313 1
a313 1
	XFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
d317 1
a317 1
	XFSDEB(XDEBLKM, ("xfs_uninstall_device unexpected error error %d\n",
d321 1
a321 1
    XFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
d337 1
a337 1
	minor(dev) >= 0 && minor(dev) < NXFS;
@


1.3
log
@New xfs from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 *
 * 4. Neither the name of the Institute nor the names of its contributors
d41 1
a41 1
RCSID("$Id: xfs_dev-bsd.c,v 1.24 2000/07/22 03:59:04 assar Exp $");
d48 1
a48 1
    return xfs_devopen_common(dev);
d83 1
a83 1
xfs_realselect(dev_t dev, struct proc *p)
d90 3
d94 1
d112 1
a112 1
    return xfs_realselect(dev, p);
d118 12
d138 1
a138 1
    return xfs_realselect(dev, p);
d140 1
a140 1

d221 1
d227 1
d325 1
a325 1
#if !defined(_LKM) && !defined(KLD_MODULE)
@


1.3.8.1
log
@Sync UBC branch to -current
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d46 1
a46 1
RCSID("$Id: xfs_dev-bsd.c,v 1.3 2000/09/11 14:26:51 art Exp $");
d53 1
a53 1
    return xfs_devopen_common(dev, proc);
d88 1
a88 1
xfs_realselect(dev_t dev, struct proc *p, void *wql)
a94 3
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
    selrecord (p, &chan->selinfo, wql);
#else
a95 1
#endif
d113 1
a113 1
    return xfs_realselect(dev, p, NULL);
a118 1
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
d120 1
a120 1
xfs_devselect(dev_t dev, int which, void *wql, struct proc * p)
d127 1
a127 1
    return xfs_realselect(dev, p, wql);
a128 5
#else
int
xfs_devselect(dev_t dev, int which, struct proc * p)
{
    XFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));
a129 6
    if (which != FREAD)
	return 0;

    return xfs_realselect(dev, p, NULL);
}
#endif
a209 1
#ifdef HAVE_STRUCT_CDEVSW_D_BMAJ
a214 1
#endif /* HAVE_STRUCT_CDEVSW_D_BMAJ */
d312 1
a312 1
#if !defined(_LKM) && !defined(KLD_MODULE) && !defined(__APPLE__)
@


1.2
log
@$OpenBSD$
@
text
@a0 2
/*	$OpenBSD$	*/

d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d46 1
a46 1
RCSID("$OpenBSD: xfs_dev-bsd.c,v 1.1 1999/04/30 01:59:00 art Exp $");
a55 1
/* XXX ugly function so we can keep xfs_devopen static */
d57 1
a57 1
xfs_func_is_devopen(void *func)
d59 3
a61 2
    return func == (void*)&xfs_devopen;
}
d63 3
a65 4
int
xfs_devclose(dev_t dev, int flag, int devtype, struct proc *p)
{
    XFSDEB(XDEBDEV, ("xfs_devclose dev = %d, flag = %d\n", dev, flag));
a74 1
#if defined(__NetBSD__) || defined(__OpenBSD__)
d76 3
a78 4
#elif defined(__FreeBSD__)
	     int cmd,
#endif
              caddr_t data, int flags, struct proc *p)
d81 3
a83 2
		     "data = %p, flags = %x\n", 
		     major(dev), minor(dev), (unsigned long)cmd, data, flags));
d104 5
a108 1
    XFSDEB(XDEBDEV, ("xfs_devpoll dev = %d, events = %d\n", dev, events));
d177 1
d179 3
d183 2
d186 1
d196 37
a232 2
    NULL,
    0
d234 5
d240 3
a242 1
#endif /* FreeBSD */
d249 17
d270 1
a271 1

d280 1
d288 16
a303 1
    return 0;
d311 10
@


1.1
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d1 2
d48 1
a48 1
RCSID("$Id: xfs_dev-bsd.c,v 1.7 1999/01/19 20:03:12 art Exp $");
@


1.1.1.1
log
@Import of xfs from arla-0.35.7
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d46 1
a46 1
RCSID("$Id: xfs_dev-bsd.c,v 1.1.1.1 2002/06/05 17:24:11 hin Exp $");
d53 8
a60 1
    return xfs_devopen_common(dev, proc);
d66 1
a66 7
#ifdef XFS_DEBUG
    char devname[64];
#endif

    XFSDEB(XDEBDEV, ("xfs_devclose dev = %s, flag = 0x%x\n",
		     xfs_devtoname_r(dev, devname, sizeof(devname)),
		     flag));
d76 1
d78 4
a81 3
	     caddr_t data,
	     int flags,
	     struct proc *p)
d84 2
a85 3
		     "data = %lx, flags = %x\n", 
		     major(dev), minor(dev), (unsigned long)cmd,
		     (unsigned long)data, flags));
d90 1
a90 1
xfs_realselect(dev_t dev, struct proc *p, void *wql)
a96 3
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
    selrecord (p, &chan->selinfo, wql);
#else
a97 1
#endif
d106 1
a106 5
    char devname[64];

    XFSDEB(XDEBDEV, ("xfs_devpoll dev = %s, events = 0x%x\n",
		     xfs_devtoname_r (dev, devname, sizeof(devname)),
		     events));
d111 1
a111 1
    return xfs_realselect(dev, p, NULL);
a116 1
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
d118 1
a118 1
xfs_devselect(dev_t dev, int which, void *wql, struct proc * p)
d125 1
a125 1
    return xfs_realselect(dev, p, wql);
a126 5
#else
int
xfs_devselect(dev_t dev, int which, struct proc * p)
{
    XFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));
a127 6
    if (which != FREAD)
	return 0;

    return xfs_realselect(dev, p, NULL);
}
#endif
a174 1
#ifdef HAVE_STRUCT_CDEVSW_D_STOP
a175 3
#endif
#if defined(HAVE_STRUCT_CDEVSW_D_BOGORESET) \
 || defined(HAVE_STRUCT_CDEVSW_D_RESET)
a176 2
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_DEVTOTTY
a177 1
#endif
d187 2
a188 21
    "xfs",
#ifdef HAVE_STRUCT_CDEVSW_D_BOGOPARMS
    noparms,			/* d_bogoparms */
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_SPARE
    NULL,			/* d_spare */
#endif
    128,			/* XXX */
    nodump,
    nopsize,
    0,				/* flags */
#ifdef HAVE_STRUCT_CDEVSW_D_MAXIO
    0,				/* maxio */
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_BMAJ
#ifdef NOUDEV
    NOUDEV			/* bmaj */
#else
    NODEV			/* bmaj */
#endif
#endif /* HAVE_STRUCT_CDEVSW_D_BMAJ */
d191 1
a191 26
#elif defined(__APPLE__)
static struct cdevsw xfs_dev = {
      xfs_devopen,
          xfs_devclose,
          xfs_devread,
          xfs_devwrite,
          xfs_devioctl,
          eno_stop,
          eno_reset,
          0,
          xfs_devselect,
          eno_mmap,
          eno_strat,
          eno_getc,
          eno_putc,
          0
};
#endif /* __APPLE__ */

#if defined(__APPLE__)
extern int xfs_dev_major;
#include <miscfs/devfs/devfs.h>

static void *devfs_handles[NXFS];

#endif
a197 17
#if defined(__APPLE__)
    xfs_dev_major = cdevsw_add(-1, &xfs_dev);
    if (xfs_dev_major == -1) {
	XFSDEB(XDEBDEV, ("failed installing cdev\n"));
	return ENFILE;
    }

    for (i = 0; i < NXFS; ++i)
	devfs_handles[i] = devfs_make_node(makedev(xfs_dev_major, i),
					   DEVFS_CHAR,
					   UID_ROOT, GID_WHEEL, 0600,
					   "xfs%d", i);

    XFSDEB(XDEBDEV, ("done installing cdev !\n"));
    XFSDEB(XDEBDEV, ("Char device number %d\n", xfs_dev_major));
#endif

a201 1
	xfs_channel[i].status = 0;
d203 1
a211 1
    int ret = 0;
d219 1
a219 16
#if defined(__APPLE__)
    for (i = 0; i < NXFS; ++i)
	devfs_remove (devfs_handles[i]);

    ret = cdevsw_remove(xfs_dev_major, &xfs_dev);
    if (ret == -1) {
	XFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
    } else if (ret == xfs_dev_major) {
	ret = 0;
    } else {
	XFSDEB(XDEBLKM, ("xfs_uninstall_device unexpected error error %d\n",
			 ret));
    }
#endif
    XFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
    return ret;
a226 10

#if !defined(_LKM) && !defined(KLD_MODULE) && !defined(__APPLE__)
int
xfs_is_xfs_dev(dev_t dev)
{
    return major(dev) <= nchrdev &&
	cdevsw[major(dev)].d_open == xfs_devopen &&
	minor(dev) >= 0 && minor(dev) < NXFS;
}
#endif
@


1.1.1.2
log
@Import xfs from arla-current as of 5 Aug 2003.

ok deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2003 Kungliga Tekniska Högskolan
d41 1
a41 1
RCSID("$arla: xfs_dev-bsd.c,v 1.35 2003/04/01 14:04:11 lha Exp $");
d44 1
a44 1
xfs_devopen(dev_t dev, int flag, int devtype, d_thread_t *proc)
d46 1
a46 1
    NNPFSDEB(XDEBDEV, ("xfsopen dev = %d.%d, flag = %d, devtype = %d\n", 
d48 1
a48 1
    return xfs_devopen_common(dev);
d52 1
a52 1
xfs_devclose(dev_t dev, int flag, int devtype, d_thread_t *p)
d54 1
a54 1
#ifdef NNPFS_DEBUG
d58 1
a58 1
    NNPFSDEB(XDEBDEV, ("xfs_devclose dev = %s, flag = 0x%x\n",
d73 1
a73 1
	     d_thread_t *p)
d75 1
a75 1
    NNPFSDEB(XDEBDEV, ("xfs_devioctl dev = %d.%d, cmd = %lu, "
d83 1
a83 1
xfs_realselect(dev_t dev, d_thread_t *p, void *wql)
d101 1
a101 1
xfs_devpoll(dev_t dev, int events, d_thread_t * p)
a102 1
#ifdef NNPFS_DEBUG
a103 1
#endif
d105 1
a105 1
    NNPFSDEB(XDEBDEV, ("xfs_devpoll dev = %s, events = 0x%x\n",
d122 1
a122 1
    NNPFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));
d131 1
a131 1
xfs_devselect(dev_t dev, int which, d_thread_t * p)
d133 1
a133 1
    NNPFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));
d183 5
a187 9
    d_name: "xfs",
    d_open: xfs_devopen,
    d_close: xfs_devclose,
    d_read: xfs_devread,
    d_write: xfs_devwrite,
    d_ioctl: xfs_devioctl,
    d_mmap: nommap,
    d_strategy: nostrategy,
    d_flags: 0,
d189 1
a189 4
    d_stop: nostop,
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_RESET
    d_reset: noreset,
d191 3
a193 2
#ifdef HAVE_STRUCT_CDEVSW_D_BOGORESET
    d_bogoreset: noreset,
d196 1
a196 1
    d_devtotty: nodevtotty,
d199 1
a199 1
    d_select: xfs_devselect,
d201 1
a201 1
    d_poll: xfs_devpoll,
d205 3
d209 1
a209 1
    d_bogoparms: noparms,
d212 1
a212 6
    d_spare: NULL,
#endif
    d_maj: 128,			/* XXX */
    d_dump: nodump,
#ifdef HAVE_STRUCT_CDEVSW_D_PSIZE
    d_psize: nopsize,
d214 4
d219 1
a219 1
    d_maxio: 0,
d223 1
a223 1
    d_bmaj: NOUDEV
d225 1
a225 1
    d_bmaj: NODEV
d253 1
a253 1
static void *devfs_handles[NNNPFS];
d265 1
a265 1
	NNPFSDEB(XDEBDEV, ("failed installing cdev\n"));
d269 1
a269 1
    for (i = 0; i < NNNPFS; ++i)
d275 2
a276 2
    NNPFSDEB(XDEBDEV, ("done installing cdev !\n"));
    NNPFSDEB(XDEBDEV, ("Char device number %d\n", xfs_dev_major));
d279 2
a280 2
    for (i = 0; i < NNNPFS; i++) {
	NNPFSDEB(XDEBDEV, ("before initq(messageq and sleepq)\n"));
d295 1
a295 1
    for (i = 0; i < NNNPFS; i++) {
d302 1
a302 1
    for (i = 0; i < NNNPFS; ++i)
d307 1
a307 1
	NNPFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
d311 1
a311 1
	NNPFSDEB(XDEBLKM, ("xfs_uninstall_device unexpected error error %d\n",
d315 1
a315 1
    NNPFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
d331 1
a331 1
	minor(dev) >= 0 && minor(dev) < NNNPFS;
@


1.1.4.1
log
@Sync with -current
@
text
@a0 2
/*	$OpenBSD$	*/

d46 1
a46 1
RCSID("$OpenBSD$");
@


1.1.4.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
d4 1
a4 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d48 1
a48 1
RCSID("$Id: xfs_dev-bsd.c,v 1.3 2000/09/11 14:26:51 art Exp $");
d58 7
d68 1
a68 7
#ifdef XFS_DEBUG
    char devname[64];
#endif

    XFSDEB(XDEBDEV, ("xfs_devclose dev = %s, flag = 0x%x\n",
		     xfs_devtoname_r(dev, devname, sizeof(devname)),
		     flag));
d78 1
d80 4
a83 3
	     caddr_t data,
	     int flags,
	     struct proc *p)
d86 2
a87 3
		     "data = %lx, flags = %x\n", 
		     major(dev), minor(dev), (unsigned long)cmd,
		     (unsigned long)data, flags));
d108 1
a108 5
    char devname[64];

    XFSDEB(XDEBDEV, ("xfs_devpoll dev = %s, events = 0x%x\n",
		     xfs_devtoname_r (dev, devname, sizeof(devname)),
		     events));
a176 1
#ifdef HAVE_STRUCT_CDEVSW_D_STOP
a177 3
#endif
#if defined(HAVE_STRUCT_CDEVSW_D_BOGORESET) \
 || defined(HAVE_STRUCT_CDEVSW_D_RESET)
a178 2
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_DEVTOTTY
a179 1
#endif
d189 2
a190 19
    "xfs",
#ifdef HAVE_STRUCT_CDEVSW_D_BOGOPARMS
    noparms,			/* d_bogoparms */
#endif
#ifdef HAVE_STRUCT_CDEVSW_D_SPARE
    NULL,			/* d_spare */
#endif
    128,			/* XXX */
    nodump,
    nopsize,
    0,				/* flags */
#ifdef HAVE_STRUCT_CDEVSW_D_MAXIO
    0,				/* maxio */
#endif
#ifdef NOUDEV
    NOUDEV			/* bmaj */
#else
    NODEV			/* bmaj */
#endif
d193 1
a193 26
#elif defined(__APPLE__)
static struct cdevsw xfs_dev = {
      xfs_devopen,
          xfs_devclose,
          xfs_devread,
          xfs_devwrite,
          xfs_devioctl,
          eno_stop,
          eno_reset,
          0,
          xfs_devselect,
          eno_mmap,
          eno_strat,
          eno_getc,
          eno_putc,
          0
};
#endif /* __APPLE__ */

#if defined(__APPLE__)
extern int xfs_dev_major;
#include <miscfs/devfs/devfs.h>

static void *devfs_handles[NXFS];

#endif
a199 17
#if defined(__APPLE__)
    xfs_dev_major = cdevsw_add(-1, &xfs_dev);
    if (xfs_dev_major == -1) {
	XFSDEB(XDEBDEV, ("failed installing cdev\n"));
	return ENFILE;
    }

    for (i = 0; i < NXFS; ++i)
	devfs_handles[i] = devfs_make_node(makedev(xfs_dev_major, i),
					   DEVFS_CHAR,
					   UID_ROOT, GID_WHEEL, 0600,
					   "xfs%d", i);

    XFSDEB(XDEBDEV, ("done installing cdev !\n"));
    XFSDEB(XDEBDEV, ("Char device number %d\n", xfs_dev_major));
#endif

a203 1
	xfs_channel[i].status = 0;
d205 1
a213 1
    int ret = 0;
d221 1
a221 16
#if defined(__APPLE__)
    for (i = 0; i < NXFS; ++i)
	devfs_remove (devfs_handles[i]);

    ret = cdevsw_remove(xfs_dev_major, &xfs_dev);
    if (ret == -1) {
	XFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
    } else if (ret == xfs_dev_major) {
	ret = 0;
    } else {
	XFSDEB(XDEBLKM, ("xfs_uninstall_device unexpected error error %d\n",
			 ret));
    }
#endif
    XFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
    return ret;
a228 10

#if !defined(_LKM) && !defined(KLD_MODULE)
int
xfs_is_xfs_dev(dev_t dev)
{
    return major(dev) <= nchrdev &&
	cdevsw[major(dev)].d_open == xfs_devopen &&
	minor(dev) >= 0 && minor(dev) < NXFS;
}
#endif
@


1.1.4.3
log
@Sync the SMP branch with 3.3
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d46 1
a46 1
RCSID("$Id$");
d53 1
a53 1
    return xfs_devopen_common(dev, proc);
d88 1
a88 1
xfs_realselect(dev_t dev, struct proc *p, void *wql)
a94 3
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
    selrecord (p, &chan->selinfo, wql);
#else
a95 1
#endif
d113 1
a113 1
    return xfs_realselect(dev, p, NULL);
a118 1
#ifdef HAVE_THREE_ARGUMENT_SELRECORD
d120 1
a120 1
xfs_devselect(dev_t dev, int which, void *wql, struct proc * p)
d127 1
a127 1
    return xfs_realselect(dev, p, wql);
a128 5
#else
int
xfs_devselect(dev_t dev, int which, struct proc * p)
{
    XFSDEB(XDEBDEV, ("xfs_devselect dev = %d, which = %d\n", dev, which));
a129 6
    if (which != FREAD)
	return 0;

    return xfs_realselect(dev, p, NULL);
}
#endif
a209 1
#ifdef HAVE_STRUCT_CDEVSW_D_BMAJ
a214 1
#endif /* HAVE_STRUCT_CDEVSW_D_BMAJ */
d312 1
a312 1
#if !defined(_LKM) && !defined(KLD_MODULE) && !defined(__APPLE__)
@


1.1.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 2
a2 4
/* $OpenBSD$

 * Copyright (c) 2004 Bob Beck
 * Copyright (c) 1995 - 2003 Kungliga Tekniska Högskolan
d41 10
d52 1
a52 1
xfs_devopen(dev_t dev, int flag, int devtype, d_thread_t *proc)
d54 8
a61 3
	NNPFSDEB(XDEBDEV, ("xfsopen dev = %d.%d, flag = %d, devtype = %d\n", 
	    major(dev), minor(dev), flag, devtype));
	return xfs_devopen_common(dev);
d64 4
d69 5
a73 1
xfs_devclose(dev_t dev, int flag, int devtype, d_thread_t *p)
d75 11
a85 2
	NNPFSDEB(XDEBDEV, ("xfs_devclose dev = %d(%d), flag = 0x%x\n",
	   major(dev), minor(dev), flag));
d87 9
a95 1
	return xfs_devclose_common(dev, p);
d98 4
a101 2
int
xfs_devioctl(dev_t dev,  u_long cmd,  caddr_t data, int flags,  d_thread_t *p)
d103 10
a112 4
	NNPFSDEB(XDEBDEV, ("xfs_devioctl dev = %d.%d, cmd = %lu, "
	    "data = %lx, flags = %x\n", major(dev), minor(dev), 
	    (unsigned long)cmd, (unsigned long)data, flags));
	return ENOTTY;
d115 4
d120 1
a120 1
xfs_devpoll(dev_t dev, int events, d_thread_t * p)
d122 4
a125 4
	struct xfs_channel *chan = &xfs_channel[minor(dev)];
	
	NNPFSDEB(XDEBDEV, ("xfs_devpoll dev = %d(%d), events = 0x%x\n",
	    major(dev), minor(dev), events));
d127 7
a133 7
	if ((events & (POLLIN | POLLRDNORM)) == 0)
		return 0;			/* only supports read */
	
	if (!xfs_emptyq(&chan->messageq))
		return (events & (POLLIN | POLLRDNORM));
	
	selrecord (p, &chan->selinfo);
d135 1
d137 2
d140 2
d146 1
a146 1
	selwakeup (&chan->selinfo);
d153 15
d169 10
a178 10
	xfs_devopen,
	xfs_devclose,
	xfs_devread,
	xfs_devwrite,
	xfs_devioctl,
	(dev_type_stop((*))) enodev,
	0,
	xfs_devpoll,
	(dev_type_mmap((*))) enodev,
	0
d181 76
d260 1
a260 1
	int i;
d262 24
a285 7
	for (i = 0; i < NNNPFS; i++) {
		NNPFSDEB(XDEBDEV, ("before initq(messageq and sleepq)\n"));
		xfs_initq(&xfs_channel[i].messageq);
		xfs_initq(&xfs_channel[i].sleepq);
		xfs_channel[i].status = 0;
	}
	return 0;
d291 26
a316 12
	int i;
	struct xfs_channel *chan;
	int ret = 0;
	
	for (i = 0; i < NNNPFS; i++) {
		chan = &xfs_channel[i];
		if (chan->status & CHANNEL_OPENED)
			xfs_devclose(makedev(0, i), 0, 0, NULL);
	}
	
	NNPFSDEB(XDEBLKM, ("xfs_uninstall_device error %d\n", ret));
	return ret;
d322 1
a322 1
	return xfs_uprintf_device();
d325 1
d331 1
a331 1
	minor(dev) >= 0 && minor(dev) < NNNPFS;
d333 1
@


