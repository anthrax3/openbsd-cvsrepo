head	1.10;
access;
symbols
	OPENBSD_4_5:1.9.0.18
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.16
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.14
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.12
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.10
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	arla-20030805:1.1.1.2
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.6.0.10
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.7
	UBC:1.6.0.8
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	SMP:1.4.0.4
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2009.06.03.14.45.55;	author jj;	state dead;
branches;
next	1.9;

1.9
date	2005.02.17.18.07.37;	author jfb;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.12.07.53.47;	author hin;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.07.04.10.32;	author hin;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.11.14.26.53;	author art;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	2000.03.03.00.54.58;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	99.04.30.01.59.01;	author art;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	98.09.06.01.48.58;	author art;	state Exp;
branches;
next	1.2;

1.2
date	98.08.31.05.13.28;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.08.30.16.47.21;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.03.32.59;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.12.07.43.51;	author hin;	state Exp;
branches;
next	;

1.4.4.1
date	2000.03.24.09.09.55;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2001.05.14.22.47.52;	author niklas;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2003.03.28.00.41.31;	author niklas;	state Exp;
branches;
next	1.4.4.4;

1.4.4.4
date	2004.02.19.11.01.50;	author niklas;	state Exp;
branches;
next	;

1.6.8.1
date	2002.06.11.03.33.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* 	$arla: xfs_node.h,v 1.33 2003/01/25 18:48:28 lha Exp $	 */

#ifndef _xfs_xnode_h
#define _xfs_xnode_h

#include <sys/types.h>
#include <sys/time.h>
#ifdef HAVE_KERNEL_LF_ADVLOCK
#include <sys/lockf.h>
#endif

#include <xfs/xfs_attr.h>
#include <xfs/xfs_message.h>
#include <xfs/xfs_queue.h>

#ifdef __APPLE__
typedef struct lock__bsd__ xfs_vnode_lock;
#else
typedef struct lock xfs_vnode_lock;
#endif

struct xfs_node {
#if defined(__NetBSD_Version__) && __NetBSD_Version__ >= 105280000
    struct genfs_node gnode;
#endif
    struct vnode *vn;
    struct vnode *data;
    struct vattr attr;
    uint32_t offset;
    u_int flags;
    u_int tokens;
    xfs_handle handle;
    xfs_pag_t id[MAXRIGHTS];
    u_char rights[MAXRIGHTS];
    u_char anonrights;
#if defined(HAVE_KERNEL_LOCKMGR) || defined(HAVE_KERNEL_DEBUGLOCKMGR)
    xfs_vnode_lock lock;
#else
    int vnlocks;
#endif
#ifdef HAVE_KERNEL_LF_ADVLOCK
    struct   lockf *lockf;
#endif
    struct ucred *rd_cred;
    struct ucred *wr_cred;
    NNPQUEUE_ENTRY(xfs_node) nn_hash;
};

#define XN_HASHSIZE	101

NNPQUEUE_HEAD(nh_node_list, xfs_node);

struct xfs_nodelist_head {
    struct nh_node_list	nh_nodelist[XN_HASHSIZE];
};

void	nnfs_init_head(struct xfs_nodelist_head *);
void	xfs_node_purge(struct xfs_nodelist_head *,
			 void (*func)(struct xfs_node *));
struct xfs_node *
	xfs_node_find(struct xfs_nodelist_head *, xfs_handle *);
void	xfs_remove_node(struct xfs_nodelist_head *, struct xfs_node *);
void	xfs_insert(struct xfs_nodelist_head *, struct xfs_node *);
int	xfs_update_handle(struct xfs_nodelist_head *, xfs_handle *, 
			    xfs_handle *);


struct xfs;

int xfs_getnewvnode(struct xfs *xfsp, struct vnode **vpp,
		      struct xfs_handle *handle);


#define DATA_FROM_VNODE(vp) DATA_FROM_XNODE(VNODE_TO_XNODE(vp))

#define DATA_FROM_XNODE(xp) ((xp)->data)

#define XNODE_TO_VNODE(xp) ((xp)->vn)
#define VNODE_TO_XNODE(vp) ((struct xfs_node *) (vp)->v_data)

#if defined(HAVE_ONE_ARGUMENT_VGET)
#define xfs_do_vget(vp, lockflag, proc) vget((vp))
#elif defined(HAVE_TWO_ARGUMENT_VGET)
#define xfs_do_vget(vp, lockflag, proc) vget((vp), (lockflag))
#elif defined(HAVE_THREE_ARGUMENT_VGET)
#define xfs_do_vget(vp, lockflag, proc) vget((vp), (lockflag), (proc))
#else
#error what kind of vget
#endif

#ifndef HAVE_VOP_T
typedef int vop_t (void *);
#endif

#ifdef LK_INTERLOCK
#define HAVE_LK_INTERLOCK
#else
#define LK_INTERLOCK 0
#endif

#ifdef LK_RETRY
#define HAVE_LK_RETRY
#else
#define LK_RETRY 0
#endif

/*
 * This is compat code for older vfs that have a 
 * vget that only takes an integer (really boolean) argument
 * that the returned vnode will be returned locked
 */

#ifdef LK_EXCLUSIVE
#define HAVE_LK_EXCLUSIVE 1
#else
#define LK_EXCLUSIVE 1
#endif

#ifdef LK_SHARED
#define HAVE_LK_SHARED 1
#else
#define LK_SHARED 1
#endif

void	xfs_update_write_cred(struct xfs_node *, struct ucred *);
void	xfs_update_read_cred(struct xfs_node *, struct ucred *);

#endif				       /* _xfs_xnode_h */
@


1.9
log
@miscellaneous typo fixes:
- sturct -> struct (spotted by pedro)
- elimination of consecutive 'the' words

ok jmc@@, henning@@, krw@@, robert@@, some whining by jolan@@
@
text
@@


1.8
log
@Merge
@
text
@d142 2
a143 2
 * vget that only take a integer (really boolean) argument
 * that the the returned vnode will be returned locked
@


1.7
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d34 1
a34 1
/* 	$Id: xfs_node.h,v 1.6 2000/09/11 14:26:53 art Exp $	 */
d41 2
a42 2
#if defined(_KERNEL) || !defined(__OpenBSD__)
#include <sys/vnode.h>
a43 3
#ifdef __NetBSD__
#include <sys/lockf.h>
#endif /* __NetBSD__ */
d47 1
d56 3
d62 1
d74 2
a75 2
#ifdef __NetBSD__
    struct   lockf *i_lockf;
d77 3
a79 1
    struct ucred *cred;
d82 23
a104 2
int xfs_getnewvnode(struct mount *mp, struct vnode **vpp,
                struct xfs_handle *handle);
d157 3
@


1.6
log
@New xfs from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 *
 * 4. Neither the name of the Institute nor the names of its contributors
d34 1
a34 1
/* 	$Id: xfs_node.h,v 1.21 2000/08/02 00:58:40 assar Exp $	 */
@


1.6.8.1
log
@Sync UBC branch to -current
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
/* 	$Id: xfs_node.h,v 1.6 2000/09/11 14:26:53 art Exp $	 */
@


1.5
log
@$OpenBSD$
@
text
@a0 1
/* 	$OpenBSD: xfs_node.h,v 1.4 1999/04/30 01:59:01 art Exp $	 */
d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d39 1
d56 6
d69 1
a69 1
    pag_t id[MAXRIGHTS];
d72 3
d76 1
d80 1
d94 5
a98 1
#if defined(HAVE_THREE_ARGUMENT_VGET)
a99 2
#elif !defined(__osf__)
#define xfs_do_vget(vp, lockflag, proc) vget((vp), (lockflag))
d101 1
a101 1
#define xfs_do_vget(vp, lockflag, proc) vget((vp))
@


1.4
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d1 1
a39 1
/* 	$Id: xfs_node.h,v 1.12 1999/03/20 01:19:34 lha Exp $	 */
@


1.4.4.1
log
@Sync with -current
@
text
@a0 1
/* 	$OpenBSD$	 */
d39 1
@


1.4.4.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
a39 1
/* 	$Id: xfs_node.h,v 1.6 2000/09/11 14:26:53 art Exp $	 */
a55 6
#ifdef __APPLE__
typedef struct lock__bsd__ xfs_vnode_lock;
#else
typedef struct lock xfs_vnode_lock;
#endif

d63 1
a63 1
    xfs_pag_t id[MAXRIGHTS];
a65 3
#if defined(HAVE_KERNEL_LOCKMGR) || defined(HAVE_KERNEL_DEBUGLOCKMGR)
    xfs_vnode_lock lock;
#else
a66 1
#endif
a69 1
    struct ucred *cred;
d83 3
a85 3
#if defined(HAVE_ONE_ARGUMENT_VGET)
#define xfs_do_vget(vp, lockflag, proc) vget((vp))
#elif defined(HAVE_TWO_ARGUMENT_VGET)
a86 2
#elif defined(HAVE_THREE_ARGUMENT_VGET)
#define xfs_do_vget(vp, lockflag, proc) vget((vp), (lockflag), (proc))
d88 1
a88 1
#error what kind of vget
@


1.4.4.3
log
@Sync the SMP branch with 3.3
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
/* 	$Id$	 */
@


1.4.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d34 1
a34 1
/* 	$arla: xfs_node.h,v 1.33 2003/01/25 18:48:28 lha Exp $	 */
d41 4
a44 1
#ifdef HAVE_KERNEL_LF_ADVLOCK
d46 1
a46 1
#endif
a49 1
#include <xfs/xfs_queue.h>
a57 3
#if defined(__NetBSD_Version__) && __NetBSD_Version__ >= 105280000
    struct genfs_node gnode;
#endif
a60 1
    uint32_t offset;
d72 2
a73 2
#ifdef HAVE_KERNEL_LF_ADVLOCK
    struct   lockf *lockf;
d75 1
a75 3
    struct ucred *rd_cred;
    struct ucred *wr_cred;
    NNPQUEUE_ENTRY(xfs_node) nn_hash;
d78 2
a79 23
#define XN_HASHSIZE	101

NNPQUEUE_HEAD(nh_node_list, xfs_node);

struct xfs_nodelist_head {
    struct nh_node_list	nh_nodelist[XN_HASHSIZE];
};

void	nnfs_init_head(struct xfs_nodelist_head *);
void	xfs_node_purge(struct xfs_nodelist_head *,
			 void (*func)(struct xfs_node *));
struct xfs_node *
	xfs_node_find(struct xfs_nodelist_head *, xfs_handle *);
void	xfs_remove_node(struct xfs_nodelist_head *, struct xfs_node *);
void	xfs_insert(struct xfs_nodelist_head *, struct xfs_node *);
int	xfs_update_handle(struct xfs_nodelist_head *, xfs_handle *, 
			    xfs_handle *);


struct xfs;

int xfs_getnewvnode(struct xfs *xfsp, struct vnode **vpp,
		      struct xfs_handle *handle);
a131 3

void	xfs_update_write_cred(struct xfs_node *, struct ucred *);
void	xfs_update_read_cred(struct xfs_node *, struct ucred *);
@


1.3
log
@ * reorganize some includes
 * start using the VT_XFS tag on vnodes
 * be more paranoid about closed channel when going to sleep.
@
text
@a0 1
/*	$OpenBSD: xfs_node.h,v 1.2 1998/08/31 05:13:28 art Exp $	*/
d39 1
a39 1
/* 	$KTH: xfs_node.h,v 1.3 1998/07/13 20:36:37 art Exp $	 */
d41 2
a42 2
#ifndef _XFS_XFS_NODE_H_
#define _XFS_XFS_NODE_H_
a43 1
#if 0
d46 1
d49 3
d57 13
a69 9
	struct vnode	*vn;
	struct vnode	*data;
	struct vattr	attr;
	u_int		flags;
	u_int		tokens;
	xfs_handle	handle;
	pag_t		id[MAXRIGHTS];
	u_char		rights[MAXRIGHTS];
	u_char		anonrights;
d72 4
d77 1
d83 22
d106 20
@


1.2
log
@indent the code and move around some includes, after discussion with Theo
@
text
@d1 1
a1 1
/*	$OpenBSD: xfs_node.h,v 1.1 1998/08/30 16:47:21 art Exp $	*/
d45 1
d49 1
@


1.1
log
@xfs - a filesystem using a user-land cache manager. Designed for AFS.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 2
a43 2
#ifndef _xfs_xnode_h
#define _xfs_xnode_h
d49 2
a50 2
#include <sys/xfs_attr.h>
#include <sys/xfs_message.h>
d53 9
a61 9
    struct vnode *vn;
    struct vnode *data;
    struct vattr attr;
    u_int flags;
    u_int tokens;
    xfs_handle handle;
    pag_t id[MAXRIGHTS];
    u_char rights[MAXRIGHTS];
    u_char anonrights;
a64 1

d70 1
a70 1
#endif				       /* _xfs_xnode_h */
@


1.1.1.1
log
@Import of xfs from arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
/* 	$Id: xfs_node.h,v 1.1.1.1 2002/06/05 17:24:11 hin Exp $	 */
a46 1
#if defined(_KERNEL) || !defined(__OpenBSD__)
d48 3
a50 13
#endif
#ifdef __NetBSD__
#include <sys/lockf.h>
#endif /* __NetBSD__ */

#include <xfs/xfs_attr.h>
#include <xfs/xfs_message.h>

#ifdef __APPLE__
typedef struct lock__bsd__ xfs_vnode_lock;
#else
typedef struct lock xfs_vnode_lock;
#endif
d59 1
a59 1
    xfs_pag_t id[MAXRIGHTS];
a61 9
#if defined(HAVE_KERNEL_LOCKMGR) || defined(HAVE_KERNEL_DEBUGLOCKMGR)
    xfs_vnode_lock lock;
#else
    int vnlocks;
#endif
#ifdef __NetBSD__
    struct   lockf *i_lockf;
#endif
    struct ucred *cred;
a63 4
int xfs_getnewvnode(struct mount *mp, struct vnode **vpp,
                struct xfs_handle *handle);


a69 44

#if defined(HAVE_ONE_ARGUMENT_VGET)
#define xfs_do_vget(vp, lockflag, proc) vget((vp))
#elif defined(HAVE_TWO_ARGUMENT_VGET)
#define xfs_do_vget(vp, lockflag, proc) vget((vp), (lockflag))
#elif defined(HAVE_THREE_ARGUMENT_VGET)
#define xfs_do_vget(vp, lockflag, proc) vget((vp), (lockflag), (proc))
#else
#error what kind of vget
#endif

#ifndef HAVE_VOP_T
typedef int vop_t (void *);
#endif

#ifdef LK_INTERLOCK
#define HAVE_LK_INTERLOCK
#else
#define LK_INTERLOCK 0
#endif

#ifdef LK_RETRY
#define HAVE_LK_RETRY
#else
#define LK_RETRY 0
#endif

/*
 * This is compat code for older vfs that have a 
 * vget that only take a integer (really boolean) argument
 * that the the returned vnode will be returned locked
 */

#ifdef LK_EXCLUSIVE
#define HAVE_LK_EXCLUSIVE 1
#else
#define LK_EXCLUSIVE 1
#endif

#ifdef LK_SHARED
#define HAVE_LK_SHARED 1
#else
#define LK_SHARED 1
#endif
@


1.1.1.2
log
@Import xfs from arla-current as of 5 Aug 2003.

ok deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d34 1
a34 1
/* 	$arla: xfs_node.h,v 1.33 2003/01/25 18:48:28 lha Exp $	 */
d41 4
a44 1
#ifdef HAVE_KERNEL_LF_ADVLOCK
d46 1
a46 1
#endif
a49 1
#include <xfs/xfs_queue.h>
a57 3
#if defined(__NetBSD_Version__) && __NetBSD_Version__ >= 105280000
    struct genfs_node gnode;
#endif
a60 1
    uint32_t offset;
d72 2
a73 2
#ifdef HAVE_KERNEL_LF_ADVLOCK
    struct   lockf *lockf;
d75 1
a75 3
    struct ucred *rd_cred;
    struct ucred *wr_cred;
    NNPQUEUE_ENTRY(xfs_node) nn_hash;
d78 2
a79 23
#define XN_HASHSIZE	101

NNPQUEUE_HEAD(nh_node_list, xfs_node);

struct xfs_nodelist_head {
    struct nh_node_list	nh_nodelist[XN_HASHSIZE];
};

void	nnfs_init_head(struct xfs_nodelist_head *);
void	xfs_node_purge(struct xfs_nodelist_head *,
			 void (*func)(struct xfs_node *));
struct xfs_node *
	xfs_node_find(struct xfs_nodelist_head *, xfs_handle *);
void	xfs_remove_node(struct xfs_nodelist_head *, struct xfs_node *);
void	xfs_insert(struct xfs_nodelist_head *, struct xfs_node *);
int	xfs_update_handle(struct xfs_nodelist_head *, xfs_handle *, 
			    xfs_handle *);


struct xfs;

int xfs_getnewvnode(struct xfs *xfsp, struct vnode **vpp,
		      struct xfs_handle *handle);
a131 3

void	xfs_update_write_cred(struct xfs_node *, struct ucred *);
void	xfs_update_read_cred(struct xfs_node *, struct ucred *);
@


