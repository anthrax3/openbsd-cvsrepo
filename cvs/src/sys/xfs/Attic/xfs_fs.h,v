head	1.10;
access;
symbols
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	arla-20030805:1.1.1.2
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.5.0.10
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.5.0.8
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.10
date	2009.06.03.14.45.55;	author jj;	state dead;
branches;
next	1.9;

1.9
date	2009.01.15.07.47.05;	author grange;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.12.07.53.47;	author hin;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.24.22.00.24;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.07.04.10.32;	author hin;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.11.14.26.52;	author art;	state Exp;
branches
	1.5.8.1;
next	1.4;

1.4
date	2000.03.03.00.54.58;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	99.04.30.01.59.00;	author art;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	98.08.31.05.13.26;	author art;	state Exp;
branches;
next	1.1;

1.1
date	98.08.30.16.47.21;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.03.32.59;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.12.07.43.51;	author hin;	state Exp;
branches;
next	;

1.3.4.1
date	2000.03.24.09.09.55;	author niklas;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2001.05.14.22.47.52;	author niklas;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2004.02.19.11.01.48;	author niklas;	state Exp;
branches;
next	;

1.5.8.1
date	2002.06.11.03.33.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@/*
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* $arla: xfs_fs.h,v 1.22 2002/12/19 09:49:19 lha Exp $ */

#ifndef _xfs_h
#define _xfs_h

#include <sys/types.h>

#include <xfs/xfs_common.h>
#include <xfs/xfs_node.h>
#include <xfs/xfs_attr.h>

#define NNNPFS 2 /* maximal number of filesystems on a single device */

/*
 * Filesystem struct.
 */

struct xfs {
    u_int status;		       /* Inited, opened or mounted */
#define NNPFS_MOUNTED	0x1
    struct mount *mp;
    struct xfs_node *root;
    u_int nnodes;
    int fd;
    struct xfs_nodelist_head nodehead;
};

#ifdef __osf__
#ifdef HAVE_STRUCT_MOUNT_M_INFO
#define VFS_TO_NNPFS(v)      ((struct xfs *) ((v)->m_info))
#define VFS_ASSIGN(v, val)   do { (v)->m_info = (void *) (val); } while (0)
#else
#define VFS_TO_NNPFS(v)      ((struct xfs *) ((v)->m_data))
#define VFS_ASSIGN(v, val)   do { (v)->m_data = (void *) (val); } while (0)
#endif
#else
#define VFS_TO_NNPFS(v)      ((struct xfs *) ((v)->mnt_data))
#define VFS_ASSIGN(v, val)   do { (v)->mnt_data = (void *) (val); } while (0)
#endif
#define NNPFS_TO_VFS(x)      ((x)->mp)

#define NNPFS_FROM_VNODE(vp) VFS_TO_NNPFS((vp)->v_mount)
#define NNPFS_FROM_XNODE(xp) NNPFS_FROM_VNODE(XNODE_TO_VNODE(xp))

extern struct xfs xfs[];

extern struct vnodeops xfs_vnodeops;

int new_xfs_node(struct xfs *, struct xfs_msg_node *, struct xfs_node **,
		 d_thread_t *);
void free_xfs_node(struct xfs_node *);
int free_all_xfs_nodes(struct xfs *, int, int);

int xfs_dnlc_enter(struct vnode *, xfs_componentname *, struct vnode *);
int xfs_dnlc_enter_name(struct vnode *, const char *, struct vnode *);
void xfs_dnlc_purge_mp(struct mount *);
void xfs_dnlc_purge(struct vnode *);
int xfs_dnlc_lookup(struct vnode *, xfs_componentname *, struct vnode **);
int xfs_dnlc_lookup_name(struct vnode *, const char *, struct vnode **);

void vattr2xfs_attr(const struct vattr *, struct xfs_attr *);
void xfs_attr2vattr(const struct xfs_attr *, struct vattr *, int);

int xfs_has_pag(const struct xfs_node *, xfs_pag_t);

#endif				       /* _xfs_h */
@


1.9
log
@Don't use (type *)var as an lvalue in assigment, it's incorrect.
Provide proper assignment macro instead. No binary change.

ok beck@@
@
text
@@


1.8
log
@Merge
@
text
@d64 1
d67 1
d71 1
@


1.7
log
@kill some externs that are not there anymore and had left other places for a better void ages ago
@
text
@d34 1
a34 1
/* $Id: xfs_fs.h,v 1.6 2002/06/07 04:10:32 hin Exp $ */
d45 1
a45 1
#include <xfs/nxfs.h>
d50 1
d53 1
a53 1
#define XFS_MOUNTED	0x1
d58 1
d63 1
a63 1
#define VFS_TO_XFS(v)      ((struct xfs *) ((v)->m_info))
d65 1
a65 1
#define VFS_TO_XFS(v)      ((struct xfs *) ((v)->m_data))
d68 1
a68 1
#define VFS_TO_XFS(v)      ((struct xfs *) ((v)->mnt_data))
d70 1
a70 1
#define XFS_TO_VFS(x)      ((x)->mp)
d72 2
a73 2
#define XFS_FROM_VNODE(vp) VFS_TO_XFS((vp)->v_mount)
#define XFS_FROM_XNODE(xp) XFS_FROM_VNODE(XNODE_TO_VNODE(xp))
d77 2
a78 1
struct xfs_node *xfs_node_find(struct xfs *, struct xfs_handle *);
d80 1
a80 1
		 struct proc *);
@


1.6
log
@merge
@
text
@d34 1
a34 1
/* $Id: xfs_fs.h,v 1.1.1.1 2002/06/07 03:32:59 hin Exp $ */
a73 2

extern struct vnodeops xfs_vnodeops;
@


1.5
log
@New xfs from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 *
 * 4. Neither the name of the Institute nor the names of its contributors
d34 1
a34 1
/* $Id: xfs_fs.h,v 1.17 2000/07/13 01:03:46 assar Exp $ */
d45 1
a45 1
#define NXFS 2 /* maximal number of filesystems on a single device */
d91 1
a91 1
void xfs_attr2vattr(const struct xfs_attr *, struct vattr *);
@


1.5.8.1
log
@Sync UBC branch to -current
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
/* $Id: xfs_fs.h,v 1.5 2000/09/11 14:26:52 art Exp $ */
d50 1
a50 1
#include <xfs/nxfs.h>
d96 1
a96 1
void xfs_attr2vattr(const struct xfs_attr *, struct vattr *, int);
@


1.4
log
@$OpenBSD$
@
text
@a0 1
/* $OpenBSD: xfs_fs.h,v 1.3 1999/04/30 01:59:00 art Exp $ */
d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998 Kungliga Tekniska Högskolan
d39 1
d65 3
d69 1
a94 9
void
xfs_cnp_init (xfs_componentname *ndp,
	      const char *name,
	      struct vnode *vp,
	      struct vnode *dvp,
	      struct proc *proc,
	      struct ucred *cred,
	      int nameiop);

d98 1
a98 1
int xfs_has_pag(const struct xfs_node *, pag_t);
@


1.3
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d1 1
a39 1
/* $Id: xfs_fs.h,v 1.14 1999/02/26 00:44:54 lha Exp $ */
@


1.3.4.1
log
@Sync with -current
@
text
@a0 1
/* $OpenBSD$ */
d39 1
@


1.3.4.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
a39 1
/* $Id: xfs_fs.h,v 1.5 2000/09/11 14:26:52 art Exp $ */
a64 3
#ifdef HAVE_STRUCT_MOUNT_M_INFO
#define VFS_TO_XFS(v)      ((struct xfs *) ((v)->m_info))
#else
a65 1
#endif
d91 9
d103 1
a103 1
int xfs_has_pag(const struct xfs_node *, xfs_pag_t);
@


1.3.4.3
log
@Sync the SMP branch with 3.3
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
/* $Id$ */
d50 1
a50 1
#include <xfs/nxfs.h>
d96 1
a96 1
void xfs_attr2vattr(const struct xfs_attr *, struct vattr *, int);
@


1.3.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d34 1
a34 1
/* $arla: xfs_fs.h,v 1.22 2002/12/19 09:49:19 lha Exp $ */
d45 1
a45 1
#define NNNPFS 2 /* maximal number of filesystems on a single device */
a49 1

d52 1
a52 1
#define NNPFS_MOUNTED	0x1
a56 1
    struct xfs_nodelist_head nodehead;
d61 1
a61 1
#define VFS_TO_NNPFS(v)      ((struct xfs *) ((v)->m_info))
d63 1
a63 1
#define VFS_TO_NNPFS(v)      ((struct xfs *) ((v)->m_data))
d66 1
a66 1
#define VFS_TO_NNPFS(v)      ((struct xfs *) ((v)->mnt_data))
d68 1
a68 1
#define NNPFS_TO_VFS(x)      ((x)->mp)
d70 2
a71 2
#define NNPFS_FROM_VNODE(vp) VFS_TO_NNPFS((vp)->v_mount)
#define NNPFS_FROM_XNODE(xp) NNPFS_FROM_VNODE(XNODE_TO_VNODE(xp))
d77 1
d79 1
a79 1
		 d_thread_t *);
@


1.2
log
@indent the code and move around some includes, after discussion with Theo
@
text
@a0 1
/*	$OpenBSD: xfs_fs.h,v 1.1 1998/08/30 16:47:21 art Exp $	*/
d39 1
a39 1
/* $KTH: xfs_fs.h,v 1.8 1998/04/04 01:17:26 art Exp $ */
d41 2
a42 2
#ifndef _XFS_XFS_H_
#define _XFS_XFS_H_
d46 1
d49 2
a50 1
#include <xfs/nxfs.h>
d56 1
a56 1
	u_int		status;		/* Inited, opened or mounted */
d58 4
a61 4
	struct mount	*mp;
	struct xfs_node	*root;
	u_int		nnodes;
	int		fd;
d64 3
d68 1
d78 21
a98 10
struct xfs_node *xfs_node_find __P((struct xfs *, struct xfs_handle *));
int new_xfs_node __P((struct xfs *, struct xfs_msg_node *, struct xfs_node **,
		      struct proc *));
void free_xfs_node __P((struct xfs_node *));
int free_all_xfs_nodes __P((struct xfs *, int));

int xfs_dnlc_enter __P((struct vnode *, char *, struct vnode *));
void xfs_dnlc_purge __P((struct mount *));
int xfs_dnlc_lookup __P((struct vnode *, struct componentname *,
			 struct vnode **));
d100 2
a101 2
void vattr2xfs_attr __P((const struct vattr * va, struct xfs_attr *xa));
void xfs_attr2vattr __P((const struct xfs_attr *xa, struct vattr * va));
d103 1
a103 1
int xfs_has_pag __P((const struct xfs_node *xn, pag_t pag));
d105 1
a105 1
#endif
@


1.1
log
@xfs - a filesystem using a user-land cache manager. Designed for AFS.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 2
a43 2
#ifndef _xfs_h
#define _xfs_h
d48 2
a49 3
#include <sys/xfs_attr.h>

#define NXFS 2 /* maximal number of filesystems on a single device */
d55 1
a55 1
    u_int status;		       /* Inited, opened or mounted */
d57 4
a60 5
    struct mount *mp;
    struct xfs_node *root;
    u_int nnodes;

    int fd;
d73 10
a82 9
struct xfs_node *xfs_node_find(struct xfs *, struct xfs_handle *);
int new_xfs_node(struct xfs *, struct xfs_msg_node *, struct xfs_node **,
		 struct proc *);
void free_xfs_node(struct xfs_node *);
int free_all_xfs_nodes(struct xfs *, int);

int xfs_dnlc_enter(struct vnode *, char *, struct vnode *);
void xfs_dnlc_purge(struct mount *);
int xfs_dnlc_lookup(struct vnode *, struct componentname *, struct vnode **);
d84 2
a85 2
void vattr2xfs_attr(const struct vattr * va, struct xfs_attr *xa);
void xfs_attr2vattr(const struct xfs_attr *xa, struct vattr * va);
d87 1
a87 1
int xfs_has_pag(const struct xfs_node *xn, pag_t pag);
d89 1
a89 1
#endif				       /* _xfs_h */
@


1.1.1.1
log
@Import of xfs from arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
/* $Id: xfs_fs.h,v 1.1.1.1 2002/06/05 17:24:11 hin Exp $ */
a46 1
#include <xfs/xfs_common.h>
d48 1
a48 1
#include <xfs/xfs_attr.h>
d50 1
a50 1
#include <xfs/nxfs.h>
d61 1
a64 7
#ifdef __osf__
#ifdef HAVE_STRUCT_MOUNT_M_INFO
#define VFS_TO_XFS(v)      ((struct xfs *) ((v)->m_info))
#else
#define VFS_TO_XFS(v)      ((struct xfs *) ((v)->m_data))
#endif
#else
a65 1
#endif
d79 1
a79 1
int free_all_xfs_nodes(struct xfs *, int, int);
d81 3
a83 6
int xfs_dnlc_enter(struct vnode *, xfs_componentname *, struct vnode *);
int xfs_dnlc_enter_name(struct vnode *, const char *, struct vnode *);
void xfs_dnlc_purge_mp(struct mount *);
void xfs_dnlc_purge(struct vnode *);
int xfs_dnlc_lookup(struct vnode *, xfs_componentname *, struct vnode **);
int xfs_dnlc_lookup_name(struct vnode *, const char *, struct vnode **);
d85 2
a86 2
void vattr2xfs_attr(const struct vattr *, struct xfs_attr *);
void xfs_attr2vattr(const struct xfs_attr *, struct vattr *, int);
d88 1
a88 1
int xfs_has_pag(const struct xfs_node *, xfs_pag_t);
@


1.1.1.2
log
@Import xfs from arla-current as of 5 Aug 2003.

ok deraadt@@
@
text
@d34 1
a34 1
/* $arla: xfs_fs.h,v 1.22 2002/12/19 09:49:19 lha Exp $ */
d45 1
a45 1
#define NNNPFS 2 /* maximal number of filesystems on a single device */
a49 1

d52 1
a52 1
#define NNPFS_MOUNTED	0x1
a56 1
    struct xfs_nodelist_head nodehead;
d61 1
a61 1
#define VFS_TO_NNPFS(v)      ((struct xfs *) ((v)->m_info))
d63 1
a63 1
#define VFS_TO_NNPFS(v)      ((struct xfs *) ((v)->m_data))
d66 1
a66 1
#define VFS_TO_NNPFS(v)      ((struct xfs *) ((v)->mnt_data))
d68 1
a68 1
#define NNPFS_TO_VFS(x)      ((x)->mp)
d70 2
a71 2
#define NNPFS_FROM_VNODE(vp) VFS_TO_NNPFS((vp)->v_mount)
#define NNPFS_FROM_XNODE(xp) NNPFS_FROM_VNODE(XNODE_TO_VNODE(xp))
d77 1
d79 1
a79 1
		 d_thread_t *);
@


