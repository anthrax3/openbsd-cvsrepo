head	1.12;
access;
symbols
	OPENBSD_4_5:1.11.0.22
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.20
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.18
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.16
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.14
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.12
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.10
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.8
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.6
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	arla-20030805:1.1.1.2
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.8
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.12
date	2009.06.03.14.45.55;	author jj;	state dead;
branches;
next	1.11;

1.11
date	2003.11.08.19.17.28;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.12.10.55.09;	author hin;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.12.07.53.47;	author hin;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.07.04.10.32;	author hin;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.26.12.03.28;	author art;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.02.21.02.45.12;	author nate;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.11.14.26.53;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.03.00.54.59;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.07.04.57.19;	author assar;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2000.02.01.04.12.19;	author assar;	state Exp;
branches;
next	1.1;

1.1
date	99.04.30.01.59.01;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.03.32.59;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.12.07.43.50;	author hin;	state Exp;
branches;
next	;

1.3.2.1
date	2000.03.24.09.09.55;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2001.05.14.22.47.53;	author niklas;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2001.10.31.03.32.14;	author nate;	state Exp;
branches;
next	1.3.2.4;

1.3.2.4
date	2003.03.28.00.41.31;	author niklas;	state Exp;
branches;
next	1.3.2.5;

1.3.2.5
date	2004.02.19.11.01.51;	author niklas;	state Exp;
branches;
next	;

1.7.2.1
date	2002.06.11.03.33.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@/*
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <xfs/xfs_locl.h>

RCSID("$arla: xfs_vfsops-bsd.c,v 1.72 2002/12/19 10:30:17 lha Exp $");

/*
 * NNPFS vfs operations.
 */

#include <xfs/xfs_common.h>
#include <xfs/xfs_message.h>
#include <xfs/xfs_fs.h>
#include <xfs/xfs_dev.h>
#include <xfs/xfs_deb.h>
#include <xfs/xfs_vfsops.h>
#include <xfs/xfs_vfsops-bsd.h>
#include <xfs/xfs_vnodeops.h>

int
xfs_mount_caddr(struct mount *mp,
		const char *user_path,
		caddr_t user_data,
		struct nameidata *ndp,
		d_thread_t *p)
{
    return xfs_mount_common(mp, user_path, user_data, ndp, p);
}

int
xfs_start(struct mount * mp, int flags, d_thread_t * p)
{
    NNPFSDEB(XDEBVFOPS, ("xfs_start mp = %lx, flags = %d, proc = %lx\n", 
		       (unsigned long)mp, flags, (unsigned long)p));
    return 0;
}


int
xfs_unmount(struct mount * mp, int mntflags, d_thread_t *p)
{
    NNPFSDEB(XDEBVFOPS, ("xfs_umount: mp = %lx, mntflags = %d, proc = %lx\n", 
		       (unsigned long)mp, mntflags, (unsigned long)p));
    return xfs_unmount_common(mp, mntflags);
}

int
xfs_root(struct mount *mp, struct vnode **vpp)
{
    NNPFSDEB(XDEBVFOPS, ("xfs_root mp = %lx\n", (unsigned long)mp));
#ifdef HAVE_FREEBSD_THREAD
    return xfs_root_common(mp, vpp, xfs_curthread(), xfs_curthread()->td_proc->p_ucred);
#else
    return xfs_root_common(mp, vpp, xfs_curproc(), xfs_curproc()->p_ucred);
#endif
}

int
xfs_quotactl(struct mount *mp, int cmd, uid_t uid, caddr_t arg, d_thread_t *p)
{
    NNPFSDEB(XDEBVFOPS, ("xfs_quotactl: mp = %lx, cmd = %d, uid = %u, "
		       "arg = %lx, proc = %lx\n", 
		       (unsigned long)mp, cmd, uid,
		       (unsigned long)arg, (unsigned long)p));
    return EOPNOTSUPP;
}

int
xfs_statfs(struct mount *mp, struct statfs *sbp, d_thread_t *p)
{
    NNPFSDEB(XDEBVFOPS, ("xfs_statfs: mp = %lx, sbp = %lx, proc = %lx\n", 
		       (unsigned long)mp,
		       (unsigned long)sbp,
		       (unsigned long)p));
    bcopy(&mp->mnt_stat, sbp, sizeof(*sbp));
    return 0;
}

int
xfs_sync(struct mount *mp, int waitfor, struct ucred *cred, d_thread_t *p)
{
    NNPFSDEB(XDEBVFOPS, ("xfs_sync: mp = %lx, waitfor = %d, "
		       "cred = %lx, proc = %lx\n",
		       (unsigned long)mp,
		       waitfor,
		       (unsigned long)cred,
		       (unsigned long)p));
    return 0;
}

int
xfs_vget(struct mount * mp,
#ifdef __APPLE__
	 void *ino,
#else
	 ino_t ino,
#endif
	 struct vnode ** vpp)
{
    NNPFSDEB(XDEBVFOPS, ("xfs_vget\n"));
    return EOPNOTSUPP;
}

static int
common_fhtovp(struct mount * mp,
	   struct fid * fhp,
	   struct vnode ** vpp)
{
#ifdef ARLA_KNFS
    struct netcred *np = NULL;
    struct xfs_node *xn;
    struct vnode *vp;
    xfs_handle handle;
    int error;

    NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp\n"));

    if (fhp->fid_len != 16) {
	printf("xfs_fhtovp: *PANIC* got a invalid length of a fid\n");
	return EINVAL;
    }

    memcpy(&handle, fhp->fid_data, sizeof(handle));
    NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp: fid: %d.%d.%d.%d\n", 
		       handle.a, handle.d, handle.c, handle.d));

    NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp: xfs_vnode_find\n"));
    xn = xfs_node_find(&xfs[0].nodehead, &handle);

    if (xn == NULL) {
	struct xfs_message_getattr msg;

        error = xfs_getnewvnode(xfs[0].mp, &vp, &handle);
        if (error)
            return error;
	
	xfs_do_vget(vp, 0, curproc);

    } else {
	/* XXX access ? */
	vp = XNODE_TO_VNODE(xn);

	/* XXX wrong ? (we tell arla below) */
        if (vp->v_usecount <= 0) 
	    xfs_do_vget(vp, 0, curproc);
	else
	    VREF(vp);
	error = 0;
    }

    *vpp = vp;

    if (error == 0) {
	NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp done\n"));

	/* 
	 * XXX tell arla about this node is hold by nfsd.
	 * There need to be code in xfs_write too.
	 */
    } else
	NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp failed (%d)\n", error));

    return error;
#else /* !ARLA_KNFS */
    return EOPNOTSUPP;
#endif /* !ARLA_KNFS */
}

/* new style fhtovp */

#ifdef HAVE_STRUCT_VFSOPS_VFS_CHECKEXP
int
xfs_fhtovp(struct mount * mp,
	   struct fid * fhp,
	   struct vnode ** vpp)
{
    return common_fhtovp (mp, fhp, vpp);
}

#else /* !HAVE_STRUCT_VFSOPS_VFS_CHECKEXP */

/* old style fhtovp */

int
xfs_fhtovp(struct mount * mp,
	   struct fid * fhp,
	   struct mbuf * nam,
	   struct vnode ** vpp,
	   int *exflagsp,
	   struct ucred ** credanonp)
{
    static struct ucred fhtovpcred;
    int error;

    /* XXX: Should see if we is exported to this client */
#if 0
    np = vfs_export_lookup(mp, &ump->um_export, nam);
    if (np == NULL)
       return EACCES;
#endif
    error = common_fhtovp(mp, fhp, vpp);
    if (error == 0) {
       fhtovpcred.cr_uid = 0;
       fhtovpcred.cr_gid = 0;
       fhtovpcred.cr_ngroups = 0;
      
#ifdef MNT_EXPUBLIC
       *exflagsp = MNT_EXPUBLIC;
#else
       *exflagsp = 0;
#endif
       *credanonp = &fhtovpcred;
    }
    return error;
}
#endif /* !HAVE_STRUCT_VFSOPS_VFS_CHECKEXP */

int
xfs_checkexp (struct mount *mp,
#ifdef __FreeBSD__
	      struct sockaddr *nam,
#else
	      struct mbuf *nam,
#endif
	      int *exflagsp,
	      struct ucred **credanonp)
{
    NNPFSDEB(XDEBVFOPS, ("xfs_checkexp\n"));

#if 0
    np = vfs_export_lookup(mp, &ump->um_export, nam);
    if (np == NULL)
	return EACCES;
#endif
    return 0;
}

int
xfs_vptofh(struct vnode * vp,
	   struct fid * fhp)
{
#ifdef ARLA_KNFS
    struct xfs_node *xn;
    NNPFSDEB(XDEBVFOPS, ("xfs_vptofh\n"));

    if (MAXFIDSZ < 16)
	return EOPNOTSUPP;

    xn = VNODE_TO_XNODE(vp);

    if (xn == NULL)
	return EINVAL;

    fhp->fid_len = 16;
    memcpy(fhp->fid_data, &xn->handle,  16);

    return 0;
#else
    NNPFSDEB(XDEBVFOPS, ("xfs_vptofh\n"));
    return EOPNOTSUPP;
#endif
}

/* 
 * xfs complete dead vnodes implementation.
 *
 * this is because the dead_vnodeops_p is _not_ filesystem, but rather
 * a part of the vfs-layer.  
 */

int
xfs_dead_lookup(struct vop_lookup_args * ap)
     /* struct vop_lookup_args {
	struct vnodeop_desc *a_desc;
	struct vnode *a_dvp;
	struct vnode **a_vpp;
	struct componentname *a_cnp;
}; */
{
    *ap->a_vpp = NULL;
    return ENOTDIR;
}

/* 
 * Given `fsid', `fileid', and `gen', return in `vpp' a locked and
 * ref'ed vnode from that file system with that id and generation.
 * All is done in the context of `proc'.  Returns 0 if successful, and
 * error otherwise.  
 */

int
xfs_fhlookup (d_thread_t *proc,
	      struct xfs_fhandle_t *fhp,
	      struct vnode **vpp)
{
    int error;
    struct mount *mp;
#if !(defined(HAVE_GETFH) && defined(HAVE_FHOPEN))
    struct ucred *cred = proc->p_ucred;
    struct vattr vattr;
    fsid_t fsid;
    struct xfs_fh_args *fh_args = (struct xfs_fh_args *)fhp->fhdata;

    NNPFSDEB(XDEBVFOPS, ("xfs_fhlookup (xfs)\n"));

    error = xfs_suser (proc);
    if (error)
	return EPERM;

    if (fhp->len < sizeof(struct xfs_fh_args))
	return EINVAL;
    
    fsid = SCARG(fh_args, fsid);

    mp = xfs_vfs_getvfs (&fsid);
    if (mp == NULL)
	return ENXIO;

#ifdef __APPLE__
    {
	uint32_t ino = SCARG(fh_args, fileid);
	error = VFS_VGET(mp, &ino, vpp);
    }
#else
    error = VFS_VGET(mp, SCARG(fh_args, fileid), vpp);
#endif

    if (error)
	return error;

    if (*vpp == NULL)
	return ENOENT;

    error = VOP_GETATTR(*vpp, &vattr, cred, proc);
    if (error) {
	vput(*vpp);
	return error;
    }

    if (vattr.va_gen != SCARG(fh_args, gen)) {
	vput(*vpp);
	return ENOENT;
    }
#else /* HAVE_GETFH && HAVE_FHOPEN */
    {
	fhandle_t *fh = (fhandle_t *) fhp;

	NNPFSDEB(XDEBVFOPS, ("xfs_fhlookup (native)\n"));

	mp = xfs_vfs_getvfs (&fh->fh_fsid);
	if (mp == NULL)
	    return ESTALE;

	if ((error = VFS_FHTOVP(mp, &fh->fh_fid, vpp)) != 0) {
	    *vpp = NULL;
	    return error;
	}
    }
#endif  /* HAVE_GETFH && HAVE_FHOPEN */

#ifdef HAVE_KERNEL_VFS_OBJECT_CREATE
    if ((*vpp)->v_type == VREG && (*vpp)->v_object == NULL)
#ifdef HAVE_FREEBSD_THREAD
	xfs_vfs_object_create (*vpp, proc, proc->td_proc->p_ucred);
#else
	xfs_vfs_object_create (*vpp, proc, proc->p_ucred);
#endif
#elif __APPLE__
    if ((*vpp)->v_type == VREG && (!UBCINFOEXISTS(*vpp))) {
        ubc_info_init(*vpp);
    }
    ubc_hold(*vpp);
#endif
    return 0;
}



/*
 * Perform an open operation on the vnode identified by a `xfs_fhandle_t'
 * (see xfs_fhlookup) with flags `user_flags'.  Returns 0 or
 * error.  If successful, the file descriptor is returned in `retval'.
 */

extern struct fileops vnops;	/* sometimes declared in <file.h> */

int
xfs_fhopen (d_thread_t *proc,
	    struct xfs_fhandle_t *fhp,
	    int user_flags,
	    register_t *retval)
{
    int error;
    struct vnode *vp;
#ifdef HAVE_FREEBSD_THREAD
    struct ucred *cred = proc->td_proc->p_ucred;
#else
    struct ucred *cred = proc->p_ucred;
#endif
    int flags = FFLAGS(user_flags);
    int index;
    struct file *fp;
    int mode;
    struct xfs_fhandle_t fh;

    NNPFSDEB(XDEBVFOPS, ("xfs_fhopen: flags = %d\n", user_flags));

    error = copyin (fhp, &fh, sizeof(fh));
    if (error)
	return error;

    error = xfs_fhlookup (proc, &fh, &vp);
    NNPFSDEB(XDEBVFOPS, ("xfs_fhlookup returned %d\n", error));
    if (error)
	return error;

    switch (vp->v_type) {
    case VDIR :
    case VREG :
	break;
    case VLNK :
	error = EMLINK;
	goto out;
    default :
	error = EOPNOTSUPP;
	goto out;
    }

    mode = 0;
    if (flags & FWRITE) {
	switch (vp->v_type) {
	case VREG :
	    break;
	case VDIR :
	    error = EISDIR;
	    goto out;
	default :
	    error = EOPNOTSUPP;
	    goto out;
	}

	error = vn_writechk (vp);
	if (error)
	    goto out;

	mode |= VWRITE;
    }
    if (flags & FREAD)
	mode |= VREAD;

    if (mode) {
	error = VOP_ACCESS(vp, mode, cred, proc);
	if (error)
	    goto out;
    }

    error = VOP_OPEN(vp, flags, cred, proc);
    if (error)
	goto out;

    error = falloc(proc, &fp, &index);
    if (error)
	goto out;

    if (flags & FWRITE)
        vp->v_writecount++;

#if defined(__FreeBSD_version) && __FreeBSD_version >= 300000
    if (vp->v_type == VREG) {
#ifdef HAVE_FREEBSD_THREAD
	error = xfs_vfs_object_create(vp, proc, proc->td_proc->p_ucred);
#else
	error = xfs_vfs_object_create(vp, proc, proc->p_ucred);
#endif
	if (error)
	    goto out;
    }
#endif

    fp->f_flag = flags & FMASK;
    fp->f_type = DTYPE_VNODE;
    fp->f_ops  = &vnops;
    fp->f_data = (caddr_t)vp;
    xfs_vfs_unlock(vp, proc);
    *retval = index;
#ifdef FILE_UNUSE
    FILE_UNUSE(fp, proc);
#endif
#ifdef __APPLE__
    *fdflags(proc, index) &= ~UF_RESERVED;
#endif
    return 0;
out:
    NNPFSDEB(XDEBVFOPS, ("xfs_fhopen: error = %d\n", error));
    vput(vp);
    return error;
}
@


1.11
log
@typos from Jonathon Gray;
@
text
@@


1.10
log
@Fix include stuff, unused variables and statics and other small things needed
to compile in our tree.
@
text
@d318 1
a318 1
 * All is done in the context of `proc'.  Returns 0 if succesful, and
d413 1
a413 1
 * error.  If succsesful, the file descriptor is returned in `retval'.
@


1.9
log
@Merge
@
text
@a258 2
    struct netcred *np;

@


1.8
log
@merge
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$Id: xfs_vfsops-bsd.c,v 1.1.1.1 2002/06/07 03:32:59 hin Exp $");
d39 1
a39 1
 * XFS vfs operations.
d52 5
a56 9
xfs_mount(struct mount *mp,
	  const char *user_path,
#ifdef __OpenBSD__
	  void *user_data,
#else
	  caddr_t user_data,
#endif
	  struct nameidata *ndp,
	  struct proc *p)
d62 1
a62 1
xfs_start(struct mount * mp, int flags, struct proc * p)
d64 1
a64 1
    XFSDEB(XDEBVFOPS, ("xfs_start mp = %lx, flags = %d, proc = %lx\n", 
d71 1
a71 1
xfs_unmount(struct mount * mp, int mntflags, struct proc *p)
d73 1
a73 1
    XFSDEB(XDEBVFOPS, ("xfs_umount: mp = %lx, mntflags = %d, proc = %lx\n", 
d81 4
a84 1
    XFSDEB(XDEBVFOPS, ("xfs_root mp = %lx\n", (unsigned long)mp));
d86 1
d90 1
a90 1
xfs_quotactl(struct mount *mp, int cmd, uid_t uid, caddr_t arg, struct proc *p)
d92 1
a92 1
    XFSDEB(XDEBVFOPS, ("xfs_quotactl: mp = %lx, cmd = %d, uid = %u, "
d100 1
a100 1
xfs_statfs(struct mount *mp, struct statfs *sbp, struct proc *p)
d102 1
a102 1
    XFSDEB(XDEBVFOPS, ("xfs_statfs: mp = %lx, sbp = %lx, proc = %lx\n", 
d111 1
a111 1
xfs_sync(struct mount *mp, int waitfor, struct ucred *cred, struct proc *p)
d113 1
a113 1
    XFSDEB(XDEBVFOPS, ("xfs_sync: mp = %lx, waitfor = %d, "
d131 1
a131 1
    XFSDEB(XDEBVFOPS, ("xfs_vget\n"));
d135 2
a136 3
#ifdef HAVE_STRUCT_VFSOPS_VFS_CHECKEXP
int
xfs_fhtovp(struct mount * mp,
a138 9
#else
int
xfs_fhtovp(struct mount * mp,
	   struct fid * fhp,
	   struct mbuf * nam,
	   struct vnode ** vpp,
	   int *exflagsp,
	   struct ucred ** credanonp)
#endif
a140 1
    static struct ucred fhtovpcred;
d147 1
a147 1
    XFSDEB(XDEBVFOPS, ("xfs_fhtovp\n"));
a153 7
    /* XXX: Should see if we is exported to this client */
#if 0
    np = vfs_export_lookup(mp, &ump->um_export, nam);
    if (np == NULL)
	return EACCES;
#endif

d155 1
a155 1
    XFSDEB(XDEBVFOPS, ("xfs_fhtovp: fid: %d.%d.%d.%d\n", 
d158 2
a159 2
    XFSDEB(XDEBVFOPS, ("xfs_fhtovp: xfs_vnode_find\n"));
    xn = xfs_node_find(&xfs[0], &handle); /* XXX: 0 */
d182 2
d185 1
a185 13
	fhtovpcred.cr_uid = 0;
	fhtovpcred.cr_gid = 0;
	fhtovpcred.cr_ngroups = 0;
      
	*vpp = vp;
#ifdef MNT_EXPUBLIC
	*exflagsp = MNT_EXPUBLIC;
#else
	*exflagsp = 0;
#endif
	*credanonp = &fhtovpcred;

	XFSDEB(XDEBVFOPS, ("xfs_fhtovp done\n"));
d192 1
a192 1
	XFSDEB(XDEBVFOPS, ("xfs_fhtovp failed (%d)\n", error));
d195 45
d241 1
a241 1
    return EOPNOTSUPP;
d243 3
d247 1
d259 10
a268 2
    XFSDEB(XDEBVFOPS, ("xfs_checkexp\n"));
    return EOPNOTSUPP;
d277 1
a277 1
    XFSDEB(XDEBVFOPS, ("xfs_vptofh\n"));
d292 1
a292 1
    XFSDEB(XDEBVFOPS, ("xfs_vptofh\n"));
d325 1
a325 1
xfs_fhlookup (struct proc *proc,
d337 1
a337 1
    XFSDEB(XDEBVFOPS, ("xfs_fhlookup (xfs)\n"));
d354 1
a354 1
	u_int32_t ino = SCARG(fh_args, fileid);
d381 1
a381 1
	XFSDEB(XDEBVFOPS, ("xfs_fhlookup (native)\n"));
d396 3
d400 1
d421 1
a421 1
xfs_fhopen (struct proc *proc,
d428 3
d432 1
d439 1
a439 3
    XFSDEB(XDEBVFOPS, ("xfs_fhopen: flags = %d\n", user_flags));

    panic("Pjäxa");
d446 1
a446 1
    XFSDEB(XDEBVFOPS, ("xfs_fhlookup returned %d\n", error));
d459 1
a459 1
	break;
d472 1
a472 1
	    break;
d503 5
a507 1
	error = xfs_vfs_object_create(vp, proc, proc->p_cred->pc_ucred);
d527 1
a527 1
    XFSDEB(XDEBVFOPS, ("xfs_fhopen: error = %d\n", error));
@


1.7
log
@ - every new fd created by falloc() is marked as larval and should not be used
   any anyone. Every caller of falloc matures the fd when it's usable.
 - Since every lookup in the fd table must now check this flag and all of
   them do the same thing, move all the necessary checks into a function -
   fd_getfile.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 *
 * 4. Neither the name of the Institute nor the names of its contributors
d36 1
a36 1
RCSID("$Id: xfs_vfsops-bsd.c,v 1.6 2001/02/21 02:45:12 nate Exp $");
d54 1
d56 3
d335 3
d369 4
a372 2
    if ((*vpp)->v_type == VREG && (*vpp)->v_vm_info == NULL)
        vm_info_init (*vpp);
d404 2
a485 1
    FILE_SET_MATURE(fp);
@


1.7.2.1
log
@Sync UBC branch to -current
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d41 1
a41 1
RCSID("$Id: xfs_vfsops-bsd.c,v 1.7 2001/10/26 12:03:28 art Exp $");
a58 1
#ifdef __OpenBSD__
a59 3
#else
	  caddr_t user_data,
#endif
a335 3
    if (*vpp == NULL)
	return ENOENT;

d367 2
a368 4
    if ((*vpp)->v_type == VREG && (!UBCINFOEXISTS(*vpp))) {
        ubc_info_init(*vpp);
    }
    ubc_hold(*vpp);
a399 2
    panic("Pjäxa");

d480 1
@


1.6
log
@use void * rather than caddr_t in xfs_mount to match change in mount.h.
ok assar@@
@
text
@d41 1
a41 1
RCSID("$Id: xfs_vfsops-bsd.c,v 1.5 2000/09/11 14:26:53 art Exp $");
d480 1
@


1.5
log
@New xfs from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d41 1
a41 1
RCSID("$Id: xfs_vfsops-bsd.c,v 1.56 2000/07/19 14:31:53 art Exp $");
d59 1
a59 1
	  caddr_t user_data,
@


1.4
log
@$OpenBSD$
@
text
@a0 2
/*	$OpenBSD$	*/

d2 1
a2 1
 * Copyright (c) 1995, 1996, 1997, 1998, 1999 Kungliga Tekniska Högskolan
d41 1
a41 1
RCSID("$OpenBSD: xfs_vfsops-bsd.c,v 1.3 2000/02/07 04:57:19 assar Exp $");
d69 2
a70 2
    XFSDEB(XDEBVFOPS, ("xfs_start mp = %p, flags = %d, proc = %p\n", 
		       mp, flags, p));
d78 2
a79 2
    XFSDEB(XDEBVFOPS, ("xfs_umount: mp = %p, mntflags = %d, proc = %p\n", 
		       mp, mntflags, p));
d86 2
a87 2
    XFSDEB(XDEBVFOPS, ("xfs_root mp = %p\n", mp));
    return xfs_root_common(mp, vpp, curproc, curproc->p_ucred);
d93 4
a96 3
    XFSDEB(XDEBVFOPS, ("xfs_quotactl: mp = %p, cmd = %d, uid = %u, "
		       "arg = %p, proc = %p\n", 
		       mp, cmd, uid, arg, p));
d103 4
a106 2
    XFSDEB(XDEBVFOPS, ("xfs_statfs: mp = %p, sbp = %p, proc = %p\n", 
		       mp, sbp, p));
d114 6
a119 3
    XFSDEB(XDEBVFOPS, ("xfs_sync: mp = %p, waitfor = %d, "
		       "cred = %p, proc = %p\n",
		       mp, waitfor, cred, p));
d125 3
d129 1
d136 1
d141 9
d187 1
a187 1
	xfs_do_vget(vp, 0, current);
d195 1
a195 1
	    xfs_do_vget(vp, 0, current);
d207 6
d221 1
a221 1
	XFSDEB(XDEBVFOPS, ("xfs_fhtovp failed (%d);", error));
d230 14
d298 1
a298 3
	      fsid_t fsid,
	      long fileid,
	      long gen,
d303 1
d306 2
d309 1
a309 2
    XFSDEB(XDEBVFOPS, ("xfs_fhlookup: fileid = %ld\n",
		       fileid));
d311 1
a311 1
    error = suser (cred, NULL);
d315 6
a320 5
#ifdef HAVE_KERNEL_VFS_GETVFS
    mp = vfs_getvfs (&fsid);
#else
    mp = getvfs (&fsid);
#endif
d324 8
a331 1
    error = VFS_VGET(mp, fileid, vpp);
d342 1
a342 1
    if (vattr.va_gen != gen) {
d346 16
d365 4
a368 5
#if HAVE_FOUR_ARGUMENT_VFS_OBJECT_CREATE
	vfs_object_create (*vpp, proc, proc->p_ucred, TRUE);
#else
	vfs_object_create (*vpp, proc, proc->p_ucred);
#endif
d373 2
d376 2
a377 2
 * Perform an open operation on the vnode identified by (fsid, fileid,
 * gen) (see xfs_fhlookup) with flags `user_flags'.  Returns 0 or
d381 2
d385 1
a385 3
	    fsid_t fsid,
	    long fileid,
	    long gen,
d395 2
d398 5
a402 2
    XFSDEB(XDEBVFOPS, ("xfs_fhopen: fileid = %ld, flags = %d\n",
		       fileid, user_flags));
d404 2
a405 1
    error = xfs_fhlookup (proc, fsid, fileid, gen, &vp);
d409 40
d460 1
a460 1
#if __FreeBSD_version >= 300000
d462 1
a462 5
#if HAVE_FOUR_ARGUMENT_VFS_OBJECT_CREATE
	error = vfs_object_create(vp, proc, proc->p_cred->pc_ucred, 1);
#else
	error = vfs_object_create(vp, proc, proc->p_cred->pc_ucred);
#endif
d474 6
d482 1
@


1.3
log
@update to use new checkexp vfs operation
@
text
@d1 2
d43 1
a43 1
RCSID("$Id: xfs_vfsops-bsd.c,v 1.2 2000/02/01 04:12:19 assar Exp $");
@


1.3.2.1
log
@Sync with -current
@
text
@a0 2
/*	$OpenBSD$	*/

d41 1
a41 1
RCSID("$OpenBSD$");
@


1.3.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
d4 1
a4 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d43 1
a43 1
RCSID("$Id: xfs_vfsops-bsd.c,v 1.6 2001/02/21 02:45:12 nate Exp $");
d61 1
a61 1
	  void *user_data,
d71 2
a72 2
    XFSDEB(XDEBVFOPS, ("xfs_start mp = %lx, flags = %d, proc = %lx\n", 
		       (unsigned long)mp, flags, (unsigned long)p));
d80 2
a81 2
    XFSDEB(XDEBVFOPS, ("xfs_umount: mp = %lx, mntflags = %d, proc = %lx\n", 
		       (unsigned long)mp, mntflags, (unsigned long)p));
d88 2
a89 2
    XFSDEB(XDEBVFOPS, ("xfs_root mp = %lx\n", (unsigned long)mp));
    return xfs_root_common(mp, vpp, xfs_curproc(), xfs_curproc()->p_ucred);
d95 3
a97 4
    XFSDEB(XDEBVFOPS, ("xfs_quotactl: mp = %lx, cmd = %d, uid = %u, "
		       "arg = %lx, proc = %lx\n", 
		       (unsigned long)mp, cmd, uid,
		       (unsigned long)arg, (unsigned long)p));
d104 2
a105 4
    XFSDEB(XDEBVFOPS, ("xfs_statfs: mp = %lx, sbp = %lx, proc = %lx\n", 
		       (unsigned long)mp,
		       (unsigned long)sbp,
		       (unsigned long)p));
d113 3
a115 6
    XFSDEB(XDEBVFOPS, ("xfs_sync: mp = %lx, waitfor = %d, "
		       "cred = %lx, proc = %lx\n",
		       (unsigned long)mp,
		       waitfor,
		       (unsigned long)cred,
		       (unsigned long)p));
a120 3
#ifdef __APPLE__
	 void *ino,
#else
a121 1
#endif
a127 1
#ifdef HAVE_STRUCT_VFSOPS_VFS_CHECKEXP
a131 9
#else
int
xfs_fhtovp(struct mount * mp,
	   struct fid * fhp,
	   struct mbuf * nam,
	   struct vnode ** vpp,
	   int *exflagsp,
	   struct ucred ** credanonp)
#endif
d169 1
a169 1
	xfs_do_vget(vp, 0, curproc);
d177 1
a177 1
	    xfs_do_vget(vp, 0, curproc);
a188 6
#ifdef MNT_EXPUBLIC
	*exflagsp = MNT_EXPUBLIC;
#else
	*exflagsp = 0;
#endif
	*credanonp = &fhtovpcred;
d197 1
a197 1
	XFSDEB(XDEBVFOPS, ("xfs_fhtovp failed (%d)\n", error));
a205 14
xfs_checkexp (struct mount *mp,
#ifdef __FreeBSD__
	      struct sockaddr *nam,
#else
	      struct mbuf *nam,
#endif
	      int *exflagsp,
	      struct ucred **credanonp)
{
    XFSDEB(XDEBVFOPS, ("xfs_checkexp\n"));
    return EOPNOTSUPP;
}

int
d260 3
a262 1
	      struct xfs_fhandle_t *fhp,
a266 1
#if !(defined(HAVE_GETFH) && defined(HAVE_FHOPEN))
a268 2
    fsid_t fsid;
    struct xfs_fh_args *fh_args = (struct xfs_fh_args *)fhp->fhdata;
d270 2
a271 1
    XFSDEB(XDEBVFOPS, ("xfs_fhlookup (xfs)\n"));
d273 1
a273 1
    error = xfs_suser (proc);
d277 5
a281 6
    if (fhp->len < sizeof(struct xfs_fh_args))
	return EINVAL;
    
    fsid = SCARG(fh_args, fsid);

    mp = xfs_vfs_getvfs (&fsid);
d285 1
a285 8
#ifdef __APPLE__
    {
	u_int32_t ino = SCARG(fh_args, fileid);
	error = VFS_VGET(mp, &ino, vpp);
    }
#else
    error = VFS_VGET(mp, SCARG(fh_args, fileid), vpp);
#endif
d296 1
a296 1
    if (vattr.va_gen != SCARG(fh_args, gen)) {
a299 16
#else /* HAVE_GETFH && HAVE_FHOPEN */
    {
	fhandle_t *fh = (fhandle_t *) fhp;

	XFSDEB(XDEBVFOPS, ("xfs_fhlookup (native)\n"));

	mp = xfs_vfs_getvfs (&fh->fh_fsid);
	if (mp == NULL)
	    return ESTALE;

	if ((error = VFS_FHTOVP(mp, &fh->fh_fid, vpp)) != 0) {
	    *vpp = NULL;
	    return error;
	}
    }
#endif  /* HAVE_GETFH && HAVE_FHOPEN */
d303 5
a307 4
	xfs_vfs_object_create (*vpp, proc, proc->p_ucred);
#elif __APPLE__
    if ((*vpp)->v_type == VREG && (*vpp)->v_vm_info == NULL)
        vm_info_init (*vpp);
a311 2


d313 2
a314 2
 * Perform an open operation on the vnode identified by a `xfs_fhandle_t'
 * (see xfs_fhlookup) with flags `user_flags'.  Returns 0 or
a317 2
extern struct fileops vnops;	/* sometimes declared in <file.h> */

d320 3
a322 1
	    struct xfs_fhandle_t *fhp,
a331 2
    int mode;
    struct xfs_fhandle_t fh;
d333 2
a334 5
    XFSDEB(XDEBVFOPS, ("xfs_fhopen: flags = %d\n", user_flags));

    error = copyin (fhp, &fh, sizeof(fh));
    if (error)
	return error;
d336 1
a336 2
    error = xfs_fhlookup (proc, &fh, &vp);
    XFSDEB(XDEBVFOPS, ("xfs_fhlookup returned %d\n", error));
a339 40
    switch (vp->v_type) {
    case VDIR :
    case VREG :
	break;
    case VLNK :
	error = EMLINK;
	goto out;
    default :
	error = EOPNOTSUPP;
	break;
    }

    mode = 0;
    if (flags & FWRITE) {
	switch (vp->v_type) {
	case VREG :
	    break;
	case VDIR :
	    error = EISDIR;
	    goto out;
	default :
	    error = EOPNOTSUPP;
	    break;
	}

	error = vn_writechk (vp);
	if (error)
	    goto out;

	mode |= VWRITE;
    }
    if (flags & FREAD)
	mode |= VREAD;

    if (mode) {
	error = VOP_ACCESS(vp, mode, cred, proc);
	if (error)
	    goto out;
    }

d351 1
a351 1
#if defined(__FreeBSD_version) && __FreeBSD_version >= 300000
d353 5
a357 1
	error = xfs_vfs_object_create(vp, proc, proc->p_cred->pc_ucred);
a368 6
#ifdef FILE_UNUSE
    FILE_UNUSE(fp, proc);
#endif
#ifdef __APPLE__
    *fdflags(proc, index) &= ~UF_RESERVED;
#endif
a370 1
    XFSDEB(XDEBVFOPS, ("xfs_fhopen: error = %d\n", error));
@


1.3.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d41 1
a41 1
RCSID("$Id: xfs_vfsops-bsd.c,v 1.3.2.2 2001/05/14 22:47:53 niklas Exp $");
a479 1
    FILE_SET_MATURE(fp);
@


1.3.2.4
log
@Sync the SMP branch with 3.3
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d41 1
a41 1
RCSID("$Id$");
a58 1
#ifdef __OpenBSD__
a59 3
#else
	  caddr_t user_data,
#endif
a335 3
    if (*vpp == NULL)
	return ENOENT;

d367 2
a368 4
    if ((*vpp)->v_type == VREG && (!UBCINFOEXISTS(*vpp))) {
        ubc_info_init(*vpp);
    }
    ubc_hold(*vpp);
a399 2
    panic("Pjäxa");

d480 1
@


1.3.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$arla: xfs_vfsops-bsd.c,v 1.72 2002/12/19 10:30:17 lha Exp $");
d39 1
a39 1
 * NNPFS vfs operations.
d52 9
a60 5
xfs_mount_caddr(struct mount *mp,
		const char *user_path,
		caddr_t user_data,
		struct nameidata *ndp,
		d_thread_t *p)
d66 1
a66 1
xfs_start(struct mount * mp, int flags, d_thread_t * p)
d68 1
a68 1
    NNPFSDEB(XDEBVFOPS, ("xfs_start mp = %lx, flags = %d, proc = %lx\n", 
d75 1
a75 1
xfs_unmount(struct mount * mp, int mntflags, d_thread_t *p)
d77 1
a77 1
    NNPFSDEB(XDEBVFOPS, ("xfs_umount: mp = %lx, mntflags = %d, proc = %lx\n", 
d85 1
a85 4
    NNPFSDEB(XDEBVFOPS, ("xfs_root mp = %lx\n", (unsigned long)mp));
#ifdef HAVE_FREEBSD_THREAD
    return xfs_root_common(mp, vpp, xfs_curthread(), xfs_curthread()->td_proc->p_ucred);
#else
a86 1
#endif
d90 1
a90 1
xfs_quotactl(struct mount *mp, int cmd, uid_t uid, caddr_t arg, d_thread_t *p)
d92 1
a92 1
    NNPFSDEB(XDEBVFOPS, ("xfs_quotactl: mp = %lx, cmd = %d, uid = %u, "
d100 1
a100 1
xfs_statfs(struct mount *mp, struct statfs *sbp, d_thread_t *p)
d102 1
a102 1
    NNPFSDEB(XDEBVFOPS, ("xfs_statfs: mp = %lx, sbp = %lx, proc = %lx\n", 
d111 1
a111 1
xfs_sync(struct mount *mp, int waitfor, struct ucred *cred, d_thread_t *p)
d113 1
a113 1
    NNPFSDEB(XDEBVFOPS, ("xfs_sync: mp = %lx, waitfor = %d, "
d131 1
a131 1
    NNPFSDEB(XDEBVFOPS, ("xfs_vget\n"));
d135 3
a137 2
static int
common_fhtovp(struct mount * mp,
d140 9
d151 1
d158 1
a158 1
    NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp\n"));
d165 7
d173 1
a173 1
    NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp: fid: %d.%d.%d.%d\n", 
d176 2
a177 2
    NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp: xfs_vnode_find\n"));
    xn = xfs_node_find(&xfs[0].nodehead, &handle);
d200 12
a211 1
    *vpp = vp;
d213 1
a213 2
    if (error == 0) {
	NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp done\n"));
d220 1
a220 1
	NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp failed (%d)\n", error));
d223 1
a223 1
#else /* !ARLA_KNFS */
a224 45
#endif /* !ARLA_KNFS */
}

/* new style fhtovp */

#ifdef HAVE_STRUCT_VFSOPS_VFS_CHECKEXP
int
xfs_fhtovp(struct mount * mp,
	   struct fid * fhp,
	   struct vnode ** vpp)
{
    return common_fhtovp (mp, fhp, vpp);
}

#else /* !HAVE_STRUCT_VFSOPS_VFS_CHECKEXP */

/* old style fhtovp */

int
xfs_fhtovp(struct mount * mp,
	   struct fid * fhp,
	   struct mbuf * nam,
	   struct vnode ** vpp,
	   int *exflagsp,
	   struct ucred ** credanonp)
{
    static struct ucred fhtovpcred;
    int error;

    /* XXX: Should see if we is exported to this client */
#if 0
    np = vfs_export_lookup(mp, &ump->um_export, nam);
    if (np == NULL)
       return EACCES;
#endif
    error = common_fhtovp(mp, fhp, vpp);
    if (error == 0) {
       fhtovpcred.cr_uid = 0;
       fhtovpcred.cr_gid = 0;
       fhtovpcred.cr_ngroups = 0;
      
#ifdef MNT_EXPUBLIC
       *exflagsp = MNT_EXPUBLIC;
#else
       *exflagsp = 0;
a225 3
       *credanonp = &fhtovpcred;
    }
    return error;
a226 1
#endif /* !HAVE_STRUCT_VFSOPS_VFS_CHECKEXP */
d238 2
a239 8
    NNPFSDEB(XDEBVFOPS, ("xfs_checkexp\n"));

#if 0
    np = vfs_export_lookup(mp, &ump->um_export, nam);
    if (np == NULL)
	return EACCES;
#endif
    return 0;
d248 1
a248 1
    NNPFSDEB(XDEBVFOPS, ("xfs_vptofh\n"));
d263 1
a263 1
    NNPFSDEB(XDEBVFOPS, ("xfs_vptofh\n"));
d291 1
a291 1
 * All is done in the context of `proc'.  Returns 0 if successful, and
d296 1
a296 1
xfs_fhlookup (d_thread_t *proc,
d308 1
a308 1
    NNPFSDEB(XDEBVFOPS, ("xfs_fhlookup (xfs)\n"));
d325 1
a325 1
	uint32_t ino = SCARG(fh_args, fileid);
d352 1
a352 1
	NNPFSDEB(XDEBVFOPS, ("xfs_fhlookup (native)\n"));
a366 3
#ifdef HAVE_FREEBSD_THREAD
	xfs_vfs_object_create (*vpp, proc, proc->td_proc->p_ucred);
#else
a367 1
#endif
d382 1
a382 1
 * error.  If successful, the file descriptor is returned in `retval'.
d388 1
a388 1
xfs_fhopen (d_thread_t *proc,
a394 3
#ifdef HAVE_FREEBSD_THREAD
    struct ucred *cred = proc->td_proc->p_ucred;
#else
a395 1
#endif
d402 3
a404 1
    NNPFSDEB(XDEBVFOPS, ("xfs_fhopen: flags = %d\n", user_flags));
d411 1
a411 1
    NNPFSDEB(XDEBVFOPS, ("xfs_fhlookup returned %d\n", error));
d424 1
a424 1
	goto out;
d437 1
a437 1
	    goto out;
d468 1
a468 5
#ifdef HAVE_FREEBSD_THREAD
	error = xfs_vfs_object_create(vp, proc, proc->td_proc->p_ucred);
#else
	error = xfs_vfs_object_create(vp, proc, proc->p_ucred);
#endif
d488 1
a488 1
    NNPFSDEB(XDEBVFOPS, ("xfs_fhopen: error = %d\n", error));
@


1.2
log
@remove superflous declaration of vnops, it's now in <sys/file.h>
@
text
@d41 1
a41 1
RCSID("$Id: xfs_vfsops-bsd.c,v 1.1 1999/04/30 01:59:01 art Exp $");
d129 1
a129 4
	   struct mbuf * nam,
	   struct vnode ** vpp,
	   int *exflagsp,
	   struct ucred ** credanonp)
a186 6
#ifdef MNT_EXPUBLIC
	*exflagsp = MNT_EXPUBLIC;
#else
	*exflagsp = 0;
#endif
	*credanonp = &fhtovpcred;
@


1.1
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d41 1
a41 1
RCSID("$Id: xfs_vfsops-bsd.c,v 1.37 1999/02/15 01:36:16 art Exp $");
a338 1
    extern struct fileops vnops;
@


1.1.1.1
log
@Import of xfs from arla-0.35.7
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2000 Kungliga Tekniska Högskolan
d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d41 1
a41 1
RCSID("$Id: xfs_vfsops-bsd.c,v 1.1.1.1 2002/06/05 17:24:11 hin Exp $");
a58 3
#ifdef __OpenBSD__
	  void *user_data,
#else
a59 1
#endif
d69 2
a70 2
    XFSDEB(XDEBVFOPS, ("xfs_start mp = %lx, flags = %d, proc = %lx\n", 
		       (unsigned long)mp, flags, (unsigned long)p));
d78 2
a79 2
    XFSDEB(XDEBVFOPS, ("xfs_umount: mp = %lx, mntflags = %d, proc = %lx\n", 
		       (unsigned long)mp, mntflags, (unsigned long)p));
d86 2
a87 2
    XFSDEB(XDEBVFOPS, ("xfs_root mp = %lx\n", (unsigned long)mp));
    return xfs_root_common(mp, vpp, xfs_curproc(), xfs_curproc()->p_ucred);
d93 3
a95 4
    XFSDEB(XDEBVFOPS, ("xfs_quotactl: mp = %lx, cmd = %d, uid = %u, "
		       "arg = %lx, proc = %lx\n", 
		       (unsigned long)mp, cmd, uid,
		       (unsigned long)arg, (unsigned long)p));
d102 2
a103 4
    XFSDEB(XDEBVFOPS, ("xfs_statfs: mp = %lx, sbp = %lx, proc = %lx\n", 
		       (unsigned long)mp,
		       (unsigned long)sbp,
		       (unsigned long)p));
d111 3
a113 6
    XFSDEB(XDEBVFOPS, ("xfs_sync: mp = %lx, waitfor = %d, "
		       "cred = %lx, proc = %lx\n",
		       (unsigned long)mp,
		       waitfor,
		       (unsigned long)cred,
		       (unsigned long)p));
a118 3
#ifdef __APPLE__
	 void *ino,
#else
a119 1
#endif
a125 6
#ifdef HAVE_STRUCT_VFSOPS_VFS_CHECKEXP
int
xfs_fhtovp(struct mount * mp,
	   struct fid * fhp,
	   struct vnode ** vpp)
#else
a132 1
#endif
d170 1
a170 1
	xfs_do_vget(vp, 0, curproc);
d178 1
a178 1
	    xfs_do_vget(vp, 0, curproc);
d204 1
a204 1
	XFSDEB(XDEBVFOPS, ("xfs_fhtovp failed (%d)\n", error));
a212 14
xfs_checkexp (struct mount *mp,
#ifdef __FreeBSD__
	      struct sockaddr *nam,
#else
	      struct mbuf *nam,
#endif
	      int *exflagsp,
	      struct ucred **credanonp)
{
    XFSDEB(XDEBVFOPS, ("xfs_checkexp\n"));
    return EOPNOTSUPP;
}

int
d267 3
a269 1
	      struct xfs_fhandle_t *fhp,
a273 1
#if !(defined(HAVE_GETFH) && defined(HAVE_FHOPEN))
a275 2
    fsid_t fsid;
    struct xfs_fh_args *fh_args = (struct xfs_fh_args *)fhp->fhdata;
d277 2
a278 1
    XFSDEB(XDEBVFOPS, ("xfs_fhlookup (xfs)\n"));
d280 1
a280 1
    error = xfs_suser (proc);
d284 5
a288 6
    if (fhp->len < sizeof(struct xfs_fh_args))
	return EINVAL;
    
    fsid = SCARG(fh_args, fsid);

    mp = xfs_vfs_getvfs (&fsid);
d292 1
a292 8
#ifdef __APPLE__
    {
	u_int32_t ino = SCARG(fh_args, fileid);
	error = VFS_VGET(mp, &ino, vpp);
    }
#else
    error = VFS_VGET(mp, SCARG(fh_args, fileid), vpp);
#endif
a296 3
    if (*vpp == NULL)
	return ENOENT;

d303 1
a303 1
    if (vattr.va_gen != SCARG(fh_args, gen)) {
a306 16
#else /* HAVE_GETFH && HAVE_FHOPEN */
    {
	fhandle_t *fh = (fhandle_t *) fhp;

	XFSDEB(XDEBVFOPS, ("xfs_fhlookup (native)\n"));

	mp = xfs_vfs_getvfs (&fh->fh_fsid);
	if (mp == NULL)
	    return ESTALE;

	if ((error = VFS_FHTOVP(mp, &fh->fh_fid, vpp)) != 0) {
	    *vpp = NULL;
	    return error;
	}
    }
#endif  /* HAVE_GETFH && HAVE_FHOPEN */
d310 5
a314 6
	xfs_vfs_object_create (*vpp, proc, proc->p_ucred);
#elif __APPLE__
    if ((*vpp)->v_type == VREG && (!UBCINFOEXISTS(*vpp))) {
        ubc_info_init(*vpp);
    }
    ubc_hold(*vpp);
a318 2


d320 2
a321 2
 * Perform an open operation on the vnode identified by a `xfs_fhandle_t'
 * (see xfs_fhlookup) with flags `user_flags'.  Returns 0 or
a324 2
extern struct fileops vnops;	/* sometimes declared in <file.h> */

d327 3
a329 1
	    struct xfs_fhandle_t *fhp,
d339 1
a339 6
    int mode;
    struct xfs_fhandle_t fh;

    XFSDEB(XDEBVFOPS, ("xfs_fhopen: flags = %d\n", user_flags));

    panic("Pjäxa");
d341 2
a342 3
    error = copyin (fhp, &fh, sizeof(fh));
    if (error)
	return error;
d344 1
a344 2
    error = xfs_fhlookup (proc, &fh, &vp);
    XFSDEB(XDEBVFOPS, ("xfs_fhlookup returned %d\n", error));
a347 40
    switch (vp->v_type) {
    case VDIR :
    case VREG :
	break;
    case VLNK :
	error = EMLINK;
	goto out;
    default :
	error = EOPNOTSUPP;
	break;
    }

    mode = 0;
    if (flags & FWRITE) {
	switch (vp->v_type) {
	case VREG :
	    break;
	case VDIR :
	    error = EISDIR;
	    goto out;
	default :
	    error = EOPNOTSUPP;
	    break;
	}

	error = vn_writechk (vp);
	if (error)
	    goto out;

	mode |= VWRITE;
    }
    if (flags & FREAD)
	mode |= VREAD;

    if (mode) {
	error = VOP_ACCESS(vp, mode, cred, proc);
	if (error)
	    goto out;
    }

d359 1
a359 1
#if defined(__FreeBSD_version) && __FreeBSD_version >= 300000
d361 5
a365 1
	error = xfs_vfs_object_create(vp, proc, proc->p_cred->pc_ucred);
a376 6
#ifdef FILE_UNUSE
    FILE_UNUSE(fp, proc);
#endif
#ifdef __APPLE__
    *fdflags(proc, index) &= ~UF_RESERVED;
#endif
a378 1
    XFSDEB(XDEBVFOPS, ("xfs_fhopen: error = %d\n", error));
@


1.1.1.2
log
@Import xfs from arla-current as of 5 Aug 2003.

ok deraadt@@
@
text
@d2 1
a2 1
 * Copyright (c) 1995 - 2002 Kungliga Tekniska Högskolan
d36 1
a36 1
RCSID("$arla: xfs_vfsops-bsd.c,v 1.72 2002/12/19 10:30:17 lha Exp $");
d39 1
a39 1
 * NNPFS vfs operations.
d52 9
a60 5
xfs_mount_caddr(struct mount *mp,
		const char *user_path,
		caddr_t user_data,
		struct nameidata *ndp,
		d_thread_t *p)
d66 1
a66 1
xfs_start(struct mount * mp, int flags, d_thread_t * p)
d68 1
a68 1
    NNPFSDEB(XDEBVFOPS, ("xfs_start mp = %lx, flags = %d, proc = %lx\n", 
d75 1
a75 1
xfs_unmount(struct mount * mp, int mntflags, d_thread_t *p)
d77 1
a77 1
    NNPFSDEB(XDEBVFOPS, ("xfs_umount: mp = %lx, mntflags = %d, proc = %lx\n", 
d85 1
a85 4
    NNPFSDEB(XDEBVFOPS, ("xfs_root mp = %lx\n", (unsigned long)mp));
#ifdef HAVE_FREEBSD_THREAD
    return xfs_root_common(mp, vpp, xfs_curthread(), xfs_curthread()->td_proc->p_ucred);
#else
a86 1
#endif
d90 1
a90 1
xfs_quotactl(struct mount *mp, int cmd, uid_t uid, caddr_t arg, d_thread_t *p)
d92 1
a92 1
    NNPFSDEB(XDEBVFOPS, ("xfs_quotactl: mp = %lx, cmd = %d, uid = %u, "
d100 1
a100 1
xfs_statfs(struct mount *mp, struct statfs *sbp, d_thread_t *p)
d102 1
a102 1
    NNPFSDEB(XDEBVFOPS, ("xfs_statfs: mp = %lx, sbp = %lx, proc = %lx\n", 
d111 1
a111 1
xfs_sync(struct mount *mp, int waitfor, struct ucred *cred, d_thread_t *p)
d113 1
a113 1
    NNPFSDEB(XDEBVFOPS, ("xfs_sync: mp = %lx, waitfor = %d, "
d131 1
a131 1
    NNPFSDEB(XDEBVFOPS, ("xfs_vget\n"));
d135 3
a137 2
static int
common_fhtovp(struct mount * mp,
d140 9
d151 1
d158 1
a158 1
    NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp\n"));
d165 7
d173 1
a173 1
    NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp: fid: %d.%d.%d.%d\n", 
d176 2
a177 2
    NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp: xfs_vnode_find\n"));
    xn = xfs_node_find(&xfs[0].nodehead, &handle);
d200 12
a211 1
    *vpp = vp;
d213 1
a213 2
    if (error == 0) {
	NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp done\n"));
d220 1
a220 1
	NNPFSDEB(XDEBVFOPS, ("xfs_fhtovp failed (%d)\n", error));
d223 1
a223 1
#else /* !ARLA_KNFS */
a224 34
#endif /* !ARLA_KNFS */
}

/* new style fhtovp */

#ifdef HAVE_STRUCT_VFSOPS_VFS_CHECKEXP
int
xfs_fhtovp(struct mount * mp,
	   struct fid * fhp,
	   struct vnode ** vpp)
{
    return common_fhtovp (mp, fhp, vpp);
}

#else /* !HAVE_STRUCT_VFSOPS_VFS_CHECKEXP */

/* old style fhtovp */

int
xfs_fhtovp(struct mount * mp,
	   struct fid * fhp,
	   struct mbuf * nam,
	   struct vnode ** vpp,
	   int *exflagsp,
	   struct ucred ** credanonp)
{
    static struct ucred fhtovpcred;
    int error;

    /* XXX: Should see if we is exported to this client */
#if 0
    np = vfs_export_lookup(mp, &ump->um_export, nam);
    if (np == NULL)
       return EACCES;
a225 14
    error = common_fhtovp(mp, fhp, vpp);
    if (error == 0) {
       fhtovpcred.cr_uid = 0;
       fhtovpcred.cr_gid = 0;
       fhtovpcred.cr_ngroups = 0;
      
#ifdef MNT_EXPUBLIC
       *exflagsp = MNT_EXPUBLIC;
#else
       *exflagsp = 0;
#endif
       *credanonp = &fhtovpcred;
    }
    return error;
a226 1
#endif /* !HAVE_STRUCT_VFSOPS_VFS_CHECKEXP */
d238 2
a239 10
    struct netcred *np;

    NNPFSDEB(XDEBVFOPS, ("xfs_checkexp\n"));

#if 0
    np = vfs_export_lookup(mp, &ump->um_export, nam);
    if (np == NULL)
	return EACCES;
#endif
    return 0;
d248 1
a248 1
    NNPFSDEB(XDEBVFOPS, ("xfs_vptofh\n"));
d263 1
a263 1
    NNPFSDEB(XDEBVFOPS, ("xfs_vptofh\n"));
d296 1
a296 1
xfs_fhlookup (d_thread_t *proc,
d308 1
a308 1
    NNPFSDEB(XDEBVFOPS, ("xfs_fhlookup (xfs)\n"));
d325 1
a325 1
	uint32_t ino = SCARG(fh_args, fileid);
d352 1
a352 1
	NNPFSDEB(XDEBVFOPS, ("xfs_fhlookup (native)\n"));
a366 3
#ifdef HAVE_FREEBSD_THREAD
	xfs_vfs_object_create (*vpp, proc, proc->td_proc->p_ucred);
#else
a367 1
#endif
d388 1
a388 1
xfs_fhopen (d_thread_t *proc,
a394 3
#ifdef HAVE_FREEBSD_THREAD
    struct ucred *cred = proc->td_proc->p_ucred;
#else
a395 1
#endif
d402 3
a404 1
    NNPFSDEB(XDEBVFOPS, ("xfs_fhopen: flags = %d\n", user_flags));
d411 1
a411 1
    NNPFSDEB(XDEBVFOPS, ("xfs_fhlookup returned %d\n", error));
d424 1
a424 1
	goto out;
d437 1
a437 1
	    goto out;
d468 1
a468 5
#ifdef HAVE_FREEBSD_THREAD
	error = xfs_vfs_object_create(vp, proc, proc->td_proc->p_ucred);
#else
	error = xfs_vfs_object_create(vp, proc, proc->p_ucred);
#endif
d488 1
a488 1
    NNPFSDEB(XDEBVFOPS, ("xfs_fhopen: error = %d\n", error));
@


