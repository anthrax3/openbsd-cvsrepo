head	1.7;
access;
symbols
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	arla-20030805:1.1.1.2
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	arla-0-35-7:1.1.1.1
	arla:1.1.1
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.4.0.8
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	SMP:1.2.0.4
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.1.0.4
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2009.06.03.14.45.55;	author jj;	state dead;
branches;
next	1.6;

1.6
date	2003.08.12.07.53.47;	author hin;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.07.04.10.32;	author hin;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.11.14.26.51;	author art;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2000.03.03.00.54.57;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	99.04.30.01.58.59;	author art;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	98.08.31.05.13.21;	author art;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.06.07.03.32.58;	author hin;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.08.12.07.43.49;	author hin;	state Exp;
branches;
next	;

1.2.4.1
date	2000.03.24.09.09.54;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2001.05.14.22.47.51;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.2.4.4;

1.2.4.4
date	2004.02.19.11.01.45;	author niklas;	state Exp;
branches;
next	;

1.4.8.1
date	2002.06.11.03.33.13;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@/*
 * Copyright (c) 1998, 1999 Kungliga Tekniska Högskolan
 * (Royal Institute of Technology, Stockholm, Sweden).
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the Institute nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/* $arla: xfs_attr.h,v 1.12 2002/09/07 10:46:15 lha Exp $ */

#ifndef _NNPFS_ATTR_H
#define _NNPFS_ATTR_H

#define XA_V_NONE       0
#define XA_V_MODE	(1 <<  0)
#define XA_V_NLINK	(1 <<  1)
#define XA_V_SIZE	(1 <<  2)
#define XA_V_UID	(1 <<  3)
#define XA_V_GID	(1 <<  4)
#define XA_V_ATIME	(1 <<  5)
#define XA_V_MTIME	(1 <<  6)
#define XA_V_CTIME	(1 <<  7)
#define XA_V_FILEID	(1 <<  8)
#define XA_V_TYPE       (1 <<  9)

#define NNPFS_FILE_NON 1
#define NNPFS_FILE_REG 2
#define NNPFS_FILE_DIR 3
#define NNPFS_FILE_BLK 4
#define NNPFS_FILE_CHR 5
#define NNPFS_FILE_LNK 6
#define NNPFS_FILE_SOCK 7
#define NNPFS_FILE_FIFO 8
#define NNPFS_FILE_BAD 9

#define XA_CLEAR(xa_p) \
        ((xa_p)->valid = XA_V_NONE)
#define XA_SET_MODE(xa_p, value) \
	(((xa_p)->valid) |= XA_V_MODE, ((xa_p)->xa_mode) = value)
#define XA_SET_NLINK(xa_p, value) \
	(((xa_p)->valid) |= XA_V_NLINK, ((xa_p)->xa_nlink) = value)
#define XA_SET_SIZE(xa_p, value) \
	(((xa_p)->valid) |= XA_V_SIZE, ((xa_p)->xa_size) = value)
#define XA_SET_UID(xa_p, value) \
	(((xa_p)->valid) |= XA_V_UID, ((xa_p)->xa_uid) = value)
#define XA_SET_GID(xa_p, value) \
	(((xa_p)->valid) |= XA_V_GID, ((xa_p)->xa_gid) = value)
#define XA_SET_ATIME(xa_p, value) \
	(((xa_p)->valid) |= XA_V_ATIME, ((xa_p)->xa_atime) = value)
#define XA_SET_MTIME(xa_p, value) \
	(((xa_p)->valid) |= XA_V_MTIME, ((xa_p)->xa_mtime) = value)
#define XA_SET_CTIME(xa_p, value) \
	(((xa_p)->valid) |= XA_V_CTIME, ((xa_p)->xa_ctime) = value)
#define XA_SET_FILEID(xa_p, value) \
	(((xa_p)->valid) |= XA_V_FILEID, ((xa_p)->xa_fileid) = value)
#define XA_SET_TYPE(xa_p, value) \
	(((xa_p)->valid) |= XA_V_TYPE, ((xa_p)->xa_type) = value)


#define XA_VALID_MODE(xa_p) \
	(((xa_p)->valid) & XA_V_MODE)
#define XA_VALID_NLINK(xa_p) \
	(((xa_p)->valid) & XA_V_NLINK)
#define XA_VALID_SIZE(xa_p) \
	(((xa_p)->valid) & XA_V_SIZE)
#define XA_VALID_UID(xa_p) \
	(((xa_p)->valid) & XA_V_UID)
#define XA_VALID_GID(xa_p) \
	(((xa_p)->valid) & XA_V_GID)
#define XA_VALID_ATIME(xa_p) \
	(((xa_p)->valid) & XA_V_ATIME)
#define XA_VALID_MTIME(xa_p) \
	(((xa_p)->valid) & XA_V_MTIME)
#define XA_VALID_CTIME(xa_p) \
	(((xa_p)->valid) & XA_V_CTIME)
#define XA_VALID_FILEID(xa_p) \
	(((xa_p)->valid) & XA_V_FILEID)
#define XA_VALID_TYPE(xa_p) \
	(((xa_p)->valid) & XA_V_TYPE)

struct xfs_attr {
    uint32_t		valid;
    uint32_t		xa_mode;

    uint32_t		xa_nlink;
    uint32_t		xa_size;

    uint32_t		xa_uid;
    uint32_t		xa_gid;

    uint32_t		xa_atime;
    uint32_t		xa_mtime;

    uint32_t		xa_ctime;
    uint32_t		xa_fileid;

    uint32_t           xa_type;
    uint32_t           pad1;
};

#endif /* _NNPFS_ATTR_H */
@


1.6
log
@Merge
@
text
@@


1.5
log
@merge
@
text
@d34 1
a34 1
/* $Id: xfs_attr.h,v 1.1.1.1 2002/06/07 03:32:58 hin Exp $ */
d36 2
a37 2
#ifndef _XFS_ATTR_H
#define _XFS_ATTR_H
d51 9
a59 9
#define XFS_FILE_NON 1
#define XFS_FILE_REG 2
#define XFS_FILE_DIR 3
#define XFS_FILE_BLK 4
#define XFS_FILE_CHR 5
#define XFS_FILE_LNK 6
#define XFS_FILE_SOCK 7
#define XFS_FILE_FIFO 8
#define XFS_FILE_BAD 9
d107 2
a108 2
    u_int32_t		valid;
    u_int32_t		xa_mode;
d110 2
a111 2
    u_int32_t		xa_nlink;
    u_int32_t		xa_size;
d113 2
a114 2
    u_int32_t		xa_uid;
    u_int32_t		xa_gid;
d116 2
a117 2
    u_int32_t		xa_atime;
    u_int32_t		xa_mtime;
d119 2
a120 2
    u_int32_t		xa_ctime;
    u_int32_t		xa_fileid;
d122 2
a123 2
    u_int32_t           xa_type;
    u_int32_t           pad1;
d126 1
a126 1
#endif /* _XFS_ATTR_H */
@


1.4
log
@New xfs from Arla between 0.34.2 and current in arla cvs.
Too many new features and fixes to mention here.
@
text
@d17 1
a17 6
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the Kungliga Tekniska
 *      Högskolan and its contributors.
 * 
 * 4. Neither the name of the Institute nor the names of its contributors
d34 1
a34 1
/* $Id: xfs_attr.h,v 1.9 1999/08/16 02:04:28 assar Exp $ */
@


1.4.8.1
log
@Sync UBC branch to -current
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
/* $Id: xfs_attr.h,v 1.4 2000/09/11 14:26:51 art Exp $ */
@


1.3
log
@$OpenBSD$
@
text
@a0 1
/* $OpenBSD: xfs_attr.h,v 1.2 1999/04/30 01:58:59 art Exp $ */
d2 1
a2 1
 * Copyright (c) 1998 Kungliga Tekniska Högskolan
d39 1
d56 9
a64 3
enum xfs_file_type { XFS_FILE_NON, XFS_FILE_REG, XFS_FILE_DIR,
		     XFS_FILE_BLK, XFS_FILE_CHR, XFS_FILE_LNK,
		     XFS_FILE_SOCK, XFS_FILE_FIFO, XFS_FILE_BAD };
d111 9
a119 4
/*
 * Under glibc and Linux, foo_t in the kernel is not the same type as
 * foo_t in user-level.  Therefore we need these defines.
 */
d121 2
a122 7
#if !defined(HAVE_LINUX_TYPES_H) && !defined(__KERNEL__)
typedef mode_t __kernel_mode_t;
typedef nlink_t __kernel_nlink_t;
typedef off_t __kernel_off_t;
typedef uid_t __kernel_uid_t;
typedef gid_t __kernel_gid_t;
#endif
d124 1
a124 10
struct xfs_attr {
    u_int32_t		valid;
    __kernel_mode_t	xa_mode;
    __kernel_nlink_t	xa_nlink;
    __kernel_off_t	xa_size;
    __kernel_uid_t	xa_uid;
    __kernel_gid_t	xa_gid;
    time_t		xa_atime;
    time_t		xa_mtime;
    time_t		xa_ctime;
d126 3
a128 1
    enum xfs_file_type  xa_type;
@


1.2
log
@upgrade Arla to fresher code. Too many new features and bugfixes.
@
text
@d1 1
a39 1
/* $Id: xfs_attr.h,v 1.7 1998/07/12 15:29:09 map Exp $ */
@


1.2.4.1
log
@Sync with -current
@
text
@a0 1
/* $OpenBSD$ */
d39 1
@


1.2.4.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1998, 1999 Kungliga Tekniska Högskolan
a39 1
/* $Id: xfs_attr.h,v 1.4 2000/09/11 14:26:51 art Exp $ */
d56 3
a58 9
#define XFS_FILE_NON 1
#define XFS_FILE_REG 2
#define XFS_FILE_DIR 3
#define XFS_FILE_BLK 4
#define XFS_FILE_CHR 5
#define XFS_FILE_LNK 6
#define XFS_FILE_SOCK 7
#define XFS_FILE_FIFO 8
#define XFS_FILE_BAD 9
d105 13
d120 8
a127 12
    u_int32_t		xa_mode;

    u_int32_t		xa_nlink;
    u_int32_t		xa_size;

    u_int32_t		xa_uid;
    u_int32_t		xa_gid;

    u_int32_t		xa_atime;
    u_int32_t		xa_mtime;

    u_int32_t		xa_ctime;
d129 1
a129 3

    u_int32_t           xa_type;
    u_int32_t           pad1;
@


1.2.4.3
log
@Sync the SMP branch with 3.3
@
text
@d17 6
a22 1
 * 3. Neither the name of the Institute nor the names of its contributors
d39 1
a39 1
/* $Id$ */
@


1.2.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d34 1
a34 1
/* $arla: xfs_attr.h,v 1.12 2002/09/07 10:46:15 lha Exp $ */
d36 2
a37 2
#ifndef _NNPFS_ATTR_H
#define _NNPFS_ATTR_H
d51 9
a59 9
#define NNPFS_FILE_NON 1
#define NNPFS_FILE_REG 2
#define NNPFS_FILE_DIR 3
#define NNPFS_FILE_BLK 4
#define NNPFS_FILE_CHR 5
#define NNPFS_FILE_LNK 6
#define NNPFS_FILE_SOCK 7
#define NNPFS_FILE_FIFO 8
#define NNPFS_FILE_BAD 9
d107 2
a108 2
    uint32_t		valid;
    uint32_t		xa_mode;
d110 2
a111 2
    uint32_t		xa_nlink;
    uint32_t		xa_size;
d113 2
a114 2
    uint32_t		xa_uid;
    uint32_t		xa_gid;
d116 2
a117 2
    uint32_t		xa_atime;
    uint32_t		xa_mtime;
d119 2
a120 2
    uint32_t		xa_ctime;
    uint32_t		xa_fileid;
d122 2
a123 2
    uint32_t           xa_type;
    uint32_t           pad1;
d126 1
a126 1
#endif /* _NNPFS_ATTR_H */
@


1.1
log
@indent the code and move around some includes, after discussion with Theo
@
text
@a0 1
/*	$OpenBSD: xfs_attr.h,v 1.2 1998/08/30 17:35:44 art Exp $	*/
d39 1
a39 1
/* $KTH: xfs_attr.h,v 1.7 1998/07/12 15:29:09 map Exp $ */
d41 2
a42 2
#ifndef _SYS_XFS_ATTR_H_
#define _SYS_XFS_ATTR_H_
d57 2
a58 2
		XFS_FILE_BLK, XFS_FILE_CHR, XFS_FILE_LNK,
		XFS_FILE_SOCK, XFS_FILE_FIFO, XFS_FILE_BAD };
d61 1
a61 1
	((xa_p)->valid = XA_V_NONE)
d119 11
a129 11
	u_int32_t		valid;
	__kernel_mode_t		xa_mode;
	__kernel_nlink_t	xa_nlink;
	__kernel_off_t		xa_size;
	__kernel_uid_t		xa_uid;
	__kernel_gid_t		xa_gid;
	time_t			xa_atime;
	time_t			xa_mtime;
	time_t			xa_ctime;
	u_int32_t		xa_fileid;
	enum xfs_file_type	xa_type;
@


1.1.1.1
log
@Import of xfs from arla-0.35.7
@
text
@d1 1
d3 1
a3 1
 * Copyright (c) 1998, 1999 Kungliga Tekniska Högskolan
d18 6
a23 1
 * 3. Neither the name of the Institute nor the names of its contributors
d40 1
a40 1
/* $Id: xfs_attr.h,v 1.1.1.1 2002/06/05 17:24:11 hin Exp $ */
d42 2
a43 2
#ifndef _XFS_ATTR_H
#define _XFS_ATTR_H
d57 3
a59 9
#define XFS_FILE_NON 1
#define XFS_FILE_REG 2
#define XFS_FILE_DIR 3
#define XFS_FILE_BLK 4
#define XFS_FILE_CHR 5
#define XFS_FILE_LNK 6
#define XFS_FILE_SOCK 7
#define XFS_FILE_FIFO 8
#define XFS_FILE_BAD 9
d62 1
a62 1
        ((xa_p)->valid = XA_V_NONE)
d106 4
a109 3
struct xfs_attr {
    u_int32_t		valid;
    u_int32_t		xa_mode;
d111 7
a117 2
    u_int32_t		xa_nlink;
    u_int32_t		xa_size;
d119 12
a130 11
    u_int32_t		xa_uid;
    u_int32_t		xa_gid;

    u_int32_t		xa_atime;
    u_int32_t		xa_mtime;

    u_int32_t		xa_ctime;
    u_int32_t		xa_fileid;

    u_int32_t           xa_type;
    u_int32_t           pad1;
@


1.1.1.2
log
@Import xfs from arla-current as of 5 Aug 2003.

ok deraadt@@
@
text
@d34 1
a34 1
/* $arla: xfs_attr.h,v 1.12 2002/09/07 10:46:15 lha Exp $ */
d36 2
a37 2
#ifndef _NNPFS_ATTR_H
#define _NNPFS_ATTR_H
d51 9
a59 9
#define NNPFS_FILE_NON 1
#define NNPFS_FILE_REG 2
#define NNPFS_FILE_DIR 3
#define NNPFS_FILE_BLK 4
#define NNPFS_FILE_CHR 5
#define NNPFS_FILE_LNK 6
#define NNPFS_FILE_SOCK 7
#define NNPFS_FILE_FIFO 8
#define NNPFS_FILE_BAD 9
d107 2
a108 2
    uint32_t		valid;
    uint32_t		xa_mode;
d110 2
a111 2
    uint32_t		xa_nlink;
    uint32_t		xa_size;
d113 2
a114 2
    uint32_t		xa_uid;
    uint32_t		xa_gid;
d116 2
a117 2
    uint32_t		xa_atime;
    uint32_t		xa_mtime;
d119 2
a120 2
    uint32_t		xa_ctime;
    uint32_t		xa_fileid;
d122 2
a123 2
    uint32_t           xa_type;
    uint32_t           pad1;
d126 1
a126 1
#endif /* _NNPFS_ATTR_H */
@


