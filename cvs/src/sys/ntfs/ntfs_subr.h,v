head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.2
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.12
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.8
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.10
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.10
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.8
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.6
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	SMP:1.3.0.2;
locks; strict;
comment	@ * @;


1.10
date	2016.09.01.08.40.39;	author natano;	state Exp;
branches;
next	1.9;
commitid	NvsKsQuRDuQNpuOz;

1.9
date	2014.01.19.18.35.45;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2013.12.02.16.19.08;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2013.05.30.20.11.06;	author guenther;	state Exp;
branches;
next	1.6;

1.6
date	2010.09.04.21.35.58;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2010.08.22.21.23.07;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2009.08.13.16.00.53;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.20.03.36.42;	author tedu;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2003.05.20.03.23.12;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.20.03.03.27;	author tedu;	state Exp;
branches;
next	;

1.3.2.1
date	2003.06.07.10.47.03;	author ho;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove the unused ntfs write code. ok benno beck
@
text
@/*	$OpenBSD: ntfs_subr.h,v 1.9 2014/01/19 18:35:45 tedu Exp $	*/
/*	$NetBSD: ntfs_subr.h,v 1.1 2002/12/23 17:38:33 jdolecek Exp $	*/

/*-
 * Copyright (c) 1998, 1999 Semen Ustimenko
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	Id: ntfs_subr.h,v 1.4 1999/05/12 09:43:02 semenu Exp
 */

#define	VA_LOADED		0x0001
#define	VA_PRELOADED		0x0002

struct ntvattr {
	LIST_ENTRY(ntvattr) 	va_list;

	u_int32_t		va_vflag;
	struct vnode	       *va_vp;
	struct ntnode 	       *va_ip;

	u_int32_t		va_flag;
	u_int32_t		va_type;
	u_int8_t		va_namelen;
	char			va_name[NTFS_MAXATTRNAME];

	u_int32_t		va_compression;
	u_int32_t		va_compressalg;
	u_int64_t		va_datalen;
	u_int64_t		va_allocated;
	cn_t	 		va_vcnstart;
	cn_t	 		va_vcnend;
	u_int16_t		va_index;
	union {
		struct {
			cn_t *		cn;
			cn_t *		cl;
			u_long		cnt;
		} vrun;
		caddr_t		datap;
		struct attr_name *name;
		struct attr_indexroot *iroot;
		struct attr_indexalloc *ialloc;
	} va_d;
};
#define	va_vruncn	va_d.vrun.cn
#define va_vruncl	va_d.vrun.cl
#define va_vruncnt	va_d.vrun.cnt
#define va_datap	va_d.datap
#define va_a_name	va_d.name
#define va_a_iroot	va_d.iroot
#define va_a_ialloc	va_d.ialloc

int ntfs_procfixups( struct ntfsmount *, u_int32_t, caddr_t, size_t );
int ntfs_parserun( cn_t *, cn_t *, u_int8_t *, u_long, u_long *);
int ntfs_runtocn( cn_t *, struct ntfsmount *, u_int8_t *, u_long, cn_t);
int ntfs_readntvattr_plain( struct ntfsmount *, struct ntnode *, struct ntvattr *, off_t, size_t, void *,size_t *, struct uio *);
int ntfs_readattr_plain( struct ntfsmount *, struct ntnode *, u_int32_t, char *, off_t, size_t, void *,size_t *, struct uio *);
int ntfs_readattr( struct ntfsmount *, struct ntnode *, u_int32_t, char *, off_t, size_t, void *, struct uio *);
int ntfs_filesize( struct ntfsmount *, struct fnode *, u_int64_t *, u_int64_t *);
int ntfs_times( struct ntfsmount *, struct ntnode *, ntfs_times_t *);
struct timespec	ntfs_nttimetounix( u_int64_t );
int ntfs_runtovrun( cn_t **, cn_t **, u_long *, u_int8_t *);
int ntfs_attrtontvattr( struct ntfsmount *, struct ntvattr **, struct attr * );
void ntfs_freentvattr( struct ntvattr * );
int ntfs_loadntvattrs( struct ntfsmount *, struct vnode *, caddr_t, struct ntvattr **);
struct ntvattr * ntfs_findntvattr( struct ntfsmount *, struct ntnode *, u_int32_t, cn_t );
int ntfs_isnamepermitted(struct ntfsmount *, struct attr_indexentry * );
int ntfs_ntvattrrele(struct ntvattr * );
int ntfs_ntvattrget(struct ntfsmount *, struct ntnode *, u_int32_t, const char *, cn_t , struct ntvattr **);
void ntfs_ntref(struct ntnode *);
void ntfs_ntrele(struct ntnode *);
int ntfs_loadntnode( struct ntfsmount *, struct ntnode * );
int ntfs_fget(struct ntfsmount *, struct ntnode *, int, char *, struct fnode **);
void ntfs_frele(struct fnode *);
int ntfs_ntreaddir(struct ntfsmount *, struct fnode *, u_int32_t, struct attr_indexentry **, struct proc *);
int ntfs_ntlookupfile(struct ntfsmount *, struct vnode *, struct componentname *, struct vnode **, struct proc *);
int ntfs_ntlookup(struct ntfsmount *, ntfsino_t, struct ntnode **, struct proc *);
int ntfs_ntget(struct ntnode *, struct proc *);
void ntfs_ntput(struct ntnode *, struct proc *);
int ntfs_toupper_use(struct mount *, struct ntfsmount *, struct proc *);
void ntfs_toupper_unuse(struct proc *);

/* ntfs_conv.c stuff */
ntfs_wget_func_t ntfs_utf8_wget;
ntfs_wput_func_t ntfs_utf8_wput;
ntfs_wcmp_func_t ntfs_utf8_wcmp;
@


1.9
log
@lazy init nthash to save some memory when it's not used. ok jsing
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs_subr.h,v 1.8 2013/12/02 16:19:08 jsing Exp $	*/
a93 2
int ntfs_writentvattr_plain(struct ntfsmount *, struct ntnode *, struct ntvattr *, off_t, size_t, void *, size_t *, struct uio *);
int ntfs_writeattr_plain(struct ntfsmount *, struct ntnode *, u_int32_t, char *, off_t, size_t, void *, size_t *, struct uio *);
@


1.8
log
@Avoid truncating 64-bit on disk attribute values to 32-bits. Otherwise an
attribute's data length value wraps at 4GB.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs_subr.h,v 1.7 2013/05/30 20:11:06 guenther Exp $	*/
a95 1
void ntfs_toupper_init(void);
@


1.7
log
@More of the same: ntfs doesn't do inode numbers >2^32, so use a smaller type
internally, only using ino_t in the VFS layer APIs: vget, readdir, getattr
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs_subr.h,v 1.6 2010/09/04 21:35:58 tedu Exp $	*/
d49 2
a50 2
	u_int32_t		va_datalen;
	u_int32_t		va_allocated;
@


1.6
log
@revert previous "simplification".  kcornies at gmail says it doesn't work.
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs_subr.h,v 1.5 2010/08/22 21:23:07 tedu Exp $	*/
d101 1
a101 1
int ntfs_ntlookup(struct ntfsmount *, ino_t, struct ntnode **, struct proc *);
@


1.5
log
@the upper case table code was a lot more complicated than it needed to be.
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs_subr.h,v 1.4 2009/08/13 16:00:53 jasper Exp $	*/
d96 1
d104 2
a105 1
int ntfs_load_toupper(struct mount *, struct ntfsmount *);
@


1.4
log
@- remove super-obvious comments from vnodeop_entries[]
- remove #ifdef someos blocks, makes this a tad easier to read

agreed by art@@ and thib@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs_subr.h,v 1.3 2003/05/20 03:36:42 tedu Exp $	*/
a95 1
void ntfs_toupper_init(void);
d103 1
a103 2
int ntfs_toupper_use(struct mount *, struct ntfsmount *, struct proc *);
void ntfs_toupper_unuse(struct proc *);
@


1.3
log
@un __P
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs_subr.h,v 1.2 2003/05/20 03:23:12 mickey Exp $	*/
a73 1
#ifndef __OpenBSD__
a82 1
int ntfs_ntreaddir( struct ntfsmount *, struct fnode *, u_int32_t, struct attr_indexentry **);
a87 1
int ntfs_ntlookupfile(struct ntfsmount *, struct vnode *, struct componentname *, struct vnode **);
a90 2
int ntfs_ntlookup(struct ntfsmount *, ino_t, struct ntnode **);
int ntfs_ntget(struct ntnode *);
a92 1
void ntfs_ntput(struct ntnode *);
a96 2
int ntfs_toupper_use(struct mount *, struct ntfsmount *);
void ntfs_toupper_unuse(void);
a98 10
#else
int ntfs_procfixups(struct ntfsmount *, u_int32_t, caddr_t, size_t);
int ntfs_parserun(cn_t *, cn_t *, u_int8_t *, u_long, u_long *);
int ntfs_runtocn(cn_t *, struct ntfsmount *, u_int8_t *, u_long, cn_t);
int ntfs_readntvattr_plain(struct ntfsmount *, struct ntnode *, struct ntvattr *, off_t, size_t, void *,size_t *, struct uio *);
int ntfs_readattr_plain(struct ntfsmount *, struct ntnode *, u_int32_t, char *, off_t, size_t, void *,size_t *, struct uio *);
int ntfs_readattr(struct ntfsmount *, struct ntnode *, u_int32_t, char *, off_t, size_t, void *, struct uio *);
int ntfs_filesize(struct ntfsmount *, struct fnode *, u_int64_t *, u_int64_t *);
int ntfs_times(struct ntfsmount *, struct ntnode *, ntfs_times_t *);
struct timespec	ntfs_nttimetounix(u_int64_t);
a99 5
int ntfs_runtovrun(cn_t **, cn_t **, u_long *, u_int8_t *);
int ntfs_attrtontvattr(struct ntfsmount *, struct ntvattr **, struct attr *);
void ntfs_freentvattr(struct ntvattr *);
int ntfs_loadntvattrs(struct ntfsmount *, struct vnode *, caddr_t, struct ntvattr **);
struct ntvattr * ntfs_findntvattr(struct ntfsmount *, struct ntnode *, u_int32_t, cn_t);
a100 3
int ntfs_isnamepermitted(struct ntfsmount *, struct attr_indexentry *);
int ntfs_ntvattrrele(struct ntvattr * );
int ntfs_ntvattrget(struct ntfsmount *, struct ntnode *, u_int32_t, const char *, cn_t , struct ntvattr **);
a102 2
void ntfs_ntref(struct ntnode *);
void ntfs_ntrele(struct ntnode *);
a103 4
int ntfs_loadntnode( struct ntfsmount *, struct ntnode *);
int ntfs_writentvattr_plain(struct ntfsmount *, struct ntnode *, struct ntvattr *, off_t, size_t, void *, size_t *, struct uio *);
int ntfs_writeattr_plain(struct ntfsmount *, struct ntnode *, u_int32_t, char *, off_t, size_t, void *, size_t *, struct uio *);
void ntfs_toupper_init(void);
a105 3
int ntfs_fget(struct ntfsmount *, struct ntnode *, int, char *, struct fnode **);
void ntfs_frele(struct fnode *);
#endif
@


1.3.2.1
log
@add file to SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2
log
@fix the tags
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs_subr.h,v 1.1 2003/05/20 03:03:27 tedu Exp $	*/
d75 32
a106 32
int ntfs_procfixups __P(( struct ntfsmount *, u_int32_t, caddr_t, size_t ));
int ntfs_parserun __P(( cn_t *, cn_t *, u_int8_t *, u_long, u_long *));
int ntfs_runtocn __P(( cn_t *, struct ntfsmount *, u_int8_t *, u_long, cn_t));
int ntfs_readntvattr_plain __P(( struct ntfsmount *, struct ntnode *, struct ntvattr *, off_t, size_t, void *,size_t *, struct uio *));
int ntfs_readattr_plain __P(( struct ntfsmount *, struct ntnode *, u_int32_t, char *, off_t, size_t, void *,size_t *, struct uio *));
int ntfs_readattr __P(( struct ntfsmount *, struct ntnode *, u_int32_t, char *, off_t, size_t, void *, struct uio *));
int ntfs_filesize __P(( struct ntfsmount *, struct fnode *, u_int64_t *, u_int64_t *));
int ntfs_times __P(( struct ntfsmount *, struct ntnode *, ntfs_times_t *));
struct timespec	ntfs_nttimetounix __P(( u_int64_t ));
int ntfs_ntreaddir __P(( struct ntfsmount *, struct fnode *, u_int32_t, struct attr_indexentry **));
int ntfs_runtovrun __P(( cn_t **, cn_t **, u_long *, u_int8_t *));
int ntfs_attrtontvattr __P(( struct ntfsmount *, struct ntvattr **, struct attr * ));
void ntfs_freentvattr __P(( struct ntvattr * ));
int ntfs_loadntvattrs __P(( struct ntfsmount *, struct vnode *, caddr_t, struct ntvattr **));
struct ntvattr * ntfs_findntvattr __P(( struct ntfsmount *, struct ntnode *, u_int32_t, cn_t ));
int ntfs_ntlookupfile __P((struct ntfsmount *, struct vnode *, struct componentname *, struct vnode **));
int ntfs_isnamepermitted __P((struct ntfsmount *, struct attr_indexentry * ));
int ntfs_ntvattrrele __P((struct ntvattr * ));
int ntfs_ntvattrget __P((struct ntfsmount *, struct ntnode *, u_int32_t, const char *, cn_t , struct ntvattr **));
int ntfs_ntlookup __P((struct ntfsmount *, ino_t, struct ntnode **));
int ntfs_ntget __P((struct ntnode *));
void ntfs_ntref __P((struct ntnode *));
void ntfs_ntrele __P((struct ntnode *));
void ntfs_ntput __P((struct ntnode *));
int ntfs_loadntnode __P(( struct ntfsmount *, struct ntnode * ));
int ntfs_writentvattr_plain __P((struct ntfsmount *, struct ntnode *, struct ntvattr *, off_t, size_t, void *, size_t *, struct uio *));
int ntfs_writeattr_plain __P((struct ntfsmount *, struct ntnode *, u_int32_t, char *, off_t, size_t, void *, size_t *, struct uio *));
void ntfs_toupper_init __P((void));
int ntfs_toupper_use __P((struct mount *, struct ntfsmount *));
void ntfs_toupper_unuse __P((void));
int ntfs_fget __P((struct ntfsmount *, struct ntnode *, int, char *, struct fnode **));
void ntfs_frele __P((struct fnode *));
d108 32
a139 32
int ntfs_procfixups (struct ntfsmount *, u_int32_t, caddr_t, size_t);
int ntfs_parserun (cn_t *, cn_t *, u_int8_t *, u_long, u_long *);
int ntfs_runtocn (cn_t *, struct ntfsmount *, u_int8_t *, u_long, cn_t);
int ntfs_readntvattr_plain (struct ntfsmount *, struct ntnode *, struct ntvattr *, off_t, size_t, void *,size_t *, struct uio *);
int ntfs_readattr_plain (struct ntfsmount *, struct ntnode *, u_int32_t, char *, off_t, size_t, void *,size_t *, struct uio *);
int ntfs_readattr (struct ntfsmount *, struct ntnode *, u_int32_t, char *, off_t, size_t, void *, struct uio *);
int ntfs_filesize (struct ntfsmount *, struct fnode *, u_int64_t *, u_int64_t *);
int ntfs_times (struct ntfsmount *, struct ntnode *, ntfs_times_t *);
struct timespec	ntfs_nttimetounix (u_int64_t);
int ntfs_ntreaddir (struct ntfsmount *, struct fnode *, u_int32_t, struct attr_indexentry **, struct proc *);
int ntfs_runtovrun (cn_t **, cn_t **, u_long *, u_int8_t *);
int ntfs_attrtontvattr (struct ntfsmount *, struct ntvattr **, struct attr *);
void ntfs_freentvattr (struct ntvattr *);
int ntfs_loadntvattrs (struct ntfsmount *, struct vnode *, caddr_t, struct ntvattr **);
struct ntvattr * ntfs_findntvattr (struct ntfsmount *, struct ntnode *, u_int32_t, cn_t);
int ntfs_ntlookupfile (struct ntfsmount *, struct vnode *, struct componentname *, struct vnode **, struct proc *);
int ntfs_isnamepermitted (struct ntfsmount *, struct attr_indexentry *);
int ntfs_ntvattrrele (struct ntvattr * );
int ntfs_ntvattrget (struct ntfsmount *, struct ntnode *, u_int32_t, const char *, cn_t , struct ntvattr **);
int ntfs_ntlookup (struct ntfsmount *, ino_t, struct ntnode **, struct proc *);
int ntfs_ntget (struct ntnode *, struct proc *);
void ntfs_ntref (struct ntnode *);
void ntfs_ntrele (struct ntnode *);
void ntfs_ntput (struct ntnode *, struct proc *);
int ntfs_loadntnode ( struct ntfsmount *, struct ntnode *);
int ntfs_writentvattr_plain (struct ntfsmount *, struct ntnode *, struct ntvattr *, off_t, size_t, void *, size_t *, struct uio *);
int ntfs_writeattr_plain (struct ntfsmount *, struct ntnode *, u_int32_t, char *, off_t, size_t, void *, size_t *, struct uio *);
void ntfs_toupper_init (void);
int ntfs_toupper_use (struct mount *, struct ntfsmount *, struct proc *);
void ntfs_toupper_unuse (struct proc *);
int ntfs_fget (struct ntfsmount *, struct ntnode *, int, char *, struct fnode **);
void ntfs_frele (struct fnode *);
@


1.1
log
@by popular request, NTFS support.  read only.
The code comes from NetBSD and was ported by Julian Bordet.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$Id$	*/
@

