head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.16
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.12
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.8
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.10
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.2
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.14.0.2
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.5.0.6
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	SMP:1.3.0.2;
locks; strict;
comment	@ * @;


1.17
date	2013.11.24.16.02.30;	author jsing;	state Exp;
branches;
next	1.16;

1.16
date	2013.06.11.16.42.17;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2013.05.30.20.11.06;	author guenther;	state Exp;
branches;
next	1.14;

1.14
date	2013.01.25.22.25.14;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2013.01.18.05.09.21;	author jsing;	state Exp;
branches;
next	1.12;

1.12
date	2010.12.21.20.14.43;	author thib;	state Exp;
branches;
next	1.11;

1.11
date	2010.09.10.16.34.09;	author thib;	state Exp;
branches;
next	1.10;

1.10
date	2010.09.07.00.41.05;	author thib;	state Exp;
branches;
next	1.9;

1.9
date	2010.08.12.04.05.03;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.06.12.04.27;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.13.16.00.53;	author jasper;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.01.17.30.56;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.02.01.02.56;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2007.02.11.20.29.22;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.20.03.36.42;	author tedu;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2003.05.20.03.23.11;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.20.03.03.27;	author tedu;	state Exp;
branches;
next	;

1.3.2.1
date	2003.06.07.10.47.03;	author ho;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Clean up the NTFS debug code - use uppercase names for the debug macros,
especially since 'dprintf' now has another meaning (at least outside of
the kernel). Tweak the macro syntax so we can avoid having to double
bracket all invocations. Also apply a good dose of style(9).

ok krw@@
@
text
@/*	$OpenBSD: ntfs.h,v 1.16 2013/06/11 16:42:17 deraadt Exp $	*/
/*	$NetBSD: ntfs.h,v 1.5 2003/04/24 07:50:19 christos Exp $	*/

/*-
 * Copyright (c) 1998, 1999 Semen Ustimenko
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	Id: ntfs.h,v 1.5 1999/05/12 09:42:51 semenu Exp
 */

/*#define NTFS_DEBUG 1*/
typedef u_int64_t cn_t;
typedef u_int16_t wchar;

#define BBSIZE			1024
#define	BBOFF			((off_t)(0))
#define	BBLOCK			0
#define	NTFS_MFTINO		0
#define	NTFS_VOLUMEINO		3
#define	NTFS_ATTRDEFINO		4
#define	NTFS_ROOTINO		5
#define	NTFS_BITMAPINO		6
#define	NTFS_BOOTINO		7
#define	NTFS_BADCLUSINO		8
#define	NTFS_UPCASEINO		10
#define NTFS_MAXFILENAME	255

/*
 * UFS directories use 32bit inode numbers internally, regardless
 * of what the system on top of it uses.
 */
typedef u_int32_t	ntfsino_t;

struct fixuphdr {
	u_int32_t       fh_magic;
	u_int16_t       fh_foff;
	u_int16_t       fh_fnum;
} __packed;

#define NTFS_AF_INRUN	0x00000001
struct attrhdr {
	u_int32_t       a_type;
	u_int32_t       reclen;
	u_int8_t        a_flag;
	u_int8_t        a_namelen;
	u_int8_t        a_nameoff;
	u_int8_t        reserved1;
	u_int8_t        a_compression;
	u_int8_t        reserved2;
	u_int16_t       a_index;
} __packed;
#define NTFS_A_STD	0x10
#define NTFS_A_ATTRLIST	0x20
#define NTFS_A_NAME	0x30
#define NTFS_A_VOLUMENAME	0x60
#define NTFS_A_DATA	0x80
#define	NTFS_A_INDXROOT	0x90
#define	NTFS_A_INDX	0xA0
#define NTFS_A_INDXBITMAP 0xB0

#define NTFS_MAXATTRNAME	255
struct attr {
	struct attrhdr  a_hdr;
	union {
		struct {
			u_int16_t       a_datalen;
			u_int16_t       reserved1;
			u_int16_t       a_dataoff;
			u_int16_t       a_indexed;
		} __packed	a_S_r;
		struct {
			cn_t            a_vcnstart;
			cn_t            a_vcnend;
			u_int16_t       a_dataoff;
			u_int16_t       a_compressalg;
			u_int32_t       reserved1;
			u_int64_t       a_allocated;
			u_int64_t       a_datalen;
			u_int64_t       a_initialized;
		} __packed	a_S_nr;
	}               a_S;
} __packed;
#define a_r	a_S.a_S_r
#define a_nr	a_S.a_S_nr

typedef struct {
	u_int64_t       t_create;
	u_int64_t       t_write;
	u_int64_t       t_mftwrite;
	u_int64_t       t_access;
} __packed ntfs_times_t;

#define NTFS_FFLAG_RDONLY	0x01LL
#define NTFS_FFLAG_HIDDEN	0x02LL
#define NTFS_FFLAG_SYSTEM	0x04LL
#define NTFS_FFLAG_ARCHIVE	0x20LL
#define NTFS_FFLAG_COMPRESSED	0x0800LL
#define NTFS_FFLAG_DIR		0x10000000LL

struct attr_name {
	u_int32_t       n_pnumber;	/* Parent ntnode */
	u_int32_t       reserved;
	ntfs_times_t    n_times;
	u_int64_t       n_size;
	u_int64_t       n_attrsz;
	u_int64_t       n_flag;
	u_int8_t        n_namelen;
	u_int8_t        n_nametype;
	u_int16_t       n_name[1];
} __packed;

#define NTFS_IRFLAG_INDXALLOC	0x00000001
struct attr_indexroot {
	u_int32_t       ir_unkn1;	/* always 0x30 */
	u_int32_t       ir_unkn2;	/* always 0x1 */
	u_int32_t       ir_size;/* ??? */
	u_int32_t       ir_unkn3;	/* number of cluster */
	u_int32_t       ir_unkn4;	/* always 0x10 */
	u_int32_t       ir_datalen;	/* sizeof something */
	u_int32_t       ir_allocated;	/* same as above */
	u_int16_t       ir_flag;/* ?? always 1 */
	u_int16_t       ir_unkn7;
} __packed;

struct attr_attrlist {
	u_int32_t       al_type;	/* Attribute type */
	u_int16_t       reclen;		/* length of this entry */
	u_int8_t        al_namelen;	/* Attribute name len */
	u_int8_t        al_nameoff;	/* Name offset from entry start */
	u_int64_t       al_vcnstart;	/* VCN number */
	u_int32_t       al_inumber;	/* Parent ntnode */
	u_int32_t       reserved;
	u_int16_t       al_index;	/* Attribute index in MFT record */
	u_int16_t       al_name[1];	/* Name */
} __packed;

#define	NTFS_INDXMAGIC	(u_int32_t)(0x58444E49)
struct attr_indexalloc {
	struct fixuphdr ia_fixup;
	u_int64_t       unknown1;
	cn_t            ia_bufcn;
	u_int16_t       ia_hdrsize;
	u_int16_t       unknown2;
	u_int32_t       ia_inuse;
	u_int32_t       ia_allocated;
} __packed;

#define	NTFS_IEFLAG_SUBNODE	0x00000001
#define	NTFS_IEFLAG_LAST	0x00000002

struct attr_indexentry {
	u_int32_t       ie_number;
	u_int32_t       unknown1;
	u_int16_t       reclen;
	u_int16_t       ie_size;
	u_int32_t       ie_flag;/* 1 - has subnodes, 2 - last */
	u_int32_t       ie_fpnumber;
	u_int32_t       unknown2;
	ntfs_times_t    ie_ftimes;
	u_int64_t       ie_fallocated;
	u_int64_t       ie_fsize;
	u_int64_t       ie_fflag;
	u_int8_t        ie_fnamelen;
	u_int8_t        ie_fnametype;
	wchar           ie_fname[NTFS_MAXFILENAME];
	/* cn_t		ie_bufcn;	 buffer with subnodes */
} __packed;

#define	NTFS_FILEMAGIC	(u_int32_t)(0x454C4946)
#define	NTFS_FRFLAG_DIR	0x0002
struct filerec {
	struct fixuphdr fr_fixup;
	u_int8_t        reserved[8];
	u_int16_t       fr_seqnum;	/* Sequence number */
	u_int16_t       fr_nlink;
	u_int16_t       fr_attroff;	/* offset to attributes */
	u_int16_t       fr_flags;	/* 1-nonresident attr, 2-directory */
	u_int32_t       fr_size;/* hdr + attributes */
	u_int32_t       fr_allocated;	/* allocated length of record */
	u_int64_t       fr_mainrec;	/* main record */
	u_int16_t       fr_attrnum;	/* maximum attr number + 1 ??? */
} __packed;

#define	NTFS_ATTRNAME_MAXLEN	0x40
#define	NTFS_ADFLAG_NONRES	0x0080	/* Attrib can be non resident */
#define	NTFS_ADFLAG_INDEX	0x0002	/* Attrib can be indexed */
struct attrdef {
	wchar		ad_name[NTFS_ATTRNAME_MAXLEN];
	u_int32_t	ad_type;
	u_int32_t	reserved1[2];
	u_int32_t	ad_flag;
	u_int64_t	ad_minlen;
	u_int64_t	ad_maxlen;	/* -1 for nonlimited */
} __packed;

struct ntvattrdef {
	char		ad_name[0x40];
	int		ad_namelen;
	u_int32_t	ad_type;
} __packed;

#define	NTFS_BBID	"NTFS    "
#define	NTFS_BBIDLEN	8
struct bootfile {
	u_int8_t        reserved1[3];	/* asm jmp near ... */
	u_int8_t        bf_sysid[8];	/* 'NTFS    ' */
	u_int16_t       bf_bps;		/* bytes per sector */
	u_int8_t        bf_spc;		/* sectors per cluster */
	u_int8_t        reserved2[7];	/* unused (zeroed) */
	u_int8_t        bf_media;	/* media desc. (0xF8) */
	u_int8_t        reserved3[2];
	u_int16_t       bf_spt;		/* sectors per track */
	u_int16_t       bf_heads;	/* number of heads */
	u_int8_t        reserver4[12];
	u_int64_t       bf_spv;		/* sectors per volume */
	cn_t            bf_mftcn;	/* $MFT cluster number */
	cn_t            bf_mftmirrcn;	/* $MFTMirr cn */
	u_int8_t        bf_mftrecsz;	/* MFT record size (clust) */
					/* 0xF6 inducates 1/4 */
	u_int32_t       bf_ibsz;	/* index buffer size */
	u_int32_t       bf_volsn;	/* volume ser. num. */
} __packed;

typedef wchar (ntfs_wget_func_t)(const char **);
typedef int (ntfs_wput_func_t)(char *, size_t, wchar);
typedef int (ntfs_wcmp_func_t)(wchar, wchar);

/*
 * Maximum number of ntnodes to keep in memory. We do not want to leave
 * large data structures hanging off vnodes indefinitely and the data
 * needed to reload the ntnode should already be in the buffer cache.
 */
#define LOADED_NTNODE_HI 16
struct ntnode;
TAILQ_HEAD(ntnodeq, ntnode);

#define	NTFS_SYSNODESNUM	0x0B
struct ntfsmount {
	struct mount   *ntm_mountp;	/* filesystem vfs structure */
	struct bootfile ntm_bootfile;
	dev_t           ntm_dev;	/* device mounted */
	struct vnode   *ntm_devvp;	/* block device mounted vnode */
	struct vnode   *ntm_sysvn[NTFS_SYSNODESNUM];
	u_int32_t       ntm_bpmftrec;
	uid_t           ntm_uid;
	gid_t           ntm_gid;
	mode_t          ntm_mode;
	u_long          ntm_flag;
	cn_t		ntm_cfree;
	struct ntvattrdef *ntm_ad;
	int		ntm_adnum;
	struct netexport ntm_export;	/* export information */
	ntfs_wget_func_t *ntm_wget;	/* decode string to Unicode string */
	ntfs_wput_func_t *ntm_wput;	/* encode Unicode string to string */
	ntfs_wcmp_func_t *ntm_wcmp;	/* compare to wide characters */
	int		ntm_ntnodes;	/* Number of loaded ntnodes. */
	struct ntnodeq	ntm_ntnodeq;	/* Queue of ntnodes (LRU). */
};

#define ntm_mftcn	ntm_bootfile.bf_mftcn
#define ntm_mftmirrcn	ntm_bootfile.bf_mftmirrcn
#define	ntm_mftrecsz	ntm_bootfile.bf_mftrecsz
#define	ntm_spc		ntm_bootfile.bf_spc
#define	ntm_bps		ntm_bootfile.bf_bps

#define	NTFS_NEXTREC(s, type) ((type)(((caddr_t) s) + (s)->reclen))

/* Convert mount ptr to ntfsmount ptr. */
#define VFSTONTFS(mp)	((struct ntfsmount *)((mp)->mnt_data))
#define VTONT(v)	FTONT(VTOF(v))
#define	VTOF(v)		((struct fnode *)((v)->v_data))
#define	FTOV(f)		((f)->f_vp)
#define	FTONT(f)	((f)->f_ip)
#define ntfs_cntobn(cn)	(daddr_t)((cn) * (ntmp->ntm_spc))
#define ntfs_cntob(cn)	(off_t)((cn) * (ntmp)->ntm_spc * (ntmp)->ntm_bps)
#define ntfs_btocn(off)	(cn_t)((off) / ((ntmp)->ntm_spc * (ntmp)->ntm_bps))
#define ntfs_btocl(off)	(cn_t)((off + ntfs_cntob(1) - 1) / ((ntmp)->ntm_spc * (ntmp)->ntm_bps))
#define ntfs_btocnoff(off)	(off_t)((off) % ((ntmp)->ntm_spc * (ntmp)->ntm_bps))
#define ntfs_bntob(bn)	(int32_t)((bn) * (ntmp)->ntm_bps)

#ifdef _KERNEL
#if defined(NTFS_DEBUG)
extern int ntfs_debug;
#define DNPRINTF(n, x...) do { if(ntfs_debug >= (n)) printf(x); } while(0)
#define DPRINTF(x...) DNPRINTF(1, x)
#define DDPRINTF(x...) DNPRINTF(2, x)
#else /* NTFS_DEBUG */
#define DNPRINTF(n, x...)
#define DPRINTF(x...)
#define DDPRINTF(x...)
#endif

extern struct vops ntfs_vops;
#endif
@


1.16
log
@final removal of daddr64_t.  daddr_t has been 64 bit for a long enough
test period; i think 3 years ago the last bugs fell out.
ok otto beck others
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.15 2013/05/30 20:11:06 guenther Exp $	*/
d305 3
a307 3
#define DPRINTF(X, Y) do { if(ntfs_debug >= (X)) printf Y; } while(0)
#define dprintf(a) DPRINTF(1, a)
#define ddprintf(a) DPRINTF(2, a)
d309 3
a311 3
#define DPRINTF(X, Y)
#define dprintf(a)
#define ddprintf(a)
@


1.15
log
@More of the same: ntfs doesn't do inode numbers >2^32, so use a smaller type
internally, only using ino_t in the VFS layer APIs: vget, readdir, getattr
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.14 2013/01/25 22:25:14 brad Exp $	*/
d295 1
a295 1
#define ntfs_cntobn(cn)	(daddr64_t)((cn) * (ntmp->ntm_spc))
@


1.14
log
@Add _KERNEL guard to hide dprintf macro from userland.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.13 2013/01/18 05:09:21 jsing Exp $	*/
d48 6
@


1.13
log
@Constrain the amount of kernel memory used by NTFS. Keep a small cache of
loaded ntnodes and once the maximum is reached, unload the least recently
used ntnode before loading a new one. This avoids leaving large data
structures hanging around, which only get cleaned up when the vnode is
reclaimed. Additionally, the buffer cache should contain the data needed
to reload the ntnode.

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.12 2010/12/21 20:14:43 thib Exp $	*/
d296 1
d309 1
@


1.12
log
@Bring back the "End the VOP experiment." diff, naddy's issues where
unrelated, and his alpha is much happier now.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.11 2010/09/10 16:34:09 thib Exp $	*/
d243 9
d271 2
@


1.11
log
@Backout the VOP diff until the issues naddy was seeing on alpha (gcc3)
have been resolved.
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.10 2010/09/07 00:41:05 thib Exp $	*/
a284 2
typedef int (vop_t)(void *);

d296 1
a296 1
extern vop_t  **ntfs_vnodeop_p;
@


1.10
log
@Allow NTFS to compile by cutting it over to the new VOP world order.
Small cleanup while here, nuke the ntfs_bypass function and just
use eopnotsupp like every other filesystem, it makes no sense to
return ENOTTY for unimplemented VOPs.
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.9 2010/08/12 04:05:03 tedu Exp $	*/
d285 2
d298 1
a298 1
extern struct vops ntfs_vops;
@


1.9
log
@clean up some macro obfuscation and assorted styling problems.
fix a bonus off by one bug.  ok matthew
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.8 2010/06/06 12:04:27 miod Exp $	*/
a284 2
typedef int (vop_t)(void *);

d296 1
a296 1
extern vop_t  **ntfs_vnodeop_p;
@


1.8
log
@simething -> something
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.7 2009/08/13 16:00:53 jasper Exp $	*/
a285 5
#define HASHINIT(a, b, c, d)	hashinit((a), (b), (c), (d))
#define bqrelse(bp)		brelse(bp)
#define VOP__UNLOCK(a, b, c)	VOP_UNLOCK((a), (b), (c))
#define VGET(a, b, c)		vget((a), (b), (c))
#define VN_LOCK(a, b, c)	vn_lock((a), (b), (c))
@


1.7
log
@- remove super-obvious comments from vnodeop_entries[]
- remove #ifdef someos blocks, makes this a tad easier to read

agreed by art@@ and thib@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.6 2008/09/01 17:30:56 deraadt Exp $	*/
d134 1
a134 1
	u_int32_t       ir_datalen;	/* sizeof simething */
@


1.6
log
@Avoid #pragma pack(1) and unify everything towards using __packed.
This requires that structures defined within __packed structures must
independently request that they themselves become __packed, too.
worked on with toby
 CVS: ----------------------------------------------------------------------
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.5 2007/06/02 01:02:56 deraadt Exp $	*/
a284 21
#if __FreeBSD_version >= 300000 || defined(__NetBSD__)
MALLOC_DECLARE(M_NTFSMNT);
MALLOC_DECLARE(M_NTFSNTNODE);
MALLOC_DECLARE(M_NTFSFNODE);
MALLOC_DECLARE(M_NTFSDIR);
MALLOC_DECLARE(M_NTFSNTHASH);
MALLOC_DECLARE(M_NTFSNTVATTR);
MALLOC_DECLARE(M_NTFSRDATA);
MALLOC_DECLARE(M_NTFSDECOMP);
MALLOC_DECLARE(M_NTFSRUN);
#endif

#ifdef __NetBSD__
typedef int (vop_t)(void *);
#define HASHINIT(a, b, c, d)	hashinit((a), HASH_LIST, (b), (c), (d))
#define bqrelse(bp)		brelse(bp)
#define VOP__UNLOCK(a, b, c)	VOP_UNLOCK((a), (b))
#define VGET(a, b, c)		vget((a), (b))
#define VN_LOCK(a, b, c)	vn_lock((a), (b))

#elif defined(__OpenBSD__)
a290 11

#else /* !NetBSD && !OpenBSD */
#define HASHINIT(a, b, c, d)	hashinit((a), (b), (d))
#define VOP__UNLOCK(a, b, c)	VOP_UNLOCK((a), (b), (c))
#define VGET(a, b, c)		vget((a), (b), (c))
#define VN_LOCK(a, b, c)	vn_lock((a), (b), (c))

/* PDIRUNLOCK is used by NetBSD to mark if vfs_lookup() unlocked parent dir;
 * on FreeBSD, it's not defined and nothing similar exists */
#define PDIRUNLOCK		0
#endif /* NetBSD */
@


1.5
log
@do the daddr_t -> daddr64_t or int32_t dance here as well
"this code sucks -- pedro", "just put it in -- tom".
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.4 2007/02/11 20:29:22 miod Exp $	*/
a35 1
#pragma pack(1)
d53 1
a53 1
};
d66 1
a66 1
};
d85 1
a85 1
		}               a_S_r;
d95 1
a95 1
		}               a_S_nr;
d97 1
a97 1
};
d106 1
a106 1
}               ntfs_times_t;
d125 1
a125 1
};
d138 1
a138 1
};
d150 1
a150 1
};
d161 1
a161 1
};
d182 1
a182 1
};
d197 1
a197 1
};
d209 1
a209 1
};
d215 1
a215 1
};
d237 1
a237 3
};

#pragma pack()
@


1.4
log
@Remove _KERNEL_OPT leftovers.
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.3 2003/05/20 03:36:42 tedu Exp $	*/
d39 1
a39 1
#define	BBLOCK			((daddr_t)(0))
d281 1
a281 1
#define ntfs_cntobn(cn)	(daddr_t)((cn) * (ntmp->ntm_spc))
d286 1
a286 3
#define ntfs_bntob(bn)	(daddr_t)((bn) * (ntmp)->ntm_bps)

#define	ntfs_bpbl	(daddr_t)((ntmp)->ntm_bps)
@


1.3
log
@un __P
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.2 2003/05/20 03:23:11 mickey Exp $	*/
a32 4
#if defined(__NetBSD__) && defined(_KERNEL_OPT)
#include "opt_ntfs.h"
#endif

@


1.3.2.1
log
@add file to SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2
log
@fix the tags
@
text
@d1 1
a1 1
/*	$OpenBSD: ntfs.h,v 1.1 2003/05/20 03:03:27 tedu Exp $	*/
d246 3
a248 3
typedef wchar (ntfs_wget_func_t) __P((const char **));
typedef int (ntfs_wput_func_t) __P((char *, size_t, wchar));
typedef int (ntfs_wcmp_func_t) __P((wchar, wchar));
d307 1
a307 1
typedef int (vop_t) __P((void *));
d315 1
a315 1
typedef int (vop_t) (void *);
@


1.1
log
@by popular request, NTFS support.  read only.
The code comes from NetBSD and was ported by Julian Bordet.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$Id$	*/
@

