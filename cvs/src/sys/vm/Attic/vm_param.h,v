head	1.26;
access;
symbols
	SMP_SYNC_A:1.26
	SMP_SYNC_B:1.26
	UBC_SYNC_A:1.26
	UBC_SYNC_B:1.26
	OPENBSD_3_0:1.25.0.2
	OPENBSD_3_0_BASE:1.25
	OPENBSD_2_9_BASE:1.20
	OPENBSD_2_9:1.20.0.4
	OPENBSD_2_8:1.20.0.2
	OPENBSD_2_8_BASE:1.20
	OPENBSD_2_7:1.19.0.2
	OPENBSD_2_7_BASE:1.19
	SMP:1.18.0.2
	SMP_BASE:1.18
	kame_19991208:1.17
	OPENBSD_2_6:1.15.0.2
	OPENBSD_2_6_BASE:1.15
	OPENBSD_2_5:1.14.0.6
	OPENBSD_2_5_BASE:1.14
	OPENBSD_2_4:1.14.0.4
	OPENBSD_2_4_BASE:1.14
	OPENBSD_2_3:1.14.0.2
	OPENBSD_2_3_BASE:1.14
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2001.11.06.00.30.38;	author art;	state dead;
branches;
next	1.25;

1.25
date	2001.08.11.10.57.22;	author art;	state Exp;
branches;
next	1.24;

1.24
date	2001.08.06.14.03.05;	author art;	state Exp;
branches;
next	1.23;

1.23
date	2001.08.02.11.06.38;	author art;	state Exp;
branches;
next	1.22;

1.22
date	2001.06.27.04.52.40;	author art;	state Exp;
branches;
next	1.21;

1.21
date	2001.05.05.21.26.47;	author art;	state Exp;
branches;
next	1.20;

1.20
date	2000.06.14.16.51.55;	author provos;	state Exp;
branches;
next	1.19;

1.19
date	2000.03.15.14.17.48;	author art;	state Exp;
branches;
next	1.18;

1.18
date	99.12.30.18.21.56;	author provos;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	99.11.25.08.44.07;	author art;	state Exp;
branches;
next	1.16;

1.16
date	99.11.25.08.41.36;	author art;	state Exp;
branches;
next	1.15;

1.15
date	99.08.23.07.57.17;	author art;	state Exp;
branches;
next	1.14;

1.14
date	98.03.01.00.38.25;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	97.12.12.08.46.00;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	97.11.13.18.35.39;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	97.11.06.05.59.38;	author csapuntz;	state Exp;
branches;
next	1.10;

1.10
date	97.10.06.20.21.28;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	97.10.06.15.28.58;	author csapuntz;	state Exp;
branches;
next	1.8;

1.8
date	97.04.10.13.48.50;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	96.10.23.15.38.38;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.05.28.12.16.32;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.03.24.18.07.59;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.03.24.17.40.46;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.03.23.19.13.13;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.03.19.21.10.56;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.38;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.38;	author deraadt;	state Exp;
branches;
next	;

1.18.2.1
date	2000.03.24.09.09.53;	author niklas;	state Exp;
branches;
next	1.18.2.2;

1.18.2.2
date	2001.05.14.22.47.50;	author niklas;	state Exp;
branches;
next	1.18.2.3;

1.18.2.3
date	2001.07.04.11.01.28;	author niklas;	state Exp;
branches;
next	1.18.2.4;

1.18.2.4
date	2001.10.31.03.32.14;	author nate;	state Exp;
branches;
next	1.18.2.5;

1.18.2.5
date	2001.11.13.23.02.31;	author niklas;	state dead;
branches;
next	;


desc
@@


1.26
log
@Kill vm/vm_param.h, move it to uvm/uvm_param.h
@
text
@/*	$OpenBSD: vm_param.h,v 1.25 2001/08/11 10:57:22 art Exp $	*/
/*	$NetBSD: vm_param.h,v 1.25 2000/03/26 20:42:45 kleink Exp $	*/

/* 
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * The Mach Operating System project at Carnegie-Mellon University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)vm_param.h	8.2 (Berkeley) 1/9/95
 *
 *
 * Copyright (c) 1987, 1990 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Authors: Avadis Tevanian, Jr., Michael Wayne Young
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 *	Machine independent virtual memory parameters.
 */

#ifndef	_VM_PARAM_
#define	_VM_PARAM_

#include <machine/vmparam.h>

/*
 * This belongs in types.h, but breaks too many existing programs.
 */
typedef	int	boolean_t;
#ifndef TRUE
#define	TRUE	1
#endif
#ifndef FALSE
#define	FALSE	0
#endif

/*
 *	The machine independent pages are refered to as PAGES.  A page
 *	is some number of hardware pages, depending on the target machine.
 */
#define	DEFAULT_PAGE_SIZE	4096

#ifdef _KERNEL
/*
 *	All references to the size of a page should be done with PAGE_SIZE
 *	or PAGE_SHIFT.
 *	We allow them to be constants in MD code, but when necessary
 *      (especially in LKMs) they will still be variables.
 */
#if !defined(PAGE_SIZE) || defined(_LKM)
/*
 * We undef those here to avoid problmes with LKMs.
 */
#undef PAGE_SIZE
#undef PAGE_MASK
#undef PAGE_SHIFT
#define	PAGE_SIZE	uvmexp.pagesize		/* size of page */
#define	PAGE_MASK	uvmexp.pagemask		/* size of page - 1 */
#define	PAGE_SHIFT	uvmexp.pageshift	/* bits to shift for pages */
#endif /* !PAGE_SIZE */
#endif /* _KERNEL */

/*
 * CTL_VM identifiers
 */
#define	VM_METER	1		/* struct vmmeter */
#define	VM_LOADAVG	2		/* struct loadavg */
#define	VM_PSSTRINGS	3		/* PSSTRINGS */
#define VM_UVMEXP	4		/* struct uvmexp */
#define VM_SWAPENCRYPT	5		/* int */
#define VM_NKMEMPAGES	6		/* int - # kmem_map pages */
#define	VM_MAXID	7		/* number of valid vm ids */

#define	CTL_VM_NAMES { \
	{ 0, 0 }, \
	{ "vmmeter", CTLTYPE_STRUCT }, \
	{ "loadavg", CTLTYPE_STRUCT }, \
	{ "psstrings", CTLTYPE_STRUCT }, \
	{ "uvmexp", CTLTYPE_STRUCT }, \
	{ "swapencrypt", CTLTYPE_NODE }, \
	{ "nkmempages", CTLTYPE_INT }, \
}

struct _ps_strings {
	void	*val;
};

#define SWAPSKIPBYTES	8192	/* never use at the start of a swap space */

/* 
 *	Return values from the VM routines.
 */
#define	KERN_SUCCESS		0
#define	KERN_INVALID_ADDRESS	1
#define	KERN_PROTECTION_FAILURE	2
#define	KERN_NO_SPACE		3
#define	KERN_INVALID_ARGUMENT	4
#define	KERN_FAILURE		5
#define	KERN_RESOURCE_SHORTAGE	6
#define	KERN_NOT_RECEIVER	7
#define	KERN_NO_ACCESS		8
#define	KERN_PAGES_LOCKED	9

#ifndef ASSEMBLER
/*
 *	Convert addresses to pages and vice versa.
 *	No rounding is used.
 */
#ifdef _KERNEL
#define	atop(x)		(((unsigned long)(x)) >> PAGE_SHIFT)
#define	ptoa(x)		((vaddr_t)((x) << PAGE_SHIFT))

/*
 * Round off or truncate to the nearest page.  These will work
 * for either addresses or counts (i.e., 1 byte rounds to 1 page).
 */
#define	round_page(x) (((x) + PAGE_MASK) & ~PAGE_MASK)
#define	trunc_page(x) ((x) & ~PAGE_MASK)
#else
/* out-of-kernel versions of round_page and trunc_page */
#define	round_page(x) \
	((((vaddr_t)(x) + (vm_page_size - 1)) / vm_page_size) * \
	    vm_page_size)
#define	trunc_page(x) \
	((((vaddr_t)(x)) / vm_page_size) * vm_page_size)

#endif /* _KERNEL */
#endif /* ASSEMBLER */
#endif /* _VM_PARAM_ */
@


1.25
log
@Various random fixes from NetBSD.
Including support for zeroing pages in the idle loop (not enabled yet).
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.24 2001/08/06 14:03:05 art Exp $	*/
@


1.24
log
@Add a new type voff_t (right now it's typedefed as off_t) used for offsets
into objects.

Gives the possibilty to mmap beyond the size of vaddr_t.

From NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.23 2001/08/02 11:06:38 art Exp $	*/
d168 2
a169 5
#define	round_page(x) \
	(((x) + PAGE_MASK) & ~PAGE_MASK)
#define	trunc_page(x) \
	((x) & ~PAGE_MASK)

@


1.23
log
@Sysctl for finding out how many pages there are in kmem_map.
@
text
@d1 2
a2 2
/*	$OpenBSD: vm_param.h,v 1.22 2001/06/27 04:52:40 art Exp $	*/
/*	$NetBSD: vm_param.h,v 1.12 1995/03/26 20:39:16 jtc Exp $	*/
@


1.22
log
@Remove junk from headers, just leave enough for UVM.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.21 2001/05/05 21:26:47 art Exp $	*/
d122 2
a123 1
#define	VM_MAXID	6		/* number of valid vm ids */
d132 1
@


1.21
log
@Remove the (vaddr_t) casts inside the round_page and trunc_page macros.
We might want to use them on types that are bigger than vaddr_t.

Fix all callers that pass pointers without casts.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.20 2000/06/14 16:51:55 provos Exp $	*/
a107 1
#if defined(UVM)
a110 5
#else
#define	PAGE_SIZE	cnt.v_page_size		/* size of page */
#define	PAGE_MASK	page_mask		/* size of page - 1 */
#define	PAGE_SHIFT	page_shift		/* bits to shift for pages */
#endif /* UVM */
a113 5
#if defined(_KERNEL) && !defined(UVM)
extern vsize_t		page_mask;
extern int		page_shift;
#endif

a119 12
#if !defined(UVM)
#define	VM_MAXID	4		/* number of valid vm ids */

#define	CTL_VM_NAMES { \
	{ 0, 0 }, \
	{ "vmmeter", CTLTYPE_STRUCT }, \
	{ "loadavg", CTLTYPE_STRUCT }, \
	{ "psstrings", CTLTYPE_STRUCT }, \
}

#else

a131 1
#endif
a169 4
#if !defined(UVM)
#define	num_pages(x) \
	((vaddr_t)((((vaddr_t)(x)) + PAGE_MASK) >> PAGE_SHIFT))
#endif
@


1.20
log
@put in own ctl level for swapencrypt.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.19 2000/03/15 14:17:48 art Exp $	*/
d191 1
a191 1
	((vaddr_t)((((vaddr_t)(x)) + PAGE_MASK) & ~PAGE_MASK))
d193 2
a194 1
	((vaddr_t)(((vaddr_t)(x)) & ~PAGE_MASK))
d197 1
@


1.19
log
@Don't allow the PAGE_SIZE macros to be exported to userland.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.18 1999/12/30 18:21:56 provos Exp $	*/
d153 1
a153 1
	{ "swapencrypt", CTLTYPE_INT }, \
a154 1

a155 1

@


1.18
log
@swap encryption for UVM, option UVM_SWAP_ENCRYPT.  needs to be enabled
via sysctl.
Pages are encrypted with the Blowfish encryption algorithm, the key
is initialized randomly on first swap out, ensuring that entropy has
accumulated in the kernel randomness pool.  Eventually, swap encryption
will be decided on a process by process basis, e.g. a process that reads from
a cryptographic filesystem will enable swap encrypt for its pages. okay
art@@ and deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.17 1999/11/25 08:44:07 art Exp $	*/
d94 1
d116 1
a116 1
#endif
d118 1
@


1.18.2.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a93 1
#ifdef _KERNEL
d115 1
a115 1
#endif /* UVM */
a116 1
#endif /* _KERNEL */
@


1.18.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.20 2000/06/14 16:51:55 provos Exp $	*/
d153 1
a153 1
	{ "swapencrypt", CTLTYPE_NODE }, \
d155 1
d157 1
@


1.18.2.3
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.18.2.2 2001/05/14 22:47:50 niklas Exp $	*/
d108 1
d112 5
d120 5
d131 12
d155 1
d191 1
a191 1
	(((x) + PAGE_MASK) & ~PAGE_MASK)
d193 3
a195 1
	((x) & ~PAGE_MASK)
@


1.18.2.4
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: vm_param.h,v 1.25 2000/03/26 20:42:45 kleink Exp $	*/
d122 1
a122 2
#define VM_NKMEMPAGES	6		/* int - # kmem_map pages */
#define	VM_MAXID	7		/* number of valid vm ids */
a130 1
	{ "nkmempages", CTLTYPE_INT }, \
d166 5
a170 2
#define	round_page(x) (((x) + PAGE_MASK) & ~PAGE_MASK)
#define	trunc_page(x) ((x) & ~PAGE_MASK)
@


1.18.2.5
log
@merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.18.2.4 2001/10/31 03:32:14 nate Exp $	*/
@


1.17
log
@Update comments to reflect reality.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.16 1999/11/25 08:41:36 art Exp $	*/
d142 2
a143 1
#define	VM_MAXID	5		/* number of valid vm ids */
d151 1
@


1.16
log
@Allow MD code to define PAGE_SIZE to a constant.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.15 1999/08/23 07:57:17 art Exp $	*/
d96 3
a98 2
 *	or PAGE_SHIFT.  The fact they are variables is hidden here so that
 *	we can easily make them constant if we so desire.
d101 3
@


1.15
log
@vm_offset_t -> {v,p}addr_t, vm_size_t -> {v,p}size_t
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.14 1998/03/01 00:38:25 niklas Exp $	*/
d99 4
d112 1
@


1.14
log
@Merge of MACHINE_NEW_CONTIG (aka MNN) code from Chuck Cranor,
<chuck@@openbsd.org>. This code is as of yet disabled on all platforms,
actually not yet supported on more than mvme68k, although other
platforms are expected soon, as code is already available.
This code makes handling of multiple physical memory regions
consistent over all platforms, as well as keeping the performance of
maintaining a single continuous memory chunk.  It is also a
requirement for the upcoming UVM replacement VM system.

What I did in this merge: just declared the pmap_map function in a
MD include file per port that needs it.  It's not an exported pmap
interface, says Chuck.  It ended up in differnt include files on
differnet ports, as I tried to follow the current policy on a per-arch
basis.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.13 1997/12/12 08:46:00 deraadt Exp $	*/
d110 1
a110 1
extern vm_size_t	page_mask;
d173 1
a173 1
#define	ptoa(x)		((vm_offset_t)((x) << PAGE_SHIFT))
d180 1
a180 1
	((vm_offset_t)((((vm_offset_t)(x)) + PAGE_MASK) & ~PAGE_MASK))
d182 1
a182 1
	((vm_offset_t)(((vm_offset_t)(x)) & ~PAGE_MASK))
d184 1
a184 5
	((vm_offset_t)((((vm_offset_t)(x)) + PAGE_MASK) >> PAGE_SHIFT))

extern vm_size_t	mem_size;	/* size of physical memory (bytes) */
extern vm_offset_t	first_addr;	/* first physical page */
extern vm_offset_t	last_addr;	/* last physical page */
d189 1
a189 1
	((((vm_offset_t)(x) + (vm_page_size - 1)) / vm_page_size) * \
d192 1
a192 1
	((((vm_offset_t)(x)) / vm_page_size) * vm_page_size)
@


1.13
log
@careful about redefining TRUE and FALSE
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.12 1997/11/13 18:35:39 deraadt Exp $	*/
d99 5
d107 3
a109 1
#ifdef _KERNEL
d120 1
d129 16
@


1.12
log
@make msync() have 3 args
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.11 1997/11/06 05:59:38 csapuntz Exp $	*/
d81 1
d83 2
d86 1
@


1.11
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.10 1997/10/06 20:21:28 deraadt Exp $	*/
d136 1
@


1.10
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.8 1997/04/10 13:48:50 deraadt Exp $	*/
d39 1
a39 1
 *	@@(#)vm_param.h	8.1 (Berkeley) 6/11/93
@


1.9
log
@VFS Lite2 Changes
@
text
@d39 1
a39 1
 *	@@(#)vm_param.h	8.2 (Berkeley) 1/9/95
@


1.8
log
@always skip the first 8K of swap. Yes, 8K, not some manufactured number that ends up being 4K
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.6 1996/05/28 12:16:32 deraadt Exp $	*/
d39 1
a39 1
 *	@@(#)vm_param.h	8.1 (Berkeley) 6/11/93
@


1.7
log
@sysctl to locate psstrings
@
text
@d122 2
@


1.6
log
@thread changes
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.5 1996/03/24 18:07:59 tholo Exp $	*/
d108 2
a109 1
#define	VM_MAXID	3		/* number of valid vm ids */
d115 1
d117 4
@


1.5
log
@Move thread prototypes back to <sys/proc.h>
Duplicate boolean_t definition in <sys/types.h>, protected by _KERNEL
Only use boolean_t definition in <vm/vm_param.h> when not _KERNEL
Mark latter two with XXX
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.4 1996/03/24 17:40:46 tholo Exp $	*/
a76 1
#ifndef _KERNEL	/* XXX */
a82 1
#endif
@


1.4
log
@Move thread prototypes to <vm/vm_param.h> for consistency   XXX
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_param.h,v 1.3 1996/03/23 19:13:13 tholo Exp $	*/
d77 1
d84 1
a84 6

#define	current_thread()	(curproc->p_thread)
void	assert_wait __P((event_t, boolean_t));
void	thread_block __P((void));
void	thread_sleep __P((event_t, struct slock *, boolean_t));
void	thread_wakeup __P((event_t));
@


1.3
log
@Moved boolean_t back to vm_param.h; not protected by _KERNEL.  It needs to
be available to userland (libc, libkvm, others), but will break software if
defined in <sys/types.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d83 6
@


1.2
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@d1 1
d76 7
@


1.1
log
@Initial revision
@
text
@a76 7
 * This belongs in types.h, but breaks too many existing programs.
 */
typedef int	boolean_t;
#define	TRUE	1
#define	FALSE	0

/*
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

