head	1.12;
access;
symbols
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	UBC_SYNC_A:1.12
	UBC_SYNC_B:1.12
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.8
	OPENBSD_2_8:1.10.0.6
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.4
	OPENBSD_2_7_BASE:1.10
	SMP:1.10.0.2
	SMP_BASE:1.10
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.8
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.6
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.4
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2001.07.26.19.33.15;	author art;	state dead;
branches;
next	1.11;

1.11
date	2001.06.27.04.52.40;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.27.18.52.42;	author art;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	98.03.01.00.38.17;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	97.11.06.05.59.36;	author csapuntz;	state Exp;
branches;
next	1.7;

1.7
date	97.10.06.20.21.24;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.10.06.15.28.56;	author csapuntz;	state Exp;
branches;
next	1.5;

1.5
date	97.04.17.01.25.21;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.12.24.20.14.32;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.08.02.00.06.02;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.07.23.23.54.26;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.38;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.38;	author deraadt;	state Exp;
branches;
next	;

1.10.2.1
date	2001.07.04.11.01.23;	author niklas;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2001.10.31.03.32.14;	author nate;	state dead;
branches;
next	;


desc
@@


1.12
log
@No longer used.
@
text
@/*	$OpenBSD: vm_object.h,v 1.11 2001/06/27 04:52:40 art Exp $	*/
/*	$NetBSD: vm_object.h,v 1.16 1995/03/29 22:10:28 briggs Exp $	*/

/* 
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * The Mach Operating System project at Carnegie-Mellon University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)vm_object.h	8.4 (Berkeley) 1/9/95
 *
 *
 * Copyright (c) 1987, 1990 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Authors: Avadis Tevanian, Jr., Michael Wayne Young
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 *	Virtual memory object module definitions.
 */

#ifndef	_VM_OBJECT_
#define	_VM_OBJECT_

#include <vm/vm_page.h>
#include <vm/vm_pager.h>

#endif /* _VM_OBJECT_ */
@


1.11
log
@Remove junk from headers, just leave enough for UVM.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_object.h,v 1.10 2000/01/27 18:52:42 art Exp $	*/
@


1.10
log
@No prototypes and variables from this file are used in UVM. (ifdef)
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_object.h,v 1.9 1998/03/01 00:38:17 niklas Exp $	*/
a77 155
#if !defined(UVM)
/*
 *	Types defined:
 *
 *	vm_object_t		Virtual memory object.
 */

struct vm_object {
	struct pglist		memq;		/* Resident memory */
	TAILQ_ENTRY(vm_object)	object_list;	/* list of all objects */
	u_short			flags;		/* see below */
	u_short			paging_in_progress; /* Paging (in or out) so
						    don't collapse or destroy */
	simple_lock_data_t	Lock;		/* Synchronization */
	int			ref_count;	/* How many refs?? */
	vm_size_t		size;		/* Object size */
	int			resident_page_count;
						/* number of resident pages */
	struct vm_object	*copy;		/* Object that holds copies of
						   my changed pages */
	vm_pager_t		pager;		/* Where to get data */
	vm_offset_t		paging_offset;	/* Offset into paging space */
	struct vm_object	*shadow;	/* My shadow */
	vm_offset_t		shadow_offset;	/* Offset in shadow */
	TAILQ_ENTRY(vm_object)	cached_list;	/* for persistence */
	LIST_HEAD(, vm_object)	shadowers;	/* set of shadowers */
	LIST_ENTRY(vm_object)	shadowers_list;	/* link to next shadower of
						   this object's shadow */
};

/*
 * Flags
 */
#define OBJ_CANPERSIST	0x0001	/* allow to persist */
#define OBJ_INTERNAL	0x0002	/* internally created object */
#define OBJ_ACTIVE	0x0004	/* used to mark active objects */
#define OBJ_FADING	0x0008	/* tell others that the object is going away */
#define OBJ_WAITING	0x8000	/* someone is waiting for paging to finish */

TAILQ_HEAD(vm_object_hash_head, vm_object_hash_entry);

struct vm_object_hash_entry {
	TAILQ_ENTRY(vm_object_hash_entry)  hash_links;	/* hash chain links */
	vm_object_t			   object;	/* object represented */
};

typedef struct vm_object_hash_entry	*vm_object_hash_entry_t;

#ifdef	_KERNEL
TAILQ_HEAD(object_q, vm_object);

struct object_q	vm_object_cached_list;	/* list of objects persisting */
int		vm_object_cached;	/* size of cached list */
simple_lock_data_t	vm_cache_lock;	/* lock for object cache */

struct object_q	vm_object_list;		/* list of allocated objects */
long		vm_object_count;	/* count of all objects */
simple_lock_data_t	vm_object_list_lock;
					/* lock for object list and count */

vm_object_t	kernel_object;		/* the single kernel object */
vm_object_t	kmem_object;

#define	vm_object_cache_lock()		simple_lock(&vm_cache_lock)
#define	vm_object_cache_unlock()	simple_unlock(&vm_cache_lock)
#endif /* _KERNEL */

#define	vm_object_lock_init(object)	simple_lock_init(&(object)->Lock)
#define	vm_object_lock(object)		simple_lock(&(object)->Lock)
#define	vm_object_unlock(object)	simple_unlock(&(object)->Lock)
#define	vm_object_lock_try(object)	simple_lock_try(&(object)->Lock)

#define	vm_object_sleep(event, object, interruptible, where) \
	do {								\
		(object)->flags |= OBJ_WAITING;				\
		thread_sleep_msg((event), &(object)->Lock,		\
		    (interruptible), (where), 0);			\
	} while (0)

#define	vm_object_wakeup(object) \
	do {								\
		if ((object)->flags & OBJ_WAITING) {			\
			(object)->flags &= ~OBJ_WAITING;		\
			thread_wakeup((object));			\
		}							\
	} while (0)

#define	vm_object_paging(object) \
	((object)->paging_in_progress != 0)

#ifndef DIAGNOSTIC
#define	vm_object_paging_begin(object) \
	do {								\
		(object)->paging_in_progress++;				\
	} while (0)
#else
#define	vm_object_paging_begin(object) \
	do {								\
		if ((object)->paging_in_progress == 0xdead)		\
			panic("vm_object_paging_begin");		\
		(object)->paging_in_progress++;				\
	} while (0)
#endif

#define	vm_object_paging_end(object) \
	do {								\
		if (--((object)->paging_in_progress) == 0)		\
			vm_object_wakeup((object));			\
	} while (0)

#define	vm_object_paging_wait(object,msg) \
	do {								\
		while (vm_object_paging((object))) {			\
			vm_object_sleep((object), (object), FALSE,	\
			    (msg));					\
			vm_object_lock((object));			\
		}							\
	} while (0)

#ifdef _KERNEL
vm_object_t	 vm_object_allocate __P((vm_size_t));
void		 vm_object_cache_clear __P((void));
void		 vm_object_cache_trim __P((void));
boolean_t	 vm_object_coalesce __P((vm_object_t, vm_object_t,
		    vm_offset_t, vm_offset_t, vm_offset_t, vm_size_t));
void		 vm_object_collapse __P((vm_object_t));
void		 vm_object_copy __P((vm_object_t, vm_offset_t, vm_size_t,
		    vm_object_t *, vm_offset_t *, boolean_t *));
void		 vm_object_deactivate_pages __P((vm_object_t));
void		 vm_object_deallocate __P((vm_object_t));
void		 vm_object_enter __P((vm_object_t, vm_pager_t));
void		 vm_object_init __P((vm_size_t));
vm_object_t	 vm_object_lookup __P((vm_pager_t));
boolean_t	 vm_object_page_clean __P((vm_object_t,
		    vm_offset_t, vm_offset_t, boolean_t, boolean_t));
void		 vm_object_page_remove __P((vm_object_t,
		    vm_offset_t, vm_offset_t));
void		 vm_object_pmap_copy __P((vm_object_t,
		    vm_offset_t, vm_offset_t));
void		 vm_object_pmap_remove __P((vm_object_t,
		    vm_offset_t, vm_offset_t));
void		 vm_object_prefer __P((vm_object_t,
		    vm_offset_t, vm_offset_t *));
void		 vm_object_print __P((vm_object_t, boolean_t));
void		 _vm_object_print __P((vm_object_t, boolean_t,
		    int (*)(const char *, ...)));
void		 vm_object_reference __P((vm_object_t));
void		 vm_object_remove __P((vm_pager_t));
void		 vm_object_setpager __P((vm_object_t,
		    vm_pager_t, vm_offset_t, boolean_t));
void		 vm_object_shadow __P((vm_object_t *,
		    vm_offset_t *, vm_size_t));
void		 vm_object_terminate __P((vm_object_t));
#endif
#endif /* UVM */
@


1.10.2.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_object.h,v 1.10 2000/01/27 18:52:42 art Exp $	*/
d78 155
@


1.10.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_object.h,v 1.10.2.1 2001/07/04 11:01:23 niklas Exp $	*/
@


1.9
log
@Merge of MACHINE_NEW_CONTIG (aka MNN) code from Chuck Cranor,
<chuck@@openbsd.org>. This code is as of yet disabled on all platforms,
actually not yet supported on more than mvme68k, although other
platforms are expected soon, as code is already available.
This code makes handling of multiple physical memory regions
consistent over all platforms, as well as keeping the performance of
maintaining a single continuous memory chunk.  It is also a
requirement for the upcoming UVM replacement VM system.

What I did in this merge: just declared the pmap_map function in a
MD include file per port that needs it.  It's not an exported pmap
interface, says Chuck.  It ended up in differnt include files on
differnet ports, as I tried to follow the current policy on a per-arch
basis.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_object.h,v 1.8 1997/11/06 05:59:36 csapuntz Exp $	*/
d78 1
d232 1
@


1.8
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_object.h,v 1.7 1997/10/06 20:21:24 deraadt Exp $	*/
d153 1
a153 1
		    (interruptible), (where));				\
d187 1
a187 1
#define	vm_object_paging_wait(object) \
d191 1
a191 1
			    "vospgw");					\
@


1.7
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_object.h,v 1.5 1997/04/17 01:25:21 niklas Exp $	*/
d39 1
a39 1
 *	@@(#)vm_object.h	8.3 (Berkeley) 1/12/94
@


1.6
log
@VFS Lite2 Changes
@
text
@d39 1
a39 1
 *	@@(#)vm_object.h	8.4 (Berkeley) 1/9/95
@


1.5
log
@Removal of race conditions.  Inspired by Charles Hannum's
<mycroft@@netbsd.org> reorganization of the vm_collapse logic, although not
used verbatim.  We no longer collapse objects from the pagedaemon as that
is not necessary anymore with the more aggressive collapses that gets done.
This also increases performance of loaded systems.  Much KNF too.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_object.h,v 1.4 1996/12/24 20:14:32 niklas Exp $	*/
d39 1
a39 1
 *	@@(#)vm_object.h	8.3 (Berkeley) 1/12/94
@


1.4
log
@Make termination of objects wait for possible collapses before altering
the object's shadow linkage.  Also note that the object is going to die
so that a possible collapse can finish early.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_object.h,v 1.3 1996/08/02 00:06:02 niklas Exp $	*/
d114 1
d148 47
a194 2
#define	vm_object_sleep(event, object, interruptible) \
			thread_sleep((event), &(object)->Lock, (interruptible))
@


1.3
log
@Fix long-standing swap-leak. Add OpenBSD tags. Optimize thread_wakeup.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_object.h,v 1.16 1995/03/29 22:10:28 briggs Exp $	*/
d113 1
@


1.2
log
@make printf/addlog return 0, for compat to userland
@
text
@d1 1
d102 3
d106 1
@


1.1
log
@Initial revision
@
text
@d170 1
a170 1
		    void (*)(const char *, ...)));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

