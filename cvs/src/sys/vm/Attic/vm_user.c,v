head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	UBC_SYNC_B:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.22
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2001.06.27.04.53.32;	author art;	state dead;
branches;
next	1.3;

1.3
date	96.04.19.16.10.52;	author niklas;	state Exp;
branches
	1.3.16.1;
next	1.2;

1.2
date	95.12.14.05.16.10;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.38;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.38;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2001.07.04.11.01.30;	author niklas;	state dead;
branches;
next	;


desc
@@


1.4
log
@Die!
@
text
@/*	$OpenBSD: vm_user.c,v 1.3 1996/04/19 16:10:52 niklas Exp $	*/
/*	$NetBSD: vm_user.c,v 1.13 1996/02/28 22:39:16 gwr Exp $	*/

/* 
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * The Mach Operating System project at Carnegie-Mellon University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)vm_user.c	8.2 (Berkeley) 1/12/94
 *
 *
 * Copyright (c) 1987, 1990 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Authors: Avadis Tevanian, Jr., Michael Wayne Young
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 *	User-exported virtual memory functions.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>

#include <vm/vm.h>

simple_lock_data_t	vm_alloc_lock;	/* XXX */

#ifdef MACHVMCOMPAT
/*
 * BSD style syscall interfaces to MACH calls
 * All return MACH return values.
 */
struct svm_allocate_args {
	vm_map_t map;
	vm_offset_t *addr;
	vm_size_t size;
	boolean_t anywhere;
};
/* ARGSUSED */
int
svm_allocate(p, uap, retval)
	struct proc *p;
	struct svm_allocate_args *uap;
	register_t *retval;
{
	vm_offset_t addr;
	int rv;

	SCARG(uap, map) = p->p_map;		/* XXX */

	if (copyin((caddr_t)SCARG(uap, addr), (caddr_t)&addr, sizeof (addr)))
		rv = KERN_INVALID_ARGUMENT;
	else
		rv = vm_allocate(SCARG(uap, map), &addr, SCARG(uap, size),
		    SCARG(uap, anywhere));
	if (rv == KERN_SUCCESS) {
		if (copyout((caddr_t)&addr, (caddr_t)SCARG(uap, addr),
		    sizeof(addr)))
			rv = KERN_INVALID_ARGUMENT;
	}
	return((int)rv);
}

struct svm_deallocate_args {
	vm_map_t map;
	vm_offset_t addr;
	vm_size_t size;
};
/* ARGSUSED */
int
svm_deallocate(p, uap, retval)
	struct proc *p;
	struct svm_deallocate_args *uap;
	register_t *retval;
{
	int rv;

	SCARG(uap, map) = p->p_map;		/* XXX */
	rv = vm_deallocate(SCARG(uap, map), SCARG(uap, addr), SCARG(uap, size));
	return((int)rv);
}

struct svm_inherit_args {
	vm_map_t map;
	vm_offset_t addr;
	vm_size_t size;
	vm_inherit_t inherit;
};
/* ARGSUSED */
int
svm_inherit(p, uap, retval)
	struct proc *p;
	struct svm_inherit_args *uap;
	register_t *retval;
{
	int rv;

	SCARG(uap, map) = p->p_map;		/* XXX */
	rv = vm_inherit(SCARG(uap, map), SCARG(uap, addr), SCARG(uap, size),
	    SCARG(uap, inherit));
	return((int)rv);
}

struct svm_protect_args {
	vm_map_t map;
	vm_offset_t addr;
	vm_size_t size;
	boolean_t setmax;
	vm_prot_t prot;
};
/* ARGSUSED */
int
svm_protect(p, uap, retval)
	struct proc *p;
	struct svm_protect_args *uap;
	register_t *retval;
{
	int rv;

	SCARG(uap, map) = p->p_map;		/* XXX */
	rv = vm_protect(SCARG(uap, map), SCARG(uap, addr), SCARG(uap, size),
	    SCARG(uap, setmax), SCARG(uap, prot));
	return((int)rv);
}

/*
 *	vm_inherit sets the inheritence of the specified range in the
 *	specified map.
 */
int
vm_inherit(map, start, size, new_inheritance)
	register vm_map_t	map;
	vm_offset_t		start;
	vm_size_t		size;
	vm_inherit_t		new_inheritance;
{
	if (map == NULL)
		return(KERN_INVALID_ARGUMENT);

	return(vm_map_inherit(map, trunc_page(start), round_page(start+size), new_inheritance));
}

/*
 *	vm_protect sets the protection of the specified range in the
 *	specified map.
 */

int
vm_protect(map, start, size, set_maximum, new_protection)
	register vm_map_t	map;
	vm_offset_t		start;
	vm_size_t		size;
	boolean_t		set_maximum;
	vm_prot_t		new_protection;
{
	if (map == NULL)
		return(KERN_INVALID_ARGUMENT);

	return(vm_map_protect(map, trunc_page(start), round_page(start+size), new_protection, set_maximum));
}
#endif

/*
 *	vm_allocate allocates "zero fill" memory in the specfied
 *	map.
 */
int
vm_allocate(map, addr, size, anywhere)
	register vm_map_t	map;
	register vm_offset_t	*addr;
	register vm_size_t	size;
	boolean_t		anywhere;
{
	int	result;

	if (map == NULL)
		return(KERN_INVALID_ARGUMENT);
	if (size == 0) {
		*addr = 0;
		return(KERN_SUCCESS);
	}

	if (anywhere)
		*addr = vm_map_min(map);
	else
		*addr = trunc_page(*addr);
	size = round_page(size);

	result = vm_map_find(map, NULL, (vm_offset_t) 0, addr, size, anywhere);

	return(result);
}

/*
 *	vm_deallocate deallocates the specified range of addresses in the
 *	specified address map.
 */
int
vm_deallocate(map, start, size)
	register vm_map_t	map;
	vm_offset_t		start;
	vm_size_t		size;
{
	if (map == NULL)
		return(KERN_INVALID_ARGUMENT);

	if (size == (vm_offset_t) 0)
		return(KERN_SUCCESS);

	return(vm_map_remove(map, trunc_page(start), round_page(start+size)));
}

/*
 * Similar to vm_allocate but assigns an explicit pager.
 */
int
vm_allocate_with_pager(map, addr, size, anywhere, pager, poffset, internal)
	register vm_map_t	map;
	register vm_offset_t	*addr;
	register vm_size_t	size;
	boolean_t		anywhere;
	vm_pager_t		pager;
	vm_offset_t		poffset;
	boolean_t		internal;
{
	register vm_object_t	object;
	register int		result;
	vm_offset_t		start;

	if (map == NULL)
		return(KERN_INVALID_ARGUMENT);

	*addr = trunc_page(*addr);
	size = round_page(size);

	/*
	 *	Lookup the pager/paging-space in the object cache.
	 *	If it's not there, then create a new object and cache
	 *	it.
	 */
	object = vm_object_lookup(pager);
	cnt.v_lookups++;
	if (object == NULL) {
		object = vm_object_allocate(size);
		/*
		 * From Mike Hibler: "unnamed anonymous objects should never
		 * be on the hash list ... For now you can just change
		 * vm_allocate_with_pager to not do vm_object_enter if this
		 * is an internal object ..."
		 */
		if (!internal)
			vm_object_enter(object, pager);
	} else
		cnt.v_hits++;
	if (internal)
		object->flags |= OBJ_INTERNAL;
	else {
		object->flags &= ~OBJ_INTERNAL;
		cnt.v_nzfod -= atop(size);
	}

	start = *addr;
	vm_map_lock(map);
	if (anywhere) {
	again:
		if (vm_map_findspace(map, start, size, addr))
			result = KERN_NO_SPACE;
		else {
#ifdef	PMAP_PREFER
			PMAP_PREFER(poffset, addr);
#endif
			start = *addr;
			result = vm_map_insert(map, object, poffset,
					       start, start + size);
			if (result == KERN_NO_SPACE)
				goto again;
		}
	} else
		result = vm_map_insert(map, object, poffset,
				       start, start + size);
	vm_map_unlock(map);

	if (result != KERN_SUCCESS)
		vm_object_deallocate(object);
	else if (pager != NULL)
		vm_object_setpager(object, pager, (vm_offset_t) 0, TRUE);
	return(result);
}
@


1.3
log
@NetBSD 960317 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.3.16.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: vm_user.c,v 1.3 1996/04/19 16:10:52 niklas Exp $	*/
@


1.2
log
@from netbsd:
Extend use of vm_object_prefer() to vm_allocate_with_pager().
Make vm_object_prefer() call MD aligner for "pageless" objects too,
so we can have more control over the virtual address to be used.

Implementation could be simpler if we by-pass the object to mapped, but
we'd loose the ability to adapt alignment to objects that were previously
mmap'ed with MAP_FIXED on.

Only expect vm_fork() to return if __FORK_BRAINDAMAGE is defined.
Eliminate unused third arg to vm_fork().
@
text
@d1 2
a2 1
/*	$NetBSD: vm_user.c,v 1.12 1995/12/05 22:54:39 pk Exp $	*/
d321 3
a323 1
			vm_object_prefer(object, poffset, addr);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: vm_user.c,v 1.11 1994/10/20 04:27:34 cgd Exp $	*/
d279 1
d313 19
a331 1
	result = vm_map_find(map, object, poffset, addr, size, anywhere);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
