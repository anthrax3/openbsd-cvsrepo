head	1.24;
access;
symbols
	SMP_SYNC_A:1.24
	SMP_SYNC_B:1.24
	UBC_SYNC_A:1.24
	UBC_SYNC_B:1.24
	OPENBSD_3_0:1.22.0.2
	OPENBSD_3_0_BASE:1.22
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_9:1.15.0.2
	OPENBSD_2_8:1.13.0.4
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	SMP:1.12.0.2
	SMP_BASE:1.12
	kame_19991208:1.11
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2001.11.06.19.53.43;	author miod;	state dead;
branches;
next	1.23;

1.23
date	2001.11.06.01.35.04;	author art;	state Exp;
branches;
next	1.22;

1.22
date	2001.08.18.20.50.18;	author art;	state Exp;
branches;
next	1.21;

1.21
date	2001.07.31.13.30.17;	author art;	state Exp;
branches;
next	1.20;

1.20
date	2001.07.25.13.25.33;	author art;	state Exp;
branches;
next	1.19;

1.19
date	2001.07.18.10.47.05;	author art;	state Exp;
branches;
next	1.18;

1.18
date	2001.06.27.06.19.58;	author art;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.08.08.09.42;	author art;	state Exp;
branches;
next	1.16;

1.16
date	2001.05.09.15.31.22;	author art;	state Exp;
branches;
next	1.15;

1.15
date	2001.03.26.08.36.20;	author art;	state Exp;
branches;
next	1.14;

1.14
date	2001.03.22.23.36.52;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	2000.03.13.16.05.24;	author art;	state Exp;
branches;
next	1.12;

1.12
date	99.12.29.07.42.01;	author mickey;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	99.09.03.18.02.26;	author art;	state Exp;
branches;
next	1.10;

1.10
date	99.07.18.18.00.08;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	99.07.09.21.42.52;	author art;	state Exp;
branches;
next	1.8;

1.8
date	98.03.20.15.40.34;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	98.03.02.17.07.12;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	98.03.01.11.36.44;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	98.03.01.00.37.58;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.08.02.00.05.56;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.05.28.12.16.31;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.22.33.02;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.36;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.36;	author deraadt;	state Exp;
branches;
next	;

1.12.2.1
date	2000.03.24.09.09.53;	author niklas;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2001.05.14.22.47.49;	author niklas;	state Exp;
branches;
next	1.12.2.3;

1.12.2.3
date	2001.07.04.11.01.14;	author niklas;	state Exp;
branches;
next	1.12.2.4;

1.12.2.4
date	2001.10.31.03.32.14;	author nate;	state Exp;
branches;
next	1.12.2.5;

1.12.2.5
date	2001.11.13.23.02.31;	author niklas;	state dead;
branches;
next	;


desc
@@


1.24
log
@Begone.
@
text
@#include <uvm/uvm_pmap.h>
@


1.23
log
@Move the last content from vm/ to uvm/
The only thing left in vm/ are just dumb wrappers.
vm/vm.h includes uvm/uvm_extern.h
vm/pmap.h includes uvm/uvm_pmap.h
vm/vm_page.h includes uvm/uvm_page.h
@
text
@@


1.22
log
@Move pmap_{de,}activate to vm/pmap.h, it's same on all archs.
@
text
@d1 1
a1 166
/*	$OpenBSD: pmap.h,v 1.21 2001/07/31 13:30:17 art Exp $	*/
/*	$NetBSD: pmap.h,v 1.36 1999/11/13 00:24:39 thorpej Exp $	*/

/* 
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * The Mach Operating System project at Carnegie-Mellon University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)pmap.h	8.1 (Berkeley) 6/11/93
 *
 *
 * Copyright (c) 1987, 1990 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Avadis Tevanian, Jr.
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 *	Machine address mapping definitions -- machine-independent
 *	section.  [For machine-dependent section, see "machine/pmap.h".]
 */

#ifndef	_PMAP_VM_
#define	_PMAP_VM_

/*
 * Each machine dependent implementation is expected to
 * keep certain statistics.  They may do this anyway they
 * so choose, but are expected to return the statistics
 * in the following structure.
 */
struct pmap_statistics {
	long		resident_count;	/* # of pages mapped (total)*/
	long		wired_count;	/* # of pages wired */
};
typedef struct pmap_statistics	*pmap_statistics_t;

#include <machine/pmap.h>

/*
 * Flags passed to pmap_enter().  Note the bottom 3 bits are VM_PROT_*
 * bits, used to indicate the access type that was made (to seed modified
 * and referenced information).
 */
#define	PMAP_WIRED	0x00000010	/* wired mapping */
#define	PMAP_CANFAIL	0x00000020	/* can fail if resource shortage */

#ifndef PMAP_EXCLUDE_DECLS	/* Used in Sparc port to virtualize pmap mod */
#ifdef _KERNEL
__BEGIN_DECLS
void		*pmap_bootstrap_alloc __P((int));
#ifndef pmap_activate
void		pmap_activate __P((struct proc *));
#endif
#ifndef pmap_deactivate
void		pmap_deactivate __P((struct proc *));
#endif
void		pmap_unwire __P((pmap_t, vaddr_t));

#if !defined(pmap_clear_modify)
boolean_t	 pmap_clear_modify __P((struct vm_page *));
#endif
#if !defined(pmap_clear_reference)
boolean_t	 pmap_clear_reference __P((struct vm_page *));
#endif

void		 pmap_collect __P((pmap_t));
void		 pmap_copy __P((pmap_t, pmap_t, vaddr_t, vsize_t, vaddr_t));
void		 pmap_copy_page __P((paddr_t, paddr_t));
struct pmap 	 *pmap_create __P((void));
void		 pmap_destroy __P((pmap_t));
int		 pmap_enter __P((pmap_t, vaddr_t, paddr_t, vm_prot_t, int));
boolean_t	 pmap_extract __P((pmap_t, vaddr_t, paddr_t *));
#if defined(PMAP_GROWKERNEL)
vaddr_t		 pmap_growkernel __P((vaddr_t));
#endif

void		 pmap_init __P((void));

void		 pmap_kenter_pa __P((vaddr_t, paddr_t, vm_prot_t));
void		 pmap_kenter_pgs __P((vaddr_t, struct vm_page **, int));
void		 pmap_kremove __P((vaddr_t, vsize_t));
#if !defined(pmap_is_modified)
boolean_t	 pmap_is_modified __P((struct vm_page *));
#endif
#if !defined(pmap_is_referenced)
boolean_t	 pmap_is_referenced __P((struct vm_page *));
#endif
void		 pmap_page_protect __P((struct vm_page *, vm_prot_t));

#if !defined(pmap_phys_address)
paddr_t		 pmap_phys_address __P((int));
#endif
void		 pmap_pinit __P((pmap_t));
void		 pmap_protect __P((pmap_t,
		    vaddr_t, vaddr_t, vm_prot_t));
void		 pmap_reference __P((pmap_t));
void		 pmap_release __P((pmap_t));
void		 pmap_remove __P((pmap_t, vaddr_t, vaddr_t));
void		 pmap_update __P((void));
void		 pmap_zero_page __P((paddr_t));

#if defined(PMAP_STEAL_MEMORY)
vaddr_t		 pmap_steal_memory __P((vsize_t, vaddr_t *, vaddr_t *));
#else
void		 pmap_virtual_space __P((vaddr_t *, vaddr_t *));
#endif

#if defined(PMAP_FORK)
void		 pmap_fork __P((pmap_t, pmap_t));
#endif
__END_DECLS
#endif	/* kernel*/
#endif  /* PMAP_EXCLUDE_DECLS */

#endif /* _PMAP_VM_ */
@


1.21
log
@pmap_steal_memory takes to vaddr_t * as arguments, not paddr_t *.
For some strange (ehmm) reason, only the prototype was wrong. The implementations
were right.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.20 2001/07/25 13:25:33 art Exp $	*/
d102 7
a108 1
void		 pmap_unwire __P((pmap_t, vaddr_t));
@


1.20
log
@Change the pmap_enter interface to merge access_type and the wired boolean
and arbitrary flags into one argument.

One new flag is PMAP_CANFAIL that tells pmap_enter that it can fail if there
are not enough resources to satisfy the request. If this flag is not passed,
pmap_enter should panic as it should have done before this change (XXX - many
pmaps are still not doing that).

Only i386 and alpha implement CANFAIL for now.

Includes uvm updates from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.19 2001/07/18 10:47:05 art Exp $	*/
d148 1
a148 1
vaddr_t		 pmap_steal_memory __P((vsize_t, paddr_t *, paddr_t *));
@


1.19
log
@Get rid of the PMAP_NEW option by making it mandatory for all archs.
The archs that didn't have a proper PMAP_NEW now have a dummy implementation
with wrappers around the old functions.
@
text
@d1 2
a2 2
/*	$OpenBSD: pmap.h,v 1.18 2001/06/27 06:19:58 art Exp $	*/
/*	$NetBSD: pmap.h,v 1.16 1996/03/31 22:15:32 pk Exp $	*/
a115 2
#if defined(__i386__)
#ifdef notyet
a116 10
#else
int		 _pmap_enter __P((pmap_t, vaddr_t, paddr_t, vm_prot_t, int));
#define	 pmap_enter(pmap, va, pa, prot, wired, access_type) \
    (_pmap_enter((pmap), (va), (pa), (prot), ((wired) ? PMAP_WIRED : 0)))
#endif
#else
void		 pmap_enter __P((pmap_t,
		    vaddr_t, paddr_t, vm_prot_t, boolean_t, vm_prot_t));
#endif

@


1.18
log
@MNN is no longer an option.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.17 2001/06/08 08:09:42 art Exp $	*/
a90 21
 * PMAP_PGARG hack
 *
 * operations that take place on managed pages used to take PAs.
 * this caused us to translate the PA back to a page (or pv_head).
 * PMAP_NEW avoids this by passing the vm_page in (pv_head should be
 * pointed to by vm_page (or be a part of it)).
 *
 * applies to: pmap_page_protect, pmap_is_referenced, pmap_is_modified,
 * pmap_clear_reference, pmap_clear_modify.
 *
 * the latter two functions are boolean_t in PMAP_NEW.  they return
 * TRUE if something was cleared.
 */
#if defined(PMAP_NEW)
#define PMAP_PGARG(PG) (PG)
#else
#define PMAP_PGARG(PG) (VM_PAGE_TO_PHYS(PG))
#endif

#ifdef PMAP_NEW
/*
a96 1
#endif
a103 1
#if defined(PMAP_NEW)
a109 4
#else	/* PMAP_NEW */
void		 pmap_clear_modify __P((paddr_t pa));
void		 pmap_clear_reference __P((paddr_t pa));
#endif	/* PMAP_NEW */
a113 1
#if defined(PMAP_NEW)
a114 3
#else
pmap_t		 pmap_create __P((vsize_t));
#endif
d116 1
a116 1
#if defined(PMAP_NEW) && defined(__i386__)
d130 1
a130 1
#if defined(PMAP_NEW) && defined(PMAP_GROWKERNEL)
a135 1
#if defined(PMAP_NEW)
a144 6
#else	/* PMAP_NEW */
boolean_t	 pmap_is_modified __P((paddr_t pa));
boolean_t	 pmap_is_referenced __P((paddr_t pa));
#endif	/* PMAP_NEW */

#if defined(PMAP_NEW)
a145 3
#else
void		 pmap_page_protect __P((paddr_t, vm_prot_t));
#endif
@


1.17
log
@Change the paddr_t pmap_extract(struct pmap *, vaddr_t) interface to
boolean_t pmap_extract(struct pmap *, vaddr_t, paddr_t *).
Matches NetBSD. Tested by various people on various platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.16 2001/05/09 15:31:22 art Exp $	*/
a164 3
#if !defined(MACHINE_NONCONTIG) && !defined(MACHINE_NEW_NONCONTIG)
void		 pmap_init __P((paddr_t, paddr_t));
#else
a165 1
#endif
a181 6
#if !defined(MACHINE_NEW_NONCONTIG)
#ifndef pmap_page_index
int		 pmap_page_index __P((paddr_t));
#endif
#endif /* ! MACHINE_NEW_NONCONTIG */

d200 1
a200 5
#ifdef MACHINE_NONCONTIG
u_int		 pmap_free_pages __P((void));
boolean_t	 pmap_next_page __P((paddr_t *));
#endif
#if defined(MACHINE_NEW_NONCONTIG) && defined(PMAP_STEAL_MEMORY)
@


1.16
log
@More sync to NetBSD.

 - Change pmap_change_wiring to pmap_unwire because it's only called that way.
 - Remove pmap_pageable because it's seldom implemented and when it is, it's
   either almost useless or incorrect. The same information is already passed
   to the pmap anyway by pmap_enter and pmap_unwire.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.15 2001/03/26 08:36:20 art Exp $	*/
a149 1
boolean_t	 pmap_extract __P((pmap_t, vaddr_t, paddr_t *));
a153 1
boolean_t	 _pmap_extract __P((pmap_t, vaddr_t, paddr_t *));
d159 2
a160 1
paddr_t		 pmap_extract __P((pmap_t, vaddr_t));
@


1.15
log
@Add to ifdef confusion.
The _pmap_enter kludge only applies to i386.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.14 2001/03/22 23:36:52 niklas Exp $	*/
d124 1
a124 1
void		 pmap_change_wiring __P((pmap_t, vaddr_t, boolean_t));
a126 3
#if 0
void		 pmap_unwire __P((pmap_t, vaddr_t));
#endif
a198 2
void		 pmap_pageable __P((pmap_t,
		    vaddr_t, vaddr_t, boolean_t));
@


1.14
log
@Merge in NetBSD's PMAP_NEW, still disabled
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.13 2000/03/13 16:05:24 art Exp $	*/
d150 1
a150 1
#ifdef PMAP_NEW
@


1.13
log
@zap #if 0 code
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.12 1999/12/29 07:42:01 mickey Exp $	*/
d110 10
d127 3
d150 11
d163 1
d224 4
@


1.12
log
@fix return type for pmap_growkernel; art@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.11 1999/09/03 18:02:26 art Exp $	*/
a113 4
#if 0
/* Does not belong here! */
void		 pmap_bootstrap( /* machine dependent */ );
#endif
@


1.12.2.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d114 4
@


1.12.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.15 2001/03/26 08:36:20 art Exp $	*/
a109 10
#ifdef PMAP_NEW
/*
 * Flags passed to pmap_enter().  Note the bottom 3 bits are VM_PROT_*
 * bits, used to indicate the access type that was made (to seed modified
 * and referenced information).
 */
#define	PMAP_WIRED	0x00000010	/* wired mapping */
#define	PMAP_CANFAIL	0x00000020	/* can fail if resource shortage */
#endif

a116 3
#if 0
void		 pmap_unwire __P((pmap_t, vaddr_t));
#endif
a136 11
#if defined(PMAP_NEW) && defined(__i386__)
#ifdef notyet
int		 pmap_enter __P((pmap_t, vaddr_t, paddr_t, vm_prot_t, int));
boolean_t	 pmap_extract __P((pmap_t, vaddr_t, paddr_t *));
#else
int		 _pmap_enter __P((pmap_t, vaddr_t, paddr_t, vm_prot_t, int));
#define	 pmap_enter(pmap, va, pa, prot, wired, access_type) \
    (_pmap_enter((pmap), (va), (pa), (prot), ((wired) ? PMAP_WIRED : 0)))
boolean_t	 _pmap_extract __P((pmap_t, vaddr_t, paddr_t *));
#endif
#else
a138 1
#endif
a198 4
#endif

#if defined(PMAP_FORK)
void		 pmap_fork __P((pmap_t, pmap_t));
@


1.12.2.3
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.12.2.2 2001/05/14 22:47:49 niklas Exp $	*/
d124 1
a124 1
void		 pmap_unwire __P((pmap_t, vaddr_t));
d127 3
d153 1
d158 1
d164 1
a164 2

boolean_t	 pmap_extract __P((pmap_t, vaddr_t, paddr_t *));
d169 3
d173 1
d190 6
d202 2
d216 5
a220 1
#if defined(PMAP_STEAL_MEMORY)
@


1.12.2.4
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: pmap.h,v 1.36 1999/11/13 00:24:39 thorpej Exp $	*/
d91 21
d118 1
d124 1
a124 7
#ifndef pmap_activate
void		pmap_activate __P((struct proc *));
#endif
#ifndef pmap_deactivate
void		pmap_deactivate __P((struct proc *));
#endif
void		pmap_unwire __P((pmap_t, vaddr_t));
d126 1
d133 4
d141 1
d143 3
d147 2
d150 10
d161 1
a161 1
#if defined(PMAP_GROWKERNEL)
d167 1
d177 6
d184 3
d201 1
a201 1
vaddr_t		 pmap_steal_memory __P((vsize_t, vaddr_t *, vaddr_t *));
@


1.12.2.5
log
@merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.12.2.4 2001/10/31 03:32:14 nate Exp $	*/
@


1.11
log
@Change the pmap_enter api to pass down an argument that indicates
the access type that caused this mapping. This is to simplify pmaps
with mod/ref emulation (none for the moment) and in some cases speed
up pmap_is_{referenced,modified}.
At the same time, clean up some mappings that had too high protection.

XXX - the access type is incorrect in old vm, it's only used by uvm and MD code.
The actual use of this in pmap_enter implementations is not in this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.10 1999/07/18 18:00:08 deraadt Exp $	*/
d145 1
a145 1
void		 pmap_growkernel __P((vaddr_t));
@


1.10
log
@pmap_activate() and pmap_deactivate() are MD
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.9 1999/07/09 21:42:52 art Exp $	*/
d142 1
a142 1
		    vaddr_t, paddr_t, vm_prot_t, boolean_t));
@


1.9
log
@vm_offset_t -> {v,p}addr_t and vm_size_t -> {v,p}size_t
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.8 1998/03/20 15:40:34 niklas Exp $	*/
a113 2
void		pmap_activate __P((struct proc *));
void		pmap_deactivate __P((struct proc *));
@


1.8
log
@Some cleanup of page steals
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.7 1998/03/02 17:07:12 niklas Exp $	*/
d114 2
d120 1
a120 1
void		 pmap_change_wiring __P((pmap_t, vm_offset_t, boolean_t));
d130 2
a131 2
void		 pmap_clear_modify __P((vm_offset_t pa));
void		 pmap_clear_reference __P((vm_offset_t pa));
d135 2
a136 3
void		 pmap_copy __P((pmap_t,
		    pmap_t, vm_offset_t, vm_size_t, vm_offset_t));
void		 pmap_copy_page __P((vm_offset_t, vm_offset_t));
d140 1
a140 1
pmap_t		 pmap_create __P((vm_size_t));
d144 2
a145 2
		    vm_offset_t, vm_offset_t, vm_prot_t, boolean_t));
vm_offset_t	 pmap_extract __P((pmap_t, vm_offset_t));
d147 1
a147 1
void		 pmap_growkernel __P((vm_offset_t));
d151 1
a151 1
void		 pmap_init __P((vm_offset_t, vm_offset_t));
d157 3
a159 3
void		 pmap_kenter_pa __P((vm_offset_t, vm_offset_t, vm_prot_t));
void		 pmap_kenter_pgs __P((vm_offset_t, struct vm_page **, int));
void		 pmap_kremove __P((vm_offset_t, vm_size_t));
d167 2
a168 2
boolean_t	 pmap_is_modified __P((vm_offset_t pa));
boolean_t	 pmap_is_referenced __P((vm_offset_t pa));
d173 1
a173 1
int		 pmap_page_index __P((vm_offset_t));
d180 1
a180 1
void		 pmap_page_protect __P((vm_offset_t, vm_prot_t));
d184 1
a184 1
		    vm_offset_t, vm_offset_t, boolean_t));
d186 1
a186 1
vm_offset_t	 pmap_phys_address __P((int));
d190 1
a190 1
		    vm_offset_t, vm_offset_t, vm_prot_t));
d193 1
a193 1
void		 pmap_remove __P((pmap_t, vm_offset_t, vm_offset_t));
d195 1
a195 1
void		 pmap_zero_page __P((vm_offset_t));
d199 1
a199 1
boolean_t	 pmap_next_page __P((vm_offset_t *));
d202 1
a202 2
vm_offset_t	 pmap_steal_memory __P((vm_size_t, vm_offset_t *,
		    vm_offset_t *));
d204 1
a204 1
void		 pmap_virtual_space __P((vm_offset_t *, vm_offset_t *));
@


1.7
log
@Move some pmap_* protos out of PMAP_EXCLUDE_DECLS as sparc does not need/want
them virtualized
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.6 1998/03/01 11:36:44 niklas Exp $	*/
a208 4

/* XXX these are about to disappear real soon */
void		 pmap_startup __P((vm_offset_t *, vm_offset_t *));
vm_offset_t	 pmap_steal_memory __P((vm_size_t));
@


1.6
log
@Put back former pmap_steal_memory in non MNN case, at least i386 still
needs it.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.5 1998/03/01 00:37:58 niklas Exp $	*/
a198 3
void		 pmap_startup __P((vm_offset_t *, vm_offset_t *));
vm_offset_t	 pmap_steal_memory __P((vm_size_t));
void		 pmap_virtual_space __P((vm_offset_t *, vm_offset_t *));
d200 1
a200 2
#ifdef MACHINE_NEW_NONCONTIG
#if defined(PMAP_STEAL_MEMORY)
a205 1
#endif
d209 4
@


1.5
log
@Merge of MACHINE_NEW_CONTIG (aka MNN) code from Chuck Cranor,
<chuck@@openbsd.org>. This code is as of yet disabled on all platforms,
actually not yet supported on more than mvme68k, although other
platforms are expected soon, as code is already available.
This code makes handling of multiple physical memory regions
consistent over all platforms, as well as keeping the performance of
maintaining a single continuous memory chunk.  It is also a
requirement for the upcoming UVM replacement VM system.

What I did in this merge: just declared the pmap_map function in a
MD include file per port that needs it.  It's not an exported pmap
interface, says Chuck.  It ended up in differnt include files on
differnet ports, as I tried to follow the current policy on a per-arch
basis.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.4 1996/08/02 00:05:56 niklas Exp $	*/
d199 3
d203 1
a203 1
#if defined(MACHINE_NONCONTIG) || defined(MACHINE_NEW_NONCONTIG)
@


1.4
log
@Fix long-standing swap-leak. Add OpenBSD tags. Optimize thread_wakeup.
@
text
@d1 1
a1 1
/*	$OpenBSD: pmap.h,v 1.16 1996/03/31 22:15:32 pk Exp $	*/
d90 20
d119 9
d130 2
d136 3
d140 1
d145 2
a146 2
#ifndef pmap_page_index
int		 pmap_page_index __P((vm_offset_t));
d149 1
a149 1
#ifndef	MACHINE_NONCONTIG
d154 12
d168 11
a178 1
vm_offset_t	 pmap_map __P((vm_offset_t, vm_offset_t, vm_offset_t, int));
d180 2
d184 1
d186 1
d199 6
a204 2
void		 pmap_startup __P((vm_offset_t *, vm_offset_t *));
vm_offset_t	 pmap_steal_memory __P((vm_size_t));
d206 1
@


1.3
log
@thread changes
@
text
@d1 1
@


1.2
log
@partial sync with netbsd 960418, more to come
@
text
@d93 2
d96 1
d109 4
d135 5
a139 6
u_int		 pmap_free_pages __P(());
void		 pmap_init __P(());
boolean_t	 pmap_next_page __P(());
void		 pmap_startup __P(());
vm_offset_t	 pmap_steal_memory __P(());
void		 pmap_virtual_space __P(());
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: pmap.h,v 1.10 1995/03/26 20:39:07 jtc Exp $	*/
d89 1
d136 2
a137 1
#endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

