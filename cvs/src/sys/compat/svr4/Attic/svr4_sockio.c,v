head	1.11;
access;
symbols
	OPENBSD_4_9:1.10.0.20
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.18
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.14
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.16
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.12
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.10
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.8
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.8
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.6
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.18
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.16
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.14
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.12
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.10
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.8
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.6
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.4
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2011.07.04.23.01.33;	author tedu;	state dead;
branches;
next	1.10;

1.10
date	2006.03.05.21.48.56;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.06.22.23.52.18;	author jfb;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.51;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.29.02.22.13;	author brad;	state Exp;
branches
	1.7.8.1;
next	1.6;

1.6
date	96.05.07.08.49.20;	author deraadt;	state Exp;
branches
	1.6.16.1;
next	1.5;

1.5
date	96.05.02.13.06.53;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.04.21.22.18.26;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.17.05.24.21;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.02.26.23.32.00;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.24;	author deraadt;	state Exp;
branches;
next	;

1.6.16.1
date	2001.05.14.22.05.27;	author niklas;	state Exp;
branches;
next	1.6.16.2;

1.6.16.2
date	2002.03.28.11.28.07;	author niklas;	state Exp;
branches;
next	;

1.7.8.1
date	2002.06.11.03.28.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@remove all the compat svr4 files
@
text
@/*	$OpenBSD: svr4_sockio.c,v 1.10 2006/03/05 21:48:56 miod Exp $	 */
/*	$NetBSD: svr4_sockio.c,v 1.10 1996/05/03 17:09:15 christos Exp $	 */

/*
 * Copyright (c) 1995 Christos Zoulas
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/systm.h>
#include <sys/file.h>
#include <sys/filedesc.h>
#include <sys/ioctl.h>
#include <sys/termios.h>
#include <sys/tty.h>
#include <sys/socket.h>
#include <sys/mount.h>
#include <net/if.h>
#include <sys/malloc.h>

#include <sys/syscallargs.h>

#include <compat/svr4/svr4_types.h>
#include <compat/svr4/svr4_util.h>
#include <compat/svr4/svr4_signal.h>
#include <compat/svr4/svr4_syscallargs.h>
#include <compat/svr4/svr4_stropts.h>
#include <compat/svr4/svr4_ioctl.h>
#include <compat/svr4/svr4_sockio.h>

static int bsd_to_svr4_flags(int);

#define bsd_to_svr4_flag(a) \
	if (bf & __CONCAT(I,a))	sf |= __CONCAT(SVR4_I,a)

static int
bsd_to_svr4_flags(bf)
	int bf;
{
	int sf = 0;
	bsd_to_svr4_flag(FF_UP);
	bsd_to_svr4_flag(FF_BROADCAST);
	bsd_to_svr4_flag(FF_DEBUG);
	bsd_to_svr4_flag(FF_LOOPBACK);
	bsd_to_svr4_flag(FF_POINTOPOINT);
	bsd_to_svr4_flag(FF_NOTRAILERS);
	bsd_to_svr4_flag(FF_RUNNING);
	bsd_to_svr4_flag(FF_NOARP);
	bsd_to_svr4_flag(FF_PROMISC);
	bsd_to_svr4_flag(FF_ALLMULTI);
	bsd_to_svr4_flag(FF_MULTICAST);
	return sf;
}

int
svr4_sock_ioctl(fp, p, retval, fd, cmd, data)
	struct file *fp;
	struct proc *p;
	register_t *retval;
	int fd;
	u_long cmd;
	caddr_t data;
{
	int error;
	int (*ctl)(struct file *, u_long,  caddr_t, struct proc *) =
			fp->f_ops->fo_ioctl;

	*retval = 0;

	switch (cmd) {
	case SVR4_SIOCGIFNUM:
		{
			struct ifnet *ifp;
			struct ifaddr *ifa;
			int ifnum = 0;

			/*
			 * This does not return the number of physical
			 * interfaces (if_index), but the number of interfaces
			 * + addresses like ifconf() does, because this number
			 * is used by code that will call SVR4_SIOCGIFCONF to
			 * find the space needed for SVR4_SIOCGIFCONF. So we
			 * count the number of ifreq entries that the next
			 * SVR4_SIOCGIFCONF will return. Maybe a more correct
			 * fix is to make SVR4_SIOCGIFCONF return only one
			 * entry per physical interface?
			 */

			TAILQ_FOREACH(ifp, &ifnet, if_list)
				if (TAILQ_EMPTY(&ifp->if_addrlist))
					ifnum++;
				else
					TAILQ_FOREACH(ifa, &ifp->if_addrlist,
					    ifa_list)
						ifnum++;


			DPRINTF(("SIOCGIFNUM %d\n", ifnum));
			return copyout(&ifnum, data, sizeof(ifnum));
		}

	case SVR4_SIOCGIFFLAGS:
		{
			struct ifreq br;
			struct svr4_ifreq sr;

			if ((error = copyin(data, &sr, sizeof(sr))) != 0)
				return error;

			(void) strlcpy(br.ifr_name, sr.svr4_ifr_name,
			    sizeof(br.ifr_name));

			if ((error = (*ctl)(fp, SIOCGIFFLAGS, 
					    (caddr_t) &br, p)) != 0) {
				DPRINTF(("SIOCGIFFLAGS %s: error %d\n", 
					 sr.svr4_ifr_name, error));
				return error;
			}

			sr.svr4_ifr_flags = bsd_to_svr4_flags(br.ifr_flags);
			DPRINTF(("SIOCGIFFLAGS %s = %x\n", 
				sr.svr4_ifr_name, sr.svr4_ifr_flags));
			return copyout(&sr, data, sizeof(sr));
		}

	case SVR4_SIOCGIFCONF:
		{
			struct svr4_ifconf sc;

			if ((error = copyin(data, &sc, sizeof(sc))) != 0)
				return error;

			DPRINTF(("ifreq %d svr4_ifreq %d ifc_len %d\n",
				sizeof(struct ifreq), sizeof(struct svr4_ifreq),
				sc.svr4_ifc_len));

			if ((error = (*ctl)(fp, OSIOCGIFCONF,
					    (caddr_t) &sc, p)) != 0)
				return error;

			DPRINTF(("SIOCGIFCONF\n"));
			return 0;
		}


	default:
		DPRINTF(("Unknown svr4 sockio %lx\n", cmd));
		return 0;	/* ENOSYS really */
	}
}
@


1.10
log
@Use more queue macros rather than doing it by hand; ok otto@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_sockio.c,v 1.9 2004/06/22 23:52:18 jfb Exp $	 */
@


1.9
log
@Replace a whole bunch of scary uses of strncpy() with strlcpy() and
use compat-specific MAXNAMLEN values where appropriate

ok millert@@, pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_sockio.c,v 1.8 2002/03/14 01:26:51 millert Exp $	 */
d112 2
a113 3
			for (ifp = ifnet.tqh_first;
			     ifp != 0; ifp = ifp->if_list.tqe_next)
				if ((ifa = ifp->if_addrlist.tqh_first) == NULL)
d116 2
a117 2
					for (;ifa != NULL;
					    ifa = ifa->ifa_list.tqe_next)
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_sockio.c,v 1.7 2000/08/29 02:22:13 brad Exp $	 */
d134 1
a134 1
			(void) strncpy(br.ifr_name, sr.svr4_ifr_name,
@


1.7
log
@remove duplicate inclusion of sys/ioctl.h
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_sockio.c,v 1.6 1996/05/07 08:49:20 deraadt Exp $	 */
d54 1
a54 1
static int bsd_to_svr4_flags __P((int));
d88 1
a88 1
	int (*ctl) __P((struct file *, u_long,  caddr_t, struct proc *)) =
@


1.7.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_sockio.c,v 1.7 2000/08/29 02:22:13 brad Exp $	 */
d54 1
a54 1
static int bsd_to_svr4_flags(int);
d88 1
a88 1
	int (*ctl)(struct file *, u_long,  caddr_t, struct proc *) =
@


1.6
log
@sync with 0504; mostly proto changes (some svr4 ioctl changes)
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_sockio.c,v 1.4 1996/04/21 22:18:26 deraadt Exp $	 */
a39 1
#include <sys/ioctl.h>
@


1.6.16.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_sockio.c,v 1.7 2000/08/29 02:22:13 brad Exp $	 */
d40 1
@


1.6.16.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	 */
d54 1
a54 1
static int bsd_to_svr4_flags(int);
d88 1
a88 1
	int (*ctl)(struct file *, u_long,  caddr_t, struct proc *) =
@


1.5
log
@- don't use if_index to get the number of interfaces in SIOCGIFNUM; compute
  the actual number.
- forgot to copyout the result in SIOGCIFFLAGS.
@
text
@d2 1
a2 1
/*	$NetBSD: svr4_sockio.c,v 1.9 1996/04/22 01:17:33 christos Exp $	 */
d135 3
a137 1
			(void) strcpy(br.ifr_name, sr.svr4_ifr_name);
@


1.4
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
/*	$OpenBSD: svr4_sockio.c,v 1.3 1996/04/17 05:24:21 mickey Exp $	 */
/*	$NetBSD: svr4_sockio.c,v 1.8 1996/04/11 12:54:44 christos Exp $	 */
d97 24
a120 1
			extern int if_index;
d122 3
a124 2
			DPRINTF(("SIOCGIFNUM %d\n", if_index));
			return copyout(&if_index, data, sizeof(if_index));
d137 3
a139 1
					    (caddr_t) &br, p)) != 0)
d141 1
d144 1
a144 1
			DPRINTF(("SIOCGIFFLAGS %s = %d\n", 
d146 1
a146 1
			return 0;
d155 4
@


1.3
log
@Good fixes and changes from latest Net.
@
text
@d1 2
a2 2
/*	$OpenBSD: svr4_sockio.c,v 1.2 1996/02/26 23:32:00 niklas Exp $	 */
/*	$NetBSD: svr4_sockio.c,v 1.7 1996/03/30 22:38:14 christos Exp $	 */
d80 1
a80 1
svr4_sockioctl(fp, cmd, data, p, retval)
d82 3
a86 2
	struct proc *p;
	register_t *retval;
@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d1 2
a2 2
/*	$OpenBSD$	 */
/*	$NetBSD: svr4_sockio.c,v 1.6 1996/02/09 23:12:20 christos Exp $	 */
d138 1
a138 1
		DPRINTF(("Unknown svr4 sockio %x\n", cmd));
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: svr4_sockio.c,v 1.5 1995/10/07 06:27:48 mycroft Exp $	 */
a86 2
	struct filedesc *fdp = p->p_fd;
	caddr_t sg = stackgap_init(p->p_emul);
a87 2
	int fd;
	int num;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
