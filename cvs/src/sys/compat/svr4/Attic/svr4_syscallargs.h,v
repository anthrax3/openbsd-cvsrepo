head	1.37;
access;
symbols
	OPENBSD_4_9:1.36.0.14
	OPENBSD_4_9_BASE:1.36
	OPENBSD_4_8:1.36.0.12
	OPENBSD_4_8_BASE:1.36
	OPENBSD_4_7:1.36.0.8
	OPENBSD_4_7_BASE:1.36
	OPENBSD_4_6:1.36.0.10
	OPENBSD_4_6_BASE:1.36
	OPENBSD_4_5:1.36.0.6
	OPENBSD_4_5_BASE:1.36
	OPENBSD_4_4:1.36.0.4
	OPENBSD_4_4_BASE:1.36
	OPENBSD_4_3:1.36.0.2
	OPENBSD_4_3_BASE:1.36
	OPENBSD_4_2:1.35.0.20
	OPENBSD_4_2_BASE:1.35
	OPENBSD_4_1:1.35.0.18
	OPENBSD_4_1_BASE:1.35
	OPENBSD_4_0:1.35.0.16
	OPENBSD_4_0_BASE:1.35
	OPENBSD_3_9:1.35.0.14
	OPENBSD_3_9_BASE:1.35
	OPENBSD_3_8:1.35.0.12
	OPENBSD_3_8_BASE:1.35
	OPENBSD_3_7:1.35.0.10
	OPENBSD_3_7_BASE:1.35
	OPENBSD_3_6:1.35.0.8
	OPENBSD_3_6_BASE:1.35
	SMP_SYNC_A:1.35
	SMP_SYNC_B:1.35
	OPENBSD_3_5:1.35.0.6
	OPENBSD_3_5_BASE:1.35
	OPENBSD_3_4:1.35.0.4
	OPENBSD_3_4_BASE:1.35
	UBC_SYNC_A:1.35
	OPENBSD_3_3:1.35.0.2
	OPENBSD_3_3_BASE:1.35
	OPENBSD_3_2:1.34.0.2
	OPENBSD_3_2_BASE:1.34
	OPENBSD_3_1:1.33.0.2
	OPENBSD_3_1_BASE:1.33
	UBC_SYNC_B:1.34
	UBC:1.32.0.4
	UBC_BASE:1.32
	OPENBSD_3_0:1.32.0.2
	OPENBSD_3_0_BASE:1.32
	OPENBSD_2_9_BASE:1.30
	OPENBSD_2_9:1.30.0.4
	OPENBSD_2_8:1.30.0.2
	OPENBSD_2_8_BASE:1.30
	OPENBSD_2_7:1.26.0.6
	OPENBSD_2_7_BASE:1.26
	SMP:1.26.0.4
	SMP_BASE:1.26
	kame_19991208:1.26
	OPENBSD_2_6:1.26.0.2
	OPENBSD_2_6_BASE:1.26
	OPENBSD_2_5:1.24.0.6
	OPENBSD_2_5_BASE:1.24
	OPENBSD_2_4:1.24.0.4
	OPENBSD_2_4_BASE:1.24
	OPENBSD_2_3:1.24.0.2
	OPENBSD_2_3_BASE:1.24
	OPENBSD_2_2:1.19.0.2
	OPENBSD_2_2_BASE:1.19
	OPENBSD_2_1:1.13.0.2
	OPENBSD_2_1_BASE:1.13
	OPENBSD_2_0:1.8.0.2
	OPENBSD_2_0_BASE:1.8
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.37
date	2011.07.04.23.01.33;	author tedu;	state dead;
branches;
next	1.36;

1.36
date	2007.11.27.18.05.59;	author art;	state Exp;
branches;
next	1.35;

1.35
date	2003.01.30.03.32.44;	author millert;	state Exp;
branches;
next	1.34;

1.34
date	2002.07.06.19.22.43;	author nordin;	state Exp;
branches;
next	1.33;

1.33
date	2002.03.14.01.26.51;	author millert;	state Exp;
branches;
next	1.32;

1.32
date	2001.08.26.04.14.27;	author deraadt;	state Exp;
branches
	1.32.4.1;
next	1.31;

1.31
date	2001.05.16.05.05.09;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2000.08.23.19.32.55;	author fgsch;	state Exp;
branches;
next	1.29;

1.29
date	2000.06.28.23.49.45;	author fgsch;	state Exp;
branches;
next	1.28;

1.28
date	2000.06.24.21.02.46;	author fgsch;	state Exp;
branches;
next	1.27;

1.27
date	2000.06.15.05.30.32;	author brad;	state Exp;
branches;
next	1.26;

1.26
date	99.10.07.17.24.38;	author brad;	state Exp;
branches
	1.26.4.1;
next	1.25;

1.25
date	99.06.07.07.18.37;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	98.03.06.22.02.16;	author niklas;	state Exp;
branches;
next	1.23;

1.23
date	98.02.10.13.43.46;	author niklas;	state Exp;
branches;
next	1.22;

1.22
date	97.12.09.10.59.58;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	97.12.02.00.07.09;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	97.11.13.06.23.13;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	97.08.29.20.45.26;	author kstailey;	state Exp;
branches;
next	1.18;

1.18
date	97.08.29.20.36.51;	author kstailey;	state Exp;
branches;
next	1.17;

1.17
date	97.08.29.20.15.42;	author kstailey;	state Exp;
branches;
next	1.16;

1.16
date	97.08.29.19.56.40;	author kstailey;	state Exp;
branches;
next	1.15;

1.15
date	97.08.29.19.36.08;	author kstailey;	state Exp;
branches;
next	1.14;

1.14
date	97.08.29.18.46.33;	author kstailey;	state Exp;
branches;
next	1.13;

1.13
date	97.03.28.22.14.32;	author kstailey;	state Exp;
branches;
next	1.12;

1.12
date	97.03.28.22.03.47;	author kstailey;	state Exp;
branches;
next	1.11;

1.11
date	97.02.13.23.22.52;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	97.01.26.23.08.09;	author downsj;	state Exp;
branches;
next	1.9;

1.9
date	97.01.11.17.57.29;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	96.08.02.21.58.00;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.08.02.20.35.43;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.04.25.10.29.41;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.04.21.22.18.33;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.02.26.23.32.05;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	95.12.19.15.40.27;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.04.47.38;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.24;	author deraadt;	state Exp;
branches;
next	;

1.26.4.1
date	2001.05.14.22.05.29;	author niklas;	state Exp;
branches;
next	1.26.4.2;

1.26.4.2
date	2001.07.04.10.39.47;	author niklas;	state Exp;
branches;
next	1.26.4.3;

1.26.4.3
date	2001.10.31.03.11.47;	author nate;	state Exp;
branches;
next	1.26.4.4;

1.26.4.4
date	2002.03.28.11.28.07;	author niklas;	state Exp;
branches;
next	1.26.4.5;

1.26.4.5
date	2003.03.27.23.53.48;	author niklas;	state Exp;
branches;
next	;

1.32.4.1
date	2002.06.11.03.28.09;	author art;	state Exp;
branches;
next	1.32.4.2;

1.32.4.2
date	2002.10.29.00.30.52;	author art;	state Exp;
branches;
next	1.32.4.3;

1.32.4.3
date	2003.05.19.21.52.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.37
log
@remove all the compat svr4 files
@
text
@/*	$OpenBSD: svr4_syscallargs.h,v 1.36 2007/11/27 18:05:59 art Exp $	*/

/*
 * System call argument lists.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from	OpenBSD: syscalls.master,v 1.33 2003/01/30 03:29:49 millert Exp 
 */

#ifdef	syscallarg
#undef	syscallarg
#endif

#define	syscallarg(x)							\
	union {								\
		register_t pad;						\
		struct { x datum; } le;					\
		struct {						\
			int8_t pad[ (sizeof (register_t) < sizeof (x))	\
				? 0					\
				: sizeof (register_t) - sizeof (x)];	\
			x datum;					\
		} be;							\
	}

struct svr4_sys_open_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(int) mode;
};

struct svr4_sys_wait_args {
	syscallarg(int *) status;
};

struct svr4_sys_creat_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct svr4_sys_execv_args {
	syscallarg(char *) path;
	syscallarg(char **) argp;
};

struct svr4_sys_time_args {
	syscallarg(svr4_time_t *) t;
};

struct svr4_sys_mknod_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
	syscallarg(int) dev;
};

struct svr4_sys_break_args {
	syscallarg(caddr_t) nsize;
};

struct svr4_sys_stat_args {
	syscallarg(char *) path;
	syscallarg(struct svr4_stat *) ub;
};

struct svr4_sys_alarm_args {
	syscallarg(unsigned) sec;
};

struct svr4_sys_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct svr4_stat *) sb;
};

struct svr4_sys_utime_args {
	syscallarg(char *) path;
	syscallarg(struct svr4_utimbuf *) ubuf;
};

struct svr4_sys_access_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
};

struct svr4_sys_nice_args {
	syscallarg(int) prio;
};

struct svr4_sys_kill_args {
	syscallarg(int) pid;
	syscallarg(int) signum;
};

struct svr4_sys_pgrpsys_args {
	syscallarg(int) cmd;
	syscallarg(int) pid;
	syscallarg(int) pgid;
};

struct svr4_sys_times_args {
	syscallarg(struct tms *) tp;
};

struct svr4_sys_signal_args {
	syscallarg(int) signum;
	syscallarg(svr4_sig_t) handler;
};

struct svr4_sys_msgsys_args {
	syscallarg(int) what;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
	syscallarg(int) a5;
};

struct svr4_sys_sysarch_args {
	syscallarg(int) op;
	syscallarg(void *) a1;
};

struct svr4_sys_shmsys_args {
	syscallarg(int) what;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
};

struct svr4_sys_semsys_args {
	syscallarg(int) what;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
	syscallarg(int) a5;
};

struct svr4_sys_ioctl_args {
	syscallarg(int) fd;
	syscallarg(u_long) com;
	syscallarg(caddr_t) data;
};

struct svr4_sys_utssys_args {
	syscallarg(void *) a1;
	syscallarg(void *) a2;
	syscallarg(int) sel;
	syscallarg(void *) a3;
};

struct svr4_sys_execve_args {
	syscallarg(char *) path;
	syscallarg(char **) argp;
	syscallarg(char **) envp;
};

struct svr4_sys_fcntl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(char *) arg;
};

struct svr4_sys_ulimit_args {
	syscallarg(int) cmd;
	syscallarg(long) newlimit;
};

struct svr4_sys_getdents_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(int) nbytes;
};

struct svr4_sys_getmsg_args {
	syscallarg(int) fd;
	syscallarg(struct svr4_strbuf *) ctl;
	syscallarg(struct svr4_strbuf *) dat;
	syscallarg(int *) flags;
};

struct svr4_sys_putmsg_args {
	syscallarg(int) fd;
	syscallarg(struct svr4_strbuf *) ctl;
	syscallarg(struct svr4_strbuf *) dat;
	syscallarg(int) flags;
};

struct svr4_sys_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct svr4_stat *) ub;
};

struct svr4_sys_sigprocmask_args {
	syscallarg(int) how;
	syscallarg(svr4_sigset_t *) set;
	syscallarg(svr4_sigset_t *) oset;
};

struct svr4_sys_sigsuspend_args {
	syscallarg(svr4_sigset_t *) ss;
};

struct svr4_sys_sigaltstack_args {
	syscallarg(struct svr4_sigaltstack *) nss;
	syscallarg(struct svr4_sigaltstack *) oss;
};

struct svr4_sys_sigaction_args {
	syscallarg(int) signum;
	syscallarg(struct svr4_sigaction *) nsa;
	syscallarg(struct svr4_sigaction *) osa;
};

struct svr4_sys_sigpending_args {
	syscallarg(int) what;
	syscallarg(svr4_sigset_t *) mask;
};

struct svr4_sys_context_args {
	syscallarg(int) func;
	syscallarg(struct svr4_ucontext *) uc;
};

struct svr4_sys_statvfs_args {
	syscallarg(char *) path;
	syscallarg(struct svr4_statvfs *) fs;
};

struct svr4_sys_fstatvfs_args {
	syscallarg(int) fd;
	syscallarg(struct svr4_statvfs *) fs;
};

struct svr4_sys_waitsys_args {
	syscallarg(int) grp;
	syscallarg(int) id;
	syscallarg(union svr4_siginfo *) info;
	syscallarg(int) options;
};

struct svr4_sys_hrtsys_args {
	syscallarg(int) cmd;
	syscallarg(int) fun;
	syscallarg(int) sub;
	syscallarg(void *) rv1;
	syscallarg(void *) rv2;
};

struct svr4_sys_pathconf_args {
	syscallarg(char *) path;
	syscallarg(int) name;
};

struct svr4_sys_mmap_args {
	syscallarg(svr4_caddr_t) addr;
	syscallarg(svr4_size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(svr4_off_t) pos;
};

struct svr4_sys_fpathconf_args {
	syscallarg(int) fd;
	syscallarg(int) name;
};

struct svr4_sys_xstat_args {
	syscallarg(int) two;
	syscallarg(char *) path;
	syscallarg(struct svr4_xstat *) ub;
};

struct svr4_sys_lxstat_args {
	syscallarg(int) two;
	syscallarg(char *) path;
	syscallarg(struct svr4_xstat *) ub;
};

struct svr4_sys_fxstat_args {
	syscallarg(int) two;
	syscallarg(int) fd;
	syscallarg(struct svr4_xstat *) sb;
};

struct svr4_sys_xmknod_args {
	syscallarg(int) two;
	syscallarg(char *) path;
	syscallarg(svr4_mode_t) mode;
	syscallarg(svr4_dev_t) dev;
};

struct svr4_sys_setrlimit_args {
	syscallarg(int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct svr4_sys_getrlimit_args {
	syscallarg(int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct svr4_sys_memcntl_args {
	syscallarg(svr4_caddr_t) addr;
	syscallarg(svr4_size_t) len;
	syscallarg(int) cmd;
	syscallarg(svr4_caddr_t) arg;
	syscallarg(int) attr;
	syscallarg(int) mask;
};

struct svr4_sys_uname_args {
	syscallarg(struct svr4_utsname *) name;
	syscallarg(int) dummy;
};

struct svr4_sys_setegid_args {
	syscallarg(gid_t) egid;
};

struct svr4_sys_sysconfig_args {
	syscallarg(int) name;
};

struct svr4_sys_systeminfo_args {
	syscallarg(int) what;
	syscallarg(char *) buf;
	syscallarg(long) len;
};

struct svr4_sys_fchroot_args {
	syscallarg(int) fd;
};

struct svr4_sys_utimes_args {
	syscallarg(char *) path;
	syscallarg(struct timeval *) tptr;
};

struct svr4_sys_gettimeofday_args {
	syscallarg(struct timeval *) tp;
};

struct svr4_sys_pread_args {
	syscallarg(int) fd;
	syscallarg(void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(svr4_off_t) off;
};

struct svr4_sys_pwrite_args {
	syscallarg(int) fd;
	syscallarg(const void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(svr4_off_t) off;
};

struct svr4_sys_llseek_args {
	syscallarg(int) fd;
	syscallarg(long) offset1;
	syscallarg(long) offset2;
	syscallarg(int) whence;
};

struct svr4_sys_acl_args {
	syscallarg(char *) path;
	syscallarg(int) cmd;
	syscallarg(int) num;
	syscallarg(struct svr4_aclent *) buf;
};

struct svr4_sys_auditsys_args {
	syscallarg(int) code;
	syscallarg(int) a1;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
	syscallarg(int) a5;
};

struct svr4_sys_facl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(int) num;
	syscallarg(struct svr4_aclent *) buf;
};

struct svr4_sys_getdents64_args {
	syscallarg(int) fd;
	syscallarg(struct svr4_dirent64 *) dp;
	syscallarg(int) nbytes;
};

struct svr4_sys_mmap64_args {
	syscallarg(svr4_caddr_t) addr;
	syscallarg(svr4_size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(svr4_off64_t) pos;
};

struct svr4_sys_stat64_args {
	syscallarg(const char *) path;
	syscallarg(struct svr4_stat64 *) sb;
};

struct svr4_sys_lstat64_args {
	syscallarg(const char *) path;
	syscallarg(struct svr4_stat64 *) sb;
};

struct svr4_sys_fstat64_args {
	syscallarg(int) fd;
	syscallarg(struct svr4_stat64 *) sb;
};

struct svr4_sys_fstatvfs64_args {
	syscallarg(int) fd;
	syscallarg(struct svr4_statvfs64 *) fs;
};

struct svr4_sys_pread64_args {
	syscallarg(int) fd;
	syscallarg(void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(svr4_off64_t) off;
};

struct svr4_sys_pwrite64_args {
	syscallarg(int) fd;
	syscallarg(const void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(svr4_off64_t) off;
};

struct svr4_sys_creat64_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct svr4_sys_open64_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(int) mode;
};

struct svr4_sys_socket_args {
	syscallarg(int) domain;
	syscallarg(int) type;
	syscallarg(int) protocol;
};

/*
 * System call prototypes.
 */

int	sys_nosys(struct proc *, void *, register_t *);
int	sys_exit(struct proc *, void *, register_t *);
int	sys_fork(struct proc *, void *, register_t *);
int	sys_read(struct proc *, void *, register_t *);
int	sys_write(struct proc *, void *, register_t *);
int	svr4_sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	svr4_sys_wait(struct proc *, void *, register_t *);
int	svr4_sys_creat(struct proc *, void *, register_t *);
int	sys_link(struct proc *, void *, register_t *);
int	sys_unlink(struct proc *, void *, register_t *);
int	svr4_sys_execv(struct proc *, void *, register_t *);
int	sys_chdir(struct proc *, void *, register_t *);
int	svr4_sys_time(struct proc *, void *, register_t *);
int	svr4_sys_mknod(struct proc *, void *, register_t *);
int	sys_chmod(struct proc *, void *, register_t *);
int	sys_chown(struct proc *, void *, register_t *);
int	svr4_sys_break(struct proc *, void *, register_t *);
int	svr4_sys_stat(struct proc *, void *, register_t *);
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	svr4_sys_alarm(struct proc *, void *, register_t *);
int	svr4_sys_fstat(struct proc *, void *, register_t *);
int	svr4_sys_pause(struct proc *, void *, register_t *);
int	svr4_sys_utime(struct proc *, void *, register_t *);
int	svr4_sys_access(struct proc *, void *, register_t *);
int	svr4_sys_nice(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	svr4_sys_kill(struct proc *, void *, register_t *);
int	svr4_sys_pgrpsys(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_opipe(struct proc *, void *, register_t *);
int	svr4_sys_times(struct proc *, void *, register_t *);
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	svr4_sys_signal(struct proc *, void *, register_t *);
#ifdef SYSVMSG
int	svr4_sys_msgsys(struct proc *, void *, register_t *);
#else
#endif
int	svr4_sys_sysarch(struct proc *, void *, register_t *);
#ifdef SYSVSHM
int	svr4_sys_shmsys(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSEM
int	svr4_sys_semsys(struct proc *, void *, register_t *);
#else
#endif
int	svr4_sys_ioctl(struct proc *, void *, register_t *);
int	svr4_sys_utssys(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	svr4_sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	sys_chroot(struct proc *, void *, register_t *);
int	svr4_sys_fcntl(struct proc *, void *, register_t *);
int	svr4_sys_ulimit(struct proc *, void *, register_t *);
int	svr4_sys_rdebug(struct proc *, void *, register_t *);
int	sys_rmdir(struct proc *, void *, register_t *);
int	sys_mkdir(struct proc *, void *, register_t *);
int	svr4_sys_getdents(struct proc *, void *, register_t *);
int	svr4_sys_getmsg(struct proc *, void *, register_t *);
int	svr4_sys_putmsg(struct proc *, void *, register_t *);
int	sys_poll(struct proc *, void *, register_t *);
int	svr4_sys_lstat(struct proc *, void *, register_t *);
int	sys_symlink(struct proc *, void *, register_t *);
int	sys_readlink(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	svr4_sys_sigprocmask(struct proc *, void *, register_t *);
int	svr4_sys_sigsuspend(struct proc *, void *, register_t *);
int	svr4_sys_sigaltstack(struct proc *, void *, register_t *);
int	svr4_sys_sigaction(struct proc *, void *, register_t *);
int	svr4_sys_sigpending(struct proc *, void *, register_t *);
int	svr4_sys_context(struct proc *, void *, register_t *);
int	svr4_sys_statvfs(struct proc *, void *, register_t *);
int	svr4_sys_fstatvfs(struct proc *, void *, register_t *);
int	svr4_sys_waitsys(struct proc *, void *, register_t *);
int	svr4_sys_hrtsys(struct proc *, void *, register_t *);
int	svr4_sys_pathconf(struct proc *, void *, register_t *);
int	sys_mincore(struct proc *, void *, register_t *);
int	svr4_sys_mmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	svr4_sys_fpathconf(struct proc *, void *, register_t *);
int	sys_vfork(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	sys_readv(struct proc *, void *, register_t *);
int	sys_writev(struct proc *, void *, register_t *);
int	svr4_sys_xstat(struct proc *, void *, register_t *);
int	svr4_sys_lxstat(struct proc *, void *, register_t *);
int	svr4_sys_fxstat(struct proc *, void *, register_t *);
int	svr4_sys_xmknod(struct proc *, void *, register_t *);
int	svr4_sys_setrlimit(struct proc *, void *, register_t *);
int	svr4_sys_getrlimit(struct proc *, void *, register_t *);
int	sys_lchown(struct proc *, void *, register_t *);
int	svr4_sys_memcntl(struct proc *, void *, register_t *);
int	sys_rename(struct proc *, void *, register_t *);
int	svr4_sys_uname(struct proc *, void *, register_t *);
int	svr4_sys_setegid(struct proc *, void *, register_t *);
int	svr4_sys_sysconfig(struct proc *, void *, register_t *);
int	sys_adjtime(struct proc *, void *, register_t *);
int	svr4_sys_systeminfo(struct proc *, void *, register_t *);
int	sys_seteuid(struct proc *, void *, register_t *);
int	svr4_sys_fchroot(struct proc *, void *, register_t *);
int	svr4_sys_utimes(struct proc *, void *, register_t *);
int	svr4_sys_vhangup(struct proc *, void *, register_t *);
int	svr4_sys_gettimeofday(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
int	sys_setitimer(struct proc *, void *, register_t *);
int	svr4_sys_pread(struct proc *, void *, register_t *);
int	svr4_sys_pwrite(struct proc *, void *, register_t *);
int	svr4_sys_llseek(struct proc *, void *, register_t *);
int	svr4_sys_acl(struct proc *, void *, register_t *);
int	svr4_sys_auditsys(struct proc *, void *, register_t *);
int	sys_clock_gettime(struct proc *, void *, register_t *);
int	sys_clock_settime(struct proc *, void *, register_t *);
int	sys_clock_getres(struct proc *, void *, register_t *);
int	sys_nanosleep(struct proc *, void *, register_t *);
int	svr4_sys_facl(struct proc *, void *, register_t *);
int	sys_setreuid(struct proc *, void *, register_t *);
int	sys_setregid(struct proc *, void *, register_t *);
int	svr4_sys_getdents64(struct proc *, void *, register_t *);
int	svr4_sys_mmap64(struct proc *, void *, register_t *);
int	svr4_sys_stat64(struct proc *, void *, register_t *);
int	svr4_sys_lstat64(struct proc *, void *, register_t *);
int	svr4_sys_fstat64(struct proc *, void *, register_t *);
int	svr4_sys_fstatvfs64(struct proc *, void *, register_t *);
int	svr4_sys_pread64(struct proc *, void *, register_t *);
int	svr4_sys_pwrite64(struct proc *, void *, register_t *);
int	svr4_sys_creat64(struct proc *, void *, register_t *);
int	svr4_sys_open64(struct proc *, void *, register_t *);
int	svr4_sys_socket(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	compat_43_sys_accept(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_setsockopt(struct proc *, void *, register_t *);
@


1.36
log
@regen
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.35
log
@regen now that setreuid/setregid have moved out of compat and into kern
@
text
@@


1.34
log
@sync
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.32 2002/07/06 19:14:20 nordin Exp 
d580 2
a581 2
int	compat_43_sys_setreuid(struct proc *, void *, register_t *);
int	compat_43_sys_setregid(struct proc *, void *, register_t *);
@


1.33
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_syscallargs.h,v 1.32 2001/08/26 04:14:27 deraadt Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.30 2000/08/23 19:31:35 fgsch Exp 
a608 5
#ifdef NTP
int	sys_ntp_gettime(struct proc *, void *, register_t *);
int	sys_ntp_adjtime(struct proc *, void *, register_t *);
#else
#endif
@


1.32
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d456 38
a493 38
int	sys_nosys	__P((struct proc *, void *, register_t *));
int	sys_exit	__P((struct proc *, void *, register_t *));
int	sys_fork	__P((struct proc *, void *, register_t *));
int	sys_read	__P((struct proc *, void *, register_t *));
int	sys_write	__P((struct proc *, void *, register_t *));
int	svr4_sys_open	__P((struct proc *, void *, register_t *));
int	sys_close	__P((struct proc *, void *, register_t *));
int	svr4_sys_wait	__P((struct proc *, void *, register_t *));
int	svr4_sys_creat	__P((struct proc *, void *, register_t *));
int	sys_link	__P((struct proc *, void *, register_t *));
int	sys_unlink	__P((struct proc *, void *, register_t *));
int	svr4_sys_execv	__P((struct proc *, void *, register_t *));
int	sys_chdir	__P((struct proc *, void *, register_t *));
int	svr4_sys_time	__P((struct proc *, void *, register_t *));
int	svr4_sys_mknod	__P((struct proc *, void *, register_t *));
int	sys_chmod	__P((struct proc *, void *, register_t *));
int	sys_chown	__P((struct proc *, void *, register_t *));
int	svr4_sys_break	__P((struct proc *, void *, register_t *));
int	svr4_sys_stat	__P((struct proc *, void *, register_t *));
int	compat_43_sys_lseek	__P((struct proc *, void *, register_t *));
int	sys_getpid	__P((struct proc *, void *, register_t *));
int	sys_setuid	__P((struct proc *, void *, register_t *));
int	sys_getuid	__P((struct proc *, void *, register_t *));
int	svr4_sys_alarm	__P((struct proc *, void *, register_t *));
int	svr4_sys_fstat	__P((struct proc *, void *, register_t *));
int	svr4_sys_pause	__P((struct proc *, void *, register_t *));
int	svr4_sys_utime	__P((struct proc *, void *, register_t *));
int	svr4_sys_access	__P((struct proc *, void *, register_t *));
int	svr4_sys_nice	__P((struct proc *, void *, register_t *));
int	sys_sync	__P((struct proc *, void *, register_t *));
int	svr4_sys_kill	__P((struct proc *, void *, register_t *));
int	svr4_sys_pgrpsys	__P((struct proc *, void *, register_t *));
int	sys_dup	__P((struct proc *, void *, register_t *));
int	sys_opipe	__P((struct proc *, void *, register_t *));
int	svr4_sys_times	__P((struct proc *, void *, register_t *));
int	sys_setgid	__P((struct proc *, void *, register_t *));
int	sys_getgid	__P((struct proc *, void *, register_t *));
int	svr4_sys_signal	__P((struct proc *, void *, register_t *));
d495 1
a495 1
int	svr4_sys_msgsys	__P((struct proc *, void *, register_t *));
d498 1
a498 1
int	svr4_sys_sysarch	__P((struct proc *, void *, register_t *));
d500 1
a500 1
int	svr4_sys_shmsys	__P((struct proc *, void *, register_t *));
d504 1
a504 1
int	svr4_sys_semsys	__P((struct proc *, void *, register_t *));
d507 102
a608 102
int	svr4_sys_ioctl	__P((struct proc *, void *, register_t *));
int	svr4_sys_utssys	__P((struct proc *, void *, register_t *));
int	sys_fsync	__P((struct proc *, void *, register_t *));
int	svr4_sys_execve	__P((struct proc *, void *, register_t *));
int	sys_umask	__P((struct proc *, void *, register_t *));
int	sys_chroot	__P((struct proc *, void *, register_t *));
int	svr4_sys_fcntl	__P((struct proc *, void *, register_t *));
int	svr4_sys_ulimit	__P((struct proc *, void *, register_t *));
int	svr4_sys_rdebug	__P((struct proc *, void *, register_t *));
int	sys_rmdir	__P((struct proc *, void *, register_t *));
int	sys_mkdir	__P((struct proc *, void *, register_t *));
int	svr4_sys_getdents	__P((struct proc *, void *, register_t *));
int	svr4_sys_getmsg	__P((struct proc *, void *, register_t *));
int	svr4_sys_putmsg	__P((struct proc *, void *, register_t *));
int	sys_poll	__P((struct proc *, void *, register_t *));
int	svr4_sys_lstat	__P((struct proc *, void *, register_t *));
int	sys_symlink	__P((struct proc *, void *, register_t *));
int	sys_readlink	__P((struct proc *, void *, register_t *));
int	sys_getgroups	__P((struct proc *, void *, register_t *));
int	sys_setgroups	__P((struct proc *, void *, register_t *));
int	sys_fchmod	__P((struct proc *, void *, register_t *));
int	sys_fchown	__P((struct proc *, void *, register_t *));
int	svr4_sys_sigprocmask	__P((struct proc *, void *, register_t *));
int	svr4_sys_sigsuspend	__P((struct proc *, void *, register_t *));
int	svr4_sys_sigaltstack	__P((struct proc *, void *, register_t *));
int	svr4_sys_sigaction	__P((struct proc *, void *, register_t *));
int	svr4_sys_sigpending	__P((struct proc *, void *, register_t *));
int	svr4_sys_context	__P((struct proc *, void *, register_t *));
int	svr4_sys_statvfs	__P((struct proc *, void *, register_t *));
int	svr4_sys_fstatvfs	__P((struct proc *, void *, register_t *));
int	svr4_sys_waitsys	__P((struct proc *, void *, register_t *));
int	svr4_sys_hrtsys	__P((struct proc *, void *, register_t *));
int	svr4_sys_pathconf	__P((struct proc *, void *, register_t *));
int	sys_mincore	__P((struct proc *, void *, register_t *));
int	svr4_sys_mmap	__P((struct proc *, void *, register_t *));
int	sys_mprotect	__P((struct proc *, void *, register_t *));
int	sys_munmap	__P((struct proc *, void *, register_t *));
int	svr4_sys_fpathconf	__P((struct proc *, void *, register_t *));
int	sys_vfork	__P((struct proc *, void *, register_t *));
int	sys_fchdir	__P((struct proc *, void *, register_t *));
int	sys_readv	__P((struct proc *, void *, register_t *));
int	sys_writev	__P((struct proc *, void *, register_t *));
int	svr4_sys_xstat	__P((struct proc *, void *, register_t *));
int	svr4_sys_lxstat	__P((struct proc *, void *, register_t *));
int	svr4_sys_fxstat	__P((struct proc *, void *, register_t *));
int	svr4_sys_xmknod	__P((struct proc *, void *, register_t *));
int	svr4_sys_setrlimit	__P((struct proc *, void *, register_t *));
int	svr4_sys_getrlimit	__P((struct proc *, void *, register_t *));
int	sys_lchown	__P((struct proc *, void *, register_t *));
int	svr4_sys_memcntl	__P((struct proc *, void *, register_t *));
int	sys_rename	__P((struct proc *, void *, register_t *));
int	svr4_sys_uname	__P((struct proc *, void *, register_t *));
int	svr4_sys_setegid	__P((struct proc *, void *, register_t *));
int	svr4_sys_sysconfig	__P((struct proc *, void *, register_t *));
int	sys_adjtime	__P((struct proc *, void *, register_t *));
int	svr4_sys_systeminfo	__P((struct proc *, void *, register_t *));
int	sys_seteuid	__P((struct proc *, void *, register_t *));
int	svr4_sys_fchroot	__P((struct proc *, void *, register_t *));
int	svr4_sys_utimes	__P((struct proc *, void *, register_t *));
int	svr4_sys_vhangup	__P((struct proc *, void *, register_t *));
int	svr4_sys_gettimeofday	__P((struct proc *, void *, register_t *));
int	sys_getitimer	__P((struct proc *, void *, register_t *));
int	sys_setitimer	__P((struct proc *, void *, register_t *));
int	svr4_sys_pread	__P((struct proc *, void *, register_t *));
int	svr4_sys_pwrite	__P((struct proc *, void *, register_t *));
int	svr4_sys_llseek	__P((struct proc *, void *, register_t *));
int	svr4_sys_acl	__P((struct proc *, void *, register_t *));
int	svr4_sys_auditsys	__P((struct proc *, void *, register_t *));
int	sys_clock_gettime	__P((struct proc *, void *, register_t *));
int	sys_clock_settime	__P((struct proc *, void *, register_t *));
int	sys_clock_getres	__P((struct proc *, void *, register_t *));
int	sys_nanosleep	__P((struct proc *, void *, register_t *));
int	svr4_sys_facl	__P((struct proc *, void *, register_t *));
int	compat_43_sys_setreuid	__P((struct proc *, void *, register_t *));
int	compat_43_sys_setregid	__P((struct proc *, void *, register_t *));
int	svr4_sys_getdents64	__P((struct proc *, void *, register_t *));
int	svr4_sys_mmap64	__P((struct proc *, void *, register_t *));
int	svr4_sys_stat64	__P((struct proc *, void *, register_t *));
int	svr4_sys_lstat64	__P((struct proc *, void *, register_t *));
int	svr4_sys_fstat64	__P((struct proc *, void *, register_t *));
int	svr4_sys_fstatvfs64	__P((struct proc *, void *, register_t *));
int	svr4_sys_pread64	__P((struct proc *, void *, register_t *));
int	svr4_sys_pwrite64	__P((struct proc *, void *, register_t *));
int	svr4_sys_creat64	__P((struct proc *, void *, register_t *));
int	svr4_sys_open64	__P((struct proc *, void *, register_t *));
int	svr4_sys_socket	__P((struct proc *, void *, register_t *));
int	sys_socketpair	__P((struct proc *, void *, register_t *));
int	sys_bind	__P((struct proc *, void *, register_t *));
int	sys_listen	__P((struct proc *, void *, register_t *));
int	compat_43_sys_accept	__P((struct proc *, void *, register_t *));
int	sys_connect	__P((struct proc *, void *, register_t *));
int	sys_shutdown	__P((struct proc *, void *, register_t *));
int	compat_43_sys_recv	__P((struct proc *, void *, register_t *));
int	compat_43_sys_recvfrom	__P((struct proc *, void *, register_t *));
int	compat_43_sys_recvmsg	__P((struct proc *, void *, register_t *));
int	compat_43_sys_send	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sendmsg	__P((struct proc *, void *, register_t *));
int	sys_sendto	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getpeername	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getsockname	__P((struct proc *, void *, register_t *));
int	sys_getsockopt	__P((struct proc *, void *, register_t *));
int	sys_setsockopt	__P((struct proc *, void *, register_t *));
d610 2
a611 2
int	sys_ntp_gettime	__P((struct proc *, void *, register_t *));
int	sys_ntp_adjtime	__P((struct proc *, void *, register_t *));
@


1.32.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_syscallargs.h,v 1.32 2001/08/26 04:14:27 deraadt Exp $	*/
d456 38
a493 38
int	sys_nosys(struct proc *, void *, register_t *);
int	sys_exit(struct proc *, void *, register_t *);
int	sys_fork(struct proc *, void *, register_t *);
int	sys_read(struct proc *, void *, register_t *);
int	sys_write(struct proc *, void *, register_t *);
int	svr4_sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	svr4_sys_wait(struct proc *, void *, register_t *);
int	svr4_sys_creat(struct proc *, void *, register_t *);
int	sys_link(struct proc *, void *, register_t *);
int	sys_unlink(struct proc *, void *, register_t *);
int	svr4_sys_execv(struct proc *, void *, register_t *);
int	sys_chdir(struct proc *, void *, register_t *);
int	svr4_sys_time(struct proc *, void *, register_t *);
int	svr4_sys_mknod(struct proc *, void *, register_t *);
int	sys_chmod(struct proc *, void *, register_t *);
int	sys_chown(struct proc *, void *, register_t *);
int	svr4_sys_break(struct proc *, void *, register_t *);
int	svr4_sys_stat(struct proc *, void *, register_t *);
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	svr4_sys_alarm(struct proc *, void *, register_t *);
int	svr4_sys_fstat(struct proc *, void *, register_t *);
int	svr4_sys_pause(struct proc *, void *, register_t *);
int	svr4_sys_utime(struct proc *, void *, register_t *);
int	svr4_sys_access(struct proc *, void *, register_t *);
int	svr4_sys_nice(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	svr4_sys_kill(struct proc *, void *, register_t *);
int	svr4_sys_pgrpsys(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_opipe(struct proc *, void *, register_t *);
int	svr4_sys_times(struct proc *, void *, register_t *);
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	svr4_sys_signal(struct proc *, void *, register_t *);
d495 1
a495 1
int	svr4_sys_msgsys(struct proc *, void *, register_t *);
d498 1
a498 1
int	svr4_sys_sysarch(struct proc *, void *, register_t *);
d500 1
a500 1
int	svr4_sys_shmsys(struct proc *, void *, register_t *);
d504 1
a504 1
int	svr4_sys_semsys(struct proc *, void *, register_t *);
d507 102
a608 102
int	svr4_sys_ioctl(struct proc *, void *, register_t *);
int	svr4_sys_utssys(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	svr4_sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	sys_chroot(struct proc *, void *, register_t *);
int	svr4_sys_fcntl(struct proc *, void *, register_t *);
int	svr4_sys_ulimit(struct proc *, void *, register_t *);
int	svr4_sys_rdebug(struct proc *, void *, register_t *);
int	sys_rmdir(struct proc *, void *, register_t *);
int	sys_mkdir(struct proc *, void *, register_t *);
int	svr4_sys_getdents(struct proc *, void *, register_t *);
int	svr4_sys_getmsg(struct proc *, void *, register_t *);
int	svr4_sys_putmsg(struct proc *, void *, register_t *);
int	sys_poll(struct proc *, void *, register_t *);
int	svr4_sys_lstat(struct proc *, void *, register_t *);
int	sys_symlink(struct proc *, void *, register_t *);
int	sys_readlink(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	svr4_sys_sigprocmask(struct proc *, void *, register_t *);
int	svr4_sys_sigsuspend(struct proc *, void *, register_t *);
int	svr4_sys_sigaltstack(struct proc *, void *, register_t *);
int	svr4_sys_sigaction(struct proc *, void *, register_t *);
int	svr4_sys_sigpending(struct proc *, void *, register_t *);
int	svr4_sys_context(struct proc *, void *, register_t *);
int	svr4_sys_statvfs(struct proc *, void *, register_t *);
int	svr4_sys_fstatvfs(struct proc *, void *, register_t *);
int	svr4_sys_waitsys(struct proc *, void *, register_t *);
int	svr4_sys_hrtsys(struct proc *, void *, register_t *);
int	svr4_sys_pathconf(struct proc *, void *, register_t *);
int	sys_mincore(struct proc *, void *, register_t *);
int	svr4_sys_mmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	svr4_sys_fpathconf(struct proc *, void *, register_t *);
int	sys_vfork(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	sys_readv(struct proc *, void *, register_t *);
int	sys_writev(struct proc *, void *, register_t *);
int	svr4_sys_xstat(struct proc *, void *, register_t *);
int	svr4_sys_lxstat(struct proc *, void *, register_t *);
int	svr4_sys_fxstat(struct proc *, void *, register_t *);
int	svr4_sys_xmknod(struct proc *, void *, register_t *);
int	svr4_sys_setrlimit(struct proc *, void *, register_t *);
int	svr4_sys_getrlimit(struct proc *, void *, register_t *);
int	sys_lchown(struct proc *, void *, register_t *);
int	svr4_sys_memcntl(struct proc *, void *, register_t *);
int	sys_rename(struct proc *, void *, register_t *);
int	svr4_sys_uname(struct proc *, void *, register_t *);
int	svr4_sys_setegid(struct proc *, void *, register_t *);
int	svr4_sys_sysconfig(struct proc *, void *, register_t *);
int	sys_adjtime(struct proc *, void *, register_t *);
int	svr4_sys_systeminfo(struct proc *, void *, register_t *);
int	sys_seteuid(struct proc *, void *, register_t *);
int	svr4_sys_fchroot(struct proc *, void *, register_t *);
int	svr4_sys_utimes(struct proc *, void *, register_t *);
int	svr4_sys_vhangup(struct proc *, void *, register_t *);
int	svr4_sys_gettimeofday(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
int	sys_setitimer(struct proc *, void *, register_t *);
int	svr4_sys_pread(struct proc *, void *, register_t *);
int	svr4_sys_pwrite(struct proc *, void *, register_t *);
int	svr4_sys_llseek(struct proc *, void *, register_t *);
int	svr4_sys_acl(struct proc *, void *, register_t *);
int	svr4_sys_auditsys(struct proc *, void *, register_t *);
int	sys_clock_gettime(struct proc *, void *, register_t *);
int	sys_clock_settime(struct proc *, void *, register_t *);
int	sys_clock_getres(struct proc *, void *, register_t *);
int	sys_nanosleep(struct proc *, void *, register_t *);
int	svr4_sys_facl(struct proc *, void *, register_t *);
int	compat_43_sys_setreuid(struct proc *, void *, register_t *);
int	compat_43_sys_setregid(struct proc *, void *, register_t *);
int	svr4_sys_getdents64(struct proc *, void *, register_t *);
int	svr4_sys_mmap64(struct proc *, void *, register_t *);
int	svr4_sys_stat64(struct proc *, void *, register_t *);
int	svr4_sys_lstat64(struct proc *, void *, register_t *);
int	svr4_sys_fstat64(struct proc *, void *, register_t *);
int	svr4_sys_fstatvfs64(struct proc *, void *, register_t *);
int	svr4_sys_pread64(struct proc *, void *, register_t *);
int	svr4_sys_pwrite64(struct proc *, void *, register_t *);
int	svr4_sys_creat64(struct proc *, void *, register_t *);
int	svr4_sys_open64(struct proc *, void *, register_t *);
int	svr4_sys_socket(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	compat_43_sys_accept(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_setsockopt(struct proc *, void *, register_t *);
d610 2
a611 2
int	sys_ntp_gettime(struct proc *, void *, register_t *);
int	sys_ntp_adjtime(struct proc *, void *, register_t *);
@


1.32.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_syscallargs.h,v 1.32.4.1 2002/06/11 03:28:09 art Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.32 2002/07/06 19:14:20 nordin Exp 
d609 5
@


1.32.4.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.33 2003/01/30 03:29:49 millert Exp 
d580 2
a581 2
int	sys_setreuid(struct proc *, void *, register_t *);
int	sys_setregid(struct proc *, void *, register_t *);
@


1.31
log
@regen after removing compatopts
@
text
@d10 15
a24 1
#define	syscallarg(x)	union { x datum; register_t pad; }
@


1.30
log
@regen.
@
text
@@


1.29
log
@sync
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.29 2000/06/28 23:48:15 fgsch Exp 
d407 14
d574 2
@


1.28
log
@sync
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.28 2000/06/24 21:00:30 fgsch Exp 
d378 9
d407 5
d555 1
d560 1
@


1.27
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.27 2000/06/15 05:28:30 brad Exp 
d372 16
d540 3
@


1.26
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.26 1999/10/07 17:23:53 brad Exp 
@


1.26.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_syscallargs.h,v 1.30 2000/08/23 19:32:55 fgsch Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.30 2000/08/23 19:31:35 fgsch Exp 
a371 25
struct svr4_sys_getdents64_args {
	syscallarg(int) fd;
	syscallarg(struct svr4_dirent64 *) dp;
	syscallarg(int) nbytes;
};

struct svr4_sys_mmap64_args {
	syscallarg(svr4_caddr_t) addr;
	syscallarg(svr4_size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(svr4_off64_t) pos;
};

struct svr4_sys_stat64_args {
	syscallarg(const char *) path;
	syscallarg(struct svr4_stat64 *) sb;
};

struct svr4_sys_lstat64_args {
	syscallarg(const char *) path;
	syscallarg(struct svr4_stat64 *) sb;
};

a381 19
struct svr4_sys_pread64_args {
	syscallarg(int) fd;
	syscallarg(void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(svr4_off64_t) off;
};

struct svr4_sys_pwrite64_args {
	syscallarg(int) fd;
	syscallarg(const void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(svr4_off64_t) off;
};

struct svr4_sys_creat64_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

a523 4
int	svr4_sys_getdents64	__P((struct proc *, void *, register_t *));
int	svr4_sys_mmap64	__P((struct proc *, void *, register_t *));
int	svr4_sys_stat64	__P((struct proc *, void *, register_t *));
int	svr4_sys_lstat64	__P((struct proc *, void *, register_t *));
a525 3
int	svr4_sys_pread64	__P((struct proc *, void *, register_t *));
int	svr4_sys_pwrite64	__P((struct proc *, void *, register_t *));
int	svr4_sys_creat64	__P((struct proc *, void *, register_t *));
@


1.26.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_syscallargs.h,v 1.26.4.1 2001/05/14 22:05:29 niklas Exp $	*/
@


1.26.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: svr4_syscallargs.h,v 1.26.4.2 2001/07/04 10:39:47 niklas Exp $	*/
d10 1
a10 15
#ifdef	syscallarg
#undef	syscallarg
#endif

#define	syscallarg(x)							\
	union {								\
		register_t pad;						\
		struct { x datum; } le;					\
		struct {						\
			int8_t pad[ (sizeof (register_t) < sizeof (x))	\
				? 0					\
				: sizeof (register_t) - sizeof (x)];	\
			x datum;					\
		} be;							\
	}
@


1.26.4.4
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d456 38
a493 38
int	sys_nosys(struct proc *, void *, register_t *);
int	sys_exit(struct proc *, void *, register_t *);
int	sys_fork(struct proc *, void *, register_t *);
int	sys_read(struct proc *, void *, register_t *);
int	sys_write(struct proc *, void *, register_t *);
int	svr4_sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	svr4_sys_wait(struct proc *, void *, register_t *);
int	svr4_sys_creat(struct proc *, void *, register_t *);
int	sys_link(struct proc *, void *, register_t *);
int	sys_unlink(struct proc *, void *, register_t *);
int	svr4_sys_execv(struct proc *, void *, register_t *);
int	sys_chdir(struct proc *, void *, register_t *);
int	svr4_sys_time(struct proc *, void *, register_t *);
int	svr4_sys_mknod(struct proc *, void *, register_t *);
int	sys_chmod(struct proc *, void *, register_t *);
int	sys_chown(struct proc *, void *, register_t *);
int	svr4_sys_break(struct proc *, void *, register_t *);
int	svr4_sys_stat(struct proc *, void *, register_t *);
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	svr4_sys_alarm(struct proc *, void *, register_t *);
int	svr4_sys_fstat(struct proc *, void *, register_t *);
int	svr4_sys_pause(struct proc *, void *, register_t *);
int	svr4_sys_utime(struct proc *, void *, register_t *);
int	svr4_sys_access(struct proc *, void *, register_t *);
int	svr4_sys_nice(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	svr4_sys_kill(struct proc *, void *, register_t *);
int	svr4_sys_pgrpsys(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_opipe(struct proc *, void *, register_t *);
int	svr4_sys_times(struct proc *, void *, register_t *);
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	svr4_sys_signal(struct proc *, void *, register_t *);
d495 1
a495 1
int	svr4_sys_msgsys(struct proc *, void *, register_t *);
d498 1
a498 1
int	svr4_sys_sysarch(struct proc *, void *, register_t *);
d500 1
a500 1
int	svr4_sys_shmsys(struct proc *, void *, register_t *);
d504 1
a504 1
int	svr4_sys_semsys(struct proc *, void *, register_t *);
d507 102
a608 102
int	svr4_sys_ioctl(struct proc *, void *, register_t *);
int	svr4_sys_utssys(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	svr4_sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	sys_chroot(struct proc *, void *, register_t *);
int	svr4_sys_fcntl(struct proc *, void *, register_t *);
int	svr4_sys_ulimit(struct proc *, void *, register_t *);
int	svr4_sys_rdebug(struct proc *, void *, register_t *);
int	sys_rmdir(struct proc *, void *, register_t *);
int	sys_mkdir(struct proc *, void *, register_t *);
int	svr4_sys_getdents(struct proc *, void *, register_t *);
int	svr4_sys_getmsg(struct proc *, void *, register_t *);
int	svr4_sys_putmsg(struct proc *, void *, register_t *);
int	sys_poll(struct proc *, void *, register_t *);
int	svr4_sys_lstat(struct proc *, void *, register_t *);
int	sys_symlink(struct proc *, void *, register_t *);
int	sys_readlink(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	svr4_sys_sigprocmask(struct proc *, void *, register_t *);
int	svr4_sys_sigsuspend(struct proc *, void *, register_t *);
int	svr4_sys_sigaltstack(struct proc *, void *, register_t *);
int	svr4_sys_sigaction(struct proc *, void *, register_t *);
int	svr4_sys_sigpending(struct proc *, void *, register_t *);
int	svr4_sys_context(struct proc *, void *, register_t *);
int	svr4_sys_statvfs(struct proc *, void *, register_t *);
int	svr4_sys_fstatvfs(struct proc *, void *, register_t *);
int	svr4_sys_waitsys(struct proc *, void *, register_t *);
int	svr4_sys_hrtsys(struct proc *, void *, register_t *);
int	svr4_sys_pathconf(struct proc *, void *, register_t *);
int	sys_mincore(struct proc *, void *, register_t *);
int	svr4_sys_mmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	svr4_sys_fpathconf(struct proc *, void *, register_t *);
int	sys_vfork(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	sys_readv(struct proc *, void *, register_t *);
int	sys_writev(struct proc *, void *, register_t *);
int	svr4_sys_xstat(struct proc *, void *, register_t *);
int	svr4_sys_lxstat(struct proc *, void *, register_t *);
int	svr4_sys_fxstat(struct proc *, void *, register_t *);
int	svr4_sys_xmknod(struct proc *, void *, register_t *);
int	svr4_sys_setrlimit(struct proc *, void *, register_t *);
int	svr4_sys_getrlimit(struct proc *, void *, register_t *);
int	sys_lchown(struct proc *, void *, register_t *);
int	svr4_sys_memcntl(struct proc *, void *, register_t *);
int	sys_rename(struct proc *, void *, register_t *);
int	svr4_sys_uname(struct proc *, void *, register_t *);
int	svr4_sys_setegid(struct proc *, void *, register_t *);
int	svr4_sys_sysconfig(struct proc *, void *, register_t *);
int	sys_adjtime(struct proc *, void *, register_t *);
int	svr4_sys_systeminfo(struct proc *, void *, register_t *);
int	sys_seteuid(struct proc *, void *, register_t *);
int	svr4_sys_fchroot(struct proc *, void *, register_t *);
int	svr4_sys_utimes(struct proc *, void *, register_t *);
int	svr4_sys_vhangup(struct proc *, void *, register_t *);
int	svr4_sys_gettimeofday(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
int	sys_setitimer(struct proc *, void *, register_t *);
int	svr4_sys_pread(struct proc *, void *, register_t *);
int	svr4_sys_pwrite(struct proc *, void *, register_t *);
int	svr4_sys_llseek(struct proc *, void *, register_t *);
int	svr4_sys_acl(struct proc *, void *, register_t *);
int	svr4_sys_auditsys(struct proc *, void *, register_t *);
int	sys_clock_gettime(struct proc *, void *, register_t *);
int	sys_clock_settime(struct proc *, void *, register_t *);
int	sys_clock_getres(struct proc *, void *, register_t *);
int	sys_nanosleep(struct proc *, void *, register_t *);
int	svr4_sys_facl(struct proc *, void *, register_t *);
int	compat_43_sys_setreuid(struct proc *, void *, register_t *);
int	compat_43_sys_setregid(struct proc *, void *, register_t *);
int	svr4_sys_getdents64(struct proc *, void *, register_t *);
int	svr4_sys_mmap64(struct proc *, void *, register_t *);
int	svr4_sys_stat64(struct proc *, void *, register_t *);
int	svr4_sys_lstat64(struct proc *, void *, register_t *);
int	svr4_sys_fstat64(struct proc *, void *, register_t *);
int	svr4_sys_fstatvfs64(struct proc *, void *, register_t *);
int	svr4_sys_pread64(struct proc *, void *, register_t *);
int	svr4_sys_pwrite64(struct proc *, void *, register_t *);
int	svr4_sys_creat64(struct proc *, void *, register_t *);
int	svr4_sys_open64(struct proc *, void *, register_t *);
int	svr4_sys_socket(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	compat_43_sys_accept(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_setsockopt(struct proc *, void *, register_t *);
d610 2
a611 2
int	sys_ntp_gettime(struct proc *, void *, register_t *);
int	sys_ntp_adjtime(struct proc *, void *, register_t *);
@


1.26.4.5
log
@Sync the SMP branch with 3.3
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.33 2003/01/30 03:29:49 millert Exp 
d580 2
a581 2
int	sys_setreuid(struct proc *, void *, register_t *);
int	sys_setregid(struct proc *, void *, register_t *);
d609 5
@


1.25
log
@sync
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.24 1999/06/07 07:17:48 deraadt Exp 
d342 7
d372 16
d514 1
d524 3
@


1.24
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.23 1998/03/06 21:58:10 niklas Exp 
d408 1
a408 1
int	sys_pipe	__P((struct proc *, void *, register_t *));
@


1.23
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.22 1998/02/10 13:41:55 niklas Exp 
d434 1
a434 4
#ifdef COMPAT_SVR4_NCR
int	svr4_ncr_sys_rdebug	__P((struct proc *, void *, register_t *));
#else
#endif
@


1.22
log
@sync
@
text
@d1 2
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.21 1997/12/09 10:59:50 deraadt Exp 
@


1.21
log
@sync
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.20 1997/12/02 00:07:05 deraadt Exp 
@


1.20
log
@sync
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.19 1997/11/13 06:23:06 deraadt Exp 
d299 4
d479 1
a479 1
int	sys_setegid	__P((struct proc *, void *, register_t *));
@


1.19
log
@regen for prefix ntp system calls with sys_ like other system calls
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.18 1997/08/29 20:44:26 kstailey Exp 
d343 9
d489 1
@


1.18
log
@regen for ntp_gettime(2), ntp_adjtime(2)
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.17 1997/08/29 20:36:13 kstailey Exp 
d505 2
a506 2
int	ntp_gettime	__P((struct proc *, void *, register_t *));
int	ntp_adjtime	__P((struct proc *, void *, register_t *));
@


1.17
log
@regen for clock_gettime(2), clock_settime(2), clock_getres(2), microsleep(2)
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.16 1997/08/29 20:15:07 kstailey Exp 
d504 5
@


1.16
log
@regen for s/UNIMPL/STD/ for svr4_sys_socket()
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.15 1997/08/29 19:55:57 kstailey Exp 
d480 4
@


1.15
log
@regen for sockets
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.14 1997/08/29 19:35:20 kstailey Exp 
d350 6
d483 1
@


1.14
log
@pread(2) / pwrite(2), regen
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.13 1997/08/29 18:45:52 kstailey Exp 
d477 16
@


1.13
log
@sync (regen)
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.12 1997/03/28 22:03:49 kstailey Exp 
d322 14
d471 2
@


1.12
log
@added 34 - nice
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.11 1997/02/13 19:45:27 niklas Exp 
@


1.11
log
@regen
@
text
@d68 4
d368 1
@


1.10
log
@Regen.
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.10 1997/01/26 23:02:24 downsj Exp 
d281 9
d318 14
d361 1
d438 1
d452 4
@


1.9
log
@implement mincore syscall, just like sunos & ultrix compat do.
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.8 1996/08/02 21:55:24 niklas Exp 
d413 1
@


1.8
log
@Regen
@
text
@d398 1
@


1.7
log
@Added Makefiles to build stuff from syscalls.master in some emulations.
Regenerated derived files from various syscalls.master files. Added $OpenBSD$.
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.7 1996/08/02 20:20:33 niklas Exp 
a163 6
};

struct sys_poll_args {
	syscallarg(struct pollfd *) fds;
	syscallarg(unsigned long) nfds;
	syscallarg(int) timeout;
@


1.6
log
@Regenerated from new syscalls.master
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.5 1996/04/21 22:18:42 deraadt Exp 
d166 3
a168 3
struct svr4_sys_poll_args {
	syscallarg(struct svr4_pollfd *) fds;
	syscallarg(long) nfds;
d385 1
a385 1
int	svr4_sys_poll	__P((struct proc *, void *, register_t *));
@


1.5
log
@partial sync with netbsd 960418, more to come
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.4 1996/02/26 23:32:08 niklas Exp 
d376 4
@


1.4
log
@From NetBSD: update to 960217 sources
@
text
@d5 1
a5 1
 * created from	NetBSD: syscalls.master,v 1.17 1996/02/10 17:12:51 christos Exp 
@


1.3
log
@from christos; add utime() and utimes()
@
text
@d5 1
a5 1
 * created from	NetBSD: syscalls.master,v 1.15 1995/12/19 07:13:27 christos Exp 
d233 5
d247 5
d270 7
d399 1
d403 1
a403 1
int	sys_fpathconf	__P((struct proc *, void *, register_t *));
d411 1
@


1.2
log
@update from netbsd
@
text
@d5 1
a5 1
 * created from	NetBSD: syscalls.master,v 1.14 1995/10/14 20:25:06 christos Exp 
d58 5
d289 5
d327 1
d403 1
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 * created from	NetBSD: syscalls.master,v 1.13 1995/10/07 06:27:57 mycroft Exp 
d83 8
d96 15
d328 1
d333 1
d337 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

