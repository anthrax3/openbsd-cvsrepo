head	1.7;
access;
symbols
	OPENBSD_4_7:1.6.0.32
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.34
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.30
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.28
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.26
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.24
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.22
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.20
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.18
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.16
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.14
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.12
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.10
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.8
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.2
	UBC_BASE:1.5
	OPENBSD_3_0:1.3.0.10
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.8
	OPENBSD_2_8:1.3.0.6
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.0.8
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.6
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.4
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.2
	OPENBSD_2_1_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2010.07.02.19.57.53;	author tedu;	state dead;
branches;
next	1.6;

1.6
date	2002.03.14.01.26.50;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.15.06.22.30;	author art;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	99.11.26.16.44.28;	author art;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.01.11.05.12.14;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.01.13.11.07.52;	author niklas;	state Exp;
branches;
next	;

1.3.2.1
date	2001.11.13.21.05.48;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2001.12.05.00.43.28;	author niklas;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2002.03.28.11.28.06;	author niklas;	state Exp;
branches;
next	;

1.5.2.1
date	2002.06.11.03.28.08;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove sunos compat files
@
text
@/*	$OpenBSD: m68k4k_exec.c,v 1.6 2002/03/14 01:26:50 millert Exp $	*/
/*	$NetBSD: m68k4k_exec.c,v 1.1 1996/09/10 22:01:20 thorpej Exp $	*/

/*
 * Copyright (c) 1993, 1994 Christopher G. Demetriou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Exec glue to provide compatibility with older {Net,Open}BSD m68k4k
 * exectuables.
 *
 * Taken directly from kern/exec_aout.c and frobbed to map text and
 * data as m68k4k executables expect.
 *
 * This module only works on machines with PAGE_SIZE == 4096.  It's not clear
 * that making it work on other machines is worth the trouble.
 */

#if !defined(__m68k__)
#error YOU GOTTA BE KIDDING!
#endif

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/malloc.h>
#include <sys/vnode.h>
#include <sys/exec.h>
#include <sys/resourcevar.h>

#include <uvm/uvm_extern.h>

#include <compat/m68k4k/m68k4k_exec.h>

int	exec_m68k4k_prep_zmagic(struct proc *, struct exec_package *);
int	exec_m68k4k_prep_nmagic(struct proc *, struct exec_package *);
int	exec_m68k4k_prep_omagic(struct proc *, struct exec_package *);

/*
 * exec_m68k4k_makecmds(): Check if it's an a.out-format executable
 * with an m68k4k magic number.
 *
 * Given a proc pointer and an exec package pointer, see if the referent
 * of the epp is in a.out format.  Just check 'standard' magic numbers for
 * this architecture.
 *
 * This function, in the former case, or the hook, in the latter, is
 * responsible for creating a set of vmcmds which can be used to build
 * the process's vm space and inserting them into the exec package.
 */

int
exec_m68k4k_makecmds(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	u_long midmag, magic;
	u_short mid;
	int error;
	struct exec *execp = epp->ep_hdr;

	/* See note above... */
	if (M68K4K_LDPGSZ != PAGE_SIZE)
		return ENOEXEC;

	if (epp->ep_hdrvalid < sizeof(struct exec))
		return ENOEXEC;

	midmag = ntohl(execp->a_midmag);
	mid = (midmag >> 16) & 0x3ff;
	magic = midmag & 0xffff;

	midmag = mid << 16 | magic;

	switch (midmag) {
	case (MID_M68K4K << 16) | ZMAGIC:
		error = exec_m68k4k_prep_zmagic(p, epp);
		break;
	case (MID_M68K4K << 16) | NMAGIC:
		error = exec_m68k4k_prep_nmagic(p, epp);
		break;
	case (MID_M68K4K << 16) | OMAGIC:
		error = exec_m68k4k_prep_omagic(p, epp);
		break;
	default:
		error = ENOEXEC;
	}

	if (error)
		kill_vmcmds(&epp->ep_vmcmds);

	return error;
}

/*
 * exec_m68k4k_prep_zmagic(): Prepare an m68k4k ZMAGIC binary's exec package
 *
 * First, set of the various offsets/lengths in the exec package.
 *
 * Then, mark the text image busy (so it can be demand paged) or error
 * out if this is not possible.  Finally, set up vmcmds for the
 * text, data, bss, and stack segments.
 */

int
exec_m68k4k_prep_zmagic(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	struct exec *execp = epp->ep_hdr;

	epp->ep_taddr = M68K4K_USRTEXT;
	epp->ep_tsize = execp->a_text;
	epp->ep_daddr = epp->ep_taddr + execp->a_text;
	epp->ep_dsize = execp->a_data + execp->a_bss;
	epp->ep_entry = execp->a_entry;

	/*
	 * check if vnode is in open for writing, because we want to
	 * demand-page out of it.  if it is, don't do it, for various
	 * reasons
	 */
	if ((execp->a_text != 0 || execp->a_data != 0) &&
	    epp->ep_vp->v_writecount != 0) {
#ifdef DIAGNOSTIC
		if (epp->ep_vp->v_flag & VTEXT)
			panic("exec: a VTEXT vnode has writecount != 0");
#endif
		return ETXTBSY;
	}
	vn_marktext(epp->ep_vp);

	/* set up command for text segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_pagedvn, execp->a_text,
	    epp->ep_taddr, epp->ep_vp, 0, VM_PROT_READ|VM_PROT_EXECUTE);

	/* set up command for data segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_pagedvn, execp->a_data,
	    epp->ep_daddr, epp->ep_vp, execp->a_text,
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/* set up command for bss segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, execp->a_bss,
	    epp->ep_daddr + execp->a_data, NULLVP, 0,
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	return exec_setup_stack(p, epp);
}

/*
 * exec_m68k4k_prep_nmagic(): Prepare a m68k4k NMAGIC binary's exec package
 */

int
exec_m68k4k_prep_nmagic(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	struct exec *execp = epp->ep_hdr;
	long bsize, baddr;

	epp->ep_taddr = M68K4K_USRTEXT;
	epp->ep_tsize = execp->a_text;
	epp->ep_daddr = roundup(epp->ep_taddr + execp->a_text,
	    M68K4K_LDPGSZ);
	epp->ep_dsize = execp->a_data + execp->a_bss;
	epp->ep_entry = execp->a_entry;

	/* set up command for text segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_readvn, execp->a_text,
	    epp->ep_taddr, epp->ep_vp, sizeof(struct exec),
	    VM_PROT_READ|VM_PROT_EXECUTE);

	/* set up command for data segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_readvn, execp->a_data,
	    epp->ep_daddr, epp->ep_vp, execp->a_text + sizeof(struct exec),
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/* set up command for bss segment */
	baddr = round_page(epp->ep_daddr + execp->a_data);
	bsize = epp->ep_daddr + epp->ep_dsize - baddr;
	if (bsize > 0)
		NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, bsize, baddr,
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	return exec_setup_stack(p, epp);
}

/*
 * exec_m68k4k_prep_omagic(): Prepare a m68k4k OMAGIC binary's exec package
 */

int
exec_m68k4k_prep_omagic(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	struct exec *execp = epp->ep_hdr;
	long dsize, bsize, baddr;

	epp->ep_taddr = M68K4K_USRTEXT;
	epp->ep_tsize = execp->a_text;
	epp->ep_daddr = epp->ep_taddr + execp->a_text;
	epp->ep_dsize = execp->a_data + execp->a_bss;
	epp->ep_entry = execp->a_entry;

	/* set up command for text and data segments */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_readvn,
	    execp->a_text + execp->a_data, epp->ep_taddr, epp->ep_vp,
	    sizeof(struct exec), VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/* set up command for bss segment */
	baddr = round_page(epp->ep_daddr + execp->a_data);
	bsize = epp->ep_daddr + epp->ep_dsize - baddr;
	if (bsize > 0)
		NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, bsize, baddr,
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/*
	 * Make sure (# of pages) mapped above equals (vm_tsize + vm_dsize);
	 * obreak(2) relies on this fact. Both `vm_tsize' and `vm_dsize' are
	 * computed (in execve(2)) by rounding *up* `ep_tsize' and `ep_dsize'
	 * respectively to page boundaries.
	 * Compensate `ep_dsize' for the amount of data covered by the last
	 * text page. 
	 */
	dsize = epp->ep_dsize + execp->a_text - round_page(execp->a_text);
	epp->ep_dsize = (dsize > 0) ? dsize : 0;
	return exec_setup_stack(p, epp);
}
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: m68k4k_exec.c,v 1.5 2001/11/15 06:22:30 art Exp $	*/
@


1.5
log
@New function vn_marktext - mark a vnode as executing a text image.
Use where VTEXT was set in vnode flags before. Doesn't do anything else (yet).
@
text
@d1 1
a1 1
/*	$OpenBSD: m68k4k_exec.c,v 1.4 2001/11/06 19:53:17 miod Exp $	*/
d61 3
a63 3
int	exec_m68k4k_prep_zmagic __P((struct proc *, struct exec_package *));
int	exec_m68k4k_prep_nmagic __P((struct proc *, struct exec_package *));
int	exec_m68k4k_prep_omagic __P((struct proc *, struct exec_package *));
@


1.5.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: m68k4k_exec.c,v 1.5 2001/11/15 06:22:30 art Exp $	*/
d61 3
a63 3
int	exec_m68k4k_prep_zmagic(struct proc *, struct exec_package *);
int	exec_m68k4k_prep_nmagic(struct proc *, struct exec_package *);
int	exec_m68k4k_prep_omagic(struct proc *, struct exec_package *);
@


1.4
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: m68k4k_exec.c,v 1.3 1999/11/26 16:44:28 art Exp $	*/
d157 1
a157 1
	epp->ep_vp->v_flag |= VTEXT;
@


1.3
log
@Use round_page(X) instead of roundup(X, NBPG), use PAGE_SIZE instead of NBPG.
@
text
@d1 1
a1 1
/*	$OpenBSD: m68k4k_exec.c,v 1.2 1999/01/11 05:12:14 millert Exp $	*/
d57 1
a57 1
#include <vm/vm.h>
@


1.3.2.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 1
a57 1
#include <uvm/uvm_extern.h>
@


1.3.2.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: m68k4k_exec.c,v 1.3.2.1 2001/11/13 21:05:48 niklas Exp $	*/
d157 1
a157 1
	vn_marktext(epp->ep_vp);
@


1.3.2.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 3
a63 3
int	exec_m68k4k_prep_zmagic(struct proc *, struct exec_package *);
int	exec_m68k4k_prep_nmagic(struct proc *, struct exec_package *);
int	exec_m68k4k_prep_omagic(struct proc *, struct exec_package *);
@


1.2
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 1
/*	$OpenBSD: m68k4k_exec.c,v 1.1 1997/01/13 11:07:52 niklas Exp $	*/
d41 1
a41 1
 * This module only works on machines with NBPG == 4096.  It's not clear
d89 1
a89 1
	if (M68K4K_LDPGSZ != NBPG)
d206 1
a206 1
	baddr = roundup(epp->ep_daddr + execp->a_data, NBPG);
d239 1
a239 1
	baddr = roundup(epp->ep_daddr + execp->a_data, NBPG);
d253 1
a253 1
	dsize = epp->ep_dsize + execp->a_text - roundup(execp->a_text, NBPG);
@


1.1
log
@Import compat_m68k4k from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: m68k4k_exec.c,v 1.1 1996/09/10 22:01:20 thorpej Exp $	*/
d153 1
a153 1
			panic("exec: a VTEXT vnode has writecount != 0\n");
@

