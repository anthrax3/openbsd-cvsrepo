head	1.20;
access;
symbols
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.4
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.18.0.14
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.12
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.10
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.8
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.6
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.4
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.2
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.17.0.10
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.8
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.6
	OPENBSD_3_6_BASE:1.17
	SMP_SYNC_A:1.17
	SMP_SYNC_B:1.17
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	UBC_SYNC_A:1.16
	OPENBSD_3_3:1.16.0.6
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.4
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.16.0.2
	OPENBSD_3_1_BASE:1.16
	UBC_SYNC_B:1.16
	UBC:1.15.0.2
	UBC_BASE:1.15
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.4
	OPENBSD_2_8:1.11.0.2
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.10.0.4
	OPENBSD_2_7_BASE:1.10
	SMP:1.10.0.2
	SMP_BASE:1.10
	kame_19991208:1.10
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.7.0.8
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.6
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2010.07.02.19.57.53;	author tedu;	state dead;
branches;
next	1.19;

1.19
date	2009.03.05.19.52.24;	author kettenis;	state Exp;
branches;
next	1.18;

1.18
date	2005.12.30.19.46.55;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.02.15.54.31;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.14.01.26.50;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.15.06.22.30;	author art;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.11.20.05.25;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.11.23.04.48;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2000.08.15.17.26.05;	author brad;	state Exp;
branches;
next	1.10;

1.10
date	99.11.26.16.44.28;	author art;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	99.07.02.17.53.50;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	99.01.11.05.12.14;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	96.12.23.02.56.50;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.08.31.09.24.04;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	96.05.10.12.50.23;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.04.18.21.21.43;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	95.11.29.17.02.41;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.11.28.20.43.08;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.21;	author deraadt;	state Exp;
branches;
next	;

1.10.2.1
date	2001.05.14.22.05.19;	author niklas;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2001.10.31.03.11.46;	author nate;	state Exp;
branches;
next	1.10.2.3;

1.10.2.3
date	2001.11.13.21.05.48;	author niklas;	state Exp;
branches;
next	1.10.2.4;

1.10.2.4
date	2001.12.05.00.43.28;	author niklas;	state Exp;
branches;
next	1.10.2.5;

1.10.2.5
date	2002.03.28.11.28.06;	author niklas;	state Exp;
branches;
next	1.10.2.6;

1.10.2.6
date	2003.06.07.11.00.37;	author ho;	state Exp;
branches;
next	;

1.15.2.1
date	2002.06.11.03.28.08;	author art;	state Exp;
branches;
next	;


desc
@@


1.20
log
@remove sunos compat files
@
text
@/*	$OpenBSD: sunos_exec.c,v 1.19 2009/03/05 19:52:24 kettenis Exp $	*/
/*	$NetBSD: sunos_exec.c,v 1.11 1996/05/05 12:01:47 briggs Exp $	*/

/*
 * Copyright (c) 1993 Theo de Raadt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/filedesc.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/mount.h>
#include <sys/malloc.h>
#include <sys/namei.h>
#include <sys/signalvar.h>
#include <sys/vnode.h>
#include <sys/file.h>
#include <sys/core.h>
#include <sys/exec.h>
#include <sys/resourcevar.h>
#include <sys/wait.h>

#include <sys/mman.h>
#include <uvm/uvm_extern.h>

#include <machine/cpu.h>
#include <machine/reg.h>
#include <machine/exec.h>

#include <compat/sunos/sunos.h>
#include <compat/sunos/sunos_exec.h>
#include <compat/sunos/sunos_syscall.h>

#ifdef __sparc__
#define	sunos_exec_aout_prep_zmagic exec_aout_prep_zmagic
#define	sunos_exec_aout_prep_nmagic exec_aout_prep_nmagic
#define	sunos_exec_aout_prep_omagic exec_aout_prep_omagic
#endif

int sunos_exec_aout_makecmds(struct proc *, struct exec_package *);
int sunos_exec_aout_prep_zmagic(struct proc *, struct exec_package *);
int sunos_exec_aout_prep_nmagic(struct proc *, struct exec_package *);
int sunos_exec_aout_prep_omagic(struct proc *, struct exec_package *);

extern int nsunos_sysent;
extern struct sysent sunos_sysent[];
#ifdef SYSCALL_DEBUG
extern char *sunos_syscallnames[];
#endif
extern char sigcode[], esigcode[];
const char sunos_emul_path[] = "/emul/sunos";

struct emul emul_sunos = {
	"sunos",
	NULL,
#ifdef __sparc__
	sendsig,
#else
	sunos_sendsig,
#endif
	SUNOS_SYS_syscall,
	SUNOS_SYS_MAXSYSCALL,
	sunos_sysent,
#ifdef SYSCALL_DEBUG
	sunos_syscallnames,
#else
	NULL,
#endif
	0,
	copyargs,
	setregs,
	NULL,
	coredump_trad,
	sigcode,
	esigcode,
};

int
sunos_exec_aout_makecmds(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	struct sunos_exec *sunmag = epp->ep_hdr;
	int error = ENOEXEC;

	if (epp->ep_hdrvalid < sizeof(struct sunos_exec))
		return (ENOEXEC);

	if(sunmag->a_machtype != SUNOS_M_NATIVE)
		return (ENOEXEC);

	switch (sunmag->a_magic) {
	case ZMAGIC:
		error = sunos_exec_aout_prep_zmagic(p, epp);
		break;
	case NMAGIC:
		error = sunos_exec_aout_prep_nmagic(p, epp);
		break;
	case OMAGIC:
		error = sunos_exec_aout_prep_omagic(p, epp);
		break;
	}
	if (error==0)
		epp->ep_emul = &emul_sunos;
	return error;
}

/*
 * the code below is only needed for sun3 emulation.
 */
#ifndef __sparc__

/* suns keep data seg aligned to SEGSIZ because of sun custom mmu */
#define SEGSIZ		0x20000
#define SUNOS_N_TXTADDR(x,m)	__LDPGSZ
#define SUNOS_N_DATADDR(x,m)	(((m)==OMAGIC) ? \
	(SUNOS_N_TXTADDR(x,m) + (x).a_text) : \
	(SEGSIZ + ((SUNOS_N_TXTADDR(x,m) + (x).a_text - 1) & ~(SEGSIZ-1))))
#define SUNOS_N_BSSADDR(x,m)	(SUNOS_N_DATADDR(x,m)+(x).a_data)

#define SUNOS_N_TXTOFF(x,m)	((m)==ZMAGIC ? 0 : sizeof (struct exec))
#define SUNOS_N_DATOFF(x,m)	(SUNOS_N_TXTOFF(x,m) + (x).a_text)

/*
 * sunos_exec_aout_prep_zmagic(): Prepare a SunOS ZMAGIC binary's exec package
 *
 * First, set of the various offsets/lengths in the exec package.
 *
 * Then, mark the text image busy (so it can be demand paged) or error
 * out if this is not possible.  Finally, set up vmcmds for the
 * text, data, bss, and stack segments.
 */
int
sunos_exec_aout_prep_zmagic(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	struct exec *execp = epp->ep_hdr;

	epp->ep_taddr = SUNOS_N_TXTADDR(*execp, ZMAGIC);
	epp->ep_tsize = execp->a_text;
	epp->ep_daddr = SUNOS_N_DATADDR(*execp, ZMAGIC);
	epp->ep_dsize = execp->a_data + execp->a_bss;
	epp->ep_entry = execp->a_entry;

	/*
	 * check if vnode is in open for writing, because we want to
	 * demand-page out of it.  if it is, don't do it, for various
	 * reasons
	 */
	if ((execp->a_text != 0 || execp->a_data != 0) &&
	    epp->ep_vp->v_writecount != 0) {
#ifdef DIAGNOSTIC
		if (epp->ep_vp->v_flag & VTEXT)
			panic("exec: a VTEXT vnode has writecount != 0");
#endif
		return ETXTBSY;
	}
	vn_marktext(epp->ep_vp);

	/* set up command for text segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_pagedvn, execp->a_text,
	    epp->ep_taddr, epp->ep_vp, SUNOS_N_TXTOFF(*execp, ZMAGIC), 
	    VM_PROT_READ|VM_PROT_EXECUTE);

	/* set up command for data segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_pagedvn, execp->a_data,
	    epp->ep_daddr, epp->ep_vp, SUNOS_N_DATOFF(*execp, ZMAGIC),
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/* set up command for bss segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, execp->a_bss,
	    epp->ep_daddr + execp->a_data, NULLVP, 0,
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	return exec_setup_stack(p, epp);
}

/*
 * sunos_exec_aout_prep_nmagic(): Prepare a SunOS NMAGIC binary's exec package
 */
int
sunos_exec_aout_prep_nmagic(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	struct exec *execp = epp->ep_hdr;
	long bsize, baddr;

	epp->ep_taddr = SUNOS_N_TXTADDR(*execp, NMAGIC);
	epp->ep_tsize = execp->a_text;
	epp->ep_daddr = SUNOS_N_DATADDR(*execp, NMAGIC);
	epp->ep_dsize = execp->a_data + execp->a_bss;
	epp->ep_entry = execp->a_entry;

	/* set up command for text segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_readvn, execp->a_text,
	    epp->ep_taddr, epp->ep_vp, SUNOS_N_TXTOFF(*execp, NMAGIC),
	    VM_PROT_READ|VM_PROT_EXECUTE);

	/* set up command for data segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_readvn, execp->a_data,
	    epp->ep_daddr, epp->ep_vp, SUNOS_N_DATOFF(*execp, NMAGIC),
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/* set up command for bss segment */
	baddr = round_page(epp->ep_daddr + execp->a_data);
	bsize = epp->ep_daddr + epp->ep_dsize - baddr;
	if (bsize > 0)
		NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, bsize, baddr,
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	return exec_setup_stack(p, epp);
}

/*
 * sunos_exec_aout_prep_omagic(): Prepare a SunOS OMAGIC binary's exec package
 */
int
sunos_exec_aout_prep_omagic(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	struct exec *execp = epp->ep_hdr;
	long bsize, baddr;

	epp->ep_taddr = SUNOS_N_TXTADDR(*execp, OMAGIC);
	epp->ep_tsize = execp->a_text;
	epp->ep_daddr = SUNOS_N_DATADDR(*execp, OMAGIC);
	epp->ep_dsize = execp->a_data + execp->a_bss;
	epp->ep_entry = execp->a_entry;

	/* set up command for text and data segments */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_readvn,
	    execp->a_text + execp->a_data, epp->ep_taddr, epp->ep_vp,
	    SUNOS_N_TXTOFF(*execp, OMAGIC), VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/* set up command for bss segment */
	baddr = round_page(epp->ep_daddr + execp->a_data);
	bsize = epp->ep_daddr + epp->ep_dsize - baddr;
	if (bsize > 0)
		NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, bsize, baddr,
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	return exec_setup_stack(p, epp);
}
#endif /* !__sparc__ */
@


1.19
log
@Make ELF platforms generate ELF core dumps.  Somewhat based on code from
NetBSD.

ok kurt@@, drahn@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.18 2005/12/30 19:46:55 miod Exp $	*/
@


1.18
log
@Missing or incorrect header sizes bounds check; ``looks ok'' mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.17 2003/06/02 15:54:31 deraadt Exp $	*/
d40 1
d95 1
@


1.17
log
@some license cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.16 2002/03/14 01:26:50 millert Exp $	*/
d105 3
@


1.16
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.15 2001/11/15 06:22:30 art Exp $	*/
a15 2
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
@


1.15
log
@New function vn_marktext - mark a vnode as executing a text image.
Use where VTEXT was set in vnode flags before. Doesn't do anything else (yet).
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.14 2001/11/06 19:53:17 miod Exp $	*/
d63 4
a66 4
int sunos_exec_aout_makecmds __P((struct proc *, struct exec_package *));
int sunos_exec_aout_prep_zmagic __P((struct proc *, struct exec_package *));
int sunos_exec_aout_prep_nmagic __P((struct proc *, struct exec_package *));
int sunos_exec_aout_prep_omagic __P((struct proc *, struct exec_package *));
@


1.15.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.15 2001/11/15 06:22:30 art Exp $	*/
d63 4
a66 4
int sunos_exec_aout_makecmds(struct proc *, struct exec_package *);
int sunos_exec_aout_prep_zmagic(struct proc *, struct exec_package *);
int sunos_exec_aout_prep_nmagic(struct proc *, struct exec_package *);
int sunos_exec_aout_prep_omagic(struct proc *, struct exec_package *);
@


1.14
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.13 2001/09/11 20:05:25 miod Exp $	*/
d178 1
a178 1
	epp->ep_vp->v_flag |= VTEXT;
@


1.13
log
@Don't include <vm/vm_kern.h> if you don't need foo_map.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.12 2001/08/11 23:04:48 art Exp $	*/
d47 1
a47 1
#include <vm/vm.h>
@


1.12
log
@redundant includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.11 2000/08/15 17:26:05 brad Exp $	*/
a47 1
#include <vm/vm_kern.h>
@


1.11
log
@keep file naming consistent, rename exec.h -> sunos_exec.h
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.10 1999/11/26 16:44:28 art Exp $	*/
a47 2
#include <vm/vm_param.h>
#include <vm/vm_map.h>
a48 1
#include <vm/vm_pager.h>
@


1.10
log
@Use round_page(X) instead of roundup(X, NBPG), use PAGE_SIZE instead of NBPG.
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.9 1999/07/02 17:53:50 brad Exp $	*/
a56 1
#include <compat/sunos/exec.h>
d58 1
@


1.10.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.11 2000/08/15 17:26:05 brad Exp $	*/
d57 1
a58 1
#include <compat/sunos/sunos_exec.h>
@


1.10.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.10.2.1 2001/05/14 22:05:19 niklas Exp $	*/
d48 4
@


1.10.2.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
#include <uvm/uvm_extern.h>
@


1.10.2.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.10.2.3 2001/11/13 21:05:48 niklas Exp $	*/
d178 1
a178 1
	vn_marktext(epp->ep_vp);
@


1.10.2.5
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 4
a66 4
int sunos_exec_aout_makecmds(struct proc *, struct exec_package *);
int sunos_exec_aout_prep_zmagic(struct proc *, struct exec_package *);
int sunos_exec_aout_prep_nmagic(struct proc *, struct exec_package *);
int sunos_exec_aout_prep_omagic(struct proc *, struct exec_package *);
@


1.10.2.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.10.2.5 2002/03/28 11:28:06 niklas Exp $	*/
d16 2
@


1.9
log
@sparc -> __sparc__
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.8 1999/01/11 05:12:14 millert Exp $	*/
d230 1
a230 1
	baddr = roundup(epp->ep_daddr + execp->a_data, NBPG);
d262 1
a262 1
	baddr = roundup(epp->ep_daddr + execp->a_data, NBPG);
@


1.8
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.7 1996/12/23 02:56:50 deraadt Exp $	*/
d61 1
a61 1
#ifdef sparc
d83 1
a83 1
#ifdef sparc
d134 1
a134 1
#ifndef sparc
d270 1
a270 1
#endif /* !sparc */
@


1.7
log
@use _{NLIST,KERN}_DO_{AOUT,ELF,ECOFF} to select binary types
@
text
@d1 1
a1 1
/*	$OpenBSD: sunos_exec.c,v 1.6 1996/08/31 09:24:04 pefo Exp $	*/
d178 1
a178 1
			panic("exec: a VTEXT vnode has writecount != 0\n");
@


1.6
log
@Cleanup exec
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d199 1
a199 1
	return exec_aout_setup_stack(p, epp);
d236 1
a236 1
	return exec_aout_setup_stack(p, epp);
d268 1
a268 1
	return exec_aout_setup_stack(p, epp);
@


1.5
log
@simple things
@
text
@d99 1
@


1.4
log
@Merge of NetBSD 960317
@
text
@d2 1
a2 1
/*	$NetBSD: sunos_exec.c,v 1.10 1996/03/14 19:33:44 christos Exp $	*/
d58 1
a76 1
extern void sunos_sendsig __P((sig_t, int, int, u_long));
@


1.3
log
@niklas pointed out the new MDP_UNCACHE_WX might break fork/exec.
always set/clear in setregs() now
@
text
@d1 2
a2 1
/*	$NetBSD: sunos_exec.c,v 1.9 1995/06/25 14:15:08 briggs Exp $	*/
d66 5
a160 1
	struct exec_vmcmd *ccmdp;
a209 1
	struct exec_vmcmd *ccmdp;
a246 1
	struct exec_vmcmd *ccmdp;
@


1.2
log
@Fix SunOS emulation on 040
@
text
@a70 4
#ifdef m68k
extern void sunos_setregs __P((struct proc *, struct exec_package *, u_long,
			       register_t *));
#endif
a91 3
#ifdef m68k
	sunos_setregs,
#else
a92 1
#endif
@


1.1
log
@Initial revision
@
text
@d71 4
d96 3
d100 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
