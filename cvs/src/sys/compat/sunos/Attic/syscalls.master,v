head	1.18;
access;
symbols
	OPENBSD_4_7:1.17.0.8
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.10
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.6
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.4
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.2
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.16.0.14
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.12
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.10
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.8
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.6
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.11.0.14
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.12
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.10
	OPENBSD_2_8:1.11.0.8
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.6
	OPENBSD_2_7_BASE:1.11
	SMP:1.11.0.4
	SMP_BASE:1.11
	kame_19991208:1.11
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.10.0.6
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.4
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.7.0.2
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.18
date	2010.07.02.19.57.53;	author tedu;	state dead;
branches;
next	1.17;

1.17
date	2008.01.05.00.36.13;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2004.07.09.23.52.02;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2004.05.28.18.28.14;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2003.05.11.19.45.18;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.30.03.29.49;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.00.42.25;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	99.06.07.07.17.48;	author deraadt;	state Exp;
branches
	1.11.4.1
	1.11.14.1;
next	1.10;

1.10
date	98.03.23.07.12.40;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	98.03.23.06.54.17;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.11.13.18.35.29;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.07.28.09.53.13;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.01.26.23.52.03;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	96.08.25.12.19.58;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.08.02.21.55.22;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.08.02.20.20.31;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.04.18.21.21.48;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.22;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.22;	author deraadt;	state Exp;
branches;
next	;

1.11.4.1
date	2002.03.28.11.28.06;	author niklas;	state Exp;
branches;
next	1.11.4.2;

1.11.4.2
date	2003.03.27.23.53.48;	author niklas;	state Exp;
branches;
next	1.11.4.3;

1.11.4.3
date	2003.05.13.19.21.27;	author ho;	state Exp;
branches;
next	1.11.4.4;

1.11.4.4
date	2004.06.05.23.12.35;	author niklas;	state Exp;
branches;
next	;

1.11.14.1
date	2002.06.11.03.28.08;	author art;	state Exp;
branches;
next	1.11.14.2;

1.11.14.2
date	2003.05.19.21.52.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.18
log
@remove sunos compat files
@
text
@	$OpenBSD: syscalls.master,v 1.17 2008/01/05 00:36:13 miod Exp $
;	$NetBSD: syscalls.master,v 1.33 1996/02/28 16:05:43 pk Exp $

;	@@(#)syscalls.master	8.1 (Berkeley) 7/19/93

; OpenBSD COMPAT_SUNOS system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall switch definition file only.

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/poll.h>
#include <sys/syscallargs.h>

#include <compat/sunos/sunos.h>
#include <compat/sunos/sunos_syscallargs.h>

0	NOARGS		{ int sys_nosys(void); } syscall
1	NOARGS		{ int sys_exit(int rval); }
2	NOARGS		{ int sys_fork(void); }
3	NOARGS		{ int sys_read(int fd, char *buf, u_int nbyte); }
4	NOARGS		{ int sys_write(int fd, char *buf, u_int nbyte); }
5	STD		{ int sunos_sys_open(char *path, int flags, int mode); }
6	NOARGS		{ int sys_close(int fd); }
7	STD		{ int sunos_sys_wait4(int pid, int *status, \
			    int options, struct rusage *rusage); }
8	STD		{ int sunos_sys_creat(char *path, int mode); }
9	NOARGS		{ int sys_link(char *path, char *link); }
10	NOARGS		{ int sys_unlink(char *path); }
11	STD		{ int sunos_sys_execv(char *path, char **argp); }
12	NOARGS		{ int sys_chdir(char *path); }
13	OBSOL		time
14	STD		{ int sunos_sys_mknod(char *path, int mode, int dev); }
15	NOARGS		{ int sys_chmod(char *path, int mode); }
16	NOARGS		{ int sys_lchown(char *path, int uid, int gid); }
17	NOARGS		{ int sys_obreak(char *nsize); } break
18	OBSOL		stat
19	NOARGS		{ long compat_43_sys_lseek(int fd, long offset, int whence); }
20	NOARGS		{ pid_t sys_getpid(void); }
21	OBSOL		sunos_old_mount
22	UNIMPL		System V umount
23	NOARGS		{ int sys_setuid(uid_t uid); }
24	NOARGS		{ uid_t sys_getuid(void); }
25	STD		{ int sunos_sys_ostime(int time); }
#ifdef PTRACE
26	STD		{ long sunos_sys_ptrace(int req, pid_t pid, \
			    caddr_t addr, int data, char *addr2); }
#else
26	UNIMPL		sunos_ptrace
#endif
27	UNIMPL		sunos_alarm
28	UNIMPL		sunos_fstat
29	UNIMPL		sunos_pause
30	UNIMPL		sunos_utime
31	UNIMPL		sunos_stty
32	UNIMPL		sunos_gtty
33	STD		{ int sunos_sys_access(char *path, int flags); }
34	UNIMPL		sunos_nice
35	UNIMPL		sunos_ftime
36	NOARGS		{ int sys_sync(void); }
37	NOARGS		{ int sys_kill(int pid, int signum); }
38	STD		{ int sunos_sys_stat(char *path, struct stat43 *ub); }
39	UNIMPL		sunos_setpgrp
40	STD		{ int sunos_sys_lstat(char *path, struct stat43 *ub); }
41	NOARGS		{ int sys_dup(u_int fd); }
42	NOARGS		{ int sys_opipe(void); }
43	STD		{ int sunos_sys_otimes(struct tms *tp); }
44	NOARGS		{ int sys_profil(caddr_t samples, u_int size, \
			    u_int offset, u_int scale); }
45	UNIMPL		
46	NOARGS		{ int sys_setgid(uid_t gid); }
47	NOARGS		{ gid_t sys_getgid(void); }
48	UNIMPL		sunos_ssig
49	UNIMPL		reserved for USG
50	UNIMPL		reserved for USG
#ifdef ACCOUNTING
51	NOARGS		{ int sys_acct(char *path); }
#else
51	UNIMPL		acct
#endif
52	UNIMPL		
53	STD		{ int sunos_sys_mctl(caddr_t addr, int len, int func, \
			    void *arg); }
54	STD		{ int sunos_sys_ioctl(int fd, u_long com, \
			    caddr_t data); }
55	STD		{ int sunos_sys_reboot(int howto, char *bootstr); }
56	OBSOL		sunos_owait3
57	NOARGS		{ int sys_symlink(char *path, char *link); }
58	NOARGS		{ int sys_readlink(char *path, char *buf, int count); }
59	STD		{ int sunos_sys_execve(char *path, char **argp, \
			    char **envp); }
60	NOARGS		{ int sys_umask(int newmask); }
61	NOARGS		{ int sys_chroot(char *path); }
62	NOARGS		{ int compat_43_sys_fstat(int fd, struct stat43 *sb); }
63	UNIMPL		
64	NOARGS		{ int compat_43_sys_getpagesize(void); }
65	NOARGS		{ int sys_msync(void *addr, size_t len, \
			    int flags); }
66	NOARGS		{ int sys_vfork(void); }
67	OBSOL		vread
68	OBSOL		vwrite
69	NOARGS		{ int sys_sbrk(int incr); }
70	NOARGS		{ int sys_sstk(int incr); }
71	STD		{ int sunos_sys_mmap(caddr_t addr, size_t len, \
			    int prot, int flags, int fd, long pos); }
72	OBSOL		vadvise
73	NOARGS		{ int sys_munmap(caddr_t addr, size_t len); }
74	NOARGS		{ int sys_mprotect(caddr_t addr, size_t len, \
			    int prot); }
75	NOARGS		{ int sys_madvise(caddr_t addr, size_t len, \
			    int behav); }
76	STD		{ int sunos_sys_vhangup(void); }
77	UNIMPL		vlimit
78	NOARGS		{ int sys_mincore(caddr_t addr, size_t len, \
			    char *vec); }
79	NOARGS		{ int sys_getgroups(u_int gidsetsize, gid_t *gidset); }
80	NOARGS		{ int sys_setgroups(u_int gidsetsize, gid_t *gidset); }
81	NOARGS		{ int sys_getpgrp(void); }
82	STD		{ int sunos_sys_setpgrp(int pid, int pgid); }
83	NOARGS		{ int sys_setitimer(u_int which, \
			    struct itimerval *itv, struct itimerval *oitv); }
84	UNIMPL		{ int sunos_sys_wait(void); }
85	NOARGS		{ int compat_25_sys_swapon(char *name); }
86	NOARGS		{ int sys_getitimer(u_int which, \
			    struct itimerval *itv); }
87	NOARGS		{ int compat_43_sys_gethostname(char *hostname, \
			    u_int len); }
88	NOARGS		{ int compat_43_sys_sethostname(char *hostname, \
			    u_int len); }
89	NOARGS		{ int compat_43_sys_getdtablesize(void); }
90	NOARGS		{ int sys_dup2(u_int from, u_int to); }
91	UNIMPL		getdopt
92	STD		{ int sunos_sys_fcntl(int fd, int cmd, void *arg); }
93	NOARGS		{ int sys_select(u_int nd, fd_set *in, fd_set *ou, \
			    fd_set *ex, struct timeval *tv); }
94	UNIMPL		setdopt
95	NOARGS		{ int sys_fsync(int fd); }
96	NOARGS		{ int sys_setpriority(int which, int who, int prio); }
97	NOARGS		{ int sys_socket(int domain, int type, int protocol); }
98	NOARGS		{ int sys_connect(int s, caddr_t name, int namelen); }
99	NOARGS		{ int compat_43_sys_accept(int s, caddr_t name, \
			    int *anamelen); }
100	NOARGS		{ int sys_getpriority(int which, int who); }
101	NOARGS		{ int compat_43_sys_send(int s, caddr_t buf, int len, \
			    int flags); }
102	NOARGS		{ int compat_43_sys_recv(int s, caddr_t buf, int len, \
			    int flags); }
103	UNIMPL		old socketaddr
104	NOARGS		{ int sys_bind(int s, caddr_t name, int namelen); }
105	STD		{ int sunos_sys_setsockopt(int s, int level, int name, \
			    caddr_t val, int valsize); }
106	NOARGS		{ int sys_listen(int s, int backlog); }
107	UNIMPL		vtimes
108	STD		{ int sunos_sys_sigvec(int signum, struct sigvec *nsv, \
			    struct sigvec *osv); }
109	NOARGS		{ int compat_43_sys_sigblock(int mask); }
110	NOARGS		{ int compat_43_sys_sigsetmask(int mask); }
111	NOARGS		{ int sys_sigsuspend(int mask); }
112	NOARGS		{ int compat_43_sys_sigstack(struct sigstack *nss, \
			    struct sigstack *oss); }
113	NOARGS		{ int compat_43_sys_recvmsg(int s, \
			    struct omsghdr *msg, int flags); }
114	NOARGS		{ int compat_43_sys_sendmsg(int s, caddr_t msg, \
			    int flags); }
115	OBSOL		vtrace
116	NOARGS		{ int sys_gettimeofday(struct timeval *tp, \
			    struct timezone *tzp); }
117	NOARGS		{ int sys_getrusage(int who, struct rusage *rusage); }
118	NOARGS		{ int sys_getsockopt(int s, int level, int name, \
			    caddr_t val, int *avalsize); }
119	UNIMPL		
120	NOARGS		{ int sys_readv(int fd, struct iovec *iovp, \
			    u_int iovcnt); }
121	NOARGS		{ int sys_writev(int fd, struct iovec *iovp, \
			    u_int iovcnt); }
122	NOARGS		{ int sys_settimeofday(struct timeval *tv, \
			    struct timezone *tzp); }
123	NOARGS		{ int sys_fchown(int fd, int uid, int gid); }
124	NOARGS		{ int sys_fchmod(int fd, int mode); }
125	NOARGS		{ int compat_43_sys_recvfrom(int s, caddr_t buf, \
			    size_t len, int flags, caddr_t from, \
			    int *fromlenaddr); }
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
128	NOARGS		{ int sys_rename(char *from, char *to); }
129	NOARGS		{ int compat_43_sys_truncate(char *path, long length); }
130	NOARGS		{ int compat_43_sys_ftruncate(int fd, long length); }
131	NOARGS		{ int sys_flock(int fd, int how); }
132	UNIMPL		
133	NOARGS		{ int sys_sendto(int s, caddr_t buf, size_t len, \
			    int flags, caddr_t to, int tolen); }
134	NOARGS		{ int sys_shutdown(int s, int how); }
135	NOARGS		{ int sys_socketpair(int domain, int type, \
			    int protocol, int *rsv); }
136	NOARGS		{ int sys_mkdir(char *path, int mode); }
137	NOARGS		{ int sys_rmdir(char *path); }
138	NOARGS		{ int sys_utimes(char *path, struct timeval *tptr); }
139	STD		{ int sunos_sys_sigreturn(struct sigcontext *sigcntxp); }
140	NOARGS		{ int sys_adjtime(struct timeval *delta, \
			    struct timeval *olddelta); }
141	NOARGS		{ int compat_43_sys_getpeername(int fdes, caddr_t asa, \
			    int *alen); }
142	NOARGS		{ int compat_43_sys_gethostid(void); }
143	UNIMPL		old sethostid
144	STD		{ int sunos_sys_getrlimit(u_int which, \
			    struct orlimit *rlp); }
145	STD		{ int sunos_sys_setrlimit(u_int which, \
			    struct orlimit *rlp); }
146	NOARGS		{ int compat_43_sys_killpg(int pgid, int signum); }
147	UNIMPL		
148	UNIMPL		
149	UNIMPL		
150	NOARGS		{ int compat_43_sys_getsockname(int fdes, caddr_t asa, \
			    int *alen); }
151	UNIMPL		getmsg
152	UNIMPL		putmsg
153	NOARGS		{ int sys_poll(struct pollfd *fds, \
			    unsigned long nfds, int timeout); }
154	UNIMPL		
#ifdef NFSSERVER
155	STD		{ int sunos_sys_nfssvc(int fd); }
#else
155	UNIMPL		
#endif
156	NOARGS		{ int sys_getdirentries(int fd, char *buf, \
			    u_int count, long *basep); }
157	STD		{ int sunos_sys_statfs(char *path, \
			    struct sunos_statfs *buf); }
158	STD		{ int sunos_sys_fstatfs(int fd, \
			    struct sunos_statfs *buf); }
159	STD		{ int sunos_sys_unmount(char *path); }
#ifdef NFSCLIENT
160	NOARGS		{ int async_daemon(void); }
161	NOARGS		{ int sys_getfh(char *fname, fhandle_t *fhp); }
#else
160	UNIMPL		
161	UNIMPL		
#endif
162	NOARGS		{ int compat_09_sys_getdomainname(char *domainname, \
			    int len); }
163	NOARGS		{ int compat_09_sys_setdomainname(char *domainname, \
			    int len); }
164	UNIMPL		rtschedule
165	STD		{ int sunos_sys_quotactl(int cmd, char *special, \
			    int uid, caddr_t addr); }
166	STD		{ int sunos_sys_exportfs(char *path, char *ex); }
167	STD		{ int sunos_sys_mount(char *type, char *dir, \
			    int flags, caddr_t data); }
168	STD		{ int sunos_sys_ustat(int dev, \
			    struct sunos_ustat *buf); }
#ifdef SYSVSEM
169	NOARGS		{ int compat_10_sys_semsys(int which, int a2, int a3, \
			    int a4, int a5); }
#else
169	UNIMPL		semsys
#endif
#ifdef SYSVMSG
170	NOARGS		{ int compat_10_sys_msgsys(int which, int a2, int a3, \
			    int a4, int a5, int a6); }
#else
170	UNIMPL		msgsys
#endif
#ifdef SYSVSHM
171	NOARGS		{ int compat_10_sys_shmsys(int which, int a2, int a3, \
			    int a4); }
#else
171	UNIMPL		shmsys
#endif
172	STD		{ int sunos_sys_auditsys(char *record); }
173	UNIMPL		rfssys
174	STD		{ int sunos_sys_getdents(int fd, char *buf, \
			    int nbytes); }
175	NOARGS		{ int sys_setsid(void); }
176	NOARGS		{ int sys_fchdir(int fd); }
177	STD		{ int sunos_sys_fchroot(int fd); }
178	UNIMPL		vpixsys
179	UNIMPL		aioread
180	UNIMPL		aiowrite
181	UNIMPL		aiowait
182	UNIMPL		aiocancel
183	STD		{ int sunos_sys_sigpending(int *mask); }
184	UNIMPL		
185	NOARGS		{ int sys_setpgid(int pid, int pgid); }
186	NOARGS		{ long sys_pathconf(char *path, int name); }
187	NOARGS		{ long sys_fpathconf(int fd, int name); }
188	STD		{ int sunos_sys_sysconf(int name); }
189	STD		{ int sunos_sys_uname(struct sunos_utsname *name); }
@


1.17
log
@Mark vadvise(2) as obsolete and remove its implementation, so instead of
returning EINVAL, you'll get ENOSYS. No serious code has used this system
call in at least fifteen years.

The libc stub will be removed at the next major crank time.

ok henning@@ deraadt@@ krw@@ toby@@
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.16 2004/07/09 23:52:02 millert Exp $
@


1.16
log
@Rename ostat -> stat43 to disambiguate from upcoming struct stat changes.
Idea from NetBSD, OK deraadt@@
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.15 2004/05/28 18:28:14 tedu Exp $
d133 1
a133 1
72	NOARGS		{ int sys_ovadvise(int anom); } vadvise
@


1.15
log
@ACCOUNTING is optional.  found by mpech. ok deraadt
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.14 2003/05/11 19:45:18 deraadt Exp $
d89 1
a89 1
38	STD		{ int sunos_sys_stat(char *path, struct ostat *ub); }
d91 1
a91 1
40	STD		{ int sunos_sys_lstat(char *path, struct ostat *ub); }
d121 1
a121 1
62	NOARGS		{ int compat_43_sys_fstat(int fd, struct ostat *sb); }
@


1.14
log
@finish compat swapon cleanup
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.13 2003/01/30 03:29:49 millert Exp $
d103 1
d105 3
@


1.13
log
@Bring back setreuid(2) and setregid(2) as first class syscalls
(but still implemented via setres[ug]id(2)).  Basically this just
moves them from COMPAT_43 into kern_prot.c.  Also fixes a typo in my
old implementation.  The userland portion will follow in a few days.
deraadt@@ OK
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.12 2002/03/14 00:42:25 miod Exp $
d146 1
a146 1
85	NOARGS		{ int sys_swapon(char *name); }
@


1.12
log
@Turn the ptrace(2) syscall into a kernel compile option, option PTRACE in
your kernel configuration file.
By default, GENERIC will enable this.

When PTRACE is not enabled, several ptrace-like features of the procfs
filesystem will be disabled as well (namely, the ability to read and write
any process' registers, as well as attching, single stepping and detaching
to/from processes).

This should help paranoid people build better sandboxens, and us to build
smaller ramdisks.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.11 1999/06/07 07:17:48 deraadt Exp $
d206 2
a207 2
126	NOARGS		{ int compat_43_sys_setreuid(int ruid, int euid); }
127	NOARGS		{ int compat_43_sys_setregid(int rgid, int egid); }
@


1.11
log
@replacement pipe() system call; copies data into place inside kernel, so
that EFAULT return value is possible
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.10 1998/03/23 07:12:40 millert Exp $
d72 1
d75 3
@


1.11.14.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.11 1999/06/07 07:17:48 deraadt Exp $
a71 1
#ifdef PTRACE
a73 3
#else
26	UNIMPL		sunos_ptrace
#endif
@


1.11.14.2
log
@sync
@
text
@d1 1
a1 1
	$OpenBSD$
d146 1
a146 1
85	NOARGS		{ int compat_25_sys_swapon(char *name); }
d206 2
a207 2
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
@


1.11.4.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
	$OpenBSD$
a71 1
#ifdef PTRACE
a73 3
#else
26	UNIMPL		sunos_ptrace
#endif
@


1.11.4.2
log
@Sync the SMP branch with 3.3
@
text
@d206 2
a207 2
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
@


1.11.4.3
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.11.4.2 2003/03/27 23:53:48 niklas Exp $
d146 1
a146 1
85	NOARGS		{ int compat_25_sys_swapon(char *name); }
@


1.11.4.4
log
@Merge with the trunk
@
text
@d1 1
a1 1
	$OpenBSD$
a102 1
#ifdef ACCOUNTING
a103 3
#else
51	UNIMPL		acct
#endif
@


1.10
log
@Emulated version of SunOS ostime(2) wass totally wrong.  For now
we will just return EPERM.  Correct code is #if 0'd out as it needs
to call settime() which is static to kern_time.c (and it's not
clear that we really want to be setting the clock from an emulated
program anyway).
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.9 1998/03/23 06:54:17 millert Exp $
d89 1
a89 1
42	NOARGS		{ int sys_pipe(void); }
@


1.9
log
@Emulate otimes(2)
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.8 1997/11/13 18:35:29 deraadt Exp $
d71 1
a71 1
25	STD		{ int sunos_sys_stime(time_t *tp); }
@


1.8
log
@make msync() have 3 args
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.7 1997/07/28 09:53:13 deraadt Exp $
d90 1
a90 1
43	UNIMPL		sunos_times
@


1.7
log
@stime; christos
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.6 1997/01/26 23:52:03 downsj Exp $
d116 1
a116 1
65	STD		{ int sunos_sys_omsync(caddr_t addr, size_t len, \
@


1.6
log
@Since these are old systems, call lchown() in place of chown().
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.5 1996/08/25 12:19:58 deraadt Exp $
d71 1
a71 1
25	UNIMPL		sunos_stime
@


1.5
log
@route execve via compat filename translation
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.4 1996/08/02 21:55:22 niklas Exp $
d6 1
a6 1
; NetBSD COMPAT_SUNOS system call name/number "master" file.
d62 1
a62 1
16	NOARGS		{ int sys_chown(char *path, int uid, int gid); }
@


1.4
log
@/sys_poll/s/STD/NOARGS/
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.3 1996/08/02 20:20:31 niklas Exp $
d109 1
a109 1
59	NOARGS		{ int sys_execve(char *path, char **argp, \
@


1.3
log
@Make emulations use our native poll(2)
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.2 1996/04/18 21:21:48 niklas Exp $
d236 1
a236 1
153	STD		{ int sys_poll(struct pollfd *fds, \
@


1.2
log
@Merge of NetBSD 960317
@
text
@d1 1
a1 1
	$OpenBSD$
d39 1
d41 1
d236 2
a237 2
153	STD		{ int sunos_sys_poll(struct sunos_pollfd *fds, \
			    long nfds, int timeout); }
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
	$NetBSD: syscalls.master,v 1.32 1995/10/07 06:27:35 mycroft Exp $
d150 1
a150 1
92	NOARGS		{ int sys_fcntl(int fd, int cmd, void *arg); }
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
