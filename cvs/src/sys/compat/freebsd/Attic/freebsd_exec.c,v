head	1.20;
access;
symbols
	OPENBSD_4_9:1.19.0.8
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.6
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.4
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.18.0.4
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.17.0.10
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.8
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.6
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.4
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.2
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.16.0.6
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	UBC_SYNC_A:1.15
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.6
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.4
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.12.0.2
	UBC_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_9:1.10.0.2
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.2
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.10
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.20
date	2011.04.05.12.50.15;	author guenther;	state dead;
branches;
next	1.19;

1.19
date	2009.03.05.19.52.23;	author kettenis;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.12.04.32.57;	author miod;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.19.17.54.50;	author mickey;	state Exp;
branches;
next	1.16;

1.16
date	2004.04.15.00.22.42;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2003.05.16.05.30.47;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.05.13.16.40.37;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.11.22.43.23;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2001.09.19.13.28.43;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2001.02.02.18.34.15;	author tholo;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.02.05.21.47;	author tholo;	state Exp;
branches;
next	1.8;

1.8
date	99.11.10.15.55.20;	author mickey;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	99.09.10.20.45.26;	author kstailey;	state Exp;
branches;
next	1.6;

1.6
date	99.09.10.20.42.59;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	99.02.10.08.07.19;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.08.31.09.24.00;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	96.08.02.20.34.44;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.05.22.12.01.47;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.13;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.13;	author deraadt;	state Exp;
branches;
next	;

1.8.2.1
date	2001.05.14.22.04.21;	author niklas;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2001.10.31.03.11.46;	author nate;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2001.11.13.21.05.47;	author niklas;	state Exp;
branches;
next	1.8.2.4;

1.8.2.4
date	2003.03.27.23.53.47;	author niklas;	state Exp;
branches;
next	1.8.2.5;

1.8.2.5
date	2003.05.16.00.29.41;	author niklas;	state Exp;
branches;
next	1.8.2.6;

1.8.2.6
date	2003.06.07.11.00.36;	author ho;	state Exp;
branches;
next	1.8.2.7;

1.8.2.7
date	2004.06.05.23.12.34;	author niklas;	state Exp;
branches;
next	;

1.12.2.1
date	2003.05.19.21.52.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Push COMPAT_FREEBSD in front of a whale.  Buggy, out of date, no
one has been weeding it, and it makes life harder.

Toasts of Brennivin for its passing from many; diff ok henning@@
@
text
@/*	$OpenBSD: freebsd_exec.c,v 1.19 2009/03/05 19:52:23 kettenis Exp $	*/
/*	$NetBSD: freebsd_exec.c,v 1.2 1996/05/18 16:02:08 christos Exp $	*/

/*
 * Copyright (c) 1993, 1994 Christopher G. Demetriou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/malloc.h>
#include <sys/vnode.h>
#include <sys/core.h>
#include <sys/exec.h>
#include <sys/resourcevar.h>
#include <uvm/uvm_extern.h>
#include <sys/exec_elf.h>
#include <sys/exec_olf.h>

#include <machine/freebsd_machdep.h>

#include <compat/freebsd/freebsd_syscall.h>
#include <compat/freebsd/freebsd_exec.h>
#include <compat/freebsd/freebsd_util.h>

extern struct sysent freebsd_sysent[];
#ifdef SYSCALL_DEBUG
extern char *freebsd_syscallnames[];
#endif

extern const char freebsd_emul_path[];

struct emul emul_freebsd_aout = {
	"freebsd",
	NULL,
	freebsd_sendsig,
	FREEBSD_SYS_syscall,
	FREEBSD_SYS_MAXSYSCALL,
	freebsd_sysent,
#ifdef SYSCALL_DEBUG
	freebsd_syscallnames,
#else
	NULL,
#endif
	0,
	copyargs,
	setregs,
	NULL,
	coredump_trad,
	freebsd_sigcode,
	freebsd_esigcode,
};

struct emul emul_freebsd_elf = {
	"freebsd",
	NULL,
	freebsd_sendsig,
	FREEBSD_SYS_syscall,
	FREEBSD_SYS_MAXSYSCALL,
	freebsd_sysent,
#ifdef SYSCALL_DEBUG
	freebsd_syscallnames,
#else
	NULL,
#endif
	FREEBSD_ELF_AUX_ARGSIZ,
	elf32_copyargs,
	setregs,
	exec_elf32_fixup,
	coredump_trad,
	freebsd_sigcode,
	freebsd_esigcode,
};

/*
 * exec_aout_makecmds(): Check if it's an a.out-format executable.
 *
 * Given a proc pointer and an exec package pointer, see if the referent
 * of the epp is in a.out format.  First check 'standard' magic numbers for
 * this architecture.  If that fails, try a cpu-dependent hook.
 *
 * This function, in the former case, or the hook, in the latter, is
 * responsible for creating a set of vmcmds which can be used to build
 * the process's vm space and inserting them into the exec package.
 */

int
exec_freebsd_aout_makecmds(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	u_long midmag;
	int error = ENOEXEC;
	struct exec *execp = epp->ep_hdr;

	if (epp->ep_hdrvalid < sizeof(struct exec))
		return ENOEXEC;

	midmag = FREEBSD_N_GETMID(*execp) << 16 | FREEBSD_N_GETMAGIC(*execp);

	/* assume FreeBSD's MID_MACHINE and [ZQNO]MAGIC is same as NetBSD's */
	switch (midmag) {
	case (MID_MACHINE << 16) | ZMAGIC:
		error = exec_aout_prep_oldzmagic(p, epp);
		break;
	case (MID_MACHINE << 16) | QMAGIC:
		error = exec_aout_prep_zmagic(p, epp);
		break;
	case (MID_MACHINE << 16) | NMAGIC:
		error = exec_aout_prep_nmagic(p, epp);
		break;
	case (MID_MACHINE << 16) | OMAGIC:
		error = exec_aout_prep_omagic(p, epp);
		break;
	}
	if (error == 0)
		epp->ep_emul = &emul_freebsd_aout;
	else
		kill_vmcmds(&epp->ep_vmcmds);

	return error;
}

int
exec_freebsd_elf32_makecmds(struct proc *p, struct exec_package *epp)
{
	if (!(emul_freebsd_elf.e_flags & EMUL_ENABLED))
		return (ENOEXEC);
	return exec_elf32_makecmds(p, epp);

}

int
freebsd_elf_probe(p, epp, itp, pos, os)
	struct proc *p;
	struct exec_package *epp;
	char *itp;
	u_long *pos;
	u_int8_t *os;
{
	Elf32_Ehdr *eh = epp->ep_hdr;
	char *bp, *brand;
	int error;
	size_t len;

	if (!(emul_freebsd_elf.e_flags & EMUL_ENABLED))
		return (ENOEXEC);

	/*
	 * Older FreeBSD ELF binaries use a brand; newer ones use EI_OSABI
	 */
	if (eh->e_ident[EI_OSABI] != ELFOSABI_FREEBSD) {
		brand = elf32_check_brand(eh);
		if (brand == NULL || strcmp(brand, "FreeBSD") != 0)
			return (EINVAL);
	}
	if (itp) {
		if ((error = emul_find(p, NULL, freebsd_emul_path, itp, &bp, 0)))
			return (error);
		if ((error = copystr(bp, itp, MAXPATHLEN, &len)))
			return (error);
		free(bp, M_TEMP);
	}
	epp->ep_emul = &emul_freebsd_elf;
	*pos = ELF32_NO_ADDR;
	if (*os == OOS_NULL)
		*os = OOS_FREEBSD;
	return (0);
}
@


1.19
log
@Make ELF platforms generate ELF core dumps.  Somewhat based on code from
NetBSD.

ok kurt@@, drahn@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.18 2008/06/12 04:32:57 miod Exp $	*/
@


1.18
log
@Do not attempt to recognize foreign ELF binaries if emulation is disabled;
also recognize modern Linux binaries without branding, but with a ``GNU''
ABI note.
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.17 2006/01/19 17:54:50 mickey Exp $	*/
d39 1
d75 1
d96 1
@


1.17
log
@redo (w/ proper changes everywhere ;):
take interp[MAXPATHLEN] off the stack.  from mickey, ok otto
while here, switch above from malloc to pool, remove stupid casts
tedu@@ miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.16 2004/04/15 00:22:42 tedu Exp $	*/
d168 3
@


1.16
log
@rework access to emulations slightly in an effort to both merge and
separate exec format from emulation.  consistent naming of freebsd emuls.
not much in the way of functional changes yet.
testing and ok deraadt@@ and others along the way.
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.15 2003/05/16 05:30:47 millert Exp $	*/
d177 1
a177 1
	if (itp[0]) {
@


1.15
log
@Do the new-style EI_OSABI check first because it is cheaper.
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.14 2003/05/13 16:40:37 millert Exp $	*/
d58 1
a58 1
struct emul emul_aout_freebsd = {
d78 1
a78 1
struct emul emul_elf_freebsd = {
d140 1
a140 1
		epp->ep_emul = &emul_aout_freebsd;
d148 9
d184 1
a184 1
	epp->ep_emul = &emul_elf_freebsd;
@


1.14
log
@De-hackify.  Use proper defines now that we have EI_OSABI and ELFOSABI_FREEBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.13 2003/03/11 22:43:23 millert Exp $	*/
d163 5
a167 4
	brand = elf32_check_brand(eh);
	if ((brand == NULL || strcmp(brand, "FreeBSD")) &&
	    eh->e_ident[EI_OSABI] != ELFOSABI_FREEBSD)
		return (EINVAL);
@


1.13
log
@Hack to match new FreeBSD ELF binaries (such as opera).  A proper
version of this will go in after 3.3 is out and the tree unlocks.
deraadt@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.12 2001/11/06 19:53:17 miod Exp $	*/
d160 3
d164 2
a165 1
	if ((brand == NULL || strcmp(brand, "FreeBSD")) && eh->e_ident[EI_PAD] != 9)
@


1.12
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.11 2001/09/19 13:28:43 art Exp $	*/
d161 1
a161 1
	if (brand == NULL || strcmp(brand, "FreeBSD"))
@


1.12.2.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d160 3
a162 8
	/*
	 * Older FreeBSD ELF binaries use a brand; newer ones use EI_OSABI
	 */
	if (eh->e_ident[EI_OSABI] != ELFOSABI_FREEBSD) {
		brand = elf32_check_brand(eh);
		if (brand == NULL || strcmp(brand, "FreeBSD") != 0)
			return (EINVAL);
	}
@


1.11
log
@Unify elf32 and elf64 code with macros. This forced a renaming
of a few functions from elf32.
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.10 2001/02/02 18:34:15 tholo Exp $	*/
d41 1
a41 1
#include <vm/vm.h>
@


1.10
log
@Missed one change to do ELF fixups on execs...
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.9 2001/02/02 05:21:47 tholo Exp $	*/
d91 1
a91 1
	elf_copyargs,
d93 1
a93 1
	exec_elf_fixup,
d160 1
a160 1
	brand = elf_check_brand(eh);
@


1.9
log
@Correct setup for running ELF binaries from FreeBSD; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.8 1999/11/10 15:55:20 mickey Exp $	*/
d93 1
a93 1
	NULL,
@


1.8
log
@include syscallnames only if compiling w/ SYSCALL_DEBUG.
was already so for native and sunos, the rest was just
wasting space on it. niels@@ millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.7 1999/09/10 20:45:26 kstailey Exp $	*/
d90 2
a91 2
	0,
	copyargs,
@


1.8.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.10 2001/02/02 18:34:15 tholo Exp $	*/
d90 2
a91 2
	FREEBSD_ELF_AUX_ARGSIZ,
	elf_copyargs,
d93 1
a93 1
	exec_elf_fixup,
@


1.8.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.8.2.1 2001/05/14 22:04:21 niklas Exp $	*/
d91 1
a91 1
	elf32_copyargs,
d93 1
a93 1
	exec_elf32_fixup,
d160 1
a160 1
	brand = elf32_check_brand(eh);
@


1.8.2.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
#include <uvm/uvm_extern.h>
@


1.8.2.4
log
@Sync the SMP branch with 3.3
@
text
@d161 1
a161 1
	if ((brand == NULL || strcmp(brand, "FreeBSD")) && eh->e_ident[EI_PAD] != 9)
@


1.8.2.5
log
@merge the trunk so we will get the genfs and locking fixes
@
text
@a159 3
	/*
	 * Older FreeBSD ELF binaries use a brand; newer ones use EI_OSABI
	 */
d161 1
a161 2
	if ((brand == NULL || strcmp(brand, "FreeBSD")) &&
	    eh->e_ident[EI_OSABI] != ELFOSABI_FREEBSD)
@


1.8.2.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.8.2.5 2003/05/16 00:29:41 niklas Exp $	*/
d163 4
a166 5
	if (eh->e_ident[EI_OSABI] != ELFOSABI_FREEBSD) {
		brand = elf32_check_brand(eh);
		if (brand == NULL || strcmp(brand, "FreeBSD") != 0)
			return (EINVAL);
	}
@


1.8.2.7
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 1
a58 1
struct emul emul_freebsd_aout = {
d78 1
a78 1
struct emul emul_freebsd_elf = {
d140 1
a140 1
		epp->ep_emul = &emul_freebsd_aout;
a147 9
exec_freebsd_elf32_makecmds(struct proc *p, struct exec_package *epp)
{
	if (!(emul_freebsd_elf.e_flags & EMUL_ENABLED))
		return (ENOEXEC);
	return exec_elf32_makecmds(p, epp);

}

int
d175 1
a175 1
	epp->ep_emul = &emul_freebsd_elf;
@


1.7
log
@undo previous
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.6 1999/09/10 20:42:59 kstailey Exp $	*/
d52 1
d54 1
d65 1
d67 3
d85 1
d87 3
@


1.6
log
@include sys/exec.h before sys/exec_elf.h
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.5 1999/02/10 08:07:19 deraadt Exp $	*/
a41 1
#include <sys/exec.h>
@


1.5
log
@branding support and freebsd elf
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.4 1996/08/31 09:24:00 pefo Exp $	*/
d42 1
@


1.4
log
@Cleanup exec
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.3 1996/08/02 20:34:44 niklas Exp $	*/
d42 2
d49 1
d54 19
a72 1
struct emul emul_freebsd = {
d130 1
a130 1
		epp->ep_emul = &emul_freebsd;
d135 30
@


1.3
log
@Added Makefiles to build stuff from syscalls.master in some emulations.
Regenerated derived files from various syscalls.master files. Added $OpenBSD$.
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_exec.c,v 1.2 1996/05/18 16:02:08 christos Exp $	*/
d62 1
@


1.2
log
@sync
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: freebsd_exec.c,v 1.1 1995/10/10 01:19:27 mycroft Exp $	*/
d94 1
a94 1
		error = cpu_exec_aout_prep_oldzmagic(p, epp);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
