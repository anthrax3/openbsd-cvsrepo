head	1.12;
access;
symbols
	OPENBSD_4_9:1.11.0.14
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.12
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.8
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.10
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.6
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.10.0.2
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.9.0.10
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.10
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.8
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.8
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.8
	UBC:1.7.0.6
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.6.0.10
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.6
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2011.04.05.12.50.15;	author guenther;	state dead;
branches;
next	1.11;

1.11
date	2007.11.28.13.47.02;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2007.04.05.15.33.42;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.19.21.19.28;	author matthieu;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.06.19.14.20;	author nordin;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.03.02.45.31;	author mickey;	state Exp;
branches
	1.7.6.1;
next	1.6;

1.6
date	99.02.10.08.05.21;	author deraadt;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	97.11.13.18.35.24;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.11.13.07.35.38;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.02.20.34.46;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.08.48.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.13;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.13;	author deraadt;	state Exp;
branches;
next	;

1.6.6.1
date	2001.05.14.22.04.22;	author niklas;	state Exp;
branches;
next	1.6.6.2;

1.6.6.2
date	2003.03.27.23.53.47;	author niklas;	state Exp;
branches;
next	;

1.7.6.1
date	2002.10.29.00.30.51;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Push COMPAT_FREEBSD in front of a whale.  Buggy, out of date, no
one has been weeding it, and it makes life harder.

Toasts of Brennivin for its passing from many; diff ok henning@@
@
text
@/*	$OpenBSD: freebsd_misc.c,v 1.11 2007/11/28 13:47:02 deraadt Exp $	*/
/*	$NetBSD: freebsd_misc.c,v 1.2 1996/05/03 17:03:10 christos Exp $	*/

/*
 * Copyright (c) 1995 Frank van der Linden
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed for the NetBSD Project
 *      by Frank van der Linden
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * FreeBSD compatibility module. Try to deal with various FreeBSD system calls.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/mount.h>
#include <sys/kernel.h>
#include <sys/file.h>
#include <sys/dirent.h>
#include <sys/filedesc.h>
#include <sys/mman.h>
#include <sys/vnode.h>

#include <sys/syscallargs.h>

#include <compat/freebsd/freebsd_signal.h>
#include <compat/freebsd/freebsd_syscallargs.h>
#include <compat/freebsd/freebsd_util.h>
#include <compat/freebsd/freebsd_rtprio.h>

#include <compat/common/compat_dir.h>

/* just a place holder */

int
freebsd_sys_rtprio(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
#ifdef notyet
	struct freebsd_sys_rtprio_args /* {
		syscallarg(int) function;
		syscallarg(pid_t) pid;
		syscallarg(struct freebsd_rtprio *) rtp;
	} */ *uap = v;
#endif

	return ENOSYS;	/* XXX */
}

/*
 * Argh.
 * The syscalls.master mechanism cannot handle a system call that is in
 * two spots in the table.
 */
int
freebsd_sys_poll2(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	return (sys_poll(p, v, retval));
}

/*
 * Our madvise is currently dead (always returns EOPNOTSUPP).
 */
int
freebsd_sys_madvise(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	return (0);
}


int freebsd_readdir_callback(void *, struct dirent *, off_t);

struct freebsd_readdir_callback_args {
	caddr_t outp;
	int	resid;
};

int 
freebsd_readdir_callback(void *arg, struct dirent *bdp, off_t cookie)
{
	struct freebsd_readdir_callback_args *cb = arg;
	struct dirent idb;
	int error;

	if (cb->resid < bdp->d_reclen)
		return (ENOMEM);
	idb.d_fileno = bdp->d_fileno;
	idb.d_reclen = bdp->d_reclen;
	idb.d_type = bdp->d_type;
	idb.d_namlen = bdp->d_namlen;
	strlcpy(idb.d_name, bdp->d_name, sizeof(idb.d_name));
	
	if ((error = copyout((caddr_t)&idb, cb->outp, bdp->d_reclen)))
		return (error);
	cb->outp += bdp->d_reclen;
	cb->resid -= bdp->d_reclen;

	return (0);
}

int
freebsd_sys_getdents(struct proc *p, void *v, register_t *retval)
{
	struct freebsd_sys_getdents_args /* {
		syscallarg(int) fd;
		syscallarg(void *) dirent;
		syscallarg(unsigned) count;
	} */ *uap = v;
	struct vnode *vp;
	struct file *fp;
	int error;
	struct freebsd_readdir_callback_args args;

	if ((error = getvnode(p->p_fd, SCARG(uap, fd), &fp)) != 0) 
		return (error);
	
	vp = (struct vnode *)fp->f_data;
	
	args.resid = SCARG(uap, count);
	args.outp = (caddr_t)SCARG(uap, dirent);
	
	error = readdir_with_callback(fp, &fp->f_offset, args.resid,
	    freebsd_readdir_callback, &args);
	
	FRELE(fp);
	if (error) 
		return (error);
	
	*retval = SCARG(uap, count) - args.resid;
	return (0);
}

#define FBSD_MAP_NOCORE	0x20000
int
freebsd_sys_mmap(struct proc *p, void *v, register_t *retval)
{
	struct freebsd_sys_mmap_args /* {
		syscallarg(caddr_t) addr;
		syscallarg(size_t) len;
		syscallarg(int) prot;
		syscallarg(int) flags;
		syscallarg(int) fd;
		syscallarg(long) pad;
		syscallarg(off_t) pos;
	} */ *uap = v;
	SCARG(uap, flags) &= ~FBSD_MAP_NOCORE;
	return (sys_mmap(p, uap, retval));
}

struct outsname {
	char	sysname[32];
	char	nodename[32];
	char	release[32];
	char	version[32];
	char	machine[32];
};

/* ARGSUSED */
int
compat_freebsd_sys_uname(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct compat_freebsd_sys_uname_args /* {
		syscallarg(struct outsname *) name;
	} */ *uap = v;
	struct outsname outsname;
	const char *cp;
	char *dp, *ep;

	strlcpy(outsname.sysname, ostype, sizeof(outsname.sysname));
	strlcpy(outsname.nodename, hostname, sizeof(outsname.nodename));
	strlcpy(outsname.release, osrelease, sizeof(outsname.release));
	dp = outsname.version;
	ep = &outsname.version[sizeof(outsname.version) - 1];
	for (cp = version; *cp && *cp != '('; cp++)
		;
	for (cp++; *cp && *cp != ')' && dp < ep; cp++)
		*dp++ = *cp;
	for (; *cp && *cp != '#'; cp++)
		;
	for (; *cp && *cp != ':' && dp < ep; cp++)
		*dp++ = *cp;
	*dp = '\0';
	strlcpy(outsname.machine, MACHINE, sizeof(outsname.machine));

	return (copyout((caddr_t)&outsname, (caddr_t)SCARG(uap, name),
			sizeof(struct outsname)));
}
@


1.11
log
@COMPAT_09 uname is only used by freebsd compat, so move it to the right place
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_misc.c,v 1.10 2007/04/05 15:33:42 tedu Exp $	*/
@


1.10
log
@freebsd added some MAP_NOCORE flag.  we don't like it, so mask it out.
started by claudio. ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_misc.c,v 1.9 2005/02/19 21:19:28 matthieu Exp $	*/
d43 1
d182 42
@


1.9
log
@Add getdents() emulation. Makes Veritas NetBackup client for FreeBSD work.
ok deraadt@@, tedu@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_misc.c,v 1.8 2002/07/06 19:14:20 nordin Exp $	*/
d46 1
d164 17
@


1.8
log
@Remove kernel support for NTP. ok deraadt@@ and tholo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_misc.c,v 1.7 2001/02/03 02:45:31 mickey Exp $	*/
d43 4
d55 2
d99 63
@


1.7
log
@make it compile
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_misc.c,v 1.6 1999/02/10 08:05:21 deraadt Exp $	*/
a49 1
#include <compat/freebsd/freebsd_timex.h>
a63 15
	} */ *uap = v;
#endif

	return ENOSYS;	/* XXX */
}

int
freebsd_ntp_adjtime(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
#ifdef notyet
	struct freebsd_ntp_adjtime_args /* {
		syscallarg(struct freebsd_timex *) tp;
@


1.7.6.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_misc.c,v 1.7 2001/02/03 02:45:31 mickey Exp $	*/
d50 1
d65 15
@


1.6
log
@freebsd madvise() clone, always returns 0 for now
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_misc.c,v 1.5 1997/11/13 18:35:24 deraadt Exp $	*/
d46 1
@


1.6.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_misc.c,v 1.7 2001/02/03 02:45:31 mickey Exp $	*/
a45 1
#include <compat/freebsd/freebsd_signal.h>
@


1.6.6.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 1
d65 15
@


1.5
log
@make msync() have 3 args
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_misc.c,v 1.4 1997/11/13 07:35:38 deraadt Exp $	*/
d97 12
@


1.4
log
@two poll() calls, argh
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_misc.c,v 1.3 1996/08/02 20:34:46 niklas Exp $	*/
a49 23

int
freebsd_sys_msync(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct freebsd_sys_msync_args /* {
		syscallarg(caddr_t) addr;
		syscallarg(size_t) len;
		syscallarg(int) flags;
	} */ *uap = v;
	struct sys_msync_args bma;

	/*
	 * FreeBSD-2.0-RELEASE's msync(2) is compatible with NetBSD's.
	 * FreeBSD-2.0.5-RELEASE's msync(2) has addtional argument `flags',
	 * but syscall number is not changed. :-<
	 */
	SCARG(&bma, addr) = SCARG(uap, addr);
	SCARG(&bma, len) = SCARG(uap, len);
	return sys_msync(p, &bma, retval); /* XXX - simply ignores `flags' */
}
@


1.3
log
@Added Makefiles to build stuff from syscalls.master in some emulations.
Regenerated derived files from various syscalls.master files. Added $OpenBSD$.
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_misc.c,v 1.2 1996/05/03 17:03:10 christos Exp $	*/
d106 14
@


1.2
log
@sync with 0504; mostly proto changes (some svr4 ioctl changes)
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: freebsd_misc.c,v 1.1 1995/10/10 01:19:33 mycroft Exp $	*/
d81 1
d87 1
d98 1
d102 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
