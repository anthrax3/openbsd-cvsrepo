head	1.40;
access;
symbols
	OPENBSD_4_9:1.39.0.4
	OPENBSD_4_9_BASE:1.39
	OPENBSD_4_8:1.39.0.2
	OPENBSD_4_8_BASE:1.39
	OPENBSD_4_7:1.38.0.8
	OPENBSD_4_7_BASE:1.38
	OPENBSD_4_6:1.38.0.10
	OPENBSD_4_6_BASE:1.38
	OPENBSD_4_5:1.38.0.6
	OPENBSD_4_5_BASE:1.38
	OPENBSD_4_4:1.38.0.4
	OPENBSD_4_4_BASE:1.38
	OPENBSD_4_3:1.38.0.2
	OPENBSD_4_3_BASE:1.38
	OPENBSD_4_2:1.34.0.2
	OPENBSD_4_2_BASE:1.34
	OPENBSD_4_1:1.33.0.2
	OPENBSD_4_1_BASE:1.33
	OPENBSD_4_0:1.32.0.4
	OPENBSD_4_0_BASE:1.32
	OPENBSD_3_9:1.32.0.2
	OPENBSD_3_9_BASE:1.32
	OPENBSD_3_8:1.31.0.2
	OPENBSD_3_8_BASE:1.31
	OPENBSD_3_7:1.30.0.2
	OPENBSD_3_7_BASE:1.30
	OPENBSD_3_6:1.29.0.2
	OPENBSD_3_6_BASE:1.29
	SMP_SYNC_A:1.27
	SMP_SYNC_B:1.27
	OPENBSD_3_5:1.26.0.2
	OPENBSD_3_5_BASE:1.26
	OPENBSD_3_4:1.25.0.2
	OPENBSD_3_4_BASE:1.25
	UBC_SYNC_A:1.24
	OPENBSD_3_3:1.23.0.2
	OPENBSD_3_3_BASE:1.23
	OPENBSD_3_2:1.21.0.2
	OPENBSD_3_2_BASE:1.21
	OPENBSD_3_1:1.20.0.2
	OPENBSD_3_1_BASE:1.20
	UBC_SYNC_B:1.21
	UBC:1.18.0.2
	UBC_BASE:1.18
	OPENBSD_3_0:1.17.0.2
	OPENBSD_3_0_BASE:1.17
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_9:1.16.0.2
	OPENBSD_2_8:1.15.0.2
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.14.0.2
	OPENBSD_2_7_BASE:1.14
	SMP:1.13.0.2
	SMP_BASE:1.13
	kame_19991208:1.13
	OPENBSD_2_6:1.12.0.2
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.40
date	2011.04.05.12.50.15;	author guenther;	state dead;
branches;
next	1.39;

1.39
date	2010.05.23.11.37.29;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2008.01.05.00.38.13;	author miod;	state Exp;
branches;
next	1.37;

1.37
date	2008.01.05.00.36.13;	author miod;	state Exp;
branches;
next	1.36;

1.36
date	2007.11.28.13.48.31;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2007.11.27.18.05.59;	author art;	state Exp;
branches;
next	1.34;

1.34
date	2007.04.05.15.33.58;	author tedu;	state Exp;
branches;
next	1.33;

1.33
date	2006.09.22.15.30.44;	author pedro;	state Exp;
branches;
next	1.32;

1.32
date	2006.02.07.01.35.14;	author brad;	state Exp;
branches;
next	1.31;

1.31
date	2005.06.17.20.42.31;	author millert;	state Exp;
branches;
next	1.30;

1.30
date	2005.02.19.21.20.49;	author matthieu;	state Exp;
branches;
next	1.29;

1.29
date	2004.07.13.21.06.33;	author millert;	state Exp;
branches;
next	1.28;

1.28
date	2004.07.09.23.54.56;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2004.05.28.18.31.12;	author tedu;	state Exp;
branches;
next	1.26;

1.26
date	2004.02.17.20.09.08;	author tedu;	state Exp;
branches;
next	1.25;

1.25
date	2003.08.24.00.03.03;	author tedu;	state Exp;
branches;
next	1.24;

1.24
date	2003.05.10.17.55.56;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2003.01.30.03.32.44;	author millert;	state Exp;
branches;
next	1.22;

1.22
date	2002.10.30.20.11.28;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2002.07.06.19.22.43;	author nordin;	state Exp;
branches;
next	1.20;

1.20
date	2002.03.14.01.26.49;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2002.03.14.00.44.20;	author miod;	state Exp;
branches;
next	1.18;

1.18
date	2001.11.27.19.35.26;	author maja;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2001.08.26.04.14.26;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2001.02.02.19.46.38;	author tholo;	state Exp;
branches;
next	1.15;

1.15
date	2000.07.07.18.29.30;	author brad;	state Exp;
branches;
next	1.14;

1.14
date	2000.05.01.23.12.29;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	99.10.27.07.33.43;	author niklas;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	99.06.07.07.18.34;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	99.05.31.18.18.09;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	99.05.31.17.34.45;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	99.02.10.08.07.30;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.11.13.18.37.52;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.11.13.07.35.43;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.11.13.07.27.08;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.11.13.06.53.57;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.08.02.20.34.48;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	95.12.14.04.47.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.26.01.28.36;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.13;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.13;	author deraadt;	state Exp;
branches;
next	;

1.13.2.1
date	2001.05.14.22.04.25;	author niklas;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2001.10.31.03.11.46;	author nate;	state Exp;
branches;
next	1.13.2.3;

1.13.2.3
date	2001.12.05.00.43.28;	author niklas;	state Exp;
branches;
next	1.13.2.4;

1.13.2.4
date	2002.03.28.11.28.05;	author niklas;	state Exp;
branches;
next	1.13.2.5;

1.13.2.5
date	2003.03.27.23.53.47;	author niklas;	state Exp;
branches;
next	1.13.2.6;

1.13.2.6
date	2003.05.13.19.21.26;	author ho;	state Exp;
branches;
next	1.13.2.7;

1.13.2.7
date	2004.02.19.10.51.28;	author niklas;	state Exp;
branches;
next	1.13.2.8;

1.13.2.8
date	2004.06.05.23.12.34;	author niklas;	state Exp;
branches;
next	;

1.18.2.1
date	2002.06.11.03.28.07;	author art;	state Exp;
branches;
next	1.18.2.2;

1.18.2.2
date	2002.10.29.00.30.51;	author art;	state Exp;
branches;
next	1.18.2.3;

1.18.2.3
date	2003.05.19.21.52.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.40
log
@Push COMPAT_FREEBSD in front of a whale.  Buggy, out of date, no
one has been weeding it, and it makes life harder.

Toasts of Brennivin for its passing from many; diff ok henning@@
@
text
@/*	$OpenBSD: freebsd_syscallargs.h,v 1.39 2010/05/23 11:37:29 deraadt Exp $	*/

/*
 * System call argument lists.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from	OpenBSD: syscalls.master,v 1.34 2010/05/23 11:35:18 deraadt Exp 
 */

#ifdef	syscallarg
#undef	syscallarg
#endif

#define	syscallarg(x)							\
	union {								\
		register_t pad;						\
		struct { x datum; } le;					\
		struct {						\
			int8_t pad[ (sizeof (register_t) < sizeof (x))	\
				? 0					\
				: sizeof (register_t) - sizeof (x)];	\
			x datum;					\
		} be;							\
	}

struct freebsd_sys_open_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(int) mode;
};

struct compat_43_freebsd_sys_creat_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct freebsd_sys_link_args {
	syscallarg(char *) path;
	syscallarg(char *) link;
};

struct freebsd_sys_unlink_args {
	syscallarg(char *) path;
};

struct freebsd_sys_chdir_args {
	syscallarg(char *) path;
};

struct freebsd_sys_mknod_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
	syscallarg(int) dev;
};

struct freebsd_sys_chmod_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct freebsd_sys_chown_args {
	syscallarg(char *) path;
	syscallarg(int) uid;
	syscallarg(int) gid;
};

struct freebsd_sys_getfsstat_args {
	syscallarg(struct freebsd_statfs *) buf;
	syscallarg(long) bufsize;
	syscallarg(int) flags;
};

struct freebsd_sys_mount_args {
	syscallarg(int) type;
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(caddr_t) data;
};

struct freebsd_sys_unmount_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
};

struct freebsd_sys_ptrace_args {
	syscallarg(int) req;
	syscallarg(pid_t) pid;
	syscallarg(caddr_t) addr;
	syscallarg(int) data;
};

struct freebsd_sys_access_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
};

struct freebsd_sys_chflags_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
};

struct compat_43_freebsd_sys_stat_args {
	syscallarg(char *) path;
	syscallarg(struct stat43 *) ub;
};

struct compat_43_freebsd_sys_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct stat43 *) ub;
};

struct freebsd_sys_ioctl_args {
	syscallarg(int) fd;
	syscallarg(u_long) com;
	syscallarg(caddr_t) data;
};

struct freebsd_sys_revoke_args {
	syscallarg(char *) path;
};

struct freebsd_sys_symlink_args {
	syscallarg(char *) path;
	syscallarg(char *) link;
};

struct freebsd_sys_readlink_args {
	syscallarg(char *) path;
	syscallarg(char *) buf;
	syscallarg(int) count;
};

struct freebsd_sys_execve_args {
	syscallarg(char *) path;
	syscallarg(char **) argp;
	syscallarg(char **) envp;
};

struct freebsd_sys_chroot_args {
	syscallarg(char *) path;
};

struct freebsd_sys_madvise_args {
	syscallarg(caddr_t) addr;
	syscallarg(size_t) len;
	syscallarg(int) behav;
};

struct freebsd_sys_fcntl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(void *) arg;
};

struct freebsd_sys_sigreturn_args {
	syscallarg(struct freebsd_sigcontext *) scp;
};

struct freebsd_sys_rename_args {
	syscallarg(char *) from;
	syscallarg(char *) to;
};

struct compat_43_freebsd_sys_truncate_args {
	syscallarg(char *) path;
	syscallarg(long) length;
};

struct freebsd_sys_mkfifo_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct freebsd_sys_mkdir_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct freebsd_sys_rmdir_args {
	syscallarg(char *) path;
};

struct freebsd_sys_statfs_args {
	syscallarg(char *) path;
	syscallarg(struct freebsd_statfs *) buf;
};

struct freebsd_sys_fstatfs_args {
	syscallarg(int) fd;
	syscallarg(struct freebsd_statfs *) buf;
};

struct freebsd_sys_getfh_args {
	syscallarg(char *) fname;
	syscallarg(fhandle_t *) fhp;
};

struct compat_freebsd_sys_uname_args {
	syscallarg(struct outsname *) name;
};

struct freebsd_sys_rtprio_args {
	syscallarg(int) function;
	syscallarg(pid_t) pid;
	syscallarg(struct freebsd_rtprio *) rtp;
};

struct freebsd_sys_stat_args {
	syscallarg(char *) path;
	syscallarg(struct stat35 *) ub;
};

struct freebsd_sys_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct stat35 *) ub;
};

struct freebsd_sys_pathconf_args {
	syscallarg(char *) path;
	syscallarg(int) name;
};

struct freebsd_sys_mmap_args {
	syscallarg(caddr_t) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pad;
	syscallarg(off_t) pos;
};

struct freebsd_sys_truncate_args {
	syscallarg(char *) path;
	syscallarg(int) pad;
	syscallarg(off_t) length;
};

struct freebsd_sys_poll2_args {
	syscallarg(struct pollfd *) fds;
	syscallarg(unsigned long) nfds;
	syscallarg(int) timeout;
};

struct freebsd_sys_getdents_args {
	syscallarg(int) fd;
	syscallarg(void *) dirent;
	syscallarg(unsigned) count;
};

struct freebsd_sys_sigprocmask40_args {
	syscallarg(int) how;
	syscallarg(const freebsd_sigset_t *) set;
	syscallarg(freebsd_sigset_t *) oset;
};

struct freebsd_sys_sigsuspend40_args {
	syscallarg(const freebsd_sigset_t *) sigmask;
};

struct freebsd_sys_sigaction40_args {
	syscallarg(int) sig;
	syscallarg(const struct freebsd_sigaction *) act;
	syscallarg(struct freebsd_sigaction *) oact;
};

struct freebsd_sys_sigpending40_args {
	syscallarg(freebsd_sigset_t *) set;
};

/*
 * System call prototypes.
 */

int	sys_nosys(struct proc *, void *, register_t *);
int	sys_exit(struct proc *, void *, register_t *);
int	sys_fork(struct proc *, void *, register_t *);
int	sys_read(struct proc *, void *, register_t *);
int	sys_write(struct proc *, void *, register_t *);
int	freebsd_sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	sys_wait4(struct proc *, void *, register_t *);
int	compat_43_freebsd_sys_creat(struct proc *, void *, register_t *);
int	freebsd_sys_link(struct proc *, void *, register_t *);
int	freebsd_sys_unlink(struct proc *, void *, register_t *);
int	freebsd_sys_chdir(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	freebsd_sys_mknod(struct proc *, void *, register_t *);
int	freebsd_sys_chmod(struct proc *, void *, register_t *);
int	freebsd_sys_chown(struct proc *, void *, register_t *);
int	sys_obreak(struct proc *, void *, register_t *);
int	freebsd_sys_getfsstat(struct proc *, void *, register_t *);
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	freebsd_sys_mount(struct proc *, void *, register_t *);
int	freebsd_sys_unmount(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	sys_geteuid(struct proc *, void *, register_t *);
#ifdef PTRACE
int	freebsd_sys_ptrace(struct proc *, void *, register_t *);
#else
#endif
int	sys_recvmsg(struct proc *, void *, register_t *);
int	sys_sendmsg(struct proc *, void *, register_t *);
int	sys_recvfrom(struct proc *, void *, register_t *);
int	sys_accept(struct proc *, void *, register_t *);
int	sys_getpeername(struct proc *, void *, register_t *);
int	sys_getsockname(struct proc *, void *, register_t *);
int	freebsd_sys_access(struct proc *, void *, register_t *);
int	freebsd_sys_chflags(struct proc *, void *, register_t *);
int	sys_fchflags(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	sys_kill(struct proc *, void *, register_t *);
int	compat_43_freebsd_sys_stat(struct proc *, void *, register_t *);
int	sys_getppid(struct proc *, void *, register_t *);
int	compat_43_freebsd_sys_lstat(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_opipe(struct proc *, void *, register_t *);
int	sys_getegid(struct proc *, void *, register_t *);
int	sys_profil(struct proc *, void *, register_t *);
#ifdef KTRACE
int	sys_ktrace(struct proc *, void *, register_t *);
#else
#endif
int	sys_sigaction(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	sys_sigprocmask(struct proc *, void *, register_t *);
int	sys_getlogin(struct proc *, void *, register_t *);
int	sys_setlogin(struct proc *, void *, register_t *);
#ifdef ACCOUNTING
int	sys_acct(struct proc *, void *, register_t *);
#else
#endif
int	sys_sigpending(struct proc *, void *, register_t *);
int	sys_sigaltstack(struct proc *, void *, register_t *);
int	freebsd_sys_ioctl(struct proc *, void *, register_t *);
int	sys_reboot(struct proc *, void *, register_t *);
int	freebsd_sys_revoke(struct proc *, void *, register_t *);
int	freebsd_sys_symlink(struct proc *, void *, register_t *);
int	freebsd_sys_readlink(struct proc *, void *, register_t *);
int	freebsd_sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	freebsd_sys_chroot(struct proc *, void *, register_t *);
int	compat_43_sys_fstat(struct proc *, void *, register_t *);
int	compat_43_sys_getkerninfo(struct proc *, void *, register_t *);
int	compat_43_sys_getpagesize(struct proc *, void *, register_t *);
int	sys_msync(struct proc *, void *, register_t *);
int	sys_vfork(struct proc *, void *, register_t *);
int	sys_sbrk(struct proc *, void *, register_t *);
int	sys_sstk(struct proc *, void *, register_t *);
int	compat_43_sys_mmap(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	freebsd_sys_madvise(struct proc *, void *, register_t *);
int	sys_mincore(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	sys_getpgrp(struct proc *, void *, register_t *);
int	sys_setpgid(struct proc *, void *, register_t *);
int	sys_setitimer(struct proc *, void *, register_t *);
int	compat_43_sys_wait(struct proc *, void *, register_t *);
int	compat_25_sys_swapon(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
int	compat_43_sys_gethostname(struct proc *, void *, register_t *);
int	compat_43_sys_sethostname(struct proc *, void *, register_t *);
int	compat_43_sys_getdtablesize(struct proc *, void *, register_t *);
int	sys_dup2(struct proc *, void *, register_t *);
int	freebsd_sys_fcntl(struct proc *, void *, register_t *);
int	sys_select(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	sys_setpriority(struct proc *, void *, register_t *);
int	sys_socket(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	compat_43_sys_accept(struct proc *, void *, register_t *);
int	sys_getpriority(struct proc *, void *, register_t *);
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
int	freebsd_sys_sigreturn(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_setsockopt(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	compat_43_sys_sigvec(struct proc *, void *, register_t *);
int	compat_43_sys_sigblock(struct proc *, void *, register_t *);
int	compat_43_sys_sigsetmask(struct proc *, void *, register_t *);
int	sys_sigsuspend(struct proc *, void *, register_t *);
int	compat_43_sys_sigstack(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
#ifdef TRACE
int	sys_vtrace(struct proc *, void *, register_t *);
#else
#endif
int	sys_gettimeofday(struct proc *, void *, register_t *);
int	sys_getrusage(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_readv(struct proc *, void *, register_t *);
int	sys_writev(struct proc *, void *, register_t *);
int	sys_settimeofday(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
int	sys_setreuid(struct proc *, void *, register_t *);
int	sys_setregid(struct proc *, void *, register_t *);
int	freebsd_sys_rename(struct proc *, void *, register_t *);
int	compat_43_freebsd_sys_truncate(struct proc *, void *, register_t *);
int	compat_43_sys_ftruncate(struct proc *, void *, register_t *);
int	sys_flock(struct proc *, void *, register_t *);
int	freebsd_sys_mkfifo(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
int	freebsd_sys_mkdir(struct proc *, void *, register_t *);
int	freebsd_sys_rmdir(struct proc *, void *, register_t *);
int	sys_utimes(struct proc *, void *, register_t *);
int	sys_adjtime(struct proc *, void *, register_t *);
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_gethostid(struct proc *, void *, register_t *);
int	compat_43_sys_sethostid(struct proc *, void *, register_t *);
int	compat_43_sys_getrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_setrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_killpg(struct proc *, void *, register_t *);
int	sys_setsid(struct proc *, void *, register_t *);
int	sys_quotactl(struct proc *, void *, register_t *);
int	compat_43_sys_quota(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
#if defined(NFSCLIENT) || defined(NFSSERVER)
int	sys_nfssvc(struct proc *, void *, register_t *);
#else
#endif
int	compat_43_sys_getdirentries(struct proc *, void *, register_t *);
int	freebsd_sys_statfs(struct proc *, void *, register_t *);
int	freebsd_sys_fstatfs(struct proc *, void *, register_t *);
#ifdef NFSCLIENT
int	freebsd_sys_getfh(struct proc *, void *, register_t *);
#else
#endif
int	compat_09_sys_getdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_setdomainname(struct proc *, void *, register_t *);
int	compat_freebsd_sys_uname(struct proc *, void *, register_t *);
int	sys_sysarch(struct proc *, void *, register_t *);
int	freebsd_sys_rtprio(struct proc *, void *, register_t *);
#if defined(SYSVSEM) && !defined(__alpha__)
int	compat_10_sys_semsys(struct proc *, void *, register_t *);
#else
#endif
#if defined(SYSVMSG) && !defined(__alpha__)
int	compat_10_sys_msgsys(struct proc *, void *, register_t *);
#else
#endif
#if defined(SYSVSHM) && !defined(__alpha__)
int	compat_10_sys_shmsys(struct proc *, void *, register_t *);
#else
#endif
int	sys_pread(struct proc *, void *, register_t *);
int	sys_pwrite(struct proc *, void *, register_t *);
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_setegid(struct proc *, void *, register_t *);
int	sys_seteuid(struct proc *, void *, register_t *);
int	freebsd_sys_stat(struct proc *, void *, register_t *);
int	compat_35_sys_fstat(struct proc *, void *, register_t *);
int	freebsd_sys_lstat(struct proc *, void *, register_t *);
int	freebsd_sys_pathconf(struct proc *, void *, register_t *);
int	sys_fpathconf(struct proc *, void *, register_t *);
int	sys_getrlimit(struct proc *, void *, register_t *);
int	sys_setrlimit(struct proc *, void *, register_t *);
int	sys_getdirentries(struct proc *, void *, register_t *);
int	freebsd_sys_mmap(struct proc *, void *, register_t *);
int	sys_nosys(struct proc *, void *, register_t *);
int	sys_lseek(struct proc *, void *, register_t *);
int	freebsd_sys_truncate(struct proc *, void *, register_t *);
int	sys_ftruncate(struct proc *, void *, register_t *);
int	sys___sysctl(struct proc *, void *, register_t *);
int	sys_mlock(struct proc *, void *, register_t *);
int	sys_munlock(struct proc *, void *, register_t *);
int	sys_getpgid(struct proc *, void *, register_t *);
int	sys_poll(struct proc *, void *, register_t *);
#ifdef SYSVSEM
int	sys___semctl(struct proc *, void *, register_t *);
int	sys_semget(struct proc *, void *, register_t *);
int	sys_semop(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVMSG
int	sys_msgctl(struct proc *, void *, register_t *);
int	sys_msgget(struct proc *, void *, register_t *);
int	sys_msgsnd(struct proc *, void *, register_t *);
int	sys_msgrcv(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSHM
int	sys_shmat(struct proc *, void *, register_t *);
int	sys_shmctl(struct proc *, void *, register_t *);
int	sys_shmdt(struct proc *, void *, register_t *);
int	sys_shmget(struct proc *, void *, register_t *);
#else
#endif
int	sys_clock_gettime(struct proc *, void *, register_t *);
int	sys_nanosleep(struct proc *, void *, register_t *);
int	sys_minherit(struct proc *, void *, register_t *);
int	sys_rfork(struct proc *, void *, register_t *);
int	freebsd_sys_poll2(struct proc *, void *, register_t *);
int	sys_issetugid(struct proc *, void *, register_t *);
int	sys_lchown(struct proc *, void *, register_t *);
int	freebsd_sys_getdents(struct proc *, void *, register_t *);
int	sys_setresuid(struct proc *, void *, register_t *);
int	sys_setresgid(struct proc *, void *, register_t *);
int	freebsd_sys_sigprocmask40(struct proc *, void *, register_t *);
int	freebsd_sys_sigsuspend40(struct proc *, void *, register_t *);
int	freebsd_sys_sigaction40(struct proc *, void *, register_t *);
int	freebsd_sys_sigpending40(struct proc *, void *, register_t *);
int	sys_kqueue(struct proc *, void *, register_t *);
int	sys_kevent(struct proc *, void *, register_t *);
@


1.39
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.38
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.33 2008/01/05 00:36:13 miod Exp 
d443 1
a443 1
#if defined(SYSVSEM) && !defined(alpha)
d447 1
a447 1
#if defined(SYSVMSG) && !defined(alpha)
d451 1
a451 1
#if defined(SYSVSHM) && !defined(alpha)
@


1.37
log
@Mark vadvise(2) as obsolete and remove its implementation, so instead of
returning EINVAL, you'll get ENOSYS. No serious code has used this system
call in at least fifteen years.

The libc stub will be removed at the next major crank time.

ok henning@@ deraadt@@ krw@@ toby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_syscallargs.h,v 1.36 2007/11/28 13:48:31 deraadt Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.32 2007/11/28 13:47:02 deraadt Exp 
@


1.36
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a352 1
int	sys_ovadvise(struct proc *, void *, register_t *);
@


1.35
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.31 2007/04/05 15:33:42 tedu Exp 
d198 4
d441 1
a441 1
int	compat_09_sys_uname(struct proc *, void *, register_t *);
@


1.34
log
@regen
@
text
@@


1.33
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.30 2006/09/22 15:29:57 pedro Exp 
d219 10
d465 1
a465 1
int	sys_mmap(struct proc *, void *, register_t *);
@


1.32
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.29 2006/02/07 01:34:21 brad Exp 
a446 7
#ifdef LFS
int	lfs_bmapv(struct proc *, void *, register_t *);
int	lfs_markv(struct proc *, void *, register_t *);
int	lfs_segclean(struct proc *, void *, register_t *);
int	lfs_segwait(struct proc *, void *, register_t *);
#else
#endif
@


1.31
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.28 2005/06/17 20:39:14 millert Exp 
@


1.30
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.27 2005/02/19 21:19:28 matthieu Exp 
a224 4
struct freebsd_sys_undelete_args {
	syscallarg(char *) path;
};

a469 4
#ifdef FREEBSD_BASED_ON_44LITE_R2
int	freebsd_sys_undelete(struct proc *, void *, register_t *);
#else
#endif
@


1.29
log
@regen after stat/mode_t/nlink_t changes
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.26 2004/07/13 21:04:29 millert Exp 
d235 6
d507 1
@


1.28
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.25 2004/07/09 23:52:02 millert Exp 
d206 1
a206 1
	syscallarg(struct stat *) ub;
d211 1
a211 1
	syscallarg(struct stat *) ub;
d453 1
a453 1
int	sys_fstat(struct proc *, void *, register_t *);
@


1.27
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.24 2004/05/28 18:28:14 tedu Exp 
d104 1
a104 1
	syscallarg(struct ostat *) ub;
d109 1
a109 1
	syscallarg(struct ostat *) ub;
@


1.26
log
@sync
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.23 2004/02/17 20:08:43 tedu Exp 
d315 1
d317 2
@


1.25
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.22 2003/08/24 00:02:42 tedu Exp 
d504 2
@


1.24
log
@Regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.21 2003/05/10 17:53:57 miod Exp 
d437 2
@


1.23
log
@regen now that setreuid/setregid have moved out of compat and into kern
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.20 2003/01/30 03:29:49 millert Exp 
d345 1
a345 1
int	sys_swapon(struct proc *, void *, register_t *);
@


1.22
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.19 2002/10/30 20:10:48 millert Exp 
d385 2
a386 2
int	compat_43_sys_setreuid(struct proc *, void *, register_t *);
int	compat_43_sys_setregid(struct proc *, void *, register_t *);
@


1.21
log
@sync
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.18 2002/07/06 19:14:20 nordin Exp 
d496 2
@


1.20
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_syscallargs.h,v 1.19 2002/03/14 00:44:20 miod Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.17 2002/03/14 00:42:25 miod Exp 
a203 4
struct freebsd_ntp_adjtime_args {
	syscallarg(struct freebsd_timex *) tp;
};

a436 1
int	freebsd_ntp_adjtime(struct proc *, void *, register_t *);
@


1.19
log
@Regen after syscall changes (option PTRACE)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d263 25
a287 25
int	sys_nosys	__P((struct proc *, void *, register_t *));
int	sys_exit	__P((struct proc *, void *, register_t *));
int	sys_fork	__P((struct proc *, void *, register_t *));
int	sys_read	__P((struct proc *, void *, register_t *));
int	sys_write	__P((struct proc *, void *, register_t *));
int	freebsd_sys_open	__P((struct proc *, void *, register_t *));
int	sys_close	__P((struct proc *, void *, register_t *));
int	sys_wait4	__P((struct proc *, void *, register_t *));
int	compat_43_freebsd_sys_creat	__P((struct proc *, void *, register_t *));
int	freebsd_sys_link	__P((struct proc *, void *, register_t *));
int	freebsd_sys_unlink	__P((struct proc *, void *, register_t *));
int	freebsd_sys_chdir	__P((struct proc *, void *, register_t *));
int	sys_fchdir	__P((struct proc *, void *, register_t *));
int	freebsd_sys_mknod	__P((struct proc *, void *, register_t *));
int	freebsd_sys_chmod	__P((struct proc *, void *, register_t *));
int	freebsd_sys_chown	__P((struct proc *, void *, register_t *));
int	sys_obreak	__P((struct proc *, void *, register_t *));
int	freebsd_sys_getfsstat	__P((struct proc *, void *, register_t *));
int	compat_43_sys_lseek	__P((struct proc *, void *, register_t *));
int	sys_getpid	__P((struct proc *, void *, register_t *));
int	freebsd_sys_mount	__P((struct proc *, void *, register_t *));
int	freebsd_sys_unmount	__P((struct proc *, void *, register_t *));
int	sys_setuid	__P((struct proc *, void *, register_t *));
int	sys_getuid	__P((struct proc *, void *, register_t *));
int	sys_geteuid	__P((struct proc *, void *, register_t *));
d289 1
a289 1
int	freebsd_sys_ptrace	__P((struct proc *, void *, register_t *));
d292 18
a309 18
int	sys_recvmsg	__P((struct proc *, void *, register_t *));
int	sys_sendmsg	__P((struct proc *, void *, register_t *));
int	sys_recvfrom	__P((struct proc *, void *, register_t *));
int	sys_accept	__P((struct proc *, void *, register_t *));
int	sys_getpeername	__P((struct proc *, void *, register_t *));
int	sys_getsockname	__P((struct proc *, void *, register_t *));
int	freebsd_sys_access	__P((struct proc *, void *, register_t *));
int	freebsd_sys_chflags	__P((struct proc *, void *, register_t *));
int	sys_fchflags	__P((struct proc *, void *, register_t *));
int	sys_sync	__P((struct proc *, void *, register_t *));
int	sys_kill	__P((struct proc *, void *, register_t *));
int	compat_43_freebsd_sys_stat	__P((struct proc *, void *, register_t *));
int	sys_getppid	__P((struct proc *, void *, register_t *));
int	compat_43_freebsd_sys_lstat	__P((struct proc *, void *, register_t *));
int	sys_dup	__P((struct proc *, void *, register_t *));
int	sys_opipe	__P((struct proc *, void *, register_t *));
int	sys_getegid	__P((struct proc *, void *, register_t *));
int	sys_profil	__P((struct proc *, void *, register_t *));
d311 1
a311 1
int	sys_ktrace	__P((struct proc *, void *, register_t *));
d314 62
a375 62
int	sys_sigaction	__P((struct proc *, void *, register_t *));
int	sys_getgid	__P((struct proc *, void *, register_t *));
int	sys_sigprocmask	__P((struct proc *, void *, register_t *));
int	sys_getlogin	__P((struct proc *, void *, register_t *));
int	sys_setlogin	__P((struct proc *, void *, register_t *));
int	sys_acct	__P((struct proc *, void *, register_t *));
int	sys_sigpending	__P((struct proc *, void *, register_t *));
int	sys_sigaltstack	__P((struct proc *, void *, register_t *));
int	freebsd_sys_ioctl	__P((struct proc *, void *, register_t *));
int	sys_reboot	__P((struct proc *, void *, register_t *));
int	freebsd_sys_revoke	__P((struct proc *, void *, register_t *));
int	freebsd_sys_symlink	__P((struct proc *, void *, register_t *));
int	freebsd_sys_readlink	__P((struct proc *, void *, register_t *));
int	freebsd_sys_execve	__P((struct proc *, void *, register_t *));
int	sys_umask	__P((struct proc *, void *, register_t *));
int	freebsd_sys_chroot	__P((struct proc *, void *, register_t *));
int	compat_43_sys_fstat	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getkerninfo	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getpagesize	__P((struct proc *, void *, register_t *));
int	sys_msync	__P((struct proc *, void *, register_t *));
int	sys_vfork	__P((struct proc *, void *, register_t *));
int	sys_sbrk	__P((struct proc *, void *, register_t *));
int	sys_sstk	__P((struct proc *, void *, register_t *));
int	compat_43_sys_mmap	__P((struct proc *, void *, register_t *));
int	sys_ovadvise	__P((struct proc *, void *, register_t *));
int	sys_munmap	__P((struct proc *, void *, register_t *));
int	sys_mprotect	__P((struct proc *, void *, register_t *));
int	freebsd_sys_madvise	__P((struct proc *, void *, register_t *));
int	sys_mincore	__P((struct proc *, void *, register_t *));
int	sys_getgroups	__P((struct proc *, void *, register_t *));
int	sys_setgroups	__P((struct proc *, void *, register_t *));
int	sys_getpgrp	__P((struct proc *, void *, register_t *));
int	sys_setpgid	__P((struct proc *, void *, register_t *));
int	sys_setitimer	__P((struct proc *, void *, register_t *));
int	compat_43_sys_wait	__P((struct proc *, void *, register_t *));
int	sys_swapon	__P((struct proc *, void *, register_t *));
int	sys_getitimer	__P((struct proc *, void *, register_t *));
int	compat_43_sys_gethostname	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sethostname	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getdtablesize	__P((struct proc *, void *, register_t *));
int	sys_dup2	__P((struct proc *, void *, register_t *));
int	freebsd_sys_fcntl	__P((struct proc *, void *, register_t *));
int	sys_select	__P((struct proc *, void *, register_t *));
int	sys_fsync	__P((struct proc *, void *, register_t *));
int	sys_setpriority	__P((struct proc *, void *, register_t *));
int	sys_socket	__P((struct proc *, void *, register_t *));
int	sys_connect	__P((struct proc *, void *, register_t *));
int	compat_43_sys_accept	__P((struct proc *, void *, register_t *));
int	sys_getpriority	__P((struct proc *, void *, register_t *));
int	compat_43_sys_send	__P((struct proc *, void *, register_t *));
int	compat_43_sys_recv	__P((struct proc *, void *, register_t *));
int	freebsd_sys_sigreturn	__P((struct proc *, void *, register_t *));
int	sys_bind	__P((struct proc *, void *, register_t *));
int	sys_setsockopt	__P((struct proc *, void *, register_t *));
int	sys_listen	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sigvec	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sigblock	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sigsetmask	__P((struct proc *, void *, register_t *));
int	sys_sigsuspend	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sigstack	__P((struct proc *, void *, register_t *));
int	compat_43_sys_recvmsg	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sendmsg	__P((struct proc *, void *, register_t *));
d377 1
a377 1
int	sys_vtrace	__P((struct proc *, void *, register_t *));
d380 33
a412 33
int	sys_gettimeofday	__P((struct proc *, void *, register_t *));
int	sys_getrusage	__P((struct proc *, void *, register_t *));
int	sys_getsockopt	__P((struct proc *, void *, register_t *));
int	sys_readv	__P((struct proc *, void *, register_t *));
int	sys_writev	__P((struct proc *, void *, register_t *));
int	sys_settimeofday	__P((struct proc *, void *, register_t *));
int	sys_fchown	__P((struct proc *, void *, register_t *));
int	sys_fchmod	__P((struct proc *, void *, register_t *));
int	compat_43_sys_recvfrom	__P((struct proc *, void *, register_t *));
int	compat_43_sys_setreuid	__P((struct proc *, void *, register_t *));
int	compat_43_sys_setregid	__P((struct proc *, void *, register_t *));
int	freebsd_sys_rename	__P((struct proc *, void *, register_t *));
int	compat_43_freebsd_sys_truncate	__P((struct proc *, void *, register_t *));
int	compat_43_sys_ftruncate	__P((struct proc *, void *, register_t *));
int	sys_flock	__P((struct proc *, void *, register_t *));
int	freebsd_sys_mkfifo	__P((struct proc *, void *, register_t *));
int	sys_sendto	__P((struct proc *, void *, register_t *));
int	sys_shutdown	__P((struct proc *, void *, register_t *));
int	sys_socketpair	__P((struct proc *, void *, register_t *));
int	freebsd_sys_mkdir	__P((struct proc *, void *, register_t *));
int	freebsd_sys_rmdir	__P((struct proc *, void *, register_t *));
int	sys_utimes	__P((struct proc *, void *, register_t *));
int	sys_adjtime	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getpeername	__P((struct proc *, void *, register_t *));
int	compat_43_sys_gethostid	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sethostid	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getrlimit	__P((struct proc *, void *, register_t *));
int	compat_43_sys_setrlimit	__P((struct proc *, void *, register_t *));
int	compat_43_sys_killpg	__P((struct proc *, void *, register_t *));
int	sys_setsid	__P((struct proc *, void *, register_t *));
int	sys_quotactl	__P((struct proc *, void *, register_t *));
int	compat_43_sys_quota	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getsockname	__P((struct proc *, void *, register_t *));
d414 1
a414 1
int	sys_nfssvc	__P((struct proc *, void *, register_t *));
d417 3
a419 3
int	compat_43_sys_getdirentries	__P((struct proc *, void *, register_t *));
int	freebsd_sys_statfs	__P((struct proc *, void *, register_t *));
int	freebsd_sys_fstatfs	__P((struct proc *, void *, register_t *));
d421 1
a421 1
int	freebsd_sys_getfh	__P((struct proc *, void *, register_t *));
d424 5
a428 5
int	compat_09_sys_getdomainname	__P((struct proc *, void *, register_t *));
int	compat_09_sys_setdomainname	__P((struct proc *, void *, register_t *));
int	compat_09_sys_uname	__P((struct proc *, void *, register_t *));
int	sys_sysarch	__P((struct proc *, void *, register_t *));
int	freebsd_sys_rtprio	__P((struct proc *, void *, register_t *));
d430 1
a430 1
int	compat_10_sys_semsys	__P((struct proc *, void *, register_t *));
d434 1
a434 1
int	compat_10_sys_msgsys	__P((struct proc *, void *, register_t *));
d438 1
a438 1
int	compat_10_sys_shmsys	__P((struct proc *, void *, register_t *));
d441 4
a444 4
int	freebsd_ntp_adjtime	__P((struct proc *, void *, register_t *));
int	sys_setgid	__P((struct proc *, void *, register_t *));
int	sys_setegid	__P((struct proc *, void *, register_t *));
int	sys_seteuid	__P((struct proc *, void *, register_t *));
d446 22
a467 22
int	lfs_bmapv	__P((struct proc *, void *, register_t *));
int	lfs_markv	__P((struct proc *, void *, register_t *));
int	lfs_segclean	__P((struct proc *, void *, register_t *));
int	lfs_segwait	__P((struct proc *, void *, register_t *));
#else
#endif
int	freebsd_sys_stat	__P((struct proc *, void *, register_t *));
int	sys_fstat	__P((struct proc *, void *, register_t *));
int	freebsd_sys_lstat	__P((struct proc *, void *, register_t *));
int	freebsd_sys_pathconf	__P((struct proc *, void *, register_t *));
int	sys_fpathconf	__P((struct proc *, void *, register_t *));
int	sys_getrlimit	__P((struct proc *, void *, register_t *));
int	sys_setrlimit	__P((struct proc *, void *, register_t *));
int	sys_getdirentries	__P((struct proc *, void *, register_t *));
int	sys_mmap	__P((struct proc *, void *, register_t *));
int	sys_nosys	__P((struct proc *, void *, register_t *));
int	sys_lseek	__P((struct proc *, void *, register_t *));
int	freebsd_sys_truncate	__P((struct proc *, void *, register_t *));
int	sys_ftruncate	__P((struct proc *, void *, register_t *));
int	sys___sysctl	__P((struct proc *, void *, register_t *));
int	sys_mlock	__P((struct proc *, void *, register_t *));
int	sys_munlock	__P((struct proc *, void *, register_t *));
d469 1
a469 1
int	freebsd_sys_undelete	__P((struct proc *, void *, register_t *));
d472 2
a473 2
int	sys_getpgid	__P((struct proc *, void *, register_t *));
int	sys_poll	__P((struct proc *, void *, register_t *));
d475 3
a477 3
int	sys___semctl	__P((struct proc *, void *, register_t *));
int	sys_semget	__P((struct proc *, void *, register_t *));
int	sys_semop	__P((struct proc *, void *, register_t *));
d481 4
a484 4
int	sys_msgctl	__P((struct proc *, void *, register_t *));
int	sys_msgget	__P((struct proc *, void *, register_t *));
int	sys_msgsnd	__P((struct proc *, void *, register_t *));
int	sys_msgrcv	__P((struct proc *, void *, register_t *));
d488 17
a504 17
int	sys_shmat	__P((struct proc *, void *, register_t *));
int	sys_shmctl	__P((struct proc *, void *, register_t *));
int	sys_shmdt	__P((struct proc *, void *, register_t *));
int	sys_shmget	__P((struct proc *, void *, register_t *));
#else
#endif
int	sys_clock_gettime	__P((struct proc *, void *, register_t *));
int	sys_nanosleep	__P((struct proc *, void *, register_t *));
int	sys_minherit	__P((struct proc *, void *, register_t *));
int	sys_rfork	__P((struct proc *, void *, register_t *));
int	freebsd_sys_poll2	__P((struct proc *, void *, register_t *));
int	sys_issetugid	__P((struct proc *, void *, register_t *));
int	sys_lchown	__P((struct proc *, void *, register_t *));
int	freebsd_sys_sigprocmask40	__P((struct proc *, void *, register_t *));
int	freebsd_sys_sigsuspend40	__P((struct proc *, void *, register_t *));
int	freebsd_sys_sigaction40	__P((struct proc *, void *, register_t *));
int	freebsd_sys_sigpending40	__P((struct proc *, void *, register_t *));
@


1.18
log
@sync. -moj
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.16 2001/11/27 19:34:20 maja Exp 
d288 1
d290 2
@


1.18.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_syscallargs.h,v 1.18 2001/11/27 19:35:26 maja Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.17 2002/03/14 00:42:25 miod Exp 
d263 44
a306 47
int	sys_nosys(struct proc *, void *, register_t *);
int	sys_exit(struct proc *, void *, register_t *);
int	sys_fork(struct proc *, void *, register_t *);
int	sys_read(struct proc *, void *, register_t *);
int	sys_write(struct proc *, void *, register_t *);
int	freebsd_sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	sys_wait4(struct proc *, void *, register_t *);
int	compat_43_freebsd_sys_creat(struct proc *, void *, register_t *);
int	freebsd_sys_link(struct proc *, void *, register_t *);
int	freebsd_sys_unlink(struct proc *, void *, register_t *);
int	freebsd_sys_chdir(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	freebsd_sys_mknod(struct proc *, void *, register_t *);
int	freebsd_sys_chmod(struct proc *, void *, register_t *);
int	freebsd_sys_chown(struct proc *, void *, register_t *);
int	sys_obreak(struct proc *, void *, register_t *);
int	freebsd_sys_getfsstat(struct proc *, void *, register_t *);
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	freebsd_sys_mount(struct proc *, void *, register_t *);
int	freebsd_sys_unmount(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	sys_geteuid(struct proc *, void *, register_t *);
#ifdef PTRACE
int	freebsd_sys_ptrace(struct proc *, void *, register_t *);
#else
#endif
int	sys_recvmsg(struct proc *, void *, register_t *);
int	sys_sendmsg(struct proc *, void *, register_t *);
int	sys_recvfrom(struct proc *, void *, register_t *);
int	sys_accept(struct proc *, void *, register_t *);
int	sys_getpeername(struct proc *, void *, register_t *);
int	sys_getsockname(struct proc *, void *, register_t *);
int	freebsd_sys_access(struct proc *, void *, register_t *);
int	freebsd_sys_chflags(struct proc *, void *, register_t *);
int	sys_fchflags(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	sys_kill(struct proc *, void *, register_t *);
int	compat_43_freebsd_sys_stat(struct proc *, void *, register_t *);
int	sys_getppid(struct proc *, void *, register_t *);
int	compat_43_freebsd_sys_lstat(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_opipe(struct proc *, void *, register_t *);
int	sys_getegid(struct proc *, void *, register_t *);
int	sys_profil(struct proc *, void *, register_t *);
d308 1
a308 1
int	sys_ktrace(struct proc *, void *, register_t *);
d311 62
a372 62
int	sys_sigaction(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	sys_sigprocmask(struct proc *, void *, register_t *);
int	sys_getlogin(struct proc *, void *, register_t *);
int	sys_setlogin(struct proc *, void *, register_t *);
int	sys_acct(struct proc *, void *, register_t *);
int	sys_sigpending(struct proc *, void *, register_t *);
int	sys_sigaltstack(struct proc *, void *, register_t *);
int	freebsd_sys_ioctl(struct proc *, void *, register_t *);
int	sys_reboot(struct proc *, void *, register_t *);
int	freebsd_sys_revoke(struct proc *, void *, register_t *);
int	freebsd_sys_symlink(struct proc *, void *, register_t *);
int	freebsd_sys_readlink(struct proc *, void *, register_t *);
int	freebsd_sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	freebsd_sys_chroot(struct proc *, void *, register_t *);
int	compat_43_sys_fstat(struct proc *, void *, register_t *);
int	compat_43_sys_getkerninfo(struct proc *, void *, register_t *);
int	compat_43_sys_getpagesize(struct proc *, void *, register_t *);
int	sys_msync(struct proc *, void *, register_t *);
int	sys_vfork(struct proc *, void *, register_t *);
int	sys_sbrk(struct proc *, void *, register_t *);
int	sys_sstk(struct proc *, void *, register_t *);
int	compat_43_sys_mmap(struct proc *, void *, register_t *);
int	sys_ovadvise(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	freebsd_sys_madvise(struct proc *, void *, register_t *);
int	sys_mincore(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	sys_getpgrp(struct proc *, void *, register_t *);
int	sys_setpgid(struct proc *, void *, register_t *);
int	sys_setitimer(struct proc *, void *, register_t *);
int	compat_43_sys_wait(struct proc *, void *, register_t *);
int	sys_swapon(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
int	compat_43_sys_gethostname(struct proc *, void *, register_t *);
int	compat_43_sys_sethostname(struct proc *, void *, register_t *);
int	compat_43_sys_getdtablesize(struct proc *, void *, register_t *);
int	sys_dup2(struct proc *, void *, register_t *);
int	freebsd_sys_fcntl(struct proc *, void *, register_t *);
int	sys_select(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	sys_setpriority(struct proc *, void *, register_t *);
int	sys_socket(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	compat_43_sys_accept(struct proc *, void *, register_t *);
int	sys_getpriority(struct proc *, void *, register_t *);
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
int	freebsd_sys_sigreturn(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_setsockopt(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	compat_43_sys_sigvec(struct proc *, void *, register_t *);
int	compat_43_sys_sigblock(struct proc *, void *, register_t *);
int	compat_43_sys_sigsetmask(struct proc *, void *, register_t *);
int	sys_sigsuspend(struct proc *, void *, register_t *);
int	compat_43_sys_sigstack(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
d374 1
a374 1
int	sys_vtrace(struct proc *, void *, register_t *);
d377 33
a409 33
int	sys_gettimeofday(struct proc *, void *, register_t *);
int	sys_getrusage(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_readv(struct proc *, void *, register_t *);
int	sys_writev(struct proc *, void *, register_t *);
int	sys_settimeofday(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
int	compat_43_sys_setreuid(struct proc *, void *, register_t *);
int	compat_43_sys_setregid(struct proc *, void *, register_t *);
int	freebsd_sys_rename(struct proc *, void *, register_t *);
int	compat_43_freebsd_sys_truncate(struct proc *, void *, register_t *);
int	compat_43_sys_ftruncate(struct proc *, void *, register_t *);
int	sys_flock(struct proc *, void *, register_t *);
int	freebsd_sys_mkfifo(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
int	freebsd_sys_mkdir(struct proc *, void *, register_t *);
int	freebsd_sys_rmdir(struct proc *, void *, register_t *);
int	sys_utimes(struct proc *, void *, register_t *);
int	sys_adjtime(struct proc *, void *, register_t *);
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_gethostid(struct proc *, void *, register_t *);
int	compat_43_sys_sethostid(struct proc *, void *, register_t *);
int	compat_43_sys_getrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_setrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_killpg(struct proc *, void *, register_t *);
int	sys_setsid(struct proc *, void *, register_t *);
int	sys_quotactl(struct proc *, void *, register_t *);
int	compat_43_sys_quota(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
d411 1
a411 1
int	sys_nfssvc(struct proc *, void *, register_t *);
d414 3
a416 3
int	compat_43_sys_getdirentries(struct proc *, void *, register_t *);
int	freebsd_sys_statfs(struct proc *, void *, register_t *);
int	freebsd_sys_fstatfs(struct proc *, void *, register_t *);
d418 1
a418 1
int	freebsd_sys_getfh(struct proc *, void *, register_t *);
d421 5
a425 5
int	compat_09_sys_getdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_setdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_uname(struct proc *, void *, register_t *);
int	sys_sysarch(struct proc *, void *, register_t *);
int	freebsd_sys_rtprio(struct proc *, void *, register_t *);
d427 1
a427 1
int	compat_10_sys_semsys(struct proc *, void *, register_t *);
d431 1
a431 1
int	compat_10_sys_msgsys(struct proc *, void *, register_t *);
d435 1
a435 1
int	compat_10_sys_shmsys(struct proc *, void *, register_t *);
d438 4
a441 4
int	freebsd_ntp_adjtime(struct proc *, void *, register_t *);
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_setegid(struct proc *, void *, register_t *);
int	sys_seteuid(struct proc *, void *, register_t *);
d443 22
a464 22
int	lfs_bmapv(struct proc *, void *, register_t *);
int	lfs_markv(struct proc *, void *, register_t *);
int	lfs_segclean(struct proc *, void *, register_t *);
int	lfs_segwait(struct proc *, void *, register_t *);
#else
#endif
int	freebsd_sys_stat(struct proc *, void *, register_t *);
int	sys_fstat(struct proc *, void *, register_t *);
int	freebsd_sys_lstat(struct proc *, void *, register_t *);
int	freebsd_sys_pathconf(struct proc *, void *, register_t *);
int	sys_fpathconf(struct proc *, void *, register_t *);
int	sys_getrlimit(struct proc *, void *, register_t *);
int	sys_setrlimit(struct proc *, void *, register_t *);
int	sys_getdirentries(struct proc *, void *, register_t *);
int	sys_mmap(struct proc *, void *, register_t *);
int	sys_nosys(struct proc *, void *, register_t *);
int	sys_lseek(struct proc *, void *, register_t *);
int	freebsd_sys_truncate(struct proc *, void *, register_t *);
int	sys_ftruncate(struct proc *, void *, register_t *);
int	sys___sysctl(struct proc *, void *, register_t *);
int	sys_mlock(struct proc *, void *, register_t *);
int	sys_munlock(struct proc *, void *, register_t *);
d466 1
a466 1
int	freebsd_sys_undelete(struct proc *, void *, register_t *);
d469 2
a470 2
int	sys_getpgid(struct proc *, void *, register_t *);
int	sys_poll(struct proc *, void *, register_t *);
d472 3
a474 3
int	sys___semctl(struct proc *, void *, register_t *);
int	sys_semget(struct proc *, void *, register_t *);
int	sys_semop(struct proc *, void *, register_t *);
d478 4
a481 4
int	sys_msgctl(struct proc *, void *, register_t *);
int	sys_msgget(struct proc *, void *, register_t *);
int	sys_msgsnd(struct proc *, void *, register_t *);
int	sys_msgrcv(struct proc *, void *, register_t *);
d485 17
a501 17
int	sys_shmat(struct proc *, void *, register_t *);
int	sys_shmctl(struct proc *, void *, register_t *);
int	sys_shmdt(struct proc *, void *, register_t *);
int	sys_shmget(struct proc *, void *, register_t *);
#else
#endif
int	sys_clock_gettime(struct proc *, void *, register_t *);
int	sys_nanosleep(struct proc *, void *, register_t *);
int	sys_minherit(struct proc *, void *, register_t *);
int	sys_rfork(struct proc *, void *, register_t *);
int	freebsd_sys_poll2(struct proc *, void *, register_t *);
int	sys_issetugid(struct proc *, void *, register_t *);
int	sys_lchown(struct proc *, void *, register_t *);
int	freebsd_sys_sigprocmask40(struct proc *, void *, register_t *);
int	freebsd_sys_sigsuspend40(struct proc *, void *, register_t *);
int	freebsd_sys_sigaction40(struct proc *, void *, register_t *);
int	freebsd_sys_sigpending40(struct proc *, void *, register_t *);
@


1.18.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_syscallargs.h,v 1.18.2.1 2002/06/11 03:28:07 art Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.18 2002/07/06 19:14:20 nordin Exp 
d204 4
d441 1
@


1.18.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.21 2003/05/10 17:53:57 miod Exp 
d345 1
a345 1
int	compat_25_sys_swapon(struct proc *, void *, register_t *);
d385 2
a386 2
int	sys_setreuid(struct proc *, void *, register_t *);
int	sys_setregid(struct proc *, void *, register_t *);
a495 2
int	sys_setresuid(struct proc *, void *, register_t *);
int	sys_setresgid(struct proc *, void *, register_t *);
@


1.17
log
@sync
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.15 2001/02/02 19:45:09 tholo Exp 
d491 1
@


1.16
log
@sync
@
text
@d10 15
a24 1
#define	syscallarg(x)	union { x datum; register_t pad; }
@


1.15
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.14 2000/07/07 18:26:43 brad Exp 
d225 20
d483 4
@


1.14
log
@sys_semconfig goes foom
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.13 2000/05/01 23:10:58 deraadt Exp 
@


1.13
log
@sync
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.12 1999/10/27 07:32:55 niklas Exp 
a440 1
int	sys_semconfig	__P((struct proc *, void *, register_t *));
@


1.13.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_syscallargs.h,v 1.16 2001/02/02 19:46:38 tholo Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.15 2001/02/02 19:45:09 tholo Exp 
a224 20
struct freebsd_sys_sigprocmask40_args {
	syscallarg(int) how;
	syscallarg(const freebsd_sigset_t *) set;
	syscallarg(freebsd_sigset_t *) oset;
};

struct freebsd_sys_sigsuspend40_args {
	syscallarg(const freebsd_sigset_t *) sigmask;
};

struct freebsd_sys_sigaction40_args {
	syscallarg(int) sig;
	syscallarg(const struct freebsd_sigaction *) act;
	syscallarg(struct freebsd_sigaction *) oact;
};

struct freebsd_sys_sigpending40_args {
	syscallarg(freebsd_sigset_t *) set;
};

d441 1
a463 4
int	freebsd_sys_sigprocmask40	__P((struct proc *, void *, register_t *));
int	freebsd_sys_sigsuspend40	__P((struct proc *, void *, register_t *));
int	freebsd_sys_sigaction40	__P((struct proc *, void *, register_t *));
int	freebsd_sys_sigpending40	__P((struct proc *, void *, register_t *));
@


1.13.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_syscallargs.h,v 1.13.2.1 2001/05/14 22:04:25 niklas Exp $	*/
d10 1
a10 15
#ifdef	syscallarg
#undef	syscallarg
#endif

#define	syscallarg(x)							\
	union {								\
		register_t pad;						\
		struct { x datum; } le;					\
		struct {						\
			int8_t pad[ (sizeof (register_t) < sizeof (x))	\
				? 0					\
				: sizeof (register_t) - sizeof (x)];	\
			x datum;					\
		} be;							\
	}
@


1.13.2.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_syscallargs.h,v 1.13.2.2 2001/10/31 03:11:46 nate Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.16 2001/11/27 19:34:20 maja Exp 
a490 1
int	sys_clock_gettime	__P((struct proc *, void *, register_t *));
@


1.13.2.4
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.17 2002/03/14 00:42:25 miod Exp 
d263 44
a306 47
int	sys_nosys(struct proc *, void *, register_t *);
int	sys_exit(struct proc *, void *, register_t *);
int	sys_fork(struct proc *, void *, register_t *);
int	sys_read(struct proc *, void *, register_t *);
int	sys_write(struct proc *, void *, register_t *);
int	freebsd_sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	sys_wait4(struct proc *, void *, register_t *);
int	compat_43_freebsd_sys_creat(struct proc *, void *, register_t *);
int	freebsd_sys_link(struct proc *, void *, register_t *);
int	freebsd_sys_unlink(struct proc *, void *, register_t *);
int	freebsd_sys_chdir(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	freebsd_sys_mknod(struct proc *, void *, register_t *);
int	freebsd_sys_chmod(struct proc *, void *, register_t *);
int	freebsd_sys_chown(struct proc *, void *, register_t *);
int	sys_obreak(struct proc *, void *, register_t *);
int	freebsd_sys_getfsstat(struct proc *, void *, register_t *);
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	freebsd_sys_mount(struct proc *, void *, register_t *);
int	freebsd_sys_unmount(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	sys_geteuid(struct proc *, void *, register_t *);
#ifdef PTRACE
int	freebsd_sys_ptrace(struct proc *, void *, register_t *);
#else
#endif
int	sys_recvmsg(struct proc *, void *, register_t *);
int	sys_sendmsg(struct proc *, void *, register_t *);
int	sys_recvfrom(struct proc *, void *, register_t *);
int	sys_accept(struct proc *, void *, register_t *);
int	sys_getpeername(struct proc *, void *, register_t *);
int	sys_getsockname(struct proc *, void *, register_t *);
int	freebsd_sys_access(struct proc *, void *, register_t *);
int	freebsd_sys_chflags(struct proc *, void *, register_t *);
int	sys_fchflags(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	sys_kill(struct proc *, void *, register_t *);
int	compat_43_freebsd_sys_stat(struct proc *, void *, register_t *);
int	sys_getppid(struct proc *, void *, register_t *);
int	compat_43_freebsd_sys_lstat(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_opipe(struct proc *, void *, register_t *);
int	sys_getegid(struct proc *, void *, register_t *);
int	sys_profil(struct proc *, void *, register_t *);
d308 1
a308 1
int	sys_ktrace(struct proc *, void *, register_t *);
d311 62
a372 62
int	sys_sigaction(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	sys_sigprocmask(struct proc *, void *, register_t *);
int	sys_getlogin(struct proc *, void *, register_t *);
int	sys_setlogin(struct proc *, void *, register_t *);
int	sys_acct(struct proc *, void *, register_t *);
int	sys_sigpending(struct proc *, void *, register_t *);
int	sys_sigaltstack(struct proc *, void *, register_t *);
int	freebsd_sys_ioctl(struct proc *, void *, register_t *);
int	sys_reboot(struct proc *, void *, register_t *);
int	freebsd_sys_revoke(struct proc *, void *, register_t *);
int	freebsd_sys_symlink(struct proc *, void *, register_t *);
int	freebsd_sys_readlink(struct proc *, void *, register_t *);
int	freebsd_sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	freebsd_sys_chroot(struct proc *, void *, register_t *);
int	compat_43_sys_fstat(struct proc *, void *, register_t *);
int	compat_43_sys_getkerninfo(struct proc *, void *, register_t *);
int	compat_43_sys_getpagesize(struct proc *, void *, register_t *);
int	sys_msync(struct proc *, void *, register_t *);
int	sys_vfork(struct proc *, void *, register_t *);
int	sys_sbrk(struct proc *, void *, register_t *);
int	sys_sstk(struct proc *, void *, register_t *);
int	compat_43_sys_mmap(struct proc *, void *, register_t *);
int	sys_ovadvise(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	freebsd_sys_madvise(struct proc *, void *, register_t *);
int	sys_mincore(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	sys_getpgrp(struct proc *, void *, register_t *);
int	sys_setpgid(struct proc *, void *, register_t *);
int	sys_setitimer(struct proc *, void *, register_t *);
int	compat_43_sys_wait(struct proc *, void *, register_t *);
int	sys_swapon(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
int	compat_43_sys_gethostname(struct proc *, void *, register_t *);
int	compat_43_sys_sethostname(struct proc *, void *, register_t *);
int	compat_43_sys_getdtablesize(struct proc *, void *, register_t *);
int	sys_dup2(struct proc *, void *, register_t *);
int	freebsd_sys_fcntl(struct proc *, void *, register_t *);
int	sys_select(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	sys_setpriority(struct proc *, void *, register_t *);
int	sys_socket(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	compat_43_sys_accept(struct proc *, void *, register_t *);
int	sys_getpriority(struct proc *, void *, register_t *);
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
int	freebsd_sys_sigreturn(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_setsockopt(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	compat_43_sys_sigvec(struct proc *, void *, register_t *);
int	compat_43_sys_sigblock(struct proc *, void *, register_t *);
int	compat_43_sys_sigsetmask(struct proc *, void *, register_t *);
int	sys_sigsuspend(struct proc *, void *, register_t *);
int	compat_43_sys_sigstack(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
d374 1
a374 1
int	sys_vtrace(struct proc *, void *, register_t *);
d377 33
a409 33
int	sys_gettimeofday(struct proc *, void *, register_t *);
int	sys_getrusage(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_readv(struct proc *, void *, register_t *);
int	sys_writev(struct proc *, void *, register_t *);
int	sys_settimeofday(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
int	compat_43_sys_setreuid(struct proc *, void *, register_t *);
int	compat_43_sys_setregid(struct proc *, void *, register_t *);
int	freebsd_sys_rename(struct proc *, void *, register_t *);
int	compat_43_freebsd_sys_truncate(struct proc *, void *, register_t *);
int	compat_43_sys_ftruncate(struct proc *, void *, register_t *);
int	sys_flock(struct proc *, void *, register_t *);
int	freebsd_sys_mkfifo(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
int	freebsd_sys_mkdir(struct proc *, void *, register_t *);
int	freebsd_sys_rmdir(struct proc *, void *, register_t *);
int	sys_utimes(struct proc *, void *, register_t *);
int	sys_adjtime(struct proc *, void *, register_t *);
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_gethostid(struct proc *, void *, register_t *);
int	compat_43_sys_sethostid(struct proc *, void *, register_t *);
int	compat_43_sys_getrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_setrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_killpg(struct proc *, void *, register_t *);
int	sys_setsid(struct proc *, void *, register_t *);
int	sys_quotactl(struct proc *, void *, register_t *);
int	compat_43_sys_quota(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
d411 1
a411 1
int	sys_nfssvc(struct proc *, void *, register_t *);
d414 3
a416 3
int	compat_43_sys_getdirentries(struct proc *, void *, register_t *);
int	freebsd_sys_statfs(struct proc *, void *, register_t *);
int	freebsd_sys_fstatfs(struct proc *, void *, register_t *);
d418 1
a418 1
int	freebsd_sys_getfh(struct proc *, void *, register_t *);
d421 5
a425 5
int	compat_09_sys_getdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_setdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_uname(struct proc *, void *, register_t *);
int	sys_sysarch(struct proc *, void *, register_t *);
int	freebsd_sys_rtprio(struct proc *, void *, register_t *);
d427 1
a427 1
int	compat_10_sys_semsys(struct proc *, void *, register_t *);
d431 1
a431 1
int	compat_10_sys_msgsys(struct proc *, void *, register_t *);
d435 1
a435 1
int	compat_10_sys_shmsys(struct proc *, void *, register_t *);
d438 4
a441 4
int	freebsd_ntp_adjtime(struct proc *, void *, register_t *);
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_setegid(struct proc *, void *, register_t *);
int	sys_seteuid(struct proc *, void *, register_t *);
d443 22
a464 22
int	lfs_bmapv(struct proc *, void *, register_t *);
int	lfs_markv(struct proc *, void *, register_t *);
int	lfs_segclean(struct proc *, void *, register_t *);
int	lfs_segwait(struct proc *, void *, register_t *);
#else
#endif
int	freebsd_sys_stat(struct proc *, void *, register_t *);
int	sys_fstat(struct proc *, void *, register_t *);
int	freebsd_sys_lstat(struct proc *, void *, register_t *);
int	freebsd_sys_pathconf(struct proc *, void *, register_t *);
int	sys_fpathconf(struct proc *, void *, register_t *);
int	sys_getrlimit(struct proc *, void *, register_t *);
int	sys_setrlimit(struct proc *, void *, register_t *);
int	sys_getdirentries(struct proc *, void *, register_t *);
int	sys_mmap(struct proc *, void *, register_t *);
int	sys_nosys(struct proc *, void *, register_t *);
int	sys_lseek(struct proc *, void *, register_t *);
int	freebsd_sys_truncate(struct proc *, void *, register_t *);
int	sys_ftruncate(struct proc *, void *, register_t *);
int	sys___sysctl(struct proc *, void *, register_t *);
int	sys_mlock(struct proc *, void *, register_t *);
int	sys_munlock(struct proc *, void *, register_t *);
d466 1
a466 1
int	freebsd_sys_undelete(struct proc *, void *, register_t *);
d469 2
a470 2
int	sys_getpgid(struct proc *, void *, register_t *);
int	sys_poll(struct proc *, void *, register_t *);
d472 3
a474 3
int	sys___semctl(struct proc *, void *, register_t *);
int	sys_semget(struct proc *, void *, register_t *);
int	sys_semop(struct proc *, void *, register_t *);
d478 4
a481 4
int	sys_msgctl(struct proc *, void *, register_t *);
int	sys_msgget(struct proc *, void *, register_t *);
int	sys_msgsnd(struct proc *, void *, register_t *);
int	sys_msgrcv(struct proc *, void *, register_t *);
d485 17
a501 17
int	sys_shmat(struct proc *, void *, register_t *);
int	sys_shmctl(struct proc *, void *, register_t *);
int	sys_shmdt(struct proc *, void *, register_t *);
int	sys_shmget(struct proc *, void *, register_t *);
#else
#endif
int	sys_clock_gettime(struct proc *, void *, register_t *);
int	sys_nanosleep(struct proc *, void *, register_t *);
int	sys_minherit(struct proc *, void *, register_t *);
int	sys_rfork(struct proc *, void *, register_t *);
int	freebsd_sys_poll2(struct proc *, void *, register_t *);
int	sys_issetugid(struct proc *, void *, register_t *);
int	sys_lchown(struct proc *, void *, register_t *);
int	freebsd_sys_sigprocmask40(struct proc *, void *, register_t *);
int	freebsd_sys_sigsuspend40(struct proc *, void *, register_t *);
int	freebsd_sys_sigaction40(struct proc *, void *, register_t *);
int	freebsd_sys_sigpending40(struct proc *, void *, register_t *);
@


1.13.2.5
log
@Sync the SMP branch with 3.3
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.20 2003/01/30 03:29:49 millert Exp 
d204 4
d389 2
a390 2
int	sys_setreuid(struct proc *, void *, register_t *);
int	sys_setregid(struct proc *, void *, register_t *);
d441 1
a500 2
int	sys_setresuid(struct proc *, void *, register_t *);
int	sys_setresgid(struct proc *, void *, register_t *);
@


1.13.2.6
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: freebsd_syscallargs.h,v 1.13.2.5 2003/03/27 23:53:47 niklas Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.21 2003/05/10 17:53:57 miod Exp 
d345 1
a345 1
int	compat_25_sys_swapon(struct proc *, void *, register_t *);
@


1.13.2.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.22 2003/08/24 00:02:42 tedu Exp 
a436 2
int	sys_pread(struct proc *, void *, register_t *);
int	sys_pwrite(struct proc *, void *, register_t *);
@


1.13.2.8
log
@Merge with the trunk
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.24 2004/05/28 18:28:14 tedu Exp 
a314 1
#ifdef ACCOUNTING
a315 2
#else
#endif
a503 2
int	sys_kqueue(struct proc *, void *, register_t *);
int	sys_kevent(struct proc *, void *, register_t *);
@


1.12
log
@sync
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.11 1999/06/07 07:17:46 deraadt Exp 
d135 6
d318 1
a318 1
int	sys_fcntl	__P((struct proc *, void *, register_t *));
@


1.11
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.10 1999/05/31 17:34:45 millert Exp 
d264 1
a264 1
int	sys_pipe	__P((struct proc *, void *, register_t *));
@


1.10
log
@New struct statfs with mount options.  NOTE: this replaces statfs(2),
fstatfs(2), and getfsstat(2) so you will need to build a new kernel
before doing a "make build" or you will get "unimplemented syscall" errors.

The new struct statfs has the following featuires:
o Has a u_int32_t flags field--now softdep can have a real flag.

o Uses u_int32_t instead of longs (nicer on the alpha).  Note: the man
page used to lie about setting invalid/unused fields to -1.  SunOS does
that but our code never has.

o Gets rid of f_type completely.  It hasn't been used since NetBSD 0.9
and having it there but always 0 is confusing.  It is conceivable
that this may cause some old code to not compile but that is better
than silently breaking.

o Adds a mount_info union that contains the FSTYPE_args struct.  This
means that "mount" can now tell you all the options a filesystem was
mounted with.  This is especially nice for NFS.

Other changes:
o The linux statfs emulation didn't convert between BSD fs names
  and linux f_type numbers.  Now it does, since the BSD f_type
  number is useless to linux apps (and has been removed anyway)

o FreeBSD's struct statfs is different from our (both old and new)
and thus needs conversion.  Previously, the OpenBSD syscalls
were used without any real translation.

o mount(8) will now show extra info when invoked with no arguments.
However, to see *everything* you need to use the -v (verbose) flag.
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.9 1999/02/10 08:05:08 deraadt Exp 
@


1.9
log
@sync
@
text
@d53 6
d165 6
a170 1
	syscallarg(struct statfs *) buf;
d240 1
a240 1
int	sys_getfsstat	__P((struct proc *, void *, register_t *));
d376 1
a376 1
int	sys_fstatfs	__P((struct proc *, void *, register_t *));
@


1.8
log
@sync
@
text
@d1 2
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.8 1997/11/13 18:35:23 deraadt Exp 
d123 6
d287 1
a287 1
int	sys_madvise	__P((struct proc *, void *, register_t *));
@


1.7
log
@sync
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.7 1997/11/13 07:35:38 deraadt Exp 
a120 6
struct freebsd_sys_msync_args {
	syscallarg(caddr_t) addr;
	syscallarg(size_t) len;
	syscallarg(int) flags;
};

d271 1
a271 1
int	freebsd_sys_msync	__P((struct proc *, void *, register_t *));
@


1.6
log
@sync
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.6 1997/11/13 07:27:03 deraadt Exp 
d200 6
d442 1
a442 1
int	sys_poll	__P((struct proc *, void *, register_t *));
@


1.5
log
@sync
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.5 1997/11/13 06:53:51 deraadt Exp 
d412 1
d417 3
d424 3
d431 2
@


1.4
log
@Added Makefiles to build stuff from syscalls.master in some emulations.
Regenerated derived files from various syscalls.master files. Added $OpenBSD$.
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.4 1996/08/02 20:29:12 niklas Exp 
d410 20
@


1.3
log
@update from netbsd
@
text
@d5 1
a5 1
 * created from	NetBSD: syscalls.master,v 1.3 1995/10/10 18:28:40 mycroft Exp 
@


1.2
log
@update to netbsd
@
text
@d5 1
a5 1
 * created from	NetBSD: syscalls.master,v 1.2 1995/10/10 01:34:37 mycroft Exp 
@


1.1
log
@Initial revision
@
text
@d242 1
a242 1
int	getppid	__P((struct proc *, void *, register_t *));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
