head	1.35;
access;
symbols
	OPENBSD_4_9:1.34.0.4
	OPENBSD_4_9_BASE:1.34
	OPENBSD_4_8:1.34.0.2
	OPENBSD_4_8_BASE:1.34
	OPENBSD_4_7:1.33.0.8
	OPENBSD_4_7_BASE:1.33
	OPENBSD_4_6:1.33.0.10
	OPENBSD_4_6_BASE:1.33
	OPENBSD_4_5:1.33.0.6
	OPENBSD_4_5_BASE:1.33
	OPENBSD_4_4:1.33.0.4
	OPENBSD_4_4_BASE:1.33
	OPENBSD_4_3:1.33.0.2
	OPENBSD_4_3_BASE:1.33
	OPENBSD_4_2:1.31.0.2
	OPENBSD_4_2_BASE:1.31
	OPENBSD_4_1:1.30.0.2
	OPENBSD_4_1_BASE:1.30
	OPENBSD_4_0:1.29.0.4
	OPENBSD_4_0_BASE:1.29
	OPENBSD_3_9:1.29.0.2
	OPENBSD_3_9_BASE:1.29
	OPENBSD_3_8:1.28.0.2
	OPENBSD_3_8_BASE:1.28
	OPENBSD_3_7:1.27.0.2
	OPENBSD_3_7_BASE:1.27
	OPENBSD_3_6:1.26.0.2
	OPENBSD_3_6_BASE:1.26
	SMP_SYNC_A:1.24
	SMP_SYNC_B:1.24
	OPENBSD_3_5:1.23.0.2
	OPENBSD_3_5_BASE:1.23
	OPENBSD_3_4:1.22.0.2
	OPENBSD_3_4_BASE:1.22
	UBC_SYNC_A:1.21
	OPENBSD_3_3:1.20.0.2
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.18.0.2
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	UBC_SYNC_B:1.18
	UBC:1.16.0.2
	UBC_BASE:1.16
	OPENBSD_3_0:1.15.0.4
	OPENBSD_3_0_BASE:1.15
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_9:1.15.0.2
	OPENBSD_2_8:1.14.0.2
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.13.0.2
	OPENBSD_2_7_BASE:1.13
	SMP:1.12.0.2
	SMP_BASE:1.12
	kame_19991208:1.12
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.35
date	2011.04.05.12.50.15;	author guenther;	state dead;
branches;
next	1.34;

1.34
date	2010.05.23.11.35.18;	author deraadt;	state Exp;
branches;
next	1.33;

1.33
date	2008.01.05.00.36.13;	author miod;	state Exp;
branches;
next	1.32;

1.32
date	2007.11.28.13.47.02;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2007.04.05.15.33.42;	author tedu;	state Exp;
branches;
next	1.30;

1.30
date	2006.09.22.15.29.57;	author pedro;	state Exp;
branches;
next	1.29;

1.29
date	2006.02.07.01.34.21;	author brad;	state Exp;
branches;
next	1.28;

1.28
date	2005.06.17.20.39.14;	author millert;	state Exp;
branches;
next	1.27;

1.27
date	2005.02.19.21.19.28;	author matthieu;	state Exp;
branches;
next	1.26;

1.26
date	2004.07.13.21.04.29;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	2004.07.09.23.52.02;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2004.05.28.18.28.14;	author tedu;	state Exp;
branches;
next	1.23;

1.23
date	2004.02.17.20.08.43;	author tedu;	state Exp;
branches;
next	1.22;

1.22
date	2003.08.24.00.02.42;	author tedu;	state Exp;
branches;
next	1.21;

1.21
date	2003.05.10.17.53.57;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2003.01.30.03.29.49;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2002.10.30.20.10.48;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2002.07.06.19.14.20;	author nordin;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.14.00.42.25;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2001.11.27.19.34.20;	author maja;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2001.02.02.19.45.09;	author tholo;	state Exp;
branches;
next	1.14;

1.14
date	2000.07.07.18.26.43;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.01.23.10.58;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	99.10.27.07.32.55;	author niklas;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	99.06.07.07.17.46;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	99.05.31.17.34.45;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	99.02.10.08.05.08;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.11.13.18.35.23;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.11.13.07.35.38;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	97.11.13.07.27.03;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.11.13.06.53.51;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.08.02.20.29.12;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	95.12.14.04.47.06;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.10.26.01.43.51;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.14;	author deraadt;	state Exp;
branches;
next	;

1.12.2.1
date	2001.05.14.22.04.27;	author niklas;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2001.12.05.00.43.28;	author niklas;	state Exp;
branches;
next	1.12.2.3;

1.12.2.3
date	2002.03.28.11.28.06;	author niklas;	state Exp;
branches;
next	1.12.2.4;

1.12.2.4
date	2003.03.27.23.53.47;	author niklas;	state Exp;
branches;
next	1.12.2.5;

1.12.2.5
date	2003.05.13.19.21.26;	author ho;	state Exp;
branches;
next	1.12.2.6;

1.12.2.6
date	2004.02.19.10.51.28;	author niklas;	state Exp;
branches;
next	1.12.2.7;

1.12.2.7
date	2004.06.05.23.12.34;	author niklas;	state Exp;
branches;
next	;

1.16.2.1
date	2002.06.11.03.28.07;	author art;	state Exp;
branches;
next	1.16.2.2;

1.16.2.2
date	2002.10.29.00.30.51;	author art;	state Exp;
branches;
next	1.16.2.3;

1.16.2.3
date	2003.05.19.21.52.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.35
log
@Push COMPAT_FREEBSD in front of a whale.  Buggy, out of date, no
one has been weeding it, and it makes life harder.

Toasts of Brennivin for its passing from many; diff ok henning@@
@
text
@	$OpenBSD: syscalls.master,v 1.34 2010/05/23 11:35:18 deraadt Exp $
;	$NetBSD: syscalls.master,v 1.3 1995/10/10 18:28:40 mycroft Exp $

;	from: @@(#)syscalls.master	8.2 (Berkeley) 1/13/94

; NetBSD COMPAT_FREEBSD system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall switch definition file only.

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>

#include <compat/freebsd/freebsd_signal.h>
#include <compat/freebsd/freebsd_syscallargs.h>

#include <machine/freebsd_machdep.h>

; Reserved/unimplemented system calls in the range 0-150 inclusive
; are reserved for use in future Berkeley releases.
; Additional system calls implemented in vendor and other
; redistributions should be placed in the reserved range at the end
; of the current calls.

0	NOARGS		{ int sys_nosys(void); } syscall
1	NOARGS		{ int sys_exit(int rval); }
2	NOARGS		{ int sys_fork(void); }
3	NOARGS		{ int sys_read(int fd, char *buf, u_int nbyte); }
4	NOARGS		{ int sys_write(int fd, char *buf, u_int nbyte); }
5	STD		{ int freebsd_sys_open(char *path, int flags, \
			    int mode); }
6	NOARGS		{ int sys_close(int fd); }
7	NOARGS		{ int sys_wait4(int pid, int *status, int options, \
			    struct rusage *rusage); }
8	STD		{ int compat_43_freebsd_sys_creat(char *path, \
			    int mode); } ocreat
9	STD		{ int freebsd_sys_link(char *path, char *link); }
10	STD		{ int freebsd_sys_unlink(char *path); }
11	OBSOL		execv
12	STD		{ int freebsd_sys_chdir(char *path); }
13	NOARGS		{ int sys_fchdir(int fd); }
14	STD		{ int freebsd_sys_mknod(char *path, int mode, \
			    int dev); }
15	STD		{ int freebsd_sys_chmod(char *path, int mode); }
16	STD		{ int freebsd_sys_chown(char *path, int uid, int gid); }
17	NOARGS		{ int sys_obreak(char *nsize); } break
18	STD		{ int freebsd_sys_getfsstat(struct freebsd_statfs *buf,\
			    long bufsize, int flags); }
19	NOARGS		{ long compat_43_sys_lseek(int fd, long offset, \
			    int whence); } olseek
20	NOARGS		{ pid_t sys_getpid(void); }
21	STD		{ int freebsd_sys_mount(int type, char *path, \
			    int flags, caddr_t data); }
22	STD		{ int freebsd_sys_unmount(char *path, int flags); }
23	NOARGS		{ int sys_setuid(uid_t uid); }
24	NOARGS		{ uid_t sys_getuid(void); }
25	NOARGS		{ uid_t sys_geteuid(void); }
#ifdef PTRACE
26	STD		{ int freebsd_sys_ptrace(int req, pid_t pid, \
			    caddr_t addr, int data); }
#else
26	UNIMPL		ptrace
#endif
27	NOARGS		{ int sys_recvmsg(int s, struct msghdr *msg, \
			    int flags); }
28	NOARGS		{ int sys_sendmsg(int s, caddr_t msg, int flags); }
29	NOARGS		{ int sys_recvfrom(int s, caddr_t buf, size_t len, \
			    int flags, caddr_t from, int *fromlenaddr); }
30	NOARGS		{ int sys_accept(int s, caddr_t name, int *anamelen); }
31	NOARGS		{ int sys_getpeername(int fdes, caddr_t asa, \
			    int *alen); }
32	NOARGS		{ int sys_getsockname(int fdes, caddr_t asa, \
			    int *alen); }
33	STD		{ int freebsd_sys_access(char *path, int flags); }
34	STD		{ int freebsd_sys_chflags(char *path, int flags); }
35	NOARGS		{ int sys_fchflags(int fd, int flags); }
36	NOARGS		{ int sys_sync(void); }
37	NOARGS		{ int sys_kill(int pid, int signum); }
38	STD		{ int compat_43_freebsd_sys_stat(char *path, \
			    struct stat43 *ub); } stat43
39	NOARGS		{ pid_t sys_getppid(void); }
40	STD		{ int compat_43_freebsd_sys_lstat(char *path, \
			    struct stat43 *ub); } lstat43
41	NOARGS		{ int sys_dup(u_int fd); }
42	NOARGS		{ int sys_opipe(void); }
43	NOARGS		{ gid_t sys_getegid(void); }
44	NOARGS		{ int sys_profil(caddr_t samples, u_int size, \
			    u_int offset, u_int scale); }
#ifdef KTRACE
45	NOARGS		{ int sys_ktrace(char *fname, int ops, int facs, \
			    int pid); }
#else
45	UNIMPL		ktrace
#endif
46	NOARGS		{ int sys_sigaction(int signum, struct sigaction *nsa, \
			    struct sigaction *osa); }
47	NOARGS		{ gid_t sys_getgid(void); }
48	NOARGS		{ int sys_sigprocmask(int how, sigset_t mask); }
49	NOARGS		{ int sys_getlogin(char *namebuf, u_int namelen); }
50	NOARGS		{ int sys_setlogin(char *namebuf); }
#ifdef ACCOUNTING
51	NOARGS		{ int sys_acct(char *path); }
#else
51	UNIMPL		acct
#endif
52	NOARGS		{ int sys_sigpending(void); }
53	NOARGS		{ int sys_sigaltstack(struct sigaltstack *nss, \
			    struct sigaltstack *oss); }
54	STD		{ int freebsd_sys_ioctl(int fd, u_long com, \
			    caddr_t data); }
55	NOARGS		{ int sys_reboot(int opt); }
56	STD		{ int freebsd_sys_revoke(char *path); }
57	STD		{ int freebsd_sys_symlink(char *path, char *link); }
58	STD		{ int freebsd_sys_readlink(char *path, char *buf, \
			    int count); }
59	STD		{ int freebsd_sys_execve(char *path, char **argp, \
			    char **envp); }
60	NOARGS		{ int sys_umask(int newmask); }
61	STD		{ int freebsd_sys_chroot(char *path); }
62	NOARGS		{ int compat_43_sys_fstat(int fd, struct stat43 *sb); } \
			    fstat43
63	NOARGS		{ int compat_43_sys_getkerninfo(int op, char *where, \
			    int *size, int arg); } ogetkerninfo
64	NOARGS		{ int compat_43_sys_getpagesize(void); } ogetpagesize
65	NOARGS		{ int sys_msync(void *addr, size_t len, \
			    int flags); }
66	NOARGS		{ int sys_vfork(void); }
67	OBSOL		vread
68	OBSOL		vwrite
69	NOARGS		{ int sys_sbrk(int incr); }
70	NOARGS		{ int sys_sstk(int incr); }
71	NOARGS		{ int compat_43_sys_mmap(caddr_t addr, size_t len, \
			    int prot, int flags, int fd, long pos); } ommap
72	OBSOL		vadvise
73	NOARGS		{ int sys_munmap(caddr_t addr, size_t len); }
74	NOARGS		{ int sys_mprotect(caddr_t addr, size_t len, \
			    int prot); }
75	STD		{ int freebsd_sys_madvise(caddr_t addr, size_t len, \
			    int behav); }
76	OBSOL		vhangup
77	OBSOL		vlimit
78	NOARGS		{ int sys_mincore(caddr_t addr, size_t len, char *vec); }
79	NOARGS		{ int sys_getgroups(u_int gidsetsize, gid_t *gidset); }
80	NOARGS		{ int sys_setgroups(u_int gidsetsize, gid_t *gidset); }
81	NOARGS		{ int sys_getpgrp(void); }
82	NOARGS		{ int sys_setpgid(int pid, int pgid); }
83	NOARGS		{ int sys_setitimer(u_int which, \
			    struct itimerval *itv, struct itimerval *oitv); }
84	NOARGS		{ int compat_43_sys_wait(void); } owait
85	NOARGS		{ int compat_25_sys_swapon(char *name); }
86	NOARGS		{ int sys_getitimer(u_int which, \
			    struct itimerval *itv); }
87	NOARGS		{ int compat_43_sys_gethostname(char *hostname, \
			    u_int len); } ogethostname
88	NOARGS		{ int compat_43_sys_sethostname(char *hostname, \
			    u_int len); } osethostname
89	NOARGS		{ int compat_43_sys_getdtablesize(void); } \
			    ogetdtablesize
90	NOARGS		{ int sys_dup2(u_int from, u_int to); }
91	UNIMPL		getdopt
92	STD		{ int freebsd_sys_fcntl(int fd, int cmd, void *arg); }
93	NOARGS		{ int sys_select(u_int nd, fd_set *in, fd_set *ou, \
			    fd_set *ex, struct timeval *tv); }
94	UNIMPL		setdopt
95	NOARGS		{ int sys_fsync(int fd); }
96	NOARGS		{ int sys_setpriority(int which, int who, int prio); }
97	NOARGS		{ int sys_socket(int domain, int type, int protocol); }
98	NOARGS		{ int sys_connect(int s, caddr_t name, int namelen); }
99	NOARGS		{ int compat_43_sys_accept(int s, caddr_t name, \
			    int *anamelen); } oaccept
100	NOARGS		{ int sys_getpriority(int which, int who); }
101	NOARGS		{ int compat_43_sys_send(int s, caddr_t buf, int len, \
			    int flags); } osend
102	NOARGS		{ int compat_43_sys_recv(int s, caddr_t buf, int len, \
			    int flags); } orecv
103	STD		{ int freebsd_sys_sigreturn( \
			    struct freebsd_sigcontext *scp); }
104	NOARGS		{ int sys_bind(int s, caddr_t name, int namelen); }
105	NOARGS		{ int sys_setsockopt(int s, int level, int name, \
			    caddr_t val, int valsize); }
106	NOARGS		{ int sys_listen(int s, int backlog); }
107	OBSOL		vtimes
108	NOARGS		{ int compat_43_sys_sigvec(int signum, \
			    struct sigvec *nsv, struct sigvec *osv); } osigvec
109	NOARGS		{ int compat_43_sys_sigblock(int mask); } osigblock
110	NOARGS		{ int compat_43_sys_sigsetmask(int mask); } osigsetmask
111	NOARGS		{ int sys_sigsuspend(int mask); }
112	NOARGS		{ int compat_43_sys_sigstack(struct sigstack *nss, \
			    struct sigstack *oss); } osigstack
113	NOARGS		{ int compat_43_sys_recvmsg(int s, \
			    struct omsghdr *msg, int flags); } orecvmsg
114	NOARGS		{ int compat_43_sys_sendmsg(int s, caddr_t msg, \
			    int flags); } osendmsg
#ifdef TRACE
115	NOARGS		{ int sys_vtrace(int request, int value); }
#else
115	OBSOL		vtrace
#endif
116	NOARGS		{ int sys_gettimeofday(struct timeval *tp, \
			    struct timezone *tzp); }
117	NOARGS		{ int sys_getrusage(int who, struct rusage *rusage); }
118	NOARGS		{ int sys_getsockopt(int s, int level, int name, \
			    caddr_t val, int *avalsize); }
119	OBSOL		resuba
120	NOARGS		{ int sys_readv(int fd, struct iovec *iovp, \
			    u_int iovcnt); }
121	NOARGS		{ int sys_writev(int fd, struct iovec *iovp, \
			    u_int iovcnt); }
122	NOARGS		{ int sys_settimeofday(struct timeval *tv, \
			    struct timezone *tzp); }
123	NOARGS		{ int sys_fchown(int fd, int uid, int gid); }
124	NOARGS		{ int sys_fchmod(int fd, int mode); }
125	NOARGS		{ int compat_43_sys_recvfrom(int s, caddr_t buf, \
			    size_t len, int flags, caddr_t from, \
			    int *fromlenaddr); } orecvfrom
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
128	STD		{ int freebsd_sys_rename(char *from, char *to); }
129	STD		{ int compat_43_freebsd_sys_truncate(char *path, \
			    long length); } otruncate
130	NOARGS		{ int compat_43_sys_ftruncate(int fd, long length); } \
			    oftruncate
131	NOARGS		{ int sys_flock(int fd, int how); }
132	STD		{ int freebsd_sys_mkfifo(char *path, int mode); }
133	NOARGS		{ int sys_sendto(int s, caddr_t buf, size_t len, \
			    int flags, caddr_t to, int tolen); }
134	NOARGS		{ int sys_shutdown(int s, int how); }
135	NOARGS		{ int sys_socketpair(int domain, int type, \
			    int protocol, int *rsv); }
136	STD		{ int freebsd_sys_mkdir(char *path, int mode); }
137	STD		{ int freebsd_sys_rmdir(char *path); }
138	NOARGS		{ int sys_utimes(char *path, struct timeval *tptr); }
139	OBSOL		4.2 sigreturn
140	NOARGS		{ int sys_adjtime(struct timeval *delta, \
			    struct timeval *olddelta); }
141	NOARGS		{ int compat_43_sys_getpeername(int fdes, caddr_t asa, \
			    int *alen); } ogetpeername
142	NOARGS		{ int32_t compat_43_sys_gethostid(void); } ogethostid
143	NOARGS		{ int compat_43_sys_sethostid(int32_t hostid); } \
			    osethostid
144	NOARGS		{ int compat_43_sys_getrlimit(u_int which, \
			    struct ogetrlimit *rlp); } ogetrlimit
145	NOARGS		{ int compat_43_sys_setrlimit(u_int which, \
			    struct ogetrlimit *rlp); } osetrlimit
146	NOARGS		{ int compat_43_sys_killpg(int pgid, int signum); } \
			    okillpg
147	NOARGS		{ int sys_setsid(void); }
148	NOARGS		{ int sys_quotactl(char *path, int cmd, int uid, \
			    caddr_t arg); }
149	NOARGS		{ int compat_43_sys_quota(void); } oquota
150	NOARGS		{ int compat_43_sys_getsockname(int fdec, caddr_t asa, \
			    int *alen); } ogetsockname

; Syscalls 151-180 inclusive are reserved for vendor-specific
; system calls.  (This includes various calls added for compatibity
; with other Unix variants.)
; Some of these calls are now supported by BSD...
151	UNIMPL		sem_lock
152	UNIMPL		sem_wakeup
153	UNIMPL		asyncdaemon
154	UNIMPL
#if defined(NFSCLIENT) || defined(NFSSERVER)
155	NOARGS		{ int sys_nfssvc(int flag, caddr_t argp); }
#else
155	UNIMPL
#endif
156	NOARGS		{ int compat_43_sys_getdirentries(int fd, char *buf, \
			    u_int count, long *basep); } ogetdirentries
157	STD		{ int freebsd_sys_statfs(char *path, \
			    struct freebsd_statfs *buf); }
158	STD		{ int freebsd_sys_fstatfs(int fd, \
			    struct freebsd_statfs *buf); }
159	UNIMPL
160	UNIMPL
#ifdef NFSCLIENT
161	STD		{ int freebsd_sys_getfh(char *fname, fhandle_t *fhp); }
#else
161	UNIMPL		getfh
#endif
162	NOARGS		{ int compat_09_sys_getdomainname(char *domainname, \
			    int len); }
163	NOARGS		{ int compat_09_sys_setdomainname(char *domainname, \
			    int len); }
164	STD		{ int compat_freebsd_sys_uname(struct outsname *name); }
165	NOARGS		{ int sys_sysarch(int op, char *parms); }
166	STD		{ int freebsd_sys_rtprio(int function, pid_t pid, \
			    struct freebsd_rtprio *rtp); }
167	UNIMPL
168	UNIMPL
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if defined(SYSVSEM) && !defined(__alpha__)
169	NOARGS		{ int compat_10_sys_semsys(int which, int a2, int a3, \
			    int a4, int a5); }
#else
169	UNIMPL		1.0 semsys
#endif
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if defined(SYSVMSG) && !defined(__alpha__)
170	NOARGS		{ int compat_10_sys_msgsys(int which, int a2, int a3, \
			    int a4, int a5, int a6); }
#else
170	UNIMPL		1.0 msgsys
#endif
; XXX more generally, never on machines where sizeof(void *) != sizeof(int)
#if defined(SYSVSHM) && !defined(__alpha__)
171	NOARGS		{ int compat_10_sys_shmsys(int which, int a2, int a3, \
			    int a4); }
#else
171	UNIMPL		1.0 shmsys
#endif
172	UNIMPL
173	NOARGS		{ ssize_t sys_pread(int fd, void *buf, \
		    size_t nbyte, int pad, off_t offset); }
174	NOARGS		{  ssize_t sys_pwrite(int fd, const void *buf, \
		    size_t nbyte, int pad, off_t offset); }
175	UNIMPL
176	UNIMPL		ntp_adjtime
177	UNIMPL		sfork
178	UNIMPL		getdescriptor
179	UNIMPL		setdescriptor
180	UNIMPL

; Syscalls 180-199 are used by/reserved for BSD
181	NOARGS		{ int sys_setgid(gid_t gid); }
182	NOARGS		{ int sys_setegid(gid_t egid); }
183	NOARGS		{ int sys_seteuid(uid_t euid); }
184	UNIMPL
185	UNIMPL
186	UNIMPL
187	UNIMPL
188	STD		{ int freebsd_sys_stat(char *path, struct stat35 *ub); }
189	NOARGS		{ int compat_35_sys_fstat(int fd, \
			    struct stat35 *sb); }
190	STD		{ int freebsd_sys_lstat(char *path, \
			    struct stat35 *ub); }
191	STD		{ int freebsd_sys_pathconf(char *path, int name); }
192	NOARGS		{ int sys_fpathconf(int fd, int name); }
193	UNIMPL
194	NOARGS		{ int sys_getrlimit(u_int which, struct rlimit *rlp); }
195	NOARGS		{ int sys_setrlimit(u_int which, struct rlimit *rlp); }
196	NOARGS		{ int sys_getdirentries(int fd, char *buf, \
			    u_int count, long *basep); }
197	STD		{ caddr_t freebsd_sys_mmap(caddr_t addr, size_t len, \
			    int prot, int flags, int fd, long pad, off_t pos); }
198	NOARGS		{ int sys_nosys(void); } __syscall
199	NOARGS		{ off_t sys_lseek(int fd, int pad, off_t offset, \
			    int whence); }
200	STD		{ int freebsd_sys_truncate(char *path, int pad, \
			    off_t length); }
201	NOARGS		{ int sys_ftruncate(int fd, int pad, off_t length); }
202	NOARGS		{ int sys___sysctl(int *name, u_int namelen, \
			    void *old, size_t *oldlenp, void *new, \
			    size_t newlen); }
203	NOARGS		{ int sys_mlock(caddr_t addr, size_t len); }
204	NOARGS		{ int sys_munlock(caddr_t addr, size_t len); }
205	UNIMPL		sys_undelete
206	UNIMPL		futimes
207	NOARGS		{ int sys_getpgid(pid_t pid); }
208	UNIMPL		reboot
209	NOARGS		{ int sys_poll(struct pollfd *fds, \
			    unsigned long nfds, int timeout); }
;
; Syscalls 210-219 are reserved for dynamically loaded syscalls
;
210	UNIMPL
211	UNIMPL
212	UNIMPL
213	UNIMPL
214	UNIMPL
215	UNIMPL
216	UNIMPL
217	UNIMPL
218	UNIMPL
219	UNIMPL
; Syscalls 220-239 are reserved for syscalls imported from NetBSD
#ifdef SYSVSEM
220	NOARGS		{ int sys___semctl(int semid, int semnum, int cmd, \
			    union semun *arg); }
221	NOARGS		{ int sys_semget(key_t key, int nsems, int semflg); }
222	NOARGS		{ int sys_semop(int semid, struct sembuf *sops, \
			    u_int nsops); }
223	OBSOL		sys_semconfig
#else
220	UNIMPL		sys___semctl
221	UNIMPL		sys_semget
222	UNIMPL		sys_semop
223	UNIMPL		sys_semconfig
#endif
#ifdef SYSVMSG
224	NOARGS		{ int sys_msgctl(int msqid, int cmd, \
			    struct msqid_ds *buf); }
225	NOARGS		{ int sys_msgget(key_t key, int msgflg); }
226	NOARGS		{ int sys_msgsnd(int msqid, void *msgp, size_t msgsz, \
			    int msgflg); }
227	NOARGS		{ int sys_msgrcv(int msqid, void *msgp, size_t msgsz, \
			    long msgtyp, int msgflg); }
#else
224	UNIMPL		sys_msgctl
225	UNIMPL		sys_msgget
226	UNIMPL		sys_msgsnd
227	UNIMPL		sys_msgrcv
#endif
#ifdef SYSVSHM
228	NOARGS		{ int sys_shmat(int shmid, void *shmaddr, int shmflg); }
229	NOARGS		{ int sys_shmctl(int shmid, int cmd, \
			    struct shmid_ds *buf); }
230	NOARGS		{ int sys_shmdt(void *shmaddr); }
231	NOARGS		{ int sys_shmget(key_t key, int size, int shmflg); }
#else
228	UNIMPL		sys_shmat
229	UNIMPL		sys_shmctl
230	UNIMPL		sys_shmdt
231	UNIMPL		sys_shmget
#endif
232	NOARGS		{ int sys_clock_gettime(clockid_t clock_id, \
			    struct timespec *tp); }
233	UNIMPL
234	UNIMPL
235	UNIMPL		timer_create
236	UNIMPL		timer_delete
237	UNIMPL		timer_settime
238	UNIMPL		timer_gettime
239	UNIMPL		timer_getoverrun
240	NOARGS		{ int sys_nanosleep(const struct timespec *rqtp, \
				struct timespec *rmtp); }
241	UNIMPL
242	UNIMPL
243	UNIMPL
244	UNIMPL
245	UNIMPL
246	UNIMPL
247	UNIMPL
248	UNIMPL
249	UNIMPL
; syscall numbers initially used in OpenBSD
250	NOARGS		{ int sys_minherit(caddr_t addr, size_t len, \
			    int inherit); }
251	NOARGS		{ int sys_rfork(int flags); }
252	STD		{ int freebsd_sys_poll2(struct pollfd *fds, \
			    unsigned long nfds, int timeout); }
253	NOARGS		{ int sys_issetugid(void); }
254	NOARGS		{ int sys_lchown(char *path, int uid, int gid); }
255	UNIMPL
256	UNIMPL
257	UNIMPL
258	UNIMPL
259	UNIMPL
260	UNIMPL
261	UNIMPL
262	UNIMPL
263	UNIMPL
264	UNIMPL
265	UNIMPL
266	UNIMPL
267	UNIMPL
268	UNIMPL
269	UNIMPL
270	UNIMPL
271	UNIMPL
272	STD		{ int freebsd_sys_getdents(int fd, void *dirent, \
			    unsigned count); }
273	UNIMPL
274	UNIMPL		lchmod
275	UNIMPL		lchown
276	UNIMPL		lutimes
277	UNIMPL		msync
278	UNIMPL		stat
279	UNIMPL		fstat
280	UNIMPL		lstat
281	UNIMPL
282	UNIMPL
283	UNIMPL
284	UNIMPL
285	UNIMPL
286	UNIMPL
287	UNIMPL
288	UNIMPL
289	UNIMPL
290	UNIMPL
291	UNIMPL
292	UNIMPL
293	UNIMPL
294	UNIMPL
295	UNIMPL
296	UNIMPL
297	UNIMPL		fhstatfs
298	UNIMPL		fhopen
299	UNIMPL		fhstat
; syscall numbers for FreeBSD
300	UNIMPL		modnext
301	UNIMPL		modstat
302	UNIMPL		modfnext
303	UNIMPL		modfind
304	UNIMPL		kldload
305	UNIMPL		kldunload
306	UNIMPL		kldfind
307	UNIMPL		kldnext
308	UNIMPL		kldstat
309	UNIMPL		kldfirstmod
310	UNIMPL		getsid
311	NOARGS		{ int sys_setresuid(uid_t ruid, uid_t euid, \
			    uid_t suid); }
312	NOARGS		{ int sys_setresgid(gid_t rgid, gid_t egid, \
			    gid_t sgid); }
313	UNIMPL		signanosleep
314	UNIMPL		aio_return
315	UNIMPL		aio_suspend
316	UNIMPL		aio_cancel
317	UNIMPL		aio_error
318	UNIMPL		aio_read
319	UNIMPL		aio_write
320	UNIMPL		lio_listio
321	UNIMPL		yield
322	UNIMPL		thr_sleep
323	UNIMPL		thr_wakeup
324	UNIMPL		mlockall
325	UNIMPL		munlockall
326	UNIMPL		__getcwd
327	UNIMPL		sched_setparam
328	UNIMPL		sched_getparam
329	UNIMPL		sched_setscheduler
330	UNIMPL		sched_getscheduler
331	UNIMPL		sched_yield
332	UNIMPL		sched_get_priority_max
333	UNIMPL		sched_get_priority_min
334	UNIMPL		sched_rr_get_interval
335	UNIMPL		utrace
336	UNIMPL		sendfile
337	UNIMPL		kldsym
338	UNIMPL		jail
339	UNIMPL		pioctl
340	STD		{ int freebsd_sys_sigprocmask40(int how, const freebsd_sigset_t \
			   *set, freebsd_sigset_t *oset); }
341	STD		{ int freebsd_sys_sigsuspend40(const freebsd_sigset_t *sigmask); }
342	STD		{ int freebsd_sys_sigaction40(int sig, const struct freebsd_sigaction \
			    *act, struct freebsd_sigaction *oact); }
343	STD		{ int freebsd_sys_sigpending40(freebsd_sigset_t *set); }
344	UNIMPL		4.0 sigreturn
345	UNIMPL		sigtimedwait
346	UNIMPL		sigwaitinfo
347	UNIMPL		__acl_get_file
348	UNIMPL		__acl_set_file
349	UNIMPL		__acl_get_fd
350	UNIMPL		__acl_set_fd
351	UNIMPL		__acl_delete_file
352	UNIMPL		__acl_delete_fd
353	UNIMPL		__acl_aclcheck_file
354	UNIMPL		__acl_aclcheck_fd
355	UNIMPL		extattrctl
356	UNIMPL		extattr_set_file
357	UNIMPL		extattr_get_file
358	UNIMPL		extattr_delete_file
359	UNIMPL		aio_waitcomplete
360	UNIMPL		getresuid
361	UNIMPL		getresgid
362	NOARGS		{ int sys_kqueue(void); }
363	NOARGS		{ int sys_kevent(int kq, const struct kevent *changelist, \
			    int nchanges, struct kevent *eventlist, int nevents, \
			    const struct timespec *timeout); }
364	UNIMPL		__cap_get_proc
365	UNIMPL		__cap_set_proc
366	UNIMPL		__cap_get_fd
367	UNIMPL		__cap_get_file
368	UNIMPL		__cap_set_fd
369	UNIMPL		__cap_set_file
370	UNIMPL		lkmressym
371	UNIMPL		extattr_set_fd
372	UNIMPL		extattr_get_fd
373	UNIMPL		extattr_delete_fd
374	UNIMPL		__setugid
375	UNIMPL		nfsclnt
376	UNIMPL		eaccess
377	UNIMPL		afs_syscall
378	UNIMPL		nmount
379	UNIMPL		kse_exit
380	UNIMPL		kse_wakeup
381	UNIMPL		kse_create
382	UNIMPL		kse_thr_interrupt
383	UNIMPL		kse_release
384	UNIMPL		__mac_get_proc
385	UNIMPL		__mac_set_proc
386	UNIMPL		__mac_get_fd
387	UNIMPL		__mac_get_file
388	UNIMPL		__mac_set_fd
389	UNIMPL		__mac_set_file
390	UNIMPL		kenv
391	UNIMPL		lchflags
392	UNIMPL		uuidgen
393	UNIMPL		sendfile
394	UNIMPL		mac_syscall
395	UNIMPL		getfsstat
396	UNIMPL		statfs
397	UNIMPL		fsstatfs
398	UNIMPL		fhstatfs
399	UNIMPL		nosys
400	UNIMPL		ksem_close
401	UNIMPL		ksem_post
402	UNIMPL		ksem_wait
403	UNIMPL		ksem_trywait
404	UNIMPL		ksem_init
405	UNIMPL		ksem_open
406	UNIMPL		ksem_unlink
407	UNIMPL		ksem_getvalue
408	UNIMPL		ksem_destroy
409	UNIMPL		__mac_get_pid
410	UNIMPL		__mac_get_link
411	UNIMPL		__mac_set_link
412	UNIMPL		extattr_set_link
413	UNIMPL		extattr_get_link
414	UNIMPL		extattr_delete_link
415	UNIMPL		__mac_execve
416	UNIMPL		sigaction
417	UNIMPL		sigreturn
418	UNIMPL		__xstat
419	UNIMPL		__xfstat
420	UNIMPL		__xlstat
421	UNIMPL		getcontext
422	UNIMPL		setcontext
423	UNIMPL		swapcontext
424	UNIMPL		swapoff
425	UNIMPL		__acl_get_link
426	UNIMPL		__acl_set_link
427	UNIMPL		__acl_delete_link
428	UNIMPL		__acl_aclcheck_link
429	UNIMPL		sigwait
430	UNIMPL		thr_create
431	UNIMPL		thr_exit
432	UNIMPL		thr_self
433	UNIMPL		thr_kill
434	UNIMPL		_umtx_lock
435	UNIMPL		_umtx_unlock
436	UNIMPL		jail_attach
437	UNIMPL		extattr_list_fd
438	UNIMPL		extattr_list_file
439	UNIMPL		extattr_list_link
@


1.34
log
@use __alpha__ not alpha for the ifdef
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.33 2008/01/05 00:36:13 miod Exp $
@


1.33
log
@Mark vadvise(2) as obsolete and remove its implementation, so instead of
returning EINVAL, you'll get ENOSYS. No serious code has used this system
call in at least fifteen years.

The libc stub will be removed at the next major crank time.

ok henning@@ deraadt@@ krw@@ toby@@
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.32 2007/11/28 13:47:02 deraadt Exp $
d318 1
a318 1
#if defined(SYSVSEM) && !defined(alpha)
d325 1
a325 1
#if defined(SYSVMSG) && !defined(alpha)
d332 1
a332 1
#if defined(SYSVSHM) && !defined(alpha)
@


1.32
log
@COMPAT_09 uname is only used by freebsd compat, so move it to the right place
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.31 2007/04/05 15:33:42 tedu Exp $
d161 1
a161 1
72	NOARGS		{ int sys_ovadvise(int anom); } vadvise
@


1.31
log
@freebsd added some MAP_NOCORE flag.  we don't like it, so mask it out.
started by claudio. ok deraadt millert
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.30 2006/09/22 15:29:57 pedro Exp $
d311 1
a311 1
164	NOARGS		{ int compat_09_sys_uname(struct outsname *name); }
@


1.30
log
@Remove LFS system calls from here too
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.29 2006/02/07 01:34:21 brad Exp $
d370 2
a371 2
197	NOARGS		{ caddr_t sys_mmap(caddr_t addr, size_t len, int prot, \
			    int flags, int fd, long pad, off_t pos); }
@


1.29
log
@add the new syscalls to the list

From jdolecek NetBSD
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.28 2005/06/17 20:39:14 millert Exp $
a353 8
#ifdef LFS
184	NOARGS		{ int lfs_bmapv(fsid_t *fsidp, \
			    struct block_info *blkiov, int blkcnt); }
185	NOARGS		{ int lfs_markv(fsid_t *fsidp, \
			    struct block_info *blkiov, int blkcnt); }
186	NOARGS		{ int lfs_segclean(fsid_t *fsidp, u_long segment); }
187	NOARGS		{ int lfs_segwait(fsid_t *fsidp, struct timeval *tv); }
#else
a357 1
#endif
@


1.28
log
@remove undelete syscall
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.27 2005/02/19 21:19:28 matthieu Exp $
d596 76
@


1.27
log
@Add getdents() emulation. Makes Veritas NetBackup client for FreeBSD work.
ok deraadt@@, tedu@@.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.26 2004/07/13 21:04:29 millert Exp $
d392 1
a392 5
#ifdef FREEBSD_BASED_ON_44LITE_R2
205	STD		{ int freebsd_sys_undelete(char *path); }
#else
205	UNIMPL		undelete
#endif
@


1.26
log
@Change mode_t and nlink_t from 16bit to 32bit.  This allows us to
use mode_t in syscalls.master and to use mode_t in more places in
the kernel.  It also makes lint much more useful on kernel code.

I've also added a placeholder for st_birthtime to make a UFS2 import
easier at some future date.

Requested by and OK deraadt@@
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.25 2004/07/09 23:52:02 millert Exp $
d500 2
a501 1
272	UNIMPL		getdents
@


1.25
log
@Rename ostat -> stat43 to disambiguate from upcoming struct stat changes.
Idea from NetBSD, OK deraadt@@
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.24 2004/05/28 18:28:14 tedu Exp $
d367 5
a371 3
188	STD		{ int freebsd_sys_stat(char *path, struct stat *ub); }
189	NOARGS		{ int sys_fstat(int fd, struct stat *sb); }
190	STD		{ int freebsd_sys_lstat(char *path, struct stat *ub); }
@


1.24
log
@ACCOUNTING is optional.  found by mpech. ok deraadt
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.23 2004/02/17 20:08:43 tedu Exp $
d107 1
a107 1
			    struct ostat *ub); } ostat
d110 1
a110 1
			    struct ostat *ub); } olstat
d147 2
a148 2
62	NOARGS		{ int compat_43_sys_fstat(int fd, struct ostat *sb); } \
			    ofstat
@


1.23
log
@kqueue works using native calls
once from art@@ a while back, again from Jason Ackley <jason@@ackley.net>
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.22 2003/08/24 00:02:42 tedu Exp $
d128 1
d130 3
@


1.22
log
@freebsd pread and pwrite are the same as ours.  jason + ackley.net says this
lets him run perforce.  ok deraadt@@
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.21 2003/05/10 17:53:57 miod Exp $
d589 4
a592 2
362	UNIMPL		kqueue
363	UNIMPL		kevent
@


1.21
log
@Deprecate the swapon system call and move it to COMPAT_25 land, since swapctl
has been introduced for this release.

ok deraadt@@ weingart@@
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.20 2003/01/30 03:29:49 millert Exp $
d335 4
a338 2
173	UNIMPL		pread
174	UNIMPL		pwrite
@


1.20
log
@Bring back setreuid(2) and setregid(2) as first class syscalls
(but still implemented via setres[ug]id(2)).  Basically this just
moves them from COMPAT_43 into kern_prot.c.  Also fixes a typo in my
old implementation.  The userland portion will follow in a few days.
deraadt@@ OK
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.19 2002/10/30 20:10:48 millert Exp $
d173 1
a173 1
85	NOARGS		{ int sys_swapon(char *name); }
@


1.19
log
@Now that we have [gs]etres[ug]id() as a native system call, use it
for HP-UX, FreeBSD, and Linux emulations.  Note that Linux has two
versions of these system calls.  One for 16bit uids and another for
32bit uids.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.18 2002/07/06 19:14:20 nordin Exp $
d239 2
a240 4
126	NOARGS		{ int compat_43_sys_setreuid(int ruid, int euid); } \
			    osetreuid
127	NOARGS		{ int compat_43_sys_setregid(int rgid, int egid); } \
			    osetregid
@


1.18
log
@Remove kernel support for NTP. ok deraadt@@ and tholo@@
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.17 2002/03/14 00:42:25 miod Exp $
d534 4
a537 2
311	UNIMPL		setresuid
312	UNIMPL		setresgid
@


1.17
log
@Turn the ptrace(2) syscall into a kernel compile option, option PTRACE in
your kernel configuration file.
By default, GENERIC will enable this.

When PTRACE is not enabled, several ptrace-like features of the procfs
filesystem will be disabled as well (namely, the ability to read and write
any process' registers, as well as attching, single stepping and detaching
to/from processes).

This should help paranoid people build better sandboxens, and us to build
smaller ramdisks.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.16 2001/11/27 19:34:20 maja Exp $
d340 1
a340 1
176	STD		{ int freebsd_ntp_adjtime(struct freebsd_timex *tp); }
@


1.16
log
@Add clock_gettime. -moj ok art@@
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.15 2001/02/02 19:45:09 tholo Exp $
d85 1
d88 3
@


1.16.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.16 2001/11/27 19:34:20 maja Exp $
a84 1
#ifdef PTRACE
a86 3
#else
26	UNIMPL		ptrace
#endif
@


1.16.2.2
log
@sync to -current
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.16.2.1 2002/06/11 03:28:07 art Exp $
d340 1
a340 1
176	UNIMPL		ntp_adjtime
@


1.16.2.3
log
@sync
@
text
@d1 1
a1 1
	$OpenBSD$
d173 1
a173 1
85	NOARGS		{ int compat_25_sys_swapon(char *name); }
d239 4
a242 2
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
d534 2
a535 4
311	NOARGS		{ int sys_setresuid(uid_t ruid, uid_t euid, \
			    uid_t suid); }
312	NOARGS		{ int sys_setresgid(gid_t rgid, gid_t egid, \
			    gid_t sgid); }
@


1.15
log
@Emulate some 4.x signal-related syscalls
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.14 2000/07/07 18:26:43 brad Exp $
d445 2
a446 1
232	UNIMPL
@


1.14
log
@add a lot more unimplemented syscall name placeholders, from NetBSD.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.13 2000/05/01 23:10:58 deraadt Exp $
d41 1
d558 6
a563 4
340	UNIMPL		4.0 sigprocmask
341	UNIMPL		4.0 sigsuspend
342	UNIMPL		4.0 sigaction
343	UNIMPL		4.0 sigpending
@


1.13
log
@sys_semconfig goes away
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.12 1999/10/27 07:32:55 niklas Exp $
d278 3
a280 3
151	UNIMPL
152	UNIMPL
153	UNIMPL
d332 2
a333 2
173	UNIMPL
174	UNIMPL
d336 3
a338 3
177	UNIMPL
178	UNIMPL
179	UNIMPL
d384 1
a384 1
205	UNIMPL
d386 1
a386 1
206	UNIMPL
d388 1
a388 1
208	UNIMPL
d404 1
a404 1
; Now, what else did they add recently...
d447 5
a451 5
235	UNIMPL
236	UNIMPL
237	UNIMPL
238	UNIMPL
239	UNIMPL
d463 1
d471 110
@


1.12
log
@Provide FreeBSD fcntl emulation that handles F[GS]ETOWN on pipes.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.11 1999/06/07 07:17:46 deraadt Exp $
d411 1
a411 1
223	NOARGS		{ int sys_semconfig(int flag); }
@


1.12.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.15 2001/02/02 19:45:09 tholo Exp $
a40 1
#include <compat/freebsd/freebsd_signal.h>
d278 3
a280 3
151	UNIMPL		sem_lock
152	UNIMPL		sem_wakeup
153	UNIMPL		asyncdaemon
d332 2
a333 2
173	UNIMPL		pread
174	UNIMPL		pwrite
d336 3
a338 3
177	UNIMPL		sfork
178	UNIMPL		getdescriptor
179	UNIMPL		setdescriptor
d384 1
a384 1
205	UNIMPL		undelete
d386 1
a386 1
206	UNIMPL		futimes
d388 1
a388 1
208	UNIMPL		reboot
d404 1
a404 1
; Syscalls 220-239 are reserved for syscalls imported from NetBSD
d411 1
a411 1
223	OBSOL		sys_semconfig
d447 5
a451 5
235	UNIMPL		timer_create
236	UNIMPL		timer_delete
237	UNIMPL		timer_settime
238	UNIMPL		timer_gettime
239	UNIMPL		timer_getoverrun
a462 1
; syscall numbers initially used in OpenBSD
a469 112
255	UNIMPL
256	UNIMPL
257	UNIMPL
258	UNIMPL
259	UNIMPL
260	UNIMPL
261	UNIMPL
262	UNIMPL
263	UNIMPL
264	UNIMPL
265	UNIMPL
266	UNIMPL
267	UNIMPL
268	UNIMPL
269	UNIMPL
270	UNIMPL
271	UNIMPL
272	UNIMPL		getdents
273	UNIMPL
274	UNIMPL		lchmod
275	UNIMPL		lchown
276	UNIMPL		lutimes
277	UNIMPL		msync
278	UNIMPL		stat
279	UNIMPL		fstat
280	UNIMPL		lstat
281	UNIMPL
282	UNIMPL
283	UNIMPL
284	UNIMPL
285	UNIMPL
286	UNIMPL
287	UNIMPL
288	UNIMPL
289	UNIMPL
290	UNIMPL
291	UNIMPL
292	UNIMPL
293	UNIMPL
294	UNIMPL
295	UNIMPL
296	UNIMPL
297	UNIMPL		fhstatfs
298	UNIMPL		fhopen
299	UNIMPL		fhstat
; syscall numbers for FreeBSD
300	UNIMPL		modnext
301	UNIMPL		modstat
302	UNIMPL		modfnext
303	UNIMPL		modfind
304	UNIMPL		kldload
305	UNIMPL		kldunload
306	UNIMPL		kldfind
307	UNIMPL		kldnext
308	UNIMPL		kldstat
309	UNIMPL		kldfirstmod
310	UNIMPL		getsid
311	UNIMPL		setresuid
312	UNIMPL		setresgid
313	UNIMPL		signanosleep
314	UNIMPL		aio_return
315	UNIMPL		aio_suspend
316	UNIMPL		aio_cancel
317	UNIMPL		aio_error
318	UNIMPL		aio_read
319	UNIMPL		aio_write
320	UNIMPL		lio_listio
321	UNIMPL		yield
322	UNIMPL		thr_sleep
323	UNIMPL		thr_wakeup
324	UNIMPL		mlockall
325	UNIMPL		munlockall
326	UNIMPL		__getcwd
327	UNIMPL		sched_setparam
328	UNIMPL		sched_getparam
329	UNIMPL		sched_setscheduler
330	UNIMPL		sched_getscheduler
331	UNIMPL		sched_yield
332	UNIMPL		sched_get_priority_max
333	UNIMPL		sched_get_priority_min
334	UNIMPL		sched_rr_get_interval
335	UNIMPL		utrace
336	UNIMPL		sendfile
337	UNIMPL		kldsym
338	UNIMPL		jail
339	UNIMPL		pioctl
340	STD		{ int freebsd_sys_sigprocmask40(int how, const freebsd_sigset_t \
			   *set, freebsd_sigset_t *oset); }
341	STD		{ int freebsd_sys_sigsuspend40(const freebsd_sigset_t *sigmask); }
342	STD		{ int freebsd_sys_sigaction40(int sig, const struct freebsd_sigaction \
			    *act, struct freebsd_sigaction *oact); }
343	STD		{ int freebsd_sys_sigpending40(freebsd_sigset_t *set); }
344	UNIMPL		4.0 sigreturn
345	UNIMPL		sigtimedwait
346	UNIMPL		sigwaitinfo
347	UNIMPL		__acl_get_file
348	UNIMPL		__acl_set_file
349	UNIMPL		__acl_get_fd
350	UNIMPL		__acl_set_fd
351	UNIMPL		__acl_delete_file
352	UNIMPL		__acl_delete_fd
353	UNIMPL		__acl_aclcheck_file
354	UNIMPL		__acl_aclcheck_fd
355	UNIMPL		extattrctl
356	UNIMPL		extattr_set_file
357	UNIMPL		extattr_get_file
358	UNIMPL		extattr_delete_file
359	UNIMPL		aio_waitcomplete
360	UNIMPL		getresuid
361	UNIMPL		getresgid
362	UNIMPL		kqueue
363	UNIMPL		kevent
@


1.12.2.2
log
@Merge in -current
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.12.2.1 2001/05/14 22:04:27 niklas Exp $
d445 1
a445 2
232	NOARGS		{ int sys_clock_gettime(clockid_t clock_id, \
			    struct timespec *tp); }
@


1.12.2.3
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
	$OpenBSD$
a84 1
#ifdef PTRACE
a86 3
#else
26	UNIMPL		ptrace
#endif
@


1.12.2.4
log
@Sync the SMP branch with 3.3
@
text
@d239 4
a242 2
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
d340 1
a340 1
176	UNIMPL		ntp_adjtime
d534 2
a535 4
311	NOARGS		{ int sys_setresuid(uid_t ruid, uid_t euid, \
			    uid_t suid); }
312	NOARGS		{ int sys_setresgid(gid_t rgid, gid_t egid, \
			    gid_t sgid); }
@


1.12.2.5
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.12.2.4 2003/03/27 23:53:47 niklas Exp $
d173 1
a173 1
85	NOARGS		{ int compat_25_sys_swapon(char *name); }
@


1.12.2.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
	$OpenBSD$
d335 2
a336 4
173	NOARGS		{ ssize_t sys_pread(int fd, void *buf, \
		    size_t nbyte, int pad, off_t offset); }
174	NOARGS		{  ssize_t sys_pwrite(int fd, const void *buf, \
		    size_t nbyte, int pad, off_t offset); }
@


1.12.2.7
log
@Merge with the trunk
@
text
@a127 1
#ifdef ACCOUNTING
a128 3
#else
51	UNIMPL		acct
#endif
d589 2
a590 4
362	NOARGS		{ int sys_kqueue(void); }
363	NOARGS		{ int sys_kevent(int kq, const struct kevent *changelist, \
			    int nchanges, struct kevent *eventlist, int nevents, \
			    const struct timespec *timeout); }
@


1.11
log
@replacement pipe() system call; copies data into place inside kernel, so
that EFAULT return value is possible
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.10 1999/05/31 17:34:45 millert Exp $
d179 1
a179 1
92	NOARGS		{ int sys_fcntl(int fd, int cmd, void *arg); }
@


1.10
log
@New struct statfs with mount options.  NOTE: this replaces statfs(2),
fstatfs(2), and getfsstat(2) so you will need to build a new kernel
before doing a "make build" or you will get "unimplemented syscall" errors.

The new struct statfs has the following featuires:
o Has a u_int32_t flags field--now softdep can have a real flag.

o Uses u_int32_t instead of longs (nicer on the alpha).  Note: the man
page used to lie about setting invalid/unused fields to -1.  SunOS does
that but our code never has.

o Gets rid of f_type completely.  It hasn't been used since NetBSD 0.9
and having it there but always 0 is confusing.  It is conceivable
that this may cause some old code to not compile but that is better
than silently breaking.

o Adds a mount_info union that contains the FSTYPE_args struct.  This
means that "mount" can now tell you all the options a filesystem was
mounted with.  This is especially nice for NFS.

Other changes:
o The linux statfs emulation didn't convert between BSD fs names
  and linux f_type numbers.  Now it does, since the BSD f_type
  number is useless to linux apps (and has been removed anyway)

o FreeBSD's struct statfs is different from our (both old and new)
and thus needs conversion.  Previously, the OpenBSD syscalls
were used without any real translation.

o mount(8) will now show extra info when invoked with no arguments.
However, to see *everything* you need to use the -v (verbose) flag.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.9 1999/02/10 08:05:08 deraadt Exp $
d107 1
a107 1
42	NOARGS		{ int sys_pipe(void); }
@


1.9
log
@freebsd madvise() clone, always returns 0 for now
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.8 1997/11/13 18:35:23 deraadt Exp $
d73 2
a74 2
18	NOARGS		{ int sys_getfsstat(struct statfs *buf, long bufsize, \
			    int flags); }
d290 3
a292 2
			    struct statfs *buf); }
158	NOARGS		{ int sys_fstatfs(int fd, struct statfs *buf); }
@


1.8
log
@make msync() have 3 args
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.7 1997/11/13 07:35:38 deraadt Exp $
d156 1
a156 1
75	NOARGS		{ int sys_madvise(caddr_t addr, size_t len, \
@


1.7
log
@two poll() calls, argh
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.6 1997/11/13 07:27:03 deraadt Exp $
d143 1
a143 1
65	STD		{ int freebsd_sys_msync(caddr_t addr, size_t len, \
@


1.6
log
@conditionalize SYSV thingies
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.5 1997/11/13 06:53:51 deraadt Exp $
d465 2
a466 2
252	NOARGS		{ int sys_poll(struct pollfd *fds, usigned long nfds, \
			    int timeout); }
@


1.5
log
@update to recent freebsd status
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.4 1996/08/02 20:29:12 niklas Exp $
d404 1
d411 7
d425 7
d437 6
@


1.4
log
@Add $OpenBSD$
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.3 1995/10/10 18:28:40 mycroft Exp $
d386 1
a386 1
207	UNIMPL
d388 2
a389 1
209	UNIMPL
d403 45
@


1.3
log
@update from netbsd
@
text
@d1 2
a2 1
	$NetBSD: syscalls.master,v 1.3 1995/10/10 18:28:40 mycroft Exp $
@


1.2
log
@update from netbsd
@
text
@d1 1
a1 1
	$NetBSD: syscalls.master,v 1.2.2.1 1995/10/20 16:07:40 pk Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
	$NetBSD: syscalls.master,v 1.2 1995/10/10 01:34:37 mycroft Exp $
d102 1
a102 1
39	NOARGS		{ pid_t getppid(void); }
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
