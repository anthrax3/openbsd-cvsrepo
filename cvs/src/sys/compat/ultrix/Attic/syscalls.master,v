head	1.13;
access;
symbols
	OPENBSD_4_7:1.12.0.8
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.10
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.6
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.4
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.11.0.14
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.12
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.10
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.8
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.6
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.18
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.16
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.7.0.14
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.12
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.10
	OPENBSD_2_8:1.7.0.8
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.6
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.4
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.13
date	2010.06.29.18.47.47;	author tedu;	state dead;
branches;
next	1.12;

1.12
date	2008.01.05.00.36.13;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.09.23.52.02;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2004.05.28.18.28.14;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.11.19.45.18;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.30.03.29.49;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.06.07.07.17.48;	author deraadt;	state Exp;
branches
	1.7.4.1
	1.7.14.1;
next	1.6;

1.6
date	97.01.26.23.52.04;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	96.08.25.12.20.00;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.08.02.20.29.13;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.01.08.19.30.22;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.26.20.23.36;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.26;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.26;	author deraadt;	state Exp;
branches;
next	;

1.7.4.1
date	2003.03.27.23.53.48;	author niklas;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2003.05.13.19.21.27;	author ho;	state Exp;
branches;
next	1.7.4.3;

1.7.4.3
date	2004.06.05.23.12.35;	author niklas;	state Exp;
branches;
next	;

1.7.14.1
date	2003.05.19.21.52.10;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.13
log
@and the ultrix files go into the attic.  ok deraadt miod
@
text
@	$OpenBSD: syscalls.master,v 1.12 2008/01/05 00:36:13 miod Exp $
;	$NetBSD: syscalls.master,v 1.15 1996/01/07 13:38:57 jonathan Exp $

;	@@(#)syscalls.master	8.1 (Berkeley) 7/19/93

; OpenBSD COMPAT_ULTRIX system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall switch definition file only.

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/syscallargs.h>
#include <compat/ultrix/ultrix_syscallargs.h>

0	NOARGS		{ int sys_nosys(void); } syscall
1	NOARGS		{ int sys_exit(int rval); }
2	NOARGS		{ int sys_fork(void); }
3	NOARGS		{ int sys_read(int fd, char *buf, u_int nbyte); }
4	NOARGS		{ int sys_write(int fd, char *buf, u_int nbyte); }
5	STD		{ int ultrix_sys_open(char *path, int flags, \
			    int mode); }
6	NOARGS		{ int sys_close(int fd); }
7	NOARGS		{ int compat_43_sys_wait(void); } owait
8	STD		{ int ultrix_sys_creat(char *path, int mode); }
9	NOARGS		{ int sys_link(char *path, char *link); }
10	NOARGS		{ int sys_unlink(char *path); }
11	STD		{ int ultrix_sys_execv(char *path, char **argp); }
12	NOARGS		{ int sys_chdir(char *path); }
13	OBSOL		time
14	STD		{ int ultrix_sys_mknod(char *path, int mode, int dev); }
15	NOARGS		{ int sys_chmod(char *path, int mode); }
16	NOARGS		{ int sys_lchown(char *path, int uid, int gid); }
17	NOARGS		{ int sys_obreak(char *nsize); } break
18	OBSOL		stat
19	NOARGS		{ long compat_43_sys_lseek(int fd, long offset, \
			    int whence); }
20	NOARGS		{ pid_t sys_getpid(void); }
21	STD		{ int ultrix_sys_mount(char *special, char *dir, \
			     int rdonly, int type, caddr_t data); }
22	OBSOL		sysV_unmount
23	NOARGS		{ int sys_setuid(uid_t uid); }
24	NOARGS		{ uid_t sys_getuid(void); }
25	OBSOL		v7 stime
26	OBSOL		v7 ptrace
27	OBSOL		v7 alarm
28	OBSOL		v7 fstat
29	OBSOL		v7 pause
30	OBSOL		v7 utime
31	OBSOL		v7 stty
32	OBSOL		v7 gtty
33	STD		{ int ultrix_sys_access(char *path, int flags); }
34	OBSOL		v7 nice
35	OBSOL		v7 ftime
36	NOARGS		{ int sys_sync(void); }
37	NOARGS		{ int sys_kill(int pid, int signum); }
38	STD		{ int ultrix_sys_stat(char *path, \
			    struct stat43 *ub); } stat43
39	OBSOL		v7 setpgrp
40	STD		{ int ultrix_sys_lstat(char *path, \
			    struct stat43 *ub); } olstat
41	NOARGS		{ int sys_dup(u_int fd); }
42	NOARGS		{ int sys_opipe(void); }
43	OBSOL		v7 times
44	NOARGS		{ int sys_profil(caddr_t samples, u_int size, \
			    u_int offset, u_int scale); }
45	UNIMPL
46	OBSOL		v7 setgid
47	NOARGS		{ gid_t sys_getgid(void); }
48	UNIMPL		ssig
49	UNIMPL		reserved for USG
50	UNIMPL		reserved for USG
#ifdef ACCOUNTING
51	NOARGS		{ int sys_acct(char *path); }
#else
51	UNIMPL		acct
#endif
52	UNIMPL
53	UNIMPL		syslock
54	STD		{ int ultrix_sys_ioctl(int fd, u_long com, caddr_t data); }
55	NOARGS		{ int sys_reboot(int opt); }
56	UNIMPL		v7 mpxchan
57	NOARGS		{ int sys_symlink(char *path, char *link); }
58	NOARGS		{ int sys_readlink(char *path, char *buf, int count); }
59	STD		{ int ultrix_sys_execve(char *path, char **argp, \
			    char **envp); }
60	NOARGS		{ int sys_umask(int newmask); }
61	NOARGS		{ int sys_chroot(char *path); }
62	NOARGS		{ int compat_43_sys_fstat(int fd, struct stat43 *sb); }
63	UNIMPL
64	NOARGS		{ int compat_43_sys_getpagesize(void); }
65	UNIMPL		mremap
66	NOARGS		{ int sys_vfork(void); }
67	OBSOL		vread
68	OBSOL		vwrite
69	NOARGS		{ int sys_sbrk(int incr); }
70	NOARGS		{ int sys_sstk(int incr); }
71	STD		{ int ultrix_sys_mmap(caddr_t addr, size_t len, \
			    int prot, u_int flags, int fd, long pos); }
72	OBSOL		vadvise
73	NOARGS		{ int sys_munmap(caddr_t addr, size_t len); }
74	NOARGS		{ int sys_mprotect(caddr_t addr, size_t len, \
			    int prot); }
75	NOARGS		{ int sys_madvise(caddr_t addr, size_t len, \
			    int behav); }
76	STD		{ int ultrix_sys_vhangup(void); }
77	UNIMPL		old vlimit
78	NOARGS		{ int sys_mincore(caddr_t addr, int len, char *vec); }
79	NOARGS		{ int sys_getgroups(u_int gidsetsize, gid_t *gidset); }
80	NOARGS		{ int sys_setgroups(u_int gidsetsize, gid_t *gidset); }
81	NOARGS		{ int sys_getpgrp(void); }
82	STD		{ int ultrix_sys_setpgrp(int pid, int pgid); }
83	NOARGS		{ int sys_setitimer(u_int which, \
			    struct itimerval *itv, struct itimerval *oitv); }
84	STD		{ int ultrix_sys_wait3(int *status, int options, \
			    struct rusage *rusage);}
85	NOARGS		{ int compat_25_sys_swapon(char *name); }
86	NOARGS		{ int sys_getitimer(u_int which, \
			    struct itimerval *itv); }
87	NOARGS		{ int compat_43_sys_gethostname(char *hostname, \
			    u_int len); }
88	NOARGS		{ int compat_43_sys_sethostname(char *hostname, \
			    u_int len); }
89	NOARGS		{ int compat_43_sys_getdtablesize(void); }
90	NOARGS		{ int sys_dup2(u_int from, u_int to); }
91	UNIMPL		getdopt
92	NOARGS		{ int sys_fcntl(int fd, int cmd, void *arg); }
93	STD		{ int ultrix_sys_select(u_int nd, fd_set *in, fd_set *ou, \
			    fd_set *ex, struct timeval *tv); }
94	UNIMPL		setdopt
95	NOARGS		{ int sys_fsync(int fd); }
96	NOARGS		{ int sys_setpriority(int which, int who, int prio); }
97	NOARGS		{ int sys_socket(int domain, int type, int protocol); }
98	NOARGS		{ int sys_connect(int s, caddr_t name, int namelen); }
99	NOARGS		{ int compat_43_sys_accept(int s, caddr_t name, \
			    int *anamelen); }
100	NOARGS		{ int sys_getpriority(int which, int who); }
101	NOARGS		{ int compat_43_sys_send(int s, caddr_t buf, int len, \
			    int flags); }
102	NOARGS		{ int compat_43_sys_recv(int s, caddr_t buf, int len, \
			    int flags); }
103	NOARGS		{ int sys_sigreturn(struct sigcontext *sigcntxp); }
104	NOARGS		{ int sys_bind(int s, caddr_t name, int namelen); }
105	STD		{ int ultrix_sys_setsockopt(int s, int level, \
			    int name, caddr_t val, int valsize); }
106	NOARGS		{ int sys_listen(int s, int backlog); }
107	UNIMPL		vtimes
108	NOARGS		{ int compat_43_sys_sigvec(int signum, \
			    struct sigvec *nsv, struct sigvec *osv); }
109	NOARGS		{ int compat_43_sys_sigblock(int mask); }
110	NOARGS		{ int compat_43_sys_sigsetmask(int mask); }
111	NOARGS		{ int sys_sigsuspend(int mask); }
112	NOARGS		{ int compat_43_sys_sigstack(struct sigstack *nss, \
			    struct sigstack *oss); }
113	NOARGS		{ int compat_43_sys_recvmsg(int s, \
			    struct omsghdr *msg, int flags); }
114	NOARGS		{ int compat_43_sys_sendmsg(int s, caddr_t msg, \
			    int flags); }
115	OBSOL		vtrace
116	NOARGS		{ int sys_gettimeofday(struct timeval *tp, \
			    struct timezone *tzp); }
117	NOARGS		{ int sys_getrusage(int who, struct rusage *rusage); }
118	NOARGS		{ int sys_getsockopt(int s, int level, int name, \
			    caddr_t val, int *avalsize); }
119	UNIMPL		resuba
120	NOARGS		{ int sys_readv(int fd, struct iovec *iovp, \
			    u_int iovcnt); }
121	NOARGS		{ int sys_writev(int fd, struct iovec *iovp, \
			    u_int iovcnt); }
122	NOARGS		{ int sys_settimeofday(struct timeval *tv, \
			    struct timezone *tzp); }
123	NOARGS		{ int sys_fchown(int fd, int uid, int gid); }
124	NOARGS		{ int sys_fchmod(int fd, int mode); }
125	NOARGS		{ int compat_43_sys_recvfrom(int s, caddr_t buf, \
			    size_t len, int flags, caddr_t from, \
			    int *fromlenaddr); }
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
128	NOARGS		{ int sys_rename(char *from, char *to); }
129	NOARGS		{ int compat_43_sys_truncate(char *path, long length); }
130	NOARGS		{ int compat_43_sys_ftruncate(int fd, long length); }
131	NOARGS		{ int sys_flock(int fd, int how); }
132	UNIMPL
133	NOARGS		{ int sys_sendto(int s, caddr_t buf, size_t len, \
			    int flags, caddr_t to, int tolen); }
134	NOARGS		{ int sys_shutdown(int s, int how); }
135	NOARGS		{ int sys_socketpair(int domain, int type, \
			    int protocol, int *rsv); }
136	NOARGS		{ int sys_mkdir(char *path, int mode); }
137	NOARGS		{ int sys_rmdir(char *path); }
138	NOARGS		{ int sys_utimes(char *path, struct timeval *tptr); }
139	STD		{ int ultrix_sys_sigcleanup(struct sigcontext *sigcntxp); }
140	NOARGS		{ int sys_adjtime(struct timeval *delta, \
			    struct timeval *olddelta); }
141	NOARGS		{ int compat_43_sys_getpeername(int fdes, caddr_t asa, \
			    int *alen); }
142	NOARGS		{ int compat_43_sys_gethostid(void); }
143	UNIMPL		old sethostid
144	NOARGS		{ int compat_43_sys_getrlimit(u_int which, \
			    struct orlimit *rlp); }
145	NOARGS		{ int compat_43_sys_setrlimit(u_int which, \
			    struct orlimit *rlp); }
146	NOARGS		{ int compat_43_sys_killpg(int pgid, int signum); }
147	UNIMPL
148	UNIMPL		setquota
149	UNIMPL	 	quota /* needs to be nullop to boot on Ultrix root partition*/
150	NOARGS		{ int compat_43_sys_getsockname(int fdes, caddr_t asa, \
			    int *alen); }
151	UNIMPL		sysmips /* 4 args */
152	UNIMPL		cacheflush /* 4 args */
153	UNIMPL		cachectl /* 3 args */
154	UNIMPL
155	UNIMPL		atomic_op
156	UNIMPL
157	UNIMPL
#ifdef NFSSERVER
158	STD		{ int ultrix_sys_nfssvc(int fd); }
#else
158	UNIMPL
#endif
159	NOARGS		{ int compat_43_sys_getdirentries(int fd, char *buf, \
			    u_int count, long *basep); }
160	STD		{ int ultrix_sys_statfs(char *path, \
			    struct ultrix_statfs *buf); }
161	STD		{ int ultrix_sys_fstatfs(int fd, \
			    struct ultrix_statfs *buf); }
162	UNIMPL		umount
#ifdef NFSCLIENT
163	NOARGS		{ int async_daemon(void); }
164	NOARGS		{ int sys_getfh(char *fname, fhandle_t *fhp); }
#else
163	UNIMPL		async_daemon
164	UNIMPL		getfh
#endif
165	NOARGS		{ int compat_09_sys_getdomainname(char *domainname, \
			    int len); }
166	NOARGS		{ int compat_09_sys_setdomainname(char *domainname, \
			    int len); }
167	UNIMPL 
168	STD		{ int ultrix_sys_quotactl(int cmd, char *special, \
			    int uid, caddr_t addr); }
169	STD		{ int ultrix_sys_exportfs(char *path, char *ex); }
170	UNIMPL		{ int ultrix_sys_mount(char *special, char *dir, \
			     int rdonly, int type, caddr_t data); }
171	UNIMPL	4 hdwconf
172	UNIMPL		msgctl
173	UNIMPL		msgget
174	UNIMPL		msgrcv
175	UNIMPL		msgsnd
176	UNIMPL		semctl
177	UNIMPL		semget
178	UNIMPL		semop
179	STD		{ int ultrix_sys_uname(struct ultrix_utsname *name); }
180	UNIMPL		shmsys
181	UNIMPL	0 plock
182	UNIMPL	0 lockf
183	STD		{ int ultrix_sys_ustat(int dev, \
			    struct ultrix_ustat *buf); }
184	STD		{ int ultrix_sys_getmnt(int *start, \
				struct ultrix_fs_data *buf, \
				int bufsize, int mode, char *path); }
185	UNIMPL	 	notdef
186	UNIMPL	 	notdef
187	STD		{ int ultrix_sys_sigpending(int *mask); }
188	NOARGS		{ int sys_setsid(void); }
189	STD		{ int ultrix_sys_waitpid(int pid, int *status, \
			    int options); }
190	UNIMPL
191	UNIMPL
192	UNIMPL
193	UNIMPL
194	UNIMPL
195	UNIMPL
196	UNIMPL
197	UNIMPL
198	UNIMPL
199	UNIMPL
200	UNIMPL
201	UNIMPL
202	UNIMPL
203	UNIMPL
204	UNIMPL
205	UNIMPL
206	UNIMPL
207	UNIMPL
208	UNIMPL
209	UNIMPL
210	UNIMPL
211	UNIMPL
212	UNIMPL
213	UNIMPL
214	UNIMPL
215	UNIMPL
216	UNIMPL
217	UNIMPL
218	UNIMPL
219	UNIMPL
220	UNIMPL
221	UNIMPL
222	UNIMPL
223	UNIMPL
224	UNIMPL
225	UNIMPL
226	UNIMPL
227	UNIMPL
228	UNIMPL
229	UNIMPL
230	UNIMPL
231	UNIMPL
232	UNIMPL
233	UNIMPL	1 utc_gettime
234	UNIMPL	2 utc_adjtime
235	UNIMPL
236	UNIMPL
237	UNIMPL
238	UNIMPL
239	UNIMPL
240	UNIMPL
241	UNIMPL
242	UNIMPL
243	UNIMPL
244	UNIMPL
245	UNIMPL
246	UNIMPL
247	UNIMPL
248	UNIMPL
249	UNIMPL
250	UNIMPL
251	UNIMPL
252     UNIMPL  	audctl /*Make no-op for installation on Ultrix rootpartition?*/
253	UNIMPL		audgen /*Make no-op for installation on Ultrix rootpartition?*/
254	UNIMPL		startcpu
255	UNIMPL		stopcpu
256	STD		{ int ultrix_sys_getsysinfo(unsigned op, char *buffer, \
			    unsigned nbytes, int *start, char *arg); }
257	STD		{ int ultrix_sys_setsysinfo(unsigned op, char *buffer, \
			    unsigned nbytes, unsigned arg, unsigned flag); }

@


1.12
log
@Mark vadvise(2) as obsolete and remove its implementation, so instead of
returning EINVAL, you'll get ENOSYS. No serious code has used this system
call in at least fifteen years.

The libc stub will be removed at the next major crank time.

ok henning@@ deraadt@@ krw@@ toby@@
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.11 2004/07/09 23:52:02 millert Exp $
@


1.11
log
@Rename ostat -> stat43 to disambiguate from upcoming struct stat changes.
Idea from NetBSD, OK deraadt@@
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.10 2004/05/28 18:28:14 tedu Exp $
d126 1
a126 1
72	NOARGS		{ int sys_ovadvise(int anom); } vadvise
@


1.10
log
@ACCOUNTING is optional.  found by mpech. ok deraadt
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.9 2003/05/11 19:45:18 deraadt Exp $
d84 1
a84 1
			    struct ostat *ub); } ostat
d87 1
a87 1
			    struct ostat *ub); } olstat
d115 1
a115 1
62	NOARGS		{ int compat_43_sys_fstat(int fd, struct ostat *sb); }
@


1.9
log
@finish compat swapon cleanup
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.8 2003/01/30 03:29:49 millert Exp $
d99 1
d101 3
@


1.8
log
@Bring back setreuid(2) and setregid(2) as first class syscalls
(but still implemented via setres[ug]id(2)).  Basically this just
moves them from COMPAT_43 into kern_prot.c.  Also fixes a typo in my
old implementation.  The userland portion will follow in a few days.
deraadt@@ OK
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.7 1999/06/07 07:17:48 deraadt Exp $
d139 1
a139 1
85	NOARGS		{ int sys_swapon(char *name); }
@


1.7
log
@replacement pipe() system call; copies data into place inside kernel, so
that EFAULT return value is possible
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.6 1997/01/26 23:52:04 downsj Exp $
d199 2
a200 2
126	NOARGS		{ int compat_43_sys_setreuid(int ruid, int euid); }
127	NOARGS		{ int compat_43_sys_setregid(int rgid, int egid); }
@


1.7.14.1
log
@sync
@
text
@d1 1
a1 1
	$OpenBSD$
d139 1
a139 1
85	NOARGS		{ int compat_25_sys_swapon(char *name); }
d199 2
a200 2
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
@


1.7.4.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
	$OpenBSD$
d199 2
a200 2
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
@


1.7.4.2
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.7.4.1 2003/03/27 23:53:48 niklas Exp $
d139 1
a139 1
85	NOARGS		{ int compat_25_sys_swapon(char *name); }
@


1.7.4.3
log
@Merge with the trunk
@
text
@d1 1
a1 1
	$OpenBSD$
a98 1
#ifdef ACCOUNTING
a99 3
#else
51	UNIMPL		acct
#endif
@


1.6
log
@Since these are old systems, call lchown() in place of chown().
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.5 1996/08/25 12:20:00 deraadt Exp $
d89 1
a89 1
42	NOARGS		{ int sys_pipe(void); }
@


1.5
log
@route execve via compat filename translation
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.4 1996/08/02 20:29:13 niklas Exp $
d6 1
a6 1
; NetBSD COMPAT_ULTRIX system call name/number "master" file.
d59 1
a59 1
16	NOARGS		{ int sys_chown(char *path, int uid, int gid); }
@


1.4
log
@Add $OpenBSD$
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.15 1996/01/07 13:38:57 jonathan Exp $
d107 1
a107 1
59	NOARGS		{ int sys_execve(char *path, char **argp, \
@


1.3
log
@from netbsd:
Add '/emul/ultrix' pathname processing to Ultrix emulation, and move
Ultrix syscalls that require that processing out of ultrix_misc.c
to ultrix_pathname.c.
@
text
@d1 2
a2 1
	$NetBSD: syscalls.master,v 1.15 1996/01/07 13:38:57 jonathan Exp $
@


1.2
log
@from netbsd:
Add emulation of Ultrix select: before calling native sys_select(),
limit the number of FDs to select on to the maximum supported by NetBSD --
which is as many FDs as the emul_ultrix process can have open, anyway.
Add emulation of Ultrix getmnt(2) in ultrix_fs.c
Add partial emulation of Ultrix tty ioctl()s in ultrix_ioctl.c, derived
from compat/sunos/sunos_ioctl.c.  Ultrix libc's ``isatty()'' now works
in compat_emul processes.
Fix ultrix_sys_select() entry.
Add emulation of ultrix mount(2). Sufficient to NFS-mount filesystems
using a NetBSD kernel in an ultrix root filesystem.
Move wait emulation to the old (v7) wait syscall number, as that's
what the  Ultrix ufs_mount binary uses.
@
text
@d1 1
a1 1
	$NetBSD: syscalls.master,v 1.14 1995/12/26 10:06:15 jonathan Exp $
d50 1
a50 1
8	NOARGS		{ int compat_43_sys_creat(char *path, int mode); }
d77 1
a77 1
33	NOARGS		{ int sys_access(char *path, int flags); }
d82 1
a82 1
38	NOARGS		{ int compat_43_sys_stat(char *path, \
d85 1
a85 1
40	NOARGS		{ int compat_43_sys_lstat(char *path, \
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
	$NetBSD: syscalls.master,v 1.11 1995/10/07 06:28:00 mycroft Exp $
d49 1
a49 1
7	UNIMPL		old_wait
d64 2
a65 1
21	OBSOL		mount
d101 1
a101 1
54	NOARGS		{ int sys_ioctl(int fd, u_long com, caddr_t data); }
d149 1
a149 1
93	NOARGS		{ int sys_select(u_int nd, fd_set *in, fd_set *ou, \
d264 2
a265 1
170	UNIMPL		mount
d280 3
a282 1
184	UNIMPL		getmnt
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
