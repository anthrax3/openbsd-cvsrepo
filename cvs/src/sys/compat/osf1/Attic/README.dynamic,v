head	1.6;
access;
symbols
	OPENBSD_4_7:1.5.0.36
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.38
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.34
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.32
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.30
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.28
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.26
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.24
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.22
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.20
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.18
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.16
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.14
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.12
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.10
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.8
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.12
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.10
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.8
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.6
date	2010.06.30.20.39.28;	author tedu;	state dead;
branches;
next	1.5;

1.5
date	2001.07.09.05.15.23;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.04.15.47.54;	author ericj;	state Exp;
branches;
next	1.3;

1.3
date	98.02.15.21.19.14;	author niklas;	state Exp;
branches
	1.3.10.1;
next	1.2;

1.2
date	96.08.02.20.35.24;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.20;	author deraadt;	state Exp;
branches;
next	;

1.3.10.1
date	2001.05.14.22.05.00;	author niklas;	state Exp;
branches;
next	1.3.10.2;

1.3.10.2
date	2001.10.31.03.11.46;	author nate;	state Exp;
branches;
next	;


desc
@@


1.6
log
@delete osf1 compat files
@
text
@$OpenBSD: README.dynamic,v 1.5 2001/07/09 05:15:23 fgsch Exp $
$NetBSD: README.dynamic,v 1.2 1999/04/27 06:39:49 cgd Exp $

Dynamically linked programs are supported by NetBSD's Digital UNIX
(formerly DEC OSF/1) emulation.  The OSF/1 dynamic linker scheme is
described in fair detail in:

	%A Larry W. Allen
	%A Harminder G. Singh
	%A Kevin G. Wallace
	%A Melanie B. Weaver
	%T Program Loading in OSF/1
	%P 145-160
	%I USENIX
	%B USENIX Conference Proceedings
	%D January 21-25, 1991
	%C Dallas, TX
	%W Open Software Foundation

Additionally, the object file formats in use are described in the
Digital UNIX _Assembly Language Programmer's Guide_ which can be
found (among other places) on a version-specific page off of:

	http://www.unix.digital.com/faqs/publications/pub_page/doc_list.html

Finally, the actual representation of Auxiliary Vectors came from information
in the Digital UNIX auxv.h header file.

There are at least two potential issues with the implementation as it
currently exists:

1. exec_with_loader() is not emulated.

	Most uses of dynamically linked programs come through execve()
	and use the default loader (/sbin/loader).  In Digital UNIX
	(and OSF/1) you can also force a specific loader to always be
	invoked to load an executable by using the exec_with_loader()
	system call.  Few, if any, programs use this feature.

2. It is not immediately obvious that the right values are used for
   text and data locations when invoking a dynamically linked executable.

	The text and data sections, and the break, are set up as if
	/sbin/loader itself had been executed.  It's not clear that this
	is correct, but /sbin/loader seems to expect that at least the
	break will be set up this way.

	This has certain implications for the way mmap() behaves.  See
	the comment in the osf1_mmap() function in osf1_misc.c.

3. The stack location is used is the normal NetBSD/alpha stack location.

	No attempt is made to put the stack in the place where
	Digital UNIX would normally put it.  This may confuse some
	programs.
@


1.5
log
@OpenBSD tags.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@
Merge in NetBSD changes. This now works for most statically compiled osf1
bins. Shared osf1 libs don't work quite yet.
@
text
@d1 1
@


1.3
log
@OpenBSD
@
text
@d1 1
a1 2
$OpenBSD: README.dynamic,v 1.2 1996/08/02 20:35:24 niklas Exp $
$NetBSD: README.dynamic,v 1.1 1995/02/13 21:39:01 cgd Exp $
d3 52
a54 75
Currently, the OpenBSD OSF/1 emulation code only supports statically
linked OSF/1 binaries.  This document is meant to be a quick
description of what would need to happen to support dynamically linked
OSF/1 binaries, and to provide an indication of the amount of work
that would be required to add such support.

To support dynamically linked OSF/1 binaries, three steps would have
to be taken:
	(1) The osf1_exec_with_loader() syscall emulation code would
		have to be written.
	(2) Execve() would have to be changed to support invocation of
		a loader for dynamically linked binaries.
	(3) The pmap code would have to be extended to allow process
		virtual spaces that are much larger than are currently
		allowed.

1. Implementing osf1_exec_with_loader().

The description of osf1_exec_with_loader is as follows:

	int exec_with_loader(int flags, const char *loader,
		const char *file, char * const argv[],
		char * const envp[]);

It invokes the program named by file, with the given argv and envp,
by starting the specified loader (or /sbin/loader) and somehow passing
the flags, file name, argv, and envp in such a way that the
appropriate things will happen with them.  This interface is
completely undocumented (in the documentation that we have available),
and so the only way to figure it out is to disassemble the OSF/1
kernel and/or /sbin/loader.

2. Changing execve() to support OSF/1 dynamically linked executables.

Normally, dynamically linked executables are invoked using execve(),
in the normal fashion.  The kernel transforms that request into one
that uses the loader, and causes the loader to be invoked with the
appropriate information to run the target executable.

The mechanism by which this is done is unknown; it may be possible to
completely replace the OSF/1 loader with one designed for NetBSD, but
that is rather prohibitive.  (Additionally, it wouldn't solve the
problem of needing to implement the osf1_exec_with_loader()
functionality.)

In any case, this would not be insignificant; it and/or the
implementation of osf1_exec_with_loader() would probably require a
complete rewrite or duplication of the current execve() code.

3. Extending the pmap code to handle larger virtual spaces.

OSF/1's /sbin/loader wants to be loaded at 0x3ff80000000.  Currently,
because of a simplifying assumption (specifically, to only use the
first level-one pte for user-space mappings, effectively turning the
pmap into one that looks much like one for a mc68030), only 8Gb
(0x200000000 bytes) of user virtual space are supported.

It is unclear that the extra virtual space is necessary for any
applications that NetBSD/Alpha would be used for, and support for it
would add a significant amount of complexity to the pmap module.
Adding that support would probably require a from-scratch rewrite of
the pmap module.


Because of the difficulties in emulating the system call interface
used to run dynamic executables, and the difficulties in allowing
support for the address space the OSF/1 loader needs, I do not think
that it is feasible to support dynamically linked OSF/1 executables
with the OSF/1 loading mechanism.  It may be possible to do so with a
new loading mechanism which could be written for NetBSD, but it is
unclear that the necessary interfaces to do even that could be
discovered, and the effort required to implement a new loading
mechanism would be prohibitive.

-- cgd
@


1.3.10.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 1
$NetBSD: README.dynamic,v 1.2 1999/04/27 06:39:49 cgd Exp $
d4 75
a78 52
Dynamically linked programs are supported by NetBSD's Digital UNIX
(formerly DEC OSF/1) emulation.  The OSF/1 dynamic linker scheme is
described in fair detail in:

	%A Larry W. Allen
	%A Harminder G. Singh
	%A Kevin G. Wallace
	%A Melanie B. Weaver
	%T Program Loading in OSF/1
	%P 145-160
	%I USENIX
	%B USENIX Conference Proceedings
	%D January 21-25, 1991
	%C Dallas, TX
	%W Open Software Foundation

Additionally, the object file formats in use are described in the
Digital UNIX _Assembly Language Programmer's Guide_ which can be
found (among other places) on a version-specific page off of:

	http://www.unix.digital.com/faqs/publications/pub_page/doc_list.html

Finally, the actual representation of Auxiliary Vectors came from information
in the Digital UNIX auxv.h header file.

There are at least two potential issues with the implementation as it
currently exists:

1. exec_with_loader() is not emulated.

	Most uses of dynamically linked programs come through execve()
	and use the default loader (/sbin/loader).  In Digital UNIX
	(and OSF/1) you can also force a specific loader to always be
	invoked to load an executable by using the exec_with_loader()
	system call.  Few, if any, programs use this feature.

2. It is not immediately obvious that the right values are used for
   text and data locations when invoking a dynamically linked executable.

	The text and data sections, and the break, are set up as if
	/sbin/loader itself had been executed.  It's not clear that this
	is correct, but /sbin/loader seems to expect that at least the
	break will be set up this way.

	This has certain implications for the way mmap() behaves.  See
	the comment in the osf1_mmap() function in osf1_misc.c.

3. The stack location is used is the normal NetBSD/alpha stack location.

	No attempt is made to put the stack in the place where
	Digital UNIX would normally put it.  This may confuse some
	programs.
@


1.3.10.2
log
@Sync the SMP branch to something just after 3.0
@
text
@a0 1
$OpenBSD$
@


1.2
log
@Added Makefiles to build stuff from syscalls.master in some emulations.
Regenerated derived files from various syscalls.master files. Added $OpenBSD$.
@
text
@d1 1
a1 1
$OpenBSD: README.dynamic,v 1.1 1995/02/13 21:39:01 cgd Exp $
d4 1
a4 1
Currently, the NetBSD OSF/1 emulation code only supports statically
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
