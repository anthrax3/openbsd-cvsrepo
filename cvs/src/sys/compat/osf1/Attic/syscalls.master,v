head	1.12;
access;
symbols
	OPENBSD_4_7:1.11.0.8
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.10
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.6
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.10.0.14
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.12
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.10
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.8
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.6
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.9.0.6
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.4
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.12
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.10
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.8.0.8
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.6
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.4
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.12
date	2010.06.30.20.39.29;	author tedu;	state dead;
branches;
next	1.11;

1.11
date	2008.01.05.00.36.13;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2004.05.28.18.28.14;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.30.03.29.49;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.04.15.47.55;	author ericj;	state Exp;
branches
	1.8.8.1;
next	1.7;

1.7
date	2000.07.21.19.26.39;	author ericj;	state Exp;
branches;
next	1.6;

1.6
date	99.06.07.07.17.47;	author deraadt;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	98.02.17.01.48.07;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.01.26.23.05.12;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.08.25.12.19.55;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.08.02.20.20.30;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.21;	author deraadt;	state Exp;
branches;
next	;

1.6.4.1
date	2001.05.14.22.05.16;	author niklas;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2003.03.27.23.53.48;	author niklas;	state Exp;
branches;
next	1.6.4.3;

1.6.4.3
date	2004.06.05.23.12.35;	author niklas;	state Exp;
branches;
next	;

1.8.8.1
date	2003.05.19.21.52.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@delete osf1 compat files
@
text
@	$OpenBSD: syscalls.master,v 1.11 2008/01/05 00:36:13 miod Exp $
;	$NetBSD: syscalls.master,v 1.29 1999/05/10 03:33:04 cgd Exp $

;	@@(#)syscalls.master	8.1 (Berkeley) 7/19/93

; NetBSD COMPAT_OSF1 system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall names and switch definition files only.

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/poll.h>
#include <sys/syscallargs.h>

#include <compat/osf1/osf1.h>
#include <compat/osf1/osf1_syscallargs.h>

0	NOARGS		{ int sys_nosys(void); } syscall
1	NOARGS		{ int sys_exit(int rval); }
2	NOARGS		{ int sys_fork(void); }
3	NOARGS		{ int sys_read(int fd, char *buf, u_int nbyte); }
4	NOARGS		{ int sys_write(int fd, const char *buf, \
			    u_int nbyte); }
5	UNIMPL		old open
6	NOARGS		{ int sys_close(int fd); }
7	STD		{ int osf1_sys_wait4(int pid, int *status, \
			    int options, struct osf1_rusage *rusage); }
8	UNIMPL		old creat
9	NOARGS		{ int sys_link(const char *path, const char *link); }
10	NOARGS		{ int sys_unlink(const char *path); }
11	UNIMPL		execv
12	NOARGS		{ int sys_chdir(const char *path); }
13	NOARGS		{ int sys_fchdir(int fd); }
14	STD		{ int osf1_sys_mknod(char *path, int mode, \
			    int dev); }
15	NOARGS		{ int sys_chmod(const char *path, int mode); }
16	NOARGS		{ int sys_chown(const char *path, int uid, \
			    int gid); }
17	NOARGS		{ int sys_obreak(char *nsize); }
18	STD		{ int osf1_sys_getfsstat(struct osf1_statfs *buf, \
			    long bufsize, int flags); }
19	STD		{ off_t osf1_sys_lseek(int fd, off_t offset, \
			    int whence); }
20	NOARGS		{ pid_t sys_getpid(void); }
21	STD		{ int osf1_sys_mount(int type, const char *path, \
			    int flags, caddr_t data); }
22	STD		{ int osf1_sys_unmount(const char *path, int flags); }
23	STD		{ int osf1_sys_setuid(uid_t uid); }
24	NOARGS		{ uid_t sys_getuid(void); }
25	UNIMPL		exec_with_loader
26	UNIMPL		ptrace
27	STD		{ int osf1_sys_recvmsg_xopen(int s, \
			    struct osf1_msghdr_xopen *msg, int flags); }
28	STD		{ int osf1_sys_sendmsg_xopen(int s, \
			    const struct osf1_msghdr_xopen *msg, int flags); }
29	UNIMPL		recvfrom
30	UNIMPL		accept
31	UNIMPL		getpeername
32	UNIMPL		getsockname
33	STD		{ int osf1_sys_access(char *path, int flags); }
34	UNIMPL		chflags
35	UNIMPL		fchflags
36	NOARGS		{ int sys_sync(void); }
37	NOARGS		{ int sys_kill(int pid, int signum); }
38	UNIMPL		old stat
39	NOARGS		{ int sys_setpgid(int pid, int pgid); }
40	UNIMPL		old lstat
41	NOARGS		{ int sys_dup(u_int fd); }
42	NOARGS		{ int sys_pipe(void); }
43	STD		{ int osf1_sys_set_program_attributes( \
                          caddr_t taddr, unsigned long tsize, \
                          caddr_t daddr, unsigned long dsize); }  
44	UNIMPL		profil
45	STD		{ int osf1_sys_open(char *path, int flags, \
			    int mode); }
46	OBSOL		sigaction
47	NOARGS		{ gid_t sys_getgid(void); }
; XXX
48	NOARGS		{ int sys_sigprocmask(int how, sigset_t mask); }
49	NOARGS		{ int sys_getlogin(char *namebuf, u_int namelen); }
50	NOARGS		{ int sys_setlogin(const char *namebuf); }
#ifdef	ACCOUNTING
51	NOARGS		{ int sys_acct(const char *path); }
#else
51	UNIMPL		acct
#endif
52	UNIMPL		sigpending
53	STD		{ int osf1_sys_classcntl(int opcode, int arg1, \
			    int arg2, int arg3); }
54	STD		{ int osf1_sys_ioctl(int fd, int com, caddr_t data); }
55	STD		{ int osf1_sys_reboot(int opt); }
56	NOARGS		{ int sys_revoke(const char *path); }
57	NOARGS		{ int sys_symlink(const char *path, \
			    const char *link); }
58	NOARGS		{ int sys_readlink(const char *path, char *buf, \
			    int count); }
59	STD		{ int osf1_sys_execve(char *path, \
			    char * const *argp, char * const *envp); }
60	NOARGS		{ int sys_umask(int newmask); }
61	NOARGS		{ int sys_chroot(const char *path); }
62	UNIMPL		old fstat
63	NOARGS		{ int sys_getpgrp(void); }
64	NOARGS		{ int compat_43_sys_getpagesize(void); }
65	UNIMPL		mremap
66	NOARGS		{ int sys_vfork(void); }
67	STD		{ int osf1_sys_stat(char *path, \
			    struct osf1_stat *ub); }
68	STD		{ int osf1_sys_lstat(char *path, \
			    struct osf1_stat *ub); }
69	UNIMPL		sbrk
70	UNIMPL		sstk
71	STD		{ caddr_t osf1_sys_mmap(caddr_t addr, size_t len, \
			    int prot, int flags, int fd, off_t pos); }
72	OBSOL		vadvise
73	NOARGS		{ int sys_munmap(caddr_t addr, size_t len); }
74	STD		{ int osf1_sys_mprotect(void *addr, size_t len, \
			    int prot); }
75	STD		{ int osf1_sys_madvise(void *addr, size_t len, \
			    int behav); }
76	UNIMPL		old vhangup
77	UNIMPL		kmodcall
78	UNIMPL		mincore
79	NOARGS		{ int sys_getgroups(u_int gidsetsize, gid_t *gidset); }
80	NOARGS		{ int sys_setgroups(u_int gidsetsize, gid_t *gidset); }
81	UNIMPL		old getpgrp
; OSF/1 setpgrp(); identical in function to setpgid().  XXX
82	NOARGS		{ int sys_setpgid(int pid, int pgid); } setpgrp
83	STD		{ int osf1_sys_setitimer(u_int which, \
			    struct osf1_itimerval *itv, \
			    struct osf1_itimerval *oitv); }
84	UNIMPL		old wait
85	UNIMPL		table
86	UNIMPL		getitimer
87	NOARGS		{ int compat_43_sys_gethostname(char *hostname, \
			    u_int len); }
88	NOARGS		{ int compat_43_sys_sethostname(const char *hostname, \
			    u_int len); }
89	NOARGS		{ int compat_43_sys_getdtablesize(void); }
90	NOARGS		{ int sys_dup2(u_int from, u_int to); }
91	STD		{ int osf1_sys_fstat(int fd, void *sb); }
92	STD		{ int osf1_sys_fcntl(int fd, int cmd, void *arg); }
93	STD		{ int osf1_sys_select(u_int nd, fd_set *in, \
			    fd_set *ou, fd_set *ex, struct osf1_timeval *tv); }
; maybe XXX
94	NOARGS		{ int sys_poll(struct pollfd *fds, u_int nfds, \
			    int timeout); }
95	NOARGS		{ int sys_fsync(int fd); }
96	NOARGS		{ int sys_setpriority(int which, int who, int prio); }
97	STD		{ int osf1_sys_socket(int domain, int type, \
			    int protocol); }
98	NOARGS		{ int sys_connect(int s, caddr_t name, int namelen); }
99	NOARGS		{ int compat_43_sys_accept(int s, caddr_t name, \
			    int *anamelen); }
100	NOARGS		{ int sys_getpriority(int which, int who); }
101	NOARGS		{ int compat_43_sys_send(int s, caddr_t buf, int len, \
			    int flags); }
102	NOARGS		{ int compat_43_sys_recv(int s, caddr_t buf, int len, \
			    int flags); }
103	NOARGS		{ int sys_sigreturn(struct sigcontext *sigcntxp); }
104	NOARGS		{ int sys_bind(int s, caddr_t name, int namelen); }
105	NOARGS		{ int sys_setsockopt(int s, int level, int name, \
			    caddr_t val, int valsize); }
106	NOARGS		{ int sys_listen(int s, int backlog); }
107	UNIMPL		plock
108	UNIMPL		old sigvec
109	UNIMPL		old sigblock
110	UNIMPL		old sigsetmask
111	NOARGS		{ int sys_sigsuspend(int mask); }
112	NOARGS		{ int compat_43_sys_sigstack(struct sigstack *nss, \
			    struct sigstack *oss); }
113	UNIMPL		old recvmsg
114	UNIMPL		old sendmsg
115	OBSOL		vtrace
116	STD		{ int osf1_sys_gettimeofday(struct osf1_timeval *tp, \
			    struct osf1_timezone *tzp); }
117	STD		{ int osf1_sys_getrusage(int who, \
			    struct osf1_rusage *rusage); }
; XXX
118	NOARGS		{ int sys_getsockopt(int s, int level, int name, \
			    caddr_t val, int *avalsize); }
119	UNIMPL
120	STD		{ int osf1_sys_readv(int fd, \
			    struct osf1_iovec *iovp, u_int iovcnt); }
121	STD		{ int osf1_sys_writev(int fd, \
			    struct osf1_iovec *iovp, u_int iovcnt); }
122	STD		{ int osf1_sys_settimeofday(struct osf1_timeval *tv, \
			    struct osf1_timezone *tzp); }
123	NOARGS		{ int sys_fchown(int fd, int uid, int gid); }
124	NOARGS		{ int sys_fchmod(int fd, int mode); }
125	NOARGS		{ int compat_43_sys_recvfrom(int s, caddr_t buf, \
			    size_t len, int flags, caddr_t from, \
			    int *fromlenaddr); }
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
128	NOARGS		{ int sys_rename(const char *from, \
			    const char *to); }
129	STD		{ int osf1_sys_truncate(char *path, \
			    off_t length); }
130	STD		{ int osf1_sys_ftruncate(int fd, off_t length); }
131	UNIMPL		flock
132	STD		{ int osf1_sys_setgid(gid_t gid); }
133	STD		{ int osf1_sys_sendto(int s, caddr_t buf, size_t len, \
			    int flags, struct sockaddr *to, int tolen); }
134	NOARGS		{ int sys_shutdown(int s, int how); }
135	STD		{ int osf1_sys_socketpair(int domain, int type, \
			    int protocol, int *rsv); }
136	NOARGS		{ int sys_mkdir(const char *path, int mode); }
137	NOARGS		{ int sys_rmdir(const char *path); }
138	STD		{ int osf1_sys_utimes(char *path, \
			    const struct osf1_timeval *tptr); }
139	OBSOL		4.2 sigreturn
140	UNIMPL		adjtime
141	NOARGS		{ int compat_43_sys_getpeername(int fdes, \
			    caddr_t asa, int *alen); }
142	NOARGS		{ int32_t compat_43_sys_gethostid(void); }
143	NOARGS		{ int compat_43_sys_sethostid(int32_t hostid); }
; XXX
144	STD		{ int osf1_sys_getrlimit(u_int which, \
			    struct rlimit *rlp); }
; XXX
145	STD		{ int osf1_sys_setrlimit(u_int which, \
			    struct rlimit *rlp); }
146	UNIMPL		old killpg
147	NOARGS		{ int sys_setsid(void); }
148	UNIMPL		quotactl
149	NOARGS		{ int compat_43_sys_quota(void); }
150	NOARGS		{ int compat_43_sys_getsockname(int fdec, \
			    caddr_t asa, int *alen); }
151	UNIMPL		pread
152	UNIMPL		pwrite
153	UNIMPL		pid_block
154	UNIMPL		pid_unblock
155	UNIMPL		signal_urti
156	STD		{ int osf1_sys_sigaction(int signum, \
			    struct osf1_sigaction *nsa, \
			    struct osf1_sigaction *osa); }
157	UNIMPL		sigwaitprim
158	UNIMPL		nfssvc
159	NOARGS		{ int compat_43_sys_getdirentries(int fd, char *buf, \
			    u_int count, long *basep); }
160	STD		{ int osf1_sys_statfs(const char *path, \
			    struct osf1_statfs *buf, int len); }
161	STD		{ int osf1_sys_fstatfs(int fd, \
			    struct osf1_statfs *buf, int len); }
162	UNIMPL
163	UNIMPL		async_daemon
164	UNIMPL		getfh
165	NOARGS		{ int compat_09_sys_getdomainname(char *domainname, \
			    int len); }
166	NOARGS		{ int compat_09_sys_setdomainname(char *domainname, \
			    int len); }
167	UNIMPL
168	UNIMPL
169	UNIMPL		exportfs
170	UNIMPL
171	UNIMPL
172	UNIMPL		alt msgctl
173	UNIMPL		alt msgget
174	UNIMPL		alt msgrcv
175	UNIMPL		alt msgsnd
176	UNIMPL		alt semctl
177	UNIMPL		alt semget
178	UNIMPL		alt semop
179	UNIMPL		alt uname
180	UNIMPL
181	UNIMPL		alt plock
182	UNIMPL		lockf
183	UNIMPL
184	UNIMPL		getmnt
185	UNIMPL
186	UNIMPL		unmount
187	UNIMPL		alt sigpending
188	UNIMPL		alt setsid
189	UNIMPL
190	UNIMPL
191	UNIMPL
192	UNIMPL
193	UNIMPL
194	UNIMPL
195	UNIMPL
196	UNIMPL
197	UNIMPL
198	UNIMPL
199	UNIMPL		swapon
200	UNIMPL		msgctl
201	UNIMPL		msgget
202	UNIMPL		msgrcv
203	UNIMPL		msgsnd
204	UNIMPL		semctl
205	UNIMPL		semget
206	UNIMPL		semop
207	STD		{ int osf1_sys_uname(struct osf1_uname *name); }
208	NOARGS		{ int sys_lchown(const char *path, int uid, \
			    int gid); }
209	STD		{ void *osf1_sys_shmat(int shmid, \
			    const void *shmaddr, int shmflg); }
210	STD		{ int osf1_sys_shmctl(int shmid, int cmd, \
			    struct osf1_shmid_ds *buf); }
211	STD		{ int osf1_sys_shmdt(const void *shmaddr); }
212	STD		{ int osf1_sys_shmget(osf1_key_t key, size_t size, \
			    int flags); } 
213	UNIMPL		mvalid
214	UNIMPL		getaddressconf
215	UNIMPL		msleep
216	UNIMPL		mwakeup
217	UNIMPL		msync
218	UNIMPL		signal
219	UNIMPL		utc gettime
220	UNIMPL		utc adjtime
221	UNIMPL
222	UNIMPL		security
223	UNIMPL		kloadcall
224	UNIMPL
225	UNIMPL
226	UNIMPL
227	UNIMPL
228	UNIMPL
229	UNIMPL
230	UNIMPL
231	UNIMPL
232	UNIMPL
233	UNIMPL		getpgid
234	NOARGS		{ pid_t sys_getsid(pid_t pid); }
235	STD		{ int osf1_sys_sigaltstack( \
			    struct osf1_sigaltstack *nss, \
			    struct osf1_sigaltstack *oss); }
236	UNIMPL		waitid
237	UNIMPL		priocntlset
238	UNIMPL		sigsendset
239	UNIMPL		set_speculative
240	UNIMPL		msfs_syscall
241	STD		{ int osf1_sys_sysinfo(int cmd, char *buf, long len); }
242	UNIMPL		uadmin
243	UNIMPL		fuser
244	UNIMPL		proplist_syscall
245	UNIMPL		ntp_adjtime
246	UNIMPL		ntp_gettime
247	STD		{ long osf1_sys_pathconf(char *path, int name); }
248	STD		{ long osf1_sys_fpathconf(int fd, int name); }
249	UNIMPL
250	UNIMPL		uswitch
251	STD		{ int osf1_sys_usleep_thread( \
			    struct osf1_timeval *sleep, \
			    struct osf1_timeval *slept); }
252	UNIMPL		audcntl
253	UNIMPL		audgen
254	UNIMPL		sysfs
255	UNIMPL		subsys_info
256	UNIMPL		getsysinfo
257	STD		{ int osf1_sys_setsysinfo(u_long op, caddr_t buffer, \
			    u_long nbytes, caddr_t arg, u_long flag); }
258	UNIMPL		afs_syscall
259	UNIMPL		swapctl
260	UNIMPL		memcntl
261	UNIMPL		fdatasync
@


1.11
log
@Mark vadvise(2) as obsolete and remove its implementation, so instead of
returning EINVAL, you'll get ENOSYS. No serious code has used this system
call in at least fifteen years.

The libc stub will be removed at the next major crank time.

ok henning@@ deraadt@@ krw@@ toby@@
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.10 2004/05/28 18:28:14 tedu Exp $
@


1.10
log
@ACCOUNTING is optional.  found by mpech. ok deraadt
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.9 2003/01/30 03:29:49 millert Exp $
d141 1
a141 1
72	UNIMPL		ovadvise
@


1.9
log
@Bring back setreuid(2) and setregid(2) as first class syscalls
(but still implemented via setres[ug]id(2)).  Basically this just
moves them from COMPAT_43 into kern_prot.c.  Also fixes a typo in my
old implementation.  The userland portion will follow in a few days.
deraadt@@ OK
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.8 2000/08/04 15:47:55 ericj Exp $
d109 1
d111 3
@


1.8
log
@
Merge in NetBSD changes. This now works for most statically compiled osf1
bins. Shared osf1 libs don't work quite yet.
@
text
@d1 1
a1 1
	$OpenBSD$
d216 2
a217 2
126	UNIMPL		setreuid
127	UNIMPL		setregid
@


1.8.8.1
log
@sync
@
text
@d216 2
a217 2
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
@


1.7
log
@added listen and accept syscalls. from NetBSD
@
text
@d1 2
a2 2
;	$OpenBSD: syscalls.master,v 1.6 1999/06/07 07:17:47 deraadt Exp $
;	$NetBSD: syscalls.master,v 1.2 1995/10/07 06:27:28 mycroft Exp $
d6 1
a6 1
; OpenBSD COMPAT_OSF1 system call name/number "master" file.
d33 1
a33 1
; #include's are copied to the syscall switch definition file only.
d42 1
d49 2
a50 1
4	NOARGS		{ int sys_write(int fd, char *buf, u_int nbyte); }
d53 2
a54 2
7	NOARGS		{ int sys_wait4(int pid, int *status, int options, \
			    struct rusage *rusage); }
d56 2
a57 2
9	NOARGS		{ int sys_link(char *path, char *link); }
10	NOARGS		{ int sys_unlink(char *path); }
d59 1
a59 1
12	NOARGS		{ int sys_chdir(char *path); }
d61 5
a65 3
14	STD		{ int osf1_sys_mknod(char *path, int mode, int dev); }
15	NOARGS		{ int sys_chmod(char *path, int mode); }
16	NOARGS		{ int sys_chown(char *path, int uid, int gid); }
d72 3
a74 3
21	STD		{ int osf1_sys_mount(int type, char *path, int flags, \
			    caddr_t data); }
22	STD		{ int osf1_sys_unmount(char *path, int flags); }
d79 4
a82 2
27	UNIMPL		recvmsg
28	UNIMPL		sendmsg
d87 1
a87 1
33	NOARGS		{ int sys_access(char *path, int flags); }
d96 4
a99 2
42	NOARGS		{ int sys_opipe(void); }
43	UNIMPL		set_program_attributes
d101 2
a102 1
45	STD		{ int osf1_sys_open(char *path, int flags, int mode); }
d105 1
d108 2
a109 2
50	NOARGS		{ int sys_setlogin(char *namebuf); }
51	NOARGS		{ int sys_acct(char *path); }
d111 2
a112 1
53	UNIMPL
d115 7
a121 5
56	NOARGS		{ int sys_revoke(char *path); }
57	NOARGS		{ int sys_symlink(char *path, char *link); }
58	NOARGS		{ int sys_readlink(char *path, char *buf, int count); }
59	STD		{ int osf1_sys_execve(char *path, char **argp, \
			    char **envp); }
d123 1
a123 1
61	NOARGS		{ int sys_chroot(char *path); }
d129 2
a130 1
67	STD		{ int osf1_sys_stat(char *path, struct osf1_stat *ub); }
d139 4
a142 3
74	UNIMPL		mprotect
; XXX
75	STD		{ int osf1_sys_madvise(void); }
d151 3
a153 2
83	NOARGS		{ int sys_setitimer(u_int which, \
			    struct itimerval *itv, struct itimerval *oitv); }
d159 1
a159 1
88	NOARGS		{ int compat_43_sys_sethostname(char *hostname, \
d165 5
a169 4
93	NOARGS		{ int sys_select(u_int nd, fd_set *in, fd_set *ou, \
                            fd_set *ex, struct timeval *tv); }
94	STD		{ int osf1_sys_poll(struct pollfd *fds, \
			    unsigned int nfds, int timeout); }
d185 1
a185 1
                            caddr_t val, int valsize); }
d196 5
a200 3
115	UNIMPL		vtrace
116	NOARGS		{ int sys_gettimeofday(struct timeval *tp, \
			    struct timezone *tzp); }
a201 1
117	STD		{ int osf1_sys_getrusage(void); }
d203 1
a203 1
                            caddr_t val, int *avalsize); }
d205 6
a210 6
120	STD		{ int osf1_sys_readv(int fd, struct osf1_iovec *iovp, \
			    u_int iovcnt); }
121	STD		{ int osf1_sys_writev(int fd, struct osf1_iovec *iovp, \
			    u_int iovcnt); }
122	NOARGS		{ int sys_settimeofday(struct timeval *tv, \
			    struct timezone *tzp); }
d218 4
a221 2
128	NOARGS		{ int sys_rename(char *from, char *to); }
129	STD		{ int osf1_sys_truncate(char *path, off_t length); }
d225 2
a226 3
133	STD		{ int osf1_sys_sendto(int s, const void *buf, \
			    size_t len, int flags, const struct sockaddr *to, \
			    int tolen); }
d228 6
a233 4
135	UNIMPL		socketpair
136	NOARGS		{ int sys_mkdir(char *path, int mode); }
137	NOARGS		{ int sys_rmdir(char *path); }
138	NOARGS		{ int sys_utimes(char *path, struct timeval *tptr); }
d236 2
a237 1
141	UNIMPL		old getpeername
d240 1
d243 1
d250 7
a256 6
150	UNIMPL		old getsockname
151	UNIMPL
152	UNIMPL
153	UNIMPL
154	UNIMPL
155	UNIMPL
d260 1
a260 1
157	UNIMPL
d264 1
a264 1
160     STD             { int osf1_sys_statfs(char *path, \
d266 1
a266 1
161     STD             { int osf1_sys_fstatfs(int fd, \
d271 4
a274 2
165	UNIMPL		getdomainname
166	UNIMPL		setdomainname
d315 10
a324 6
207	UNIMPL		uname
208	NOARGS		{ int sys_lchown(char *path, int uid, int gid); }
209	UNIMPL		shmat
210	UNIMPL		shmctl
211	UNIMPL		shmdt
212	UNIMPL		shmget
d346 3
a348 2
234	STD		{ pid_t osf1_sys_getsid(pid_t pid); }
235	STD		{ int osf1_sys_sigaltstack(struct osf1_sigaltstack *nss, \
d353 1
a353 1
239	UNIMPL
d355 1
a355 1
241	UNIMPL		sysinfo
d358 5
a362 5
244	UNIMPL
245	UNIMPL
246	UNIMPL
247	UNIMPL
248	UNIMPL		
d365 3
a367 2
251	STD		{ int osf1_sys_usleep_thread(struct timeval *sleep, \
			    struct timeval *slept); }
d371 1
a371 1
255	UNIMPL
d378 1
@


1.6
log
@replacement pipe() system call; copies data into place inside kernel, so
that EFAULT return value is possible
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.5 1998/02/17 01:48:07 millert Exp $
d158 2
a159 1
99	UNIMPL		old accept
d169 1
a169 1
106	UNIMPL		listen
@


1.6.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
	$OpenBSD: syscalls.master,v 1.8 2000/08/04 15:47:55 ericj Exp $
;	$NetBSD: syscalls.master,v 1.29 1999/05/10 03:33:04 cgd Exp $
d6 1
a6 1
; NetBSD COMPAT_OSF1 system call name/number "master" file.
d33 1
a33 1
; #include's are copied to the syscall names and switch definition files only.
a41 1
#include <compat/osf1/osf1.h>
d48 1
a48 2
4	NOARGS		{ int sys_write(int fd, const char *buf, \
			    u_int nbyte); }
d51 2
a52 2
7	STD		{ int osf1_sys_wait4(int pid, int *status, \
			    int options, struct osf1_rusage *rusage); }
d54 2
a55 2
9	NOARGS		{ int sys_link(const char *path, const char *link); }
10	NOARGS		{ int sys_unlink(const char *path); }
d57 1
a57 1
12	NOARGS		{ int sys_chdir(const char *path); }
d59 3
a61 5
14	STD		{ int osf1_sys_mknod(char *path, int mode, \
			    int dev); }
15	NOARGS		{ int sys_chmod(const char *path, int mode); }
16	NOARGS		{ int sys_chown(const char *path, int uid, \
			    int gid); }
d68 3
a70 3
21	STD		{ int osf1_sys_mount(int type, const char *path, \
			    int flags, caddr_t data); }
22	STD		{ int osf1_sys_unmount(const char *path, int flags); }
d75 2
a76 4
27	STD		{ int osf1_sys_recvmsg_xopen(int s, \
			    struct osf1_msghdr_xopen *msg, int flags); }
28	STD		{ int osf1_sys_sendmsg_xopen(int s, \
			    const struct osf1_msghdr_xopen *msg, int flags); }
d81 1
a81 1
33	STD		{ int osf1_sys_access(char *path, int flags); }
d90 2
a91 4
42	NOARGS		{ int sys_pipe(void); }
43	STD		{ int osf1_sys_set_program_attributes( \
                          caddr_t taddr, unsigned long tsize, \
                          caddr_t daddr, unsigned long dsize); }  
d93 1
a93 2
45	STD		{ int osf1_sys_open(char *path, int flags, \
			    int mode); }
a95 1
; XXX
d98 2
a99 2
50	NOARGS		{ int sys_setlogin(const char *namebuf); }
51	NOARGS		{ int sys_acct(const char *path); }
d101 1
a101 2
53	STD		{ int osf1_sys_classcntl(int opcode, int arg1, \
			    int arg2, int arg3); }
d104 5
a108 7
56	NOARGS		{ int sys_revoke(const char *path); }
57	NOARGS		{ int sys_symlink(const char *path, \
			    const char *link); }
58	NOARGS		{ int sys_readlink(const char *path, char *buf, \
			    int count); }
59	STD		{ int osf1_sys_execve(char *path, \
			    char * const *argp, char * const *envp); }
d110 1
a110 1
61	NOARGS		{ int sys_chroot(const char *path); }
d116 1
a116 2
67	STD		{ int osf1_sys_stat(char *path, \
			    struct osf1_stat *ub); }
d125 3
a127 4
74	STD		{ int osf1_sys_mprotect(void *addr, size_t len, \
			    int prot); }
75	STD		{ int osf1_sys_madvise(void *addr, size_t len, \
			    int behav); }
d136 2
a137 3
83	STD		{ int osf1_sys_setitimer(u_int which, \
			    struct osf1_itimerval *itv, \
			    struct osf1_itimerval *oitv); }
d143 1
a143 1
88	NOARGS		{ int compat_43_sys_sethostname(const char *hostname, \
d149 4
a152 5
93	STD		{ int osf1_sys_select(u_int nd, fd_set *in, \
			    fd_set *ou, fd_set *ex, struct osf1_timeval *tv); }
; maybe XXX
94	NOARGS		{ int sys_poll(struct pollfd *fds, u_int nfds, \
			    int timeout); }
d158 1
a158 2
99	NOARGS		{ int compat_43_sys_accept(int s, caddr_t name, \
			    int *anamelen); }
d167 2
a168 2
			    caddr_t val, int valsize); }
106	NOARGS		{ int sys_listen(int s, int backlog); }
d178 3
a180 5
115	OBSOL		vtrace
116	STD		{ int osf1_sys_gettimeofday(struct osf1_timeval *tp, \
			    struct osf1_timezone *tzp); }
117	STD		{ int osf1_sys_getrusage(int who, \
			    struct osf1_rusage *rusage); }
d182 1
d184 1
a184 1
			    caddr_t val, int *avalsize); }
d186 6
a191 6
120	STD		{ int osf1_sys_readv(int fd, \
			    struct osf1_iovec *iovp, u_int iovcnt); }
121	STD		{ int osf1_sys_writev(int fd, \
			    struct osf1_iovec *iovp, u_int iovcnt); }
122	STD		{ int osf1_sys_settimeofday(struct osf1_timeval *tv, \
			    struct osf1_timezone *tzp); }
d199 2
a200 4
128	NOARGS		{ int sys_rename(const char *from, \
			    const char *to); }
129	STD		{ int osf1_sys_truncate(char *path, \
			    off_t length); }
d204 3
a206 2
133	STD		{ int osf1_sys_sendto(int s, caddr_t buf, size_t len, \
			    int flags, struct sockaddr *to, int tolen); }
d208 4
a211 6
135	STD		{ int osf1_sys_socketpair(int domain, int type, \
			    int protocol, int *rsv); }
136	NOARGS		{ int sys_mkdir(const char *path, int mode); }
137	NOARGS		{ int sys_rmdir(const char *path); }
138	STD		{ int osf1_sys_utimes(char *path, \
			    const struct osf1_timeval *tptr); }
d214 1
a214 2
141	NOARGS		{ int compat_43_sys_getpeername(int fdes, \
			    caddr_t asa, int *alen); }
a216 1
; XXX
a218 1
; XXX
d225 6
a230 7
150	NOARGS		{ int compat_43_sys_getsockname(int fdec, \
			    caddr_t asa, int *alen); }
151	UNIMPL		pread
152	UNIMPL		pwrite
153	UNIMPL		pid_block
154	UNIMPL		pid_unblock
155	UNIMPL		signal_urti
d234 1
a234 1
157	UNIMPL		sigwaitprim
d238 1
a238 1
160	STD		{ int osf1_sys_statfs(const char *path, \
d240 1
a240 1
161	STD		{ int osf1_sys_fstatfs(int fd, \
d245 2
a246 4
165	NOARGS		{ int compat_09_sys_getdomainname(char *domainname, \
			    int len); }
166	NOARGS		{ int compat_09_sys_setdomainname(char *domainname, \
			    int len); }
d287 6
a292 10
207	STD		{ int osf1_sys_uname(struct osf1_uname *name); }
208	NOARGS		{ int sys_lchown(const char *path, int uid, \
			    int gid); }
209	STD		{ void *osf1_sys_shmat(int shmid, \
			    const void *shmaddr, int shmflg); }
210	STD		{ int osf1_sys_shmctl(int shmid, int cmd, \
			    struct osf1_shmid_ds *buf); }
211	STD		{ int osf1_sys_shmdt(const void *shmaddr); }
212	STD		{ int osf1_sys_shmget(osf1_key_t key, size_t size, \
			    int flags); } 
d314 2
a315 3
234	NOARGS		{ pid_t sys_getsid(pid_t pid); }
235	STD		{ int osf1_sys_sigaltstack( \
			    struct osf1_sigaltstack *nss, \
d320 1
a320 1
239	UNIMPL		set_speculative
d322 1
a322 1
241	STD		{ int osf1_sys_sysinfo(int cmd, char *buf, long len); }
d325 5
a329 5
244	UNIMPL		proplist_syscall
245	UNIMPL		ntp_adjtime
246	UNIMPL		ntp_gettime
247	STD		{ long osf1_sys_pathconf(char *path, int name); }
248	STD		{ long osf1_sys_fpathconf(int fd, int name); }
d332 2
a333 3
251	STD		{ int osf1_sys_usleep_thread( \
			    struct osf1_timeval *sleep, \
			    struct osf1_timeval *slept); }
d337 1
a337 1
255	UNIMPL		subsys_info
a343 1
261	UNIMPL		fdatasync
@


1.6.4.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
	$OpenBSD$
d216 2
a217 2
126	NOARGS		{ int sys_setreuid(uid_t ruid, uid_t euid); }
127	NOARGS		{ int sys_setregid(gid_t rgid, gid_t egid); }
@


1.6.4.3
log
@Merge with the trunk
@
text
@a108 1
#ifdef	ACCOUNTING
a109 3
#else
51	UNIMPL		acct
#endif
@


1.5
log
@make COMPAT_OSF1 compile again
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.4 1997/01/26 23:05:12 downsj Exp $
d90 1
a90 1
42	NOARGS		{ int sys_pipe(void); }
@


1.4
log
@We can do lchown(2) now.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.3 1996/08/25 12:19:55 deraadt Exp $
d204 3
a206 2
133	STD		{ int osf1_sys_sendto(int s, caddr_t buf, size_t len, \
			    int flags, caddr_t to, int tolen); }
@


1.3
log
@route execve via compat filename translation
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.2 1996/08/02 20:20:30 niklas Exp $
d6 1
a6 1
; NetBSD COMPAT_OSF1 system call name/number "master" file.
d287 1
a287 1
208	UNIMPL		lchown
@


1.2
log
@Make emulations use our native poll(2)
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.2 1995/10/07 06:27:28 mycroft Exp $
d107 1
a107 1
59	NOARGS		{ int sys_execve(char *path, char **argp, \
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
	$NetBSD: syscalls.master,v 1.2 1995/10/07 06:27:28 mycroft Exp $
d39 1
d41 1
d151 2
a152 1
94	UNIMPL		poll
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
