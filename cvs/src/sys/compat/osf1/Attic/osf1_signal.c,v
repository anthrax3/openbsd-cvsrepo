head	1.11;
access;
symbols
	OPENBSD_4_7:1.10.0.6
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.8
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.4
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.2
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.9.0.34
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.32
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.30
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.28
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.26
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.24
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.22
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.20
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.18
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.16
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.14
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.12
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.10
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.9.0.8
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.6
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.8.0.8
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.6
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.4
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.2
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2010.06.30.20.39.28;	author tedu;	state dead;
branches;
next	1.10;

1.10
date	2008.05.01.11.53.26;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.04.15.47.55;	author ericj;	state Exp;
branches;
next	1.8;

1.8
date	98.12.23.16.23.47;	author millert;	state Exp;
branches
	1.8.6.1;
next	1.7;

1.7
date	98.12.22.07.58.45;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.02.17.01.48.07;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.09.15.06.09.58;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.09.15.03.01.47;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.02.20.35.26;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.01.05.16.18.27;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.20;	author deraadt;	state Exp;
branches;
next	;

1.8.6.1
date	2001.05.14.22.05.11;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@delete osf1 compat files
@
text
@/*	$OpenBSD: osf1_signal.c,v 1.10 2008/05/01 11:53:26 miod Exp $	*/
/*	$NetBSD: osf1_signal.c,v 1.15 1999/05/05 00:57:43 cgd Exp $	*/

/*
 * Copyright (c) 1999 Christopher G. Demetriou.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/namei.h>
#include <sys/proc.h>
#include <sys/filedesc.h>
#include <sys/ioctl.h>
#include <sys/mount.h>
#include <sys/kernel.h>
#include <sys/signal.h>
#include <sys/signalvar.h>
#include <sys/malloc.h>

#include <sys/syscallargs.h>

#include <compat/osf1/osf1.h>
#include <compat/osf1/osf1_signal.h>
#include <compat/osf1/osf1_syscallargs.h>
#include <compat/osf1/osf1_util.h>
#include <compat/osf1/osf1_cvt.h>

#if 0
int
osf1_sys_kill(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_kill_args *uap = v;
	struct sys_kill_args ka;

	SCARG(&ka, pid) = SCARG(uap, pid);
	SCARG(&ka, signum) = osf1_signal_xlist[SCARG(uap, signum)];
	return sys_kill(p, &ka, retval);
}
#endif

int
osf1_sys_sigaction(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_sigaction_args *uap = v;
	struct osf1_sigaction *nosa, *oosa, tmposa;
	struct sigaction *nbsa, *obsa, tmpbsa;
	struct sys_sigaction_args sa;
	caddr_t sg;
	int error;

	sg = stackgap_init(p->p_emul);
	nosa = SCARG(uap, nsa);
	oosa = SCARG(uap, osa);

	if (oosa != NULL)
		obsa = stackgap_alloc(&sg, sizeof(struct sigaction));
	else
		obsa = NULL;

	if (nosa != NULL) {
		nbsa = stackgap_alloc(&sg, sizeof(struct sigaction));
		if ((error = copyin(nosa, &tmposa, sizeof(tmposa))) != 0)
			return error;
		osf1_cvt_sigaction_to_native(&tmposa, &tmpbsa);
		if ((error = copyout(&tmpbsa, nbsa, sizeof(tmpbsa))) != 0)
			return error;
	} else
		nbsa = NULL;

	SCARG(&sa, signum) = osf1_signal_xlist[SCARG(uap, signum)];
	SCARG(&sa, nsa) = nbsa;
	SCARG(&sa, osa) = obsa;

	/* XXX */
	if ((error = sys_sigaction(p, &sa, retval)) != 0)
		return error;

	if (oosa != NULL) {
		if ((error = copyin(obsa, &tmpbsa, sizeof(tmpbsa))) != 0)
			return error;
		osf1_cvt_sigaction_from_native(&tmpbsa, &tmposa);
		if ((error = copyout(&tmposa, oosa, sizeof(tmposa))) != 0)
			return error;
	}

	return 0;
}

int 
osf1_sys_sigaltstack(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_sigaltstack_args *uap = v;
	struct osf1_sigaltstack *noss, *ooss, tmposs;
	struct sigaltstack *nbss, *obss, tmpbss;
	struct sys_sigaltstack_args sa;
	caddr_t sg;
	int error;

	sg = stackgap_init(p->p_emul);
	noss = SCARG(uap, nss);
	ooss = SCARG(uap, oss);

	if (ooss != NULL)
		obss = stackgap_alloc(&sg, sizeof(struct sigaltstack));
	else
		obss = NULL;

	if (noss != NULL) {
		nbss = stackgap_alloc(&sg, sizeof(struct sigaltstack));
		if ((error = copyin(noss, &tmposs, sizeof(tmposs))) != 0)
			return error;
		if ((error = osf1_cvt_sigaltstack_to_native(&tmposs, &tmpbss)) != 0)
			return error;
		if ((error = copyout(&tmpbss, nbss, sizeof(tmpbss))) != 0)
			return error;
	} else
		nbss = NULL;

	SCARG(&sa, nss) = nbss;
	SCARG(&sa, oss) = obss;

	/* XXX */
	if ((error = sys_sigaltstack(p, &sa, retval)) != 0)
		return error;

	if (obss != NULL) {
		if ((error = copyin(obss, &tmpbss, sizeof(tmpbss))) != 0)
			return error;
		osf1_cvt_sigaltstack_from_native(&tmpbss, &tmposs);
		if ((error = copyout(&tmposs, ooss, sizeof(tmposs))) != 0)
			return error;
	}

	return 0;
}

#if 0
int
osf1_sys_signal(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_signal_args *uap = v;
	int signum = osf1_signal_xlist[OSF1_SIGNO(SCARG(uap, signum))];
	int error;
	caddr_t sg = stackgap_init(p->p_emul);

	if (signum <= 0 || signum >= OSF1_NSIG) {
		if (OSF1_SIGCALL(SCARG(uap, signum)) == OSF1_SIGNAL_MASK ||
		    OSF1_SIGCALL(SCARG(uap, signum)) == OSF1_SIGDEFER_MASK)
			*retval = (int)OSF1_SIG_ERR;
		return EINVAL;
	}

	switch (OSF1_SIGCALL(SCARG(uap, signum))) {
	case OSF1_SIGDEFER_MASK:
		/*
		 * sigset is identical to signal() except
		 * that SIG_HOLD is allowed as
		 * an action.
		 */
		if (SCARG(uap, handler) == OSF1_SIG_HOLD) {
			struct sys_sigprocmask_args sa;

			SCARG(&sa, how) = SIG_BLOCK;
			SCARG(&sa, mask) = sigmask(signum);
			return sys_sigprocmask(p, &sa, retval);
		}
		/* FALLTHROUGH */

	case OSF1_SIGNAL_MASK:
		{
			struct sys_sigaction_args sa_args;
			struct sigaction *nbsa, *obsa, sa;

			nbsa = stackgap_alloc(&sg, sizeof(struct sigaction));
			obsa = stackgap_alloc(&sg, sizeof(struct sigaction));
			SCARG(&sa_args, signum) = signum;
			SCARG(&sa_args, nsa) = nbsa;
			SCARG(&sa_args, osa) = obsa;

			sa.sa_handler = SCARG(uap, handler);
			sigemptyset(&sa.sa_mask);
			sa.sa_flags = 0;
#if 0
			if (signum != SIGALRM)
				sa.sa_flags = SA_RESTART;
#endif
			if ((error = copyout(&sa, nbsa, sizeof(sa))) != 0)
				return error;
			if ((error = sys_sigaction(p, &sa_args, retval)) != 0) {
				DPRINTF(("signal: sigaction failed: %d\n",
					 error));
				*retval = (int)OSF1_SIG_ERR;
				return error;
			}
			if ((error = copyin(obsa, &sa, sizeof(sa))) != 0)
				return error;
			*retval = (int)sa.sa_handler;
			return 0;
		}

	case OSF1_SIGHOLD_MASK:
		{
			struct sys_sigprocmask_args sa;

			SCARG(&sa, how) = SIG_BLOCK;
			SCARG(&sa, mask) = sigmask(signum);
			return sys_sigprocmask(p, &sa, retval);
		}

	case OSF1_SIGRELSE_MASK:
		{
			struct sys_sigprocmask_args sa;

			SCARG(&sa, how) = SIG_UNBLOCK;
			SCARG(&sa, mask) = sigmask(signum);
			return sys_sigprocmask(p, &sa, retval);
		}

	case OSF1_SIGIGNORE_MASK:
		{
			struct sys_sigaction_args sa_args;
			struct sigaction *bsa, sa;

			bsa = stackgap_alloc(&sg, sizeof(struct sigaction));
			SCARG(&sa_args, signum) = signum;
			SCARG(&sa_args, nsa) = bsa;
			SCARG(&sa_args, osa) = NULL;

			sa.sa_handler = SIG_IGN;
			sigemptyset(&sa.sa_mask);
			sa.sa_flags = 0;
			if ((error = copyout(&sa, bsa, sizeof(sa))) != 0)
				return error;
			if ((error = sys_sigaction(p, &sa_args, retval)) != 0) {
				DPRINTF(("sigignore: sigaction failed\n"));
				return error;
			}
			return 0;
		}

	case OSF1_SIGPAUSE_MASK:
		{
			struct sys_sigsuspend_args sa;

			SCARG(&sa, mask) = p->p_sigmask & ~sigmask(signum);
			return sys_sigsuspend(p, &sa, retval);
		}

	default:
		return ENOSYS;
	}
}

int
osf1_sys_sigpending(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_sigpending_args *uap = v;
	sigset_t bss;
	osf1_sigset_t oss;

	bss = p->p_siglist & p->p_sigmask;
	osf1_cvt_sigset_from_native(&bss, &oss);

	return copyout(&oss, SCARG(uap, mask), sizeof(oss));
}

int
osf1_sys_sigprocmask(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_sigprocmask_args *uap = v;
	osf1_sigset_t oss;
	sigset_t bss;
	int error = 0;
	int s;

	if (SCARG(uap, oset) != NULL) {
		/* Fix the return value first if needed */
		osf1_cvt_sigset_from_native(&p->p_sigmask, &oss);
		if ((error = copyout(&oss, SCARG(uap, oset), sizeof(oss))) != 0)
			return error;
	}

	if (SCARG(uap, set) == NULL)
		/* Just examine */
		return 0;

	if ((error = copyin(SCARG(uap, set), &oss, sizeof(oss))) != 0)
		return error;

	osf1_cvt_sigset_to_native(&oss, &bss);

	s = splhigh();

	switch (SCARG(uap, how)) {
	case OSF1_SIG_BLOCK:
		p->p_sigmask |= bss & ~sigcantmask;
		break;

	case OSF1_SIG_UNBLOCK:
		p->p_sigmask &= ~bss;
		break;

	case OSF1_SIG_SETMASK:
		p->p_sigmask = bss & ~sigcantmask;
		break;

	default:
		error = EINVAL;
		break;
	}

	splx(s);

	return error;
}

int
osf1_sys_sigsuspend(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_sigsuspend_args *uap = v;
	osf1_sigset_t oss;
	sigset_t bss;
	struct sys_sigsuspend_args sa;
	int error;

	if ((error = copyin(SCARG(uap, ss), &oss, sizeof(oss))) != 0)
		return error;

	osf1_cvt_sigset_to_native(&oss, &bss);

	SCARG(&sa, mask) = bss;
	return sys_sigsuspend(p, &sa, retval);
}
#endif
@


1.10
log
@spl0() is not your friend, use splx() instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: osf1_signal.c,v 1.9 2000/08/04 15:47:55 ericj Exp $	*/
@


1.9
log
@
Merge in NetBSD changes. This now works for most statically compiled osf1
bins. Shared osf1 libs don't work quite yet.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d318 1
d336 1
a336 1
	(void) splhigh();
d356 1
a356 1
	(void) spl0();
@


1.8
log
@Granted this is #if 0'd out, but it should have a chance of compiling anyway
@
text
@d1 32
a32 1
/*	$OpenBSD: osf1_signal.c,v 1.7 1998/12/22 07:58:45 deraadt Exp $	*/
d48 1
d52 1
d54 6
a59 88
static void bsd_to_osf1_sigaction __P((const struct sigaction *bsa, 
				       struct osf1_sigaction *osa));
static void osf1_to_bsd_sigaction __P((const struct osf1_sigaction *osa,
				       struct sigaction *bsa));

#define sigemptyset(s)		bzero((s), sizeof(*(s)))
#define sigismember(s, n)	(*(s) & sigmask(n))
#define sigaddset(s, n)		(*(s) |= sigmask(n))

#define	osf1_sigmask(n)		(1 << ((n) - 1))
#define osf1_sigemptyset(s)	bzero((s), sizeof(*(s)))
#define osf1_sigismember(s, n)	(*(s) & sigmask(n))
#define osf1_sigaddset(s, n)	(*(s) |= sigmask(n))

int bsd_to_osf1_sig[] = {
	0,
	OSF1_SIGHUP,
	OSF1_SIGINT,
	OSF1_SIGQUIT,
	OSF1_SIGILL,
	OSF1_SIGTRAP,
	OSF1_SIGABRT,
	OSF1_SIGEMT,
	OSF1_SIGFPE,
	OSF1_SIGKILL,
	OSF1_SIGBUS,
	OSF1_SIGSEGV,
	OSF1_SIGSYS,
	OSF1_SIGPIPE,
	OSF1_SIGALRM,
	OSF1_SIGTERM,
	OSF1_SIGURG,
	OSF1_SIGSTOP,
	OSF1_SIGTSTP,
	OSF1_SIGCONT,
	OSF1_SIGCHLD,
	OSF1_SIGTTIN,
	OSF1_SIGTTOU,
	OSF1_SIGIO,
	OSF1_SIGXCPU,
	OSF1_SIGXFSZ,
	OSF1_SIGVTALRM,
	OSF1_SIGPROF,
	OSF1_SIGWINCH,
	OSF1_SIGINFO,
	OSF1_SIGUSR1,
	OSF1_SIGUSR2,
};

int osf1_to_bsd_sig[] = {
	0,
	SIGHUP,
	SIGINT,
	SIGQUIT,
	SIGILL,
	SIGTRAP,
	SIGABRT,
	SIGEMT,
	SIGFPE,
	SIGKILL,
	SIGBUS,
	SIGSEGV,
	SIGSYS,
	SIGPIPE,
	SIGALRM,
	SIGTERM,
	SIGURG,
	SIGSTOP,
	SIGTSTP,
	SIGCONT,
	SIGCHLD,
	SIGTTIN,
	SIGTTOU,
	SIGIO,
	SIGXCPU,
	SIGXFSZ,
	SIGVTALRM,
	SIGPROF,
	SIGWINCH,
	SIGINFO,
	SIGUSR1,
	SIGUSR2,
};

void
osf1_to_bsd_sigset(oss, bss)
	const osf1_sigset_t *oss;
	sigset_t *bss;
d61 2
a62 1
	int i, newsig;
d64 3
a66 111
	sigemptyset(bss);
	for (i = 1; i < OSF1_NSIG; i++) {
		if (osf1_sigismember(oss, i)) {
			newsig = osf1_to_bsd_sig[i];
			if (newsig)
				sigaddset(bss, newsig);
		}
	}
}


void
bsd_to_osf1_sigset(bss, oss)
	const sigset_t *bss;
	osf1_sigset_t *oss;
{
	int i, newsig;

	osf1_sigemptyset(oss);
	for (i = 1; i < NSIG; i++) {
		if (sigismember(bss, i)) {
			newsig = bsd_to_osf1_sig[i];
			if (newsig)
				osf1_sigaddset(oss, newsig);
		}
	}
}

/*
 * XXX: Only a subset of the flags is currently implemented.
 */
void
osf1_to_bsd_sigaction(osa, bsa)
	const struct osf1_sigaction *osa;
	struct sigaction *bsa;
{

	bsa->sa_handler = osa->sa__handler;
	osf1_to_bsd_sigset(&osa->sa_mask, &bsa->sa_mask);
	bsa->sa_flags = 0;
	if ((osa->sa_flags & OSF1_SA_ONSTACK) != 0)
		bsa->sa_flags |= SA_ONSTACK;
	if ((osa->sa_flags & OSF1_SA_RESTART) != 0)
		bsa->sa_flags |= SA_RESTART;
	if ((osa->sa_flags & OSF1_SA_RESETHAND) != 0)
		bsa->sa_flags |= SA_RESETHAND;
	if ((osa->sa_flags & OSF1_SA_NOCLDSTOP) != 0)
		bsa->sa_flags |= SA_NOCLDSTOP;
	if ((osa->sa_flags & OSF1_SA_NOCLDWAIT) != 0)
		bsa->sa_flags |= SA_NOCLDWAIT;
	if ((osa->sa_flags & OSF1_SA_NODEFER) != 0)
		bsa->sa_flags |= SA_NODEFER;
	if ((osa->sa_flags & OSF1_SA_SIGINFO) != 0)
		bsa->sa_flags |= SA_SIGINFO;
}

void
bsd_to_osf1_sigaction(bsa, osa)
	const struct sigaction *bsa;
	struct osf1_sigaction *osa;
{

	osa->sa__handler = bsa->sa_handler;
	bsd_to_osf1_sigset(&bsa->sa_mask, &osa->sa_mask);
	osa->sa_flags = 0;
	if ((bsa->sa_flags & SA_ONSTACK) != 0)
		osa->sa_flags |= OSF1_SA_ONSTACK;
	if ((bsa->sa_flags & SA_RESTART) != 0)
		osa->sa_flags |= OSF1_SA_RESTART;
	if ((bsa->sa_flags & SA_NOCLDSTOP) != 0)
		osa->sa_flags |= OSF1_SA_NOCLDSTOP;
	if ((bsa->sa_flags & SA_NOCLDWAIT) != 0)
		osa->sa_flags |= OSF1_SA_NOCLDWAIT;
	if ((bsa->sa_flags & SA_NODEFER) != 0)
		osa->sa_flags |= OSF1_SA_NODEFER;
	if ((bsa->sa_flags & SA_RESETHAND) != 0)
		osa->sa_flags |= OSF1_SA_RESETHAND;
	if ((bsa->sa_flags & SA_SIGINFO) != 0)
		osa->sa_flags |= OSF1_SA_SIGINFO;
}

void
osf1_to_bsd_sigaltstack(oss, bss)
	const struct osf1_sigaltstack *oss;
	struct sigaltstack *bss;
{

	bss->ss_sp = oss->ss_sp;
	bss->ss_size = oss->ss_size;
	bss->ss_flags = 0;

	if ((oss->ss_flags & OSF1_SS_DISABLE) != 0)
		bss->ss_flags |= SS_DISABLE;
	if ((oss->ss_flags & OSF1_SS_ONSTACK) != 0)
		bss->ss_flags |= SS_ONSTACK;
}

void
bsd_to_osf1_sigaltstack(bss, oss)
	const struct sigaltstack *bss;
	struct osf1_sigaltstack *oss;
{

	oss->ss_sp = bss->ss_sp;
	oss->ss_size = bss->ss_size;
	oss->ss_flags = 0;

	if ((bss->ss_flags & SS_DISABLE) != 0)
		oss->ss_flags |= OSF1_SS_DISABLE;
	if ((bss->ss_flags & SS_ONSTACK) != 0)
		oss->ss_flags |= OSF1_SS_ONSTACK;
d68 1
d76 1
a76 5
	struct osf1_sys_sigaction_args /* {
		syscallarg(int) signum;
		syscallarg(struct osf1_sigaction *) nsa;
		syscallarg(struct osf1_sigaction *) osa;
	} */ *uap = v;
a82 3
	if (SCARG(uap, signum) < 0 || SCARG(uap, signum) >= OSF1_NSIG)
		return (EINVAL);

d96 1
a96 1
		osf1_to_bsd_sigaction(&tmposa, &tmpbsa);
d102 1
a102 1
	SCARG(&sa, signum) = osf1_to_bsd_sig[SCARG(uap, signum)];
d106 1
d113 1
a113 1
		bsd_to_osf1_sigaction(&tmpbsa, &tmposa);
d123 1
a123 1
	register struct proc *p;
d127 1
a127 4
	struct osf1_sys_sigaltstack_args /* {
		syscallarg(struct osf1_sigaltstack *) nss;
		syscallarg(struct osf1_sigaltstack *) oss;
	} */ *uap = v;
d147 2
a148 1
		osf1_to_bsd_sigaltstack(&tmposs, &tmpbss);
d157 1
d164 1
a164 1
		bsd_to_osf1_sigaltstack(&tmpbss, &tmposs);
d175 1
a175 1
	register struct proc *p;
d179 3
a181 5
	struct osf1_sys_signal_args /* {
		syscallarg(int) signum;
		syscallarg(osf1_sig_t) handler;
	} */ *uap = v;
	int signum, error;
d184 1
a184 1
	if (SCARG(uap, signum) < 0 || SCARG(uap, signum) >= OSF1_NSIG)
a189 1
	int signum = osf1_to_bsd_sig[signum];
d293 16
d310 1
a310 1
	register struct proc *p;
d314 1
a314 5
	struct osf1_sys_sigprocmask_args /* {
		syscallarg(int) how;
		syscallarg(osf1_sigset_t *) set;
		syscallarg(osf1_sigset_t *) oset;
	} */ *uap = v;
d321 1
a321 1
		bsd_to_osf1_sigset(&p->p_sigmask, &oss);
d333 1
a333 1
	osf1_to_bsd_sigset(&oss, &bss);
a360 18
osf1_sys_sigpending(p, v, retval)
	register struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_sigpending_args /* {
		syscallarg(osf1_sigset_t *) mask;
	} */ *uap = v;
	sigset_t bss;
	osf1_sigset_t oss;

	bss = p->p_siglist & p->p_sigmask;
	bsd_to_osf1_sigset(&bss, &oss);

	return copyout(&oss, SCARG(uap, mask), sizeof(oss));
}

int
d362 1
a362 1
	register struct proc *p;
d366 1
a366 3
	struct osf1_sys_sigsuspend_args /* {
		syscallarg(osf1_sigset_t *) ss;
	} */ *uap = v;
d375 1
a375 1
	osf1_to_bsd_sigset(&oss, &bss);
a378 19
}

int
osf1_sys_kill(p, v, retval)
	register struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_kill_args /* {
		syscallarg(int) pid;
		syscallarg(int) signum;
	} */ *uap = v;
	struct sys_kill_args ka;

	if (SCARG(uap, signum) < 0 || SCARG(uap, signum) >= OSF1_NSIG)
		return (EINVAL);
	SCARG(&ka, pid) = SCARG(uap, pid);
	SCARG(&ka, signum) = osf1_to_bsd_sig[SCARG(uap, signum)];
	return sys_kill(p, &ka, retval);
@


1.8.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 32
/*	$OpenBSD: osf1_signal.c,v 1.9 2000/08/04 15:47:55 ericj Exp $	*/
/*	$NetBSD: osf1_signal.c,v 1.15 1999/05/05 00:57:43 cgd Exp $	*/

/*
 * Copyright (c) 1999 Christopher G. Demetriou.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
a16 1
#include <compat/osf1/osf1.h>
a19 1
#include <compat/osf1/osf1_cvt.h>
d21 192
a212 6
#if 0
int
osf1_sys_kill(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
a213 2
	struct osf1_sys_kill_args *uap = v;
	struct sys_kill_args ka;
d215 8
a222 3
	SCARG(&ka, pid) = SCARG(uap, pid);
	SCARG(&ka, signum) = osf1_signal_xlist[SCARG(uap, signum)];
	return sys_kill(p, &ka, retval);
a223 1
#endif
d231 5
a235 1
	struct osf1_sys_sigaction_args *uap = v;
d242 3
d258 1
a258 1
		osf1_cvt_sigaction_to_native(&tmposa, &tmpbsa);
d264 1
a264 1
	SCARG(&sa, signum) = osf1_signal_xlist[SCARG(uap, signum)];
a267 1
	/* XXX */
d274 1
a274 1
		osf1_cvt_sigaction_from_native(&tmpbsa, &tmposa);
d284 1
a284 1
	struct proc *p;
d288 4
a291 1
	struct osf1_sys_sigaltstack_args *uap = v;
d311 1
a311 2
		if ((error = osf1_cvt_sigaltstack_to_native(&tmposs, &tmpbss)) != 0)
			return error;
a319 1
	/* XXX */
d326 1
a326 1
		osf1_cvt_sigaltstack_from_native(&tmpbss, &tmposs);
d337 1
a337 1
	struct proc *p;
d341 5
a345 3
	struct osf1_sys_signal_args *uap = v;
	int signum = osf1_signal_xlist[OSF1_SIGNO(SCARG(uap, signum))];
	int error;
d348 1
a348 1
	if (signum <= 0 || signum >= OSF1_NSIG) {
d354 1
a457 16
osf1_sys_sigpending(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_sigpending_args *uap = v;
	sigset_t bss;
	osf1_sigset_t oss;

	bss = p->p_siglist & p->p_sigmask;
	osf1_cvt_sigset_from_native(&bss, &oss);

	return copyout(&oss, SCARG(uap, mask), sizeof(oss));
}

int
d459 1
a459 1
	struct proc *p;
d463 5
a467 1
	struct osf1_sys_sigprocmask_args *uap = v;
d474 1
a474 1
		osf1_cvt_sigset_from_native(&p->p_sigmask, &oss);
d486 1
a486 1
	osf1_cvt_sigset_to_native(&oss, &bss);
d514 18
d533 1
a533 1
	struct proc *p;
d537 3
a539 1
	struct osf1_sys_sigsuspend_args *uap = v;
d548 1
a548 1
	osf1_cvt_sigset_to_native(&oss, &bss);
d552 19
@


1.7
log
@range check signal [] conversions
@
text
@d1 1
a1 1
/*	$OpenBSD: osf1_signal.c,v 1.6 1998/02/17 01:48:07 millert Exp $	*/
d348 1
a348 2
	int signum = OSF1_SIGNO(SCARG(uap, signum));
	if (signum < 0 || signum >= OSF1_NSIG) {
@


1.6
log
@make COMPAT_OSF1 compile again
@
text
@d1 1
a1 1
/*	$OpenBSD: osf1_signal.c,v 1.5 1997/09/15 06:09:58 millert Exp $	*/
d242 3
d345 1
a345 2
	int signum = osf1_to_bsd_sig[OSF1_SIGNO(SCARG(uap, signum))];
	int error;
d348 2
a349 1
	if (signum <= 0 || signum >= OSF1_NSIG) {
d355 1
d567 2
@


1.5
log
@SA_NOCLDWAIT
@
text
@d1 1
a1 1
/*	$OpenBSD: osf1_signal.c,v 1.4 1997/09/15 03:01:47 deraadt Exp $	*/
d149 1
a149 1
	bsa->sa_handler = osa->sa_handler;
d174 1
a174 1
	osa->sa_handler = bsa->sa_handler;
@


1.4
log
@Fix bsd_to_*_sigaction(). Also add SA_SIGINFO support
@
text
@d1 1
a1 1
/*	$OpenBSD: osf1_signal.c,v 1.3 1996/08/02 20:35:26 niklas Exp $	*/
d160 2
d183 2
@


1.3
log
@Added Makefiles to build stuff from syscalls.master in some emulations.
Regenerated derived files from various syscalls.master files. Added $OpenBSD$.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d162 2
d176 1
a176 1
		osa->sa_flags |= SA_ONSTACK;
d178 1
a178 1
		osa->sa_flags |= SA_RESTART;
d180 1
a180 1
		osa->sa_flags |= SA_NOCLDSTOP;
d182 1
a182 1
		osa->sa_flags |= SA_NODEFER;
d184 3
a186 1
		osa->sa_flags |= SA_RESETHAND;
@


1.2
log
@ss_sp is correct, ss_base is not. noticed by agc@@sde.uts.amdahl.com; netbsd pr#1784
@
text
@d1 2
@


1.1
log
@Initial revision
@
text
@d189 1
a189 1
	bss->ss_base = oss->ss_sp;
d205 1
a205 1
	oss->ss_sp = bss->ss_base;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
