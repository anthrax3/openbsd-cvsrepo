head	1.9;
access;
symbols
	OPENBSD_4_7:1.8.0.32
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.34
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.30
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.28
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.26
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.24
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.22
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.20
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.18
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.16
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.14
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.12
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.10
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.8
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	SMP:1.6.0.2
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.4
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2010.06.30.20.39.28;	author tedu;	state dead;
branches;
next	1.8;

1.8
date	2002.02.13.19.08.06;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.26.12.03.27;	author art;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.05.14.13.28.23;	author art;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2001.05.14.12.11.54;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.14.11.04.05;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.14.11.00.23;	author art;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.14.10.59.09;	author art;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.04.15.47.54;	author ericj;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2001.05.31.05.08.34;	author jason;	state Exp;
branches;
next	;

1.6.2.1
date	2001.05.14.22.05.05;	author niklas;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2001.07.04.10.39.38;	author niklas;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2001.10.31.03.11.46;	author nate;	state Exp;
branches;
next	1.6.2.4;

1.6.2.4
date	2002.03.06.02.07.08;	author niklas;	state Exp;
branches;
next	;

1.7.2.1
date	2002.06.11.03.28.08;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@delete osf1 compat files
@
text
@/* $OpenBSD: osf1_descrip.c,v 1.8 2002/02/13 19:08:06 art Exp $ */
/* $NetBSD: osf1_descrip.c,v 1.5 1999/06/26 01:24:41 cgd Exp $ */

/*
 * Copyright (c) 1999 Christopher G. Demetriou.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou
 *	for the NetBSD Project.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1994, 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Chris G. Demetriou
 * 
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 * 
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" 
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND 
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 * 
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/namei.h>
#include <sys/proc.h>
#include <sys/file.h>
#include <sys/stat.h>
#include <sys/filedesc.h>
#include <sys/kernel.h>
#include <sys/malloc.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/signal.h>
#include <sys/signalvar.h>
#include <sys/reboot.h>
#include <sys/syscallargs.h>
#include <sys/exec.h>
#include <sys/vnode.h>
#include <sys/socketvar.h>
#include <sys/resource.h>
#include <sys/resourcevar.h>
#include <sys/wait.h>

#include <compat/osf1/osf1.h>
#include <compat/osf1/osf1_syscallargs.h>
#include <compat/osf1/osf1_cvt.h>

int
osf1_sys_fcntl(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_fcntl_args *uap = v;
	struct sys_fcntl_args a;
	struct osf1_flock oflock;
	struct flock nflock;
	unsigned long xfl, leftovers;
	caddr_t sg;
	int error;

	sg = stackgap_init(p->p_emul);

	SCARG(&a, fd) = SCARG(uap, fd);

	leftovers = 0;
	switch (SCARG(uap, cmd)) {
	case OSF1_F_DUPFD:
		SCARG(&a, cmd) = F_DUPFD;
		SCARG(&a, arg) = SCARG(uap, arg);
		break;

	case OSF1_F_GETFD:
		SCARG(&a, cmd) = F_GETFD;
		SCARG(&a, arg) = 0;		/* ignored */
		break;

	case OSF1_F_SETFD:
		SCARG(&a, cmd) = F_SETFD;
		SCARG(&a, arg) = (void *)emul_flags_translate(
		    osf1_fcntl_getsetfd_flags_xtab,
		    (unsigned long)SCARG(uap, arg), &leftovers);
		break;

	case OSF1_F_GETFL:
		SCARG(&a, cmd) = F_GETFL;
		SCARG(&a, arg) = 0;		/* ignored */
		break;

	case OSF1_F_SETFL:
		SCARG(&a, cmd) = F_SETFL;
		xfl = emul_flags_translate(osf1_open_flags_xtab,
		    (unsigned long)SCARG(uap, arg), &leftovers);
		xfl |= emul_flags_translate(osf1_fcntl_getsetfl_flags_xtab,
		    leftovers, &leftovers);
		SCARG(&a, arg) = (void *)xfl;
		break;

	case OSF1_F_GETOWN:		/* XXX not yet supported */
	case OSF1_F_SETOWN:		/* XXX not yet supported */
		/* XXX translate. */
		return (EINVAL);
		
	case OSF1_F_GETLK:
	case OSF1_F_SETLK:
	case OSF1_F_SETLKW:
		if (SCARG(uap, cmd) == OSF1_F_GETLK)
			SCARG(&a, cmd) = F_GETLK;
		else if (SCARG(uap, cmd) == OSF1_F_SETLK)
			SCARG(&a, cmd) = F_SETLK;
		else if (SCARG(uap, cmd) == OSF1_F_SETLKW)
			SCARG(&a, cmd) = F_SETLKW;
		SCARG(&a, arg) = stackgap_alloc(&sg, sizeof nflock);

		error = copyin(SCARG(uap, arg), &oflock, sizeof oflock);
		if (error == 0)
			error = osf1_cvt_flock_to_native(&oflock, &nflock);
		if (error == 0)
			error = copyout(&nflock, SCARG(&a, arg),
			    sizeof nflock);
		if (error != 0)
			return (error);
		break;
		
	case OSF1_F_RGETLK:		/* [lock mgr op] XXX not supported */
	case OSF1_F_RSETLK:		/* [lock mgr op] XXX not supported */
	case OSF1_F_CNVT:		/* [lock mgr op] XXX not supported */
	case OSF1_F_RSETLKW:		/* [lock mgr op] XXX not supported */
	case OSF1_F_PURGEFS:		/* [lock mgr op] XXX not supported */
	case OSF1_F_PURGENFS:		/* [DECsafe op] XXX not supported */
	default:
		/* XXX syslog? */
		return (EINVAL);
	}
	if (leftovers != 0)
		return (EINVAL);

	error = sys_fcntl(p, &a, retval);

	if (error)
		return error;

	switch (SCARG(uap, cmd)) {
	case OSF1_F_GETFD:
		retval[0] = emul_flags_translate(
		    osf1_fcntl_getsetfd_flags_rxtab, retval[0], NULL);
		break;

	case OSF1_F_GETFL:
		xfl = emul_flags_translate(osf1_open_flags_rxtab,
		    retval[0], &leftovers);
		xfl |= emul_flags_translate(osf1_fcntl_getsetfl_flags_rxtab,
		    leftovers, NULL);
		retval[0] = xfl;
		break;

	case OSF1_F_GETLK:
		error = copyin(SCARG(&a, arg), &nflock, sizeof nflock);
		if (error == 0) {
			osf1_cvt_flock_from_native(&nflock, &oflock);
			error = copyout(&oflock, SCARG(uap, arg),
			    sizeof oflock);
		}
		break;
	}

	return error;
}

int
osf1_sys_fpathconf(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_fpathconf_args *uap = v;
	struct sys_fpathconf_args a;
	int error;

	SCARG(&a, fd) = SCARG(uap, fd);

	error = osf1_cvt_pathconf_name_to_native(SCARG(uap, name),
	    &SCARG(&a, name));

	if (error == 0)
		error = sys_fpathconf(p, &a, retval);

	return (error);
}

/*
 * Return status information about a file descriptor.
 */
int
osf1_sys_fstat(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_fstat_args *uap = v;
	struct filedesc *fdp = p->p_fd;
	struct file *fp;
	struct stat ub;
	struct osf1_stat oub;
	int error;

	if ((fp = fd_getfile(fdp, SCARG(uap, fd))) == NULL)
		return (EBADF);

	FREF(fp);
	error = (*fp->f_ops->fo_stat)(fp, &ub, p);
	FRELE(fp);
	osf1_cvt_stat_from_native(&ub, &oub);
	if (error == 0)
		error = copyout((caddr_t)&oub, (caddr_t)SCARG(uap, sb),
		    sizeof (oub));

	return (error);
}

int
osf1_sys_ftruncate(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_ftruncate_args *uap = v;
	struct sys_ftruncate_args a;

	SCARG(&a, fd) = SCARG(uap, fd);
	SCARG(&a, pad) = 0;
	SCARG(&a, length) = SCARG(uap, length);

	return sys_ftruncate(p, &a, retval);
}

int
osf1_sys_lseek(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct osf1_sys_lseek_args *uap = v;
	struct sys_lseek_args a;

	SCARG(&a, fd) = SCARG(uap, fd);
	SCARG(&a, pad) = 0;
	SCARG(&a, offset) = SCARG(uap, offset);
	SCARG(&a, whence) = SCARG(uap, whence);

	return sys_lseek(p, &a, retval);
}
@


1.8
log
@More FREF/FRELE on relevant places. Now, only sys_mmap and a bunch of ioctl functions in sys/compat are left.
@
text
@d1 1
a1 1
/* $OpenBSD: osf1_descrip.c,v 1.7 2001/10/26 12:03:27 art Exp $ */
@


1.7
log
@ - every new fd created by falloc() is marked as larval and should not be used
   any anyone. Every caller of falloc matures the fd when it's usable.
 - Since every lookup in the fd table must now check this flag and all of
   them do the same thing, move all the necessary checks into a function -
   fd_getfile.
@
text
@d1 1
a1 1
/* $OpenBSD: osf1_descrip.c,v 1.6 2001/05/14 13:28:23 art Exp $ */
d249 1
d251 1
@


1.7.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/* $OpenBSD: osf1_descrip.c,v 1.7 2001/10/26 12:03:27 art Exp $ */
a248 1
	FREF(fp);
a249 1
	FRELE(fp);
@


1.6
log
@use fo_stat in fileops instead of huge switch statements.
@
text
@d1 1
a1 1
/* $OpenBSD: osf1_descrip.c,v 1.5 2001/05/14 12:11:54 art Exp $ */
d246 1
a246 4
	/* XXX */
	if ((unsigned)SCARG(uap, fd) >= fdp->fd_nfiles ||
	    (fp = fdp->fd_ofiles[SCARG(uap, fd)]) == NULL) /* ||
	    (fp->f_iflags & FIF_WANTCLOSE) != 0) */
@


1.6.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/* $OpenBSD: osf1_descrip.c,v 1.1 2000/08/04 15:47:54 ericj Exp $ */
d252 1
a252 14
	switch (fp->f_type) {

	case DTYPE_VNODE:
		error = vn_stat((struct vnode *)fp->f_data, &ub, p);
		break;

	case DTYPE_SOCKET:
		error = soo_stat((struct socket *)fp->f_data, &ub);
		break;

	default:
		panic("ofstat");
		/*NOTREACHED*/
	}
@


1.6.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/* $OpenBSD: osf1_descrip.c,v 1.6.2.1 2001/05/14 22:05:05 niklas Exp $ */
d252 14
a265 1
	error = (*fp->f_ops->fo_stat)(fp, &ub, p);
@


1.6.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/* $OpenBSD: osf1_descrip.c,v 1.6.2.2 2001/07/04 10:39:38 niklas Exp $ */
d246 4
a249 1
	if ((fp = fd_getfile(fdp, SCARG(uap, fd))) == NULL)
@


1.6.2.4
log
@Merge in trunk
@
text
@d1 1
a1 1
/* $OpenBSD$ */
a248 1
	FREF(fp);
a249 1
	FRELE(fp);
@


1.5
log
@Implement a wrapper round vn_stat that takes the same arguments
as soo_stat and pipe_stat.
@
text
@d1 1
a1 1
/* $OpenBSD: osf1_descrip.c,v 1.4 2001/05/14 11:04:05 art Exp $ */
d252 1
a252 20
	switch (fp->f_type) {

	case DTYPE_VNODE:
		error = vn_statfile(fp, &ub, p);
		break;

	case DTYPE_SOCKET:
		error = soo_stat(fp, &ub, p);
		break;

#ifndef OLD_PIPE
	case DTYPE_PIPE:
		error = pipe_stat(fp, &sb, p);
		break;
#endif

	default:
		panic("osf1_sys_fstat");
		/*NOTREACHED*/
	}
@


1.4
log
@More generic arguments to soo_stat.
@
text
@d1 1
a1 1
/* $OpenBSD: osf1_descrip.c,v 1.3 2001/05/14 11:00:23 art Exp $ */
d255 1
a255 1
		error = vn_stat((struct vnode *)fp->f_data, &ub, p);
@


1.3
log
@Fix panic message
@
text
@d1 1
a1 1
/* $OpenBSD: osf1_descrip.c,v 1.2 2001/05/14 10:59:09 art Exp $ */
d259 1
a259 1
		error = soo_stat((struct socket *)fp->f_data, &ub);
@


1.2
log
@Ehmm. add support for new pipes to stat.
There is no possibility that this has worked at all.
@
text
@d1 1
a1 1
/* $OpenBSD: osf1_descrip.c,v 1.1 2000/08/04 15:47:54 ericj Exp $ */
d269 1
a269 1
		panic("ofstat");
@


1.1
log
@
Merge in NetBSD changes. This now works for most statically compiled osf1
bins. Shared osf1 libs don't work quite yet.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d261 6
@


1.1.4.1
log
@Fix (art):
don't panic on kqueue.
@
text
@d1 1
a1 1
/* $OpenBSD: osf1_descrip.c,v 1.1 2000/08/04 15:47:54 ericj Exp $ */
d263 2
a264 1
		return (EOPNOTSUPP);
@


