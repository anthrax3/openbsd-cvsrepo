head	1.16;
access;
symbols
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.15.0.10
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.8
	OPENBSD_3_4_BASE:1.15
	UBC_SYNC_A:1.15
	OPENBSD_3_3:1.15.0.6
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.4
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	UBC_SYNC_B:1.15
	UBC:1.14.0.2
	UBC_BASE:1.14
	OPENBSD_3_0:1.12.0.2
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.8
	OPENBSD_2_8:1.11.0.6
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.4
	OPENBSD_2_7_BASE:1.11
	SMP:1.11.0.2
	SMP_BASE:1.11
	kame_19991208:1.11
	OPENBSD_2_6:1.9.0.10
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.8
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.6
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.4
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.9.0.2
	OPENBSD_2_2_BASE:1.9
	OPENBSD_2_1:1.8.0.2
	OPENBSD_2_1_BASE:1.8
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5;
locks; strict;
comment	@ * @;


1.16
date	2004.07.09.21.33.44;	author mickey;	state dead;
branches;
next	1.15;

1.15
date	2002.03.14.01.26.49;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.15.06.22.29;	author art;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.11.23.21.14;	author art;	state Exp;
branches;
next	1.11;

1.11
date	99.11.26.16.44.27;	author art;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	99.11.10.15.55.21;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	97.06.17.11.11.08;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.03.26.08.11.06;	author downsj;	state Exp;
branches;
next	1.7;

1.7
date	97.02.23.21.40.56;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	96.12.23.02.56.48;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.08.31.09.24.01;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	96.08.25.12.19.48;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.02.20.34.54;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.01.07.13.53.37;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.04.47.11;	author deraadt;	state Exp;
branches;
next	;

1.11.2.1
date	2001.10.31.03.11.46;	author nate;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2001.11.13.21.05.47;	author niklas;	state Exp;
branches;
next	1.11.2.3;

1.11.2.3
date	2001.12.05.00.43.28;	author niklas;	state Exp;
branches;
next	1.11.2.4;

1.11.2.4
date	2002.03.28.11.28.06;	author niklas;	state Exp;
branches;
next	;

1.14.2.1
date	2002.06.11.03.28.07;	author art;	state Exp;
branches;
next	;


desc
@@


1.16
log
@split off the m68k-specific parts
@
text
@/*	$OpenBSD: hpux_exec.c,v 1.15 2002/03/14 01:26:49 millert Exp $	*/
/*	$NetBSD: hpux_exec.c,v 1.8 1997/03/16 10:14:44 thorpej Exp $	*/

/*
 * Copyright (c) 1995, 1997 Jason R. Thorpe.  All rights reserved.
 * Copyright (c) 1993, 1994 Christopher G. Demetriou
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *	This product includes software developed by Christopher G. Demetriou.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Glue for exec'ing HP-UX executables and the HP-UX execv() system call.
 * Based on sys/kern/exec_aout.c
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/malloc.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/user.h>
#include <sys/vnode.h>
#include <sys/mman.h>
#include <sys/stat.h>

#include <uvm/uvm_extern.h>

#include <machine/cpu.h>
#include <machine/reg.h>

#include <sys/syscallargs.h>    

#include <compat/hpux/hpux.h>
#include <compat/hpux/hpux_util.h>
#include <compat/hpux/hpux_syscall.h>
#include <compat/hpux/hpux_syscallargs.h>

#include <machine/hpux_machdep.h>

const char hpux_emul_path[] = "/emul/hpux";
extern char sigcode[], esigcode[];
extern struct sysent hpux_sysent[];
#ifdef SYSCALL_DEBUG
extern char *hpux_syscallnames[];
#endif
extern int bsdtohpuxerrnomap[];

static	int exec_hpux_prep_nmagic(struct proc *, struct exec_package *);
static	int exec_hpux_prep_zmagic(struct proc *, struct exec_package *);
static	int exec_hpux_prep_omagic(struct proc *, struct exec_package *);

struct emul emul_hpux = {
	"hpux",
	bsdtohpuxerrnomap,
	hpux_sendsig,
	HPUX_SYS_syscall,
	HPUX_SYS_MAXSYSCALL,
	hpux_sysent,
#ifdef SYSCALL_DEBUG
	hpux_syscallnames,
#else
	NULL,
#endif
	0,
	copyargs,
	hpux_setregs,
	NULL,
	sigcode,
	esigcode,
};

int
exec_hpux_makecmds(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	struct hpux_exec *hpux_ep = epp->ep_hdr;
	short sysid, magic;
	int error = ENOEXEC;

	magic = HPUX_MAGIC(hpux_ep);
	sysid = HPUX_SYSID(hpux_ep);

	/*
	 * XXX This will lose if there's ever an hp700 port.
	 */
	if (sysid != MID_HPUX)
		return (ENOEXEC);

	/*
	 * HP-UX is a 4k page size system, and executables assume
	 * this.
	 */
	if (PAGE_SIZE != HPUX_LDPGSZ)
		return (ENOEXEC);

	switch (magic) {
	case OMAGIC:
		error = exec_hpux_prep_omagic(p, epp);
		break;

	case NMAGIC:
		error = exec_hpux_prep_nmagic(p, epp);
		break;

	case ZMAGIC:
		error = exec_hpux_prep_zmagic(p, epp);
		break;
	}

	if (error == 0) {
		/* set up our emulation information */
		epp->ep_emul = &emul_hpux;
	} else
		kill_vmcmds(&epp->ep_vmcmds);

	return (error);
}

static int
exec_hpux_prep_nmagic(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	struct hpux_exec *execp = epp->ep_hdr;
	long bsize, baddr;

	epp->ep_taddr = 0;
	epp->ep_tsize = execp->ha_text;
	epp->ep_daddr = epp->ep_taddr + roundup(execp->ha_text, HPUX_LDPGSZ);
	epp->ep_dsize = execp->ha_data + execp->ha_bss;
	epp->ep_entry = execp->ha_entry;

	/* set up command for text segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_readvn, execp->ha_text,
	    epp->ep_taddr, epp->ep_vp, HPUX_TXTOFF(*execp, NMAGIC),
	    VM_PROT_READ|VM_PROT_EXECUTE);

	/* set up command for data segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_readvn, execp->ha_data,
	    epp->ep_daddr, epp->ep_vp, HPUX_DATAOFF(*execp, NMAGIC),
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/* set up command for bss segment */
	baddr = round_page(epp->ep_daddr + execp->ha_data);
	bsize = epp->ep_daddr + epp->ep_dsize - baddr;
	if (bsize > 0)
		NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, bsize, baddr,
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	return (exec_setup_stack(p, epp));
}

static int
exec_hpux_prep_zmagic(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	struct hpux_exec *execp = epp->ep_hdr;
	long bsize, baddr;
	long nontext;

	/*
	 * Check if vnode is in open for writing, because we want to
	 * demand-page out of it.  If it is, don't do it, for various
	 * reasons.
	 */
	if ((execp->ha_text != 0 || execp->ha_data != 0) &&
	    epp->ep_vp->v_writecount != 0)
		return (ETXTBSY);
	vn_marktext(epp->ep_vp);

	/*
	 * HP-UX ZMAGIC executables need to have their segment
	 * sizes frobbed.
	 */
	nontext = execp->ha_data + execp->ha_bss;
	execp->ha_text = ctob(btoc(execp->ha_text));
	execp->ha_data = ctob(btoc(execp->ha_data));
	execp->ha_bss = nontext - execp->ha_data;
	if (execp->ha_bss < 0)
		execp->ha_bss = 0;

	epp->ep_taddr = 0;
	epp->ep_tsize = execp->ha_text;
	epp->ep_daddr = epp->ep_taddr + roundup(execp->ha_text, HPUX_LDPGSZ);
	epp->ep_dsize = execp->ha_data + execp->ha_bss;
	epp->ep_entry = execp->ha_entry;

	/* set up command for text segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_pagedvn, execp->ha_text,
	    epp->ep_taddr, epp->ep_vp, HPUX_TXTOFF(*execp, ZMAGIC),
	    VM_PROT_READ|VM_PROT_EXECUTE);

	/* set up command for data segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_pagedvn, execp->ha_data,
	    epp->ep_daddr, epp->ep_vp, HPUX_DATAOFF(*execp, ZMAGIC),
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/* set up command for bss segment */
	baddr = round_page(epp->ep_daddr + execp->ha_data);
	bsize = epp->ep_daddr + epp->ep_dsize - baddr;
	if (bsize > 0)
		NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, bsize, baddr,
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	return (exec_setup_stack(p, epp));
}

/*
 * HP-UX's version of OMAGIC.
 */
static int
exec_hpux_prep_omagic(p, epp)
	struct proc *p;
	struct exec_package *epp;
{
	struct hpux_exec *execp = epp->ep_hdr;
	long dsize, bsize, baddr;

	epp->ep_taddr = 0;
	epp->ep_tsize = execp->ha_text;
	epp->ep_daddr = epp->ep_taddr + roundup(execp->ha_text, HPUX_LDPGSZ);
	epp->ep_dsize = execp->ha_data + execp->ha_bss;
	epp->ep_entry = execp->ha_entry;

	/* set up command for text and data segments */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_readvn,
	    execp->ha_text + execp->ha_data, epp->ep_taddr, epp->ep_vp,
	    HPUX_TXTOFF(*execp, OMAGIC),
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/* set up command for bss segment */
	baddr = round_page(epp->ep_daddr + execp->ha_data);
	bsize = epp->ep_daddr + epp->ep_dsize - baddr;
	if (bsize > 0)
		NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, bsize, baddr,
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/*
	 * Make sure (# of pages) mapped above equals (vm_tsize + vm_dsize);
	 * obreak(2) relies on this fact. Both `vm_tsize' and `vm_dsize' are
	 * computed (in execve(2)) by rounding *up* `ep_tsize' and `ep_dsize'
	 * respectively to page boundaries.
	 * Compensate `ep_dsize' for the amount of data covered by the last
	 * text page.
	 */
	dsize = epp->ep_dsize + execp->ha_text - round_page(execp->ha_text);
	epp->ep_dsize = (dsize > 0) ? dsize : 0;
	return (exec_setup_stack(p, epp));
}

/*
 * The HP-UX execv(2) system call.
 *
 * Just check the alternate emulation path, and pass it on to the NetBSD
 * execve().
 */
int
hpux_sys_execv(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct hpux_sys_execv_args /* {
		syscallarg(char *) path;
		syscallarg(char **) argv;
	} */ *uap = v;
	struct sys_execve_args ap;
	caddr_t sg;

	sg = stackgap_init(p->p_emul);
	HPUX_CHECK_ALT_EXIST(p, &sg, SCARG(uap, path));

	SCARG(&ap, path) = SCARG(uap, path);
	SCARG(&ap, argp) = SCARG(uap, argp);
	SCARG(&ap, envp) = NULL;

	return sys_execve(p, &ap, retval);
}

int
hpux_sys_execve(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct hpux_sys_execve_args /* {
		syscallarg(char *) path;
		syscallarg(char **) argv;
		syscallarg(char **) envp;
        } */ *uap = v;
	struct sys_execve_args ap;
	caddr_t sg;

	sg = stackgap_init(p->p_emul);
	HPUX_CHECK_ALT_EXIST(p, &sg, SCARG(uap, path));

	SCARG(&ap, path) = SCARG(uap, path);
	SCARG(&ap, argp) = SCARG(uap, argp);
	SCARG(&ap, envp) = SCARG(uap, envp);

	return (sys_execve(p, &ap, retval));
}
@


1.15
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.14 2001/11/15 06:22:29 art Exp $	*/
@


1.14
log
@New function vn_marktext - mark a vnode as executing a text image.
Use where VTEXT was set in vnode flags before. Doesn't do anything else (yet).
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.13 2001/11/06 19:53:17 miod Exp $	*/
d72 3
a74 3
static	int exec_hpux_prep_nmagic __P((struct proc *, struct exec_package *));
static	int exec_hpux_prep_zmagic __P((struct proc *, struct exec_package *));
static	int exec_hpux_prep_omagic __P((struct proc *, struct exec_package *));
@


1.14.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.14 2001/11/15 06:22:29 art Exp $	*/
d72 3
a74 3
static	int exec_hpux_prep_nmagic(struct proc *, struct exec_package *);
static	int exec_hpux_prep_zmagic(struct proc *, struct exec_package *);
static	int exec_hpux_prep_omagic(struct proc *, struct exec_package *);
@


1.13
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.12 2001/08/11 23:21:14 art Exp $	*/
d195 1
a195 1
	epp->ep_vp->v_flag |= VTEXT;
@


1.12
log
@Unnecessary and redundant includes.
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.11 1999/11/26 16:44:27 art Exp $	*/
d50 1
a50 1
#include <vm/vm.h>
@


1.11
log
@Use round_page(X) instead of roundup(X, NBPG), use PAGE_SIZE instead of NBPG.
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.10 1999/11/10 15:55:21 mickey Exp $	*/
a50 2
#include <vm/vm_param.h>
#include <vm/vm_map.h>
@


1.11.2.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.11 1999/11/26 16:44:27 art Exp $	*/
d51 2
@


1.11.2.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 1
a50 1
#include <uvm/uvm_extern.h>
@


1.11.2.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.11.2.2 2001/11/13 21:05:47 niklas Exp $	*/
d195 1
a195 1
	vn_marktext(epp->ep_vp);
@


1.11.2.4
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d72 3
a74 3
static	int exec_hpux_prep_nmagic(struct proc *, struct exec_package *);
static	int exec_hpux_prep_zmagic(struct proc *, struct exec_package *);
static	int exec_hpux_prep_omagic(struct proc *, struct exec_package *);
@


1.10
log
@include syscallnames only if compiling w/ SYSCALL_DEBUG.
was already so for native and sunos, the rest was just
wasting space on it. niels@@ millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.9 1997/06/17 11:11:08 deraadt Exp $	*/
d120 1
a120 1
	if (NBPG != HPUX_LDPGSZ)
d171 1
a171 1
	baddr = roundup(epp->ep_daddr + execp->ha_data, NBPG);
d227 1
a227 1
	baddr = roundup(epp->ep_daddr + execp->ha_data, NBPG);
d260 1
a260 1
	baddr = roundup(epp->ep_daddr + execp->ha_data, NBPG);
d274 1
a274 1
	dsize = epp->ep_dsize + execp->ha_text - roundup(execp->ha_text, NBPG);
@


1.9
log
@careful with stackgap handling in execve()
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.8 1997/03/26 08:11:06 downsj Exp $	*/
d69 1
d71 1
d85 1
d87 3
@


1.8
log
@Merge in NetBSD changes as if 3/19/97, undo some of ours.
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.7 1997/02/23 21:40:56 downsj Exp $	*/
d308 7
a314 1
	struct hpux_sys_execve_args *uap = v;
d316 1
a316 1
	caddr_t sg = stackgap_init(p->p_emul);
d319 5
a323 1
	return (sys_execve(p, (struct sys_execve_args *)&uap, retval));
@


1.7
log
@sigcode -> hpux_sigcode
@
text
@d1 2
a2 2
/*	$OpenBSD: hpux_exec.c,v 1.6 1996/12/23 02:56:48 deraadt Exp $	*/
/*	$NetBSD: hpux_exec.c,v 1.3 1996/01/06 12:44:13 thorpej Exp $	*/
d5 1
a5 1
 * Copyright (c) 1995 Jason R. Thorpe.  All rights reserved.
d67 1
a67 1
extern char hpux_sigcode[], hpux_esigcode[];
d79 1
a79 1
	sendsig,
d86 1
a86 1
	setregs,
d88 2
a89 2
	hpux_sigcode,
	hpux_esigcode,
d110 7
d150 1
a150 1
	epp->ep_daddr = epp->ep_taddr + roundup(execp->ha_text, HPUX__LDPGSZ);
a181 1
	int (*vm_func) __P((struct proc *, struct exec_vmcmd *));
d206 1
a206 1
	epp->ep_daddr = epp->ep_taddr + roundup(execp->ha_text, HPUX__LDPGSZ);
a209 9
	/*
	 * If our __LDPGSZ doesn't match HP-UX's, we can't demand-page
	 * the executable.
	 */
	if (__LDPGSZ == HPUX__LDPGSZ)
		vm_func = vmcmd_map_pagedvn;
	else
		vm_func = vmcmd_map_readvn;

d211 1
a211 1
	NEW_VMCMD(&epp->ep_vmcmds, vm_func, execp->ha_text,
d216 1
a216 1
	NEW_VMCMD(&epp->ep_vmcmds, vm_func, execp->ha_data,
d243 1
a243 1
	epp->ep_daddr = epp->ep_taddr + roundup(execp->ha_text, HPUX__LDPGSZ);
@


1.6
log
@use _{NLIST,KERN}_DO_{AOUT,ELF,ECOFF} to select binary types
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.5 1996/08/31 09:24:01 pefo Exp $	*/
d67 1
a67 1
extern char sigcode[], esigcode[];
d88 2
a89 2
	sigcode,
	esigcode,
@


1.5
log
@Cleanup exec
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.4 1996/08/25 12:19:48 deraadt Exp $	*/
d164 1
a164 1
	return (exec_aout_setup_stack(p, epp));
d230 1
a230 1
	return (exec_aout_setup_stack(p, epp));
d273 1
a273 1
	return (exec_aout_setup_stack(p, epp));
@


1.4
log
@route execve via compat filename translation
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.3 1996/08/02 20:34:54 niklas Exp $	*/
d87 1
@


1.3
log
@Added Makefiles to build stuff from syscalls.master in some emulations.
Regenerated derived files from various syscalls.master files. Added $OpenBSD$.
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_exec.c,v 1.3 1996/01/06 12:44:13 thorpej Exp $	*/
d302 14
@


1.2
log
@from netbsd:
Move the obviously machine-dependent HP-UX compat code to hpux_machdep.{c,h}.
A fair bit of this, the m68k core dump and exec goo, can probably be
made into a generic m68k hpux module, eventually.
@
text
@d1 1
@


1.1
log
@update from netbsd
@
text
@d1 1
a1 1
/*	$NetBSD: hpux_exec.c,v 1.2 1995/12/08 07:54:50 thorpej Exp $	*/
d63 2
a73 1
static	int vmcmd_hpux_copy_exec __P((struct proc *, struct exec_vmcmd *));
a122 4
		/* set up command for exec header */
		NEW_VMCMD(&epp->ep_vmcmds, vmcmd_hpux_copy_exec,
		    sizeof(struct hpux_exec), (long)epp->ep_hdr, NULLVP, 0, 0);

a271 39
}

/*
 * We need to stash the exec header in the pcb, so we define
 * this vmcmd to do it for us, since vmcmds are executed once
 * we're committed to the exec (i.e. the old program has been unmapped).
 *
 * The address of the header is in ev->ev_addr and the length is
 * in ev->ev_len.
 */
static int
vmcmd_hpux_copy_exec(p, ev)
	struct proc *p;
	struct exec_vmcmd *ev;
{
	struct hpux_exec *execp = (struct hpux_exec *)ev->ev_addr;

	/*
	 * In the event some brave soul attempts to use this on a non-hp300,
	 * attempt to ensure that things don't get trashed when copying
	 * the exec header into the pcb.
	 */
	if (ev->ev_len > sizeof(p->p_addr->u_md.md_exec))
		return (EINVAL);
	bcopy((caddr_t)ev->ev_addr, p->p_addr->u_md.md_exec, ev->ev_len);

	/*
	 * Deal with misc. HP-UX process attributes.
	 * XXX move to hpux_machdep.c
	 */
	if (execp->ha_trsize & HPUXM_VALID) {
		if (execp->ha_trsize & HPUXM_DATAWT)
			p->p_md.md_flags &= ~MDP_CCBDATA;

		if (execp->ha_trsize & HPUXM_STKWT)
			p->p_md.md_flags & ~MDP_CCBSTACK;
	}

	return (0);
@
