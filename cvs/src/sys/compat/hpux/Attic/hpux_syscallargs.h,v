head	1.15;
access;
symbols
	OPENBSD_4_7:1.14.0.22
	OPENBSD_4_7_BASE:1.14
	OPENBSD_4_6:1.14.0.24
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.20
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.18
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.16
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.14
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.12
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.10
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.8
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.6
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.4
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.9.0.4
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.10
	OPENBSD_2_8:1.7.0.8
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.6
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.4
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.10
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.8
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.6
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2010.06.29.20.30.32;	author guenther;	state dead;
branches;
next	1.14;

1.14
date	2004.07.09.21.33.44;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2004.06.30.20.40.26;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2002.10.30.20.11.28;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.26.49;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.00.44.20;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2001.10.10.23.44.26;	author art;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2001.08.26.04.14.26;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	99.06.07.07.18.35;	author deraadt;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	97.03.26.08.12.40;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	97.03.26.08.11.07;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	96.08.25.12.21.28;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.02.20.34.57;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.04.47.14;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.14;	author deraadt;	state Exp;
branches;
next	;

1.7.4.1
date	2001.10.31.03.11.46;	author nate;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2002.03.28.11.28.06;	author niklas;	state Exp;
branches;
next	1.7.4.3;

1.7.4.3
date	2003.03.27.23.53.47;	author niklas;	state Exp;
branches;
next	;

1.9.4.1
date	2002.06.11.03.28.08;	author art;	state Exp;
branches;
next	1.9.4.2;

1.9.4.2
date	2003.05.19.21.52.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Remove COMPAT_HPUX.  No one wanted to support it and its fewmets were
blocking other cleanups
ok miod@@
@
text
@/*	$OpenBSD: hpux_syscallargs.h,v 1.14 2004/07/09 21:33:44 mickey Exp $	*/

#if defined(__hppa__)
#include <compat/hpux/hppa/hpux_syscallargs.h>
#elif defined(__m68k__)
#include <compat/hpux/m68k/hpux_syscallargs.h>
#endif
@


1.14
log
@split off the m68k-specific parts
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.13
log
@regen
@
text
@d3 4
a6 546
/*
 * System call argument lists.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from	OpenBSD: syscalls.master,v 1.10 2004/06/30 20:40:05 mickey Exp 
 */

#ifdef	syscallarg
#undef	syscallarg
#endif

#define	syscallarg(x)							\
	union {								\
		register_t pad;						\
		struct { x datum; } le;					\
		struct {						\
			int8_t pad[ (sizeof (register_t) < sizeof (x))	\
				? 0					\
				: sizeof (register_t) - sizeof (x)];	\
			x datum;					\
		} be;							\
	}

struct hpux_sys_read_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(u_int) nbyte;
};

struct hpux_sys_write_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(u_int) nbyte;
};

struct hpux_sys_open_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
	syscallarg(int) mode;
};

struct hpux_sys_wait_args {
	syscallarg(int *) status;
};

struct hpux_sys_creat_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct hpux_sys_unlink_args {
	syscallarg(char *) path;
};

struct hpux_sys_execv_args {
	syscallarg(char *) path;
	syscallarg(char **) argp;
};

struct hpux_sys_chdir_args {
	syscallarg(char *) path;
};

struct hpux_sys_time_6x_args {
	syscallarg(time_t *) t;
};

struct hpux_sys_mknod_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
	syscallarg(int) dev;
};

struct hpux_sys_chmod_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct hpux_sys_chown_args {
	syscallarg(char *) path;
	syscallarg(int) uid;
	syscallarg(int) gid;
};

struct hpux_sys_stat_6x_args {
	syscallarg(char *) path;
	syscallarg(struct hpux_ostat *) sb;
};

struct hpux_sys_stime_6x_args {
	syscallarg(int) time;
};

struct hpux_sys_ptrace_args {
	syscallarg(int) req;
	syscallarg(int) pid;
	syscallarg(int *) addr;
	syscallarg(int) data;
};

struct hpux_sys_alarm_6x_args {
	syscallarg(int) deltat;
};

struct hpux_sys_fstat_6x_args {
	syscallarg(int) fd;
	syscallarg(struct hpux_ostat *) sb;
};

struct hpux_sys_utime_6x_args {
	syscallarg(char *) fname;
	syscallarg(time_t *) tptr;
};

struct hpux_sys_stty_6x_args {
	syscallarg(int) fd;
	syscallarg(caddr_t) arg;
};

struct hpux_sys_gtty_6x_args {
	syscallarg(int) fd;
	syscallarg(caddr_t) arg;
};

struct hpux_sys_access_args {
	syscallarg(char *) path;
	syscallarg(int) flags;
};

struct hpux_sys_nice_6x_args {
	syscallarg(int) nval;
};

struct hpux_sys_ftime_6x_args {
	syscallarg(struct hpux_timeb *) tp;
};

struct hpux_sys_kill_args {
	syscallarg(pid_t) pid;
	syscallarg(int) signo;
};

struct hpux_sys_stat_args {
	syscallarg(char *) path;
	syscallarg(struct hpux_stat *) sb;
};

struct hpux_sys_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct hpux_stat *) sb;
};

struct hpux_sys_times_6x_args {
	syscallarg(struct tms *) tms;
};

struct hpux_sys_ssig_6x_args {
	syscallarg(int) signo;
	syscallarg(sig_t) fun;
};

struct hpux_sys_ioctl_args {
	syscallarg(int) fd;
	syscallarg(int) com;
	syscallarg(caddr_t) data;
};

struct hpux_sys_symlink_args {
	syscallarg(char *) path;
	syscallarg(char *) link;
};

struct hpux_sys_utssys_args {
	syscallarg(struct hpux_utsname *) uts;
	syscallarg(int) dev;
	syscallarg(int) request;
};

struct hpux_sys_readlink_args {
	syscallarg(char *) path;
	syscallarg(char *) buf;
	syscallarg(int) count;
};

struct hpux_sys_execve_args {
	syscallarg(char *) path;
	syscallarg(char **) argp;
	syscallarg(char **) envp;
};

struct hpux_sys_fcntl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(int) arg;
};

struct hpux_sys_ulimit_args {
	syscallarg(int) cmd;
	syscallarg(int) newlimit;
};

struct hpux_sys_mmap_args {
	syscallarg(caddr_t) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pos;
};

struct hpux_sys_getpgrp2_args {
	syscallarg(pid_t) pid;
};

struct hpux_sys_setpgrp2_args {
	syscallarg(pid_t) pid;
	syscallarg(pid_t) pgid;
};

struct hpux_sys_wait3_args {
	syscallarg(int *) status;
	syscallarg(int) options;
	syscallarg(int) rusage;
};

struct hpux_sys_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct hpux_stat *) sb;
};

struct hpux_sys_sigreturn_args {
	syscallarg(struct hpuxsigcontext *) sigcntxp;
};

struct hpux_sys_sigvec_args {
	syscallarg(int) signo;
	syscallarg(struct sigvec *) nsv;
	syscallarg(struct sigvec *) osv;
};

struct hpux_sys_sigblock_args {
	syscallarg(int) mask;
};

struct hpux_sys_sigsetmask_args {
	syscallarg(int) mask;
};

struct hpux_sys_sigpause_args {
	syscallarg(int) mask;
};

struct hpux_sys_readv_args {
	syscallarg(int) fd;
	syscallarg(struct iovec *) iovp;
	syscallarg(u_int) iovcnt;
};

struct hpux_sys_writev_args {
	syscallarg(int) fd;
	syscallarg(struct iovec *) iovp;
	syscallarg(u_int) iovcnt;
};

struct hpux_sys_rename_args {
	syscallarg(char *) from;
	syscallarg(char *) to;
};

struct hpux_sys_truncate_args {
	syscallarg(char *) path;
	syscallarg(long) length;
};

struct hpux_sys_sysconf_args {
	syscallarg(int) name;
};

struct hpux_sys_mkdir_args {
	syscallarg(char *) path;
	syscallarg(int) mode;
};

struct hpux_sys_rmdir_args {
	syscallarg(char *) path;
};

struct hpux_sys_getrlimit_args {
	syscallarg(u_int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct hpux_sys_setrlimit_args {
	syscallarg(u_int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct hpux_sys_rtprio_args {
	syscallarg(pid_t) pid;
	syscallarg(int) prio;
};

struct hpux_sys_netioctl_args {
	syscallarg(int) call;
	syscallarg(int *) args;
};

struct hpux_sys_lockf_args {
	syscallarg(int) fd;
	syscallarg(int) func;
	syscallarg(long) size;
};

struct hpux_sys_shmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(caddr_t) buf;
};

struct hpux_sys_advise_args {
	syscallarg(int) arg;
};

struct hpux_sys_getcontext_args {
	syscallarg(char *) buf;
	syscallarg(int) len;
};

struct hpux_sys_getaccess_args {
	syscallarg(char *) path;
	syscallarg(uid_t) uid;
	syscallarg(int) ngroups;
	syscallarg(gid_t *) gidset;
	syscallarg(void *) label;
	syscallarg(void *) privs;
};

struct hpux_sys_waitpid_args {
	syscallarg(pid_t) pid;
	syscallarg(int *) status;
	syscallarg(int) options;
	syscallarg(struct rusage *) rusage;
};

struct hpux_sys_sigaction_args {
	syscallarg(int) signo;
	syscallarg(struct hpux_sigaction *) nsa;
	syscallarg(struct hpux_sigaction *) osa;
};

struct hpux_sys_sigprocmask_args {
	syscallarg(int) how;
	syscallarg(hpux_sigset_t *) set;
	syscallarg(hpux_sigset_t *) oset;
};

struct hpux_sys_sigpending_args {
	syscallarg(hpux_sigset_t *) set;
};

struct hpux_sys_sigsuspend_args {
	syscallarg(hpux_sigset_t *) set;
};

struct hpux_sys_setsockopt2_args {
	syscallarg(int) s;
	syscallarg(int) level;
	syscallarg(int) name;
	syscallarg(caddr_t) val;
	syscallarg(int) valsize;
};

struct hpux_sys_nshmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(caddr_t) buf;
};

/*
 * System call prototypes.
 */

int	sys_nosys(struct proc *, void *, register_t *);
int	sys_exit(struct proc *, void *, register_t *);
int	hpux_sys_fork(struct proc *, void *, register_t *);
int	hpux_sys_read(struct proc *, void *, register_t *);
int	hpux_sys_write(struct proc *, void *, register_t *);
int	hpux_sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	hpux_sys_wait(struct proc *, void *, register_t *);
int	hpux_sys_creat(struct proc *, void *, register_t *);
int	sys_link(struct proc *, void *, register_t *);
int	hpux_sys_unlink(struct proc *, void *, register_t *);
int	hpux_sys_execv(struct proc *, void *, register_t *);
int	hpux_sys_chdir(struct proc *, void *, register_t *);
int	hpux_sys_time_6x(struct proc *, void *, register_t *);
int	hpux_sys_mknod(struct proc *, void *, register_t *);
int	hpux_sys_chmod(struct proc *, void *, register_t *);
int	hpux_sys_chown(struct proc *, void *, register_t *);
int	sys_obreak(struct proc *, void *, register_t *);
int	hpux_sys_stat_6x(struct proc *, void *, register_t *);
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	hpux_sys_stime_6x(struct proc *, void *, register_t *);
#ifdef PTRACE
int	hpux_sys_ptrace(struct proc *, void *, register_t *);
#else
#endif
int	hpux_sys_alarm_6x(struct proc *, void *, register_t *);
int	hpux_sys_fstat_6x(struct proc *, void *, register_t *);
int	hpux_sys_pause_6x(struct proc *, void *, register_t *);
int	hpux_sys_utime_6x(struct proc *, void *, register_t *);
int	hpux_sys_stty_6x(struct proc *, void *, register_t *);
int	hpux_sys_gtty_6x(struct proc *, void *, register_t *);
int	hpux_sys_access(struct proc *, void *, register_t *);
int	hpux_sys_nice_6x(struct proc *, void *, register_t *);
int	hpux_sys_ftime_6x(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	hpux_sys_kill(struct proc *, void *, register_t *);
int	hpux_sys_stat(struct proc *, void *, register_t *);
int	hpux_sys_setpgrp_6x(struct proc *, void *, register_t *);
int	hpux_sys_lstat(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_opipe(struct proc *, void *, register_t *);
int	hpux_sys_times_6x(struct proc *, void *, register_t *);
int	sys_profil(struct proc *, void *, register_t *);
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	hpux_sys_ssig_6x(struct proc *, void *, register_t *);
int	hpux_sys_ioctl(struct proc *, void *, register_t *);
int	hpux_sys_symlink(struct proc *, void *, register_t *);
int	hpux_sys_utssys(struct proc *, void *, register_t *);
int	hpux_sys_readlink(struct proc *, void *, register_t *);
int	hpux_sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	sys_chroot(struct proc *, void *, register_t *);
int	hpux_sys_fcntl(struct proc *, void *, register_t *);
int	hpux_sys_ulimit(struct proc *, void *, register_t *);
int	hpux_sys_vfork(struct proc *, void *, register_t *);
int	hpux_sys_read(struct proc *, void *, register_t *);
int	hpux_sys_write(struct proc *, void *, register_t *);
int	hpux_sys_mmap(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	hpux_sys_getpgrp2(struct proc *, void *, register_t *);
int	hpux_sys_setpgrp2(struct proc *, void *, register_t *);
int	sys_setitimer(struct proc *, void *, register_t *);
int	hpux_sys_wait3(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
int	sys_dup2(struct proc *, void *, register_t *);
int	hpux_sys_fstat(struct proc *, void *, register_t *);
int	sys_select(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	hpux_sys_sigreturn(struct proc *, void *, register_t *);
int	hpux_sys_sigvec(struct proc *, void *, register_t *);
int	hpux_sys_sigblock(struct proc *, void *, register_t *);
int	hpux_sys_sigsetmask(struct proc *, void *, register_t *);
int	hpux_sys_sigpause(struct proc *, void *, register_t *);
int	compat_43_sys_sigstack(struct proc *, void *, register_t *);
int	sys_gettimeofday(struct proc *, void *, register_t *);
int	hpux_sys_readv(struct proc *, void *, register_t *);
int	hpux_sys_writev(struct proc *, void *, register_t *);
int	sys_settimeofday(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	sys_setresuid(struct proc *, void *, register_t *);
int	sys_setresgid(struct proc *, void *, register_t *);
int	hpux_sys_rename(struct proc *, void *, register_t *);
int	hpux_sys_truncate(struct proc *, void *, register_t *);
int	compat_43_sys_ftruncate(struct proc *, void *, register_t *);
int	hpux_sys_sysconf(struct proc *, void *, register_t *);
int	hpux_sys_mkdir(struct proc *, void *, register_t *);
int	hpux_sys_rmdir(struct proc *, void *, register_t *);
int	hpux_sys_getrlimit(struct proc *, void *, register_t *);
int	hpux_sys_setrlimit(struct proc *, void *, register_t *);
int	hpux_sys_rtprio(struct proc *, void *, register_t *);
int	hpux_sys_netioctl(struct proc *, void *, register_t *);
int	hpux_sys_lockf(struct proc *, void *, register_t *);
#ifdef SYSVSEM
int	sys_semget(struct proc *, void *, register_t *);
int	sys___semctl(struct proc *, void *, register_t *);
int	sys_semop(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVMSG
int	sys_msgget(struct proc *, void *, register_t *);
int	sys_msgctl(struct proc *, void *, register_t *);
int	sys_msgsnd(struct proc *, void *, register_t *);
int	sys_msgrcv(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSHM
int	sys_shmget(struct proc *, void *, register_t *);
int	hpux_sys_shmctl(struct proc *, void *, register_t *);
int	sys_shmat(struct proc *, void *, register_t *);
int	sys_shmdt(struct proc *, void *, register_t *);
#else
#endif
int	hpux_sys_advise(struct proc *, void *, register_t *);
int	hpux_sys_getcontext(struct proc *, void *, register_t *);
int	hpux_sys_getaccess(struct proc *, void *, register_t *);
int	hpux_sys_waitpid(struct proc *, void *, register_t *);
int	sys_pathconf(struct proc *, void *, register_t *);
int	sys_fpathconf(struct proc *, void *, register_t *);
int	compat_43_sys_getdirentries(struct proc *, void *, register_t *);
int	compat_09_sys_getdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_setdomainname(struct proc *, void *, register_t *);
int	hpux_sys_sigaction(struct proc *, void *, register_t *);
int	hpux_sys_sigprocmask(struct proc *, void *, register_t *);
int	hpux_sys_sigpending(struct proc *, void *, register_t *);
int	hpux_sys_sigsuspend(struct proc *, void *, register_t *);
int	compat_43_sys_getdtablesize(struct proc *, void *, register_t *);
int	sys_poll(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	compat_43_sys_accept(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	hpux_sys_setsockopt2(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	sys_socket(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
#ifdef SYSVSEM
int	sys___semctl(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVMSG
int	sys_msgctl(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSHM
int	hpux_sys_nshmctl(struct proc *, void *, register_t *);
#else
@


1.12
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.9 2002/10/30 20:10:48 millert Exp 
d519 1
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_syscallargs.h,v 1.10 2002/03/14 00:44:20 miod Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.8 2002/03/14 00:42:25 miod Exp 
a266 12
struct hpux_sys_setresuid_args {
	syscallarg(uid_t) r;
	syscallarg(uid_t) e;
	syscallarg(uid_t) s;
};

struct hpux_sys_setresgid_args {
	syscallarg(gid_t) r;
	syscallarg(gid_t) e;
	syscallarg(gid_t) s;
};

d472 2
a473 2
int	hpux_sys_setresuid(struct proc *, void *, register_t *);
int	hpux_sys_setresgid(struct proc *, void *, register_t *);
@


1.10
log
@Regen after syscall changes (option PTRACE)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d397 24
a420 24
int	sys_nosys	__P((struct proc *, void *, register_t *));
int	sys_exit	__P((struct proc *, void *, register_t *));
int	hpux_sys_fork	__P((struct proc *, void *, register_t *));
int	hpux_sys_read	__P((struct proc *, void *, register_t *));
int	hpux_sys_write	__P((struct proc *, void *, register_t *));
int	hpux_sys_open	__P((struct proc *, void *, register_t *));
int	sys_close	__P((struct proc *, void *, register_t *));
int	hpux_sys_wait	__P((struct proc *, void *, register_t *));
int	hpux_sys_creat	__P((struct proc *, void *, register_t *));
int	sys_link	__P((struct proc *, void *, register_t *));
int	hpux_sys_unlink	__P((struct proc *, void *, register_t *));
int	hpux_sys_execv	__P((struct proc *, void *, register_t *));
int	hpux_sys_chdir	__P((struct proc *, void *, register_t *));
int	hpux_sys_time_6x	__P((struct proc *, void *, register_t *));
int	hpux_sys_mknod	__P((struct proc *, void *, register_t *));
int	hpux_sys_chmod	__P((struct proc *, void *, register_t *));
int	hpux_sys_chown	__P((struct proc *, void *, register_t *));
int	sys_obreak	__P((struct proc *, void *, register_t *));
int	hpux_sys_stat_6x	__P((struct proc *, void *, register_t *));
int	compat_43_sys_lseek	__P((struct proc *, void *, register_t *));
int	sys_getpid	__P((struct proc *, void *, register_t *));
int	sys_setuid	__P((struct proc *, void *, register_t *));
int	sys_getuid	__P((struct proc *, void *, register_t *));
int	hpux_sys_stime_6x	__P((struct proc *, void *, register_t *));
d422 1
a422 1
int	hpux_sys_ptrace	__P((struct proc *, void *, register_t *));
d425 72
a496 72
int	hpux_sys_alarm_6x	__P((struct proc *, void *, register_t *));
int	hpux_sys_fstat_6x	__P((struct proc *, void *, register_t *));
int	hpux_sys_pause_6x	__P((struct proc *, void *, register_t *));
int	hpux_sys_utime_6x	__P((struct proc *, void *, register_t *));
int	hpux_sys_stty_6x	__P((struct proc *, void *, register_t *));
int	hpux_sys_gtty_6x	__P((struct proc *, void *, register_t *));
int	hpux_sys_access	__P((struct proc *, void *, register_t *));
int	hpux_sys_nice_6x	__P((struct proc *, void *, register_t *));
int	hpux_sys_ftime_6x	__P((struct proc *, void *, register_t *));
int	sys_sync	__P((struct proc *, void *, register_t *));
int	hpux_sys_kill	__P((struct proc *, void *, register_t *));
int	hpux_sys_stat	__P((struct proc *, void *, register_t *));
int	hpux_sys_setpgrp_6x	__P((struct proc *, void *, register_t *));
int	hpux_sys_lstat	__P((struct proc *, void *, register_t *));
int	sys_dup	__P((struct proc *, void *, register_t *));
int	sys_opipe	__P((struct proc *, void *, register_t *));
int	hpux_sys_times_6x	__P((struct proc *, void *, register_t *));
int	sys_profil	__P((struct proc *, void *, register_t *));
int	sys_setgid	__P((struct proc *, void *, register_t *));
int	sys_getgid	__P((struct proc *, void *, register_t *));
int	hpux_sys_ssig_6x	__P((struct proc *, void *, register_t *));
int	hpux_sys_ioctl	__P((struct proc *, void *, register_t *));
int	hpux_sys_symlink	__P((struct proc *, void *, register_t *));
int	hpux_sys_utssys	__P((struct proc *, void *, register_t *));
int	hpux_sys_readlink	__P((struct proc *, void *, register_t *));
int	hpux_sys_execve	__P((struct proc *, void *, register_t *));
int	sys_umask	__P((struct proc *, void *, register_t *));
int	sys_chroot	__P((struct proc *, void *, register_t *));
int	hpux_sys_fcntl	__P((struct proc *, void *, register_t *));
int	hpux_sys_ulimit	__P((struct proc *, void *, register_t *));
int	hpux_sys_vfork	__P((struct proc *, void *, register_t *));
int	hpux_sys_read	__P((struct proc *, void *, register_t *));
int	hpux_sys_write	__P((struct proc *, void *, register_t *));
int	hpux_sys_mmap	__P((struct proc *, void *, register_t *));
int	sys_munmap	__P((struct proc *, void *, register_t *));
int	sys_mprotect	__P((struct proc *, void *, register_t *));
int	sys_getgroups	__P((struct proc *, void *, register_t *));
int	sys_setgroups	__P((struct proc *, void *, register_t *));
int	hpux_sys_getpgrp2	__P((struct proc *, void *, register_t *));
int	hpux_sys_setpgrp2	__P((struct proc *, void *, register_t *));
int	sys_setitimer	__P((struct proc *, void *, register_t *));
int	hpux_sys_wait3	__P((struct proc *, void *, register_t *));
int	sys_getitimer	__P((struct proc *, void *, register_t *));
int	sys_dup2	__P((struct proc *, void *, register_t *));
int	hpux_sys_fstat	__P((struct proc *, void *, register_t *));
int	sys_select	__P((struct proc *, void *, register_t *));
int	sys_fsync	__P((struct proc *, void *, register_t *));
int	hpux_sys_sigreturn	__P((struct proc *, void *, register_t *));
int	hpux_sys_sigvec	__P((struct proc *, void *, register_t *));
int	hpux_sys_sigblock	__P((struct proc *, void *, register_t *));
int	hpux_sys_sigsetmask	__P((struct proc *, void *, register_t *));
int	hpux_sys_sigpause	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sigstack	__P((struct proc *, void *, register_t *));
int	sys_gettimeofday	__P((struct proc *, void *, register_t *));
int	hpux_sys_readv	__P((struct proc *, void *, register_t *));
int	hpux_sys_writev	__P((struct proc *, void *, register_t *));
int	sys_settimeofday	__P((struct proc *, void *, register_t *));
int	sys_fchown	__P((struct proc *, void *, register_t *));
int	sys_fchmod	__P((struct proc *, void *, register_t *));
int	hpux_sys_setresuid	__P((struct proc *, void *, register_t *));
int	hpux_sys_setresgid	__P((struct proc *, void *, register_t *));
int	hpux_sys_rename	__P((struct proc *, void *, register_t *));
int	hpux_sys_truncate	__P((struct proc *, void *, register_t *));
int	compat_43_sys_ftruncate	__P((struct proc *, void *, register_t *));
int	hpux_sys_sysconf	__P((struct proc *, void *, register_t *));
int	hpux_sys_mkdir	__P((struct proc *, void *, register_t *));
int	hpux_sys_rmdir	__P((struct proc *, void *, register_t *));
int	hpux_sys_getrlimit	__P((struct proc *, void *, register_t *));
int	hpux_sys_setrlimit	__P((struct proc *, void *, register_t *));
int	hpux_sys_rtprio	__P((struct proc *, void *, register_t *));
int	hpux_sys_netioctl	__P((struct proc *, void *, register_t *));
int	hpux_sys_lockf	__P((struct proc *, void *, register_t *));
d498 3
a500 3
int	sys_semget	__P((struct proc *, void *, register_t *));
int	sys___semctl	__P((struct proc *, void *, register_t *));
int	sys_semop	__P((struct proc *, void *, register_t *));
d504 4
a507 4
int	sys_msgget	__P((struct proc *, void *, register_t *));
int	sys_msgctl	__P((struct proc *, void *, register_t *));
int	sys_msgsnd	__P((struct proc *, void *, register_t *));
int	sys_msgrcv	__P((struct proc *, void *, register_t *));
d511 4
a514 4
int	sys_shmget	__P((struct proc *, void *, register_t *));
int	hpux_sys_shmctl	__P((struct proc *, void *, register_t *));
int	sys_shmat	__P((struct proc *, void *, register_t *));
int	sys_shmdt	__P((struct proc *, void *, register_t *));
d517 32
a548 32
int	hpux_sys_advise	__P((struct proc *, void *, register_t *));
int	hpux_sys_getcontext	__P((struct proc *, void *, register_t *));
int	hpux_sys_getaccess	__P((struct proc *, void *, register_t *));
int	hpux_sys_waitpid	__P((struct proc *, void *, register_t *));
int	sys_pathconf	__P((struct proc *, void *, register_t *));
int	sys_fpathconf	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getdirentries	__P((struct proc *, void *, register_t *));
int	compat_09_sys_getdomainname	__P((struct proc *, void *, register_t *));
int	compat_09_sys_setdomainname	__P((struct proc *, void *, register_t *));
int	hpux_sys_sigaction	__P((struct proc *, void *, register_t *));
int	hpux_sys_sigprocmask	__P((struct proc *, void *, register_t *));
int	hpux_sys_sigpending	__P((struct proc *, void *, register_t *));
int	hpux_sys_sigsuspend	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getdtablesize	__P((struct proc *, void *, register_t *));
int	sys_fchdir	__P((struct proc *, void *, register_t *));
int	compat_43_sys_accept	__P((struct proc *, void *, register_t *));
int	sys_bind	__P((struct proc *, void *, register_t *));
int	sys_connect	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getpeername	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getsockname	__P((struct proc *, void *, register_t *));
int	sys_getsockopt	__P((struct proc *, void *, register_t *));
int	sys_listen	__P((struct proc *, void *, register_t *));
int	compat_43_sys_recv	__P((struct proc *, void *, register_t *));
int	compat_43_sys_recvfrom	__P((struct proc *, void *, register_t *));
int	compat_43_sys_recvmsg	__P((struct proc *, void *, register_t *));
int	compat_43_sys_send	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sendmsg	__P((struct proc *, void *, register_t *));
int	sys_sendto	__P((struct proc *, void *, register_t *));
int	hpux_sys_setsockopt2	__P((struct proc *, void *, register_t *));
int	sys_shutdown	__P((struct proc *, void *, register_t *));
int	sys_socket	__P((struct proc *, void *, register_t *));
int	sys_socketpair	__P((struct proc *, void *, register_t *));
d550 1
a550 1
int	sys___semctl	__P((struct proc *, void *, register_t *));
d554 1
a554 1
int	sys_msgctl	__P((struct proc *, void *, register_t *));
d558 1
a558 1
int	hpux_sys_nshmctl	__P((struct proc *, void *, register_t *));
@


1.9
log
@regen
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.7 2001/10/10 23:43:44 art Exp 
d421 1
d423 2
@


1.9.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_syscallargs.h,v 1.9 2001/10/10 23:44:26 art Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.8 2002/03/14 00:42:25 miod Exp 
d397 97
a493 100
int	sys_nosys(struct proc *, void *, register_t *);
int	sys_exit(struct proc *, void *, register_t *);
int	hpux_sys_fork(struct proc *, void *, register_t *);
int	hpux_sys_read(struct proc *, void *, register_t *);
int	hpux_sys_write(struct proc *, void *, register_t *);
int	hpux_sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	hpux_sys_wait(struct proc *, void *, register_t *);
int	hpux_sys_creat(struct proc *, void *, register_t *);
int	sys_link(struct proc *, void *, register_t *);
int	hpux_sys_unlink(struct proc *, void *, register_t *);
int	hpux_sys_execv(struct proc *, void *, register_t *);
int	hpux_sys_chdir(struct proc *, void *, register_t *);
int	hpux_sys_time_6x(struct proc *, void *, register_t *);
int	hpux_sys_mknod(struct proc *, void *, register_t *);
int	hpux_sys_chmod(struct proc *, void *, register_t *);
int	hpux_sys_chown(struct proc *, void *, register_t *);
int	sys_obreak(struct proc *, void *, register_t *);
int	hpux_sys_stat_6x(struct proc *, void *, register_t *);
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	hpux_sys_stime_6x(struct proc *, void *, register_t *);
#ifdef PTRACE
int	hpux_sys_ptrace(struct proc *, void *, register_t *);
#else
#endif
int	hpux_sys_alarm_6x(struct proc *, void *, register_t *);
int	hpux_sys_fstat_6x(struct proc *, void *, register_t *);
int	hpux_sys_pause_6x(struct proc *, void *, register_t *);
int	hpux_sys_utime_6x(struct proc *, void *, register_t *);
int	hpux_sys_stty_6x(struct proc *, void *, register_t *);
int	hpux_sys_gtty_6x(struct proc *, void *, register_t *);
int	hpux_sys_access(struct proc *, void *, register_t *);
int	hpux_sys_nice_6x(struct proc *, void *, register_t *);
int	hpux_sys_ftime_6x(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	hpux_sys_kill(struct proc *, void *, register_t *);
int	hpux_sys_stat(struct proc *, void *, register_t *);
int	hpux_sys_setpgrp_6x(struct proc *, void *, register_t *);
int	hpux_sys_lstat(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_opipe(struct proc *, void *, register_t *);
int	hpux_sys_times_6x(struct proc *, void *, register_t *);
int	sys_profil(struct proc *, void *, register_t *);
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	hpux_sys_ssig_6x(struct proc *, void *, register_t *);
int	hpux_sys_ioctl(struct proc *, void *, register_t *);
int	hpux_sys_symlink(struct proc *, void *, register_t *);
int	hpux_sys_utssys(struct proc *, void *, register_t *);
int	hpux_sys_readlink(struct proc *, void *, register_t *);
int	hpux_sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	sys_chroot(struct proc *, void *, register_t *);
int	hpux_sys_fcntl(struct proc *, void *, register_t *);
int	hpux_sys_ulimit(struct proc *, void *, register_t *);
int	hpux_sys_vfork(struct proc *, void *, register_t *);
int	hpux_sys_read(struct proc *, void *, register_t *);
int	hpux_sys_write(struct proc *, void *, register_t *);
int	hpux_sys_mmap(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	hpux_sys_getpgrp2(struct proc *, void *, register_t *);
int	hpux_sys_setpgrp2(struct proc *, void *, register_t *);
int	sys_setitimer(struct proc *, void *, register_t *);
int	hpux_sys_wait3(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
int	sys_dup2(struct proc *, void *, register_t *);
int	hpux_sys_fstat(struct proc *, void *, register_t *);
int	sys_select(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	hpux_sys_sigreturn(struct proc *, void *, register_t *);
int	hpux_sys_sigvec(struct proc *, void *, register_t *);
int	hpux_sys_sigblock(struct proc *, void *, register_t *);
int	hpux_sys_sigsetmask(struct proc *, void *, register_t *);
int	hpux_sys_sigpause(struct proc *, void *, register_t *);
int	compat_43_sys_sigstack(struct proc *, void *, register_t *);
int	sys_gettimeofday(struct proc *, void *, register_t *);
int	hpux_sys_readv(struct proc *, void *, register_t *);
int	hpux_sys_writev(struct proc *, void *, register_t *);
int	sys_settimeofday(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	hpux_sys_setresuid(struct proc *, void *, register_t *);
int	hpux_sys_setresgid(struct proc *, void *, register_t *);
int	hpux_sys_rename(struct proc *, void *, register_t *);
int	hpux_sys_truncate(struct proc *, void *, register_t *);
int	compat_43_sys_ftruncate(struct proc *, void *, register_t *);
int	hpux_sys_sysconf(struct proc *, void *, register_t *);
int	hpux_sys_mkdir(struct proc *, void *, register_t *);
int	hpux_sys_rmdir(struct proc *, void *, register_t *);
int	hpux_sys_getrlimit(struct proc *, void *, register_t *);
int	hpux_sys_setrlimit(struct proc *, void *, register_t *);
int	hpux_sys_rtprio(struct proc *, void *, register_t *);
int	hpux_sys_netioctl(struct proc *, void *, register_t *);
int	hpux_sys_lockf(struct proc *, void *, register_t *);
d495 3
a497 3
int	sys_semget(struct proc *, void *, register_t *);
int	sys___semctl(struct proc *, void *, register_t *);
int	sys_semop(struct proc *, void *, register_t *);
d501 4
a504 4
int	sys_msgget(struct proc *, void *, register_t *);
int	sys_msgctl(struct proc *, void *, register_t *);
int	sys_msgsnd(struct proc *, void *, register_t *);
int	sys_msgrcv(struct proc *, void *, register_t *);
d508 4
a511 4
int	sys_shmget(struct proc *, void *, register_t *);
int	hpux_sys_shmctl(struct proc *, void *, register_t *);
int	sys_shmat(struct proc *, void *, register_t *);
int	sys_shmdt(struct proc *, void *, register_t *);
d514 32
a545 32
int	hpux_sys_advise(struct proc *, void *, register_t *);
int	hpux_sys_getcontext(struct proc *, void *, register_t *);
int	hpux_sys_getaccess(struct proc *, void *, register_t *);
int	hpux_sys_waitpid(struct proc *, void *, register_t *);
int	sys_pathconf(struct proc *, void *, register_t *);
int	sys_fpathconf(struct proc *, void *, register_t *);
int	compat_43_sys_getdirentries(struct proc *, void *, register_t *);
int	compat_09_sys_getdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_setdomainname(struct proc *, void *, register_t *);
int	hpux_sys_sigaction(struct proc *, void *, register_t *);
int	hpux_sys_sigprocmask(struct proc *, void *, register_t *);
int	hpux_sys_sigpending(struct proc *, void *, register_t *);
int	hpux_sys_sigsuspend(struct proc *, void *, register_t *);
int	compat_43_sys_getdtablesize(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	compat_43_sys_accept(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	hpux_sys_setsockopt2(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	sys_socket(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
d547 1
a547 1
int	sys___semctl(struct proc *, void *, register_t *);
d551 1
a551 1
int	sys_msgctl(struct proc *, void *, register_t *);
d555 1
a555 1
int	hpux_sys_nshmctl(struct proc *, void *, register_t *);
@


1.9.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.9 2002/10/30 20:10:48 millert Exp 
d267 12
d484 2
a485 2
int	sys_setresuid(struct proc *, void *, register_t *);
int	sys_setresgid(struct proc *, void *, register_t *);
@


1.8
log
@sync
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.6 1999/06/07 07:17:46 deraadt Exp 
a154 4
struct hpux_sys_dup_args {
	syscallarg(int) fd;
};

d436 1
a436 1
int	hpux_sys_dup	__P((struct proc *, void *, register_t *));
@


1.7
log
@sync
@
text
@d10 15
a24 1
#define	syscallarg(x)	union { x datum; register_t pad; }
@


1.7.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: hpux_syscallargs.h,v 1.7 1999/06/07 07:18:35 deraadt Exp $	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.7 2001/10/10 23:43:44 art Exp 
d10 1
a10 15
#ifdef	syscallarg
#undef	syscallarg
#endif

#define	syscallarg(x)							\
	union {								\
		register_t pad;						\
		struct { x datum; } le;					\
		struct {						\
			int8_t pad[ (sizeof (register_t) < sizeof (x))	\
				? 0					\
				: sizeof (register_t) - sizeof (x)];	\
			x datum;					\
		} be;							\
	}
d141 4
d426 1
a426 1
int	sys_dup	__P((struct proc *, void *, register_t *));
@


1.7.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.8 2002/03/14 00:42:25 miod Exp 
d397 97
a493 100
int	sys_nosys(struct proc *, void *, register_t *);
int	sys_exit(struct proc *, void *, register_t *);
int	hpux_sys_fork(struct proc *, void *, register_t *);
int	hpux_sys_read(struct proc *, void *, register_t *);
int	hpux_sys_write(struct proc *, void *, register_t *);
int	hpux_sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	hpux_sys_wait(struct proc *, void *, register_t *);
int	hpux_sys_creat(struct proc *, void *, register_t *);
int	sys_link(struct proc *, void *, register_t *);
int	hpux_sys_unlink(struct proc *, void *, register_t *);
int	hpux_sys_execv(struct proc *, void *, register_t *);
int	hpux_sys_chdir(struct proc *, void *, register_t *);
int	hpux_sys_time_6x(struct proc *, void *, register_t *);
int	hpux_sys_mknod(struct proc *, void *, register_t *);
int	hpux_sys_chmod(struct proc *, void *, register_t *);
int	hpux_sys_chown(struct proc *, void *, register_t *);
int	sys_obreak(struct proc *, void *, register_t *);
int	hpux_sys_stat_6x(struct proc *, void *, register_t *);
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	hpux_sys_stime_6x(struct proc *, void *, register_t *);
#ifdef PTRACE
int	hpux_sys_ptrace(struct proc *, void *, register_t *);
#else
#endif
int	hpux_sys_alarm_6x(struct proc *, void *, register_t *);
int	hpux_sys_fstat_6x(struct proc *, void *, register_t *);
int	hpux_sys_pause_6x(struct proc *, void *, register_t *);
int	hpux_sys_utime_6x(struct proc *, void *, register_t *);
int	hpux_sys_stty_6x(struct proc *, void *, register_t *);
int	hpux_sys_gtty_6x(struct proc *, void *, register_t *);
int	hpux_sys_access(struct proc *, void *, register_t *);
int	hpux_sys_nice_6x(struct proc *, void *, register_t *);
int	hpux_sys_ftime_6x(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	hpux_sys_kill(struct proc *, void *, register_t *);
int	hpux_sys_stat(struct proc *, void *, register_t *);
int	hpux_sys_setpgrp_6x(struct proc *, void *, register_t *);
int	hpux_sys_lstat(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_opipe(struct proc *, void *, register_t *);
int	hpux_sys_times_6x(struct proc *, void *, register_t *);
int	sys_profil(struct proc *, void *, register_t *);
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	hpux_sys_ssig_6x(struct proc *, void *, register_t *);
int	hpux_sys_ioctl(struct proc *, void *, register_t *);
int	hpux_sys_symlink(struct proc *, void *, register_t *);
int	hpux_sys_utssys(struct proc *, void *, register_t *);
int	hpux_sys_readlink(struct proc *, void *, register_t *);
int	hpux_sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	sys_chroot(struct proc *, void *, register_t *);
int	hpux_sys_fcntl(struct proc *, void *, register_t *);
int	hpux_sys_ulimit(struct proc *, void *, register_t *);
int	hpux_sys_vfork(struct proc *, void *, register_t *);
int	hpux_sys_read(struct proc *, void *, register_t *);
int	hpux_sys_write(struct proc *, void *, register_t *);
int	hpux_sys_mmap(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	hpux_sys_getpgrp2(struct proc *, void *, register_t *);
int	hpux_sys_setpgrp2(struct proc *, void *, register_t *);
int	sys_setitimer(struct proc *, void *, register_t *);
int	hpux_sys_wait3(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
int	sys_dup2(struct proc *, void *, register_t *);
int	hpux_sys_fstat(struct proc *, void *, register_t *);
int	sys_select(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	hpux_sys_sigreturn(struct proc *, void *, register_t *);
int	hpux_sys_sigvec(struct proc *, void *, register_t *);
int	hpux_sys_sigblock(struct proc *, void *, register_t *);
int	hpux_sys_sigsetmask(struct proc *, void *, register_t *);
int	hpux_sys_sigpause(struct proc *, void *, register_t *);
int	compat_43_sys_sigstack(struct proc *, void *, register_t *);
int	sys_gettimeofday(struct proc *, void *, register_t *);
int	hpux_sys_readv(struct proc *, void *, register_t *);
int	hpux_sys_writev(struct proc *, void *, register_t *);
int	sys_settimeofday(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	hpux_sys_setresuid(struct proc *, void *, register_t *);
int	hpux_sys_setresgid(struct proc *, void *, register_t *);
int	hpux_sys_rename(struct proc *, void *, register_t *);
int	hpux_sys_truncate(struct proc *, void *, register_t *);
int	compat_43_sys_ftruncate(struct proc *, void *, register_t *);
int	hpux_sys_sysconf(struct proc *, void *, register_t *);
int	hpux_sys_mkdir(struct proc *, void *, register_t *);
int	hpux_sys_rmdir(struct proc *, void *, register_t *);
int	hpux_sys_getrlimit(struct proc *, void *, register_t *);
int	hpux_sys_setrlimit(struct proc *, void *, register_t *);
int	hpux_sys_rtprio(struct proc *, void *, register_t *);
int	hpux_sys_netioctl(struct proc *, void *, register_t *);
int	hpux_sys_lockf(struct proc *, void *, register_t *);
d495 3
a497 3
int	sys_semget(struct proc *, void *, register_t *);
int	sys___semctl(struct proc *, void *, register_t *);
int	sys_semop(struct proc *, void *, register_t *);
d501 4
a504 4
int	sys_msgget(struct proc *, void *, register_t *);
int	sys_msgctl(struct proc *, void *, register_t *);
int	sys_msgsnd(struct proc *, void *, register_t *);
int	sys_msgrcv(struct proc *, void *, register_t *);
d508 4
a511 4
int	sys_shmget(struct proc *, void *, register_t *);
int	hpux_sys_shmctl(struct proc *, void *, register_t *);
int	sys_shmat(struct proc *, void *, register_t *);
int	sys_shmdt(struct proc *, void *, register_t *);
d514 32
a545 32
int	hpux_sys_advise(struct proc *, void *, register_t *);
int	hpux_sys_getcontext(struct proc *, void *, register_t *);
int	hpux_sys_getaccess(struct proc *, void *, register_t *);
int	hpux_sys_waitpid(struct proc *, void *, register_t *);
int	sys_pathconf(struct proc *, void *, register_t *);
int	sys_fpathconf(struct proc *, void *, register_t *);
int	compat_43_sys_getdirentries(struct proc *, void *, register_t *);
int	compat_09_sys_getdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_setdomainname(struct proc *, void *, register_t *);
int	hpux_sys_sigaction(struct proc *, void *, register_t *);
int	hpux_sys_sigprocmask(struct proc *, void *, register_t *);
int	hpux_sys_sigpending(struct proc *, void *, register_t *);
int	hpux_sys_sigsuspend(struct proc *, void *, register_t *);
int	compat_43_sys_getdtablesize(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	compat_43_sys_accept(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	hpux_sys_setsockopt2(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	sys_socket(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
d547 1
a547 1
int	sys___semctl(struct proc *, void *, register_t *);
d551 1
a551 1
int	sys_msgctl(struct proc *, void *, register_t *);
d555 1
a555 1
int	hpux_sys_nshmctl(struct proc *, void *, register_t *);
@


1.7.4.3
log
@Sync the SMP branch with 3.3
@
text
@d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.9 2002/10/30 20:10:48 millert Exp 
d267 12
d484 2
a485 2
int	sys_setresuid(struct proc *, void *, register_t *);
int	sys_setresgid(struct proc *, void *, register_t *);
@


1.6
log
@Regen.
@
text
@d1 2
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.5 1997/03/26 08:11:09 downsj Exp 
d427 1
a427 1
int	sys_pipe	__P((struct proc *, void *, register_t *));
@


1.5
log
@Merge in NetBSD changes as if 3/19/97, undo some of ours.
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.4 1996/08/25 12:19:51 deraadt Exp 
@


1.4
log
@sync
@
text
@d221 4
d457 1
a457 1
int	sys_sigreturn	__P((struct proc *, void *, register_t *));
@


1.3
log
@Added Makefiles to build stuff from syscalls.master in some emulations.
Regenerated derived files from various syscalls.master files. Added $OpenBSD$.
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.3 1996/08/02 20:29:10 niklas Exp 
d175 6
d431 1
a431 1
int	sys_execve	__P((struct proc *, void *, register_t *));
@


1.2
log
@update from netbsd
@
text
@d5 1
a5 1
 * created from	NetBSD: syscalls.master,v 1.9 1995/11/28 08:39:56 thorpej Exp 
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 * created from	NetBSD: syscalls.master,v 1.8 1995/10/07 06:26:42 mycroft Exp 
d37 4
d46 5
a50 1
struct compat_hpux_6x_sys_time_args {
d54 18
a71 1
struct compat_hpux_6x_sys_stat_args {
d76 1
a76 1
struct compat_hpux_6x_sys_stime_args {
d87 1
a87 1
struct compat_hpux_6x_sys_alarm_args {
d91 1
a91 1
struct compat_hpux_6x_sys_fstat_args {
d96 1
a96 1
struct compat_hpux_6x_sys_utime_args {
d101 1
a101 1
struct compat_hpux_6x_sys_stty_args {
d106 1
a106 1
struct compat_hpux_6x_sys_gtty_args {
d111 6
a116 1
struct compat_hpux_6x_sys_nice_args {
d120 1
a120 1
struct compat_hpux_6x_sys_ftime_args {
d143 1
a143 1
struct compat_hpux_6x_sys_times_args {
d147 1
a147 1
struct compat_hpux_6x_sys_ssig_args {
d158 5
d169 6
d257 10
d271 9
d385 1
a385 1
int	sys_unlink	__P((struct proc *, void *, register_t *));
d387 5
a391 5
int	sys_chdir	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x_sys_time	__P((struct proc *, void *, register_t *));
int	sys_mknod	__P((struct proc *, void *, register_t *));
int	sys_chmod	__P((struct proc *, void *, register_t *));
int	sys_chown	__P((struct proc *, void *, register_t *));
d393 1
a393 1
int	compat_hpux_6x_sys_stat	__P((struct proc *, void *, register_t *));
d398 1
a398 1
int	compat_hpux_6x_sys_stime	__P((struct proc *, void *, register_t *));
d400 9
a408 9
int	compat_hpux_6x_sys_alarm	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x_sys_fstat	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x_sys_pause	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x_sys_utime	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x_sys_stty	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x_sys_gtty	__P((struct proc *, void *, register_t *));
int	sys_access	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x_sys_nice	__P((struct proc *, void *, register_t *));
int	compat_hpux_6x_sys_ftime	__P((struct proc *, void *, register_t *));
d412 1
a412 1
int	compat_hpux_6x_sys_setpgrp	__P((struct proc *, void *, register_t *));
d416 1
a416 1
int	compat_hpux_6x_sys_times	__P((struct proc *, void *, register_t *));
d420 1
a420 1
int	compat_hpux_6x_sys_ssig	__P((struct proc *, void *, register_t *));
d422 1
a422 1
int	sys_symlink	__P((struct proc *, void *, register_t *));
d424 1
a424 1
int	sys_readlink	__P((struct proc *, void *, register_t *));
d461 2
a462 2
int	sys_rename	__P((struct proc *, void *, register_t *));
int	compat_43_sys_truncate	__P((struct proc *, void *, register_t *));
d465 2
a466 2
int	sys_mkdir	__P((struct proc *, void *, register_t *));
int	sys_rmdir	__P((struct proc *, void *, register_t *));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
