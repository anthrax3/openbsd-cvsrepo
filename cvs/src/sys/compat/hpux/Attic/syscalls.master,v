head	1.11;
access;
symbols
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.6
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.4
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.4
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.10
	OPENBSD_2_8:1.6.0.8
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.6
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.4
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.11
date	2004.07.09.21.33.45;	author mickey;	state dead;
branches;
next	1.10;

1.10
date	2004.06.30.20.40.05;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.30.20.10.48;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.00.42.25;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.10.23.43.44;	author art;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	99.06.07.07.17.46;	author deraadt;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	97.03.26.08.11.09;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	96.08.25.12.19.51;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.02.20.29.10;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.04.47.19;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.15;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.15;	author deraadt;	state Exp;
branches;
next	;

1.6.4.1
date	2001.10.31.03.11.46;	author nate;	state Exp;
branches;
next	1.6.4.2;

1.6.4.2
date	2002.03.28.11.28.06;	author niklas;	state Exp;
branches;
next	1.6.4.3;

1.6.4.3
date	2003.03.27.23.53.47;	author niklas;	state Exp;
branches;
next	;

1.7.4.1
date	2002.06.11.03.28.08;	author art;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2003.05.19.21.52.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@split off the m68k-specific parts
@
text
@	$OpenBSD: syscalls.master,v 1.10 2004/06/30 20:40:05 mickey Exp $
;	$NetBSD: syscalls.master,v 1.13 1997/03/16 03:48:04 thorpej Exp $

;	@@(#)syscalls.master	8.1 (Berkeley) 7/19/93

; OpenBSD COMPAT_HPUX system call name/number "master" file.
; (See syscalls.conf to see what it is processed into.)
;
; Fields: number type [type-dependent ...]
;	number	system call number, must be in order
;	type	one of STD, OBSOL, UNIMPL, NODEF, NOARGS, or one of
;		the compatibility options defined in syscalls.conf.
;
; types:
;	STD	always included
;	OBSOL	obsolete, not included in system
;	UNIMPL	unimplemented, not included in system
;	NODEF	included, but don't define the syscall number
;	NOARGS	included, but don't define the syscall args structure
;
; The compat options are defined in the syscalls.conf file, and the
; compat option name is prefixed to the syscall name.  Other than
; that, they're like NODEF (for 'compat' options), or STD (for
; 'libcompat' options).
;
; The type-dependent arguments are as follows:
; For STD, NODEF, NOARGS, and compat syscalls:
;	{ pseudo-proto } [alias]
; For other syscalls:
;	[comment]
;
; #ifdef's, etc. may be included, and are copied to the output files.
; #include's are copied to the syscall switch definition file only.

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/signal.h>
#include <sys/mount.h>
#include <sys/exec.h>
#include <sys/syscallargs.h>

#include <compat/hpux/hpux.h>
#include <compat/hpux/hpux_syscallargs.h>

#include <machine/hpux_machdep.h>

0	NOARGS		{ int sys_nosys(void); } syscall
1	NOARGS		{ int sys_exit(int rval); }
2	STD		{ int hpux_sys_fork(void); }
3	STD		{ int hpux_sys_read(int fd, char *buf, u_int nbyte); }
4	STD		{ int hpux_sys_write(int fd, char *buf, u_int nbyte); }
5	STD		{ int hpux_sys_open(char *path, int flags, int mode); }
6	NOARGS		{ int sys_close(int fd); }
7	STD		{ int hpux_sys_wait(int *status); }
8	STD		{ int hpux_sys_creat(char *path, int mode); }
9	NOARGS	 	{ int sys_link(char *path, char *link); }
10	STD		{ int hpux_sys_unlink(char *path); }
11	STD		{ int hpux_sys_execv(char * path, char * * argp); }
12	STD		{ int hpux_sys_chdir(char *path); }
13	STD		{ int hpux_sys_time_6x(time_t *t); }
14	STD		{ int hpux_sys_mknod(char *path, int mode, int dev); }
15	STD		{ int hpux_sys_chmod(char *path, int mode); }
16	STD		{ int hpux_sys_chown(char *path, int uid, int gid); }
17	NOARGS		{ int sys_obreak(char *nsize); }
18	STD		{ int hpux_sys_stat_6x(char *path, \
			    struct hpux_ostat *sb); }
19	NOARGS		{ long compat_43_sys_lseek(int fd, long offset, \
			    int whence); }
20	NOARGS		{ pid_t sys_getpid(void); }
21	UNIMPL		mount
22	UNIMPL		umount
23	NOARGS		{ int sys_setuid(uid_t uid); }
24	NOARGS		{ uid_t sys_getuid(void); }
25	STD		{ int hpux_sys_stime_6x(int time); }
#ifdef PTRACE
26	STD		{ int hpux_sys_ptrace(int req, int pid, int *addr, \
			    int data); }
#else
26	UNIMPL		ptrace
#endif
27	STD		{ int hpux_sys_alarm_6x(int deltat); }
28	STD		{ int hpux_sys_fstat_6x(int fd, \
			    struct hpux_ostat *sb); }
29	STD		{ int hpux_sys_pause_6x(void); }
30	STD		{ int hpux_sys_utime_6x(char *fname, time_t *tptr); }
31	STD		{ int hpux_sys_stty_6x(int fd, caddr_t arg); }
32	STD		{ int hpux_sys_gtty_6x(int fd, caddr_t arg); }
33	STD		{ int hpux_sys_access(char *path, int flags); }
34	STD		{ int hpux_sys_nice_6x(int nval); }
35	STD		{ int hpux_sys_ftime_6x(struct hpux_timeb *tp); }
36	NOARGS		{ int sys_sync(void); }
37	STD		{ int hpux_sys_kill(pid_t pid, int signo); }
38	STD		{ int hpux_sys_stat(char *path, struct hpux_stat *sb); }
39	STD		{ int hpux_sys_setpgrp_6x(void); }
40	STD		{ int hpux_sys_lstat(char *path, struct hpux_stat *sb); }
41	NOARGS		{ int sys_dup(int fd); }
42	NOARGS		{ int sys_opipe(void); }
43	STD		{ int hpux_sys_times_6x(struct tms *tms); }
44	NOARGS		{ int sys_profil(caddr_t samples, u_int size, \
			    u_int offset, u_int scale); }

45	UNIMPL		ki_syscall
46	NOARGS		{ int sys_setgid(gid_t gid); }
47	NOARGS		{ gid_t sys_getgid(void); }
48	STD		{ int hpux_sys_ssig_6x(int signo, sig_t fun); }
49	UNIMPL		reserved for USG
50	UNIMPL		reserved for USG
51	UNIMPL		acct
52	UNIMPL
53	UNIMPL
54	STD		{ int hpux_sys_ioctl(int fd, int com, caddr_t data); }
55	UNIMPL		reboot
56	STD		{ int hpux_sys_symlink(char *path, char *link); }
57	STD		{ int hpux_sys_utssys(struct hpux_utsname *uts, \
					  int dev, int request); }
58	STD		{ int hpux_sys_readlink(char *path, char *buf, \
					  int count); }
59	STD		{ int hpux_sys_execve(char *path, char **argp, \
			    char **envp); }
60	NOARGS		{ int sys_umask(int newmask); }
61	NOARGS		{ int sys_chroot(char *path); }
62	STD		{ int hpux_sys_fcntl(int fd, int cmd, int arg); }
63	STD		{ int hpux_sys_ulimit(int cmd, int newlimit); }
64	UNIMPL
65	UNIMPL
66	STD		{ int hpux_sys_vfork(void); }
67	NOARGS		{ int hpux_sys_read(int fd, char *buf, u_int nbyte); } vread
68	NOARGS		{ int hpux_sys_write(int fd, char *buf, u_int nbyte); } vwrite
69	UNIMPL
70	UNIMPL
71	STD		{ int hpux_sys_mmap(caddr_t addr, size_t len, \
			    int prot, int flags, int fd, long pos); }
72	UNIMPL
73	NOARGS		{ int sys_munmap(caddr_t addr, size_t len); }
74	NOARGS		{ int sys_mprotect(caddr_t addr, size_t len, \
			    int prot); }
75	UNIMPL
76	UNIMPL
77	UNIMPL
78	UNIMPL
79	NOARGS		{ int sys_getgroups(u_int gidsetsize, gid_t *gidset); }
80	NOARGS		{ int sys_setgroups(u_int gidsetsize, gid_t *gidset); }
81	STD		{ int hpux_sys_getpgrp2(pid_t pid); }
82	STD		{ int hpux_sys_setpgrp2(pid_t pid, pid_t pgid); }
83	NOARGS		{ int sys_setitimer(u_int which, \
			    struct itimerval *itv, struct itimerval *oitv); }
84	STD		{ int hpux_sys_wait3(int *status, int options, \
			    int rusage); }
85	UNIMPL		swapon
86	NOARGS		{ int sys_getitimer(u_int which, \
			    struct itimerval *itv); }
87	UNIMPL
88	UNIMPL
89	UNIMPL
90	NOARGS		{ int sys_dup2(u_int from, u_int to); }
91	UNIMPL
92	STD		{ int hpux_sys_fstat(int fd, struct hpux_stat *sb); }
93	NOARGS		{ int sys_select(u_int nd, fd_set *in, fd_set *ou, \
			    fd_set *ex, struct timeval *tv); }
94	UNIMPL
95	NOARGS		{ int sys_fsync(int fd); }
96	UNIMPL
97	UNIMPL
98	UNIMPL
99	UNIMPL
100	UNIMPL
101	UNIMPL
102	UNIMPL
103	STD		{ int hpux_sys_sigreturn(struct hpuxsigcontext \
			    *sigcntxp); }
104	UNIMPL
105	UNIMPL
106	UNIMPL
107	UNIMPL
108	STD		{ int hpux_sys_sigvec(int signo, struct sigvec *nsv, \
			    struct sigvec *osv); }
109	STD		{ int hpux_sys_sigblock(int mask); }
110	STD		{ int hpux_sys_sigsetmask(int mask); }
111	STD		{ int hpux_sys_sigpause(int mask); }
112	NOARGS		{ int compat_43_sys_sigstack(struct sigstack *nss, \
			    struct sigstack *oss); }
113	UNIMPL
114	UNIMPL
115	UNIMPL
116	NOARGS		{ int sys_gettimeofday(struct timeval *tp); }
117	UNIMPL
118	UNIMPL
119	UNIMPL		io_stub
120	STD		{ int hpux_sys_readv(int fd, struct iovec *iovp, \
			    u_int iovcnt); }
121	STD		{ int hpux_sys_writev(int fd, struct iovec *iovp, \
			    u_int iovcnt); }
122	NOARGS		{ int sys_settimeofday(struct timeval *tv, \
			    struct timezone *tzp); }
123	NOARGS		{ int sys_fchown(int fd, int uid, int gid); }
124	NOARGS		{ int sys_fchmod(int fd, int mode); }
125	UNIMPL
126	NOARGS		{ int sys_setresuid(uid_t ruid, uid_t uide, \
			    uid_t suid); }
127	NOARGS		{ int sys_setresgid(gid_t rgid, gid_t egid, \
			    gid_t sgid); }
128	STD		{ int hpux_sys_rename(char *from, char *to); }
129	STD		{ int hpux_sys_truncate(char *path, long length); }
130	NOARGS		{ int compat_43_sys_ftruncate(int fd, long length); }
131	UNIMPL
132	STD		{ int hpux_sys_sysconf(int name); }
133	UNIMPL
134	UNIMPL
135	UNIMPL
136	STD		{ int hpux_sys_mkdir(char *path, int mode); }
137	STD		{ int hpux_sys_rmdir(char *path); }
138	UNIMPL
139	UNIMPL
140	UNIMPL
141	UNIMPL
142	UNIMPL
143	UNIMPL
144	STD		{ int hpux_sys_getrlimit(u_int which, \
			    struct ogetrlimit *rlp); }
145	STD		{ int hpux_sys_setrlimit(u_int which, \
			    struct ogetrlimit *rlp); }
146	UNIMPL
147	UNIMPL
148	UNIMPL
149	UNIMPL
150	UNIMPL
151	UNIMPL		privgrp
152	STD		{ int hpux_sys_rtprio(pid_t pid, int prio); }
153	UNIMPL		plock
154	STD		{ int hpux_sys_netioctl(int call, int *args); }
155	STD		{ int hpux_sys_lockf(int fd, int func, long size); }
#ifdef SYSVSEM
156	NOARGS		{ int sys_semget(key_t key, int nsems, int semflg); }
157	NOARGS		{ int sys___semctl(int semid, int semnum, int cmd, \
			    union semun *arg); }
158	NOARGS		{ int sys_semop(int semid, struct sembuf *sops, \
			    u_int nsops); }
#else
156	UNIMPL		semget
157	UNIMPL		semctl
158	UNIMPL		semop
#endif
#ifdef SYSVMSG
159	NOARGS		{ int sys_msgget(key_t key, int msgflg); }
160	NOARGS		{ int sys_msgctl(int msqid, int cmd, \
			    struct msqid_ds *buf); }
161	NOARGS		{ int sys_msgsnd(int msqid, void *msgp, size_t msgsz, \
			    int msgflg); }
162	NOARGS		{ int sys_msgrcv(int msqid, void *msgp, size_t msgsz, \
			    long msgtyp, int msgflg); }
#else
159	UNIMPL		msgget
160	UNIMPL		msgctl
161	UNIMPL		msgsnd
162	UNIMPL		msgrcv
#endif
#ifdef SYSVSHM
163	NOARGS		{ int sys_shmget(key_t key, int size, int shmflg); }
164	STD		{ int hpux_sys_shmctl(int shmid, int cmd, \
			    caddr_t buf); }
165	NOARGS		{ int sys_shmat(int shmid, void *shmaddr, int shmflg); }
166	NOARGS		{ int sys_shmdt(void *shmaddr); }
#else
163	UNIMPL		shmget
164	UNIMPL		shmctl
165	UNIMPL		shmat
166	UNIMPL		shmdt
#endif
167	STD		{ int hpux_sys_advise(int arg); }
168	UNIMPL		nsp_init
169	UNIMPL		cluster
170	UNIMPL		mkrnod
171	UNIMPL
172	UNIMPL		unsp_open
173	UNIMPL
174	STD		{ int hpux_sys_getcontext(char *buf, int len); }
175	UNIMPL		setcontext
176	UNIMPL		bigio
177	UNIMPL		pipenode
178	UNIMPL		lsync
179	UNIMPL		getmachineid
180	UNIMPL		mysite
181	UNIMPL		sitels
182	UNIMPL		swapclients
183	UNIMPL		rmtprocess
184	UNIMPL		dskless_stats
185	UNIMPL
186	UNIMPL		setacl
187	UNIMPL		fsetacl
188	UNIMPL		getacl
189	UNIMPL		fgetacl
190	STD		{ int hpux_sys_getaccess(char *path, uid_t uid, \
			    int ngroups, gid_t *gidset, void *label, \
			    void *privs); }
191	UNIMPL		getaudid
192	UNIMPL		setaudid
193	UNIMPL		getaudproc
194	UNIMPL		setaudproc
195	UNIMPL		getevent
196	UNIMPL		setevent
197	UNIMPL		audwrite
198	UNIMPL		audswitch
199	UNIMPL		audctl
200	STD		{ int hpux_sys_waitpid(pid_t pid, int *status, \
			    int options, struct rusage *rusage); }
201	UNIMPL
202	UNIMPL
203	UNIMPL
204	UNIMPL
205	UNIMPL
206	UNIMPL
207	UNIMPL
208	UNIMPL
209	UNIMPL
210	UNIMPL
211	UNIMPL
212	UNIMPL
213	UNIMPL
214	UNIMPL
215	UNIMPL
216	UNIMPL
217	UNIMPL
218	UNIMPL
219	UNIMPL
220	UNIMPL
221	UNIMPL
222	UNIMPL
223	UNIMPL
224	UNIMPL		set_no_trunc
225	NOARGS		{ int sys_pathconf(char *path, int name); }
226	NOARGS		{ int sys_fpathconf(int fd, int name); }
227	UNIMPL
228	UNIMPL
229	UNIMPL		async_daemon
230	UNIMPL		nfs_fcntl
231	NOARGS		{ int compat_43_sys_getdirentries(int fd, char *buf, \
			    u_int count, long *basep); }
232	NOARGS		{ int compat_09_sys_getdomainname(char *domainname, \
			    int len); }
233	UNIMPL		nfs_getfh
234	UNIMPL		vfsmount
235	UNIMPL		nfs_svc
236	NOARGS		{ int compat_09_sys_setdomainname(char *domainname, \
			    int len); }
237	UNIMPL		statfs
238	UNIMPL		fstatfs
239	STD		{ int hpux_sys_sigaction(int signo, \
			    struct hpux_sigaction *nsa, \
			    struct hpux_sigaction *osa); }
240	STD		{ int hpux_sys_sigprocmask(int how, \
			    hpux_sigset_t *set, hpux_sigset_t *oset); }
241	STD		{ int hpux_sys_sigpending(hpux_sigset_t *set); }
242	STD		{ int hpux_sys_sigsuspend(hpux_sigset_t *set); }
243	UNIMPL		fsctl
244	UNIMPL
245	UNIMPL		pstat
246	UNIMPL
247	UNIMPL
248	UNIMPL
249	UNIMPL
250	UNIMPL
251	UNIMPL		ulconnect
252	UNIMPL		ulcontrol
253	UNIMPL		ulcreate
254	UNIMPL		uldest
255	UNIMPL		ulrecv
256	UNIMPL		ulrecvcn
257	UNIMPL		ulsend
258	UNIMPL		ulshutdown
259	UNIMPL		swapfs
260	UNIMPL
261	UNIMPL
262	UNIMPL
263	UNIMPL
264	UNIMPL
265	UNIMPL
266	UNIMPL
267	UNIMPL		tsync
268	NOARGS		{ int compat_43_sys_getdtablesize(void); }
269	NOARGS		{ int sys_poll(struct pollfd *fds, u_int nfds, \
			    int timeout); }
270	UNIMPL		getmsg
271	UNIMPL		putmsg
272	NOARGS		{ int sys_fchdir(int fd); }
273	UNIMPL		getmount_cnt
274	UNIMPL		getmount_entry
275	NOARGS		{ int compat_43_sys_accept(int s, caddr_t name, \
			    int *anamelen); }
276	NOARGS		{ int sys_bind(int s, caddr_t name, int namelen); }
277	NOARGS		{ int sys_connect(int s, caddr_t name, int namelen); }
278	NOARGS		{ int compat_43_sys_getpeername(int fdes, caddr_t asa, \
			    int *alen); }
279	NOARGS		{ int compat_43_sys_getsockname(int fdec, caddr_t asa, \
			    int *alen); }
280	NOARGS		{ int sys_getsockopt(int s, int level, int name, \
			    caddr_t val, int *avalsize); }
281	NOARGS		{ int sys_listen(int s, int backlog); }
282	NOARGS		{ int compat_43_sys_recv(int s, caddr_t buf, int len, \
			    int flags); }
283	NOARGS		{ int compat_43_sys_recvfrom(int s, caddr_t buf, \
			    size_t len, int flags, caddr_t from, \
			    int *fromlenaddr); }
284	NOARGS		{ int compat_43_sys_recvmsg(int s, \
			    struct omsghdr *msg, int flags); }
285	NOARGS		{ int compat_43_sys_send(int s, caddr_t buf, int len, \
			    int flags); }
286	NOARGS		{ int compat_43_sys_sendmsg(int s, caddr_t msg, \
			    int flags); }
287	NOARGS		{ int sys_sendto(int s, caddr_t buf, size_t len, \
			    int flags, caddr_t to, int tolen); }
288	STD		{ int hpux_sys_setsockopt2(int s, int level, int name, \
			    caddr_t val, int valsize); }
289	NOARGS		{ int sys_shutdown(int s, int how); }
290	NOARGS		{ int sys_socket(int domain, int type, int protocol); }
291	NOARGS		{ int sys_socketpair(int domain, int type, \
			    int protocol, int *rsv); }
292	UNIMPL
293	UNIMPL
294	UNIMPL
295	UNIMPL
296	UNIMPL
297	UNIMPL
298	UNIMPL		ipccreate
299	UNIMPL		ipcname
300	UNIMPL		ipcnamerase
301	UNIMPL		ipclookup
302	UNIMPL		ipcselect
303	UNIMPL		ipcconnect
304	UNIMPL		ipcrecvcn
305	UNIMPL		ipcsend
306	UNIMPL		ipcrecv
307	UNIMPL		ipcgetnodename
308	UNIMPL		ipcsetnodename
309	UNIMPL		ipcontrol
310	UNIMPL		ipcshutdown
311	UNIMPL		ipcdest
#ifdef SYSVSEM
312	NOARGS		{ int sys___semctl(int semid, int semnum, int cmd, \
			    union semun *arg); } nsemctl
#else
312	UNIMPL		semctl
#endif
#ifdef SYSVMSG
313	NOARGS		{ int sys_msgctl(int msqid, int cmd, \
			    struct msqid_ds *buf); } nmsgctl
#else
313	UNIMPL		msgctl
#endif
#ifdef SYSVSHM
314	STD		{ int hpux_sys_nshmctl(int shmid, int cmd, \
			    caddr_t buf); }
#else
314	UNIMPL		shmctl
#endif
315	UNIMPL		mpctl
316	UNIMPL		exportfs
317	UNIMPL		getpmsg
318	UNIMPL		putpmsg
319	UNIMPL		strioctl
320	UNIMPL		msync
321	UNIMPL		msleep
322	UNIMPL		mwakeup
323	UNIMPL		msem_init
324	UNIMPL		msem_remove
@


1.10
log
@update from netbsd: use sys_poll() and label some other unimplemented ones; millert@@ ok
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.9 2002/10/30 20:10:48 millert Exp $
@


1.9
log
@Now that we have [gs]etres[ug]id() as a native system call, use it
for HP-UX, FreeBSD, and Linux emulations.  Note that Linux has two
versions of these system calls.  One for 16bit uids and another for
32bit uids.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.8 2002/03/14 00:42:25 miod Exp $
d277 3
a279 3
175	UNIMPL
176	UNIMPL
177	UNIMPL
d281 1
a281 1
179	UNIMPL
d284 2
a285 2
182	UNIMPL
183	UNIMPL
d329 1
a329 1
224	UNIMPL
d362 9
a370 9
251	UNIMPL
252	UNIMPL
253	UNIMPL
254	UNIMPL
255	UNIMPL
256	UNIMPL
257	UNIMPL
258	UNIMPL
259	UNIMPL
d378 1
a378 1
267	UNIMPL
d380 4
a383 3
269	UNIMPL
270	UNIMPL
271	UNIMPL
d385 2
a386 2
273	UNIMPL
274	UNIMPL
d423 14
a436 14
298	UNIMPL
299	UNIMPL
300	UNIMPL
301	UNIMPL
302	UNIMPL
303	UNIMPL
304	UNIMPL
305	UNIMPL
306	UNIMPL
307	UNIMPL
308	UNIMPL
309	UNIMPL
310	UNIMPL
311	UNIMPL
d455 10
@


1.8
log
@Turn the ptrace(2) syscall into a kernel compile option, option PTRACE in
your kernel configuration file.
By default, GENERIC will enable this.

When PTRACE is not enabled, several ptrace-like features of the procfs
filesystem will be disabled as well (namely, the ability to read and write
any process' registers, as well as attching, single stepping and detaching
to/from processes).

This should help paranoid people build better sandboxens, and us to build
smaller ramdisks.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.7 2001/10/10 23:43:44 art Exp $
d198 4
a201 2
126	STD		{ int hpux_sys_setresuid(uid_t r, uid_t e, uid_t s); }
127	STD		{ int hpux_sys_setresgid(gid_t r, gid_t e, gid_t s); }
@


1.7
log
@Don't roll our own dup, we cen use the standard one.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.6 1999/06/07 07:17:46 deraadt Exp $
d75 1
d78 3
@


1.7.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.7 2001/10/10 23:43:44 art Exp $
a74 1
#ifdef PTRACE
a76 3
#else
26	UNIMPL		ptrace
#endif
@


1.7.4.2
log
@sync
@
text
@d1 1
a1 1
	$OpenBSD$
d198 2
a199 4
126	NOARGS		{ int sys_setresuid(uid_t ruid, uid_t uide, \
			    uid_t suid); }
127	NOARGS		{ int sys_setresgid(gid_t rgid, gid_t egid, \
			    gid_t sgid); }
@


1.6
log
@replacement pipe() system call; copies data into place inside kernel, so
that EFAULT return value is possible
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.5 1997/03/26 08:11:09 downsj Exp $
d92 1
a92 1
41	STD		{ int hpux_sys_dup(int fd); }
@


1.6.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.6 1999/06/07 07:17:46 deraadt Exp $
d92 1
a92 1
41	NOARGS		{ int sys_dup(int fd); }
@


1.6.4.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
	$OpenBSD$
a74 1
#ifdef PTRACE
a76 3
#else
26	UNIMPL		ptrace
#endif
@


1.6.4.3
log
@Sync the SMP branch with 3.3
@
text
@d198 2
a199 4
126	NOARGS		{ int sys_setresuid(uid_t ruid, uid_t uide, \
			    uid_t suid); }
127	NOARGS		{ int sys_setresgid(gid_t rgid, gid_t egid, \
			    gid_t sgid); }
@


1.5
log
@Merge in NetBSD changes as if 3/19/97, undo some of ours.
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.4 1996/08/25 12:19:51 deraadt Exp $
d93 1
a93 1
42	NOARGS		{ int sys_pipe(void); }
@


1.4
log
@route execve via compat filename translation
@
text
@d1 2
a2 2
	$OpenBSD: syscalls.master,v 1.3 1996/08/02 20:29:10 niklas Exp $
;	$NetBSD: syscalls.master,v 1.9 1995/11/28 08:39:56 thorpej Exp $
d6 1
a6 1
; NetBSD COMPAT_HPUX system call name/number "master" file.
d45 2
d165 2
a166 1
103	NOARGS		{ int sys_sigreturn(struct sigcontext *sigcntxp); }
@


1.3
log
@Add $OpenBSD$
@
text
@d1 1
a1 1
	$OpenBSD: syscalls.master,v 1.9 1995/11/28 08:39:56 thorpej Exp $
d112 1
a112 1
59	NOARGS		{ int sys_execve(char *path, char **argp, \
@


1.2
log
@update from netbsd
@
text
@d1 2
a2 1
	$NetBSD: syscalls.master,v 1.9 1995/11/28 08:39:56 thorpej Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
	$NetBSD: syscalls.master,v 1.8 1995/10/07 06:26:42 mycroft Exp $
d38 1
d54 1
a54 1
10	NOARGS		{ int sys_unlink(char *path); }
d56 5
a60 5
12	NOARGS		{ int sys_chdir(char *path); }
13	COMPAT_HPUX_6X	{ int sys_time(time_t *t); }
14	NOARGS		{ int sys_mknod(char *path, int mode, int dev); }
15	NOARGS		{ int sys_chmod(char *path, int mode); }
16	NOARGS		{ int sys_chown(char *path, int uid, int gid); }
d62 2
a63 1
18	COMPAT_HPUX_6X	{ int sys_stat(char *path, struct hpux_ostat *sb); }
d71 1
a71 1
25	COMPAT_HPUX_6X	{ int sys_stime(int time); }
d74 10
a83 9
27	COMPAT_HPUX_6X	{ int sys_alarm(int deltat); }
28	COMPAT_HPUX_6X	{ int sys_fstat(int fd, struct hpux_ostat *sb); }
29	COMPAT_HPUX_6X	{ int sys_pause(void); }
30	COMPAT_HPUX_6X	{ int sys_utime(char *fname, time_t *tptr); }
31	COMPAT_HPUX_6X	{ int sys_stty(int fd, caddr_t arg); }
32	COMPAT_HPUX_6X	{ int sys_gtty(int fd, caddr_t arg); }
33	NOARGS		{ int sys_access(char *path, int flags); }
34	COMPAT_HPUX_6X	{ int sys_nice(int nval); }
35	COMPAT_HPUX_6X	{ int sys_ftime(struct hpux_timeb *tp); }
d87 1
a87 1
39	COMPAT_HPUX_6X	{ int sys_setpgrp(void); }
d91 1
a91 1
43	COMPAT_HPUX_6X	{ int sys_times(struct tms *tms); }
d98 1
a98 1
48	COMPAT_HPUX_6X	{ int sys_ssig(int signo, sig_t fun); }
d106 1
a106 1
56	NOARGS		{ int sys_symlink(char *path, char *link); }
d109 2
a110 1
58	NOARGS		{ int sys_readlink(char *path, char *buf, int count); }
d192 2
a193 2
128	NOARGS		{ int sys_rename(char *from, char *to); }
129	NOARGS		{ int compat_43_sys_truncate(char *path, long length); }
d200 2
a201 2
136	NOARGS		{ int sys_mkdir(char *path, int mode); }
137	NOARGS		{ int sys_rmdir(char *path); }
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
