head	1.14;
access;
symbols
	OPENBSD_4_7:1.13.0.22
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.24
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.20
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.18
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.16
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.14
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.12
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.10
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.8
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.6
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.6
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.11
	UBC:1.6.0.2
	UBC_BASE:1.6
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.14
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2010.07.01.17.30.27;	author tedu;	state dead;
branches;
next	1.13;

1.13
date	2004.07.09.23.52.02;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.10.01.08.03.01;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.23.15.39.31;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.02.18.06.25;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.20.31.31;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.26.50;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.12.18.41.20;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2000.09.07.17.52.23;	author ericj;	state Exp;
branches;
next	1.4;

1.4
date	97.01.23.16.12.19;	author niklas;	state Exp;
branches
	1.4.14.1;
next	1.3;

1.3
date	96.08.02.20.35.11;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.05.07.08.49.07;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.16;	author deraadt;	state Exp;
branches;
next	;

1.4.14.1
date	2001.05.14.22.04.32;	author niklas;	state Exp;
branches;
next	1.4.14.2;

1.4.14.2
date	2001.11.13.21.05.48;	author niklas;	state Exp;
branches;
next	1.4.14.3;

1.4.14.3
date	2002.03.06.02.07.08;	author niklas;	state Exp;
branches;
next	1.4.14.4;

1.4.14.4
date	2002.03.28.11.28.06;	author niklas;	state Exp;
branches;
next	1.4.14.5;

1.4.14.5
date	2003.03.27.23.53.47;	author niklas;	state Exp;
branches;
next	1.4.14.6;

1.4.14.6
date	2004.02.19.10.51.29;	author niklas;	state Exp;
branches;
next	;

1.6.2.1
date	2002.06.11.03.28.08;	author art;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2002.10.29.00.30.51;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@another day, another compat gets removed.  today is ibcs2's turn
@
text
@/*	$OpenBSD: ibcs2_stat.c,v 1.13 2004/07/09 23:52:02 millert Exp $	*/
/*	$NetBSD: ibcs2_stat.c,v 1.5 1996/05/03 17:05:32 christos Exp $	*/

/*
 * Copyright (c) 1995 Scott Bartram
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/namei.h>
#include <sys/proc.h>
#include <sys/file.h>
#include <sys/stat.h>
#include <sys/filedesc.h>
#include <sys/ioctl.h>
#include <sys/kernel.h>
#include <sys/mount.h>
#include <sys/malloc.h>
#include <sys/vnode.h>
#include <sys/syscallargs.h>

#include <uvm/uvm_extern.h>

#include <compat/ibcs2/ibcs2_types.h>
#include <compat/ibcs2/ibcs2_fcntl.h>
#include <compat/ibcs2/ibcs2_signal.h>
#include <compat/ibcs2/ibcs2_stat.h>
#include <compat/ibcs2/ibcs2_statfs.h>
#include <compat/ibcs2/ibcs2_syscallargs.h>
#include <compat/ibcs2/ibcs2_ustat.h>
#include <compat/ibcs2/ibcs2_util.h>
#include <compat/ibcs2/ibcs2_utsname.h>

static void bsd_stat2ibcs_stat(struct stat43 *, struct ibcs2_stat *);
static int cvt_statfs(struct statfs *, caddr_t, int);

static void
bsd_stat2ibcs_stat(st, st4)
	struct stat43 *st;
	struct ibcs2_stat *st4;
{
	bzero(st4, sizeof(*st4));
	st4->st_dev = (ibcs2_dev_t)st->st_dev;
	st4->st_ino = (ibcs2_ino_t)st->st_ino;
	st4->st_mode = (ibcs2_mode_t)st->st_mode;
	st4->st_nlink = (ibcs2_nlink_t)st->st_nlink;
	st4->st_uid = (ibcs2_uid_t)st->st_uid;
	st4->st_gid = (ibcs2_gid_t)st->st_gid;
	st4->st_rdev = (ibcs2_dev_t)st->st_rdev;
	st4->st_size = (ibcs2_off_t)st->st_size;
	st4->st_atim = (ibcs2_time_t)st->st_atime;
	st4->st_mtim = (ibcs2_time_t)st->st_mtime;
	st4->st_ctim = (ibcs2_time_t)st->st_ctime;
}

static int
cvt_statfs(sp, buf, len)
	struct statfs *sp;
	caddr_t buf;
	int len;
{
	struct ibcs2_statfs ssfs;

	if (len < 0)
		return (EINVAL);
	if (len > sizeof(ssfs))
		len = sizeof(ssfs);

	bzero(&ssfs, sizeof ssfs);
	ssfs.f_fstyp = 0;
	ssfs.f_bsize = sp->f_bsize;
	ssfs.f_frsize = 0;
	ssfs.f_blocks = sp->f_blocks;
	ssfs.f_bfree = sp->f_bfree;
	ssfs.f_files = sp->f_files;
	ssfs.f_ffree = sp->f_ffree;
	ssfs.f_fname[0] = 0;
	ssfs.f_fpack[0] = 0;
	return copyout((caddr_t)&ssfs, buf, len);
}	

int
ibcs2_sys_statfs(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct ibcs2_sys_statfs_args /* {
		syscallarg(char *) path;
		syscallarg(struct ibcs2_statfs *) buf;
		syscallarg(int) len;
		syscallarg(int) fstype;
	} */ *uap = v;
	register struct mount *mp;
	register struct statfs *sp;
	int error;
	struct nameidata nd;
	caddr_t sg = stackgap_init(p->p_emul);

	IBCS2_CHECK_ALT_EXIST(p, &sg, SCARG(uap, path));
	NDINIT(&nd, LOOKUP, FOLLOW, UIO_USERSPACE, SCARG(uap, path), p);
	if ((error = namei(&nd)) != 0)
		return (error);
	mp = nd.ni_vp->v_mount;
	sp = &mp->mnt_stat;
	vrele(nd.ni_vp);
	if ((error = VFS_STATFS(mp, sp, p)) != 0)
		return (error);
	sp->f_flags = mp->mnt_flag & MNT_VISFLAGMASK;
	return cvt_statfs(sp, (caddr_t)SCARG(uap, buf), SCARG(uap, len));
}

int
ibcs2_sys_fstatfs(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct ibcs2_sys_fstatfs_args /* {
		syscallarg(int) fd;
		syscallarg(struct ibcs2_statfs *) buf;
		syscallarg(int) len;
		syscallarg(int) fstype;
	} */ *uap = v;
	struct file *fp;
	struct mount *mp;
	register struct statfs *sp;
	int error;

	if ((error = getvnode(p->p_fd, SCARG(uap, fd), &fp)) != 0)
		return (error);
	mp = ((struct vnode *)fp->f_data)->v_mount;
	sp = &mp->mnt_stat;
	error = VFS_STATFS(mp, sp, p);
	FRELE(fp);
	if (error)
		return (error);
	sp->f_flags = mp->mnt_flag & MNT_VISFLAGMASK;
	return cvt_statfs(sp, (caddr_t)SCARG(uap, buf), SCARG(uap, len));
}

int
ibcs2_sys_stat(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct ibcs2_sys_stat_args /* {
		syscallarg(char *) path;
		syscallarg(struct ibcs2_stat *) st;
	} */ *uap = v;
	struct stat43 st;
	struct ibcs2_stat ibcs2_st;
	struct compat_43_sys_stat_args cup;
	int error;
	caddr_t sg = stackgap_init(p->p_emul);

	SCARG(&cup, ub) = stackgap_alloc(&sg, sizeof(st));
	IBCS2_CHECK_ALT_EXIST(p, &sg, SCARG(uap, path));
	SCARG(&cup, path) = SCARG(uap, path);

	if ((error = compat_43_sys_stat(p, &cup, retval)) != 0)
		return error;
	if ((error = copyin(SCARG(&cup, ub), &st, sizeof(st))) != 0)
		return error;
	bsd_stat2ibcs_stat(&st, &ibcs2_st);
	return copyout((caddr_t)&ibcs2_st, (caddr_t)SCARG(uap, st),
		       ibcs2_stat_len);
}

int
ibcs2_sys_lstat(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct ibcs2_sys_lstat_args /* {
		syscallarg(char *) path;
		syscallarg(struct ibcs2_stat *) st;
	} */ *uap = v;
	struct stat43 st;
	struct ibcs2_stat ibcs2_st;
	struct compat_43_sys_lstat_args cup;
	int error;
	caddr_t sg = stackgap_init(p->p_emul);

	SCARG(&cup, ub) = stackgap_alloc(&sg, sizeof(st));
	IBCS2_CHECK_ALT_EXIST(p, &sg, SCARG(uap, path));
	SCARG(&cup, path) = SCARG(uap, path);

	if ((error = compat_43_sys_lstat(p, &cup, retval)) != 0)
		return error;
	if ((error = copyin(SCARG(&cup, ub), &st, sizeof(st))) != 0)
		return error;
	bsd_stat2ibcs_stat(&st, &ibcs2_st);
	return copyout((caddr_t)&ibcs2_st, (caddr_t)SCARG(uap, st),
		       ibcs2_stat_len);
}

int
ibcs2_sys_fstat(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct ibcs2_sys_fstat_args /* {
		syscallarg(int) fd;
		syscallarg(struct ibcs2_stat *) st;
	} */ *uap = v;
	struct stat43 st;
	struct ibcs2_stat ibcs2_st;
	struct compat_43_sys_fstat_args cup;
	int error;
	caddr_t sg = stackgap_init(p->p_emul);

	SCARG(&cup, fd) = SCARG(uap, fd);
	SCARG(&cup, sb) = stackgap_alloc(&sg, sizeof(st));
	if ((error = compat_43_sys_fstat(p, &cup, retval)) != 0)
		return error;
	if ((error = copyin(SCARG(&cup, sb), &st, sizeof(st))) != 0)
		return error;
	bsd_stat2ibcs_stat(&st, &ibcs2_st);
	return copyout((caddr_t)&ibcs2_st, (caddr_t)SCARG(uap, st),
		       ibcs2_stat_len);
}

int
ibcs2_sys_utssys(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct ibcs2_sys_utssys_args /* {
		syscallarg(int) a1;
		syscallarg(int) a2;
		syscallarg(int) flag;
	} */ *uap = v;

	switch (SCARG(uap, flag)) {
	case 0:			/* uname(2) */
	{
		struct ibcs2_utsname sut;
		extern char machine[];

		bzero(&sut, ibcs2_utsname_len);
		bcopy(ostype, sut.sysname, sizeof(sut.sysname) - 1);
		bcopy(hostname, sut.nodename, sizeof(sut.nodename));
		sut.nodename[sizeof(sut.nodename)-1] = '\0';
		bcopy(osrelease, sut.release, sizeof(sut.release) - 1);
		strlcpy(sut.version, "1", sizeof(sut.version));
		bcopy(machine, sut.machine, sizeof(sut.machine) - 1);

		return copyout((caddr_t)&sut, (caddr_t)SCARG(uap, a1),
			       ibcs2_utsname_len);
	}

	case 2:			/* ustat(2) */
	{
		return ENOSYS;	/* XXX - TODO */
	}

	default:
		return ENOSYS;
	}
}
@


1.13
log
@Rename ostat -> stat43 to disambiguate from upcoming struct stat changes.
Idea from NetBSD, OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.12 2003/10/01 08:03:01 itojun Exp $	*/
@


1.12
log
@out-of-bound memory access.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.11 2002/08/23 15:39:31 art Exp $	*/
d57 1
a57 1
static void bsd_stat2ibcs_stat(struct ostat *, struct ibcs2_stat *);
d62 1
a62 1
	struct ostat *st;
d175 1
a175 1
	struct ostat st;
d204 1
a204 1
	struct ostat st;
d233 1
a233 1
	struct ostat st;
@


1.11
log
@Cleanup change. Since almost all callers (except one) of getvnode did a FREF
on the returned file, do the FREF inside getvnode so that people can't
get away with avoiding FREF and FRELE.

Eyeballed by various people.
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.10 2002/08/02 18:06:25 millert Exp $	*/
d273 1
a273 1
		bcopy("1", sut.version, sizeof(sut.version) - 1);
@


1.10
log
@More possible int overflows found by Silvio Cesare.
ibcs2_stat.c one OK by provos@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.9 2002/03/14 20:31:31 mickey Exp $	*/
a156 1
	FREF(fp);
@


1.9
log
@remove ambiguity in version,ostype,osversion,osrelease and their constanity, they are and declarre 'em accordingly also removing private externies of those
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.8 2002/03/14 01:26:50 millert Exp $	*/
d86 5
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.7 2002/02/12 18:41:20 art Exp $	*/
d262 1
a262 1
		extern char ostype[], machine[], osrelease[];
@


1.7
log
@More FREF/FRELE protection. This time all users of getvnode.
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.6 2001/11/06 19:53:17 miod Exp $	*/
d57 2
a58 2
static void bsd_stat2ibcs_stat __P((struct ostat *, struct ibcs2_stat *));
static int cvt_statfs __P((struct statfs *, caddr_t, int));
@


1.6
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.5 2000/09/07 17:52:23 ericj Exp $	*/
d152 4
a155 1
	if ((error = VFS_STATFS(mp, sp, p)) != 0)
@


1.6.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.6 2001/11/06 19:53:17 miod Exp $	*/
d57 2
a58 2
static void bsd_stat2ibcs_stat(struct ostat *, struct ibcs2_stat *);
static int cvt_statfs(struct statfs *, caddr_t, int);
d152 1
a152 4
	FREF(fp);
	error = VFS_STATFS(mp, sp, p);
	FRELE(fp);
	if (error)
d259 1
a259 1
		extern char machine[];
@


1.6.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.6.2.1 2002/06/11 03:28:08 art Exp $	*/
a86 5
	if (len < 0)
		return (EINVAL);
	if (len > sizeof(ssfs))
		len = sizeof(ssfs);

d152 1
@


1.5
log
@common/compat_util.c
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.4 1997/01/23 16:12:19 niklas Exp $	*/
d45 1
a45 1
#include <vm/vm.h>
@


1.4
log
@Sync with NetBSD 970118
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.3 1996/08/02 20:35:11 niklas Exp $	*/
d174 1
d177 1
a177 1
	SCARG(&cup, ub) = stackgap_alloc(&sg, sizeof(st));
d203 1
d206 1
a206 1
	SCARG(&cup, ub) = stackgap_alloc(&sg, sizeof(st));
@


1.4.14.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.5 2000/09/07 17:52:23 ericj Exp $	*/
a173 1
	SCARG(&cup, ub) = stackgap_alloc(&sg, sizeof(st));
d176 1
a176 1

a201 1
	SCARG(&cup, ub) = stackgap_alloc(&sg, sizeof(st));
d204 1
a204 1

@


1.4.14.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
#include <uvm/uvm_extern.h>
@


1.4.14.3
log
@Merge in trunk
@
text
@d152 1
a152 4
	FREF(fp);
	error = VFS_STATFS(mp, sp, p);
	FRELE(fp);
	if (error)
@


1.4.14.4
log
@Merge in -current from about a week ago
@
text
@d57 2
a58 2
static void bsd_stat2ibcs_stat(struct ostat *, struct ibcs2_stat *);
static int cvt_statfs(struct statfs *, caddr_t, int);
d262 1
a262 1
		extern char machine[];
@


1.4.14.5
log
@Sync the SMP branch with 3.3
@
text
@a86 5
	if (len < 0)
		return (EINVAL);
	if (len > sizeof(ssfs))
		len = sizeof(ssfs);

d152 1
@


1.4.14.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d273 1
a273 1
		strlcpy(sut.version, "1", sizeof(sut.version));
@


1.3
log
@Added Makefiles to build stuff from syscalls.master in some emulations.
Regenerated derived files from various syscalls.master files. Added $OpenBSD$.
@
text
@d1 1
a1 1
/*	$OpenBSD: ibcs2_stat.c,v 1.5 1996/05/03 17:05:32 christos Exp $	*/
d3 1
@


1.2
log
@sync with 0504; mostly proto changes (some svr4 ioctl changes)
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
d55 2
d118 1
a118 1
	if (error = namei(&nd))
d123 1
a123 1
	if (error = VFS_STATFS(mp, sp, p))
d146 1
a146 1
	if (error = getvnode(p->p_fd, SCARG(uap, fd), &fp))
d150 1
a150 1
	if (error = VFS_STATFS(mp, sp, p))
d175 1
a175 1
	if (error = compat_43_sys_stat(p, &cup, retval))
d177 1
a177 1
	if (error = copyin(SCARG(&cup, ub), &st, sizeof(st)))
d203 1
a203 1
	if (error = compat_43_sys_lstat(p, &cup, retval))
d205 1
a205 1
	if (error = copyin(SCARG(&cup, ub), &st, sizeof(st)))
d230 1
a230 1
	if (error = compat_43_sys_fstat(p, &cup, retval))
d232 1
a232 1
	if (error = copyin(SCARG(&cup, sb), &st, sizeof(st)))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
