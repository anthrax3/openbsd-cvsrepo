head	1.16;
access;
symbols
	OPENBSD_4_1:1.15.0.2
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.14.0.8
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.6
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.4
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.8
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.6
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.4
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.12.0.2
	UBC_BASE:1.12
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.2
	SMP_BASE:1.8
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.16
date	2007.05.28.23.10.10;	author beck;	state dead;
branches;
next	1.15;

1.15
date	2007.01.16.17.52.18;	author thib;	state Exp;
branches;
next	1.14;

1.14
date	2004.11.23.19.08.54;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.02.23.28.00;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2001.11.06.18.41.10;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.03.20.37.16;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	2001.02.26.17.24.55;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.26.16.32.32;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.31.19.57.21;	author deraadt;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2000.01.31.01.09.11;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.28.19.45.04;	author art;	state Exp;
branches;
next	1.5;

1.5
date	99.09.17.15.03.18;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	99.09.17.13.41.29;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	99.09.16.13.20.06;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	99.09.15.21.00.10;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	99.09.15.18.36.38;	author kstailey;	state Exp;
branches;
next	;

1.8.2.1
date	2001.05.14.22.04.56;	author niklas;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2001.11.13.21.05.48;	author niklas;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2003.06.07.11.00.36;	author ho;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Maintaining a broken compatibility layer for a broken OS is not a productive
activity for anyone. Bye bye COMPAT_NETBSD. ok tedu@@, deraadt@@, and many others
in the hackathon room.
@
text
@/*	$OpenBSD: netbsd_misc.c,v 1.15 2007/01/16 17:52:18 thib Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1989, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)kern_fork.c	8.6 (Berkeley) 4/8/94
 *	@@(#)vfs_syscalls.c	8.28 (Berkeley) 12/10/94
 */

#include <sys/param.h>
#include <sys/file.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/proc.h>
#include <sys/stat.h>
#include <sys/vnode.h>

#include <compat/netbsd/netbsd_types.h>
#include <compat/netbsd/netbsd_signal.h>
#include <compat/netbsd/netbsd_syscallargs.h>

/*ARGSUSED*/
int
netbsd_sys___vfork14(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	return (fork1(p, SIGCHLD, FORK_PPWAIT|FORK_SHAREVM, NULL, 0, NULL,
	    NULL, retval, NULL));
}

/* XXX syncs whole file */
/*ARGSUSED*/
int
netbsd_sys_fdatasync(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct netbsd_sys_fdatasync_args /* {
		syscallarg(int) fd;
	} */ *uap = v;

	return sys_fsync(p, uap, retval);
}

/*ARGSUSED*/
int
netbsd_sys_lchmod(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct netbsd_sys_lchmod_args /* {
		syscallarg(char *) path;
		syscallarg(netbsd_mode_t) mode;
	} */ *uap = v;
	register struct vnode *vp;
	struct vattr vattr;
	int error;
	struct nameidata nd;

	if (SCARG(uap, mode) & ~(S_IFMT | ALLPERMS))
		return (EINVAL);

	NDINIT(&nd, LOOKUP, NOFOLLOW, UIO_USERSPACE, SCARG(uap, path), p);
	if ((error = namei(&nd)) != 0)
		return (error);
	vp = nd.ni_vp;
	vn_lock(vp, LK_EXCLUSIVE | LK_RETRY, p);
	if (vp->v_mount->mnt_flag & MNT_RDONLY)
		error = EROFS;
	else {
		VATTR_NULL(&vattr);
		vattr.va_mode = SCARG(uap, mode) & ALLPERMS;
		error = VOP_SETATTR(vp, &vattr, p->p_ucred, p);
	}
	vput(vp);
	return (error);
}

/*ARGSUSED*/
int
netbsd_sys_lutimes(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
        register struct netbsd_sys_lutimes_args /* {
                syscallarg(const char *) path;
                syscallarg(const struct timeval *) tptr;
        } */ *uap = v;
        register struct vnode *vp;
        struct timeval tv[2];
        struct vattr vattr;
        int error;
        struct nameidata nd;

        VATTR_NULL(&vattr);
        if (SCARG(uap, tptr) == NULL) {
                microtime(&tv[0]);
                tv[1] = tv[0];
                vattr.va_vaflags |= VA_UTIMES_NULL;
        } else {
                error = copyin((caddr_t)SCARG(uap, tptr), (caddr_t)tv,
                               sizeof (tv));
                if (error)
                        return (error);
		/* XXX workaround timeval matching the VFS constant VNOVAL */
		if (tv[0].tv_sec == VNOVAL)
			tv[0].tv_sec = VNOVAL - 1;
		if (tv[1].tv_sec == VNOVAL)
			tv[1].tv_sec = VNOVAL - 1;
        }
        NDINIT(&nd, LOOKUP, NOFOLLOW, UIO_USERSPACE, SCARG(uap, path), p);
        if ((error = namei(&nd)) != 0)
                return (error);
        vp = nd.ni_vp;
	vn_lock(vp, LK_EXCLUSIVE | LK_RETRY, p);
        if (vp->v_mount->mnt_flag & MNT_RDONLY)
                error = EROFS;
        else {
                vattr.va_atime.tv_sec = tv[0].tv_sec;
                vattr.va_atime.tv_nsec = tv[0].tv_usec * 1000;
                vattr.va_mtime.tv_sec = tv[1].tv_sec;
                vattr.va_mtime.tv_nsec = tv[1].tv_usec * 1000;
                error = VOP_SETATTR(vp, &vattr, p->p_ucred, p);
        }
	vput(vp);
        return (error);
}
@


1.15
log
@Retire VOP_LEASE(); It was a bit for NQNFS and has
effectively been a no-op for quite some time now,
without promise for future usage.

ok pedro@@
Testing by krw@@ (earlier diff)
and Johan Mson Lindman (tybollt@@solace.miun.se)
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.14 2004/11/23 19:08:54 miod Exp $	*/
@


1.14
log
@Create the init process earlier, before the root filesystem is mounted,
and have it stall on a semaphore. This allows all kthread creations which
could have been requested during autoconf to be processed before root
is mounted as well.

This causes umass devices attached to any usb with flags 1 (such as on macppc)
to configure properly instead of panicing the kernel at mountroot time.

From NetBSD; tested by various.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.13 2003/06/02 23:28:00 millert Exp $	*/
a100 1
	VOP_LEASE(vp, p, p->p_ucred, LEASE_WRITE);
a149 1
        VOP_LEASE(vp, p, p->p_ucred, LEASE_WRITE);
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.12 2001/11/06 18:41:10 art Exp $	*/
d60 1
a60 1
	    NULL, retval));
@


1.12
log
@Let fork1, uvm_fork, and cpu_fork take a function/argument pair as argument,
instead of doing fork1, cpu_set_kpc. This lets us retire cpu_set_kpc and
avoid a multiprocessor race.

This commit breaks vax because it doesn't look like any other arch, someone
working on vax might want to look at this and try to adapt the code to be
more like the rest of the world.

Idea and uvm parts from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.11 2001/04/03 20:37:16 niklas Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.11
log
@We now can emulate vfork14 correctly
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.10 2001/02/26 17:24:55 art Exp $	*/
d63 2
a64 1
	return (fork1(p, SIGCHLD, FORK_PPWAIT|FORK_SHAREVM, NULL, 0, retval));
@


1.10
log
@Since netbsd_sys_fdatasync is the same code as sys_fsync, we
can simply call sys_fsync instead of copying code.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.9 2001/02/26 16:32:32 art Exp $	*/
a55 1
/* XXX doesn't do shared address space */
d63 1
a63 2
	/* XXX - should add FORK_SHAREVM */
	return (fork1(p, FORK_VFORK|FORK_PPWAIT, NULL, 0, retval));
@


1.9
log
@adapt to new softupdates changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.8 2000/01/31 19:57:21 deraadt Exp $	*/
a78 13
	register struct vnode *vp;
	struct file *fp;
	int error;

	if ((error = getvnode(p->p_fd, SCARG(uap, fd), &fp)) != 0)
		return (error);
	vp = (struct vnode *)fp->f_data;
	vn_lock(vp, LK_EXCLUSIVE | LK_RETRY, p);
	error = VOP_FSYNC(vp, fp->f_cred, MNT_WAIT, p);
#ifdef FFS_SOFTUPDATES
	if (error == 0 && vp->v_mount && (vp->v_mount->mnt_flag & MNT_SOFTDEP))
		error = softdep_fsync(vp);
#endif  
d80 1
a80 2
	VOP_UNLOCK(vp, 0, p);
	return (error);
@


1.8
log
@re-add fixed vfork code from art
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.6 2000/01/28 19:45:04 art Exp $	*/
d87 5
a91 3
	if ((error = VOP_FSYNC(vp, fp->f_cred, MNT_WAIT, p)) == 0 &&
	    bioops.io_fsync != NULL)
		error = (*bioops.io_fsync)(vp);
@


1.8.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.11 2001/04/03 20:37:16 niklas Exp $	*/
d56 1
d64 2
a65 1
	return (fork1(p, SIGCHLD, FORK_PPWAIT|FORK_SHAREVM, NULL, 0, retval));
d79 11
d91 2
a92 1
	return sys_fsync(p, uap, retval);
@


1.8.2.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 1
a63 2
	return (fork1(p, SIGCHLD, FORK_PPWAIT|FORK_SHAREVM, NULL, 0, NULL,
	    NULL, retval));
@


1.8.2.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.8.2.2 2001/11/13 21:05:48 niklas Exp $	*/
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.7
log
@undo vfork changes, since non-UVM was not considered
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.5 1999/09/17 15:03:18 kstailey Exp $	*/
d64 2
a65 1
	return (fork1(p, ISVFORK, 0, NULL, 0, retval));
@


1.6
log
@Change fork1() from taking forktype and rforkflags, into a single flags
argument. Let sys_rfork build the arguments to fork1() and do the
sanity checks itself.
@
text
@d64 1
a64 2
	/* XXX - should add FORK_SHAREVM */
	return (fork1(p, FORK_VFORK|FORK_PPWAIT, NULL, 0, retval));
@


1.5
log
@lcrap()
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.4 1999/09/17 13:41:29 kstailey Exp $	*/
d64 2
a65 1
	return (fork1(p, ISVFORK, 0, NULL, 0, retval));
@


1.4
log
@rest of pread() etc., fdatasync() hack
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.3 1999/09/16 13:20:06 kstailey Exp $	*/
d47 1
d49 1
d92 88
@


1.3
log
@signal fixes (csh runs)
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.2 1999/09/15 21:00:10 kstailey Exp $	*/
d41 1
d45 2
d48 1
d63 27
@


1.2
log
@tag + copyright
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_misc.c,v 1.1 1999/09/15 18:36:38 kstailey Exp $	*/
d51 1
@


1.1
log
@more and better signal routines, vfork()
@
text
@d1 41
a41 1
/*	$OpenBSD$	*/
a43 1
/* #include <sys/systm.h> */
@

