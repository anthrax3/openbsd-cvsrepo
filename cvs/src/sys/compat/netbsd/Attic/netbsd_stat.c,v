head	1.18;
access;
symbols
	OPENBSD_4_1:1.17.0.12
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.17.0.10
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.8
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.6
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.4
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.2
	OPENBSD_3_6_BASE:1.17
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.16.0.4
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.6
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.4
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.14.0.2
	OPENBSD_3_1_BASE:1.14
	UBC_SYNC_B:1.14
	UBC:1.12.0.2
	UBC_BASE:1.12
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.4
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5;
locks; strict;
comment	@ * @;


1.18
date	2007.05.28.23.10.10;	author beck;	state dead;
branches;
next	1.17;

1.17
date	2004.07.09.23.52.02;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.08.15.20.32.16;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.23.28.00;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.03.14.01.26.50;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.13.19.08.06;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2001.10.26.12.03.27;	author art;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2001.05.15.08.04.31;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.14.13.28.22;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.14.12.11.53;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.14.11.05.38;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.14.11.04.05;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.14.10.51.27;	author art;	state Exp;
branches;
next	1.5;

1.5
date	99.09.22.01.35.01;	author kstailey;	state Exp;
branches
	1.5.4.1
	1.5.10.1;
next	1.4;

1.4
date	99.09.17.22.14.09;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	99.09.17.12.13.47;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	99.09.14.01.05.25;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	99.09.12.14.15.16;	author kstailey;	state Exp;
branches;
next	;

1.5.4.1
date	2001.07.04.10.39.32;	author niklas;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2001.10.31.03.11.46;	author nate;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2002.03.06.02.07.08;	author niklas;	state Exp;
branches;
next	1.5.4.4;

1.5.4.4
date	2002.03.28.11.28.06;	author niklas;	state Exp;
branches;
next	1.5.4.5;

1.5.4.5
date	2003.06.07.11.00.36;	author ho;	state Exp;
branches;
next	1.5.4.6;

1.5.4.6
date	2004.02.19.10.51.29;	author niklas;	state Exp;
branches;
next	;

1.5.10.1
date	2001.05.31.05.08.33;	author jason;	state Exp;
branches;
next	;

1.12.2.1
date	2002.06.11.03.28.08;	author art;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Maintaining a broken compatibility layer for a broken OS is not a productive
activity for anyone. Bye bye COMPAT_NETBSD. ok tedu@@, deraadt@@, and many others
in the hackathon room.
@
text
@/*	$OpenBSD: netbsd_stat.c,v 1.17 2004/07/09 23:52:02 millert Exp $	*/
/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)vfs_syscalls.c	8.42 (Berkeley) 7/31/95
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/file.h>
#include <sys/filedesc.h>
#include <sys/proc.h>
#include <sys/socketvar.h>
#include <sys/stat.h>
#include <sys/pipe.h>
#include <sys/mount.h>
#include <sys/namei.h>
#include <sys/vnode.h>

#include <sys/syscallargs.h>

#include <compat/netbsd/netbsd_types.h>
#include <compat/netbsd/netbsd_stat.h>
#include <compat/netbsd/netbsd_signal.h>
#include <compat/netbsd/netbsd_syscallargs.h>
#include <compat/netbsd/netbsd_util.h>

static void openbsd_to_netbsd_stat(struct stat *, struct netbsd_stat *);

static void
openbsd_to_netbsd_stat(obst, nbst)
	struct stat		*obst;
	struct netbsd_stat 	*nbst;
{
	bzero(nbst, sizeof(*nbst));
	nbst->st_dev = obst->st_dev;
	nbst->st_ino = obst->st_ino;
	nbst->st_mode = obst->st_mode;
	nbst->st_nlink = obst->st_nlink;
	nbst->st_uid = obst->st_uid;
	nbst->st_gid = obst->st_gid;
	nbst->st_rdev = obst->st_rdev;
#if !defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)
	nbst->st_atimespec.tv_sec  = obst->st_atimespec.tv_sec;
	nbst->st_atimespec.tv_nsec = obst->st_atimespec.tv_nsec;
	nbst->st_mtimespec.tv_sec  = obst->st_mtimespec.tv_sec;
	nbst->st_mtimespec.tv_nsec = obst->st_mtimespec.tv_nsec;
	nbst->st_ctimespec.tv_sec  = obst->st_ctimespec.tv_sec;
	nbst->st_ctimespec.tv_nsec = obst->st_ctimespec.tv_nsec;
#else
	nbst->st_atime     = obst->st_atime;
	nbst->st_atimensec = obst->st_atimensec;
	nbst->st_mtime     = obst->st_mtime;
	nbst->st_mtimensec = obst->st_mtimensec;
	nbst->st_ctime     = obst->st_ctime;
	nbst->st_ctimensec = obst->st_ctimensec;
#endif
	nbst->st_size = obst->st_size;
	nbst->st_blocks = obst->st_blocks;
	nbst->st_blksize = obst->st_blksize;
	nbst->st_flags = obst->st_flags;
	nbst->st_gen = obst->st_gen;
	bcopy(obst->st_qspare, nbst->st_qspare, sizeof(obst->st_qspare));
}

/*
 * Get file status; this version follows links.
 */
/* ARGSUSED */
int
netbsd_sys___stat13(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct netbsd_sys___stat13_args /* {
		syscallarg(char *) path;
		syscallarg(struct netbsd_stat *) nsb;
	} */ *uap = v;
	struct netbsd_stat nsb;
	struct stat sb;
	int error;
	struct nameidata nd;
	caddr_t sg = stackgap_init(p->p_emul);

	NETBSD_CHECK_ALT_EXIST(p, &sg, SCARG(uap, path));
	NDINIT(&nd, LOOKUP, FOLLOW | LOCKLEAF, UIO_USERSPACE,
	    SCARG(uap, path), p);
	if ((error = namei(&nd)) != 0)
		return (error);
	error = vn_stat(nd.ni_vp, &sb, p);
	vput(nd.ni_vp);
	if (error)
		return (error);
	/* Don't let non-root see generation numbers (for NFS security) */
	if (suser(p, 0))
		sb.st_gen = 0;
	openbsd_to_netbsd_stat(&sb, &nsb);
	error = copyout(&nsb, SCARG(uap, ub), sizeof(nsb));
	return (error);
}

/*
 * Get file status; this version does not follow links.
 */
/* ARGSUSED */
int
netbsd_sys___lstat13(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct netbsd_sys___lstat13_args /* {
		syscallarg(char *) path;
		syscallarg(struct netbsd_stat *) ub;
	} */ *uap = v;
	struct netbsd_stat nsb;
	struct stat sb;
	int error;
	struct nameidata nd;
	caddr_t sg = stackgap_init(p->p_emul);

	NETBSD_CHECK_ALT_EXIST(p, &sg, SCARG(uap, path));
	NDINIT(&nd, LOOKUP, NOFOLLOW | LOCKLEAF, UIO_USERSPACE,
	    SCARG(uap, path), p);
	if ((error = namei(&nd)) != 0)
		return (error);
	error = vn_stat(nd.ni_vp, &sb, p);
	vput(nd.ni_vp);
	if (error)
		return (error);
	/* Don't let non-root see generation numbers (for NFS security) */
	if (suser(p, 0))
		sb.st_gen = 0;
	openbsd_to_netbsd_stat(&sb, &nsb);
	error = copyout(&nsb, SCARG(uap, ub), sizeof(nsb));
	return (error);
}

/*
 * Return status information about a file descriptor.
 */
/* ARGSUSED */
int
netbsd_sys___fstat13(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct netbsd_sys___fstat13_args /* {
		syscallarg(int) fd;
		syscallarg(struct netbsd_stat *) ub;
	} */ *uap = v;
	int fd = SCARG(uap, fd);
	register struct filedesc *fdp = p->p_fd;
	register struct file *fp;
	struct netbsd_stat nsb;
	struct stat sb;
	int error;

	if ((fp = fd_getfile(fdp, fd)) == NULL)
		return (EBADF);

	FREF(fp);
	error = (*fp->f_ops->fo_stat)(fp, &sb, p);
	FRELE(fp);
	if (error)
		return (error);
	openbsd_to_netbsd_stat(&sb, &nsb);
	error = copyout(&nsb, SCARG(uap, ub), sizeof(nsb));
	return (error);
}

int
compat_43_netbsd_sys_stat(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct compat_43_netbsd_sys_stat_args /* {
		syscallarg(char *) path;
		syscallarg(struct stat43 *) ub;
	} */ *uap = v;
	caddr_t sg = stackgap_init(p->p_emul);

	NETBSD_CHECK_ALT_EXIST(p, &sg, SCARG(uap, path));
	return compat_43_sys_stat(p, uap, retval);
}

int
compat_43_netbsd_sys_lstat(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct compat_43_netbsd_sys_lstat_args /* {
		syscallarg(char *) path;
		syscallarg(struct stat43 *) ub;
	} */ *uap = v;
	caddr_t sg = stackgap_init(p->p_emul);

	NETBSD_CHECK_ALT_EXIST(p, &sg, SCARG(uap, path));
	return compat_43_sys_lstat(p, uap, retval);
}

int
netbsd_sys_stat(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct netbsd_sys_stat_args /* {
		syscallarg(char *) path;
		syscallarg(struct stat *) ub;
	} */ *uap = v;
	caddr_t sg = stackgap_init(p->p_emul);

	NETBSD_CHECK_ALT_EXIST(p, &sg, SCARG(uap, path));
	return sys_stat(p, uap, retval);
}

int
netbsd_sys_lstat(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct netbsd_sys_lstat_args /* {
		syscallarg(char *) path;
		syscallarg(struct stat *) ub;
	} */ *uap = v;
	caddr_t sg = stackgap_init(p->p_emul);

	NETBSD_CHECK_ALT_EXIST(p, &sg, SCARG(uap, path));
	return sys_lstat(p, uap, retval);
}
@


1.17
log
@Rename ostat -> stat43 to disambiguate from upcoming struct stat changes.
Idea from NetBSD, OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.16 2003/08/15 20:32:16 tedu Exp $	*/
@


1.16
log
@change arguments to suser.  suser now takes the process, and a flags
argument.  old cred only calls user suser_ucred.  this will allow future
work to more flexibly implement the idea of a root process.  looks like
something i saw in freebsd, but a little different.
use of suser_ucred vs suser in file system code should be looked at again,
for the moment semantics remain unchanged.
review and input from art@@  testing and further review miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.15 2003/06/02 23:28:00 millert Exp $	*/
d212 1
a212 1
		syscallarg(struct ostat *) ub;
d228 1
a228 1
		syscallarg(struct ostat *) ub;
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.14 2002/03/14 01:26:50 millert Exp $	*/
d126 1
a126 1
	if (suser(p->p_ucred, &p->p_acflag))
d163 1
a163 1
	if (suser(p->p_ucred, &p->p_acflag))
@


1.14
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.13 2002/02/13 19:08:06 art Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.13
log
@More FREF/FRELE on relevant places. Now, only sys_mmap and a bunch of ioctl functions in sys/compat are left.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.12 2001/10/26 12:03:27 art Exp $	*/
d62 1
a62 1
static void openbsd_to_netbsd_stat __P((struct stat *, struct netbsd_stat *));
@


1.12
log
@ - every new fd created by falloc() is marked as larval and should not be used
   any anyone. Every caller of falloc matures the fd when it's usable.
 - Since every lookup in the fd table must now check this flag and all of
   them do the same thing, move all the necessary checks into a function -
   fd_getfile.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.11 2001/05/15 08:04:31 deraadt Exp $	*/
d198 1
d200 1
@


1.12.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.12 2001/10/26 12:03:27 art Exp $	*/
d62 1
a62 1
static void openbsd_to_netbsd_stat(struct stat *, struct netbsd_stat *);
a197 1
	FREF(fp);
a198 1
	FRELE(fp);
@


1.11
log
@just call me Theo "Fix bugs Art puts in the kernel" de Raadt
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.10 2001/05/14 13:28:22 art Exp $	*/
d195 1
a195 2
	if ((u_int)fd >= fdp->fd_nfiles ||
	    (fp = fdp->fd_ofiles[fd]) == NULL)
@


1.10
log
@use fo_stat in fileops instead of huge switch statements.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.9 2001/05/14 12:11:53 art Exp $	*/
d199 1
a199 1
	error = (*fp->f_ops->fo_stat)(fp, &ub, p);
@


1.9
log
@Implement a wrapper round vn_stat that takes the same arguments
as soo_stat and pipe_stat.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.8 2001/05/14 11:05:38 art Exp $	*/
a197 1
	switch (fp->f_type) {
d199 1
a199 18
	case DTYPE_VNODE:
		error = vn_statfile(fp, &sb, p);
		break;

	case DTYPE_SOCKET:
		error = soo_stat(fp, &sb, p);
		break;

#ifndef OLD_PIPE
	case DTYPE_PIPE:
		error = pipe_stat(fp, &sb, p);
		break;
#endif

	default:
		panic("netbsd_sys___fstat13");
		/*NOTREACHED*/
	}
@


1.8
log
@Correct panic message.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.7 2001/05/14 11:04:05 art Exp $	*/
d201 1
a201 1
		error = vn_stat((struct vnode *)fp->f_data, &sb, p);
@


1.7
log
@More generic arguments to soo_stat.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.6 2001/05/14 10:51:27 art Exp $	*/
d215 1
a215 1
		panic("fstat");
@


1.6
log
@More generic arguments to pipe_stat.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.5 1999/09/22 01:35:01 kstailey Exp $	*/
d205 1
a205 1
		error = soo_stat((struct socket *)fp->f_data, &sb);
@


1.5
log
@pipe_stat()
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.4 1999/09/17 22:14:09 kstailey Exp $	*/
d210 1
a210 1
		error = pipe_stat((struct pipe *)fp->f_data, &sb);
@


1.5.4.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.5 1999/09/22 01:35:01 kstailey Exp $	*/
d198 1
d200 18
a217 1
	error = (*fp->f_ops->fo_stat)(fp, &sb, p);
@


1.5.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.5.4.1 2001/07/04 10:39:32 niklas Exp $	*/
d195 2
a196 1
	if ((fp = fd_getfile(fdp, fd)) == NULL)
@


1.5.4.3
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a197 1
	FREF(fp);
a198 1
	FRELE(fp);
@


1.5.4.4
log
@Merge in -current from about a week ago
@
text
@d62 1
a62 1
static void openbsd_to_netbsd_stat(struct stat *, struct netbsd_stat *);
@


1.5.4.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.5.4.4 2002/03/28 11:28:06 niklas Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.5.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d126 1
a126 1
	if (suser(p, 0))
d163 1
a163 1
	if (suser(p, 0))
@


1.5.10.1
log
@Fix (art):
don't panic on kqueue.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.5 1999/09/22 01:35:01 kstailey Exp $	*/
d215 2
a216 1
		return (EOPNOTSUPP);
@


1.4
log
@alternate path
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.3 1999/09/17 12:13:47 kstailey Exp $	*/
d49 1
d207 6
@


1.3
log
@start of pread(2) etc., stat(2) fixes, "ls -l" now runs
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.2 1999/09/14 01:05:25 kstailey Exp $	*/
d43 1
d49 1
a49 1
#include <sys/systm.h>
d52 3
d59 1
d110 1
a110 1
		syscallarg(const char *) path;
d117 1
d119 1
d147 1
a147 1
		syscallarg(const char *) path;
d154 1
d156 1
d216 64
@


1.2
log
@signals
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_stat.c,v 1.1 1999/09/12 14:15:16 kstailey Exp $	*/
d91 1
a91 1
	memcpy(nbst->st_qspare, obst->st_qspare, sizeof(nbst->st_qspare));
d141 1
a141 1
		syscallarg(struct netbsd_stat *) nsb;
d176 1
a176 1
		syscallarg(struct netbsd_stat *) nsb;
d205 1
a205 1
		error = copyout(&nsb, SCARG(uap, ub), sizeof(nsb));
@


1.1
log
@Add COMPAT_NETBSD.  Currently only works for ELF64.  Many missing system calls.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 1
@

