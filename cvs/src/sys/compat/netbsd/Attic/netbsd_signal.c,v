head	1.8;
access;
symbols
	OPENBSD_4_1:1.7.0.14
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.14
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.12
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.10
	OPENBSD_2_8:1.4.0.8
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.4
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.8
date	2007.05.28.23.10.10;	author beck;	state dead;
branches;
next	1.7;

1.7
date	2004.01.14.05.23.25;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.28.00;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.26.50;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.09.16.13.20.06;	author kstailey;	state Exp;
branches
	1.4.4.1
	1.4.14.1;
next	1.3;

1.3
date	99.09.15.18.36.38;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	99.09.14.02.06.25;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	99.09.14.01.05.25;	author kstailey;	state Exp;
branches;
next	;

1.4.4.1
date	2002.03.28.11.28.06;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2003.06.07.11.00.36;	author ho;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2004.02.19.10.51.29;	author niklas;	state Exp;
branches;
next	;

1.4.14.1
date	2002.06.11.03.28.08;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Maintaining a broken compatibility layer for a broken OS is not a productive
activity for anyone. Bye bye COMPAT_NETBSD. ok tedu@@, deraadt@@, and many others
in the hackathon room.
@
text
@/*	$OpenBSD: netbsd_signal.c,v 1.7 2004/01/14 05:23:25 tedu Exp $	*/

/*	$NetBSD: kern_sig.c,v 1.54 1996/04/22 01:38:32 christos Exp $	*/

/*
 * Copyright (c) 1997 Theo de Raadt. All rights reserved. 
 * Copyright (c) 1982, 1986, 1989, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)kern_sig.c	8.7 (Berkeley) 4/18/94
 */

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/signalvar.h>
#include <sys/signal.h>
#include <sys/systm.h>

#include <compat/netbsd/netbsd_types.h>
#include <compat/netbsd/netbsd_signal.h>
#include <compat/netbsd/netbsd_syscallargs.h>

static void netbsd_to_openbsd_sigaction(struct netbsd_sigaction *,
	struct sigaction *);

static void openbsd_to_netbsd_sigaction(struct sigaction *,
	struct netbsd_sigaction *);

static void
openbsd_to_netbsd_sigaction(obsa, nbsa)
	struct sigaction	*obsa;
	struct netbsd_sigaction	*nbsa;
{
	bzero(nbsa, sizeof(struct netbsd_sigaction));
	nbsa->netbsd_sa_handler = obsa->sa_handler;
	bcopy(&obsa->sa_mask, &nbsa->netbsd_sa_mask.__bits[0],
		sizeof(sigset_t));
	nbsa->netbsd_sa_flags = obsa->sa_flags;
}

static void
netbsd_to_openbsd_sigaction(nbsa, obsa)
	struct netbsd_sigaction	*nbsa;
	struct sigaction	*obsa;
{
	obsa->sa_handler = nbsa->netbsd_sa_handler;
	bcopy(&nbsa->netbsd_sa_mask.__bits[0], &obsa->sa_mask,
		sizeof(sigset_t));
	obsa->sa_flags = nbsa->netbsd_sa_flags;
}

/* ARGSUSED */
int
netbsd_sys___sigaction14(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct netbsd_sys___sigaction14_args /* {
		syscallarg(int) signum;
		syscallarg(struct netbsd_sigaction *) nsa;
		syscallarg(struct netbsd_sigaction *) osa;
	} */ *uap = v;
	struct sigaction vec;
	register struct sigaction *sa;
	struct netbsd_sigaction nbsa;
	register struct sigacts *ps = p->p_sigacts;
	register int signum;
	int bit, error;

	signum = SCARG(uap, signum);
	if (signum <= 0 || signum >= NSIG ||
	    (SCARG(uap, nsa) && (signum == SIGKILL || signum == SIGSTOP)))
		return (EINVAL);
	sa = &vec;
	if (SCARG(uap, osa)) {
		sa->sa_handler = ps->ps_sigact[signum];
		sa->sa_mask = ps->ps_catchmask[signum];
		bit = sigmask(signum);
		sa->sa_flags = 0;
		if ((ps->ps_sigonstack & bit) != 0)
			sa->sa_flags |= SA_ONSTACK;
		if ((ps->ps_sigintr & bit) == 0)
			sa->sa_flags |= SA_RESTART;
		if ((ps->ps_sigreset & bit) != 0)
			sa->sa_flags |= SA_RESETHAND;
		if ((ps->ps_siginfo & bit) != 0)
			sa->sa_flags |= SA_SIGINFO;
		if (signum == SIGCHLD) {
			if ((p->p_flag & P_NOCLDSTOP) != 0)
				sa->sa_flags |= SA_NOCLDSTOP;
			if ((p->p_flag & P_NOCLDWAIT) != 0)
				sa->sa_flags |= SA_NOCLDWAIT;
		}
		if ((sa->sa_mask & bit) == 0)
			sa->sa_flags |= SA_NODEFER;
		sa->sa_mask &= ~bit;
		openbsd_to_netbsd_sigaction(sa, &nbsa);
		error = copyout((caddr_t)&nbsa, (caddr_t)SCARG(uap, osa),
				sizeof (struct netbsd_sigaction));
		if (error)
			return (error);
	}
	if (SCARG(uap, nsa)) {
		error = copyin((caddr_t)SCARG(uap, nsa), (caddr_t)&nbsa,
			       sizeof (struct netbsd_sigaction));
		if (error)
			return (error);
		netbsd_to_openbsd_sigaction(&nbsa, sa);
		setsigvec(p, signum, sa);
	}
	return (0);
}

/* ARGSUSED */
int
netbsd_sys___sigpending14(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct netbsd_sys___sigpending14_args /* {
		netbsd_sigset_t *set;
	} */ *uap = v;
	netbsd_sigset_t nss;

	bcopy(&p->p_siglist, &nss.__bits[0], sizeof(sigset_t));
	return (copyout((caddr_t)&nss, (caddr_t)SCARG(uap, set), sizeof(nss)));
}

int
netbsd_sys___sigprocmask14(p, v, retval)
	register struct proc *p;
	void *v;
	register_t *retval;
{
	struct netbsd_sys___sigprocmask14_args /* {
		syscallarg(int) how;
		syscallarg(netbsd_sigset_t *) set;
		syscallarg(netbsd_sigset_t *) oset;
	} */ *uap = v;
	netbsd_sigset_t nss, oss;
	sigset_t obnss;
	int error = 0;

	if (SCARG(uap, set)) {
		error = copyin(SCARG(uap, set), &nss, sizeof(nss));
		if (error)
			return (error);
	}
	if (SCARG(uap, oset)) {
		bzero(&oss, sizeof(netbsd_sigset_t));
		bcopy(&p->p_sigmask, &oss.__bits[0], sizeof(sigset_t));
		error = copyout((caddr_t)&oss, (caddr_t)SCARG(uap, oset),
			sizeof(netbsd_sigset_t));
		if (error)
			return (error);
	}
	if (SCARG(uap, set)) {
		bcopy(&nss.__bits[0], &obnss, sizeof(sigset_t));
		(void)splhigh();
		switch (SCARG(uap, how)) {
		case SIG_BLOCK:
			p->p_sigmask |= obnss &~ sigcantmask;
			break;
		case SIG_UNBLOCK:
			p->p_sigmask &= ~obnss;
			break;
		case SIG_SETMASK:
			p->p_sigmask = obnss &~ sigcantmask;
			break;
		default:
			error = EINVAL;
			break;
		}
		(void) spl0();
	}
	return (error);
}

int
netbsd_sys___sigsuspend14(p, v, retval)
	register struct proc *p;
	void *v;
	register_t *retval;
{
	struct netbsd_sys___sigsuspend14_args /* {
		syscallarg(netbsd_sigset_t *) set;
	} */ *uap = v;
	register struct sigacts *ps = p->p_sigacts;
	netbsd_sigset_t nbset;
	sigset_t obset;

	copyin(SCARG(uap, set), &nbset, sizeof(netbsd_sigset_t));
	bcopy(&nbset.__bits[0], &obset, sizeof(sigset_t));
	/*
	 * When returning from sigpause, we want
	 * the old mask to be restored after the
	 * signal handler has finished.  Thus, we
	 * save it here and mark the sigacts structure
	 * to indicate this.
	 */
	ps->ps_oldmask = p->p_sigmask;
	ps->ps_flags |= SAS_OLDMASK;
	p->p_sigmask = obset &~ sigcantmask;
	while (tsleep((caddr_t) ps, PPAUSE|PCATCH, "pause", 0) == 0)
		/* void */;
	/* always return EINTR rather than ERESTART... */
	return (EINTR);
}

@


1.7
log
@change sigaltstack.ss_size type to size_t.  handle syscall fallout.
add stack_t and ucontext_t typedefs.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_signal.c,v 1.6 2003/06/02 23:28:00 millert Exp $	*/
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_signal.c,v 1.5 2002/03/14 01:26:50 millert Exp $	*/
a57 6
static void netbsd_to_openbsd_sigaltstack(struct netbsd_sigaltstack *,
	struct sigaltstack *);

static void openbsd_to_netbsd_sigaltstack(struct sigaltstack *,
	struct netbsd_sigaltstack *);

a80 22
static void
netbsd_to_openbsd_sigaltstack(nbss, obss)
	struct netbsd_sigaltstack *nbss;
	struct sigaltstack *obss;
{
	obss->ss_sp = nbss->netbsd_ss_sp;
	obss->ss_size = nbss->netbsd_ss_size; /* XXX may cause truncation */
	obss->ss_flags = nbss->netbsd_ss_flags;
}

static void
openbsd_to_netbsd_sigaltstack(obss, nbss)
	struct sigaltstack *obss;
	struct netbsd_sigaltstack *nbss;
{
	bzero(nbss, sizeof(nbss));
	nbss->netbsd_ss_sp = obss->ss_sp;
	nbss->netbsd_ss_size = (size_t)obss->ss_size;
	nbss->netbsd_ss_flags = obss->ss_flags;
}


a140 45
	return (0);
}

/* ARGSUSED */
int
netbsd_sys___sigaltstack14(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct netbsd_sys___sigaltstack14_args /* {
		syscallarg(struct netbsd_sigaltstack *) nss;
		syscallarg(struct netbsd_sigaltstack *) oss;
	} */ *uap = v;
	struct sigacts *psp;
	struct sigaltstack ss;
	struct netbsd_sigaltstack nbss;
	int error;

	psp = p->p_sigacts;
	if ((psp->ps_flags & SAS_ALTSTACK) == 0)
		psp->ps_sigstk.ss_flags |= SS_DISABLE;
	if (SCARG(uap, oss)) {
		openbsd_to_netbsd_sigaltstack(&psp->ps_sigstk, &nbss);
		if ((error = copyout((caddr_t)&nbss, (caddr_t)SCARG(uap, oss),
			sizeof (struct netbsd_sigaltstack))))
		return (error);
	}
	if (SCARG(uap, nss) == 0)
		return (0);
	error = copyin((caddr_t)SCARG(uap, nss), (caddr_t)&nbss, sizeof(nbss));
	if (error)
		return (error);
	netbsd_to_openbsd_sigaltstack(&nbss, &ss);
	if (ss.ss_flags & SS_DISABLE) {
		if (psp->ps_sigstk.ss_flags & SS_ONSTACK)
			return (EINVAL);
		psp->ps_flags &= ~SAS_ALTSTACK;
		psp->ps_sigstk.ss_flags = ss.ss_flags;
		return (0);
	}
	if (ss.ss_size < MINSIGSTKSZ)
		return (ENOMEM);
	psp->ps_flags |= SAS_ALTSTACK;
	psp->ps_sigstk= ss;
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_signal.c,v 1.4 1999/09/16 13:20:06 kstailey Exp $	*/
d23 1
a23 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@signal fixes (csh runs)
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_signal.c,v 1.3 1999/09/15 18:36:38 kstailey Exp $	*/
d56 2
a57 2
static void netbsd_to_openbsd_sigaction __P((struct netbsd_sigaction *,
	struct sigaction *));
d59 2
a60 2
static void openbsd_to_netbsd_sigaction __P((struct sigaction *,
	struct netbsd_sigaction *));
d62 2
a63 2
static void netbsd_to_openbsd_sigaltstack __P((struct netbsd_sigaltstack *,
	struct sigaltstack *));
d65 2
a66 2
static void openbsd_to_netbsd_sigaltstack __P((struct sigaltstack *,
	struct netbsd_sigaltstack *));
@


1.4.14.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_signal.c,v 1.4 1999/09/16 13:20:06 kstailey Exp $	*/
d56 2
a57 2
static void netbsd_to_openbsd_sigaction(struct netbsd_sigaction *,
	struct sigaction *);
d59 2
a60 2
static void openbsd_to_netbsd_sigaction(struct sigaction *,
	struct netbsd_sigaction *);
d62 2
a63 2
static void netbsd_to_openbsd_sigaltstack(struct netbsd_sigaltstack *,
	struct sigaltstack *);
d65 2
a66 2
static void openbsd_to_netbsd_sigaltstack(struct sigaltstack *,
	struct netbsd_sigaltstack *);
@


1.4.4.1
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d56 2
a57 2
static void netbsd_to_openbsd_sigaction(struct netbsd_sigaction *,
	struct sigaction *);
d59 2
a60 2
static void openbsd_to_netbsd_sigaction(struct sigaction *,
	struct netbsd_sigaction *);
d62 2
a63 2
static void netbsd_to_openbsd_sigaltstack(struct netbsd_sigaltstack *,
	struct sigaltstack *);
d65 2
a66 2
static void openbsd_to_netbsd_sigaltstack(struct sigaltstack *,
	struct netbsd_sigaltstack *);
@


1.4.4.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_signal.c,v 1.4.4.1 2002/03/28 11:28:06 niklas Exp $	*/
d23 5
a27 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4.4.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 6
d87 22
d169 45
@


1.3
log
@more and better signal routines, vfork()
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_signal.c,v 1.2 1999/09/14 02:06:25 kstailey Exp $	*/
d73 1
a73 1
	memset(nbsa, 0, sizeof(struct netbsd_sigaction));
a95 1
	memset(&obss, 0, sizeof(struct sigaltstack));
d106 1
a106 1
	memset(&nbss, 0, sizeof(netbsd_stack_t));
d108 1
a108 1
	nbss->netbsd_ss_size = obss->ss_size;
d265 18
a282 15
	bcopy(&nss.__bits[0], &obnss, sizeof(sigset_t));
	(void)splhigh();
	switch (SCARG(uap, how)) {
	case SIG_BLOCK:
		p->p_sigmask |= obnss &~ sigcantmask;
		break;
	case SIG_UNBLOCK:
		p->p_sigmask &= ~obnss;
		break;
	case SIG_SETMASK:
		p->p_sigmask = obnss &~ sigcantmask;
		break;
	default:
		error = EINVAL;
		break;
a283 1
	(void) spl0();
@


1.2
log
@protect alignment
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_signal.c,v 1.1 1999/09/14 01:05:25 kstailey Exp $	*/
a45 12
/*

missing:

;293	STD		{ int netbsd_sys___sigprocmask14(int how, \
;			    const sigset_t *set, \
;			    sigset_t *oset); }

;294	STD		{ int netbsd_sys___sigsuspend14(const sigset_t *set); }

*/

a53 1
/* #include <compat/netbsd/netbsd_stat.h> */
a84 1
	memset(nbsa, 0, sizeof(struct sigaction));
d86 1
a86 1
	bcopy(&nbsa->netbsd_sa_mask.__bits[0],&obsa->sa_mask,
d234 1
a234 1
	memcpy(&nss.__bits[0], &p->p_siglist, sizeof(sigset_t));
d237 80
@


1.1
log
@signals
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 2
d86 1
a86 1
	memset(nbsa, 0, sizeof(nbsa));
d88 2
a89 2
	memcpy(&nbsa->netbsd_sa_mask.__bits[0], &obsa->sa_mask,
	       sizeof(sigset_t));
d98 1
a98 1
	memset(nbsa, 0, sizeof(obsa));
d100 2
a101 2
	memcpy(&obsa->sa_mask, &nbsa->netbsd_sa_mask.__bits[0],
	       sizeof(sigset_t));
d142 1
a142 1
	struct netbsd_sigaction *nbsa;
d174 2
a175 2
		openbsd_to_netbsd_sigaction(sa, nbsa);
		error = copyout((caddr_t)nbsa, (caddr_t)SCARG(uap, osa),
d181 1
a181 1
		error = copyin((caddr_t)SCARG(uap, nsa), (caddr_t)nbsa,
d185 1
a185 1
		netbsd_to_openbsd_sigaction(nbsa, sa);
@

