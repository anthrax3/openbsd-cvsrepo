head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	UBC_SYNC_B:1.8
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	SMP:1.4.0.4
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4;
locks; strict;
comment	@ * @;


1.8
date	2001.09.21.15.31.59;	author art;	state dead;
branches;
next	1.7;

1.7
date	2001.01.15.11.43.13;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.10.18.15.45;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.19.08.34.57;	author csapuntz;	state Exp;
branches;
next	1.4;

1.4
date	99.09.17.17.52.13;	author kstailey;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	99.09.17.13.41.29;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	99.09.17.12.37.54;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	99.09.17.12.13.47;	author kstailey;	state Exp;
branches;
next	;

1.4.4.1
date	2001.05.14.22.04.57;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2001.10.31.03.11.46;	author nate;	state dead;
branches;
next	1.4.4.3;

1.4.4.3
date	2001.11.13.21.05.48;	author niklas;	state Exp;
branches;
next	1.4.4.4;

1.4.4.4
date	2001.11.13.22.40.14;	author niklas;	state dead;
branches;
next	;


desc
@@


1.8
log
@no need for own implemenation of p{read,write}{,v}
@
text
@/*	$OpenBSD: netbsd_pos_io.c,v 1.7 2001/01/15 11:43:13 art Exp $	*/

/*	$NetBSD: vfs_syscalls.c,v 1.71 1996/04/23 10:29:02 mycroft Exp $	*/

/*
 * Copyright (c) 1996 Theo de Raadt
 * Copyright (c) 1982, 1986, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)vfs_syscalls.c	8.28 (Berkeley) 12/10/94
 *	@@(#)sys_generic.c	8.5 (Berkeley) 1/21/94
 */

#include <sys/param.h>
#include <sys/file.h>
#include <sys/filedesc.h>
#include <sys/vnode.h>
#include <sys/proc.h>
#include <sys/signalvar.h>
#include <sys/uio.h>
#include <sys/malloc.h>
#ifdef KTRACE
#include <sys/ktrace.h>
#endif

#include <compat/netbsd/netbsd_types.h>
#include <compat/netbsd/netbsd_signal.h>
#include <compat/netbsd/netbsd_syscallargs.h>

static int netbsd_check_set_pos __P((struct proc *, int, off_t));
/*
 * sys_lseek trimmed down
 */
static int
netbsd_check_set_pos(p, fd, offset)
	struct proc *p;
	int fd;
	off_t offset;
{
	register struct filedesc *fdp = p->p_fd;
	register struct file *fp;
	struct vnode *vp;
	int special;

	if ((u_int)fd >= fdp->fd_nfiles ||
	    (fp = fdp->fd_ofiles[fd]) == NULL)
		return (EBADF);
	if (fp->f_type != DTYPE_VNODE)
		return (ESPIPE);
	vp = (struct vnode *)fp->f_data;
	if (vp->v_type == VFIFO)
		return (ESPIPE);
	if (vp->v_type == VCHR)
		special = 1;
	else
		special = 0;
	if (!special && offset < 0)
		return (EINVAL);
	return (0);
}

/*
 * Positional read system call.
 */
/* ARGSUSED */
int
netbsd_sys_pread(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct netbsd_sys_pread_args /* {
		syscallarg(int) fd;
		syscallarg(void *) buf;
		syscallarg(size_t) nbyte;
		syscallarg(off_t) offset;
	} */ *uap = v;
	register struct file *fp;
	register struct filedesc *fdp = p->p_fd;
	struct uio auio;
	struct iovec aiov;
	long cnt, error = 0;
	off_t offset;
#ifdef KTRACE
	struct iovec ktriov;
#endif

	/* Don't allow nbyte to be larger than max return val */
	if (SCARG(uap, nbyte) > SSIZE_MAX)
		return(EINVAL);

	offset = SCARG(uap, offset);

	if ((error = netbsd_check_set_pos(p, SCARG(uap, fd), offset)) != 0)
		return (error);
	fp = fdp->fd_ofiles[SCARG(uap, fd)];
	aiov.iov_base = (caddr_t)SCARG(uap, buf);
	aiov.iov_len = SCARG(uap, nbyte);
	auio.uio_iov = &aiov;
	auio.uio_iovcnt = 1;
	auio.uio_resid = SCARG(uap, nbyte);
	auio.uio_rw = UIO_READ;
	auio.uio_segflg = UIO_USERSPACE;
	auio.uio_procp = p;
#ifdef KTRACE
	/*
	 * if tracing, save a copy of iovec
	 */
	if (KTRPOINT(p, KTR_GENIO))
		ktriov = aiov;
#endif
	cnt = SCARG(uap, nbyte);
	error = (*fp->f_ops->fo_read)(fp, &offset, &auio, fp->f_cred);
	if (error)
		if (auio.uio_resid != cnt && (error == ERESTART ||
		    error == EINTR || error == EWOULDBLOCK))
			error = 0;
	cnt -= auio.uio_resid;
#ifdef KTRACE
	if (KTRPOINT(p, KTR_GENIO) && error == 0)
		ktrgenio(p, SCARG(uap, fd), UIO_READ, &ktriov,
		    cnt, error);
#endif
	*retval = cnt;
	return (error);
}

/*
 * Positional scatter read system call.
 */
/* ARGSUSED */
int
netbsd_sys_preadv(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct netbsd_sys_preadv_args /* {
		syscallarg(int) fd;
		syscallarg(const struct iovec *) iovp;
		syscallarg(int) iovcnt;
		syscallarg(off_t) offset;
	} */ *uap = v;
	register struct file *fp;
	register struct filedesc *fdp = p->p_fd;
	struct uio auio;
	register struct iovec *iov;
	struct iovec *needfree;
	struct iovec aiov[UIO_SMALLIOV];
	long i, cnt, error = 0;
	u_int iovlen;
	off_t offset;
#ifdef KTRACE
	struct iovec *ktriov = NULL;
#endif

	if (SCARG(uap, iovcnt) <= 0)
		return (EINVAL);

	offset = SCARG(uap, offset);

	if ((error = netbsd_check_set_pos(p, SCARG(uap, fd), offset)) != 0)
		return (error);
	fp = fdp->fd_ofiles[SCARG(uap, fd)];
	/* note: can't use iovlen until iovcnt is validated */
	iovlen = SCARG(uap, iovcnt) * sizeof (struct iovec);
	if (SCARG(uap, iovcnt) > UIO_SMALLIOV) {
		if (SCARG(uap, iovcnt) > IOV_MAX) {
			return (EINVAL);
		}
		MALLOC(iov, struct iovec *, iovlen, M_IOV, M_WAITOK);
		needfree = iov;
	} else {
		iov = aiov;
		needfree = NULL;
	}
	auio.uio_iov = iov;
	auio.uio_iovcnt = SCARG(uap, iovcnt);
	auio.uio_rw = UIO_READ;
	auio.uio_segflg = UIO_USERSPACE;
	auio.uio_procp = p;
	error = copyin((caddr_t)SCARG(uap, iovp), (caddr_t)iov, iovlen);
	if (error)
		goto done;
	auio.uio_resid = 0;
	for (i = 0; i < SCARG(uap, iovcnt); i++, iov++) {
		/* Don't allow sum > SSIZE_MAX */
		if (iov->iov_len > SSIZE_MAX ||
		    (auio.uio_resid += iov->iov_len) > SSIZE_MAX) {
			error = EINVAL;
			goto done;
		}
	}
#ifdef KTRACE
	/*
	 * if tracing, save a copy of iovec
	 */
	if (KTRPOINT(p, KTR_GENIO))  {
		MALLOC(ktriov, struct iovec *, iovlen, M_TEMP, M_WAITOK);
		bcopy((caddr_t)auio.uio_iov, (caddr_t)ktriov, iovlen);
	}
#endif
	cnt = auio.uio_resid;
	error = (*fp->f_ops->fo_read)(fp, &offset, &auio, fp->f_cred);
	if (error)
		if (auio.uio_resid != cnt && (error == ERESTART ||
		    error == EINTR || error == EWOULDBLOCK))
			error = 0;
	cnt -= auio.uio_resid;
#ifdef KTRACE
	if (ktriov != NULL) {
		if (error == 0)
			ktrgenio(p, SCARG(uap, fd), UIO_READ, ktriov,
			    cnt, error);
		FREE(ktriov, M_TEMP);
	}
#endif
	*retval = cnt;
done:
	if (needfree)
		FREE(needfree, M_IOV);
	return (error);
}

/*
 * Positional write system call.
 */
/* ARGSUSED */
int
netbsd_sys_pwrite(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct netbsd_sys_pwrite_args /* {
		syscallarg(int) fd;
		syscallarg(const void *) buf;
		syscallarg(size_t) nbyte;
		syscallarg(off_t) offset;
	} */ *uap = v;
	register struct file *fp;
	register struct filedesc *fdp = p->p_fd;
	struct uio auio;
	struct iovec aiov;
	long cnt, error = 0;
	off_t offset;
#ifdef KTRACE
	struct iovec ktriov;
#endif

	/* Don't allow nbyte to be larger than max return val */
	if (SCARG(uap, nbyte) > SSIZE_MAX)
		return(EINVAL);

	offset = SCARG(uap, offset);

	if ((error = netbsd_check_set_pos(p, SCARG(uap, fd), offset)) != 0)
		return (error);
	fp = fdp->fd_ofiles[SCARG(uap, fd)];
	if ((fp->f_flag & FWRITE) == 0)
		return (EBADF);

	aiov.iov_base = (caddr_t)SCARG(uap, buf);
	aiov.iov_len = SCARG(uap, nbyte);
	auio.uio_iov = &aiov;
	auio.uio_iovcnt = 1;
	auio.uio_resid = SCARG(uap, nbyte);
	auio.uio_rw = UIO_WRITE;
	auio.uio_segflg = UIO_USERSPACE;
	auio.uio_procp = p;
#ifdef KTRACE
	/*
	 * if tracing, save a copy of iovec
	 */
	if (KTRPOINT(p, KTR_GENIO))
		ktriov = aiov;
#endif
	cnt = SCARG(uap, nbyte);
	error = (*fp->f_ops->fo_write)(fp, &offset, &auio, fp->f_cred);
	if (error) {
		if (auio.uio_resid != cnt && (error == ERESTART ||
		    error == EINTR || error == EWOULDBLOCK))
			error = 0;
		if (error == EPIPE)
			psignal(p, SIGPIPE);
	}
	cnt -= auio.uio_resid;
#ifdef KTRACE
	if (KTRPOINT(p, KTR_GENIO) && error == 0)
		ktrgenio(p, SCARG(uap, fd), UIO_WRITE,
		    &ktriov, cnt, error);
#endif
	*retval = cnt;
	return (error);
}

/*
 * Positional gather write system call.
 */
/* ARGSUSED */
int
netbsd_sys_pwritev(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct netbsd_sys_pwritev_args /* {
		syscallarg(int) fd;
		syscallarg(const struct iovec *) iovp;
		syscallarg(int) iovcnt;
		syscallarg(off_t) offset;
	} */ *uap = v;
	register struct file *fp;
	register struct filedesc *fdp = p->p_fd;
	struct uio auio;
	register struct iovec *iov;
	struct iovec *needfree;
	struct iovec aiov[UIO_SMALLIOV];
	long i, cnt, error = 0;
	u_int iovlen;
	off_t offset;
#ifdef KTRACE
	struct iovec *ktriov = NULL;
#endif

	if (SCARG(uap, iovcnt) <= 0)
		return (EINVAL);

	offset = SCARG(uap, offset);

	if ((error = netbsd_check_set_pos(p, SCARG(uap, fd), offset)) != 0)
		return (error);
	fp = fdp->fd_ofiles[SCARG(uap, fd)];
	if ((fp->f_flag & FWRITE) == 0) {
		error = EBADF;
		goto done;
	}
	/* note: can't use iovlen until iovcnt is validated */
	iovlen = SCARG(uap, iovcnt) * sizeof (struct iovec);
	if (SCARG(uap, iovcnt) > UIO_SMALLIOV) {
		if (SCARG(uap, iovcnt) > IOV_MAX) {
			error = EINVAL;
			goto done;
		}
		MALLOC(iov, struct iovec *, iovlen, M_IOV, M_WAITOK);
		needfree = iov;
	} else {
		iov = aiov;
		needfree = NULL;
	}
	auio.uio_iov = iov;
	auio.uio_iovcnt = SCARG(uap, iovcnt);
	auio.uio_rw = UIO_WRITE;
	auio.uio_segflg = UIO_USERSPACE;
	auio.uio_procp = p;
	error = copyin((caddr_t)SCARG(uap, iovp), (caddr_t)iov, iovlen);
	if (error)
		goto done;
	auio.uio_resid = 0;
	for (i = 0; i < SCARG(uap, iovcnt); i++, iov++) {
		/* Don't allow sum > SSIZE_MAX */
		if (iov->iov_len > SSIZE_MAX ||
		    (auio.uio_resid += iov->iov_len) > SSIZE_MAX) {
			error = EINVAL;
			goto done;
		}
	}
#ifdef KTRACE
	/*
	 * if tracing, save a copy of iovec
	 */
	if (KTRPOINT(p, KTR_GENIO))  {
		MALLOC(ktriov, struct iovec *, iovlen, M_TEMP, M_WAITOK);
		bcopy((caddr_t)auio.uio_iov, (caddr_t)ktriov, iovlen);
	}
#endif
	cnt = auio.uio_resid;
	error = (*fp->f_ops->fo_write)(fp, &offset, &auio, fp->f_cred);
	if (error) {
		if (auio.uio_resid != cnt && (error == ERESTART ||
		    error == EINTR || error == EWOULDBLOCK))
			error = 0;
		if (error == EPIPE)
			psignal(p, SIGPIPE);
	}
	cnt -= auio.uio_resid;
#ifdef KTRACE
	if (ktriov != NULL) {
		if (error == 0)
			ktrgenio(p, SCARG(uap, fd), UIO_WRITE,
				ktriov, cnt, error);
		FREE(ktriov, M_TEMP);
	}
#endif
	*retval = cnt;
done:
	if (needfree)
		FREE(needfree, M_IOV);
	return (error);
}
@


1.7
log
@Make this code build.
This could have never worked.
XXX - do we need this at all now that we have native p{read,write}{,v}?
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_pos_io.c,v 1.6 2000/11/10 18:15:45 art Exp $	*/
@


1.6
log
@Change the ktrace interface functions from taking the trace vnode to taking the
traced proc. The vnode is in the proc and all functions need the proc.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_pos_io.c,v 1.5 2000/04/19 08:34:57 csapuntz Exp $	*/
d68 1
a68 1
netbsd_check_set_pos(p, fd)
d127 1
a127 1
	if ((error = netbsd_check_set_pos(p, SCARG(uap, fd), offset) != 0)
d195 1
a195 1
	if ((error = netbsd_check_set_pos(p, SCARG(uap, fd), offset) != 0)
d290 1
a290 1
	if ((error = netbsd_check_set_pos(p, SCARG(uap, fd), offset) != 0)
d364 1
a364 1
	if ((error = netbsd_check_set_pos(p, SCARG(uap, fd), offset) != 0)
@


1.5
log
@

Change struct file interface methods read and write to pass file offset in
and out.

Make pread/pwrite in netbsd & linux thread safe - which is the whole point
anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_pos_io.c,v 1.4 1999/09/17 17:52:13 kstailey Exp $	*/
d154 1
a154 1
		ktrgenio(p->p_tracep, SCARG(uap, fd), UIO_READ, &ktriov,
d246 1
a246 1
			ktrgenio(p->p_tracep, SCARG(uap, fd), UIO_READ, ktriov,
d323 1
a323 1
		ktrgenio(p->p_tracep, SCARG(uap, fd), UIO_WRITE,
d423 1
a423 1
			ktrgenio(p->p_tracep, SCARG(uap, fd), UIO_WRITE,
@


1.4
log
@leave the filepointer where you found it - XPG4
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_pos_io.c,v 1.3 1999/09/17 13:41:29 kstailey Exp $	*/
d63 1
a63 1
static int netbsd_set_pos __P((struct proc *, int, off_t, off_t *));
d68 1
a68 1
netbsd_set_pos(p, fd, offset, ooffset)
a71 1
	off_t *ooffset;
a91 2
	*ooffset = fp->f_offset;
	fp->f_offset = offset;
d116 1
a116 1
	off_t save_offset;
d124 4
a127 2
	if ((error = netbsd_set_pos(p, SCARG(uap, fd), SCARG(uap, offset),
		&save_offset)))
d146 1
a146 1
	error = (*fp->f_ops->fo_read)(fp, &auio, fp->f_cred);
a156 1
	fp->f_offset = save_offset;
d185 1
a185 1
	off_t save_offset;
d192 4
a195 2
	if ((error = netbsd_set_pos(p, SCARG(uap, fd), SCARG(uap, offset),
		&save_offset)))
a201 1
			fp->f_offset = save_offset;
d237 1
a237 1
	error = (*fp->f_ops->fo_read)(fp, &auio, fp->f_cred);
a254 1
	fp->f_offset = save_offset;
d279 1
a279 1
	off_t save_offset;
d287 4
a290 2
	if ((error = netbsd_set_pos(p, SCARG(uap, fd), SCARG(uap, offset),
		&save_offset)))
d293 1
a293 2
	if ((fp->f_flag & FWRITE) == 0) {
		fp->f_offset = save_offset;
d295 1
a295 1
	}
d312 1
a312 1
	error = (*fp->f_ops->fo_write)(fp, &auio, fp->f_cred);
a326 1
	fp->f_offset = save_offset;
d354 1
a354 1
	off_t save_offset;
d361 4
a364 2
	if ((error = netbsd_set_pos(p, SCARG(uap, fd), SCARG(uap, offset),
		&save_offset)))
d411 1
a411 1
	error = (*fp->f_ops->fo_write)(fp, &auio, fp->f_cred);
a429 1
	fp->f_offset = save_offset;
@


1.4.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_pos_io.c,v 1.7 2001/01/15 11:43:13 art Exp $	*/
d63 1
a63 1
static int netbsd_check_set_pos __P((struct proc *, int, off_t));
d68 1
a68 1
netbsd_check_set_pos(p, fd, offset)
d72 1
d93 2
d119 1
a119 1
	off_t offset;
d127 2
a128 4

	offset = SCARG(uap, offset);

	if ((error = netbsd_check_set_pos(p, SCARG(uap, fd), offset)) != 0)
d147 1
a147 1
	error = (*fp->f_ops->fo_read)(fp, &offset, &auio, fp->f_cred);
d155 1
a155 1
		ktrgenio(p, SCARG(uap, fd), UIO_READ, &ktriov,
d158 1
d187 1
a187 1
	off_t offset;
d194 2
a195 4

	offset = SCARG(uap, offset);

	if ((error = netbsd_check_set_pos(p, SCARG(uap, fd), offset)) != 0)
d202 1
d238 1
a238 1
	error = (*fp->f_ops->fo_read)(fp, &offset, &auio, fp->f_cred);
d247 1
a247 1
			ktrgenio(p, SCARG(uap, fd), UIO_READ, ktriov,
d256 1
d281 1
a281 1
	off_t offset;
d289 2
a290 4

	offset = SCARG(uap, offset);

	if ((error = netbsd_check_set_pos(p, SCARG(uap, fd), offset)) != 0)
d293 2
a294 1
	if ((fp->f_flag & FWRITE) == 0)
d296 1
a296 1

d313 1
a313 1
	error = (*fp->f_ops->fo_write)(fp, &offset, &auio, fp->f_cred);
d324 1
a324 1
		ktrgenio(p, SCARG(uap, fd), UIO_WRITE,
d328 1
d356 1
a356 1
	off_t offset;
d363 2
a364 4

	offset = SCARG(uap, offset);

	if ((error = netbsd_check_set_pos(p, SCARG(uap, fd), offset)) != 0)
d411 1
a411 1
	error = (*fp->f_ops->fo_write)(fp, &offset, &auio, fp->f_cred);
d423 1
a423 1
			ktrgenio(p, SCARG(uap, fd), UIO_WRITE,
d430 1
@


1.4.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_pos_io.c,v 1.4.4.1 2001/05/14 22:04:57 niklas Exp $	*/
@


1.4.4.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.4.4.4
log
@repair
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_pos_io.c,v 1.4.4.3 2001/11/13 21:05:48 niklas Exp $	*/
@


1.3
log
@rest of pread() etc., fdatasync() hack
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_pos_io.c,v 1.2 1999/09/17 12:37:54 kstailey Exp $	*/
d63 1
a63 1
static int netbsd_set_pos __P((struct proc *, int fd, off_t offset));
d68 1
a68 1
netbsd_set_pos(p, fd, offset)
d72 1
d93 1
d119 1
a123 3
	if ((error = netbsd_set_pos(p, SCARG(uap, fd), SCARG(uap, offset))))
		return (error);
	fp = fdp->fd_ofiles[SCARG(uap, fd)];
d127 4
d158 1
d187 1
d192 4
a195 1
	if ((error = netbsd_set_pos(p, SCARG(uap, fd), SCARG(uap, offset))))
a197 2
	if (SCARG(uap, iovcnt) <= 0)
		return (EINVAL);
d201 2
a202 1
		if (SCARG(uap, iovcnt) > IOV_MAX)
d204 1
d256 1
d281 1
d286 5
a290 1
	if ((error = netbsd_set_pos(p, SCARG(uap, fd), SCARG(uap, offset))))
d293 2
a294 1
	if ((fp->f_flag & FWRITE) == 0)
d296 1
a296 3
	/* Don't allow nbyte to be larger than max return val */
	if (SCARG(uap, nbyte) > SSIZE_MAX)
		return(EINVAL);
d328 1
d356 1
d361 4
a364 1
	if ((error = netbsd_set_pos(p, SCARG(uap, fd), SCARG(uap, offset))))
d367 4
a370 4
	if ((fp->f_flag & FWRITE) == 0)
		return (EBADF);
	if (SCARG(uap, iovcnt) <= 0)
		return (EINVAL);
d374 4
a377 2
		if (SCARG(uap, iovcnt) > IOV_MAX)
			return (EINVAL);
d430 1
@


1.2
log
@typo in comment
@
text
@d1 1
a1 1
/*	$OpenBSD: netbsd_pos_io.c,v 1.1 1999/09/17 12:13:47 kstailey Exp $	*/
d6 2
a7 1
 * Copyright (c) 1989, 1993
d44 1
d52 1
d54 1
a54 1
/*#include <sys/malloc.h>*/
a167 1
#if 0
d174 68
a241 2
#else
	return (0);
d243 5
a259 1
#if 0
d266 46
a311 2
#else
	return (0);
d313 2
a326 1
#if 0
d333 73
a405 2
#else
	return (0);
d407 5
@


1.1
log
@start of pread(2) etc., stat(2) fixes, "ls -l" now runs
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d62 1
a62 1
 * sys_lseek's trimmed down
@

