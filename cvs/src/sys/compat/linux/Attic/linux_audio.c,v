head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	UBC_SYNC_B:1.4
	SMP:1.4.0.2
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	98.04.26.21.22.25;	author provos;	state dead;
branches;
next	1.3;

1.3
date	96.09.16.15.34.27;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.04.18.21.21.38;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.03.08.23.43.03;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.4
log
@use osscompat for audio emulation.
@
text
@/*	$OpenBSD: linux_audio.c,v 1.3 1996/09/16 15:34:27 mickey Exp $	*/

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/systm.h>
#include <sys/file.h>
#include <sys/filedesc.h>
#include <sys/ioctl.h>
#include <sys/mount.h>
#include <sys/audioio.h>

#include <sys/syscallargs.h>

#include <compat/linux/linux_types.h>
#include <compat/linux/linux_ioctl.h>
#include <compat/linux/linux_signal.h>
#include <compat/linux/linux_syscallargs.h>
#include <compat/linux/linux_audio.h>

int
linux_ioctl_audio(p, uap, retval)
	register struct proc *p;
	register struct linux_sys_ioctl_args /* {
		syscallarg(int) fd;
		syscallarg(u_long) com;
		syscallarg(caddr_t) data;
	} */ *uap;
	register_t *retval;
{	       
	register struct file *fp;
	register struct filedesc *fdp;
	u_long com;
	struct audio_info tmpinfo;
	int idat;
	int error;

	fdp = p->p_fd;
	if ((u_int)SCARG(uap, fd) >= fdp->fd_nfiles ||
	    (fp = fdp->fd_ofiles[SCARG(uap, fd)]) == NULL)
		return (EBADF);

	if ((fp->f_flag & (FREAD | FWRITE)) == 0)
		return (EBADF);

	com = SCARG(uap, com);
	retval[0] = 0;

	switch (com) {
	case LINUX_SNDCTL_DSP_RESET:
		error = (*fp->f_ops->fo_ioctl)(fp, AUDIO_FLUSH, (caddr_t)0, p);
		if (error)
			return error;
		break;
	case LINUX_SNDCTL_DSP_SYNC:
	case LINUX_SNDCTL_DSP_POST:
		error = (*fp->f_ops->fo_ioctl)(fp, AUDIO_DRAIN, (caddr_t)0, p);
		if (error)
			return error;
		break;
	case LINUX_SNDCTL_DSP_SPEED:
		AUDIO_INITINFO(&tmpinfo);
		error = copyin(SCARG(uap, data), &idat, sizeof idat);
		if (error)
			return error;
		tmpinfo.play.sample_rate =
		tmpinfo.record.sample_rate = idat;
		(void) (*fp->f_ops->fo_ioctl)(fp, AUDIO_SETINFO, (caddr_t)&tmpinfo, p);
		error = (*fp->f_ops->fo_ioctl)(fp, AUDIO_GETINFO, (caddr_t)&tmpinfo, p);
		if (error)
			return error;
		idat = tmpinfo.play.sample_rate;
		error = copyout(&idat, SCARG(uap, data), sizeof idat);
		if (error)
			return error;
		break;
	case LINUX_SNDCTL_DSP_WRITE_CHANNELS:
		AUDIO_INITINFO(&tmpinfo);
		error = copyin(SCARG(uap, data), &idat, sizeof idat);
		if (error)
			return error;
		tmpinfo.play.channels = idat;
		(void) (*fp->f_ops->fo_ioctl)(fp, AUDIO_SETINFO, (caddr_t)&tmpinfo, p);
		error = (*fp->f_ops->fo_ioctl)(fp, AUDIO_GETINFO, (caddr_t)&tmpinfo, p);
		if (error)
			return error;
		idat = tmpinfo.play.channels;
		error = copyout(&idat, SCARG(uap, data), sizeof idat);
		if (error)
			return error;
		break;
	case LINUX_SNDCTL_DSP_STEREO:
		AUDIO_INITINFO(&tmpinfo);
		error = copyin(SCARG(uap, data), &idat, sizeof idat);
		if (error)
			return error;
		tmpinfo.play.channels =
		tmpinfo.record.channels = idat ? 2 : 1;
		(void) (*fp->f_ops->fo_ioctl)(fp, AUDIO_SETINFO, (caddr_t)&tmpinfo, p);
		error = (*fp->f_ops->fo_ioctl)(fp, AUDIO_GETINFO, (caddr_t)&tmpinfo, p);
		if (error)
			return error;
		idat = tmpinfo.play.channels - 1;
		error = copyout(&idat, SCARG(uap, data), sizeof idat);
		if (error)
			return error;
		break;
	case LINUX_SNDCTL_DSP_GETBLKSIZE:
		error = (*fp->f_ops->fo_ioctl)(fp, AUDIO_GETINFO, (caddr_t)&tmpinfo, p);
		if (error)
			return error;
		idat = tmpinfo.blocksize;
		error = copyout(&idat, SCARG(uap, data), sizeof idat);
		if (error)
			return error;
		break;
	case LINUX_SNDCTL_DSP_SETFMT:
		AUDIO_INITINFO(&tmpinfo);
		error = copyin(SCARG(uap, data), &idat, sizeof idat);
		if (error)
			return error;
		switch (idat) {
		case LINUX_AFMT_MU_LAW:
			tmpinfo.play.precision =
			tmpinfo.record.precision = 8;
			tmpinfo.play.encoding =
			tmpinfo.record.encoding = AUDIO_ENCODING_ULAW;
			break;
		case LINUX_AFMT_A_LAW:
			tmpinfo.play.precision =
			tmpinfo.record.precision = 8;
			tmpinfo.play.encoding =
			tmpinfo.record.encoding = AUDIO_ENCODING_ALAW;
			break;
		case LINUX_AFMT_U8:
			tmpinfo.play.precision =
			tmpinfo.record.precision = 8;
			tmpinfo.play.encoding =
			tmpinfo.record.encoding = AUDIO_ENCODING_LINEAR;
			break;
		case LINUX_AFMT_S16_LE:
			tmpinfo.play.precision =
			tmpinfo.record.precision = 16;
			tmpinfo.play.encoding =
			tmpinfo.record.encoding = AUDIO_ENCODING_LINEAR;
			break;
		default:
			return EINVAL;
		}
		(void) (*fp->f_ops->fo_ioctl)(fp, AUDIO_SETINFO, (caddr_t)&tmpinfo, p);
		error = (*fp->f_ops->fo_ioctl)(fp, AUDIO_GETINFO, (caddr_t)&tmpinfo, p);
		if (error)
			return error;
		switch(tmpinfo.play.encoding) {
		case AUDIO_ENCODING_LINEAR:
			if (tmpinfo.play.precision == 8)
				idat = LINUX_AFMT_U8;
			else if (tmpinfo.play.precision == 16)
				idat = LINUX_AFMT_S16_LE;
			else return EINVAL;
			break;
		case AUDIO_ENCODING_ULAW:                                       
			idat = LINUX_AFMT_MU_LAW;
			break;
		case AUDIO_ENCODING_ALAW:
			idat = LINUX_AFMT_A_LAW;
			break;
		default:
			return EINVAL;
		}
		error = copyout(&idat, SCARG(uap, data), sizeof idat);          
		if (error)
			return error;
		break;
	case LINUX_SNDCTL_DSP_SETFRAGMENT:
		AUDIO_INITINFO(&tmpinfo);
		error = copyin(SCARG(uap, data), &idat, sizeof idat);
		if (error)
			return error;
		if ((idat & 0xffff) < 4 || (idat & 0xffff) > 17)
			return EINVAL;
		tmpinfo.blocksize = 1 << (idat & 0xffff);
		tmpinfo.hiwat = (idat >> 16) & 0xffff;
		(void) (*fp->f_ops->fo_ioctl)(fp, AUDIO_SETINFO, (caddr_t)&tmpinfo, p);
		error = (*fp->f_ops->fo_ioctl)(fp, AUDIO_GETINFO, (caddr_t)&tmpinfo, p);
		if (error)
			return error;
		idat = tmpinfo.blocksize;
		error = copyout(&idat, SCARG(uap, data), sizeof idat);
		if (error)
			return error;
		break;
	case LINUX_SNDCTL_DSP_GETFMTS:
		idat = LINUX_AFMT_MU_LAW | LINUX_AFMT_U8 | LINUX_AFMT_S16_LE;
		error = copyout(&idat, SCARG(uap, data), sizeof idat);
		if (error)
			return error;
		break;
	default:
		return EINVAL;
	}

	return 0;
}
@


1.3
log
@the linux realaudio doesn't work on netbsd under emulation.
from netbsd-pr port-i386/2581 <sommerfeld@@orchard.medford.ma.us>
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_audio.c,v 1.2 1996/04/18 21:21:38 niklas Exp $	*/
@


1.2
log
@Merge of NetBSD 960317
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 15
d153 20
a172 1
		/*XXXX*/
@


1.1
log
@From NetBSD:
linux compatibility changes.
@
text
@d1 2
@
