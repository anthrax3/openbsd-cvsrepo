head	1.5;
access;
symbols
	OPENBSD_5_9:1.4.0.80
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.82
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.74
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.78
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.76
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.72
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.70
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.68
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.66
	OPENBSD_5_0:1.4.0.64
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.62
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.60
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.56
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.58
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.54
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.52
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.50
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.48
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.46
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.44
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.42
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.40
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.38
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.36
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.34
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.32
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.30
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.28
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.26
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.24
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.22
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.20
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.14
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.5
date	2016.03.02.15.41.48;	author naddy;	state dead;
branches;
next	1.4;
commitid	ZfNt0OHZhMg52abA;

1.4
date	96.10.16.12.25.26;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.08.03.18.06.43;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.08.03.12.24.25;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.04.28.07.38.23;	author etheisen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove the Linux emulation code, no longer referenced by anything
@
text
@/*	$OpenBSD: linux_mount.c,v 1.4 1996/10/16 12:25:26 deraadt Exp $	*/

/*
 * Copyright (c) 1996 Erik Theisen
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/malloc.h>
#include <sys/ioctl.h>
#include <sys/tty.h>
#include <sys/file.h>
#include <sys/mount.h>
#include <sys/filedesc.h>

#include <sys/syscallargs.h>

#include <compat/linux/linux_types.h>
#include <compat/linux/linux_errno.h>
#include <compat/linux/linux_signal.h>
#include <compat/linux/linux_syscallargs.h>

/*
 * These are just dummy mount/umount functions
 * who's purpose is to satisfy brain dead code
 * that bindly calls mount().  They always 
 * return EPERM.
 *
 * You really shouldn't be running code via
 * emulation that mounts FSs.
 */
int
linux_sys_mount(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct linux_sys_mount_args /* {
		syscallarg(char *) specialfile;
		syscallarg(char *) dir;
		syscallarg(char *) filesystemtype;
		syscallarg(long) rwflag;
		syscallarg(void *) data;
	} *uap = v */ ;
        return EPERM;
}

int
linux_sys_umount(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct linux_sys_umount_args /* {
		syscallarg(char *) specialfile;
	} *uap = v */ ;
        return EPERM;
}
@


1.4
log
@fix decls
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_mount.c,v 1.3 1996/08/03 18:06:43 deraadt Exp $	*/
@


1.3
log
@need mount.h
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_mount.c,v 1.2 1996/08/03 12:24:25 deraadt Exp $	*/
d44 2
d57 1
a57 1
linux_sys_mount(p, uap, retval)
d59 3
d68 1
a68 3
	} */ *uap;
	register_t *retval;
{
d73 1
a73 1
linux_sys_umount(p, uap, retval)
d75 3
d80 1
a80 3
	} */ *uap;
	register_t *retval;
{
@


1.2
log
@follow kernel syscall API
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_mount.c,v 1.1 1996/04/28 07:38:23 etheisen Exp $	*/
d37 1
@


1.1
log
@Added dummy mount/umount() syscalls for bogus Linux applications that
blindly call mount().  These dummy calls always return EPERM.  Fixed
uncommented NetBSD tag problem encountered when using makesyscalls.sh.
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d29 13
d54 10
a63 6
linux_sys_mount(specialfile, dir, filesystemtype, rwflag, data)
        char *specialfile;
        char *dir;
        char *filesystemtype;
        long  rwflag;
        void *data;
d65 1
a65 1
        return(LINUX_EPERM);
d69 6
a74 2
linux_sys_umount(specialfile)
        char *specialfile;
d76 1
a76 1
        return(LINUX_EPERM);
a77 5

        

        
        
@
