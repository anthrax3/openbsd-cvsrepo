head	1.21;
access;
symbols
	OPENBSD_5_9:1.20.0.14
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.20.0.16
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.8
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.20.0.12
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.10
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.6
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.4
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.2
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.2
	OPENBSD_5_0:1.17.0.2
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.16.0.26
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.24
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.20
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.22
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.18
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.16
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.14
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.12
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.10
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.8
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.6
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.4
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.2
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.9
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	SMP:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.1.0.2
	OPENBSD_2_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.21
date	2016.03.02.15.41.48;	author naddy;	state dead;
branches;
next	1.20;
commitid	ZfNt0OHZhMg52abA;

1.20
date	2012.06.19.11.31.39;	author pirofti;	state Exp;
branches;
next	1.19;

1.19
date	2011.12.14.08.33.18;	author robert;	state Exp;
branches;
next	1.18;

1.18
date	2011.11.25.10.10.05;	author robert;	state Exp;
branches;
next	1.17;

1.17
date	2011.04.05.15.36.09;	author pirofti;	state Exp;
branches;
next	1.16;

1.16
date	2004.10.27.13.23.38;	author niklas;	state Exp;
branches;
next	1.15;

1.15
date	2004.04.05.00.01.12;	author tedu;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.04.02.57.22;	author tedu;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.01.14.00.23;	author fgsch;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.23.17.42.09;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.03.00.00.04;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.30.20.10.48;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.28.03.39.30;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.02.22.49.59;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.00.42.25;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.04.20.04.52;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	2001.07.04.19.59.47;	author jasoni;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2001.04.02.21.43.11;	author niklas;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.01.29.07.23.54;	author jasoni;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.22.07.34.02;	author jasoni;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.07.02.13.40;	author jasoni;	state Exp;
branches;
next	;

1.4.4.1
date	2001.05.14.22.04.36;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2001.10.31.03.11.46;	author nate;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2002.03.06.02.07.08;	author niklas;	state Exp;
branches;
next	1.4.4.4;

1.4.4.4
date	2002.03.28.11.28.06;	author niklas;	state Exp;
branches;
next	1.4.4.5;

1.4.4.5
date	2003.03.27.23.53.47;	author niklas;	state Exp;
branches;
next	1.4.4.6;

1.4.4.6
date	2004.02.19.10.51.29;	author niklas;	state Exp;
branches;
next	1.4.4.7;

1.4.4.7
date	2004.06.05.23.12.34;	author niklas;	state Exp;
branches;
next	;

1.5.4.1
date	2002.06.11.03.28.08;	author art;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2002.10.29.00.30.51;	author art;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2003.05.19.21.52.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.21
log
@remove the Linux emulation code, no longer referenced by anything
@
text
@/*	$OpenBSD: linux_dummy.c,v 1.20 2012/06/19 11:31:39 pirofti Exp $ */

/*-
 * Copyright (c) 1994-1995 Søren Schmidt
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer
 *    in this position and unchanged.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $FreeBSD: src/sys/i386/linux/linux_dummy.c,v 1.21 2000/01/29 12:45:35 peter Exp $
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>

#include <compat/linux/linux_types.h>
#include <compat/linux/linux_signal.h>
#include <compat/linux/linux_syscallargs.h>

#define DUMMY(s)							\
int									\
linux_sys_ ## s(p, v, retval)						\
	struct proc *p;							\
	void *v;							\
	register_t *retval;						\
{									\
	return (unsupported_msg(p, #s));				\
}

static int
unsupported_msg(struct proc *p, const char *fname)
{
	printf("linux: syscall %s is obsolete or not implemented (pid=%ld)\n",
	    fname, (long)p->p_p->ps_pid);
	return (ENOSYS);
}

DUMMY(ostat);			/* #18 */
#ifdef PTRACE
DUMMY(ptrace);			/* #26 */
#endif
DUMMY(ofstat);			/* #28 */
DUMMY(stty);			/* #31 */
DUMMY(gtty);			/* #32 */
DUMMY(ftime);			/* #35 */
DUMMY(prof);			/* #44 */
DUMMY(phys);			/* #52 */
DUMMY(lock);			/* #53 */
DUMMY(mpx);			/* #56 */
DUMMY(ulimit);			/* #58 */
DUMMY(ustat);			/* #62 */
#ifndef __i386__
DUMMY(ioperm);			/* #101 */
#endif
DUMMY(klog);			/* #103 */
#ifndef __i386__
DUMMY(iopl);			/* #110 */
#endif
DUMMY(vhangup);			/* #111 */
DUMMY(idle);			/* #112 */
DUMMY(vm86old);			/* #113 */
DUMMY(swapoff);			/* #115 */
#ifndef __i386__
DUMMY(modify_ldt);		/* #123 */
#endif
DUMMY(adjtimex);		/* #124 */
DUMMY(create_module);		/* #127 */
DUMMY(init_module);		/* #128 */
DUMMY(delete_module);		/* #129 */
DUMMY(get_kernel_syms);		/* #130 */
DUMMY(quotactl);		/* #131 */
DUMMY(bdflush);			/* #134 */
DUMMY(sysfs);			/* #135 */
DUMMY(afs_syscall);		/* #137 */
DUMMY(mlockall);		/* #152 */
DUMMY(munlockall);		/* #153 */
DUMMY(sched_rr_get_interval);	/* #161 */
DUMMY(vm86);			/* #166 */
DUMMY(query_module);		/* #167 */
DUMMY(nfsservctl);		/* #169 */
DUMMY(rt_sigtimedwait);		/* #177 */
DUMMY(rt_queueinfo);		/* #178 */
DUMMY(capget);			/* #184 */
DUMMY(capset);			/* #185 */
DUMMY(sendfile);		/* #187 */
DUMMY(getpmsg);			/* #188 */
DUMMY(putpmsg);			/* #189 */
DUMMY(lchown);			/* #198 */
DUMMY(fchown);			/* #207 */
DUMMY(setfsgid);		/* #216 */
DUMMY(pivot_root);		/* #217 */
DUMMY(mincore);			/* #218 */
DUMMY(fadvise64);		/* #250 */
DUMMY(epoll_create);		/* #254 */
DUMMY(epoll_ctl);		/* #255 */
DUMMY(epoll_wait);		/* #256 */
DUMMY(epoll_pwait);		/* #319 */
DUMMY(eventfd);			/* #323 */
DUMMY(eventfd2);		/* #328 */
DUMMY(epoll_create1);		/* #329 */


#define DUMMY_XATTR(s)							\
int									\
linux_sys_ ## s ## xattr(p, v, retval)						\
	struct proc *p;							\
	void *v;							\
	register_t *retval;						\
{									\
	return (ENOATTR);						\
}
DUMMY_XATTR(set);
DUMMY_XATTR(lset);
DUMMY_XATTR(fset);
DUMMY_XATTR(get);
DUMMY_XATTR(lget);
DUMMY_XATTR(fget);
DUMMY_XATTR(list);
DUMMY_XATTR(llist);
DUMMY_XATTR(flist);
DUMMY_XATTR(remove);
DUMMY_XATTR(lremove);
DUMMY_XATTR(fremove);
@


1.20
log
@Add dummies for the epoll and eventfd syscall families.

Okay jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.19 2011/12/14 08:33:18 robert Exp $ */
@


1.19
log
@implement prctl() for COMPAT_LINUX

ok pirofti@@
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.18 2011/11/25 10:10:05 robert Exp $ */
d115 8
@


1.18
log
@implement chown(2) in compat_linux which is needed by some antivirus software

ok pirofti@@
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.17 2011/04/05 15:36:09 pirofti Exp $ */
a101 1
DUMMY(prctl);			/* #172 */
@


1.17
log
@Fix PID fetching -- noticed last night by guenther@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.16 2004/10/27 13:23:38 niklas Exp $ */
d11 1
a11 1
 *    notice, this list of conditions and the following disclaimer 
d49 1
a49 1
}									
a111 1
DUMMY(chown);			/* #212 */
d125 1
a125 1
}									
@


1.16
log
@Add support for sys_setre[ug]id, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.15 2004/04/05 00:01:12 tedu Exp $ */
d55 1
a55 1
	    fname, (long)p->p_pid);
@


1.15
log
@madvise works fine without translation, from Sam Smith.
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.14 2003/09/04 02:57:22 tedu Exp $ */
a110 2
DUMMY(setreuid);		/* #203 */
DUMMY(setregid);		/* #204 */
@


1.14
log
@dummy xattr syscalls.  ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.13 2003/09/01 14:00:23 fgsch Exp $ */
a117 1
DUMMY(madvise);			/* #219 */
@


1.13
log
@set fadvise64 as dummy. some binaries compiled with a recent glibc
seems to require it; henning ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.11 2003/07/03 00:00:04 tedu Exp $ */
d120 22
@


1.12
log
@add sys_sysinfo.  from marius aamodt eriksen.
linux_misc.c: fvdl gave his copyright to tnf, adjust.
@
text
@d119 1
@


1.11
log
@add mmap2 (mmap64, take your pick) and clean up some.  use MAP_TRYFIXED
since that's the way linux works.  no regressions by various ports testers,
eyeballed by a few others.
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.10 2002/10/30 20:10:48 millert Exp $ */
a83 1
DUMMY(sysinfo);			/* #116 */
@


1.10
log
@Now that we have [gs]etres[ug]id() as a native system call, use it
for HP-UX, FreeBSD, and Linux emulations.  Note that Linux has two
versions of these system calls.  One for 16bit uids and another for
32bit uids.
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.9 2002/10/28 03:39:30 fgsch Exp $ */
a110 1
DUMMY(mmap2);			/* #192 */
@


1.9
log
@getdents64 support, based on FreeBSD.
thanks to jpmk@@fibertel.com.ar for providing a testbed; jasoni ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.7 2002/03/14 00:42:25 miod Exp $ */
a115 3
DUMMY(setresuid);		/* #208 */
DUMMY(setresgid);		/* #210 */
DUMMY(getresgid);		/* #211 */
@


1.8
log
@withough -> without
@
text
@a123 1
DUMMY(getdents64);		/* #220 */
@


1.7
log
@Turn the ptrace(2) syscall into a kernel compile option, option PTRACE in
your kernel configuration file.
By default, GENERIC will enable this.

When PTRACE is not enabled, several ptrace-like features of the procfs
filesystem will be disabled as well (namely, the ability to read and write
any process' registers, as well as attching, single stepping and detaching
to/from processes).

This should help paranoid people build better sandboxens, and us to build
smaller ramdisks.
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.6 2002/02/04 20:04:52 provos Exp $ */
d17 1
a17 1
 *    derived from this software withough specific prior written permission
@


1.6
log
@fcntl64 support; okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.4 2001/04/02 21:43:11 niklas Exp $ */
d60 1
d62 1
@


1.5
log
@add new system calls as dummies, except for those which we already have
an equivalent for; from netbsd
ok niklas@@
@
text
@a122 1
DUMMY(fcntl64);			/* #221 */
@


1.5.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.5 2001/07/04 19:59:47 jasoni Exp $ */
d17 1
a17 1
 *    derived from this software without specific prior written permission
a59 1
#ifdef PTRACE
a60 1
#endif
d123 1
@


1.5.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.5.4.1 2002/06/11 03:28:08 art Exp $ */
d124 1
@


1.5.4.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d116 3
@


1.4
log
@On popular demand, the Linux-compatibility clone(2) implementation based
on NetBSD's code, as well as some faked Posix RT extensions by me.  This makes
at least simple linuxthreads tests work.
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.3 2001/01/29 07:23:54 jasoni Exp $ */
d110 14
@


1.4.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.4 2001/04/02 21:43:11 niklas Exp $ */
@


1.4.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.4.4.1 2001/05/14 22:04:36 niklas Exp $ */
a109 14
DUMMY(lchown);			/* #198 */
DUMMY(setreuid);		/* #203 */
DUMMY(setregid);		/* #204 */
DUMMY(fchown);			/* #207 */
DUMMY(setresuid);		/* #208 */
DUMMY(setresgid);		/* #210 */
DUMMY(getresgid);		/* #211 */
DUMMY(chown);			/* #212 */
DUMMY(setfsgid);		/* #216 */
DUMMY(pivot_root);		/* #217 */
DUMMY(mincore);			/* #218 */
DUMMY(madvise);			/* #219 */
DUMMY(getdents64);		/* #220 */
DUMMY(fcntl64);			/* #221 */
@


1.4.4.3
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d123 1
@


1.4.4.4
log
@Merge in -current from about a week ago
@
text
@a59 1
#ifdef PTRACE
a60 1
#endif
@


1.4.4.5
log
@Sync the SMP branch with 3.3
@
text
@d17 1
a17 1
 *    derived from this software without specific prior written permission
d116 3
d124 1
@


1.4.4.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d84 1
d111 1
a120 23
DUMMY(fadvise64);		/* #250 */

#define DUMMY_XATTR(s)							\
int									\
linux_sys_ ## s ## xattr(p, v, retval)						\
	struct proc *p;							\
	void *v;							\
	register_t *retval;						\
{									\
	return (ENOATTR);						\
}									
DUMMY_XATTR(set);
DUMMY_XATTR(lset);
DUMMY_XATTR(fset);
DUMMY_XATTR(get);
DUMMY_XATTR(lget);
DUMMY_XATTR(fget);
DUMMY_XATTR(list);
DUMMY_XATTR(llist);
DUMMY_XATTR(flist);
DUMMY_XATTR(remove);
DUMMY_XATTR(lremove);
DUMMY_XATTR(fremove);
@


1.4.4.7
log
@Merge with the trunk
@
text
@d118 1
@


1.3
log
@implement ftruncate64
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.2 2000/12/22 07:34:02 jasoni Exp $ */
a82 1
DUMMY(clone);			/* #120 */
a96 7
DUMMY(sched_setparam);		/* #154 */
DUMMY(sched_getparam);		/* #155 */
DUMMY(sched_setscheduler);	/* #156 */
DUMMY(sched_getscheduler);	/* #157 */
DUMMY(sched_yield);		/* #158 */
DUMMY(sched_get_priority_max);	/* #159 */
DUMMY(sched_get_priority_min);	/* #160 */
@


1.2
log
@Implement truncate64, stat64, lstat64, fstat64; from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_dummy.c,v 1.1 2000/07/07 02:13:40 jasoni Exp $ */
a117 1
DUMMY(ftruncate64);		/* #194 */
@


1.1
log
@Change all UNIMPL and OBSOL syscalls to STD.
Add these syscalls to linux_dummy.c where they return ENOSYS and display
a friendler message which tells you what unimplemented syscall has been
called.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a117 1
DUMMY(truncate64);		/* #193 */
a118 3
DUMMY(stat64);			/* #195 */
DUMMY(lstat64);			/* #196 */
DUMMY(fstat64);			/* #197 */
@

