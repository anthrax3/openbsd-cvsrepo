head	1.7;
access;
symbols
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.10
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	SMP:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.7
date	2016.03.02.15.41.48;	author naddy;	state dead;
branches;
next	1.6;
commitid	ZfNt0OHZhMg52abA;

1.6
date	2012.09.05.17.13.37;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.07.01.19.39;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.03.20.49.28;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.50;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.16.21.47.12;	author provos;	state Exp;
branches
	1.2.6.1
	1.2.10.1;
next	1.1;

1.1
date	2000.06.07.13.35.02;	author niklas;	state Exp;
branches;
next	;

1.2.6.1
date	2001.05.14.22.04.46;	author niklas;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.03.28.11.28.06;	author niklas;	state Exp;
branches;
next	1.2.6.3;

1.2.6.3
date	2003.06.07.11.00.36;	author ho;	state Exp;
branches;
next	;

1.2.10.1
date	2002.06.11.03.28.08;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove the Linux emulation code, no longer referenced by anything
@
text
@/*	$OpenBSD: linux_resource.c,v 1.6 2012/09/05 17:13:37 deraadt Exp $	*/

/*
 * Copyright (c) 2000 Niklas Hallqvist
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Linux "resource" syscall emulation
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mount.h>
#include <sys/proc.h>
#include <sys/resource.h>
#include <sys/resourcevar.h>
#include <sys/syscallargs.h>

#include <compat/linux/linux_types.h>
#include <compat/linux/linux_resource.h>
#include <compat/linux/linux_signal.h>
#include <compat/linux/linux_syscallargs.h>

/* linux_resource.c */
int	linux_to_bsd_rlimit(u_int);
int	linux_dogetrlimit(struct proc *, void *, register_t *, rlim_t);

static u_int linux_to_bsd_rlimit_map[] = {
	RLIMIT_CPU,
	RLIMIT_FSIZE,
	RLIMIT_DATA,
	RLIMIT_STACK,
	RLIMIT_CORE,
	RLIMIT_RSS,
	RLIMIT_NPROC,
	RLIMIT_NOFILE,
	RLIMIT_MEMLOCK,
	RLIM_NLIMITS		/* LINUX_RLIMIT_AS not supported */
};

int
linux_to_bsd_rlimit(which)
	u_int which;
{
	if (which >= LINUX_RLIM_NLIMITS)
		return (RLIM_NLIMITS);
	return (linux_to_bsd_rlimit_map[which]);
}


struct compat_sys_setrlimit_args {
	syscallarg(int) which;
	syscallarg(struct olimit *) rlp;
};

struct compat_linux_rlimit {
	int32_t rlim_cur;		/* current (soft) limit */
	int32_t rlim_max;		/* maximum value for rlim_cur */
};

int compat_sys_setrlimit(struct proc *p, void *v, register_t *retval);
int
compat_sys_setrlimit(struct proc *p, void *v, register_t *retval)
{
	struct compat_sys_setrlimit_args *uap = v;
	struct compat_linux_rlimit olim;
	struct rlimit lim;
	int error;

	error = copyin((caddr_t)SCARG(uap, rlp), (caddr_t)&olim,
	    sizeof (olim));
	if (error)
		return (error);
	lim.rlim_cur = olim.rlim_cur;
	lim.rlim_max = olim.rlim_max;
	return (dosetrlimit(p, SCARG(uap, which), &lim));
}

int
linux_sys_setrlimit(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct linux_sys_setrlimit_args /* {
		syscallarg(u_int) which;
		syscallarg(struct linux_rlimit *) rlp;
	} */ *uap = v;

	SCARG(uap, which) = linux_to_bsd_rlimit(SCARG(uap, which));
	if (SCARG(uap, which) == RLIM_NLIMITS)
		return (EINVAL);
	return (compat_sys_setrlimit(p, v, retval));
}

int
linux_dogetrlimit(p, v, retval, max)
	struct proc *p;
	void *v;
	register_t *retval;
	rlim_t max;
{
	struct linux_sys_getrlimit_args /* {
		syscallarg(u_int) which;
		syscallarg(struct linux_rlimit *) rlp;
	} */ *uap = v;
	u_int which;
	struct linux_rlimit rlim;

	which = linux_to_bsd_rlimit(SCARG(uap, which));
	if (which == RLIM_NLIMITS)
		return (EINVAL);

	rlim.rlim_cur = MIN(p->p_rlimit[which].rlim_cur, max);
	rlim.rlim_max = MIN(p->p_rlimit[which].rlim_max, max);
	return (copyout(&rlim, SCARG(uap, rlp), sizeof rlim));
}

int
linux_sys_getrlimit(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	return (linux_dogetrlimit(p, v, retval, LINUX_OLD_RLIM_INFINITY));
}

int
linux_sys_ugetrlimit(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	return (linux_dogetrlimit(p, v, retval, LINUX_RLIM_INFINITY));
}
@


1.6
log
@struct orlimit is only used by linux compat now, and can stop polluting
the system .h files
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_resource.c,v 1.5 2011/07/07 01:19:39 tedu Exp $	*/
@


1.5
log
@remove all the old COMPAT_43 syscalls.  The option itself remains for
the other things it enables.  Move a few old wrappers into linux compat
where they are still being used.
ok deraadt guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_resource.c,v 1.4 2003/06/03 20:49:28 deraadt Exp $	*/
d76 6
d87 1
a87 1
	struct orlimit olim;
d92 1
a92 1
	    sizeof (struct orlimit));
@


1.4
log
@fix various 3/4 licenses according to "terms" file
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_resource.c,v 1.3 2002/03/14 01:26:50 millert Exp $	*/
d71 23
d108 1
a108 1
	return (compat_43_sys_setrlimit(p, v, retval));
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_resource.c,v 1.2 2000/06/16 21:47:12 provos Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Niklas Hallqvist
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
@


1.2
log
@take MIN/MAX from param.h, okay theo@@
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_resource.c,v 1.1 2000/06/07 13:35:02 niklas Exp $	*/
d51 2
a52 2
int	linux_to_bsd_rlimit __P((u_int));
int	linux_dogetrlimit __P((struct proc *, void *, register_t *, rlim_t));
@


1.2.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_resource.c,v 1.2 2000/06/16 21:47:12 provos Exp $	*/
d51 2
a52 2
int	linux_to_bsd_rlimit(u_int);
int	linux_dogetrlimit(struct proc *, void *, register_t *, rlim_t);
@


1.2.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_resource.c,v 1.2 2000/06/16 21:47:12 provos Exp $	*/
@


1.2.6.2
log
@Merge in -current from about a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 2
a52 2
int	linux_to_bsd_rlimit(u_int);
int	linux_dogetrlimit(struct proc *, void *, register_t *, rlim_t);
@


1.2.6.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_resource.c,v 1.2.6.2 2002/03/28 11:28:06 niklas Exp $	*/
d15 5
@


1.1
log
@Fix linux [gs]etrlimit emulation + add their latest ugetrlimit
@
text
@d1 1
a1 1
/*	$OpenBSD: linux_misc.c,v 1.27 2000/04/12 04:22:40 jasoni Exp $	*/
a48 2

#define	MIN(a,b) (((a)<(b))?(a):(b))
@

