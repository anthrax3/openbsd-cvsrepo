head	1.9;
access;
symbols
	OPENBSD_4_9:1.8.0.14
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.12
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.22
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.20
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.18
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.16
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.14
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.12
	OPENBSD_2_8:1.6.0.10
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.6
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2011.07.07.01.23.56;	author tedu;	state dead;
branches;
next	1.8;

1.8
date	2007.10.30.12.09.22;	author gilles;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.23.27.59;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.12.20.23.51.31;	author millert;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	98.08.05.16.38.31;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.08.05.16.05.16;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.04.18.21.21.36;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.26.23.26.54;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.12;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.12;	author deraadt;	state Exp;
branches;
next	;

1.6.6.1
date	2003.06.07.11.00.36;	author ho;	state Exp;
branches;
next	;


desc
@@


1.9
log
@remove old files
@
text
@/*	$OpenBSD: uipc_syscalls_43.c,v 1.8 2007/10/30 12:09:22 gilles Exp $	*/
/*	$NetBSD: uipc_syscalls_43.c,v 1.5 1996/03/14 19:31:50 christos Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1989, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)uipc_syscalls.c	8.4 (Berkeley) 2/21/94
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/filedesc.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/file.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <sys/fcntl.h>
#include <sys/malloc.h>
#include <sys/syslog.h>
#include <sys/unistd.h>
#include <sys/resourcevar.h>

#include <sys/mount.h>
#include <sys/syscallargs.h>

int
compat_43_sys_accept(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct sys_accept_args /* {
		syscallarg(int) s;
		syscallarg(caddr_t) name;
		syscallarg(int *) anamelen;
	} */ *uap = v;
	int error;

	if ((error = sys_accept(p, uap, retval)) != 0)
		return error;

	if (SCARG(uap, name)) {
		struct sockaddr sa;

		if ((error = copyin(SCARG(uap, name), &sa, sizeof(sa))) != 0)
			return error;

		((struct osockaddr*) &sa)->sa_family = sa.sa_family;

		if ((error = copyout(&sa, SCARG(uap, name), sizeof(sa))) != 0)
			return error;
	}
	return 0;
}


int
compat_43_sys_getpeername(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct sys_getpeername_args /* {
		syscallarg(int) fdes;
		syscallarg(caddr_t) asa;
		syscallarg(int *) alen;
	} */ *uap = v;
	struct sockaddr sa;

	int error;

	if ((error = sys_getpeername(p, uap, retval)) != 0)
		return error;

	if ((error = copyin(SCARG(uap, asa), &sa, sizeof(sa))) != 0)
		return error;

	((struct osockaddr*) &sa)->sa_family = sa.sa_family;

	if ((error = copyout(&sa, SCARG(uap, asa), sizeof(sa))) != 0)
		return error;

	return 0;
}


int
compat_43_sys_getsockname(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct sys_getsockname_args /* {
		syscallarg(int) fdes;
		syscallarg(caddr_t) asa;
		syscallarg(int *) alen;
	} */ *uap = v;
	struct sockaddr sa;
	int error;

	if ((error = sys_getsockname(p, uap, retval)) != 0)
		return error;

	if ((error = copyin(SCARG(uap, asa), &sa, sizeof(sa))) != 0)
		return error;

	((struct osockaddr*) &sa)->sa_family = sa.sa_family;

	if ((error = copyout(&sa, SCARG(uap, asa), sizeof(sa))) != 0)
		return error;

	return 0;
}


int
compat_43_sys_recv(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct compat_43_sys_recv_args /* {
		syscallarg(int) s;
		syscallarg(caddr_t) buf;
		syscallarg(int) len;
		syscallarg(int) flags;
	} */ *uap = v;
	struct msghdr msg;
	struct iovec aiov;

	msg.msg_name = 0;
	msg.msg_namelen = 0;
	msg.msg_iov = &aiov;
	msg.msg_iovlen = 1;
	aiov.iov_base = SCARG(uap, buf);
	aiov.iov_len = SCARG(uap, len);
	msg.msg_control = 0;
	msg.msg_flags = SCARG(uap, flags);
	return (recvit(p, SCARG(uap, s), &msg, (caddr_t)0, retval));
}


#ifdef MSG_COMPAT
int
compat_43_sys_recvfrom(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct sys_recvfrom_args /* {
		syscallarg(int) s;
		syscallarg(caddr_t) buf;
		syscallarg(size_t) len;
		syscallarg(int) flags;
		syscallarg(caddr_t) from;
		syscallarg(int *) fromlenaddr;
	} */ *uap = v;

	SCARG(uap, flags) |= MSG_COMPAT;
	return (sys_recvfrom(p, uap, retval));
}
#endif


#ifdef MSG_COMPAT
/*
 * Old recvmsg.  This code takes advantage of the fact that the old msghdr
 * overlays the new one, missing only the flags, and with the (old) access
 * rights where the control fields are now.
 */
int
compat_43_sys_recvmsg(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct compat_43_sys_recvmsg_args /* {
		syscallarg(int) s;
		syscallarg(struct omsghdr *) msg;
		syscallarg(int) flags;
	} */ *uap = v;
	struct msghdr msg;
	struct iovec aiov[UIO_SMALLIOV], *iov;
	int error;

	error = copyin((caddr_t)SCARG(uap, msg), (caddr_t)&msg,
	    sizeof (struct omsghdr));
	if (error)
		return (error);
	if (msg.msg_iovlen <= 0 || msg.msg_iovlen > IOV_MAX)
		return (EMSGSIZE);
	if (msg.msg_iovlen > UIO_SMALLIOV)
		iov = malloc(sizeof(struct iovec) * msg.msg_iovlen,
		    M_IOV, M_WAITOK);
	else
		iov = aiov;
	msg.msg_flags = SCARG(uap, flags) | MSG_COMPAT;
	error = copyin((caddr_t)msg.msg_iov, (caddr_t)iov,
	    (unsigned)(msg.msg_iovlen * sizeof (struct iovec)));
	if (error)
		goto done;
	msg.msg_iov = iov;
	error = recvit(p, SCARG(uap, s), &msg,
	    (caddr_t)&SCARG(uap, msg)->msg_namelen, retval);

	if (msg.msg_controllen && error == 0)
		error = copyout((caddr_t)&msg.msg_controllen,
		    (caddr_t)&SCARG(uap, msg)->msg_accrightslen, sizeof (int));
done:
	if (iov != aiov)
		free(iov, M_IOV);
	return (error);
}
#endif

int
compat_43_sys_send(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct compat_43_sys_send_args /* {
		syscallarg(int) s;
		syscallarg(caddr_t) buf;
		syscallarg(int) len;
		syscallarg(int) flags;
	} */ *uap = v;
	struct msghdr msg;
	struct iovec aiov;

	msg.msg_name = 0;
	msg.msg_namelen = 0;
	msg.msg_iov = &aiov;
	msg.msg_iovlen = 1;
	aiov.iov_base = SCARG(uap, buf);
	aiov.iov_len = SCARG(uap, len);
	msg.msg_control = 0;
	msg.msg_flags = 0;
	return (sendit(p, SCARG(uap, s), &msg, SCARG(uap, flags), retval));
}

#ifdef MSG_COMPAT
int
compat_43_sys_sendmsg(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct compat_43_sys_sendmsg_args /* {
		syscallarg(int) s;
		syscallarg(caddr_t) msg;
		syscallarg(int) flags;
	} */ *uap = v;
	struct msghdr msg;
	struct iovec aiov[UIO_SMALLIOV], *iov;
	int error;

	error = copyin(SCARG(uap, msg), (caddr_t)&msg,
	    sizeof (struct omsghdr));
	if (error)
		return (error);
	if (msg.msg_iovlen <= 0 || msg.msg_iovlen > IOV_MAX)
		return (EMSGSIZE);
	if (msg.msg_iovlen > UIO_SMALLIOV)
		iov = malloc(sizeof(struct iovec) * msg.msg_iovlen,
		    M_IOV, M_WAITOK);
	else
		iov = aiov;
	error = copyin((caddr_t)msg.msg_iov, (caddr_t)iov,
	    (unsigned)(msg.msg_iovlen * sizeof (struct iovec)));
	if (error)
		goto done;
	msg.msg_flags = MSG_COMPAT;
	msg.msg_iov = iov;
	error = sendit(p, SCARG(uap, s), &msg, SCARG(uap, flags), retval);
done:
	if (iov != aiov)
		free(iov, M_IOV);
	return (error);
}
#endif
@


1.8
log
@- replace the remaining MALLOC/FREE -> malloc/free in sys/compat

ok krw@@, ok pyr@@
@
text
@d1 1
a1 1
/*	$OpenBSD: uipc_syscalls_43.c,v 1.7 2003/06/02 23:27:59 millert Exp $	*/
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: uipc_syscalls_43.c,v 1.6 1998/12/20 23:51:31 millert Exp $	*/
d221 2
a222 2
		MALLOC(iov, struct iovec *,
		      sizeof(struct iovec) * msg.msg_iovlen, M_IOV, M_WAITOK);
d239 1
a239 1
		FREE(iov, M_IOV);
d293 2
a294 2
		MALLOC(iov, struct iovec *,
		      sizeof(struct iovec) * msg.msg_iovlen, M_IOV, M_WAITOK);
d306 1
a306 1
		FREE(iov, M_IOV);
@


1.6
log
@Use IOV_MAX, not the deprecated UIO_MAXIOV
@
text
@d1 1
a1 1
/*	$OpenBSD: uipc_syscalls_43.c,v 1.5 1998/08/05 16:38:31 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6.6.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: uipc_syscalls_43.c,v 1.6 1998/12/20 23:51:31 millert Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.5
log
@add missing check for msg.msg_iovlen <= 0
@
text
@d1 1
a1 1
/*	$OpenBSD: uipc_syscalls_43.c,v 1.4 1998/08/05 16:05:16 millert Exp $	*/
d222 1
a222 1
	if (msg.msg_iovlen <= 0 || msg.msg_iovlen > UIO_MAXIOV)
d294 1
a294 1
	if (msg.msg_iovlen <= 0 || msg.msg_iovlen > UIO_MAXIOV)
@


1.4
log
@delete bogus casts of msg_iovlen to u_int since msg_iovlen is already a u_int
@
text
@d1 1
a1 1
/*	$OpenBSD: uipc_syscalls_43.c,v 1.3 1996/04/18 21:21:36 niklas Exp $	*/
d222 3
a224 3
	if (msg.msg_iovlen >= UIO_SMALLIOV) {
		if (msg.msg_iovlen >= UIO_MAXIOV)
			return (EMSGSIZE);
d227 1
a227 1
	} else
d294 3
a296 3
	if (msg.msg_iovlen >= UIO_SMALLIOV) {
		if (msg.msg_iovlen >= UIO_MAXIOV)
			return (EMSGSIZE);
d299 1
a299 1
	} else
@


1.3
log
@Merge of NetBSD 960317
@
text
@d1 1
a1 1
/*	$OpenBSD: uipc_syscalls_43.c,v 1.2 1996/02/26 23:26:54 niklas Exp $	*/
d222 2
a223 2
	if ((u_int)msg.msg_iovlen >= UIO_SMALLIOV) {
		if ((u_int)msg.msg_iovlen >= UIO_MAXIOV)
d226 1
a226 2
		      sizeof(struct iovec) * (u_int)msg.msg_iovlen, M_IOV,
		      M_WAITOK);
d294 2
a295 2
	if ((u_int)msg.msg_iovlen >= UIO_SMALLIOV) {
		if ((u_int)msg.msg_iovlen >= UIO_MAXIOV)
d298 1
a298 2
		      sizeof(struct iovec) * (u_int)msg.msg_iovlen, M_IOV, 
		      M_WAITOK);
@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: uipc_syscalls_43.c,v 1.4 1996/02/10 00:12:46 christos Exp $	*/
d218 3
a220 2
	if (error = copyin((caddr_t)SCARG(uap, msg), (caddr_t)&msg,
	    sizeof (struct omsghdr)))
d231 3
a233 2
	if (error = copyin((caddr_t)msg.msg_iov, (caddr_t)iov,
	    (unsigned)(msg.msg_iovlen * sizeof (struct iovec))))
d291 3
a293 2
	if (error = copyin(SCARG(uap, msg), (caddr_t)&msg,
	    sizeof (struct omsghdr)))
d303 3
a305 2
	if (error = copyin((caddr_t)msg.msg_iov, (caddr_t)iov,
	    (unsigned)(msg.msg_iovlen * sizeof (struct iovec))))
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: uipc_syscalls_43.c,v 1.3 1995/10/07 06:26:30 mycroft Exp $	*/
a57 2
#define MSG_COMPAT	0x8000	/* XXX */

d175 1
d194 1
d197 1
d245 1
d273 1
d311 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
