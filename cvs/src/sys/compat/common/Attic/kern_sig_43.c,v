head	1.13;
access;
symbols
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.8
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.6
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.2
	UBC_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2011.07.07.01.23.56;	author tedu;	state dead;
branches;
next	1.12;

1.12
date	2011.07.05.04.48.02;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2011.04.18.21.44.56;	author guenther;	state Exp;
branches;
next	1.10;

1.10
date	2011.04.15.04.52.40;	author guenther;	state Exp;
branches;
next	1.9;

1.9
date	2010.06.28.23.00.30;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.26.23.24.44;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.23.27.59;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.06.19.53.17;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.16.05.07.51;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.19.16.54.27;	author art;	state Exp;
branches;
next	1.3;

1.3
date	96.04.18.21.21.34;	author niklas;	state Exp;
branches
	1.3.16.1;
next	1.2;

1.2
date	96.01.05.16.18.24;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.12;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.12;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2001.05.14.22.04.19;	author niklas;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2001.07.04.10.39.15;	author niklas;	state Exp;
branches;
next	1.3.16.3;

1.3.16.3
date	2001.11.13.21.05.47;	author niklas;	state Exp;
branches;
next	1.3.16.4;

1.3.16.4
date	2003.06.07.11.00.36;	author ho;	state Exp;
branches;
next	;


desc
@@


1.13
log
@remove old files
@
text
@/*	$OpenBSD: kern_sig_43.c,v 1.12 2011/07/05 04:48:02 guenther Exp $	*/
/*	$NetBSD: kern_sig_43.c,v 1.7 1996/03/14 19:31:47 christos Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1989, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)kern_sig.c	8.7 (Berkeley) 4/18/94
 */

#include <sys/param.h>
#include <sys/signalvar.h>
#include <sys/resourcevar.h>
#include <sys/namei.h>
#include <sys/vnode.h>
#include <sys/proc.h>
#include <sys/systm.h>
#include <sys/times.h>
#include <sys/buf.h>
#include <sys/acct.h>
#include <sys/file.h>
#include <sys/kernel.h>
#include <sys/wait.h>
#include <sys/ktrace.h>
#include <sys/syslog.h>
#include <sys/stat.h>
#include <sys/core.h>

#include <sys/mount.h>
#include <sys/syscallargs.h>

#include <machine/cpu.h>

#include <uvm/uvm_extern.h>

int
compat_43_sys_sigblock(p, v, retval)
	register struct proc *p;
	void *v;
	register_t *retval;
{
	struct compat_43_sys_sigblock_args /* {
		syscallarg(int) mask;
	} */ *uap = v;
	int s;

	s = splhigh();
	*retval = p->p_sigmask;
	p->p_sigmask |= SCARG(uap, mask) &~ sigcantmask;
	splx(s);
	return (0);
}


int
compat_43_sys_sigsetmask(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct compat_43_sys_sigsetmask_args /* {
		syscallarg(int) mask;
	} */ *uap = v;
	int s;

	s = splhigh();
	*retval = p->p_sigmask;
	p->p_sigmask = SCARG(uap, mask) &~ sigcantmask;
	splx(s);
	return (0);
}


/* ARGSUSED */
int
compat_43_sys_sigstack(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct compat_43_sys_sigstack_args /* {
		syscallarg(struct sigstack *) nss;
		syscallarg(struct sigstack *) oss;
	} */ *uap = v;
	struct sigstack ss;
	int error = 0;

	if (SCARG(uap, oss)) {
		ss.ss_sp = p->p_sigstk.ss_sp;
		ss.ss_onstack = p->p_sigstk.ss_flags & SS_ONSTACK;
		if ((error = copyout(&ss, SCARG(uap, oss), sizeof(ss))))
			return (error);
	}
	if (SCARG(uap, nss) == 0)
		return (0);
	error = copyin(SCARG(uap, nss), &ss, sizeof(ss));
	if (error)
		return (error);
	if (p->p_sigstk.ss_flags & SS_ONSTACK)
		return (EPERM);
	if (ss.ss_onstack)
		return (EINVAL);
	p->p_sigstk.ss_sp = ss.ss_sp;
	p->p_sigstk.ss_size = 0;
	p->p_sigstk.ss_flags = 0;
	return (0);
}

/*
 * Generalized interface signal handler, 4.3-compatible.
 */
/* ARGSUSED */
int
compat_43_sys_sigvec(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct compat_43_sys_sigvec_args /* {
		syscallarg(int) signum;
		syscallarg(struct sigvec *) nsv;
		syscallarg(struct sigvec *) osv;
	} */ *uap = v;
	struct sigvec vec;
	register struct sigacts *ps = p->p_sigacts;
	register struct sigvec *sv;
	register int signum;
	int bit, error;

	signum = SCARG(uap, signum);
	if (signum <= 0 || signum >= NSIG ||
	    signum == SIGKILL || signum == SIGSTOP)
		return (EINVAL);
	sv = &vec;
	if (SCARG(uap, osv)) {
		*(sig_t *)&sv->sv_handler = ps->ps_sigact[signum];
		sv->sv_mask = ps->ps_catchmask[signum];
		bit = sigmask(signum);
		sv->sv_flags = 0;
		if ((ps->ps_sigonstack & bit) != 0)
			sv->sv_flags |= SV_ONSTACK;
		if ((ps->ps_sigintr & bit) != 0)
			sv->sv_flags |= SV_INTERRUPT;
		if ((ps->ps_sigreset & bit) != 0)
			sv->sv_flags |= SV_RESETHAND;
		if (ps->ps_flags & SAS_NOCLDSTOP)
			sv->sv_flags |= SA_NOCLDSTOP;
		sv->sv_mask &= ~bit;
		error = copyout((caddr_t)sv, (caddr_t)SCARG(uap, osv),
		    sizeof (vec));
		if (error)
			return (error);
	}
	if (SCARG(uap, nsv)) {
		error = copyin((caddr_t)SCARG(uap, nsv), (caddr_t)sv,
		    sizeof (vec));
		if (error)
			return (error);
		sv->sv_flags ^= SA_RESTART;	/* opposite of SV_INTERRUPT */
		setsigvec(p, signum, (struct sigaction *)sv);
	}
	return (0);
}


/* ARGSUSED */
int
compat_43_sys_killpg(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	register struct compat_43_sys_killpg_args /* {
		syscallarg(int) pgid;
		syscallarg(int) signum;
	} */ *uap = v;

	if ((u_int)SCARG(uap, signum) >= NSIG)
		return (EINVAL);
	return (killpg1(p, SCARG(uap, signum), SCARG(uap, pgid), 0));
}
@


1.12
log
@Recommit the reverted sigacts change now that the NFS use-after-free
problem has been tracked down.  This fixes the sharing of the signal
handling state: shared bits go in sigacts, per-rthread bits goes in
struct proc.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_sig_43.c,v 1.11 2011/04/18 21:44:56 guenther Exp $	*/
@


1.11
log
@Revert the sigacts diff: NFS can apparently retain pointers to processes
until they're zombies and then send them signals (for intr mounts).  Until
that is untangled, the sigacts change is unsafe.  sthen@@ was the victim
for this one
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_sig_43.c,v 1.9 2010/06/28 23:00:30 guenther Exp $	*/
a114 1
	struct sigacts *psp;
d117 6
a122 6
	psp = p->p_sigacts;
	ss.ss_sp = psp->ps_sigstk.ss_sp;
	ss.ss_onstack = psp->ps_sigstk.ss_flags & SS_ONSTACK;
	if (SCARG(uap, oss) && (error = copyout((caddr_t)&ss,
	    (caddr_t)SCARG(uap, oss), sizeof (struct sigstack))))
		return (error);
d125 1
a125 2
	error = copyin((caddr_t)SCARG(uap, nss), (caddr_t)&ss,
	    sizeof (ss));
d128 7
a134 4
	psp->ps_flags |= SAS_ALTSTACK;
	psp->ps_sigstk.ss_sp = ss.ss_sp;
	psp->ps_sigstk.ss_size = 0;
	psp->ps_sigstk.ss_flags |= ss.ss_onstack & SS_ONSTACK;
d175 1
a175 1
		if (p->p_flag & P_NOCLDSTOP)
@


1.10
log
@Correct the sharing of the signal handling state: stuff that should
be shared (p_sigignore, p_sigcatch, P_NOCLDSTOP, P_NOCLDWAIT) moves
to struct sigacts, wihle stuff that should be per rthread (ps_oldmask,
SAS_OLDMASK, ps_sigstk) moves to struct proc.  Treat the coredumping
state bits (ps_sig, ps_code, ps_type, ps_sigval) as per-rthread
until our locking around coredumping is better.

Oh, and remove the old SunOS-compat ps_usertramp member.

"I like the sound of this" tedu@@
@
text
@d115 1
d118 6
a123 6
	if (SCARG(uap, oss)) {
		ss.ss_sp = p->p_sigstk.ss_sp;
		ss.ss_onstack = p->p_sigstk.ss_flags & SS_ONSTACK;
		if ((error = copyout(&ss, SCARG(uap, oss), sizeof(ss))))
			return (error);
	}
d126 2
a127 1
	error = copyin(SCARG(uap, nss), &ss, sizeof(ss));
d130 4
a133 7
	if (p->p_sigstk.ss_flags & SS_ONSTACK)
		return (EPERM);
	if (ss.ss_onstack)
		return (EINVAL);
	p->p_sigstk.ss_sp = ss.ss_sp;
	p->p_sigstk.ss_size = 0;
	p->p_sigstk.ss_flags = 0;
d174 1
a174 1
		if (ps->ps_flags & SAS_NOCLDSTOP)
@


1.9
log
@<sys/time.b> is for ftime(), which is just in libcompat and not the kernel,
so stop including it in kernel .c files.
"sure" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_sig_43.c,v 1.8 2010/06/26 23:24:44 guenther Exp $	*/
a114 1
	struct sigacts *psp;
d117 6
a122 6
	psp = p->p_sigacts;
	ss.ss_sp = psp->ps_sigstk.ss_sp;
	ss.ss_onstack = psp->ps_sigstk.ss_flags & SS_ONSTACK;
	if (SCARG(uap, oss) && (error = copyout((caddr_t)&ss,
	    (caddr_t)SCARG(uap, oss), sizeof (struct sigstack))))
		return (error);
d125 1
a125 2
	error = copyin((caddr_t)SCARG(uap, nss), (caddr_t)&ss,
	    sizeof (ss));
d128 7
a134 4
	psp->ps_flags |= SAS_ALTSTACK;
	psp->ps_sigstk.ss_sp = ss.ss_sp;
	psp->ps_sigstk.ss_size = 0;
	psp->ps_sigstk.ss_flags |= ss.ss_onstack & SS_ONSTACK;
d175 1
a175 1
		if (p->p_flag & P_NOCLDSTOP)
@


1.8
log
@Don't #include <sys/user.h> into files that don't need the stuff
it defines.  In some cases, this means pulling in uvm.h or pcb.h
instead, but most of the inclusions were just noise.  Tested on
alpha, amd64, armish, hppa, i386, macpcc, sgi, sparc64, and vax,
mostly by krw and naddy.
ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_sig_43.c,v 1.7 2003/06/02 23:27:59 millert Exp $	*/
a46 1
#include <sys/timeb.h>
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_sig_43.c,v 1.6 2001/11/06 19:53:17 miod Exp $	*/
a64 1
#include <sys/user.h>		/* for coredump */
@


1.6
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_sig_43.c,v 1.5 2001/05/16 05:07:51 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@kill COMPAT_{09,10,11} kernel options.  We still need kern_info_09.c and kern_ipc_10.c for other compat modules.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_sig_43.c,v 1.4 2001/02/19 16:54:27 art Exp $	*/
d68 1
a68 1
#include <vm/vm.h>
@


1.4
log
@spl sanity
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_sig_43.c,v 1.3 1996/04/18 21:21:34 niklas Exp $	*/
a210 4

#ifdef COMPAT_09
	SCARG(uap, pgid) = (short) SCARG(uap, pgid);
#endif
@


1.3
log
@Merge of NetBSD 960317
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d80 1
d82 1
a82 1
	(void) splhigh();
d85 1
a85 1
	(void) spl0();
d99 1
d101 1
a101 1
	(void) splhigh();
d104 1
a104 1
	(void) spl0();
@


1.3.16.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_sig_43.c,v 1.4 2001/02/19 16:54:27 art Exp $	*/
a79 1
	int s;
d81 1
a81 1
	s = splhigh();
d84 1
a84 1
	splx(s);
a97 1
	int s;
d99 1
a99 1
	s = splhigh();
d102 1
a102 1
	splx(s);
@


1.3.16.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_sig_43.c,v 1.3.16.1 2001/05/14 22:04:19 niklas Exp $	*/
d211 4
@


1.3.16.3
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d68 1
a68 1
#include <uvm/uvm_extern.h>
@


1.3.16.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_sig_43.c,v 1.3.16.3 2001/11/13 21:05:47 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2
log
@ss_sp is correct, ss_base is not. noticed by agc@@sde.uts.amdahl.com; netbsd pr#1784
@
text
@d1 2
a2 1
/*	$NetBSD: kern_sig_43.c,v 1.6 1996/01/04 22:23:01 jtc Exp $	*/
d130 3
a132 2
	if (error = copyin((caddr_t)SCARG(uap, nss), (caddr_t)&ss,
	    sizeof (ss)))
d181 3
a183 2
		if (error = copyout((caddr_t)sv, (caddr_t)SCARG(uap, osv),
		    sizeof (vec)))
d187 3
a189 2
		if (error = copyin((caddr_t)SCARG(uap, nsv), (caddr_t)sv,
		    sizeof (vec)))
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: kern_sig_43.c,v 1.5 1995/10/07 06:26:29 mycroft Exp $	*/
d122 1
a122 1
	ss.ss_sp = psp->ps_sigstk.ss_base;
d133 1
a133 1
	psp->ps_sigstk.ss_base = ss.ss_sp;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
