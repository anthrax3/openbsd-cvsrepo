head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	OPENBSD_3_2:1.2.0.30
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.28
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2003.01.30.03.29.49;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2002.10.30.20.07.41;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.08.02.20.34.42;	author niklas;	state Exp;
branches
	1.2.16.1
	1.2.26.1;
next	1.1;

1.1
date	95.10.18.08.52.12;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.12;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2003.03.27.23.53.47;	author niklas;	state dead;
branches;
next	;

1.2.26.1
date	2003.05.19.21.51.44;	author tedu;	state dead;
branches;
next	;


desc
@@


1.4
log
@Bring back setreuid(2) and setregid(2) as first class syscalls
(but still implemented via setres[ug]id(2)).  Basically this just
moves them from COMPAT_43 into kern_prot.c.  Also fixes a typo in my
old implementation.  The userland portion will follow in a few days.
deraadt@@ OK
@
text
@/*	$OpenBSD: kern_prot_43.c,v 1.3 2002/10/30 20:07:41 millert Exp $	*/
/*	$NetBSD: kern_prot_43.c,v 1.3 1995/10/07 06:26:27 mycroft Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1989, 1990, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)kern_prot.c	8.6 (Berkeley) 1/21/94
 */

#include <sys/param.h>
#include <sys/acct.h>
#include <sys/systm.h>
#include <sys/ucred.h>
#include <sys/proc.h>
#include <sys/timeb.h>
#include <sys/times.h>
#include <sys/malloc.h>

#include <sys/mount.h>
#include <sys/syscallargs.h>

/* ARGSUSED */
int
compat_43_sys_setregid(p, v, retval)
	register struct proc *p;
	void *v;
	register_t *retval;
{
	struct compat_43_sys_setregid_args /* {
		syscallarg(gid_t) rgid;
		syscallarg(gid_t) egid;
	} */ *uap = v;
	struct pcred *pc = p->p_cred;
	struct sys_setresgid_args sresgidargs;
	gid_t rgid, egid, sgid;

	rgid = SCARG(uap, rgid);
	egid = SCARG(uap, egid);
	/*
         * The saved gid presents a bit of a dilemma, as it did not
         * appear in 4.3BSD.  We only set the saved gid when the real
         * gid is specified and either its value would change, or,
         * where the saved and effective gids are different.
	 */
	if (rgid != (gid_t)-1 && (rgid != pc->p_rgid ||
	    pc->p_svgid != (egid != (gid_t)-1 ? egid : pc->pc_ucred->cr_gid)))
		sgid = rgid;
	else
		sgid = (gid_t)-1;

	SCARG(&sresgidargs, rgid) = rgid;
	SCARG(&sresgidargs, egid) = egid;
	SCARG(&sresgidargs, egid) = sgid;

	return (sys_setresgid(p, &sresgidargs, retval));
}

/* ARGSUSED */
int
compat_43_sys_setreuid(p, v, retval)
	register struct proc *p;
	void *v;
	register_t *retval;
{
	struct compat_43_sys_setreuid_args /* {
		syscallarg(uid_t) ruid;
		syscallarg(uid_t) euid;
	} */ *uap = v;
	struct pcred *pc = p->p_cred;
	struct sys_setresuid_args sresuidargs;
	uid_t ruid, euid, suid;

	ruid = SCARG(uap, ruid);
	euid = SCARG(uap, euid);
	/*
         * The saved uid presents a bit of a dilemma, as it did not
         * appear in 4.3BSD.  We only set the saved uid when the real
         * uid is specified and either its value would change, or,
         * where the saved and effective uids are different.
	 */
	if (ruid != (uid_t)-1 && (ruid != pc->p_ruid ||
	    pc->p_svuid != (euid != (uid_t)-1 ? euid : pc->pc_ucred->cr_uid)))
		suid = ruid;
	else
		suid = (uid_t)-1;

	SCARG(&sresuidargs, ruid) = ruid;
	SCARG(&sresuidargs, euid) = euid;
	SCARG(&sresuidargs, euid) = suid;

	return (sys_setresuid(p, &sresuidargs, retval));
}
@


1.3
log
@Implement osetre[ug]id() in terms of setres[ug]id().
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_prot_43.c,v 1.2 1996/08/02 20:34:42 niklas Exp $	*/
@


1.2
log
@Added Makefiles to build stuff from syscalls.master in some emulations.
Regenerated derived files from various syscalls.master files. Added $OpenBSD$.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_prot_43.c,v 1.3 1995/10/07 06:26:27 mycroft Exp $	*/
d64 2
a65 2
		syscallarg(int) rgid;
		syscallarg(int) egid;
d67 3
a69 2
	struct sys_setegid_args segidargs;
	struct sys_setgid_args sgidargs;
d71 2
d74 4
a77 1
	 * There are five cases, described above in osetreuid()
d79 11
a89 12
	if (SCARG(uap, rgid) == (gid_t)-1) {
		if (SCARG(uap, egid) == (gid_t)-1)
			return (0);				/* -1, -1 */
		SCARG(&segidargs, egid) = SCARG(uap, egid);	/* -1,  N */
		return (sys_setegid(p, &segidargs, retval));
	}
	if (SCARG(uap, egid) == (gid_t)-1) {
		SCARG(&segidargs, egid) = SCARG(uap, rgid);	/* N, -1 */
		return (sys_setegid(p, &segidargs, retval));
	}
	SCARG(&sgidargs, gid) = SCARG(uap, rgid);	/* N, N and N, M */
	return (sys_setgid(p, &sgidargs, retval));
d100 2
a101 2
		syscallarg(int) ruid;
		syscallarg(int) euid;
d103 3
a105 2
	struct sys_seteuid_args seuidargs;
	struct sys_setuid_args suidargs;
d107 2
d110 4
a113 11
	 * There are five cases, and we attempt to emulate them in
	 * the following fashion:
	 * -1, -1: return 0. This is correct emulation.
	 * -1,  N: call seteuid(N). This is correct emulation.
	 *  N, -1: if we called setuid(N), our euid would be changed
	 *         to N as well. the theory is that we don't want to
	 * 	   revoke root access yet, so we call seteuid(N)
	 * 	   instead. This is incorrect emulation, but often
	 *	   suffices enough for binary compatibility.
	 *  N,  N: call setuid(N). This is correct emulation.
	 *  N,  M: call setuid(N). This is close to correct emulation.
d115 11
a125 12
	if (SCARG(uap, ruid) == (uid_t)-1) {
		if (SCARG(uap, euid) == (uid_t)-1)
			return (0);				/* -1, -1 */
		SCARG(&seuidargs, euid) = SCARG(uap, euid);	/* -1,  N */
		return (sys_seteuid(p, &seuidargs, retval));
	}
	if (SCARG(uap, euid) == (uid_t)-1) {
		SCARG(&seuidargs, euid) = SCARG(uap, ruid);	/* N, -1 */
		return (sys_seteuid(p, &seuidargs, retval));
	}
	SCARG(&suidargs, uid) = SCARG(uap, ruid);	/* N, N and N, M */
	return (sys_setuid(p, &suidargs, retval));
@


1.2.26.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_prot_43.c,v 1.2 1996/08/02 20:34:42 niklas Exp $	*/
@


1.2.16.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_prot_43.c,v 1.2 1996/08/02 20:34:42 niklas Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
