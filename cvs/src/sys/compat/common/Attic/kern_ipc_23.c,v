head	1.6;
access;
symbols
	OPENBSD_4_7:1.5.0.22
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.24
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.20
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.18
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.16
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.14
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.6
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.6
date	2010.07.01.01.54.38;	author deraadt;	state dead;
branches;
next	1.5;

1.5
date	2004.07.15.11.25.59;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.21.23.50.35;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.17.23.11.31;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.26.49;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.16.17.14.38;	author millert;	state Exp;
branches
	1.1.2.1
	1.1.6.1;
next	;

1.1.2.1
date	2002.03.28.11.28.05;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.03.27.23.53.47;	author niklas;	state Exp;
branches;
next	;

1.1.6.1
date	2002.06.11.03.28.07;	author art;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2003.05.19.21.51.44;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@compat_o43 and compat_23 can die
@
text
@/*	$OpenBSD: kern_ipc_23.c,v 1.5 2004/07/15 11:25:59 millert Exp $	*/

/*
 * Copyright (c) 2004 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/msg.h>
#include <sys/sem.h>
#include <sys/shm.h>

#include <sys/mount.h>
#include <sys/syscallargs.h>

/*
 * Convert between new and old struct {msq,sem,shm}id_ds (both ways)
 */
#if defined(SYSVMSG) || defined(SYSVSEM) || defined(SYSVSHM)
#define cvt_ds(to, from, type, base) do {				\
	(to)->type##_perm.cuid = (from)->type##_perm.cuid;		\
	(to)->type##_perm.cgid = (from)->type##_perm.cgid;		\
	(to)->type##_perm.uid = (from)->type##_perm.uid;		\
	(to)->type##_perm.gid = (from)->type##_perm.gid;		\
	(to)->type##_perm.mode = (from)->type##_perm.mode & 0xffffU;	\
	(to)->type##_perm.seq = (from)->type##_perm.seq;		\
	(to)->type##_perm.key = (from)->type##_perm.key;		\
	bcopy((caddr_t)&(from)->base, (caddr_t)&(to)->base,		\
	    sizeof(*(to)) - ((caddr_t)&(to)->base - (caddr_t)to));	\
} while (0)
#endif /* SYSVMSG || SYSVSEM || SYSVSHM */

#ifdef SYSVMSG
/*
 * Copy a struct msqid_ds23 from userland and convert to struct msqid_ds
 */
static int
msqid_copyin(const void *uaddr, void *kaddr, size_t len)
{
	struct msqid_ds *msqbuf = kaddr;
	struct msqid_ds23 omsqbuf;
	int error;

	if (len != sizeof(struct msqid_ds))
		return (EFAULT);
	if ((error = copyin(uaddr, &omsqbuf, sizeof(omsqbuf))) == 0)
		cvt_ds(msqbuf, &omsqbuf, msg, msg_first);
	return (error);
}

/*
 * Convert a struct msqid_ds to struct msqid_ds23 and copy to userland
 */
static int
msqid_copyout(const void *kaddr, void *uaddr, size_t len)
{
	const struct msqid_ds *msqbuf = kaddr;
	struct msqid_ds23 omsqbuf;

	if (len != sizeof(struct msqid_ds))
		return (EFAULT);
	cvt_ds(&omsqbuf, msqbuf, msg, msg_first);
	return (copyout(&omsqbuf, uaddr, sizeof(omsqbuf)));
}

/*
 * OpenBSD 2.3 msgctl(2) with 16bit values in struct ipcperm.
 */
int
compat_23_sys_msgctl(struct proc *p, void *v, register_t *retval)
{
	struct compat_23_sys_msgctl_args /* {
		syscallarg(int) msqid;
		syscallarg(int) cmd;
		syscallarg(struct msqid_ds23 *) buf;
	} */ *uap = v;

	return (msgctl1(p, SCARG(uap, msqid), SCARG(uap, cmd),
	    (caddr_t)SCARG(uap, buf), msqid_copyin, msqid_copyout));
}
#endif /* SYSVMSG */

#ifdef SYSVSEM
/*
 * Copy a struct semid_ds23 from userland and convert to struct semid_ds
 */
static int
semid_copyin(const void *uaddr, void *kaddr, size_t len)
{
	struct semid_ds *sembuf = kaddr;
	struct semid_ds23 osembuf;
	int error;

	if (len != sizeof(struct semid_ds))
		return (EFAULT);
	if ((error = copyin(uaddr, &osembuf, sizeof(osembuf))) == 0)
		cvt_ds(sembuf, &osembuf, sem, sem_base);
	return (error);
}

/*
 * Convert a struct semid_ds to struct semid_ds23 and copy to userland
 */
static int
semid_copyout(const void *kaddr, void *uaddr, size_t len)
{
	const struct semid_ds *sembuf = kaddr;
	struct semid_ds23 osembuf;

	if (len != sizeof(struct semid_ds))
		return (EFAULT);
	cvt_ds(&osembuf, sembuf, sem, sem_base);
	return (copyout(&osembuf, uaddr, sizeof(osembuf)));
}

/*
 * OpenBSD 2.3 semctl(2) with 16bit values in struct ipcperm.
 */
int
compat_23_sys___semctl(struct proc *p, void *v, register_t *retval)
{
	struct compat_23_sys___semctl_args /* {
		syscallarg(int) semid;
		syscallarg(int) semnum;
		syscallarg(int) cmd;
		syscallarg(union semun *) arg;
	} */ *uap = v;
	union semun arg;
	int error = 0, cmd = SCARG(uap, cmd);

	switch (cmd) {
	case IPC_SET:
	case IPC_STAT:
	case GETALL:
	case SETVAL:
	case SETALL:
		error = copyin(SCARG(uap, arg), &arg, sizeof(arg));
		break;
	}
	if (error == 0) {
		error = semctl1(p, SCARG(uap, semid), SCARG(uap, semnum),
		    cmd, &arg, retval, semid_copyin, semid_copyout);
	}
	return (error);
}
#endif /* SYSVSEM */

#ifdef SYSVSHM
/*
 * Copy a struct shmid_ds23 from userland and convert to struct shmid_ds
 */
static int
shmid_copyin(const void *uaddr, void *kaddr, size_t len)
{
	struct shmid_ds *shmbuf = kaddr;
	struct shmid_ds23 oshmbuf;
	int error;

	if (len != sizeof(struct shmid_ds))
		return (EFAULT);
	if ((error = copyin(uaddr, &oshmbuf, sizeof(oshmbuf))) == 0)
		cvt_ds(shmbuf, &oshmbuf, shm, shm_segsz);
	return (error);
}

/*
 * Convert a struct shmid_ds to struct shmid_ds23 and copy to userland
 */
static int
shmid_copyout(const void *kaddr, void *uaddr, size_t len)
{
	const struct shmid_ds *shmbuf = kaddr;
	struct shmid_ds23 oshmbuf;

	if (len != sizeof(struct shmid_ds))
		return (EFAULT);
	cvt_ds(&oshmbuf, shmbuf, shm, shm_segsz);
	return (copyout(&oshmbuf, uaddr, sizeof(oshmbuf)));
}

/*
 * OpenBSD 2.3 shmctl(2) with 16bit values in struct ipcperm.
 */
int
compat_23_sys_shmctl(struct proc *p, void *v, register_t *retval)
{
	struct compat_23_sys_shmctl_args /* {
		syscallarg(int) shmid;
		syscallarg(int) cmd;
		syscallarg(struct shmid_ds23 *) buf;
	} */ *uap = v;

	return (shmctl1(p, SCARG(uap, shmid), SCARG(uap, cmd),
	    (caddr_t)SCARG(uap, buf), shmid_copyin, shmid_copyout));
}
#endif /* SYSVSHM */
@


1.5
log
@Complete rewrite derived from kern_ipc_35.c
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ipc_23.c,v 1.4 2004/06/21 23:50:35 tholo Exp $	*/
@


1.4
log
@First step towards more sane time handling in the kernel -- this changes
things such that code that only need a second-resolution uptime or wall
time, and used to get that from time.tv_secs or mono_time.tv_secs now get
this from separate time_t globals time_second and time_uptime.

ok art@@ niklas@@ nordin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ipc_23.c,v 1.3 2002/12/17 23:11:31 millert Exp $	*/
d4 1
a4 1
 * Implementation of SVID semaphores
d6 11
a16 50
 * Author:  Daniel Boulet
 *
 * This software is provided ``AS IS'' without any warranties of any kind.
 */
/*
 * Implementation of SVID messages
 *
 * Author:  Daniel Boulet
 *
 * Copyright 1993 Daniel Boulet and RTMX Inc.
 *
 * This system call was implemented by Daniel Boulet under contract from RTMX.
 *
 * Redistribution and use in source forms, with and without modification,
 * are permitted provided that this entire comment appears intact.
 *
 * Redistribution in binary form may occur without any restrictions.
 * Obviously, it would be nice if you gave credit where credit is due
 * but requiring it would be too onerous.
 *
 * This software is provided ``AS IS'' without any warranties of any kind.
 */
/*
 * Copyright (c) 1994 Adam Glass and Charles M. Hannum.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Adam Glass and Charles M.
 *	Hannum.
 * 4. The names of the authors may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
a22 1
#include <sys/stat.h>
a25 2
#include <sys/malloc.h>
#include <sys/pool.h>
d30 17
d48 9
d58 6
a63 1
void msg_freehdr(struct msg *);
d65 18
d84 1
a84 4
compat_23_sys_msgctl(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
d86 1
a86 1
	register struct compat_23_sys_msgctl_args /* {
d89 1
a89 1
		syscallarg(struct msqid_ds *) buf;
a90 23
	int msqid = SCARG(uap, msqid);
	int cmd = SCARG(uap, cmd);
	struct omsqid_ds *user_msqptr = SCARG(uap, buf);
	struct ucred *cred = p->p_ucred;
	int rval, error;
	struct omsqid_ds omsqbuf;
	register struct msqid_ds *msqptr;

#ifdef MSG_DEBUG_OK
	printf("call to msgctl(%d, %d, %p)\n", msqid, cmd, user_msqptr);
#endif

	msqid = IPCID_TO_IX(msqid);

	if (msqid < 0 || msqid >= msginfo.msgmni) {
#ifdef MSG_DEBUG_OK
		printf("msqid (%d) out of range (0<=msqid<%d)\n", msqid,
		    msginfo.msgmni);
#endif
		return(EINVAL);
	}

	msqptr = &msqids[msqid];
d92 2
a93 98
	if (msqptr->msg_qbytes == 0) {
#ifdef MSG_DEBUG_OK
		printf("no such msqid\n");
#endif
		return(EINVAL);
	}
	if (msqptr->msg_perm.seq != IPCID_TO_SEQ(SCARG(uap, msqid))) {
#ifdef MSG_DEBUG_OK
		printf("wrong sequence number\n");
#endif
		return(EINVAL);
	}

	error = rval = 0;

	switch (cmd) {

	case IPC_RMID:
	{
		struct msg *msghdr;
		if ((error = ipcperm(cred, &msqptr->msg_perm, IPC_M)) != 0)
			return(error);
		/* Free the message headers */
		msghdr = msqptr->msg_first;
		while (msghdr != NULL) {
			struct msg *msghdr_tmp;

			/* Free the segments of each message */
			msqptr->msg_cbytes -= msghdr->msg_ts;
			msqptr->msg_qnum--;
			msghdr_tmp = msghdr;
			msghdr = msghdr->msg_next;
			msg_freehdr(msghdr_tmp);
		}

#ifdef DIAGNOSTIC
		if (msqptr->msg_cbytes != 0)
			panic("sys_omsgctl: msg_cbytes is screwed up");
		if (msqptr->msg_qnum != 0)
			panic("sys_omsgctl: msg_qnum is screwed up");
#endif

		msqptr->msg_qbytes = 0;	/* Mark it as free */

		wakeup((caddr_t)msqptr);
	}

		break;

	case IPC_SET:
		if ((error = ipcperm(cred, &msqptr->msg_perm, IPC_M)))
			return(error);
		if ((error = copyin(user_msqptr, &omsqbuf, sizeof(omsqbuf))) != 0)
			return(error);
		if (omsqbuf.msg_qbytes > msqptr->msg_qbytes && cred->cr_uid != 0)
			return(EPERM);
		if (omsqbuf.msg_qbytes > msginfo.msgmnb) {
#ifdef MSG_DEBUG_OK
			printf("can't increase msg_qbytes beyond %d (truncating)\n",
			    msginfo.msgmnb);
#endif
			omsqbuf.msg_qbytes = msginfo.msgmnb;	/* silently restrict qbytes to system limit */
		}
		if (omsqbuf.msg_qbytes == 0) {
#ifdef MSG_DEBUG_OK
			printf("can't reduce msg_qbytes to 0\n");
#endif
			return(EINVAL);		/* non-standard errno! */
		}
		msqptr->msg_perm.uid = omsqbuf.msg_perm.uid;	/* change the owner */
		msqptr->msg_perm.gid = omsqbuf.msg_perm.gid;	/* change the owner */
		msqptr->msg_perm.mode = (msqptr->msg_perm.mode & ~0777) |
		    (omsqbuf.msg_perm.mode & 0777);
		msqptr->msg_qbytes = omsqbuf.msg_qbytes;
		msqptr->msg_ctime = time_second;
		break;

	case IPC_STAT:
		if ((error = ipcperm(cred, &msqptr->msg_perm, IPC_R))) {
#ifdef MSG_DEBUG_OK
			printf("requester doesn't have read access\n");
#endif
			return(error);
		}
		msqid_n2o(msqptr, &omsqbuf);
		error = copyout((caddr_t)&omsqbuf, user_msqptr, sizeof omsqbuf);
		break;

	default:
#ifdef MSG_DEBUG_OK
		printf("invalid command %d\n", cmd);
#endif
		return(EINVAL);
	}

	if (error == 0)
		*retval = rval;
	return(error);
d97 6
a102 12
#ifdef SYSVSHM

struct shmid_ds *shm_find_segment_by_shmid(int);
void shm_deallocate_segment(struct shmid_ds *);

#define SHMSEG_REMOVED		0x0400		/* XXX */

int
compat_23_sys_shmctl(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
d104 2
a105 5
	struct compat_23_sys_shmctl_args /* {
		syscallarg(int) shmid;
		syscallarg(int) cmd;
		syscallarg(struct shmid_ds *) buf;
	} */ *uap = v;
d107 6
a112 48
	struct ucred *cred = p->p_ucred;
	struct oshmid_ds oinbuf;
	struct shmid_ds *shmseg;
	extern int shm_last_free;

	shmseg = shm_find_segment_by_shmid(SCARG(uap, shmid));
	if (shmseg == NULL)
		return EINVAL;
	switch (SCARG(uap, cmd)) {
	case IPC_STAT:
		if ((error = ipcperm(cred, &shmseg->shm_perm, IPC_R)) != 0)
			return error;
		shmid_n2o(shmseg, &oinbuf);
		error = copyout((caddr_t)&oinbuf, SCARG(uap, buf),
		    sizeof(oinbuf));
		if (error)
			return error;
		break;
	case IPC_SET:
		if ((error = ipcperm(cred, &shmseg->shm_perm, IPC_M)) != 0)
			return error;
		error = copyin(SCARG(uap, buf), (caddr_t)&oinbuf,
		    sizeof(oinbuf));
		if (error)
			return error;
		shmseg->shm_perm.uid = oinbuf.shm_perm.uid;
		shmseg->shm_perm.gid = oinbuf.shm_perm.gid;
		shmseg->shm_perm.mode =
		    (shmseg->shm_perm.mode & ~ACCESSPERMS) |
		    (oinbuf.shm_perm.mode & ACCESSPERMS);
		shmseg->shm_ctime = time_second;
		break;
	case IPC_RMID:
		if ((error = ipcperm(cred, &shmseg->shm_perm, IPC_M)) != 0)
			return error;
		shmseg->shm_perm.key = IPC_PRIVATE;
		shmseg->shm_perm.mode |= SHMSEG_REMOVED;
		if (shmseg->shm_nattch <= 0) {
			shm_deallocate_segment(shmseg);
			shm_last_free = IPCID_TO_IX(SCARG(uap, shmid));
		}
		break;
	case SHM_LOCK:
	case SHM_UNLOCK:
	default:
		return EINVAL;
	}
	return 0;
a113 1
#endif /* SYSVSHM */
d115 8
a122 1
#ifdef SYSVSEM
d124 5
a128 2
extern struct pool sema_pool;
void semundo_clear(int, int);
d130 3
d134 1
a134 4
compat_23_sys___semctl(p, v, retval)
	struct proc *p;
	register void *v;
	register_t *retval;
d136 1
a136 1
	register struct compat_23_sys___semctl_args /* {
d142 2
a143 24
	int semid = SCARG(uap, semid);
	int semnum = SCARG(uap, semnum);
	int cmd = SCARG(uap, cmd);
	union semun *arg = SCARG(uap, arg);
	union semun real_arg;
	struct ucred *cred = p->p_ucred;
	int i, rval, error;
	struct semid_ds *semaptr;
	struct osemid_ds osbuf;
	extern int semtot;

#ifdef SEM_DEBUG
	printf("call to semctl(%d, %d, %d, %p)\n", semid, semnum, cmd, arg);
#endif

	semid = IPCID_TO_IX(semid);
	if (semid < 0 || semid >= seminfo.semmsl)
		return(EINVAL);

	if ((semaptr = sema[semid]) == NULL ||
	    semaptr->sem_perm.seq != IPCID_TO_SEQ(SCARG(uap, semid)))
		return(EINVAL);

	error = rval = 0;
a145 13
	case IPC_RMID:
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_M)) != 0)
			return(error);
		semaptr->sem_perm.cuid = cred->cr_uid;
		semaptr->sem_perm.uid = cred->cr_uid;
		semtot -= semaptr->sem_nsems;
		free(semaptr->sem_base, M_SHM);
		pool_put(&sema_pool, semaptr);
		sema[semid] = NULL;
		semundo_clear(semid, -1);
		wakeup((caddr_t)&sema[semid]);
		break;

a146 14
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_M)))
			return(error);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
		if ((error = copyin(real_arg.buf, (caddr_t)&osbuf,
		    sizeof(osbuf))) != 0)
			return(error);
		semaptr->sem_perm.uid = osbuf.sem_perm.uid;
		semaptr->sem_perm.gid = osbuf.sem_perm.gid;
		semaptr->sem_perm.mode = (semaptr->sem_perm.mode & ~0777) |
		    (osbuf.sem_perm.mode & 0777);
		semaptr->sem_ctime = time_second;
		break;

d148 4
a151 6
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
		semid_n2o(semaptr, &osbuf);
		error = copyout((caddr_t)&osbuf, real_arg.buf, sizeof(osbuf));
d153 8
d162 10
a171 7
	case GETNCNT:
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
		if (semnum < 0 || semnum >= semaptr->sem_nsems)
			return(EINVAL);
		rval = semaptr->sem_base[semnum].semncnt;
		break;
d173 6
a178 7
	case GETPID:
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
		if (semnum < 0 || semnum >= semaptr->sem_nsems)
			return(EINVAL);
		rval = semaptr->sem_base[semnum].sempid;
		break;
d180 8
a187 7
	case GETVAL:
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
		if (semnum < 0 || semnum >= semaptr->sem_nsems)
			return(EINVAL);
		rval = semaptr->sem_base[semnum].semval;
		break;
d189 5
a193 12
	case GETALL:
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
		for (i = 0; i < semaptr->sem_nsems; i++) {
			error = copyout((caddr_t)&semaptr->sem_base[i].semval,
			    &real_arg.array[i], sizeof(real_arg.array[0]));
			if (error != 0)
				break;
		}
		break;
d195 11
a205 19
	case GETZCNT:
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
		if (semnum < 0 || semnum >= semaptr->sem_nsems)
			return(EINVAL);
		rval = semaptr->sem_base[semnum].semzcnt;
		break;

	case SETVAL:
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_W)))
			return(error);
		if (semnum < 0 || semnum >= semaptr->sem_nsems)
			return(EINVAL);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
		semaptr->sem_base[semnum].semval = real_arg.val;
		semundo_clear(semid, semnum);
		wakeup((caddr_t)&sema[semid]);
		break;
d207 2
a208 23
	case SETALL:
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_W)))
			return(error);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
		for (i = 0; i < semaptr->sem_nsems; i++) {
			error = copyin(&real_arg.array[i],
			    (caddr_t)&semaptr->sem_base[i].semval,
			    sizeof(real_arg.array[0]));
			if (error != 0)
				break;
		}
		semundo_clear(semid, -1);
		wakeup((caddr_t)&sema[semid]);
		break;

	default:
		return(EINVAL);
	}

	if (error == 0)
		*retval = rval;
	return(error);
d210 1
a210 1
#endif /* SYSVSEM */
@


1.3
log
@Make SysV-style shared memory and semaphore limits sysctl'able.
Instead of allocating a static amount of memory for the data
structures via valloc() in allocsys(), allocate things dynamically
using pool(9) when possible and malloc(9) when not.  The various
members of struct seminfo and struct shminfo are in kern.seminfo
and kern.shminfo respectively (not all members of kern.seminfo are
changable).

The data structures used still leave something to be desired but
things are not made worse in that respect by this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ipc_23.c,v 1.2 2002/03/14 01:26:49 millert Exp $	*/
d185 1
a185 1
		msqptr->msg_ctime = time.tv_sec;
d261 1
a261 1
		shmseg->shm_ctime = time.tv_sec;
d350 1
a350 1
		semaptr->sem_ctime = time.tv_sec;
@


1.2
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ipc_23.c,v 1.1 2001/05/16 17:14:38 millert Exp $	*/
d67 1
d91 1
a91 1
	int rval, eval;
d124 1
a124 2
	eval = 0;
	rval = 0;
d131 2
a132 2
		if ((eval = ipcperm(cred, &msqptr->msg_perm, IPC_M)) != 0)
			return(eval);
d161 4
a164 4
		if ((eval = ipcperm(cred, &msqptr->msg_perm, IPC_M)))
			return(eval);
		if ((eval = copyin(user_msqptr, &omsqbuf, sizeof(omsqbuf))) != 0)
			return(eval);
d189 1
a189 1
		if ((eval = ipcperm(cred, &msqptr->msg_perm, IPC_R))) {
d193 1
a193 1
			return(eval);
d196 1
a196 1
		eval = copyout((caddr_t)&omsqbuf, user_msqptr, sizeof omsqbuf);
d206 1
a206 1
	if (eval == 0)
d208 1
a208 1
	return(eval);
d284 1
d305 1
a305 1
	int i, rval, eval;
d318 1
a318 2
	semaptr = &sema[semid];
	if ((semaptr->sem_perm.mode & SEM_ALLOC) == 0 ||
d322 1
a322 2
	eval = 0;
	rval = 0;
d326 2
a327 2
		if ((eval = ipcperm(cred, &semaptr->sem_perm, IPC_M)) != 0)
			return(eval);
d331 3
a333 8
		for (i = semaptr->sem_base - sem; i < semtot; i++)
			sem[i] = sem[i + semaptr->sem_nsems];
		for (i = 0; i < seminfo.semmni; i++) {
			if ((sema[i].sem_perm.mode & SEM_ALLOC) &&
			    sema[i].sem_base > semaptr->sem_base)
				sema[i].sem_base -= semaptr->sem_nsems;
		}
		semaptr->sem_perm.mode = 0;
d335 1
a335 1
		wakeup((caddr_t)semaptr);
d339 5
a343 5
		if ((eval = ipcperm(cred, &semaptr->sem_perm, IPC_M)))
			return(eval);
		if ((eval = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(eval);
		if ((eval = copyin(real_arg.buf, (caddr_t)&osbuf,
d345 1
a345 1
			return(eval);
d354 4
a357 4
		if ((eval = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(eval);
		if ((eval = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(eval);
d359 1
a359 1
		eval = copyout((caddr_t)&osbuf, real_arg.buf, sizeof osbuf);
d363 2
a364 2
		if ((eval = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(eval);
d371 2
a372 2
		if ((eval = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(eval);
d379 2
a380 2
		if ((eval = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(eval);
d387 4
a390 4
		if ((eval = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(eval);
		if ((eval = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(eval);
d392 1
a392 1
			eval = copyout((caddr_t)&semaptr->sem_base[i].semval,
d394 1
a394 1
			if (eval != 0)
d400 2
a401 2
		if ((eval = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(eval);
d408 2
a409 2
		if ((eval = ipcperm(cred, &semaptr->sem_perm, IPC_W)))
			return(eval);
d412 2
a413 2
		if ((eval = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(eval);
d416 1
a416 1
		wakeup((caddr_t)semaptr);
d420 4
a423 4
		if ((eval = ipcperm(cred, &semaptr->sem_perm, IPC_W)))
			return(eval);
		if ((eval = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(eval);
d425 1
a425 1
			eval = copyin(&real_arg.array[i],
d428 1
a428 1
			if (eval != 0)
d432 1
a432 1
		wakeup((caddr_t)semaptr);
d439 1
a439 1
	if (eval == 0)
d441 1
a441 1
	return(eval);
@


1.1
log
@Create COMPAT_25 and move ogetfsstat, ostatfs and ostatfs into it.
Create COMPAT_23 and move __osemctl, omsgctl, oshmctl there.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d73 1
a73 1
void msg_freehdr __P((struct msg *));
d214 2
a215 2
struct shmid_ds *shm_find_segment_by_shmid __P((int));
void shm_deallocate_segment __P((struct shmid_ds *));
d284 1
a284 1
void semundo_clear __P((int, int));
@


1.1.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ipc_23.c,v 1.1 2001/05/16 17:14:38 millert Exp $	*/
d73 1
a73 1
void msg_freehdr(struct msg *);
d214 2
a215 2
struct shmid_ds *shm_find_segment_by_shmid(int);
void shm_deallocate_segment(struct shmid_ds *);
d284 1
a284 1
void semundo_clear(int, int);
@


1.1.6.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a66 1
#include <sys/pool.h>
d90 1
a90 1
	int rval, error;
d123 2
a124 1
	error = rval = 0;
d131 2
a132 2
		if ((error = ipcperm(cred, &msqptr->msg_perm, IPC_M)) != 0)
			return(error);
d161 4
a164 4
		if ((error = ipcperm(cred, &msqptr->msg_perm, IPC_M)))
			return(error);
		if ((error = copyin(user_msqptr, &omsqbuf, sizeof(omsqbuf))) != 0)
			return(error);
d189 1
a189 1
		if ((error = ipcperm(cred, &msqptr->msg_perm, IPC_R))) {
d193 1
a193 1
			return(error);
d196 1
a196 1
		error = copyout((caddr_t)&omsqbuf, user_msqptr, sizeof omsqbuf);
d206 1
a206 1
	if (error == 0)
d208 1
a208 1
	return(error);
a283 1
extern struct pool sema_pool;
d304 1
a304 1
	int i, rval, error;
d317 2
a318 1
	if ((semaptr = sema[semid]) == NULL ||
d322 2
a323 1
	error = rval = 0;
d327 2
a328 2
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_M)) != 0)
			return(error);
d332 8
a339 3
		free(semaptr->sem_base, M_SHM);
		pool_put(&sema_pool, semaptr);
		sema[semid] = NULL;
d341 1
a341 1
		wakeup((caddr_t)&sema[semid]);
d345 5
a349 5
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_M)))
			return(error);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
		if ((error = copyin(real_arg.buf, (caddr_t)&osbuf,
d351 1
a351 1
			return(error);
d360 4
a363 4
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
d365 1
a365 1
		error = copyout((caddr_t)&osbuf, real_arg.buf, sizeof(osbuf));
d369 2
a370 2
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
d377 2
a378 2
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
d385 2
a386 2
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
d393 4
a396 4
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
d398 1
a398 1
			error = copyout((caddr_t)&semaptr->sem_base[i].semval,
d400 1
a400 1
			if (error != 0)
d406 2
a407 2
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
d414 2
a415 2
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_W)))
			return(error);
d418 2
a419 2
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
d422 1
a422 1
		wakeup((caddr_t)&sema[semid]);
d426 4
a429 4
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_W)))
			return(error);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
d431 1
a431 1
			error = copyin(&real_arg.array[i],
d434 1
a434 1
			if (error != 0)
d438 1
a438 1
		wakeup((caddr_t)&sema[semid]);
d445 1
a445 1
	if (error == 0)
d447 1
a447 1
	return(error);
@


1.1.2.1
log
@Merge in -current from about a week ago
@
text
@d73 1
a73 1
void msg_freehdr(struct msg *);
d214 2
a215 2
struct shmid_ds *shm_find_segment_by_shmid(int);
void shm_deallocate_segment(struct shmid_ds *);
d284 1
a284 1
void semundo_clear(int, int);
@


1.1.2.2
log
@Sync the SMP branch with 3.3
@
text
@a66 1
#include <sys/pool.h>
d90 1
a90 1
	int rval, error;
d123 2
a124 1
	error = rval = 0;
d131 2
a132 2
		if ((error = ipcperm(cred, &msqptr->msg_perm, IPC_M)) != 0)
			return(error);
d161 4
a164 4
		if ((error = ipcperm(cred, &msqptr->msg_perm, IPC_M)))
			return(error);
		if ((error = copyin(user_msqptr, &omsqbuf, sizeof(omsqbuf))) != 0)
			return(error);
d189 1
a189 1
		if ((error = ipcperm(cred, &msqptr->msg_perm, IPC_R))) {
d193 1
a193 1
			return(error);
d196 1
a196 1
		error = copyout((caddr_t)&omsqbuf, user_msqptr, sizeof omsqbuf);
d206 1
a206 1
	if (error == 0)
d208 1
a208 1
	return(error);
a283 1
extern struct pool sema_pool;
d304 1
a304 1
	int i, rval, error;
d317 2
a318 1
	if ((semaptr = sema[semid]) == NULL ||
d322 2
a323 1
	error = rval = 0;
d327 2
a328 2
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_M)) != 0)
			return(error);
d332 8
a339 3
		free(semaptr->sem_base, M_SHM);
		pool_put(&sema_pool, semaptr);
		sema[semid] = NULL;
d341 1
a341 1
		wakeup((caddr_t)&sema[semid]);
d345 5
a349 5
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_M)))
			return(error);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
		if ((error = copyin(real_arg.buf, (caddr_t)&osbuf,
d351 1
a351 1
			return(error);
d360 4
a363 4
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
d365 1
a365 1
		error = copyout((caddr_t)&osbuf, real_arg.buf, sizeof(osbuf));
d369 2
a370 2
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
d377 2
a378 2
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
d385 2
a386 2
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
d393 4
a396 4
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
d398 1
a398 1
			error = copyout((caddr_t)&semaptr->sem_base[i].semval,
d400 1
a400 1
			if (error != 0)
d406 2
a407 2
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_R)))
			return(error);
d414 2
a415 2
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_W)))
			return(error);
d418 2
a419 2
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
d422 1
a422 1
		wakeup((caddr_t)&sema[semid]);
d426 4
a429 4
		if ((error = ipcperm(cred, &semaptr->sem_perm, IPC_W)))
			return(error);
		if ((error = copyin(arg, &real_arg, sizeof(real_arg))) != 0)
			return(error);
d431 1
a431 1
			error = copyin(&real_arg.array[i],
d434 1
a434 1
			if (error != 0)
d438 1
a438 1
		wakeup((caddr_t)&sema[semid]);
d445 1
a445 1
	if (error == 0)
d447 1
a447 1
	return(error);
@


