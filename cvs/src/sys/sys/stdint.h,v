head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.4.0.20
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.18
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.16
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.12
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.14
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.10
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.8
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.6
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.4
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.2
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2015.04.30.18.19.25;	author millert;	state Exp;
branches;
next	1.9;
commitid	QjF4xvfrnd2NeqQa;

1.9
date	2014.04.01.05.04.50;	author matthew;	state Exp;
branches;
next	1.8;

1.8
date	2013.06.11.15.59.16;	author matthew;	state Exp;
branches;
next	1.7;

1.7
date	2012.01.05.20.37.50;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2012.01.04.19.03.08;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.08.02.47.12;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.10.22.17.55;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.14.13.19.51;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.06.19.04.41;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.06.18.54.25;	author millert;	state Exp;
branches;
next	;


desc
@@


1.10
log
@SIZE_MAX is no longer in limits.h
@
text
@/*	$OpenBSD: stdint.h,v 1.9 2014/04/01 05:04:50 matthew Exp $	*/

/*
 * Copyright (c) 1997, 2005 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef	_SYS_STDINT_H_
#define _SYS_STDINT_H_

#include <sys/cdefs.h>
#include <machine/_types.h>

#ifndef	__BIT_TYPES_DEFINED__
#define	__BIT_TYPES_DEFINED__
#endif

/* 7.18.1.1 Exact-width integer types (also in sys/types.h) */
#ifndef	_INT8_T_DEFINED_
#define	_INT8_T_DEFINED_
typedef	__int8_t		int8_t;
#endif

#ifndef	_UINT8_T_DEFINED_
#define	_UINT8_T_DEFINED_
typedef	__uint8_t		uint8_t;
#endif

#ifndef	_INT16_T_DEFINED_
#define	_INT16_T_DEFINED_
typedef	__int16_t		int16_t;
#endif

#ifndef	_UINT16_T_DEFINED_
#define	_UINT16_T_DEFINED_
typedef	__uint16_t		uint16_t;
#endif

#ifndef	_INT32_T_DEFINED_
#define	_INT32_T_DEFINED_
typedef	__int32_t		int32_t;
#endif

#ifndef	_UINT32_T_DEFINED_
#define	_UINT32_T_DEFINED_
typedef	__uint32_t		uint32_t;
#endif

#ifndef	_INT64_T_DEFINED_
#define	_INT64_T_DEFINED_
typedef	__int64_t		int64_t;
#endif

#ifndef	_UINT64_T_DEFINED_
#define	_UINT64_T_DEFINED_
typedef	__uint64_t		uint64_t;
#endif

/* 7.18.1.2 Minimum-width integer types */
typedef	__int_least8_t		int_least8_t;
typedef	__uint_least8_t		uint_least8_t;
typedef	__int_least16_t		int_least16_t;
typedef	__uint_least16_t	uint_least16_t;
typedef	__int_least32_t		int_least32_t;
typedef	__uint_least32_t	uint_least32_t;
typedef	__int_least64_t		int_least64_t;
typedef	__uint_least64_t	uint_least64_t;

/* 7.18.1.3 Fastest minimum-width integer types */
typedef	__int_fast8_t		int_fast8_t;
typedef	__uint_fast8_t		uint_fast8_t;
typedef	__int_fast16_t		int_fast16_t;
typedef	__uint_fast16_t		uint_fast16_t;
typedef	__int_fast32_t		int_fast32_t;
typedef	__uint_fast32_t		uint_fast32_t;
typedef	__int_fast64_t		int_fast64_t;
typedef	__uint_fast64_t		uint_fast64_t;

/* 7.18.1.4 Integer types capable of holding object pointers */
#ifndef	_INTPTR_T_DEFINED_
#define	_INTPTR_T_DEFINED_
typedef	__intptr_t		intptr_t;
#endif

typedef	__uintptr_t		uintptr_t;

/* 7.18.1.5 Greatest-width integer types */
typedef	__intmax_t		intmax_t;
typedef	__uintmax_t		uintmax_t;

/*
 * 7.18.2 Limits of specified-width integer types.
 *
 * The following object-like macros specify the minimum and maximum limits
 * of integer types corresponding to the typedef names defined above.
 */

/* 7.18.2.1 Limits of exact-width integer types */
#define	INT8_MIN		(-0x7f - 1)
#define	INT16_MIN		(-0x7fff - 1)
#define	INT32_MIN		(-0x7fffffff - 1)
#define	INT64_MIN		(-0x7fffffffffffffffLL - 1)

#define	INT8_MAX		0x7f
#define	INT16_MAX		0x7fff
#define	INT32_MAX		0x7fffffff
#define	INT64_MAX		0x7fffffffffffffffLL

#define	UINT8_MAX		0xff
#define	UINT16_MAX		0xffff
#define	UINT32_MAX		0xffffffffU
#define	UINT64_MAX		0xffffffffffffffffULL

/* 7.18.2.2 Limits of minimum-width integer types */
#define	INT_LEAST8_MIN		INT8_MIN
#define	INT_LEAST16_MIN		INT16_MIN
#define	INT_LEAST32_MIN		INT32_MIN
#define	INT_LEAST64_MIN		INT64_MIN

#define	INT_LEAST8_MAX		INT8_MAX
#define	INT_LEAST16_MAX		INT16_MAX
#define	INT_LEAST32_MAX		INT32_MAX
#define	INT_LEAST64_MAX		INT64_MAX

#define	UINT_LEAST8_MAX		UINT8_MAX
#define	UINT_LEAST16_MAX	UINT16_MAX
#define	UINT_LEAST32_MAX	UINT32_MAX
#define	UINT_LEAST64_MAX	UINT64_MAX

/* 7.18.2.3 Limits of fastest minimum-width integer types */
#define	INT_FAST8_MIN		__INT_FAST8_MIN
#define	INT_FAST16_MIN		__INT_FAST16_MIN
#define	INT_FAST32_MIN		__INT_FAST32_MIN
#define	INT_FAST64_MIN		__INT_FAST64_MIN

#define	INT_FAST8_MAX		__INT_FAST8_MAX
#define	INT_FAST16_MAX		__INT_FAST16_MAX
#define	INT_FAST32_MAX		__INT_FAST32_MAX
#define	INT_FAST64_MAX		__INT_FAST64_MAX

#define	UINT_FAST8_MAX		__UINT_FAST8_MAX
#define	UINT_FAST16_MAX		__UINT_FAST16_MAX
#define	UINT_FAST32_MAX		__UINT_FAST32_MAX
#define	UINT_FAST64_MAX		__UINT_FAST64_MAX

/* 7.18.2.4 Limits of integer types capable of holding object pointers */
#ifdef __LP64__
#define	INTPTR_MIN		(-0x7fffffffffffffffL - 1)
#define	INTPTR_MAX		0x7fffffffffffffffL
#define	UINTPTR_MAX		0xffffffffffffffffUL
#else
#define	INTPTR_MIN		(-0x7fffffffL - 1)
#define	INTPTR_MAX		0x7fffffffL
#define	UINTPTR_MAX		0xffffffffUL
#endif

/* 7.18.2.5 Limits of greatest-width integer types */
#define	INTMAX_MIN		INT64_MIN
#define	INTMAX_MAX		INT64_MAX
#define	UINTMAX_MAX		UINT64_MAX

/*
 * 7.18.3 Limits of other integer types.
 *
 * The following object-like macros specify the minimum and maximum limits
 * of integer types corresponding to types specified in other standard
 * header files.
 */

/* Limits of ptrdiff_t */
#define	PTRDIFF_MIN		INTPTR_MIN
#define	PTRDIFF_MAX		INTPTR_MAX

/* Limits of sig_atomic_t */
#define	SIG_ATOMIC_MIN		INT32_MIN
#define	SIG_ATOMIC_MAX		INT32_MAX

/* Limit of size_t */
#ifndef	SIZE_MAX
#define	SIZE_MAX		UINTPTR_MAX
#endif

/* Limits of wchar_t */
#ifndef	WCHAR_MIN
#define	WCHAR_MIN		INT32_MIN
#endif
#ifndef	WCHAR_MAX
#define	WCHAR_MAX		INT32_MAX
#endif

/* Limits of wint_t */
#define	WINT_MIN		INT32_MIN
#define	WINT_MAX		INT32_MAX

/*
 * 7.18.4 Macros for integer constants.
 *
 * The following function-like macros expand to integer constants
 * suitable for initializing objects that have integer types corresponding
 * to types defined in <stdint.h>.  The argument in any instance of
 * these macros shall be a decimal, octal, or hexadecimal constant with
 * a value that does not exceed the limits for the corresponding type.
 */

/* 7.18.4.1 Macros for minimum-width integer constants. */
#define	INT8_C(_c)		(_c)
#define	INT16_C(_c)		(_c)
#define	INT32_C(_c)		(_c)
#define	INT64_C(_c)		__CONCAT(_c, LL)

#define	UINT8_C(_c)		(_c)
#define	UINT16_C(_c)		(_c)
#define	UINT32_C(_c)		__CONCAT(_c, U)
#define	UINT64_C(_c)		__CONCAT(_c, ULL)

/* 7.18.4.2 Macros for greatest-width integer constants. */
#define	INTMAX_C(_c)		__CONCAT(_c, LL)
#define	UINTMAX_C(_c)		__CONCAT(_c, ULL)

#endif /* _SYS_STDINT_H_ */
@


1.9
log
@Define intptr_t in <unistd.h> as specified by POSIX

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: stdint.h,v 1.8 2013/06/11 15:59:16 matthew Exp $	*/
d189 1
a189 1
/* Limits of size_t (also in limits.h) */
@


1.8
log
@Contrary to C99's advice, C++ TR1 and C++ 11 require that <inttypes.h>
and <stdint.h> should unconditionally define all of their macros
regardless of whether the __STDC_*_MACROS macros are defined.

ok guenther, espie
bulk build tested by landry
@
text
@d1 1
a1 1
/*	$OpenBSD: stdint.h,v 1.7 2012/01/05 20:37:50 kettenis Exp $	*/
d91 2
d94 2
@


1.7
log
@C99 says that both <wchar.h> and <stdint.h> should define WCHAR_MIN/MAX.

ok beck@@, guenther@@, millert@@, miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdint.h,v 1.6 2012/01/04 19:03:08 kettenis Exp $	*/
a97 1
#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
a201 3
#endif /* __cplusplus || __STDC_LIMIT_MACROS */

#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
a225 2

#endif /* __cplusplus || __STDC_CONSTANT_MACROS */
@


1.6
log
@Make sure the types of INTPTR_MIN/MAX and UINTPTR_MIN/MAX match the type we
use for intptr_t and uintptr_t.

ok millert@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdint.h,v 1.5 2011/09/08 02:47:12 guenther Exp $	*/
d192 1
d194 2
d197 1
@


1.5
log
@Make the INT_FAST*_{MIN,MAX} macros match the types they're defined to.
Since the underlying types of the int_fast types are set by machine/_types.h,
put internal macros in that same file and define the exposed
INT_FAST*_{MIN,MAX} macros from those.

ok millert@@, kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdint.h,v 1.4 2006/12/10 22:17:55 deraadt Exp $	*/
d156 3
a158 3
#define	INTPTR_MIN		INT64_MIN
#define	INTPTR_MAX		INT64_MAX
#define	UINTPTR_MAX		UINT64_MAX
d160 3
a162 3
#define	INTPTR_MIN		INT32_MIN
#define	INTPTR_MAX		INT32_MAX
#define	UINTPTR_MAX		UINT32_MAX
@


1.4
log
@typo; Alexander_Bluhm@@genua.de
@
text
@d1 1
a1 1
/*	$OpenBSD: stdint.h,v 1.3 2006/01/14 13:19:51 millert Exp $	*/
d139 14
a152 14
#define	INT_FAST8_MIN		INT8_MIN
#define	INT_FAST16_MIN		INT16_MIN
#define	INT_FAST32_MIN		INT32_MIN
#define	INT_FAST64_MIN		INT64_MIN

#define	INT_FAST8_MAX		INT8_MAX
#define	INT_FAST16_MAX		INT16_MAX
#define	INT_FAST32_MAX		INT32_MAX
#define	INT_FAST64_MAX		INT64_MAX

#define	UINT_FAST8_MAX		UINT8_MAX
#define	UINT_FAST16_MAX		UINT16_MAX
#define	UINT_FAST32_MAX		UINT32_MAX
#define	UINT_FAST64_MAX		UINT64_MAX
@


1.3
log
@Fix INTX_MIN limits; the minus sign got dropped by accident when
I was converting the values frm decimal to hex.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdint.h,v 1.2 2006/01/06 19:04:41 millert Exp $	*/
d182 1
a182 1
/* Limits of sigatomic_t */
@


1.2
log
@Add missing rcsid
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d107 4
a110 4
#define	INT8_MIN		(0x7f - 1)
#define	INT16_MIN		(0x7fff - 1)
#define	INT32_MIN		(0x7fffffff - 1)
#define	INT64_MIN		(0x7fffffffffffffffLL - 1)
@


1.1
log
@Add real C99 stdint.h and inttypes.h based on an initial version I did in
1997 (yes, really).
@
text
@d1 2
@

