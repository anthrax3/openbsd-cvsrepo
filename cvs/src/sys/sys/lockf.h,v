head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.20
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.18
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.14
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.10
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.12
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.8
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.8.0.18
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.16
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.14
	OPENBSD_5_0:1.8.0.12
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2013.03.24.17.45.25;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.19.12.24.55;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.10.17.26.10;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.14.19.34.05;	author grange;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.23.28.21;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.20.23.23.14;	author gluk;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	96.03.03.12.11.57;	author niklas;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.53.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.27;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2001.07.04.11.00.22;	author niklas;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	1.2.16.3;

1.2.16.3
date	2003.06.07.11.09.07;	author ho;	state Exp;
branches;
next	1.2.16.4;

1.2.16.4
date	2004.02.19.11.01.33;	author niklas;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@hide some kernel functions from userland
@
text
@/*	$OpenBSD: lockf.h,v 1.8 2008/09/19 12:24:55 art Exp $	*/
/*	$NetBSD: lockf.h,v 1.5 1994/06/29 06:44:33 cgd Exp $	*/

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Scooter Morris at Genentech Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)lockf.h	8.1 (Berkeley) 6/11/93
 */

/*
 * The lockf structure is a kernel structure which contains the information
 * associated with a byte range lock.  The lockf structures are linked into
 * the inode structure. Locks are sorted by the starting byte of the lock for
 * efficiency.
 */
TAILQ_HEAD(locklist, lockf);

struct lockf {
	short	lf_flags;	 /* Lock semantics: F_POSIX, F_FLOCK, F_WAIT */
	short	lf_type;	 /* Lock type: F_RDLCK, F_WRLCK */
	off_t	lf_start;	 /* The byte # of the start of the lock */
	off_t	lf_end;		 /* The byte # of the end of the lock (-1=EOF)*/
	caddr_t	lf_id;		 /* The id of the resource holding the lock */
	struct	lockf **lf_head; /* Back pointer to the head of lockf list */
	struct	lockf *lf_next;	 /* A pointer to the next lock on this inode */
	struct	locklist lf_blkhd;	/* The list of blocked locks */
	TAILQ_ENTRY(lockf) lf_block; /* A request waiting for a lock */
	uid_t	lf_uid;		/* User ID responsible */
	pid_t	lf_pid;		/* POSIX - owner pid */
};

/* Maximum length of sleep chains to traverse to try and detect deadlock. */
#define MAXDEPTH 50

#ifdef _KERNEL
__BEGIN_DECLS
void	 lf_init(void);
int	 lf_advlock(struct lockf **,
	    off_t, caddr_t, int, struct flock *, int);
int	 lf_clearlock(struct lockf *);
int	 lf_findoverlap(struct lockf *,
	    struct lockf *, int, struct lockf ***, struct lockf **);
struct lockf *
	 lf_getblock(struct lockf *);
int	 lf_getlock(struct lockf *, struct flock *);
int	 lf_setlock(struct lockf *);
void	 lf_split(struct lockf *, struct lockf *);
void	 lf_wakelock(struct lockf *);
__END_DECLS

#ifdef LOCKF_DEBUG
extern int lockf_debug;

__BEGIN_DECLS
void	lf_print(char *, struct lockf *);
void	lf_printlist(char *, struct lockf *);
__END_DECLS
#endif /* LOCKF_DEBUG */

#endif /* _KERNEL */
@


1.8
log
@Fix a bunch of problems and races with posix file locking.

- file descriptor table becomes the owner of the lock instead of the proc.
- When grabbing the lock, we check if the fd hasn't changed under our
  feet, this is more or less impossible to solve without a hack like
  this. I've banged my head against the wall, I figured out a solution,
  but implementing it correctly would cost me 12 gray hairs. Screw it,
  this is ugly, but it works.
- Wait until usecount drains before releasing the posix lock in closef.
- Add missing FREF/FRELE to sys_flock
- keep the pid in the flock struct instead of abusing the fact that we
  used to use the proc as the lock owner.

Pointed out by and discussed with Al Viro, big thanks.
miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: lockf.h,v 1.7 2005/03/10 17:26:10 tedu Exp $	*/
d63 1
d86 3
a88 1
#endif
@


1.7
log
@split out uidinfo from kern_proc.c private, use it to store lock count,
restrict lock count per uid to a global limit, add sysctl to adjust limit.
this prevents a user from creating too many locks.  problem noticed
by devon o'dell.  ok deraadt miod pedro
@
text
@d1 1
a1 1
/*	$OpenBSD: lockf.h,v 1.6 2004/01/14 19:34:05 grange Exp $	*/
d57 1
@


1.6
log
@Get rid of M_LOCKF and use pool for allocating lockf structures.
 From NetBSD.

Tested by many people, ok art@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: lockf.h,v 1.5 2003/06/02 23:28:21 millert Exp $	*/
d56 1
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: lockf.h,v 1.4 2002/03/14 01:27:14 millert Exp $	*/
d62 1
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: lockf.h,v 1.3 2001/06/20 23:23:14 gluk Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@Fix PR1826. tsleep in lf_setlock can return 0 if process was ptrace'd,
but not wakeup'ed. In this case one entry can be placed twice at list of
blocked locks. As a result block list contain an entry which points to
itself. lf_wakelock can't remove such an entry and system livelocks
trying to remove a bad entry from block list.

Other changes include:
 - repair debug functions and make vfs_lockf.c compilable with LOCKF_DEBUG
 - simplify debug printing and remove useless debugging
 - remove unnecessary casting, replace NOLOCKF with NULL
 - free -> FREE (use one form over the file)
 - convert list of blocked locks to use TAILQ_* macroses
 - lf_addblock() -> TAILQ_INSERT_TAIL
 - Fix bug in lf_findoverlap(): in old code
   if (end == -1) && (lf->lf_end == -1) && (lf->lf_start <= start)
   then lf_findoverlap() return 4 instead of 2
 - work more carefully with pointers (probably fix one or two bugs)
 - use wakeup_one()
 - KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: lockf.h,v 1.2 1996/03/03 12:11:57 niklas Exp $	*/
d66 5
a70 5
int	 lf_advlock __P((struct lockf **,
	    off_t, caddr_t, int, struct flock *, int));
int	 lf_clearlock __P((struct lockf *));
int	 lf_findoverlap __P((struct lockf *,
	    struct lockf *, int, struct lockf ***, struct lockf **));
d72 5
a76 5
	 lf_getblock __P((struct lockf *));
int	 lf_getlock __P((struct lockf *, struct flock *));
int	 lf_setlock __P((struct lockf *));
void	 lf_split __P((struct lockf *, struct lockf *));
void	 lf_wakelock __P((struct lockf *));
d83 2
a84 2
void	lf_print __P((char *, struct lockf *));
void	lf_printlist __P((char *, struct lockf *));
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lockf.h,v 1.3 2001/06/20 23:23:14 gluk Exp $	*/
d66 5
a70 5
int	 lf_advlock(struct lockf **,
	    off_t, caddr_t, int, struct flock *, int);
int	 lf_clearlock(struct lockf *);
int	 lf_findoverlap(struct lockf *,
	    struct lockf *, int, struct lockf ***, struct lockf **);
d72 5
a76 5
	 lf_getblock(struct lockf *);
int	 lf_getlock(struct lockf *, struct flock *);
int	 lf_setlock(struct lockf *);
void	 lf_split(struct lockf *, struct lockf *);
void	 lf_wakelock(struct lockf *);
d83 2
a84 2
void	lf_print(char *, struct lockf *);
void	lf_printlist(char *, struct lockf *);
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d48 2
d58 2
a59 1
	struct	lockf *lf_block; /* The list of blocked locks */
a65 1
void	 lf_addblock __P((struct lockf *, struct lockf *));
@


1.2.16.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: lockf.h,v 1.2 1996/03/03 12:11:57 niklas Exp $	*/
a47 2
TAILQ_HEAD(locklist, lockf);

d56 1
a56 2
	struct	locklist lf_blkhd;	/* The list of blocked locks */
	TAILQ_ENTRY(lockf) lf_block; /* A request waiting for a lock */
d63 1
@


1.2.16.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 5
a70 5
int	 lf_advlock(struct lockf **,
	    off_t, caddr_t, int, struct flock *, int);
int	 lf_clearlock(struct lockf *);
int	 lf_findoverlap(struct lockf *,
	    struct lockf *, int, struct lockf ***, struct lockf **);
d72 5
a76 5
	 lf_getblock(struct lockf *);
int	 lf_getlock(struct lockf *, struct flock *);
int	 lf_setlock(struct lockf *);
void	 lf_split(struct lockf *, struct lockf *);
void	 lf_wakelock(struct lockf *);
d83 2
a84 2
void	lf_print(char *, struct lockf *);
void	lf_printlist(char *, struct lockf *);
@


1.2.16.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lockf.h,v 1.2.16.2 2002/03/28 14:52:01 niklas Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2.16.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a61 1
void	 lf_init(void);
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
