head	1.114;
access;
symbols
	OPENBSD_6_1:1.114.0.4
	OPENBSD_6_1_BASE:1.114
	OPENBSD_6_0:1.113.0.2
	OPENBSD_6_0_BASE:1.113
	OPENBSD_5_9:1.112.0.2
	OPENBSD_5_9_BASE:1.112
	OPENBSD_5_8:1.111.0.8
	OPENBSD_5_8_BASE:1.111
	OPENBSD_5_7:1.111.0.2
	OPENBSD_5_7_BASE:1.111
	OPENBSD_5_6:1.111.0.4
	OPENBSD_5_6_BASE:1.111
	OPENBSD_5_5:1.107.0.6
	OPENBSD_5_5_BASE:1.107
	OPENBSD_5_4:1.107.0.2
	OPENBSD_5_4_BASE:1.107
	OPENBSD_5_3:1.101.0.2
	OPENBSD_5_3_BASE:1.101
	OPENBSD_5_2:1.100.0.2
	OPENBSD_5_2_BASE:1.100
	OPENBSD_5_1_BASE:1.99
	OPENBSD_5_1:1.99.0.6
	OPENBSD_5_0:1.99.0.4
	OPENBSD_5_0_BASE:1.99
	OPENBSD_4_9:1.99.0.2
	OPENBSD_4_9_BASE:1.99
	OPENBSD_4_8:1.97.0.2
	OPENBSD_4_8_BASE:1.97
	OPENBSD_4_7:1.96.0.2
	OPENBSD_4_7_BASE:1.96
	OPENBSD_4_6:1.95.0.6
	OPENBSD_4_6_BASE:1.95
	OPENBSD_4_5:1.95.0.2
	OPENBSD_4_5_BASE:1.95
	OPENBSD_4_4:1.92.0.2
	OPENBSD_4_4_BASE:1.92
	OPENBSD_4_3:1.90.0.2
	OPENBSD_4_3_BASE:1.90
	OPENBSD_4_2:1.85.0.2
	OPENBSD_4_2_BASE:1.85
	OPENBSD_4_1:1.83.0.2
	OPENBSD_4_1_BASE:1.83
	OPENBSD_4_0:1.82.0.4
	OPENBSD_4_0_BASE:1.82
	OPENBSD_3_9:1.82.0.2
	OPENBSD_3_9_BASE:1.82
	OPENBSD_3_8:1.79.0.2
	OPENBSD_3_8_BASE:1.79
	OPENBSD_3_7:1.77.0.2
	OPENBSD_3_7_BASE:1.77
	OPENBSD_3_6:1.73.0.2
	OPENBSD_3_6_BASE:1.73
	SMP_SYNC_A:1.71
	SMP_SYNC_B:1.71
	OPENBSD_3_5:1.70.0.2
	OPENBSD_3_5_BASE:1.70
	OPENBSD_3_4:1.68.0.2
	OPENBSD_3_4_BASE:1.68
	UBC_SYNC_A:1.65
	OPENBSD_3_3:1.65.0.2
	OPENBSD_3_3_BASE:1.65
	OPENBSD_3_2:1.61.0.2
	OPENBSD_3_2_BASE:1.61
	OPENBSD_3_1:1.56.0.2
	OPENBSD_3_1_BASE:1.56
	UBC_SYNC_B:1.61
	UBC:1.49.0.2
	UBC_BASE:1.49
	OPENBSD_3_0:1.48.0.2
	OPENBSD_3_0_BASE:1.48
	OPENBSD_2_9_BASE:1.37
	OPENBSD_2_9:1.37.0.2
	OPENBSD_2_8:1.29.0.2
	OPENBSD_2_8_BASE:1.29
	OPENBSD_2_7:1.27.0.4
	OPENBSD_2_7_BASE:1.27
	SMP:1.27.0.2
	SMP_BASE:1.27
	kame_19991208:1.27
	OPENBSD_2_6:1.24.0.2
	OPENBSD_2_6_BASE:1.24
	OPENBSD_2_5:1.21.0.2
	OPENBSD_2_5_BASE:1.21
	OPENBSD_2_4:1.14.0.4
	OPENBSD_2_4_BASE:1.14
	OPENBSD_2_3:1.14.0.2
	OPENBSD_2_3_BASE:1.14
	OPENBSD_2_2:1.12.0.2
	OPENBSD_2_2_BASE:1.12
	OPENBSD_2_1:1.10.0.2
	OPENBSD_2_1_BASE:1.10
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.114
date	2016.11.14.03.20.33;	author dlg;	state Exp;
branches;
next	1.113;
commitid	AisDoyfjR5klt4z1;

1.113
date	2016.07.20.09.15.28;	author bluhm;	state Exp;
branches;
next	1.112;
commitid	Qwlx91wnD3EO5HU6;

1.112
date	2015.08.24.15.33.49;	author mpi;	state Exp;
branches;
next	1.111;
commitid	h0m9NyUpRFq6qXAR;

1.111
date	2014.07.12.18.43.32;	author tedu;	state Exp;
branches;
next	1.110;
commitid	QlVV51SZgNFxsXxC;

1.110
date	2014.07.12.10.51.35;	author tedu;	state Exp;
branches;
next	1.109;
commitid	oRdgytVrnFmzFKO6;

1.109
date	2014.07.10.19.33.16;	author matthew;	state Exp;
branches;
next	1.108;
commitid	V84Gt32TGTrY0uFt;

1.108
date	2014.05.19.14.30.03;	author tedu;	state Exp;
branches;
next	1.107;

1.107
date	2013.06.03.15.56.01;	author tedu;	state Exp;
branches;
next	1.106;

1.106
date	2013.06.03.15.54.48;	author tedu;	state Exp;
branches;
next	1.105;

1.105
date	2013.05.03.18.26.07;	author tedu;	state Exp;
branches;
next	1.104;

1.104
date	2013.04.06.03.53.25;	author tedu;	state Exp;
branches;
next	1.103;

1.103
date	2013.03.26.16.36.01;	author tedu;	state Exp;
branches;
next	1.102;

1.102
date	2013.03.23.16.12.30;	author deraadt;	state Exp;
branches;
next	1.101;

1.101
date	2013.02.07.11.06.42;	author mikeb;	state Exp;
branches;
next	1.100;

1.100
date	2012.04.06.15.10.40;	author jsing;	state Exp;
branches;
next	1.99;

1.99
date	2010.12.25.00.13.21;	author tedu;	state Exp;
branches;
next	1.98;

1.98
date	2010.09.26.21.03.57;	author tedu;	state Exp;
branches;
next	1.97;

1.97
date	2010.07.14.10.31.54;	author matthew;	state Exp;
branches;
next	1.96;

1.96
date	2009.08.25.17.59.45;	author miod;	state Exp;
branches;
next	1.95;

1.95
date	2008.12.29.14.20.19;	author oga;	state Exp;
branches;
next	1.94;

1.94
date	2008.10.18.12.11.30;	author kettenis;	state Exp;
branches;
next	1.93;

1.93
date	2008.09.29.12.34.18;	author art;	state Exp;
branches;
next	1.92;

1.92
date	2008.06.22.15.52.54;	author chl;	state Exp;
branches;
next	1.91;

1.91
date	2008.06.08.17.20.52;	author art;	state Exp;
branches;
next	1.90;

1.90
date	2007.11.28.23.37.34;	author oga;	state Exp;
branches;
next	1.89;

1.89
date	2007.11.25.17.11.12;	author oga;	state Exp;
branches;
next	1.88;

1.88
date	2007.09.18.08.13.49;	author art;	state Exp;
branches;
next	1.87;

1.87
date	2007.09.07.10.22.15;	author art;	state Exp;
branches;
next	1.86;

1.86
date	2007.09.01.17.06.26;	author xsa;	state Exp;
branches;
next	1.85;

1.85
date	2007.06.17.20.06.10;	author jasper;	state Exp;
branches;
next	1.84;

1.84
date	2007.06.01.05.37.14;	author deraadt;	state Exp;
branches;
next	1.83;

1.83
date	2006.09.30.14.31.28;	author mickey;	state Exp;
branches;
next	1.82;

1.82
date	2005.12.14.22.03.01;	author pedro;	state Exp;
branches;
next	1.81;

1.81
date	2005.11.15.07.02.37;	author miod;	state Exp;
branches;
next	1.80;

1.80
date	2005.10.15.00.08.51;	author deraadt;	state Exp;
branches;
next	1.79;

1.79
date	2005.07.03.20.14.00;	author drahn;	state Exp;
branches;
next	1.78;

1.78
date	2005.03.29.17.24.52;	author pedro;	state Exp;
branches;
next	1.77;

1.77
date	2005.03.04.22.41.04;	author reyk;	state Exp;
branches;
next	1.76;

1.76
date	2005.01.14.21.15.08;	author mcbride;	state Exp;
branches;
next	1.75;

1.75
date	2005.01.14.12.04.02;	author grange;	state Exp;
branches;
next	1.74;

1.74
date	2004.12.30.08.28.39;	author niklas;	state Exp;
branches;
next	1.73;

1.73
date	2004.07.21.17.30.56;	author marius;	state Exp;
branches;
next	1.72;

1.72
date	2004.06.20.01.04.28;	author art;	state Exp;
branches;
next	1.71;

1.71
date	2004.05.14.04.00.33;	author tedu;	state Exp;
branches;
next	1.70;

1.70
date	2004.01.14.19.34.05;	author grange;	state Exp;
branches;
next	1.69;

1.69
date	2003.12.28.17.16.55;	author tedu;	state Exp;
branches;
next	1.68;

1.68
date	2003.06.21.00.42.58;	author tedu;	state Exp;
branches;
next	1.67;

1.67
date	2003.06.02.23.28.21;	author millert;	state Exp;
branches;
next	1.66;

1.66
date	2003.05.20.03.05.42;	author tedu;	state Exp;
branches;
next	1.65;

1.65
date	2003.01.30.16.38.39;	author art;	state Exp;
branches;
next	1.64;

1.64
date	2003.01.27.22.23.45;	author miod;	state Exp;
branches;
next	1.63;

1.63
date	2002.12.20.06.00.53;	author art;	state Exp;
branches;
next	1.62;

1.62
date	2002.12.17.23.11.31;	author millert;	state Exp;
branches;
next	1.61;

1.61
date	2002.08.28.08.28.03;	author tdeval;	state Exp;
branches;
next	1.60;

1.60
date	2002.06.28.16.00.23;	author art;	state Exp;
branches;
next	1.59;

1.59
date	2002.06.25.17.11.49;	author itojun;	state Exp;
branches;
next	1.58;

1.58
date	2002.06.21.12.14.21;	author itojun;	state Exp;
branches;
next	1.57;

1.57
date	2002.06.11.05.56.52;	author art;	state Exp;
branches;
next	1.56;

1.56
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.55;

1.55
date	2002.02.22.20.37.45;	author drahn;	state Exp;
branches;
next	1.54;

1.54
date	2002.02.12.17.19.41;	author provos;	state Exp;
branches;
next	1.53;

1.53
date	2002.01.28.11.54.30;	author art;	state Exp;
branches;
next	1.52;

1.52
date	2002.01.25.03.50.33;	author art;	state Exp;
branches;
next	1.51;

1.51
date	2002.01.23.15.46.48;	author art;	state Exp;
branches;
next	1.50;

1.50
date	2002.01.23.10.24.00;	author art;	state Exp;
branches;
next	1.49;

1.49
date	2001.11.28.19.28.14;	author art;	state Exp;
branches
	1.49.2.1;
next	1.48;

1.48
date	2001.08.18.18.15.52;	author art;	state Exp;
branches;
next	1.47;

1.47
date	2001.08.17.23.39.59;	author art;	state Exp;
branches;
next	1.46;

1.46
date	2001.08.11.02.06.24;	author art;	state Exp;
branches;
next	1.45;

1.45
date	2001.07.26.13.59.23;	author art;	state Exp;
branches;
next	1.44;

1.44
date	2001.05.20.00.09.57;	author angelos;	state Exp;
branches;
next	1.43;

1.43
date	2001.05.16.08.59.03;	author art;	state Exp;
branches;
next	1.42;

1.42
date	2001.05.14.08.02.21;	author angelos;	state Exp;
branches;
next	1.41;

1.41
date	2001.05.14.06.56.55;	author angelos;	state Exp;
branches;
next	1.40;

1.40
date	2001.05.11.06.36.59;	author angelos;	state Exp;
branches;
next	1.39;

1.39
date	2001.05.05.20.57.02;	author art;	state Exp;
branches;
next	1.38;

1.38
date	2001.05.02.00.47.53;	author angelos;	state Exp;
branches;
next	1.37;

1.37
date	2001.02.21.23.24.30;	author csapuntz;	state Exp;
branches;
next	1.36;

1.36
date	2001.02.21.08.03.52;	author csapuntz;	state Exp;
branches;
next	1.35;

1.35
date	2001.02.20.23.35.36;	author csapuntz;	state Exp;
branches;
next	1.34;

1.34
date	2001.01.04.07.48.40;	author angelos;	state Exp;
branches;
next	1.33;

1.33
date	2001.01.04.06.03.59;	author angelos;	state Exp;
branches;
next	1.32;

1.32
date	2001.01.03.19.19.52;	author angelos;	state Exp;
branches;
next	1.31;

1.31
date	2001.01.02.17.22.46;	author angelos;	state Exp;
branches;
next	1.30;

1.30
date	2000.11.16.20.02.20;	author provos;	state Exp;
branches;
next	1.29;

1.29
date	2000.08.12.05.59.50;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2000.06.06.20.21.49;	author art;	state Exp;
branches;
next	1.27;

1.27
date	99.12.08.06.50.24;	author itojun;	state Exp;
branches
	1.27.2.1;
next	1.26;

1.26
date	99.11.20.11.11.27;	author matthieu;	state Exp;
branches;
next	1.25;

1.25
date	99.10.29.14.08.13;	author art;	state Exp;
branches;
next	1.24;

1.24
date	99.08.09.03.47.56;	author fgsch;	state Exp;
branches;
next	1.23;

1.23
date	99.06.01.23.43.41;	author ho;	state Exp;
branches;
next	1.22;

1.22
date	99.05.27.23.52.03;	author art;	state Exp;
branches;
next	1.21;

1.21
date	99.02.26.01.57.58;	author art;	state Exp;
branches;
next	1.20;

1.20
date	99.02.15.22.50.25;	author niklas;	state Exp;
branches;
next	1.19;

1.19
date	99.01.11.21.55.27;	author niklas;	state Exp;
branches;
next	1.18;

1.18
date	99.01.11.02.01.45;	author niklas;	state Exp;
branches;
next	1.17;

1.17
date	99.01.07.22.07.14;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	98.11.17.21.05.40;	author art;	state Exp;
branches;
next	1.15;

1.15
date	98.11.17.20.52.16;	author art;	state Exp;
branches;
next	1.14;

1.14
date	98.03.01.00.37.56;	author niklas;	state Exp;
branches;
next	1.13;

1.13
date	97.11.06.05.59.08;	author csapuntz;	state Exp;
branches;
next	1.12;

1.12
date	97.10.06.20.21.07;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	97.10.06.15.25.33;	author csapuntz;	state Exp;
branches;
next	1.10;

1.10
date	97.03.01.21.24.46;	author kstailey;	state Exp;
branches;
next	1.9;

1.9
date	97.02.20.01.07.34;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	97.02.13.18.11.04;	author kstailey;	state Exp;
branches;
next	1.7;

1.7
date	96.07.14.03.52.56;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	96.04.21.22.31.49;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.04.18.21.40.59;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.03.31.13.16.43;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.03.03.12.11.58;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.04.01.02;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.27;	author deraadt;	state Exp;
branches;
next	;

1.27.2.1
date	2001.05.14.22.45.02;	author niklas;	state Exp;
branches;
next	1.27.2.2;

1.27.2.2
date	2001.07.04.11.00.22;	author niklas;	state Exp;
branches;
next	1.27.2.3;

1.27.2.3
date	2001.10.31.03.30.30;	author nate;	state Exp;
branches;
next	1.27.2.4;

1.27.2.4
date	2001.12.05.01.02.40;	author niklas;	state Exp;
branches;
next	1.27.2.5;

1.27.2.5
date	2002.03.06.02.17.13;	author niklas;	state Exp;
branches;
next	1.27.2.6;

1.27.2.6
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	1.27.2.7;

1.27.2.7
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.27.2.8;

1.27.2.8
date	2003.06.07.11.09.07;	author ho;	state Exp;
branches;
next	1.27.2.9;

1.27.2.9
date	2004.02.19.11.01.33;	author niklas;	state Exp;
branches;
next	1.27.2.10;

1.27.2.10
date	2004.06.05.23.13.09;	author niklas;	state Exp;
branches;
next	;

1.49.2.1
date	2002.01.31.22.55.48;	author niklas;	state Exp;
branches;
next	1.49.2.2;

1.49.2.2
date	2002.02.02.03.28.26;	author art;	state Exp;
branches;
next	1.49.2.3;

1.49.2.3
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	1.49.2.4;

1.49.2.4
date	2002.10.29.00.36.49;	author art;	state Exp;
branches;
next	1.49.2.5;

1.49.2.5
date	2002.10.29.01.11.09;	author art;	state Exp;
branches;
next	1.49.2.6;

1.49.2.6
date	2003.05.19.22.32.19;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.114
log
@add a type for counters.

ok mpi@@ visa@@ mikeb@@
@
text
@/*	$OpenBSD: malloc.h,v 1.113 2016/07/20 09:15:28 bluhm Exp $	*/
/*	$NetBSD: malloc.h,v 1.39 1998/07/12 19:52:01 augustss Exp $	*/

/*
 * Copyright (c) 1987, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)malloc.h	8.5 (Berkeley) 5/3/95
 */

#ifndef _SYS_MALLOC_H_
#define	_SYS_MALLOC_H_

#include <sys/queue.h>

#define KERN_MALLOC_BUCKETS	1
#define KERN_MALLOC_BUCKET	2
#define KERN_MALLOC_KMEMNAMES	3
#define KERN_MALLOC_KMEMSTATS	4
#define KERN_MALLOC_MAXID	5

#define CTL_KERN_MALLOC_NAMES { \
	{ 0, 0 }, \
	{ "buckets", CTLTYPE_STRING }, \
	{ "bucket", CTLTYPE_NODE }, \
	{ "kmemnames", CTLTYPE_STRING }, \
	{ "kmemstat", CTLTYPE_NODE }, \
}

/*
 * flags to malloc
 */
#define	M_WAITOK	0x0001
#define	M_NOWAIT	0x0002
#define	M_CANFAIL	0x0004
#define	M_ZERO		0x0008

/*
 * Types of memory to be allocated
 */
#define	M_FREE		0	/* should be on free list */
/* 1 - free */
#define	M_DEVBUF	2	/* device driver memory */
#define M_DEBUG		3	/* debug chunk */
#define	M_PCB		4	/* protocol control block */
#define	M_RTABLE	5	/* routing tables */
/* 6 - free */
#define	M_FTABLE	7	/* fragment reassembly header */
/* 8 - free */
#define	M_IFADDR	9	/* interface address */
#define	M_SOOPTS	10	/* socket options */
#define	M_SYSCTL	11	/* sysctl buffers (persistent storage) */
#define	M_COUNTERS	12	/* per CPU counters */
/* 13 - free */
#define	M_IOCTLOPS	14	/* ioctl data buffer */
/* 15-18 - free */
#define	M_IOV		19	/* large iov's */
#define	M_MOUNT		20	/* vfs mount struct */
/* 21 - free */
#define	M_NFSREQ	22	/* NFS request header */
#define	M_NFSMNT	23	/* NFS mount structure */
/* 24 - free */
#define	M_VNODE		25	/* Dynamically allocated vnodes */
#define	M_CACHE		26	/* Dynamically allocated cache entries */
#define	M_DQUOT		27	/* UFS quota entries */
#define	M_UFSMNT	28	/* UFS mount structure */
#define	M_SHM		29	/* SVID compatible shared memory segments */
#define	M_VMMAP		30	/* VM map structures */
#define	M_SEM		31	/* SVID compatible semaphores */
#define	M_DIRHASH	32	/* UFS dirhash */
#define M_ACPI		33	/* ACPI */
#define	M_VMPMAP	34	/* VM pmap */
/* 35-37 - free */
#define	M_FILE		38	/* Open file structure */
#define	M_FILEDESC	39	/* Open file descriptor table */
/* 40 - free */
#define	M_PROC		41	/* Proc structures */
#define	M_SUBPROC	42	/* Proc sub-structures */
#define	M_VCLUSTER	43	/* Cluster for VFS */
/* 45-46 - free */
#define	M_MFSNODE	46	/* MFS vnode private part */
/* 47-48 - free */
#define	M_NETADDR	49	/* Export host address structure */
#define	M_NFSSVC	50	/* Nfs server structure */
/* 51 - free */
#define	M_NFSD		52	/* Nfs server daemon structure */
#define	M_IPMOPTS	53	/* internet multicast options */
#define	M_IPMADDR	54	/* internet multicast address */
#define	M_IFMADDR	55	/* link-level multicast address */
#define	M_MRTABLE	56	/* multicast routing tables */
#define	M_ISOFSMNT	57	/* ISOFS mount structure */
#define	M_ISOFSNODE	58	/* ISOFS vnode private part */
#define	M_MSDOSFSMNT	59	/* MSDOS FS mount structure */
#define	M_MSDOSFSFAT	60	/* MSDOS FS fat table */
#define	M_MSDOSFSNODE	61	/* MSDOS FS vnode private part */
#define	M_TTYS		62	/* allocated tty structures */
#define	M_EXEC		63	/* argument lists & other mem used by exec */
#define	M_MISCFSMNT	64	/* miscfs mount structures */
#define	M_FUSEFS	65	/* fusefs mount structures */
/* 66-73 - free */
#define	M_PFKEY		74	/* pfkey data */
#define	M_TDB		75	/* Transforms database */
#define	M_XDATA		76	/* IPsec data */
/* 77 - free */
#define	M_PAGEDEP	78	/* File page dependencies */
#define	M_INODEDEP	79	/* Inode dependencies */
#define	M_NEWBLK	80	/* New block allocation */
/* 81-82 - free */
#define	M_INDIRDEP	83	/* Indirect block dependencies */
/* 84-91 - free */
#define M_VMSWAP	92	/* VM swap structures */
/* 93-97 - free */
#define M_UVMAMAP	98	/* UVM amap and related */
#define M_UVMAOBJ	99	/* UVM aobj and related */
/* 100 - free */
#define	M_USB		101	/* USB general */
#define	M_USBDEV	102	/* USB device driver */
#define	M_USBHC		103	/* USB host controller */
/* 104 - free */
#define M_MEMDESC	105	/* Memory range */
/* 106-107 - free */
#define M_CRYPTO_DATA	108	/* Crypto framework data buffers (keys etc.) */
/* 109 - free */
#define M_CREDENTIALS	110	/* IPsec-related credentials and ID info */
/* 111-113 - free */
#define	M_EMULDATA	114	/* Per-process emulation data */
/* 115-122 - free */

/* KAME IPv6 */
#define	M_IP6OPT	123	/* IPv6 options */
#define	M_IP6NDP	124	/* IPv6 Neighbour Discovery */
/* 125-126 - free */
#define	M_TEMP		127	/* misc temporary data buffers */

#define	M_NTFSMNT	128	/* NTFS mount structure */
#define	M_NTFSNTNODE	129	/* NTFS ntnode information */
#define	M_NTFSFNODE	130	/* NTFS fnode information */
#define	M_NTFSDIR	131	/* NTFS dir buffer */
#define	M_NTFSNTHASH	132	/* NTFS ntnode hash tables */
#define	M_NTFSNTVATTR	133	/* NTFS file attribute information */
#define	M_NTFSRDATA	134	/* NTFS resident data */
#define	M_NTFSDECOMP	135	/* NTFS decompression temporary */
#define	M_NTFSRUN	136	/* NTFS vrun storage */

#define	M_KEVENT	137	/* kqueue related */

	/*		138	   free */
#define	M_SYNCACHE	139	/* syn cache hash array */

#define M_UDFMOUNT	140	/* UDF mount */
#define M_UDFFENTRY	141	/* UDF file entry */
#define M_UDFFID	142	/* UDF file id */

	/*		143	   free */

#define M_AGP		144	/* AGP Memory */

#define M_DRM		145	/* Direct Rendering Manager */

#define	M_LAST		146	/* Must be last type + 1 */

#define	INITKMEMNAMES { \
	"free",		/* 0 M_FREE */ \
	NULL, \
	"devbuf",	/* 2 M_DEVBUF */ \
	"debug", 	/* 3 M_DEBUG */ \
	"pcb",		/* 4 M_PCB */ \
	"rtable",	/* 5 M_RTABLE */ \
	NULL,		/* 6 */ \
	"fragtbl",	/* 7 M_FTABLE */ \
	NULL, \
	"ifaddr",	/* 9 M_IFADDR */ \
	"soopts",	/* 10 M_SOOPTS */ \
	"sysctl",	/* 11 M_SYSCTL */ \
	"counters",	/* 12 M_COUNTERS */ \
	NULL, \
	"ioctlops",	/* 14 M_IOCTLOPS */ \
	NULL, \
	NULL, \
	NULL, \
	NULL, \
	"iov",		/* 19 M_IOV */ \
	"mount",	/* 20 M_MOUNT */ \
	NULL, \
	"NFS req",	/* 22 M_NFSREQ */ \
	"NFS mount",	/* 23 M_NFSMNT */ \
	NULL, \
	"vnodes",	/* 25 M_VNODE */ \
	"namecache",	/* 26 M_CACHE */ \
	"UFS quota",	/* 27 M_DQUOT */ \
	"UFS mount",	/* 28 M_UFSMNT */ \
	"shm",		/* 29 M_SHM */ \
	"VM map",	/* 30 M_VMMAP */ \
	"sem",		/* 31 M_SEM */ \
	"dirhash",	/* 32 M_DIRHASH */ \
	"ACPI", 	/* 33 M_ACPI */ \
	"VM pmap",	/* 34 M_VMPMAP */ \
	NULL,	/* 35 */ \
	NULL,	/* 36 */ \
	NULL,	/* 37 */ \
	"file",		/* 38 M_FILE */ \
	"file desc",	/* 39 M_FILEDESC */ \
	NULL,	/* 40 */ \
	"proc",		/* 41 M_PROC */ \
	"subproc",	/* 42 M_SUBPROC */ \
	"VFS cluster",	/* 43 M_VCLUSTER */ \
	NULL, \
	NULL, \
	"MFS node",	/* 46 M_MFSNODE */ \
	NULL, \
	NULL, \
	"Export Host",	/* 49 M_NETADDR */ \
	"NFS srvsock",	/* 50 M_NFSSVC */ \
	NULL, \
	"NFS daemon",	/* 52 M_NFSD */ \
	"ip_moptions",	/* 53 M_IPMOPTS */ \
	"in_multi",	/* 54 M_IPMADDR */ \
	"ether_multi",	/* 55 M_IFMADDR */ \
	"mrt",		/* 56 M_MRTABLE */ \
	"ISOFS mount",	/* 57 M_ISOFSMNT */ \
	"ISOFS node",	/* 58 M_ISOFSNODE */ \
	"MSDOSFS mount", /* 59 M_MSDOSFSMNT */ \
	"MSDOSFS fat",	/* 60 M_MSDOSFSFAT */ \
	"MSDOSFS node",	/* 61 M_MSDOSFSNODE */ \
	"ttys",		/* 62 M_TTYS */ \
	"exec",		/* 63 M_EXEC */ \
	"miscfs mount",	/* 64 M_MISCFSMNT */ \
	"fusefs mount", /* 65 M_FUSEFS */ \
	NULL, \
	NULL, \
	NULL, \
	NULL, \
	NULL, \
	NULL, \
	NULL, \
	NULL, \
	"pfkey data",	/* 74 M_PFKEY */ \
	"tdb",		/* 75 M_TDB */ \
	"xform_data",	/* 76 M_XDATA */ \
	NULL, \
	"pagedep",	/* 78 M_PAGEDEP */ \
	"inodedep",	/* 79 M_INODEDEP */ \
	"newblk",	/* 80 M_NEWBLK */ \
	NULL, \
	NULL, \
	"indirdep",	/* 83 M_INDIRDEP */ \
	NULL, NULL, NULL, NULL, \
	NULL, NULL, NULL, NULL, \
	"VM swap",	/* 92 M_VMSWAP */ \
	NULL, NULL, NULL, NULL, NULL, \
	"UVM amap",	/* 98 M_UVMAMAP */ \
	"UVM aobj",	/* 99 M_UVMAOBJ */ \
	NULL, \
	"USB",		/* 101 M_USB */ \
	"USB device",	/* 102 M_USBDEV */ \
	"USB HC",	/* 103 M_USBHC */ \
	NULL, \
	"memdesc",	/* 105 M_MEMDESC */ \
	NULL,	/* 106 */ \
	NULL, \
	"crypto data",	/* 108 M_CRYPTO_DATA */ \
	NULL, \
	"IPsec creds",	/* 110 M_CREDENTIALS */ \
	NULL, \
	NULL, \
	NULL, \
	"emuldata",	/* 114 M_EMULDATA */ \
	NULL, NULL, NULL, NULL, \
	NULL, NULL, NULL, NULL, \
	"ip6_options",	/* 123 M_IP6OPT */ \
	"NDP",		/* 124 M_IP6NDP */ \
	NULL, \
	NULL, \
	"temp",		/* 127 M_TEMP */ \
	"NTFS mount",	/* 128 M_NTFSMNT */ \
	"NTFS node",	/* 129 M_NTFSNTNODE */ \
	"NTFS fnode",	/* 130 M_NTFSFNODE */ \
	"NTFS dir",	/* 131 M_NTFSDIR */ \
	"NTFS hash",	/* 132 M_NTFSNTHASH */ \
	"NTFS attr",	/* 133 M_NTFSNTVATTR */ \
	"NTFS data",	/* 134 M_NTFSRDATA */ \
	"NTFS decomp",	/* 135 M_NTFSDECOMP */ \
	"NTFS vrun",	/* 136 M_NTFSRUN */ \
	"kqueue",	/* 137 M_KEVENT */ \
	NULL,	/* 138 free */ \
	"SYN cache",	/* 139 M_SYNCACHE */ \
	"UDF mount",	/* 140 M_UDFMOUNT */ \
	"UDF file entry",	/* 141 M_UDFFENTRY */ \
	"UDF file id",	/* 142 M_UDFFID */ \
	NULL,	/* 143 free */ \
	"AGP Memory",	/* 144 M_AGP */ \
	"DRM",	/* 145 M_DRM */ \
}

struct kmemstats {
	long	ks_inuse;	/* # of packets of this type currently in use */
	long	ks_calls;	/* total packets of this type ever allocated */
	long 	ks_memuse;	/* total memory held in bytes */
	u_short	ks_limblocks;	/* number of times blocked for hitting limit */
	u_short	ks_mapblocks;	/* number of times blocked for kernel map */
	long	ks_maxused;	/* maximum number ever used */
	long	ks_limit;	/* most that are allowed to exist */
	long	ks_size;	/* sizes of this thing that are allocated */
	long	ks_spare;
};

/*
 * Array of descriptors that describe the contents of each page
 */
struct kmemusage {
	short ku_indx;		/* bucket index */
	union {
		u_short freecnt;/* for small allocations, free pieces in page */
		u_short pagecnt;/* for large allocations, pages alloced */
	} ku_un;
};
#define	ku_freecnt ku_un.freecnt
#define	ku_pagecnt ku_un.pagecnt

struct kmem_freelist;

/*
 * Set of buckets for each size of memory block that is retained
 */
struct kmembuckets {
	XSIMPLEQ_HEAD(, kmem_freelist) kb_freelist; /* list of free blocks */
	u_int64_t kb_calls;	/* total calls to allocate this size */
	u_int64_t kb_total;	/* total number of blocks allocated */
	u_int64_t kb_totalfree;	/* # of free elements in this bucket */
	u_int64_t kb_elmpercl;	/* # of elements in this sized allocation */
	u_int64_t kb_highwat;	/* high water mark */
	u_int64_t kb_couldfree;	/* over high water mark and could free */
};

/*
 * Constants for setting the parameters of the kernel memory allocator.
 *
 * 2 ** MINBUCKET is the smallest unit of memory that will be
 * allocated. It must be at least large enough to hold a pointer.
 *
 * Units of memory less or equal to MAXALLOCSAVE will permanently
 * allocate physical memory; requests for these size pieces of
 * memory are quite fast. Allocations greater than MAXALLOCSAVE must
 * always allocate and free physical memory; requests for these
 * size allocations should be done infrequently as they will be slow.
 *
 * Constraints: PAGE_SIZE <= MAXALLOCSAVE <= 2 ** (MINBUCKET + 14), and
 * MAXALLOCSIZE must be a power of two.
 */
#define MINBUCKET	4		/* 4 => min allocation of 16 bytes */

#ifdef _KERNEL

#define	MINALLOCSIZE	(1 << MINBUCKET)
#define	MAXALLOCSAVE	(2 * PAGE_SIZE)

/*
 * Turn virtual addresses into kmem map indices
 */
#define	kmemxtob(alloc)	(kmembase + (alloc) * PAGE_SIZE)
#define	btokmemx(addr)	(((caddr_t)(addr) - kmembase) / PAGE_SIZE)
#define	btokup(addr)	(&kmemusage[((caddr_t)(addr) - kmembase) >> PAGE_SHIFT])

extern struct kmemstats kmemstats[];
extern struct kmemusage *kmemusage;
extern char *kmembase;
extern struct kmembuckets bucket[];

void	*malloc(size_t, int, int);
void	*mallocarray(size_t, size_t, int, int);
void	free(void *, int, size_t);
int	sysctl_malloc(int *, u_int, void *, size_t *, void *, size_t,
	    struct proc *);

size_t malloc_roundup(size_t);
void	malloc_printit(int (*)(const char *, ...));

void	poison_mem(void *, size_t);
int	poison_check(void *, size_t, size_t *, uint32_t *);
uint32_t poison_value(void *);

#ifdef MALLOC_DEBUG
int	debug_malloc(unsigned long, int, int, void **);
int	debug_free(void *, int);
void	debug_malloc_init(void);
void	debug_malloc_assert_allocated(void *, const char *);
#define DEBUG_MALLOC_ASSERT_ALLOCATED(addr) 			\
	debug_malloc_assert_allocated(addr, __func__)

void	debug_malloc_print(void);
void	debug_malloc_printit(int (*)(const char *, ...), vaddr_t);
#endif /* MALLOC_DEBUG */
#endif /* _KERNEL */
#endif /* !_SYS_MALLOC_H_ */
@


1.113
log
@Make the size for the syn cache hash array tunable.  As we are
swapping between two syn caches for random reseeding anyway, this
feature can be added easily.  When the cache is empty, there is an
opportunity to change the hash size.  This allows an admin under
SYN flood attack to defend his machine.
Suggested by claudio@@; OK jung@@ claudio@@ jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.112 2015/08/24 15:33:49 mpi Exp $	*/
d77 1
a77 1
/* 12 - free */
d199 1
a199 1
	NULL, \
@


1.112
log
@Rename M_RTABLE bucket into "rtable" to match the code and kill unused
M_BWMETER.

ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.111 2014/07/12 18:43:32 tedu Exp $	*/
d172 1
a172 1
	/*		139	   free */
d310 1
a310 1
	"NULL", \
@


1.111
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.110 2014/07/12 10:51:35 tedu Exp $	*/
d172 1
a172 2

#define M_BWMETER	139	/* Multicast upcall bw meters */
d192 1
a192 1
	"routetbl",	/* 5 M_RTABLE */ \
d310 1
a310 1
	"bwmeter",	/* 139 M_BWMETER */ \
@


1.110
log
@remove bluetooth types
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.109 2014/07/10 19:33:16 matthew Exp $	*/
d396 1
a396 1
void	free(void *, int);
@


1.109
log
@Add mallocarray(9)

While here, change malloc(9)'s size argument from "unsigned long" to
"size_t".

ok tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.108 2014/05/19 14:30:03 tedu Exp $	*/
d171 1
a171 1
#define	M_BLUETOOTH	138	/* Bluetooth */
d179 1
a179 1
#define	M_BTHIDEV	143	/* Bluetooth HID */
d310 1
a310 1
	"bluetooth",	/* 138 M_BLUETOOTH */ \
d315 1
a315 1
	"Bluetooth HID",	/* 143 M_BTHIDEV */ \
@


1.108
log
@consistent use of uint32_t for poison values
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.107 2013/06/03 15:56:01 tedu Exp $	*/
d394 5
a398 4
extern void *malloc(unsigned long size, int type, int flags);
extern void free(void *addr, int type);
extern int sysctl_malloc(int *, u_int, void *, size_t *, void *, size_t,
			      struct proc *);
@


1.107
log
@tabs after defines, not spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.106 2013/06/03 15:54:48 tedu Exp $	*/
d403 2
a404 2
int	poison_check(void *, size_t, size_t *, int *);
int32_t poison_value(void *);
@


1.106
log
@changes for isc fuse support. not enabled. ok beck deraadt.
from Sylvestre Gallon ccna.syl gmail.com
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.105 2013/05/03 18:26:07 tedu Exp $	*/
d123 1
a123 1
#define M_FUSEFS	65	/* fusefs mount structures */
@


1.105
log
@switch the malloc and pool freelists to using xor simpleq.
this adds a tiny bit more protection from list manipulation.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.104 2013/04/06 03:53:25 tedu Exp $	*/
d123 2
a124 1
/* 65-73 - free */
d253 1
a253 1
	NULL, \
@


1.104
log
@shuffle around some poison code, prototypes, values...
allow some more pool debug code to be enabled if not compiled in
bump poison size back up to 64
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.103 2013/03/26 16:36:01 tedu Exp $	*/
d350 1
a350 1
	SIMPLEQ_HEAD(, kmem_freelist) kb_freelist; /* list of free blocks */
@


1.103
log
@replace kern malloc's hand rolled freelist with simpleq macros.
ok deraadt mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.102 2013/03/23 16:12:30 deraadt Exp $	*/
d344 1
a344 14
/*
 * Normally the freelist structure is used only to hold the list pointer
 * for free objects.  However, when running with diagnostics, the first
 * 8 bytes of the structure is unused except for diagnostic information,
 * and the free list pointer is at offset 8 in the structure.  Since the
 * first 8 bytes is the portion of the structure most often modified, this
 * helps to detect memory reuse problems and avoid free list corruption.
 */
struct kmem_freelist {
	int32_t	kf_spare0;
	int16_t	kf_type;
	int16_t	kf_spare1;
	SIMPLEQ_ENTRY(kmem_freelist) kf_flist;
};
d400 4
@


1.102
log
@refactor sys/param.h and machine/param.h.  A lot of #ifdef _KERNEL is added
to keep definitions our of user space.  The MD files now follow a consistant
order -- all namespace intrusion is at the tail can be cleaned up
independently.  locore, bootblocks, and libkvm still see enough visibility to
build.  Checked on 90% of platforms...
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.101 2013/02/07 11:06:42 mikeb Exp $	*/
d38 2
d345 15
d363 1
a363 2
	caddr_t   kb_next;	/* list of free blocks */
	caddr_t   kb_last;	/* last free block */
@


1.101
log
@convert mbuf tags to use pool(9) as a backend storage;
ok markus claudio haesbaert henning
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.100 2012/04/06 15:10:40 jsing Exp $	*/
d356 17
d376 1
d381 2
a382 2
#define	kmemxtob(alloc)	(kmembase + (alloc) * NBPG)
#define	btokmemx(addr)	(((caddr_t)(addr) - kmembase) / NBPG)
@


1.100
log
@tedu the raidframe.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.98 2010/09/26 21:03:57 tedu Exp $	*/
d146 1
a146 2
#define M_PACKET_TAGS	111	/* Packet-attached information */
/* 112-113 - free */
d286 1
a286 1
	"packet tags",	/* 111 M_PACKET_TAGS */ \
@


1.99
log
@ntfs memory names were too long and make vmstat -m look ugly
@
text
@d133 1
a133 2
/* 93-96 - free */
#define	M_RAIDFRAME	97	/* RAIDframe data */
d273 1
a273 2
	NULL, NULL, NULL, NULL, \
	"RAIDframe data", /* 97 M_RAIDFRAME */ \
@


1.98
log
@unify some pool and malloc flag values.  the important bit is that all flags
have real values, no 0 values anymore.
ok deraadt kettenis krw matthew oga thib
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.97 2010/07/14 10:31:54 matthew Exp $	*/
d304 3
a306 3
	"NTFS hash tables",	/* 132 M_NTFSNTHASH */ \
	"NTFS file attr",	/* 133 M_NTFSNTVATTR */ \
	"NTFS resident data ",	/* 134 M_NTFSRDATA */ \
@


1.97
log
@Eliminate some unused malloc(9) type defines.  Also get rid of the
mysterious and unused mbtypes[] array in mbuf.h.

ok tedu@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.96 2009/08/25 17:59:45 miod Exp $	*/
d55 4
a58 4
#define	M_WAITOK	0x0000
#define	M_NOWAIT	0x0001
#define M_CANFAIL	0x0002
#define	M_ZERO		0x0004
@


1.96
log
@The BUCKETINDX() giant macro is used to compute the base 2 logarithm of its
input, in order to pick the appropriate malloc() bucket.

Replace it with an inline function in kern_malloc.c, which will either
do a tightest-but-slower loop (if option SMALL_KERNEL), or a geometric search
equivalent to what the macro does, but producing smaller code (especially on
platforms which can not load large constants in one instruction).
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.95 2008/12/29 14:20:19 oga Exp $	*/
d64 1
a64 1
#define	M_MBUF		1	/* mbuf */
d84 1
a84 1
#define	M_NFSNODE	24	/* NFS vnode private part */
d107 1
a107 1
#define	M_NFSUID	51	/* Nfs uid mapping structure */
d148 1
a148 2
#define M_1394CTL	112	/* IEEE 1394 control structures */
#define M_1394DATA	113	/* IEEE 1394 data buffers */
d155 1
a155 2
#define	M_IP6RR		125	/* IPv6 Router Renumbering Prefix */
#define	M_RR_ADDR	126	/* IPv6 Router Renumbering Ifid */
d188 1
a188 1
	"mbuf",		/* 1 M_MBUF */ \
d211 1
a211 1
	"NFS node",	/* 24 M_NFSNODE */ \
d238 1
a238 1
	"NFS uid",	/* 51 M_NFSUID */ \
d290 2
a291 2
	"1394ctl",	/* 112 M_1394CTL */ \
	"1394data",	/* 113 M_1394DATA */ \
d297 2
a298 2
	"ip6rr",	/* 125 M_IP6RR */ \
	"rp_addr",	/* 126 M_RR_ADDR */ \
@


1.95
log
@Shorten "Direct Rendering Manager" to "DRM" in the malloc memory type
string.  Prevents messing with vmstat output.

from brad a while back. "absolutely ok kettenis@@ on that one" kettenis@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.94 2008/10/18 12:11:30 kettenis Exp $	*/
d362 1
a363 32
#define	BUCKETINDX(size) \
	((size) <= (MINALLOCSIZE * 128) \
		? (size) <= (MINALLOCSIZE * 8) \
			? (size) <= (MINALLOCSIZE * 2) \
				? (size) <= (MINALLOCSIZE * 1) \
					? (MINBUCKET + 0) \
					: (MINBUCKET + 1) \
				: (size) <= (MINALLOCSIZE * 4) \
					? (MINBUCKET + 2) \
					: (MINBUCKET + 3) \
			: (size) <= (MINALLOCSIZE* 32) \
				? (size) <= (MINALLOCSIZE * 16) \
					? (MINBUCKET + 4) \
					: (MINBUCKET + 5) \
				: (size) <= (MINALLOCSIZE * 64) \
					? (MINBUCKET + 6) \
					: (MINBUCKET + 7) \
		: (size) <= (MINALLOCSIZE * 2048) \
			? (size) <= (MINALLOCSIZE * 512) \
				? (size) <= (MINALLOCSIZE * 256) \
					? (MINBUCKET + 8) \
					: (MINBUCKET + 9) \
				: (size) <= (MINALLOCSIZE * 1024) \
					? (MINBUCKET + 10) \
					: (MINBUCKET + 11) \
			: (size) <= (MINALLOCSIZE * 8192) \
				? (size) <= (MINALLOCSIZE * 4096) \
					? (MINBUCKET + 12) \
					: (MINBUCKET + 13) \
				: (size) <= (MINALLOCSIZE * 16384) \
					? (MINBUCKET + 14) \
					: (MINBUCKET + 15))
@


1.94
log
@Revert the change to use pools for <= PAGE_SIZE allocations.  It
changes the pressure on the uvm system, uncovering several bugs.  Some
of those bugs result in provable deadlocks.  We'll have to reconsider
integrating this diff again after fixing those bugs.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.92 2008/06/22 15:52:54 chl Exp $	*/
d319 1
a319 1
	"Direct Rendering Manager",	/* 145 M_DRM */ \
@


1.93
log
@Use pools to do allocations for all sizes <= PAGE_SIZE.
This will allow us to escape the limitations of kmem_map.
At this moment, the per-type limits are still enforced for all sizes,
but we might loosen that limit in the future after some thinking.

Original diff from Mickey in kernel/5761 , I massaged it a little to
obey the per-type limits.

miod@@ ok
@
text
@d351 2
a352 1
	caddr_t   kb_dummy[2];
@


1.92
log
@remove MALLOC and FREE macros, as they are no more used in the tree.

tested on non i386/amd64 archs by miod.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.91 2008/06/08 17:20:52 art Exp $	*/
d351 1
a351 2
	caddr_t   kb_next;	/* list of free blocks */
	caddr_t   kb_last;	/* last free block */
@


1.91
log
@Add a malloc type for ACPI and use it for _acpi_os_malloc and free.

kettenis@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.90 2007/11/28 23:37:34 oga Exp $	*/
a401 7

/*
 * Macro versions for the usual cases of malloc/free
 */
#define	MALLOC(space, cast, size, type, flags) \
	(space) = (cast)malloc((u_long)(size), type, flags)
#define	FREE(addr, type) free((caddr_t)(addr), type)
@


1.90
log
@Initial import of the DRM (direct rendering manager).

This is the kernel part necessary for DRI support in X. Disabled for now
because it still has a few bugs, but now I can work on it in tree. Also
requires the requisite bits in X, which are currently under discussion
on how to deal with them with privsep. ported from a combination of the
free and netbsd implementations.

Known bugs:
1) only the first occurence of X in any session will have dri, after
that something prevents it working.
2) if the machine does not have a dri capable card, the kernel panics.
Something's up in one of the probe functions. I haven't been able to
find it though.
3) radeon cards need to be forced to use PCI mode otherwise they get
into an infinite loop.

This is known to at least kinda work with SiS, radeons in pci mode and
intel cards.

ok deraadt, kinda ok art, a few other people had a quick look.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.89 2007/11/25 17:11:12 oga Exp $	*/
d93 1
a93 1
/* 33 - free */
d222 1
a222 1
	NULL, \
@


1.89
log
@Make agp attach as a device. This means that many more agp bridges
actually get detected and attached. Also adds a kernel api for
manipulating agp.

Enable this on i386 and amd64.

"I think you should commit it" deraadt@@, ok matthieu. Looked over by
several others.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.88 2007/09/18 08:13:49 art Exp $	*/
d184 3
a186 1
#define	M_LAST		145	/* Must be last type + 1 */
d319 1
@


1.88
log
@Since the MALLOC/FREE macros don't work with M_ZERO (on purpose) and
they most likely don't make things that much faster (we can't know, no
default kernel config uses them), just rip them out to avoid further
confusion.

ok miod@@, dlg@@, millert@@, "Hell yes" toby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.87 2007/09/07 10:22:15 art Exp $	*/
d182 3
a184 1
#define	M_LAST		144	/* Must be last type + 1 */
d316 1
@


1.87
log
@Add the long requested M_ZERO flag to malloc(9).

But the reason for this isn't some kind of "we can make it use the
pre-zeroed pages and zero the freelist in the idle loop and OMG I can
has optimisatiuns" which would require tons of infrastructure and make
everything slower.

The reason is that it shrinks other code. And that's good.

dlg@@ ok, henning@@ ok (before he read the diff)
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.86 2007/09/01 17:06:26 xsa Exp $	*/
a399 1
#if defined(KMEMSTATS) || defined(DIAGNOSTIC) || defined(_LKM) || defined(SMALL_KERNEL)
a402 33

#else /* do not collect statistics */
#define	MALLOC(space, cast, size, type, flags) do { \
	u_long kbp_size = (u_long)(size); \
	struct kmembuckets *kbp = &bucket[BUCKETINDX(kbp_size)]; \
	int __s = splvm(); \
	if (kbp->kb_next == NULL) { \
		(space) = (cast)malloc(kbp_size, type, flags); \
	} else { \
		(space) = (cast)kbp->kb_next; \
		kbp->kb_next = *(caddr_t *)(space); \
	} \
	splx(__s); \
} while (0)

#define	FREE(addr, type) do { \
	struct kmembuckets *kbp; \
	struct kmemusage *kup = btokup(addr); \
	int __s = splvm(); \
	if (1 << kup->ku_indx > MAXALLOCSAVE) { \
		free((caddr_t)(addr), type); \
	} else { \
		kbp = &bucket[kup->ku_indx]; \
		if (kbp->kb_next == NULL) \
			kbp->kb_next = (caddr_t)(addr); \
		else \
			*(caddr_t *)(kbp->kb_last) = (caddr_t)(addr); \
		*(caddr_t *)(addr) = NULL; \
		kbp->kb_last = (caddr_t)(addr); \
	} \
	splx(__s); \
} while(0)
#endif /* do not collect statistics */
@


1.86
log
@- Add bthidev(4), from NetBSD.
- Make btms(4) and btkbd(4) compile.
- Removed remaining proplib NetBSD'sim

Prodded a while ago by gwk@@. Eyeballed by miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.85 2007/06/17 20:06:10 jasper Exp $	*/
d58 1
@


1.85
log
@de-register

ok thib@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.84 2007/06/01 05:37:14 deraadt Exp $	*/
d179 3
a181 1
#define	M_LAST		143	/* Must be last type + 1 */
d312 1
@


1.84
log
@remove crufty adosfs.  everytime we try to change a vfs layer interface,
adosfs has the issue and in an entirely different way.  noone uses this
code so this is hte best way to handle the problem
diff from pedro who went to sleep but we need to move ahead; ok thib
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.83 2006/09/30 14:31:28 mickey Exp $	*/
d404 1
a404 1
	register struct kmembuckets *kbp = &bucket[BUCKETINDX(kbp_size)]; \
d416 2
a417 2
	register struct kmembuckets *kbp; \
	register struct kmemusage *kup = btokup(addr); \
@


1.83
log
@no malloc debug but configured kmemstats allow 'sh mal' to print smth useful; miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.82 2005/12/14 22:03:01 pedro Exp $	*/
d120 1
a120 7
/* 65 - free */
#define	M_ADOSFSMNT	66	/* adosfs mount structures */
/* 67 - free */
#define	M_ANODE		68	/* adosfs anode structures and tables. */
/* 69-70 - free */
#define	M_ADOSFSBITMAP	71	/* adosfs bitmap */
/* 72-73 - free */
a247 1
	"adosfs mount",	/* 66 M_ADOSFSMNT */ \
a248 1
	"adosfs anode",	/* 68 M_ANODE */ \
d251 3
a253 1
	"adosfs bitmap", /* 71 M_ADOSFSBITMAP */ \
@


1.82
log
@Make ext2fs use a memory pool to allocate inodes, okay tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.81 2005/11/15 07:02:37 miod Exp $	*/
d451 1
@


1.81
log
@More typos (especially indicies -> indices), checked with jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.80 2005/10/15 00:08:51 deraadt Exp $	*/
d126 1
a126 2
#define	M_EXT2FSNODE	72	/* EXT2FS vnode private part */
/* 73 - free */
d260 1
a260 1
	"EXT2FS node",	/* 72 M_EXT2FSNODE */ \
@


1.80
log
@spl values are int; evol@@online.ptt.ru
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.79 2005/07/03 20:14:00 drahn Exp $	*/
d394 1
a394 1
 * Turn virtual addresses into kmem map indicies
@


1.79
log
@Extended Attributes was a piece to get to ACLs, however ACLs have not
been worked on, so EA is pointless. Also the code is not enabled
in GENERIC so it is not being tested or maintained.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.78 2005/03/29 17:24:52 pedro Exp $	*/
d412 1
a412 1
	long __s = splvm(); \
d425 1
a425 1
	long __s = splvm(); \
@


1.78
log
@Bring in UDF support from FreeBSD, disabled for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.77 2005/03/04 22:41:04 reyk Exp $	*/
d149 1
a149 2
#define M_UFS_EXTATTR	106	/* Extended Attributes */
/* 107 - free */
@


1.77
log
@fix the MALLOC macro if built without malloc statistics. this won't
affect GENERIC.

ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.76 2005/01/14 21:15:08 mcbride Exp $	*/
a181 1
#define	M_LAST		140	/* Must be last type + 1 */
d183 5
d315 3
@


1.76
log
@Missed commit of M_BWMETER, allow a PIM kernel to actually compile.

pointed out by Scot Bontrager <scot@@indievisible.org>
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.75 2005/01/14 12:04:02 grange Exp $	*/
d404 2
a405 1
	register struct kmembuckets *kbp = &bucket[BUCKETINDX(size)]; \
d408 1
a408 1
		(space) = (cast)malloc((u_long)(size), type, flags); \
@


1.75
log
@First step in Bluetooth protocol stack support.

The code is adopted from the FreeBSD netgraph-based Bluetooth
implementation by Maksim Yevmenkin <m_evmenkin@@yahoo.com> but
all netgraph glue was replaced with usual BSD network stack
hooks. This is a work in progress. Only HCI layer works for now,
L2CAP and RFCOMM are on the way.

Help in testing from many, ok markus@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.74 2004/12/30 08:28:39 niklas Exp $	*/
d181 2
a182 1
#define	M_LAST		139	/* Must be last type + 1 */
d310 1
@


1.74
log
@Import M_CANFAIL support from NetBSD, removes a nasty panic during low-mem scenarios, instead generating an ENOMEM backfeed, ok tedu@@, prodded by many
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.73 2004/07/21 17:30:56 marius Exp $	*/
d179 3
a181 1
#define	M_LAST		138	/* Must be last type + 1 */
d308 1
@


1.73
log
@kqueue support for NFS, adapted from netbsd.

ok art@@ pedro@@, "get it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.72 2004/06/20 01:04:28 art Exp $	*/
d57 1
@


1.72
log
@Fix inversed logic in handling the "nowait/waitok" flags. Bugs in two places
in malloc_debug.

Also, add an assert-like function to sprinkle in code you're debugging at the
moment. Those asserts are _not_ supposed to be ever comitted, just use them
while debugging.

beck@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.71 2004/05/14 04:00:33 tedu Exp $	*/
d175 4
a178 1
#define	M_LAST		137	/* Must be last type + 1 */
d304 1
@


1.71
log
@use pool for namei pathbuf.  testing ok millert@@ tdeval@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.70 2004/01/14 19:34:05 grange Exp $	*/
d440 3
@


1.70
log
@Get rid of M_LOCKF and use pool for allocating lockf structures.
 From NetBSD.

Tested by many people, ok art@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.69 2003/12/28 17:16:55 tedu Exp $	*/
d73 1
a73 1
#define	M_NAMEI		12	/* namei path name buffer */
d191 1
a191 1
	"namei",	/* 12 M_NAMEI */ \
@


1.69
log
@new type for dirhash
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.68 2003/06/21 00:42:58 tedu Exp $	*/
d96 1
a96 1
#define	M_LOCKF		40	/* Byte-range locking structures */
d219 1
a219 1
	"lockf",	/* 40 M_LOCKF */ \
@


1.68
log
@add exec/fork/exit hooks per process for compat emulations.
use them to correctly emulate linux brk.
update to TNF copyright in linux_exec.c.

from netbsd, mostly from a diff by Kurt Miller in pr3318.
this should fix java.  no regressions in testing by kurt and sturm@@.
be prepared for "proc size mismatch" -- recompile ps and friends.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.67 2003/06/02 23:28:21 millert Exp $	*/
d90 2
a91 1
/* 32-33 - free */
d211 1
a211 1
	NULL, \
@


1.67
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.66 2003/05/20 03:05:42 tedu Exp $	*/
d155 2
a156 1
/* 114-122 - free */
d283 2
a284 1
	NULL, NULL, NULL, NULL, NULL, \
@


1.66
log
@support for NTFS.  from NetBSD via Julien Bordet
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.65 2003/01/30 16:38:39 art Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.65
log
@Stop using an LFS type for cluster mallocs, use an own type and
GC the LFS malloc types until LFS is resurrected.

from tedu@@stanford.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.64 2003/01/27 22:23:45 miod Exp $	*/
d167 11
a177 1
#define M_LAST		128	/* Must be last type + 1 */
d293 9
@


1.64
log
@M_VMPVENT bites the dust; requested by art@@ long ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.63 2002/12/20 06:00:53 art Exp $	*/
d102 2
a103 3
#define	M_SEGMENT	43	/* Segment for LFS */
#define	M_LFSNODE	44	/* LFS vnode private part */
/* 45 - free */
d214 2
a215 2
	"LFS segment",	/* 43 M_SEGMENT */ \
	"LFS node",	/* 44 M_LFSNODE */ \
@


1.63
log
@Add a special malloc type M_DEBUG.
If the kernel is compiled with MALLOC_DEBUG, M_DEBUG will force the allocation
to be done through malloc_debug.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.62 2002/12/17 23:11:31 millert Exp $	*/
d96 1
a96 2
#define	M_VMPVENT	35	/* VM phys-virt mapping entry */
/* 36-37 - free */
d207 1
a207 1
	"VM pvmap",	/* 35 M_VMPVENT */ \
@


1.62
log
@Make SysV-style shared memory and semaphore limits sysctl'able.
Instead of allocating a static amount of memory for the data
structures via valloc() in allocsys(), allocate things dynamically
using pool(9) when possible and malloc(9) when not.  The various
members of struct seminfo and struct shminfo are in kern.seminfo
and kern.shminfo respectively (not all members of kern.seminfo are
changable).

The data structures used still leave something to be desired but
things are not made worse in that respect by this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.61 2002/08/28 08:28:03 tdeval Exp $	*/
d68 1
a68 1
/* 3 - free */
d176 1
a176 1
	NULL, \
@


1.61
log
@RAIDframe spelling. ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.60 2002/06/28 16:00:23 art Exp $	*/
d93 2
a94 1
/* 31-33 - free */
d204 1
a204 1
	NULL, \
@


1.60
log
@Use slightly safer internal variable names in MALLOC and FREE.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.59 2002/06/25 17:11:49 itojun Exp $	*/
d143 1
a143 1
#define	M_RAIDFRAME	97	/* Raidframe data */
d260 1
a260 1
	"RaidFrame data", /* 97 M_RAIDFRAME */ \
@


1.59
log
@IEEE1394 infrastructure part.
IP-over-FW and SCSI over FW are being worked on.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.58 2002/06/21 12:14:21 itojun Exp $	*/
d378 1
a378 1
	long s = splvm(); \
d385 1
a385 1
	splx(s); \
d391 1
a391 1
	long s = splvm(); \
d403 1
a403 1
	splx(s); \
@


1.58
log
@tabify
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.57 2002/06/11 05:56:52 art Exp $	*/
d158 3
a160 1
/* 112-122 - free */
d275 2
d278 1
a278 2
	NULL, NULL, NULL, NULL, NULL, \
	NULL, \
@


1.57
log
@splvm, not splimp
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.56 2002/03/14 01:27:14 millert Exp $	*/
d154 1
a154 1
#define M_CRYPTO_DATA   108	/* Crypto framework data buffers (keys etc.) */
d156 2
a157 2
#define M_CREDENTIALS   110	/* IPsec-related credentials and ID info */
#define M_PACKET_TAGS   111	/* Packet-attached information */
d166 1
a166 1
#define M_LAST          128     /* Must be last type + 1 */
d244 1
a244 1
	"pfkey data",   /* 74 M_PFKEY */ \
@


1.56
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.55 2002/02/22 20:37:45 drahn Exp $	*/
d375 1
a375 1
	long s = splimp(); \
d388 1
a388 1
	long s = splimp(); \
@


1.55
log
@Extended Attribute support from FreeBSD/TrustedBSD ok art@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.54 2002/02/12 17:19:41 provos Exp $	*/
d409 4
a412 4
extern void *malloc __P((unsigned long size, int type, int flags));
extern void free __P((void *addr, int type));
extern int sysctl_malloc __P((int *, u_int, void *, size_t *, void *, size_t,
			      struct proc *));
@


1.54
log
@malloc_roundup to calculate allocation size malloc will use; from netbsd;
okay art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.53 2002/01/28 11:54:30 art Exp $	*/
d152 2
a153 1
/* 106-107 - free */
@


1.53
log
@Even more GC.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.52 2002/01/25 03:50:33 art Exp $	*/
d412 2
@


1.52
log
@GC some more malloc types.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.51 2002/01/23 15:46:48 art Exp $	*/
d93 1
a93 2
#define	M_VMPAGE	31	/* VM page structures */
/* 32-33 - free */
d127 1
a127 2
#define	M_IPQ		69	/* IP packet queue entry */
/* 70 - free */
d200 3
a202 3
	"VM page",	/* 31 M_VMPAGE */ \
	NULL,	/* 32 */ \
	NULL,	/* 33 */ \
d238 1
a238 1
	"IP queue ent", /* 69 M_IPQ */ \
@


1.51
log
@Allocate rusage, pgrp, ucred and session with pool.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.50 2002/01/23 10:24:00 art Exp $	*/
d140 1
a140 2
#define	M_BMSAFEMAP	81	/* Block or frag alloc'ed from cyl group map */
#define	M_ALLOCDIRECT	82	/* Block or frag dependency for an inode */
d142 1
a142 8
#define	M_ALLOCINDIR	84	/* Block dependency for an indirect block */
#define	M_FREEFRAG	85	/* Previously used frag for an inode */
#define	M_FREEBLKS	86	/* Blocks freed from an inode */
#define	M_FREEFILE	87	/* Inode deallocated */
#define	M_DIRADD	88	/* New directory entry */
#define	M_MKDIR		89	/* New directory */
#define	M_DIRREM	90	/* Directory entry deleted */
/* 91 - free */
d249 8
a256 14
 	"pagedep",	/* 78 M_PAGEDEP */ \
 	"inodedep",	/* 79 M_INODEDEP */ \
 	"newblk",	/* 80 M_NEWBLK */ \
 	"bmsafemap",	/* 81 M_BMSAFEMAP */ \
 	"allocdirect",	/* 82 M_ALLOCDIRECT */ \
 	"indirdep",	/* 83 M_INDIRDEP */ \
 	"allocindir",	/* 84 M_ALLOCINDIR */ \
 	"freefrag",	/* 85 M_FREEFRAG */ \
 	"freeblks",	/* 86 M_FREEBLKS */ \
 	"freefile",	/* 87 M_FREEFILE */ \
 	"diradd",	/* 88 M_DIRADD */ \
 	"mkdir",	/* 89 M_MKDIR */ \
 	"dirrem",	/* 90 M_DIRREM */ \
 	NULL, \
@


1.50
log
@GC some malloc types.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.49 2001/11/28 19:28:14 art Exp $	*/
d73 1
a73 1
#define	M_ZOMBIE	8	/* zombie proc status */
d80 1
a80 4
/* 15 - free */
#define	M_CRED		16	/* credentials */
#define	M_PGRP		17	/* process group header */
#define	M_SESSION	18	/* session header */
d187 1
a187 1
	"zombie",	/* 8 M_ZOMBIE */ \
d195 3
a197 3
	"cred",		/* 16 M_CRED */ \
	"pgrp",		/* 17 M_PGRP */ \
	"session",	/* 18 M_SESSION */ \
@


1.49
log
@Sync in more uvm from NetBSD. Mostly just cosmetic stuff.
Contains also support for page coloring.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.48 2001/08/18 18:15:52 art Exp $	*/
d68 1
a68 1
#define	M_SOCKET	3	/* socket structure */
d78 1
a78 1
#define	M_GPROF		13	/* kernel profiling buffer */
d80 1
a80 1

d86 1
a86 1

d108 1
a108 1
#define	M_FFSNODE	45	/* FFS vnode private part */
d110 1
a110 2
#define	M_NQLEASE	47	/* Nqnfs lease */
#define	M_NQMHOST	48	/* Nqnfs host address table */
d127 1
a127 1

d129 1
a129 1

d132 1
a132 1
#define	M_AFS		70	/* Andrew File System */
d135 1
a135 1
#define	M_PFIL		73	/* packer filter */
d139 1
a139 1
#define M_VFS           77      /* VFS file systems */
d153 1
a153 1
#define M_VMPBUCKET	91	/* VM page buckets */
d155 1
a155 1

d159 1
a159 1
#define M_POOL		100	/* Pool memory */
d163 1
a163 1
#define M_PIPE		104	/* Pipe structures */
d165 1
a165 2
/* 106 - free */
#define M_KNOTE		107	/* kernel event queue */  
d167 1
a167 1
#define M_IPSEC_POLICY  109	/* IPsec SPD structures */
d170 1
a170 1
#define M_CRYPTO_OPS    112	/* Crypto framework operation structures */
d185 1
a185 1
	"socket",	/* 3 M_SOCKET */ \
d195 1
a195 1
	"gprof",	/* 13 M_GPROF */ \
d203 1
a203 1
	"fhandle",	/* 21 M_FHANDLE */ \
d227 1
a227 1
	"FFS node",	/* 45 M_FFSNODE */ \
d229 2
a230 2
	"NQNFS Lease",	/* 47 M_NQLEASE */ \
	"NQNFS Host",	/* 48 M_NQMHOST */ \
d252 1
a252 1
	"afs",		/* 70 M_AFS */ \
d255 1
a255 1
	"pfil",		/* 73 M_PFIL */ \
d259 1
a259 1
	"vfs",          /* 77 M_VFS */ \
d273 1
a273 1
 	"VM page bucket", /* 91 M_VMPBUCKET */ \
d279 1
a279 1
	"pool",		/* 100 M_POOL */ \
d283 1
a283 1
	"pipe", 	/* 104 M_PIPE */ \
d286 1
a286 1
	"knote",	/* 107 M_KNOTE */ \
d288 1
a288 1
	"SPD info",	/* 109 M_IPSEC_POLICY */ \
d291 1
a291 2
	"crypto ops",	/* 112 M_CRYPTO_OPS */ \
	NULL, NULL, NULL, NULL, \
@


1.49.2.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.53 2002/01/28 11:54:30 art Exp $	*/
d68 1
a68 1
/* 3 - free */
d73 1
a73 1
/* 8 - free */
d78 1
a78 1
/* 13 - free */
d80 4
a83 1
/* 15-18 - free */
d86 1
a86 1
/* 21 - free */
d108 1
a108 1
/* 45 - free */
d110 2
a111 1
/* 47-48 - free */
d128 1
a128 1
/* 65 - free */
d130 1
a130 1
/* 67 - free */
d132 2
a133 1
/* 69-70 - free */
d136 1
a136 1
/* 73 - free */
d140 1
a140 1
/* 77 - free */
d144 2
a145 1
/* 81-82 - free */
d147 8
a154 1
/* 84-91 - free */
d156 1
a156 1
/* 93-96 - free */
d160 1
a160 1
/* 100 - free */
d164 1
a164 1
/* 104 - free */
d166 2
a167 1
/* 106-107 - free */
d169 1
a169 1
/* 109 - free */
d172 1
a172 1
/* 112-122 - free */
d187 1
a187 1
	NULL, \
d192 1
a192 1
	NULL, \
d197 1
a197 1
	NULL, \
d200 3
a202 3
	NULL, \
	NULL, \
	NULL, \
d205 1
a205 1
	NULL, \
d215 3
a217 3
	"VM page",	/* 31 M_VMMAP */ \
	NULL, \
	NULL, \
d229 1
a229 1
	NULL, \
d231 2
a232 2
	NULL, \
	NULL, \
d253 2
a254 2
	NULL, \
	NULL, \
d257 1
a257 1
	NULL, \
d261 15
a275 9
	NULL, \
	"pagedep",	/* 78 M_PAGEDEP */ \
	"inodedep",	/* 79 M_INODEDEP */ \
	"newblk",	/* 80 M_NEWBLK */ \
	NULL, \
	NULL, \
	"indirdep",	/* 83 M_INDIRDEP */ \
	NULL, NULL, NULL, NULL, \
	NULL, NULL, NULL, NULL, \
d281 1
a281 1
	NULL, \
d285 1
a285 1
	NULL, \
d288 1
a288 1
	NULL, \
d290 1
a290 1
	NULL, \
d293 2
a294 1
	NULL, NULL, NULL, NULL, NULL, \
@


1.49.2.2
log
@Merge in UBC performance changes from NetBSD.
Fix a bunch of merge errors from yesterday.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.49.2.1 2002/01/31 22:55:48 niklas Exp $	*/
a412 2

size_t malloc_roundup(size_t);
@


1.49.2.3
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.49.2.2 2002/02/02 03:28:26 art Exp $	*/
d153 1
a153 2
#define M_UFS_EXTATTR	106	/* Extended Attributes */
/* 107 - free */
d409 4
a412 6
extern void *malloc(unsigned long size, int type, int flags);
extern void free(void *addr, int type);
extern int sysctl_malloc(int *, u_int, void *, size_t *, void *, size_t,
			      struct proc *);

size_t malloc_roundup(size_t);
@


1.49.2.4
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.49.2.3 2002/06/11 03:32:33 art Exp $	*/
d144 1
a144 1
#define	M_RAIDFRAME	97	/* RAIDframe data */
d155 1
a155 1
#define M_CRYPTO_DATA	108	/* Crypto framework data buffers (keys etc.) */
d157 3
a159 5
#define M_CREDENTIALS	110	/* IPsec-related credentials and ID info */
#define M_PACKET_TAGS	111	/* Packet-attached information */
#define M_1394CTL	112	/* IEEE 1394 control structures */
#define M_1394DATA	113	/* IEEE 1394 data buffers */
/* 114-122 - free */
d167 1
a167 1
#define M_LAST		128	/* Must be last type + 1 */
d245 1
a245 1
	"pfkey data",	/* 74 M_PFKEY */ \
d259 1
a259 1
	"RAIDframe data", /* 97 M_RAIDFRAME */ \
a273 2
	"1394ctl",	/* 112 M_1394CTL */ \
	"1394data",	/* 113 M_1394DATA */ \
d275 2
a276 1
	NULL, NULL, NULL, NULL, \
d376 1
a376 1
	long __s = splvm(); \
d383 1
a383 1
	splx(__s); \
d389 1
a389 1
	long __s = splvm(); \
d401 1
a401 1
	splx(__s); \
@


1.49.2.5
log
@misc minor cleanups.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.49.2.4 2002/10/29 00:36:49 art Exp $	*/
d204 1
a204 1
	"VM page",	/* 31 M_VMPAGE */ \
d417 2
@


1.49.2.6
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d68 1
a68 1
#define M_DEBUG		3	/* debug chunk */
d94 1
a94 2
#define	M_SEM		32	/* SVID compatible semaphores */
/* 33 - free */
d96 2
a97 1
/* 35-37 - free */
d103 3
a105 2
#define	M_VCLUSTER	43	/* Cluster for VFS */
/* 45-46 - free */
d176 1
a176 1
	"debug", 	/* 3 M_DEBUG */ \
d205 1
a205 1
	"sem",		/* 32 M_SEM */ \
d208 1
a208 1
	NULL,	/* 35 */ \
d216 2
a217 2
	"VFS cluster",	/* 43 M_VCLUSTER */ \
	NULL, \
@


1.48
log
@M_DEBUG is no longer needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.47 2001/08/17 23:39:59 art Exp $	*/
d96 2
a97 1
/* 31-33 - free */
d215 1
a215 1
	NULL,	/* 31 */ \
@


1.47
log
@When this code was imported to NetBSD by Jason Thorpe he did a bunch of
useful changes (and a lot of cleanup). Bring in them.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.46 2001/08/11 02:06:24 art Exp $	*/
d165 1
a165 1
#define M_DEBUG		106	/* MALLOC_DEBUG structures */
d286 1
a286 1
	"malloc debug",	/* 106 M_DEBUG */ \
@


1.46
log
@GC some unused malloc types.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.45 2001/07/26 13:59:23 art Exp $	*/
d433 9
@


1.45
log
@Typos.
From Heikki Korpela <heko@@iki.fi>
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.44 2001/05/20 00:09:57 angelos Exp $	*/
d71 1
a71 1
#define	M_HTABLE	6	/* IMP host tables */
d96 1
a96 3
#define	M_VMMAPENT	31	/* VM map entry structures */
#define	M_VMOBJ		32	/* VM object structure */
#define	M_VMOBJHASH	33	/* VM object hash structure */
d99 1
a99 2
#define	M_VMPAGER	36	/* XXX: VM pager struct */
#define	M_VMPGDATA	37	/* XXX: VM pager private data */
d189 1
a189 1
	"hosttbl",	/* 6 M_HTABLE */ \
d214 3
a216 3
	"VM mapent",	/* 31 M_VMMAPENT */ \
	"VM object",	/* 32 M_VMOBJ */ \
	"VM objhash",	/* 33 M_VMOBJHASH */ \
d219 2
a220 2
	"VM pager",	/* 36 M_VMPAGER */ \
	"VM pgdata",	/* 37 M_VMPGDATA */ \
@


1.44
log
@Rename entry so it fits in the vmstat -m output.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.43 2001/05/16 08:59:03 art Exp $	*/
d160 2
a161 2
#define M_UVMAMAP	98	/* UVM amap and realted */
#define M_UVMAOBJ	99	/* UVM aobj and realted */
@


1.43
log
@Introduce a new kernel option "SMALL_KERNEL" that will be used to keep the
kernel size down.

Two changes. Uninline MALLOC and uninline a few mbuf macros. Saves 140k
on alpha RAMDISK (although only 11k after gzip).
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.42 2001/05/14 08:02:21 angelos Exp $	*/
d293 1
a293 1
	"IPsec credentials", /* 110 M_CREDENTIALS */ \
@


1.42
log
@Updated sysctl_malloc() prototype (struct proc argument added)
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.41 2001/05/14 06:56:55 angelos Exp $	*/
d390 1
a390 1
#if defined(KMEMSTATS) || defined(DIAGNOSTIC) || defined(_LKM)
@


1.41
log
@M_SYSCTL deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.40 2001/05/11 06:36:59 angelos Exp $	*/
d434 2
a435 1
extern int sysctl_malloc __P((int *, u_int, void *, size_t *, void *, size_t));
@


1.40
log
@sysctl entries for kmemstats, nselcoll, nchstats, and forkstat.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.39 2001/05/05 20:57:02 art Exp $	*/
d76 1
a76 1

d146 1
a146 1
#define	M_BMSAFEMAP	81	/* Block or frag allocated from cyl group map */
d197 1
a197 1
	NULL, \
@


1.39
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.38 2001/05/02 00:47:53 angelos Exp $	*/
d42 5
a46 3
#define KERN_MALLOC_BUCKETS   1
#define KERN_MALLOC_BUCKET    2
#define KERN_MALLOC_MAXID     3
d49 5
a53 3
           {0, 0 }, \
           { "buckets", CTLTYPE_STRING }, \
           { "bucket", CTLTYPE_NODE }, \
a142 1

a159 1

a162 1

a165 1

a166 1

a167 1

a168 1

a169 1

a180 1

@


1.38
log
@Remove some unused entries, add some new ones. ok art@@ itojun@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.37 2001/02/21 23:24:30 csapuntz Exp $	*/
d390 1
a390 1
#define	btokup(addr)	(&kmemusage[((caddr_t)(addr) - kmembase) >> CLSHIFT])
@


1.37
log
@

Latest soft updates from FreeBSD/Kirk McKusick

Snapshot-related code has been commented out.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.36 2001/02/21 08:03:52 csapuntz Exp $	*/
d72 1
a72 1
#define	M_SONAME	11	/* socket name */
d76 1
a76 1
#define	M_MAPMEM	15	/* mapped memory descriptors */
d82 1
a82 1
#define	M_FHANDLE	21	/* network file handle */
d126 1
a126 1
#define	M_MISCFSNODE	65	/* miscfs vnode private part */
d128 1
a128 1
#define	M_ADOSFSNODE	67	/* adosfs vnode private part */
a155 7
#define M_DISCQ		93	/* IPv6 discq */
#define M_FRAGQ		94	/* IPv6 fragq */
#define M_SECA		95	/* Sec Assoc */
#if 0 /* NRL IPv6 */
#define M_I6IFP		96	/* IPv6 if info */
#endif

a165 6
/* KAME IPv6 */
#define	M_IP6OPT	123	/* IPv6 options */
#define	M_IP6NDP	124	/* IPv6 Neighbour Discovery */
#define	M_IP6RR		125	/* IPv6 Router Renumbering Prefix */
#define	M_RR_ADDR	126	/* IPv6 Router Renumbering Ifid */

d174 12
d202 1
a202 1
	"soname",	/* 11 M_SONAME */ \
d206 1
a206 1
	"mapmem",	/* 15 M_MAPMEM */ \
d256 1
a256 1
	"miscfs node",	/* 65 M_MISCFSNODE */ \
d258 1
a258 1
	"adosfs node",	/* 67 M_ADOSFSNODE */ \
d284 1
a284 4
	"IPv6 discq",	/* 93 M_DISCQ */ \
	"IPv6 fragq",	/* 94 M_FRAGQ */ \
	"Sec Assoc",	/* 95 M_SECA */ \
	"IPv6 if info",	/* 96 M_I6IFP */ \
d296 5
a301 1
	NULL, NULL, NULL, NULL, NULL, \
@


1.36
log
@
Missed a place for M_ZERO
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.35 2001/02/20 23:35:36 csapuntz Exp $	*/
a56 1
#define M_ZERO          0x0008
a408 1
		if (flags & M_ZERO) bzero((space),(size)); \
@


1.35
log
@

Add M_ZERO option to malloc. Causes malloc to return a zero'ed buffer.

Used by the new soft updates code
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.34 2001/01/04 07:48:40 angelos Exp $	*/
d410 1
@


1.34
log
@Remove unneeded name definitions.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.33 2001/01/04 06:03:59 angelos Exp $	*/
d57 1
@


1.33
log
@kmembuckets sysctl
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.32 2001/01/03 19:19:52 angelos Exp $	*/
a45 8
#define KERN_MALLOC_CALLS		1
#define KERN_MALLOC_ALLOC		2
#define KERN_MALLOC_FREE		3
#define KERN_MALLOC_ELEMENTS		4
#define KERN_MALLOC_HIWAT		5
#define KERN_MALLOC_COULDFREE		6
#define KERN_MALLOC_BUCKET_MAXID	7

a49 10
}

#define CTL_KERN_MALLOC_BUCKET_NAMES { \
           { 0, 0 }, \
           { "calls", CTLTYPE_QUAD }, \
           { "total_allocated", CTLTYPE_QUAD }, \
           { "total_free", CTLTYPE_QUAD }, \
           { "elements", CTLTYPE_QUAD }, \
           { "high_watermark", CTLTYPE_QUAD }, \
           { "could_free", CTLTYPE_QUAD }, \
@


1.32
log
@Convert the kb_* counters to u_int64_t after all; easier to
sysctl-expose them (ok deraadt@@)
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.31 2001/01/02 17:22:46 angelos Exp $	*/
d43 10
a52 7
#define KERN_MALLOC_CALLS     2
#define KERN_MALLOC_ALLOC     3
#define KERN_MALLOC_FREE      4
#define KERN_MALLOC_ELEMENTS  5
#define KERN_MALLOC_HIWAT     6
#define KERN_MALLOC_COULDFREE 7
#define KERN_MALLOC_MAXID     8
d57 5
@


1.31
log
@Make kb_calls u_long (art@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.30 2000/11/16 20:02:20 provos Exp $	*/
d42 20
d350 8
a357 8
	caddr_t kb_next;	/* list of free blocks */
	caddr_t kb_last;	/* last free block */
	u_long	kb_calls;	/* total calls to allocate this size */
	long	kb_total;	/* total number of blocks allocated */
	long	kb_totalfree;	/* # of free elements in this bucket */
	long	kb_elmpercl;	/* # of elements in this sized allocation */
	long	kb_highwat;	/* high water mark */
	long	kb_couldfree;	/* over high water mark and could free */
d449 1
a449 1

@


1.30
log
@support kernel event queues, from FreeBSD by Jonathan Lemon,
okay art@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.29 2000/08/12 05:59:50 deraadt Exp $	*/
d332 1
a332 1
	long	kb_calls;	/* total calls to allocate this size */
@


1.29
log
@simple typo; maligned@@attcanada.net
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.28 2000/06/06 20:21:49 art Exp $	*/
a161 1
  
d175 2
d289 2
a290 1
	NULL, NULL, NULL, NULL, NULL, \
@


1.28
log
@memory type for MALLOC_DEBUG
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.27 1999/12/08 06:50:24 itojun Exp $	*/
d287 1
a287 1
	"malloc debug",	/* 105 M_DEBUG */ \
@


1.27
log
@bring in KAME IPv6 code, dated 19991208.
replaces NRL IPv6 layer.  reuses NRL pcb layer.  no IPsec-on-v6 support.
see sys/netinet6/{TODO,IMPLEMENTATION} for more details.

GENERIC configuration should work fine as before.  GENERIC.v6 works fine
as well, but you'll need KAME userland tools to play with IPv6 (will be
bringed into soon).
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.26 1999/11/20 11:11:27 matthieu Exp $	*/
d174 2
d287 1
a287 1
	NULL, \
@


1.27.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.37 2001/02/21 23:24:30 csapuntz Exp $	*/
a41 10
#define KERN_MALLOC_BUCKETS   1
#define KERN_MALLOC_BUCKET    2
#define KERN_MALLOC_MAXID     3

#define CTL_KERN_MALLOC_NAMES { \
           {0, 0 }, \
           { "buckets", CTLTYPE_STRING }, \
           { "bucket", CTLTYPE_NODE }, \
}

d162 1
a173 4
#define M_DEBUG		106	/* MALLOC_DEBUG structures */

#define M_KNOTE		107	/* kernel event queue */  

d285 2
a286 3
	"malloc debug",	/* 106 M_DEBUG */ \
	"knote",	/* 107 M_KNOTE */ \
	NULL, NULL, NULL, NULL, \
d326 8
a333 8
	caddr_t   kb_next;	/* list of free blocks */
	caddr_t   kb_last;	/* last free block */
	u_int64_t kb_calls;	/* total calls to allocate this size */
	u_int64_t kb_total;	/* total number of blocks allocated */
	u_int64_t kb_totalfree;	/* # of free elements in this bucket */
	u_int64_t kb_elmpercl;	/* # of elements in this sized allocation */
	u_int64_t kb_highwat;	/* high water mark */
	u_int64_t kb_couldfree;	/* over high water mark and could free */
d425 1
a425 1
extern int sysctl_malloc __P((int *, u_int, void *, size_t *, void *, size_t));
@


1.27.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.27.2.1 2001/05/14 22:45:02 niklas Exp $	*/
d42 3
a44 5
#define KERN_MALLOC_BUCKETS	1
#define KERN_MALLOC_BUCKET	2
#define KERN_MALLOC_KMEMNAMES	3
#define KERN_MALLOC_KMEMSTATS	4
#define KERN_MALLOC_MAXID	5
d47 3
a49 5
	{ 0, 0 }, \
	{ "buckets", CTLTYPE_STRING }, \
	{ "bucket", CTLTYPE_NODE }, \
	{ "kmemnames", CTLTYPE_STRING }, \
	{ "kmemstat", CTLTYPE_NODE }, \
d72 1
a72 1
#define	M_SYSCTL	11	/* sysctl buffers (persistent storage) */
d76 1
a76 1

d82 1
a82 1

d126 1
a126 1

d128 1
a128 1

d139 1
d143 1
a143 1
#define	M_BMSAFEMAP	81	/* Block or frag alloc'ed from cyl group map */
d156 7
d164 1
d168 1
a171 9
#define M_PIPE		104	/* Pipe structures */
#define M_MEMDESC	105	/* Memory range */
#define M_DEBUG		106	/* MALLOC_DEBUG structures */
#define M_KNOTE		107	/* kernel event queue */  
#define M_CRYPTO_DATA   108	/* Crypto framework data buffers (keys etc.) */
#define M_IPSEC_POLICY  109	/* IPsec SPD structures */
#define M_CREDENTIALS   110	/* IPsec-related credentials and ID info */
#define M_PACKET_TAGS   111	/* Packet-attached information */
#define M_CRYPTO_OPS    112	/* Crypto framework operation structures */
d178 9
d203 1
a203 1
	"sysctl",	/* 11 M_SYSCTL */ \
d207 1
a207 1
	NULL, \
d257 1
a257 1
	NULL, \
d259 1
a259 1
	NULL, \
d285 4
a288 1
	NULL, NULL, NULL, NULL, \
a299 5
	"crypto data",	/* 108 M_CRYPTO_DATA */ \
	"SPD info",	/* 109 M_IPSEC_POLICY */ \
	"IPsec creds",	/* 110 M_CREDENTIALS */ \
	"packet tags",	/* 111 M_PACKET_TAGS */ \
	"crypto ops",	/* 112 M_CRYPTO_OPS */ \
d302 1
d390 1
a390 1
#define	btokup(addr)	(&kmemusage[((caddr_t)(addr) - kmembase) >> PAGE_SHIFT])
d395 1
a395 1
#if defined(KMEMSTATS) || defined(DIAGNOSTIC) || defined(_LKM) || defined(SMALL_KERNEL)
d439 1
a439 2
extern int sysctl_malloc __P((int *, u_int, void *, size_t *, void *, size_t,
			      struct proc *));
@


1.27.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.27.2.2 2001/07/04 11:00:22 niklas Exp $	*/
d71 1
a71 1
/* 6 - free */
d96 3
a98 1
/* 31-33 - free */
d101 2
a102 1
/* 36-37 - free */
d160 2
a161 2
#define M_UVMAMAP	98	/* UVM amap and related */
#define M_UVMAOBJ	99	/* UVM aobj and related */
d168 1
a168 1
/* 106 - free */
d192 1
a192 1
	NULL,		/* 6 */ \
d217 3
a219 3
	NULL,	/* 31 */ \
	NULL,	/* 32 */ \
	NULL,	/* 33 */ \
d222 2
a223 2
	NULL,	/* 36 */ \
	NULL,	/* 37 */ \
d289 1
a289 1
	NULL,	/* 106 */ \
a435 9

#ifdef MALLOC_DEBUG
int	debug_malloc(unsigned long, int, int, void **);
int	debug_free(void *, int);
void	debug_malloc_init(void);

void	debug_malloc_print(void);
void	debug_malloc_printit(int (*)(const char *, ...), vaddr_t);
#endif /* MALLOC_DEBUG */
@


1.27.2.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d96 1
a96 2
#define	M_VMPAGE	31	/* VM page structures */
/* 32-33 - free */
d214 1
a214 1
	"VM page",	/* 31 M_VMPAGE */ \
@


1.27.2.5
log
@Merge in trunk
@
text
@d68 1
a68 1
/* 3 - free */
d73 1
a73 1
/* 8 - free */
d78 1
a78 1
/* 13 - free */
d80 4
a83 1
/* 15-18 - free */
d86 1
a86 1
/* 21 - free */
d96 2
a97 1
/* 31-33 - free */
d108 1
a108 1
/* 45 - free */
d110 2
a111 1
/* 47-48 - free */
d128 1
a128 1
/* 65 - free */
d130 1
a130 1
/* 67 - free */
d132 2
a133 1
/* 69-70 - free */
d136 1
a136 1
/* 73 - free */
d140 1
a140 1
/* 77 - free */
d144 2
a145 1
/* 81-82 - free */
d147 8
a154 1
/* 84-91 - free */
d156 1
a156 1
/* 93-96 - free */
d160 1
a160 1
/* 100 - free */
d164 1
a164 1
/* 104 - free */
d166 2
a167 2
#define M_UFS_EXTATTR	106	/* Extended Attributes */
/* 107 - free */
d169 1
a169 1
/* 109 - free */
d172 1
a172 1
/* 112-122 - free */
d187 1
a187 1
	NULL, \
d192 1
a192 1
	NULL, \
d197 1
a197 1
	NULL, \
d200 3
a202 3
	NULL, \
	NULL, \
	NULL, \
d205 1
a205 1
	NULL, \
d215 3
a217 3
	NULL, \
	NULL, \
	NULL, \
d229 1
a229 1
	NULL, \
d231 2
a232 2
	NULL, \
	NULL, \
d253 2
a254 2
	NULL, \
	NULL, \
d257 1
a257 1
	NULL, \
d261 15
a275 9
	NULL, \
	"pagedep",	/* 78 M_PAGEDEP */ \
	"inodedep",	/* 79 M_INODEDEP */ \
	"newblk",	/* 80 M_NEWBLK */ \
	NULL, \
	NULL, \
	"indirdep",	/* 83 M_INDIRDEP */ \
	NULL, NULL, NULL, NULL, \
	NULL, NULL, NULL, NULL, \
d281 1
a281 1
	NULL, \
d285 1
a285 1
	NULL, \
d288 1
a288 1
	NULL, \
d290 1
a290 1
	NULL, \
d293 2
a294 1
	NULL, NULL, NULL, NULL, NULL, \
a433 2

size_t malloc_roundup(size_t);
@


1.27.2.6
log
@Merge in -current from roughly a week ago
@
text
@d409 4
a412 4
extern void *malloc(unsigned long size, int type, int flags);
extern void free(void *addr, int type);
extern int sysctl_malloc(int *, u_int, void *, size_t *, void *, size_t,
			      struct proc *);
@


1.27.2.7
log
@Sync the SMP branch with 3.3
@
text
@d68 1
a68 1
#define M_DEBUG		3	/* debug chunk */
d93 1
a93 2
#define	M_SEM		31	/* SVID compatible semaphores */
/* 32-33 - free */
d95 2
a96 1
/* 35-37 - free */
d102 3
a104 2
#define	M_VCLUSTER	43	/* Cluster for VFS */
/* 45-46 - free */
d143 1
a143 1
#define	M_RAIDFRAME	97	/* RAIDframe data */
d154 1
a154 1
#define M_CRYPTO_DATA	108	/* Crypto framework data buffers (keys etc.) */
d156 3
a158 5
#define M_CREDENTIALS	110	/* IPsec-related credentials and ID info */
#define M_PACKET_TAGS	111	/* Packet-attached information */
#define M_1394CTL	112	/* IEEE 1394 control structures */
#define M_1394DATA	113	/* IEEE 1394 data buffers */
/* 114-122 - free */
d166 1
a166 1
#define M_LAST		128	/* Must be last type + 1 */
d173 1
a173 1
	"debug", 	/* 3 M_DEBUG */ \
d201 1
a201 1
	"sem",		/* 31 M_SEM */ \
d205 1
a205 1
	NULL,	/* 35 */ \
d213 2
a214 2
	"VFS cluster",	/* 43 M_VCLUSTER */ \
	NULL, \
d244 1
a244 1
	"pfkey data",	/* 74 M_PFKEY */ \
d258 1
a258 1
	"RAIDframe data", /* 97 M_RAIDFRAME */ \
a272 2
	"1394ctl",	/* 112 M_1394CTL */ \
	"1394data",	/* 113 M_1394DATA */ \
d274 2
a275 1
	NULL, NULL, NULL, NULL, \
d375 1
a375 1
	long __s = splvm(); \
d382 1
a382 1
	splx(__s); \
d388 1
a388 1
	long __s = splvm(); \
d400 1
a400 1
	splx(__s); \
@


1.27.2.8
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.27.2.7 2003/03/28 00:41:30 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
d167 1
a167 11

#define	M_NTFSMNT	128	/* NTFS mount structure */
#define	M_NTFSNTNODE	129	/* NTFS ntnode information */
#define	M_NTFSFNODE	130	/* NTFS fnode information */
#define	M_NTFSDIR	131	/* NTFS dir buffer */
#define	M_NTFSNTHASH	132	/* NTFS ntnode hash tables */
#define	M_NTFSNTVATTR	133	/* NTFS file attribute information */
#define	M_NTFSRDATA	134	/* NTFS resident data */
#define	M_NTFSDECOMP	135	/* NTFS decompression temporary */
#define	M_NTFSRUN	136	/* NTFS vrun storage */
#define	M_LAST		137	/* Must be last type + 1 */
a282 9
	"NTFS mount",	/* 128 M_NTFSMNT */ \
	"NTFS node",	/* 129 M_NTFSNTNODE */ \
	"NTFS fnode",	/* 130 M_NTFSFNODE */ \
	"NTFS dir",	/* 131 M_NTFSDIR */ \
	"NTFS hash tables",	/* 132 M_NTFSNTHASH */ \
	"NTFS file attr",	/* 133 M_NTFSNTVATTR */ \
	"NTFS resident data ",	/* 134 M_NTFSRDATA */ \
	"NTFS decomp",	/* 135 M_NTFSDECOMP */ \
	"NTFS vrun",	/* 136 M_NTFSRUN */ \
@


1.27.2.9
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d90 1
a90 2
#define	M_DIRHASH	32	/* UFS dirhash */
/* 33 - free */
d95 1
a95 1
/* 40 - free */
d155 1
a155 2
#define	M_EMULDATA	114	/* Per-process emulation data */
/* 115-122 - free */
d209 1
a209 1
	"dirhash",	/* 32 M_DIRHASH */ \
d217 1
a217 1
	NULL,	/* 40 */ \
d282 1
a282 2
	"emuldata",	/* 114 M_EMULDATA */ \
	NULL, NULL, NULL, NULL, \
@


1.27.2.10
log
@Merge with the trunk
@
text
@d73 1
a73 1
/* 12 - free */
d191 1
a191 1
	NULL, \
@


1.26
log
@add MTRR support from FreeBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.25 1999/10/29 14:08:13 art Exp $	*/
d149 1
d151 1
d162 7
d289 5
a293 1
	NULL, NULL, NULL, NULL, NULL, \
@


1.25
log
@Define a memory type for pipes.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.24 1999/08/09 03:47:56 fgsch Exp $	*/
d163 2
d275 2
a276 1
	NULL, NULL, \
@


1.24
log
@Reserve types for the USB framework.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.23 1999/06/01 23:43:41 ho Exp $	*/
d161 2
d272 2
a273 1
	NULL, NULL, NULL, \
@


1.23
log
@Introduce M_PFKEY kmem type, and use it. (angelos@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.22 1999/05/27 23:52:03 art Exp $	*/
d157 4
d267 4
a270 2
	NULL, \
	NULL, NULL, NULL, NULL, NULL, \
@


1.22
log
@remove the NO_KMEMSTATS hack from sys/malloc.h
add KMEMSTATS to GENERIC to keep old behavior
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.21 1999/02/26 01:57:58 art Exp $	*/
d125 1
d236 1
a236 1
	NULL, \
d260 3
a262 3
	"UVM amap",	/* 93 M_UVMAMAP */ \
	"UVM aobj",	/* 94 M_UVMAOBJ */ \
	"pool",		/* 95 M_POOL */ \
@


1.21
log
@malloc types for uvm and pool
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.20 1999/02/15 22:50:25 niklas Exp $	*/
a40 4

#ifndef NO_KMEMSTATS
#define KMEMSTATS
#endif
@


1.20
log
@Add a RaidFrame bucket type
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.19 1999/01/11 21:55:27 niklas Exp $	*/
d148 1
d153 1
d156 4
d263 4
a266 1
	NULL, NULL, NULL, NULL, \
@


1.19
log
@sth went in by mistake
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.18 1999/01/11 02:01:45 niklas Exp $	*/
d152 1
d256 2
a257 1
	NULL, NULL, NULL, NULL, NULL, \
@


1.18
log
@Lost IPv6 defines
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.17 1999/01/07 22:07:14 deraadt Exp $	*/
a254 1
	"",		/* 97 M_POOL */ \
d260 1
a260 1
	NULL, NULL, NULL, NULL, \
@


1.17
log
@NRL ipv6 malloc buckets
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.16 1998/11/17 21:05:40 art Exp $	*/
a145 1

d148 4
d255 1
a255 1
	NULL, \
@


1.16
log
@put back the NO_KMEMSTATS hack
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.15 1998/11/17 20:52:16 art Exp $	*/
d248 5
a252 1
	NULL, NULL, NULL, NULL, NULL, \
@


1.15
log
@don't default to KMEMSTATS (was defined unless NO_KMEMSTATS was defined)
add a M_VMSWAP memory type (for future use)
do { ... } while(0) protect the MALLOC and FREE macros.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.14 1998/03/01 00:37:56 niklas Exp $	*/
d41 4
@


1.14
log
@Merge of MACHINE_NEW_CONTIG (aka MNN) code from Chuck Cranor,
<chuck@@openbsd.org>. This code is as of yet disabled on all platforms,
actually not yet supported on more than mvme68k, although other
platforms are expected soon, as code is already available.
This code makes handling of multiple physical memory regions
consistent over all platforms, as well as keeping the performance of
maintaining a single continuous memory chunk.  It is also a
requirement for the upcoming UVM replacement VM system.

What I did in this merge: just declared the pmap_map function in a
MD include file per port that needs it.  It's not an exported pmap
interface, says Chuck.  It ended up in differnt include files on
differnet ports, as I tried to follow the current policy on a per-arch
basis.
@
text
@d1 2
a2 2
/*	$OpenBSD: malloc.h,v 1.13 1997/11/06 05:59:08 csapuntz Exp $	*/
/*	$NetBSD: malloc.h,v 1.23 1996/04/05 04:52:52 mhitch Exp $	*/
d36 1
a36 1
 *	@@(#)malloc.h	8.3 (Berkeley) 1/12/94
a41 4
#ifndef NO_KMEMSTATS
#define	KMEMSTATS
#endif

d144 1
d243 1
d250 1
a250 1
	NULL, NULL, NULL, NULL, NULL, \
d296 1
a296 1
	(size) <= (MINALLOCSIZE * 128) \
d326 1
a326 1
					: (MINBUCKET + 15)
d338 1
a338 1
#if defined(KMEMSTATS) || defined(DIAGNOSTIC)
d344 1
a344 1
#define	MALLOC(space, cast, size, type, flags) { \
d354 1
a354 1
}
d356 1
a356 1
#define	FREE(addr, type) { \
d372 1
a372 1
}
d379 1
d382 1
@


1.13
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.12 1997/10/06 20:21:07 deraadt Exp $	*/
d147 2
d245 1
a252 1
	NULL,                         \
@


1.12
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.10 1997/03/01 21:24:46 kstailey Exp $	*/
d131 19
a149 2
#define	M_TEMP		84	/* misc temporary data buffers */
#define	M_LAST		85	/* Must be last type + 1 */
d229 20
a248 1
	NULL, NULL, \
d250 2
a251 1
	"temp",		/* 84 M_TEMP */ \
@


1.11
log
@VFS Lite2 Changes
@
text
@d131 2
a132 19
#define M_VFS           77      /* VFS file systems */

#define	M_PAGEDEP	78	/* File page dependencies */
#define	M_INODEDEP	79	/* Inode dependencies */
#define	M_NEWBLK	80	/* New block allocation */
#define	M_BMSAFEMAP	81	/* Block or frag allocated from cyl group map */
#define	M_ALLOCDIRECT	82	/* Block or frag dependency for an inode */
#define	M_INDIRDEP	83	/* Indirect block dependencies */
#define	M_ALLOCINDIR	84	/* Block dependency for an indirect block */
#define	M_FREEFRAG	85	/* Previously used frag for an inode */
#define	M_FREEBLKS	86	/* Blocks freed from an inode */
#define	M_FREEFILE	87	/* Inode deallocated */
#define	M_DIRADD	88	/* New directory entry */
#define	M_MKDIR		89	/* New directory */
#define	M_DIRREM	90	/* Directory entry deleted */

#define	M_TEMP		127	/* misc temporary data buffers */
#define M_LAST          128     /* Must be last type + 1 */

d212 1
a212 20
	"vfs",          /* 77 M_VFS */ \
 	"pagedep",	/* 78 M_PAGEDEP */ \
 	"inodedep",	/* 79 M_INODEDEP */ \
 	"newblk",	/* 80 M_NEWBLK */ \
 	"bmsafemap",	/* 81 M_BMSAFEMAP */ \
 	"allocdirect",	/* 82 M_ALLOCDIRECT */ \
 	"indirdep",	/* 83 M_INDIRDEP */ \
 	"allocindir",	/* 84 M_ALLOCINDIR */ \
 	"freefrag",	/* 85 M_FREEFRAG */ \
 	"freeblks",	/* 86 M_FREEBLKS */ \
 	"freefile",	/* 87 M_FREEFILE */ \
 	"diradd",	/* 88 M_DIRADD */ \
 	"mkdir",	/* 89 M_MKDIR */ \
 	"dirrem",	/* 90 M_DIRREM */ \
	NULL, NULL, NULL, NULL, NULL, \
	NULL, NULL, NULL, NULL, NULL, \
	NULL, NULL, NULL, NULL, NULL, \
	NULL, NULL, NULL, NULL, NULL, \
	NULL, NULL, NULL, NULL, NULL, \
	NULL, NULL, NULL, NULL, NULL, \
d214 1
a214 2
	NULL,                         \
	"temp",		/* 127 M_TEMP */ \
@


1.10
log
@Allow building of kernels that do not keep malloc statistics via
"options NO_KMEMSTATS" in the config file.

Does not change default behavior.
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.9 1997/02/20 01:07:34 deraadt Exp $	*/
d131 19
a149 2
#define	M_TEMP		84	/* misc temporary data buffers */
#define	M_LAST		85	/* Must be last type + 1 */
d229 20
a248 1
	NULL, NULL, \
d250 2
a251 1
	"temp",		/* 84 M_TEMP */ \
@


1.9
log
@IPSEC package by John Ioannidis and Angelos D. Keromytis. Written in
Greece. From ftp.funet.fi:/pub/unix/security/net/ip/BSDipsec.tar.gz
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.8 1997/02/13 18:11:04 kstailey Exp $	*/
d42 1
d44 1
@


1.8
log
@added M_PFIL for packet filter
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.6 1996/04/21 22:31:49 deraadt Exp $	*/
d126 3
a128 1
#define M_PFIL		73	/* packer filter */
d207 4
a210 1
	NULL, NULL, NULL, NULL, NULL, \
@


1.7
log
@add M_EXT2FSNODE
@
text
@d126 1
d204 2
a205 1
	NULL, NULL, NULL, \
a206 1
	NULL, NULL, NULL, \
@


1.6
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.5 1996/04/18 21:40:59 niklas Exp $	*/
d125 1
d202 2
a203 1
	NULL, NULL, NULL, NULL, \
@


1.5
log
@Merge of NetBSD 960317
@
text
@d1 2
a2 2
/*	$OpenBSD: malloc.h,v 1.4 1996/03/31 13:16:43 mickey Exp $	*/
/*	$NetBSD: malloc.h,v 1.22 1996/02/22 12:47:33 jtk Exp $	*/
d124 1
d200 2
a201 1
	NULL, NULL, NULL, NULL, NULL, \
@


1.4
log
@From NetBSD: NFSv3 import (tomorrow's Net's kernel)
Open's patches kept in. i'll possibly take a look at Lite2 soon,
is there smth usefull ?..
@
text
@d1 1
a1 1
/*	$OpenBSD: malloc.h,v 1.3 1996/03/03 12:11:58 niklas Exp $	*/
@


1.3
log
@From NetBSD: 960217 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: malloc.h,v 1.21 1995/11/21 01:00:25 cgd Exp $	*/
d123 1
d198 1
d201 1
a201 1
	NULL, NULL, NULL, NULL, \
@


1.2
log
@from netbsd; add M_IPQ
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: malloc.h,v 1.20 1995/03/26 20:24:20 jtc Exp $	*/
d121 1
d195 1
d198 1
a198 1
	NULL, NULL, NULL, NULL, NULL, \
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

