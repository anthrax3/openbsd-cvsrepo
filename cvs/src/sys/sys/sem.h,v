head	1.24;
access;
symbols
	OPENBSD_6_2_BASE:1.24
	OPENBSD_6_1:1.24.0.4
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.23.0.8
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.4
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.6
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.23.0.2
	OPENBSD_5_7_BASE:1.23
	OPENBSD_5_6:1.22.0.4
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.21.0.16
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.12
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.10
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.8
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.6
	OPENBSD_5_0:1.21.0.4
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.2
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.20.0.6
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.4
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.19.0.14
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.12
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.10
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.8
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.6
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.4
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.2
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.18.0.6
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.4
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.18.0.2
	OPENBSD_3_6_BASE:1.18
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.4
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.13
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.11.0.4
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.6
	OPENBSD_2_8:1.8.0.4
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.2
	OPENBSD_2_7_BASE:1.8
	SMP:1.7.0.8
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.6
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2016.09.01.08.33.40;	author tom;	state Exp;
branches;
next	1.23;
commitid	q4VgfBwgkv63GWHG;

1.23
date	2014.11.23.04.31.42;	author guenther;	state Exp;
branches;
next	1.22;
commitid	xhzcNqQj4xO4dch4;

1.22
date	2014.07.10.14.16.49;	author deraadt;	state Exp;
branches;
next	1.21;
commitid	wdPDDnCznDbPTDLl;

1.21
date	2011.01.03.23.08.07;	author guenther;	state Exp;
branches;
next	1.20;

1.20
date	2009.04.03.04.22.49;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2005.12.13.00.35.23;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2004.07.15.11.24.46;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2004.07.14.23.45.11;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2004.07.14.23.40.27;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2004.05.03.17.38.47;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.17.20.40.56;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.12.17.23.11.31;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.09.28.01.42.54;	author millert;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	2001.08.12.23.58.34;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.12.22.50.12;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.05.01.23.12.30;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	98.07.20.07.37.22;	author deraadt;	state Exp;
branches
	1.7.8.1;
next	1.6;

1.6
date	98.06.11.19.21.29;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.06.11.18.32.22;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.06.10.08.46.18;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	98.05.11.06.20.35;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.03.12.12.17;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.28;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.28;	author deraadt;	state Exp;
branches;
next	;

1.7.8.1
date	2001.05.14.22.45.03;	author niklas;	state Exp;
branches;
next	1.7.8.2;

1.7.8.2
date	2001.10.31.03.30.30;	author nate;	state Exp;
branches;
next	1.7.8.3;

1.7.8.3
date	2002.03.28.14.52.02;	author niklas;	state Exp;
branches;
next	1.7.8.4;

1.7.8.4
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.7.8.5;

1.7.8.5
date	2004.02.19.11.01.34;	author niklas;	state Exp;
branches;
next	1.7.8.6;

1.7.8.6
date	2004.06.05.23.13.10;	author niklas;	state Exp;
branches;
next	;

1.11.4.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	1.11.4.2;

1.11.4.2
date	2003.05.19.22.32.20;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Fix comment in sys/sem.h

From Michal Mazurek <akfaew at jasminek dot net>

ok guenther@@
@
text
@/*	$OpenBSD: sem.h,v 1.23 2014/11/23 04:31:42 guenther Exp $	*/
/*	$NetBSD: sem.h,v 1.8 1996/02/09 18:25:29 christos Exp $	*/

/*
 * SVID compatible sem.h file
 *
 * Author:  Daniel Boulet
 */

#ifndef _SYS_SEM_H_
#define _SYS_SEM_H_

#ifndef _SYS_IPC_H_
#include <sys/ipc.h>
#endif

#if __BSD_VISIBLE

/* sem-specific sysctl variables corresponding to members of struct seminfo */
#define	KERN_SEMINFO_SEMMNI	1	/* int: # of semaphore identifiers */
#define	KERN_SEMINFO_SEMMNS	2	/* int: # of semaphores in system */
#define	KERN_SEMINFO_SEMMNU	3	/* int: # of undo structures in system */
#define	KERN_SEMINFO_SEMMSL	4	/* int: max semaphores per id */
#define	KERN_SEMINFO_SEMOPM	5	/* int: max operations per semop call */
#define	KERN_SEMINFO_SEMUME	6	/* int: max undo entries per process */
#define	KERN_SEMINFO_SEMUSZ	7	/* int: size in bytes of struct undo */
#define	KERN_SEMINFO_SEMVMX	8	/* int: semaphore maximum value */
#define	KERN_SEMINFO_SEMAEM	9	/* int: adjust on exit max value */
#define	KERN_SEMINFO_MAXID	10	/* number of valid semaphore sysctls */

#define	CTL_KERN_SEMINFO_NAMES { \
	{ 0, 0 }, \
	{ "semmni", CTLTYPE_INT }, \
	{ "semmns", CTLTYPE_INT }, \
	{ "semmnu", CTLTYPE_INT }, \
	{ "semmsl", CTLTYPE_INT }, \
	{ "semopm", CTLTYPE_INT }, \
	{ "semume", CTLTYPE_INT }, \
	{ "semusz", CTLTYPE_INT }, \
	{ "semvmx", CTLTYPE_INT }, \
	{ "semaem", CTLTYPE_INT }, \
}

#endif /* __BSD_VISIBLE */

struct sem {
	unsigned short	semval;		/* semaphore value */
	pid_t		sempid;		/* pid of last operation */
	unsigned short	semncnt;	/* # awaiting semval > cval */
	unsigned short	semzcnt;	/* # awaiting semval = 0 */
};

struct semid_ds {
	struct ipc_perm	sem_perm;	/* operation permission struct */
	struct sem	*sem_base;	/* pointer to first semaphore in set */
	unsigned short	sem_nsems;	/* number of sems in set */
	time_t		sem_otime;	/* last operation time */
	long		sem_pad1;	/* SVABI/386 says I need this here */
	time_t		sem_ctime;	/* last change time */
	    				/* Times measured in secs since */
	    				/* 00:00:00 GMT, Jan. 1, 1970 */
	long		sem_pad2;	/* SVABI/386 says I need this here */
	long		sem_pad3[4];	/* SVABI/386 says I need this here */
};

/*
 * semop's sops parameter structure
 */
struct sembuf {
	unsigned short	sem_num;	/* semaphore # */
	short		sem_op;		/* semaphore operation */
	short		sem_flg;	/* operation flags */
};
#define SEM_UNDO	010000

/*
 * semctl's arg parameter structure
 */
union semun {
	int		val;		/* value for SETVAL */
	struct semid_ds	*buf;		/* buffer for IPC_STAT & IPC_SET */
	unsigned short	*array;		/* array for GETALL & SETALL */
};

/*
 * commands for semctl
 */
#define GETNCNT	3	/* Return the value of semncnt {READ} */
#define GETPID	4	/* Return the value of sempid {READ} */
#define GETVAL	5	/* Return the value of semval {READ} */
#define GETALL	6	/* Return semvals into arg.array {READ} */
#define GETZCNT	7	/* Return the value of semzcnt {READ} */
#define SETVAL	8	/* Set the value of semval to arg.val {ALTER} */
#define SETALL	9	/* Set semvals from arg.array {ALTER} */


/*
 * Permissions
 */
#define SEM_A		0200	/* alter permission */
#define SEM_R		0400	/* read permission */


#ifdef _KERNEL
#include <sys/queue.h>

/*
 * Kernel implementation stuff
 */
#define SEMVMX	32767		/* semaphore maximum value */
#define SEMAEM	16384		/* adjust on exit max value */

/*
 * Undo structure (one per process)
 */
struct sem_undo {
	SLIST_ENTRY(sem_undo) un_next;	/* ptr to next active undo structure */
	struct	process *un_proc;	/* owner of this structure */
	short	un_cnt;			/* # of active entries */
	struct undo {
		short	un_adjval;	/* adjust on exit values */
		short	un_num;		/* semaphore # */
		int	un_id;		/* semid */
	} un_ent[1];			/* undo entries */
};

/*
 * semaphore info struct
 */
struct seminfo {
	int	semmni,		/* # of semaphore identifiers */
		semmns,		/* # of semaphores in system */
		semmnu,		/* # of undo structures in system */
		semmsl,		/* max # of semaphores per id */
		semopm,		/* max # of operations per semop call */
		semume,		/* max # of undo entries per process */
		semusz,		/* size in bytes of undo structure */
		semvmx,		/* semaphore maximum value */
		semaem;		/* adjust on exit max value */
};

struct sem_sysctl_info {
	struct	seminfo seminfo;
	struct	semid_ds semids[1];
};

extern struct seminfo	seminfo;

/*
 * Configuration parameters
 */
#ifndef SEMMNI
#define SEMMNI	10		/* # of semaphore identifiers */
#endif
#ifndef SEMMNS
#define SEMMNS	60		/* # of semaphores in system */
#endif
#ifndef SEMUME
#define SEMUME	10		/* max # of undo entries per process */
#endif
#ifndef SEMMNU
#define SEMMNU	30		/* # of undo structures in system */
#endif

/* shouldn't need tuning */
#ifndef SEMMSL
#define SEMMSL	SEMMNS		/* max # of semaphores per id */
#endif
#ifndef SEMOPM
#define SEMOPM	100		/* max # of operations per semop call */
#endif

/* actual size of an undo structure */
#define SEMUSZ	(sizeof(struct sem_undo)+sizeof(struct undo)*SEMUME)

extern struct	semid_ds **sema;	/* semaphore id list */

struct proc;

void	seminit(void);
void	semexit(struct process *);
int	sysctl_sysvsem(int *, u_int, void *, size_t *, void *, size_t);
int	semctl1(struct proc *, int, int, int, union semun *, register_t *,
	    int (*)(const void *, void *, size_t),
	    int (*)(const void *, void *, size_t));

#endif /* _KERNEL */

#ifndef _KERNEL
__BEGIN_DECLS
int	semctl(int, int, int, ...);
int	__semctl(int, int, int, union semun *);
int	semget(key_t, int, int);
int	semop(int, struct sembuf *, size_t);
__END_DECLS
#endif /* !_KERNEL */

#endif /* !_SYS_SEM_H_ */
@


1.23
log
@We now get <sys/cdefs.h> via <sys/ipc.h>
Only pull <sys/queue.h> into the kernel namespacem

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.22 2014/07/10 14:16:49 deraadt Exp $	*/
d198 1
a198 1
#endif /* !_SEM_H_ */
@


1.22
log
@struct proc; and struct ucred; only needed for ipcs in kernel-grovel mode
behind #define _KERNEL (it is what it is)
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.21 2011/01/03 23:08:07 guenther Exp $	*/
a12 1
#include <sys/cdefs.h>
a15 1
#include <sys/queue.h>
d105 2
@


1.21
log
@Remove the old COMPAT_23 SysV IPC structures and the never implemented
semconfig() declaration.  Move the COMPAT_35 SysV IPC structures into
the only source files that uses them

ok millert@@, kettenis@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.20 2009/04/03 04:22:49 guenther Exp $	*/
d178 9
a195 7
#else
void	seminit(void);
void	semexit(struct process *);
int	sysctl_sysvsem(int *, u_int, void *, size_t *, void *, size_t);
int	semctl1(struct proc *, int, int, int, union semun *, register_t *,
	    int (*)(const void *, void *, size_t),
	    int (*)(const void *, void *, size_t));
@


1.20
log
@Fix SEM_UNDO handling for rthreads: use the struct process* instead
of the struct proc* as the identifier for SEM_UNDO tracking and only
call semexit() from the original thread, once the process as a whole
is exiting

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.19 2005/12/13 00:35:23 millert Exp $	*/
a67 28
#ifdef _KERNEL
struct semid_ds23 {
	struct ipc_perm23 sem_perm;	/* operation permission struct */
	struct sem	*sem_base;	/* pointer to first semaphore in set */
	unsigned short	sem_nsems;	/* number of sems in set */
	time_t		sem_otime;	/* last operation time */
	long		sem_pad1;	/* SVABI/386 says I need this here */
	time_t		sem_ctime;	/* last change time */
	    				/* Times measured in secs since */
	    				/* 00:00:00 GMT, Jan. 1, 1970 */
	long		sem_pad2;	/* SVABI/386 says I need this here */
	long		sem_pad3[4];	/* SVABI/386 says I need this here */
};

struct semid_ds35 {
	struct ipc_perm35 sem_perm;	/* operation permission struct */
	struct sem	  *sem_base;	/* pointer to first semaphore in set */
	unsigned short	  sem_nsems;	/* number of sems in set */
	time_t		  sem_otime;	/* last operation time */
	long		  sem_pad1;	/* SVABI/386 says I need this here */
	time_t		  sem_ctime;	/* last change time */
	    				/* Times measured in secs since */
	    				/* 00:00:00 GMT, Jan. 1, 1970 */
	long		  sem_pad2;	/* SVABI/386 says I need this here */
	long		  sem_pad3[4];	/* SVABI/386 says I need this here */
};
#endif

a185 1
int	semconfig(int);
@


1.19
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.18 2004/07/15 11:24:46 millert Exp $	*/
d146 1
a146 1
	struct	proc *un_proc;		/* owner of this structure */
d218 1
a218 1
void	semexit(struct proc *);
@


1.18
log
@Rename structs oipc_perm, omsqid_ds, osemid_ds, oshmid_ds to ipc_perm23,
etc to avoid confusion and for consistency with the *35 ones.
Remove *n2o functions that don't belong outside of compat.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.17 2004/07/14 23:45:11 millert Exp $	*/
d13 1
d19 1
a19 1
#if !defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)
d46 1
a46 1
#endif /* !_POSIX_C_SOURCE && !_XOPEN_SOURCE */
a208 2
#include <sys/cdefs.h>

@


1.17
log
@Because mode_t is used in struct ipc_perm we need new versions of
the msgctl, semctl, and shmctl system calls.  This moves the old
versions to COMPAT_35 and adds new ones.

WARNING: While this fixes things like shared memory in the X server
for old (pre-mode_t change) binaries, it will break binaries that
use shared memory built between the time of the mode_t change (Jul
13th) and now.  If you rebuild X during that interval you will need
to do it again after updating the rest of userland.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.16 2004/07/14 23:40:27 millert Exp $	*/
d68 2
a69 2
struct osemid_ds {
	struct oipc_perm sem_perm;	/* operation permission struct */
a219 1
void	semid_n2o(struct semid_ds *, struct osemid_ds *);
@


1.16
log
@Move the guts of the {sem,msg,shm}ctl system calls into a new function
which also takes two function pointers for copyin/copyout.  For the
real syscalls these are just the normal copyin/copyout functions.
For the compat routines, these are funtions that convert between
the new and old foo_ds structs automagically.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.15 2004/05/03 17:38:47 millert Exp $	*/
d79 13
@


1.15
log
@POSIX says the length parameter for semop(2) and shmget(2) should be size_t.
Create new syscalls with the correct parameters and add compat versions
for the old ones under COMPAT_35.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.14 2003/12/17 20:40:56 millert Exp $	*/
d198 5
a202 5
int semctl(int, int, int, ...);
int __semctl(int, int, int, union semun *);
int semget(key_t, int, int);
int semop(int, struct sembuf *, size_t);
int semconfig(int);
d205 7
a211 4
void seminit(void);
void semexit(struct proc *);
void semid_n2o(struct semid_ds *, struct osemid_ds *);
int sysctl_sysvsem(int *, u_int, void *, size_t *, void *, size_t);
@


1.14
log
@Use SLIST macros instead of rolling our own.  Idea from and partly
based on changes from FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.13 2002/12/17 23:11:31 millert Exp $	*/
d201 1
a201 1
int semop(int, struct sembuf *, u_int);
@


1.13
log
@Make SysV-style shared memory and semaphore limits sysctl'able.
Instead of allocating a static amount of memory for the data
structures via valloc() in allocsys(), allocate things dynamically
using pool(9) when possible and malloc(9) when not.  The various
members of struct seminfo and struct shminfo are in kern.seminfo
and kern.shminfo respectively (not all members of kern.seminfo are
changable).

The data structures used still leave something to be desired but
things are not made worse in that respect by this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.12 2002/03/14 01:27:14 millert Exp $	*/
d16 1
d131 1
a131 1
	struct	sem_undo *un_next;	/* ptr to next active undo structure */
a189 3
/*
 * Structures allocated in machdep.c, defined/initialized in sysv_sem.c
 */
a190 1
extern struct	sem_undo *semu_list;	/* list of undo structures */
@


1.12
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.11 2001/09/28 01:42:54 millert Exp $	*/
d13 1
d15 30
a90 2
#define MAX_SOPS	5	/* maximum # of sembuf's per semop call */

a161 4
/* internal "mode" bits */
#define	SEM_ALLOC	01000	/* semaphore is allocated */
#define	SEM_DEST	02000	/* semaphore will be destroyed on last detach */

d192 2
a193 9
extern struct	semid_ds *sema;		/* semaphore id pool */
extern struct	sem *sem;		/* semaphore pool */
extern struct	sem_undo *semu_list;	/* list of active undo structures */
extern int	*semu;			/* undo structure pool */

/*
 * Macro to find a particular sem_undo vector
 */
#define SEMU(ix)	((struct sem_undo *)(((long)semu)+ix * SEMUSZ))
d211 1
@


1.11
log
@sysctl() support for getting the SYSV *info structs and the associated
SYSV structs.  To be used by ipcs(1).  Based on work by simonb@@netbsd.org
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.10 2001/08/12 23:58:34 millert Exp $	*/
d183 5
a187 5
int semctl __P((int, int, int, ...));
int __semctl __P((int, int, int, union semun *));
int semget __P((key_t, int, int));
int semop __P((int, struct sembuf *, u_int));
int semconfig __P((int));
d190 3
a192 3
void seminit __P((void));
void semexit __P((struct proc *));
void semid_n2o __P((struct semid_ds *, struct osemid_ds *));
@


1.11.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.11 2001/09/28 01:42:54 millert Exp $	*/
d183 5
a187 5
int semctl(int, int, int, ...);
int __semctl(int, int, int, union semun *);
int semget(key_t, int, int);
int semop(int, struct sembuf *, u_int);
int semconfig(int);
d190 3
a192 3
void seminit(void);
void semexit(struct proc *);
void semid_n2o(struct semid_ds *, struct osemid_ds *);
@


1.11.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a12 1
#ifndef _SYS_IPC_H_
a13 30
#endif

#if !defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)

/* sem-specific sysctl variables corresponding to members of struct seminfo */
#define	KERN_SEMINFO_SEMMNI	1	/* int: # of semaphore identifiers */
#define	KERN_SEMINFO_SEMMNS	2	/* int: # of semaphores in system */
#define	KERN_SEMINFO_SEMMNU	3	/* int: # of undo structures in system */
#define	KERN_SEMINFO_SEMMSL	4	/* int: max semaphores per id */
#define	KERN_SEMINFO_SEMOPM	5	/* int: max operations per semop call */
#define	KERN_SEMINFO_SEMUME	6	/* int: max undo entries per process */
#define	KERN_SEMINFO_SEMUSZ	7	/* int: size in bytes of struct undo */
#define	KERN_SEMINFO_SEMVMX	8	/* int: semaphore maximum value */
#define	KERN_SEMINFO_SEMAEM	9	/* int: adjust on exit max value */
#define	KERN_SEMINFO_MAXID	10	/* number of valid semaphore sysctls */

#define	CTL_KERN_SEMINFO_NAMES { \
	{ 0, 0 }, \
	{ "semmni", CTLTYPE_INT }, \
	{ "semmns", CTLTYPE_INT }, \
	{ "semmnu", CTLTYPE_INT }, \
	{ "semmsl", CTLTYPE_INT }, \
	{ "semopm", CTLTYPE_INT }, \
	{ "semume", CTLTYPE_INT }, \
	{ "semusz", CTLTYPE_INT }, \
	{ "semvmx", CTLTYPE_INT }, \
	{ "semaem", CTLTYPE_INT }, \
}

#endif /* !_POSIX_C_SOURCE && !_XOPEN_SOURCE */
d60 2
d133 4
d167 9
a175 2
extern struct	semid_ds **sema;	/* semaphore id list */
extern struct	sem_undo *semu_list;	/* list of undo structures */
a192 1
int sysctl_sysvsem(int *, u_int, void *, size_t *, void *, size_t);
@


1.10
log
@seminfo.semmap and SEMMAP are not used; kill them
Solaris doesn't have these either...
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.9 2001/08/12 22:50:12 millert Exp $	*/
d125 6
@


1.9
log
@Don't allocate globals in include files, use extern declarations.
Move the actual variables into their respective .c files.
As a bonus, remove semmap which is not used.
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.8 2000/05/01 23:12:30 deraadt Exp $	*/
d115 1
a115 2
	int	semmap,		/* # of entries in semaphore map */
		semmni,		/* # of semaphore identifiers */
a147 3
#ifndef SEMMAP
#define SEMMAP	30		/* # of entries in semaphore map */
#endif
@


1.8
log
@sys_semconfig goes foom
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.7 1998/07/20 07:37:22 deraadt Exp $	*/
d126 1
a126 1
struct seminfo	seminfo;
d163 1
a163 1
 * Structures allocated in machdep.c
d165 4
a168 5
struct	semid_ds *sema;		/* semaphore id pool */
struct	sem *sem;		/* semaphore pool */
struct	map *semmap;		/* semaphore allocation map */
struct	sem_undo *semu_list;	/* list of active undo structures */
int	*semu;			/* undo structure pool */
@


1.7
log
@SEM_R and SEM_A userland accessable as required; michaels@@inet.no
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.6 1998/06/11 19:21:29 deraadt Exp $	*/
a175 5
/*
 * Parameters to the semconfig system call
 */
#define	SEM_CONFIG_FREEZE	0	/* Freeze the semaphore facility. */
#define	SEM_CONFIG_THAW		1	/* Thaw the semaphore facility. */
@


1.7.8.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.8 2000/05/01 23:12:30 deraadt Exp $	*/
d176 5
@


1.7.8.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.7.8.1 2001/05/14 22:45:03 niklas Exp $	*/
d115 2
a116 1
	int	semmni,		/* # of semaphore identifiers */
d126 1
a126 7

struct sem_sysctl_info {
	struct	seminfo seminfo;
	struct	semid_ds semids[1];
};

extern struct seminfo	seminfo;
d149 3
d163 1
a163 1
 * Structures allocated in machdep.c, defined/initialized in sysv_sem.c
d165 5
a169 4
extern struct	semid_ds *sema;		/* semaphore id pool */
extern struct	sem *sem;		/* semaphore pool */
extern struct	sem_undo *semu_list;	/* list of active undo structures */
extern int	*semu;			/* undo structure pool */
@


1.7.8.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d183 5
a187 5
int semctl(int, int, int, ...);
int __semctl(int, int, int, union semun *);
int semget(key_t, int, int);
int semop(int, struct sembuf *, u_int);
int semconfig(int);
d190 3
a192 3
void seminit(void);
void semexit(struct proc *);
void semid_n2o(struct semid_ds *, struct osemid_ds *);
@


1.7.8.4
log
@Sync the SMP branch with 3.3
@
text
@a12 1
#ifndef _SYS_IPC_H_
a13 30
#endif

#if !defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)

/* sem-specific sysctl variables corresponding to members of struct seminfo */
#define	KERN_SEMINFO_SEMMNI	1	/* int: # of semaphore identifiers */
#define	KERN_SEMINFO_SEMMNS	2	/* int: # of semaphores in system */
#define	KERN_SEMINFO_SEMMNU	3	/* int: # of undo structures in system */
#define	KERN_SEMINFO_SEMMSL	4	/* int: max semaphores per id */
#define	KERN_SEMINFO_SEMOPM	5	/* int: max operations per semop call */
#define	KERN_SEMINFO_SEMUME	6	/* int: max undo entries per process */
#define	KERN_SEMINFO_SEMUSZ	7	/* int: size in bytes of struct undo */
#define	KERN_SEMINFO_SEMVMX	8	/* int: semaphore maximum value */
#define	KERN_SEMINFO_SEMAEM	9	/* int: adjust on exit max value */
#define	KERN_SEMINFO_MAXID	10	/* number of valid semaphore sysctls */

#define	CTL_KERN_SEMINFO_NAMES { \
	{ 0, 0 }, \
	{ "semmni", CTLTYPE_INT }, \
	{ "semmns", CTLTYPE_INT }, \
	{ "semmnu", CTLTYPE_INT }, \
	{ "semmsl", CTLTYPE_INT }, \
	{ "semopm", CTLTYPE_INT }, \
	{ "semume", CTLTYPE_INT }, \
	{ "semusz", CTLTYPE_INT }, \
	{ "semvmx", CTLTYPE_INT }, \
	{ "semaem", CTLTYPE_INT }, \
}

#endif /* !_POSIX_C_SOURCE && !_XOPEN_SOURCE */
d60 2
d133 4
d167 9
a175 2
extern struct	semid_ds **sema;	/* semaphore id list */
extern struct	sem_undo *semu_list;	/* list of undo structures */
a192 1
int sysctl_sysvsem(int *, u_int, void *, size_t *, void *, size_t);
@


1.7.8.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a15 1
#include <sys/queue.h>
d130 1
a130 1
	SLIST_ENTRY(sem_undo) un_next;	/* ptr to next active undo structure */
d189 3
d193 1
@


1.7.8.6
log
@Merge with the trunk
@
text
@d201 1
a201 1
int semop(int, struct sembuf *, size_t);
@


1.6
log
@do not export old structures to userland
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.5 1998/06/11 18:32:22 deraadt Exp $	*/
d82 8
a95 6

/*
 * Permissions
 */
#define SEM_A		0200	/* alter permission */
#define SEM_R		0400	/* read permission */
@


1.5
log
@change ipc.h to use uid_t and friends, and then build compat system calls for the old ushort based ipc.h
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.4 1998/06/10 08:46:18 deraadt Exp $	*/
d35 1
d48 1
@


1.4
log
@XPG says 4th arg is optional
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.3 1998/05/11 06:20:35 deraadt Exp $	*/
d35 13
d192 1
@


1.3
log
@u_short -> unsigned short; kleink
@
text
@d1 1
a1 1
/*	$OpenBSD: sem.h,v 1.2 1996/03/03 12:12:17 niklas Exp $	*/
d170 1
a170 1
int semctl __P((int, int, int, union semun));
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d16 4
a19 4
	u_short	semval;		/* semaphore value */
	pid_t	sempid;		/* pid of last operation */
	u_short	semncnt;	/* # awaiting semval > cval */
	u_short	semzcnt;	/* # awaiting semval = 0 */
d23 10
a32 10
	struct	ipc_perm sem_perm;	/* operation permission struct */
	struct	sem *sem_base;	/* pointer to first semaphore in set */
	u_short	sem_nsems;	/* number of sems in set */
	time_t	sem_otime;	/* last operation time */
	long	sem_pad1;	/* SVABI/386 says I need this here */
	time_t	sem_ctime;	/* last change time */
    				/* Times measured in secs since */
    				/* 00:00:00 GMT, Jan. 1, 1970 */
	long	sem_pad2;	/* SVABI/386 says I need this here */
	long	sem_pad3[4];	/* SVABI/386 says I need this here */
d39 3
a41 3
	u_short	sem_num;	/* semaphore # */
	short	sem_op;		/* semaphore operation */
	short	sem_flg;	/* operation flags */
d51 3
a53 3
	int	val;		/* value for SETVAL */
	struct	semid_ds *buf;	/* buffer for IPC_STAT & IPC_SET */
	u_short	*array;		/* array for GETALL & SETALL */
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: sem.h,v 1.7 1995/03/26 20:24:40 jtc Exp $	*/
d176 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
