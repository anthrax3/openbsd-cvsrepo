head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.14
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.16
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.12
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.8
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.10
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.6
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.12.0.18
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.16
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.14
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.12
	OPENBSD_5_0:1.12.0.10
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.8
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.6
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.4
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.9.0.4
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.2
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.8.0.10
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.8
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.6
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.4
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.16
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.14
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.12
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.10
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.8
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.4
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	SMP:1.3.0.12
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.14
date	2014.02.08.20.29.01;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2014.01.21.21.45.58;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2009.04.19.15.26.52;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2009.04.19.11.04.11;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.10.20.57.04;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2008.06.26.05.42.20;	author ray;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.23.19.58.48;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.05.10.00.47;	author art;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2001.01.15.22.18.23;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.15.16.30.28;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.07.12.22.50.05;	author weingart;	state Exp;
branches
	1.3.12.1;
next	1.2;

1.2
date	96.12.09.09.27.02;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.08.07.17.27.53;	author deraadt;	state Exp;
branches;
next	;

1.3.12.1
date	2000.02.20.11.57.32;	author niklas;	state Exp;
branches;
next	1.3.12.2;

1.3.12.2
date	2001.05.14.22.45.02;	author niklas;	state Exp;
branches;
next	1.3.12.3;

1.3.12.3
date	2001.10.31.03.30.30;	author nate;	state Exp;
branches;
next	1.3.12.4;

1.3.12.4
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	;

1.6.4.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Add extent_alloc_with_descr(9) as a wrapper around
extent_alloc_subregion_with_descr(9) mirroring extent_alloc(9).

ok jmc@@
@
text
@/*	$OpenBSD: extent.h,v 1.13 2014/01/21 21:45:58 kettenis Exp $	*/
/*	$NetBSD: extent.h,v 1.6 1997/10/09 07:43:05 jtc Exp $	*/

/*-
 * Copyright (c) 1996 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _SYS_EXTENT_H_
#define _SYS_EXTENT_H_

#include <sys/queue.h>

struct extent_region {
	LIST_ENTRY(extent_region) er_link;	/* link in region list */
	u_long 	er_start;		/* start of region */
	u_long	er_end;			/* end of region */
	int	er_flags;		/* misc. flags */
};

/* er_flags */
#define ER_ALLOC	0x01	/* region descriptor dynamically allocated */
#define ER_DISCARD	0x02	/* discard region descriptor after use */

struct extent {
	char	*ex_name;		/* name of extent */
					/* allocated regions in extent */
	LIST_HEAD(, extent_region) ex_regions;
	u_long	ex_start;		/* start of extent */
	u_long	ex_end;			/* end of extent */
	int	ex_mtype;		/* memory type */
	int	ex_flags;		/* misc. information */

	LIST_ENTRY(extent) ex_link;
};

struct extent_fixed {
	struct extent	fex_extent;	/* MUST BE FIRST */
					/* freelist of region descriptors */
	LIST_HEAD(, extent_region) fex_freelist;
	caddr_t		fex_storage;	/* storage space for descriptors */
	size_t		fex_storagesize; /* size of storage space */
};

/* ex_flags; for internal use only */
#define EXF_FIXED	0x01		/* extent uses fixed storage */
#define EXF_NOCOALESCE	0x02		/* coalescing of regions not allowed */
#define EXF_WANTED	0x04		/* someone asleep on extent */
#define EXF_FLWANTED	0x08		/* someone asleep on freelist */

#define EXF_BITS	"\20\4FLWANTED\3WANTED\2NOCOALESCE\1FIXED"

/* misc. flags passed to extent functions */
#define EX_NOWAIT	0x0000		/* not safe to sleep */
#define EX_WAITOK	0x0001		/* safe to sleep */
#define EX_FAST		0x0002		/* take first fit in extent_alloc() */
#define EX_CATCH	0x0004		/* catch signals while sleeping */
#define EX_NOCOALESCE	0x0008		/* create a non-coalescing extent */
#define EX_MALLOCOK	0x0010		/* safe to call malloc() */
#define EX_WAITSPACE	0x0020		/* wait for space to become free */
#define EX_BOUNDZERO	0x0040		/* boundary lines start at 0 */
#define EX_CONFLICTOK	0x0080		/* allow conflicts */
#define EX_FILLED	0x0100		/* create a filled extent */

/*
 * Special place holders for "alignment" and "boundary" arguments,
 * in the event the caller doesn't wish to use those features.
 */
#define EX_NOALIGN	1		/* don't do alignment */
#define EX_NOBOUNDARY	0		/* don't do boundary checking */

#if defined(_KERNEL) || defined(_EXTENT_TESTING)
#define EXTENT_FIXED_STORAGE_SIZE(_nregions)		\
	(ALIGN(sizeof(struct extent_fixed)) +		\
	((ALIGN(sizeof(struct extent_region))) *	\
	 (_nregions)))

void extent_print_all(void);

struct	extent *extent_create(char *, u_long, u_long, int,
	    caddr_t, size_t, int);
void	extent_destroy(struct extent *);
int	extent_alloc_subregion(struct extent *, u_long, u_long,
	    u_long, u_long, u_long, u_long, int, u_long *);
int	extent_alloc_subregion_with_descr(struct extent *, u_long, u_long,
	    u_long, u_long, u_long, u_long, int, struct extent_region *,
	    u_long *);
int	extent_alloc_region(struct extent *, u_long, u_long, int);
int	extent_free(struct extent *, u_long, u_long, int);
void	extent_print(struct extent *);

/* Simple case of extent_alloc_subregion() */
#define extent_alloc(_ex, _size, _alignment, _skew, _boundary, \
		_flags, _result) \
	extent_alloc_subregion((_ex), (_ex)->ex_start, (_ex)->ex_end,  \
	(_size), (_alignment), (_skew), (_boundary), (_flags), (_result))

/* Simple case of extent_alloc_subregion_with_descr() */
#define extent_alloc_with_descr(_ex, _size, _alignment, _skew, _boundary, \
		_flags, _region, _result) \
	extent_alloc_subregion_with_descr((_ex), (_ex)->ex_start, \
	(_ex)->ex_end, (_size), (_alignment), (_skew), (_boundary), \
	(_flags), (_region), (_result))
#endif /* _KERNEL || _EXTENT_TESTING */

#endif /* ! _SYS_EXTENT_H_ */
@


1.13
log
@Add extent_alloc_subregion_with_descr(9) which allows the caller to provide
a region descriptor such that the extent manager doesn't need to call
malloc(9).

ok miod@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.12 2009/04/19 15:26:52 kettenis Exp $	*/
d121 7
@


1.12
log
@Add a new EX_FILLED flag to make extent_create() create an extent map that
has all space allocated such that we can make holes in it using extent_free().

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.11 2009/04/19 11:04:11 kettenis Exp $	*/
d47 1
d109 3
@


1.11
log
@Fix typo pointed out by a couple of people.
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.10 2009/04/10 20:57:04 kettenis Exp $	*/
d77 10
a86 9
#define EX_NOWAIT	0x00		/* not safe to sleep */
#define EX_WAITOK	0x01		/* safe to sleep */
#define EX_FAST		0x02		/* take first fit in extent_alloc() */
#define EX_CATCH	0x04		/* catch signals while sleeping */
#define EX_NOCOALESCE	0x08		/* create a non-coalescing extent */
#define EX_MALLOCOK	0x10		/* safe to call malloc() */
#define EX_WAITSPACE	0x20		/* wait for space to become free */
#define EX_BOUNDZERO	0x40		/* boundary lines start at 0 */
#define EX_CONFLICTOK	0x80		/* allow conflicts */
@


1.10
log
@Add EX_CONFLICTOK flag that allows an allocation to conflict with existing
allocations, making sure that the union of all space is allocated.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.9 2008/06/26 05:42:20 ray Exp $	*/
d85 1
a85 1
#define EX_CONFLICTOK	0x80		/* allow conlficts */
@


1.9
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.8 2006/02/23 19:58:48 miod Exp $	*/
d85 1
@


1.8
log
@Remove unused extent_find(). Then, we can keep the extent list only if
option DIAGNOSTIC || option DDB, saves some room on installation media.
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.7 2002/03/14 01:27:14 millert Exp $	*/
a18 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.6 2001/07/05 10:00:47 art Exp $	*/
a105 1
struct extent *extent_find(char *);
@


1.6
log
@Get rid of the wrapper macros around extent_alloc*1
Pass the right amount of arguments and rename them back to their right names.
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.5 2001/01/15 22:18:23 jason Exp $	*/
d106 2
a107 2
struct extent *extent_find __P((char *));
void extent_print_all __P((void));
d109 8
a116 8
struct	extent *extent_create __P((char *, u_long, u_long, int,
	    caddr_t, size_t, int));
void	extent_destroy __P((struct extent *));
int	extent_alloc_subregion __P((struct extent *, u_long, u_long,
	    u_long, u_long, u_long, u_long, int, u_long *));
int	extent_alloc_region __P((struct extent *, u_long, u_long, int));
int	extent_free __P((struct extent *, u_long, u_long, int));
void	extent_print __P((struct extent *));
@


1.6.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.6 2001/07/05 10:00:47 art Exp $	*/
d106 2
a107 2
struct extent *extent_find(char *);
void extent_print_all(void);
d109 8
a116 8
struct	extent *extent_create(char *, u_long, u_long, int,
	    caddr_t, size_t, int);
void	extent_destroy(struct extent *);
int	extent_alloc_subregion(struct extent *, u_long, u_long,
	    u_long, u_long, u_long, u_long, int, u_long *);
int	extent_alloc_region(struct extent *, u_long, u_long, int);
int	extent_free(struct extent *, u_long, u_long, int);
void	extent_print(struct extent *);
@


1.5
log
@update from netbsd:
several fixes with regards to boundary cases and other fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.4 2000/02/15 16:30:28 art Exp $	*/
d112 1
a112 1
int	extent_alloc_subregion1 __P((struct extent *, u_long, u_long,
d119 3
a121 6
#define extent_alloc(_ex, _size, _alignment, _boundary, _flags, _result) \
	extent_alloc_subregion1((_ex), (_ex)->ex_start, (_ex)->ex_end,  \
	(_size), (_alignment), 0, (_boundary), (_flags), (_result))
#define extent_alloc1(_ex, _size, _alignment, _skew, _boundary, \
                        _flags, _result) \
	extent_alloc_subregion1((_ex), (_ex)->ex_start, (_ex)->ex_end,  \
a122 5
/* Compat version of extent_alloc_subregion() */
#define extent_alloc_subregion(_ex, _start, _end, _size, _alignment, \
                                _boundary, _flags, _result) \
	extent_alloc_subregion1((_ex), (_start), (_end),        \
	(_size), (_alignment), 0, (_boundary), (_flags), (_result))
@


1.4
log
@Add another argument to extent_alloc_subregion to allow specifing an offset
to the alignment. rename the function to extent_alloc_subregion1 and add
compatibility macros.
From NetBSD.
@
text
@d1 2
a2 2
/*	$OpenBSD: extent.h,v 1.3 1997/07/12 22:50:05 weingart Exp $	*/
/*	$NetBSD: extent.h,v 1.5 1996/11/21 18:42:17 cgd Exp $	*/
d30 2
a31 2
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
@


1.3
log
@Add some more extent stuff, in preperation of PnP.  Huh?  Did I
say PnP?  Anyways, this stuff just adds the ability to register
the extents on creation, etc, etc...

Someone needs to add a DDB command "show extent", to make this
really usefull... ;-)
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.2 1996/12/09 09:27:02 niklas Exp $	*/
d112 2
a113 2
int	extent_alloc_subregion __P((struct extent *, u_long, u_long,
	    u_long, u_long, u_long, int, u_long *));
d120 11
a130 2
	extent_alloc_subregion((_ex), (_ex)->ex_start, (_ex)->ex_end,	\
	(_size), (_alignment), (_boundary), (_flags), (_result))
@


1.3.12.1
log
@Merge in recent code from the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.4 2000/02/15 16:30:28 art Exp $	*/
d112 2
a113 2
int	extent_alloc_subregion1 __P((struct extent *, u_long, u_long,
	    u_long, u_long, u_long, u_long, int, u_long *));
d120 2
a121 11
	extent_alloc_subregion1((_ex), (_ex)->ex_start, (_ex)->ex_end,  \
	(_size), (_alignment), 0, (_boundary), (_flags), (_result))
#define extent_alloc1(_ex, _size, _alignment, _skew, _boundary, \
                        _flags, _result) \
	extent_alloc_subregion1((_ex), (_ex)->ex_start, (_ex)->ex_end,  \
	(_size), (_alignment), (_skew), (_boundary), (_flags), (_result))
/* Compat version of extent_alloc_subregion() */
#define extent_alloc_subregion(_ex, _start, _end, _size, _alignment, \
                                _boundary, _flags, _result) \
	extent_alloc_subregion1((_ex), (_start), (_end),        \
	(_size), (_alignment), 0, (_boundary), (_flags), (_result))
@


1.3.12.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 2
a2 2
/*	$OpenBSD: extent.h,v 1.5 2001/01/15 22:18:23 jason Exp $	*/
/*	$NetBSD: extent.h,v 1.6 1997/10/09 07:43:05 jtc Exp $	*/
d30 2
a31 2
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
@


1.3.12.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: extent.h,v 1.3.12.2 2001/05/14 22:45:02 niklas Exp $	*/
d112 1
a112 1
int	extent_alloc_subregion __P((struct extent *, u_long, u_long,
d119 6
a124 3
#define extent_alloc(_ex, _size, _alignment, _skew, _boundary, \
		_flags, _result) \
	extent_alloc_subregion((_ex), (_ex)->ex_start, (_ex)->ex_end,  \
d126 5
@


1.3.12.4
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d106 2
a107 2
struct extent *extent_find(char *);
void extent_print_all(void);
d109 8
a116 8
struct	extent *extent_create(char *, u_long, u_long, int,
	    caddr_t, size_t, int);
void	extent_destroy(struct extent *);
int	extent_alloc_subregion(struct extent *, u_long, u_long,
	    u_long, u_long, u_long, u_long, int, u_long *);
int	extent_alloc_region(struct extent *, u_long, u_long, int);
int	extent_free(struct extent *, u_long, u_long, int);
void	extent_print(struct extent *);
@


1.2
log
@Import extent manager from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 2
d105 3
@


1.1
log
@tiny extent manager by shawn
@
text
@d2 1
d4 2
a5 2
/*
 * Copyright (c) 1996, Shawn Hsiao <shawn@@alpha.secc.fju.edu.tw>
d8 3
d19 7
d27 11
a37 11
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d40 15
d56 7
a62 3
	LIST_ENTRY(extent) extent_link;
	u_int32_t base;
	u_int32_t size;
d65 6
a70 4
struct emap {
	char	*name;				/* name of this map */
	LIST_HEAD(, extent) extent_list;	/* a list of extent */
	LIST_ENTRY(emap) emap_link;
d73 47
a119 3
struct	emap *find_emap __P((char *name));
void	add_extent __P((struct emap *e, u_int32_t base, u_int32_t size));
int	probe_extent __P((struct emap *e, u_int32_t base, u_int32_t size));
@
