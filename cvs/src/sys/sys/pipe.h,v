head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.16
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.18
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.14
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.10
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.12
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.4
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.8
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.6
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.2
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.13.0.30
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.28
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.26
	OPENBSD_5_0:1.13.0.24
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.22
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.20
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.16
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.18
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.14
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.12
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.10
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.8
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.6
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.4
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.8
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.9.0.2
	UBC_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.15
date	2013.03.25.17.21.35;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.22.15.50.16;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2005.11.21.18.16.46;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.06.24.19.35.26;	author tholo;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.03.16.38.03;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.06.19.53.21;	author miod;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2001.06.23.06.09.16;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.23.06.04.33;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.14.13.43.52;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.14.10.51.25;	author art;	state Exp;
branches;
next	1.4;

1.4
date	99.10.29.14.01.44;	author art;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	99.02.16.21.27.37;	author art;	state Exp;
branches;
next	1.2;

1.2
date	96.09.04.22.38.47;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.08.27.14.47.07;	author shawn;	state Exp;
branches;
next	;

1.4.2.1
date	2001.07.04.11.00.26;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2001.11.13.23.02.30;	author niklas;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	1.4.2.4;

1.4.2.4
date	2004.02.19.11.01.33;	author niklas;	state Exp;
branches;
next	;

1.9.2.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@clean up kernel includes; no need for uvm_extern.h
@
text
@/*	$OpenBSD: pipe.h,v 1.14 2013/03/22 15:50:16 deraadt Exp $	*/

/*
 * Copyright (c) 1996 John S. Dyson
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice immediately at the beginning of the file, without modification,
 *    this list of conditions, and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Absolutely no warranty of function or purpose is made by the author
 *    John S. Dyson.
 * 4. This work was done expressly for inclusion into FreeBSD.  Other use
 *    is allowed if this notation is included.
 * 5. Modifications may be freely made to this file if the above conditions
 *    are met.
 */

#ifndef _SYS_PIPE_H_
#define _SYS_PIPE_H_

#ifndef _KERNEL
#include <sys/time.h>			/* for struct timespec */
#include <sys/selinfo.h>		/* for struct selinfo */
#endif /* _KERNEL */

/*
 * Pipe buffer size, keep moderate in value, pipes take kva space.
 */
#ifndef PIPE_SIZE
#define PIPE_SIZE	16384
#endif

#ifndef BIG_PIPE_SIZE
#define BIG_PIPE_SIZE	(64*1024)
#endif

/*
 * Pipe buffer information.
 * Separate in, out, cnt are used to simplify calculations.
 * Buffered write is active when the buffer.cnt field is set.
 */
struct pipebuf {
	u_int	cnt;		/* number of chars currently in buffer */
	u_int	in;		/* in pointer */
	u_int	out;		/* out pointer */
	u_int	size;		/* size of buffer */
	caddr_t	buffer;		/* kva of buffer */
};

/*
 * Bits in pipe_state.
 */
#define PIPE_ASYNC	0x004	/* Async? I/O. */
#define PIPE_WANTR	0x008	/* Reader wants some characters. */
#define PIPE_WANTW	0x010	/* Writer wants space to put characters. */
#define PIPE_WANT	0x020	/* Pipe is wanted to be run-down. */
#define PIPE_SEL	0x040	/* Pipe has a select active. */
#define PIPE_EOF	0x080	/* Pipe is in EOF condition. */
#define PIPE_LOCK	0x100	/* Process has exclusive access to pointers/data. */
#define PIPE_LWANT	0x200	/* Process wants exclusive access to pointers/data. */

/*
 * Per-pipe data structure.
 * Two of these are linked together to produce bi-directional pipes.
 */
struct pipe {
	struct	pipebuf pipe_buffer;	/* data storage */
	struct	selinfo pipe_sel;	/* for compat with select */
	struct	timespec pipe_atime;	/* time of last access */
	struct	timespec pipe_mtime;	/* time of last modify */
	struct	timespec pipe_ctime;	/* time of status change */
	int	pipe_pgid;		/* process/group for async I/O */
	struct	pipe *pipe_peer;	/* link with other direction */
	u_int	pipe_state;		/* pipe status info */
	int	pipe_busy;		/* busy flag, mostly to handle rundown sanely */
};

#ifdef _KERNEL
void	pipe_init(void);
#endif /* _KERNEL */

#endif /* !_SYS_PIPE_H_ */
@


1.14
log
@This has no reason to pull in machine/param.h
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.13 2005/11/21 18:16:46 millert Exp $	*/
d28 2
a29 3
#include <sys/time.h>			/* for struct timeval */
#include <sys/selinfo.h>			/* for struct selinfo */
#include <uvm/uvm_extern.h>		/* for vm_page_t */
@


1.13
log
@Move contents of sys/select.h to sys/selinfo.h in preparation for a
userland-visible sys/select.h.  Consistent with what Net and Free do.
OK deraadt@@, tested with full ports build by naddy@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.12 2004/06/24 19:35:26 tholo Exp $	*/
a30 1
#include <machine/param.h>		/* for PAGE_SIZE */
@


1.12
log
@This moves access to wall and uptime variables in MI code,
encapsulating all such access into wall-defined functions
that makes sure locking is done as needed.

It also cleans up some uses of wall time vs. uptime some
places, but there is sure to be more of these needed as
well, particularily in MD code.  Also, many current calls
to microtime() should probably be changed to getmicrotime(),
or to the {,get}microuptime() versions.

ok art@@ deraadt@@ aaron@@ matthieu@@ beck@@ sturm@@ millert@@ others
"Oh, that is not your problem!" from miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.11 2003/10/03 16:38:03 miod Exp $	*/
d29 1
a29 1
#include <sys/select.h>			/* for struct selinfo */
@


1.11
log
@Bring several fixes from FreeBSD to our current pipe implementation:
- when allocating or growing a pipe buffer is not possible, do not panic
  but report the error and handle it correctly. (1.73)
- "The pipe_write() code was locking the pipe without busying it first
  in certain cases, and a close() by another process could potentially rip
  the pipe out from under the (blocked) locking operation." (from Al Viro,
  1.81)
- "Remove test in pipe_write() which causes write(2) to return EAGAIN
  on a non-blocking pipe in cases where select(2) returns the file
  descriptor as ready for write. This in turns causes libc_r, for
  one, to busy wait in such cases.
  Note: it is a quick performance fix, a more complex fix might be
  required in case this turns out to have unexpected side effects."
  (1.141)
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.10 2002/03/14 01:27:14 millert Exp $	*/
d77 3
a79 3
	struct	timeval pipe_atime;	/* time of last access */
	struct	timeval pipe_mtime;	/* time of last modify */
	struct	timeval pipe_ctime;	/* time of status change */
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.9 2001/11/06 19:53:21 miod Exp $	*/
a55 1
	struct	vm_object *object;	/* VM object containing buffer */
@


1.9
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.8 2001/06/23 06:09:16 art Exp $	*/
d88 1
a88 1
void	pipe_init __P((void));
@


1.9.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.9 2001/11/06 19:53:21 miod Exp $	*/
d88 1
a88 1
void	pipe_init(void);
@


1.8
log
@pipe_stat isn't referenced from outside sys_pipe.c anymore
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.7 2001/06/23 06:04:33 art Exp $	*/
d30 1
a30 1
#include <vm/vm.h>			/* for vm_page_t */
@


1.7
log
@Add pipe_init, call it from main, move the pool initialization into it.
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.6 2001/05/14 13:43:52 art Exp $	*/
a87 1
int	pipe_stat __P((struct file *fp, struct stat *ub, struct proc *p));
@


1.6
log
@gc OLD_PIPE.
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.5 2001/05/14 10:51:25 art Exp $	*/
d89 1
@


1.5
log
@More generic arguments to pipe_stat.
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.4 1999/10/29 14:01:44 art Exp $	*/
a26 2
#ifndef OLD_PIPE

a89 2

#endif /* !OLD_PIPE */
@


1.4
log
@Remove the "Direct write" code.
We never used it and some parts of it slowed the code down.
Generally clean up the pipe code.
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.3 1999/02/16 21:27:37 art Exp $	*/
d90 1
a90 1
int	pipe_stat __P((struct pipe *pipe, struct stat *ub));
@


1.4.2.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.4 1999/10/29 14:01:44 art Exp $	*/
d27 2
d90 1
a90 1
void	pipe_init __P((void));
d92 2
@


1.4.2.2
log
@merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 1
a30 1
#include <uvm/uvm_extern.h>		/* for vm_page_t */
@


1.4.2.3
log
@Merge in -current from roughly a week ago
@
text
@d88 1
a88 1
void	pipe_init(void);
@


1.4.2.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d56 1
@


1.3
log
@Move defining of PIPE_NODIRECT to pipe.h and conditionalize more code with it.
This allows this code to compile on sparc.
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.2 1996/09/04 22:38:47 niklas Exp $	*/
a36 11
 * Use this define if you want to disable *fancy* VM things.  Expect an
 * approx 30% decrease in transfer rate.  This could be useful for
 * NetBSD or OpenBSD.
 */
#ifdef _KERNEL
#if defined(__NetBSD__) || defined(__OpenBSD__)
#define PIPE_NODIRECT
#endif
#endif

/*
a47 14
 * PIPE_MINDIRECT MUST be smaller than PIPE_SIZE and MUST be bigger
 * than PIPE_BUF.
 */
#ifndef PIPE_MINDIRECT
#define PIPE_MINDIRECT	8192
#endif

#if defined(__FreeBSD__)
#define PIPENPAGES	(BIG_PIPE_SIZE / PAGE_SIZE + 1)
#else /* (__NetBSD__) || (__OpenBSD__) */
#define PIPENPAGES	(BIG_PIPE_SIZE / NBPG + 1)
#endif

/*
a60 13
#ifndef PIPE_NODIRECT
/*
 * Information to support direct transfers between processes for pipes.
 */
struct pipemapping {
	vm_offset_t	kva;		/* kernel virtual address */
	vm_size_t	cnt;		/* number of chars in buffer */
	vm_size_t	pos;		/* current position of transfer */
	int		npages;		/* number of pages */
	vm_page_t	ms[PIPENPAGES];	/* pages in source process */
};
#endif

a71 2
#define PIPE_DIRECTW	0x400	/* Pipe direct write active. */
#define PIPE_DIRECTOK	0x800	/* Direct mode ok. */
a78 3
#ifndef PIPE_NODIRECT
	struct	pipemapping pipe_map;	/* pipe mapping for direct I/O */
#endif
@


1.2
log
@s/KERNEL/_KERNEL/
@
text
@d1 1
a1 1
/*	$OpenBSD: pipe.h,v 1.1 1996/08/27 14:47:07 shawn Exp $	*/
d37 11
d86 1
d97 1
d119 1
d121 1
@


1.1
log
@New fast pipe(2) from freebsd without fancy vm stuff.

The old pipes can be used with the "OLD_PIPE" config option.
@
text
@d1 2
a21 2
 *
 * $Id: pipe.h,v 1.6 1996/07/13 22:52:46 dyson Exp $
d29 1
a29 1
#ifndef KERNEL
d34 1
a34 1
#endif
d117 1
a117 1
#ifdef KERNEL
d119 1
a119 1
#endif
@
