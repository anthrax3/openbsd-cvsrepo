head	1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2017.04.28.13.50.55;	author mpi;	state Exp;
branches;
next	;
commitid	34WECc0W9rocx17W;


desc
@@


1.1
log
@Add futex(2) syscall based on a sane subset of its Linux equivalent.

The syscall is marked NOLOCK and only FUTEX_WAIT grabs the KERNEL_LOCK()
because of PCATCH and the signal nightmare.

Serialization of threads is currently done with a global & exclusive
rwlock.

Note that the current implementation still use copyin(9) which is not
guaranteed to be atomic.  Committing now such that remaining issues can
be addressed in-tree.

With inputs from guenther@@, kettenis@@ and visa@@.

ok deraadt@@, visa@@
@
text
@/*	$OpenBSD$ */

/*
 * Copyright (c) 2016 Martin Pieuchot
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef	_SYS_FUTEX_H_
#define	_SYS_FUTEX_H_

#ifndef _KERNEL
#include <sys/cdefs.h>

__BEGIN_DECLS
int futex(volatile uint32_t *, int, int, const struct timespec *,
    volatile uint32_t *);
__END_DECLS
#endif /* ! _KERNEL */

#define	FUTEX_WAIT		1
#define	FUTEX_WAKE		2
#define	FUTEX_REQUEUE		3

#endif	/* _SYS_FUTEX_H_ */
@
