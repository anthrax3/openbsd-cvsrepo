head	1.27;
access;
symbols
	OPENBSD_6_2:1.27.0.2
	OPENBSD_6_2_BASE:1.27
	OPENBSD_6_1:1.27.0.4
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.25.0.2
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.23.0.4
	OPENBSD_5_8_BASE:1.23
	OPENBSD_5_7:1.21.0.16
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.20
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.18
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.14
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.21.0.12
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.21.0.10
	OPENBSD_5_2_BASE:1.21
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.8
	OPENBSD_5_0:1.21.0.6
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.4
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.2
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.20.0.4
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.6
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.2
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.19.0.2
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.16.0.8
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.6
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.4
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.2
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.15.0.8
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.6
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.4
	OPENBSD_3_6_BASE:1.15
	SMP_SYNC_A:1.15
	SMP_SYNC_B:1.15
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.14.0.10
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.8
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.6
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.14.0.4
	OPENBSD_3_1_BASE:1.14
	UBC_SYNC_B:1.14
	UBC:1.14.0.2
	UBC_BASE:1.14
	OPENBSD_3_0:1.13.0.2
	OPENBSD_3_0_BASE:1.13
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_9:1.12.0.2
	OPENBSD_2_8:1.11.0.4
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.2
	OPENBSD_2_7_BASE:1.11
	SMP:1.10.0.6
	SMP_BASE:1.10
	kame_19991208:1.10
	OPENBSD_2_6:1.10.0.4
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2016.09.14.06.12.20;	author ratchov;	state Exp;
branches;
next	1.26;
commitid	pi1a9KN0itEngOc4;

1.26
date	2016.08.31.07.22.43;	author ratchov;	state Exp;
branches;
next	1.25;
commitid	u524ZaNwqXxsCXa2;

1.25
date	2016.06.18.07.59.30;	author ratchov;	state Exp;
branches;
next	1.24;
commitid	fEJswg099P796SWr;

1.24
date	2016.03.16.06.46.39;	author ratchov;	state Exp;
branches;
next	1.23;
commitid	QZGe5AFBhlhD5xcQ;

1.23
date	2015.07.28.20.45.02;	author ratchov;	state Exp;
branches;
next	1.22;
commitid	eZrQAVJUnWy2oIFo;

1.22
date	2015.06.25.06.43.46;	author ratchov;	state Exp;
branches;
next	1.21;
commitid	EA6IpjJSgQH2WTCf;

1.21
date	2010.07.15.03.43.12;	author jakemsr;	state Exp;
branches;
next	1.20;

1.20
date	2008.11.16.23.36.54;	author jakemsr;	state Exp;
branches;
next	1.19;

1.19
date	2008.03.22.11.05.31;	author ratchov;	state Exp;
branches;
next	1.18;

1.18
date	2007.10.03.21.49.13;	author jakemsr;	state Exp;
branches;
next	1.17;

1.17
date	2007.09.17.13.46.11;	author jakemsr;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.14.13.59.04;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2004.01.31.17.00.50;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.24.16.27.20;	author mickey;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.22.14.10.59;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2001.01.28.09.45.26;	author aaron;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.25.23.33.58;	author csapuntz;	state Exp;
branches;
next	1.10;

1.10
date	98.10.28.17.58.43;	author downsj;	state Exp;
branches
	1.10.6.1;
next	1.9;

1.9
date	98.08.16.17.01.02;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	98.06.02.11.01.11;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	98.04.26.21.03.17;	author provos;	state Exp;
branches;
next	1.6;

1.6
date	97.07.11.22.24.32;	author provos;	state Exp;
branches;
next	1.5;

1.5
date	96.04.21.22.31.28;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.04.18.21.40.43;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.03.03.12.11.22;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.03.02.22.42.56;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.25;	author deraadt;	state Exp;
branches;
next	;

1.10.6.1
date	2001.05.14.22.45.00;	author niklas;	state Exp;
branches;
next	1.10.6.2;

1.10.6.2
date	2001.07.04.11.00.12;	author niklas;	state Exp;
branches;
next	1.10.6.3;

1.10.6.3
date	2001.10.31.03.30.30;	author nate;	state Exp;
branches;
next	1.10.6.4;

1.10.6.4
date	2004.02.19.11.01.32;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Remove drain(), query_encoding(), mappage() and get_default_params()
methods from all audio drivers and from the audio_if structure as they
are never called.
@
text
@/*	$OpenBSD: audioio.h,v 1.22 2015/06/25 06:43:46 ratchov Exp $	*/
/*	$NetBSD: audioio.h,v 1.24 1998/08/13 06:28:41 mrg Exp $	*/

/*
 * Copyright (c) 1991-1993 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the Computer Systems
 *	Engineering Group at Lawrence Berkeley Laboratory.
 * 4. Neither the name of the University nor of the Laboratory may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _SYS_AUDIOIO_H_
#define _SYS_AUDIOIO_H_

#define AUMODE_PLAY	0x01
#define AUMODE_RECORD	0x02

#define AUDIO_INITPAR(p) \
	(void)memset((void *)(p), 0xff, sizeof(struct audio_swpar))

/*
 * argument to AUDIO_SETPAR and AUDIO_GETPAR ioctls
 */
struct audio_swpar {
	unsigned int sig;		/* if 1, encoding is signed */
	unsigned int le;		/* if 1, encoding is little-endian */
	unsigned int bits;		/* bits per sample */
	unsigned int bps;		/* bytes per sample */
	unsigned int msb;		/* if 1, bits are msb-aligned */
	unsigned int rate;		/* common play & rec sample rate */
	unsigned int pchan;		/* play channels */
	unsigned int rchan;		/* rec channels */
	unsigned int nblks;		/* number of blocks in play buffer */
	unsigned int round;		/* common frames per block */
	unsigned int _spare[6];
};

/*
 * argument to AUDIO_GETSTATUS
 */
struct audio_status {
	int mode;
	int pause;
	int active;
	int _spare[5];
};

/*
 * Parameter for the AUDIO_GETDEV ioctl to determine current
 * audio devices.
 */
#define MAX_AUDIO_DEV_LEN	16
typedef struct audio_device {
	char name[MAX_AUDIO_DEV_LEN];
	char version[MAX_AUDIO_DEV_LEN];
	char config[MAX_AUDIO_DEV_LEN];
} audio_device_t;

struct audio_pos {
	unsigned int play_pos;	/* total bytes played */
	unsigned int play_xrun;	/* bytes of silence inserted */
	unsigned int rec_pos;	/* total bytes recorded */
	unsigned int rec_xrun;	/* bytes dropped */
};

/*
 * Audio device operations
 */
#define AUDIO_GETDEV	_IOR('A', 27, struct audio_device)
#define AUDIO_GETPOS	_IOR('A', 35, struct audio_pos)
#define AUDIO_GETPAR	_IOR('A', 36, struct audio_swpar)
#define AUDIO_SETPAR	_IOWR('A', 37, struct audio_swpar)
#define AUDIO_START	_IO('A', 38)
#define AUDIO_STOP	_IO('A', 39)
#define AUDIO_GETSTATUS	_IOR('A', 40, struct audio_status)

/*
 * Mixer device
 */
#define AUDIO_MIN_GAIN	0
#define AUDIO_MAX_GAIN	255

typedef struct mixer_level {
	int num_channels;
	u_char level[8];	/* [num_channels] */
} mixer_level_t;
#define AUDIO_MIXER_LEVEL_MONO	0
#define AUDIO_MIXER_LEVEL_LEFT	0
#define AUDIO_MIXER_LEVEL_RIGHT	1

/*
 * Device operations
 */

typedef struct audio_mixer_name {
	char name[MAX_AUDIO_DEV_LEN];
	int msg_id;
} audio_mixer_name_t;

typedef struct mixer_devinfo {
	int index;
	audio_mixer_name_t label;
	int type;
#define AUDIO_MIXER_CLASS	0
#define AUDIO_MIXER_ENUM	1
#define AUDIO_MIXER_SET		2
#define AUDIO_MIXER_VALUE	3
	int mixer_class;
	int next, prev;
#define AUDIO_MIXER_LAST	-1
	union {
		struct audio_mixer_enum {
			int num_mem;
			struct {
				audio_mixer_name_t label;
				int ord;
			} member[32];
		} e;
		struct audio_mixer_set {
			int num_mem;
			struct {
				audio_mixer_name_t label;
				int mask;
			} member[32];
		} s;
		struct audio_mixer_value {
			audio_mixer_name_t units;
			int num_channels;
			int delta;
		} v;
	} un;
} mixer_devinfo_t;


typedef struct mixer_ctrl {
	int dev;
	int type;
	union {
		int ord;		/* enum */
		int mask;		/* set */
		mixer_level_t value;	/* value */
	} un;
} mixer_ctrl_t;

/*
 * Mixer operations
 */
#define AUDIO_MIXER_READ		_IOWR('M', 0, mixer_ctrl_t)
#define AUDIO_MIXER_WRITE		_IOWR('M', 1, mixer_ctrl_t)
#define AUDIO_MIXER_DEVINFO		_IOWR('M', 2, mixer_devinfo_t)

/*
 * Well known device names
 */
#define AudioNmicrophone	"mic"
#define AudioNline	"line"
#define AudioNcd	"cd"
#define AudioNdac	"dac"
#define AudioNaux	"aux"
#define AudioNrecord	"record"
#define AudioNvolume	"volume"
#define AudioNmonitor	"monitor"
#define AudioNtreble	"treble"
#define AudioNmid	"mid"
#define AudioNbass	"bass"
#define AudioNbassboost	"bassboost"
#define AudioNspeaker	"spkr"
#define AudioNheadphone	"hp"
#define AudioNoutput	"output"
#define AudioNinput	"input"
#define AudioNmaster	"master"
#define AudioNstereo	"stereo"
#define AudioNmono	"mono"
#define AudioNloudness	"loudness"
#define AudioNspatial	"spatial"
#define AudioNsurround	"surround"
#define AudioNpseudo	"pseudo"
#define AudioNmute	"mute"
#define AudioNenhanced	"enhanced"
#define AudioNpreamp	"preamp"
#define AudioNon	"on"
#define AudioNoff	"off"
#define AudioNmode	"mode"
#define AudioNsource	"source"
#define AudioNfmsynth	"fmsynth"
#define AudioNwave	"wave"
#define AudioNmidi	"midi"
#define AudioNmixerout	"mixerout"
#define AudioNswap	"swap"	/* swap left and right channels */
#define AudioNagc	"agc"
#define AudioNdelay	"delay"
#define AudioNselect	"select" /* select destination */
#define AudioNvideo	"video"
#define AudioNcenter	"center"
#define AudioNdepth	"depth"
#define AudioNlfe	"lfe"
#define AudioNextamp	"extamp"

#define AudioCinputs	"inputs"
#define AudioCoutputs	"outputs"
#define AudioCrecord	"record"
#define AudioCmonitor	"monitor"
#define AudioCequalization	"equalization"

#endif /* !_SYS_AUDIOIO_H_ */
@


1.26
log
@Delete unused ioctls and associated macros. Move macros that are still
used internally by low-level drivers from sys/audioio.h to
dev/audio_if.h instead of deleting them.
@
text
@a224 16
#define AudioEmulaw		"mulaw"
#define AudioEalaw		"alaw"
#define AudioEadpcm 		"adpcm"
#define AudioEslinear		"slinear"
#define AudioEslinear_le	"slinear_le"
#define AudioEslinear_be	"slinear_be"
#define AudioEulinear		"ulinear"
#define AudioEulinear_le	"ulinear_le"
#define AudioEulinear_be	"ulinear_be"
#define AudioEmpeg_l1_stream	"mpeg_l1_stream"
#define AudioEmpeg_l1_packets	"mpeg_l1_packets"
#define AudioEmpeg_l1_system	"mpeg_l1_system"
#define AudioEmpeg_l2_stream	"mpeg_l2_stream"
#define AudioEmpeg_l2_packets	"mpeg_l2_packets"
#define AudioEmpeg_l2_system	"mpeg_l2_system"

@


1.25
log
@Add a new AUDIO_GETSTATUS ioctl to get various audio driver variables.
It's intended for use with diagnostic tools (like audioctl) and is of
no use to audio programs.
@
text
@d41 3
a74 38
 * Audio device
 */
struct audio_prinfo {
	u_int	sample_rate;	/* sample rate in bit/s */
	u_int	channels;	/* number of channels, usually 1 or 2 */
	u_int	precision;	/* number of bits/sample */
	u_int	bps;		/* number of bytes/sample */
	u_int	msb;		/* data alignment */
	u_int	encoding;	/* data encoding (AUDIO_ENCODING_* below) */
	u_int	ispare2[4];
	u_int	buffer_size;	/* total size audio buffer */
	u_int	block_size;	/* size a block */
	/* Current state of device: */
	u_int	samples;	/* number of samples */
	u_int	ispare[1];
	u_char	pause;		/* non-zero if paused, zero to resume */
	u_char	cspare2[6];
	u_char	active;		/* non-zero if I/O is currently active */
};
typedef struct audio_prinfo audio_prinfo_t;

struct audio_info {
	struct	audio_prinfo play;	/* Info for play (output) side */
	struct	audio_prinfo record;	/* Info for record (input) side */
	u_int	ispare[2];	/* H/W read/write block size */
	u_int	hiwat;		/* output high water mark */
	u_int	lowat;		/* output low water mark */
	u_char	cspare[4];
	u_int	mode;		/* current device mode */
#define AUMODE_PLAY	0x01
#define AUMODE_RECORD	0x02
};
typedef struct audio_info audio_info_t;

#define AUDIO_INITINFO(p) \
	(void)memset((void *)(p), 0xff, sizeof(struct audio_info))

/*
a84 5
typedef struct audio_offset {
	u_int	samples;	/* Total number of bytes transferred */
	u_int	unused[2];
} audio_offset_t;

a92 34
 * Supported audio encodings
 */
/* Encoding ID's */
#define	AUDIO_ENCODING_NONE		0 /* no encoding assigned */
#define	AUDIO_ENCODING_ULAW		1 /* ITU G.711 mu-law */
#define	AUDIO_ENCODING_ALAW		2 /* ITU G.711 A-law */
#define	AUDIO_ENCODING_ADPCM		5 /* adaptive differential PCM */
#define AUDIO_ENCODING_SLINEAR_LE	6
#define AUDIO_ENCODING_SLINEAR_BE	7
#define AUDIO_ENCODING_ULINEAR_LE	8
#define AUDIO_ENCODING_ULINEAR_BE	9
#define AUDIO_ENCODING_SLINEAR		10
#define AUDIO_ENCODING_ULINEAR		11

typedef struct audio_encoding {
	int	index;
	char	name[MAX_AUDIO_DEV_LEN];
	int	encoding;
	int	precision;
	int	bps;
	int	msb;
	int	flags;
#define AUDIO_ENCODINGFLAG_EMULATED 1 /* software emulation mode */
} audio_encoding_t;

/*
 * Balance settings.
 */
#define	AUDIO_LEFT_BALANCE	0	/* left channel only	*/
#define	AUDIO_MID_BALANCE	32	/* equal left/right channel */
#define	AUDIO_RIGHT_BALANCE	64	/* right channel only	*/
#define	AUDIO_BALANCE_SHIFT	3

/*
a94 4
#define AUDIO_GETINFO	_IOR('A', 21, struct audio_info)
#define AUDIO_SETINFO	_IOWR('A', 22, struct audio_info)
#define AUDIO_DRAIN	_IO('A', 23)
#define AUDIO_RERROR	_IOR('A', 26, int)
a95 7
#define AUDIO_GETENC	_IOWR('A', 28, struct audio_encoding)
#define AUDIO_GETFD	_IOR('A', 29, int)
#define AUDIO_SETFD	_IOWR('A', 30, int)
#define AUDIO_PERROR	_IOR('A', 31, int)
#define AUDIO_GETIOFFS	_IOR('A', 32, struct audio_offset)
#define AUDIO_GETOOFFS	_IOR('A', 33, struct audio_offset)
#define AUDIO_GETPROPS	_IOR('A', 34, int)
a101 3
#define  AUDIO_PROP_FULLDUPLEX	0x01
#define  AUDIO_PROP_MMAP	0x02
#define  AUDIO_PROP_INDEPENDENT	0x04
@


1.24
log
@Expose new audio ioctls that do one thing only: start and stop DMA,
set and get parameters. This is much simpler.

ok semarie, armani, tweaks from jmc
@
text
@d62 10
d186 1
@


1.23
log
@Add the AUDIO_GETPOS ioctl() to fetch a snapshot of the 4 counters
returned by AUDIO_GETxOFFS and AUDIO_xERROR ioctls.

ok deraadt
@
text
@d41 20
d172 4
@


1.22
log
@Reimplement the audio driver in a simpler way, removing unused/unusable
functionality. Same API and ABI except for the removed bits and no
behaviour change for programs using libsndio. With help from armani@@
and mpi@@, thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.21 2010/07/15 03:43:12 jakemsr Exp $	*/
d95 7
d151 1
@


1.21
log
@add two new members to structs audio_encoding and audio_prinfo.
for both structs, the new members are 'bps' and 'msb', which
describe the number of bytes per sample and data alignment in the
sample, respectively.  drivers must properly set these fields in
the 'query_encoding', 'set_parameters' and 'get_default_params'
hardware interface methods.

discussed with ratchov, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.20 2008/11/16 23:36:54 jakemsr Exp $	*/
d51 1
a51 4
	u_int	gain;		/* volume level */
	u_int	port;		/* selected I/O port */
	u_int	seek;		/* BSD extension */
	u_int	avail_ports;	/* available I/O ports */
d56 1
a56 1
	u_int	eof;		/* End Of File (zero-size writes) counter */
d58 1
a58 5
	u_char	error;		/* non-zero if underflow/overflow occurred */
	u_char	waiting;	/* non-zero if another process hangs in open */
	u_char	balance;	/* stereo channel balance */
	u_char	cspare[2];
	u_char	open;		/* non-zero if currently open */
d66 1
a66 4

	u_int	monitor_gain;	/* input to output mix */
	/* BSD extensions */
	u_int	blocksize;	/* H/W read/write block size */
d69 1
a69 2
	u_char	output_muted;	/* toggle play mute */
	u_char	cspare[3];
a72 1
#define AUMODE_PLAY_ALL	0x04	/* don't do real-time correction */
a78 8
struct audio_bufinfo {
	u_int	blksize;	/* block size */
	u_int	hiwat;		/* high water mark */
	u_int	lowat;		/* low water mark */
	u_int	seek;		/* current position */
};
typedef struct audio_bufinfo audio_bufinfo_t;

d92 1
a92 2
	u_int	deltablks;	/* Blocks transferred since last checked */
	u_int	offset;		/* Physical transfer offset in buffer */
a101 4
#define	AUDIO_ENCODING_PCM16		3 /* signed linear PCM, obsolete */
#define AUDIO_ENCODING_LINEAR		AUDIO_ENCODING_PCM16 /* SunOS compat */
#define	AUDIO_ENCODING_PCM8		4 /* unsigned linear PCM, obsolete */
#define AUDIO_ENCODING_LINEAR8		AUDIO_ENCODING_PCM8 /* SunOS compat */
a108 9
#define AUDIO_ENCODING_MPEG_L1_STREAM	12
#define AUDIO_ENCODING_MPEG_L1_PACKETS	13
#define AUDIO_ENCODING_MPEG_L1_SYSTEM	14
#define AUDIO_ENCODING_MPEG_L2_STREAM	15
#define AUDIO_ENCODING_MPEG_L2_PACKETS	16
#define AUDIO_ENCODING_MPEG_L2_SYSTEM	17
#define AUDIO_ENCODING_MPEG_L3_STREAM	18
#define AUDIO_ENCODING_MPEG_L3_PACKETS	19
#define AUDIO_ENCODING_MPEG_L3_SYSTEM	20
a129 15
 * Output ports
 */
#define	AUDIO_SPEAKER		0x01	/* built-in speaker */
#define	AUDIO_HEADPHONE		0x02	/* headphone jack */
#define	AUDIO_LINE_OUT		0x04	/* line out	 */

/*
 * Input ports
 */
#define	AUDIO_MICROPHONE	0x01	/* microphone */
#define	AUDIO_LINE_IN		0x02	/* line in	 */
#define	AUDIO_CD		0x04	/* on-board CD inputs */
#define	AUDIO_INTERNAL_CD_IN	AUDIO_CD	/* internal CDROM */

/*
a134 2
#define AUDIO_FLUSH	_IO('A', 24)
#define AUDIO_WSEEK	_IOR('A', 25, u_long)
a146 2
#define AUDIO_GETPRINFO	_IOR('A', 35, struct audio_bufinfo)
#define AUDIO_GETRRINFO	_IOR('A', 36, struct audio_bufinfo)
@


1.20
log
@
shorten "headphones" to "hp" and "speaker" to "spkr".  avoids mixer
item name truncation in azalia and possibly other devices.

ok ratchov

warning: if you have a mixerctl.conf(5), it probably needs to be
updated.
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.19 2008/03/22 11:05:31 ratchov Exp $	*/
d48 2
d149 2
@


1.19
log
@add audio(4) driver the ability to use different block sizes for play and
record modes. This makes possible to have blocks of the same duration if the
play and record formats are different. The API change is backward
compatible, so it shouldn't be noticed by current audio ports.

ok jakemsr
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.18 2007/10/03 21:49:13 jakemsr Exp $	*/
d287 2
a288 2
#define AudioNspeaker	"speaker"
#define AudioNheadphone	"headphones"
@


1.18
log
@
add two new audio ioctls, AUDIO_GETPRINFO and AUDIO_GETRRINFO, and the
data structure these ioctls use, audio_bufinfo.

these ioctls return information about the play and record buffers
into the audio_bufinfo structure.

these are being added to aid in porting non-native audio applications
and libraries, and to fix issues in our OSS audio emulation.  these
ioctls exist only on OpenBSD and should not be used in code intended
for distribution.

ok ratchov
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.17 2007/09/17 13:46:11 jakemsr Exp $	*/
d54 1
a54 1
	u_int	_ispare[1];
@


1.17
log
@implement the output_muted member of audio_info_t as found in original
Sun audio.

input from and ok ratchov
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.16 2005/12/14 13:59:04 fgsch Exp $	*/
d89 8
d194 2
@


1.16
log
@some codecs have an external amplifier, and in some hw the bit to powering
it down seems to be inverted, so rather than guessing or workaround this,
add a extamp var so it can be toggled in userland via mixerctl(1).
audio works in hp nx6125 now; tested by todd@@, mickey@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.15 2004/01/31 17:00:50 jmc Exp $	*/
d77 2
a78 1
	u_int	_ispare1;
@


1.15
log
@typo from Jared Yanovich;
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.14 2001/10/24 16:27:20 mickey Exp $	*/
d306 1
@


1.14
log
@add mpeg_l3 encodings (after l1 and l2), define strings for center, depth, lfe
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.13 2001/06/22 14:10:59 deraadt Exp $	*/
d59 1
a59 1
	u_char	error;		/* non-zero if underflow/overflow ocurred */
@


1.13
log
@KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.12 2001/01/28 09:45:26 aaron Exp $	*/
d129 3
d303 3
@


1.12
log
@Add a field to mixer_devinto_t that indicates the minimum delta to change
mixer value. A value of 0 indicates that the driver doesn't supply a delta.
The change is backwards compatible. From NetBSD (needed for uaudio(4) update).
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.11 2000/04/25 23:33:58 csapuntz Exp $	*/
d92 1
a92 1
#define MAX_AUDIO_DEV_LEN       16
d94 3
a96 3
        char name[MAX_AUDIO_DEV_LEN];
        char version[MAX_AUDIO_DEV_LEN];
        char config[MAX_AUDIO_DEV_LEN];
d299 1
a299 1
#define AudioNvideo     "video"
@


1.11
log
@

Add AudioNvideo
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.10 1998/10/28 17:58:43 downsj Exp $	*/
d235 1
@


1.10
log
@Add a couple of names from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d298 1
@


1.10.6.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.12 2001/01/28 09:45:26 aaron Exp $	*/
a234 1
			int delta;
a297 1
#define AudioNvideo     "video"
@


1.10.6.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.10.6.1 2001/05/14 22:45:00 niklas Exp $	*/
d92 1
a92 1
#define MAX_AUDIO_DEV_LEN	16
d94 3
a96 3
	char name[MAX_AUDIO_DEV_LEN];
	char version[MAX_AUDIO_DEV_LEN];
	char config[MAX_AUDIO_DEV_LEN];
d299 1
a299 1
#define AudioNvideo	"video"
@


1.10.6.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.10.6.2 2001/07/04 11:00:12 niklas Exp $	*/
a128 3
#define AUDIO_ENCODING_MPEG_L3_STREAM	18
#define AUDIO_ENCODING_MPEG_L3_PACKETS	19
#define AUDIO_ENCODING_MPEG_L3_SYSTEM	20
a299 3
#define AudioNcenter	"center"
#define AudioNdepth	"depth"
#define AudioNlfe	"lfe"
@


1.10.6.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d59 1
a59 1
	u_char	error;		/* non-zero if underflow/overflow occurred */
@


1.9
log
@change seek to int
@
text
@d1 2
a2 2
/*	$OpenBSD: audioio.h,v 1.8 1998/06/02 11:01:11 provos Exp $	*/
/*	$NetBSD: audioio.h,v 1.21 1998/05/27 17:21:29 augustss Exp $	*/
d285 1
d297 1
@


1.8
log
@update from NetBSD, #define a few more useful strings. augustss.
@
text
@d1 1
a1 1
/*	$OpenBSD: audioio.h,v 1.7 1998/04/26 21:03:17 provos Exp $	*/
d51 1
a51 1
	u_long	seek;		/* BSD extension */
@


1.7
log
@update audio from NetBSD, mostly by Lennart Augustsson <augustss@@cs.chalmers.se>
@
text
@d1 2
a2 2
/*	$OpenBSD: audioio.h,v 1.14 1997/08/26 19:03:57 augustss Exp $	*/
/*	$NetBSD: audioio.h,v 1.18 1997/10/28 03:26:45 mikel Exp $	*/
d85 1
a85 8
#ifdef _KERNEL
#define AUDIO_INITINFO(p)\
	{ int n = sizeof(struct audio_info); \
	  u_char *q = (u_char *) p; \
	  while (n-- > 0) *q++ = 0xff; }

#else
#define AUDIO_INITINFO(p)\
a86 1
#endif
d264 1
d269 1
d271 1
d279 1
d294 2
@


1.6
log
@cosmetic changes; netbsd
@
text
@d1 2
a2 2
/*	$OpenBSD: audioio.h,v 1.4 1996/04/18 21:40:43 niklas Exp $	*/
/*	$NetBSD: audioio.h,v 1.6 1996/04/09 20:55:22 cgd Exp $	*/
d48 1
a48 1
	u_int	encoding;	/* data encoding (AUDIO_ENCODING_* above) */
d52 3
a54 1
	u_int	ispare[3];
d61 2
a62 1
	u_char	cspare[3];
d71 2
a72 1
	u_int	__spare;
d74 1
a74 1
	u_int	blocksize;	/* input blocking threshold */
d77 1
a77 1
	u_int	backlog;	/* samples of output backlog to gen. */
d81 1
a81 1
#define AUMODE_PLAY_ALL	0x04	/* play all samples--no real-time correction */
d87 2
a88 2
	{ register int n = sizeof(struct audio_info); \
	  register u_char *q = (u_char *) p; \
d107 6
d117 20
a136 7
#define	AUDIO_ENCODING_NONE	0 /* no encoding assigned */
#define AUDIO_ENCODING_ULAW	1
#define AUDIO_ENCODING_ALAW	2
#define AUDIO_ENCODING_PCM16	3
#define AUDIO_ENCODING_LINEAR	AUDIO_ENCODING_PCM16
#define AUDIO_ENCODING_PCM8	4
#define AUDIO_ENCODING_ADPCM	5
d139 6
a144 3
	int index;
	char name[MAX_AUDIO_DEV_LEN];
	int format_id;
d148 23
d184 6
d270 2
a271 2
#define AudioNcd	"CD"
#define AudioNdac	"DAC"
d297 1
d299 21
a319 12
#define AudioElinear "linear"
#define AudioEmulaw "mulaw"
#define AudioEalaw "alaw"
#define AudioEpcm16 "PCM-16"
#define AudioEpcm8 "PCM-8"
#define AudioEadpcm "ADPCM"

#define AudioCInputs	"Inputs"
#define AudioCOutputs	"Outputs"
#define AudioCRecord	"Record"
#define AudioCMonitor	"Monitor"
#define AudioCEqualization	"Equalization"
d321 1
a321 1
#endif /* _SYS_AUDIOIO_H_ */
@


1.5
log
@partial sync with netbsd 960418, more to come
@
text
@d38 2
a39 2
#ifndef _AUDIOIO_H_
#define _AUDIOIO_H_
d256 1
a256 1
#endif /* _AUDIOIO_H_ */
@


1.4
log
@Merge of NetBSD 960317
@
text
@d1 2
a2 2
/*	$OpenBSD: audioio.h,v 1.3 1996/03/03 12:11:22 niklas Exp $	*/
/*	$NetBSD: audioio.h,v 1.5 1996/03/11 05:12:28 scottr Exp $	*/
d136 1
a136 1
/* 
@


1.3
log
@From NetBSD: 960217 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: audioio.h,v 1.4 1996/02/17 02:28:56 jtk Exp $	*/
d81 7
d90 1
@


1.2
log
@from NetBSD: audio now compiles.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: audioio.h,v 1.3 1995/07/07 01:43:35 brezak Exp $	*/
d76 1
d125 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
