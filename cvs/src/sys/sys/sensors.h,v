head	1.34;
access;
symbols
	OPENBSD_6_1:1.34.0.12
	OPENBSD_6_1_BASE:1.34
	OPENBSD_6_0:1.34.0.8
	OPENBSD_6_0_BASE:1.34
	OPENBSD_5_9:1.34.0.4
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.34.0.6
	OPENBSD_5_8_BASE:1.34
	OPENBSD_5_7:1.34.0.2
	OPENBSD_5_7_BASE:1.34
	OPENBSD_5_6:1.33.0.6
	OPENBSD_5_6_BASE:1.33
	OPENBSD_5_5:1.33.0.4
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.32.0.4
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.32.0.2
	OPENBSD_5_3_BASE:1.32
	OPENBSD_5_2:1.31.0.4
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.2
	OPENBSD_5_0:1.30.0.6
	OPENBSD_5_0_BASE:1.30
	OPENBSD_4_9:1.30.0.4
	OPENBSD_4_9_BASE:1.30
	OPENBSD_4_8:1.30.0.2
	OPENBSD_4_8_BASE:1.30
	OPENBSD_4_7:1.25.0.2
	OPENBSD_4_7_BASE:1.25
	OPENBSD_4_6:1.24.0.12
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.8
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.6
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.4
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.2
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.22.0.2
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.18.0.2
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.14.0.2
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.7.0.2
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.1.0.6
	OPENBSD_3_4_BASE:1.1
	UBC:1.1.0.4
	UBC_SYNC_A:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.34
date	2014.12.18.20.30.58;	author tedu;	state Exp;
branches;
next	1.33;
commitid	wDgHPHX57AmsEFt6;

1.33
date	2013.11.04.02.41.49;	author jsg;	state Exp;
branches;
next	1.32;

1.32
date	2012.09.20.20.11.58;	author yuo;	state Exp;
branches;
next	1.31;

1.31
date	2011.09.16.15.44.31;	author yuo;	state Exp;
branches;
next	1.30;

1.30
date	2010.04.21.19.40.59;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	2010.04.21.04.07.11;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	2010.04.20.20.49.35;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2010.04.20.19.44.07;	author oga;	state Exp;
branches;
next	1.26;

1.26
date	2010.04.15.04.57.28;	author yuo;	state Exp;
branches;
next	1.25;

1.25
date	2009.08.12.13.21.49;	author kettenis;	state Exp;
branches;
next	1.24;

1.24
date	2007.06.24.05.34.35;	author dlg;	state Exp;
branches;
next	1.23;

1.23
date	2007.03.22.16.55.31;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2007.02.23.22.55.40;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2006.12.27.13.04.29;	author mbalmer;	state Exp;
branches;
next	1.20;

1.20
date	2006.12.23.17.40.39;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2006.11.29.20.00.22;	author mbalmer;	state Exp;
branches;
next	1.18;

1.18
date	2006.07.03.21.17.37;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.25.03.14.19;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.20.21.00.20;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.12.13.48.32;	author dlg;	state Exp;
branches;
next	1.14;

1.14
date	2006.01.28.09.53.37;	author dlg;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.19.17.08.40;	author grange;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.30.15.46.32;	author dlg;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.21.13.47.52;	author dlg;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.15.22.12.07;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.10.08.20.20;	author dlg;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.23.13.52.13;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.05.03.07.41;	author dlg;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.03.14.53.39;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2005.04.08.05.01.47;	author jolan;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.10.19.53.34;	author grange;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.07.18.20.22;	author grange;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.12.14.10.53;	author grange;	state Exp;
branches;
next	1.1;

1.1
date	2003.04.25.20.06.41;	author grange;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.05.12.19.50.24;	author ho;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.02.19.11.01.34;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.06.05.23.13.10;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.34
log
@document power capacity units. from david higgs
then change everything from mu to u, as more traditional.
ok deraadt
@
text
@/*	$OpenBSD: sensors.h,v 1.33 2013/11/04 02:41:49 jsg Exp $	*/

/*
 * Copyright (c) 2003, 2004 Alexander Yurchenko <grange@@openbsd.org>
 * Copyright (c) 2006 Constantine A. Murenin <cnst+openbsd@@bugmail.mojo.ru>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _SYS_SENSORS_H_
#define _SYS_SENSORS_H_

/* Sensor types */
enum sensor_type {
	SENSOR_TEMP,			/* temperature (uK) */
	SENSOR_FANRPM,			/* fan revolution speed */
	SENSOR_VOLTS_DC,		/* voltage (uV DC) */
	SENSOR_VOLTS_AC,		/* voltage (uV AC) */
	SENSOR_OHMS,			/* resistance */
	SENSOR_WATTS,			/* power (uW) */
	SENSOR_AMPS,			/* current (uA) */
	SENSOR_WATTHOUR,		/* power capacity (uWh) */
	SENSOR_AMPHOUR,			/* power capacity (uAh) */
	SENSOR_INDICATOR,		/* boolean indicator */
	SENSOR_INTEGER,			/* generic integer value */
	SENSOR_PERCENT,			/* percent (m%) */
	SENSOR_LUX,			/* illuminance (ulx) */
	SENSOR_DRIVE,			/* disk */
	SENSOR_TIMEDELTA,		/* system time error (nSec) */
	SENSOR_HUMIDITY,		/* humidity (m%RH) */
	SENSOR_FREQ,			/* frequency (uHz) */
	SENSOR_ANGLE,			/* angle (uDegrees) */
	SENSOR_DISTANCE,		/* distance (uMeter) */
	SENSOR_PRESSURE,		/* pressure (mPa) */
	SENSOR_ACCEL,			/* acceleration (u m/s^2) */
	SENSOR_MAX_TYPES
};

#ifndef _KERNEL
static const char * const sensor_type_s[SENSOR_MAX_TYPES + 1] = {
	"temp",
	"fan",
	"volt",
	"acvolt",
	"resistance",
	"power",
	"current",
	"watthour",
	"amphour",
	"indicator",
	"raw",
	"percent",
	"illuminance",
	"drive",
	"timedelta",
	"humidity",
	"frequency",
	"angle",
	"distance",
	"pressure",
	"acceleration",
	"undefined"
};
#endif	/* !_KERNEL */

#define SENSOR_DRIVE_EMPTY	1
#define SENSOR_DRIVE_READY	2
#define SENSOR_DRIVE_POWERUP	3
#define SENSOR_DRIVE_ONLINE	4
#define SENSOR_DRIVE_IDLE	5
#define SENSOR_DRIVE_ACTIVE	6
#define SENSOR_DRIVE_REBUILD	7
#define SENSOR_DRIVE_POWERDOWN	8
#define SENSOR_DRIVE_FAIL	9
#define SENSOR_DRIVE_PFAIL	10

/* Sensor states */
enum sensor_status {
	SENSOR_S_UNSPEC,		/* status is unspecified */
	SENSOR_S_OK,			/* status is ok */
	SENSOR_S_WARN,			/* status is warning */
	SENSOR_S_CRIT,			/* status is critical */
	SENSOR_S_UNKNOWN		/* status is unknown */
};

/* Sensor data:
 * New fields should be added at the end to encourage backwards compat
 */
struct sensor {
	char desc[32];			/* sensor description, may be empty */
	struct timeval tv;		/* sensor value last change time */
	int64_t value;			/* current value */
	enum sensor_type type;		/* sensor type */
	enum sensor_status status;	/* sensor status */
	int numt;			/* sensor number of .type type */
	int flags;			/* sensor flags */
#define SENSOR_FINVALID		0x0001	/* sensor is invalid */
#define SENSOR_FUNKNOWN		0x0002	/* sensor value is unknown */
};

/* Sensor device data:
 * New fields should be added at the end to encourage backwards compat
 */
struct sensordev {
	int num;			/* sensordev number */
	char xname[16];			/* unix device name */
	int maxnumt[SENSOR_MAX_TYPES];
	int sensors_count;
};

#ifdef _KERNEL

/* Sensor data */
struct ksensor {
	SLIST_ENTRY(ksensor) list;	/* device-scope list */
	char desc[32];			/* sensor description, may be empty */
	struct timeval tv;		/* sensor value last change time */
	int64_t value;			/* current value */
	enum sensor_type type;		/* sensor type */
	enum sensor_status status;	/* sensor status */
	int numt;			/* sensor number of .type type */
	int flags;			/* sensor flags, ie. SENSOR_FINVALID */
};
SLIST_HEAD(ksensors_head, ksensor);

/* Sensor device data */
struct ksensordev {
	SLIST_ENTRY(ksensordev)	list;
	int num;			/* sensordev number */
	char xname[16];			/* unix device name */
	int maxnumt[SENSOR_MAX_TYPES];
	int sensors_count;
	struct ksensors_head sensors_list;
};

/* struct ksensordev */
void			 sensordev_install(struct ksensordev *);
void			 sensordev_deinstall(struct ksensordev *);
int			 sensordev_get(int, struct ksensordev **);

/* struct ksensor */
void			 sensor_attach(struct ksensordev *, struct ksensor *);
void			 sensor_detach(struct ksensordev *, struct ksensor *);
int			 sensor_find(int, enum sensor_type, int, struct ksensor **);

/* task scheduling */
struct sensor_task;
struct sensor_task	*sensor_task_register(void *, void (*)(void *),
			     unsigned int);
void			 sensor_task_unregister(struct sensor_task *);

#endif	/* _KERNEL */

#endif	/* !_SYS_SENSORS_H_ */
@


1.33
log
@dlg missed the header change in the sensor task commit
unbreaks the build
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.32 2012/09/20 20:11:58 yuo Exp $	*/
d34 1
a34 1
	SENSOR_TEMP,			/* temperature (muK) */
d36 2
a37 2
	SENSOR_VOLTS_DC,		/* voltage (muV DC) */
	SENSOR_VOLTS_AC,		/* voltage (muV AC) */
d39 4
a42 4
	SENSOR_WATTS,			/* power (muW) */
	SENSOR_AMPS,			/* current (muA) */
	SENSOR_WATTHOUR,		/* power capacity */
	SENSOR_AMPHOUR,			/* power capacity */
d45 2
a46 2
	SENSOR_PERCENT,			/* percent */
	SENSOR_LUX,			/* illuminance (mulx) */
d50 3
a52 3
	SENSOR_FREQ,			/* frequency (muHz) */
	SENSOR_ANGLE,			/* angle (mudegrees) */
	SENSOR_DISTANCE,		/* distance (muMeter) */
d54 1
a54 1
	SENSOR_ACCEL,			/* acceleration (mu m/s^2) */
@


1.32
log
@add more sensor types to sensor framework.
 - Pressure (10^-3 Pa)
 - distance (10^-6 m)
 - acceleration (10^-6 m/s^2)

ok deraadt@@ reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.31 2011/09/16 15:44:31 yuo Exp $	*/
d167 2
a168 1
struct sensor_task	*sensor_task_register(void *, void (*)(void *), int);
@


1.31
log
@apply following changes to sensor framework:
- change accuracy of SENSOR_FREQ from Hz to muHz
- add SENSOR_VOLTS_AC entry to userland programs

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.30 2010/04/21 19:40:59 deraadt Exp $	*/
d52 3
d78 3
@


1.30
log
@scale angle by 1000000 to permit min.sec accuracy
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.29 2010/04/21 04:07:11 deraadt Exp $	*/
d50 1
a50 1
	SENSOR_FREQ,			/* frequency (Hz) */
@


1.29
log
@Add the "angle" sensor, measured in degrees; from Luis Pinto
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.28 2010/04/20 20:49:35 deraadt Exp $	*/
d51 1
a51 1
	SENSOR_ANGLE,			/* degrees */
@


1.28
log
@Get rid of MAXSENSORDEVICES.  Gaps in sensordev lists are now handled
by returning ENXIO instead of ENOENT, to essentially indicate hotplug
sensor that has gone away.  Accessing beyond the end of the sensordev
list still returns ENOENT, so that you can see there are no further devices.
ok kettenis oga
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.27 2010/04/20 19:44:07 oga Exp $	*/
d51 1
d74 1
@


1.27
log
@Add "frequency" type for sensors. (and teach userland how to print that
type).  Measured in Hz.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.26 2010/04/15 04:57:28 yuo Exp $	*/
a121 2
#define MAXSENSORDEVICES 32

d150 1
a150 1
struct ksensordev	*sensordev_get(int);
d155 1
a155 1
struct ksensor		*sensor_find(int, enum sensor_type, int);
@


1.26
log
@add SENSOR_HUMIDITY to sensor framework to handle humidity values

ok kettenis@@ xsa@@ sobrado@@ krw@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.25 2009/08/12 13:21:49 kettenis Exp $	*/
d50 1
d72 1
@


1.25
log
@Since SENSORS_WATTS now is in muW, say so in the comment.
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.24 2007/06/24 05:34:35 dlg Exp $	*/
d49 1
d70 1
@


1.24
log
@rework sensor tasks to use the kernels generic workq rather than a special
kernel thread of its own. the api has changed (which will be fixed in the
manpage shortly) so all the users of sensor tasks that i can find have
been fixed too.

noone tested, so its going in to force people to run with it.
"put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.23 2007/03/22 16:55:31 deraadt Exp $	*/
d39 1
a39 1
	SENSOR_WATTS,			/* power */
@


1.23
log
@split userland & kernel struct sensor/sensordev so that the addition
of new fields in the future is less disruptive.  This is done similar
to how struct proc is handled for ps(1).  ok jmc (man page changes)
tested fkr simon, and more suggestions from millert
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.22 2007/02/23 22:55:40 deraadt Exp $	*/
d156 3
a158 2
int		sensor_task_register(void *, void (*)(void *), int);
void		sensor_task_unregister(void *);
@


1.22
log
@add missing copyright; Constantine
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.21 2006/12/27 13:04:29 mbalmer Exp $	*/
a70 1

d93 3
a95 1
/* Sensor data */
a96 1
	SLIST_ENTRY(sensor) list;	/* device-scope list */
a106 1
SLIST_HEAD(sensors_head, sensor);
d108 3
a110 1
/* Sensor device data */
a111 1
	SLIST_ENTRY(sensordev)	list;
a115 1
	struct sensors_head sensors_list;
d122 32
a153 9
/* struct sensordev */
void			 sensordev_install(struct sensordev *);
void			 sensordev_deinstall(struct sensordev *);
struct sensordev	*sensordev_get(int);

/* struct sensor */
void			 sensor_attach(struct sensordev *, struct sensor *);
void			 sensor_detach(struct sensordev *, struct sensor *);
struct sensor		*sensor_find(int, enum sensor_type, int);
@


1.21
log
@consistent naming of units, percentage -> percent.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.20 2006/12/23 17:40:39 deraadt Exp $	*/
d5 1
@


1.20
log
@new sensor api is two level, such that a device (ie. ipmi or lm0) has
devices hanging off it; written by Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.19 2006/11/29 20:00:22 mbalmer Exp $	*/
d64 1
a64 1
	"percentage",
@


1.19
log
@Reflect reality in a comment.
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.18 2006/07/03 21:17:37 kettenis Exp $	*/
d47 2
a48 1
	SENSOR_TIMEDELTA		/* system time error (nSec) */
d51 22
d95 2
a96 3
	SLIST_ENTRY(sensor) list;
	char desc[32];			/* sensor description */
	char device[16];		/* device name */
d101 1
a101 1
	int num;			/* sensor number */
d106 13
d122 9
a130 3
void		sensor_add(struct sensor *);
void		sensor_del(struct sensor *);
struct sensor	*sensor_get(int);
d132 1
@


1.18
log
@Get rid of rfact member of 'struct sensor'; pack the struct while we're there.

ok dlg@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.17 2006/04/25 03:14:19 deraadt Exp $	*/
d47 1
a47 1
	SENSOR_TIMEDELTA		/* system time error (mSec) */
@


1.17
log
@add a struct timeval to struct sensor.  any sensor which wishes the user
to know when it was last adjusted, can set a timestamp in here.  if tv_sec
is 0, the timestamp is invalid (maintaining the norm); ok dlg kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.17 2006/04/25 03:05:52 deraadt Exp $	*/
d73 1
a73 1
	int num;			/* sensor number */
d75 2
a77 3
	char desc[32];			/* sensor description */
	int64_t value;			/* current value */
	u_int rfact;			/* resistor factor */
d79 1
a82 1
	struct timeval tv;		/* sensor value last change time */
@


1.16
log
@add SENSOR_TIMEDELTA sensor; ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.15 2006/03/12 13:48:32 dlg Exp $	*/
d83 1
@


1.15
log
@sensors_head is only used in kern_sensors.c, so its unnecessay to declare
it in sensors.h.

from Constantine A. Murenin
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.14 2006/01/28 09:53:37 dlg Exp $	*/
d46 2
a47 1
	SENSOR_DRIVE			/* disk */
@


1.14
log
@get rid of the sensors globals. theyre were only used by sysctl for
locating and finding the correct sensor to spit out. instead provide a
a sensor_get function that wraps up the access to the vars. theyre now
safe inside kern_sensors.c.

theres also a touch of whitespace tweaking

ok grange@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.13 2006/01/19 17:08:40 grange Exp $	*/
a82 2

SLIST_HEAD(sensors_head, sensor);
@


1.13
log
@Replace SENSOR_ADD() macro with a pair of functions
sensor_add()/sensor_del() so that sensors can be attached
and detached dynamicaly.

ok kettenis@@ deraadt@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.12 2005/11/30 15:46:32 dlg Exp $	*/
a86 2
extern int _sensors_count;
extern struct sensors_head _sensors_list;
d88 3
a90 2
void	sensor_add(struct sensor *);
void	sensor_del(struct sensor *);
d92 2
a93 2
int	sensor_task_register(void *, void (*)(void *), int);
void	sensor_task_unregister(void *);
@


1.12
log
@add a sensor type for drive status and hook esm up with it.

ok marco@@ grange@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.11 2005/11/21 13:47:52 dlg Exp $	*/
d90 2
a91 4
#define SENSOR_ADD(s) do { \
	(s)->num = _sensors_count++;				\
	SLIST_INSERT_HEAD(&_sensors_list, (s), list);		\
} while (0)
@


1.11
log
@rename the sensor globals to names that are not obvious to avoid
collisions with local variable names someone might make. this has bitten
me twice now and caused me to lose about 4 hours scratching my head when
nsensors just magically corrupts and gets bigger. at least my ram isnt
screwed.

ok marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.10 2005/11/15 22:12:07 kettenis Exp $	*/
d45 2
a46 1
	SENSOR_LUX			/* illuminance (mulx) */
d48 11
@


1.10
log
@Add support for light sensors.
ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.9 2005/11/10 08:20:20 dlg Exp $	*/
d75 2
a76 2
extern int nsensors;
extern struct sensors_head sensors;
d79 2
a80 2
	(s)->num = nsensors++;				\
	SLIST_INSERT_HEAD(&sensors, (s), list);		\
@


1.9
log
@first go at a generic kthread for sensors to be run out of. its a bit
hairy at the moment, but its going into the tree so it can be worked on
and used.
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.8 2005/10/23 13:52:13 kettenis Exp $	*/
d44 2
a45 1
	SENSOR_PERCENT			/* percent */
@


1.8
log
@Document units.
ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.7 2005/08/05 03:07:41 dlg Exp $	*/
d81 4
@


1.7
log
@add a sensor type that can report percentage

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.6 2005/08/03 14:53:39 dlg Exp $	*/
d33 1
a33 1
	SENSOR_TEMP,			/* temperature */
d35 2
a36 2
	SENSOR_VOLTS_DC,		/* voltage */
	SENSOR_VOLTS_AC,		/* voltage (alternating-current) */
d39 1
a39 1
	SENSOR_AMPS,			/* current */
@


1.6
log
@extend the sensors framework to allow it to report the state of the
sensor, not just its value.

ok henning@@ marco@@ deraadt@@ beck@@ fixes and tweaks grange@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.5 2005/04/08 05:01:47 jolan Exp $	*/
d43 2
a44 1
	SENSOR_INTEGER			/* generic integer value */
@


1.5
log
@interger->integer
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.4 2004/02/10 19:53:34 grange Exp $	*/
d46 9
d64 1
d67 1
@


1.4
log
@Add flags field to the sensor structure and an only flag SENSOR_FINVALID
which allows to drop information from broken, unwired, disabled, etc
sensors.

ok hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.3 2004/02/07 18:20:22 grange Exp $	*/
d43 1
a43 1
	SENSOR_INTEGER			/* generic interger value */
@


1.3
log
@Add a few more sensors types like in NetBSD. Not used for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.2 2004/01/12 14:10:53 grange Exp $	*/
d55 2
@


1.2
log
@Move sensors externs to sys/sensors.h and introduce a macro
SENSOR_ADD to hide all operations with these externs.

ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sensors.h,v 1.1 2003/04/25 20:06:41 grange Exp $	*/
d4 1
a4 1
 * Copyright (c) 2003 Alexander Yurchenko <grange@@openbsd.org>
d35 9
a43 1
	SENSOR_VOLTS_DC			/* voltage */
@


1.1
log
@sysctl front-end for the hardware monitoring sensors. This adds
new node hw.sensors; information from the sensors can be obtained
via hw.sensors.n, where n is a sensor number. All values are read only
for now. Documentation and back-end drivers are comming.
Tested by henning@@ and millert@@. Four oks from henning@@ and one
from millert@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 10
@


1.1.2.1
log
@dummy message
@
text
@@


1.1.2.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a50 10
#ifdef _KERNEL
extern int nsensors;
extern struct sensors_head sensors;

#define SENSOR_ADD(s) do { \
	(s)->num = nsensors++;				\
	SLIST_INSERT_HEAD(&sensors, (s), list);		\
} while (0)
#endif	/* _KERNEL */

@


1.1.2.3
log
@Merge with the trunk
@
text
@d4 1
a4 1
 * Copyright (c) 2003, 2004 Alexander Yurchenko <grange@@openbsd.org>
d35 1
a35 9
	SENSOR_VOLTS_DC,		/* voltage */
	SENSOR_VOLTS_AC,		/* voltage (alternating-current) */
	SENSOR_OHMS,			/* resistance */
	SENSOR_WATTS,			/* power */
	SENSOR_AMPS,			/* current */
	SENSOR_WATTHOUR,		/* power capacity */
	SENSOR_AMPHOUR,			/* power capacity */
	SENSOR_INDICATOR,		/* boolean indicator */
	SENSOR_INTEGER			/* generic interger value */
a46 2
	int flags;			/* sensor flags */
#define SENSOR_FINVALID		0x0001	/* sensor is invalid */
@


