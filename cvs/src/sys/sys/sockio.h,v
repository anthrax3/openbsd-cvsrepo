head	1.69;
access;
symbols
	OPENBSD_6_1:1.69.0.2
	OPENBSD_6_1_BASE:1.69
	OPENBSD_6_0:1.66.0.2
	OPENBSD_6_0_BASE:1.66
	OPENBSD_5_9:1.62.0.2
	OPENBSD_5_9_BASE:1.62
	OPENBSD_5_8:1.59.0.4
	OPENBSD_5_8_BASE:1.59
	OPENBSD_5_7:1.57.0.2
	OPENBSD_5_7_BASE:1.57
	OPENBSD_5_6:1.55.0.4
	OPENBSD_5_6_BASE:1.55
	OPENBSD_5_5:1.53.0.4
	OPENBSD_5_5_BASE:1.53
	OPENBSD_5_4:1.50.0.4
	OPENBSD_5_4_BASE:1.50
	OPENBSD_5_3:1.50.0.2
	OPENBSD_5_3_BASE:1.50
	OPENBSD_5_2:1.49.0.4
	OPENBSD_5_2_BASE:1.49
	OPENBSD_5_1_BASE:1.49
	OPENBSD_5_1:1.49.0.2
	OPENBSD_5_0:1.48.0.6
	OPENBSD_5_0_BASE:1.48
	OPENBSD_4_9:1.48.0.4
	OPENBSD_4_9_BASE:1.48
	OPENBSD_4_8:1.48.0.2
	OPENBSD_4_8_BASE:1.48
	OPENBSD_4_7:1.46.0.2
	OPENBSD_4_7_BASE:1.46
	OPENBSD_4_6:1.45.0.4
	OPENBSD_4_6_BASE:1.45
	OPENBSD_4_5:1.43.0.2
	OPENBSD_4_5_BASE:1.43
	OPENBSD_4_4:1.40.0.2
	OPENBSD_4_4_BASE:1.40
	OPENBSD_4_3:1.39.0.4
	OPENBSD_4_3_BASE:1.39
	OPENBSD_4_2:1.39.0.2
	OPENBSD_4_2_BASE:1.39
	OPENBSD_4_1:1.38.0.2
	OPENBSD_4_1_BASE:1.38
	OPENBSD_4_0:1.37.0.2
	OPENBSD_4_0_BASE:1.37
	OPENBSD_3_9:1.36.0.2
	OPENBSD_3_9_BASE:1.36
	OPENBSD_3_8:1.35.0.2
	OPENBSD_3_8_BASE:1.35
	OPENBSD_3_7:1.32.0.2
	OPENBSD_3_7_BASE:1.32
	OPENBSD_3_6:1.27.0.2
	OPENBSD_3_6_BASE:1.27
	SMP_SYNC_A:1.25
	SMP_SYNC_B:1.25
	OPENBSD_3_5:1.24.0.2
	OPENBSD_3_5_BASE:1.24
	OPENBSD_3_4:1.22.0.2
	OPENBSD_3_4_BASE:1.22
	UBC_SYNC_A:1.21
	OPENBSD_3_3:1.21.0.2
	OPENBSD_3_3_BASE:1.21
	OPENBSD_3_2:1.20.0.6
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.20.0.4
	OPENBSD_3_1_BASE:1.20
	UBC_SYNC_B:1.20
	UBC:1.20.0.2
	UBC_BASE:1.20
	OPENBSD_3_0:1.19.0.4
	OPENBSD_3_0_BASE:1.19
	OPENBSD_2_9_BASE:1.19
	OPENBSD_2_9:1.19.0.2
	OPENBSD_2_8:1.16.0.4
	OPENBSD_2_8_BASE:1.16
	OPENBSD_2_7:1.16.0.2
	OPENBSD_2_7_BASE:1.16
	SMP:1.15.0.2
	SMP_BASE:1.15
	kame_19991208:1.10
	OPENBSD_2_6:1.9.0.4
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.69
date	2016.11.28.10.12.49;	author reyk;	state Exp;
branches;
next	1.68;
commitid	4A7fD4EjN6CCnZxc;

1.68
date	2016.09.02.10.01.36;	author goda;	state Exp;
branches;
next	1.67;
commitid	CnmnHsRybZkqp1q2;

1.67
date	2016.08.28.07.22.11;	author reyk;	state Exp;
branches;
next	1.66;
commitid	jIduHL9KU1lnm7G1;

1.66
date	2016.06.15.19.39.34;	author gerhard;	state Exp;
branches;
next	1.65;
commitid	qJ1QnDnimibODQ30;

1.65
date	2016.06.10.20.33.29;	author vgross;	state Exp;
branches;
next	1.64;
commitid	qJaxh4rw41tBg4CK;

1.64
date	2016.05.31.22.35.02;	author tedu;	state Exp;
branches;
next	1.63;
commitid	OkmEzswLKM1G4kox;

1.63
date	2016.03.02.00.00.16;	author dlg;	state Exp;
branches;
next	1.62;
commitid	7U01XYSlRSFgd0i5;

1.62
date	2015.10.24.10.52.05;	author reyk;	state Exp;
branches;
next	1.61;
commitid	PvSfHvj4AhI0uuuE;

1.61
date	2015.10.23.01.19.04;	author dlg;	state Exp;
branches;
next	1.60;
commitid	amrA8l73DaZf9wmS;

1.60
date	2015.09.11.13.02.28;	author stsp;	state Exp;
branches;
next	1.59;
commitid	6vhYvh5CxZAHMnsN;

1.59
date	2015.07.21.04.14.52;	author rzalamena;	state Exp;
branches;
next	1.58;
commitid	wNNENvsDp3ETDiDD;

1.58
date	2015.07.20.22.16.41;	author rzalamena;	state Exp;
branches;
next	1.57;
commitid	yaHvJbufOxtjWSFd;

1.57
date	2015.01.21.02.23.14;	author guenther;	state Exp;
branches;
next	1.56;
commitid	z0tt692wWLCZ7FbG;

1.56
date	2015.01.06.21.26.46;	author stsp;	state Exp;
branches;
next	1.55;
commitid	jH0HZyR3DaPVl7Rm;

1.55
date	2014.07.13.13.41.46;	author henning;	state Exp;
branches;
next	1.54;
commitid	vXU4AdU5668GvEvu;

1.54
date	2014.07.08.04.02.14;	author dlg;	state Exp;
branches;
next	1.53;
commitid	1jRrZP5Li2zmiVEq;

1.53
date	2013.10.13.10.10.04;	author reyk;	state Exp;
branches;
next	1.52;

1.52
date	2013.08.16.12.29.18;	author mpi;	state Exp;
branches;
next	1.51;

1.51
date	2013.08.15.09.18.37;	author mpi;	state Exp;
branches;
next	1.50;

1.50
date	2012.11.23.20.12.03;	author sthen;	state Exp;
branches;
next	1.49;

1.49
date	2011.11.26.23.38.18;	author haesbaert;	state Exp;
branches;
next	1.48;

1.48
date	2010.07.03.04.44.51;	author guenther;	state Exp;
branches;
next	1.47;

1.47
date	2010.06.26.19.49.54;	author claudio;	state Exp;
branches;
next	1.46;

1.46
date	2009.11.21.14.08.14;	author claudio;	state Exp;
branches;
next	1.45;

1.45
date	2009.06.05.00.05.22;	author claudio;	state Exp;
branches;
next	1.44;

1.44
date	2009.06.04.19.07.21;	author henning;	state Exp;
branches;
next	1.43;

1.43
date	2009.02.15.22.15.12;	author gollo;	state Exp;
branches;
next	1.42;

1.42
date	2008.12.12.22.07.33;	author claudio;	state Exp;
branches;
next	1.41;

1.41
date	2008.09.09.13.56.39;	author henning;	state Exp;
branches;
next	1.40;

1.40
date	2008.05.06.13.33.50;	author pyr;	state Exp;
branches;
next	1.39;

1.39
date	2007.06.14.18.31.50;	author reyk;	state Exp;
branches;
next	1.38;

1.38
date	2006.12.03.13.41.19;	author reyk;	state Exp;
branches;
next	1.37;

1.37
date	2006.06.02.19.53.12;	author mpf;	state Exp;
branches;
next	1.36;

1.36
date	2006.01.05.14.57.24;	author norby;	state Exp;
branches;
next	1.35;

1.35
date	2005.06.12.00.41.33;	author henning;	state Exp;
branches;
next	1.34;

1.34
date	2005.05.26.22.37.35;	author henning;	state Exp;
branches;
next	1.33;

1.33
date	2005.03.30.02.55.37;	author tedu;	state Exp;
branches;
next	1.32;

1.32
date	2005.01.14.11.49.01;	author henning;	state Exp;
branches;
next	1.31;

1.31
date	2004.12.14.13.41.01;	author mickey;	state Exp;
branches;
next	1.30;

1.30
date	2004.12.14.01.59.07;	author mickey;	state Exp;
branches;
next	1.29;

1.29
date	2004.10.11.10.13.49;	author henning;	state Exp;
branches;
next	1.28;

1.28
date	2004.09.20.17.51.07;	author miod;	state Exp;
branches;
next	1.27;

1.27
date	2004.06.26.07.00.58;	author alex;	state Exp;
branches;
next	1.26;

1.26
date	2004.06.25.18.24.23;	author pb;	state Exp;
branches;
next	1.25;

1.25
date	2004.05.29.17.54.45;	author jcs;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.08.09.09.03;	author markus;	state Exp;
branches;
next	1.23;

1.23
date	2003.12.03.13.27.36;	author markus;	state Exp;
branches;
next	1.22;

1.22
date	2003.06.02.23.28.21;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2002.12.09.10.11.52;	author markus;	state Exp;
branches;
next	1.20;

1.20
date	2001.12.15.08.40.56;	author jason;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2001.02.20.13.50.53;	author itojun;	state Exp;
branches;
next	1.18;

1.18
date	2000.12.31.00.14.59;	author angelos;	state Exp;
branches;
next	1.17;

1.17
date	2000.12.12.03.41.23;	author jason;	state Exp;
branches;
next	1.16;

1.16
date	2000.04.26.18.37.37;	author chris;	state Exp;
branches;
next	1.15;

1.15
date	2000.01.25.22.06.28;	author jason;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2000.01.08.05.40.39;	author angelos;	state Exp;
branches;
next	1.13;

1.13
date	99.12.27.04.15.34;	author angelos;	state Exp;
branches;
next	1.12;

1.12
date	99.12.26.09.18.21;	author angelos;	state Exp;
branches;
next	1.11;

1.11
date	99.12.26.09.12.46;	author angelos;	state Exp;
branches;
next	1.10;

1.10
date	99.12.08.06.50.24;	author itojun;	state Exp;
branches;
next	1.9;

1.9
date	99.03.19.02.46.55;	author jason;	state Exp;
branches;
next	1.8;

1.8
date	99.03.12.02.40.43;	author jason;	state Exp;
branches;
next	1.7;

1.7
date	99.03.05.21.10.55;	author jason;	state Exp;
branches;
next	1.6;

1.6
date	99.03.01.04.44.43;	author jason;	state Exp;
branches;
next	1.5;

1.5
date	99.02.26.17.01.33;	author jason;	state Exp;
branches;
next	1.4;

1.4
date	98.09.03.13.00.03;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	98.03.25.07.37.26;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.03.12.12.21;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.29;	author deraadt;	state Exp;
branches;
next	;

1.15.2.1
date	2001.05.14.22.45.04;	author niklas;	state Exp;
branches;
next	1.15.2.2;

1.15.2.2
date	2002.03.06.02.17.13;	author niklas;	state Exp;
branches;
next	1.15.2.3;

1.15.2.3
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.15.2.4;

1.15.2.4
date	2003.06.07.11.09.08;	author ho;	state Exp;
branches;
next	1.15.2.5;

1.15.2.5
date	2004.02.19.11.01.34;	author niklas;	state Exp;
branches;
next	1.15.2.6;

1.15.2.6
date	2004.06.05.23.13.10;	author niklas;	state Exp;
branches;
next	;

1.20.2.1
date	2003.05.19.22.32.36;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.69
log
@Rename "flowmax" to "maxflow" and give each switch(4) ioctl a
dedicated number.  Both changes for consistency.

OK rzalamena@@
@
text
@/*	$OpenBSD: sockio.h,v 1.68 2016/09/02 10:01:36 goda Exp $	*/
/*	$NetBSD: sockio.h,v 1.5 1995/08/23 00:40:47 thorpej Exp $	*/

/*-
 * Copyright (c) 1982, 1986, 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)sockio.h	8.1 (Berkeley) 3/28/94
 */

#ifndef	_SYS_SOCKIO_H_
#define	_SYS_SOCKIO_H_

#include <sys/ioccom.h>

/* Socket ioctl's. */
#define	SIOCSHIWAT	 _IOW('s',  0, int)		/* set high watermark */
#define	SIOCGHIWAT	 _IOR('s',  1, int)		/* get high watermark */
#define	SIOCSLOWAT	 _IOW('s',  2, int)		/* set low watermark */
#define	SIOCGLOWAT	 _IOR('s',  3, int)		/* get low watermark */
#define	SIOCATMARK	 _IOR('s',  7, int)		/* at oob mark? */
#define	SIOCSPGRP	 _IOW('s',  8, int)		/* set process group */
#define	SIOCGPGRP	 _IOR('s',  9, int)		/* get process group */

#define	SIOCSIFADDR	 _IOW('i', 12, struct ifreq)	/* set ifnet address */
#define	SIOCGIFADDR	_IOWR('i', 33, struct ifreq)	/* get ifnet address */
#define	SIOCSIFDSTADDR	 _IOW('i', 14, struct ifreq)	/* set p-p address */
#define	SIOCGIFDSTADDR	_IOWR('i', 34, struct ifreq)	/* get p-p address */
#define	SIOCSIFFLAGS	 _IOW('i', 16, struct ifreq)	/* set ifnet flags */
#define	SIOCGIFFLAGS	_IOWR('i', 17, struct ifreq)	/* get ifnet flags */
#define	SIOCGIFBRDADDR	_IOWR('i', 35, struct ifreq)	/* get broadcast addr */
#define	SIOCSIFBRDADDR	 _IOW('i', 19, struct ifreq)	/* set broadcast addr */
#define	SIOCGIFCONF	_IOWR('i', 36, struct ifconf)	/* get ifnet list */
#define	SIOCGIFNETMASK	_IOWR('i', 37, struct ifreq)	/* get net addr mask */
#define	SIOCSIFNETMASK	 _IOW('i', 22, struct ifreq)	/* set net addr mask */
#define	SIOCGIFMETRIC	_IOWR('i', 23, struct ifreq)	/* get IF metric */
#define	SIOCSIFMETRIC	 _IOW('i', 24, struct ifreq)	/* set IF metric */
#define	SIOCDIFADDR	 _IOW('i', 25, struct ifreq)	/* delete IF addr */
#define	SIOCAIFADDR	 _IOW('i', 26, struct ifaliasreq)/* add/chg IF alias */
#define	SIOCGIFDATA	_IOWR('i', 27, struct ifreq)	/* get if_data */
#define	SIOCSIFLLADDR	_IOW('i', 31, struct ifreq)	/* set link level addr */

/* KAME IPv6 */
/* SIOCAIFALIAS? */
#define SIOCALIFADDR	 _IOW('i', 28, struct if_laddrreq) /* add IF addr */
#define SIOCGLIFADDR	_IOWR('i', 29, struct if_laddrreq) /* get IF addr */
#define SIOCDLIFADDR	 _IOW('i', 30, struct if_laddrreq) /* delete IF addr */

#define	SIOCADDMULTI	 _IOW('i', 49, struct ifreq)	/* add m'cast addr */
#define	SIOCDELMULTI	 _IOW('i', 50, struct ifreq)	/* del m'cast addr */
#define	SIOCGETVIFCNT	_IOWR('u', 51, struct sioc_vif_req)/* vif pkt cnt */
#define	SIOCGETSGCNT	_IOWR('u', 52, struct sioc_sg_req) /* sg pkt cnt */

/* 53 and 54 used to be SIOC[SG]IFMEDIA with a 32 bit media word */
#define	SIOCSIFMEDIA	_IOWR('i', 55, struct ifreq)	/* set net media */
#define	SIOCGIFMEDIA	_IOWR('i', 56, struct ifmediareq) /* get net media */

#define SIOCSIFPHYADDR   _IOW('i', 70, struct ifaliasreq) /* set gif address */
#define	SIOCGIFPSRCADDR	_IOWR('i', 71, struct ifreq)	/* get gif psrc addr */
#define	SIOCGIFPDSTADDR	_IOWR('i', 72, struct ifreq)	/* get gif pdst addr */
#define	SIOCDIFPHYADDR	 _IOW('i', 73, struct ifreq)	/* delete gif addrs */
#define	SIOCSLIFPHYADDR	 _IOW('i', 74, struct if_laddrreq) /* set gif addrs */
#define	SIOCGLIFPHYADDR	_IOWR('i', 75, struct if_laddrreq) /* get gif addrs */

#define	SIOCBRDGADD	 _IOW('i', 60, struct ifbreq)	/* add bridge ifs */
#define	SIOCBRDGGSIFS	_IOWR('i', 60, struct ifbreq)	/* get span ifs */
#define	SIOCBRDGDEL	 _IOW('i', 61, struct ifbreq)	/* del bridge ifs */
#define	SIOCBRDGGIFFLGS	_IOWR('i', 62, struct ifbreq)	/* get brdg if flags */
#define	SIOCBRDGSIFFLGS	 _IOW('i', 63, struct ifbreq)	/* set brdg if flags */
#define	SIOCBRDGSCACHE	 _IOW('i', 64, struct ifbrparam)/* set cache size */
#define	SIOCBRDGGCACHE	_IOWR('i', 65, struct ifbrparam)/* get cache size */
#define	SIOCBRDGADDS	 _IOW('i', 65, struct ifbreq)	/* add span port */
#define	SIOCBRDGIFS	_IOWR('i', 66, struct ifbreq)	/* get member ifs */
#define	SIOCBRDGDELS	 _IOW('i', 66, struct ifbreq)	/* del span port */
#define	SIOCBRDGRTS	_IOWR('i', 67, struct ifbaconf)	/* get addresses */
#define	SIOCBRDGSADDR	_IOWR('i', 68, struct ifbareq)	/* set addr flags */
#define	SIOCBRDGSTO	 _IOW('i', 69, struct ifbrparam)/* cache timeout */
#define	SIOCBRDGGTO	_IOWR('i', 70, struct ifbrparam)/* cache timeout */
#define	SIOCBRDGDADDR	 _IOW('i', 71, struct ifbareq)	/* delete addr */
#define	SIOCBRDGFLUSH	 _IOW('i', 72, struct ifbreq)	/* flush addr cache */
#define	SIOCBRDGADDL	 _IOW('i', 73, struct ifbreq)	/* add local port */

#define SIOCBRDGARL	 _IOW('i', 77, struct ifbrlreq)	/* add bridge rule */
#define SIOCBRDGFRL	 _IOW('i', 78, struct ifbrlreq)	/* flush brdg rules */
#define SIOCBRDGGRL	_IOWR('i', 79, struct ifbrlconf)/* get bridge rules */
#define	SIOCBRDGGPRI	_IOWR('i', 80, struct ifbrparam)/* get priority */
#define	SIOCBRDGSPRI	 _IOW('i', 80, struct ifbrparam)/* set priority */
#define	SIOCBRDGGHT	_IOWR('i', 81, struct ifbrparam)/* get hello time */
#define	SIOCBRDGSHT	 _IOW('i', 81, struct ifbrparam)/* set hello time */
#define	SIOCBRDGGFD	_IOWR('i', 82, struct ifbrparam)/* get forward delay */
#define	SIOCBRDGSFD	 _IOW('i', 82, struct ifbrparam)/* set forward delay */
#define	SIOCBRDGGMA	_IOWR('i', 83, struct ifbrparam)/* get max age */
#define	SIOCBRDGSMA	 _IOW('i', 83, struct ifbrparam)/* set max age */
#define	SIOCBRDGSIFPRIO	 _IOW('i', 84, struct ifbreq)	/* set if priority */
#define	SIOCBRDGSIFCOST  _IOW('i', 85, struct ifbreq)	/* set if cost */

#define SIOCBRDGGPARAM  _IOWR('i', 88, struct ifbropreq)/* get brdg STP parms */
#define SIOCBRDGSTXHC    _IOW('i', 89, struct ifbrparam)/* set tx hold count */
#define SIOCBRDGSPROTO	 _IOW('i', 90, struct ifbrparam)/* set protocol */
#define SIOCBRDGS

#define	SIOCSWGDPID	_IOWR('i', 91, struct ifbrparam)/* set datapath id */
#define	SIOCSWSDPID	 _IOW('i', 92, struct ifbrparam)/* get datapath id */
#define	SIOCSWGMAXGROUP	_IOWR('i', 93, struct ifbrparam)/* get max groups */
#define	SIOCSWSMAXGROUP	 _IOW('i', 94, struct ifbrparam)/* set max groups */
#define	SIOCSWSPORTNO	_IOWR('i', 95, struct ifbreq)	/* set port number */
#define	SIOCSWGMAXFLOW	_IOWR('i', 96, struct ifbrparam)/* get max flow per table */
#define	SIOCSWSMAXFLOW	 _IOW('i', 97, struct ifbrparam)/* set max flow per table */

#define	SIOCSIFMTU	 _IOW('i', 127, struct ifreq)	/* set ifnet mtu */
#define	SIOCGIFMTU	_IOWR('i', 126, struct ifreq)	/* get ifnet mtu */
#define	SIOCSIFASYNCMAP  _IOW('i', 125, struct ifreq)	/* set ppp asyncmap */
#define	SIOCGIFASYNCMAP _IOWR('i', 124, struct ifreq)	/* get ppp asyncmap */

#define	SIOCIFCREATE	 _IOW('i', 122, struct ifreq)	/* create clone if */
#define	SIOCIFDESTROY	 _IOW('i', 121, struct ifreq)	/* destroy clone if */
#define	SIOCIFGCLONERS	_IOWR('i', 120, struct if_clonereq) /* get cloners */

#define	SIOCAIFGROUP	_IOW('i', 135, struct ifgroupreq) /* add an ifgroup */
#define	SIOCGIFGROUP   _IOWR('i', 136, struct ifgroupreq) /* get ifgroups */
#define	SIOCDIFGROUP    _IOW('i', 137, struct ifgroupreq) /* delete ifgroup */
#define	SIOCGIFGMEMB   _IOWR('i', 138, struct ifgroupreq) /* get members */
#define	SIOCGIFGATTR   _IOWR('i', 139, struct ifgroupreq) /* get ifgroup attribs */
#define	SIOCSIFGATTR   _IOW('i', 140, struct ifgroupreq) /* set ifgroup attribs */

#define	SIOCSIFDESCR	 _IOW('i', 128, struct ifreq)	/* set ifnet descr */
#define	SIOCGIFDESCR	_IOWR('i', 129, struct ifreq)	/* get ifnet descr */

#define	SIOCSIFRTLABEL	 _IOW('i', 130, struct ifreq)	/* set ifnet rtlabel */
#define	SIOCGIFRTLABEL	_IOWR('i', 131, struct ifreq)	/* set ifnet rtlabel */

#define	SIOCSIFTIMESLOT	 _IOW('i', 133, struct ifreq)	/* set ifnet timeslot */
#define	SIOCGIFTIMESLOT	_IOWR('i', 134, struct ifreq)	/* get ifnet timeslot */

#define	SIOCSETVLAN	 _IOW('i', 143, struct ifreq)	/* set vlan parent if */
#define	SIOCGETVLAN	_IOWR('i', 144, struct ifreq)	/* get vlan parent if */

#define	SIOCSSPPPPARAMS	 _IOW('i', 147, struct ifreq)	/* set pppoe params */
#define	SIOCGSPPPPARAMS	_IOWR('i', 148, struct ifreq)	/* get pppoe params */

#define SIOCSETLABEL	 _IOW('i', 153, struct ifreq)	/* set MPLS label */
#define SIOCGETLABEL	 _IOW('i', 154, struct ifreq)	/* get MPLS label */

#define SIOCSIFPRIORITY	 _IOW('i', 155, struct ifreq)	/* set if priority */
#define SIOCGIFPRIORITY	_IOWR('i', 156, struct ifreq)	/* get if priority */

#define	SIOCSIFXFLAGS	 _IOW('i', 157, struct ifreq)	/* set ifnet xflags */
#define	SIOCGIFXFLAGS	_IOWR('i', 158, struct ifreq)	/* get ifnet xflags */

#define	SIOCSIFRDOMAIN	 _IOW('i', 159, struct ifreq)	/* set ifnet VRF id */
#define	SIOCGIFRDOMAIN	_IOWR('i', 160, struct ifreq)	/* get ifnet VRF id */

#define	SIOCSLIFPHYRTABLE _IOW('i', 161, struct ifreq) /* set tunnel VRF id */
#define	SIOCGLIFPHYRTABLE _IOWR('i', 162, struct ifreq) /* get tunnel VRF id */

#define SIOCSETKALIVE	_IOW('i', 163, struct ifkalivereq)
#define SIOCGETKALIVE	_IOWR('i', 164, struct ifkalivereq)

#define	SIOCGIFHARDMTU	_IOWR('i', 165, struct ifreq)	/* get ifnet hardmtu */

#define SIOCSVNETID	_IOW('i', 166, struct ifreq)	/* set virt net id */
#define SIOCGVNETID	_IOWR('i', 167, struct ifreq)	/* get virt net id */

#define SIOCSLIFPHYTTL	_IOW('i', 168, struct ifreq)	/* set tunnel ttl */
#define SIOCGLIFPHYTTL	_IOWR('i', 169, struct ifreq)	/* get tunnel ttl */

#define SIOCGIFRXR	_IOW('i', 170, struct ifreq)
#define SIOCIFAFATTACH	_IOW('i', 171, struct if_afreq)	/* attach given af */
#define SIOCIFAFDETACH	_IOW('i', 172, struct if_afreq)	/* detach given af */

#define SIOCSETMPWCFG	_IOW('i', 173, struct ifreq) /* set mpw config */
#define SIOCGETMPWCFG	_IOWR('i', 174, struct ifreq) /* get mpw config */

#define SIOCDVNETID	_IOW('i', 175, struct ifreq)	/* del virt net id */

#define SIOCSIFPAIR	_IOW('i', 176, struct ifreq)	/* set paired if */ 
#define SIOCGIFPAIR	_IOWR('i', 177, struct ifreq)	/* get paired if */

#define SIOCSIFPARENT	_IOW('i', 178, struct if_parent) /* set parent if */
#define SIOCGIFPARENT	_IOWR('i', 179, struct if_parent) /* get parent if */
#define SIOCDIFPARENT	_IOW('i', 180, struct ifreq)	/* del parent if */

#define	SIOCSIFLLPRIO	_IOW('i', 181, struct ifreq)	/* set ifnet llprio */
#define	SIOCGIFLLPRIO	_IOWR('i', 182, struct ifreq)	/* get ifnet llprio */

#define	SIOCGUMBINFO	_IOWR('i', 190, struct ifreq)	/* get MBIM info */
#define	SIOCSUMBPARAM	 _IOW('i', 191, struct ifreq)	/* set MBIM param */
#define	SIOCGUMBPARAM	_IOWR('i', 192, struct ifreq)	/* get MBIM param */

#define	SIOCSVH		_IOWR('i', 245, struct ifreq)	/* set carp param */
#define	SIOCGVH		_IOWR('i', 246, struct ifreq)	/* get carp param */

#define	SIOCSETPFSYNC	_IOW('i', 247, struct ifreq)
#define	SIOCGETPFSYNC	_IOWR('i', 248, struct ifreq)

#define	SIOCSETPFLOW	_IOW('i', 253, struct ifreq)
#define	SIOCGETPFLOW	_IOWR('i', 254, struct ifreq)

#endif /* !_SYS_SOCKIO_H_ */
@


1.68
log
@Add switch(4) support to ifconfig

ok deraadt@@ yasuoka@@ reyk@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.67 2016/08/28 07:22:11 reyk Exp $	*/
a125 4
/* Following ioctls for switch(4) has compatibility to bridge(4) */
#define	SIOCSWSFLOWMAX	SIOCBRDGSCACHE		/* set max flow per table */
#define	SIOCSWGFLOWMAX	SIOCBRDGGCACHE		/* get max flow per table */

d127 6
a132 4
#define	SIOCSWSDPID	 _IOW('i', 91, struct ifbrparam)/* get datapath id */
#define	SIOCSWGMAXGROUP	_IOWR('i', 92, struct ifbrparam)/* get max groups */
#define	SIOCSWSMAXGROUP	 _IOW('i', 92, struct ifbrparam)/* set max groups */
#define	SIOCSWSPORTNO	_IOWR('i', 93, struct ifbreq)	/* set port number */
@


1.67
log
@Remove obsolete gre(4) ioctls GRESADDRS, GRESADDRD, GREGADDRS,
GREGADDRD, GRESPROTO, and GREGPROTO.  They have been replaced by
generic ioctls some time ago (eg. the "ifconfig gre0 tunnel") and
there is no need to keep the old ones around.  They are neither used
in base nor in ports.

OK sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.66 2016/06/15 19:39:34 gerhard Exp $	*/
d105 1
d125 10
@


1.66
log
@Add umb(4) - a driver for the Mobile Broadband Interface Model (MBIM)

The umb(4) driver provides support for USB MBIM devices.
Those devices establish connections via celluar networks such as
GPRS, UMTS, and LTE.

ok mpi@@ sthen@@
additional feedback from deraadt@@ jmc@@ stsp@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.65 2016/06/10 20:33:29 vgross Exp $	*/
a123 7

#define GRESADDRS        _IOW('i', 101, struct ifreq)
#define GRESADDRD        _IOW('i', 102, struct ifreq)   
#define GREGADDRS       _IOWR('i', 103, struct ifreq)
#define GREGADDRD       _IOWR('i', 104, struct ifreq)
#define GRESPROTO        _IOW('i', 105, struct ifreq)
#define GREGPROTO       _IOWR('i', 106, struct ifreq)
@


1.65
log
@Add the "llprio" field to struct ifnet, and the corresponding keyword
to ifconfig.

"llprio" allows one to set the priority of packets that do not go through
pf(4), as the case is for arp(4) or bpf(4).

ok sthen@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.64 2016/05/31 22:35:02 tedu Exp $	*/
d207 4
@


1.64
log
@remove OSIOCGIFCONF. it's dead. ok deraadt guenther mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.63 2016/03/02 00:00:16 dlg Exp $	*/
d204 3
@


1.63
log
@provide generic ioctls for managing an interfaces parent

in the future this will subsume the individual vlandev, carpdev,
pppoedev, foodev options for things like vlan, carp, pppoe, etc.

inspired by vnetid

ok mpi@@ jmatthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.62 2015/10/24 10:52:05 reyk Exp $	*/
a56 1
#define	OSIOCGIFCONF	_IOWR('i', 20, struct ifconf)	/* get ifnet list */
@


1.62
log
@Add pair(4), a vether-based virtual Ethernet driver to interconnect
rdomains and bridges on the local system.  This can be used to route
through local rdomains, to create L2 devices (like trunks) between
them, and many other things.

Discussed with many, with input from mpi@@
OK sthen@@ phessler@@ yasuoka@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.61 2015/10/23 01:19:04 dlg Exp $	*/
d201 4
@


1.61
log
@tweak the vnetid so it can be optional and therefore cleared/deleted.

the abstract vnetid is promoted to a uin32_t, and adds a SIOCDVNETID
ioctl so it can be cleared.

this is all because i set an assignment on implementing a virtual
network interface and the students got confused when vnetid 0 didnt
show up in ifconfig output.

the vnetid in the vxlan(4) protocol is optional, but the current
code confuses 0 with no vnetid being set. this makes it clear.

ok reyk@@ who also simplified my diff
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.60 2015/09/11 13:02:28 stsp Exp $	*/
d198 3
@


1.60
log
@Make room for media types of the future. Extend the ifmedia word to 64 bits.
This changes numbers of the SIOCSIFMEDIA and SIOCGIFMEDIA ioctls and
grows struct ifmediareq.

Old ifconfig and dhclient binaries can still assign addresses, however
the 'media' subcommand stops working. Recompiling ifconfig and dhclient
with new headers before a reboot should not be necessary unless in very
special circumstances where non-default media settings must be used to
get link and console access is not available.

There may be some MD fallout but that will be cleared up later.

ok deraadt miod
with help and suggestions from several sharks attending l2k15
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.59 2015/07/21 04:14:52 rzalamena Exp $	*/
d196 2
@


1.59
log
@Fix ioctl number conflict and sort ioctl numbers.

ok mpi@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.58 2015/07/20 22:16:41 rzalamena Exp $	*/
d79 3
a81 2
#define	SIOCSIFMEDIA	_IOWR('i', 53, struct ifreq)	/* set net media */
#define	SIOCGIFMEDIA	_IOWR('i', 54, struct ifmediareq) /* get net media */
@


1.58
log
@Implemented MPLS pseudowire (mpw(4)) to be used with VPLS and VPWS.

ok mpi@@, claudio@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.57 2015/01/21 02:23:14 guenther Exp $	*/
d189 6
a194 2
#define SIOCSETMPWCFG	_IOW('i', 170, struct ifreq) /* set mpw config */
#define SIOCGETMPWCFG	_IOWR('i', 171, struct ifreq) /* get mpw config */
a203 4

#define	SIOCGIFRXR	_IOW('i', 170, struct ifreq)
#define	SIOCIFAFATTACH	_IOW('i', 171, struct if_afreq)	/* attach given af */
#define	SIOCIFAFDETACH	_IOW('i', 172, struct if_afreq)	/* detach given af */
@


1.57
log
@Delete option COMPAT_43: support for pre-sa_len binaries has been obsolete
for a couple decades.  Keep the OSIOCGIFCONF ioctl to support COMPAT_LINUX
but move the rest of the Linux-specific ioctl() handling into linux_socket.c
This lets struct osockaddr finally move from sys/socket.h to protocols/talkd.h

ok krw@@ deraadt@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.56 2015/01/06 21:26:46 stsp Exp $	*/
d188 3
@


1.56
log
@Remove the NOINET6 interface flag, a left-over from the times when IPv6
was enabled by default. Add AFATTACH/AFDETACH ioctls which enable/disable
an address family for an interface (currently used for IPv6 only).

New kernel needs new ifconfig for IPv6 configuration (address assignment
still works with old ifconfig making this easy to cross over).

Committing on behalf of henning@@ who is currently lebensmittelvergiftet.
ok stsp, benno, mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.55 2014/07/13 13:41:46 henning Exp $	*/
a49 1
#define	OSIOCGIFADDR	_IOWR('i', 13, struct ifreq)	/* get ifnet address */
a51 1
#define	OSIOCGIFDSTADDR	_IOWR('i', 15, struct ifreq)	/* get p-p address */
a54 1
#define	OSIOCGIFBRDADDR	_IOWR('i', 18, struct ifreq)	/* get broadcast addr */
a58 1
#define	OSIOCGIFNETMASK	_IOWR('i', 21, struct ifreq)	/* get net addr mask */
@


1.55
log
@someone send dlg a keyboard with a tab key please
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.53 2013/10/13 10:10:04 reyk Exp $	*/
d203 2
@


1.54
log
@introduce the if_rxr api. it is intended to pull the rx ring accounting
out of the mbuf layer, and break the assumption that an interface will
only have a single ring per mbuf cluster size.

mpi@@ is ok with moving this forward
@
text
@d202 1
a202 1
#define SIOCGIFRXR	_IOW('i', 170, struct ifreq)
@


1.53
log
@Import vxlan(4), the virtual extensible local area network tunnel
interface.  VXLAN is a UDP-based tunnelling protocol for overlaying
virtualized layer 2 networks over layer 3 networks. The implementation
is based on draft-mahalingam-dutt-dcops-vxlan-04 and has been tested
with other implementations in the wild.

put it in deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.52 2013/08/16 12:29:18 mpi Exp $	*/
d201 2
@


1.52
log
@Replace the misleading SIOC{G,S}IFGENERIC ioctls by SIOCG{G,S}PPPPARAMS.

This is another ABI break but no port rely on them as verified by naddy@@.

ok claudio@@, mikeb@@, henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.51 2013/08/15 09:18:37 mpi Exp $	*/
d186 6
@


1.51
log
@Stop defining SIOC{S,G}ETVLAN as SIOC{S,G}IFGENERIC because they
are two differents ioctls manipulating structures of a different
size.

In particular this prevents vlan(4) to handle pppoe(4)-specific
ioctls and vice versa, that could lead to smashing the stack of
the caller.

Issue originally found by David Hill when compiling ifconfig
with clang.

Note that this is an ABI break but we're riding a biger dragon
right now.

ok mikeb@@, kettenis@@, sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.50 2012/11/23 20:12:03 sthen Exp $	*/
a85 3
#define	SIOCSIFGENERIC	 _IOW('i', 57, struct ifreq)	/* generic IF set op */
#define	SIOCGIFGENERIC	_IOWR('i', 58, struct ifreq)	/* generic IF get op */

d163 3
@


1.50
log
@Add SIOCGIFHARDMTU to allow retrieving the driver's maximum supported MTU
looks fine reyk@@ ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.49 2011/11/26 23:38:18 haesbaert Exp $	*/
d164 2
a165 1
/* 143 and 144 (SIOC[GS]VLANPRIO) were removed, do not reuse it before 5.1 */
@


1.49
log
@Tie the 802.1p (CoS) value in vlan(4) with the new prio scheme in pf.

When transmitting through vlan(4), it will now use the prio value in
pf packet header. When receiving, we save the incoming Cos in the same
place, this gives us the hability to preserve the CoS value across two
different vlan interfaces.

This kills the SIOC[GS]VLANPRIO ioctls and removes the corresponding
buttons from ifconfig(8).

ok henning@@ claudio@@ mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.48 2010/07/03 04:44:51 guenther Exp $	*/
d183 2
@


1.48
log
@Fix the naming of interfaces and variables for rdomains and rtables
and make it possible to bind sockets (including listening sockets!)
to rtables and not just rdomains.  This changes the name of the
system calls, socket option, and ioctl.  After building with this
you should remove the files /usr/share/man/cat2/[gs]etrdomain.0.

Since this removes the existing [gs]etrdomain() system calls, the
libc major is bumped.

Written by claudio@@, criticized^Wcritiqued by me
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.47 2010/06/26 19:49:54 claudio Exp $	*/
d164 1
a164 2
#define SIOCSETVLANPRIO	 _IOW('i', 143, struct ifreq)	/* set VLAN priority */
#define SIOCGETVLANPRIO	_IOWR('i', 144, struct ifreq)	/* get VLAN priority */
@


1.47
log
@Implement a simple keepalive mechanism in gre(4) that is compatible with
the one used by Cisco. It sends a return gre packet inside a gre packet
to the other side and expects it to return.
OK deraadt, reyk additional testing by sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.46 2009/11/21 14:08:14 claudio Exp $	*/
d176 2
a177 2
#define	SIOCSIFRTABLEID	 _IOW('i', 159, struct ifreq)	/* set ifnet VRF id */
#define	SIOCGIFRTABLEID	_IOWR('i', 160, struct ifreq)	/* get ifnet VRF id */
d179 2
a180 2
#define	SIOCSLIFPHYRTABLEID _IOW('i', 161, struct ifreq) /* set tunnel VRF id */
#define	SIOCGLIFPHYRTABLEID _IOWR('i', 162, struct ifreq) /* get tunnel id */
@


1.46
log
@Add a way to bind the tunnel endpoint of a gif/gre interface into a
different rdomain than the default one. This allows to do MPLS VPNs
without the MPLS madness.  OK deraadt@@, henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.45 2009/06/05 00:05:22 claudio Exp $	*/
d181 3
@


1.45
log
@Initial support for routing domains. This allows to bind interfaces to
alternate routing table and separate them from other interfaces in distinct
routing tables. The same network can now be used in any doamin at the same
time without causing conflicts.
This diff is mostly mechanical and adds the necessary rdomain checks accross
net and netinet. L2 and IPv4 are mostly covered still missing pf and IPv6.
input and tested by jsg@@, phessler@@ and reyk@@. "put it in" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.44 2009/06/04 19:07:21 henning Exp $	*/
d178 3
@


1.44
log
@allow IPvShit to be turned off completely per-interface.
ifconfig em0 -inet6
deletes all v6 addresses including link-local and prevents new ones from
being added.
ifconfig em0 inet6 <addr>
re-enables v6, brings the link local back and adds optional <addr>
ok theo reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.43 2009/02/15 22:15:12 gollo Exp $	*/
d175 3
@


1.43
log
@move pflows ioctl to new numbers. Fixes a problem with wi(4)
spotted by mcbride@@

Theo@@: "This diff is correct. Please commit it right away"
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.42 2008/12/12 22:07:33 claudio Exp $	*/
d172 3
@


1.42
log
@Introduce a if_priority that will be added to RTP_STATIC when routes are
added without an expilict priority. This allows to specify less prefered
interfaces that will only take over if the primary interface loses link.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.41 2008/09/09 13:56:39 henning Exp $	*/
d179 2
a180 2
#define	SIOCSETPFLOW	_IOW('i', 249, struct ifreq)
#define	SIOCGETPFLOW	_IOWR('i', 250, struct ifreq)
@


1.41
log
@welcome pflow(4), a netflow v5 compatible flow export interface.
flows export data gathered from pf states.
initial implementation by Joerg Goltermann <jg@@osn.de>, guidance and many
changes by me. 'put it in' theo
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.40 2008/05/06 13:33:50 pyr Exp $	*/
d169 3
@


1.40
log
@bring in the mpe interface - for ``MPLS Provider Edge'' - this is a work
in progress and some bits need to be cleaned up but will be in-tree for
convenience.

ok claudio@@, norby@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.39 2007/06/14 18:31:50 reyk Exp $	*/
d175 3
@


1.39
log
@Add a new "rtlabel" option to ifconfig. It allows to specify a route label
which will be used for new interface routes. For example,
	ifconfig em0 10.1.1.0 255.255.255.0 rtlabel RING_1
will set the new interface address and attach the route label RING_1 to
the corresponding route.

manpage bits from jmc@@
ok claudio@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.38 2006/12/03 13:41:19 reyk Exp $	*/
d166 3
@


1.38
log
@Add Rapid Spanning Tree Protocol support (802.1d-2004) based on work
by Andrew Thompson (thompsa@@freebsd.org). The local changes include
adoption to our bridge code, reduced stack usage and many other bits.
If stp is enabled, RSTP will now be used by default.

Thanks for help from Andrew.

This code has been in snaps for while now, commit encouraged by deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.37 2006/06/02 19:53:12 mpf Exp $	*/
d157 3
@


1.37
log
@Introduce attributes to interface groups.
As a first user, move the global carp(4) demotion counter
into the interface group. Thus we have the possibility
to define which carp interfaces are demoted together.

Put the demotion counter into the reserved field of the carp header.
With this, we can have carp act smarter if multiple errors occur.
It now always takes over other carp peers, that are advertising
with a higher demote count.  As a side effect, we can also have
group failovers without the need of running in preempt mode.
The protocol change does not break compability with older
implementations.

Collaborative work with mcbride@@

OK mcbride@@, henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.36 2006/01/05 14:57:24 norby Exp $	*/
d125 6
a130 1
#define	SIOCBRDGSIFCOST	 _IOW('i', 85, struct ifbreq)	/* set if cost */
a131 1
#define	SIOCBRDGS
@


1.36
log
@Make it possible to set a default vlan priority for vlan interfaces.

ok claudio@@ brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.35 2005/06/12 00:41:33 henning Exp $	*/
d148 2
@


1.35
log
@add SIOCGIFGMEMB ioctl, returns a list of all interfaces who are member of
the given group, markus ok
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.34 2005/05/26 22:37:35 henning Exp $	*/
d154 3
@


1.34
log
@remove last races of SIOCADDRT and SIOCDELRT, the 4.3BSD routing table ioctls
theo ok
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.33 2005/03/30 02:55:37 tedu Exp $	*/
d147 1
@


1.33
log
@add lladdr command to ifconfig to set MAC address.  diffs from freebsd via
Kyunghwan KIM (prs 2117 and 2118) and Fredrik Widlund.  ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a47 3

#define	SIOCADDRT	 _IOW('r', 10, struct ortentry)	/* add route */
#define	SIOCDELRT	 _IOW('r', 11, struct ortentry)	/* delete route */
@


1.32
log
@remove old ifgroups ioctls
the old ifgroups haven't been in use ever really, and the new
implementation is 3 months old today. theo ok (3 months ago)
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.31 2004/12/14 13:41:01 mickey Exp $	*/
d73 1
@


1.31
log
@move the ioctls w/ all the other ifaces; mcbride@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.30 2004/12/14 01:59:07 mickey Exp $	*/
a144 5

/* XXX henning removes this around 20050115 or is a slacker*/
#define	OSIOCAIFGROUP	_IOW('i', 130, struct oifgroupreq) /* add an ifgroup */
#define	OSIOCGIFGROUP   _IOWR('i', 131, struct oifgroupreq) /* get ifgroups */
#define	OSIOCDIFGROUP    _IOW('i', 132, struct oifgroupreq) /* delete ifgroup */
@


1.30
log
@move ioctls together w/ all other ifaces; mcbride@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.29 2004/10/11 10:13:49 henning Exp $	*/
d163 3
@


1.29
log
@ifgroups reqrite
there is now a TAILQ with all interface groups as members, and
in struct ofnet there is only a pointer to the group structure stored
and not its name.
mostly hacked at c2k4 and somewhere over the atlantic ocean
ok markus mcbride
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.28 2004/09/20 17:51:07 miod Exp $	*/
d160 3
@


1.28
log
@addres -> address
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.27 2004/06/26 07:00:58 alex Exp $	*/
d146 8
a153 3
#define	SIOCAIFGROUP	_IOW('i', 130, struct ifgroupreq) /* add an ifgroup */
#define	SIOCGIFGROUP   _IOWR('i', 131, struct ifgroupreq) /* get ifgroups */
#define	SIOCDIFGROUP    _IOW('i', 132, struct ifgroupreq) /* delete ifgroup */
@


1.27
log
@Add ioctl call SIOCSIFTIMESLOT/SIOCGIDTIMESLOT.
ok mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.26 2004/06/25 18:24:23 pb Exp $	*/
d91 1
a91 1
#define SIOCSIFPHYADDR   _IOW('i', 70, struct ifaliasreq) /* set gif addres */
@


1.26
log
@introduce "interface groups"

by "ifconfig fxp0 group foobar" "ifconfig xl0 group foobar"
these two interfaces are in one group.
Every interface has its if-family as default group.

idea/design from henning@@, based on some work/disucssion from Joris Vink.

henning@@, mcbride@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.25 2004/05/29 17:54:45 jcs Exp $	*/
d152 3
@


1.25
log
@introduce SIOCSIFDESCR and SIOCGIFDESCR to maintain interface
descriptions, configurable with ifconfig

help from various, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.24 2003/12/08 09:09:03 markus Exp $	*/
d145 4
@


1.24
log
@add IOCIFGCLONERS; ifconfig -C; from netbsd; ok henning, deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.23 2003/12/03 13:27:36 markus Exp $	*/
d145 3
@


1.23
log
@support for network interface "cloning", e.g. gif(4) via ifconfig(8)
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.22 2003/06/02 23:28:21 millert Exp $	*/
d144 1
@


1.22
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.21 2002/12/09 10:11:52 markus Exp $	*/
d141 4
@


1.21
log
@allow setting of ifcost with brconfig.  enables selection of preferred
port/path to root bridge among several LANs.   unlike ifpriority, which
allows you to select designated port if serveral interfaces belong
to the same LAN;  ok jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.20 2001/12/15 08:40:56 jason Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.20
log
@add support for creating span ports so that one can snoop a bridge
from another interface/machine/network.
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.19 2001/02/20 13:50:53 itojun Exp $	*/
d131 1
@


1.20.2.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a130 1
#define	SIOCBRDGSIFCOST	 _IOW('i', 85, struct ifbreq)	/* set if cost */
@


1.19
log
@provide SIOC[SG]LIFPHYADDR, which greatly simplify userland manipulation.
sync with kame.  old ioctls are kept but not really recommended.
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.18 2000/12/31 00:14:59 angelos Exp $	*/
d103 1
d109 1
d111 1
@


1.18
log
@ioctl's no longer needed.
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.17 2000/12/12 03:41:23 jason Exp $	*/
d98 3
@


1.17
log
@Add support for 802.1D spanning tree protocol.
NOTE: this requires recompiling brconfig with updated include files.
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.16 2000/04/26 18:37:37 chris Exp $	*/
a111 5

#define SIOCGENCSA	_IOWR('i', 73, struct ifsa)	/* get enc sa */
#define SIOCSENCDSTSA	 _IOW('i', 74, struct ifsa)	/* set enc sa */
#define SIOCSENCSRCSA	 _IOW('i', 75, struct ifsa)	/* set enc sa */
#define SIOCSENCCLEARSA	 _IOW('i', 76, struct ifsa)	/* set enc sa */
@


1.16
log
@SIOCSIFGENERIC/SIOCGIFGENERIC
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.15 2000/01/25 22:06:28 jason Exp $	*/
d99 2
a100 2
#define	SIOCBRDGADD	_IOWR('i', 60, struct ifbreq)	/* add bridge ifs */
#define	SIOCBRDGDEL	_IOWR('i', 61, struct ifbreq)	/* del bridge ifs */
d102 3
a104 3
#define	SIOCBRDGSIFFLGS	_IOWR('i', 63, struct ifbreq)	/* set brdg if flags */
#define	SIOCBRDGSCACHE	_IOWR('i', 64, struct ifbcachereq) /* set cache size */
#define	SIOCBRDGGCACHE	_IOWR('i', 65, struct ifbcachereq) /* get cache size */
d108 4
a111 4
#define	SIOCBRDGSTO	_IOWR('i', 69, struct ifbcachetoreq) /* cache timeout */
#define	SIOCBRDGGTO	_IOWR('i', 70, struct ifbcachetoreq) /* cache timeout */
#define	SIOCBRDGDADDR	_IOWR('i', 71, struct ifbareq)	/* delete addr */
#define	SIOCBRDGFLUSH	_IOWR('i', 72, struct ifbreq)	/* flush addr cache */
d114 3
a116 3
#define SIOCSENCDSTSA	_IOW('i', 74, struct ifsa)	/* set enc sa */
#define SIOCSENCSRCSA	_IOW('i', 75, struct ifsa)	/* set enc sa */
#define SIOCSENCCLEARSA	_IOW('i', 76, struct ifsa)	/* set enc sa */
d118 2
a119 2
#define SIOCBRDGARL	_IOWR('i', 77, struct ifbrlreq)	/* add bridge rule */
#define SIOCBRDGFRL	_IOWR('i', 78, struct ifbrlreq)	/* flush brdg rules */
d121 13
a133 3

#define GRESADDRS       _IOW('i', 101, struct ifreq)
#define GRESADDRD       _IOW('i', 102, struct ifreq)   
d136 1
a136 1
#define GRESPROTO       _IOW('i' , 105, struct ifreq)
@


1.15
log
@add ethernet MAC filtering capability
also includes split of bridgeintr() with some optimizations for quicker
frame handling
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.14 2000/01/08 05:40:39 angelos Exp $	*/
d91 3
@


1.15.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.19 2001/02/20 13:50:53 itojun Exp $	*/
a91 3
#define	SIOCSIFGENERIC	 _IOW('i', 57, struct ifreq)	/* generic IF set op */
#define	SIOCGIFGENERIC	_IOWR('i', 58, struct ifreq)	/* generic IF get op */

a94 3
#define	SIOCDIFPHYADDR	 _IOW('i', 73, struct ifreq)	/* delete gif addrs */
#define	SIOCSLIFPHYADDR	 _IOW('i', 74, struct if_laddrreq) /* set gif addrs */
#define	SIOCGLIFPHYADDR	_IOWR('i', 75, struct if_laddrreq) /* get gif addrs */
d96 2
a97 2
#define	SIOCBRDGADD	 _IOW('i', 60, struct ifbreq)	/* add bridge ifs */
#define	SIOCBRDGDEL	 _IOW('i', 61, struct ifbreq)	/* del bridge ifs */
d99 3
a101 3
#define	SIOCBRDGSIFFLGS	 _IOW('i', 63, struct ifbreq)	/* set brdg if flags */
#define	SIOCBRDGSCACHE	 _IOW('i', 64, struct ifbrparam)/* set cache size */
#define	SIOCBRDGGCACHE	_IOWR('i', 65, struct ifbrparam)/* get cache size */
d105 9
a113 4
#define	SIOCBRDGSTO	 _IOW('i', 69, struct ifbrparam)/* cache timeout */
#define	SIOCBRDGGTO	_IOWR('i', 70, struct ifbrparam)/* cache timeout */
#define	SIOCBRDGDADDR	 _IOW('i', 71, struct ifbareq)	/* delete addr */
#define	SIOCBRDGFLUSH	 _IOW('i', 72, struct ifbreq)	/* flush addr cache */
d115 2
a116 2
#define SIOCBRDGARL	 _IOW('i', 77, struct ifbrlreq)	/* add bridge rule */
#define SIOCBRDGFRL	 _IOW('i', 78, struct ifbrlreq)	/* flush brdg rules */
d118 3
a120 13
#define	SIOCBRDGGPRI	_IOWR('i', 80, struct ifbrparam)/* get priority */
#define	SIOCBRDGSPRI	 _IOW('i', 80, struct ifbrparam)/* set priority */
#define	SIOCBRDGGHT	_IOWR('i', 81, struct ifbrparam)/* get hello time */
#define	SIOCBRDGSHT	 _IOW('i', 81, struct ifbrparam)/* set hello time */
#define	SIOCBRDGGFD	_IOWR('i', 82, struct ifbrparam)/* get forward delay */
#define	SIOCBRDGSFD	 _IOW('i', 82, struct ifbrparam)/* set forward delay */
#define	SIOCBRDGGMA	_IOWR('i', 83, struct ifbrparam)/* get max age */
#define	SIOCBRDGSMA	 _IOW('i', 83, struct ifbrparam)/* set max age */
#define	SIOCBRDGSIFPRIO	 _IOW('i', 84, struct ifbreq)	/* set if priority */

#define	SIOCBRDGS
#define GRESADDRS        _IOW('i', 101, struct ifreq)
#define GRESADDRD        _IOW('i', 102, struct ifreq)   
d123 1
a123 1
#define GRESPROTO        _IOW('i', 105, struct ifreq)
@


1.15.2.2
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a102 1
#define	SIOCBRDGGSIFS	_IOWR('i', 60, struct ifbreq)	/* get span ifs */
a107 1
#define	SIOCBRDGADDS	 _IOW('i', 65, struct ifbreq)	/* add span port */
a108 1
#define	SIOCBRDGDELS	 _IOW('i', 66, struct ifbreq)	/* del span port */
@


1.15.2.3
log
@Sync the SMP branch with 3.3
@
text
@a130 1
#define	SIOCBRDGSIFCOST	 _IOW('i', 85, struct ifbreq)	/* set if cost */
@


1.15.2.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.15.2.3 2003/03/28 00:41:30 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.15.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a140 5

#define	SIOCIFCREATE	 _IOW('i', 122, struct ifreq)	/* create clone if */
#define	SIOCIFDESTROY	 _IOW('i', 121, struct ifreq)	/* destroy clone if */
#define	SIOCIFGCLONERS	_IOWR('i', 120, struct if_clonereq) /* get cloners */

@


1.15.2.6
log
@Merge with the trunk
@
text
@a145 3
#define	SIOCSIFDESCR	 _IOW('i', 128, struct ifreq)	/* set ifnet descr */
#define	SIOCGIFDESCR	_IOWR('i', 129, struct ifreq)	/* get ifnet descr */

@


1.14
log
@Forgot to commit this (GRE ioctls)
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.13 1999/12/27 04:15:34 angelos Exp $	*/
d114 4
@


1.13
log
@Some more enc ioctls.
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.12 1999/12/26 09:18:21 angelos Exp $	*/
d114 7
@


1.12
log
@Rename enc ioctls to something less ambiguous
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.11 1999/12/26 09:12:46 angelos Exp $	*/
d111 3
a113 1
#define SIOCSENCSA	_IOW('i', 74, struct ifsa)	/* set enc sa */
@


1.11
log
@Add ioctls for enc bridge.
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.10 1999/12/08 06:50:24 itojun Exp $	*/
d110 2
a111 2
#define SIOCGIFSA	_IOWR('i', 73, struct ifsa)	/* get enc sa */
#define SIOCSIFSA	_IOW('i', 74, struct ifsa)	/* set enc sa */
@


1.10
log
@bring in KAME IPv6 code, dated 19991208.
replaces NRL IPv6 layer.  reuses NRL pcb layer.  no IPsec-on-v6 support.
see sys/netinet6/{TODO,IMPLEMENTATION} for more details.

GENERIC configuration should work fine as before.  GENERIC.v6 works fine
as well, but you'll need KAME userland tools to play with IPv6 (will be
bringed into soon).
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.9 1999/03/19 02:46:55 jason Exp $	*/
d110 3
a116 1

@


1.9
log
@Add the ability to mark an interface as "non-learning"
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.8 1999/03/12 02:40:43 jason Exp $	*/
d78 6
d91 4
@


1.8
log
@big overhaul:
o SNAP encapsulated IP filtering
o static address cache entries
o address deletion from cache
o dynamic & full cache flush
o filter packets based on each interface, not on the bridge as a whole
o KNF nits
o allow addition of ~IFF_UP interfaces
o man page & user level fixes to match the above
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.7 1999/03/05 21:10:55 jason Exp $	*/
d88 2
@


1.7
log
@Make address cache expiration actually work and provide a knob
for adjusting the timeout.
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.6 1999/03/01 04:44:43 jason Exp $	*/
d95 2
@


1.6
log
@completely (almost) revamped ioctl's:
o new ioctls for getting/setting cache size (default == 100)
o changed SIOCBRDGRT -> SIOCBRDGRTS
o changed SIOCBRDGIDX -> SIOCBRDGIFS
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.5 1999/02/26 17:01:33 jason Exp $	*/
d92 3
@


1.5
log
@Ethernet bridge/IP firewall driver.
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.4 1998/09/03 13:00:03 jason Exp $	*/
d88 4
a91 2
#define	SIOCBRDGIDX	_IOWR('i', 62, struct ifbreq)	/* get ifs by index */
#define	SIOCBRDGRT	_IOWR('i', 63, struct ifbrtreq)	/* get rts by index */
@


1.4
log
@Missed from if_media: add SIOC{G,S}IFMEDIA
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.3 1998/03/25 07:37:26 deraadt Exp $	*/
d85 5
@


1.3
log
@add SIOCGIFDATA; fetches ifdata structure attached to each interface
@
text
@d1 1
a1 1
/*	$OpenBSD: sockio.h,v 1.2 1996/03/03 12:12:21 niklas Exp $	*/
d82 3
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
