head	1.5;
access;
symbols
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.42
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.38
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.40
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.32
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.36
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.34
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.30
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.5
date	2006.05.28.16.52.34;	author mk;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.28.16.49.47;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.28.02.10.55;	author henning;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.28.01.33.50;	author mk;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.30.08.11.27;	author grange;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.13.09;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Actually remove the device id from events.
@
text
@/*	$OpenBSD: hotplug.h,v 1.4 2006/05/28 16:49:47 henning Exp $	*/
/*
 * Copyright (c) 2004 Alexander Yurchenko <grange@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _SYS_HOTPLUG_H_
#define _SYS_HOTPLUG_H_

/*
 * Public interface for enqueuing and dequeueing device
 * attachment and detachment notifications.
 */

#define HOTPLUG_DEVAT		0x01	/* device attached	*/
#define HOTPLUG_DEVDT		0x02	/* device detached	*/

struct hotplug_event {
	int		he_type;	/* event type		*/
	enum devclass	he_devclass;	/* device class		*/
	char		he_devname[16];	/* device name		*/
};

#ifdef _KERNEL
void	hotplug_device_attach(enum devclass, char *);
void	hotplug_device_detach(enum devclass, char *);
#endif

#endif	/* _SYS_HOTPLUG_H_ */
@


1.4
log
@unbrek tree by syncing protoypes to hotplug.c
@
text
@d1 1
a1 1
/*	$OpenBSD: hotplug.h,v 1.3 2006/05/28 02:10:55 henning Exp $	*/
a32 1
	int		he_devid;	/* device id		*/
@


1.3
log
@new field at end of struct, discussed with theo
@
text
@d1 1
a1 1
/*	$OpenBSD: hotplug.h,v 1.2 2006/05/28 01:33:50 mk Exp $	*/
d37 2
a38 2
void	hotplug_device_attach(enum devclass, char *, int);
void	hotplug_device_detach(enum devclass, char *, int);
@


1.2
log
@Include device id in hotplug events.  This will be used by ntpd to check
sensors on attach/detach.  hotplugd changes following in a minute.

ok henning.
@
text
@d1 1
a1 1
/*	$OpenBSD: hotplug.h,v 1.1 2004/05/30 08:11:27 grange Exp $	*/
a29 1
	int		he_devid;	/* device id		*/
d33 1
@


1.1
log
@Devices hot plugging support.
The hotplug pseudo-device passes device attachment and detachment events
to userland.  When a device attaches or detaches, the corresponding event
is queued.  The events can then be obtained from the queue through the
read(2) call on the /dev/hotplug device file. Each event consists of
event type (attach/detach), device class (DV_*) and device name (sd1 e.g.).

We have hotplug pseudo-device on alpha, amd64, i386, macppc and sparc64.
Since it was tested only on i386 other archs has it commented out
in GENERIC until tested.

The idea liked peter@@ tedu@@ drahn@@ millert@@ marco@@ henning@@.
Ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d30 1
d37 2
a38 2
void	hotplug_device_attach(enum devclass, char *);
void	hotplug_device_detach(enum devclass, char *);
@


1.1.2.1
log
@Merge with the trunk
@
text
@@

