head	1.40;
access;
symbols
	OPENBSD_6_0:1.39.0.10
	OPENBSD_6_0_BASE:1.39
	OPENBSD_5_9:1.39.0.6
	OPENBSD_5_9_BASE:1.39
	OPENBSD_5_8:1.39.0.8
	OPENBSD_5_8_BASE:1.39
	OPENBSD_5_7:1.39.0.2
	OPENBSD_5_7_BASE:1.39
	OPENBSD_5_6:1.39.0.4
	OPENBSD_5_6_BASE:1.39
	OPENBSD_5_5:1.34.0.8
	OPENBSD_5_5_BASE:1.34
	OPENBSD_5_4:1.34.0.4
	OPENBSD_5_4_BASE:1.34
	OPENBSD_5_3:1.34.0.2
	OPENBSD_5_3_BASE:1.34
	OPENBSD_5_2:1.33.0.2
	OPENBSD_5_2_BASE:1.33
	OPENBSD_5_1_BASE:1.32
	OPENBSD_5_1:1.32.0.2
	OPENBSD_5_0:1.31.0.4
	OPENBSD_5_0_BASE:1.31
	OPENBSD_4_9:1.31.0.2
	OPENBSD_4_9_BASE:1.31
	OPENBSD_4_8:1.30.0.2
	OPENBSD_4_8_BASE:1.30
	OPENBSD_4_7:1.28.0.4
	OPENBSD_4_7_BASE:1.28
	OPENBSD_4_6:1.28.0.6
	OPENBSD_4_6_BASE:1.28
	OPENBSD_4_5:1.28.0.2
	OPENBSD_4_5_BASE:1.28
	OPENBSD_4_4:1.26.0.4
	OPENBSD_4_4_BASE:1.26
	OPENBSD_4_3:1.26.0.2
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.25.0.2
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.24.0.2
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.23.0.2
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.22.0.2
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.18.0.2
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.13.0.6
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.4
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.2
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.8
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.6
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.7.0.4
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.22
	OPENBSD_2_8:1.5.0.20
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.18
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.16
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.14
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.12
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.10
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.8
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.6
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.40
date	2017.01.06.14.22.30;	author kettenis;	state Exp;
branches;
next	1.39;
commitid	TGguVAbZIYtwXAsH;

1.39
date	2014.04.18.11.51.17;	author guenther;	state Exp;
branches;
next	1.38;

1.38
date	2014.03.19.05.11.06;	author guenther;	state Exp;
branches;
next	1.37;

1.37
date	2014.03.15.21.59.56;	author djm;	state Exp;
branches;
next	1.36;

1.36
date	2014.03.13.04.21.35;	author dlg;	state Exp;
branches;
next	1.35;

1.35
date	2014.03.11.19.45.28;	author guenther;	state Exp;
branches;
next	1.34;

1.34
date	2012.08.14.20.11.37;	author matthew;	state Exp;
branches;
next	1.33;

1.33
date	2012.07.05.01.33.30;	author guenther;	state Exp;
branches;
next	1.32;

1.32
date	2012.01.03.16.56.58;	author kettenis;	state Exp;
branches;
next	1.31;

1.31
date	2010.10.01.04.51.49;	author guenther;	state Exp;
branches;
next	1.30;

1.30
date	2010.07.01.03.22.12;	author jsg;	state Exp;
branches;
next	1.29;

1.29
date	2010.04.30.20.09.35;	author kettenis;	state Exp;
branches;
next	1.28;

1.28
date	2009.01.14.21.26.48;	author guenther;	state Exp;
branches;
next	1.27;

1.27
date	2008.12.21.09.59.24;	author ragge;	state Exp;
branches;
next	1.26;

1.26
date	2007.09.18.19.55.16;	author otto;	state Exp;
branches;
next	1.25;

1.25
date	2007.06.26.10.30.05;	author tom;	state Exp;
branches;
next	1.24;

1.24
date	2006.12.23.15.00.14;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.17.16.36.43;	author cloder;	state Exp;
branches;
next	1.22;

1.22
date	2005.12.15.17.48.32;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2005.12.14.18.28.40;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.19.19.05.02;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2005.11.15.15.46.41;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2005.05.27.21.28.12;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2005.05.27.20.41.45;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2005.05.24.22.28.02;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2005.05.19.18.32.51;	author hshoexer;	state Exp;
branches;
next	1.14;

1.14
date	2005.05.19.02.00.51;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2004.01.28.03.33.29;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2004.01.27.01.39.43;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.10.26.16.59.30;	author avsm;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.24.01.27.07;	author avsm;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.23.28.20;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.12.28.18.04.49;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.07.21.33.03;	author millert;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2001.08.07.19.13.23;	author art;	state Exp;
branches;
next	1.5;

1.5
date	96.09.27.17.34.44;	author maja;	state Exp;
branches
	1.5.16.1;
next	1.4;

1.4
date	96.04.21.22.31.30;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.03.24.17.00.37;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.03.03.12.11.23;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.25;	author deraadt;	state Exp;
branches;
next	;

1.5.16.1
date	2001.10.31.03.30.30;	author nate;	state Exp;
branches;
next	1.5.16.2;

1.5.16.2
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.5.16.3;

1.5.16.3
date	2003.06.07.11.09.07;	author ho;	state Exp;
branches;
next	1.5.16.4;

1.5.16.4
date	2004.02.19.11.01.32;	author niklas;	state Exp;
branches;
next	;

1.7.4.1
date	2003.05.19.22.32.19;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.40
log
@Add C11 support.

ok millert@@
@
text
@/*	$OpenBSD: cdefs.h,v 1.39 2014/04/18 11:51:17 guenther Exp $	*/
/*	$NetBSD: cdefs.h,v 1.16 1996/04/03 20:46:39 christos Exp $	*/

/*
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Berkeley Software Design, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)cdefs.h	8.7 (Berkeley) 1/21/94
 */

#ifndef	_SYS_CDEFS_H_
#define	_SYS_CDEFS_H_

#include <machine/cdefs.h>

/*
 * Macro to test if we're using a specific version of gcc or later.
 */
#ifdef __GNUC__
#define __GNUC_PREREQ__(ma, mi) \
	((__GNUC__ > (ma)) || (__GNUC__ == (ma) && __GNUC_MINOR__ >= (mi)))
#else
#define __GNUC_PREREQ__(ma, mi) 0
#endif

/*
 * The __CONCAT macro is used to concatenate parts of symbol names, e.g.
 * with "#define OLD(foo) __CONCAT(old,foo)", OLD(foo) produces oldfoo.
 * The __CONCAT macro is a bit tricky -- make sure you don't put spaces
 * in between its arguments.  Do not use __CONCAT on double-quoted strings,
 * such as those from the __STRING macro: to concatenate strings just put
 * them next to each other.
 */
#if defined(__STDC__) || defined(__cplusplus)
#define	__P(protos)	protos		/* full-blown ANSI C */
#define	__CONCAT(x,y)	x ## y
#define	__STRING(x)	#x

#define	__const		const		/* define reserved names to standard */
#define	__signed	signed
#define	__volatile	volatile
#if defined(__cplusplus) || defined(__PCC__)
#define	__inline	inline		/* convert to C++ keyword */
#else
#if !defined(__GNUC__)
#define	__inline			/* delete GCC keyword */
#endif /* !__GNUC__ */
#endif /* !__cplusplus */

#else	/* !(__STDC__ || __cplusplus) */
#define	__P(protos)	()		/* traditional C preprocessor */
#define	__CONCAT(x,y)	x/**/y
#define	__STRING(x)	"x"

#if !defined(__GNUC__)
#define	__const				/* delete pseudo-ANSI C keywords */
#define	__inline
#define	__signed
#define	__volatile
#endif	/* !__GNUC__ */
#endif	/* !(__STDC__ || __cplusplus) */

/*
 * GCC1 and some versions of GCC2 declare dead (non-returning) and
 * pure (no side effects) functions using "volatile" and "const";
 * unfortunately, these then cause warnings under "-ansi -pedantic".
 * GCC >= 2.5 uses the __attribute__((attrs)) style.  All of these
 * work for GNU C++ (modulo a slight glitch in the C++ grammar in
 * the distribution version of 2.5.5).
 */

#if !__GNUC_PREREQ__(2, 5) && !defined(__PCC__)
#define	__attribute__(x)	/* delete __attribute__ if non-gcc or gcc1 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define	__dead		__volatile
#define	__pure		__const
#endif
#elif !defined(__STRICT_ANSI__)
#define __dead		__attribute__((__noreturn__))
#define __pure		__attribute__((__const__))
#endif

#if __GNUC_PREREQ__(2, 7)
#define	__unused	__attribute__((__unused__))
#else
#define	__unused	/* delete */
#endif

#if __GNUC_PREREQ__(3, 1)
#define	__used		__attribute__((__used__))
#else
#define	__used		__unused	/* suppress -Wunused warnings */
#endif

#if __GNUC_PREREQ__(3,4)
# define __warn_unused_result	__attribute__((__warn_unused_result__))
#else
# define __warn_unused_result	/* delete */
#endif

#if __GNUC_PREREQ__(3,3) && !defined(__clang__)
# define __bounded(args)	__attribute__ ((__bounded__ args ))
#else
# define __bounded(args)	/* delete */
#endif

/*
 * __returns_twice makes the compiler not assume the function
 * only returns once.  This affects registerisation of variables:
 * even local variables need to be in memory across such a call.
 * Example: setjmp()
 */
#if __GNUC_PREREQ__(4, 1)
#define __returns_twice	__attribute__((returns_twice))
#else
#define __returns_twice
#endif

/*
 * __only_inline makes the compiler only use this function definition
 * for inlining; references that can't be inlined will be left as
 * external references instead of generating a local copy.  The
 * matching library should include a simple extern definition for
 * the function to handle those references.  c.f. ctype.h
 */
#ifdef __GNUC__
#  if __GNUC_PREREQ__(4, 2)
#define __only_inline	extern __inline __attribute__((__gnu_inline__))
#  else
#define __only_inline	extern __inline
#  endif
#else
#define __only_inline	static __inline
#endif

/*
 * GNU C version 2.96 adds explicit branch prediction so that
 * the CPU back-end can hint the processor and also so that
 * code blocks can be reordered such that the predicted path
 * sees a more linear flow, thus improving cache behavior, etc.
 *
 * The following two macros provide us with a way to utilize this
 * compiler feature.  Use __predict_true() if you expect the expression
 * to evaluate to true, and __predict_false() if you expect the
 * expression to evaluate to false.
 *
 * A few notes about usage:
 *
 *	* Generally, __predict_false() error condition checks (unless
 *	  you have some _strong_ reason to do otherwise, in which case
 *	  document it), and/or __predict_true() `no-error' condition
 *	  checks, assuming you want to optimize for the no-error case.
 *
 *	* Other than that, if you don't know the likelihood of a test
 *	  succeeding from empirical or other `hard' evidence, don't
 *	  make predictions.
 *
 *	* These are meant to be used in places that are run `a lot'.
 *	  It is wasteful to make predictions in code that is run
 *	  seldomly (e.g. at subsystem initialization time) as the
 *	  basic block reordering that this affects can often generate
 *	  larger code.
 */
#if __GNUC_PREREQ__(2, 96)
#define __predict_true(exp)	__builtin_expect(((exp) != 0), 1)
#define __predict_false(exp)	__builtin_expect(((exp) != 0), 0)
#else
#define __predict_true(exp)	((exp) != 0)
#define __predict_false(exp)	((exp) != 0)
#endif

/* Delete pseudo-keywords wherever they are not available or needed. */
#ifndef __dead
#define	__dead
#define	__pure
#endif

/*
 * The __packed macro indicates that a variable or structure members
 * should have the smallest possible alignment, despite any host CPU
 * alignment requirements.
 *
 * The __aligned(x) macro specifies the minimum alignment of a
 * variable or structure.
 *
 * These macros together are useful for describing the layout and
 * alignment of messages exchanged with hardware or other systems.
 */

#if __GNUC_PREREQ__(2, 7) || defined(__PCC__)
#define	__packed	__attribute__((__packed__))
#define	__aligned(x)	__attribute__((__aligned__(x)))
#endif

#if !__GNUC_PREREQ__(2, 8)
#define	__extension__
#endif

#if __GNUC_PREREQ__(2, 8) || defined(__PCC__)
#define __statement(x)	__extension__(x)
#else
#define __statement(x)	(x)
#endif

#if __GNUC_PREREQ__(3, 0)
#define	__malloc	__attribute__((__malloc__))
#else
#define	__malloc
#endif

#if defined(__cplusplus)
#define	__BEGIN_EXTERN_C	extern "C" {
#define	__END_EXTERN_C		}
#else
#define	__BEGIN_EXTERN_C
#define	__END_EXTERN_C
#endif

#if __GNUC_PREREQ__(4, 0)
#define	__dso_public	__attribute__((__visibility__("default")))
#define	__dso_hidden	__attribute__((__visibility__("hidden")))
#define	__BEGIN_PUBLIC_DECLS \
	_Pragma("GCC visibility push(default)") __BEGIN_EXTERN_C
#define	__END_PUBLIC_DECLS	__END_EXTERN_C _Pragma("GCC visibility pop")
#define	__BEGIN_HIDDEN_DECLS \
	_Pragma("GCC visibility push(hidden)") __BEGIN_EXTERN_C
#define	__END_HIDDEN_DECLS	__END_EXTERN_C _Pragma("GCC visibility pop")
#else
#define	__dso_public
#define	__dso_hidden
#define	__BEGIN_PUBLIC_DECLS	__BEGIN_EXTERN_C
#define	__END_PUBLIC_DECLS	__END_EXTERN_C
#define	__BEGIN_HIDDEN_DECLS	__BEGIN_EXTERN_C
#define	__END_HIDDEN_DECLS	__END_EXTERN_C
#endif

#define	__BEGIN_DECLS	__BEGIN_EXTERN_C
#define	__END_DECLS	__END_EXTERN_C

/*
 * "The nice thing about standards is that there are so many to choose from."
 * There are a number of "feature test macros" specified by (different)
 * standards that determine which interfaces and types the header files
 * should expose.
 *
 * Because of inconsistencies in these macros, we define our own
 * set in the private name space that end in _VISIBLE.  These are
 * always defined and so headers can test their values easily.
 * Things can get tricky when multiple feature macros are defined.
 * We try to take the union of all the features requested.
 *
 * The following macros are guaranteed to have a value after cdefs.h
 * has been included:
 *	__POSIX_VISIBLE
 *	__XPG_VISIBLE
 *	__ISO_C_VISIBLE
 *	__BSD_VISIBLE
 */

/*
 * X/Open Portability Guides and Single Unix Specifications.
 * _XOPEN_SOURCE				XPG3
 * _XOPEN_SOURCE && _XOPEN_VERSION = 4		XPG4
 * _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED = 1	XPG4v2
 * _XOPEN_SOURCE == 500				XPG5
 * _XOPEN_SOURCE == 520				XPG5v2
 * _XOPEN_SOURCE == 600				POSIX 1003.1-2001 with XSI
 * _XOPEN_SOURCE == 700				POSIX 1003.1-2008 with XSI
 *
 * The XPG spec implies a specific value for _POSIX_C_SOURCE.
 */
#ifdef _XOPEN_SOURCE
# if (_XOPEN_SOURCE - 0 >= 700)
#  define __XPG_VISIBLE		700
#  undef _POSIX_C_SOURCE
#  define _POSIX_C_SOURCE	200809L
# elif (_XOPEN_SOURCE - 0 >= 600)
#  define __XPG_VISIBLE		600
#  undef _POSIX_C_SOURCE
#  define _POSIX_C_SOURCE	200112L
# elif (_XOPEN_SOURCE - 0 >= 520)
#  define __XPG_VISIBLE		520
#  undef _POSIX_C_SOURCE
#  define _POSIX_C_SOURCE	199506L
# elif (_XOPEN_SOURCE - 0 >= 500)
#  define __XPG_VISIBLE		500
#  undef _POSIX_C_SOURCE
#  define _POSIX_C_SOURCE	199506L
# elif (_XOPEN_SOURCE_EXTENDED - 0 == 1)
#  define __XPG_VISIBLE		420
# elif (_XOPEN_VERSION - 0 >= 4)
#  define __XPG_VISIBLE		400
# else
#  define __XPG_VISIBLE		300
# endif
#endif

/*
 * POSIX macros, these checks must follow the XOPEN ones above.
 *
 * _POSIX_SOURCE == 1		1003.1-1988 (superseded by _POSIX_C_SOURCE)
 * _POSIX_C_SOURCE == 1		1003.1-1990
 * _POSIX_C_SOURCE == 2		1003.2-1992
 * _POSIX_C_SOURCE == 199309L	1003.1b-1993
 * _POSIX_C_SOURCE == 199506L   1003.1c-1995, 1003.1i-1995,
 *				and the omnibus ISO/IEC 9945-1:1996
 * _POSIX_C_SOURCE == 200112L   1003.1-2001
 * _POSIX_C_SOURCE == 200809L   1003.1-2008
 *
 * The POSIX spec implies a specific value for __ISO_C_VISIBLE, though
 * this may be overridden by the _ISOC99_SOURCE macro later.
 */
#ifdef _POSIX_C_SOURCE
# if (_POSIX_C_SOURCE - 0 >= 200809)
#  define __POSIX_VISIBLE	200809
#  define __ISO_C_VISIBLE	1999
# elif (_POSIX_C_SOURCE - 0 >= 200112)
#  define __POSIX_VISIBLE	200112
#  define __ISO_C_VISIBLE	1999
# elif (_POSIX_C_SOURCE - 0 >= 199506)
#  define __POSIX_VISIBLE	199506
#  define __ISO_C_VISIBLE	1990
# elif (_POSIX_C_SOURCE - 0 >= 199309)
#  define __POSIX_VISIBLE	199309
#  define __ISO_C_VISIBLE	1990
# elif (_POSIX_C_SOURCE - 0 >= 2)
#  define __POSIX_VISIBLE	199209
#  define __ISO_C_VISIBLE	1990
# else
#  define __POSIX_VISIBLE	199009
#  define __ISO_C_VISIBLE	1990
# endif
#elif defined(_POSIX_SOURCE)
# define __POSIX_VISIBLE	198808
#  define __ISO_C_VISIBLE	0
#endif

/*
 * _ANSI_SOURCE means to expose ANSI C89 interfaces only.
 * If the user defines it in addition to one of the POSIX or XOPEN
 * macros, assume the POSIX/XOPEN macro(s) should take precedence.
 */
#if defined(_ANSI_SOURCE) && !defined(__POSIX_VISIBLE) && \
    !defined(__XPG_VISIBLE)
# define __POSIX_VISIBLE	0
# define __XPG_VISIBLE		0
# define __ISO_C_VISIBLE	1990
#endif

/*
 * _ISOC99_SOURCE, _ISOC11_SOURCE and __STDC_VERSION__ override any of
 * the other macros since they are non-exclusive.
 */
#if defined(_ISOC99_SOURCE) || \
    (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901) || \
    (defined(__cplusplus) && __cplusplus >= 201103)
# undef __ISO_C_VISIBLE
# define __ISO_C_VISIBLE	1999
#endif
#if defined(_ISOC11_SOURCE) || \
    (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112)
# undef __ISO_C_VISIBLE
# define __ISO_C_VISIBLE	2011
#endif

/*
 * Finally deal with BSD-specific interfaces that are not covered
 * by any standards.  We expose these when none of the POSIX or XPG
 * macros is defined or if the user explicitly asks for them.
 */
#if !defined(_BSD_SOURCE) && \
   (defined(_ANSI_SOURCE) || defined(__XPG_VISIBLE) || defined(__POSIX_VISIBLE))
# define __BSD_VISIBLE		0
#endif

/*
 * Default values.
 */
#ifndef __XPG_VISIBLE
# define __XPG_VISIBLE		700
#endif
#ifndef __POSIX_VISIBLE
# define __POSIX_VISIBLE	200809
#endif
#ifndef __ISO_C_VISIBLE
# define __ISO_C_VISIBLE	1999
#endif
#ifndef __BSD_VISIBLE
# define __BSD_VISIBLE		1
#endif

#endif /* !_SYS_CDEFS_H_ */
@


1.39
log
@Have each thread keeps its own (counted!) reference to the process's ucreds
to avoid possible use-after-free references when swapping ids in threaded
processes.  "Do I have the right creds?" checks are always made with the
threads creds.

Inspired by FreeBSD and NetBSD
"right time" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.38 2014/03/19 05:11:06 guenther Exp $	*/
d378 2
a379 2
 * _ISOC99_SOURCE and __STDC_VERSION__ override any of the other macros since
 * they are non-exclusive.
d386 5
@


1.38
log
@It's been a quarter century: pre-ANSI C is dead
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.37 2014/03/15 21:59:56 djm Exp $	*/
d264 2
a265 2
#define	__BEGIN_DECLS	__BEGIN_PUBLIC_DECLS
#define	__END_DECLS	__END_PUBLIC_DECLS
@


1.37
log
@
add a __bounded() define as a shortcut for out bounds-checking attributes
that turns itself off when not compiling with gcc

add __warn_unused_result as a shortcut to the __warn_unused_result__
attribute

ok martynas@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.36 2014/03/13 04:21:35 dlg Exp $	*/
a87 13

/*
 * In non-ANSI C environments, new programs will want ANSI-only C keywords
 * deleted from the program and old programs will want them left alone.
 * Programs using the ANSI C keywords const, inline etc. as normal
 * identifiers should define -DNO_ANSI_KEYWORDS.
 */
#ifndef	NO_ANSI_KEYWORDS
#define	const		__const		/* convert ANSI C keywords */
#define	inline		__inline
#define	signed		__signed
#define	volatile	__volatile
#endif /* !NO_ANSI_KEYWORDS */
@


1.36
log
@bring __unaligned(x) in.

guenther wanted some comments describing their use which i think
ive failed miserably at but we can all help fix it in the tree.

from netbsd (which is where we got __packed)
definitely ok miod@@
ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.35 2014/03/11 19:45:28 guenther Exp $	*/
d133 12
@


1.35
log
@lint is gone, and the 'lint' conditional was never in the implementation
namespace, so stop changing behavior when it's #defined

ok beck@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.34 2012/08/14 20:11:37 matthew Exp $	*/
d206 12
d220 1
@


1.34
log
@Add framework support for controlling symbol visibility in shared
objects, inspired by NetBSD.

Discussed with kurt, kettenis, and millert.
ok kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.33 2012/07/05 01:33:30 guenther Exp $	*/
d72 1
a72 1
#if !defined(__GNUC__) && !defined(lint)
d74 1
a74 1
#endif /* !__GNUC__ && !lint */
d82 1
a82 1
#if !defined(__GNUC__) && !defined(lint)
d87 1
a87 1
#endif	/* !__GNUC__ && !lint */
a116 2
#elif defined(lint)
#define __dead		/* NORETURN */
a207 2
#elif defined(lint)
#define	__packed
a215 2
#elif defined(lint)
#define __statement(x)	(0)
@


1.33
log
@Fix a recommendation about concatenation of strings

ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.32 2012/01/03 16:56:58 kettenis Exp $	*/
a42 8
#if defined(__cplusplus)
#define	__BEGIN_DECLS	extern "C" {
#define	__END_DECLS	}
#else
#define	__BEGIN_DECLS
#define	__END_DECLS
#endif

d231 29
@


1.32
log
@C++11 is based on C99, so make sure __ISO_C_VISIBLE gets set to 1999 if the
value of __cplusplus indicates C++11 support is turned on by the compiler.

ok guenther@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.31 2010/10/01 04:51:49 guenther Exp $	*/
d65 3
a67 2
 * in between its arguments.  __CONCAT can also concatenate double-quoted
 * strings produced by the __STRING macro, but this only works with ANSI C.
@


1.31
log
@Add __only_inline, for use in headers like <ctype.h> for defining copies
of functions that can only by used by the compiler for inlining.
Also, document __returns_twice, a particularly black piece of magic.

ok deraadt@@, kettenis@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.30 2010/07/01 03:22:12 jsg Exp $	*/
d353 3
a355 1
#if defined(_ISOC99_SOURCE) || (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901)
@


1.30
log
@mark acpi_savecpu with the gcc returns_twice attribute as suggested
by deraadt so the stack will be sane during suspend/resume with gcc4.
Noticed on i386 due to the lack of general purpose registers compared
to amd64.

ok deraadt@@ mlarkin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.29 2010/04/30 20:09:35 kettenis Exp $	*/
d144 6
d154 17
@


1.29
log
@Add __unused and __used macros that expand to appropriate __attribute__
expressions depending on the GCC version in use.  Use __unused to supress
warnings from GCC's -Wunused options, and use __used to prevent code from
being optimized away.  From NetBSD.

ok tedu@@, marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.28 2009/01/14 21:26:48 guenther Exp $	*/
d142 6
@


1.28
log
@Recognize the features defines for POSIX 1003.1-2008, giving new values
for __POSIX_VISIBLE and __XPG_VISIBLE.  ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.27 2008/12/21 09:59:24 ragge Exp $	*/
d130 12
@


1.27
log
@Teach the header files not to bail out if pcc is used instead of gcc.
Ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.26 2007/09/18 19:55:16 otto Exp $	*/
d226 1
d231 5
a235 1
# if (_XOPEN_SOURCE - 0 >= 600)
d266 1
d272 4
a275 1
# if (_POSIX_C_SOURCE - 0 >= 200112)
d319 1
a319 1
 * by any standards.  We expose these when one of the POSIX or XPG
d331 1
a331 1
# define __XPG_VISIBLE		600
d334 1
a334 1
# define __POSIX_VISIBLE	200112
@


1.26
log
@pcc knows inline. ok kjell@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.25 2007/06/26 10:30:05 tom Exp $	*/
d119 1
a119 1
#if !__GNUC_PREREQ__(2, 5)
d174 1
a174 1
#if __GNUC_PREREQ__(2, 7)
d184 1
a184 1
#if __GNUC_PREREQ__(2, 8)
@


1.25
log
@Fix "the the"s.  ok miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.24 2006/12/23 15:00:14 miod Exp $	*/
d76 1
a76 1
#if defined(__cplusplus)
@


1.24
log
@When compiling with gcc3, flag pool_get() as a malloc-like function, this
helps optimization.
With feedback from grange@@ and thib@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.23 2006/04/17 16:36:43 cloder Exp $	*/
d289 1
a289 1
 * If the the user defines it in addition to one of the POSIX or XOPEN
@


1.23
log
@When linting, #define __dead /* NORETURN */, which allows lint to detect
dead code and avoid false positives
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.22 2005/12/15 17:48:32 millert Exp $	*/
d190 6
@


1.22
log
@Use _SYS_CDEFS_H_ not _CDEFS_H_ for duplicate header supression.
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.21 2005/12/14 18:28:40 millert Exp $	*/
d124 2
@


1.21
log
@Add a __statement macro to use with gcc statement expressions instead
of using __extension__ directly.  This lets us define away the whole
thing when lint is in use.
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.20 2005/11/19 19:05:02 millert Exp $	*/
d38 2
a39 2
#ifndef	_CDEFS_H_
#define	_CDEFS_H_
d326 1
a326 1
#endif /* !_CDEFS_H_ */
@


1.20
log
@Replace _OPENBSD_SOURCE with _BSD_SOURCE since some 3rd party code
already uses the latter, which is helpful for ports.
The headers don't actually use _OPENBSD_SOURCE yet so this is safe to do.
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.19 2005/11/15 15:46:41 millert Exp $	*/
d180 8
@


1.19
log
@Having __STRICT_ANSI__ (gcc -ansi) stop all non-ANSI interfaces from
being visible causes too many problems to be worth it.  Lots of
thigns in ports use -ansi and expect to still be able to use POSIX bits.
We may want to disable long long for __STRICT_ANSI__ in the future since
this is consistent with what gcc whines about.
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.18 2005/05/27 21:28:12 millert Exp $	*/
d199 1
a199 1
 *	__OPENBSD_VISIBLE
d295 1
a295 1
 * macros is not defined or if the user explicitly asks for them.
d297 1
a297 1
#if !defined(_OPENBSD_SOURCE) && \
d299 1
a299 1
# define __OPENBSD_VISIBLE	0
d314 2
a315 2
#ifndef __OPENBSD_VISIBLE
# define __OPENBSD_VISIBLE	1
@


1.18
log
@Back out last commit, it was correct as is.
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.16 2005/05/24 22:28:02 millert Exp $	*/
a298 14
# define __OPENBSD_VISIBLE	0
#endif

/*
 * __STRICT_ANSI__ (gcc -ansi) overrides everything else.
 */
#ifdef __STRICT_ANSI__
# undef __POSIX_VISIBLE
# define __POSIX_VISIBLE	0
# undef __XPG_VISIBLE
# define __XPG_VISIBLE		0
# undef __ISO_C_VISIBLE
# define __ISO_C_VISIBLE	1990
# undef __OPENBSD_VISIBLE
@


1.17
log
@If _POSIX_SOURCE is defined but _POSIX_C_SOURCE is not just
define _POSIX_C_SOURCE to 198808.
@
text
@a248 3
#if defined(_POSIX_SOURCE) && !defined(_POSIX_C_SOURCE)
#define _POSIX_C_SOURCE		198808
#endif
d266 1
a266 1
#else
d268 2
a269 2
# define __ISO_C_VISIBLE	0
#endif /* _POSIX_C_SOURCE */
@


1.16
log
@Add scaffolding for feature tests that will be used by our include files.
Inspired by similar macros in FreeBSD.  OK miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.15 2005/05/19 18:32:51 hshoexer Exp $	*/
d249 3
d269 1
a269 1
#elif defined(_POSIX_SOURCE)
d271 2
a272 2
#  define __ISO_C_VISIBLE	0
#endif
@


1.15
log
@revert to 1.13 as __unused is used
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.14 2005/05/19 02:00:51 millert Exp $	*/
d180 150
@


1.14
log
@Add __unused macro similar to what is used by Net and Free.
OK cloder@@, grange@@, djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.13 2004/01/28 03:33:29 millert Exp $	*/
a173 1
#define	__unused	__attribute__((__unused__))
a175 1
#define	__unused
@


1.13
log
@Fix the logic for defining away __extension__, it was reversed.
Noticed by espie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.12 2004/01/27 01:39:43 millert Exp $	*/
d174 1
d177 1
@


1.12
log
@#define away __extern__ for old gcc and non-gcc; espie@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.11 2003/10/26 16:59:30 avsm Exp $	*/
d178 1
a178 1
#if __GNUC_PREREQ__(2, 8)
@


1.11
log
@add a __packed #define to map to __attribute__((__packed__)) on gcc>=2.7
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.10 2003/08/24 01:27:07 avsm Exp $	*/
d176 4
@


1.10
log
@sprinkle some __kprintf__ attributes around functions which use format
strings in the kernel to make gcc aware of the extra modifiers
deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.9 2003/06/02 23:28:20 millert Exp $	*/
d170 6
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.8 2002/12/28 18:04:49 espie Exp $	*/
a40 8
/*
 * Gratuitous NetBSD gcc extensions we can do without.
 */

#ifdef __KPRINTF_ATTRIBUTE__
#undef __KPRINTF_ATTRIBUTE__
#endif

a163 6
#endif

#ifdef __KPRINTF_ATTRIBUTE__
#define __kprintf_attribute__(a) __attribute__(a)
#else
#define __kprintf_attribute__(a)
@


1.8
log
@fix C++ semantics.
Found by Andrew Pinski <pinskia@@physics.uc.edu>
Works with gcc-current and Tendra C++ now.
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.7 2001/08/07 21:33:03 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@For gcc >= 2.5 #define __dead and __pure using the __noreturn__
and __const__ attributes.
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.6 2001/08/07 19:13:23 art Exp $	*/
d57 1
a57 1
#define	__END_DECLS	};
@


1.7.4.1
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 1
a57 1
#define	__END_DECLS	}
@


1.6
log
@Add a bunch of macros from NetBSD.
__GNUC_PREREQ__(minor,major) evaluates to true if use gcc that has the
version major.minor or newer.

__predict_{true,false} are there to make use of the new branch prediction
hint mechanisms in gcc 3.0.
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.5 1996/09/27 17:34:44 maja Exp $	*/
d126 3
a128 3
 * GCC2 uses a new, peculiar __attribute__((attrs)) style.  All of
 * these work for GNU C++ (modulo a slight glitch in the C++ grammar
 * in the distribution version of 2.5.5).
d137 3
@


1.5
log
@Make kernel compile even if we are using strange versions of gcc. -moj
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.4 1996/04/21 22:31:30 deraadt Exp $	*/
d64 10
d130 2
a131 2
#if !defined(__GNUC__) || __GNUC__ < 2 || \
	(__GNUC__ == 2 && __GNUC_MINOR__ < 5)
d137 36
@


1.5.16.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.5 1996/09/27 17:34:44 maja Exp $	*/
a63 10
 * Macro to test if we're using a specific version of gcc or later.
 */
#ifdef __GNUC__
#define __GNUC_PREREQ__(ma, mi) \
	((__GNUC__ > (ma)) || (__GNUC__ == (ma) && __GNUC_MINOR__ >= (mi)))
#else
#define __GNUC_PREREQ__(ma, mi) 0
#endif

/*
d116 3
a118 3
 * GCC >= 2.5 uses the __attribute__((attrs)) style.  All of these
 * work for GNU C++ (modulo a slight glitch in the C++ grammar in
 * the distribution version of 2.5.5).
d120 2
a121 2

#if !__GNUC_PREREQ__(2, 5)
a126 39
#elif !defined(__STRICT_ANSI__)
#define __dead		__attribute__((__noreturn__))
#define __pure		__attribute__((__const__))
#endif

/*
 * GNU C version 2.96 adds explicit branch prediction so that
 * the CPU back-end can hint the processor and also so that
 * code blocks can be reordered such that the predicted path
 * sees a more linear flow, thus improving cache behavior, etc.
 *
 * The following two macros provide us with a way to utilize this
 * compiler feature.  Use __predict_true() if you expect the expression
 * to evaluate to true, and __predict_false() if you expect the
 * expression to evaluate to false.
 *
 * A few notes about usage:
 *
 *	* Generally, __predict_false() error condition checks (unless
 *	  you have some _strong_ reason to do otherwise, in which case
 *	  document it), and/or __predict_true() `no-error' condition
 *	  checks, assuming you want to optimize for the no-error case.
 *
 *	* Other than that, if you don't know the likelihood of a test
 *	  succeeding from empirical or other `hard' evidence, don't
 *	  make predictions.
 *
 *	* These are meant to be used in places that are run `a lot'.
 *	  It is wasteful to make predictions in code that is run
 *	  seldomly (e.g. at subsystem initialization time) as the
 *	  basic block reordering that this affects can often generate
 *	  larger code.
 */
#if __GNUC_PREREQ__(2, 96)
#define __predict_true(exp)	__builtin_expect(((exp) != 0), 1)
#define __predict_false(exp)	__builtin_expect(((exp) != 0), 0)
#else
#define __predict_true(exp)	((exp) != 0)
#define __predict_false(exp)	((exp) != 0)
@


1.5.16.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 1
a57 1
#define	__END_DECLS	}
@


1.5.16.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.5.16.2 2003/03/28 00:41:30 niklas Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.5.16.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 8
d174 6
a183 10
#endif

#if __GNUC_PREREQ__(2, 7)
#define	__packed	__attribute__((__packed__))
#elif defined(lint)
#define	__packed
#endif

#if !__GNUC_PREREQ__(2, 8)
#define	__extension__
@


1.4
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: cdefs.h,v 1.3 1996/03/24 17:00:37 tholo Exp $	*/
d44 8
@


1.3
log
@Our lint(1) understands __const, __inline, __signed and __volatile
@
text
@d1 2
a2 2
/*	$OpenBSD: cdefs.h,v 1.2 1996/03/03 12:11:23 niklas Exp $	*/
/*	$NetBSD: cdefs.h,v 1.15 1995/01/19 01:54:52 jtc Exp $	*/
d119 6
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d73 1
a73 1
#ifndef __GNUC__
d75 1
a75 1
#endif /* !__GNUC__ */
d83 1
a83 1
#ifndef __GNUC__
d88 1
a88 1
#endif	/* !__GNUC__ */
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
