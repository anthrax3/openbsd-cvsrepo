head	1.27;
access;
symbols
	OPENBSD_6_2:1.27.0.14
	OPENBSD_6_2_BASE:1.27
	OPENBSD_6_1:1.27.0.12
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.8
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.4
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.27.0.6
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.25.0.6
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.4
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.24.0.8
	OPENBSD_5_4_BASE:1.24
	OPENBSD_5_3:1.24.0.6
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.4
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.2
	OPENBSD_5_0:1.23.0.4
	OPENBSD_5_0_BASE:1.23
	OPENBSD_4_9:1.23.0.2
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.22.0.4
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.21.0.12
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.8
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.6
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.21.0.4
	OPENBSD_4_3_BASE:1.21
	OPENBSD_4_2:1.21.0.2
	OPENBSD_4_2_BASE:1.21
	OPENBSD_4_1:1.20.0.6
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.20.0.4
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.20.0.2
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.19.0.6
	OPENBSD_3_8_BASE:1.19
	OPENBSD_3_7:1.19.0.4
	OPENBSD_3_7_BASE:1.19
	OPENBSD_3_6:1.19.0.2
	OPENBSD_3_6_BASE:1.19
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.15.0.2
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.14.0.4
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.2
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.13
	UBC:1.11.0.4
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.2
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.10
	OPENBSD_2_8:1.8.0.8
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.6
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.4
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2014.11.23.04.31.42;	author guenther;	state Exp;
branches;
next	1.26;
commitid	xhzcNqQj4xO4dch4;

1.26
date	2014.10.09.04.04.27;	author tedu;	state Exp;
branches;
next	1.25;
commitid	29cCQl7KlarTmoPD;

1.25
date	2013.08.13.05.52.26;	author guenther;	state Exp;
branches;
next	1.24;

1.24
date	2011.10.27.07.56.28;	author robert;	state Exp;
branches;
next	1.23;

1.23
date	2011.01.03.23.08.07;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2009.12.08.22.12.07;	author miod;	state Exp;
branches;
next	1.21;

1.21
date	2007.05.29.10.44.28;	author sturm;	state Exp;
branches;
next	1.20;

1.20
date	2005.12.13.00.35.23;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2004.07.15.11.24.46;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2004.07.14.23.45.11;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2004.07.14.23.40.27;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2004.05.03.17.38.47;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.10.12.23.44.39;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.12.17.23.11.31;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.23.13.28.34;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2001.09.28.01.42.54;	author millert;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	2001.08.12.22.50.12;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.05.20.57.02;	author art;	state Exp;
branches;
next	1.8;

1.8
date	99.06.23.09.44.28;	author art;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	98.06.11.19.21.30;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	98.06.11.18.32.24;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	98.05.11.06.20.14;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.02.18.04.07.19;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.22.31.57;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.03.12.12.18;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.29;	author deraadt;	state Exp;
branches;
next	;

1.8.4.1
date	2001.07.04.11.00.29;	author niklas;	state Exp;
branches;
next	1.8.4.2;

1.8.4.2
date	2001.10.31.03.30.30;	author nate;	state Exp;
branches;
next	1.8.4.3;

1.8.4.3
date	2002.03.28.14.52.02;	author niklas;	state Exp;
branches;
next	1.8.4.4;

1.8.4.4
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.8.4.5;

1.8.4.5
date	2004.02.19.11.01.34;	author niklas;	state Exp;
branches;
next	1.8.4.6;

1.8.4.6
date	2004.06.05.23.13.10;	author niklas;	state Exp;
branches;
next	;

1.11.4.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	1.11.4.2;

1.11.4.2
date	2003.05.19.22.32.36;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.27
log
@We now get <sys/cdefs.h> via <sys/ipc.h>
Only pull <sys/queue.h> into the kernel namespacem

ok deraadt@@
@
text
@/*	$OpenBSD: shm.h,v 1.26 2014/10/09 04:04:27 tedu Exp $	*/
/*	$NetBSD: shm.h,v 1.20 1996/04/09 20:55:35 cgd Exp $	*/

/*
 * Copyright (c) 1994 Adam Glass
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Adam Glass.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * As defined+described in "X/Open System Interfaces and Headers"
 *                         Issue 4, p. XXX
 */

#ifndef _SYS_SHM_H_
#define _SYS_SHM_H_

#ifndef _SYS_IPC_H_
#include <sys/ipc.h>
#endif

#if __BSD_VISIBLE

/* shm-specific sysctl variables corresponding to members of struct shminfo */
#define KERN_SHMINFO_SHMMAX	1	/* int: max shm segment size (bytes) */
#define KERN_SHMINFO_SHMMIN	2	/* int: min shm segment size (bytes) */
#define KERN_SHMINFO_SHMMNI	3	/* int: max number of shm identifiers */
#define KERN_SHMINFO_SHMSEG	4	/* int: max shm segments per process */
#define KERN_SHMINFO_SHMALL	5	/* int: max amount of shm (pages) */
#define KERN_SHMINFO_MAXID	6	/* number of valid shared memory ids */

#define CTL_KERN_SHMINFO_NAMES { \
	{ 0, 0 }, \
	{ "shmmax", CTLTYPE_INT }, \
	{ "shmmin", CTLTYPE_INT }, \
	{ "shmmni", CTLTYPE_INT }, \
	{ "shmseg", CTLTYPE_INT }, \
	{ "shmall", CTLTYPE_INT }, \
}

/*
 * Old (deprecated) access mode definitions--do not use.
 * Provided for compatibility with old code only.
 */
#define SHM_R		IPC_R
#define SHM_W		IPC_W

#endif /* __BSD_VISIBLE */

/*
 * Shared memory operation flags for shmat(2).
 */
#define	SHM_RDONLY	010000	/* Attach read-only (else read-write) */
#define	SHM_RND		020000	/* Round attach address to SHMLBA */

/*
 * Shared memory specific control commands for shmctl().
 * We accept but ignore these (XXX).
 */
#define	SHM_LOCK	3	/* Lock segment in memory. */
#define	SHM_UNLOCK	4	/* Unlock a segment locked by SHM_LOCK. */

/*
 * Segment low boundry address multiple
 * Use PAGE_SIZE for kernel but for userland query the kernel for the value.
 */
#if defined(_KERNEL) || defined(_STANDALONE)
#define	SHMLBA		PAGE_SIZE
#else
#define	SHMLBA		(getpagesize())
#endif /* _KERNEL || _STANDALONE */

typedef short		shmatt_t;

struct shmid_ds {
	struct ipc_perm	shm_perm;	/* operation permission structure */
	int		shm_segsz;	/* size of segment in bytes */
	pid_t		shm_lpid;	/* process ID of last shm op */
	pid_t		shm_cpid;	/* process ID of creator */
	shmatt_t	shm_nattch;	/* number of current attaches */
	time_t		shm_atime;	/* time of last shmat() */
	long		__shm_atimensec;
	time_t		shm_dtime;	/* time of last shmdt() */
	long		__shm_dtimensec;
	time_t		shm_ctime;	/* time of last change by shmctl() */
	long		__shm_ctimensec;
	void		*shm_internal;	/* implementation specific data */
};

#if __BSD_VISIBLE
/*
 * System V style catch-all structure for shared memory constants that
 * might be of interest to user programs.  Do we really want/need this?
 */
struct shminfo {
	int	shmmax;		/* max shared memory segment size (bytes) */
	int	shmmin;		/* min shared memory segment size (bytes) */
	int	shmmni;		/* max number of shared memory identifiers */
	int	shmseg;		/* max shared memory segments per process */
	int	shmall;		/* max amount of shared memory (pages) */
};

struct shm_sysctl_info {
	struct	shminfo shminfo;
	struct	shmid_ds shmids[1];
};
#endif /* __BSD_VISIBLE */

#ifdef _KERNEL
extern struct shminfo shminfo;
extern struct shmid_ds **shmsegs;

struct proc;
struct vmspace;

void	shminit(void);
void	shmfork(struct vmspace *, struct vmspace *);
void	shmexit(struct vmspace *);
int	sysctl_sysvshm(int *, u_int, void *, size_t *, void *, size_t);
int	shmctl1(struct proc *, int, int, caddr_t,
	    int (*)(const void *, void *, size_t),
	    int (*)(const void *, void *, size_t));

#else /* !_KERNEL */

__BEGIN_DECLS
void *shmat(int, const void *, int);
int shmctl(int, int, struct shmid_ds *);
int shmdt(const void *);
int shmget(key_t, size_t, int);
__END_DECLS

#endif /* !_KERNEL */

#endif /* !_SYS_SHM_H_ */
@


1.26
log
@remove LKM support
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.25 2013/08/13 05:52:26 guenther Exp $	*/
a41 1
#include <sys/cdefs.h>
@


1.25
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.24 2011/10/27 07:56:28 robert Exp $	*/
d92 1
a92 1
#if defined(_KERNEL) || defined(_STANDALONE) || defined(_LKM)
d96 1
a96 1
#endif /* _KERNEL || _STANDALONE || _LKM */
@


1.24
log
@Allow segments to be used even after they were marked for deletion with
the IPC_RMID flag.
This is permitted as an extension beyond the standards and this is similar
to what other operating systems like linux do.

Because compat_linux(8) was emulating this already, remove that code
since now this is the default.

input from oga@@, guenther@@, jmc@@, deraadt@@
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.23 2011/01/03 23:08:07 guenther Exp $	*/
d107 1
d109 1
d111 1
@


1.23
log
@Remove the old COMPAT_23 SysV IPC structures and the never implemented
semconfig() declaration.  Move the COMPAT_35 SysV IPC structures into
the only source files that uses them

ok millert@@, kettenis@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.22 2009/12/08 22:12:07 miod Exp $	*/
a79 3
#ifdef _KERNEL
#define	_SHM_RMLINGER	040000	/* Attach even if segment removed */
#endif
@


1.22
log
@Remove old SysV SHM size limits global variables, they are no longer needed
since blambert@@ rewrote the allocation code.
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.21 2007/05/29 10:44:28 sturm Exp $	*/
a113 26

#ifdef _KERNEL
struct shmid_ds23 {
	struct ipc_perm23 shm_perm;	/* operation permission structure */
	int		shm_segsz;	/* size of segment in bytes */
	pid_t		shm_lpid;	/* process ID of last shm op */
	pid_t		shm_cpid;	/* process ID of creator */
	shmatt_t	shm_nattch;	/* number of current attaches */
	time_t		shm_atime;	/* time of last shmat() */
	time_t		shm_dtime;	/* time of last shmdt() */
	time_t		shm_ctime;	/* time of last change by shmctl() */
	void		*shm_internal;	/* implementation specific data */
};

struct shmid_ds35 {
	struct ipc_perm35 shm_perm;	/* operation permission structure */
	int		  shm_segsz;	/* size of segment in bytes */
	pid_t		  shm_lpid;	/* process ID of last shm op */
	pid_t		  shm_cpid;	/* process ID of creator */
	shmatt_t	  shm_nattch;	/* number of current attaches */
	time_t		  shm_atime;	/* time of last shmat() */
	time_t		  shm_dtime;	/* time of last shmdt() */
	time_t		  shm_ctime;	/* time of last change by shmctl() */
	void		  *shm_internal;/* implementation specific data */
};
#endif
@


1.21
log
@adapt from netbsd:
fold sys_shmat1() back into sys_shmat(), instead add flag for shmget(2)
to specify that later shmat(2) for the shared memory segment should succeed
even if the segment would be marked removed; use this to implement the
Linux-compatible semantics of shmat(2)

this fixes current opera with shm

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.20 2005/12/13 00:35:23 millert Exp $	*/
a162 4

/* initial values for machdep.c */
extern int shmseg;
extern int shmmaxpgs;
@


1.20
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.19 2004/07/15 11:24:46 millert Exp $	*/
d80 3
a174 1
int	sys_shmat1(struct proc *, void *, register_t *, int);
@


1.19
log
@Rename structs oipc_perm, omsqid_ds, osemid_ds, oshmid_ds to ipc_perm23,
etc to avoid confusion and for consistency with the *35 ones.
Remove *n2o functions that don't belong outside of compat.
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.18 2004/07/14 23:45:11 millert Exp $	*/
d42 1
d47 1
a47 1
#if !defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)
d73 1
a73 1
#endif /* !_POSIX_C_SOURCE && !_XOPEN_SOURCE */
d138 1
a138 1
#if !defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)
d155 1
a155 1
#endif /* !_POSIX_C_SOURCE && !_XOPEN_SOURCE */
a177 2

#include <sys/cdefs.h>
@


1.18
log
@Because mode_t is used in struct ipc_perm we need new versions of
the msgctl, semctl, and shmctl system calls.  This moves the old
versions to COMPAT_35 and adds new ones.

WARNING: While this fixes things like shared memory in the X server
for old (pre-mode_t change) binaries, it will break binaries that
use shared memory built between the time of the mode_t change (Jul
13th) and now.  If you rebuild X during that interval you will need
to do it again after updating the rest of userland.
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.17 2004/07/14 23:40:27 millert Exp $	*/
d112 2
a113 2
struct oshmid_ds {
	struct oipc_perm shm_perm;	/* operation permission structure */
d117 1
a117 1
	short		shm_nattch;	/* number of current attaches */
a169 1
void	shmid_n2o(struct shmid_ds *, struct oshmid_ds *);
@


1.17
log
@Move the guts of the {sem,msg,shm}ctl system calls into a new function
which also takes two function pointers for copyin/copyout.  For the
real syscalls these are just the normal copyin/copyout functions.
For the compat routines, these are funtions that convert between
the new and old foo_ds structs automagically.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.16 2004/05/03 17:38:47 millert Exp $	*/
d122 12
@


1.16
log
@POSIX says the length parameter for semop(2) and shmget(2) should be size_t.
Create new syscalls with the correct parameters and add compat versions
for the old ones under COMPAT_35.
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.15 2003/10/12 23:44:39 millert Exp $	*/
d152 1
d155 9
a163 6
void shminit(void);
void shmfork(struct vmspace *, struct vmspace *);
void shmexit(struct vmspace *);
void shmid_n2o(struct shmid_ds *, struct oshmid_ds *);
int sysctl_sysvshm(int *, u_int, void *, size_t *, void *, size_t);
int sys_shmat1(struct proc *, void *, register_t *, int);
@


1.15
log
@Linux shmat allows lookup of segments that are marked as removed so
our Linux compat should too.  From marius aamodt eriksen
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.14 2002/12/17 23:11:31 millert Exp $	*/
d169 1
a169 1
int shmget(key_t, int, int);
@


1.14
log
@Make SysV-style shared memory and semaphore limits sysctl'able.
Instead of allocating a static amount of memory for the data
structures via valloc() in allocsys(), allocate things dynamically
using pool(9) when possible and malloc(9) when not.  The various
members of struct seminfo and struct shminfo are in kern.seminfo
and kern.shminfo respectively (not all members of kern.seminfo are
changable).

The data structures used still leave something to be desired but
things are not made worse in that respect by this commit.
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.13 2002/03/23 13:28:34 espie Exp $	*/
d159 1
@


1.13
log
@Add variables for config(8) -e time tweak of systemV shared memory
parameters.

Ok millert@@, miod@@, maja@@
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.12 2002/03/14 01:27:14 millert Exp $	*/
d42 1
d44 27
d72 5
a78 1
#define	SHMLBA		PAGE_SIZE /* Segment low boundry address multiple */
d80 18
a97 4
/* "official" access mode definitions; somewhat braindead since you have
   to specify (SHM_* >> 3) for group and (SHM_* >> 6) for world permissions */
#define SHM_R		(IPC_R)
#define SHM_W		(IPC_W)
d104 1
a104 1
	short		shm_nattch;	/* number of current attaches */
d108 1
a108 1
	void		*shm_internal;	/* sysv stupidity */
d121 1
a121 1
	void		*shm_internal;	/* sysv stupidity */
d125 1
a125 6
#ifdef _KERNEL

/* Some systems (e.g. HP-UX) take these as the second (cmd) arg to shmctl(). */
#define	SHM_LOCK	3	/* Lock segment in memory. */
#define	SHM_UNLOCK	4	/* Unlock a segment locked by SHM_LOCK. */

d142 1
d144 1
d146 1
a146 1
extern struct shmid_ds *shmsegs;
d158 1
@


1.12
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.11 2001/09/28 01:42:54 millert Exp $	*/
d104 4
@


1.11
log
@sysctl() support for getting the SYSV *info structs and the associated
SYSV structs.  To be used by ipcs(1).  Based on work by simonb@@netbsd.org
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.10 2001/08/12 22:50:12 millert Exp $	*/
d107 4
a110 4
void shminit __P((void));
void shmfork __P((struct vmspace *, struct vmspace *));
void shmexit __P((struct vmspace *));
void shmid_n2o __P((struct shmid_ds *, struct oshmid_ds *));
d117 4
a120 4
void *shmat __P((int, const void *, int));
int shmctl __P((int, int, struct shmid_ds *));
int shmdt __P((const void *));
int shmget __P((key_t, int, int));
@


1.11.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.11 2001/09/28 01:42:54 millert Exp $	*/
a104 4
/* initial values for machdep.c */
extern int shmseg;
extern int shmmaxpgs;

d107 4
a110 4
void shminit(void);
void shmfork(struct vmspace *, struct vmspace *);
void shmexit(struct vmspace *);
void shmid_n2o(struct shmid_ds *, struct oshmid_ds *);
d117 4
a120 4
void *shmat(int, const void *, int);
int shmctl(int, int, struct shmid_ds *);
int shmdt(const void *);
int shmget(key_t, int, int);
@


1.11.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a41 1
#ifndef _SYS_IPC_H_
a42 27
#endif

#if !defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)

/* shm-specific sysctl variables corresponding to members of struct shminfo */
#define KERN_SHMINFO_SHMMAX	1	/* int: max shm segment size (bytes) */
#define KERN_SHMINFO_SHMMIN	2	/* int: min shm segment size (bytes) */
#define KERN_SHMINFO_SHMMNI	3	/* int: max number of shm identifiers */
#define KERN_SHMINFO_SHMSEG	4	/* int: max shm segments per process */
#define KERN_SHMINFO_SHMALL	5	/* int: max amount of shm (pages) */
#define KERN_SHMINFO_MAXID	6	/* number of valid shared memory ids */

#define CTL_KERN_SHMINFO_NAMES { \
	{ 0, 0 }, \
	{ "shmmax", CTLTYPE_INT }, \
	{ "shmmin", CTLTYPE_INT }, \
	{ "shmmni", CTLTYPE_INT }, \
	{ "shmseg", CTLTYPE_INT }, \
	{ "shmall", CTLTYPE_INT }, \
}

/*
 * Old (deprecated) access mode definitions--do not use.
 * Provided for compatibility with old code only.
 */
#define SHM_R		IPC_R
#define SHM_W		IPC_W
a43 5
#endif /* !_POSIX_C_SOURCE && !_XOPEN_SOURCE */

/*
 * Shared memory operation flags for shmat(2).
 */
d46 1
d48 4
a51 18
/*
 * Shared memory specific control commands for shmctl().
 * We accept but ignore these (XXX).
 */
#define	SHM_LOCK	3	/* Lock segment in memory. */
#define	SHM_UNLOCK	4	/* Unlock a segment locked by SHM_LOCK. */

/*
 * Segment low boundry address multiple
 * Use PAGE_SIZE for kernel but for userland query the kernel for the value.
 */
#if defined(_KERNEL) || defined(_STANDALONE) || defined(_LKM)
#define	SHMLBA		PAGE_SIZE
#else
#define	SHMLBA		(getpagesize())
#endif /* _KERNEL || _STANDALONE || _LKM */

typedef short		shmatt_t;
d58 1
a58 1
	shmatt_t	shm_nattch;	/* number of current attaches */
d62 1
a62 1
	void		*shm_internal;	/* implementation specific data */
d75 1
a75 1
	void		*shm_internal;	/* implementation specific data */
d79 6
a84 1
#if !defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)
a100 1
#endif /* !_POSIX_C_SOURCE && !_XOPEN_SOURCE */
a101 1
#ifdef _KERNEL
d103 1
a103 1
extern struct shmid_ds **shmsegs;
a114 1
int sysctl_sysvshm(int *, u_int, void *, size_t *, void *, size_t);
@


1.10
log
@Don't allocate globals in include files, use extern declarations.
Move the actual variables into their respective .c files.
As a bonus, remove semmap which is not used.
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.9 2001/05/05 20:57:02 art Exp $	*/
d96 6
@


1.9
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.8 1999/06/23 09:44:28 art Exp $	*/
d86 1
a86 1
 * System 5 style catch-all structure for shared memory constants that
d96 2
a97 2
struct shminfo shminfo;
struct shmid_ds *shmsegs;
@


1.8
log
@Improved sysv shared memory. Works with UVM.
Original work done in FreeBSD, but this code was ported from NetBSD by
Chuck Cranor.
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.7 1998/06/11 19:21:30 deraadt Exp $	*/
d46 1
a46 1
#define	SHMLBA		CLBYTES	/* Segment low boundry address multiple */
@


1.8.4.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.8 1999/06/23 09:44:28 art Exp $	*/
d46 1
a46 1
#define	SHMLBA		PAGE_SIZE /* Segment low boundry address multiple */
@


1.8.4.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.8.4.1 2001/07/04 11:00:29 niklas Exp $	*/
d86 1
a86 1
 * System V style catch-all structure for shared memory constants that
d96 2
a97 8

struct shm_sysctl_info {
	struct	shminfo shminfo;
	struct	shmid_ds shmids[1];
};

extern struct shminfo shminfo;
extern struct shmid_ds *shmsegs;
@


1.8.4.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d107 4
a110 4
void shminit(void);
void shmfork(struct vmspace *, struct vmspace *);
void shmexit(struct vmspace *);
void shmid_n2o(struct shmid_ds *, struct oshmid_ds *);
d117 4
a120 4
void *shmat(int, const void *, int);
int shmctl(int, int, struct shmid_ds *);
int shmdt(const void *);
int shmget(key_t, int, int);
@


1.8.4.4
log
@Sync the SMP branch with 3.3
@
text
@a41 1
#ifndef _SYS_IPC_H_
a42 29
#endif

#if !defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)

/* shm-specific sysctl variables corresponding to members of struct shminfo */
#define KERN_SHMINFO_SHMMAX	1	/* int: max shm segment size (bytes) */
#define KERN_SHMINFO_SHMMIN	2	/* int: min shm segment size (bytes) */
#define KERN_SHMINFO_SHMMNI	3	/* int: max number of shm identifiers */
#define KERN_SHMINFO_SHMSEG	4	/* int: max shm segments per process */
#define KERN_SHMINFO_SHMALL	5	/* int: max amount of shm (pages) */
#define KERN_SHMINFO_MAXID	6	/* number of valid shared memory ids */

#define CTL_KERN_SHMINFO_NAMES { \
	{ 0, 0 }, \
	{ "shmmax", CTLTYPE_INT }, \
	{ "shmmin", CTLTYPE_INT }, \
	{ "shmmni", CTLTYPE_INT }, \
	{ "shmseg", CTLTYPE_INT }, \
	{ "shmall", CTLTYPE_INT }, \
}

/*
 * Old (deprecated) access mode definitions--do not use.
 * Provided for compatibility with old code only.
 */
#define SHM_R		IPC_R
#define SHM_W		IPC_W

#endif /* !_POSIX_C_SOURCE && !_XOPEN_SOURCE */
a43 3
/*
 * Shared memory operation flags for shmat(2).
 */
d46 1
d48 4
a51 18
/*
 * Shared memory specific control commands for shmctl().
 * We accept but ignore these (XXX).
 */
#define	SHM_LOCK	3	/* Lock segment in memory. */
#define	SHM_UNLOCK	4	/* Unlock a segment locked by SHM_LOCK. */

/*
 * Segment low boundry address multiple
 * Use PAGE_SIZE for kernel but for userland query the kernel for the value.
 */
#if defined(_KERNEL) || defined(_STANDALONE) || defined(_LKM)
#define	SHMLBA		PAGE_SIZE
#else
#define	SHMLBA		(getpagesize())
#endif /* _KERNEL || _STANDALONE || _LKM */

typedef short		shmatt_t;
d58 1
a58 1
	shmatt_t	shm_nattch;	/* number of current attaches */
d62 1
a62 1
	void		*shm_internal;	/* implementation specific data */
d75 1
a75 1
	void		*shm_internal;	/* implementation specific data */
d79 6
a84 1
#if !defined(_POSIX_C_SOURCE) && !defined(_XOPEN_SOURCE)
a100 1
#endif /* !_POSIX_C_SOURCE && !_XOPEN_SOURCE */
a101 1
#ifdef _KERNEL
d103 1
a103 5
extern struct shmid_ds **shmsegs;

/* initial values for machdep.c */
extern int shmseg;
extern int shmmaxpgs;
a110 1
int sysctl_sysvshm(int *, u_int, void *, size_t *, void *, size_t);
@


1.8.4.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a158 1
int sys_shmat1(struct proc *, void *, register_t *, int);
@


1.8.4.6
log
@Merge with the trunk
@
text
@d169 1
a169 1
int shmget(key_t, size_t, int);
@


1.7
log
@do not export old structures to userland
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.6 1998/06/11 18:32:24 deraadt Exp $	*/
d99 2
d102 2
a103 2
void shmfork __P((struct proc *, struct proc *));
void shmexit __P((struct proc *));
@


1.6
log
@change ipc.h to use uid_t and friends, and then build compat system calls for the old ushort based ipc.h
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.5 1998/05/11 06:20:14 deraadt Exp $	*/
d65 1
d77 1
@


1.5
log
@Move the SHM_{LOCK,UNLOCK} shmctl() commands inside _KERNEL protection; const
shmaddr pointer arguments to shmat() and shmdt(); kleink
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.4 1998/02/18 04:07:19 millert Exp $	*/
d65 12
d100 1
@


1.4
log
@Define SHM_R and SHM_W as IPC_R and IPC_W respectively.  From FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.3 1996/04/21 22:31:57 deraadt Exp $	*/
a52 5
/* Some systems (e.g. HP-UX) take these as the second (cmd) arg to shmctl(). */
#define	SHM_LOCK	3	/* Lock segment in memory. */
#define	SHM_UNLOCK	4	/* Unlock a segment locked by SHM_LOCK. */


d67 4
d94 1
a94 1
void *shmat __P((int, void *, int));
d96 1
a96 1
int shmdt __P((void *));
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: shm.h,v 1.2 1996/03/03 12:12:18 niklas Exp $	*/
d48 5
d56 1
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: shm.h,v 1.19 1996/02/09 18:25:30 christos Exp $	*/
d80 1
a80 1
void shminit __P((void));  
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: shm.h,v 1.18 1995/03/26 20:24:41 jtc Exp $	*/
d79 4
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
