head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.2
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.9.0.12
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.8
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.10
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3;
locks; strict;
comment	@ * @;


1.11
date	2016.08.30.16.45.54;	author natano;	state Exp;
branches;
next	1.10;
commitid	bR1BHPSoghZ5Wk7v;

1.10
date	2016.08.13.11.42.46;	author natano;	state Exp;
branches;
next	1.9;
commitid	LIBcLca7UGbaJAAZ;

1.9
date	2014.01.16.09.31.44;	author syl;	state Exp;
branches;
next	1.8;

1.8
date	2013.12.03.09.59.40;	author syl;	state Exp;
branches;
next	1.7;

1.7
date	2013.11.13.17.53.54;	author stsp;	state Exp;
branches;
next	1.6;

1.6
date	2013.11.11.14.18.49;	author stsp;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.07.18.15.22;	author syl;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.07.18.04.53;	author syl;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.04.18.25.09;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.03.16.22.08;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.03.16.20.15;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Use struct stat for storing attributes in fusebufs, because using struct
vattr in userspace is suboptimal as some related helpers are not
available, e.g. VATTR_NULL() and IFTOVT(). The conversion is now done in
the kernel where it belongs. As a side effect the <sys/vnode.h> include
can be removed from libfuse.

tweaks and ok guenther
@
text
@/* $OpenBSD: fusebuf.h,v 1.10 2016/08/13 11:42:46 natano Exp $ */
/*
 * Copyright (c) 2013 Sylvestre Gallon
 * Copyright (c) 2013 Martin Pieuchot
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _SYS_FUSEBUF_H_
#define _SYS_FUSEBUF_H_

/*
 * Fusebufs are of a single size, 4096 bytes.
 */
#define	FUSEBUFSIZE	(sizeof(struct fusebuf))
#define FUSEBUFMAXSIZE	(4096*1024)

/* header at beginning of each fusebuf: */
struct fb_hdr {
	SIMPLEQ_ENTRY(fusebuf)	fh_next;	/* next buffer in chain */
	size_t			fh_len;		/* Amount of data */
	int			fh_err;		/* errno to pass back */
	int			fh_type;	/* type of data */
	ino_t			fh_ino;		/* Inode of this fusebuf */
	uint64_t		fh_uuid;	/* Uuid to track the answer */
};

/* header for fuse file operations (like read/write/mkdir): */
struct fb_io {
	uint64_t	fi_fd;		/* fd where the io is performed */
	ino_t           fi_ino;		/* ino for the io */
	off_t		fi_off;		/* offset for the io */
	size_t		fi_len;		/* Length of data */
	mode_t		fi_mode;	/* mode for fd */
	uint32_t	fi_flags;	/* flags on transfer */
	dev_t		fi_rdev;	/* dev for mknod */
};

/*
 * An operation is issued by the kernel through fuse(4) when the
 * userland file system needs to execute an action (mkdir(2),
 * link(2), etc).
 *
 * F_databuf can be superior to FUSELEN for fusefs_read, fusefs_writes and
 * fusefs_readdir. If it is the case the transfer will be split in N
 * fusebuf with a changing offset in FD_io.
 *
 * When the userland file system answers to this operation it uses
 * the same ID (fh_uuid).
 */
struct fusebuf {
	struct fb_hdr	fb_hdr;
	union {
		struct statvfs	FD_stat;	/* vfs statfs */
		struct stat	FD_attr;	/* for attr vnops */
		struct fb_io	FD_io;		/* for file io vnops */
	} FD;
	uint8_t *fb_dat;			/* data's */
};

#define fb_next		fb_hdr.fh_next
#define fb_len		fb_hdr.fh_len
#define fb_err		fb_hdr.fh_err
#define fb_type		fb_hdr.fh_type
#define fb_ino		fb_hdr.fh_ino
#define fb_uuid		fb_hdr.fh_uuid

#define fb_stat		FD.FD_stat
#define fb_attr		FD.FD_attr
#define fb_io_fd	FD.FD_io.fi_fd
#define fb_io_ino	FD.FD_io.fi_ino
#define fb_io_off	FD.FD_io.fi_off
#define fb_io_len	FD.FD_io.fi_len
#define fb_io_mode	FD.FD_io.fi_mode
#define fb_io_flags	FD.FD_io.fi_flags
#define fb_io_rdev	FD.FD_io.fi_rdev

/*
 * Macros for type conversion
 * fbtod(fb,t) -	convert fusebuf pointer to data pointer of correct
 *			type
 */
#define	fbtod(fb,t)	((t)((fb)->fb_dat))

/* flags needed by setattr */
#define FUSE_FATTR_MODE		(1 << 0)
#define FUSE_FATTR_UID		(1 << 1)
#define FUSE_FATTR_GID		(1 << 2)
#define FUSE_FATTR_SIZE		(1 << 3)
#define FUSE_FATTR_ATIME	(1 << 4)
#define FUSE_FATTR_MTIME	(1 << 5)
#define FUSE_FATTR_FH		(1 << 6)

/* fusebuf types */
#define	FBT_LOOKUP	0
#define FBT_GETATTR	1
#define FBT_SETATTR	2
#define FBT_READLINK	3
#define FBT_SYMLINK	4
#define FBT_MKNOD	5
#define FBT_MKDIR	6
#define FBT_UNLINK	7
#define FBT_RMDIR	8
#define FBT_RENAME	9
#define FBT_LINK	10
#define FBT_OPEN	11
#define FBT_READ	12
#define FBT_WRITE	13
#define FBT_STATFS	14
#define FBT_RELEASE	16
#define FBT_FSYNC	17
#define FBT_FLUSH	18
#define FBT_INIT	19
#define FBT_OPENDIR	20
#define FBT_READDIR	21
#define FBT_RELEASEDIR	22
#define FBT_FSYNCDIR	23
#define FBT_ACCESS	24
#define FBT_CREATE	25
#define FBT_DESTROY	26
#define FBT_RECLAIM	27

#ifdef _KERNEL

/* fusebuf prototypes */
struct	fusebuf *fb_setup(size_t, ino_t, int, struct proc *);
int	fb_queue(dev_t, struct fusebuf *);
void	fb_delete(struct fusebuf *);

#endif /* _KERNEL */
#endif /* _SYS_FUSEBUF_H_ */
@


1.10
log
@Kill FUSE_ROOT_ID and use FUSE_ROOTINO instead. Also, remove one (ino_t)
cast from FUSE_ROOTINO, as it is already included in the #define.

ok kettenis
@
text
@d1 1
a1 1
/* $OpenBSD: fusebuf.h,v 1.9 2014/01/16 09:31:44 syl Exp $ */
d65 1
a65 1
		struct vattr	FD_vattr;	/* for attr vnops */
d68 1
a68 1
	uint8_t *F_databuf;			/* data's */
d79 1
a79 1
#define fb_vattr	FD.FD_vattr
a86 1
#define	fb_dat		F_databuf
@


1.9
log
@Add support for mknod in fuse.

OK tedu@@
"it looks good to me" from guenther@@
@
text
@d1 1
a1 1
/* $OpenBSD: fusebuf.h,v 1.8 2013/12/03 09:59:40 syl Exp $ */
a134 3

/* The node ID of the root inode */
#define FUSE_ROOT_ID	1
@


1.8
log
@Add support for FBT_RECLAIM that allow us to free the representation
of vnode in userspace.

"I think it's right" from tedu@@.
@
text
@d1 1
a1 1
/* $OpenBSD: fusebuf.h,v 1.7 2013/11/13 17:53:54 stsp Exp $ */
d46 1
d86 1
@


1.7
log
@Make fusebuf.fh_err signed, it might store negative errno values; ok syl
@
text
@d1 1
a1 1
/* $OpenBSD: fusebuf.h,v 1.6 2013/11/11 14:18:49 stsp Exp $ */
d130 1
@


1.6
log
@There is no fusebuf(9) man page anymore. Remove references to it from comments.
ok syl@@
@
text
@d1 1
a1 1
/* $OpenBSD: fusebuf.h,v 1.5 2013/10/07 18:15:22 syl Exp $ */
d32 1
a32 1
	uint32_t		fh_err;		/* Err code to pass back */
@


1.5
log
@Introduce fb_delete() helper and use it in FUSE code.
@
text
@d1 1
a1 1
/* $OpenBSD: fusebuf.h,v 1.4 2013/10/07 18:04:53 syl Exp $ */
d28 1
a28 1
/* header at beginning of each fusebuf(9): */
d34 1
a34 1
	ino_t			fh_ino;		/* Inode of this fusebuf(9) */
d55 1
a55 1
 * fusebuf(9) with a changing offset in FD_io.
d89 1
a89 1
 * fbtod(fb,t) -	convert fusebuf(9) pointer to data pointer of correct
d103 1
a103 1
/* fusebuf(9) types */
d136 1
a136 1
/* fusebuf(9) prototypes */
@


1.4
log
@Rework fuseread() and fusewrite().
@
text
@d1 1
a1 1
/* $OpenBSD: fusebuf.h,v 1.3 2013/06/04 18:25:09 tedu Exp $ */
d139 1
@


1.3
log
@can't use PAGE_SIZE for array sizes. it's not always a constant.
just hard code 4096 for now instead of anything fancy.
@
text
@d1 1
a1 1
/* $OpenBSD: fusebuf.h,v 1.2 2013/06/03 16:22:08 tedu Exp $ */
d25 2
a26 3
#define	FUSEBUFSIZE	4096
#define	FUSEFDSIZE	sizeof(((struct fusebuf *)0)->F_dat.FD)
#define	FUSELEN	(FUSEBUFSIZE - sizeof(struct fb_hdr) - sizeof(union uFD))
a31 1
	size_t			fh_resid;	/* Needed for partial rw */
d62 6
a67 9
	struct {
		union uFD {
			struct statvfs	FD_stat;	/* vfs statfs */
			struct vattr	FD_vattr;	/* for attr vnops */
			struct fb_io	FD_io;		/* for file io vnops */

		} FD;
		char	F_databuf[FUSELEN];
	} F_dat;
a71 1
#define fb_resid	fb_hdr.fh_resid
d77 9
a85 9
#define fb_stat		F_dat.FD.FD_stat
#define fb_vattr	F_dat.FD.FD_vattr
#define fb_io_fd	F_dat.FD.FD_io.fi_fd
#define fb_io_ino	F_dat.FD.FD_io.fi_ino
#define fb_io_off	F_dat.FD.FD_io.fi_off
#define fb_io_len	F_dat.FD.FD_io.fi_len
#define fb_io_mode	F_dat.FD.FD_io.fi_mode
#define fb_io_flags	F_dat.FD.FD_io.fi_flags
#define	fb_dat		F_dat.F_databuf
a92 3

/* helper to get F_databuf size */
#define fbdatsize(fb)	((fb)->fb_len - FUSEFDSIZE)
@


1.2
log
@rcsid
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d23 1
a23 3
 * Fusebufs are of a single size, PAGE_SIZE, and cannot be bigger.This
 * restriction is due to the fact that we allocate the fusebuf(9) with
 * pool_get(9) and that it does not support size >= to PAGE_SIZE
d25 3
a27 3

#define FUSEFDSIZE	sizeof(((struct fusebuf *)0)->F_dat.FD)
#define FUSELEN		(PAGE_SIZE - sizeof(struct fb_hdr) - sizeof(union uFD))
@


1.1
log
@i missed a file
@
text
@d1 1
@

