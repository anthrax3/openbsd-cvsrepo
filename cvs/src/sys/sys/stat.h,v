head	1.28;
access;
symbols
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.28.0.6
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.4
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.24.0.6
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.22.0.2
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.21.0.2
	OPENBSD_5_3_BASE:1.21
	OPENBSD_5_2:1.20.0.6
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.4
	OPENBSD_5_0:1.20.0.2
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.17.0.10
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.8
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.4
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.6
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.2
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.16.0.12
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.10
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.8
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.6
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.4
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.2
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.11
	UBC:1.9.0.4
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.12
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.10
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.8
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.6
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.4
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.28
date	2015.04.04.18.06.08;	author jca;	state Exp;
branches;
next	1.27;
commitid	IDHWfwPLrie9AM48;

1.27
date	2014.12.08.20.56.11;	author guenther;	state Exp;
branches;
next	1.26;
commitid	W5ntmn0jpthTCbn0;

1.26
date	2014.11.20.18.44.10;	author krw;	state Exp;
branches;
next	1.25;
commitid	MjmKBVr3Zxxr46JV;

1.25
date	2014.08.22.23.05.15;	author krw;	state Exp;
branches;
next	1.24;
commitid	Brlni1H9a1B2EXRZ;

1.24
date	2013.09.14.01.35.02;	author guenther;	state Exp;
branches;
next	1.23;

1.23
date	2013.08.13.05.52.27;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2013.06.04.02.23.56;	author guenther;	state Exp;
branches;
next	1.21;

1.21
date	2012.12.05.23.20.24;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2011.07.18.17.29.49;	author matthew;	state Exp;
branches;
next	1.19;

1.19
date	2011.07.18.00.16.54;	author matthew;	state Exp;
branches;
next	1.18;

1.18
date	2011.07.14.23.34.37;	author matthew;	state Exp;
branches;
next	1.17;

1.17
date	2009.01.29.22.08.45;	author guenther;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.13.00.35.23;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2005.06.18.18.09.43;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.13.21.04.29;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2004.07.09.23.52.01;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.28.21;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.16.16.10.24;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.10.16.21.05;	author millert;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2000.07.23.21.30.06;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	98.02.16.21.56.25;	author millert;	state Exp;
branches
	1.7.10.1;
next	1.6;

1.6
date	98.02.16.10.15.36;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.11.16.01.01.23;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.10.18.03.00.08;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.05.22.11.40.30;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.02.29.13.57.29;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.29;	author deraadt;	state Exp;
branches;
next	;

1.7.10.1
date	2001.05.14.22.45.04;	author niklas;	state Exp;
branches;
next	1.7.10.2;

1.7.10.2
date	2001.10.31.03.30.30;	author nate;	state Exp;
branches;
next	1.7.10.3;

1.7.10.3
date	2002.03.28.14.52.02;	author niklas;	state Exp;
branches;
next	1.7.10.4;

1.7.10.4
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.7.10.5;

1.7.10.5
date	2003.06.07.11.09.08;	author ho;	state Exp;
branches;
next	;

1.9.4.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	1.9.4.2;

1.9.4.2
date	2002.10.29.00.36.49;	author art;	state Exp;
branches;
next	;


desc
@@


1.28
log
@fchmod and lstat are standard, widen their visibility

ok millert@@ kettenis@@; input + "get it in" guenther@@
@
text
@/*	$OpenBSD: stat.h,v 1.27 2014/12/08 20:56:11 guenther Exp $	*/
/*	$NetBSD: stat.h,v 1.20 1996/05/16 22:17:49 cgd Exp $	*/

/*-
 * Copyright (c) 1982, 1986, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)stat.h	8.9 (Berkeley) 8/17/94
 */

#ifndef _SYS_STAT_H_
#define	_SYS_STAT_H_

#include <sys/time.h>

struct stat {
	mode_t	  st_mode;		/* inode protection mode */
	dev_t	  st_dev;		/* inode's device */
	ino_t	  st_ino;		/* inode's number */
	nlink_t	  st_nlink;		/* number of hard links */
	uid_t	  st_uid;		/* user ID of the file's owner */
	gid_t	  st_gid;		/* group ID of the file's group */
	dev_t	  st_rdev;		/* device type */
#if __POSIX_VISIBLE >= 200809 || __BSD_VISIBLE
	struct	timespec st_atim;	/* time of last access */
	struct	timespec st_mtim;	/* time of last data modification */
	struct	timespec st_ctim;	/* time of last file status change */
#else
	time_t    st_atime;		/* time of last access */
	long	  st_atimensec;		/* nsec of last access */
	time_t    st_mtime;		/* time of last data modification */
	long	  st_mtimensec;		/* nsec of last data modification */
	time_t    st_ctime;		/* time of last file status change */
	long	  st_ctimensec;		/* nsec of last file status change */
#endif /* __POSIX_VISIBLE >= 200809 || __BSD_VISIBLE */
	off_t	  st_size;		/* file size, in bytes */
	blkcnt_t  st_blocks;		/* blocks allocated for file */
	blksize_t st_blksize;		/* optimal blocksize for I/O */
	u_int32_t st_flags;		/* user defined flags for file */
	u_int32_t st_gen;		/* file generation number */
#if __POSIX_VISIBLE >= 200809 || __BSD_VISIBLE
	struct	timespec __st_birthtim;	/* time of file creation */
#else
	time_t    __st_birthtime;	/* time of file creation */
	long	  __st_birthtimensec;	/* nsec of file creation */
#endif /* __POSIX_VISIBLE >= 200809 || __BSD_VISIBLE */
};
#if __POSIX_VISIBLE >= 200809 || __BSD_VISIBLE
#define	st_atime		st_atim.tv_sec
#define	st_mtime		st_mtim.tv_sec
#define	st_ctime		st_ctim.tv_sec
#define	__st_birthtime		__st_birthtim.tv_sec
#endif
#if __BSD_VISIBLE
#define	st_atimespec		st_atim
#define	st_atimensec		st_atim.tv_nsec
#define	st_mtimespec		st_mtim
#define	st_mtimensec		st_mtim.tv_nsec
#define	st_ctimespec		st_ctim
#define	st_ctimensec		st_ctim.tv_nsec
#define	__st_birthtimespec	__st_birthtim
#define	__st_birthtimensec	__st_birthtim.tv_nsec
#endif

#define	S_ISUID	0004000			/* set user id on execution */
#define	S_ISGID	0002000			/* set group id on execution */
#if __BSD_VISIBLE
#define	S_ISTXT	0001000			/* sticky bit */
#endif

#define	S_IRWXU	0000700			/* RWX mask for owner */
#define	S_IRUSR	0000400			/* R for owner */
#define	S_IWUSR	0000200			/* W for owner */
#define	S_IXUSR	0000100			/* X for owner */

#if __BSD_VISIBLE
#define	S_IREAD		S_IRUSR
#define	S_IWRITE	S_IWUSR
#define	S_IEXEC		S_IXUSR
#endif

#define	S_IRWXG	0000070			/* RWX mask for group */
#define	S_IRGRP	0000040			/* R for group */
#define	S_IWGRP	0000020			/* W for group */
#define	S_IXGRP	0000010			/* X for group */

#define	S_IRWXO	0000007			/* RWX mask for other */
#define	S_IROTH	0000004			/* R for other */
#define	S_IWOTH	0000002			/* W for other */
#define	S_IXOTH	0000001			/* X for other */

#if __XPG_VISIBLE || __BSD_VISIBLE
#define	S_IFMT	 0170000		/* type of file mask */
#define	S_IFIFO	 0010000		/* named pipe (fifo) */
#define	S_IFCHR	 0020000		/* character special */
#define	S_IFDIR	 0040000		/* directory */
#define	S_IFBLK	 0060000		/* block special */
#define	S_IFREG	 0100000		/* regular */
#define	S_IFLNK	 0120000		/* symbolic link */
#define	S_IFSOCK 0140000		/* socket */
#define	S_ISVTX	 0001000		/* save swapped text even after use */
#endif

#define	S_ISDIR(m)	((m & 0170000) == 0040000)	/* directory */
#define	S_ISCHR(m)	((m & 0170000) == 0020000)	/* char special */
#define	S_ISBLK(m)	((m & 0170000) == 0060000)	/* block special */
#define	S_ISREG(m)	((m & 0170000) == 0100000)	/* regular file */
#define	S_ISFIFO(m)	((m & 0170000) == 0010000)	/* fifo */
#if __POSIX_VISIBLE >= 200112 || __BSD_VISIBLE
#define	S_ISLNK(m)	((m & 0170000) == 0120000)	/* symbolic link */
#define	S_ISSOCK(m)	((m & 0170000) == 0140000)	/* socket */
#endif

#if __POSIX_VISIBLE >= 200809
/* manadated to be present, but permitted to always return zero */
#define	S_TYPEISMQ(m)	0
#define	S_TYPEISSEM(m)	0
#define	S_TYPEISSHM(m)	0
#endif

#if __BSD_VISIBLE
#define	ACCESSPERMS	(S_IRWXU|S_IRWXG|S_IRWXO)	/* 00777 */
							/* 07777 */
#define	ALLPERMS	(S_ISUID|S_ISGID|S_ISTXT|S_IRWXU|S_IRWXG|S_IRWXO)
							/* 00666 */
#define	DEFFILEMODE	(S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)

#define	S_BLKSIZE	512		/* block size used in the stat struct */

/*
 * Definitions of flags stored in file flags word.
 *
 * Super-user and owner changeable flags.
 */
#define	UF_SETTABLE	0x0000ffff	/* mask of owner changeable flags */
#define	UF_NODUMP	0x00000001	/* do not dump file */
#define	UF_IMMUTABLE	0x00000002	/* file may not be changed */
#define	UF_APPEND	0x00000004	/* writes to file may only append */
#define	UF_OPAQUE	0x00000008	/* directory is opaque wrt. union */
/*
 * Super-user changeable flags.
 */
#define	SF_SETTABLE	0xffff0000	/* mask of superuser changeable flags */
#define	SF_ARCHIVED	0x00010000	/* file is archived */
#define	SF_IMMUTABLE	0x00020000	/* file may not be changed */
#define	SF_APPEND	0x00040000	/* writes to file may only append */

#ifdef _KERNEL
/*
 * Shorthand abbreviations of above.
 */
#define	OPAQUE		(UF_OPAQUE)
#define	APPEND		(UF_APPEND | SF_APPEND)
#define	IMMUTABLE	(UF_IMMUTABLE | SF_IMMUTABLE)
#endif /* _KERNEL */
#endif /* __BSD_VISIBLE */

#if __POSIX_VISIBLE >= 200809
#define	UTIME_NOW	-2L
#define	UTIME_OMIT	-1L
#endif /* __POSIX_VISIBLE */

#ifndef _KERNEL
__BEGIN_DECLS
int	chmod(const char *, mode_t);
int	fstat(int, struct stat *);
int	mknod(const char *, mode_t, dev_t);
int	mkdir(const char *, mode_t);
int	mkfifo(const char *, mode_t);
int	stat(const char *, struct stat *);
mode_t	umask(mode_t);
#if __POSIX_VISIBLE >= 200112L || __XPG_VISIBLE >= 420 || __BSD_VISIBLE
int	fchmod(int, mode_t);
int	lstat(const char *, struct stat *);
#endif
#if __POSIX_VISIBLE >= 200809
int	fchmodat(int, const char *, mode_t, int);
int	fstatat(int, const char *, struct stat *, int);
int	mkdirat(int, const char *, mode_t);
int	mkfifoat(int, const char *, mode_t);
int	mknodat(int, const char *, mode_t, dev_t);
int	utimensat(int, const char *, const struct timespec [2], int);
int	futimens(int, const struct timespec [2]);
#endif
#if __BSD_VISIBLE
int	chflags(const char *, unsigned int);
int	chflagsat(int, const char *, unsigned int, int);
int	fchflags(int, unsigned int);
int	isfdtype(int, int);
#endif
__END_DECLS
#endif
#endif /* !_SYS_STAT_H_ */
@


1.27
log
@Add chflagsat(), modeled on fchmodat() with name to match FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.26 2014/11/20 18:44:10 krw Exp $	*/
d201 4
a217 2
int	fchmod(int, mode_t);
int	lstat(const char *, struct stat *);
@


1.26
log
@Be more POSIXy by using blksize_t (a.k.a. int32) for st_blksize, rather than the current uint32_t.

ok guenther@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.25 2014/08/22 23:05:15 krw Exp $	*/
d212 1
@


1.25
log
@POSIX/FreeBSD/NetBSD/Linux/etc agree -- blk[size|cnt]_t is the bomb.

So add the types blksize_t (a.k.a. int32_t) and blkcnt_t (a.k.a.
int64_t). Use blkcnt_t in stat.h since the base type (int64_t) does
not change. blksize_t in stat.h will follow after the tree is audited
for signed issues, since the base type will change from u_int32_t
to a POSIX compliant int32_t.

Guidance and feedback from guenther@@

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.24 2013/09/14 01:35:02 guenther Exp $	*/
d67 1
a67 1
	u_int32_t st_blksize;		/* optimal blocksize for I/O */
@


1.24
log
@Snapshots for all archs have been built, so remove the T32 code
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.23 2013/08/13 05:52:27 guenther Exp $	*/
d66 1
a66 1
	int64_t	  st_blocks;		/* blocks allocated for file */
@


1.23
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.22 2013/06/04 02:23:56 guenther Exp $	*/
a76 45
#ifdef _KERNEL
struct stat32 {
	dev_t	  st_dev;		/* inode's device */
	ino32_t	  st_ino;		/* inode's number */
	mode_t	  st_mode;		/* inode protection mode */
	nlink_t	  st_nlink;		/* number of hard links */
	uid_t	  st_uid;		/* user ID of the file's owner */
	gid_t	  st_gid;		/* group ID of the file's group */
	dev_t	  st_rdev;		/* device type */
	int32_t	  st_lspare0;
	struct	timespec32 st_atim;	/* time of last access */
	struct	timespec32 st_mtim;	/* time of last data modification */
	struct	timespec32 st_ctim;	/* time of last file status change */
	off_t	  st_size;		/* file size, in bytes */
	int64_t	  st_blocks;		/* blocks allocated for file */
	u_int32_t st_blksize;		/* optimal blocksize for I/O */
	u_int32_t st_flags;		/* user defined flags for file */
	u_int32_t st_gen;		/* file generation number */
	int32_t	  st_lspare1;
	struct	timespec32 __st_birthtim;	/* time of file creation */
	int64_t	  st_qspare[2];
};
#define STAT_TO_32(st32, st) {						\
	(st32)->st_dev = (st)->st_dev;					\
	(st32)->st_ino = (st)->st_ino;					\
	(st32)->st_mode = (st)->st_mode;				\
	(st32)->st_nlink = (st)->st_nlink;				\
	(st32)->st_uid = (st)->st_uid;					\
	(st32)->st_gid = (st)->st_gid;					\
	(st32)->st_rdev = (st)->st_rdev;				\
	(st32)->st_atim.tv_sec = (st)->st_atim.tv_sec;			\
	(st32)->st_atim.tv_nsec = (st)->st_atim.tv_nsec;		\
	(st32)->st_mtim.tv_sec = (st)->st_mtim.tv_sec;			\
	(st32)->st_mtim.tv_nsec = (st)->st_mtim.tv_nsec;		\
	(st32)->st_ctim.tv_sec = (st)->st_ctim.tv_sec;			\
	(st32)->st_ctim.tv_nsec = (st)->st_ctim.tv_nsec;		\
	(st32)->st_size = (st)->st_size;				\
	(st32)->st_blocks = (st)->st_blocks;				\
	(st32)->st_blksize = (st)->st_blksize;				\
	(st32)->st_flags = (st)->st_flags;				\
	(st32)->st_gen = (st)->st_gen;					\
	(st32)->__st_birthtim.tv_sec = (st)->__st_birthtim.tv_sec;	\
	(st32)->__st_birthtim.tv_nsec = (st)->__st_birthtim.tv_nsec;	\
}
#endif
@


1.22
log
@Since we now have shm_{open,unlink}(), add the S_TYPEIS{MQ,SEM,SHM}()
macros that are mandated by POSIX

ok matthew@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.21 2012/12/05 23:20:24 deraadt Exp $	*/
d46 1
a48 1
	mode_t	  st_mode;		/* inode protection mode */
a52 1
	int32_t	  st_lspare0;
d58 1
a58 1
	time_t	  st_atime;		/* time of last access */
d60 1
a60 1
	time_t	  st_mtime;		/* time of last data modification */
d62 1
a62 1
	time_t	  st_ctime;		/* time of last file status change */
a69 1
	int32_t	  st_lspare1;
d73 1
a73 1
	time_t	  __st_birthtime;	/* time of file creation */
d76 21
d99 23
@


1.21
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.20 2011/07/18 17:29:49 matthew Exp $	*/
d144 7
@


1.20
log
@Expose a bunch of new functionality from POSIX 2008: openat(2),
fchmodat(2), fstatat(2), mkdirat(2), mkfifoat(2), mknodat(2),
faccessat(2), fchownat(2), linkat(2), readlinkat(2), renameat(2),
symlinkat(2), unlinkat(2), utimensat(2), futimens(2), and
fdopendir(3).

"Minor" libc bump.

Tested in a bulk build by naddy@@
Much help from guenther@@, thib@@, tedu@@, oga@@, and others.
ok deraadt@@, naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.19 2011/07/18 00:16:54 matthew Exp $	*/
a42 1
#include <sys/cdefs.h>
@


1.19
log
@Add support for UTIME_OMIT and UTIME_NOW to utimensat(2), add the
futimens(2) system call, and refactor futimes(2) to share the same
code.  (As with other openat(2) system call stuff, this is not exposed
to userland yet.)

naddy@@ pointed out rsync expects UTIME_* if openat(2) is available
tweaks and ok guenther@@; tested by naddy@@ in a bulk build
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.18 2011/07/14 23:34:37 matthew Exp $	*/
a183 1
#ifdef _KERNEL /* XXX */
a187 1
#endif
d198 9
@


1.18
log
@"struct stat35" and "struct stat43" aren't needed anymore.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.17 2009/01/29 22:08:45 guenther Exp $	*/
d183 7
@


1.17
log
@Switch struct stat's timespec members to the names standardized in
POSIX 1003.1-2008, with compatibility macros for the names used in
previous version of OpenBSD.  Update all the references in the
kernel to use the new, standard member names.

ok'ed by miod@@, otto@@; ports build test by naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.16 2005/12/13 00:35:23 millert Exp $	*/
a44 40

#ifdef _KERNEL
struct stat43 {
	u_int16_t st_dev;		/* inode's device */
	ino_t	  st_ino;		/* inode's number */
	u_int16_t st_mode;		/* inode protection mode */
	u_int16_t st_nlink;		/* number of hard links */
	u_int16_t st_uid;		/* user ID of the file's owner */
	u_int16_t st_gid;		/* group ID of the file's group */
	u_int16_t st_rdev;		/* device type */
	int32_t	  st_size;		/* file size, in bytes */
	struct	timespec st_atim;	/* time of last access */
	struct	timespec st_mtim;	/* time of last data modification */
	struct	timespec st_ctim;	/* time of last file status change */
	int32_t	  st_blksize;		/* optimal blocksize for I/O */
	int32_t	  st_blocks;		/* blocks allocated for file */
	u_int32_t st_flags;		/* user defined flags for file */
	u_int32_t st_gen;		/* file generation number */
};

struct stat35 {
	dev_t	  st_dev;		/* inode's device */
	ino_t	  st_ino;		/* inode's number */
	u_int16_t  st_mode;		/* inode protection mode */
	u_int16_t  st_nlink;		/* number of hard links */
	uid_t	  st_uid;		/* user ID of the file's owner */
	gid_t	  st_gid;		/* group ID of the file's group */
	dev_t	  st_rdev;		/* device type */
	struct	timespec st_atim;	/* time of last access */
	struct	timespec st_mtim;	/* time of last data modification */
	struct	timespec st_ctim;	/* time of last file status change */
	off_t	  st_size;		/* file size, in bytes */
	int64_t	  st_blocks;		/* blocks allocated for file */
	u_int32_t st_blksize;		/* optimal blocksize for I/O */
	u_int32_t st_flags;		/* user defined flags for file */
	u_int32_t st_gen;		/* file generation number */
	int32_t	  st_lspare;
	int64_t	  st_qspare[2];
};
#endif /* !_KERNEL */
@


1.16
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.15 2005/06/18 18:09:43 millert Exp $	*/
d56 3
a58 3
	struct	timespec st_atimespec;	/* time of last access */
	struct	timespec st_mtimespec;	/* time of last data modification */
	struct	timespec st_ctimespec;	/* time of last file status change */
d73 3
a75 3
	struct	timespec st_atimespec;	/* time of last access */
	struct	timespec st_mtimespec;	/* time of last data modification */
	struct	timespec st_ctimespec;	/* time of last file status change */
d95 4
a98 4
#if __BSD_VISIBLE
	struct	timespec st_atimespec;	/* time of last access */
	struct	timespec st_mtimespec;	/* time of last data modification */
	struct	timespec st_ctimespec;	/* time of last file status change */
d106 1
a106 1
#endif /* __BSD_VISIBLE */
d113 2
a114 2
#if __BSD_VISIBLE
	struct	timespec __st_birthtimespec; /* time of file creation */
d118 1
a118 1
#endif
d121 6
d128 8
a135 6
#define	st_atime	st_atimespec.tv_sec
#define	st_atimensec	st_atimespec.tv_nsec
#define	st_mtime	st_mtimespec.tv_sec
#define	st_mtimensec	st_mtimespec.tv_nsec
#define	st_ctime	st_ctimespec.tv_sec
#define	st_ctimensec	st_ctimespec.tv_nsec
@


1.15
log
@Remove remaining whiteout tentacles; OK deraadt@@ miod@@ weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.14 2004/07/13 21:04:29 millert Exp $	*/
d43 1
d95 1
a95 1
#ifndef _POSIX_SOURCE
d106 1
a106 1
#endif
d113 1
a113 1
#ifndef _POSIX_SOURCE
d121 1
a121 1
#ifndef _POSIX_SOURCE
d132 1
a132 1
#ifndef _POSIX_SOURCE
d141 1
a141 1
#ifndef _POSIX_SOURCE
d157 1
a157 1
#ifndef _POSIX_SOURCE
d174 1
a174 1
#ifndef _POSIX_SOURCE
d179 1
a179 1
#ifndef _POSIX_SOURCE
d213 2
a214 2
#endif
#endif
a216 2
#include <sys/cdefs.h>

d225 1
a225 1
#ifndef _POSIX_SOURCE
@


1.14
log
@Change mode_t and nlink_t from 16bit to 32bit.  This allows us to
use mode_t in syscalls.master and to use mode_t in more places in
the kernel.  It also makes lint much more useful on kernel code.

I've also added a placeholder for st_birthtime to make a UFS2 import
easier at some future date.

Requested by and OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.13 2004/07/09 23:52:01 millert Exp $	*/
a164 1
#define	S_IFWHT  0160000		/* whiteout */
a175 1
#define	S_ISWHT(m)	((m & 0170000) == 0160000)	/* whiteout */
@


1.13
log
@Rename ostat -> stat43 to disambiguate from upcoming struct stat changes.
Idea from NetBSD, OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.12 2003/06/02 23:28:21 millert Exp $	*/
d49 2
a50 2
	mode_t	  st_mode;		/* inode protection mode */
	nlink_t	  st_nlink;		/* number of hard links */
d63 20
d93 1
d111 7
a117 1
	int32_t	  st_lspare;
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.11 2002/10/16 16:10:24 millert Exp $	*/
d46 1
a46 1
struct ostat {
@


1.11
log
@Implement isfdtype(3) as per the POSIX.1g draft; requested by David Hill
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.10 2002/03/14 01:27:14 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.9 2001/09/10 16:21:05 millert Exp $	*/
d210 1
@


1.9
log
@fix typo in comment; d.doroshenko@@omnitel.net
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.8 2000/07/23 21:30:06 pjanzen Exp $	*/
d198 12
a209 12
int	chmod __P((const char *, mode_t));
int	fstat __P((int, struct stat *));
int	mknod __P((const char *, mode_t, dev_t));
int	mkdir __P((const char *, mode_t));
int	mkfifo __P((const char *, mode_t));
int	stat __P((const char *, struct stat *));
mode_t	umask __P((mode_t));
#ifndef _POSIX_SOURCE
int	chflags __P((const char *, unsigned int));
int	fchflags __P((int, unsigned int));
int	fchmod __P((int, mode_t));
int	lstat __P((const char *, struct stat *));
@


1.9.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.9 2001/09/10 16:21:05 millert Exp $	*/
d198 12
a209 12
int	chmod(const char *, mode_t);
int	fstat(int, struct stat *);
int	mknod(const char *, mode_t, dev_t);
int	mkdir(const char *, mode_t);
int	mkfifo(const char *, mode_t);
int	stat(const char *, struct stat *);
mode_t	umask(mode_t);
#ifndef _POSIX_SOURCE
int	chflags(const char *, unsigned int);
int	fchflags(int, unsigned int);
int	fchmod(int, mode_t);
int	lstat(const char *, struct stat *);
@


1.9.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.9.4.1 2002/06/11 03:32:33 art Exp $	*/
a209 1
int	isfdtype(int, int);
@


1.8
log
@Consistent tabs
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.7 1998/02/16 21:56:25 millert Exp $	*/
d158 2
a159 2
#define	ACCESSPERMS	(S_IRWXU|S_IRWXG|S_IRWXO)	/* 0777 */
							/* 7777 */
d161 1
a161 1
							/* 0666 */
@


1.7
log
@Make "flags" field in f?chflags(2) consistent--unsigned int
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.6 1998/02/16 10:15:36 deraadt Exp $	*/
d164 1
a164 1
#define S_BLKSIZE	512		/* block size used in the stat struct */
d175 1
a175 1
#define UF_OPAQUE	0x00000008	/* directory is opaque wrt. union */
@


1.7.10.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.8 2000/07/23 21:30:06 pjanzen Exp $	*/
d164 1
a164 1
#define	S_BLKSIZE	512		/* block size used in the stat struct */
d175 1
a175 1
#define	UF_OPAQUE	0x00000008	/* directory is opaque wrt. union */
@


1.7.10.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.7.10.1 2001/05/14 22:45:04 niklas Exp $	*/
d158 2
a159 2
#define	ACCESSPERMS	(S_IRWXU|S_IRWXG|S_IRWXO)	/* 00777 */
							/* 07777 */
d161 1
a161 1
							/* 00666 */
@


1.7.10.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d198 12
a209 12
int	chmod(const char *, mode_t);
int	fstat(int, struct stat *);
int	mknod(const char *, mode_t, dev_t);
int	mkdir(const char *, mode_t);
int	mkfifo(const char *, mode_t);
int	stat(const char *, struct stat *);
mode_t	umask(mode_t);
#ifndef _POSIX_SOURCE
int	chflags(const char *, unsigned int);
int	fchflags(int, unsigned int);
int	fchmod(int, mode_t);
int	lstat(const char *, struct stat *);
@


1.7.10.4
log
@Sync the SMP branch with 3.3
@
text
@a209 1
int	isfdtype(int, int);
@


1.7.10.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.7.10.4 2003/03/28 00:41:30 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.6
log
@proto chflags() and fchflags() to take an int, as they do
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.5 1997/11/16 01:01:23 deraadt Exp $	*/
d206 2
a207 2
int	chflags __P((const char *, int));
int	fchflags __P((int, int));
@


1.5
log
@move proto to sys/stat.h; XPG4.2
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.4 1996/10/18 03:00:08 tholo Exp $	*/
d206 2
a207 2
int	chflags __P((const char *, u_long));
int	fchflags __P((int, u_long));
@


1.4
log
@Gleaned from a NetBSD commit by jtc:
> S_ISFIFO(x) should not return true with sockets.  S_ISSOCK(x) should
> not return true with fifos.  Users who want the previous behavior can
> use (S_ISFIFO(x) || S_ISSOCK(x)).
@
text
@d1 1
a1 1
/*	$OpenBSD: stat.h,v 1.3 1996/05/22 11:40:30 deraadt Exp $	*/
d200 1
@


1.3
log
@do not expose struct ostat to userland
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d150 1
a150 2
#define	S_ISFIFO(m)	((m & 0170000) == 0010000 || \
			 (m & 0170000) == 0140000)	/* fifo or socket */
d153 1
a153 2
#define	S_ISSOCK(m)	((m & 0170000) == 0010000 || \
			 (m & 0170000) == 0140000)	/* fifo or socket */
@


1.2
log
@From NetBSD: Merge with NetBSD 960217
@
text
@d2 1
a2 1
/*	$NetBSD: stat.h,v 1.17 1995/06/15 23:08:08 cgd Exp $	*/
d49 1
a49 1
#ifndef _POSIX_SOURCE
d67 1
a67 1
#endif /* !_POSIX_SOURCE */
@


1.1
log
@Initial revision
@
text
@d1 1
d98 6
a103 6
#define	st_atime	st_atimespec.ts_sec
#define	st_atimensec	st_atimespec.ts_nsec
#define	st_mtime	st_mtimespec.ts_sec
#define	st_mtimensec	st_mtimespec.ts_nsec
#define	st_ctime	st_ctimespec.ts_sec
#define	st_ctimensec	st_ctimespec.ts_nsec
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
