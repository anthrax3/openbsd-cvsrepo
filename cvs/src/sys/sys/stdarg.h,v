head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.26
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.22
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.18
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.20
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.12
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.16
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.14
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.10
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.8
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.6
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.4.0.12
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.10
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	SMP:1.2.0.2;
locks; strict;
comment	@ * @;


1.8
date	2011.03.02.18.31.58;	author matthew;	state Exp;
branches;
next	1.7;

1.7
date	2009.09.17.20.46.55;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2008.12.21.09.59.24;	author ragge;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.23.21.25.08;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.06.18.53.06;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.26.17.21.59;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.03.14.55.34;	author espie;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.01.03.14.08.54;	author espie;	state Exp;
branches;
next	;

1.2.2.1
date	2004.02.19.11.01.34;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2004.06.05.23.13.10;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Change va_arg and va_end definitions from object-like macros to
function-like macros.  Allows (questionable but legal) use of "va_arg"
as a local variable name in code that includes <stdarg.h>.

"seems right" deraadt@@
@
text
@/*	$OpenBSD: stdarg.h,v 1.7 2009/09/17 20:46:55 jsg Exp $ */
/*
 * Copyright (c) 2003, 2004  Marc espie <espie@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _STDARG_H_
#define _STDARG_H_

#include <sys/cdefs.h>

#if (defined(__GNUC__) && __GNUC__ >= 3) || defined(__PCC__)

/* Define __gnuc_va_list.  */

#ifndef __GNUC_VA_LIST
#define __GNUC_VA_LIST
typedef __builtin_va_list __gnuc_va_list;
#endif

/* Note that the type used in va_arg is supposed to match the
   actual type **after default promotions**.
   Thus, va_arg (..., short) is not valid.  */

#define va_start(ap, last)	__builtin_va_start((ap), last)
#define va_end(ap)		__builtin_va_end((ap))
#define va_arg(ap, type)	__builtin_va_arg((ap), type)
#define __va_copy(dst, src)	__builtin_va_copy((dst),(src))

typedef __gnuc_va_list va_list;

#else
#include <machine/stdarg.h>
#endif

#if __ISO_C_VISIBLE >= 1999
#define	va_copy(dst, src)	__va_copy((dst), (src))
#endif

#endif /* not _STDARG_H_ */
@


1.7
log
@Use __builtin_va_start instead of __builtin_stdarg_start
for va_start() which was only present for backwards compat
and has been removed from recent versions of GCC.

Our in tree GCC 3.3.5 has __builtin_va_start and this
section of code is only run if __GNUC__ >= 3 already.

ok espie@@ kettenis@@ millert@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.6 2008/12/21 09:59:24 ragge Exp $ */
d37 2
a38 2
#define va_end			__builtin_va_end
#define va_arg			__builtin_va_arg
@


1.6
log
@Teach the header files not to bail out if pcc is used instead of gcc.
Ok deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.5 2008/10/23 21:25:08 kettenis Exp $ */
d36 1
a36 1
#define va_start(ap, last)	__builtin_stdarg_start((ap), last)
@


1.5
log
@Move the va_copy define to <sys/stdrag.h> making sure it is uniformaly
protected by __ISO_C_VISIBLE > 1999.  With a little help from miod@@.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.4 2006/01/06 18:53:06 millert Exp $ */
d23 1
a23 1
#if defined(__GNUC__) && __GNUC__ >= 3
@


1.4
log
@Adapt things to use __type_t instead of _BSD_TYPE_T_
Add new sys/_types.h header
Include machine/_types.h or sys/_types.h where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.3 2004/02/26 17:21:59 drahn Exp $ */
d21 2
d36 4
a39 6
#define va_start(v,l)	__builtin_stdarg_start((v),l)
#define va_end		__builtin_va_end
#define va_arg		__builtin_va_arg
#define va_copy(d,s)	__builtin_va_copy((d),(s))
#define __va_copy(d,s)	__builtin_va_copy((d),(s))

d45 4
@


1.3
log
@add __va_copy(), follow (old) ISO C 89 behavior, used by gnu software.
ok espie@@ millert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.2 2004/01/03 14:55:34 espie Exp $ */
a21 1
#include <machine/ansi.h>
@


1.2
log
@switch to shorter licence at millert@@ suggestion.
@
text
@d1 1
a1 1
/*	$OpenBSD: stdarg.h,v 1.1 2004/01/03 14:08:54 espie Exp $ */
d39 1
@


1.2.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@


1.2.2.2
log
@Merge with the trunk
@
text
@a38 1
#define __va_copy(d,s)	__builtin_va_copy((d),(s))
@


1.1
log
@put an mi wrapper around stdarg.h/varargs.h. gcc3 moved stdarg/varargs macros
to built-ins, so eventually we will have one version of these files.
Special adjustments for the kernel to cope: machine/stdarg.h -> sys/stdarg.h
and machine/ansi.h needs to have a _BSD_VA_LIST_ for syslog* prototypes.
okay millert@@, drahn@@, miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d3 1
a3 1
 * Copyright (c) 2003 Marc Espie.
d5 3
a7 8
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
d9 7
a15 11
 * THIS SOFTWARE IS PROVIDED BY THE OPENBSD PROJECT AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OPENBSD
 * PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d17 1
@

