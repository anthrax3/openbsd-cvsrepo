head	1.6;
access;
symbols
	OPENBSD_5_6:1.5.0.18
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.16
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.12
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.10
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.8
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.6
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.26
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.22
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.24
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.3.0.4
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.1
	SMP:1.1.0.8
	OPENBSD_3_3:1.1.0.6
	OPENBSD_3_3_BASE:1.1
	UBC:1.1.0.4
	UBC_SYNC_B:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2014.12.19.09.41.40;	author tedu;	state dead;
branches;
next	1.5;
commitid	wztbtOyX2cquh63k;

1.5
date	2010.09.24.13.24.53;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.25.18.37.23;	author jmc;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.03.00.57.47;	author weingart;	state Exp;
branches;
next	1.2;

1.2
date	2003.06.01.05.23.23;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.11.22.27.03;	author ericj;	state Exp;
branches
	1.1.4.1
	1.1.8.1;
next	;

1.1.4.1
date	2002.10.29.00.36.49;	author art;	state Exp;
branches;
next	;

1.1.8.1
date	2003.06.07.11.09.07;	author ho;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2004.06.05.23.13.09;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove hash.h. no longer needed. ok reyk
@
text
@/*	$OpenBSD: hash.h,v 1.5 2010/09/24 13:24:53 claudio Exp $	*/

/*
 * Copyright (c) 2001 Tobias Weingartner
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _SYS_HASH_H_
#define	_SYS_HASH_H_
#include <sys/types.h>

/*
 * Note: SMALL_KERNEL might be used to shrink these, right now I
 * do not see the point, as my kernel did not grow appreciably when
 * I switched to these from other inline code.  This may have to be
 * revisited when/if these functions become more prevalent in the
 * kernel.
 */

/* Convenience */
#ifndef	HASHINIT
#define	HASHINIT	5381
#define	HASHSTEP(x,c)	(((x << 5) + x) + (c))
#endif

/*
 * Return a 32-bit hash of the given buffer.  The init
 * value should be 0, or the previous hash value to extend
 * the previous hash.
 */
static __inline uint32_t
hash32_buf(const void *buf, size_t len, uint32_t hash)
{
	const unsigned char *p = buf;

	while (len--)
		hash = HASHSTEP(hash, *p++);

	return hash;
}

/*
 * Return a 32-bit hash of the given string.
 */
static __inline uint32_t
hash32_str(const void *buf, uint32_t hash)
{
	const unsigned char *p = buf;

	while (*p)
		hash = HASHSTEP(hash, *p++);

	return hash;
}

/*
 * Return a 32-bit hash of the given string, limited by N.
 */
static __inline uint32_t
hash32_strn(const void *buf, size_t len, uint32_t hash)
{
	const unsigned char *p = buf;

	while (*p && len--)
		hash = HASHSTEP(hash, *p++);

	return hash;
}

/*
 * Return a 32-bit hash of the given string terminated by C,
 * (as well as 0).  This is mainly here as a helper for the
 * namei() hashing of path name parts.
 */
static __inline uint32_t
hash32_stre(const void *buf, int end, const char **ep, uint32_t hash)
{
	const unsigned char *p = buf;

	while (*p && (*p != end))
		hash = HASHSTEP(hash, *p++);

	if (ep)
		*ep = p;

	return hash;
}

/*
 * Return a 32-bit hash of the given string, limited by N,
 * and terminated by C (as well as 0).  This is mainly here
 * as a helper for the namei() hashing of path name parts.
 */
static __inline uint32_t
hash32_strne(const void *buf, size_t len, int end, const char **ep,
    uint32_t hash)
{
	const unsigned char *p = buf;

	while (*p && (*p != end) && len--)
		hash = HASHSTEP(hash, *p++);

	if (ep)
		*ep = p;

	return hash;
}
#endif /* !_SYS_HASH_H_ */
@


1.5
log
@Make the endpointer also const so that there is no warning from gcc4
about discarding a qualifier.
OK deraadt@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.h,v 1.4 2004/05/25 18:37:23 jmc Exp $	*/
@


1.4
log
@typo from jared yanovich;
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.h,v 1.3 2003/06/03 00:57:47 weingart Exp $	*/
d96 1
a96 1
hash32_stre(const void *buf, int end, char **ep, uint32_t hash)
d104 1
a104 1
		*ep = (char *)p;
d115 2
a116 1
hash32_strne(const void *buf, size_t len, int end, char **ep, uint32_t hash)
d124 1
a124 1
		*ep = (char *)p;
@


1.3
log
@Nuke terms 3 & 4 on some of my software.
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.h,v 1.2 2003/06/01 05:23:23 tedu Exp $	*/
d36 1
a36 1
 * revisited when/if these functions become more prevalant in the
@


1.2
log
@spelling, prelevant -> prevalent
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.h,v 1.1 2002/06/11 22:27:03 ericj Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    This product includes software developed by Tobias Weingartner.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.1
log
@
hash functions for use in the kernel
from weingart@@

ok weingart@@, art@@, espie@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
 * revisited when/if these functions become more prelevant in the
@


1.1.8.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hash.h,v 1.1 2002/06/11 22:27:03 ericj Exp $	*/
d15 5
d41 1
a41 1
 * revisited when/if these functions become more prevalant in the
@


1.1.8.2
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 1
 * revisited when/if these functions become more prevalent in the
@


1.1.4.1
log
@sync to -current
@
text
@@

