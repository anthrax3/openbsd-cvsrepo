head	1.14;
access;
symbols
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.14
date	2015.10.09.01.10.27;	author deraadt;	state dead;
branches;
next	1.13;
commitid	av6ZVErLSWkVP5Zz;

1.13
date	2015.10.08.17.29.43;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	hnJbXUn2yElhWXFF;

1.12
date	2015.10.07.19.52.54;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	IGhnuDU3vY4XDUz1;

1.11
date	2015.10.07.03.47.43;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	Ge0gajSA2YHu7mGQ;

1.10
date	2015.10.06.15.21.26;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	ZuHSGSKpxfpgDZgj;

1.9
date	2015.10.06.14.55.41;	author claudio;	state Exp;
branches;
next	1.8;
commitid	aKDI9c1pZxa7lXR3;

1.8
date	2015.09.30.11.36.07;	author semarie;	state Exp;
branches;
next	1.7;
commitid	TMIPnGR2J26p7mlU;

1.7
date	2015.09.11.15.29.47;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	0NZe9BgjJety4Dtk;

1.6
date	2015.09.09.17.56.59;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	LR11yk102SoyZdKV;

1.5
date	2015.08.26.05.20.06;	author doug;	state Exp;
branches;
next	1.4;
commitid	B5zLNz9UGGYolarc;

1.4
date	2015.08.22.20.18.50;	author deraadt;	state Exp;
branches;
next	1.3;
commitid	6NDuzTPjBp2GqkfQ;

1.3
date	2015.07.28.15.22.25;	author deraadt;	state Exp;
branches;
next	1.2;
commitid	moA8QuVyWFnzHz5B;

1.2
date	2015.07.27.17.48.06;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	oWXDexTwRd5kzbwH;

1.1
date	2015.07.19.02.35.35;	author deraadt;	state Exp;
branches;
next	;
commitid	CJwjm9NDWu6nJ6ES;


desc
@@


1.14
log
@Rename tame() to pledge().  This fairly interface has evolved to be more
strict than anticipated.  It allows a programmer to pledge/promise/covenant
that their program will operate within an easily defined subset of the
Unix environment, or it pays the price.
@
text
@/*	$OpenBSD: tame.h,v 1.13 2015/10/08 17:29:43 deraadt Exp $	*/

/*
 * Copyright (c) 2015 Nicholas Marriott <nicm@@openbsd.org>
 * Copyright (c) 2015 Theo de Raadt <deraadt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _SYS_TAME_H_
#define _SYS_TAME_H_

#ifdef _KERNEL

#include <sys/cdefs.h>

#define TAME_SELF	0x00000001	/* operate on own pid */
#define TAME_RW		0x00000002	/* basic io operations */
#define TAME_MALLOC	0x00000004	/* enough for malloc */
#define TAME_DNSPATH	0x00000008	/* access to DNS pathnames */
#define TAME_RPATH	0x00000010	/* allow open for read */
#define TAME_WPATH	0x00000020	/* allow open for write */
#define TAME_TMPPATH	0x00000040	/* for mk*temp() */
#define TAME_INET	0x00000080	/* AF_INET/AF_INET6 sockets */
#define TAME_UNIX	0x00000100	/* AF_UNIX sockets */
// reuse, old CMSG	0x00000200
#define TAME_IOCTL	0x00000400	/* Select ioctl */
#define TAME_GETPW	0x00000800	/* YP enables if ypbind.lock */
#define TAME_PROC	0x00001000	/* fork, waitpid, etc */
#define TAME_CPATH	0x00002000	/* allow creat, mkdir, path creations */
#define TAME_FATTR	0x00004000	/* allow explicit file st_* mods */
#define TAME_PROTEXEC	0x00008000	/* allow use of PROT_EXEC */
#define TAME_TTY	0x00010000	/* tty setting */
#define TAME_SENDFD	0x00020000	/* AF_UNIX CMSG fd sending */
#define TAME_RECVFD	0x00040000	/* AF_UNIX CMSG fd receiving */
#define TAME_EXEC	0x00080000	/* execve, child is free of tame */
#define TAME_ROUTE	0x00100000	/* routing lookups */
#define TAME_MCAST	0x00200000	/* multicast joins */

#define TAME_ABORT	0x08000000	/* SIGABRT instead of SIGKILL */

/* Following flags are set by kernel, as it learns things.
 * Not user settable. Should be moved to a seperate variable */
#define TAME_USERSET	0x0fffffff
#define TAME_YP_ACTIVE	0x10000000	/* YP use detected and allowed */
#define TAME_DNS_ACTIVE	0x20000000	/* DNS use detected and allowed */

int	tame_check(struct proc *, int);
int	tame_fail(struct proc *, int, int);
int	tame_namei(struct proc *, char *);
void	tame_aftersyscall(struct proc *, int, int);

struct mbuf;
int	tame_cmsg_send(struct proc *p, struct mbuf *control);
int	tame_cmsg_recv(struct proc *p, struct mbuf *control);
int	tame_sysctl_check(struct proc *p, int namelen, int *name, void *new);
int	tame_adjtime_check(struct proc *p, const void *v);
int	tame_recvfrom_check(struct proc *p, void *from);
int	tame_sendto_check(struct proc *p, const void *to);
int	tame_bind_check(struct proc *p, const void *v);
int	tame_connect_check(struct proc *p);
int	tame_socket_check(struct proc *p, int domain);
int	tame_setsockopt_check(struct proc *p, int level, int optname);
int	tame_dns_check(struct proc *p, in_port_t port);
int	tame_ioctl_check(struct proc *p, long com, void *);

#define TAME_MAXPATHS	8192

struct whitepaths {
	size_t	wl_size;
	int	wl_count;
	int	wl_ref;
	struct whitepath {
		char		*name;
		size_t		len;
	} wl_paths[0];
};
void	tame_dropwpaths(struct process *);

#endif /* _KERNEL */

#endif /* _SYS_TAME_H_ */
@


1.13
log
@Expose a small set of multicast join operators under the request "mcast".
This will be used by a few daemons.  If they lack this feature, then
they would need to operate without tame.
Discussed with renato
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.12 2015/10/07 19:52:54 deraadt Exp $	*/
@


1.12
log
@Split out routing sysctl's from tame "inet", and put them into the
new tame "route" request.  Now routing daemons and tools (such as arp),
can narrowly ask for either feature.  One thing remains available in
both cases -- support for getifaddr()'s, since libc and programs often
use that in close association with socket creation.
ok benno sthen beck, some discussion with renato
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.11 2015/10/07 03:47:43 deraadt Exp $	*/
d48 1
@


1.11
log
@Add the tame "exec" request.  This allows processes which request
"exec" to call execve(2), potentially fork(2) beforehands if they
asked for "proc".  Calling execve is what "shells" (ksh, tmux, etc)
have as their primary purpose.  But meantime, if such a shell has a
nasty bug, we want to mitigate the process from opening a socket or
calling 100+ other system calls.  Unfortunately silver bullets are in
short supply, so if our goal is to stay in a POSIX-y environment, we
have to let shells call execve().  POSIX ate the world, so choices do
we all have?
Warning for many: silver bullets are even more rare in other OS
ecosystems, so please accept this as a narrow lowering of the bar in a
very raised environment.
Commited from a machine running tame "proc exec" ksh, make, etc.
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.10 2015/10/06 15:21:26 deraadt Exp $	*/
d47 1
@


1.10
log
@Add new "tty" request, which allows TIOCGETA, TIOCGPGRP, TIOCGWINSZ,
TIOCSBRK, TIOCCDTR, TIOCSETA, TIOCSETAW, and TIOCSETAF on tty
vnodes. This helps programs which call tcsetattr(), tcgetattr(), or
readpassphrase().  Especially the latter - tame's goal is to satisfy
the libc requirements of security-sensitive programs.

Remove TIOCSETAF from the basic "ioctl" request, because it is a "set"
option. "ioctl" is slowly turning into a "request information, cannot
set options" package.

Split the "cmsg" request into "sendfd" and "recvfd".  Non-SCM_RIGHTS
messages are currently flowing through freely and we'll need to think
about that.  This split lets us more strictly describe what our many
fd-passing programs will do.
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.9 2015/10/06 14:55:41 claudio Exp $	*/
d46 1
d86 1
@


1.9
log
@Rework the tame cmsg handler to make it work both ways. While on recv one
mbuf blob with all the cmsgs inside while on send cmsgs in an mbuf chain,
one mbuf per message. Adjust the calls accordingly.
Putting it in so deraadt@@ can move forward.
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.8 2015/09/30 11:36:07 semarie Exp $	*/
d36 3
a38 3
#define TAME_CMSG	0x00000200	/* AF_UNIX CMSG fd passing */
#define TAME_IOCTL	0x00000400	/* scary */
#define TAME_GETPW	0x00000800	/* enough to enable YP */
d43 3
@


1.8
log
@implement new "prot_exec" tame(2) request:
- by default, a tamed-program don't have the possibility to use PROT_EXEC for
  mmap(2) or mprotect(2)
- for that, use the request "prot_exec" (that could be dropped later)

initial idea from deraadt@@ and kettenis@@

"make complete sense" beck@@
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.7 2015/09/11 15:29:47 deraadt Exp $	*/
d57 3
a59 2
int	tame_cmsg_send(struct proc *p, void *v, int controllen);
int	tame_cmsg_recv(struct proc *p, void *v, int controllen);
@


1.7
log
@Convert _TM_ flags to TAME_ flags, collapsing the entire mapping
layer because the strings select the right options.  Mechanical
conversion.
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.6 2015/09/09 17:56:59 deraadt Exp $	*/
d42 1
@


1.6
log
@Move to next tame() API.  The flags are now passed as a very simple string,
which results in tame() code placements being much more recognizeable.
tame() can be moved to unistd.h and does not need cpp symbols to turn the
bits on and off.  The resulting API is a bit unexpected, but simplifies the
mapping to enabling bits in the kernel substantially.
vague ok's from various including guenther doug semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.5 2015/08/26 05:20:06 doug Exp $	*/
d27 15
a41 15
#define _TM_SELF	0x00000001	/* operate on own pid */
#define _TM_RW		0x00000002	/* basic io operations */
#define _TM_MALLOC	0x00000004	/* enough for malloc */
#define _TM_DNSPATH	0x00000008	/* access to DNS pathnames */
#define _TM_RPATH	0x00000010	/* allow open for read */
#define _TM_WPATH	0x00000020	/* allow open for write */
#define _TM_TMPPATH	0x00000040	/* for mk*temp() */
#define _TM_INET	0x00000080	/* AF_INET/AF_INET6 sockets */
#define _TM_UNIX	0x00000100	/* AF_UNIX sockets */
#define _TM_CMSG	0x00000200	/* AF_UNIX CMSG fd passing */
#define _TM_IOCTL	0x00000400	/* scary */
#define _TM_GETPW	0x00000800	/* enough to enable YP */
#define _TM_PROC	0x00001000	/* fork, waitpid, etc */
#define _TM_CPATH	0x00002000	/* allow creat, mkdir, path creations */
#define _TM_FATTR	0x00004000	/* allow explicit file st_* mods */
d43 1
a43 1
#define _TM_ABORT	0x08000000	/* SIGABRT instead of SIGKILL */
d47 3
a49 20
#define _TM_USERSET	0x0fffffff
#define _TM_YP_ACTIVE	0x10000000	/* YP use detected and allowed */
#define _TM_DNS_ACTIVE	0x20000000	/* DNS use detected and allowed */

#define TAME_MALLOC	(_TM_SELF | _TM_MALLOC)
#define TAME_RW		(_TM_SELF | _TM_RW)
#define TAME_STDIO	(_TM_SELF | _TM_MALLOC | _TM_RW)
#define TAME_RPATH	(_TM_SELF | _TM_RW | _TM_RPATH)
#define TAME_WPATH	(_TM_SELF | _TM_RW | _TM_WPATH)
#define TAME_TMPPATH	(_TM_SELF | _TM_RW | _TM_TMPPATH)
#define TAME_INET	(_TM_SELF | _TM_RW | _TM_INET)
#define TAME_UNIX	(_TM_SELF | _TM_RW | _TM_UNIX)
#define TAME_CMSG	(_TM_SELF | _TM_RW | _TM_UNIX | _TM_CMSG)
#define TAME_DNS	(_TM_SELF | _TM_MALLOC | _TM_DNSPATH)
#define TAME_IOCTL	(_TM_IOCTL)
#define TAME_GETPW	(_TM_SELF | _TM_MALLOC | _TM_RW | _TM_GETPW)
#define TAME_PROC	(_TM_PROC)
#define TAME_CPATH	(_TM_CPATH)
#define TAME_ABORT	(_TM_ABORT)
#define TAME_FATTR	(_TM_FATTR)
@


1.5
log
@Convert paths argument of tame(2) to const char **.

The path will not be modified and this reduces casts.  Discussed with many.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.4 2015/08/22 20:18:50 deraadt Exp $	*/
d23 2
d59 2
a60 2
#define TAME_CMSG	(TAME_UNIX | _TM_CMSG)
#define TAME_DNS	(TAME_MALLOC | _TM_DNSPATH)
d62 1
a62 1
#define TAME_GETPW	(TAME_STDIO | _TM_GETPW)
a67 2
#ifdef _KERNEL

a96 4

#else /* _KERNEL */

int	tame(int, const char **);
@


1.4
log
@Move to tame(int flags, char *paths[]) API/ABI.

The pathlist is a whitelist of dirs and files; anything else returns ENOENT.
Recommendation is to use a narrowly defined list.  Also add TAME_FATTR, which
permits explicit change operations against "struct stat" fields.  Some
other TAME_ flags are refined slightly.

Not cranking libc now, since nothing commited in base uses this and the
timing is uncomfortable for others.  Discussed with many; thanks for a
few bug fixes from semarie, doug, guenther.
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.3 2015/07/28 15:22:25 deraadt Exp $	*/
d100 1
a100 1
int	tame(int, char **);
@


1.3
log
@normalize disclaimer to license.template; noted by reyk
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.2 2015/07/27 17:48:06 deraadt Exp $	*/
d38 2
a39 1
#define _TM_CPATH	0x00002000	/* allow create, mkdir, or inode mods */
d64 1
d86 12
d100 1
a100 1
int	tame(int);
@


1.2
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.1 2015/07/19 02:35:35 deraadt Exp $	*/
d15 3
a17 3
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
@


1.1
log
@tame(2) is a subsystem which restricts programs into a "reduced feature
operating model".  This is the kernel component; various changes should
proceed in-tree for a while before userland programs start using it.
ok miod, discussions and help from many
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d40 1
a40 1
#define _TM_ABORT	0x08000000	/* SIGABRT instea of SIGKILL */
@

