head	1.8;
access;
symbols
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2015.01.27.10.18.31;	author dlg;	state dead;
branches;
next	1.7;
commitid	gmRmg4gRdnpts3kX;

1.7
date	2013.10.31.04.33.32;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2009.09.02.14.05.05;	author dlg;	state Exp;
branches;
next	1.5;

1.5
date	2008.10.30.23.55.22;	author dlg;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.28.13.54.07;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.25.15.56.17;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.31.21.33.07;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.31.18.16.59;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove workq code. its been replaced with tasks.

it has been unused since december, and unhooked from the build since
christmas.

ok krw@@
@
text
@/*	$OpenBSD: workq.h,v 1.7 2013/10/31 04:33:32 deraadt Exp $ */

/*
 * Copyright (c) 2007 David Gwynne <dlg@@openbsd.org>
 * Copyright (c) 2007 Ted Unangst <tedu@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _SYS_WORKQ_H_
#define _SYS_WORKQ_H_

#include <sys/queue.h>

typedef void (*workq_fn)(void *, void *);

struct workq_task {
	int		wqt_flags;
	workq_fn	wqt_func;
	void		*wqt_arg1;
	void		*wqt_arg2;

	SIMPLEQ_ENTRY(workq_task) wqt_entry;
};

#define WQ_WAITOK	(1<<0)
#define WQ_MPSAFE	(1<<1)

#ifdef _KERNEL
struct workq;

struct workq	*workq_create(const char *, int, int);
int		workq_add_task(struct workq *, int /* flags */, workq_fn,
		    void *, void *);
void		workq_queue_task(struct workq *, struct workq_task *,
		    int /* flags */, workq_fn, void *, void *);
void		workq_destroy(struct workq *);
#endif /* _KERNEL */

#endif /* _SYS_WORKQ_H_ */
@


1.7
log
@hide kernel protytypes
ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: workq.h,v 1.6 2009/09/02 14:05:05 dlg Exp $ */
@


1.6
log
@when you add a task to a workq, it allocates memory to handle the
task and shove it on a list. allocations can fail, so if something
that wants to run a task later already has memory to handle the
workq task then let it provide it via a new function called
workq_queue_task.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: workq.h,v 1.5 2008/10/30 23:55:22 dlg Exp $ */
d39 1
d48 1
@


1.5
log
@reintroduce mutexes to workqs for locking.

tested by many on many archs including several alpha test.

ok tedu@@ go for it deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: workq.h,v 1.3 2007/11/25 15:56:17 tedu Exp $ */
d23 12
a34 1
struct workq;
d39 2
a40 1
typedef void (*workq_fn)(void *, void *);
d44 2
@


1.4
log
@remove the DIRECTOK flag.  the caller semantics were too weird, and it's a
bad idea to have functions that react unpredictably.
@
text
@d29 1
a29 1
struct workq	*workq_create(const char * /* name */, int /* nthreads */);
@


1.3
log
@convert crypto thread to workq.  add WQ_DIRECTOK flag to workq.
combined, this lets us use crypto before the thread is running
and therefore cryptoraid can attach nice and early.
ok/testing deraadt mbalmer marco
@
text
@d1 1
a1 1
/*	$OpenBSD: workq.h,v 1.2 2007/05/31 21:33:07 tedu Exp $ */
a26 1
#define WQ_DIRECTOK	(1<<2)
@


1.2
log
@switch the flags argument to the front, requested by art
ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: workq.h,v 1.1 2007/05/31 18:16:59 dlg Exp $ */
d27 1
@


1.1
log
@add an interface for work queues run from a kernel thread.

this type of code is implemented many times already in the kernel, this is
a generic version of all those replicated code bases.

originally from tedu@@
ok tedu@@ tom@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d28 4
a31 3
struct workq	*workq_create(const char *, int);
int		workq_add_task(struct workq *, void (*func)(void *, void *),
		    void *, void *, int);
@

