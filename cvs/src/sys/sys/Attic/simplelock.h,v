head	1.12;
access;
symbols
	OPENBSD_4_7:1.11.0.22
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.24
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.20
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.18
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.16
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.14
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.12
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.10
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.8
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.6
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.10
	SMP_SYNC_B:1.10
	OPENBSD_3_5:1.10.0.10
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.8
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.6
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.4
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.9.0.6
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.4
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.8.0.8
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.6
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.4
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5;
locks; strict;
comment	@ * @;


1.12
date	2010.04.23.21.34.40;	author deraadt;	state dead;
branches;
next	1.11;

1.11
date	2004.06.13.21.49.28;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.26.15.43.08;	author art;	state Exp;
branches
	1.9.6.1;
next	1.8;

1.8
date	99.07.09.15.17.59;	author art;	state Exp;
branches
	1.8.4.1;
next	1.7;

1.7
date	99.01.19.20.44.42;	author art;	state Exp;
branches;
next	1.6;

1.6
date	98.12.28.19.13.01;	author art;	state Exp;
branches;
next	1.5;

1.5
date	97.11.14.23.40.03;	author csapuntz;	state Exp;
branches;
next	1.4;

1.4
date	97.11.07.10.25.42;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.11.06.05.59.11;	author csapuntz;	state Exp;
branches;
next	1.2;

1.2
date	97.10.06.20.21.11;	author deraadt;	state dead;
branches;
next	1.1;

1.1
date	97.10.06.15.25.35;	author csapuntz;	state Exp;
branches;
next	;

1.8.4.1
date	2001.05.14.22.45.03;	author niklas;	state Exp;
branches;
next	1.8.4.2;

1.8.4.2
date	2002.03.28.14.52.02;	author niklas;	state Exp;
branches;
next	1.8.4.3;

1.8.4.3
date	2003.05.15.04.08.03;	author niklas;	state Exp;
branches;
next	1.8.4.4;

1.8.4.4
date	2003.05.18.17.41.16;	author niklas;	state Exp;
branches;
next	;

1.9.6.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Merge the only relevant (for now) parts of simplelock.h into lock.h
since it is time to start transitioning away from the no-op behaviour.
ok oga kettenis
@
text
@/*	$OpenBSD: simplelock.h,v 1.11 2004/06/13 21:49:28 niklas Exp $	*/

#ifndef _SIMPLELOCK_H_
#define _SIMPLELOCK_H_

#ifdef MULTIPROCESSOR
#include <machine/lock.h>
#endif

/*
 * A simple spin lock.
 *
 * This structure only sets one bit of data, but is sized based on the
 * minimum word size that can be operated on by the hardware test-and-set
 * instruction. It is only needed for multiprocessors, as uniprocessors
 * will always run to completion or a sleep. It is an error to hold one
 * of these locks while a process is sleeping.
 */
struct simplelock {
#ifdef MULTIPROCESSOR
	__cpu_simple_lock_t lock_data;
#else
	int	lock_data;
#endif
};

#ifdef _KERNEL

/*
 * We can't debug locks when we use them in real life.
 */
#if defined(MULTIPROCESSOR) && defined(LOCKDEBUG)
#undef LOCKDEBUG
#endif

#if !defined(MULTIPROCESSOR) || 1

#define SLOCK_LOCKED 1
#define SLOCK_UNLOCKED 0

#ifndef LOCKDEBUG

#define	simple_lock(lkp)
#define	simple_lock_try(lkp)	(1)	/* always succeeds */
#define	simple_unlock(lkp)
#define simple_lock_assert(lkp)

static __inline void simple_lock_init(struct simplelock *lkp)
{

	lkp->lock_data = SLOCK_UNLOCKED;
}

#else

void _simple_unlock(__volatile struct simplelock *, const char *, int);
int _simple_lock_try(__volatile struct simplelock *, const char *, int);
void _simple_lock(__volatile struct simplelock *, const char *, int);
void _simple_lock_assert(__volatile struct simplelock *, int, const char *, int);

void simple_lock_init(struct simplelock *);
#define simple_unlock(lkp) _simple_unlock(lkp, __FILE__, __LINE__)
#define simple_lock_try(lkp) _simple_lock_try(lkp, __FILE__, __LINE__)
#define simple_lock(lkp) _simple_lock(lkp, __FILE__, __LINE__)
#define simple_lock_assert(lkp, state) _simple_lock_assert(lkp, state, __FILE__, __LINE__)

#endif /* !defined(LOCKDEBUG) */

#else  /* MULTIPROCESSOR */

/*
 * The simple-lock routines are the primitives out of which the lock
 * package is built. The machine-dependent code must implement an
 * atomic test_and_set operation that indivisibly sets the simple lock
 * to non-zero and returns its old value. It also assumes that the
 * setting of the lock to zero below is indivisible. Simple locks may
 * only be used for exclusive locks.
 */

static __inline void simple_lock_init(struct simplelock *lkp)
{
	__cpu_simple_lock_init(&lkp->lock_data);
}

static __inline void simple_lock(__volatile struct simplelock *lkp)
{
	__cpu_simple_lock(&lkp->lock_data);
}

static __inline int simple_lock_try(__volatile struct simplelock *lkp)
{
	return (__cpu_simple_lock_try(&lkp->lock_data));
}

static __inline void simple_unlock(__volatile struct simplelock *lkp)
{
	__cpu_simple_unlock(&lkp->lock_data);
}
#endif /* MULTIPROCESSOR */

#endif /* _KERNEL */

#endif /* !_SIMPLELOCK_H_ */
@


1.11
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: simplelock.h,v 1.9 2001/02/26 15:43:08 art Exp $	*/
d5 5
d20 3
d24 1
a28 9
#ifndef NCPUS
#define NCPUS 1
#endif

#define SLOCK_LOCKED 1
#define SLOCK_UNLOCKED 0

#define SLOCK_INITIALIZER { SLOCK_UNLOCKED }

d32 1
a32 1
#if (NCPUS != 1) && defined(LOCKDEBUG)
d36 4
a39 1
#if NCPUS == 1
d48 1
a48 5
static __inline void simple_lock_init(struct simplelock *);

static __inline void
simple_lock_init(lkp)
	struct simplelock *lkp;
d69 1
a69 1
#else  /* NCPUS >  1 */
d80 1
a80 3
static __inline void
simple_lock(lkp)
	__volatile struct simplelock *lkp;
d82 2
d85 3
a87 2
	while (test_and_set(&lkp->lock_data))
		continue;
d90 1
a90 3
static __inline int
simple_lock_try(lkp)
	__volatile struct simplelock *lkp;
d92 1
a92 2

	return (!test_and_set(&lkp->lock_data))
d95 1
a95 3
static __inline void
simple_unlock(lkp)
	__volatile struct simplelock *lkp;
d97 1
a97 2

	lkp->lock_data = 0;
d99 1
a99 1
#endif /* NCPUS > 1 */
@


1.9
log
@Add SLOCK_INITIALIZER
@
text
@d1 1
a1 1
/*	$OpenBSD: simplelock.h,v 1.8 1999/07/09 15:17:59 art Exp $	*/
d45 1
a45 1
static __inline void simple_lock_init __P((struct simplelock *));
d57 4
a60 4
void _simple_unlock __P((__volatile struct simplelock *, const char *, int));
int _simple_lock_try __P((__volatile struct simplelock *, const char *, int));
void _simple_lock __P((__volatile struct simplelock *, const char *, int));
void _simple_lock_assert __P((__volatile struct simplelock *, int, const char *, int));
d62 1
a62 1
void simple_lock_init __P((struct simplelock *));
@


1.9.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: simplelock.h,v 1.9 2001/02/26 15:43:08 art Exp $	*/
d45 1
a45 1
static __inline void simple_lock_init(struct simplelock *);
d57 4
a60 4
void _simple_unlock(__volatile struct simplelock *, const char *, int);
int _simple_lock_try(__volatile struct simplelock *, const char *, int);
void _simple_lock(__volatile struct simplelock *, const char *, int);
void _simple_lock_assert(__volatile struct simplelock *, int, const char *, int);
d62 1
a62 1
void simple_lock_init(struct simplelock *);
@


1.8
log
@rename SIMPLELOCK_DEBUG to LOCKDEBUG
clean up the debug functions
add simple_lock_assert
@
text
@d1 1
a1 1
/*	$OpenBSD: simplelock.h,v 1.7 1999/01/19 20:44:42 art Exp $	*/
d26 2
@


1.8.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: simplelock.h,v 1.9 2001/02/26 15:43:08 art Exp $	*/
a25 2

#define SLOCK_INITIALIZER { SLOCK_UNLOCKED }
@


1.8.4.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
static __inline void simple_lock_init(struct simplelock *);
d57 4
a60 4
void _simple_unlock(__volatile struct simplelock *, const char *, int);
int _simple_lock_try(__volatile struct simplelock *, const char *, int);
void _simple_lock(__volatile struct simplelock *, const char *, int);
void _simple_lock_assert(__volatile struct simplelock *, int, const char *, int);
d62 1
a62 1
void simple_lock_init(struct simplelock *);
@


1.8.4.3
log
@Biglock!  Most of the logic
comes from NetBSD.
Also a lot of fixes, enough to get a dual cpu machine actually run MP for a
very short while (we are just talking about seconds) before starving out one
of the cpus.  More coming very soon.
@
text
@d1 1
a1 1
/*	$OpenBSD: simplelock.h,v 1.8.4.2 2002/03/28 14:52:02 niklas Exp $	*/
a4 5

#ifdef MULTIPROCESSOR
#include <machine/lock.h>
#endif

a14 3
#ifdef MULTIPROCESSOR
	__cpu_simple_lock_t lock_data;
#else
a15 1
#endif
d20 9
d32 1
a32 1
#if defined(MULTIPROCESSOR) && defined(LOCKDEBUG)
d36 1
a36 4
#ifndef MULTIPROCESSOR

#define SLOCK_LOCKED 1
#define SLOCK_UNLOCKED 0
d45 5
a49 1
static __inline void simple_lock_init(struct simplelock *lkp)
d70 1
a70 1
#else  /* MULTIPROCESSOR */
d81 3
a83 1
static __inline void simple_lock_init(struct simplelock *lkp)
d85 3
a87 1
	__cpu_simple_lock_init(&lkp->lock_data);
d90 3
a92 1
static __inline void simple_lock(__volatile struct simplelock *lkp)
d94 2
a95 1
	__cpu_simple_lock(&lkp->lock_data);
d98 3
a100 1
static __inline int simple_lock_try(__volatile struct simplelock *lkp)
a101 2
	return (__cpu_simple_lock_try(&lkp->lock_data));
}
d103 1
a103 3
static __inline void simple_unlock(__volatile struct simplelock *lkp)
{
	__cpu_simple_unlock(&lkp->lock_data);
d105 1
a105 1
#endif /* MULTIPROCESSOR */
@


1.8.4.4
log
@Go back to defining simplelocks as noops, even if MULTIPROCESSOR.  Instead use
a new real simple recursive-lock capable lock implementation for the few
necessary locks (kernel, scheduler, tlb shootdown, printf and ddb MP).
This because we cannot trust the old fine-grained locks spread out all over
our kernel, and not really tested.
@
text
@d1 1
a1 1
/*	$OpenBSD: simplelock.h,v 1.8.4.3 2003/05/15 04:08:03 niklas Exp $	*/
d36 1
a36 1
#if !defined(MULTIPROCESSOR) || 1
@


1.7
log
@don't define SIMPLELOCK_DEBUG when DEBUG is defined
@
text
@d1 1
a1 1
/*	$OpenBSD: simplelock.h,v 1.6 1998/12/28 19:13:01 art Exp $	*/
d24 10
d36 6
a41 4
#if !defined(SIMPLELOCK_DEBUG)
#define	simple_lock(alp)
#define	simple_lock_try(alp)	(1)	/* always succeeds */
#define	simple_unlock(alp)
d50 1
a50 1
	lkp->lock_data = 0;
a55 1
#define simple_unlock(alp) _simple_unlock(alp, __FILE__, __LINE__)
a56 1
#define simple_lock_try(alp) _simple_lock_try(alp, __FILE__, __LINE__)
d58 7
a64 2
#define simple_lock(alp) _simple_lock(alp, __FILE__, __LINE__)
void simple_lock_init __P((struct simplelock *alp));
d66 1
a66 1
#endif /* !defined(SIMPLELOCK_DEBUG) */
@


1.6
log
@simple debugging for simple locks
@
text
@d1 1
a1 1
/*	$OpenBSD: simplelock.h,v 1.5 1997/11/14 23:40:03 csapuntz Exp $	*/
a24 4

#if defined(DEBUG) && !defined(SIMPLELOCK_DEBUG)
#define SIMPLELOCK_DEBUG
#endif
@


1.5
log
@Make user-mode C++ compilers happy by #ifdef around inline functions
@
text
@d1 1
a1 1
/*	$OpenBSD: simplelock.h,v 1.4 1997/11/07 10:25:42 niklas Exp $	*/
d26 5
a30 1
#if !defined(DEBUG)
d47 1
a47 1
void _simple_unlock __P((__volatile struct simplelock *alp, const char *, int));
d49 1
a49 1
int _simple_lock_try __P((__volatile struct simplelock *alp, const char *, int));
d51 1
a51 1
void _simple_lock __P((__volatile struct simplelock *alp, const char *, int));
d55 1
a55 1
#endif /* !defined(DEBUG) */
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d18 2
d89 2
@


1.3
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 2
@


1.2
log
@back out vfs lite2 till after 2.2
@
text
@@


1.1
log
@VFS Lite2 Changes
@
text
@@
