head	1.15;
access;
symbols
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.14.0.18
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.14
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.16
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.8
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.12
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.14.0.10
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.6
	OPENBSD_5_4_BASE:1.14
	OPENBSD_5_3:1.14.0.4
	OPENBSD_5_3_BASE:1.14
	OPENBSD_5_2:1.14.0.2
	OPENBSD_5_2_BASE:1.14
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.8
	OPENBSD_5_0:1.12.0.6
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.4
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.11.0.4
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.10.0.12
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.10
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.8
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.10.19.08.31.33;	author guenther;	state Exp;
branches;
next	1.14;
commitid	FyYQJQUG0i6W5gNT;

1.14
date	2012.04.13.16.37.50;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2012.02.20.22.23.39;	author guenther;	state Exp;
branches;
next	1.12;

1.12
date	2010.07.26.01.56.27;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.16.19.41.06;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.11.21.30.31;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2005.09.14.20.55.59;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.28.21;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.12.14.37.40;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.11.15.39.27;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.11.14.20.35;	author art;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.18.09.01.52;	author art;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	96.03.03.12.12.09;	author niklas;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.53.28;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.28;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2001.07.04.11.00.28;	author niklas;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	1.2.16.3;

1.2.16.3
date	2003.06.07.11.09.08;	author ho;	state Exp;
branches;
next	;

1.3.4.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Change process_{domem,auxv_offset}() to take a process instead of a proc.
Make process_auxv_offset() take and release a reference of the vmspace like
process_domem() does.

ok kettenis@@
@
text
@/*	$OpenBSD: ptrace.h,v 1.14 2012/04/13 16:37:50 kettenis Exp $	*/
/*	$NetBSD: ptrace.h,v 1.21 1996/02/09 18:25:26 christos Exp $	*/

/*-
 * Copyright (c) 1984, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ptrace.h	8.2 (Berkeley) 1/4/94
 */

#ifndef	_SYS_PTRACE_H_
#define	_SYS_PTRACE_H_

#define	PT_TRACE_ME	0	/* child declares it's being traced */
#define	PT_READ_I	1	/* read word in child's I space */
#define	PT_READ_D	2	/* read word in child's D space */
#define	PT_WRITE_I	4	/* write word in child's I space */
#define	PT_WRITE_D	5	/* write word in child's D space */
#define	PT_CONTINUE	7	/* continue the child */
#define	PT_KILL		8	/* kill the child process */
#define	PT_ATTACH	9	/* attach to running process */
#define	PT_DETACH	10	/* detach from running process */
#define PT_IO		11	/* do I/O to/from the stopped process. */

struct ptrace_io_desc {
	int	piod_op;	/* I/O operation */
	void	*piod_offs;	/* child offset */
	void	*piod_addr;	/* parent offset */
	size_t	piod_len;	/* request length */
};

/*
 * Operations in piod_op.
 */
#define PIOD_READ_D	1	/* Read from D space */
#define PIOD_WRITE_D	2	/* Write to D space */
#define PIOD_READ_I	3	/* Read from I space */
#define PIOD_WRITE_I	4	/* Write to I space */
#define PIOD_READ_AUXV	5	/* Read from aux array */

#define PT_SET_EVENT_MASK	12
#define PT_GET_EVENT_MASK	13

typedef struct ptrace_event {
	int	pe_set_event;
} ptrace_event_t;

#define PTRACE_FORK	0x0002	/* Report forks */

#define PT_GET_PROCESS_STATE	14

typedef struct ptrace_state {
	int	pe_report_event;
	pid_t	pe_other_pid;
	pid_t	pe_tid;
} ptrace_state_t;

#define PT_GET_THREAD_FIRST	15
#define PT_GET_THREAD_NEXT	16

struct ptrace_thread_state {
	pid_t	pts_tid;
};

#define	PT_FIRSTMACH	32	/* for machine-specific requests */
#include <machine/ptrace.h>	/* machine-specific requests, if any */

#ifdef _KERNEL

/*
 * There is a bunch of PT_ requests that are machine dependent, but not
 * optional. Check if they were defined by MD code here.
 */
#if !defined(PT_GETREGS) || !defined(PT_SETREGS)
#error Machine dependent ptrace not complete.
#endif

struct reg;
#if defined(PT_GETFPREGS) || defined(PT_SETFPREGS)
struct fpreg;
#endif

void	proc_reparent(struct process *_child, struct process *_newparent);
#ifdef PT_GETFPREGS
int	process_read_fpregs(struct proc *_t, struct fpreg *);
#endif
int	process_read_regs(struct proc *_t, struct reg *);
int	process_set_pc(struct proc *_t, caddr_t _addr);
int	process_sstep(struct proc *_t, int _sstep);
#ifdef PT_SETFPREGS
int	process_write_fpregs(struct proc *_t, struct fpreg *);
#endif
int	process_write_regs(struct proc *_t, struct reg *);
int	process_checkioperm(struct proc *_curp, struct process *_tr);
int	process_domem(struct proc *_curp, struct process *_tr, struct uio *,
	    int _req);

#ifndef FIX_SSTEP
#define FIX_SSTEP(p)
#endif

#else /* !_KERNEL */

#include <sys/cdefs.h>

__BEGIN_DECLS
int	ptrace(int _request, pid_t _pid, caddr_t _addr, int _data);
__END_DECLS

#endif /* !_KERNEL */

#endif	/* !_SYS_PTRACE_H_ */
@


1.14
log
@First stab at making ptrace(2) usable for debugging multi-threaded programs.
It implements a full-stop model where all threads are stopped before handing
over control to the debugger.  Events are reported as before through wait(2);
you will have to call ptrace(PT_GET_PROCESS_STATE, ...) to find out which
thread hit the event.  Since this changes the size of struct ptrace_state,
you will have to recompile gdb.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.13 2012/02/20 22:23:39 guenther Exp $	*/
d107 1
a107 1
void	proc_reparent(struct process *child, struct process *newparent);
d109 1
a109 1
int	process_read_fpregs(struct proc *p, struct fpreg *regs);
d111 3
a113 3
int	process_read_regs(struct proc *p, struct reg *regs);
int	process_set_pc(struct proc *p, caddr_t addr);
int	process_sstep(struct proc *p, int sstep);
d115 1
a115 1
int	process_write_fpregs(struct proc *p, struct fpreg *regs);
d117 4
a120 3
int	process_write_regs(struct proc *p, struct reg *regs);
int	process_checkioperm(struct proc *, struct process *);
int	process_domem(struct proc *, struct proc *, struct uio *, int);
@


1.13
log
@First steps for making ptrace work with rthreads:
 - move the P_TRACED and P_INEXEC flags, and p_oppid, p_ptmask, and
   p_ptstat member from struct proc to struct process
 - sort the PT_* requests into those that take a PID vs those that
   can also take a TID
 - stub in PT_GET_THREAD_FIRST and PT_GET_THREAD_NEXT

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.12 2010/07/26 01:56:27 guenther Exp $	*/
d79 1
@


1.12
log
@Correct the links between threads, processes, pgrps, and sessions,
so that the process-level stuff is to/from struct process and not
struct proc.  This fixes a bunch of problem cases in rthreads.
Based on earlier work by blambert and myself, but mostly written
at c2k10.

Tested by many: deraadt, sthen, krw, ray, and in snapshots
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.11 2008/09/16 19:41:06 kettenis Exp $	*/
d81 7
d117 1
a117 1
int	process_checkioperm(struct proc *, struct proc *);
@


1.11
log
@Add PIOD_READ_AUXV, a way to get the ELF auxilliary vector through ptrace(2).

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.10 2005/12/11 21:30:31 miod Exp $	*/
d99 1
a99 1
void	proc_reparent(struct proc *child, struct proc *newparent);
@


1.10
log
@Replace procfs_domem() with a similar interface, process_domem(), which lives
out of procfs and gets a ptrace request PT_{READ,WRITE}_{I,D} as argument;
also procfs_checkioperm() becomes process_checkioperm().

From art@@ some time ago; ok kettenis@@ pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.9 2005/09/14 20:55:59 kettenis Exp $	*/
d63 1
@


1.9
log
@ptrace(2) following fork(2)
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.8 2003/06/02 23:28:21 millert Exp $	*/
d109 2
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.7 2002/03/14 01:27:14 millert Exp $	*/
d63 16
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.6 2002/03/12 14:37:40 art Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@Change the PT_IO interfaces like discussed on
the bsd-api-discuss list.
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.5 2002/03/11 15:39:27 art Exp $	*/
d86 1
a86 1
void	proc_reparent __P((struct proc *child, struct proc *newparent));
d88 1
a88 1
int	process_read_fpregs __P((struct proc *p, struct fpreg *regs));
d90 3
a92 3
int	process_read_regs __P((struct proc *p, struct reg *regs));
int	process_set_pc __P((struct proc *p, caddr_t addr));
int	process_sstep __P((struct proc *p, int sstep));
d94 1
a94 1
int	process_write_fpregs __P((struct proc *p, struct fpreg *regs));
d96 1
a96 1
int	process_write_regs __P((struct proc *p, struct reg *regs));
d107 1
a107 1
int	ptrace __P((int _request, pid_t _pid, caddr_t _addr, int _data));
@


1.5
log
@Since all archs implement PT_GETREGS and PT_SETREGS, make then unoptional.
They still stay in MD code for backwards compatibility, but a check in
ptrace.h checks if they are defined.

Note - the same thing will be done with PT_{GET,SET}FPREGS once vax implements
 them and with PT_STEP when it's implemented by sparc, sparc64 and alpha.
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.4 2002/03/11 14:20:35 art Exp $	*/
d54 1
a54 5
	int	piod_op;
#define PIOD_OP_READ_DATA	1
#define PIOD_OP_WRITE_DATA	2
#define PIOD_OP_READ_TEXT	3
#define PIOD_OP_WRITE_TEXT	4
d59 8
@


1.4
log
@Add a more sane API for reading/writing traced process memory
with ptrace - PT_IO.
Man page update in a few.
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.3 2001/06/18 09:01:52 art Exp $	*/
d69 8
a76 1
#if defined(PT_GETREGS) || defined(PT_SETREGS)
a77 1
#endif
a85 1
#ifdef PT_GETREGS
a86 1
#endif
a91 1
#ifdef PT_SETREGS
a92 1
#endif
@


1.3
log
@trace_req is not used anymore (was a nop).
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.2 1996/03/03 12:12:09 niklas Exp $	*/
d51 12
@


1.3.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.3 2001/06/18 09:01:52 art Exp $	*/
a50 16
#define PT_IO		11	/* do I/O to/from the stopped process. */

struct ptrace_io_desc {
	int	piod_op;	/* I/O operation */
	void	*piod_offs;	/* child offset */
	void	*piod_addr;	/* parent offset */
	size_t	piod_len;	/* request length */
};

/*
 * Operations in piod_op.
 */
#define PIOD_READ_D	1	/* Read from D space */
#define PIOD_WRITE_D	2	/* Write to D space */
#define PIOD_READ_I	3	/* Read from I space */
#define PIOD_WRITE_I	4	/* Write to I space */
d57 2
a58 6
/*
 * There is a bunch of PT_ requests that are machine dependent, but not
 * optional. Check if they were defined by MD code here.
 */
#if !defined(PT_GETREGS) || !defined(PT_SETREGS)
#error Machine dependent ptrace not complete.
a59 2

struct reg;
d64 1
a64 1
void	proc_reparent(struct proc *child, struct proc *newparent);
d66 1
a66 1
int	process_read_fpregs(struct proc *p, struct fpreg *regs);
d68 5
a72 3
int	process_read_regs(struct proc *p, struct reg *regs);
int	process_set_pc(struct proc *p, caddr_t addr);
int	process_sstep(struct proc *p, int sstep);
d74 4
a77 1
int	process_write_fpregs(struct proc *p, struct fpreg *regs);
a78 1
int	process_write_regs(struct proc *p, struct reg *regs);
d89 1
a89 1
int	ptrace(int _request, pid_t _pid, caddr_t _addr, int _data);
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a82 2

int	trace_req __P((struct proc *));
@


1.2.16.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.2 1996/03/03 12:12:09 niklas Exp $	*/
d83 2
@


1.2.16.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a50 16
#define PT_IO		11	/* do I/O to/from the stopped process. */

struct ptrace_io_desc {
	int	piod_op;	/* I/O operation */
	void	*piod_offs;	/* child offset */
	void	*piod_addr;	/* parent offset */
	size_t	piod_len;	/* request length */
};

/*
 * Operations in piod_op.
 */
#define PIOD_READ_D	1	/* Read from D space */
#define PIOD_WRITE_D	2	/* Write to D space */
#define PIOD_READ_I	3	/* Read from I space */
#define PIOD_WRITE_I	4	/* Write to I space */
d57 2
a58 6
/*
 * There is a bunch of PT_ requests that are machine dependent, but not
 * optional. Check if they were defined by MD code here.
 */
#if !defined(PT_GETREGS) || !defined(PT_SETREGS)
#error Machine dependent ptrace not complete.
a59 2

struct reg;
d64 1
a64 1
void	proc_reparent(struct proc *child, struct proc *newparent);
d66 1
a66 1
int	process_read_fpregs(struct proc *p, struct fpreg *regs);
d68 5
a72 3
int	process_read_regs(struct proc *p, struct reg *regs);
int	process_set_pc(struct proc *p, caddr_t addr);
int	process_sstep(struct proc *p, int sstep);
d74 4
a77 1
int	process_write_fpregs(struct proc *p, struct fpreg *regs);
a78 1
int	process_write_regs(struct proc *p, struct reg *regs);
d89 1
a89 1
int	ptrace(int _request, pid_t _pid, caddr_t _addr, int _data);
@


1.2.16.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ptrace.h,v 1.2.16.2 2002/03/28 14:52:01 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: ptrace.h,v 1.20 1995/03/26 20:24:35 jtc Exp $	*/
d83 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
