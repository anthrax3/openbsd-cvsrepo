head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.2
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.8.0.16
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.20
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.18
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.14
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.12
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.10
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.12
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.14
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.10
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.8
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.6
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.10
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.8
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.16
	OPENBSD_2_8:1.4.0.14
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.12
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.10
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.8
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2017.03.13.20.18.21;	author claudio;	state Exp;
branches;
next	1.14;
commitid	ZsxSSZJSFxZH81LL;

1.14
date	2017.01.27.20.31.42;	author bluhm;	state Exp;
branches;
next	1.13;
commitid	iyCOWv2EkHfmOzpr;

1.13
date	2017.01.23.23.44.04;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	fnkGGZuISh6m65vf;

1.12
date	2015.08.28.04.38.47;	author guenther;	state Exp;
branches;
next	1.11;
commitid	plAZIJHa0HKzn8y4;

1.11
date	2015.08.24.15.55.53;	author bluhm;	state Exp;
branches;
next	1.10;
commitid	Obl0gbh0sMuq3wbf;

1.10
date	2015.07.18.15.00.01;	author guenther;	state Exp;
branches;
next	1.9;
commitid	roluigiGALHjIxXb;

1.9
date	2015.03.28.23.50.55;	author bluhm;	state Exp;
branches;
next	1.8;
commitid	kVBWJiCghZrzYhp3;

1.8
date	2010.06.30.19.57.05;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.17.08.33.20;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.28.22;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.26.19.56.52;	author dugsong;	state Exp;
branches;
next	1.4;

1.4
date	97.11.17.19.21.48;	author deraadt;	state Exp;
branches
	1.4.10.1;
next	1.3;

1.3
date	97.11.17.18.09.17;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.03.12.12.41;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.31;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.31;	author deraadt;	state Exp;
branches;
next	;

1.4.10.1
date	2001.07.04.11.00.37;	author niklas;	state Exp;
branches;
next	1.4.10.2;

1.4.10.2
date	2003.06.07.11.09.08;	author ho;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Move PRU_ATTACH out of the pr_usrreq functions into pr_attach.
Attach is quite a different thing to the other PRU functions and
this should make locking a bit simpler. This also removes the ugly
hack on how proto was passed to the attach function.
OK bluhm@@ and mpi@@ on a previous version
@
text
@/*	$OpenBSD: unpcb.h,v 1.14 2017/01/27 20:31:42 bluhm Exp $	*/
/*	$NetBSD: unpcb.h,v 1.6 1994/06/29 06:46:08 cgd Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)unpcb.h	8.1 (Berkeley) 6/2/93
 */

/*
 * Protocol control block for an active
 * instance of a UNIX internal protocol.
 *
 * A socket may be associated with an vnode in the
 * file system.  If so, the unp_vnode pointer holds
 * a reference count to this vnode, which should be vrele'd
 * when the socket goes away.
 *
 * A socket may be connected to another socket, in which
 * case the control block of the socket to which it is connected
 * is given by unp_conn.
 *
 * A socket may be referenced by a number of sockets (e.g. several
 * sockets may be connected to a datagram socket.)  These sockets
 * are in a linked list starting with unp_refs, linked through
 * unp_nextref and null-terminated.  Note that a socket may be referenced
 * by a number of other sockets and may also reference a socket (not
 * necessarily one which is referencing it).  This generates
 * the need for unp_refs and unp_nextref to be separate fields.
 *
 * Stream sockets keep copies of receive sockbuf sb_cc and sb_mbcnt
 * so that changes in the sockbuf may be computed to modify
 * back pressure on the sender accordingly.
 */

struct	unpcb {
	struct	socket *unp_socket;	/* pointer back to socket */
	struct	vnode *unp_vnode;	/* if associated with file */
	struct	file *unp_file;		/* backpointer for unp_gc() */
	struct	unpcb *unp_conn;	/* control block of connected socket */
	ino_t	unp_ino;		/* fake inode number */
	SLIST_HEAD(,unpcb) unp_refs;	/* referencing socket linked list */
	SLIST_ENTRY(unpcb) unp_nextref;	/* link in unp_refs list */
	struct	mbuf *unp_addr;		/* bound address of socket */
	long	unp_msgcount;		/* references from socket rcv buf */
	int	unp_flags;		/* this unpcb contains peer eids */
	struct	sockpeercred unp_connid;/* id of peer process */
	struct	timespec unp_ctime;	/* holds creation time */
	LIST_ENTRY(unpcb) unp_link;	/* link in per-AF list of sockets */
};

/*
 * flag bits in unp_flags
 */
#define UNP_FEIDS	0x01		/* unp_connid contains information */
#define UNP_FEIDSBIND	0x02		/* unp_connid was set by a bind */
#define UNP_GCMARK	0x04		/* mark during unp_gc() */
#define UNP_GCDEFER	0x08		/* ref'd, but not marked in this pass */
#define UNP_GCDEAD	0x10		/* unref'd in this pass */

#define	sotounpcb(so)	((struct unpcb *)((so)->so_pcb))

#ifdef _KERNEL
struct fdpass {
	struct file	*fp;
	int		 flags;
};

int	uipc_usrreq(struct socket *, int , struct mbuf *,
			 struct mbuf *, struct mbuf *, struct proc *);
int	uipc_attach(struct socket *, int);

int	unp_bind(struct unpcb *, struct mbuf *, struct proc *);
int	unp_connect(struct socket *, struct mbuf *, struct proc *);
int	unp_connect2(struct socket *, struct socket *);
void	unp_detach(struct unpcb *);
void	unp_disconnect(struct unpcb *);
void	unp_drop(struct unpcb *, int);
void	unp_gc(void *);
void	unp_shutdown(struct unpcb *);
int 	unp_externalize(struct mbuf *, socklen_t, int);
int	unp_internalize(struct mbuf *, struct proc *);
void 	unp_dispose(struct mbuf *);
#endif /* _KERNEL */
@


1.14
log
@In sosend() the size of the control message for file descriptor
passing is checked.  As the data type has changed in unp_internalize(),
the calculation has to be adapted in sosend().
Found by relayd regress test on i386.
OK millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.13 2017/01/23 23:44:04 deraadt Exp $	*/
d94 4
a97 1
int	unp_attach(struct socket *);
@


1.13
log
@File descriptor passing internalizes fd's into an mbuf-stored array of
struct file *, and then externalizes back to fd upon delivery.
Convert storage to array of struct fdpass, containing struct file *
(and soon something else).  memcpy originally intended for alignment
purposes can be removed because CMSG_ALIGN is _ALIGN.

There is some anxiety over changing this code, but it reads easier.
ok mpi guenther kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.12 2015/08/28 04:38:47 guenther Exp $	*/
d89 5
@


1.12
log
@Rework the UNIX domain socket garbage collector, including ideas from
{Free,Net}BSD
 - when a socket is closed with fds in its input, defer closing them to
   a task to avoid recursing.  This eliminates the complicated extra
   reference taking which had a 37 line(!) comment explanation
 - move flags, counts, and links only needed for this from struct file to
   struct unpcb
 - document the flow of the mark/sweep collector

much help from claudio@@ who made me explain the GC to him until we trusted it
ok claudio@@ mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.11 2015/08/24 15:55:53 bluhm Exp $	*/
a93 1
void	unp_discard(struct file **, int);
a96 2
void	unp_mark(struct file **, int);
void	unp_scan(struct mbuf *, void (*)(struct file **, int));
@


1.11
log
@Remove obsolete fields in struct unpcb.  In the past they were used
for flow control with unix domain sockets, this is now done by
filling the send buffer with fake data counters.
OK naddy@@;  no fallout in a bulk build
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.10 2015/07/18 15:00:01 guenther Exp $	*/
d64 2
a66 1
	struct	unpcb *unp_conn;	/* control block of connected socket */
d70 1
d74 1
d80 5
a84 2
#define UNP_FEIDS	1		/* unp_connid contains information */
#define UNP_FEIDSBIND	2		/* unp_connid was set by a bind */
d97 1
a97 1
void	unp_gc(void);
@


1.10
log
@Change unp_scan() and its callbacks to pass the array of struct file **
and a count instead of calling the callback on each one, while also renders
the 'dispose' argument superfluous.
Move unp_*() prototypes from <sys/un.h> to <sys/unpcb.h>

ok claudio@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.9 2015/03/28 23:50:55 bluhm Exp $	*/
a70 2
	int	unp_cc;			/* copy of rcv.sb_cc */
	int	unp_mbcnt;		/* copy of rcv.sb_mbcnt */
@


1.9
log
@Replace the hand-crafted list of datagram unix domain sockets with
a SLIST.
OK mpi@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.8 2010/06/30 19:57:05 deraadt Exp $	*/
d41 1
a41 1
 * a reference count to this vnode, which should be irele'd
d83 18
@


1.8
log
@Add getsockopt SOL_SOCKET SO_PEERCRED support. This behaves similar to
getpeereid(2), but also supplies the remote pid.  This is supplied in
a 'struct sockpeercred' (unlike Linux -- they showed how little they
know about real unix by calling theirs 'struct ucred').
ok guenther ajacoutot
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.7 2006/11/17 08:33:20 claudio Exp $	*/
d66 2
a67 2
	struct	unpcb *unp_refs;	/* referencing socket linked list */
	struct 	unpcb *unp_nextref;	/* link in unp_refs list */
@


1.7
log
@Make getpeereid() work on both sides of a connection. The client can now get
the euid/egid of the server it connects to. The euid and egid are captured in
the bind() call -- this is the equivalent of the client behaviour where the
same thing is done in connect().
tested and ok espie@@, ok henning@@, go for it deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.6 2003/06/02 23:28:22 millert Exp $	*/
a59 4
struct	unpcbid {
	uid_t unp_euid;
	gid_t unp_egid;
};
d70 1
a70 1
	struct	unpcbid unp_connid;	/* id of peer process */
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.5 2001/06/26 19:56:52 dugsong Exp $	*/
d84 1
@


1.5
log
@implement djb's getpeereid(2), to allow local-domain servers to determine client credentials. mostly from superscript.com. deraadt@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.4 1997/11/17 19:21:48 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@oh, a timespec
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.3 1997/11/17 18:09:17 deraadt Exp $	*/
d64 5
d77 2
d83 5
@


1.4.10.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.4 1997/11/17 19:21:48 deraadt Exp $	*/
a63 5
struct	unpcbid {
	uid_t unp_euid;
	gid_t unp_egid;
};

a71 2
	int	unp_flags;		/* this unpcb contains peer eids */
	struct	unpcbid unp_connid;	/* id of peer process */
a75 5

/*
 * flag bits in unp_flags
 */
#define UNP_FEIDS	1		/* unp_connid contains information */
@


1.4.10.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.4.10.1 2001/07/04 11:00:37 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3
log
@kleink: When fstat(2)ing a file descriptor of a local communications domain
socket, fill the socket's creation time into the stat structure's st_[acm]time
fields: POSIX requires this behavior for pipe(2). N.B.: updating the
st_[am]time fields when reading/writing the pipe is neither required nor
implemented, though.
@
text
@d1 1
a1 1
/*	$OpenBSD: unpcb.h,v 1.2 1996/03/03 12:12:41 niklas Exp $	*/
d74 1
a74 1
	struct	timeval	unp_ctime;	/* holds creation time */
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d74 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
