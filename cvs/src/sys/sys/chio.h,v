head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.42
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.38
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.40
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.32
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.36
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.34
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.30
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.28
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.26
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.24
	OPENBSD_5_0:1.7.0.22
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.20
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.18
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.14
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.30
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.28
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.4.0.26
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.24
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.22
	OPENBSD_2_8:1.4.0.20
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.18
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.16
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.14
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.12
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.10
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2006.05.31.03.01.44;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.28.11.42.28;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.17.17.47.24;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.04.21.22.31.32;	author deraadt;	state Exp;
branches
	1.4.16.1
	1.4.26.1;
next	1.3;

1.3
date	96.03.03.12.11.25;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.20.05.02.46;	author briggs;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.25;	author deraadt;	state Exp;
branches;
next	;

1.4.16.1
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.4.16.2;

1.4.16.2
date	2003.05.13.19.36.57;	author ho;	state Exp;
branches;
next	;

1.4.26.1
date	2002.10.29.00.36.49;	author art;	state Exp;
branches;
next	1.4.26.2;

1.4.26.2
date	2003.05.19.22.32.19;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.7
log
@
	Add support for primary and alternate volume tags to ch(4) - borrowed
and adapted from FreeBSD. This adds the ability for status requests to ask
for the volume tags (usually bar codes, on changers with a bar code reader)
on media inthe library.

ok deraadt@@, krw@@
@
text
@/*	$OpenBSD: chio.h,v 1.6 2003/03/28 11:42:28 mickey Exp $	*/
/*	$NetBSD: chio.h,v 1.8 1996/04/03 00:25:21 thorpej Exp $	*/

/*
 * Copyright (c) 1996 Jason R. Thorpe <thorpej@@and.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgements:
 *	This product includes software developed by Jason R. Thorpe
 *	for And Communications, http://www.and.com/
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _SYS_CHIO_H_
#define _SYS_CHIO_H_

/*
 * Element types.  Used as "to" and "from" type indicators in move
 * and exchange operations.
 *
 * Note that code in sys/scsi/ch.c relies on these values (uses them
 * as offsets in an array, and other evil), so don't muck with them
 * unless you know what you're doing.
 */
#define CHET_MT		0	/* medium transport (picker) */
#define CHET_ST		1	/* storage transport (slot) */
#define CHET_IE		2	/* import/export (portal) */
#define CHET_DT		3	/* data transfer (drive) */

/*
 * Maximum length of a volume identification string
 */                                               
#define CH_VOLTAG_MAXLEN 32

/*
 * Structure used to execute a MOVE MEDIUM command.
 */
struct changer_move {
	int	cm_fromtype;	/* element type to move from */
	int	cm_fromunit;	/* logical unit of from element */
	int	cm_totype;	/* element type to move to */
	int	cm_tounit;	/* logical unit of to element */
	int	cm_flags;	/* misc. flags */
};

/* cm_flags */
#define CM_INVERT	0x01	/* invert media */

/*
 * Structure used to execute an EXCHANGE MEDIUM command.  In an
 * exchange operation, the following steps occur:
 *
 *	- media from source is moved to first destination.
 *
 *	- media previously occupying first destination is moved
 *	  to the second destination.
 *
 * The second destination may or may not be the same as the source.
 * In the case of a simple exchange, the source and second destination
 * are the same.
 */
struct changer_exchange {
	int	ce_srctype;	/* element type of source */
	int	ce_srcunit;	/* logical unit of source */
	int	ce_fdsttype;	/* element type of first destination */
	int	ce_fdstunit;	/* logical unit of first destination */
	int	ce_sdsttype;	/* element type of second destination */
	int	ce_sdstunit;	/* logical unit of second destination */
	int	ce_flags;	/* misc. flags */
};

/* ce_flags */
#define CE_INVERT1	0x01	/* invert media 1 */
#define CE_INVERT2	0x02	/* invert media 2 */

/*
 * Structure used to execute a POSITION TO ELEMENT command.  This
 * moves the current picker in front of the specified element.
 */
struct changer_position {
	int	cp_type;	/* element type */
	int	cp_unit;	/* logical unit of element */
	int	cp_flags;	/* misc. flags */
};

/* cp_flags */
#define CP_INVERT	0x01	/* invert picker */

/*
 * Data returned by CHIOGPARAMS.
 */
struct changer_params {
	int	cp_curpicker;	/* current picker */
	int	cp_npickers;	/* number of pickers */
	int	cp_nslots;	/* number of slots */
	int	cp_nportals;	/* number of import/export portals */
	int	cp_ndrives;	/* number of drives */
};

struct changer_voltag {
	u_char		cv_volid[CH_VOLTAG_MAXLEN + 1];
	u_int16_t	cv_serial;
};

struct changer_element_status {
	int	 		ces_type;		/* element type */
	u_int8_t 		ces_flags;		/* flags */
  	struct changer_voltag	ces_pvoltag;		/* primary voltag */
	struct changer_voltag	ces_avoltag;		/* alternate voltag */
};

/*
 * Command used to get element status.
 */
struct changer_element_status_request {
	int				cesr_type;  /* element type */
	int				cesr_flags;
#define CESR_VOLTAGS 0x01	

	struct changer_element_status	*cesr_data; /* pre-allocated data storage */
};

/*
 * Data returned by CHIOGSTATUS is an array of flags bytes.
 * Not all flags have meaning for all element types.
 */
#define CESTATUS_FULL		0x01	/* element is full */
#define CESTATUS_IMPEXP		0x02	/* media deposited by operator */
#define CESTATUS_EXCEPT		0x04	/* element in abnormal state */
#define CESTATUS_ACCESS		0x08	/* media accessible by picker */
#define CESTATUS_EXENAB		0x10	/* element supports exporting */
#define CESTATUS_INENAB		0x20	/* element supports importing */

#define CESTATUS_PICKER_MASK	0x05	/* flags valid for pickers */
#define CESTATUS_SLOT_MASK	0x0c	/* flags valid for slots */
#define CESTATUS_PORTAL_MASK	0x3f	/* flags valid for portals */
#define CESTATUS_DRIVE_MASK	0x0c	/* flags valid for drives */

#define CESTATUS_BITS	\
	"\20\6INEAB\5EXENAB\4ACCESS\3EXCEPT\2IMPEXP\1FULL"

/*
 * XXX we have to renumber this since it chashes w/ the
 * cdio ioctls, O* interface goes away right after 3.3
 */
#define CHIOMOVE	_IOW('c', 0x41, struct changer_move)
#define CHIOEXCHANGE	_IOW('c', 0x42, struct changer_exchange)
#define CHIOPOSITION	_IOW('c', 0x43, struct changer_position)
#define CHIOGPICKER	_IOR('c', 0x44, int)
#define CHIOSPICKER	_IOW('c', 0x45, int)
#define CHIOGPARAMS	_IOR('c', 0x46, struct changer_params)
#define CHIOGSTATUS	_IOW('c', 0x48, struct changer_element_status_request)

#endif /* _SYS_CHIO_H_ */
@


1.6
log
@OCHIO* dies horrible death by dd; as per renaming done before
@
text
@d1 1
a1 1
/*	$OpenBSD: chio.h,v 1.5 2002/10/17 17:47:24 mickey Exp $	*/
d53 5
d122 12
d137 6
a142 3
struct changer_element_status {
	int	ces_type;	/* element type */
	u_int8_t *ces_data;	/* pre-allocated data storage */
d174 1
a174 1
#define CHIOGSTATUS	_IOW('c', 0x48, struct changer_element_status)
@


1.5
log
@renumber the CHIO* since they clash w/ the CDIO, keep the old ones as OCHIO, EOL set to post 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: chio.h,v 1.4 1996/04/21 22:31:32 deraadt Exp $	*/
a147 1
#define OCHIOMOVE	_IOW('c', 0x01, struct changer_move)
a148 1
#define OCHIOEXCHANGE	_IOW('c', 0x02, struct changer_exchange)
a149 1
#define OCHIOPOSITION	_IOW('c', 0x03, struct changer_position)
a150 1
#define OCHIOGPICKER	_IOR('c', 0x04, int)
a151 1
#define OCHIOSPICKER	_IOW('c', 0x05, int)
a152 1
#define OCHIOGPARAMS	_IOR('c', 0x06, struct changer_params)
a153 1
#define OCHIOGSTATUS	_IOW('c', 0x08, struct changer_element_status)
@


1.4
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: chio.h,v 1.3 1996/03/03 12:11:25 niklas Exp $	*/
d144 18
a161 7
#define CHIOMOVE	_IOW('c', 0x01, struct changer_move)
#define CHIOEXCHANGE	_IOW('c', 0x02, struct changer_exchange)
#define CHIOPOSITION	_IOW('c', 0x03, struct changer_position)
#define CHIOGPICKER	_IOR('c', 0x04, int)
#define CHIOSPICKER	_IOW('c', 0x05, int)
#define CHIOGPARAMS	_IOR('c', 0x06, struct changer_params)
#define CHIOGSTATUS	_IOW('c', 0x08, struct changer_element_status)
@


1.4.16.1
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d144 7
a150 18
/*
 * XXX we have to renumber this since it chashes w/ the
 * cdio ioctls, O* interface goes away right after 3.3
 */
#define OCHIOMOVE	_IOW('c', 0x01, struct changer_move)
#define CHIOMOVE	_IOW('c', 0x41, struct changer_move)
#define OCHIOEXCHANGE	_IOW('c', 0x02, struct changer_exchange)
#define CHIOEXCHANGE	_IOW('c', 0x42, struct changer_exchange)
#define OCHIOPOSITION	_IOW('c', 0x03, struct changer_position)
#define CHIOPOSITION	_IOW('c', 0x43, struct changer_position)
#define OCHIOGPICKER	_IOR('c', 0x04, int)
#define CHIOGPICKER	_IOR('c', 0x44, int)
#define OCHIOSPICKER	_IOW('c', 0x05, int)
#define CHIOSPICKER	_IOW('c', 0x45, int)
#define OCHIOGPARAMS	_IOR('c', 0x06, struct changer_params)
#define CHIOGPARAMS	_IOR('c', 0x46, struct changer_params)
#define OCHIOGSTATUS	_IOW('c', 0x08, struct changer_element_status)
#define CHIOGSTATUS	_IOW('c', 0x48, struct changer_element_status)
@


1.4.16.2
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: chio.h,v 1.4.16.1 2003/03/28 00:41:30 niklas Exp $	*/
d148 1
d150 1
d152 1
d154 1
d156 1
d158 1
d160 1
@


1.4.26.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: chio.h,v 1.4 1996/04/21 22:31:32 deraadt Exp $	*/
d144 7
a150 18
/*
 * XXX we have to renumber this since it chashes w/ the
 * cdio ioctls, O* interface goes away right after 3.3
 */
#define OCHIOMOVE	_IOW('c', 0x01, struct changer_move)
#define CHIOMOVE	_IOW('c', 0x41, struct changer_move)
#define OCHIOEXCHANGE	_IOW('c', 0x02, struct changer_exchange)
#define CHIOEXCHANGE	_IOW('c', 0x42, struct changer_exchange)
#define OCHIOPOSITION	_IOW('c', 0x03, struct changer_position)
#define CHIOPOSITION	_IOW('c', 0x43, struct changer_position)
#define OCHIOGPICKER	_IOR('c', 0x04, int)
#define CHIOGPICKER	_IOR('c', 0x44, int)
#define OCHIOSPICKER	_IOW('c', 0x05, int)
#define CHIOSPICKER	_IOW('c', 0x45, int)
#define OCHIOGPARAMS	_IOR('c', 0x06, struct changer_params)
#define CHIOGPARAMS	_IOR('c', 0x46, struct changer_params)
#define OCHIOGSTATUS	_IOW('c', 0x08, struct changer_element_status)
#define CHIOGSTATUS	_IOW('c', 0x48, struct changer_element_status)
@


1.4.26.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d148 1
d150 1
d152 1
d154 1
d156 1
d158 1
d160 1
@


1.3
log
@From NetBSD: 960217 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: chio.h,v 1.7 1996/02/19 18:29:06 scottr Exp $	*/
d5 1
a5 1
 * Copyright (c) 1982, 1986 The Regents of the University of California.
d17 15
a31 16
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
d34 8
d43 3
a45 1
 *	@@(#)mtio.h	7.6 (Berkeley) 2/5/91
d47 4
d52 2
a53 2
/* This is a "converted" mtio.h from 386BSD 
   Stefan Grefen grefen@@goofy.zdv.uni-mainz.de 
d55 7
d63 2
a64 2
#ifndef _SYS_CHIO_H_
#define _SYS_CHIO_H_
d67 11
a77 1
 * Structures and definitions for changer io control commands
d79 13
d93 8
a100 77
#define CH_INVERT		0x10000
#define CH_ADDR_MASK		0xffff
struct chop {
	short	ch_op;		/* operations defined below */
	short	result;		/* the result */
	union {
		struct {
			int chm;		/* Transport element */
			int from;
			int to;
		} move;
		struct {
			int chm;		/* Transport element */
			int to;
		} position; 
		struct {
			short   chmo;		/* Offset of first CHM */
			short   chms;		/* No. of CHM */
			short   slots;		/* No. of Storage Elements */
			short   sloto;		/* Offset of first SE */
			short   imexs;		/* No. of Import/Export Slots */
			short   imexo;		/* Offset of first IM/EX */
			short   drives;		/* No. of CTS */
			short   driveo;		/* Offset of first CTS */
			short   rot;		/* CHM can rotate */
		} getparam;
		struct {
			int type;
#define CH_CHM	1
#define CH_STOR	2
#define CH_IMEX	3
#define CH_CTS	4
			int from;
			struct {
				u_char elema_1;
				u_char elema_0;
#if BYTE_ORDER == LITTLE_ENDIAN
				u_char full:1;
				u_char rsvd:1;
				u_char except:1;
				u_char :5;
#endif
#if BYTE_ORDER == BIG_ENDIAN
				u_char :5;
				u_char except:1;
				u_char rsvd:1;
				u_char full:1;
#endif
				u_char rsvd2;
				union {
					struct {
						u_char add_sense_code;
						u_char add_sense_code_qualifier;
					} specs;
					short add_sense;
/* WARINING LSB only */
#define CH_CHOLDER	0x0290	/* Cartridge holder is missing */
#define CH_STATUSQ	0x0390	/* Status is questionable */
#define CH_CTS_CLOSED	0x0490	/* CTS door is closed */
				} ch_add_sense;
				u_char rsvd3[3];
#if BYTE_ORDER == BIG_ENDIAN
				u_char :6;
				u_char invert:1;
				u_char svalid:1;
#endif
#if BYTE_ORDER == LITTLE_ENDIAN
				u_char svalid:1;
				u_char invert:1;
				u_char :6;
#endif
				u_char source_1;
				u_char source_0;
				u_char rsvd4[4];
			} elem_data;
		} get_elem_stat;
	} u;
d103 2
a104 5
/* operations */
#define CHMOVE				1
#define CHPOSITION			2
#define CHGETPARAM			3
#define CHGETELEM			4
d106 10
d117 34
a150 2
/* Changer IO control command */
#define	CHIOOP	_IOWR('c', 1, struct chop)	/* do a mag tape op */
d152 1
a152 1
#endif /* !_SYS_CHIO_H_ */
@


1.2
log
@The bitfields are ugly, but as they are basically a published interface,
it will be painful to change them.  (IMO)

Bring in from NetBSD:
Bitfields are usually implemented in natural bit order.  Pointed
out by Masaru Oki <oki@@yk.rim.or.jp> in NetBSD PR#2091.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: chio.h,v 1.6 1994/06/29 06:43:43 cgd Exp $	*/
d85 1
d90 7
d110 1
d114 6
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
