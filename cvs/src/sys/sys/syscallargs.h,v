head	1.187;
access;
symbols
	OPENBSD_6_1:1.187.0.2
	OPENBSD_6_1_BASE:1.187
	OPENBSD_6_0:1.185.0.2
	OPENBSD_6_0_BASE:1.185
	OPENBSD_5_9:1.180.0.2
	OPENBSD_5_9_BASE:1.180
	OPENBSD_5_8:1.168.0.4
	OPENBSD_5_8_BASE:1.168
	OPENBSD_5_7:1.165.0.2
	OPENBSD_5_7_BASE:1.165
	OPENBSD_5_6:1.157.0.4
	OPENBSD_5_6_BASE:1.157
	OPENBSD_5_5:1.152.0.4
	OPENBSD_5_5_BASE:1.152
	OPENBSD_5_4:1.147.0.2
	OPENBSD_5_4_BASE:1.147
	OPENBSD_5_3:1.140.0.2
	OPENBSD_5_3_BASE:1.140
	OPENBSD_5_2:1.138.0.2
	OPENBSD_5_2_BASE:1.138
	OPENBSD_5_1_BASE:1.134
	OPENBSD_5_1:1.134.0.2
	OPENBSD_5_0:1.132.0.2
	OPENBSD_5_0_BASE:1.132
	OPENBSD_4_9:1.118.0.2
	OPENBSD_4_9_BASE:1.118
	OPENBSD_4_8:1.116.0.2
	OPENBSD_4_8_BASE:1.116
	OPENBSD_4_7:1.112.0.2
	OPENBSD_4_7_BASE:1.112
	OPENBSD_4_6:1.108.0.4
	OPENBSD_4_6_BASE:1.108
	OPENBSD_4_5:1.103.0.4
	OPENBSD_4_5_BASE:1.103
	OPENBSD_4_4:1.103.0.2
	OPENBSD_4_4_BASE:1.103
	OPENBSD_4_3:1.102.0.2
	OPENBSD_4_3_BASE:1.102
	OPENBSD_4_2:1.99.0.4
	OPENBSD_4_2_BASE:1.99
	OPENBSD_4_1:1.99.0.2
	OPENBSD_4_1_BASE:1.99
	OPENBSD_4_0:1.97.0.2
	OPENBSD_4_0_BASE:1.97
	OPENBSD_3_9:1.94.0.2
	OPENBSD_3_9_BASE:1.94
	OPENBSD_3_8:1.88.0.2
	OPENBSD_3_8_BASE:1.88
	OPENBSD_3_7:1.86.0.4
	OPENBSD_3_7_BASE:1.86
	OPENBSD_3_6:1.86.0.2
	OPENBSD_3_6_BASE:1.86
	SMP_SYNC_A:1.79
	SMP_SYNC_B:1.79
	OPENBSD_3_5:1.77.0.2
	OPENBSD_3_5_BASE:1.77
	OPENBSD_3_4:1.71.0.2
	OPENBSD_3_4_BASE:1.71
	UBC_SYNC_A:1.67
	OPENBSD_3_3:1.60.0.2
	OPENBSD_3_3_BASE:1.60
	OPENBSD_3_2:1.58.0.2
	OPENBSD_3_2_BASE:1.58
	OPENBSD_3_1:1.57.0.2
	OPENBSD_3_1_BASE:1.57
	UBC_SYNC_B:1.58
	UBC:1.54.0.4
	UBC_BASE:1.54
	OPENBSD_3_0:1.54.0.2
	OPENBSD_3_0_BASE:1.54
	OPENBSD_2_9_BASE:1.49
	OPENBSD_2_9:1.49.0.2
	OPENBSD_2_8:1.47.0.2
	OPENBSD_2_8_BASE:1.47
	OPENBSD_2_7:1.45.0.2
	OPENBSD_2_7_BASE:1.45
	SMP:1.43.0.2
	SMP_BASE:1.43
	kame_19991208:1.41
	OPENBSD_2_6:1.41.0.2
	OPENBSD_2_6_BASE:1.41
	OPENBSD_2_5:1.36.0.2
	OPENBSD_2_5_BASE:1.36
	OPENBSD_2_4:1.34.0.2
	OPENBSD_2_4_BASE:1.34
	OPENBSD_2_3:1.26.0.2
	OPENBSD_2_3_BASE:1.26
	OPENBSD_2_2:1.19.0.2
	OPENBSD_2_2_BASE:1.19
	OPENBSD_2_1:1.16.0.2
	OPENBSD_2_1_BASE:1.16
	OPENBSD_2_0:1.13.0.2
	OPENBSD_2_0_BASE:1.13
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.187
date	2016.09.26.16.43.58;	author jca;	state Exp;
branches;
next	1.186;
commitid	t2jShKFwiA9gaU45;

1.186
date	2016.09.04.17.24.02;	author jsing;	state Exp;
branches;
next	1.185;
commitid	BSbNl91FuYX8ZrTk;

1.185
date	2016.06.27.16.52.01;	author jsing;	state Exp;
branches;
next	1.184;
commitid	zhZfX9LPKxKZfTSR;

1.184
date	2016.05.31.22.10.34;	author deraadt;	state Exp;
branches;
next	1.183;
commitid	MPXoA8w22WfeDURT;

1.183
date	2016.03.30.07.49.44;	author guenther;	state Exp;
branches;
next	1.182;
commitid	7jLJPhQK2zyWzG6Z;

1.182
date	2016.03.28.20.51.09;	author kettenis;	state Exp;
branches;
next	1.181;
commitid	Me86gqaSaGmYUR1L;

1.181
date	2016.03.21.22.41.29;	author bluhm;	state Exp;
branches;
next	1.180;
commitid	hneUpr7ZOJCeNeHP;

1.180
date	2015.11.24.23.50.50;	author deraadt;	state Exp;
branches;
next	1.179;
commitid	TOsawG7nknenUTKw;

1.179
date	2015.11.10.04.32.06;	author guenther;	state Exp;
branches;
next	1.178;
commitid	n9eBxUCVtRKCY8tE;

1.178
date	2015.10.28.12.04.06;	author deraadt;	state Exp;
branches;
next	1.177;
commitid	TK8oge2VXNNoQZjq;

1.177
date	2015.10.18.00.05.59;	author deraadt;	state Exp;
branches;
next	1.176;
commitid	qkbSzHUXFtlhbJG3;

1.176
date	2015.10.09.01.11.12;	author deraadt;	state Exp;
branches;
next	1.175;
commitid	925fvYttovA55HOT;

1.175
date	2015.10.02.17.51.04;	author kettenis;	state Exp;
branches;
next	1.174;
commitid	VpEpbgPSYypy3NfC;

1.174
date	2015.09.26.15.39.57;	author tedu;	state Exp;
branches;
next	1.173;
commitid	h1rusrK4lwb2KbOC;

1.173
date	2015.09.13.17.09.21;	author guenther;	state Exp;
branches;
next	1.172;
commitid	wzXeYk4hQ3rm1WW8;

1.172
date	2015.09.09.17.57.57;	author deraadt;	state Exp;
branches;
next	1.171;
commitid	doHZlEQGjhIpdtGa;

1.171
date	2015.08.26.05.40.40;	author doug;	state Exp;
branches;
next	1.170;
commitid	e0Zbz1k9tgjLaS5E;

1.170
date	2015.08.26.05.20.06;	author doug;	state Exp;
branches;
next	1.169;
commitid	B5zLNz9UGGYolarc;

1.169
date	2015.08.22.20.18.50;	author deraadt;	state Exp;
branches;
next	1.168;
commitid	6NDuzTPjBp2GqkfQ;

1.168
date	2015.07.20.00.57.06;	author guenther;	state Exp;
branches;
next	1.167;
commitid	uQd7U40rr4GIEFlW;

1.167
date	2015.07.19.02.37.44;	author deraadt;	state Exp;
branches;
next	1.166;
commitid	DP44l2zLFhJybkSd;

1.166
date	2015.05.06.11.26.02;	author jsg;	state Exp;
branches;
next	1.165;
commitid	9vrWUxB650OkCt4B;

1.165
date	2015.02.09.13.55.04;	author deraadt;	state Exp;
branches;
next	1.164;
commitid	FZGRHsrcj1Ez7Zul;

1.164
date	2015.02.09.13.34.49;	author deraadt;	state Exp;
branches;
next	1.163;
commitid	5yMidS9tJP3CVY3y;

1.163
date	2014.12.08.20.56.34;	author guenther;	state Exp;
branches;
next	1.162;
commitid	Unabqm8CKTCGXUYB;

1.162
date	2014.10.09.03.36.05;	author tedu;	state Exp;
branches;
next	1.161;
commitid	zonjoCc0qF32do3P;

1.161
date	2014.09.18.02.16.32;	author uebayasi;	state Exp;
branches;
next	1.160;
commitid	UU861uRLmkJCqllG;

1.160
date	2014.09.17.19.27.59;	author millert;	state Exp;
branches;
next	1.159;
commitid	RxMxZG9CDI9E2MZA;

1.159
date	2014.09.01.05.13.22;	author doug;	state Exp;
branches;
next	1.158;
commitid	SLapLeLVwWfyTUNP;

1.158
date	2014.08.31.01.47.17;	author guenther;	state Exp;
branches;
next	1.157;
commitid	XuGqbG3iajgb3Otu;

1.157
date	2014.07.10.08.58.30;	author deraadt;	state Exp;
branches;
next	1.156;
commitid	9yOEQmEgrCkgJoXC;

1.156
date	2014.07.07.20.01.21;	author matthew;	state Exp;
branches;
next	1.155;
commitid	4iiBPg78gXlMS7rl;

1.155
date	2014.07.07.00.27.13;	author guenther;	state Exp;
branches;
next	1.154;
commitid	ao5TlrTvPnkvJVg1;

1.154
date	2014.06.14.18.01.55;	author deraadt;	state Exp;
branches;
next	1.153;
commitid	AZPdatTs429ib8GG;

1.153
date	2014.06.13.08.27.04;	author deraadt;	state Exp;
branches;
next	1.152;
commitid	G4h95LDanJxGDw1w;

1.152
date	2014.02.09.10.07.13;	author guenther;	state Exp;
branches;
next	1.151;

1.151
date	2013.09.14.01.36.02;	author guenther;	state Exp;
branches;
next	1.150;

1.150
date	2013.08.16.08.33.56;	author guenther;	state Exp;
branches;
next	1.149;

1.149
date	2013.08.14.05.27.02;	author guenther;	state Exp;
branches;
next	1.148;

1.148
date	2013.08.13.05.54.10;	author guenther;	state Exp;
branches;
next	1.147;

1.147
date	2013.06.09.13.10.27;	author miod;	state Exp;
branches;
next	1.146;

1.146
date	2013.06.01.16.27.51;	author tedu;	state Exp;
branches;
next	1.145;

1.145
date	2013.06.01.09.50.03;	author miod;	state Exp;
branches;
next	1.144;

1.144
date	2013.04.29.17.08.08;	author matthew;	state Exp;
branches;
next	1.143;

1.143
date	2013.04.15.15.37.10;	author jsing;	state Exp;
branches;
next	1.142;

1.142
date	2013.03.14.21.39.05;	author tedu;	state Exp;
branches;
next	1.141;

1.141
date	2013.03.02.07.06.00;	author guenther;	state Exp;
branches;
next	1.140;

1.140
date	2012.09.10.02.22.36;	author deraadt;	state Exp;
branches;
next	1.139;

1.139
date	2012.08.23.06.13.02;	author deraadt;	state Exp;
branches;
next	1.138;

1.138
date	2012.06.21.00.57.59;	author guenther;	state Exp;
branches;
next	1.137;

1.137
date	2012.04.12.12.33.47;	author deraadt;	state Exp;
branches;
next	1.136;

1.136
date	2012.04.12.11.17.16;	author deraadt;	state Exp;
branches;
next	1.135;

1.135
date	2012.04.12.11.10.07;	author deraadt;	state Exp;
branches;
next	1.134;

1.134
date	2012.01.17.02.34.18;	author guenther;	state Exp;
branches;
next	1.133;

1.133
date	2011.10.15.23.36.31;	author guenther;	state Exp;
branches;
next	1.132;

1.132
date	2011.07.18.00.17.30;	author matthew;	state Exp;
branches;
next	1.131;

1.131
date	2011.07.09.05.46.58;	author matthew;	state Exp;
branches;
next	1.130;

1.130
date	2011.07.09.05.32.25;	author matthew;	state Exp;
branches;
next	1.129;

1.129
date	2011.07.09.00.18.15;	author deraadt;	state Exp;
branches;
next	1.128;

1.128
date	2011.07.09.00.11.28;	author deraadt;	state Exp;
branches;
next	1.127;

1.127
date	2011.07.08.19.19.59;	author tedu;	state Exp;
branches;
next	1.126;

1.126
date	2011.07.08.05.02.49;	author matthew;	state Exp;
branches;
next	1.125;

1.125
date	2011.07.07.23.46.46;	author matthew;	state Exp;
branches;
next	1.124;

1.124
date	2011.07.07.18.31.17;	author tedu;	state Exp;
branches;
next	1.123;

1.123
date	2011.07.07.01.21.22;	author tedu;	state Exp;
branches;
next	1.122;

1.122
date	2011.07.04.20.35.35;	author deraadt;	state Exp;
branches;
next	1.121;

1.121
date	2011.06.30.13.44.15;	author tedu;	state Exp;
branches;
next	1.120;

1.120
date	2011.06.01.06.22.39;	author guenther;	state Exp;
branches;
next	1.119;

1.119
date	2011.04.04.12.44.43;	author deraadt;	state Exp;
branches;
next	1.118;

1.118
date	2010.10.28.15.03.51;	author millert;	state Exp;
branches;
next	1.117;

1.117
date	2010.09.20.07.20.35;	author deraadt;	state Exp;
branches;
next	1.116;

1.116
date	2010.07.03.04.44.51;	author guenther;	state Exp;
branches;
next	1.115;

1.115
date	2010.07.01.23.11.11;	author tedu;	state Exp;
branches;
next	1.114;

1.114
date	2010.07.01.01.55.33;	author deraadt;	state Exp;
branches;
next	1.113;

1.113
date	2010.06.29.00.29.05;	author tedu;	state Exp;
branches;
next	1.112;

1.112
date	2010.01.18.19.13.05;	author schwarze;	state Exp;
branches;
next	1.111;

1.111
date	2009.11.27.20.06.42;	author guenther;	state Exp;
branches;
next	1.110;

1.110
date	2009.11.27.19.45.53;	author guenther;	state Exp;
branches;
next	1.109;

1.109
date	2009.08.02.16.28.40;	author beck;	state Exp;
branches;
next	1.108;

1.108
date	2009.06.15.17.31.49;	author deraadt;	state Exp;
branches;
next	1.107;

1.107
date	2009.06.15.17.01.26;	author beck;	state Exp;
branches;
next	1.106;

1.106
date	2009.06.03.15.47.13;	author jj;	state Exp;
branches;
next	1.105;

1.105
date	2009.06.03.14.45.55;	author jj;	state Exp;
branches;
next	1.104;

1.104
date	2009.03.12.07.04.49;	author guenther;	state Exp;
branches;
next	1.103;

1.103
date	2008.03.16.19.43.41;	author otto;	state Exp;
branches;
next	1.102;

1.102
date	2008.01.05.00.38.13;	author miod;	state Exp;
branches;
next	1.101;

1.101
date	2007.11.28.13.48.31;	author deraadt;	state Exp;
branches;
next	1.100;

1.100
date	2007.11.27.18.05.59;	author art;	state Exp;
branches;
next	1.99;

1.99
date	2006.09.22.17.36.17;	author pedro;	state Exp;
branches;
next	1.98;

1.98
date	2006.09.22.14.36.56;	author pedro;	state Exp;
branches;
next	1.97;

1.97
date	2006.06.14.19.52.52;	author otto;	state Exp;
branches;
next	1.96;

1.96
date	2006.06.09.00.06.10;	author deraadt;	state Exp;
branches;
next	1.95;

1.95
date	2006.04.28.08.39.32;	author pedro;	state Exp;
branches;
next	1.94;

1.94
date	2005.12.30.04.06.28;	author tedu;	state Exp;
branches;
next	1.93;

1.93
date	2005.12.30.04.02.18;	author tedu;	state Exp;
branches;
next	1.92;

1.92
date	2005.12.13.06.04.15;	author tedu;	state Exp;
branches;
next	1.91;

1.91
date	2005.12.13.06.02.03;	author tedu;	state Exp;
branches;
next	1.90;

1.90
date	2005.12.03.18.11.29;	author tedu;	state Exp;
branches;
next	1.89;

1.89
date	2005.12.03.18.09.09;	author tedu;	state Exp;
branches;
next	1.88;

1.88
date	2005.07.03.20.14.19;	author drahn;	state Exp;
branches;
next	1.87;

1.87
date	2005.06.17.20.42.32;	author millert;	state Exp;
branches;
next	1.86;

1.86
date	2004.07.15.14.36.08;	author deraadt;	state Exp;
branches;
next	1.85;

1.85
date	2004.07.15.11.25.18;	author millert;	state Exp;
branches;
next	1.84;

1.84
date	2004.07.14.23.45.59;	author millert;	state Exp;
branches;
next	1.83;

1.83
date	2004.07.14.18.01.29;	author millert;	state Exp;
branches;
next	1.82;

1.82
date	2004.07.13.21.06.33;	author millert;	state Exp;
branches;
next	1.81;

1.81
date	2004.07.09.23.54.00;	author millert;	state Exp;
branches;
next	1.80;

1.80
date	2004.06.13.21.52.08;	author niklas;	state Exp;
branches;
next	1.79;

1.79
date	2004.05.27.20.49.55;	author tedu;	state Exp;
branches;
next	1.78;

1.78
date	2004.05.03.17.40.18;	author millert;	state Exp;
branches;
next	1.77;

1.77
date	2004.02.28.19.44.32;	author miod;	state Exp;
branches;
next	1.76;

1.76
date	2004.01.14.05.25.10;	author tedu;	state Exp;
branches;
next	1.75;

1.75
date	2004.01.12.18.08.51;	author tedu;	state Exp;
branches;
next	1.74;

1.74
date	2003.12.31.00.13.57;	author millert;	state Exp;
branches;
next	1.73;

1.73
date	2003.12.11.23.04.14;	author millert;	state Exp;
branches;
next	1.72;

1.72
date	2003.12.10.23.11.36;	author millert;	state Exp;
branches;
next	1.71;

1.71
date	2003.09.07.21.01.08;	author miod;	state Exp;
branches;
next	1.70;

1.70
date	2003.07.01.22.19.35;	author tedu;	state Exp;
branches;
next	1.69;

1.69
date	2003.06.23.04.27.55;	author deraadt;	state Exp;
branches;
next	1.68;

1.68
date	2003.06.22.21.34.27;	author deraadt;	state Exp;
branches;
next	1.67;

1.67
date	2003.05.10.17.55.57;	author miod;	state Exp;
branches;
next	1.66;

1.66
date	2003.04.29.19.52.52;	author miod;	state Exp;
branches;
next	1.65;

1.65
date	2003.04.28.21.34.06;	author drahn;	state Exp;
branches;
next	1.64;

1.64
date	2003.04.25.20.34.22;	author drahn;	state Exp;
branches;
next	1.63;

1.63
date	2003.04.25.18.40.46;	author drahn;	state Exp;
branches;
next	1.62;

1.62
date	2003.04.14.06.28.29;	author deraadt;	state Exp;
branches;
next	1.61;

1.61
date	2003.04.14.04.53.50;	author art;	state Exp;
branches;
next	1.60;

1.60
date	2003.01.30.03.32.44;	author millert;	state Exp;
branches;
next	1.59;

1.59
date	2002.10.30.20.05.20;	author millert;	state Exp;
branches;
next	1.58;

1.58
date	2002.07.06.19.20.50;	author nordin;	state Exp;
branches;
next	1.57;

1.57
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.56;

1.56
date	2002.03.14.00.44.20;	author miod;	state Exp;
branches;
next	1.55;

1.55
date	2002.02.22.20.55.28;	author drahn;	state Exp;
branches;
next	1.54;

1.54
date	2001.08.26.04.11.12;	author deraadt;	state Exp;
branches
	1.54.4.1;
next	1.53;

1.53
date	2001.06.26.20.07.26;	author dugsong;	state Exp;
branches;
next	1.52;

1.52
date	2001.06.26.19.56.51;	author dugsong;	state Exp;
branches;
next	1.51;

1.51
date	2001.06.16.22.17.12;	author deraadt;	state Exp;
branches;
next	1.50;

1.50
date	2001.05.16.17.17.04;	author millert;	state Exp;
branches;
next	1.49;

1.49
date	2001.03.09.15.12.53;	author art;	state Exp;
branches;
next	1.48;

1.48
date	2000.11.16.20.04.09;	author provos;	state Exp;
branches;
next	1.47;

1.47
date	2000.09.12.17.28.44;	author millert;	state Exp;
branches;
next	1.46;

1.46
date	2000.06.22.22.44.43;	author mickey;	state Exp;
branches;
next	1.45;

1.45
date	2000.05.01.23.12.30;	author deraadt;	state Exp;
branches;
next	1.44;

1.44
date	2000.04.20.06.32.47;	author deraadt;	state Exp;
branches;
next	1.43;

1.43
date	2000.02.07.08.07.14;	author assar;	state Exp;
branches
	1.43.2.1;
next	1.42;

1.42
date	2000.02.07.04.57.18;	author assar;	state Exp;
branches;
next	1.41;

1.41
date	99.08.08.00.32.22;	author niklas;	state Exp;
branches;
next	1.40;

1.40
date	99.06.07.07.18.37;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	99.05.31.18.18.13;	author millert;	state Exp;
branches;
next	1.38;

1.38
date	99.05.31.17.34.53;	author millert;	state Exp;
branches;
next	1.37;

1.37
date	99.05.22.21.25.51;	author weingart;	state Exp;
branches;
next	1.36;

1.36
date	99.02.26.02.02.43;	author millert;	state Exp;
branches;
next	1.35;

1.35
date	98.11.18.01.15.59;	author art;	state Exp;
branches;
next	1.34;

1.34
date	98.09.18.00.33.46;	author art;	state Exp;
branches;
next	1.33;

1.33
date	98.08.30.18.18.47;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	98.08.30.18.08.19;	author art;	state Exp;
branches;
next	1.31;

1.31
date	98.06.12.08.31.57;	author deraadt;	state Exp;
branches;
next	1.30;

1.30
date	98.06.11.18.31.19;	author deraadt;	state Exp;
branches;
next	1.29;

1.29
date	98.06.02.05.23.14;	author deraadt;	state Exp;
branches;
next	1.28;

1.28
date	98.05.11.06.14.14;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	98.04.25.07.15.49;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	98.02.16.22.01.10;	author millert;	state Exp;
branches;
next	1.25;

1.25
date	98.02.10.08.44.28;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	98.02.08.22.38.29;	author tholo;	state Exp;
branches;
next	1.23;

1.23
date	98.01.02.05.38.27;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	97.11.14.20.56.46;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	97.11.13.18.37.40;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	97.11.13.07.11.31;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	97.08.30.08.13.52;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	97.05.31.01.09.37;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	97.05.30.21.43.35;	author kstailey;	state Exp;
branches;
next	1.16;

1.16
date	97.04.20.20.49.44;	author tholo;	state Exp;
branches;
next	1.15;

1.15
date	97.01.26.05.22.13;	author downsj;	state Exp;
branches;
next	1.14;

1.14
date	96.10.29.16.05.16;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	96.10.04.01.01.08;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	96.08.25.09.53.41;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	96.05.18.08.54.18;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	96.05.02.13.14.21;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	96.04.28.00.26.48;	author tholo;	state Exp;
branches;
next	1.8;

1.8
date	96.04.19.16.10.36;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	96.04.19.01.36.37;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.04.18.21.41.11;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.01.29.23.05.10;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.01.10.18.02.14;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.01.07.17.20.37;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.05.23.58;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.29;	author deraadt;	state Exp;
branches;
next	;

1.43.2.1
date	2001.05.14.22.45.04;	author niklas;	state Exp;
branches;
next	1.43.2.2;

1.43.2.2
date	2001.07.04.11.00.33;	author niklas;	state Exp;
branches;
next	1.43.2.3;

1.43.2.3
date	2001.10.31.03.30.30;	author nate;	state Exp;
branches;
next	1.43.2.4;

1.43.2.4
date	2002.03.06.02.17.13;	author niklas;	state Exp;
branches;
next	1.43.2.5;

1.43.2.5
date	2002.03.28.14.52.02;	author niklas;	state Exp;
branches;
next	1.43.2.6;

1.43.2.6
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.43.2.7;

1.43.2.7
date	2003.05.13.19.36.57;	author ho;	state Exp;
branches;
next	1.43.2.8;

1.43.2.8
date	2003.05.15.04.08.03;	author niklas;	state Exp;
branches;
next	1.43.2.9;

1.43.2.9
date	2004.02.19.11.01.34;	author niklas;	state Exp;
branches;
next	1.43.2.10;

1.43.2.10
date	2004.06.05.23.13.10;	author niklas;	state Exp;
branches;
next	;

1.54.4.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	1.54.4.2;

1.54.4.2
date	2002.10.29.00.36.49;	author art;	state Exp;
branches;
next	1.54.4.3;

1.54.4.3
date	2003.05.19.22.32.36;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.187
log
@Regen
@
text
@/*	$OpenBSD$	*/

/*
 * System call argument lists.
 *
 * DO NOT EDIT-- this file is automatically generated.
 * created from;	OpenBSD: syscalls.master,v 1.174 2016/09/04 17:22:40 jsing Exp 
 */

#ifdef	syscallarg
#undef	syscallarg
#endif

#define	syscallarg(x)							\
	union {								\
		register_t pad;						\
		struct { x datum; } le;					\
		struct {						\
			int8_t pad[ (sizeof (register_t) < sizeof (x))	\
				? 0					\
				: sizeof (register_t) - sizeof (x)];	\
			x datum;					\
		} be;							\
	}

struct sys_exit_args {
	syscallarg(int) rval;
};

struct sys_read_args {
	syscallarg(int) fd;
	syscallarg(void *) buf;
	syscallarg(size_t) nbyte;
};

struct sys_write_args {
	syscallarg(int) fd;
	syscallarg(const void *) buf;
	syscallarg(size_t) nbyte;
};

struct sys_open_args {
	syscallarg(const char *) path;
	syscallarg(int) flags;
	syscallarg(mode_t) mode;
};

struct sys_close_args {
	syscallarg(int) fd;
};

struct sys_getentropy_args {
	syscallarg(void *) buf;
	syscallarg(size_t) nbyte;
};

struct sys___tfork_args {
	syscallarg(const struct __tfork *) param;
	syscallarg(size_t) psize;
};

struct sys_link_args {
	syscallarg(const char *) path;
	syscallarg(const char *) link;
};

struct sys_unlink_args {
	syscallarg(const char *) path;
};

struct sys_wait4_args {
	syscallarg(pid_t) pid;
	syscallarg(int *) status;
	syscallarg(int) options;
	syscallarg(struct rusage *) rusage;
};

struct sys_chdir_args {
	syscallarg(const char *) path;
};

struct sys_fchdir_args {
	syscallarg(int) fd;
};

struct sys_mknod_args {
	syscallarg(const char *) path;
	syscallarg(mode_t) mode;
	syscallarg(dev_t) dev;
};

struct sys_chmod_args {
	syscallarg(const char *) path;
	syscallarg(mode_t) mode;
};

struct sys_chown_args {
	syscallarg(const char *) path;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
};

struct sys_obreak_args {
	syscallarg(char *) nsize;
};

struct sys_getrusage_args {
	syscallarg(int) who;
	syscallarg(struct rusage *) rusage;
};

struct sys_mount_args {
	syscallarg(const char *) type;
	syscallarg(const char *) path;
	syscallarg(int) flags;
	syscallarg(void *) data;
};

struct sys_unmount_args {
	syscallarg(const char *) path;
	syscallarg(int) flags;
};

struct sys_setuid_args {
	syscallarg(uid_t) uid;
};

struct sys_ptrace_args {
	syscallarg(int) req;
	syscallarg(pid_t) pid;
	syscallarg(caddr_t) addr;
	syscallarg(int) data;
};

struct sys_recvmsg_args {
	syscallarg(int) s;
	syscallarg(struct msghdr *) msg;
	syscallarg(int) flags;
};

struct sys_sendmsg_args {
	syscallarg(int) s;
	syscallarg(const struct msghdr *) msg;
	syscallarg(int) flags;
};

struct sys_recvfrom_args {
	syscallarg(int) s;
	syscallarg(void *) buf;
	syscallarg(size_t) len;
	syscallarg(int) flags;
	syscallarg(struct sockaddr *) from;
	syscallarg(socklen_t *) fromlenaddr;
};

struct sys_accept_args {
	syscallarg(int) s;
	syscallarg(struct sockaddr *) name;
	syscallarg(socklen_t *) anamelen;
};

struct sys_getpeername_args {
	syscallarg(int) fdes;
	syscallarg(struct sockaddr *) asa;
	syscallarg(socklen_t *) alen;
};

struct sys_getsockname_args {
	syscallarg(int) fdes;
	syscallarg(struct sockaddr *) asa;
	syscallarg(socklen_t *) alen;
};

struct sys_access_args {
	syscallarg(const char *) path;
	syscallarg(int) amode;
};

struct sys_chflags_args {
	syscallarg(const char *) path;
	syscallarg(u_int) flags;
};

struct sys_fchflags_args {
	syscallarg(int) fd;
	syscallarg(u_int) flags;
};

struct sys_stat_args {
	syscallarg(const char *) path;
	syscallarg(struct stat *) ub;
};

struct sys_lstat_args {
	syscallarg(const char *) path;
	syscallarg(struct stat *) ub;
};

struct sys_dup_args {
	syscallarg(int) fd;
};

struct sys_fstatat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(struct stat *) buf;
	syscallarg(int) flag;
};

struct sys_profil_args {
	syscallarg(caddr_t) samples;
	syscallarg(size_t) size;
	syscallarg(u_long) offset;
	syscallarg(u_int) scale;
};

struct sys_ktrace_args {
	syscallarg(const char *) fname;
	syscallarg(int) ops;
	syscallarg(int) facs;
	syscallarg(pid_t) pid;
};

struct sys_sigaction_args {
	syscallarg(int) signum;
	syscallarg(const struct sigaction *) nsa;
	syscallarg(struct sigaction *) osa;
};

struct sys_sigprocmask_args {
	syscallarg(int) how;
	syscallarg(sigset_t) mask;
};

struct sys_getlogin59_args {
	syscallarg(char *) namebuf;
	syscallarg(u_int) namelen;
};

struct sys_setlogin_args {
	syscallarg(const char *) namebuf;
};

struct sys_acct_args {
	syscallarg(const char *) path;
};

struct sys_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct stat *) sb;
};

struct sys_ioctl_args {
	syscallarg(int) fd;
	syscallarg(u_long) com;
	syscallarg(void *) data;
};

struct sys_reboot_args {
	syscallarg(int) opt;
};

struct sys_revoke_args {
	syscallarg(const char *) path;
};

struct sys_symlink_args {
	syscallarg(const char *) path;
	syscallarg(const char *) link;
};

struct sys_readlink_args {
	syscallarg(const char *) path;
	syscallarg(char *) buf;
	syscallarg(size_t) count;
};

struct sys_execve_args {
	syscallarg(const char *) path;
	syscallarg(char *const *) argp;
	syscallarg(char *const *) envp;
};

struct sys_umask_args {
	syscallarg(mode_t) newmask;
};

struct sys_chroot_args {
	syscallarg(const char *) path;
};

struct sys_getfsstat_args {
	syscallarg(struct statfs *) buf;
	syscallarg(size_t) bufsize;
	syscallarg(int) flags;
};

struct sys_statfs_args {
	syscallarg(const char *) path;
	syscallarg(struct statfs *) buf;
};

struct sys_fstatfs_args {
	syscallarg(int) fd;
	syscallarg(struct statfs *) buf;
};

struct sys_fhstatfs_args {
	syscallarg(const fhandle_t *) fhp;
	syscallarg(struct statfs *) buf;
};

struct sys_gettimeofday_args {
	syscallarg(struct timeval *) tp;
	syscallarg(struct timezone *) tzp;
};

struct sys_settimeofday_args {
	syscallarg(const struct timeval *) tv;
	syscallarg(const struct timezone *) tzp;
};

struct sys_setitimer_args {
	syscallarg(int) which;
	syscallarg(const struct itimerval *) itv;
	syscallarg(struct itimerval *) oitv;
};

struct sys_getitimer_args {
	syscallarg(int) which;
	syscallarg(struct itimerval *) itv;
};

struct sys_select_args {
	syscallarg(int) nd;
	syscallarg(fd_set *) in;
	syscallarg(fd_set *) ou;
	syscallarg(fd_set *) ex;
	syscallarg(struct timeval *) tv;
};

struct sys_kevent_args {
	syscallarg(int) fd;
	syscallarg(const struct kevent *) changelist;
	syscallarg(int) nchanges;
	syscallarg(struct kevent *) eventlist;
	syscallarg(int) nevents;
	syscallarg(const struct timespec *) timeout;
};

struct sys_munmap_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
};

struct sys_mprotect_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
};

struct sys_madvise_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) behav;
};

struct sys_utimes_args {
	syscallarg(const char *) path;
	syscallarg(const struct timeval *) tptr;
};

struct sys_futimes_args {
	syscallarg(int) fd;
	syscallarg(const struct timeval *) tptr;
};

struct sys_mincore_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(char *) vec;
};

struct sys_getgroups_args {
	syscallarg(int) gidsetsize;
	syscallarg(gid_t *) gidset;
};

struct sys_setgroups_args {
	syscallarg(int) gidsetsize;
	syscallarg(const gid_t *) gidset;
};

struct sys_setpgid_args {
	syscallarg(pid_t) pid;
	syscallarg(pid_t) pgid;
};

struct sys_utimensat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(const struct timespec *) times;
	syscallarg(int) flag;
};

struct sys_futimens_args {
	syscallarg(int) fd;
	syscallarg(const struct timespec *) times;
};

struct sys_kbind_args {
	syscallarg(const struct __kbind *) param;
	syscallarg(size_t) psize;
	syscallarg(int64_t) proc_cookie;
};

struct sys_clock_gettime_args {
	syscallarg(clockid_t) clock_id;
	syscallarg(struct timespec *) tp;
};

struct sys_clock_settime_args {
	syscallarg(clockid_t) clock_id;
	syscallarg(const struct timespec *) tp;
};

struct sys_clock_getres_args {
	syscallarg(clockid_t) clock_id;
	syscallarg(struct timespec *) tp;
};

struct sys_dup2_args {
	syscallarg(int) from;
	syscallarg(int) to;
};

struct sys_nanosleep_args {
	syscallarg(const struct timespec *) rqtp;
	syscallarg(struct timespec *) rmtp;
};

struct sys_fcntl_args {
	syscallarg(int) fd;
	syscallarg(int) cmd;
	syscallarg(void *) arg;
};

struct sys_accept4_args {
	syscallarg(int) s;
	syscallarg(struct sockaddr *) name;
	syscallarg(socklen_t *) anamelen;
	syscallarg(int) flags;
};

struct sys___thrsleep_args {
	syscallarg(const volatile void *) ident;
	syscallarg(clockid_t) clock_id;
	syscallarg(const struct timespec *) tp;
	syscallarg(void *) lock;
	syscallarg(const int *) abort;
};

struct sys_fsync_args {
	syscallarg(int) fd;
};

struct sys_setpriority_args {
	syscallarg(int) which;
	syscallarg(id_t) who;
	syscallarg(int) prio;
};

struct sys_socket_args {
	syscallarg(int) domain;
	syscallarg(int) type;
	syscallarg(int) protocol;
};

struct sys_connect_args {
	syscallarg(int) s;
	syscallarg(const struct sockaddr *) name;
	syscallarg(socklen_t) namelen;
};

struct sys_getdents_args {
	syscallarg(int) fd;
	syscallarg(void *) buf;
	syscallarg(size_t) buflen;
};

struct sys_getpriority_args {
	syscallarg(int) which;
	syscallarg(id_t) who;
};

struct sys_pipe2_args {
	syscallarg(int *) fdp;
	syscallarg(int) flags;
};

struct sys_dup3_args {
	syscallarg(int) from;
	syscallarg(int) to;
	syscallarg(int) flags;
};

struct sys_sigreturn_args {
	syscallarg(struct sigcontext *) sigcntxp;
};

struct sys_bind_args {
	syscallarg(int) s;
	syscallarg(const struct sockaddr *) name;
	syscallarg(socklen_t) namelen;
};

struct sys_setsockopt_args {
	syscallarg(int) s;
	syscallarg(int) level;
	syscallarg(int) name;
	syscallarg(const void *) val;
	syscallarg(socklen_t) valsize;
};

struct sys_listen_args {
	syscallarg(int) s;
	syscallarg(int) backlog;
};

struct sys_chflagsat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(u_int) flags;
	syscallarg(int) atflags;
};

struct sys_pledge_args {
	syscallarg(const char *) request;
	syscallarg(const char **) paths;
};

struct sys_ppoll_args {
	syscallarg(struct pollfd *) fds;
	syscallarg(u_int) nfds;
	syscallarg(const struct timespec *) ts;
	syscallarg(const sigset_t *) mask;
};

struct sys_pselect_args {
	syscallarg(int) nd;
	syscallarg(fd_set *) in;
	syscallarg(fd_set *) ou;
	syscallarg(fd_set *) ex;
	syscallarg(const struct timespec *) ts;
	syscallarg(const sigset_t *) mask;
};

struct sys_sigsuspend_args {
	syscallarg(int) mask;
};

struct sys_sendsyslog_args {
	syscallarg(const void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(int) flags;
};

struct sys_getsockopt_args {
	syscallarg(int) s;
	syscallarg(int) level;
	syscallarg(int) name;
	syscallarg(void *) val;
	syscallarg(socklen_t *) avalsize;
};

struct sys_thrkill_args {
	syscallarg(pid_t) tid;
	syscallarg(int) signum;
	syscallarg(void *) tcb;
};

struct sys_readv_args {
	syscallarg(int) fd;
	syscallarg(const struct iovec *) iovp;
	syscallarg(int) iovcnt;
};

struct sys_writev_args {
	syscallarg(int) fd;
	syscallarg(const struct iovec *) iovp;
	syscallarg(int) iovcnt;
};

struct sys_kill_args {
	syscallarg(int) pid;
	syscallarg(int) signum;
};

struct sys_fchown_args {
	syscallarg(int) fd;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
};

struct sys_fchmod_args {
	syscallarg(int) fd;
	syscallarg(mode_t) mode;
};

struct sys_setreuid_args {
	syscallarg(uid_t) ruid;
	syscallarg(uid_t) euid;
};

struct sys_setregid_args {
	syscallarg(gid_t) rgid;
	syscallarg(gid_t) egid;
};

struct sys_rename_args {
	syscallarg(const char *) from;
	syscallarg(const char *) to;
};

struct sys_flock_args {
	syscallarg(int) fd;
	syscallarg(int) how;
};

struct sys_mkfifo_args {
	syscallarg(const char *) path;
	syscallarg(mode_t) mode;
};

struct sys_sendto_args {
	syscallarg(int) s;
	syscallarg(const void *) buf;
	syscallarg(size_t) len;
	syscallarg(int) flags;
	syscallarg(const struct sockaddr *) to;
	syscallarg(socklen_t) tolen;
};

struct sys_shutdown_args {
	syscallarg(int) s;
	syscallarg(int) how;
};

struct sys_socketpair_args {
	syscallarg(int) domain;
	syscallarg(int) type;
	syscallarg(int) protocol;
	syscallarg(int *) rsv;
};

struct sys_mkdir_args {
	syscallarg(const char *) path;
	syscallarg(mode_t) mode;
};

struct sys_rmdir_args {
	syscallarg(const char *) path;
};

struct sys_adjtime_args {
	syscallarg(const struct timeval *) delta;
	syscallarg(struct timeval *) olddelta;
};

struct sys_getlogin_r_args {
	syscallarg(char *) namebuf;
	syscallarg(u_int) namelen;
};

struct sys_quotactl_args {
	syscallarg(const char *) path;
	syscallarg(int) cmd;
	syscallarg(int) uid;
	syscallarg(char *) arg;
};

struct sys_nfssvc_args {
	syscallarg(int) flag;
	syscallarg(void *) argp;
};

struct sys_getfh_args {
	syscallarg(const char *) fname;
	syscallarg(fhandle_t *) fhp;
};

struct sys_sysarch_args {
	syscallarg(int) op;
	syscallarg(void *) parms;
};

struct sys_pread_args {
	syscallarg(int) fd;
	syscallarg(void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct sys_pwrite_args {
	syscallarg(int) fd;
	syscallarg(const void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct sys_setgid_args {
	syscallarg(gid_t) gid;
};

struct sys_setegid_args {
	syscallarg(gid_t) egid;
};

struct sys_seteuid_args {
	syscallarg(uid_t) euid;
};

struct sys_pathconf_args {
	syscallarg(const char *) path;
	syscallarg(int) name;
};

struct sys_fpathconf_args {
	syscallarg(int) fd;
	syscallarg(int) name;
};

struct sys_swapctl_args {
	syscallarg(int) cmd;
	syscallarg(const void *) arg;
	syscallarg(int) misc;
};

struct sys_getrlimit_args {
	syscallarg(int) which;
	syscallarg(struct rlimit *) rlp;
};

struct sys_setrlimit_args {
	syscallarg(int) which;
	syscallarg(const struct rlimit *) rlp;
};

struct sys_mmap_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pad;
	syscallarg(off_t) pos;
};

struct sys_lseek_args {
	syscallarg(int) fd;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
	syscallarg(int) whence;
};

struct sys_truncate_args {
	syscallarg(const char *) path;
	syscallarg(int) pad;
	syscallarg(off_t) length;
};

struct sys_ftruncate_args {
	syscallarg(int) fd;
	syscallarg(int) pad;
	syscallarg(off_t) length;
};

struct sys_sysctl_args {
	syscallarg(const int *) name;
	syscallarg(u_int) namelen;
	syscallarg(void *) old;
	syscallarg(size_t *) oldlenp;
	syscallarg(void *) new;
	syscallarg(size_t) newlen;
};

struct sys_mlock_args {
	syscallarg(const void *) addr;
	syscallarg(size_t) len;
};

struct sys_munlock_args {
	syscallarg(const void *) addr;
	syscallarg(size_t) len;
};

struct sys_getpgid_args {
	syscallarg(pid_t) pid;
};

struct sys_utrace_args {
	syscallarg(const char *) label;
	syscallarg(const void *) addr;
	syscallarg(size_t) len;
};

struct sys_semget_args {
	syscallarg(key_t) key;
	syscallarg(int) nsems;
	syscallarg(int) semflg;
};

struct sys_msgget_args {
	syscallarg(key_t) key;
	syscallarg(int) msgflg;
};

struct sys_msgsnd_args {
	syscallarg(int) msqid;
	syscallarg(const void *) msgp;
	syscallarg(size_t) msgsz;
	syscallarg(int) msgflg;
};

struct sys_msgrcv_args {
	syscallarg(int) msqid;
	syscallarg(void *) msgp;
	syscallarg(size_t) msgsz;
	syscallarg(long) msgtyp;
	syscallarg(int) msgflg;
};

struct sys_shmat_args {
	syscallarg(int) shmid;
	syscallarg(const void *) shmaddr;
	syscallarg(int) shmflg;
};

struct sys_shmdt_args {
	syscallarg(const void *) shmaddr;
};

struct sys_minherit_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) inherit;
};

struct sys_poll_args {
	syscallarg(struct pollfd *) fds;
	syscallarg(u_int) nfds;
	syscallarg(int) timeout;
};

struct sys_lchown_args {
	syscallarg(const char *) path;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
};

struct sys_getsid_args {
	syscallarg(pid_t) pid;
};

struct sys_msync_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) flags;
};

struct sys_pipe_args {
	syscallarg(int *) fdp;
};

struct sys_fhopen_args {
	syscallarg(const fhandle_t *) fhp;
	syscallarg(int) flags;
};

struct sys_preadv_args {
	syscallarg(int) fd;
	syscallarg(const struct iovec *) iovp;
	syscallarg(int) iovcnt;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct sys_pwritev_args {
	syscallarg(int) fd;
	syscallarg(const struct iovec *) iovp;
	syscallarg(int) iovcnt;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct sys_mlockall_args {
	syscallarg(int) flags;
};

struct sys_getresuid_args {
	syscallarg(uid_t *) ruid;
	syscallarg(uid_t *) euid;
	syscallarg(uid_t *) suid;
};

struct sys_setresuid_args {
	syscallarg(uid_t) ruid;
	syscallarg(uid_t) euid;
	syscallarg(uid_t) suid;
};

struct sys_getresgid_args {
	syscallarg(gid_t *) rgid;
	syscallarg(gid_t *) egid;
	syscallarg(gid_t *) sgid;
};

struct sys_setresgid_args {
	syscallarg(gid_t) rgid;
	syscallarg(gid_t) egid;
	syscallarg(gid_t) sgid;
};

struct sys_mquery_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pad;
	syscallarg(off_t) pos;
};

struct sys_closefrom_args {
	syscallarg(int) fd;
};

struct sys_sigaltstack_args {
	syscallarg(const struct sigaltstack *) nss;
	syscallarg(struct sigaltstack *) oss;
};

struct sys_shmget_args {
	syscallarg(key_t) key;
	syscallarg(size_t) size;
	syscallarg(int) shmflg;
};

struct sys_semop_args {
	syscallarg(int) semid;
	syscallarg(struct sembuf *) sops;
	syscallarg(size_t) nsops;
};

struct sys_fhstat_args {
	syscallarg(const fhandle_t *) fhp;
	syscallarg(struct stat *) sb;
};

struct sys___semctl_args {
	syscallarg(int) semid;
	syscallarg(int) semnum;
	syscallarg(int) cmd;
	syscallarg(union semun *) arg;
};

struct sys_shmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(struct shmid_ds *) buf;
};

struct sys_msgctl_args {
	syscallarg(int) msqid;
	syscallarg(int) cmd;
	syscallarg(struct msqid_ds *) buf;
};

struct sys___thrwakeup_args {
	syscallarg(const volatile void *) ident;
	syscallarg(int) n;
};

struct sys___threxit_args {
	syscallarg(pid_t *) notdead;
};

struct sys___thrsigdivert_args {
	syscallarg(sigset_t) sigmask;
	syscallarg(siginfo_t *) info;
	syscallarg(const struct timespec *) timeout;
};

struct sys___getcwd_args {
	syscallarg(char *) buf;
	syscallarg(size_t) len;
};

struct sys_adjfreq_args {
	syscallarg(const int64_t *) freq;
	syscallarg(int64_t *) oldfreq;
};

struct sys_setrtable_args {
	syscallarg(int) rtableid;
};

struct sys_faccessat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(int) amode;
	syscallarg(int) flag;
};

struct sys_fchmodat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(mode_t) mode;
	syscallarg(int) flag;
};

struct sys_fchownat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(uid_t) uid;
	syscallarg(gid_t) gid;
	syscallarg(int) flag;
};

struct sys_linkat_args {
	syscallarg(int) fd1;
	syscallarg(const char *) path1;
	syscallarg(int) fd2;
	syscallarg(const char *) path2;
	syscallarg(int) flag;
};

struct sys_mkdirat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(mode_t) mode;
};

struct sys_mkfifoat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(mode_t) mode;
};

struct sys_mknodat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(mode_t) mode;
	syscallarg(dev_t) dev;
};

struct sys_openat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(int) flags;
	syscallarg(mode_t) mode;
};

struct sys_readlinkat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(char *) buf;
	syscallarg(size_t) count;
};

struct sys_renameat_args {
	syscallarg(int) fromfd;
	syscallarg(const char *) from;
	syscallarg(int) tofd;
	syscallarg(const char *) to;
};

struct sys_symlinkat_args {
	syscallarg(const char *) path;
	syscallarg(int) fd;
	syscallarg(const char *) link;
};

struct sys_unlinkat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(int) flag;
};

struct sys___set_tcb_args {
	syscallarg(void *) tcb;
};

/*
 * System call prototypes.
 */

int	sys_exit(struct proc *, void *, register_t *);
int	sys_fork(struct proc *, void *, register_t *);
int	sys_read(struct proc *, void *, register_t *);
int	sys_write(struct proc *, void *, register_t *);
int	sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	sys_getentropy(struct proc *, void *, register_t *);
int	sys___tfork(struct proc *, void *, register_t *);
int	sys_link(struct proc *, void *, register_t *);
int	sys_unlink(struct proc *, void *, register_t *);
int	sys_wait4(struct proc *, void *, register_t *);
int	sys_chdir(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	sys_mknod(struct proc *, void *, register_t *);
int	sys_chmod(struct proc *, void *, register_t *);
int	sys_chown(struct proc *, void *, register_t *);
int	sys_obreak(struct proc *, void *, register_t *);
int	sys_getdtablecount(struct proc *, void *, register_t *);
int	sys_getrusage(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	sys_mount(struct proc *, void *, register_t *);
int	sys_unmount(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	sys_geteuid(struct proc *, void *, register_t *);
#ifdef PTRACE
int	sys_ptrace(struct proc *, void *, register_t *);
#else
#endif
int	sys_recvmsg(struct proc *, void *, register_t *);
int	sys_sendmsg(struct proc *, void *, register_t *);
int	sys_recvfrom(struct proc *, void *, register_t *);
int	sys_accept(struct proc *, void *, register_t *);
int	sys_getpeername(struct proc *, void *, register_t *);
int	sys_getsockname(struct proc *, void *, register_t *);
int	sys_access(struct proc *, void *, register_t *);
int	sys_chflags(struct proc *, void *, register_t *);
int	sys_fchflags(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	sys_stat(struct proc *, void *, register_t *);
int	sys_getppid(struct proc *, void *, register_t *);
int	sys_lstat(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_fstatat(struct proc *, void *, register_t *);
int	sys_getegid(struct proc *, void *, register_t *);
int	sys_profil(struct proc *, void *, register_t *);
#ifdef KTRACE
int	sys_ktrace(struct proc *, void *, register_t *);
#else
#endif
int	sys_sigaction(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	sys_sigprocmask(struct proc *, void *, register_t *);
int	sys_getlogin59(struct proc *, void *, register_t *);
int	sys_setlogin(struct proc *, void *, register_t *);
#ifdef ACCOUNTING
int	sys_acct(struct proc *, void *, register_t *);
#else
#endif
int	sys_sigpending(struct proc *, void *, register_t *);
int	sys_fstat(struct proc *, void *, register_t *);
int	sys_ioctl(struct proc *, void *, register_t *);
int	sys_reboot(struct proc *, void *, register_t *);
int	sys_revoke(struct proc *, void *, register_t *);
int	sys_symlink(struct proc *, void *, register_t *);
int	sys_readlink(struct proc *, void *, register_t *);
int	sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	sys_chroot(struct proc *, void *, register_t *);
int	sys_getfsstat(struct proc *, void *, register_t *);
int	sys_statfs(struct proc *, void *, register_t *);
int	sys_fstatfs(struct proc *, void *, register_t *);
int	sys_fhstatfs(struct proc *, void *, register_t *);
int	sys_vfork(struct proc *, void *, register_t *);
int	sys_gettimeofday(struct proc *, void *, register_t *);
int	sys_settimeofday(struct proc *, void *, register_t *);
int	sys_setitimer(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
int	sys_select(struct proc *, void *, register_t *);
int	sys_kevent(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	sys_madvise(struct proc *, void *, register_t *);
int	sys_utimes(struct proc *, void *, register_t *);
int	sys_futimes(struct proc *, void *, register_t *);
int	sys_mincore(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	sys_getpgrp(struct proc *, void *, register_t *);
int	sys_setpgid(struct proc *, void *, register_t *);
int	sys_utimensat(struct proc *, void *, register_t *);
int	sys_futimens(struct proc *, void *, register_t *);
int	sys_kbind(struct proc *, void *, register_t *);
int	sys_clock_gettime(struct proc *, void *, register_t *);
int	sys_clock_settime(struct proc *, void *, register_t *);
int	sys_clock_getres(struct proc *, void *, register_t *);
int	sys_dup2(struct proc *, void *, register_t *);
int	sys_nanosleep(struct proc *, void *, register_t *);
int	sys_fcntl(struct proc *, void *, register_t *);
int	sys_accept4(struct proc *, void *, register_t *);
int	sys___thrsleep(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	sys_setpriority(struct proc *, void *, register_t *);
int	sys_socket(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	sys_getdents(struct proc *, void *, register_t *);
int	sys_getpriority(struct proc *, void *, register_t *);
int	sys_pipe2(struct proc *, void *, register_t *);
int	sys_dup3(struct proc *, void *, register_t *);
int	sys_sigreturn(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_setsockopt(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	sys_chflagsat(struct proc *, void *, register_t *);
int	sys_pledge(struct proc *, void *, register_t *);
int	sys_ppoll(struct proc *, void *, register_t *);
int	sys_pselect(struct proc *, void *, register_t *);
int	sys_sigsuspend(struct proc *, void *, register_t *);
int	sys_sendsyslog(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_thrkill(struct proc *, void *, register_t *);
int	sys_readv(struct proc *, void *, register_t *);
int	sys_writev(struct proc *, void *, register_t *);
int	sys_kill(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	sys_setreuid(struct proc *, void *, register_t *);
int	sys_setregid(struct proc *, void *, register_t *);
int	sys_rename(struct proc *, void *, register_t *);
int	sys_flock(struct proc *, void *, register_t *);
int	sys_mkfifo(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
int	sys_mkdir(struct proc *, void *, register_t *);
int	sys_rmdir(struct proc *, void *, register_t *);
int	sys_adjtime(struct proc *, void *, register_t *);
int	sys_getlogin_r(struct proc *, void *, register_t *);
int	sys_setsid(struct proc *, void *, register_t *);
int	sys_quotactl(struct proc *, void *, register_t *);
#if defined(NFSCLIENT) || defined(NFSSERVER)
int	sys_nfssvc(struct proc *, void *, register_t *);
#else
#endif
int	sys_getfh(struct proc *, void *, register_t *);
int	sys_sysarch(struct proc *, void *, register_t *);
int	sys_pread(struct proc *, void *, register_t *);
int	sys_pwrite(struct proc *, void *, register_t *);
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_setegid(struct proc *, void *, register_t *);
int	sys_seteuid(struct proc *, void *, register_t *);
int	sys_pathconf(struct proc *, void *, register_t *);
int	sys_fpathconf(struct proc *, void *, register_t *);
int	sys_swapctl(struct proc *, void *, register_t *);
int	sys_getrlimit(struct proc *, void *, register_t *);
int	sys_setrlimit(struct proc *, void *, register_t *);
int	sys_mmap(struct proc *, void *, register_t *);
int	sys_lseek(struct proc *, void *, register_t *);
int	sys_truncate(struct proc *, void *, register_t *);
int	sys_ftruncate(struct proc *, void *, register_t *);
int	sys_sysctl(struct proc *, void *, register_t *);
int	sys_mlock(struct proc *, void *, register_t *);
int	sys_munlock(struct proc *, void *, register_t *);
int	sys_getpgid(struct proc *, void *, register_t *);
int	sys_utrace(struct proc *, void *, register_t *);
#ifdef SYSVSEM
int	sys_semget(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVMSG
int	sys_msgget(struct proc *, void *, register_t *);
int	sys_msgsnd(struct proc *, void *, register_t *);
int	sys_msgrcv(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSHM
int	sys_shmat(struct proc *, void *, register_t *);
int	sys_shmdt(struct proc *, void *, register_t *);
#else
#endif
int	sys_minherit(struct proc *, void *, register_t *);
int	sys_poll(struct proc *, void *, register_t *);
int	sys_issetugid(struct proc *, void *, register_t *);
int	sys_lchown(struct proc *, void *, register_t *);
int	sys_getsid(struct proc *, void *, register_t *);
int	sys_msync(struct proc *, void *, register_t *);
int	sys_pipe(struct proc *, void *, register_t *);
int	sys_fhopen(struct proc *, void *, register_t *);
int	sys_preadv(struct proc *, void *, register_t *);
int	sys_pwritev(struct proc *, void *, register_t *);
int	sys_kqueue(struct proc *, void *, register_t *);
int	sys_mlockall(struct proc *, void *, register_t *);
int	sys_munlockall(struct proc *, void *, register_t *);
int	sys_getresuid(struct proc *, void *, register_t *);
int	sys_setresuid(struct proc *, void *, register_t *);
int	sys_getresgid(struct proc *, void *, register_t *);
int	sys_setresgid(struct proc *, void *, register_t *);
int	sys_mquery(struct proc *, void *, register_t *);
int	sys_closefrom(struct proc *, void *, register_t *);
int	sys_sigaltstack(struct proc *, void *, register_t *);
#ifdef SYSVSHM
int	sys_shmget(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSEM
int	sys_semop(struct proc *, void *, register_t *);
#else
#endif
int	sys_fhstat(struct proc *, void *, register_t *);
#ifdef SYSVSEM
int	sys___semctl(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSHM
int	sys_shmctl(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVMSG
int	sys_msgctl(struct proc *, void *, register_t *);
#else
#endif
int	sys_sched_yield(struct proc *, void *, register_t *);
int	sys_getthrid(struct proc *, void *, register_t *);
int	sys___thrwakeup(struct proc *, void *, register_t *);
int	sys___threxit(struct proc *, void *, register_t *);
int	sys___thrsigdivert(struct proc *, void *, register_t *);
int	sys___getcwd(struct proc *, void *, register_t *);
int	sys_adjfreq(struct proc *, void *, register_t *);
int	sys_setrtable(struct proc *, void *, register_t *);
int	sys_getrtable(struct proc *, void *, register_t *);
int	sys_faccessat(struct proc *, void *, register_t *);
int	sys_fchmodat(struct proc *, void *, register_t *);
int	sys_fchownat(struct proc *, void *, register_t *);
int	sys_linkat(struct proc *, void *, register_t *);
int	sys_mkdirat(struct proc *, void *, register_t *);
int	sys_mkfifoat(struct proc *, void *, register_t *);
int	sys_mknodat(struct proc *, void *, register_t *);
int	sys_openat(struct proc *, void *, register_t *);
int	sys_readlinkat(struct proc *, void *, register_t *);
int	sys_renameat(struct proc *, void *, register_t *);
int	sys_symlinkat(struct proc *, void *, register_t *);
int	sys_unlinkat(struct proc *, void *, register_t *);
int	sys___set_tcb(struct proc *, void *, register_t *);
int	sys___get_tcb(struct proc *, void *, register_t *);
@


1.186
log
@Regen.
@
text
@@


1.185
log
@Regen.
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.173 2016/06/27 16:50:07 jsing Exp 
a188 5
struct sys_o58_kill_args {
	syscallarg(int) pid;
	syscallarg(int) signum;
};

a1138 1
int	sys_o58_kill(struct proc *, void *, register_t *);
@


1.184
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.172 2016/05/31 22:08:53 deraadt Exp 
d189 5
d1144 1
@


1.183
log
@regenerate
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.169 2016/03/30 07:49:11 guenther Exp 
a188 5
struct sys_o58_kill_args {
	syscallarg(int) pid;
	syscallarg(int) signum;
};

a398 5
struct sys_osendsyslog_args {
	syscallarg(const void *) buf;
	syscallarg(size_t) nbyte;
};

a1138 1
int	sys_o58_kill(struct proc *, void *, register_t *);
a1189 1
int	sys_osendsyslog(struct proc *, void *, register_t *);
@


1.182
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.168 2016/03/28 20:49:58 kettenis Exp 
d240 1
a240 1
struct sys_getlogin_args {
d680 5
d1164 1
a1164 1
int	sys_getlogin(struct proc *, void *, register_t *);
d1249 1
@


1.181
log
@Rename the system call sendsyslog2 to sendsyslog.  Keep the old one
as osendsyslog for a while.  The three argument variant is the only
one that will stay.
input kettenis@@;  OK deraadt@@
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.166 2015/11/24 23:47:17 deraadt Exp 
@


1.180
log
@sync
@
text
@d404 1
a404 1
struct sys_sendsyslog_args {
d572 1
a572 1
struct sys_sendsyslog2_args {
d1196 1
a1196 1
int	sys_sendsyslog(struct proc *, void *, register_t *);
d1225 1
a1225 1
int	sys_sendsyslog2(struct proc *, void *, register_t *);
@


1.179
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.165 2015/11/10 04:30:59 guenther Exp 
d572 6
d1225 1
@


1.178
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.164 2015/10/28 12:03:39 deraadt Exp 
d189 1
a189 1
struct sys_kill_args {
d580 6
d598 5
d1138 1
a1138 1
int	sys_kill(struct proc *, void *, register_t *);
d1220 1
d1223 1
@


1.177
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.163 2015/10/18 00:04:43 deraadt Exp 
a674 12
struct sys_dnsconnect_args {
	syscallarg(int) s;
	syscallarg(const struct sockaddr *) name;
	syscallarg(socklen_t) namelen;
};

struct sys_dnssocket_args {
	syscallarg(int) domain;
	syscallarg(int) type;
	syscallarg(int) protocol;
};

a1229 2
int	sys_dnsconnect(struct proc *, void *, register_t *);
int	sys_dnssocket(struct proc *, void *, register_t *);
@


1.176
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.162 2015/10/09 01:10:27 deraadt Exp 
d675 12
d1242 2
@


1.175
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.161 2015/10/02 17:49:40 kettenis Exp 
d547 1
a547 1
struct sys_tame_args {
d1204 1
a1204 1
int	sys_tame(struct proc *, void *, register_t *);
@


1.174
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.160 2015/09/26 15:38:53 tedu Exp 
@


1.173
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.159 2015/09/13 17:08:03 guenther Exp 
@


1.172
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.158 2015/09/09 17:56:59 deraadt Exp 
d768 1
a768 1
struct sys___sysctl_args {
d1246 1
a1246 1
int	sys___sysctl(struct proc *, void *, register_t *);
@


1.171
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.157 2015/08/26 05:20:06 doug Exp 
d548 1
a548 1
	syscallarg(int) flags;
@


1.170
log
@Convert paths argument of tame(2) to const char **.

The path will not be modified and this reduces casts.  Discussed with many.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscallargs.h,v 1.169 2015/08/22 20:18:50 deraadt Exp $	*/
d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.155 2015/07/20 00:56:10 guenther Exp 
@


1.169
log
@Move to tame(int flags, char *paths[]) API/ABI.

The pathlist is a whitelist of dirs and files; anything else returns ENOENT.
Recommendation is to use a narrowly defined list.  Also add TAME_FATTR, which
permits explicit change operations against "struct stat" fields.  Some
other TAME_ flags are refined slightly.

Not cranking libc now, since nothing commited in base uses this and the
timing is uncomfortable for others.  Discussed with many; thanks for a
few bug fixes from semarie, doug, guenther.
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d549 1
a549 1
	syscallarg(char **) paths;
@


1.168
log
@rebuild
@
text
@d549 1
@


1.167
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.154 2015/07/19 02:35:35 deraadt Exp 
d421 6
d1181 1
@


1.166
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.153 2015/05/06 11:20:07 jsg Exp 
d541 4
d1196 1
@


1.165
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.152 2015/02/09 13:54:23 deraadt Exp 
@


1.164
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.150 2015/02/09 13:34:19 deraadt Exp 
@


1.163
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.149 2014/12/08 20:56:11 guenther Exp 
@


1.162
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.148 2014/10/09 03:35:06 tedu Exp 
d534 7
d1191 1
@


1.161
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.146 2014/09/17 19:26:06 millert Exp 
a1229 13
#ifdef LKM
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
#else	/* !LKM */
#endif	/* !LKM */
@


1.160
log
@regen
@
text
@d176 1
a176 1
	syscallarg(int) flags;
@


1.159
log
@sync generated files
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.145 2014/09/01 05:09:53 doug Exp 
d401 1
a401 1
	syscallarg(int) pgid;
@


1.158
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.144 2014/08/31 01:42:36 guenther Exp 
@


1.157
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.143 2014/07/10 08:55:35 deraadt Exp 
d452 7
d500 11
d1170 1
d1178 2
@


1.156
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.142 2014/07/07 19:59:00 matthew Exp 
d404 5
d1143 1
@


1.155
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.141 2014/07/06 20:55:58 kettenis Exp 
@


1.154
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.140 2014/06/14 18:01:42 deraadt Exp 
@


1.153
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.139 2014/06/13 08:26:10 deraadt Exp 
@


1.152
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.138 2014/02/09 10:04:42 guenther Exp 
d52 5
d1053 1
@


1.151
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.137 2013/09/14 01:35:01 guenther Exp 
@


1.150
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.136 2013/08/16 08:33:20 guenther Exp 
a51 7
struct t32_sys_wait4_args {
	syscallarg(pid_t) pid;
	syscallarg(int *) status;
	syscallarg(int) options;
	syscallarg(struct rusage32 *) rusage;
};

a398 6
struct t32_sys_setitimer_args {
	syscallarg(int) which;
	syscallarg(const struct itimerval32 *) itv;
	syscallarg(struct itimerval32 *) oitv;
};

a410 5
struct t32_sys_getitimer_args {
	syscallarg(int) which;
	syscallarg(struct itimerval32 *) itv;
};

a441 8
struct t32_sys_select_args {
	syscallarg(int) nd;
	syscallarg(fd_set *) in;
	syscallarg(fd_set *) ou;
	syscallarg(fd_set *) ex;
	syscallarg(struct timeval32 *) tv;
};

a525 10
struct t32_sys_gettimeofday_args {
	syscallarg(struct timeval32 *) tp;
	syscallarg(struct timezone *) tzp;
};

struct t32_sys_getrusage_args {
	syscallarg(int) who;
	syscallarg(struct rusage32 *) rusage;
};

a545 5
struct t32_sys_settimeofday_args {
	syscallarg(const struct timeval32 *) tv;
	syscallarg(const struct timezone *) tzp;
};

a611 5
struct t32_sys_utimes_args {
	syscallarg(const char *) path;
	syscallarg(const struct timeval32 *) tptr;
};

a740 5
struct t32_sys_futimes_args {
	syscallarg(int) fd;
	syscallarg(const struct timeval32 *) tptr;
};

a786 20
struct t32_sys_clock_gettime_args {
	syscallarg(clockid_t) clock_id;
	syscallarg(struct timespec32 *) tp;
};

struct t32_sys_clock_settime_args {
	syscallarg(clockid_t) clock_id;
	syscallarg(const struct timespec32 *) tp;
};

struct t32_sys_clock_getres_args {
	syscallarg(clockid_t) clock_id;
	syscallarg(struct timespec32 *) tp;
};

struct t32_sys_nanosleep_args {
	syscallarg(const struct timespec32 *) rqtp;
	syscallarg(struct timespec32 *) rmtp;
};

a839 9
struct t32_sys_kevent_args {
	syscallarg(int) fd;
	syscallarg(const struct kevent32 *) changelist;
	syscallarg(int) nchanges;
	syscallarg(struct kevent32 *) eventlist;
	syscallarg(int) nevents;
	syscallarg(const struct timespec32 *) timeout;
};

a898 15
struct t32_sys_stat_args {
	syscallarg(const char *) path;
	syscallarg(struct stat32 *) ub;
};

struct t32_sys_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct stat32 *) sb;
};

struct t32_sys_lstat_args {
	syscallarg(const char *) path;
	syscallarg(struct stat32 *) ub;
};

a922 8
struct t32_sys___thrsleep_args {
	syscallarg(const volatile void *) ident;
	syscallarg(clockid_t) clock_id;
	syscallarg(const struct timespec32 *) tp;
	syscallarg(void *) lock;
	syscallarg(const int *) abort;
};

a951 7
struct t32_sys_getdirentries_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(int) count;
	syscallarg(off_t *) basep;
};

a973 7
struct t32_sys_fstatat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(struct stat32 *) buf;
	syscallarg(int) flag;
};

a1033 12
struct t32_sys_utimensat_args {
	syscallarg(int) fd;
	syscallarg(const char *) path;
	syscallarg(const struct timespec32 *) times;
	syscallarg(int) flag;
};

struct t32_sys_futimens_args {
	syscallarg(int) fd;
	syscallarg(const struct timespec32 *) times;
};

a1047 1
int	t32_sys_wait4(struct proc *, void *, register_t *);
a1131 1
int	t32_sys_setitimer(struct proc *, void *, register_t *);
a1133 1
int	t32_sys_getitimer(struct proc *, void *, register_t *);
a1139 1
int	t32_sys_select(struct proc *, void *, register_t *);
a1153 2
int	t32_sys_gettimeofday(struct proc *, void *, register_t *);
int	t32_sys_getrusage(struct proc *, void *, register_t *);
a1156 1
int	t32_sys_settimeofday(struct proc *, void *, register_t *);
a1168 1
int	t32_sys_utimes(struct proc *, void *, register_t *);
a1194 1
int	t32_sys_futimes(struct proc *, void *, register_t *);
a1224 4
int	t32_sys_clock_gettime(struct proc *, void *, register_t *);
int	t32_sys_clock_settime(struct proc *, void *, register_t *);
int	t32_sys_clock_getres(struct proc *, void *, register_t *);
int	t32_sys_nanosleep(struct proc *, void *, register_t *);
a1235 1
int	t32_sys_kevent(struct proc *, void *, register_t *);
a1252 3
int	t32_sys_stat(struct proc *, void *, register_t *);
int	t32_sys_fstat(struct proc *, void *, register_t *);
int	t32_sys_lstat(struct proc *, void *, register_t *);
a1267 1
int	t32_sys___thrsleep(struct proc *, void *, register_t *);
a1274 1
int	t32_sys_getdirentries(struct proc *, void *, register_t *);
a1277 1
int	t32_sys_fstatat(struct proc *, void *, register_t *);
a1286 2
int	t32_sys_utimensat(struct proc *, void *, register_t *);
int	t32_sys_futimens(struct proc *, void *, register_t *);
@


1.149
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.135 2013/08/14 05:26:14 guenther Exp 
d500 1
a500 1
	syscallarg(struct dirent *) buf;
@


1.148
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.134 2013/08/13 05:52:24 guenther Exp 
a1050 21
struct compat_o53_sys_getfsstat_args {
	syscallarg(struct statfs53 *) buf;
	syscallarg(size_t) bufsize;
	syscallarg(int) flags;
};

struct compat_o53_sys_statfs_args {
	syscallarg(const char *) path;
	syscallarg(struct statfs53 *) buf;
};

struct compat_o53_sys_fstatfs_args {
	syscallarg(int) fd;
	syscallarg(struct statfs53 *) buf;
};

struct compat_o53_sys_fhstatfs_args {
	syscallarg(const fhandle_t *) fhp;
	syscallarg(struct statfs53 *) buf;
};

a1162 4
struct compat_o51_sys___tfork_args {
	syscallarg(struct __tfork51 *) param;
};

a1419 4
int	compat_o53_sys_getfsstat(struct proc *, void *, register_t *);
int	compat_o53_sys_statfs(struct proc *, void *, register_t *);
int	compat_o53_sys_fstatfs(struct proc *, void *, register_t *);
int	compat_o53_sys_fhstatfs(struct proc *, void *, register_t *);
a1437 1
int	compat_o51_sys___tfork(struct proc *, void *, register_t *);
@


1.147
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.133 2013/06/09 13:10:19 miod Exp 
d52 1
a52 1
struct sys_wait4_args {
d56 1
a56 1
	syscallarg(struct rusage *) rusage;
d73 7
d109 5
d196 10
d210 7
d255 5
d320 38
d375 10
d406 1
a406 1
struct sys_setitimer_args {
d408 14
a421 2
	syscallarg(const struct itimerval *) itv;
	syscallarg(struct itimerval *) oitv;
d424 1
a424 1
struct sys_getitimer_args {
d426 16
a441 1
	syscallarg(struct itimerval *) itv;
d449 5
d460 1
a460 1
struct sys_select_args {
d465 9
a473 1
	syscallarg(struct timeval *) tv;
d498 6
d552 2
a553 2
struct sys_gettimeofday_args {
	syscallarg(struct timeval *) tp;
d557 1
a557 1
struct sys_getrusage_args {
d559 1
a559 1
	syscallarg(struct rusage *) rusage;
d582 2
a583 2
struct sys_settimeofday_args {
	syscallarg(const struct timeval *) tv;
d653 1
a653 1
struct sys_utimes_args {
d655 1
a655 1
	syscallarg(const struct timeval *) tptr;
d787 1
a787 1
struct sys_futimes_args {
d789 1
a789 1
	syscallarg(const struct timeval *) tptr;
d838 1
a838 1
struct sys_clock_gettime_args {
d840 1
a840 1
	syscallarg(struct timespec *) tp;
d843 1
a843 1
struct sys_clock_settime_args {
d845 1
a845 1
	syscallarg(const struct timespec *) tp;
d848 1
a848 1
struct sys_clock_getres_args {
d850 1
a850 1
	syscallarg(struct timespec *) tp;
d853 3
a855 3
struct sys_nanosleep_args {
	syscallarg(const struct timespec *) rqtp;
	syscallarg(struct timespec *) rmtp;
d911 1
a911 1
struct sys_kevent_args {
d913 1
a913 1
	syscallarg(const struct kevent *) changelist;
d915 1
a915 1
	syscallarg(struct kevent *) eventlist;
d917 1
a917 1
	syscallarg(const struct timespec *) timeout;
d979 1
a979 1
struct sys_stat_args {
d981 1
a981 1
	syscallarg(struct stat *) ub;
d984 1
a984 1
struct sys_fstat_args {
d986 1
a986 1
	syscallarg(struct stat *) sb;
d989 1
a989 1
struct sys_lstat_args {
d991 1
a991 1
	syscallarg(struct stat *) ub;
d1018 1
a1018 1
struct sys___thrsleep_args {
d1021 1
a1021 1
	syscallarg(const struct timespec *) tp;
d1076 1
a1076 1
struct sys_getdirentries_args {
d1105 1
a1105 1
struct sys_fstatat_args {
d1108 1
a1108 1
	syscallarg(struct stat *) buf;
d1172 1
a1172 1
struct sys_utimensat_args {
d1175 1
a1175 1
	syscallarg(const struct timespec *) times;
d1179 1
a1179 1
struct sys_futimens_args {
d1181 1
a1181 1
	syscallarg(const struct timespec *) times;
d1202 1
a1202 1
int	sys_wait4(struct proc *, void *, register_t *);
d1206 1
d1214 1
d1236 1
d1238 1
d1240 1
d1257 1
d1271 6
d1280 2
d1287 7
a1293 2
int	sys_setitimer(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
d1295 1
d1297 2
a1298 1
int	sys_select(struct proc *, void *, register_t *);
d1303 1
d1312 2
a1313 2
int	sys_gettimeofday(struct proc *, void *, register_t *);
int	sys_getrusage(struct proc *, void *, register_t *);
d1317 1
a1317 1
int	sys_settimeofday(struct proc *, void *, register_t *);
d1330 1
a1330 1
int	sys_utimes(struct proc *, void *, register_t *);
d1357 1
a1357 1
int	sys_futimes(struct proc *, void *, register_t *);
d1388 4
a1391 4
int	sys_clock_gettime(struct proc *, void *, register_t *);
int	sys_clock_settime(struct proc *, void *, register_t *);
int	sys_clock_getres(struct proc *, void *, register_t *);
int	sys_nanosleep(struct proc *, void *, register_t *);
d1403 1
a1403 1
int	sys_kevent(struct proc *, void *, register_t *);
d1421 3
a1423 3
int	sys_stat(struct proc *, void *, register_t *);
int	sys_fstat(struct proc *, void *, register_t *);
int	sys_lstat(struct proc *, void *, register_t *);
d1439 1
a1439 1
int	sys___thrsleep(struct proc *, void *, register_t *);
d1451 1
a1451 1
int	sys_getdirentries(struct proc *, void *, register_t *);
d1455 1
a1455 1
int	sys_fstatat(struct proc *, void *, register_t *);
d1465 2
a1466 2
int	sys_utimensat(struct proc *, void *, register_t *);
int	sys_futimens(struct proc *, void *, register_t *);
@


1.146
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.132 2013/06/01 16:27:37 tedu Exp 
d641 1
a641 1
	syscallarg(int *) name;
@


1.145
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.131 2013/06/01 09:49:50 miod Exp 
a1208 1
#ifdef KTRACE
a1209 2
#else
#endif
@


1.144
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.130 2013/04/29 17:06:20 matthew Exp 
d668 6
d1209 4
@


1.143
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.129 2013/04/15 15:32:19 jsing Exp 
d404 16
d1153 2
@


1.142
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.128 2013/03/14 21:38:22 tedu Exp 
d265 21
d901 2
a902 2
struct sys_getfsstat_args {
	syscallarg(struct statfs *) buf;
d907 1
a907 1
struct sys_statfs_args {
d909 1
a909 1
	syscallarg(struct statfs *) buf;
d912 1
a912 1
struct sys_fstatfs_args {
d914 1
a914 1
	syscallarg(struct statfs *) buf;
d917 1
a917 1
struct sys_fhstatfs_args {
d919 1
a919 1
	syscallarg(struct statfs *) buf;
d1110 4
d1270 4
a1273 4
int	sys_getfsstat(struct proc *, void *, register_t *);
int	sys_statfs(struct proc *, void *, register_t *);
int	sys_fstatfs(struct proc *, void *, register_t *);
int	sys_fhstatfs(struct proc *, void *, register_t *);
@


1.141
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.127 2013/03/02 07:05:18 guenther Exp 
d1013 4
d1267 1
@


1.140
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.126 2012/09/10 02:22:17 deraadt Exp 
a1012 4
struct compat_o51_sys___tfork_args {
	syscallarg(struct __tfork51 *) param;
};

a1262 1
int	compat_o51_sys___tfork(struct proc *, void *, register_t *);
@


1.139
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.125 2012/08/23 06:12:49 deraadt Exp 
a573 7
struct compat_o48_sys_getdirentries_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(int) count;
	syscallarg(long *) basep;
};

a1150 1
int	compat_o48_sys_getdirentries(struct proc *, void *, register_t *);
@


1.138
log
@Regenerate
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.124 2012/06/21 00:56:59 guenther Exp 
a637 8
struct sys_nnpfspioctl_args {
	syscallarg(int) operation;
	syscallarg(char *) a_pathP;
	syscallarg(int) a_opcode;
	syscallarg(struct ViceIoctl *) a_paramsP;
	syscallarg(int) a_followSymlinks;
};

a1167 1
int	sys_nnpfspioctl(struct proc *, void *, register_t *);
@


1.137
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.123 2012/04/12 12:33:03 deraadt Exp 
d59 5
d1028 2
a1029 2
struct sys___tfork_args {
	syscallarg(struct __tfork *) param;
d1047 1
d1284 1
a1284 1
int	sys___tfork(struct proc *, void *, register_t *);
@


1.136
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.122 2012/04/12 11:16:24 deraadt Exp 
a702 4
struct sys_rfork_args {
	syscallarg(int) flags;
};

a1203 1
int	sys_rfork(struct proc *, void *, register_t *);
@


1.135
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.121 2012/04/12 11:07:19 deraadt Exp 
a542 22
struct lfs_bmapv_args {
	syscallarg(fsid_t *) fsidp;
	syscallarg(struct block_info *) blkiov;
	syscallarg(int) blkcnt;
};

struct lfs_markv_args {
	syscallarg(fsid_t *) fsidp;
	syscallarg(struct block_info *) blkiov;
	syscallarg(int) blkcnt;
};

struct lfs_segclean_args {
	syscallarg(fsid_t *) fsidp;
	syscallarg(u_long) segment;
};

struct lfs_segwait_args {
	syscallarg(fsid_t *) fsidp;
	syscallarg(struct timeval *) tv;
};

a1158 7
#ifdef LFS
int	lfs_bmapv(struct proc *, void *, register_t *);
int	lfs_markv(struct proc *, void *, register_t *);
int	lfs_segclean(struct proc *, void *, register_t *);
int	lfs_segwait(struct proc *, void *, register_t *);
#else
#endif
@


1.134
log
@Reimplement mutexes, condvars, and rwlocks to eliminate bugs,
particularly the "consume the signal you just sent" hang, and putting
the wait queues in userspace.

Do cancellation handling in pthread_cond_*wait(), pthread_join(),
and sem_wait().

Add __ prefix to thr{sleep,wakeup,exit,sigdivert}() syscalls; add
'abort" argument to thrsleep to close cancellation race; make
thr{sleep,wakeup} return errno values via *retval to avoid touching
userspace errno.
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.119 2011/10/15 23:35:29 guenther Exp 
d1076 1
@


1.133
log
@sync
@
text
@d883 2
a884 2
struct sys_thrsleep_args {
	syscallarg(void *) ident;
d888 1
d891 2
a892 2
struct sys_thrwakeup_args {
	syscallarg(void *) ident;
d896 1
a896 1
struct sys_threxit_args {
d900 1
a900 1
struct sys_thrsigdivert_args {
d1283 4
a1286 4
int	sys_thrsleep(struct proc *, void *, register_t *);
int	sys_thrwakeup(struct proc *, void *, register_t *);
int	sys_threxit(struct proc *, void *, register_t *);
int	sys_thrsigdivert(struct proc *, void *, register_t *);
@


1.132
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.118 2011/07/18 00:16:54 matthew Exp 
d1048 8
d1310 3
@


1.131
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.117 2011/07/09 05:46:26 matthew Exp 
d1043 5
d1301 1
@


1.130
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.116 2011/07/09 05:31:26 matthew Exp 
d591 1
a591 1
struct compat_48_sys_getdirentries_args {
d1178 1
a1178 1
int	compat_48_sys_getdirentries(struct proc *, void *, register_t *);
@


1.129
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.115 2011/07/09 00:18:06 deraadt Exp 
a220 5
struct sys_osigaltstack_args {
	syscallarg(const struct osigaltstack *) nss;
	syscallarg(struct osigaltstack *) oss;
};

a259 8
struct sys_sbrk_args {
	syscallarg(int) incr;
};

struct sys_sstk_args {
	syscallarg(int) incr;
};

d591 1
a591 1
struct sys_ogetdirentries_args {
a1100 1
int	sys_osigaltstack(struct proc *, void *, register_t *);
a1109 2
int	sys_sbrk(struct proc *, void *, register_t *);
int	sys_sstk(struct proc *, void *, register_t *);
d1178 1
a1178 1
int	sys_ogetdirentries(struct proc *, void *, register_t *);
@


1.128
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.114 2011/07/09 00:10:51 deraadt Exp 
@


1.127
log
@regen syscalls
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.113 2011/07/08 19:19:20 tedu Exp 
a96 6
struct compat_25_sys_getfsstat_args {
	syscallarg(struct statfs *) buf;
	syscallarg(long) bufsize;
	syscallarg(int) flags;
};

a264 5
struct compat_25_sys_omsync_args {
	syscallarg(caddr_t) addr;
	syscallarg(size_t) len;
};

a316 4
struct compat_25_sys_swapon_args {
	syscallarg(const char *) name;
};

a517 10
struct compat_25_sys_statfs_args {
	syscallarg(const char *) path;
	syscallarg(struct ostatfs *) buf;
};

struct compat_25_sys_fstatfs_args {
	syscallarg(int) fd;
	syscallarg(struct ostatfs *) buf;
};

a1074 1
int	compat_25_sys_getfsstat(struct proc *, void *, register_t *);
a1122 1
int	compat_25_sys_omsync(struct proc *, void *, register_t *);
a1134 1
int	compat_25_sys_swapon(struct proc *, void *, register_t *);
a1174 2
int	compat_25_sys_statfs(struct proc *, void *, register_t *);
int	compat_25_sys_fstatfs(struct proc *, void *, register_t *);
@


1.126
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.112 2011/07/08 05:01:27 matthew Exp 
a547 10
struct compat_09_sys_getdomainname_args {
	syscallarg(char *) domainname;
	syscallarg(int) len;
};

struct compat_09_sys_setdomainname_args {
	syscallarg(char *) domainname;
	syscallarg(int) len;
};

a552 24
struct compat_10_sys_semsys_args {
	syscallarg(int) which;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
	syscallarg(int) a5;
};

struct compat_10_sys_msgsys_args {
	syscallarg(int) which;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
	syscallarg(int) a5;
	syscallarg(int) a6;
};

struct compat_10_sys_shmsys_args {
	syscallarg(int) which;
	syscallarg(int) a2;
	syscallarg(int) a3;
	syscallarg(int) a4;
};

a1205 2
int	compat_09_sys_getdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_setdomainname(struct proc *, void *, register_t *);
a1206 12
#if defined(SYSVSEM) && !defined(__LP64__)
int	compat_10_sys_semsys(struct proc *, void *, register_t *);
#else
#endif
#if defined(SYSVMSG) && !defined(__LP64__)
int	compat_10_sys_msgsys(struct proc *, void *, register_t *);
#else
#endif
#if defined(SYSVSHM) && !defined(__LP64__)
int	compat_10_sys_shmsys(struct proc *, void *, register_t *);
#else
#endif
@


1.125
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.111 2011/07/07 23:45:00 matthew Exp 
a1157 1
int	sys_opipe(struct proc *, void *, register_t *);
@


1.124
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.110 2011/07/07 18:30:50 tedu Exp 
d1019 96
d1377 14
@


1.123
log
@regen syscalls
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.109 2011/07/07 01:19:40 tedu Exp 
@


1.122
log
@move the specfs code to a place people can see it; ok guenther thib krw
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.108 2011/06/30 13:43:14 tedu Exp 
a58 5
struct compat_43_sys_creat_args {
	syscallarg(const char *) path;
	syscallarg(mode_t) mode;
};

a102 6
struct compat_43_sys_lseek_args {
	syscallarg(int) fd;
	syscallarg(long) offset;
	syscallarg(int) whence;
};

a184 10
struct compat_43_sys_stat_args {
	syscallarg(const char *) path;
	syscallarg(struct stat43 *) ub;
};

struct compat_43_sys_lstat_args {
	syscallarg(char *) path;
	syscallarg(struct stat43 *) ub;
};

a270 12
struct compat_43_sys_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct stat43 *) sb;
};

struct compat_43_sys_getkerninfo_args {
	syscallarg(int) op;
	syscallarg(char *) where;
	syscallarg(int *) size;
	syscallarg(int) arg;
};

a283 9
struct compat_43_sys_mmap_args {
	syscallarg(caddr_t) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pos;
};

a336 10
struct compat_43_sys_gethostname_args {
	syscallarg(char *) hostname;
	syscallarg(u_int) len;
};

struct compat_43_sys_sethostname_args {
	syscallarg(char *) hostname;
	syscallarg(u_int) len;
};

a377 6
struct compat_43_sys_accept_args {
	syscallarg(int) s;
	syscallarg(caddr_t) name;
	syscallarg(int *) anamelen;
};

a382 14
struct compat_43_sys_send_args {
	syscallarg(int) s;
	syscallarg(caddr_t) buf;
	syscallarg(int) len;
	syscallarg(int) flags;
};

struct compat_43_sys_recv_args {
	syscallarg(int) s;
	syscallarg(caddr_t) buf;
	syscallarg(int) len;
	syscallarg(int) flags;
};

a405 14
struct compat_43_sys_sigvec_args {
	syscallarg(int) signum;
	syscallarg(struct sigvec *) nsv;
	syscallarg(struct sigvec *) osv;
};

struct compat_43_sys_sigblock_args {
	syscallarg(int) mask;
};

struct compat_43_sys_sigsetmask_args {
	syscallarg(int) mask;
};

a409 17
struct compat_43_sys_sigstack_args {
	syscallarg(struct sigstack *) nss;
	syscallarg(struct sigstack *) oss;
};

struct compat_43_sys_recvmsg_args {
	syscallarg(int) s;
	syscallarg(struct omsghdr *) msg;
	syscallarg(int) flags;
};

struct compat_43_sys_sendmsg_args {
	syscallarg(int) s;
	syscallarg(caddr_t) msg;
	syscallarg(int) flags;
};

a455 9
struct compat_43_sys_recvfrom_args {
	syscallarg(int) s;
	syscallarg(caddr_t) buf;
	syscallarg(size_t) len;
	syscallarg(int) flags;
	syscallarg(caddr_t) from;
	syscallarg(int *) fromlenaddr;
};

a470 10
struct compat_43_sys_truncate_args {
	syscallarg(const char *) path;
	syscallarg(long) length;
};

struct compat_43_sys_ftruncate_args {
	syscallarg(int) fd;
	syscallarg(long) length;
};

a520 25
struct compat_43_sys_getpeername_args {
	syscallarg(int) fdes;
	syscallarg(caddr_t) asa;
	syscallarg(socklen_t *) alen;
};

struct compat_43_sys_sethostid_args {
	syscallarg(int32_t) hostid;
};

struct compat_43_sys_getrlimit_args {
	syscallarg(int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct compat_43_sys_setrlimit_args {
	syscallarg(int) which;
	syscallarg(struct ogetrlimit *) rlp;
};

struct compat_43_sys_killpg_args {
	syscallarg(int) pgid;
	syscallarg(int) signum;
};

a527 6
struct compat_43_sys_getsockname_args {
	syscallarg(int) fdec;
	syscallarg(caddr_t) asa;
	syscallarg(int *) alen;
};

a532 7
struct compat_43_sys_getdirentries_args {
	syscallarg(int) fd;
	syscallarg(char *) buf;
	syscallarg(int) count;
	syscallarg(long *) basep;
};

a1029 1
int	compat_43_sys_creat(struct proc *, void *, register_t *);
a1038 1
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
a1059 1
int	compat_43_sys_stat(struct proc *, void *, register_t *);
a1060 1
int	compat_43_sys_lstat(struct proc *, void *, register_t *);
a1087 3
int	compat_43_sys_fstat(struct proc *, void *, register_t *);
int	compat_43_sys_getkerninfo(struct proc *, void *, register_t *);
int	compat_43_sys_getpagesize(struct proc *, void *, register_t *);
a1091 1
int	compat_43_sys_mmap(struct proc *, void *, register_t *);
a1100 1
int	compat_43_sys_wait(struct proc *, void *, register_t *);
a1102 3
int	compat_43_sys_gethostname(struct proc *, void *, register_t *);
int	compat_43_sys_sethostname(struct proc *, void *, register_t *);
int	compat_43_sys_getdtablesize(struct proc *, void *, register_t *);
a1109 1
int	compat_43_sys_accept(struct proc *, void *, register_t *);
a1110 2
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
a1114 3
int	compat_43_sys_sigvec(struct proc *, void *, register_t *);
int	compat_43_sys_sigblock(struct proc *, void *, register_t *);
int	compat_43_sys_sigsetmask(struct proc *, void *, register_t *);
a1115 3
int	compat_43_sys_sigstack(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
a1123 1
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
a1126 2
int	compat_43_sys_truncate(struct proc *, void *, register_t *);
int	compat_43_sys_ftruncate(struct proc *, void *, register_t *);
a1135 6
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_gethostid(struct proc *, void *, register_t *);
int	compat_43_sys_sethostid(struct proc *, void *, register_t *);
int	compat_43_sys_getrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_setrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_killpg(struct proc *, void *, register_t *);
a1137 2
int	compat_43_sys_quota(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
a1141 1
int	compat_43_sys_getdirentries(struct proc *, void *, register_t *);
@


1.121
log
@sync
@
text
@@


1.120
log
@regenerate
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.107 2011/06/01 06:20:41 guenther Exp 
a796 15
struct compat_35_sys_stat_args {
	syscallarg(const char *) path;
	syscallarg(struct stat35 *) ub;
};

struct compat_35_sys_fstat_args {
	syscallarg(int) fd;
	syscallarg(struct stat35 *) sb;
};

struct compat_35_sys_lstat_args {
	syscallarg(const char *) path;
	syscallarg(struct stat35 *) ub;
};

a900 6
struct compat_35_sys_semop_args {
	syscallarg(int) semid;
	syscallarg(struct sembuf *) sops;
	syscallarg(u_int) nsops;
};

a930 6
struct compat_35_sys_shmget_args {
	syscallarg(key_t) key;
	syscallarg(int) size;
	syscallarg(int) shmflg;
};

a982 19
struct compat_35_sys___semctl_args {
	syscallarg(int) semid;
	syscallarg(int) semnum;
	syscallarg(int) cmd;
	syscallarg(union semun *) arg;
};

struct compat_35_sys_shmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(struct shmid_ds35 *) buf;
};

struct compat_35_sys_msgctl_args {
	syscallarg(int) msqid;
	syscallarg(int) cmd;
	syscallarg(struct msqid_ds35 *) buf;
};

a1364 3
int	compat_35_sys_stat(struct proc *, void *, register_t *);
int	compat_35_sys_fstat(struct proc *, void *, register_t *);
int	compat_35_sys_lstat(struct proc *, void *, register_t *);
a1395 1
int	compat_35_sys_semop(struct proc *, void *, register_t *);
a1406 1
int	compat_35_sys_shmget(struct proc *, void *, register_t *);
a1419 12
#ifdef SYSVSEM
int	compat_35_sys___semctl(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSHM
int	compat_35_sys_shmctl(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVMSG
int	compat_35_sys_msgctl(struct proc *, void *, register_t *);
#else
#endif
@


1.119
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.105 2011/04/04 12:44:10 deraadt Exp 
@


1.118
log
@Regen for new getdirentries.
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.104 2010/10/28 15:02:41 millert Exp 
a1066 6
struct compat_o47_sys_getpeereid_args {
	syscallarg(int) fdes;
	syscallarg(uid_t *) euid;
	syscallarg(gid_t *) egid;
};

a1490 1
int	compat_o47_sys_getpeereid(struct proc *, void *, register_t *);
@


1.117
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.103 2010/09/20 07:18:03 deraadt Exp 
d838 1
a838 1
struct sys_getdirentries_args {
d1224 7
d1425 1
a1425 1
int	sys_getdirentries(struct proc *, void *, register_t *);
d1543 1
@


1.116
log
@Fix the naming of interfaces and variables for rdomains and rtables
and make it possible to bind sockets (including listening sockets!)
to rtables and not just rdomains.  This changes the name of the
system calls, socket option, and ioctl.  After building with this
you should remove the files /usr/share/man/cat2/[gs]etrdomain.0.

Since this removes the existing [gs]etrdomain() system calls, the
libc major is bumped.

Written by claudio@@, criticized^Wcritiqued by me
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.101 2010/07/01 23:10:40 tedu Exp 
d1067 1
a1067 1
struct sys_getpeereid_args {
d1490 1
a1490 1
int	sys_getpeereid(struct proc *, void *, register_t *);
@


1.115
log
@regen
@
text
@d1220 2
a1221 2
struct sys_setrdomain_args {
	syscallarg(int) rdomain;
d1534 2
a1535 2
int	sys_setrdomain(struct proc *, void *, register_t *);
int	sys_getrdomain(struct proc *, void *, register_t *);
@


1.114
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.100 2010/07/01 01:54:38 deraadt Exp 
a1037 5
struct compat_35_sys_fhstat_args {
	syscallarg(const fhandle_t *) fhp;
	syscallarg(struct stat35 *) sb;
};

a1483 1
int	compat_35_sys_fhstat(struct proc *, void *, register_t *);
@


1.113
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.99 2010/06/29 00:28:14 tedu Exp 
a909 7
struct compat_23_sys___semctl_args {
	syscallarg(int) semid;
	syscallarg(int) semnum;
	syscallarg(int) cmd;
	syscallarg(union semun *) arg;
};

a921 6
struct compat_23_sys_msgctl_args {
	syscallarg(int) msqid;
	syscallarg(int) cmd;
	syscallarg(struct omsqid_ds *) buf;
};

a947 6
struct compat_23_sys_shmctl_args {
	syscallarg(int) shmid;
	syscallarg(int) cmd;
	syscallarg(struct oshmid_ds *) buf;
};

a1028 16
struct compat_o43_sys_getfsstat_args {
	syscallarg(struct o43statfs *) buf;
	syscallarg(size_t) bufsize;
	syscallarg(int) flags;
};

struct compat_o43_sys_statfs_args {
	syscallarg(const char *) path;
	syscallarg(struct o43statfs *) buf;
};

struct compat_o43_sys_fstatfs_args {
	syscallarg(int) fd;
	syscallarg(struct o43statfs *) buf;
};

a1042 5
struct compat_o43_sys_fhstatfs_args {
	syscallarg(const fhandle_t *) fhp;
	syscallarg(struct o43statfs *) buf;
};

a1447 1
int	compat_23_sys___semctl(struct proc *, void *, register_t *);
a1452 1
int	compat_23_sys_msgctl(struct proc *, void *, register_t *);
a1459 1
int	compat_23_sys_shmctl(struct proc *, void *, register_t *);
a1486 3
int	compat_o43_sys_getfsstat(struct proc *, void *, register_t *);
int	compat_o43_sys_statfs(struct proc *, void *, register_t *);
int	compat_o43_sys_fstatfs(struct proc *, void *, register_t *);
a1489 1
int	compat_o43_sys_fhstatfs(struct proc *, void *, register_t *);
@


1.112
log
@regen, even though there is no code change, such that the RCS IDs match,
as suggested by art@@
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.98 2010/01/18 19:09:39 schwarze Exp 
a1575 1
#ifdef RTHREADS
a1580 2
#else
#endif
@


1.111
log
@Regenerate
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.97 2009/11/27 20:05:50 guenther Exp 
@


1.110
log
@Convert thrsleep() to an absolute timeout with clockid to eliminate a
race condition and prep for later support of pthread_condattr_setclock()

"get it in" deraadt@@, tedu@@, cheers by others
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.93 2009/06/03 15:42:03 jj Exp 
d1214 2
a1215 1
	syscallarg(int) timeout;
d1230 2
d1265 4
d1590 2
@


1.109
log
@
Dynamic buffer cache support - a re-commit of what was backed out
after c2k9

allows buffer cache to be extended and grow/shrink dynamically

tested by many, ok oga@@, "why not just commit it" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: syscallargs.h,v 1.106 2009/06/03 15:47:13 jj Exp $	*/
d1224 1
a1224 1
	syscallarg(int) rval;
@


1.108
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.107
log
@Back out all the buffer cache changes I committed during c2k9. This reverts three
commits:

1) The sysctl allowing bufcachepercent to be changed at boot time.
2) The change moving the buffer cache hash chains to a red-black tree
3) The dynamic buffer cache (Which depended on the earlier too).

ok on the backout from marco and todd
@
text
@d1 1
a1 1
/*	$OpenBSD: syscallargs.h,v 1.104 2009/03/12 07:04:49 guenther Exp $	*/
@


1.106
log
@sync these also
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.105
log
@Arla client rename from xfs to nnpfs for later upgrades. Tested on various arches. ok todd@@ beck@@
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.91 2009/03/12 06:56:13 guenther Exp 
@


1.104
log
@regen
@
text
@d902 1
a902 1
struct sys_xfspioctl_args {
d1466 1
a1466 1
int	sys_xfspioctl(struct proc *, void *, register_t *);
@


1.103
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.90 2008/03/16 19:42:57 otto Exp 
@


1.102
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.89 2008/01/05 00:36:13 miod Exp 
d1048 2
a1049 2
struct sys_getfsstat_args {
	syscallarg(struct statfs *) buf;
d1054 1
a1054 1
struct sys_statfs_args {
d1056 1
a1056 1
	syscallarg(struct statfs *) buf;
d1059 1
a1059 1
struct sys_fstatfs_args {
d1061 1
a1061 1
	syscallarg(struct statfs *) buf;
d1078 1
a1078 1
struct sys_fhstatfs_args {
d1080 1
a1080 1
	syscallarg(struct statfs *) buf;
d1241 21
d1523 3
a1525 3
int	sys_getfsstat(struct proc *, void *, register_t *);
int	sys_statfs(struct proc *, void *, register_t *);
int	sys_fstatfs(struct proc *, void *, register_t *);
d1529 1
a1529 1
int	sys_fhstatfs(struct proc *, void *, register_t *);
d1579 4
@


1.101
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.88 2007/11/28 13:47:02 deraadt Exp 
a325 4
struct sys_ovadvise_args {
	syscallarg(int) anom;
};

a1321 1
int	sys_ovadvise(struct proc *, void *, register_t *);
@


1.100
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.87 2007/11/27 18:04:47 art Exp 
a721 4
struct compat_09_sys_uname_args {
	syscallarg(struct outsname *) name;
};

a1406 1
int	compat_09_sys_uname(struct proc *, void *, register_t *);
@


1.99
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.86 2006/09/22 17:35:41 pedro Exp 
@


1.98
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.85 2006/09/22 14:36:24 pedro Exp 
d783 22
d1430 7
@


1.97
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.84 2006/06/14 19:52:07 otto Exp 
a782 22
struct lfs_bmapv_args {
	syscallarg(fsid_t *) fsidp;
	syscallarg(struct block_info *) blkiov;
	syscallarg(int) blkcnt;
};

struct lfs_markv_args {
	syscallarg(fsid_t *) fsidp;
	syscallarg(struct block_info *) blkiov;
	syscallarg(int) blkcnt;
};

struct lfs_segclean_args {
	syscallarg(fsid_t *) fsidp;
	syscallarg(u_long) segment;
};

struct lfs_segwait_args {
	syscallarg(fsid_t *) fsidp;
	syscallarg(struct timeval *) tv;
};

a1407 7
#ifdef LFS
int	lfs_bmapv(struct proc *, void *, register_t *);
int	lfs_markv(struct proc *, void *, register_t *);
int	lfs_segclean(struct proc *, void *, register_t *);
int	lfs_segwait(struct proc *, void *, register_t *);
#else
#endif
@


1.96
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.83 2006/06/09 00:05:54 deraadt Exp 
d1244 5
d1567 1
@


1.95
log
@Regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.82 2006/04/28 08:34:31 pedro Exp 
@


1.94
log
@rebuild
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.81 2005/12/30 04:02:17 tedu Exp 
d1239 5
d1561 1
@


1.93
log
@change thrwakeup to take an argument which specifies how many threads
to wakeup.
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.80 2005/12/13 06:02:03 tedu Exp 
@


1.92
log
@rebuild
@
text
@d1228 1
@


1.91
log
@change the first arg to thrsleep and thrwakeup to a void *.
i had initially selected long since the kernel doesn't attempt
to interpret this value in any way, but since it is always a
pointer value in practice, this makes a little more sense.
binary compat in any case.  suggestion from deraadt@@
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.79 2005/12/03 18:09:08 tedu Exp 
@


1.90
log
@rebuild
@
text
@d1221 1
a1221 1
	syscallarg(long) ident;
d1227 1
a1227 1
	syscallarg(long) ident;
@


1.89
log
@kernel support for threaded processes (rthreads).
uses rfork(RFTHREAD) to create threads, which are presently processes
that are a little more tightly bound together.  several new syscalls
added to facilitate a userland thread library.
all conditional on RTHREADS, currently disabled.
ok deraadt
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.78 2005/07/03 20:13:59 drahn Exp 
@


1.88
log
@sync
@
text
@d1220 18
d1544 9
@


1.87
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.77 2005/06/17 20:39:14 millert Exp 
a1125 52
struct sys_extattrctl_args {
	syscallarg(const char *) path;
	syscallarg(int) cmd;
	syscallarg(const char *) filename;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
};

struct sys_extattr_set_file_args {
	syscallarg(const char *) path;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(const void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_get_file_args {
	syscallarg(const char *) path;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_delete_file_args {
	syscallarg(const char *) path;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
};

struct sys_extattr_set_fd_args {
	syscallarg(int) fd;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(const void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_get_fd_args {
	syscallarg(int) fd;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_delete_fd_args {
	syscallarg(int) fd;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
};

a1496 10
#ifdef UFS_EXTATTR
int	sys_extattrctl(struct proc *, void *, register_t *);
int	sys_extattr_set_file(struct proc *, void *, register_t *);
int	sys_extattr_get_file(struct proc *, void *, register_t *);
int	sys_extattr_delete_file(struct proc *, void *, register_t *);
int	sys_extattr_set_fd(struct proc *, void *, register_t *);
int	sys_extattr_get_fd(struct proc *, void *, register_t *);
int	sys_extattr_delete_fd(struct proc *, void *, register_t *);
#else
#endif
@


1.86
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.76 2004/07/15 14:35:34 deraadt Exp 
a900 4
struct sys_undelete_args {
	syscallarg(const char *) path;
};

a1475 1
int	sys_undelete(struct proc *, void *, register_t *);
@


1.85
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.75 2004/07/15 11:24:46 millert Exp 
d167 1
a167 1
	syscallarg(int *) alen;
d1142 1
a1142 1
	syscallarg(void *) data;
d1164 1
a1164 1
	syscallarg(void *) data;
@


1.84
log
@regen for new {msg,sem,shm}ctl syscalls.
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.74 2004/07/14 23:45:11 millert Exp 
@


1.83
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.73 2004/07/14 18:00:48 millert Exp 
d1041 1
a1041 1
struct sys___semctl_args {
d1048 1
a1048 1
struct sys_shmctl_args {
d1051 1
a1051 1
	syscallarg(struct shmid_ds *) buf;
d1054 1
a1054 1
struct sys_msgctl_args {
d1057 1
a1057 1
	syscallarg(struct msqid_ds *) buf;
d1257 19
d1529 1
a1529 1
int	sys___semctl(struct proc *, void *, register_t *);
d1533 1
a1533 1
int	sys_shmctl(struct proc *, void *, register_t *);
d1537 1
a1537 1
int	sys_msgctl(struct proc *, void *, register_t *);
d1583 12
@


1.82
log
@regen after stat/mode_t/nlink_t changes
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.72 2004/07/13 21:04:29 millert Exp 
d1085 1
a1085 1
struct sys_fhstat_args {
d1087 1
a1087 1
	syscallarg(struct stat *) sb;
d1252 5
d1526 1
a1526 1
int	sys_fhstat(struct proc *, void *, register_t *);
d1563 1
@


1.81
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.71 2004/07/09 23:52:02 millert Exp 
d45 1
a45 1
	syscallarg(int) mode;
d61 1
a61 1
	syscallarg(int) mode;
d83 1
a83 1
	syscallarg(int) mode;
d89 1
a89 1
	syscallarg(int) mode;
d285 1
a285 1
	syscallarg(int) newmask;
d560 1
a560 1
	syscallarg(int) mode;
d604 1
a604 1
	syscallarg(int) mode;
d630 1
a630 1
	syscallarg(int) mode;
d805 1
a805 1
struct sys_stat_args {
d807 1
a807 1
	syscallarg(struct stat *) ub;
d810 1
a810 1
struct sys_fstat_args {
d812 1
a812 1
	syscallarg(struct stat *) sb;
d815 1
a815 1
struct sys_lstat_args {
d817 1
a817 1
	syscallarg(struct stat *) ub;
d1237 15
d1440 3
a1442 3
int	sys_stat(struct proc *, void *, register_t *);
int	sys_fstat(struct proc *, void *, register_t *);
int	sys_lstat(struct proc *, void *, register_t *);
d1555 3
@


1.80
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD
d198 1
a198 1
	syscallarg(struct ostat *) ub;
d203 1
a203 1
	syscallarg(struct ostat *) ub;
d294 1
a294 1
	syscallarg(struct ostat *) sb;
@


1.79
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.70 2004/05/27 20:48:46 tedu Exp 
@


1.78
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.69 2004/05/03 17:38:48 millert Exp 
d1296 1
d1298 2
@


1.77
log
@Regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.68 2004/02/28 19:44:16 miod Exp 
d935 1
a935 1
struct sys_semop_args {
d983 1
a983 1
struct sys_shmget_args {
d1225 12
d1458 1
a1458 1
int	sys_semop(struct proc *, void *, register_t *);
d1472 1
a1472 1
int	sys_shmget(struct proc *, void *, register_t *);
d1529 8
@


1.76
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.67 2004/01/14 05:23:25 tedu Exp 
d1386 1
a1386 1
#if defined(SYSVSEM) && !defined(alpha) && !defined(__sparc64__)
d1390 1
a1390 1
#if defined(SYSVMSG) && !defined(alpha) && !defined(__sparc64__)
d1394 1
a1394 1
#if defined(SYSVSHM) && !defined(alpha) && !defined(__sparc64__)
@


1.75
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.66 2004/01/12 18:06:51 tedu Exp 
d248 3
a250 3
struct sys_sigaltstack_args {
	syscallarg(const struct sigaltstack *) nss;
	syscallarg(struct sigaltstack *) oss;
d1220 5
d1286 1
a1286 1
int	sys_sigaltstack(struct proc *, void *, register_t *);
d1516 1
@


1.74
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.65 2003/12/31 00:13:24 millert Exp 
d1216 4
d1510 1
@


1.73
log
@regen now that [gs]etpriority(2) take id_t, not int.
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.64 2003/12/11 23:02:30 millert Exp 
d53 1
a53 1
	syscallarg(int) pid;
@


1.72
log
@regen after poll(2) change
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.63 2003/12/10 23:10:08 millert Exp 
d418 1
a418 1
	syscallarg(int) who;
d442 1
a442 1
	syscallarg(int) who;
@


1.71
log
@Regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.62 2003/09/07 21:00:27 miod Exp 
d1021 1
a1021 1
	syscallarg(int) nfds;
@


1.70
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.61 2003/07/01 22:18:09 tedu Exp 
d1377 1
a1377 1
#if defined(SYSVSEM) && !defined(alpha)
d1381 1
a1381 1
#if defined(SYSVMSG) && !defined(alpha)
d1385 1
a1385 1
#if defined(SYSVSHM) && !defined(alpha)
@


1.69
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.60 2003/06/23 04:26:53 deraadt Exp 
a1205 8
struct sys_omquery_args {
	syscallarg(int) flags;
	syscallarg(void **) addr;
	syscallarg(size_t) size;
	syscallarg(int) fd;
	syscallarg(off_t) off;
};

a1504 1
int	sys_omquery(struct proc *, void *, register_t *);
@


1.68
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.58 2003/05/10 17:53:58 miod Exp 
@


1.67
log
@Regen
@
text
@d1021 1
a1021 1
	syscallarg(unsigned long) nfds;
@


1.66
log
@Regen (omsync deprecation)
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.57 2003/04/29 19:52:32 miod Exp 
d374 1
a374 1
struct sys_swapon_args {
d1313 1
a1313 1
int	sys_swapon(struct proc *, void *, register_t *);
@


1.65
log
@sync mquery.
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.56 2003/04/28 21:32:08 drahn Exp 
d304 1
a304 1
struct sys_omsync_args {
d1297 1
a1297 1
int	sys_omsync(struct proc *, void *, register_t *);
@


1.64
log
@mquery backout sync.
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.55 2003/04/25 20:32:07 drahn Exp 
d1206 1
a1206 1
struct sys_mquery_args {
d1214 10
d1513 1
@


1.63
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.54 2003/04/25 18:30:18 drahn Exp 
d1206 1
a1206 1
struct sys_omquery_args {
a1213 10
struct sys_mquery_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pad;
	syscallarg(off_t) pos;
};

a1502 1
int	sys_omquery(struct proc *, void *, register_t *);
@


1.62
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.53 2003/04/14 04:53:50 art Exp 
d1206 1
a1206 1
struct sys_mquery_args {
d1214 10
d1513 1
@


1.61
log
@There are two related changes.

The first one is an mquery(2) syscall. It's for asking the VM system
about where to map things. It will be used by ld.so, read the man page
for details.

The second change is related and is a centralization of uvm_map hint
that all callers of uvm_map calculated. This will allow us to adjust
this hint on architectures that have segments for non-exec mappings.

deraadt@@ drahn@@ ok.
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.52 2003/01/30 03:29:49 millert Exp 
@


1.60
log
@regen now that setreuid/setregid have moved out of compat and into kern
@
text
@d1206 8
d1503 1
@


1.59
log
@regen due to addition of [gs]etres[ug]id(2)
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.51 2002/10/30 20:02:58 millert Exp 
d572 1
a572 1
struct compat_43_sys_setreuid_args {
d577 1
a577 1
struct compat_43_sys_setregid_args {
d1331 2
a1332 2
int	compat_43_sys_setreuid(struct proc *, void *, register_t *);
int	compat_43_sys_setregid(struct proc *, void *, register_t *);
@


1.58
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.50 2002/07/06 19:14:20 nordin Exp 
d573 2
a574 2
	syscallarg(int) ruid;
	syscallarg(int) euid;
d578 2
a579 2
	syscallarg(int) rgid;
	syscallarg(int) egid;
d1182 24
d1491 4
@


1.57
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: syscallargs.h,v 1.56 2002/03/14 00:44:20 miod Exp $	*/
d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.49 2002/03/14 00:42:25 miod Exp 
a770 8
struct sys_ntp_gettime_args {
	syscallarg(struct ntptimeval *) ntvp;
};

struct sys_ntp_adjtime_args {
	syscallarg(struct timex *) tp;
};

a1356 5
#ifdef NTP
int	sys_ntp_gettime(struct proc *, void *, register_t *);
int	sys_ntp_adjtime(struct proc *, void *, register_t *);
#else
#endif
@


1.56
log
@Regen after syscall changes (option PTRACE)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d1194 24
a1217 24
int	sys_exit	__P((struct proc *, void *, register_t *));
int	sys_fork	__P((struct proc *, void *, register_t *));
int	sys_read	__P((struct proc *, void *, register_t *));
int	sys_write	__P((struct proc *, void *, register_t *));
int	sys_open	__P((struct proc *, void *, register_t *));
int	sys_close	__P((struct proc *, void *, register_t *));
int	sys_wait4	__P((struct proc *, void *, register_t *));
int	compat_43_sys_creat	__P((struct proc *, void *, register_t *));
int	sys_link	__P((struct proc *, void *, register_t *));
int	sys_unlink	__P((struct proc *, void *, register_t *));
int	sys_chdir	__P((struct proc *, void *, register_t *));
int	sys_fchdir	__P((struct proc *, void *, register_t *));
int	sys_mknod	__P((struct proc *, void *, register_t *));
int	sys_chmod	__P((struct proc *, void *, register_t *));
int	sys_chown	__P((struct proc *, void *, register_t *));
int	sys_obreak	__P((struct proc *, void *, register_t *));
int	compat_25_sys_getfsstat	__P((struct proc *, void *, register_t *));
int	compat_43_sys_lseek	__P((struct proc *, void *, register_t *));
int	sys_getpid	__P((struct proc *, void *, register_t *));
int	sys_mount	__P((struct proc *, void *, register_t *));
int	sys_unmount	__P((struct proc *, void *, register_t *));
int	sys_setuid	__P((struct proc *, void *, register_t *));
int	sys_getuid	__P((struct proc *, void *, register_t *));
int	sys_geteuid	__P((struct proc *, void *, register_t *));
d1219 1
a1219 1
int	sys_ptrace	__P((struct proc *, void *, register_t *));
d1222 18
a1239 18
int	sys_recvmsg	__P((struct proc *, void *, register_t *));
int	sys_sendmsg	__P((struct proc *, void *, register_t *));
int	sys_recvfrom	__P((struct proc *, void *, register_t *));
int	sys_accept	__P((struct proc *, void *, register_t *));
int	sys_getpeername	__P((struct proc *, void *, register_t *));
int	sys_getsockname	__P((struct proc *, void *, register_t *));
int	sys_access	__P((struct proc *, void *, register_t *));
int	sys_chflags	__P((struct proc *, void *, register_t *));
int	sys_fchflags	__P((struct proc *, void *, register_t *));
int	sys_sync	__P((struct proc *, void *, register_t *));
int	sys_kill	__P((struct proc *, void *, register_t *));
int	compat_43_sys_stat	__P((struct proc *, void *, register_t *));
int	sys_getppid	__P((struct proc *, void *, register_t *));
int	compat_43_sys_lstat	__P((struct proc *, void *, register_t *));
int	sys_dup	__P((struct proc *, void *, register_t *));
int	sys_opipe	__P((struct proc *, void *, register_t *));
int	sys_getegid	__P((struct proc *, void *, register_t *));
int	sys_profil	__P((struct proc *, void *, register_t *));
d1241 1
a1241 1
int	sys_ktrace	__P((struct proc *, void *, register_t *));
d1244 95
a1338 95
int	sys_sigaction	__P((struct proc *, void *, register_t *));
int	sys_getgid	__P((struct proc *, void *, register_t *));
int	sys_sigprocmask	__P((struct proc *, void *, register_t *));
int	sys_getlogin	__P((struct proc *, void *, register_t *));
int	sys_setlogin	__P((struct proc *, void *, register_t *));
int	sys_acct	__P((struct proc *, void *, register_t *));
int	sys_sigpending	__P((struct proc *, void *, register_t *));
int	sys_sigaltstack	__P((struct proc *, void *, register_t *));
int	sys_ioctl	__P((struct proc *, void *, register_t *));
int	sys_reboot	__P((struct proc *, void *, register_t *));
int	sys_revoke	__P((struct proc *, void *, register_t *));
int	sys_symlink	__P((struct proc *, void *, register_t *));
int	sys_readlink	__P((struct proc *, void *, register_t *));
int	sys_execve	__P((struct proc *, void *, register_t *));
int	sys_umask	__P((struct proc *, void *, register_t *));
int	sys_chroot	__P((struct proc *, void *, register_t *));
int	compat_43_sys_fstat	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getkerninfo	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getpagesize	__P((struct proc *, void *, register_t *));
int	sys_omsync	__P((struct proc *, void *, register_t *));
int	sys_vfork	__P((struct proc *, void *, register_t *));
int	sys_sbrk	__P((struct proc *, void *, register_t *));
int	sys_sstk	__P((struct proc *, void *, register_t *));
int	compat_43_sys_mmap	__P((struct proc *, void *, register_t *));
int	sys_ovadvise	__P((struct proc *, void *, register_t *));
int	sys_munmap	__P((struct proc *, void *, register_t *));
int	sys_mprotect	__P((struct proc *, void *, register_t *));
int	sys_madvise	__P((struct proc *, void *, register_t *));
int	sys_mincore	__P((struct proc *, void *, register_t *));
int	sys_getgroups	__P((struct proc *, void *, register_t *));
int	sys_setgroups	__P((struct proc *, void *, register_t *));
int	sys_getpgrp	__P((struct proc *, void *, register_t *));
int	sys_setpgid	__P((struct proc *, void *, register_t *));
int	sys_setitimer	__P((struct proc *, void *, register_t *));
int	compat_43_sys_wait	__P((struct proc *, void *, register_t *));
int	sys_swapon	__P((struct proc *, void *, register_t *));
int	sys_getitimer	__P((struct proc *, void *, register_t *));
int	compat_43_sys_gethostname	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sethostname	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getdtablesize	__P((struct proc *, void *, register_t *));
int	sys_dup2	__P((struct proc *, void *, register_t *));
int	sys_fcntl	__P((struct proc *, void *, register_t *));
int	sys_select	__P((struct proc *, void *, register_t *));
int	sys_fsync	__P((struct proc *, void *, register_t *));
int	sys_setpriority	__P((struct proc *, void *, register_t *));
int	sys_socket	__P((struct proc *, void *, register_t *));
int	sys_connect	__P((struct proc *, void *, register_t *));
int	compat_43_sys_accept	__P((struct proc *, void *, register_t *));
int	sys_getpriority	__P((struct proc *, void *, register_t *));
int	compat_43_sys_send	__P((struct proc *, void *, register_t *));
int	compat_43_sys_recv	__P((struct proc *, void *, register_t *));
int	sys_sigreturn	__P((struct proc *, void *, register_t *));
int	sys_bind	__P((struct proc *, void *, register_t *));
int	sys_setsockopt	__P((struct proc *, void *, register_t *));
int	sys_listen	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sigvec	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sigblock	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sigsetmask	__P((struct proc *, void *, register_t *));
int	sys_sigsuspend	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sigstack	__P((struct proc *, void *, register_t *));
int	compat_43_sys_recvmsg	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sendmsg	__P((struct proc *, void *, register_t *));
int	sys_gettimeofday	__P((struct proc *, void *, register_t *));
int	sys_getrusage	__P((struct proc *, void *, register_t *));
int	sys_getsockopt	__P((struct proc *, void *, register_t *));
int	sys_readv	__P((struct proc *, void *, register_t *));
int	sys_writev	__P((struct proc *, void *, register_t *));
int	sys_settimeofday	__P((struct proc *, void *, register_t *));
int	sys_fchown	__P((struct proc *, void *, register_t *));
int	sys_fchmod	__P((struct proc *, void *, register_t *));
int	compat_43_sys_recvfrom	__P((struct proc *, void *, register_t *));
int	compat_43_sys_setreuid	__P((struct proc *, void *, register_t *));
int	compat_43_sys_setregid	__P((struct proc *, void *, register_t *));
int	sys_rename	__P((struct proc *, void *, register_t *));
int	compat_43_sys_truncate	__P((struct proc *, void *, register_t *));
int	compat_43_sys_ftruncate	__P((struct proc *, void *, register_t *));
int	sys_flock	__P((struct proc *, void *, register_t *));
int	sys_mkfifo	__P((struct proc *, void *, register_t *));
int	sys_sendto	__P((struct proc *, void *, register_t *));
int	sys_shutdown	__P((struct proc *, void *, register_t *));
int	sys_socketpair	__P((struct proc *, void *, register_t *));
int	sys_mkdir	__P((struct proc *, void *, register_t *));
int	sys_rmdir	__P((struct proc *, void *, register_t *));
int	sys_utimes	__P((struct proc *, void *, register_t *));
int	sys_adjtime	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getpeername	__P((struct proc *, void *, register_t *));
int	compat_43_sys_gethostid	__P((struct proc *, void *, register_t *));
int	compat_43_sys_sethostid	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getrlimit	__P((struct proc *, void *, register_t *));
int	compat_43_sys_setrlimit	__P((struct proc *, void *, register_t *));
int	compat_43_sys_killpg	__P((struct proc *, void *, register_t *));
int	sys_setsid	__P((struct proc *, void *, register_t *));
int	sys_quotactl	__P((struct proc *, void *, register_t *));
int	compat_43_sys_quota	__P((struct proc *, void *, register_t *));
int	compat_43_sys_getsockname	__P((struct proc *, void *, register_t *));
d1340 1
a1340 1
int	sys_nfssvc	__P((struct proc *, void *, register_t *));
d1343 8
a1350 8
int	compat_43_sys_getdirentries	__P((struct proc *, void *, register_t *));
int	compat_25_sys_statfs	__P((struct proc *, void *, register_t *));
int	compat_25_sys_fstatfs	__P((struct proc *, void *, register_t *));
int	sys_getfh	__P((struct proc *, void *, register_t *));
int	compat_09_sys_getdomainname	__P((struct proc *, void *, register_t *));
int	compat_09_sys_setdomainname	__P((struct proc *, void *, register_t *));
int	compat_09_sys_uname	__P((struct proc *, void *, register_t *));
int	sys_sysarch	__P((struct proc *, void *, register_t *));
d1352 1
a1352 1
int	compat_10_sys_semsys	__P((struct proc *, void *, register_t *));
d1356 1
a1356 1
int	compat_10_sys_msgsys	__P((struct proc *, void *, register_t *));
d1360 1
a1360 1
int	compat_10_sys_shmsys	__P((struct proc *, void *, register_t *));
d1363 2
a1364 2
int	sys_pread	__P((struct proc *, void *, register_t *));
int	sys_pwrite	__P((struct proc *, void *, register_t *));
d1366 2
a1367 2
int	sys_ntp_gettime	__P((struct proc *, void *, register_t *));
int	sys_ntp_adjtime	__P((struct proc *, void *, register_t *));
d1370 3
a1372 3
int	sys_setgid	__P((struct proc *, void *, register_t *));
int	sys_setegid	__P((struct proc *, void *, register_t *));
int	sys_seteuid	__P((struct proc *, void *, register_t *));
d1374 4
a1377 4
int	lfs_bmapv	__P((struct proc *, void *, register_t *));
int	lfs_markv	__P((struct proc *, void *, register_t *));
int	lfs_segclean	__P((struct proc *, void *, register_t *));
int	lfs_segwait	__P((struct proc *, void *, register_t *));
d1380 20
a1399 20
int	sys_stat	__P((struct proc *, void *, register_t *));
int	sys_fstat	__P((struct proc *, void *, register_t *));
int	sys_lstat	__P((struct proc *, void *, register_t *));
int	sys_pathconf	__P((struct proc *, void *, register_t *));
int	sys_fpathconf	__P((struct proc *, void *, register_t *));
int	sys_swapctl	__P((struct proc *, void *, register_t *));
int	sys_getrlimit	__P((struct proc *, void *, register_t *));
int	sys_setrlimit	__P((struct proc *, void *, register_t *));
int	sys_getdirentries	__P((struct proc *, void *, register_t *));
int	sys_mmap	__P((struct proc *, void *, register_t *));
int	sys_lseek	__P((struct proc *, void *, register_t *));
int	sys_truncate	__P((struct proc *, void *, register_t *));
int	sys_ftruncate	__P((struct proc *, void *, register_t *));
int	sys___sysctl	__P((struct proc *, void *, register_t *));
int	sys_mlock	__P((struct proc *, void *, register_t *));
int	sys_munlock	__P((struct proc *, void *, register_t *));
int	sys_undelete	__P((struct proc *, void *, register_t *));
int	sys_futimes	__P((struct proc *, void *, register_t *));
int	sys_getpgid	__P((struct proc *, void *, register_t *));
int	sys_xfspioctl	__P((struct proc *, void *, register_t *));
d1401 10
a1410 10
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
int	sys_lkmnosys	__P((struct proc *, void *, register_t *));
d1414 3
a1416 3
int	compat_23_sys___semctl	__P((struct proc *, void *, register_t *));
int	sys_semget	__P((struct proc *, void *, register_t *));
int	sys_semop	__P((struct proc *, void *, register_t *));
d1420 4
a1423 4
int	compat_23_sys_msgctl	__P((struct proc *, void *, register_t *));
int	sys_msgget	__P((struct proc *, void *, register_t *));
int	sys_msgsnd	__P((struct proc *, void *, register_t *));
int	sys_msgrcv	__P((struct proc *, void *, register_t *));
d1427 4
a1430 4
int	sys_shmat	__P((struct proc *, void *, register_t *));
int	compat_23_sys_shmctl	__P((struct proc *, void *, register_t *));
int	sys_shmdt	__P((struct proc *, void *, register_t *));
int	sys_shmget	__P((struct proc *, void *, register_t *));
d1433 11
a1443 11
int	sys_clock_gettime	__P((struct proc *, void *, register_t *));
int	sys_clock_settime	__P((struct proc *, void *, register_t *));
int	sys_clock_getres	__P((struct proc *, void *, register_t *));
int	sys_nanosleep	__P((struct proc *, void *, register_t *));
int	sys_minherit	__P((struct proc *, void *, register_t *));
int	sys_rfork	__P((struct proc *, void *, register_t *));
int	sys_poll	__P((struct proc *, void *, register_t *));
int	sys_issetugid	__P((struct proc *, void *, register_t *));
int	sys_lchown	__P((struct proc *, void *, register_t *));
int	sys_getsid	__P((struct proc *, void *, register_t *));
int	sys_msync	__P((struct proc *, void *, register_t *));
d1445 1
a1445 1
int	sys___semctl	__P((struct proc *, void *, register_t *));
d1449 1
a1449 1
int	sys_shmctl	__P((struct proc *, void *, register_t *));
d1453 1
a1453 1
int	sys_msgctl	__P((struct proc *, void *, register_t *));
d1456 14
a1469 14
int	sys_getfsstat	__P((struct proc *, void *, register_t *));
int	sys_statfs	__P((struct proc *, void *, register_t *));
int	sys_fstatfs	__P((struct proc *, void *, register_t *));
int	sys_pipe	__P((struct proc *, void *, register_t *));
int	sys_fhopen	__P((struct proc *, void *, register_t *));
int	sys_fhstat	__P((struct proc *, void *, register_t *));
int	sys_fhstatfs	__P((struct proc *, void *, register_t *));
int	sys_preadv	__P((struct proc *, void *, register_t *));
int	sys_pwritev	__P((struct proc *, void *, register_t *));
int	sys_kqueue	__P((struct proc *, void *, register_t *));
int	sys_kevent	__P((struct proc *, void *, register_t *));
int	sys_mlockall	__P((struct proc *, void *, register_t *));
int	sys_munlockall	__P((struct proc *, void *, register_t *));
int	sys_getpeereid	__P((struct proc *, void *, register_t *));
d1471 7
a1477 7
int	sys_extattrctl	__P((struct proc *, void *, register_t *));
int	sys_extattr_set_file	__P((struct proc *, void *, register_t *));
int	sys_extattr_get_file	__P((struct proc *, void *, register_t *));
int	sys_extattr_delete_file	__P((struct proc *, void *, register_t *));
int	sys_extattr_set_fd	__P((struct proc *, void *, register_t *));
int	sys_extattr_get_fd	__P((struct proc *, void *, register_t *));
int	sys_extattr_delete_fd	__P((struct proc *, void *, register_t *));
@


1.55
log
@EA sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.48 2002/02/22 20:37:45 drahn Exp 
d1218 1
d1220 2
@


1.54
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.47 2001/06/26 19:56:52 dugsong Exp 
d1138 52
d1467 10
@


1.54.4.1
log
@Sync UBC branch to -current
@
text
@a1137 52
struct sys_extattrctl_args {
	syscallarg(const char *) path;
	syscallarg(int) cmd;
	syscallarg(const char *) filename;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
};

struct sys_extattr_set_file_args {
	syscallarg(const char *) path;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_get_file_args {
	syscallarg(const char *) path;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_delete_file_args {
	syscallarg(const char *) path;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
};

struct sys_extattr_set_fd_args {
	syscallarg(int) fd;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_get_fd_args {
	syscallarg(int) fd;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_delete_fd_args {
	syscallarg(int) fd;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
};

d1142 43
a1184 46
int	sys_exit(struct proc *, void *, register_t *);
int	sys_fork(struct proc *, void *, register_t *);
int	sys_read(struct proc *, void *, register_t *);
int	sys_write(struct proc *, void *, register_t *);
int	sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	sys_wait4(struct proc *, void *, register_t *);
int	compat_43_sys_creat(struct proc *, void *, register_t *);
int	sys_link(struct proc *, void *, register_t *);
int	sys_unlink(struct proc *, void *, register_t *);
int	sys_chdir(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	sys_mknod(struct proc *, void *, register_t *);
int	sys_chmod(struct proc *, void *, register_t *);
int	sys_chown(struct proc *, void *, register_t *);
int	sys_obreak(struct proc *, void *, register_t *);
int	compat_25_sys_getfsstat(struct proc *, void *, register_t *);
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	sys_mount(struct proc *, void *, register_t *);
int	sys_unmount(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	sys_geteuid(struct proc *, void *, register_t *);
#ifdef PTRACE
int	sys_ptrace(struct proc *, void *, register_t *);
#else
#endif
int	sys_recvmsg(struct proc *, void *, register_t *);
int	sys_sendmsg(struct proc *, void *, register_t *);
int	sys_recvfrom(struct proc *, void *, register_t *);
int	sys_accept(struct proc *, void *, register_t *);
int	sys_getpeername(struct proc *, void *, register_t *);
int	sys_getsockname(struct proc *, void *, register_t *);
int	sys_access(struct proc *, void *, register_t *);
int	sys_chflags(struct proc *, void *, register_t *);
int	sys_fchflags(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	sys_kill(struct proc *, void *, register_t *);
int	compat_43_sys_stat(struct proc *, void *, register_t *);
int	sys_getppid(struct proc *, void *, register_t *);
int	compat_43_sys_lstat(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_opipe(struct proc *, void *, register_t *);
int	sys_getegid(struct proc *, void *, register_t *);
int	sys_profil(struct proc *, void *, register_t *);
d1186 1
a1186 1
int	sys_ktrace(struct proc *, void *, register_t *);
d1189 95
a1283 95
int	sys_sigaction(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	sys_sigprocmask(struct proc *, void *, register_t *);
int	sys_getlogin(struct proc *, void *, register_t *);
int	sys_setlogin(struct proc *, void *, register_t *);
int	sys_acct(struct proc *, void *, register_t *);
int	sys_sigpending(struct proc *, void *, register_t *);
int	sys_sigaltstack(struct proc *, void *, register_t *);
int	sys_ioctl(struct proc *, void *, register_t *);
int	sys_reboot(struct proc *, void *, register_t *);
int	sys_revoke(struct proc *, void *, register_t *);
int	sys_symlink(struct proc *, void *, register_t *);
int	sys_readlink(struct proc *, void *, register_t *);
int	sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	sys_chroot(struct proc *, void *, register_t *);
int	compat_43_sys_fstat(struct proc *, void *, register_t *);
int	compat_43_sys_getkerninfo(struct proc *, void *, register_t *);
int	compat_43_sys_getpagesize(struct proc *, void *, register_t *);
int	sys_omsync(struct proc *, void *, register_t *);
int	sys_vfork(struct proc *, void *, register_t *);
int	sys_sbrk(struct proc *, void *, register_t *);
int	sys_sstk(struct proc *, void *, register_t *);
int	compat_43_sys_mmap(struct proc *, void *, register_t *);
int	sys_ovadvise(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	sys_madvise(struct proc *, void *, register_t *);
int	sys_mincore(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	sys_getpgrp(struct proc *, void *, register_t *);
int	sys_setpgid(struct proc *, void *, register_t *);
int	sys_setitimer(struct proc *, void *, register_t *);
int	compat_43_sys_wait(struct proc *, void *, register_t *);
int	sys_swapon(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
int	compat_43_sys_gethostname(struct proc *, void *, register_t *);
int	compat_43_sys_sethostname(struct proc *, void *, register_t *);
int	compat_43_sys_getdtablesize(struct proc *, void *, register_t *);
int	sys_dup2(struct proc *, void *, register_t *);
int	sys_fcntl(struct proc *, void *, register_t *);
int	sys_select(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	sys_setpriority(struct proc *, void *, register_t *);
int	sys_socket(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	compat_43_sys_accept(struct proc *, void *, register_t *);
int	sys_getpriority(struct proc *, void *, register_t *);
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
int	sys_sigreturn(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_setsockopt(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	compat_43_sys_sigvec(struct proc *, void *, register_t *);
int	compat_43_sys_sigblock(struct proc *, void *, register_t *);
int	compat_43_sys_sigsetmask(struct proc *, void *, register_t *);
int	sys_sigsuspend(struct proc *, void *, register_t *);
int	compat_43_sys_sigstack(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
int	sys_gettimeofday(struct proc *, void *, register_t *);
int	sys_getrusage(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_readv(struct proc *, void *, register_t *);
int	sys_writev(struct proc *, void *, register_t *);
int	sys_settimeofday(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
int	compat_43_sys_setreuid(struct proc *, void *, register_t *);
int	compat_43_sys_setregid(struct proc *, void *, register_t *);
int	sys_rename(struct proc *, void *, register_t *);
int	compat_43_sys_truncate(struct proc *, void *, register_t *);
int	compat_43_sys_ftruncate(struct proc *, void *, register_t *);
int	sys_flock(struct proc *, void *, register_t *);
int	sys_mkfifo(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
int	sys_mkdir(struct proc *, void *, register_t *);
int	sys_rmdir(struct proc *, void *, register_t *);
int	sys_utimes(struct proc *, void *, register_t *);
int	sys_adjtime(struct proc *, void *, register_t *);
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_gethostid(struct proc *, void *, register_t *);
int	compat_43_sys_sethostid(struct proc *, void *, register_t *);
int	compat_43_sys_getrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_setrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_killpg(struct proc *, void *, register_t *);
int	sys_setsid(struct proc *, void *, register_t *);
int	sys_quotactl(struct proc *, void *, register_t *);
int	compat_43_sys_quota(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
d1285 1
a1285 1
int	sys_nfssvc(struct proc *, void *, register_t *);
d1288 8
a1295 8
int	compat_43_sys_getdirentries(struct proc *, void *, register_t *);
int	compat_25_sys_statfs(struct proc *, void *, register_t *);
int	compat_25_sys_fstatfs(struct proc *, void *, register_t *);
int	sys_getfh(struct proc *, void *, register_t *);
int	compat_09_sys_getdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_setdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_uname(struct proc *, void *, register_t *);
int	sys_sysarch(struct proc *, void *, register_t *);
d1297 1
a1297 1
int	compat_10_sys_semsys(struct proc *, void *, register_t *);
d1301 1
a1301 1
int	compat_10_sys_msgsys(struct proc *, void *, register_t *);
d1305 1
a1305 1
int	compat_10_sys_shmsys(struct proc *, void *, register_t *);
d1308 2
a1309 2
int	sys_pread(struct proc *, void *, register_t *);
int	sys_pwrite(struct proc *, void *, register_t *);
d1311 2
a1312 2
int	sys_ntp_gettime(struct proc *, void *, register_t *);
int	sys_ntp_adjtime(struct proc *, void *, register_t *);
d1315 3
a1317 3
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_setegid(struct proc *, void *, register_t *);
int	sys_seteuid(struct proc *, void *, register_t *);
d1319 26
a1344 26
int	lfs_bmapv(struct proc *, void *, register_t *);
int	lfs_markv(struct proc *, void *, register_t *);
int	lfs_segclean(struct proc *, void *, register_t *);
int	lfs_segwait(struct proc *, void *, register_t *);
#else
#endif
int	sys_stat(struct proc *, void *, register_t *);
int	sys_fstat(struct proc *, void *, register_t *);
int	sys_lstat(struct proc *, void *, register_t *);
int	sys_pathconf(struct proc *, void *, register_t *);
int	sys_fpathconf(struct proc *, void *, register_t *);
int	sys_swapctl(struct proc *, void *, register_t *);
int	sys_getrlimit(struct proc *, void *, register_t *);
int	sys_setrlimit(struct proc *, void *, register_t *);
int	sys_getdirentries(struct proc *, void *, register_t *);
int	sys_mmap(struct proc *, void *, register_t *);
int	sys_lseek(struct proc *, void *, register_t *);
int	sys_truncate(struct proc *, void *, register_t *);
int	sys_ftruncate(struct proc *, void *, register_t *);
int	sys___sysctl(struct proc *, void *, register_t *);
int	sys_mlock(struct proc *, void *, register_t *);
int	sys_munlock(struct proc *, void *, register_t *);
int	sys_undelete(struct proc *, void *, register_t *);
int	sys_futimes(struct proc *, void *, register_t *);
int	sys_getpgid(struct proc *, void *, register_t *);
int	sys_xfspioctl(struct proc *, void *, register_t *);
d1346 10
a1355 10
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
d1359 3
a1361 3
int	compat_23_sys___semctl(struct proc *, void *, register_t *);
int	sys_semget(struct proc *, void *, register_t *);
int	sys_semop(struct proc *, void *, register_t *);
d1365 4
a1368 4
int	compat_23_sys_msgctl(struct proc *, void *, register_t *);
int	sys_msgget(struct proc *, void *, register_t *);
int	sys_msgsnd(struct proc *, void *, register_t *);
int	sys_msgrcv(struct proc *, void *, register_t *);
d1372 17
a1388 17
int	sys_shmat(struct proc *, void *, register_t *);
int	compat_23_sys_shmctl(struct proc *, void *, register_t *);
int	sys_shmdt(struct proc *, void *, register_t *);
int	sys_shmget(struct proc *, void *, register_t *);
#else
#endif
int	sys_clock_gettime(struct proc *, void *, register_t *);
int	sys_clock_settime(struct proc *, void *, register_t *);
int	sys_clock_getres(struct proc *, void *, register_t *);
int	sys_nanosleep(struct proc *, void *, register_t *);
int	sys_minherit(struct proc *, void *, register_t *);
int	sys_rfork(struct proc *, void *, register_t *);
int	sys_poll(struct proc *, void *, register_t *);
int	sys_issetugid(struct proc *, void *, register_t *);
int	sys_lchown(struct proc *, void *, register_t *);
int	sys_getsid(struct proc *, void *, register_t *);
int	sys_msync(struct proc *, void *, register_t *);
d1390 1
a1390 1
int	sys___semctl(struct proc *, void *, register_t *);
d1394 1
a1394 1
int	sys_shmctl(struct proc *, void *, register_t *);
d1398 1
a1398 25
int	sys_msgctl(struct proc *, void *, register_t *);
#else
#endif
int	sys_getfsstat(struct proc *, void *, register_t *);
int	sys_statfs(struct proc *, void *, register_t *);
int	sys_fstatfs(struct proc *, void *, register_t *);
int	sys_pipe(struct proc *, void *, register_t *);
int	sys_fhopen(struct proc *, void *, register_t *);
int	sys_fhstat(struct proc *, void *, register_t *);
int	sys_fhstatfs(struct proc *, void *, register_t *);
int	sys_preadv(struct proc *, void *, register_t *);
int	sys_pwritev(struct proc *, void *, register_t *);
int	sys_kqueue(struct proc *, void *, register_t *);
int	sys_kevent(struct proc *, void *, register_t *);
int	sys_mlockall(struct proc *, void *, register_t *);
int	sys_munlockall(struct proc *, void *, register_t *);
int	sys_getpeereid(struct proc *, void *, register_t *);
#ifdef UFS_EXTATTR
int	sys_extattrctl(struct proc *, void *, register_t *);
int	sys_extattr_set_file(struct proc *, void *, register_t *);
int	sys_extattr_get_file(struct proc *, void *, register_t *);
int	sys_extattr_delete_file(struct proc *, void *, register_t *);
int	sys_extattr_set_fd(struct proc *, void *, register_t *);
int	sys_extattr_get_fd(struct proc *, void *, register_t *);
int	sys_extattr_delete_fd(struct proc *, void *, register_t *);
d1401 14
@


1.54.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: syscallargs.h,v 1.54.4.1 2002/06/11 03:32:33 art Exp $	*/
d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.50 2002/07/06 19:14:20 nordin Exp 
d771 8
d1365 5
@


1.54.4.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.58 2003/05/10 17:53:58 miod Exp 
d304 1
a304 1
struct compat_25_sys_omsync_args {
d374 1
a374 1
struct compat_25_sys_swapon_args {
d572 3
a574 3
struct sys_setreuid_args {
	syscallarg(uid_t) ruid;
	syscallarg(uid_t) euid;
d577 3
a579 3
struct sys_setregid_args {
	syscallarg(gid_t) rgid;
	syscallarg(gid_t) egid;
a1181 42
struct sys_getresuid_args {
	syscallarg(uid_t *) ruid;
	syscallarg(uid_t *) euid;
	syscallarg(uid_t *) suid;
};

struct sys_setresuid_args {
	syscallarg(uid_t) ruid;
	syscallarg(uid_t) euid;
	syscallarg(uid_t) suid;
};

struct sys_getresgid_args {
	syscallarg(gid_t *) rgid;
	syscallarg(gid_t *) egid;
	syscallarg(gid_t *) sgid;
};

struct sys_setresgid_args {
	syscallarg(gid_t) rgid;
	syscallarg(gid_t) egid;
	syscallarg(gid_t) sgid;
};

struct sys_omquery_args {
	syscallarg(int) flags;
	syscallarg(void **) addr;
	syscallarg(size_t) size;
	syscallarg(int) fd;
	syscallarg(off_t) off;
};

struct sys_mquery_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pad;
	syscallarg(off_t) pos;
};

d1255 1
a1255 1
int	compat_25_sys_omsync(struct proc *, void *, register_t *);
d1271 1
a1271 1
int	compat_25_sys_swapon(struct proc *, void *, register_t *);
d1307 2
a1308 2
int	sys_setreuid(struct proc *, void *, register_t *);
int	sys_setregid(struct proc *, void *, register_t *);
a1466 6
int	sys_getresuid(struct proc *, void *, register_t *);
int	sys_setresuid(struct proc *, void *, register_t *);
int	sys_getresgid(struct proc *, void *, register_t *);
int	sys_setresgid(struct proc *, void *, register_t *);
int	sys_omquery(struct proc *, void *, register_t *);
int	sys_mquery(struct proc *, void *, register_t *);
@


1.53
log
@regen
@
text
@d10 15
a24 1
#define	syscallarg(x)	union { x datum; register_t pad; }
@


1.52
log
@implement djb's getpeereid(2), to allow local-domain servers to determine client credentials. mostly from superscript.com. deraadt@@ ok
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.46 2001/06/16 22:16:23 deraadt Exp 
@


1.51
log
@sync
@
text
@d1118 6
d1400 1
@


1.50
log
@regen for COMPAT_2{3,5}
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.45 2001/05/16 17:14:35 millert Exp 
d714 1
a714 1
	syscallarg(char *) parms;
@


1.49
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.44 2001/03/09 15:11:47 art Exp 
d88 1
a88 1
struct sys_ogetfsstat_args {
d683 1
a683 1
struct sys_ostatfs_args {
d688 1
a688 1
struct sys_ofstatfs_args {
d916 1
a916 1
struct sys___osemctl_args {
d935 1
a935 1
struct sys_omsgctl_args {
d967 1
a967 1
struct sys_oshmctl_args {
d1138 1
a1138 1
int	sys_ogetfsstat	__P((struct proc *, void *, register_t *));
d1269 2
a1270 2
int	sys_ostatfs	__P((struct proc *, void *, register_t *));
int	sys_ofstatfs	__P((struct proc *, void *, register_t *));
d1339 1
a1339 1
int	sys___osemctl	__P((struct proc *, void *, register_t *));
d1345 1
a1345 1
int	sys_omsgctl	__P((struct proc *, void *, register_t *));
d1353 1
a1353 1
int	sys_oshmctl	__P((struct proc *, void *, register_t *));
@


1.48
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.43 2000/11/16 20:02:17 provos Exp 
d1114 4
d1392 2
@


1.47
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.42 2000/09/12 17:25:56 millert Exp 
d1105 9
d1386 2
@


1.46
log
@regen-vtrace
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.41 2000/06/22 22:41:19 mickey Exp 
@


1.45
log
@sys_semconfig goes foom
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.40 2000/05/01 23:10:58 deraadt Exp 
a502 5
struct sys_vtrace_args {
	syscallarg(int) request;
	syscallarg(int) value;
};

a1217 4
#ifdef TRACE
int	sys_vtrace	__P((struct proc *, void *, register_t *));
#else
#endif
@


1.44
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.39 2000/04/20 06:32:23 deraadt Exp 
a939 4
struct sys_semconfig_args {
	syscallarg(int) flag;
};

a1337 1
int	sys_semconfig	__P((struct proc *, void *, register_t *));
@


1.43
log
@regen (with correct reference from syscalls.master)
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.38 2000/02/07 04:49:27 assar Exp 
d746 16
d1098 16
d1288 2
d1389 2
@


1.43.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: syscallargs.h,v 1.49 2001/03/09 15:12:53 art Exp $	*/
d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.44 2001/03/09 15:11:47 art Exp 
d503 5
a745 16
struct sys_pread_args {
	syscallarg(int) fd;
	syscallarg(void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct sys_pwrite_args {
	syscallarg(int) fd;
	syscallarg(const void *) buf;
	syscallarg(size_t) nbyte;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

d924 4
a1081 29
struct sys_preadv_args {
	syscallarg(int) fd;
	syscallarg(const struct iovec *) iovp;
	syscallarg(int) iovcnt;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct sys_pwritev_args {
	syscallarg(int) fd;
	syscallarg(const struct iovec *) iovp;
	syscallarg(int) iovcnt;
	syscallarg(int) pad;
	syscallarg(off_t) offset;
};

struct sys_kevent_args {
	syscallarg(int) fd;
	syscallarg(const struct kevent *) changelist;
	syscallarg(int) nchanges;
	syscallarg(struct kevent *) eventlist;
	syscallarg(int) nevents;
	syscallarg(const struct timespec *) timeout;
};

struct sys_mlockall_args {
	syscallarg(int) flags;
};

d1195 4
a1255 2
int	sys_pread	__P((struct proc *, void *, register_t *));
int	sys_pwrite	__P((struct proc *, void *, register_t *));
d1308 1
a1354 6
int	sys_preadv	__P((struct proc *, void *, register_t *));
int	sys_pwritev	__P((struct proc *, void *, register_t *));
int	sys_kqueue	__P((struct proc *, void *, register_t *));
int	sys_kevent	__P((struct proc *, void *, register_t *));
int	sys_mlockall	__P((struct proc *, void *, register_t *));
int	sys_munlockall	__P((struct proc *, void *, register_t *));
@


1.43.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscallargs.h,v 1.43.2.1 2001/05/14 22:45:04 niklas Exp $	*/
d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.47 2001/06/26 19:56:52 dugsong Exp 
d88 1
a88 1
struct compat_25_sys_getfsstat_args {
d683 1
a683 1
struct compat_25_sys_statfs_args {
d688 1
a688 1
struct compat_25_sys_fstatfs_args {
d714 1
a714 1
	syscallarg(void *) parms;
d916 1
a916 1
struct compat_23_sys___semctl_args {
d935 1
a935 1
struct compat_23_sys_msgctl_args {
d967 1
a967 1
struct compat_23_sys_shmctl_args {
a1117 6
struct sys_getpeereid_args {
	syscallarg(int) fdes;
	syscallarg(uid_t *) euid;
	syscallarg(gid_t *) egid;
};

d1138 1
a1138 1
int	compat_25_sys_getfsstat	__P((struct proc *, void *, register_t *));
d1269 2
a1270 2
int	compat_25_sys_statfs	__P((struct proc *, void *, register_t *));
int	compat_25_sys_fstatfs	__P((struct proc *, void *, register_t *));
d1339 1
a1339 1
int	compat_23_sys___semctl	__P((struct proc *, void *, register_t *));
d1345 1
a1345 1
int	compat_23_sys_msgctl	__P((struct proc *, void *, register_t *));
d1353 1
a1353 1
int	compat_23_sys_shmctl	__P((struct proc *, void *, register_t *));
a1393 1
int	sys_getpeereid	__P((struct proc *, void *, register_t *));
@


1.43.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: syscallargs.h,v 1.43.2.2 2001/07/04 11:00:33 niklas Exp $	*/
d10 1
a10 15
#ifdef	syscallarg
#undef	syscallarg
#endif

#define	syscallarg(x)							\
	union {								\
		register_t pad;						\
		struct { x datum; } le;					\
		struct {						\
			int8_t pad[ (sizeof (register_t) < sizeof (x))	\
				? 0					\
				: sizeof (register_t) - sizeof (x)];	\
			x datum;					\
		} be;							\
	}
@


1.43.2.4
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.48 2002/02/22 20:37:45 drahn Exp 
a1137 52
struct sys_extattrctl_args {
	syscallarg(const char *) path;
	syscallarg(int) cmd;
	syscallarg(const char *) filename;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
};

struct sys_extattr_set_file_args {
	syscallarg(const char *) path;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_get_file_args {
	syscallarg(const char *) path;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_delete_file_args {
	syscallarg(const char *) path;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
};

struct sys_extattr_set_fd_args {
	syscallarg(int) fd;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_get_fd_args {
	syscallarg(int) fd;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
	syscallarg(void *) data;
	syscallarg(size_t) nbytes;
};

struct sys_extattr_delete_fd_args {
	syscallarg(int) fd;
	syscallarg(int) attrnamespace;
	syscallarg(const char *) attrname;
};

a1414 10
#ifdef UFS_EXTATTR
int	sys_extattrctl	__P((struct proc *, void *, register_t *));
int	sys_extattr_set_file	__P((struct proc *, void *, register_t *));
int	sys_extattr_get_file	__P((struct proc *, void *, register_t *));
int	sys_extattr_delete_file	__P((struct proc *, void *, register_t *));
int	sys_extattr_set_fd	__P((struct proc *, void *, register_t *));
int	sys_extattr_get_fd	__P((struct proc *, void *, register_t *));
int	sys_extattr_delete_fd	__P((struct proc *, void *, register_t *));
#else
#endif
@


1.43.2.5
log
@Merge in -current from roughly a week ago
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.49 2002/03/14 00:42:25 miod Exp 
d1194 43
a1236 46
int	sys_exit(struct proc *, void *, register_t *);
int	sys_fork(struct proc *, void *, register_t *);
int	sys_read(struct proc *, void *, register_t *);
int	sys_write(struct proc *, void *, register_t *);
int	sys_open(struct proc *, void *, register_t *);
int	sys_close(struct proc *, void *, register_t *);
int	sys_wait4(struct proc *, void *, register_t *);
int	compat_43_sys_creat(struct proc *, void *, register_t *);
int	sys_link(struct proc *, void *, register_t *);
int	sys_unlink(struct proc *, void *, register_t *);
int	sys_chdir(struct proc *, void *, register_t *);
int	sys_fchdir(struct proc *, void *, register_t *);
int	sys_mknod(struct proc *, void *, register_t *);
int	sys_chmod(struct proc *, void *, register_t *);
int	sys_chown(struct proc *, void *, register_t *);
int	sys_obreak(struct proc *, void *, register_t *);
int	compat_25_sys_getfsstat(struct proc *, void *, register_t *);
int	compat_43_sys_lseek(struct proc *, void *, register_t *);
int	sys_getpid(struct proc *, void *, register_t *);
int	sys_mount(struct proc *, void *, register_t *);
int	sys_unmount(struct proc *, void *, register_t *);
int	sys_setuid(struct proc *, void *, register_t *);
int	sys_getuid(struct proc *, void *, register_t *);
int	sys_geteuid(struct proc *, void *, register_t *);
#ifdef PTRACE
int	sys_ptrace(struct proc *, void *, register_t *);
#else
#endif
int	sys_recvmsg(struct proc *, void *, register_t *);
int	sys_sendmsg(struct proc *, void *, register_t *);
int	sys_recvfrom(struct proc *, void *, register_t *);
int	sys_accept(struct proc *, void *, register_t *);
int	sys_getpeername(struct proc *, void *, register_t *);
int	sys_getsockname(struct proc *, void *, register_t *);
int	sys_access(struct proc *, void *, register_t *);
int	sys_chflags(struct proc *, void *, register_t *);
int	sys_fchflags(struct proc *, void *, register_t *);
int	sys_sync(struct proc *, void *, register_t *);
int	sys_kill(struct proc *, void *, register_t *);
int	compat_43_sys_stat(struct proc *, void *, register_t *);
int	sys_getppid(struct proc *, void *, register_t *);
int	compat_43_sys_lstat(struct proc *, void *, register_t *);
int	sys_dup(struct proc *, void *, register_t *);
int	sys_opipe(struct proc *, void *, register_t *);
int	sys_getegid(struct proc *, void *, register_t *);
int	sys_profil(struct proc *, void *, register_t *);
d1238 1
a1238 1
int	sys_ktrace(struct proc *, void *, register_t *);
d1241 95
a1335 95
int	sys_sigaction(struct proc *, void *, register_t *);
int	sys_getgid(struct proc *, void *, register_t *);
int	sys_sigprocmask(struct proc *, void *, register_t *);
int	sys_getlogin(struct proc *, void *, register_t *);
int	sys_setlogin(struct proc *, void *, register_t *);
int	sys_acct(struct proc *, void *, register_t *);
int	sys_sigpending(struct proc *, void *, register_t *);
int	sys_sigaltstack(struct proc *, void *, register_t *);
int	sys_ioctl(struct proc *, void *, register_t *);
int	sys_reboot(struct proc *, void *, register_t *);
int	sys_revoke(struct proc *, void *, register_t *);
int	sys_symlink(struct proc *, void *, register_t *);
int	sys_readlink(struct proc *, void *, register_t *);
int	sys_execve(struct proc *, void *, register_t *);
int	sys_umask(struct proc *, void *, register_t *);
int	sys_chroot(struct proc *, void *, register_t *);
int	compat_43_sys_fstat(struct proc *, void *, register_t *);
int	compat_43_sys_getkerninfo(struct proc *, void *, register_t *);
int	compat_43_sys_getpagesize(struct proc *, void *, register_t *);
int	sys_omsync(struct proc *, void *, register_t *);
int	sys_vfork(struct proc *, void *, register_t *);
int	sys_sbrk(struct proc *, void *, register_t *);
int	sys_sstk(struct proc *, void *, register_t *);
int	compat_43_sys_mmap(struct proc *, void *, register_t *);
int	sys_ovadvise(struct proc *, void *, register_t *);
int	sys_munmap(struct proc *, void *, register_t *);
int	sys_mprotect(struct proc *, void *, register_t *);
int	sys_madvise(struct proc *, void *, register_t *);
int	sys_mincore(struct proc *, void *, register_t *);
int	sys_getgroups(struct proc *, void *, register_t *);
int	sys_setgroups(struct proc *, void *, register_t *);
int	sys_getpgrp(struct proc *, void *, register_t *);
int	sys_setpgid(struct proc *, void *, register_t *);
int	sys_setitimer(struct proc *, void *, register_t *);
int	compat_43_sys_wait(struct proc *, void *, register_t *);
int	sys_swapon(struct proc *, void *, register_t *);
int	sys_getitimer(struct proc *, void *, register_t *);
int	compat_43_sys_gethostname(struct proc *, void *, register_t *);
int	compat_43_sys_sethostname(struct proc *, void *, register_t *);
int	compat_43_sys_getdtablesize(struct proc *, void *, register_t *);
int	sys_dup2(struct proc *, void *, register_t *);
int	sys_fcntl(struct proc *, void *, register_t *);
int	sys_select(struct proc *, void *, register_t *);
int	sys_fsync(struct proc *, void *, register_t *);
int	sys_setpriority(struct proc *, void *, register_t *);
int	sys_socket(struct proc *, void *, register_t *);
int	sys_connect(struct proc *, void *, register_t *);
int	compat_43_sys_accept(struct proc *, void *, register_t *);
int	sys_getpriority(struct proc *, void *, register_t *);
int	compat_43_sys_send(struct proc *, void *, register_t *);
int	compat_43_sys_recv(struct proc *, void *, register_t *);
int	sys_sigreturn(struct proc *, void *, register_t *);
int	sys_bind(struct proc *, void *, register_t *);
int	sys_setsockopt(struct proc *, void *, register_t *);
int	sys_listen(struct proc *, void *, register_t *);
int	compat_43_sys_sigvec(struct proc *, void *, register_t *);
int	compat_43_sys_sigblock(struct proc *, void *, register_t *);
int	compat_43_sys_sigsetmask(struct proc *, void *, register_t *);
int	sys_sigsuspend(struct proc *, void *, register_t *);
int	compat_43_sys_sigstack(struct proc *, void *, register_t *);
int	compat_43_sys_recvmsg(struct proc *, void *, register_t *);
int	compat_43_sys_sendmsg(struct proc *, void *, register_t *);
int	sys_gettimeofday(struct proc *, void *, register_t *);
int	sys_getrusage(struct proc *, void *, register_t *);
int	sys_getsockopt(struct proc *, void *, register_t *);
int	sys_readv(struct proc *, void *, register_t *);
int	sys_writev(struct proc *, void *, register_t *);
int	sys_settimeofday(struct proc *, void *, register_t *);
int	sys_fchown(struct proc *, void *, register_t *);
int	sys_fchmod(struct proc *, void *, register_t *);
int	compat_43_sys_recvfrom(struct proc *, void *, register_t *);
int	compat_43_sys_setreuid(struct proc *, void *, register_t *);
int	compat_43_sys_setregid(struct proc *, void *, register_t *);
int	sys_rename(struct proc *, void *, register_t *);
int	compat_43_sys_truncate(struct proc *, void *, register_t *);
int	compat_43_sys_ftruncate(struct proc *, void *, register_t *);
int	sys_flock(struct proc *, void *, register_t *);
int	sys_mkfifo(struct proc *, void *, register_t *);
int	sys_sendto(struct proc *, void *, register_t *);
int	sys_shutdown(struct proc *, void *, register_t *);
int	sys_socketpair(struct proc *, void *, register_t *);
int	sys_mkdir(struct proc *, void *, register_t *);
int	sys_rmdir(struct proc *, void *, register_t *);
int	sys_utimes(struct proc *, void *, register_t *);
int	sys_adjtime(struct proc *, void *, register_t *);
int	compat_43_sys_getpeername(struct proc *, void *, register_t *);
int	compat_43_sys_gethostid(struct proc *, void *, register_t *);
int	compat_43_sys_sethostid(struct proc *, void *, register_t *);
int	compat_43_sys_getrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_setrlimit(struct proc *, void *, register_t *);
int	compat_43_sys_killpg(struct proc *, void *, register_t *);
int	sys_setsid(struct proc *, void *, register_t *);
int	sys_quotactl(struct proc *, void *, register_t *);
int	compat_43_sys_quota(struct proc *, void *, register_t *);
int	compat_43_sys_getsockname(struct proc *, void *, register_t *);
d1337 1
a1337 1
int	sys_nfssvc(struct proc *, void *, register_t *);
d1340 8
a1347 8
int	compat_43_sys_getdirentries(struct proc *, void *, register_t *);
int	compat_25_sys_statfs(struct proc *, void *, register_t *);
int	compat_25_sys_fstatfs(struct proc *, void *, register_t *);
int	sys_getfh(struct proc *, void *, register_t *);
int	compat_09_sys_getdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_setdomainname(struct proc *, void *, register_t *);
int	compat_09_sys_uname(struct proc *, void *, register_t *);
int	sys_sysarch(struct proc *, void *, register_t *);
d1349 1
a1349 1
int	compat_10_sys_semsys(struct proc *, void *, register_t *);
d1353 1
a1353 1
int	compat_10_sys_msgsys(struct proc *, void *, register_t *);
d1357 1
a1357 1
int	compat_10_sys_shmsys(struct proc *, void *, register_t *);
d1360 2
a1361 2
int	sys_pread(struct proc *, void *, register_t *);
int	sys_pwrite(struct proc *, void *, register_t *);
d1363 2
a1364 2
int	sys_ntp_gettime(struct proc *, void *, register_t *);
int	sys_ntp_adjtime(struct proc *, void *, register_t *);
d1367 3
a1369 3
int	sys_setgid(struct proc *, void *, register_t *);
int	sys_setegid(struct proc *, void *, register_t *);
int	sys_seteuid(struct proc *, void *, register_t *);
d1371 4
a1374 4
int	lfs_bmapv(struct proc *, void *, register_t *);
int	lfs_markv(struct proc *, void *, register_t *);
int	lfs_segclean(struct proc *, void *, register_t *);
int	lfs_segwait(struct proc *, void *, register_t *);
d1377 20
a1396 20
int	sys_stat(struct proc *, void *, register_t *);
int	sys_fstat(struct proc *, void *, register_t *);
int	sys_lstat(struct proc *, void *, register_t *);
int	sys_pathconf(struct proc *, void *, register_t *);
int	sys_fpathconf(struct proc *, void *, register_t *);
int	sys_swapctl(struct proc *, void *, register_t *);
int	sys_getrlimit(struct proc *, void *, register_t *);
int	sys_setrlimit(struct proc *, void *, register_t *);
int	sys_getdirentries(struct proc *, void *, register_t *);
int	sys_mmap(struct proc *, void *, register_t *);
int	sys_lseek(struct proc *, void *, register_t *);
int	sys_truncate(struct proc *, void *, register_t *);
int	sys_ftruncate(struct proc *, void *, register_t *);
int	sys___sysctl(struct proc *, void *, register_t *);
int	sys_mlock(struct proc *, void *, register_t *);
int	sys_munlock(struct proc *, void *, register_t *);
int	sys_undelete(struct proc *, void *, register_t *);
int	sys_futimes(struct proc *, void *, register_t *);
int	sys_getpgid(struct proc *, void *, register_t *);
int	sys_xfspioctl(struct proc *, void *, register_t *);
d1398 10
a1407 10
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
int	sys_lkmnosys(struct proc *, void *, register_t *);
d1411 3
a1413 3
int	compat_23_sys___semctl(struct proc *, void *, register_t *);
int	sys_semget(struct proc *, void *, register_t *);
int	sys_semop(struct proc *, void *, register_t *);
d1417 4
a1420 4
int	compat_23_sys_msgctl(struct proc *, void *, register_t *);
int	sys_msgget(struct proc *, void *, register_t *);
int	sys_msgsnd(struct proc *, void *, register_t *);
int	sys_msgrcv(struct proc *, void *, register_t *);
d1424 4
a1427 4
int	sys_shmat(struct proc *, void *, register_t *);
int	compat_23_sys_shmctl(struct proc *, void *, register_t *);
int	sys_shmdt(struct proc *, void *, register_t *);
int	sys_shmget(struct proc *, void *, register_t *);
d1430 11
a1440 11
int	sys_clock_gettime(struct proc *, void *, register_t *);
int	sys_clock_settime(struct proc *, void *, register_t *);
int	sys_clock_getres(struct proc *, void *, register_t *);
int	sys_nanosleep(struct proc *, void *, register_t *);
int	sys_minherit(struct proc *, void *, register_t *);
int	sys_rfork(struct proc *, void *, register_t *);
int	sys_poll(struct proc *, void *, register_t *);
int	sys_issetugid(struct proc *, void *, register_t *);
int	sys_lchown(struct proc *, void *, register_t *);
int	sys_getsid(struct proc *, void *, register_t *);
int	sys_msync(struct proc *, void *, register_t *);
d1442 1
a1442 1
int	sys___semctl(struct proc *, void *, register_t *);
d1446 1
a1446 1
int	sys_shmctl(struct proc *, void *, register_t *);
d1450 1
a1450 1
int	sys_msgctl(struct proc *, void *, register_t *);
d1453 14
a1466 14
int	sys_getfsstat(struct proc *, void *, register_t *);
int	sys_statfs(struct proc *, void *, register_t *);
int	sys_fstatfs(struct proc *, void *, register_t *);
int	sys_pipe(struct proc *, void *, register_t *);
int	sys_fhopen(struct proc *, void *, register_t *);
int	sys_fhstat(struct proc *, void *, register_t *);
int	sys_fhstatfs(struct proc *, void *, register_t *);
int	sys_preadv(struct proc *, void *, register_t *);
int	sys_pwritev(struct proc *, void *, register_t *);
int	sys_kqueue(struct proc *, void *, register_t *);
int	sys_kevent(struct proc *, void *, register_t *);
int	sys_mlockall(struct proc *, void *, register_t *);
int	sys_munlockall(struct proc *, void *, register_t *);
int	sys_getpeereid(struct proc *, void *, register_t *);
d1468 7
a1474 7
int	sys_extattrctl(struct proc *, void *, register_t *);
int	sys_extattr_set_file(struct proc *, void *, register_t *);
int	sys_extattr_get_file(struct proc *, void *, register_t *);
int	sys_extattr_delete_file(struct proc *, void *, register_t *);
int	sys_extattr_set_fd(struct proc *, void *, register_t *);
int	sys_extattr_get_fd(struct proc *, void *, register_t *);
int	sys_extattr_delete_fd(struct proc *, void *, register_t *);
@


1.43.2.6
log
@Sync the SMP branch with 3.3
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.52 2003/01/30 03:29:49 millert Exp 
d572 3
a574 3
struct sys_setreuid_args {
	syscallarg(uid_t) ruid;
	syscallarg(uid_t) euid;
d577 3
a579 3
struct sys_setregid_args {
	syscallarg(gid_t) rgid;
	syscallarg(gid_t) egid;
d771 8
a1189 24
struct sys_getresuid_args {
	syscallarg(uid_t *) ruid;
	syscallarg(uid_t *) euid;
	syscallarg(uid_t *) suid;
};

struct sys_setresuid_args {
	syscallarg(uid_t) ruid;
	syscallarg(uid_t) euid;
	syscallarg(uid_t) suid;
};

struct sys_getresgid_args {
	syscallarg(gid_t *) rgid;
	syscallarg(gid_t *) egid;
	syscallarg(gid_t *) sgid;
};

struct sys_setresgid_args {
	syscallarg(gid_t) rgid;
	syscallarg(gid_t) egid;
	syscallarg(gid_t) sgid;
};

d1315 2
a1316 2
int	sys_setreuid(struct proc *, void *, register_t *);
int	sys_setregid(struct proc *, void *, register_t *);
d1365 5
a1479 4
int	sys_getresuid(struct proc *, void *, register_t *);
int	sys_setresuid(struct proc *, void *, register_t *);
int	sys_getresgid(struct proc *, void *, register_t *);
int	sys_setresgid(struct proc *, void *, register_t *);
@


1.43.2.7
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: syscallargs.h,v 1.43.2.6 2003/03/28 00:41:30 niklas Exp $	*/
d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.58 2003/05/10 17:53:58 miod Exp 
d304 1
a304 1
struct compat_25_sys_omsync_args {
d374 1
a374 1
struct compat_25_sys_swapon_args {
a1205 18
struct sys_omquery_args {
	syscallarg(int) flags;
	syscallarg(void **) addr;
	syscallarg(size_t) size;
	syscallarg(int) fd;
	syscallarg(off_t) off;
};

struct sys_mquery_args {
	syscallarg(void *) addr;
	syscallarg(size_t) len;
	syscallarg(int) prot;
	syscallarg(int) flags;
	syscallarg(int) fd;
	syscallarg(long) pad;
	syscallarg(off_t) pos;
};

d1279 1
a1279 1
int	compat_25_sys_omsync(struct proc *, void *, register_t *);
d1295 1
a1295 1
int	compat_25_sys_swapon(struct proc *, void *, register_t *);
a1494 2
int	sys_omquery(struct proc *, void *, register_t *);
int	sys_mquery(struct proc *, void *, register_t *);
@


1.43.2.8
log
@Biglock!  Most of the logic
comes from NetBSD.
Also a lot of fixes, enough to get a dual cpu machine actually run MP for a
very short while (we are just talking about seconds) before starving out one
of the cpus.  More coming very soon.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.38.2.6 2003/05/13 19:21:28 ho Exp 
@


1.43.2.9
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d7 1
a7 1
 * created from;	OpenBSD
d53 1
a53 1
	syscallarg(pid_t) pid;
d248 3
a250 3
struct sys_osigaltstack_args {
	syscallarg(const struct osigaltstack *) nss;
	syscallarg(struct osigaltstack *) oss;
d418 1
a418 1
	syscallarg(id_t) who;
d442 1
a442 1
	syscallarg(id_t) who;
d1021 1
a1021 1
	syscallarg(u_int) nfds;
d1206 8
a1223 9
struct sys_closefrom_args {
	syscallarg(int) fd;
};

struct sys_sigaltstack_args {
	syscallarg(const struct sigaltstack *) nss;
	syscallarg(struct sigaltstack *) oss;
};

d1285 1
a1285 1
int	sys_osigaltstack(struct proc *, void *, register_t *);
d1385 1
a1385 1
#if defined(SYSVSEM) && !defined(alpha) && !defined(__sparc64__)
d1389 1
a1389 1
#if defined(SYSVMSG) && !defined(alpha) && !defined(__sparc64__)
d1393 1
a1393 1
#if defined(SYSVSHM) && !defined(alpha) && !defined(__sparc64__)
d1513 1
a1514 2
int	sys_closefrom(struct proc *, void *, register_t *);
int	sys_sigaltstack(struct proc *, void *, register_t *);
@


1.43.2.10
log
@Merge with the trunk
@
text
@d935 1
a935 1
struct compat_35_sys_semop_args {
d983 1
a983 1
struct compat_35_sys_shmget_args {
a1224 12
struct sys_shmget_args {
	syscallarg(key_t) key;
	syscallarg(size_t) size;
	syscallarg(int) shmflg;
};

struct sys_semop_args {
	syscallarg(int) semid;
	syscallarg(struct sembuf *) sops;
	syscallarg(size_t) nsops;
};

a1283 1
#ifdef ACCOUNTING
a1284 2
#else
#endif
d1386 1
a1386 1
#if defined(SYSVSEM) && !defined(__LP64__)
d1390 1
a1390 1
#if defined(SYSVMSG) && !defined(__LP64__)
d1394 1
a1394 1
#if defined(SYSVSHM) && !defined(__LP64__)
d1446 1
a1446 1
int	compat_35_sys_semop(struct proc *, void *, register_t *);
d1460 1
a1460 1
int	compat_35_sys_shmget(struct proc *, void *, register_t *);
a1516 8
#ifdef SYSVSHM
int	sys_shmget(struct proc *, void *, register_t *);
#else
#endif
#ifdef SYSVSEM
int	sys_semop(struct proc *, void *, register_t *);
#else
#endif
@


1.42
log
@update to use new checkexp vfs operation
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.37 1999/06/07 07:17:42 deraadt Exp 
@


1.41
log
@regen
@
text
@d1067 15
a1238 1
#if defined(NFSCLIENT) || defined(NFSSERVER)
a1239 2
#else
#endif
d1352 3
@


1.40
log
@sync
@
text
@@


1.39
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.36 1999/05/31 17:34:47 millert Exp 
d1063 4
d1111 1
a1111 1
int	sys_pipe	__P((struct proc *, void *, register_t *));
d1339 1
@


1.38
log
@New struct statfs with mount options.  NOTE: this replaces statfs(2),
fstatfs(2), and getfsstat(2) so you will need to build a new kernel
before doing a "make build" or you will get "unimplemented syscall" errors.

The new struct statfs has the following featuires:
o Has a u_int32_t flags field--now softdep can have a real flag.

o Uses u_int32_t instead of longs (nicer on the alpha).  Note: the man
page used to lie about setting invalid/unused fields to -1.  SunOS does
that but our code never has.

o Gets rid of f_type completely.  It hasn't been used since NetBSD 0.9
and having it there but always 0 is confusing.  It is conceivable
that this may cause some old code to not compile but that is better
than silently breaking.

o Adds a mount_info union that contains the FSTYPE_args struct.  This
means that "mount" can now tell you all the options a filesystem was
mounted with.  This is especially nice for NFS.

Other changes:
o The linux statfs emulation didn't convert between BSD fs names
  and linux f_type numbers.  Now it does, since the BSD f_type
  number is useless to linux apps (and has been removed anyway)

o FreeBSD's struct statfs is different from our (both old and new)
and thus needs conversion.  Previously, the OpenBSD syscalls
were used without any real translation.

o mount(8) will now show extra info when invoked with no arguments.
However, to see *everything* you need to use the -v (verbose) flag.
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.35 1999/05/22 21:23:40 weingart Exp 
@


1.37
log
@Sync syscalls.master
@
text
@d88 1
a88 1
struct sys_getfsstat_args {
d688 1
a688 1
struct sys_statfs_args {
d690 1
a690 1
	syscallarg(struct statfs *) buf;
d693 1
a693 1
struct sys_fstatfs_args {
d695 1
a695 1
	syscallarg(struct statfs *) buf;
d1047 16
d1083 1
a1083 1
int	sys_getfsstat	__P((struct proc *, void *, register_t *));
d1218 2
a1219 2
int	sys_statfs	__P((struct proc *, void *, register_t *));
int	sys_fstatfs	__P((struct proc *, void *, register_t *));
d1332 3
@


1.36
log
@forgot to regen after socklen_t changes
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.34 1999/02/15 21:28:23 millert Exp 
d813 6
d1244 1
@


1.35
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.32 1998/11/18 01:14:25 art Exp 
d141 1
a141 1
	syscallarg(int *) fromlenaddr;
d147 1
a147 1
	syscallarg(int *) anamelen;
d159 1
a159 1
	syscallarg(int *) alen;
d417 1
a417 1
	syscallarg(int) namelen;
d452 1
a452 1
	syscallarg(int) namelen;
d460 1
a460 1
	syscallarg(int) valsize;
d523 1
a523 1
	syscallarg(int *) avalsize;
d604 1
a604 1
	syscallarg(int) tolen;
d641 1
a641 1
	syscallarg(int *) alen;
@


1.34
log
@Sync with previous commit of syscall.master that did not make it into the changelogs. (enable xfspioctl even when XFS is not defined)
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.31 1998/09/17 20:54:04 art Exp 
d1299 1
d1303 1
d1307 1
@


1.33
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.30 1998/08/30 18:18:00 deraadt Exp 
a1250 1
#ifdef XFS
a1251 2
#else
#endif
@


1.32
log
@regen with xfspioctl
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.29 1998/08/30 18:04:21 art Exp 
@


1.31
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.28 1998/06/12 08:31:11 deraadt Exp 
d891 8
d1251 4
@


1.30
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.27 1998/06/11 18:29:53 deraadt Exp 
d1288 1
d1290 2
d1293 2
d1296 1
@


1.29
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.26 1998/06/02 05:22:29 deraadt Exp 
d891 1
a891 1
struct sys___semctl_args {
d914 1
a914 1
struct sys_msgctl_args {
d917 1
a917 1
	syscallarg(struct msqid_ds *) buf;
d946 1
a946 1
struct sys_shmctl_args {
d949 1
a949 1
	syscallarg(struct shmid_ds *) buf;
d1014 19
d1257 1
a1257 1
int	sys___semctl	__P((struct proc *, void *, register_t *));
d1264 1
a1264 1
int	sys_msgctl	__P((struct proc *, void *, register_t *));
d1272 1
a1272 1
int	sys_shmctl	__P((struct proc *, void *, register_t *));
d1288 3
@


1.28
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.25 1998/05/11 06:13:45 deraadt Exp 
d869 1
a869 1
	syscallarg(void *) addr;
d874 1
a874 1
	syscallarg(void *) addr;
@


1.27
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.24 1998/04/25 07:14:45 deraadt Exp 
d927 1
a927 1
	syscallarg(void *) msgp;
d942 1
a942 1
	syscallarg(void *) shmaddr;
d953 1
a953 1
	syscallarg(void *) shmaddr;
@


1.26
log
@regen
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.23 1998/02/16 21:56:28 millert Exp 
d261 1
a261 1
	syscallarg(int) count;
@


1.25
log
@sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.22 1998/02/10 08:44:07 deraadt Exp 
d169 1
a169 1
	syscallarg(u_long) flags;
d174 1
a174 1
	syscallarg(u_long) flags;
@


1.24
log
@Sync
@
text
@d7 1
a7 1
 * created from;	OpenBSD: syscalls.master,v 1.21 1998/02/08 22:37:01 tholo Exp 
d31 1
a31 1
	syscallarg(mode_t) mode;
d47 1
a47 1
	syscallarg(mode_t) mode;
d69 1
a69 1
	syscallarg(mode_t) mode;
d75 1
a75 1
	syscallarg(mode_t) mode;
d271 1
a271 1
	syscallarg(mode_t) newmask;
d551 1
a551 1
	syscallarg(mode_t) mode;
d595 1
a595 1
	syscallarg(mode_t) mode;
d621 1
a621 1
	syscallarg(mode_t) mode;
@


1.23
log
@sync
@
text
@d1 2
d7 1
a7 1
 * created from	OpenBSD: syscalls.master,v 1.20 1998/01/02 05:32:51 deraadt Exp 
d18 2
a19 2
	syscallarg(char *) buf;
	syscallarg(u_int) nbyte;
d24 2
a25 2
	syscallarg(char *) buf;
	syscallarg(u_int) nbyte;
d29 1
a29 1
	syscallarg(char *) path;
d31 1
a31 1
	syscallarg(int) mode;
d46 2
a47 2
	syscallarg(char *) path;
	syscallarg(int) mode;
d51 2
a52 2
	syscallarg(char *) path;
	syscallarg(char *) link;
d56 1
a56 1
	syscallarg(char *) path;
d60 1
a60 1
	syscallarg(char *) path;
d68 3
a70 3
	syscallarg(char *) path;
	syscallarg(int) mode;
	syscallarg(int) dev;
d74 2
a75 2
	syscallarg(char *) path;
	syscallarg(int) mode;
d79 3
a81 3
	syscallarg(char *) path;
	syscallarg(int) uid;
	syscallarg(int) gid;
d101 2
a102 2
	syscallarg(char *) type;
	syscallarg(char *) path;
d104 1
a104 1
	syscallarg(caddr_t) data;
d108 1
a108 1
	syscallarg(char *) path;
d131 1
a131 1
	syscallarg(caddr_t) msg;
d137 1
a137 1
	syscallarg(caddr_t) buf;
d140 1
a140 1
	syscallarg(caddr_t) from;
d146 1
a146 1
	syscallarg(caddr_t) name;
d152 1
a152 1
	syscallarg(caddr_t) asa;
d158 1
a158 1
	syscallarg(caddr_t) asa;
d163 1
a163 1
	syscallarg(char *) path;
d168 2
a169 2
	syscallarg(char *) path;
	syscallarg(int) flags;
d174 1
a174 1
	syscallarg(int) flags;
d183 1
a183 1
	syscallarg(char *) path;
d193 1
a193 1
	syscallarg(u_int) fd;
d197 1
a197 1
	syscallarg(char *) samples;
d204 1
a204 1
	syscallarg(char *) fname;
d207 1
a207 1
	syscallarg(int) pid;
d212 1
a212 1
	syscallarg(struct sigaction *) nsa;
d227 1
a227 1
	syscallarg(char *) namebuf;
d231 1
a231 1
	syscallarg(char *) path;
d235 1
a235 1
	syscallarg(struct sigaltstack *) nss;
d242 1
a242 1
	syscallarg(caddr_t) data;
d250 1
a250 1
	syscallarg(char *) path;
d254 2
a255 2
	syscallarg(char *) path;
	syscallarg(char *) link;
d259 1
a259 1
	syscallarg(char *) path;
d265 3
a267 3
	syscallarg(char *) path;
	syscallarg(char **) argp;
	syscallarg(char **) envp;
d271 1
a271 1
	syscallarg(int) newmask;
d275 1
a275 1
	syscallarg(char *) path;
d340 1
a340 1
	syscallarg(u_int) gidsetsize;
d345 2
a346 2
	syscallarg(u_int) gidsetsize;
	syscallarg(gid_t *) gidset;
d350 1
a350 1
	syscallarg(int) pid;
d355 2
a356 2
	syscallarg(u_int) which;
	syscallarg(struct itimerval *) itv;
d361 1
a361 1
	syscallarg(char *) name;
d365 1
a365 1
	syscallarg(u_int) which;
d380 2
a381 2
	syscallarg(u_int) from;
	syscallarg(u_int) to;
d391 1
a391 1
	syscallarg(u_int) nd;
d416 1
a416 1
	syscallarg(caddr_t) name;
d451 1
a451 1
	syscallarg(caddr_t) name;
d459 1
a459 1
	syscallarg(caddr_t) val;
d522 1
a522 1
	syscallarg(caddr_t) val;
d528 2
a529 2
	syscallarg(struct iovec *) iovp;
	syscallarg(u_int) iovcnt;
d534 2
a535 2
	syscallarg(struct iovec *) iovp;
	syscallarg(u_int) iovcnt;
d539 2
a540 2
	syscallarg(struct timeval *) tv;
	syscallarg(struct timezone *) tzp;
d545 2
a546 2
	syscallarg(int) uid;
	syscallarg(int) gid;
d551 1
a551 1
	syscallarg(int) mode;
d574 2
a575 2
	syscallarg(char *) from;
	syscallarg(char *) to;
d579 1
a579 1
	syscallarg(char *) path;
d594 2
a595 2
	syscallarg(char *) path;
	syscallarg(int) mode;
d600 1
a600 1
	syscallarg(caddr_t) buf;
d603 1
a603 1
	syscallarg(caddr_t) to;
d620 2
a621 2
	syscallarg(char *) path;
	syscallarg(int) mode;
d625 1
a625 1
	syscallarg(char *) path;
d629 2
a630 2
	syscallarg(char *) path;
	syscallarg(struct timeval *) tptr;
d634 1
a634 1
	syscallarg(struct timeval *) delta;
d649 1
a649 1
	syscallarg(u_int) which;
d654 1
a654 1
	syscallarg(u_int) which;
d664 1
a664 1
	syscallarg(char *) path;
d667 1
a667 1
	syscallarg(caddr_t) arg;
d678 1
a678 1
	syscallarg(caddr_t) argp;
d684 1
a684 1
	syscallarg(u_int) count;
d689 1
a689 1
	syscallarg(char *) path;
d699 1
a699 1
	syscallarg(char *) fname;
d747 1
a747 1
	syscallarg(struct timex *) tp;
d789 1
a789 1
	syscallarg(char *) path;
d799 1
a799 1
	syscallarg(char *) path;
d804 1
a804 1
	syscallarg(char *) path;
d814 1
a814 1
	syscallarg(u_int) which;
d819 2
a820 2
	syscallarg(u_int) which;
	syscallarg(struct rlimit *) rlp;
d826 1
a826 1
	syscallarg(u_int) count;
d848 1
a848 1
	syscallarg(char *) path;
d879 1
a879 1
	syscallarg(char *) path;
d884 1
a884 1
	syscallarg(struct timeval *) tptr;
d999 3
a1001 3
	syscallarg(char *) path;
	syscallarg(int) uid;
	syscallarg(int) gid;
a1017 1
int	sys_nosys	__P((struct proc *, void *, register_t *));
a1214 1
int	sys_nosys	__P((struct proc *, void *, register_t *));
@


1.22
log
@sync
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.19 1997/11/14 20:56:03 deraadt Exp 
@


1.21
log
@sync
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.18 1997/11/13 18:35:31 deraadt Exp 
d315 1
a315 1
	syscallarg(caddr_t) addr;
d320 1
a320 1
	syscallarg(caddr_t) addr;
d326 1
a326 1
	syscallarg(caddr_t) addr;
d332 1
a332 1
	syscallarg(caddr_t) addr;
d829 1
a829 1
	syscallarg(caddr_t) addr;
d867 1
a867 1
	syscallarg(caddr_t) addr;
d872 1
a872 1
	syscallarg(caddr_t) addr;
d981 1
a981 1
	syscallarg(caddr_t) addr;
@


1.20
log
@sync
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.17 1997/11/13 07:11:12 deraadt Exp 
d288 1
a288 1
struct sys_msync_args {
d1006 6
d1083 1
a1083 1
int	sys_msync	__P((struct proc *, void *, register_t *));
d1268 1
@


1.19
log
@repair all that gunk
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.16 1997/08/29 20:44:24 kstailey Exp 
d1002 4
d1261 1
@


1.18
log
@sync to syscalls.master
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.15 1997/05/30 21:43:33 kstailey Exp 
d744 1
a744 1
struct ntp_gettime_args {
d748 1
a748 1
struct ntp_adjtime_args {
d1181 2
a1182 2
int	ntp_gettime	__P((struct proc *, void *, register_t *));
int	ntp_adjtime	__P((struct proc *, void *, register_t *));
@


1.17
log
@add getpgid(2) from NetBSD
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.14 1997/04/20 20:48:27 tholo Exp 
@


1.16
log
@Add new POSIX 1003.1b related syscalls; from pk@@NetBSD
@
text
@d885 4
d1213 1
@


1.15
log
@Regen.
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.13 1997/01/26 05:18:27 downsj Exp 
d956 20
d1243 4
@


1.14
log
@sync
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.12 1996/10/29 03:46:28 deraadt Exp 
d972 6
d1227 1
@


1.13
log
@update
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.11 1996/10/04 00:59:19 deraadt Exp 
@


1.12
log
@sync
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.10 1996/08/25 09:51:34 deraadt Exp 
d1130 1
a1130 1
#ifdef NFSCLIENT
@


1.11
log
@sync to syscalls.master
@
text
@d5 1
a5 1
 * created from	OpenBSD: syscalls.master,v 1.9 1996/05/18 08:53:10 deraadt Exp 
d1220 1
@


1.10
log
@sync with master
@
text
@d5 1
a5 1
 * created from	OpenBSD
d966 6
d1219 1
@


1.9
log
@First argument to profil(2) should be `char *', not `caddr_t'.
@
text
@d880 5
d1176 1
@


1.8
log
@NetBSD 960317 merge
@
text
@d195 1
a195 1
	syscallarg(caddr_t) samples;
@


1.7
log
@ran makesyscalls.sh
@
text
@d5 1
a5 1
 * created from	NetBSD: syscalls.master,v 1.30 1995/11/22 23:07:29 cgd Exp 
d744 1
a744 1
struct sys_ntp_adjtime_args {
d748 2
a749 2
struct sys_ntp_gettime_args {
	syscallarg(struct ntptimeval *) tp;
d1139 5
a1143 2
int	sys_ntp_adjtime	__P((struct proc *, void *, register_t *));
int	sys_ntp_gettime	__P((struct proc *, void *, register_t *));
@


1.6
log
@Merge of NetBSD 960317
@
text
@d5 1
a5 1
 * created from	NetBSD: syscalls.master,v 1.31 1996/02/27 04:20:41 jonathan Exp 
d744 1
a744 1
struct ntp_gettime_args {
d748 2
a749 2
struct ntp_adjtime_args {
	syscallarg(struct timex *) tp;
d1139 2
a1140 2
int	ntp_gettime	__P((struct proc *, void *, register_t *));
int	ntp_adjtime	__P((struct proc *, void *, register_t *));
@


1.5
log
@Add kernel PLL for system clock
Add ntp_adjtime() and ntp_gettime() system calls
Mostly stolen from FreeBSD
@
text
@d5 1
a5 1
 * created from	NetBSD: syscalls.master,v 1.30 1995/11/22 23:07:29 cgd Exp 
d744 1
a744 1
struct sys_ntp_adjtime_args {
d748 2
a749 2
struct sys_ntp_gettime_args {
	syscallarg(struct ntptimeval *) tp;
d1139 2
a1140 2
int	sys_ntp_adjtime	__P((struct proc *, void *, register_t *));
int	sys_ntp_gettime	__P((struct proc *, void *, register_t *));
@


1.4
log
@plan9-like rfork() implimentation by me based on some earlier incomplete
work by rminnich@@Sarnoff.COM. still needs RFNOWAIT support.
@
text
@d744 8
d1139 2
@


1.3
log
@add minherit() system call
@
text
@d949 4
d1193 1
@


1.2
log
@update for new syscalls.master
@
text
@d943 6
d1188 1
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
 * created from	NetBSD: syscalls.master,v 1.29 1995/10/10 01:32:53 mycroft Exp 
d196 2
a197 2
	syscallarg(u_int) size;
	syscallarg(u_int) offset;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
