head	1.34;
access;
symbols
	OPENBSD_6_2:1.34.0.2
	OPENBSD_6_2_BASE:1.34
	OPENBSD_6_1:1.33.0.4
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.32.0.2
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.30.0.2
	OPENBSD_5_9_BASE:1.30
	OPENBSD_5_8:1.28.0.12
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.4
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.28.0.8
	OPENBSD_5_6_BASE:1.28
	OPENBSD_5_5:1.28.0.6
	OPENBSD_5_5_BASE:1.28
	OPENBSD_5_4:1.28.0.2
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.27.0.6
	OPENBSD_5_3_BASE:1.27
	OPENBSD_5_2:1.27.0.4
	OPENBSD_5_2_BASE:1.27
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.2
	OPENBSD_5_0:1.26.0.2
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.25.0.2
	OPENBSD_4_9_BASE:1.25
	OPENBSD_4_8:1.24.0.2
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.23.0.2
	OPENBSD_4_7_BASE:1.23
	OPENBSD_4_6:1.22.0.6
	OPENBSD_4_6_BASE:1.22
	OPENBSD_4_5:1.22.0.2
	OPENBSD_4_5_BASE:1.22
	OPENBSD_4_4:1.21.0.2
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.20.0.4
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.16.0.8
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.6
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.4
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.2
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.9
	UBC:1.7.0.4
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.16
	OPENBSD_2_8:1.6.0.14
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.12
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.10
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.8
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.6
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.34
date	2017.08.29.02.51.27;	author deraadt;	state Exp;
branches;
next	1.33;
commitid	rqeb3Cn0JHXrssFn;

1.33
date	2016.09.16.03.21.16;	author dlg;	state Exp;
branches;
next	1.32;
commitid	qpxurnuozCzNjzBV;

1.32
date	2016.04.29.14.40.36;	author beck;	state Exp;
branches;
next	1.31;
commitid	p3EbVWCYrcYkiFMB;

1.31
date	2016.04.28.14.25.08;	author beck;	state Exp;
branches;
next	1.30;
commitid	0n3rYqVGfgJRKpEF;

1.30
date	2015.12.06.17.50.21;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	fXd8HOPcFESXsWp4;

1.29
date	2015.11.02.16.31.55;	author semarie;	state Exp;
branches;
next	1.28;
commitid	PyvdcQVr9G4daVnG;

1.28
date	2013.03.27.01.56.50;	author tedu;	state Exp;
branches;
next	1.27;

1.27
date	2011.09.30.03.43.27;	author guenther;	state Exp;
branches;
next	1.26;

1.26
date	2011.07.07.23.45.00;	author matthew;	state Exp;
branches;
next	1.25;

1.25
date	2010.09.09.10.37.04;	author thib;	state Exp;
branches;
next	1.24;

1.24
date	2010.05.19.08.31.23;	author thib;	state Exp;
branches;
next	1.23;

1.23
date	2009.08.12.16.42.24;	author beck;	state Exp;
branches;
next	1.22;

1.22
date	2008.08.29.08.57.28;	author otto;	state Exp;
branches;
next	1.21;

1.21
date	2008.07.05.12.56.52;	author thib;	state Exp;
branches;
next	1.20;

1.20
date	2007.08.07.07.41.59;	author thib;	state Exp;
branches;
next	1.19;

1.19
date	2007.06.02.01.34.50;	author thib;	state Exp;
branches;
next	1.18;

1.18
date	2007.05.30.04.27.43;	author beck;	state Exp;
branches;
next	1.17;

1.17
date	2007.05.29.05.28.54;	author beck;	state Exp;
branches;
next	1.16;

1.16
date	2005.07.20.17.01.14;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2005.06.18.18.09.43;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2005.05.26.22.40.52;	author marius;	state Exp;
branches;
next	1.13;

1.13
date	2004.05.14.04.00.33;	author tedu;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.28.21;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.01.31.20.41.29;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2003.01.31.17.37.50;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.03.21.19.08;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.11.06.36.59;	author angelos;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	98.01.09.20.16.48;	author csapuntz;	state Exp;
branches
	1.6.10.1;
next	1.5;

1.5
date	98.01.09.16.21.57;	author csapuntz;	state Exp;
branches;
next	1.4;

1.4
date	97.06.18.17.37.36;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.12.08.14.25.51;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.03.03.12.12.05;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.28;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.28;	author deraadt;	state Exp;
branches;
next	;

1.6.10.1
date	2001.07.04.11.00.24;	author niklas;	state Exp;
branches;
next	1.6.10.2;

1.6.10.2
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	1.6.10.3;

1.6.10.3
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.6.10.4;

1.6.10.4
date	2003.06.07.11.09.07;	author ho;	state Exp;
branches;
next	1.6.10.5;

1.6.10.5
date	2004.06.05.23.13.09;	author niklas;	state Exp;
branches;
next	;

1.7.4.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2002.10.29.00.36.49;	author art;	state Exp;
branches;
next	1.7.4.3;

1.7.4.3
date	2003.05.19.22.32.19;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.34
log
@Remove old deactivated pledge path code.  A replacement mechanism is
being brewed.
ok beck
@
text
@/*	$OpenBSD: namei.h,v 1.33 2016/09/16 03:21:16 dlg Exp $	*/
/*	$NetBSD: namei.h,v 1.11 1996/02/09 18:25:20 christos Exp $	*/

/*
 * Copyright (c) 1985, 1989, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)namei.h	8.4 (Berkeley) 8/20/94
 */

#ifndef _SYS_NAMEI_H_
#define	_SYS_NAMEI_H_

#include <sys/queue.h>
#include <sys/tree.h>
#include <sys/uio.h>

/*
 * Encapsulation of namei parameters.
 */
struct nameidata {
	/*
	 * Arguments to namei/lookup.
	 */
	const char *ni_dirp;		/* pathname pointer */
	int	ni_dirfd;		/* dirfd from *at() functions */
	enum	uio_seg ni_segflg;	/* location of pathname */
     /* u_long	ni_nameiop;		   namei operation */
     /* u_long	ni_flags;		   flags to namei */
     /* struct	proc *ni_proc;		   process requesting lookup */
	/*
	 * Arguments to lookup.
	 */
     /* struct	ucred *ni_cred;		   credentials */
	struct	vnode *ni_startdir;	/* starting directory */
	struct	vnode *ni_rootdir;	/* logical root directory */
	uint64_t ni_pledge;		/* expected pledge for namei */
	/*
	 * Results: returned from/manipulated by lookup
	 */
	struct	vnode *ni_vp;		/* vnode of result */
	struct	vnode *ni_dvp;		/* vnode of intermediate directory */
	/*
	 * Shared between namei and lookup/commit routines.
	 */
	size_t	ni_pathlen;		/* remaining chars in path */
	char	*ni_next;		/* next location in pathname */
	u_long	ni_loopcnt;		/* count of symlinks encountered */
	/*
	 * Lookup parameters: this structure describes the subset of
	 * information from the nameidata structure that is passed
	 * through the VOP interface.
	 */
	struct componentname {
		/*
		 * Arguments to lookup.
		 */
		u_long	cn_nameiop;	/* namei operation */
		u_long	cn_flags;	/* flags to namei */
		struct	proc *cn_proc;	/* process requesting lookup */
		struct	ucred *cn_cred;	/* credentials */
		/*
		 * Shared between lookup and commit routines.
		 */
		char	*cn_pnbuf;	/* pathname buffer */
		char	*cn_nameptr;	/* pointer to looked up name */
		long	cn_namelen;	/* length of looked up component */
		long	cn_consume;	/* chars to consume in lookup() */
	} ni_cnd;
};

#ifdef _KERNEL
/*
 * namei operations
 */
#define	LOOKUP		0	/* perform name lookup only */
#define	CREATE		1	/* setup for file creation */
#define	DELETE		2	/* setup for file deletion */
#define	RENAME		3	/* setup for file renaming */
#define	OPMASK		3	/* mask for operation */
/*
 * namei operational modifier flags, stored in ni_cnd.flags
 */
#define	LOCKLEAF	0x0004	/* lock inode on return */
#define	LOCKPARENT	0x0008	/* want parent vnode returned locked */
#define	WANTPARENT	0x0010	/* want parent vnode returned unlocked */
#define	NOCACHE		0x0020	/* name must not be left in cache */
#define	FOLLOW		0x0040	/* follow symbolic links */
#define	NOFOLLOW	0x0000	/* do not follow symbolic links (pseudo) */
#define	MODMASK		0x00fc	/* mask of operational modifiers */
/*
 * Namei parameter descriptors.
 *
 * SAVENAME may be set by either the callers of namei or by VOP_LOOKUP.
 * If the caller of namei sets the flag (for example execve wants to
 * know the name of the program that is being executed), then it must
 * free the buffer. If VOP_LOOKUP sets the flag, then the buffer must
 * be freed by either the commit routine or the VOP_ABORT routine.
 * SAVESTART is set only by the callers of namei. It implies SAVENAME
 * plus the addition of saving the parent directory that contains the
 * name in ni_startdir. It allows repeated calls to lookup for the
 * name being sought. The caller is responsible for releasing the
 * buffer and for vrele'ing ni_startdir.
 */
#define	NOCROSSMOUNT	0x000100      /* do not cross mount points */
#define	RDONLY		0x000200      /* lookup with read-only semantics */
#define	HASBUF		0x000400      /* has allocated pathname buffer */
#define	SAVENAME	0x000800      /* save pathanme buffer */
#define	SAVESTART	0x001000      /* save starting directory */
#define ISDOTDOT	0x002000      /* current component name is .. */
#define MAKEENTRY	0x004000      /* entry is to be added to name cache */
#define ISLASTCN	0x008000      /* this is last component of pathname */
#define ISSYMLINK	0x010000      /* symlink needs interpretation */
#define	REQUIREDIR	0x080000      /* must be a directory */
#define STRIPSLASHES    0x100000      /* strip trailing slashes */
#define PDIRUNLOCK	0x200000      /* vfs_lookup() unlocked parent dir */

/*
 * Initialization of an nameidata structure.
 */
void ndinitat(struct nameidata *ndp, u_long op, u_long flags,
    enum uio_seg segflg, int dirfd, const char *namep, struct proc *p);

#define NDINITAT(ndp, op, flags, segflg, dirfd, namep, p)  \
	ndinitat(ndp, op, flags, segflg, dirfd, namep, p)

#define NDINIT(ndp, op, flags, segflp, namep, p) \
	ndinitat(ndp, op, flags, segflp, AT_FDCWD, namep, p)

/* Defined for users of NDINIT(). */
#define	AT_FDCWD	-100
#endif

/*
 * This structure describes the elements in the cache of recent
 * names looked up by namei.
 */

#define	NAMECACHE_MAXLEN 31 /* maximum name segment length we bother with */

struct	namecache {
	TAILQ_ENTRY(namecache) nc_lru;	/* Regular Entry LRU chain */
	TAILQ_ENTRY(namecache) nc_neg;	/* Negative Entry LRU chain */
	RBT_ENTRY(namecache) n_rbcache;	/* Namecache rb tree from vnode */
	TAILQ_ENTRY(namecache) nc_me;	/* ncp's referring to me */
	struct	vnode *nc_dvp;		/* vnode of parent of name */
	u_long	nc_dvpid;		/* capability number of nc_dvp */
	struct	vnode *nc_vp;		/* vnode the name refers to */
	u_long	nc_vpid;		/* capability number of nc_vp */
	char	nc_nlen;		/* length of name */
	char	nc_name[NAMECACHE_MAXLEN];	/* segment name */
};

#ifdef _KERNEL
struct	namecache_rb_cache;

int	namei(struct nameidata *ndp);
int	vfs_lookup(struct nameidata *ndp);
int	vfs_relookup(struct vnode *dvp, struct vnode **vpp,
		      struct componentname *cnp);
void cache_tree_init(struct namecache_rb_cache *);
void cache_purge(struct vnode *);
int cache_lookup(struct vnode *, struct vnode **, struct componentname *);
void cache_enter(struct vnode *, struct vnode *, struct componentname *);
int cache_revlookup(struct vnode *, struct vnode **, char **, char *);
void nchinit(void);
struct mount;
void cache_purgevfs(struct mount *);

extern struct pool namei_pool;

#endif

/*
 * Stats on usefulness of namei caches.
 */
struct	nchstats {
	u_int64_t	ncs_goodhits;	/* hits that we can really use */
	u_int64_t	ncs_neghits;	/* negative hits that we can use */
	u_int64_t	ncs_badhits;	/* hits we must drop */
	u_int64_t	ncs_falsehits;	/* hits with id mismatch */
	u_int64_t	ncs_miss;	/* misses */
	u_int64_t	ncs_long;	/* long names that ignore cache */
	u_int64_t	ncs_pass2;	/* names found with passes == 2 */
	u_int64_t	ncs_2passes;	/* number of times we attempt it */
	u_int64_t	ncs_revhits;	/* reverse-cache hits */
	u_int64_t	ncs_revmiss;	/* reverse-cache misses */
	u_int64_t	ncs_dothits;	/* hits on '.' lookups */
	u_int64_t	ncs_dotdothits;	/* hits on '..' lookups */
};

/* These sysctl names are only really used by sysctl(8) */
#define KERN_NCHSTATS_GOODHITS		1
#define KERN_NCHSTATS_NEGHITS		2
#define KERN_NCHSTATS_BADHITS		3
#define KERN_NCHSTATS_FALSEHITS		4
#define KERN_NCHSTATS_MISS		5
#define KERN_NCHSTATS_LONG		6
#define KERN_NCHSTATS_PASS2		7
#define KERN_NCHSTATS_2PASSES		8
#define KERN_NCHSTATS_REVHITS           9
#define KERN_NCHSTATS_REVMISS           10
#define KERN_NCHSTATS_DOTHITS		11
#define KERN_NCHSTATS_DOTDOTHITS	12
#define KERN_NCHSTATS_MAXID		13

#define CTL_KERN_NCHSTATS_NAMES {		\
	{ 0, 0 },				\
	{ "good_hits", CTLTYPE_QUAD },		\
	{ "negative_hits", CTLTYPE_QUAD },	\
	{ "bad_hits", CTLTYPE_QUAD },		\
	{ "false_hits", CTLTYPE_QUAD },		\
	{ "misses", CTLTYPE_QUAD },		\
	{ "long_names", CTLTYPE_QUAD },		\
	{ "pass2", CTLTYPE_QUAD },		\
	{ "2passes", CTLTYPE_QUAD },		\
	{ "ncs_revhits", CTLTYPE_QUAD },	\
	{ "ncs_revmiss", CTLTYPE_QUAD },	\
	{ "ncs_dothits", CTLTYPE_QUAD },	\
	{ "nch_dotdothits", CTLTYPE_QUAD },	\
}
#endif /* !_SYS_NAMEI_H_ */
@


1.33
log
@move the namecache_rb_tree from RB macros to RBT functions.

i had to shuffle the includes a bit. all the knowledge of the RB
tree is now inside vfs_cache.c, and all accesses are via cache_*
functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.32 2016/04/29 14:40:36 beck Exp $	*/
a72 7

	char	*ni_p_path;		/* component path for pledge */
	size_t	ni_p_size;		/* allocated size of pledge path */
	size_t	ni_p_length;		/* length of pledge path */
	char	*ni_p_next;		/* start of next component in pledge path */
	char	*ni_p_prev;		/* previous component in pledge path */

@


1.32
log
@Fix some gibbering horrors due to uninitialized struct nameidata's

1) turn NDINITAT into a function and make the macros point to it
with the later goal of getting rid of them.

2) Sweep the kernel for places where people make a struct nameidata manually
on the stack and fill in what they hope are the required fields and count
on prayer and clean living to always get them right. Instead use NDINIT
everywhere. NFS was especially bad for this and there have likely
been things lurking there for a while.

3) Add a couple of strategic KASSERT's to catch future offenders.

ok krw@@ sthen@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.31 2016/04/28 14:25:08 beck Exp $	*/
a41 4
struct namecache;
struct namecache_rb_cache;
RB_PROTOTYPE(namecache_rb_cache, namecache, n_rbcache, namecache_compare);

d175 1
a175 1
	RB_ENTRY(namecache) n_rbcache;  /* Namecache rb tree from vnode */
d186 2
d192 1
@


1.31
log
@1) Split pledge whitelist path handling out of pledge_namei() and into
   pledge_namei_wlpath(). Call the wlpath check only at the end of namei
   after the namei lookup would otherwise succeed.
2) Add support to namei to keep the path that was looked up, without the
   symlinks in it, and use that path for whitelist path lookups. This
   means that paths in pledge whitelists will need to always be the
   real path to an intended file to whitelist, without symlinks. Any
   symlinks to the "real" file will then be allowed
ok deraadt@@ semarie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.30 2015/12/06 17:50:21 deraadt Exp $	*/
d156 6
a161 9
#define NDINITAT(ndp, op, flags, segflg, dirfd, namep, p) { \
	(ndp)->ni_cnd.cn_nameiop = op; \
	(ndp)->ni_cnd.cn_flags = flags; \
	(ndp)->ni_segflg = segflg; \
	(ndp)->ni_dirfd = dirfd; \
	(ndp)->ni_dirp = namep; \
	(ndp)->ni_cnd.cn_proc = p; \
	(ndp)->ni_pledge = 0; \
}
d163 1
a163 1
	NDINITAT(ndp, op, flags, segflp, AT_FDCWD, namep, p)
@


1.30
log
@Change kernel internal pledge variables to 64bit (to prepare for more
extensions).  This change is exposed in ktrace.out files
ok semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.29 2015/11/02 16:31:55 semarie Exp $	*/
d77 7
@


1.29
log
@move the pledgenote annotation from `struct proc' to `struct nameidata'

pledgenote is used for annotate the policy for a namei context. So make it
tracking the nameidata.

It is expected for the caller to explicitly define the policy. It is a kernel
bug to not do so.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.28 2013/03/27 01:56:50 tedu Exp $	*/
d65 1
a65 1
	int	ni_pledge;		/* expected pledge for namei */
@


1.28
log
@rename NCHNAMLEN to NAMECACHE_MAXLEN. easier to read, easier to type.
ok beck deraadt after a style issue noticed by kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.27 2011/09/30 03:43:27 guenther Exp $	*/
d65 1
d156 1
@


1.27
log
@Change ni_dirfd's position in struct nameidata to eliminate alignment
padding on LP64 platforms

ok millert@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.26 2011/07/07 23:45:00 matthew Exp $	*/
d168 1
a168 1
#define	NCHNAMLEN	31	/* maximum name segment length we bother with */
d180 1
a180 1
	char	nc_name[NCHNAMLEN];	/* segment name */
@


1.26
log
@Add new syscall entries to support the openat(2) family of functions
added in POSIX Issue 7: openat(), mknodat(), mkfifoat(), linkat(),
symlinkat(), unlinkat(), faccessat(), fstatat(), readlinkat(),
fchmodat(), fchownat(), utimensat(), renameat(), and mkdirat().

This diff mostly just refactors the existing sys_foo() logic into a
common dofooat() function that can then be called by both sys_foo()
and sys_fooat().  Some of the new system calls support new flags to
control their behavior, and proper support for these will be added in
subsequent diffs.

Incorporating suggestions from thib@@, guenther@@, and tedu@@.

ok tedu@@, thib@@, deraadt@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.25 2010/09/09 10:37:04 thib Exp $	*/
d53 1
a54 1
	const char *ni_dirp;		/* pathname pointer */
@


1.25
log
@Rename lookup/relookup to vfs_lookup/vfs_relookup.

OK oga@@, beck@@, matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.24 2010/05/19 08:31:23 thib Exp $	*/
d53 1
d148 1
a148 1
#define NDINIT(ndp, op, flags, segflg, namep, p) { \
d152 1
d156 5
@


1.24
log
@clean up a few things that where left to rot after bob's vfs cache work.
sync a few comments to reality (or remove them), remove the cn_hash member
from struct componentname, spacing.

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.23 2009/08/12 16:42:24 beck Exp $	*/
d178 2
a179 2
int	lookup(struct nameidata *ndp);
int	relookup(struct vnode *dvp, struct vnode **vpp,
@


1.23
log
@Namecache revamp.

This eliminates the large single namecache hash table, and implements
the name cache as a global lru of entires, and a redblack tree in each
vnode. It makes cache_purge actually purge the namecache entries associated
with a vnode when a vnode is recycled (very important for later on actually being
able to resize the vnode pool)

This commit does #if 0 out a bunch of procmap code that was
already broken before this change, but needs to be redone completely.

Tested by many, including in thib's nfs test setup.

ok oga@@,art@@,thib@@,miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.22 2008/08/29 08:57:28 otto Exp $	*/
a93 1
		u_int32_t cn_hash;	/* hash value of looked up name */
@


1.22
log
@fix comment: we use a pool for namei, so malloc considerations do not
apply; ok jsg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.21 2008/07/05 12:56:52 thib Exp $	*/
d39 6
d165 4
a168 3
	LIST_ENTRY(namecache) nc_hash;	/* hash chain */
	LIST_ENTRY(namecache) nc_vhash;	/* (reverse) directory hash chain */
	TAILQ_ENTRY(namecache) nc_lru;	/* LRU chain */
@


1.21
log
@
bumb the bcachestats and the nchstats counters from long
to u_int64_t's; add two new counters to nchstats that will
be used in the future.

ok art@@, beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.20 2007/08/07 07:41:59 thib Exp $	*/
d153 1
a153 3
 * names looked up by namei. NCHNAMLEN is sized to make structure
 * size a power of two to optimize malloc's. Minimum reasonable
 * size is 15.
@


1.20
log
@fix the "double-path" errors seen with getcwd by saving the orignal
buffer position in vfs_getcwd_getcache() and restoring it on error.
Use u_int32_t for the componentname hash, use the same type in
the diagnostic code in relookup() to prevent unsigned vs signed errors.

help, testing & ok kurt@@
ok millert@@, art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.19 2007/06/02 01:34:50 thib Exp $	*/
d193 12
a204 10
	long	ncs_goodhits;		/* hits that we can really use */
	long	ncs_neghits;		/* negative hits that we can use */
	long	ncs_badhits;		/* hits we must drop */
	long	ncs_falsehits;		/* hits with id mismatch */
	long	ncs_miss;		/* misses */
	long	ncs_long;		/* long names that ignore cache */
	long	ncs_pass2;		/* names found with passes == 2 */
	long	ncs_2passes;		/* number of times we attempt it */
	long    ncs_revhits;		/* reverse-cache hits */
	long    ncs_revmiss;		/* reverse-cache misses */
d218 3
a220 1
#define KERN_NCHSTATS_MAXID		11
d224 12
a235 10
	{ "good_hits", CTLTYPE_INT },		\
	{ "negative_hits", CTLTYPE_INT },	\
	{ "bad_hits", CTLTYPE_INT },		\
	{ "false_hits", CTLTYPE_INT },		\
	{ "misses", CTLTYPE_INT },		\
	{ "long_names", CTLTYPE_INT },		\
	{ "pass2", CTLTYPE_INT },		\
	{ "2passes", CTLTYPE_INT },		\
	{ "ncs_revhits", CTLTYPE_INT },		\
	{ "ncs_revmiss", CTLTYPE_INT },		\
@


1.19
log
@no need to extern nextvnodeid here.

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.18 2007/05/30 04:27:43 beck Exp $	*/
d88 1
a88 1
		u_long	cn_hash;	/* hash value of looked up name */
@


1.18
log
@back out vfs change - todd fries has seen afs issues, and I'm suspicious
this can cause other problems.
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.16 2005/07/20 17:01:14 miod Exp $	*/
a172 1
extern u_long nextvnodeid;
@


1.17
log
@
	Step one of some vnode improvements - change getnewvnode to
actually allocate "desiredvnodes" - add a vdrop to un-hold a vnode held
with vhold, and change the name cache to make use of vhold/vdrop, while
keeping track of which vnodes are referred to by which cache entries to
correctly hold/drop vnodes when the cache uses them.
ok thib@@, tedu@@, art@@
@
text
@a163 2
	LIST_ENTRY(namecache) nc_src;	/* source vnodes */
	TAILQ_ENTRY(namecache) nc_dst;	/* destination vnodes */
a177 1
void cache_delete(struct namecache *);
@


1.16
log
@Typo in kern.nchstats sysctl names.
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.15 2005/06/18 18:09:43 millert Exp $	*/
d164 2
d180 1
@


1.15
log
@Remove remaining whiteout tentacles; OK deraadt@@ miod@@ weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.14 2005/05/26 22:40:52 marius Exp $	*/
d230 1
a230 1
	{ "nfs_revmiss", CTLTYPE_INT },		\
@


1.14
log
@add a reverse name mapping into the namecache.  (vnode->name)

this will help speedup getcwd (coming soon).

ok pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.13 2004/05/14 04:00:33 tedu Exp $	*/
a134 2
#define	ISWHITEOUT	0x020000      /* found whiteout */
#define	DOWHITEOUT	0x040000      /* do whiteouts */
@


1.13
log
@use pool for namei pathbuf.  testing ok millert@@ tdeval@@
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.12 2003/06/02 23:28:21 millert Exp $	*/
d164 1
d183 1
d204 2
d217 16
a232 12
#define KERN_NCHSTATS_MAXID		9

#define CTL_KERN_NCHSTATS_NAMES { \
	{ 0, 0 }, \
	{ "good_hits", CTLTYPE_INT }, \
	{ "negative_hits", CTLTYPE_INT }, \
	{ "bad_hits", CTLTYPE_INT }, \
	{ "false_hits", CTLTYPE_INT }, \
	{ "misses", CTLTYPE_INT }, \
	{ "long_names", CTLTYPE_INT }, \
	{ "pass2", CTLTYPE_INT }, \
	{ "2passes", CTLTYPE_INT }, \
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.11 2003/01/31 20:41:29 art Exp $	*/
d185 2
@


1.11
log
@Sigh. I comitted the wrong diff in the last vfs changes.
These are the files that were ok:ed and tested.
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.10 2003/01/31 17:37:50 art Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@File system locking fixups, mostly from NetBSD:
- cache_lookup
        move common code from various fs's here
        always return with vnode and parent locked
        adjust return codes
- PDIRUNLOCK - new flag set if lookup couldn't lock parent vnode
- kernfs and procfs
        lock vnode in get_root
        don't unlock (again) in kernfs_freevp
        fix memory leak in procfs

From tedu@@stanford.edu
deraadt@@ and various other ok
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.9 2002/07/03 21:19:08 miod Exp $	*/
d144 1
a144 1
#define PARAMASK	0x2fff00      /* mask of parameter descriptors */
@


1.9
log
@Change all variables definitions (int foo) in sys/sys/*.h to variable
declarations (extern int foo), and compensate in the appropriate locations.
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.8 2002/03/14 01:27:14 millert Exp $	*/
d143 2
a144 1
#define PARAMASK	0x1fff00      /* mask of parameter descriptors */
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.7 2001/05/11 06:36:59 angelos Exp $	*/
d177 1
a177 1
u_long	nextvnodeid;
@


1.7
log
@sysctl entries for kmemstats, nselcoll, nchstats, and forkstat.
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.6 1998/01/09 20:16:48 csapuntz Exp $	*/
d178 8
a185 8
int	namei __P((struct nameidata *ndp));
int	lookup __P((struct nameidata *ndp));
int	relookup __P((struct vnode *dvp, struct vnode **vpp,
		      struct componentname *cnp));
void cache_purge __P((struct vnode *));
int cache_lookup __P((struct vnode *, struct vnode **, struct componentname *));
void cache_enter __P((struct vnode *, struct vnode *, struct componentname *));
void nchinit __P((void));
d187 1
a187 1
void cache_purgevfs __P((struct mount *));
@


1.7.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.7 2001/05/11 06:36:59 angelos Exp $	*/
d178 8
a185 8
int	namei(struct nameidata *ndp);
int	lookup(struct nameidata *ndp);
int	relookup(struct vnode *dvp, struct vnode **vpp,
		      struct componentname *cnp);
void cache_purge(struct vnode *);
int cache_lookup(struct vnode *, struct vnode **, struct componentname *);
void cache_enter(struct vnode *, struct vnode *, struct componentname *);
void nchinit(void);
d187 1
a187 1
void cache_purgevfs(struct mount *);
@


1.7.4.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.7.4.1 2002/06/11 03:32:33 art Exp $	*/
d177 1
a177 1
extern u_long nextvnodeid;
@


1.7.4.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d143 1
a143 2
#define PDIRUNLOCK	0x200000      /* vfs_lookup() unlocked parent dir */

@


1.6
log
@PARAMASK updated to reflect addition of new bit
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.5 1998/01/09 16:21:57 csapuntz Exp $	*/
d204 23
@


1.6.10.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.6 1998/01/09 20:16:48 csapuntz Exp $	*/
a203 23

/* These sysctl names are only really used by sysctl(8) */
#define KERN_NCHSTATS_GOODHITS		1
#define KERN_NCHSTATS_NEGHITS		2
#define KERN_NCHSTATS_BADHITS		3
#define KERN_NCHSTATS_FALSEHITS		4
#define KERN_NCHSTATS_MISS		5
#define KERN_NCHSTATS_LONG		6
#define KERN_NCHSTATS_PASS2		7
#define KERN_NCHSTATS_2PASSES		8
#define KERN_NCHSTATS_MAXID		9

#define CTL_KERN_NCHSTATS_NAMES { \
	{ 0, 0 }, \
	{ "good_hits", CTLTYPE_INT }, \
	{ "negative_hits", CTLTYPE_INT }, \
	{ "bad_hits", CTLTYPE_INT }, \
	{ "false_hits", CTLTYPE_INT }, \
	{ "misses", CTLTYPE_INT }, \
	{ "long_names", CTLTYPE_INT }, \
	{ "pass2", CTLTYPE_INT }, \
	{ "2passes", CTLTYPE_INT }, \
}
@


1.6.10.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d178 8
a185 8
int	namei(struct nameidata *ndp);
int	lookup(struct nameidata *ndp);
int	relookup(struct vnode *dvp, struct vnode **vpp,
		      struct componentname *cnp);
void cache_purge(struct vnode *);
int cache_lookup(struct vnode *, struct vnode **, struct componentname *);
void cache_enter(struct vnode *, struct vnode *, struct componentname *);
void nchinit(void);
d187 1
a187 1
void cache_purgevfs(struct mount *);
@


1.6.10.3
log
@Sync the SMP branch with 3.3
@
text
@d143 1
a143 2
#define PDIRUNLOCK	0x200000      /* vfs_lookup() unlocked parent dir */

d177 1
a177 1
extern u_long nextvnodeid;
@


1.6.10.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.6.10.3 2003/03/28 00:41:30 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.6.10.5
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a184 2

extern struct pool namei_pool;
@


1.5
log
@A better fix for the mkdir ("path/") bug. This fix strips the trailing slashes
(except in the case where the path is just /////) in the following three
cases:

1) The path in mkdir
2) The destination path in rename if the source was a directory
3) The destination path in link if the source was a directory

Note #3 isn't strictly necessary since most of our file systems don't
support hard links of directories anyway.
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.4 1997/06/18 17:37:36 tholo Exp $	*/
d143 1
a143 1
#define PARAMASK	0xfff00	/* mask of parameter descriptors */
@


1.4
log
@Switch to the NetBSD implementation of null path handling; by kleink@@NetBSD.org
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.3 1996/12/08 14:25:51 niklas Exp $	*/
d130 13
a142 12
#define	NOCROSSMOUNT	0x00100	/* do not cross mount points */
#define	RDONLY		0x00200	/* lookup with read-only semantics */
#define	HASBUF		0x00400	/* has allocated pathname buffer */
#define	SAVENAME	0x00800	/* save pathanme buffer */
#define	SAVESTART	0x01000	/* save starting directory */
#define ISDOTDOT	0x02000	/* current component name is .. */
#define MAKEENTRY	0x04000	/* entry is to be added to name cache */
#define ISLASTCN	0x08000	/* this is last component of pathname */
#define ISSYMLINK	0x10000	/* symlink needs interpretation */
#define	ISWHITEOUT	0x20000	/* found whiteout */
#define	DOWHITEOUT	0x40000	/* do whiteouts */
#define	REQUIREDIR	0x80000	/* must be a directory */
@


1.3
log
@-Wcast-qual happiness
@
text
@d1 1
a1 1
/*	$OpenBSD: namei.h,v 1.2 1996/03/03 12:12:05 niklas Exp $	*/
d141 1
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 1
a51 1
	caddr_t	ni_dirp;		/* pathname pointer */
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: namei.h,v 1.10 1995/04/15 08:12:35 cgd Exp $	*/
d179 8
a186 1
	    struct componentname *cnp));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
