head	1.8;
access;
symbols
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.24
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.20
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.16
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.18
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.10
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.14
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.12
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.8
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.6
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.4
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	OPENBSD_5_0:1.7.0.12
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.10
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.1.0.16
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.8
date	2011.10.03.20.24.51;	author matthieu;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.26.14.51.20;	author mbalmer;	state Exp;
branches;
next	1.6;

1.6
date	2008.11.24.13.22.53;	author mbalmer;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.24.12.18.45;	author mbalmer;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.24.12.12.12;	author mbalmer;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.17.16.55.05;	author mbalmer;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.17.09.05.23;	author mbalmer;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.03.18.08.00;	author grange;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.13.09;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Add a 'flag' locator to gpioiic(4), and define a first flag
value to swap the SDA and SCL pins assigment during attach.
Mostly from work with mbalmer@@NetBSD.
ok miod@@
@
text
@/*	$OpenBSD: gpio.h,v 1.7 2008/11/26 14:51:20 mbalmer Exp $	*/
/*
 * Copyright (c) 2004 Alexander Yurchenko <grange@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _SYS_GPIO_H_
#define _SYS_GPIO_H_

/* GPIO pin states */
#define GPIO_PIN_LOW		0x00	/* low level (logical 0) */
#define GPIO_PIN_HIGH		0x01	/* high level (logical 1) */

/* Max name length of a pin */
#define GPIOPINMAXNAME		64

/* GPIO pin configuration flags */
#define GPIO_PIN_INPUT		0x0001	/* input direction */
#define GPIO_PIN_OUTPUT		0x0002	/* output direction */
#define GPIO_PIN_INOUT		0x0004	/* bi-directional */
#define GPIO_PIN_OPENDRAIN	0x0008	/* open-drain output */
#define GPIO_PIN_PUSHPULL	0x0010	/* push-pull output */
#define GPIO_PIN_TRISTATE	0x0020	/* output disabled */
#define GPIO_PIN_PULLUP		0x0040	/* internal pull-up enabled */
#define GPIO_PIN_PULLDOWN	0x0080	/* internal pull-down enabled */
#define GPIO_PIN_INVIN		0x0100	/* invert input */
#define GPIO_PIN_INVOUT		0x0200	/* invert output */
#define GPIO_PIN_USER		0x0400	/* user != 0 can access */
#define GPIO_PIN_SET		0x8000	/* set for securelevel access */

/* GPIO controller description */
struct gpio_info {
	int gpio_npins;		/* total number of pins available */
};

/* GPIO pin operation (read/write/toggle) */
struct gpio_pin_op {
	char gp_name[GPIOPINMAXNAME];	/* pin name */
	int gp_pin;			/* pin number */
	int gp_value;			/* value */
};

/* GPIO pin configuration */
struct gpio_pin_set {
	char gp_name[GPIOPINMAXNAME];
	int gp_pin;
	int gp_caps;
	int gp_flags;
	char gp_name2[GPIOPINMAXNAME];	/* new name */
};

/* Attach/detach device drivers that use GPIO pins */
struct gpio_attach {
	char ga_dvname[16];	/* device name */
	int ga_offset;		/* pin number */
	u_int32_t ga_mask;	/* binary mask */
	u_int32_t ga_flags;	/* flags */
};

#define GPIOINFO		_IOR('G', 0, struct gpio_info)
#define GPIOPINREAD		_IOWR('G', 1, struct gpio_pin_op)
#define GPIOPINWRITE		_IOWR('G', 2, struct gpio_pin_op)
#define GPIOPINTOGGLE		_IOWR('G', 3, struct gpio_pin_op)
#define GPIOPINSET		_IOWR('G', 4, struct gpio_pin_set)
#define GPIOPINUNSET		_IOWR('G', 5, struct gpio_pin_set)
#define GPIOATTACH		_IOWR('G', 6, struct gpio_attach)
#define GPIODETACH		_IOWR('G', 7, struct gpio_attach)

#endif	/* !_SYS_GPIO_H_ */
@


1.7
log
@Change the semantics of gpio(4) devices by locking down pin
configuration and device attachment/detachment to securelevel 0.

GPIO pins can now only be configured at securelevel 0.  Once the
securelevel is raised, only pins that have been configured and set
for securelevel access using the GPIOPINSET ioctl are accessible.
This also adds the possibility to give GPIO pins a name.

ok uwe@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gpio.h,v 1.6 2008/11/24 13:22:53 mbalmer Exp $	*/
d68 1
@


1.6
log
@Comment structure fields.
@
text
@d1 1
a1 1
/*	$OpenBSD: gpio.h,v 1.5 2008/11/24 12:18:45 mbalmer Exp $	*/
d25 3
d39 2
d49 3
a51 2
	int gp_pin;		/* pin number */
	int gp_value;		/* value */
d54 7
a60 5
/* GPIO pin control */
struct gpio_pin_ctl {
	int gp_pin;		/* pin number */
	int gp_caps;		/* pin capabilities (read-only) */
	int gp_flags;		/* pin configuration flags */
d74 4
a77 3
#define GPIOPINCTL		_IOWR('G', 4, struct gpio_pin_ctl)
#define GPIOATTACH		_IOWR('G', 5, struct gpio_attach)
#define GPIODETACH		_IOWR('G', 6, struct gpio_attach)
@


1.5
log
@The mask is actually u_int32_t, not int.
@
text
@d1 1
a1 1
/*	$OpenBSD: gpio.h,v 1.4 2008/11/24 12:12:12 mbalmer Exp $	*/
d58 2
a59 2
	int ga_offset;
	u_int32_t ga_mask;
@


1.4
log
@- Add two new ioctls to gpio(4), GPIOATTACH and GPIODETACH, to allow to attach
and detach devices on a gpiobus at runtime.  The offset and mask locators
in kernel config files can still be used for static configuration, so this
does not break existing custome kernel configs.

- Have gpioow(4) unmap the pins it used from the gpiobus during detach

Changes to gpioctl(8) will be a separate committ.

ok uwe
@
text
@d1 1
a1 1
/*	$OpenBSD: gpio.h,v 1.3 2007/11/17 16:55:05 mbalmer Exp $	*/
d59 1
a59 1
	int ga_mask;
@


1.3
log
@GPIO pins can be programmed to invert input or output on some devices.
Introduce new flags, GPIO_PIN_INVIN and GPIO_PIN_INVOUT, for this.

ok grange
@
text
@d1 1
a1 1
/*	$OpenBSD: gpio.h,v 1.2 2007/11/17 09:05:23 mbalmer Exp $	*/
d55 7
d67 2
@


1.2
log
@pull-down (GPIO_PIN_PULLDOWN) is a valid flags for some GPIO devices,
e.g. the AMD Geode C5536 GPIO.

ok grange
@
text
@d1 1
a1 1
/*	$OpenBSD: gpio.h,v 1.1 2004/06/03 18:08:00 grange Exp $	*/
d34 2
@


1.1
log
@A framework for supporting various General Purpose Input/Output (GPIO)
devices. Such devices provide a set of pins that you can use to connect
for example leds to it.
The pins can be accessed either from userland through the /dev/gpio*
device files or from the kernel drivers. The latter is necessary
for implementing timing-sensitive things like i2c or 1-wire master
controller.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d33 1
@


1.1.2.1
log
@Merge with the trunk
@
text
@@

