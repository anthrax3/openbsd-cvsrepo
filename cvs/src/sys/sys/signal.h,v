head	1.26;
access;
symbols
	OPENBSD_6_0:1.26.0.14
	OPENBSD_6_0_BASE:1.26
	OPENBSD_5_9:1.26.0.10
	OPENBSD_5_9_BASE:1.26
	OPENBSD_5_8:1.26.0.12
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.4
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.8
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.26.0.6
	OPENBSD_5_5_BASE:1.26
	OPENBSD_5_4:1.26.0.2
	OPENBSD_5_4_BASE:1.26
	OPENBSD_5_3:1.24.0.2
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.23.0.4
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.23
	OPENBSD_5_1:1.23.0.2
	OPENBSD_5_0:1.22.0.2
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.21.0.4
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.2
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.19.0.18
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.14
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.19.0.12
	OPENBSD_4_4_BASE:1.19
	OPENBSD_4_3:1.19.0.10
	OPENBSD_4_3_BASE:1.19
	OPENBSD_4_2:1.19.0.8
	OPENBSD_4_2_BASE:1.19
	OPENBSD_4_1:1.19.0.6
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.19.0.4
	OPENBSD_4_0_BASE:1.19
	OPENBSD_3_9:1.19.0.2
	OPENBSD_3_9_BASE:1.19
	OPENBSD_3_8:1.17.0.2
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.16.0.6
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.4
	OPENBSD_3_6_BASE:1.16
	SMP_SYNC_A:1.16
	SMP_SYNC_B:1.16
	OPENBSD_3_5:1.16.0.2
	OPENBSD_3_5_BASE:1.16
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	UBC_SYNC_A:1.14
	OPENBSD_3_3:1.14.0.4
	OPENBSD_3_3_BASE:1.14
	OPENBSD_3_2:1.14.0.2
	OPENBSD_3_2_BASE:1.14
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	UBC_SYNC_B:1.14
	UBC:1.10.0.2
	UBC_BASE:1.10
	OPENBSD_3_0:1.9.0.18
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.16
	OPENBSD_2_8:1.9.0.14
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.12
	OPENBSD_2_7_BASE:1.9
	SMP:1.9.0.10
	SMP_BASE:1.9
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.8
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.6
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.9.0.4
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.9.0.2
	OPENBSD_2_3_BASE:1.9
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2013.04.29.17.06.20;	author matthew;	state Exp;
branches;
next	1.25;

1.25
date	2013.03.24.17.46.25;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2012.12.05.23.20.24;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2011.11.22.21.13.30;	author guenther;	state Exp;
branches;
next	1.22;

1.22
date	2011.07.06.17.39.22;	author guenther;	state Exp;
branches;
next	1.21;

1.21
date	2010.07.02.19.57.15;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2009.11.27.19.47.45;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2006.01.08.14.20.16;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2005.12.13.00.35.23;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2005.05.24.18.06.10;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.14.05.23.25;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.02.23.28.21;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.10.20.30.15;	author jsyn;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.15.01.20.04;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.14.03.16.12;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.11.17.45.52;	author millert;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	98.02.03.20.08.21;	author deraadt;	state Exp;
branches
	1.9.10.1;
next	1.8;

1.8
date	97.09.20.01.55.58;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.09.15.05.46.14;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.01.27.01.15.30;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	96.10.29.01.35.57;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	96.09.20.07.27.52;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.03.03.12.12.18;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.01.05.16.18.38;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.29;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.29;	author deraadt;	state Exp;
branches;
next	;

1.9.10.1
date	2002.03.06.02.17.13;	author niklas;	state Exp;
branches;
next	1.9.10.2;

1.9.10.2
date	2002.03.28.14.52.02;	author niklas;	state Exp;
branches;
next	1.9.10.3;

1.9.10.3
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.9.10.4;

1.9.10.4
date	2003.06.07.11.09.08;	author ho;	state Exp;
branches;
next	1.9.10.5;

1.9.10.5
date	2004.02.19.11.01.34;	author niklas;	state Exp;
branches;
next	;

1.10.2.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2002.10.29.00.36.49;	author art;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Extend P_SIGSUSPEND handling in userret() to properly restore the
sigmask even if there are no pending signals under the temporary
sigmask.

Refactor existing select() and poll() system calls to introduce the
pselect() and ppoll() system calls.

Add rthread wrappers for pselect() and ppoll().  While there, update
cancellation point comments to reflect recent fdatasync() addition.

Minor bumps for libc and librthread due to new symbols.

ok guenther, millert, deraadt, jmc
@
text
@/*	$OpenBSD: signal.h,v 1.25 2013/03/24 17:46:25 deraadt Exp $	*/
/*	$NetBSD: signal.h,v 1.21 1996/02/09 18:25:32 christos Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1989, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)signal.h	8.2 (Berkeley) 1/21/94
 */

#ifndef	_SYS_SIGNAL_H_
#define	_SYS_SIGNAL_H_

#include <machine/signal.h>	/* sigcontext; codes for SIGILL, SIGFPE */

#define _NSIG	33		/* counting 0 (mask is 1-32) */

#if __BSD_VISIBLE
#define NSIG _NSIG
#endif

#define	SIGHUP	1	/* hangup */
#define	SIGINT	2	/* interrupt */
#define	SIGQUIT	3	/* quit */
#define	SIGILL	4	/* illegal instruction (not reset when caught) */
#define	SIGTRAP	5	/* trace trap (not reset when caught) */
#define	SIGABRT	6	/* abort() */
#if __BSD_VISIBLE
#define	SIGIOT	SIGABRT	/* compatibility */
#define	SIGEMT	7	/* EMT instruction */
#endif
#define	SIGFPE	8	/* floating point exception */
#define	SIGKILL	9	/* kill (cannot be caught or ignored) */
#define	SIGBUS	10	/* bus error */
#define	SIGSEGV	11	/* segmentation violation */
#define	SIGSYS	12	/* bad argument to system call */
#define	SIGPIPE	13	/* write on a pipe with no one to read it */
#define	SIGALRM	14	/* alarm clock */
#define	SIGTERM	15	/* software termination signal from kill */
#define	SIGURG	16	/* urgent condition on IO channel */
#define	SIGSTOP	17	/* sendable stop signal not from tty */
#define	SIGTSTP	18	/* stop signal from tty */
#define	SIGCONT	19	/* continue a stopped process */
#define	SIGCHLD	20	/* to parent on child stop or exit */
#define	SIGTTIN	21	/* to readers pgrp upon background tty read */
#define	SIGTTOU	22	/* like TTIN for output if (tp->t_local&LTOSTOP) */
#if __BSD_VISIBLE
#define	SIGIO	23	/* input/output possible signal */
#endif
#define	SIGXCPU	24	/* exceeded CPU time limit */
#define	SIGXFSZ	25	/* exceeded file size limit */
#define	SIGVTALRM 26	/* virtual time alarm */
#define	SIGPROF	27	/* profiling time alarm */
#if __BSD_VISIBLE
#define SIGWINCH 28	/* window size changes */
#define SIGINFO	29	/* information request */
#endif
#define SIGUSR1 30	/* user defined signal 1 */
#define SIGUSR2 31	/* user defined signal 2 */
#if __BSD_VISIBLE
#define SIGTHR  32	/* thread library AST */
#endif

/*
 * Language spec says we must list exactly one parameter, even though we
 * actually supply three.  Ugh!
 */
#define	SIG_DFL		(void (*)(int))0
#define	SIG_IGN		(void (*)(int))1
#define	SIG_ERR		(void (*)(int))-1

#if __POSIX_VISIBLE || __XPG_VISIBLE
#ifndef _SIGSET_T_DEFINED_
#define _SIGSET_T_DEFINED_
typedef unsigned int sigset_t;
#endif

#include <sys/siginfo.h>

/*
 * Signal vector "template" used in sigaction call.
 */
struct	sigaction {
	union {		/* signal handler */
		void	(*__sa_handler)(int);
		void	(*__sa_sigaction)(int, siginfo_t *, void *);
	} __sigaction_u;
	sigset_t sa_mask;		/* signal mask to apply */
	int	sa_flags;		/* see signal options below */
};

/* if SA_SIGINFO is set, sa_sigaction is to be used instead of sa_handler. */
#define sa_handler      __sigaction_u.__sa_handler
#define sa_sigaction    __sigaction_u.__sa_sigaction

#if __XPG_VISIBLE >= 500
#define SA_ONSTACK	0x0001	/* take signal on signal stack */
#define SA_RESTART	0x0002	/* restart system on signal return */
#define SA_RESETHAND	0x0004	/* reset to SIG_DFL when taking signal */
#define SA_NODEFER	0x0010	/* don't mask the signal we're delivering */
#define SA_NOCLDWAIT	0x0020	/* don't create zombies (assign to pid 1) */
#endif /* __XPG_VISIBLE >= 500 */
#define SA_NOCLDSTOP	0x0008	/* do not generate SIGCHLD on child stop */
#if __POSIX_VISIBLE >= 199309 || __XPG_VISIBLE >= 500
#define SA_SIGINFO	0x0040	/* generate siginfo_t */
#endif

/*
 * Flags for sigprocmask:
 */
#define	SIG_BLOCK	1	/* block specified signal set */
#define	SIG_UNBLOCK	2	/* unblock specified signal set */
#define	SIG_SETMASK	3	/* set specified signal set */
#endif	/* __POSIX_VISIBLE || __XPG_VISIBLE */

#if __BSD_VISIBLE
typedef	void (*sig_t)(int);	/* type of signal function */

/*
 * 4.3 compatibility:
 * Signal vector "template" used in sigvec call.
 */
struct	sigvec {
	void	(*sv_handler)(int);	/* signal handler */
	int	sv_mask;		/* signal mask to apply */
	int	sv_flags;		/* see signal options below */
};
#define SV_ONSTACK	SA_ONSTACK
#define SV_INTERRUPT	SA_RESTART	/* same bit, opposite sense */
#define SV_RESETHAND	SA_RESETHAND
#define sv_onstack	sv_flags	/* isn't compatibility wonderful! */

/*
 * Macro for converting signal number to a mask suitable for
 * sigblock().
 */
#define sigmask(m)	(1U << ((m)-1))

#define	BADSIG		SIG_ERR

#endif	/* __BSD_VISIBLE */

#if __BSD_VISIBLE || __XPG_VISIBLE >= 420
/*
 * Structure used in sigaltstack call.
 */
typedef struct sigaltstack {
	void	*ss_sp;			/* signal stack base */
	size_t	ss_size;		/* signal stack length */
	int	ss_flags;		/* SS_DISABLE and/or SS_ONSTACK */
} stack_t;
#define SS_ONSTACK	0x0001	/* take signals on alternate stack */
#define SS_DISABLE	0x0004	/* disable taking signals on alternate stack */
#define	MINSIGSTKSZ	8192			/* minimum allowable stack */
#define	SIGSTKSZ	(MINSIGSTKSZ + 32768)	/* recommended stack size */

typedef struct sigcontext ucontext_t;
#endif /* __BSD_VISIBLE || __XPG_VISIBLE >= 420 */

#ifndef _KERNEL
/*
 * For historical reasons; programs expect signal's return value to be
 * defined by <sys/signal.h>.
 */
__BEGIN_DECLS
void	(*signal(int, void (*)(int)))(int);
__END_DECLS
#endif /* !_KERNEL */
#endif	/* !_SYS_SIGNAL_H_ */
@


1.25
log
@do not expose a userland function to the kernel
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.24 2012/12/05 23:20:24 deraadt Exp $	*/
d102 2
d105 1
@


1.24
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.23 2011/11/22 21:13:30 guenther Exp $	*/
d186 1
d194 1
@


1.23
log
@sigstack() is long dead, and the compat sigaltstack syscall is gone too.
Correct the namespace protections for sigreturn(), sigwait(), and psignal()

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.22 2011/07/06 17:39:22 guenther Exp $	*/
a42 1
#include <sys/cdefs.h>
@


1.22
log
@sigset_t is unsigned, so eliminate a warning by shifting a 1U instead
of a 1 when creating signal masks.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.21 2010/07/02 19:57:15 tedu Exp $	*/
a171 8
 * Structure used in sigstack call.
 */
struct	sigstack {
	void	*ss_sp;			/* signal stack pointer */
	int	ss_onstack;		/* current status */
};

/*
a182 8

#ifdef _KERNEL
struct osigaltstack {
	void	*ss_sp;			/* signal stack base */
	int	ss_size;		/* signal stack length */
	int	ss_flags;		/* SS_DISABLE and/or SS_ONSTACK */
};
#endif
@


1.21
log
@remove support for compat_sunos (and m68k4k).  ok deraadt guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.20 2009/11/27 19:47:45 guenther Exp $	*/
d164 1
a164 1
#define sigmask(m)	(1 << ((m)-1))
@


1.20
log
@Add a signal for librthread to use for interthread ASTs for cancelation
and suspension.

"get it in" deraadt@@, tedu@@, cheers by others
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.19 2006/01/08 14:20:16 millert Exp $	*/
a128 3
#ifdef COMPAT_SUNOS
#define	SA_USERTRAMP	0x0100	/* do not bounce off kernel's sigtramp */
#endif
@


1.19
log
@Expose struct sigcontext, struct sigstat and struct sigaltstack for XPG4.2
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.18 2005/12/13 00:35:23 millert Exp $	*/
d46 1
a46 1
#define _NSIG	32		/* counting 0; could be 33 (mask is 1-32) */
d90 3
@


1.18
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.16 2004/01/14 05:23:25 tedu Exp $	*/
a146 21
 * Structure used in sigaltstack call.
 */
typedef struct sigaltstack {
	void	*ss_sp;			/* signal stack base */
	size_t	ss_size;		/* signal stack length */
	int	ss_flags;		/* SS_DISABLE and/or SS_ONSTACK */
} stack_t;
#define SS_ONSTACK	0x0001	/* take signals on alternate stack */
#define SS_DISABLE	0x0004	/* disable taking signals on alternate stack */
#define	MINSIGSTKSZ	8192			/* minimum allowable stack */
#define	SIGSTKSZ	(MINSIGSTKSZ + 32768)	/* recommended stack size */

#ifdef _KERNEL
struct osigaltstack {
	void	*ss_sp;			/* signal stack base */
	int	ss_size;		/* signal stack length */
	int	ss_flags;		/* SS_DISABLE and/or SS_ONSTACK */
};
#endif

/*
d161 11
a178 2
typedef struct sigcontext ucontext_t;

d180 1
a180 2
 * Macro for converting signal number to a mask suitable for
 * sigblock().
d182 9
a190 1
#define sigmask(m)	(1 << ((m)-1))
d192 7
a198 1
#define	BADSIG		SIG_ERR
d200 2
a201 1
#endif	/* __BSD_VISIBLE */
@


1.17
log
@Don't need to protect as many signals from _POSIX_SOURCE now that POSIX
specifies them.  OK miod@@
@
text
@d48 1
a48 1
#if !defined(_ANSI_SOURCE) && !defined(_POSIX_SOURCE)
d58 1
a58 1
#ifndef _POSIX_SOURCE
d77 1
a77 1
#ifndef _POSIX_SOURCE
d84 1
a84 1
#ifndef _POSIX_SOURCE
d99 1
a99 1
#ifndef _ANSI_SOURCE
d120 1
a120 1
#ifndef _POSIX_SOURCE
d129 1
a129 1
#endif
d131 1
d133 1
d141 1
d143 1
a143 1
#ifndef _POSIX_SOURCE
d199 1
a199 2
#endif	/* !_POSIX_SOURCE */
#endif	/* !_ANSI_SOURCE */
@


1.16
log
@change sigaltstack.ss_size type to size_t.  handle syscall fallout.
add stack_t and ucontext_t typedefs.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.15 2003/06/02 23:28:21 millert Exp $	*/
a55 1
#ifndef _POSIX_SOURCE
a56 1
#endif
a63 1
#ifndef _POSIX_SOURCE
a64 1
#endif
a65 1
#ifndef _POSIX_SOURCE
a66 1
#endif
a69 1
#ifndef _POSIX_SOURCE
a70 1
#endif
d79 1
d84 1
@


1.15
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.14 2002/07/10 20:30:15 jsyn Exp $	*/
d152 1
a152 1
struct	sigaltstack {
d154 1
a154 1
	int	ss_size;		/* signal stack length */
d156 1
a156 1
};
d162 8
d191 2
@


1.14
log
@'sez' is not an english word; ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.13 2002/03/15 01:20:04 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.13
log
@Cosmetic changes only, primarily making comments line up nicely after the
__P removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.12 2002/03/14 03:16:12 millert Exp $	*/
d102 1
a102 1
 * Language spec sez we must list exactly one parameter, even though we
@


1.12
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.11 2002/03/14 01:27:14 millert Exp $	*/
d171 1
a171 1
	void	(*sv_handler)(int); /* signal handler */
d178 1
a178 1
#define sv_onstack sv_flags	/* isn't compatibility wonderful! */
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.10 2001/12/11 17:45:52 millert Exp $	*/
d204 1
a204 1
void	(*signal __P((int, void (*)(int))))(int);
@


1.10
log
@Do not include sys/cdefs.h twice; Bjorn Sandell
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.9 1998/02/03 20:08:21 deraadt Exp $	*/
d105 3
a107 3
#define	SIG_DFL		(void (*)__P((int)))0
#define	SIG_IGN		(void (*)__P((int)))1
#define	SIG_ERR		(void (*)__P((int)))-1
d119 2
a120 2
		void	(*__sa_handler) __P((int));
		void	(*__sa_sigaction) __P((int, siginfo_t *, void *));
d151 1
a151 1
typedef	void (*sig_t) __P((int));	/* type of signal function */
d171 1
a171 1
	void	(*sv_handler) __P((int)); /* signal handler */
d204 1
a204 1
void	(*signal __P((int, void (*) __P((int))))) __P((int));
@


1.10.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.10 2001/12/11 17:45:52 millert Exp $	*/
d105 3
a107 3
#define	SIG_DFL		(void (*)(int))0
#define	SIG_IGN		(void (*)(int))1
#define	SIG_ERR		(void (*)(int))-1
d119 2
a120 2
		void	(*__sa_handler)(int);
		void	(*__sa_sigaction)(int, siginfo_t *, void *);
d151 1
a151 1
typedef	void (*sig_t)(int);	/* type of signal function */
d171 1
a171 1
	void	(*sv_handler)(int);	/* signal handler */
d178 1
a178 1
#define sv_onstack	sv_flags	/* isn't compatibility wonderful! */
d204 1
a204 1
void	(*signal(int, void (*)(int)))(int);
@


1.10.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.10.2.1 2002/06/11 03:32:33 art Exp $	*/
d102 1
a102 1
 * Language spec says we must list exactly one parameter, even though we
@


1.9
log
@void *ss_sp; XPG
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.8 1997/09/20 01:55:58 deraadt Exp $	*/
a150 3
#ifndef _KERNEL
#include <sys/cdefs.h>
#endif
@


1.9.10.1
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d151 3
@


1.9.10.2
log
@Merge in -current from roughly a week ago
@
text
@d105 3
a107 3
#define	SIG_DFL		(void (*)(int))0
#define	SIG_IGN		(void (*)(int))1
#define	SIG_ERR		(void (*)(int))-1
d119 2
a120 2
		void	(*__sa_handler)(int);
		void	(*__sa_sigaction)(int, siginfo_t *, void *);
d151 1
a151 1
typedef	void (*sig_t)(int);	/* type of signal function */
d171 1
a171 1
	void	(*sv_handler)(int);	/* signal handler */
d178 1
a178 1
#define sv_onstack	sv_flags	/* isn't compatibility wonderful! */
d204 1
a204 1
void	(*signal(int, void (*)(int)))(int);
@


1.9.10.3
log
@Sync the SMP branch with 3.3
@
text
@d102 1
a102 1
 * Language spec says we must list exactly one parameter, even though we
@


1.9.10.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.9.10.3 2003/03/28 00:41:30 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.9.10.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d152 1
a152 1
typedef struct sigaltstack {
d154 1
a154 1
	size_t	ss_size;		/* signal stack length */
d156 1
a156 1
} stack_t;
a161 8
#ifdef _KERNEL
struct osigaltstack {
	void	*ss_sp;			/* signal stack base */
	int	ss_size;		/* signal stack length */
	int	ss_flags;		/* SS_DISABLE and/or SS_ONSTACK */
};
#endif

a182 2

typedef struct sigcontext ucontext_t;
@


1.8
log
@create sa_handler and sa_sigaction stubs in struct sigaction, via a
union and cpp.  This permits use of either the old or new POSIX names,
and gives proper typing for the argument handler. (Sorry for the name
space whacking; I'd love to see a better way to do this).
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.6 1997/01/27 01:15:30 deraadt Exp $	*/
d160 1
a160 1
	char	*ss_sp;			/* signal stack base */
d187 1
a187 1
	char	*ss_sp;			/* signal stack pointer */
@


1.7
log
@From FreeBSD (joerg@@freebsd.org):
    Implement SA_NOCLDWAIT by reparenting kids of processes that have
    the appropriate bit set to PID 1, and let PID 1 handle the zombie.
    This assumes that PID 1 will wait for its kids (which is true of init).
    This also includes some FreeBSD sigaction.2.
@
text
@d112 2
d118 4
a121 1
	void	(*sa_handler) __P((int)); /* signal handler */
d125 5
a197 2

#include <sys/siginfo.h>
@


1.6
log
@initial cut at SA_SIGINFO support
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.5 1996/10/29 01:35:57 tholo Exp $	*/
d125 1
@


1.5
log
@Prototypes in sigvec/sigaction and for SIG_{IGN,DFL,ERR}
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.4 1996/09/20 07:27:52 deraadt Exp $	*/
d130 1
d187 2
@


1.4
log
@pull cdefs.h in sys/signal.h instead; improvement on netbsd pr#2712; laine@@mornignstar.com
@
text
@d1 1
a1 1
/*	$OpenBSD: signal.h,v 1.3 1996/03/03 12:12:18 niklas Exp $	*/
a100 1
#if defined(_ANSI_SOURCE) || defined(__cplusplus) || defined(_KERNEL)
d105 3
a107 8
#define	SIG_DFL		(void (*)(int))0
#define	SIG_IGN		(void (*)(int))1
#define	SIG_ERR		(void (*)(int))-1
#else
#define	SIG_DFL		(void (*)())0
#define	SIG_IGN		(void (*)())1
#define	SIG_ERR		(void (*)())-1
#endif
d116 1
a116 6
	void	(*sa_handler)		/* signal handler */
#ifdef _KERNEL
			    __P((int));
#else
			    __P(());
#endif
d162 1
a162 6
	void	(*sv_handler)		/* signal handler */
#ifdef _KERNEL
			    __P((int));
#else
			    __P(());
#endif
@


1.3
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
@


1.2
log
@ss_sp is correct, ss_base is not. noticed by agc@@sde.uts.amdahl.com; netbsd pr#1784
@
text
@d1 2
a2 1
/*	$NetBSD: signal.h,v 1.20 1996/01/04 22:23:23 jtc Exp $	*/
d100 1
a100 1
#if defined(_ANSI_SOURCE) || defined(__cplusplus)
d121 6
a126 1
	void	(*sa_handler)();	/* signal handler */
d172 6
a177 1
	void	(*sv_handler)();	/* signal handler */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: signal.h,v 1.19 1995/08/13 22:51:24 mycroft Exp $	*/
d152 1
a152 1
	char	*ss_base;		/* signal stack base */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
