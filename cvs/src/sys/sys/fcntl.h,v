head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.12
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.10
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.6
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.4
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.20.0.4
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.20.0.8
	OPENBSD_5_6_BASE:1.20
	OPENBSD_5_5:1.20.0.6
	OPENBSD_5_5_BASE:1.20
	OPENBSD_5_4:1.20.0.2
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.19.0.8
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.6
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.4
	OPENBSD_5_0:1.19.0.2
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.11.0.14
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.12
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.8
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.10
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.6
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.4
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.2
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.10.0.8
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.2
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.10
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.8
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	SMP:1.5.0.10
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2015.05.17.01.22.01;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	g7n1QS40YlvIgI3S;

1.20
date	2013.06.05.01.26.00;	author guenther;	state Exp;
branches;
next	1.19;

1.19
date	2011.07.18.17.29.49;	author matthew;	state Exp;
branches;
next	1.18;

1.18
date	2011.07.14.18.03.06;	author matthew;	state Exp;
branches;
next	1.17;

1.17
date	2011.07.13.23.19.57;	author matthew;	state Exp;
branches;
next	1.16;

1.16
date	2011.07.09.01.28.48;	author matthew;	state Exp;
branches;
next	1.15;

1.15
date	2011.07.08.21.26.27;	author matthew;	state Exp;
branches;
next	1.14;

1.14
date	2011.07.08.04.23.24;	author matthew;	state Exp;
branches;
next	1.13;

1.13
date	2011.07.07.23.45.00;	author matthew;	state Exp;
branches;
next	1.12;

1.12
date	2011.06.28.10.15.38;	author thib;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.24.12.59.28;	author jmc;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.13.00.35.23;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.23.28.21;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.06.11.33.28;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.21.15.47.27;	author millert;	state Exp;
branches
	1.6.10.1;
next	1.5;

1.5
date	98.01.09.16.33.47;	author csapuntz;	state Exp;
branches
	1.5.10.1;
next	1.4;

1.4
date	97.10.24.09.04.24;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.11.03.06.35.20;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.03.12.11.44;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.27;	author deraadt;	state Exp;
branches;
next	;

1.5.10.1
date	2001.05.14.22.45.02;	author niklas;	state Exp;
branches;
next	1.5.10.2;

1.5.10.2
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	1.5.10.3;

1.5.10.3
date	2003.03.28.00.41.30;	author niklas;	state Exp;
branches;
next	1.5.10.4;

1.5.10.4
date	2003.06.07.11.09.07;	author ho;	state Exp;
branches;
next	;

1.6.10.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	1.6.10.2;

1.6.10.2
date	2003.05.19.22.32.19;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.21
log
@isatty() is used by stdio to determine the buffering mode.  Add a F_ISATTY
option to fcntl(), so that isatty() can use this rather than than the bloated
ioctl() interface.  Reducing uses of ioctl() by libc makes it easier to
constrain programs with various kinds of systrace sandboxes.
ok guenther, previously discussed as a concept with nicm
@
text
@/*	$OpenBSD: fcntl.h,v 1.20 2013/06/05 01:26:00 guenther Exp $	*/
/*	$NetBSD: fcntl.h,v 1.8 1995/03/26 20:24:12 jtc Exp $	*/

/*-
 * Copyright (c) 1983, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)fcntl.h	8.3 (Berkeley) 1/21/94
 */

#ifndef _SYS_FCNTL_H_
#define	_SYS_FCNTL_H_

/*
 * This file includes the definitions for open and fcntl
 * described by POSIX for <fcntl.h>; it also includes
 * related kernel definitions.
 */

#include <sys/cdefs.h>
#ifndef _KERNEL
#include <sys/types.h>
#endif

/*
 * File status flags: these are used by open(2), fcntl(2).
 * They are also used (indirectly) in the kernel file structure f_flags,
 * which is a superset of the open/fcntl flags.  Open flags and f_flags
 * are inter-convertible using OFLAGS(fflags) and FFLAGS(oflags).
 * Open/fcntl flags begin with O_; kernel-internal flags begin with F.
 */
/* open-only flags */
#define	O_RDONLY	0x0000		/* open for reading only */
#define	O_WRONLY	0x0001		/* open for writing only */
#define	O_RDWR		0x0002		/* open for reading and writing */
#define	O_ACCMODE	0x0003		/* mask for above modes */

/*
 * Kernel encoding of open mode; separate read and write bits that are
 * independently testable: 1 greater than the above.
 *
 * XXX
 * FREAD and FWRITE are excluded from the #ifdef _KERNEL so that TIOCFLUSH,
 * which was documented to use FREAD/FWRITE, continues to work.
 */
#if __BSD_VISIBLE
#define	FREAD		0x0001
#define	FWRITE		0x0002
#endif
#define	O_NONBLOCK	0x0004		/* no delay */
#define	O_APPEND	0x0008		/* set append mode */
#if __BSD_VISIBLE
#define	O_SHLOCK	0x0010		/* open with shared file lock */
#define	O_EXLOCK	0x0020		/* open with exclusive file lock */
#define	O_ASYNC		0x0040		/* signal pgrp when data ready */
#define	O_FSYNC		0x0080		/* backwards compatibility */
#define	O_NOFOLLOW	0x0100		/* if path is a symlink, don't follow */
#endif
#if __POSIX_VISIBLE >= 199309 || __XPG_VISIBLE >= 420
#define	O_SYNC		0x0080		/* synchronous writes */
#endif
#define	O_CREAT		0x0200		/* create if nonexistent */
#define	O_TRUNC		0x0400		/* truncate to zero length */
#define	O_EXCL		0x0800		/* error if already exists */

/*
 * POSIX 1003.1 specifies a higher granularity for synchronous operations
 * than we support.  Since synchronicity is all or nothing in OpenBSD
 * we just define these to be the same as O_SYNC.
 */
#define	O_DSYNC		O_SYNC		/* synchronous data writes */
#define	O_RSYNC		O_SYNC		/* synchronous reads */

/* defined by POSIX 1003.1; BSD default, this bit is not required */
#define	O_NOCTTY	0x8000		/* don't assign controlling terminal */

/* defined by POSIX Issue 7 */
#define	O_CLOEXEC	0x10000		/* atomically set FD_CLOEXEC */
#define	O_DIRECTORY	0x20000		/* fail if not a directory */

#ifdef _KERNEL
/*
 * convert from open() flags to/from fflags; convert O_RD/WR to FREAD/FWRITE.
 * For out-of-range values for the flags, be slightly careful (but lossy).
 */
#define	FFLAGS(oflags)	(((oflags) & ~O_ACCMODE) | (((oflags) + 1) & O_ACCMODE))
#define	OFLAGS(fflags)	(((fflags) & ~O_ACCMODE) | (((fflags) - 1) & O_ACCMODE))

/* bits to save after open */
#define	FMASK		(FREAD|FWRITE|FAPPEND|FASYNC|FFSYNC|FNONBLOCK)
/* bits settable by fcntl(F_SETFL, ...) */
#define	FCNTLFLAGS	(FAPPEND|FASYNC|FFSYNC|FNONBLOCK)
#endif

/*
 * The O_* flags used to have only F* names, which were used in the kernel
 * and by fcntl.  We retain the F* names for the kernel f_flags field
 * and for backward compatibility for fcntl.
 */
#if __BSD_VISIBLE
#define	FAPPEND		O_APPEND	/* kernel/compat */
#define	FASYNC		O_ASYNC		/* kernel/compat */
#define	FFSYNC		O_SYNC		/* kernel */
#define	FNONBLOCK	O_NONBLOCK	/* kernel */
#define	FNDELAY		O_NONBLOCK	/* compat */
#define	O_NDELAY	O_NONBLOCK	/* compat */
#endif

/*
 * Constants used for fcntl(2)
 */

/* command values */
#define	F_DUPFD		0		/* duplicate file descriptor */
#define	F_GETFD		1		/* get file descriptor flags */
#define	F_SETFD		2		/* set file descriptor flags */
#define	F_GETFL		3		/* get file status flags */
#define	F_SETFL		4		/* set file status flags */
#if __POSIX_VISIBLE >= 200112 || __XPG_VISIBLE >= 500
#define	F_GETOWN	5		/* get SIGIO/SIGURG proc/pgrp */
#define F_SETOWN	6		/* set SIGIO/SIGURG proc/pgrp */
#endif
#define	F_GETLK		7		/* get record locking information */
#define	F_SETLK		8		/* set record locking information */
#define	F_SETLKW	9		/* F_SETLK; wait if blocked */
#if __POSIX_VISIBLE >= 200809
#define	F_DUPFD_CLOEXEC	10		/* duplicate with FD_CLOEXEC set */
#endif
#if __BSD_VISIBLE
#define F_ISATTY	11		/* used by isatty(3) */
#endif

/* file descriptor flags (F_GETFD, F_SETFD) */
#define	FD_CLOEXEC	1		/* close-on-exec flag */

/* record locking flags (F_GETLK, F_SETLK, F_SETLKW) */
#define	F_RDLCK		1		/* shared or read lock */
#define	F_UNLCK		2		/* unlock */
#define	F_WRLCK		3		/* exclusive or write lock */
#ifdef _KERNEL
#define	F_WAIT		0x010		/* Wait until lock is granted */
#define	F_FLOCK		0x020	 	/* Use flock(2) semantics for lock */
#define	F_POSIX		0x040	 	/* Use POSIX semantics for lock */
#endif

/*
 * Advisory file segment locking data type -
 * information passed to system by user
 */
struct flock {
	off_t	l_start;	/* starting offset */
	off_t	l_len;		/* len = 0 means until end of file */
	pid_t	l_pid;		/* lock owner */
	short	l_type;		/* lock type: read/write, etc. */
	short	l_whence;	/* type of l_start */
};


#if __BSD_VISIBLE
/* lock operations for flock(2) */
#define	LOCK_SH		0x01		/* shared file lock */
#define	LOCK_EX		0x02		/* exclusive file lock */
#define	LOCK_NB		0x04		/* don't block when locking */
#define	LOCK_UN		0x08		/* unlock file */
#endif

#if __POSIX_VISIBLE >= 200809
#define	AT_FDCWD	-100

#define	AT_EACCESS		0x01
#define	AT_SYMLINK_NOFOLLOW	0x02
#define	AT_SYMLINK_FOLLOW	0x04
#define	AT_REMOVEDIR		0x08
#endif

#ifndef _KERNEL
__BEGIN_DECLS
int	open(const char *, int, ...);
int	creat(const char *, mode_t);
int	fcntl(int, int, ...);
#if __BSD_VISIBLE
int	flock(int, int);
#endif
#if __POSIX_VISIBLE >= 200809
int	openat(int, const char *, int, ...);
#endif
__END_DECLS
#endif

#endif /* !_SYS_FCNTL_H_ */
@


1.20
log
@Move FHASLOCK from f_flag to f_iflags, freeing up a bit for passing
O_* flags and eliminating an XXX comment.

ok matthew@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.19 2011/07/18 17:29:49 matthew Exp $	*/
d157 3
@


1.19
log
@Expose a bunch of new functionality from POSIX 2008: openat(2),
fchmodat(2), fstatat(2), mkdirat(2), mkfifoat(2), mknodat(2),
faccessat(2), fchownat(2), linkat(2), readlinkat(2), renameat(2),
symlinkat(2), unlinkat(2), utimensat(2), futimens(2), and
fdopendir(3).

"Minor" libc bump.

Tested in a bulk build by naddy@@
Much help from guenther@@, thib@@, tedu@@, oga@@, and others.
ok deraadt@@, naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.18 2011/07/14 18:03:06 matthew Exp $	*/
a93 5

/* XXX - FHASLOCK should be FIF_HASLOCK. */
#ifdef _KERNEL
#define	FHASLOCK	0x4000		/* descriptor holds advisory lock */
#endif
@


1.18
log
@Add support for AT_REMOVEDIR to unlinkat(2), and switch sys_rmdir() to
use it.

ok tedu@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.17 2011/07/13 23:19:57 matthew Exp $	*/
d160 1
a160 1
#if __BSD_VISIBLE || __POSIX_VISIBLE >= 200809
d198 1
a198 2
#ifdef _KERNEL
#if __BSD_VISIBLE || __POSIX_VISIBLE >= 200809
a205 1
#endif
d214 3
@


1.17
log
@Change the visibility of the AT_* flags to kernel only.  It's causing
some trouble over in ports land because of autoconf tests that assume
full spport for openat(2), etc. if even one flag is defined.

Flags will be exposed again once the openat(2), etc. system calls are
available via libc.

Discussed with porters on icb; ok kurt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.16 2011/07/09 01:28:48 matthew Exp $	*/
d205 1
@


1.16
log
@Add support for the O_CLOEXEC and O_DIRECTORY flags introduced in
POSIX Issue 7.

Requested by oga@@ (and maybe djm@@); ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.15 2011/07/08 21:26:27 matthew Exp $	*/
d198 1
d205 1
@


1.15
log
@Add F_DUPFD_CLOEXEC.

"Sure" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.14 2011/07/08 04:23:24 matthew Exp $	*/
d110 4
@


1.14
log
@Add support for the AT_EACCESS, AT_SYMLINK_NOFOLLOW, and
AT_SYMLINK_FOLLOW flags.  Refactor sys_lstat to call dofstatat() with
AT_SYMLINK_NOFOLLOW.  Fix sys_link() to use AT_SYMLINK_FOLLOW when
calling dolinkat().

Additionally, fix a bug in VOP_ACCESS() where we might sleep while not
holding a reference count on the ucred object we pass down.

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.13 2011/07/07 23:45:00 matthew Exp $	*/
d156 3
@


1.13
log
@Add new syscall entries to support the openat(2) family of functions
added in POSIX Issue 7: openat(), mknodat(), mkfifoat(), linkat(),
symlinkat(), unlinkat(), faccessat(), fstatat(), readlinkat(),
fchmodat(), fchownat(), utimensat(), renameat(), and mkdirat().

This diff mostly just refactors the existing sys_foo() logic into a
common dofooat() function that can then be called by both sys_foo()
and sys_fooat().  Some of the new system calls support new flags to
control their behavior, and proper support for these will be added in
subsequent diffs.

Incorporating suggestions from thib@@, guenther@@, and tedu@@.

ok tedu@@, thib@@, deraadt@@, guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.12 2011/06/28 10:15:38 thib Exp $	*/
d193 4
@


1.12
log
@Rename FMARK to FIF_MARK and FDEFER to FIF_DEFER and
move those flags to f_iflags; This makes rooms in the
flag member of struct file for some goodies matthew@@
as planned.

ok matthew@@, deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.11 2007/11/24 12:59:28 jmc Exp $	*/
d191 3
@


1.11
log
@some spelling fixes from Martynas Venckus
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.10 2005/12/13 00:35:23 millert Exp $	*/
d94 2
a96 2
#define	FMARK		0x1000		/* mark during gc() */
#define	FDEFER		0x2000		/* defer for next gc pass */
@


1.10
log
@First step in include files overhaul.  Use __FOO_VISIBLE (as defined
in sys/cdefs.h) instead of _FOO_SOURCE.  Also fix several namespace
pollution issues, including the byte order defines.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.9 2003/06/02 23:28:21 millert Exp $	*/
d91 1
a91 1
#define	O_CREAT		0x0200		/* create if nonexistant */
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.8 2003/01/06 11:33:28 miod Exp $	*/
d49 1
d75 1
a75 1
#ifndef _POSIX_SOURCE
d81 1
a81 1
#ifndef _POSIX_SOURCE
d85 1
a85 1
#define	O_FSYNC		O_SYNC		/* backwards compatibility */
d88 1
d90 1
d130 1
a130 1
#ifndef _POSIX_SOURCE
d149 1
a149 1
#ifndef _POSIX_SOURCE
d183 1
a183 1
#ifndef _POSIX_SOURCE
a192 2
#include <sys/cdefs.h>

d197 1
a197 1
#ifndef _POSIX_SOURCE
d199 1
a199 1
#endif /* !_POSIX_SOURCE */
@


1.8
log
@syncronous -> synchronous
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.7 2002/03/14 01:27:14 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.6 2000/04/21 15:47:27 millert Exp $	*/
d102 1
a102 1
 * POSIX 1003.1 specifies a higher granularity for syncronous operations
@


1.6
log
@Change kernel-only open flag FNOSYMLINK to userland-visible O_NOFOLLOW;
adapated from FreeBSD.  Also change O_FSYNC to the more standard O_SYNC
and document it.  open(2) needs some real examples for proper usage,
to come later.
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.5 1998/01/09 16:33:47 csapuntz Exp $	*/
d197 3
a199 3
int	open __P((const char *, int, ...));
int	creat __P((const char *, mode_t));
int	fcntl __P((int, int, ...));
d201 1
a201 1
int	flock __P((int, int));
@


1.6.10.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.6 2000/04/21 15:47:27 millert Exp $	*/
d197 3
a199 3
int	open(const char *, int, ...);
int	creat(const char *, mode_t);
int	fcntl(int, int, ...);
d201 1
a201 1
int	flock(int, int);
@


1.6.10.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d102 1
a102 1
 * POSIX 1003.1 specifies a higher granularity for synchronous operations
@


1.5
log
@Get rid of dumping across symlinks. Races can cause this to be problematic
from a security standpoint (i.e. arbitrary files on the FS can be wiped out).
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.4 1997/10/24 09:04:24 deraadt Exp $	*/
d88 2
a89 1
#define	O_FSYNC		0x0080		/* synchronous writes */
d91 1
d99 1
d101 7
a107 6
/* Note: The below is not a flag that can be used in the struct file. 
   It's an option that can be passed to vn_open to make sure it doesn't
   follow a symlink on the last lookup */
#define FNOSYMLINK     0x10000          /* Don't follow symlink for last
					   component */
#endif
d134 1
a134 1
#define	FFSYNC		O_FSYNC		/* kernel */
@


1.5.10.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.6 2000/04/21 15:47:27 millert Exp $	*/
d88 1
a88 2
#define	O_FSYNC		O_SYNC		/* backwards compatibility */
#define	O_NOFOLLOW	0x0100		/* if path is a symlink, don't follow */
a89 1
#define	O_SYNC		0x0080		/* synchronous writes */
d97 6
a104 8
/*
 * POSIX 1003.1 specifies a higher granularity for syncronous operations
 * than we support.  Since synchronicity is all or nothing in OpenBSD
 * we just define these to be the same as O_SYNC.
 */
#define	O_DSYNC		O_SYNC		/* synchronous data writes */
#define	O_RSYNC		O_SYNC		/* synchronous reads */

d130 1
a130 1
#define	FFSYNC		O_SYNC		/* kernel */
@


1.5.10.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d197 3
a199 3
int	open(const char *, int, ...);
int	creat(const char *, mode_t);
int	fcntl(int, int, ...);
d201 1
a201 1
int	flock(int, int);
@


1.5.10.3
log
@Sync the SMP branch with 3.3
@
text
@d102 1
a102 1
 * POSIX 1003.1 specifies a higher granularity for synchronous operations
@


1.5.10.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.5.10.3 2003/03/28 00:41:30 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4
log
@prevent open() with wrong flags
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.3 1996/11/03 06:35:20 deraadt Exp $	*/
d97 6
@


1.3
log
@O_NOCTTY == 0x8000 sez POSIX
@
text
@d1 1
a1 1
/*	$OpenBSD: fcntl.h,v 1.2 1996/03/03 12:11:44 niklas Exp $	*/
d103 6
a108 3
/* convert from open() flags to/from fflags; convert O_RD/WR to FREAD/FWRITE */
#define	FFLAGS(oflags)	((oflags) + 1)
#define	OFLAGS(fflags)	((fflags) - 1)
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d99 2
a100 2
/* defined by POSIX 1003.1; BSD default, so no bit required */
#define	O_NOCTTY	0		/* don't assign controlling terminal */
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
