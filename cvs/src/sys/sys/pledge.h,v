head	1.32;
access;
symbols
	OPENBSD_6_2_BASE:1.32
	OPENBSD_6_1:1.30.0.4
	OPENBSD_6_1_BASE:1.30
	OPENBSD_6_0:1.29.0.2
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27;
locks; strict;
comment	@ * @;


1.32
date	2017.08.29.02.51.27;	author deraadt;	state Exp;
branches;
next	1.31;
commitid	rqeb3Cn0JHXrssFn;

1.31
date	2017.04.20.15.21.51;	author deraadt;	state Exp;
branches;
next	1.30;
commitid	mIX424WlgAu5BXMd;

1.30
date	2017.01.23.04.25.05;	author deraadt;	state Exp;
branches;
next	1.29;
commitid	NeJrtXDNhZqhGXfa;

1.29
date	2016.07.03.04.36.08;	author semarie;	state Exp;
branches;
next	1.28;
commitid	sZFqhpjiVWq1IcpS;

1.28
date	2016.04.28.14.25.08;	author beck;	state Exp;
branches;
next	1.27;
commitid	0n3rYqVGfgJRKpEF;

1.27
date	2016.01.09.06.13.44;	author semarie;	state Exp;
branches;
next	1.26;
commitid	dcaV4x1VpVc8yivT;

1.26
date	2016.01.08.11.20.58;	author reyk;	state Exp;
branches;
next	1.25;
commitid	75vkfVJpzZUMdF67;

1.25
date	2016.01.06.09.09.16;	author kettenis;	state Exp;
branches;
next	1.24;
commitid	nVj87EkrOwcIg67T;

1.24
date	2015.12.06.17.50.21;	author deraadt;	state Exp;
branches;
next	1.23;
commitid	fXd8HOPcFESXsWp4;

1.23
date	2015.12.04.07.33.05;	author deraadt;	state Exp;
branches;
next	1.22;
commitid	FCPi32lyPV1UcS6e;

1.22
date	2015.11.29.01.15.49;	author benno;	state Exp;
branches;
next	1.21;
commitid	w9LQyEzvPFgBiJ80;

1.21
date	2015.11.20.16.06.54;	author deraadt;	state Exp;
branches;
next	1.20;
commitid	286NXZOWU0sYXBvc;

1.20
date	2015.11.18.13.48.02;	author semarie;	state Exp;
branches;
next	1.19;
commitid	5RgwvsqI6V3NvocW;

1.19
date	2015.11.18.08.24.22;	author semarie;	state Exp;
branches;
next	1.18;
commitid	UoU7wlG0nheL5cpK;

1.18
date	2015.11.04.21.24.23;	author tedu;	state Exp;
branches;
next	1.17;
commitid	TzmafWIW8RVaz5nL;

1.17
date	2015.11.02.16.31.55;	author semarie;	state Exp;
branches;
next	1.16;
commitid	PyvdcQVr9G4daVnG;

1.16
date	2015.11.01.19.03.33;	author semarie;	state Exp;
branches;
next	1.15;
commitid	VKRkUfXZQNJ8UQeY;

1.15
date	2015.11.01.13.01.58;	author semarie;	state Exp;
branches;
next	1.14;
commitid	5MRjBtbyYiJ3NorZ;

1.14
date	2015.10.28.12.17.20;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	zkbQCjO85aouBbdV;

1.13
date	2015.10.26.07.24.20;	author semarie;	state Exp;
branches;
next	1.12;
commitid	9KmnG31nIVcQPeid;

1.12
date	2015.10.25.20.39.54;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	SIwCBDJKKae61tEi;

1.11
date	2015.10.25.17.45.29;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	Yos3wgCrSjTdd7Hx;

1.10
date	2015.10.23.01.10.01;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	KqW7FHnhlWUon4U2;

1.9
date	2015.10.20.18.04.03;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	cbpu7TMBEmsrNLlG;

1.8
date	2015.10.20.01.44.00;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	GxCldWSIRJP5XzFU;

1.7
date	2015.10.18.20.15.10;	author deraadt;	state Exp;
branches;
next	1.6;
commitid	Nk95LvaVIfrgXtf6;

1.6
date	2015.10.18.00.04.43;	author deraadt;	state Exp;
branches;
next	1.5;
commitid	19QhHGSTTsDpRV7q;

1.5
date	2015.10.17.04.31.07;	author deraadt;	state Exp;
branches;
next	1.4;
commitid	Mtvd1mUbQyyWut09;

1.4
date	2015.10.16.14.04.11;	author semarie;	state Exp;
branches;
next	1.3;
commitid	ENshdJQqoaKdbEvO;

1.3
date	2015.10.16.13.37.44;	author millert;	state Exp;
branches;
next	1.2;
commitid	H99PcNtHGZMrNl2r;

1.2
date	2015.10.14.14.24.03;	author deraadt;	state Exp;
branches;
next	1.1;
commitid	fihBIqC2Qdmk6hpM;

1.1
date	2015.10.09.01.10.27;	author deraadt;	state Exp;
branches;
next	;
commitid	av6ZVErLSWkVP5Zz;


desc
@@


1.32
log
@Remove old deactivated pledge path code.  A replacement mechanism is
being brewed.
ok beck
@
text
@/*	$OpenBSD: pledge.h,v 1.31 2017/04/20 15:21:51 deraadt Exp $	*/

/*
 * Copyright (c) 2015 Nicholas Marriott <nicm@@openbsd.org>
 * Copyright (c) 2015 Theo de Raadt <deraadt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _SYS_PLEDGE_H_
#define _SYS_PLEDGE_H_

#include <sys/cdefs.h>

/*
 * pledge(2) requests
 */
#define PLEDGE_ALWAYS	0xffffffffffffffffULL
#define PLEDGE_RPATH	0x0000000000000001ULL	/* allow open for read */
#define PLEDGE_WPATH	0x0000000000000002ULL	/* allow open for write */
#define PLEDGE_CPATH	0x0000000000000004ULL	/* allow creat, mkdir, unlink etc */
#define PLEDGE_STDIO	0x0000000000000008ULL	/* operate on own pid */
#define PLEDGE_TMPPATH	0x0000000000000010ULL	/* for mk*temp() */
#define PLEDGE_DNS	0x0000000000000020ULL	/* DNS services */
#define PLEDGE_INET	0x0000000000000040ULL	/* AF_INET/AF_INET6 sockets */
#define PLEDGE_FLOCK	0x0000000000000080ULL	/* file locking */
#define PLEDGE_UNIX	0x0000000000000100ULL	/* AF_UNIX sockets */
#define PLEDGE_ID	0x0000000000000200ULL	/* allow setuid, setgid, etc */
#define PLEDGE_TAPE	0x0000000000000400ULL	/* Tape ioctl */
#define PLEDGE_GETPW	0x0000000000000800ULL	/* YP enables if ypbind.lock */
#define PLEDGE_PROC	0x0000000000001000ULL	/* fork, waitpid, etc */
#define PLEDGE_SETTIME	0x0000000000002000ULL	/* able to set/adj time/freq */
#define PLEDGE_FATTR	0x0000000000004000ULL	/* allow explicit file st_* mods */
#define PLEDGE_PROTEXEC	0x0000000000008000ULL	/* allow use of PROT_EXEC */
#define PLEDGE_TTY	0x0000000000010000ULL	/* tty setting */
#define PLEDGE_SENDFD	0x0000000000020000ULL	/* AF_UNIX CMSG fd sending */
#define PLEDGE_RECVFD	0x0000000000040000ULL	/* AF_UNIX CMSG fd receiving */
#define PLEDGE_EXEC	0x0000000000080000ULL	/* execve, child is free of pledge */
#define PLEDGE_ROUTE	0x0000000000100000ULL	/* routing lookups */
#define PLEDGE_MCAST	0x0000000000200000ULL	/* multicast joins */
#define PLEDGE_VMINFO	0x0000000000400000ULL	/* vminfo listings */
#define PLEDGE_PS	0x0000000000800000ULL	/* ps listings */
#define PLEDGE_DISKLABEL 0x0000000002000000ULL	/* disklabels */
#define PLEDGE_PF	0x0000000004000000ULL	/* pf ioctls */
#define PLEDGE_AUDIO	0x0000000008000000ULL	/* audio ioctls */
#define PLEDGE_DPATH	0x0000000010000000ULL	/* mknod & mkfifo */
#define PLEDGE_DRM	0x0000000020000000ULL	/* drm ioctls */
#define PLEDGE_VMM	0x0000000040000000ULL	/* vmm ioctls */
#define PLEDGE_CHOWN	0x0000000080000000ULL	/* chown(2) family */
#define PLEDGE_CHOWNUID	0x0000000100000000ULL	/* allow owner/group changes */
#define PLEDGE_BPF	0x0000000200000000ULL	/* bpf ioctl */

/*
 * Bits outside PLEDGE_USERSET are used by the kernel itself
 * to track program behaviours which have been observed.
 */
#define PLEDGE_USERSET	0x0fffffffffffffffULL
#define PLEDGE_STATLIE	0x4000000000000000ULL
#define PLEDGE_YPACTIVE	0x8000000000000000ULL	/* YP use detected and allowed */

#ifdef PLEDGENAMES
static struct {
	uint64_t	bits;
	char		*name;
} pledgenames[] = {
	{ PLEDGE_RPATH,		"rpath" },
	{ PLEDGE_WPATH,		"wpath" },
	{ PLEDGE_CPATH,		"cpath" },
	{ PLEDGE_STDIO,		"stdio" },
	{ PLEDGE_TMPPATH,	"tmppath" },
	{ PLEDGE_DNS,		"dns" },
	{ PLEDGE_INET,		"inet" },
	{ PLEDGE_FLOCK,		"flock" },
	{ PLEDGE_UNIX,		"unix" },
	{ PLEDGE_ID,		"id" },
	{ PLEDGE_TAPE,		"tape" },
	{ PLEDGE_GETPW,		"getpw" },
	{ PLEDGE_PROC,		"proc" },
	{ PLEDGE_SETTIME,	"settime" },
	{ PLEDGE_FATTR,		"fattr" },
	{ PLEDGE_PROTEXEC,	"protexec" },
	{ PLEDGE_TTY,		"tty" },
	{ PLEDGE_SENDFD,	"sendfd" },
	{ PLEDGE_RECVFD,	"recvfd" },
	{ PLEDGE_EXEC,		"exec" },
	{ PLEDGE_ROUTE,		"route" },
	{ PLEDGE_MCAST,		"mcast" },
	{ PLEDGE_VMINFO,	"vminfo" },
	{ PLEDGE_PS,		"ps" },
	{ PLEDGE_DISKLABEL,	"disklabel" },
	{ PLEDGE_PF,		"pf" },
	{ PLEDGE_AUDIO,		"audio" },
	{ PLEDGE_DPATH,		"dpath" },
	{ PLEDGE_DRM,		"drm" },
	{ PLEDGE_VMM,		"vmm" },
	{ PLEDGE_CHOWNUID,	"chown" },
	{ PLEDGE_BPF,		"bpf" },
	{ 0, NULL },
};
#endif

#ifdef _KERNEL

int	pledge_syscall(struct proc *, int, uint64_t *);
int	pledge_fail(struct proc *, int, uint64_t);

struct mbuf;
struct nameidata;
int	pledge_namei(struct proc *, struct nameidata *, char *);
int	pledge_sendfd(struct proc *p, struct file *);
int	pledge_recvfd(struct proc *p, struct file *);
int	pledge_sysctl(struct proc *p, int namelen, int *name, void *new);
int	pledge_chown(struct proc *p, uid_t, gid_t);
int	pledge_adjtime(struct proc *p, const void *v);
int	pledge_sendit(struct proc *p, const void *to);
int	pledge_sockopt(struct proc *p, int set, int level, int optname);
int	pledge_socket(struct proc *p, int domain, int state);
int	pledge_ioctl(struct proc *p, long com, struct file *);
int	pledge_ioctl_drm(struct proc *p, long com, dev_t device);
int	pledge_ioctl_vmm(struct proc *p, long com);
int	pledge_flock(struct proc *p);
int	pledge_fcntl(struct proc *p, int cmd);
int	pledge_swapctl(struct proc *p);
int	pledge_kill(struct proc *p, pid_t pid);
int	pledge_protexec(struct proc *p, int prot);

#endif /* _KERNEL */

#endif /* _SYS_PLEDGE_H_ */
@


1.31
log
@only 32 bits of the pledgecode were passed up via ktrace
from Anton Lindqvist
ok semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.30 2017/01/23 04:25:05 deraadt Exp $	*/
a119 1
int	pledge_namei_wlpath(struct proc *, struct nameidata *);
a135 13

#define PLEDGE_MAXPATHS	8192

struct whitepaths {
	size_t	wl_size;
	int	wl_count;
	int	wl_ref;
	struct whitepath {
		char		*name;
		size_t		len;
	} wl_paths[0];
};
void	pledge_dropwpaths(struct process *);
@


1.30
log
@Split pledge "ioctl" into "tape" and "bpf", and allow SIOCGIFGROUP only
upon "inet".  Adjust the 4 programs that care about this.
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.29 2016/07/03 04:36:08 semarie Exp $	*/
d114 1
a114 1
int	pledge_syscall(struct proc *, int, int *);
@


1.29
log
@introduces new promise "chown" to allow changing owner/group with *chown(2) family

it splits PLEDGE_FATTR in two ("fattr" stills grant the 2 flags, so no functional changes):
  - PLEDGE_CHOWN : to be able to call *chown(2) syscalls
  - PLEDGE_FATTR : the rest

it introduces "chown" which grant:
  - PLEDGE_CHOWN : be able to call *chown(2)
  - PLEDGE_CHOWNUID : be able to modifying owner/group

ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.28 2016/04/28 14:25:08 beck Exp $	*/
d39 1
a39 1
#define PLEDGE_IOCTL	0x0000000000000400ULL	/* Select ioctl */
d61 1
d86 1
a86 1
	{ PLEDGE_IOCTL,		"ioctl" },
d107 1
@


1.28
log
@1) Split pledge whitelist path handling out of pledge_namei() and into
   pledge_namei_wlpath(). Call the wlpath check only at the end of namei
   after the namei lookup would otherwise succeed.
2) Add support to namei to keep the path that was looked up, without the
   symlinks in it, and use that path for whitelist path lookups. This
   means that paths in pledge whitelists will need to always be the
   real path to an intended file to whitelist, without symlinks. Any
   symlinks to the "real" file will then be allowed
ok deraadt@@ semarie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.27 2016/01/09 06:13:44 semarie Exp $	*/
d59 2
d105 1
@


1.27
log
@drop "abort" promise, and make it the default behaviour.
The current code has already setted it by default since 1.74

any pledge failure tries to make a coredump (default rules for coredump still
applies: so setuid binaries don't create them locally).

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.26 2016/01/08 11:20:58 reyk Exp $	*/
d115 1
@


1.26
log
@Add "vmm" pledge to allow restricted ioctl access to /dev/vmm.

This will allow to pledge vmd(8)'s vmm and vm processes, so that VMs
themselves run "sandboxed", including their host-side virtio layer.
It will remain disabled for now (in userland) to not get into the way
of ongoing development and upcoming changes in vmd and the ioctl
interface.

OK mlarkin@@ deraadt@@ "kernel side in, but not the callers in userland"
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.25 2016/01/06 09:09:16 kettenis Exp $	*/
a52 1
#define PLEDGE_COREDUMP	0x0000000001000000ULL	/* generates coredump (default) */
a96 1
	{ PLEDGE_COREDUMP,	"coredump" },
@


1.25
log
@Add pledge "drm", which allows a subset of the drm(4) ioctls.  These are
basically only the ioctls that Linux allows on the so-called "render nodes".
For now, it also allows DRM_IOCTL_GET_MAGIC and DRM_IOCTL_GEM_OPEN, as we
don't implement prime/dma-buf yet in OpenBSD.  That still leaves a big gaping
hole, so they will be removed as soon as we can.

Based on a diff by robert@@, who did all the heavy lifting by studying the
behaviour of the chromium GPU process, with some further suggestions by
deraadt@@.

ok jsg@@, deraadt@@, robert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.24 2015/12/06 17:50:21 deraadt Exp $	*/
d59 1
d104 1
d127 1
@


1.24
log
@Change kernel internal pledge variables to 64bit (to prepare for more
extensions).  This change is exposed in ktrace.out files
ok semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.22 2015/11/29 01:15:49 benno Exp $	*/
d58 1
d102 1
d124 1
@


1.23
log
@Add pledge "dpath", which provides access to mknod(2) and mkfifo(2).
This will be required to keep pax/tar/cpio at otherwise very high levels
of pledge (and we will see where else it is beneficial).
Allocate a bit for pledge "audio", which will be coming soon.
good discussions with semarie
@
text
@d25 33
a57 30
#define PLEDGE_ALWAYS	0xffffffff
#define PLEDGE_RPATH	0x00000001	/* allow open for read */
#define PLEDGE_WPATH	0x00000002	/* allow open for write */
#define PLEDGE_CPATH	0x00000004	/* allow creat, mkdir, path creations */
#define PLEDGE_STDIO	0x00000008	/* operate on own pid */
#define PLEDGE_TMPPATH	0x00000010	/* for mk*temp() */
#define PLEDGE_DNS	0x00000020	/* DNS services */
#define PLEDGE_INET	0x00000040	/* AF_INET/AF_INET6 sockets */
#define PLEDGE_FLOCK	0x00000080	/* file locking */
#define PLEDGE_UNIX	0x00000100	/* AF_UNIX sockets */
#define PLEDGE_ID	0x00000200	/* allow setuid, setgid, etc */
#define PLEDGE_IOCTL	0x00000400	/* Select ioctl */
#define PLEDGE_GETPW	0x00000800	/* YP enables if ypbind.lock */
#define PLEDGE_PROC	0x00001000	/* fork, waitpid, etc */
#define PLEDGE_SETTIME	0x00002000	/* able to set/adj time/freq */
#define PLEDGE_FATTR	0x00004000	/* allow explicit file st_* mods */
#define PLEDGE_PROTEXEC	0x00008000	/* allow use of PROT_EXEC */
#define PLEDGE_TTY	0x00010000	/* tty setting */
#define PLEDGE_SENDFD	0x00020000	/* AF_UNIX CMSG fd sending */
#define PLEDGE_RECVFD	0x00040000	/* AF_UNIX CMSG fd receiving */
#define PLEDGE_EXEC	0x00080000	/* execve, child is free of pledge */
#define PLEDGE_ROUTE	0x00100000	/* routing lookups */
#define PLEDGE_MCAST	0x00200000	/* multicast joins */
#define PLEDGE_VMINFO	0x00400000	/* vminfo listings */
#define PLEDGE_PS	0x00800000	/* ps listings */
#define PLEDGE_COREDUMP	0x01000000	/* generates coredump (default) */
#define PLEDGE_DISKLABEL 0x02000000	/* disklabels */
#define PLEDGE_PF	0x04000000	/* pf ioctls */
#define PLEDGE_AUDIO	0x08000000	/* audio ioctls */
#define PLEDGE_DPATH	0x10000000	/* mknod & mkfifo */
d59 7
a65 6
/* Following flags are set by kernel, as it learns things.
 * Not user settable. Should be moved to a seperate variable */

#define PLEDGE_STATLIE	0x40000000
#define PLEDGE_YPACTIVE	0x80000000	/* YP use detected and allowed */
#define PLEDGE_USERSET	0x3fffffff
d69 1
a69 1
	u_int32_t	bits;
d108 1
a108 1
int	pledge_fail(struct proc *, int, int);
@


1.22
log
@Add pledge "pf" which allows ioctls on pf(4). This will be used by
relayd and other programs manipulating the packet filter.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.21 2015/11/20 16:06:54 deraadt Exp $	*/
d53 2
d61 1
a61 1
#define PLEDGE_USERSET	0x0fffffff
d95 2
@


1.21
log
@Add pledge "disklabel", which allows sysctl kern.rawpartition, a
few disklabel ioctls, and the DIOCMAP ioctl against /dev/diskmap used
to translate duid numbers into partitions.
This will allow pledging of at least 12 disk/filesystem aware
programs; due to the negative impact that diff will wait a bit so
everyone has a chance to update their kernels.
ok semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.20 2015/11/18 13:48:02 semarie Exp $	*/
d52 1
d92 1
@


1.20
log
@remove pledge_aftersyscall() prototype as the function was been removed.

while here, move pledge_namei() proto with others pledge_* functions used for
check promises.
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.19 2015/11/18 08:24:22 semarie Exp $	*/
d51 1
d90 1
@


1.19
log
@check domain and state of socket against pledge promise.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.18 2015/11/04 21:24:23 tedu Exp $	*/
a94 1
struct nameidata;
a96 2
int	pledge_namei(struct proc *, struct nameidata *, char *);
void	pledge_aftersyscall(struct proc *, int, int);
d99 2
@


1.18
log
@pledge_ioctl only takes files, adjust prototype. ok semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.17 2015/11/02 16:31:55 semarie Exp $	*/
d109 1
a109 1
int	pledge_socket(struct proc *p, int dns);
@


1.17
log
@move the pledgenote annotation from `struct proc' to `struct nameidata'

pledgenote is used for annotate the policy for a namei context. So make it
tracking the nameidata.

It is expected for the caller to explicitly define the policy. It is a kernel
bug to not do so.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.16 2015/11/01 19:03:33 semarie Exp $	*/
d110 1
a110 1
int	pledge_ioctl(struct proc *p, long com, void *);
@


1.16
log
@refactor pledge_*_check and pledge_fail functions

- rename _check function without suffix: a "pledge" function called from
  anywhere is a "check" function.

- makes pledge_fail call the responsability to the _check function. remove it
  from caller.

- make proper use of (potential) returned error of _check() functions.

- adds pledge_kill() and pledge_protexec()

with and OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.15 2015/11/01 13:01:58 semarie Exp $	*/
d95 1
d98 1
a98 1
int	pledge_namei(struct proc *, char *);
@


1.15
log
@uniformize "always allowed syscalls" with pledge

- use a proper name PLEDGE_ALWAYS (suggested by derradt@@)
- unify the check for allowing it in order to allow all of them

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.14 2015/10/28 12:17:20 deraadt Exp $	*/
d95 1
a95 1
int	pledge_check(struct proc *, int, int *);
d101 14
a114 13
int	pledge_sendfd_check(struct proc *p, struct file *);
int	pledge_recvfd_check(struct proc *p, struct file *);
int	pledge_sysctl_check(struct proc *p, int namelen, int *name, void *new);
int	pledge_chown_check(struct proc *p, uid_t, gid_t);
int	pledge_adjtime_check(struct proc *p, const void *v);
int	pledge_sendit_check(struct proc *p, const void *to);
int	pledge_socket_check(struct proc *p, int domain);
int	pledge_sockopt_check(struct proc *p, int set, int level, int optname);
int	pledge_socket_check(struct proc *p, int dns);
int	pledge_ioctl_check(struct proc *p, long com, void *);
int	pledge_flock_check(struct proc *p);
int	pledge_fcntl_check(struct proc *p, int cmd);
int	pledge_swapctl_check(struct proc *p);
@


1.14
log
@Prevent F_SETOWN, unless a "proc" pledge was made.
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.13 2015/10/26 07:24:20 semarie Exp $	*/
d25 1
@


1.13
log
@make pledge_check(), used for syscall check with pledge, returns an error and
provide the required pledge request for pledge_fail().

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.12 2015/10/25 20:39:54 deraadt Exp $	*/
d111 1
@


1.12
log
@Fold "malloc" into "stdio" and -- recognizing that no program so far has
used less than "stdio" -- include all the "self" operations.  Instead of
different defines, use regular PLEDGE_* in the "p_pledgenote" variable
(which indicates the operation subtype a system call is performing).  Many
checks before easier to understand.  p_pledgenote can often be passed
directly to ktrace, so that kdump says:
 15565 test     CALL  pledge(0xa9a3f804c51,0)
 15565 test     STRU  pledge request="stdio"
 15565 test     RET   pledge 0
 15565 test     CALL  open(0xa9a3f804c57,0x2<O_RDWR>)
 15565 test     NAMI  "/tmp/testfile"
 15565 test     PLDG  open, "wpath", errno 1 Operation not permitted
with help from semarie, ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.11 2015/10/25 17:45:29 deraadt Exp $	*/
d94 1
a94 1
int	pledge_check(struct proc *, int);
@


1.11
log
@pledge_sockopt_check is shared between setsockopt/getsockopt.  nicm
found the first case of "get allowed, set not allowed".  Tiny
refactoring of that.
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.10 2015/10/23 01:10:01 deraadt Exp $	*/
a22 2
#ifdef _KERNEL

d25 8
a32 8
#define PLEDGE_SELF	0x00000001	/* operate on own pid */
#define PLEDGE_RW		0x00000002	/* basic io operations */
#define PLEDGE_MALLOC	0x00000004	/* enough for malloc */
#define PLEDGE_DNS	0x00000008	/* DNS services */
#define PLEDGE_RPATH	0x00000010	/* allow open for read */
#define PLEDGE_WPATH	0x00000020	/* allow open for write */
#define PLEDGE_TMPPATH	0x00000040	/* for mk*temp() */
#define PLEDGE_INET	0x00000080	/* AF_INET/AF_INET6 sockets */
d38 1
a38 1
#define PLEDGE_CPATH	0x00002000	/* allow creat, mkdir, path creations */
d47 1
a47 1
#define PLEDGE_FLOCK	0x00400000	/* file locking */
d49 1
a49 4
#define PLEDGE_VMINFO	0x01000000	/* vminfo listings */
#define PLEDGE_SETTIME	0x02000000	/* able to set/adj time/freq */

#define PLEDGE_ABORT	0x08000000	/* SIGABRT instead of SIGKILL */
d53 3
d57 36
a92 1
#define PLEDGE_YP_ACTIVE	0x10000000	/* YP use detected and allowed */
@


1.10
log
@Add 3 new pledge requests.  "ps" exposes enough sysctl information for
ps-style programs (there are quite a few in the tree, including tmux).
"vminfo" exposes a bit more system operation information, which many
observation programs want (such as top).  settime allows setting the system
time, and will be used to pledge-protect the last ntpd process.
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.9 2015/10/20 18:04:03 deraadt Exp $	*/
d74 1
a74 1
int	pledge_sockopt_check(struct proc *p, int level, int optname);
@


1.9
log
@At guenther's suggestion replace dnssocket() with a SOCK_DNS flag on
socket().  Without pledge, all other socket behaviours become permitted,
except this one case: connect/send* only works to *:53.  In pledge mode,
a very few are further restricted.  Some backwards compatibility for
the dnssocket/dnsconnect calls will remain in the tree temporarily so
that people can build through the transition.
ok tedu guenther semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.8 2015/10/20 01:44:00 deraadt Exp $	*/
d50 3
d78 1
@


1.8
log
@Always allow the setsockopt & getsockopt system calls... however, in the
default case only allows SOL_SOCKET SO_RCVBUF which is very common in
network-facing daemons.  Many of them manage this on a socket after
dropping abilities which can get them _new_ sockets.. syslogd, bgpd,
relayd, etc etc.  Other sockopts still require specific pledges.
Tested by bluhm.
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.7 2015/10/18 20:15:10 deraadt Exp $	*/
a68 1
int	pledge_recvit_check(struct proc *p, const void *from);
d72 1
a72 1
int	pledge_dns_check(struct proc *p, in_port_t port);
@


1.7
log
@Instead of fragile CMSG parsing, control pledge "sendfd" and "recvfd"
in unp_internalize and unp_externalize.
ok kettenis guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.6 2015/10/18 00:04:43 deraadt Exp $	*/
d72 1
a72 1
int	pledge_setsockopt_check(struct proc *p, int level, int optname);
@


1.6
log
@Add two new system calls: dnssocket() and dnsconnect().  This creates a
SS_DNS tagged socket which has limited functionality (for example, you
cannot accept on them...)  The libc resolver will switch to using these,
therefore pledge can identify a DNS transaction better.
ok tedu guenther kettenis beck and others
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.5 2015/10/17 04:31:07 deraadt Exp $	*/
d64 2
a65 2
int	pledge_cmsg_send(struct proc *p, struct mbuf *control);
int	pledge_cmsg_recv(struct proc *p, struct mbuf *control);
@


1.5
log
@Add pledge "id" support.  This request permits setuid/seteuid/setresuid,
setgid/setegid/setresgid, setgroups, setlogin, and setpriority.

setrlimit and getpriority are also allowed (they are also in "proc")

some of these were previously permitted in "proc" but have been removed.
this seperation is intentional.  "proc" is intended for reasoning about
the relationship of a process "with other processes", whereas "id" deals
the powerful/dangerous concept of unix ids.  "id" will see some action
very soon.

ok gilles tedu semarie doug
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.4 2015/10/16 14:04:11 semarie Exp $	*/
d30 1
a30 1
#define PLEDGE_DNSPATH	0x00000008	/* access to DNS pathnames */
a56 1
#define PLEDGE_DNS_ACTIVE	0x20000000	/* DNS use detected and allowed */
d69 2
a70 3
int	pledge_recvfrom_check(struct proc *p, void *from);
int	pledge_sendto_check(struct proc *p, const void *to);
int	pledge_connect_check(struct proc *p);
@


1.4
log
@delete pledge_bind_check() function and remove pledge_bind_check() call from sys_bind().

bind(2) still require PLEDGE_INET or PLEDGE_UNIX in order to be called, due to
SYS_bind entry in pledge_syscalls array. The diff restores also the ability for
PLEDGE_UNIX to call bind(2) (pledge_bind_check function missed that).

problem spotted by doug@@
OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.3 2015/10/16 13:37:44 millert Exp $	*/
d36 1
a36 1
// reuse, old CMSG	0x00000200
@


1.3
log
@Implement real "flock" request and add it to userland programs that
use pledge and file locking.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.2 2015/10/14 14:24:03 deraadt Exp $	*/
a71 1
int	pledge_bind_check(struct proc *p, const void *v);
@


1.2
log
@When pledged with "fattr", allow chown to supplimentary groups.  This
came out of a discussion regarding "sort foo -o foo".
ok semarie
@
text
@d1 1
a1 1
/*	$OpenBSD: pledge.h,v 1.1 2015/10/09 01:10:27 deraadt Exp $	*/
d49 1
d78 1
@


1.1
log
@Rename tame() to pledge().  This fairly interface has evolved to be more
strict than anticipated.  It allows a programmer to pledge/promise/covenant
that their program will operate within an easily defined subset of the
Unix environment, or it pays the price.
@
text
@d1 1
a1 1
/*	$OpenBSD: tame.h,v 1.13 2015/10/08 17:29:43 deraadt Exp $	*/
d67 1
@

