head	1.29;
access;
symbols
	OPENBSD_6_1:1.29.0.6
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.29.0.2
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.28.0.4
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.6
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.28.0.2
	OPENBSD_5_7_BASE:1.28
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.23.0.6
	OPENBSD_5_5_BASE:1.23
	OPENBSD_5_4:1.23.0.2
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.22.0.4
	OPENBSD_5_3_BASE:1.22
	OPENBSD_5_2:1.22.0.2
	OPENBSD_5_2_BASE:1.22
	OPENBSD_5_1_BASE:1.21
	OPENBSD_5_1:1.21.0.8
	OPENBSD_5_0:1.21.0.6
	OPENBSD_5_0_BASE:1.21
	OPENBSD_4_9:1.21.0.4
	OPENBSD_4_9_BASE:1.21
	OPENBSD_4_8:1.21.0.2
	OPENBSD_4_8_BASE:1.21
	OPENBSD_4_7:1.18.0.26
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.28
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.24
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.22
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.20
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.18
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.16
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.14
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.12
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.10
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.8
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.18.0.6
	OPENBSD_3_6_BASE:1.18
	SMP_SYNC_A:1.18
	SMP_SYNC_B:1.18
	OPENBSD_3_5:1.18.0.4
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	UBC_SYNC_A:1.15
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.10.0.2
	UBC_BASE:1.10
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.7.0.12
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.10
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.8
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.6
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2016.06.01.04.53.54;	author guenther;	state Exp;
branches;
next	1.28;
commitid	Q8NO2OT64ejxtWtZ;

1.28
date	2014.12.17.06.58.10;	author guenther;	state Exp;
branches;
next	1.27;
commitid	DImukoCWyTxwdbuh;

1.27
date	2014.10.03.17.41.00;	author kettenis;	state Exp;
branches;
next	1.26;
commitid	h8HwsnqXqpePzqXu;

1.26
date	2014.07.10.19.00.23;	author matthew;	state Exp;
branches;
next	1.25;
commitid	KpHnh5grKD2w2Asr;

1.25
date	2014.06.27.20.50.43;	author matthew;	state Exp;
branches;
next	1.24;
commitid	cTtO84hDA01yGJfp;

1.24
date	2014.06.13.01.48.52;	author matthew;	state Exp;
branches;
next	1.23;
commitid	ZIoDqOtYqi740uHv;

1.23
date	2013.05.31.18.41.26;	author tedu;	state Exp;
branches;
next	1.22;

1.22
date	2012.07.21.06.46.58;	author matthew;	state Exp;
branches;
next	1.21;

1.21
date	2010.07.04.20.16.41;	author guenther;	state Exp;
branches;
next	1.20;

1.20
date	2010.05.21.21.17.43;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2010.05.18.22.24.54;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2003.07.21.22.52.19;	author tedu;	state Exp;
branches;
next	1.17;

1.17
date	2003.07.01.23.23.04;	author tedu;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.02.23.28.21;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.28.21.32.08;	author drahn;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.25.20.32.07;	author drahn;	state Exp;
branches;
next	1.13;

1.13
date	2003.04.25.18.30.18;	author drahn;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.14.04.53.50;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.06.13.36.52;	author art;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2001.05.10.14.51.20;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.09.14.20.50;	author art;	state Exp;
branches;
next	1.7;

1.7
date	98.06.02.05.22.26;	author deraadt;	state Exp;
branches
	1.7.8.1;
next	1.6;

1.6
date	98.01.02.05.32.52;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	97.11.14.20.56.06;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.11.13.18.35.33;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.03.24.17.01.33;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.03.03.12.12.01;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.28;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.28;	author deraadt;	state Exp;
branches;
next	;

1.7.8.1
date	2001.05.14.22.45.02;	author niklas;	state Exp;
branches;
next	1.7.8.2;

1.7.8.2
date	2001.07.04.11.00.23;	author niklas;	state Exp;
branches;
next	1.7.8.3;

1.7.8.3
date	2001.11.13.23.02.30;	author niklas;	state Exp;
branches;
next	1.7.8.4;

1.7.8.4
date	2002.03.28.14.52.01;	author niklas;	state Exp;
branches;
next	1.7.8.5;

1.7.8.5
date	2003.05.13.19.36.57;	author ho;	state Exp;
branches;
next	1.7.8.6;

1.7.8.6
date	2003.06.07.11.09.07;	author ho;	state Exp;
branches;
next	1.7.8.7;

1.7.8.7
date	2004.02.19.11.01.33;	author niklas;	state Exp;
branches;
next	;

1.10.2.1
date	2002.06.11.03.32.33;	author art;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2003.05.19.22.32.19;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Delete the kernel compat bits for old mmap() MAP_OLD* flags

ok deraadt@@ matthew@@ jca@@
@
text
@/*	$OpenBSD: mman.h,v 1.28 2014/12/17 06:58:10 guenther Exp $	*/
/*	$NetBSD: mman.h,v 1.11 1995/03/26 20:24:23 jtc Exp $	*/

/*-
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mman.h	8.1 (Berkeley) 6/2/93
 */

#ifndef _KERNEL
#include <sys/cdefs.h>
#endif

/*
 * Protections are chosen from these bits, or-ed together
 */
#define	PROT_NONE	0x00	/* no permissions */
#define	PROT_READ	0x01	/* pages can be read */
#define	PROT_WRITE	0x02	/* pages can be written */
#define	PROT_EXEC	0x04	/* pages can be executed */

/*
 * Flags contain sharing type and options.
 * Sharing types; choose one.
 */
#define	MAP_SHARED	0x0001	/* share changes */
#define	MAP_PRIVATE	0x0002	/* changes are private */

/*
 * Other flags
 */
#define	MAP_FIXED	0x0010	/* map addr must be exactly as requested */
#define	__MAP_NOREPLACE	0x0800	/* fail if address not available */
#define	MAP_ANON	0x1000	/* allocated from memory, swap space */
#define	MAP_ANONYMOUS	MAP_ANON	/* alternate POSIX spelling */
#define	__MAP_NOFAULT	0x2000

#define	MAP_FLAGMASK	0x3ff7

#ifndef _KERNEL
/*
 * Legacy defines for userland source compatibility.
 * Can be removed once no longer needed in base and ports.
 */
#define	MAP_COPY		MAP_PRIVATE	/* "copy" region at mmap time */
#define	MAP_FILE		0	/* map from file (default) */
#define	MAP_HASSEMAPHORE	0	/* region may contain semaphores */
#define	MAP_INHERIT		0	/* region is retained after exec */
#define	MAP_NOEXTEND		0	/* for MAP_FILE, don't change file size */
#define	MAP_NORESERVE		0	/* Sun: don't reserve needed swap area */
#define	MAP_RENAME		0	/* Sun: rename private pages to file */
#define	MAP_TRYFIXED		0	/* attempt hint address, even within heap */
#endif

/*
 * Error return from mmap()
 */
#define MAP_FAILED	((void *)-1)

/*
 * POSIX memory advisory values.
 * Note: keep consistent with the original definitions below.
 */
#define	POSIX_MADV_NORMAL	0	/* no further special treatment */
#define	POSIX_MADV_RANDOM	1	/* expect random page references */
#define	POSIX_MADV_SEQUENTIAL	2	/* expect sequential page references */
#define	POSIX_MADV_WILLNEED	3	/* will need these pages */
#define	POSIX_MADV_DONTNEED	4	/* don't need these pages */

#if __BSD_VISIBLE
/*
 * Original advice values, equivalent to POSIX definitions,
 * and few implementation-specific ones.  For in-kernel and historic use.
 */
#define	MADV_NORMAL		POSIX_MADV_NORMAL
#define	MADV_RANDOM		POSIX_MADV_RANDOM
#define	MADV_SEQUENTIAL		POSIX_MADV_SEQUENTIAL
#define	MADV_WILLNEED		POSIX_MADV_WILLNEED
#define	MADV_DONTNEED		POSIX_MADV_DONTNEED
#define	MADV_SPACEAVAIL		5	/* insure that resources are reserved */
#define	MADV_FREE		6	/* pages are empty, free them */
#endif

/*
 * Flags to minherit
 */
#define MAP_INHERIT_SHARE	0	/* share with child */
#define MAP_INHERIT_COPY	1	/* copy into child */
#define MAP_INHERIT_NONE	2	/* absent from child */
#define MAP_INHERIT_ZERO	3	/* zero in child */

/*
 * Flags to msync
 */
#define	MS_ASYNC	0x01	/* perform asynchronous writes */
#define	MS_SYNC		0x02	/* perform synchronous writes */
#define	MS_INVALIDATE	0x04	/* invalidate cached data */

/*
 * Flags to mlockall
 */
#define	MCL_CURRENT	0x01	/* lock all pages currently mapped */
#define	MCL_FUTURE	0x02	/* lock all pages mapped in the future */

#ifndef _KERNEL
#include <sys/_types.h>

#ifndef _SIZE_T_DEFINED_
#define _SIZE_T_DEFINED_
typedef __size_t	size_t;
#endif

#ifndef _OFF_T_DEFINED_
#define _OFF_T_DEFINED_
typedef __off_t		off_t;
#endif

__BEGIN_DECLS
void *	mmap(void *, size_t, int, int, int, off_t);
int	mprotect(void *, size_t, int);
int	munmap(void *, size_t);
int	msync(void *, size_t, int);
int	mlock(const void *, size_t);
int	munlock(const void *, size_t);
int	mlockall(int);
int	munlockall(void);
#if __BSD_VISIBLE
int	madvise(void *, size_t, int);
int	mincore(void *, size_t, char *);
int	minherit(void *, size_t, int);
void *	mquery(void *, size_t, int, int, int, off_t);
#endif
int	posix_madvise(void *, size_t, int);
int	shm_open(const char *, int, __mode_t);
int	shm_unlink(const char *);
int	shm_mkstemp(char *);
__END_DECLS

#endif /* !_KERNEL */
@


1.28
log
@Prefer MADV_* over POSIX_MADV_* in kernel for consistency: the latter
doesn't have all the values and therefore can't be used everywhere.

ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.27 2014/10/03 17:41:00 kettenis Exp $	*/
a63 14

#ifdef _KERNEL
/*
 * Backwards compat for OpenBSD 5.5.
 * TODO: Remove after OpenBSD 5.7 release.
 */
#define	MAP_OLDCOPY		0x0004	/* alias for MAP_PRIVATE */
#define	MAP_OLDRENAME		0x0020
#define	MAP_OLDNORESERVE	0x0040
#define	MAP_OLDINHERIT		0x0080
#define	MAP_OLDNOEXTEND		0x0100
#define	MAP_OLDHASSEMAPHORE	0x0200
#define	MAP_OLDTRYFIXED		0x0400
#endif
@


1.27
log
@Introduce __MAP_NOFAULT, a mmap(2) flag that makes sure a mapping will not
cause a SIGSEGV or SIGBUS when a mapped file gets truncated.  Access to
pages that are not backed by a file on such a mapping will be replaced by
zero-filled anonymous pages.  Makes passing file descriptors of mapped files
usable without having to play tricks with signal handlers.

"steal your mmap flag" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.26 2014/07/10 19:00:23 matthew Exp $	*/
d112 1
a112 1
 * and few implementation-specific ones.
@


1.26
log
@Add MAP_ANONYMOUS as a synonym for MAP_ANON, per POSIX proposal

ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.25 2014/06/27 20:50:43 matthew Exp $	*/
d61 1
d63 1
a63 1
#define	MAP_FLAGMASK	0x1ff7
@


1.25
log
@Cleanup support for legacy mmap flags

Move all legacy MAP_FOO values behind #ifndef _KERNEL and redefine
them to either be aliases for existing flags (e.g., MAP_COPY ->
MAP_PRIVATE) or 0.

Also, add MAP_OLDFOO defines (behind #ifndef _KERNEL) so the kernel
and kdump can remain compatible with current OpenBSD binaries.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.24 2014/06/13 01:48:52 matthew Exp $	*/
d60 1
@


1.24
log
@Add support for MAP_INHERIT_ZERO.

This provides a way for a process to designate pages in its address
space that should be replaced by fresh, zero-initialized anonymous
memory in forked child processes, rather than being copied or shared.

ok jmc, kettenis, tedu, deraadt; positive feedback from many more
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.23 2013/05/31 18:41:26 tedu Exp $	*/
a52 1
#define	MAP_COPY	0x0004	/* "copy" region at mmap time */
d57 3
a59 7
#define	MAP_FIXED	 0x0010	/* map addr must be exactly as requested */
#define	MAP_RENAME	 0x0020	/* Sun: rename private pages to file */
#define	MAP_NORESERVE	 0x0040	/* Sun: don't reserve needed swap area */
#define	MAP_INHERIT	 0x0080	/* region is retained after exec */
#define	MAP_NOEXTEND	 0x0100	/* for MAP_FILE, don't change file size */
#define	MAP_HASSEMAPHORE 0x0200	/* region may contain semaphores */
#define	MAP_TRYFIXED	 0x0400 /* attempt hint address, even within heap */
d61 1
a61 1
#define	__MAP_NOREPLACE	 0x0800 /* fail if address not available */
d63 15
d79 2
a80 1
 * Error return from mmap()
d82 9
a90 1
#define MAP_FAILED	((void *)-1)
d93 1
a93 1
 * Mapping type
d95 1
a95 3
#define	MAP_FILE	0x0000	/* map from file (default) */
#define	MAP_ANON	0x1000	/* allocated from memory, swap space */
#define	MAP_FLAGMASK	0x1ff7
@


1.23
log
@add shm_open and friends which i have been told ports programs would
like to use.
ok deraadt guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.22 2012/07/21 06:46:58 matthew Exp $	*/
d110 1
a110 2
#define MAP_INHERIT_DONATE_COPY	3	/* copy and delete -- not
					   implemented in UVM */
@


1.22
log
@Add a new mmap(2) flag __MAP_NOREMAP for use with MAP_FIXED to
indicate that the kernel should fail with MAP_FAILED if the specified
address is not currently available instead of unmapping it.

Change ld.so on i386 to make use of __MAP_NOREMAP to improve
reliability.

__MAP_NOREMAP diff by guenther based on an earlier diff by Ariane;
ld.so bits by guenther and me
bulk build stress testing of earlier diffs by sthen
ok deraadt; committing now for further testing
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.21 2010/07/04 20:16:41 guenther Exp $	*/
d155 3
@


1.21
log
@Remove an obsolete (was in rev 1.1) and unclear comment
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.20 2010/05/21 21:17:43 miod Exp $	*/
d66 2
d78 1
a78 1
#define	MAP_FLAGMASK	0x17f7
@


1.20
log
@defintion -> definition.
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.19 2010/05/18 22:24:54 tedu Exp $	*/
a137 1
/* Some of these int's should probably be size_t's */
@


1.19
log
@add posix_madvise, posix_memalign, strndup, and strnlen.  mostly from
brad and millert, with hints from guenther, jmc, and otto I think.
ok previous.
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.18 2003/07/21 22:52:19 tedu Exp $	*/
d80 1
a80 1
 * Note: keep consistent with the original defintions below.
d90 1
a90 1
 * Original advice values, equivalent to POSIX defintions,
@


1.18
log
@enforce restrictions on prot and flags to mprotect and mmap.  invalid or
undefined flags are now rejected instead of silently ignored.  makes
"unintentional" mprotect calls a touch harder.
ok art@@ deraadt@@ jason@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.17 2003/07/01 23:23:04 tedu Exp $	*/
d35 4
d79 2
a80 1
 * Advice to madvise
d82 19
a100 7
#define	MADV_NORMAL	0	/* no further special treatment */
#define	MADV_RANDOM	1	/* expect random page references */
#define	MADV_SEQUENTIAL	2	/* expect sequential page references */
#define	MADV_WILLNEED	3	/* will need these pages */
#define	MADV_DONTNEED	4	/* dont need these pages */
#define	MADV_SPACEAVAIL	5	/* insure that resources are reserved */
#define	MADV_FREE	6	/* pages are empty, free them */
d125 1
d127 9
a135 1
#include <sys/cdefs.h>
d147 1
d152 2
@


1.17
log
@add MAP_TRYFIXED, mostly to help emulate other systems.
when set, uvm will not attempt to avoid a heap address, if requested.
from todd vierling, via
http://marc.theaimsgroup.com/?l=netbsd-tech-kern&m=105612525808607&w=1
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.16 2003/06/02 23:28:21 millert Exp $	*/
d72 1
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.15 2003/04/28 21:32:08 drahn Exp $	*/
d60 1
@


1.15
log
@Change mquery() function call signature to be the same a mmap(). It
needs the prot/flags info and passing the addresses via arg/return allows
it to be traced via ktrace better than an in/out paramter.
This adds a new mquery syscall and renames the old one to omquery.
New kernel _MUST_ be built, booted, and 'make includes' before building
ld.so with this change.
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.14 2003/04/25 20:32:07 drahn Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.14
log
@backout mquery change, something broke when not combined with a different diff.
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.12 2003/04/14 04:53:50 art Exp $	*/
d126 1
a126 1
int	mquery(int flags, void **addr, size_t size, int fd, off_t off);
@


1.13
log
@change mquery() function call signature to be the same a mmap(). It
needs the prot/flags info and passing the addresses via arg/return allows
it to be traced via ktrace better than an in/out paramter.
This adds a new mquery syscall and renames the old one to omquery.
New kernel _MUST_ be built and installed before building ld.so with this change.
ok millert@@ tedu@@
@
text
@d126 1
a126 1
void *	mquery(void *, size_t, int, int, int, off_t);
@


1.12
log
@There are two related changes.

The first one is an mquery(2) syscall. It's for asking the VM system
about where to map things. It will be used by ld.so, read the man page
for details.

The second change is related and is a centralization of uvm_map hint
that all callers of uvm_map calculated. This will allow us to adjust
this hint on architectures that have segments for non-exec mappings.

deraadt@@ drahn@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.11 2002/03/14 01:27:14 millert Exp $	*/
d126 1
a126 1
int	mquery(int flags, void **addr, size_t size, int fd, off_t off);
@


1.11
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.10 2001/11/06 13:36:52 art Exp $	*/
a108 1

d126 1
@


1.10
log
@More sync to NetBSD.
 - Use malloc/free instead of MALLOC/FREE for variable sized allocations.
 - Move the memory inheritance code to sys/mman.h and rename from VM_* to MAP_*
 - various cleanups and simplifications.
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.9 2001/05/10 14:51:20 art Exp $	*/
d116 11
a126 11
void *	mmap __P((void *, size_t, int, int, int, off_t));
int	mprotect __P((void *, size_t, int));
int	munmap __P((void *, size_t));
int	msync __P((void *, size_t, int));
int	mlock __P((const void *, size_t));
int	munlock __P((const void *, size_t));
int	mlockall __P((int));
int	munlockall __P((void));
int	madvise __P((void *, size_t, int));
int	mincore __P((void *, size_t, char *));
int	minherit __P((void *, size_t, int));
@


1.10.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.10 2001/11/06 13:36:52 art Exp $	*/
d116 11
a126 11
void *	mmap(void *, size_t, int, int, int, off_t);
int	mprotect(void *, size_t, int);
int	munmap(void *, size_t);
int	msync(void *, size_t, int);
int	mlock(const void *, size_t);
int	munlock(const void *, size_t);
int	mlockall(int);
int	munlockall(void);
int	madvise(void *, size_t, int);
int	mincore(void *, size_t, char *);
int	minherit(void *, size_t, int);
@


1.10.2.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d109 1
a126 1
void *	mquery(void *, size_t, int, int, int, off_t);
@


1.9
log
@More sync to NetBSD.
The highlight is some more advices to madvise(2).
 o MADV_DONTNEED will deactive the pages in the given range giving a quicker
   reuse.
 o MADV_FREE will garbage-collect the pages and swap resources causing the
   next fault to either page in new pages from backing store (mapped vnode)
   or allocate new zero-fill pages (anonymous mapping).
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.8 2001/03/09 14:20:50 art Exp $	*/
d86 9
@


1.8
log
@More syncing to NetBSD.

Implements mincore(2), mlockall(2) and munlockall(2). mlockall and munlockall
are disabled for the moment.

The rest is mostly cosmetic.
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.7 1998/06/02 05:22:26 deraadt Exp $	*/
d84 2
@


1.7
log
@const mlock(2) and munlock(2)
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.6 1998/01/02 05:32:52 deraadt Exp $	*/
d92 7
d111 2
@


1.7.8.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.8 2001/03/09 14:20:50 art Exp $	*/
a91 7
/*
 * Flags to mlockall
 */
#define	MCL_CURRENT	0x01	/* lock all pages currently mapped */
#define	MCL_FUTURE	0x02	/* lock all pages mapped in the future */


a103 2
int	mlockall __P((int));
int	munlockall __P((void));
@


1.7.8.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.7.8.1 2001/05/14 22:45:02 niklas Exp $	*/
a83 2
#define	MADV_SPACEAVAIL	5	/* insure that resources are reserved */
#define	MADV_FREE	6	/* pages are empty, free them */
@


1.7.8.3
log
@merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a85 9

/*
 * Flags to minherit
 */
#define MAP_INHERIT_SHARE	0	/* share with child */
#define MAP_INHERIT_COPY	1	/* copy into child */
#define MAP_INHERIT_NONE	2	/* absent from child */
#define MAP_INHERIT_DONATE_COPY	3	/* copy and delete -- not
					   implemented in UVM */
@


1.7.8.4
log
@Merge in -current from roughly a week ago
@
text
@d116 11
a126 11
void *	mmap(void *, size_t, int, int, int, off_t);
int	mprotect(void *, size_t, int);
int	munmap(void *, size_t);
int	msync(void *, size_t, int);
int	mlock(const void *, size_t);
int	munlock(const void *, size_t);
int	mlockall(int);
int	munlockall(void);
int	madvise(void *, size_t, int);
int	mincore(void *, size_t, char *);
int	minherit(void *, size_t, int);
@


1.7.8.5
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.7.8.4 2002/03/28 14:52:01 niklas Exp $	*/
d109 1
a126 1
void *	mquery(void *, size_t, int, int, int, off_t);
@


1.7.8.6
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.7.8.5 2003/05/13 19:36:57 ho Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.7.8.7
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a59 1
#define	MAP_TRYFIXED	 0x0400 /* attempt hint address, even within heap */
a70 1
#define	MAP_FLAGMASK	0x17f7
@


1.6
log
@make mmap() return void *, add MAP_FAILED
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.5 1997/11/14 20:56:06 deraadt Exp $	*/
d102 2
a103 2
int	mlock __P((void *, size_t));
int	munlock __P((void *, size_t));
@


1.5
log
@convert to void *addr
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.4 1997/11/13 18:35:33 deraadt Exp $	*/
d66 5
d98 1
a98 1
caddr_t	mmap __P((void *, size_t, int, int, int, off_t));
@


1.4
log
@make msync() have 3 args
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.3 1996/03/24 17:01:33 tholo Exp $	*/
d93 3
a95 3
caddr_t	mmap __P((caddr_t, size_t, int, int, int, off_t));
int	mprotect __P((caddr_t, size_t, int));
int	munmap __P((caddr_t, size_t));
d97 5
a101 4
int	mlock __P((caddr_t, size_t));
int	munlock __P((caddr_t, size_t));
int	madvise __P((caddr_t, size_t, int));
int	mincore __P((caddr_t, size_t, char *));
@


1.3
log
@Add prototype for mincore(2)
@
text
@d1 1
a1 1
/*	$OpenBSD: mman.h,v 1.2 1996/03/03 12:12:01 niklas Exp $	*/
d80 7
d96 1
a96 1
int	msync __P((caddr_t, size_t));
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d93 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
