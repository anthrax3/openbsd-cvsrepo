head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.4
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.6
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.2
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.4
date	2016.06.07.07.53.33;	author mpi;	state Exp;
branches;
next	1.3;
commitid	P20voeFmD7sc85LW;

1.3
date	2015.11.23.10.56.20;	author mpi;	state Exp;
branches;
next	1.2;
commitid	cBdJiiWQBFMz5dcw;

1.2
date	2015.09.13.09.05.33;	author dlg;	state Exp;
branches;
next	1.1;
commitid	sFZl8rnrk1NZltdq;

1.1
date	2015.09.11.19.13.22;	author dlg;	state Exp;
branches;
next	;
commitid	G2Lp7EfhVooz9MiS;


desc
@@


1.4
log
@Move initialization macro outside of #define _KERNEL to use them in
ART regression tests.

ok dlg@@, jmatthew@@
@
text
@/*	$OpenBSD: refcnt.h,v 1.3 2015/11/23 10:56:20 mpi Exp $ */

/*
 * Copyright (c) 2015 David Gwynne <dlg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _SYS_REFCNT_H_
#define _SYS_REFCNT_H_

struct refcnt {
	unsigned int refs;
};

#define REFCNT_INITIALIZER()	{ .refs = 1 }

#ifdef _KERNEL

void	refcnt_init(struct refcnt *);
void	refcnt_take(struct refcnt *);
int	refcnt_rele(struct refcnt *);
void	refcnt_rele_wake(struct refcnt *);
void	refcnt_finalize(struct refcnt *, const char *);

#endif /* _KERNEL */

#endif /* _SYS_REFCNT_H_ */
@


1.3
log
@Do not include <sys/atomic.h> inside <sys/refcnt.h>.

Prevent lazy developers, like David and I, to use atomic operations
without including <sys/atomic.h>.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: refcnt.h,v 1.2 2015/09/13 09:05:33 dlg Exp $ */
d26 2
a28 2

#define REFCNT_INITIALIZER()	{ .refs = 1 }
@


1.2
log
@tweak ordering slightly
@
text
@d1 1
a1 1
/*	$OpenBSD: refcnt.h,v 1.1 2015/09/11 19:13:22 dlg Exp $ */
d30 3
a32 6
#include <sys/atomic.h>

#define refcnt_init(_r)		do { (_r)->refs = 1; } while (0)
#define refcnt_take(_r)		atomic_inc_int(&(_r)->refs)
#define refcnt_rele(_r)		(atomic_dec_int_nv(&(_r)->refs) == 0)

@


1.1
log
@introduce a wrapper around reference counts called refcnt.

its basically atomic inc/dec, but it includes magical sleep code
in refcnt_finalise that is better written once than many times.
refcnt_finalise sleeps until all references are released and does
so with sleep_setup and sleep_finalize, which is fairly subtle.

putting this in now so i we can get on with work in the stack, a
proper discussion about visibility and how available intrinsics
should be in the kernel can happen after next week.

with help from guenther@@
ok guenther@@ deraadt@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: srp.h,v 1.3 2015/09/09 11:21:51 dlg Exp $ */
a21 2
#include <sys/atomic.h>

d29 2
@

