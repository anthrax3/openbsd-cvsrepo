head	1.5;
access;
symbols
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.5
date	2017.03.08.06.50.38;	author jca;	state Exp;
branches;
next	1.4;
commitid	6TIXYibrqoVAwDe7;

1.4
date	2017.01.29.19.58.47;	author bluhm;	state Exp;
branches;
next	1.3;
commitid	3e3CkrbYekyVOcxy;

1.3
date	2017.01.25.17.34.31;	author bluhm;	state Exp;
branches;
next	1.2;
commitid	pVtptbHA3yk4jSpN;

1.2
date	2015.12.05.22.16.27;	author mpi;	state Exp;
branches;
next	1.1;
commitid	qNL5ua4P9KvwqEmY;

1.1
date	2015.12.03.12.42.03;	author goda;	state Exp;
branches;
next	;
commitid	FFhJyNTOYvvsqwUi;


desc
@@


1.5
log
@Sync struct etheripstat decl with netinet/ip_ether.h
@
text
@/*
 * Copyright (c) 2015 Kazuya GODA <goda@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _NET_IF_ETHERIP_H_
#define _NET_IF_ETHERIP_H_

#if 0
/*
 * TODO:
 *   At this stage, struct etheripstat and struct etherip_header,
 *   and EtherIP sysctl objects are present at netinet/ip_ether.h.
 *   When implementation of etherip is removed from gif(4), there
 *   are moved here.
 */

extern int etherip_allow;
extern struct etheripstat etheripstat;

struct etheripstat {
	u_int64_t	etherips_hdrops;	/* packet shorter than header shows */
	u_int64_t	etherips_qfull;		/* bridge queue full, packet dropped */
	u_int64_t	etherips_noifdrops;	/* no interface/bridge information */
	u_int64_t	etherips_pdrops;	/* packet dropped due to policy */
	u_int64_t	etherips_adrops;	/* all other drops */
	u_int64_t	etherips_ipackets;	/* total input packets */
	u_int64_t	etherips_opackets;	/* total output packets */
	u_int64_t	etherips_ibytes;	/* input bytes */
	u_int64_t	etherips_obytes;	/* output bytes */
};

struct etherip_header {
#if BYTE_ORDER == LITTLE_ENDIAN
	unsigned int	eip_res:4;	/* reserved */
	unsigned int	eip_ver:4;	/* version */
#endif
#if BYTE_ORDER == BIG_ENDIAN
	unsigned int	eip_ver:4;	/* version */
	unsigned int	eip_res:4;	/* reserved */
#endif
	uint8_t	eip_pad;	/* required padding byte */
} __packed;

#define ETHERIP_VERSION		0x03

/*
 * Names for Ether-IP sysctl objects
 */
#define	ETHERIPCTL_ALLOW	1	/* accept incoming EtherIP packets */
#define	ETHERIPCTL_STATS	2	/* etherip stats */
#define	ETHERIPCTL_MAXID	3

#define ETHERIPCTL_NAMES {			\
		{ 0, 0 },			\
		{ "allow", CTLTYPE_INT },	\
		{ "stats", CTLTYPE_STRUCT },	\
}


#endif /* 0 */

int ip_etherip_sysctl(int *, uint, void *, size_t *, void *, size_t);
int ip_etherip_output(struct ifnet *, struct mbuf *);
int ip_etherip_input(struct mbuf **, int *, int);

#ifdef INET6
int ip6_etherip_output(struct ifnet *, struct mbuf *);
int ip6_etherip_input(struct mbuf **, int *, int);
#endif /* INET6 */


#endif /* _NET_IF_ETHERIP_H_ */
@


1.4
log
@Change the IPv4 pr_input function to the way IPv6 is implemented,
to get rid of struct ip6protosw and some wrapper functions.  It is
more consistent to have less different structures.  The divert_input
functions cannot be called anyway, so remove them.
OK visa@@ mpi@@
@
text
@d33 9
a41 9
	uint32_t	etherip_hdrops;	/* packet shorter than header shows */
	uint32_t	etherip_qfull;	/* bridge queue full, packet dropped */
	uint32_t	etherip_noifdrops;	/* no interface/bridge info */
	uint32_t	etherip_pdrops;		/* dropped due to policy */
	uint32_t	etherip_adrops;		/* all other drops */
	uint32_t	etherip_ipackets;	/* total input packets */
	uint32_t	etherip_opackets;	/* total output packets */
	uint64_t	etherip_ibytes;		/* input bytes */
	uint64_t	etherip_obytes;		/* output bytes */
@


1.3
log
@Since raw_input() and route_input() are gone from pr_input, we can
make the variable parameters of the protocol input functions fixed.
Also add the proto to make it similar to IPv6.
OK mpi@@ guenther@@ millert@@
@
text
@d76 1
a76 1
void ip_etherip_input(struct mbuf *, int, int);
@


1.2
log
@Multiple cleanups.

ok goda@@, yasuoka@@
@
text
@d76 1
a76 1
void ip_etherip_input(struct mbuf *, ...);
@


1.1
log
@Implement etherip(4) driver

This commit is not removing the existing EtherIP part of gif(4) and
it keeps EtherIP of gif(4) working.

ok jbg@@ sthen@@ mpi@@ reyk@@ yasuoka@@
@
text
@d23 4
a26 3
 *   At this stage, struct etheripstat and struct etherip_header, and EtherIP sysctl
 *   objects  are present at netinet/ip_ether.h .
 *   When implementation of etherip is removed from gif(4), there are moved here.
d33 9
a41 9
	u_int32_t	etherip_hdrops;		/* packet shorter than header shows */
	u_int32_t	etherip_qfull;		/* bridge queue full, packet dropped */
	u_int32_t	etherip_noifdrops;	/* no interface/bridge information */
	u_int32_t	etherip_pdrops;		/* packet dropped due to policy */
	u_int32_t	etherip_adrops;         /* all other drops */
	u_int32_t	etherip_ipackets;	/* total input packets */
	u_int32_t	etherip_opackets;	/* total output packets */
	u_int64_t	etherip_ibytes;		/* input bytes */
	u_int64_t	etherip_obytes;		/* output bytes */
d46 2
a47 2
	u_int		eip_res:4;	/* reserved */
	u_int		eip_ver:4;	/* version */
d50 2
a51 2
	u_int		eip_ver:4;	/* version */
	u_int		eip_res:4;	/* reserved */
d53 1
a53 1
	u_int8_t	eip_pad;	/* required padding byte */
d74 1
a74 1
int ip_etherip_sysctl(int *, u_int, void *, size_t *, void *, size_t);
@

