head	1.8;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	UBC_SYNC_A:1.8
	UBC_SYNC_B:1.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.2
	SMP_BASE:1.1
	kame_19991208:1.1;
locks; strict;
comment	@ * @;


1.8
date	2001.06.09.06.44.47;	author angelos;	state dead;
branches;
next	1.7;

1.7
date	2001.06.09.06.16.38;	author angelos;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.16.08.48.03;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.08.14.51.21;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.06.01.31.57;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.06.00.22.22;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.19.09.17.35;	author itojun;	state Exp;
branches;
next	1.1;

1.1
date	99.12.08.06.50.18;	author itojun;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2001.05.14.22.40.03;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.07.04.10.54.14;	author niklas;	state dead;
branches;
next	;


desc
@@


1.8
log
@Not needed anymore.
@
text
@/*	$OpenBSD: net_osdep.h,v 1.7 2001/06/09 06:16:38 angelos Exp $	*/
/*	$KAME: net_osdep.h,v 1.40 2001/02/14 17:07:50 itojun Exp $	*/

/*
 * Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
/*
 * glue for kernel code programming differences.
 */

/*
 * OS dependencies:
 *
 * - ifa_ifwithaf()
 *   bsdi[34], netbsd, and openbsd define it in sys/net/if.c
 *   freebsd (all versions) does not have it.
 *  
 * - struct rt_addrinfo
 *   bsdi4, netbsd 1.5R and beyond: rti_addrs, rti_info[], rti_flags, rti_ifa,
 *	rti_ifp, and rti_rtm.
 *   others: rti_addrs and rti_info[] only.
 *
 * - ifa->ifa_rtrequest
 *   bsdi4, netbsd 1.5R and beyond: rt_addrinfo *
 *   others: sockaddr * (note that sys/net/route.c:rtrequest() has an unsafe
 *	typecast code, from 4.3BSD-reno)
 *
 * - side effects of rtrequest[1](RTM_DELETE)
 *	BSDI[34]: delete all cloned routes underneath the route.
 *	FreeBSD[234]: delete all protocol-cloned routes underneath the route.
 *		      note that cloned routes from an interface direct route
 *		      still remain.
 *	NetBSD: 1.5 have no side effects.  KAME/netbsd15, and 1.5R, have
 *		the same effects as of BSDI.
 *	OpenBSD: 2.8 have no side effects.  KAME/openbsd28, and 2.9 have
 *		the same effects as of BSDI.
 *
 * - privileged process
 *	NetBSD, FreeBSD 3
 *		struct proc *p;
 *		if (p && !suser(p->p_ucred, &p->p_acflag))
 *			privileged;
 *	FreeBSD 4
 *		struct proc *p;
 *		if (p && !suser(p))
 *			privileged;
 *	OpenBSD, BSDI [34], FreeBSD 2
 *		struct socket *so;
 *		if (so->so_state & SS_PRIV)
 *			privileged;
 * - foo_control
 *	NetBSD, FreeBSD 3
 *		needs to give struct proc * as argument
 *	OpenBSD, BSDI [34], FreeBSD 2
 *		do not need struct proc *
 *
 * - bpf:
 *	OpenBSD, NetBSD 1.5, BSDI [34]
 *		need caddr_t * (= if_bpf **) and struct ifnet *
 *	FreeBSD 2, FreeBSD 3, NetBSD 1.6? (1.5N and later)
 *		need only struct ifnet * as argument
 *
 * - struct ifnet
 *			use queue.h?	member names	if name
 *			---		---		---
 *	FreeBSD 2	no		old standard	if_name+unit
 *	FreeBSD 3	yes		strange		if_name+unit
 *	OpenBSD		yes		standard	if_xname
 *	NetBSD		yes		standard	if_xname
 *	BSDI [34]	no		old standard	if_name+unit
 *
 * - usrreq
 *	NetBSD, OpenBSD, BSDI [34], FreeBSD 2
 *		single function with PRU_xx, arguments are mbuf
 *	FreeBSD 3
 *		separates functions, non-mbuf arguments
 *
 * - {set,get}sockopt
 *	NetBSD, OpenBSD, BSDI [34], FreeBSD 2
 *		manipulation based on mbuf
 *	FreeBSD 3
 *		non-mbuf manipulation using sooptcopy{in,out}()
 *
 * - timeout() and untimeout()
 *	NetBSD 1.4.x, OpenBSD, BSDI [34], FreeBSD 2
 *		timeout() is a void function
 *	FreeBSD 3
 *		timeout() is non-void, must keep returned value for untimeout()
 *		callout_xx is also available (sys/callout.h)
 *	NetBSD 1.5
 *		timeout() is obsoleted, use callout_xx (sys/callout.h)
 *	OpenBSD 2.8
 *		timeout_{add,set,del} is encouraged (sys/timeout.h)
 *
 * - sysctl
 *	NetBSD, OpenBSD
 *		foo_sysctl()
 *	BSDI [34]
 *		foo_sysctl() but with different style
 *	FreeBSD 2, FreeBSD 3
 *		linker hack
 *
 * - if_ioctl
 *	NetBSD, FreeBSD 3, BSDI [34]
 *		2nd argument is u_long cmd
 *	FreeBSD 2
 *		2nd argument is int cmd
 *
 * - if attach routines
 *	NetBSD
 *		void xxattach(int);
 *	FreeBSD 2, FreeBSD 3
 *		void xxattach(void *);
 *		PSEUDO_SET(xxattach, if_xx);
 *
 * - ovbcopy()
 *	in NetBSD 1.4 or later, ovbcopy() is not supplied in the kernel.
 *	bcopy() is safe against overwrites.
 *
 * - splnet()
 *	NetBSD 1.4 or later requires splsoftnet().
 *	other operating systems use splnet().
 *
 * - dtom()
 *	NEVER USE IT!
 *
 * - struct ifnet for loopback interface
 *	BSDI3: struct ifnet loif;
 *	BSDI4: struct ifnet *loifp;
 *	NetBSD, OpenBSD 2.8, FreeBSD2: struct ifnet loif[NLOOP];
 *	OpenBSD 2.9: struct ifnet *lo0ifp;
 *
 *	odd thing is that many of them refers loif as ifnet *loif,
 *	not loif[NLOOP], from outside of if_loop.c.
 *
 * - number of bpf pseudo devices
 *	others: bpfilter.h, NBPFILTER
 *	FreeBSD4: bpf.h, NBPF
 *	solution:
 *		#if defined(__FreeBSD__) && __FreeBSD__ >= 4
 *		#include "bpf.h"
 *		#define NBPFILTER	NBPF
 *		#else
 *		#include "bpfilter.h"
 *		#endif
 *
 * - protosw for IPv4 (sys/netinet)
 *	FreeBSD4: struct ipprotosw in netinet/ipprotosw.h
 *	others: struct protosw in sys/protosw.h
 *
 * - protosw in general.
 *	NetBSD 1.5 has extra member for ipfilter (netbsd-current dropped
 *	it so it will go away in 1.6).
 *	NetBSD 1.5 requires PR_LISTEN flag bit with protocols that permit
 *	listen/accept (like tcp).
 *
 * - header files with defopt (opt_xx.h)
 *	FreeBSD3: opt_{inet,ipsec,ip6fw,altq}.h
 *	FreeBSD4: opt_{inet,inet6,ipsec,ip6fw,altq}.h
 *	NetBSD: opt_{inet,ipsec,altq}.h
 *	others: does not use defopt
 *
 * - IN_MULTICAST/IN_CLASS[A-D] macro.
 *	OpenBSD and NetBSD: net endian (kernel) or host endian (userland)
 *	others: always host endian
 *
 * - (m->m_flags & M_EXT) != 0 does *not* mean that the max data length of
 *   the mbuf == MCLBYTES.
 *
 * - sys/kern/uipc_mbuf.c:m_dup()
 *	freebsd[34]: copies the whole mbuf chain.
 *	netbsd: similar arg with m_copym().
 *	others: no m_dup().
 *
 * - ifa_refcnt (struct ifaddr) management (IFAREF/IFAFREE).
 *	NetBSD 1.5: always use IFAREF whenever reference gets added.
 *		always use IFAFREE whenever reference gets freed.
 *		IFAFREE frees ifaddr when ifa_refcnt reaches 0.
 *	others: do not increase refcnt for ifp->if_addrlist and in_ifaddr.
 *		use IFAFREE once when ifaddr is disconnected from
 *		ifp->if_addrlist and in_ifaddr.  IFAFREE frees ifaddr when
 *		ifa_refcnt goes negative.
 */

#ifndef _NET_NET_OSDEP_H_DEFINED_
#define _NET_NET_OSDEP_H_DEFINED_
#ifdef _KERNEL

#define if_name(ifp)	((ifp)->if_xname)
#define HAVE_NRL_INPCB

#endif /* _KERNEL */
#endif /*_NET_NET_OSDEP_H_DEFINED_ */
@


1.7
log
@By popular demand, protect from multiple inclusion, and fix to use the
same naming style.
@
text
@d1 1
a1 1
/*	$OpenBSD: net_osdep.h,v 1.6 2001/02/16 08:48:03 itojun Exp $	*/
@


1.6
log
@sync whitespace/comment with kame.  to help merge tasks
@
text
@d1 1
a1 1
/*	$OpenBSD: net_osdep.h,v 1.5 2001/02/08 14:51:21 itojun Exp $	*/
d210 2
a211 2
#ifndef __NET_NET_OSDEP_H_DEFINED_
#define __NET_NET_OSDEP_H_DEFINED_
a213 1
#if defined(__NetBSD__) || defined(__OpenBSD__)
a214 20
#else
struct ifnet;
extern char *if_name __P((struct ifnet *));
#endif

#ifdef __FreeBSD__
#define HAVE_OLD_BPF
#endif

#if defined(__FreeBSD__) && __FreeBSD__ >= 3
#define ifa_list	ifa_link
#define if_addrlist	if_addrhead
#define if_list		if_link
#endif

#if defined(__NetBSD__) && __NetBSD_Version__ >= 104000000
#define ovbcopy		bcopy
#endif

#if defined(__OpenBSD__) || (defined(__bsdi__) && _BSDI_VERSION >= 199802)
a215 1
#endif
d217 2
a218 2
#endif /*_KERNEL*/
#endif /*__NET_NET_OSDEP_H_DEFINED_ */
@


1.5
log
@use timeout_xx() throughout sys/netinet6.  sync with kame.
@
text
@d1 2
a2 2
/*	$OpenBSD: net_osdep.h,v 1.4 2001/02/06 01:31:57 itojun Exp $	*/
/*	$KAME: net_osdep.h,v 1.36 2001/02/08 10:21:27 itojun Exp $	*/
d58 4
a61 4
 *	NetBSD: official release versions (the latest is 1.5 as of Jan. 2001)
 *		have no side effects.  KAME for NetBSD has the same effects
 *		as of BSDI.
 *	OpenBSD: no side effects.
d81 1
d87 1
d96 1
d102 1
d108 1
d114 1
d119 1
d133 1
d144 1
d176 5
a180 2
 * - protosw.  NetBSD 1.5 has extra member for ipfilter.  NetBSD 1.5 requires
 *   PR_LISTEN flag bit with protocols that permit listen/accept (like tcp).
d194 5
@


1.4
log
@sync with latest kame (comment only)
@
text
@d1 2
a2 2
/*	$OpenBSD: net_osdep.h,v 1.3 2001/02/06 00:22:22 mickey Exp $	*/
/*	$KAME: net_osdep.h,v 1.33 2001/01/31 09:36:16 jinmei Exp $	*/
d59 3
a61 3
 *              have no side effects.  KAME for NetBSD has the same effects
 *              as of BSDI.
 *      OpenBSD: no side effects.
d111 2
d146 2
a147 1
 *	NetBSD, OpenBSD, FreeBSD2: struct ifnet loif[NLOOP];
@


1.3
log
@allow changing number of loopbacks in ukc.
change rest of the code to use lo0ifp pointing
to the corresponding struct ifnet.
itojun@@ and niklas@@ ok
@
text
@d1 2
a2 2
/*	$OpenBSD: net_osdep.h,v 1.2 2000/08/19 09:17:35 itojun Exp $	*/
/*	$KAME: net_osdep.h,v 1.23 2000/08/19 00:58:11 itojun Exp $	*/
d39 4
d44 8
a51 2
 *   all *BSDs except bsdi4 only have two members; rti_addrs and rti_info[].
 *   bsdi4 has additional members; rti_flags, rti_ifa, rti_ifp, and rti_rtm.
d58 5
a62 1
 *	NetBSD, OpenBSD: no side effects.
d82 1
a82 1
 *	OpenBSD, NetBSD, BSDI [34]
d84 1
a84 1
 *	FreeBSD 2, FreeBSD 3
d105 1
a105 1
 *	NetBSD, OpenBSD, BSDI [34], FreeBSD 2
d109 2
d144 1
a144 2
 *	NetBSD, FreeBSD2: struct ifnet loif[NLOOP];
 *	OpenBSD: lo0ifp
d164 3
d179 9
@


1.2
log
@- upgrade icmp6 node information query support to 06 draft.
- pedant: possible alignment issue in ALIGN > 8 arch (should be okay for now)
(sync with kame)
@
text
@d1 1
a1 1
/*	$OpenBSD: net_osdep.h,v 1.1 1999/12/08 06:50:18 itojun Exp $	*/
d128 2
a129 1
 *	NetBSD, OpenBSD, FreeBSD2: struct ifnet loif[NLOOP];
@


1.1
log
@bring in KAME IPv6 code, dated 19991208.
replaces NRL IPv6 layer.  reuses NRL pcb layer.  no IPsec-on-v6 support.
see sys/netinet6/{TODO,IMPLEMENTATION} for more details.

GENERIC configuration should work fine as before.  GENERIC.v6 works fine
as well, but you'll need KAME userland tools to play with IPv6 (will be
bringed into soon).
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d7 1
a7 1
 * 
d19 1
a19 1
 * 
d39 10
d54 4
d82 1
a82 1
 *		single function with PRU_xx, arguments are mbuf 
d94 1
a94 1
 *		timeout() is non-void, must keep returned value for untimeuot()
d132 28
@


1.1.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 2
/*	$OpenBSD: net_osdep.h,v 1.6 2001/02/16 08:48:03 itojun Exp $	*/
/*	$KAME: net_osdep.h,v 1.40 2001/02/14 17:07:50 itojun Exp $	*/
d6 1
a6 1
 *
d18 1
a18 1
 *
a37 24
 * - ifa_ifwithaf()
 *   bsdi[34], netbsd, and openbsd define it in sys/net/if.c
 *   freebsd (all versions) does not have it.
 *  
 * - struct rt_addrinfo
 *   bsdi4, netbsd 1.5R and beyond: rti_addrs, rti_info[], rti_flags, rti_ifa,
 *	rti_ifp, and rti_rtm.
 *   others: rti_addrs and rti_info[] only.
 *
 * - ifa->ifa_rtrequest
 *   bsdi4, netbsd 1.5R and beyond: rt_addrinfo *
 *   others: sockaddr * (note that sys/net/route.c:rtrequest() has an unsafe
 *	typecast code, from 4.3BSD-reno)
 *
 * - side effects of rtrequest[1](RTM_DELETE)
 *	BSDI[34]: delete all cloned routes underneath the route.
 *	FreeBSD[234]: delete all protocol-cloned routes underneath the route.
 *		      note that cloned routes from an interface direct route
 *		      still remain.
 *	NetBSD: 1.5 have no side effects.  KAME/netbsd15, and 1.5R, have
 *		the same effects as of BSDI.
 *	OpenBSD: 2.8 have no side effects.  KAME/openbsd28, and 2.9 have
 *		the same effects as of BSDI.
 *
a42 4
 *	FreeBSD 4
 *		struct proc *p;
 *		if (p && !suser(p))
 *			privileged;
a51 1
 *
d53 1
a53 1
 *	OpenBSD, NetBSD 1.5, BSDI [34]
d55 1
a55 1
 *	FreeBSD 2, FreeBSD 3, NetBSD 1.6? (1.5N and later)
a56 1
 *
a64 1
 *
d67 1
a67 1
 *		single function with PRU_xx, arguments are mbuf
a69 1
 *
a74 1
 *
d76 1
a76 1
 *	NetBSD 1.4.x, OpenBSD, BSDI [34], FreeBSD 2
d79 1
a79 7
 *		timeout() is non-void, must keep returned value for untimeout()
 *		callout_xx is also available (sys/callout.h)
 *	NetBSD 1.5
 *		timeout() is obsoleted, use callout_xx (sys/callout.h)
 *	OpenBSD 2.8
 *		timeout_{add,set,del} is encouraged (sys/timeout.h)
 *
a92 1
 *
a102 1
 *
d113 1
a113 2
 *	NetBSD, OpenBSD 2.8, FreeBSD2: struct ifnet loif[NLOOP];
 *	OpenBSD 2.9: struct ifnet *lo0ifp;
a116 48
 *
 * - number of bpf pseudo devices
 *	others: bpfilter.h, NBPFILTER
 *	FreeBSD4: bpf.h, NBPF
 *	solution:
 *		#if defined(__FreeBSD__) && __FreeBSD__ >= 4
 *		#include "bpf.h"
 *		#define NBPFILTER	NBPF
 *		#else
 *		#include "bpfilter.h"
 *		#endif
 *
 * - protosw for IPv4 (sys/netinet)
 *	FreeBSD4: struct ipprotosw in netinet/ipprotosw.h
 *	others: struct protosw in sys/protosw.h
 *
 * - protosw in general.
 *	NetBSD 1.5 has extra member for ipfilter (netbsd-current dropped
 *	it so it will go away in 1.6).
 *	NetBSD 1.5 requires PR_LISTEN flag bit with protocols that permit
 *	listen/accept (like tcp).
 *
 * - header files with defopt (opt_xx.h)
 *	FreeBSD3: opt_{inet,ipsec,ip6fw,altq}.h
 *	FreeBSD4: opt_{inet,inet6,ipsec,ip6fw,altq}.h
 *	NetBSD: opt_{inet,ipsec,altq}.h
 *	others: does not use defopt
 *
 * - IN_MULTICAST/IN_CLASS[A-D] macro.
 *	OpenBSD and NetBSD: net endian (kernel) or host endian (userland)
 *	others: always host endian
 *
 * - (m->m_flags & M_EXT) != 0 does *not* mean that the max data length of
 *   the mbuf == MCLBYTES.
 *
 * - sys/kern/uipc_mbuf.c:m_dup()
 *	freebsd[34]: copies the whole mbuf chain.
 *	netbsd: similar arg with m_copym().
 *	others: no m_dup().
 *
 * - ifa_refcnt (struct ifaddr) management (IFAREF/IFAFREE).
 *	NetBSD 1.5: always use IFAREF whenever reference gets added.
 *		always use IFAFREE whenever reference gets freed.
 *		IFAFREE frees ifaddr when ifa_refcnt reaches 0.
 *	others: do not increase refcnt for ifp->if_addrlist and in_ifaddr.
 *		use IFAFREE once when ifaddr is disconnected from
 *		ifp->if_addrlist and in_ifaddr.  IFAFREE frees ifaddr when
 *		ifa_refcnt goes negative.
@


1.1.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: net_osdep.h,v 1.1.2.1 2001/05/14 22:40:03 niklas Exp $	*/
@


