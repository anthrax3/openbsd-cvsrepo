head	1.18;
access;
symbols
	OPENBSD_4_8:1.17.0.8
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.4
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.6
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.2
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.16.0.2
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.13.0.4
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.2
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.14
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.12
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	SMP:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.2;
locks; strict;
comment	@ * @;


1.18
date	2010.12.21.14.56.24;	author claudio;	state dead;
branches;
next	1.17;

1.17
date	2009.02.16.00.31.25;	author dlg;	state Exp;
branches;
next	1.16;

1.16
date	2008.05.07.05.51.12;	author mpf;	state Exp;
branches;
next	1.15;

1.15
date	2008.04.23.10.55.14;	author norby;	state Exp;
branches;
next	1.14;

1.14
date	2008.04.10.23.15.45;	author dlg;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.06.10.04.36;	author henning;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.29.05.43.22;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2007.05.28.08.48.15;	author mcbride;	state Exp;
branches;
next	1.10;

1.10
date	2005.06.08.07.13.24;	author henning;	state Exp;
branches;
next	1.9;

1.9
date	2005.06.07.02.45.11;	author henning;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.14.12.04.02;	author grange;	state Exp;
branches;
next	1.7;

1.7
date	2004.11.28.23.39.45;	author canacar;	state Exp;
branches;
next	1.6;

1.6
date	2004.10.17.20.17.30;	author grange;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.15.17.46.44;	author grange;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.13.21.49.27;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.09.06.16.38;	author angelos;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.08.11.33.10;	author art;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2000.11.08.11.32.38;	author art;	state Exp;
branches;
next	;

1.2.4.1
date	2001.05.14.22.40.03;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2001.07.04.10.54.14;	author niklas;	state Exp;
branches;
next	1.2.4.3;

1.2.4.3
date	2001.10.30.19.37.52;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Convert netisr to a normal soft interrupt instead of hanving MD code
for it. This makes the netisr a real C function which will help further
development. No noticable performance change on i386 and amd64.
With input from kettenis@@ and miod@@ additional OKs mikeb@@ and henning@@
@
text
@/*	$OpenBSD: netisr_dispatch.h,v 1.17 2009/02/16 00:31:25 dlg Exp $	*/
/* $NetBSD: netisr_dispatch.h,v 1.2 2000/07/02 04:40:47 cgd Exp $ */

/*
 * netisr_dispatch: This file is included by the 
 *	machine dependant softnet function.  The
 *	DONETISR macro should be set before including
 *	this file.  i.e.:
 *
 * softintr() {
 *	...do setup stuff...
 *	#define DONETISR(bit, fn) do { ... } while (0)
 *	#include <net/netisr_dispatch.h>
 *	#undef DONETISR
 *	...do cleanup stuff.
 * }
 */

#ifndef _NET_NETISR_H_
#error <net/netisr.h> must be included before <net/netisr_dispatch.h>
#endif

#ifndef _NET_NETISR_DISPATCH_H_
#define _NET_NETISR_DISPATCH_H_
#include "bluetooth.h"
#include "ether.h"
#include "ppp.h"
#include "bridge.h"
#include "pppoe.h"
#include "pfsync.h"
#endif

/*
 * When adding functions to this list, be sure to add headers to provide
 * their prototypes in <net/netisr.h> (if necessary).
 */

#ifdef INET
#if NETHER > 0
	DONETISR(NETISR_ARP,arpintr);
#endif
	DONETISR(NETISR_IP,ipintr);
#endif
#ifdef INET6
	DONETISR(NETISR_IPV6,ip6intr);
#endif
#ifdef MPLS
	DONETISR(NETISR_MPLS,mplsintr);
#endif
#ifdef NETATALK
	DONETISR(NETISR_ATALK,atintr);
#endif
#if NATM > 0
	DONETISR(NETISR_NATM,natmintr);
#endif
#if NPPP > 0
	DONETISR(NETISR_PPP,pppintr);
#endif
#if NBRIDGE > 0
        DONETISR(NETISR_BRIDGE,bridgeintr);
#endif
#if NPPPOE > 0
	DONETISR(NETISR_PPPOE,pppoeintr);
#endif
#if NBLUETOOTH > 0
	DONETISR(NETISR_BT,btintr);
#endif
#if NPFSYNC > 0
	DONETISR(NETISR_PFSYNC,pfsyncintr);
#endif
	DONETISR(NETISR_TX,nettxintr);
@


1.17
log
@pfsync v5, mostly written at n2k9, but based on work done at n2k8.

WARNING: THIS BREAKS COMPATIBILITY WITH THE PREVIOUS VERSION OF PFSYNC

this is a new variant of the protocol and a large reworking of the
pfsync code to address some performance issues. the single largest
benefit comes from having multiple pfsync messages of different
types handled in a single packet. pfsyncs handling of pf states is
highly optimised now, along with packet parsing and construction.

huggz for beck@@ for testing.
huge thanks to mcbride@@ for his help during development and for
finding all the bugs during the initial tests.
thanks to peter sutton for letting me get credit for this work.

ok beck@@ mcbride@@ "good." deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.16 2008/05/07 05:51:12 mpf Exp $	*/
@


1.16
log
@Prevent virtual interfaces from adding to the random pool.
Also move the sampling into ether_input() where it can happen
at the interrupt and not within splnet() processing, which might
be less random. Discussed with mickey.
OK markus@@, mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.15 2008/04/23 10:55:14 norby Exp $	*/
d30 1
d67 3
@


1.15
log
@Import MPLS (Multi Protocol Label Switching)

MPLS support partly based on the (abandoned?) AYAME project.
Basic LSR (Label Switch Router) functionality is present, but not fully
functional yet.

It is currently possible to insert entries in the LIB (Label Information Base)
with route(8), but setting the operation type is not supported yet.

Imported to allow more people to work on this in the coming weeks.

ok claudio@@ laurent@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.14 2008/04/10 23:15:45 dlg Exp $	*/
a35 2

	DONETISR(NETISR_RND,netrndintr);
@


1.14
log
@introduce mitigation for the calling of an interfaces start routine.

decent drivers prefer to have a lot of packets on the send queue so they
can queue a lot of them up on the tx ring and then post them all in one
big chunk. unfortunately our stack queues one packet onto the send queue
and then calls the start handler immediately.

this mitigates against that queue, send, queue, send behaviour by trying to
call the start routine only once per softnet. now its queue, queue, queue,
send.

this is the result of a lot of discussion with claudio@@
tested by many.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.12 2007/05/29 05:43:22 claudio Exp $	*/
d47 3
@


1.13
log
@remove remaining IPX hooks. all inside #ifdef IPX, so no actual change
@
text
@d66 1
@


1.12
log
@IMP is dead and nothing uses NETISR_IMP so remove it from the netisr list.
OK henning@@ mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.11 2007/05/28 08:48:15 mcbride Exp $	*/
a49 3
#endif
#ifdef IPX
	DONETISR(NETISR_IPX,ipxintr);
@


1.11
log
@Only call add_net_randomness() once per interrupt instead of once per packet.   If multiple packets come in on a single interrupt the times mixed into
the randomness pool will be identical or predictably close anyways, and
nanotime() is expensive.

ok toby jason miod claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.10 2005/06/08 07:13:24 henning Exp $	*/
a49 3
#endif
#ifdef IMP
	DONETISR(NETISR_IMP,impintr);
@


1.10
log
@netns bits die
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.9 2005/06/07 02:45:11 henning Exp $	*/
d36 2
@


1.9
log
@do not handle CCITT any longer
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.8 2005/01/14 12:04:02 grange Exp $	*/
a53 3
#endif
#ifdef NS
	DONETISR(NETISR_NS,nsintr);
@


1.8
log
@First step in Bluetooth protocol stack support.

The code is adopted from the FreeBSD netgraph-based Bluetooth
implementation by Maksim Yevmenkin <m_evmenkin@@yahoo.com> but
all netgraph glue was replaced with usual BSD network stack
hooks. This is a work in progress. Only HCI layer works for now,
L2CAP and RFCOMM are on the way.

Help in testing from many, ok markus@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.7 2004/11/28 23:39:45 canacar Exp $	*/
a56 3
#endif
#ifdef CCITT
	DONETISR(NETISR_CCITT,ccittintr);
@


1.7
log
@In kernel pppoe client, a simple IPv4 only implementation.
Initial porting from NetBSD by David Berghoff.
Modified/simplified to match our sppp implementation.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.6 2004/10/17 20:17:30 grange Exp $	*/
d25 1
d72 3
@


1.6
log
@Replace ifdef NATM with if NATM > 0

ok millert@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.5 2004/09/15 17:46:44 grange Exp $	*/
d28 1
d68 3
@


1.5
log
@Kill more netiso ghosts.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.4 2004/06/13 21:49:27 niklas Exp $	*/
d59 1
a59 1
#ifdef NATM
@


1.4
log
@debranch SMP, have fun
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a54 3
#endif
#ifdef ISO
	DONETISR(NETISR_ISO,clnlintr);
@


1.3
log
@By popular demand, protect from multiple inclusion, and fix to use the
same naming style.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.2 2000/11/08 11:33:10 art Exp $	*/
d19 4
d25 3
a27 3

#ifndef _NET_NETISR_H_
#error <net/netisr.h> must be included before <net/netisr_dispatch.h>
a35 1
#include "ether.h"
a64 1
#include "ppp.h"
a67 1
#include "bridge.h"
a70 1
#endif /* _NET_NETISR_DISPATCH_H_ */
@


1.2
log
@OpenBSD tag
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 3
d70 1
@


1.2.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.2 2000/11/08 11:33:10 art Exp $	*/
@


1.2.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr_dispatch.h,v 1.2.4.1 2001/05/14 22:40:03 niklas Exp $	*/
a18 3
#ifndef _NET_NETISR_DISPATCH_H_
#define _NET_NETISR_DISPATCH_H_

a66 1
#endif /* _NET_NETISR_DISPATCH_H_ */
@


1.2.4.3
log
@netisr_dispatch preprocessor magic
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d19 3
a25 7
#ifndef _NET_NETISR_DISPATCH_H_
#define _NET_NETISR_DISPATCH_H_
#include "ether.h"
#include "ppp.h"
#include "bridge.h"
#endif

d32 1
d62 1
d66 1
d70 1
@


1.1
log
@Add a centralized dispatcher for softnet interrupts.
This is so that we won't need to change every arch on a softnet change.

From NetBSD.
@
text
@d1 1
@

