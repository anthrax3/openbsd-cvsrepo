head	1.19;
access;
symbols
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.15.0.6
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@ * @;


1.19
date	2017.07.30.18.16.14;	author florian;	state Exp;
branches;
next	1.18;
commitid	z0X2vKcxAWZuAxov;

1.18
date	2016.11.14.10.32.46;	author mpi;	state Exp;
branches;
next	1.17;
commitid	to0Je2i4V2FtpmS1;

1.17
date	2016.11.14.08.54.19;	author mpi;	state Exp;
branches;
next	1.16;
commitid	SPJDraPFwXOZQLLT;

1.16
date	2016.09.07.09.36.49;	author mpi;	state Exp;
branches;
next	1.15;
commitid	maggOul7Gx8kGBXs;

1.15
date	2016.01.18.15.38.52;	author mpi;	state Exp;
branches;
next	1.14;
commitid	wTiB8mlj2Llq0CHS;

1.14
date	2015.12.21.10.51.55;	author mpi;	state Exp;
branches;
next	1.13;
commitid	GLrMQPKEtr2rJZmH;

1.13
date	2015.12.03.21.57.59;	author mpi;	state Exp;
branches;
next	1.12;
commitid	nmbu8xP0zmz2PPN0;

1.12
date	2015.12.02.16.49.58;	author bluhm;	state Exp;
branches;
next	1.11;
commitid	SB6GJECP4v4xqpvF;

1.11
date	2015.12.02.09.17.47;	author mpi;	state Exp;
branches;
next	1.10;
commitid	qJCvM1BEJpKmZS7r;

1.10
date	2015.11.06.17.55.55;	author mpi;	state Exp;
branches;
next	1.9;
commitid	rF3eCQCnoqyAKLl5;

1.9
date	2015.11.02.14.40.09;	author mpi;	state Exp;
branches;
next	1.8;
commitid	RcfM7kXINWo9mOSk;

1.8
date	2015.10.25.14.48.51;	author mpi;	state Exp;
branches;
next	1.7;
commitid	K8LYM6fzMmJYhMbi;

1.7
date	2015.10.22.17.19.38;	author mpi;	state Exp;
branches;
next	1.6;
commitid	AaBRgz5QXsDW1oOO;

1.6
date	2015.10.07.11.39.49;	author mpi;	state Exp;
branches;
next	1.5;
commitid	fODLQsgZWtPvPooq;

1.5
date	2015.10.07.10.50.35;	author mpi;	state Exp;
branches;
next	1.4;
commitid	hPrd2a6fiZdlN2yP;

1.4
date	2015.09.28.08.36.24;	author mpi;	state Exp;
branches;
next	1.3;
commitid	wT9nmVgN3CsJH8u1;

1.3
date	2015.09.04.08.43.39;	author mpi;	state Exp;
branches;
next	1.2;
commitid	qAevExm24QrBjVNL;

1.2
date	2015.08.20.12.39.43;	author mpi;	state Exp;
branches;
next	1.1;
commitid	9IUogeilRo73xUDL;

1.1
date	2015.07.18.15.51.16;	author mpi;	state Exp;
branches;
next	;
commitid	lwQKRpFyNEr7kjoF;


desc
@@


1.19
log
@Switch installer to Allotment Routing Table (ART).
Prompted by a bugreport by naddy that IPv6 autoconfiguration is broken
in the installer.
OK mpi, "go for it" deraadt
@
text
@/*	$OpenBSD: rtable.h,v 1.18 2016/11/14 10:32:46 mpi Exp $ */

/*
 * Copyright (c) 2014-2016 Martin Pieuchot
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef	_NET_RTABLE_H_
#define	_NET_RTABLE_H_

#ifndef _KERNEL

/*
 * Traditional BSD routing table implementation based on a radix tree.
 */
#include <net/radix.h>

#define	rt_key(rt)	(((struct sockaddr *)(rt)->rt_nodes[0].rn_key))
#define	rt_mask(rt)	(((struct sockaddr *)(rt)->rt_nodes[0].rn_mask))
#define	rt_plen(rt)	(rtable_satoplen(rt_key(rt)->sa_family, rt_mask(rt)))
#define	RT_ROOT(rt)	((rt)->rt_nodes[0].rn_flags & RNF_ROOT)

#else /* _KERNEL */

/*
 * Newer routing table implementation based on ART (Allotment Routing
 * Table).
 */
#include <net/art.h>

#define	rt_key(rt)	((rt)->rt_dest)
#define	rt_plen(rt)	((rt)->rt_plen)
#define	RT_ROOT(rt)	(0)

#endif /* _KERNEL */

int		 rtable_satoplen(sa_family_t, struct sockaddr *);

void		 rtable_init(void);
int		 rtable_exists(unsigned int);
int		 rtable_add(unsigned int);
unsigned int	 rtable_l2(unsigned int);
unsigned int	 rtable_loindex(unsigned int);
void		 rtable_l2set(unsigned int, unsigned int, unsigned int);

struct rtentry	*rtable_lookup(unsigned int, struct sockaddr *,
		     struct sockaddr *, struct sockaddr *, uint8_t);
struct rtentry	*rtable_match(unsigned int, struct sockaddr *, uint32_t *);
struct rtentry	*rtable_iterate(struct rtentry *);
int		 rtable_insert(unsigned int, struct sockaddr *,
		     struct sockaddr *, struct sockaddr *, uint8_t,
		     struct rtentry *);
int		 rtable_delete(unsigned int, struct sockaddr *,
		     struct sockaddr *, struct rtentry *);
int		 rtable_walk(unsigned int, sa_family_t,
		     int (*)(struct rtentry *, void *, unsigned int), void *);

int		 rtable_mpath_capable(unsigned int, sa_family_t);
struct rtentry	*rtable_mpath_match(unsigned int, struct rtentry *,
		     struct sockaddr *, uint8_t);
int		 rtable_mpath_reprio(unsigned int, struct sockaddr *,
		     struct sockaddr *, uint8_t, struct rtentry *);
#endif /* _NET_RTABLE_H_ */
@


1.18
log
@Automatically create a default lo(4) interface per rdomain.

In order to stop abusing lo0 for all rdomains, a new loopback interface
will be created every time a rdomain is created.  The unit number will
be the same as the rdomain, i.e. lo1 will be attached to rdomain 1.

If this loopback interface is already in use it wont be possible to create
the corresponding rdomain.

In order to know which lo(4) interface is attached to a rdomain, its index
is stored in the rtable/rdomain map.

This is a long overdue since the introduction of rtable/rdomain.  It also
fixes a recent regression due to resetting the rdomain of an incoming
packet reported by semarie@@, Andreas Bartelt and Nils Frohberg.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.17 2016/11/14 08:54:19 mpi Exp $ */
d22 1
a22 1
#ifndef ART
d34 1
a34 1
#else /* ART */
d46 1
a46 1
#endif /* ART */
@


1.17
log
@Remove radix_mpath dragons.

This code insn't used since ART is the default.

ok vgross@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.16 2016/09/07 09:36:49 mpi Exp $ */
d4 1
a4 1
 * Copyright (c) 2014-2015 Martin Pieuchot
d54 2
a55 1
void		 rtable_l2set(unsigned int, unsigned int);
@


1.16
log
@Rename rtable_mpath_next() into rtable_iterate() and make it do a proper
reference count.

rtable_iterate() frees the passed ``rt'' and returns the next one on the
multipath list or NULL if there's none.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.15 2016/01/18 15:38:52 mpi Exp $ */
a27 3
#ifndef SMALL_KERNEL
#include <net/radix_mpath.h>
#endif
@


1.15
log
@Stop storing a backpointer to the corresponding ART node in each route
entry.

This pointer hasn't been used for some time and without it no external
reference count is needed to turn art_lookup() mpsafe.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.14 2015/12/21 10:51:55 mpi Exp $ */
d62 1
a75 1
struct rtentry	*rtable_mpath_next(struct rtentry *);
@


1.14
log
@Pass the destination and mask to rtable_mpath_reprio() in order to not
use ``rt_node'' with ART.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.13 2015/12/03 21:57:59 mpi Exp $ */
d46 1
a46 1
#define	rt_plen(rt)	(((rt)->rt_node != NULL) ? (rt)->rt_node->an_plen : 0)
@


1.13
log
@Get rid of rt_mask() and stop allocating a "struct sockaddr" for every
route entry in ART.

rt_plen() now represents the prefix length of a route entry and should
be used instead.

For now use a "struct sockaddr_in6" to represent the mask when needed,
this should be then replaced by the prefix length and RTA_NETMASK only
used for compatibility with userland.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.12 2015/12/02 16:49:58 bluhm Exp $ */
d73 2
a74 1
void		 rtable_mpath_reprio(struct rtentry *, uint8_t);
@


1.12
log
@rtable_delete() does not use its prio parameter, so delete it.
OK mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.11 2015/12/02 09:17:47 mpi Exp $ */
d34 1
d46 1
a46 1
#define	rt_mask(rt)	((rt)->rt_mask)
d50 2
@


1.11
log
@Move multipath Hash-Threshold selection mechanism inside rtable_match().

This will helps for unlocking the routing table and will prevent further
mistake by keeping the multipath logic inside the rtable_* API.

ok dlg@@, claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.10 2015/11/06 17:55:55 mpi Exp $ */
d63 1
a63 1
		     struct sockaddr *, uint8_t, struct rtentry *);
@


1.10
log
@Rename rt_mpath_next() into rtable_mpath_next() and provide an
implementation for ART based on the singly-linked list of route
entries.
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.9 2015/11/02 14:40:09 mpi Exp $ */
d58 1
a58 1
struct rtentry	*rtable_match(unsigned int, struct sockaddr *);
a69 1
struct rtentry	*rtable_mpath_select(struct rtentry *, uint32_t);
@


1.9
log
@Merge rtable_mpath_match() into rtable_lookup().

ok bluhm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.8 2015/10/25 14:48:51 mpi Exp $ */
d72 1
@


1.8
log
@Merge rtable_mpath_conflict() into rtable_insert().

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.7 2015/10/22 17:19:38 mpi Exp $ */
d57 1
a57 1
		     struct sockaddr *);
@


1.7
log
@Use only one refcounting mechanism for route entries.

ok bluhm@@, dlg@@, claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.6 2015/10/07 11:39:49 mpi Exp $ */
d60 2
a61 1
		     struct sockaddr *, uint8_t, struct rtentry *);
a69 2
int		 rtable_mpath_conflict(unsigned int, struct sockaddr *,
		     struct sockaddr *, struct sockaddr *, uint8_t, int);
@


1.6
log
@Make rtable_get() private to ensure it won't be used outside of
net/rtable.c.  This will ease the introduction of rtable_put().

Routing tables are mapped to a tuple (idx, af) so the public API
should as much as possible require these two keys.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.5 2015/10/07 10:50:35 mpi Exp $ */
a33 1
#define	RT_ACTIVE(rt)	((rt)->rt_nodes[0].rn_flags & RNF_ACTIVE)
a45 1
#define	RT_ACTIVE(rt)	((rt)->rt_node != NULL)
@


1.5
log
@Initialize the routing table before domains.

The routing table is not an optional component of the network stack
and initializing it inside the "routing domain" requires some ugly
introspection in the domain interface.

This put the rtable* layer at the same level of the if* level.  These
two subsystem are organized around the two global data structure used
in the network stack:

- the global &ifnet list, to be used in process context only, and
- the routing table which can be read in interrupt context.

This change makes the rtable_* layer domain-aware and extends the
"struct domain" such that INET, INET6 and MPLS can specify the length
of the binary key used in lookups.  This allows us to keep, or move
towards, AF-free route and rtable layers.

While here stop the madness and pass the size of the maximum key length
in *byte* to rn_inithead0().

ok claudio@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.4 2015/09/28 08:36:24 mpi Exp $ */
d53 5
a64 6

int		 rtable_exists(unsigned int);
int		 rtable_add(unsigned int);
void		*rtable_get(unsigned int, sa_family_t);
unsigned int	 rtable_l2(unsigned int);
void		 rtable_l2set(unsigned int, unsigned int);
@


1.4
log
@Factors ou the route hashing code to implement Equal-Cost Multi-Path
for ART.

While here sync the two remaining mix() macros.

ok chris@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.3 2015/09/04 08:43:39 mpi Exp $ */
d52 1
a52 2
void		 rtable_init(unsigned int);
int		 rtable_attach(void **, int);
d61 2
a62 1
int		 rtable_setid(void **, unsigned int, sa_family_t);
d64 2
@


1.3
log
@Make every subsystem using a radix tree call rn_init() and pass the
length of the key as argument.

This way every consumer of the radix tree has a chance to explicitly
initialize the shared data structures and no longer rely on another
subsystem to do the initialization.

As a bonus ``dom_maxrtkey'' is no longer used an die.

ART kernels should now be fully usable because pf(4) and IPSEC properly
initialized the radix tree.

ok chris@@, reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.2 2015/08/20 12:39:43 mpi Exp $ */
d72 1
a72 1
struct rtentry	*rtable_mpath_select(struct rtentry *, uint32_t *);
@


1.2
log
@Import an alternative routing table backend based on Yoichi Hariguchi's
ART implementation.

ART (Allotment Routing Table) is a multibit-trie algorithm invented by
D. Knuth while reviewing Yoichi's SMART [0] (Smart Multi-Array Routing
Table) paper.

This implementation, unlike the one from the KAME project, supports
variable stride lengths which makes it easier to adapt the consumed
memory/speed trade-off.  It also let you use a bigger first-level
table, what other algorithms such as POPTRIE [1] need to implement
separately.

Adaptation to the OpenBSD kernel has been done with two different data
structures.  ART nodes and route entries are managed separately which
makes the algorithm implementation free of any MULTIPATH logic.

This implementation does not include Path Compression.

[0] http://www.hariguchi.org/art/smart.pdf
[1] http://conferences.sigcomm.org/sigcomm/2015/pdf/papers/p57.pdf

ok dlg@@, reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rtable.h,v 1.1 2015/07/18 15:51:16 mpi Exp $ */
d52 1
a52 1
void		 rtable_init(void);
@


1.1
log
@Abstract the routing table internals behind an rtable_* API.

Code abusing the radix internals for the routing table should now
includes <net/rtable.h> and only deal with "struct rtentry".

Code using a radix tree for another purpose can still include
<net/radix.h>.

Inputs from and ok claudio@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d22 2
d36 15
@

