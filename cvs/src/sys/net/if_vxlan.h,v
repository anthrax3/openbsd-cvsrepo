head	1.11;
access;
symbols
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.4
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.8.0.6
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4;
locks; strict;
comment	@ * @;


1.11
date	2016.09.03.13.46.57;	author reyk;	state Exp;
branches;
next	1.10;
commitid	3QjHFZLzmkdTcUlc;

1.10
date	2016.08.07.13.49.12;	author reyk;	state Exp;
branches;
next	1.9;
commitid	IQ8KtYOT7k3LcKgr;

1.9
date	2016.08.06.14.33.33;	author reyk;	state Exp;
branches;
next	1.8;
commitid	WFeOyxM6LJyDGj8P;

1.8
date	2015.11.27.16.17.52;	author mpi;	state Exp;
branches;
next	1.7;
commitid	7hBeu8KjAV1tmWqu;

1.7
date	2015.10.23.01.19.04;	author dlg;	state Exp;
branches;
next	1.6;
commitid	amrA8l73DaZf9wmS;

1.6
date	2014.12.19.17.14.40;	author tedu;	state Exp;
branches;
next	1.5;
commitid	zhW8jJrfVCoAthrR;

1.5
date	2014.04.11.08.44.37;	author mpi;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.19.18.22.37;	author reyk;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.19.14.23.26;	author reyk;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.14.14.04.22;	author reyk;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.13.10.10.03;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Add support for a multipoint-to-multipoint mode in vxlan(4).  In this
mode, vxlan(4) must be configured to accept any virtual network
identifier with "vnetid any" and added to a bridge(4) or switch(4).
This way the driver will dynamically learn the tunnel endpoints and
their vnetids for the responses and can be used to dynamically bridge
between VXLANs.  It is also being used in combination with switch(4)
and the OpenFlow tunnel classifiers.

With input from yasuoka@@ goda@@
OK deraadt@@ dlg@@
@
text
@/*	$OpenBSD: if_vxlan.h,v 1.10 2016/08/07 13:49:12 reyk Exp $	*/

/*
 * Copyright (c) 2013 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _NET_VXLAN_H
#define _NET_VXLAN_H

#define VXLANMTU		1492
#define VXLAN_HDRLEN		8
#define VXLAN_PORT		4789

struct vxlan_header {
	u_int32_t		vxlan_flags;
#define	VXLAN_FLAGS_VNI		0x08000000
#define	VXLAN_RESERVED1		0xf7ffffff
	u_int32_t		vxlan_id;
#define VXLAN_VNI		0xffffff00
#define VXLAN_VNI_S		8
#define VXLAN_RESERVED2		0x000000ff
} __packed;

#define VXLAN_VNI_MAX		0x00ffffff	/* 24bit vnetid */
#define VXLAN_VNI_MIN		0x00000000	/* 24bit vnetid */
#define VXLAN_VNI_UNSET		0x01ffffff	/* used internally */
#define VXLAN_VNI_ANY		-1ULL		/* -1 accept any vnetid */

struct vxlanudphdr {
	struct udphdr		vu_u;
	struct vxlan_header	vu_v;
} __packed;

#ifdef _KERNEL
extern int vxlan_enable;

int		 vxlan_lookup(struct mbuf *, struct udphdr *, int,
		    struct sockaddr *, struct sockaddr *);
struct sockaddr *vxlan_tag_find(struct mbuf *);
struct sockaddr	*vxlan_tag_get(struct mbuf *, int);
void		 vxlan_tag_delete(struct mbuf *);

#endif /* _KERNEL */

#endif /* _NET_VXLAN_H */
@


1.10
log
@Define VXLAN_VNI_UNSET and VXLAN_VNI_MAX instead of using magic numbers.
No functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vxlan.h,v 1.9 2016/08/06 14:33:33 reyk Exp $	*/
d37 3
a39 1
#define VXLAN_VNI_UNSET		0xffffffff	/* -1 */
d50 1
a50 1
		    struct sockaddr *);
@


1.9
log
@Add support for IPv6 tunnel endpoints.  This currently only works for
unicast mode, multicast is not yet supported.

	ifconfig vxlan0 tunnel fd00::1 fd00::2

Roughly based on an earlier diff by goda@@
OK yasuoka@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vxlan.h,v 1.8 2015/11/27 16:17:52 mpi Exp $	*/
d35 3
@


1.8
log
@Keep "struct vxlan_softc" private to prevent pulling more headers when
<net/if_vxlan.h> is included.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vxlan.h,v 1.7 2015/10/23 01:19:04 dlg Exp $	*/
d36 3
a38 4
struct vxlanudpiphdr {
	struct ipovly		ui_i;
	struct udphdr		ui_u;
	struct vxlan_header	ui_v;
@


1.7
log
@tweak the vnetid so it can be optional and therefore cleared/deleted.

the abstract vnetid is promoted to a uin32_t, and adds a SIOCDVNETID
ioctl so it can be cleared.

this is all because i set an assignment on implementing a virtual
network interface and the students got confused when vnetid 0 didnt
show up in ifconfig output.

the vnetid in the vxlan(4) protocol is optional, but the current
code confuses 0 with no vnetid being set. this makes it clear.

ok reyk@@ who also simplified my diff
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vxlan.h,v 1.6 2014/12/19 17:14:40 tedu Exp $	*/
a42 19
struct vxlan_softc {
	struct arpcom		 sc_ac;
	struct ifmedia		 sc_media;

	struct ip_moptions	 sc_imo;
	void			*sc_ahcookie;
	void			*sc_lhcookie;
	void			*sc_dhcookie;

	struct sockaddr_storage	 sc_src;
	struct sockaddr_storage	 sc_dst;
	in_port_t		 sc_dstport;
	u_int			 sc_rdomain;
	int			 sc_vnetid;
	u_int8_t		 sc_ttl;

	LIST_ENTRY(vxlan_softc)	 sc_entry;
};

@


1.6
log
@unifdef INET in net code as a precursor to removing the pretend option.
long live the one true internet.
ok henning mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vxlan.h,v 1.5 2014/04/11 08:44:37 mpi Exp $	*/
d56 1
a56 1
	u_int32_t		 sc_vnetid;
@


1.5
log
@Interfaces are associated to rdomains, make it clear by renaming
`sc_rtableid' into `sc_rdomain'.  No functional change.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vxlan.h,v 1.4 2013/10/19 18:22:37 reyk Exp $	*/
a35 1
#ifdef INET
a40 1
#endif
@


1.4
log
@Improve the address and linkstate hooks and add an additional detach
hook to track any changes of the parent multicast interface.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vxlan.h,v 1.3 2013/10/19 14:23:26 reyk Exp $	*/
d57 1
a57 1
	u_int			 sc_rtableid;
@


1.3
log
@forgot the cookies
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vxlan.h,v 1.2 2013/10/14 14:04:22 reyk Exp $	*/
d52 1
@


1.2
log
@Remove obsolete ioctl defines and struct (I overloaded the pflow
ioctls when I started vxlan, but replaced them later with own
ifr-based ioctls).

Found by mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vxlan.h,v 1.1 2013/10/13 10:10:03 reyk Exp $	*/
d48 1
d50 3
@


1.1
log
@Import vxlan(4), the virtual extensible local area network tunnel
interface.  VXLAN is a UDP-based tunnelling protocol for overlaying
virtualized layer 2 networks over layer 3 networks. The implementation
is based on draft-mahalingam-dutt-dcops-vxlan-04 and has been tested
with other implementations in the wild.

put it in deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a42 8

#define SIOCGETVXLAN	SIOCGETPFLOW
#define SIOCSETVXLAN	SIOCSETPFLOW

/* from struct vxlanreq */
struct vxlanreq {
	u_int8_t		vxlan_reserved;
};
@

