head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.2
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10;
locks; strict;
comment	@ * @;


1.17
date	2017.02.28.09.50.13;	author mpi;	state Exp;
branches;
next	1.16;
commitid	15ZiiVy1UrhNDMlv;

1.16
date	2017.01.23.01.02.11;	author claudio;	state Exp;
branches;
next	1.15;
commitid	2WFWmxdDK0ywflVw;

1.15
date	2016.08.30.07.42.57;	author jmatthew;	state Exp;
branches;
next	1.14;
commitid	wt6F4HnTFVjJdyuV;

1.14
date	2016.06.14.04.42.02;	author jmatthew;	state Exp;
branches;
next	1.13;
commitid	s3pvPwhE6w34MZJL;

1.13
date	2016.06.03.03.59.43;	author dlg;	state Exp;
branches;
next	1.12;
commitid	Xzrk9iYAqOSXhbNS;

1.12
date	2016.04.13.08.04.14;	author mpi;	state Exp;
branches;
next	1.11;
commitid	no0HF32SpYAdh1Nd;

1.11
date	2016.04.12.06.40.44;	author mpi;	state Exp;
branches;
next	1.10;
commitid	fQD26XAfjWrjB95M;

1.10
date	2016.01.18.18.27.12;	author mpi;	state Exp;
branches;
next	1.9;
commitid	KBXvsgMO1460dNbP;

1.9
date	2015.12.04.14.15.27;	author mpi;	state Exp;
branches;
next	1.8;
commitid	Tmqp3Fwt0FRfLqfh;

1.8
date	2015.12.03.16.27.32;	author mpi;	state Exp;
branches;
next	1.7;
commitid	wK6td35Fr7xdNzh3;

1.7
date	2015.11.29.16.02.18;	author mpi;	state Exp;
branches;
next	1.6;
commitid	naczucYAeKE2Fq3l;

1.6
date	2015.11.24.12.06.30;	author mpi;	state Exp;
branches;
next	1.5;
commitid	EtocpAAodAId7blH;

1.5
date	2015.11.06.17.44.45;	author mpi;	state Exp;
branches;
next	1.4;
commitid	ovggDYXsChxiUYyD;

1.4
date	2015.10.14.10.09.30;	author mpi;	state Exp;
branches;
next	1.3;
commitid	PpW3O2bSAUrWDZcl;

1.3
date	2015.10.07.10.50.35;	author mpi;	state Exp;
branches;
next	1.2;
commitid	hPrd2a6fiZdlN2yP;

1.2
date	2015.08.20.12.51.10;	author mpi;	state Exp;
branches;
next	1.1;
commitid	kbd3EInNuY47D3oQ;

1.1
date	2015.08.20.12.39.43;	author mpi;	state Exp;
branches;
next	;
commitid	9IUogeilRo73xUDL;


desc
@@


1.17
log
@Prevent a MP race in rtable_lookup().

If an ART node is linked to multiple route entries, in the MPATH case,
it is not safe to dereference ``an_dst''.  This non-refcounted pointer
can be changed at any time by another CPU.

So get rid of the pointer and use the first destination of a route entry
when comparing sockaddrs.

This allows us so remove a pointer from 'struct art_node' and save 5Mb of
memory in an IPv4 fullfeed.

ok jmatthew@@, claudio@@, dlg@@
@
text
@/* $OpenBSD: art.h,v 1.16 2017/01/23 01:02:11 claudio Exp $ */

/*
 * Copyright (c) 2015 Martin Pieuchot
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _NET_ART_H_
#define _NET_ART_H_

#include <sys/rwlock.h>

#define ART_MAXLVL	32	/* We currently use 32 levels for IPv6. */

/*
 * Root of the ART tables, equivalent to the radix head.
 */
struct art_root {
	struct srp		 ar_root;	/* First table */
	struct rwlock		 ar_lock;	/* Serialise modifications */
	uint8_t			 ar_bits[ART_MAXLVL];	/* Per level stride */
	uint8_t			 ar_nlvl;	/* Number of levels */
	uint8_t			 ar_alen;	/* Address length in bits */
	uint8_t			 ar_off;	/* Offset of the key in bytes */
	unsigned int		 ar_rtableid;	/* ID of this routing table */
};

/*
 * Forward declaration needed for the list of mpath routes
 * attached to a single ART node.
 */
struct rtentry;

/*
 * A node is the internal representation of a route entry.
 */
struct art_node {
	union {
	    SRPL_HEAD(, rtentry) an__rtlist;	/* Route related to this node */
	    struct art_node	*an__gc;	/* Entry on GC list */
	}			 an_pointer;
	uint8_t			 an_plen;	/* Prefix length */
};
#define an_rtlist	an_pointer.an__rtlist
#define an_gc		an_pointer.an__gc

void		 art_init(void);
struct art_root	*art_alloc(unsigned int, unsigned int, unsigned int);
struct art_node *art_insert(struct art_root *, struct art_node *, void *,
		     int);
struct art_node *art_delete(struct art_root *, struct art_node *, void *,
		     int);
struct art_node	*art_match(struct art_root *, void *, struct srp_ref *);
struct art_node *art_lookup(struct art_root *, void *, int,
		     struct srp_ref *);
int		 art_walk(struct art_root *,
		     int (*)(struct art_node *, void *), void *);

struct art_node	*art_get(void *, uint8_t);
void		 art_put(struct art_node *);

#endif /* _NET_ART_H_ */
@


1.16
log
@Make the art interface a bit more generic by not depending on sockaddr
in the functions. This way it can be used for other trees as well.
OK mpi@@ phessler@@
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.15 2016/08/30 07:42:57 jmatthew Exp $ */
a48 1
	SRPL_HEAD(, rtentry)	 an_rtlist;	/* Route related to this node */
d50 2
a51 2
		void		*an__dst;	/* Destination address (key) */
		struct art_node	*an__gc;	/* Entry on GC list */
d55 2
a56 2
#define an_dst	an_pointer.an__dst
#define an_gc	an_pointer.an__gc
@


1.15
log
@use a per-table rwlock to serialize ART updates and walks, rather than
taking the kernel lock.

ok mpi@@ dlg@@
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.14 2016/06/14 04:42:02 jmatthew Exp $ */
d51 1
a51 1
		struct sockaddr	*an__dst;	/* Destination address (key) */
d61 1
a61 1
struct art_node *art_insert(struct art_root *, struct art_node *, uint8_t *,
d63 1
a63 1
struct art_node *art_delete(struct art_root *, struct art_node *, uint8_t *,
d65 2
a66 2
struct art_node	*art_match(struct art_root *, uint8_t *, struct srp_ref *);
struct art_node *art_lookup(struct art_root *, uint8_t *, int,
d71 1
a71 1
struct art_node	*art_get(struct sockaddr *, uint8_t);
@


1.14
log
@Convert the links between art data structures used during lookups into srps.
art_lookup and art_match now return an active srp_ref, which the caller must
leave when it's done with the returned route (if any).  This allows lookups
to be done without holding any locks.

The art_table and art_node garbage collectors are still responsible for
freeing items removed from the routing table, so they now use srp_finalize
to wait out any active references, and updates are done using srp_swap
operations.

ok dlg@@ mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.13 2016/06/03 03:59:43 dlg Exp $ */
d22 2
d31 1
@


1.13
log
@defer the freeing of art tables and nodes to a task.

this will allow us to sleep in srp_finalize before freeing the
memory.

the defer is done by putting the tables and nodes on a list which
is serviced by a task. the task removes all the entries from the
list and pool_puts them.

the art_tables gc code uses at_parent as its list entry, and the
art_node gc code uses a union with the an_dst pointer. both at_parent
and an_dst are only used when theyre active as part of an art data
structure, and are not used in lookups. once the art is done with
them we can reuse these pointers safely.

ok mpi@@
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.12 2016/04/13 08:04:14 mpi Exp $ */
d28 1
a28 1
	struct art_table	*ar_root;	/* First table */
d62 3
a64 2
struct art_node	*art_match(struct art_root *, uint8_t *);
struct art_node *art_lookup(struct art_root *, uint8_t *, int);
@


1.12
log
@Keep all pools in the same place.

ok jmatthew@@
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.11 2016/04/12 06:40:44 mpi Exp $ */
d47 4
a50 1
	struct sockaddr		*an_dst;	/* Destination address (key) */
d53 2
@


1.11
log
@Remove unneeded art_free().

Reported by and ok jmatthew@@
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.10 2016/01/18 18:27:12 mpi Exp $ */
d61 3
@


1.10
log
@Pass the address length to art_alloc() and remove the hack abusing the
offset of the address in the sockaddr to initialize the stride lengths.
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.9 2015/12/04 14:15:27 mpi Exp $ */
a52 1
void		 art_free(struct art_root *);
@


1.9
log
@Reduce the stride length of the tables by two and use a single page
allocator for the 4K heap.

In this configuration a fullfeed BGP server for v4 and v6 consumes
10M more than with the radix tree.

This double the depth of the tree and makes the lookup slower.  But
the ratio speed/memory can be adjusted in the future, for now we are
interested in a lock-free route lookup.

Tested by and ok benno@@
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.8 2015/12/03 16:27:32 mpi Exp $ */
d46 1
d48 1
a48 2
	int			 an_plen;	/* Prefix length */
	SRPL_HEAD(, rtentry)	 an_rtlist;	/* Route related to this node */
d52 1
a52 1
struct art_root	*art_alloc(unsigned int, int);
@


1.8
log
@Use SRPL_HEAD() and SRPL_ENTRY() to be consistent with and allow to
fallback to a SLIST.

ok dlg@@, jasper@@
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.7 2015/11/29 16:02:18 mpi Exp $ */
d22 1
a22 1
#define ART_MAXLVL	16	/* We currently use 16 levels for IPv6. */
@


1.7
log
@Convert the simple list of multipath route entries used by ART kernels
to a SRP list.

This turns the rtable_* layer mpsafe.  We now only need to protect the
ART implementation itself.

Note that route(8) regress tests will now fail due to a supplementary
reference taken by the SRPL_INIT(9) API.

ok dlg@@
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.6 2015/11/24 12:06:30 mpi Exp $ */
d48 1
a48 2

	struct srpl		 an_rtlist;	/* Route related to this node */
@


1.6
log
@Provide art_free(), a method to release unused routing table heads.

While here initialize pools in art_init().
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.5 2015/11/06 17:44:45 mpi Exp $ */
d49 1
a49 1
	SLIST_HEAD(, rtentry)	 an_rtlist;	/* Route related to this node */
@


1.5
log
@Use a SLIST instead of a LIST for MPATH route entries with ART.
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.4 2015/10/14 10:09:30 mpi Exp $ */
d54 1
@


1.4
log
@Rewrite the logic around the dymanic array of routing tables to help
turning rtable_get(9) MP-safe.

Use only one per-AF array, as suggested by claudio@@, pointing to an
array of pointers to the routing table heads.

Routing tables are now allocated/initialized per-AF.  This will let
us allocate routing table on-demand instead of always having an
AF_INET, AF_MPLS and AF_INET table as soon as a new rtableID is used.

This also get rid of the "void ***" madness.

ok dlg@@, jmatthew@@
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.3 2015/10/07 10:50:35 mpi Exp $ */
d49 1
a49 1
	LIST_HEAD(, rtentry)	 an_rtlist;	/* Route related to this node */
@


1.3
log
@Initialize the routing table before domains.

The routing table is not an optional component of the network stack
and initializing it inside the "routing domain" requires some ugly
introspection in the domain interface.

This put the rtable* layer at the same level of the if* level.  These
two subsystem are organized around the two global data structure used
in the network stack:

- the global &ifnet list, to be used in process context only, and
- the routing table which can be read in interrupt context.

This change makes the rtable_* layer domain-aware and extends the
"struct domain" such that INET, INET6 and MPLS can specify the length
of the binary key used in lookups.  This allows us to keep, or move
towards, AF-free route and rtable layers.

While here stop the madness and pass the size of the maximum key length
in *byte* to rn_inithead0().

ok claudio@@, mikeb@@
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.2 2015/08/20 12:51:10 mpi Exp $ */
d53 1
a53 1
struct art_root	*art_attach(unsigned int, int);
@


1.2
log
@Make ART internals free of 'struct sockaddr'.

Keep route entry/BSD compatibility goos in the rtable layer.  The way
addresses and masks (prefix-lengths) are encoded is really tied to the
radix-tree implementation.

Since we decided to no longer support non-contiguous masks, we could get
rid of some extra "sockaddr" allocations and reduce the memory grows
related to the use of a multibit-trie.
@
text
@d1 1
a1 1
/* $OpenBSD: art.h,v 1.1 2015/08/20 12:39:43 mpi Exp $ */
d53 1
a53 1
int		 art_attach(void **, int);
@


1.1
log
@Import an alternative routing table backend based on Yoichi Hariguchi's
ART implementation.

ART (Allotment Routing Table) is a multibit-trie algorithm invented by
D. Knuth while reviewing Yoichi's SMART [0] (Smart Multi-Array Routing
Table) paper.

This implementation, unlike the one from the KAME project, supports
variable stride lengths which makes it easier to adapt the consumed
memory/speed trade-off.  It also let you use a bigger first-level
table, what other algorithms such as POPTRIE [1] need to implement
separately.

Adaptation to the OpenBSD kernel has been done with two different data
structures.  ART nodes and route entries are managed separately which
makes the algorithm implementation free of any MULTIPATH logic.

This implementation does not include Path Compression.

[0] http://www.hariguchi.org/art/smart.pdf
[1] http://conferences.sigcomm.org/sigcomm/2015/pdf/papers/p57.pdf

ok dlg@@, reyk@@
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d54 6
a59 4
struct art_node *art_insert(struct art_root *, struct art_node *);
struct art_node *art_delete(struct art_root *, struct art_node *);
struct art_node	*art_match(struct art_root *, struct sockaddr *);
struct art_node *art_lookup(struct art_root *, struct sockaddr *, int);
@

