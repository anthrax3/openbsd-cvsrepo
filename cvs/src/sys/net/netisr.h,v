head	1.49;
access;
symbols
	OPENBSD_6_2:1.49.0.2
	OPENBSD_6_2_BASE:1.49
	OPENBSD_6_1:1.48.0.4
	OPENBSD_6_1_BASE:1.48
	OPENBSD_6_0:1.46.0.4
	OPENBSD_6_0_BASE:1.46
	OPENBSD_5_9:1.44.0.2
	OPENBSD_5_9_BASE:1.44
	OPENBSD_5_8:1.42.0.4
	OPENBSD_5_8_BASE:1.42
	OPENBSD_5_7:1.40.0.2
	OPENBSD_5_7_BASE:1.40
	OPENBSD_5_6:1.39.0.6
	OPENBSD_5_6_BASE:1.39
	OPENBSD_5_5:1.39.0.4
	OPENBSD_5_5_BASE:1.39
	OPENBSD_5_4:1.37.0.4
	OPENBSD_5_4_BASE:1.37
	OPENBSD_5_3:1.37.0.2
	OPENBSD_5_3_BASE:1.37
	OPENBSD_5_2:1.36.0.6
	OPENBSD_5_2_BASE:1.36
	OPENBSD_5_1_BASE:1.36
	OPENBSD_5_1:1.36.0.4
	OPENBSD_5_0:1.36.0.2
	OPENBSD_5_0_BASE:1.36
	OPENBSD_4_9:1.35.0.2
	OPENBSD_4_9_BASE:1.35
	OPENBSD_4_8:1.34.0.8
	OPENBSD_4_8_BASE:1.34
	OPENBSD_4_7:1.34.0.4
	OPENBSD_4_7_BASE:1.34
	OPENBSD_4_6:1.34.0.6
	OPENBSD_4_6_BASE:1.34
	OPENBSD_4_5:1.34.0.2
	OPENBSD_4_5_BASE:1.34
	OPENBSD_4_4:1.33.0.2
	OPENBSD_4_4_BASE:1.33
	OPENBSD_4_3:1.29.0.2
	OPENBSD_4_3_BASE:1.29
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.23.0.8
	OPENBSD_4_1_BASE:1.23
	OPENBSD_4_0:1.23.0.6
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.23.0.4
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.23.0.2
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.21.0.2
	OPENBSD_3_7_BASE:1.21
	OPENBSD_3_6:1.19.0.6
	OPENBSD_3_6_BASE:1.19
	SMP_SYNC_A:1.19
	SMP_SYNC_B:1.19
	OPENBSD_3_5:1.19.0.4
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	UBC_SYNC_A:1.18
	OPENBSD_3_3:1.17.0.6
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.4
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	UBC_SYNC_B:1.17
	UBC:1.16.0.4
	UBC_BASE:1.16
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9_BASE:1.15
	OPENBSD_2_9:1.15.0.2
	OPENBSD_2_8:1.14.0.6
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.14.0.4
	OPENBSD_2_7_BASE:1.14
	SMP:1.14.0.2
	SMP_BASE:1.14
	kame_19991208:1.13
	OPENBSD_2_6:1.13.0.2
	OPENBSD_2_6_BASE:1.13
	OPENBSD_2_5:1.12.0.2
	OPENBSD_2_5_BASE:1.12
	OPENBSD_2_4:1.10.0.6
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.4
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.7.0.2
	OPENBSD_2_0_BASE:1.7
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.49
date	2017.05.28.12.51.34;	author yasuoka;	state Exp;
branches;
next	1.48;
commitid	2vGVzcFLNmfkoMEp;

1.48
date	2016.11.03.09.04.06;	author mpi;	state Exp;
branches;
next	1.47;
commitid	uABkiH57twMBt6Y1;

1.47
date	2016.09.01.10.06.33;	author goda;	state Exp;
branches;
next	1.46;
commitid	53X2QcUepPKjCjvt;

1.46
date	2016.07.13.16.45.19;	author mpi;	state Exp;
branches;
next	1.45;
commitid	rLX7PMZ4auGYbwG0;

1.45
date	2016.05.03.14.52.39;	author mpi;	state Exp;
branches;
next	1.44;
commitid	dxC8XEETMDhMlqh6;

1.44
date	2016.01.08.13.53.24;	author mpi;	state Exp;
branches
	1.44.2.1;
next	1.43;
commitid	l2mfiUCCi0ZhRviM;

1.43
date	2015.12.03.12.27.33;	author dlg;	state Exp;
branches;
next	1.42;
commitid	eiI10PGSG8ftQ7JL;

1.42
date	2015.07.20.21.16.39;	author rzalamena;	state Exp;
branches;
next	1.41;
commitid	t2fhFUpUuj89g4Sj;

1.41
date	2015.05.26.11.36.26;	author dlg;	state Exp;
branches;
next	1.40;
commitid	XIDnUp3itFSZuopj;

1.40
date	2014.08.10.07.28.32;	author guenther;	state Exp;
branches;
next	1.39;
commitid	ZHKU0Nrfo57GLfqk;

1.39
date	2013.10.24.18.50.16;	author deraadt;	state Exp;
branches;
next	1.38;

1.38
date	2013.08.20.09.14.24;	author mpi;	state Exp;
branches;
next	1.37;

1.37
date	2012.10.07.23.56.21;	author mikeb;	state Exp;
branches;
next	1.36;

1.36
date	2011.07.09.04.01.30;	author deraadt;	state Exp;
branches;
next	1.35;

1.35
date	2010.12.21.14.56.24;	author claudio;	state Exp;
branches;
next	1.34;

1.34
date	2009.02.16.00.31.25;	author dlg;	state Exp;
branches;
next	1.33;

1.33
date	2008.05.09.12.54.52;	author dlg;	state Exp;
branches;
next	1.32;

1.32
date	2008.05.07.05.51.12;	author mpf;	state Exp;
branches;
next	1.31;

1.31
date	2008.04.23.10.55.14;	author norby;	state Exp;
branches;
next	1.30;

1.30
date	2008.04.10.23.15.45;	author dlg;	state Exp;
branches;
next	1.29;

1.29
date	2008.01.19.18.26.18;	author mpf;	state Exp;
branches;
next	1.28;

1.28
date	2007.09.08.02.45.04;	author dlg;	state Exp;
branches;
next	1.27;

1.27
date	2007.06.06.10.04.36;	author henning;	state Exp;
branches;
next	1.26;

1.26
date	2007.05.29.18.10.43;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2007.05.29.05.43.22;	author claudio;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.28.08.48.15;	author mcbride;	state Exp;
branches;
next	1.23;

1.23
date	2005.06.08.07.13.24;	author henning;	state Exp;
branches;
next	1.22;

1.22
date	2005.06.07.02.45.11;	author henning;	state Exp;
branches;
next	1.21;

1.21
date	2005.01.14.12.04.02;	author grange;	state Exp;
branches;
next	1.20;

1.20
date	2004.11.28.23.39.45;	author canacar;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.02.23.28.12;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.12.00.48.52;	author jason;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.14.01.27.09;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.23.10.44.10;	author mickey;	state Exp;
branches
	1.16.4.1;
next	1.15;

1.15
date	2000.11.08.13.23.40;	author art;	state Exp;
branches;
next	1.14;

1.14
date	99.12.08.15.58.30;	author itojun;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	99.05.24.23.09.11;	author jason;	state Exp;
branches;
next	1.12;

1.12
date	99.01.07.23.15.49;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	99.01.07.06.13.35;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	97.07.23.03.46.02;	author denny;	state Exp;
branches;
next	1.9;

1.9
date	97.02.24.13.34.03;	author niklas;	state Exp;
branches;
next	1.8;

1.8
date	96.10.19.13.26.16;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	96.08.29.09.26.40;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	96.07.03.02.35.23;	author chuck;	state Exp;
branches;
next	1.5;

1.5
date	96.06.30.21.31.33;	author chuck;	state Exp;
branches;
next	1.4;

1.4
date	96.04.19.18.12.30;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.03.29.12.05.54;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.03.19.21.10.45;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.06;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.06;	author deraadt;	state Exp;
branches;
next	;

1.14.2.1
date	2001.05.14.22.40.03;	author niklas;	state Exp;
branches;
next	1.14.2.2;

1.14.2.2
date	2001.10.31.03.29.02;	author nate;	state Exp;
branches;
next	1.14.2.3;

1.14.2.3
date	2002.03.28.14.57.37;	author niklas;	state Exp;
branches;
next	1.14.2.4;

1.14.2.4
date	2003.05.13.19.36.15;	author ho;	state Exp;
branches;
next	1.14.2.5;

1.14.2.5
date	2003.06.07.11.06.06;	author ho;	state Exp;
branches;
next	;

1.16.4.1
date	2002.06.11.03.30.45;	author art;	state Exp;
branches;
next	1.16.4.2;

1.16.4.2
date	2003.05.19.22.30.41;	author tedu;	state Exp;
branches;
next	;

1.44.2.1
date	2016.07.14.11.13.13;	author mpi;	state Exp;
branches;
next	;
commitid	c3zMIeXyCizF4IZR;


desc
@@


1.49
log
@Remove all splnet/splx from pipex(4) and pppx(4) and replace some of
them by NET_LOCK/NET_UNLOCK.  Also make the timeout for pipex_timer
run with a thread context and replace pipex softintr by NETISR_PIPEX.

ok mpi
@
text
@/*	$OpenBSD: netisr.h,v 1.48 2016/11/03 09:04:06 mpi Exp $	*/
/*	$NetBSD: netisr.h,v 1.12 1995/08/12 23:59:24 mycroft Exp $	*/

/*
 * Copyright (c) 1980, 1986, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)netisr.h	8.1 (Berkeley) 6/10/93
 */

#ifndef _NET_NETISR_H_
#define _NET_NETISR_H_

/*
 * Each ``pup-level-1'' input queue has a bit in a ``netisr'' status
 * word which is used to de-multiplex a single software
 * interrupt used for scheduling the network code to calls
 * on the lowest level routine of each protocol.
 */
#define	NETISR_IP	2		/* same as AF_INET */
#define	NETISR_TX	3		/* for if_snd processing */
#define	NETISR_PFSYNC	5		/* for pfsync "immediate" tx */
#define	NETISR_ARP	18		/* same as AF_LINK */
#define	NETISR_IPV6	24		/* same as AF_INET6 */
#define	NETISR_ISDN	26		/* same as AF_E164 */
#define	NETISR_PPP	28		/* for PPP processing */
#define	NETISR_PIPEX	27		/* for pipex processing */
#define	NETISR_BRIDGE	29		/* for bridge processing */
#define	NETISR_PPPOE	30		/* for pppoe processing */
#define	NETISR_SWITCH	31		/* for switch dataplane */

#ifndef _LOCORE
#ifdef _KERNEL

#include <sys/task.h>
#include <sys/atomic.h>

extern int	netisr;			/* scheduling bits for network */
extern struct task if_input_task_locked;

void	arpintr(void);
void	ipintr(void);
void	ip6intr(void);
void	pppintr(void);
void	bridgeintr(void);
void	pppoeintr(void);
void	switchintr(void);
void	pfsyncintr(void);
void	pipexintr(void);

#define	schednetisr(anisr)						\
do {									\
	atomic_setbits_int(&netisr, (1 << (anisr)));			\
	task_add(softnettq, &if_input_task_locked);			\
} while (/* CONSTCOND */0)

#endif /* _KERNEL */
#endif /*_LOCORE */

#endif /* _NET_NETISR_H_ */
@


1.48
log
@The networking code no longer runs off software interrupts.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.47 2016/09/01 10:06:33 goda Exp $	*/
d51 1
d73 1
@


1.47
log
@Import switch(4), an in-kernel OpenFlow switch which can work alone.
switch(4) currently supports OpenFlow 1.3.5.
Currently, it's disabled by the kernel config.

With help from yasuoka@@ reyk@@ jsg@@.

ok deraadt@@ yasuoka@@ reyk@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.46 2016/07/13 16:45:19 mpi Exp $	*/
a36 9

/*
 * The networking code runs off software interrupts.
 *
 * You can switch into the network by doing splsoftnet() and return by splx().
 * The software interrupt level for the network is higher than the software
 * level for the clock (so you can enter the network in routines called
 * at timeout time).
 */
@


1.46
log
@Move ARP processing back to the KERNEL_LOCK()ed task until the race
triggered by updating a cached, but removed from the table, entry is
properly fixed.

Diff from dlg@@, prodding deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.45 2016/05/03 14:52:39 mpi Exp $	*/
d62 1
d79 1
@


1.45
log
@Stop using a soft-interrupt context to process incoming network packets.

Use a new task that runs holding the KERNEL_LOCK to execute mp-unsafe
code.  Our current goal is to progressively move input functions to the
unlocked task.

This gives a small performance boost confirmed by Hrvoje Popovski's
IPv4 forwarding measurement:

before:					after:

send           receive			send           receive
400kpps        400kpps                  400kpps        400kpps
500kpps        500kpps                  500kpps        500kpps
600kpps        600kpps                  600kpps        600kpps
650kpps        650kpps                  650kpps        640kpps
700kpps        700kpps                  700kpps        700kpps
720kpps        640kpps                  720kpps        710kpps
800kpps        640kpps                  800kpps        650kpps
1.4Mpps        570kpps                  1.4Mpps        590kpps
14Mpps         570kpps                  14Mpps         590kpps


ok kettenis@@, bluhm@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.44 2016/01/08 13:53:24 mpi Exp $	*/
d56 1
d72 1
@


1.44
log
@Get rid of the arp and revarp input queues.

Packets of types ARP and REVARP are now processed in the softnet task,
directly from ether_input() and without holding the KERNEL_LOCK.

Tested by many, ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.43 2015/12/03 12:27:33 dlg Exp $	*/
d64 4
d69 1
a77 3
#include <machine/atomic.h>

extern void *netisr_intr;
d81 1
a81 1
	softintr_schedule(netisr_intr);					\
a82 2

void	netisr_init(void);
@


1.44.2.1
log
@Backport ARP race fix:

Move ARP processing back to the KERNEL_LOCK()ed task until the race
triggered by updating a cached, but removed from the table, entry is
properly fixed.

Diff from dlg@@, prodding deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.44 2016/01/08 13:53:24 mpi Exp $	*/
a55 1
#define	NETISR_ARP	18		/* same as AF_LINK */
a65 1
void	arpintr(void);
@


1.43
log
@remove nettxintr prototype
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.42 2015/07/20 21:16:39 rzalamena Exp $	*/
a55 1
#define	NETISR_ARP	18		/* same as AF_LINK */
a65 1
void	arpintr(void);
@


1.42
log
@Kill NETISR_MPLS, from now on we will use interface input handlers to deal
with MPLS packets.

ok mpi@@, claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.41 2015/05/26 11:36:26 dlg Exp $	*/
a66 1
void	nettxintr(void);
@


1.41
log
@move add_net_randomness from ether_input to the if_input task.

change it from feeding the ethertype of the packet (which is almost
certainly an ip packet or vlan packet, so not that variable) to the
number of packets about to be processed.

ok deraadt@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.40 2014/08/10 07:28:32 guenther Exp $	*/
a54 1
#define	NETISR_MPLS	4		/* AF_MPLS would overflow */
a73 1
void	mplsintr(void);
@


1.40
log
@No more bluetooth in netintr(), so delete NETISR_BT.  Zap the declaration
for btintr(), as well as the also gone atintr() and clnlintr()
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.39 2013/10/24 18:50:16 deraadt Exp $	*/
a52 1
#define	NETISR_RND_DONE	1
@


1.39
log
@Move more stuff under _KERNEL
ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.38 2013/08/20 09:14:24 mpi Exp $	*/
a63 1
#define	NETISR_BT	31		/* same as AF_BLUETOOTH */
a72 2
void	atintr(void);
void	clnlintr(void);
a75 1
void	btintr(void);
@


1.38
log
@tedu netnatm and ueagle(4).

ok mikeb@@, sthen@@, tedu@@ (implied), doc bits ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.37 2012/10/07 23:56:21 mikeb Exp $	*/
d37 1
d94 2
a95 2
#endif
#endif
@


1.37
log
@spacing
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.36 2011/07/09 04:01:30 deraadt Exp $	*/
a59 1
#define	NETISR_NATM	27		/* same as AF_ATM */
a74 1
void	natmintr(void);
@


1.36
log
@remove more atalk bits
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.35 2010/12/21 14:56:24 claudio Exp $	*/
d90 1
a90 1
	softintr_schedule(netisr_intr);							\
@


1.35
log
@Convert netisr to a normal soft interrupt instead of hanving MD code
for it. This makes the netisr a real C function which will help further
development. No noticable performance change on i386 and amd64.
With input from kettenis@@ and miod@@ additional OKs mikeb@@ and henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.34 2009/02/16 00:31:25 dlg Exp $	*/
a56 1
#define	NETISR_ATALK	16		/* same as AF_APPLETALK */
@


1.34
log
@pfsync v5, mostly written at n2k9, but based on work done at n2k8.

WARNING: THIS BREAKS COMPATIBILITY WITH THE PREVIOUS VERSION OF PFSYNC

this is a new variant of the protocol and a large reworking of the
pfsync code to address some performance issues. the single largest
benefit comes from having multiple pfsync messages of different
types handled in a single packet. pfsyncs handling of pf states is
highly optimised now, along with packet parsing and construction.

huggz for beck@@ for testing.
huge thanks to mcbride@@ for his help during development and for
finding all the bugs during the initial tests.
thanks to peter sutton for letting me get credit for this work.

ok beck@@ mcbride@@ "good." deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.33 2008/05/09 12:54:52 dlg Exp $	*/
a43 3
 *
 * The routine to request a network software interrupt, setsoftnet(),
 * is defined in the machine-specific include files.
d86 2
d91 5
a95 2
	setsoftnet();							\
} while (0)
@


1.33
log
@there was a race between the addition of mpls and tx mitigation. this gives
mpls its own bit in netisr instead of accidentally sharing one with tx
mit.

"do it" claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.32 2008/05/07 05:51:12 mpf Exp $	*/
d59 1
d86 1
@


1.32
log
@Prevent virtual interfaces from adding to the random pool.
Also move the sampling into ether_input() where it can happen
at the interrupt and not within splnet() processing, which might
be less random. Discussed with mickey.
OK markus@@, mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.31 2008/04/23 10:55:14 norby Exp $	*/
d58 1
a67 1
#define	NETISR_MPLS	3		/* XXX AF_MPLS would overflow */
@


1.31
log
@Import MPLS (Multi Protocol Label Switching)

MPLS support partly based on the (abandoned?) AYAME project.
Basic LSR (Label Switch Router) functionality is present, but not fully
functional yet.

It is currently possible to insert entries in the LIB (Label Information Base)
with route(8), but setting the operation type is not supported yet.

Imported to allow more people to work on this in the coming weeks.

ok claudio@@ laurent@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.30 2008/04/10 23:15:45 dlg Exp $	*/
d55 1
a55 1
#define	NETISR_RND	1
a72 1
void	netrndintr(void);
d89 1
a89 1
	atomic_setbits_int(&netisr, (1 << (anisr)) | (1 << NETISR_RND));\
@


1.30
log
@introduce mitigation for the calling of an interfaces start routine.

decent drivers prefer to have a lot of packets on the send queue so they
can queue a lot of them up on the tx ring and then post them all in one
big chunk. unfortunately our stack queues one packet onto the send queue
and then calls the start handler immediately.

this mitigates against that queue, send, queue, send behaviour by trying to
call the start routine only once per softnet. now its queue, queue, queue,
send.

this is the result of a lot of discussion with claudio@@
tested by many.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.28 2007/09/08 02:45:04 dlg Exp $	*/
d67 1
d85 1
@


1.29
log
@Fix add_net_randomness() not being called because the wrong
bit in netisr is set.  1 != (1 << 1).
Reported by mickey, fix by me.
OK markus@@, miod@@, claudio@@
@
text
@d57 1
d73 1
@


1.28
log
@we dont need net/rndvar.h since the code that used it has been moved to
if.c.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.27 2007/06/06 10:04:36 henning Exp $	*/
d86 1
a86 1
	atomic_setbits_int(&netisr, (1 << (anisr)) | NETISR_RND);	\
@


1.27
log
@remove remaining IPX hooks. all inside #ifdef IPX, so no actual change
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.26 2007/05/29 18:10:43 miod Exp $	*/
a83 1
#include <dev/rndvar.h>
@


1.26
log
@Use atomic operations to operate on netisr, instead of clearing it at splhigh.
This changes nothing on legacy architectures, but is a bit faster (and simpler)
on the interesting ones.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.25 2007/05/29 05:43:22 claudio Exp $	*/
a58 1
#define	NETISR_IPX	23		/* same as AF_IPX */
a75 1
void	ipxintr(void);
@


1.25
log
@IMP is dead and nothing uses NETISR_IMP so remove it from the netisr list.
OK henning@@ mcbride@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.24 2007/05/28 08:48:15 mcbride Exp $	*/
d85 7
a91 2
#define	schednetisr(anisr)	\
	{ netisr |= (1<<(anisr) | NETISR_RND); setsoftnet(); }
@


1.24
log
@Only call add_net_randomness() once per interrupt instead of once per packet.   If multiple packets come in on a single interrupt the times mixed into
the randomness pool will be identical or predictably close anyways, and
nanotime() is expensive.

ok toby jason miod claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.23 2005/06/08 07:13:24 henning Exp $	*/
a56 1
#define	NETISR_IMP	3		/* same as AF_IMPLINK */
@


1.23
log
@netns bits die
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.22 2005/06/07 02:45:11 henning Exp $	*/
d55 1
d73 1
a85 1
#include <dev/rndvar.h>
d87 1
a87 1
	{ netisr |= 1<<(anisr); add_net_randomness(anisr); setsoftnet(); }
@


1.22
log
@do not handle CCITT any longer
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.21 2005/01/14 12:04:02 grange Exp $	*/
a56 1
#define	NETISR_NS	6		/* same as AF_NS */
a75 1
void	nsintr(void);
a79 1
void	ccittintr(void);
@


1.21
log
@First step in Bluetooth protocol stack support.

The code is adopted from the FreeBSD netgraph-based Bluetooth
implementation by Maksim Yevmenkin <m_evmenkin@@yahoo.com> but
all netgraph glue was replaced with usual BSD network stack
hooks. This is a work in progress. Only HCI layer works for now,
L2CAP and RFCOMM are on the way.

Help in testing from many, ok markus@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.20 2004/11/28 23:39:45 canacar Exp $	*/
a57 2
#define	NETISR_ISO	7		/* same as AF_ISO */
#define	NETISR_CCITT	10		/* same as AF_CCITT */
@


1.20
log
@In kernel pppoe client, a simple IPv4 only implementation.
Initial porting from NetBSD by David Berghoff.
Modified/simplified to match our sppp implementation.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.19 2003/06/02 23:28:12 millert Exp $	*/
d69 1
d87 1
@


1.19
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.18 2003/05/12 00:48:52 jason Exp $	*/
d68 1
d85 1
@


1.18
log
@Nuke a whole bunch of commons; ok tedu (still more to come *sigh*)
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.17 2002/03/14 01:27:09 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.17
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.16 2001/09/23 10:44:10 mickey Exp $	*/
d75 1
a75 1
int	netisr;				/* scheduling bits for network */
@


1.16
log
@ipxintr was missing
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.15 2000/11/08 13:23:40 art Exp $	*/
d77 11
a87 11
void	arpintr __P((void));
void	ipintr __P((void));
void	ip6intr __P((void));
void	atintr __P((void));
void	nsintr __P((void));
void	ipxintr __P((void));
void	clnlintr __P((void));
void	natmintr __P((void));
void	pppintr __P((void));
void	ccittintr __P((void));
void	bridgeintr __P((void));
@


1.16.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.16 2001/09/23 10:44:10 mickey Exp $	*/
d77 11
a87 11
void	arpintr(void);
void	ipintr(void);
void	ip6intr(void);
void	atintr(void);
void	nsintr(void);
void	ipxintr(void);
void	clnlintr(void);
void	natmintr(void);
void	pppintr(void);
void	ccittintr(void);
void	bridgeintr(void);
@


1.16.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d75 1
a75 1
extern int	netisr;			/* scheduling bits for network */
@


1.15
log
@Opps.
protect from multiple inclusion.
Needed for the netisr_dispatch changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.14 1999/12/08 15:58:30 itojun Exp $	*/
d82 1
@


1.14
log
@s/ipv6intr/ip6intr/
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.13 1999/05/24 23:09:11 jason Exp $	*/
d39 2
d93 2
@


1.14.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.15 2000/11/08 13:23:40 art Exp $	*/
a38 2
#ifndef _NET_NETISR_H_
#define _NET_NETISR_H_
a90 2

#endif /* _NET_NETISR_H_ */
@


1.14.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.14.2.1 2001/05/14 22:40:03 niklas Exp $	*/
a81 1
void	ipxintr __P((void));
@


1.14.2.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d77 11
a87 11
void	arpintr(void);
void	ipintr(void);
void	ip6intr(void);
void	atintr(void);
void	nsintr(void);
void	ipxintr(void);
void	clnlintr(void);
void	natmintr(void);
void	pppintr(void);
void	ccittintr(void);
void	bridgeintr(void);
@


1.14.2.4
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.14.2.3 2002/03/28 14:57:37 niklas Exp $	*/
d75 1
a75 1
extern int	netisr;			/* scheduling bits for network */
@


1.14.2.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.14.2.4 2003/05/13 19:36:15 ho Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.13
log
@Only do basic work in the ethernet interrupt context, and queue packets to
be bridged.  Do the real work in a scheduled netisr.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.12 1999/01/07 23:15:49 deraadt Exp $	*/
d77 1
a77 1
void	ipv6intr __P((void));
@


1.12
log
@global decl for *intr() routines, plus add INET6
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.11 1999/01/07 06:13:35 deraadt Exp $	*/
d69 1
d84 1
@


1.11
log
@update for ipv6
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.10 1997/07/23 03:46:02 denny Exp $	*/
d73 10
@


1.10
log
@AppleTalk support based on netatalk-1.4a2 and FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.9 1997/02/24 13:34:03 niklas Exp $	*/
d64 5
a68 4
#define NETISR_IPX	23		/* same as AF_IPX */
#define NETISR_ISDN	26		/* same as AF_E164 */
#define NETISR_NATM	27		/* same as AF_ATM */
#define NETISR_PPP	28		/* for PPP processing */
@


1.9
log
@OpenBSD tags + some prototyping police
@
text
@d1 1
a1 1
/*	$OpenBSD: netisr.h,v 1.12 1995/08/12 23:59:24 mycroft Exp $	*/
d62 1
@


1.8
log
@random device is permanent now.
@
text
@d1 1
@


1.7
log
@rnd -> random
@
text
@a70 2
#include "random.h"
#if NRANDOM > 0
a73 3
#else
#define	schednetisr(anisr)	{ netisr |= 1<<(anisr); setsoftnet(); }
#endif
@


1.6
log
@renumber to avoid conflict with freebsd
@
text
@d71 2
a72 2
#include "rnd.h"
#if NRND > 0
d76 1
a76 1
#else /* no rnd */
@


1.5
log
@add native mode atm netisr hook
@
text
@d63 3
a65 2
#define NETISR_NATM	26		/* same as AF_ATM */
#define NETISR_PPP	27		/* for PPP processing */
@


1.4
log
@According to the latest config stuff changes (as for if_ppp.c).
the other stuff is just for IPX support.
@
text
@d63 2
a64 1
#define NETISR_PPP	26		/* for PPP processing */
@


1.3
log
@Initial commit of random source driver.
@
text
@d62 1
@


1.2
log
@Merging w/ NetBSD 021796.
speaker upgraded to the current.
some changes to the VM stuff (ie kern_thread.c added and so).
@
text
@a63 2
#define	schednetisr(anisr)	{ netisr |= 1<<(anisr); setsoftnet(); }

d67 9
@


1.1
log
@Initial revision
@
text
@d66 1
a66 1
#ifndef LOCORE
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
