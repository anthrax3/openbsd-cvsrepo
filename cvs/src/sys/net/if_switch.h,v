head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10;
locks; strict;
comment	@ * @;


1.10
date	2016.11.20.12.45.26;	author reyk;	state Exp;
branches;
next	1.9;
commitid	PqGbtf4aku75OPpd;

1.9
date	2016.11.16.13.47.27;	author reyk;	state Exp;
branches;
next	1.8;
commitid	XyJooSdwV3dkETpz;

1.8
date	2016.11.11.16.19.09;	author rzalamena;	state Exp;
branches;
next	1.7;
commitid	wZV2Rvj9O9E7qX2e;

1.7
date	2016.11.10.17.32.40;	author rzalamena;	state Exp;
branches;
next	1.6;
commitid	qAmxzKnJKYaOz2KN;

1.6
date	2016.11.08.19.11.57;	author rzalamena;	state Exp;
branches;
next	1.5;
commitid	D6bMPLQQEHlAJyJZ;

1.5
date	2016.10.28.09.01.49;	author rzalamena;	state Exp;
branches;
next	1.4;
commitid	e7stDIt8kKQ9MOoL;

1.4
date	2016.10.07.08.18.22;	author rzalamena;	state Exp;
branches;
next	1.3;
commitid	sHnaKh8RqSkdcMme;

1.3
date	2016.09.28.08.31.42;	author rzalamena;	state Exp;
branches;
next	1.2;
commitid	UFCoC28Bk9GnT56y;

1.2
date	2016.09.04.16.47.41;	author goda;	state Exp;
branches;
next	1.1;
commitid	FmkHmAJL5OGynW3s;

1.1
date	2016.09.01.10.06.33;	author goda;	state Exp;
branches;
next	;
commitid	53X2QcUepPKjCjvt;


desc
@@


1.10
log
@Extend the DLT_OPENFLOW header to include the switch datapath id.

OK rzalamena@@
@
text
@/*	$OpenBSD: if_switch.h,v 1.9 2016/11/16 13:47:27 reyk Exp $	*/

/*
 * Copyright (c) 2016 Kazuya GODA <goda@@openbsd.org>
 * Copyright (c) 2016 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#ifndef _NET_IF_SWITCH_H_
#define _NET_IF_SWITCH_H_

/* capabilities for switch(4) */
#define SWITCH_CAP_STP		0x0001
#define SWITCH_CAP_LEARNING	0x0002
#define SWITCH_CAP_OFP		0x0004

#ifdef _KERNEL

struct switch_field_tunnel {
	uint32_t	 tun_af;
	struct in_addr	 tun_ipv4_src;
	struct in_addr	 tun_ipv4_dst;
	struct in6_addr	 tun_ipv6_src;
	struct in6_addr	 tun_ipv6_dst;
	uint64_t	 tun_key;
};

struct switch_field_ether {
	uint8_t		 eth_src[ETHER_ADDR_LEN];
	uint8_t		 __pad_eth_src[2];
	uint8_t		 eth_dst[ETHER_ADDR_LEN];
	uint8_t		 __pad_eth_dst[2];
	uint16_t	 eth_type;
	uint8_t		 __pad_eth_type[2];
};

struct switch_field_vlan {
	uint16_t	 vlan_tpid;
	uint16_t	 vlan_vid;
	uint16_t	 vlan_pcp;
	uint8_t		 __pad_vlan_pcp[2];
};

struct switch_field_ipv4 {
	uint32_t	 ipv4_src;
	uint32_t	 ipv4_dst;
	uint8_t		 ipv4_proto;
	uint8_t		 ipv4_tos;
	uint8_t		 ipv4_ttl;
	uint8_t		 ipv4_frag;
};

struct switch_field_ipv6 {
	struct in6_addr	 ipv6_src;
	struct in6_addr	 ipv6_dst;
	uint32_t	 ipv6_flow_label;
	uint8_t		 ipv6_nxt;
	uint8_t		 ipv6_tclass;
	uint8_t		 ipv6_hlimit;
	uint8_t		 ipv6_frag;
};

struct switch_field_arp {
	uint16_t	 _arp_op;
	uint8_t		 __pad_arp_op[2];
	uint8_t		 arp_sha[ETHER_ADDR_LEN];
	uint8_t		 __pad_arp_sha[2];
	uint8_t		 arp_tha[ETHER_ADDR_LEN];
	uint8_t		 __pad_arp_tha[2];
	uint32_t	 arp_sip;
	uint32_t	 arp_tip;
};

struct switch_field_nd6 {
	struct in6_addr	 nd6_target;
	uint8_t		 nd6_lladdr[ETHER_ADDR_LEN];
	uint8_t		 __pad_nd6_lladdr[2];
};

struct switch_field_icmpv4 {
	uint8_t		 icmpv4_type;
	uint8_t		 icmpv4_code;
	uint8_t		 __pad[2];
};

struct switch_field_icmpv6 {
	uint8_t		 icmpv6_type;
	uint8_t		 icmpv6_code;
	uint8_t		 __pad[2];
};

struct switch_field_tcp {
	uint16_t	 tcp_src;
	uint16_t	 tcp_dst;
	uint8_t		 tcp_flags;
	uint8_t		 __pad[3];
};

struct switch_field_udp {
	uint16_t	 udp_src;
	uint16_t	 udp_dst;
};

struct switch_field_sctp {
	uint16_t	 sctp_src;
	uint16_t	 sctp_dst;
};

union switch_field {
	struct switch_field_tunnel	 swfcl_tunnel;
	struct switch_field_ether	 swfcl_ether;
	struct switch_field_vlan	 swfcl_vlan;
	struct switch_field_ipv4	 swfcl_ipv4;
	struct switch_field_ipv6	 swfcl_ipv6;
	struct switch_field_arp		 swfcl_arp;
	struct switch_field_nd6		 swfcl_nd6;
	struct switch_field_icmpv4	 swfcl_icmpv4;
	struct switch_field_icmpv6	 swfcl_icmpv6;
	struct switch_field_tcp		 swfcl_tcp;
	struct switch_field_udp		 swfcl_udp;
	struct switch_field_sctp	 swfcl_sctp;
};

struct switch_flow_classify {
	uint64_t			 swfcl_flow_hash;

	/*
	 * Pipeline field on OpenFlow switch specific
	 */
	uint64_t			 swfcl_metadata;
	uint64_t			 swfcl_cookie;
	uint8_t				 swfcl_table_id;

	/*
	 * Classify field without protocol headers
	 */
	uint32_t			 swfcl_in_port;

	/*
	 * Classify field from protocol headers
	 */
	struct switch_field_tunnel	*swfcl_tunnel;
	struct switch_field_ether	*swfcl_ether;
	struct switch_field_vlan	*swfcl_vlan;
	struct switch_field_ipv4	*swfcl_ipv4;
	struct switch_field_ipv6	*swfcl_ipv6;
	struct switch_field_arp		*swfcl_arp;
	struct switch_field_nd6		*swfcl_nd6;
	struct switch_field_icmpv4	*swfcl_icmpv4;
	struct switch_field_icmpv6	*swfcl_icmpv6;
	struct switch_field_tcp		*swfcl_tcp;
	struct switch_field_udp		*swfcl_udp;
	struct switch_field_sctp	*swfcl_sctp;
};

struct switch_softc;

struct switch_port {
	TAILQ_ENTRY(switch_port)	 swpo_list_next;
	TAILQ_ENTRY(switch_port)	 swpo_fwdp_next;
	uint32_t			 swpo_port_no;
	uint32_t			 swpo_ifindex;
	struct timespec			 swpo_appended;
	struct switch_softc		*swpo_switch;
	uint32_t			 swpo_flags;
	void				*swpo_dhcookie;
	void				(*swop_bk_start)(struct ifnet *);
};

TAILQ_HEAD(switch_fwdp_queue, switch_port);

struct switch_dev {
	struct mbuf		*swdev_lastm;
	struct mbuf		*swdev_inputm;
	struct mbuf_queue	 swdev_outq;
	struct selinfo		 swdev_rsel;
	struct selinfo		 swdev_wsel;
	int			 swdev_waiting;
	void			(*swdev_init)(struct switch_softc *);
	int			(*swdev_input)(struct switch_softc *,
				    struct mbuf *);
	int			(*swdev_output)(struct switch_softc *,
				    struct mbuf *);
};

struct switch_softc {
	struct ifnet			 sc_if;
	int				 sc_unit;
	uint32_t			 sc_capabilities;
	struct switch_dev		*sc_swdev;		/* char device */
	struct bstp_state		*sc_stp;		/* STP state */
	struct swofp_ofs		*sc_ofs;		/* OpenFlow */
	caddr_t				 sc_ofbpf;		/* DLT_OPENFLOW */
	TAILQ_HEAD(,switch_port)	 sc_swpo_list;		/* port */
	LIST_ENTRY(switch_softc)	 sc_switch_next;	/* switch link */
	void				(*switch_process_forward)(
	    struct switch_softc *, struct switch_flow_classify *,
	    struct mbuf *);
};

/* if_switch.c */
struct switch_softc
	*switch_lookup(int);
void	 switch_port_egress(struct switch_softc *, struct switch_fwdp_queue *,
	    struct mbuf *);
int	 switch_swfcl_dup(struct switch_flow_classify *,
	    struct switch_flow_classify *);
void	 switch_swfcl_free(struct switch_flow_classify *);
struct mbuf
	*switch_flow_classifier(struct mbuf *, uint32_t,
	    struct switch_flow_classify *);
int	 switch_mtap(caddr_t, struct mbuf *, int, uint64_t);
int	 ofp_split_mbuf(struct mbuf *, struct mbuf **);

/* switchctl.c */
void	 switch_dev_destroy(struct switch_softc *);

/* in switchofp.c */
void	 swofp_attach(void);
int	 swofp_create(struct switch_softc *);
int	 swofp_init(struct switch_softc *);
void	 swofp_destroy(struct switch_softc *);
int	 swofp_ioctl(struct ifnet *, unsigned long, caddr_t);
uint32_t
	 swofp_assign_portno(struct switch_softc *, uint32_t);

#endif /* _KERNEL */
#endif /* _NET_IF_SWITCH_H_ */
@


1.9
log
@Add new DLT_OPENFLOW link-type to allow using tcpdump to debug switch(4),
eg. tcpdump -y openflow -i switch0

Includes a minor bump for libpcap.

Feedback and OK rzalamena@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_switch.h,v 1.8 2016/11/11 16:19:09 rzalamena Exp $	*/
d223 1
a223 1
int	 switch_mtap(caddr_t, struct mbuf *, int);
@


1.8
log
@Remove mutexes protection from the switchctl as they don't seem to be
doing anything for us, and remove some whitespaces from the header that
can be found near the removed lines.

ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_switch.h,v 1.7 2016/11/10 17:32:40 rzalamena Exp $	*/
d204 1
d223 1
@


1.7
log
@Add support for partial writes in switchwrite so we can use multiple
write() to write one packet. With this we also get support for writing
multiple ofp packets with a single write.

ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_switch.h,v 1.6 2016/11/08 19:11:57 rzalamena Exp $	*/
a187 1
	struct mutex		 swdev_rsel_mtx;
a188 1
	struct mutex		 swdev_wsel_mtx;
d204 2
a205 2
	TAILQ_HEAD(,switch_port)	 sc_swpo_list; 		/* port */
	LIST_ENTRY(switch_softc)	 sc_switch_next; 	/* switch link */
@


1.6
log
@Teach switch(4) device read(2) operations to behave like a stream socket,
so the userland programs can use it without having to do any special
treatment (e.g. having to read() whole packets with just 1 call or lose it).
This also allows userland to read more than one ofp header/payload with one
syscall.

ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_switch.h,v 1.5 2016/10/28 09:01:49 rzalamena Exp $	*/
d185 1
d224 1
@


1.5
log
@When doing pktout we must run the classifier again, because some action(s)
might want to use it. For buffered packets we probably need to save that
somehow else, but we don't support it now.

ok reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_switch.h,v 1.4 2016/10/07 08:18:22 rzalamena Exp $	*/
d184 1
@


1.4
log
@Use detach hook to notify switch(4) about interface removals instead of
adding code to if.c.

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_switch.h,v 1.3 2016/09/28 08:31:42 rzalamena Exp $	*/
d219 3
@


1.3
log
@Fix a kernel panic that happened when destroying interfaces attached to
the switch(4) without prior removal.

ok reyk@@, goda@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_switch.h,v 1.2 2016/09/04 16:47:41 goda Exp $	*/
d177 1
a218 1
void	 switch_port_detach(struct ifnet *);
@


1.2
log
@Make per-packet allocated memory use pool in switch(4)

ok yasuoka@@ reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_switch.h,v 1.1 2016/09/01 10:06:33 goda Exp $	*/
d218 1
@


1.1
log
@Import switch(4), an in-kernel OpenFlow switch which can work alone.
switch(4) currently supports OpenFlow 1.3.5.
Currently, it's disabled by the kernel config.

With help from yasuoka@@ reyk@@ jsg@@.

ok deraadt@@ yasuoka@@ reyk@@ henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d223 2
a224 1
int	 swofp_attach(struct switch_softc *);
d226 1
a226 1
void	 swofp_detach(struct switch_softc *);
@

