head	1.21;
access;
symbols
	OPENBSD_6_1:1.21.0.2
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.20.0.6
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.17.0.6
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.2
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.16.0.2
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2;
locks; strict;
comment	@ * @;


1.21
date	2017.01.24.10.08.30;	author krw;	state Exp;
branches;
next	1.20;
commitid	6c6qq5OdS4VVnyVM;

1.20
date	2015.12.05.16.09.09;	author yasuoka;	state Exp;
branches;
next	1.19;
commitid	eScyCzcQlMEbBURx;

1.19
date	2014.10.21.10.52.53;	author yasuoka;	state Exp;
branches;
next	1.18;
commitid	yUVe4HyafiEJIH3w;

1.18
date	2014.07.11.16.24.00;	author yasuoka;	state Exp;
branches;
next	1.17;
commitid	1FfB8HFTZFarpPaF;

1.17
date	2013.06.08.14.24.38;	author yasuoka;	state Exp;
branches;
next	1.16;

1.16
date	2012.12.05.23.20.23;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2012.09.19.22.37.23;	author jsg;	state Exp;
branches;
next	1.14;

1.14
date	2012.09.19.17.50.17;	author yasuoka;	state Exp;
branches;
next	1.13;

1.13
date	2012.07.17.03.18.57;	author yasuoka;	state Exp;
branches;
next	1.12;

1.12
date	2012.04.04.04.31.38;	author yasuoka;	state Exp;
branches;
next	1.11;

1.11
date	2012.01.23.03.36.21;	author yasuoka;	state Exp;
branches;
next	1.10;

1.10
date	2011.10.15.03.24.11;	author yasuoka;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.08.18.30.17;	author yasuoka;	state Exp;
branches;
next	1.8;

1.8
date	2011.04.02.11.52.44;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2011.04.02.11.37.10;	author dlg;	state Exp;
branches;
next	1.6;

1.6
date	2010.09.24.14.50.30;	author hsuenaga;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.22.13.03.48;	author claudio;	state Exp;
branches;
next	1.4;

1.4
date	2010.07.08.08.40.29;	author yasuoka;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.03.00.16.07;	author yasuoka;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.12.02.24.35;	author yasuoka;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.11.03.50.56;	author yasuoka;	state Exp;
branches;
next	;


desc
@@


1.21
log
@A space here, a space there. Soon we're talking real whitespace
rectification.
@
text
@/*	$OpenBSD: pipex.h,v 1.20 2015/12/05 16:09:09 yasuoka Exp $	*/

/*
 * Copyright (c) 2009 Internet Initiative Japan Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef NET_PIPEX_H
#define NET_PIPEX_H 1

/*
 * Names for pipex sysctl objects
 */
#define PIPEXCTL_ENABLE		1
#define PIPEXCTL_INQ		2
#define PIPEXCTL_OUTQ		3
#define PIPEXCTL_MAXID		4

#define PIPEXCTL_NAMES { \
        { 0, 0 }, \
        { "enable", CTLTYPE_INT }, \
        { "inq", CTLTYPE_NODE }, \
        { "outq", CTLTYPE_NODE }, \
}

#define PIPEX_PROTO_L2TP		1	/* protocol L2TP */
#define PIPEX_PROTO_PPTP		2	/* protocol PPTP */
#define PIPEX_PROTO_PPPOE		3	/* protocol PPPoE */
#define PIPEX_MAX_LISTREQ		128	/* list request size */
#define	PIPEX_MPPE_KEYLEN		16

/* pipex_mppe */
struct pipex_mppe_req {
	int16_t	stateless;			/* mppe key mode.
						   1 for stateless */
	int16_t	keylenbits;			/* mppe key length(in bits)*/
	u_char	master_key[PIPEX_MPPE_KEYLEN];	/* mppe mastter key */
};

/* pipex statistics */
struct pipex_statistics {
	uint32_t ipackets;      /* packets received from tunnel */
	uint32_t ierrors;       /* error packets received from tunnel */
	uint64_t ibytes;        /* number of received bytes from tunnel */
	uint32_t opackets;      /* packets sent to tunnel */
	uint32_t oerrors;       /* error packets on sending to tunnel */
	uint64_t obytes;        /* number of sent bytes to tunnel */

	uint32_t idle_time;     /* idle time in seconds */
};

struct pipex_session_req {
	int		pr_protocol;		/* tunnel protocol  */
/*	u_int		pr_rdomain;	*/	/* rdomain id */
	uint16_t	pr_session_id;		/* session-id */
	uint16_t	pr_peer_session_id;	/* peer's session-id */
	uint32_t	pr_ppp_flags;	/* PPP configuration flags */
#define	PIPEX_PPP_ACFC_ACCEPTED		0x0001	/* ACFC accepted */
#define	PIPEX_PPP_PFC_ACCEPTED		0x0002	/* PFC accepted */
#define	PIPEX_PPP_ACFC_ENABLED		0x0004	/* ACFC enabled */
#define	PIPEX_PPP_PFC_ENABLED		0x0008	/* PFC enabled */
#define	PIPEX_PPP_MPPE_ACCEPTED		0x0010	/* MPPE accepted */
#define	PIPEX_PPP_MPPE_ENABLED		0x0020	/* MPPE enabled */
#define	PIPEX_PPP_MPPE_REQUIRED		0x0040	/* MPPE is required */
#define	PIPEX_PPP_HAS_ACF		0x0080	/* has ACF */
#define	PIPEX_PPP_ADJUST_TCPMSS		0x0100	/* do tcpmss adjustment */
#define	PIPEX_PPP_INGRESS_FILTER	0x0200	/* do ingress filter */
	int8_t		pr_ccp_id;		/* CCP current packet id */
	int		pr_ppp_id;		/* PPP Id. */
	uint16_t	pr_peer_mru;		/* Peer's MRU */
	uint32_t	pr_timeout_sec;		/* Idle Timer */

	struct in_addr	pr_ip_srcaddr;		/* local framed IP-Address */
	struct in_addr	pr_ip_address;		/* framed IP-Address */
	struct in_addr	pr_ip_netmask;		/* framed IP-Netmask */
	struct sockaddr_in6 pr_ip6_address;	/* framed IPv6-Address */
	int		pr_ip6_prefixlen;	/* framed IPv6-Prefixlen */
	union {
		struct {
			uint32_t snd_nxt;	/* send next */
			uint32_t rcv_nxt;	/* receive next */
			uint32_t snd_una;	/* unacked */
			uint32_t rcv_acked;	/* recv acked */
			int winsz;		/* window size */
			int maxwinsz;		/* max window size */
			int peer_maxwinsz;	/* peer's max window size */
		} pptp;
		struct {
			uint32_t option_flags;
#define	PIPEX_L2TP_USE_SEQUENCING	0x00000001

			uint16_t tunnel_id;	/* our tunnel-id */
			uint16_t peer_tunnel_id;/* peer's tunnel-id */
			uint32_t ns_nxt;	/* send next */
			uint32_t nr_nxt;	/* receive next */
			uint32_t ns_una;	/* unacked */
			uint32_t nr_acked;	/* recv acked */
			uint32_t ipsecflowinfo;	/* IPsec flow id for NAT-T */
		} l2tp;
		struct {
			char over_ifname[IF_NAMESIZE];	/* ethernet ifname */
		} pppoe;
	} pr_proto;
	struct sockaddr_storage  pr_peer_address;  /* peer address of tunnel */
	struct sockaddr_storage  pr_local_address; /* our address of tunnel */
	struct pipex_mppe_req    pr_mppe_recv;     /* mppe key for receive */
	struct pipex_mppe_req    pr_mppe_send;     /* mppe key for send */
};

struct pipex_session_stat_req {
	int                      psr_protocol;   /* tunnel protocol */
	uint16_t                 psr_session_id; /* session-id */
	struct pipex_statistics  psr_stat;       /* statistics */
};
struct pipex_session_close_req {
	int                      psr_protocol;   /* tunnel protocol */
	uint16_t                 psr_session_id; /* session-id */
	struct pipex_statistics  psr_stat;       /* statistics */
};
#define	pcr_protocol	psr_protocol
#define	pcr_session_id	psr_session_id
#define	pcr_stat	psr_stat

struct pipex_session_list_req {
	uint8_t	plr_flags;
#define	PIPEX_LISTREQ_MORE		0x01
	int	plr_ppp_id_count;		/* count of PPP id */
	int	plr_ppp_id[PIPEX_MAX_LISTREQ];	/* PPP id */
};

struct pipex_session_config_req {
	int		pcr_protocol;		/* tunnel protocol  */
	uint16_t	pcr_session_id;		/* session-id */
	int		pcr_ip_forward;		/* ip_forwarding on/off */
};

/* for pppx(4) */
struct pppx_hdr {
	u_int32_t	pppx_proto;	/* write: protocol in PIPEX_PROTO_ */
	u_int32_t	pppx_id;	/* write: session_id, read: ppp_id */
};

struct pipex_session_descr_req {
	int		pdr_protocol;		/* tunnel protocol */
	uint16_t	pdr_session_id;		/* session-id */
	char		pdr_descr[IFDESCRSIZE];	/* description */
};


/* PIPEX ioctls */
#define PIPEXSMODE	_IOW ('p',  1, int)
#define PIPEXGMODE	_IOR ('p',  2, int)
#define PIPEXASESSION	_IOW ('p',  3, struct pipex_session_req)
#define PIPEXDSESSION	_IOWR('p',  4, struct pipex_session_close_req)
#define PIPEXCSESSION	_IOW ('p',  5, struct pipex_session_config_req)
#define PIPEXGSTAT	_IOWR('p',  6, struct pipex_session_stat_req)
#define PIPEXGCLOSED	_IOR ('p',  7, struct pipex_session_list_req)
#define PIPEXSIFDESCR	_IOW ('p',  8, struct pipex_session_descr_req)

#ifdef _KERNEL
extern int	pipex_enable;

struct pipex_session;

/* pipex context for a interface. */
struct pipex_iface_context {
	struct	ifnet *ifnet_this;	/* outer interface */
	u_int	pipexmode;		/* pipex mode */
	/* virtual pipex_session entry for multicast routing */
	struct pipex_session *multicast_session;
};

__BEGIN_DECLS
void                  pipex_init (void);
void                  pipex_iface_init (struct pipex_iface_context *, struct ifnet *);
void                  pipex_iface_fini (struct pipex_iface_context *);

int                   pipex_notify_close_session(struct pipex_session *session);
int                   pipex_notify_close_session_all(void);

struct mbuf           *pipex_output (struct mbuf *, int, int, struct pipex_iface_context *);
struct pipex_session  *pipex_pppoe_lookup_session (struct mbuf *);
struct pipex_session  *pipex_pppoe_lookup_session (struct mbuf *);
struct mbuf           *pipex_pppoe_input (struct mbuf *, struct pipex_session *);
struct pipex_session  *pipex_pptp_lookup_session (struct mbuf *);
struct mbuf           *pipex_pptp_input (struct mbuf *, struct pipex_session *);
struct pipex_session  *pipex_pptp_userland_lookup_session_ipv4 (struct mbuf *, struct in_addr);
struct pipex_session  *pipex_pptp_userland_lookup_session_ipv6 (struct mbuf *, struct in6_addr);
struct pipex_session  *pipex_l2tp_userland_lookup_session(struct mbuf *, struct sockaddr *);
struct mbuf           *pipex_pptp_userland_output (struct mbuf *, struct pipex_session *);
struct pipex_session  *pipex_l2tp_lookup_session (struct mbuf *, int);
struct mbuf           *pipex_l2tp_input (struct mbuf *, int off, struct pipex_session *, uint32_t);
struct pipex_session  *pipex_l2tp_userland_lookup_session_ipv4 (struct mbuf *, struct in_addr);
struct pipex_session  *pipex_l2tp_userland_lookup_session_ipv6 (struct mbuf *, struct in6_addr);
struct mbuf           *pipex_l2tp_userland_output (struct mbuf *, struct pipex_session *);
int                   pipex_ioctl (struct pipex_iface_context *, u_long, caddr_t);
void                  pipex_session_init_mppe_recv(struct pipex_session *, int,
int, u_char *);
void                  pipex_session_init_mppe_send(struct pipex_session *, int,
int, u_char *);

__END_DECLS

#endif /* _KERNEL */
#endif
@


1.20
log
@Make pppx pass packets with npppd through the device.  This makes pppx work
without pipex.enable=1.  Also fix tun(4) not to pass the packets to pipex
when pipex.enable=0.

"go for it" dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.19 2014/10/21 10:52:53 yasuoka Exp $	*/
d47 1
a47 1
#define PIPEX_PROTO_L2TP		1  	/* protocol L2TP */
d66 1
a66 1
	uint32_t opackets;      /* packets sent to tunnel */  
d91 2
a92 2
	uint16_t	pr_peer_mru; 		/* Peer's MRU */
	uint32_t	pr_timeout_sec; 	/* Idle Timer */
d122 1
a122 1
			char over_ifname[IF_NAMESIZE]; 	/* ethernet ifname */
@


1.19
log
@tun(4) has a pipex session which is used for multicast internally, it
wasn't freeed when the interface is destroyed.  Free it properly.

ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.18 2014/07/11 16:24:00 yasuoka Exp $	*/
d160 2
a161 2
	u_int32_t	pppx_proto;
	u_int32_t	pppx_id;
@


1.18
log
@Use uint32_t instead of uint16_t for pr_timeout_sec of struct
pipex_session_req.
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.17 2013/06/08 14:24:38 yasuoka Exp $	*/
d197 1
a197 2
void                  pipex_iface_start (struct pipex_iface_context *);
void                  pipex_iface_stop (struct pipex_iface_context *);
@


1.17
log
@Add new sysctl for pipex packet input/output queue length and
counters.

ok guenther, feedback jmc
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.16 2012/12/05 23:20:23 deraadt Exp $	*/
d92 1
a92 1
	uint16_t	pr_timeout_sec; 	/* Idle Timer */
@


1.16
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.15 2012/09/19 22:37:23 jsg Exp $	*/
d36 3
a38 1
#define PIPEXCTL_MAXID		2
d43 2
a44 6
}

#define PIPEXCTL_VARS { \
	NULL, \
	&pipex_enable \
	NULL \
@


1.15
log
@ioctl requests are u_long not int, spotted via clang
ok deraadt@@ miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.14 2012/09/19 17:50:17 yasuoka Exp $	*/
d195 1
a195 1
#include <sys/cdefs.h>
@


1.14
log
@cleanup around the pipex.  naming style, delete or update comments.
no functional changes.
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.13 2012/07/17 03:18:57 yasuoka Exp $	*/
d220 1
a220 1
int                   pipex_ioctl (struct pipex_iface_context *, int, caddr_t);
@


1.13
log
@use IPsec flowinfo on pipex(4) to select the IPsec tunnel for sending
L2TP packets.

ok markus henning
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.12 2012/04/04 04:31:38 yasuoka Exp $	*/
d49 3
a51 6
#define PIPEX_ENABLE			1
#define PIPEX_DISABLE			0

#define PIPEX_PROTO_L2TP		0x0001  /* protocol L2TP */
#define PIPEX_PROTO_PPTP		0x0002	/* protocol pptp */
#define PIPEX_PROTO_PPPOE		0x0003	/* protocol pppoe */
d57 2
a58 1
	int16_t	stateless;			/* mppe key mode */
d63 1
a63 1
/* pppac ip-extension forwarded statistics */
d65 6
a70 6
	uint32_t ipackets;			/* tunnel to network */
	uint32_t ierrors;			/* tunnel to network */
	uint64_t ibytes;			/* tunnel to network */
	uint32_t opackets;			/* network to tunnel */
	uint32_t oerrors;			/* network to tunnel */
	uint64_t obytes;			/* network to tunnel */
d72 1
a72 1
	uint32_t idle_time;			/* idle timer */
d81 10
a90 10
#define	PIPEX_PPP_ACFC_ACCEPTED		0x00000001
#define	PIPEX_PPP_PFC_ACCEPTED		0x00000002
#define	PIPEX_PPP_ACFC_ENABLED		0x00000004
#define	PIPEX_PPP_PFC_ENABLED		0x00000008
#define	PIPEX_PPP_MPPE_ACCEPTED		0x00000010
#define	PIPEX_PPP_MPPE_ENABLED		0x00000020
#define	PIPEX_PPP_MPPE_REQUIRED		0x00000040
#define	PIPEX_PPP_HAS_ACF		0x00000080
#define	PIPEX_PPP_ADJUST_TCPMSS		0x00000100
#define	PIPEX_PPP_INGRESS_FILTER	0x00000200
a111 1
			/* select protocol options: 1 for enable */
a114 1
			/* session keys */
d124 1
a124 1
			char over_ifname[IF_NAMESIZE]; 	/* ethernet i/f name */
d127 4
a130 4
	struct sockaddr_storage		peer_address;
	struct sockaddr_storage		local_address;
	struct pipex_mppe_req pr_mppe_recv;
	struct pipex_mppe_req pr_mppe_send;
d134 8
a141 3
	int		psr_protocol;		/* tunnel protocol  */
	uint16_t	psr_session_id;		/* session-id */
	struct pipex_statistics psr_stat;	/* statistics */
a142 1
#define pipex_session_close_req		pipex_session_stat_req
a148 1
#define	PIPEX_LISTREQ_NONE		0x00
d191 1
a191 1
	u_int	pipexmode;		/* pppac ipex mode */
@


1.12
log
@pipex hook in udp_usrreq() mistakenly assumed that `inp' is connected.
It could not use the destination address properly, so it failed to
find the pipex session.  This bug caused LCP keepalive failures on some
clients.

found and tested by sebastia@@ and mxb at alumni.chalmers.se.
ok sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.11 2012/01/23 03:36:21 yasuoka Exp $	*/
d125 1
d217 1
a217 1
struct mbuf           *pipex_l2tp_input (struct mbuf *, int off, struct pipex_session *);
@


1.11
log
@The ingress filter of pipex and npppd become configurable and disabled
by default.  After this change we need to add

  ppp.ingress_filter: true

to npppd.conf if it is needed.

ok sthen
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.10 2011/10/15 03:24:11 yasuoka Exp $	*/
d213 1
@


1.10
log
@Added "provision for rewound PPP frames" that allows receiving
reorder packets to pass to the upper layer without reorder.  It
will improve performance (throughput or loss rate) for PPTP or
L2TP(/IPesc) on networks that latency is unstable such as mobile
network.

As our test environment (bandwidth: 6Mbps, latency: 50ms for 97% of
traffic and 52ms for rest of traffic), throughput has changed from
0.76MB to 2.17MB on file upload by PPTP connected Windows Vista
ftp.exe.

Developed by UMEZAWA Takeshi at IIJ.

ok jmatthew@@
tested jmatthew@@ and myself.
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.9 2011/07/08 18:30:17 yasuoka Exp $	*/
d92 1
@


1.9
log
@Include PIPEX in kernel by default.  And add new sysctl variable
`net.pipex.enable' to enable PIPEX.   By default, pipex is disabled
and it will not process packets from wire.  Update man pages and
update HOWTO_PIPEX_NPPPD.txt for testers.

discussed with dlg@@, ok deraadt@@ mcbride@@ claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.8 2011/04/02 11:52:44 dlg Exp $	*/
d219 5
@


1.8
log
@add a pipex ioctl that lets you specify a description on pppx interfaces by
session id.

ok claudio@@ yasuoka@@ as part of a larger diff
code from jonathan matthew
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.7 2011/04/02 11:37:10 dlg Exp $	*/
d32 17
d183 1
@


1.7
log
@add the local ip address to the session request ioctl so npppd can tell it
to the kernel.

ok yasuoka@@ claudio@@ as part of a larger diff
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.6 2010/09/24 14:50:30 hsuenaga Exp $	*/
d148 6
d163 1
@


1.6
log
@Add L2TP support to PIPEX.
We can use IPv6 address as outer header of L2TP.

Kernel ABI is changed. You must update npppd.

OK @@claudio, yasuoka@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.5 2010/09/22 13:03:48 claudio Exp $	*/
d80 1
@


1.5
log
@Add a new interface pppx(4) -- the ppp multiplexer to be used with npppd
and pipex. pppx(4) creates an interface whenever a session is created
so that altq and pf can work on these.
Started by dlg@@ debugged and made usable by myself
OK dlg@@ yasuoka@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.4 2010/07/08 08:40:29 yasuoka Exp $	*/
d35 3
a37 2
#define PIPEX_PROTO_PPPOE		0x8864	/* protocol pppoe */
#define PIPEX_PROTO_PPTP		0x880b	/* protocol pptp */
d82 2
a92 2
			struct in_addr peer_address;	/* peer's IP address */
			struct in_addr our_address;	/* our IP address */
d95 13
a108 1
			struct ether_addr peer_address;/* peer's ether address*/
d111 2
d149 7
a155 7
#define PIPEXSMODE	_IOW ('t',  96, int)
#define PIPEXGMODE	_IOR ('t',  97, int)
#define PIPEXASESSION	_IOW ('t',  98, struct pipex_session_req)
#define PIPEXDSESSION	_IOWR('t',  99, struct pipex_session_close_req)
#define PIPEXCSESSION	_IOW ('t', 100, struct pipex_session_config_req)
#define PIPEXGSTAT	_IOWR('t', 101, struct pipex_session_stat_req)
#define PIPEXGCLOSED	_IOR ('t', 102, struct pipex_session_list_req)
d180 1
d184 2
a185 1
struct pipex_session  *pipex_pptp_userland_lookup_session (struct mbuf *, struct in_addr);
d187 5
@


1.4
log
@pipex didn't work on output.  Fixed following problems:
 - pipex failed to lookup the radix tree because address and netmask
   were not initialized.
 - pipex used wrong place as a ip header because it didn't adjust
   32bit address family header that are added at tun_output.
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.3 2010/07/03 00:16:07 yasuoka Exp $	*/
d61 1
d125 7
@


1.3
log
@s/$Id$/$OpenBSD$/
@
text
@d1 1
a1 1
/*	$OpenBSD: pipex.h,v 1.2 2010/01/12 02:24:35 yasuoka Exp $	*/
d155 1
a155 2
struct pipex_session  *pipex_ip_lookup_session (struct mbuf *, struct pipex_iface_context *);
void                  pipex_ip_output (struct mbuf *, struct pipex_session *);
@


1.2
log
@fix ioctl number that conflicted with tun(4)'s ioctl number.

ok mcbride@@
@
text
@d1 2
a2 1
/*	$Id: pipex.h,v 1.1 2010/01/11 03:50:56 yasuoka Exp $	*/
@


1.1
log
@Initial import PIPEX.  PIPEX(Pppac IP EXtension) is a IP forwarding
acceleration for PPP access concentrator.

ok mcbride@@ dlg@@ deraadt@@ reyk@@.
@
text
@d1 1
a1 1
/*	$Id: pipex.h,v 1.17 2008-08-28 07:46:53 uebayasi Exp $	*/
d125 7
a131 7
#define PIPEXSMODE	_IOW ('t', 91, int)
#define PIPEXGMODE	_IOR ('t', 92, int)
#define PIPEXASESSION	_IOW ('t', 94, struct pipex_session_req)
#define PIPEXDSESSION	_IOWR('t', 93, struct pipex_session_close_req)
#define PIPEXCSESSION	_IOW ('t', 95, struct pipex_session_config_req)
#define PIPEXGSTAT	_IOWR('t', 96, struct pipex_session_stat_req)
#define PIPEXGCLOSED	_IOR ('t', 97, struct pipex_session_list_req)
@

