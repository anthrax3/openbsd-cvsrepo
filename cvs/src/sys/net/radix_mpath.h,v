head	1.17;
access;
symbols
	OPENBSD_6_0:1.17.0.6
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.9.0.14
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.12
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.10
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.6.0.2
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.17
date	2015.09.28.08.36.24;	author mpi;	state Exp;
branches;
next	1.16;
commitid	wT9nmVgN3CsJH8u1;

1.16
date	2015.07.18.15.51.16;	author mpi;	state Exp;
branches;
next	1.15;
commitid	lwQKRpFyNEr7kjoF;

1.15
date	2015.02.06.01.21.17;	author mpi;	state Exp;
branches;
next	1.14;
commitid	hYUJkvmCO3leeXRT;

1.14
date	2014.11.25.14.50.46;	author mpi;	state Exp;
branches;
next	1.13;
commitid	XqA4DselVMlazcej;

1.13
date	2014.09.27.12.26.16;	author mpi;	state Exp;
branches;
next	1.12;
commitid	HQcmytntiCJTHORs;

1.12
date	2014.05.27.19.38.15;	author claudio;	state Exp;
branches;
next	1.11;

1.11
date	2013.10.24.18.50.16;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2013.10.20.16.17.37;	author claudio;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.07.13.33.16;	author claudio;	state Exp;
branches;
next	1.8;

1.8
date	2008.11.24.12.53.53;	author claudio;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.21.18.01.30;	author claudio;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.07.05.14.21;	author claudio;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.18.11.47.45;	author pascoe;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.16.16.49.39;	author henning;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.19.19.55.53;	author cedric;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.14.00.32.30;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.04.25.02.48.03;	author itojun;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.06.05.23.11.25;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Factors ou the route hashing code to implement Equal-Cost Multi-Path
for ART.

While here sync the two remaining mix() macros.

ok chris@@, dlg@@
@
text
@/*	$OpenBSD: radix_mpath.h,v 1.16 2015/07/18 15:51:16 mpi Exp $	*/
/*	$KAME: radix_mpath.h,v 1.9 2004/03/30 11:21:49 keiichi Exp $	*/

/*
 * Copyright (C) 2001 WIDE Project.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the project nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * THE AUTHORS DO NOT GUARANTEE THAT THIS SOFTWARE DOES NOT INFRINGE
 * ANY OTHERS' INTELLECTUAL PROPERTIES. IN NO EVENT SHALL THE AUTHORS
 * BE LIABLE FOR ANY INFRINGEMENT OF ANY OTHERS' INTELLECTUAL
 * PROPERTIES.
 */

#ifndef _NET_RADIX_MPATH_H_
#define	_NET_RADIX_MPATH_H_

#ifdef _KERNEL
/*
 * Radix tree API with multipath support
 */
struct rtentry;
struct sockaddr;
int	rn_mpath_capable(struct radix_node_head *);
#define RMP_MODE_ACTIVE	0
#define RMP_MODE_ALL	1
#define RMP_MODE_BYPRIO	2
struct radix_node *rn_mpath_next(struct radix_node *, int);
struct radix_node *rn_mpath_prio(struct radix_node *, u_int8_t);
void	rn_mpath_reprio(struct radix_node *, int);
void	rn_mpath_adj_mpflag(struct radix_node *, u_int8_t);
int	rn_mpath_active_count(struct radix_node *);
struct rtentry *rt_mpath_matchgate(struct rtentry *, struct sockaddr *,
	    u_int8_t);
int	rt_mpath_conflict(struct radix_node_head *, struct sockaddr *,
	    struct sockaddr *, struct sockaddr *, u_int8_t, int);
#endif /* _KERNEL */

#endif /* _NET_RADIX_MPATH_H_ */
@


1.16
log
@Abstract the routing table internals behind an rtable_* API.

Code abusing the radix internals for the routing table should now
includes <net/rtable.h> and only deal with "struct rtentry".

Code using a radix tree for another purpose can still include
<net/radix.h>.

Inputs from and ok claudio@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.15 2015/02/06 01:21:17 mpi Exp $	*/
a56 1
struct rtentry *rn_mpath_select(struct rtentry *, uint32_t *);
a58 1
int	rn_mpath_inithead(void **, int);
@


1.15
log
@Change rt_mpath_conflict() to not rely on an initialized rtentry when
checking for actual conflict.

ok claudio@@, henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.14 2014/11/25 14:50:46 mpi Exp $	*/
d57 1
a59 1
struct rtentry *rtalloc_mpath(struct sockaddr *, u_int32_t *, u_int);
@


1.14
log
@No need to forward declare "struct route" anymore, rtalloc_mpath() no
longer take such argument.
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.13 2014/09/27 12:26:16 mpi Exp $	*/
d57 2
a58 2
int	rt_mpath_conflict(struct radix_node_head *, struct rtentry *,
	    struct sockaddr *, int);
@


1.13
log
@Kill rtalloc() and update rtalloc1() and rtalloc_mpath() to no longer
rely on "struct route" that should die.

ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.12 2014/05/27 19:38:15 claudio Exp $	*/
a43 1
struct route;
@


1.12
log
@Big refactoring of the radix code (mainly rn_addroute but also part
of rn_delete was changed). The mpath code gets a much better
rn_mpath_next() function that allows looping through the dupedkey list
based on prio, any or only active routes. This solves the issues seen
with failed deletes of down routes.
Commit this now so that it gets tested. Both sthen@@ and blambert@@ agree.
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.11 2013/10/24 18:50:16 deraadt Exp $	*/
d60 1
a60 1
void	rtalloc_mpath(struct route *, u_int32_t *);
@


1.11
log
@Move more stuff under _KERNEL
ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.10 2013/10/20 16:17:37 claudio Exp $	*/
d48 3
d54 1
@


1.10
log
@Rename rn_mpath_count() to rn_mpath_active_count() since it will only
return the number of active aka RTF_UP multipath routes. OK grep & gcc
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.9 2010/05/07 13:33:16 claudio Exp $	*/
d58 1
a58 1
#endif
@


1.9
log
@Start cleaning up the mess called rtalloc*. Kill rtalloc2, make rtalloc1
accept flags for report and nocloning. Move the rtableid into struct route
(with a minor twist for now) and make a few more codepathes rdomain aware.
Appart from the pf.c and route.c bits the diff is mostly mechanical.
More to come...
OK michele, henning
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.8 2008/11/24 12:53:53 claudio Exp $	*/
d51 1
a51 1
int	rn_mpath_count(struct radix_node *);
@


1.8
log
@Implement link-state tracking on the routing table. Routes to interfaces
which are considered down will no be marked ~RTF_UP and so multipath routing
will start to work as expected and not pump 50% of the traffic to nirvana.
Most of the magic happens in rn_mpath_reprio() which fiddles with the
routing table internals. The rest is more straight forward.
get it in deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.7 2008/11/21 18:01:30 claudio Exp $	*/
d56 1
a56 1
void	rtalloc_mpath(struct route *, u_int32_t *, u_int);
@


1.7
log
@Change rn_mpath_next() to be able to walk over the full multipath list
not only over routes of the same prio. This makes it possible to modify
rt_mpath_matchgate() so that if only gateway is specified without a specific
priority it will scan the full list and not only the first routes.
This is also needed for upcoming link state tracking.
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.6 2008/05/07 05:14:21 claudio Exp $	*/
d50 1
@


1.6
log
@Implement routing priorities. Every route inserted has a priority assigned
and the one route with the lowest number wins. This will be used by the
routing daemons to resolve the synchronisations issue in case of conflicts.
The nasty bits of this are in the multipath code. If no priority is specified
the kernel will choose an appropriate priority.

Looked at by a few people at n2k8 code is much older
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.5 2006/06/18 11:47:45 pascoe Exp $	*/
d48 1
a48 1
struct radix_node *rn_mpath_next(struct radix_node *);
@


1.5
log
@Add support for equal-cost multipath IP.

To minimise path disruptions, this implements recommendations made in RFC2992 -
the hash-threshold mechanism to select paths based on source/destination IP
address pairs, and inserts multipath routes in the middle of the route table.

To enable multipath distribution, use:
   sysctl net.inet.ip.multipath=1
and/or:
   sysctl net.inet6.ip6.multipath=1

testing norby@@
ok claudio@@ henning@@ hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.4 2006/06/16 16:49:39 henning Exp $	*/
d49 1
d51 2
a52 1
struct rtentry *rt_mpath_matchgate(struct rtentry *, struct sockaddr *);
d54 2
a55 2
	struct sockaddr *, int);
void	rtalloc_mpath(struct route *, u_int32_t *, u_int tableid);
@


1.4
log
@adjust functions dealing with the routing table to take a table ID as
parameter so they can work on alternate tables. table 0 hardcoded for
many callers yet, that will be adapted step by step.
input + ok claudio norby hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.3 2004/06/19 19:55:53 cedric Exp $	*/
d53 1
a53 1
void	rtalloc_mpath(struct route *, int, u_int tableid);
@


1.3
log
@require RTF_MPATH to enter a multipath route with RTM_ADD.
route(8) takes a new -mpath modifier to enter a multipath route.
requested deraadt@@, ok itojun@@ mcbride@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.2 2004/06/14 00:32:30 deraadt Exp $	*/
d53 1
a53 1
void	rtalloc_mpath(struct route *, int);
@


1.2
log
@de-__P
@
text
@d1 1
a1 1
/*	$OpenBSD: radix_mpath.h,v 1.1 2004/04/25 02:48:03 itojun Exp $	*/
d52 1
a52 1
	struct sockaddr *);
@


1.1
log
@radix tree with multipath support.  from kame.  deraadt ok
user visible changes:
- you can add multiple routes with same key (route add A B then route add A C)
- you have to specify gateway address if there are multiple entries on the table
  (route delete A B, instead of route delete A)
kernel change:
- radix_node_head has an extra entry
- rnh_deladdr takes extra argument

TODO:
- actually take advantage of multipath (rtalloc -> rtalloc_mpath)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 8
a54 8
int	rn_mpath_capable __P((struct radix_node_head *));
struct radix_node *rn_mpath_next __P((struct radix_node *));
int	rn_mpath_count __P((struct radix_node *));
struct rtentry *rt_mpath_matchgate __P((struct rtentry *, struct sockaddr *));
int	rt_mpath_conflict __P((struct radix_node_head *, struct rtentry *,
	struct sockaddr *));
void	rtalloc_mpath __P((struct route *, int));
int	rn_mpath_inithead __P((void **, int));
@


1.1.2.1
log
@Merge with the trunk
@
text
@@

