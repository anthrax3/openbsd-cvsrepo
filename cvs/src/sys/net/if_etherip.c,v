head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5;
locks; strict;
comment	@ * @;


1.16
date	2017.03.27.23.49.03;	author jca;	state Exp;
branches;
next	1.15;
commitid	umfWA8LYwdI1C19w;

1.15
date	2017.03.07.23.35.06;	author jca;	state Exp;
branches;
next	1.14;
commitid	PgAFt411fYnb1Ztm;

1.14
date	2017.01.29.19.58.47;	author bluhm;	state Exp;
branches;
next	1.13;
commitid	3e3CkrbYekyVOcxy;

1.13
date	2017.01.25.17.34.31;	author bluhm;	state Exp;
branches;
next	1.12;
commitid	pVtptbHA3yk4jSpN;

1.12
date	2017.01.23.11.37.29;	author mpi;	state Exp;
branches;
next	1.11;
commitid	F6oNrr9LCLUSAxgA;

1.11
date	2017.01.22.10.17.39;	author dlg;	state Exp;
branches;
next	1.10;
commitid	VyLWTsbepAOk7VQM;

1.10
date	2016.12.13.06.51.11;	author dlg;	state Exp;
branches;
next	1.9;
commitid	OT2zwp1xv8iSCwtY;

1.9
date	2016.11.17.13.37.20;	author mpi;	state Exp;
branches;
next	1.8;
commitid	8qpBHr74LHkGYnUS;

1.8
date	2016.11.14.03.51.53;	author dlg;	state Exp;
branches;
next	1.7;
commitid	Khqq96MLd95C1Z1s;

1.7
date	2016.04.13.11.41.15;	author mpi;	state Exp;
branches;
next	1.6;
commitid	Xo6g1xk26RWDGcjJ;

1.6
date	2016.03.04.22.38.23;	author sashan;	state Exp;
branches;
next	1.5;
commitid	7fajBfMUpKRTskMd;

1.5
date	2016.01.25.05.12.34;	author jsg;	state Exp;
branches;
next	1.4;
commitid	lhusefemnovZuGL6;

1.4
date	2016.01.22.11.33.39;	author goda;	state Exp;
branches;
next	1.3;
commitid	4qGOSOqPzpSAtbdu;

1.3
date	2015.12.05.22.16.27;	author mpi;	state Exp;
branches;
next	1.2;
commitid	qNL5ua4P9KvwqEmY;

1.2
date	2015.12.04.12.32.07;	author reyk;	state Exp;
branches;
next	1.1;
commitid	4d2mmBis4BoYX1di;

1.1
date	2015.12.03.12.42.03;	author goda;	state Exp;
branches;
next	;
commitid	FFhJyNTOYvvsqwUi;


desc
@@


1.16
log
@Don't reject etherip packets if they are protected with IPsec.

This aligns code with documentation & matches what was available before
etherip(4) was split from gif(4).  sysctl net.inet.etherip.allow=1 is
still needed to accept etherip packets not protected with IPsec.

Reported by at least Jason Tubnor, ok mikeb@@
@
text
@/*	$OpenBSD: if_etherip.c,v 1.15 2017/03/07 23:35:06 jca Exp $	*/
/*
 * Copyright (c) 2015 Kazuya GODA <goda@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "bpfilter.h"
#include "pf.h"
#include "gif.h"

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/device.h>
#include <sys/sysctl.h>

#include <net/if.h>
#include <net/if_var.h>
#include <net/if_dl.h>
#include <net/if_media.h>

#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/ip_var.h>
#include <netinet/if_ether.h>
#include <netinet/ip_ether.h>

#ifdef INET6
#include <netinet/ip6.h>
#include <netinet6/ip6_var.h>
#endif

#if NBPFILTER > 0
#include <net/bpf.h>
#endif

#if NPF > 0
#include <net/pfvar.h>
#endif

#include <net/if_etherip.h>

struct etherip_softc {
	struct arpcom sc_ac;
	struct ifmedia sc_media;
	unsigned int sc_rdomain;
	struct sockaddr_storage sc_src;
	struct sockaddr_storage sc_dst;
	LIST_ENTRY(etherip_softc) sc_entry;
};

LIST_HEAD(, etherip_softc) etherip_softc_list;

#if 0
/*
 * TODO:
 *   At this stage, etherip_allow and etheripstat are defined
 *   at netinet/ip_ether.c. When implementation of etherip is
 *   removed from gif(4), there are moved here.
 */

/*
 * We can control the acceptance of EtherIP packets by altering the sysctl
 * net.inet.etherip.allow value. Zero means drop them, all else is acceptance.
 */
int etherip_allow = 0;

struct etheripstat etheripstat;
#endif

void etheripattach(int);
int etherip_clone_create(struct if_clone *, int);
int etherip_clone_destroy(struct ifnet *);
int etherip_ioctl(struct ifnet *, u_long, caddr_t);
void etherip_start(struct ifnet *);
int etherip_media_change(struct ifnet *);
void etherip_media_status(struct ifnet *, struct ifmediareq *);
int etherip_set_tunnel_addr(struct ifnet *, struct sockaddr_storage *,
   struct sockaddr_storage *);

struct if_clone	etherip_cloner = IF_CLONE_INITIALIZER("etherip",
    etherip_clone_create, etherip_clone_destroy);


void
etheripattach(int count)
{
	if_clone_attach(&etherip_cloner);
}

int
etherip_clone_create(struct if_clone *ifc, int unit)
{
	struct ifnet *ifp;
	struct etherip_softc *sc;

	if ((sc = malloc(sizeof(*sc), M_DEVBUF, M_NOWAIT|M_ZERO)) == NULL)
		return ENOMEM;

	ifp = &sc->sc_ac.ac_if;
	snprintf(ifp->if_xname, sizeof ifp->if_xname, "etherip%d", unit);
	ifp->if_flags = IFF_BROADCAST | IFF_SIMPLEX | IFF_MULTICAST;
	ether_fakeaddr(ifp);

	ifp->if_softc = sc;
	ifp->if_ioctl = etherip_ioctl;
	ifp->if_start = etherip_start;
	ifp->if_xflags = IFXF_CLONED;
	IFQ_SET_MAXLEN(&ifp->if_snd, IFQ_MAXLEN);

	ifp->if_capabilities = IFCAP_VLAN_MTU;

	ifmedia_init(&sc->sc_media, 0, etherip_media_change,
	    etherip_media_status);
	ifmedia_add(&sc->sc_media, IFM_ETHER | IFM_AUTO, 0, NULL);
	ifmedia_set(&sc->sc_media, IFM_ETHER | IFM_AUTO);

	if_attach(ifp);
	ether_ifattach(ifp);

	LIST_INSERT_HEAD(&etherip_softc_list, sc, sc_entry);

	return 0;
}

int
etherip_clone_destroy(struct ifnet *ifp)
{
	struct etherip_softc *sc = ifp->if_softc;

	LIST_REMOVE(sc, sc_entry);

	ifmedia_delete_instance(&sc->sc_media, IFM_INST_ANY);
	ether_ifdetach(ifp);
	if_detach(ifp);
	free(sc, M_DEVBUF, sizeof(*sc));

	return 0;
}

int
etherip_media_change(struct ifnet *ifp)
{
	return 0;
}

void
etherip_media_status(struct ifnet *ifp, struct ifmediareq *imr)
{
	imr->ifm_active = IFM_ETHER | IFM_AUTO;
	imr->ifm_status = IFM_AVALID | IFM_ACTIVE;
}

void
etherip_start(struct ifnet *ifp)
{
	struct etherip_softc *sc = ifp->if_softc;
	struct mbuf *m;
	int error;

	for (;;) {
		IFQ_DEQUEUE(&ifp->if_snd, m);
		if (m == NULL)
			break;

#if NBPFILTER > 0
		if (ifp->if_bpf)
			bpf_mtap(ifp->if_bpf, m, BPF_DIRECTION_OUT);
#endif
		if (sc->sc_src.ss_family == AF_UNSPEC ||
		    sc->sc_dst.ss_family == AF_UNSPEC) {
			m_freem(m);
			continue;
		}

		switch (sc->sc_src.ss_family) {
		case AF_INET:
			error = ip_etherip_output(ifp, m);
			break;
#ifdef INET6
		case AF_INET6:
			error = ip6_etherip_output(ifp, m);
			break;
#endif
		default:
			unhandled_af(sc->sc_src.ss_family);
		}

		if (error)
			ifp->if_oerrors++;
	}

}


int
etherip_ioctl(struct ifnet *ifp, u_long cmd, caddr_t data)
{
	struct etherip_softc *sc = ifp->if_softc;
	struct if_laddrreq *lifr = (struct if_laddrreq *)data;
	struct ifreq *ifr = (struct ifreq *)data;
	struct sockaddr_storage *src, *dst;
	struct proc *p = curproc;
	int error = 0;

	switch (cmd) {
	case SIOCSIFADDR:
		ifp->if_flags |= IFF_UP;
		/* FALLTHROUGH */

	case SIOCSIFFLAGS:
		if (ifp->if_flags & IFF_UP)
			ifp->if_flags |= IFF_RUNNING;
		else
			ifp->if_flags &= ~IFF_RUNNING;

		break;

	case SIOCSLIFPHYRTABLE:
		if ((error = suser(p, 0)) != 0)
			break;

		if (ifr->ifr_rdomainid < 0 ||
		    ifr->ifr_rdomainid > RT_TABLEID_MAX ||
		    !rtable_exists(ifr->ifr_rdomainid)) {
			error = EINVAL;
			break;
		}
		sc->sc_rdomain = ifr->ifr_rdomainid;
		break;

	case SIOCGLIFPHYRTABLE:
		ifr->ifr_rdomainid = sc->sc_rdomain;
		break;

	case SIOCSLIFPHYADDR:
		if ((error = suser(p, 0)) != 0)
			break;

		src = &lifr->addr;
		dst = &lifr->dstaddr;
		if (src->ss_family == AF_UNSPEC || dst->ss_family == AF_UNSPEC)
			return EADDRNOTAVAIL;

		switch (src->ss_family) {
		case AF_INET:
			if (src->ss_len != sizeof(struct sockaddr_in) ||
			    dst->ss_len != sizeof(struct sockaddr_in))
				return EINVAL;
			break;
#ifdef INET6
		case AF_INET6:
			if (src->ss_len != sizeof(struct sockaddr_in6) ||
			    dst->ss_len != sizeof(struct sockaddr_in6))
				return EINVAL;
			break;
#endif
		default:
			return EAFNOSUPPORT;
		}

		error = etherip_set_tunnel_addr(ifp, src, dst);
		break;

	case SIOCDIFPHYADDR:
		if ((error = suser(p, 0)) != 0)
			break;

		ifp->if_flags &= ~IFF_RUNNING;
		memset(&sc->sc_src, 0, sizeof(sc->sc_src));
		memset(&sc->sc_dst, 0, sizeof(sc->sc_dst));
		break;

	case SIOCGLIFPHYADDR:
		if (sc->sc_dst.ss_family == AF_UNSPEC)
			return EADDRNOTAVAIL;

		memset(&lifr->addr, 0, sizeof(lifr->addr));
		memset(&lifr->dstaddr, 0, sizeof(lifr->dstaddr));
		memcpy(&lifr->addr, &sc->sc_src, sc->sc_src.ss_len);
		memcpy(&lifr->dstaddr, &sc->sc_dst, sc->sc_dst.ss_len);

		break;

	case SIOCSIFMEDIA:
	case SIOCGIFMEDIA:
		error = ifmedia_ioctl(ifp, ifr, &sc->sc_media, cmd);
		break;

	default:
		error = ether_ioctl(ifp, &sc->sc_ac, cmd, data);
		break;
	}

	return error;
}

int
etherip_set_tunnel_addr(struct ifnet *ifp, struct sockaddr_storage *src,
    struct sockaddr_storage *dst)
{
	struct etherip_softc *sc, *tsc;
	int error = 0;

	sc  = ifp->if_softc;

	LIST_FOREACH(tsc, &etherip_softc_list, sc_entry) {
		if (tsc == sc)
			continue;

		if (tsc->sc_src.ss_family != src->ss_family ||
		    tsc->sc_dst.ss_family != dst->ss_family ||
		    tsc->sc_src.ss_len != src->ss_len ||
		    tsc->sc_dst.ss_len != dst->ss_len)
			continue;

		if (tsc->sc_rdomain == sc->sc_rdomain &&
		    memcmp(&tsc->sc_dst, dst, dst->ss_len) == 0 &&
		    memcmp(&tsc->sc_src, src, src->ss_len) == 0) {
			error = EADDRNOTAVAIL;
			goto out;
		}
	}

	memcpy(&sc->sc_src, src, src->ss_len);
	memcpy(&sc->sc_dst, dst, dst->ss_len);
out:
	return error;
}

int
ip_etherip_output(struct ifnet *ifp, struct mbuf *m)
{
	struct etherip_softc *sc = (struct etherip_softc *)ifp->if_softc;
	struct sockaddr_in *src, *dst;
	struct etherip_header *eip;
	struct ip *ip;

	src = (struct sockaddr_in *)&sc->sc_src;
	dst = (struct sockaddr_in *)&sc->sc_dst;

	if (src == NULL || dst == NULL ||
	    src->sin_family != AF_INET || dst->sin_family != AF_INET) {
		m_freem(m);
		return EAFNOSUPPORT;
	}
	if (dst->sin_addr.s_addr == INADDR_ANY) {
		m_freem(m);
		return ENETUNREACH;
	}

	m->m_flags &= ~(M_BCAST|M_MCAST);

	M_PREPEND(m, sizeof(struct etherip_header), M_DONTWAIT);
	if (m == NULL) {
		etheripstat.etherips_adrops++;
		return ENOBUFS;
	}
	eip = mtod(m, struct etherip_header *);
	eip->eip_ver = ETHERIP_VERSION;
	eip->eip_res = 0;
	eip->eip_pad = 0;

	M_PREPEND(m, sizeof(struct ip), M_DONTWAIT);
	if (m == NULL) {
		etheripstat.etherips_adrops++;
		return ENOBUFS;
	}
	ip = mtod(m, struct ip *);
	memset(ip, 0, sizeof(struct ip));

	ip->ip_v = IPVERSION;
	ip->ip_hl = sizeof(struct ip) >> 2;
	ip->ip_id = htons(ip_randomid());
	ip->ip_tos = IPTOS_LOWDELAY;
	ip->ip_p = IPPROTO_ETHERIP;
	ip->ip_len = htons(m->m_pkthdr.len);
	ip->ip_ttl = IPDEFTTL;
	ip->ip_src = src->sin_addr;
	ip->ip_dst = dst->sin_addr;

	m->m_pkthdr.ph_rtableid = sc->sc_rdomain;

#if NPF > 0
	pf_pkt_addr_changed(m);
#endif
	etheripstat.etherips_opackets++;
	etheripstat.etherips_obytes += (m->m_pkthdr.len -
	    (sizeof(struct ip) + sizeof(struct etherip_header)));

	return ip_output(m, NULL, NULL, IP_RAWOUTPUT, NULL, NULL, 0);
}

int
ip_etherip_input(struct mbuf **mp, int *offp, int proto)
{
	struct mbuf *m = *mp;
	struct mbuf_list ml = MBUF_LIST_INITIALIZER();
	struct etherip_softc *sc;
	const struct ip *ip;
	struct etherip_header *eip;
	struct sockaddr_in *src, *dst;
	struct ifnet *ifp = NULL;

	ip = mtod(m, struct ip *);

	if (ip->ip_p != IPPROTO_ETHERIP) {
		m_freem(m);
		ipstat_inc(ips_noproto);
		return IPPROTO_DONE;
	}

	if (!etherip_allow && (m->m_flags & (M_AUTH|M_CONF)) == 0) {
		m_freem(m);
		etheripstat.etherips_pdrops++;
		return IPPROTO_DONE;
	}

	LIST_FOREACH(sc, &etherip_softc_list, sc_entry) {
		if (sc->sc_src.ss_family != AF_INET ||
		    sc->sc_dst.ss_family != AF_INET)
			continue;

		src = (struct sockaddr_in *)&sc->sc_src;
		dst = (struct sockaddr_in *)&sc->sc_dst;

		if (sc->sc_rdomain != rtable_l2(m->m_pkthdr.ph_rtableid) ||
		    src->sin_addr.s_addr != ip->ip_dst.s_addr ||
		    dst->sin_addr.s_addr != ip->ip_src.s_addr)
			continue;

		ifp = &sc->sc_ac.ac_if;
		break;
	}

	if (ifp == NULL) {
#if NGIF > 0
		/*
		 * This path is nessesary for gif(4) and etherip(4) coexistence.
		 * This is tricky but the path will be removed soon when
		 * implementation of etherip is removed from gif(4).
		 */
		return etherip_input(mp, offp, proto);
#else
		etheripstat.etherips_noifdrops++;
		m_freem(m);
		return IPPROTO_DONE;
#endif /* NGIF */
	}

	m_adj(m, *offp);
	m = m_pullup(m, sizeof(struct etherip_header));
	if (m == NULL) {
		etheripstat.etherips_adrops++;
		return IPPROTO_DONE;
	}

	eip = mtod(m, struct etherip_header *);
	if (eip->eip_ver != ETHERIP_VERSION || eip->eip_pad) {
		etheripstat.etherips_adrops++;
		m_freem(m);
		return IPPROTO_DONE;
	}

	etheripstat.etherips_ipackets++;
	etheripstat.etherips_ibytes += (m->m_pkthdr.len -
	    sizeof(struct etherip_header));

	m_adj(m, sizeof(struct etherip_header));
	m = m_pullup(m, sizeof(struct ether_header));
	if (m == NULL) {
		etheripstat.etherips_adrops++;
		return IPPROTO_DONE;
	}
	m->m_flags &= ~(M_BCAST|M_MCAST);

#if NPF > 0
	pf_pkt_addr_changed(m);
#endif

	ml_enqueue(&ml, m);
	if_input(ifp, &ml);
	return IPPROTO_DONE;
}

#ifdef INET6
int
ip6_etherip_output(struct ifnet *ifp, struct mbuf *m)
{
	struct etherip_softc *sc = (struct etherip_softc *)ifp->if_softc;
	struct sockaddr_in6 *src, *dst;
	struct etherip_header *eip;
	struct ip6_hdr *ip6;
	int error;

	src = (struct sockaddr_in6 *)&sc->sc_src;
	dst = (struct sockaddr_in6 *)&sc->sc_dst;

	if (src == NULL || dst == NULL ||
	    src->sin6_family != AF_INET6 || dst->sin6_family != AF_INET6) {
		error = EAFNOSUPPORT;
		goto drop;
	}
	if (IN6_IS_ADDR_UNSPECIFIED(&dst->sin6_addr)) {
		error = ENETUNREACH;
		goto drop;
	}

	m->m_flags &= ~(M_BCAST|M_MCAST);

	M_PREPEND(m, sizeof(struct etherip_header), M_DONTWAIT);
	if (m == NULL) {
		etheripstat.etherips_adrops++;
		return ENOBUFS;
	}
	eip = mtod(m, struct etherip_header *);
	eip->eip_ver = ETHERIP_VERSION;
	eip->eip_res = 0;
	eip->eip_pad = 0;

	M_PREPEND(m, sizeof(struct ip6_hdr), M_DONTWAIT);
	if (m == NULL) {
		etheripstat.etherips_adrops++;
		return ENOBUFS;
	}
	ip6 = mtod(m, struct ip6_hdr *);
	ip6->ip6_flow = 0;
	ip6->ip6_vfc &= ~IPV6_VERSION_MASK;
	ip6->ip6_vfc |= IPV6_VERSION;
	ip6->ip6_nxt  = IPPROTO_ETHERIP;
	ip6->ip6_hlim = ip6_defhlim;
	ip6->ip6_plen = htons(m->m_pkthdr.len - sizeof(struct ip6_hdr));
	error = in6_embedscope(&ip6->ip6_src, src, NULL);
	if (error != 0)
		goto drop;
	error = in6_embedscope(&ip6->ip6_dst, dst, NULL);
	if (error != 0)
		goto drop;

	m->m_pkthdr.ph_rtableid = sc->sc_rdomain;

#if NPF > 0
	pf_pkt_addr_changed(m);
#endif
	etheripstat.etherips_opackets++;
	etheripstat.etherips_obytes += (m->m_pkthdr.len -
	    (sizeof(struct ip6_hdr) + sizeof(struct etherip_header)));

	return ip6_output(m, 0, NULL, IPV6_MINMTU, 0, NULL);

drop:
	m_freem(m);
	return (error);
}

int
ip6_etherip_input(struct mbuf **mp, int *offp, int proto)
{
	struct mbuf *m = *mp;
	struct mbuf_list ml = MBUF_LIST_INITIALIZER();
	struct etherip_softc *sc;
	const struct ip6_hdr *ip6;
	struct etherip_header *eip;
	struct sockaddr_in6 ipsrc, ipdst;
	struct sockaddr_in6 *src6, *dst6;
	struct ifnet *ifp = NULL;


	if (!etherip_allow && (m->m_flags & (M_AUTH|M_CONF)) == 0) {
		m_freem(m);
		etheripstat.etherips_pdrops++;
		return IPPROTO_NONE;
	}

	ip6 = mtod(m, const struct ip6_hdr *);
	in6_recoverscope(&ipsrc, &ip6->ip6_src);
	in6_recoverscope(&ipdst, &ip6->ip6_dst);

	LIST_FOREACH(sc, &etherip_softc_list, sc_entry) {
		if (sc->sc_src.ss_family != AF_INET6 ||
		    sc->sc_dst.ss_family != AF_INET6)
			continue;

		src6 = (struct sockaddr_in6 *)&sc->sc_src;
		dst6 = (struct sockaddr_in6 *)&sc->sc_dst;

		if (IN6_ARE_ADDR_EQUAL(&src6->sin6_addr, &ipdst.sin6_addr) &&
		    src6->sin6_scope_id == ipdst.sin6_scope_id &&
		    IN6_ARE_ADDR_EQUAL(&dst6->sin6_addr, &ipsrc.sin6_addr) &&
		    dst6->sin6_scope_id == ipsrc.sin6_scope_id) {
			ifp = &sc->sc_ac.ac_if;
			break;
		}
	}

	if (ifp == NULL) {
#if NGIF > 0
		/*
		 * This path is nessesary for gif(4) and etherip(4) coexistence.
		 * This is tricky but the path will be removed soon when
		 * implementation of etherip is removed from gif(4).
		 */
		return etherip_input(mp, offp, proto);
#else
		etheripstat.etherips_noifdrops++;
		m_freem(m);
		return IPPROTO_DONE;
#endif /* NGIF */
	}

	m_adj(m, *offp);
	m = m_pullup(m, sizeof(struct etherip_header));
	if (m == NULL) {
		etheripstat.etherips_adrops++;
		return IPPROTO_DONE;
	}

	eip = mtod(m, struct etherip_header *);
	if ((eip->eip_ver != ETHERIP_VERSION) || eip->eip_pad) {
		etheripstat.etherips_adrops++;
		m_freem(m);
		return IPPROTO_DONE;
	}
	etheripstat.etherips_ipackets++;
	etheripstat.etherips_ibytes += (m->m_pkthdr.len -
	    sizeof(struct etherip_header));

	m_adj(m, sizeof(struct etherip_header));
	m = m_pullup(m, sizeof(struct ether_header));
	if (m == NULL) {
		etheripstat.etherips_adrops++;
		return IPPROTO_DONE;
	}

	m->m_flags &= ~(M_BCAST|M_MCAST);

#if NPF > 0
	pf_pkt_addr_changed(m);
#endif

	ml_enqueue(&ml, m);
	if_input(ifp, &ml);
	return IPPROTO_DONE;
}
#endif /* INET6 */

int
ip_etherip_sysctl(int *name, u_int namelen, void *oldp, size_t *oldlenp,
    void *newp, size_t newlen)
{
	/* All sysctl names at this level are terminal. */
	if (namelen != 1)
		return ENOTDIR;

	switch (name[0]) {
	case ETHERIPCTL_ALLOW:
		return sysctl_int(oldp, oldlenp, newp, newlen, &etherip_allow);
	case ETHERIPCTL_STATS:
		if (newp != NULL)
			return EPERM;
		return sysctl_struct(oldp, oldlenp, newp, newlen,
		    &etheripstat, sizeof(etheripstat));
	default:
		break;
	}

	return ENOPROTOOPT;
}
@


1.15
log
@Rename struct etheripstat members for consistency, move them all to 64bits

Will make transition to percpu counters easier.  ok bluhm@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_etherip.c,v 1.14 2017/01/29 19:58:47 bluhm Exp $	*/
d426 1
a426 1
	if (!etherip_allow) {
d582 1
a582 1
	if (!etherip_allow) {
@


1.14
log
@Change the IPv4 pr_input function to the way IPv6 is implemented,
to get rid of struct ip6protosw and some wrapper functions.  It is
more consistent to have less different structures.  The divert_input
functions cannot be called anyway, so remove them.
OK visa@@ mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_etherip.c,v 1.13 2017/01/25 17:34:31 bluhm Exp $	*/
d369 1
a369 1
		etheripstat.etherip_adrops++;
d379 1
a379 1
		etheripstat.etherip_adrops++;
d400 2
a401 2
	etheripstat.etherip_opackets++;
	etheripstat.etherip_obytes += (m->m_pkthdr.len -
d428 1
a428 1
		etheripstat.etherip_pdrops++;
d458 1
a458 1
		etheripstat.etherip_noifdrops++;
d467 1
a467 1
		etheripstat.etherip_adrops++;
d473 1
a473 1
		etheripstat.etherip_adrops++;
d478 2
a479 2
	etheripstat.etherip_ipackets++;
	etheripstat.etherip_ibytes += (m->m_pkthdr.len -
d485 1
a485 1
		etheripstat.etherip_adrops++;
d526 1
a526 1
		etheripstat.etherip_adrops++;
d536 1
a536 1
		etheripstat.etherip_adrops++;
d558 2
a559 2
	etheripstat.etherip_opackets++;
	etheripstat.etherip_obytes += (m->m_pkthdr.len -
d584 1
a584 1
		etheripstat.etherip_pdrops++;
d618 1
a618 1
		etheripstat.etherip_noifdrops++;
d627 1
a627 1
		etheripstat.etherip_adrops++;
d633 1
a633 1
		etheripstat.etherip_adrops++;
d637 2
a638 2
	etheripstat.etherip_ipackets++;
	etheripstat.etherip_ibytes += (m->m_pkthdr.len -
d644 1
a644 1
		etheripstat.etherip_adrops++;
@


1.13
log
@Since raw_input() and route_input() are gone from pr_input, we can
make the variable parameters of the protocol input functions fixed.
Also add the proto to make it similar to IPv6.
OK mpi@@ guenther@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_etherip.c,v 1.12 2017/01/23 11:37:29 mpi Exp $	*/
d407 2
a408 2
void
ip_etherip_input(struct mbuf *m, int off, int proto)
d410 1
d423 1
a423 1
		return;
d429 1
a429 1
		return;
d456 1
a456 1
		etherip_input(m, off, proto);
d460 1
a461 1
		return;
d464 1
a464 1
	m_adj(m, off);
d468 1
a468 1
		return;
d475 1
a475 1
		return;
d486 1
a486 1
		return;
d496 1
a573 1
	int off = *offp;
d616 1
a616 1
		return etherip_input6(mp, offp, proto);
d624 1
a624 1
	m_adj(m, off);
a655 1

a657 1

@


1.12
log
@Flag pseudo-interfaces as such in order to call add_net_randomness()
only once per packet.

Fix a regression introduced when if_input() started to be called by
every pseudo-driver.

ok claudio@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_etherip.c,v 1.11 2017/01/22 10:17:39 dlg Exp $	*/
d408 1
a408 1
ip_etherip_input(struct mbuf *m, ...)
a415 6
	int off;
	va_list ap;

	va_start(ap, m);
	off = va_arg(ap, int);
	va_end(ap);
d455 1
a455 1
		etherip_input(m, off);
@


1.11
log
@move counting if_opackets next to counting if_obytes in if_enqueue.

this means packets are consistently counted in one place, unlike the
many and various ways that drivers thought they should do it.

ok mpi@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_etherip.c,v 1.10 2016/12/13 06:51:11 dlg Exp $	*/
d121 1
@


1.10
log
@make v6 tunnel address handling consider ipv6 scope.

an earlier version of this diff was ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_etherip.c,v 1.9 2016/11/17 13:37:20 mpi Exp $	*/
a186 2

		ifp->if_opackets++;
@


1.9
log
@Remove splsoftnet()s in the ioctl(2) path.

Since soft-interrupt for network processing are no more, the
KERNEL_LOCK() is what protect two concurrent threads from
accessing  data structures.

ok goda@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_etherip.c,v 1.8 2016/11/14 03:51:53 dlg Exp $	*/
d512 1
d519 2
a520 2
		m_freem(m);
		return EAFNOSUPPORT;
d523 2
a524 2
		m_freem(m);
		return ENETUNREACH;
d551 6
a556 2
	ip6->ip6_src  = src->sin6_addr;
	ip6->ip6_dst = dst->sin6_addr;
d568 4
d583 1
d595 2
d606 7
a612 6
		if (!IN6_ARE_ADDR_EQUAL(&src6->sin6_addr, &ip6->ip6_dst) ||
		    !IN6_ARE_ADDR_EQUAL(&dst6->sin6_addr, &ip6->ip6_src))
			continue;

		ifp = &sc->sc_ac.ac_if;
		break;
@


1.8
log
@turn ipstat into a set of percpu counters.

each counter is identified by an enum value which correspond to the
original members of the ipstat struct.

ipstat_inc(ips_foo) replaces ipstat.ips_foo++ for the actual updates.
ipstat_inc is a thin wrapper around counters_inc.

counters are still returned to userland via the ipstat struct for now.

ok mpi@@ mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_etherip.c,v 1.7 2016/04/13 11:41:15 mpi Exp $	*/
d218 1
a218 1
	int s, error = 0;
a282 1
		s = splsoftnet();
a285 1
		splx(s);
d317 1
a317 1
	int s, error = 0;
d321 1
a321 2
	s = splsoftnet();
	LIST_FOREACH (tsc, &etherip_softc_list, sc_entry) {
a341 2
	splx(s);

@


1.7
log
@We're always ready!  So send IFQ_SET_READY() to the bitbucket.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_etherip.c,v 1.6 2016/03/04 22:38:23 sashan Exp $	*/
d433 1
a433 1
		ipstat.ips_noproto++;
@


1.6
log
@- putting back KASSERT(), which I've backed out on Jan 31
  We don't expect inbound packets to come to PF with statekey attached.

- I've also found missing call to pf_pkt_addr_changed() at various
  places, which needs to get fixed to prevent KASSERT() from firing.

OK mpi@@, sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_etherip.c,v 1.5 2016/01/25 05:12:34 jsg Exp $	*/
a121 1
	IFQ_SET_READY(&ifp->if_snd);
@


1.5
log
@don't return an uninitialised value for the SIOCGLIFPHYRTABLE case
ok yasuoka@@ goda@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_etherip.c,v 1.4 2016/01/22 11:33:39 goda Exp $	*/
d502 4
d648 4
@


1.4
log
@Support tunnel VRF on etherip(4)

ok dlg@@ yasuoka@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_etherip.c,v 1.3 2015/12/05 22:16:27 mpi Exp $	*/
d219 1
a219 1
	int s, error;
a231 1
		error = 0;
a288 1
		error = 0;
a299 1
		error = 0;
@


1.3
log
@Multiple cleanups.

ok goda@@, yasuoka@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d59 1
d235 17
d338 2
a339 1
		if (memcmp(&tsc->sc_dst, dst, dst->ss_len) == 0 &&
d405 2
d455 2
a456 1
		if (src->sin_addr.s_addr != ip->ip_dst.s_addr ||
d557 2
@


1.2
log
@Reject input when either the version is wrong or the pad is non-zero;
not when the version is wrong and the pad is non-zero.

OK goda@@
@
text
@d1 1
a25 1
#include <sys/sockio.h>
a27 2
#include <sys/errno.h>
#include <sys/protosw.h>
d34 1
a35 2
#include <netinet/in_systm.h>
#include <netinet/in_var.h>
d40 1
a43 1
#include <netinet6/in6_var.h>
d64 1
a64 1
LIST_HEAD(etherip_softc_list, etherip_softc);
d84 7
a90 7
static int etherip_clone_create(struct if_clone *, int);
static int etherip_clone_destroy(struct ifnet *);
static int etherip_ioctl(struct ifnet *, u_long, caddr_t);
static void etherip_start(struct ifnet *);
static int etherip_media_change(struct ifnet *);
static void etherip_media_status(struct ifnet *, struct ifmediareq *);
static int etherip_set_tunnel_addr(struct ifnet *, struct sockaddr_storage *,
d93 2
a94 3
struct etherip_softc_list etherip_softc_list;
struct if_clone	etherip_cloner =
    IF_CLONE_INITIALIZER("etherip", etherip_clone_create, etherip_clone_destroy);
a99 1

d103 1
a103 1
static int
d109 2
a110 3
	if ((sc = malloc(sizeof(*sc),
	    M_DEVBUF, M_NOWAIT|M_ZERO)) == NULL)
		return (ENOMEM);
d135 1
a135 1
	return (0);
d138 1
a138 1
static int
d148 1
a148 1
	free(sc, M_DEVBUF, 0);
d150 1
a150 1
	return (0);
d153 1
a153 1
static int
d156 1
a156 1
	return (0);
d159 1
a159 1
static void
d166 1
a166 1
static void
d171 1
a171 1
	int s, error;
a173 1
		s = splnet();
a174 1
		splx(s);
a176 1
		ifp->if_opackets++;
d182 12
a193 6
		if (sc->sc_src.ss_family != AF_UNSPEC && sc->sc_dst.ss_family != AF_UNSPEC) {
			ifp->if_flags |= IFF_OACTIVE;
			switch (sc->sc_src.ss_family) {
			case AF_INET:
				error = ip_etherip_output(ifp, m);
				break;
d195 3
a197 3
			case AF_INET6:
				error = ip6_etherip_output(ifp, m);
				break;
d199 6
a204 6
			default:
				error = ENETDOWN;
			}
			ifp->if_flags &= ~IFF_OACTIVE;
		} else
			m_freem(m);
d210 1
a210 1
static int
d269 2
a270 2
		bzero(&sc->sc_src, sizeof(sc->sc_src));
		bzero(&sc->sc_dst, sizeof(sc->sc_dst));
d279 2
a280 2
		bzero(&lifr->addr, sizeof(lifr->addr));
		bzero(&lifr->dstaddr, sizeof(lifr->dstaddr));
d297 1
a297 1
	return (error);
d300 1
a300 1
static int
d309 1
a309 1
	s = splnet();
a341 1
	int error;
d351 4
a383 4
	if (dst->sin_addr.s_addr == INADDR_ANY) {
		m_freem(m);
		return ENETUNREACH;
	}
d393 1
a393 5
	error = ip_output(m, NULL, NULL, IP_RAWOUTPUT, NULL, NULL, 0);
	if (error)
		ifp->if_oerrors++;

	return error;
a482 2
	ifp->if_ipackets++;

a484 2

	return;
a494 1
	int error;
d504 4
d534 1
a534 6
	if (!IN6_IS_ADDR_UNSPECIFIED(&dst->sin6_addr))
		ip6->ip6_dst = dst->sin6_addr;
	else  {
		m_freem(m);
		return ENETUNREACH;
	}
d543 1
a543 5
	error = ip6_output(m, 0, NULL, IPV6_MINMTU, 0, NULL);
	if (error)
		ifp->if_oerrors++;

	return error;
a623 2
	ifp->if_ipackets++;

d638 1
a638 1
		return (ENOTDIR);
d642 1
a642 2
		return (sysctl_int(oldp, oldlenp, newp, newlen,
				   &etherip_allow));
d645 3
a647 3
			return (EPERM);
		return (sysctl_struct(oldp, oldlenp, newp, newlen,
				      &etheripstat, sizeof(etheripstat)));
d649 1
a649 1
		return (ENOPROTOOPT);
d651 2
a652 1
	/* NOTREACHED */
@


1.1
log
@Implement etherip(4) driver

This commit is not removing the existing EtherIP part of gif(4) and
it keeps EtherIP of gif(4) working.

ok jbg@@ sthen@@ mpi@@ reyk@@ yasuoka@@
@
text
@d473 1
a473 1
	if (eip->eip_ver != ETHERIP_VERSION && eip->eip_pad) {
@

