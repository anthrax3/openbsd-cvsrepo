head	1.37;
access;
symbols
	OPENBSD_6_1_BASE:1.37
	OPENBSD_6_0:1.36.0.4
	OPENBSD_6_0_BASE:1.36
	OPENBSD_5_9:1.31.0.2
	OPENBSD_5_9_BASE:1.31
	OPENBSD_5_8:1.26.0.4
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.24.0.2
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.24.0.6
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.20.0.14
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.12
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.10
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.8
	OPENBSD_5_0:1.20.0.6
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.4
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.2
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.19.0.4
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.19.0.6
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.2
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.18.0.12
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.10
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.8
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.6
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.4
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.2
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.11.0.6
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.9.0.4
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.6
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.8
	UBC:1.7.0.4
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	SMP:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.37
date	2017.01.24.10.08.30;	author krw;	state Exp;
branches;
next	1.36;
commitid	6c6qq5OdS4VVnyVM;

1.36
date	2016.04.19.23.31.32;	author dlg;	state Exp;
branches;
next	1.35;
commitid	93MUidRpqx4pZPJ8;

1.35
date	2016.04.15.04.34.10;	author dlg;	state Exp;
branches;
next	1.34;
commitid	0O1Y287nJPLHW6S4;

1.34
date	2016.03.28.13.05.22;	author dlg;	state Exp;
branches;
next	1.33;
commitid	skJ1NokXHFFyE2fu;

1.33
date	2016.03.14.03.48.47;	author dlg;	state Exp;
branches;
next	1.32;
commitid	MDyOaANH377seN6I;

1.32
date	2016.03.03.09.27.51;	author dlg;	state Exp;
branches;
next	1.31;
commitid	OFI8cgzB5LCSN9Zj;

1.31
date	2015.12.03.16.27.32;	author mpi;	state Exp;
branches;
next	1.30;
commitid	wK6td35Fr7xdNzh3;

1.30
date	2015.09.13.10.02.36;	author dlg;	state Exp;
branches;
next	1.29;
commitid	ni4mL2tUxr2APTrc;

1.29
date	2015.09.13.09.46.45;	author dlg;	state Exp;
branches;
next	1.28;
commitid	ddAkZEA4GEAJac0m;

1.28
date	2015.09.13.06.25.46;	author dlg;	state Exp;
branches;
next	1.27;
commitid	J3q16OkmNmNp1ekn;

1.27
date	2015.09.12.20.46.40;	author dlg;	state Exp;
branches;
next	1.26;
commitid	uUy9Ynsuv11KW4On;

1.26
date	2015.05.20.08.54.37;	author mpi;	state Exp;
branches;
next	1.25;
commitid	sJVAsE8GKiZxjUOj;

1.25
date	2015.05.19.11.09.24;	author mpi;	state Exp;
branches;
next	1.24;
commitid	i7YRRkkCxLwyGmml;

1.24
date	2013.10.24.11.14.33;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2013.10.19.14.05.14;	author reyk;	state Exp;
branches;
next	1.22;

1.22
date	2013.09.17.13.34.18;	author mpi;	state Exp;
branches;
next	1.21;

1.21
date	2013.08.15.09.18.37;	author mpi;	state Exp;
branches;
next	1.20;

1.20
date	2010.06.03.16.15.00;	author naddy;	state Exp;
branches;
next	1.19;

1.19
date	2008.11.07.00.52.40;	author brad;	state Exp;
branches;
next	1.18;

1.18
date	2006.02.09.00.05.55;	author reyk;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.05.14.57.24;	author norby;	state Exp;
branches;
next	1.16;

1.16
date	2005.07.19.11.50.20;	author camield;	state Exp;
branches;
next	1.15;

1.15
date	2005.06.07.17.35.17;	author camield;	state Exp;
branches;
next	1.14;

1.14
date	2005.04.24.10.16.10;	author brad;	state Exp;
branches;
next	1.13;

1.13
date	2005.04.20.23.02.22;	author mpf;	state Exp;
branches;
next	1.12;

1.12
date	2005.04.17.23.02.02;	author brad;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.12.18.07.29;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.03.14.55.58;	author markus;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.01.00.14.40;	author chris;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.12.01.42.29;	author chris;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.24.22.52.08;	author jason;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2001.06.09.06.17.48;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.09.06.16.38;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.28.15.22.44;	author jason;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.03.26.19.00.59;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.22.05.26.35;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.26.19.03.11;	author chris;	state Exp;
branches;
next	;

1.4.4.1
date	2001.05.14.22.40.02;	author niklas;	state Exp;
branches;
next	1.4.4.2;

1.4.4.2
date	2001.07.04.10.54.13;	author niklas;	state Exp;
branches;
next	1.4.4.3;

1.4.4.3
date	2003.03.28.00.41.28;	author niklas;	state Exp;
branches;
next	1.4.4.4;

1.4.4.4
date	2004.02.19.10.57.21;	author niklas;	state Exp;
branches;
next	1.4.4.5;

1.4.4.5
date	2004.06.05.23.11.24;	author niklas;	state Exp;
branches;
next	;

1.7.4.1
date	2002.10.29.00.36.46;	author art;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2003.05.19.22.30.41;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.37
log
@A space here, a space there. Soon we're talking real whitespace
rectification.
@
text
@/*	$OpenBSD: if_vlan_var.h,v 1.36 2016/04/19 23:31:32 dlg Exp $	*/

/*
 * Copyright 1998 Massachusetts Institute of Technology
 *
 * Permission to use, copy, modify, and distribute this software and
 * its documentation for any purpose and without fee is hereby
 * granted, provided that both the above copyright notice and this
 * permission notice appear in all copies, that both the above
 * copyright notice and this permission notice appear in all
 * supporting documentation, and that the name of M.I.T. not be used
 * in advertising or publicity pertaining to distribution of the
 * software without specific, written prior permission.  M.I.T. makes
 * no representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied
 * warranty.
 *
 * THIS SOFTWARE IS PROVIDED BY M.I.T. ``AS IS''.  M.I.T. DISCLAIMS
 * ALL EXPRESS OR IMPLIED WARRANTIES WITH REGARD TO THIS SOFTWARE,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT
 * SHALL M.I.T. BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: src/sys/net/if_vlan_var.h,v 1.3 1999/08/28 00:48:24 peter Exp $
 */

#ifndef _NET_IF_VLAN_VAR_H_
#define _NET_IF_VLAN_VAR_H_

/* sysctl(3) tags, for compatibility purposes */
#define	VLANCTL_PROTO	1
#define	VLANCTL_MAX	2

/*
 * Configuration structure for SIOCSETVLAN and SIOCGETVLAN ioctls.
 */
struct	vlanreq {
	char	vlr_parent[IFNAMSIZ];
	u_short	vlr_tag;
};

#ifdef _KERNEL
#include <sys/refcnt.h>

#define mc_enm	mc_u.mcu_enm

struct vlan_mc_entry {
	LIST_ENTRY(vlan_mc_entry)	mc_entries;
	union {
		struct ether_multi	*mcu_enm;
	} mc_u;
	struct sockaddr_storage		mc_addr;
};

struct	ifvlan {
	struct	arpcom ifv_ac;	/* make this an interface */
	unsigned int ifv_ifp0;	/* parent interface of this vlan */
	struct	ifv_linkmib {
		u_int16_t ifvm_proto; /* encapsulation ethertype */
		u_int16_t ifvm_tag; /* tag to apply on packets leaving if */
		u_int16_t ifvm_prio; /* prio to apply on packet leaving if */
		u_int16_t ifvm_type; /* non-standard ethertype or 0x8100 */
	}	ifv_mib;
	LIST_HEAD(__vlan_mchead, vlan_mc_entry)	vlan_mc_listhead;
	SRPL_ENTRY(ifvlan) ifv_list;
	int ifv_flags;
	struct refcnt ifv_refcnt;
	void *lh_cookie;
	void *dh_cookie;
	struct ifih *ifv_ifih;
};

#define	ifv_if		ifv_ac.ac_if
#define	ifv_tag		ifv_mib.ifvm_tag
#define	ifv_prio	ifv_mib.ifvm_prio
#define	ifv_type	ifv_mib.ifvm_type
#define	IFVF_PROMISC	0x01	/* the parent should be made promisc */
#define	IFVF_LLADDR	0x02	/* don't inherit the parents mac */

struct mbuf	*vlan_inject(struct mbuf *, uint16_t, uint16_t);
#endif /* _KERNEL */

#endif /* _NET_IF_VLAN_VAR_H_ */
@


1.36
log
@make setting a vlan interfaces lladdr more likely to work

the recent vlan code sets the vlan interfaces mac address to the
parent interfaces mac address when it is brought up, and resets it
when the vlan interface is brought down.

now, if you set a mac address manually (eg, ifconfig vlanX lladdr
f0:0b:a7:ba:2b:00), vlan(4) ignores the parents mac address and
never resets its own.

to make this work, setting a custom lladdr on a vlan interface makes
the parent interface promisc so the packets wont be filtered by the
hardware interface.

setting the mac address to 00:00:00:00:00:00 resets this behavior
and makes the interface inherit the parents mac again.

issue reported by and fix tested by paul de weerd
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.35 2016/04/15 04:34:10 dlg Exp $	*/
d17 1
a17 1
 * 
@


1.35
log
@rename ifv_p to ifv_ifp0

this makes it more clear to the casual reader that it refers to the
parent interface, which is consistently referred to as ifp0 in the
rest of the vlan (and carp) code.

this is a good idea from mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.34 2016/03/28 13:05:22 dlg Exp $	*/
d84 2
a85 1
#define	IFVF_PROMISC	0x01
@


1.34
log
@turn ifv_p into an interface index instead of a real pointer to the parent

ok mpi@@ jmatthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.33 2016/03/14 03:48:47 dlg Exp $	*/
d64 1
a64 1
	unsigned int ifv_p;	/* parent interface of this vlan */
@


1.33
log
@move the vlan protocol definitions to the same places as the ethernet ones

ok mpi@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.32 2016/03/03 09:27:51 dlg Exp $	*/
d64 1
a64 1
	struct	ifnet *ifv_p;	/* parent interface of this vlan */
a65 1
		int	ifvm_parent;
@


1.32
log
@prototype vlan_inject()

this should have been committed as part of src/sys/net/if_vlan.c r1.152

tree breakage discovered by benoit lecocq
sorry
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.31 2015/12/03 16:27:32 mpi Exp $	*/
a35 15

struct	ether_vlan_header {
	u_char	evl_dhost[ETHER_ADDR_LEN];
	u_char	evl_shost[ETHER_ADDR_LEN];
	u_int16_t evl_encap_proto;
	u_int16_t evl_tag;
	u_int16_t evl_proto;
};

#define	EVL_VLID_MASK	0x0FFF
#define	EVL_VLANOFTAG(tag) ((tag) & EVL_VLID_MASK)
#define	EVL_PRIOFTAG(tag) (((tag) >> EVL_PRIO_BITS) & 7)
#define	EVL_ENCAPLEN	4	/* length in octets of encapsulation */
#define	EVL_PRIO_MAX	7
#define	EVL_PRIO_BITS	13
@


1.31
log
@Use SRPL_HEAD() and SRPL_ENTRY() to be consistent with and allow to
fallback to a SLIST.

ok dlg@@, jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.30 2015/09/13 10:02:36 dlg Exp $	*/
d101 2
@


1.30
log
@replace hand rolled reference counting with refcnts.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.29 2015/09/13 09:46:45 dlg Exp $	*/
d88 1
a88 1
	struct srpl_entry ifv_list;
@


1.29
log
@reintroduce mpsafe vlan_input.

the last commit was missing SRPL_INITs of the vlan_tagh buckets,
which was in a different tree to the one i committed from.

apologise to naddy@@ again
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.27 2015/09/12 20:46:40 dlg Exp $	*/
d65 2
d90 1
a90 1
	u_int ifv_refs;
@


1.28
log
@back out mpsafe vlans while i chase down a panic when operations
are done in a certain order.

panic found by naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.26 2015/05/20 08:54:37 mpi Exp $	*/
d86 1
a86 1
	LIST_ENTRY(ifvlan) ifv_list;
d88 1
@


1.27
log
@make vlan_input mpsafe by using srp lists in the vlan tag hash buckets.

ok mpi@@ claudio@@
@
text
@d86 1
a86 1
	struct srpl_entry ifv_list;
a87 1
	u_int ifv_refs;
@


1.26
log
@Keep track of the ifih corresponding to a vlan instance to ease its
removal.

As soon as carp(4) will be converted to the new if_input() API it
will be possible to add multiple vlan(4) and carp(4) pseudo-ifps on
top of the same parent interface.  When such thing happens we can no
longer assume that the first pseudo-ifp to be destroyed will be the
last configured.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.25 2015/05/19 11:09:24 mpi Exp $	*/
d86 1
a86 1
	LIST_ENTRY(ifvlan) ifv_list;
d88 1
@


1.25
log
@Take vlan(4) out of ether_input().

To keep the list of input handlers short, multiple vlans share the
same ifih.

if_input_process() now looks if the interface of a mbuf changed to
make sure the corresponding handlers are executed.  This is a hack
and will be improved later.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.24 2013/10/24 11:14:33 deraadt Exp $	*/
d90 1
@


1.24
log
@Move obvious kernel prototypes (and structure's with kernel pointers,
obviously only used in the kernel) behind #ifdef _KERNEL
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.23 2013/10/19 14:05:14 reyk Exp $	*/
a96 2

extern	int vlan_input(struct ether_header *eh, struct mbuf *m);
@


1.23
log
@Bring back the if_detachhook.  We're going to have more users now.

ok mpi@@ henning@@ benno@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.22 2013/09/17 13:34:18 mpi Exp $	*/
d37 27
a96 1
#endif /* _KERNEL */
a97 28
struct	ether_vlan_header {
	u_char	evl_dhost[ETHER_ADDR_LEN];
	u_char	evl_shost[ETHER_ADDR_LEN];
	u_int16_t evl_encap_proto;
	u_int16_t evl_tag;
	u_int16_t evl_proto;
};

#define	EVL_VLID_MASK	0x0FFF
#define	EVL_VLANOFTAG(tag) ((tag) & EVL_VLID_MASK)
#define	EVL_PRIOFTAG(tag) (((tag) >> EVL_PRIO_BITS) & 7)
#define	EVL_ENCAPLEN	4	/* length in octets of encapsulation */
#define	EVL_PRIO_MAX	7
#define	EVL_PRIO_BITS	13

/* sysctl(3) tags, for compatibility purposes */
#define	VLANCTL_PROTO	1
#define	VLANCTL_MAX	2

/*
 * Configuration structure for SIOCSETVLAN and SIOCGETVLAN ioctls.
 */
struct	vlanreq {
	char	vlr_parent[IFNAMSIZ];
	u_short	vlr_tag;
};

#ifdef _KERNEL
d100 1
@


1.22
log
@Change vlan(4) detach procedure to not use a hook but a list of vlans
on the parent interface.  This is similar to what bridge(4), trunk(4)
or carp(4) are doing and allows us to get rid of the detachhook.

ok reyk@@, mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.21 2013/08/15 09:18:37 mpi Exp $	*/
d59 1
a59 2
	LIST_ENTRY(ifvlan) ifv_list;	/* list of vlan on the same hash */
	LIST_ENTRY(ifvlan) ifv_next;	/* list of vlan on a phys interface */
d62 1
d100 1
a100 2
int	vlan_input(struct ether_header *eh, struct mbuf *m);
void	vlan_ifdetach(struct ifnet *);
@


1.21
log
@Stop defining SIOC{S,G}ETVLAN as SIOC{S,G}IFGENERIC because they
are two differents ioctls manipulating structures of a different
size.

In particular this prevents vlan(4) to handle pppoe(4)-specific
ioctls and vice versa, that could lead to smashing the stack of
the caller.

Issue originally found by David Hill when compiling ifconfig
with clang.

Note that this is an ABI break but we're riding a biger dragon
right now.

ok mikeb@@, kettenis@@, sthen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.20 2010/06/03 16:15:00 naddy Exp $	*/
d59 2
a60 1
	LIST_ENTRY(ifvlan) ifv_list;
a62 1
	void *dh_cookie;
d100 2
a101 1
extern	int vlan_input(struct ether_header *eh, struct mbuf *m);
@


1.20
log
@Add support for 802.1ad-style QinQ nested VLANs.

QinQ-compliant svlan (service VLAN) interfaces are implemented as
a new cloner type, use Ethernet type 0x88a8, and have a dedicated
VLAN tag hash to avoid ID conflicts.  vlan(4) interfaces can be
stacked on top of svlan(4).

Originally from reyk@@, input from claudio@@ and deraadt@@
ok claudio@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.19 2008/11/07 00:52:40 brad Exp $	*/
a97 2
#define	SIOCSETVLAN	SIOCSIFGENERIC
#define	SIOCGETVLAN	SIOCGIFGENERIC
@


1.19
log
@Replace the number of bits to shift with EVL_PRIO_BITS in the
EVL_PRIOFTAG macro.

ok naddy@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.18 2006/02/09 00:05:55 reyk Exp $	*/
d56 1
d68 1
@


1.18
log
@add an interface detach hook and use it with the vlan(4) driver. this
fixes a possible crash if the parent interface has been destroyed
(like vlan on trunk) before destroying the vlan interface.

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.17 2006/01/05 14:57:24 norby Exp $	*/
d80 1
a80 1
#define	EVL_PRIOFTAG(tag) (((tag) >> 13) & 7)
@


1.17
log
@Make it possible to set a default vlan priority for vlan interfaces.

ok claudio@@ brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.16 2005/07/19 11:50:20 camield Exp $	*/
d61 1
@


1.16
log
@Remove vlan_input_tag() since all four drivers that used it have been
reworked to not strip vlan tags in hardware anymore.

ok brad henning jason
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.15 2005/06/07 17:35:17 camield Exp $	*/
d55 1
d65 1
d81 2
@


1.15
log
@de-register, ok henning
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.14 2005/04/24 10:16:10 brad Exp $	*/
a95 1
extern	int vlan_input_tag(struct mbuf *m, u_int16_t t);
@


1.14
log
@Use the IANA assignment IFT_L2VLAN.

From FreeBSD/NetBSD

Tested by camield@@ and Alexey E. Suslikov <cruel at texnika dot com dot ua>
ok camield@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.13 2005/04/20 23:02:22 mpf Exp $	*/
d95 1
a95 1
extern	int vlan_input(register struct ether_header *eh, struct mbuf *m);
@


1.13
log
@Make vlan(4) aware of its physical interface link state.
Changes are reported to userland and to other
interfaces sitting on top of us.

OK henning@@, camield@@
Tested by camield@@ and Alexey E. Suslikov
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.12 2005/04/17 23:02:02 brad Exp $	*/
a78 3

/* When these sorts of interfaces get their own identifier... */
#define	IFT_8021_VLAN	IFT_PROPVIRTUAL
@


1.12
log
@- In vlan_input()/vlan_input_tag(), always mask off all but the VLID
  bits from tags extracted from received frames. (Some drivers may
  already do this masking internally, but doing it here doesn't hurt
  and insures consistency.)
- In vlan_ioctl(), don't let the user set a VLAN ID value with anything
  besides the VLID bits set, otherwise we will have trouble matching
  an interface in vlan_input() later.
- Set the interface speed back to zero after ether_ifattach(). RFC 2863
  says: "For a sub-layer which has no concept of bandwidth, [ifSpeed]
  should be zero."
- Do not call if_down() on a parent interface if it's already down.

From FreeBSD

Tested by camield@@ and Alexey E. Suslikov <cruel at texnika dot com dot ua>
ok camield@@
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.11 2004/02/12 18:07:29 henning Exp $	*/
d59 1
@


1.11
log
@from camield:
se hash instead of linked list to speed up tag to vlan interface mapping
ok markus@@ and myself
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.10 2003/12/03 14:55:58 markus Exp $	*/
d74 2
a75 1
#define	EVL_VLANOFTAG(tag) ((tag) & 4095)
@


1.10
log
@add support for ifconfig clone/destroy; ok henning deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.9 2003/02/01 00:14:40 chris Exp $	*/
d57 1
a57 1
	LIST_ENTRY(ifvlan) ifv_list;	/* all vlan interfaces */
@


1.9
log
@from Chris Pascoe <c.pascoe@@itee.uq.edu.au>:

Fix multicast bug; internal multicast members' list was not initialized
correctly.  Also, begin to make vlan less ether specific - TR and FDDI
could also be supported.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.8 2002/06/12 01:42:29 chris Exp $	*/
d57 1
@


1.8
log
@import of netbsd's vlan multicast code
this works better than what we have now, although i have not been
able to extensively test it.  several folks thought it should be added
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.7 2001/06/24 22:52:08 jason Exp $	*/
d45 1
a45 1
	struct ether_addr		mc_addr;
@


1.7
log
@- redefine vlan_input_tag to take mbuf * and tag only
- call ether_input_mbuf() instead of ether_input()
- most work done by fgsch
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.6 2001/06/09 06:17:48 angelos Exp $	*/
d38 2
d41 4
a45 1
	SLIST_ENTRY(vlan_mc_entry)	mc_entries;
d56 1
a56 1
	SLIST_HEAD(__vlan_mchead, vlan_mc_entry)	vlan_mc_listhead;
d59 1
@


1.7.4.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.7 2001/06/24 22:52:08 jason Exp $	*/
a37 2
#define mc_enm	mc_u.mcu_enm

a38 4
	LIST_ENTRY(vlan_mc_entry)	mc_entries;
	union {
		struct ether_multi	*mcu_enm;
	} mc_u;
d40 1
d51 1
a51 1
	LIST_HEAD(__vlan_mchead, vlan_mc_entry)	vlan_mc_listhead;
a53 1

@


1.7.4.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
	struct sockaddr_storage		mc_addr;
@


1.6
log
@Whitespace cleanup.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.5 2001/06/09 06:16:38 angelos Exp $	*/
d90 1
a90 2
extern	int vlan_input_tag(struct ether_header *eh,
			struct mbuf *m, u_int16_t t);
@


1.5
log
@By popular demand, protect from multiple inclusion, and fix to use the
same naming style.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.4 2001/03/28 15:22:44 jason Exp $	*/
d35 1
a35 1
#define	_NET_IF_VLAN_VAR_H_
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d35 1
a35 1
#define	_NET_IF_VLAN_VAR_H_	1
a92 1

@


1.4.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.4 2001/03/28 15:22:44 jason Exp $	*/
@


1.4.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: if_vlan_var.h,v 1.4.4.1 2001/05/14 22:40:02 niklas Exp $	*/
d35 1
a35 1
#define _NET_IF_VLAN_VAR_H_
d90 2
a91 1
extern	int vlan_input_tag(struct mbuf *m, u_int16_t t);
d93 1
@


1.4.4.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a37 2
#define mc_enm	mc_u.mcu_enm

d39 2
a40 5
	LIST_ENTRY(vlan_mc_entry)	mc_entries;
	union {
		struct ether_multi	*mcu_enm;
	} mc_u;
	struct sockaddr_storage		mc_addr;
d51 1
a51 1
	LIST_HEAD(__vlan_mchead, vlan_mc_entry)	vlan_mc_listhead;
a53 1

@


1.4.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a56 1
	LIST_ENTRY(ifvlan) ifv_list;	/* all vlan interfaces */
@


1.4.4.5
log
@Merge with the trunk
@
text
@d57 1
a57 1
	LIST_ENTRY(ifvlan) ifv_list;
@


1.3
log
@- move if_vlan back to a default if_type of IFT_PROPVIRTUAL
- change if_type to match parent at vlan_configure time
- comment typo
- implement promiscuous mode for vlan interfaces (from NetBSD)
- change if_flags inheritance mask to UP|BROADCAST|SIMPLE|MULTICAST
(upshot of all this: bridging vlan interfaces works, with some limitations...
documentation soon)
@
text
@d1 2
@


1.2
log
@remove vlan_proto variable, replace with ETHERTYPE_8021Q
define if_type for vlan interfaces (IFT_8021_VLAN)
#ifdef DEBUG some debugging printf's
protect against other uses of M_PROTO1
@
text
@d50 1
d54 1
d68 3
@


1.1
log
@if_vlan from FreeBSD and a few modifications
@
text
@a66 3
/* When these sorts of interfaces get their own identifier... */
#define	IFT_8021_VLAN	IFT_PROPVIRTUAL

a81 1
extern	u_int vlan_proto;
@

