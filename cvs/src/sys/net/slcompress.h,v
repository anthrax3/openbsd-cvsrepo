head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.14
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.8
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.10
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.7.0.42
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.40
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.6
	UBC:1.4.0.18
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.16
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.14
	OPENBSD_2_8:1.4.0.12
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.10
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.8
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2017.01.24.10.08.30;	author krw;	state Exp;
branches;
next	1.9;
commitid	6c6qq5OdS4VVnyVM;

1.9
date	2013.10.24.18.50.16;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2013.10.24.11.14.35;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.23.28.12;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.14.21.35.00;	author todd;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.01.27.10;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.05.08.05.02.02;	author millert;	state Exp;
branches
	1.4.8.1
	1.4.18.1;
next	1.3;

1.3
date	97.09.05.04.27.05;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.02.24.13.34.04;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.07;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.07;	author deraadt;	state Exp;
branches;
next	;

1.4.8.1
date	2002.03.28.14.57.37;	author niklas;	state Exp;
branches;
next	1.4.8.2;

1.4.8.2
date	2003.03.28.00.41.29;	author niklas;	state Exp;
branches;
next	1.4.8.3;

1.4.8.3
date	2003.06.07.11.06.07;	author ho;	state Exp;
branches;
next	;

1.4.18.1
date	2002.06.11.03.30.46;	author art;	state Exp;
branches;
next	1.4.18.2;

1.4.18.2
date	2002.10.29.00.36.46;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@A space here, a space there. Soon we're talking real whitespace
rectification.
@
text
@/*	$OpenBSD: slcompress.h,v 1.9 2013/10/24 18:50:16 deraadt Exp $	*/
/*	$NetBSD: slcompress.h,v 1.11 1997/05/17 21:12:11 christos Exp $	*/

/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)slcompress.h	8.1 (Berkeley) 6/10/93
 */

/*
 * Definitions for tcp compression routines.
 *
 * Van Jacobson (van@@helios.ee.lbl.gov), Dec 31, 1989:
 *	- Initial distribution.
 */

#ifndef _NET_SLCOMPRESS_H_
#define _NET_SLCOMPRESS_H_

#define MAX_STATES 16		/* must be > 2 and < 256 */
#define MAX_HDR MLEN		/* XXX 4bsd-ism: should really be 128 */

/*
 * Compressed packet format:
 *
 * The first octet contains the packet type (top 3 bits), TCP
 * 'push' bit, and flags that indicate which of the 4 TCP sequence
 * numbers have changed (bottom 5 bits).  The next octet is a
 * conversation number that associates a saved IP/TCP header with
 * the compressed packet.  The next two octets are the TCP checksum
 * from the original datagram.  The next 0 to 15 octets are
 * sequence number changes, one change per bit set in the header
 * (there may be no changes and there are two special cases where
 * the receiver implicitly knows what changed -- see below).
 *
 * There are 5 numbers which can change (they are always inserted
 * in the following order): TCP urgent pointer, window,
 * acknowledgement, sequence number and IP ID.  (The urgent pointer
 * is different from the others in that its value is sent, not the
 * change in value.)  Since typical use of SLIP links is biased
 * toward small packets (see comments on MTU/MSS below), changes
 * use a variable length coding with one octet for numbers in the
 * range 1 - 255 and 3 octets (0, MSB, LSB) for numbers in the
 * range 256 - 65535 or 0.  (If the change in sequence number or
 * ack is more than 65535, an uncompressed packet is sent.)
 */

/*
 * Packet types (must not conflict with IP protocol version)
 *
 * The top nibble of the first octet is the packet type.  There are
 * three possible types: IP (not proto TCP or tcp with one of the
 * control flags set); uncompressed TCP (a normal IP/TCP packet but
 * with the 8-bit protocol field replaced by an 8-bit connection id --
 * this type of packet syncs the sender & receiver); and compressed
 * TCP (described above).
 *
 * LSB of 4-bit field is TCP "PUSH" bit (a worthless anachronism) and
 * is logically part of the 4-bit "changes" field that follows.  Top
 * three bits are actual packet type.  For backward compatibility
 * and in the interest of conserving bits, numbers are chosen so the
 * IP protocol version number (4) which normally appears in this nibble
 * means "IP packet".
 */

/* packet types */
#define TYPE_IP 0x40
#define TYPE_UNCOMPRESSED_TCP 0x70
#define TYPE_COMPRESSED_TCP 0x80
#define TYPE_ERROR 0x00

/* Bits in first octet of compressed packet */
#define NEW_C	0x40	/* flag bits for what changed in a packet */
#define NEW_I	0x20
#define NEW_S	0x08
#define NEW_A	0x04
#define NEW_W	0x02
#define NEW_U	0x01

/* reserved, special-case values of above */
#define SPECIAL_I (NEW_S|NEW_W|NEW_U)		/* echoed interactive traffic */
#define SPECIAL_D (NEW_S|NEW_A|NEW_W|NEW_U)	/* unidirectional data */
#define SPECIALS_MASK (NEW_S|NEW_A|NEW_W|NEW_U)

#define TCP_PUSH_BIT 0x10

#ifdef _KERNEL

/*
 * "state" data for each active tcp conversation on the wire.  This is
 * basically a copy of the entire IP/TCP header from the last packet
 * we saw from the conversation together with a small identifier
 * the transmit & receive ends of the line use to locate saved header.
 */
struct cstate {
	struct cstate *cs_next;	/* next most recently used cstate (xmit only) */
	u_int16_t cs_hlen;	/* size of hdr (receive only) */
	u_char cs_id;		/* connection # associated with this state */
	u_char cs_filler;
	union {
		char csu_hdr[MAX_HDR];
		struct ip csu_ip;	/* ip/tcp hdr from most recent packet */
	} slcs_u;
};
#define cs_ip slcs_u.csu_ip
#define cs_hdr slcs_u.csu_hdr

/*
 * all the state data for one serial line (we need one of these
 * per line).
 */
struct slcompress {
	struct cstate *last_cs;	/* most recently used tstate */
	u_char last_recv;	/* last rcvd conn. id */
	u_char last_xmit;	/* last sent conn. id */
	u_int16_t flags;
#ifndef SL_NO_STATS
	int sls_packets;	/* outbound packets */
	int sls_compressed;	/* outbound compressed packets */
	int sls_searches;	/* searches for connection state */
	int sls_misses;		/* times couldn't find conn. state */
	int sls_uncompressedin;	/* inbound uncompressed packets */
	int sls_compressedin;	/* inbound compressed packets */
	int sls_errorin;	/* inbound unknown type packets */
	int sls_tossed;		/* inbound packets tossed because of error */
#endif
	struct cstate tstate[MAX_STATES];	/* xmit connection states */
	struct cstate rstate[MAX_STATES];	/* receive connection states */
};
/* flag values */
#define SLF_TOSS 1		/* tossing rcvd frames because of input err */

void	sl_compress_init(struct slcompress *);
void	sl_compress_setup(struct slcompress *, int);
u_int	sl_compress_tcp(struct mbuf *,
	    struct ip *, struct slcompress *, int);
int	sl_uncompress_tcp(u_char **, int, u_int, struct slcompress *);
int	sl_uncompress_tcp_core(u_char *, int, int, u_int,
	    struct slcompress *, u_char **, u_int *);
#endif /* _KERNEL */

#endif /* _NET_SLCOMPRESS_H_ */
@


1.9
log
@Move more stuff under _KERNEL
ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: slcompress.h,v 1.8 2013/10/24 11:14:35 deraadt Exp $	*/
d60 1
a60 1
 * 
d161 1
a161 1
  	    struct ip *, struct slcompress *, int);
d164 1
a164 1
  	    struct slcompress *, u_char **, u_int *);
@


1.8
log
@Move obvious kernel prototypes (and structure's with kernel pointers,
obviously only used in the kernel) behind #ifdef _KERNEL
@
text
@d1 1
a1 1
/*	$OpenBSD: slcompress.h,v 1.7 2003/06/02 23:28:12 millert Exp $	*/
d112 1
a157 1
#ifdef _KERNEL
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: slcompress.h,v 1.6 2002/06/14 21:35:00 todd Exp $	*/
d157 1
d165 1
@


1.6
log
@spelling; from Brian Poole <raj@@cerias.purdue.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD: slcompress.h,v 1.5 2002/03/14 01:27:10 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: slcompress.h,v 1.4 1998/05/08 05:02:02 millert Exp $	*/
d67 1
a67 1
 * acknowlegement, sequence number and IP ID.  (The urgent pointer
@


1.4
log
@Add support for RFC-comliant deflate protocol
@
text
@d1 1
a1 1
/*	$OpenBSD: slcompress.h,v 1.3 1997/09/05 04:27:05 millert Exp $	*/
d161 7
a167 7
void	sl_compress_init __P((struct slcompress *));
void	sl_compress_setup __P((struct slcompress *, int));
u_int	sl_compress_tcp __P((struct mbuf *,
  	    struct ip *, struct slcompress *, int));
int	sl_uncompress_tcp __P((u_char **, int, u_int, struct slcompress *));
int	sl_uncompress_tcp_core __P((u_char *, int, int, u_int,
  	    struct slcompress *, u_char **, u_int *));
@


1.4.18.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: slcompress.h,v 1.4 1998/05/08 05:02:02 millert Exp $	*/
d161 7
a167 7
void	sl_compress_init(struct slcompress *);
void	sl_compress_setup(struct slcompress *, int);
u_int	sl_compress_tcp(struct mbuf *,
  	    struct ip *, struct slcompress *, int);
int	sl_uncompress_tcp(u_char **, int, u_int, struct slcompress *);
int	sl_uncompress_tcp_core(u_char *, int, int, u_int,
  	    struct slcompress *, u_char **, u_int *);
@


1.4.18.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: slcompress.h,v 1.4.18.1 2002/06/11 03:30:46 art Exp $	*/
d67 1
a67 1
 * acknowledgement, sequence number and IP ID.  (The urgent pointer
@


1.4.8.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d161 7
a167 7
void	sl_compress_init(struct slcompress *);
void	sl_compress_setup(struct slcompress *, int);
u_int	sl_compress_tcp(struct mbuf *,
  	    struct ip *, struct slcompress *, int);
int	sl_uncompress_tcp(u_char **, int, u_int, struct slcompress *);
int	sl_uncompress_tcp_core(u_char *, int, int, u_int,
  	    struct slcompress *, u_char **, u_int *);
@


1.4.8.2
log
@Sync the SMP branch with 3.3
@
text
@d67 1
a67 1
 * acknowledgement, sequence number and IP ID.  (The urgent pointer
@


1.4.8.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: slcompress.h,v 1.4.8.2 2003/03/28 00:41:29 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3
log
@Minor changes from ppp 2.3.1
@
text
@d1 1
a1 1
/*	$OpenBSD: slcompress.h,v 1.2 1997/02/24 13:34:04 niklas Exp $	*/
d46 2
a47 2
#ifndef _SLCOMPRESS_H_
#define _SLCOMPRESS_H_
d169 1
a169 1
#endif /* _SLCOMPRESS_H_ */
@


1.2
log
@OpenBSD tags + some prototyping police
@
text
@d1 2
a2 2
/*	$OpenBSD: slcompress.h,v 1.9 1995/07/04 06:28:29 paulus Exp $	*/
/*	$NetBSD: slcompress.h,v 1.9 1995/07/04 06:28:29 paulus Exp $	*/
d46 3
d161 9
a169 6
void	 sl_compress_init __P((struct slcompress *, int));
u_int	 sl_compress_tcp __P((struct mbuf *,
	    struct ip *, struct slcompress *, int));
int	 sl_uncompress_tcp __P((u_char **, int, u_int, struct slcompress *));
int	 sl_uncompress_tcp_core __P((u_char *, int, int, u_int,
	    struct slcompress *, u_char **, u_int *));
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
