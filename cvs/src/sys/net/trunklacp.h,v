head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.10
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.8
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.6
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.9.0.4
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.11
date	2015.10.05.13.00.04;	author mikeb;	state Exp;
branches;
next	1.10;
commitid	49G7IYOLbXQgQ7Cs;

1.10
date	2015.09.23.12.43.52;	author mikeb;	state Exp;
branches;
next	1.9;
commitid	kCCwyMU8Ri5h383d;

1.9
date	2015.05.11.08.41.43;	author mpi;	state Exp;
branches;
next	1.8;
commitid	clvzRlWWi271kseu;

1.8
date	2014.12.04.00.01.53;	author tedu;	state Exp;
branches;
next	1.7;
commitid	wP6d1LFSgXabDbTH;

1.7
date	2013.10.24.18.50.16;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2013.10.24.11.14.35;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2009.09.09.15.01.18;	author reyk;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.08.01.00.01;	author mpf;	state Exp;
branches;
next	1.3;

1.3
date	2008.10.12.19.03.12;	author mpf;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.15.19.00.57;	author mpf;	state Exp;
branches;
next	1.1;

1.1
date	2008.06.15.06.56.09;	author mpf;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Factor LACP frame processing out to a separate task

This is slightly refactored version of the diff by jmatthew@@
that makes use of a single per-trunk task but retains per-port
mbuf queues.

Running LACP frame processing in a task context allows a simple
way to synchronize changes to the trunk ports and trunk itself
performed from the ioctl, timeout and task contexts with a kernel
lock.

OK mpi
@
text
@/*	$OpenBSD: trunklacp.h,v 1.10 2015/09/23 12:43:52 mikeb Exp $	*/
/*	$NetBSD: ieee8023ad_impl.h,v 1.2 2005/12/10 23:21:39 elad Exp $	*/

/*
 * Copyright (c)2005 YAMAMOTO Takashi,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $FreeBSD: src/sys/net/ieee8023ad_lacp.h,v 1.11 2008/03/17 01:26:44 thompsa Exp $
 */

#ifndef _NET_TRUNKLACP_H_
#define _NET_TRUNKLACP_H_

/*
 * IEEE802.3 slow protocols (on-wire) definitions.
 * XXX should be elsewhere.
 */
#define	SLOWPROTOCOLS_SUBTYPE_LACP	1
#define	SLOWPROTOCOLS_SUBTYPE_MARKER	2

struct slowprothdr {
	u_int8_t		sph_subtype;
	u_int8_t		sph_version;
} __packed;

/* TLV on-wire structure. */
struct tlvhdr {
	u_int8_t		tlv_type;
	u_int8_t		tlv_length;
	/* u_int8_t tlv_value[]; */
} __packed;

/* ... and our implementation. */
#define	TLV_SET(tlv, type, length) \
	do { \
		(tlv)->tlv_type = (type); \
		(tlv)->tlv_length = sizeof(*tlv) + (length); \
	} while (/*CONSTCOND*/0)

struct tlv_template {
	u_int8_t			tmpl_type;
	u_int8_t			tmpl_length;
};

struct lacp_systemid {
	u_int16_t		lsi_prio;
	u_int8_t		lsi_mac[6];
} __packed;

struct lacp_portid {
	u_int16_t		lpi_prio;
	u_int16_t		lpi_portno;
} __packed;

struct lacp_peerinfo {
	struct lacp_systemid	lip_systemid;
	u_int16_t		lip_key;
	struct lacp_portid	lip_portid;
	u_int8_t		lip_state;
	u_int8_t		lip_resv[3];
} __packed;

struct lacp_collectorinfo {
	u_int16_t		lci_maxdelay;
	u_int8_t		lci_resv[12];
} __packed;

struct lacpdu {
	struct ether_header	ldu_eh;
	struct slowprothdr	ldu_sph;

	struct tlvhdr		ldu_tlv_actor;
	struct lacp_peerinfo	ldu_actor;
	struct tlvhdr		ldu_tlv_partner;
	struct lacp_peerinfo	ldu_partner;
	struct tlvhdr		ldu_tlv_collector;
	struct lacp_collectorinfo ldu_collector;
	struct tlvhdr		ldu_tlv_term;
	u_int8_t		ldu_resv[50];
} __packed;

/*
 * IEEE802.3ad marker protocol (on-wire) definitions.
 */
struct lacp_markerinfo {
	u_int16_t		mi_rq_port;
	u_int8_t		mi_rq_system[ETHER_ADDR_LEN];
	u_int32_t		mi_rq_xid;
	u_int8_t		mi_pad[2];
} __packed;

#ifdef _KERNEL

/*
 * IEEE802.3ad LACP implementation details.
 */
#define	LACP_TIMER_CURRENT_WHILE	0
#define	LACP_TIMER_PERIODIC		1
#define	LACP_TIMER_WAIT_WHILE		2
#define	LACP_NTIMER			3

#define	LACP_TIMER_ARM(port, timer, val) \
	(port)->lp_timer[(timer)] = (val)
#define	LACP_TIMER_DISARM(port, timer) \
	(port)->lp_timer[(timer)] = 0
#define	LACP_TIMER_ISARMED(port, timer) \
	((port)->lp_timer[(timer)] > 0)

/*
 * IEEE802.3ad LACP protocol definitions.
 */
#define	LACP_STATE_ACTIVITY	(1<<0)
#define	LACP_STATE_TIMEOUT	(1<<1)
#define	LACP_STATE_AGGREGATION	(1<<2)
#define	LACP_STATE_SYNC		(1<<3)
#define	LACP_STATE_COLLECTING	(1<<4)
#define	LACP_STATE_DISTRIBUTING	(1<<5)
#define	LACP_STATE_DEFAULTED	(1<<6)
#define	LACP_STATE_EXPIRED	(1<<7)

#define	LACP_PORT_NTT		0x00000001
#define	LACP_PORT_MARK		0x00000002

#define	LACP_STATE_BITS		\
	"\020"			\
	"\001ACTIVITY"		\
	"\002TIMEOUT"		\
	"\003AGGREGATION"	\
	"\004SYNC"		\
	"\005COLLECTING"	\
	"\006DISTRIBUTING"	\
	"\007DEFAULTED"		\
	"\010EXPIRED"

struct markerdu {
	struct ether_header	mdu_eh;
	struct slowprothdr	mdu_sph;

	struct tlvhdr		mdu_tlv;
	struct lacp_markerinfo	mdu_info;
	struct tlvhdr		mdu_tlv_term;
	u_int8_t		mdu_resv[90];
} __packed;

#define	MARKER_TYPE_INFO	0x01
#define	MARKER_TYPE_RESPONSE	0x02

enum lacp_selected {
	LACP_UNSELECTED,
	LACP_STANDBY,	/* not used in this implementation */
	LACP_SELECTED,
};

enum lacp_mux_state {
	LACP_MUX_DETACHED,
	LACP_MUX_WAITING,
	LACP_MUX_ATTACHED,
	LACP_MUX_COLLECTING,
	LACP_MUX_DISTRIBUTING,
};

#define	LACP_MAX_PORTS		32

struct lacp_portmap {
	int			pm_count;
	struct lacp_port	*pm_map[LACP_MAX_PORTS];
};

struct lacp_port {
	TAILQ_ENTRY(lacp_port)	lp_dist_q;
	LIST_ENTRY(lacp_port)	lp_next;
	struct lacp_softc	*lp_lsc;
	struct trunk_port	*lp_trunk;
	struct ifnet		*lp_ifp;
	struct lacp_peerinfo	lp_partner;
	struct lacp_peerinfo	lp_actor;
	struct lacp_markerinfo	lp_marker;
#define	lp_state	lp_actor.lip_state
#define	lp_key		lp_actor.lip_key
#define	lp_systemid	lp_actor.lip_systemid
	struct timeval		lp_last_lacpdu;
	int			lp_lacpdu_sent;
	enum lacp_mux_state	lp_mux_state;
	enum lacp_selected	lp_selected;
	int			lp_flags;
	u_int			lp_media; /* XXX redundant */
	int			lp_timer[LACP_NTIMER];
	struct ifmultiaddr	*lp_ifma;
	struct mbuf_queue	lp_mq;

	struct lacp_aggregator	*lp_aggregator;
};

struct lacp_aggregator {
	TAILQ_ENTRY(lacp_aggregator)	la_q;
	int			la_refcnt; /* num of ports which selected us */
	int			la_nports; /* num of distributing ports  */
	TAILQ_HEAD(, lacp_port)	la_ports; /* distributing ports */
	struct lacp_peerinfo	la_partner;
	struct lacp_peerinfo	la_actor;
	int			la_pending; /* number of ports in wait_while */
};

struct lacp_softc {
	struct trunk_softc	*lsc_softc;
	struct lacp_aggregator	*lsc_active_aggregator;
	TAILQ_HEAD(, lacp_aggregator) lsc_aggregators;
	int		lsc_suppress_distributing;
	struct timeout		lsc_transit_callout;
	struct timeout		lsc_callout;
	LIST_HEAD(, lacp_port)	lsc_ports;
	struct lacp_portmap	lsc_pmap[2];
	volatile u_int		lsc_activemap;
	SIPHASH_KEY		lsc_hashkey;
	struct task		lsc_input;
};

#define	LACP_TYPE_ACTORINFO	1
#define	LACP_TYPE_PARTNERINFO	2
#define	LACP_TYPE_COLLECTORINFO	3

/* timeout values (in sec) */
#define	LACP_FAST_PERIODIC_TIME		(1)
#define	LACP_SLOW_PERIODIC_TIME		(30)
#define	LACP_SHORT_TIMEOUT_TIME		(3 * LACP_FAST_PERIODIC_TIME)
#define	LACP_LONG_TIMEOUT_TIME		(3 * LACP_SLOW_PERIODIC_TIME)
#define	LACP_CHURN_DETECTION_TIME	(60)
#define	LACP_AGGREGATE_WAIT_TIME	(2)
#define	LACP_TRANSIT_DELAY		3000	/* in msec */

#define	LACP_STATE_EQ(s1, s2, mask)	\
	((((s1) ^ (s2)) & (mask)) == 0)

#define	LACP_SYS_PRI(peer)	(peer).lip_systemid.lsi_prio

#define	LACP_PORT(_lp)	((struct lacp_port *)(_lp)->tp_psc)
#define	LACP_SOFTC(_sc)	((struct lacp_softc *)(_sc)->tr_psc)

int		lacp_input(struct trunk_port *, struct mbuf *);
struct trunk_port *lacp_select_tx_port(struct trunk_softc *, struct mbuf *);
int		lacp_attach(struct trunk_softc *);
int		lacp_detach(struct trunk_softc *);
void		lacp_init(struct trunk_softc *);
void		lacp_stop(struct trunk_softc *);
int		lacp_port_create(struct trunk_port *);
void		lacp_port_destroy(struct trunk_port *);
void		lacp_linkstate(struct trunk_port *);
void		lacp_req(struct trunk_softc *, caddr_t);
void		lacp_portreq(struct trunk_port *, caddr_t);
u_int		lacp_port_status(struct trunk_port *);

/* following constants don't include terminating NUL */
#define	LACP_MACSTR_MAX		(2*6 + 5)
#define	LACP_SYSTEMPRIOSTR_MAX	(4)
#define	LACP_SYSTEMIDSTR_MAX	(LACP_SYSTEMPRIOSTR_MAX + 1 + LACP_MACSTR_MAX)
#define	LACP_PORTPRIOSTR_MAX	(4)
#define	LACP_PORTNOSTR_MAX	(4)
#define	LACP_PORTIDSTR_MAX	(LACP_PORTPRIOSTR_MAX + 1 + LACP_PORTNOSTR_MAX)
#define	LACP_KEYSTR_MAX		(4)
#define	LACP_PARTNERSTR_MAX	\
	(1 + LACP_SYSTEMIDSTR_MAX + 1 + LACP_KEYSTR_MAX + 1 \
	+ LACP_PORTIDSTR_MAX + 1)
#define	LACP_LAGIDSTR_MAX	\
	(1 + LACP_PARTNERSTR_MAX + 1 + LACP_PARTNERSTR_MAX + 1)
#define	LACP_STATESTR_MAX	(255) /* XXX */

#endif /* _KERNEL */

#endif /* _NET_TRUNKLACP_H_ */
@


1.10
log
@Removes locking macros that we've inherited from NetBSD/FreeBSD.

ok dlg, mpi
@
text
@d1 1
a1 1
/*	$OpenBSD: trunklacp.h,v 1.9 2015/05/11 08:41:43 mpi Exp $	*/
d210 1
d236 1
@


1.9
log
@Take trunk(4) out of ether_input().

Each physical interface of a trunk now gets a specific ifih (interface
input handler) that runs before ether_input().

Tested by sthen@@, dlg@@, Theo Buehler and <mxb AT alumni.chalmers DOT se>

ok sthen@@, dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: trunklacp.h,v 1.8 2014/12/04 00:01:53 tedu Exp $	*/
a256 7

#define LACP_LOCK_INIT(_lsc)		mtx_init(&(_lsc)->lsc_mtx, \
					    "lacp mtx", NULL, MTX_DEF)
#define LACP_LOCK_DESTROY(_lsc)		mtx_destroy(&(_lsc)->lsc_mtx)
#define LACP_LOCK(_lsc)			mtx_lock(&(_lsc)->lsc_mtx)
#define LACP_UNLOCK(_lsc)		mtx_unlock(&(_lsc)->lsc_mtx)
#define LACP_LOCK_ASSERT(_lsc)		mtx_assert(&(_lsc)->lsc_mtx, MA_OWNED)
@


1.8
log
@use siphash for trunk loadbalancing. ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: trunklacp.h,v 1.7 2013/10/24 18:50:16 deraadt Exp $	*/
d90 1
d157 1
d265 1
a265 2
struct mbuf	*lacp_input(struct trunk_port *,
		    struct ether_header *, struct mbuf *);
@


1.7
log
@Move more stuff under _KERNEL
ok claudio
@
text
@d1 1
a1 1
/*	$OpenBSD: trunklacp.h,v 1.6 2013/10/24 11:14:35 deraadt Exp $	*/
d232 1
a232 1
	u_int32_t		lsc_hashkey;
@


1.6
log
@Move obvious kernel prototypes (and structure's with kernel pointers,
obviously only used in the kernel) behind #ifdef _KERNEL
@
text
@d1 1
a1 1
/*	$OpenBSD: trunklacp.h,v 1.5 2009/09/09 15:01:18 reyk Exp $	*/
d32 2
a33 40
/*
 * IEEE802.3ad LACP implementation details.
 */
#define	LACP_TIMER_CURRENT_WHILE	0
#define	LACP_TIMER_PERIODIC		1
#define	LACP_TIMER_WAIT_WHILE		2
#define	LACP_NTIMER			3

#define	LACP_TIMER_ARM(port, timer, val) \
	(port)->lp_timer[(timer)] = (val)
#define	LACP_TIMER_DISARM(port, timer) \
	(port)->lp_timer[(timer)] = 0
#define	LACP_TIMER_ISARMED(port, timer) \
	((port)->lp_timer[(timer)] > 0)

/*
 * IEEE802.3ad LACP protocol definitions.
 */
#define	LACP_STATE_ACTIVITY	(1<<0)
#define	LACP_STATE_TIMEOUT	(1<<1)
#define	LACP_STATE_AGGREGATION	(1<<2)
#define	LACP_STATE_SYNC		(1<<3)
#define	LACP_STATE_COLLECTING	(1<<4)
#define	LACP_STATE_DISTRIBUTING	(1<<5)
#define	LACP_STATE_DEFAULTED	(1<<6)
#define	LACP_STATE_EXPIRED	(1<<7)

#define	LACP_PORT_NTT		0x00000001
#define	LACP_PORT_MARK		0x00000002

#define	LACP_STATE_BITS		\
	"\020"			\
	"\001ACTIVITY"		\
	"\002TIMEOUT"		\
	"\003AGGREGATION"	\
	"\004SYNC"		\
	"\005COLLECTING"	\
	"\006DISTRIBUTING"	\
	"\007DEFAULTED"		\
	"\010EXPIRED"
d112 43
a262 1
#ifdef _KERNEL
a275 1
#endif /* _KERNEL */
d291 4
@


1.5
log
@remove inline functions and move some code from the trunk_lacp_input()
API function directly to lacp_input() to simplify the code path.

ok mpf@@
@
text
@d1 1
a1 1
/*	$OpenBSD: trunklacp.h,v 1.4 2008/11/08 01:00:01 mpf Exp $	*/
d258 1
d272 1
@


1.4
log
@Take into account that our ether_input() already strips the
ethernet header. This lets us actually process the incoming
LACP-Packets.  It should now work with a lot more switches.
At least a Catalyst 3500 seems happy.
OK brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: trunklacp.h,v 1.3 2008/10/12 19:03:12 mpf Exp $	*/
d270 1
a270 4

int		lacp_isactive(struct trunk_port *);
int		lacp_iscollecting(struct trunk_port *);
int		lacp_isdistributing(struct trunk_port *);
@


1.3
log
@Some more cleanup. No binary change.
OK reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD: trunklacp.h,v 1.2 2008/06/15 19:00:57 mpf Exp $	*/
a127 1
	struct ether_header	ldu_eh;
a150 1
	struct ether_header	mdu_eh;
d258 2
a259 1
struct mbuf	*lacp_input(struct trunk_port *, struct mbuf *);
@


1.2
log
@A bit of cleanup:
- we prefer u_int*_t over uint_*t.
- static is bad for debugging.
- header files should not contain functions.
@
text
@d1 1
a1 1
/*	$OpenBSD: trunklacp.h,v 1.1 2008/06/15 06:56:09 mpf Exp $	*/
d33 1
a33 3
 * IEEE802.3ad LACP
 *
 * implementation details.
a34 1

d48 1
a48 3
 * IEEE802.3ad LACP
 *
 * protocol definitions.
a49 1

d74 1
a74 4
 * IEEE802.3 slow protocols
 *
 * protocol (on-wire) definitions.
 *
a76 1

d85 1
a85 4
/*
 * TLV on-wire structure.
 */

d92 1
a92 4
/*
 * ... and our implementation.
 */

d142 1
a142 3
 * IEEE802.3ad marker protocol
 *
 * protocol (on-wire) definitions.
d146 1
a146 1
	u_int8_t			mi_rq_system[ETHER_ADDR_LEN];
@


1.1
log
@Add 802.3ad LACP support for trunk(4).
Implementation from NetBSD. Ported via FreeBSD's version in trunk^Wlagg(4).
This is still work in progress.  Tested with a HP ProCurve 3500.
OK reyk@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d91 2
a92 2
	uint8_t		sph_subtype;
	uint8_t		sph_version;
d100 3
a102 3
	uint8_t		tlv_type;
	uint8_t		tlv_length;
	/* uint8_t tlv_value[]; */
d116 2
a117 2
	uint8_t			tmpl_type;
	uint8_t			tmpl_length;
d121 2
a122 2
	uint16_t		lsi_prio;
	uint8_t			lsi_mac[6];
d126 2
a127 2
	uint16_t		lpi_prio;
	uint16_t		lpi_portno;
d132 1
a132 1
	uint16_t		lip_key;
d134 2
a135 2
	uint8_t			lip_state;
	uint8_t			lip_resv[3];
d139 2
a140 2
	uint16_t		lci_maxdelay;
	uint8_t			lci_resv[12];
d154 1
a154 1
	uint8_t			ldu_resv[50];
d163 4
a166 4
	uint16_t		mi_rq_port;
	uint8_t			mi_rq_system[ETHER_ADDR_LEN];
	uint32_t		mi_rq_xid;
	uint8_t			mi_pad[2];
d176 1
a176 1
	uint8_t			mdu_resv[90];
d290 3
a292 29
static __inline int
lacp_isactive(struct trunk_port *lgp)
{
	struct lacp_port *lp = LACP_PORT(lgp);
	struct lacp_softc *lsc = lp->lp_lsc;
	struct lacp_aggregator *la = lp->lp_aggregator;

	/* This port is joined to the active aggregator */
	if (la != NULL && la == lsc->lsc_active_aggregator)
		return (1);

	return (0);
}

static __inline int
lacp_iscollecting(struct trunk_port *lgp)
{
	struct lacp_port *lp = LACP_PORT(lgp);

	return ((lp->lp_state & LACP_STATE_COLLECTING) != 0);
}

static __inline int
lacp_isdistributing(struct trunk_port *lgp)
{
	struct lacp_port *lp = LACP_PORT(lgp);

	return ((lp->lp_state & LACP_STATE_DISTRIBUTING) != 0);
}
@

