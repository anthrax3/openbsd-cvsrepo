head	1.10;
access;
symbols
	OPENBSD_4_0:1.9.0.14
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.12
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.6.0.6
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.8
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2006.09.24.01.22.51;	author pedro;	state dead;
branches;
next	1.9;

1.9
date	2003.06.02.23.28.23;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.03.16.13;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.14.01.27.15;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.20.01.50.12;	author assar;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	2000.02.07.04.57.18;	author assar;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	98.02.08.22.41.51;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.07.01.07.41.51;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.02.27.07.13.24;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.33;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.33;	author deraadt;	state Exp;
branches;
next	;

1.5.2.1
date	2001.05.14.22.47.42;	author niklas;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2002.03.28.14.54.26;	author niklas;	state Exp;
branches;
next	1.5.2.3;

1.5.2.3
date	2003.06.07.11.09.09;	author ho;	state Exp;
branches;
next	;

1.6.6.1
date	2002.06.11.03.32.50;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Zap LFS, okay deraadt@@
@
text
@/*	$OpenBSD: lfs_extern.h,v 1.9 2003/06/02 23:28:23 millert Exp $	*/
/*	$NetBSD: lfs_extern.h,v 1.5 1996/02/12 15:20:12 christos Exp $	*/

/*-
 * Copyright (c) 1991, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)lfs_extern.h	8.6 (Berkeley) 5/8/95
 */

struct fid;
struct mount;
struct nameidata;
struct proc;
struct statfs;
struct timeval;
struct inode;
struct uio;
struct mbuf;
struct dinode;
struct buf;
struct vnode;
struct lfs;
struct segment;
struct ucred;

#include <ufs/ufs/dinode.h>

__BEGIN_DECLS
/* lfs_alloc.c */
int lfs_vcreate(struct mount *, ino_t, struct vnode **);


/* lfs_balloc.c */
int lfs_balloc(struct vnode *, int, u_long, ufs_daddr_t, struct buf **);

/* lfs_bio.c */
void lfs_flush(void);
int lfs_check(struct vnode *, ufs_daddr_t);

/* lfs_cksum.c */
u_long cksum(void *, size_t);

/* lfs_debug.c */
#ifdef DEBUG
void lfs_dump_super(struct lfs *);
void lfs_dump_dinode(struct dinode *);
#endif

/* lfs_inode.c */
void lfs_init(void);
struct dinode *lfs_ifind(struct lfs *, ino_t, struct dinode *);

/* lfs_segment.c */
int lfs_vflush(struct vnode *);
void lfs_writevnodes(struct lfs *, struct mount *, struct segment *, int);
int lfs_segwrite(struct mount *, int);
void lfs_writefile(struct lfs *, struct segment *, struct vnode *);
int lfs_writeinode(struct lfs *, struct segment *, struct inode *);
int lfs_gatherblock(struct segment *, struct buf *, int *);
void lfs_gather(struct lfs *, struct segment *, struct vnode *, int (*match )(struct lfs *, struct buf *));
void lfs_updatemeta(struct segment *);
int lfs_initseg(struct lfs *);
void lfs_newseg(struct lfs *);
int lfs_writeseg(struct lfs *, struct segment *);
void lfs_writesuper(struct lfs *);
int lfs_match_data(struct lfs *, struct buf *);
int lfs_match_indir(struct lfs *, struct buf *);
int lfs_match_dindir(struct lfs *, struct buf *);
int lfs_match_tindir(struct lfs *, struct buf *);
struct buf *lfs_newbuf(struct vnode *, ufs_daddr_t, size_t);
void lfs_callback(struct buf *);
void lfs_supercallback(struct buf *);
void lfs_shellsort(struct buf **, ufs_daddr_t *, int);
int lfs_vref(struct vnode *);
void lfs_vunref(struct vnode *);

/* lfs_subr.c */
void lfs_seglock(struct lfs *, unsigned long);
void lfs_segunlock(struct lfs *);

/* lfs_syscalls.c */
int lfs_fastvget(struct mount *, ino_t, ufs_daddr_t, struct vnode **, struct dinode *);
struct buf *lfs_fakebuf(struct vnode *, int, size_t, caddr_t);

/* lfs_vfsops.c */
int lfs_mountroot(void);
int lfs_mount(struct mount *, const char *, void *, struct nameidata *, struct proc *);
int lfs_mountfs(struct vnode *, struct mount *, struct proc *);
int lfs_unmount(struct mount *, int, struct proc *);
int lfs_statfs(struct mount *, struct statfs *, struct proc *);
int lfs_sync(struct mount *, int, struct ucred *, struct proc *);
int lfs_vget(struct mount *, ino_t, struct vnode **);
int lfs_fhtovp(struct mount *, struct fid *, struct vnode **);
int lfs_vptofh(struct vnode *, struct fid *);
int lfs_sysctl(int *, u_int, void *, size_t *, void *, size_t,
		    struct proc *);

int lfs_valloc(void *);
int lfs_vfree(void *);
int lfs_bwrite(void *);
int lfs_update(void *);
int lfs_truncate(void *);
int lfs_blkatoff(void *);
int lfs_fsync(void *);
int lfs_symlink(void *);
int lfs_mknod(void *);
int lfs_create(void *);
int lfs_mkdir(void *);
int lfs_read(void *);
int lfs_remove(void *);
int lfs_rmdir(void *);
int lfs_link(void *);
int lfs_rename(void *);
int lfs_getattr(void *);
int lfs_close(void *);
int lfs_inactive(void *);
int lfs_reclaim(void *);
int lfs_write(void *);

__END_DECLS
extern int (**lfs_vnodeop_p)(void *);
extern int (**lfs_specop_p)(void *);
#ifdef FIFO
extern int (**lfs_fifoop_p)(void *);
#define LFS_FIFOOPS lfs_fifoop_p
#else
#define LFS_FIFOOPS NULL
#endif
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_extern.h,v 1.8 2002/03/14 03:16:13 millert Exp $	*/
@


1.8
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_extern.h,v 1.7 2002/03/14 01:27:15 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_extern.h,v 1.6 2001/02/20 01:50:12 assar Exp $	*/
d89 1
a89 1
void lfs_gather __P((struct lfs *, struct segment *, struct vnode *, int (*match )(struct lfs *, struct buf *)));
@


1.6
log
@use void * consistently in vfs_mount and sys_mount.  ok @@art
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_extern.h,v 1.5 2000/02/07 04:57:18 assar Exp $	*/
d59 1
a59 1
int lfs_vcreate __P((struct mount *, ino_t, struct vnode **));
d63 1
a63 1
int lfs_balloc __P((struct vnode *, int, u_long, ufs_daddr_t, struct buf **));
d66 2
a67 2
void lfs_flush __P((void));
int lfs_check __P((struct vnode *, ufs_daddr_t));
d70 1
a70 1
u_long cksum __P((void *, size_t));
d74 2
a75 2
void lfs_dump_super __P((struct lfs *));
void lfs_dump_dinode __P((struct dinode *));
d79 2
a80 2
void lfs_init __P((void));
struct dinode *lfs_ifind __P((struct lfs *, ino_t, struct dinode *));
d83 22
a104 22
int lfs_vflush __P((struct vnode *));
void lfs_writevnodes __P((struct lfs *, struct mount *, struct segment *, int));
int lfs_segwrite __P((struct mount *, int));
void lfs_writefile __P((struct lfs *, struct segment *, struct vnode *));
int lfs_writeinode __P((struct lfs *, struct segment *, struct inode *));
int lfs_gatherblock __P((struct segment *, struct buf *, int *));
void lfs_gather __P((struct lfs *, struct segment *, struct vnode *, int (*match )__P ((struct lfs *, struct buf *))));
void lfs_updatemeta __P((struct segment *));
int lfs_initseg __P((struct lfs *));
void lfs_newseg __P((struct lfs *));
int lfs_writeseg __P((struct lfs *, struct segment *));
void lfs_writesuper __P((struct lfs *));
int lfs_match_data __P((struct lfs *, struct buf *));
int lfs_match_indir __P((struct lfs *, struct buf *));
int lfs_match_dindir __P((struct lfs *, struct buf *));
int lfs_match_tindir __P((struct lfs *, struct buf *));
struct buf *lfs_newbuf __P((struct vnode *, ufs_daddr_t, size_t));
void lfs_callback __P((struct buf *));
void lfs_supercallback __P((struct buf *));
void lfs_shellsort __P((struct buf **, ufs_daddr_t *, int));
int lfs_vref __P((struct vnode *));
void lfs_vunref __P((struct vnode *));
d107 2
a108 2
void lfs_seglock __P((struct lfs *, unsigned long));
void lfs_segunlock __P((struct lfs *));
d111 2
a112 2
int lfs_fastvget __P((struct mount *, ino_t, ufs_daddr_t, struct vnode **, struct dinode *));
struct buf *lfs_fakebuf __P((struct vnode *, int, size_t, caddr_t));
d115 33
a147 33
int lfs_mountroot __P((void));
int lfs_mount __P((struct mount *, const char *, void *, struct nameidata *, struct proc *));
int lfs_mountfs __P((struct vnode *, struct mount *, struct proc *));
int lfs_unmount __P((struct mount *, int, struct proc *));
int lfs_statfs __P((struct mount *, struct statfs *, struct proc *));
int lfs_sync __P((struct mount *, int, struct ucred *, struct proc *));
int lfs_vget __P((struct mount *, ino_t, struct vnode **));
int lfs_fhtovp __P((struct mount *, struct fid *, struct vnode **));
int lfs_vptofh __P((struct vnode *, struct fid *));
int lfs_sysctl __P((int *, u_int, void *, size_t *, void *, size_t,
		    struct proc *));

int lfs_valloc		__P((void *));
int lfs_vfree		__P((void *));
int lfs_bwrite		__P((void *));
int lfs_update		__P((void *));
int lfs_truncate	__P((void *));
int lfs_blkatoff	__P((void *));
int lfs_fsync		__P((void *));
int lfs_symlink		__P((void *));
int lfs_mknod		__P((void *));
int lfs_create		__P((void *));
int lfs_mkdir		__P((void *));
int lfs_read		__P((void *));
int lfs_remove		__P((void *));
int lfs_rmdir		__P((void *));
int lfs_link		__P((void *));
int lfs_rename		__P((void *));
int lfs_getattr		__P((void *));
int lfs_close		__P((void *));
int lfs_inactive	__P((void *));
int lfs_reclaim		__P((void *));
int lfs_write		__P((void *));
d150 2
a151 2
extern int (**lfs_vnodeop_p) __P((void *));
extern int (**lfs_specop_p) __P((void *));
d153 1
a153 1
extern int (**lfs_fifoop_p) __P((void *));
@


1.6.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_extern.h,v 1.6 2001/02/20 01:50:12 assar Exp $	*/
d59 1
a59 1
int lfs_vcreate(struct mount *, ino_t, struct vnode **);
d63 1
a63 1
int lfs_balloc(struct vnode *, int, u_long, ufs_daddr_t, struct buf **);
d66 2
a67 2
void lfs_flush(void);
int lfs_check(struct vnode *, ufs_daddr_t);
d70 1
a70 1
u_long cksum(void *, size_t);
d74 2
a75 2
void lfs_dump_super(struct lfs *);
void lfs_dump_dinode(struct dinode *);
d79 2
a80 2
void lfs_init(void);
struct dinode *lfs_ifind(struct lfs *, ino_t, struct dinode *);
d83 22
a104 22
int lfs_vflush(struct vnode *);
void lfs_writevnodes(struct lfs *, struct mount *, struct segment *, int);
int lfs_segwrite(struct mount *, int);
void lfs_writefile(struct lfs *, struct segment *, struct vnode *);
int lfs_writeinode(struct lfs *, struct segment *, struct inode *);
int lfs_gatherblock(struct segment *, struct buf *, int *);
void lfs_gather(struct lfs *, struct segment *, struct vnode *, int (*match )(struct lfs *, struct buf *));
void lfs_updatemeta(struct segment *);
int lfs_initseg(struct lfs *);
void lfs_newseg(struct lfs *);
int lfs_writeseg(struct lfs *, struct segment *);
void lfs_writesuper(struct lfs *);
int lfs_match_data(struct lfs *, struct buf *);
int lfs_match_indir(struct lfs *, struct buf *);
int lfs_match_dindir(struct lfs *, struct buf *);
int lfs_match_tindir(struct lfs *, struct buf *);
struct buf *lfs_newbuf(struct vnode *, ufs_daddr_t, size_t);
void lfs_callback(struct buf *);
void lfs_supercallback(struct buf *);
void lfs_shellsort(struct buf **, ufs_daddr_t *, int);
int lfs_vref(struct vnode *);
void lfs_vunref(struct vnode *);
d107 2
a108 2
void lfs_seglock(struct lfs *, unsigned long);
void lfs_segunlock(struct lfs *);
d111 2
a112 2
int lfs_fastvget(struct mount *, ino_t, ufs_daddr_t, struct vnode **, struct dinode *);
struct buf *lfs_fakebuf(struct vnode *, int, size_t, caddr_t);
d115 33
a147 33
int lfs_mountroot(void);
int lfs_mount(struct mount *, const char *, void *, struct nameidata *, struct proc *);
int lfs_mountfs(struct vnode *, struct mount *, struct proc *);
int lfs_unmount(struct mount *, int, struct proc *);
int lfs_statfs(struct mount *, struct statfs *, struct proc *);
int lfs_sync(struct mount *, int, struct ucred *, struct proc *);
int lfs_vget(struct mount *, ino_t, struct vnode **);
int lfs_fhtovp(struct mount *, struct fid *, struct vnode **);
int lfs_vptofh(struct vnode *, struct fid *);
int lfs_sysctl(int *, u_int, void *, size_t *, void *, size_t,
		    struct proc *);

int lfs_valloc(void *);
int lfs_vfree(void *);
int lfs_bwrite(void *);
int lfs_update(void *);
int lfs_truncate(void *);
int lfs_blkatoff(void *);
int lfs_fsync(void *);
int lfs_symlink(void *);
int lfs_mknod(void *);
int lfs_create(void *);
int lfs_mkdir(void *);
int lfs_read(void *);
int lfs_remove(void *);
int lfs_rmdir(void *);
int lfs_link(void *);
int lfs_rename(void *);
int lfs_getattr(void *);
int lfs_close(void *);
int lfs_inactive(void *);
int lfs_reclaim(void *);
int lfs_write(void *);
d150 2
a151 2
extern int (**lfs_vnodeop_p)(void *);
extern int (**lfs_specop_p)(void *);
d153 1
a153 1
extern int (**lfs_fifoop_p)(void *);
@


1.5
log
@update to use new checkexp vfs operation
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_extern.h,v 1.4 1998/02/08 22:41:51 tholo Exp $	*/
d116 1
a116 1
int lfs_mount __P((struct mount *, const char *, caddr_t, struct nameidata *, struct proc *));
@


1.5.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_extern.h,v 1.6 2001/02/20 01:50:12 assar Exp $	*/
d116 1
a116 1
int lfs_mount __P((struct mount *, const char *, void *, struct nameidata *, struct proc *));
@


1.5.2.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d59 1
a59 1
int lfs_vcreate(struct mount *, ino_t, struct vnode **);
d63 1
a63 1
int lfs_balloc(struct vnode *, int, u_long, ufs_daddr_t, struct buf **);
d66 2
a67 2
void lfs_flush(void);
int lfs_check(struct vnode *, ufs_daddr_t);
d70 1
a70 1
u_long cksum(void *, size_t);
d74 2
a75 2
void lfs_dump_super(struct lfs *);
void lfs_dump_dinode(struct dinode *);
d79 2
a80 2
void lfs_init(void);
struct dinode *lfs_ifind(struct lfs *, ino_t, struct dinode *);
d83 22
a104 22
int lfs_vflush(struct vnode *);
void lfs_writevnodes(struct lfs *, struct mount *, struct segment *, int);
int lfs_segwrite(struct mount *, int);
void lfs_writefile(struct lfs *, struct segment *, struct vnode *);
int lfs_writeinode(struct lfs *, struct segment *, struct inode *);
int lfs_gatherblock(struct segment *, struct buf *, int *);
void lfs_gather(struct lfs *, struct segment *, struct vnode *, int (*match )(struct lfs *, struct buf *));
void lfs_updatemeta(struct segment *);
int lfs_initseg(struct lfs *);
void lfs_newseg(struct lfs *);
int lfs_writeseg(struct lfs *, struct segment *);
void lfs_writesuper(struct lfs *);
int lfs_match_data(struct lfs *, struct buf *);
int lfs_match_indir(struct lfs *, struct buf *);
int lfs_match_dindir(struct lfs *, struct buf *);
int lfs_match_tindir(struct lfs *, struct buf *);
struct buf *lfs_newbuf(struct vnode *, ufs_daddr_t, size_t);
void lfs_callback(struct buf *);
void lfs_supercallback(struct buf *);
void lfs_shellsort(struct buf **, ufs_daddr_t *, int);
int lfs_vref(struct vnode *);
void lfs_vunref(struct vnode *);
d107 2
a108 2
void lfs_seglock(struct lfs *, unsigned long);
void lfs_segunlock(struct lfs *);
d111 2
a112 2
int lfs_fastvget(struct mount *, ino_t, ufs_daddr_t, struct vnode **, struct dinode *);
struct buf *lfs_fakebuf(struct vnode *, int, size_t, caddr_t);
d115 33
a147 33
int lfs_mountroot(void);
int lfs_mount(struct mount *, const char *, void *, struct nameidata *, struct proc *);
int lfs_mountfs(struct vnode *, struct mount *, struct proc *);
int lfs_unmount(struct mount *, int, struct proc *);
int lfs_statfs(struct mount *, struct statfs *, struct proc *);
int lfs_sync(struct mount *, int, struct ucred *, struct proc *);
int lfs_vget(struct mount *, ino_t, struct vnode **);
int lfs_fhtovp(struct mount *, struct fid *, struct vnode **);
int lfs_vptofh(struct vnode *, struct fid *);
int lfs_sysctl(int *, u_int, void *, size_t *, void *, size_t,
		    struct proc *);

int lfs_valloc(void *);
int lfs_vfree(void *);
int lfs_bwrite(void *);
int lfs_update(void *);
int lfs_truncate(void *);
int lfs_blkatoff(void *);
int lfs_fsync(void *);
int lfs_symlink(void *);
int lfs_mknod(void *);
int lfs_create(void *);
int lfs_mkdir(void *);
int lfs_read(void *);
int lfs_remove(void *);
int lfs_rmdir(void *);
int lfs_link(void *);
int lfs_rename(void *);
int lfs_getattr(void *);
int lfs_close(void *);
int lfs_inactive(void *);
int lfs_reclaim(void *);
int lfs_write(void *);
d150 2
a151 2
extern int (**lfs_vnodeop_p)(void *);
extern int (**lfs_specop_p)(void *);
d153 1
a153 1
extern int (**lfs_fifoop_p)(void *);
@


1.5.2.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_extern.h,v 1.5.2.2 2002/03/28 14:54:26 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4
log
@Updates to match type changes in syscall tables
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_extern.h,v 1.3 1996/07/01 07:41:51 downsj Exp $	*/
d122 1
a122 1
int lfs_fhtovp __P((struct mount *, struct fid *, struct mbuf *, struct vnode **, int *, struct ucred **));
d124 2
a125 1

@


1.3
log
@New LFS, based on Lite2.  Still being worked on.
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_extern.h,v 1.2 1996/02/27 07:13:24 niklas Exp $	*/
d116 1
a116 1
int lfs_mount __P((struct mount *, char *, caddr_t, struct nameidata *, struct proc *));
@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 1
 *	@@(#)lfs_extern.h	8.3 (Berkeley) 6/16/94
d55 2
d63 1
a63 1
int lfs_balloc __P((struct vnode *, u_long, daddr_t, struct buf **));
d67 1
a67 1
int lfs_check __P((struct vnode *, daddr_t));
d99 1
a99 1
struct buf *lfs_newbuf __P((struct vnode *, daddr_t, size_t));
d102 1
a102 1
void lfs_shellsort __P((struct buf **, daddr_t *, int));
d111 1
a111 1
int lfs_fastvget __P((struct mount *, ino_t, daddr_t, struct vnode **, struct dinode *));
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: lfs_extern.h,v 1.3 1994/12/14 13:03:47 mycroft Exp $	*/
d48 6
d56 15
a70 48
u_long	 cksum __P((void *, size_t));				/* XXX */
int	 lfs_balloc __P((struct vnode *, u_long, daddr_t, struct buf **));
int	 lfs_blkatoff __P((struct vop_blkatoff_args *));
int	 lfs_bwrite __P((struct vop_bwrite_args *));
int	 lfs_check __P((struct vnode *, daddr_t));
int	 lfs_close __P((struct vop_close_args *));
int	 lfs_create __P((struct vop_create_args *));
int	 lfs_fhtovp __P((struct mount *, struct fid *, struct mbuf *,
	    struct vnode **, int *, struct ucred **));
int	 lfs_fsync __P((struct vop_fsync_args *));
int	 lfs_getattr __P((struct vop_getattr_args *));
struct dinode *
	 lfs_ifind __P((struct lfs *, ino_t, struct dinode *));
int	 lfs_inactive __P((struct vop_inactive_args *));
int	 lfs_init __P((void));
int	 lfs_initseg __P((struct lfs *));
int	 lfs_link __P((struct vop_link_args *));
int	 lfs_makeinode __P((int, struct nameidata *, struct inode **));
int	 lfs_mkdir __P((struct vop_mkdir_args *));
int	 lfs_mknod __P((struct vop_mknod_args *));
int	 lfs_mount __P((struct mount *,
	    char *, caddr_t, struct nameidata *, struct proc *));
int	 lfs_mountroot __P((void));
struct buf *
	 lfs_newbuf __P((struct vnode *, daddr_t, size_t));
int	 lfs_read __P((struct vop_read_args *));
int	 lfs_reclaim __P((struct vop_reclaim_args *));
int	 lfs_remove __P((struct vop_remove_args *));
int	 lfs_rmdir __P((struct vop_rmdir_args *));
int	 lfs_rename __P((struct vop_rename_args *));
void	 lfs_seglock __P((struct lfs *, unsigned long flags));
void	 lfs_segunlock __P((struct lfs *));
int	 lfs_segwrite __P((struct mount *, int));
int	 lfs_statfs __P((struct mount *, struct statfs *, struct proc *));
int	 lfs_symlink __P((struct vop_symlink_args *));
int	 lfs_sync __P((struct mount *, int, struct ucred *, struct proc *));
int	 lfs_truncate __P((struct vop_truncate_args *));
int	 lfs_unmount __P((struct mount *, int, struct proc *));
int	 lfs_update __P((struct vop_update_args *));
int	 lfs_valloc __P((struct vop_valloc_args *));
int	 lfs_vcreate __P((struct mount *, ino_t, struct vnode **));
int	 lfs_vfree __P((struct vop_vfree_args *));
int	 lfs_vflush __P((struct vnode *));
int	 lfs_vget __P((struct mount *, ino_t, struct vnode **));
int	 lfs_vptofh __P((struct vnode *, struct fid *));
int	 lfs_vref __P((struct vnode *));
void	 lfs_vunref __P((struct vnode *));
int	 lfs_write __P((struct vop_write_args *));
d72 2
a73 2
void	lfs_dump_dinode __P((struct dinode *));
void	lfs_dump_super __P((struct lfs *));
d75 71
d147 2
a148 2
extern int (**lfs_vnodeop_p)();
extern int (**lfs_specop_p)();
d150 1
a150 1
extern int (**lfs_fifoop_p)();
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
