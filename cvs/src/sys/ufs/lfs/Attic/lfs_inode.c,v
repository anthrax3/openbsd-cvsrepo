head	1.13;
access;
symbols
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.6
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.8
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.6
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.4
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.8.0.2
	UBC_BASE:1.8
	OPENBSD_3_0:1.7.0.14
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.12
	OPENBSD_2_8:1.7.0.10
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.8
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.6
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2006.09.24.01.22.51;	author pedro;	state dead;
branches;
next	1.12;

1.12
date	2006.03.05.21.48.57;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.28.20.48.18;	author pedro;	state Exp;
branches;
next	1.10;

1.10
date	2004.06.24.19.35.27;	author tholo;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.23.28.23;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.06.19.53.21;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	99.01.11.05.12.38;	author millert;	state Exp;
branches
	1.7.6.1;
next	1.6;

1.6
date	97.05.30.08.34.39;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	97.03.02.09.38.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	96.07.01.07.41.51;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.05.22.11.47.19;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.02.27.07.13.25;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.33;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.33;	author deraadt;	state Exp;
branches;
next	;

1.7.6.1
date	2001.11.13.23.02.31;	author niklas;	state Exp;
branches;
next	1.7.6.2;

1.7.6.2
date	2003.06.07.11.09.09;	author ho;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Zap LFS, okay deraadt@@
@
text
@/*	$OpenBSD: lfs_inode.c,v 1.12 2006/03/05 21:48:57 miod Exp $	*/
/*	$NetBSD: lfs_inode.c,v 1.5 1996/05/11 18:27:35 mycroft Exp $	*/

/*
 * Copyright (c) 1986, 1989, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)lfs_inode.c	8.9 (Berkeley) 5/8/95
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mount.h>
#include <sys/proc.h>
#include <sys/file.h>
#include <sys/buf.h>
#include <sys/vnode.h>
#include <sys/kernel.h>
#include <sys/malloc.h>

#include <uvm/uvm_extern.h>

#include <ufs/ufs/quota.h>
#include <ufs/ufs/inode.h>
#include <ufs/ufs/ufsmount.h>
#include <ufs/ufs/ufs_extern.h>

#include <ufs/lfs/lfs.h>
#include <ufs/lfs/lfs_extern.h>

/* Search a block for a specific dinode. */
struct dinode *
lfs_ifind(fs, ino, dip)
	struct lfs *fs;
	ino_t ino;
	register struct dinode *dip;
{
	register int cnt;
	register struct dinode *ldip;

	for (cnt = INOPB(fs), ldip = dip + (cnt - 1); cnt--; --ldip)
		if (ldip->di_inumber == ino)
			return (ldip);

	panic("lfs_ifind: dinode %u not found", ino);
	/* NOTREACHED */
}

int
lfs_update(v)
	void *v;
{
	struct vop_update_args /* {
		struct vnode *a_vp;
		struct timespec *a_access;
		struct timespec *a_modify;
		int a_waitfor;
	} */ *ap = v;
	struct vnode *vp = ap->a_vp;
	struct inode *ip;

	if (vp->v_mount->mnt_flag & MNT_RDONLY)
		return (0);
	ip = VTOI(vp);
	if ((ap->a_vp->v_mount->mnt_flag & MNT_NOATIME) &&
	    !(ip->i_flag & (IN_CHANGE | IN_UPDATE)))
		ip->i_flag &= ~IN_ACCESS;
	if ((ip->i_flag &
	    (IN_ACCESS | IN_CHANGE | IN_MODIFIED | IN_UPDATE)) == 0)
		return (0);
	if (ip->i_flag & IN_ACCESS) {
		ip->i_atime = ap->a_access->tv_sec;
		ip->i_atimensec = ap->a_access->tv_nsec;
	}
	if (ip->i_flag & IN_UPDATE) {
		ip->i_mtime = ap->a_modify->tv_sec;
		ip->i_mtimensec = ap->a_modify->tv_nsec;
		(ip)->i_modrev++;
	}
	if (ip->i_flag & IN_CHANGE) {
		struct timespec ts;

		getnanotime(&ts);
		ip->i_ctime = ts.tv_sec;
		ip->i_ctimensec = ts.tv_nsec;
	}
	ip->i_flag &= ~(IN_ACCESS | IN_CHANGE | IN_UPDATE);

	if (!(ip->i_flag & IN_MODIFIED))
		++(VFSTOUFS(vp->v_mount)->um_lfs->lfs_uinodes);
	ip->i_flag |= IN_MODIFIED;

	/* If sync, push back the vnode and any dirty blocks it may have. */
	return (ap->a_waitfor & LFS_SYNC ? lfs_vflush(vp) : 0);
}

/* Update segment usage information when removing a block. */
#define UPDATE_SEGUSE \
	if (lastseg != -1) { \
		LFS_SEGENTRY(sup, fs, lastseg, sup_bp); \
		if (num > sup->su_nbytes) \
			panic("lfs_truncate: negative bytes in segment %d", \
			    lastseg); \
		sup->su_nbytes -= num; \
		e1 = VOP_BWRITE(sup_bp); \
		fragsreleased += numfrags(fs, num); \
	}

#define SEGDEC(S) { \
	if (daddr != 0) { \
		if (lastseg != (seg = datosn(fs, daddr))) { \
			UPDATE_SEGUSE; \
			num = (S); \
			lastseg = seg; \
		} else \
			num += (S); \
	} \
}

/*
 * Truncate the inode ip to at most length size.  Update segment usage
 * table information.
 */
/* ARGSUSED */
int
lfs_truncate(v)
	void *v;
{
	struct vop_truncate_args /* {
		struct vnode *a_vp;
		off_t a_length;
		int a_flags;
		struct ucred *a_cred;
		struct proc *a_p;
	} */ *ap = v;
	register struct indir *inp;
	register int i;
	register ufs_daddr_t *daddrp;
	register struct vnode *vp = ap->a_vp;
	off_t length = ap->a_length;
	struct buf *bp, *sup_bp;
	struct timespec ts;
	struct ifile *ifp;
	struct inode *ip;
	struct lfs *fs;
	struct indir a[NIADDR + 2], a_end[NIADDR + 2];
	SEGUSE *sup;
	ufs_daddr_t daddr, lastblock, lbn, olastblock;
	ufs_daddr_t oldsize_lastblock, oldsize_newlast, newsize;
	long off, a_released, fragsreleased, i_released;
	int e1, e2, depth, lastseg, num, offset, seg, freesize;

	ip = VTOI(vp);
	getnanotime(&ts);
	if (vp->v_type == VLNK && vp->v_mount->mnt_maxsymlinklen > 0) {
#ifdef DIAGNOSTIC
		if (length != 0)
			panic("lfs_truncate: partial truncate of symlink");
#endif
		bzero((char *)&ip->i_ffs1_shortlink, (u_int)ip->i_ffs1_size);
		ip->i_ffs1_size = 0;
		ip->i_flag |= IN_CHANGE | IN_UPDATE;
		return (VOP_UPDATE(vp, &ts, &ts, 0));
	}
	vnode_pager_setsize(vp, (u_long)length);

	fs = ip->i_lfs;

	/* If length is larger than the file, just update the times. */
	if (ip->i_ffs1_size <= length) {
		ip->i_flag |= IN_CHANGE | IN_UPDATE;
		return (VOP_UPDATE(vp, &ts, &ts, 0));
	}

	/*
	 * Calculate index into inode's block list of last direct and indirect
	 * blocks (if any) which we want to keep.  Lastblock is 0 when the
	 * file is truncated to 0.
	 */
	lastblock = lblkno(fs, length + fs->lfs_bsize - 1);
	olastblock = lblkno(fs, ip->i_ffs1_size + fs->lfs_bsize - 1) - 1;

	/*
	 * Update the size of the file. If the file is not being truncated to
	 * a block boundry, the contents of the partial block following the end
	 * of the file must be zero'ed in case it ever become accessable again
	 * because of subsequent file growth.  For this part of the code,
	 * oldsize_newlast refers to the old size of the new last block in the file.
	 */
	offset = blkoff(fs, length);
	lbn = lblkno(fs, length);
	oldsize_newlast = blksize(fs, ip, lbn);

	/* Now set oldsize to the current size of the current last block */
	oldsize_lastblock = blksize(fs, ip, olastblock);
	if (offset == 0)
		ip->i_ffs1_size = length;
	else {
#ifdef QUOTA
		if ((e1 = getinoquota(ip)) != 0)
			return (e1);
#endif	
		if ((e1 = bread(vp, lbn, fs->lfs_bsize, NOCRED, &bp)) != 0)
			return (e1);
		ip->i_ffs1_size = length;
		(void)vnode_pager_uncache(vp);
		newsize = blksize(fs, ip, lbn);
		bzero((char *)bp->b_data + offset, (u_int)(newsize - offset));
		allocbuf(bp, newsize);
		if ((e1 = VOP_BWRITE(bp)) != 0)
			return (e1);
	}
	/*
	 * Modify sup->su_nbyte counters for each deleted block; keep track
	 * of number of blocks removed for ip->i_ffs1_blocks.
	 */
	fragsreleased = 0;
	num = 0;
	lastseg = -1;

	for (lbn = olastblock; lbn >= lastblock;) {
		/* XXX use run length from bmap array to make this faster */
		ufs_bmaparray(vp, lbn, &daddr, a, &depth, NULL);
		if (lbn == olastblock) {
			for (i = NIADDR + 2; i--;)
				a_end[i] = a[i];
			freesize = oldsize_lastblock;
		} else
			freesize = fs->lfs_bsize;

		switch (depth) {
		case 0:				/* Direct block. */
			daddr = ip->i_ffs1_db[lbn];
			SEGDEC(freesize);
			ip->i_ffs1_db[lbn] = 0;
			--lbn;
			break;
#ifdef DIAGNOSTIC
		case 1:				/* An indirect block. */
			panic("lfs_truncate: ufs_bmaparray returned depth 1");
			/* NOTREACHED */
#endif
		default:			/* Chain of indirect blocks. */
			inp = a + --depth;
			if (inp->in_off > 0 && lbn != lastblock) {
				lbn -= inp->in_off < lbn - lastblock ?
				    inp->in_off : lbn - lastblock;
				break;
			}
			for (; depth && (inp->in_off == 0 || lbn == lastblock);
			    --inp, --depth) {
				if (bread(vp,
				    inp->in_lbn, fs->lfs_bsize, NOCRED, &bp))
					panic("lfs_truncate: bread bno %d",
					    inp->in_lbn);
				daddrp = (ufs_daddr_t *)bp->b_data +
				    inp->in_off;
				for (i = inp->in_off;
				    i++ <= a_end[depth].in_off;) {
					daddr = *daddrp++;
					SEGDEC(freesize);
				}
				a_end[depth].in_off = NINDIR(fs) - 1;
				if (inp->in_off == 0)
					brelse (bp);
				else {
					bzero((ufs_daddr_t *)bp->b_data +
					    inp->in_off, fs->lfs_bsize - 
					    inp->in_off * sizeof(ufs_daddr_t));
					if ((e1 = VOP_BWRITE(bp)) != 0)
						return (e1);
				}
			}
			if (depth == 0 && a[1].in_off == 0) {
				off = a[0].in_off;
				daddr = ip->i_ffs1_ib[off];
				SEGDEC(freesize);
				ip->i_ffs1_ib[off] = 0;
			}
			if (lbn == lastblock || lbn <= NDADDR)
				--lbn;
			else {
				lbn -= NINDIR(fs);
				if (lbn < lastblock)
					lbn = lastblock;
			}
		}
	}
	UPDATE_SEGUSE;

	/* If truncating the file to 0, update the version number. */
	if (length == 0) {
		LFS_IENTRY(ifp, fs, ip->i_number, bp);
		++ifp->if_version;
		(void) VOP_BWRITE(bp);
	}

#ifdef DIAGNOSTIC
	if (ip->i_ffs1_blocks < fragstodb(fs, fragsreleased)) {
		printf("lfs_truncate: frag count < 0\n");
		fragsreleased = dbtofrags(fs, ip->i_ffs1_blocks);
		panic("lfs_truncate: frag count < 0");
	}
#endif
	ip->i_ffs1_blocks -= fragstodb(fs, fragsreleased);
	fs->lfs_bfree +=  fragstodb(fs, fragsreleased);
	ip->i_flag |= IN_CHANGE | IN_UPDATE;
	/*
	 * Traverse dirty block list counting number of dirty buffers
	 * that are being deleted out of the cache, so that the lfs_avail
	 * field can be updated.
	 */
	a_released = 0;
	i_released = 0;
	LIST_FOREACH(bp, &vp->v_dirtyblkhd, b_vnbufs)
		if (bp->b_flags & B_LOCKED) {
			a_released += numfrags(fs, bp->b_bcount);
			/*
			 * XXX
			 * When buffers are created in the cache, their block
			 * number is set equal to their logical block number.
			 * If that is still true, we are assuming that the
			 * blocks are new (not yet on disk) and weren't
			 * counted above.  However, there is a slight chance
			 * that a block's disk address is equal to its logical
			 * block number in which case, we'll get an overcounting
			 * here.
			 */
			if (bp->b_blkno == bp->b_lblkno)
				i_released += numfrags(fs, bp->b_bcount);
		}
	fragsreleased = i_released;
#ifdef DIAGNOSTIC
	if (fragsreleased > dbtofrags(fs, ip->i_ffs1_blocks)) {
		printf("lfs_inode: Warning! %s\n",
		    "more frags released from inode than are in inode");
		fragsreleased = dbtofrags(fs, ip->i_ffs1_blocks);
		panic("lfs_inode: Warning.  More frags released");
	}
#endif
	fs->lfs_bfree += fragstodb(fs, fragsreleased);
	ip->i_ffs1_blocks -= fragstodb(fs, fragsreleased);
#ifdef DIAGNOSTIC
	if (length == 0 && ip->i_ffs1_blocks != 0) {
		printf("lfs_inode: Warning! %s%d%s\n",
		    "Truncation to zero, but ", ip->i_ffs1_blocks,
		    " blocks left on inode");
		    panic("lfs_inode");
	}
#endif
	fs->lfs_avail += fragstodb(fs, a_released);
	e1 = vinvalbuf(vp, (length > 0) ? V_SAVE : 0, ap->a_cred, ap->a_p,
	    0, 0); 
	e2 = VOP_UPDATE(vp, &ts, &ts, 0);
	return (e1 ? e1 : e2 ? e2 : 0);
}
@


1.12
log
@Use more queue macros rather than doing it by hand; ok otto@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_inode.c,v 1.11 2005/12/28 20:48:18 pedro Exp $	*/
@


1.11
log
@Use the DIP macros to uniformly access fields from UFS1 and UFS2 dinodes.
No functional change, okay tedu@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_inode.c,v 1.10 2004/06/24 19:35:27 tholo Exp $	*/
d339 1
a339 1
	for (bp = vp->v_dirtyblkhd.lh_first; bp; bp = bp->b_vnbufs.le_next)
@


1.10
log
@This moves access to wall and uptime variables in MI code,
encapsulating all such access into wall-defined functions
that makes sure locking is done as needed.

It also cleans up some uses of wall time vs. uptime some
places, but there is sure to be more of these needed as
well, particularily in MD code.  Also, many current calls
to microtime() should probably be changed to getmicrotime(),
or to the {,get}microuptime() versions.

ok art@@ deraadt@@ aaron@@ matthieu@@ beck@@ sturm@@ millert@@ others
"Oh, that is not your problem!" from miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_inode.c,v 1.9 2003/06/02 23:28:23 millert Exp $	*/
d184 2
a185 2
		bzero((char *)&ip->i_ffs_shortlink, (u_int)ip->i_ffs_size);
		ip->i_ffs_size = 0;
d194 1
a194 1
	if (ip->i_ffs_size <= length) {
d205 1
a205 1
	olastblock = lblkno(fs, ip->i_ffs_size + fs->lfs_bsize - 1) - 1;
d221 1
a221 1
		ip->i_ffs_size = length;
d229 1
a229 1
		ip->i_ffs_size = length;
d239 1
a239 1
	 * of number of blocks removed for ip->i_ffs_blocks.
d257 1
a257 1
			daddr = ip->i_ffs_db[lbn];
d259 1
a259 1
			ip->i_ffs_db[lbn] = 0;
d300 1
a300 1
				daddr = ip->i_ffs_ib[off];
d302 1
a302 1
				ip->i_ffs_ib[off] = 0;
d323 1
a323 1
	if (ip->i_ffs_blocks < fragstodb(fs, fragsreleased)) {
d325 1
a325 1
		fragsreleased = dbtofrags(fs, ip->i_ffs_blocks);
d329 1
a329 1
	ip->i_ffs_blocks -= fragstodb(fs, fragsreleased);
d358 1
a358 1
	if (fragsreleased > dbtofrags(fs, ip->i_ffs_blocks)) {
d361 1
a361 1
		fragsreleased = dbtofrags(fs, ip->i_ffs_blocks);
d366 1
a366 1
	ip->i_ffs_blocks -= fragstodb(fs, fragsreleased);
d368 1
a368 1
	if (length == 0 && ip->i_ffs_blocks != 0) {
d370 1
a370 1
		    "Truncation to zero, but ", ip->i_ffs_blocks,
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_inode.c,v 1.8 2001/11/06 19:53:21 miod Exp $	*/
d105 5
a109 2
		ip->i_ctime = time.tv_sec;
		ip->i_ctimensec = time.tv_usec * 1000;
d178 1
a178 1
	TIMEVAL_TO_TIMESPEC(&time, &ts);
@


1.8
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_inode.c,v 1.7 1999/01/11 05:12:38 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_inode.c,v 1.6 1997/05/30 08:34:39 downsj Exp $	*/
d49 1
a49 1
#include <vm/vm.h>
@


1.7.6.1
log
@merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d49 1
a49 1
#include <uvm/uvm_extern.h>
@


1.7.6.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_inode.c,v 1.7.6.1 2001/11/13 23:02:31 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.6
log
@Integrate new ext2fs, reverting ufs support for the old one.
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_inode.c,v 1.5 1997/03/02 09:38:18 millert Exp $	*/
d127 1
a127 1
			panic("lfs_truncate: negative bytes in segment %d\n", \
d327 1
a327 1
		panic("lfs_truncate: frag count < 0\n");
d363 1
a363 1
		panic("lfs_inode: Warning.  More frags released\n");
@


1.5
log
@Add noatime option to not update atime on files in a filesystem (unless
ctime or mtime has changed).  Useful for laptops and news servers.
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_inode.c,v 1.4 1996/07/01 07:41:51 downsj Exp $	*/
d185 2
a186 2
		bzero((char *)&ip->i_shortlink, (u_int)ip->i_size);
		ip->i_size = 0;
d195 1
a195 1
	if (ip->i_size <= length) {
d206 1
a206 1
	olastblock = lblkno(fs, ip->i_size + fs->lfs_bsize - 1) - 1;
d222 1
a222 1
		ip->i_size = length;
d230 1
a230 1
		ip->i_size = length;
d240 1
a240 1
	 * of number of blocks removed for ip->i_blocks.
d258 1
a258 1
			daddr = ip->i_db[lbn];
d260 1
a260 1
			ip->i_db[lbn] = 0;
d301 1
a301 1
				daddr = ip->i_ib[off];
d303 1
a303 1
				ip->i_ib[off] = 0;
d324 1
a324 1
	if (ip->i_blocks < fragstodb(fs, fragsreleased)) {
d326 1
a326 1
		fragsreleased = dbtofrags(fs, ip->i_blocks);
d330 1
a330 1
	ip->i_blocks -= fragstodb(fs, fragsreleased);
d359 1
a359 1
	if (fragsreleased > dbtofrags(fs, ip->i_blocks)) {
d362 1
a362 1
		fragsreleased = dbtofrags(fs, ip->i_blocks);
d367 1
a367 1
	ip->i_blocks -= fragstodb(fs, fragsreleased);
d369 1
a369 1
	if (length == 0 && ip->i_blocks != 0) {
d371 1
a371 1
		    "Truncation to zero, but ", ip->i_blocks,
@


1.4
log
@New LFS, based on Lite2.  Still being worked on.
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_inode.c,v 1.3 1996/05/22 11:47:19 deraadt Exp $	*/
d93 3
@


1.3
log
@Change VOP_UPDATE() semantics:
* Make 2nd and 3rd args timespecs, not timevals.
* Consistently pass a Boolean as the 4th arg (except in LFS).
Also, fix ffs_update() and lfs_update() to actually change the nsec fields.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 1
 *	@@(#)lfs_inode.c	8.5 (Berkeley) 12/30/93
a58 6
void
lfs_init()
{
	ufs_init();
}

d123 1
a123 1
		if ((num << fs->lfs_bshift) > sup->su_nbytes) \
d126 1
a126 1
		sup->su_nbytes -= num << fs->lfs_bshift; \
d128 1
a128 1
		blocksreleased += num; \
d131 1
a131 1
#define SEGDEC { \
d135 1
a135 1
			num = 1; \
d138 1
a138 1
			++num; \
d160 1
a160 1
	register daddr_t *daddrp;
d170 4
a173 3
	daddr_t daddr, lastblock, lbn, olastblock;
	long off, a_released, blocksreleased, i_released;
	int e1, e2, depth, lastseg, num, offset, seg, size;
d209 2
a210 1
	 * because of subsequent file growth.
d213 5
a220 1
		lbn = lblkno(fs, length);
a227 1
		size = blksize(fs);
d229 3
a231 2
		bzero((char *)bp->b_data + offset, (u_int)(size - offset));
		allocbuf(bp, size);
d239 1
a239 1
	blocksreleased = 0;
d246 1
a246 1
		if (lbn == olastblock)
d249 4
d256 1
a256 1
			SEGDEC;
d278 2
a279 1
				daddrp = (daddr_t *)bp->b_data + inp->in_off;
d283 1
a283 1
					SEGDEC;
d289 1
a289 1
					bzero((daddr_t *)bp->b_data +
d291 1
a291 1
					    inp->in_off * sizeof(daddr_t));
d299 1
a299 1
				SEGDEC;
d321 4
a324 3
	if (ip->i_blocks < fsbtodb(fs, blocksreleased)) {
		printf("lfs_truncate: block count < 0\n");
		blocksreleased = ip->i_blocks;
d327 2
a328 2
	ip->i_blocks -= fsbtodb(fs, blocksreleased);
	fs->lfs_bfree +=  fsbtodb(fs, blocksreleased);
d339 1
a339 1
			++a_released;
d352 1
a352 1
				++i_released;
d354 1
a354 1
	blocksreleased = fsbtodb(fs, i_released);
d356 1
a356 1
	if (blocksreleased > ip->i_blocks) {
d358 3
a360 2
		    "more blocks released from inode than are in inode");
		blocksreleased = ip->i_blocks;
d363 2
a364 2
	fs->lfs_bfree += blocksreleased;
	ip->i_blocks -= blocksreleased;
d366 1
a366 1
	if (length == 0 && ip->i_blocks != 0)
d370 2
d373 1
a373 1
	fs->lfs_avail += fsbtodb(fs, a_released);
@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d2 1
a2 1
/*	$NetBSD: lfs_inode.c,v 1.4 1996/02/09 22:28:52 christos Exp $	*/
d89 2
a90 2
		struct timeval *a_access;
		struct timeval *a_modify;
d102 1
a102 1
	if (ip->i_flag & IN_ACCESS)
d104 2
d108 1
d111 1
a111 1
	if (ip->i_flag & IN_CHANGE)
d113 2
d170 1
a170 1
	struct timeval tv;
d181 1
a181 1
	tv = time;
d190 1
a190 1
		return (VOP_UPDATE(vp, &tv, &tv, 0));
d199 1
a199 1
		return (VOP_UPDATE(vp, &tv, &tv, 0));
d367 1
a367 1
	e2 = VOP_UPDATE(vp, &tv, &tv, 0);
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: lfs_inode.c,v 1.3 1995/06/15 23:22:44 cgd Exp $	*/
d59 1
a59 1
int
d62 1
a62 1
	return (ufs_init());
d84 3
a86 1
lfs_update(ap)
d92 1
a92 2
	} */ *ap;
{
d149 3
a151 1
lfs_truncate(ap)
d158 1
a158 2
	} */ *ap;
{
d217 1
a217 1
		if (e1 = getinoquota(ip))
d220 1
a220 1
		if (e1 = bread(vp, lbn, fs->lfs_bsize, NOCRED, &bp))
d227 1
a227 1
		if (e1 = VOP_BWRITE(bp))
d282 1
a282 1
					if (e1 = VOP_BWRITE(bp)) 
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
