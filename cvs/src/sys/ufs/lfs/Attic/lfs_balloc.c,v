head	1.11;
access;
symbols
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.18
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.12
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2006.09.24.01.22.51;	author pedro;	state dead;
branches;
next	1.10;

1.10
date	2005.12.28.20.48.18;	author pedro;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.02.23.28.23;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.27.15;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.06.19.53.21;	author miod;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.08.12.20.18.30;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	97.05.30.08.34.36;	author downsj;	state Exp;
branches
	1.5.12.1;
next	1.4;

1.4
date	96.10.18.14.46.23;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.07.01.07.41.48;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.02.27.07.13.20;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.33;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.33;	author deraadt;	state Exp;
branches;
next	;

1.5.12.1
date	2001.10.31.03.32.13;	author nate;	state Exp;
branches;
next	1.5.12.2;

1.5.12.2
date	2001.11.13.23.02.31;	author niklas;	state Exp;
branches;
next	1.5.12.3;

1.5.12.3
date	2002.03.28.14.54.26;	author niklas;	state Exp;
branches;
next	1.5.12.4;

1.5.12.4
date	2003.06.07.11.09.09;	author ho;	state Exp;
branches;
next	;

1.7.2.1
date	2002.06.11.03.32.50;	author art;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Zap LFS, okay deraadt@@
@
text
@/*	$OpenBSD: lfs_balloc.c,v 1.10 2005/12/28 20:48:18 pedro Exp $	*/
/*	$NetBSD: lfs_balloc.c,v 1.3 1996/02/09 22:28:48 christos Exp $	*/

/*
 * Copyright (c) 1989, 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)lfs_balloc.c	8.4 (Berkeley) 5/8/95
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/buf.h>
#include <sys/proc.h>
#include <sys/vnode.h>
#include <sys/mount.h>
#include <sys/resourcevar.h>
#include <sys/trace.h>

#include <miscfs/specfs/specdev.h>

#include <ufs/ufs/quota.h>
#include <ufs/ufs/inode.h>
#include <ufs/ufs/ufsmount.h>
#include <ufs/ufs/ufs_extern.h>

#include <ufs/lfs/lfs.h>
#include <ufs/lfs/lfs_extern.h>

#include <uvm/uvm_extern.h>

int lfs_fragextend(struct vnode *vp, int osize, int nsize, daddr_t lbn,
	struct buf **bpp);


int
lfs_balloc(vp, offset, iosize, lbn, bpp)
	struct vnode *vp;
	int offset;
	u_long iosize;
	ufs_daddr_t lbn;
	struct buf **bpp;
{
	struct buf *ibp, *bp;
	struct inode *ip;
	struct lfs *fs;
	struct indir indirs[NIADDR+2];
	ufs_daddr_t	daddr, lastblock;
	int bb;		/* number of disk blocks in a block disk blocks */
	int error, frags, i, nsize, osize, num;

	ip = VTOI(vp);
	fs = ip->i_lfs;

	/* 
	 * Three cases: it's a block beyond the end of file, it's a block in
	 * the file that may or may not have been assigned a disk address or
	 * we're writing an entire block.  Note, if the daddr is unassigned,
	 * the block might still have existed in the cache (if it was read
	 * or written earlier).  If it did, make sure we don't count it as a
	 * new block or zero out its contents.  If it did not, make sure
	 * we allocate any necessary indirect blocks.
	 * If we are writing a block beyond the end of the file, we need to
	 * check if the old last block was a fragment.  If it was, we need
	 * to rewrite it.
	 */

	*bpp = NULL;
	error = ufs_bmaparray(vp, lbn, &daddr, &indirs[0], &num, NULL);
	if (error)
		return (error);

	/* Check for block beyond end of file and fragment extension needed. */
	lastblock = lblkno(fs, ip->i_size);
	if (lastblock < NDADDR && lastblock < lbn) {
		osize = blksize(fs, ip, lastblock);
		if (osize < fs->lfs_bsize && osize > 0) {
			error = lfs_fragextend(vp, osize, fs->lfs_bsize,
				lastblock, &bp);
			if (error != 0)
				return(error);
			ip->i_size = (lastblock + 1) * fs->lfs_bsize;
			vnode_pager_setsize(vp, (u_long)ip->i_size);
			ip->i_flag |= IN_CHANGE | IN_UPDATE;
			VOP_BWRITE(bp);
		}
	}

	bb = VFSTOUFS(vp->v_mount)->um_seqinc;
	if (daddr == UNASSIGNED)
		/* May need to allocate indirect blocks */
		for (i = 1; i < num; ++i)
			if (!indirs[i].in_exists) {
				ibp = getblk(vp, indirs[i].in_lbn, fs->lfs_bsize,
				    0, 0);
				if ((ibp->b_flags & (B_DONE | B_DELWRI))) 
					panic ("Indirect block should not exist");

				if (!ISSPACE(fs, bb, curproc->p_ucred)){
					ibp->b_flags |= B_INVAL;
					brelse(ibp);
					return(ENOSPC);
				} else {
					ip->i_ffs1_blocks += bb;
					ip->i_lfs->lfs_bfree -= bb;
					clrbuf(ibp);
					if((error = VOP_BWRITE(ibp)) != 0)
						return(error);
				}
                        }

	/*
	 * If the block we are writing is a direct block, it's the last
	 * block in the file, and offset + iosize is less than a full
	 * block, we can write one or more fragments.  There are two cases:
	 * the block is brand new and we should allocate it the correct
	 * size or it already exists and contains some fragments and
	 * may need to extend it.
	 */
	if (lbn < NDADDR && lblkno(fs, ip->i_size) == lbn) {
		nsize = fragroundup(fs, offset + iosize);
		frags = numfrags(fs, nsize);
		bb = fragstodb(fs, frags);
		if (lblktosize(fs, lbn) == ip->i_size)
			/* Brand new block or fragment */
			*bpp = bp = getblk(vp, lbn, nsize, 0, 0);
		else {
			/* Extend existing block */
			error = lfs_fragextend(vp, (int)blksize(fs, ip, lbn), 
			    nsize, lbn, &bp);
			if (error != 0)
				return(error);
			*bpp = bp;
		}
	} else {
		/*
		 * Get the existing block from the cache either because the
		 * block is 1) not a direct block or because it's not the last
		 * block in the file.
		 */
		frags = dbtofrags(fs, bb);
		*bpp = bp = getblk(vp, lbn, blksize(fs, ip, lbn), 0, 0);
	}

	/* 
	 * The block we are writing may be a brand new block
	 * in which case we need to do accounting (i.e. check
	 * for free space and update the inode number of blocks.
	 */
	if (!(bp->b_flags & (B_CACHE | B_DONE | B_DELWRI))) {
		if (daddr == UNASSIGNED) 
			if (!ISSPACE(fs, bb, curproc->p_ucred)) {
				bp->b_flags |= B_INVAL;
				brelse(bp);
				return(ENOSPC);
			} else {
				ip->i_ffs1_blocks += bb;
				ip->i_lfs->lfs_bfree -= bb;
				if (iosize != fs->lfs_bsize)
					clrbuf(bp);
			}
		else if (iosize == fs->lfs_bsize)
			/* Optimization: I/O is unnecessary. */
			bp->b_blkno = daddr;
		else  {
			/*
			 * We need to read the block to preserve the
			 * existing bytes.
			 */
			bp->b_blkno = daddr;
			bp->b_flags |= B_READ;
			VOP_STRATEGY(bp);
			return(biowait(bp));
		}
	}
	return (0);
}

int
lfs_fragextend(vp, osize, nsize, lbn, bpp)
	struct vnode *vp;
	int osize;
	int nsize;
	daddr_t lbn;
	struct buf **bpp;
{
	struct inode *ip;
	struct lfs *fs;
	long bb;
	int error;

	ip = VTOI(vp);
	fs = ip->i_lfs;
	bb = (long)fragstodb(fs, numfrags(fs, nsize - osize));
	if (!ISSPACE(fs, bb, curproc->p_ucred)) {
		return(ENOSPC);
	}

	error = bread(vp, lbn, osize, NOCRED, bpp);
	if (error != 0) {
		brelse(*bpp);
		return(error);
	}
#ifdef QUOTA
	error = chkdq(ip, bb, curproc->p_ucred, 0);
	if (error != 0) {
		brelse(*bpp);
		return (error);
	}
#endif
	ip->i_ffs1_blocks += bb;
	ip->i_flag |= IN_CHANGE | IN_UPDATE;
	fs->lfs_bfree -= fragstodb(fs, numfrags(fs, (nsize - osize)));
	allocbuf(*bpp, nsize);
	bzero((char *)((*bpp)->b_data) + osize, (u_int)(nsize - osize));
	return(0);
}
@


1.10
log
@Use the DIP macros to uniformly access fields from UFS1 and UFS2 dinodes.
No functional change, okay tedu@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_balloc.c,v 1.9 2003/06/02 23:28:23 millert Exp $	*/
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_balloc.c,v 1.8 2002/03/14 01:27:15 millert Exp $	*/
d127 1
a127 1
					ip->i_ffs_blocks += bb;
d180 1
a180 1
				ip->i_ffs_blocks += bb;
d234 1
a234 1
	ip->i_ffs_blocks += bb;
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_balloc.c,v 1.7 2001/11/06 19:53:21 miod Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_balloc.c,v 1.6 2001/08/12 20:18:30 mickey Exp $	*/
d59 2
a60 2
int lfs_fragextend __P((struct vnode *vp, int osize, int nsize, daddr_t lbn,
	struct buf **bpp));
@


1.7.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_balloc.c,v 1.7 2001/11/06 19:53:21 miod Exp $	*/
d59 2
a60 2
int lfs_fragextend(struct vnode *vp, int osize, int nsize, daddr_t lbn,
	struct buf **bpp);
@


1.6
log
@vm_extern.h no more
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_balloc.c,v 1.5 1997/05/30 08:34:36 downsj Exp $	*/
d57 1
a57 1
#include <vm/vm.h>
@


1.5
log
@Integrate new ext2fs, reverting ufs support for the old one.
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_balloc.c,v 1.4 1996/10/18 14:46:23 mickey Exp $	*/
a57 1
#include <vm/vm_extern.h>	/* for vnode_pager_setsize() */
@


1.5.12.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_balloc.c,v 1.5 1997/05/30 08:34:36 downsj Exp $	*/
d58 1
@


1.5.12.2
log
@merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 1
a57 1
#include <uvm/uvm_extern.h>
@


1.5.12.3
log
@Merge in -current from roughly a week ago
@
text
@d59 2
a60 2
int lfs_fragextend(struct vnode *vp, int osize, int nsize, daddr_t lbn,
	struct buf **bpp);
@


1.5.12.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_balloc.c,v 1.5.12.3 2002/03/28 14:54:26 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4
log
@-Wall happieness
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_balloc.c,v 1.3 1996/07/01 07:41:48 downsj Exp $	*/
d132 1
a132 1
					ip->i_blocks += bb;
d185 1
a185 1
				ip->i_blocks += bb;
d239 1
a239 1
	ip->i_blocks += bb;
@


1.3
log
@New LFS, based on Lite2.  Still being worked on.
@
text
@d1 1
a1 1
/*	$OpenBSD: lfs_balloc.c,v 1.2 1996/02/27 07:13:20 niklas Exp $	*/
d57 7
d106 3
a108 2
			if (error = lfs_fragextend(vp, osize, fs->lfs_bsize,
			    lastblock, &bp))
d135 1
a135 1
					if(error = VOP_BWRITE(ibp))
d157 3
a159 2
			if (error = lfs_fragextend(vp, (int)blksize(fs, ip, lbn), 
			    nsize, lbn, &bp))
d207 1
@


1.2
log
@From NetBSD: update to 960217 sources
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d36 1
a36 1
 *	@@(#)lfs_balloc.c	8.1 (Berkeley) 6/11/93
d58 1
a58 1
lfs_balloc(vp, iosize, lbn, bpp)
d60 1
d62 1
a62 1
	daddr_t lbn;
d69 3
a71 2
	daddr_t daddr;
	int bb, error, i, num;
d84 3
d94 15
a108 1
	*bpp = bp = getblk(vp, lbn, fs->lfs_bsize, 0, 0);
d114 3
a116 15
				ibp =
				    getblk(vp, indirs[i].in_lbn, fs->lfs_bsize,
					0, 0);
				if (!(ibp->b_flags & (B_DONE | B_DELWRI))) {
					if (!ISSPACE(fs, bb, curproc->p_ucred)){
						ibp->b_flags |= B_INVAL;
						brelse(ibp);
						error = ENOSPC;
					} else {
						ip->i_blocks += bb;
						ip->i_lfs->lfs_bfree -= bb;
						clrbuf(ibp);
						error = VOP_BWRITE(ibp);
					}
				} else
d118 44
a161 5
			}
	if (error) {
		if (bp)
			brelse(bp);
		return(error);
d164 5
a168 2

	/* Now, we may need to allocate the data block */
d182 2
a183 1
			bp->b_blkno = daddr;		/* Skip the I/O */
d185 4
d195 40
a234 1
	return (error);
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: lfs_balloc.c,v 1.2 1994/06/29 06:46:49 cgd Exp $	*/
d39 1
d52 1
d85 2
a86 1
	if (error = ufs_bmaparray(vp, lbn, &daddr, &indirs[0], &num, NULL ))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
