head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.14
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.10
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.12
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.4
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.8
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.9.0.20
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.18
	OPENBSD_5_0:1.9.0.16
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.14
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.12
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.8
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.6
	UBC:1.3.0.2
	UBC_BASE:1.3
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.14
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2013.07.03.04.58.40;	author guenther;	state Exp;
branches;
next	1.11;

1.11
date	2013.06.11.16.42.19;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2012.12.05.23.20.24;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2008.01.05.19.49.26;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.28.23;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.22.11.09.05;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.06.21.48.58;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.06.19.38.19;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.27.15;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.21.21.23.56;	author csapuntz;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	97.02.24.14.27.16;	author niklas;	state Exp;
branches
	1.2.14.1;
next	1.1;

1.1
date	95.10.18.08.53.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.35;	author deraadt;	state Exp;
branches;
next	;

1.2.14.1
date	2001.12.05.01.02.41;	author niklas;	state Exp;
branches;
next	1.2.14.2;

1.2.14.2
date	2002.03.28.14.54.26;	author niklas;	state Exp;
branches;
next	1.2.14.3;

1.2.14.3
date	2003.03.28.00.08.47;	author niklas;	state Exp;
branches;
next	1.2.14.4;

1.2.14.4
date	2003.06.07.11.09.09;	author ho;	state Exp;
branches;
next	;

1.3.2.1
date	2002.06.11.03.32.50;	author art;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2002.10.29.00.36.50;	author art;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2003.05.19.22.38.11;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.12
log
@(Re)define the quota file format to be independent of time_t; changing
the layout calls for some conversion assistance and can be deferred until
the other big time_t issues are resolved

ok deraadt@@
@
text
@/*	$OpenBSD: quota.h,v 1.11 2013/06/11 16:42:19 deraadt Exp $	*/
/*	$NetBSD: quota.h,v 1.6 1995/03/26 20:38:17 jtc Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Robert Elz at The University of Melbourne.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)quota.h	8.3 (Berkeley) 8/19/94
 */

#ifndef _QUOTA_
#define _QUOTA_

/*
 * Definitions for disk quotas imposed on the average user
 * (big brother finally hits UNIX).
 *
 * The following constants define the amount of time given a user before the
 * soft limits are treated as hard limits (usually resulting in an allocation
 * failure). The timer is started when the user crosses their soft limit, it
 * is reset when they go below their soft limit.
 */
#define	MAX_IQ_TIME	(7*24*60*60)	/* seconds in 1 week */
#define	MAX_DQ_TIME	(7*24*60*60)	/* seconds in 1 week */

/*
 * The following constants define the usage of the quota file array in the
 * ufsmount structure and dquot array in the inode structure.  The semantics
 * of the elements of these arrays are defined in the routine getinoquota;
 * the remainder of the quota code treats them generically and need not be
 * inspected when changing the size of the array.
 */
#define	MAXQUOTAS	2
#define	USRQUOTA	0	/* element used for user quotas */
#define	GRPQUOTA	1	/* element used for group quotas */

/*
 * Definitions for the default names of the quotas files.
 */
#define INITQFNAMES { \
	"user",		/* USRQUOTA */ \
	"group",	/* GRPQUOTA */ \
	"undefined", \
}
#define	QUOTAFILENAME	"quota"
#define	QUOTAGROUP	"operator"

/*
 * Command definitions for the 'quotactl' system call.  The commands are
 * broken into a main command defined below and a subcommand that is used
 * to convey the type of quota that is being manipulated (see above).
 */
#define SUBCMDMASK	0x00ff
#define SUBCMDSHIFT	8
#define	QCMD(cmd, type)	(((cmd) << SUBCMDSHIFT) | ((type) & SUBCMDMASK))

#define	Q_QUOTAON	0x0100	/* enable quotas */
#define	Q_QUOTAOFF	0x0200	/* disable quotas */
#define	Q_GETQUOTA	0x0300	/* get limits and usage */
#define	Q_SETQUOTA	0x0400	/* set limits and usage */
#define	Q_SETUSE	0x0500	/* set usage */
#define	Q_SYNC		0x0600	/* sync disk copy of a filesystems quotas */

/*
 * The following structure defines the format of the disk quota file
 * (as it appears on disk) - the file is an array of these structures
 * indexed by user or group number.  The setquota system call establishes
 * the vnode for each quota file (a pointer is retained in the ufsmount
 * structure).
 */
struct dqblk {
	u_int32_t dqb_bhardlimit;	/* absolute limit on disk blks alloc */
	u_int32_t dqb_bsoftlimit;	/* preferred limit on disk blks */
	u_int32_t dqb_curblocks;	/* current block count */
	u_int32_t dqb_ihardlimit;	/* maximum # allocated inodes + 1 */
	u_int32_t dqb_isoftlimit;	/* preferred inode limit */
	u_int32_t dqb_curinodes;	/* current # allocated inodes */
					/* XXX 2038 */
	u_int32_t dqb_btime;		/* time limit for excessive disk use */
	u_int32_t dqb_itime;		/* time limit for excessive files */
};

#ifdef _KERNEL
/*
 * Flags to ufs_quota_{alloc,free}_{blocks,inode}2
 */
enum ufs_quota_flags {
	UFS_QUOTA_NOUID = 0x1,		/* Don't change UID quota */
	UFS_QUOTA_NOGID = 0x2,		/* Don't change GID quota */
	UFS_QUOTA_FORCE = 0x1000	/* don't check limits - just change it */
};     /* Change GID */

struct dquot;
struct inode;
struct mount;
struct proc;
struct ucred;
struct ufsmount;
struct vnode;
__BEGIN_DECLS
#define ufs_quota_alloc_blocks(i, c, cr) ufs_quota_alloc_blocks2(i, c, cr, 0)
#define ufs_quota_free_blocks(i, c, cr) ufs_quota_free_blocks2(i, c, cr, 0)
#define ufs_quota_alloc_inode(i, cr) ufs_quota_alloc_inode2(i, cr, 0)
#define ufs_quota_free_inode(i, cr) ufs_quota_free_inode2(i, cr, 0)
int     ufs_quota_alloc_blocks2(struct inode *, daddr_t, struct ucred *, enum ufs_quota_flags);
int     ufs_quota_free_blocks2(struct inode *, daddr_t, struct ucred *, enum ufs_quota_flags);
int     ufs_quota_alloc_inode2(struct inode *, struct ucred *, enum ufs_quota_flags);
int     ufs_quota_free_inode2(struct inode *, struct ucred *, enum ufs_quota_flags);

int     ufs_quota_delete(struct inode *);

int	getinoquota(struct inode *);
int	quotaoff(struct proc *, struct mount *, int);
int	qsync(struct mount *mp);
int	ufs_quotactl(struct mount *, int, uid_t, caddr_t, struct proc *);

void    ufs_quota_init(void);

__END_DECLS
#endif /* _KERNEL */

#endif /* _QUOTA_ */
@


1.11
log
@final removal of daddr64_t.  daddr_t has been 64 bit for a long enough
test period; i think 3 years ago the last bugs fell out.
ok otto beck others
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.10 2012/12/05 23:20:24 deraadt Exp $	*/
d105 3
a107 2
	time_t	  dqb_btime;		/* time limit for excessive disk use */
	time_t	  dqb_itime;		/* time limit for excessive files */
@


1.10
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.9 2008/01/05 19:49:26 otto Exp $	*/
d131 2
a132 2
int     ufs_quota_alloc_blocks2(struct inode *, daddr64_t, struct ucred *, enum ufs_quota_flags);
int     ufs_quota_free_blocks2(struct inode *, daddr64_t, struct ucred *, enum ufs_quota_flags);
@


1.9
log
@Make the ffs code 64-bit disk block number clean.  Based on a diff
from Pedro Martelleto.  Two things remain: the on-disk quota
structures are still 32-bit and statfs does not do 64-bit numbers
yet. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.8 2003/06/02 23:28:23 millert Exp $	*/
a117 2

#include <sys/cdefs.h>
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.7 2002/12/22 11:09:05 art Exp $	*/
d133 2
a134 2
int     ufs_quota_alloc_blocks2(struct inode *, int32_t, struct ucred *, enum ufs_quota_flags);
int     ufs_quota_free_blocks2(struct inode *, int32_t, struct ucred *, enum ufs_quota_flags);
@


1.7
log
@Flargs -> Flags.
Reported by Dave Steinberg <lists@@redterror.net>
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.6 2002/09/06 21:48:58 deraadt Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@no, make INITQFNAMES without a terminal ;
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.5 2002/09/06 19:38:19 deraadt Exp $	*/
d115 1
a115 1
 * Flargs to ufs_quota_{alloc,free}_{blocks,inode}2
@


1.5
log
@no , at end of enum
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.4 2002/03/14 01:27:15 millert Exp $	*/
d75 1
a75 1
};
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.3 2001/11/21 21:23:56 csapuntz Exp $	*/
d118 3
a120 3
	UFS_QUOTA_NOUID = 0x1,       /* Don't change UID quota */
	UFS_QUOTA_NOGID = 0x2,       /* Don't change GID quota */
	UFS_QUOTA_FORCE = 0x1000,    /* don't check limits - just change it */
@


1.3
log
@Don't use #define QUOTA - use stub file instead

Pass over the quota code in ufs/. Make code paths clearer. Clean up some names.
Move all code that manipulates quotas directly into ufs_quota.c

Use vfs_mount_foreach_vnode to traverse list of vnodes in mountpoint.
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.2 1997/02/24 14:27:16 niklas Exp $	*/
d144 4
a147 4
int	getinoquota __P((struct inode *));
int	quotaoff __P((struct proc *, struct mount *, int));
int	qsync __P((struct mount *mp));
int	ufs_quotactl __P((struct mount *, int, uid_t, caddr_t, struct proc *));
@


1.3.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.3 2001/11/21 21:23:56 csapuntz Exp $	*/
d144 4
a147 4
int	getinoquota(struct inode *);
int	quotaoff(struct proc *, struct mount *, int);
int	qsync(struct mount *mp);
int	ufs_quotactl(struct mount *, int, uid_t, caddr_t, struct proc *);
@


1.3.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.3.2.1 2002/06/11 03:32:50 art Exp $	*/
d75 1
a75 1
}
d118 3
a120 3
	UFS_QUOTA_NOUID = 0x1,		/* Don't change UID quota */
	UFS_QUOTA_NOGID = 0x2,		/* Don't change GID quota */
	UFS_QUOTA_FORCE = 0x1000	/* don't check limits - just change it */
@


1.3.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d115 1
a115 1
 * Flags to ufs_quota_{alloc,free}_{blocks,inode}2
@


1.2
log
@OpenBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.6 1995/03/26 20:38:17 jtc Exp $	*/
a113 47
#include <sys/queue.h>

/*
 * The following structure records disk usage for a user or group on a
 * filesystem. There is one allocated for each quota that exists on any
 * filesystem for the current user or group. A cache is kept of recently
 * used entries.
 */
struct dquot {
	LIST_ENTRY(dquot) dq_hash;	/* hash list */
	TAILQ_ENTRY(dquot) dq_freelist;	/* free list */
	u_int16_t dq_flags;		/* flags, see below */
	u_int16_t dq_cnt;		/* count of active references */
	u_int16_t dq_spare;		/* unused spare padding */
	u_int16_t dq_type;		/* quota type of this dquot */
	u_int32_t dq_id;		/* identifier this applies to */
	struct	ufsmount *dq_ump;	/* filesystem that this is taken from */
	struct	dqblk dq_dqb;		/* actual usage & quotas */
};
/*
 * Flag values.
 */
#define	DQ_LOCK		0x01		/* this quota locked (no MODS) */
#define	DQ_WANT		0x02		/* wakeup on unlock */
#define	DQ_MOD		0x04		/* this quota modified since read */
#define	DQ_FAKE		0x08		/* no limits here, just usage */
#define	DQ_BLKS		0x10		/* has been warned about blk limit */
#define	DQ_INODS	0x20		/* has been warned about inode limit */
/*
 * Shorthand notation.
 */
#define	dq_bhardlimit	dq_dqb.dqb_bhardlimit
#define	dq_bsoftlimit	dq_dqb.dqb_bsoftlimit
#define	dq_curblocks	dq_dqb.dqb_curblocks
#define	dq_ihardlimit	dq_dqb.dqb_ihardlimit
#define	dq_isoftlimit	dq_dqb.dqb_isoftlimit
#define	dq_curinodes	dq_dqb.dqb_curinodes
#define	dq_btime	dq_dqb.dqb_btime
#define	dq_itime	dq_dqb.dqb_itime

/*
 * If the system has never checked for a quota for this file, then it is
 * set to NODQUOT.  Once a write attempt is made the inode pointer is set
 * to reference a dquot structure.
 */
#define	NODQUOT		NULL

d115 1
a115 1
 * Flags to chkdq() and chkiq()
d117 5
a121 11
#define	FORCE	0x01	/* force usage changes independent of limits */
#define	CHOWN	0x02	/* (advisory) change initiated by chown */

/*
 * Macros to avoid subroutine calls to trivial functions.
 */
#ifdef DIAGNOSTIC
#define	DQREF(dq)	dqref(dq)
#else
#define	DQREF(dq)	(dq)->dq_cnt++
#endif
d133 11
a143 11
int	chkdq __P((struct inode *, long, struct ucred *, int));
int	chkdqchg __P((struct inode *, long, struct ucred *, int));
int	chkiq __P((struct inode *, long, struct ucred *, int));
int	chkiqchg __P((struct inode *, long, struct ucred *, int));
void	dqflush __P((struct vnode *));
int	dqget __P((struct vnode *,
	    u_long, struct ufsmount *, int, struct dquot **));
void	dqinit __P((void));
void	dqref __P((struct dquot *));
void	dqrele __P((struct vnode *, struct dquot *));
int	dqsync __P((struct vnode *, struct dquot *));
d145 1
a145 1
int	getquota __P((struct mount *, u_long, int, caddr_t));
a146 4
int	quotaoff __P((struct proc *, struct mount *, int));
int	quotaon __P((struct proc *, struct mount *, int, caddr_t));
int	setquota __P((struct mount *, u_long, int, caddr_t));
int	setuse __P((struct mount *, u_long, int, caddr_t));
a147 1
__END_DECLS
d149 2
a150 3
#ifdef DIAGNOSTIC
__BEGIN_DECLS
void	chkdquot __P((struct inode *));
a151 1
#endif
@


1.2.14.1
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d114 47
d162 1
a162 1
 * Flargs to ufs_quota_{alloc,free}_{blocks,inode}2
d164 11
a174 5
enum ufs_quota_flags {
	UFS_QUOTA_NOUID = 0x1,       /* Don't change UID quota */
	UFS_QUOTA_NOGID = 0x2,       /* Don't change GID quota */
	UFS_QUOTA_FORCE = 0x1000,    /* don't check limits - just change it */
};     /* Change GID */
d186 11
a196 11
#define ufs_quota_alloc_blocks(i, c, cr) ufs_quota_alloc_blocks2(i, c, cr, 0)
#define ufs_quota_free_blocks(i, c, cr) ufs_quota_free_blocks2(i, c, cr, 0)
#define ufs_quota_alloc_inode(i, cr) ufs_quota_alloc_inode2(i, cr, 0)
#define ufs_quota_free_inode(i, cr) ufs_quota_free_inode2(i, cr, 0)
int     ufs_quota_alloc_blocks2(struct inode *, int32_t, struct ucred *, enum ufs_quota_flags);
int     ufs_quota_free_blocks2(struct inode *, int32_t, struct ucred *, enum ufs_quota_flags);
int     ufs_quota_alloc_inode2(struct inode *, struct ucred *, enum ufs_quota_flags);
int     ufs_quota_free_inode2(struct inode *, struct ucred *, enum ufs_quota_flags);

int     ufs_quota_delete(struct inode *);

d198 2
d201 3
a203 1
int	qsync __P((struct mount *mp));
d205 1
d207 3
a209 2
void    ufs_quota_init(void);

d211 1
@


1.2.14.2
log
@Merge in -current from roughly a week ago
@
text
@d144 4
a147 4
int	getinoquota(struct inode *);
int	quotaoff(struct proc *, struct mount *, int);
int	qsync(struct mount *mp);
int	ufs_quotactl(struct mount *, int, uid_t, caddr_t, struct proc *);
@


1.2.14.3
log
@Sync the SMP branch with 3.3
@
text
@d75 1
a75 1
}
d115 1
a115 1
 * Flags to ufs_quota_{alloc,free}_{blocks,inode}2
d118 3
a120 3
	UFS_QUOTA_NOUID = 0x1,		/* Don't change UID quota */
	UFS_QUOTA_NOGID = 0x2,		/* Don't change GID quota */
	UFS_QUOTA_FORCE = 0x1000	/* don't check limits - just change it */
@


1.2.14.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: quota.h,v 1.2.14.3 2003/03/28 00:08:47 niklas Exp $	*/
d19 5
a23 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
