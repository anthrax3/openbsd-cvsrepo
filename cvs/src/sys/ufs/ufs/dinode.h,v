head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.18
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.14
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.10
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.12
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.4
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.8
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.6
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.2
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.17.0.24
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.22
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.20
	OPENBSD_5_0:1.17.0.18
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.16
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.14
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.10
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.12
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.8
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.6
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.4
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.11.0.6
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.4
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.2
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.18
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.16
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.14
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.12
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.10
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.8
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2013.05.30.19.19.09;	author guenther;	state Exp;
branches;
next	1.17;

1.17
date	2007.06.02.01.32.04;	author pedro;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.01.20.23.26;	author pedro;	state Exp;
branches;
next	1.15;

1.15
date	2007.06.01.19.26.05;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.01.18.54.27;	author pedro;	state Exp;
branches;
next	1.13;

1.13
date	2007.06.01.17.01.29;	author pedro;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.01.06.38.56;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.19.15.18.01;	author pedro;	state Exp;
branches;
next	1.10;

1.10
date	2005.06.18.18.09.43;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.20.03.44.06;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.25.23.26.55;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.23.28.23;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.26.18.33.17;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	99.12.02.18.38.17;	author art;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	99.11.17.09.17.54;	author art;	state Exp;
branches;
next	1.3;

1.3
date	97.02.24.14.27.16;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.07.01.06.52.23;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.35;	author deraadt;	state Exp;
branches;
next	;

1.5.2.1
date	2003.06.07.11.09.09;	author ho;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2004.02.19.11.01.42;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.18
log
@UFS does't do inode numbers >2^32, so use a smaller type internally,
only using ino_t in the VFS layer APIs: vget, readdir, getattr.

otto wrote the original diff for libsa to keep bootblock from overflowing
ok deraadt@@ kettenis@@
@
text
@/*	$OpenBSD: dinode.h,v 1.17 2007/06/02 01:32:04 pedro Exp $	*/
/*	$NetBSD: dinode.h,v 1.7 1995/06/15 23:22:48 cgd Exp $	*/

/*
 * Copyright (c) 1982, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)dinode.h	8.9 (Berkeley) 3/29/95
 */

#ifndef _UFS_DINODE_H_
#define _UFS_DINODE_H_

/*
 * UFS directories use 32bit inode numbers internally, regardless
 * of what the system on top of it uses.
 */
typedef u_int32_t	ufsino_t;

/*
 * The root inode is the root of the file system.  Inode 0 can't be used for
 * normal purposes and historically bad blocks were linked to inode 1, thus
 * the root inode is 2.  (Inode 1 is no longer used for this purpose, however
 * numerous dump tapes make this assumption, so we are stuck with it).
 */
#define	ROOTINO	((ufsino_t)2)

/*
 * A dinode contains all the meta-data associated with a UFS file.
 * This structure defines the on-disk format of a dinode. Since
 * this structure describes an on-disk structure, all its fields
 * are defined by types with precise widths.
 */
#define	NXADDR	2			/* External addresses in inode */
#define	NDADDR	12			/* Direct addresses in inode. */
#define	NIADDR	3			/* Indirect addresses in inode. */

struct	ufs1_dinode {
	u_int16_t	di_mode;	/*   0: IFMT, permissions; see below. */
	int16_t		di_nlink;	/*   2: File link count. */
	union {
		u_int16_t oldids[2];	/*   4: Ffs: old user and group ids. */
		u_int32_t inumber;	/*   4: Lfs: inode number. */
	} di_u;
	u_int64_t	di_size;	/*   8: File byte count. */
	int32_t		di_atime;	/*  16: Last access time. */
	int32_t		di_atimensec;	/*  20: Last access time. */
	int32_t		di_mtime;	/*  24: Last modified time. */
	int32_t		di_mtimensec;	/*  28: Last modified time. */
	int32_t		di_ctime;	/*  32: Last inode change time. */
	int32_t		di_ctimensec;	/*  36: Last inode change time. */
	int32_t		di_db[NDADDR];	/*  40: Direct disk blocks. */
	int32_t		di_ib[NIADDR];	/*  88: Indirect disk blocks. */
	u_int32_t	di_flags;	/* 100: Status flags (chflags). */
	int32_t		di_blocks;	/* 104: Blocks actually held. */
	int32_t		di_gen;		/* 108: Generation number. */
	u_int32_t	di_uid;		/* 112: File owner. */
	u_int32_t	di_gid;		/* 116: File group. */
	int32_t		di_spare[2];	/* 120: Reserved; currently unused */
};

struct ufs2_dinode {
	u_int16_t	di_mode;	/*   0: IFMT, permissions; see below. */
	int16_t		di_nlink;	/*   2: File link count. */
	u_int32_t	di_uid;		/*   4: File owner. */
	u_int32_t	di_gid;		/*   8: File group. */
	u_int32_t	di_blksize;	/*  12: Inode blocksize. */
	u_int64_t	di_size;	/*  16: File byte count. */
	u_int64_t	di_blocks;	/*  24: Bytes actually held. */
	int64_t		di_atime;	/*  32: Last access time. */
	int64_t		di_mtime;	/*  40: Last modified time. */
	int64_t		di_ctime;	/*  48: Last inode change time. */
	int64_t		di_birthtime;	/*  56: Inode creation time. */
	int32_t		di_mtimensec;	/*  64: Last modified time. */
	int32_t		di_atimensec;	/*  68: Last access time. */
	int32_t		di_ctimensec;	/*  72: Last inode change time. */
	int32_t		di_birthnsec;	/*  76: Inode creation time. */
	int32_t		di_gen;		/*  80: Generation number. */
	u_int32_t	di_kernflags;	/*  84: Kernel flags. */
	u_int32_t	di_flags;	/*  88: Status flags (chflags). */
	int32_t		di_extsize;	/*  92: External attributes block. */
	int64_t		di_extb[NXADDR];/*  96: External attributes block. */
	int64_t		di_db[NDADDR];	/* 112: Direct disk blocks. */
	int64_t		di_ib[NIADDR];	/* 208: Indirect disk blocks. */
	int64_t		di_spare[3];	/* 232: Reserved; currently unused */
};

/*
 * The di_db fields may be overlaid with other information for
 * file types that do not have associated disk storage. Block
 * and character devices overlay the first data block with their
 * dev_t value. Short symbolic links place their path in the
 * di_db area.
 */
#define	di_inumber	di_u.inumber
#define	di_ogid		di_u.oldids[1]
#define	di_ouid		di_u.oldids[0]
#define	di_rdev		di_db[0]
#define	di_shortlink	di_db

#define MAXSYMLINKLEN_UFS1	((NDADDR + NIADDR) * sizeof(int32_t))
#define MAXSYMLINKLEN_UFS2	((NDADDR + NIADDR) * sizeof(int64_t))

#define MAXSYMLINKLEN(ip) \
	((ip)->i_ump->um_fstype == UM_UFS1) ? \
	MAXSYMLINKLEN_UFS1 : MAXSYMLINKLEN_UFS2

/* File permissions. */
#define	IEXEC		0000100		/* Executable. */
#define	IWRITE		0000200		/* Writeable. */
#define	IREAD		0000400		/* Readable. */
#define	ISVTX		0001000		/* Sticky bit. */
#define	ISGID		0002000		/* Set-gid. */
#define	ISUID		0004000		/* Set-uid. */

/* File types. */
#define	IFMT		0170000		/* Mask of file type. */
#define	IFIFO		0010000		/* Named pipe (fifo). */
#define	IFCHR		0020000		/* Character device. */
#define	IFDIR		0040000		/* Directory file. */
#define	IFBLK		0060000		/* Block device. */
#define	IFREG		0100000		/* Regular file. */
#define	IFLNK		0120000		/* Symbolic link. */
#define	IFSOCK		0140000		/* UNIX domain socket. */
#define	IFWHT		0160000		/* Whiteout. */

#endif /* _UFS_DINODE_H_ */
@


1.17
log
@ufs1_daddr_t is no more, okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.16 2007/06/01 20:23:26 pedro Exp $	*/
d44 6
d55 1
a55 1
#define	ROOTINO	((ino_t)2)
@


1.16
log
@Nuke 'ufs_lbn_t', okay otto@@ deraadt@@ krw@@ beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.15 2007/06/01 19:26:05 deraadt Exp $	*/
a56 3

typedef int32_t ufs1_daddr_t;

@


1.15
log
@ufs_daddr_t is a dead type.  growfs is the only program that uses it, yet
it is ffs1-aware only.  therefore all the types are on disk, and thus,
they are actually int32_t.  ok pedro
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.14 2007/06/01 18:54:27 pedro Exp $	*/
a58 1
typedef int64_t ufs_lbn_t;
@


1.14
log
@cleanup of 'ufs1_daddr_t', first round, okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.13 2007/06/01 17:01:29 pedro Exp $	*/
a57 1
typedef int32_t ufs_daddr_t;
@


1.13
log
@Nuke ufs_time_t, okay beck@@ krw@@ marco@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.12 2007/06/01 06:38:56 deraadt Exp $	*/
d80 2
a81 2
	ufs1_daddr_t	di_db[NDADDR];	/*  40: Direct disk blocks. */
	ufs1_daddr_t	di_ib[NIADDR];	/*  88: Indirect disk blocks. */
d110 3
a112 3
	daddr64_t	di_extb[NXADDR];/*  96: External attributes block. */
	daddr64_t	di_db[NDADDR];	/* 112: Direct disk blocks. */
	daddr64_t	di_ib[NIADDR];	/* 208: Indirect disk blocks. */
d129 2
a130 2
#define MAXSYMLINKLEN_UFS1	((NDADDR + NIADDR) * sizeof(ufs1_daddr_t))
#define MAXSYMLINKLEN_UFS2	((NDADDR + NIADDR) * sizeof(daddr64_t))
@


1.12
log
@convert ufs2_daddr_t -> daddr64_t for greater clarity; ok pedro otto thib
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.11 2005/12/19 15:18:01 pedro Exp $	*/
a60 1
typedef int64_t ufs_time_t;
d98 4
a101 4
	ufs_time_t	di_atime;	/*  32: Last access time. */
	ufs_time_t	di_mtime;	/*  40: Last modified time. */
	ufs_time_t	di_ctime;	/*  48: Last inode change time. */
	ufs_time_t	di_birthtime;	/*  56: Inode creation time. */
@


1.11
log
@Add and use a few more constants and macros needed by UFS2
No functional change
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.10 2005/06/18 18:09:43 millert Exp $	*/
a59 1
typedef int64_t ufs2_daddr_t;
d111 3
a113 3
	ufs2_daddr_t	di_extb[NXADDR];/*  96: External attributes block. */
	ufs2_daddr_t	di_db[NDADDR];	/* 112: Direct disk blocks. */
	ufs2_daddr_t	di_ib[NIADDR];	/* 208: Indirect disk blocks. */
d131 1
a131 1
#define MAXSYMLINKLEN_UFS2	((NDADDR + NIADDR) * sizeof(ufs2_daddr_t))
@


1.10
log
@Remove remaining whiteout tentacles; OK deraadt@@ miod@@ weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.9 2004/01/20 03:44:06 tedu Exp $	*/
a67 1

a117 1

d130 7
a136 1
#define	MAXSYMLINKLEN	((NDADDR + NIADDR) * sizeof(ufs1_daddr_t))
@


1.9
log
@some pieces of ufs2.  help testing otto sturm
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.8 2003/08/25 23:26:55 tedu Exp $	*/
a49 8

/*
 * The Whiteout inode# is a dummy non-zero inode number which will
 * never be allocated to a real file.  It is used as a place holder
 * in the directory entry which has been tagged as a DT_W entry.
 * See the comments about ROOTINO above.
 */
#define	WINO	((ino_t)1)
@


1.8
log
@rename struct dinode to ufs1_dinode.  clears the namespace and makes
way for some future work.  no function changes yet.
few other little cleanups.
help testing otto@@ and markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.7 2003/06/02 23:28:23 millert Exp $	*/
d68 5
d76 1
d100 27
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.6 2003/05/26 18:33:17 tedu Exp $	*/
d71 1
a71 1
struct dinode {
@


1.6
log
@fiddle with some type names.  change most instances of ufs_daddr_t to
ufs1_daddr_t, a few to daddr_t.  ufs_daddr_t typedef is retained, but consider
it deprecated.  no functional changes.  inspired by freebsd.  ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.5 1999/12/02 18:38:17 art Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@Opps. Back out a part of last commit that wasn't intended for commit yet.
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.4 1999/11/17 09:17:54 art Exp $	*/
d71 1
d89 2
a90 2
	ufs_daddr_t	di_db[NDADDR];	/*  40: Direct disk blocks. */
	ufs_daddr_t	di_ib[NIADDR];	/*  88: Indirect disk blocks. */
d111 1
a111 1
#define	MAXSYMLINKLEN	((NDADDR + NIADDR) * sizeof(ufs_daddr_t))
@


1.5.2.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.5 1999/12/02 18:38:17 art Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
a70 1
typedef int32_t ufs1_daddr_t;
d88 2
a89 2
	ufs1_daddr_t	di_db[NDADDR];	/*  40: Direct disk blocks. */
	ufs1_daddr_t	di_ib[NIADDR];	/*  88: Indirect disk blocks. */
d110 1
a110 1
#define	MAXSYMLINKLEN	((NDADDR + NIADDR) * sizeof(ufs1_daddr_t))
@


1.5.2.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a67 5
typedef int64_t ufs2_daddr_t;
typedef int64_t ufs_lbn_t;
typedef int64_t ufs_time_t;

#define	NXADDR	2			/* External addresses in inode */
d71 1
a71 2

struct	ufs1_dinode {
a93 27

struct ufs2_dinode {
	u_int16_t	di_mode;	/*   0: IFMT, permissions; see below. */
	int16_t		di_nlink;	/*   2: File link count. */
	u_int32_t	di_uid;		/*   4: File owner. */
	u_int32_t	di_gid;		/*   8: File group. */
	u_int32_t	di_blksize;	/*  12: Inode blocksize. */
	u_int64_t	di_size;	/*  16: File byte count. */
	u_int64_t	di_blocks;	/*  24: Bytes actually held. */
	ufs_time_t	di_atime;	/*  32: Last access time. */
	ufs_time_t	di_mtime;	/*  40: Last modified time. */
	ufs_time_t	di_ctime;	/*  48: Last inode change time. */
	ufs_time_t	di_birthtime;	/*  56: Inode creation time. */
	int32_t		di_mtimensec;	/*  64: Last modified time. */
	int32_t		di_atimensec;	/*  68: Last access time. */
	int32_t		di_ctimensec;	/*  72: Last inode change time. */
	int32_t		di_birthnsec;	/*  76: Inode creation time. */
	int32_t		di_gen;		/*  80: Generation number. */
	u_int32_t	di_kernflags;	/*  84: Kernel flags. */
	u_int32_t	di_flags;	/*  88: Status flags (chflags). */
	int32_t		di_extsize;	/*  92: External attributes block. */
	ufs2_daddr_t	di_extb[NXADDR];/*  96: External attributes block. */
	ufs2_daddr_t	di_db[NDADDR];	/* 112: Direct disk blocks. */
	ufs2_daddr_t	di_ib[NIADDR];	/* 208: Indirect disk blocks. */
	int64_t		di_spare[3];	/* 232: Reserved; currently unused */
};

@


1.4
log
@Use u_int32_t for lfs inode number.
If we would ever change ino_t, the struct dinode would break.
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.3 1997/02/24 14:27:16 niklas Exp $	*/
d91 1
a91 1
	u_int32_t	di_blocks;	/* 104: Blocks actually held. */
@


1.3
log
@OpenBSD tags
@
text
@d1 1
a1 1
/*	$OpenBSD: dinode.h,v 1.7 1995/06/15 23:22:48 cgd Exp $	*/
d41 1
a41 1
 *	@@(#)dinode.h	8.6 (Berkeley) 9/13/94
d79 1
a79 1
		ino_t	  inumber;	/*   4: Lfs: inode number. */
d91 1
a91 1
	int32_t		di_blocks;	/* 104: Blocks actually held. */
@


1.2
log
@dinode.h: protect from multiple inclusion.
ufs_readwrite.c: changes for new LFS.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d43 3
d129 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
