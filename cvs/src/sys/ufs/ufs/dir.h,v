head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.34
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.36
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.32
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.28
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.30
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.22
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.26
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.24
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.20
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.18
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.16
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.14
	OPENBSD_5_0:1.11.0.12
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.10
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.8
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.4
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.10.0.14
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.12
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.10
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.8
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.18
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.16
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.14
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.7.0.12
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.10
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.8
	OPENBSD_2_8:1.7.0.6
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.2
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.6.0.10
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.8
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.6
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.4
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2009.01.31.21.21.45;	author grange;	state Exp;
branches;
next	1.10;

1.10
date	2005.06.18.18.09.43;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.28.17.20.16;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.28.23;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.11.26.16.23.28;	author art;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	97.05.30.08.34.56;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	96.06.27.06.42.08;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	96.06.24.23.16.01;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.06.24.03.35.03;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.04.19.16.10.44;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.35;	author deraadt;	state Exp;
branches;
next	;

1.7.2.1
date	2003.06.07.11.09.09;	author ho;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2004.02.19.11.01.42;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Rewrite DIRECTSIZ macro using offsetof. As a bonus it elimitanes casting
pointer to int.

ok miod@@ tedu@@ millert@@
@
text
@/*	$OpenBSD: dir.h,v 1.10 2005/06/18 18:09:43 millert Exp $	*/
/*	$NetBSD: dir.h,v 1.8 1996/03/09 19:42:41 scottr Exp $	*/

/*
 * Copyright (c) 1982, 1986, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)dir.h	8.4 (Berkeley) 8/10/94
 */

#ifndef _DIR_H_
#define	_DIR_H_

/*
 * Theoretically, directories can be more than 2Gb in length, however, in
 * practice this seems unlikely. So, we define the type doff_t as a 32-bit
 * quantity to keep down the cost of doing lookup on a 32-bit machine.
 */
#define	doff_t		int32_t
#define	MAXDIRSIZE	(0x7fffffff)

/*
 * A directory consists of some number of blocks of DIRBLKSIZ
 * bytes, where DIRBLKSIZ is chosen such that it can be transferred
 * to disk in a single atomic operation (e.g. 512 bytes on most machines).
 *
 * Each DIRBLKSIZ byte block contains some number of directory entry
 * structures, which are of variable length.  Each directory entry has
 * a struct direct at the front of it, containing its inode number,
 * the length of the entry, and the length of the name contained in
 * the entry.  These are followed by the name padded to a 4 byte boundary
 * with null bytes.  All names are guaranteed null terminated.
 * The maximum length of a name in a directory is MAXNAMLEN.
 *
 * The macro DIRSIZ(fmt, dp) gives the amount of space required to represent
 * a directory entry.  Free space in a directory is represented by
 * entries which have dp->d_reclen > DIRSIZ(fmt, dp).  All DIRBLKSIZ bytes
 * in a directory block are claimed by the directory entries.  This
 * usually results in the last entry in a directory having a large
 * dp->d_reclen.  When entries are deleted from a directory, the
 * space is returned to the previous entry in the same directory
 * block by increasing its dp->d_reclen.  If the first entry of
 * a directory block is free, then its dp->d_ino is set to 0.
 * Entries other than the first in a directory do not normally have
 * dp->d_ino set to 0.
 */
#define DIRBLKSIZ	DEV_BSIZE
#define	MAXNAMLEN	255

struct	direct {
	u_int32_t d_ino;		/* inode number of entry */
	u_int16_t d_reclen;		/* length of this record */
	u_int8_t  d_type; 		/* file type, see below */
	u_int8_t  d_namlen;		/* length of string in d_name */
	char	  d_name[MAXNAMLEN + 1];/* name with length <= MAXNAMLEN */
};

/*
 * File types
 */
#define	DT_UNKNOWN	 0
#define	DT_FIFO		 1
#define	DT_CHR		 2
#define	DT_DIR		 4
#define	DT_BLK		 6
#define	DT_REG		 8
#define	DT_LNK		10
#define	DT_SOCK		12

/*
 * Convert between stat structure types and directory types.
 */
#define	IFTODT(mode)	(((mode) & 0170000) >> 12)
#define	DTTOIF(dirtype)	((dirtype) << 12)

/*
 * The DIRSIZ macro gives the minimum record length which will hold
 * the directory entry.  This requires the amount of space in struct direct
 * without the d_name field, plus enough space for the name with a terminating
 * null byte (dp->d_namlen+1), rounded up to a 4 byte boundary.
 */
#define DIRECTSIZ(namlen)						\
	((offsetof(struct direct, d_name) +				\
	  ((namlen)+1)*sizeof(((struct direct *)0)->d_name[0]) + 3) & ~3)
#if (BYTE_ORDER == LITTLE_ENDIAN)
#define DIRSIZ(oldfmt, dp) \
    ((oldfmt) ? \
    ((sizeof(struct direct) - (MAXNAMLEN+1)) + (((dp)->d_type+1 + 3) &~ 3)) : \
    ((sizeof(struct direct) - (MAXNAMLEN+1)) + (((dp)->d_namlen+1 + 3) &~ 3)))
#else
#define DIRSIZ(oldfmt, dp) \
    ((sizeof(struct direct) - (MAXNAMLEN+1)) + (((dp)->d_namlen+1 + 3) &~ 3))
#endif
#define OLDDIRFMT	1
#define NEWDIRFMT	0

/*
 * Template for manipulating directories.  Should use struct direct's,
 * but the name field is MAXNAMLEN - 1, and this just won't do.
 */
struct dirtemplate {
	u_int32_t	dot_ino;
	int16_t		dot_reclen;
	u_int8_t	dot_type;
	u_int8_t	dot_namlen;
	char		dot_name[4];	/* must be multiple of 4 */
	u_int32_t	dotdot_ino;
	int16_t		dotdot_reclen;
	u_int8_t	dotdot_type;
	u_int8_t	dotdot_namlen;
	char		dotdot_name[4];	/* ditto */
};

/*
 * This is the old format of directories, sanz type element.
 */
struct odirtemplate {
	u_int32_t	dot_ino;
	int16_t		dot_reclen;
	u_int16_t	dot_namlen;
	char		dot_name[4];	/* must be multiple of 4 */
	u_int32_t	dotdot_ino;
	int16_t		dotdot_reclen;
	u_int16_t	dotdot_namlen;
	char		dotdot_name[4];	/* ditto */
};
#endif /* !_DIR_H_ */
@


1.10
log
@Remove remaining whiteout tentacles; OK deraadt@@ miod@@ weingart@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.9 2003/12/28 17:20:16 tedu Exp $	*/
d112 1
a112 1
	(((int)&((struct direct *)0)->d_name +				\
@


1.9
log
@add ian dowse's dirhash code from freebsd.
by building a hash table for large directories, lookups and deletions
become about constant time.  this is an excellent improvement for dirs with
10k or more files.
some more cleanup to come, but the code works.
enabled with option UFS_DIRHASH
testing brad millert otto
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.8 2003/06/02 23:28:23 millert Exp $	*/
a97 1
#define	DT_WHT		14
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.7 1999/11/26 16:23:28 art Exp $	*/
d112 3
@


1.7
log
@Yet another useless indentation fix (I don't like 'M' in my cvs updates).
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.6 1997/05/30 08:34:56 downsj Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7.2.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.7 1999/11/26 16:23:28 art Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.7.2.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a111 3
#define DIRECTSIZ(namlen)						\
	(((int)&((struct direct *)0)->d_name +				\
	  ((namlen)+1)*sizeof(((struct direct *)0)->d_name[0]) + 3) & ~3)
@


1.6
log
@Integrate new ext2fs, reverting ufs support for the old one.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.2 1996/04/19 16:10:44 niklas Exp $	*/
d51 1
a51 1
*/
@


1.5
log
@Moving some things around; struct inode still ends up bigger, though.
This should, hopefully, be the last UFS changes required.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.4 1996/06/24 23:16:01 tholo Exp $	*/
a157 40

#ifdef _KERNEL
/*
 * For lack of a better place...
 *
 * This structure defines a set of function pointers, for managing rouge
 * ufs-like filesystems in vnop code.  Most have to do with directories.
 */

struct componentname;
struct vnode;
struct inode;
struct ucred;
struct ufs_dirops {
	int (*dirremove) __P((struct vnode *, struct componentname *));
	int (*direnter) __P((struct inode *, struct vnode *,
				struct componentname *));
	int (*dirempty) __P((struct inode *, ino_t, struct ucred *));
	int (*dirrewrite) __P((struct inode *, struct inode *,
				struct componentname *));
	int (*checkpath) __P((struct inode *, struct inode *,
				struct ucred *));
};

/*
 * Macros for accessing the above.
 */
#define VN_DIRREMOVE(vn, cm) \
	VFSTOUFS(vn->v_mount)->um_dirops->dirremove(vn, cm)
#define VN_DIRENTER(in, vn, cm) \
	VFSTOUFS(vn->v_mount)->um_dirops->direnter(in, vn, cm)
#define VN_DIREMPTY(vn, in, it, uc) \
	VFSTOUFS(vn->v_mount)->um_dirops->dirempty(in, it, uc)
#define VN_DIRREWRITE(vn, in1, in2, cm) \
	VFSTOUFS(vn->v_mount)->um_dirops->dirrewrite(in1, in2, cm)
#define VN_CHECKPATH(vn, in1, in2, uc) \
	VFSTOUFS(vn->v_mount)->um_dirops->checkpath(in1, in2, uc)

#endif /* _KERNEL */

@


1.4
log
@ufs_dirops only needed when compiling with _KERNEL
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.3 1996/06/24 03:35:03 downsj Exp $	*/
d181 15
@


1.3
log
@ufs changes: add the notion of directory operators.

gnu/ext2fs: add the second extended filesystem.

Note that I'm commiting this now for the sake of the ufs changes; ext2fs
is not yet fully integrated into the system.
@
text
@d1 1
a1 1
/*	$OpenBSD: dir.h,v 1.2 1996/04/19 16:10:44 niklas Exp $	*/
d159 1
d167 2
d170 1
d181 1
@


1.2
log
@NetBSD 960317 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d158 20
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: dir.h,v 1.6 1995/06/15 23:22:49 cgd Exp $	*/
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
