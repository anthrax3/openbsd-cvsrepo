head	1.50;
access;
symbols
	OPENBSD_6_2_BASE:1.50
	OPENBSD_6_1:1.50.0.6
	OPENBSD_6_1_BASE:1.50
	OPENBSD_6_0:1.50.0.2
	OPENBSD_6_0_BASE:1.50
	OPENBSD_5_9:1.49.0.6
	OPENBSD_5_9_BASE:1.49
	OPENBSD_5_8:1.49.0.8
	OPENBSD_5_8_BASE:1.49
	OPENBSD_5_7:1.49.0.2
	OPENBSD_5_7_BASE:1.49
	OPENBSD_5_6:1.49.0.4
	OPENBSD_5_6_BASE:1.49
	OPENBSD_5_5:1.42.0.4
	OPENBSD_5_5_BASE:1.42
	OPENBSD_5_4:1.40.0.2
	OPENBSD_5_4_BASE:1.40
	OPENBSD_5_3:1.38.0.10
	OPENBSD_5_3_BASE:1.38
	OPENBSD_5_2:1.38.0.8
	OPENBSD_5_2_BASE:1.38
	OPENBSD_5_1_BASE:1.38
	OPENBSD_5_1:1.38.0.6
	OPENBSD_5_0:1.38.0.4
	OPENBSD_5_0_BASE:1.38
	OPENBSD_4_9:1.38.0.2
	OPENBSD_4_9_BASE:1.38
	OPENBSD_4_8:1.37.0.8
	OPENBSD_4_8_BASE:1.37
	OPENBSD_4_7:1.37.0.4
	OPENBSD_4_7_BASE:1.37
	OPENBSD_4_6:1.37.0.6
	OPENBSD_4_6_BASE:1.37
	OPENBSD_4_5:1.37.0.2
	OPENBSD_4_5_BASE:1.37
	OPENBSD_4_4:1.36.0.4
	OPENBSD_4_4_BASE:1.36
	OPENBSD_4_3:1.36.0.2
	OPENBSD_4_3_BASE:1.36
	OPENBSD_4_2:1.35.0.2
	OPENBSD_4_2_BASE:1.35
	OPENBSD_4_1:1.34.0.2
	OPENBSD_4_1_BASE:1.34
	OPENBSD_4_0:1.33.0.2
	OPENBSD_4_0_BASE:1.33
	OPENBSD_3_9:1.32.0.2
	OPENBSD_3_9_BASE:1.32
	OPENBSD_3_8:1.27.0.6
	OPENBSD_3_8_BASE:1.27
	OPENBSD_3_7:1.27.0.4
	OPENBSD_3_7_BASE:1.27
	OPENBSD_3_6:1.27.0.2
	OPENBSD_3_6_BASE:1.27
	SMP_SYNC_A:1.25
	SMP_SYNC_B:1.25
	OPENBSD_3_5:1.25.0.2
	OPENBSD_3_5_BASE:1.25
	OPENBSD_3_4:1.23.0.2
	OPENBSD_3_4_BASE:1.23
	UBC_SYNC_A:1.20
	OPENBSD_3_3:1.20.0.4
	OPENBSD_3_3_BASE:1.20
	OPENBSD_3_2:1.20.0.2
	OPENBSD_3_2_BASE:1.20
	OPENBSD_3_1:1.19.0.2
	OPENBSD_3_1_BASE:1.19
	UBC_SYNC_B:1.20
	UBC:1.18.0.2
	UBC_BASE:1.18
	OPENBSD_3_0:1.16.0.2
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_8:1.11.0.8
	OPENBSD_2_8_BASE:1.11
	OPENBSD_2_7:1.11.0.6
	OPENBSD_2_7_BASE:1.11
	SMP:1.11.0.4
	SMP_BASE:1.11
	kame_19991208:1.11
	OPENBSD_2_6:1.11.0.2
	OPENBSD_2_6_BASE:1.11
	OPENBSD_2_5:1.10.0.6
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.10.0.4
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.10.0.2
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.8.0.2
	OPENBSD_2_2_BASE:1.8
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.50
date	2016.06.19.11.54.34;	author natano;	state Exp;
branches;
next	1.49;
commitid	wHLNY5GFNXJSFYaC;

1.49
date	2014.07.14.08.54.13;	author pelikan;	state Exp;
branches;
next	1.48;
commitid	5pxoUiNNvSjZa1j9;

1.48
date	2014.07.13.13.28.26;	author pelikan;	state Exp;
branches;
next	1.47;
commitid	dOiPqBMzR47FMb48;

1.47
date	2014.07.11.12.08.21;	author pelikan;	state Exp;
branches;
next	1.46;
commitid	xTkX7KC9qvI2SOnE;

1.46
date	2014.07.10.09.24.18;	author pelikan;	state Exp;
branches;
next	1.45;
commitid	qkMPClqJrQ3Iamib;

1.45
date	2014.05.07.02.57.41;	author guenther;	state Exp;
branches;
next	1.44;

1.44
date	2014.04.14.22.25.40;	author beck;	state Exp;
branches;
next	1.43;

1.43
date	2014.03.19.04.17.33;	author guenther;	state Exp;
branches;
next	1.42;

1.42
date	2014.01.26.02.02.26;	author tedu;	state Exp;
branches;
next	1.41;

1.41
date	2014.01.25.23.31.13;	author guenther;	state Exp;
branches;
next	1.40;

1.40
date	2013.06.11.16.42.19;	author deraadt;	state Exp;
branches;
next	1.39;

1.39
date	2013.05.30.19.19.09;	author guenther;	state Exp;
branches;
next	1.38;

1.38
date	2010.08.20.22.29.52;	author matthew;	state Exp;
branches;
next	1.37;

1.37
date	2009.01.17.18.50.25;	author grange;	state Exp;
branches;
next	1.36;

1.36
date	2008.01.05.19.49.26;	author otto;	state Exp;
branches;
next	1.35;

1.35
date	2007.06.02.00.45.50;	author pedro;	state Exp;
branches;
next	1.34;

1.34
date	2006.10.29.00.53.37;	author thib;	state Exp;
branches;
next	1.33;

1.33
date	2006.06.14.20.01.50;	author sturm;	state Exp;
branches;
next	1.32;

1.32
date	2005.12.28.20.48.18;	author pedro;	state Exp;
branches;
next	1.31;

1.31
date	2005.12.19.15.18.02;	author pedro;	state Exp;
branches;
next	1.30;

1.30
date	2005.12.17.13.56.01;	author pedro;	state Exp;
branches;
next	1.29;

1.29
date	2005.12.11.20.46.28;	author pedro;	state Exp;
branches;
next	1.28;

1.28
date	2005.10.06.17.43.14;	author pedro;	state Exp;
branches;
next	1.27;

1.27
date	2004.07.13.21.04.29;	author millert;	state Exp;
branches;
next	1.26;

1.26
date	2004.06.21.23.50.38;	author tholo;	state Exp;
branches;
next	1.25;

1.25
date	2004.01.20.03.44.06;	author tedu;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.28.17.20.16;	author tedu;	state Exp;
branches;
next	1.23;

1.23
date	2003.08.25.23.26.55;	author tedu;	state Exp;
branches;
next	1.22;

1.22
date	2003.06.02.23.28.23;	author millert;	state Exp;
branches;
next	1.21;

1.21
date	2003.05.26.18.33.17;	author tedu;	state Exp;
branches;
next	1.20;

1.20
date	2002.06.06.20.57.47;	author aaron;	state Exp;
branches;
next	1.19;

1.19
date	2001.12.19.08.58.07;	author art;	state Exp;
branches;
next	1.18;

1.18
date	2001.12.10.04.45.32;	author art;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2001.11.27.05.27.12;	author art;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.04.06.10.50;	author angelos;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.23.02.07.56;	author csapuntz;	state Exp;
branches;
next	1.14;

1.14
date	2001.02.24.10.37.09;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2001.02.23.14.42.39;	author csapuntz;	state Exp;
branches;
next	1.12;

1.12
date	2001.02.21.23.24.31;	author csapuntz;	state Exp;
branches;
next	1.11;

1.11
date	99.09.10.23.39.10;	author art;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	97.11.09.22.14.06;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	97.11.06.05.59.25;	author csapuntz;	state Exp;
branches;
next	1.8;

1.8
date	97.10.06.20.21.44;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	97.10.06.15.27.36;	author csapuntz;	state Exp;
branches;
next	1.6;

1.6
date	97.05.30.15.18.49;	author downsj;	state Exp;
branches;
next	1.5;

1.5
date	97.05.30.08.34.59;	author downsj;	state Exp;
branches;
next	1.4;

1.4
date	96.06.27.06.42.08;	author downsj;	state Exp;
branches;
next	1.3;

1.3
date	96.06.24.10.23.22;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.06.24.03.35.03;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.35;	author deraadt;	state Exp;
branches;
next	;

1.11.4.1
date	2001.05.14.22.47.43;	author niklas;	state Exp;
branches;
next	1.11.4.2;

1.11.4.2
date	2001.07.04.11.00.55;	author niklas;	state Exp;
branches;
next	1.11.4.3;

1.11.4.3
date	2001.10.31.03.32.14;	author nate;	state Exp;
branches;
next	1.11.4.4;

1.11.4.4
date	2001.12.05.01.02.41;	author niklas;	state Exp;
branches;
next	1.11.4.5;

1.11.4.5
date	2002.03.06.02.17.14;	author niklas;	state Exp;
branches;
next	1.11.4.6;

1.11.4.6
date	2003.03.28.00.08.47;	author niklas;	state Exp;
branches;
next	1.11.4.7;

1.11.4.7
date	2003.06.07.11.09.09;	author ho;	state Exp;
branches;
next	1.11.4.8;

1.11.4.8
date	2004.02.19.11.01.42;	author niklas;	state Exp;
branches;
next	;

1.18.2.1
date	2002.06.11.03.32.50;	author art;	state Exp;
branches;
next	1.18.2.2;

1.18.2.2
date	2002.11.04.18.02.32;	author art;	state Exp;
branches;
next	1.18.2.3;

1.18.2.3
date	2003.05.20.04.18.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.50
log
@Remove the lockmgr() API. It is only used by filesystems, where it is a
trivial change to use rrw locks instead. All it needs is LK_* defines
for the RW_* flags.

tested by naddy and sthen on package building infrastructure
input and ok jmc mpi tedu
@
text
@/*	$OpenBSD: inode.h,v 1.49 2014/07/14 08:54:13 pelikan Exp $	*/
/*	$NetBSD: inode.h,v 1.8 1995/06/15 23:22:50 cgd Exp $	*/

/*
 * Copyright (c) 1982, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 * (c) UNIX System Laboratories, Inc.
 * All or some portions of this file are derived from material licensed
 * to the University of California by American Telephone and Telegraph
 * Co. or Unix System Laboratories, Inc. and are reproduced herein with
 * the permission of UNIX System Laboratories, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)inode.h	8.5 (Berkeley) 7/8/94
 */

#include <sys/buf.h>
#include <sys/lock.h>
#include <ufs/ufs/dinode.h>
#include <ufs/ufs/dir.h>
#include <ufs/ext2fs/ext2fs_dinode.h>
#include <ufs/ext2fs/ext2fs_extents.h>


/*
 * Per-filesystem inode extensions.
 */
struct ext2fs_inode_ext {
	u_int32_t	ext2fs_last_lblk;	/* last logical blk allocated */
	u_int32_t	ext2fs_last_blk;	/* last blk allocated on disk */
	u_int32_t	ext2fs_effective_uid;	/* effective inode uid */
	u_int32_t	ext2fs_effective_gid;	/* effective inode gid */
	struct ext4_extent_cache	ext2fs_extent_cache;
};

/*
 * The inode is used to describe each active (or recently active) file in the
 * UFS filesystem. It is composed of two types of information. The first part
 * is the information that is needed only while the file is active (such as
 * the identity of the file and linkage to speed its lookup). The second part
 * is * the permanent meta-data associated with the file which is read in
 * from the permanent dinode from long term storage when the file becomes
 * active, and is put back when the file is no longer being used.
 */
struct inode {
	LIST_ENTRY(inode) i_hash; /* Hash chain */
	struct	vnode  *i_vnode;/* Vnode associated with this inode. */
	struct	ufsmount *i_ump;
	u_int32_t i_flag;	/* flags, see below */
	dev_t	  i_dev;	/* Device associated with the inode. */
	ufsino_t  i_number;	/* The identity of the inode. */
	int       i_effnlink;   /* i_nlink when I/O completes */

	union {			/* Associated filesystem. */
		struct	fs *fs;			/* FFS */
		struct  m_ext2fs *e2fs;		/* EXT2FS */
	} inode_u;

#define	i_fs	inode_u.fs
#define	i_e2fs	inode_u.e2fs

	struct   cluster_info i_ci;
	struct	 dquot *i_dquot[MAXQUOTAS]; /* Dquot structures. */
	u_quad_t i_modrev;	/* Revision level for NFS lease. */
	struct	 lockf *i_lockf;/* Head of byte-level lock list. */
	struct   rrwlock i_lock;/* Inode lock */

	/*
	 * Side effects; used during directory lookup.
	 */
	int32_t	  i_count;	/* Size of free slot in directory. */
	doff_t	  i_endoff;	/* End of useful stuff in directory. */
	doff_t	  i_diroff;	/* Offset in dir, where we found last entry. */
	doff_t	  i_offset;	/* Offset of free space in directory. */
	ufsino_t  i_ino;	/* Inode number of found directory. */
	u_int32_t i_reclen;	/* Size of found directory entry. */
	/*
	 * Inode extensions
	 */
	union {
		/* Other extensions could go here... */
		struct ext2fs_inode_ext   e2fs;
		struct dirhash *dirhash;
	} inode_ext;

#define i_e2fs_last_lblk	inode_ext.e2fs.ext2fs_last_lblk
#define i_e2fs_last_blk		inode_ext.e2fs.ext2fs_last_blk
#define i_e2fs_uid		inode_ext.e2fs.ext2fs_effective_uid
#define i_e2fs_gid		inode_ext.e2fs.ext2fs_effective_gid
#define i_e2fs_ext_cache	inode_ext.e2fs.ext2fs_extent_cache
#define	i_dirhash		inode_ext.dirhash

	/*
	 * The on-disk dinode itself.
	 */
	union {
		struct ufs1_dinode     *ffs1_din;
		struct ufs2_dinode     *ffs2_din;
		struct ext2fs_dinode   *e2fs_din;
	} dinode_u;

#define i_din1	dinode_u.ffs1_din
#define i_din2	dinode_u.ffs2_din
#define	i_e2din	dinode_u.e2fs_din

	struct inode_vtbl *i_vtbl;
};

struct inode_vtbl {
	int (* iv_truncate)(struct inode *, off_t, int, 
	    struct ucred *);
	int (* iv_update)(struct inode *, int waitfor);
	int (* iv_inode_alloc)(struct inode *, mode_t mode, 
	    struct ucred *, struct vnode **);
	int (* iv_inode_free)(struct inode *, ufsino_t ino, mode_t mode);
	int (* iv_buf_alloc)(struct inode *, off_t, int, struct ucred *,
	    int, struct buf **);
	int (* iv_bufatoff)(struct inode *, off_t offset, char **res,
	    struct buf **bpp);
};

#define UFS_TRUNCATE(ip, off, flags, cred) \
    ((ip)->i_vtbl->iv_truncate)((ip), (off), (flags), (cred))

#define UFS_UPDATE(ip, sync) \
    ((ip)->i_vtbl->iv_update)((ip), (sync))

#define UFS_INODE_ALLOC(pip, mode, cred, vpp) \
    ((pip)->i_vtbl->iv_inode_alloc)((pip), (mode), (cred), (vpp))

#define UFS_INODE_FREE(pip, ino, mode) \
    ((pip)->i_vtbl->iv_inode_free)((pip), (ino), (mode))

#define UFS_BUF_ALLOC(ip, startoffset, size, cred, flags, bpp) \
    ((ip)->i_vtbl->iv_buf_alloc)((ip), (startoffset), (size), (cred), \
        (flags), (bpp))
 
#define UFS_BUFATOFF(ip, offset, res, bpp) \
    ((ip)->i_vtbl->iv_bufatoff)((ip), (offset), (res), (bpp))

#define	i_ffs1_atime		i_din1->di_atime
#define	i_ffs1_atimensec	i_din1->di_atimensec
#define	i_ffs1_blocks		i_din1->di_blocks
#define	i_ffs1_ctime		i_din1->di_ctime
#define	i_ffs1_ctimensec	i_din1->di_ctimensec
#define	i_ffs1_db		i_din1->di_db
#define	i_ffs1_flags		i_din1->di_flags
#define	i_ffs1_gen		i_din1->di_gen
#define	i_ffs1_gid		i_din1->di_gid
#define	i_ffs1_ib		i_din1->di_ib
#define	i_ffs1_mode		i_din1->di_mode
#define	i_ffs1_mtime		i_din1->di_mtime
#define	i_ffs1_mtimensec	i_din1->di_mtimensec
#define	i_ffs1_nlink		i_din1->di_nlink
#define	i_ffs1_rdev		i_din1->di_rdev
#define	i_ffs1_shortlink	i_din1->di_shortlink
#define	i_ffs1_size		i_din1->di_size
#define	i_ffs1_uid		i_din1->di_uid

#define	i_ffs2_atime		i_din2->di_atime
#define	i_ffs2_atimensec	i_din2->di_atimensec
#define	i_ffs2_blocks		i_din2->di_blocks
#define	i_ffs2_blksize		i_din2->di_blksize
#define	i_ffs2_ctime		i_din2->di_ctime
#define	i_ffs2_ctimensec	i_din2->di_ctimensec
#define	i_ffs2_db		i_din2->di_db
#define	i_ffs2_flags		i_din2->di_flags
#define	i_ffs2_gen		i_din2->di_gen
#define	i_ffs2_gid		i_din2->di_gid
#define	i_ffs2_ib		i_din2->di_ib
#define	i_ffs2_mode		i_din2->di_mode
#define	i_ffs2_mtime		i_din2->di_mtime
#define	i_ffs2_mtimensec	i_din2->di_mtimensec
#define	i_ffs2_nlink		i_din2->di_nlink
#define	i_ffs2_rdev		i_din2->di_rdev
#define	i_ffs2_size		i_din2->di_size
#define	i_ffs2_uid		i_din2->di_uid

#ifndef _KERNEL
/*
 * These are here purely for backwards compatibility for userland.
 * They allow direct references to FFS structures using the old names.
 */
#define	i_atime			i_din1->di_atime
#define	i_atimensec		i_din1->di_atimensec
#define	i_blocks		i_din1->di_blocks
#define	i_ctime			i_din1->di_ctime
#define	i_ctimensec		i_din1->di_ctimensec
#define	i_db			i_din1->di_db
#define	i_flags			i_din1->di_flags
#define	i_gen			i_din1->di_gen
#define	i_gid			i_din1->di_gid
#define	i_ib			i_din1->di_ib
#define	i_mode			i_din1->di_mode
#define	i_mtime			i_din1->di_mtime
#define	i_mtimensec		i_din1->di_mtimensec
#define	i_nlink			i_din1->di_nlink
#define	i_rdev			i_din1->di_rdev
#define	i_shortlink		i_din1->di_shortlink
#define	i_size			i_din1->di_size
#define	i_uid			i_din1->di_uid
#endif	/* _KERNEL */

#define i_e2fs_mode		i_e2din->e2di_mode
#define i_e2fs_size		i_e2din->e2di_size
#define i_e2fs_atime		i_e2din->e2di_atime
#define i_e2fs_ctime		i_e2din->e2di_ctime
#define i_e2fs_mtime		i_e2din->e2di_mtime
#define i_e2fs_dtime		i_e2din->e2di_dtime
#define i_e2fs_nlink		i_e2din->e2di_nlink
#define i_e2fs_nblock		i_e2din->e2di_nblock
#define i_e2fs_flags		i_e2din->e2di_flags
#define i_e2fs_blocks		i_e2din->e2di_blocks
#define i_e2fs_gen		i_e2din->e2di_gen
#define i_e2fs_facl		i_e2din->e2di_facl
#define i_e2fs_size_hi		i_e2din->e2di_size_hi
#define i_e2fs_faddr		i_e2din->e2di_faddr
#define i_e2fs_nblock_hi	i_e2din->e2di_nblock_hi
#define i_e2fs_faddr_hi		i_e2din->e2di_faddr_hi
#define i_e2fs_uid_low		i_e2din->e2di_uid_low
#define i_e2fs_gid_low		i_e2din->e2di_gid_low
#define i_e2fs_uid_high		i_e2din->e2di_uid_high
#define i_e2fs_gid_high		i_e2din->e2di_gid_high

/* These flags are kept in i_flag. */
#define	IN_ACCESS	0x0001		/* Access time update request. */
#define	IN_CHANGE	0x0002		/* Inode change time update request. */
#define IN_UPDATE       0x0004          /* Modification time update request */
#define	IN_MODIFIED	0x0008		/* Inode has been modified. */
#define	IN_RENAME	0x0010		/* Inode is being renamed. */
#define IN_SHLOCK       0x0020          /* File has shared lock. */
#define	IN_EXLOCK	0x0040		/* File has exclusive lock. */
#define	IN_LAZYMOD	0x0080		/* Modified, but don't write yet. */
#define	IN_HASHED	0x0100		/* Inode is on the hash chain */

#define	i_devvp i_ump->um_devvp

#ifdef _KERNEL

/*
 * The DIP macros are used to access fields in the dinode.
 */

#ifdef FFS2
#define DIP(ip, field) \
	(((ip)->i_ump->um_fstype == UM_UFS1) ? \
	(ip)->i_ffs1_##field : (ip)->i_ffs2_##field)
#else
#define DIP(ip, field) \
	((ip)->i_ffs1_##field)
#endif

#ifdef FFS2
#define DIP_OP(ip, field, op, value)					\
	do {								\
		if ((ip)->i_ump->um_fstype == UM_UFS1)			\
			(ip)->i_ffs1_##field op (value);		\
		else							\
			(ip)->i_ffs2_##field op (value);		\
	} while (0)
#else
#define DIP_OP(ip, field, op, value)					\
	do {								\
		(ip)->i_ffs1_##field op (value);			\
	} while (0)
#endif

#define DIP_ASSIGN(ip, field, value)	DIP_OP(ip, field, =, value)
#define DIP_ADD(ip, field, value)	DIP_OP(ip, field, +=, value)
#define DIP_AND(ip, field, value)	DIP_OP(ip, field, &=, value)
#define DIP_OR(ip, field, value)	DIP_OP(ip, field, |=, value)

#ifdef FFS2
#define SHORTLINK(ip) \
	(((ip)->i_ump->um_fstype == UM_UFS1) ? \
	(caddr_t)(ip)->i_ffs1_db : (caddr_t)(ip)->i_ffs2_db)
#else
#define SHORTLINK(ip) \
	((caddr_t)(ip)->i_ffs1_db)
#endif

/*
 * Structure used to pass around logical block paths generated by
 * ufs_getlbns and used by truncate and bmap code.
 */
struct indir {
	daddr_t in_lbn;		/* Logical block number. */
	int	in_off;			/* Offset in buffer. */
	int	in_exists;		/* Flag if the block exists. */
};

/* Convert between inode pointers and vnode pointers. */
#define	VTOI(vp)	((struct inode *)(vp)->v_data)
#define	ITOV(ip)	((ip)->i_vnode)

#define	EXT2FS_ITIMES(ip) do {						\
	if ((ip)->i_flag & (IN_ACCESS | IN_CHANGE | IN_UPDATE)) {	\
		(ip)->i_flag |= IN_MODIFIED;				\
		if ((ip)->i_flag & IN_ACCESS)				\
			(ip)->i_e2fs_atime = time_second;		\
		if ((ip)->i_flag & IN_UPDATE)				\
			(ip)->i_e2fs_mtime = time_second;		\
		if ((ip)->i_flag & IN_CHANGE) {				\
			(ip)->i_e2fs_ctime = time_second;		\
			(ip)->i_modrev++;				\
		}							\
		(ip)->i_flag &= ~(IN_ACCESS | IN_CHANGE | IN_UPDATE);	\
	}								\
} while (0)

/* Determine if soft dependencies are being done */
#ifdef FFS_SOFTUPDATES
#define DOINGSOFTDEP(vp)      ((vp)->v_mount->mnt_flag & MNT_SOFTDEP)
#else
#define DOINGSOFTDEP(vp)      (0)
#endif
#define DOINGASYNC(vp)        ((vp)->v_mount->mnt_flag & MNT_ASYNC)

/* This overlays the fid structure (see mount.h). */
struct ufid {
	u_int16_t ufid_len;	/* Length of structure. */
	u_int16_t ufid_pad;	/* Force 32-bit alignment. */
	ufsino_t  ufid_ino;	/* File number (ino). */
	int32_t	  ufid_gen;	/* Generation number. */
};
#endif /* _KERNEL */
@


1.49
log
@better type safety and KNF.

Because ext2fs has only 32-bit inode numbers, use ufsino_t as in FFS.
Disk blocks are u_int32_t as well, because we don't support the 64BIT flag.
When we do, there's going to be a lot more going on than just daddr_t.

While there, add some journaling-related bits into the superblock to play with.

ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.48 2014/07/13 13:28:26 pelikan Exp $	*/
d89 1
a89 1
	struct   lock i_lock;   /* Inode lock */
@


1.48
log
@ext4 (extents) read support

Tested on amd64 with > 4GB files and 50,000 subdirectories.
From FreeBSD, thanks!

ok deraadt guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.47 2014/07/11 12:08:21 pelikan Exp $	*/
d52 2
a53 2
	int32_t	ext2fs_last_lblk;	/* last logical block allocated */
	int32_t	ext2fs_last_blk;	/* last block allocated on disk */
@


1.47
log
@updated inode format, whitespace, re-formatting
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.46 2014/07/10 09:24:18 pelikan Exp $	*/
d45 1
d52 5
a56 4
       int32_t	ext2fs_last_lblk; /* last logical block allocated */
       int32_t	ext2fs_last_blk; /* last block allocated on disk */
       u_int32_t	ext2fs_effective_uid; /* effective inode uid */
       u_int32_t	ext2fs_effective_gid; /* effective inode gid */
d113 1
@


1.46
log
@prepare for upcoming ext4 read support

Parts of the on-disk inode changed their meaning in order to support bigger
sizes.  More flags & prettification.  No functional change.

ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.45 2014/05/07 02:57:41 guenther Exp $	*/
d236 1
a236 1
#define i_e2fs_dacl		i_e2din->e2di_dacl
@


1.45
log
@Fix ext2fs atime and mtime handling that I broke from an airport
lounge after n2k14.

Prototype patch from zhuk@@
ok zhuk@@ krw@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.44 2014/04/14 22:25:40 beck Exp $	*/
d238 2
a239 2
#define i_e2fs_nfrag		i_e2din->e2di_nfrag
#define i_e2fs_fsize		i_e2din->e2di_fsize
@


1.44
log
@fix potential race where an allocated inode could fail to get added,
noticed by pedro@@ in bitrig.
ok philip@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.43 2014/03/19 04:17:33 guenther Exp $	*/
d319 5
a323 1
		if ((ip)->i_flag & IN_CHANGE)				\
d325 2
@


1.43
log
@Pull in FreeBSD r37363 and r37887:
--
Sync timestamp changes for inodes of special files to disk as late
as possible (when the inode is reclaimed).  Temporarily only do
this if option UFS_LAZYMOD configured and softupdates aren't enabled.
UFS_LAZYMOD is intentionally left out of /sys/conf/options.

This is mainly to avoid almost useless disk i/o on battery powered
machines.  It's silly to write to disk (on the next sync or when the
inode becomes inactive) just because someone hit a key or something
wrote to the screen or /dev/null.
--
Made lazy syncing of timestamps for special files non-optional.
--

Also, include support in 'pstat -v' to display the IN_LAZYMOD flag.

ok tedu@@ millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.42 2014/01/26 02:02:26 tedu Exp $	*/
d254 1
@


1.42
log
@an EXT2FS_ITIMES macro so the tree builds. it may even work.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.41 2014/01/25 23:31:13 guenther Exp $	*/
d253 1
@


1.41
log
@ufs_setattr() was assuming that the flag bits that indicate
atime/mtime/ctime need to be updated weren't already set.  When
they are, the code will end up treating the VNOVAL value from the
VFS layer as a time_t.  Port the fix from FreeBSD: the critical bit
is to process the existing flag values before possibly setting them
again in ufs_setattr().  This diff pulls in a larger change from
FreeBSD to replace the macro ITIMES() with a function ufs_itimes()
and to remove the atime and mtime arguments from ffs_update(): only
ufs_setattr() used them so it makes more sense to just do the those
bits directly there.

tweaks and ok tedu@@ matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.40 2013/06/11 16:42:19 deraadt Exp $	*/
d313 9
@


1.40
log
@final removal of daddr64_t.  daddr_t has been 64 bit for a long enough
test period; i think 3 years ago the last bugs fell out.
ok otto beck others
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.39 2013/05/30 19:19:09 guenther Exp $	*/
d132 1
a132 2
	int (* iv_update)(struct inode *, struct timespec *, struct timespec *,
	    int waitfor);
d146 1
a146 4
    ((ip)->i_vtbl->iv_update)((ip), NULL, NULL, (sync))

#define UFS_UPDATE2(ip, atime, mtime, sync) \
    ((ip)->i_vtbl->iv_update)((ip), (atime), (mtime), (sync))
a312 38

#define	FFS_ITIMES(ip, t1, t2) {					\
	if ((ip)->i_flag & (IN_ACCESS | IN_CHANGE | IN_UPDATE)) {	\
		(ip)->i_flag |= IN_MODIFIED;				\
		if ((ip)->i_flag & IN_ACCESS)				\
			DIP_ASSIGN((ip), atime, (t1)->tv_sec);		\
		if ((ip)->i_flag & IN_UPDATE) {				\
			DIP_ASSIGN((ip), mtime, (t2)->tv_sec);		\
			(ip)->i_modrev++;				\
		}							\
		if ((ip)->i_flag & IN_CHANGE)				\
			DIP_ASSIGN((ip), ctime, time_second);		\
		(ip)->i_flag &= ~(IN_ACCESS | IN_CHANGE | IN_UPDATE);	\
	}								\
}

#define	EXT2FS_ITIMES(ip, t1, t2) {					\
	if ((ip)->i_flag & (IN_ACCESS | IN_CHANGE | IN_UPDATE)) {	\
		(ip)->i_flag |= IN_MODIFIED;				\
		if ((ip)->i_flag & IN_ACCESS)				\
			(ip)->i_e2fs_atime = (t1)->tv_sec;		\
		if ((ip)->i_flag & IN_UPDATE) {				\
			(ip)->i_e2fs_mtime = (t2)->tv_sec;		\
			(ip)->i_modrev++;				\
		}							\
		if ((ip)->i_flag & IN_CHANGE)				\
			(ip)->i_e2fs_ctime = time_second;		\
		(ip)->i_flag &= ~(IN_ACCESS | IN_CHANGE | IN_UPDATE);	\
	}								\
}

#define ITIMES(ip, t1, t2) {						\
	if (IS_EXT2_VNODE((ip)->i_vnode)) {				\
		EXT2FS_ITIMES(ip, t1, t2);				\
	} else {							\
		FFS_ITIMES(ip, t1, t2);					\
	}								\
}
@


1.39
log
@UFS does't do inode numbers >2^32, so use a smaller type internally,
only using ino_t in the VFS layer APIs: vget, readdir, getattr.

otto wrote the original diff for libsa to keep bootblock from overflowing
ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.38 2010/08/20 22:29:52 matthew Exp $	*/
d309 1
a309 1
	daddr64_t in_lbn;		/* Logical block number. */
@


1.38
log
@Change the UFS DIP macros to be aware of the FFS2 kernel option by not
bothering to check the mount type when FFS2 support is omitted.

ok krw@@, jasper@@; "i like it" tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.37 2009/01/17 18:50:25 grange Exp $	*/
d46 1
d72 1
a72 1
	ino_t	  i_number;	/* The identity of the inode. */
d96 1
a96 1
	ino_t	  i_ino;	/* Inode number of found directory. */
d136 1
a136 1
	int (* iv_inode_free)(struct inode *, ino_t ino, mode_t mode);
d368 1
a368 1
	ino_t	  ufid_ino;	/* File number (ino). */
@


1.37
log
@Use proper assignment macros for dinode manipulations instead of
abusing the DIP() macro which is an rvalue and can't be used
as an lvalue. No functional changes.

ok tedu@@ pedro@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.36 2008/01/05 19:49:26 otto Exp $	*/
d264 2
d269 4
d274 2
a275 1
#define DIP_ASSIGN(ip, field, value)					\
d278 1
a278 1
			(ip)->i_ffs1_##field = (value);			\
d280 1
a280 1
			(ip)->i_ffs2_##field = (value);			\
d282 2
a283 2

#define DIP_ADD(ip, field, value)					\
d285 1
a285 4
		if ((ip)->i_ump->um_fstype == UM_UFS1)			\
			(ip)->i_ffs1_##field += (value);		\
		else							\
			(ip)->i_ffs2_##field += (value);		\
d287 1
d289 4
a292 15
#define DIP_AND(ip, field, value)					\
	do {								\
		if ((ip)->i_ump->um_fstype == UM_UFS1)			\
			(ip)->i_ffs1_##field &= (value);		\
		else							\
			(ip)->i_ffs2_##field &= (value);		\
	} while (0)

#define DIP_OR(ip, field, value)					\
	do {								\
		if ((ip)->i_ump->um_fstype == UM_UFS1)			\
			(ip)->i_ffs1_##field |= (value);		\
		else							\
			(ip)->i_ffs2_##field |= (value);		\
	} while (0)
d294 1
d298 4
@


1.36
log
@Make the ffs code 64-bit disk block number clean.  Based on a diff
from Pedro Martelleto.  Two things remain: the on-disk quota
structures are still 32-bit and statfs does not do 64-bit numbers
yet. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.35 2007/06/02 00:45:50 pedro Exp $	*/
d282 16
@


1.35
log
@ufs1_daddr_t cleanup, okay thib@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.34 2006/10/29 00:53:37 thib Exp $	*/
d293 1
a293 1
	daddr_t in_lbn;			/* Logical block number. */
@


1.34
log
@LFS and FFS shared the same read and write vnops, through
the macro games in ufs_readwrite.c (LFS_READWRITE) now that
LFS has gone, make these functions ffs specific and move them
into ffs/ffs_vnops.c zapping ufs_readwrite.c in the process.
Also, remove lfs fields from the inode and ufsmount structs.

ok toby@@,deraadt@@,pedro@@
testing and ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.33 2006/06/14 20:01:50 sturm Exp $	*/
d50 2
a51 2
       ufs1_daddr_t	ext2fs_last_lblk; /* last logical block allocated */
       ufs1_daddr_t	ext2fs_last_blk; /* last block allocated on disk */
@


1.33
log
@move vfs_busy() to rwlocks and properly hide the locking api from vfs

ok tedu, pedro
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.32 2005/12/28 20:48:18 pedro Exp $	*/
a75 1
		struct	lfs *lfs;		/* LFS */
d80 1
a80 2
#define	i_lfs	inode_u.lfs
#define i_e2fs  inode_u.e2fs
@


1.32
log
@Use the DIP macros to uniformly access fields from UFS1 and UFS2 dinodes.
No functional change, okay tedu@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.31 2005/12/19 15:18:02 pedro Exp $	*/
d41 1
@


1.31
log
@Add and use a few more constants and macros needed by UFS2
No functional change
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.30 2005/12/17 13:56:01 pedro Exp $	*/
d78 1
d165 37
a201 38
#define	i_ffs_atime		i_din1->di_atime
#define	i_ffs_atimensec		i_din1->di_atimensec
#define	i_ffs_blocks		i_din1->di_blocks
#define	i_ffs_ctime		i_din1->di_ctime
#define	i_ffs_ctimensec		i_din1->di_ctimensec
#define	i_ffs_db		i_din1->di_db
#define	i_ffs_flags		i_din1->di_flags
#define	i_ffs_gen		i_din1->di_gen
#define	i_ffs_gid		i_din1->di_gid
#define	i_ffs_ib		i_din1->di_ib
#define	i_ffs_mode		i_din1->di_mode
#define	i_ffs_mtime		i_din1->di_mtime
#define	i_ffs_mtimensec		i_din1->di_mtimensec
#define	i_ffs_nlink		i_din1->di_nlink
#define	i_ffs_rdev		i_din1->di_rdev
#define	i_ffs_shortlink		i_din1->di_shortlink
#define	i_ffs_size		i_din1->di_size
#define	i_ffs_uid		i_din1->di_uid
#define	i_size			i_din1->di_size

#define	i_ffs2_atime		i_din.ffs2_din->di_atime
#define	i_ffs2_atimensec	i_din.ffs2_din->di_atimensec
#define	i_ffs2_blocks		i_din.ffs2_din->di_blocks
#define	i_ffs2_blksize		i_din.ffs2_din->di_blksize
#define	i_ffs2_ctime		i_din.ffs2_din->di_ctime
#define	i_ffs2_ctimensec	i_din.ffs2_din->di_ctimensec
#define	i_ffs2_db		i_din.ffs2_din->di_db
#define	i_ffs2_flags		i_din.ffs2_din->di_flags
#define	i_ffs2_gen		i_din.ffs2_din->di_gen
#define	i_ffs2_gid		i_din.ffs2_din->di_gid
#define	i_ffs2_ib		i_din.ffs2_din->di_ib
#define	i_ffs2_mode		i_din.ffs2_din->di_mode
#define	i_ffs2_mtime		i_din.ffs2_din->di_mtime
#define	i_ffs2_mtimensec	i_din.ffs2_din->di_mtimensec
#define	i_ffs2_nlink		i_din.ffs2_din->di_nlink
#define	i_ffs2_rdev		i_din.ffs2_din->di_rdev
#define	i_ffs2_size		i_din.ffs2_din->di_size
#define	i_ffs2_uid		i_din.ffs2_din->di_uid
d267 1
a267 1
	(ip)->i_din1->d##field : (ip)->i_din2->d##field)
d287 1
a287 1
	(caddr_t)(ip)->i_din1->di_db : (caddr_t)(ip)->i_din2->di_db)
d307 1
a307 1
			(ip)->i_ffs_atime = (t1)->tv_sec;		\
d309 1
a309 1
			(ip)->i_ffs_mtime = (t2)->tv_sec;		\
d313 1
a313 1
			(ip)->i_ffs_ctime = time_second;		\
@


1.30
log
@Remove the 'on disk' inode (dinode) from the 'in memory' inode in UFS.
Instead of having the dinode inside the inode structure itself, we now
have just a pointer to it, and use a separate pool to allocate dinodes
as needed. Inspiration from FreeBSD, various testing for a while, thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.29 2005/12/11 20:46:28 pedro Exp $	*/
a163 1

d182 20
a201 1
#define i_size			i_din1->di_size
d263 1
a263 2
 * The DIP macro is used to access fields in the dinode that are
 * not cached in the inode itself.
d265 1
a265 1
#define	DIP(ip, field) \
d269 17
a285 6
#if 0
#define	MAXSYMLINKLEN(ip) \
	((ip)->i_ump->um_fstype == UM_UFS1) ? \
	((NDADDR + NIADDR) * sizeof(ufs1_daddr_t)) : \
	((NDADDR + NIADDR) * sizeof(ufs2_daddr_t))
#define	SHORTLINK(ip) \
a287 1
#endif
@


1.29
log
@inode/dinode separation for ext2fs
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.28 2005/10/06 17:43:14 pedro Exp $	*/
d116 2
a117 1
		struct ufs1_dinode	ffs1_din;
d121 2
a122 1
#define i_din1 dinode_u.ffs1_din
d165 19
a183 19
#define	i_ffs_atime		i_din1.di_atime
#define	i_ffs_atimensec		i_din1.di_atimensec
#define	i_ffs_blocks		i_din1.di_blocks
#define	i_ffs_ctime		i_din1.di_ctime
#define	i_ffs_ctimensec		i_din1.di_ctimensec
#define	i_ffs_db		i_din1.di_db
#define	i_ffs_flags		i_din1.di_flags
#define	i_ffs_gen		i_din1.di_gen
#define	i_ffs_gid		i_din1.di_gid
#define	i_ffs_ib		i_din1.di_ib
#define	i_ffs_mode		i_din1.di_mode
#define	i_ffs_mtime		i_din1.di_mtime
#define	i_ffs_mtimensec		i_din1.di_mtimensec
#define	i_ffs_nlink		i_din1.di_nlink
#define	i_ffs_rdev		i_din1.di_rdev
#define	i_ffs_shortlink		i_din1.di_shortlink
#define	i_ffs_size		i_din1.di_size
#define	i_ffs_uid		i_din1.di_uid
#define i_size			i_din1.di_size
d190 18
a207 19

#define	i_atime			i_din1.di_atime
#define	i_atimensec		i_din1.di_atimensec
#define	i_blocks		i_din1.di_blocks
#define	i_ctime			i_din1.di_ctime
#define	i_ctimensec		i_din1.di_ctimensec
#define	i_db			i_din1.di_db
#define	i_flags			i_din1.di_flags
#define	i_gen			i_din1.di_gen
#define	i_gid			i_din1.di_gid
#define	i_ib			i_din1.di_ib
#define	i_mode			i_din1.di_mode
#define	i_mtime			i_din1.di_mtime
#define	i_mtimensec		i_din1.di_mtimensec
#define	i_nlink			i_din1.di_nlink
#define	i_rdev			i_din1.di_rdev
#define	i_shortlink		i_din1.di_shortlink
#define	i_size			i_din1.di_size
#define	i_uid			i_din1.di_uid
@


1.28
log
@Use part of the reserved space on the disk inode to scatter 16 more bits
for the UID and GID, making them 32-bit. Based on what Linux does, with
a slightly different implementation. Endianess issue in fsck noted by
miod@@, okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.27 2004/07/13 21:04:29 millert Exp $	*/
d105 1
d116 2
a117 2
		struct ufs1_dinode ffs1_din;
		struct ext2fs_dinode e2fs_din;
d119 1
d209 20
a228 20
#define i_e2fs_mode		i_e2din.e2di_mode
#define i_e2fs_size		i_e2din.e2di_size
#define i_e2fs_atime		i_e2din.e2di_atime
#define i_e2fs_ctime		i_e2din.e2di_ctime
#define i_e2fs_mtime		i_e2din.e2di_mtime
#define i_e2fs_dtime		i_e2din.e2di_dtime
#define i_e2fs_nlink		i_e2din.e2di_nlink
#define i_e2fs_nblock		i_e2din.e2di_nblock
#define i_e2fs_flags		i_e2din.e2di_flags
#define i_e2fs_blocks		i_e2din.e2di_blocks
#define i_e2fs_gen		i_e2din.e2di_gen
#define i_e2fs_facl		i_e2din.e2di_facl
#define i_e2fs_dacl		i_e2din.e2di_dacl
#define i_e2fs_faddr		i_e2din.e2di_faddr
#define i_e2fs_nfrag		i_e2din.e2di_nfrag
#define i_e2fs_fsize		i_e2din.e2di_fsize
#define i_e2fs_uid_low		i_e2din.e2di_uid_low
#define i_e2fs_gid_low		i_e2din.e2di_gid_low
#define i_e2fs_uid_high		i_e2din.e2di_uid_high
#define i_e2fs_gid_high		i_e2din.e2di_gid_high
@


1.27
log
@Change mode_t and nlink_t from 16bit to 32bit.  This allows us to
use mode_t in syscalls.master and to use mode_t in more places in
the kernel.  It also makes lint much more useful on kernel code.

I've also added a placeholder for st_birthtime to make a UFS2 import
easier at some future date.

Requested by and OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.26 2004/06/21 23:50:38 tholo Exp $	*/
d49 4
a52 2
       ufs1_daddr_t ext2fs_last_lblk; /* last logical block allocated */
       ufs1_daddr_t ext2fs_last_blk; /* last block allocated on disk */
d105 5
a109 3
#define i_e2fs_last_lblk inode_ext.e2fs.ext2fs_last_lblk
#define i_e2fs_last_blk inode_ext.e2fs.ext2fs_last_blk
#define	i_dirhash	inode_ext.dirhash
a207 1
#define i_e2fs_uid		i_e2din.e2di_uid
a212 1
#define i_e2fs_gid		i_e2din.e2di_gid
d223 4
@


1.26
log
@First step towards more sane time handling in the kernel -- this changes
things such that code that only need a second-resolution uptime or wall
time, and used to get that from time.tv_secs or mono_time.tv_secs now get
this from separate time_t globals time_second and time_uptime.

ok art@@ niklas@@ nordin@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.25 2004/01/20 03:44:06 tedu Exp $	*/
d125 1
a125 1
	int (* iv_inode_alloc)(struct inode *, int mode, 
d127 1
a127 1
	int (* iv_inode_free)(struct inode *, ino_t ino, int mode);
@


1.25
log
@some pieces of ufs2.  help testing otto sturm
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.24 2003/12/28 17:20:16 tedu Exp $	*/
d277 1
a277 1
			(ip)->i_ffs_ctime = time.tv_sec;		\
d292 1
a292 1
			(ip)->i_e2fs_ctime = time.tv_sec;		\
@


1.24
log
@add ian dowse's dirhash code from freebsd.
by building a hash table for large directories, lookups and deletions
become about constant time.  this is an excellent improvement for dirs with
10k or more files.
some more cleanup to come, but the code works.
enabled with option UFS_DIRHASH
testing brad millert otto
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.23 2003/08/25 23:26:55 tedu Exp $	*/
a44 2
typedef long ufs_lbn_t;

d65 1
a65 1
	struct	vnode  *i_devvp;/* Vnode for block I/O. */
d231 2
d234 1
d240 12
a251 1
	((ip)->i_din1.d##field)
@


1.23
log
@rename struct dinode to ufs1_dinode.  clears the namespace and makes
way for some future work.  no function changes yet.
few other little cleanups.
help testing otto@@ and markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.22 2003/06/02 23:28:23 millert Exp $	*/
d103 1
d107 1
d177 1
@


1.22
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.21 2003/05/26 18:33:17 tedu Exp $	*/
d111 5
a115 3
		struct	dinode ffs_din;	/* 128 bytes of the on-disk dinode. */
		struct ext2fs_dinode e2fs_din; /* 128 bytes of the on-disk dinode. */
	} i_din;
d157 18
a174 18
#define	i_ffs_atime		i_din.ffs_din.di_atime
#define	i_ffs_atimensec		i_din.ffs_din.di_atimensec
#define	i_ffs_blocks		i_din.ffs_din.di_blocks
#define	i_ffs_ctime		i_din.ffs_din.di_ctime
#define	i_ffs_ctimensec		i_din.ffs_din.di_ctimensec
#define	i_ffs_db		i_din.ffs_din.di_db
#define	i_ffs_flags		i_din.ffs_din.di_flags
#define	i_ffs_gen		i_din.ffs_din.di_gen
#define	i_ffs_gid		i_din.ffs_din.di_gid
#define	i_ffs_ib		i_din.ffs_din.di_ib
#define	i_ffs_mode		i_din.ffs_din.di_mode
#define	i_ffs_mtime		i_din.ffs_din.di_mtime
#define	i_ffs_mtimensec		i_din.ffs_din.di_mtimensec
#define	i_ffs_nlink		i_din.ffs_din.di_nlink
#define	i_ffs_rdev		i_din.ffs_din.di_rdev
#define	i_ffs_shortlink		i_din.ffs_din.di_shortlink
#define	i_ffs_size		i_din.ffs_din.di_size
#define	i_ffs_uid		i_din.ffs_din.di_uid
d182 18
a199 18
#define	i_atime			i_din.ffs_din.di_atime
#define	i_atimensec		i_din.ffs_din.di_atimensec
#define	i_blocks		i_din.ffs_din.di_blocks
#define	i_ctime			i_din.ffs_din.di_ctime
#define	i_ctimensec		i_din.ffs_din.di_ctimensec
#define	i_db			i_din.ffs_din.di_db
#define	i_flags			i_din.ffs_din.di_flags
#define	i_gen			i_din.ffs_din.di_gen
#define	i_gid			i_din.ffs_din.di_gid
#define	i_ib			i_din.ffs_din.di_ib
#define	i_mode			i_din.ffs_din.di_mode
#define	i_mtime			i_din.ffs_din.di_mtime
#define	i_mtimensec		i_din.ffs_din.di_mtimensec
#define	i_nlink			i_din.ffs_din.di_nlink
#define	i_rdev			i_din.ffs_din.di_rdev
#define	i_shortlink		i_din.ffs_din.di_shortlink
#define	i_size			i_din.ffs_din.di_size
#define	i_uid			i_din.ffs_din.di_uid
d202 18
a219 18
#define i_e2fs_mode		i_din.e2fs_din.e2di_mode
#define i_e2fs_uid		i_din.e2fs_din.e2di_uid
#define i_e2fs_size		i_din.e2fs_din.e2di_size
#define i_e2fs_atime		i_din.e2fs_din.e2di_atime
#define i_e2fs_ctime		i_din.e2fs_din.e2di_ctime
#define i_e2fs_mtime		i_din.e2fs_din.e2di_mtime
#define i_e2fs_dtime		i_din.e2fs_din.e2di_dtime
#define i_e2fs_gid		i_din.e2fs_din.e2di_gid
#define i_e2fs_nlink		i_din.e2fs_din.e2di_nlink
#define i_e2fs_nblock		i_din.e2fs_din.e2di_nblock
#define i_e2fs_flags		i_din.e2fs_din.e2di_flags
#define i_e2fs_blocks		i_din.e2fs_din.e2di_blocks
#define i_e2fs_gen		i_din.e2fs_din.e2di_gen
#define i_e2fs_facl		i_din.e2fs_din.e2di_facl
#define i_e2fs_dacl		i_din.e2fs_din.e2di_dacl
#define i_e2fs_faddr		i_din.e2fs_din.e2di_faddr
#define i_e2fs_nfrag		i_din.e2fs_din.e2di_nfrag
#define i_e2fs_fsize		i_din.e2fs_din.e2di_fsize
d231 7
@


1.21
log
@fiddle with some type names.  change most instances of ufs_daddr_t to
ufs1_daddr_t, a few to daddr_t.  ufs_daddr_t typedef is retained, but consider
it deprecated.  no functional changes.  inspired by freebsd.  ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.20 2002/06/06 20:57:47 aaron Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.20
log
@compatibilty -> compatibility
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.19 2001/12/19 08:58:07 art Exp $	*/
d55 2
a56 2
       ufs_daddr_t ext2fs_last_lblk; /* last logical block allocated */
       ufs_daddr_t ext2fs_last_blk; /* last block allocated on disk */
d238 1
a238 1
	ufs_daddr_t in_lbn;		/* Logical block number. */
@


1.19
log
@UBC was a disaster. It worked very good when it worked, but on some
machines or some configurations or in some phase of the moon (we actually
don't know when or why) files disappeared. Since we've not been able to
track down the problem in two weeks intense debugging and we need -current
to be stable, back out everything to a state it had before UBC.

We apologise for the inconvenience.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.16 2001/07/04 06:10:50 angelos Exp $	*/
d180 1
a180 1
 * These are here purely for backwards compatibilty for userland.
@


1.18
log
@Big cleanup inspired by NetBSD with some parts of the code from NetBSD.
 - get rid of VOP_BALLOCN and VOP_SIZE
 - move the generic getpages and putpages into miscfs/genfs
 - create a genfs_node which must be added to the top of the private portion
   of each vnode for filsystems that want to use genfs_{get,put}pages
 - rename genfs_mmap to vop_generic_mmap
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.17 2001/11/27 05:27:12 art Exp $	*/
a47 1
#include <miscfs/genfs/genfs.h>
a68 1
	struct genfs_node i_gnode;
a86 1
	LIST_HEAD(,buf) i_pcbufhd;
@


1.18.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.18 2001/12/10 04:45:32 art Exp $	*/
d183 1
a183 1
 * These are here purely for backwards compatibility for userland.
@


1.18.2.2
log
@Huge sync to NetBSD plus lots of bugfixes.
 - uvm is as in netbsd-current minus uvm_map forward merge.
 - various locking bugfixes in nfs.
 - make sure that all specops and fifoops are correct in all vnodeop vectors.
 - make the filesystem code more like filsystem code and less like vm code.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.18.2.1 2002/06/11 03:32:50 art Exp $	*/
d142 2
a143 6
#define UFS_UPDATE(ip, flags) \
    ((ip)->i_vtbl->iv_update)((ip), NULL, NULL, (flags))

/* flags in UFS_UPDATE */
#define	UPDATE_WAIT	0x0001
#define UPDATE_DIROP	0x0002
@


1.18.2.3
log
@use vnode lock in place of inode lock, switch to genfs_lock
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.18.2.2 2002/11/04 18:02:32 art Exp $	*/
d93 1
@


1.17
log
@Merge in the unified buffer cache code as found in NetBSD 2001/03/10. The
code is written mostly by Chuck Silvers <chuq@@chuq.com>/<chs@@netbsd.org>.

Tested for the past few weeks by many developers, should be in a pretty stable
state, but will require optimizations and additional cleanups.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.16 2001/07/04 06:10:50 angelos Exp $	*/
d48 1
d70 1
@


1.16
log
@Move the declaration of inode_vtbl to after the inode declaration
itself -- gets rid of some compilation warnings in userland. ok csapuntz@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.15 2001/06/23 02:07:56 csapuntz Exp $	*/
d87 1
@


1.15
log
@Privatize several vnode operations that are not used by the generic code.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.14 2001/02/24 10:37:09 deraadt Exp $	*/
a58 14
struct inode_vtbl {
	int (* iv_truncate)(struct inode *, off_t, int, 
	    struct ucred *);
	int (* iv_update)(struct inode *, struct timespec *, struct timespec *,
	    int waitfor);
	int (* iv_inode_alloc)(struct inode *, int mode, 
	    struct ucred *, struct vnode **);
	int (* iv_inode_free)(struct inode *, ino_t ino, int mode);
	int (* iv_buf_alloc)(struct inode *, off_t, int, struct ucred *,
	    int, struct buf **);
	int (* iv_bufatoff)(struct inode *, off_t offset, char **res,
	    struct buf **bpp);
} *vtbl;

d120 14
@


1.14
log
@repair cluster structure damage
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.13 2001/02/23 14:42:39 csapuntz Exp $	*/
d59 14
d132 2
d135 23
@


1.13
log
@

Remove the clustering fields from the vnodes and place them in the
file system inode instead
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.12 2001/02/21 23:24:31 csapuntz Exp $	*/
d44 1
@


1.12
log
@

Latest soft updates from FreeBSD/Kirk McKusick

Snapshot-related code has been commented out.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.11 1999/09/10 23:39:10 art Exp $	*/
d85 1
@


1.11
log
@let the DOINGSOFTDEP macro always return 0 if FFS_SOFTUPDATES is not
defined. It will do that anyway, but this way the compiler can optimize better.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.10 1997/11/09 22:14:06 millert Exp $	*/
d250 1
@


1.11.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.14 2001/02/24 10:37:09 deraadt Exp $	*/
a43 1
#include <sys/buf.h>
a84 1
	struct   cluster_info i_ci;
a249 1
#define DOINGASYNC(vp)        ((vp)->v_mount->mnt_flag & MNT_ASYNC)
@


1.11.4.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.11.4.1 2001/05/14 22:47:43 niklas Exp $	*/
a58 14
struct inode_vtbl {
	int (* iv_truncate)(struct inode *, off_t, int, 
	    struct ucred *);
	int (* iv_update)(struct inode *, struct timespec *, struct timespec *,
	    int waitfor);
	int (* iv_inode_alloc)(struct inode *, int mode, 
	    struct ucred *, struct vnode **);
	int (* iv_inode_free)(struct inode *, ino_t ino, int mode);
	int (* iv_buf_alloc)(struct inode *, off_t, int, struct ucred *,
	    int, struct buf **);
	int (* iv_bufatoff)(struct inode *, off_t offset, char **res,
	    struct buf **bpp);
} *vtbl;

a117 2

	struct inode_vtbl *i_vtbl;
a118 23

#define UFS_TRUNCATE(ip, off, flags, cred) \
    ((ip)->i_vtbl->iv_truncate)((ip), (off), (flags), (cred))

#define UFS_UPDATE(ip, sync) \
    ((ip)->i_vtbl->iv_update)((ip), NULL, NULL, (sync))

#define UFS_UPDATE2(ip, atime, mtime, sync) \
    ((ip)->i_vtbl->iv_update)((ip), (atime), (mtime), (sync))

#define UFS_INODE_ALLOC(pip, mode, cred, vpp) \
    ((pip)->i_vtbl->iv_inode_alloc)((pip), (mode), (cred), (vpp))

#define UFS_INODE_FREE(pip, ino, mode) \
    ((pip)->i_vtbl->iv_inode_free)((pip), (ino), (mode))

#define UFS_BUF_ALLOC(ip, startoffset, size, cred, flags, bpp) \
    ((ip)->i_vtbl->iv_buf_alloc)((ip), (startoffset), (size), (cred), \
        (flags), (bpp))
 
#define UFS_BUFATOFF(ip, offset, res, bpp) \
    ((ip)->i_vtbl->iv_bufatoff)((ip), (offset), (res), (bpp))

@


1.11.4.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.11.4.2 2001/07/04 11:00:55 niklas Exp $	*/
d59 14
a133 14
};

struct inode_vtbl {
	int (* iv_truncate)(struct inode *, off_t, int, 
	    struct ucred *);
	int (* iv_update)(struct inode *, struct timespec *, struct timespec *,
	    int waitfor);
	int (* iv_inode_alloc)(struct inode *, int mode, 
	    struct ucred *, struct vnode **);
	int (* iv_inode_free)(struct inode *, ino_t ino, int mode);
	int (* iv_buf_alloc)(struct inode *, off_t, int, struct ucred *,
	    int, struct buf **);
	int (* iv_bufatoff)(struct inode *, off_t offset, char **res,
	    struct buf **bpp);
@


1.11.4.4
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a86 1
	LIST_HEAD(,buf) i_pcbufhd;
@


1.11.4.5
log
@Merge in trunk
@
text
@d87 1
@


1.11.4.6
log
@Sync the SMP branch with 3.3
@
text
@d180 1
a180 1
 * These are here purely for backwards compatibility for userland.
@


1.11.4.7
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.11.4.6 2003/03/28 00:08:47 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
d55 2
a56 2
       ufs1_daddr_t ext2fs_last_lblk; /* last logical block allocated */
       ufs1_daddr_t ext2fs_last_blk; /* last block allocated on disk */
d238 1
a238 1
	daddr_t in_lbn;			/* Logical block number. */
@


1.11.4.8
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 2
d67 1
a67 1
	struct	ufsmount *i_ump;
a102 1
		struct dirhash *dirhash;
a105 1
#define	i_dirhash	inode_ext.dirhash
d111 3
a113 5
		struct ufs1_dinode ffs1_din;
		struct ext2fs_dinode e2fs_din;
	} dinode_u;
#define i_din1 dinode_u.ffs1_din
#define	i_e2din	dinode_u.e2fs_din
d155 18
a172 19
#define	i_ffs_atime		i_din1.di_atime
#define	i_ffs_atimensec		i_din1.di_atimensec
#define	i_ffs_blocks		i_din1.di_blocks
#define	i_ffs_ctime		i_din1.di_ctime
#define	i_ffs_ctimensec		i_din1.di_ctimensec
#define	i_ffs_db		i_din1.di_db
#define	i_ffs_flags		i_din1.di_flags
#define	i_ffs_gen		i_din1.di_gen
#define	i_ffs_gid		i_din1.di_gid
#define	i_ffs_ib		i_din1.di_ib
#define	i_ffs_mode		i_din1.di_mode
#define	i_ffs_mtime		i_din1.di_mtime
#define	i_ffs_mtimensec		i_din1.di_mtimensec
#define	i_ffs_nlink		i_din1.di_nlink
#define	i_ffs_rdev		i_din1.di_rdev
#define	i_ffs_shortlink		i_din1.di_shortlink
#define	i_ffs_size		i_din1.di_size
#define	i_ffs_uid		i_din1.di_uid
#define i_size			i_din1.di_size
d180 18
a197 18
#define	i_atime			i_din1.di_atime
#define	i_atimensec		i_din1.di_atimensec
#define	i_blocks		i_din1.di_blocks
#define	i_ctime			i_din1.di_ctime
#define	i_ctimensec		i_din1.di_ctimensec
#define	i_db			i_din1.di_db
#define	i_flags			i_din1.di_flags
#define	i_gen			i_din1.di_gen
#define	i_gid			i_din1.di_gid
#define	i_ib			i_din1.di_ib
#define	i_mode			i_din1.di_mode
#define	i_mtime			i_din1.di_mtime
#define	i_mtimensec		i_din1.di_mtimensec
#define	i_nlink			i_din1.di_nlink
#define	i_rdev			i_din1.di_rdev
#define	i_shortlink		i_din1.di_shortlink
#define	i_size			i_din1.di_size
#define	i_uid			i_din1.di_uid
d200 18
a217 18
#define i_e2fs_mode		i_e2din.e2di_mode
#define i_e2fs_uid		i_e2din.e2di_uid
#define i_e2fs_size		i_e2din.e2di_size
#define i_e2fs_atime		i_e2din.e2di_atime
#define i_e2fs_ctime		i_e2din.e2di_ctime
#define i_e2fs_mtime		i_e2din.e2di_mtime
#define i_e2fs_dtime		i_e2din.e2di_dtime
#define i_e2fs_gid		i_e2din.e2di_gid
#define i_e2fs_nlink		i_e2din.e2di_nlink
#define i_e2fs_nblock		i_e2din.e2di_nblock
#define i_e2fs_flags		i_e2din.e2di_flags
#define i_e2fs_blocks		i_e2din.e2di_blocks
#define i_e2fs_gen		i_e2din.e2di_gen
#define i_e2fs_facl		i_e2din.e2di_facl
#define i_e2fs_dacl		i_e2din.e2di_dacl
#define i_e2fs_faddr		i_e2din.e2di_faddr
#define i_e2fs_nfrag		i_e2din.e2di_nfrag
#define i_e2fs_fsize		i_e2din.e2di_fsize
a227 2
#define	i_devvp i_ump->um_devvp

a228 19

/*
 * The DIP macro is used to access fields in the dinode that are
 * not cached in the inode itself.
 */
#define	DIP(ip, field) \
	(((ip)->i_ump->um_fstype == UM_UFS1) ? \
	(ip)->i_din1->d##field : (ip)->i_din2->d##field)

#if 0
#define	MAXSYMLINKLEN(ip) \
	((ip)->i_ump->um_fstype == UM_UFS1) ? \
	((NDADDR + NIADDR) * sizeof(ufs1_daddr_t)) : \
	((NDADDR + NIADDR) * sizeof(ufs2_daddr_t))
#define	SHORTLINK(ip) \
	(((ip)->i_ump->um_fstype == UM_UFS1) ? \
	(caddr_t)(ip)->i_din1->di_db : (caddr_t)(ip)->i_din2->di_db)
#endif

@


1.10
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.9 1997/11/06 05:59:25 csapuntz Exp $	*/
d245 1
d247 3
@


1.9
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.8 1997/10/06 20:21:44 deraadt Exp $	*/
d188 1
a188 1
#define IN_SHLOCK       0x0020          /* FIle has shared lock. */
@


1.8
log
@back out vfs lite2 till after 2.2
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.6 1997/05/30 15:18:49 downsj Exp $	*/
d48 2
d68 1
a68 2
	struct	inode  *i_next;	/* Hash chain forward. */
	struct	inode **i_prev;	/* Hash chain back. */
d74 1
d88 2
a89 2
	pid_t	 i_lockholder;	/* DEBUG: holder of inode lock. */
	pid_t	 i_lockwaiter;	/* DEBUG: latest blocked for inode lock. */
d185 5
a189 8
#define	IN_EXLOCK	0x0004		/* File has exclusive lock. */
#define	IN_LOCKED	0x0008		/* Inode lock. */
#define	IN_LWAIT	0x0010		/* Process waiting on file lock. */
#define	IN_MODIFIED	0x0020		/* Inode has been modified. */
#define	IN_RENAME	0x0040		/* Inode is being renamed. */
#define	IN_SHLOCK	0x0080		/* File has shared lock. */
#define	IN_UPDATE	0x0100		/* Modification time update request. */
#define	IN_WANTED	0x0200		/* Inode is wanted by a process. */
d243 3
@


1.7
log
@VFS Lite2 Changes
@
text
@a47 2
typedef long ufs_lbn_t;

d66 2
a67 1
	LIST_ENTRY(inode) i_hash; /* Hash chain */
a72 1
	int       i_effnlink;   /* i_nlink when I/O completes */
d86 2
a87 2
	struct   lock i_lock;   /* Inode lock */

d183 8
a190 5
#define IN_UPDATE       0x0004          /* Modification time update request */
#define	IN_MODIFIED	0x0008		/* Inode has been modified. */
#define	IN_RENAME	0x0010		/* Inode is being renamed. */
#define IN_SHLOCK       0x0020          /* FIle has shared lock. */
#define	IN_EXLOCK	0x0040		/* File has exclusive lock. */
a243 3

/* Determine if soft dependencies are being done */
#define DOINGSOFTDEP(vp)      ((vp)->v_mount->mnt_flag & MNT_SOFTDEP)
@


1.6
log
@Put in compatibility defines for FFS member names, #ifndef _KERNEL.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.5 1997/05/30 08:34:59 downsj Exp $	*/
d48 2
d68 1
a68 2
	struct	inode  *i_next;	/* Hash chain forward. */
	struct	inode **i_prev;	/* Hash chain back. */
d74 1
d88 2
a89 2
	pid_t	 i_lockholder;	/* DEBUG: holder of inode lock. */
	pid_t	 i_lockwaiter;	/* DEBUG: latest blocked for inode lock. */
d185 5
a189 8
#define	IN_EXLOCK	0x0004		/* File has exclusive lock. */
#define	IN_LOCKED	0x0008		/* Inode lock. */
#define	IN_LWAIT	0x0010		/* Process waiting on file lock. */
#define	IN_MODIFIED	0x0020		/* Inode has been modified. */
#define	IN_RENAME	0x0040		/* Inode is being renamed. */
#define	IN_SHLOCK	0x0080		/* File has shared lock. */
#define	IN_UPDATE	0x0100		/* Modification time update request. */
#define	IN_WANTED	0x0200		/* Inode is wanted by a process. */
d243 3
@


1.5
log
@Integrate new ext2fs, reverting ufs support for the old one.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d75 2
a76 2
		struct	fs *fs;		/* FFS */
		struct	lfs *lfs;	/* LFS */
d117 2
a118 2
#define	i_ffs_atimensec	i_din.ffs_din.di_atimensec
#define	i_ffs_blocks	i_din.ffs_din.di_blocks
d120 1
a120 1
#define	i_ffs_ctimensec	i_din.ffs_din.di_ctimensec
d128 1
a128 1
#define	i_ffs_mtimensec	i_din.ffs_din.di_mtimensec
d131 1
a131 1
#define	i_ffs_shortlink	i_din.ffs_din.di_shortlink
d135 26
d164 4
a167 4
#define i_e2fs_atime	i_din.e2fs_din.e2di_atime
#define i_e2fs_ctime	i_din.e2fs_din.e2di_ctime
#define i_e2fs_mtime	i_din.e2fs_din.e2di_mtime
#define i_e2fs_dtime	i_din.e2fs_din.e2di_dtime
d169 4
a172 4
#define i_e2fs_nlink	i_din.e2fs_din.e2di_nlink
#define i_e2fs_nblock	i_din.e2fs_din.e2di_nblock
#define i_e2fs_flags	i_din.e2fs_din.e2di_flags
#define i_e2fs_blocks	i_din.e2fs_din.e2di_blocks
d176 3
a178 3
#define i_e2fs_faddr	i_din.e2fs_din.e2di_faddr
#define i_e2fs_nfrag	i_din.e2fs_din.e2di_nfrag
#define i_e2fs_fsize	i_din.e2fs_din.e2di_fsize
@


1.4
log
@Moving some things around; struct inode still ends up bigger, though.
This should, hopefully, be the last UFS changes required.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.3 1996/06/24 10:23:22 downsj Exp $	*/
d46 1
d51 3
a53 6
struct ext2_inode_ext {
	int32_t block_group;
	int32_t next_alloc_block;
	int32_t next_alloc_goal;
	int32_t prealloc_block;
	int32_t prealloc_count;
d75 3
a77 3
		struct	fs *fs;			/* FFS */
		struct	lfs *lfs;		/* LFS */
		struct	ext2_sb_info *e2fs;	/* EXT2FS */
d81 1
a81 1
#define i_e2fs	inode_u.e2fs
a96 1

d98 1
a98 1
	 * Inode extensions.
d102 1
a102 1
		struct ext2_inode_ext	e2ext;
d104 2
a105 5
#define i_block_group		inode_ext.e2ext.block_group
#define i_next_alloc_block	inode_ext.e2ext.next_alloc_block
#define i_next_alloc_goal	inode_ext.e2ext.next_alloc_goal
#define i_prealloc_block	inode_ext.e2ext.prealloc_block
#define i_prealloc_count	inode_ext.e2ext.prealloc_count
d110 4
a113 1
	struct	dinode i_din;	/* 128 bytes of the on-disk dinode. */
d116 37
a152 18
#define	i_atime		i_din.di_atime
#define	i_atimensec	i_din.di_atimensec
#define	i_blocks	i_din.di_blocks
#define	i_ctime		i_din.di_ctime
#define	i_ctimensec	i_din.di_ctimensec
#define	i_db		i_din.di_db
#define	i_flags		i_din.di_flags
#define	i_gen		i_din.di_gen
#define	i_gid		i_din.di_gid
#define	i_ib		i_din.di_ib
#define	i_mode		i_din.di_mode
#define	i_mtime		i_din.di_mtime
#define	i_mtimensec	i_din.di_mtimensec
#define	i_nlink		i_din.di_nlink
#define	i_rdev		i_din.di_rdev
#define	i_shortlink	i_din.di_shortlink
#define	i_size		i_din.di_size
#define	i_uid		i_din.di_uid
d181 16
a196 1
#define	ITIMES(ip, t1, t2) {						\
d200 1
a200 1
			(ip)->i_atime = (t1)->tv_sec;			\
d202 1
a202 1
			(ip)->i_mtime = (t2)->tv_sec;			\
d206 1
a206 1
			(ip)->i_ctime = time.tv_sec;			\
d208 8
@


1.3
log
@ufs: sorry, one more pointer in struct inode.

THREADWAY: good example of a really tweaked PeeCee.
@
text
@d1 1
a1 1
/*	$OpenBSD: inode.h,v 1.2 1996/06/24 03:35:03 downsj Exp $	*/
d48 11
d99 1
d101 1
a101 1
	 * Directory operations pointers.
d103 10
a112 5
	struct ufs_dirops 	*i_dirops;
	/*
	 * Ext2fs inode extensions.
	 */
	struct ext2_inode_info	*i_e2ext;
@


1.2
log
@ufs changes: add the notion of directory operators.

gnu/ext2fs: add the second extended filesystem.

Note that I'm commiting this now for the sake of the ufs changes; ext2fs
is not yet fully integrated into the system.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d92 4
@


1.1
log
@Initial revision
@
text
@d1 1
d66 3
a68 2
		struct	fs *fs;		/* FFS */
		struct	lfs *lfs;	/* LFS */
d72 1
d88 4
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
