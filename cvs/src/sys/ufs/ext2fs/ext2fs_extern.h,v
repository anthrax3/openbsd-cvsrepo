head	1.36;
access;
symbols
	OPENBSD_6_1_BASE:1.36
	OPENBSD_6_0:1.35.0.10
	OPENBSD_6_0_BASE:1.35
	OPENBSD_5_9:1.35.0.6
	OPENBSD_5_9_BASE:1.35
	OPENBSD_5_8:1.35.0.8
	OPENBSD_5_8_BASE:1.35
	OPENBSD_5_7:1.35.0.4
	OPENBSD_5_7_BASE:1.35
	OPENBSD_5_6:1.35.0.2
	OPENBSD_5_6_BASE:1.35
	OPENBSD_5_5:1.33.0.4
	OPENBSD_5_5_BASE:1.33
	OPENBSD_5_4:1.32.0.2
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.29.0.10
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.8
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.29
	OPENBSD_5_1:1.29.0.6
	OPENBSD_5_0:1.29.0.4
	OPENBSD_5_0_BASE:1.29
	OPENBSD_4_9:1.29.0.2
	OPENBSD_4_9_BASE:1.29
	OPENBSD_4_8:1.26.0.12
	OPENBSD_4_8_BASE:1.26
	OPENBSD_4_7:1.26.0.8
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.26.0.10
	OPENBSD_4_6_BASE:1.26
	OPENBSD_4_5:1.26.0.6
	OPENBSD_4_5_BASE:1.26
	OPENBSD_4_4:1.26.0.4
	OPENBSD_4_4_BASE:1.26
	OPENBSD_4_3:1.26.0.2
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.25.0.2
	OPENBSD_4_2_BASE:1.25
	OPENBSD_4_1:1.24.0.6
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.24.0.4
	OPENBSD_4_0_BASE:1.24
	OPENBSD_3_9:1.24.0.2
	OPENBSD_3_9_BASE:1.24
	OPENBSD_3_8:1.22.0.2
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.20.0.4
	OPENBSD_3_7_BASE:1.20
	OPENBSD_3_6:1.20.0.2
	OPENBSD_3_6_BASE:1.20
	SMP_SYNC_A:1.19
	SMP_SYNC_B:1.19
	OPENBSD_3_5:1.19.0.2
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.18.0.2
	OPENBSD_3_4_BASE:1.18
	UBC_SYNC_A:1.15
	OPENBSD_3_3:1.15.0.6
	OPENBSD_3_3_BASE:1.15
	OPENBSD_3_2:1.15.0.4
	OPENBSD_3_2_BASE:1.15
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	UBC_SYNC_B:1.15
	UBC:1.12.0.2
	UBC_BASE:1.12
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_8:1.7.0.4
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	SMP:1.6.0.2
	SMP_BASE:1.6
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.8
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.6
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.4
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	R19970424:1.1.1.1
	BOUYER:1.1.1;
locks; strict;
comment	@ * @;


1.36
date	2016.08.10.07.53.02;	author natano;	state Exp;
branches;
next	1.35;
commitid	q0VebnKSesRYhwvy;

1.35
date	2014.07.14.08.54.13;	author pelikan;	state Exp;
branches;
next	1.34;
commitid	5pxoUiNNvSjZa1j9;

1.34
date	2014.05.27.14.31.24;	author krw;	state Exp;
branches;
next	1.33;

1.33
date	2014.01.25.23.31.12;	author guenther;	state Exp;
branches;
next	1.32;

1.32
date	2013.06.11.16.42.18;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2013.05.30.19.19.09;	author guenther;	state Exp;
branches;
next	1.30;

1.30
date	2013.03.28.03.29.44;	author guenther;	state Exp;
branches;
next	1.29;

1.29
date	2010.12.21.20.14.44;	author thib;	state Exp;
branches;
next	1.28;

1.28
date	2010.09.10.16.34.09;	author thib;	state Exp;
branches;
next	1.27;

1.27
date	2010.09.06.23.44.10;	author thib;	state Exp;
branches;
next	1.26;

1.26
date	2008.01.05.19.49.26;	author otto;	state Exp;
branches;
next	1.25;

1.25
date	2007.06.02.00.45.50;	author pedro;	state Exp;
branches;
next	1.24;

1.24
date	2005.12.14.22.03.01;	author pedro;	state Exp;
branches;
next	1.23;

1.23
date	2005.12.11.20.46.28;	author pedro;	state Exp;
branches;
next	1.22;

1.22
date	2005.07.28.23.11.25;	author pedro;	state Exp;
branches;
next	1.21;

1.21
date	2005.04.30.13.58.55;	author niallo;	state Exp;
branches;
next	1.20;

1.20
date	2004.07.13.21.04.29;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2004.03.02.05.52.24;	author tedu;	state Exp;
branches;
next	1.18;

1.18
date	2003.07.06.09.07.18;	author tedu;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2003.06.02.23.28.22;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2003.05.26.18.33.16;	author tedu;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.14.03.16.13;	author millert;	state Exp;
branches
	1.15.6.1;
next	1.14;

1.14
date	2002.03.14.01.27.14;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2001.12.19.08.58.07;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2001.12.10.04.45.31;	author art;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2001.11.27.05.27.12;	author art;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.18.00.39.15;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.23.02.07.51;	author csapuntz;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.20.01.50.12;	author assar;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.26.23.24.40;	author jasoni;	state Exp;
branches;
next	1.6;

1.6
date	2000.02.07.04.57.18;	author assar;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	98.02.08.22.41.48;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	97.11.06.05.59.14;	author csapuntz;	state Exp;
branches;
next	1.3;

1.3
date	97.06.12.21.09.33;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	97.05.30.08.33.52;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	97.05.30.05.18.51;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.30.05.18.51;	author downsj;	state Exp;
branches;
next	;

1.6.2.1
date	2001.05.14.22.47.39;	author niklas;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2001.07.04.11.00.42;	author niklas;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2001.10.31.03.32.13;	author nate;	state Exp;
branches;
next	1.6.2.4;

1.6.2.4
date	2001.12.05.01.02.41;	author niklas;	state Exp;
branches;
next	1.6.2.5;

1.6.2.5
date	2002.03.06.02.17.13;	author niklas;	state Exp;
branches;
next	1.6.2.6;

1.6.2.6
date	2002.03.28.14.54.25;	author niklas;	state Exp;
branches;
next	1.6.2.7;

1.6.2.7
date	2003.06.07.11.09.08;	author ho;	state Exp;
branches;
next	1.6.2.8;

1.6.2.8
date	2004.02.19.11.01.35;	author niklas;	state Exp;
branches;
next	1.6.2.9;

1.6.2.9
date	2004.06.05.23.13.10;	author niklas;	state Exp;
branches;
next	;

1.12.2.1
date	2002.06.11.03.32.49;	author art;	state Exp;
branches;
next	;

1.15.6.1
date	2004.03.03.08.50.13;	author brad;	state Exp;
branches;
next	;

1.18.2.1
date	2004.03.03.08.32.11;	author brad;	state Exp;
branches;
next	;


desc
@@


1.36
log
@ext2fs only has one set of specops/fifoops
ok mpi tedu
@
text
@/*	$OpenBSD: ext2fs_extern.h,v 1.35 2014/07/14 08:54:13 pelikan Exp $	*/
/*	$NetBSD: ext2fs_extern.h,v 1.1 1997/06/11 09:33:55 bouyer Exp $	*/

/*-
 * Copyright (c) 1997 Manuel Bouyer.
 * Copyright (c) 1991, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ffs_extern.h	8.3 (Berkeley) 4/16/94
 * Modified for ext2fs by Manuel Bouyer.
 */

struct buf;
struct fid;
struct m_ext2fs;
struct inode;
struct mount;
struct nameidata;
struct proc;
struct statfs;
struct timeval;
struct ucred;
struct ufsmount;
struct uio;
struct vnode;
struct vfsconf;
struct mbuf;
struct componentname;

extern struct pool ext2fs_inode_pool;	/* memory pool for inodes */
extern struct pool ext2fs_dinode_pool;	/* memory pool for dinodes */

__BEGIN_DECLS

/* ext2fs_alloc.c */
int	ext2fs_alloc(struct inode *, u_int32_t, u_int32_t , struct ucred *,
	    u_int32_t *);
int	ext2fs_inode_alloc(struct inode *, mode_t mode, struct ucred *,
	    struct vnode **);
daddr_t	ext2fs_blkpref(struct inode *, u_int32_t, int, u_int32_t *);
void	ext2fs_blkfree(struct inode *, u_int32_t);
void	ext2fs_inode_free(struct inode *, ufsino_t, mode_t);

/* ext2fs_balloc.c */
int	ext2fs_buf_alloc(struct inode *, u_int32_t, int, struct ucred *,
	    struct buf **, int);

/* ext2fs_bmap.c */
int	ext2fs_bmap(void *);

/* ext2fs_inode.c */
u_int64_t	ext2fs_size(struct inode *);
int	ext2fs_init(struct vfsconf *);
int	ext2fs_setsize(struct inode *, u_int64_t);
int	ext2fs_update(struct inode *ip, int waitfor);
int	ext2fs_truncate(struct inode *, off_t, int, struct ucred *);
int	ext2fs_inactive(void *);

/* ext2fs_lookup.c */
int	ext2fs_readdir(void *);
int	ext2fs_lookup(void *);
int	ext2fs_direnter(struct inode *, struct vnode *, struct componentname *);
int	ext2fs_dirremove(struct vnode *, struct componentname *);
int	ext2fs_dirrewrite(struct inode *, struct inode *, struct componentname *);
int	ext2fs_dirempty(struct inode *, ufsino_t, struct ucred *);
int	ext2fs_checkpath(struct inode *, struct inode *, struct ucred *);

/* ext2fs_subr.c */
int	ext2fs_bufatoff(struct inode *, off_t, char **, struct buf **);
int	ext2fs_vinit(struct mount *, struct vnode **);
#ifdef DIAGNOSTIC
void	ext2fs_checkoverlap(struct buf *, struct inode *);
#endif

/* ext2fs_vfsops.c */
int	ext2fs_mountroot(void);
int	ext2fs_mount(struct mount *, const char *, void *, struct nameidata *,
	    struct proc *);
int	ext2fs_reload(struct mount *, struct ucred *, struct proc *);
int	ext2fs_mountfs(struct vnode *, struct mount *, struct proc *);
int	ext2fs_unmount(struct mount *, int, struct proc *);
int	ext2fs_flushfiles(struct mount *, int, struct proc *);
int	ext2fs_statfs(struct mount *, struct statfs *, struct proc *);
int	ext2fs_sync(struct mount *, int, struct ucred *, struct proc *);
int	ext2fs_vget(struct mount *, ino_t, struct vnode **);
int	ext2fs_fhtovp(struct mount *, struct fid *, struct vnode **);
int	ext2fs_vptofh(struct vnode *, struct fid *);
int	ext2fs_sbupdate(struct ufsmount *, int);
int	ext2fs_cgupdate(struct ufsmount *, int);
int	ext2fs_sysctl(int *, u_int, void *, size_t *, void *, size_t,
	    struct proc *);

/* ext2fs_readwrite.c */
int	ext2fs_read(void *);
int	ext2fs_write(void *);

/* ext2fs_vnops.c */
int	ext2fs_create(void *);
int	ext2fs_mknod(void *);
int	ext2fs_open(void *);
int	ext2fs_access(void *);
int	ext2fs_getattr(void *);
int	ext2fs_setattr(void *);
int	ext2fs_remove(void *);
int	ext2fs_link(void *);
int	ext2fs_rename(void *);
int	ext2fs_mkdir(void *);
int	ext2fs_rmdir(void *);
int	ext2fs_symlink(void *);
int	ext2fs_readlink(void *);
int	ext2fs_pathconf(void *);
int	ext2fs_advlock(void *);
int	ext2fs_makeinode(int, struct vnode *, struct vnode **,
	    struct componentname *cnp);
int	ext2fs_fsync(void *);
int	ext2fs_reclaim(void *);
int	ext2fsfifo_reclaim(void *);

__END_DECLS

#define IS_EXT2_VNODE(vp)   (vp->v_tag == VT_EXT2FS)

extern struct vops ext2fs_vops;
extern struct vops ext2fs_specvops;
#ifdef FIFO
extern struct vops ext2fs_fifovops;
#endif
@


1.35
log
@better type safety and KNF.

Because ext2fs has only 32-bit inode numbers, use ufsino_t as in FFS.
Disk blocks are u_int32_t as well, because we don't support the 64BIT flag.
When we do, there's going to be a lot more going on than just daddr_t.

While there, add some journaling-related bits into the superblock to play with.

ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.34 2014/05/27 14:31:24 krw Exp $	*/
d94 1
a94 2
int	ext2fs_vinit(struct mount *, struct vops *, struct vops *,
	    struct vnode **);
a150 3
#define EXT2FS_FIFOOPS &ext2fs_fifovops
#else
#define EXT2FS_FIFOOPS NULL
@


1.34
log
@Zap a bunch of trailing whitespace.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.33 2014/01/25 23:31:12 guenther Exp $	*/
d60 7
a66 10
int ext2fs_alloc(struct inode *, int32_t, int32_t , struct ucred *,
		   int32_t *);
int ext2fs_realloccg(struct inode *, int32_t, int32_t, int, int,
			  struct ucred *, struct buf **);
int ext2fs_reallocblks(void *);
int ext2fs_inode_alloc(struct inode *pip, mode_t mode, struct ucred *,
    struct vnode **);
daddr_t ext2fs_blkpref(struct inode *, int32_t, int, int32_t *);
void ext2fs_blkfree(struct inode *, int32_t);
int ext2fs_inode_free(struct inode *pip, ufsino_t ino, mode_t mode);
d69 2
a70 2
int ext2fs_buf_alloc(struct inode *, daddr_t, int, struct ucred *,
			struct buf **, int);
d73 1
a73 1
int ext2fs_bmap(void *);
d76 6
a81 6
int ext2fs_init(struct vfsconf *);
u_int64_t ext2fs_size(struct inode *);
int ext2fs_setsize(struct inode *, u_int64_t);
int ext2fs_update(struct inode *ip, int waitfor);
int ext2fs_truncate(struct inode *, off_t, int, struct ucred *);
int ext2fs_inactive(void *);
d84 7
a90 9
int ext2fs_readdir(void *);
int ext2fs_lookup(void *);
int ext2fs_direnter(struct inode *, struct vnode *,
									struct componentname *);
int ext2fs_dirremove(struct vnode *, struct componentname *);
int ext2fs_dirrewrite(struct inode *, struct inode *,
								struct componentname *);
int ext2fs_dirempty(struct inode *, ufsino_t, struct ucred *);
int ext2fs_checkpath(struct inode *, struct inode *, struct ucred *);
d93 3
a95 4
int ext2fs_bufatoff(struct inode *, off_t, char **, struct buf **);
int ext2fs_vinit(struct mount *, struct vops *, struct vops *,
    struct vnode **);
void ext2fs_fragacct(struct m_ext2fs *, int, int32_t[], int);
d101 16
a116 16
int ext2fs_mountroot(void);
int ext2fs_mount(struct mount *, const char *, void *,
		   struct nameidata *, struct proc *);
int ext2fs_reload(struct mount *, struct ucred *, struct proc *);
int ext2fs_mountfs(struct vnode *, struct mount *, struct proc *);
int ext2fs_unmount(struct mount *, int, struct proc *);
int ext2fs_flushfiles(struct mount *, int, struct proc *);
int ext2fs_statfs(struct mount *, struct statfs *, struct proc *);
int ext2fs_sync(struct mount *, int, struct ucred *, struct proc *);
int ext2fs_vget(struct mount *, ino_t, struct vnode **);
int ext2fs_fhtovp(struct mount *, struct fid *, struct vnode **);
int ext2fs_vptofh(struct vnode *, struct fid *);
int ext2fs_sbupdate(struct ufsmount *, int);
int ext2fs_cgupdate(struct ufsmount *, int);
int ext2fs_sysctl(int *, u_int, void *, size_t *, void *, size_t,
		       struct proc *);
d119 2
a120 2
int ext2fs_read(void *);
int ext2fs_write(void *);
d123 20
a142 20
int ext2fs_create(void *);
int ext2fs_mknod(void *);
int ext2fs_open(void *);
int ext2fs_access(void *);
int ext2fs_getattr(void *);
int ext2fs_setattr(void *);
int ext2fs_remove(void *);
int ext2fs_link(void *);
int ext2fs_rename(void *);
int ext2fs_mkdir(void *);
int ext2fs_rmdir(void *);
int ext2fs_symlink(void *);
int ext2fs_readlink(void *);
int ext2fs_pathconf(void *);
int ext2fs_advlock(void *);
int ext2fs_makeinode(int, struct vnode *, struct vnode **,
                     struct componentname *cnp);
int ext2fs_fsync(void *);
int ext2fs_reclaim(void *);
int ext2fsfifo_reclaim(void *);
@


1.33
log
@ufs_setattr() was assuming that the flag bits that indicate
atime/mtime/ctime need to be updated weren't already set.  When
they are, the code will end up treating the VNOVAL value from the
VFS layer as a time_t.  Port the fix from FreeBSD: the critical bit
is to process the existing flag values before possibly setting them
again in ufs_setattr().  This diff pulls in a larger change from
FreeBSD to replace the macro ITIMES() with a function ufs_itimes()
and to remove the atime and mtime arguments from ffs_update(): only
ufs_setattr() used them so it makes more sense to just do the those
bits directly there.

tweaks and ok tedu@@ matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.32 2013/06/11 16:42:18 deraadt Exp $	*/
d65 1
a65 1
int ext2fs_inode_alloc(struct inode *pip, mode_t mode, struct ucred *, 
@


1.32
log
@final removal of daddr64_t.  daddr_t has been 64 bit for a long enough
test period; i think 3 years ago the last bugs fell out.
ok otto beck others
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.31 2013/05/30 19:19:09 guenther Exp $	*/
d82 1
a82 2
int ext2fs_update(struct inode *ip, struct timespec *atime,
    struct timespec *mtime, int waitfor);
@


1.31
log
@UFS does't do inode numbers >2^32, so use a smaller type internally,
only using ino_t in the VFS layer APIs: vget, readdir, getattr.

otto wrote the original diff for libsa to keep bootblock from overflowing
ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.30 2013/03/28 03:29:44 guenther Exp $	*/
d67 1
a67 1
daddr64_t ext2fs_blkpref(struct inode *, int32_t, int, int32_t *);
d72 1
a72 1
int ext2fs_buf_alloc(struct inode *, daddr64_t, int, struct ucred *,
@


1.30
log
@Add support for _PC_TIMESTAMP_RESOLUTION for ffs/mfs, cd9600, ext2,
msdos, NFS, fifos and devices, plus support for querying it in
getconf(2) and the requisite pathconf(2) manpage blurb

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.29 2010/12/21 20:14:44 thib Exp $	*/
d69 1
a69 1
int ext2fs_inode_free(struct inode *pip, ino_t ino, mode_t mode);
d95 1
a95 1
int ext2fs_dirempty(struct inode *, ino_t, struct ucred *);
@


1.29
log
@Bring back the "End the VOP experiment." diff, naddy's issues where
unrelated, and his alpha is much happier now.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.28 2010/09/10 16:34:09 thib Exp $	*/
d143 1
@


1.28
log
@Backout the VOP diff until the issues naddy was seeing on alpha (gcc3)
have been resolved.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.27 2010/09/06 23:44:10 thib Exp $	*/
d100 1
a100 1
int ext2fs_vinit(struct mount *, int (**)(void *), int (**)(void *),
d154 2
a155 2
extern int (**ext2fs_vnodeop_p)(void *);
extern int (**ext2fs_specop_p)(void *);
d157 2
a158 2
extern int (**ext2fs_fifoop_p)(void *);
#define EXT2FS_FIFOOPS ext2fs_fifoop_p
@


1.27
log
@End the VOP experiment. Instead of the ridicolusly complicated operation
vector setup that has questionable features (that have, as far as I can
tell never been used in practice, atleast not in OpenBSD), remove all
the gunk and favor a simple struct full of function pointers that get
set directly by each of the filesystems.

Removes gobs of ugly code and makes things simpler by a magnitude.

The only downside of this is that we loose the vnoperate feature so
the spec/fifo operations of the filesystems need to be kept in sync
with specfs and fifofs, this is no big deal as the API it self is pretty
static.

Many thanks to armani@@ who pulled an earlier version of this diff to
current after c2k10 and Gabriel Kihlman on tech@@ for testing.

Liked by many. "come on, find your balls" deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.26 2008/01/05 19:49:26 otto Exp $	*/
d100 1
a100 1
int ext2fs_vinit(struct mount *, struct vops *, struct vops *,
d154 2
a155 2
extern struct vops ext2fs_vops;
extern struct vops ext2fs_specvops;
d157 2
a158 2
extern struct vops ext2fs_fifovops;
#define EXT2FS_FIFOOPS &ext2fs_fifovops
@


1.26
log
@Make the ffs code 64-bit disk block number clean.  Based on a diff
from Pedro Martelleto.  Two things remain: the on-disk quota
structures are still 32-bit and statfs does not do 64-bit numbers
yet. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.25 2007/06/02 00:45:50 pedro Exp $	*/
d100 1
a100 1
int ext2fs_vinit(struct mount *, int (**)(void *), int (**)(void *),
d154 2
a155 2
extern int (**ext2fs_vnodeop_p)(void *);
extern int (**ext2fs_specop_p)(void *);
d157 2
a158 2
extern int (**ext2fs_fifoop_p)(void *);
#define EXT2FS_FIFOOPS ext2fs_fifoop_p
@


1.25
log
@ufs1_daddr_t cleanup, okay thib@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.24 2005/12/14 22:03:01 pedro Exp $	*/
d67 1
a67 1
daddr_t ext2fs_blkpref(struct inode *, int32_t, int, int32_t *);
d72 1
a72 1
int ext2fs_buf_alloc(struct inode *, daddr_t, int, struct ucred *,
@


1.24
log
@Make ext2fs use a memory pool to allocate inodes, okay tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.23 2005/12/11 20:46:28 pedro Exp $	*/
d60 3
a62 3
int ext2fs_alloc(struct inode *, ufs1_daddr_t, ufs1_daddr_t , struct ucred *,
		   ufs1_daddr_t *);
int ext2fs_realloccg(struct inode *, ufs1_daddr_t, ufs1_daddr_t, int, int,
d67 2
a68 2
daddr_t ext2fs_blkpref(struct inode *, ufs1_daddr_t, int, ufs1_daddr_t *);
void ext2fs_blkfree(struct inode *, ufs1_daddr_t);
@


1.23
log
@inode/dinode separation for ext2fs
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.22 2005/07/28 23:11:25 pedro Exp $	*/
d54 2
a55 2
/* extern struct pool ext2fs_inode_pool; */	/* memory pool for inodes */
extern struct pool ext2fs_dinode_pool;		/* memory pool for dinodes */
@


1.22
log
@no point in having an inode pool if we don't use it
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.21 2005/04/30 13:58:55 niallo Exp $	*/
d55 1
d100 2
@


1.21
log
@Add support for large files (> 4GB).

Automatically converts old filesystems to use this if they are already at
revision 1 (like Linux). Revision 0 filesystems don't get converted (unlike
Linux).

From NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.20 2004/07/13 21:04:29 millert Exp $	*/
d54 1
a54 1
extern struct pool ext2fs_inode_pool;		/* memory pool for inodes */
@


1.20
log
@Change mode_t and nlink_t from 16bit to 32bit.  This allows us to
use mode_t in syscalls.master and to use mode_t in more places in
the kernel.  It also makes lint much more useful on kernel code.

I've also added a placeholder for st_birthtime to make a UFS2 import
easier at some future date.

Requested by and OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.19 2004/03/02 05:52:24 tedu Exp $	*/
d79 2
@


1.19
log
@call fifo_reclaim here too
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.18 2003/07/06 09:07:18 tedu Exp $	*/
d64 1
a64 1
int ext2fs_inode_alloc(struct inode *pip, int mode, struct ucred *, 
d68 1
a68 1
int ext2fs_inode_free(struct inode *pip, ino_t ino, int mode);
@


1.18
log
@remove ext2fs_vinit.  it wasn't used and is identical to ufs_vinit.
otto made the diff for me, thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.17 2003/06/02 23:28:22 millert Exp $	*/
d143 1
@


1.18.2.1
log
@MFC:
Fix from tedu@@

prevent memory leak on revoke by freeing resources in a real reclaim
function.
also check fifoinfo is valid before deref.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.18 2003/07/06 09:07:18 tedu Exp $	*/
a142 1
int ext2fsfifo_reclaim(void *);
@


1.17
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.16 2003/05/26 18:33:16 tedu Exp $	*/
a138 2
int ext2fs_vinit(struct mount *, int (**specops)(void *),
                 int (**fifoops)(void *), struct vnode **);
@


1.16
log
@fiddle with some type names.  change most instances of ufs_daddr_t to
ufs1_daddr_t, a few to daddr_t.  ufs_daddr_t typedef is retained, but consider
it deprecated.  no functional changes.  inspired by freebsd.  ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.15 2002/03/14 03:16:13 millert Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.15
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.14 2002/03/14 01:27:14 millert Exp $	*/
d63 3
a65 3
int ext2fs_alloc(struct inode *, ufs_daddr_t, ufs_daddr_t , struct ucred *,
		   ufs_daddr_t *);
int ext2fs_realloccg(struct inode *, ufs_daddr_t, ufs_daddr_t, int, int,
d70 2
a71 2
daddr_t ext2fs_blkpref(struct inode *, ufs_daddr_t, int, ufs_daddr_t *);
void ext2fs_blkfree(struct inode *, ufs_daddr_t);
@


1.15.6.1
log
@MFC:
Fix from tedu@@

prevent memory leak on revoke by freeing resources in a real reclaim
function.
also check fifoinfo is valid before deref.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.15 2002/03/14 03:16:13 millert Exp $	*/
a148 1
int ext2fsfifo_reclaim(void *);
@


1.14
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.13 2001/12/19 08:58:07 art Exp $	*/
d143 2
a144 2
int ext2fs_vinit __P((struct mount *, int (**specops)(void *),
                      int (**fifoops)(void *), struct vnode **));
d146 1
a146 1
                          struct componentname *cnp);
@


1.13
log
@UBC was a disaster. It worked very good when it worked, but on some
machines or some configurations or in some phase of the moon (we actually
don't know when or why) files disappeared. Since we've not been able to
track down the problem in two weeks intense debugging and we need -current
to be stable, back out everything to a state it had before UBC.

We apologise for the inconvenience.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.10 2001/09/18 00:39:15 art Exp $	*/
d63 5
a67 5
int ext2fs_alloc __P((struct inode *, ufs_daddr_t, ufs_daddr_t , struct ucred *,
		   ufs_daddr_t *));
int ext2fs_realloccg __P((struct inode *, ufs_daddr_t, ufs_daddr_t, int, int,
			  struct ucred *, struct buf **));
int ext2fs_reallocblks __P((void *));
d70 2
a71 2
daddr_t ext2fs_blkpref __P((struct inode *, ufs_daddr_t, int, ufs_daddr_t *));
void ext2fs_blkfree __P((struct inode *, ufs_daddr_t));
d79 1
a79 1
int ext2fs_bmap __P((void *));
d82 1
a82 1
int ext2fs_init __P((struct vfsconf *));
d86 1
a86 1
int ext2fs_inactive __P((void *));
d89 9
a97 9
int ext2fs_readdir __P((void *));
int ext2fs_lookup  __P((void *));
int ext2fs_direnter __P((struct inode *, struct vnode *,
									struct componentname *));
int ext2fs_dirremove __P((struct vnode *, struct componentname *));
int ext2fs_dirrewrite __P((struct inode *, struct inode *,
								struct componentname *));
int ext2fs_dirempty __P((struct inode *, ino_t, struct ucred *));
int ext2fs_checkpath __P((struct inode *, struct inode *, struct ucred *));
d101 1
a101 1
void ext2fs_fragacct __P((struct m_ext2fs *, int, int32_t[], int));
d103 1
a103 1
void	ext2fs_checkoverlap __P((struct buf *, struct inode *));
d107 16
a122 16
int ext2fs_mountroot __P((void));
int ext2fs_mount __P((struct mount *, const char *, void *,
		   struct nameidata *, struct proc *));
int ext2fs_reload __P((struct mount *, struct ucred *, struct proc *));
int ext2fs_mountfs __P((struct vnode *, struct mount *, struct proc *));
int ext2fs_unmount __P((struct mount *, int, struct proc *));
int ext2fs_flushfiles __P((struct mount *, int, struct proc *));
int ext2fs_statfs __P((struct mount *, struct statfs *, struct proc *));
int ext2fs_sync __P((struct mount *, int, struct ucred *, struct proc *));
int ext2fs_vget __P((struct mount *, ino_t, struct vnode **));
int ext2fs_fhtovp __P((struct mount *, struct fid *, struct vnode **));
int ext2fs_vptofh __P((struct vnode *, struct fid *));
int ext2fs_sbupdate __P((struct ufsmount *, int));
int ext2fs_cgupdate __P((struct ufsmount *, int));
int ext2fs_sysctl __P((int *, u_int, void *, size_t *, void *, size_t,
		       struct proc *));
d125 2
a126 2
int ext2fs_read __P((void *));
int ext2fs_write __P((void *));
d129 20
a148 20
int ext2fs_create __P((void *));
int ext2fs_mknod __P((void *));
int ext2fs_open __P((void *));
int ext2fs_access __P((void *));
int ext2fs_getattr __P((void *));
int ext2fs_setattr __P((void *));
int ext2fs_remove __P((void *));
int ext2fs_link __P((void *));
int ext2fs_rename __P((void *));
int ext2fs_mkdir __P((void *));
int ext2fs_rmdir __P((void *));
int ext2fs_symlink __P((void *));
int ext2fs_readlink __P((void *));
int ext2fs_advlock __P((void *));
int ext2fs_vinit __P((struct mount *, int (**specops) __P((void *)),
                      int (**fifoops) __P((void *)), struct vnode **));
int ext2fs_makeinode __P((int, struct vnode *, struct vnode **,
                          struct componentname *cnp));
int ext2fs_fsync __P((void *));
int ext2fs_reclaim __P((void *));
d154 2
a155 2
extern int (**ext2fs_vnodeop_p) __P((void *));
extern int (**ext2fs_specop_p) __P((void *));
d157 1
a157 1
extern int (**ext2fs_fifoop_p) __P((void *));
@


1.12
log
@Big cleanup inspired by NetBSD with some parts of the code from NetBSD.
 - get rid of VOP_BALLOCN and VOP_SIZE
 - move the generic getpages and putpages into miscfs/genfs
 - create a genfs_node which must be added to the top of the private portion
   of each vnode for filsystems that want to use genfs_{get,put}pages
 - rename genfs_mmap to vop_generic_mmap
@
text
@d1 2
a2 2
/*	$OpenBSD: ext2fs_extern.h,v 1.11 2001/11/27 05:27:12 art Exp $	*/
/*	$NetBSD: ext2fs_extern.h,v 1.9 2000/11/27 08:39:53 chs Exp $	*/
a76 3
int ext2fs_gop_alloc __P((struct vnode *, off_t, off_t, int, struct ucred *));
int ext2fs_balloc_range __P((struct vnode *, off_t, off_t, struct ucred *,
			     int));
@


1.12.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.12 2001/12/10 04:45:31 art Exp $	*/
d63 5
a67 5
int ext2fs_alloc(struct inode *, ufs_daddr_t, ufs_daddr_t , struct ucred *,
		   ufs_daddr_t *);
int ext2fs_realloccg(struct inode *, ufs_daddr_t, ufs_daddr_t, int, int,
			  struct ucred *, struct buf **);
int ext2fs_reallocblks(void *);
d70 2
a71 2
daddr_t ext2fs_blkpref(struct inode *, ufs_daddr_t, int, ufs_daddr_t *);
void ext2fs_blkfree(struct inode *, ufs_daddr_t);
d82 1
a82 1
int ext2fs_bmap(void *);
d85 1
a85 1
int ext2fs_init(struct vfsconf *);
d89 1
a89 1
int ext2fs_inactive(void *);
d92 9
a100 9
int ext2fs_readdir(void *);
int ext2fs_lookup(void *);
int ext2fs_direnter(struct inode *, struct vnode *,
									struct componentname *);
int ext2fs_dirremove(struct vnode *, struct componentname *);
int ext2fs_dirrewrite(struct inode *, struct inode *,
								struct componentname *);
int ext2fs_dirempty(struct inode *, ino_t, struct ucred *);
int ext2fs_checkpath(struct inode *, struct inode *, struct ucred *);
d104 1
a104 1
void ext2fs_fragacct(struct m_ext2fs *, int, int32_t[], int);
d106 1
a106 1
void	ext2fs_checkoverlap(struct buf *, struct inode *);
d110 16
a125 16
int ext2fs_mountroot(void);
int ext2fs_mount(struct mount *, const char *, void *,
		   struct nameidata *, struct proc *);
int ext2fs_reload(struct mount *, struct ucred *, struct proc *);
int ext2fs_mountfs(struct vnode *, struct mount *, struct proc *);
int ext2fs_unmount(struct mount *, int, struct proc *);
int ext2fs_flushfiles(struct mount *, int, struct proc *);
int ext2fs_statfs(struct mount *, struct statfs *, struct proc *);
int ext2fs_sync(struct mount *, int, struct ucred *, struct proc *);
int ext2fs_vget(struct mount *, ino_t, struct vnode **);
int ext2fs_fhtovp(struct mount *, struct fid *, struct vnode **);
int ext2fs_vptofh(struct vnode *, struct fid *);
int ext2fs_sbupdate(struct ufsmount *, int);
int ext2fs_cgupdate(struct ufsmount *, int);
int ext2fs_sysctl(int *, u_int, void *, size_t *, void *, size_t,
		       struct proc *);
d128 2
a129 2
int ext2fs_read(void *);
int ext2fs_write(void *);
d132 20
a151 20
int ext2fs_create(void *);
int ext2fs_mknod(void *);
int ext2fs_open(void *);
int ext2fs_access(void *);
int ext2fs_getattr(void *);
int ext2fs_setattr(void *);
int ext2fs_remove(void *);
int ext2fs_link(void *);
int ext2fs_rename(void *);
int ext2fs_mkdir(void *);
int ext2fs_rmdir(void *);
int ext2fs_symlink(void *);
int ext2fs_readlink(void *);
int ext2fs_advlock(void *);
int ext2fs_vinit(struct mount *, int (**specops)(void *),
                 int (**fifoops)(void *), struct vnode **);
int ext2fs_makeinode(int, struct vnode *, struct vnode **,
                     struct componentname *cnp);
int ext2fs_fsync(void *);
int ext2fs_reclaim(void *);
d157 2
a158 2
extern int (**ext2fs_vnodeop_p)(void *);
extern int (**ext2fs_specop_p)(void *);
d160 1
a160 1
extern int (**ext2fs_fifoop_p)(void *);
@


1.11
log
@Merge in the unified buffer cache code as found in NetBSD 2001/03/10. The
code is written mostly by Chuck Silvers <chuq@@chuq.com>/<chs@@netbsd.org>.

Tested for the past few weeks by many developers, should be in a pretty stable
state, but will require optimizations and additional cleanups.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.10 2001/09/18 00:39:15 art Exp $	*/
d77 1
a77 1
int ext2fs_ballocn __P((void *));
@


1.10
log
@clean
@
text
@d1 2
a2 2
/*	$OpenBSD: ext2fs_extern.h,v 1.9 2001/06/23 02:07:51 csapuntz Exp $	*/
/*	$NetBSD: ext2fs_extern.h,v 1.1 1997/06/11 09:33:55 bouyer Exp $	*/
d77 3
@


1.9
log
@Privatize several vnode operations that are not used by the generic code.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.8 2001/02/20 01:50:12 assar Exp $	*/
d63 3
a65 3
int ext2fs_alloc __P((struct inode *, daddr_t, daddr_t , struct ucred *,
		   daddr_t *));
int ext2fs_realloccg __P((struct inode *, daddr_t, daddr_t, int, int ,
d70 2
a71 2
daddr_t ext2fs_blkpref __P((struct inode *, daddr_t, int, daddr_t *));
void ext2fs_blkfree __P((struct inode *, daddr_t));
a100 1
int ext2fs_blkatoff __P((void *));
@


1.8
log
@use void * consistently in vfs_mount and sys_mount.  ok @@art
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.7 2000/04/26 23:24:40 jasoni Exp $	*/
d68 2
a69 1
int ext2fs_valloc __P((void *));
d72 1
a72 1
int ext2fs_vfree __P((void *));
d75 2
a76 2
int ext2fs_balloc __P((struct inode *, daddr_t, int, struct ucred *,
			struct buf **, int));
d83 3
a85 2
int ext2fs_update __P((void *));
int ext2fs_truncate __P((void *));
d100 1
@


1.7
log
@Support for ext2fs rev. 1 (from NetBSD)
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.6 2000/02/07 04:57:18 assar Exp $	*/
d106 1
a106 1
int ext2fs_mount __P((struct mount *, const char *, caddr_t,
@


1.6
log
@update to use new checkexp vfs operation
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.5 1998/02/08 22:41:48 tholo Exp $	*/
d58 2
d147 1
@


1.6.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.8 2001/02/20 01:50:12 assar Exp $	*/
a57 2
extern struct pool ext2fs_inode_pool;		/* memory pool for inodes */

d104 1
a104 1
int ext2fs_mount __P((struct mount *, const char *, void *,
a144 1

@


1.6.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.6.2.1 2001/05/14 22:47:39 niklas Exp $	*/
d68 1
a68 2
int ext2fs_inode_alloc(struct inode *pip, int mode, struct ucred *, 
    struct vnode **);
d71 1
a71 1
int ext2fs_inode_free(struct inode *pip, ino_t ino, int mode);
d74 2
a75 2
int ext2fs_buf_alloc(struct inode *, daddr_t, int, struct ucred *,
			struct buf **, int);
d82 2
a83 3
int ext2fs_update(struct inode *ip, struct timespec *atime,
    struct timespec *mtime, int waitfor);
int ext2fs_truncate(struct inode *, off_t, int, struct ucred *);
a97 1
int ext2fs_bufatoff(struct inode *, off_t, char **, struct buf **);
@


1.6.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.6.2.2 2001/07/04 11:00:42 niklas Exp $	*/
d63 3
a65 3
int ext2fs_alloc __P((struct inode *, ufs_daddr_t, ufs_daddr_t , struct ucred *,
		   ufs_daddr_t *));
int ext2fs_realloccg __P((struct inode *, ufs_daddr_t, ufs_daddr_t, int, int,
d70 2
a71 2
daddr_t ext2fs_blkpref __P((struct inode *, ufs_daddr_t, int, ufs_daddr_t *));
void ext2fs_blkfree __P((struct inode *, ufs_daddr_t));
d101 1
@


1.6.2.4
log
@Merge in -current
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: ext2fs_extern.h,v 1.9 2000/11/27 08:39:53 chs Exp $	*/
a76 3
int ext2fs_ballocn __P((void *));
int ext2fs_balloc_range __P((struct vnode *, off_t, off_t, struct ucred *,
			     int));
@


1.6.2.5
log
@Merge in trunk
@
text
@d2 1
a2 1
/*	$NetBSD: ext2fs_extern.h,v 1.1 1997/06/11 09:33:55 bouyer Exp $	*/
d77 3
@


1.6.2.6
log
@Merge in -current from roughly a week ago
@
text
@d63 5
a67 5
int ext2fs_alloc(struct inode *, ufs_daddr_t, ufs_daddr_t , struct ucred *,
		   ufs_daddr_t *);
int ext2fs_realloccg(struct inode *, ufs_daddr_t, ufs_daddr_t, int, int,
			  struct ucred *, struct buf **);
int ext2fs_reallocblks(void *);
d70 2
a71 2
daddr_t ext2fs_blkpref(struct inode *, ufs_daddr_t, int, ufs_daddr_t *);
void ext2fs_blkfree(struct inode *, ufs_daddr_t);
d79 1
a79 1
int ext2fs_bmap(void *);
d82 1
a82 1
int ext2fs_init(struct vfsconf *);
d86 1
a86 1
int ext2fs_inactive(void *);
d89 9
a97 9
int ext2fs_readdir(void *);
int ext2fs_lookup(void *);
int ext2fs_direnter(struct inode *, struct vnode *,
									struct componentname *);
int ext2fs_dirremove(struct vnode *, struct componentname *);
int ext2fs_dirrewrite(struct inode *, struct inode *,
								struct componentname *);
int ext2fs_dirempty(struct inode *, ino_t, struct ucred *);
int ext2fs_checkpath(struct inode *, struct inode *, struct ucred *);
d101 1
a101 1
void ext2fs_fragacct(struct m_ext2fs *, int, int32_t[], int);
d103 1
a103 1
void	ext2fs_checkoverlap(struct buf *, struct inode *);
d107 16
a122 16
int ext2fs_mountroot(void);
int ext2fs_mount(struct mount *, const char *, void *,
		   struct nameidata *, struct proc *);
int ext2fs_reload(struct mount *, struct ucred *, struct proc *);
int ext2fs_mountfs(struct vnode *, struct mount *, struct proc *);
int ext2fs_unmount(struct mount *, int, struct proc *);
int ext2fs_flushfiles(struct mount *, int, struct proc *);
int ext2fs_statfs(struct mount *, struct statfs *, struct proc *);
int ext2fs_sync(struct mount *, int, struct ucred *, struct proc *);
int ext2fs_vget(struct mount *, ino_t, struct vnode **);
int ext2fs_fhtovp(struct mount *, struct fid *, struct vnode **);
int ext2fs_vptofh(struct vnode *, struct fid *);
int ext2fs_sbupdate(struct ufsmount *, int);
int ext2fs_cgupdate(struct ufsmount *, int);
int ext2fs_sysctl(int *, u_int, void *, size_t *, void *, size_t,
		       struct proc *);
d125 2
a126 2
int ext2fs_read(void *);
int ext2fs_write(void *);
d129 20
a148 20
int ext2fs_create(void *);
int ext2fs_mknod(void *);
int ext2fs_open(void *);
int ext2fs_access(void *);
int ext2fs_getattr(void *);
int ext2fs_setattr(void *);
int ext2fs_remove(void *);
int ext2fs_link(void *);
int ext2fs_rename(void *);
int ext2fs_mkdir(void *);
int ext2fs_rmdir(void *);
int ext2fs_symlink(void *);
int ext2fs_readlink(void *);
int ext2fs_advlock(void *);
int ext2fs_vinit(struct mount *, int (**specops)(void *),
                 int (**fifoops)(void *), struct vnode **);
int ext2fs_makeinode(int, struct vnode *, struct vnode **,
                     struct componentname *cnp);
int ext2fs_fsync(void *);
int ext2fs_reclaim(void *);
d154 2
a155 2
extern int (**ext2fs_vnodeop_p)(void *);
extern int (**ext2fs_specop_p)(void *);
d157 1
a157 1
extern int (**ext2fs_fifoop_p)(void *);
@


1.6.2.7
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.6.2.6 2002/03/28 14:54:25 niklas Exp $	*/
d17 5
a21 1
 * 3. Neither the name of the University nor the names of its contributors
d63 3
a65 3
int ext2fs_alloc(struct inode *, ufs1_daddr_t, ufs1_daddr_t , struct ucred *,
		   ufs1_daddr_t *);
int ext2fs_realloccg(struct inode *, ufs1_daddr_t, ufs1_daddr_t, int, int,
d70 2
a71 2
daddr_t ext2fs_blkpref(struct inode *, ufs1_daddr_t, int, ufs1_daddr_t *);
void ext2fs_blkfree(struct inode *, ufs1_daddr_t);
@


1.6.2.8
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d139 2
@


1.6.2.9
log
@Merge with the trunk
@
text
@a142 1
int ext2fsfifo_reclaim(void *);
@


1.5
log
@Updates to match type changes in syscall tables
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.4 1997/11/06 05:59:14 csapuntz Exp $	*/
d113 1
a113 2
int ext2fs_fhtovp __P((struct mount *, struct fid *, struct mbuf *,
			struct vnode **, int *, struct ucred **));
d117 2
@


1.4
log
@Updates for VFS Lite 2 + soft update.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.3 1997/06/12 21:09:33 downsj Exp $	*/
d104 2
a105 2
int ext2fs_mount __P((struct mount *, char *, caddr_t, struct nameidata *,
		   struct proc *));
@


1.3
log
@Sync with NetBSD, mostly cosmetic.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_extern.h,v 1.2 1997/05/30 08:33:52 downsj Exp $	*/
d54 1
d79 1
a79 1
void ext2fs_init __P((void));
@


1.2
log
@Integrate new ext2fs, reverting ufs support for the old one.
@
text
@d1 2
a2 4
/*	$OpenBSD$	*/
/*	$NetBSD: ffs_extern.h,v 1.5 1996/09/01 23:49:18 mycroft Exp $	*/

/* Modified for EXT2FS on NetBSD by Manuel Bouyer, April 1997 */
d5 1
d38 1
d63 1
a63 1
		       struct ucred *, struct buf **));
d72 1
a72 1
		    struct buf **, int));
d113 1
a113 1
		    struct vnode **, int *, struct ucred **));
d137 2
a138 2
int ext2fs_vinit __P(( struct mount *, int (**specops) __P((void *)),
                       int (**fifoops) __P((void *)), struct vnode **));
@


1.1
log
@Initial revision
@
text
@d1 1
d103 1
a103 1
int ext2fs_mount __P((struct mount *, const char *, void *, struct nameidata *,
d141 1
a142 2

#define ext2fs_fsync genfs_fsync
@


1.1.1.1
log
@Non-GPLd ext2fs code from Manuel, unmodified.
@
text
@@
