head	1.35;
access;
symbols
	OPENBSD_6_1:1.35.0.4
	OPENBSD_6_1_BASE:1.35
	OPENBSD_6_0:1.34.0.4
	OPENBSD_6_0_BASE:1.34
	OPENBSD_5_9:1.34.0.2
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.33.0.4
	OPENBSD_5_8_BASE:1.33
	OPENBSD_5_7:1.32.0.4
	OPENBSD_5_7_BASE:1.32
	OPENBSD_5_6:1.32.0.2
	OPENBSD_5_6_BASE:1.32
	OPENBSD_5_5:1.30.0.4
	OPENBSD_5_5_BASE:1.30
	OPENBSD_5_4:1.28.0.2
	OPENBSD_5_4_BASE:1.28
	OPENBSD_5_3:1.27.0.8
	OPENBSD_5_3_BASE:1.27
	OPENBSD_5_2:1.27.0.6
	OPENBSD_5_2_BASE:1.27
	OPENBSD_5_1_BASE:1.27
	OPENBSD_5_1:1.27.0.4
	OPENBSD_5_0:1.27.0.2
	OPENBSD_5_0_BASE:1.27
	OPENBSD_4_9:1.23.0.2
	OPENBSD_4_9_BASE:1.23
	OPENBSD_4_8:1.20.0.4
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.19.0.4
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.18.0.6
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.4
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.2
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.17.0.2
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.14.0.4
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.13.0.2
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.6
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.4
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.2
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.18
	OPENBSD_2_8:1.3.0.16
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.14
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.12
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.10
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.8
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.6
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	R19970424:1.1.1.1
	BOUYER:1.1.1;
locks; strict;
comment	@ * @;


1.35
date	2016.08.10.07.53.02;	author natano;	state Exp;
branches;
next	1.34;
commitid	q0VebnKSesRYhwvy;

1.34
date	2016.02.04.12.45.03;	author mikeb;	state Exp;
branches;
next	1.33;
commitid	BtQZV8VbJP1k9tKY;

1.33
date	2015.03.14.03.38.52;	author jsg;	state Exp;
branches;
next	1.32;
commitid	p4LJxGKbi0BU2cG6;

1.32
date	2014.07.13.16.59.35;	author pelikan;	state Exp;
branches;
next	1.31;
commitid	zGe0z6RRYbZJpA8u;

1.31
date	2014.07.13.13.28.26;	author pelikan;	state Exp;
branches;
next	1.30;
commitid	dOiPqBMzR47FMb48;

1.30
date	2013.11.02.00.08.17;	author krw;	state Exp;
branches;
next	1.29;

1.29
date	2013.11.01.17.36.19;	author krw;	state Exp;
branches;
next	1.28;

1.28
date	2013.06.11.16.42.18;	author deraadt;	state Exp;
branches;
next	1.27;

1.27
date	2011.07.04.20.35.35;	author deraadt;	state Exp;
branches;
next	1.26;

1.26
date	2011.07.04.04.30.41;	author tedu;	state Exp;
branches;
next	1.25;

1.25
date	2011.07.03.18.23.10;	author tedu;	state Exp;
branches;
next	1.24;

1.24
date	2011.07.02.15.52.25;	author thib;	state Exp;
branches;
next	1.23;

1.23
date	2010.12.21.20.14.44;	author thib;	state Exp;
branches;
next	1.22;

1.22
date	2010.09.10.16.34.09;	author thib;	state Exp;
branches;
next	1.21;

1.21
date	2010.09.06.23.44.10;	author thib;	state Exp;
branches;
next	1.20;

1.20
date	2009.08.21.11.38.18;	author jasper;	state Exp;
branches;
next	1.19;

1.19
date	2009.06.02.12.35.05;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2008.01.05.19.49.26;	author otto;	state Exp;
branches;
next	1.17;

1.17
date	2007.06.17.20.15.25;	author jasper;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.02.00.45.50;	author pedro;	state Exp;
branches;
next	1.15;

1.15
date	2007.05.26.20.26.51;	author pedro;	state Exp;
branches;
next	1.14;

1.14
date	2006.07.18.22.44.33;	author pedro;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.11.20.46.28;	author pedro;	state Exp;
branches;
next	1.12;

1.12
date	2005.07.03.20.14.01;	author drahn;	state Exp;
branches;
next	1.11;

1.11
date	2004.01.20.03.44.06;	author tedu;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.02.23.28.22;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.26.18.33.16;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2001.12.19.08.58.07;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.27.05.27.12;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.18.01.39.13;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.18.00.34.49;	author art;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.23.02.07.52;	author csapuntz;	state Exp;
branches;
next	1.3;

1.3
date	97.06.12.21.09.35;	author downsj;	state Exp;
branches
	1.3.12.1;
next	1.2;

1.2
date	97.05.30.08.34.02;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	97.05.30.05.18.51;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.30.05.18.51;	author downsj;	state Exp;
branches;
next	;

1.3.12.1
date	2001.07.04.11.00.45;	author niklas;	state Exp;
branches;
next	1.3.12.2;

1.3.12.2
date	2001.10.31.03.32.13;	author nate;	state Exp;
branches;
next	1.3.12.3;

1.3.12.3
date	2001.12.05.01.02.41;	author niklas;	state Exp;
branches;
next	1.3.12.4;

1.3.12.4
date	2002.03.06.02.17.13;	author niklas;	state Exp;
branches;
next	1.3.12.5;

1.3.12.5
date	2003.06.07.11.09.08;	author ho;	state Exp;
branches;
next	1.3.12.6;

1.3.12.6
date	2004.02.19.11.01.36;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.35
log
@ext2fs only has one set of specops/fifoops
ok mpi tedu
@
text
@/*	$OpenBSD: ext2fs_subr.c,v 1.34 2016/02/04 12:45:03 mikeb Exp $	*/
/*	$NetBSD: ext2fs_subr.c,v 1.1 1997/06/11 09:34:03 bouyer Exp $	*/

/*
 * Copyright (c) 1997 Manuel Bouyer.
 * Copyright (c) 1982, 1986, 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ffs_subr.c	8.2 (Berkeley) 9/21/93
 * Modified for ext2fs by Manuel Bouyer.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/vnode.h>
#include <sys/mount.h>
#include <sys/buf.h>
#include <sys/specdev.h>

#include <ufs/ufs/quota.h>
#include <ufs/ufs/inode.h>
#include <ufs/ufs/ufsmount.h>

#include <ufs/ext2fs/ext2fs.h>
#include <ufs/ext2fs/ext2fs_extern.h>
#include <ufs/ext2fs/ext2fs_extents.h>

#ifdef _KERNEL

/*
 * Return buffer with the contents of block "offset" from the beginning of
 * directory "ip".  If "res" is non-zero, fill it in with a pointer to the
 * remaining space in the directory.
 */
int
ext2fs_bufatoff(struct inode *ip, off_t offset, char **res, struct buf **bpp)
{
	struct vnode *vp;
	struct m_ext2fs *fs;
	struct buf *bp;
	daddr_t lbn, pos;
	int error;

	vp = ITOV(ip);
	fs = ip->i_e2fs;
	lbn = lblkno(fs, offset);

	if (ip->i_e2din->e2di_flags & EXT4_EXTENTS) {
		struct ext4_extent_path path;
		struct ext4_extent *ep;

		memset(&path, 0, sizeof path);
		if (ext4_ext_find_extent(fs, ip, lbn, &path) == NULL ||
		    (ep = path.ep_ext) == NULL)
			goto normal;

		if (path.ep_bp != NULL) {
			brelse(path.ep_bp);
			path.ep_bp = NULL;
		}
		pos = lbn - ep->e_blk + (((daddr_t)ep->e_start_hi << 32) | ep->e_start_lo);
		error = bread(ip->i_devvp, fsbtodb(fs, pos), fs->e2fs_bsize, &bp);
		if (error) {
			brelse(bp);
			return (error);
		}

		if (res)
			*res = (char *)bp->b_data + blkoff(fs, offset);

		*bpp = bp;

		return (0);
	}

 normal:
	*bpp = NULL;
	if ((error = bread(vp, lbn, fs->e2fs_bsize, &bp)) != 0) {
		brelse(bp);
		return (error);
	}
	if (res)
		*res = (char *)bp->b_data + blkoff(fs, offset);
	*bpp = bp;
	return (0);
}
#endif

#if defined(_KERNEL) && defined(DIAGNOSTIC)
void
ext2fs_checkoverlap(struct buf *bp, struct inode *ip)
{
	struct buf *ep;
	struct vnode *vp;
	daddr_t start, last;

	start = bp->b_blkno;
	last = start + btodb(bp->b_bcount) - 1;
	LIST_FOREACH(ep, &bufhead, b_list) {
		if (ep == bp || (ep->b_flags & B_INVAL) ||
			ep->b_vp == NULLVP)
			continue;
		if (VOP_BMAP(ep->b_vp, 0, &vp, NULL, NULL))
			continue;
		if (vp != ip->i_devvp)
			continue;
		/* look for overlap */
		if (ep->b_bcount == 0 || ep->b_blkno > last ||
			ep->b_blkno + btodb(ep->b_bcount) <= start)
			continue;
		vprint("Disk overlap", vp);
		printf("\tstart %lld, end %lld overlap start %lld, end %lld\n",
			start, last, (long long)ep->b_blkno,
			(long long)(ep->b_blkno + btodb(ep->b_bcount) - 1));
		panic("Disk buffer overlap");
	}
}
#endif /* DIAGNOSTIC */

/*
 * Initialize the vnode associated with a new inode, handle aliased vnodes.
 */
int
ext2fs_vinit(struct mount *mp, struct vnode **vpp)
{
	struct inode *ip;
	struct vnode *vp, *nvp;
	struct timeval tv;

	vp = *vpp;
	ip = VTOI(vp);
	vp->v_type = IFTOVT(ip->i_e2fs_mode);

	switch(vp->v_type) {
	case VCHR:
	case VBLK:
		vp->v_op = &ext2fs_specvops;

		nvp = checkalias(vp, letoh32(ip->i_e2din->e2di_rdev), mp);
		if (nvp != NULL) {
			/*
			 * Discard unneeded vnode, but save its inode. Note
			 * that the lock is carried over in the inode to the
			 * replacement vnode.
			 */
			nvp->v_data = vp->v_data;
			vp->v_data = NULL;
			vp->v_op = &spec_vops;
#ifdef VFSLCKDEBUG
			vp->v_flag &= ~VLOCKSWORK;
#endif
			vrele(vp);
			vgone(vp);
			/* Reinitialize aliased vnode. */
			vp = nvp;
			ip->i_vnode = vp;
		}

		break;

	case VFIFO:
#ifdef FIFO
		vp->v_op = &ext2fs_fifovops;
		break;
#else
		return (EOPNOTSUPP);
#endif /* FIFO */

	default:

		break;
	}

	if (ip->i_number == EXT2_ROOTINO)
		vp->v_flag |= VROOT;

	/* Initialize modrev times */
	getmicrouptime(&tv);
	ip->i_modrev = (u_quad_t)tv.tv_sec << 32;
	ip->i_modrev |= (u_quad_t)tv.tv_usec * 4294;

	*vpp = vp;

	return (0);
}
@


1.34
log
@Prevent signed overflow when calculating i_modrev initial value

Reported and fixed by Martin Natano <natano at natano ! net>, thanks!
ok stefan
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.33 2015/03/14 03:38:52 jsg Exp $	*/
d148 1
a148 2
ext2fs_vinit(struct mount *mp, struct vops *specops,
    struct vops *fifoops, struct vnode **vpp)
d161 1
a161 1
		vp->v_op = specops;
d187 1
a187 1
		vp->v_op = fifoops;
@


1.33
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.32 2014/07/13 16:59:35 pelikan Exp $	*/
a51 19
union _qcvt {
	int64_t qcvt;
	int32_t val[2];
};

#define SETHIGH(q, h) {			\
	union _qcvt tmp;		\
	tmp.qcvt = (q);			\
	tmp.val[_QUAD_HIGHWORD] = (h);	\
	(q) = tmp.qcvt;			\
}

#define SETLOW(q, l) {			\
	union _qcvt tmp;		\
	tmp.qcvt = (q);			\
	tmp.val[_QUAD_LOWWORD] = (l);	\
	(q) = tmp.qcvt;			\
}

d204 2
a205 2
	SETHIGH(ip->i_modrev, tv.tv_sec);
	SETLOW(ip->i_modrev, tv.tv_usec * 4294);
@


1.32
log
@kill fs2hXX/h2fsXX macros with letohXX/htoleXX

The reason being that ext2 structures are little-endian but JBD2 journal
is big-endian.  Don't confuse readers by talking about "file system endian".

Some KNF while there.

ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.31 2014/07/13 13:28:26 pelikan Exp $	*/
a50 2

#include <miscfs/fifofs/fifo.h>
@


1.31
log
@ext4 (extents) read support

Tested on amd64 with > 4GB files and 50,000 subdirectories.
From FreeBSD, thanks!

ok deraadt guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.30 2013/11/02 00:08:17 krw Exp $	*/
d185 1
a185 1
		nvp = checkalias(vp, fs2h32(ip->i_e2din->e2di_rdev), mp);
@


1.30
log
@No need to cast constants or simple variables to (daddr_t). Use
(u_int64_t) instead of (daddr_t) when casting a variable in an
expression passed to DL_SETDSIZE().

Change a variable counting open files from daddr_t to int64_t.

ok deraadt@@ with the tweak to fix that pesky expression.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.29 2013/11/01 17:36:19 krw Exp $	*/
d50 1
d86 1
a86 1
	int32_t lbn;
d93 29
@


1.29
log
@Sprinkle (long long) casts where %lld is being used to print daddr_t
variables. Some random whitespace/knf repairs encountered on the way.

ok miod@@ on inspection, feedback & more suggestions from millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.28 2013/06/11 16:42:18 deraadt Exp $	*/
d118 1
a118 1
		if (VOP_BMAP(ep->b_vp, (daddr_t)0, &vp, NULL, NULL))
@


1.28
log
@final removal of daddr64_t.  daddr_t has been 64 bit for a long enough
test period; i think 3 years ago the last bugs fell out.
ok otto beck others
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.27 2011/07/04 20:35:35 deraadt Exp $	*/
d128 2
a129 2
			start, last, ep->b_blkno,
			ep->b_blkno + btodb(ep->b_bcount) - 1);
@


1.27
log
@move the specfs code to a place people can see it; ok guenther thib krw
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.26 2011/07/04 04:30:41 tedu Exp $	*/
d110 1
a110 1
	daddr64_t start, last;
d118 1
a118 1
		if (VOP_BMAP(ep->b_vp, (daddr64_t)0, &vp, NULL, NULL))
@


1.26
log
@bread does nothing with its ucred argument.  remove it.  ok matthew
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.25 2011/07/03 18:23:10 tedu Exp $	*/
d42 1
a50 1
#include <miscfs/specfs/specdev.h>
@


1.25
log
@correctify NULL 0 confusion
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.24 2011/07/02 15:52:25 thib Exp $	*/
d93 1
a93 1
	if ((error = bread(vp, lbn, fs->e2fs_bsize, NOCRED, &bp)) != 0) {
@


1.24
log
@rename VFSDEBUG to VFLCKDEBUG;

prompted by tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.23 2010/12/21 20:14:44 thib Exp $	*/
d118 1
a118 1
		if (VOP_BMAP(ep->b_vp, (daddr64_t)0, &vp, (daddr64_t)0, NULL))
@


1.23
log
@Bring back the "End the VOP experiment." diff, naddy's issues where
unrelated, and his alpha is much happier now.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.22 2010/09/10 16:34:09 thib Exp $	*/
d165 1
a165 1
#ifdef VFSDEBUG
@


1.22
log
@Backout the VOP diff until the issues naddy was seeing on alpha (gcc3)
have been resolved.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.21 2010/09/06 23:44:10 thib Exp $	*/
d139 2
a140 2
ext2fs_vinit(struct mount *mp, int (**specops)(void *),
    int (**fifoops)(void *), struct vnode **vpp)
d164 1
a164 1
			vp->v_op = spec_vnodeop_p;
@


1.21
log
@End the VOP experiment. Instead of the ridicolusly complicated operation
vector setup that has questionable features (that have, as far as I can
tell never been used in practice, atleast not in OpenBSD), remove all
the gunk and favor a simple struct full of function pointers that get
set directly by each of the filesystems.

Removes gobs of ugly code and makes things simpler by a magnitude.

The only downside of this is that we loose the vnoperate feature so
the spec/fifo operations of the filesystems need to be kept in sync
with specfs and fifofs, this is no big deal as the API it self is pretty
static.

Many thanks to armani@@ who pulled an earlier version of this diff to
current after c2k10 and Gabriel Kihlman on tech@@ for testing.

Liked by many. "come on, find your balls" deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.20 2009/08/21 11:38:18 jasper Exp $	*/
d139 2
a140 2
ext2fs_vinit(struct mount *mp, struct vops *specops,
    struct vops *fifoops, struct vnode **vpp)
d164 1
a164 1
			vp->v_op = &spec_vops;
@


1.20
log
@- change two variables to daddr64_t, eventhough they won't overflow
as ext2fs doesn't support filesystems so large, it's more correct this way
- fix a format string to %lld for daddr64_t

ok tedu@@ thib@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.19 2009/06/02 12:35:05 deraadt Exp $	*/
d139 2
a140 2
ext2fs_vinit(struct mount *mp, int (**specops)(void *),
    int (**fifoops)(void *), struct vnode **vpp)
d164 1
a164 1
			vp->v_op = spec_vnodeop_p;
@


1.19
log
@blkno's are 64 bit so need %llu, found by Parfait
ok oga
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.18 2008/01/05 19:49:26 otto Exp $	*/
a108 1
	int32_t start, last;
d110 1
d127 1
a127 1
		printf("\tstart %d, end %d overlap start %llu, end %llu\n",
@


1.18
log
@Make the ffs code 64-bit disk block number clean.  Based on a diff
from Pedro Martelleto.  Two things remain: the on-disk quota
structures are still 32-bit and statfs does not do 64-bit numbers
yet. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.17 2007/06/17 20:15:25 jasper Exp $	*/
d127 1
a127 1
		printf("\tstart %d, end %d overlap start %d, end %ld\n",
@


1.17
log
@ansify/de-register.
no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.16 2007/06/02 00:45:50 pedro Exp $	*/
d118 1
a118 1
		if (VOP_BMAP(ep->b_vp, (daddr_t)0, &vp, (daddr_t)0, NULL))
@


1.16
log
@ufs1_daddr_t cleanup, okay thib@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.15 2007/05/26 20:26:51 pedro Exp $	*/
d106 1
a106 3
ext2fs_checkoverlap(bp, ip)
	struct buf *bp;
	struct inode *ip;
@


1.15
log
@Dynamic buffer cache. Initial diff from mickey@@, okay art@@ beck@@ toby@@
deraadt@@ dlg@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.14 2006/07/18 22:44:33 pedro Exp $	*/
d85 1
a85 1
	ufs1_daddr_t lbn;
d111 1
a111 1
	ufs1_daddr_t start, last;
@


1.14
log
@Swap inode's associated device number on big-endian architectures when
calling checkalias(), Daniel Junglas <dju@@sysgo.com>, thanks.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.13 2005/12/11 20:46:28 pedro Exp $	*/
d110 1
a110 1
	struct buf *ebp, *ep;
a113 1
	ebp = &buf[nbuf];
d116 1
a116 1
	for (ep = buf; ep < ebp; ep++) {
@


1.13
log
@inode/dinode separation for ext2fs
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.12 2005/07/03 20:14:01 drahn Exp $	*/
d158 1
a158 1
		nvp = checkalias(vp, ip->i_e2din->e2di_rdev, mp);
@


1.12
log
@Extended Attributes was a piece to get to ACLs, however ACLs have not
been worked on, so EA is pointless. Also the code is not enabled
in GENERIC so it is not being tested or maintained.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.11 2004/01/20 03:44:06 tedu Exp $	*/
d50 22
d137 68
@


1.11
log
@some pieces of ufs2.  help testing otto sturm
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.10 2003/06/02 23:28:22 millert Exp $	*/
a44 1
#include <ufs/ufs/extattr.h>
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.9 2003/05/26 18:33:16 tedu Exp $	*/
d40 1
d42 1
d45 3
@


1.9
log
@fiddle with some type names.  change most instances of ufs_daddr_t to
ufs1_daddr_t, a few to daddr_t.  ufs_daddr_t typedef is retained, but consider
it deprecated.  no functional changes.  inspired by freebsd.  ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.8 2001/12/19 08:58:07 art Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@UBC was a disaster. It worked very good when it worked, but on some
machines or some configurations or in some phase of the moon (we actually
don't know when or why) files disappeared. Since we've not been able to
track down the problem in two weeks intense debugging and we need -current
to be stable, back out everything to a state it had before UBC.

We apologise for the inconvenience.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.6 2001/09/18 01:39:13 art Exp $	*/
d63 1
a63 1
	ufs_daddr_t lbn;
d89 1
a89 1
	ufs_daddr_t start, last;
@


1.7
log
@Merge in the unified buffer cache code as found in NetBSD 2001/03/10. The
code is written mostly by Chuck Silvers <chuq@@chuq.com>/<chs@@netbsd.org>.

Tested for the past few weeks by many developers, should be in a pretty stable
state, but will require optimizations and additional cleanups.
@
text
@d1 2
a2 1
/*	$NetBSD: ext2fs_subr.c,v 1.4 2000/03/30 12:41:11 augustss Exp $	*/
d99 1
a99 1
		if (VOP_BMAP(ep->b_vp, (ufs_daddr_t)0, &vp, (ufs_daddr_t)0, NULL))
@


1.6
log
@various cleanups from NetBSD
@
text
@d1 1
a1 2
/*	$OpenBSD: ext2fs_subr.c,v 1.5 2001/09/18 00:34:49 art Exp $	*/
/*	$NetBSD: ext2fs_subr.c,v 1.1 1997/06/11 09:34:03 bouyer Exp $	*/
d98 1
a98 1
		if (VOP_BMAP(ep->b_vp, (daddr_t)0, &vp, (daddr_t)0, NULL))
@


1.5
log
@Reorder includes. (ext2fs_extern.h needs ufs/inode.h)
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.4 2001/06/23 02:07:52 csapuntz Exp $	*/
d63 1
a63 1
	daddr_t lbn;
d88 2
a89 2
	register struct buf *ebp, *ep;
	register daddr_t start, last;
@


1.4
log
@Privatize several vnode operations that are not used by the generic code.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.3 1997/06/12 21:09:35 downsj Exp $	*/
d43 4
a50 4
#include <sys/vnode.h>
#include <sys/buf.h>
#include <ufs/ufs/quota.h>
#include <ufs/ufs/inode.h>
@


1.3
log
@Sync with NetBSD, mostly cosmetic.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.2 1997/05/30 08:34:02 downsj Exp $	*/
d58 1
a58 2
ext2fs_blkatoff(v)
	void *v;
d60 2
a61 8
	struct vop_blkatoff_args /* {
		struct vnode *a_vp;
		off_t a_offset;
		char **a_res;
		struct buf **a_bpp;
	} */ *ap = v;
	struct inode *ip;
	register struct m_ext2fs *fs;
d66 1
a66 1
	ip = VTOI(ap->a_vp);
d68 1
a68 1
	lbn = lblkno(fs, ap->a_offset);
d70 2
a71 2
	*ap->a_bpp = NULL;
	if ((error = bread(ap->a_vp, lbn, fs->e2fs_bsize, NOCRED, &bp)) != 0) {
d75 3
a77 3
	if (ap->a_res)
		*ap->a_res = (char *)bp->b_data + blkoff(fs, ap->a_offset);
	*ap->a_bpp = bp;
@


1.3.12.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.3 1997/06/12 21:09:35 downsj Exp $	*/
d58 2
a59 1
ext2fs_bufatoff(struct inode *ip, off_t offset, char **res, struct buf **bpp)
d61 8
a68 2
	struct vnode *vp;
	struct m_ext2fs *fs;
d73 1
a73 1
	vp = ITOV(ip);
d75 1
a75 1
	lbn = lblkno(fs, offset);
d77 2
a78 2
	*bpp = NULL;
	if ((error = bread(vp, lbn, fs->e2fs_bsize, NOCRED, &bp)) != 0) {
d82 3
a84 3
	if (res)
		*res = (char *)bp->b_data + blkoff(fs, offset);
	*bpp = bp;
@


1.3.12.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.3.12.1 2001/07/04 11:00:45 niklas Exp $	*/
d43 4
a50 4
#include <ufs/ext2fs/ext2fs.h>
#include <ufs/ext2fs/ext2fs_extern.h>

#ifdef _KERNEL
d63 1
a63 1
	ufs_daddr_t lbn;
d88 2
a89 2
	struct buf *ebp, *ep;
	ufs_daddr_t start, last;
@


1.3.12.3
log
@Merge in -current
@
text
@d1 2
a2 1
/*	$NetBSD: ext2fs_subr.c,v 1.4 2000/03/30 12:41:11 augustss Exp $	*/
d99 1
a99 1
		if (VOP_BMAP(ep->b_vp, (ufs_daddr_t)0, &vp, (ufs_daddr_t)0, NULL))
@


1.3.12.4
log
@Merge in trunk
@
text
@d1 1
a1 2
/*	$OpenBSD$	*/
/*	$NetBSD: ext2fs_subr.c,v 1.1 1997/06/11 09:34:03 bouyer Exp $	*/
d98 1
a98 1
		if (VOP_BMAP(ep->b_vp, (daddr_t)0, &vp, (daddr_t)0, NULL))
@


1.3.12.5
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_subr.c,v 1.3.12.4 2002/03/06 02:17:13 niklas Exp $	*/
d17 5
a21 1
 * 3. Neither the name of the University nor the names of its contributors
d63 1
a63 1
	ufs1_daddr_t lbn;
d89 1
a89 1
	ufs1_daddr_t start, last;
@


1.3.12.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a39 1
#include <sys/mount.h>
a40 1

a42 3
#include <ufs/ufs/extattr.h>
#include <ufs/ufs/ufsmount.h>

@


1.2
log
@Integrate new ext2fs, reverting ufs support for the old one.
@
text
@d1 2
a2 4
/*	$OpenBSD$	*/
/*	$NetBSD: ffs_subr.c,v 1.9 1996/10/12 21:58:45 christos Exp $	*/

/* Modified for EXT2FS on NetBSD by Manuel Bouyer, April 1997 */
d5 1
d38 1
d104 1
a104 1
		    ep->b_vp == NULLVP)
d112 1
a112 1
		    ep->b_blkno + btodb(ep->b_bcount) <= start)
d116 2
a117 2
		    start, last, ep->b_blkno,
		    ep->b_blkno + btodb(ep->b_bcount) - 1);
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@Non-GPLd ext2fs code from Manuel, unmodified.
@
text
@@
