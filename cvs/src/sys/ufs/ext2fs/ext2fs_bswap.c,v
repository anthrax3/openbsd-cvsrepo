head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.12
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.10
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.6
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.4.0.30
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.26
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.24
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.22
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.20
	OPENBSD_5_0:1.4.0.18
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.16
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.14
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.10
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.12
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.8
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.6
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.4
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.2
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.22
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.20
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.18
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.16
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.14
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.12
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.10
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.6
	UBC_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2014.07.31.17.37.52;	author pelikan;	state Exp;
branches;
next	1.7;
commitid	0juiBhtI3vf1GIxq;

1.7
date	2014.07.14.08.54.13;	author pelikan;	state Exp;
branches;
next	1.6;
commitid	5pxoUiNNvSjZa1j9;

1.6
date	2014.07.13.13.28.26;	author pelikan;	state Exp;
branches;
next	1.5;
commitid	dOiPqBMzR47FMb48;

1.5
date	2014.07.11.16.04.25;	author pelikan;	state Exp;
branches;
next	1.4;
commitid	lBDZDhRSTdPyvxrd;

1.4
date	2007.06.17.20.15.25;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.06.17.43.14;	author pedro;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.18.09.12.36;	author art;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2001.09.18.00.06.21;	author art;	state Exp;
branches;
next	;

1.2.4.1
date	2001.10.31.03.32.13;	author nate;	state Exp;
branches;
next	;


desc
@@


1.8
log
@use proper on-disk inode size: no more, no less.

Reported by Roman Yakovlev, thanks!

"do it now" deraadt
@
text
@/*	$OpenBSD: ext2fs_bswap.c,v 1.7 2014/07/14 08:54:13 pelikan Exp $	*/
/*	$NetBSD: ext2fs_bswap.c,v 1.6 2000/07/24 00:23:10 mycroft Exp $	*/

/*
 * Copyright (c) 1997 Manuel Bouyer.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#include <sys/types.h>
#if defined(_KERNEL)
#include <sys/systm.h>
#endif

#include <ufs/ext2fs/ext2fs.h>
#include <ufs/ext2fs/ext2fs_dinode.h>

#if !defined(_KERNEL)
#include <string.h>
#endif

/* These functions are only needed if native byte order is not big endian */
#if BYTE_ORDER == BIG_ENDIAN
void
e2fs_sb_bswap(struct ext2fs *old, struct ext2fs *new)
{
	/* preserve unused fields */
	memcpy(new, old, sizeof(struct ext2fs));
	new->e2fs_icount	=	swap32(old->e2fs_icount);
	new->e2fs_bcount	=	swap32(old->e2fs_bcount);
	new->e2fs_rbcount	=	swap32(old->e2fs_rbcount);
	new->e2fs_fbcount	=	swap32(old->e2fs_fbcount);
	new->e2fs_ficount	=	swap32(old->e2fs_ficount);
	new->e2fs_first_dblock	=	swap32(old->e2fs_first_dblock);
	new->e2fs_log_bsize	=	swap32(old->e2fs_log_bsize);
	new->e2fs_log_fsize	=	swap32(old->e2fs_log_fsize);
	new->e2fs_bpg		=	swap32(old->e2fs_bpg);
	new->e2fs_fpg		=	swap32(old->e2fs_fpg);
	new->e2fs_ipg		=	swap32(old->e2fs_ipg);
	new->e2fs_mtime		=	swap32(old->e2fs_mtime);
	new->e2fs_wtime		=	swap32(old->e2fs_wtime);
	new->e2fs_mnt_count	=	swap16(old->e2fs_mnt_count);
	new->e2fs_max_mnt_count	=	swap16(old->e2fs_max_mnt_count);
	new->e2fs_magic		=	swap16(old->e2fs_magic);
	new->e2fs_state		=	swap16(old->e2fs_state);
	new->e2fs_beh		=	swap16(old->e2fs_beh);
	new->e2fs_minrev	=	swap16(old->e2fs_minrev);
	new->e2fs_lastfsck	=	swap32(old->e2fs_lastfsck);
	new->e2fs_fsckintv	=	swap32(old->e2fs_fsckintv);
	new->e2fs_creator	=	swap32(old->e2fs_creator);
	new->e2fs_rev		=	swap32(old->e2fs_rev);
	new->e2fs_ruid		=	swap16(old->e2fs_ruid);
	new->e2fs_rgid		=	swap16(old->e2fs_rgid);
	new->e2fs_first_ino	=	swap32(old->e2fs_first_ino);
	new->e2fs_inode_size	=	swap16(old->e2fs_inode_size);
	new->e2fs_block_group_nr =	swap16(old->e2fs_block_group_nr);
	new->e2fs_features_compat =	swap32(old->e2fs_features_compat);
	new->e2fs_features_incompat =	swap32(old->e2fs_features_incompat);
	new->e2fs_features_rocompat =	swap32(old->e2fs_features_rocompat);
	new->e2fs_algo		=	swap32(old->e2fs_algo);

	/* SOME journaling-related fields. */
	new->e2fs_journal_ino	=	swap32(old->e2fs_journal_ino);
	new->e2fs_journal_dev	=	swap32(old->e2fs_journal_dev);
	new->e2fs_last_orphan	=	swap32(old->e2fs_last_orphan);
	new->e2fs_gdesc_size	=	swap16(old->e2fs_gdesc_size);
	new->e2fs_default_mount_opts	=	swap32(old->e2fs_default_mount_opts);
	new->e2fs_first_meta_bg	=	swap32(old->e2fs_first_meta_bg);
	new->e2fs_mkfs_time	=	swap32(old->e2fs_mkfs_time);
}

void
e2fs_cg_bswap(struct ext2_gd *old, struct ext2_gd *new, int size)
{
	int i;
	for (i=0; i < (size / sizeof(struct  ext2_gd)); i++) {
		new[i].ext2bgd_b_bitmap	= swap32(old[i].ext2bgd_b_bitmap);
		new[i].ext2bgd_i_bitmap	= swap32(old[i].ext2bgd_i_bitmap);
		new[i].ext2bgd_i_tables	= swap32(old[i].ext2bgd_i_tables);
		new[i].ext2bgd_nbfree	= swap16(old[i].ext2bgd_nbfree);
		new[i].ext2bgd_nifree	= swap16(old[i].ext2bgd_nifree);
		new[i].ext2bgd_ndirs	= swap16(old[i].ext2bgd_ndirs);
	}
}

void
e2fs_i_bswap(struct m_ext2fs *fs, struct ext2fs_dinode *old,
    struct ext2fs_dinode *new)
{
	new->e2di_mode		=	swap16(old->e2di_mode);
	new->e2di_uid_low	=	swap16(old->e2di_uid_low);
	new->e2di_gid_low	=	swap16(old->e2di_gid_low);
	new->e2di_uid_high	=	swap16(old->e2di_uid_high);
	new->e2di_gid_high	=	swap16(old->e2di_gid_high);
	new->e2di_nlink		=	swap16(old->e2di_nlink);
	new->e2di_size		=	swap32(old->e2di_size);
	new->e2di_atime		=	swap32(old->e2di_atime);
	new->e2di_ctime		=	swap32(old->e2di_ctime);
	new->e2di_mtime		=	swap32(old->e2di_mtime);
	new->e2di_dtime		=	swap32(old->e2di_dtime);
	new->e2di_nblock	=	swap32(old->e2di_nblock);
	new->e2di_flags		=	swap32(old->e2di_flags);
	new->e2di_gen		=	swap32(old->e2di_gen);
	new->e2di_facl		=	swap32(old->e2di_facl);
	new->e2di_size_hi	=	swap32(old->e2di_size_hi);
	new->e2di_faddr		=	swap32(old->e2di_faddr);
	new->e2di_nblock_hi	=	swap16(old->e2di_nblock_hi);
	new->e2di_facl_hi	=	swap16(old->e2di_facl_hi);
	memcpy(&new->e2di_blocks[0], &old->e2di_blocks[0],
		(NDADDR+NIADDR) * sizeof(int));

	if (EXT2_DINODE_SIZE(fs) <= EXT2_REV0_DINODE_SIZE)
		return;
	new->e2di_isize		=	swap16(old->e2di_isize);
}
#endif
@


1.7
log
@better type safety and KNF.

Because ext2fs has only 32-bit inode numbers, use ufsino_t as in FFS.
Disk blocks are u_int32_t as well, because we don't support the 64BIT flag.
When we do, there's going to be a lot more going on than just daddr_t.

While there, add some journaling-related bits into the superblock to play with.

ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_bswap.c,v 1.6 2014/07/13 13:28:26 pelikan Exp $	*/
d113 2
a114 1
e2fs_i_bswap(struct ext2fs_dinode *old, struct ext2fs_dinode *new)
d137 4
@


1.6
log
@ext4 (extents) read support

Tested on amd64 with > 4GB files and 50,000 subdirectories.
From FreeBSD, thanks!

ok deraadt guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_bswap.c,v 1.5 2014/07/11 16:04:25 pelikan Exp $	*/
d40 1
d87 9
@


1.5
log
@new dinode format for big-endian conversion routines
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_bswap.c,v 1.4 2007/06/17 20:15:25 jasper Exp $	*/
d61 1
a61 1
	new->e2fs_fsize		=	swap32(old->e2fs_fsize);
@


1.4
log
@ansify/de-register.
no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_bswap.c,v 1.3 2005/10/06 17:43:14 pedro Exp $	*/
d120 1
a120 1
	new->e2di_dacl		=	swap32(old->e2di_dacl);
d122 2
@


1.3
log
@Use part of the reserved space on the disk inode to scatter 16 more bits
for the UID and GID, making them 32-bit. Based on what Linux does, with
a slightly different implementation. Endianess issue in fsck noted by
miod@@, okay deraadt@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_bswap.c,v 1.2 2001/09/18 09:12:36 art Exp $	*/
d50 1
a50 2
e2fs_sb_bswap(old, new)
	struct ext2fs *old, *new;
d89 1
a89 3
e2fs_cg_bswap(old, new, size)
	struct  ext2_gd *old, *new;
	int size;
d103 1
a103 2
e2fs_i_bswap(old, new)
	struct ext2fs_dinode *old, *new;
@


1.2
log
@Don't include sys/systm.h if not _KERNEL.
@
text
@d1 1
a1 1
/*	$OpenBSD: ext2fs_bswap.c,v 1.1 2001/09/18 00:06:21 art Exp $	*/
d110 4
a113 2
	new->e2di_uid		=	swap16(old->e2di_uid);
	new->e2di_gid		=	swap16(old->e2di_gid);
@


1.2.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1
log
@More cleanups from NetBSD and a bunch of endianness fixes.
The file ext2fs_bswap.c contains some functions to aid bigendian machines.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 1
d39 1
@

