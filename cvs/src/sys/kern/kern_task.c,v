head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.2
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8;
locks; strict;
comment	@ * @;


1.19
date	2017.02.14.10.31.15;	author mpi;	state Exp;
branches;
next	1.18;
commitid	PmGi4EGraGC0Z0ml;

1.18
date	2016.08.11.01.32.31;	author dlg;	state Exp;
branches;
next	1.17;
commitid	IHfqu7B7AX4JZqdl;

1.17
date	2015.12.08.11.48.54;	author dlg;	state Exp;
branches;
next	1.16;
commitid	h73wu2ZKy4nJghqR;

1.16
date	2015.12.08.11.44.12;	author dlg;	state Exp;
branches;
next	1.15;
commitid	4ovy4vVCmqFoiQT1;

1.15
date	2015.11.19.13.19.24;	author dlg;	state Exp;
branches;
next	1.14;
commitid	5TSmH66JB8HYmFtm;

1.14
date	2015.02.09.03.15.41;	author dlg;	state Exp;
branches;
next	1.13;
commitid	jVd0KngVszV2FEfg;

1.13
date	2015.01.27.03.17.36;	author dlg;	state Exp;
branches;
next	1.12;
commitid	MyKPm9Q3dQu92BiX;

1.12
date	2014.11.01.23.58.28;	author tedu;	state Exp;
branches;
next	1.11;
commitid	9PQjDNhyphSHE6E7;

1.11
date	2014.10.08.15.28.39;	author blambert;	state Exp;
branches;
next	1.10;
commitid	QJzJJkPn3LHvPIsc;

1.10
date	2014.07.12.18.43.32;	author tedu;	state Exp;
branches;
next	1.9;
commitid	QlVV51SZgNFxsXxC;

1.9
date	2014.06.11.08.47.53;	author blambert;	state Exp;
branches;
next	1.8;
commitid	wAEViZUWYkamiCIp;

1.8
date	2013.12.11.22.39.49;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2013.12.10.17.08.01;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2013.11.18.20.21.51;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.30.02.11.32;	author dlg;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.29.23.39.02;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.29.04.34.21;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.29.04.32.08;	author dlg;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.29.04.23.16;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Convert most of the manual checks for CPU hogging to sched_pause().

The distinction between preempt() and yield() stays as it is usueful
to know if a thread decided to yield by itself or if the kernel told
him to go away.

ok tedu@@, guenther@@
@
text
@/*	$OpenBSD: kern_task.c,v 1.18 2016/08/11 01:32:31 dlg Exp $ */

/*
 * Copyright (c) 2013 David Gwynne <dlg@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/mutex.h>
#include <sys/kthread.h>
#include <sys/task.h>

#define TASK_ONQUEUE	1

struct taskq {
	enum {
		TQ_S_CREATED,
		TQ_S_RUNNING,
		TQ_S_DESTROYED
	}			 tq_state;
	unsigned int		 tq_running;
	unsigned int		 tq_nthreads;
	unsigned int		 tq_flags;
	const char		*tq_name;

	struct mutex		 tq_mtx;
	struct task_list	 tq_worklist;
};

struct taskq taskq_sys = {
	TQ_S_CREATED,
	0,
	1,
	0,
	"systq",
	MUTEX_INITIALIZER(IPL_HIGH),
	TAILQ_HEAD_INITIALIZER(taskq_sys.tq_worklist)
};

struct taskq taskq_sys_mp = {
	TQ_S_CREATED,
	0,
	1,
	TASKQ_MPSAFE,
	"systqmp",
	MUTEX_INITIALIZER(IPL_HIGH),
	TAILQ_HEAD_INITIALIZER(taskq_sys_mp.tq_worklist)
};

typedef int (*sleepfn)(const volatile void *, struct mutex *, int,
    const char *, int);

struct taskq *const systq = &taskq_sys;
struct taskq *const systqmp = &taskq_sys_mp;

void	taskq_init(void); /* called in init_main.c */
void	taskq_create_thread(void *);
int	taskq_sleep(const volatile void *, struct mutex *, int,
	    const char *, int);
int	taskq_next_work(struct taskq *, struct task *, sleepfn);
void	taskq_thread(void *);

void
taskq_init(void)
{
	kthread_create_deferred(taskq_create_thread, systq);
	kthread_create_deferred(taskq_create_thread, systqmp);
}

struct taskq *
taskq_create(const char *name, unsigned int nthreads, int ipl,
    unsigned int flags)
{
	struct taskq *tq;

	tq = malloc(sizeof(*tq), M_DEVBUF, M_WAITOK);
	if (tq == NULL)
		return (NULL);

	tq->tq_state = TQ_S_CREATED;
	tq->tq_running = 0;
	tq->tq_nthreads = nthreads;
	tq->tq_name = name;
	tq->tq_flags = flags;

	mtx_init(&tq->tq_mtx, ipl);
	TAILQ_INIT(&tq->tq_worklist);

	/* try to create a thread to guarantee that tasks will be serviced */
	kthread_create_deferred(taskq_create_thread, tq);

	return (tq);
}

void
taskq_destroy(struct taskq *tq)
{
	mtx_enter(&tq->tq_mtx);
	switch (tq->tq_state) {
	case TQ_S_CREATED:
		/* tq is still referenced by taskq_create_thread */
		tq->tq_state = TQ_S_DESTROYED;
		mtx_leave(&tq->tq_mtx);
		return;

	case TQ_S_RUNNING:
		tq->tq_state = TQ_S_DESTROYED;
		break;

	default:
		panic("unexpected %s tq state %u", tq->tq_name, tq->tq_state);
	}

	while (tq->tq_running > 0) {
		wakeup(tq);
		msleep(&tq->tq_running, &tq->tq_mtx, PWAIT, "tqdestroy", 0);
	}
	mtx_leave(&tq->tq_mtx);

	free(tq, M_DEVBUF, sizeof(*tq));
}

void
taskq_create_thread(void *arg)
{
	struct taskq *tq = arg;
	int rv;

	mtx_enter(&tq->tq_mtx);

	switch (tq->tq_state) {
	case TQ_S_DESTROYED:
		mtx_leave(&tq->tq_mtx);
		free(tq, M_DEVBUF, sizeof(*tq));
		return;

	case TQ_S_CREATED:
		tq->tq_state = TQ_S_RUNNING;
		break;

	default:
		panic("unexpected %s tq state %d", tq->tq_name, tq->tq_state);
	}

	do {
		tq->tq_running++;
		mtx_leave(&tq->tq_mtx);

		rv = kthread_create(taskq_thread, tq, NULL, tq->tq_name);
		
		mtx_enter(&tq->tq_mtx);
		if (rv != 0) {
			printf("unable to create thread for \"%s\" taskq\n",
			    tq->tq_name);

			tq->tq_running--;
			/* could have been destroyed during kthread_create */
			if (tq->tq_state == TQ_S_DESTROYED &&
			    tq->tq_running == 0)
				wakeup_one(&tq->tq_running);
			break;
		}
	} while (tq->tq_running < tq->tq_nthreads);

	mtx_leave(&tq->tq_mtx);
}

void
task_set(struct task *t, void (*fn)(void *), void *arg)
{
	t->t_func = fn;
	t->t_arg = arg;
	t->t_flags = 0;
}

int
task_add(struct taskq *tq, struct task *w)
{
	int rv = 0;

	if (ISSET(w->t_flags, TASK_ONQUEUE))
		return (0);

	mtx_enter(&tq->tq_mtx);
	if (!ISSET(w->t_flags, TASK_ONQUEUE)) {
		rv = 1;
		SET(w->t_flags, TASK_ONQUEUE);
		TAILQ_INSERT_TAIL(&tq->tq_worklist, w, t_entry);
	}
	mtx_leave(&tq->tq_mtx);

	if (rv)
		wakeup_one(tq);

	return (rv);
}

int
task_del(struct taskq *tq, struct task *w)
{
	int rv = 0;

	if (!ISSET(w->t_flags, TASK_ONQUEUE))
		return (0);

	mtx_enter(&tq->tq_mtx);
	if (ISSET(w->t_flags, TASK_ONQUEUE)) {
		rv = 1;
		CLR(w->t_flags, TASK_ONQUEUE);
		TAILQ_REMOVE(&tq->tq_worklist, w, t_entry);
	}
	mtx_leave(&tq->tq_mtx);

	return (rv);
}

int
taskq_sleep(const volatile void *ident, struct mutex *mtx, int priority,
    const char *wmesg, int tmo)
{
	u_int *flags = &curproc->p_flag;
	int rv;

	atomic_clearbits_int(flags, P_CANTSLEEP);
	rv = msleep(ident, mtx, priority, wmesg, tmo);
	atomic_setbits_int(flags, P_CANTSLEEP);

	return (tmo);
}

int
taskq_next_work(struct taskq *tq, struct task *work, sleepfn tqsleep)
{
	struct task *next;

	mtx_enter(&tq->tq_mtx);
	while ((next = TAILQ_FIRST(&tq->tq_worklist)) == NULL) {
		if (tq->tq_state != TQ_S_RUNNING) {
			mtx_leave(&tq->tq_mtx);
			return (0);
		}

		tqsleep(tq, &tq->tq_mtx, PWAIT, "bored", 0);
	}

	TAILQ_REMOVE(&tq->tq_worklist, next, t_entry);
	CLR(next->t_flags, TASK_ONQUEUE);

	*work = *next; /* copy to caller to avoid races */

	next = TAILQ_FIRST(&tq->tq_worklist);
	mtx_leave(&tq->tq_mtx);

	if (next != NULL && tq->tq_nthreads > 1)
		wakeup_one(tq);

	return (1);
}

void
taskq_thread(void *xtq)
{
	sleepfn tqsleep = msleep;
	struct taskq *tq = xtq;
	struct task work;
	int last;

	if (ISSET(tq->tq_flags, TASKQ_MPSAFE))
		KERNEL_UNLOCK();

	if (ISSET(tq->tq_flags, TASKQ_CANTSLEEP)) {
		tqsleep = taskq_sleep;
		atomic_setbits_int(&curproc->p_flag, P_CANTSLEEP);
	}

	while (taskq_next_work(tq, &work, tqsleep)) {
		(*work.t_func)(work.t_arg);
		sched_pause(yield);
	}

	mtx_enter(&tq->tq_mtx);
	last = (--tq->tq_running == 0);
	mtx_leave(&tq->tq_mtx);

	if (ISSET(tq->tq_flags, TASKQ_CANTSLEEP))
		atomic_clearbits_int(&curproc->p_flag, P_CANTSLEEP);

	if (ISSET(tq->tq_flags, TASKQ_MPSAFE))
		KERNEL_LOCK();

	if (last)
		wakeup_one(&tq->tq_running);

	kthread_exit(0);
}
@


1.18
log
@shuffle some code to make it more symmetrical.

no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.17 2015/12/08 11:48:54 dlg Exp $ */
d291 1
a291 1
		sched_pause();
@


1.17
log
@tweak whitespace in struct definition. no functional change.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.16 2015/12/08 11:44:12 dlg Exp $ */
d298 3
a302 3

	if (ISSET(tq->tq_flags, TASKQ_CANTSLEEP))
		atomic_clearbits_int(&curproc->p_flag, P_CANTSLEEP);
@


1.16
log
@use struct task_list instead of TAILQ_HEAD(, task)
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.15 2015/11/19 13:19:24 dlg Exp $ */
d33 5
a37 5
	}		tq_state;
	unsigned int	tq_running;
	unsigned int	tq_nthreads;
	unsigned int	tq_flags;
	const char	*tq_name;
d39 2
a40 2
	struct mutex	tq_mtx;
	struct task_list tq_worklist;
@


1.15
log
@dont try and wakeup other threads to handle pending work when we
know there's only one thread in the taskq. wakeups are much more
expensive than a simple compare.

from haesbart
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.14 2015/02/09 03:15:41 dlg Exp $ */
d40 1
a40 1
	TAILQ_HEAD(, task) tq_worklist;
@


1.14
log
@we want to defer work traditionally (in openbsd) handled in an
interrupt context to a taskq running in a thread. however, there
is a concern that if we do that then we allow accidental use of
sleeping APIs in this work, which will make it harder to move the
work back to interrupts in the future.

guenther and kettenis came up with the idea of marking a proc with
CANTSLEEP which the sleep paths can check and panic on.

this builds on that so you create taskqs that run with CANTSLEEP
set except when they need to sleep for more tasks to run.

the taskq_create api is changed to take a flags argument so users
can specify CANTSLEEP. MPSAFE is also passed via this flags field
now.  this means archs that defined IPL_MPSAFE to 0 can now create
mpsafe taskqs too.

lots of discussion at s2k15
ok guenther@@ miod@@ mpi@@ tedu@@ pelikan@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.13 2015/01/27 03:17:36 dlg Exp $ */
d267 1
a267 1
	if (next != NULL)
@


1.13
log
@remove the second void * argument on tasks.

when workqs were introduced, we provided a second argument so you
could pass a thing and some context to work on it in. there were
very few things that took advantage of the second argument, so when
i introduced pools i suggested removing it. since tasks were meant
to replace workqs, it was requested that we keep the second argument
to make porting from workqs to tasks easier.

now that workqs are gone, i had a look at the use of the second
argument again and found only one good use of it (vdsp(4) on sparc64
if you're interested) and a tiny handful of questionable uses. the
vast majority of tasks only used a single argument. i have since
modified all tasks that used two args to only use one, so now we
can remove the second argument.

so this is a mechanical change. all tasks only passed NULL as their
second argument, so we can just remove it.

ok krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.12 2014/11/01 23:58:28 tedu Exp $ */
d36 1
a36 1
	unsigned int	tq_unlocked;
d57 1
a57 1
	1,
d63 3
d71 3
a73 1
int	taskq_next_work(struct taskq *, struct task *);
d84 2
a85 1
taskq_create(const char *name, unsigned int nthreads, int ipl)
d97 1
a97 6

	if (ipl & IPL_MPSAFE)
		tq->tq_unlocked = 1;
	else
		tq->tq_unlocked = 0;
	ipl &= ~IPL_MPSAFE;
d194 3
d216 3
d231 15
a245 1
taskq_next_work(struct taskq *tq, struct task *work)
d256 1
a256 1
		msleep(tq, &tq->tq_mtx, PWAIT, "bored", 0);
d276 1
d281 1
a281 1
	if (tq->tq_unlocked)
d284 6
a289 1
	while (taskq_next_work(tq, &work)) {
d298 1
a298 1
	if (tq->tq_unlocked)
d300 3
@


1.12
log
@add a few sizes to free
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.11 2014/10/08 15:28:39 blambert Exp $ */
d181 1
a181 1
task_set(struct task *t, void (*fn)(void *, void *), void *arg1, void *arg2)
d184 1
a184 3
	t->t_arg1 = arg1;
	t->t_arg2 = arg2;

d263 1
a263 1
		(*work.t_func)(work.t_arg1, work.t_arg2);
@


1.11
log
@make workq/taskq runner threads yield when they've hogged the cpu

ok deraadt@@ dlg@@ phessler@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.10 2014/07/12 18:43:32 tedu Exp $ */
d132 1
a132 1
	free(tq, M_DEVBUF, 0);
d146 1
a146 1
		free(tq, M_DEVBUF, 0);
@


1.10
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.9 2014/06/11 08:47:53 blambert Exp $ */
d264 1
a264 1
	while (taskq_next_work(tq, &work))
d266 2
@


1.9
log
@Create system taskq ("systqmp") which runs without the kernel lock;
currently unused.

ok dlg@@
manpage improvement and ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.8 2013/12/11 22:39:49 kettenis Exp $ */
d132 1
a132 1
	free(tq, M_DEVBUF);
d146 1
a146 1
		free(tq, M_DEVBUF);
@


1.8
log
@Fix typo; that teaches me to steal other people's diffs!
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.7 2013/12/10 17:08:01 kettenis Exp $ */
d53 10
d64 1
d75 1
@


1.7
log
@Add infrastructure to create un-biglocked task queues.  Stolen from blambert@@
who is slacking to much.

ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.6 2013/11/18 20:21:51 deraadt Exp $ */
d84 1
a84 1
	ipl &= IPL_MPSAFE;
@


1.6
log
@simplify kthread_create(). no more stdarg
ok matthew guenther mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.5 2013/10/30 02:11:32 dlg Exp $ */
d36 1
d47 1
d80 6
d249 3
d258 3
@


1.5
log
@deprecate taskq_systq() and replace it with extern struct taskq
*const systq defined in task.h

this reduces the cost of using the system taskq and looks less ugly.

requested by and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.4 2013/10/29 23:39:02 dlg Exp $ */
d141 1
a141 1
		rv = kthread_create(taskq_thread, tq, NULL, "%s", tq->tq_name);
@


1.4
log
@since taskq_create is only callable from autoconf or process context, it
is safe to ask malloc to wait for memory.

pointed out by millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.3 2013/10/29 04:34:21 dlg Exp $ */
d51 2
d61 1
a61 7
	kthread_create_deferred(taskq_create_thread, &taskq_sys);
}

struct taskq *
taskq_systq(void)
{
	return (&taskq_sys);
@


1.3
log
@sys/task.h includes sys/queue.h, so kern/kern_task.c doesnt need
to do that again.

kern/kern_task.c doesnt use pools so we dont need sys/pool.h either.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.2 2013/10/29 04:32:08 dlg Exp $ */
d73 1
a73 1
	tq = malloc(sizeof(*tq), M_DEVBUF, M_NOWAIT);
@


1.2
log
@use unsigned int instead of u_int to reduce the depend on types.h.

might make jsg a little happier.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_task.c,v 1.1 2013/10/29 04:23:16 dlg Exp $ */
a21 2
#include <sys/pool.h>
#include <sys/queue.h>
@


1.1
log
@introduce tasks and taskqs as an alternative to workqs.

tasks are modelled on the timeout api, so users familiar with
timeout_set, timeout_add, and timeout_del will already know what
to expect from task_set, task_add, and task_del.

i wrote this because workq_add_task can fail in the place you
actually need it, and there arent any good ways of recovering at
that point.  workq_queue_task was added to try and help, but required
external state to be stored for users of that api to know whether
something was already queued or not.

workqs also didnt provide a way to cancel or remove work.

this has been percolating with a bunch of people. putting it in as i
wrote it so i can apply their feedback to the code with the history kept
in cvs.
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d36 2
a37 2
	u_int		tq_running;
	u_int		tq_nthreads;
d71 1
a71 1
taskq_create(const char *name, u_int nthreads, int ipl)
@

