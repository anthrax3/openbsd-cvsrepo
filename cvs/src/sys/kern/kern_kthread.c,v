head	1.41;
access;
symbols
	OPENBSD_6_0:1.38.0.6
	OPENBSD_6_0_BASE:1.38
	OPENBSD_5_9:1.38.0.2
	OPENBSD_5_9_BASE:1.38
	OPENBSD_5_8:1.38.0.4
	OPENBSD_5_8_BASE:1.38
	OPENBSD_5_7:1.37.0.2
	OPENBSD_5_7_BASE:1.37
	OPENBSD_5_6:1.36.0.4
	OPENBSD_5_6_BASE:1.36
	OPENBSD_5_5:1.34.0.4
	OPENBSD_5_5_BASE:1.34
	OPENBSD_5_4:1.32.0.2
	OPENBSD_5_4_BASE:1.32
	OPENBSD_5_3:1.31.0.6
	OPENBSD_5_3_BASE:1.31
	OPENBSD_5_2:1.31.0.4
	OPENBSD_5_2_BASE:1.31
	OPENBSD_5_1_BASE:1.31
	OPENBSD_5_1:1.31.0.2
	OPENBSD_5_0:1.30.0.14
	OPENBSD_5_0_BASE:1.30
	OPENBSD_4_9:1.30.0.12
	OPENBSD_4_9_BASE:1.30
	OPENBSD_4_8:1.30.0.10
	OPENBSD_4_8_BASE:1.30
	OPENBSD_4_7:1.30.0.6
	OPENBSD_4_7_BASE:1.30
	OPENBSD_4_6:1.30.0.8
	OPENBSD_4_6_BASE:1.30
	OPENBSD_4_5:1.30.0.4
	OPENBSD_4_5_BASE:1.30
	OPENBSD_4_4:1.30.0.2
	OPENBSD_4_4_BASE:1.30
	OPENBSD_4_3:1.28.0.2
	OPENBSD_4_3_BASE:1.28
	OPENBSD_4_2:1.27.0.2
	OPENBSD_4_2_BASE:1.27
	OPENBSD_4_1:1.26.0.2
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.25.0.4
	OPENBSD_4_0_BASE:1.25
	OPENBSD_3_9:1.25.0.2
	OPENBSD_3_9_BASE:1.25
	OPENBSD_3_8:1.24.0.4
	OPENBSD_3_8_BASE:1.24
	OPENBSD_3_7:1.24.0.2
	OPENBSD_3_7_BASE:1.24
	OPENBSD_3_6:1.22.0.2
	OPENBSD_3_6_BASE:1.22
	SMP_SYNC_A:1.22
	SMP_SYNC_B:1.22
	OPENBSD_3_5:1.21.0.2
	OPENBSD_3_5_BASE:1.21
	OPENBSD_3_4:1.20.0.2
	OPENBSD_3_4_BASE:1.20
	UBC_SYNC_A:1.19
	OPENBSD_3_3:1.18.0.4
	OPENBSD_3_3_BASE:1.18
	OPENBSD_3_2:1.18.0.2
	OPENBSD_3_2_BASE:1.18
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	UBC_SYNC_B:1.18
	UBC:1.15.0.2
	UBC_BASE:1.15
	OPENBSD_3_0:1.14.0.2
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.2
	SMP_BASE:1.7
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3;
locks; strict;
comment	@ * @;


1.41
date	2017.02.12.04.55.08;	author guenther;	state Exp;
branches;
next	1.40;
commitid	1rXx7AiXIWFC9gYa;

1.40
date	2017.01.21.05.42.03;	author guenther;	state Exp;
branches;
next	1.39;
commitid	CHRb0fCqa8XxUAMH;

1.39
date	2016.11.07.00.26.32;	author guenther;	state Exp;
branches;
next	1.38;
commitid	W7ztnDZwvjCaeQTS;

1.38
date	2015.03.14.03.38.50;	author jsg;	state Exp;
branches;
next	1.37;
commitid	p4LJxGKbi0BU2cG6;

1.37
date	2014.11.03.03.08.00;	author deraadt;	state Exp;
branches;
next	1.36;
commitid	3SGDR5EjcwE01W8S;

1.36
date	2014.07.12.18.43.32;	author tedu;	state Exp;
branches;
next	1.35;
commitid	QlVV51SZgNFxsXxC;

1.35
date	2014.05.04.05.03.26;	author guenther;	state Exp;
branches;
next	1.34;

1.34
date	2014.02.12.05.47.36;	author guenther;	state Exp;
branches;
next	1.33;

1.33
date	2013.11.18.20.21.51;	author deraadt;	state Exp;
branches;
next	1.32;

1.32
date	2013.03.28.16.55.25;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2011.11.09.20.57.38;	author guenther;	state Exp;
branches;
next	1.30;

1.30
date	2008.06.26.05.42.20;	author ray;	state Exp;
branches;
next	1.29;

1.29
date	2008.05.02.14.07.15;	author blambert;	state Exp;
branches;
next	1.28;

1.28
date	2007.09.07.15.00.20;	author art;	state Exp;
branches;
next	1.27;

1.27
date	2007.03.15.10.22.30;	author art;	state Exp;
branches;
next	1.26;

1.26
date	2006.11.29.12.24.17;	author miod;	state Exp;
branches;
next	1.25;

1.25
date	2005.12.03.18.09.08;	author tedu;	state Exp;
branches;
next	1.24;

1.24
date	2004.12.08.06.56.14;	author miod;	state Exp;
branches;
next	1.23;

1.23
date	2004.11.23.19.08.55;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2004.05.04.16.59.32;	author grange;	state Exp;
branches;
next	1.21;

1.21
date	2004.01.03.14.08.53;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2003.05.27.21.03.49;	author henning;	state Exp;
branches;
next	1.19;

1.19
date	2003.05.06.07.28.38;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.11.06.35.18;	author art;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.15.18.19.52;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.14.01.27.04;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2001.11.06.18.41.10;	author art;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2001.08.08.02.37.40;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.27.07.16.28;	author art;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.27.04.49.42;	author art;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.02.21.43.12;	author niklas;	state Exp;
branches;
next	1.10;

1.10
date	2000.07.17.16.25.16;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2000.07.17.07.30.12;	author art;	state Exp;
branches;
next	1.8;

1.8
date	2000.06.18.17.59.55;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.31.19.57.19;	author deraadt;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2000.01.31.01.09.10;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.28.19.45.04;	author art;	state Exp;
branches;
next	1.4;

1.4
date	99.08.17.10.32.18;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	99.01.26.23.07.26;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	99.01.11.15.34.16;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	99.01.11.01.37.13;	author niklas;	state Exp;
branches;
next	;

1.7.2.1
date	2001.05.14.22.32.40;	author niklas;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2001.07.04.10.48.20;	author niklas;	state Exp;
branches;
next	1.7.2.3;

1.7.2.3
date	2001.10.31.03.26.29;	author nate;	state Exp;
branches;
next	1.7.2.4;

1.7.2.4
date	2001.11.13.23.04.23;	author niklas;	state Exp;
branches;
next	1.7.2.5;

1.7.2.5
date	2002.03.28.11.43.04;	author niklas;	state Exp;
branches;
next	1.7.2.6;

1.7.2.6
date	2003.03.28.00.41.26;	author niklas;	state Exp;
branches;
next	1.7.2.7;

1.7.2.7
date	2003.05.13.19.21.28;	author ho;	state Exp;
branches;
next	1.7.2.8;

1.7.2.8
date	2003.06.07.11.03.40;	author ho;	state Exp;
branches;
next	1.7.2.9;

1.7.2.9
date	2004.02.19.10.56.37;	author niklas;	state Exp;
branches;
next	1.7.2.10;

1.7.2.10
date	2004.06.05.23.13.01;	author niklas;	state Exp;
branches;
next	;

1.15.2.1
date	2002.06.11.03.29.40;	author art;	state Exp;
branches;
next	1.15.2.2;

1.15.2.2
date	2002.10.29.00.36.44;	author art;	state Exp;
branches;
next	1.15.2.3;

1.15.2.3
date	2003.05.19.22.31.09;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.41
log
@Split up fork1():
 - FORK_THREAD handling is a totally separate function, thread_fork(),
   that is only used by sys___tfork() and which loses the flags, func,
   arg, and newprocp parameters and gains tcb parameter to guarantee
   the new thread's TCB is set before the creating thread returns
 - fork1() loses its stack and tidptr parameters
Common bits factor out:
 - struct proc allocation and initialization moves to thread_new()
 - maxthread handling moves to fork_check_maxthread()
 - setting the new thread running moves to fork_thread_start()
The MD cpu_fork() function swaps its unused stacksize parameter for
a tcb parameter.

luna88k testing by aoyama@@, alpha testing by dlg@@
ok mpi@@
@
text
@/*	$OpenBSD: kern_kthread.c,v 1.40 2017/01/21 05:42:03 guenther Exp $	*/
/*	$NetBSD: kern_kthread.c,v 1.3 1998/12/22 21:21:36 kleink Exp $	*/

/*-
 * Copyright (c) 1998, 1999 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/kthread.h>
#include <sys/proc.h>
#include <sys/wait.h>
#include <sys/malloc.h>
#include <sys/queue.h>


/*
 * note that stdarg.h and the ansi style va_start macro is used for both
 * ansi and traditional c compilers.
 * XXX: this requires that stdarg.h define: va_alist and va_dcl
 */
#include <sys/stdarg.h>

int	kthread_create_now;

/*
 * Fork a kernel thread.  Any process can request this to be done.
 * The VM space and limits, etc. will be shared with proc0.
 */
int
kthread_create(void (*func)(void *), void *arg,
    struct proc **newpp, const char *name)
{
	struct proc *p;
	int error;

	/*
	 * First, create the new process.  Share the memory, file
	 * descriptors and don't leave the exit status around for the
	 * parent to wait for.
	 */
	error = fork1(&proc0, FORK_SHAREVM|FORK_SHAREFILES|FORK_NOZOMBIE|
	    FORK_SYSTEM|FORK_SIGHAND, func, arg, NULL, &p);
	if (error)
		return (error);

	/* Name it as specified. */
	strlcpy(p->p_p->ps_comm, name, sizeof p->p_p->ps_comm);

	/* All done! */
	if (newpp != NULL)
		*newpp = p;
	return (0);
}

/*
 * Cause a kernel thread to exit.  Assumes the exiting thread is the
 * current context.
 */
void
kthread_exit(int ecode)
{

	/*
	 * XXX What do we do with the exit code?  Should we even bother
	 * XXX with it?  The parent (proc0) isn't going to do much with
	 * XXX it.
	 */
	if (ecode != 0)
		printf("WARNING: thread `%s' (%d) exits with status %d\n",
		    curproc->p_p->ps_comm, curproc->p_tid, ecode);

	exit1(curproc, W_EXITCODE(ecode, 0), EXIT_NORMAL);

	/*
	 * XXX Fool the compiler.  Making exit1() __dead is a can
	 * XXX of worms right now.
	 */
	for (;;);
}

struct kthread_q {
	SIMPLEQ_ENTRY(kthread_q) kq_q;
	void (*kq_func)(void *);
	void *kq_arg;
};

SIMPLEQ_HEAD(, kthread_q) kthread_q = SIMPLEQ_HEAD_INITIALIZER(kthread_q);

/*
 * Defer the creation of a kernel thread.  Once the standard kernel threads
 * and processes have been created, this queue will be run to callback to
 * the caller to create threads for e.g. file systems and device drivers.
 */
void
kthread_create_deferred(void (*func)(void *), void *arg)
{
	struct kthread_q *kq;

	if (kthread_create_now) {
		(*func)(arg);
		return;
	}

	kq = malloc(sizeof *kq, M_TEMP, M_NOWAIT|M_ZERO);
	if (kq == NULL)
		panic("unable to allocate kthread_q");

	kq->kq_func = func;
	kq->kq_arg = arg;

	SIMPLEQ_INSERT_TAIL(&kthread_q, kq, kq_q);
}

void
kthread_run_deferred_queue(void)
{
	struct kthread_q *kq;

	/* No longer need to defer kthread creation. */
	kthread_create_now = 1;

	while ((kq = SIMPLEQ_FIRST(&kthread_q)) != NULL) {
		SIMPLEQ_REMOVE_HEAD(&kthread_q, kq_q);
		(*kq->kq_func)(kq->kq_arg);
		free(kq, M_TEMP, sizeof(*kq));
	}
}
@


1.40
log
@p_comm is the process's command and isn't per thread, so move it from
struct proc to struct process.

ok deraadt@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.39 2016/11/07 00:26:32 guenther Exp $	*/
d69 1
a69 1
	    FORK_SYSTEM|FORK_SIGHAND, NULL, 0, func, arg, NULL, &p);
@


1.39
log
@Split PID from TID, giving processes a PID unrelated to the TID of their
initial thread

ok jsing@@ kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.38 2015/03/14 03:38:50 jsg Exp $	*/
d74 1
a74 1
	strlcpy(p->p_comm, name, sizeof p->p_comm);
d97 1
a97 1
		    curproc->p_comm, curproc->p_tid, ecode);
@


1.38
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.37 2014/11/03 03:08:00 deraadt Exp $	*/
d97 1
a97 1
		    curproc->p_comm, curproc->p_pid, ecode);
@


1.37
log
@pass size argument to free()
ok doug tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.36 2014/07/12 18:43:32 tedu Exp $	*/
a35 1
#include <sys/kernel.h>
@


1.36
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.35 2014/05/04 05:03:26 guenther Exp $	*/
d153 1
a153 1
		free(kq, M_TEMP, 0);
@


1.35
log
@Add PS_SYSTEM, the process-level mirror of the thread-level P_SYSTEM,
and FORK_SYSTEM as a flag to set them.  This eliminates needing to
peek into other processes threads in various places.  Inspired by NetBSD

ok miod@@ matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.34 2014/02/12 05:47:36 guenther Exp $	*/
d153 1
a153 1
		free(kq, M_TEMP);
@


1.34
log
@Eliminate the exit sig handling, which was only invokable via the
Linux-compat clone() syscall when *not* using CLONE_THREAD.  pirofti@@
confirms Opera runs in compat without this, so out it goes; one less hair
to choke on in kern_exit.c

ok tedu@@ pirofti@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.33 2013/11/18 20:21:51 deraadt Exp $	*/
d70 1
a70 1
	    FORK_SIGHAND, NULL, 0, func, arg, NULL, &p);
a72 5

	/*
	 * Mark it as a system process.
	 */
	atomic_setbits_int(&p->p_flag, P_SYSTEM);
@


1.33
log
@simplify kthread_create(). no more stdarg
ok matthew guenther mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.32 2013/03/28 16:55:25 deraadt Exp $	*/
d69 1
a69 1
	error = fork1(&proc0, 0, FORK_SHAREVM|FORK_SHAREFILES|FORK_NOZOMBIE|
@


1.32
log
@do not include machine/cpu.h from a .c file; it is the responsibility of
.h files to pull it in, if needed
ok tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.31 2011/11/09 20:57:38 guenther Exp $	*/
d59 1
a59 1
    struct proc **newpp, const char *fmt, ...)
a62 1
	va_list ap;
d80 1
a80 3
	va_start(ap, fmt);
	vsnprintf(p->p_comm, sizeof p->p_comm, fmt, ap);
	va_end(ap);
@


1.31
log
@Change fork1() and kthread_create() to match the rest of the tree
and use curp vs p instead of p1 vs p2.  Add curpr and pr variables
for the respective struct processes.  Make sigactsshare() return
the shared sigacts intead of taking the struct proc to update.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.30 2008/06/26 05:42:20 ray Exp $	*/
a42 1
#include <machine/cpu.h>
@


1.30
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.29 2008/05/02 14:07:15 blambert Exp $	*/
d62 1
a62 1
	struct proc *p2;
d72 1
a72 1
	    FORK_SIGHAND, NULL, 0, func, arg, NULL, &p2);
d79 1
a79 1
	atomic_setbits_int(&p2->p_flag, P_SYSTEM);
d83 1
a83 1
	vsnprintf(p2->p_comm, sizeof p2->p_comm, fmt, ap);
d88 1
a88 1
		*newpp = p2;
@


1.29
log
@Pass FORK_SHAREFILES flag in kthread_create; avoids allocating a
filedesc struct and associated fdcopy operation on kernel thread
creation. Instead, kernel threads share and bump reference count
on proc0's filedesc.

ok thib@@, "definitely makes sense" art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.28 2007/09/07 15:00:20 art Exp $	*/
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.28
log
@Use M_ZERO in a few more places to shave bytes from the kernel.

eyeballed and ok dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.27 2007/03/15 10:22:30 art Exp $	*/
d78 2
a79 2
	error = fork1(&proc0, 0, FORK_SHAREVM |FORK_NOZOMBIE |FORK_SIGHAND,
	    NULL, 0, func, arg, NULL, &p2);
@


1.27
log
@Since p_flag is often manipulated in interrupts and without biglock
it's a good idea to use atomic.h operations on it. This mechanic
change updates all bit operations on p_flag to atomic_{set,clear}bits_int.

Only exception is that P_OWEUPC is set by MI code before calling
need_proftick and it's automatically cleared by ADDUPC. There's
no reason for MD handling of that flag since everyone handles it the
same way.

kettenis@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.26 2006/11/29 12:24:17 miod Exp $	*/
d148 1
a148 1
	kq = malloc(sizeof *kq, M_TEMP, M_NOWAIT);
a150 1
	bzero(kq, sizeof *kq);
@


1.26
log
@Kernel stack can be swapped. This means that stuff that's on the stack
should never be referenced outside the context of the process to which
this stack belongs unless we do the PHOLD/PRELE dance. Loads of code
doesn't follow the rules here. Instead of trying to track down all
offenders and fix this hairy situation, it makes much more sense
to not swap kernel stacks.

From art@@, tested by many some time ago.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.25 2005/12/03 18:09:08 tedu Exp $	*/
d86 1
a86 1
	p2->p_flag |= P_SYSTEM;
@


1.25
log
@kernel support for threaded processes (rthreads).
uses rfork(RFTHREAD) to create threads, which are presently processes
that are a little more tightly bound together.  several new syscalls
added to facilitate a userland thread library.
all conditional on RTHREADS, currently disabled.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.24 2004/12/08 06:56:14 miod Exp $	*/
d84 1
a84 2
	 * Mark it as a system process and not a candidate for
	 * swapping.
d86 1
a86 1
	p2->p_flag |= P_INMEM | P_SYSTEM;	/* XXX */
@


1.24
log
@Have kthread_create_deferred() act immediately once kthread_run_deferred_queue()
has been invoked; forgotten part of the ``create init earlier'' changes.
From NetBSD as well.
ok deraadt@@ dlg@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.23 2004/11/23 19:08:55 miod Exp $	*/
d117 1
a117 1
	exit1(curproc, W_EXITCODE(ecode, 0));
@


1.23
log
@Create the init process earlier, before the root filesystem is mounted,
and have it stall on a semaphore. This allows all kthread creations which
could have been requested during autoconf to be processed before root
is mounted as well.

This causes umass devices attached to any usb with flags 1 (such as on macppc)
to configure properly instead of panicing the kernel at mountroot time.

From NetBSD; tested by various.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.22 2004/05/04 16:59:32 grange Exp $	*/
d5 1
a5 1
 * Copyright (c) 1998 The NetBSD Foundation, Inc.
d59 2
d144 5
d164 3
@


1.22
log
@Remove useless ``elm'' argument from the SIMPLEQ_REMOVE_HEAD macro.
This matches our SLIST behaviour and NetBSD's SIMPLEQ as well.

ok millert krw deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.21 2004/01/03 14:08:53 espie Exp $	*/
a67 1
	register_t rv[2];
d76 2
a77 2
	error = fork1(&proc0, 0,
	    FORK_SHAREVM|FORK_NOZOMBIE|FORK_SIGHAND, NULL, 0, func, arg, rv);
a79 2

	p2 = pfind(rv[0]);
@


1.21
log
@put an mi wrapper around stdarg.h/varargs.h. gcc3 moved stdarg/varargs macros
to built-ins, so eventually we will have one version of these files.
Special adjustments for the kernel to cope: machine/stdarg.h -> sys/stdarg.h
and machine/ansi.h needs to have a _BSD_VA_LIST_ for syslog* prototypes.
okay millert@@, drahn@@, miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.20 2003/05/27 21:03:49 henning Exp $	*/
d162 1
a162 1
		SIMPLEQ_REMOVE_HEAD(&kthread_q, kq, kq_q);
@


1.20
log
@typos in comments; From: Bengt Wessling <bengt@@lemuria.org>, 10x
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.19 2003/05/06 07:28:38 deraadt Exp $	*/
d57 1
a57 1
#include <machine/stdarg.h>
@


1.19
log
@string cleaning; tedu ok
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.18 2002/06/11 06:35:18 art Exp $	*/
d54 1
a54 1
 * ansi and traditional c complers.
@


1.18
log
@ANSIfy
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.17 2002/03/15 18:19:52 millert Exp $	*/
d92 1
a92 1
	vsprintf(p2->p_comm, fmt, ap);
@


1.17
log
@Kill #if __STDC__ used to do K&R vs. ANSI varargs/stdarg; just do things
the ANSI way.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.16 2002/03/14 01:27:04 millert Exp $	*/
d106 1
a106 2
kthread_exit(ecode)
	int ecode;
d141 1
a141 3
kthread_create_deferred(func, arg)
	void (*func)(void *);
	void *arg;
d157 1
a157 1
kthread_run_deferred_queue()
@


1.16
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.15 2001/11/06 18:41:10 art Exp $	*/
a63 1
#if __STDC__
a65 8
#else
kthread_create(func, arg, newpp, fmt, va_alist)
	void (*func)(void *);
	void *arg;
	struct proc **newpp;
	const char *fmt;
	va_dcl
#endif
@


1.15
log
@Let fork1, uvm_fork, and cpu_fork take a function/argument pair as argument,
instead of doing fork1, cpu_set_kpc. This lets us retire cpu_set_kpc and
avoid a multiprocessor race.

This commit breaks vax because it doesn't look like any other arch, someone
working on vax might want to look at this and try to adapt the code to be
more like the rest of the world.

Idea and uvm parts from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.14 2001/08/08 02:37:40 millert Exp $	*/
d69 1
a69 1
	void (*func) __P((void *));
d139 1
a139 1
	void (*kq_func) __P((void *));
d152 1
a152 1
	void (*func) __P((void *));
@


1.15.2.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.15 2001/11/06 18:41:10 art Exp $	*/
d64 1
d67 8
d139 1
a139 1
	void (*kq_func)(void *);
d152 1
a152 1
	void (*func)(void *);
@


1.15.2.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.15.2.1 2002/06/11 03:29:40 art Exp $	*/
d106 2
a107 1
kthread_exit(int ecode)
d142 3
a144 1
kthread_create_deferred(void (*func)(void *), void *arg)
d160 1
a160 1
kthread_run_deferred_queue(void)
@


1.15.2.3
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d92 1
a92 1
	vsnprintf(p2->p_comm, sizeof p2->p_comm, fmt, ap);
@


1.14
log
@__dead not __noreturn__
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.13 2001/06/27 07:16:28 art Exp $	*/
d87 1
a87 1
	    FORK_SHAREVM|FORK_NOZOMBIE|FORK_SIGHAND, NULL, 0, rv);
a91 3

	/* Arrange for it to start at the specified function. */
	cpu_set_kpc(p2, func, arg);
@


1.13
log
@no more cpu_set_init_frame
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.12 2001/06/27 04:49:42 art Exp $	*/
d134 1
a134 1
	 * XXX Fool the compiler.  Making exit1() __noreturn__ is a can
@


1.12
log
@remove old vm
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.11 2001/04/02 21:43:12 niklas Exp $	*/
a90 10
#ifdef cpu_set_init_frame			/* XXX should go away */
	if (rv[1]) {
		/*
		 * Now in child.
		 */
		func(arg);
		return (0);
	}
#endif

a92 1
#ifndef cpu_set_init_frame			/* XXX should go away */
a94 1
#endif
@


1.11
log
@On popular demand, the Linux-compatibility clone(2) implementation based
on NetBSD's code, as well as some faked Posix RT extensions by me.  This makes
at least simple linuxthreads tests work.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.10 2000/07/17 16:25:16 deraadt Exp $	*/
a85 1
#ifdef UVM
a87 4
#else
	error = fork1(&proc0, 0,
	    FORK_VMNOSTACK|FORK_NOZOMBIE|FORK_SIGHAND, NULL, 0, rv);
#endif
@


1.10
log
@art, at least commit something which compiles!
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.9 2000/07/17 07:30:12 art Exp $	*/
d82 1
a82 1
	 * First, create the new process.  Share the memory, copy file
d87 2
a88 1
	error = fork1(&proc0, FORK_SHAREVM|FORK_NOZOMBIE, NULL, 0, rv);
d90 2
a91 1
	error = fork1(&proc0, FORK_VMNOSTACK|FORK_NOZOMBIE, NULL, 0, rv);
@


1.9
log
@FORK_SHAREVM only works on non-UVM kernels.
Pointed out by miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.8 2000/06/18 17:59:55 niklas Exp $	*/
d89 1
a89 1
	error = fork1(&proc, FORK_VMNOSTACK|FORK_NOZOMBIE, NULL, 0, rv);
@


1.8
log
@Mark kernel threads as system processes.  Make ps hide them by default,
show them with -k.  Do not try to show RSS based values for them as they
mess up column alignment.  vmstat -f now shows kernel threads separately
from rforks too.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.7 2000/01/31 19:57:19 deraadt Exp $	*/
d86 1
d88 3
@


1.7
log
@re-add fixed vfork code from art
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.5 2000/01/28 19:45:04 art Exp $	*/
d86 1
a86 2
	error = fork1(&proc0, FORK_RFORK|FORK_SHAREVM|FORK_NOZOMBIE, NULL,
	    0, rv);
@


1.7.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.11 2001/04/02 21:43:12 niklas Exp $	*/
d82 1
a82 1
	 * First, create the new process.  Share the memory, file
d86 2
a87 7
#ifdef UVM
	error = fork1(&proc0, 0,
	    FORK_SHAREVM|FORK_NOZOMBIE|FORK_SIGHAND, NULL, 0, rv);
#else
	error = fork1(&proc0, 0,
	    FORK_VMNOSTACK|FORK_NOZOMBIE|FORK_SIGHAND, NULL, 0, rv);
#endif
@


1.7.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.7.2.1 2001/05/14 22:32:40 niklas Exp $	*/
d86 1
d89 4
d96 10
d108 1
d111 1
@


1.7.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.7.2.2 2001/07/04 10:48:20 niklas Exp $	*/
d134 1
a134 1
	 * XXX Fool the compiler.  Making exit1() __dead is a can
@


1.7.2.4
log
@merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d87 1
a87 1
	    FORK_SHAREVM|FORK_NOZOMBIE|FORK_SIGHAND, NULL, 0, func, arg, rv);
d92 3
@


1.7.2.5
log
@Merge in -current from about a week ago
@
text
@d64 1
d67 8
d139 1
a139 1
	void (*kq_func)(void *);
d152 1
a152 1
	void (*func)(void *);
@


1.7.2.6
log
@Sync the SMP branch with 3.3
@
text
@d106 2
a107 1
kthread_exit(int ecode)
d142 3
a144 1
kthread_create_deferred(void (*func)(void *), void *arg)
d160 1
a160 1
kthread_run_deferred_queue(void)
@


1.7.2.7
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.7.2.6 2003/03/28 00:41:26 niklas Exp $	*/
d92 1
a92 1
	vsnprintf(p2->p_comm, sizeof p2->p_comm, fmt, ap);
@


1.7.2.8
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.7.2.7 2003/05/13 19:21:28 ho Exp $	*/
d54 1
a54 1
 * ansi and traditional c compilers.
@


1.7.2.9
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d57 1
a57 1
#include <sys/stdarg.h>
@


1.7.2.10
log
@Merge with the trunk
@
text
@d162 1
a162 1
		SIMPLEQ_REMOVE_HEAD(&kthread_q, kq_q);
@


1.6
log
@undo vfork changes, since non-UVM was not considered
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.4 1999/08/17 10:32:18 niklas Exp $	*/
d86 1
a86 1
	error = fork1(&proc0, ISRFORK, RFPROC | RFMEM | RFFDG | RFNOWAIT, NULL,
@


1.5
log
@Change fork1() from taking forktype and rforkflags, into a single flags
argument. Let sys_rfork build the arguments to fork1() and do the
sanity checks itself.
@
text
@d86 1
a86 1
	error = fork1(&proc0, FORK_RFORK|FORK_SHAREVM|FORK_NOZOMBIE, NULL,
@


1.4
log
@New cpu_fork API to take a stack in which you point the child's stackpointer
to, at the bottom or the top, depending on your architecture's stack growth
direction.  This is in preparation for Linux' clone(2) emulation.
port maintainers, please check that I did the work right.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.3 1999/01/26 23:07:26 niklas Exp $	*/
d86 1
a86 1
	error = fork1(&proc0, ISRFORK, RFPROC | RFMEM | RFFDG | RFNOWAIT, NULL,
@


1.3
log
@We need machine/cpu.h for the cpu_set_init_frame def
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.2 1999/01/11 15:34:16 niklas Exp $	*/
d86 2
a87 1
	error = fork1(&proc0, ISRFORK, RFPROC | RFMEM | RFFDG | RFNOWAIT, rv);
@


1.2
log
@sigh memset is not available everywhere, I should know better
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.1 1999/01/11 01:37:13 niklas Exp $	*/
d49 2
@


1.1
log
@kthread abstraction from NetBSD, implemented with our rfork
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_kthread.c,v 1.3 1998/12/22 21:21:36 kleink Exp $	*/
d169 1
a169 1
	kq = malloc(sizeof(*kq), M_TEMP, M_NOWAIT);
d172 1
a172 1
	memset(kq, 0, sizeof(*kq));
@

