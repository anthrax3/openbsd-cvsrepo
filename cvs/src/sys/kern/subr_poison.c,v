head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.10
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.6
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.4
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5;
locks; strict;
comment	@ * @;


1.13
date	2015.03.14.03.38.50;	author jsg;	state Exp;
branches;
next	1.12;
commitid	p4LJxGKbi0BU2cG6;

1.12
date	2014.09.27.12.23.41;	author tedu;	state Exp;
branches;
next	1.11;
commitid	gPseW7kCtGYq30fK;

1.11
date	2014.07.22.21.41.09;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	GdsWa1groKyl9a0G;

1.10
date	2014.07.08.22.30.26;	author tedu;	state Exp;
branches;
next	1.9;
commitid	g3IzOk3DPqpl8y5n;

1.9
date	2014.07.08.17.42.50;	author miod;	state Exp;
branches;
next	1.8;
commitid	BNvdU32ZeEdxUmLG;

1.8
date	2014.07.08.17.19.25;	author deraadt;	state Exp;
branches;
next	1.7;
commitid	EF98ch02VpFassUi;

1.7
date	2014.05.19.14.30.03;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2014.01.13.09.27.39;	author mpi;	state Exp;
branches;
next	1.5;

1.5
date	2013.05.31.18.29.32;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2013.05.30.18.20.17;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2013.05.02.18.55.24;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2013.04.06.06.10.34;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.28.16.41.39;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: subr_poison.c,v 1.12 2014/09/27 12:23:41 tedu Exp $ */
/*
 * Copyright (c) 2013 Ted Unangst <tedu@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <sys/param.h>

#include <uvm/uvm_extern.h>

/*
 * The POISON is used as known text to copy into free objects so
 * that modifications after frees can be detected.
 */
#ifdef DEADBEEF0
#define POISON0	((unsigned) DEADBEEF0)
#else
#define POISON0	((unsigned) 0xdeadbeef)
#endif
#ifdef DEADBEEF1
#define POISON1	((unsigned) DEADBEEF1)
#else
#define POISON1	((unsigned) 0xdeafbead)
#endif
#define POISON_SIZE	64

uint32_t
poison_value(void *v)
{
	ulong l = (u_long)v;

	l = l >> PAGE_SHIFT;

	switch (l & 3) {
	case 0:
		return POISON0;
	case 1:
		return POISON1;
	case 2:
		return (POISON0 & 0xffff0000) | (~POISON0 & 0x0000ffff);
	case 3:
		return (POISON1 & 0xffff0000) | (~POISON1 & 0x0000ffff);
	}
	return 0;
}

void
poison_mem(void *v, size_t len)
{
	uint32_t *ip = v;
	size_t i;
	uint32_t poison;

	poison = poison_value(v);

	if (len > POISON_SIZE)
		len = POISON_SIZE;
	len = len / sizeof(*ip);
	for (i = 0; i < len; i++)
		ip[i] = poison;
}

int
poison_check(void *v, size_t len, size_t *pidx, uint32_t *pval)
{
	uint32_t *ip = v;
	size_t i;
	uint32_t poison;

	poison = poison_value(v);

	if (len > POISON_SIZE)
		len = POISON_SIZE;
	len = len / sizeof(*ip);
	for (i = 0; i < len; i++) {
		if (ip[i] != poison) {
			*pidx = i;
			*pval = poison;
			return 1;
		}
	}
	return 0;
}

@


1.12
log
@add back inverted poison patterns. keep high bits, but twiddle low bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_poison.c,v 1.10 2014/07/08 22:30:26 tedu Exp $ */
a19 1
#include <sys/malloc.h>
@


1.11
log
@The last poison change is awesome, it is triggering use after free bugs.
Some of them aren't too difficult to find and fix, but others are turning
out to be deeply hidden.  The timing is poor -- disable this for now.
We need to revisit this right after tree unlock.
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_poison.c,v 1.9 2014/07/08 17:42:50 miod Exp $ */
d47 11
a57 1
	return (l & 1) ? POISON0 : POISON1;
@


1.10
log
@also use inverted poison patterns, to mix things up. ok deraadt miod
@
text
@d47 1
a47 11
	switch (l & 3) {
	case 0:
		return POISON0;
	case 1:
		return POISON1;
	case 2:
		return ~POISON0;
	case 3:
		return ~POISON1;
	}
	return 0;
@


1.9
log
@Repair compilability after the recent uvmexp changes, especially for
not compile-time-known page size platforms.
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_poison.c,v 1.8 2014/07/08 17:19:25 deraadt Exp $ */
d47 11
a57 1
	return (l & 1) ? POISON0 : POISON1;
@


1.8
log
@decouple struct uvmexp into a new file, so that uvm_extern.h and sysctl.h
don't need to be married.
ok guenther miod beck jsing kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_poison.c,v 1.7 2014/05/19 14:30:03 tedu Exp $ */
d21 2
@


1.7
log
@consistent use of uint32_t for poison values
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_poison.c,v 1.6 2014/01/13 09:27:39 mpi Exp $ */
a20 1
#include <uvm/uvm_extern.h>
@


1.6
log
@Return the poison value in poison_check() and not the modified value.

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_poison.c,v 1.5 2013/05/31 18:29:32 deraadt Exp $ */
d39 1
a39 1
int32_t
d54 1
a54 1
	int32_t poison;
d66 1
a66 1
poison_check(void *v, size_t len, size_t *pidx, int *pval)
d70 1
a70 1
	int32_t poison;
@


1.5
log
@unfortunately the sparc pagesize handling also requires uvm_extern.h
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_poison.c,v 1.4 2013/05/30 18:20:17 tedu Exp $ */
d80 1
a80 1
			*pval = ip[i];
@


1.4
log
@tiny change to support two poison values based on page addr
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_poison.c,v 1.3 2013/05/02 18:55:24 tedu Exp $ */
d21 1
@


1.3
log
@according to pedro, ids work better with the ending $
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d19 1
d27 1
a27 1
#define POISON	((unsigned) DEADBEEF0)
d29 6
a34 1
#define POISON	((unsigned) 0xdeadbeef)
d41 5
a45 1
	return POISON;
@


1.2
log
@i missed this file too.
@
text
@d1 1
a1 1
/*	$OpenBSD */
@


1.1
log
@separate memory poisoning code to a new file and make it usable kernel wide
ok deraadt
@
text
@d19 1
a19 1
#include <sys/systm.h>
d30 7
a36 1
#define POISON_SIZE	32
d43 3
d51 1
a51 1
		ip[i] = POISON;
a56 1

d59 3
d67 1
a67 1
		if (ip[i] != POISON) {
@

