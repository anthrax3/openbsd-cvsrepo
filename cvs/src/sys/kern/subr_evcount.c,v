head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.10
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.6
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.18
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.12
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.14
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.10
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.8
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.6
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.4
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.4
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.2
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.12
date	2015.03.14.03.38.50;	author jsg;	state Exp;
branches;
next	1.11;
commitid	p4LJxGKbi0BU2cG6;

1.11
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.10;
commitid	uzzBR7hz9ncd4O6G;

1.10
date	2010.09.20.06.33.46;	author matthew;	state Exp;
branches;
next	1.9;

1.9
date	2010.04.20.22.05.43;	author tedu;	state Exp;
branches;
next	1.8;

1.8
date	2006.10.17.10.29.50;	author grange;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.09.09.09.52;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.24.17.28.13;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.26.21.23.06;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.29.07.37.04;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.23.21.08.54;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.28.01.59.57;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.28.01.34.46;	author aaron;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: subr_evcount.c,v 1.11 2014/09/14 14:17:25 jsg Exp $ */
/*
 * Copyright (c) 2004 Artur Grabowski <art@@openbsd.org>
 * Copyright (c) 2004 Aaron Campbell <aaron@@openbsd.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL  DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/evcount.h>
#include <sys/timeout.h>
#include <sys/systm.h>
#include <sys/sysctl.h>

static TAILQ_HEAD(,evcount) evcount_list = TAILQ_HEAD_INITIALIZER(evcount_list);

void
evcount_attach(struct evcount *ec, const char *name, void *data)
{
	static int nextid = 0;

	memset(ec, 0, sizeof(*ec));
	ec->ec_name = name;
	ec->ec_id = ++nextid;
	ec->ec_data = data;
	TAILQ_INSERT_TAIL(&evcount_list, ec, next);
}

void
evcount_detach(struct evcount *ec)
{
	TAILQ_REMOVE(&evcount_list, ec, next);
}

#ifndef	SMALL_KERNEL

int
evcount_sysctl(int *name, u_int namelen, void *oldp, size_t *oldlenp,
    void *newp, size_t newlen)
{
	int error = 0, s, nintr, i;
	struct evcount *ec;
	u_int64_t count;

	if (newp != NULL)
		return (EPERM);

	if (name[0] != KERN_INTRCNT_NUM) {
		if (namelen != 2)
			return (ENOTDIR);
		if (name[1] < 0)
			return (EINVAL);
		i = name[1];
	} else
		i = -1;

	nintr = 0;
	TAILQ_FOREACH(ec, &evcount_list, next) {
		if (nintr++ == i)
			break;
	}

	switch (name[0]) {
	case KERN_INTRCNT_NUM:
		error = sysctl_rdint(oldp, oldlenp, NULL, nintr);
		break;
	case KERN_INTRCNT_CNT:
		if (ec == NULL)
			return (ENOENT);
		s = splhigh();
		count = ec->ec_count;
		splx(s);
		error = sysctl_rdquad(oldp, oldlenp, NULL, count);
		break;
	case KERN_INTRCNT_NAME:
		if (ec == NULL)
			return (ENOENT);
		error = sysctl_rdstring(oldp, oldlenp, NULL, ec->ec_name);
		break;
	case KERN_INTRCNT_VECTOR:
		if (ec == NULL || ec->ec_data == NULL)
			return (ENOENT);
		error = sysctl_rdint(oldp, oldlenp, NULL,
		    *((int *)ec->ec_data));
		break;
	default:
		error = EOPNOTSUPP;
		break;
	}

	return (error);
}
#endif	/* SMALL_KERNEL */
@


1.11
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_evcount.c,v 1.10 2010/09/20 06:33:46 matthew Exp $ */
a30 1
#include <sys/kernel.h>
@


1.10
log
@Get rid of evcount's support for arranging counters in a tree
hierarchy.  Everything attached to a single root node anyway, so at
best we had a bush.

"i think it is good" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_evcount.c,v 1.9 2010/04/20 22:05:43 tedu Exp $ */
a32 1
#include <sys/proc.h>
@


1.9
log
@remove proc.h include from uvm_map.h.  This has far reaching effects, as
sysctl.h was reliant on this particular include, and many drivers included
sysctl.h unnecessarily.  remove sysctl.h or add proc.h as needed.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_evcount.c,v 1.8 2006/10/17 10:29:50 grange Exp $ */
d36 1
a36 8
static TAILQ_HEAD(,evcount) evcount_list;

/*
 * Standard evcount parents.
 */
struct evcount evcount_intr;

void evcount_init(void);
d39 1
a39 11
evcount_init(void)
{
	TAILQ_INIT(&evcount_list);

	evcount_attach(&evcount_intr, "intr", NULL, NULL);
}


void
evcount_attach(struct evcount *ec, const char *name, void *data,
    struct evcount *parent)
a42 5
	if (nextid == 0) {
		nextid++;		/* start with 1 */
		evcount_init();
	}

d45 1
a45 2
	ec->ec_parent = parent;
	ec->ec_id = nextid++;
a79 2
		if (ec->ec_parent != &evcount_intr)
			continue;
@


1.8
log
@Kill unused code.

ok art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_evcount.c,v 1.7 2005/12/09 09:09:52 jsg Exp $ */
d33 1
@


1.7
log
@ansi and deregister. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_evcount.c,v 1.6 2004/12/24 17:28:13 miod Exp $ */
a35 1
static struct evcount *evcount_next_sync;
a41 1
void evcount_timeout(void *);
a74 3
	if (evcount_next_sync == ec)
		evcount_next_sync = TAILQ_NEXT(ec, next);

@


1.6
log
@Do not provide the KERN_EMUL, KERN_EVCOUNT, KERN_INTRCNT, KERN_PROC* and
HW_SENSORS sysctl trees if option SMALL_KERNEL.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_evcount.c,v 1.5 2004/11/26 21:23:06 miod Exp $ */
d56 2
a57 5
evcount_attach(ec, name, data, parent)
	struct evcount *ec;
	const char *name;
	void *data;
	struct evcount *parent;
d75 1
a75 2
evcount_detach(ec)
	struct evcount *ec;
d86 2
a87 7
evcount_sysctl(name, namelen, oldp, oldlenp, newp, newlen)
	int *name;
	u_int namelen;
	void *oldp;
	size_t *oldlenp;
	void *newp;
	size_t newlen;
@


1.5
log
@Kill __HAVE_EVCOUNT, now that all architectures provide them.
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_evcount.c,v 1.4 2004/09/29 07:37:04 miod Exp $ */
d87 2
d152 1
@


1.4
log
@ec_count32 was a bad idea; remove it for good.
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_evcount.c,v 1.3 2004/09/23 21:08:54 deraadt Exp $ */
a34 2
#ifdef __HAVE_EVCOUNT

a149 2

#endif /* __HAVE_EVCOUNT */
@


1.3
log
@change KERN_INTRCNT_CNT to return a quad; ok tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: subr_evcount.c,v 1.2 2004/06/28 01:59:57 deraadt Exp $ */
a46 1
void evcount_sync(struct evcount *);
a50 6
#ifndef __LP64__
	static struct timeout ec_to;

	timeout_set(&ec_to, evcount_timeout, &ec_to);
	timeout_add(&ec_to, hz);
#endif
a150 34
}

#ifndef __LP64__
/*
 * This timeout has to run once in a while for every event counter to
 * sync the real 64 bit counter with the 32 bit temporary counter, because
 * we cannot atomically increment the 64 bit counter on 32 bit systems.
 */
void
evcount_timeout(void *v)
{
	struct timeout *to = v;
	int s;

	s = splhigh();
	if (evcount_next_sync == NULL)
		evcount_next_sync = TAILQ_FIRST(&evcount_list);

	evcount_sync(evcount_next_sync);
	evcount_next_sync = TAILQ_NEXT(evcount_next_sync, next);
	splx(s);

	timeout_add(to, hz);
}
#endif

void
evcount_sync(struct evcount *ec)
{
#ifndef __LP64__
	/* XXX race */
	ec->ec_count += ec->ec_count32;
	ec->ec_count32 = 0;
#endif
@


1.2
log
@splhigh around ec_count fetches -- sorry art; ok aaron
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
a135 1
		/* XXX - bogus cast to int, but we can't do better. */
d139 1
a139 1
		error = sysctl_rdint(oldp, oldlenp, NULL, (int)count);
@


1.1
log
@Add new, generic ``evcount'' event counter API to the kernel.  From art@@,
with modifications from me.  Includes code for generic interrupt counter
fetching via sysctl.  deraadt@@ tholo@@ drahn@@ millert@@ ok
@
text
@d105 1
d107 1
a107 2
	int error = 0;
	int nintr, i;
d137 4
a140 1
		error = sysctl_rdint(oldp, oldlenp, NULL, (int)ec->ec_count);
d171 1
d173 1
d179 1
d189 1
@

