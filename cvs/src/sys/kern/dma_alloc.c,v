head	1.13;
access;
symbols
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.9.0.14
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.10
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3;
locks; strict;
comment	@ * @;


1.13
date	2016.09.15.02.00.16;	author dlg;	state Exp;
branches;
next	1.12;
commitid	RlO92XR575sygHqm;

1.12
date	2014.07.08.17.19.25;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	EF98ch02VpFassUi;

1.11
date	2014.06.15.11.43.24;	author sf;	state Exp;
branches;
next	1.10;
commitid	Y0AWLKcfCeF28jP4;

1.10
date	2014.03.28.17.57.11;	author mpi;	state Exp;
branches;
next	1.9;

1.9
date	2011.06.23.21.42.05;	author ariane;	state Exp;
branches;
next	1.8;

1.8
date	2011.04.18.19.23.46;	author art;	state Exp;
branches;
next	1.7;

1.7
date	2011.04.06.15.52.13;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.05.01.28.05;	author art;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.02.17.06.21;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2011.03.17.20.54.17;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.15.03.20.47;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.14.00.15.07;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.13.16.47.03;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@all pools have their ipl set via pool_setipl, so fold it into pool_init.

the ioff argument to pool_init() is unused and has been for many
years, so this replaces it with an ipl argument. because the ipl
will be set on init we no longer need pool_setipl.

most of these changes have been done with coccinelle using the spatch
below. cocci sucks at formatting code though, so i fixed that by hand.

the manpage and subr_pool.c bits i did myself.

ok tedu@@ jmatthew@@

@@ipl@@
expression pp;
expression ipl;
expression s, a, o, f, m, p;
@@@@
-pool_init(pp, s, a, o, f, m, p);
-pool_setipl(pp, ipl);
+pool_init(pp, s, a, ipl, f, m, p);
@
text
@/*	$OpenBSD: dma_alloc.c,v 1.12 2014/07/08 17:19:25 deraadt Exp $	 */

/*
 * Copyright (c) 2010 Theo de Raadt <deraadt@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/pool.h>

#include <uvm/uvm_extern.h>

static __inline int	 dma_alloc_index(size_t size);

/* Create dma pools from objects sized 2^4 to 2^16 */
#define DMA_PAGE_SHIFT		16
#define DMA_BUCKET_OFFSET	4
static char dmanames[DMA_PAGE_SHIFT - DMA_BUCKET_OFFSET + 1][10];
struct pool dmapools[DMA_PAGE_SHIFT - DMA_BUCKET_OFFSET + 1];

void
dma_alloc_init(void)
{
	int i;

	for (i = 0; i < nitems(dmapools); i++) {
		snprintf(dmanames[i], sizeof(dmanames[0]), "dma%d",
		    1 << (i + DMA_BUCKET_OFFSET));
		pool_init(&dmapools[i], 1 << (i + DMA_BUCKET_OFFSET), 0,
		    IPL_VM, 0, dmanames[i], NULL);
		pool_set_constraints(&dmapools[i], &kp_dma_contig);
		/* XXX need pool_setlowat(&dmapools[i], dmalowat); */
	}
}

static __inline int
dma_alloc_index(size_t sz)
{
	int b;

	for (b = 0; b < nitems(dmapools); b++)
		if (sz <= (1 << (b + DMA_BUCKET_OFFSET)))
			return (b);
#ifdef DEBUG
	printf("dma_alloc/free: object %zd too large\n", sz);
#endif
	return (-1);
}

void *
dma_alloc(size_t size, int prflags)
{
	int pi = dma_alloc_index(size);

	if (pi == -1)
		return (NULL);
	return pool_get(&dmapools[pi], prflags);
}


void
dma_free(void *m, size_t size)
{
	int pi = dma_alloc_index(size);

	if (pi == -1)
		return;
	pool_put(&dmapools[pi], m);
}
@


1.12
log
@decouple struct uvmexp into a new file, so that uvm_extern.h and sysctl.h
don't need to be married.
ok guenther miod beck jsing kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_alloc.c,v 1.11 2014/06/15 11:43:24 sf Exp $	 */
d41 2
a42 2
		pool_init(&dmapools[i], 1 << (i + DMA_BUCKET_OFFSET), 0, 0, 0,
		    dmanames[i], NULL);
a43 1
		pool_setipl(&dmapools[i], IPL_VM);
@


1.11
log
@Fix a few format string bugs with -DDEBUG
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_alloc.c,v 1.10 2014/03/28 17:57:11 mpi Exp $	 */
d20 1
@


1.10
log
@Reduce uvm include madness.  Use <uvm/uvm_extern.h> instead of
<uvm/uvm.h> if possible and remove double inclusions.

ok beck@@, mlarkin@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_alloc.c,v 1.9 2011/06/23 21:42:05 ariane Exp $	 */
d57 1
a57 1
	printf("dma_alloc/free: object %d too large\n", sz);
@


1.9
log
@Make mbufs and dma_alloc be contig allocations.
Requested by dlg@@

ok oga@@
@
text
@d1 2
a2 1
/*	$OpenBSD: dma_alloc.c,v 1.8 2011/04/18 19:23:46 art Exp $	 */
d21 2
a22 1
#include <uvm/uvm.h>
@


1.8
log
@Put back the change of pool and malloc into the new km_alloc(9) api.
The problems during the hackathon were not caused by this (most likely).

prodded by deraadt@@ and beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_alloc.c,v 1.7 2011/04/06 15:52:13 art Exp $	 */
d40 1
a40 1
		pool_set_constraints(&dmapools[i], &kp_dma);
@


1.7
log
@Backout the uvm_km_getpage -> km_alloc conversion. Weird things are happening
and we aren't sure what's causing them.

shouted oks by many before I even built a kernel with the diff.
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_alloc.c,v 1.6 2011/04/05 01:28:05 art Exp $	 */
d40 1
a40 1
		pool_set_constraints(&dmapools[i], &dma_constraint, 1);
@


1.6
log
@ - Change pool constraints to use kmem_pa_mode instead of uvm_constraint_range
 - Use km_alloc for all backend allocations in pools.
 - Use km_alloc for the emergmency kentry allocations in uvm_mapent_alloc
 - Garbage collect uvm_km_getpage, uvm_km_getpage_pla and uvm_km_putpage

ariane@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_alloc.c,v 1.5 2011/04/02 17:06:21 deraadt Exp $	 */
d40 1
a40 1
		pool_set_constraints(&dmapools[i], &kp_dma);
@


1.5
log
@The dma pools need to be IPL_VM
ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_alloc.c,v 1.4 2011/03/17 20:54:17 deraadt Exp $	 */
d40 1
a40 1
		pool_set_constraints(&dmapools[i], &dma_constraint, 1);
@


1.4
log
@make more dma pools -- all the way up to 64K.  at least the scsi
SCIOCCOMMAND wants a dma'able object that big.  should we handle
this another way, by handling that data in a buf?
ok krw
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_alloc.c,v 1.3 2010/07/15 03:20:47 deraadt Exp $	 */
d41 1
@


1.3
log
@limit the pools from 14 bits down.  We cannot use PAGE_SIZE because it
is a variable on sparc.  This should be revisited... after the arguments
for pagesize vs 4K complete :)
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_alloc.c,v 1.2 2010/07/14 00:15:07 deraadt Exp $	 */
d24 5
a28 3
#define DMA_BUCKET_OFFSET 4
static char dmanames[14 - DMA_BUCKET_OFFSET][8];
struct pool dmapools[14 - DMA_BUCKET_OFFSET];
@


1.2
log
@oops; Fred Crowson
@
text
@d1 1
a1 1
/*	$OpenBSD: dma_alloc.c,v 1.1 2010/07/13 16:47:03 deraadt Exp $	 */
d25 2
a26 2
static char dmanames[PAGE_SHIFT - DMA_BUCKET_OFFSET][8];
struct pool dmapools[PAGE_SHIFT - DMA_BUCKET_OFFSET];
@


1.1
log
@dma_alloc() and dma_free().  This is a thin shim on top of a bag of
pools, sized by powers of 2, which are constrained to dma memory.
ok matthew tedu thib
@
text
@d1 1
a1 1
/*	$OpenBSD$	 */
d52 1
a52 1
	printf("dma_alloc/free: object %d too large\n", sz)
@

