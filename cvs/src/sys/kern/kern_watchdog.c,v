head	1.13;
access;
symbols
	OPENBSD_6_0:1.11.0.8
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.9.0.10
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.10
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.8
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.12
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.14
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.10
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.8
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.6
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.4
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.2
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.0.16
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.14
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.12
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.10
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.8
	OPENBSD_3_4_BASE:1.1
	UBC:1.1.0.6
	UBC_SYNC_A:1.1
	SMP:1.1.0.4
	OPENBSD_3_3:1.1.0.2
	OPENBSD_3_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.13
date	2017.01.09.17.58.44;	author mpi;	state Exp;
branches;
next	1.12;
commitid	j82PkKLhCqOiV0JZ;

1.12
date	2017.01.09.17.21.42;	author mpi;	state Exp;
branches;
next	1.11;
commitid	o57YWCdCXNjzNuSt;

1.11
date	2014.12.10.12.27.57;	author mikeb;	state Exp;
branches;
next	1.10;
commitid	v6PAeA18rydwc5Vx;

1.10
date	2014.09.14.14.17.25;	author jsg;	state Exp;
branches;
next	1.9;
commitid	uzzBR7hz9ncd4O6G;

1.9
date	2012.10.17.22.32.01;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.20.22.05.43;	author tedu;	state Exp;
branches;
next	1.7;

1.7
date	2006.12.21.12.47.57;	author mbalmer;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.19.21.43.13;	author mk;	state Exp;
branches;
next	1.5;

1.5
date	2006.07.12.21.31.23;	author mk;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.19.09.55.32;	author dlg;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.18.13.07.00;	author dlg;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.28.00.14.29;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.21.16.59.23;	author markus;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Revert previous, it's a documented behavior and people might rely on it.

Pointed by deraadt@@
@
text
@/*      $OpenBSD: kern_watchdog.c,v 1.12 2017/01/09 17:21:42 mpi Exp $        */

/*
 * Copyright (c) 2003 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#include <sys/param.h>
#include <sys/kernel.h>
#include <sys/systm.h>
#include <sys/timeout.h>
#include <sys/sysctl.h>
#include <sys/time.h>

void	wdog_tickle(void *arg);
int	(*wdog_ctl_cb)(void *, int) = NULL;
void	*wdog_ctl_cb_arg = NULL;
int	wdog_period = 0;
int	wdog_auto = 1;
struct	timeout wdog_timeout;

void
wdog_register(int (*cb)(void *, int), void *cb_arg)
{
	if (wdog_ctl_cb != NULL)
		return;

	wdog_ctl_cb = cb;
	wdog_ctl_cb_arg = cb_arg;
	timeout_set(&wdog_timeout, wdog_tickle, NULL);
}

void
wdog_tickle(void *arg)
{
	if (wdog_ctl_cb == NULL)
		return;
	(void) (*wdog_ctl_cb)(wdog_ctl_cb_arg, wdog_period);
	timeout_add(&wdog_timeout, wdog_period * hz / 2);
}

void
wdog_shutdown(void *arg)
{
	if (wdog_ctl_cb == NULL || wdog_ctl_cb_arg != arg)
		return;
	timeout_del(&wdog_timeout);
	(void) (*wdog_ctl_cb)(wdog_ctl_cb_arg, 0);
	wdog_ctl_cb = NULL;
	wdog_period = 0;
	wdog_auto = 1;
}

int
sysctl_wdog(int *name, u_int namelen, void *oldp, size_t *oldlenp, void *newp,
    size_t newlen)
{
	int error, period;

	if (wdog_ctl_cb == NULL)
		return (EOPNOTSUPP);

	switch (name[0]) {
	case KERN_WATCHDOG_PERIOD:
		period = wdog_period;
		error = sysctl_int(oldp, oldlenp, newp, newlen, &period);
		if (error)
			return (error);
		if (newp) {
			timeout_del(&wdog_timeout);
			wdog_period = (*wdog_ctl_cb)(wdog_ctl_cb_arg, period);
		}
		break;
	case KERN_WATCHDOG_AUTO:
		error = sysctl_int(oldp, oldlenp, newp, newlen, &wdog_auto);
		if (error)
			return (error);
		break;
	default:
		return (EINVAL);
	}

	if (wdog_auto && wdog_period > 0) {
		(void) (*wdog_ctl_cb)(wdog_ctl_cb_arg, wdog_period);
		timeout_add(&wdog_timeout, wdog_period * hz / 2);
	} else
		timeout_del(&wdog_timeout);

	return (error);
}
@


1.12
log
@Stop and restart the watchdog timer when entering and leaving ddb(4).

From Christian Ludwig.
@
text
@d1 1
a1 1
/*      $OpenBSD: kern_watchdog.c,v 1.11 2014/12/10 12:27:57 mikeb Exp $        */
a108 22

#ifdef DDB
void
db_wdog_disable(void)
{
	if (wdog_ctl_cb == NULL || wdog_period == 0)
		return;

	timeout_del(&wdog_timeout);
	(void) (*wdog_ctl_cb)(wdog_ctl_cb_arg, 0);
}

void
db_wdog_enable(void)
{
	if (wdog_ctl_cb == NULL || wdog_period == 0)
		return;

	(void) (*wdog_ctl_cb)(wdog_ctl_cb_arg, wdog_period);
	timeout_add(&wdog_timeout, wdog_period * hz / 2);
}
#endif
@


1.11
log
@Convert watchdog(4) devices to use autoconf(9) framework.

ok deraadt, tests on glxpcib and ok mpi
@
text
@d1 1
a1 1
/*      $OpenBSD: kern_watchdog.c,v 1.10 2014/09/14 14:17:25 jsg Exp $        */
d109 22
@


1.10
log
@remove uneeded proc.h includes
ok mpi@@ kspillner@@
@
text
@d1 1
a1 1
/*      $OpenBSD: kern_watchdog.c,v 1.9 2012/10/17 22:32:01 deraadt Exp $        */
a37 1
void	*wdog_cookie;
a48 1
	wdog_cookie = shutdownhook_establish((void (*)(void *))wdog_shutdown, NULL);
d61 1
a61 1
wdog_shutdown(int (*cb)(void *, int), void *cb_arg)
d63 1
a63 1
	if (wdog_ctl_cb == NULL)
a95 7
		if (wdog_auto && wdog_cookie == NULL)
			wdog_cookie = shutdownhook_establish((void (*)(void *))wdog_shutdown,
			    NULL);
		else if (!wdog_auto && wdog_cookie) {
			shutdownhook_disestablish(wdog_cookie);
			wdog_cookie = NULL;
		}
d99 1
a99 1
	} 
@


1.9
log
@Swap arguments to wdog_register() since it is nicer, and prepare
wdog_shutdown() for external usage.
@
text
@d1 1
a1 1
/*      $OpenBSD: kern_watchdog.c,v 1.8 2010/04/20 22:05:43 tedu Exp $        */
d29 1
a29 1
#include <sys/proc.h>
@


1.8
log
@remove proc.h include from uvm_map.h.  This has far reaching effects, as
sysctl.h was reliant on this particular include, and many drivers included
sysctl.h unnecessarily.  remove sysctl.h or add proc.h as needed.
ok deraadt
@
text
@d1 1
a1 1
/*      $OpenBSD: kern_watchdog.c,v 1.7 2006/12/21 12:47:57 mbalmer Exp $        */
a33 1
void	wdog_shutdown(void *arg);
d42 1
a42 1
wdog_register(void *cb_arg, int (*cb)(void *, int))
d50 1
a50 1
	wdog_cookie = shutdownhook_establish(wdog_shutdown, NULL);
d63 1
a63 1
wdog_shutdown(void *arg)
d99 1
a99 1
			wdog_cookie = shutdownhook_establish(wdog_shutdown,
@


1.7
log
@Change the semantics of kern.watchdog.auto slightly: If kern.watchdog.auto is
set to 0, the watchdog will not be retriggered by the kernel *and* it will not
be disabled at system shutdown time (before it got disabled at system shutdown
time.)

ok markus mickey mk
@
text
@d1 1
a1 1
/*      $OpenBSD: kern_watchdog.c,v 1.6 2006/09/19 21:43:13 mk Exp $        */
d29 1
@


1.6
log
@A bit of microoptimisation that doesn't hurt readability:  Don't do
timeout_del() if we're going to timeout_add() in the next block.

ok dlg (a while ago), markus
@
text
@d1 1
a1 1
/*      $OpenBSD: kern_watchdog.c,v 1.5 2006/07/12 21:31:23 mk Exp $        */
d38 1
d50 1
a50 1
	shutdownhook_establish(wdog_shutdown, NULL);
d98 7
@


1.5
log
@Small KNF.
@
text
@d1 1
a1 1
/*      $OpenBSD: kern_watchdog.c,v 1.4 2006/04/19 09:55:32 dlg Exp $        */
a101 1
	timeout_del(&wdog_timeout);
d105 3
a107 1
	}
@


1.4
log
@wdog_init is only called from wdog_register, so fold them in together.

from mk. ok markus@@
@
text
@d1 1
a1 1
/*      $OpenBSD: kern_watchdog.c,v 1.3 2006/04/18 13:07:00 dlg Exp $        */
d38 1
a38 1
struct timeout	wdog_timeout;
@


1.3
log
@set the params that govern watchdog behaviour back to defaults when the
wdog is shut down.

from mk. ok markus@@
@
text
@d1 1
a1 1
/*      $OpenBSD: kern_watchdog.c,v 1.2 2005/11/28 00:14:29 jsg Exp $        */
a31 1
void	wdog_init(void);
a40 7
wdog_init(void)
{
	timeout_set(&wdog_timeout, wdog_tickle, NULL);
	shutdownhook_establish(wdog_shutdown, NULL);
}

void
d45 1
a45 1
	wdog_init();
d48 2
@


1.2
log
@ansi/deregister.
'go for it' deraadt@@
@
text
@d1 1
a1 1
/*      $OpenBSD: kern_watchdog.c,v 1.1 2003/01/21 16:59:23 markus Exp $        */
d74 3
@


1.1
log
@add kern.watchdog sysctl and generic watchdog interface;
based on feedback and discussions with mickey, henric, fgsch and jakob.
ok art@@, mickey@@, jakob@@, henric@@
@
text
@d1 1
a1 1
/*      $OpenBSD: $        */
d77 2
a78 7
sysctl_wdog(name, namelen, oldp, oldlenp, newp, newlen)
	int *name;
	u_int namelen;
	void *oldp;
	size_t *oldlenp;
	void *newp;
	size_t newlen;
@

