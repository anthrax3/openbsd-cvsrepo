head	1.18;
access;
symbols
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.14.0.4
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.12.0.12
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.7.0.4
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3;
locks; strict;
comment	@ * @;


1.18
date	2015.01.27.10.18.31;	author dlg;	state dead;
branches;
next	1.17;
commitid	gmRmg4gRdnpts3kX;

1.17
date	2014.11.01.23.58.28;	author tedu;	state Exp;
branches;
next	1.16;
commitid	9PQjDNhyphSHE6E7;

1.16
date	2014.10.08.15.28.39;	author blambert;	state Exp;
branches;
next	1.15;
commitid	QJzJJkPn3LHvPIsc;

1.15
date	2014.07.12.18.43.32;	author tedu;	state Exp;
branches;
next	1.14;
commitid	QlVV51SZgNFxsXxC;

1.14
date	2013.11.26.20.33.19;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2013.11.18.20.21.51;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.23.04.49.10;	author dlg;	state Exp;
branches;
next	1.11;

1.11
date	2009.09.02.14.05.05;	author dlg;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.24.14.56.41;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.30.23.55.22;	author dlg;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.27.02.13.34;	author dlg;	state Exp;
branches;
next	1.7;

1.7
date	2008.02.15.04.08.36;	author tedu;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.13.05.55.13;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.28.13.54.07;	author tedu;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.25.15.56.17;	author tedu;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.11.22.15.11;	author thib;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.31.21.33.07;	author tedu;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.31.18.16.59;	author dlg;	state Exp;
branches;
next	;


desc
@@


1.18
log
@remove workq code. its been replaced with tasks.

it has been unused since december, and unhooked from the build since
christmas.

ok krw@@
@
text
@/*	$OpenBSD: kern_workq.c,v 1.17 2014/11/01 23:58:28 tedu Exp $ */

/*
 * Copyright (c) 2007 David Gwynne <dlg@@openbsd.org>
 * Copyright (c) 2007 Ted Unangst <tedu@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/pool.h>
#include <sys/queue.h>
#include <sys/mutex.h>
#include <sys/kthread.h>
#include <sys/workq.h>

struct workq {
	enum {
		WQ_S_CREATED,
		WQ_S_RUNNING,
		WQ_S_DESTROYED
	}		wq_state;
	int		wq_running;
	int		wq_max;
	const char	*wq_name;

	struct mutex	wq_mtx;
	SIMPLEQ_HEAD(, workq_task) wq_tasklist;
};

struct pool	workq_task_pool;
struct workq	workq_syswq = {
	WQ_S_CREATED,
	0,
	1,
	"syswq"
};

/* if we allocate the wqt, we need to know we free it too */ 
#define WQT_F_POOL	(1U << 31)

void			workq_init(void); /* called in init_main.c */
void			workq_create_thread(void *);
struct workq_task *	workq_next_task(struct workq *);
void			workq_thread(void *);

void
workq_init(void)
{
	pool_init(&workq_task_pool, sizeof(struct workq_task), 0, 0,
	    0, "wqtasks", NULL);
	pool_setipl(&workq_task_pool, IPL_HIGH);

	mtx_init(&workq_syswq.wq_mtx, IPL_HIGH);
	SIMPLEQ_INIT(&workq_syswq.wq_tasklist);
	kthread_create_deferred(workq_create_thread, &workq_syswq);
}

struct workq *
workq_create(const char *name, int maxqs, int ipl)
{
	struct workq *wq;

	wq = malloc(sizeof(*wq), M_DEVBUF, M_NOWAIT);
	if (wq == NULL)
		return (NULL);

	wq->wq_state = WQ_S_CREATED;
	wq->wq_running = 0;
	wq->wq_max = maxqs;
	wq->wq_name = name;

	mtx_init(&wq->wq_mtx, ipl);
	SIMPLEQ_INIT(&wq->wq_tasklist);

	/* try to create a thread to guarantee that tasks will be serviced */
	kthread_create_deferred(workq_create_thread, wq);

	return (wq);
}

void
workq_destroy(struct workq *wq)
{
	mtx_enter(&wq->wq_mtx);
	switch (wq->wq_state) {
	case WQ_S_CREATED:
		/* wq is still referenced by workq_create_thread */
		wq->wq_state = WQ_S_DESTROYED;
		mtx_leave(&wq->wq_mtx);
		return;

	case WQ_S_RUNNING:
		wq->wq_state = WQ_S_DESTROYED;
		break;

	default:
		panic("unexpected %s wq state %d", wq->wq_name, wq->wq_state);
	}

	while (wq->wq_running != 0) {
		wakeup(wq);
		msleep(&wq->wq_running, &wq->wq_mtx, PWAIT, "wqdestroy", 0);
	}
	mtx_leave(&wq->wq_mtx);

	free(wq, M_DEVBUF, sizeof(*wq));
}

int
workq_add_task(struct workq *wq, int flags, workq_fn func, void *a1, void *a2)
{
	struct workq_task	*wqt;
	
	wqt = pool_get(&workq_task_pool, (flags & WQ_WAITOK) ?
	    PR_WAITOK : PR_NOWAIT);
	if (!wqt)
		return (ENOMEM);

	workq_queue_task(wq, wqt, WQT_F_POOL | flags, func, a1, a2);

	return (0);
}

void
workq_queue_task(struct workq *wq, struct workq_task *wqt, int flags,
    workq_fn func, void *a1, void *a2)
{
	wqt->wqt_flags = flags;
	wqt->wqt_func = func;
	wqt->wqt_arg1 = a1;
	wqt->wqt_arg2 = a2;

	if (wq == NULL)
		wq = &workq_syswq;

	mtx_enter(&wq->wq_mtx);
	SIMPLEQ_INSERT_TAIL(&wq->wq_tasklist, wqt, wqt_entry);
	mtx_leave(&wq->wq_mtx);

	wakeup_one(wq);
}

void
workq_create_thread(void *arg)
{
	struct workq		*wq = arg;
	int			rv;

	mtx_enter(&wq->wq_mtx);

	switch (wq->wq_state) {
	case WQ_S_DESTROYED:
		mtx_leave(&wq->wq_mtx);
		free(wq, M_DEVBUF, sizeof(*wq));
		return;

	case WQ_S_CREATED:
		wq->wq_state = WQ_S_RUNNING;
		break;

	default:
		panic("unexpected %s wq state %d", wq->wq_name, wq->wq_state);
	}

	do {
		wq->wq_running++;
		mtx_leave(&wq->wq_mtx);

		rv = kthread_create(workq_thread, wq, NULL, wq->wq_name);
		
		mtx_enter(&wq->wq_mtx);
		if (rv != 0) {
			printf("unable to create workq thread for \"%s\"\n",
			    wq->wq_name);

			wq->wq_running--;
			/* could have been destroyed during kthread_create */
			if (wq->wq_state == WQ_S_DESTROYED &&
			    wq->wq_running == 0)
				wakeup_one(&wq->wq_running);
			break;
		}
	} while (wq->wq_running < wq->wq_max);
	mtx_leave(&wq->wq_mtx);
}


struct workq_task *
workq_next_task(struct workq *wq)
{
	struct workq_task	*wqt;

	mtx_enter(&wq->wq_mtx);

	for (;;) {
		wqt = SIMPLEQ_FIRST(&wq->wq_tasklist);
		if (wqt != NULL) {
			SIMPLEQ_REMOVE_HEAD(&wq->wq_tasklist, wqt_entry);
			break;
		} else if (wq->wq_state == WQ_S_RUNNING)
			msleep(wq, &wq->wq_mtx, PWAIT, "bored", 0);
		else {
			if (--wq->wq_running == 0)
				wakeup_one(&wq->wq_running);
			break;
		}
	}

	mtx_leave(&wq->wq_mtx);

	return (wqt);
}

void
workq_thread(void *arg)
{
	struct workq		*wq = arg;
	struct workq_task	*wqt;
	int			mypool;

	while ((wqt = workq_next_task(wq)) != NULL) {
		mypool = (wqt->wqt_flags & WQT_F_POOL);
		wqt->wqt_func(wqt->wqt_arg1, wqt->wqt_arg2);
		if (mypool)
			pool_put(&workq_task_pool, wqt);
		sched_pause();
	}

	kthread_exit(0);
}
@


1.17
log
@add a few sizes to free
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.16 2014/10/08 15:28:39 blambert Exp $ */
@


1.16
log
@make workq/taskq runner threads yield when they've hogged the cpu

ok deraadt@@ dlg@@ phessler@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.15 2014/07/12 18:43:32 tedu Exp $ */
d119 1
a119 1
	free(wq, M_DEVBUF, 0);
d167 1
a167 1
		free(wq, M_DEVBUF, 0);
@


1.15
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.14 2013/11/26 20:33:19 deraadt Exp $ */
d239 1
@


1.14
log
@1 << 31 cleanup.  Eitan Adler pointed out that there has been a
resurrection of the bad idiom in the tree.
sufficient review by miod, kettenis, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.13 2013/11/18 20:21:51 deraadt Exp $ */
d119 1
a119 1
	free(wq, M_DEVBUF);
d167 1
a167 1
		free(wq, M_DEVBUF);
@


1.13
log
@simplify kthread_create(). no more stdarg
ok matthew guenther mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.12 2010/08/23 04:49:10 dlg Exp $ */
d52 1
a52 1
#define WQT_F_POOL	(1 << 31)
@


1.12
log
@fix two problems identified by matthew@@:

1. though shalt not hold a mutex while sleeping, which kthread_create can
do. instead of holding the wq mutex over the kthread_create and increasing
the number of running threads after kthread_create succeeds, this counts
the thread and drops the mutex before kthread_create. after the call it
takes the mutex again and decrements the number of threads if the call
failed.

2. if a workq is created during autoconf, the actual thread create
is deferred to when the scheduler is running. if the workq is
destroyed before then, the wq memory gets freed and then the deferred
thread creation will be using freed memory. we now have a workq
state variable so we can do the right thing at the different stages
of the workqs lifetime.

ok matthew@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.11 2009/09/02 14:05:05 dlg Exp $ */
d182 1
a182 1
		rv = kthread_create(workq_thread, wq, NULL, "%s", wq->wq_name);
@


1.11
log
@when you add a task to a workq, it allocates memory to handle the
task and shove it on a list. allocations can fail, so if something
that wants to run a task later already has memory to handle the
workq task then let it provide it via a new function called
workq_queue_task.

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.10 2009/06/24 14:56:41 jsg Exp $ */
d30 5
a34 2
	int		wq_flags;
#define WQ_F_RUNNING		(1<<0)
d45 1
a45 1
	WQ_F_RUNNING,
a54 1
void			workq_init_syswq(void *);
d68 1
a68 13
	kthread_create_deferred(workq_init_syswq, NULL);
}

void
workq_init_syswq(void *arg)
{
	mtx_enter(&workq_syswq.wq_mtx);
	if (kthread_create(workq_thread, &workq_syswq, NULL, "%s",
	    workq_syswq.wq_name) != 0)
		panic("unable to create system work queue thread");

	workq_syswq.wq_running++;
	mtx_leave(&workq_syswq.wq_mtx);
d80 1
a80 1
	wq->wq_flags = WQ_F_RUNNING;
d98 14
a112 1
	wq->wq_flags &= ~WQ_F_RUNNING;
a116 1

a159 1
	int			i;
d163 19
a181 1
	for (i = wq->wq_running; i < wq->wq_max; i++) {
d183 2
d186 1
a186 1
			printf("unable to create thread for \"%s\" workq\n",
d188 6
d196 1
a196 2
		wq->wq_running++;
	}
d213 1
a213 1
		} else if (wq->wq_flags & WQ_F_RUNNING)
@


1.10
log
@Remove a semicolon at the end of an if statement that made the thread
waiting for all the workqs to die wakeup more often than
it should have.

ok dlg@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.9 2008/10/30 23:55:22 dlg Exp $ */
a28 9
struct workq_task {
	int		wqt_flags;
	workq_fn	wqt_func;
	void		*wqt_arg1;
	void		*wqt_arg2;

	SIMPLEQ_ENTRY(workq_task) wqt_entry;
};

d48 3
a123 3

	if (wq == NULL)
		wq = &workq_syswq;
d130 9
d144 3
a151 2

	return (0);
d206 1
d209 1
d211 2
a212 1
		pool_put(&workq_task_pool, wqt);
@


1.9
log
@reintroduce mutexes to workqs for locking.

tested by many on many archs including several alpha test.

ok tedu@@ go for it deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.8 2008/10/27 02:13:34 dlg Exp $ */
d189 1
a189 1
			if (--wq->wq_running == 0);
@


1.8
log
@when shutting workq threads down, dont try to take the big kernel
lock when we've never given it up. this is a remnant of the mpsafe
workq stuff we had that wasnt cleaned up properly.

found by and fix tested by oga@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.6 2007/12/13 05:55:13 tedu Exp $ */
d25 1
a41 1
	int		wq_busy;
d45 1
a52 1
	0,
d57 5
a61 4
void		workq_init(void); /* called in init_main.c */
void		workq_init_syswq(void *);
void		workq_create_thread(void *);
void		workq_thread(void *);
d68 1
d70 1
d78 1
d84 1
d88 1
a88 1
workq_create(const char *name, int maxqs)
a97 1
	wq->wq_busy = 0;
d100 2
d113 1
a113 3
	int s;

	s = splhigh();
d118 1
a118 1
		tsleep(&wq->wq_running, PWAIT, "wqdestroy", 0);
d121 1
a121 1
	splx(s);
a129 1
	int			s;
d131 1
a131 1
	if (wq == NULL) {
a132 1
	}
a133 1
	s = splhigh();
a135 1
	splx(s);
d144 1
a144 1
	s = splhigh();
d146 1
a146 1
	splx(s);
d157 1
d160 33
a192 4
	rv = kthread_create(workq_thread, wq, NULL, "%s", wq->wq_name);
	if (rv != 0) {
		printf("unable to create \"%s\" workq thread\n", wq->wq_name);
		return;
d195 3
a197 1
	wq->wq_running++;
a204 1
	int			s;
d206 3
a208 15
	s = splhigh();
	while (wq->wq_flags & WQ_F_RUNNING) {
		while ((wqt = SIMPLEQ_FIRST(&wq->wq_tasklist)) != NULL) {
			SIMPLEQ_REMOVE_HEAD(&wq->wq_tasklist, wqt_entry);
			wq->wq_busy++;
			splx(s);

			wqt->wqt_func(wqt->wqt_arg1, wqt->wqt_arg2);

			s = splhigh();
			pool_put(&workq_task_pool, wqt);

			wq->wq_busy--;
		}
		tsleep(wq, PWAIT, "bored", 0);
a209 3
	wq->wq_running--;
	splx(s);
	wakeup(&wq->wq_running);
@


1.7
log
@revert to a pre-mutex state.  for unknown reasons, the mutexes do not provide
sufficient exclusion on alpha, leading to self-locking panics.
@
text
@a194 1
	KERNEL_PROC_LOCK(curproc);
@


1.6
log
@use a mutex to protect workq.  incidentally, this removes the additional
creation of threads which may have caused multile syswq threads to start.
ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.5 2007/11/28 13:54:07 tedu Exp $ */
a26 1
#include <sys/mutex.h>
a45 1
	struct mutex	wq_mtx;
a66 1
	pool_setipl(&workq_task_pool, IPL_HIGH);
a96 1
	mtx_init(&wq->wq_mtx, IPL_HIGH);
d107 1
d109 1
a109 1
	mtx_enter(&wq->wq_mtx);
d114 1
a114 1
		msleep(&wq->wq_running, &wq->wq_mtx, PWAIT, "wqdestroy", 0);
d117 1
a117 1
	mtx_leave(&wq->wq_mtx);
d126 1
a126 1
	int			wake = 1;
d132 1
d135 1
d144 1
a144 1
	mtx_enter(&wq->wq_mtx);
d146 1
a146 1
	mtx_leave(&wq->wq_mtx);
d148 1
a148 2
	if (wake)
		wakeup_one(wq);
d173 1
d175 1
a175 2
	KERNEL_PROC_UNLOCK(curproc);
	mtx_enter(&wq->wq_mtx);
d180 1
a180 1
			mtx_leave(&wq->wq_mtx);
a181 2
			if ((wqt->wqt_flags & WQ_MPSAFE) == 0)
				KERNEL_PROC_LOCK(curproc);
d183 2
a184 2
			if ((wqt->wqt_flags & WQ_MPSAFE) == 0)
				KERNEL_PROC_UNLOCK(curproc);
a186 1
			mtx_enter(&wq->wq_mtx);
d189 1
a189 1
		msleep(wq, &wq->wq_mtx, PWAIT, "bored", 0);
d192 1
a192 1
	mtx_leave(&wq->wq_mtx);
@


1.5
log
@remove the DIRECTOK flag.  the caller semantics were too weird, and it's a
bad idea to have functions that react unpredictably.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.4 2007/11/25 15:56:17 tedu Exp $ */
d27 1
d47 1
d69 1
d100 1
a110 1
	int			s;
d112 1
a112 1
	s = splhigh();
d117 1
a117 1
		tsleep(&wq->wq_running, PWAIT, "wqdestroy", 0);
d120 1
a120 1
	splx(s);
d126 1
a126 2
workq_add_task(struct workq *wq, int flags, workq_fn func,
    void *a1, void *a2)
a129 1
	int			s;
a134 1
	s = splhigh();
a136 1
	splx(s);
d145 1
a145 1
	s = splhigh();
d147 1
a147 5
	if ((wq->wq_running < wq->wq_max) && (wq->wq_running == wq->wq_busy)) {
		kthread_create_deferred(workq_create_thread, wq);
		wake = 0;
	}
	splx(s);
a174 1
	int			s;
d176 2
a177 1
	s = splhigh();
d182 1
a182 1
			splx(s);
d184 2
a185 2
			if (wqt->wqt_flags & WQ_MPSAFE)
				;
d187 3
a189 2
			if (wqt->wqt_flags & WQ_MPSAFE)
				;
d191 1
a191 1
			s = splhigh();
a192 1
			pool_put(&workq_task_pool, wqt);
d194 1
a194 1
		tsleep(wq, PWAIT, "bored", 0);
d197 1
a197 1
	splx(s);
d200 1
@


1.4
log
@convert crypto thread to workq.  add WQ_DIRECTOK flag to workq.
combined, this lets us use crypto before the thread is running
and therefore cryptoraid can attach nice and early.
ok/testing deraadt mbalmer marco
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.3 2007/06/11 22:15:11 thib Exp $ */
a130 4
		if (flags & WQ_DIRECTOK) {
			func(a1, a2);
			return 0;
		}
@


1.3
log
@kill unneeded include;
(stdarg.h, leftover from the vararg's idea).

ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.2 2007/05/31 21:33:07 tedu Exp $ */
d130 5
a134 1
	if (wq == NULL)
d136 1
@


1.2
log
@switch the flags argument to the front, requested by art
ok dlg
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_workq.c,v 1.1 2007/05/31 18:16:59 dlg Exp $ */
a25 1
#include <sys/stdarg.h>
@


1.1
log
@add an interface for work queues run from a kernel thread.

this type of code is implemented many times already in the kernel, this is
a generic version of all those replicated code bases.

originally from tedu@@
ok tedu@@ tom@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
d31 1
a31 1
	void		(*wqt_func)(void *, void *);
d124 2
a125 2
workq_add_task(struct workq *wq, void (*func)(void *, void *),
    void *a1, void *a2, int flags)
@

