head	1.12;
access;
symbols
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_1:1.11.0.4
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.12
	UBC:1.11.0.2
	UBC_BASE:1.11
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.8.0.12
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.10
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.8
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.6
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.4
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.2
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@ * @;


1.12
date	2002.07.06.19.14.20;	author nordin;	state dead;
branches;
next	1.11;

1.11
date	2001.11.06.19.53.20;	author miod;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.07.04.23.00.58;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.13.20.59.15;	author art;	state Exp;
branches;
next	1.8;

1.8
date	98.08.27.05.00.22;	author deraadt;	state Exp;
branches
	1.8.8.1;
next	1.7;

1.7
date	98.08.27.00.44.43;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	98.02.08.22.41.35;	author tholo;	state Exp;
branches;
next	1.5;

1.5
date	97.08.29.20.44.25;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.06.12.07.51.06;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.19.16.08.57;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.25.09.54.42;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	96.01.29.23.05.07;	author tholo;	state Exp;
branches;
next	;

1.8.8.1
date	2001.05.14.22.32.41;	author niklas;	state Exp;
branches;
next	1.8.8.2;

1.8.8.2
date	2001.10.31.03.26.29;	author nate;	state Exp;
branches;
next	1.8.8.3;

1.8.8.3
date	2001.11.13.23.04.23;	author niklas;	state Exp;
branches;
next	1.8.8.4;

1.8.8.4
date	2003.03.28.00.41.26;	author niklas;	state dead;
branches;
next	;

1.11.2.1
date	2002.10.29.00.36.44;	author art;	state dead;
branches;
next	;


desc
@@


1.12
log
@Remove kernel support for NTP. ok deraadt@@ and tholo@@
@
text
@/*	$OpenBSD: kern_ntptime.c,v 1.11 2001/11/06 19:53:20 miod Exp $	*/
/*	$NetBSD: kern_ntptime.c,v 1.2 1996/03/07 14:31:20 christos Exp $	*/

/******************************************************************************
 *                                                                            *
 * Copyright (c) David L. Mills 1993, 1994                                    *
 *                                                                            *
 * Permission to use, copy, modify, and distribute this software and its      *
 * documentation for any purpose and without fee is hereby granted, provided  *
 * that the above copyright notice appears in all copies and that both the    *
 * copyright notice and this permission notice appear in supporting           *
 * documentation, and that the name University of Delaware not be used in     *
 * advertising or publicity pertaining to distribution of the software        *
 * without specific, written prior permission.  The University of Delaware    *
 * makes no representations about the suitability this software for any       *
 * purpose.  It is provided "as is" without express or implied warranty.      *
 *                                                                            *
 ******************************************************************************/

/*
 * Modification history kern_ntptime.c
 *
 * 24 Sep 94	David L. Mills
 *	Tightened code at exits.
 *
 * 24 Mar 94	David L. Mills
 *	Revised syscall interface to include new variables for PPS
 *	time discipline.
 *
 * 14 Feb 94	David L. Mills
 *	Added code for external clock
 *
 * 28 Nov 93	David L. Mills
 *	Revised frequency scaling to conform with adjusted parameters
 *
 * 17 Sep 93	David L. Mills
 *	Created file
 */
/*
 * ntp_gettime(), ntp_adjtime() - precision time interface for SunOS
 * V4.1.1 and V4.1.3
 *
 * These routines consitute the Network Time Protocol (NTP) interfaces
 * for user and daemon application programs. The ntp_gettime() routine
 * provides the time, maximum error (synch distance) and estimated error
 * (dispersion) to client user application programs. The ntp_adjtime()
 * routine is used by the NTP daemon to adjust the system clock to an
 * externally derived time. The time offset and related variables set by
 * this routine are used by hardclock() to adjust the phase and
 * frequency of the phase-lock loop which controls the system clock.
 */
#include <sys/param.h>
#include <sys/resourcevar.h>
#include <sys/systm.h>
#include <sys/kernel.h>
#include <sys/proc.h>
#include <sys/timex.h>
#include <sys/vnode.h>

#include <sys/mount.h>
#include <sys/syscallargs.h>

#include <machine/cpu.h>

#include <uvm/uvm_extern.h>
#include <sys/sysctl.h>

#ifdef NTP

/*
 * The following variables are used by the hardclock() routine in the
 * kern_clock.c module and are described in that module. 
 */
extern volatile struct timeval time;	/* kernel time variable */
extern int time_state;		/* clock state */
extern int time_status;		/* clock status bits */
extern long time_offset;	/* time adjustment (us) */
extern long time_freq;		/* frequency offset (scaled ppm) */
extern long time_maxerror;	/* maximum error (us) */
extern long time_esterror;	/* estimated error (us) */
extern long time_constant;	/* pll time constant */
extern long time_precision;	/* clock precision (us) */
extern long time_tolerance;	/* frequency tolerance (scaled ppm) */

#ifdef PPS_SYNC
/*
 * The following variables are used only if the PPS signal discipline
 * is configured in the kernel.
 */
extern int pps_shift;		/* interval duration (s) (shift) */
extern long pps_freq;		/* pps frequency offset (scaled ppm) */
extern long pps_jitter;		/* pps jitter (us) */
extern long pps_stabil;		/* pps stability (scaled ppm) */
extern long pps_jitcnt;		/* jitter limit exceeded */
extern long pps_calcnt;		/* calibration intervals */
extern long pps_errcnt;		/* calibration errors */
extern long pps_stbcnt;		/* stability limit exceeded */
#endif /* PPS_SYNC */



/*ARGSUSED*/
/*
 * ntp_gettime() - NTP user application interface
 */
int
sys_ntp_gettime(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;

{
	struct sys_ntp_gettime_args /* {
		syscallarg(struct timex *) ntvp;
	} */ *uap = v;
	struct timeval atv;
	struct ntptimeval ntv;
	int error = 0;
	int s;

	if (SCARG(uap, ntvp)) {
		s = splclock();
#ifdef EXT_CLOCK
		/*
		 * The microtime() external clock routine returns a
		 * status code. If less than zero, we declare an error
		 * in the clock status word and return the kernel
		 * (software) time variable. While there are other
		 * places that call microtime(), this is the only place
		 * that matters from an application point of view.
		 */
		if (microtime(&atv) < 0) {
			time_status |= STA_CLOCKERR;
			ntv.time = time;
		} else
			time_status &= ~STA_CLOCKERR;
#else /* EXT_CLOCK */
		microtime(&atv);
#endif /* EXT_CLOCK */
		ntv.time = atv;
		ntv.maxerror = time_maxerror;
		ntv.esterror = time_esterror;
		splx(s);

		error = copyout((caddr_t)&ntv, (caddr_t)SCARG(uap, ntvp),
		    sizeof (ntv));
	}
	if (!error) {

		/*
		 * Status word error decode. If any of these conditions
		 * occur, an error is returned, instead of the status
		 * word. Most applications will care only about the fact
		 * the system clock may not be trusted, not about the
		 * details.
		 *
		 * Hardware or software error
		 */
		if ((time_status & (STA_UNSYNC | STA_CLOCKERR)) ||

		/*
		 * PPS signal lost when either time or frequency
		 * synchronization requested
		 */
		    (time_status & (STA_PPSFREQ | STA_PPSTIME) &&
		    !(time_status & STA_PPSSIGNAL)) ||

		/*
		 * PPS jitter exceeded when time synchronization
		 * requested
		 */
		    (time_status & STA_PPSTIME &&
		    time_status & STA_PPSJITTER) ||

		/*
		 * PPS wander exceeded or calibration error when
		 * frequency synchronization requested
		 */
		    (time_status & STA_PPSFREQ &&
		    time_status & (STA_PPSWANDER | STA_PPSERROR)))
			*retval = TIME_ERROR;
		else
			*retval = (register_t)time_state;
	}
	return(error);
}


/* ARGSUSED */
/*
 * ntp_adjtime() - NTP daemon application interface
 */
int
sys_ntp_adjtime(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	struct sys_ntp_adjtime_args /* {
		syscallarg(struct timex *) tp;
	} */ *uap = v;
	struct timex ntv;
	int error = 0;
	int modes;
	int s;

	if ((error = copyin((caddr_t)SCARG(uap, tp), (caddr_t)&ntv,
			sizeof(ntv))))
		return (error);

	/*
	 * Update selected clock variables - only the superuser can
	 * change anything. Note that there is no error checking here on
	 * the assumption the superuser should know what it is doing.
	 */
	modes = ntv.modes;
	if (modes != 0 && (error = suser(p->p_ucred, &p->p_acflag)))
		return (error);

	s = splclock();
	if (modes & MOD_FREQUENCY)
#ifdef PPS_SYNC
		time_freq = ntv.freq - pps_freq;
#else /* PPS_SYNC */
		time_freq = ntv.freq;
#endif /* PPS_SYNC */
	if (modes & MOD_MAXERROR)
		time_maxerror = ntv.maxerror;
	if (modes & MOD_ESTERROR)
		time_esterror = ntv.esterror;
	if (modes & MOD_STATUS) {
		time_status &= STA_RONLY;
		time_status |= ntv.status & ~STA_RONLY;
	}
	if (modes & MOD_TIMECONST)
		time_constant = ntv.constant;
	if (modes & MOD_OFFSET)
		hardupdate(ntv.offset);

	/*
	 * Retrieve all clock variables
	 */
	if (time_offset < 0)
		ntv.offset = -(-time_offset >> SHIFT_UPDATE);
	else
		ntv.offset = time_offset >> SHIFT_UPDATE;
#ifdef PPS_SYNC
	ntv.freq = time_freq + pps_freq;
#else /* PPS_SYNC */
	ntv.freq = time_freq;
#endif /* PPS_SYNC */
	ntv.maxerror = time_maxerror;
	ntv.esterror = time_esterror;
	ntv.status = time_status;
	ntv.constant = time_constant;
	ntv.precision = time_precision;
	ntv.tolerance = time_tolerance;
#ifdef PPS_SYNC
	ntv.shift = pps_shift;
	ntv.ppsfreq = pps_freq;
	ntv.jitter = pps_jitter >> PPS_AVG;
	ntv.stabil = pps_stabil;
	ntv.calcnt = pps_calcnt;
	ntv.errcnt = pps_errcnt;
	ntv.jitcnt = pps_jitcnt;
	ntv.stbcnt = pps_stbcnt;
#endif /* PPS_SYNC */
	splx(s);

	error = copyout((caddr_t)&ntv, (caddr_t)SCARG(uap, tp), sizeof(ntv));
	if (!error) {

		/*
		 * Status word error decode. See comments in
		 * ntp_gettime() routine.
		 */
		if ((time_status & (STA_UNSYNC | STA_CLOCKERR)) ||
		    (time_status & (STA_PPSFREQ | STA_PPSTIME) &&
		    !(time_status & STA_PPSSIGNAL)) ||
		    (time_status & STA_PPSTIME &&
		    time_status & STA_PPSJITTER) ||
		    (time_status & STA_PPSFREQ &&
		    time_status & (STA_PPSWANDER | STA_PPSERROR)))
			*retval = TIME_ERROR;
		else
			*retval = (register_t)time_state;
	}
	return error;
}
#endif /* NTP */

/*
 * return information about kernel precision timekeeping
 */
int
sysctl_ntptime(where, sizep)
	register char *where;
	size_t *sizep;
{
#ifndef NTP
	return (ENOSYS);
#else /* !NTP */
	struct timeval atv;
	struct ntptimeval ntv;
	int s;

	/*
	 * Construct ntp_timeval.
	 */

	s = splclock();
#ifdef EXT_CLOCK
	/*
	 * The microtime() external clock routine returns a
	 * status code. If less than zero, we declare an error
	 * in the clock status word and return the kernel
	 * (software) time variable. While there are other
	 * places that call microtime(), this is the only place
	 * that matters from an application point of view.
	 */
	if (microtime(&atv) < 0) {
		time_status |= STA_CLOCKERR;
		ntv.time = time;
	} else {
		time_status &= ~STA_CLOCKERR;
	}
#else /* EXT_CLOCK */
	microtime(&atv);
#endif /* EXT_CLOCK */
	ntv.time = atv;
	ntv.maxerror = time_maxerror;
	ntv.esterror = time_esterror;
	splx(s);

#ifdef notyet
	/*
	 * Status word error decode. If any of these conditions
	 * occur, an error is returned, instead of the status
	 * word. Most applications will care only about the fact
	 * the system clock may not be trusted, not about the
	 * details.
	 *
	 * Hardware or software error
	 */
	if ((time_status & (STA_UNSYNC | STA_CLOCKERR)) ||
		ntv.time_state = TIME_ERROR;

	/*
	 * PPS signal lost when either time or frequency
	 * synchronization requested
	 */
	   (time_status & (STA_PPSFREQ | STA_PPSTIME) &&
	    !(time_status & STA_PPSSIGNAL)) ||

	/*
	 * PPS jitter exceeded when time synchronization
	 * requested
	 */
	   (time_status & STA_PPSTIME &&
	    time_status & STA_PPSJITTER) ||

	/*
	 * PPS wander exceeded or calibration error when
	 * frequency synchronization requested
	 */
	   (time_status & STA_PPSFREQ &&
	    time_status & (STA_PPSWANDER | STA_PPSERROR)))
		ntv.time_state = TIME_ERROR;
	else
		ntv.time_state = time_state;
#endif /* notyet */
	return (sysctl_rdstruct(where, sizep, NULL, &ntv, sizeof(ntv)));
#endif /* NTP */
}
@


1.11
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ntptime.c,v 1.10 2001/07/04 23:00:58 espie Exp $	*/
@


1.11.2.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ntptime.c,v 1.11 2001/11/06 19:53:20 miod Exp $	*/
@


1.10
log
@match time definition with include file, volatile included.

Okay millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ntptime.c,v 1.9 2001/02/13 20:59:15 art Exp $	*/
d65 1
a65 1
#include <vm/vm.h>
@


1.9
log
@No need to cast splx to (void).
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ntptime.c,v 1.8 1998/08/27 05:00:22 deraadt Exp $	*/
d74 1
a74 1
extern struct timeval time;	/* kernel time variable */
@


1.8
log
@Undo changes which were not discussed.
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ntptime.c,v 1.6 1998/02/08 22:41:35 tholo Exp $	*/
d143 1
a143 1
		(void) splx(s);
d268 1
a268 1
	(void)splx(s);
@


1.8.8.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ntptime.c,v 1.9 2001/02/13 20:59:15 art Exp $	*/
d143 1
a143 1
		splx(s);
d268 1
a268 1
	splx(s);
@


1.8.8.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ntptime.c,v 1.8.8.1 2001/05/14 22:32:41 niklas Exp $	*/
d74 1
a74 1
extern volatile struct timeval time;	/* kernel time variable */
@


1.8.8.3
log
@merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 1
a65 1
#include <uvm/uvm_extern.h>
@


1.8.8.4
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ntptime.c,v 1.8.8.3 2001/11/13 23:04:23 niklas Exp $	*/
@


1.7
log
@defopt NTP
@
text
@a51 3

#include "opt_ntp.h"

@


1.6
log
@Updates to match type changes in syscall tables
@
text
@d1 1
a1 1
/*	$OpenBSD: kern_ntptime.c,v 1.5 1997/08/29 20:44:25 kstailey Exp $	*/
d52 3
@


1.5
log
@prefix ntp system calls with sys_ like other system calls
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d114 1
a114 1
		syscallarg(struct timex *) tp;
d121 1
a121 1
	if (SCARG(uap, tp)) {
d145 1
a145 1
		error = copyout((caddr_t)&ntv, (caddr_t)SCARG(uap, tp),
@


1.4
log
@notdef NTP, do not build ntp_gettime/ntp_adjtime
@
text
@d107 1
a107 1
ntp_gettime(p, v, retval)
d113 1
a113 1
	struct ntp_gettime_args /* {
d194 1
a194 1
ntp_adjtime(p, v, retval)
d199 1
a199 1
	struct ntp_adjtime_args /* {
@


1.3
log
@NetBSD 960317 merge
@
text
@d290 1
a290 2


d300 3
d373 1
a374 38

#else /* !NTP */

/*
 * For kernels configured without the NTP option, emulate the behavior
 * of a kernel with no NTP support (i.e., sys_nosys()). On systems
 * where kernel  NTP support appears present when xntpd is compiled,
 * (e.g., sys/timex.h is present),  xntpd relies on getting a SIGSYS
 * signal in response to an ntp_adjtime() syscal, to inform xntpd that
 * NTP support is not really present, and xntpd should fall back to
 * using a user-level phase-locked loop to discipline the clock.
 */
int
ntp_gettime(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	return(ENOSYS);
}

int
ntp_adjtime(p, v, retval)
	struct proc *p;
	void *v;
	register_t *retval;
{
	return(sys_nosys(p, v, retval));
}

int
sysctl_ntptime(where, sizep)
	register char *where;
	size_t *sizep;
{
	return (ENOSYS);
}
#endif /* NTP */
@


1.2
log
@Correct an access check so ntp_adjtime() can actually be used
@
text
@d1 3
d53 1
d58 1
d63 7
d74 1
d100 3
d107 1
a107 1
sys_ntp_gettime(p, v, retval)
d111 1
d113 2
a114 2
	register struct sys_ntp_gettime_args /* {
		syscallarg(struct ntptimeval *) tp;
d118 2
a119 1
	int error, s;
d183 1
a183 1
			*retval = time_state;
d185 1
a185 1
	return (error);
d188 2
d194 1
a194 1
sys_ntp_adjtime(p, v, retval)
d199 1
a199 1
	register struct sys_ntp_adjtime_args /* {
d203 1
d205 1
a205 1
	int error, s;
d207 2
a208 2
	error = copyin((caddr_t)SCARG(uap, tp), (caddr_t)&ntv, sizeof(ntv));
	if (error)
d217 1
a217 1
	if (modes && (error = suser(p->p_ucred, &p->p_acflag)))
d219 1
d270 1
a270 2
	error = copyout((caddr_t)&ntv, (caddr_t)SCARG(uap, tp),
	    sizeof(ntv));
d286 38
a323 1
			*retval = time_state;
d325 83
a407 1
	return (error);
d409 1
@


1.1
log
@Add kernel PLL for system clock
Add ntp_adjtime() and ntp_gettime() system calls
Mostly stolen from FreeBSD
@
text
@d196 2
a197 2
	if (!suser(p->p_ucred, &p->p_acflag) && modes != 0)
		return;
@
