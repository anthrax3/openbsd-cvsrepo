head	1.12;
access;
symbols
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.10.0.28
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.26
	OPENBSD_5_0:1.10.0.24
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.22
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.20
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.16
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.18
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.14
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.12
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.10
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.8
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.6
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.4
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.2
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.8
	UBC:1.7.0.2
	UBC_BASE:1.7
	OPENBSD_3_0:1.5.0.12
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.10
	OPENBSD_2_8:1.5.0.8
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.6
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.4
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2013.10.17.08.02.19;	author deraadt;	state dead;
branches;
next	1.11;

1.11
date	2012.09.29.22.23.40;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.12.04.31.24;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.24.22.45.33;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.26.23.32.50;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.15.06.22.30;	author art;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2001.11.06.19.53.20;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	99.09.10.22.11.49;	author art;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	99.01.11.05.12.21;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.23.02.42.41;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.03.17.19.36;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.43;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.43;	author deraadt;	state Exp;
branches;
next	;

1.5.4.1
date	2001.11.13.23.04.23;	author niklas;	state Exp;
branches;
next	1.5.4.2;

1.5.4.2
date	2001.12.05.01.02.39;	author niklas;	state Exp;
branches;
next	1.5.4.3;

1.5.4.3
date	2003.03.28.00.41.26;	author niklas;	state Exp;
branches;
next	1.5.4.4;

1.5.4.4
date	2004.02.19.10.56.37;	author niklas;	state Exp;
branches;
next	;

1.7.2.1
date	2002.10.29.00.36.44;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove support for a.out and ecoff.  We only do elf now.
ok miod
@
text
@/*	$OpenBSD: exec_aout.c,v 1.11 2012/09/29 22:23:40 miod Exp $	*/
/*	$NetBSD: exec_aout.c,v 1.14 1996/02/04 02:15:01 christos Exp $	*/

/*
 * Copyright (c) 1993, 1994 Christopher G. Demetriou
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Christopher G. Demetriou.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/malloc.h>
#include <sys/vnode.h>
#include <sys/exec.h>
#include <sys/resourcevar.h>
#include <uvm/uvm_extern.h>

#if defined(_KERN_DO_AOUT)
#if defined(COMPAT_AOUT)
void aout_compat_setup(struct exec_package *epp);
#endif

/*
 * exec_aout_makecmds(): Check if it's an a.out-format executable.
 *
 * Given a proc pointer and an exec package pointer, see if the referent
 * of the epp is in a.out format.  First check 'standard' magic numbers for
 * this architecture.  If that fails, try a cpu-dependent hook.
 *
 * This function, in the former case, or the hook, in the latter, is
 * responsible for creating a set of vmcmds which can be used to build
 * the process's vm space and inserting them into the exec package.
 */

int
exec_aout_makecmds(struct proc *p, struct exec_package *epp)
{
	u_long midmag, magic;
	u_short mid;
	int error;
	struct exec *execp = epp->ep_hdr;

	if (epp->ep_hdrvalid < sizeof(struct exec))
		return ENOEXEC;

	midmag = ntohl(execp->a_midmag);
	mid = (midmag >> 16) & 0x3ff;
	magic = midmag & 0xffff;

	midmag = mid << 16 | magic;

	switch (midmag) {
	case (MID_MACHINE << 16) | ZMAGIC:
		error = exec_aout_prep_zmagic(p, epp);
		break;
	case (MID_MACHINE << 16) | NMAGIC:
		error = exec_aout_prep_nmagic(p, epp);
		break;
	case (MID_MACHINE << 16) | OMAGIC:
		error = exec_aout_prep_omagic(p, epp);
		break;
	default:
		error = cpu_exec_aout_makecmds(p, epp);
	}

	if (error)
		kill_vmcmds(&epp->ep_vmcmds);
#ifdef COMPAT_AOUT
	aout_compat_setup(epp);
#endif

	return error;
}

/*
 * exec_aout_prep_zmagic(): Prepare a 'native' ZMAGIC binary's exec package
 *
 * First, set of the various offsets/lengths in the exec package.
 *
 * Then, mark the text image busy (so it can be demand paged) or error
 * out if this is not possible.  Finally, set up vmcmds for the
 * text, data, bss, and stack segments.
 */

int
exec_aout_prep_zmagic(struct proc *p, struct exec_package *epp)
{
	struct exec *execp = epp->ep_hdr;

	epp->ep_taddr = USRTEXT;
	epp->ep_tsize = execp->a_text;
	epp->ep_daddr = epp->ep_taddr + execp->a_text;
	epp->ep_dsize = execp->a_data + execp->a_bss;
	epp->ep_entry = execp->a_entry;

	/*
	 * check if vnode is in open for writing, because we want to
	 * demand-page out of it.  if it is, don't do it, for various
	 * reasons
	 */
	if ((execp->a_text != 0 || execp->a_data != 0) &&
	    epp->ep_vp->v_writecount != 0) {
#ifdef DIAGNOSTIC
		if (epp->ep_vp->v_flag & VTEXT)
			panic("exec: a VTEXT vnode has writecount != 0");
#endif
		return ETXTBSY;
	}
	vn_marktext(epp->ep_vp);

	/* set up command for text segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_pagedvn, execp->a_text,
	    epp->ep_taddr, epp->ep_vp, 0, VM_PROT_READ|VM_PROT_EXECUTE);

	/* set up command for data segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_pagedvn, execp->a_data,
	    epp->ep_daddr, epp->ep_vp, execp->a_text,
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/* set up command for bss segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, execp->a_bss,
	    epp->ep_daddr + execp->a_data, NULLVP, 0,
	    VM_PROT_READ|VM_PROT_WRITE);

	return exec_setup_stack(p, epp);
}

/*
 * exec_aout_prep_nmagic(): Prepare a 'native' NMAGIC binary's exec package
 */

int
exec_aout_prep_nmagic(struct proc *p, struct exec_package *epp)
{
	struct exec *execp = epp->ep_hdr;
	long bsize, baddr;

	epp->ep_taddr = USRTEXT;
	epp->ep_tsize = execp->a_text;
	epp->ep_daddr = roundup(epp->ep_taddr + execp->a_text, __LDPGSZ);
	epp->ep_dsize = execp->a_data + execp->a_bss;
	epp->ep_entry = execp->a_entry;

	/* set up command for text segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_readvn, execp->a_text,
	    epp->ep_taddr, epp->ep_vp, sizeof(struct exec),
	    VM_PROT_READ|VM_PROT_EXECUTE);

	/* set up command for data segment */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_readvn, execp->a_data,
	    epp->ep_daddr, epp->ep_vp, execp->a_text + sizeof(struct exec),
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/* set up command for bss segment */
	baddr = round_page(epp->ep_daddr + execp->a_data);
	bsize = epp->ep_daddr + epp->ep_dsize - baddr;
	if (bsize > 0)
		NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, bsize, baddr,
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE);

	return exec_setup_stack(p, epp);
}

/*
 * exec_aout_prep_omagic(): Prepare a 'native' OMAGIC binary's exec package
 */

int
exec_aout_prep_omagic(struct proc *p, struct exec_package *epp)
{
	struct exec *execp = epp->ep_hdr;
	long dsize, bsize, baddr;

	epp->ep_taddr = USRTEXT;
	epp->ep_tsize = execp->a_text;
	epp->ep_daddr = epp->ep_taddr + execp->a_text;
	epp->ep_dsize = execp->a_data + execp->a_bss;
	epp->ep_entry = execp->a_entry;

	/* set up command for text and data segments */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_readvn,
	    execp->a_text + execp->a_data, epp->ep_taddr, epp->ep_vp,
	    sizeof(struct exec), VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	/* set up command for bss segment */
	baddr = round_page(epp->ep_daddr + execp->a_data);
	bsize = epp->ep_daddr + epp->ep_dsize - baddr;
	if (bsize > 0)
		NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, bsize, baddr,
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE);

	/*
	 * Make sure (# of pages) mapped above equals (vm_tsize + vm_dsize);
	 * obreak(2) relies on this fact. Both `vm_tsize' and `vm_dsize' are
	 * computed (in execve(2)) by rounding *up* `ep_tsize' and `ep_dsize'
	 * respectively to page boundaries.
	 * Compensate `ep_dsize' for the amount of data covered by the last
	 * text page. 
	 */
	dsize = epp->ep_dsize + execp->a_text - round_page(execp->a_text);
	epp->ep_dsize = (dsize > 0) ? dsize : 0;
	/* round to a page boundary, uvm depends on this */
	epp->ep_daddr = round_page(epp->ep_daddr);
	return exec_setup_stack(p, epp);
}

#endif /* _KERN_DO_AOUT */
@


1.11
log
@When running a.out OMAGIC binaries, be sure to round ep_daddr to a page
boundary; uvm depends on this and will KASSERT this for its own safety.
Found the hard way, rounding direction discussed with ariane@@ (I initially
wanted to round down, but it makes more sense to round up).
Of course noone in his right mind ought to run OMAGIC binaries (-:
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.10 2005/11/12 04:31:24 jsg Exp $	*/
@


1.10
log
@ansi. No binary change.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.9 2003/06/24 22:45:33 espie Exp $	*/
d227 2
@


1.9
log
@a.out emulation for dynamic binaries: intercept the right system calls
so that they look in /emul/a.out first. This allows a.out's ld.so to
find its own libraries without interfering with ELF at all.

Many comments from various people. okay deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.8 2002/07/26 23:32:50 deraadt Exp $	*/
d61 1
a61 3
exec_aout_makecmds(p, epp)
	struct proc *p;
	struct exec_package *epp;
d111 1
a111 3
exec_aout_prep_zmagic(p, epp)
	struct proc *p;
	struct exec_package *epp;
d158 1
a158 3
exec_aout_prep_nmagic(p, epp)
	struct proc *p;
	struct exec_package *epp;
d194 1
a194 3
exec_aout_prep_omagic(p, epp)
	struct proc *p;
	struct exec_package *epp;
@


1.8
log
@request non-executable BSS from uvm (first page of BSS may land inside
last page of DATA, and still have executability unless we can find a
resolution to the GOT/PLT issues in a.out)
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.7 2001/11/15 06:22:30 art Exp $	*/
d44 3
d95 3
@


1.7
log
@New function vn_marktext - mark a vnode as executing a text image.
Use where VTEXT was set in vnode flags before. Doesn't do anything else (yet).
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.6 2001/11/06 19:53:20 miod Exp $	*/
d146 1
a146 1
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);
d184 1
a184 1
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);
d217 1
a217 1
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);
@


1.7.2.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.7 2001/11/15 06:22:30 art Exp $	*/
d146 1
a146 1
	    VM_PROT_READ|VM_PROT_WRITE);
d184 1
a184 1
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE);
d217 1
a217 1
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE);
@


1.6
log
@Replace inclusion of <vm/foo.h> with the correct <uvm/bar.h> when necessary.
(Look ma, I might have broken the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.5 1999/09/10 22:11:49 art Exp $	*/
d132 1
a132 1
	epp->ep_vp->v_flag |= VTEXT;
@


1.5
log
@use round_page(foo) instead of roundup(foo, NBPG)
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.4 1999/01/11 05:12:21 millert Exp $	*/
d41 1
a41 1
#include <vm/vm.h>
@


1.5.4.1
log
@merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
#include <uvm/uvm_extern.h>
@


1.5.4.2
log
@Merge in -current
@
text
@d132 1
a132 1
	vn_marktext(epp->ep_vp);
@


1.5.4.3
log
@Sync the SMP branch with 3.3
@
text
@d146 1
a146 1
	    VM_PROT_READ|VM_PROT_WRITE);
d184 1
a184 1
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE);
d217 1
a217 1
		    NULLVP, 0, VM_PROT_READ|VM_PROT_WRITE);
@


1.5.4.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a43 3
#if defined(COMPAT_AOUT)
void aout_compat_setup(struct exec_package *epp);
#endif
a91 3
#ifdef COMPAT_AOUT
	aout_compat_setup(epp);
#endif
@


1.4
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 1
/*	$OpenBSD: exec_aout.c,v 1.3 1996/12/23 02:42:41 deraadt Exp $	*/
d180 1
a180 1
	baddr = roundup(epp->ep_daddr + execp->a_data, NBPG);
d213 1
a213 1
	baddr = roundup(epp->ep_daddr + execp->a_data, NBPG);
d227 1
a227 1
	dsize = epp->ep_dsize + execp->a_text - roundup(execp->a_text, NBPG);
@


1.3
log
@use _{NLIST,KERN}_DO_{AOUT,ELF,ECOFF} to select binary types
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d128 1
a128 1
			panic("exec: a VTEXT vnode has writecount != 0\n");
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d43 2
d148 1
a148 1
	return exec_aout_setup_stack(p, epp);
d186 1
a186 1
	return exec_aout_setup_stack(p, epp);
d229 1
a229 1
	return exec_aout_setup_stack(p, epp);
d232 1
a232 43
/*
 * exec_aout_setup_stack(): Set up the stack segment for an a.out
 * executable.
 *
 * Note that the ep_ssize parameter must be set to be the current stack
 * limit; this is adjusted in the body of execve() to yield the
 * appropriate stack segment usage once the argument length is
 * calculated.
 *
 * This function returns an int for uniformity with other (future) formats'
 * stack setup functions.  They might have errors to return.
 */

int
exec_aout_setup_stack(p, epp)
	struct proc *p;
	struct exec_package *epp;
{

	epp->ep_maxsaddr = USRSTACK - MAXSSIZ;
	epp->ep_minsaddr = USRSTACK;
	epp->ep_ssize = p->p_rlimit[RLIMIT_STACK].rlim_cur;

	/*
	 * set up commands for stack.  note that this takes *two*, one to
	 * map the part of the stack which we can access, and one to map
	 * the part which we can't.
	 *
	 * arguably, it could be made into one, but that would require the
	 * addition of another mapping proc, which is unnecessary
	 *
	 * note that in memory, things assumed to be: 0 ....... ep_maxsaddr
	 * <stack> ep_minsaddr
	 */
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero,
	    ((epp->ep_minsaddr - epp->ep_ssize) - epp->ep_maxsaddr),
	    epp->ep_maxsaddr, NULLVP, 0, VM_PROT_NONE);
	NEW_VMCMD(&epp->ep_vmcmds, vmcmd_map_zero, epp->ep_ssize,
	    (epp->ep_minsaddr - epp->ep_ssize), NULLVP, 0,
	    VM_PROT_READ|VM_PROT_WRITE|VM_PROT_EXECUTE);

	return 0;
}
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: exec_aout.c,v 1.13 1994/08/01 18:49:49 pk Exp $	*/
a90 1
bad:
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
