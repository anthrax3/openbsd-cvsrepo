head	1.16;
access;
symbols
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.9.0.6
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.4
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.4.0.8
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2;
locks; strict;
comment	@ * @;


1.16
date	2016.05.23.09.31.28;	author natano;	state Exp;
branches;
next	1.15;
commitid	wckQrShbScIX7TCE;

1.15
date	2016.03.19.12.04.15;	author natano;	state Exp;
branches;
next	1.14;
commitid	gAjwyca5TfuoJAhn;

1.14
date	2015.07.19.16.21.11;	author beck;	state Exp;
branches;
next	1.13;
commitid	LZPv3kiZFL3zSeSL;

1.13
date	2015.05.01.01.30.58;	author millert;	state Exp;
branches;
next	1.12;
commitid	QXOJtYQx3rj1zO0b;

1.12
date	2015.03.14.03.38.51;	author jsg;	state Exp;
branches;
next	1.11;
commitid	p4LJxGKbi0BU2cG6;

1.11
date	2015.01.19.20.16.27;	author guenther;	state Exp;
branches;
next	1.10;
commitid	QVL39KLOo98QeiJ1;

1.10
date	2015.01.19.20.13.03;	author guenther;	state Exp;
branches;
next	1.9;
commitid	WmNIsMMe4hdWUaPw;

1.9
date	2013.08.13.05.52.24;	author guenther;	state Exp;
branches;
next	1.8;

1.8
date	2013.07.09.15.37.43;	author beck;	state Exp;
branches;
next	1.7;

1.7
date	2013.06.11.19.01.20;	author beck;	state Exp;
branches;
next	1.6;

1.6
date	2013.06.11.16.42.16;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.28.02.08.39;	author guenther;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.02.15.52.25;	author thib;	state Exp;
branches;
next	1.3;

1.3
date	2011.04.05.14.14.07;	author thib;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.08.10.50.27;	author thib;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.06.23.44.10;	author thib;	state Exp;
branches;
next	;


desc
@@


1.16
log
@VOP_REALLOCBLKS() and related code is unused since the removal of
cluster_write().
ok beck zhuk
@
text
@/*	$OpenBSD: vfs_vops.c,v 1.15 2016/03/19 12:04:15 natano Exp $	*/
/*
 * Copyright (c) 2010 Thordur I. Bjornsson <thib@@openbsd.org> 
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/vnode.h>
#include <sys/unistd.h>
#include <sys/systm.h>

#ifdef VFSLCKDEBUG
#include <sys/systm.h>		/* for panic() */

#define ASSERT_VP_ISLOCKED(vp) do {				\
	if (((vp)->v_flag & VLOCKSWORK) && !VOP_ISLOCKED(vp)) {	\
		VOP_PRINT(vp);					\
		panic("vp not locked");				\
	}							\
} while (0)
#else
#define ASSERT_VP_ISLOCKED(vp)  /* nothing */
#endif

int
VOP_ISLOCKED(struct vnode *vp)
{
	struct vop_islocked_args a;
	a.a_vp = vp;

	if (vp->v_op->vop_islocked == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_islocked)(&a));
}

int
VOP_LOOKUP(struct vnode *dvp, struct vnode **vpp, 
    struct componentname *cnp)
{
	struct vop_lookup_args a;
	a.a_dvp = dvp;
	a.a_vpp = vpp;
	a.a_cnp = cnp;

	if (dvp->v_op->vop_lookup == NULL)
		return (EOPNOTSUPP);

	return ((dvp->v_op->vop_lookup)(&a));
}

int
VOP_CREATE(struct vnode *dvp, struct vnode **vpp, 
    struct componentname *cnp, struct vattr *vap)
{
	struct vop_create_args a;
	a.a_dvp = dvp;
	a.a_vpp = vpp;
	a.a_cnp = cnp;
	a.a_vap = vap;

	ASSERT_VP_ISLOCKED(dvp);

	if (dvp->v_op->vop_create == NULL)
		return (EOPNOTSUPP);

	return ((dvp->v_op->vop_create)(&a));
}

int
VOP_MKNOD(struct vnode *dvp, struct vnode **vpp, 
    struct componentname *cnp, struct vattr *vap)
{
	struct vop_mknod_args a;
	a.a_dvp = dvp;
	a.a_vpp = vpp;
	a.a_cnp = cnp;
	a.a_vap = vap;

	ASSERT_VP_ISLOCKED(dvp);

	if (dvp->v_op->vop_mknod == NULL)
		return (EOPNOTSUPP);

	return ((dvp->v_op->vop_mknod)(&a));
}

int
VOP_OPEN(struct vnode *vp, int mode, struct ucred *cred, struct proc *p)
{
	struct vop_open_args a;
	a.a_vp = vp;
	a.a_mode = mode;
	a.a_cred = cred;
	a.a_p = p;

	if (vp->v_op->vop_open == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_open)(&a));
}

int
VOP_CLOSE(struct vnode *vp, int fflag, struct ucred *cred, struct proc *p)
{
	struct vop_close_args a;
	a.a_vp = vp;
	a.a_fflag = fflag;
	a.a_cred = cred;
	a.a_p = p;

	ASSERT_VP_ISLOCKED(vp);

	if (vp->v_op->vop_close == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_close)(&a));
}

int
VOP_ACCESS(struct vnode *vp, int mode, struct ucred *cred, struct proc *p)
{
	struct vop_access_args a;
	a.a_vp = vp;
	a.a_mode = mode;
	a.a_cred = cred;
	a.a_p = p;

	ASSERT_VP_ISLOCKED(vp);

	if (vp->v_op->vop_access == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_access)(&a));
}

int
VOP_GETATTR(struct vnode *vp, struct vattr *vap, struct ucred *cred, 
    struct proc *p)
{
	struct vop_getattr_args a;
	a.a_vp = vp;
	a.a_vap = vap;
	a.a_cred = cred;
	a.a_p = p;

	if (vp->v_op->vop_getattr == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_getattr)(&a));
}

int
VOP_SETATTR(struct vnode *vp, struct vattr *vap, struct ucred *cred, 
    struct proc *p)
{
	struct vop_setattr_args a;
	a.a_vp = vp;
	a.a_vap = vap;
	a.a_cred = cred;
	a.a_p = p;

	ASSERT_VP_ISLOCKED(vp);

	if (vp->v_op->vop_setattr == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_setattr)(&a));
}

int
VOP_READ(struct vnode *vp, struct uio *uio, int ioflag, struct ucred *cred)
{
	struct vop_read_args a;
	a.a_vp = vp;
	a.a_uio = uio;
	a.a_ioflag = ioflag;
	a.a_cred = cred;

	ASSERT_VP_ISLOCKED(vp);

	if (vp->v_op->vop_read == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_read)(&a));
}

int
VOP_WRITE(struct vnode *vp, struct uio *uio, int ioflag, 
    struct ucred *cred)
{
	struct vop_write_args a;
	a.a_vp = vp;
	a.a_uio = uio;
	a.a_ioflag = ioflag;
	a.a_cred = cred;

	ASSERT_VP_ISLOCKED(vp);

	if (vp->v_op->vop_write == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_write)(&a));
}

int
VOP_IOCTL(struct vnode *vp, u_long command, void *data, int fflag, 
    struct ucred *cred, struct proc *p)
{
	struct vop_ioctl_args a;
	a.a_vp = vp;
	a.a_command = command;
	a.a_data = data;
	a.a_fflag = fflag;
	a.a_cred = cred;
	a.a_p = p;

	if (vp->v_op->vop_ioctl == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_ioctl)(&a));

}

int
VOP_POLL(struct vnode *vp, int fflag, int events, struct proc *p)
{
	struct vop_poll_args a;
	a.a_vp = vp;
	a.a_fflag = fflag;
	a.a_events = events;
	a.a_p = p;

	if (vp->v_op->vop_poll == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_poll)(&a));
}

int
VOP_KQFILTER(struct vnode *vp, struct knote *kn)
{
	struct vop_kqfilter_args a;
	a.a_vp = vp;
	a.a_kn = kn;

	if (vp->v_op->vop_kqfilter == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_kqfilter)(&a));
}

int
VOP_REVOKE(struct vnode *vp, int flags)
{
	struct vop_revoke_args a;
	a.a_vp = vp;
	a.a_flags = flags;

	if (vp->v_op->vop_revoke == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_revoke)(&a));
}

int
VOP_FSYNC(struct vnode *vp, struct ucred *cred, int waitfor, 
    struct proc *p)
{
	struct vop_fsync_args a;
	a.a_vp = vp;
	a.a_cred = cred;
	a.a_waitfor = waitfor;
	a.a_p = p;

	ASSERT_VP_ISLOCKED(vp);

	if (vp->v_op->vop_fsync == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_fsync)(&a));
}

int
VOP_REMOVE(struct vnode *dvp, struct vnode *vp, struct componentname *cnp)
{
	struct vop_remove_args a;
	a.a_dvp = dvp;
        a.a_vp = vp;
	a.a_cnp = cnp;

	ASSERT_VP_ISLOCKED(dvp);
	ASSERT_VP_ISLOCKED(vp);

	if (dvp->v_op->vop_remove == NULL)
		return (EOPNOTSUPP);

	return ((dvp->v_op->vop_remove)(&a));
}

int
VOP_LINK(struct vnode *dvp, struct vnode *vp, struct componentname *cnp)
{
	struct vop_link_args a;
	a.a_dvp = dvp;
	a.a_vp = vp;
	a.a_cnp = cnp;

	ASSERT_VP_ISLOCKED(dvp);

	if (dvp->v_op->vop_link == NULL)
		return (EOPNOTSUPP);

	return ((dvp->v_op->vop_link)(&a));
}

int
VOP_RENAME(struct vnode *fdvp, struct vnode *fvp, 
    struct componentname *fcnp, struct vnode *tdvp, struct vnode *tvp, 
    struct componentname *tcnp)
{
	struct vop_rename_args a;
	a.a_fdvp = fdvp;
	a.a_fvp = fvp;
	a.a_fcnp = fcnp;
	a.a_tdvp = tdvp;
	a.a_tvp = tvp;
	a.a_tcnp = tcnp;

	ASSERT_VP_ISLOCKED(tdvp);

	if (fdvp->v_op->vop_rename == NULL) 
		return (EOPNOTSUPP);

	return ((fdvp->v_op->vop_rename)(&a));
}

int
VOP_MKDIR(struct vnode *dvp, struct vnode **vpp, 
    struct componentname *cnp, struct vattr *vap)
{
	struct vop_mkdir_args a;
	a.a_dvp = dvp;
	a.a_vpp = vpp;
	a.a_cnp = cnp;
	a.a_vap = vap;

	ASSERT_VP_ISLOCKED(dvp);

	if (dvp->v_op->vop_mkdir == NULL)
		return (EOPNOTSUPP);

	return ((dvp->v_op->vop_mkdir)(&a));
}

int
VOP_RMDIR(struct vnode *dvp, struct vnode *vp, struct componentname *cnp)
{
	struct vop_rmdir_args a;
	a.a_dvp = dvp;
	a.a_vp = vp;
	a.a_cnp = cnp;

	ASSERT_VP_ISLOCKED(dvp);
	ASSERT_VP_ISLOCKED(vp);

	if (dvp->v_op->vop_rmdir == NULL)
		return (EOPNOTSUPP);

	return ((dvp->v_op->vop_rmdir)(&a));
}

int
VOP_SYMLINK(struct vnode *dvp, struct vnode **vpp, 
    struct componentname *cnp, struct vattr *vap, char *target)
{
	struct vop_symlink_args a;
	a.a_dvp = dvp;
	a.a_vpp = vpp;
	a.a_cnp = cnp;
	a.a_vap = vap;
	a.a_target = target;

	ASSERT_VP_ISLOCKED(dvp);

	if (dvp->v_op->vop_symlink == NULL)
		return (EOPNOTSUPP);

	return ((dvp->v_op->vop_symlink)(&a));
}

int
VOP_READDIR(struct vnode *vp, struct uio *uio, struct ucred *cred, 
    int *eofflag)
{
	struct vop_readdir_args a;
	a.a_vp = vp;
	a.a_uio = uio;
	a.a_cred = cred;
	a.a_eofflag = eofflag;

	ASSERT_VP_ISLOCKED(vp);

	if (vp->v_op->vop_readdir == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_readdir)(&a));
}

int
VOP_READLINK(struct vnode *vp, struct uio *uio, struct ucred *cred)
{
	struct vop_readlink_args a;
	a.a_vp = vp;
	a.a_uio = uio;
	a.a_cred = cred;

	ASSERT_VP_ISLOCKED(vp);

	if (vp->v_op->vop_readlink == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_readlink)(&a));
}

int
VOP_ABORTOP(struct vnode *dvp, struct componentname *cnp)
{
	struct vop_abortop_args a;
	a.a_dvp = dvp;
	a.a_cnp = cnp;

	if (dvp->v_op->vop_abortop == NULL)
		return (EOPNOTSUPP);

	return ((dvp->v_op->vop_abortop)(&a));
}

int
VOP_INACTIVE(struct vnode *vp, struct proc *p)
{
	struct vop_inactive_args a;
	a.a_vp = vp;
	a.a_p = p;

	ASSERT_VP_ISLOCKED(vp);

	if (vp->v_op->vop_inactive == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_inactive)(&a));
}

int
VOP_RECLAIM(struct vnode *vp, struct proc *p)
{
	struct vop_reclaim_args a;
	a.a_vp = vp;
	a.a_p = p;

	if (vp->v_op->vop_reclaim == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_reclaim)(&a));
}

int
VOP_LOCK(struct vnode *vp, int flags, struct proc *p)
{
	struct vop_lock_args a;
	a.a_vp = vp;
	a.a_flags = flags;
	a.a_p = p;

	if (vp->v_op->vop_lock == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_lock)(&a));
}

int
VOP_UNLOCK(struct vnode *vp, struct proc *p)
{
	struct vop_unlock_args a;
	a.a_vp = vp;
	a.a_p = p;

	if (vp->v_op->vop_unlock == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_unlock)(&a));
}

int
VOP_BMAP(struct vnode *vp, daddr_t bn, struct vnode **vpp, 
    daddr_t *bnp, int *runp)
{
	struct vop_bmap_args a;
	a.a_vp = vp;
	a.a_bn = bn;
	a.a_vpp = vpp;
	a.a_bnp = bnp;
	a.a_runp = runp;

	ASSERT_VP_ISLOCKED(vp);

	if (vp->v_op->vop_bmap == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_bmap)(&a));
}

int
VOP_PRINT(struct vnode *vp)
{
	struct vop_print_args a;
	a.a_vp = vp;

	if (vp->v_op->vop_print == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_print)(&a));
}

int
VOP_PATHCONF(struct vnode *vp, int name, register_t *retval)
{
	struct vop_pathconf_args a;

	/*
	 * Handle names that are constant across filesystem
	 */
	switch (name) {
	case _PC_PATH_MAX:
		*retval = PATH_MAX;
		return (0);
	case _PC_PIPE_BUF:
		*retval = PIPE_BUF;
		return (0);
	case _PC_ASYNC_IO:
	case _PC_PRIO_IO:
	case _PC_SYNC_IO:
		*retval = 0;
		return (0);

	}

	a.a_vp = vp;
	a.a_name = name;
	a.a_retval = retval;

	ASSERT_VP_ISLOCKED(vp);

	if (vp->v_op->vop_pathconf == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_pathconf)(&a));
}

int
VOP_ADVLOCK(struct vnode *vp, void *id, int op, struct flock *fl, int flags)
{
	struct vop_advlock_args a;
	a.a_vp = vp;
	a.a_id = id;
	a.a_op = op;
	a.a_fl = fl;
	a.a_flags = flags;

	if (vp->v_op->vop_advlock == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_advlock)(&a));
}

int
VOP_STRATEGY(struct buf *bp)
{
	struct vop_strategy_args a;
	a.a_bp = bp;

	if ((ISSET(bp->b_flags, B_BC)) && (!ISSET(bp->b_flags, B_DMA)))
		panic("Non dma reachable buffer passed to VOP_STRATEGY");

	if (bp->b_vp->v_op->vop_strategy == NULL)
		return (EOPNOTSUPP);

	return ((bp->b_vp->v_op->vop_strategy)(&a));
}

int
VOP_BWRITE(struct buf *bp)
{
	struct vop_bwrite_args a;
	a.a_bp = bp;

	if (bp->b_vp->v_op->vop_bwrite == NULL)
		return (EOPNOTSUPP);

	return ((bp->b_vp->v_op->vop_bwrite)(&a));
}
@


1.15
log
@Remove the unused flags argument from VOP_UNLOCK().

torture tested on amd64, i386 and macppc
ok beck mpi stefan
"the change looks right" deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: vfs_vops.c,v 1.14 2015/07/19 16:21:11 beck Exp $	*/
a611 15
}

int
VOP_REALLOCBLKS(struct vnode *vp, struct cluster_save *buflist)
{
	struct vop_reallocblks_args a;
	a.a_vp = vp;
	a.a_buflist = buflist;

	ASSERT_VP_ISLOCKED(vp);

	if (vp->v_op->vop_reallocblks == NULL)
		return (EOPNOTSUPP);

	return ((vp->v_op->vop_reallocblks)(&a));
@


1.14
log
@Use two 2q caches for the buffer cache, moving previously warm buffers from the
first queue to the second.
Mark the first queue as DMA in preparation for being able to use more memory
by flipping. Flipper code currently only sets and clears the flag.
ok tedu@@ guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vfs_vops.c,v 1.13 2015/05/01 01:30:58 millert Exp $	*/
d520 1
a520 1
VOP_UNLOCK(struct vnode *vp, int flags, struct proc *p)
a523 1
	a.a_flags = flags;
@


1.13
log
@Pass fflag to VOP_POLL so vfs fifo functions can get at the file
flags to check FREAD/FWRITE if needed.  This will be used by fifo_poll
to avoid checking the write end of the fifo when the fd is read-only.
OK guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vfs_vops.c,v 1.12 2015/03/14 03:38:51 jsg Exp $	*/
d48 1
d635 3
@


1.12
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vfs_vops.c,v 1.11 2015/01/19 20:16:27 guenther Exp $	*/
d263 1
a263 1
VOP_POLL(struct vnode *vp, int events, struct proc *p)
d267 1
@


1.11
log
@Oops, missed the new #include when manually applying the diff from
Helg (xx404 (at) msn.com)
@
text
@d1 1
a1 1
/*	$OpenBSD: vfs_vops.c,v 1.10 2015/01/19 20:13:03 guenther Exp $	*/
a45 1
#include <sys/mount.h>
@


1.10
log
@Fix bracing in ASSERT_VP_ISLOCKED(vp) macro to not always panic()

From Helg (xx404 (at) msn.com)
@
text
@d1 1
a1 1
/*	$OpenBSD: vfs_vops.c,v 1.9 2013/08/13 05:52:24 guenther Exp $	*/
d51 2
@


1.9
log
@Switch time_t, ino_t, clock_t, and struct kevent's ident and data
members to 64bit types.  Assign new syscall numbers for (almost
all) the syscalls that involve the affected types, including anything
with time_t, timeval, itimerval, timespec, rusage, dirent, stat,
or kevent arguments.  Add a d_off member to struct dirent and replace
getdirentries() with getdents(), thus immensely simplifying and
accelerating telldir/seekdir.  Build perl with -DBIG_TIME.

Bump the major on every single base library: the compat bits included
here are only good enough to make the transition; the T32 compat
option will be burned as soon as we've reached the new world are
are happy with the snapshots for all architectures.

DANGER: ABI incompatibility.  Updating to this kernel requires extra
work or you won't be able to login: install a snapshot instead.

Much assistance in fixing userland issues from deraadt@@ and tedu@@
and build assistance from todd@@ and otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vfs_vops.c,v 1.8 2013/07/09 15:37:43 beck Exp $	*/
d51 5
a55 4
#define ASSERT_VP_ISLOCKED(vp) do {                             \
        if (((vp)->v_flag & VLOCKSWORK) && !VOP_ISLOCKED(vp))   \
                VOP_PRINT(vp);                                  \
                panic("vp not locked");                         \
@


1.8
log
@back out the cache flipper temporarily to work out of tree.
will come back soon.
ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vfs_vops.c,v 1.6 2013/06/11 16:42:16 deraadt Exp $	*/
d428 1
a428 1
    int *eofflag, int *ncookies, u_long **cookies)
a434 2
	a.a_ncookies = ncookies;
	a.a_cookies = cookies;
@


1.7
log
@High memory page flipping for the buffer cache.

This change splits the buffer cache free lists into lists of dma reachable
buffers and high memory buffers based on the ranges returned by pmemrange.
Buffers move from dma to high memory as they age, but are flipped to dma
reachable memory if IO is needed to/from and high mem buffer. The total
amount of buffers  allocated is now bufcachepercent of both the dma and
the high memory region.

This change allows the use of large buffer caches on amd64 using more than
4 GB of memory

ok tedu@@ krw@@ - testing by many.
@
text
@a635 5
	/*
	 * Flip buffer to dma reachable memory if necessary.
	 */
	if (ISSET(bp->b_flags, B_BC))
		buf_dma(bp);
@


1.6
log
@final removal of daddr64_t.  daddr_t has been 64 bit for a long enough
test period; i think 3 years ago the last bugs fell out.
ok otto beck others
@
text
@d1 1
a1 1
/*	$OpenBSD: vfs_vops.c,v 1.5 2013/03/28 02:08:39 guenther Exp $	*/
d636 5
@


1.5
log
@Handle the pathconf _PC_PATH_MAX, _PC_PIPE_BUF, _PC_ASYNC_IO,
_PC_PRIO_IO, and _PC_SYNC_IO names in VOP_PATHCONF(), as they're
fs-independent for us.  Since we don't support latter three on any
fs, we can also define the related _POSIX_{ASYNC,PRIO,SYNC}_IO
symbols in <unistd.h> (via sys/unistd.h) with value -1.

Also, zap pointless tty-only values from procfs(!).

ok beck@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vfs_vops.c,v 1.4 2011/07/02 15:52:25 thib Exp $	*/
d532 2
a533 2
VOP_BMAP(struct vnode *vp, daddr64_t bn, struct vnode **vpp, 
    daddr64_t *bnp, int *runp)
@


1.4
log
@rename VFSDEBUG to VFLCKDEBUG;

prompted by tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: vfs_vops.c,v 1.3 2011/04/05 14:14:07 thib Exp $	*/
d48 1
d566 19
@


1.3
log
@Every single vop_default is set to eopnotsupp, so retire it
and return EOPNOTSUPP directly from the VOP_* functions.

Filesystems should, at some point fill in every function
in the vop_default struct so we can get rid of the 'if'
statements in VOP_*.
@
text
@d1 1
a1 1
/*	$OpenBSD: vfs_vops.c,v 1.2 2010/09/08 10:50:27 thib Exp $	*/
d49 1
a49 1
#ifdef VFSDEBUG
@


1.2
log
@Add $OpenBSD$ prompted by mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d66 1
a66 1
		return ((vp->v_op->vop_default)(&a));
d81 1
a81 1
		return ((dvp->v_op->vop_default)(&a));
d99 2
a100 1
		return ((dvp->v_op->vop_default)(&a));
d117 2
a118 1
		return ((dvp->v_op->vop_default)(&a));
d132 2
a133 1
		return ((vp->v_op->vop_default)(&a));
d149 2
a150 1
		return ((vp->v_op->vop_default)(&a));
d166 2
a167 1
		return ((vp->v_op->vop_default)(&a));
d182 2
a183 1
		return ((vp->v_op->vop_default)(&a));
d200 2
a201 1
		return ((vp->v_op->vop_default)(&a));
d217 2
a218 1
		return ((vp->v_op->vop_default)(&a));
d235 2
a236 1
		return ((vp->v_op->vop_default)(&a));
d253 2
a254 1
		return ((vp->v_op->vop_default)(&a));
d256 1
d268 2
a269 1
		return ((vp->v_op->vop_default)(&a));
d281 2
a282 1
		return ((vp->v_op->vop_default)(&a));
d294 2
a295 1
		return ((vp->v_op->vop_default)(&a));
d312 2
a313 1
		return ((vp->v_op->vop_default)(&a));
d329 2
a330 1
		return ((dvp->v_op->vop_default)(&a));
d345 2
a346 1
		return ((dvp->v_op->vop_default)(&a));
d366 2
a367 1
		return ((fdvp->v_op->vop_default)(&a));
d384 2
a385 1
		return ((dvp->v_op->vop_default)(&a));
d401 2
a402 1
		return ((dvp->v_op->vop_default)(&a));
d420 2
a421 1
		return ((dvp->v_op->vop_default)(&a));
d440 2
a441 1
		return ((vp->v_op->vop_default)(&a));
d456 2
a457 1
		return ((vp->v_op->vop_default)(&a));
d469 2
a470 1
		return ((dvp->v_op->vop_default)(&a));
d484 2
a485 1
		return ((vp->v_op->vop_default)(&a));
d497 2
a498 1
		return ((vp->v_op->vop_default)(&a));
d511 2
a512 1
		return ((vp->v_op->vop_default)(&a));
d525 2
a526 1
		return ((vp->v_op->vop_default)(&a));
d544 2
a545 1
		return ((vp->v_op->vop_default)(&a));
d556 2
a557 1
		return ((vp->v_op->vop_default)(&a));
d572 2
a573 1
		return ((vp->v_op->vop_default)(&a));
d588 2
a589 1
		return ((vp->v_op->vop_default)(&a));
d603 2
a604 1
		return ((vp->v_op->vop_default)(&a));
d615 2
a616 1
		return ((bp->b_vp->v_op->vop_default)(&a));
d627 2
a628 1
		return ((bp->b_vp->v_op->vop_default)(&a));
a630 1
/* End of special cases. */
@


1.1
log
@End the VOP experiment. Instead of the ridicolusly complicated operation
vector setup that has questionable features (that have, as far as I can
tell never been used in practice, atleast not in OpenBSD), remove all
the gunk and favor a simple struct full of function pointers that get
set directly by each of the filesystems.

Removes gobs of ugly code and makes things simpler by a magnitude.

The only downside of this is that we loose the vnoperate feature so
the spec/fifo operations of the filesystems need to be kept in sync
with specfs and fifofs, this is no big deal as the API it self is pretty
static.

Many thanks to armani@@ who pulled an earlier version of this diff to
current after c2k10 and Gabriel Kihlman on tech@@ for testing.

Liked by many. "come on, find your balls" deraadt@@.
@
text
@d1 1
@

