head	1.5;
access;
symbols
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.1.0.30
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.28
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.26
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.24
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.22
	OPENBSD_2_8:1.1.0.20
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.16
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2006.07.25.19.20.45;	author kettenis;	state dead;
branches;
next	1.4;

1.4
date	2003.07.30.21.30.31;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.30.20.24.03;	author jason;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.09.22.27.11;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	96.08.27.10.32.52;	author downsj;	state Exp;
branches
	1.1.16.1
	1.1.26.1;
next	;

1.1.16.1
date	2003.03.28.00.00.19;	author niklas;	state Exp;
branches;
next	1.1.16.2;

1.1.16.2
date	2004.02.19.10.56.36;	author niklas;	state Exp;
branches;
next	;

1.1.26.1
date	2003.05.19.21.52.32;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove.

ok deraadt@@ & many others.
@
text
@/*	$OpenBSD: load_store.c,v 1.4 2003/07/30 21:30:31 jason Exp $	*/
/*
 *  load_store.c
 *
 * This file contains most of the code to interpret the FPU instructions
 * which load and store from user memory.
 *
 *
 * Copyright (C) 1992,1993,1994
 *                       W. Metzenthen, 22 Parker St, Ormond, Vic 3163,
 *                       Australia.  E-mail   billm@@vaxc.cc.monash.edu.au
 * All rights reserved.
 *
 * This copyright notice covers the redistribution and use of the
 * FPU emulator developed by W. Metzenthen. It covers only its use
 * in the 386BSD, FreeBSD and NetBSD operating systems. Any other
 * use is not permitted under this copyright.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must include information specifying
 *    that source code for the emulator is freely available and include
 *    either:
 *      a) an offer to provide the source code for a nominal distribution
 *         fee, or
 *      b) list at least two alternative methods whereby the source
 *         can be obtained, e.g. a publically accessible bulletin board
 *         and an anonymous ftp site from which the software can be
 *         downloaded.
 * 3. All advertising materials specifically mentioning features or use of
 *    this emulator must acknowledge that it was developed by W. Metzenthen.
 * 4. The name of W. Metzenthen may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * W. METZENTHEN BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 * The purpose of this copyright, based upon the Berkeley copyright, is to
 * ensure that the covered software remains freely available to everyone.
 *
 * The software (with necessary differences) is also available, but under
 * the terms of the GNU copyleft, for the Linux operating system and for
 * the djgpp ms-dos extender.
 *
 * W. Metzenthen   June 1994.
 *
 *
 *    $FreeBSD: load_store.c,v 1.5 1996/06/25 20:29:21 bde Exp $
 *
 */

/*---------------------------------------------------------------------------+
 | Note:                                                                     |
 |    The file contains code which accesses user memory.                     |
 |    Emulator static data may change when user memory is accessed, due to   |
 |    other processes using the emulator while swapping is in progress.      |
 +---------------------------------------------------------------------------*/

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/systm.h>
#include <sys/user.h>
#include <machine/cpu.h>
#include <machine/pcb.h>

#include <gnu/arch/i386/fpemul/fpu_emu.h>
#include <gnu/arch/i386/fpemul/fpu_system.h>
#include <gnu/arch/i386/fpemul/exception.h>
#include <gnu/arch/i386/fpemul/status_w.h>


#define _NONE_ 0		/* FPU_st0_ptr etc not needed */
#define _REG0_ 1		/* Will be storing st(0) */
#define _PUSH_ 3		/* Need to check for space to push onto stack */
#define _null_ 4		/* Function illegal or not implemented */

#define pop_0()	{ pop_ptr->tag = TW_Empty; top++; }


static unsigned char type_table[32] = {
	_PUSH_, _PUSH_, _PUSH_, _PUSH_,
	_null_, _null_, _null_, _null_,
	_REG0_, _REG0_, _REG0_, _REG0_,
	_REG0_, _REG0_, _REG0_, _REG0_,
	_NONE_, _null_, _NONE_, _PUSH_,
	_NONE_, _PUSH_, _null_, _PUSH_,
	_NONE_, _null_, _NONE_, _REG0_,
	_NONE_, _REG0_, _NONE_, _REG0_
};

void
load_store_instr(char type)
{
	FPU_REG *pop_ptr;	/* We need a version of FPU_st0_ptr which
				 * won't change. */

	pop_ptr = NULL;		/* Initialized just to stop compiler warnings. */


	switch (type_table[(int) (unsigned) type]) {
	case _NONE_:
		break;
	case _REG0_:
		pop_ptr = &st(0);	/* Some of these instructions pop
					 * after storing */

		FPU_st0_ptr = pop_ptr;	/* Set the global variables. */
		FPU_st0_tag = FPU_st0_ptr->tag;
		break;
	case _PUSH_:
		{
			pop_ptr = &st(-1);
			if (pop_ptr->tag != TW_Empty) {
				stack_overflow();
				return;
			}
			top--;
		}
		break;
	case _null_:
		return Un_impl();
#ifdef PARANOID
	default:
		return EXCEPTION(EX_INTERNAL);
#endif				/* PARANOID */
	}

	switch (type) {
	case 000:		/* fld m32real */
		reg_load_single();
		setcc(0);	/* Clear the SW_C1 bit, "other bits undefined" */
		reg_move(&FPU_loaded_data, pop_ptr);
		break;
	case 001:		/* fild m32int */
		reg_load_int32();
		setcc(0);	/* Clear the SW_C1 bit, "other bits undefined" */
		reg_move(&FPU_loaded_data, pop_ptr);
		break;
	case 002:		/* fld m64real */
		reg_load_double();
		setcc(0);	/* Clear the SW_C1 bit, "other bits undefined" */
		reg_move(&FPU_loaded_data, pop_ptr);
		break;
	case 003:		/* fild m16int */
		reg_load_int16();
		setcc(0);	/* Clear the SW_C1 bit, "other bits undefined" */
		reg_move(&FPU_loaded_data, pop_ptr);
		break;
	case 010:		/* fst m32real */
		reg_store_single();
		break;
	case 011:		/* fist m32int */
		reg_store_int32();
		break;
	case 012:		/* fst m64real */
		reg_store_double();
		break;
	case 013:		/* fist m16int */
		reg_store_int16();
		break;
	case 014:		/* fstp m32real */
		if (reg_store_single())
			pop_0();/* pop only if the number was actually stored
				 * (see the 80486 manual p16-28) */
		break;
	case 015:		/* fistp m32int */
		if (reg_store_int32())
			pop_0();/* pop only if the number was actually stored
				 * (see the 80486 manual p16-28) */
		break;
	case 016:		/* fstp m64real */
		if (reg_store_double())
			pop_0();/* pop only if the number was actually stored
				 * (see the 80486 manual p16-28) */
		break;
	case 017:		/* fistp m16int */
		if (reg_store_int16())
			pop_0();/* pop only if the number was actually stored
				 * (see the 80486 manual p16-28) */
		break;
	case 020:		/* fldenv  m14/28byte */
		fldenv();
		break;
	case 022:		/* frstor m94/108byte */
		frstor();
		break;
	case 023:		/* fbld m80dec */
		reg_load_bcd();
		setcc(0);	/* Clear the SW_C1 bit, "other bits undefined" */
		reg_move(&FPU_loaded_data, pop_ptr);
		break;
	case 024:		/* fldcw */
		REENTRANT_CHECK(OFF);
		copyin((u_long *)FPU_data_address, &control_word,
		    sizeof(u_long));
		REENTRANT_CHECK(ON);
#ifdef NO_UNDERFLOW_TRAP
		if (!(control_word & EX_Underflow)) {
			control_word |= EX_Underflow;
		}
#endif
		FPU_data_address = (void *) data_operand_offset;	/* We want no net effect */
		FPU_entry_eip = ip_offset;	/* We want no net effect */
		break;
	case 025:		/* fld m80real */
		reg_load_extended();
		setcc(0);	/* Clear the SW_C1 bit, "other bits undefined" */
		reg_move(&FPU_loaded_data, pop_ptr);
		break;
	case 027:		/* fild m64int */
		reg_load_int64();
		setcc(0);	/* Clear the SW_C1 bit, "other bits undefined" */
		reg_move(&FPU_loaded_data, pop_ptr);
		break;
	case 030:		/* fstenv  m14/28byte */
		fstenv();
		FPU_data_address = (void *) data_operand_offset;	/* We want no net effect */
		FPU_entry_eip = ip_offset;	/* We want no net effect */
		break;
	case 032:		/* fsave */
		fsave();
		FPU_data_address = (void *) data_operand_offset;	/* We want no net effect */
		FPU_entry_eip = ip_offset;	/* We want no net effect */
		break;
	case 033:		/* fbstp m80dec */
		if (reg_store_bcd())
			pop_0();/* pop only if the number was actually stored
				 * (see the 80486 manual p16-28) */
		break;
	case 034:		/* fstcw m16int */
		REENTRANT_CHECK(OFF);
/*		    verify_area(VERIFY_WRITE, FPU_data_address, 2);*/
		copyout(&control_word, (short *)FPU_data_address,
		    sizeof(int16_t));
		REENTRANT_CHECK(ON);
		FPU_data_address = (void *) data_operand_offset;	/* We want no net effect */
		FPU_entry_eip = ip_offset;	/* We want no net effect */
		break;
	case 035:		/* fstp m80real */
		if (reg_store_extended())
			pop_0();/* pop only if the number was actually stored
				 * (see the 80486 manual p16-28) */
		break;
	case 036:		/* fstsw m2byte */
		status_word &= ~SW_Top;
		status_word |= (top & 7) << SW_Top_Shift;
		REENTRANT_CHECK(OFF);
/*		    verify_area(VERIFY_WRITE, FPU_data_address, 2);*/
		copyout(&status_word, (short *)FPU_data_address,
		    sizeof(int16_t));
		REENTRANT_CHECK(ON);
		FPU_data_address = (void *) data_operand_offset;	/* We want no net effect */
		FPU_entry_eip = ip_offset;	/* We want no net effect */
		break;
	case 037:		/* fistp m64int */
		if (reg_store_int64())
			pop_0();/* pop only if the number was actually stored
				 * (see the 80486 manual p16-28) */
		break;
	}
}
@


1.4
log
@Change:
#define	I387	(*(union i387_union *)&(((struct pcb *)curproc->p_addr)->pcb_savefpu.gplemu))
To:
#define	I387	(curproc->p_addr->u_pcb.pcb_savefpu.gplemu)
(and add a few includes of sys/user.h to make it work).
@
text
@d1 1
a1 1
/*	$OpenBSD: load_store.c,v 1.3 2003/07/30 20:24:03 jason Exp $	*/
@


1.3
log
@de-ifdef... now this is starting to make sense (it's still ugly and broken, tho)
@
text
@d1 1
a1 1
/*	$OpenBSD: load_store.c,v 1.2 2003/01/09 22:27:11 miod Exp $	*/
d75 1
@


1.2
log
@Remove fetch(9) and store(9) functions from the kernel, and replace the few
remaining instances of them with appropriate copy(9) usage.

ok art@@, tested on all arches unless my memory is non-ECC
@
text
@d1 1
a1 1
/*	$OpenBSD: load_store.c,v 1.1 1996/08/27 10:32:52 downsj Exp $	*/
a75 3
#if defined(__FreeBSD__)
#include <machine/md_var.h>
#endif
@


1.1
log
@Everyone, say hello to a real floating point emulator!

The fpemul written for Linux by W. Metzenthen: ported to NetBSD and
then to FreeBSD, and now back to OpenBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d209 2
a210 1
		control_word = fusword((unsigned short *) FPU_data_address);
d248 2
a249 1
		susword( (short *) FPU_data_address,control_word);
d264 2
a265 1
		susword( (short *) FPU_data_address,status_word);
@


1.1.26.1
log
@sync
@
text
@d209 1
a209 2
		copyin((u_long *)FPU_data_address, &control_word,
		    sizeof(u_long));
d247 1
a247 2
		copyout(&control_word, (short *)FPU_data_address,
		    sizeof(int16_t));
d262 1
a262 2
		copyout(&status_word, (short *)FPU_data_address,
		    sizeof(int16_t));
@


1.1.16.1
log
@Sync the SMP branch with 3.3
@
text
@d209 1
a209 2
		copyin((u_long *)FPU_data_address, &control_word,
		    sizeof(u_long));
d247 1
a247 2
		copyout(&control_word, (short *)FPU_data_address,
		    sizeof(int16_t));
d262 1
a262 2
		copyout(&status_word, (short *)FPU_data_address,
		    sizeof(int16_t));
@


1.1.16.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a74 1
#include <sys/user.h>
d76 3
@


