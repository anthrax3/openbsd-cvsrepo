head	1.6;
access;
symbols
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.1.0.30
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.28
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.2
	UBC:1.1.0.26
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.24
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.22
	OPENBSD_2_8:1.1.0.20
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.16
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2006.07.25.19.20.45;	author kettenis;	state dead;
branches;
next	1.5;

1.5
date	2004.01.13.18.08.48;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.03.04.09.07;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.17.03.45.30;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.12.07.12.59;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	96.08.27.10.32.58;	author downsj;	state Exp;
branches
	1.1.16.1
	1.1.26.1;
next	;

1.1.16.1
date	2003.03.28.00.00.19;	author niklas;	state Exp;
branches;
next	1.1.16.2;

1.1.16.2
date	2003.05.13.19.21.27;	author ho;	state Exp;
branches;
next	1.1.16.3;

1.1.16.3
date	2004.02.19.10.56.36;	author niklas;	state Exp;
branches;
next	;

1.1.26.1
date	2002.10.29.00.30.52;	author art;	state Exp;
branches;
next	1.1.26.2;

1.1.26.2
date	2003.05.19.21.52.32;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove.

ok deraadt@@ & many others.
@
text
@	.file	"reg_div.S"
/*	$OpenBSD: reg_div.s,v 1.5 2004/01/13 18:08:48 espie Exp $	*/
/*
 *  reg_div.S
 *
 * Divide one FPU_REG by another and put the result in a destination FPU_REG.
 *
 * Call from C as:
 *   void reg_div(FPU_REG *a, FPU_REG *b, FPU_REG *dest,
 *
 *
 * Copyright (C) 1992,1993,1994
 *                       W. Metzenthen, 22 Parker St, Ormond, Vic 3163,
 *                       Australia.  E-mail   billm@@vaxc.cc.monash.edu.au
 * All rights reserved.
 *
 * This copyright notice covers the redistribution and use of the
 * FPU emulator developed by W. Metzenthen. It covers only its use
 * in the 386BSD, FreeBSD and NetBSD operating systems. Any other
 * use is not permitted under this copyright.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must include information specifying
 *    that source code for the emulator is freely available and include
 *    either:
 *      a) an offer to provide the source code for a nominal distribution
 *         fee, or
 *      b) list at least two alternative methods whereby the source
 *         can be obtained, e.g. a publically accessible bulletin board
 *         and an anonymous ftp site from which the software can be
 *         downloaded.
 * 3. All advertising materials specifically mentioning features or use of
 *    this emulator must acknowledge that it was developed by W. Metzenthen.
 * 4. The name of W. Metzenthen may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * W. METZENTHEN BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 * The purpose of this copyright, based upon the Berkeley copyright, is to
 * ensure that the covered software remains freely available to everyone.
 *
 * The software (with necessary differences) is also available, but under
 * the terms of the GNU copyleft, for the Linux operating system and for
 * the djgpp ms-dos extender.
 *
 * W. Metzenthen   June 1994.
 *
 * 
 *      $FreeBSD: reg_div.s,v 1.3 1994/06/10 07:44:50 rich Exp $
 *
 */

#include <machine/asm.h>

#include <gnu/arch/i386/fpemul/exception.h>
#include <gnu/arch/i386/fpemul/fpu_asm.h>
#include <gnu/arch/i386/fpemul/control_w.h>

.text
#ifdef __ELF__
	.align 4
#else
	.align 2
#endif

.globl	_C_LABEL(reg_div)
_C_LABEL(reg_div):
	pushl	%ebp
	movl	%esp,%ebp

	pushl	%esi
	pushl	%edi
	pushl	%ebx

	movl	PARAM1,%esi
	movl	PARAM2,%ebx
	movl	PARAM3,%edi

	movb	TAG(%esi),%al
	orb	TAG(%ebx),%al

	jne	L_div_special		/* Not (both numbers TW_Valid) */

#ifdef DENORM_OPERAND
/* Check for denormals */
	cmpl	EXP_UNDER,EXP(%esi)
	jg	xL_arg1_not_denormal

	call	_C_LABEL(denormal_operand)
	orl	%eax,%eax
	jnz	FPU_Arith_exit

xL_arg1_not_denormal:
	cmpl	EXP_UNDER,EXP(%ebx)
	jg	xL_arg2_not_denormal

	call	_C_LABEL(denormal_operand)
	orl	%eax,%eax
	jnz	FPU_Arith_exit

xL_arg2_not_denormal:
#endif /* DENORM_OPERAND */

/* Both arguments are TW_Valid */
	movb	TW_Valid,TAG(%edi)

	movb	SIGN(%esi),%cl
	cmpb	%cl,SIGN(%ebx)
	setne	(%edi)	   /* Set the sign, requires SIGN_NEG=1, SIGN_POS=0 */

	movl	EXP(%esi),%edx
	movl	EXP(%ebx),%eax
	subl	%eax,%edx
	addl	EXP_BIAS,%edx
	movl	%edx,EXP(%edi)

	jmp	_C_LABEL(divide_kernel)


/*-----------------------------------------------------------------------*/
L_div_special:
	cmpb	TW_NaN,TAG(%esi)	/* A NaN with anything to give NaN */
	je	L_arg1_NaN

	cmpb	TW_NaN,TAG(%ebx)	/* A NaN with anything to give NaN */
	jne	L_no_NaN_arg

/*  Operations on NaNs */
L_arg1_NaN:
L_arg2_NaN:
	pushl	%edi			/* Destination */
	pushl	%ebx
	pushl	%esi
	call	_C_LABEL(real_2op_NaN)
	jmp	LDiv_exit

/* Invalid operations */
L_zero_zero:
L_inf_inf:
	pushl	%edi			/* Destination */
	call	_C_LABEL(arith_invalid)		/* 0/0 or Infinity/Infinity */
	jmp	LDiv_exit

L_no_NaN_arg:
	cmpb	TW_Infinity,TAG(%esi)
	jne	L_arg1_not_inf

	cmpb	TW_Infinity,TAG(%ebx)
	je	L_inf_inf		/* invalid operation */

	cmpb	TW_Valid,TAG(%ebx)
	je	L_inf_valid

#ifdef PARANOID
	/* arg2 must be zero or valid */
	cmpb	TW_Zero,TAG(%ebx)
	ja	L_unknown_tags
#endif /* PARANOID */

	/* Note that p16-9 says that infinity/0 returns infinity */
	jmp	L_copy_arg1		/* Answer is Inf */

L_inf_valid:
#ifdef DENORM_OPERAND
	cmpl	EXP_UNDER,EXP(%ebx)
	jg	L_copy_arg1		/* Answer is Inf */

	call	_C_LABEL(denormal_operand)
	orl	%eax,%eax
	jnz	FPU_Arith_exit
#endif /* DENORM_OPERAND */

	jmp	L_copy_arg1		/* Answer is Inf */

L_arg1_not_inf:
	cmpb	TW_Zero,TAG(%ebx)	/* Priority to div-by-zero error */
	jne	L_arg2_not_zero

	cmpb	TW_Zero,TAG(%esi)
	je	L_zero_zero		/* invalid operation */

#ifdef PARANOID
	/* arg1 must be valid */
	cmpb	TW_Valid,TAG(%esi)
	ja	L_unknown_tags
#endif /* PARANOID */

/* Division by zero error */
	pushl	%edi			/* destination */
	movb	SIGN(%esi),%al
	xorb	SIGN(%ebx),%al
	pushl	%eax			/* lower 8 bits have the sign */
	call	_C_LABEL(divide_by_zero)
	jmp	LDiv_exit

L_arg2_not_zero:
	cmpb	TW_Infinity,TAG(%ebx)
	jne	L_arg2_not_inf

#ifdef DENORM_OPERAND
	cmpb	TW_Valid,TAG(%esi)
	jne	L_return_zero

	cmpl	EXP_UNDER,EXP(%esi)
	jg	L_return_zero		/* Answer is zero */

	call	_C_LABEL(denormal_operand)
	orl	%eax,%eax
	jnz	FPU_Arith_exit
#endif /* DENORM_OPERAND */

	jmp	L_return_zero		/* Answer is zero */

L_arg2_not_inf:

#ifdef PARANOID
	cmpb	TW_Zero,TAG(%esi)
	jne	L_unknown_tags
#endif /* PARANOID */

	/* arg1 is zero, arg2 is not Infinity or a NaN */

#ifdef DENORM_OPERAND
	cmpl	EXP_UNDER,EXP(%ebx)
	jg	L_copy_arg1		/* Answer is zero */

	call	_C_LABEL(denormal_operand)
	orl	%eax,%eax
	jnz	FPU_Arith_exit
#endif /* DENORM_OPERAND */

L_copy_arg1:
	movb	TAG(%esi),%al
	movb	%al,TAG(%edi)
	movl	EXP(%esi),%eax
	movl	%eax,EXP(%edi)
	movl	SIGL(%esi),%eax
	movl	%eax,SIGL(%edi)
	movl	SIGH(%esi),%eax
	movl	%eax,SIGH(%edi)

	movb	SIGN(%esi),%cl
	cmpb	%cl,SIGN(%ebx)
	jne	LDiv_negative_result

	movb	SIGN_POS,SIGN(%edi)
	jmp	LDiv_exit

LDiv_set_result_sign:
	movb	SIGN(%esi),%cl
	cmpb	%cl,SIGN(%edi)
	jne	LDiv_negative_result

	movb	SIGN_POS,SIGN(%ebx)
	jmp	LDiv_exit

LDiv_negative_result:
	movb	SIGN_NEG,SIGN(%edi)

LDiv_exit:
	leal	-12(%ebp),%esp

	popl	%ebx
	popl	%edi
	popl	%esi
	leave
	ret


L_return_zero:
	movb	TW_Zero,TAG(%edi)
	jmp	LDiv_set_result_sign

#ifdef PARANOID
L_unknown_tags:
	push	EX_INTERNAL | 0x208
	call	EXCEPTION

	/* Generate a NaN for unknown tags */
	movl	_CONST_QNaN,%eax
	movl	%eax,(%edi)
	movl	_CONST_QNaN+4,%eax
	movl	%eax,SIGL(%edi)
	movl	_CONST_QNaN+8,%eax
	movl	%eax,SIGH(%edi)
	jmp	LDiv_exit
#endif /* PARANOID */
@


1.5
log
@silence preprocessor.
ok grange@@, deraadt@@
@
text
@d2 1
a2 1
/*	$OpenBSD: reg_div.s,v 1.4 2003/07/03 04:09:07 drahn Exp $	*/
@


1.4
log
@Fix a _C_LABEL() typo.
@
text
@d2 1
a2 1
/*	$OpenBSD: reg_div.s,v 1.3 2003/04/17 03:45:30 drahn Exp $	*/
d117 1
a117 1
#endif DENORM_OPERAND
d173 1
a173 1
#endif PARANOID
d186 1
a186 1
#endif DENORM_OPERAND
d201 1
a201 1
#endif PARANOID
d225 1
a225 1
#endif DENORM_OPERAND
d234 1
a234 1
#endif PARANOID
d245 1
a245 1
#endif DENORM_OPERAND
d302 1
a302 1
#endif PARANOID
@


1.3
log
@asm cleanup, binutils gas is more pickey about asm instruction word size.
@
text
@d2 1
a2 1
/*	$OpenBSD: reg_div.s,v 1.2 2002/10/12 07:12:59 pvalchev Exp $	*/
d156 1
a156 1
	call	_C_LABEL(arith)_invalid		/* 0/0 or Infinity/Infinity */
@


1.2
log
@Prepare for ELF (mostly _C_LABEL sprinkling); ok drahn art
@
text
@d2 1
a2 1
/*	$OpenBSD: reg_div.s,v 1.1 1996/08/27 10:32:58 downsj Exp $	*/
d248 2
a249 2
	movb	TAG(%esi),%ax
	movb	%ax,TAG(%edi)
@


1.1
log
@Everyone, say hello to a real floating point emulator!

The fpemul written for Linux by W. Metzenthen: ported to NetBSD and
then to FreeBSD, and now back to OpenBSD.
@
text
@d2 1
a2 1
/*	$OpenBSD$	*/
d75 3
d79 1
d81 2
a82 2
.globl	_reg_div
_reg_div:
d104 1
a104 1
	call	_denormal_operand
d112 1
a112 1
	call	_denormal_operand
d132 1
a132 1
	jmp	_divide_kernel
d149 1
a149 1
	call	_real_2op_NaN
d156 1
a156 1
	call	_arith_invalid		/* 0/0 or Infinity/Infinity */
d183 1
a183 1
	call	_denormal_operand
d208 1
a208 1
	call	_divide_by_zero
d222 1
a222 1
	call	_denormal_operand
d242 1
a242 1
	call	_denormal_operand
@


1.1.16.1
log
@Sync the SMP branch with 3.3
@
text
@a74 3
#ifdef __ELF__
	.align 4
#else
a75 1
#endif
d77 2
a78 2
.globl	_C_LABEL(reg_div)
_C_LABEL(reg_div):
d100 1
a100 1
	call	_C_LABEL(denormal_operand)
d108 1
a108 1
	call	_C_LABEL(denormal_operand)
d128 1
a128 1
	jmp	_C_LABEL(divide_kernel)
d145 1
a145 1
	call	_C_LABEL(real_2op_NaN)
d152 1
a152 1
	call	_C_LABEL(arith)_invalid		/* 0/0 or Infinity/Infinity */
d179 1
a179 1
	call	_C_LABEL(denormal_operand)
d204 1
a204 1
	call	_C_LABEL(divide_by_zero)
d218 1
a218 1
	call	_C_LABEL(denormal_operand)
d238 1
a238 1
	call	_C_LABEL(denormal_operand)
@


1.1.16.2
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d2 1
a2 1
/*	$OpenBSD: reg_div.s,v 1.1.16.1 2003/03/28 00:00:19 niklas Exp $	*/
d248 2
a249 2
	movb	TAG(%esi),%al
	movb	%al,TAG(%edi)
@


1.1.16.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d2 1
a2 1
/*	$OpenBSD$	*/
d117 1
a117 1
#endif /* DENORM_OPERAND */
d156 1
a156 1
	call	_C_LABEL(arith_invalid)		/* 0/0 or Infinity/Infinity */
d173 1
a173 1
#endif /* PARANOID */
d186 1
a186 1
#endif /* DENORM_OPERAND */
d201 1
a201 1
#endif /* PARANOID */
d225 1
a225 1
#endif /* DENORM_OPERAND */
d234 1
a234 1
#endif /* PARANOID */
d245 1
a245 1
#endif /* DENORM_OPERAND */
d302 1
a302 1
#endif /* PARANOID */
@


1.1.26.1
log
@sync to -current
@
text
@d2 1
a2 1
/*	$OpenBSD: reg_div.s,v 1.1 1996/08/27 10:32:58 downsj Exp $	*/
a74 3
#ifdef __ELF__
	.align 4
#else
a75 1
#endif
d77 2
a78 2
.globl	_C_LABEL(reg_div)
_C_LABEL(reg_div):
d100 1
a100 1
	call	_C_LABEL(denormal_operand)
d108 1
a108 1
	call	_C_LABEL(denormal_operand)
d128 1
a128 1
	jmp	_C_LABEL(divide_kernel)
d145 1
a145 1
	call	_C_LABEL(real_2op_NaN)
d152 1
a152 1
	call	_C_LABEL(arith)_invalid		/* 0/0 or Infinity/Infinity */
d179 1
a179 1
	call	_C_LABEL(denormal_operand)
d204 1
a204 1
	call	_C_LABEL(divide_by_zero)
d218 1
a218 1
	call	_C_LABEL(denormal_operand)
d238 1
a238 1
	call	_C_LABEL(denormal_operand)
@


1.1.26.2
log
@sync
@
text
@d2 1
a2 1
/*	$OpenBSD$	*/
d248 2
a249 2
	movb	TAG(%esi),%al
	movb	%al,TAG(%edi)
@


