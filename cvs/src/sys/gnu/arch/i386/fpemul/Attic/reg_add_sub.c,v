head	1.2;
access;
symbols
	OPENBSD_3_9:1.1.0.44
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.42
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.40
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.38
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.36
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.34
	OPENBSD_3_4_BASE:1.1
	UBC_SYNC_A:1.1
	OPENBSD_3_3:1.1.0.32
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.30
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.28
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.1
	UBC:1.1.0.26
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.24
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.22
	OPENBSD_2_8:1.1.0.20
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.16
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2006.07.25.19.20.45;	author kettenis;	state dead;
branches;
next	1.1;

1.1
date	96.08.27.10.32.56;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Remove.

ok deraadt@@ & many others.
@
text
@/*	$OpenBSD: reg_add_sub.c,v 1.1 1996/08/27 10:32:56 downsj Exp $	*/
/*
 *  reg_add_sub.c
 *
 * Functions to add or subtract two registers and put the result in a third.
 *
 * Copyright (C) 1992,1993,1994
 *                       W. Metzenthen, 22 Parker St, Ormond, Vic 3163,
 *                       Australia.  E-mail   billm@@vaxc.cc.monash.edu.au
 * All rights reserved.
 *
 * This copyright notice covers the redistribution and use of the
 * FPU emulator developed by W. Metzenthen. It covers only its use
 * in the 386BSD, FreeBSD and NetBSD operating systems. Any other
 * use is not permitted under this copyright.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must include information specifying
 *    that source code for the emulator is freely available and include
 *    either:
 *      a) an offer to provide the source code for a nominal distribution
 *         fee, or
 *      b) list at least two alternative methods whereby the source
 *         can be obtained, e.g. a publically accessible bulletin board
 *         and an anonymous ftp site from which the software can be
 *         downloaded.
 * 3. All advertising materials specifically mentioning features or use of
 *    this emulator must acknowledge that it was developed by W. Metzenthen.
 * 4. The name of W. Metzenthen may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * W. METZENTHEN BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 * The purpose of this copyright, based upon the Berkeley copyright, is to
 * ensure that the covered software remains freely available to everyone.
 *
 * The software (with necessary differences) is also available, but under
 * the terms of the GNU copyleft, for the Linux operating system and for
 * the djgpp ms-dos extender.
 *
 * W. Metzenthen   June 1994.
 *
 *
 *     $FreeBSD: reg_add_sub.c,v 1.3 1994/06/10 07:44:44 rich Exp $
 *
 */

/*---------------------------------------------------------------------------+
 | For each function, the destination may be any FPU_REG, including one of   |
 | the source FPU_REGs.                                                      |
 +---------------------------------------------------------------------------*/

#include <gnu/arch/i386/fpemul/exception.h>
#include <gnu/arch/i386/fpemul/reg_constant.h>
#include <gnu/arch/i386/fpemul/fpu_emu.h>
#include <gnu/arch/i386/fpemul/control_w.h>
#include <gnu/arch/i386/fpemul/fpu_system.h>


void
reg_add(FPU_REG * a, FPU_REG * b, FPU_REG * dest, int control_w)
{
	int     diff;

	if (!(a->tag | b->tag)) {
		/* Both registers are valid */
		if (!(a->sign ^ b->sign)) {
			/* signs are the same */
			reg_u_add(a, b, dest, control_w);
			dest->sign = a->sign;
			return;
		}
		/* The signs are different, so do a subtraction */
		diff = a->exp - b->exp;
		if (!diff) {
			diff = a->sigh - b->sigh;	/* Works only if ms bits
							 * are identical */
			if (!diff) {
				diff = a->sigl > b->sigl;
				if (!diff)
					diff = -(a->sigl < b->sigl);
			}
		}
		if (diff > 0) {
			reg_u_sub(a, b, dest, control_w);
			dest->sign = a->sign;
		} else
			if (diff == 0) {
				reg_move(&CONST_Z, dest);
				/* sign depends upon rounding mode */
				dest->sign = ((control_w & CW_RC) != RC_DOWN)
				    ? SIGN_POS : SIGN_NEG;
			} else {
				reg_u_sub(b, a, dest, control_w);
				dest->sign = b->sign;
			}
		return;
	} else {
		if ((a->tag == TW_NaN) || (b->tag == TW_NaN)) {
			real_2op_NaN(a, b, dest);
			return;
		} else
			if (a->tag == TW_Zero) {
				if (b->tag == TW_Zero) {
					char    different_signs = a->sign ^ b->sign;
					/* Both are zero, result will be zero. */
					reg_move(a, dest);
					if (different_signs) {
						/* Signs are different. */
						/* Sign of answer depends upon
						 * rounding mode. */
						dest->sign = ((control_w & CW_RC) != RC_DOWN)
						    ? SIGN_POS : SIGN_NEG;
					}
				} else {
#ifdef DENORM_OPERAND
					if ((b->tag == TW_Valid) && (b->exp <= EXP_UNDER) &&
					    denormal_operand())
						return;
#endif				/* DENORM_OPERAND */
					reg_move(b, dest);
				}
				return;
			} else
				if (b->tag == TW_Zero) {
#ifdef DENORM_OPERAND
					if ((a->tag == TW_Valid) && (a->exp <= EXP_UNDER) &&
					    denormal_operand())
						return;
#endif				/* DENORM_OPERAND */
					reg_move(a, dest);
					return;
				} else
					if (a->tag == TW_Infinity) {
						if (b->tag != TW_Infinity) {
#ifdef DENORM_OPERAND
							if ((b->tag == TW_Valid) && (b->exp <= EXP_UNDER) &&
							    denormal_operand())
								return;
#endif				/* DENORM_OPERAND */
							reg_move(a, dest);
							return;
						}
						if (a->sign == b->sign) {
							/* They are both + or
							 * - infinity */
							reg_move(a, dest);
							return;
						}
						arith_invalid(dest);	/* Infinity-Infinity is
									 * undefined. */
						return;
					} else
						if (b->tag == TW_Infinity) {
#ifdef DENORM_OPERAND
							if ((a->tag == TW_Valid) && (a->exp <= EXP_UNDER) &&
							    denormal_operand())
								return;
#endif				/* DENORM_OPERAND */
							reg_move(b, dest);
							return;
						}
	}
#ifdef PARANOID
	EXCEPTION(EX_INTERNAL | 0x101);
#endif
}


/* Subtract b from a.  (a-b) -> dest */
void
reg_sub(FPU_REG * a, FPU_REG * b, FPU_REG * dest, int control_w)
{
	int     diff;

	if (!(a->tag | b->tag)) {
		/* Both registers are valid */
		diff = a->exp - b->exp;
		if (!diff) {
			diff = a->sigh - b->sigh;	/* Works only if ms bits
							 * are identical */
			if (!diff) {
				diff = a->sigl > b->sigl;
				if (!diff)
					diff = -(a->sigl < b->sigl);
			}
		}
		switch (a->sign * 2 + b->sign) {
		case 0:	/* P - P */
		case 3:	/* N - N */
			if (diff > 0) {
				reg_u_sub(a, b, dest, control_w);
				dest->sign = a->sign;
			} else
				if (diff == 0) {
#ifdef DENORM_OPERAND
					if ((b->tag == TW_Valid) && (b->exp <= EXP_UNDER) &&
					    denormal_operand())
						return;
#endif				/* DENORM_OPERAND */
					reg_move(&CONST_Z, dest);
					/* sign depends upon rounding mode */
					dest->sign = ((control_w & CW_RC) != RC_DOWN)
					    ? SIGN_POS : SIGN_NEG;
				} else {
					reg_u_sub(b, a, dest, control_w);
					dest->sign = a->sign ^ SIGN_POS ^ SIGN_NEG;
				}
			return;
		case 1:	/* P - N */
			reg_u_add(a, b, dest, control_w);
			dest->sign = SIGN_POS;
			return;
		case 2:	/* N - P */
			reg_u_add(a, b, dest, control_w);
			dest->sign = SIGN_NEG;
			return;
		}
	} else {
		if ((a->tag == TW_NaN) || (b->tag == TW_NaN)) {
			real_2op_NaN(a, b, dest);
			return;
		} else
			if (b->tag == TW_Zero) {
				if (a->tag == TW_Zero) {
					char    same_signs = !(a->sign ^ b->sign);
					/* Both are zero, result will be zero. */
					reg_move(a, dest);	/* Answer for different
								 * signs. */
					if (same_signs) {
						/* Sign depends upon rounding
						 * mode */
						dest->sign = ((control_w & CW_RC) != RC_DOWN)
						    ? SIGN_POS : SIGN_NEG;
					}
				} else {
#ifdef DENORM_OPERAND
					if ((a->tag == TW_Valid) && (a->exp <= EXP_UNDER) &&
					    denormal_operand())
						return;
#endif				/* DENORM_OPERAND */
					reg_move(a, dest);
				}
				return;
			} else
				if (a->tag == TW_Zero) {
#ifdef DENORM_OPERAND
					if ((b->tag == TW_Valid) && (b->exp <= EXP_UNDER) &&
					    denormal_operand())
						return;
#endif				/* DENORM_OPERAND */
					reg_move(b, dest);
					dest->sign ^= SIGN_POS ^ SIGN_NEG;
					return;
				} else
					if (a->tag == TW_Infinity) {
						if (b->tag != TW_Infinity) {
#ifdef DENORM_OPERAND
							if ((b->tag == TW_Valid) && (b->exp <= EXP_UNDER) &&
							    denormal_operand())
								return;
#endif				/* DENORM_OPERAND */
							reg_move(a, dest);
							return;
						}
						/* Both args are Infinity */
						if (a->sign == b->sign) {
							arith_invalid(dest);	/* Infinity-Infinity is
										 * undefined. */
							return;
						}
						reg_move(a, dest);
						return;
					} else
						if (b->tag == TW_Infinity) {
#ifdef DENORM_OPERAND
							if ((a->tag == TW_Valid) && (a->exp <= EXP_UNDER) &&
							    denormal_operand())
								return;
#endif				/* DENORM_OPERAND */
							reg_move(b, dest);
							dest->sign ^= SIGN_POS ^ SIGN_NEG;
							return;
						}
	}
#ifdef PARANOID
	EXCEPTION(EX_INTERNAL | 0x110);
#endif
}
@


1.1
log
@Everyone, say hello to a real floating point emulator!

The fpemul written for Linux by W. Metzenthen: ported to NetBSD and
then to FreeBSD, and now back to OpenBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

