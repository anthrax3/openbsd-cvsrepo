head	1.4;
access;
symbols
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.1.0.30
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.28
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.2
	UBC:1.1.0.26
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.24
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.22
	OPENBSD_2_8:1.1.0.20
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.16
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2006.07.25.19.20.45;	author kettenis;	state dead;
branches;
next	1.3;

1.3
date	2004.01.13.18.08.48;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.12.07.12.59;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	96.08.27.10.33.02;	author downsj;	state Exp;
branches
	1.1.16.1
	1.1.26.1;
next	;

1.1.16.1
date	2003.03.28.00.00.19;	author niklas;	state Exp;
branches;
next	1.1.16.2;

1.1.16.2
date	2004.02.19.10.56.36;	author niklas;	state Exp;
branches;
next	;

1.1.26.1
date	2002.10.29.00.30.52;	author art;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove.

ok deraadt@@ & many others.
@
text
@	.file	"reg_u_mul.S"
/*	$OpenBSD: reg_u_mul.s,v 1.3 2004/01/13 18:08:48 espie Exp $	*/
/*
 *  reg_u_mul.S
 *
 * Core multiplication routine
 *
 *
 * Copyright (C) 1992,1993,1994
 *                       W. Metzenthen, 22 Parker St, Ormond, Vic 3163,
 *                       Australia.  E-mail   billm@@vaxc.cc.monash.edu.au
 * All rights reserved.
 *
 * This copyright notice covers the redistribution and use of the
 * FPU emulator developed by W. Metzenthen. It covers only its use
 * in the 386BSD, FreeBSD and NetBSD operating systems. Any other
 * use is not permitted under this copyright.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must include information specifying
 *    that source code for the emulator is freely available and include
 *    either:
 *      a) an offer to provide the source code for a nominal distribution
 *         fee, or
 *      b) list at least two alternative methods whereby the source
 *         can be obtained, e.g. a publically accessible bulletin board
 *         and an anonymous ftp site from which the software can be
 *         downloaded.
 * 3. All advertising materials specifically mentioning features or use of
 *    this emulator must acknowledge that it was developed by W. Metzenthen.
 * 4. The name of W. Metzenthen may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * W. METZENTHEN BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 * The purpose of this copyright, based upon the Berkeley copyright, is to
 * ensure that the covered software remains freely available to everyone.
 *
 * The software (with necessary differences) is also available, but under
 * the terms of the GNU copyleft, for the Linux operating system and for
 * the djgpp ms-dos extender.
 *
 * W. Metzenthen   June 1994.
 *
 *
 *     $FreeBSD: reg_u_mul.s,v 1.3 1994/06/10 07:44:58 rich Exp $
 *
 */

/*---------------------------------------------------------------------------+
 |   Basic multiplication routine.                                           |
 |   Does not check the resulting exponent for overflow/underflow            |
 |                                                                           |
 |   reg_u_mul(FPU_REG *a, FPU_REG *b, FPU_REG *c, unsigned int cw);         |
 |                                                                           |
 |   Internal working is at approx 128 bits.                                 |
 |   Result is rounded to nearest 53 or 64 bits, using "nearest or even".    |
 +---------------------------------------------------------------------------*/

#include <machine/asm.h>

#include <gnu/arch/i386/fpemul/exception.h>
#include <gnu/arch/i386/fpemul/fpu_asm.h>
#include <gnu/arch/i386/fpemul/control_w.h>


.data
#ifdef __ELF__
	.align 4,0
#else
	.align 2,0
#endif
accum_0:
	.long	0
accum_1:
	.long	0


.text
#ifdef __ELF__
	.align 4,144
#else
	.align 2,144
#endif

.globl _C_LABEL(reg_u_mul)
_C_LABEL(reg_u_mul):
	pushl	%ebp
	movl	%esp,%ebp
	pushl	%esi
	pushl	%edi
	pushl	%ebx

	movl	PARAM1,%esi
	movl	PARAM2,%edi

#ifdef PARANOID
	testl	$0x80000000,SIGH(%esi)
	jz	L_bugged
	testl	$0x80000000,SIGH(%edi)
	jz	L_bugged
#endif /* PARANOID */

#ifdef DENORM_OPERAND
	movl	EXP(%esi),%eax
	cmpl	EXP_UNDER,%eax
	jg	xOp1_not_denorm

	call	_C_LABEL(denormal_operand)
	orl	%eax,%eax
	jnz	FPU_Arith_exit

xOp1_not_denorm:
	movl	EXP(%edi),%eax
	cmpl	EXP_UNDER,%eax
	jg	xOp2_not_denorm

	call	_C_LABEL(denormal_operand)
	orl	%eax,%eax
	jnz	FPU_Arith_exit

xOp2_not_denorm:
#endif /* DENORM_OPERAND */

	xorl	%ecx,%ecx
	xorl	%ebx,%ebx

	movl	SIGL(%esi),%eax
	mull	SIGL(%edi)
	movl	%eax,accum_0
	movl	%edx,accum_1

	movl	SIGL(%esi),%eax
	mull	SIGH(%edi)
	addl	%eax,accum_1
	adcl	%edx,%ebx
/*	adcl	$0,%ecx		*//* overflow here is not possible */

	movl	SIGH(%esi),%eax
	mull	SIGL(%edi)
	addl	%eax,accum_1
	adcl	%edx,%ebx
	adcl	$0,%ecx

	movl	SIGH(%esi),%eax
	mull	SIGH(%edi)
	addl	%eax,%ebx
	adcl	%edx,%ecx

	movl	EXP(%esi),%eax	/* Compute the exponent */
	addl	EXP(%edi),%eax
	subl	EXP_BIAS-1,%eax
/*  Have now finished with the sources */
	movl	PARAM3,%edi	/* Point to the destination */
	movl	%eax,EXP(%edi)

/*  Now make sure that the result is normalized */
	testl	$0x80000000,%ecx
	jnz	LResult_Normalised

	/* Normalize by shifting left one bit */
	shll	$1,accum_0
	rcll	$1,accum_1
	rcll	$1,%ebx
	rcll	$1,%ecx
	decl	EXP(%edi)

LResult_Normalised:
	movl	accum_0,%eax
	movl	accum_1,%edx
	orl	%eax,%eax
	jz	L_extent_zero

	orl	$1,%edx

L_extent_zero:
	movl	%ecx,%eax
	jmp	FPU_round


#ifdef PARANOID
L_bugged:
	pushl	EX_INTERNAL|0x205
	call	EXCEPTION
	pop	%ebx
	jmp	L_exit

L_exit:
	popl	%ebx
	popl	%edi
	popl	%esi
	leave
	ret
#endif /* PARANOID */

@


1.3
log
@silence preprocessor.
ok grange@@, deraadt@@
@
text
@d2 1
a2 1
/*	$OpenBSD: reg_u_mul.s,v 1.2 2002/10/12 07:12:59 pvalchev Exp $	*/
@


1.2
log
@Prepare for ELF (mostly _C_LABEL sprinkling); ok drahn art
@
text
@d2 1
a2 1
/*	$OpenBSD: reg_u_mul.s,v 1.1 1996/08/27 10:33:02 downsj Exp $	*/
d117 1
a117 1
#endif PARANOID
d138 1
a138 1
#endif DENORM_OPERAND
d209 1
a209 1
#endif PARANOID
@


1.1
log
@Everyone, say hello to a real floating point emulator!

The fpemul written for Linux by W. Metzenthen: ported to NetBSD and
then to FreeBSD, and now back to OpenBSD.
@
text
@d2 1
a2 1
/*	$OpenBSD$	*/
d83 3
d87 1
d95 3
d99 1
d101 2
a102 2
.globl _reg_u_mul
_reg_u_mul:
d124 1
a124 1
	call	_denormal_operand
d133 1
a133 1
	call	_denormal_operand
@


1.1.16.1
log
@Sync the SMP branch with 3.3
@
text
@a82 3
#ifdef __ELF__
	.align 4,0
#else
a83 1
#endif
a90 3
#ifdef __ELF__
	.align 4,144
#else
a91 1
#endif
d93 2
a94 2
.globl _C_LABEL(reg_u_mul)
_C_LABEL(reg_u_mul):
d116 1
a116 1
	call	_C_LABEL(denormal_operand)
d125 1
a125 1
	call	_C_LABEL(denormal_operand)
@


1.1.16.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d117 1
a117 1
#endif /* PARANOID */
d138 1
a138 1
#endif /* DENORM_OPERAND */
d209 1
a209 1
#endif /* PARANOID */
@


1.1.26.1
log
@sync to -current
@
text
@d2 1
a2 1
/*	$OpenBSD: reg_u_mul.s,v 1.1 1996/08/27 10:33:02 downsj Exp $	*/
a82 3
#ifdef __ELF__
	.align 4,0
#else
a83 1
#endif
a90 3
#ifdef __ELF__
	.align 4,144
#else
a91 1
#endif
d93 2
a94 2
.globl _C_LABEL(reg_u_mul)
_C_LABEL(reg_u_mul):
d116 1
a116 1
	call	_C_LABEL(denormal_operand)
d125 1
a125 1
	call	_C_LABEL(denormal_operand)
@


