head	1.5;
access;
symbols
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.26
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.24
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.22
	OPENBSD_2_8:1.1.0.20
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.16
	SMP_BASE:1.1
	kame_19991208:1.1
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2006.07.25.19.20.45;	author kettenis;	state dead;
branches;
next	1.4;

1.4
date	2003.07.30.21.30.31;	author jason;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.09.22.27.11;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.03.16.09;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.27.10.32.51;	author downsj;	state Exp;
branches
	1.1.16.1
	1.1.26.1;
next	;

1.1.16.1
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.1.16.2;

1.1.16.2
date	2003.03.28.00.00.19;	author niklas;	state Exp;
branches;
next	1.1.16.3;

1.1.16.3
date	2004.02.19.10.56.36;	author niklas;	state Exp;
branches;
next	;

1.1.26.1
date	2002.06.11.03.28.56;	author art;	state Exp;
branches;
next	1.1.26.2;

1.1.26.2
date	2003.05.19.21.52.32;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove.

ok deraadt@@ & many others.
@
text
@/*	$OpenBSD: get_address.c,v 1.4 2003/07/30 21:30:31 jason Exp $	*/
/*
 *  get_address.c
 *
 * Get the effective address from an FPU instruction.
 *
 *
 * Copyright (C) 1992,1993,1994
 *                       W. Metzenthen, 22 Parker St, Ormond, Vic 3163,
 *                       Australia.  E-mail   billm@@vaxc.cc.monash.edu.au
 * All rights reserved.
 *
 * This copyright notice covers the redistribution and use of the
 * FPU emulator developed by W. Metzenthen. It covers only its use
 * in the 386BSD, FreeBSD and NetBSD operating systems. Any other
 * use is not permitted under this copyright.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must include information specifying
 *    that source code for the emulator is freely available and include
 *    either:
 *      a) an offer to provide the source code for a nominal distribution
 *         fee, or
 *      b) list at least two alternative methods whereby the source
 *         can be obtained, e.g. a publically accessible bulletin board
 *         and an anonymous ftp site from which the software can be
 *         downloaded.
 * 3. All advertising materials specifically mentioning features or use of
 *    this emulator must acknowledge that it was developed by W. Metzenthen.
 * 4. The name of W. Metzenthen may not be used to endorse or promote
 *    products derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * W. METZENTHEN BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *
 * The purpose of this copyright, based upon the Berkeley copyright, is to
 * ensure that the covered software remains freely available to everyone.
 *
 * The software (with necessary differences) is also available, but under
 * the terms of the GNU copyleft, for the Linux operating system and for
 * the djgpp ms-dos extender.
 *
 * W. Metzenthen   June 1994.
 *
 *
 *     $FreeBSD: get_address.c,v 1.3 1994/06/10 07:44:29 rich Exp $
 *
 */

/*---------------------------------------------------------------------------+
 | Note:                                                                     |
 |    The file contains code which accesses user memory.                     |
 |    Emulator static data may change when user memory is accessed, due to   |
 |    other processes using the emulator while swapping is in progress.      |
 +---------------------------------------------------------------------------*/

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/systm.h>
#include <sys/user.h>
#include <machine/cpu.h>
#include <machine/pcb.h>
#include <machine/reg.h>

#include <gnu/arch/i386/fpemul/fpu_emu.h>
#include <gnu/arch/i386/fpemul/fpu_system.h>
#include <gnu/arch/i386/fpemul/exception.h>

static int reg_offset[] = {
tEAX, tECX, tEDX, tEBX, tESP, tEBP, tESI, tEDI};
#define REG_(x) (*(((int *)FPU_info) + reg_offset[(x)]))

void   *FPU_data_address;


/* Decode the SIB byte. This function assumes mod != 0 */
static void *
sib(int mod)
{
	unsigned char ss, index, base;
	long    tmp, offset;

	REENTRANT_CHECK(OFF);
	copyin((char *)FPU_EIP, &base, sizeof(u_char));	/* The SIB byte */
	REENTRANT_CHECK(ON);
	FPU_EIP++;
	ss = base >> 6;
	index = (base >> 3) & 7;
	base &= 7;

	if ((mod == 0) && (base == 5))
		offset = 0;	/* No base register */
	else
		offset = REG_(base);

	if (index == 4) {
		/* No index register */
		/* A non-zero ss is illegal */
		if (ss)
			EXCEPTION(EX_Invalid);
	} else {
		offset += (REG_(index)) << ss;
	}

	if (mod == 1) {
		/* 8 bit signed displacement */
		REENTRANT_CHECK(OFF);
		copyin((char *)FPU_EIP, &tmp, sizeof(u_char));
		offset += (signed char)tmp;
		REENTRANT_CHECK(ON);
		FPU_EIP++;
	} else
		if (mod == 2 || base == 5) {	/* The second condition also
						 * has mod==0 */
			/* 32 bit displacment */
			REENTRANT_CHECK(OFF);
			copyin((u_long *)FPU_EIP, &tmp, sizeof(u_long));
			REENTRANT_CHECK(ON);
			offset += (signed)tmp;
			FPU_EIP += 4;
		}
	return (void *) offset;
}


/*
       MOD R/M byte:  MOD == 3 has a special use for the FPU
                      SIB byte used iff R/M = 100b

       7   6   5   4   3   2   1   0
       .....   .........   .........
        MOD    OPCODE(2)     R/M


       SIB byte

       7   6   5   4   3   2   1   0
       .....   .........   .........
        SS      INDEX        BASE

*/

void
get_address(unsigned char FPU_modrm)
{
	unsigned char mod;
	long   *cpu_reg_ptr;
	int     tmp = 0;
	int	offset = 0;	/* Initialized just to stop compiler warnings. */

	mod = (FPU_modrm >> 6) & 3;

	if (FPU_rm == 4 && mod != 3) {
		FPU_data_address = sib(mod);
		return;
	}
	cpu_reg_ptr = (long *) &REG_(FPU_rm);
	switch (mod) {
	case 0:
		if (FPU_rm == 5) {
			/* Special case: disp32 */
			REENTRANT_CHECK(OFF);
			copyin((u_long *)FPU_EIP, &offset, sizeof(u_long));
			REENTRANT_CHECK(ON);
			FPU_EIP += 4;
			FPU_data_address = (void *) offset;
			return;
		} else {
			FPU_data_address = (void *) *cpu_reg_ptr;	/* Just return the
									 * contents of the cpu
									 * register */
			return;
		}
	case 1:
		/* 8 bit signed displacement */
		REENTRANT_CHECK(OFF);
		copyin((char *)FPU_EIP, &tmp, sizeof(char));
		REENTRANT_CHECK(ON);
		offset = (signed char)tmp;
		FPU_EIP++;
		break;
	case 2:
		/* 32 bit displacement */
		REENTRANT_CHECK(OFF);
		copyin((u_long *)FPU_EIP, &offset, sizeof(u_long));
		REENTRANT_CHECK(ON);
		offset = (signed)tmp;
		FPU_EIP += 4;
		break;
	case 3:
		/* Not legal for the FPU */
		EXCEPTION(EX_Invalid);
	}

	FPU_data_address = offset + (char *) *cpu_reg_ptr;
}
@


1.4
log
@Change:
#define	I387	(*(union i387_union *)&(((struct pcb *)curproc->p_addr)->pcb_savefpu.gplemu))
To:
#define	I387	(curproc->p_addr->u_pcb.pcb_savefpu.gplemu)
(and add a few includes of sys/user.h to make it work).
@
text
@d1 1
a1 1
/*	$OpenBSD: get_address.c,v 1.3 2003/01/09 22:27:11 miod Exp $	*/
@


1.3
log
@Remove fetch(9) and store(9) functions from the kernel, and replace the few
remaining instances of them with appropriate copy(9) usage.

ok art@@, tested on all arches unless my memory is non-ECC
@
text
@d1 1
a1 1
/*	$OpenBSD: get_address.c,v 1.2 2002/03/14 03:16:09 millert Exp $	*/
d74 1
@


1.2
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: get_address.c,v 1.1 1996/08/27 10:32:51 downsj Exp $	*/
d94 1
a94 1
	long    offset;
d97 1
a97 1
	base = fubyte((char *) FPU_EIP);	/* The SIB byte */
d121 2
a122 1
		offset += (signed char) fubyte((char *) FPU_EIP);
d130 1
a130 1
			offset += (signed) fuword((unsigned long *) FPU_EIP);
d132 1
d161 2
a162 1
	int     offset = 0;	/* Initialized just to stop compiler warnings. */
d176 1
a176 1
			offset = fuword((unsigned long *) FPU_EIP);
d190 1
a190 1
		offset = (signed char) fubyte((char *) FPU_EIP);
d192 1
d198 1
a198 1
		offset = (signed) fuword((unsigned long *) FPU_EIP);
d200 1
@


1.1
log
@Everyone, say hello to a real floating point emulator!

The fpemul written for Linux by W. Metzenthen: ported to NetBSD and
then to FreeBSD, and now back to OpenBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d84 1
a84 1
#define REG_(x) (*(((int*)FPU_info) + reg_offset[(x)]))
@


1.1.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: get_address.c,v 1.1 1996/08/27 10:32:51 downsj Exp $	*/
d84 1
a84 1
#define REG_(x) (*(((int *)FPU_info) + reg_offset[(x)]))
@


1.1.26.2
log
@sync
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d94 1
a94 1
	long    tmp, offset;
d97 1
a97 1
	copyin((char *)FPU_EIP, &base, sizeof(u_char));	/* The SIB byte */
d121 1
a121 2
		copyin((char *)FPU_EIP, &tmp, sizeof(u_char));
		offset += (signed char)tmp;
d129 1
a129 1
			copyin((u_long *)FPU_EIP, &tmp, sizeof(u_long));
a130 1
			offset += (signed)tmp;
d159 1
a159 2
	int     tmp = 0;
	int	offset = 0;	/* Initialized just to stop compiler warnings. */
d173 1
a173 1
			copyin((u_long *)FPU_EIP, &offset, sizeof(u_long));
d187 1
a187 1
		copyin((char *)FPU_EIP, &tmp, sizeof(char));
a188 1
		offset = (signed char)tmp;
d194 1
a194 1
		copyin((u_long *)FPU_EIP, &offset, sizeof(u_long));
a195 1
		offset = (signed)tmp;
@


1.1.16.1
log
@Merge in -current from roughly a week ago
@
text
@d84 1
a84 1
#define REG_(x) (*(((int *)FPU_info) + reg_offset[(x)]))
@


1.1.16.2
log
@Sync the SMP branch with 3.3
@
text
@d94 1
a94 1
	long    tmp, offset;
d97 1
a97 1
	copyin((char *)FPU_EIP, &base, sizeof(u_char));	/* The SIB byte */
d121 1
a121 2
		copyin((char *)FPU_EIP, &tmp, sizeof(u_char));
		offset += (signed char)tmp;
d129 1
a129 1
			copyin((u_long *)FPU_EIP, &tmp, sizeof(u_long));
a130 1
			offset += (signed)tmp;
d159 1
a159 2
	int     tmp = 0;
	int	offset = 0;	/* Initialized just to stop compiler warnings. */
d173 1
a173 1
			copyin((u_long *)FPU_EIP, &offset, sizeof(u_long));
d187 1
a187 1
		copyin((char *)FPU_EIP, &tmp, sizeof(char));
a188 1
		offset = (signed char)tmp;
d194 1
a194 1
		copyin((u_long *)FPU_EIP, &offset, sizeof(u_long));
a195 1
		offset = (signed)tmp;
@


1.1.16.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@a73 1
#include <sys/user.h>
@


