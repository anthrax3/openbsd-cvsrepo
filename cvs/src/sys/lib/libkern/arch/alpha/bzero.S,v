head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.90
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.88
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.84
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.80
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.82
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.74
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.78
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.76
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.72
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.70
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.68
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.66
	OPENBSD_5_0:1.2.0.64
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.62
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.60
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.56
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.58
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.54
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.52
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.50
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.48
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.46
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.44
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.42
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.40
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.38
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.36
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.34
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.32
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.30
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.28
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.26
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.24
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.14
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	96.10.31.00.43.16;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.12.14.04.57.22;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge NetBSD/Alpha 961020
@
text
@/*	$OpenBSD: bzero.S,v 1.2 1996/10/17 04:26:24 cgd Exp $	*/
/*	$NetBSD: bzero.S,v 1.2 1996/10/17 04:26:24 cgd Exp $	*/

/*
 * Copyright (c) 1995 Carnegie-Mellon University.
 * All rights reserved.
 *
 * Author: Trevor Blackwell
 *
 * Permission to use, copy, modify and distribute this software and
 * its documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND
 * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

#include <machine/asm.h>

LEAF(bzero,2)
	ble	a1,bzero_done
	bic	a1,63,t3	/* t3 is # bytes to do 64 bytes at a time */

	/* If nothing in first word, ignore it */
	subq	zero,a0,t0
	and	t0,7,t0		/* t0 = (0-size)%8 */
	beq	t0,bzero_nostart1

	cmpult	a1,t0,t1	/* if size > size%8 goto noshort */
	beq	t1,bzero_noshort

	/*
	 * The whole thing is less than a word.
	 * Mask off 1..7 bytes, and finish.
	 */
	ldq_u	t2,0(a0)
	lda	t0,-1(zero)	/* t0=-1 */
	mskql	t0,a1,t0	/* Get ff in bytes (a0%8)..((a0+a1-1)%8) */
	insql	t0,a0,t0
	bic	t2,t0,t2	/* zero those bytes in word */
	stq_u	t2,0(a0)
	RET

bzero_noshort:
	/* Handle the first partial word */
	ldq_u	t2,0(a0)
	subq	a1,t0,a1
	mskql	t2,a0,t2	/* zero bytes (a0%8)..7 in word */
	stq_u	t2,0(a0)

	addq	a0,t0,a0	/* round a0 up to next word */
	bic	a1,63,t3	/* recalc t3 (# bytes to do 64 bytes at a
				   time) */

bzero_nostart1:
	/*
	 * Loop, zeroing 64 bytes at a time
	 */
	beq	t3,bzero_lp_done
bzero_lp:
	stq	zero,0(a0)
	stq	zero,8(a0)
	stq	zero,16(a0)
	stq	zero,24(a0)
	subq	t3,64,t3
	stq	zero,32(a0)
	stq	zero,40(a0)
	stq	zero,48(a0)
	stq	zero,56(a0)
	addq	a0,64,a0
	bne	t3,bzero_lp

bzero_lp_done:
	/*
	 * Handle the last 0..7 words.
	 * We mask off the low bits, so we don't need an extra
	 * compare instruction for the loop (just a bne. heh-heh)
	 */
	and	a1,0x38,t4
	beq	t4,bzero_finish_lp_done
bzero_finish_lp:
	stq	zero,0(a0)
	subq	t4,8,t4
	addq	a0,8,a0
	bne	t4,bzero_finish_lp

	/* Do the last partial word */
bzero_finish_lp_done:
	and	a1,7,t5		/* 0..7 bytes left */
	beq	t5,bzero_done	/* mskqh won't change t0 if t5==0, but I
				   don't want to touch, say, a new VM page */
	ldq	t0,0(a0)
	mskqh	t0,t5,t0
	stq	t0,0(a0)
bzero_done:
	RET

	END(bzero)
@


1.1
log
@update from netbsd
@
text
@d1 2
a2 1
/*	$NetBSD: bzero.S,v 1.1 1995/10/20 01:16:02 cgd Exp $	*/
d31 1
a31 1
#include "DEFS.h"
@
