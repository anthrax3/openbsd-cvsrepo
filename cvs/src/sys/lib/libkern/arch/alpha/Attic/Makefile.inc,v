head	1.14;
access;
symbols
	OPENBSD_4_2:1.13.0.18
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.16
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.14
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.12
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.10
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	SMP_SYNC_A:1.13
	SMP_SYNC_B:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.8
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.12
	UBC:1.11.0.6
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.8.0.12
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.10
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.8
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.14
date	2007.11.25.18.25.34;	author deraadt;	state dead;
branches;
next	1.13;

1.13
date	2003.06.01.17.00.30;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.28.20.55.14;	author pvalchev;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.18.18.40.45;	author provos;	state Exp;
branches
	1.11.6.1;
next	1.10;

1.10
date	2000.06.26.12.15.55;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.16.19.56.53;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	97.11.04.19.08.01;	author chuck;	state Exp;
branches
	1.8.10.1;
next	1.7;

1.7
date	97.05.05.14.31.43;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	97.05.04.23.33.41;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.10.31.00.43.12;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.05.01.15.08.15;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.22.27.45;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.04.57.22;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.51;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.51;	author deraadt;	state Exp;
branches;
next	;

1.8.10.1
date	2001.05.14.22.32.48;	author niklas;	state Exp;
branches;
next	1.8.10.2;

1.8.10.2
date	2003.03.28.00.41.27;	author niklas;	state Exp;
branches;
next	1.8.10.3;

1.8.10.3
date	2003.06.07.11.03.41;	author ho;	state Exp;
branches;
next	;

1.11.6.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.14
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@#	$OpenBSD: Makefile.inc,v 1.13 2003/06/01 17:00:30 deraadt Exp $
#	$NetBSD: Makefile.inc,v 1.9 1996/08/27 00:44:24 cgd Exp $

SRCS+=	__main.c imax.c imin.c lmax.c lmin.c max.c min.c ulmax.c ulmin.c \
	memchr.c memcmp.c memset.c \
	bcmp.c bzero.S ffs.S softfloat.c strcmp.c \
	strlcat.c strlcpy.c strlen.c strncmp.c \
	strncpy.c scanc.c skpc.c htonl.S htons.S ntohl.S ntohs.S \
	random.c strncasecmp.c

# `source' files built from m4 source
SRCS+=	__divqu.S __divq.S __divlu.S __divl.S
SRCS+=	__remqu.S __remq.S __remlu.S __reml.S
CLEANFILES+=	__divqu.S __divq.S __divlu.S __divl.S
CLEANFILES+=	__remqu.S __remq.S __remlu.S __reml.S

__divqu.S: ${M}/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__divqu')define(OP,\`div')define(S,\`false')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__divq.S: ${M}/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__divq')define(OP,\`div')define(S,\`true')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__divlu.S: ${M}/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__divlu')define(OP,\`div')define(S,\`false')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__divl.S: ${M}/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__divl')define(OP,\`div')define(S,\`true')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__remqu.S: ${M}/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__remqu')define(OP,\`rem')define(S,\`false')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__remq.S: ${M}/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__remq')define(OP,\`rem')define(S,\`true')"; \
	 echo "define(WORDSIZE,64)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__remlu.S: ${M}/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__remlu')define(OP,\`rem')define(S,\`false')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}

__reml.S: ${M}/divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`__reml')define(OP,\`rem')define(S,\`true')"; \
	 echo "define(WORDSIZE,32)"; cat ${.ALLSRC}) | m4 > ${.TARGET}
@


1.13
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.12 2002/04/28 20:55:14 pvalchev Exp $
@


1.12
log
@IEEE 754 floating point completion code, and implementation of the
FP_C (Floating Point Control Quadword).

From ross@@NetBSD.  Added a way to disable it with option NO_IEEE,
which appears on the ramdisks to save space.  This affects only
programs compiled with -mieee, and what it essentially does is
enabling infinities and NaNs, instead of generating SIGFPE on
division by zero, overflow, etc.
ok art, deraadt
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 2000/12/18 18:40:45 provos Exp $
d6 1
a6 1
	bcmp.c bzero.S ffs.S softfloat.c strcat.c strcmp.c strcpy.c \
@


1.11
log
@strlcat and strlcpy into libkern.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2000/06/26 12:15:55 millert Exp $
d6 2
a7 2
	bcmp.c bzero.S ffs.S strcat.c strcmp.c strcpy.c strlcat.c strlcpy.c \
	strlen.c strncmp.c \
@


1.11.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 2000/12/18 18:40:45 provos Exp $
d6 2
a7 2
	bcmp.c bzero.S ffs.S softfloat.c strcat.c strcmp.c strcpy.c \
	strlcat.c strlcpy.c strlen.c strncmp.c \
@


1.10
log
@alpha was missing memset
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2000/06/16 19:56:53 millert Exp $
d6 2
a7 1
	bcmp.c bzero.S ffs.S strcat.c strcmp.c strcpy.c strlen.c strncmp.c \
@


1.9
log
@Pull memcmp() into libkern.  Also, use asm version of memset() on m68k.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 1997/11/04 19:08:01 chuck Exp $
d5 1
a5 1
	memchr.c memcmp.c \
@


1.8
log
@add memchr to libkern
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 1997/05/05 14:31:43 millert Exp $
d5 1
a5 1
	memchr.c \
@


1.8.10.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.11 2000/12/18 18:40:45 provos Exp $
d5 2
a6 3
	memchr.c memcmp.c memset.c \
	bcmp.c bzero.S ffs.S strcat.c strcmp.c strcpy.c strlcat.c strlcpy.c \
	strlen.c strncmp.c \
@


1.8.10.2
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
#	$OpenBSD$
d6 2
a7 2
	bcmp.c bzero.S ffs.S softfloat.c strcat.c strcmp.c strcpy.c \
	strlcat.c strlcpy.c strlen.c strncmp.c \
@


1.8.10.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8.10.2 2003/03/28 00:41:27 niklas Exp $
d6 1
a6 1
	bcmp.c bzero.S ffs.S softfloat.c strcmp.c \
@


1.7
log
@Several kernel files have internal (conflicting) versions of strchr() so
move to libsa for now.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 1997/05/04 23:33:41 millert Exp $
d5 1
@


1.6
log
@Alpha needs strchr.c
Fix up clean and depend targets in Makefile.inc so we can
include Makefile.inc in cases where there is already a
clean/depend target (based on a NetBSD Makefile.inc).
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 1996/10/31 00:43:12 niklas Exp $
d7 1
a7 1
	random.c strncasecmp.c strchr.c
@


1.5
log
@Merge NetBSD/Alpha 961020
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 1996/04/21 22:27:45 deraadt Exp $
d7 1
a7 1
	random.c strncasecmp.c
@


1.4
log
@copied from libc
@
text
@d2 1
a2 1
#	$NetBSD: Makefile.inc,v 1.5 1996/04/17 22:46:34 cgd Exp $
d5 2
a6 2
	bcmp.c bzero.S ffs.c strcat.c strcmp.c strcpy.c strlen.c strncmp.c \
	strncpy.c scanc.c skpc.c locc.c htonl.S htons.S ntohl.S ntohs.S \
d15 1
a15 1
__divqu.S: ${DIR}/arch/alpha/divrem.m4
d20 1
a20 1
__divq.S: ${DIR}/arch/alpha/divrem.m4
d25 1
a25 1
__divlu.S: ${DIR}/arch/alpha/divrem.m4
d30 1
a30 1
__divl.S: ${DIR}/arch/alpha/divrem.m4
d35 1
a35 1
__remqu.S: ${DIR}/arch/alpha/divrem.m4
d40 1
a40 1
__remq.S: ${DIR}/arch/alpha/divrem.m4
d45 1
a45 1
__remlu.S: ${DIR}/arch/alpha/divrem.m4
d50 1
a50 1
__reml.S: ${DIR}/arch/alpha/divrem.m4
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
#	$OpenBSD$
#	$NetBSD: Makefile.inc,v 1.4 1996/04/13 01:17:27 cgd Exp $
d6 1
a6 1
	strncpy.c scanc.c skpc.c locc.c htonl.c htons.c ntohl.c ntohs.c \
@


1.2
log
@update from netbsd
@
text
@d1 2
a2 1
#	$NetBSD: Makefile.inc,v 1.3 1995/10/20 01:15:37 cgd Exp $
d7 1
a7 1
	random.c
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#	$Id: Makefile.inc,v 1.2 1995/06/28 02:59:12 cgd Exp $
d4 1
a4 1
	bcmp.c bzero.c ffs.c strcat.c strcmp.c strcpy.c strlen.c strncmp.c \
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
