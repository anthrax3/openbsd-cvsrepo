head	1.5;
access;
symbols
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.2.0.22
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.20
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.18
	OPENBSD_5_0:1.2.0.16
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.14
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.12
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.10
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2014.03.18.22.36.37;	author miod;	state dead;
branches;
next	1.4;

1.4
date	2013.06.17.17.50.07;	author jj;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.03.05.39.02;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.28.11.46.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.25.18.25.35;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Retire hp300, mvme68k and mvme88k ports. These ports have no users, keeping
this hardware alive is becoming increasingly difficult, and I should heed the
message sent by the three disks which have died on me over the last few days.

Noone sane will mourn these ports anyway. So long, and thanks for the fish.
@
text
@/*	$OpenBSD: memmove.S,v 1.4 2013/06/17 17:50:07 jj Exp $	*/
/*	$NetBSD: bcopy.s,v 1.1 1997/03/17 19:44:33 gwr Exp $	*/

/*-
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * This is based on: src/lib/libc/arch/m68k/string/bcopy.S
 * identified as: @@(#)bcopy.s        5.1 (Berkeley) 5/12/90
 */	

#include <machine/asm.h>

	.file	"memmove.S"
	.text

/*
 * bcopy(from, to, len)
 * memmove(to, from, len): swap args and fall into bcopy
 * memcpy(to, from, len): swap args, and fall into forward bcopy
 *
 */
ENTRY(memcpy)
	movl	%sp@@(12),%d0		| get count
	jeq	Lbccpyexit		| if zero, return
	movl	%sp@@(8), %a0		| src address
	movl	%sp@@(4), %a1		| dest address
	jra     Lbcdocopyf              | copy forward
ENTRY(memmove)
	movl    %sp@@(12),%d0            | get count
	jeq     Lbccpyexit              | if zero, return
	movl    %sp@@(8), %a0            | src address
	movl    %sp@@(4), %a1            | dest address
	jra	Lbcdocopy		| jump into bcopy
ENTRY(bcopy)
	movl	%sp@@(12),%d0		| get count
	jeq	Lbccpyexit		| if zero, return
	movl	%sp@@(4),%a0		| src address
	movl	%sp@@(8),%a1		| dest address
Lbcdocopy:
	cmpl	%a1,%a0			| src before dest?
	jlt	Lbccpyback		| yes, copy backwards (avoids overlap)
Lbcdocopyf:
	movl	%a0,%d1
	btst	#0,%d1			| src address odd?
	jeq	Lbccfeven		| no, go check dest
	movb	%a0@@+,%a1@@+		| yes, copy a byte
	subql	#1,%d0			| update count
	jeq	Lbccpyexit		| exit if done
Lbccfeven:
	movl	%a1,%d1
	btst	#0,%d1			| dest address odd?
	jne	Lbccfbyte		| yes, must copy by bytes
	movl	%d0,%d1			| no, get count
	lsrl	#2,%d1			| convert to longwords
	jeq	Lbccfbyte		| no longwords, copy bytes
Lbccflloop:
	movl	%a0@@+,%a1@@+		| copy longwords
	subql	#1,%d1			| decrement counter
	jne	Lbccflloop		| til done
	andl	#3,%d0			| get remaining count
	jeq	Lbccpyexit		| done if none
Lbccfbyte:
Lbccfbloop:
	movb	%a0@@+,%a1@@+		| copy bytes
	subql	#1,%d0			| decrement counter
	jne	Lbccfbloop		| til done
Lbccpyexit:
	movl    %sp@@(4),%d0             | dest address
	moveal  %d0,%a0
	rts
Lbccpyback:
	addl	%d0,%a0			| add count to src
	addl	%d0,%a1			| add count to dest
	movl	%a0,%d1
	btst	#0,%d1			| src address odd?
	jeq	Lbccbeven		| no, go check dest
	movb	%a0@@-,%a1@@-		| yes, copy a byte
	subql	#1,%d0			| update count
	jeq	Lbccpyexit		| exit if done
Lbccbeven:
	movl	%a1,%d1
	btst	#0,%d1			| dest address odd?
	jne	Lbccbbyte		| yes, must copy by bytes
	movl	%d0,%d1			| no, get count
	lsrl	#2,%d1			| convert to longwords
	jeq	Lbccbbyte		| no longwords, copy bytes
Lbccblloop:
	movl	%a0@@-,%a1@@-		| copy longwords
	subql	#1,%d1			| decrement counter
	jne	Lbccblloop		| til done
	andl	#3,%d0			| get remaining count
	jeq	Lbccpyexit		| done if none
Lbccbbyte:
Lbccbbloop:
	movb	%a0@@-,%a1@@-		| copy bytes
	subql	#1,%d0			| decrement counter
	jne	Lbccbbloop		| til done
	movl    %sp@@(4),%d0             | dest address
	moveal  %d0,%a0
	rts

@


1.4
log
@m68k kernel memcpy/memmove/bcopy implementation in libkern, remove ovbcopy, fix for larger than 128k size copies. Parts from deraadt@@, ok (and off-by-one fix) miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bcopy.s,v 1.4 2013/02/02 13:32:06 miod Exp $	*/
@


1.3
log
@fix an oft copied typo that i'm tired of looking at
@
text
@d1 132
a132 1
/* No code here since kernel implements this itself */
@


1.2
log
@place a comment as to why these are otherwise empty
@
text
@d1 1
a1 1
/* No code here since kernel impliments this itself */
@


1.1
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
@

