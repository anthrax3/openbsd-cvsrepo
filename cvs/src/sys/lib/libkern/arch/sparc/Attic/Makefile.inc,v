head	1.12;
access;
symbols
	OPENBSD_4_2:1.11.0.18
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.16
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.14
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.12
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.8
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.10
	UBC:1.9.0.6
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.4
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.2
	OPENBSD_2_7_BASE:1.7
	SMP:1.6.0.2
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.12
date	2007.11.25.18.25.36;	author deraadt;	state dead;
branches;
next	1.11;

1.11
date	2003.06.01.17.00.31;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.11.12.21.33;	author art;	state Exp;
branches;
next	1.9;

1.9
date	2000.12.18.18.40.47;	author provos;	state Exp;
branches
	1.9.6.1;
next	1.8;

1.8
date	2000.06.16.19.56.55;	author millert;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2000.02.22.19.27.18;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.12.07.00.49.10;	author deraadt;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	98.06.02.20.38.26;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.11.04.19.08.16;	author chuck;	state Exp;
branches;
next	1.3;

1.3
date	96.05.01.15.17.31;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.04.21.22.28.01;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.54;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.54;	author deraadt;	state Exp;
branches;
next	;

1.6.2.1
date	2000.03.02.07.04.41;	author niklas;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2001.05.14.22.32.51;	author niklas;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2003.03.28.00.41.27;	author niklas;	state Exp;
branches;
next	1.6.2.4;

1.6.2.4
date	2003.06.07.11.03.42;	author ho;	state Exp;
branches;
next	;

1.8.2.1
date	2000.12.19.22.58.40;	author jason;	state Exp;
branches;
next	;

1.9.6.1
date	2002.10.29.00.36.45;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@#	$OpenBSD: Makefile.inc,v 1.11 2003/06/01 17:00:31 deraadt Exp $
#	$NetBSD: Makefile.inc,v 1.12 1996/04/23 23:05:22 christos Exp $

SRCS+=  __main.c imax.c imin.c lmax.c lmin.c max.c min.c ulmax.c ulmin.c \
	memchr.c memcmp.c memset.c \
	bcmp.c bzero.S strcmp.c strlcat.c strlcpy.c \
	strlen.S strncmp.c \
	strncpy.c htonl.S htons.S ntohl.S ntohs.S scanc.c skpc.c \
	strncasecmp.c

SRCS+=	rem.S sdiv.S udiv.S urem.S
SRCS+=	saveregs.S

# `source' files built from m4 source
# the name `div.o' is taken for the ANSI C `div' function, hence sdiv here
SRCS+=	rem.S sdiv.S udiv.S urem.S
CLEANFILES+=rem.S sdiv.S udiv.S urem.S

sdiv.S: divrem.m4
	echo 'building ${.TARGET} from ${.ALLSRC}'
	(echo "define(NAME,\`.div')define(NAME2,\`_C_LABEL(_div)')define(OP,\`div')define(S,\`true')"; \
	 cat ${.ALLSRC}) | m4 > ${.TARGET}
	chmod 444 ${.TARGET}

udiv.S: divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`.udiv')define(NAME2,\`_C_LABEL(_udiv)')define(OP,\`div')define(S,\`false')"; \
	 cat ${.ALLSRC}) | m4 > ${.TARGET}
	@@chmod 444 ${.TARGET}

rem.S:	divrem.m4
	echo 'building ${.TARGET} from ${.ALLSRC}'
	(echo "define(NAME,\`.rem')define(NAME2,\`_C_LABEL(_rem)')define(OP,\`rem')define(S,\`true')"; \
	 cat ${.ALLSRC}) | m4 > ${.TARGET}
	chmod 444 ${.TARGET}

urem.S: divrem.m4
	@@echo 'building ${.TARGET} from ${.ALLSRC}'
	@@(echo "define(NAME,\`.urem')define(NAME2,\`_C_LABEL(_urem)')define(OP,\`rem')define(S,\`false')"; \
	 cat ${.ALLSRC}) | m4 > ${.TARGET}
	@@chmod 444 ${.TARGET}

@


1.11
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.10 2002/08/11 12:21:33 art Exp $
@


1.10
log
@Use _C_LABEL for c symbols.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2000/12/18 18:40:47 provos Exp $
d6 1
a6 1
	bcmp.c bzero.S strcat.c strcmp.c strcpy.c strlcat.c strlcpy.c \
@


1.9
log
@strlcat and strlcpy into libkern.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.8 2000/06/16 19:56:55 millert Exp $
d21 1
a21 1
	(echo "define(NAME,\`.div')define(NAME2,\`__div')define(OP,\`div')define(S,\`true')"; \
d27 1
a27 1
	@@(echo "define(NAME,\`.udiv')define(NAME2,\`__udiv')define(OP,\`div')define(S,\`false')"; \
d33 1
a33 1
	(echo "define(NAME,\`.rem')define(NAME2,\`__rem')define(OP,\`rem')define(S,\`true')"; \
d39 1
a39 1
	@@(echo "define(NAME,\`.urem')define(NAME2,\`__urem')define(OP,\`rem')define(S,\`false')"; \
@


1.9.6.1
log
@sync to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2000/12/18 18:40:47 provos Exp $
d21 1
a21 1
	(echo "define(NAME,\`.div')define(NAME2,\`_C_LABEL(_div)')define(OP,\`div')define(S,\`true')"; \
d27 1
a27 1
	@@(echo "define(NAME,\`.udiv')define(NAME2,\`_C_LABEL(_udiv)')define(OP,\`div')define(S,\`false')"; \
d33 1
a33 1
	(echo "define(NAME,\`.rem')define(NAME2,\`_C_LABEL(_rem)')define(OP,\`rem')define(S,\`true')"; \
d39 1
a39 1
	@@(echo "define(NAME,\`.urem')define(NAME2,\`_C_LABEL(_urem)')define(OP,\`rem')define(S,\`false')"; \
@


1.8
log
@Pull memcmp() into libkern.  Also, use asm version of memset() on m68k.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.7 2000/02/22 19:27:18 deraadt Exp $
d6 2
a7 1
	bcmp.c bzero.S strcat.c strcmp.c strcpy.c strlen.S strncmp.c \
@


1.8.2.1
log
@Pull in patch from current:
Errata (013):
Procfs contained numerous overflows, which could lead an intruder to root
permissions.  Procfs is NOT enabled by default in OpenBSD.
Fix (provos):
- strlcat and strlcpy into libkern.
- calculate length and allocate buffer for status. work by deraadt@@ and me
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2000/12/18 18:40:47 provos Exp $
d6 1
a6 2
	bcmp.c bzero.S strcat.c strcmp.c strcpy.c strlcat.c strlcpy.c \
	strlen.S strncmp.c \
@


1.7
log
@put C accessable labels on {,u}{rem,div}
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6 1999/12/07 00:49:10 deraadt Exp $
d5 1
a5 1
	memchr.c memset.c \
@


1.6
log
@move .mul and .umul into the kernel.  if v8 sparc is detected, replace with
the equivelant 2-instruction sequence.
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.5 1998/06/02 20:38:26 deraadt Exp $
d20 1
a20 1
	(echo "define(NAME,\`.div')define(OP,\`div')define(S,\`true')"; \
d26 1
a26 1
	@@(echo "define(NAME,\`.udiv')define(OP,\`div')define(S,\`false')"; \
d32 1
a32 1
	(echo "define(NAME,\`.rem')define(OP,\`rem')define(S,\`true')"; \
d38 1
a38 1
	@@(echo "define(NAME,\`.urem')define(OP,\`rem')define(S,\`false')"; \
@


1.6.2.1
log
@Sync with -current
@
text
@d1 1
a1 1
#	$OpenBSD$
d20 1
a20 1
	(echo "define(NAME,\`.div')define(NAME2,\`__div')define(OP,\`div')define(S,\`true')"; \
d26 1
a26 1
	@@(echo "define(NAME,\`.udiv')define(NAME2,\`__udiv')define(OP,\`div')define(S,\`false')"; \
d32 1
a32 1
	(echo "define(NAME,\`.rem')define(NAME2,\`__rem')define(OP,\`rem')define(S,\`true')"; \
d38 1
a38 1
	@@(echo "define(NAME,\`.urem')define(NAME2,\`__urem')define(OP,\`rem')define(S,\`false')"; \
@


1.6.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.9 2000/12/18 18:40:47 provos Exp $
d5 2
a6 3
	memchr.c memcmp.c memset.c \
	bcmp.c bzero.S strcat.c strcmp.c strcpy.c strlcat.c strlcpy.c \
	strlen.S strncmp.c \
@


1.6.2.3
log
@Sync the SMP branch with 3.3
@
text
@d1 1
a1 1
#	$OpenBSD$
d21 1
a21 1
	(echo "define(NAME,\`.div')define(NAME2,\`_C_LABEL(_div)')define(OP,\`div')define(S,\`true')"; \
d27 1
a27 1
	@@(echo "define(NAME,\`.udiv')define(NAME2,\`_C_LABEL(_udiv)')define(OP,\`div')define(S,\`false')"; \
d33 1
a33 1
	(echo "define(NAME,\`.rem')define(NAME2,\`_C_LABEL(_rem)')define(OP,\`rem')define(S,\`true')"; \
d39 1
a39 1
	@@(echo "define(NAME,\`.urem')define(NAME2,\`_C_LABEL(_urem)')define(OP,\`rem')define(S,\`false')"; \
@


1.6.2.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.6.2.3 2003/03/28 00:41:27 niklas Exp $
d6 1
a6 1
	bcmp.c bzero.S strcmp.c strlcat.c strlcpy.c \
@


1.5
log
@sparc needs memset for gcc now (i hate this)
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.4 1997/11/04 19:08:16 chuck Exp $
d10 2
a11 2
SRCS+=	umul.S mul.S rem.S sdiv.S udiv.S umul.S urem.S
SRCS+=	mul.S saveregs.S umul.S
@


1.4
log
@add memchr to libkern
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.3 1996/05/01 15:17:31 deraadt Exp $
d5 1
a5 1
	memchr.c \
@


1.3
log
@sparc needs memset, compiler calls it automatically
@
text
@d1 1
a1 1
#	$OpenBSD: Makefile.inc,v 1.2 1996/04/21 22:28:01 deraadt Exp $
d5 1
@


1.2
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
#	$OpenBSD$
#	$NetBSD: Makefile.inc,v 1.11 1996/04/13 01:17:53 cgd Exp $
d6 1
a6 1
	strncpy.c htonl.S htons.S ntohl.S ntohs.S scanc.c skpc.c memset.c \
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
#	$NetBSD: Makefile.inc,v 1.10 1995/10/07 22:26:53 mycroft Exp $
d6 2
a7 1
	strncpy.c htonl.S htons.S ntohl.S ntohs.S scanc.c skpc.c memset.c
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
