head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.54
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.52
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.48
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.44
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.46
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.38
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.42
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.40
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.36
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.34
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.32
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.30
	OPENBSD_5_0:1.4.0.28
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.26
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.24
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.20
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.22
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.18
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.16
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.14
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.12
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3;
locks; strict;
comment	@# @;


1.4
date	2004.10.08.14.42.09;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.09.15.41.18;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.13.13.07.24;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.11.10.29.59;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.4
log
@64 bit safe over entire address range
@
text
@/*	$OpenBSD: bcmp.S,v 1.3 2004/09/09 15:41:18 pefo Exp $	*/
/*-
 * Copyright (c) 1991, 1993
 *      The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include "DEFS.h"


/*
 * bcmp(s1, s2, n)
 */
LEAF(bcmp, 0)
	.set	noreorder
	blt	a2, 16, smallcmp	# is it worth any trouble?
	xor	v0, a0, a1		# compare low two bits of addresses
	and	v0, v0, 3
	PTR_SUBU a3, zero, a1		# compute # bytes to word align address
	bne	v0, zero, unalignedcmp	# not possible to align addresses
	and	a3, a3, 3

	beq	a3, zero, 1f
	PTR_SUBU a2, a2, a3		# subtract from remaining count
	move	v0, v1			# init v0,v1 so unmodified bytes match
	LWHI	v0, 0(a0)		# read 1, 2, or 3 bytes
	LWHI	v1, 0(a1)
	PTR_ADDU a1, a1, a3
	bne	v0, v1, nomatch
	PTR_ADDU a0, a0, a3
1:
	and	a3, a2, ~3		# compute number of whole words left
	PTR_SUBU a2, a2, a3		#   which has to be >= (16-3) & ~3
	PTR_ADDU a3, a3, a0		# compute ending address
2:
	lw	v0, 0(a0)		# compare words
	lw	v1, 0(a1)
	PTR_ADDU a0, a0, 4
	bne	v0, v1, nomatch
	PTR_ADDU a1, a1, 4
	bne	a0, a3, 2b
	nop
	b	smallcmp		# finish remainder
	nop
unalignedcmp:
	beq	a3, zero, 2f
	PTR_SUBU a2, a2, a3		# subtract from remaining count
	PTR_ADDU a3, a3, a0		# compute ending address
1:
	lbu	v0, 0(a0)		# compare bytes until a1 word aligned
	lbu	v1, 0(a1)
	PTR_ADDU a0, a0, 1
	bne	v0, v1, nomatch
	PTR_ADDU a1, a1, 1
	bne	a0, a3, 1b
	nop
2:
	and	a3, a2, ~3		# compute number of whole words left
	PTR_SUBU a2, a2, a3		#   which has to be >= (16-3) & ~3
	PTR_ADDU a3, a3, a0		# compute ending address
3:
	LWHI	v0, 0(a0)		# compare words a0 unaligned, a1 aligned
	LWLO	v0, 3(a0)
	lw	v1, 0(a1)
	PTR_ADDU a0, a0, 4
	bne	v0, v1, nomatch
	PTR_ADDU a1, a1, 4
	bne	a0, a3, 3b
	nop
smallcmp:
	ble	a2, zero, match
	PTR_ADDU a3, a2, a0		# compute ending address
1:
	lbu	v0, 0(a0)
	lbu	v1, 0(a1)
	PTR_ADDU a0, a0, 1
	bne	v0, v1, nomatch
	PTR_ADDU a1, a1, 1
	bne	a0, a3, 1b
	nop
match:
	j	ra
	move	v0, zero
nomatch:
	j	ra
	dli	v0, 1
END(bcmp)
@


1.3
log
@Changes for 64 bit kernel. Some functions needis to be rewritten or
optimized to take advantage of full 64 bit width registers.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcmp.S,v 1.2 2004/08/13 13:07:24 pefo Exp $	*/
d45 1
a45 1
	subu	a3, zero, a1		# compute # bytes to word align address
d50 1
a50 1
	subu	a2, a2, a3		# subtract from remaining count
d54 1
a54 1
	addu	a1, a1, a3
d56 1
a56 1
	addu	a0, a0, a3
d59 2
a60 2
	subu	a2, a2, a3		#   which has to be >= (16-3) & ~3
	addu	a3, a3, a0		# compute ending address
d64 1
a64 1
	addu	a0, a0, 4
d66 1
a66 1
	addu	a1, a1, 4
d73 2
a74 2
	subu	a2, a2, a3		# subtract from remaining count
	addu	a3, a3, a0		# compute ending address
d78 1
a78 1
	addu	a0, a0, 1
d80 1
a80 1
	addu	a1, a1, 1
d85 2
a86 2
	subu	a2, a2, a3		#   which has to be >= (16-3) & ~3
	addu	a3, a3, a0		# compute ending address
d91 1
a91 1
	addu	a0, a0, 4
d93 1
a93 1
	addu	a1, a1, 4
d98 1
a98 1
	addu	a3, a2, a0		# compute ending address
d102 1
a102 1
	addu	a0, a0, 1
d104 1
a104 1
	addu	a1, a1, 1
d109 1
a109 1
	 move	v0, zero
d112 1
a112 1
	li	v0, 1
@


1.2
log
@add missing copyright
@
text
@d1 1
a1 1
/*	$OpenBSD: bcmp.S,v 1.1 2004/08/11 10:29:59 pefo Exp $	*/
d40 1
a40 1
LEAF(bcmp)
@


1.1
log
@mips64 now
@
text
@d1 32
a32 1
/*	$OpenBSD: bcmp.S,v 1.7 1998/03/01 16:10:22 niklas Exp $	*/
@

