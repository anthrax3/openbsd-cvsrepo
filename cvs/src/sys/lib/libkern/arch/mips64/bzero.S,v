head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.50
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.48
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.44
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.46
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.38
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.42
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.40
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.36
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.34
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.32
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.30
	OPENBSD_5_0:1.6.0.28
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.26
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.24
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.20
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.22
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.18
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.16
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.14
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.12
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3;
locks; strict;
comment	@# @;


1.6
date	2004.10.08.14.42.09;	author pefo;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.21.10.42.37;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.18.09.13.57;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	2004.09.09.15.41.18;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.13.13.07.24;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.11.10.29.59;	author pefo;	state Exp;
branches;
next	;


desc
@@


1.6
log
@64 bit safe over entire address range
@
text
@/*	$OpenBSD: bzero.S,v 1.5 2004/09/21 10:42:37 miod Exp $	*/
/*-
 * Copyright (c) 1991, 1993
 *      The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */


#include "DEFS.h"

/*
 * bzero(void *p, size_t len)
 */
LEAF(bzero, 0)
ALEAF(blkclr)
	.set	noreorder
#ifdef _STANDALONE
	blt	a1, 12, smallclr	# small amount to clear?
	PTR_SUBU a3, zero, a0		# compute # bytes to word align address
	and	a3, a3, 3
	beq	a3, zero, 1f		# skip if word aligned
	PTR_SUBU a1, a1, a3		# subtract from remaining count
	SWHI	zero, 0(a0)		# clear 1, 2, or 3 bytes to align
	PTR_ADDU a0, a0, a3
1:
	and	v0, a1, 3		# compute number of words left
	PTR_SUBU a3, a1, v0
	move	a1, v0
	PTR_ADDU a3, a3, a0		# compute ending address
2:
	PTR_ADDU a0, a0, 4		# clear words
	bne	a0, a3, 2b		#  unrolling loop does not help
	sw	zero, -4(a0)		#  since we are limited by memory speed
#else
	blt	a1, 24, smallclr	# small amount to clear?
	PTR_SUBU a3, zero, a0		# compute # bytes to word align address
	and	a3, a3, 7
	beq	a3, zero, 1f		# skip if word aligned
	PTR_SUBU a1, a1, a3		# subtract from remaining count
	SDHI	zero, 0(a0)		# clear 1, 2, or 3 bytes to align
	PTR_ADDU a0, a0, a3
1:
	and	v0, a1, 7		# compute number of words left
	PTR_SUBU a3, a1, v0
	move	a1, v0
	PTR_ADDU a3, a3, a0		# compute ending address
2:
	PTR_ADDU a0, a0, 8		# clear words
	bne	a0, a3, 2b		#  unrolling loop does not help
	sd	zero, -8(a0)		#  since we are limited by memory speed
#endif
smallclr:
	ble	a1, zero, 2f
	PTR_ADDU a3, a1, a0		# compute ending address
1:
	PTR_ADDU a0, a0, 1		# clear bytes
	bne	a0, a3, 1b
	sb	zero, -1(a0)
2:
	j	ra
	nop
END(bzero)
@


1.5
log
@Keep providing a 32bit only version of bzero() #ifdef _STANDALONE, as
bootblocks are compiled as 32bit code.
@
text
@d1 1
a1 1
/*	$OpenBSD: bzero.S,v 1.4 2004/09/18 09:13:57 pefo Exp $	*/
d45 1
a45 1
	subu	a3, zero, a0		# compute # bytes to word align address
d48 1
a48 1
	subu	a1, a1, a3		# subtract from remaining count
d50 1
a50 1
	addu	a0, a0, a3
d53 1
a53 1
	subu	a3, a1, v0
d55 1
a55 1
	addu	a3, a3, a0		# compute ending address
d57 1
a57 1
	addu	a0, a0, 4		# clear words
d62 1
a62 1
	subu	a3, zero, a0		# compute # bytes to word align address
d65 1
a65 1
	subu	a1, a1, a3		# subtract from remaining count
d67 1
a67 1
	addu	a0, a0, a3
d70 1
a70 1
	subu	a3, a1, v0
d72 1
a72 1
	addu	a3, a3, a0		# compute ending address
d74 1
a74 1
	addu	a0, a0, 8		# clear words
d80 1
a80 1
	addu	a3, a1, a0		# compute ending address
d82 1
a82 1
	addu	a0, a0, 1		# clear bytes
@


1.4
log
@slightly 64 bit improved
@
text
@d1 1
a1 1
/*	$OpenBSD: bzero.S,v 1.3 2004/09/09 15:41:18 pefo Exp $	*/
a36 1

d43 18
d77 1
a88 1

@


1.3
log
@Changes for 64 bit kernel. Some functions needis to be rewritten or
optimized to take advantage of full 64 bit width registers.
@
text
@d1 1
a1 1
/*	$OpenBSD: bzero.S,v 1.2 2004/08/13 13:07:24 pefo Exp $	*/
d39 1
a39 1
 * bzero(s1, n)
d44 1
a44 1
	blt	a1, 12, smallclr	# small amount to clear?
d46 1
a46 1
	and	a3, a3, 3
d49 1
a49 1
	SWHI	zero, 0(a0)		# clear 1, 2, or 3 bytes to align
d52 1
a52 1
	and	v0, a1, 3		# compute number of words left
d57 1
a57 1
	addu	a0, a0, 4		# clear words
d59 1
a59 1
	sw	zero, -4(a0)		#  since we are limited by memory speed
@


1.2
log
@add missing copyright
@
text
@d1 1
a1 1
/*	$OpenBSD: bzero.S,v 1.1 2004/08/11 10:29:59 pefo Exp $	*/
d41 1
a41 1
LEAF(bzero)
@


1.1
log
@mips64 now
@
text
@d1 33
a33 1
/*	$OpenBSD: bzero.S,v 1.6 1998/03/01 16:10:26 niklas Exp $	*/
@

