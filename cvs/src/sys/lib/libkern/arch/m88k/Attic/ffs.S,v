head	1.3;
access;
symbols
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	SMP:1.2.0.2;
locks; strict;
comment	@# @;


1.3
date	2004.04.01.20.39.59;	author miod;	state dead;
branches;
next	1.2;

1.2
date	2004.01.22.20.39.06;	author deraadt;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2004.01.21.14.28.36;	author miod;	state Exp;
branches;
next	;

1.2.2.1
date	2004.02.19.10.57.18;	author niklas;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2004.06.05.23.13.04;	author niklas;	state dead;
branches;
next	;


desc
@@


1.3
log
@It turns out that the so-called fast ffs(3) routines were wrong, as soon as
more than one bit is set, as the ff1 instruction counts from the highest
order.

However, gcc/m88k with optimization enabled would use a correct, short
sequence based upon ff1 and tweaks, to achieve the intended result, hence
i did not catch this flaw initially.

So revert to the C implementation - it is correct, still decently fast, and
will only be used when compiling at -O0.
@
text
@/*	$OpenBSD: ffs.S,v 1.2 2004/01/22 20:39:06 deraadt Exp $	*/

/*
 * Written by Miodrag Vallat, 2004 - Public Domain
 */

#include <machine/asm.h>

ENTRY(ffs)
	bcnd	eq0, r2, 1f	/* ff1(0) = 32, treat differently */
	ff1	r3, r2
	jmp.n	r1
	 add	r2, r3, 1	/* ff1 returns 0-31, need to increment */
1:
	jmp.n	r1
	 or	r2, r0, r0
@


1.2
log
@use C comments, works better
@
text
@d1 1
a1 1
/*	$OpenBSD: ffs.S,v 1.1 2004/01/21 14:28:36 miod Exp $	*/
@


1.2.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.2.2
log
@Merge with the trunk
@
text
@d1 1
a1 1
/*	$OpenBSD: ffs.S,v 1.2.2.1 2004/02/19 10:57:18 niklas Exp $	*/
@


1.1
log
@A faster ffs() routine based upon the ff1 assembly instruction.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d10 1
a10 1
	bcnd	eq0, r2, 1f	! ff1(0) = 32, treat differently
d13 1
a13 1
	 add	r2, r3, 1	! ff1 returns 0-31, need to increment
@

