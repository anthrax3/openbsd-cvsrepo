head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.18
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.14
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.10
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.12
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.4.0.16
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.14
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.12
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.10
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	UBC_SYNC_A:1.3
	UBC_SYNC_B:1.3
	SMP:1.3.0.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	hp-mach:1.1.1.1
	mickey:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2013.06.14.12.45.55;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2013.06.14.12.39.23;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2013.06.11.18.14.57;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.27.12.56.37;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.25.18.25.35;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	99.05.05.03.11.55;	author mickey;	state dead;
branches;
next	1.2;

1.2
date	99.02.07.20.36.17;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.06.23.18.56.53;	author mickey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.06.23.18.56.53;	author mickey;	state Exp;
branches;
next	;


desc
@@


1.8
log
@regen
@
text
@/* This is a generated file. DO NOT EDIT. */
/*
 * Generated from:
 *
 *	OpenBSD: bcopy.m4
 */
/*
 * Copyright (c) 1999 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */



#undef _LOCORE
#define _LOCORE
#include <machine/asm.h>
#include <machine/frame.h>


LEAF_ENTRY(bcopy)
	copy	arg0, ret0
	copy	arg1, arg0
	copy	ret0, arg1
ALTENTRY(memmove)
	comb,>,n arg0, arg1, $bcopy.reverse
ALTENTRY(memcpy)
	copy	arg0, ret0
	
	comib,>=,n 15, arg2, $bcopy_f.byte

	extru	arg1, 31, 2, t3
	extru	arg0, 31, 2, t4
	add	arg2, t4, arg2
	comb,<> t3, t4, $bcopy_f.unaligned
	dep	r0, 31, 2, arg1
	
	addi	-16, arg2, arg2
$bcopy_f.loop16a
	ldws,ma	4(sr0, arg1), t1
	ldws,ma	4(sr0, arg1), t2
	ldws,ma	4(sr0, arg1), t3
	ldws,ma	4(sr0, arg1), t4
	stbys,b,m t1, 4(sr0, arg0)
	stws,ma	t2, 4(sr0, arg0)
	stws,ma	t3, 4(sr0, arg0)
	addib,>= -16, arg2, $bcopy_f.loop16a
	stws,ma	t4, 4(sr0, arg0)

	addib,<,n 12, arg2, $bcopy_f.cleanup
$bcopy_f.word
	ldws,ma	4(sr0, arg1), t1
	addib,>= -4, arg2, $bcopy_f.word
	stws,ma	t1, 4(sr0, arg0)

$bcopy_f.cleanup
	addib,=,n 4, arg2, $bcopy_f.done
	ldws	0(sr0, arg1), t1
	add	arg0, arg2, arg0
	b	$bcopy_f.done
	stbys,e	t1, 0(sr0, arg0)

$bcopy_f.unaligned
	sub,>=	t4, t3, t2
	ldwm	4(sr0, arg1), ret1
	zdep	t2, 28, 29, t1
	mtsar	t1
	
	addi	-16, arg2, arg2
$bcopy_f.loop16u
	ldws,ma	4(sr0, arg1), t1
	ldws,ma	4(sr0, arg1), t2
	ldws,ma	4(sr0, arg1), t3
	ldws,ma	4(sr0, arg1), t4
	vshd	ret1, t1, r31
	stbys,b,m r31, 4(sr0, arg0)
	vshd	t1, t2, r31
	stws,ma	r31, 4(sr0, arg0)
	vshd	t2, t3, r31
	stws,ma	r31, 4(sr0, arg0)
	vshd	t3, t4, r31
	stws,ma	r31, 4(sr0, arg0)
	addib,>= -16, arg2, $bcopy_f.loop16u
	copy	t4, ret1

	addib,<,n 12, arg2, $bcopy_f.cleanup_un
$bcopy_f.word_un
	ldws,ma	4(sr0, arg1), t1
	vshd	ret1, t1, t2
	addib,<	-4, arg2, $bcopy_f.cleanup1_un
	stws,ma	t2, 4(sr0, arg0)
	ldws,ma	4(sr0, arg1), ret1
	vshd	t1, ret1, t2
	addib,>= -4, arg2, $bcopy_f.word_un
	stws,ma	t2, 4(sr0, arg0)

$bcopy_f.cleanup_un
	addib,<=,n 4, arg2, $bcopy_f.done
	mfctl	sar, t4
	add	arg0, arg2, arg0
	extru	t4, 28, 2, t4
	sub,<=	arg2, t4, r0
	ldws,ma	4(sr0, arg1), t1
	vshd	ret1, t1, t2
	b	$bcopy_f.done
	stbys,e	t2, 0(sr0, arg0)

$bcopy_f.cleanup1_un
	b	$bcopy_f.cleanup_un
	copy	t1, ret1

$bcopy_f.byte
	comb,>=,n r0, arg2, $bcopy_f.done
$bcopy_f.byte_loop
	ldbs,ma	1(sr0, arg1), t1
	addib,<> -1, arg2, $bcopy_f.byte_loop
	stbs,ma	t1, 1(sr0, arg0)
$bcopy_f.done

	bv	0(rp)
	nop
$bcopy.reverse
	copy	arg0, ret0
	add	arg1, arg2, arg1
	add	arg0, arg2, arg0


$bcopy_r.byte
	comb,>=,n r0, arg2, $bcopy_r.done
$bcopy_r.byte_loop
	ldbs,mb	-1(sr0, arg1), t1
	addib,<> -1, arg2, $bcopy_r.byte_loop
	stbs,mb	t1, -1(sr0, arg0)
$bcopy_r.done

	bv	0(rp)
	nop
EXIT(bcopy)

	.end
@


1.7
log
@regen
@
text
@a41 1
ALTENTRY(ovbcopy)
@


1.6
log
@regen
@
text
@d49 1
d144 1
@


1.5
log
@Regen.
@
text
@d41 2
a42 2
LEAF_ENTRY(memcpy)
ALTENTRY(memmove)
d46 3
a48 3
ALTENTRY(ovbcopy)
ALTENTRY(bcopy)
	comb,>,n arg1, arg0, $bcopy.reverse
d52 2
a53 2
	extru	arg0, 31, 2, t3
	extru	arg1, 31, 2, t4
d56 1
a56 1
	dep	r0, 31, 2, arg0
d60 7
a66 7
	ldws,ma	4(sr0, arg0), t1
	ldws,ma	4(sr0, arg0), t2
	ldws,ma	4(sr0, arg0), t3
	ldws,ma	4(sr0, arg0), t4
	stbys,b,m t1, 4(sr0, arg1)
	stws,ma	t2, 4(sr0, arg1)
	stws,ma	t3, 4(sr0, arg1)
d68 1
a68 1
	stws,ma	t4, 4(sr0, arg1)
d72 1
a72 1
	ldws,ma	4(sr0, arg0), t1
d74 1
a74 1
	stws,ma	t1, 4(sr0, arg1)
d78 2
a79 2
	ldws	0(sr0, arg0), t1
	add	arg1, arg2, arg1
d81 1
a81 1
	stbys,e	t1, 0(sr0, arg1)
d85 1
a85 1
	ldwm	4(sr0, arg0), ret1
d91 4
a94 4
	ldws,ma	4(sr0, arg0), t1
	ldws,ma	4(sr0, arg0), t2
	ldws,ma	4(sr0, arg0), t3
	ldws,ma	4(sr0, arg0), t4
d96 1
a96 1
	stbys,b,m r31, 4(sr0, arg1)
d98 1
a98 1
	stws,ma	r31, 4(sr0, arg1)
d100 1
a100 1
	stws,ma	r31, 4(sr0, arg1)
d102 1
a102 1
	stws,ma	r31, 4(sr0, arg1)
d108 1
a108 1
	ldws,ma	4(sr0, arg0), t1
d111 2
a112 2
	stws,ma	t2, 4(sr0, arg1)
	ldws,ma	4(sr0, arg0), ret1
d115 1
a115 1
	stws,ma	t2, 4(sr0, arg1)
d120 1
a120 1
	add	arg1, arg2, arg1
d123 1
a123 1
	ldws,ma	4(sr0, arg0), t1
d126 1
a126 1
	stbys,e	t2, 0(sr0, arg1)
d135 1
a135 1
	ldbs,ma	1(sr0, arg0), t1
d137 1
a137 1
	stbs,ma	t1, 1(sr0, arg1)
d143 1
a144 1
	add	arg1, arg2, arg1
d150 1
a150 1
	ldbs,mb	-1(sr0, arg0), t1
d152 1
a152 1
	stbs,mb	t1, -1(sr0, arg1)
d157 1
a157 1
EXIT(memcpy)
@


1.4
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d40 1
d43 1
a43 1
	copy	arg0, t1
d45 1
a45 2
	copy	t1, arg1
	copy	arg0, ret0
@


1.3
log
@no separate bcopy, will be .m4 magic here
@
text
@d1 1
a1 2
/*	$OpenBSD: bcopy.S,v 1.2 1999/02/07 20:36:17 mickey Exp $	*/

d3 1
a3 1
 *  (c) Copyright 1988 HEWLETT-PACKARD COMPANY
d5 1
a5 10
 *  To anyone who acknowledges that this file is provided "AS IS"
 *  without any express or implied warranty:
 *      permission to use, copy, modify, and distribute this file
 *  for any purpose is hereby granted without fee, provided that
 *  the above copyright notice and this notice appears in all
 *  copies, and that the name of Hewlett-Packard Company not be
 *  used in advertising or publicity pertaining to distribution
 *  of the software without specific, written prior permission.
 *  Hewlett-Packard Company makes no representations about the
 *  suitability of this software for any purpose.
a6 1

d8 2
a9 2
 * Copyright (c) 1990,1994 The University of Utah and
 * the Computer Systems Laboratory (CSL).  All rights reserved.
d11 8
a18 3
 * THE UNIVERSITY OF UTAH AND CSL PROVIDE THIS SOFTWARE IN ITS "AS IS"
 * CONDITION, AND DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 * WHATSOEVER RESULTING FROM ITS USE.
d20 10
a29 2
 * CSL requests users of this software to return to csl-dist@@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
a30 2
 * 	Utah $Hdr: bcopy.s 1.10 94/12/14$
 *	Author: Bob Wheeler, University of Utah CSL
d33 4
d38 1
d40 7
a46 20
/*
 * void
 * memcpy(dst, src, count)
 *	vm_offset_t	dst;
 *	vm_offset_t	src;
 *	int		count;
 */
ENTRY(memcpy)
	copy	arg0,arg3
	copy	arg1,arg0
	copy	arg3,arg1
	/* And fall into.... */

/*
 * void 
 * bcopy(src, dst, count)
 *	vm_offset_t	src;
 *	vm_offset_t	dst;
 *	int		count;
 */
d48 110
a157 195
ALTENTRY(ovbcopy)
        comb,>=,n r0,arg2,$bcopy_exit

	/*
	 * See if the source and destination are word aligned and if the count
	 * is an integer number of words. If so then we can use an optimized 
	 * routine. If not then branch to bcopy_checkalign and see what we can
	 * do there.
	 */

        or	arg0,arg1,t1
        or	t1,arg2,t2
        extru,= t2,31,2,r0
        b,n     $bcopy_checkalign

        addib,<,n -16,arg2,$bcopy_movewords

	/*
	 * We can move the data in 4 word moves. We'll use 4 registers to 
	 * avoid interlock and pipeline stalls.
	 */

$bcopy_loop16

        ldwm	16(arg0),t1
        ldw	-12(arg0),t2
        ldw     -8(arg0),t3
        ldw     -4(arg0),t4
        stwm    t1,16(arg1)
        stw     t2,-12(arg1)
        stw     t3,-8(arg1)
        addib,>= -16,arg2,$bcopy_loop16
        stw     t4,-4(arg1)


	/*
	 * We have already decremented the count by 16, add 12 to it and then 
	 * we can test if there is at least 1 word left to move.
	 */

$bcopy_movewords
        addib,<,n 12,arg2,$bcopy_exit

	/*
	 * Clean up any remaining words that were not moved in the 16 byte
	 * moves
	 */

$bcopy_loop4
        ldwm	4(arg0),t1
        addib,>= -4,arg2,$bcopy_loop4
        stwm    t1,4(arg1)

	b,n 	$bcopy_exit


$bcopy_checkalign

	/*
	 * The source or destination is not word aligned or the count is not 
	 * an integral number of words. If we are dealing with less than 16 
	 * bytes then just do it byte by byte. Otherwise, see if the data has 
	 * the same basic alignment. We will add in the byte offset to size to
	 * keep track of what we have to move even though the stbys instruction
	 * won't physically move it. 
	 */

        comib,>= 15,arg2,$bcopy_byte
        extru   arg0,31,2,t1
        extru   arg1,31,2,t2
        add     arg2,t2,arg2
        comb,<> t2,t1,$bcopy_unaligned
        dep     0,31,2,arg0

	/*
	 * the source and destination have the same basic alignment. We will 
	 * move the data in blocks of 16 bytes as long as we can and then 
	 * we'll go to the 4 byte moves.
	 */

        addib,<,n -16,arg2,$bcopy_aligned2

$bcopy_loop_aligned4
        ldwm	16(arg0),t1
        ldw     -12(arg0),t2
        ldw     -8(arg0),t3
        ldw     -4(arg0),t4
        stbys,b,m t1,4(arg1)
        stwm    t2,4(arg1)
        stwm    t3,4(arg1)
        addib,>= -16,arg2,$bcopy_loop_aligned4
        stwm    t4,4(arg1)

	/*
	 * see if there is anything left that needs to be moved in a word move.
	 * Since the count was decremented by 16, add 12 to test if there are 
	 * any full word moves left to do.
	 */

$bcopy_aligned2
        addib,<,n 12,arg2,$bcopy_cleanup

$bcopy_loop_aligned2
        ldws,ma	4(arg0),t1
        addib,>= -4,arg2,$bcopy_loop_aligned2
        stbys,b,m t1,4(arg1)

	/*
	 * move the last bytes that may be unaligned on a word boundary
	 */

$bcopy_cleanup
         addib,=,n 4,arg2,$bcopy_exit
         ldws	0(arg0),t1
         add    arg1,arg2,arg1
         b      $bcopy_exit
         stbys,e t1,0(arg1)

	/*
	 * The source and destination are not alligned on the same boundary 
	 * types. We will have to shift the data around. Figure out the shift 
	 * amount and load it into cr11.
	 */

$bcopy_unaligned
        sub,>=	t2,t1,t3
        ldwm    4(arg0),t1
        zdep    t3,28,29,t4
        mtctl   t4,11

	/*
	 * see if we can do some of this work in blocks of 16 bytes
	 */

        addib,<,n -16,arg2,$bcopy_unaligned_words

$bcopy_unaligned4
        ldwm	16(arg0),t2
	ldw	-12(arg0),t3
	ldw	-8(arg0),t4
	ldw	-4(arg0),r1
        vshd	t1,t2,r28
        stbys,b,m r28,4(arg1)
        vshd	t2,t3,r28
        stwm	r28,4(arg1)
        vshd	t3,t4,r28
        stwm	r28,4(arg1)
        vshd	t4,r1,r28
        stwm   	r28,4(arg1)
        addib,>= -16,arg2,$bcopy_unaligned4
	copy	r1,t1

	/*
	 * see if there is a full word that we can transfer
	 */

$bcopy_unaligned_words
        addib,<,n 12,arg2,$bcopy_unaligned_cleanup1

$bcopy_unaligned_loop
        ldwm	4(arg0),t2
        vshd    t1,t2,t3
        addib,< -4,arg2,$bcopy_unaligned_cleanup2
        stbys,b,m t3,4(arg1)

        ldwm	4(arg0),t1
        vshd    t2,t1,t3
        addib,>= -4,arg2,$bcopy_unaligned_loop
        stbys,b,m t3,4(arg1)

$bcopy_unaligned_cleanup1
	copy	t1,t2

$bcopy_unaligned_cleanup2
	addib,<=,n 4,arg2,$bcopy_exit
        add	arg1,arg2,arg1
	mfctl	sar,t3
	extru	t3,28,2,t3
	sub,<=	arg2,t3,r0
        ldwm    4(arg0),t1
        vshd    t2,t1,t3
        b       $bcopy_exit
        stbys,e t3,0(arg1)

	/*
	 * move data one byte at a time
	 */

$bcopy_byte
        comb,>=,n r0,arg2,$bcopy_exit

$bcopy_loop_byte
        ldbs,ma	1(arg0),t1
        addib,> -1,arg2,$bcopy_loop_byte
        stbs,ma t1,1(arg1) 
d159 1
a159 2
$bcopy_exit
EXIT(bcopy)
@


1.2
log
@add ovbcopy
@
text
@d1 1
a1 1
/*	$OpenBSD: bcopy.S,v 1.1.1.1 1998/06/23 18:56:53 mickey Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d56 1
@


1.1.1.1
log
@initial import
@
text
@@
