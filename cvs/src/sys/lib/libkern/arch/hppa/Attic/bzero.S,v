head	1.4;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	UBC_SYNC_A:1.4
	UBC_SYNC_B:1.4
	SMP:1.3.0.4
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	hp-mach:1.1.1.1
	mickey:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2000.04.25.15.28.23;	author mickey;	state dead;
branches;
next	1.3;

1.3
date	99.09.14.00.50.31;	author mickey;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	99.05.09.18.49.10;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.06.23.18.56.53;	author mickey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.06.23.18.56.53;	author mickey;	state Exp;
branches;
next	;

1.3.4.1
date	2001.05.14.22.32.49;	author niklas;	state dead;
branches;
next	;


desc
@@


1.4
log
@screw .S version memset does same job...
@
text
@/*	$OpenBSD: bzero.S,v 1.3 1999/09/14 00:50:31 mickey Exp $	*/

/*
 *  (c) Copyright 1988 HEWLETT-PACKARD COMPANY
 *
 *  To anyone who acknowledges that this file is provided "AS IS"
 *  without any express or implied warranty:
 *      permission to use, copy, modify, and distribute this file
 *  for any purpose is hereby granted without fee, provided that
 *  the above copyright notice and this notice appears in all
 *  copies, and that the name of Hewlett-Packard Company not be
 *  used in advertising or publicity pertaining to distribution
 *  of the software without specific, written prior permission.
 *  Hewlett-Packard Company makes no representations about the
 *  suitability of this software for any purpose.
 */

/*
 * Copyright (c) 1990,1994 The University of Utah and
 * the Computer Systems Laboratory (CSL).  All rights reserved.
 *
 * THE UNIVERSITY OF UTAH AND CSL PROVIDE THIS SOFTWARE IN ITS "AS IS"
 * CONDITION, AND DISCLAIM ANY LIABILITY OF ANY KIND FOR ANY DAMAGES
 * WHATSOEVER RESULTING FROM ITS USE.
 *
 * CSL requests users of this software to return to csl-dist@@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 *
 * 	Utah $Hdr: bzero.s 1.9 94/12/14$
 *	Author: Bob Wheeler, University of Utah CSL
 */

#include <machine/asm.h>

/*
 * void 
 * blkclr(dst, count)
 *	void	*dst;
 *	u_int	count;
 */
ENTRY(blkclr)

/*
 * void 
 * bzero(dst, count)
 *	vm_offset_t	dst;
 *	int		count;
 */
ALTENTRY(bzero)
	comb,>=,n r0,arg1,$bzero_exit

	/*
	 * If we need to clear less than a word do it a byte at a time
	 */

	comib,>,n 4,arg1,$bzero_bytes

	/*
	 * Since we are only clearing memory the alignment restrictions 
	 * are simplified. Figure out how many "extra" bytes we need to
	 * store with stbys.
	 */

	extru	arg0,31,2,t2
	add	arg1,t2,arg1

	/*
	 * We will zero the destination in blocks of 16 bytes as long as we 
	 * can and then we'll go to the 4 byte moves.
	 */

	addib,<,n -16,arg1,$bzero_word

$bzero_loop_16
	stbys,b,m r0,4(arg0)
	stwm	r0,4(arg0)
	stwm	r0,4(arg0)
	addib,>= -16,arg1,$bzero_loop_16
	stwm	r0,4(arg0)

	/*
	 * see if there is anything left that needs to be zeroed in a word 
	 * move. Since the count was decremented by 16, add 12 to test if 
	 * there are any full word moves left to do.
	 */

$bzero_word
	addib,<,n 12,arg1,$bzero_cleanup

$bzero_loop_4
	addib,>= -4,arg1,$bzero_loop_4
	stbys,b,m r0,4(arg0)

	/*
	 * zero the last bytes that may be unaligned on a word boundary
	 */

$bzero_cleanup
	addib,=,n 4,arg1,$bzero_exit
	add	arg0,arg1,arg0
	b	$bzero_exit
	stbys,e	r0,0(arg0)
	b,n	$bzero_exit


	/*
	 * zero by bytes
	 */

$bzero_bytes
	addib,> -1,arg1,$bzero_bytes
	stbs,ma r0,1(arg0) 

$bzero_exit
	bv	0(rp)
	nop

EXIT(bzero)

	.end
@


1.3
log
@tabs vs spaces
@
text
@d1 1
a1 1
/*	$OpenBSD: bzero.S,v 1.2 1999/05/09 18:49:10 mickey Exp $	*/
@


1.3.4.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: bzero.S,v 1.3 1999/09/14 00:50:31 mickey Exp $	*/
@


1.2
log
@fix EXIT() usage, appen .end
@
text
@d1 1
a1 1
/*	$OpenBSD: bzero.S,v 1.1.1.1 1998/06/23 18:56:53 mickey Exp $	*/
d50 1
a50 1
        comb,>=,n r0,arg1,$bzero_exit
d64 2
a65 2
        extru   arg0,31,2,t2
        add     arg1,t2,arg1
d72 1
a72 1
        addib,<,n -16,arg1,$bzero_word
d75 5
a79 5
        stbys,b,m r0,4(arg0)
        stwm    r0,4(arg0)
        stwm    r0,4(arg0)
        addib,>= -16,arg1,$bzero_loop_16
        stwm    r0,4(arg0)
d88 1
a88 1
        addib,<,n 12,arg1,$bzero_cleanup
d91 2
a92 2
        addib,>= -4,arg1,$bzero_loop_4
        stbys,b,m r0,4(arg0)
d99 4
a102 4
        addib,=,n 4,arg1,$bzero_exit
        add	arg0,arg1,arg0
        b       $bzero_exit
        stbys,e r0,0(arg0)
d111 2
a112 2
        addib,> -1,arg1,$bzero_bytes
        stbs,ma r0,1(arg0) 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d115 3
d119 2
@


1.1.1.1
log
@initial import
@
text
@@
