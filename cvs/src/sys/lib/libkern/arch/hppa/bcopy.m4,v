head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.16
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.14
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.10
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.22.0.12
	OPENBSD_5_8_BASE:1.22
	OPENBSD_5_7:1.22.0.4
	OPENBSD_5_7_BASE:1.22
	OPENBSD_5_6:1.22.0.8
	OPENBSD_5_6_BASE:1.22
	OPENBSD_5_5:1.22.0.6
	OPENBSD_5_5_BASE:1.22
	OPENBSD_5_4:1.22.0.2
	OPENBSD_5_4_BASE:1.22
	OPENBSD_5_3:1.19.0.6
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.4
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.2
	OPENBSD_5_0:1.17.0.16
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.14
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.12
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.8
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.10
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.6
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.4
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.2
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.16.0.2
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.15.0.8
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.6
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.4
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.2
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.14.0.8
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.6
	OPENBSD_3_6_BASE:1.14
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	UBC_SYNC_A:1.13
	OPENBSD_3_3:1.13.0.4
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.2
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.13
	UBC:1.7.0.4
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.2
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3;
locks; strict;
comment	@# @;


1.22
date	2013.06.14.12.45.18;	author kettenis;	state Exp;
branches;
next	1.21;

1.21
date	2013.06.14.12.39.04;	author kettenis;	state Exp;
branches;
next	1.20;

1.20
date	2013.06.11.18.13.38;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2011.11.27.12.56.18;	author kettenis;	state Exp;
branches;
next	1.18;

1.18
date	2011.11.27.12.51.21;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2007.11.24.19.42.00;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2007.05.14.19.54.21;	author martin;	state Exp;
branches;
next	1.15;

1.15
date	2005.08.01.12.10.26;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.04.04.44.21;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.08.27.16.29.22;	author mickey;	state Exp;
branches;
next	1.12;

1.12
date	2002.08.13.05.24.22;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.20.08.32.28;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.08.06.17.42;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.08.05.56.09;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.07.13.53.07;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.20.18.37.30;	author mickey;	state Exp;
branches
	1.7.4.1;
next	1.6;

1.6
date	2001.06.04.23.15.49;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.02.01.08.05;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	99.12.05.02.38.09;	author mickey;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	99.09.14.00.51.19;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	99.06.10.19.52.23;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	99.05.19.17.10.51;	author mickey;	state Exp;
branches;
next	;

1.4.2.1
date	2001.05.14.22.32.49;	author niklas;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2001.07.04.10.49.00;	author niklas;	state Exp;
branches;
next	1.4.2.3;

1.4.2.3
date	2001.10.31.03.26.30;	author nate;	state Exp;
branches;
next	1.4.2.4;

1.4.2.4
date	2002.03.06.02.13.24;	author niklas;	state Exp;
branches;
next	1.4.2.5;

1.4.2.5
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.4.2.6;

1.4.2.6
date	2003.03.28.00.41.27;	author niklas;	state Exp;
branches;
next	1.4.2.7;

1.4.2.7
date	2003.06.07.11.03.41;	author ho;	state Exp;
branches;
next	;

1.7.4.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	1.7.4.2;

1.7.4.2
date	2002.10.29.00.36.45;	author art;	state Exp;
branches;
next	;


desc
@@


1.22
log
@ovbcopy begone
@
text
@define(_rcsid,``$OpenBSD: bcopy.m4,v 1.21 2013/06/14 12:39:04 kettenis Exp $'')dnl
dnl
dnl
dnl  This is the source file for bcopy.S, spcopy.S
dnl
dnl
define(`versionmacro',substr(_rcsid,1,eval(len(_rcsid)-2)))dnl
dnl
/* This is a generated file. DO NOT EDIT. */
/*
 * Generated from:
 *
 *	versionmacro
 */
/*
 * Copyright (c) 1999 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

dnl
dnl    macro: L(`arg1',`arg2')
dnl synopsis: creates an assembly label based on args resulting in $arg1.arg2
dnl
define(`L', `$$1.$2')dnl
dnl
dnl
dnl
define(`STWS',`ifelse($5, `u',dnl
`ifelse($1, `1', `vshd	$4, t`$1', r31
	stbys,B,m r31, F`'4($2, $3)',
`0', `0', `vshd	t`'decr($1), t`$1', r31
	stws,M	r31, F`'4($2, $3)')',dnl
`0', `0',
`ifelse($1, `1',
`stbys,B`'ifelse(B, `b', `,m ', `0', `0', `	')`'t`$1', F`'4($2, $3)',
`0', `0', `stws,M	t`$1', F`'4($2, $3)')')')dnl
define(`STWSS', `ifelse(`$3', `1', `dnl',
`0', `0', `STWSS($1, $2, eval($3 - 1), $4, $5)')
	STWS($3, $1, $2, $4, $5)dnl
')dnl
define(`LDWSS', `ifelse(`$3', `1', `dnl',
`0', `0', `LDWSS($1, $2, eval($3 - 1))')
	ldws,M	F`'4($1, $2), t`'$3`'dnl
')dnl
dnl
dnl copy data in 4-words blocks
dnl
define(`hppa_blcopy',`
	addi	-16, $6, $6
L($1, `loop16'`$7')
dnl	cache hint may not work on some hardware
dnl	ldw	F 32($2, $3), r0
ifelse(F, `-', `dnl
	addi	F`'4, $5, $5', `0', `0', `dnl')
LDWSS($2, $3, 4)
STWSS($4, $5, 3, `ret1', $7)
ifelse($7, `u', `dnl
	STWS(4, $4, $5, `ret1', $7)', $7, `a', `dnl')
	addib,>= -16, $6, L($1, `loop16'`$7')
ifelse($7, `a', `dnl
	STWS(4, $4, $5, `ret1', $7)dnl
', $7, `u', `dnl
	copy	t4, ret1')')dnl
dnl
dnl copy in words
dnl
define(`STWL', `addib,<,n 12, $6, L($1, cleanup)
ifelse($7, `u', `	copy	ret1, t1', $7, `a', `dnl')
L($1, word)
	ldws,M	F`'4($2, $3), t1
	addib,>= -4, $6, L($1, word)
	stws,M	t1, F`'4($4, $5)

L($1, cleanup)
	addib,=,n 4, $6, L($1, done)
	ldws	0($2, $3), t1
	add	$5, $6, $5
	b	L($1, done)
	stbys,E	t1, 0($4, $5)
')
dnl
dnl
dnl parameters:
dnl  $1	name
dnl  $2	source space
dnl  $3	source address
dnl  $4	destination space
dnl  $5	destination address
dnl  $6	length
dnl  $7	direction
dnl
define(hppa_copy,
`dnl
dnl
dnl	if direction is `-' (backwards copy), adjust src, dst
dnl
ifelse($7,`-', `add	$3, $6, $3
	add	$5, $6, $5
define(`F', `-')dnl
define(`R', `')dnl
define(`M', `mb')dnl
define(`B', `e')dnl
define(`E', `b')dnl
',dnl ifelse
`0',`0',
`define(`F', `')dnl
define(`R', `-')dnl
define(`M', `ma')dnl
define(`B', `b')dnl
define(`E', `e')dnl
')dnl ifelse

ifelse($7,`-', `', `0',`0',
`	comib,>=,n 15, $6, L($1, byte)

	extru	$3, 31, 2, t3
	extru	$5, 31, 2, t4
	add	$6, t4, $6
	comb,<> t3, t4, L($1, unaligned)
	dep	r0, 31, 2, $3
	hppa_blcopy($1, $2, $3, $4, $5, $6, `a')

	STWL($1, $2, $3, $4, $5, $6, `a')dnl

L($1, unaligned)
	sub,>=	t4, t3, t2
	ldwm	F`'4($2, $3), ret1
	zdep	t2, 28, 29, t1
	mtsar	t1
	hppa_blcopy($1, $2, $3, $4, $5, $6, `u')

dnl	STWL($1, $2, $3, $4, $5, $6, `u')
	addib,<,n 12, $6, L($1, cleanup_un)
L($1, word_un)
	ldws,M	F`'4($2, $3), t1
	vshd	ret1, t1, t2
	addib,<	-4, $6, L($1, cleanup1_un)
	stws,M	t2, F`'4($4, $5)
	ldws,M	F`'4($2, $3), ret1
	vshd	t1, ret1, t2
	addib,>= -4, $6, L($1, word_un)
	stws,M	t2, F`'4($4, $5)

L($1, cleanup_un)
	addib,<=,n 4, $6, L($1, done)
	mfctl	sar, t4
	add	$5, $6, $5
	extru	t4, 28, 2, t4
	sub,<=	$6, t4, r0
	ldws,M	F`'4($2, $3), t1
	vshd	ret1, t1, t2
	b	L($1, done)
	stbys,E	t2, 0($4, $5)

L($1, cleanup1_un)
	b	L($1, cleanup_un)
	copy	t1, ret1
')dnl ifelse

L($1, byte)
	comb,>=,n r0, $6, L($1, done)
L($1, byte_loop)
	ldbs,M	F`'1($2, $3), t1
	addib,<> -1, $6, L($1, byte_loop)
	stbs,M	t1, F`'1($4, $5)
L($1, done)
')dnl
`
#undef _LOCORE
#define _LOCORE
#include <machine/asm.h>
#include <machine/frame.h>
'
ifelse(NAME, `bcopy',
`
LEAF_ENTRY(bcopy)
	copy	arg0, ret0
	copy	arg1, arg0
	copy	ret0, arg1
ALTENTRY(memmove)
	comb,>,n arg0, arg1, L(bcopy, reverse)
ALTENTRY(memcpy)
	copy	arg0, ret0
	hppa_copy(bcopy_f, sr0, arg1, sr0, arg0, arg2, `+')
	bv	0(rp)
	nop
L(bcopy, reverse)
	copy	arg0, ret0
	hppa_copy(bcopy_r, sr0, arg1, sr0, arg0, arg2, `-')
	bv	0(rp)
	nop
EXIT(bcopy)
')dnl
dnl
ifelse(NAME, `spcopy',
`
#ifdef _KERNEL
#include <assym.h>

/*
 * int spcopy (pa_space_t ssp, const void *src, pa_space_t dsp, void *dst,
 *              size_t size)
 * do a space to space bcopy.
 *
 * assumes that spaces do not clash, otherwise we lose
 */
	.import	copy_on_fault, code

LEAF_ENTRY(spcopy)
	ldw	HPPA_FRAME_ARG(4)(sp), ret0
	sub,<>	r0, ret0, r0
	bv	r0(rp)
	nop
`
	ldo	64(sp), sp
	stw	rp, HPPA_FRAME_CRP(sp)
	/* setup fault handler */
	mfctl	cr29, t1
	ldw	CI_CURPROC(t1), t3
	ldil	L%copy_on_fault, t2
	ldw	P_ADDR(t3), r2
	ldo	R%copy_on_fault(t2), t2
	ldw	PCB_ONFAULT+U_PCB(r2), r1
	stw	t2, PCB_ONFAULT+U_PCB(r2)
'
	mtsp	arg0, sr1
	mtsp	arg2, sr2

	hppa_copy(spcopy, sr1, arg1, sr2, arg3, ret0, `+')

	mtsp	r0, sr1
	mtsp	r0, sr2
	/* reset fault handler */
	stw	r1, PCB_ONFAULT+U_PCB(r2)
	ldw	HPPA_FRAME_CRP(sp), rp
	ldo	-64(sp), sp
	bv	0(rp)
	copy	r0, ret0
EXIT(spcopy)
#endif
')dnl

	.end
@


1.21
log
@Fix memcpy/memmove return value.
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.20 2013/06/11 18:13:38 kettenis Exp $'')dnl
a197 1
ALTENTRY(ovbcopy)
@


1.20
log
@Optimize memcpy(9) by always doing a forward copy; it should never be used
for overlapping copies.  Attempt to be instruction cache friendly by turning
things around and make memcpy(9) use the forward copy branch of memmove(9),
and implement bcopy(9) by swapping its arguments and dropping into memmove(9).

ok deraadt@@
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.19 2011/11/27 12:56:18 kettenis Exp $'')dnl
d205 1
d210 1
@


1.19
log
@Fix return value of memcpy.
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.18 2011/11/27 12:51:21 kettenis Exp $'')dnl
d197 2
a198 2
LEAF_ENTRY(memcpy)
ALTENTRY(memmove)
d202 4
a205 4
ALTENTRY(ovbcopy)
ALTENTRY(bcopy)
	comb,>,n arg1, arg0, L(bcopy, reverse)
	hppa_copy(bcopy_f, sr0, arg0, sr0, arg1, arg2, `+')
d209 1
a209 1
	hppa_copy(bcopy_r, sr0, arg0, sr0, arg1, arg2, `-')
d212 1
a212 1
EXIT(memcpy)
@


1.18
log
@Oops, jsing@@ changed spcopy.S without realizing that that file is generated
from bcopy.m4.  Fix that.
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.17 2007/11/24 19:42:00 deraadt Exp $'')dnl
d199 1
a199 1
	copy	arg0, t1
d201 1
a201 2
	copy	t1, arg1
	copy	arg0, ret0
@


1.17
log
@junk SCCS
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.16 2007/05/14 19:54:21 martin Exp $'')dnl
a227 2
	.import	curproc, data
	.import cpu_info_primary, data
a229 2
#define curproc	(cpu_info_primary + CI_CURPROC)

d239 2
a240 2
	ldil	L%curproc, t1
	ldw	R%curproc(t1), t3
@


1.16
log
@move hppa to __HAVE_CPUINFO

input from miod@@, ok kettenis@@
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.15 2005/08/01 12:10:26 miod Exp $'')dnl
a196 6
#if defined(LIBC_SCCS)
	.text
	.asciz "versionmacro"
	.align	4
#endif

@


1.15
log
@I'm Positive these are Type-O.
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.14 2003/06/04 04:44:21 deraadt Exp $'')dnl
d235 1
d237 3
@


1.14
log
@another 3/4
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.13 2002/08/27 16:29:22 mickey Exp $'')dnl
d232 1
a232 1
 * assumed that spaces do not clash, otherwise we loose
@


1.13
log
@do not just bail out of the copy loop, but go to the
'done' label for the job finish.
major register missallocation for copyonfault, fix it.
clean the space regs after use.
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.12 2002/08/13 05:24:22 mickey Exp $'')dnl
a26 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.12
log
@sync
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.10 2002/08/13 05:23:06 mickey Exp $'')dnl
d104 1
a104 1
	bv	r0(rp)
d178 1
a178 1
	bv	r0(rp)
d218 2
a219 1
	b,n	L(bcopy, ret)
a221 1
L(bcopy, ret)
d242 4
a245 2
	ldw	HPPA_FRAME_ARG(4)(sp), ret1
	comb,>=,n r0, ret1, L(spcopy, ret)
d247 2
d250 2
a251 2
	ldil	L%curproc, r31
	ldw	R%curproc(r31), r31
d253 1
a253 1
	ldw	P_ADDR(r31), t4
d255 2
a256 2
	ldw	PCB_ONFAULT+U_PCB(t4), r1
	stw	t2, PCB_ONFAULT+U_PCB(t4)
a257 1
	mfsp	sr2, ret0	/* XXX need this?, sr1 is scratchable */
a259 1
	copy	ret1, arg0	/* ret1 is used in hppa`'_blcopy() */
d261 1
a261 1
	hppa_copy(spcopy, sr1, arg1, sr2, arg3, ret1, `+')
d263 2
d266 3
a268 3
	stw	r1, PCB_ONFAULT+U_PCB(r31)
	mtsp	ret0, sr2
L(spcopy, ret)
@


1.11
log
@sync
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.9 2002/05/20 08:31:35 mickey Exp $'')dnl
d249 1
a249 1
	ldw	P_ADDR(r31), r31
d251 2
a252 2
	ldw	PCB_ONFAULT+U_PCB(r31), r1
	stw	t2, PCB_ONFAULT+U_PCB(r31)
@


1.10
log
@sync
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.8 2002/03/08 06:17:09 mickey Exp $'')dnl
d251 1
d262 1
a262 1
	stw	r0, PCB_ONFAULT+U_PCB(r31)
@


1.9
log
@sync
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.7 2002/03/08 05:55:25 mickey Exp $'')dnl
d216 1
a216 1
	comb,>,n arg0, arg1, L(bcopy, reverse)
@


1.8
log
@sync
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.6 2002/02/07 13:52:40 mickey Exp $'')dnl
d213 1
d216 1
a216 4
ALTENTRY(mycopy)
	add	arg0, arg2, t1
	sub,>>=	arg0, arg1, r0
	comb,>,n t1, arg1, L(bcopy, reverse)
@


1.7
log
@sync
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.5 2001/09/20 18:34:52 mickey Exp $'')dnl
d217 1
@


1.7.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.7 2001/09/20 18:37:30 mickey Exp $'')dnl
a212 1
	copy	arg0, ret0
d215 3
a217 1
	comb,>,n arg1, arg0, L(bcopy, reverse)
a251 1
	ldw	PCB_ONFAULT+U_PCB(r31), r1
d262 1
a262 1
	stw	r1, PCB_ONFAULT+U_PCB(r31)
@


1.7.4.2
log
@sync to -current
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.7.4.1 2002/06/11 03:30:09 art Exp $'')dnl
d104 1
a104 1
	b	L($1, done)
d178 1
a178 1
	b	L($1, done)
d218 1
a218 2
	bv	0(rp)
	nop
d221 1
d242 2
a243 4
	ldw	HPPA_FRAME_ARG(4)(sp), ret0
	sub,<>	r0, ret0, r0
	bv	r0(rp)
	nop
a244 2
	ldo	64(sp), sp
	stw	rp, HPPA_FRAME_CRP(sp)
d246 2
a247 2
	ldil	L%curproc, t1
	ldw	R%curproc(t1), t3
d249 1
a249 1
	ldw	P_ADDR(t3), r2
d251 2
a252 2
	ldw	PCB_ONFAULT+U_PCB(r2), r1
	stw	t2, PCB_ONFAULT+U_PCB(r2)
d254 1
d257 1
d259 1
a259 1
	hppa_copy(spcopy, sr1, arg1, sr2, arg3, ret0, `+')
a260 2
	mtsp	r0, sr1
	mtsp	r0, sr2
d262 3
a264 3
	stw	r1, PCB_ONFAULT+U_PCB(r2)
	ldw	HPPA_FRAME_CRP(sp), rp
	ldo	-64(sp), sp
@


1.6
log
@export these from libc
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.4 2001/06/04 23:14:02 mickey Exp $'')dnl
d250 1
a250 1
	ldw	p_addr(r31), r31
d252 1
a252 1
	stw	t2, pcb_onfault+u_pcb(r31)
d262 1
a262 1
	stw	r0, pcb_onfault+u_pcb(r31)
@


1.5
log
@sync w/ libc
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.3 2000/01/12 00:08:41 mickey Exp $'')dnl
d208 1
a208 1
ENTRY(memcpy)
d242 1
a242 1
ENTRY(spcopy)
@


1.4
log
@fix space regs load insns, also some tabs vs spaces
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.3 1999/09/14 00:51:19 mickey Exp $'')dnl
d205 1
@


1.4.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.5 2000/07/02 01:08:05 mickey Exp $'')dnl
a204 1
	.align	4
@


1.4.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.4.2.1 2001/05/14 22:32:49 niklas Exp $'')dnl
d208 1
a208 1
LEAF_ENTRY(memcpy)
d242 1
a242 1
LEAF_ENTRY(spcopy)
@


1.4.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.4.2.2 2001/07/04 10:49:00 niklas Exp $'')dnl
d250 1
a250 1
	ldw	P_ADDR(r31), r31
d252 1
a252 1
	stw	t2, PCB_ONFAULT+U_PCB(r31)
d262 1
a262 1
	stw	r0, PCB_ONFAULT+U_PCB(r31)
@


1.4.2.4
log
@Merge in trunk
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD$'')dnl
a216 1
	sub,>>=	arg0, arg1, r0
@


1.4.2.5
log
@Merge in -current from roughly a week ago
@
text
@a212 1
	copy	arg0, ret0
d215 4
a218 1
	comb,>,n arg1, arg0, L(bcopy, reverse)
@


1.4.2.6
log
@Sync the SMP branch with 3.3
@
text
@d104 1
a104 1
	b	L($1, done)
d178 1
a178 1
	b	L($1, done)
d218 1
a218 2
	bv	0(rp)
	nop
d221 1
d242 2
a243 4
	ldw	HPPA_FRAME_ARG(4)(sp), ret0
	sub,<>	r0, ret0, r0
	bv	r0(rp)
	nop
a244 2
	ldo	64(sp), sp
	stw	rp, HPPA_FRAME_CRP(sp)
d246 2
a247 2
	ldil	L%curproc, t1
	ldw	R%curproc(t1), t3
d249 1
a249 1
	ldw	P_ADDR(t3), r2
d251 1
a251 2
	ldw	PCB_ONFAULT+U_PCB(r2), r1
	stw	t2, PCB_ONFAULT+U_PCB(r2)
d253 1
d256 1
d258 1
a258 1
	hppa_copy(spcopy, sr1, arg1, sr2, arg3, ret0, `+')
a259 2
	mtsp	r0, sr1
	mtsp	r0, sr2
d261 3
a263 3
	stw	r1, PCB_ONFAULT+U_PCB(r2)
	ldw	HPPA_FRAME_CRP(sp), rp
	ldo	-64(sp), sp
@


1.4.2.7
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.4.2.6 2003/03/28 00:41:27 niklas Exp $'')dnl
d27 5
@


1.3
log
@bew frame framework
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.2 1999/06/10 19:52:23 mickey Exp $'')dnl
d55 1
a55 1
`ifelse($1, `1', `vshd     $4, t`$1', r31
d69 1
a69 1
	ldws,M  F`'4($1, $2), t`'$3`'dnl
d203 1
a203 1
        .text
d242 1
a242 1
	ldw     HPPA_FRAME_ARG(4)(sp), ret1
d246 6
a251 6
	ldil    L%curproc, r31
	ldw     R%curproc(r31), r31
	ldil    L%copy_on_fault, t2
	ldw     p_addr(r31), r31
	ldo     R%copy_on_fault(t2), t2
	stw     t2, pcb_onfault+u_pcb(r31)
d253 4
a256 4
	mfctl   sr2, ret0       /* XXX need this?, sr1 is scratchable */
	mtctl   arg0, sr1
	mtctl   arg2, sr2
	copy	ret1, arg0	/* ret1 is used in hppa_blcopy() */
d261 2
a262 2
	stw     r0, pcb_onfault+u_pcb(r31)
	mtctl   ret0, sr2
d264 2
a265 2
	bv      0(rp)
	copy    r0, ret0
@


1.2
log
@fix unaligned copy's end condition
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD: bcopy.m4,v 1.1 1999/05/19 17:10:51 mickey Exp $'')dnl
d195 2
d198 1
d242 1
a242 1
	ldw     VA_ARG4(sp), ret1
@


1.1
log
@bcopy() and space-space bcopy()
@
text
@d1 1
a1 1
define(_rcsid,``$OpenBSD$'')dnl
d75 1
a78 1
dnl
d93 2
a94 2
define(`STWL', `addib,< 12, $6, L($1, byte)
	ifelse($7, `u', `copy	ret1, t1', $7, `a', `nop')
d96 1
a96 1
	ldws,M	F 4($2, $3), t1
d98 1
a98 1
	stws,M	t1, F 4($4, $5)
d100 6
a105 1
	b,n	L($1, byte)
d144 1
a144 1
	add	$6, t3, $6
d149 1
a149 1
	STWL($1, $2, $3, $4, $5, $6, `a')
d159 1
d161 23
a183 8
	ldwm	F`'4($2, $3), t2
	vshd	ret1, t2, t3
	addib,<	R`'4, $6, L($1, byte)
	stbys,B,m t3, F`'4($4, $5)
	ldwm	F`'4($2, $3), ret1
	vshd	t2, ret1, t3
	addib,> R`'4, $6, L($1, word_un)
	stbys,B,m t3, F`'4($4, $5)
@

