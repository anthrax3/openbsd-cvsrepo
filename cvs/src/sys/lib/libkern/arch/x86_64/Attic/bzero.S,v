head	1.2;
access;
symbols
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	SMP:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2004.02.27.17.36.16;	author deraadt;	state dead;
branches;
next	1.1;

1.1
date	2004.01.28.01.39.40;	author mickey;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.19.10.57.18;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.06.05.23.13.04;	author niklas;	state dead;
branches;
next	;


desc
@@


1.2
log
@change amd64's MACHINE_ARCH from x86_64 to amd64.  There are many many
reasons for this, quite a few of them technical, and not all of them
in response to Intel's broken ia32e crud.  The gcc toolchain stays at
x86_64 for now.
@
text
@/*
 * Written by J.T. Conklin <jtc@@netbsd.org>.
 * Public domain.
 * Adapted for NetBSD/x86_64 by Frank van der Linden <fvdl@@wasabisystems.com>
 */

#include <machine/asm.h>

#if defined(LIBC_SCCS)
	RCSID("$NetBSD: bzero.S,v 1.1 2001/06/19 00:22:45 fvdl Exp $")
#endif

ENTRY(bzero)
	movq	%rsi,%rdx

	cld				/* set fill direction forward */
	xorq	%rax,%rax		/* set fill data to 0 */

	/*
	 * if the string is too short, it's really not worth the overhead
	 * of aligning to word boundries, etc.  So we jump to a plain
	 * unaligned set.
	 */
	cmpq	$16,%rdx
	jb	L1

	movq	%rdi,%rcx		/* compute misalignment */
	negq	%rcx
	andq	$7,%rcx
	subq	%rcx,%rdx
	rep				/* zero until word aligned */
	stosb

	movq	%rdx,%rcx		/* zero by words */
	shrq	$3,%rcx
	andq	$7,%rdx
	rep
	stosq

L1:	movq	%rdx,%rcx		/* zero remainder by bytes */
	rep
	stosb

	ret
@


1.1
log
@an amd64 arch support.
hacked by art@@ from netbsd sources and then later debugged
by me into the shape where it can host itself.
no bootloader yet as needs redoing from the
recent advanced i386 sources (anyone? ;)
@
text
@@


1.1.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@@


1.1.2.2
log
@Merge with the trunk
@
text
@@


