head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.8
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.6.0.6
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.4
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.2.0.22
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.20
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.18
	OPENBSD_5_0:1.2.0.16
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.14
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.12
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.10
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@# @;


1.7
date	2014.11.29.18.51.23;	author tedu;	state Exp;
branches;
next	1.6;
commitid	OHZvmZCZEaea0ayc;

1.6
date	2014.01.09.05.39.41;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.15.19.45.26;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.13.02.26.15;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.03.05.39.02;	author tedu;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.28.11.46.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.25.18.25.35;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@it should not be necessary to clear the direction flag
ok deraadt
@
text
@/*	$OpenBSD: memmove.S,v 1.6 2014/01/09 05:39:41 tedu Exp $	*/

/*-
 * Copyright (c) 1993, 1994, 1995 Charles M. Hannum.  All rights reserved.
 * Copyright (c) 1990 The Regents of the University of California.
 * All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * William Jolitz.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <machine/param.h>
#include <machine/asm.h>

/*
 * Emulate bcopy() by swapping the first two arguments, and jumping
 * into memmove(), which handles overlapping regions.
 */
ENTRY(bcopy)
	pushl	%esi
	pushl	%edi
	movl	12(%esp),%esi
	movl	16(%esp),%edi
	jmp	docopy

/*
 * memmove(caddr_t dst, caddr_t src, size_t len);
 * Copy len bytes, coping with overlapping space.
 */
ENTRY(memmove)
	pushl	%esi
	pushl	%edi
	movl	12(%esp),%edi
	movl	16(%esp),%esi
docopy:
	movl	20(%esp),%ecx
	movl	%edi,%eax
	subl	%esi,%eax
	cmpl	%ecx,%eax		# overlapping?
	jb	1f
	jmp	docopyf			# nope
/*
 * memcpy() doesn't worry about overlap and always copies forward
 */
ENTRY(memcpy)
	pushl	%esi
	pushl	%edi
	movl	12(%esp),%edi
	movl	16(%esp),%esi
	movl	20(%esp),%ecx
docopyf:
	movl	%edi,%eax		# setup return value for memcpy/memmove
	shrl	$2,%ecx			# copy by 32-bit words
	rep
	movsl
	movl	20(%esp),%ecx
	andl	$3,%ecx			# any bytes left?
	rep
	movsb
	popl	%edi
	popl	%esi
	ret

	_ALIGN_TEXT
1:	movl	%edi,%eax		# setup return value for memmove
	addl	%ecx,%edi		# copy backward
	addl	%ecx,%esi
	std
	andl	$3,%ecx			# any fractional bytes?
	decl	%edi
	decl	%esi
	rep
	movsb
	movl	20(%esp),%ecx		# copy remainder by 32-bit words
	shrl	$2,%ecx
	subl	$3,%esi
	subl	$3,%edi
	rep
	movsl
	popl	%edi
	popl	%esi
	cld
	ret

@


1.6
log
@tiny tweak to asm. prefer memcpy and memmove, with bcopy wrapper
ok guenther
@
text
@d1 1
a1 1
/*	$OpenBSD: memmove.S,v 1.5 2013/06/15 19:45:26 miod Exp $	*/
a76 1
	cld				# copy forward
@


1.5
log
@Fix evil typo causing the wrong pointer to be returned for < 32 bytes
memcpy() or memmove().
@
text
@d1 1
a1 1
/*	$OpenBSD: memmove.S,v 1.4 2013/06/13 02:26:15 deraadt Exp $	*/
d40 2
a41 2
 * Emulate memmove() by swapping the first two arguments, and jumping
 * into bcopy(), which handles overlapping regions.
d43 1
a43 1
ENTRY(memmove)
d46 2
a47 2
	movl	12(%esp),%edi
	movl	16(%esp),%esi
d51 2
a52 2
 * Emulate memcpy() by loading the first two arguments in reverse order
 * and jumping into bcopy()'s forward copy code.
d54 1
a54 1
ENTRY(memcpy)
d59 1
d61 5
a65 2
	jmp	docopyf

d67 1
a67 2
 * bcopy(caddr_t from, caddr_t to, size_t len);
 * Copy len bytes, copying with overlapping space.
d69 1
a69 1
ENTRY(bcopy)
d72 2
a73 3
	movl	12(%esp),%esi
	movl	16(%esp),%edi
docopy:
a74 4
	movl	%edi,%eax
	subl	%esi,%eax
	cmpl	%ecx,%eax		# overlapping?
	jb	1f
d77 1
a77 1
	cld				# nope, copy forward
d90 1
a90 1
1:	movl	%edi,%eax		# setup return value for memcpy/memmove
@


1.4
log
@merge bcopy/memmove/memcpy into one file, with jumps so that it is more
likely to be in the cache (like how the explanation is split between
multiple commits?)
tested by various
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d78 1
a78 1
	movl	%esi,%eax		# setup return value for memcpy/memmove
@


1.3
log
@fix an oft copied typo that i'm tired of looking at
@
text
@d1 111
a111 1
/* No code here since kernel implements this itself */
@


1.2
log
@place a comment as to why these are otherwise empty
@
text
@d1 1
a1 1
/* No code here since kernel impliments this itself */
@


1.1
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
@

