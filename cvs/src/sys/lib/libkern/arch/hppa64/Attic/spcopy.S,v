head	1.6;
access;
symbols
	OPENBSD_5_9:1.5.0.16
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.18
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.10
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.14
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.12
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.8
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2016.05.11.21.52.51;	author deraadt;	state dead;
branches;
next	1.5;
commitid	VpgRpYXqYSJy4P7J;

1.5
date	2011.11.27.21.02.38;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.27.12.32.32;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.19.10.51.01;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.14.13.53.16;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.20.16.51.52;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove hppa64 port, which we never got going beyond broken single users.
hppa reverse-stack gives us a valuable test case, but most developers don't
have a 2nd one to proceed further with this.
ok kettenis
@
text
@/* This is a generated file. DO NOT EDIT. */
/*
 * Generated from:
 *
 *	OpenBSD: bcopy.m4
 */
/*
 * Copyright (c) 1999,2004 Michael Shalayeff
 * All rights reserved.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF MIND, USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */


#undef _LOCORE
#define _LOCORE
#include <machine/asm.h>
#include <machine/frame.h>


#ifdef _KERNEL
#include <assym.h>

/*
 * int spcopy (pa_space_t ssp, const void *src, pa_space_t dsp, void *dst,
 *              size_t size)
 * do a space to space bcopy.
 *
 * assumes that spaces do not clash, otherwise we lose
 */
	.import	copy_on_fault, code
LEAF_ENTRY(spcopy)
	sub,*<>	%r0, arg4, %r0
	bv	%r0(%rp)
	nop

	std	%rp, HPPA_FRAME_RP(%sp)
	ldo	HPPA_FRAME_SIZE(%sp), %sp
	/* setup fault handler */
	mfctl	%cr24, %r1
	ldd	CI_CURPROC(%r1), %r1
	ldil	L%copy_on_fault, %r21
	ldd	P_ADDR(%r1), %r2
	ldo	R%copy_on_fault(%r21), %r21
	ldd	PCB_ONFAULT+U_PCB(%r2), %r1
	std	%r21, PCB_ONFAULT+U_PCB(%r2)

	mtsp	%arg0, %sr1
	mtsp	%arg2, %sr2

	copy	arg4, %ret0
	
	cmpib,*>=,n 15, %ret0, $spcopy.byte

	extrd,u	%arg1, 63, 2, %r20
	extrd,u	%arg3, 63, 2, %r19
	add	%ret0, %r19, %ret0
	cmpb,*<> %r20, %r19, $spcopy.unaligned
	depd	%r0, 63, 2, %arg1
	
	addi	-16, %ret0, %ret0
$spcopy.loop16a
	ldw	 32(%sr1, %arg1), %r0
	ldw,ma	4(%sr1, %arg1), %r22
	ldw,ma	4(%sr1, %arg1), %r21
	ldw,ma	4(%sr1, %arg1), %r20
	ldw,ma	4(%sr1, %arg1), %r19
	stby,b,m %r22, 4(%sr2, %arg3)
	stw,ma	%r21, 4(%sr2, %arg3)
	stw,ma	%r20, 4(%sr2, %arg3)
	addib,*>= -16, %ret0, $spcopy.loop16a
	stw,ma	%r19, 4(%sr2, %arg3)

	addib,*<,n 12, %ret0, $spcopy.cleanup
$spcopy.word
	ldw,ma	4(%sr1, %arg1), %r22
	addib,*>= -4, %ret0, $spcopy.word
	stw,ma	%r22, 4(%sr2, %arg3)

$spcopy.cleanup
	addib,*=,n 4, %ret0, $spcopy.done
	ldw	0(%sr1, %arg1), %r22
	add	%arg3, %ret0, %arg3
	b	$spcopy.done
	stby,e	%r22, 0(%sr2, %arg3)

$spcopy.unaligned
	sub,*>=	%r19, %r20, %r21
	ldw,ma	4(%sr1, %arg1), %ret1
	depd,z	%r21, 60, 61, %r22
	mtsar	%r22
	
	addi	-16, %ret0, %ret0
$spcopy.loop16u
	ldw	 32(%sr1, %arg1), %r0
	ldw,ma	4(%sr1, %arg1), %r22
	ldw,ma	4(%sr1, %arg1), %r21
	ldw,ma	4(%sr1, %arg1), %r20
	ldw,ma	4(%sr1, %arg1), %r19
	shrpw	%ret1, %r22, %sar, %r31
	stby,b,m %r31, 4(%sr2, %arg3)
	shrpw	%r22, %r21, %sar, %r31
	stw,ma	%r31, 4(%sr2, %arg3)
	shrpw	%r21, %r20, %sar, %r31
	stw,ma	%r31, 4(%sr2, %arg3)
	shrpw	%r20, %r19, %sar, %r31
	stw,ma	%r31, 4(%sr2, %arg3)
	addib,*>= -16, %ret0, $spcopy.loop16u
	copy	%r19, %ret1

	addib,*<,n 12, %ret0, $spcopy.cleanup_un
$spcopy.word_un
	ldw,ma	4(%sr1, %arg1), %r22
	shrpw	%ret1, %r22, %sar, %r21
	addib,*< -4, %ret0, $spcopy.cleanup1_un
	stw,ma	%r21, 4(%sr2, %arg3)
	ldw,ma	4(%sr1, %arg1), %ret1
	shrpw	%r22, %ret1, %sar, %r21
	addib,*>= -4, %ret0, $spcopy.word_un
	stw,ma	%r21, 4(%sr2, %arg3)

$spcopy.cleanup_un
	addib,*<=,n 4, %ret0, $spcopy.done
	mfctl	%sar, %r19
	add	%arg3, %ret0, %arg3
	extrd,u	%r19, 60, 2, %r19
	sub,*<=	%ret0, %r19, %r0
	ldw,ma	4(%sr1, %arg1), %r22
	shrpw	%ret1, %r22, %sar, %r21
	b	$spcopy.done
	stby,e	%r21, 0(%sr2, %arg3)

$spcopy.cleanup1_un
	b	$spcopy.cleanup_un
	copy	%r22, %ret1

$spcopy.byte
	cmpb,*>=,n %r0, %ret0, $spcopy.done
$spcopy.byte_loop
	ldbs,ma	1(%sr1, %arg1), %r22
	addib,*<> -1, %ret0, $spcopy.byte_loop
	stbs,ma	%r22, 1(%sr2, %arg3)
$spcopy.done


	mtsp	%r0, %sr1
	mtsp	%r0, %sr2
	/* reset fault handler */
	std	%r1, PCB_ONFAULT+U_PCB(%r2)
	ldo	-HPPA_FRAME_SIZE(%sp), %sp
	ldd	HPPA_FRAME_RP(%sp), %rp
	bv	%r0(%rp)
	copy	%r0, %ret0
EXIT(spcopy)
#endif

	.end
@


1.5
log
@Regen.
@
text
@@


1.4
log
@Regen.
@
text
@d74 7
a80 7
	ldws,ma	4(%sr1, %arg1), %r22
	ldws,ma	4(%sr1, %arg1), %r21
	ldws,ma	4(%sr1, %arg1), %r20
	ldws,ma	4(%sr1, %arg1), %r19
	stbys,b,m %r22, 4(%sr2, %arg3)
	stws,ma	%r21, 4(%sr2, %arg3)
	stws,ma	%r20, 4(%sr2, %arg3)
d82 1
a82 1
	stws,ma	%r19, 4(%sr2, %arg3)
d86 1
a86 1
	ldws,ma	4(%sr1, %arg1), %r22
d88 1
a88 1
	stws,ma	%r22, 4(%sr2, %arg3)
d92 1
a92 1
	ldws	0(%sr1, %arg1), %r22
d95 1
a95 1
	stbys,e	%r22, 0(%sr2, %arg3)
d99 1
a99 1
	ldwm	4(%sr1, %arg1), %ret1
d106 12
a117 12
	ldws,ma	4(%sr1, %arg1), %r22
	ldws,ma	4(%sr1, %arg1), %r21
	ldws,ma	4(%sr1, %arg1), %r20
	ldws,ma	4(%sr1, %arg1), %r19
	vshd	%ret1, %r22, %r31
	stbys,b,m %r31, 4(%sr2, %arg3)
	vshd	%r22, %r21, %r31
	stws,ma	%r31, 4(%sr2, %arg3)
	vshd	%r21, %r20, %r31
	stws,ma	%r31, 4(%sr2, %arg3)
	vshd	%r20, %r19, %r31
	stws,ma	%r31, 4(%sr2, %arg3)
d123 2
a124 2
	ldws,ma	4(%sr1, %arg1), %r22
	vshd	%ret1, %r22, %r21
d126 3
a128 3
	stws,ma	%r21, 4(%sr2, %arg3)
	ldws,ma	4(%sr1, %arg1), %ret1
	vshd	%r22, %ret1, %r21
d130 1
a130 1
	stws,ma	%r21, 4(%sr2, %arg3)
d138 2
a139 2
	ldws,ma	4(%sr1, %arg1), %r22
	vshd	%ret1, %r22, %r21
d141 1
a141 1
	stbys,e	%r21, 0(%sr2, %arg3)
@


1.3
log
@Regen.
@
text
@d43 1
a43 1
	sub,<>	%r0, arg4, %r0
d63 1
a63 1
	comib,>=,n 15, %ret0, $spcopy.byte
d68 1
a68 1
	comb,<> %r20, %r19, $spcopy.unaligned
d81 1
a81 1
	addib,>= -16, %ret0, $spcopy.loop16a
d84 1
a84 1
	addib,<,n 12, %ret0, $spcopy.cleanup
d87 1
a87 1
	addib,>= -4, %ret0, $spcopy.word
d91 1
a91 1
	addib,=,n 4, %ret0, $spcopy.done
d98 1
a98 1
	sub,>=	%r19, %r20, %r21
d100 1
a100 1
	zdep	%r21, 28, 29, %r22
d118 1
a118 1
	addib,>= -16, %ret0, $spcopy.loop16u
d121 1
a121 1
	addib,<,n 12, %ret0, $spcopy.cleanup_un
d125 1
a125 1
	addib,<	-4, %ret0, $spcopy.cleanup1_un
d129 1
a129 1
	addib,>= -4, %ret0, $spcopy.word_un
d133 1
a133 1
	addib,<=,n 4, %ret0, $spcopy.done
d136 2
a137 2
	extru	%r19, 28, 2, %r19
	sub,<=	%ret0, %r19, %r0
d148 1
a148 1
	comb,>=,n %r0, %ret0, $spcopy.done
d151 1
a151 1
	addib,<> -1, %ret0, $spcopy.byte_loop
@


1.2
log
@Regen.
@
text
@d65 2
a66 2
	extrd	%arg1, 63, 2, %r20
	extrd	%arg3, 63, 2, %r19
@


1.1
log
@Catch up with dismantled libkern.
@
text
@d50 2
a51 2
	mfctl	%cr24, %arg1
	ldd	CI_CURPROC(%arg1), %r1
d53 1
a53 1
	ldd	P_ADDR(%r20), %r2
d65 2
a66 2
	extru	%arg1, 31, 2, %r20
	extru	%arg3, 31, 2, %r19
d69 1
a69 1
	dep	%r0, 31, 2, %arg1
@

