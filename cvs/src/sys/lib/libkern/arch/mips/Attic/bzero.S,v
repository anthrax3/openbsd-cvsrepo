head	1.7;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.30
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.28
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.26
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.24
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.22
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.20
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.18
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.16
	OPENBSD_2_8:1.6.0.14
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.12
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.10
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.8
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.6
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4;
locks; strict;
comment	@# @;


1.7
date	2004.08.11.10.24.27;	author pefo;	state dead;
branches;
next	1.6;

1.6
date	98.03.01.16.10.26;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	97.11.07.15.57.18;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.07.30.20.19.08;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	96.07.18.16.56.56;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.18.09.43.38;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	95.11.06.21.15.55;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@move to mips64
@
text
@/*	$OpenBSD: bzero.S,v 1.6 1998/03/01 16:10:26 niklas Exp $	*/

#include "DEFS.h"


/*
 * bzero(s1, n)
 */
LEAF(bzero)
ALEAF(blkclr)
	.set	noreorder
	blt	a1, 12, smallclr	# small amount to clear?
	subu	a3, zero, a0		# compute # bytes to word align address
	and	a3, a3, 3
	beq	a3, zero, 1f		# skip if word aligned
	subu	a1, a1, a3		# subtract from remaining count
	SWHI	zero, 0(a0)		# clear 1, 2, or 3 bytes to align
	addu	a0, a0, a3
1:
	and	v0, a1, 3		# compute number of words left
	subu	a3, a1, v0
	move	a1, v0
	addu	a3, a3, a0		# compute ending address
2:
	addu	a0, a0, 4		# clear words
	bne	a0, a3, 2b		#  unrolling loop does not help
	sw	zero, -4(a0)		#  since we are limited by memory speed
smallclr:
	ble	a1, zero, 2f
	addu	a3, a1, a0		# compute ending address
1:
	addu	a0, a0, 1		# clear bytes
	bne	a0, a3, 1b
	sb	zero, -1(a0)
2:
	j	ra
	nop
END(bzero)

@


1.6
log
@Use correct comment syntax for RCS Ids
@
text
@d1 1
a1 1
/*	$OpenBSD: bzero.S,v 1.5 1997/11/07 15:57:18 niklas Exp $	*/
@


1.5
log
@$OpenBSD$
@
text
@d1 1
a1 1
#	$OpenBSD$
@


1.4
log
@Cleanup of endian and abi call stuff.
@
text
@d1 2
@


1.3
log
@Add macros to handle endian issues.
@
text
@a2 1
	.set	noreorder
d9 1
d15 1
a15 1
	SWLO	zero, 0(a0)		# clear 1, 2, or 3 bytes to align
@


1.2
log
@Added missing '.set noreorder' directive
@
text
@d15 1
a15 1
	swr	zero, 0(a0)		# clear 1, 2, or 3 bytes to align
@


1.1
log
@libkern pica stuff
@
text
@d3 2
d35 1
a35 1
	 nop
@

