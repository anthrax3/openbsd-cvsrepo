head	1.9;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.30
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.28
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.8
	OPENBSD_3_3:1.8.0.26
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.24
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.22
	OPENBSD_3_1_BASE:1.8
	UBC_SYNC_B:1.8
	UBC:1.8.0.20
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.18
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.16
	OPENBSD_2_8:1.8.0.14
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.12
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.10
	SMP_BASE:1.8
	kame_19991208:1.8
	OPENBSD_2_6:1.8.0.8
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.6.0.6
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.4
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6;
locks; strict;
comment	@# @;


1.9
date	2004.08.11.10.24.27;	author pefo;	state dead;
branches;
next	1.8;

1.8
date	98.03.01.16.10.24;	author niklas;	state Exp;
branches;
next	1.7;

1.7
date	97.11.07.15.57.17;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.09.22.17.04.08;	author imp;	state Exp;
branches;
next	1.5;

1.5
date	96.07.30.20.19.07;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	96.07.18.16.56.56;	author pefo;	state Exp;
branches;
next	1.3;

1.3
date	96.05.18.09.43.37;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	96.05.15.08.24.15;	author pefo;	state Exp;
branches;
next	1.1;

1.1
date	95.11.06.21.15.55;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@move to mips64
@
text
@/*	$OpenBSD: bcopy.S,v 1.8 1998/03/01 16:10:24 niklas Exp $	*/

#include "DEFS.h"


/*
 * memcpy(to, from, len)
 * {ov}bcopy(from, to, len)
 */
LEAF(memcpy)
	.set	noreorder
	move	v0, a0			# swap from and to
	move	a0, a1
	move	a1, v0
ALEAF(bcopy)
ALEAF(ovbcopy)
	.set	noreorder
	addu	t0, a0, a2		# t0 = end of s1 region
	sltu	t1, a1, t0
	sltu	t2, a0, a1
	and	t1, t1, t2		# t1 = true if from < to < (from+len)
	beq	t1, zero, forward	# non overlapping, do forward copy
	slt	t2, a2, 12		# check for small copy

	ble	a2, zero, 2f
	addu	t1, a1, a2		# t1 = end of to region
1:
	lb	v1, -1(t0)		# copy bytes backwards,
	subu	t0, t0, 1		#   doesnt happen often so do slow way
	subu	t1, t1, 1
	bne	t0, a0, 1b
	sb	v1, 0(t1)
2:
	j	ra
	nop
forward:
	bne	t2, zero, smallcpy	# do a small bcopy
	xor	v1, a0, a1		# compare low two bits of addresses
	and	v1, v1, 3
	subu	a3, zero, a1		# compute # bytes to word align address
	beq	v1, zero, aligned	# addresses can be word aligned
	and	a3, a3, 3

	beq	a3, zero, 1f
	subu	a2, a2, a3		# subtract from remaining count
	LWHI	v1, 0(a0)		# get next 4 bytes (unaligned)
	LWLO	v1, 3(a0)
	addu	a0, a0, a3
	SWHI	v1, 0(a1)		# store 1, 2, or 3 bytes to align a1
	addu	a1, a1, a3
1:
	and	v1, a2, 3		# compute number of words left
	subu	a3, a2, v1
	move	a2, v1
	addu	a3, a3, a0		# compute ending address
2:
	LWHI	v1, 0(a0)		# copy words a0 unaligned, a1 aligned
	LWLO	v1, 3(a0)
	addu	a0, a0, 4
	sw	v1, 0(a1)
	addu	a1, a1, 4
	bne	a0, a3, 2b
	nop				# We have to do this mmu-bug.
	b	smallcpy
	nop
aligned:
	beq	a3, zero, 1f
	subu	a2, a2, a3		# subtract from remaining count
	LWHI	v1, 0(a0)		# copy 1, 2, or 3 bytes to align
	addu	a0, a0, a3
	SWHI	v1, 0(a1)
	addu	a1, a1, a3
1:
	and	v1, a2, 3		# compute number of whole words left
	subu	a3, a2, v1
	move	a2, v1
	addu	a3, a3, a0		# compute ending address
2:
	lw	v1, 0(a0)		# copy words
	addu	a0, a0, 4
	sw	v1, 0(a1)
	bne	a0, a3, 2b
	addu	a1, a1, 4
smallcpy:
	ble	a2, zero, 2f
	addu	a3, a2, a0		# compute ending address
1:
	lbu	v1, 0(a0)		# copy bytes
	addu	a0, a0, 1
	sb	v1, 0(a1)
	bne	a0, a3, 1b
	addu	a1, a1, 1	# MMU BUG ? can not do -1(a1) at 0x80000000!!
2:
	j	ra
	nop
END(memcpy)
@


1.8
log
@Use correct comment syntax for RCS Ids
@
text
@d1 1
a1 1
/*	$OpenBSD: bcopy.S,v 1.7 1997/11/07 15:57:17 niklas Exp $	*/
@


1.7
log
@$OpenBSD$
@
text
@d1 1
a1 1
#	$OpenBSD$
@


1.6
log
@Fix unterminated constant complaint
@
text
@d1 2
@


1.5
log
@Cleanup of endian and abi call stuff.
@
text
@d90 1
a90 1
	addu	a1, a1, 1	# MMU BUG ? can't do -1(a1) at 0x80000000!!
@


1.4
log
@Add macros to handle endian issues.
@
text
@a2 1
	.set	noreorder
d9 1
d15 1
d44 2
a45 3
/*XXX FIXME Endian dependent */
	LWLO	v1, 0(a0)		# get next 4 bytes (unaligned)
	LWHI	v1, 3(a0)
d47 1
a47 1
	SWLO	v1, 0(a1)		# store 1, 2, or 3 bytes to align a1
d55 2
a56 3
/*XXX FIXME Endian dependent */
	LWLO	v1, 0(a0)		# copy words a0 unaligned, a1 aligned
	LWHI	v1, 3(a0)
d67 1
a67 1
	LWLO	v1, 0(a0)		# copy 1, 2, or 3 bytes to align
d69 1
a69 1
	SWLO	v1, 0(a1)
a88 1
	addu	a1, a1, 1
d90 1
a90 1
	nop			# MMU BUG ? can't do -1(a1) at 0x80000000!!
@


1.3
log
@Added missing '.set noreorder' directive
@
text
@d44 2
a45 2
	lwr	v1, 0(a0)		# get next 4 bytes (unaligned)
	lwl	v1, 3(a0)
d47 1
a47 1
	swr	v1, 0(a1)		# store 1, 2, or 3 bytes to align a1
d56 2
a57 2
	lwr	v1, 0(a0)		# copy words a0 unaligned, a1 aligned
	lwl	v1, 3(a0)
d68 1
a68 1
	lwr	v1, 0(a0)		# copy 1, 2, or 3 bytes to align
d70 1
a70 1
	swr	v1, 0(a1)
@


1.2
log
@Now uses libkern instead of locore functions.
@
text
@d3 2
d32 1
a32 1
	 nop
d95 1
a95 1
	 nop
@


1.1
log
@libkern pica stuff
@
text
@d41 1
d53 1
d90 1
a90 1
	nop				# MMU BUG ? (cant do -1(a1) !!
@

