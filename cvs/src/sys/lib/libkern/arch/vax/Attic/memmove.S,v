head	1.6;
access;
symbols
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.12
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.8
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.3.0.14
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.12
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.10
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.10
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2016.03.10.05.21.06;	author deraadt;	state dead;
branches;
next	1.5;
commitid	K03oHi07npnVMEbw;

1.5
date	2013.07.05.21.11.57;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.13.03.58.22;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.19.19.47.53;	author miod;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.28.11.46.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.25.18.25.36;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.6
log
@more pieces of vax
@
text
@/*	$OpenBSD: memmove.S,v 1.5 2013/07/05 21:11:57 miod Exp $ */
/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * void *memmove(dst, src, size)
 * returns dst
 *
 * This optimises the usual case (count < 65536) at the expense
 * of some extra memory references and branches when count >= 65536.
 */

#include <machine/asm.h>

ENTRY(bcopy, R2|R3|R4|R5)
	movzwl	$65535,%r0	/* r0 = 64K (needed below) */
	movq	8(%ap),%r1	/* r1 = src, r2 = length */
	movl	%r1,%r3		/* r3 = dst */
	movl	4(%ap),%r1	/* r1 = src */
	brw	5f		/* do a memmove */

ENTRY(memcpy, R2|R3|R4|R5)
	movzwl	$65535,%r0	/* r0 = 64K (needed below) */
	movq	8(%ap),%r1	/* r1 = src, r2 = length */
	movl	4(%ap),%r3	/* r3 = dst */
	cmpl	%r1,%r3
	beql	2f		/* equal, nothing to do */
	brw	1f		/* jump into the forward copy path of memmove */

ENTRY(memmove, R2|R3|R4|R5)
	movzwl	$65535,%r0	/* r0 = 64K (needed below) */
	movq	8(%ap),%r1	/* r1 = src, r2 = length */
	movl	4(%ap),%r3	/* r3 = dst */
5:
	cmpl	%r1,%r3
	bgtru	1f		/* normal forward case */
	beql	2f		/* equal, nothing to do */
	addl2	%r2,%r1		/* overlaps iff src<dst but src+len>dst */
	cmpl	%r1,%r3
	bgtru	4f		/* overlapping, must move backwards */
	subl2	%r2,%r1

1:	/* move forward */
	cmpl	%r2,%r0
	bgtru	3f		/* stupid movc3 limitation */
	movc3	%r2,(%r1),(%r3)	/* move it all */
2:
	movl	4(%ap),%r0	/* return original dst */
	ret
3:
	subl2	%r0,12(%ap)	/* adjust length by 64K */
	movc3	%r0,(%r1),(%r3)	/* move 64K */
	movl	12(%ap),%r2
	decw	%r0		/* from 0 to 65535 */
	brb	1b		/* retry */

4:	/* move backward */
	addl2	%r2,%r3
5:
	cmpl	%r2,%r0
	bgtru	6f		/* stupid movc3 limitation */
	subl2	%r2,%r1
	subl2	%r2,%r3
	movc3	%r2,(%r1),(%r3)	/* move it all */
	movl	4(%ap),%r0	/* return original dst */
	ret
6:
	subl2	%r0,12(%ap)	/* adjust length by 64K */
	subl2	%r0,%r1
	subl2	%r0,%r3
	movc3	%r0,(%r1),(%r3)	/* move 64K */
	movl	12(%ap),%r2
	decw	%r0
	subl2	%r0,%r1
	subl2	%r0,%r3
	brb	5b
@


1.5
log
@VAX ELF kernel bits.
@
text
@d1 1
a1 1
/*	$OpenBSD: memmove.S,v 1.4 2013/06/13 03:58:22 deraadt Exp $ */
@


1.4
log
@same bcopy/memmove/memcpy methodology for vax.
checked over by mlarkin
@
text
@d1 1
a1 1
/*	$OpenBSD: memmove.S,v 1.3 2009/08/19 19:47:53 miod Exp $ */
d42 4
a45 4
	movzwl	$65535,r0	/* r0 = 64K (needed below) */
	movq	8(ap),r1	/* r1 = src, r2 = length */
	movl	r1,r3		/* r3 = dst */
	movl	4(ap),r1	/* r1 = src */
d49 4
a52 4
	movzwl	$65535,r0	/* r0 = 64K (needed below) */
	movq	8(ap),r1	/* r1 = src, r2 = length */
	movl	4(ap),r3	/* r3 = dst */
	cmpl	r1,r3
d57 3
a59 3
	movzwl	$65535,r0	/* r0 = 64K (needed below) */
	movq	8(ap),r1	/* r1 = src, r2 = length */
	movl	4(ap),r3	/* r3 = dst */
d61 1
a61 1
	cmpl	r1,r3
d64 2
a65 2
	addl2	r2,r1		/* overlaps iff src<dst but src+len>dst */
	cmpl	r1,r3
d67 1
a67 1
	subl2	r2,r1
d70 1
a70 1
	cmpl	r2,r0
d72 1
a72 1
	movc3	r2,(r1),(r3)	/* move it all */
d74 1
a74 1
	movl	4(ap),r0	/* return original dst */
d77 4
a80 4
	subl2	r0,12(ap)	/* adjust length by 64K */
	movc3	r0,(r1),(r3)	/* move 64K */
	movl	12(ap),r2
	decw	r0		/* from 0 to 65535 */
d84 1
a84 1
	addl2	r2,r3
d86 1
a86 1
	cmpl	r2,r0
d88 4
a91 4
	subl2	r2,r1
	subl2	r2,r3
	movc3	r2,(r1),(r3)	/* move it all */
	movl	4(ap),r0	/* return original dst */
d94 8
a101 8
	subl2	r0,12(ap)	/* adjust length by 64K */
	subl2	r0,r1
	subl2	r0,r3
	movc3	r0,(r1),(r3)	/* move 64K */
	movl	12(ap),r2
	decw	r0
	subl2	r0,r1
	subl2	r0,r3
@


1.3
log
@<machine/macros.h> would provide inline version of a few of the functions
traditionnaly found in libkern. However, the memcmp() flavour would behave
as bcmp() with only two possible return values: zero and positive non-zero.

This broke the name cache RB trees which now rely upon proper memcmp()
semantics(negative value, zero, or positive value).

Just give up on these macros and provide the same code as libc, in libkern.
As a side effect, this no longer uses the cmpc3 instruction, which is not
implemented and requires (slow) kernel emulation, on the original uVax.
@
text
@d1 1
a1 1
/*	$OpenBSD: memmove.S,v 1.5 2005/08/07 16:40:15 espie Exp $ */
d41 15
d60 1
@


1.2
log
@place a comment as to why these are otherwise empty
@
text
@d1 86
a86 1
/* No code here since kernel impliments this itself */
@


1.1
log
@libkern, begone.  Move to a new mechanism where config(8)'s "file"
directive can select between MI and MD versions of these files.  At
the same time, adjust the boot programs to pick exactly what they need,
instead of the 7 or 8 mechanisms previously used.

There will be some fallout from this, but testing it all by myself is a
ridiculously slow process; it will be finished in-tree.

Various developers were very nice and avoided making fun of me when I
was gibbering in the corner..
@
text
@d1 1
@

