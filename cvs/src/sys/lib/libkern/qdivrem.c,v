head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.30
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.32
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.28
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.24
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.26
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.18
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.22
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.18
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.16
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.14
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.12
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.18
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.16
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.14
	OPENBSD_2_8:1.3.0.12
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.10
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.8
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2009.10.27.23.59.35;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.13.03.37.14;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2004.11.28.07.23.41;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.07.00.38.33;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.23.28.08;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.27.07;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.06.27.00.32.27;	author mickey;	state Exp;
branches
	1.3.8.1
	1.3.18.1;
next	1.2;

1.2
date	97.11.07.15.56.48;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.50;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.50;	author deraadt;	state Exp;
branches;
next	;

1.3.8.1
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.3.8.2;

1.3.8.2
date	2003.06.07.11.03.41;	author ho;	state Exp;
branches;
next	;

1.3.18.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Multiprecision divide.  This algorithm is from Knuth vol. 2 (2nd ed),
 * section 4.3.1, pp. 257--259.
 */

#include "quad.h"

#define	B	((int)1 << HALF_BITS)	/* digit base */

/* Combine two `digits' to make a single two-digit number. */
#define	COMBINE(a, b) (((u_int)(a) << HALF_BITS) | (b))

/* select a type for digits in base B: use unsigned short if they fit */
#if UINT_MAX == 0xffffffffU && USHRT_MAX >= 0xffff
typedef unsigned short digit;
#else
typedef u_int digit;
#endif

static void shl(digit *p, int len, int sh);

/*
 * __qdivrem(u, v, rem) returns u/v and, optionally, sets *rem to u%v.
 *
 * We do this in base 2-sup-HALF_BITS, so that all intermediate products
 * fit within u_int.  As a consequence, the maximum length dividend and
 * divisor are 4 `digits' in this base (they are shorter if they have
 * leading zeros).
 */
u_quad_t
__qdivrem(u_quad_t uq, u_quad_t vq, u_quad_t *arq)
{
	union uu tmp;
	digit *u, *v, *q;
	digit v1, v2;
	u_int qhat, rhat, t;
	int m, n, d, j, i;
	digit uspace[5], vspace[5], qspace[5];

	/*
	 * Take care of special cases: divide by zero, and u < v.
	 */
	if (vq == 0) {
		/* divide by zero. */
		static volatile const unsigned int zero = 0;

		tmp.ul[H] = tmp.ul[L] = 1 / zero;
		if (arq)
			*arq = uq;
		return (tmp.q);
	}
	if (uq < vq) {
		if (arq)
			*arq = uq;
		return (0);
	}
	u = &uspace[0];
	v = &vspace[0];
	q = &qspace[0];

	/*
	 * Break dividend and divisor into digits in base B, then
	 * count leading zeros to determine m and n.  When done, we
	 * will have:
	 *	u = (u[1]u[2]...u[m+n]) sub B
	 *	v = (v[1]v[2]...v[n]) sub B
	 *	v[1] != 0
	 *	1 < n <= 4 (if n = 1, we use a different division algorithm)
	 *	m >= 0 (otherwise u < v, which we already checked)
	 *	m + n = 4
	 * and thus
	 *	m = 4 - n <= 2
	 */
	tmp.uq = uq;
	u[0] = 0;
	u[1] = (digit)HHALF(tmp.ul[H]);
	u[2] = (digit)LHALF(tmp.ul[H]);
	u[3] = (digit)HHALF(tmp.ul[L]);
	u[4] = (digit)LHALF(tmp.ul[L]);
	tmp.uq = vq;
	v[1] = (digit)HHALF(tmp.ul[H]);
	v[2] = (digit)LHALF(tmp.ul[H]);
	v[3] = (digit)HHALF(tmp.ul[L]);
	v[4] = (digit)LHALF(tmp.ul[L]);
	for (n = 4; v[1] == 0; v++) {
		if (--n == 1) {
			u_int rbj;	/* r*B+u[j] (not root boy jim) */
			digit q1, q2, q3, q4;

			/*
			 * Change of plan, per exercise 16.
			 *	r = 0;
			 *	for j = 1..4:
			 *		q[j] = floor((r*B + u[j]) / v),
			 *		r = (r*B + u[j]) % v;
			 * We unroll this completely here.
			 */
			t = v[2];	/* nonzero, by definition */
			q1 = (digit)(u[1] / t);
			rbj = COMBINE(u[1] % t, u[2]);
			q2 = (digit)(rbj / t);
			rbj = COMBINE(rbj % t, u[3]);
			q3 = (digit)(rbj / t);
			rbj = COMBINE(rbj % t, u[4]);
			q4 = (digit)(rbj / t);
			if (arq)
				*arq = rbj % t;
			tmp.ul[H] = COMBINE(q1, q2);
			tmp.ul[L] = COMBINE(q3, q4);
			return (tmp.q);
		}
	}

	/*
	 * By adjusting q once we determine m, we can guarantee that
	 * there is a complete four-digit quotient at &qspace[1] when
	 * we finally stop.
	 */
	for (m = 4 - n; u[1] == 0; u++)
		m--;
	for (i = 4 - m; --i >= 0;)
		q[i] = 0;
	q += 4 - m;

	/*
	 * Here we run Program D, translated from MIX to C and acquiring
	 * a few minor changes.
	 *
	 * D1: choose multiplier 1 << d to ensure v[1] >= B/2.
	 */
	d = 0;
	for (t = v[1]; t < B / 2; t <<= 1)
		d++;
	if (d > 0) {
		shl(&u[0], m + n, d);		/* u <<= d */
		shl(&v[1], n - 1, d);		/* v <<= d */
	}
	/*
	 * D2: j = 0.
	 */
	j = 0;
	v1 = v[1];	/* for D3 -- note that v[1..n] are constant */
	v2 = v[2];	/* for D3 */
	do {
		digit uj0, uj1, uj2;
		
		/*
		 * D3: Calculate qhat (\^q, in TeX notation).
		 * Let qhat = min((u[j]*B + u[j+1])/v[1], B-1), and
		 * let rhat = (u[j]*B + u[j+1]) mod v[1].
		 * While rhat < B and v[2]*qhat > rhat*B+u[j+2],
		 * decrement qhat and increase rhat correspondingly.
		 * Note that if rhat >= B, v[2]*qhat < rhat*B.
		 */
		uj0 = u[j + 0];	/* for D3 only -- note that u[j+...] change */
		uj1 = u[j + 1];	/* for D3 only */
		uj2 = u[j + 2];	/* for D3 only */
		if (uj0 == v1) {
			qhat = B;
			rhat = uj1;
			goto qhat_too_big;
		} else {
			u_int nn = COMBINE(uj0, uj1);
			qhat = nn / v1;
			rhat = nn % v1;
		}
		while (v2 * qhat > COMBINE(rhat, uj2)) {
	qhat_too_big:
			qhat--;
			if ((rhat += v1) >= B)
				break;
		}
		/*
		 * D4: Multiply and subtract.
		 * The variable `t' holds any borrows across the loop.
		 * We split this up so that we do not require v[0] = 0,
		 * and to eliminate a final special case.
		 */
		for (t = 0, i = n; i > 0; i--) {
			t = u[i + j] - v[i] * qhat - t;
			u[i + j] = (digit)LHALF(t);
			t = (B - HHALF(t)) & (B - 1);
		}
		t = u[j] - t;
		u[j] = (digit)LHALF(t);
		/*
		 * D5: test remainder.
		 * There is a borrow if and only if HHALF(t) is nonzero;
		 * in that (rare) case, qhat was too large (by exactly 1).
		 * Fix it by adding v[1..n] to u[j..j+n].
		 */
		if (HHALF(t)) {
			qhat--;
			for (t = 0, i = n; i > 0; i--) { /* D6: add back. */
				t += u[i + j] + v[i];
				u[i + j] = (digit)LHALF(t);
				t = HHALF(t);
			}
			u[j] = (digit)LHALF(u[j] + t);
		}
		q[j] = (digit)qhat;
	} while (++j <= m);		/* D7: loop on j. */

	/*
	 * If caller wants the remainder, we have to calculate it as
	 * u[m..m+n] >> d (this is at most n digits and thus fits in
	 * u[m+1..m+n], but we may need more source digits).
	 */
	if (arq) {
		if (d) {
			for (i = m + n; i > m; --i)
				u[i] = (digit)(((u_int)u[i] >> d) |
				    LHALF((u_int)u[i - 1] << (HALF_BITS - d)));
			u[i] = 0;
		}
		tmp.ul[H] = COMBINE(uspace[1], uspace[2]);
		tmp.ul[L] = COMBINE(uspace[3], uspace[4]);
		*arq = tmp.q;
	}

	tmp.ul[H] = COMBINE(qspace[1], qspace[2]);
	tmp.ul[L] = COMBINE(qspace[3], qspace[4]);
	return (tmp.q);
}

/*
 * Shift p[0]..p[len] left `sh' bits, ignoring any bits that
 * `fall out' the left (there never will be any such anyway).
 * We may assume len >= 0.  NOTE THAT THIS WRITES len+1 DIGITS.
 */
static void
shl(digit *p, int len, int sh)
{
	int i;

	for (i = 0; i < len; i++)
		p[i] = (digit)(LHALF((u_int)p[i] << sh) |
		    ((u_int)p[i + 1] >> (HALF_BITS - sh)));
	p[i] = (digit)(LHALF((u_int)p[i] << sh));
}
@


1.8
log
@Remove __P usage in sys that has crept back in.
'Looks fine' millert@@, ok miod@@
@
text
@a33 4
#if defined(LIBC_SCCS) && !defined(lint)
static char rcsid[] = "$OpenBSD: qdivrem.c,v 1.7 2004/11/28 07:23:41 mickey Exp $";
#endif /* LIBC_SCCS and not lint */

@


1.7
log
@sync from libc
@
text
@d35 1
a35 1
static char rcsid[] = "$OpenBSD: qdivrem.c,v 1.6 2004/10/17 17:49:21 otto Exp $";
d57 1
a57 1
static void shl __P((digit *p, int len, int sh));
@


1.6
log
@ansi and some missing protos
@
text
@a0 3
/*	$OpenBSD: qdivrem.c,v 1.5 2003/06/02 23:28:08 millert Exp $	*/
/*	$NetBSD: qdivrem.c,v 1.5 1995/10/07 09:26:40 mycroft Exp $	*/

d35 1
a35 4
#ifdef notdef
static char sccsid[] = "@@(#)qdivrem.c	8.1 (Berkeley) 6/4/93";
#endif
static char rcsid[] = "$OpenBSD: qdivrem.c,v 1.5 2003/06/02 23:28:08 millert Exp $";
d45 1
a45 1
#define	B	((long)1 << HALF_BITS)	/* digit base */
d48 1
a48 1
#define	COMBINE(a, b) (((u_long)(a) << HALF_BITS) | (b))
d51 1
a51 1
#if ULONG_MAX == 0xffffffff && USHRT_MAX >= 0xffff
d54 1
a54 1
typedef u_long digit;
d57 1
a57 1
static void shl(digit *p, int len, int sh);
d63 1
a63 1
 * fit within u_long.  As a consequence, the maximum length dividend and
d73 1
a73 1
	u_long qhat, rhat, t;
d113 4
a116 4
	u[1] = HHALF(tmp.ul[H]);
	u[2] = LHALF(tmp.ul[H]);
	u[3] = HHALF(tmp.ul[L]);
	u[4] = LHALF(tmp.ul[L]);
d118 4
a121 4
	v[1] = HHALF(tmp.ul[H]);
	v[2] = LHALF(tmp.ul[H]);
	v[3] = HHALF(tmp.ul[L]);
	v[4] = LHALF(tmp.ul[L]);
d124 1
a124 1
			u_long rbj;	/* r*B+u[j] (not root boy jim) */
d136 1
a136 1
			q1 = u[1] / t;
d138 1
a138 1
			q2 = rbj / t;
d140 1
a140 1
			q3 = rbj / t;
d142 1
a142 1
			q4 = rbj / t;
d200 3
a202 3
			u_long n = COMBINE(uj0, uj1);
			qhat = n / v1;
			rhat = n % v1;
d218 1
a218 1
			u[i + j] = LHALF(t);
d222 1
a222 1
		u[j] = LHALF(t);
d233 1
a233 1
				u[i + j] = LHALF(t);
d236 1
a236 1
			u[j] = LHALF(u[j] + t);
d238 1
a238 1
		q[j] = qhat;
d249 2
a250 2
				u[i] = (u[i] >> d) |
				    LHALF(u[i - 1] << (HALF_BITS - d));
d274 3
a276 2
		p[i] = LHALF(p[i] << sh) | (p[i + 1] >> (HALF_BITS - sh));
	p[i] = LHALF(p[i] << sh);
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: qdivrem.c,v 1.4 2002/03/14 01:27:07 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: qdivrem.c,v 1.4 2002/03/14 01:27:07 millert Exp $";
d74 1
a74 2
__qdivrem(uq, vq, arq)
	u_quad_t uq, vq, *arq;
d78 1
a78 1
	register digit v1, v2;
d188 1
a188 1
		register digit uj0, uj1, uj2;
d275 1
a275 4
shl(p, len, sh)
	register digit *p;
	register int len;
	register int sh;
d277 1
a277 1
	register int i;
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: qdivrem.c,v 1.3 1998/06/27 00:32:27 mickey Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d41 1
a41 1
static char rcsid[] = "$OpenBSD: qdivrem.c,v 1.3 1998/06/27 00:32:27 mickey Exp $";
@


1.3
log
@fix for non-ansi compilers
@
text
@d1 1
a1 1
/*	$OpenBSD: qdivrem.c,v 1.2 1997/11/07 15:56:48 niklas Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: qdivrem.c,v 1.2 1997/11/07 15:56:48 niklas Exp $";
d67 1
a67 1
static void shl __P((digit *p, int len, int sh));
@


1.3.18.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: qdivrem.c,v 1.3 1998/06/27 00:32:27 mickey Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: qdivrem.c,v 1.3 1998/06/27 00:32:27 mickey Exp $";
d67 1
a67 1
static void shl(digit *p, int len, int sh);
@


1.3.8.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD$";
d67 1
a67 1
static void shl(digit *p, int len, int sh);
@


1.3.8.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: qdivrem.c,v 1.3.8.1 2002/03/28 15:02:00 niklas Exp $	*/
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
d45 1
a45 1
static char rcsid[] = "$OpenBSD: qdivrem.c,v 1.3.8.1 2002/03/28 15:02:00 niklas Exp $";
@


1.2
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: qdivrem.c,v 1.5 1995/10/07 09:26:40 mycroft Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: qdivrem.c,v 1.5 1995/10/07 09:26:40 mycroft Exp $";
d280 4
a283 1
shl(register digit *p, register int len, register int sh)
@


1.1
log
@Initial revision
@
text
@d1 1
d45 1
a45 1
static char rcsid[] = "$NetBSD: qdivrem.c,v 1.5 1995/10/07 09:26:40 mycroft Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
