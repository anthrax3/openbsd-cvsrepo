head	1.34;
access;
symbols
	OPENBSD_6_1:1.34.0.14
	OPENBSD_6_1_BASE:1.34
	OPENBSD_6_0:1.34.0.10
	OPENBSD_6_0_BASE:1.34
	OPENBSD_5_9:1.34.0.6
	OPENBSD_5_9_BASE:1.34
	OPENBSD_5_8:1.34.0.8
	OPENBSD_5_8_BASE:1.34
	OPENBSD_5_7:1.34.0.2
	OPENBSD_5_7_BASE:1.34
	OPENBSD_5_6:1.34.0.4
	OPENBSD_5_6_BASE:1.34
	OPENBSD_5_5:1.32.0.4
	OPENBSD_5_5_BASE:1.32
	OPENBSD_5_4:1.31.0.2
	OPENBSD_5_4_BASE:1.31
	OPENBSD_5_3:1.29.0.4
	OPENBSD_5_3_BASE:1.29
	OPENBSD_5_2:1.29.0.2
	OPENBSD_5_2_BASE:1.29
	OPENBSD_5_1_BASE:1.28
	OPENBSD_5_1:1.28.0.6
	OPENBSD_5_0:1.28.0.4
	OPENBSD_5_0_BASE:1.28
	OPENBSD_4_9:1.28.0.2
	OPENBSD_4_9_BASE:1.28
	OPENBSD_4_8:1.27.0.2
	OPENBSD_4_8_BASE:1.27
	OPENBSD_4_7:1.26.0.2
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.26.0.4
	OPENBSD_4_6_BASE:1.26
	OPENBSD_4_5:1.25.0.2
	OPENBSD_4_5_BASE:1.25
	OPENBSD_4_4:1.24.0.6
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.4
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.2
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.22.0.12
	OPENBSD_4_1_BASE:1.22
	OPENBSD_4_0:1.22.0.10
	OPENBSD_4_0_BASE:1.22
	OPENBSD_3_9:1.22.0.8
	OPENBSD_3_9_BASE:1.22
	OPENBSD_3_8:1.22.0.6
	OPENBSD_3_8_BASE:1.22
	OPENBSD_3_7:1.22.0.4
	OPENBSD_3_7_BASE:1.22
	OPENBSD_3_6:1.22.0.2
	OPENBSD_3_6_BASE:1.22
	SMP_SYNC_A:1.20
	SMP_SYNC_B:1.20
	OPENBSD_3_5:1.19.0.4
	OPENBSD_3_5_BASE:1.19
	OPENBSD_3_4:1.19.0.2
	OPENBSD_3_4_BASE:1.19
	UBC_SYNC_A:1.17
	OPENBSD_3_3:1.17.0.6
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.4
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	UBC_SYNC_B:1.17
	UBC:1.16.0.6
	UBC_BASE:1.16
	OPENBSD_3_0:1.16.0.4
	OPENBSD_3_0_BASE:1.16
	OPENBSD_2_9_BASE:1.16
	OPENBSD_2_9:1.16.0.2
	OPENBSD_2_8:1.15.0.2
	OPENBSD_2_8_BASE:1.15
	OPENBSD_2_7:1.14.0.12
	OPENBSD_2_7_BASE:1.14
	SMP:1.14.0.10
	SMP_BASE:1.14
	kame_19991208:1.14
	OPENBSD_2_6:1.14.0.8
	OPENBSD_2_6_BASE:1.14
	OPENBSD_2_5:1.14.0.6
	OPENBSD_2_5_BASE:1.14
	OPENBSD_2_4:1.14.0.4
	OPENBSD_2_4_BASE:1.14
	OPENBSD_2_3:1.14.0.2
	OPENBSD_2_3_BASE:1.14
	OPENBSD_2_2:1.12.0.2
	OPENBSD_2_2_BASE:1.12
	OPENBSD_2_1:1.11.0.2
	OPENBSD_2_1_BASE:1.11
	OPENBSD_2_0:1.6.0.2
	OPENBSD_2_0_BASE:1.6
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.34
date	2014.07.13.23.49.40;	author uebayasi;	state Exp;
branches;
next	1.33;
commitid	z6zKhO7L2b0jL3QY;

1.33
date	2014.06.10.04.16.57;	author deraadt;	state Exp;
branches;
next	1.32;
commitid	cdWt8Fq9cWtmBa8c;

1.32
date	2014.01.19.12.45.36;	author deraadt;	state Exp;
branches;
next	1.31;

1.31
date	2013.07.11.01.20.32;	author jsg;	state Exp;
branches;
next	1.30;

1.30
date	2013.06.08.19.06.50;	author sf;	state Exp;
branches;
next	1.29;

1.29
date	2012.04.26.01.22.31;	author matthew;	state Exp;
branches;
next	1.28;

1.28
date	2011.01.10.23.23.56;	author tedu;	state Exp;
branches;
next	1.27;

1.27
date	2010.07.20.15.28.44;	author matthew;	state Exp;
branches;
next	1.26;

1.26
date	2009.05.24.10.50.34;	author jsg;	state Exp;
branches;
next	1.25;

1.25
date	2008.10.15.23.23.51;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.04.22.17.30;	author deraadt;	state Exp;
branches;
next	1.23;

1.23
date	2007.05.04.22.14.37;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	2004.08.07.00.38.32;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2004.06.21.22.55.04;	author itojun;	state Exp;
branches;
next	1.20;

1.20
date	2004.05.06.01.12.05;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.23.21.02.27;	author millert;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.02.23.28.08;	author millert;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.14.01.27.07;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2000.12.18.18.40.44;	author provos;	state Exp;
branches
	1.16.6.1;
next	1.15;

1.15
date	2000.06.16.20.20.30;	author millert;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	97.11.30.21.47.45;	author mickey;	state Exp;
branches
	1.14.10.1;
next	1.13;

1.13
date	97.11.04.19.15.08;	author chuck;	state Exp;
branches;
next	1.12;

1.12
date	97.09.14.19.10.49;	author niklas;	state Exp;
branches;
next	1.11;

1.11
date	97.05.05.14.35.09;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	97.05.04.23.33.38;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	97.03.30.22.05.10;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	97.01.18.13.39.29;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	96.12.06.12.21.06;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.08.11.20.39.08;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.08.10.21.41.15;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.06.16.01.14.21;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.19.16.09.23;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.02.29.13.27.49;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.49;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.49;	author deraadt;	state Exp;
branches;
next	;

1.14.10.1
date	2001.05.14.22.32.47;	author niklas;	state Exp;
branches;
next	1.14.10.2;

1.14.10.2
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.14.10.3;

1.14.10.3
date	2003.06.07.11.03.41;	author ho;	state Exp;
branches;
next	1.14.10.4;

1.14.10.4
date	2004.02.19.10.57.18;	author niklas;	state Exp;
branches;
next	1.14.10.5;

1.14.10.5
date	2004.06.05.23.13.03;	author niklas;	state Exp;
branches;
next	;

1.15.2.1
date	2000.12.19.22.58.38;	author jason;	state Exp;
branches;
next	;

1.16.6.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.34
log
@KASSERTMSG(9): New kernel assertion with message

KASSERT() is annoying as it only prints the expression as a string.  If you
(developers) want to know a little more information, you have to do:

	#ifdef DIAGNOSTIC
		if (bad)
			panic(...);
	#endif

KASSERTMSG() replaces it into a single line:

		KASSERTMSG(!bad, ...);

Taken from NetBSD.

(There is a concern that KASSERT() messages are too long; consume more memory,
and not friendly for small monitors.  This have to be considered & revisited
later.)

"Like" from henning@@
Man page review & advices from jmc@@ and schwarze@@
@
text
@/*	$OpenBSD$	*/
/*	$NetBSD: libkern.h,v 1.7 1996/03/14 18:52:08 christos Exp $	*/

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)libkern.h	8.1 (Berkeley) 6/10/93
 */

#ifndef __LIBKERN_H__
#define __LIBKERN_H__

#include <sys/types.h>

#ifndef LIBKERN_INLINE
#define LIBKERN_INLINE	static __inline
#define LIBKERN_BODY
#endif


LIBKERN_INLINE int imax(int, int);
LIBKERN_INLINE int imin(int, int);
LIBKERN_INLINE u_int max(u_int, u_int);
LIBKERN_INLINE u_int min(u_int, u_int);
LIBKERN_INLINE long lmax(long, long);
LIBKERN_INLINE long lmin(long, long);
LIBKERN_INLINE u_long ulmax(u_long, u_long);
LIBKERN_INLINE u_long ulmin(u_long, u_long);
LIBKERN_INLINE int abs(int);

#ifdef LIBKERN_BODY
LIBKERN_INLINE int
imax(int a, int b)
{
	return (a > b ? a : b);
}
LIBKERN_INLINE int
imin(int a, int b)
{
	return (a < b ? a : b);
}
LIBKERN_INLINE long
lmax(long a, long b)
{
	return (a > b ? a : b);
}
LIBKERN_INLINE long
lmin(long a, long b)
{
	return (a < b ? a : b);
}
LIBKERN_INLINE u_int
max(u_int a, u_int b)
{
	return (a > b ? a : b);
}
LIBKERN_INLINE u_int
min(u_int a, u_int b)
{
	return (a < b ? a : b);
}
LIBKERN_INLINE u_long
ulmax(u_long a, u_long b)
{
	return (a > b ? a : b);
}
LIBKERN_INLINE u_long
ulmin(u_long a, u_long b)
{
	return (a < b ? a : b);
}

LIBKERN_INLINE int
abs(int j)
{
	return(j < 0 ? -j : j);
}
#endif

#ifdef NDEBUG						/* tradition! */
#define	assert(e)	((void)0)
#else
#ifdef __STDC__
#define	assert(e)	((e) ? (void)0 :				    \
			    __assert("", __FILE__, __LINE__, #e))
#else
#define	assert(e)	((e) ? (void)0 :				    \
			    __assert("", __FILE__, __LINE__, "e"))
#endif
#endif

#define	__KASSERTSTR	"kernel %sassertion \"%s\" failed: file \"%s\", line %d"

#ifndef DIAGNOSTIC
#define	KASSERTMSG(e, msg, ...)	((void)0)
#define	KASSERT(e)	((void)0)
#else
#ifdef __STDC__
#define	KASSERTMSG(e, msg, ...)	((e) ? (void)0 :			    \
			    panic(__KASSERTSTR " " msg, "diagnostic ", #e,  \
			    __FILE__, __LINE__, ## __VA_ARGS__))
#define	KASSERT(e)	((e) ? (void)0 :				    \
			    __assert("diagnostic ", __FILE__, __LINE__, #e))
#else
#define	KASSERTMSG(e, msg, ...)	((e) ? (void)0 :			    \
			    panic(__KASSERTSTR " " msg, "diagnostic ", "e", \
			    __FILE__, __LINE__, ## __VA_ARGS__))
#define	KASSERT(e)	((e) ? (void)0 :				    \
			    __assert("diagnostic ", __FILE__, __LINE__, "e"))
#endif
#endif

#ifndef DEBUG
#define	KDASSERTMSG(e, msg, ...)	((void)0)
#define	KDASSERT(e)	((void)0)
#else
#ifdef __STDC__
#define	KDASSERTMSG(e, msg, ...)	((e) ? (void)0 :		    \
			    panic(__KASSERTSTR " " msg, "debugging ", #e,   \
			    __FILE__, __LINE__, ## __VA_ARGS__))
#define	KDASSERT(e)	((e) ? (void)0 :				    \
			    __assert("debugging ", __FILE__, __LINE__, #e))
#else
#define	KDASSERTMSG(e, msg, ...)	((e) ? (void)0 :		    \
			    panic(__KASSERTSTR " " msg, "debugging ", "e",  \
			    __FILE__, __LINE__, ## __VA_ARGS__))
#define	KDASSERT(e)	((e) ? (void)0 :				    \
			    __assert("debugging ", __FILE__, __LINE__, "e"))
#endif
#endif

#define	CTASSERT(x)	extern char  _ctassert[(x) ? 1 : -1 ]	\
			    __attribute__((__unused__))

/* Prototypes for non-quad routines. */
void	 __assert(const char *, const char *, int, const char *)
	    __attribute__ ((__noreturn__));
int	 bcmp(const void *, const void *, size_t);
void	 bzero(void *, size_t);
void	 explicit_bzero(void *, size_t);
int	 ffs(int);
int	 fls(int);
int	 flsl(long);
void	*memchr(const void *, int, size_t);
int	 memcmp(const void *, const void *, size_t);
void	*memset(void *, int c, size_t len);
u_int32_t random(void);
int	 scanc(u_int, const u_char *, const u_char [], int);
int	 skpc(int, size_t, u_char *);
size_t	 strlen(const char *);
char	*strncpy(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
size_t	 strnlen(const char *, size_t);
size_t	 strlcpy(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
size_t	 strlcat(char *, const char *, size_t)
		__attribute__ ((__bounded__(__string__,1,3)));
int	 strcmp(const char *, const char *);
int	 strncmp(const char *, const char *, size_t);
int	 strncasecmp(const char *, const char *, size_t);
int	 getsn(char *, int);
char	*strchr(const char *, int);
char	*strrchr(const char *, int);
int	 timingsafe_bcmp(const void *, const void *, size_t);

#endif /* __LIBKERN_H__ */
@


1.33
log
@mop up #ifdef _KERNEL goo; ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.32 2014/01/19 12:45:36 deraadt Exp $	*/
d117 2
d120 1
d124 3
d130 3
d139 1
d143 3
d149 3
@


1.32
log
@Initialize ci_randseed better using arc4random() + a trick.  Remove the
libkern srandom() API since it is not suitable for this use.
ok kettenis miod
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.31 2013/07/11 01:20:32 jsg Exp $	*/
d155 1
@


1.31
log
@add fls/flsl functions to find the last bit set in a value
from FreeBSD
ok mikeb@@ haesbaert@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.30 2013/06/08 19:06:50 sf Exp $	*/
a155 1
void	 srandom(u_int32_t);
@


1.30
log
@Add CTASSERT macro, for compile time assertions

ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.29 2012/04/26 01:22:31 matthew Exp $	*/
d151 2
@


1.29
log
@Add strnlen() to libkern.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.28 2011/01/10 23:23:56 tedu Exp $	*/
d140 3
@


1.28
log
@add a new function, explicit_bzero, to be used for erasing "secret" stuff.
unlike normal bzero, we guarantee that the compiler will not optimize out
calls to this function for otherwise dead variables.
to be adjusted as needed when compilers and linkers get smarter.
ok deraadt miod
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.27 2010/07/20 15:28:44 matthew Exp $	*/
d157 1
@


1.27
log
@Add OpenSSH's timingsafe_bcmp() to libkern.

ok djm@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.26 2009/05/24 10:50:34 jsg Exp $	*/
d146 1
@


1.26
log
@ansi func decls
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.25 2008/10/15 23:23:51 deraadt Exp $	*/
d166 1
@


1.25
log
@make random(9) return per-cpu values (by saving the seed in the cpuinfo),
which are uniform for the profclock on each cpu in a SMP system (but using
a different seed for each cpu).  on all cpus, avoid seeding with a value out
of the [0, 2^31-1] range (since that is not stable)
ok kettenis drahn
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.24 2007/05/04 22:17:30 deraadt Exp $	*/
d58 1
a58 2
imax(a, b)
	int a, b;
d63 1
a63 2
imin(a, b)
	int a, b;
d68 1
a68 2
lmax(a, b)
	long a, b;
d73 1
a73 2
lmin(a, b)
	long a, b;
d78 1
a78 2
max(a, b)
	u_int a, b;
d83 1
a83 2
min(a, b)
	u_int a, b;
d88 1
a88 2
ulmax(a, b)
	u_long a, b;
d93 1
a93 2
ulmin(a, b)
	u_long a, b;
d99 1
a99 2
abs(j)
	int j;
@


1.24
log
@locc() is dead, spotted by miod
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.23 2007/05/04 22:14:37 deraadt Exp $	*/
d158 2
a159 2
u_long	 random(void);
void	 srandom(u_long);
@


1.23
log
@move bcd tables to the only place that uses them (the unused mcd driver);
ok miod
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.22 2004/08/07 00:38:32 deraadt Exp $	*/
a155 1
int	 locc(int, char *, u_int);
@


1.22
log
@ansi and some missing protos
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.21 2004/06/21 22:55:04 itojun Exp $	*/
a175 4

extern u_int8_t const __bcd2bin[], __bin2bcd[];
#define	bcd2bin(b)	(__bcd2bin[(b)&0xff])
#define	bin2bcd(b)	(__bin2bcd[(b)&0xff])
@


1.21
log
@add bounded attribute to some functions.  anil tested and ok'ed
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.20 2004/05/06 01:12:05 deraadt Exp $	*/
d154 1
d161 1
a161 1
int	 scanc(u_int, const u_char *, const u_char *, int);
@


1.20
log
@add back strchr/strrchr; from dhartmei
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.19 2003/06/23 21:02:27 millert Exp $	*/
d163 6
a168 3
char	*strncpy(char *, const char *, size_t);
size_t	 strlcpy(char *, const char *, size_t);
size_t	 strlcat(char *, const char *, size_t);
@


1.19
log
@Remove strcat() and strcpy() prototypes since we no longer have those
functions in kernel-land.  Noticed by Jim Rees; OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.18 2003/06/02 23:28:08 millert Exp $	*/
d170 2
@


1.18
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.17 2002/03/14 01:27:07 millert Exp $	*/
a162 2
char	*strcat(char *, const char *);
char	*strcpy(char *, const char *);
@


1.17
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.16 2000/12/18 18:40:44 provos Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.16
log
@strlcat and strlcpy into libkern.
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.15 2000/06/16 20:20:30 millert Exp $	*/
d50 9
a58 9
LIBKERN_INLINE int imax __P((int, int));
LIBKERN_INLINE int imin __P((int, int));
LIBKERN_INLINE u_int max __P((u_int, u_int));
LIBKERN_INLINE u_int min __P((u_int, u_int));
LIBKERN_INLINE long lmax __P((long, long));
LIBKERN_INLINE long lmin __P((long, long));
LIBKERN_INLINE u_long ulmax __P((u_long, u_long));
LIBKERN_INLINE u_long ulmin __P((u_long, u_long));
LIBKERN_INLINE int abs __P((int));
d155 1
a155 1
void	 __assert __P((const char *, const char *, int, const char *))
d157 19
a175 19
int	 bcmp __P((const void *, const void *, size_t));
int	 ffs __P((int));
int	 locc __P((int, char *, u_int));
void	*memchr __P((const void *, int, size_t));
int	 memcmp __P((const void *, const void *, size_t));
u_long	 random __P((void));
void	 srandom __P((u_long));
int	 scanc __P((u_int, const u_char *, const u_char *, int));
int	 skpc __P((int, size_t, u_char *));
size_t	 strlen __P((const char *));
char	*strcat __P((char *, const char *));
char	*strcpy __P((char *, const char *));
char	*strncpy __P((char *, const char *, size_t));
size_t	 strlcpy __P((char *, const char *, size_t));
size_t	 strlcat __P((char *, const char *, size_t));
int	 strcmp __P((const char *, const char *));
int	 strncmp __P((const char *, const char *, size_t));
int	 strncasecmp __P((const char *, const char *, size_t));
int	 getsn __P((char *, int));
@


1.16.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.16 2000/12/18 18:40:44 provos Exp $	*/
d50 9
a58 9
LIBKERN_INLINE int imax(int, int);
LIBKERN_INLINE int imin(int, int);
LIBKERN_INLINE u_int max(u_int, u_int);
LIBKERN_INLINE u_int min(u_int, u_int);
LIBKERN_INLINE long lmax(long, long);
LIBKERN_INLINE long lmin(long, long);
LIBKERN_INLINE u_long ulmax(u_long, u_long);
LIBKERN_INLINE u_long ulmin(u_long, u_long);
LIBKERN_INLINE int abs(int);
d155 1
a155 1
void	 __assert(const char *, const char *, int, const char *)
d157 19
a175 19
int	 bcmp(const void *, const void *, size_t);
int	 ffs(int);
int	 locc(int, char *, u_int);
void	*memchr(const void *, int, size_t);
int	 memcmp(const void *, const void *, size_t);
u_long	 random(void);
void	 srandom(u_long);
int	 scanc(u_int, const u_char *, const u_char *, int);
int	 skpc(int, size_t, u_char *);
size_t	 strlen(const char *);
char	*strcat(char *, const char *);
char	*strcpy(char *, const char *);
char	*strncpy(char *, const char *, size_t);
size_t	 strlcpy(char *, const char *, size_t);
size_t	 strlcat(char *, const char *, size_t);
int	 strcmp(const char *, const char *);
int	 strncmp(const char *, const char *, size_t);
int	 strncasecmp(const char *, const char *, size_t);
int	 getsn(char *, int);
@


1.15
log
@Pull memcmp() into libkern.
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.14 1997/11/30 21:47:45 mickey Exp $	*/
d170 2
@


1.15.2.1
log
@Pull in patch from current:
Errata (013):
Procfs contained numerous overflows, which could lead an intruder to root
permissions.  Procfs is NOT enabled by default in OpenBSD.
Fix (provos):
- strlcat and strlcpy into libkern.
- calculate length and allocate buffer for status. work by deraadt@@ and me
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.16 2000/12/18 18:40:44 provos Exp $	*/
a169 2
size_t	 strlcpy __P((char *, const char *, size_t));
size_t	 strlcat __P((char *, const char *, size_t));
@


1.14
log
@missed from last bcd2bin commit
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.13 1997/11/04 19:15:08 chuck Exp $	*/
d161 1
@


1.14.10.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.16 2000/12/18 18:40:44 provos Exp $	*/
a160 1
int	 memcmp __P((const void *, const void *, size_t));
a168 2
size_t	 strlcpy __P((char *, const char *, size_t));
size_t	 strlcat __P((char *, const char *, size_t));
@


1.14.10.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 9
a58 9
LIBKERN_INLINE int imax(int, int);
LIBKERN_INLINE int imin(int, int);
LIBKERN_INLINE u_int max(u_int, u_int);
LIBKERN_INLINE u_int min(u_int, u_int);
LIBKERN_INLINE long lmax(long, long);
LIBKERN_INLINE long lmin(long, long);
LIBKERN_INLINE u_long ulmax(u_long, u_long);
LIBKERN_INLINE u_long ulmin(u_long, u_long);
LIBKERN_INLINE int abs(int);
d155 1
a155 1
void	 __assert(const char *, const char *, int, const char *)
d157 19
a175 19
int	 bcmp(const void *, const void *, size_t);
int	 ffs(int);
int	 locc(int, char *, u_int);
void	*memchr(const void *, int, size_t);
int	 memcmp(const void *, const void *, size_t);
u_long	 random(void);
void	 srandom(u_long);
int	 scanc(u_int, const u_char *, const u_char *, int);
int	 skpc(int, size_t, u_char *);
size_t	 strlen(const char *);
char	*strcat(char *, const char *);
char	*strcpy(char *, const char *);
char	*strncpy(char *, const char *, size_t);
size_t	 strlcpy(char *, const char *, size_t);
size_t	 strlcat(char *, const char *, size_t);
int	 strcmp(const char *, const char *);
int	 strncmp(const char *, const char *, size_t);
int	 strncasecmp(const char *, const char *, size_t);
int	 getsn(char *, int);
@


1.14.10.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.14.10.2 2002/03/28 15:02:00 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.14.10.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d163 2
@


1.14.10.5
log
@Merge with the trunk
@
text
@a169 2
char	*strchr(const char *, int);
char	*strrchr(const char *, int);
@


1.13
log
@add prototype for memchr
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.12 1997/09/14 19:10:49 niklas Exp $	*/
d173 4
@


1.12
log
@From NetBSD: assert stuff
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.11 1997/05/05 14:35:09 millert Exp $	*/
d160 1
@


1.11
log
@Removed strchr() for libkern.
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.10 1997/05/04 23:33:38 millert Exp $	*/
d118 36
d155 2
@


1.10
log
@Alpha needs strchr.c
Fix up clean and depend targets in Makefile.inc so we can
include Makefile.inc in cases where there is already a
clean/depend target (based on a NetBSD Makefile.inc).
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.9 1997/03/30 22:05:10 mickey Exp $	*/
a129 1
char	*strchr __P((const char *, int));
@


1.9
log
@no more 2(two) md5 libs in kernel!
tested for rnd(4).... should work for ip too, since it's
the copy of ip_md*.
use sys/md5k.h for protos.... std iface forever!
hurray!
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.8 1997/01/18 13:39:29 mickey Exp $	*/
a123 1
char	*rindex __P((const char *, int));
d130 1
@


1.8
log
@protect from multiple includes (required by gpl_math_emulate)
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.7 1996/12/06 12:21:06 niklas Exp $	*/
a134 2
void	 MD5Init __P((u_int32_t[4]));
void	 MD5Transform __P((u_int32_t[4], u_int32_t const [16]));
@


1.7
log
@Promise to not change arg 2 & 3 to scanc
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.6 1996/08/11 20:39:08 niklas Exp $	*/
d39 3
d137 2
@


1.6
log
@Move MD5 protos to a more sensible place
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.5 1996/08/10 21:41:15 deraadt Exp $	*/
d122 1
a122 1
int	 scanc __P((u_int, u_char *, u_char *, int));
@


1.5
log
@srandom() seeds random() at boottime
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.4 1996/06/16 01:14:21 deraadt Exp $	*/
d132 2
@


1.4
log
@add getsn(char *buf, int len)
@
text
@d1 1
a1 1
/*	$OpenBSD: libkern.h,v 1.2 1996/02/29 13:27:49 niklas Exp $	*/
d120 1
@


1.3
log
@NetBSD 960317 merge
@
text
@d130 1
@


1.2
log
@From NetBSD: Merge with NetBSD 960217
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: libkern.h,v 1.6 1996/02/13 23:48:26 christos Exp $	*/
d41 15
a55 9
static __inline int imax __P((int, int));
static __inline int imin __P((int, int));
static __inline u_int max __P((u_int, u_int));
static __inline u_int min __P((u_int, u_int));
static __inline long lmax __P((long, long));
static __inline long lmin __P((long, long));
static __inline u_long ulmax __P((u_long, u_long));
static __inline u_long ulmin __P((u_long, u_long));
static __inline int abs __P((int));
d57 2
a58 1
static __inline int
d64 1
a64 1
static __inline int
d70 1
a70 1
static __inline long
d76 1
a76 1
static __inline long
d82 1
a82 1
static __inline u_int
d88 1
a88 1
static __inline u_int
d94 1
a94 1
static __inline u_long
d100 1
a100 1
static __inline u_long
d107 1
a107 1
static __inline int
d113 1
d122 1
a122 1
int	 skpc __P((int, int, char *));
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: libkern.h,v 1.5 1995/09/23 20:35:47 leo Exp $	*/
d115 1
a117 1
size_t	 strlen __P((const char *));
d119 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
