head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.14
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.10
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.6
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.4
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.2
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.9.0.12
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.10
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.7
	UBC:1.5.0.22
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.20
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.18
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.12
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.06.10.04.16.57;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	cdWt8Fq9cWtmBa8c;

1.11
date	2009.11.07.23.09.35;	author jsg;	state Exp;
branches;
next	1.10;

1.10
date	2008.02.25.21.21.58;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.28.07.23.41;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.28.08;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.24.21.53.12;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.27.07;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.07.25.18.25.38;	author mickey;	state Exp;
branches
	1.5.12.1
	1.5.22.1;
next	1.4;

1.4
date	96.05.01.15.18.48;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.04.19.16.09.31;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.04.57.20;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.50;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.50;	author deraadt;	state Exp;
branches;
next	;

1.5.12.1
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.5.12.2;

1.5.12.2
date	2003.03.28.00.41.27;	author niklas;	state Exp;
branches;
next	1.5.12.3;

1.5.12.3
date	2003.06.07.11.03.41;	author ho;	state Exp;
branches;
next	;

1.5.22.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@mop up #ifdef _KERNEL goo; ok miod
@
text
@/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	$OpenBSD: quad.h,v 1.7 2009/11/07 23:09:35 jsg Exp $
 */

/*
 * Quad arithmetic.
 *
 * This library makes the following assumptions:
 *
 *  - The type long long (aka quad_t) exists.
 *
 *  - A quad variable is exactly twice as long as `int'.
 *
 *  - The machine's arithmetic is two's complement.
 *
 * This library can provide 128-bit arithmetic on a machine with 128-bit
 * quads and 64-bit ints, for instance, or 96-bit arithmetic on machines
 * with 48-bit ints.
 */

#include <sys/types.h>
#include <sys/limits.h>

/*
 * Depending on the desired operation, we view a `long long' (aka quad_t) in
 * one or more of the following formats.
 */
union uu {
	quad_t	q;		/* as a (signed) quad */
	u_quad_t uq;		/* as an unsigned quad */
	int	sl[2];		/* as two signed ints */
	u_int	ul[2];		/* as two unsigned ints */
};

/*
 * Define high and low parts of a quad_t.
 */
#define	H		_QUAD_HIGHWORD
#define	L		_QUAD_LOWWORD

/*
 * Total number of bits in a quad_t and in the pieces that make it up.
 * These are used for shifting, and also below for halfword extraction
 * and assembly.
 */
#define	QUAD_BITS	(sizeof(quad_t) * CHAR_BIT)
#define	INT_BITS	(sizeof(int) * CHAR_BIT)
#define	HALF_BITS	(sizeof(int) * CHAR_BIT / 2)

/*
 * Extract high and low shortwords from longword, and move low shortword of
 * longword to upper half of long, i.e., produce the upper longword of
 * ((quad_t)(x) << (number_of_bits_in_int/2)).  (`x' must actually be u_int.)
 *
 * These are used in the multiply code, to split a longword into upper
 * and lower halves, and to reassemble a product as a quad_t, shifted left
 * (sizeof(int)*CHAR_BIT/2).
 */
#define	HHALF(x)	((u_int)(x) >> HALF_BITS)
#define	LHALF(x)	((u_int)(x) & (((int)1 << HALF_BITS) - 1))
#define	LHUP(x)		((u_int)(x) << HALF_BITS)

typedef unsigned int	qshift_t;

quad_t __adddi3(quad_t, quad_t);
quad_t __anddi3(quad_t, quad_t);
quad_t __ashldi3(quad_t, qshift_t);
quad_t __ashrdi3(quad_t, qshift_t);
int __cmpdi2(quad_t, quad_t);
quad_t __divdi3(quad_t, quad_t);
quad_t __fixdfdi(double);
quad_t __fixsfdi(float);
u_quad_t __fixunsdfdi(double);
u_quad_t __fixunssfdi(float);
double __floatdidf(quad_t);
float __floatdisf(quad_t);
double __floatunsdidf(u_quad_t);
quad_t __iordi3(quad_t, quad_t);
quad_t __lshldi3(quad_t, qshift_t);
quad_t __lshrdi3(quad_t, qshift_t);
quad_t __moddi3(quad_t, quad_t);
quad_t __muldi3(quad_t, quad_t);
quad_t __negdi2(quad_t);
quad_t __one_cmpldi2(quad_t);
u_quad_t __qdivrem(u_quad_t, u_quad_t, u_quad_t *);
quad_t __subdi3(quad_t, quad_t);
int __ucmpdi2(u_quad_t, u_quad_t);
u_quad_t __udivdi3(u_quad_t, u_quad_t );
u_quad_t __umoddi3(u_quad_t, u_quad_t );
quad_t __xordi3(quad_t, quad_t);
@


1.11
log
@remove gcc 1 workaround we no longer care about which
was breaking non GNUC defining compilers.

Came up during a conversation with ragge@@, positive
comments from several.
@
text
@d33 1
a33 1
 *	$OpenBSD: quad.h,v 1.10 2008/02/25 21:21:58 deraadt Exp $
a52 3
#if !defined(_KERNEL) && !defined(_STANDALONE)
#include <limits.h>
#else
a53 1
#endif
d102 7
@


1.10
log
@delete prototypes for functions which the kernel does not have
from brynet@@gmail.com
@
text
@d33 1
a33 1
 *	$OpenBSD: quad.h,v 1.9 2004/11/28 07:23:41 mickey Exp $
a97 7
/*
 * XXX
 * Compensate for gcc 1 vs gcc 2.  Gcc 1 defines ?sh?di3's second argument
 * as u_quad_t, while gcc 2 correctly uses int.  Unfortunately, we still use
 * both compilers.
 */
#if __GNUC_PREREQ__(2, 0) || defined(lint)
a98 3
#else
typedef u_quad_t	qshift_t;
#endif
@


1.9
log
@sync from libc
@
text
@d33 1
a33 1
 *	$OpenBSD: quad.h,v 1.6 2004/11/28 07:09:13 mickey Exp $
a115 7
quad_t __fixdfdi(double);
quad_t __fixsfdi(float);
u_quad_t __fixunsdfdi(double);
u_quad_t __fixunssfdi(float);
double __floatdidf(quad_t);
float __floatdisf(quad_t);
double __floatunsdidf(u_quad_t);
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@a0 3
/*	$OpenBSD: quad.h,v 1.7 2002/04/24 21:53:12 espie Exp $	*/
/*	$NetBSD: quad.h,v 1.7 1996/04/18 02:20:04 cgd Exp $	*/

d33 1
a33 1
 *	@@(#)quad.h	8.1 (Berkeley) 6/4/93
d43 1
a43 1
 *  - A quad variable is exactly twice as long as `long'.
d48 2
a49 2
 * quads and 64-bit longs, for instance, or 96-bit arithmetic on machines
 * with 48-bit longs.
d66 2
a67 2
	long	sl[2];		/* as two signed longs */
	u_long	ul[2];		/* as two unsigned longs */
d71 1
a71 1
 * Define high and low longwords.
d82 2
a83 2
#define	LONG_BITS	(sizeof(long) * CHAR_BIT)
#define	HALF_BITS	(sizeof(long) * CHAR_BIT / 2)
d88 1
a88 1
 * ((quad_t)(x) << (number_of_bits_in_long/2)).  (`x' must actually be u_long.)
d92 1
a92 1
 * (sizeof(long)*CHAR_BIT/2).
d94 3
a96 5
#define	HHALF(x)	((u_long)(x) >> HALF_BITS)
#define	LHALF(x)	((u_long)(x) & (((long)1 << HALF_BITS) - 1))
#define	LHUP(x)		((u_long)(x) << HALF_BITS)

extern u_quad_t __qdivrem(u_quad_t u, u_quad_t v, u_quad_t *rem);
d104 1
a104 1
#if __GNUC__ >= 2
d110 26
a135 20
__BEGIN_DECLS
quad_t	__adddi3(quad_t, quad_t);
quad_t	__anddi3(quad_t, quad_t);
quad_t	__ashldi3(quad_t, qshift_t);
quad_t	__ashrdi3(quad_t, qshift_t);
int	__cmpdi2(quad_t, quad_t);
quad_t	__divdi3(quad_t, quad_t);
quad_t	__iordi3(quad_t, quad_t);
quad_t	__lshldi3(quad_t, qshift_t);
quad_t	__lshrdi3(quad_t, qshift_t);
quad_t	__moddi3(quad_t, quad_t);
quad_t	__muldi3(quad_t, quad_t);
quad_t	__negdi2(quad_t);
quad_t	__one_cmpldi2(quad_t);
quad_t	__subdi3(quad_t, quad_t);
int	__ucmpdi2(u_quad_t, u_quad_t);
u_quad_t __udivdi3(u_quad_t, u_quad_t);
u_quad_t __umoddi3(u_quad_t, u_quad_t);
quad_t	__xordi3(quad_t, quad_t);
__END_DECLS
@


1.7
log
@Introduce a new file, machine/internal_types.h, to hold that specific arch
type characteristics.

internal_types.h will contain only settings invisible from standard C, e.g.,
in the __* or _[A-Z]* namespace, and be reused by files like limits.h.

This allows us to shorten machine/limits.h greatly, as all the common defines
are now in sys/limits.h, plus a small stub in internal_types.h.

Tested on all arches as far as I know.
Approved after discussion with art, millert, deraadt, and others.
@
text
@d1 1
a1 1
/*	$OpenBSD: quad.h,v 1.6 2002/03/14 01:27:07 millert Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: quad.h,v 1.5 1997/07/25 18:25:38 mickey Exp $	*/
d63 1
a63 1
#include <machine/limits.h>
@


1.5
log
@_STANDALONE needs <machine/limits.h> too
@
text
@d1 1
a1 1
/*	$OpenBSD: quad.h,v 1.3 1996/04/19 16:09:31 niklas Exp $	*/
d105 1
a105 1
extern u_quad_t __qdivrem __P((u_quad_t u, u_quad_t v, u_quad_t *rem));
d120 18
a137 18
quad_t	__adddi3	__P((quad_t, quad_t));
quad_t	__anddi3	__P((quad_t, quad_t));
quad_t	__ashldi3	__P((quad_t, qshift_t));
quad_t	__ashrdi3	__P((quad_t, qshift_t));
int	__cmpdi2	__P((quad_t, quad_t));
quad_t	__divdi3	__P((quad_t, quad_t));
quad_t	__iordi3	__P((quad_t, quad_t));
quad_t	__lshldi3	__P((quad_t, qshift_t));
quad_t	__lshrdi3	__P((quad_t, qshift_t));
quad_t	__moddi3	__P((quad_t, quad_t));
quad_t	__muldi3	__P((quad_t, quad_t));
quad_t	__negdi2	__P((quad_t));
quad_t	__one_cmpldi2	__P((quad_t));
quad_t	__subdi3	__P((quad_t, quad_t));
int	__ucmpdi2	__P((u_quad_t, u_quad_t));
u_quad_t __udivdi3	__P((u_quad_t, u_quad_t));
u_quad_t __umoddi3	__P((u_quad_t, u_quad_t));
quad_t	__xordi3	__P((quad_t, quad_t));
@


1.5.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: quad.h,v 1.5 1997/07/25 18:25:38 mickey Exp $	*/
d63 1
a63 1
#include <sys/limits.h>
d105 1
a105 1
extern u_quad_t __qdivrem(u_quad_t u, u_quad_t v, u_quad_t *rem);
d120 18
a137 18
quad_t	__adddi3(quad_t, quad_t);
quad_t	__anddi3(quad_t, quad_t);
quad_t	__ashldi3(quad_t, qshift_t);
quad_t	__ashrdi3(quad_t, qshift_t);
int	__cmpdi2(quad_t, quad_t);
quad_t	__divdi3(quad_t, quad_t);
quad_t	__iordi3(quad_t, quad_t);
quad_t	__lshldi3(quad_t, qshift_t);
quad_t	__lshrdi3(quad_t, qshift_t);
quad_t	__moddi3(quad_t, quad_t);
quad_t	__muldi3(quad_t, quad_t);
quad_t	__negdi2(quad_t);
quad_t	__one_cmpldi2(quad_t);
quad_t	__subdi3(quad_t, quad_t);
int	__ucmpdi2(u_quad_t, u_quad_t);
u_quad_t __udivdi3(u_quad_t, u_quad_t);
u_quad_t __umoddi3(u_quad_t, u_quad_t);
quad_t	__xordi3(quad_t, quad_t);
@


1.5.12.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d105 1
a105 1
extern u_quad_t __qdivrem(u_quad_t u, u_quad_t v, u_quad_t *rem);
d120 18
a137 18
quad_t	__adddi3(quad_t, quad_t);
quad_t	__anddi3(quad_t, quad_t);
quad_t	__ashldi3(quad_t, qshift_t);
quad_t	__ashrdi3(quad_t, qshift_t);
int	__cmpdi2(quad_t, quad_t);
quad_t	__divdi3(quad_t, quad_t);
quad_t	__iordi3(quad_t, quad_t);
quad_t	__lshldi3(quad_t, qshift_t);
quad_t	__lshrdi3(quad_t, qshift_t);
quad_t	__moddi3(quad_t, quad_t);
quad_t	__muldi3(quad_t, quad_t);
quad_t	__negdi2(quad_t);
quad_t	__one_cmpldi2(quad_t);
quad_t	__subdi3(quad_t, quad_t);
int	__ucmpdi2(u_quad_t, u_quad_t);
u_quad_t __udivdi3(u_quad_t, u_quad_t);
u_quad_t __umoddi3(u_quad_t, u_quad_t);
quad_t	__xordi3(quad_t, quad_t);
@


1.5.12.2
log
@Sync the SMP branch with 3.3
@
text
@d63 1
a63 1
#include <sys/limits.h>
@


1.5.12.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: quad.h,v 1.5.12.2 2003/03/28 00:41:27 niklas Exp $	*/
d20 5
a24 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4
log
@switch on _KERNEL to pull in correct headers
@
text
@d60 1
a60 1
#ifndef _KERNEL
@


1.3
log
@NetBSD 960317 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: quad.h,v 1.6 1996/03/14 18:52:14 christos Exp $	*/
d60 1
d62 3
@


1.2
log
@update from netbsd
@
text
@d1 2
a2 1
/*	$NetBSD: quad.h,v 1.5 1995/10/12 15:13:58 jtc Exp $	*/
d114 21
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: quad.h,v 1.4.2.1 1995/10/12 15:17:26 jtc Exp $	*/
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
