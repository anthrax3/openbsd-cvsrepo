head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.24
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.26
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.22
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.18
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.20
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.18.0.12
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.16
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.14
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.18.0.10
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.8
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.6
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.4
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.18
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.16
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.12
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.17.0.14
	OPENBSD_4_6_BASE:1.17
	OPENBSD_4_5:1.17.0.10
	OPENBSD_4_5_BASE:1.17
	OPENBSD_4_4:1.17.0.8
	OPENBSD_4_4_BASE:1.17
	OPENBSD_4_3:1.17.0.6
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.4
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.2
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.16.0.6
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.4
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.12.0.8
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.12
	OPENBSD_3_3:1.12.0.6
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.4
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.2
	OPENBSD_3_1_BASE:1.12
	UBC_SYNC_B:1.12
	UBC:1.11.0.6
	UBC_BASE:1.11
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_8:1.10.0.4
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.2
	OPENBSD_2_7_BASE:1.10
	SMP:1.9.0.6
	SMP_BASE:1.9
	kame_19991208:1.9
	OPENBSD_2_6:1.9.0.4
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.9.0.2
	OPENBSD_2_5_BASE:1.9
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2;
locks; strict;
comment	@ * @;


1.18
date	2011.07.07.02.57.24;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2006.11.29.10.37.03;	author mickey;	state Exp;
branches;
next	1.16;

1.16
date	2005.07.20.15.56.46;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2004.12.03.03.07.09;	author djm;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.17.04.58.56;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.16.23.57.48;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.12.00.26.30;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2000.11.08.15.39.10;	author art;	state Exp;
branches
	1.11.4.1
	1.11.6.1;
next	1.10;

1.10
date	2000.03.03.00.54.57;	author todd;	state Exp;
branches;
next	1.9;

1.9
date	99.02.14.20.06.05;	author mickey;	state Exp;
branches
	1.9.6.1;
next	1.8;

1.8
date	99.02.14.19.47.37;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	98.09.08.04.07.49;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.09.08.03.41.11;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.09.08.03.32.05;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.11.07.15.57.53;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	97.07.18.01.08.02;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.02.07.13.26.33;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	97.02.06.02.56.56;	author downsj;	state Exp;
branches;
next	;

1.9.6.1
date	2000.03.24.09.09.28;	author niklas;	state Exp;
branches;
next	1.9.6.2;

1.9.6.2
date	2001.05.14.22.32.52;	author niklas;	state Exp;
branches;
next	1.9.6.3;

1.9.6.3
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.9.6.4;

1.9.6.4
date	2004.02.19.10.57.19;	author niklas;	state Exp;
branches;
next	;

1.11.4.1
date	2002.03.13.15.54.29;	author jason;	state Exp;
branches;
next	;

1.11.6.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Replace the cruddy old sys/net/zlib.[ch].  We now use the sys/lib/libz
code.  Missing chunks of the API are imported from the libc version,
with a few #ifdef's to port it into the kernel environment.

The bootblocks already used the newer code, and should encounter no
surprises since there are so few changes to the existing files. In
the kernel, ipcomp and kernel ppp are changed to the new API.
ipcomp has been tested.

ok tedu the brave
@
text
@/*	$OpenBSD: zutil.h,v 1.17 2006/11/29 10:37:03 mickey Exp $	*/
/* zutil.h -- internal interface and configuration of the compression library
 * Copyright (C) 1995-2005 Jean-loup Gailly.
 * For conditions of distribution and use, see copyright notice in zlib.h
 */

/* WARNING: this file should *not* be used by applications. It is
   part of the implementation of the compression library and is
   subject to change. Applications should only use zlib.h.
 */


#ifndef ZUTIL_H
#define ZUTIL_H

#define ZLIB_INTERNAL
#include "zlib.h"

#ifdef _KERNEL
#include <sys/param.h>
#include <sys/systm.h>
#define MY_ZCALLOC
#else

#ifdef _STANDALONE
#include <lib/libsa/stand.h>
#else
#ifdef STDC
#  ifndef _WIN32_WCE
#    include <stddef.h>
#  endif
#  include <string.h>
#  include <stdlib.h>
#endif
#ifdef NO_ERRNO_H
#   ifdef _WIN32_WCE
      /* The Microsoft C Run-Time Library for Windows CE doesn't have
       * errno.  We define it as a global variable to simplify porting.
       * Its value is always 0 and should not be used.  We rename it to
       * avoid conflict with other libraries that use the same workaround.
       */
#     define errno z_errno
#   endif
    extern int errno;
#else
#  ifndef _WIN32_WCE
#    include <errno.h>
#  endif
#endif
#endif

#endif

#ifndef local
#  define local static
#endif
/* compile with -Dlocal if your debugger can't find static symbols */

typedef unsigned char  uch;
typedef uch FAR uchf;
typedef unsigned short ush;
typedef ush FAR ushf;
typedef unsigned long  ulg;

extern const char * const z_errmsg[10]; /* indexed by 2-zlib_error */
/* (size given to avoid silly warnings with Visual C++) */

#define ERR_MSG(err) z_errmsg[Z_NEED_DICT-(err)]

#define ERR_RETURN(strm,err) \
  return (strm->msg = (char*)ERR_MSG(err), (err))
/* To be used only when the state is known to be valid */

        /* common constants */

#ifndef DEF_WBITS
#  define DEF_WBITS MAX_WBITS
#endif
/* default windowBits for decompression. MAX_WBITS is for compression only */

#if MAX_MEM_LEVEL >= 8
#  define DEF_MEM_LEVEL 8
#else
#  define DEF_MEM_LEVEL  MAX_MEM_LEVEL
#endif
/* default memLevel */

#define STORED_BLOCK 0
#define STATIC_TREES 1
#define DYN_TREES    2
/* The three kinds of block type */

#define MIN_MATCH  3
#define MAX_MATCH  258
/* The minimum and maximum match lengths */

#define PRESET_DICT 0x20 /* preset dictionary flag in zlib header */

        /* target dependencies */

#if defined(MSDOS) || (defined(WINDOWS) && !defined(WIN32))
#  define OS_CODE  0x00
#  if defined(__TURBOC__) || defined(__BORLANDC__)
#    if(__STDC__ == 1) && (defined(__LARGE__) || defined(__COMPACT__))
       /* Allow compilation with ANSI keywords only enabled */
       void _Cdecl farfree( void *block );
       void *_Cdecl farmalloc( unsigned long nbytes );
#    else
#      include <alloc.h>
#    endif
#  else /* MSC or DJGPP */
#    include <malloc.h>
#  endif
#endif

#ifdef AMIGA
#  define OS_CODE  0x01
#endif

#if defined(VAXC) || defined(VMS)
#  define OS_CODE  0x02
#  define F_OPEN(name, mode) \
     fopen((name), (mode), "mbc=60", "ctx=stm", "rfm=fix", "mrs=512")
#endif

#if defined(ATARI) || defined(atarist)
#  define OS_CODE  0x05
#endif

#ifdef OS2
#  define OS_CODE  0x06
#  ifdef M_I86
     #include <malloc.h>
#  endif
#endif

#if defined(MACOS) || defined(TARGET_OS_MAC)
#  define OS_CODE  0x07
#  if defined(__MWERKS__) && __dest_os != __be_os && __dest_os != __win32_os
#    include <unix.h> /* for fdopen */
#  else
#    ifndef fdopen
#      define fdopen(fd,mode) NULL /* No fdopen() */
#    endif
#  endif
#endif

#ifdef TOPS20
#  define OS_CODE  0x0a
#endif

#ifdef WIN32
#  ifndef __CYGWIN__  /* Cygwin is Unix, not Win32 */
#    define OS_CODE  0x0b
#  endif
#endif

#ifdef __50SERIES /* Prime/PRIMOS */
#  define OS_CODE  0x0f
#endif

#if defined(_BEOS_) || defined(RISCOS)
#  define fdopen(fd,mode) NULL /* No fdopen() */
#endif

#if (defined(_MSC_VER) && (_MSC_VER > 600))
#  if defined(_WIN32_WCE)
#    define fdopen(fd,mode) NULL /* No fdopen() */
#    ifndef _PTRDIFF_T_DEFINED
       typedef int ptrdiff_t;
#      define _PTRDIFF_T_DEFINED
#    endif
#  else
#    define fdopen(fd,type)  _fdopen(fd,type)
#  endif
#endif

        /* common defaults */

#ifndef OS_CODE
#  define OS_CODE  0x03  /* assume Unix */
#endif

#ifndef F_OPEN
#  define F_OPEN(name, mode) fopen((name), (mode))
#endif

         /* functions */

#if defined(STDC99) || (defined(__TURBOC__) && __TURBOC__ >= 0x550)
#  ifndef HAVE_VSNPRINTF
#    define HAVE_VSNPRINTF
#  endif
#endif
#if defined(__CYGWIN__)
#  ifndef HAVE_VSNPRINTF
#    define HAVE_VSNPRINTF
#  endif
#endif
#ifndef HAVE_VSNPRINTF
#  ifdef MSDOS
     /* vsnprintf may exist on some MS-DOS compilers (DJGPP?),
        but for now we just assume it doesn't. */
#    define NO_vsnprintf
#  endif
#  ifdef __TURBOC__
#    define NO_vsnprintf
#  endif
#  ifdef WIN32
     /* In Win32, vsnprintf is available as the "non-ANSI" _vsnprintf. */
#    if !defined(vsnprintf) && !defined(NO_vsnprintf)
#      define vsnprintf _vsnprintf
#    endif
#  endif
#  ifdef __SASC
#    define NO_vsnprintf
#  endif
#endif
#ifdef VMS
#  define NO_vsnprintf
#endif

#if defined(pyr)
#  define NO_MEMCPY
#endif
#if defined(SMALL_MEDIUM) && !defined(_MSC_VER) && !defined(__SC__)
 /* Use our own functions for small and medium model with MSC <= 5.0.
  * You may have to use the same strategy for Borland C (untested).
  * The __SC__ check is for Symantec.
  */
#  define NO_MEMCPY
#endif
#if defined(STDC) && !defined(HAVE_MEMCPY) && !defined(NO_MEMCPY)
#  define HAVE_MEMCPY
#endif
#ifdef HAVE_MEMCPY
#  ifdef SMALL_MEDIUM /* MSDOS small or medium model */
#    define zmemcpy _fmemcpy
#    define zmemcmp _fmemcmp
#    define zmemzero(dest, len) _fmemset(dest, 0, len)
#  else
#    define zmemcpy memcpy
#    define zmemcmp memcmp
#    define zmemzero(dest, len) memset(dest, 0, len)
#  endif
#else
   extern void zmemcpy  OF((Bytef* dest, const Bytef* source, uInt len));
   extern int  zmemcmp  OF((const Bytef* s1, const Bytef* s2, uInt len));
   extern void zmemzero OF((Bytef* dest, uInt len));
#endif

/* Diagnostic functions */
#ifdef DEBUG_LIBZ
#  include <stdio.h>
   extern int z_verbose;
   extern void z_error    OF((char *m));
#  define Assert(cond,msg) {if(!(cond)) z_error(msg);}
#  define Trace(x) {if (z_verbose>=0) fprintf x ;}
#  define Tracev(x) {if (z_verbose>0) fprintf x ;}
#  define Tracevv(x) {if (z_verbose>1) fprintf x ;}
#  define Tracec(c,x) {if (z_verbose>0 && (c)) fprintf x ;}
#  define Tracecv(c,x) {if (z_verbose>1 && (c)) fprintf x ;}
#else
#  define Assert(cond,msg)
#  define Trace(x)
#  define Tracev(x)
#  define Tracevv(x)
#  define Tracec(c,x)
#  define Tracecv(c,x)
#endif


voidpf zcalloc OF((voidpf opaque, unsigned items, unsigned size));
void   zcfree  OF((voidpf opaque, voidpf ptr));

#define ZALLOC(strm, items, size) \
           (*((strm)->zalloc))((strm)->opaque, (items), (size))
#define ZFREE(strm, addr)  (*((strm)->zfree))((strm)->opaque, (voidpf)(addr))
#define TRY_FREE(s, p) {if (p) ZFREE(s, p);}

#endif /* ZUTIL_H */
@


1.17
log
@make it compile w/ debug defined; miod@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.h,v 1.16 2005/07/20 15:56:46 millert Exp $	*/
d19 6
d50 2
@


1.16
log
@Update to zlib 1.2.3; OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.h,v 1.15 2004/12/03 03:07:09 djm Exp $	*/
d245 1
a245 1
#ifdef DEBUG
@


1.15
log
@zlib-1.21 here too
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.h,v 1.14 2003/12/17 04:58:56 millert Exp $	*/
d3 1
a3 1
 * Copyright (C) 1995-2003 Jean-loup Gailly.
d23 3
a25 1
#  include <stddef.h>
d30 8
d40 3
a42 1
#   include <errno.h>
d124 3
a212 9
#endif

#ifdef HAVE_STRERROR
#  ifndef VMS
     extern char *strerror OF((int));
#  endif
#  define zstrerror(errnum) strerror(errnum)
#else
#  define zstrerror(errnum) ""
@


1.14
log
@#include <lib/libsa/stand.h> instead of just <stand.h> so we can avoid
adding an extra -I for each libz Makefile.  This is how the old kernel
libz was.
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.h,v 1.13 2003/12/16 23:57:48 millert Exp $	*/
d196 3
d201 3
a203 1
   extern char *strerror OF((int));
@


1.13
log
@Update to zlib 1.2.1
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.h,v 1.7 2003/12/16 22:33:02 henning Exp $	*/
d20 1
a20 1
#include <stand.h>
@


1.12
log
@Update to zlib-1.1.4
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.h,v 1.5 2000/03/02 00:29:52 todd Exp $	*/
d3 1
a3 1
 * Copyright (C) 1995-2002 Jean-loup Gailly.
d13 2
a14 2
#ifndef _Z_UTIL_H
#define _Z_UTIL_H
d16 1
d20 1
a20 1
#include <lib/libsa/stand.h>
d45 1
a45 1
extern const char *z_errmsg[10]; /* indexed by 2-zlib_error */
d81 1
a81 1
#ifdef MSDOS
d89 1
a89 1
#     include <alloc.h>
d96 2
a97 6
#ifdef OS2
#  define OS_CODE  0x06
#endif

#ifdef WIN32 /* Window 95 & Windows NT */
#  define OS_CODE  0x0b
d106 2
a107 2
#ifdef AMIGA
#  define OS_CODE  0x01
d110 2
a111 2
#if defined(ATARI) || defined(atarist)
#  define OS_CODE  0x05
d125 8
a132 2
#ifdef __50SERIES /* Prime/PRIMOS */
#  define OS_CODE  0x0F
d135 2
a136 2
#ifdef TOPS20
#  define OS_CODE  0x0a
d144 9
a152 1
#  define fdopen(fd,type)  _fdopen(fd,type)
d155 1
a155 2

        /* Common defaults */
d167 30
d235 1
a237 1
#  define z_error panic
d239 5
a243 5
#  define Trace(x) {if (z_verbose>=0) printf x ;}
#  define Tracev(x) {if (z_verbose>0) printf x ;}
#  define Tracevv(x) {if (z_verbose>1) printf x ;}
#  define Tracec(c,x) {if (z_verbose>0 && (c)) printf x ;}
#  define Tracecv(c,x) {if (z_verbose>1 && (c)) printf x ;}
a253 2
typedef uLong (ZEXPORT *check_func) OF((uLong check, const Bytef *buf,
				       uInt len));
d262 1
a262 1
#endif /* _Z_UTIL_H */
@


1.11
log
@Include stand.h from lib/libsa/stand.h
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.h,v 1.10 2000/03/03 00:54:57 todd Exp $	*/
d3 1
a3 1
 * Copyright (C) 1995-1998 Jean-loup Gailly.
@


1.11.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.h,v 1.11 2000/11/08 15:39:10 art Exp $	*/
d3 1
a3 1
 * Copyright (C) 1995-2002 Jean-loup Gailly.
@


1.11.4.1
log
@Pull in patch from current:
Fix (millert):
Update to zlib-1.1.4
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.h,v 1.12 2002/03/12 00:26:30 millert Exp $	*/
d3 1
a3 1
 * Copyright (C) 1995-2002 Jean-loup Gailly.
@


1.10
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.h,v 1.9 1999/02/14 20:06:05 mickey Exp $	*/
d19 1
a19 1
#include <stand.h>
@


1.9
log
@make z_error be a panic
@
text
@d1 1
a11 1
/* @@(#) $Id: zutil.h,v 1.8 1999/02/14 19:47:37 mickey Exp $ */
@


1.9.6.1
log
@Sync with -current
@
text
@a0 1
/*	$OpenBSD$	*/
d11 1
@


1.9.6.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: zutil.h,v 1.11 2000/11/08 15:39:10 art Exp $	*/
d19 1
a19 1
#include <lib/libsa/stand.h>
@


1.9.6.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d3 1
a3 1
 * Copyright (C) 1995-2002 Jean-loup Gailly.
@


1.9.6.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d3 1
a3 1
 * Copyright (C) 1995-2003 Jean-loup Gailly.
d13 2
a14 2
#ifndef ZUTIL_H
#define ZUTIL_H
a15 1
#define ZLIB_INTERNAL
d44 1
a44 1
extern const char * const z_errmsg[10]; /* indexed by 2-zlib_error */
d80 1
a80 1
#if defined(MSDOS) || (defined(WINDOWS) && !defined(WIN32))
d88 1
a88 1
#      include <alloc.h>
d95 6
a100 2
#ifdef AMIGA
#  define OS_CODE  0x01
d109 4
a116 4
#ifdef OS2
#  define OS_CODE  0x06
#endif

d128 4
a135 10
#ifdef WIN32
#  ifndef __CYGWIN__  /* Cygwin is Unix, not Win32 */
#    define OS_CODE  0x0b
#  endif
#endif

#ifdef __50SERIES /* Prime/PRIMOS */
#  define OS_CODE  0x0f
#endif

d141 1
a141 9
#  if defined(_WIN32_WCE)
#    define fdopen(fd,mode) NULL /* No fdopen() */
#    ifndef _PTRDIFF_T_DEFINED
       typedef int ptrdiff_t;
#      define _PTRDIFF_T_DEFINED
#    endif
#  else
#    define fdopen(fd,type)  _fdopen(fd,type)
#  endif
d144 2
a145 1
        /* common defaults */
a156 30
#if defined(STDC99) || (defined(__TURBOC__) && __TURBOC__ >= 0x550)
#  ifndef HAVE_VSNPRINTF
#    define HAVE_VSNPRINTF
#  endif
#endif
#if defined(__CYGWIN__)
#  ifndef HAVE_VSNPRINTF
#    define HAVE_VSNPRINTF
#  endif
#endif
#ifndef HAVE_VSNPRINTF
#  ifdef MSDOS
     /* vsnprintf may exist on some MS-DOS compilers (DJGPP?),
        but for now we just assume it doesn't. */
#    define NO_vsnprintf
#  endif
#  ifdef __TURBOC__
#    define NO_vsnprintf
#  endif
#  ifdef WIN32
     /* In Win32, vsnprintf is available as the "non-ANSI" _vsnprintf. */
#    if !defined(vsnprintf) && !defined(NO_vsnprintf)
#      define vsnprintf _vsnprintf
#    endif
#  endif
#  ifdef __SASC
#    define NO_vsnprintf
#  endif
#endif

a194 1
#  include <stdio.h>
d197 1
d199 5
a203 5
#  define Trace(x) {if (z_verbose>=0) fprintf x ;}
#  define Tracev(x) {if (z_verbose>0) fprintf x ;}
#  define Tracevv(x) {if (z_verbose>1) fprintf x ;}
#  define Tracec(c,x) {if (z_verbose>0 && (c)) fprintf x ;}
#  define Tracecv(c,x) {if (z_verbose>1 && (c)) fprintf x ;}
d214 2
d224 1
a224 1
#endif /* ZUTIL_H */
@


1.8
log
@fix -DDEBUG case, ie remove L-user-and stuff such as fprintf and stderr.
another obvious fix would be porting stdio file functions into
stand library, so code would go smooth from -lz, but former seems to be
a minimal-change-compliant approach.
@
text
@d11 1
a11 1
/* @@(#) $Id: zutil.h,v 1.7 1998/09/08 04:07:49 millert Exp $ */
d197 1
@


1.7
log
@Let's commit the correct files, shall we.  This is the real zlib-1.1.3...
@
text
@d11 1
a11 1
/* @@(#) $Id: zutil.h,v 1.4 1998/09/08 04:05:19 millert Exp $ */
a194 1
#  include <stdio.h>
d198 5
a202 5
#  define Trace(x) {if (z_verbose>=0) fprintf x ;}
#  define Tracev(x) {if (z_verbose>0) fprintf x ;}
#  define Tracevv(x) {if (z_verbose>1) fprintf x ;}
#  define Tracec(c,x) {if (z_verbose>0 && (c)) fprintf x ;}
#  define Tracecv(c,x) {if (z_verbose>1 && (c)) fprintf x ;}
@


1.6
log
@include stand.h if -D_STANDALONE
@
text
@d2 1
a2 1
 * Copyright (C) 1995-1996 Jean-loup Gailly.
d11 1
a11 1
/* $Id: zutil.h,v 1.5 1998/09/08 03:32:05 millert Exp $ */
a17 6
#if defined(MSDOS)||defined(VMS)||defined(CRAY)||defined(WIN32)||defined(RISCOS)
#   include <stddef.h>
#   include <errno.h>
#else
    extern int errno;
#endif
d22 1
d26 5
d82 8
a89 2
#  ifdef __TURBOC__
#    include <alloc.h>
d105 1
a105 1
#  define FOPEN(name, mode) \
d117 1
a117 1
#ifdef MACOS
d119 7
d140 5
d151 2
a152 2
#ifndef FOPEN
#  define FOPEN(name, mode) fopen((name), (mode))
d167 1
a167 1
#if (defined(M_I86SM) || defined(M_I86MM)) && !defined(_MSC_VER)
d170 1
d188 2
a189 2
   extern void zmemcpy  OF((Bytef* dest, Bytef* source, uInt len));
   extern int  zmemcmp  OF((Bytef* s1,   Bytef* s2, uInt len));
d196 1
a196 3
#  ifndef verbose
#    define verbose 0
#  endif
d199 5
a203 5
#  define Trace(x) fprintf x
#  define Tracev(x) {if (verbose) fprintf x ;}
#  define Tracevv(x) {if (verbose>1) fprintf x ;}
#  define Tracec(c,x) {if (verbose && (c)) fprintf x ;}
#  define Tracecv(c,x) {if (verbose>1 && (c)) fprintf x ;}
d214 2
a215 2
typedef uLong (*check_func) OF((uLong check, const Bytef *buf, uInt len));

@


1.5
log
@Update from zlib-1.1.3.  These should really just be references to ../../../lib/libz/*
@
text
@d11 1
a11 1
/* $Id: zutil.h,v 1.16 1996/07/24 13:41:13 me Exp $ */
d24 3
d30 1
@


1.4
log
@$OpenBSD$
@
text
@a0 1
/* $OpenBSD: zutil.h,v 1.3 1997/07/18 01:08:02 mickey Exp $ */
d11 1
a23 3
#ifdef _STANDALONE
#include <stand.h>
#else
a27 1
#endif
d171 1
a171 1
#ifdef DEBUG_ZLIB
@


1.3
log
@no user includes in standalone
@
text
@d1 1
a11 1
/* $Id: zutil.h,v 1.2 1997/02/07 13:26:33 mickey Exp $ */
@


1.2
log
@s/DEBUG/DEBUG_ZLIB/g
@
text
@d11 1
a11 1
/* $Id: zutil.h,v 1.1 1997/02/06 02:56:56 downsj Exp $ */
d24 3
d30 1
@


1.1
log
@Add libz and make libsa aware of it.  From NetBSD.
@
text
@d11 1
a11 1
/* $Id: zutil.h,v 1.2 1997/01/19 17:11:26 millert Exp $ */
d171 1
a171 1
#ifdef DEBUG
@
