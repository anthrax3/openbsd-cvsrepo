head	1.27;
access;
symbols
	OPENBSD_6_2:1.27.0.8
	OPENBSD_6_2_BASE:1.27
	OPENBSD_6_1:1.27.0.10
	OPENBSD_6_1_BASE:1.27
	OPENBSD_6_0:1.27.0.6
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.27.0.4
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.25.0.6
	OPENBSD_5_7_BASE:1.25
	OPENBSD_5_6:1.25.0.10
	OPENBSD_5_6_BASE:1.25
	OPENBSD_5_5:1.25.0.8
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.4
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.25.0.2
	OPENBSD_5_3_BASE:1.25
	OPENBSD_5_2:1.24.0.24
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.24
	OPENBSD_5_1:1.24.0.22
	OPENBSD_5_0:1.24.0.20
	OPENBSD_5_0_BASE:1.24
	OPENBSD_4_9:1.24.0.18
	OPENBSD_4_9_BASE:1.24
	OPENBSD_4_8:1.24.0.16
	OPENBSD_4_8_BASE:1.24
	OPENBSD_4_7:1.24.0.12
	OPENBSD_4_7_BASE:1.24
	OPENBSD_4_6:1.24.0.14
	OPENBSD_4_6_BASE:1.24
	OPENBSD_4_5:1.24.0.10
	OPENBSD_4_5_BASE:1.24
	OPENBSD_4_4:1.24.0.8
	OPENBSD_4_4_BASE:1.24
	OPENBSD_4_3:1.24.0.6
	OPENBSD_4_3_BASE:1.24
	OPENBSD_4_2:1.24.0.4
	OPENBSD_4_2_BASE:1.24
	OPENBSD_4_1:1.24.0.2
	OPENBSD_4_1_BASE:1.24
	OPENBSD_4_0:1.23.0.8
	OPENBSD_4_0_BASE:1.23
	OPENBSD_3_9:1.23.0.6
	OPENBSD_3_9_BASE:1.23
	OPENBSD_3_8:1.23.0.4
	OPENBSD_3_8_BASE:1.23
	OPENBSD_3_7:1.23.0.2
	OPENBSD_3_7_BASE:1.23
	OPENBSD_3_6:1.22.0.4
	OPENBSD_3_6_BASE:1.22
	SMP_SYNC_A:1.22
	SMP_SYNC_B:1.22
	OPENBSD_3_5:1.22.0.2
	OPENBSD_3_5_BASE:1.22
	OPENBSD_3_4:1.21.0.2
	OPENBSD_3_4_BASE:1.21
	UBC_SYNC_A:1.17
	OPENBSD_3_3:1.17.0.6
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.4
	OPENBSD_3_2_BASE:1.17
	OPENBSD_3_1:1.17.0.2
	OPENBSD_3_1_BASE:1.17
	UBC_SYNC_B:1.17
	UBC:1.14.0.14
	UBC_BASE:1.14
	OPENBSD_3_0:1.14.0.12
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_9:1.14.0.10
	OPENBSD_2_8:1.14.0.8
	OPENBSD_2_8_BASE:1.14
	OPENBSD_2_7:1.14.0.6
	OPENBSD_2_7_BASE:1.14
	SMP:1.14.0.4
	SMP_BASE:1.14
	kame_19991208:1.14
	OPENBSD_2_6:1.14.0.2
	OPENBSD_2_6_BASE:1.14
	OPENBSD_2_5:1.13.0.4
	OPENBSD_2_5_BASE:1.13
	OPENBSD_2_4:1.13.0.2
	OPENBSD_2_4_BASE:1.13
	OPENBSD_2_3:1.11.0.2
	OPENBSD_2_3_BASE:1.11
	OPENBSD_2_2:1.10.0.2
	OPENBSD_2_2_BASE:1.10
	OPENBSD_2_1:1.9.0.2
	OPENBSD_2_1_BASE:1.9
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2015.06.14.10.55.50;	author miod;	state Exp;
branches;
next	1.26;
commitid	pqqty1rXzlzONF6y;

1.26
date	2015.03.10.21.07.24;	author miod;	state Exp;
branches;
next	1.25;
commitid	T0XRzCs9ikTHWSMt;

1.25
date	2012.12.05.23.20.23;	author deraadt;	state Exp;
branches;
next	1.24;

1.24
date	2006.09.18.21.11.50;	author mpf;	state Exp;
branches;
next	1.23;

1.23
date	2004.09.22.22.05.11;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2004.01.03.14.08.53;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.02.23.28.09;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	2003.06.01.17.00.33;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.20.19.23.01;	author jason;	state Exp;
branches;
next	1.17;

1.17
date	2002.03.15.18.19.52;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2002.03.14.03.16.10;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.14.01.27.07;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	99.08.16.09.21.38;	author downsj;	state Exp;
branches
	1.14.4.1
	1.14.14.1;
next	1.13;

1.13
date	98.06.12.12.09.12;	author d;	state Exp;
branches;
next	1.12;

1.12
date	98.04.18.18.00.13;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	98.04.18.07.39.59;	author deraadt;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	97.07.25.17.28.36;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	97.02.06.15.51.13;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	97.02.06.14.26.08;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	97.02.06.14.22.33;	author mickey;	state Exp;
branches;
next	1.6;

1.6
date	96.12.08.15.15.54;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.10.29.07.47.48;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.10.24.12.11.07;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.09.20.14.20.25;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.02.29.13.29.23;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.58;	author deraadt;	state Exp;
branches;
next	;

1.11.2.1
date	98.04.18.18.01.22;	author deraadt;	state Exp;
branches;
next	;

1.14.4.1
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.14.4.2;

1.14.4.2
date	2003.06.07.11.03.42;	author ho;	state Exp;
branches;
next	1.14.4.3;

1.14.4.3
date	2004.02.19.10.57.19;	author niklas;	state Exp;
branches;
next	;

1.14.14.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Fix 1.26; kdoprnt() should not attempt to invoke va_end() at all, it's the
caller's responsibility to do so.
@
text
@/*	$OpenBSD: printf.c,v 1.26 2015/03/10 21:07:24 miod Exp $	*/
/*	$NetBSD: printf.c,v 1.10 1996/11/30 04:19:21 gwr Exp $	*/

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)printf.c	8.1 (Berkeley) 6/11/93
 */

/*
 * Scaled down version of printf(3).
 *
 * One additional format:
 *
 * The format %b is supported to decode error registers.
 * Its usage is:
 *
 *	printf("reg=%b\n", regval, "<base><arg>*");
 *
 * where <base> is the output base expressed as a control character, e.g.
 * \10 gives octal; \20 gives hex.  Each arg is a sequence of characters,
 * the first of which gives the bit number to be inspected (origin 1), and
 * the next characters (up to a control character, i.e. a character <= 32),
 * give the name of the register.  Thus:
 *
 *	printf("reg=%b\n", 3, "\10\2BITTWO\1BITONE\n");
 *
 * would produce output:
 *
 *	reg=3<BITTWO,BITONE>
 */

#include <sys/types.h>
#include <sys/stdarg.h>

#include "stand.h"

void kprintn(void (*)(int), u_long, int);
#ifdef LIBSA_LONGLONG_PRINTF
void kprintn64(void (*)(int), u_int64_t, int);
#endif
void kdoprnt(void (*)(int), const char *, va_list);

const char hexdig[] = "0123456789abcdef";

void
printf(const char *fmt, ...)
{
	va_list ap;

	va_start(ap, fmt);
	kdoprnt(putchar, fmt, ap);
	va_end(ap);
}

void
vprintf(const char *fmt, va_list ap)
{
	kdoprnt(putchar, fmt, ap);
}

void
kdoprnt(void (*put)(int), const char *fmt, va_list ap)
{
#ifdef LIBSA_LONGLONG_PRINTF
	u_int64_t ull;
#endif
	unsigned long ul;
	int ch, lflag;
	char *p;

	for (;;) {
		while ((ch = *fmt++) != '%') {
			if (ch == '\0')
				return;
			put(ch);
		}
		lflag = 0;
reswitch:	switch (ch = *fmt++) {
		case 'l':
			lflag++;
			goto reswitch;
#ifndef	STRIPPED
		case 'b':
		{
			int set, n;

			ul = va_arg(ap, int);
			p = va_arg(ap, char *);
			kprintn(put, ul, *p++);

			if (!ul)
				break;

			for (set = 0; (n = *p++);) {
				if (ul & (1 << (n - 1))) {
					put(set ? ',' : '<');
					for (; (n = *p) > ' '; ++p)
						put(n);
					set = 1;
				} else
					for (; *p > ' '; ++p)
						;
			}
			if (set)
				put('>');
		}
			break;
#endif
		case 'c':
			ch = va_arg(ap, int);
			put(ch & 0x7f);
			break;
		case 's':
			p = va_arg(ap, char *);
			while ((ch = *p++))
				put(ch);
			break;
		case 'd':
#ifdef LIBSA_LONGLONG_PRINTF
			if (lflag > 1) {
				ull = va_arg(ap, int64_t);
				if ((int64_t)ull < 0) {
					put('-');
					ull = -(int64_t)ull;
				}
				kprintn64(put, ull, 10);
				break;
			} 
#endif
			ul = lflag ?
			    va_arg(ap, long) : va_arg(ap, int);
			if ((long)ul < 0) {
				put('-');
				ul = -(long)ul;
			}
			kprintn(put, ul, 10);
			break;
		case 'o':
#ifdef LIBSA_LONGLONG_PRINTF
			if (lflag > 1) {
				ull = va_arg(ap, u_int64_t);
				kprintn64(put, ull, 8);
				break;
			} 
#endif
			ul = lflag ?
			    va_arg(ap, u_long) : va_arg(ap, u_int);
			kprintn(put, ul, 8);
			break;
		case 'u':
#ifdef LIBSA_LONGLONG_PRINTF
			if (lflag > 1) {
				ull = va_arg(ap, u_int64_t);
				kprintn64(put, ull, 10);
				break;
			} 
#endif
			ul = lflag ?
			    va_arg(ap, u_long) : va_arg(ap, u_int);
			kprintn(put, ul, 10);
			break;
		case 'p':
			put('0');
			put('x');
			lflag += sizeof(void *)==sizeof(u_long)? 1 : 0;
		case 'x':
#ifdef LIBSA_LONGLONG_PRINTF
			if (lflag > 1) {
				ull = va_arg(ap, u_int64_t);
				kprintn64(put, ull, 16);
				break;
			}
#else
 			if (lflag > 1) {
				/* hold an int64_t in base 16 */
				char *p, buf[(sizeof(u_int64_t) * NBBY / 4) + 1];
				u_int64_t ull;

 				ull = va_arg(ap, u_int64_t);
				p = buf;
				do {
					*p++ = hexdig[ull & 15];
				} while (ull >>= 4);
				do {
					put(*--p);
				} while (p > buf);
 				break;
 			}
#endif
			ul = lflag ?
			    va_arg(ap, u_long) : va_arg(ap, u_int);
			kprintn(put, ul, 16);
			break;
		default:
			put('%');
#ifdef LIBSA_LONGLONG_PRINTF
			while (--lflag)
#else
			if (lflag)
#endif
				put('l');
			put(ch);
		}
	}
}

void
kprintn(void (*put)(int), unsigned long ul, int base)
{
	/* hold a long in base 8 */
	char *p, buf[(sizeof(long) * NBBY / 3) + 1];

	p = buf;
	do {
		*p++ = hexdig[ul % base];
	} while (ul /= base);
	do {
		put(*--p);
	} while (p > buf);
}

#ifdef LIBSA_LONGLONG_PRINTF
void
kprintn64(void (*put)(int), u_int64_t ull, int base)
{
	/* hold an int64_t in base 8 */
	char *p, buf[(sizeof(u_int64_t) * NBBY / 3) + 1];

	p = buf;
	do {
		*p++ = hexdig[ull % base];
	} while (ull /= base);
	do {
		put(*--p);
	} while (p > buf);
}
#endif

int donottwiddle = 0;

void
twiddle(void)
{
	static int pos;

	if (!donottwiddle) {
		putchar("|/-\\"[pos++ & 3]);
		putchar('\b');
	}
}
@


1.26
log
@Invoke va_end() before returning, rather than in an unreachable place; mickey@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.25 2012/12/05 23:20:23 deraadt Exp $	*/
d99 1
a99 2
			if (ch == '\0') {
				va_end(ap);
a100 1
			}
@


1.25
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.24 2006/09/18 21:11:50 mpf Exp $	*/
d99 2
a100 1
			if (ch == '\0')
d102 1
a232 1
	va_end(ap);
@


1.24
log
@Add a hand rolled 64bit hex printf that can be used outside of
LIBSA_LONGLONG_PRINTF which requires 64bit math support.
With help from mickey@@
Tested on i386, amd64 and on alpha by mickey@@
OK mickey@@, miod@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.23 2004/09/22 22:05:11 miod Exp $	*/
a57 1
#include <sys/cdefs.h>
@


1.23
log
@Add code to let 32bit code *printf() {u,}int64_t values.
Only enabled if libsa is compiled with the adequate define, so as not to
grow bootblocks which do not need this feature.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.22 2004/01/03 14:08:53 espie Exp $	*/
d70 2
d199 17
a215 1
			} 
d243 1
a243 1
		*p++ = "0123456789abcdef"[ul % base];
d259 1
a259 1
		*p++ = "0123456789abcdef"[ull % base];
@


1.22
log
@put an mi wrapper around stdarg.h/varargs.h. gcc3 moved stdarg/varargs macros
to built-ins, so eventually we will have one version of these files.
Special adjustments for the kernel to cope: machine/stdarg.h -> sys/stdarg.h
and machine/ansi.h needs to have a _BSD_VA_LIST_ for syslog* prototypes.
okay millert@@, drahn@@, miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.21 2003/08/11 06:23:09 deraadt Exp $	*/
d65 3
d89 3
d105 1
a105 1
			lflag = 1;
d144 11
d164 7
d176 7
d192 7
d205 3
d209 1
d231 17
@


1.21
log
@ansification and knf and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.20 2003/06/02 23:28:09 millert Exp $	*/
d60 1
a60 1
#include <machine/stdarg.h>
@


1.20
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.19 2003/06/01 17:00:33 deraadt Exp $	*/
d84 1
a84 4
kdoprnt(put, fmt, ap)
	void (*put)(int);
	const char *fmt;
	va_list ap;
a85 1
	char *p;
d88 1
d105 1
d120 2
a121 1
					for (; *p > ' '; ++p);
d130 1
a130 1
				put(ch & 0x7f);
d176 1
a176 4
kprintn(put, ul, base)
	void (*put)(int);
	unsigned long ul;
	int base;
d178 1
a178 1
					/* hold a long in base 8 */
d193 1
a193 1
twiddle()
@


1.19
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.18 2003/05/20 19:23:01 jason Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.18
log
@de-register; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.17 2002/03/15 18:19:52 millert Exp $	*/
d68 2
a69 26
static void kprintn(void (*)(int), u_long, int);
static void kdoprnt(void (*)(int), const char *, va_list);

#ifndef	STRIPPED
static void sputchar(int);
static char *sbuf;

static void
sputchar(c)
	int c;
{
	*sbuf++ = c;
}

void
sprintf(char *buf, const char *fmt, ...)
{
	va_list ap;

	sbuf = buf;
	va_start(ap, fmt);
	kdoprnt(sputchar, fmt, ap);
	va_end(ap);
	*sbuf = '\0';
}
#endif	/* NO_SPRINTF */
d87 1
a87 1
static void
d180 1
a180 1
static void
@


1.17
log
@Kill #if __STDC__ used to do K&R vs. ANSI varargs/stdarg; just do things
the ANSI way.
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.16 2002/03/14 03:16:10 millert Exp $	*/
d117 1
a117 2
	register char *p;
	register int ch;
d119 1
a119 1
	int lflag;
d135 1
a135 1
			register int set, n;
@


1.16
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.15 2002/03/14 01:27:07 millert Exp $	*/
a63 1
#ifdef __STDC__
a64 3
#else
#include <machine/varargs.h>
#endif
a82 1
#ifdef __STDC__
a83 4
#else
sprintf(buf, fmt, va_alist)
	char *buf, *fmt;
#endif
a87 1
#ifdef __STDC__
a88 3
#else
	va_start(ap);
#endif
a95 1
#ifdef __STDC__
a96 4
#else
printf(fmt, va_alist)
	char *fmt;
#endif
a99 1
#ifdef __STDC__
a100 3
#else
	va_start(ap);
#endif
@


1.15
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.14 1999/08/16 09:21:38 downsj Exp $	*/
d72 2
a73 2
static void kprintn __P((void (*)(int), u_long, int));
static void kdoprnt __P((void (*)(int), const char *, va_list));
@


1.14
log
@Allow the twiddler to be disabled via a global.
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.13 1998/06/12 12:09:12 d Exp $	*/
d76 1
a76 1
static void sputchar __P((int));
d135 1
a135 1
	void (*put)__P((int));
d229 1
a229 1
	void (*put)__P((int));
@


1.14.14.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.14 1999/08/16 09:21:38 downsj Exp $	*/
d64 1
d66 3
d72 2
a73 2
static void kprintn(void (*)(int), u_long, int);
static void kdoprnt(void (*)(int), const char *, va_list);
d76 1
a76 1
static void sputchar(int);
d87 1
d89 4
d97 1
d99 3
d109 1
d111 4
d118 1
d120 3
d135 1
a135 1
	void (*put)(int);
d229 1
a229 1
	void (*put)(int);
@


1.14.4.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d64 1
d66 3
d72 2
a73 2
static void kprintn(void (*)(int), u_long, int);
static void kdoprnt(void (*)(int), const char *, va_list);
d76 1
a76 1
static void sputchar(int);
d87 1
d89 4
d97 1
d99 3
d109 1
d111 4
d118 1
d120 3
d135 1
a135 1
	void (*put)(int);
d229 1
a229 1
	void (*put)(int);
@


1.14.4.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.14.4.1 2002/03/28 15:02:00 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
d68 26
a93 2
void kprintn(void (*)(int), u_long, int);
void kdoprnt(void (*)(int), const char *, va_list);
d111 1
a111 1
void
d117 2
a118 1
	char *p;
d120 1
a120 1
	int ch, lflag;
d136 1
a136 1
			int set, n;
d205 1
a205 1
void
@


1.14.4.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d60 1
a60 1
#include <sys/stdarg.h>
d84 4
a87 1
kdoprnt(void (*put)(int), const char *fmt, va_list ap)
d89 1
a91 1
	char *p;
a107 1

d122 1
a122 2
					for (; *p > ' '; ++p)
						;
d131 1
a131 1
			put(ch & 0x7f);
d177 4
a180 1
kprintn(void (*put)(int), unsigned long ul, int base)
d182 1
a182 1
	/* hold a long in base 8 */
d197 1
a197 1
twiddle(void)
@


1.13
log
@fix potential bug where sprintf and %p would write to console
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.12 1998/04/18 18:00:13 deraadt Exp $	*/
d245 2
d252 4
a255 2
	putchar("|/-\\"[pos++ & 3]);
	putchar('\b');
@


1.12
log
@cannot grow this as mickey wants
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.10 1997/07/25 17:28:36 mickey Exp $	*/
d209 2
a210 2
			putchar('0');
			putchar('x');
@


1.11
log
@i386 bootblocks that work for 2.3. A tale too long to tell
@
text
@d142 1
a142 1
	int lflag, zpad;
d150 1
a150 1
		zpad = lflag = 0;
a151 3
		case '0':
			zpad = 1;
			goto reswitch;
d201 1
a201 1
			kprintn(put, ul, (zpad? -8:8));
d209 2
a210 3
			put('0');
			put('x');
			zpad = 1;
d215 1
a215 1
			kprintn(put, ul, (zpad? -16: 16));
d233 2
a234 3
#define	NDIGITS(blog)	((sizeof(long) * NBBY + blog - 1) / blog)
	char *p, buf[NDIGITS(3) + 1];	/* hold a long in base 8 */
	int zpad = (base==-8)? NDIGITS(3) : ((base==-16)? NDIGITS(4) : 0);
a235 2
	if (base < 0)
		base = -base;
a239 3
	if (zpad)
		while((p - buf) < zpad)
			*p++ = '0';
@


1.11.2.1
log
@fix release branch: cannot grow this as mickey wants
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.12 1998/04/18 18:00:13 deraadt Exp $	*/
d142 1
a142 1
	int lflag;
d150 1
a150 1
		lflag = 0;
d152 3
d204 1
a204 1
			kprintn(put, ul, 8);
d212 3
a214 2
			putchar('0');
			putchar('x');
d219 1
a219 1
			kprintn(put, ul, 16);
d237 3
a239 2
					/* hold a long in base 8 */
	char *p, buf[(sizeof(long) * NBBY / 3) + 1];
d241 2
d247 3
@


1.10
log
@userland bye-bye
(arch/machine/libsa have to have machine link or smth)
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.9 1997/02/06 15:51:13 mickey Exp $	*/
d142 1
a142 1
	int lflag;
d150 1
a150 1
		lflag = 0;
d152 3
d204 1
a204 1
			kprintn(put, ul, 8);
d212 3
a214 2
			putchar('0');
			putchar('x');
d219 1
a219 1
			kprintn(put, ul, 16);
d237 3
a239 2
					/* hold a long in base 8 */
	char *p, buf[(sizeof(long) * NBBY / 3) + 1];
d241 2
d247 3
@


1.9
log
@print 0x for %p
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.8 1997/02/06 14:26:08 mickey Exp $	*/
d65 1
a65 1
#include <stdarg.h>
d67 1
a67 1
#include <varargs.h>
@


1.8
log
@better heuristic for %p:
assume l for x only if sizeof(void *)==sizeof(u_long), else it's u_int (;
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.7 1997/02/06 14:22:33 mickey Exp $	*/
d209 2
@


1.7
log
@remove net/zlib.c (use -lz now)
export NO_NET and SA_ZLIB to the Makefile (from Makefile.inc)
add -p printf flag (tiny code) just for gcc -Wall
import latest alloc.c from netbsd
text    data    bss     dec     hex
400     8       0       408     198
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.6 1996/12/08 15:15:54 niklas Exp $	*/
d209 1
a209 1
			lflag++;
@


1.6
log
@Merge to NetBSD 961207
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.5 1996/10/29 07:47:48 mickey Exp $	*/
d208 2
@


1.5
log
@move vars closer to the usage.
strip a bit for xxboot/bootxx.
@
text
@d1 2
a2 2
/*	$OpenBSD: printf.c,v 1.4 1996/10/24 12:11:07 mickey Exp $	*/
/*	$NetBSD: printf.c,v 1.7 1996/02/08 20:19:36 gwr Exp $	*/
d73 1
a73 1
static void kprintf __P((void (*)(int), const char *, va_list));
d102 1
a102 1
	kprintf(sputchar, fmt, ap);
d123 1
a123 1
	kprintf(putchar, fmt, ap);
d130 1
a130 1
	kprintf(putchar, fmt, ap);
d134 1
a134 1
kprintf(put, fmt, ap)
@


1.4
log
@fix protos and decls.
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.3 1996/09/20 14:20:25 mickey Exp $	*/
d75 1
a75 1
#ifndef	NO_SPRINTF
d140 1
a140 1
	register int ch, n;
d142 1
a142 1
	int lflag, set;
d155 1
d157 2
d177 1
d179 1
@


1.3
log
@fix makefiles. cleanup, addopt for boot.
@
text
@d1 1
a1 1
/*	$OpenBSD: printf.c,v 1.2 1996/02/29 13:29:23 niklas Exp $	*/
a72 1
static void sputchar __P((int));
d76 1
d133 1
a133 1
void
@


1.2
log
@From NetBSD: Merge with NetBSD 960217
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d76 1
d106 1
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: printf.c,v 1.6 1995/09/03 20:51:21 pk Exp $	*/
d123 6
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
