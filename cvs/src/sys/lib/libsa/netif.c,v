head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.8
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.4
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.8.0.38
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.36
	OPENBSD_5_0:1.8.0.34
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.32
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.30
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.26
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.28
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.24
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.22
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.20
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.18
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.6.0.16
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.14
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_9:1.6.0.12
	OPENBSD_2_8:1.6.0.10
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	SMP:1.6.0.6
	SMP_BASE:1.6
	kame_19991208:1.6
	OPENBSD_2_6:1.6.0.4
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.2
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.03.14.23.08.06;	author krw;	state Exp;
branches;
next	1.10;
commitid	kCz5QgxnxRMKOzNf;

1.10
date	2014.07.13.15.31.20;	author mpi;	state Exp;
branches;
next	1.9;
commitid	7SdCoErqwI9qHMpK;

1.9
date	2012.12.05.23.20.23;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.01.17.00.33;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	99.01.11.05.12.26;	author millert;	state Exp;
branches
	1.6.6.1;
next	1.5;

1.5
date	97.07.17.23.06.04;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.12.08.15.15.52;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.10.29.08.44.09;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.09.23.14.18.59;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.57;	author deraadt;	state Exp;
branches;
next	;

1.6.6.1
date	2003.06.07.11.03.42;	author ho;	state Exp;
branches;
next	1.6.6.2;

1.6.6.2
date	2004.02.19.10.57.19;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Change a bunch of (<blah> *)0 to NULL.

ok beck@@ deraadt@@
@
text
@/*	$OpenBSD: netif.c,v 1.10 2014/07/13 15:31:20 mpi Exp $	*/
/*	$NetBSD: netif.c,v 1.7 1996/10/13 02:29:03 christos Exp $	*/

/*
 * Copyright (c) 1993 Adam Glass
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Adam Glass.
 * 4. The name of the Author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Adam Glass ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/mount.h>

#include <netinet/in.h>

#include "stand.h"
#include "net.h"
#include "netif.h"

struct iodesc sockets[SOPEN_MAX];
#ifdef NETIF_DEBUG
int netif_debug = 0;
#endif

/*
 * netif_init:
 *
 * initialize the generic network interface layer
 */

void
netif_init(void)
{
	struct netif_driver *drv;
	int d, i;

#ifdef NETIF_DEBUG
	if (netif_debug)
		printf("netif_init: called\n");
#endif
	for (d = 0; d < n_netif_drivers; d++) {
		drv = netif_drivers[d];
		for (i = 0; i < drv->netif_nifs; i++)
			drv->netif_ifs[i].dif_used = 0;
	}
}

static int
netif_match(struct netif *nif, void *machdep_hint)
{
	struct netif_driver *drv = nif->nif_driver;

#if 0
	if (netif_debug)
		printf("%s%d: netif_match (%d)\n", drv->netif_bname,
		    nif->nif_unit, nif->nif_sel);
#endif
	return drv->netif_match(nif, machdep_hint);
}

struct netif *
netif_select(void *machdep_hint)
{
	int d, u, unit_done, s;
	struct netif_driver *drv;
	struct netif cur_if;
	static struct netif best_if;
	int best_val;
	int val;

	best_val = 0;
	best_if.nif_driver = NULL;

#ifdef NETIF_DEBUG
	if (netif_debug)
		printf("netif_select: %d interfaces\n", n_netif_drivers);
#endif

	for (d = 0; d < n_netif_drivers; d++) {
		cur_if.nif_driver = netif_drivers[d];
		drv = cur_if.nif_driver;

		for (u = 0; u < drv->netif_nifs; u++) {
			cur_if.nif_unit = u;
			unit_done = 0;

#ifdef NETIF_DEBUG
			if (netif_debug)
				printf("\t%s%d:", drv->netif_bname,
				    cur_if.nif_unit);
#endif

			for (s = 0; s < drv->netif_ifs[u].dif_nsel; s++) {
				cur_if.nif_sel = s;

				if (drv->netif_ifs[u].dif_used & (1 << s)) {
#ifdef NETIF_DEBUG
					if (netif_debug)
						printf(" [%d used]", s);
#endif
					continue;
				}

				val = netif_match(&cur_if, machdep_hint);
#ifdef NETIF_DEBUG
				if (netif_debug)
					printf(" [%d -> %d]", s, val);
#endif
				if (val > best_val) {
					best_val = val;
					best_if = cur_if;
				}
			}
#ifdef NETIF_DEBUG
			if (netif_debug)
				printf("\n");
#endif
		}
	}

	if (best_if.nif_driver == NULL)
		return NULL;

	best_if.nif_driver->netif_ifs[best_if.nif_unit].dif_used |=
	    (1 << best_if.nif_sel);

#ifdef NETIF_DEBUG
	if (netif_debug)
		printf("netif_select: %s%d(%d) wins\n",
		    best_if.nif_driver->netif_bname,
		    best_if.nif_unit, best_if.nif_sel);
#endif
	return &best_if;
}

int
netif_probe(struct netif *nif, void *machdep_hint)
{
	struct netif_driver *drv = nif->nif_driver;

#ifdef NETIF_DEBUG
	if (netif_debug)
		printf("%s%d: netif_probe\n", drv->netif_bname, nif->nif_unit);
#endif
	return drv->netif_probe(nif, machdep_hint);
}

void
netif_attach(struct netif *nif, struct iodesc *desc, void *machdep_hint)
{
	struct netif_driver *drv = nif->nif_driver;

#ifdef NETIF_DEBUG
	if (netif_debug)
		printf("%s%d: netif_attach\n", drv->netif_bname, nif->nif_unit);
#endif
	desc->io_netif = nif;
#ifdef PARANOID
	if (drv->netif_init == NULL)
		panic("%s%d: no netif_init support", drv->netif_bname,
		    nif->nif_unit);
#endif
	drv->netif_init(desc, machdep_hint);
	bzero(drv->netif_ifs[nif->nif_unit].dif_stats,
	    sizeof(struct netif_stats));
}

void
netif_detach(struct netif *nif)
{
	struct netif_driver *drv = nif->nif_driver;

#ifdef NETIF_DEBUG
	if (netif_debug)
		printf("%s%d: netif_detach\n", drv->netif_bname, nif->nif_unit);
#endif
#ifdef PARANOID
	if (drv->netif_end == NULL)
		panic("%s%d: no netif_end support", drv->netif_bname,
		    nif->nif_unit);
#endif
	drv->netif_end(nif);
}

ssize_t
netif_get(struct iodesc *desc, void *pkt, size_t len, time_t timo)
{
#ifdef NETIF_DEBUG
	struct netif *nif = desc->io_netif;
#endif
	struct netif_driver *drv = desc->io_netif->nif_driver;
	ssize_t rv;

#ifdef NETIF_DEBUG
	if (netif_debug)
		printf("%s%d: netif_get\n", drv->netif_bname, nif->nif_unit);
#endif
#ifdef PARANOID
	if (drv->netif_get == NULL)
		panic("%s%d: no netif_get support", drv->netif_bname,
		    nif->nif_unit);
#endif
	rv = drv->netif_get(desc, pkt, len, timo);
#ifdef NETIF_DEBUG
	if (netif_debug)
		printf("%s%d: netif_get returning %d\n", drv->netif_bname,
		    nif->nif_unit, rv);
#endif
	return rv;
}

ssize_t
netif_put(struct iodesc *desc, void *pkt, size_t len)
{
#ifdef NETIF_DEBUG
	struct netif *nif = desc->io_netif;
#endif
	struct netif_driver *drv = desc->io_netif->nif_driver;
	ssize_t rv;

#ifdef NETIF_DEBUG
	if (netif_debug)
		printf("%s%d: netif_put\n", drv->netif_bname, nif->nif_unit);
#endif
#ifdef PARANOID
	if (drv->netif_put == NULL)
		panic("%s%d: no netif_put support", drv->netif_bname,
		    nif->nif_unit);
#endif
	rv = drv->netif_put(desc, pkt, len);
#ifdef NETIF_DEBUG
	if (netif_debug)
		printf("%s%d: netif_put returning %d\n", drv->netif_bname,
		    nif->nif_unit, rv);
#endif
	return rv;
}

struct iodesc *
socktodesc(sock)
	int sock;
{
	if (sock >= SOPEN_MAX) {
		errno = EBADF;
		return (NULL);
	}
	return (&sockets[sock]);
}

int
netif_open(void *machdep_hint)
{
	int fd;
	struct iodesc *s;
	struct netif *nif;

	/* find a free socket */
	for (fd = 0, s = sockets; fd < SOPEN_MAX; fd++, s++)
		if (s->io_netif == NULL)
			goto fnd;
	errno = EMFILE;
	return (-1);

fnd:
	bzero(s, sizeof(*s));
	netif_init();
	nif = netif_select(machdep_hint);
	if (!nif)
		panic("netboot: no interfaces left untried");
	if (netif_probe(nif, machdep_hint)) {
		printf("netboot: couldn't probe %s%d\n",
		    nif->nif_driver->netif_bname, nif->nif_unit);
		errno = EINVAL;
		return(-1);
	}
	netif_attach(nif, s, machdep_hint);

	return(fd);
}

int
netif_close(int sock)
{
	if (sock >= SOPEN_MAX) {
		errno = EBADF;
		return(-1);
	}
	netif_detach(sockets[sock].io_netif);
	sockets[sock].io_netif = NULL;

	return(0);
}
@


1.10
log
@Stop using old n_long and n_short types.
@
text
@d1 1
a1 1
/*	$OpenBSD: netif.c,v 1.9 2012/12/05 23:20:23 deraadt Exp $	*/
d284 1
a284 1
		if (s->io_netif == (struct netif *)0)
d314 1
a314 1
	sockets[sock].io_netif = (struct netif *)0;
@


1.9
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: netif.c,v 1.8 2003/08/11 06:23:09 deraadt Exp $	*/
a39 1
#include <netinet/in_systm.h>
@


1.8
log
@ansification and knf and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: netif.c,v 1.7 2003/06/01 17:00:33 deraadt Exp $	*/
a36 1
#include <sys/cdefs.h>
@


1.7
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
/*	$OpenBSD: netif.c,v 1.6 1999/01/11 05:12:26 millert Exp $	*/
d59 1
a59 1
netif_init()
d75 2
a76 4
int
netif_match(nif, machdep_hint)
	struct netif *nif;
	void *machdep_hint;
d89 1
a89 2
netif_select(machdep_hint)
	void *machdep_hint;
d151 2
a152 2
	best_if.nif_driver->
	    netif_ifs[best_if.nif_unit].dif_used |= (1 << best_if.nif_sel);
d157 2
a158 2
			best_if.nif_driver->netif_bname,
			best_if.nif_unit, best_if.nif_sel);
d164 1
a164 3
netif_probe(nif, machdep_hint)
	struct netif *nif;
	void *machdep_hint;
d176 1
a176 4
netif_attach(nif, desc, machdep_hint)
	struct netif *nif;
	struct iodesc *desc;
	void *machdep_hint;
d196 1
a196 2
netif_detach(nif)
	struct netif *nif;
d213 1
a213 5
netif_get(desc, pkt, len, timo)
	struct iodesc *desc;
	void *pkt;
	size_t len;
	time_t timo;
d240 1
a240 4
netif_put(desc, pkt, len)
	struct iodesc *desc;
	void *pkt;
	size_t len;
d278 1
a278 2
netif_open(machdep_hint)
	void *machdep_hint;
d281 1
a281 1
	register struct iodesc *s;
d309 1
a309 2
netif_close(sock)
	int sock;
@


1.6
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 1
/*	$OpenBSD: netif.c,v 1.5 1997/07/17 23:06:04 mickey Exp $	*/
d63 1
a63 1
    
d116 1
a116 1
		
d192 1
a192 1
	desc->io_netif = nif; 
d199 1
a199 1
	bzero(drv->netif_ifs[nif->nif_unit].dif_stats, 
d300 1
a300 1
	
d312 1
a312 1
	if (!nif) 
@


1.6.6.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: netif.c,v 1.6 1999/01/11 05:12:26 millert Exp $	*/
d63 1
a63 1

d116 1
a116 1

d192 1
a192 1
	desc->io_netif = nif;
d199 1
a199 1
	bzero(drv->netif_ifs[nif->nif_unit].dif_stats,
d300 1
a300 1

d312 1
a312 1
	if (!nif)
@


1.6.6.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d59 1
a59 1
netif_init(void)
d75 4
a78 2
static int
netif_match(struct netif *nif, void *machdep_hint)
d91 2
a92 1
netif_select(void *machdep_hint)
d154 2
a155 2
	best_if.nif_driver->netif_ifs[best_if.nif_unit].dif_used |=
	    (1 << best_if.nif_sel);
d160 2
a161 2
		    best_if.nif_driver->netif_bname,
		    best_if.nif_unit, best_if.nif_sel);
d167 3
a169 1
netif_probe(struct netif *nif, void *machdep_hint)
d181 4
a184 1
netif_attach(struct netif *nif, struct iodesc *desc, void *machdep_hint)
d204 2
a205 1
netif_detach(struct netif *nif)
d222 5
a226 1
netif_get(struct iodesc *desc, void *pkt, size_t len, time_t timo)
d253 4
a256 1
netif_put(struct iodesc *desc, void *pkt, size_t len)
d294 2
a295 1
netif_open(void *machdep_hint)
d298 1
a298 1
	struct iodesc *s;
d326 2
a327 1
netif_close(int sock)
@


1.5
log
@who needs this?
@
text
@d1 1
a1 1
/*	$OpenBSD: netif.c,v 1.4 1996/12/08 15:15:52 niklas Exp $	*/
d195 1
a195 1
		panic("%s%d: no netif_init support\n", drv->netif_bname,
d215 1
a215 1
		panic("%s%d: no netif_end support\n", drv->netif_bname,
d240 1
a240 1
		panic("%s%d: no netif_get support\n", drv->netif_bname,
d270 1
a270 1
		panic("%s%d: no netif_put support\n", drv->netif_bname,
@


1.4
log
@Merge to NetBSD 961207
@
text
@d1 1
a1 1
/*	$OpenBSD: netif.c,v 1.3 1996/10/29 08:44:09 mickey Exp $	*/
a38 1
#include <time.h>
@


1.3
log
@-Wall happiness.
remove NENTS, it's in stand now.
@
text
@d1 2
a2 2
/*	$OpenBSD: netif.c,v 1.2 1996/09/23 14:18:59 mickey Exp $	*/
/*	$NetBSD: netif.c,v 1.5 1995/09/18 21:19:34 pk Exp $	*/
d317 1
a317 1
			nif->nif_driver->netif_bname, nif->nif_unit);
@


1.2
log
@add OpenBSD tag.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a39 1
#include <string.h>
d229 1
d231 1
d259 1
d261 1
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
