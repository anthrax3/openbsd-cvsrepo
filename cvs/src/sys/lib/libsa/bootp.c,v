head	1.15;
access;
symbols
	OPENBSD_6_0:1.15.0.8
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.12.0.36
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.32
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.30
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.28
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.26
	OPENBSD_5_0:1.12.0.24
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.22
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.20
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.16
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.18
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.14
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.12
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.10
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.8
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.6
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.4
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.2
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.8.0.12
	UBC_BASE:1.8
	OPENBSD_3_0:1.8.0.10
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_9:1.8.0.8
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	SMP:1.8.0.2
	SMP_BASE:1.8
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.8
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.6
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.4
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.4
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.6.0.2
	OPENBSD_2_1_BASE:1.6
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2014.11.19.19.58.40;	author miod;	state Exp;
branches;
next	1.14;
commitid	W4VPuoNteFYwsPth;

1.14
date	2014.07.13.15.31.20;	author mpi;	state Exp;
branches;
next	1.13;
commitid	7SdCoErqwI9qHMpK;

1.13
date	2014.03.28.01.12.58;	author guenther;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.06.17.37.28;	author jmc;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.01.17.00.32;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.01.27.07;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.12.18.16.42.19;	author deraadt;	state Exp;
branches
	1.8.2.1
	1.8.12.1;
next	1.7;

1.7
date	98.02.23.20.32.21;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.12.08.15.15.46;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.10.16.14.18.35;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.10.15.09.58.29;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.09.27.07.44.41;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.09.23.14.18.47;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.56;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.56;	author deraadt;	state Exp;
branches;
next	;

1.8.2.1
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.8.2.2;

1.8.2.2
date	2003.06.07.11.03.42;	author ho;	state Exp;
branches;
next	1.8.2.3;

1.8.2.3
date	2004.02.19.10.57.18;	author niklas;	state Exp;
branches;
next	;

1.8.12.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Sprinkle const in static (internal) routines.
@
text
@/*	$OpenBSD: bootp.c,v 1.14 2014/07/13 15:31:20 mpi Exp $	*/
/*	$NetBSD: bootp.c,v 1.10 1996/10/13 02:28:59 christos Exp $	*/

/*
 * Copyright (c) 1992 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * @@(#) Header: bootp.c,v 1.4 93/09/11 03:13:51 leres Exp  (LBL)
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

#include "stand.h"
#include "net.h"
#include "netif.h"
#include "bootp.h"

static u_int32_t	nmask, smask;

static time_t	bot;

static	char vm_rfc1048[4] = VM_RFC1048;
static	char vm_cmu[4] = VM_CMU;

/* Local forwards */
static	ssize_t bootpsend(struct iodesc *, void *, size_t);
static	ssize_t bootprecv(struct iodesc *, void *, size_t, time_t);
static	void vend_cmu(const u_char *);
static	void vend_rfc1048(const u_char *, u_int);

/* Fetch required bootp information */
void
bootp(int sock)
{
	struct iodesc *d;
	struct bootp *bp;
	struct {
		struct packet_header header;
		struct bootp wbootp;
	} wbuf;
	struct {
		struct packet_header header;
		struct bootp rbootp;
	} rbuf;

#ifdef BOOTP_DEBUG
	if (debug)
		printf("bootp: socket=%d\n", sock);
#endif
	if (!bot)
		bot = getsecs();

	if (!(d = socktodesc(sock))) {
		printf("bootp: bad socket. %d\n", sock);
		return;
	}
#ifdef BOOTP_DEBUG
	if (debug)
		printf("bootp: d=%x\n", (u_int)d);
#endif

	bp = &wbuf.wbootp;
	bzero(bp, sizeof(*bp));

	bp->bp_op = BOOTREQUEST;
	bp->bp_htype = HTYPE_ETHERNET;	/* 10Mb Ethernet (48 bits) */
	bp->bp_hlen = 6;
	bp->bp_xid = htonl(d->xid);
	MACPY(d->myea, bp->bp_chaddr);
	bzero(bp->bp_file, sizeof(bp->bp_file));
	bcopy(vm_rfc1048, bp->bp_vend, sizeof(vm_rfc1048));

	d->myip = myip;
	d->myport = htons(IPPORT_BOOTPC);
	d->destip.s_addr = INADDR_BROADCAST;
	d->destport = htons(IPPORT_BOOTPS);

	(void)sendrecv(d,
	    bootpsend, bp, sizeof(*bp),
	    bootprecv, &rbuf.rbootp, sizeof(rbuf.rbootp));

	/* Bump xid so next request will be unique. */
	++d->xid;
}

/* Transmit a bootp request */
static ssize_t
bootpsend(struct iodesc *d, void *pkt, size_t len)
{
	struct bootp *bp;

#ifdef BOOTP_DEBUG
	if (debug)
		printf("bootpsend: d=%x called.\n", (u_int)d);
#endif

	bp = pkt;
	bp->bp_secs = htons((u_short)(getsecs() - bot));

#ifdef BOOTP_DEBUG
	if (debug)
		printf("bootpsend: calling sendudp\n");
#endif

	return (sendudp(d, pkt, len));
}

/* Returns 0 if this is the packet we're waiting for else -1 (and errno == 0) */
static ssize_t
bootprecv(struct iodesc *d, void *pkt, size_t len, time_t tleft)
{
	ssize_t n;
	struct bootp *bp;

#ifdef BOOTP_DEBUG
	if (debug)
		printf("bootprecv: called\n");
#endif

	n = readudp(d, pkt, len, tleft);
	if (n < 0 || (size_t)n < sizeof(struct bootp))
		goto bad;

	bp = (struct bootp *)pkt;

#ifdef BOOTP_DEBUG
	if (debug)
		printf("bootprecv: checked.  bp = 0x%x, n = %d\n",
		    (unsigned)bp, n);
#endif
	if (bp->bp_xid != htonl(d->xid)) {
#ifdef BOOTP_DEBUG
		if (debug) {
			printf("bootprecv: expected xid 0x%lx, got 0x%lx\n",
			    d->xid, ntohl(bp->bp_xid));
		}
#endif
		goto bad;
	}

#ifdef BOOTP_DEBUG
	if (debug)
		printf("bootprecv: got one!\n");
#endif

	/* Pick up our ip address (and natural netmask) */
	myip = d->myip = bp->bp_yiaddr;
#ifdef BOOTP_DEBUG
	if (debug)
		printf("our ip address is %s\n", inet_ntoa(d->myip));
#endif
	if (IN_CLASSA(d->myip.s_addr))
		nmask = IN_CLASSA_NET;
	else if (IN_CLASSB(d->myip.s_addr))
		nmask = IN_CLASSB_NET;
	else
		nmask = IN_CLASSC_NET;
#ifdef BOOTP_DEBUG
	if (debug)
		printf("'native netmask' is %s\n", intoa(nmask));
#endif

	/* Pick up root or swap server address and file spec. */
	if (bp->bp_siaddr.s_addr != 0)
		rootip = bp->bp_siaddr;
	if (bp->bp_file[0] != '\0') {
		strncpy(bootfile, (char *)bp->bp_file, sizeof(bootfile));
		bootfile[sizeof(bootfile) - 1] = '\0';
	}

	/* Suck out vendor info */
	if (bcmp(vm_cmu, bp->bp_vend, sizeof(vm_cmu)) == 0)
		vend_cmu(bp->bp_vend);
	else if (bcmp(vm_rfc1048, bp->bp_vend, sizeof(vm_rfc1048)) == 0)
		vend_rfc1048(bp->bp_vend, sizeof(bp->bp_vend));
	else
		printf("bootprecv: unknown vendor 0x%lx\n", (long)bp->bp_vend);

	/* Check subnet mask against net mask; toss if bogus */
	if ((nmask & smask) != nmask) {
#ifdef BOOTP_DEBUG
		if (debug)
			printf("subnet mask (%s) bad\n", intoa(smask));
#endif
		smask = 0;
	}

	/* Get subnet (or natural net) mask */
	netmask = nmask;
	if (smask)
		netmask = smask;
#ifdef BOOTP_DEBUG
	if (debug)
		printf("mask: %s\n", intoa(netmask));
#endif

	/* We need a gateway if root or swap is on a different net */
	if (!SAMENET(d->myip, rootip, netmask)) {
#ifdef BOOTP_DEBUG
		if (debug)
			printf("need gateway for root ip\n");
#endif
	}

	if (!SAMENET(d->myip, swapip, netmask)) {
#ifdef BOOTP_DEBUG
		if (debug)
			printf("need gateway for swap ip\n");
#endif
	}

	/* Toss gateway if on a different net */
	if (!SAMENET(d->myip, gateip, netmask)) {
#ifdef BOOTP_DEBUG
		if (debug)
			printf("gateway ip (%s) bad\n", inet_ntoa(gateip));
#endif
		gateip.s_addr = 0;
	}

	return (n);

bad:
	errno = 0;
	return (-1);
}

static void
vend_cmu(const u_char *cp)
{
	const struct cmu_vend *vp;

#ifdef BOOTP_DEBUG
	if (debug)
		printf("vend_cmu bootp info.\n");
#endif
	vp = (const struct cmu_vend *)cp;

	if (vp->v_smask.s_addr != 0)
		smask = vp->v_smask.s_addr;
	if (vp->v_dgate.s_addr != 0)
		gateip = vp->v_dgate;
}

static void
vend_rfc1048(const u_char *cp, u_int len)
{
	const u_char *ep;
	int size;
	u_char tag;

#ifdef BOOTP_DEBUG
	if (debug)
		printf("vend_rfc1048 bootp info. len=%d\n", len);
#endif
	ep = cp + len;

	/* Step over magic cookie */
	cp += sizeof(int);

	while (cp < ep) {
		tag = *cp++;
		size = *cp++;
		if (tag == TAG_END)
			break;

		if (tag == TAG_SUBNET_MASK)
			bcopy(cp, &smask, sizeof(smask));
		if (tag == TAG_GATEWAY)
			bcopy(cp, &gateip.s_addr, sizeof(gateip.s_addr));
		if (tag == TAG_SWAPSERVER)
			bcopy(cp, &swapip.s_addr, sizeof(swapip.s_addr));
		if (tag == TAG_DOMAIN_SERVER)
			bcopy(cp, &nameip.s_addr, sizeof(nameip.s_addr));
		if (tag == TAG_ROOTPATH) {
			strncpy(rootpath, (char *)cp, sizeof(rootpath));
			rootpath[size] = '\0';
		}
		if (tag == TAG_HOSTNAME) {
			strncpy(hostname, (char *)cp, sizeof(hostname));
			hostname[size] = '\0';
		}
		if (tag == TAG_DOMAINNAME) {
			strncpy(domainname, (char *)cp, sizeof(domainname));
			domainname[size] = '\0';
		}
		cp += size;
	}
}
@


1.14
log
@Stop using old n_long and n_short types.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.13 2014/03/28 01:12:58 guenther Exp $	*/
d62 2
a63 2
static	void vend_cmu(u_char *);
static	void vend_rfc1048(u_char *, u_int);
d263 1
a263 1
vend_cmu(u_char *cp)
d265 1
a265 1
	struct cmu_vend *vp;
d271 1
a271 1
	vp = (struct cmu_vend *)cp;
d280 1
a280 1
vend_rfc1048(u_char *cp, u_int len)
d282 1
a282 1
	u_char *ep;
@


1.13
log
@Fix alignment of tftp structure by changing the 'header' member's type
to a struct with the necessary alignment.

analysis and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.12 2006/02/06 17:37:28 jmc Exp $	*/
a45 1
#include <netinet/in_systm.h>
d52 1
a52 1
static n_long	nmask, smask;
@


1.12
log
@typos from alexey dobriyan;
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.11 2003/08/11 06:23:09 deraadt Exp $	*/
d73 1
a73 1
		u_char header[HEADER_SIZE];
d77 1
a77 1
		u_char header[HEADER_SIZE];
@


1.11
log
@ansification and knf and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.10 2003/06/01 17:00:32 deraadt Exp $	*/
d66 1
a66 1
/* Fetch required bootp infomation */
@


1.10
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.9 2002/03/14 01:27:07 millert Exp $	*/
d68 1
a68 2
bootp(sock)
	int sock;
d71 1
a71 1
	register struct bootp *bp;
d123 1
a123 4
bootpsend(d, pkt, len)
	register struct iodesc *d;
	register void *pkt;
	register size_t len;
d125 1
a125 1
	register struct bootp *bp;
d145 1
a145 5
bootprecv(d, pkt, len, tleft)
	register struct iodesc *d;
	register void *pkt;
	register size_t len;
	time_t tleft;
d147 2
a148 2
	register ssize_t n;
	register struct bootp *bp;
d264 1
a264 2
vend_cmu(cp)
	u_char *cp;
d266 1
a266 1
	register struct cmu_vend *vp;
d274 1
a274 1
	if (vp->v_smask.s_addr != 0) {
d276 1
a276 2
	}
	if (vp->v_dgate.s_addr != 0) {
a277 1
	}
d281 1
a281 3
vend_rfc1048(cp, len)
	register u_char *cp;
	u_int len;
d283 3
a285 3
	register u_char *ep;
	register int size;
	register u_char tag;
d302 1
a302 1
		if (tag == TAG_SUBNET_MASK) {
d304 1
a304 2
		}
		if (tag == TAG_GATEWAY) {
d306 1
a306 2
		}
		if (tag == TAG_SWAPSERVER) {
d308 1
a308 2
		}
		if (tag == TAG_DOMAIN_SERVER) {
a309 1
		}
@


1.9
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.8 1999/12/18 16:42:19 deraadt Exp $	*/
d83 1
a83 1
 	if (debug)
d88 1
a88 1
	
d94 1
a94 1
 	if (debug)
@


1.8
log
@netinet/in.h without sys/socket.h
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.7 1998/02/23 20:32:21 niklas Exp $	*/
d61 4
a64 4
static	ssize_t bootpsend __P((struct iodesc *, void *, size_t));
static	ssize_t bootprecv __P((struct iodesc *, void *, size_t, time_t));
static	void vend_cmu __P((u_char *));
static	void vend_rfc1048 __P((u_char *, u_int));
@


1.8.12.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.8 1999/12/18 16:42:19 deraadt Exp $	*/
d61 4
a64 4
static	ssize_t bootpsend(struct iodesc *, void *, size_t);
static	ssize_t bootprecv(struct iodesc *, void *, size_t, time_t);
static	void vend_cmu(u_char *);
static	void vend_rfc1048(u_char *, u_int);
@


1.8.2.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 4
a64 4
static	ssize_t bootpsend(struct iodesc *, void *, size_t);
static	ssize_t bootprecv(struct iodesc *, void *, size_t, time_t);
static	void vend_cmu(u_char *);
static	void vend_rfc1048(u_char *, u_int);
@


1.8.2.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.8.2.1 2002/03/28 15:02:00 niklas Exp $	*/
d83 1
a83 1
	if (debug)
d88 1
a88 1

d94 1
a94 1
	if (debug)
@


1.8.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d68 2
a69 1
bootp(int sock)
d72 1
a72 1
	struct bootp *bp;
d124 4
a127 1
bootpsend(struct iodesc *d, void *pkt, size_t len)
d129 1
a129 1
	struct bootp *bp;
d149 5
a153 1
bootprecv(struct iodesc *d, void *pkt, size_t len, time_t tleft)
d155 2
a156 2
	ssize_t n;
	struct bootp *bp;
d272 2
a273 1
vend_cmu(u_char *cp)
d275 1
a275 1
	struct cmu_vend *vp;
d283 1
a283 1
	if (vp->v_smask.s_addr != 0)
d285 2
a286 1
	if (vp->v_dgate.s_addr != 0)
d288 1
d292 3
a294 1
vend_rfc1048(u_char *cp, u_int len)
d296 3
a298 3
	u_char *ep;
	int size;
	u_char tag;
d315 1
a315 1
		if (tag == TAG_SUBNET_MASK)
d317 2
a318 1
		if (tag == TAG_GATEWAY)
d320 2
a321 1
		if (tag == TAG_SWAPSERVER)
d323 2
a324 1
		if (tag == TAG_DOMAIN_SERVER)
d326 1
@


1.7
log
@strong signedness typing a version of egcs I tried months ago wanted
me to fix.  I am not sure these are necessary for gas 2.8 but I figure I
would commit them anyhow.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.6 1996/12/08 15:15:46 niklas Exp $	*/
d44 1
@


1.6
log
@Merge to NetBSD 961207
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.5 1996/10/16 14:18:35 mickey Exp $	*/
d163 1
a163 1
	if (n == -1 || n < sizeof(struct bootp))
@


1.5
log
@remove unneeded include <string.h>
@
text
@d1 2
a2 2
/*	$OpenBSD: bootp.c,v 1.4 1996/10/15 09:58:29 mickey Exp $	*/
/*	$NetBSD: bootp.c,v 1.7 1995/09/18 21:19:20 pk Exp $	*/
d306 1
a306 1
	cp += sizeof(long);
@


1.4
log
@gcc -Wall happy
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.3 1996/09/27 07:44:41 mickey Exp $	*/
a45 2

#include <string.h>
@


1.3
log
@update up to the current bootpd.
@
text
@d1 1
a1 1
/*	$OpenBSD: bootp.c,v 1.2 1996/09/23 14:18:47 mickey Exp $	*/
d178 1
a178 1
			printf("bootprecv: expected xid 0x%x, got 0x%x\n",
@


1.2
log
@add OpenBSD tag.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d103 1
a103 1
	bp->bp_htype = 1;		/* 10Mb Ethernet (48 bits) */
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
