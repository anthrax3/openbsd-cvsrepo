head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.14
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.10.0.12
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.8
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.7.0.46
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.42
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.40
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.3.0.26
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.24
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.22
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2014.11.19.20.28.56;	author miod;	state Exp;
branches;
next	1.9;
commitid	F3EvOaAgKQy5tMAq;

1.9
date	2014.07.13.15.31.20;	author mpi;	state Exp;
branches;
next	1.8;
commitid	7SdCoErqwI9qHMpK;

1.8
date	2014.03.28.01.12.58;	author guenther;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.01.17.00.33;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.14.03.16.10;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.27.07;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.09.23.14.18.58;	author mickey;	state Exp;
branches
	1.3.16.1
	1.3.26.1;
next	1.2;

1.2
date	95.12.15.08.09.39;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.57;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2003.06.07.11.03.42;	author ho;	state Exp;
branches;
next	1.3.16.3;

1.3.16.3
date	2004.02.19.10.57.19;	author niklas;	state Exp;
branches;
next	;

1.3.26.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Sprinkle const whenever possible.
@
text
@/*	$OpenBSD: net.h,v 1.9 2014/07/13 15:31:20 mpi Exp $	*/
/*	$NetBSD: net.h,v 1.10 1995/10/20 00:46:30 cgd Exp $	*/

/*
 * Copyright (c) 1993 Adam Glass
 * Copyright (c) 1992 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#ifndef _KERNEL	/* XXX - see <netinet/in.h> */
#undef __IPADDR
#define __IPADDR(x)	htonl((u_int32_t)(x))
#endif

#include "iodesc.h"

#define BA { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }

/* Returns true if u_int32_t's on the same net */
#define	SAMENET(a1, a2, m) ((a1.s_addr & m) == (a2.s_addr & m))

#define MACPY(s, d) bcopy((char *)s, (char *)d, 6)

#define MAXTMO 20	/* seconds */
#define MINTMO 2	/* seconds */

#define FNAME_SIZE 128
#define	IFNAME_SIZE 16
#define RECV_SIZE 1536	/* XXX delete this */

/*
 * How much room to leave for headers:
 *  14: struct ether_header
 *  20: struct ip
 *   8: struct udphdr
 * That's 42 but let's pad it out to 48 bytes.
 */
#define ETHER_SIZE 14
struct packet_header {
	/* guarantee int alignment */
	int	pad[48 / sizeof(int)];
};

extern	u_char bcea[6];
extern	char rootpath[FNAME_SIZE];
extern	char bootfile[FNAME_SIZE];
extern	char hostname[FNAME_SIZE];
extern	int hostnamelen;
extern	char domainname[FNAME_SIZE];
extern	int domainnamelen;
extern	char ifname[IFNAME_SIZE];

/* All of these are in network order. */
extern	struct in_addr myip;
extern	struct in_addr rootip;
extern	struct in_addr swapip;
extern	struct in_addr gateip;
extern	struct in_addr nameip;
extern	u_int32_t netmask;

extern	int debug;			/* defined in the machdep sources */

extern struct iodesc sockets[SOPEN_MAX];

/* ARP/RevARP functions: */
u_char	*arpwhohas(struct iodesc *, struct in_addr);
void	arp_reply(struct iodesc *, void *);
int	rarp_getipaddress(int);
u_int32_t	ip_convertaddr(const char *);

/* Link functions: */
ssize_t sendether(struct iodesc *d, void *pkt, size_t len,
	    u_char *dea, int etype);
ssize_t readether(struct iodesc *d, void *pkt, size_t len,
	    time_t tleft, u_int16_t *etype);

ssize_t	sendudp(struct iodesc *, void *, size_t);
ssize_t	readudp(struct iodesc *, void *, size_t, time_t);
ssize_t	sendrecv(struct iodesc *,
	    ssize_t (*)(struct iodesc *, void *, size_t), void *, size_t,
	    ssize_t (*)(struct iodesc *, void *, size_t, time_t),
	    void *, size_t);

/* Utilities: */
const char *ether_sprintf(const u_char *);
int	in_cksum(const void *, int);
const char *inet_ntoa(struct in_addr);
const char *intoa(u_int32_t);		/* similar to inet_ntoa */
u_int32_t inet_addr(const char *);

/* Machine-dependent functions: */
time_t	getsecs(void);
@


1.9
log
@Stop using old n_long and n_short types.
@
text
@d1 1
a1 1
/*	$OpenBSD: net.h,v 1.8 2014/03/28 01:12:58 guenther Exp $	*/
d101 1
a101 1
u_int32_t	ip_convertaddr(char *);
d117 5
a121 5
char	*ether_sprintf(u_char *);
int	in_cksum(void *, int);
char	*inet_ntoa(struct in_addr);
char	*intoa(u_int32_t);		/* similar to inet_ntoa */
u_int32_t inet_addr(char *);
@


1.8
log
@Fix alignment of tftp structure by changing the 'header' member's type
to a struct with the necessary alignment.

analysis and ok kettenis@@
@
text
@d1 1
a1 1
/*	$OpenBSD: net.h,v 1.7 2003/08/11 06:23:09 deraadt Exp $	*/
d51 1
a51 1
/* Returns true if n_long's on the same net */
d91 1
a91 1
extern	n_long netmask;
d101 1
a101 1
n_long	ip_convertaddr(char *);
d120 2
a121 2
char	*intoa(n_long);		/* similar to inet_ntoa */
n_long	inet_addr(char *);
@


1.7
log
@ansification and knf and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: net.h,v 1.6 2003/06/01 17:00:33 deraadt Exp $	*/
d71 4
a74 1
#define	HEADER_SIZE 48
@


1.6
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
/*	$OpenBSD: net.h,v 1.5 2002/03/14 03:16:10 millert Exp $	*/
d98 1
@


1.5
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: net.h,v 1.4 2002/03/14 01:27:07 millert Exp $	*/
d5 1
a5 1
 * Copyright (c) 1993 Adam Glass 
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: net.h,v 1.3 1996/09/23 14:18:58 mickey Exp $	*/
d101 1
a101 1
			u_char *dea, int etype);
d103 1
a103 1
			time_t tleft, u_int16_t *etype);
d107 4
a110 5
ssize_t	sendrecv __P((struct iodesc *,
		      ssize_t (*)(struct iodesc *, void *, size_t),
			void *, size_t,
		        ssize_t (*)(struct iodesc *, void *, size_t, time_t),
			void *, size_t));
@


1.3
log
@add OpenBSD tag.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d95 3
a97 3
u_char	*arpwhohas __P((struct iodesc *, struct in_addr));
void	arp_reply __P((struct iodesc *, void *));
int	rarp_getipaddress __P((int));
d100 4
a103 4
ssize_t sendether __P((struct iodesc *d, void *pkt, size_t len,
			u_char *dea, int etype));
ssize_t readether __P((struct iodesc *d, void *pkt, size_t len,
			time_t tleft, u_int16_t *etype));
d105 2
a106 2
ssize_t	sendudp __P((struct iodesc *, void *, size_t));
ssize_t	readudp __P((struct iodesc *, void *, size_t, time_t));
d114 5
a118 5
char	*ether_sprintf __P((u_char *));
int	in_cksum __P((void *, int));
char	*inet_ntoa __P((struct in_addr));
char	*intoa __P((n_long));		/* similar to inet_ntoa */
n_long	inet_addr __P((char *));
d121 1
a121 1
time_t	getsecs __P((void));
@


1.3.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: net.h,v 1.3 1996/09/23 14:18:58 mickey Exp $	*/
d95 3
a97 3
u_char	*arpwhohas(struct iodesc *, struct in_addr);
void	arp_reply(struct iodesc *, void *);
int	rarp_getipaddress(int);
d100 12
a111 11
ssize_t sendether(struct iodesc *d, void *pkt, size_t len,
	    u_char *dea, int etype);
ssize_t readether(struct iodesc *d, void *pkt, size_t len,
	    time_t tleft, u_int16_t *etype);

ssize_t	sendudp(struct iodesc *, void *, size_t);
ssize_t	readudp(struct iodesc *, void *, size_t, time_t);
ssize_t	sendrecv(struct iodesc *,
	    ssize_t (*)(struct iodesc *, void *, size_t), void *, size_t,
	    ssize_t (*)(struct iodesc *, void *, size_t, time_t),
	    void *, size_t);
d114 5
a118 5
char	*ether_sprintf(u_char *);
int	in_cksum(void *, int);
char	*inet_ntoa(struct in_addr);
char	*intoa(n_long);		/* similar to inet_ntoa */
n_long	inet_addr(char *);
d121 1
a121 1
time_t	getsecs(void);
@


1.3.16.1
log
@Merge in -current from roughly a week ago
@
text
@d95 3
a97 3
u_char	*arpwhohas(struct iodesc *, struct in_addr);
void	arp_reply(struct iodesc *, void *);
int	rarp_getipaddress(int);
d100 4
a103 4
ssize_t sendether(struct iodesc *d, void *pkt, size_t len,
	    u_char *dea, int etype);
ssize_t readether(struct iodesc *d, void *pkt, size_t len,
	    time_t tleft, u_int16_t *etype);
d105 7
a111 6
ssize_t	sendudp(struct iodesc *, void *, size_t);
ssize_t	readudp(struct iodesc *, void *, size_t, time_t);
ssize_t	sendrecv(struct iodesc *,
	    ssize_t (*)(struct iodesc *, void *, size_t), void *, size_t,
	    ssize_t (*)(struct iodesc *, void *, size_t, time_t),
	    void *, size_t);
d114 5
a118 5
char	*ether_sprintf(u_char *);
int	in_cksum(void *, int);
char	*inet_ntoa(struct in_addr);
char	*intoa(n_long);		/* similar to inet_ntoa */
n_long	inet_addr(char *);
d121 1
a121 1
time_t	getsecs(void);
@


1.3.16.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: net.h,v 1.3.16.1 2002/03/28 15:02:00 niklas Exp $	*/
d5 1
a5 1
 * Copyright (c) 1993 Adam Glass
@


1.3.16.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a97 1
n_long	ip_convertaddr(char *);
@


1.2
log
@from netbsd; 64-bit cleanup
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: net.h,v 1.9 1995/09/23 17:14:41 thorpej Exp $	*/
d64 1
a64 1
 *	14: struct ether_header
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
