head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.14
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.12
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.8
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.10
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.18.0.22
	OPENBSD_5_4_BASE:1.18
	OPENBSD_5_3:1.18.0.20
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.18
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.16
	OPENBSD_5_0:1.18.0.14
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.18.0.12
	OPENBSD_4_9_BASE:1.18
	OPENBSD_4_8:1.18.0.10
	OPENBSD_4_8_BASE:1.18
	OPENBSD_4_7:1.18.0.6
	OPENBSD_4_7_BASE:1.18
	OPENBSD_4_6:1.18.0.8
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.4
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.14.0.4
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.2
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.12.0.2
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.10.0.6
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.4
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.2
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.1.0.6
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.4
	OPENBSD_3_0_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.19
date	2013.10.17.08.45.02;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.26.05.42.20;	author ray;	state Exp;
branches;
next	1.17;

1.17
date	2008.03.31.22.12.37;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2008.03.31.19.58.10;	author miod;	state Exp;
branches;
next	1.15;

1.15
date	2008.03.30.19.31.44;	author miod;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.26.10.32.50;	author tom;	state Exp;
branches;
next	1.13;

1.13
date	2007.05.30.01.25.43;	author tom;	state Exp;
branches;
next	1.12;

1.12
date	2007.01.04.07.09.30;	author miod;	state Exp;
branches;
next	1.11;

1.11
date	2006.12.30.18.31.39;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.13.21.28.02;	author mickey;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.10.01.01.13;	author tom;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.11.06.37.39;	author mickey;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.28.09;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.01.17.00.32;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.07.18.11.37;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.11.00.04.30;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.14.01.27.07;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.23.01.47.40;	author drahn;	state Exp;
branches
	1.1.2.1
	1.1.6.1;
next	;

1.1.2.1
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.03.28.00.41.27;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.05.13.19.21.29;	author ho;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2003.06.07.11.03.42;	author ho;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2004.02.19.10.57.19;	author niklas;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2004.06.05.23.13.05;	author niklas;	state Exp;
branches;
next	;

1.1.6.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	1.1.6.2;

1.1.6.2
date	2003.05.19.21.53.42;	author tedu;	state Exp;
branches;
next	;


desc
@@


1.19
log
@more a.out/ecoff removal; ok phessler
@
text
@/* $NetBSD: loadfile.c,v 1.10 2000/12/03 02:53:04 tsutsui Exp $ */
/* $OpenBSD: loadfile.c,v 1.18 2008/06/26 05:42:20 ray Exp $ */

/*-
 * Copyright (c) 1997 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,
 * NASA Ames Research Center and by Christos Zoulas.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)boot.c	8.1 (Berkeley) 6/10/93
 */

#ifdef _STANDALONE
#include <lib/libkern/libkern.h>
#include <lib/libsa/stand.h>
#else
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <err.h>
#endif

#include <sys/param.h>
#include <sys/exec.h>

#include "loadfile.h"

#ifdef BOOT_ELF
#include <sys/exec_elf.h>
#if defined(BOOT_ELF32) && defined(BOOT_ELF64)
/*
 * Both defined, so elf32_exec() and elf64_exec() need to be separately
 * created (can't do it by including loadfile_elf.c here).
 */
int elf32_exec(int, Elf32_Ehdr *, u_long *, int);
int elf64_exec(int, Elf64_Ehdr *, u_long *, int);
#else
#include "loadfile_elf.c"
#endif
#endif

/*
 * Open 'filename', read in program and return -1 on error otherwise fd,
 * with file still open.
 * Also fills in marks.
 */
int
loadfile(const char *fname, u_long *marks, int flags)
{
	union {
#if defined(BOOT_ELF32) || (defined(BOOT_ELF) && ELFSIZE == 32)
		Elf32_Ehdr elf32;
#endif
#if defined(BOOT_ELF64) || (defined(BOOT_ELF) && ELFSIZE == 64)
		Elf64_Ehdr elf64;
#endif

	} hdr;
	ssize_t nr;
	int fd, rval;

	/* Open the file. */
	if ((fd = open(fname, 0)) < 0) {
		WARN(("open %s", fname ? fname : "<default>"));
		return -1;
	}

	/* Read the exec header. */
	if ((nr = read(fd, &hdr, sizeof(hdr))) != sizeof(hdr)) {
		WARN(("read header"));
		goto err;
	}

#if defined(BOOT_ELF32) || (defined(BOOT_ELF) && ELFSIZE == 32)
	if (memcmp(hdr.elf32.e_ident, ELFMAG, SELFMAG) == 0 &&
	    hdr.elf32.e_ident[EI_CLASS] == ELFCLASS32) {
		rval = elf32_exec(fd, &hdr.elf32, marks, flags);
	} else
#endif
#if defined(BOOT_ELF64) || (defined(BOOT_ELF) && ELFSIZE == 64)
	if (memcmp(hdr.elf64.e_ident, ELFMAG, SELFMAG) == 0 &&
	    hdr.elf64.e_ident[EI_CLASS] == ELFCLASS64) {
		rval = elf64_exec(fd, &hdr.elf64, marks, flags);
	} else
#endif
	{
		rval = 1;
		errno = EFTYPE;
		WARN(("%s", fname ? fname : "<default>"));
	}

	if (rval == 0) {
		PROGRESS(("=0x%lx\n", marks[MARK_END] - marks[MARK_START]));
		return fd;
	}
err:
	(void)close(fd);
	return -1;
}
@


1.18
log
@First pass at removing clauses 3 and 4 from NetBSD licenses.

Not sure what's more surprising: how long it took for NetBSD to
catch up to the rest of the BSDs (including UCB), or the amount of
code that NetBSD has claimed for itself without attributing to the
actual authors.

OK deraadt@@
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.17 2008/03/31 22:12:37 miod Exp $ */
a85 9
#ifdef BOOT_ECOFF
#include <sys/exec_ecoff.h>
static int coff_exec(int, struct ecoff_exechdr *, u_long *, int);
#endif
#ifdef BOOT_AOUT
/* #include <sys/exec_aout.h> done from <sys/exec.h> above */
static int aout_exec(int, struct exec *, u_long *, int);
#endif

a108 3
#ifdef BOOT_ECOFF
		struct ecoff_exechdr coff;
#endif
a114 3
#ifdef BOOT_AOUT
		struct exec aout;
#endif
a131 5
#ifdef BOOT_ECOFF
	if (!ECOFF_BADMAG(&hdr.coff)) {
		rval = coff_exec(fd, &hdr.coff, marks, flags);
	} else
#endif
a143 9
#ifdef BOOT_AOUT
	if (OKMAGIC(N_GETMAGIC(hdr.aout))
#ifndef NO_MID_CHECK
	    && N_GETMID(hdr.aout) == MID_MACHINE
#endif
	    ) {
		rval = aout_exec(fd, &hdr.aout, marks, flags);
	} else
#endif
a157 268

#ifdef BOOT_ECOFF
static int
coff_exec(int fd, struct ecoff_exechdr *coff, u_long *marks, int flags)
{
	paddr_t offset = marks[MARK_START];
	paddr_t minp = ~0, maxp = 0, pos;

	/* Read in text. */
	if (lseek(fd, ECOFF_TXTOFF(coff), SEEK_SET) == -1)  {
		WARN(("lseek text"));
		return 1;
	}

	if (coff->a.tsize != 0) {
		if (flags & LOAD_TEXT) {
			PROGRESS(("%lu", coff->a.tsize));
			if (READ(fd, coff->a.text_start, coff->a.tsize) !=
			    coff->a.tsize) {
				return 1;
			}
		}
		else {
			if (lseek(fd, coff->a.tsize, SEEK_CUR) == -1) {
				WARN(("read text"));
				return 1;
			}
		}
		if (flags & (COUNT_TEXT|LOAD_TEXT)) {
			pos = coff->a.text_start;
			if (minp > pos)
				minp = pos;
			pos += coff->a.tsize;
			if (maxp < pos)
				maxp = pos;
		}
	}

	/* Read in data. */
	if (coff->a.dsize != 0) {
		if (flags & LOAD_DATA) {
			PROGRESS(("+%lu", coff->a.dsize));
			if (READ(fd, coff->a.data_start, coff->a.dsize) !=
			    coff->a.dsize) {
				WARN(("read data"));
				return 1;
			}
		}
		if (flags & (COUNT_DATA|LOAD_DATA)) {
			pos = coff->a.data_start;
			if (minp > pos)
				minp = pos;
			pos += coff->a.dsize;
			if (maxp < pos)
				maxp = pos;
		}
	}

	/* Zero out bss. */
	if (coff->a.bsize != 0) {
		if (flags & LOAD_BSS) {
			PROGRESS(("+%lu", coff->a.bsize));
			BZERO(coff->a.bss_start, coff->a.bsize);
		}
		if (flags & (COUNT_BSS|LOAD_BSS)) {
			pos = coff->a.bss_start;
			if (minp > pos)
				minp = pos;
			pos = coff->a.bsize;
			if (maxp < pos)
				maxp = pos;
		}
	}

	marks[MARK_START] = LOADADDR(minp);
	marks[MARK_ENTRY] = LOADADDR(coff->a.entry);
	marks[MARK_NSYM] = 1;	/* XXX: Kernel needs >= 0 */
	marks[MARK_SYM] = LOADADDR(maxp);
	marks[MARK_END] = LOADADDR(maxp);
	return 0;
}
#endif /* BOOT_ECOFF */

#ifdef BOOT_AOUT
static int
aout_exec(int fd, struct exec *x, u_long *marks, int flags)
{
	u_long entry = x->a_entry;
	paddr_t aoutp = 0;
	paddr_t minp, maxp;
	int cc;
	paddr_t offset = marks[MARK_START];
	u_long magic = N_GETMAGIC(*x);
	int sub;

	/* In OMAGIC and NMAGIC, exec header isn't part of text segment */
	if (magic == OMAGIC || magic == NMAGIC)
		sub = 0;
	else
		sub = sizeof(*x);

	minp = maxp = ALIGNENTRY(entry);

	if (lseek(fd, sizeof(*x), SEEK_SET) == -1)  {
		WARN(("lseek text"));
		return 1;
	}

	/*
	 * Leave a copy of the exec header before the text.
	 * The kernel may use this to verify that the
	 * symbols were loaded by this boot program.
	 */
	if (magic == OMAGIC || magic == NMAGIC) {
		if (flags & LOAD_HDR && maxp >= sizeof(*x))
			BCOPY(x, maxp - sizeof(*x), sizeof(*x));
	}
	else {
		if (flags & LOAD_HDR)
			BCOPY(x, maxp, sizeof(*x));
		if (flags & (LOAD_HDR|COUNT_HDR)) {
			minp += sizeof(*x);
			maxp += sizeof(*x);
		}
	}

	/*
	 * Read in the text segment.
	 */
	if (flags & LOAD_TEXT) {
		PROGRESS(("%d", x->a_text));

		if (READ(fd, maxp, x->a_text - sub) != x->a_text - sub) {
			WARN(("read text"));
			return 1;
		}
	} else {
		if (lseek(fd, x->a_text - sub, SEEK_CUR) == -1) {
			WARN(("seek text"));
			return 1;
		}
	}
	if (flags & (LOAD_TEXT|COUNT_TEXT))
		maxp += x->a_text - sub;

	/*
	 * Provide alignment if required
	 */
	if (magic == ZMAGIC || magic == NMAGIC) {
		int size = -(unsigned int)maxp & (__LDPGSZ - 1);

		if (flags & LOAD_TEXTA) {
			PROGRESS(("/%d", size));
			BZERO(maxp, size);
		}

		if (flags & (LOAD_TEXTA|COUNT_TEXTA))
			maxp += size;
	}

	/*
	 * Read in the data segment.
	 */
	if (flags & LOAD_DATA) {
		PROGRESS(("+%d", x->a_data));

		if (READ(fd, maxp, x->a_data) != x->a_data) {
			WARN(("read data"));
			return 1;
		}
	}
	else {
		if (lseek(fd, x->a_data, SEEK_CUR) == -1) {
			WARN(("seek data"));
			return 1;
		}
	}
	if (flags & (LOAD_DATA|COUNT_DATA))
		maxp += x->a_data;

	/*
	 * Zero out the BSS section.
	 * (Kernel doesn't care, but do it anyway.)
	 */
	if (flags & LOAD_BSS) {
		PROGRESS(("+%d", x->a_bss));

		BZERO(maxp, x->a_bss);
	}

	if (flags & (LOAD_BSS|COUNT_BSS))
		maxp += x->a_bss;

	/*
	 * Read in the symbol table and strings.
	 * (Always set the symtab size word.)
	 */
	if (flags & LOAD_SYM)
		BCOPY(&x->a_syms, maxp, sizeof(x->a_syms));

	if (flags & (LOAD_SYM|COUNT_SYM)) {
		maxp += sizeof(x->a_syms);
		aoutp = maxp;
	}

	if (x->a_syms > 0) {
		/* Symbol table and string table length word. */

		if (flags & LOAD_SYM) {
			PROGRESS(("+[%d", x->a_syms));

			if (READ(fd, maxp, x->a_syms) != x->a_syms) {
				WARN(("read symbols"));
				return 1;
			}
		} else  {
			if (lseek(fd, x->a_syms, SEEK_CUR) == -1) {
				WARN(("seek symbols"));
				return 1;
			}
		}
		if (flags & (LOAD_SYM|COUNT_SYM))
			maxp += x->a_syms;

		if (read(fd, &cc, sizeof(cc)) != sizeof(cc)) {
			WARN(("read string table"));
			return 1;
		}

		if (flags & LOAD_SYM) {
			BCOPY(&cc, maxp, sizeof(cc));

			/* String table. Length word includes itself. */

			PROGRESS(("+%d]", cc));
		}
		if (flags & (LOAD_SYM|COUNT_SYM))
			maxp += sizeof(cc);

		cc -= sizeof(int);
		if (cc <= 0) {
			WARN(("symbol table too short"));
			return 1;
		}

		if (flags & LOAD_SYM) {
			if (READ(fd, maxp, cc) != cc) {
				WARN(("read strings"));
				return 1;
			}
		} else {
			if (lseek(fd, cc, SEEK_CUR) == -1) {
				WARN(("seek strings"));
				return 1;
			}
		}
		if (flags & (LOAD_SYM|COUNT_SYM))
			maxp += cc;
	}

	marks[MARK_START] = LOADADDR(minp);
	marks[MARK_ENTRY] = LOADADDR(entry);
	marks[MARK_NSYM] = x->a_syms;
	marks[MARK_SYM] = LOADADDR(aoutp);
	marks[MARK_END] = LOADADDR(maxp);
	return 0;
}
#endif /* BOOT_AOUT */
@


1.17
log
@Correctly load ZMAGIC a.out binaries.
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.16 2008/03/31 19:58:10 miod Exp $ */
a19 7
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the NetBSD
 *	Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
@


1.16
log
@Fix format strings in a.out loader.
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.15 2008/03/30 19:31:44 miod Exp $ */
d314 2
a315 1
		if (flags & (LOAD_HDR|COUNT_HDR))
d317 1
@


1.15
log
@Let this compile with BOOT_AOUT defined.
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.14 2007/06/26 10:32:50 tom Exp $ */
d322 1
a322 1
		PROGRESS(("%ld", x->a_text));
d356 1
a356 1
		PROGRESS(("+%ld", x->a_data));
d377 1
a377 1
		PROGRESS(("+%ld", x->a_bss));
d401 1
a401 1
			PROGRESS(("+[%ld", x->a_syms));
@


1.14
log
@Fix the description of loadfile() semantics in comment (and kill "and
and" at the same time).
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.13 2007/05/30 01:25:43 tom Exp $ */
d98 1
a98 1
#include <sys/exec_aout.h>
@


1.13
log
@Pull out the ELF loadfile pieces from the standalone libraries, so that
both 32- and 64-bit versions can be created (previously only one or the
other could be built for a given boot loader).

Use this to allow the i386 and amd64 boot blocks to boot both ELF32 and
ELF64 kernels (i.e. amd64 boot blocks can now load i386 kernels, and
vice versa).  Obviously the system must support LONG mode in order to
successfully run the amd64 kernel once it is loaded.

Advice and discussions from/with dale@@ (going back three years).  Much
testing nick@@ and todd@@; thanks.
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.12 2007/01/04 07:09:30 miod Exp $ */
d117 3
a119 2
 * Open 'filename', read in program and and return 0 if ok 1 on error.
 * Fill in marks
@


1.12
log
@Revert 1.11 and load .shstrtab, as it is currently needed for /dev/ksyms
proper operation.
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.10 2005/07/13 21:28:02 mickey Exp $ */
d97 5
d104 9
a112 1
static int elf_exec(int, Elf_Ehdr *, u_long *, int);
a113 3
#ifdef BOOT_AOUT
#include <sys/exec_aout.h>
static int aout_exec(int, struct exec *, u_long *, int);
d127 5
a131 2
#ifdef BOOT_ELF
		Elf_Ehdr elf;
d158 10
a167 4
#ifdef BOOT_ELF
	if (memcmp(hdr.elf.e_ident, ELFMAG, SELFMAG) == 0 &&
	    hdr.elf.e_ident[EI_CLASS] == ELFCLASS) {
		rval = elf_exec(fd, &hdr.elf, marks, flags);
a274 177

#ifdef BOOT_ELF
static int
elf_exec(int fd, Elf_Ehdr *elf, u_long *marks, int flags)
{
	Elf_Shdr *shp;
	Elf_Phdr *phdr;
	Elf_Off off;
	int i;
	size_t sz;
	int first;
	int havesyms;
	paddr_t minp = ~0, maxp = 0, pos = 0;
	paddr_t offset = marks[MARK_START], shpp, elfp;

	sz = elf->e_phnum * sizeof(Elf_Phdr);
	phdr = ALLOC(sz);

	if (lseek(fd, elf->e_phoff, SEEK_SET) == -1)  {
		WARN(("lseek phdr"));
		FREE(phdr, sz);
		return 1;
	}
	if (read(fd, phdr, sz) != sz) {
		WARN(("read program headers"));
		FREE(phdr, sz);
		return 1;
	}

	for (first = 1, i = 0; i < elf->e_phnum; i++) {

		if (phdr[i].p_type != PT_LOAD ||
		    (phdr[i].p_flags & (PF_W|PF_R|PF_X)) == 0)
			continue;

#define IS_TEXT(p)	(p.p_flags & PF_X)
#define IS_DATA(p)	((p.p_flags & PF_X) == 0)
#define IS_BSS(p)	(p.p_filesz < p.p_memsz)
		/*
		 * XXX: Assume first address is lowest
		 */
		if ((IS_TEXT(phdr[i]) && (flags & LOAD_TEXT)) ||
		    (IS_DATA(phdr[i]) && (flags & LOAD_DATA))) {

			/* Read in segment. */
			PROGRESS(("%s%lu", first ? "" : "+",
			    (u_long)phdr[i].p_filesz));

			if (lseek(fd, phdr[i].p_offset, SEEK_SET) == -1)  {
				WARN(("lseek text"));
				FREE(phdr, sz);
				return 1;
			}
			if (READ(fd, phdr[i].p_vaddr, phdr[i].p_filesz) !=
			    phdr[i].p_filesz) {
				WARN(("read text"));
				FREE(phdr, sz);
				return 1;
			}
			first = 0;

		}
		if ((IS_TEXT(phdr[i]) && (flags & (LOAD_TEXT|COUNT_TEXT))) ||
		    (IS_DATA(phdr[i]) && (flags & (LOAD_DATA|COUNT_TEXT)))) {
			pos = phdr[i].p_vaddr;
			if (minp > pos)
				minp = pos;
			pos += phdr[i].p_filesz;
			if (maxp < pos)
				maxp = pos;
		}

		/* Zero out bss. */
		if (IS_BSS(phdr[i]) && (flags & LOAD_BSS)) {
			PROGRESS(("+%lu",
			    (u_long)(phdr[i].p_memsz - phdr[i].p_filesz)));
			BZERO((phdr[i].p_vaddr + phdr[i].p_filesz),
			    phdr[i].p_memsz - phdr[i].p_filesz);
		}
		if (IS_BSS(phdr[i]) && (flags & (LOAD_BSS|COUNT_BSS))) {
			pos += phdr[i].p_memsz - phdr[i].p_filesz;
			if (maxp < pos)
				maxp = pos;
		}
	}
	FREE(phdr, sz);

	/*
	 * Copy the ELF and section headers.
	 */
	elfp = maxp = roundup(maxp, sizeof(long));
	if (flags & (LOAD_HDR|COUNT_HDR))
		maxp += sizeof(Elf_Ehdr);

	if (flags & (LOAD_SYM|COUNT_SYM)) {
		if (lseek(fd, elf->e_shoff, SEEK_SET) == -1)  {
			WARN(("lseek section headers"));
			return 1;
		}
		sz = elf->e_shnum * sizeof(Elf_Shdr);
		shp = ALLOC(sz);

		if (read(fd, shp, sz) != sz) {
			WARN(("read section headers"));
			FREE(shp, sz);
			return 1;
		}

		shpp = maxp;
		maxp += roundup(sz, sizeof(long));

		/*
		 * Now load the symbol sections themselves.  Make sure the
		 * sections are aligned. Don't bother with string tables if
		 * there are no symbol sections.
		 */
		off = roundup((sizeof(Elf_Ehdr) + sz), sizeof(long));

		for (havesyms = i = 0; i < elf->e_shnum; i++)
			if (shp[i].sh_type == SHT_SYMTAB)
				havesyms = 1;

		for (first = 1, i = 0; i < elf->e_shnum; i++) {
			if (shp[i].sh_type == SHT_SYMTAB ||
			    shp[i].sh_type == SHT_STRTAB) {
				if (havesyms && (flags & LOAD_SYM)) {
					PROGRESS(("%s%ld", first ? " [" : "+",
					    (u_long)shp[i].sh_size));
					if (lseek(fd, shp[i].sh_offset,
					    SEEK_SET) == -1) {
						WARN(("lseek symbols"));
						FREE(shp, sz);
						return 1;
					}
					if (READ(fd, maxp, shp[i].sh_size) !=
					    shp[i].sh_size) {
						WARN(("read symbols"));
						FREE(shp, sz);
						return 1;
					}
				}
				maxp += roundup(shp[i].sh_size,
				    sizeof(long));
				shp[i].sh_offset = off;
				off += roundup(shp[i].sh_size, sizeof(long));
				first = 0;
			}
		}
		if (flags & LOAD_SYM) {
			BCOPY(shp, shpp, sz);

			if (havesyms && first == 0)
				PROGRESS(("]"));
		}
		FREE(shp, sz);
	}

	/*
	 * Frob the copied ELF header to give information relative
	 * to elfp.
	 */
	if (flags & LOAD_HDR) {
		elf->e_phoff = 0;
		elf->e_shoff = sizeof(Elf_Ehdr);
		elf->e_phentsize = 0;
		elf->e_phnum = 0;
		BCOPY(elf, elfp, sizeof(*elf));
	}

	marks[MARK_START] = LOADADDR(minp);
	marks[MARK_ENTRY] = LOADADDR(elf->e_entry);
	marks[MARK_NSYM] = 1;	/* XXX: Kernel needs >= 0 */
	marks[MARK_SYM] = LOADADDR(elfp);
	marks[MARK_END] = LOADADDR(maxp);
	return 0;
}
#endif /* BOOT_ELF */
@


1.11
log
@do not load unneeded stringtab sections; avoids backward seeking; from netbsd; tested by miod@@ and martin@@; deraadt@@ ok
@
text
@d264 1
d266 2
a267 1
	int first, i, j;
d373 5
d379 3
a381 14
			switch (shp[i].sh_type) {
			case SHT_STRTAB:
				for (j = 0; j < elf->e_shnum; j++)
					if (shp[j].sh_type == SHT_SYMTAB &&
					    shp[j].sh_link == (unsigned)i)
						goto havesym;
				/* FALLTHROUGH */
			default:
				/* Not loading this, so zero out the offset. */
				shp[i].sh_offset = 0;
				break;
			havesym:
			case SHT_SYMTAB:
				if (flags & LOAD_SYM) {
a389 1
printf("*");
a402 2
			/* Since we don't load .shstrtab, zero the name. */
			shp[i].sh_name = 0;
d407 1
a407 1
			if (first == 0)
@


1.10
log
@do not leak memory if read()ing section headers fails; from Andrey Matveev <evol@@online.ptt.ru>
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.9 2004/02/10 01:01:13 tom Exp $ */
a263 1
	int i;
d265 1
a265 2
	int first;
	int havesyms;
a370 5

		for (havesyms = i = 0; i < elf->e_shnum; i++)
			if (shp[i].sh_type == SHT_SYMTAB)
				havesyms = 1;

d372 14
a385 3
			if (shp[i].sh_type == SHT_SYMTAB ||
			    shp[i].sh_type == SHT_STRTAB) {
				if (havesyms && (flags & LOAD_SYM)) {
d394 1
d408 2
d414 1
a414 1
			if (havesyms && first == 0)
@


1.9
log
@Allow /boot to load read-only data segments in ELF kernels.

Thanks to miod@@ for testing on many archs.

ok deraadt@@.
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.8 2003/08/11 06:37:39 mickey Exp $ */
d360 1
@


1.8
log
@load file in one pass avoiding seeking the headers back and forth; miod@@ testing & ok (two months ago and then i forgot ;)
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.7 2003/08/11 06:23:09 deraadt Exp $ */
d288 1
a288 1
		    (phdr[i].p_flags & (PF_W|PF_X)) == 0)
d292 1
a292 1
#define IS_DATA(p)	(p.p_flags & PF_W)
@


1.7
log
@ansification and knf and protos
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.6 2003/06/02 23:28:09 millert Exp $ */
d262 1
d271 14
d286 3
a288 12
		Elf_Phdr phdr;
		if (lseek(fd, elf->e_phoff + sizeof(phdr) * i, SEEK_SET)
		    == -1)  {
			WARN(("lseek phdr"));
			return 1;
		}
		if (read(fd, (void *)&phdr, sizeof(phdr)) != sizeof(phdr)) {
			WARN(("read phdr"));
			return 1;
		}
		if (phdr.p_type != PT_LOAD ||
		    (phdr.p_flags & (PF_W|PF_X)) == 0)
d297 2
a298 2
		if ((IS_TEXT(phdr) && (flags & LOAD_TEXT)) ||
		    (IS_DATA(phdr) && (flags & LOAD_DATA))) {
d302 1
a302 1
			    (u_long)phdr.p_filesz));
d304 1
a304 1
			if (lseek(fd, phdr.p_offset, SEEK_SET) == -1)  {
d306 1
d309 2
a310 2
			if (READ(fd, phdr.p_vaddr, phdr.p_filesz) !=
			    phdr.p_filesz) {
d312 1
d318 3
a320 3
		if ((IS_TEXT(phdr) && (flags & (LOAD_TEXT|COUNT_TEXT))) ||
		    (IS_DATA(phdr) && (flags & (LOAD_DATA|COUNT_TEXT)))) {
			pos = phdr.p_vaddr;
d323 1
a323 1
			pos += phdr.p_filesz;
d329 1
a329 1
		if (IS_BSS(phdr) && (flags & LOAD_BSS)) {
d331 3
a333 3
			    (u_long)(phdr.p_memsz - phdr.p_filesz)));
			BZERO((phdr.p_vaddr + phdr.p_filesz),
			    phdr.p_memsz - phdr.p_filesz);
d335 2
a336 2
		if (IS_BSS(phdr) && (flags & (LOAD_BSS|COUNT_BSS))) {
			pos += phdr.p_memsz - phdr.p_filesz;
d341 1
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.5 2003/06/01 17:00:32 deraadt Exp $ */
d111 1
a111 4
loadfile(fname, marks, flags)
	const char *fname;
	u_long *marks;
	int flags;
d177 1
a177 5
coff_exec(fd, coff, marks, flags)
	int fd;
	struct ecoff_exechdr *coff;
	u_long *marks;
	int flags;
d259 1
a259 5
elf_exec(fd, elf, marks, flags)
	int fd;
	Elf_Ehdr *elf;
	u_long *marks;
	int flags;
d426 1
a426 5
aout_exec(fd, x, marks, flags)
	int fd;
	struct exec *x;
	u_long *marks;
	int flags;
@


1.5
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.4 2003/05/07 18:11:37 mickey Exp $ */
d56 1
a56 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@plug a memory leak
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.3 2002/11/11 00:04:30 mickey Exp $ */
d130 1
a130 1
		
d460 1
a460 1
	
@


1.3
log
@avoid uninitialized warnings from gcc; art@@ ok
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.2 2002/03/14 01:27:07 millert Exp $ */
a361 1

a410 1
			FREE(shp, sz);
d415 1
@


1.2
log
@First round of __P removal in sys
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.1 2001/06/23 01:47:40 drahn Exp $ */
d282 1
a282 1
	paddr_t minp = ~0, maxp = 0, pos;
d352 2
a353 3
	maxp = roundup(maxp, sizeof(long));
	if (flags & (LOAD_HDR|COUNT_HDR)) {
		elfp = maxp;
a354 1
	}
@


1.1
log
@Add MI loadfile support, from NetBSD
This is currently only used on powerpc, but may be looked
at for other architectures.
Piece of the support to have kernel symbols on powerpc.
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.10 2000/12/03 02:53:04 tsutsui Exp $ */
d99 1
a99 1
static int coff_exec __P((int, struct ecoff_exechdr *, u_long *, int));
d103 1
a103 1
static int elf_exec __P((int, Elf_Ehdr *, u_long *, int));
d107 1
a107 1
static int aout_exec __P((int, struct exec *, u_long *, int));
@


1.1.6.1
log
@Sync UBC branch to -current
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.1 2001/06/23 01:47:40 drahn Exp $ */
d99 1
a99 1
static int coff_exec(int, struct ecoff_exechdr *, u_long *, int);
d103 1
a103 1
static int elf_exec(int, Elf_Ehdr *, u_long *, int);
d107 1
a107 1
static int aout_exec(int, struct exec *, u_long *, int);
@


1.1.6.2
log
@sync
@
text
@d2 1
a2 1
/* $OpenBSD$ */
d282 1
a282 1
	paddr_t minp = ~0, maxp = 0, pos = 0;
d352 3
a354 2
	elfp = maxp = roundup(maxp, sizeof(long));
	if (flags & (LOAD_HDR|COUNT_HDR))
d356 1
d364 1
d414 1
a418 1
		FREE(shp, sz);
@


1.1.2.1
log
@Merge in -current from roughly a week ago
@
text
@d2 1
a2 1
/* $OpenBSD$ */
d99 1
a99 1
static int coff_exec(int, struct ecoff_exechdr *, u_long *, int);
d103 1
a103 1
static int elf_exec(int, Elf_Ehdr *, u_long *, int);
d107 1
a107 1
static int aout_exec(int, struct exec *, u_long *, int);
@


1.1.2.2
log
@Sync the SMP branch with 3.3
@
text
@d282 1
a282 1
	paddr_t minp = ~0, maxp = 0, pos = 0;
d352 3
a354 2
	elfp = maxp = roundup(maxp, sizeof(long));
	if (flags & (LOAD_HDR|COUNT_HDR))
d356 1
@


1.1.2.3
log
@Sync the SMP branch to -current. This includes moving to ELF.
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.1.2.2 2003/03/28 00:41:27 niklas Exp $ */
d362 1
d412 1
a416 1
		FREE(shp, sz);
@


1.1.2.4
log
@Sync SMP branch to -current
@
text
@d2 1
a2 1
/* $OpenBSD: loadfile.c,v 1.1.2.3 2003/05/13 19:21:29 ho Exp $ */
d56 5
a60 1
 * 3. Neither the name of the University nor the names of its contributors
d130 1
a130 1

d460 1
a460 1

@


1.1.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d2 1
a2 1
/* $OpenBSD$ */
d111 4
a114 1
loadfile(const char *fname, u_long *marks, int flags)
d180 5
a184 1
coff_exec(int fd, struct ecoff_exechdr *coff, u_long *marks, int flags)
d266 5
a270 1
elf_exec(int fd, Elf_Ehdr *elf, u_long *marks, int flags)
a272 1
	Elf_Phdr *phdr;
a280 14
	sz = elf->e_phnum * sizeof(Elf_Phdr);
	phdr = ALLOC(sz);

	if (lseek(fd, elf->e_phoff, SEEK_SET) == -1)  {
		WARN(("lseek phdr"));
		FREE(phdr, sz);
		return 1;
	}
	if (read(fd, phdr, sz) != sz) {
		WARN(("read program headers"));
		FREE(phdr, sz);
		return 1;
	}

d282 12
a293 3

		if (phdr[i].p_type != PT_LOAD ||
		    (phdr[i].p_flags & (PF_W|PF_X)) == 0)
d302 2
a303 2
		if ((IS_TEXT(phdr[i]) && (flags & LOAD_TEXT)) ||
		    (IS_DATA(phdr[i]) && (flags & LOAD_DATA))) {
d307 1
a307 1
			    (u_long)phdr[i].p_filesz));
d309 1
a309 1
			if (lseek(fd, phdr[i].p_offset, SEEK_SET) == -1)  {
a310 1
				FREE(phdr, sz);
d313 2
a314 2
			if (READ(fd, phdr[i].p_vaddr, phdr[i].p_filesz) !=
			    phdr[i].p_filesz) {
a315 1
				FREE(phdr, sz);
d321 3
a323 3
		if ((IS_TEXT(phdr[i]) && (flags & (LOAD_TEXT|COUNT_TEXT))) ||
		    (IS_DATA(phdr[i]) && (flags & (LOAD_DATA|COUNT_TEXT)))) {
			pos = phdr[i].p_vaddr;
d326 1
a326 1
			pos += phdr[i].p_filesz;
d332 1
a332 1
		if (IS_BSS(phdr[i]) && (flags & LOAD_BSS)) {
d334 3
a336 3
			    (u_long)(phdr[i].p_memsz - phdr[i].p_filesz)));
			BZERO((phdr[i].p_vaddr + phdr[i].p_filesz),
			    phdr[i].p_memsz - phdr[i].p_filesz);
d338 2
a339 2
		if (IS_BSS(phdr[i]) && (flags & (LOAD_BSS|COUNT_BSS))) {
			pos += phdr[i].p_memsz - phdr[i].p_filesz;
a343 1
	FREE(phdr, sz);
d437 5
a441 1
aout_exec(int fd, struct exec *x, u_long *marks, int flags)
@


1.1.2.6
log
@Merge with the trunk
@
text
@d288 1
a288 1
		    (phdr[i].p_flags & (PF_W|PF_R|PF_X)) == 0)
d292 1
a292 1
#define IS_DATA(p)	((p.p_flags & PF_X) == 0)
@


