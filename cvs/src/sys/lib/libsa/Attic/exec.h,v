head	1.6;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.4.0.8
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.4
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.2
	SMP_BASE:1.3
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2003.06.02.20.12.23;	author mickey;	state dead;
branches;
next	1.5;

1.5
date	2002.03.14.01.27.07;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.30.21.59.30;	author mickey;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2000.01.06.02.59.23;	author mickey;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	98.07.14.17.21.44;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	98.07.14.03.29.08;	author mickey;	state Exp;
branches;
next	;

1.3.2.1
date	2001.05.14.22.32.52;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2003.06.07.11.03.42;	author ho;	state dead;
branches;
next	;

1.4.8.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@kill exec.new bit i had forgotten
@
text
@/*	$OpenBSD: exec.h,v 1.5 2002/03/14 01:27:07 millert Exp $	*/

/*
 * Copyright (c) 1998 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef _SA_EXEC_H_
#define _SA_EXEC_H_

#define	MAX_EXEC_NAME	8

#ifdef	EXEC_AOUT
#include <sys/exec_aout.h>
#endif
#ifdef	EXEC_ECOFF
#include <sys/exec_ecoff.h>
#endif
#ifdef	EXEC_ELF
#include <sys/exec_elf.h>
#endif
#ifdef	EXEC_SOM
#include <machine/som.h>
#endif

union x_header {
#ifdef	EXEC_AOUT
	struct exec		x_aout;
#endif
#ifdef	EXEC_ECOFF
	struct ecoff_exechdr	x_ecoff;
#endif
#ifdef	EXEC_ELF
	struct elfhdr		x_elf;
#endif
#ifdef	EXEC_SOM
	struct som_filehdr	x_som;
#endif
};

struct x_param;
struct x_sw {
	char name[MAX_EXEC_NAME];
	/* returns file position to lseek to */
	int (*probe)(int, union x_header *);
	/* zero on success */
	int (*load)(int, struct x_param *);
	int (*ldsym)(int, struct x_param *);
};

struct x_param {
	union x_header *xp_hdr;
	const struct x_sw *xp_execsw;
	u_int xp_entry, xp_end;

	struct { u_int addr, size, foff; } text, data, bss, sym, str;
};

extern const struct x_sw execsw[];
void machdep_exec(struct x_param *, int, void *);

int aout_probe(int, union x_header *);
int aout_load(int, struct x_param *);
int aout_ldsym(int, struct x_param *);

int elf_probe(int, union x_header *);
int elf_load(int, struct x_param *);
int elf_ldsym(int, struct x_param *);

int ecoff_probe(int, union x_header *);
int ecoff_load(int, struct x_param *);
int ecoff_ldsym(int, struct x_param *);

#endif /* _SA_EXEC_H_ */
@


1.5
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.h,v 1.4 2000/05/30 21:59:30 mickey Exp $	*/
@


1.4
log
@split symbol loading for a.out into a separate routine (tested on i386)
add symbol loading for elf (tested on hppa)
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.h,v 1.3 2000/01/06 02:59:23 mickey Exp $	*/
d70 1
a70 1
	int (*probe) __P((int, union x_header *));
d72 2
a73 2
	int (*load) __P((int, struct x_param *));
	int (*ldsym) __P((int, struct x_param *));
d85 1
a85 1
void machdep_exec __P((struct x_param *, int, void *));
d87 11
a97 11
int aout_probe __P((int, union x_header *));
int aout_load __P((int, struct x_param *));
int aout_ldsym __P((int, struct x_param *));

int elf_probe __P((int, union x_header *));
int elf_load __P((int, struct x_param *));
int elf_ldsym __P((int, struct x_param *));

int ecoff_probe __P((int, union x_header *));
int ecoff_load __P((int, struct x_param *));
int ecoff_ldsym __P((int, struct x_param *));
@


1.4.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.h,v 1.4 2000/05/30 21:59:30 mickey Exp $	*/
d70 1
a70 1
	int (*probe)(int, union x_header *);
d72 2
a73 2
	int (*load)(int, struct x_param *);
	int (*ldsym)(int, struct x_param *);
d85 1
a85 1
void machdep_exec(struct x_param *, int, void *);
d87 11
a97 11
int aout_probe(int, union x_header *);
int aout_load(int, struct x_param *);
int aout_ldsym(int, struct x_param *);

int elf_probe(int, union x_header *);
int elf_load(int, struct x_param *);
int elf_ldsym(int, struct x_param *);

int ecoff_probe(int, union x_header *);
int ecoff_load(int, struct x_param *);
int ecoff_ldsym(int, struct x_param *);
@


1.3
log
@som is a md format
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.h,v 1.2 1998/07/14 17:21:44 mickey Exp $	*/
d73 1
d89 1
d93 1
d97 1
a97 3

int som_probe __P((int, union x_header *));
int som_load __P((int, struct x_param *));
@


1.3.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.h,v 1.4 2000/05/30 21:59:30 mickey Exp $	*/
a72 1
	int (*ldsym) __P((int, struct x_param *));
a87 1
int aout_ldsym __P((int, struct x_param *));
a90 1
int elf_ldsym __P((int, struct x_param *));
d94 3
a96 1
int ecoff_ldsym __P((int, struct x_param *));
@


1.3.2.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d70 1
a70 1
	int (*probe)(int, union x_header *);
d72 2
a73 2
	int (*load)(int, struct x_param *);
	int (*ldsym)(int, struct x_param *);
d85 1
a85 1
void machdep_exec(struct x_param *, int, void *);
d87 11
a97 11
int aout_probe(int, union x_header *);
int aout_load(int, struct x_param *);
int aout_ldsym(int, struct x_param *);

int elf_probe(int, union x_header *);
int elf_load(int, struct x_param *);
int elf_ldsym(int, struct x_param *);

int ecoff_probe(int, union x_header *);
int ecoff_load(int, struct x_param *);
int ecoff_ldsym(int, struct x_param *);
@


1.3.2.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.h,v 1.3.2.2 2002/03/28 15:02:00 niklas Exp $	*/
@


1.2
log
@s/ecoff_filehdr/ecoff_exechdr/
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.h,v 1.1 1998/07/14 03:29:08 mickey Exp $	*/
d48 1
a48 1
#include <sys/exec_som.h>
@


1.1
log
@multiformat exec framework
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d56 1
a56 1
	struct ecoff_filehdr	x_ecoff;
@

