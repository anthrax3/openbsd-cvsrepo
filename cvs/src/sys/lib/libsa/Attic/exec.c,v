head	1.27;
access;
symbols
	OPENBSD_5_2:1.26.0.38
	OPENBSD_5_2_BASE:1.26
	OPENBSD_5_1_BASE:1.26
	OPENBSD_5_1:1.26.0.36
	OPENBSD_5_0:1.26.0.34
	OPENBSD_5_0_BASE:1.26
	OPENBSD_4_9:1.26.0.32
	OPENBSD_4_9_BASE:1.26
	OPENBSD_4_8:1.26.0.30
	OPENBSD_4_8_BASE:1.26
	OPENBSD_4_7:1.26.0.26
	OPENBSD_4_7_BASE:1.26
	OPENBSD_4_6:1.26.0.28
	OPENBSD_4_6_BASE:1.26
	OPENBSD_4_5:1.26.0.24
	OPENBSD_4_5_BASE:1.26
	OPENBSD_4_4:1.26.0.22
	OPENBSD_4_4_BASE:1.26
	OPENBSD_4_3:1.26.0.20
	OPENBSD_4_3_BASE:1.26
	OPENBSD_4_2:1.26.0.18
	OPENBSD_4_2_BASE:1.26
	OPENBSD_4_1:1.26.0.16
	OPENBSD_4_1_BASE:1.26
	OPENBSD_4_0:1.26.0.14
	OPENBSD_4_0_BASE:1.26
	OPENBSD_3_9:1.26.0.12
	OPENBSD_3_9_BASE:1.26
	OPENBSD_3_8:1.26.0.10
	OPENBSD_3_8_BASE:1.26
	OPENBSD_3_7:1.26.0.8
	OPENBSD_3_7_BASE:1.26
	OPENBSD_3_6:1.26.0.6
	OPENBSD_3_6_BASE:1.26
	SMP_SYNC_A:1.26
	SMP_SYNC_B:1.26
	OPENBSD_3_5:1.26.0.4
	OPENBSD_3_5_BASE:1.26
	OPENBSD_3_4:1.26.0.2
	OPENBSD_3_4_BASE:1.26
	UBC_SYNC_A:1.22
	OPENBSD_3_3:1.22.0.24
	OPENBSD_3_3_BASE:1.22
	OPENBSD_3_2:1.22.0.22
	OPENBSD_3_2_BASE:1.22
	OPENBSD_3_1:1.22.0.20
	OPENBSD_3_1_BASE:1.22
	UBC_SYNC_B:1.22
	UBC:1.22.0.18
	UBC_BASE:1.22
	OPENBSD_3_0:1.22.0.16
	OPENBSD_3_0_BASE:1.22
	OPENBSD_2_9_BASE:1.22
	OPENBSD_2_9:1.22.0.14
	OPENBSD_2_8:1.22.0.12
	OPENBSD_2_8_BASE:1.22
	OPENBSD_2_7:1.22.0.10
	OPENBSD_2_7_BASE:1.22
	SMP:1.22.0.8
	SMP_BASE:1.22
	kame_19991208:1.22
	OPENBSD_2_6:1.22.0.6
	OPENBSD_2_6_BASE:1.22
	OPENBSD_2_5:1.22.0.4
	OPENBSD_2_5_BASE:1.22
	OPENBSD_2_4:1.22.0.2
	OPENBSD_2_4_BASE:1.22
	OPENBSD_2_3:1.19.0.2
	OPENBSD_2_3_BASE:1.19
	OPENBSD_2_2:1.18.0.2
	OPENBSD_2_2_BASE:1.18
	OPENBSD_2_1:1.17.0.2
	OPENBSD_2_1_BASE:1.17
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.27
date	2013.01.01.18.49.33;	author miod;	state dead;
branches;
next	1.26;

1.26
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.25;

1.25
date	2003.08.04.16.30.35;	author millert;	state Exp;
branches;
next	1.24;

1.24
date	2003.06.02.23.28.09;	author millert;	state Exp;
branches;
next	1.23;

1.23
date	2003.06.01.17.00.32;	author deraadt;	state Exp;
branches;
next	1.22;

1.22
date	98.07.14.14.26.18;	author mickey;	state Exp;
branches
	1.22.8.1;
next	1.21;

1.21
date	98.04.27.18.38.25;	author millert;	state Exp;
branches;
next	1.20;

1.20
date	98.04.25.18.31.58;	author millert;	state Exp;
branches;
next	1.19;

1.19
date	98.02.23.20.32.25;	author niklas;	state Exp;
branches;
next	1.18;

1.18
date	97.09.28.22.46.02;	author weingart;	state Exp;
branches;
next	1.17;

1.17
date	97.04.11.19.17.03;	author weingart;	state Exp;
branches;
next	1.16;

1.16
date	97.03.31.07.43.25;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	97.03.31.07.42.23;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	97.03.31.04.57.36;	author weingart;	state Exp;
branches;
next	1.13;

1.13
date	97.03.31.04.20.08;	author weingart;	state Exp;
branches;
next	1.12;

1.12
date	97.03.30.20.13.04;	author mickey;	state Exp;
branches;
next	1.11;

1.11
date	97.03.27.18.13.32;	author weingart;	state Exp;
branches;
next	1.10;

1.10
date	97.03.25.20.30.41;	author niklas;	state Exp;
branches;
next	1.9;

1.9
date	97.02.05.11.14.24;	author downsj;	state Exp;
branches;
next	1.8;

1.8
date	97.01.18.03.28.50;	author downsj;	state Exp;
branches;
next	1.7;

1.7
date	96.12.08.15.15.49;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.10.16.13.01.23;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	96.09.23.14.18.52;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.06.10.07.27.59;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.22.12.00.43;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	95.12.15.08.09.38;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.57;	author deraadt;	state Exp;
branches;
next	;

1.22.8.1
date	2003.06.07.11.03.42;	author ho;	state Exp;
branches;
next	1.22.8.2;

1.22.8.2
date	2004.02.19.10.57.19;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Remove libsa exec.c, not used by anything anymore; all boot blocks now use
loadfile or a derivative of.
@
text
@/*	$OpenBSD: exec.c,v 1.26 2003/08/11 06:23:09 deraadt Exp $	*/
/*	$NetBSD: exec.c,v 1.15 1996/10/13 02:29:01 christos Exp $	*/

/*-
 * Copyright (c) 1982, 1986, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/param.h>
#include <sys/exec.h>
#include <sys/reboot.h>
#ifndef INSECURE
#include <sys/stat.h>
#endif

#include "stand.h"

static char *ssym, *esym;

extern u_int opendev;

void
exec(char *path, void *loadaddr, int howto)
{
	int io;
#ifndef INSECURE
	struct stat sb;
#endif
	struct exec x;
	u_int i;
	ssize_t sz;
	char *addr;
#ifdef EXEC_DEBUG
	char *daddr, *etxt;
#endif

	io = open(path, 0);
	if (io < 0)
		return;

	(void) fstat(io, &sb);
	if (sb.st_mode & 2)
		printf("non-secure file, check permissions!\n");

	sz = read(io, (char *)&x, sizeof(x));
	if (sz != sizeof(x) || N_BADMAG(x)) {
		close(io);
		errno = EFTYPE;
		return;
	}

#ifdef EXEC_DEBUG
	printf("\nstruct exec {%x, %x, %x, %x, %x, %x, %x, %x}\n",
		x.a_midmag, x.a_text, x.a_data, x.a_bss, x.a_syms,
		x.a_entry, x.a_trsize, x.a_drsize);
#endif

	/* Text */
	printf("%u", x.a_text);
	addr = loadaddr;
	sz = x.a_text;
	if (N_GETMAGIC(x) == ZMAGIC) {
		bcopy((char *)&x, addr, sizeof x);
		addr += sizeof x;
		sz -= sizeof x;
	}
	if (read(io, (char *)addr, sz) != sz)
		goto shread;
	addr += sz;
#ifdef EXEC_DEBUG
	printf("\ntext {%x, %x, %x, %x}\n",
	    addr[0], addr[1], addr[2], addr[3]);
	etxt = addr;
#endif
	if (N_GETMAGIC(x) == NMAGIC)
		while ((long)addr & (N_PAGSIZ(x) - 1))
			*addr++ = 0;

	/* Data */
#ifdef EXEC_DEBUG
	daddr = addr;
#endif
	printf("+%u", x.a_data);
	if (read(io, addr, x.a_data) != (ssize_t)x.a_data)
		goto shread;
	addr += x.a_data;

	/* Bss */
	printf("+%u", x.a_bss);
	for (i = 0; i < x.a_bss; i++)
		*addr++ = 0;

	/* Symbols */
	if (x.a_syms) {
		ssym = addr;
		bcopy(&x.a_syms, addr, sizeof(x.a_syms));
		addr += sizeof(x.a_syms);
		printf("+[%u", x.a_syms);
		if (read(io, addr, x.a_syms) != (ssize_t)x.a_syms)
			goto shread;
		addr += x.a_syms;

		if (read(io, &i, sizeof(u_int)) != sizeof(u_int))
			goto shread;

		bcopy(&i, addr, sizeof(u_int));
		if (i) {
			sz = i - sizeof(int);
			addr += sizeof(int);
			if (read(io, addr, sz) != sz)
				goto shread;
			addr += sz;
		}

		/* and that many bytes of string table */
		printf("+%d]", sz);
		esym = addr;
	} else {
		ssym = 0;
		esym = 0;
	}

	close(io);

	/* and note the end address of all this	*/
	printf(" total=0x%lx", (u_long)addr);

/* XXX - Hack alert!
   This is no good, loadaddr is passed into
   machdep_start(), and it should do whatever
   is needed.

	x.a_entry += (long)loadaddr;
*/
	printf(" start=0x%x\n", x.a_entry);

#ifdef EXEC_DEBUG
	printf("loadaddr=%p etxt=%p daddr=%p ssym=%p esym=%p\n",
	    loadaddr, etxt, daddr, ssym, esym);
	printf("\n\nReturn to boot...\n");
	getchar();
#endif

	machdep_start((char *)((register_t)x.a_entry), howto, loadaddr, ssym,
	    esym);

	/* exec failed */
	errno = ENOEXEC;
	return;

shread:
	close(io);
	errno = EIO;
	return;
}
@


1.26
log
@ansification and knf and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.25 2003/08/04 16:30:35 millert Exp $	*/
@


1.25
log
@Add missing close() on EFTYPE error in exec(); from Patrick Latifi
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.24 2003/06/02 23:28:09 millert Exp $	*/
d47 1
a47 4
exec(path, loadaddr, howto)
	char *path;
	void *loadaddr;
	int howto;
d82 1
a82 1
        /* Text */
d103 1
a103 1
        /* Data */
d112 1
a112 1
        /* Bss */
d117 1
a117 1
        /* Symbols */
d162 1
a162 1
        printf("loadaddr=%p etxt=%p daddr=%p ssym=%p esym=%p\n",
d164 2
a165 2
        printf("\n\nReturn to boot...\n");
        getchar();
@


1.24
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.23 2003/06/01 17:00:32 deraadt Exp $	*/
d74 1
@


1.23
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.22 1998/07/14 14:26:18 mickey Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.22
log
@struct exec members are not long any more
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.21 1998/04/27 18:38:25 millert Exp $	*/
d141 1
a141 1
                	goto shread;
d169 1
a169 1
	    	loadaddr, etxt, daddr, ssym, esym);
@


1.22.8.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.22 1998/07/14 14:26:18 mickey Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
d141 1
a141 1
				goto shread;
d169 1
a169 1
	    loadaddr, etxt, daddr, ssym, esym);
@


1.22.8.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 4
a50 1
exec(char *path, void *loadaddr, int howto)
a73 1
		close(io);
d84 1
a84 1
	/* Text */
d105 1
a105 1
	/* Data */
d114 1
a114 1
	/* Bss */
d119 1
a119 1
	/* Symbols */
d164 1
a164 1
	printf("loadaddr=%p etxt=%p daddr=%p ssym=%p esym=%p\n",
d166 2
a167 2
	printf("\n\nReturn to boot...\n");
	getchar();
@


1.21
log
@Silence warning now that a_* is not long.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.20 1998/04/25 18:31:58 millert Exp $	*/
d83 1
a83 1
	printf("\nstruct exec {%lx, %lx, %lx, %lx, %lx, %lx, %lx, %lx}\n",
@


1.20
log
@a.out fields are u_int32_t not long; fix warnings from printf.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.19 1998/02/23 20:32:25 niklas Exp $	*/
d174 2
a175 1
	machdep_start((char *)x.a_entry, howto, loadaddr, ssym, esym);
@


1.19
log
@strong signedness typing a version of egcs I tried months ago wanted
me to fix.  I am not sure these are necessary for gas 2.8 but I figure I
would commit them anyhow.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.18 1997/09/28 22:46:02 weingart Exp $	*/
d89 1
a89 1
	printf("%ld", x.a_text);
d113 1
a113 1
	printf("+%ld", x.a_data);
d119 1
a119 1
	printf("+%ld", x.a_bss);
d128 1
a128 1
		printf("+[%ld", x.a_syms);
d165 1
a165 1
	printf(" start=0x%lx\n", x.a_entry);
@


1.18
log
@Kill non-secure blip.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.17 1997/04/11 19:17:03 weingart Exp $	*/
d61 2
a62 1
	int i;
d76 2
a77 3
	i = read(io, (char *)&x, sizeof(x));
	if (i != sizeof(x) ||
	    N_BADMAG(x)) {
d91 1
a91 1
	i = x.a_text;
d95 1
a95 1
		i -= sizeof x;
d97 1
a97 1
	if (read(io, (char *)addr, i) != i)
d99 1
a99 1
	addr += i;
d114 1
a114 1
	if (read(io, addr, x.a_data) != x.a_data)
d129 1
a129 1
		if (read(io, addr, x.a_syms) != x.a_syms)
d133 1
a133 1
		if (read(io, &i, sizeof(int)) != sizeof(int))
d136 1
a136 1
		bcopy(&i, addr, sizeof(int));
d138 1
a138 1
			i -= sizeof(int);
d140 1
a140 1
			if (read(io, addr, i) != i)
d142 1
a142 1
			addr += i;
d146 1
a146 1
		printf("+%d]", i);
@


1.17
log
@machdep_start has to do esym mucking...
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.16 1997/03/31 07:43:25 deraadt Exp $	*/
a70 1
#ifndef INSECURE
d72 2
a73 7
	if (sb.st_uid || (sb.st_mode & 2)) {
		printf("non-secure file, will not load\n");
		close(io);
		errno = EPERM;
		return;
	}
#endif
@


1.16
log
@even better indent
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.15 1997/03/31 07:42:23 deraadt Exp $	*/
d153 1
a153 4

#define	round_to_size(x) (((int)(x) + sizeof(int) - 1) & ~(sizeof(int) - 1))
		esym = (char *)round_to_size(addr - (char *)loadaddr);
#undef round_to_size
@


1.15
log
@indent
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.14 1997/03/31 04:57:36 weingart Exp $	*/
d154 2
a155 3
#define	round_to_size(x) \
	(((int)(x) + sizeof(int) - 1) & ~(sizeof(int) - 1))
	        esym = (char *)round_to_size(addr - (char *)loadaddr);
@


1.14
log
@Fix for my fix...
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.13 1997/03/31 04:20:08 weingart Exp $	*/
d108 1
a108 1
		addr[0], addr[1], addr[2], addr[3]);
d130 1
a130 1
	if(x.a_syms){
d156 1
a156 1
        esym = (char *)round_to_size(addr - (char *)loadaddr);
d158 1
a158 1
	}else{
@


1.13
log
@Fix symbol handling (stripped kernels)
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.12 1997/03/30 20:13:04 mickey Exp $	*/
d153 5
a163 5

#define	round_to_size(x) \
	(((int)(x) + sizeof(int) - 1) & ~(sizeof(int) - 1))
        esym = (char *)round_to_size(addr - (char *)loadaddr);
#undef round_to_size
@


1.12
log
@fix comment
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.11 1997/03/27 18:13:32 weingart Exp $	*/
d56 1
a56 1
	register int io;
d62 1
a62 1
	register char *addr;
d130 20
a149 10
	ssym = addr;
	bcopy(&x.a_syms, addr, sizeof(x.a_syms));
	addr += sizeof(x.a_syms);
	printf("+[%ld", x.a_syms);
	if (read(io, addr, x.a_syms) != x.a_syms)
		goto shread;
	addr += x.a_syms;

	if (read(io, &i, sizeof(int)) != sizeof(int))
		goto shread;
d151 5
a155 7
	bcopy(&i, addr, sizeof(int));
	if (i) {
		i -= sizeof(int);
		addr += sizeof(int);
		if (read(io, addr, i) != i)
                	goto shread;
		addr += i;
a156 3

	/* and that many bytes of string table */
	printf("+%d]", i);
@


1.11
log
@Various fixes for ZMAGIC.  Thanks Theo
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.10 1997/03/25 20:30:41 niklas Exp $	*/
d150 1
a150 1
	/* and that many bytes of (debug symbols?) */
@


1.10
log
@Get rid of userland includes
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.9 1997/02/05 11:14:24 downsj Exp $	*/
d88 6
d97 7
a103 8
#ifdef NO_LSEEK
	if (N_GETMAGIC(x) == ZMAGIC && read(io, (char *)addr,
	    (0x400 - sizeof(x))) == -1)
#else
	if (N_GETMAGIC(x) == ZMAGIC && lseek(io, 0x400, SEEK_SET) == -1)
#endif
		goto shread;
	if (read(io, (char *)addr, x.a_text) != x.a_text)
d105 1
a105 1
	addr += x.a_text;
d107 2
d111 1
a111 1
	if (N_GETMAGIC(x) == ZMAGIC || N_GETMAGIC(x) == NMAGIC)
d163 5
d169 1
d173 2
a174 2
        printf("loadaddr = 0x%x etxt = 0x%x daddr = 0x%x ssym=0x%x esym=0x%x\n",
	    loadaddr, etxt, daddr, ssym, esym);
@


1.9
log
@The hp300 bug is now fixed correctly...
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.8 1997/01/18 03:28:50 downsj Exp $	*/
d38 1
a42 2
#include <a.out.h>
#include <string.h>
@


1.8
log
@Gross hack for hp300, and a fix for NO_LSEEK as pointed out by briggs.
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.7 1996/12/08 15:15:49 niklas Exp $	*/
a50 6
#ifdef hp300
#undef N_PAGSIZ
/* XXX - force padding of the text segment to 4k, not 8k. */
#define N_PAGSIZ(_x)	0x1000
#endif

d64 3
d102 3
d110 3
d161 2
a162 1
        printf("ssym=0x%x esym=0x%x\n", ssym, esym);
@


1.7
log
@Merge to NetBSD 961207
@
text
@d1 1
a1 1
/*	$OpenBSD: exec.c,v 1.6 1996/10/16 13:01:23 mickey Exp $	*/
d51 6
d96 2
a97 1
	if (N_GETMAGIC(x) == ZMAGIC && read(io, (char *)addr, 0x400) == -1)
@


1.6
log
@prototype changes.
@
text
@d1 2
a2 2
/*	$OpenBSD: exec.c,v 1.5 1996/09/23 14:18:52 mickey Exp $	*/
/*	$NetBSD: exec.c,v 1.12.4.1 1996/06/02 12:08:48 ragge Exp $	*/
@


1.5
log
@add OpenBSD tag.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d54 1
a54 1
	char *loadaddr;
d141 1
a141 1
        esym = (char *)round_to_size(addr - loadaddr);
@


1.4
log
@pull string.h at right place
@
text
@d1 1
@


1.3
log
@obviously killing gcc warnings is more important than keeping this library small
@
text
@d1 1
a1 1
/*	$NetBSD: exec.c,v 1.12 1996/05/14 10:28:18 leo Exp $	*/
a35 1
#include <string.h>
d42 1
@


1.2
log
@from netbsd; 64-bit cleanup
@
text
@d1 1
a1 1
/*	$NetBSD: exec.c,v 1.11 1995/10/20 00:47:47 cgd Exp $	*/
d86 1
a86 1
	printf("%d", x.a_text);
d102 1
a102 1
	printf("+%d", x.a_data);
d108 1
a108 1
	printf("+%d", x.a_bss);
d116 1
a116 1
	printf("+[%d", x.a_syms);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: exec.c,v 1.10 1995/08/04 07:37:03 thorpej Exp $	*/
d98 1
a98 1
		while ((int)addr & (N_PAGSIZ(x) - 1))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
