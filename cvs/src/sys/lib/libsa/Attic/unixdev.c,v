head	1.10;
access;
symbols
	OPENBSD_5_8:1.9.0.20
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.12
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.16
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.14
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.10
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.14
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.12
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.8
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.10
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.6
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.4
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.2
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.24
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.22
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.20
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.18
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.16
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.14
	OPENBSD_2_8:1.4.0.12
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.10
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.8
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2015.09.18.13.42.31;	author miod;	state dead;
branches;
next	1.9;
commitid	ZDpEheHNR6QmrQfv;

1.9
date	2011.03.13.00.13.53;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.23.16.37.56;	author jsing;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.20.20.53;	author mickey;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.01.17.00.33;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	98.05.25.18.37.30;	author mickey;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	97.03.30.20.15.06;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	97.03.25.20.30.46;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	97.02.16.14.51.58;	author mickey;	state Exp;
branches;
next	;

1.4.8.1
date	2003.06.07.11.03.43;	author ho;	state Exp;
branches;
next	1.4.8.2;

1.4.8.2
date	2004.02.19.10.57.19;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove orphaned files.
@
text
@/*	$OpenBSD: unixdev.c,v 1.9 2011/03/13 00:13:53 deraadt Exp $	*/

/*
 * Copyright (c) 1996-1998 Michael Shalayeff
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#include <sys/param.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/syscall.h>
#define open uopen
#include <sys/fcntl.h>
#include <dev/cons.h>
#undef open
#include "libsa.h"
#include <lib/libsa/unixdev.h>

int
unixstrategy(void *devdata, int rw, daddr32_t blk, size_t size, void *buf,
    size_t *rsize)
{
	int	rc = 0;

#ifdef	UNIX_DEBUG
	printf("unixstrategy: %s %d bytes @@ %d\n",
	    (rw==F_READ?"reading":"writing"), size, blk);
#endif
	if ((rc = ulseek((int)devdata, blk * DEV_BSIZE, 0)) >= 0)
		rc = (rw==F_READ) ? uread((int)devdata, buf, size) :
		    uwrite((int)devdata, buf, size);

	if (rc >= 0) {
		*rsize = (size_t)rc;
		rc = 0;
	} else
		rc = errno;

	return rc;
}

int
unixopen(struct open_file *f, ...)
{
	char **file, *p = NULL;
	va_list ap;
	int fd;

	va_start(ap, f);
	file = va_arg(ap, char **);
	va_end(ap);

#ifdef	UNIX_DEBUG
	printf("unixopen: %s\n", *file);
#endif

	if (strncmp("/dev/", *file, 5) == 0) {
		/* p = strchr(p + 5, '/') */
		for (p = *file + 5; *p != '\0' && *p != '/'; p++)
			;
		if (*p == '/')
			*p = '\0';
	}

	f->f_devdata = (void *)(fd = uopen(*file, O_RDWR, 0));

	*file = p;
	if (p != NULL)
		*p = '/';

	return fd < 0 ? -1 : 0;
}

int
unixclose(struct open_file *f)
{
	return uclose((int)f->f_devdata);
}

int
unixioctl(struct open_file *f, u_long cmd, void *data)
{
	return uioctl((int)f->f_devdata, cmd, data);
}

off_t
ulseek(int fd, off_t off, int wh)
{
	return __syscall((quad_t)SYS_lseek, fd, 0, off, wh);
}


void
unix_probe(struct consdev *cn)
{
	cn->cn_pri = CN_MIDPRI;
	cn->cn_dev = makedev(0,0);
	printf("ux%d ", minor(cn->cn_dev));
}

void
unix_init(struct consdev *cn)
{
}

void
unix_putc(dev_t dev, int c)
{
	uwrite(1, &c, 1);
}

int
unix_getc(dev_t dev)
{
	if (dev & 0x80) {
		struct timeval tv;
		fd_set fdset;
		int rc;

		tv.tv_sec = 0;
		tv.tv_usec = 100000;
		FD_ZERO(&fdset);
		FD_SET(0, &fdset);

		if ((rc = syscall(SYS_select, 1, &fdset, NULL, NULL, &tv)) <= 0)
			return 0;
		else
			return 1;
	} else {
		char c;

		return uread(0, &c, 1)<1? -1: c;
	}
}

time_t
getsecs(void)
{
	return 1;
}

void
time_print(void)
{
}

void
atexit(void)
{
}

int
cnspeed(dev_t dev, int sp)
{
	return 9600;
}

void
__main(void)
{
}
@


1.9
log
@Change daddr_t to daddr32_t.  The bootblocks on our architectures only
do 32-bit block spanning.  If later on we get some that can/should do
64-bit, that can be done now using daddr64_t (but of course, we are taking
this step to finalize the daddr_t 64-bit conversion).
ok miod krw
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.8 2008/01/23 16:37:56 jsing Exp $	*/
@


1.8
log
@Cleanup cn_pri. Change constants to more meaningful names, rather than
the hp300 related ones currently in use. CN_NORMAL becomes CN_LOWPRI,
CN_INTERNAL becomes CN_MIDPRI and CN_REMOTE becomes CN_HIGHPRI.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.7 2003/08/11 06:23:09 deraadt Exp $	*/
d42 1
a42 1
unixstrategy(void *devdata, int rw, daddr_t blk, size_t size, void *buf,
@


1.7
log
@ansification and knf and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.6 2003/06/02 20:20:53 mickey Exp $	*/
d118 1
a118 1
	cn->cn_pri = CN_INTERNAL;
@


1.6
log
@three four kill ...
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.5 2003/06/01 17:00:33 deraadt Exp $	*/
d42 2
a43 7
unixstrategy(devdata, rw, blk, size, buf, rsize)
	void *devdata;
	int rw;
	daddr_t blk;
	size_t size;
	void *buf;
	size_t *rsize;
d67 3
a69 3
	register int fd;
	register va_list ap;
	register char **file, *p = NULL;
d97 1
a97 2
unixclose(f)
	struct open_file *f;
d103 1
a103 4
unixioctl(f, cmd, data)
	struct open_file *f;
	u_long cmd;
	void *data;
d109 1
a109 4
ulseek( fd, off, wh)
	int fd;
	off_t off;
	int wh;
d116 1
a116 2
unix_probe(cn)
	struct consdev *cn;
d124 1
a124 2
unix_init(cn)
	struct consdev *cn;
d129 1
a129 3
unix_putc(dev, c)
	dev_t dev;
	int c;
d135 1
a135 2
unix_getc(dev)
	dev_t dev;
d159 1
a159 1
getsecs()
d165 1
a165 1
time_print()
d170 1
a170 1
atexit()
d175 1
a175 3
cnspeed(dev, sp)
	dev_t dev;
	int sp;
d181 1
a181 1
__main()
a183 1

@


1.5
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.4 1998/05/25 18:37:30 mickey Exp $	*/
a14 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
@


1.4
log
@update up to the current libsa env
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.3 1997/03/30 20:15:06 mickey Exp $	*/
d21 2
a22 2
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
d59 1
a59 1
		(rw==F_READ?"reading":"writing"), size, blk);
d62 2
a63 2
		rc = rw==F_READ? uread((int)devdata, buf, size) :
			uwrite((int)devdata, buf, size);
d91 2
a92 1
		for (p = *file + 5; *p != '\0' && *p != '/'; p++);
d103 1
a103 1
	return fd<0? -1: 0;
d175 1
@


1.4.8.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.4 1998/05/25 18:37:30 mickey Exp $	*/
d15 5
d21 2
a22 2
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
d59 1
a59 1
	    (rw==F_READ?"reading":"writing"), size, blk);
d62 2
a63 2
		rc = (rw==F_READ) ? uread((int)devdata, buf, size) :
		    uwrite((int)devdata, buf, size);
d91 1
a91 2
		for (p = *file + 5; *p != '\0' && *p != '/'; p++)
			;
d102 1
a102 1
	return fd < 0 ? -1 : 0;
a173 1

@


1.4.8.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 7
a48 2
unixstrategy(void *devdata, int rw, daddr_t blk, size_t size, void *buf,
    size_t *rsize)
d72 3
a74 3
	char **file, *p = NULL;
	va_list ap;
	int fd;
d102 2
a103 1
unixclose(struct open_file *f)
d109 4
a112 1
unixioctl(struct open_file *f, u_long cmd, void *data)
d118 4
a121 1
ulseek(int fd, off_t off, int wh)
d128 2
a129 1
unix_probe(struct consdev *cn)
d137 2
a138 1
unix_init(struct consdev *cn)
d143 3
a145 1
unix_putc(dev_t dev, int c)
d151 2
a152 1
unix_getc(dev_t dev)
d176 1
a176 1
getsecs(void)
d182 1
a182 1
time_print(void)
d187 1
a187 1
atexit(void)
d192 3
a194 1
cnspeed(dev_t dev, int sp)
d200 1
a200 1
__main(void)
d203 1
@


1.3
log
@my recent fixes
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.2 1997/03/25 20:30:46 niklas Exp $	*/
d4 1
a4 1
 * Copyright (c) 1996 Michael Shalayeff
a38 1
#include <string.h>
d41 1
d44 1
a44 1
#include "unixdev.h"
d131 3
a133 2
int
unix_probe()
d135 3
a137 1
	return 1;
d141 2
a142 2
unix_putc(c)
	int c;
a143 1
	uwrite(1, &c, 1);
d146 4
a149 2
int
unix_getc()
d151 1
a151 2
	int c;
	return uread(0, &c, 1)<1? -1: c;
d155 2
a156 1
unix_ischar()
d158 18
a175 13
	struct timeval tv;
	fd_set fdset;
	int rc;

	tv.tv_sec = 0;
	tv.tv_usec = 100000;
	FD_ZERO(&fdset);
	FD_SET(0, &fdset);

	if ((rc = syscall(SYS_select, 1, &fdset, NULL, NULL, &tv)) <= 0)
		return 0;
	else
		return 1;
d185 5
d192 1
d194 6
d206 1
@


1.2
log
@Get rid of userland includes
@
text
@d1 1
a1 1
/*	$OpenBSD: unixdev.c,v 1.1 1997/02/16 14:51:58 mickey Exp $	*/
d37 4
d42 1
a42 2
#include <sys/syscall.h>

d127 1
a127 2
	/* XXX zecond zero is unclear to me, but it works */
	return syscall((quad_t)SYS_lseek, fd, 0, off, 0, wh);
d154 13
a166 8
	return 0;
}

void
usleep(n)
	u_int n;
{

@


1.1
log
@test/debug device, readdir->Makefile
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d37 1
d39 1
a39 4
#include <string.h>
#define open uopen
#include <fcntl.h>
#undef open
@
