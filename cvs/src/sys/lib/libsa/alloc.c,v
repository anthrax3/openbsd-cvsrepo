head	1.12;
access;
symbols
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.6
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.2
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.28
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.20
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.24
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.22
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.18
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.16
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.14
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.12
	OPENBSD_5_0:1.10.0.10
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.8
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.6
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.4
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.9.0.24
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.22
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.20
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.18
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.16
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.14
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.12
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.22
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.20
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.18
	OPENBSD_2_8:1.5.0.16
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.14
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.12
	SMP_BASE:1.5
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.10
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.8
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.6
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.03.14.23.08.06;	author krw;	state Exp;
branches;
next	1.11;
commitid	kCz5QgxnxRMKOzNf;

1.11
date	2015.09.14.17.34.04;	author semarie;	state Exp;
branches;
next	1.10;
commitid	5oNXDpLwnQIFT86m;

1.10
date	2009.05.14.18.54.03;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.02.23.28.09;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.01.17.00.32;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.03.16.09;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.08.01.21.57.09;	author pefo;	state Exp;
branches
	1.5.12.1
	1.5.22.1;
next	1.4;

1.4
date	97.02.06.14.22.33;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.12.08.15.15.45;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.09.23.14.18.46;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.56;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.56;	author deraadt;	state Exp;
branches;
next	;

1.5.12.1
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.5.12.2;

1.5.12.2
date	2003.06.07.11.03.42;	author ho;	state Exp;
branches;
next	1.5.12.3;

1.5.12.3
date	2004.02.19.10.57.18;	author niklas;	state Exp;
branches;
next	;

1.5.22.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Change a bunch of (<blah> *)0 to NULL.

ok beck@@ deraadt@@
@
text
@/*	$OpenBSD: alloc.c,v 1.11 2015/09/14 17:34:04 semarie Exp $	*/
/*	$NetBSD: alloc.c,v 1.6 1997/02/04 18:36:33 thorpej Exp $	*/

/*
 * Copyright (c) 1997 Christopher G. Demetriou.  All rights reserved.
 * Copyright (c) 1996
 *	Matthias Drochner.  All rights reserved.
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * The Mach Operating System project at Carnegie-Mellon University.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)alloc.c	8.1 (Berkeley) 6/11/93
 *
 *
 * Copyright (c) 1989, 1990, 1991 Carnegie Mellon University
 * All Rights Reserved.
 *
 * Author: Alessandro Forin
 *
 * Permission to use, copy, modify and distribute this software and its
 * documentation is hereby granted, provided that both the copyright
 * notice and this permission notice appear in all copies of the
 * software, derivative works or modified versions, and any portions
 * thereof, and that both notices appear in supporting documentation.
 *
 * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
 * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
 * ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * Carnegie Mellon requests users of this software to return to
 *
 *  Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 *  School of Computer Science
 *  Carnegie Mellon University
 *  Pittsburgh PA 15213-3890
 *
 * any improvements or extensions that they make and grant Carnegie the
 * rights to redistribute these changes.
 */

/*
 * Dynamic memory allocator.
 *
 * Compile options:
 *
 *	ALLOC_TRACE	enable tracing of allocations/deallocations
 *
 *	ALLOC_FIRST_FIT	use a first-fit allocation algorithm, rather than
 *			the default best-fit algorithm.
 *
 *	HEAP_LIMIT	heap limit address (defaults to "no limit").
 *
 *	HEAP_START	start address of heap (defaults to '&end').
 *
 *	NEEDS_HEAP_H	needs to #include "heap.h" to declare things
 *			needed by HEAP_LIMIT and/or HEAP_START.
 *
 *	NEEDS_HEAP_INIT	needs to invoke heap_init() to initialize
 *			heap boundaries.
 *
 *	DEBUG		enable debugging sanity checks.
 */

#include <sys/param.h>

/*
 * Each block actually has ALIGN(unsigned) + ALIGN(size) bytes allocated
 * to it, as follows:
 *
 * 0 ... (sizeof(unsigned) - 1)
 *	allocated or unallocated: holds size of user-data part of block.
 *
 * sizeof(unsigned) ... (ALIGN(sizeof(unsigned)) - 1)
 *	allocated: unused
 *	unallocated: depends on packing of struct fl
 *
 * ALIGN(sizeof(unsigned)) ... (ALIGN(sizeof(unsigned)) + ALIGN(data size) - 1)
 *	allocated: user data
 *	unallocated: depends on packing of struct fl
 *
 * 'next' is only used when the block is unallocated (i.e. on the free list).
 * However, note that ALIGN(sizeof(unsigned)) + ALIGN(data size) must
 * be at least 'sizeof(struct fl)', so that blocks can be used as structures
 * when on the free list.
 */

#include "stand.h"

struct fl {
	unsigned	size;
	struct fl	*next;
} *freelist = NULL;

#ifdef NEEDS_HEAP_H
#include "heap.h"
#endif
#ifndef NEEDS_HEAP_INIT
#ifdef HEAP_START
static char *top = (char *)HEAP_START;
#else
extern char end[];
static char *top = end;
#endif
#endif

void *
alloc(unsigned int size)
{
	struct fl **f = &freelist, **bestf = NULL;
#ifndef ALLOC_FIRST_FIT
	unsigned bestsize = 0xffffffff;	/* greater than any real size */
#endif
	char *help;
	int failed;

#ifdef NEEDS_HEAP_INIT
	heap_init();
#endif

#ifdef ALLOC_TRACE
	printf("alloc(%u)", size);
#endif

#ifdef ALLOC_FIRST_FIT
	while (*f != NULL && (*f)->size < size)
		f = &((*f)->next);
	bestf = f;
	failed = (*bestf == NULL);
#else
	/* scan freelist */
	while (*f) {
		if ((*f)->size >= size) {
			if ((*f)->size == size) /* exact match */
				goto found;

			if ((*f)->size < bestsize) {
				/* keep best fit */
				bestf = f;
				bestsize = (*f)->size;
			}
		}
		f = &((*f)->next);
	}

	/* no match in freelist if bestsize unchanged */
	failed = (bestsize == 0xffffffff);
#endif

	if (failed) { /* nothing found */
		/*
		 * allocate from heap, keep chunk len in
		 * first word
		 */
		help = top;

		/* make _sure_ the region can hold a struct fl. */
		if (size < ALIGN(sizeof (struct fl *)))
			size = ALIGN(sizeof (struct fl *));
		top += ALIGN(sizeof(unsigned)) + ALIGN(size);
#ifdef HEAP_LIMIT
		if (top > (char *)HEAP_LIMIT)
			panic("heap full (0x%lx+%u)", help, size);
#endif
		*(unsigned *)help = ALIGN(size);
#ifdef ALLOC_TRACE
		printf("=%p\n", help + ALIGN(sizeof(unsigned)));
#endif
		return(help + ALIGN(sizeof(unsigned)));
	}

	/* we take the best fit */
	f = bestf;

#ifndef ALLOC_FIRST_FIT
found:
#endif
	/* remove from freelist */
	help = (char *)*f;
	*f = (*f)->next;
#ifdef ALLOC_TRACE
	printf("=%p (origsize %u)\n", help + ALIGN(sizeof(unsigned)),
	    *(unsigned *)help);
#endif
	return(help + ALIGN(sizeof(unsigned)));
}

void
free(void *ptr, unsigned int size)
{
	struct fl *f;

	if (ptr == NULL)
		return;

	f = (struct fl *)((char *)ptr - ALIGN(sizeof(unsigned)));

#ifdef ALLOC_TRACE
	printf("free(%p, %u) (origsize %u)\n", ptr, size, f->size);
#endif
#ifdef DEBUG
	if (size > f->size)
		printf("free %u bytes @@%p, should be <=%u\n",
		    size, ptr, f->size);
#ifdef HEAP_START
	if (ptr < (void *)HEAP_START)
#else
	if (ptr < (void *)end)
#endif
		printf("free: %lx before start of heap.\n", (u_long)ptr);

#ifdef HEAP_LIMIT
	if (ptr > (void *)HEAP_LIMIT)
		printf("free: %lx beyond end of heap.\n", (u_long)ptr);
#endif
#endif /* DEBUG */
	/* put into freelist */
	f->next = freelist;
	freelist = f;
}
@


1.11
log
@unify free(NULL,size) behaviour by allowing passing NULL

ok millert@@ jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.10 2009/05/14 18:54:03 miod Exp $	*/
d118 1
a118 1
} *freelist = (struct fl *)0;
d151 1
a151 1
	while (*f != (struct fl *)0 && (*f)->size < size)
d154 1
a154 1
	failed = (*bestf == (struct fl *)0);
@


1.10
log
@Add two hooks allowing MD code get a MD header to be included if needed,
and to override the way HEAP_START and HEAP_LIMIT are defined.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.9 2003/08/11 06:23:09 deraadt Exp $	*/
d216 6
a221 2
	struct fl *f = (struct fl *)((char *)ptr -
	    ALIGN(sizeof(unsigned)));
@


1.9
log
@ansification and knf and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.8 2003/06/02 23:28:09 millert Exp $	*/
d81 6
d120 4
d130 1
d141 4
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.7 2003/06/01 17:00:32 deraadt Exp $	*/
d122 1
a122 2
alloc(size)
	unsigned size;
d124 1
a124 1
	register struct fl **f = &freelist, **bestf = NULL;
d149 5
a153 5
	                        bestf = f;
	                        bestsize = (*f)->size;
	                }
	        }
	        f = &((*f)->next);
d161 1
a161 1
	        /*
d165 1
a165 1
	        help = top;
d173 1
a173 1
		        panic("heap full (0x%lx+%u)", help, size);
d188 2
a189 2
        /* remove from freelist */
        help = (char *)*f;
d199 1
a199 3
free(ptr, size)
	void *ptr;
	unsigned size; /* only for consistence check */
d201 3
a203 2
	register struct fl *f =
	    (struct fl *)((char *)ptr - ALIGN(sizeof(unsigned)));
d208 2
a209 2
        if (size > f->size)
	        printf("free %u bytes @@%p, should be <=%u\n",
@


1.7
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.6 2002/03/14 03:16:09 millert Exp $	*/
d22 1
a22 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.5 1997/08/01 21:57:09 pefo Exp $	*/
d43 1
a43 1
 *  
d49 1
a49 1
 * 
d55 1
a55 1
 * 
d59 1
a59 1
 * 
d61 1
a61 1
 * 
d66 1
a66 1
 * 
@


1.5
log
@compile clean with ALLOC_FIRST_FIT defined
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.4 1997/02/06 14:22:33 mickey Exp $	*/
d119 1
a119 1
static char *top = (char*)HEAP_START;
d177 1
a177 1
		if (top > (char*)HEAP_LIMIT)
d194 1
a194 1
        help = (char*)*f;
d209 1
a209 1
	    (struct fl *)((char*)ptr - ALIGN(sizeof(unsigned)));
@


1.5.22.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.5 1997/08/01 21:57:09 pefo Exp $	*/
d119 1
a119 1
static char *top = (char *)HEAP_START;
d177 1
a177 1
		if (top > (char *)HEAP_LIMIT)
d194 1
a194 1
        help = (char *)*f;
d209 1
a209 1
	    (struct fl *)((char *)ptr - ALIGN(sizeof(unsigned)));
@


1.5.12.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d119 1
a119 1
static char *top = (char *)HEAP_START;
d177 1
a177 1
		if (top > (char *)HEAP_LIMIT)
d194 1
a194 1
        help = (char *)*f;
d209 1
a209 1
	    (struct fl *)((char *)ptr - ALIGN(sizeof(unsigned)));
@


1.5.12.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: alloc.c,v 1.5.12.1 2002/03/28 15:02:00 niklas Exp $	*/
d22 5
a26 1
 * 3. Neither the name of the University nor the names of its contributors
d43 1
a43 1
 *
d49 1
a49 1
 *
d55 1
a55 1
 *
d59 1
a59 1
 *
d61 1
a61 1
 *
d66 1
a66 1
 *
@


1.5.12.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d122 2
a123 1
alloc(unsigned int size)
d125 1
a125 1
	struct fl **f = &freelist, **bestf = NULL;
d150 5
a154 5
				bestf = f;
				bestsize = (*f)->size;
			}
		}
		f = &((*f)->next);
d162 1
a162 1
		/*
d166 1
a166 1
		help = top;
d174 1
a174 1
			panic("heap full (0x%lx+%u)", help, size);
d189 2
a190 2
	/* remove from freelist */
	help = (char *)*f;
d200 3
a202 1
free(void *ptr, unsigned int size)
d204 2
a205 3
	struct fl *f = (struct fl *)((char *)ptr -
	    ALIGN(sizeof(unsigned)));

d210 2
a211 2
	if (size > f->size)
		printf("free %u bytes @@%p, should be <=%u\n",
@


1.4
log
@remove net/zlib.c (use -lz now)
export NO_NET and SA_ZLIB to the Makefile (from Makefile.inc)
add -p printf flag (tiny code) just for gcc -Wall
import latest alloc.c from netbsd
text    data    bss     dec     hex
400     8       0       408     198
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d130 1
d132 1
d190 1
d192 1
@


1.3
log
@Merge to NetBSD 961207
@
text
@d1 2
a2 2
/*	$OpenBSD: alloc.c,v 1.2 1996/09/23 14:18:46 mickey Exp $	*/
/*	$NetBSD: alloc.c,v 1.4 1996/09/26 23:15:00 cgd Exp $	*/
d4 4
a7 1
/*-
d71 17
d91 18
a108 1
 *	Dynamic memory allocator
d110 3
d114 1
a115 1
	unsigned	size;
d118 3
d123 1
d129 29
a157 1
	register struct fl *f = freelist, **prev;
d159 24
a182 4
	prev = &freelist;
	while (f && f->size < size) {
		prev = &f->next;
		f = f->next;
d184 13
a196 6
	if (f == (struct fl *)0) {
		f = (struct fl *)ALIGN(top);
		top = (char *)f + ALIGN(size);
	} else
		*prev = f->next;
	return ((void *)f);
d202 1
a202 1
	unsigned size;
d204 22
a225 3
	register struct fl *f = (struct fl *)ptr;

	f->size = ALIGN(size);
@


1.2
log
@add OpenBSD tag.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: alloc.c,v 1.3 1994/10/26 05:44:34 cgd Exp $	*/
d93 2
a94 2
		f = (struct fl *)top;
		top += ALIGN(size);
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
