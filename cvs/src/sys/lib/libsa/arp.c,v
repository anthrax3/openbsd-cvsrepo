head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.12
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.11.0.46
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.42
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.40
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.38
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.36
	OPENBSD_5_0:1.11.0.34
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.32
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.30
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.26
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.28
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.24
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.22
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.20
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.18
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.16
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.14
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.12
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.10
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.8
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.6
	OPENBSD_3_6_BASE:1.11
	SMP_SYNC_A:1.11
	SMP_SYNC_B:1.11
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.9
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	UBC_SYNC_B:1.9
	UBC:1.7.0.16
	UBC_BASE:1.7
	OPENBSD_3_0:1.7.0.14
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_9:1.7.0.12
	OPENBSD_2_8:1.7.0.10
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.8
	OPENBSD_2_7_BASE:1.7
	SMP:1.7.0.6
	SMP_BASE:1.7
	kame_19991208:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.4
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.6.0.2
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2014.07.13.15.31.20;	author mpi;	state Exp;
branches;
next	1.11;
commitid	7SdCoErqwI9qHMpK;

1.11
date	2003.08.11.06.23.09;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.01.17.00.32;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.14.03.16.09;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.14.01.27.07;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	99.01.11.05.12.25;	author millert;	state Exp;
branches
	1.7.6.1
	1.7.16.1;
next	1.6;

1.6
date	98.02.23.20.32.18;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.12.08.15.15.45;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.10.16.14.18.34;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.09.23.14.18.46;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	95.12.15.08.08.16;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.52.56;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.52.56;	author deraadt;	state Exp;
branches;
next	;

1.7.6.1
date	2002.03.28.15.02.00;	author niklas;	state Exp;
branches;
next	1.7.6.2;

1.7.6.2
date	2003.06.07.11.03.42;	author ho;	state Exp;
branches;
next	1.7.6.3;

1.7.6.3
date	2004.02.19.10.57.18;	author niklas;	state Exp;
branches;
next	;

1.7.16.1
date	2002.06.11.03.30.09;	author art;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Stop using old n_long and n_short types.
@
text
@/*	$OpenBSD: arp.c,v 1.11 2003/08/11 06:23:09 deraadt Exp $	*/
/*	$NetBSD: arp.c,v 1.15 1996/10/13 02:28:58 christos Exp $	*/

/*
 * Copyright (c) 1992 Regents of the University of California.
 * All rights reserved.
 *
 * This software was developed by the Computer Systems Engineering group
 * at Lawrence Berkeley Laboratory under DARPA contract BG 91-66 and
 * contributed to Berkeley.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Lawrence Berkeley Laboratory and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * @@(#) Header: arp.c,v 1.5 93/07/15 05:52:26 leres Exp  (LBL)
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netinet/in.h>

#include <netinet/if_ether.h>

#include "stand.h"
#include "net.h"

/* Cache stuff */
#define ARP_NUM 8			/* need at most 3 arp entries */

struct arp_list {
	struct in_addr	addr;
	u_char		ea[6];
} arp_list[ARP_NUM] = {
	/* XXX - net order `INADDR_BROADCAST' must be a constant */
	{ {0xffffffff}, BA }
};
int arp_num = 1;

/* Local forwards */
static	ssize_t arpsend(struct iodesc *, void *, size_t);
static	ssize_t arprecv(struct iodesc *, void *, size_t, time_t);

/* Broadcast an ARP packet, asking who has addr on interface d */
u_char *
arpwhohas(struct iodesc *d, struct in_addr addr)
{
	int i;
	struct ether_arp *ah;
	struct arp_list *al;
	struct {
		struct ether_header eh;
		struct {
			struct ether_arp arp;
			u_char pad[18];		/* 60 - sizeof(...) */
		} data;
	} wbuf;
	struct {
		struct ether_header eh;
		struct {
			struct ether_arp arp;
			u_char pad[24];		/* extra space */
		} data;
	} rbuf;

	/* Try for cached answer first */
	for (i = 0, al = arp_list; i < arp_num; ++i, ++al)
		if (addr.s_addr == al->addr.s_addr)
			return (al->ea);

	/* Don't overflow cache */
	if (arp_num > ARP_NUM - 1) {
		arp_num = 1;	/* recycle */
		printf("arpwhohas: overflowed arp_list!\n");
	}

#ifdef ARP_DEBUG
	if (debug)
	    printf("arpwhohas: send request for %s\n", inet_ntoa(addr));
#endif

	bzero((char *)&wbuf.data, sizeof(wbuf.data));
	ah = &wbuf.data.arp;
	ah->arp_hrd = htons(ARPHRD_ETHER);
	ah->arp_pro = htons(ETHERTYPE_IP);
	ah->arp_hln = sizeof(ah->arp_sha); /* hardware address length */
	ah->arp_pln = sizeof(ah->arp_spa); /* protocol address length */
	ah->arp_op = htons(ARPOP_REQUEST);
	MACPY(d->myea, ah->arp_sha);
	bcopy(&d->myip, ah->arp_spa, sizeof(ah->arp_spa));
	/* Leave zeros in arp_tha */
	bcopy(&addr, ah->arp_tpa, sizeof(ah->arp_tpa));

	/* Store ip address in cache (incomplete entry). */
	al->addr = addr;

	i = sendrecv(d,
	    arpsend, &wbuf.data, sizeof(wbuf.data),
	    arprecv, &rbuf.data, sizeof(rbuf.data));
	if (i == -1) {
		panic("arp: no response for %s", inet_ntoa(addr));
	}

	/* Store ethernet address in cache */
	ah = &rbuf.data.arp;
#ifdef ARP_DEBUG
	if (debug) {
		printf("arp: response from %s\n",
		    ether_sprintf(rbuf.eh.ether_shost));
		printf("arp: cacheing %s --> %s\n",
		    inet_ntoa(addr), ether_sprintf(ah->arp_sha));
	}
#endif
	MACPY(ah->arp_sha, al->ea);
	++arp_num;

	return (al->ea);
}

static ssize_t
arpsend(struct iodesc *d, void *pkt, size_t len)
{

#ifdef ARP_DEBUG
	if (debug)
		printf("arpsend: called\n");
#endif

	return (sendether(d, pkt, len, bcea, ETHERTYPE_ARP));
}

/*
 * Returns 0 if this is the packet we're waiting for
 * else -1 (and errno == 0)
 */
static ssize_t
arprecv(struct iodesc *d, void *pkt, size_t len, time_t tleft)
{
	ssize_t n;
	struct ether_arp *ah;
	u_int16_t etype;	/* host order */

#ifdef ARP_DEBUG
	if (debug)
		printf("arprecv: ");
#endif

	n = readether(d, pkt, len, tleft, &etype);
	errno = 0;	/* XXX */
	if (n < 0 || (size_t)n < sizeof(struct ether_arp)) {
#ifdef ARP_DEBUG
		if (debug)
			printf("bad len=%d\n", n);
#endif
		return (-1);
	}

	if (etype != ETHERTYPE_ARP) {
#ifdef ARP_DEBUG
		if (debug)
			printf("not arp type=%d\n", etype);
#endif
		return (-1);
	}

	/* Ethernet address now checked in readether() */

	ah = (struct ether_arp *)pkt;
	if (ah->arp_hrd != htons(ARPHRD_ETHER) ||
	    ah->arp_pro != htons(ETHERTYPE_IP) ||
	    ah->arp_hln != sizeof(ah->arp_sha) ||
	    ah->arp_pln != sizeof(ah->arp_spa)) {
#ifdef ARP_DEBUG
		if (debug)
			printf("bad hrd/pro/hln/pln\n");
#endif
		return (-1);
	}

	if (ah->arp_op == htons(ARPOP_REQUEST)) {
#ifdef ARP_DEBUG
		if (debug)
			printf("is request\n");
#endif
		arp_reply(d, ah);
		return (-1);
	}

	if (ah->arp_op != htons(ARPOP_REPLY)) {
#ifdef ARP_DEBUG
		if (debug)
			printf("not ARP reply\n");
#endif
		return (-1);
	}

	/* Is the reply from the source we want? */
	if (bcmp(&arp_list[arp_num].addr, ah->arp_spa,
	    sizeof(ah->arp_spa))) {
#ifdef ARP_DEBUG
		if (debug)
			printf("unwanted address\n");
#endif
		return (-1);
	}
	/* We don't care who the reply was sent to. */

	/* We have our answer. */
#ifdef ARP_DEBUG
	if (debug)
		printf("got it\n");
#endif
	return (n);
}

/*
 * Convert an ARP request into a reply and send it.
 * Notes:  Re-uses buffer.  Pad to length = 46.
 */
void
arp_reply(struct iodesc *d, void *pkt)
{
	struct ether_arp *arp = pkt;

	if (arp->arp_hrd != htons(ARPHRD_ETHER) ||
	    arp->arp_pro != htons(ETHERTYPE_IP) ||
	    arp->arp_hln != sizeof(arp->arp_sha) ||
	    arp->arp_pln != sizeof(arp->arp_spa)) {
#ifdef ARP_DEBUG
		if (debug)
			printf("arp_reply: bad hrd/pro/hln/pln\n");
#endif
		return;
	}

	if (arp->arp_op != htons(ARPOP_REQUEST)) {
#ifdef ARP_DEBUG
		if (debug)
			printf("arp_reply: not request!\n");
#endif
		return;
	}

	/* If we are not the target, ignore the request. */
	if (bcmp(arp->arp_tpa, &d->myip, sizeof(arp->arp_tpa)))
		return;

#ifdef ARP_DEBUG
	if (debug) {
		printf("arp_reply: to %s\n", ether_sprintf(arp->arp_sha));
	}
#endif

	arp->arp_op = htons(ARPOP_REPLY);
	/* source becomes target */
	bcopy(arp->arp_sha, arp->arp_tha, sizeof(arp->arp_tha));
	bcopy(arp->arp_spa, arp->arp_tpa, sizeof(arp->arp_tpa));
	/* here becomes source */
	bcopy(d->myea,  arp->arp_sha, sizeof(arp->arp_sha));
	bcopy(&d->myip, arp->arp_spa, sizeof(arp->arp_spa));

	/*
	 * No need to get fancy here.  If the send fails, the
	 * requestor will just ask again.
	 */
	(void) sendether(d, pkt, sizeof(*arp) + 18,
	    arp->arp_tha, ETHERTYPE_ARP);
}
@


1.11
log
@ansification and knf and protos
@
text
@d1 1
a1 1
/*	$OpenBSD: arp.c,v 1.10 2003/06/01 17:00:32 deraadt Exp $	*/
a48 1
#include <netinet/in_systm.h>
@


1.10
log
@strcpy/strcat/sprintf removal in all bootblocks.  various testing by
various people.  outside of some messy things in src/gnu, only one
thing in the main tree now violates this rule: bind
@
text
@d1 1
a1 1
/*	$OpenBSD: arp.c,v 1.9 2002/03/14 03:16:09 millert Exp $	*/
d72 1
a72 3
arpwhohas(d, addr)
	register struct iodesc *d;
	struct in_addr addr;
d74 3
a76 3
	register int i;
	register struct ether_arp *ah;
	register struct arp_list *al;
d147 1
a147 4
arpsend(d, pkt, len)
	register struct iodesc *d;
	register void *pkt;
	register size_t len;
d163 1
a163 5
arprecv(d, pkt, len, tleft)
	register struct iodesc *d;
	register void *pkt;
	register size_t len;
	time_t tleft;
d165 2
a166 2
	register ssize_t n;
	register struct ether_arp *ah;
d198 1
a198 2
	    ah->arp_pln != sizeof(ah->arp_spa) )
	{
d224 2
a225 3
	if (bcmp(&arp_list[arp_num].addr,
			 ah->arp_spa, sizeof(ah->arp_spa)))
	{
d247 1
a247 3
arp_reply(d, pkt)
	register struct iodesc *d;
	register void *pkt;		/* the request */
d254 1
a254 2
	    arp->arp_pln != sizeof(arp->arp_spa) )
	{
d293 1
a293 1
	                 arp->arp_tha, ETHERTYPE_ARP);
@


1.9
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: arp.c,v 1.8 2002/03/14 01:27:07 millert Exp $	*/
d83 1
a83 1
			u_char pad[18]; 	/* 60 - sizeof(...) */
d90 1
a90 1
			u_char pad[24]; 	/* extra space */
d106 2
a107 2
 	if (debug)
 	    printf("arpwhohas: send request for %s\n", inet_ntoa(addr));
d135 1
a135 1
 	if (debug) {
d156 1
a156 1
 	if (debug)
d179 1
a179 1
 	if (debug)
d247 1
a247 1
 	if (debug)
@


1.8
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: arp.c,v 1.7 1999/01/11 05:12:25 millert Exp $	*/
d110 1
a110 1
	bzero((char*)&wbuf.data, sizeof(wbuf.data));
@


1.7
log
@panic prints a newline for you, don't do it in the panic string
@
text
@d1 1
a1 1
/*	$OpenBSD: arp.c,v 1.6 1998/02/23 20:32:18 niklas Exp $	*/
d67 2
a68 2
static	ssize_t arpsend __P((struct iodesc *, void *, size_t));
static	ssize_t arprecv __P((struct iodesc *, void *, size_t, time_t));
@


1.7.16.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: arp.c,v 1.7 1999/01/11 05:12:25 millert Exp $	*/
d67 2
a68 2
static	ssize_t arpsend(struct iodesc *, void *, size_t);
static	ssize_t arprecv(struct iodesc *, void *, size_t, time_t);
d110 1
a110 1
	bzero((char *)&wbuf.data, sizeof(wbuf.data));
@


1.7.6.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d67 2
a68 2
static	ssize_t arpsend(struct iodesc *, void *, size_t);
static	ssize_t arprecv(struct iodesc *, void *, size_t, time_t);
d110 1
a110 1
	bzero((char *)&wbuf.data, sizeof(wbuf.data));
@


1.7.6.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: arp.c,v 1.7.6.1 2002/03/28 15:02:00 niklas Exp $	*/
d83 1
a83 1
			u_char pad[18];		/* 60 - sizeof(...) */
d90 1
a90 1
			u_char pad[24];		/* extra space */
d106 2
a107 2
	if (debug)
	    printf("arpwhohas: send request for %s\n", inet_ntoa(addr));
d135 1
a135 1
	if (debug) {
d156 1
a156 1
	if (debug)
d179 1
a179 1
	if (debug)
d247 1
a247 1
	if (debug)
@


1.7.6.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d72 3
a74 1
arpwhohas(struct iodesc *d, struct in_addr addr)
d76 3
a78 3
	int i;
	struct ether_arp *ah;
	struct arp_list *al;
d149 4
a152 1
arpsend(struct iodesc *d, void *pkt, size_t len)
d168 5
a172 1
arprecv(struct iodesc *d, void *pkt, size_t len, time_t tleft)
d174 2
a175 2
	ssize_t n;
	struct ether_arp *ah;
d207 2
a208 1
	    ah->arp_pln != sizeof(ah->arp_spa)) {
d234 3
a236 2
	if (bcmp(&arp_list[arp_num].addr, ah->arp_spa,
	    sizeof(ah->arp_spa))) {
d258 3
a260 1
arp_reply(struct iodesc *d, void *pkt)
d267 2
a268 1
	    arp->arp_pln != sizeof(arp->arp_spa)) {
d307 1
a307 1
	    arp->arp_tha, ETHERTYPE_ARP);
@


1.6
log
@strong signedness typing a version of egcs I tried months ago wanted
me to fix.  I am not sure these are necessary for gas 2.8 but I figure I
would commit them anyhow.
@
text
@d1 1
a1 1
/*	$OpenBSD: arp.c,v 1.5 1996/12/08 15:15:45 niklas Exp $	*/
d129 1
a129 2
		panic("arp: no response for %s\n",
			  inet_ntoa(addr));
@


1.5
log
@Merge to NetBSD 961207
@
text
@d1 1
a1 1
/*	$OpenBSD: arp.c,v 1.4 1996/10/16 14:18:34 mickey Exp $	*/
d186 1
a186 1
	if (n == -1 || n < sizeof(struct ether_arp)) {
@


1.4
log
@remove unneeded include <string.h>
@
text
@d1 2
a2 2
/*	$OpenBSD: arp.c,v 1.3 1996/09/23 14:18:46 mickey Exp $	*/
/*	$NetBSD: arp.c,v 1.13 1995/12/08 04:12:53 gwr Exp $	*/
d138 1
a138 1
			   ether_sprintf(rbuf.eh.ether_shost));
d140 1
a140 2
			   inet_ntoa(addr),
			   ether_sprintf(ah->arp_sha));
d291 1
a291 2
		printf("arp_reply: to %s\n",
		       ether_sprintf(arp->arp_sha));
@


1.3
log
@add OpenBSD tag.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a49 2

#include <string.h>
@


1.2
log
@from gwr:
Check return value from sendrecv so that ARP timeout does not cause
garbage to be entered into the ARP table.  Also fix ARP_DEBUG code.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: arp.c,v 1.12 1995/09/27 23:14:57 pk Exp $	*/
d58 1
a58 1
static struct arp_list {
d65 1
a65 1
static	int arp_num = 1;
d81 1
a81 1
		u_char header[ETHER_SIZE];
d84 1
a84 1
			u_char pad[18]; 	/* 60 - sizeof(arp) */
d88 1
a88 1
		u_char header[ETHER_SIZE];
a94 4
#ifdef ARP_DEBUG
 	if (debug)
 	    printf("arpwhohas: called for %s\n", inet_ntoa(addr));
#endif
d101 4
a104 2
	if (arp_num > ARP_NUM - 1)
		panic("arpwhohas: overflowed arp_list!");
d108 1
a108 1
		printf("arpwhohas: not cached\n");
d120 1
d123 1
a123 1
	/* Store ip address in cache */
d126 1
a126 1
	(void)sendrecv(d,
d129 4
d137 3
a139 1
 	if (debug)
d141 1
a141 1
			   intoa(ah->arp_spa),
d143 1
d214 1
a214 1
			printf("bad hrd/pro/hln/pln\n")
d222 1
a222 1
			printf("is request\n")
d274 1
a274 1
			printf("arp_reply: bad hrd/pro/hln/pln\n")
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
