head	1.6;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.4
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.07.15.12.10.45;	author henning;	state dead;
branches;
next	1.5;

1.5
date	2004.06.20.17.19.27;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.23.28.17;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.25.22.08.25;	author itojun;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.10.35.38;	author mickey;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.53.15;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.15;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2001.07.04.10.55.36;	author niklas;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.06.07.11.06.10;	author ho;	state Exp;
branches;
next	;


desc
@@


1.6
log
@bye bye netiso, you won't be missed
ok millert deraadt
@
text
@/*	$OpenBSD: iso_proto.c,v 1.5 2004/06/20 17:19:27 itojun Exp $	*/
/*	$NetBSD: iso_proto.c,v 1.6 1996/02/13 22:10:21 christos Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)iso_proto.c	8.1 (Berkeley) 6/10/93
 */

/***********************************************************
		Copyright IBM Corporation 1987

                      All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of IBM not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
IBM BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

/*
 * ARGO Project, Computer Sciences Dept., University of Wisconsin - Madison
 */
/*
 * iso_proto.c : protocol switch tables in the ISO domain
 *
 * ISO protocol family includes TP, CLTP, CLNP, 8208
 * TP and CLNP are implemented here.
 */

#ifdef	ISO
#include <sys/param.h>
#include <sys/socket.h>
#include <sys/protosw.h>
#include <sys/domain.h>
#include <sys/mbuf.h>

#include <net/radix.h>

#include <netiso/iso.h>

#include <netiso/clnp.h>
#include <netiso/tp_param.h>
#include <netiso/tp_var.h>
#include <netiso/esis.h>
#include <netiso/idrp_var.h>
#include <netiso/iso_pcb.h>
#include <netiso/cltp_var.h>

struct protosw  isosw[] = {
	/*
	 *  We need a datagram entry through which net mgmt programs can get
	 *	to the iso_control procedure (iso ioctls). Thus, a minimal
	 *	SOCK_DGRAM interface is provided here.
	 *  THIS ONE MUST BE FIRST: Kludge city : socket() says if(!proto) call
	 *  pffindtype, which gets the first entry that matches the type.
	 *  sigh.
	 */
	{SOCK_DGRAM, &isodomain, ISOPROTO_CLTP, PR_ATOMIC | PR_ADDR,
		0, cltp_output, 0, 0,
		cltp_usrreq,
		cltp_init, 0, 0, 0
	},

	/*
	 *	A datagram interface for clnp cannot co-exist with TP/CLNP
	 *  because CLNP has no way to discriminate incoming TP packets from
	 *  packets coming in for any other higher layer protocol.
	 *  Old way: set it up so that pffindproto(... dgm, clnp) fails.
	 *  New way: let pffindproto work (for x.25, thank you) but create
	 *  	a clnp_usrreq() that returns error on PRU_ATTACH.
	 */
	{SOCK_DGRAM, &isodomain, ISOPROTO_CLNP, 0,
		0, clnp_output, 0, 0,
		clnp_usrreq,
		clnp_init, 0, clnp_slowtimo, clnp_drain,
	},

	/* raw clnp */
	{SOCK_RAW, &isodomain, ISOPROTO_RAW, PR_ATOMIC | PR_ADDR,
		rclnp_input, rclnp_output, 0, rclnp_ctloutput,
		clnp_usrreq,
		0, 0, 0, 0
	},

	/* ES-IS protocol */
	{SOCK_DGRAM, &isodomain, ISOPROTO_ESIS, PR_ATOMIC | PR_ADDR,
		esis_input, 0, esis_ctlinput, 0,
		esis_usrreq,
		esis_init, 0, 0, 0
	},

	/* ISOPROTO_INTRAISIS */
	{SOCK_DGRAM, &isodomain, ISOPROTO_INTRAISIS, PR_ATOMIC | PR_ADDR,
		isis_input, 0, 0, 0,
		esis_usrreq,
		0, 0, 0, 0
	},

	/* ISOPROTO_IDRP */
	{SOCK_DGRAM, &isodomain, ISOPROTO_IDRP, PR_ATOMIC | PR_ADDR,
		idrp_input, 0, 0, 0,
		idrp_usrreq,
		idrp_init, 0, 0, 0
	},

	/* ISOPROTO_TP */
	{SOCK_SEQPACKET, &isodomain, ISOPROTO_TP, PR_CONNREQUIRED | PR_WANTRCVD | PR_ABRTACPTDIS,
		tpclnp_input, 0, tpclnp_ctlinput, tp_ctloutput,
		tp_usrreq,
		tp_init, tp_fasttimo, tp_slowtimo, tp_drain,
	},

#ifdef TPCONS
	/* ISOPROTO_TP */
	{SOCK_SEQPACKET, &isodomain, ISOPROTO_TP0, PR_CONNREQUIRED | PR_WANTRCVD | PR_ABRTACPTDIS,
		tpcons_input, 0, 0, tp_ctloutput,
		tp_usrreq,
		cons_init, 0, 0, 0,
	},
#endif
};


struct domain   isodomain = {
	AF_ISO,			/* family */
	"iso-domain",		/* name */
	0,			/* initialize routine */
	0,			/* externalize access rights */
	0,			/* dispose of internalized rights */
	isosw,			/* protosw */
	&isosw[sizeof(isosw) / sizeof(isosw[0])],	/* NPROTOSW */
	0,			/* next */
	rn_inithead,		/* rtattach */
	48,			/* rtoffset */
	sizeof(struct sockaddr_iso)	/* maxkeylen */
};
#endif				/* ISO */
@


1.5
log
@goodbye TUBA.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_proto.c,v 1.4 2003/06/02 23:28:17 millert Exp $	*/
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_proto.c,v 1.3 2001/05/25 22:08:25 itojun Exp $	*/
a82 3
#ifdef TUBA
#include <netiso/tuba_table.h>
#endif
a149 8

#ifdef TUBA
	{SOCK_STREAM, &isodomain, ISOPROTO_TCP, PR_CONNREQUIRED | PR_WANTRCVD | PR_ABRTACPTDIS,
		tuba_tcpinput, 0, 0, tuba_ctloutput,
		tuba_usrreq,
		tuba_init, tuba_fasttimo, tuba_fasttimo, 0
	},
#endif
@


1.3
log
@recover old acecept(2) behavior (no ECONNABORTED) for unix domain socket.
it is to be friendly with postfix daemon-to-daemon communication
(not 100% sure if which behavior is correct, specwise).  patch similar to netbsd.
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_proto.c,v 1.2 1996/03/04 10:35:38 mickey Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@Initial commit of NetBSD 960217 netiso.
all the rest is the fixes to the import by Niklas.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d152 1
a152 1
	{SOCK_SEQPACKET, &isodomain, ISOPROTO_TP, PR_CONNREQUIRED | PR_WANTRCVD,
d159 1
a159 1
	{SOCK_STREAM, &isodomain, ISOPROTO_TCP, PR_CONNREQUIRED | PR_WANTRCVD,
d168 1
a168 1
	{SOCK_SEQPACKET, &isodomain, ISOPROTO_TP0, PR_CONNREQUIRED | PR_WANTRCVD,
@


1.2.16.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_proto.c,v 1.2 1996/03/04 10:35:38 mickey Exp $	*/
d152 1
a152 1
	{SOCK_SEQPACKET, &isodomain, ISOPROTO_TP, PR_CONNREQUIRED | PR_WANTRCVD | PR_ABRTACPTDIS,
d159 1
a159 1
	{SOCK_STREAM, &isodomain, ISOPROTO_TCP, PR_CONNREQUIRED | PR_WANTRCVD | PR_ABRTACPTDIS,
d168 1
a168 1
	{SOCK_SEQPACKET, &isodomain, ISOPROTO_TP0, PR_CONNREQUIRED | PR_WANTRCVD | PR_ABRTACPTDIS,
@


1.2.16.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_proto.c,v 1.2.16.1 2001/07/04 10:55:36 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: iso_proto.c,v 1.5 1994/06/29 06:39:49 cgd Exp $	*/
d44 2
a45 2
Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
d47 1
a47 1
both that copyright notice and this permission notice appear in 
d50 1
a50 1
software without specific, written prior permission.  
d83 4
a86 12
int	clnp_output(), rclnp_output(), rclnp_ctloutput();
int	raw_usrreq(), clnp_usrreq();
void	clnp_init(), clnp_slowtimo(), clnp_drain(), rclnp_input();

int	tp_ctloutput(), tp_usrreq(), tpcons_input();
void	tp_init(), tp_fasttimo(), tp_slowtimo(), tp_drain(), cons_init();
void	tpclnp_input(), tpclnp_ctlinput();

int	esis_usrreq(), idrp_usrreq(), cltp_usrreq(), cltp_output();
void	esis_init(), idrp_init(), cltp_init(), isis_input(), esis_input();
void	idrp_input(), cltp_input(), esis_ctlinput(), cltp_ctlinput();

d88 1
a88 2
int	tuba_usrreq(), tuba_ctloutput(), tuba_tcpinput(); 
void	tuba_init(), tuba_slowtimo(), tuba_fasttimo();
d90 67
a156 64

struct protosw isosw[] = {
/*
 *  We need a datagram entry through which net mgmt programs can get
 *	to the iso_control procedure (iso ioctls). Thus, a minimal
 *	SOCK_DGRAM interface is provided here.
 *  THIS ONE MUST BE FIRST: Kludge city : socket() says if(!proto) call
 *  pffindtype, which gets the first entry that matches the type.
 *  sigh.
 */
{ SOCK_DGRAM,	&isodomain,		ISOPROTO_CLTP,		PR_ATOMIC|PR_ADDR,
	0,			cltp_output,	0,					0,
	cltp_usrreq,
	cltp_init,	0, 				0,					0
},

/*
 *	A datagram interface for clnp cannot co-exist with TP/CLNP
 *  because CLNP has no way to discriminate incoming TP packets from
 *  packets coming in for any other higher layer protocol.
 *  Old way: set it up so that pffindproto(... dgm, clnp) fails.
 *  New way: let pffindproto work (for x.25, thank you) but create
 *  	a clnp_usrreq() that returns error on PRU_ATTACH.
 */
{SOCK_DGRAM,	&isodomain,		ISOPROTO_CLNP,		0,
 0,				clnp_output,	0,					0,
 clnp_usrreq,
 clnp_init,		0,				clnp_slowtimo, 		clnp_drain,
},

/* raw clnp */
{ SOCK_RAW,		&isodomain,		ISOPROTO_RAW,		PR_ATOMIC|PR_ADDR,
  rclnp_input,	rclnp_output,	0,					rclnp_ctloutput,
  clnp_usrreq,
  0,			0,				0,					0
},

/* ES-IS protocol */
{ SOCK_DGRAM,	&isodomain,		ISOPROTO_ESIS,		PR_ATOMIC|PR_ADDR,
  esis_input,	0,				esis_ctlinput,		0,
  esis_usrreq,
  esis_init,	0,				0,					0
},

/* ISOPROTO_INTRAISIS */
{ SOCK_DGRAM,	&isodomain,		ISOPROTO_INTRAISIS,	PR_ATOMIC|PR_ADDR,
  isis_input,	0,				0,					0,
  esis_usrreq,
  0,			0,				0,					0
},

/* ISOPROTO_IDRP */
{ SOCK_DGRAM,	&isodomain,		ISOPROTO_IDRP,		PR_ATOMIC|PR_ADDR,
  idrp_input,	0,				0,					0,
  idrp_usrreq,
  idrp_init,	0,				0,					0
},

/* ISOPROTO_TP */
{ SOCK_SEQPACKET,	&isodomain,	ISOPROTO_TP,		PR_CONNREQUIRED|PR_WANTRCVD,
  tpclnp_input,	0,				tpclnp_ctlinput,	tp_ctloutput,
  tp_usrreq,
  tp_init,		tp_fasttimo,	tp_slowtimo,		tp_drain,
},
d159 5
a163 5
{ SOCK_STREAM,	&isodomain,		ISOPROTO_TCP,		PR_CONNREQUIRED|PR_WANTRCVD,
  tuba_tcpinput,	0,			0,					tuba_ctloutput,
  tuba_usrreq,
  tuba_init,	tuba_fasttimo,	tuba_fasttimo,		0
},
d167 6
a172 6
/* ISOPROTO_TP */
{ SOCK_SEQPACKET,	&isodomain,	ISOPROTO_TP0,		PR_CONNREQUIRED|PR_WANTRCVD,
  tpcons_input,		0,			0,					tp_ctloutput,
  tp_usrreq,
  cons_init,		0,			0,					0,
},
a173 1

d177 9
a185 9
struct domain isodomain = {
    AF_ISO, 			/* family */
	"iso-domain", 		/* name */
	0,					/* initialize routine */
	0,					/* externalize access rights */
	0,					/* dispose of internalized rights */
	isosw,				/* protosw */
	&isosw[sizeof(isosw)/sizeof(isosw[0])], /* NPROTOSW */
	0,					/* next */
d187 2
a188 2
	48,					/* rtoffset */
	sizeof(struct sockaddr_iso) /* maxkeylen */
d190 1
a190 1
#endif	/* ISO */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
