head	1.9;
access;
symbols
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.26
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.24
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.22
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2004.07.15.12.10.45;	author henning;	state dead;
branches;
next	1.8;

1.8
date	2004.01.03.14.08.54;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.10.07.22.43;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.26.21.43.32;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.23.28.17;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.15.18.19.53;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.22.29.13;	author deraadt;	state Exp;
branches
	1.3.16.1
	1.3.26.1;
next	1.2;

1.2
date	96.03.04.10.34.53;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.14;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2002.03.28.14.57.37;	author niklas;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2003.06.07.11.06.10;	author ho;	state Exp;
branches;
next	1.3.16.3;

1.3.16.3
date	2004.02.19.10.57.26;	author niklas;	state Exp;
branches;
next	;

1.3.26.1
date	2002.06.11.03.31.38;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@bye bye netiso, you won't be missed
ok millert deraadt
@
text
@/*	$OpenBSD: clnp_input.c,v 1.8 2004/01/03 14:08:54 espie Exp $	*/
/*	$NetBSD: clnp_input.c,v 1.12 1996/04/13 01:34:26 cgd Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)clnp_input.c	8.1 (Berkeley) 6/10/93
 */

/***********************************************************
		Copyright IBM Corporation 1987

                      All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of IBM not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
IBM BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

/*
 * ARGO Project, Computer Sciences Dept., University of Wisconsin - Madison
 */

#include <sys/param.h>
#include <sys/mbuf.h>
#include <sys/domain.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/errno.h>
#include <sys/time.h>
#include <sys/systm.h>

#include <net/if.h>
#include <net/if_types.h>
#include <net/route.h>

#include <netiso/iso.h>
#include <netiso/iso_var.h>
#include <netiso/iso_snpac.h>
#include <netiso/clnp.h>
#include <netiso/clnl.h>
#include <netiso/esis.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/if_ether.h>
#include <netiso/eonvar.h>
#include <netiso/clnp_stat.h>
#include <netiso/argo_debug.h>

#include <sys/stdarg.h>

#ifdef ISO
u_char          clnp_protox[ISOPROTO_MAX];
struct clnl_protosw clnl_protox[256];
int             clnpqmaxlen = IFQ_MAXLEN;	/* RAH? why is this a
						 * variable */
#ifdef	ISO_X25ESIS
#if 0
void            x25esis_input();
#endif
#endif				/* ISO_X25ESIS */

/*
 * FUNCTION:		clnp_init
 *
 * PURPOSE:		clnp initialization. Fill in clnp switch tables.
 *
 * RETURNS:		none
 *
 * SIDE EFFECTS:	fills in clnp_protox table with correct offsets into
 *			the isosw table.
 *
 * NOTES:
 */
void
clnp_init()
{
	struct protosw *pr;

	/*
	 * CLNP protox initialization
	 */
	if ((pr = pffindproto(PF_ISO, ISOPROTO_RAW, SOCK_RAW)) == 0)
		printf("clnl_init: no raw CLNP\n");
	else
		clnp_protox[ISOPROTO_RAW] = pr - isosw;

	if ((pr = pffindproto(PF_ISO, ISOPROTO_TP, SOCK_SEQPACKET)) == 0)
		printf("clnl_init: no tp/clnp\n");
	else
		clnp_protox[ISOPROTO_TP] = pr - isosw;

	/*
	 *	CLNL protox initialization
	 */
	clnl_protox[ISO8473_CLNP].clnl_input = clnp_input;

	clnlintrq.ifq_maxlen = clnpqmaxlen;

	TAILQ_INIT(&iso_ifaddr);
}

/*
 * FUNCTION:		clnlintr
 *
 * PURPOSE:		Process a packet on the clnl input queue
 *
 * RETURNS:		nothing.
 *
 * SIDE EFFECTS:
 *
 * NOTES:
 */
void
clnlintr()
{
	struct mbuf *m;/* ptr to first mbuf of pkt */
	struct clnl_fixed *clnl;	/* ptr to fixed part of clnl
						 * hdr */
	int             s;	/* save and restore priority */
	struct clnl_protosw *clnlsw;	/* ptr to protocol switch */
	struct snpa_hdr sh;	/* subnetwork hdr */

	/*
	 *	Get next datagram off clnl input queue
	 */
next:
	s = splimp();
	/* IF_DEQUEUESNPAHDR(&clnlintrq, m, sh); */
	IF_DEQUEUE(&clnlintrq, m);
	splx(s);


	if (m == 0)		/* nothing to do */
		return;
	if ((m->m_flags & M_PKTHDR) == 0 || m->m_pkthdr.rcvif == 0) {
		m_freem(m);
		goto next;
	} else {
		struct ifaddr *ifa;
		for (ifa = m->m_pkthdr.rcvif->if_addrlist.tqh_first; ifa != 0;
		     ifa = ifa->ifa_list.tqe_next)
			if (ifa->ifa_addr->sa_family == AF_ISO)
				break;
		if (ifa == 0) {
			m_freem(m);
			goto next;
		}
	}
	bzero((caddr_t) & sh, sizeof(sh));
	sh.snh_flags = m->m_flags & (M_MCAST | M_BCAST);
	switch ((sh.snh_ifp = m->m_pkthdr.rcvif)->if_type) {
	case IFT_EON:
		bcopy(mtod(m, caddr_t), (caddr_t) sh.snh_dhost, sizeof(u_long));
		bcopy(sizeof(u_long) + mtod(m, caddr_t),
		      (caddr_t) sh.snh_shost, sizeof(u_long));
		sh.snh_dhost[4] = mtod(m, u_char *)[sizeof(struct ip) +
				     _offsetof(struct eon_hdr, eonh_class)];
		m->m_data += EONIPLEN;
		m->m_len -= EONIPLEN;
		m->m_pkthdr.len -= EONIPLEN;
		break;

	default:
		if (sh.snh_ifp->if_output == ether_output) {
			bcopy((caddr_t) (mtod(m, struct ether_header *)->ether_dhost),
			  (caddr_t) sh.snh_dhost, 2 * sizeof(sh.snh_dhost));
			m->m_data += sizeof(struct ether_header);
			m->m_len -= sizeof(struct ether_header);
			m->m_pkthdr.len -= sizeof(struct ether_header);
		}
	}
#ifdef ARGO_DEBUG
	if (argo_debug[D_INPUT]) {
		int             i;
		printf("clnlintr: src:");
		for (i = 0; i < 6; i++)
			printf("%x%c", sh.snh_shost[i] & 0xff,
			       (i < 5) ? ':' : ' ');
		printf(" dst:");
		for (i = 0; i < 6; i++)
			printf("%x%c", sh.snh_dhost[i] & 0xff,
			       (i < 5) ? ':' : ' ');
		printf("\n");
	}
#endif

	/*
	 * Get the fixed part of the clnl header into the first mbuf.
	 * Drop the packet if this fails.
	 * Do not call m_pullup if we have a cluster mbuf or the
	 * data is not there.
	 */
	if ((IS_CLUSTER(m) || (m->m_len < sizeof(struct clnl_fixed))) &&
	    ((m = m_pullup(m, sizeof(struct clnl_fixed))) == 0)) {
		INCSTAT(cns_toosmall);	/* TODO: use clnl stats */
		goto next;	/* m_pullup discards mbuf */
	}
	clnl = mtod(m, struct clnl_fixed *);

	/*
	 * Drop packet if the length of the header is not reasonable.
	 */
	if ((clnl->cnf_hdr_len < CLNP_HDR_MIN) ||
	    (clnl->cnf_hdr_len > CLNP_HDR_MAX)) {
		INCSTAT(cns_badhlen);	/* TODO: use clnl stats */
		m_freem(m);
		goto next;
	}
	/*
	 *	If the header is not contained in this mbuf, make it so.
	 *	Drop packet if this fails.
	 *	Note: m_pullup will allocate a cluster mbuf if necessary
	 */
	if (clnl->cnf_hdr_len > m->m_len) {
		if ((m = m_pullup(m, (int) clnl->cnf_hdr_len)) == 0) {
			INCSTAT(cns_badhlen);	/* TODO: use clnl stats */
			goto next;	/* m_pullup discards mbuf */
		}
		clnl = mtod(m, struct clnl_fixed *);
	}
	clnlsw = &clnl_protox[clnl->cnf_proto_id];


	if (clnlsw->clnl_input)
		(*clnlsw->clnl_input) (m, &sh);
	else
		m_freem(m);

	goto next;
}

/*
 * FUNCTION:		clnp_input
 *
 * PURPOSE:		process an incoming clnp packet
 *
 * RETURNS:		nothing
 *
 * SIDE EFFECTS:	increments fields of clnp_stat structure.
 *
 * NOTES:
 *	TODO: I would like to make seg_part a pointer into the mbuf, but
 *	will it be correctly aligned?
 */
void
clnp_input(struct mbuf *m, ...)
{
	struct snpa_hdr *shp;	/* subnetwork header */
	struct clnp_fixed *clnp;	/* ptr to fixed part of
						 * header */
	struct sockaddr_iso source;	/* source address of pkt */
	struct sockaddr_iso target;	/* destination address of pkt */
#define src	source.siso_addr
#define dst	target.siso_addr
	caddr_t         hoff;	/* current offset in packet */
	caddr_t         hend;	/* address of end of header info */
	struct clnp_segment seg_part;	/* segment part of hdr */
	int             seg_off = 0;	/* offset of segment part of hdr */
	int             seg_len;/* length of packet data&hdr in bytes */
	struct clnp_optidx oidx, *oidxp = NULL;	/* option index */
	extern int      iso_systype;	/* used by ESIS config resp */
	extern struct sockaddr_iso blank_siso;	/* used for initializing */
	int             need_afrin = 0;
	/* true if congestion experienced */
	/* which means you need afrin nose */
	/* spray. How clever! */
	va_list ap;

	va_start(ap, m);
	shp = va_arg(ap, struct snpa_hdr *);
	va_end(ap);


#ifdef ARGO_DEBUG
	if (argo_debug[D_INPUT]) {
		printf(
		       "clnp_input: processing dg; First mbuf m_len %d, m_type x%x, %s\n",
		 m->m_len, m->m_type, IS_CLUSTER(m) ? "cluster" : "normal");
	}
#endif
	need_afrin = 0;

	/*
	 *	If no iso addresses have been set, there is nothing
	 *	to do with the packet.
	 */
	if (iso_ifaddr.tqh_first == 0) {
		clnp_discard(m, ADDR_DESTUNREACH);
		return;
	}
	INCSTAT(cns_total);
	clnp = mtod(m, struct clnp_fixed *);

#ifdef ARGO_DEBUG
	if (argo_debug[D_DUMPIN]) {
		struct mbuf    *mhead;
		int             total_len = 0;
		printf("clnp_input: clnp header:\n");
		dump_buf(mtod(m, caddr_t), clnp->cnf_hdr_len);
		printf("clnp_input: mbuf chain:\n");
		for (mhead = m; mhead != NULL; mhead = mhead->m_next) {
			printf("m %p, len %d\n", mhead, mhead->m_len);
			total_len += mhead->m_len;
		}
		printf("clnp_input: total length of mbuf chain %d:\n",
		       total_len);
	}
#endif

	/*
	 *	Compute checksum (if necessary) and drop packet if
	 *	checksum does not match
	 */
	if (CKSUM_REQUIRED(clnp) &&
	    iso_check_csum(m, (int) clnp->cnf_hdr_len)) {
		INCSTAT(cns_badcsum);
		clnp_discard(m, GEN_BADCSUM);
		return;
	}
	if (clnp->cnf_vers != ISO8473_V1) {
		INCSTAT(cns_badvers);
		clnp_discard(m, DISC_UNSUPPVERS);
		return;
	}
	/* check mbuf data length: clnp_data_ck will free mbuf upon error */
	CTOH(clnp->cnf_seglen_msb, clnp->cnf_seglen_lsb, seg_len);
	if ((m = clnp_data_ck(m, seg_len)) == 0)
		return;

	clnp = mtod(m, struct clnp_fixed *);
	hend = (caddr_t) clnp + clnp->cnf_hdr_len;

	/*
	 * extract the source and destination address drop packet on failure
	 */
	source = target = blank_siso;

	hoff = (caddr_t) clnp + sizeof(struct clnp_fixed);
	CLNP_EXTRACT_ADDR(dst, hoff, hend);
	if (hoff == (caddr_t) 0) {
		INCSTAT(cns_badaddr);
		clnp_discard(m, GEN_INCOMPLETE);
		return;
	}
	CLNP_EXTRACT_ADDR(src, hoff, hend);
	if (hoff == (caddr_t) 0) {
		INCSTAT(cns_badaddr);
		clnp_discard(m, GEN_INCOMPLETE);
		return;
	}
#ifdef ARGO_DEBUG
	if (argo_debug[D_INPUT]) {
		printf("clnp_input: from %s", clnp_iso_addrp(&src));
		printf(" to %s\n", clnp_iso_addrp(&dst));
	}
#endif

	/*
	 * extract the segmentation information, if it is present.
	 * drop packet on failure
	 */
	if (((clnp->cnf_type & CNF_TYPE) != CLNP_ER) &&
	    (clnp->cnf_type & CNF_SEG_OK)) {
		if (hoff + sizeof(struct clnp_segment) > hend) {
			INCSTAT(cns_noseg);
			clnp_discard(m, GEN_INCOMPLETE);
			return;
		} else {
			(void) bcopy(hoff, (caddr_t) & seg_part,
				     sizeof(struct clnp_segment));
			/* make sure segmentation fields are in host order */
			seg_part.cng_id = ntohs(seg_part.cng_id);
			seg_part.cng_off = ntohs(seg_part.cng_off);
			seg_part.cng_tot_len = ntohs(seg_part.cng_tot_len);
			seg_off = hoff - (caddr_t) clnp;
			hoff += sizeof(struct clnp_segment);
		}
	}
	/*
	 * process options if present. If clnp_opt_sanity returns
	 * false (indicating an error was found in the options) or
	 * an unsupported option was found
	 * then drop packet and emit an ER.
	 */
	if (hoff < hend) {
		int             errcode;

		oidxp = &oidx;
		errcode = clnp_opt_sanity(m, hoff, hend - hoff, oidxp);

		/* we do not support security */
		if ((errcode == 0) && (oidxp->cni_securep))
			errcode = DISC_UNSUPPSECURE;

		/* the er option is valid with ER pdus only */
		if ((errcode == 0) && (oidxp->cni_er_reason != ER_INVALREAS) &&
		    ((clnp->cnf_type & CNF_TYPE) != CLNP_ER))
			errcode = DISC_UNSUPPOPT;

#ifdef	DECBIT
		/* check if the congestion experienced bit is set */
		if (oidxp->cni_qos_formatp) {
			caddr_t         qosp = CLNP_OFFTOOPT(m, oidxp->cni_qos_formatp);
			u_char          qos = *qosp;

			need_afrin = ((qos & (CLNPOVAL_GLOBAL | CLNPOVAL_CONGESTED)) ==
				    (CLNPOVAL_GLOBAL | CLNPOVAL_CONGESTED));
			if (need_afrin)
				INCSTAT(cns_congest_rcvd);
		}
#endif				/* DECBIT */

		if (errcode != 0) {
			clnp_discard(m, (char) errcode);
#ifdef ARGO_DEBUG
			if (argo_debug[D_INPUT]) {
				printf(
				       "clnp_input: dropped (err x%x) due to bad options\n",
				       errcode);
			}
#endif
			return;
		}
	}
	/*
	 *	check if this packet is for us. if not, then forward
	 */
	if (clnp_ours(&dst) == 0) {
#ifdef ARGO_DEBUG
		if (argo_debug[D_INPUT]) {
			printf("clnp_input: forwarding packet not for us\n");
		}
#endif
		clnp_forward(m, seg_len, &dst, oidxp, seg_off, shp);
		return;
	}
	/*
	 *	ESIS Configuration Response Function
	 *
	 *	If the packet received was sent to the multicast address
	 *	all end systems, then send an esh to the source
	 */
	if ((shp->snh_flags & M_MCAST) && (iso_systype == SNPA_ES)) {
		extern short    esis_holding_time;

		esis_shoutput(shp->snh_ifp, ESIS_ESH, esis_holding_time,
			      shp->snh_shost, 6, &dst);
	}
	/*
	 * If this is a fragment, then try to reassemble it. If clnp_reass
	 * returns non NULL, the packet has been reassembled, and should
	 * be give to TP. Otherwise the fragment has been delt with
	 * by the reassembly code (either stored or deleted). In either case
	 * we should have nothing more to do with it.
	 */
	if (((clnp->cnf_type & CNF_TYPE) != CLNP_ER) &&
	    (clnp->cnf_type & CNF_SEG_OK) &&
	    (seg_len != seg_part.cng_tot_len)) {
		struct mbuf    *m0;

		if ((m0 = clnp_reass(m, &src, &dst, &seg_part)) != NULL) {
			m = m0;
			clnp = mtod(m, struct clnp_fixed *);
			INCSTAT(cns_reassembled);
		} else {
			return;
		}
	}
	/*
	 *	give the packet to the higher layer
	 *
	 *	Note: the total length of packet
	 *	is the total length field of the segmentation part,
	 *	or, if absent, the segment length field of the
	 *	header.
	 */
	INCSTAT(cns_delivered);
	switch (clnp->cnf_type & CNF_TYPE) {
	case CLNP_ER:
		/*
		 *	This ER must have the er option.
		 *	If the option is not present, discard datagram.
		 */
		if (oidxp == NULL || oidxp->cni_er_reason == ER_INVALREAS) {
			clnp_discard(m, GEN_HDRSYNTAX);
		} else {
			clnp_er_input(m, &src, oidxp->cni_er_reason);
		}
		break;

	case CLNP_DT:
		(*isosw[clnp_protox[ISOPROTO_TP]].pr_input)(m, &source, &target,
					     clnp->cnf_hdr_len, need_afrin);
		break;

	case CLNP_RAW:
	case CLNP_ECR:
#ifdef ARGO_DEBUG
		if (argo_debug[D_INPUT]) {
			printf("clnp_input: raw input of %d bytes\n",
			       clnp->cnf_type & CNF_SEG_OK ?
			       seg_part.cng_tot_len : seg_len);
		}
#endif
		(*isosw[clnp_protox[ISOPROTO_RAW]].pr_input)(m, &source,
							     &target,
							 clnp->cnf_hdr_len);
		break;

	case CLNP_EC:
#ifdef ARGO_DEBUG
		if (argo_debug[D_INPUT]) {
			printf("clnp_input: echoing packet\n");
		}
#endif
		(void) clnp_echoreply(m, (clnp->cnf_type & CNF_SEG_OK ?
				      (int) seg_part.cng_tot_len : seg_len),
				      &source, &target, oidxp);
		break;

	default:
		printf("clnp_input: unknown clnp pkt type %d\n",
		       clnp->cnf_type & CNF_TYPE);
		clnp_stat.cns_delivered--;
		clnp_stat.cns_noproto++;
		clnp_discard(m, GEN_HDRSYNTAX);
		break;
	}
}
#endif				/* ISO */
@


1.8
log
@put an mi wrapper around stdarg.h/varargs.h. gcc3 moved stdarg/varargs macros
to built-ins, so eventually we will have one version of these files.
Special adjustments for the kernel to cope: machine/stdarg.h -> sys/stdarg.h
and machine/ansi.h needs to have a _BSD_VA_LIST_ for syslog* prototypes.
okay millert@@, drahn@@, miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: clnp_input.c,v 1.7 2003/12/10 07:22:43 itojun Exp $	*/
@


1.7
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: clnp_input.c,v 1.6 2003/09/26 21:43:32 miod Exp $	*/
d89 1
a89 1
#include <machine/stdarg.h>
@


1.6
log
@Typos: defintion -> definition, proccess -> process

There are more occurences hiding in binutils, lynx and afs but I am too
lazy to report them upstream at the moment.
@
text
@d1 1
a1 1
/*	$OpenBSD: clnp_input.c,v 1.5 2003/06/02 23:28:17 millert Exp $	*/
d117 1
a117 1
	register struct protosw *pr;
d156 2
a157 2
	register struct mbuf *m;/* ptr to first mbuf of pkt */
	register struct clnl_fixed *clnl;	/* ptr to fixed part of clnl
d179 1
a179 1
		register struct ifaddr *ifa;
d289 1
a289 1
	register struct clnp_fixed *clnp;	/* ptr to fixed part of
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: clnp_input.c,v 1.4 2002/03/15 18:19:53 millert Exp $	*/
d317 1
a317 1
		       "clnp_input: proccessing dg; First mbuf m_len %d, m_type x%x, %s\n",
@


1.4
log
@Kill #if __STDC__ used to do K&R vs. ANSI varargs/stdarg; just do things
the ANSI way.
@
text
@d1 1
a1 1
/*	$OpenBSD: clnp_input.c,v 1.3 1996/04/21 22:29:13 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: clnp_input.c,v 1.2 1996/03/04 10:34:53 mickey Exp $	*/
a289 1
#if __STDC__
a290 5
#else
clnp_input(m, va_alist)
	struct mbuf    *m;	/* ptr to first mbuf of pkt */
	va_dcl
#endif
@


1.3.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: clnp_input.c,v 1.3 1996/04/21 22:29:13 deraadt Exp $	*/
d290 1
d292 5
@


1.3.16.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d290 1
d292 5
@


1.3.16.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: clnp_input.c,v 1.3.16.1 2002/03/28 14:57:37 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3.16.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d89 1
a89 1
#include <sys/stdarg.h>
d117 1
a117 1
	struct protosw *pr;
d156 2
a157 2
	struct mbuf *m;/* ptr to first mbuf of pkt */
	struct clnl_fixed *clnl;	/* ptr to fixed part of clnl
d179 1
a179 1
		struct ifaddr *ifa;
d289 1
a289 1
	struct clnp_fixed *clnp;	/* ptr to fixed part of
d317 1
a317 1
		       "clnp_input: processing dg; First mbuf m_len %d, m_type x%x, %s\n",
@


1.2
log
@Initial commit of NetBSD 960217 netiso.
all the rest is the fixes to the import by Niklas.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: clnp_input.c,v 1.11 1996/02/13 22:08:26 christos Exp $	*/
d352 1
a352 2
			printf("m x%x, len %d\n", (unsigned int) mhead,
			       mhead->m_len);
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: clnp_input.c,v 1.10 1995/07/27 20:36:14 mycroft Exp $	*/
d44 2
a45 2
Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
d47 1
a47 1
both that copyright notice and this permission notice appear in 
d50 1
a50 1
software without specific, written prior permission.  
d74 1
d93 2
d96 1
a96 1
u_char		clnp_protox[ISOPROTO_MAX];
d98 2
a99 4
int			clnpqmaxlen = IFQ_MAXLEN;	/* RAH? why is this a variable */
struct mbuf	*clnp_data_ck();

void	clnp_input(), esis_input();
d101 4
a104 2
void	x25esis_input();
#endif	/* ISO_X25ESIS */
d109 1
a109 1
 * PURPOSE:			clnp initialization. Fill in clnp switch tables.
d111 1
a111 1
 * RETURNS:			none
d114 1
a114 1
 *					the isosw table.
d116 1
a116 1
 * NOTES:			
d124 1
a124 1
	 *	CLNP protox initialization
d149 1
a149 1
 * PURPOSE:			Process a packet on the clnl input queue
d151 1
a151 1
 * RETURNS:			nothing.
d153 1
a153 1
 * SIDE EFFECTS:	
d155 1
a155 1
 * NOTES:			
d157 1
d160 6
a165 5
	register struct mbuf		*m;		/* ptr to first mbuf of pkt */
	register struct clnl_fixed	*clnl;	/* ptr to fixed part of clnl hdr */
	int							s;		/* save and restore priority */
	struct clnl_protosw			*clnlsw;/* ptr to protocol switch */
	struct snpa_hdr				sh;		/* subnetwork hdr */
d172 1
a172 1
	/* IF_DEQUEUESNPAHDR(&clnlintrq, m, sh);*/
d185 1
a185 1
		    ifa = ifa->ifa_list.tqe_next)
d193 3
a195 4
	bzero((caddr_t)&sh, sizeof(sh));
	sh.snh_flags = m->m_flags & (M_MCAST|M_BCAST);
	switch((sh.snh_ifp = m->m_pkthdr.rcvif)->if_type) {
		extern int ether_output();
d197 1
a197 1
		bcopy(mtod(m, caddr_t), (caddr_t)sh.snh_dhost, sizeof(u_long));
d199 1
a199 1
					(caddr_t)sh.snh_shost, sizeof(u_long));
d201 1
a201 1
								_offsetof(struct eon_hdr, eonh_class)];
d209 5
a213 5
			bcopy((caddr_t)(mtod(m, struct ether_header *)->ether_dhost),
				(caddr_t)sh.snh_dhost, 2*sizeof(sh.snh_dhost));
			m->m_data += sizeof (struct ether_header);
			m->m_len -= sizeof (struct ether_header);
			m->m_pkthdr.len -= sizeof (struct ether_header);
d216 3
a218 2
	IFDEBUG(D_INPUT)
		int i;
d220 3
a222 2
		for (i=0; i<6; i++)
			printf("%x%c", sh.snh_shost[i] & 0xff, (i<5) ? ':' : ' ');
d224 3
a226 2
		for (i=0; i<6; i++)
			printf("%x%c", sh.snh_dhost[i] & 0xff, (i<5) ? ':' : ' ');
d228 2
a229 1
	ENDDEBUG
d232 4
a235 4
	 *	Get the fixed part of the clnl header into the first mbuf.
	 *	Drop the packet if this fails.
	 *	Do not call m_pullup if we have a cluster mbuf or the
	 *	data is not there.
d238 1
a238 1
		((m = m_pullup(m, sizeof(struct clnl_fixed))) == 0)) {
d240 1
a240 1
		goto next;				/* m_pullup discards mbuf */
a241 1

d245 1
a245 1
	 *	Drop packet if the length of the header is not reasonable.
d247 2
a248 2
	if ((clnl->cnf_hdr_len < CLNP_HDR_MIN) || 
		(clnl->cnf_hdr_len > CLNP_HDR_MAX)) {
a252 1

d259 1
a259 1
		if ((m = m_pullup(m, (int)clnl->cnf_hdr_len)) == 0) {
a264 1

d279 1
a279 1
 * PURPOSE:			process an incoming clnp packet
d281 1
a281 1
 * RETURNS:			nothing
d284 1
a284 1
 *					
d286 1
a286 1
 *	TODO: I would like to make seg_part a pointer into the mbuf, but 
d290 7
a296 3
clnp_input(m, shp)
struct mbuf		*m;		/* ptr to first mbuf of pkt */
struct snpa_hdr	*shp;	/* subnetwork header */
d298 5
a302 3
	register struct clnp_fixed	*clnp;	/* ptr to fixed part of header */
	struct sockaddr_iso			source; /* source address of pkt */
	struct sockaddr_iso			target; /* destination address of pkt */
d305 18
a322 12
	caddr_t						hoff;	/* current offset in packet */
	caddr_t						hend;	/* address of end of header info */
	struct clnp_segment			seg_part; /* segment part of hdr */
	int							seg_off=0; /* offset of segment part of hdr */
	int							seg_len;/* length of packet data&hdr in bytes */
	struct clnp_optidx			oidx, *oidxp = NULL;	/* option index */
	extern int 					iso_systype;	/* used by ESIS config resp */
	extern struct sockaddr_iso	blank_siso;		/* used for initializing */
	int							need_afrin = 0; 
										/* true if congestion experienced */
										/* which means you need afrin nose */
										/* spray. How clever! */
d324 2
a325 1
	IFDEBUG(D_INPUT)
d327 4
a330 3
		   "clnp_input: proccessing dg; First mbuf m_len %d, m_type x%x, %s\n", 
			m->m_len, m->m_type, IS_CLUSTER(m) ? "cluster" : "normal");
	ENDDEBUG
a340 1
	
d344 4
a347 3
	IFDEBUG(D_DUMPIN)
		struct mbuf *mhead;
		int			total_len = 0;
d351 3
a353 2
		for (mhead = m; mhead != NULL; mhead=mhead->m_next) {
			printf("m x%x, len %d\n", mhead, mhead->m_len);
d356 4
a359 2
		printf("clnp_input: total length of mbuf chain %d:\n", total_len);
	ENDDEBUG
d365 2
a366 1
	if (CKSUM_REQUIRED(clnp) && iso_check_csum(m, (int)clnp->cnf_hdr_len)) {
a370 1

d376 1
a376 3


 	/* check mbuf data length: clnp_data_ck will free mbuf upon error */
d380 1
a380 1
	
d382 1
a382 1
	hend = (caddr_t)clnp + clnp->cnf_hdr_len;
d384 2
a385 3
	/* 
	 *	extract the source and destination address
	 *	drop packet on failure
d389 1
a389 1
	hoff = (caddr_t)clnp + sizeof(struct clnp_fixed);
d391 1
a391 1
	if (hoff == (caddr_t)0) {
d397 1
a397 1
	if (hoff == (caddr_t)0) {
d402 2
a403 2

	IFDEBUG(D_INPUT)
d406 2
a407 1
	ENDDEBUG
d410 2
a411 2
	 *	extract the segmentation information, if it is present.
	 *	drop packet on failure
d414 1
a414 1
		(clnp->cnf_type & CNF_SEG_OK)) {
d420 2
a421 1
			(void) bcopy(hoff, (caddr_t)&seg_part, sizeof(struct clnp_segment));
d426 1
a426 1
			seg_off = hoff - (caddr_t)clnp;
a429 1

d431 4
a434 4
	 *	process options if present. If clnp_opt_sanity returns
	 *	false (indicating an error was found in the options) or
	 *	an unsupported option was found
	 *	then drop packet and emit an ER.
d437 1
a437 1
		int		errcode;
d440 1
a440 1
		errcode = clnp_opt_sanity(m, hoff, hend-hoff, oidxp);
d447 2
a448 2
		if ((errcode == 0) && (oidxp->cni_er_reason != ER_INVALREAS) && 
			((clnp->cnf_type & CNF_TYPE) != CLNP_ER))
d454 2
a455 2
			caddr_t	qosp = CLNP_OFFTOOPT(m, oidxp->cni_qos_formatp);
			u_char	qos = *qosp;
d457 2
a458 2
			need_afrin = ((qos & (CLNPOVAL_GLOBAL|CLNPOVAL_CONGESTED)) ==
				(CLNPOVAL_GLOBAL|CLNPOVAL_CONGESTED));
d462 1
a462 1
#endif	/* DECBIT */
d465 8
a472 5
			clnp_discard(m, (char)errcode);
			IFDEBUG(D_INPUT)
				printf("clnp_input: dropped (err x%x) due to bad options\n",
					errcode);
			ENDDEBUG
a475 1
	
d480 2
a481 1
		IFDEBUG(D_INPUT)
d483 3
a485 2
		ENDDEBUG
 		clnp_forward(m, seg_len, &dst, oidxp, seg_off, shp);
a487 1

d495 1
a495 1
		extern short esis_holding_time;
d498 1
a498 1
			shp->snh_shost, 6, &dst);
a499 1

d501 5
a505 5
	 *	If this is a fragment, then try to reassemble it. If clnp_reass
	 *	returns non NULL, the packet has been reassembled, and should
	 *	be give to TP. Otherwise the fragment has been delt with
	 *	by the reassembly code (either stored or deleted). In either case
	 *	we should have nothing more to do with it.
d508 3
a510 3
		(clnp->cnf_type & CNF_SEG_OK) &&
		(seg_len != seg_part.cng_tot_len)) {
		struct mbuf	*m0;
a519 1
	
d544 1
a544 1
			clnp->cnf_hdr_len, need_afrin);
d547 1
a547 1
 	case CLNP_RAW:
d549 2
a550 1
		IFDEBUG(D_INPUT)
d552 7
a558 4
				clnp->cnf_type & CNF_SEG_OK ? seg_part.cng_tot_len : seg_len);
		ENDDEBUG
		(*isosw[clnp_protox[ISOPROTO_RAW]].pr_input)(m, &source, &target,
					clnp->cnf_hdr_len);
d562 2
a563 1
		IFDEBUG(D_INPUT)
d565 5
a569 4
		ENDDEBUG
		(void)clnp_echoreply(m,
			(clnp->cnf_type & CNF_SEG_OK ? (int)seg_part.cng_tot_len : seg_len),
			&source, &target, oidxp);
d573 2
a574 2
 		printf("clnp_input: unknown clnp pkt type %d\n",
			clnp->cnf_type & CNF_TYPE);
d578 1
a578 1
 		break;
d581 1
a581 1
#endif /* ISO */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
