head	1.7;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.10
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.4.0.4
	UBC_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.22
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2004.06.20.17.19.27;	author itojun;	state dead;
branches;
next	1.6;

1.6
date	2003.12.10.07.22.44;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.23.28.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.19.15.07.34;	author miod;	state Exp;
branches;
next	1.3;

1.3
date	96.03.04.10.36.50;	author mickey;	state Exp;
branches
	1.3.16.1;
next	1.2;

1.2
date	95.12.14.06.51.11;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.18;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2001.10.31.03.29.04;	author nate;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2003.06.07.11.06.10;	author ho;	state Exp;
branches;
next	1.3.16.3;

1.3.16.3
date	2004.02.19.10.57.26;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.7
log
@goodbye TUBA.  deraadt ok
@
text
@/*	$OpenBSD: tuba_table.c,v 1.6 2003/12/10 07:22:44 itojun Exp $	*/
/*	$NetBSD: tuba_table.c,v 1.6 1996/02/13 22:12:34 christos Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)tuba_table.c	8.2 (Berkeley) 11/15/93
 */
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/proc.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/domain.h>
#include <sys/protosw.h>
#include <sys/ioctl.h>
#include <sys/time.h>
#include <sys/kernel.h>
#include <sys/timeout.h>

#include <net/if.h>
#include <net/radix.h>

#include <netiso/iso.h>
#include <netiso/tuba_table.h>

int             tuba_table_size;
struct tuba_cache **tuba_table;
struct radix_node_head *tuba_tree;
extern int      arpt_keep, arpt_prune;	/* use same values as arp cache */
struct timeout tuba_timeout;

void
tuba_timer(v)
	void *v;
{
	int             s = splsoftnet();
	int             i;
	struct tuba_cache *tc;
	long            timelimit = time.tv_sec - arpt_keep;

	timeout_add(&tuba_timeout, arpt_prune * hz);
	for (i = tuba_table_size; i > 0; i--)
		if ((tc = tuba_table[i]) && (tc->tc_refcnt == 0) &&
		    (tc->tc_time < timelimit)) {
			tuba_table[i] = 0;
			rn_delete(&tc->tc_siso.siso_addr, NULL, tuba_tree);
			free((caddr_t) tc, M_RTABLE);
		}
	splx(s);
}

void
tuba_table_init()
{
	rn_inithead((void **) &tuba_tree, 40);
	timeout_set(&tuba_timeout, tuba_timer, NULL);
	timeout_add(&tuba_timeout, arpt_prune * hz);
}

int
tuba_lookup(siso, wait)
	struct sockaddr_iso *siso;
	int wait;
{
	struct radix_node *rn;
	struct tuba_cache *tc;
	struct tuba_cache **new;
	int             dupentry = 0, sum_a = 0, sum_b = 0, old_size, i;

	if ((rn = rn_match((caddr_t) &siso->siso_addr, tuba_tree)) != NULL
	    && ((rn->rn_flags & RNF_ROOT) == 0)) {
		tc = (struct tuba_cache *) rn;
		tc->tc_time = time.tv_sec;
		return (tc->tc_index);
	}
	if ((tc = (struct tuba_cache *) malloc(sizeof(*tc), M_RTABLE, wait))
	    == NULL)
		return (0);
	bzero((caddr_t) tc, sizeof(*tc));
	bcopy(siso->siso_data, tc->tc_siso.siso_data,
	      tc->tc_siso.siso_nlen = siso->siso_nlen);
	rn_insert(&tc->tc_siso.siso_addr, tuba_tree, &dupentry, tc->tc_nodes);
	if (dupentry)
		panic("tuba_lookup 1");
	tc->tc_siso.siso_family = AF_ISO;
	tc->tc_siso.siso_len = sizeof(tc->tc_siso);
	tc->tc_time = time.tv_sec;
	for (i = sum_a = tc->tc_siso.siso_nlen; --i >= 0;)
		if (i & 1)
			sum_a += (u_char) tc->tc_siso.siso_data[i];
		else
			sum_b += (u_char) tc->tc_siso.siso_data[i];
	REDUCE(tc->tc_sum, (sum_a << 8) + sum_b);
	HTONS(tc->tc_sum);
	SWAB(tc->tc_ssum, tc->tc_sum);
	for (i = tuba_table_size; i > 0; i--)
		if (tuba_table[i] == 0)
			goto fixup;
	old_size = tuba_table_size;
	if (tuba_table_size == 0)
		tuba_table_size = 15;
	if (tuba_table_size > 0x7fff)
		return (0);
	tuba_table_size = 1 + 2 * tuba_table_size;
	i = (tuba_table_size + 1) * sizeof(tc);
	new = (struct tuba_cache **) malloc((unsigned) i, M_RTABLE, wait);
	if (new == 0) {
		tuba_table_size = old_size;
		rn_delete(&tc->tc_siso.siso_addr, NULL, tuba_tree);
		free((caddr_t) tc, M_RTABLE);
		return (0);
	}
	bzero((caddr_t) new, (unsigned) i);
	if (tuba_table) {
		bcopy((caddr_t) tuba_table, (caddr_t) new, i >> 1);
		free((caddr_t) tuba_table, M_RTABLE);
	}
	tuba_table = new;
	i = tuba_table_size;
fixup:
	tuba_table[i] = tc;
	tc->tc_index = i;
	return (tc->tc_index);
}
@


1.6
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_table.c,v 1.5 2003/06/02 23:28:18 millert Exp $	*/
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_table.c,v 1.4 2001/08/19 15:07:34 miod Exp $	*/
d65 1
a65 1
	register struct tuba_cache *tc;
d89 1
a89 1
	register struct sockaddr_iso *siso;
d93 1
a93 1
	register struct tuba_cache *tc;
@


1.4
log
@More old timeouts removal, mainly affected unused/unmaintained code.
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_table.c,v 1.3 1996/03/04 10:36:50 mickey Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@Initial commit of NetBSD 960217 netiso.
all the rest is the fixes to the import by Niklas.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d49 1
d61 1
d72 1
a72 1
	timeout(tuba_timer, (caddr_t) 0, arpt_prune * hz);
d87 2
a88 1
	timeout(tuba_timer, (caddr_t) 0, arpt_prune * hz);
@


1.3.16.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_table.c,v 1.3 1996/03/04 10:36:50 mickey Exp $	*/
a48 1
#include <sys/timeout.h>
a59 1
struct timeout tuba_timeout;
d70 1
a70 1
	timeout_add(&tuba_timeout, arpt_prune * hz);
d85 1
a85 2
	timeout_set(&tuba_timeout, tuba_timer, NULL);
	timeout_add(&tuba_timeout, arpt_prune * hz);
@


1.3.16.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_table.c,v 1.3.16.1 2001/10/31 03:29:04 nate Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3.16.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d65 1
a65 1
	struct tuba_cache *tc;
d89 1
a89 1
	struct sockaddr_iso *siso;
d93 1
a93 1
	struct tuba_cache *tc;
@


1.2
log
@from netbsd:
make netinet work on systems where pointers and longs are 64 bits
(like the alpha).  Biggest problem: IP headers were overlayed with
structure which included pointers, and which therefore didn't overlay
properly on 64-bit machines.  Solution: instead of threading pointers
through IP header overlays, add a "queue element" structure to do
the threading, and point it at the ip headers.
@
text
@d1 2
a2 1
/*	$NetBSD: tuba_table.c,v 1.5 1995/10/16 05:28:58 mycroft Exp $	*/
d56 4
a59 4
int	tuba_table_size;
struct	tuba_cache **tuba_table;
struct	radix_node_head *tuba_tree;
extern	int arpt_keep, arpt_prune;	/* use same values as arp cache */
d62 2
a63 1
tuba_timer()
d65 4
a68 4
	int s = splsoftnet();
	int	i;
	register struct	tuba_cache *tc;
	long	timelimit = time.tv_sec - arpt_keep;
d70 1
a70 1
	timeout(tuba_timer, (caddr_t)0, arpt_prune * hz);
d76 1
a76 1
			free((caddr_t)tc, M_RTABLE);
d81 1
d84 2
a85 2
	rn_inithead((void **)&tuba_tree, 40);
	timeout(tuba_timer, (caddr_t)0, arpt_prune * hz);
d91 1
d93 1
a93 1
	struct radix_node *rn, *rn_match();
d96 1
a96 1
	int dupentry = 0, sum_a = 0, sum_b = 0, old_size, i;
d98 3
a100 3
	if ((rn = rn_match((caddr_t)&siso->siso_addr, tuba_tree))
	     && ((rn->rn_flags & RNF_ROOT) == 0)) {
		tc = (struct tuba_cache *)rn;
d104 2
a105 2
	if ((tc = (struct tuba_cache *)malloc(sizeof(*tc), M_RTABLE, wait))
		== NULL)
d107 1
a107 1
	bzero((caddr_t)tc, sizeof (*tc));
d109 1
a109 1
		tc->tc_siso.siso_nlen =  siso->siso_nlen);
d116 1
a116 1
	for (i = sum_a = tc->tc_siso.siso_nlen; --i >= 0; )
d118 1
a118 1
			sum_a += (u_char)tc->tc_siso.siso_data[i];
d120 1
a120 1
			sum_b += (u_char)tc->tc_siso.siso_data[i];
d134 1
a134 1
	new = (struct tuba_cache **)malloc((unsigned)i, M_RTABLE, wait);
d138 1
a138 1
		free((caddr_t)tc, M_RTABLE);
d141 1
a141 1
	bzero((caddr_t)new, (unsigned)i);
d143 2
a144 2
		bcopy((caddr_t)tuba_table, (caddr_t)new, i >> 1);
		free((caddr_t)tuba_table, M_RTABLE);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: tuba_table.c,v 1.4 1995/08/12 23:59:53 mycroft Exp $	*/
d94 1
a94 1
	if ((rn = rn_match((caddr_t)&siso->siso_addr, tuba_tree->rnh_treetop))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
