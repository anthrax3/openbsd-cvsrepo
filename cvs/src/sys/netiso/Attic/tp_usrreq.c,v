head	1.8;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.8
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.2
	UBC_BASE:1.5
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.22
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2004.07.15.12.10.46;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2003.12.10.07.22.44;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.28.18;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.19.19.22.43;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.16.12.54.07;	author ho;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.22.30.04;	author deraadt;	state Exp;
branches
	1.3.16.1;
next	1.2;

1.2
date	96.03.04.10.36.45;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.18;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2001.07.04.10.55.40;	author niklas;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2001.12.05.01.02.40;	author niklas;	state Exp;
branches;
next	1.3.16.3;

1.3.16.3
date	2003.06.07.11.06.10;	author ho;	state Exp;
branches;
next	1.3.16.4;

1.3.16.4
date	2004.02.19.10.57.26;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@bye bye netiso, you won't be missed
ok millert deraadt
@
text
@/*	$OpenBSD: tp_usrreq.c,v 1.7 2003/12/10 07:22:44 itojun Exp $	*/
/*	$NetBSD: tp_usrreq.c,v 1.9 1996/03/16 23:14:06 christos Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)tp_usrreq.c	8.1 (Berkeley) 6/10/93
 */

/***********************************************************
				Copyright IBM Corporation 1987

                      All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of IBM not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
IBM BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

/*
 * ARGO Project, Computer Sciences Dept., University of Wisconsin - Madison
 */
/*
 * tp_usrreq(), the fellow that gets called from most of the socket code.
 * Pretty straighforward. THe only really awful stuff here is the OOB
 * processing, which is done wholly here. tp_rcvoob() and tp_sendoob() are
 * contained here and called by tp_usrreq().
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/domain.h>
#include <sys/protosw.h>
#include <sys/errno.h>
#include <sys/time.h>
#include <sys/proc.h>

#include <netiso/tp_param.h>
#include <netiso/tp_timer.h>
#include <netiso/tp_stat.h>
#include <netiso/tp_seq.h>
#include <netiso/tp_ip.h>
#include <netiso/tp_pcb.h>
#include <netiso/tp_var.h>
#include <netiso/argo_debug.h>
#include <netiso/tp_trace.h>
#include <netiso/tp_meas.h>
#include <netiso/iso.h>
#include <netiso/iso_errno.h>

int             TNew;
int             TPNagle1, TPNagle2;
struct tp_pcb  *tp_listeners, *tp_intercepts;

#ifdef ARGO_DEBUG
/*
 * CALLED FROM:
 *  anywhere you want to debug...
 * FUNCTION and ARGUMENTS:
 *  print (str) followed by the control info in the mbufs of an mbuf chain (n)
 */
void
dump_mbuf(n, str)
	struct mbuf    *n;
	char           *str;
{
	struct mbuf    *nextrecord;

	printf("dump %s\n", str);

	if (n == MNULL) {
		printf("EMPTY:\n");
		return;
	}
	while (n) {
		nextrecord = n->m_act;
		printf("RECORD:\n");
		while (n) {
			printf("%p : Len %x Data %p A %p Nx %p Tp %x\n",
			       n, n->m_len, n->m_data, n->m_act, n->m_next, n->m_type);
#ifdef notdef
			{
				char  *p = mtod(n, char *);
				int    i;

				printf("data: ");
				for (i = 0; i < n->m_len; i++) {
					if (i % 8 == 0)
						printf("\n");
					printf("0x%x ", *(p + i));
				}
				printf("\n");
			}
#endif				/* notdef */
			if (n->m_next == n) {
				printf("LOOP!\n");
				return;
			}
			n = n->m_next;
		}
		n = nextrecord;
	}
	printf("\n");
}

#endif				/* ARGO_DEBUG */

/*
 * CALLED FROM:
 *  tp_usrreq(), PRU_RCVOOB
 * FUNCTION and ARGUMENTS:
 * 	Copy data from the expedited data socket buffer into
 * 	the pre-allocated mbuf m.
 * 	There is an isomorphism between XPD TPDUs and expedited data TSDUs.
 * 	XPD tpdus are limited to 16 bytes of data so they fit in one mbuf.
 * RETURN VALUE:
 *  EINVAL if debugging is on and a disaster has occurred
 *  ENOTCONN if the socket isn't connected
 *  EWOULDBLOCK if the socket is in non-blocking mode and there's no
 *		xpd data in the buffer
 *  E* whatever is returned from the fsm.
 */
int
tp_rcvoob(tpcb, so, m, outflags, inflags)
	struct tp_pcb  *tpcb;
	struct socket *so;
	struct mbuf *m;
	int            *outflags;
	int             inflags;
{
	struct mbuf *n;
	struct sockbuf *sb = &so->so_rcv;
	struct tp_event E;
	int             error = 0;
	struct mbuf **nn;

#ifdef ARGO_DEBUG
	if (argo_debug[D_XPD]) {
		printf("PRU_RCVOOB, sostate 0x%x\n", so->so_state);
	}
#endif

	/* if you use soreceive */
	if (m == MNULL)
		return ENOBUFS;

restart:
	if ((((so->so_state & SS_ISCONNECTED) == 0)
	     || (so->so_state & SS_ISDISCONNECTING) != 0) &&
	    (so->so_proto->pr_flags & PR_CONNREQUIRED)) {
		return ENOTCONN;
	}
	/*
	 * Take the first mbuf off the chain. Each XPD TPDU gives you a
	 * complete TSDU so the chains don't get coalesced, but one TSDU may
	 * span several mbufs. Nevertheless, since n should have a most 16
	 * bytes, it will fit into m.  (size was checked in tp_input() )
	 */

	/*
	 * Code for excision of OOB data should be added to
	 * uipc_socket2.c (like sbappend).
	 */

	sblock(sb, M_WAITOK);
	for (nn = &sb->sb_mb; (n = *nn) != NULL; nn = &n->m_act)
		if (n->m_type == MT_OOBDATA)
			break;

	if (n == 0) {
#ifdef ARGO_DEBUG
		if (argo_debug[D_XPD]) {
			printf("RCVOOB: empty queue!\n");
		}
#endif
		sbunlock(sb);
		if (so->so_state & SS_NBIO) {
			return EWOULDBLOCK;
		}
		sbwait(sb);
		goto restart;
	}
	m->m_len = 0;

	/* Assuming at most one xpd tpdu is in the buffer at once */
	while (n != MNULL) {
		m->m_len += n->m_len;
		bcopy(mtod(n, caddr_t), mtod(m, caddr_t), (unsigned) n->m_len);
		m->m_data += n->m_len;	/* so mtod() in bcopy() above gives
					 * right addr */
		n = n->m_next;
	}
	m->m_data = m->m_dat;
	m->m_flags |= M_EOR;

#ifdef ARGO_DEBUG
	if (argo_debug[D_XPD]) {
		printf("tp_rcvoob: xpdlen 0x%x\n", m->m_len);
		dump_mbuf(so->so_rcv.sb_mb, "RCVOOB: Rcv socketbuf");
		dump_mbuf(sb->sb_mb, "RCVOOB: Xrcv socketbuf");
	}
#endif

	if ((inflags & MSG_PEEK) == 0) {
		n = *nn;
		*nn = n->m_act;
		for (; n; n = m_free(n))
			sbfree(sb, n);
	}
	sbunlock(sb);

#ifdef TPPT
	if (tp_traceflags[D_XPD]) {
		tptraceTPCB(TPPTmisc, "PRU_RCVOOB @@ release sb_cc m_len",
			    tpcb->tp_Xrcv.sb_cc, m->m_len, 0, 0);
	}
#endif
	if (error == 0)
		error = DoEvent(T_USR_Xrcvd);
	return error;
}

/*
 * CALLED FROM:
 *  tp_usrreq(), PRU_SENDOOB
 * FUNCTION and ARGUMENTS:
 * 	Send what's in the mbuf chain (m) as an XPD TPDU.
 * 	The mbuf may not contain more than 16 bytes of data.
 * 	XPD TSDUs aren't segmented, so they translate into
 * 	exactly one XPD TPDU, with EOT bit set.
 * RETURN VALUE:
 *  EWOULDBLOCK if socket is in non-blocking mode and the previous
 *   xpd data haven't been acked yet.
 *  EMSGSIZE if trying to send > max-xpd bytes (16)
 *  ENOBUFS if ran out of mbufs
 */
int
tp_sendoob(tpcb, so, xdata, outflags)
	struct tp_pcb  *tpcb;
	struct socket *so;
	struct mbuf *xdata;
	int            *outflags;	/* not used */
{
	/*
	 * Each mbuf chain represents a sequence # in the XPD seq space.
	 * The first one in the queue has sequence # tp_Xuna.
	 * When we add to the XPD queue, we stuff a zero-length
	 * mbuf (mark) into the DATA queue, with its sequence number in m_next
	 * to be assigned to this XPD tpdu, so data xfer can stop
	 * when it reaches the zero-length mbuf if this XPD TPDU hasn't
	 * yet been acknowledged.
	 */
	struct sockbuf *sb = &(tpcb->tp_Xsnd);
	struct mbuf *xmark;
	int    len = 0;
	struct tp_event E;

#ifdef ARGO_DEBUG
	if (argo_debug[D_XPD]) {
		printf("tp_sendoob:");
		if (xdata)
			printf("xdata len 0x%x\n", xdata->m_len);
	}
#endif
	/*
	 * DO NOT LOCK the Xsnd buffer!!!! You can have at MOST one socket
	 * buf locked at any time!!! (otherwise you might sleep() in sblock()
	 * w/ a signal pending and cause the system call to be aborted w/ a
	 * locked socketbuf, which is a problem.  So the so_snd buffer lock
	 * (done in sosend()) serves as the lock for Xpd.
	 */
	if (sb->sb_mb) {	/* Anything already in eXpedited data
				 * sockbuf? */
		if (so->so_state & SS_NBIO) {
			return EWOULDBLOCK;
		}
		while (sb->sb_mb) {
			sbunlock(&so->so_snd);	/* already locked by sosend */
			sbwait(&so->so_snd);
			sblock(&so->so_snd, M_WAITOK);	/* sosend will unlock on
							 * return */
		}
	}
	if (xdata == (struct mbuf *) 0) {
		/* empty xpd packet */
		MGETHDR(xdata, M_WAIT, MT_OOBDATA);
		xdata->m_len = 0;
		xdata->m_pkthdr.len = 0;
	}
#ifdef ARGO_DEBUG
	if (argo_debug[D_XPD]) {
		printf("tp_sendoob 1:");
		if (xdata)
			printf("xdata len 0x%x\n", xdata->m_len);
	}
#endif
	xmark = xdata;		/* temporary use of variable xmark */
	while (xmark) {
		len += xmark->m_len;
		xmark = xmark->m_next;
	}
	if (len > TP_MAX_XPD_DATA) {
		return EMSGSIZE;
	}
#ifdef ARGO_DEBUG
	if (argo_debug[D_XPD]) {
		printf("tp_sendoob 2:");
		if (xdata)
			printf("xdata len 0x%x\n", len);
	}
#endif


#ifdef TPPT
	if (tp_traceflags[D_XPD]) {
		tptraceTPCB(TPPTmisc, "XPD mark m_next ", xdata->m_next, 0, 0, 0);
	}
#endif

	sbappendrecord(sb, xdata);

#ifdef ARGO_DEBUG
	if (argo_debug[D_XPD]) {
		printf("tp_sendoob len 0x%x\n", len);
		dump_mbuf(so->so_snd.sb_mb, "XPD request Regular sndbuf:");
		dump_mbuf(tpcb->tp_Xsnd.sb_mb, "XPD request Xsndbuf:");
	}
#endif
	return DoEvent(T_XPD_req);
}

/*
 * CALLED FROM:
 *  the socket routines
 * FUNCTION and ARGUMENTS:
 * 	Handles all "user requests" except the [gs]ockopts() requests.
 * 	The argument (req) is the request type (PRU*),
 * 	(m) is an mbuf chain, generally used for send and
 * 	receive type requests only.
 * 	(nam) is used for addresses usually, in particular for the bind request.
 *
 */
/* ARGSUSED */
int
tp_usrreq(so, req, m, nam, controlp)
	struct socket  *so;
	int             req;
	struct mbuf    *m, *nam, *controlp;
{
	struct tp_pcb *tpcb = sototpcb(so);
	int             s = splsoftnet();
	int             error = 0;
	int             flags, *outflags = &flags;
	u_long          eotsdu = 0;
	struct tp_event E;

#ifdef ARGO_DEBUG
	if (argo_debug[D_REQUEST]) {
		printf("usrreq(%p,%d,%p,%p,%p)\n", so, req, m, nam, outflags);
		if (so->so_error)
			printf("WARNING!!! so->so_error is 0x%x\n", so->so_error);
	}
#endif
#ifdef TPPT
	if (tp_traceflags[D_REQUEST]) {
		tptraceTPCB(TPPTusrreq, "req so m state [", req, so, m,
			    tpcb ? tpcb->tp_state : 0);
	}
#endif

	if ((u_long) tpcb == 0 && req != PRU_ATTACH) {
#ifdef TPPT
		if (tp_traceflags[D_REQUEST]) {
			tptraceTPCB(TPPTusrreq, "req failed NO TPCB[", 0, 0, 0, 0);
		}
#endif
		splx(s);
		return ENOTCONN;
	}
	switch (req) {

	case PRU_ATTACH:
		if (tpcb) {
			error = EISCONN;
		} else if ((error = tp_attach(so, (long) nam)) == 0)
			tpcb = sototpcb(so);
		break;

	case PRU_ABORT:	/* called from close() */
		/*
		 * called for each incoming connect queued on the parent
		 * (accepting) socket
		 */
		if (tpcb->tp_state == TP_OPEN || tpcb->tp_state == TP_CONFIRMING) {
			E.TPDU_ATTR(REQ).e_reason = E_TP_NO_SESSION ^ TP_ERROR_MASK;
			error = DoEvent(T_DISC_req);	/* pretend it was a
							 * close() */
			break;
		}		/* else DROP THROUGH */
	case PRU_DETACH:	/* called from close() */
		/* called only after disconnect was called */
		error = DoEvent(T_DETACH);
		if (tpcb->tp_state == TP_CLOSED) {
			if (tpcb->tp_notdetached) {
#ifdef ARGO_DEBUG
				if (argo_debug[D_CONN]) {
					printf("PRU_DETACH: not detached\n");
				}
#endif
				tp_detach(tpcb);
			}
			free((caddr_t) tpcb, M_PCB);
			tpcb = 0;
		}
		break;

	case PRU_SHUTDOWN:
		/*
		 * recv end may have been released; local credit might be
		 * zero
		 */
	case PRU_DISCONNECT:
		E.TPDU_ATTR(REQ).e_reason = E_TP_NORMAL_DISC ^ TP_ERROR_MASK;
		error = DoEvent(T_DISC_req);
		break;

	case PRU_BIND:
		error = tp_pcbbind(tpcb, nam);
		break;

	case PRU_LISTEN:
		if (tpcb->tp_state != TP_CLOSED || tpcb->tp_lsuffixlen == 0 ||
		    tpcb->tp_next == 0)
			error = EINVAL;
		else {
			struct tp_pcb **tt;
			remque(tpcb);
			tpcb->tp_next = tpcb->tp_prev = tpcb;
			for (tt = &tp_listeners; *tt; tt = &((*tt)->tp_nextlisten))
				if ((*tt)->tp_lsuffixlen)
					break;
			tpcb->tp_nextlisten = *tt;
			*tt = tpcb;
			error = DoEvent(T_LISTEN_req);
		}
		break;

	case PRU_CONNECT2:
		error = EOPNOTSUPP;	/* for unix domain sockets */
		break;

	case PRU_CONNECT:
#ifdef TPPT
		if (tp_traceflags[D_CONN]) {
			tptraceTPCB(TPPTmisc,
				    "PRU_CONNECT: so 0x%x *SHORT_LSUFXP(tpcb) 0x%x lsuflen 0x%x, class 0x%x",
		    tpcb->tp_sock, *SHORT_LSUFXP(tpcb), tpcb->tp_lsuffixlen,
				    tpcb->tp_class);
		}
#endif
#ifdef ARGO_DEBUG
		if (argo_debug[D_CONN]) {
			printf("PRU_CONNECT: so %p *SHORT_LSUFXP(tpcb) 0x%x lsuflen 0x%x, class 0x%x",
			       tpcb->tp_sock, *SHORT_LSUFXP(tpcb), tpcb->tp_lsuffixlen,
			       tpcb->tp_class);
		}
#endif
		if (tpcb->tp_lsuffixlen == 0) {
			if ((error = tp_pcbbind(tpcb, MNULL)) != 0) {
#ifdef ARGO_DEBUG
				if (argo_debug[D_CONN]) {
					printf("pcbbind returns error 0x%x\n", error);
				}
#endif
				break;
			}
		}
#ifdef ARGO_DEBUG
		if (argo_debug[D_CONN]) {
			printf("isop %p isop->isop_socket offset 12 :\n", tpcb->tp_npcb);
			dump_buf(tpcb->tp_npcb, 16);
		}
#endif
		if ((error = tp_route_to(nam, tpcb, /* channel */ 0)) != 0)
			break;
#ifdef ARGO_DEBUG
		if (argo_debug[D_CONN]) {
			printf(
			       "PRU_CONNECT after tpcb %p so %p npcb %p flags 0x%x\n",
			       tpcb, so, tpcb->tp_npcb, tpcb->tp_flags);
			printf("isop %p isop->isop_socket offset 12 :\n", tpcb->tp_npcb);
			dump_buf(tpcb->tp_npcb, 16);
		}
#endif
		if (tpcb->tp_fsuffixlen == 0) {
			/* didn't set peer extended suffix */
			(tpcb->tp_nlproto->nlp_getsufx) (tpcb->tp_npcb,
					      &tpcb->tp_fsuffixlen,
					      tpcb->tp_fsuffix, TP_FOREIGN);
		}
		if (tpcb->tp_state == TP_CLOSED) {
			soisconnecting(so);
			error = DoEvent(T_CONN_req);
		} else {
			(tpcb->tp_nlproto->nlp_pcbdisc) (tpcb->tp_npcb);
			error = EISCONN;
		}
#ifdef TP_PERF_MEAS
		if (DOPERF(tpcb)) {
			u_int           lsufx, fsufx;
			lsufx = *(u_short *) (tpcb->tp_lsuffix);
			fsufx = *(u_short *) (tpcb->tp_fsuffix);

			tpmeas(tpcb->tp_lref,
			       TPtime_open | (tpcb->tp_xtd_format << 4),
			       &time, lsufx, fsufx, tpcb->tp_fref);
		}
#endif
		break;

	case PRU_ACCEPT:
		(tpcb->tp_nlproto->nlp_getnetaddr) (tpcb->tp_npcb, nam, TP_FOREIGN);
#ifdef ARGO_DEBUG
		if (argo_debug[D_REQUEST]) {
			printf("ACCEPT PEERADDDR:");
			dump_buf(mtod(nam, char *), nam->m_len);
		}
#endif
#ifdef TP_PERF_MEAS
		if (DOPERF(tpcb)) {
			u_int           lsufx, fsufx;
			lsufx = *(u_short *) (tpcb->tp_lsuffix);
			fsufx = *(u_short *) (tpcb->tp_fsuffix);

			tpmeas(tpcb->tp_lref, TPtime_open,
			       &time, lsufx, fsufx, tpcb->tp_fref);
		}
#endif
		break;

	case PRU_RCVD:
		if (so->so_state & SS_ISCONFIRMING) {
			if (tpcb->tp_state == TP_CONFIRMING)
				error = tp_confirm(tpcb);
			break;
		}
#ifdef TPPT
		if (tp_traceflags[D_DATA]) {
			tptraceTPCB(TPPTmisc,
				    "RCVD BF: lcredit sent_lcdt cc hiwat \n",
				    tpcb->tp_lcredit, tpcb->tp_sent_lcdt,
				    so->so_rcv.sb_cc, so->so_rcv.sb_hiwat);
			LOCAL_CREDIT(tpcb);
			tptraceTPCB(TPPTmisc,
				    "PRU_RCVD AF sbspace lcredit hiwat cc",
				    sbspace(&so->so_rcv), tpcb->tp_lcredit,
				    so->so_rcv.sb_cc, so->so_rcv.sb_hiwat);
		}
#endif
#ifdef ARGO_DEBUG
		if (argo_debug[D_REQUEST]) {
			printf("RCVD: cc %ld space %ld hiwat %ld\n",
			       so->so_rcv.sb_cc, sbspace(&so->so_rcv),
			       so->so_rcv.sb_hiwat);
		}
#endif
		if (((long) nam) & MSG_OOB)
			error = DoEvent(T_USR_Xrcvd);
		else
			error = DoEvent(T_USR_rcvd);
		break;

	case PRU_RCVOOB:
		if ((so->so_state & SS_ISCONNECTED) == 0) {
			error = ENOTCONN;
			break;
		}
		if (!tpcb->tp_xpd_service) {
			error = EOPNOTSUPP;
			break;
		}
		/* kludge - nam is really flags here */
		error = tp_rcvoob(tpcb, so, m, outflags, (long) nam);
		break;

	case PRU_SEND:
	case PRU_SENDOOB:
		if (controlp) {
			error = tp_snd_control(controlp, so, &m);
			controlp = NULL;
			if (error)
				break;
		}
		if ((so->so_state & SS_ISCONFIRMING) &&
		    (tpcb->tp_state == TP_CONFIRMING) &&
		    (error = tp_confirm(tpcb)))
			break;
		if (req == PRU_SENDOOB) {
			error = (tpcb->tp_xpd_service == 0) ?
				EOPNOTSUPP : tp_sendoob(tpcb, so, m, outflags);
			break;
		}
		if (m == 0)
			break;
		if (m->m_flags & M_EOR) {
			eotsdu = 1;
			m->m_flags &= ~M_EOR;
		}
		if (eotsdu == 0 && m->m_pkthdr.len == 0)
			break;
		if (tpcb->tp_state != TP_AKWAIT && tpcb->tp_state != TP_OPEN) {
			error = ENOTCONN;
			break;
		}
		/*
		 * The protocol machine copies mbuf chains,
		 * prepends headers, assigns seq numbers, and
		 * puts the packets on the device.
		 * When they are acked they are removed from the socket buf.
		 *
		 * sosend calls this up until sbspace goes negative.
		 * Sbspace may be made negative by appending this mbuf chain,
		 * possibly by a whole cluster.
		 */
		{
			/*
			 * Could have eotsdu and no data.(presently MUST have
			 * an mbuf though, even if its length == 0)
			 */
			int             totlen = m->m_pkthdr.len;
			struct sockbuf *sb = &so->so_snd;
#ifdef TP_PERF_MEAS
			if (DOPERF(tpcb)) {
				PStat(tpcb, Nb_from_sess) += totlen;
				tpmeas(tpcb->tp_lref, TPtime_from_session, 0, 0,
				       PStat(tpcb, Nb_from_sess), totlen);
			}
#endif
#ifdef ARGO_DEBUG
			if (argo_debug[D_SYSCALL]) {
				printf(
				       "PRU_SEND: eot %ld before sbappend %p len 0x%x to sb @@ %p\n",
				       eotsdu, m, totlen, sb);
				dump_mbuf(sb->sb_mb, "so_snd.sb_mb");
				dump_mbuf(m, "m : to be added");
			}
#endif
			tp_packetize(tpcb, m, eotsdu);
#ifdef ARGO_DEBUG
			if (argo_debug[D_SYSCALL]) {
				printf("PRU_SEND: eot %ld after sbappend %p\n", eotsdu, m);
				dump_mbuf(sb->sb_mb, "so_snd.sb_mb");
			}
#endif
			if (tpcb->tp_state == TP_OPEN)
				error = DoEvent(T_DATA_req);
#ifdef ARGO_DEBUG
			if (argo_debug[D_SYSCALL]) {
				printf("PRU_SEND: after driver error 0x%x \n", error);
				printf("so_snd %p cc 0t%ld mbcnt 0t%ld\n",
				       sb, sb->sb_cc, sb->sb_mbcnt);
				dump_mbuf(sb->sb_mb, "so_snd.sb_mb after driver");
			}
#endif
		}
		break;

	case PRU_SOCKADDR:
		(tpcb->tp_nlproto->nlp_getnetaddr) (tpcb->tp_npcb, nam, TP_LOCAL);
		break;

	case PRU_PEERADDR:
		(tpcb->tp_nlproto->nlp_getnetaddr) (tpcb->tp_npcb, nam, TP_FOREIGN);
		break;

	case PRU_CONTROL:
		error = EOPNOTSUPP;
		break;

	case PRU_PROTOSEND:
	case PRU_PROTORCV:
	case PRU_SENSE:
	case PRU_SLOWTIMO:
	case PRU_FASTTIMO:
		error = EOPNOTSUPP;
		break;

	default:
#ifdef ARGO_DEBUG
		printf("tp_usrreq UNKNOWN PRU %d\n", req);
#endif				/* ARGO_DEBUG */
		error = EOPNOTSUPP;
	}

#ifdef ARGO_DEBUG
	if (argo_debug[D_REQUEST]) {
		printf("%s, so %p, tpcb %p, error %d, state %d\n",
		       "returning from tp_usrreq", so, tpcb, error,
		       tpcb ? tpcb->tp_state : 0);
	}
#endif
#ifdef TPPT
	if (tp_traceflags[D_REQUEST]) {
		tptraceTPCB(TPPTusrreq, "END req so m state [", req, so, m,
			    tpcb ? tpcb->tp_state : 0);
	}
#endif
	if (controlp) {
		m_freem(controlp);
		printf("control data unexpectedly retained in tp_usrreq()");
	}
	splx(s);
	return error;
}

void
tp_ltrace(so, uio)
	struct socket  *so;
	struct uio     *uio;
{
#ifdef TPPT
	if (tp_traceflags[D_DATA]) {
		struct tp_pcb *tpcb = sototpcb(so);
		if (tpcb) {
			tptraceTPCB(TPPTmisc, "sosend so resid iovcnt", so,
				    uio->uio_resid, uio->uio_iovcnt, 0);
		}
	}
#endif
}

int
tp_confirm(tpcb)
	struct tp_pcb *tpcb;
{
	struct tp_event E;
	if (tpcb->tp_state == TP_CONFIRMING)
		return DoEvent(T_ACPT_req);
	printf("Tp confirm called when not confirming; tpcb %p, state 0x%x\n",
	       tpcb, tpcb->tp_state);
	return 0;
}

/*
 * Process control data sent with sendmsg()
 */
int
tp_snd_control(m, so, data)
	struct mbuf    *m;
	struct socket  *so;
	struct mbuf **data;
{
	struct cmsghdr *ch;
	int             error = 0;

	if (m && m->m_len) {
		ch = mtod(m, struct cmsghdr *);
		m->m_len -= sizeof(*ch);
		m->m_data += sizeof(*ch);
		error = tp_ctloutput(PRCO_SETOPT,
				     so, ch->cmsg_level, ch->cmsg_type, &m);
		if (ch->cmsg_type == TPOPT_DISC_DATA) {
			if (data && *data) {
				m_freem(*data);
				*data = 0;
			}
			error = tp_usrreq(so, PRU_DISCONNECT, NULL,
					  NULL, NULL);
		}
	}
	if (m)
		m_freem(m);
	return error;
}
@


1.7
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: tp_usrreq.c,v 1.6 2003/06/02 23:28:18 millert Exp $	*/
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: tp_usrreq.c,v 1.5 2001/11/19 19:22:43 deraadt Exp $	*/
d124 2
a125 2
				register char  *p = mtod(n, char *);
				register int    i;
d167 2
a168 2
	register struct socket *so;
	register struct mbuf *m;
d172 2
a173 2
	register struct mbuf *n;
	register struct sockbuf *sb = &so->so_rcv;
d176 1
a176 1
	register struct mbuf **nn;
d281 2
a282 2
	register struct socket *so;
	register struct mbuf *xdata;
d294 3
a296 3
	register struct sockbuf *sb = &(tpcb->tp_Xsnd);
	register struct mbuf *xmark;
	register int    len = 0;
d391 1
a391 1
	register struct tp_pcb *tpcb = sototpcb(so);
d477 1
a477 1
			register struct tp_pcb **tt;
d764 1
a764 1
		register struct tp_pcb *tpcb = sototpcb(so);
d775 1
a775 1
	register struct tp_pcb *tpcb;
d792 1
a792 1
	register struct mbuf **data;
d794 1
a794 1
	register struct cmsghdr *ch;
@


1.5
log
@more than typo
@
text
@d1 1
a1 1
/*	$OpenBSD: tp_usrreq.c,v 1.4 2001/05/16 12:54:07 ho Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@No need to check M_WAIT/M_WAITOK malloc return values. (art@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: tp_usrreq.c,v 1.3 1996/04/21 22:30:04 deraadt Exp $	*/
d273 1
a273 1
 * 	The mbuf may not contain more then 16 bytes of data.
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: tp_usrreq.c,v 1.2 1996/03/04 10:36:45 mickey Exp $	*/
a331 3
		if (xdata == NULL) {
			return ENOBUFS;
		}
@


1.3.16.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: tp_usrreq.c,v 1.3 1996/04/21 22:30:04 deraadt Exp $	*/
d332 3
@


1.3.16.2
log
@Merge in -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d273 1
a273 1
 * 	The mbuf may not contain more than 16 bytes of data.
@


1.3.16.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: tp_usrreq.c,v 1.3.16.2 2001/12/05 01:02:40 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3.16.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d124 2
a125 2
				char  *p = mtod(n, char *);
				int    i;
d167 2
a168 2
	struct socket *so;
	struct mbuf *m;
d172 2
a173 2
	struct mbuf *n;
	struct sockbuf *sb = &so->so_rcv;
d176 1
a176 1
	struct mbuf **nn;
d281 2
a282 2
	struct socket *so;
	struct mbuf *xdata;
d294 3
a296 3
	struct sockbuf *sb = &(tpcb->tp_Xsnd);
	struct mbuf *xmark;
	int    len = 0;
d391 1
a391 1
	struct tp_pcb *tpcb = sototpcb(so);
d477 1
a477 1
			struct tp_pcb **tt;
d764 1
a764 1
		struct tp_pcb *tpcb = sototpcb(so);
d775 1
a775 1
	struct tp_pcb *tpcb;
d792 1
a792 1
	struct mbuf **data;
d794 1
a794 1
	struct cmsghdr *ch;
@


1.2
log
@Initial commit of NetBSD 960217 netiso.
all the rest is the fixes to the import by Niklas.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: tp_usrreq.c,v 1.8 1996/02/13 22:12:27 christos Exp $	*/
d124 1
a124 1
			printf("%x : Len %x Data %x A %x Nx %x Tp %x\n",
d407 1
a407 1
		printf("usrreq(0x%x,%d,0x%x,0x%x,0x%x)\n", so, req, m, nam, outflags);
d511 1
a511 1
			printf("PRU_CONNECT: so *SHORT_LSUFXP(tpcb) 0x%x lsuflen 0x%x, class 0x%x",
d528 1
a528 1
			printf("isop 0x%x isop->isop_socket offset 12 :\n", tpcb->tp_npcb);
d537 1
a537 1
			       "PRU_CONNECT after tpcb 0x%x so 0x%x npcb 0x%x flags 0x%x\n",
d539 1
a539 1
			printf("isop 0x%x isop->isop_socket offset 12 :\n", tpcb->tp_npcb);
d610 1
a610 1
			printf("RCVD: cc %d space %d hiwat %d\n",
d690 1
a690 1
				       "PRU_SEND: eot %d before sbappend 0x%x len 0x%x to sb @@ 0x%x\n",
d699 1
a699 1
				printf("PRU_SEND: eot %d after sbappend 0x%x\n", eotsdu, m);
d708 1
a708 1
				printf("so_snd 0x%x cc 0t%d mbcnt 0t%d\n",
d745 1
a745 1
		printf("%s, so 0x%x, tpcb 0x%x, error %d, state %d\n",
d787 1
a787 1
	printf("Tp confirm called when not confirming; tpcb 0x%x, state 0x%x\n",
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: tp_usrreq.c,v 1.7 1995/08/12 23:59:52 mycroft Exp $	*/
d44 2
a45 2
Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
d47 1
a47 1
both that copyright notice and this permission notice appear in 
d50 1
a50 1
software without specific, written prior permission.  
d65 1
a65 1
/* 
d67 3
a69 4
 * Pretty straighforward.
 * THe only really awful stuff here is the OOB processing, which is done
 * wholly here.
 * tp_rcvoob() and tp_sendoob() are contained here and called by tp_usrreq().
d81 1
d89 1
d96 3
a98 4
int tp_attach(), tp_pcbbind();
int TNew;
int TPNagle1, TPNagle2;
struct tp_pcb *tp_listeners, *tp_intercepts;
d109 2
a110 2
	struct mbuf *n;
	char *str;
d112 1
a112 1
	struct mbuf *nextrecord;
d116 1
a116 1
	if (n == MNULL)  {
a119 1
		
d125 1
a125 1
				n, n->m_len, n->m_data, n->m_act, n->m_next, n->m_type);
d128 2
a129 2
				register char *p = mtod(n, char *);
				register int i;
d133 1
a133 1
					if (i%8 == 0)
d135 1
a135 1
					printf("0x%x ", *(p+i));
d139 1
a139 1
#endif /* notdef */
d151 1
a151 1
#endif /* ARGO_DEBUG */
d168 1
d170 5
a174 5
	struct tp_pcb	*tpcb;
	register struct socket	*so;
	register struct mbuf 	*m;
	int 		 	*outflags;
	int 		 	inflags;
d179 1
a179 1
	int error = 0;
d182 2
a183 1
	IFDEBUG(D_XPD)
d185 2
a186 1
	ENDDEBUG
d194 3
a196 3
		 || (so->so_state & SS_ISDISCONNECTING) != 0) &&
		(so->so_proto->pr_flags & PR_CONNREQUIRED)) {
			return ENOTCONN;
d198 5
a202 6

	/* Take the first mbuf off the chain.
	 * Each XPD TPDU gives you a complete TSDU so the chains don't get 
	 * coalesced, but one TSDU may span several mbufs.
	 * Nevertheless, since n should have a most 16 bytes, it
	 * will fit into m.  (size was checked in tp_input() )
d209 1
a209 1
	
d211 1
a211 1
	for (nn = &sb->sb_mb; n = *nn; nn = &n->m_act)
d216 2
a217 1
		IFDEBUG(D_XPD)
d219 2
a220 1
		ENDDEBUG
d223 1
a223 1
			return  EWOULDBLOCK;
d233 3
a235 2
		bcopy(mtod(n, caddr_t), mtod(m, caddr_t), (unsigned)n->m_len);
		m->m_data += n->m_len; /* so mtod() in bcopy() above gives right addr */
d241 2
a242 1
	IFDEBUG(D_XPD)
d246 2
a247 1
	ENDDEBUG
d252 1
a252 1
		for (; n; n = m_free(n)) 
a254 2

release:
d257 2
a258 1
	IFTRACE(D_XPD)
d260 3
a262 2
			tpcb->tp_Xrcv.sb_cc, m->m_len, 0, 0);
	ENDTRACE
d264 1
a264 1
		error = DoEvent(T_USR_Xrcvd); 
d282 1
d284 4
a287 4
	struct tp_pcb	*tpcb;
	register struct socket	*so;
	register struct mbuf 	*xdata;
	int 		 	*outflags; /* not used */
d296 1
a296 1
	 * yet been acknowledged.  
d299 2
a300 2
	register struct mbuf 	*xmark;
	register int 			len=0;
d303 2
a304 1
	IFDEBUG(D_XPD)
d308 7
a314 6
	ENDDEBUG
	/* DO NOT LOCK the Xsnd buffer!!!! You can have at MOST one 
	 * socket buf locked at any time!!! (otherwise you might
	 * sleep() in sblock() w/ a signal pending and cause the
	 * system call to be aborted w/ a locked socketbuf, which
	 * is a problem.  So the so_snd buffer lock
d317 2
a318 1
	if (sb->sb_mb) { /* Anything already in eXpedited data sockbuf? */
d323 1
a323 1
			sbunlock(&so->so_snd); /* already locked by sosend */
d325 2
a326 1
			sblock(&so->so_snd, M_WAITOK);  /* sosend will unlock on return */
d329 1
a329 2

	if (xdata == (struct mbuf *)0) {
d338 2
a339 1
	IFDEBUG(D_XPD)
d343 3
a345 2
	ENDDEBUG
	xmark = xdata; /* temporary use of variable xmark */
d353 2
a354 1
	IFDEBUG(D_XPD)
d358 2
a359 1
	ENDDEBUG
d362 2
a363 1
	IFTRACE(D_XPD)
d365 2
a366 1
	ENDTRACE
d368 1
a368 1
	sbappendrecord(sb, xdata);	
d370 2
a371 1
	IFDEBUG(D_XPD)
d375 3
a377 2
	ENDDEBUG
	return DoEvent(T_XPD_req); 
d385 1
a385 1
 * 	The argument (req) is the request type (PRU*), 
d389 1
a389 1
 * 
d391 1
a391 1
/*ARGSUSED*/
d394 9
a402 9
	struct socket *so;
	u_int req;
	struct mbuf *m, *nam, *controlp;
{	
	register struct tp_pcb *tpcb =  sototpcb(so);
	int s = splsoftnet();
	int error = 0;
	int flags, *outflags = &flags; 
	u_long eotsdu = 0;
d405 3
a407 2
	IFDEBUG(D_REQUEST)
		printf("usrreq(0x%x,%d,0x%x,0x%x,0x%x)\n",so,req,m,nam,outflags);
d410 12
a421 8
	ENDDEBUG
	IFTRACE(D_REQUEST)
		tptraceTPCB(TPPTusrreq, "req so m state [", req, so, m, 
			tpcb?tpcb->tp_state:0);
	ENDTRACE

	if ((u_long)tpcb == 0 && req != PRU_ATTACH) {
		IFTRACE(D_REQUEST)
d423 2
a424 1
		ENDTRACE
a427 1

d433 1
a433 1
		} else if ((error = tp_attach(so, (long)nam)) == 0)
d437 4
a440 3
	case PRU_ABORT: 	/* called from close() */
		/* called for each incoming connect queued on the 
		 *	parent (accepting) socket 
d443 3
a445 2
			E.ATTR(T_DISC_req).e_reason = E_TP_NO_SESSION ^ TP_ERROR_MASK;
			error = DoEvent(T_DISC_req); /* pretend it was a close() */
d447 2
a448 3
		} /* else DROP THROUGH */

	case PRU_DETACH: 	/* called from close() */
d453 2
a454 1
				IFDEBUG(D_CONN)
d456 2
a457 1
				ENDDEBUG
d460 1
a460 1
			free((caddr_t)tpcb, M_PCB);
d466 4
a469 1
		/* recv end may have been released; local credit might be zero  */
d471 1
a471 1
		E.ATTR(T_DISC_req).e_reason = E_TP_NORMAL_DISC ^ TP_ERROR_MASK;
d476 1
a476 1
		error =  tp_pcbbind(tpcb, nam);
d481 1
a481 1
				tpcb->tp_next == 0)
d497 1
a497 1
		error = EOPNOTSUPP; /* for unix domain sockets */
d501 10
a510 7
		IFTRACE(D_CONN)
			tptraceTPCB(TPPTmisc, 
			"PRU_CONNECT: so 0x%x *SHORT_LSUFXP(tpcb) 0x%x lsuflen 0x%x, class 0x%x",
			tpcb->tp_sock, *SHORT_LSUFXP(tpcb), tpcb->tp_lsuffixlen,
				tpcb->tp_class);
		ENDTRACE
		IFDEBUG(D_CONN)
d512 4
a515 3
			tpcb->tp_sock, *SHORT_LSUFXP(tpcb), tpcb->tp_lsuffixlen,
				tpcb->tp_class);
		ENDDEBUG
d517 3
a519 2
			if (error = tp_pcbbind(tpcb, MNULL)) {
				IFDEBUG(D_CONN)
d521 2
a522 1
				ENDDEBUG
d526 2
a527 1
		IFDEBUG(D_CONN)
d530 3
a532 2
		ENDDEBUG
		if (error = tp_route_to(nam, tpcb, /* channel */0))
d534 2
a535 1
		IFDEBUG(D_CONN)
d537 2
a538 2
				"PRU_CONNECT after tpcb 0x%x so 0x%x npcb 0x%x flags 0x%x\n", 
				tpcb, so, tpcb->tp_npcb, tpcb->tp_flags);
d541 3
a543 2
		ENDDEBUG
		if (tpcb->tp_fsuffixlen ==  0) {
d545 3
a547 2
			(tpcb->tp_nlproto->nlp_getsufx)(tpcb->tp_npcb, &tpcb->tp_fsuffixlen,
				tpcb->tp_fsuffix, TP_FOREIGN);
d550 1
a550 1
			soisconnecting(so);  
d553 1
a553 1
			(tpcb->tp_nlproto->nlp_pcbdisc)(tpcb->tp_npcb);
d556 11
a566 9
		IFPERF(tpcb)
			u_int lsufx, fsufx;
			lsufx = *(u_short *)(tpcb->tp_lsuffix);
			fsufx = *(u_short *)(tpcb->tp_fsuffix);

			tpmeas(tpcb->tp_lref, 
				TPtime_open | (tpcb->tp_xtd_format << 4), 
				&time, lsufx, fsufx, tpcb->tp_fref);
		ENDPERF
d569 4
a572 3
	case PRU_ACCEPT: 
		(tpcb->tp_nlproto->nlp_getnetaddr)(tpcb->tp_npcb, nam, TP_FOREIGN);
		IFDEBUG(D_REQUEST)
d575 12
a586 9
		ENDDEBUG
		IFPERF(tpcb)
			u_int lsufx, fsufx;
			lsufx = *(u_short *)(tpcb->tp_lsuffix);
			fsufx = *(u_short *)(tpcb->tp_fsuffix);

			tpmeas(tpcb->tp_lref, TPtime_open, 
				&time, lsufx, fsufx, tpcb->tp_fref);
		ENDPERF
d595 2
a596 1
		IFTRACE(D_DATA)
d598 3
a600 3
			"RCVD BF: lcredit sent_lcdt cc hiwat \n",
				tpcb->tp_lcredit, tpcb->tp_sent_lcdt,
				so->so_rcv.sb_cc, so->so_rcv.sb_hiwat);
d602 8
a609 6
			tptraceTPCB(TPPTmisc, 
				"PRU_RCVD AF sbspace lcredit hiwat cc",
				sbspace(&so->so_rcv), tpcb->tp_lcredit,
				so->so_rcv.sb_cc, so->so_rcv.sb_hiwat);
		ENDTRACE
		IFDEBUG(D_REQUEST)
d611 8
a618 7
				so->so_rcv.sb_cc, sbspace(&so->so_rcv),
				so->so_rcv.sb_hiwat);
		ENDDEBUG
		if (((long)nam) & MSG_OOB)
			error = DoEvent(T_USR_Xrcvd); 
		else 
			error = DoEvent(T_USR_rcvd); 
d626 1
a626 1
		if (! tpcb->tp_xpd_service) {
d631 1
a631 1
		error = tp_rcvoob(tpcb, so, m, outflags, (long)nam);
d645 1
a645 1
			    break;
d648 1
a648 1
						EOPNOTSUPP : tp_sendoob(tpcb, so, m, outflags);
d676 1
a676 1
			 * an mbuf though, even if its length == 0) 
d678 1
a678 1
			int totlen = m->m_pkthdr.len;
d680 9
a688 6
			IFPERF(tpcb)
			   PStat(tpcb, Nb_from_sess) += totlen;
			   tpmeas(tpcb->tp_lref, TPtime_from_session, 0, 0, 
					PStat(tpcb, Nb_from_sess), totlen);
			ENDPERF
			IFDEBUG(D_SYSCALL)
d690 2
a691 2
				"PRU_SEND: eot %d before sbappend 0x%x len 0x%x to sb @@ 0x%x\n",
					eotsdu, m, totlen, sb);
d694 2
a695 1
			ENDDEBUG
d697 2
a698 1
			IFDEBUG(D_SYSCALL)
d701 2
a702 1
			ENDDEBUG
d704 4
a707 3
				error = DoEvent(T_DATA_req); 
			IFDEBUG(D_SYSCALL)
				printf("PRU_SEND: after driver error 0x%x \n",error);
d709 1
a709 1
						sb, sb->sb_cc, sb->sb_mbcnt);
d711 2
a712 1
			ENDDEBUG
d717 1
a717 1
		(tpcb->tp_nlproto->nlp_getnetaddr)(tpcb->tp_npcb, nam, TP_LOCAL);
d721 1
a721 1
		(tpcb->tp_nlproto->nlp_getnetaddr)(tpcb->tp_npcb, nam, TP_FOREIGN);
d739 1
a739 1
#endif /* ARGO_DEBUG */
d743 2
a744 1
	IFDEBUG(D_REQUEST)
d746 10
a755 7
			"returning from tp_usrreq", so, tpcb, error,
			tpcb ? tpcb->tp_state : 0);
	ENDDEBUG
	IFTRACE(D_REQUEST)
		tptraceTPCB(TPPTusrreq, "END req so m state [", req, so, m, 
			tpcb ? tpcb->tp_state : 0);
	ENDTRACE
d763 2
d766 2
a767 2
struct socket *so;
struct uio *uio;
d769 3
a771 2
	IFTRACE(D_DATA)
		register struct tp_pcb *tpcb =  sototpcb(so);
d774 1
a774 1
				uio->uio_resid, uio->uio_iovcnt, 0);
d776 2
a777 1
	ENDTRACE
d780 1
d782 1
a782 1
register struct tp_pcb *tpcb;
d786 1
a786 1
	    return DoEvent(T_ACPT_req);
d788 1
a788 1
		tpcb, tpcb->tp_state);
d795 1
d797 2
a798 2
	struct mbuf *m;
	struct socket *so;
d802 1
a802 1
	int error = 0;
d806 2
a807 2
		m->m_len -= sizeof (*ch);
		m->m_data += sizeof (*ch);
d809 1
a809 1
							 so, ch->cmsg_level, ch->cmsg_type, &m);
d815 2
a816 2
			error = tp_usrreq(so, PRU_DISCONNECT, (struct mbuf *)0,
								(caddr_t)0, (struct mbuf *)0);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
