head	1.6;
access;
symbols
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.32
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.30
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.28
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.07.15.12.10.46;	author henning;	state dead;
branches;
next	1.5;

1.5
date	2004.06.24.19.35.26;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.10.07.22.44;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.23.28.18;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.10.36.40;	author mickey;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.53.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.17;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2003.06.07.11.06.10;	author ho;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2004.02.19.10.57.26;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.6
log
@bye bye netiso, you won't be missed
ok millert deraadt
@
text
@/*	$OpenBSD: tp_trace.c,v 1.5 2004/06/24 19:35:26 tholo Exp $	*/
/*	$NetBSD: tp_trace.c,v 1.6 1996/02/13 22:12:20 christos Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)tp_trace.c	8.1 (Berkeley) 6/10/93
 */

/***********************************************************
		Copyright IBM Corporation 1987

                      All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of IBM not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
IBM BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

/*
 * ARGO Project, Computer Sciences Dept., University of Wisconsin - Madison
 */
/*
 * The whole protocol trace module. We keep a circular buffer of trace
 * structures, which are big unions of different structures we might want to
 * see. Unfortunately this gets too big pretty easily. Pcbs were removed from
 * the tracing when the kernel got too big to boot.
 */

#define TP_TRACEFILE

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/time.h>

#include <netiso/tp_param.h>
#include <netiso/tp_timer.h>
#include <netiso/tp_stat.h>
#include <netiso/tp_param.h>
#include <netiso/tp_ip.h>
#include <netiso/tp_pcb.h>
#include <netiso/tp_tpdu.h>
#include <netiso/argo_debug.h>
#include <netiso/tp_trace.h>

#ifdef TPPT
static          tp_seq = 0;
u_char          tp_traceflags[128];

/*
 * The argument tpcb is the obvious.
 * event here is just the type of trace event - TPPTmisc, etc.
 * The rest of the arguments have different uses depending
 * on the type of trace event.
 */
/* ARGSUSED */
/* VARARGS */

void
tpTrace(tpcb, event, arg, src, len, arg4, arg5)
	struct tp_pcb  *tpcb;
	u_int           event, arg;
	u_int           src;
	u_int           len;
	u_int           arg4;
	u_int           arg5;
{
	struct tp_Trace *tp;

	tp = &tp_Trace[tp_Tracen++];
	tp_Tracen %= TPTRACEN;

	tp->tpt_event = event;
	tp->tpt_tseq = tp_seq++;
	tp->tpt_arg = arg;
	if (tpcb)
		tp->tpt_arg2 = tpcb->tp_lref;
	getmicrotime(&tp->tpt_time);

	switch (event) {

	case TPPTertpdu:
		bcopy((caddr_t) src, (caddr_t) & tp->tpt_ertpdu,
		      (unsigned) MIN((int) len, sizeof(struct tp_Trace)));
		break;

	case TPPTusrreq:
	case TPPTmisc:

		/* arg is a string */
		bcopy((caddr_t) arg, (caddr_t) tp->tpt_str,
		 (unsigned) MIN(1 + strlen((caddr_t) arg), TPTRACE_STRLEN));
		tp->tpt_m2 = src;
		tp->tpt_m3 = len;
		tp->tpt_m4 = arg4;
		tp->tpt_m1 = arg5;
		break;

	case TPPTgotXack:
	case TPPTXack:
	case TPPTsendack:
	case TPPTgotack:
	case TPPTack:
	case TPPTindicate:
	default:
	case TPPTdriver:
		tp->tpt_m2 = arg;
		tp->tpt_m3 = src;
		tp->tpt_m4 = len;
		tp->tpt_m5 = arg4;
		tp->tpt_m1 = arg5;
		break;
	case TPPTparam:
		bcopy((caddr_t) src, (caddr_t) & tp->tpt_param, sizeof(struct tp_param));
		break;
	case TPPTref:
		bcopy((caddr_t) src, (caddr_t) & tp->tpt_ref, sizeof(struct tp_ref));
		break;

	case TPPTtpduin:
	case TPPTtpduout:
		tp->tpt_arg2 = arg4;
		bcopy((caddr_t) src, (caddr_t) & tp->tpt_tpdu,
		      (unsigned) MIN((int) len, sizeof(struct tp_Trace)));
		break;
	}
}
#endif				/* TPPT */
@


1.5
log
@This moves access to wall and uptime variables in MI code,
encapsulating all such access into wall-defined functions
that makes sure locking is done as needed.

It also cleans up some uses of wall time vs. uptime some
places, but there is sure to be more of these needed as
well, particularily in MD code.  Also, many current calls
to microtime() should probably be changed to getmicrotime(),
or to the {,get}microuptime() versions.

ok art@@ deraadt@@ aaron@@ matthieu@@ beck@@ sturm@@ millert@@ others
"Oh, that is not your problem!" from miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tp_trace.c,v 1.4 2003/12/10 07:22:44 itojun Exp $	*/
@


1.4
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: tp_trace.c,v 1.3 2003/06/02 23:28:18 millert Exp $	*/
d118 1
a118 1
	bcopy((caddr_t) & time, (caddr_t) & tp->tpt_time, sizeof(struct timeval));
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: tp_trace.c,v 1.2 1996/03/04 10:36:40 mickey Exp $	*/
d108 1
a108 1
	register struct tp_Trace *tp;
@


1.2
log
@Initial commit of NetBSD 960217 netiso.
all the rest is the fixes to the import by Niklas.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2.16.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: tp_trace.c,v 1.2 1996/03/04 10:36:40 mickey Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2.16.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d108 1
a108 1
	struct tp_Trace *tp;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: tp_trace.c,v 1.5 1994/06/29 06:40:44 cgd Exp $	*/
d44 2
a45 2
Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
d47 1
a47 1
both that copyright notice and this permission notice appear in 
d50 1
a50 1
software without specific, written prior permission.  
d65 5
a69 6
/* 
 * The whole protocol trace module.
 * We keep a circular buffer of trace structures, which are big
 * unions of different structures we might want to see.
 * Unfortunately this gets too big pretty easily. Pcbs were removed
 * from the tracing when the kernel got too big to boot.
d91 2
a92 2
static tp_seq = 0;
u_char tp_traceflags[128];
d100 2
a101 2
/*ARGSUSED*/
/*VARARGS*/
d105 6
a110 6
	struct tp_pcb	*tpcb;
	u_int 			event, arg;
	u_int	 		src;
	u_int	 		len; 
	u_int	 		arg4;
	u_int	 		arg5;
d120 1
a120 1
	if(tpcb)
d122 1
a122 1
	bcopy( (caddr_t)&time, (caddr_t)&tp->tpt_time, sizeof(struct timeval) );
d124 1
a124 1
	switch(event) {
d127 2
a128 2
		bcopy((caddr_t)src, (caddr_t)&tp->tpt_ertpdu,
			(unsigned)MIN((int)len, sizeof(struct tp_Trace)));
d135 3
a137 3
		bcopy((caddr_t)arg, (caddr_t)tp->tpt_str, 
			(unsigned)MIN(1+strlen((caddr_t) arg), TPTRACE_STRLEN));
		tp->tpt_m2 = src; 
d143 6
a148 6
	case TPPTgotXack: 
	case TPPTXack: 
	case TPPTsendack: 
	case TPPTgotack: 
	case TPPTack: 
	case TPPTindicate: 
d150 2
a151 2
	case TPPTdriver: 
		tp->tpt_m2 = arg; 
d155 1
a155 1
		tp->tpt_m1 = arg5; 
d158 1
a158 1
		bcopy((caddr_t)src, (caddr_t)&tp->tpt_param, sizeof(struct tp_param));
d161 1
a161 1
		bcopy((caddr_t)src, (caddr_t)&tp->tpt_ref, sizeof(struct tp_ref));
d167 2
a168 2
		bcopy((caddr_t)src, (caddr_t)&tp->tpt_tpdu,
		      (unsigned)MIN((int)len, sizeof(struct tp_Trace)));
d172 1
a172 1
#endif /* TPPT */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
