head	1.15;
access;
symbols
	SMP_SYNC_A:1.14
	SMP_SYNC_B:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	UBC_SYNC_A:1.11
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	UBC_SYNC_B:1.11
	UBC:1.9.0.4
	UBC_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_8:1.4.0.18
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.16
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.14
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.12
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.10
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2004.06.20.17.19.27;	author itojun;	state dead;
branches;
next	1.14;

1.14
date	2004.01.03.14.08.54;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.10.07.22.44;	author itojun;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.02.23.28.18;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.15.18.19.53;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.14.01.27.12;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.27.03.49.55;	author angelos;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2001.06.25.02.57.23;	author angelos;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.27.12.26.06;	author angelos;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.20.08.36.02;	author angelos;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.23.07.34.31;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	97.02.08.09.58.27;	author deraadt;	state Exp;
branches
	1.4.14.1;
next	1.3;

1.3
date	96.03.04.10.36.49;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	95.12.14.06.51.09;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.18;	author deraadt;	state Exp;
branches;
next	;

1.4.14.1
date	2001.05.14.22.40.22;	author niklas;	state Exp;
branches;
next	1.4.14.2;

1.4.14.2
date	2001.07.04.10.55.40;	author niklas;	state Exp;
branches;
next	1.4.14.3;

1.4.14.3
date	2002.03.28.14.57.38;	author niklas;	state Exp;
branches;
next	1.4.14.4;

1.4.14.4
date	2003.06.07.11.06.10;	author ho;	state Exp;
branches;
next	1.4.14.5;

1.4.14.5
date	2004.02.19.10.57.26;	author niklas;	state Exp;
branches;
next	;

1.9.4.1
date	2002.06.11.03.31.38;	author art;	state Exp;
branches;
next	;


desc
@@


1.15
log
@goodbye TUBA.  deraadt ok
@
text
@/*	$OpenBSD: tuba_subr.c,v 1.14 2004/01/03 14:08:54 espie Exp $	*/
/*	$NetBSD: tuba_subr.c,v 1.7 1996/02/13 22:12:32 christos Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)tuba_subr.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/protosw.h>
#include <sys/errno.h>

#include <net/route.h>
#include <net/if.h>

#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/in_pcb.h>
#include <netinet/ip_var.h>
#include <netinet/ip_icmp.h>
#include <netinet/tcp.h>
#include <netinet/tcp_fsm.h>
#include <netinet/tcp_seq.h>
#include <netinet/tcp_timer.h>
#include <netinet/tcp_var.h>
#include <netinet/tcpip.h>
#include <netinet/tcp_debug.h>

#include <netiso/argo_debug.h>
#include <netiso/iso.h>
#include <netiso/clnp.h>
#include <netiso/iso_pcb.h>
#include <netiso/iso_var.h>
#include <netiso/tuba_table.h>
#include <dev/rndvar.h>

#include <sys/stdarg.h>

static struct sockaddr_iso null_siso = {sizeof(null_siso), AF_ISO,};
extern int      tuba_table_size, tcp_keepidle, tcp_keepintvl, tcp_maxidle;
extern int      tcppcbcachemiss, tcppredack, tcppreddat, tcprexmtthresh;
extern struct tcpiphdr tcp_saveti;
struct inpcbtable tuba_inpcb;
struct isopcb   tuba_isopcb;

#ifndef TUBA_INPCBHASHSIZE
#define	TUBA_INPCBHASHSIZE	128
#endif
int	tuba_inpcbhashsize = TUBA_INPCBHASHSIZE;


struct addr_arg {
	int             error;
	int             offset;
	u_long          sum;
};

static void tuba_getaddr(struct addr_arg *, struct sockaddr_iso **,
			      u_long);
/*
 * Tuba initialization
 */
void
tuba_init()
{
#define TUBAHDRSIZE (3 /*LLC*/ + 9 /*CLNP Fixed*/ + 42 /*Addresses*/ \
		     + 6 /*CLNP Segment*/ + 20 /*TCP*/)

	in_pcbinit(&tuba_inpcb, tuba_inpcbhashsize);
	tuba_isopcb.isop_next = tuba_isopcb.isop_prev = &tuba_isopcb;
	tuba_isopcb.isop_faddr = &tuba_isopcb.isop_sfaddr;
	tuba_isopcb.isop_laddr = &tuba_isopcb.isop_sladdr;
	if (max_protohdr < TUBAHDRSIZE)
		max_protohdr = TUBAHDRSIZE;
	if (max_linkhdr + TUBAHDRSIZE > MHLEN)
		panic("tuba_init");
}

/*
 * Calculate contribution to fudge factor for TCP checksum,
 * and coincidentally set pointer for convenience of clnp_output
 * if we are are responding when there is no isopcb around.
 */
static void
tuba_getaddr(arg, siso, index)
	struct addr_arg *arg;
	struct sockaddr_iso **siso;
	u_long          index;
{
	struct tuba_cache *tc;
	if (index <= tuba_table_size && (tc = tuba_table[index])) {
		if (siso)
			*siso = &tc->tc_siso;
		arg->sum += (arg->offset & 1 ? tc->tc_ssum : tc->tc_sum)
			+ (0xffff ^ index);
		arg->offset += tc->tc_siso.siso_nlen + 1;
	} else
		arg->error = 1;
}

int
tuba_output(m, tp)
	struct mbuf *m;
	struct tcpcb   *tp;
{
	struct tcpiphdr *n;
	struct isopcb  *isop;
	struct addr_arg arg;

	if (tp == 0 || (n = tp->t_template) == 0 ||
	    (isop = (struct isopcb *) tp->t_tuba_pcb) == 0) {
		isop = &tuba_isopcb;
		n = mtod(m, struct tcpiphdr *);
		arg.error = arg.sum = arg.offset = 0;
		tuba_getaddr(&arg, &tuba_isopcb.isop_faddr, n->ti_dst.s_addr);
		tuba_getaddr(&arg, &tuba_isopcb.isop_laddr, n->ti_src.s_addr);
		REDUCE(arg.sum, arg.sum);
		goto adjust;
	}
	if (n->ti_sum == 0) {
		arg.error = arg.sum = arg.offset = 0;
		tuba_getaddr(&arg, (struct sockaddr_iso **) 0, n->ti_dst.s_addr);
		tuba_getaddr(&arg, (struct sockaddr_iso **) 0, n->ti_src.s_addr);
		REDUCE(arg.sum, arg.sum);
		n->ti_sum = arg.sum;
		n = mtod(m, struct tcpiphdr *);
adjust:
		if (arg.error) {
			m_freem(m);
			return (EADDRNOTAVAIL);
		}
		REDUCE(n->ti_sum, n->ti_sum + (0xffff ^ arg.sum));
	}
	m->m_len -= sizeof(struct ip);
	m->m_pkthdr.len -= sizeof(struct ip);
	m->m_data += sizeof(struct ip);
	return (clnp_output(m, isop, m->m_pkthdr.len, 0));
}

void
tuba_refcnt(isop, delta)
	struct isopcb  *isop;
	int delta;
{
	struct tuba_cache *tc;
	unsigned        index;

	if (delta != 1)
		delta = -1;
	if (isop == 0 || isop->isop_faddr == 0 || isop->isop_laddr == 0 ||
	    (delta == -1 && isop->isop_tuba_cached == 0) ||
	    (delta == 1 && isop->isop_tuba_cached != 0))
		return;
	isop->isop_tuba_cached = (delta == 1);
	if ((index = tuba_lookup(isop->isop_faddr, M_DONTWAIT)) != 0 &&
	 (tc = tuba_table[index]) != 0 && (delta == 1 || tc->tc_refcnt > 0))
		tc->tc_refcnt += delta;
	if ((index = tuba_lookup(isop->isop_laddr, M_DONTWAIT)) != 0 &&
	 (tc = tuba_table[index]) != 0 && (delta == 1 || tc->tc_refcnt > 0))
		tc->tc_refcnt += delta;
}

void
tuba_pcbdetach(v)
	void *v;
{
	struct isopcb  *isop = v;
	if (isop == 0)
		return;
	tuba_refcnt(isop, -1);
	isop->isop_socket = 0;
	iso_pcbdetach(isop);
}

/*
 * Avoid  in_pcbconnect in faked out tcp_input()
 */
int
tuba_pcbconnect(v, nam)
	void *v;
	struct mbuf    *nam;
{
	struct inpcb *inp = v;
	struct sockaddr_iso *siso;
	struct sockaddr_in *sin = mtod(nam, struct sockaddr_in *);
	struct tcpcb   *tp = intotcpcb(inp);
	struct isopcb  *isop = (struct isopcb *) tp->t_tuba_pcb;
	int             error;

	/* hardwire iso_pcbbind() here */
	siso = isop->isop_laddr = &isop->isop_sladdr;
	*siso = tuba_table[inp->inp_laddr.s_addr]->tc_siso;
	siso->siso_tlen = sizeof(inp->inp_lport);
	bcopy((caddr_t) & inp->inp_lport, TSEL(siso), sizeof(inp->inp_lport));

	/* hardwire in_pcbconnect() here without assigning route */
	inp->inp_fport = sin->sin_port;
	inp->inp_faddr = sin->sin_addr;

	/* reuse nam argument to call iso_pcbconnect() */
	nam->m_len = sizeof(*siso);
	siso = mtod(nam, struct sockaddr_iso *);
	*siso = tuba_table[inp->inp_faddr.s_addr]->tc_siso;
	siso->siso_tlen = sizeof(inp->inp_fport);
	bcopy((caddr_t) & inp->inp_fport, TSEL(siso), sizeof(inp->inp_fport));

	if ((error = iso_pcbconnect(isop, nam)) == 0)
		tuba_refcnt(isop, 1);
	return (error);
}

/*
 * CALLED FROM:
 * 	clnp's input routine, indirectly through the protosw.
 * FUNCTION and ARGUMENTS:
 * Take a packet (m) from clnp, strip off the clnp header
 * and do tcp input processing.
 * No return value.
 */
void
tuba_tcpinput(struct mbuf *m, ...)
{
	unsigned long   lindex, findex;
	struct tcpiphdr *ti;
	struct inpcb *inp;
	caddr_t         optp = NULL;
	int             optlen = 0;
	int             len, tlen, off;
	struct tcpcb *tp = 0;
	int             tiflags;
	struct socket  *so = NULL;
	int             todrop, acked, ourfinisacked, needoutput = 0;
	short           ostate = 0;
	struct in_addr  laddr;
	int             dropsocket = 0, iss = 0;
	u_long          tiwin;
	u_int32_t       ts_val, ts_ecr;
	int             ts_present = 0;
	struct sockaddr_iso *src, *dst;
	va_list 	ap;

	va_start(ap, m);
	src = va_arg(ap, struct sockaddr_iso *);
	dst = va_arg(ap, struct sockaddr_iso *);
	va_end(ap);


	if ((m->m_flags & M_PKTHDR) == 0)
		panic("tuba_tcpinput");
	/*
	 * Do some housekeeping looking up CLNP addresses.
	 * If we are out of space might as well drop the packet now.
	 */
	tcpstat.tcps_rcvtotal++;
	lindex = tuba_lookup(dst, M_DONTWAIT);
	findex = tuba_lookup(src, M_DONTWAIT);
	if (lindex == 0 || findex == 0)
		goto drop;
	/*
	 * CLNP gave us an mbuf chain WITH the clnp header pulled up,
	 * but the data pointer pushed past it.
	 */
	len = m->m_len;
	tlen = m->m_pkthdr.len;
	m->m_data -= sizeof(struct ip);
	m->m_len += sizeof(struct ip);
	m->m_pkthdr.len += sizeof(struct ip);
	m->m_flags &= ~(M_MCAST | M_BCAST);	/* XXX should do this in
						 * clnp_input */
	/*
	 * The reassembly code assumes it will be overwriting a useless
	 * part of the packet, which is why we need to have it point
	 * into the packet itself.
	 *
	 * Check to see if the data is properly alligned
	 * so that we can save copying the tcp header.
	 * This code knows way too much about the structure of mbufs!
	 */
	off = ((sizeof(long) - 1) & ((m->m_flags & M_EXT) ?
	       (m->m_data - m->m_ext.ext_buf) : (m->m_data - m->m_pktdat)));
	if (off || len < sizeof(struct tcphdr)) {
		struct mbuf    *m0 = m;

		MGETHDR(m, M_DONTWAIT, MT_DATA);
		if (m == 0) {
			m = m0;
			goto drop;
		}
		M_MOVE_PKTHDR(m, m0);
		m->m_next = m0;
		m->m_data += max_linkhdr;
		if (len < sizeof(struct tcphdr)) {
			m->m_len = 0;
			if ((m = m_pullup(m, sizeof(struct tcpiphdr))) == 0) {
				tcpstat.tcps_rcvshort++;
				return;
			}
		} else {
			bcopy(mtod(m0, caddr_t) + sizeof(struct ip),
			      mtod(m, caddr_t) + sizeof(struct ip),
			      sizeof(struct tcphdr));
			m0->m_len -= sizeof(struct tcpiphdr);
			m0->m_data += sizeof(struct tcpiphdr);
			m->m_len = sizeof(struct tcpiphdr);
		}
	}
	/*
	 * Calculate checksum of extended TCP header and data,
	 * replacing what would have been IP addresses by
	 * the IP checksum of the CLNP addresses.
	 */
	ti = mtod(m, struct tcpiphdr *);
	ti->ti_dst.s_addr = tuba_table[lindex]->tc_sum;
	if (dst->siso_nlen & 1)
		ti->ti_src.s_addr = tuba_table[findex]->tc_sum;
	else
		ti->ti_src.s_addr = tuba_table[findex]->tc_ssum;
	bzero(ti->ti_x1, sizeof ti->ti_x1);
	ti->ti_pr = ISOPROTO_TCP;
	ti->ti_len = htons((u_short) tlen);
	if ((ti->ti_sum = in_cksum(m, m->m_pkthdr.len)) != 0) {
		tcpstat.tcps_rcvbadsum++;
		goto drop;
	}
	ti->ti_src.s_addr = findex;
	ti->ti_dst.s_addr = lindex;
	/*
	 * Now include the rest of TCP input
	 */
#define TUBA_INCLUDE
#define	in_pcbconnect	tuba_pcbconnect
#define	tcb		tuba_inpcb

#include <netinet/tcp_input.c>
}

#define tcp_slowtimo	tuba_slowtimo
#define tcp_fasttimo	tuba_fasttimo

#include <netinet/tcp_timer.c>
@


1.14
log
@put an mi wrapper around stdarg.h/varargs.h. gcc3 moved stdarg/varargs macros
to built-ins, so eventually we will have one version of these files.
Special adjustments for the kernel to cope: machine/stdarg.h -> sys/stdarg.h
and machine/ansi.h needs to have a _BSD_VA_LIST_ for syslog* prototypes.
okay millert@@, drahn@@, miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.13 2003/12/10 07:22:44 itojun Exp $	*/
@


1.13
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.12 2003/06/02 23:28:18 millert Exp $	*/
d70 1
a70 1
#include <machine/stdarg.h>
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.11 2002/03/15 18:19:53 millert Exp $	*/
d119 1
a119 1
	register struct addr_arg *arg;
d123 1
a123 1
	register struct tuba_cache *tc;
d136 1
a136 1
	register struct mbuf *m;
d139 1
a139 1
	register struct tcpiphdr *n;
d178 1
a178 1
	register struct tuba_cache *tc;
d216 2
a217 2
	register struct inpcb *inp = v;
	register struct sockaddr_iso *siso;
d257 2
a258 2
	register struct tcpiphdr *ti;
	register struct inpcb *inp;
d262 1
a262 1
	register struct tcpcb *tp = 0;
@


1.11
log
@Kill #if __STDC__ used to do K&R vs. ANSI varargs/stdarg; just do things
the ANSI way.
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.10 2002/03/14 01:27:12 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.9 2001/06/27 03:49:55 angelos Exp $	*/
a257 1
#if __STDC__
a258 5
#else
tuba_tcpinput(m, va_alist)
	struct mbuf    *m;	/* ptr to first mbuf of pkt */
	va_dcl
#endif
@


1.9
log
@Get rid of M_COPY_* macros; either use M_MOVE_* or M_DUP_*, depending
on how macros should be treated. Code by fgsch@@, ok by me and itojun@@
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.8 2001/06/25 02:57:23 angelos Exp $	*/
d95 2
a96 2
static void tuba_getaddr __P((struct addr_arg *, struct sockaddr_iso **,
			      u_long));
@


1.9.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.9 2001/06/27 03:49:55 angelos Exp $	*/
d95 2
a96 2
static void tuba_getaddr(struct addr_arg *, struct sockaddr_iso **,
			      u_long);
d258 1
d260 5
@


1.8
log
@Don't double-clear M_PKTHDR/tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.7 2001/05/27 12:26:06 angelos Exp $	*/
d332 1
a332 1
		M_COPY_PKTHDR(m, m0);
@


1.7
log
@More tag fixups (why do I bother with this...)
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.6 2001/05/20 08:36:02 angelos Exp $	*/
a332 2
		m_tag_init(m0);
		m0->m_flags &= ~M_PKTHDR;
@


1.6
log
@Convert from tdbi to packet tags.
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.5 2001/03/23 07:34:31 angelos Exp $	*/
d333 2
a336 2
		m0->m_flags &= ~M_PKTHDR;
		TAILQ_INIT(&m0->m_pkthdr.tags);
@


1.5
log
@Use M_COPY_PKTHDR(), and zero out tdbi.
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.4 1997/02/08 09:58:27 deraadt Exp $	*/
d336 1
a336 1
		m0->m_pkthdr.tdbi = NULL;
@


1.4
log
@need arc4random proto
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d332 1
d335 2
a336 2
		m->m_pkthdr = m0->m_pkthdr;
		m->m_flags = m0->m_flags & M_COPYFLAGS;
@


1.4.14.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.5 2001/03/23 07:34:31 angelos Exp $	*/
a331 1
		M_COPY_PKTHDR(m, m0);
d334 2
a335 2
		m0->m_flags &= ~M_PKTHDR;
		m0->m_pkthdr.tdbi = NULL;
@


1.4.14.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.4.14.1 2001/05/14 22:40:22 niklas Exp $	*/
d332 1
a332 1
		M_MOVE_PKTHDR(m, m0);
d335 2
@


1.4.14.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d95 2
a96 2
static void tuba_getaddr(struct addr_arg *, struct sockaddr_iso **,
			      u_long);
d258 1
d260 5
@


1.4.14.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: tuba_subr.c,v 1.4.14.3 2002/03/28 14:57:38 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4.14.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d70 1
a70 1
#include <sys/stdarg.h>
d119 1
a119 1
	struct addr_arg *arg;
d123 1
a123 1
	struct tuba_cache *tc;
d136 1
a136 1
	struct mbuf *m;
d139 1
a139 1
	struct tcpiphdr *n;
d178 1
a178 1
	struct tuba_cache *tc;
d216 2
a217 2
	struct inpcb *inp = v;
	struct sockaddr_iso *siso;
d257 2
a258 2
	struct tcpiphdr *ti;
	struct inpcb *inp;
d262 1
a262 1
	struct tcpcb *tp = 0;
@


1.3
log
@Initial commit of NetBSD 960217 netiso.
all the rest is the fixes to the import by Niklas.
@
text
@d72 1
@


1.2
log
@from netbsd:
make netinet work on systems where pointers and longs are 64 bits
(like the alpha).  Biggest problem: IP headers were overlayed with
structure which included pointers, and which therefore didn't overlay
properly on 64-bit machines.  Solution: instead of threading pointers
through IP header overlays, add a "queue element" structure to do
the threading, and point it at the ip headers.
@
text
@d1 2
a2 1
/*	$NetBSD: tuba_subr.c,v 1.5 1995/11/21 01:07:54 cgd Exp $	*/
d73 23
a95 7
static	struct	sockaddr_iso null_siso = { sizeof(null_siso), AF_ISO, };
extern	int	tuba_table_size, tcp_keepidle, tcp_keepintvl, tcp_maxidle;
extern	int	tcppcbcachemiss, tcppredack, tcppreddat, tcprexmtthresh;
extern	struct	tcpiphdr tcp_saveti;
struct	inpcbtable	tuba_inpcb;
struct	inpcb	*tuba_last_inpcb = 0;
struct	isopcb	tuba_isopcb;
d105 1
a105 1
	in_pcbinit(&tuba_inpcb);
a114 6
struct addr_arg {
	int	error;
	int	offset;
	u_long	sum;
};

d124 1
a124 1
	u_long index;
d131 1
a131 1
				+ (0xffff ^ index);
d137 1
d140 1
a140 1
	struct tcpcb *tp;
d143 2
a144 2
	struct	isopcb *isop;
	struct	addr_arg arg;
d146 2
a147 2
	if (tp == 0 || (n = tp->t_template) == 0 || 
	    (isop = (struct isopcb *)tp->t_tuba_pcb) == 0) {
d158 2
a159 2
		tuba_getaddr(&arg, (struct sockaddr_iso **)0, n->ti_dst.s_addr);
		tuba_getaddr(&arg, (struct sockaddr_iso **)0, n->ti_src.s_addr);
d163 1
a163 1
	adjust:
d170 3
a172 3
	m->m_len -= sizeof (struct ip);
	m->m_pkthdr.len -= sizeof (struct ip);
	m->m_data += sizeof (struct ip);
d176 1
d178 2
a179 1
	struct isopcb *isop;
d182 1
a182 1
	unsigned index, sum;
d192 1
a192 1
	    (tc = tuba_table[index]) != 0 && (delta == 1 || tc->tc_refcnt > 0))
d195 1
a195 1
	    (tc = tuba_table[index]) != 0 && (delta == 1 || tc->tc_refcnt > 0))
d199 3
a201 2
tuba_pcbdetach(isop)
	struct isopcb *isop;
d203 1
d214 4
a217 3
tuba_pcbconnect(inp, nam)
	register struct inpcb *inp;
	struct mbuf *nam;
d219 1
d222 3
a224 3
	struct tcpcb *tp = intotcpcb(inp);
	struct isopcb *isop = (struct isopcb *)tp->t_tuba_pcb;
	int error;
d230 1
a230 1
	bcopy((caddr_t)&inp->inp_lport, TSEL(siso), sizeof(inp->inp_lport));
d241 1
a241 1
	bcopy((caddr_t)&inp->inp_fport, TSEL(siso), sizeof(inp->inp_fport));
d254 1
a254 1
 * No return value.  
d256 8
a263 3
tuba_tcpinput(m, src, dst)
	register struct mbuf *m;
	struct sockaddr_iso *src, *dst;
d265 1
a265 1
	unsigned long sum, lindex, findex;
d268 3
a270 3
	caddr_t optp = NULL;
	int optlen;
	int len, tlen, off;
d272 17
a288 9
	int tiflags;
	struct socket *so;
	int todrop, acked, ourfinisacked, needoutput = 0;
	short ostate;
	struct in_addr laddr;
	int dropsocket = 0, iss = 0;
	u_long tiwin;
	u_int32_t ts_val, ts_ecr;
	int ts_present = 0;
d310 2
a311 1
	m->m_flags &= ~(M_MCAST|M_BCAST); /* XXX should do this in clnp_input */
d321 2
a322 2
	off = ((sizeof (long) - 1) & ((m->m_flags & M_EXT) ?
		(m->m_data - m->m_ext.ext_buf) :  (m->m_data - m->m_pktdat)));
d324 1
a324 1
		struct mbuf *m0 = m;
d327 1
a327 1
		if (m == 0) { 
d363 2
a364 2
	ti->ti_len = htons((u_short)tlen);
	if (ti->ti_sum = in_cksum(m, m->m_pkthdr.len)) {
a375 1
#define tcp_last_inpcb	tuba_last_inpcb
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: tuba_subr.c,v 1.4 1995/06/13 07:58:24 mycroft Exp $	*/
d329 2
a330 2
	ti->ti_prev = ti->ti_next = 0;
	ti->ti_x1 = 0; ti->ti_pr = ISOPROTO_TCP;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
