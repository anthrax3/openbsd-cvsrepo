head	1.8;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.10
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.8
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.6
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.22
	OPENBSD_2_8:1.4.0.20
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.18
	OPENBSD_2_7_BASE:1.4
	SMP:1.4.0.16
	SMP_BASE:1.4
	kame_19991208:1.4
	OPENBSD_2_6:1.4.0.14
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.12
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.10
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.8
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.6
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2004.07.15.12.10.45;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2003.12.10.07.22.44;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.28.17;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.05.20.57.01;	author art;	state Exp;
branches;
next	1.4;

1.4
date	96.05.01.14.06.28;	author deraadt;	state Exp;
branches
	1.4.16.1;
next	1.3;

1.3
date	96.04.21.22.29.27;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.10.35.30;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.15;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.15;	author deraadt;	state Exp;
branches;
next	;

1.4.16.1
date	2001.07.04.10.55.35;	author niklas;	state Exp;
branches;
next	1.4.16.2;

1.4.16.2
date	2003.06.07.11.06.10;	author ho;	state Exp;
branches;
next	1.4.16.3;

1.4.16.3
date	2004.02.19.10.57.26;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.8
log
@bye bye netiso, you won't be missed
ok millert deraadt
@
text
@/*	$OpenBSD: iso_chksum.c,v 1.7 2003/12/10 07:22:44 itojun Exp $	*/
/*	$NetBSD: iso_chksum.c,v 1.8 1996/04/22 01:43:45 christos Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)iso_chksum.c	8.1 (Berkeley) 6/10/93
 */

/***********************************************************
		Copyright IBM Corporation 1987

                      All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of IBM not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

IBM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
IBM BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************/

/*
 * ARGO Project, Computer Sciences Dept., University of Wisconsin - Madison
 */
/*
 * ISO CHECKSUM
 *
 * The checksum generation and check routines are here. The checksum is 2 bytes
 * such that the sum of all the bytes b(i) == 0 and the sum of i * b(i) == 0.
 * The whole thing is complicated by the fact that the data are in mbuf
 * chains. Furthermore, there is the possibility of wraparound in the running
 * sums after adding up 4102 octets.  In order to avoid doing a mod operation
 * after EACH add, we have restricted this implementation to negotiating a
 * maximum of 4096-octets per TPDU (for the transport layer). The routine
 * iso_check_csum doesn't need to know where the checksum octets are. The
 * routine iso_gen_csum takes a pointer to an mbuf chain (logically a chunk
 * of data), an offset into the chunk at which the 2 octets are to be
 * stuffed, and the length of the chunk.  The 2 octets have to be logically
 * adjacent, but may be physically located in separate mbufs.
 */

#ifdef ISO
#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netiso/argo_debug.h>
#include <netiso/iso.h>
#include <netiso/iso_var.h>
#endif /* ISO */

/*
 * FUNCTION:	iso_check_csum
 *
 * PURPOSE:	To check the checksum of the packet in the mbuf chain (m).
 * 			The total length of the packet is (len).
 * 			Called from tp_input() and clnp_intr()
 *
 * RETURNS:	 TRUE (something non-zero) if there is a checksum error,
 * 		 FALSE if there was NO checksum error.
 *
 * SIDE EFFECTS:  none
 *
 * NOTES:	 It might be possible to gain something by optimizing
 *               this routine (unrolling loops, etc). But it is such
 *		 a horrible thing to fiddle with anyway, it probably
 *		 isn't worth it.
 */
int
iso_check_csum(m, len)
	struct mbuf    *m;
	int             len;
{
	u_char *p = mtod(m, u_char *);
	u_long c0 = 0, c1 = 0;
	int    i = 0;
	int             cum = 0;/* cumulative length */
	int             l;

	l = len;
	len = min(m->m_len, len);
	i = 0;

#ifdef ARGO_DEBUG
	if (argo_debug[D_CHKSUM]) {
		printf("iso_check_csum: m %p, l x%x, m->m_len x%x\n",
		       m, l, m->m_len);
	}
#endif

	while (i < l) {
		cum += len;
		while (i < cum) {
			c0 = c0 + *(p++);
			c1 += c0;
			i++;
		}
		if (i < l) {
			m = m->m_next;
#ifdef ARGO_DEBUG
			if (argo_debug[D_CHKSUM]) {
				printf("iso_check_csum: new mbuf\n");
				if (l - i < m->m_len)
					printf(
		       "bad mbuf chain in check csum l 0x%x i 0x%x m_data %p",
					       l, i, m->m_data);
			}
#endif
			ASSERT(m != NULL);
			len = min(m->m_len, l - i);
			p = mtod(m, u_char *);
		}
	}
	if (((int) c0 % 255) || ((int) c1 % 255)) {
#ifdef ARGO_DEBUG
		if (argo_debug[D_CHKSUM]) {
			printf("BAD iso_check_csum l 0x%x cum 0x%x len 0x%x, i 0x%x",
			       l, cum, len, i);
		}
#endif
		return ((int) c0 % 255) << 8 | ((int) c1 % 255);
	}
	return 0;
}

/*
 * FUNCTION:	iso_gen_csum
 *
 * PURPOSE:	To generate the checksum of the packet in the mbuf chain (m).
 * 		The first of the 2 (logically) adjacent checksum bytes
 *		(x and y) go at offset (n).
 * 		(n) is an offset relative to the beginning of the data,
 *		not the beginning of the mbuf.
 * 		(l) is the length of the total mbuf chain's data.
 * 		Called from tp_emit(), tp_error_emit()
 *		clnp_emit_er(), clnp_forward(), clnp_output().
 *
 * RETURNS:	Rien
 *
 * SIDE EFFECTS: Puts the 2 checksum bytes into the packet.
 *
 * NOTES:	Ditto the note for iso_check_csum().
 */

void
iso_gen_csum(m, n, l)
	struct mbuf    *m;
	int             n;	/* offset of 2 checksum bytes */
	int             l;
{
	u_char *p = mtod(m, u_char *);
	int    c0 = 0, c1 = 0;
	int    i = 0;
	int             loc = n++, len = 0;	/* n is position, loc is
						 * offset */
	u_char         *xloc = NULL;
	u_char         *yloc = NULL;
	int             cum = 0;/* cum == cumulative length */

#ifdef ARGO_DEBUG
	if (argo_debug[D_CHKSUM]) {
		printf("enter gen csum m %p n 0x%x l 0x%x\n", 
		       m, n - 1, l);
	}
#endif

	while (i < l) {
		len = min(m->m_len, PAGE_SIZE);
		/* RAH: don't cksum more than l bytes */
		len = min(len, l - i);

		cum += len;
		p = mtod(m, u_char *);

		if (loc >= 0) {
			if (loc < len) {
				xloc = loc + mtod(m, u_char *);
#ifdef ARGO_DEBUG
				if (argo_debug[D_CHKSUM]) {
					printf("1: zeroing xloc %p loc 0x%x\n",
					    xloc, loc);
				}
#endif
				*xloc = (u_char) 0;
				if (loc + 1 < len) {
					/*
					 * both xloc and yloc are in same
					 * mbuf
					 */
					yloc = 1 + xloc;
#ifdef ARGO_DEBUG
					if (argo_debug[D_CHKSUM]) {
						printf(
					"2: zeroing yloc %p loc 0x%x\n",
					yloc, loc);
					}
#endif
					*yloc = (u_char) 0;
				} else {
					/* crosses boundary of mbufs */
					yloc = mtod(m->m_next, u_char *);
#ifdef ARGO_DEBUG
					if (argo_debug[D_CHKSUM]) {
						printf(
					    "3: zeroing yloc %p \n", yloc);
					}
#endif
					*yloc = (u_char) 0;
				}
			}
			loc -= len;
		}
		while (i < cum) {
			c0 = (c0 + *p);
			c1 += c0;
			i++;
			p++;
		}
		m = m->m_next;
	}
#ifdef ARGO_DEBUG
	if (argo_debug[D_CHKSUM]) {
		printf("gen csum final xloc %p yloc %p\n", xloc, yloc);
	}
#endif

	c1 = (((c0 * (l - n)) - c1) % 255);
	*xloc = (u_char) ((c1 < 0) ? c1 + 255 : c1);

	c1 = (-(int) (c1 + c0)) % 255;
	*yloc = (u_char) (c1 < 0 ? c1 + 255 : c1);

#ifdef ARGO_DEBUG
	if (argo_debug[D_CHKSUM]) {
		printf("gen csum end \n");
	}
#endif
}

/*
 * FUNCTION:	m_datalen
 *
 * PURPOSE:	returns length of the mbuf chain.
 * 		used all over the iso code.
 *
 * RETURNS:	integer
 *
 * SIDE EFFECTS: none
 *
 * NOTES:
 */

int
m_datalen(m)
	struct mbuf *m;
{
	int    datalen;

	for (datalen = 0; m; m = m->m_next)
		datalen += m->m_len;
	return datalen;
}

int
m_compress(in, out)
	struct mbuf *in, **out;
{
	int    datalen = 0;
	int             s = splimp();

	if (in->m_next == NULL) {
		*out = in;
#ifdef ARGO_DEBUG
		if (argo_debug[D_REQUEST]) {
			printf("m_compress returning 0x%x: A\n", in->m_len);
		}
#endif
		splx(s);
		return in->m_len;
	}
	MGET((*out), M_DONTWAIT, MT_DATA);
	if ((*out) == NULL) {
		*out = in;
#ifdef ARGO_DEBUG
		if (argo_debug[D_REQUEST]) {
			printf("m_compress returning -1: B\n");
		}
#endif
		splx(s);
		return -1;
	}
	(*out)->m_len = 0;
	(*out)->m_act = NULL;

	while (in) {
#ifdef ARGO_DEBUG
		if (argo_debug[D_REQUEST]) {
			printf("m_compress in %p *out %p\n", in, *out);
			printf("m_compress in: len 0x%x, off %p\n",
				in->m_len, in->m_data);
			printf("m_compress *out: len 0x%x, off %p\n",
				(*out)->m_len, (*out)->m_data);
		}
#endif
		if (in->m_flags & M_EXT) {
			ASSERT(in->m_len == 0);
		}
		if (in->m_len == 0) {
			in = in->m_next;
			continue;
		}
		if (((*out)->m_flags & M_EXT) == 0) {
			int             len;

			len = M_TRAILINGSPACE(*out);
			len = min(len, in->m_len);
			datalen += len;

#ifdef ARGO_DEBUG
			if (argo_debug[D_REQUEST]) {
				printf("m_compress copying len %d\n", len);
			}
#endif
			bcopy(mtod(in, caddr_t), mtod((*out), caddr_t) + (*out)->m_len,
			      (unsigned) len);

			(*out)->m_len += len;
			in->m_len -= len;
			continue;
		} else {
			/* (*out) is full */
			if (((*out)->m_next = m_get(M_DONTWAIT, MT_DATA)) == NULL) {
				m_freem(*out);
				*out = in;
#ifdef ARGO_DEBUG
				if (argo_debug[D_REQUEST]) {
					printf("m_compress returning -1: B\n");
				}
#endif
				splx(s);
				return -1;
			}
			(*out)->m_len = 0;
			(*out)->m_act = NULL;
			*out = (*out)->m_next;
		}
	}
	m_freem(in);
#ifdef ARGO_DEBUG
	if (argo_debug[D_REQUEST]) {
		printf("m_compress returning 0x%x: A\n", datalen);
	}
#endif
	splx(s);
	return datalen;
}
@


1.7
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_chksum.c,v 1.6 2003/06/02 23:28:17 millert Exp $	*/
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_chksum.c,v 1.5 2001/05/05 20:57:01 art Exp $	*/
d111 3
a113 3
	register u_char *p = mtod(m, u_char *);
	register u_long c0 = 0, c1 = 0;
	register int    i = 0;
d188 3
a190 3
	register u_char *p = mtod(m, u_char *);
	register int    c0 = 0, c1 = 0;
	register int    i = 0;
d292 1
a292 1
	register struct mbuf *m;
d294 1
a294 1
	register int    datalen;
d303 1
a303 1
	register struct mbuf *in, **out;
d305 1
a305 1
	register int    datalen = 0;
@


1.5
log
@Get rid of CLSIZE and all related stuff.
CLSIZE -> 1
CLBYTES -> PAGE_SIZE
OLOFSET -> PAGE_MASK
etc.
At the same time some archs needed some cleaning in vmparam.h so that
goes in at the same time.
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_chksum.c,v 1.4 1996/05/01 14:06:28 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@from netbsd; fix a printf format string
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_chksum.c,v 1.3 1996/04/21 22:29:27 deraadt Exp $	*/
d209 1
a209 1
		len = min(m->m_len, CLBYTES);
@


1.4.16.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_chksum.c,v 1.4 1996/05/01 14:06:28 deraadt Exp $	*/
d209 1
a209 1
		len = min(m->m_len, PAGE_SIZE);
@


1.4.16.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: iso_chksum.c,v 1.4.16.1 2001/07/04 10:55:35 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.4.16.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d111 3
a113 3
	u_char *p = mtod(m, u_char *);
	u_long c0 = 0, c1 = 0;
	int    i = 0;
d188 3
a190 3
	u_char *p = mtod(m, u_char *);
	int    c0 = 0, c1 = 0;
	int    i = 0;
d292 1
a292 1
	struct mbuf *m;
d294 1
a294 1
	int    datalen;
d303 1
a303 1
	struct mbuf *in, **out;
d305 1
a305 1
	int    datalen = 0;
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d1 2
a2 2
/*	$OpenBSD: iso_chksum.c,v 1.2 1996/03/04 10:35:30 mickey Exp $	*/
/*	$NetBSD: iso_chksum.c,v 1.7 1996/04/13 01:34:52 cgd Exp $	*/
d221 1
a221 1
					printf("1: zeroing xloc %p loc %p\n",
@


1.2
log
@Initial commit of NetBSD 960217 netiso.
all the rest is the fixes to the import by Niklas.
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: iso_chksum.c,v 1.6 1996/02/13 22:10:01 christos Exp $	*/
d127 2
a128 2
		printf("iso_check_csum: m x%x, l x%x, m->m_len x%x\n",
		       (unsigned int) m, l, m->m_len);
d146 2
a147 2
		       "bad mbuf chain in check csum l 0x%x i 0x%x m_data 0x%x",
					       l, i, (unsigned int) m->m_data);
d203 2
a204 2
		printf("enter gen csum m 0x%x n 0x%x l 0x%x\n", 
		       (unsigned int) m, n - 1, l);
d221 2
a222 4
					printf(
				"1: zeroing xloc 0x%x loc 0x%x\n",
					(unsigned int) xloc,
					(unsigned int) loc);
d235 2
a236 2
					"2: zeroing yloc 0x%x loc 0x%x\n",
					(unsigned int) yloc, loc);
d246 1
a246 2
					    "3: zeroing yloc 0x%x \n",
					    (unsigned int) yloc);
d264 1
a264 2
		printf("gen csum final xloc 0x%x yloc 0x%x\n",
			(unsigned int) xloc, (unsigned int) yloc);
d339 5
a343 6
			printf("m_compress in 0x%x *out 0x%x\n", 
			       (unsigned int) in, (unsigned int) *out);
			printf("m_compress in: len 0x%x, off 0x%x\n",
				in->m_len, (unsigned int) in->m_data);
			printf("m_compress *out: len 0x%x, off 0x%x\n",
				(*out)->m_len, (unsigned int) (*out)->m_data);
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: iso_chksum.c,v 1.5 1994/06/29 06:39:43 cgd Exp $	*/
d44 2
a45 2
Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
d47 1
a47 1
both that copyright notice and this permission notice appear in 
d50 1
a50 1
software without specific, written prior permission.  
d65 1
a65 1
/* 
d68 2
a69 3
 * The checksum generation and check routines are here.
 * The checksum is 2 bytes such that the sum of all the bytes b(i) == 0
 * and the sum of i * b(i) == 0.
d71 9
a79 11
 * chains.
 * Furthermore, there is the possibility of wraparound in the running
 * sums after adding up 4102 octets.  In order to avoid doing a mod
 * operation after EACH add, we have restricted this implementation to 
 * negotiating a maximum of 4096-octets per TPDU (for the transport layer).
 * The routine iso_check_csum doesn't need to know where the checksum
 * octets are.
 * The routine iso_gen_csum takes a pointer to an mbuf chain (logically
 * a chunk of data), an offset into the chunk at which the 2 octets are to
 * be stuffed, and the length of the chunk.  The 2 octets have to be
 * logically adjacent, but may be physically located in separate mbufs.
a82 1
#include <netiso/argo_debug.h>
d86 5
a92 4
#ifndef MNULL
#define MNULL (struct mbuf *)0
#endif /* MNULL */

d96 3
a98 3
 * PURPOSE:		To check the checksum of the packet in the mbuf chain (m).
 * 				The total length of the packet is (len).
 * 				Called from tp_input() and clnp_intr()
d100 2
a101 2
 * RETURNS:		 TRUE (something non-zero) if there is a checksum error,
 * 			 	 FALSE if there was NO checksum error.
d105 1
a105 1
 * NOTES:		 It might be possible to gain something by optimizing
d107 2
a108 2
 *				 a horrible thing to fiddle with anyway, it probably
 *				 isn't worth it.
d110 1
a110 1
int 
d112 2
a113 2
	struct mbuf *m;
	int len;
d116 4
a119 4
	register u_long c0=0, c1=0;
	register int i=0;
	int cum = 0; /* cumulative length */
	int l;
d125 6
a130 3
	IFDEBUG(D_CHKSUM)
		printf("iso_check_csum: m x%x, l x%x, m->m_len x%x\n", m, l, m->m_len);
	ENDDEBUG
d132 1
a132 1
	while( i<l ) {
d134 1
a134 1
		while (i<cum) {
d139 1
a139 1
		if(i < l) {
d141 2
a142 1
			IFDEBUG(D_CHKSUM)
d144 1
a144 1
				if(l-i < m->m_len)
d146 6
a151 5
					"bad mbuf chain in check csum l 0x%x i 0x%x m_data 0x%x",
						l,i,m->m_data);
			ENDDEBUG
			ASSERT( m != MNULL);
			len = min( m->m_len, l-i);
d155 8
a162 6
	if ( ((int)c0 % 255) || ((int)c1 % 255) ) {
		IFDEBUG(D_CHKSUM)
			printf("BAD iso_check_csum l 0x%x cum 0x%x len 0x%x, i 0x%x", 
				l, cum, len, i);
		ENDDEBUG
		return ((int)c0 % 255)<<8 | ((int)c1 % 255);
d170 8
a177 8
 * PURPOSE:		To generate the checksum of the packet in the mbuf chain (m).
 * 				The first of the 2 (logically) adjacent checksum bytes 
 *				(x and y) go at offset (n).
 * 				(n) is an offset relative to the beginning of the data, 
 *				not the beginning of the mbuf.
 * 				(l) is the length of the total mbuf chain's data.
 * 				Called from tp_emit(), tp_error_emit()
 *				clnp_emit_er(), clnp_forward(), clnp_output().
d179 1
a179 1
 * RETURNS:		Rien
d183 1
a183 1
 * NOTES:		Ditto the note for iso_check_csum().
d187 4
a190 4
iso_gen_csum(m,n,l)
	struct mbuf *m;
	int n; /* offset of 2 checksum bytes */
	int l;
d193 14
a206 10
	register int c0=0, c1=0;
	register int i=0;
	int loc = n++, len=0; /* n is position, loc is offset */
	u_char *xloc;
	u_char *yloc;
	int cum=0;	/* cum == cumulative length */

	IFDEBUG(D_CHKSUM)
		printf("enter gen csum m 0x%x n 0x%x l 0x%x\n",m, n-1 ,l );
	ENDDEBUG
d208 1
a208 1
	while(i < l) {
d213 1
a213 1
		cum +=len;
d216 1
a216 1
		if(loc>=0) {
d219 23
a241 11
				IFDEBUG(D_CHKSUM)
					printf("1: zeroing xloc 0x%x loc 0x%x\n",xloc, loc );
				ENDDEBUG
				*xloc = (u_char)0;
				if (loc+1 < len) {
					/* both xloc and yloc are in same mbuf */
					yloc = 1  + xloc;
					IFDEBUG(D_CHKSUM)
						printf("2: zeroing yloc 0x%x loc 0x%x\n",yloc, loc );
					ENDDEBUG
					*yloc = (u_char)0;
d245 8
a252 4
					IFDEBUG(D_CHKSUM)
						printf("3: zeroing yloc 0x%x \n",yloc );
					ENDDEBUG
					*yloc = (u_char)0;
d257 1
a257 2

		while(i < cum) {
d259 2
a260 2
			c1 += c0 ;
			i++; 
d265 6
a270 3
	IFDEBUG(D_CHKSUM)
		printf("gen csum final xloc 0x%x yloc 0x%x\n",xloc, yloc );
	ENDDEBUG
d272 2
a273 2
	c1 = (((c0 * (l-n))-c1)%255) ;
	*xloc = (u_char) ((c1 < 0)? c1+255 : c1);
d275 2
a276 2
	c1 = (-(int)(c1+c0))%255;
	*yloc = (u_char) (c1 < 0? c1 + 255 : c1);
d278 2
a279 1
	IFDEBUG(D_CHKSUM)
d281 2
a282 1
	ENDDEBUG
d288 2
a289 2
 * PURPOSE:		returns length of the mbuf chain.
 * 				used all over the iso code.
d291 1
a291 1
 * RETURNS:		integer
d295 1
a295 1
 * NOTES:		
d299 1
a299 1
m_datalen (m)
d301 2
a302 2
{ 	
	register int datalen;
d313 2
a314 2
	register 	int datalen = 0;
	int	s = splimp();
d316 1
a316 1
	if( in->m_next == MNULL ) {
d318 2
a319 1
		IFDEBUG(D_REQUEST)
d321 2
a322 1
		ENDDEBUG
d327 1
a327 1
	if((*out) == MNULL) {
d329 2
a330 1
		IFDEBUG(D_REQUEST)
d332 2
a333 1
		ENDDEBUG
d335 1
a335 1
		return -1; 
d338 1
a338 1
	(*out)->m_act = MNULL;
d341 10
a350 6
		IFDEBUG(D_REQUEST)
			printf("m_compress in 0x%x *out 0x%x\n", in, *out);
			printf("m_compress in: len 0x%x, off 0x%x\n", in->m_len, in->m_data);
			printf("m_compress *out: len 0x%x, off 0x%x\n", (*out)->m_len, 
				(*out)->m_data);
		ENDDEBUG
d354 1
a354 1
		if ( in->m_len == 0) {
d359 1
a359 1
			int len;
d365 2
a366 1
			IFDEBUG(D_REQUEST)
d368 2
a369 1
			ENDDEBUG
d371 1
a371 1
						(unsigned)len);
d378 1
a378 1
			if(( (*out)->m_next = m_get(M_DONTWAIT, MT_DATA) ) == MNULL) {
d381 2
a382 1
				IFDEBUG(D_REQUEST)
d384 2
a385 1
				ENDDEBUG
d390 1
a390 1
			(*out)->m_act = MNULL;
d395 2
a396 1
	IFDEBUG(D_REQUEST)
d398 2
a399 1
	ENDDEBUG
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
