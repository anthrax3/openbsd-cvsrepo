head	1.8;
access;
symbols
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2004.07.15.12.10.45;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2004.01.03.14.08.54;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.10.07.22.43;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.28.23.17.45;	author cloder;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.23.28.17;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.15.18.19.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.10.35.06;	author mickey;	state Exp;
branches
	1.2.16.1
	1.2.26.1;
next	1.1;

1.1
date	95.10.18.08.53.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.14;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2002.03.28.14.57.37;	author niklas;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.06.07.11.06.10;	author ho;	state Exp;
branches;
next	1.2.16.3;

1.2.16.3
date	2004.02.19.10.57.26;	author niklas;	state Exp;
branches;
next	;

1.2.26.1
date	2002.06.11.03.31.38;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@bye bye netiso, you won't be missed
ok millert deraadt
@
text
@/*	$OpenBSD: cltp_usrreq.c,v 1.7 2004/01/03 14:08:54 espie Exp $	*/
/*	$NetBSD: cltp_usrreq.c,v 1.9 1996/02/13 22:08:59 christos Exp $	*/

/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)cltp_usrreq.c	8.1 (Berkeley) 6/10/93
 */

#ifndef CLTPOVAL_SRC		/* XXX -- till files gets changed */
#include <sys/param.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/errno.h>
#include <sys/stat.h>
#include <sys/systm.h>

#include <net/if.h>
#include <net/route.h>

#include <netiso/argo_debug.h>
#include <netiso/iso.h>
#include <netiso/iso_pcb.h>
#include <netiso/iso_var.h>
#include <netiso/clnp.h>
#include <netiso/cltp_var.h>
#include <netiso/tp_param.h>
#include <netiso/tp_var.h>

#include <sys/stdarg.h>
#endif


/*
 * CLTP protocol implementation.
 * Per ISO 8602, December, 1987.
 */
void
cltp_init()
{

	cltb.isop_next = cltb.isop_prev = &cltb;
}

int             cltp_cksum = 1;


/* ARGUSED */
void
cltp_input(struct mbuf *m0, ...)
{
	struct sockaddr *srcsa, *dstsa;
	u_int           cons_channel;
	struct isopcb *isop;
	struct mbuf *m = m0;
	u_char *up = mtod(m, u_char *);
	struct sockaddr_iso *src;
	int             len, hdrlen = *up + 1, dlen = 0;
	u_char         *uplim = up + hdrlen;
	caddr_t         dtsap = NULL;
	va_list ap;

	va_start(ap, m0);
	srcsa = va_arg(ap, struct sockaddr *);
	dstsa = va_arg(ap, struct sockaddr *);
	cons_channel = va_arg(ap, int);
	va_end(ap);
	src = satosiso(srcsa);

	for (len = 0; m; m = m->m_next)
		len += m->m_len;
	up += 2;		/* skip header */
	while (up < uplim)
		switch (*up) {	/* process options */
		case CLTPOVAL_SRC:
			src->siso_tlen = up[1];
			src->siso_len = up[1] + TSEL(src) - (caddr_t) src;
			if (src->siso_len < sizeof(*src))
				src->siso_len = sizeof(*src);
			else if (src->siso_len > sizeof(*src)) {
				MGET(m, M_DONTWAIT, MT_SONAME);
				if (m == 0)
					goto bad;
				m->m_len = src->siso_len;
				src = mtod(m, struct sockaddr_iso *);
				bcopy((caddr_t) srcsa, (caddr_t) src, srcsa->sa_len);
			}
			bcopy((caddr_t) up + 2, TSEL(src), up[1]);
			up += 2 + src->siso_tlen;
			continue;

		case CLTPOVAL_DST:
			dtsap = 2 + (caddr_t) up;
			dlen = up[1];
			up += 2 + dlen;
			continue;

		case CLTPOVAL_CSM:
			if (iso_check_csum(m0, len)) {
				cltpstat.cltps_badsum++;
				goto bad;
			}
			up += 4;
			continue;

		default:
			printf("clts: unknown option (%x)\n", up[0]);
			cltpstat.cltps_hdrops++;
			goto bad;
		}
	if (dlen == 0 || src->siso_tlen == 0)
		goto bad;
	for (isop = cltb.isop_next;; isop = isop->isop_next) {
		if (isop == &cltb) {
			cltpstat.cltps_noport++;
			goto bad;
		}
		if (isop->isop_laddr &&
		    bcmp(TSEL(isop->isop_laddr), dtsap, dlen) == 0)
			break;
	}
	m = m0;
	m->m_len -= hdrlen;
	m->m_data += hdrlen;
	if (sbappendaddr(&isop->isop_socket->so_rcv, sisotosa(src), m,
			 (struct mbuf *) 0) == 0)
		goto bad;
	cltpstat.cltps_ipackets++;
	sorwakeup(isop->isop_socket);
	m0 = 0;
bad:
	if (src != satosiso(srcsa))
		m_freem(dtom(src));
	if (m0)
		m_freem(m0);
}

/*
 * Notify a cltp user of an asynchronous error;
 * just wake up so that he can collect error status.
 */
void
cltp_notify(isop)
	struct isopcb *isop;
{

	sorwakeup(isop->isop_socket);
	sowwakeup(isop->isop_socket);
}

void
cltp_ctlinput(cmd, sa, dummy)
	int             cmd;
	struct sockaddr *sa;
	void *dummy;
{
	extern u_char   inetctlerrmap[];
	struct sockaddr_iso *siso;

	if ((unsigned) cmd >= PRC_NCMDS)
		return;
	if (sa->sa_family != AF_ISO && sa->sa_family != AF_CCITT)
		return;
	siso = satosiso(sa);
	if (siso == 0 || siso->siso_nlen == 0)
		return;

	switch (cmd) {
	case PRC_ROUTEDEAD:
	case PRC_REDIRECT_NET:
	case PRC_REDIRECT_HOST:
	case PRC_REDIRECT_TOSNET:
	case PRC_REDIRECT_TOSHOST:
		iso_pcbnotify(&cltb, siso,
			      (int) inetctlerrmap[cmd], iso_rtchange);
		break;

	default:
		if (inetctlerrmap[cmd] == 0)
			return;	/* XXX */
		iso_pcbnotify(&cltb, siso, (int) inetctlerrmap[cmd],
			      cltp_notify);
	}
}

int
cltp_output(struct mbuf *m, ...)
{
	struct isopcb *isop;
	int    len;
	struct sockaddr_iso *siso;
	int             hdrlen, error = 0, docsum;
	u_char *up;
	va_list ap;

	va_start(ap, m);
	isop = va_arg(ap, struct isopcb *);
	va_end(ap);

	if (isop->isop_laddr == 0 || isop->isop_faddr == 0) {
		error = ENOTCONN;
		goto bad;
	}
	/*
	 * Calculate data length and get a mbuf for CLTP header.
	 */
	hdrlen = 2 + 2 + isop->isop_laddr->siso_tlen
		+ 2 + isop->isop_faddr->siso_tlen;
	docsum = /* isop->isop_flags & CLNP_NO_CKSUM */ cltp_cksum;
	if (docsum)
		hdrlen += 4;
	M_PREPEND(m, hdrlen, M_WAIT);
	len = m->m_pkthdr.len;
	/*
	 * Fill in mbuf with extended CLTP header
	 */
	up = mtod(m, u_char *);
	up[0] = hdrlen - 1;
	up[1] = UD_TPDU_type;
	up[2] = CLTPOVAL_SRC;
	up[3] = (siso = isop->isop_laddr)->siso_tlen;
	up += 4;
	bcopy(TSEL(siso), (caddr_t) up, siso->siso_tlen);
	up += siso->siso_tlen;
	up[0] = CLTPOVAL_DST;
	up[1] = (siso = isop->isop_faddr)->siso_tlen;
	up += 2;
	bcopy(TSEL(siso), (caddr_t) up, siso->siso_tlen);
	/*
	 * Stuff checksum and output datagram.
	 */
	if (docsum) {
		up += siso->siso_tlen;
		up[0] = CLTPOVAL_CSM;
		up[1] = 2;
		iso_gen_csum(m, 2 + up - mtod(m, u_char *), len);
	}
	cltpstat.cltps_opackets++;
	return (tpclnp_output(m, len, isop, !docsum));
bad:
	m_freem(m);
	return (error);
}

u_long          cltp_sendspace = 9216;	/* really max datagram size */
u_long          cltp_recvspace = 40 * (1024 + sizeof(struct sockaddr_iso));
/* 40 1K datagrams */


/* ARGSUSED */
int
cltp_usrreq(so, req, m, nam, control)
	struct socket  *so;
	int             req;
	struct mbuf    *m, *nam, *control;
{
	struct isopcb *isop = sotoisopcb(so);
	int             s = 0, error = 0;

	if (req == PRU_CONTROL)
		return (iso_control(so, (long) m, (caddr_t) nam,
				    (struct ifnet *) control));
	if ((isop == NULL && req != PRU_ATTACH) ||
	    (control && control->m_len)) {
		error = EINVAL;
		goto release;
	}
	switch (req) {

	case PRU_ATTACH:
		if (isop != NULL) {
			error = EINVAL;
			break;
		}
		error = iso_pcballoc(so, &cltb);
		if (error)
			break;
		error = soreserve(so, cltp_sendspace, cltp_recvspace);
		if (error)
			break;
		break;

	case PRU_DETACH:
		iso_pcbdetach(isop);
		break;

	case PRU_BIND:
		error = iso_pcbbind(isop, nam);
		break;

	case PRU_LISTEN:
		error = EOPNOTSUPP;
		break;

	case PRU_CONNECT:
		if (isop->isop_faddr) {
			error = EISCONN;
			break;
		}
		error = iso_pcbconnect(isop, nam);
		if (error == 0)
			soisconnected(so);
		break;

	case PRU_CONNECT2:
		error = EOPNOTSUPP;
		break;

	case PRU_ACCEPT:
		error = EOPNOTSUPP;
		break;

	case PRU_DISCONNECT:
		if (isop->isop_faddr == 0) {
			error = ENOTCONN;
			break;
		}
		iso_pcbdisconnect(isop);
		so->so_state &= ~SS_ISCONNECTED;	/* XXX */
		break;

	case PRU_SHUTDOWN:
		socantsendmore(so);
		break;

	case PRU_SEND:
		if (nam) {
			if (isop->isop_faddr) {
				error = EISCONN;
				break;
			}
			/*
			 * Must block input while temporarily connected.
			 */
			s = splsoftnet();
			error = iso_pcbconnect(isop, nam);
			if (error) {
				splx(s);
				break;
			}
		} else {
			if (isop->isop_faddr == 0) {
				error = ENOTCONN;
				break;
			}
		}
		error = cltp_output(m, isop);
		m = 0;
		if (nam) {
			iso_pcbdisconnect(isop);
			splx(s);
		}
		break;

	case PRU_ABORT:
		soisdisconnected(so);
		iso_pcbdetach(isop);
		break;

	case PRU_SOCKADDR:
		if (isop->isop_laddr)
			bcopy((caddr_t) isop->isop_laddr, mtod(m, caddr_t),
			      nam->m_len = isop->isop_laddr->siso_len);
		break;

	case PRU_PEERADDR:
		if (isop->isop_faddr)
			bcopy((caddr_t) isop->isop_faddr, mtod(m, caddr_t),
			      nam->m_len = isop->isop_faddr->siso_len);
		break;

	case PRU_SENSE:
		/*
		 * stat: don't bother with a blocksize.
		 */
		return (0);

	case PRU_SENDOOB:
	case PRU_FASTTIMO:
	case PRU_SLOWTIMO:
	case PRU_PROTORCV:
	case PRU_PROTOSEND:
		error = EOPNOTSUPP;
		break;

	case PRU_RCVD:
	case PRU_RCVOOB:
		return (EOPNOTSUPP);	/* do not free mbuf's */

	default:
		panic("cltp_usrreq");
	}
release:
	if (control != NULL)
		m_freem(control);
	if (m != NULL)
		m_freem(m);
	return (error);
}
@


1.7
log
@put an mi wrapper around stdarg.h/varargs.h. gcc3 moved stdarg/varargs macros
to built-ins, so eventually we will have one version of these files.
Special adjustments for the kernel to cope: machine/stdarg.h -> sys/stdarg.h
and machine/ansi.h needs to have a _BSD_VA_LIST_ for syslog* prototypes.
okay millert@@, drahn@@, miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: cltp_usrreq.c,v 1.6 2003/12/10 07:22:43 itojun Exp $	*/
@


1.6
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: cltp_usrreq.c,v 1.5 2003/09/28 23:17:45 cloder Exp $	*/
d58 1
a58 1
#include <machine/stdarg.h>
@


1.5
log
@Correct off-by-ones with respect to PRC_NCMDS.  Mostly from FreeBSD.
OK krw@@, deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cltp_usrreq.c,v 1.4 2003/06/02 23:28:17 millert Exp $	*/
d82 4
a85 4
	register struct isopcb *isop;
	register struct mbuf *m = m0;
	register u_char *up = mtod(m, u_char *);
	register struct sockaddr_iso *src;
d172 1
a172 1
	register struct isopcb *isop;
d217 3
a219 3
	register struct isopcb *isop;
	register int    len;
	register struct sockaddr_iso *siso;
d221 1
a221 1
	register u_char *up;
d285 1
a285 1
	register struct isopcb *isop = sotoisopcb(so);
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cltp_usrreq.c,v 1.3 2002/03/15 18:19:53 millert Exp $	*/
d188 1
a188 1
	if ((unsigned) cmd > PRC_NCMDS)
@


1.3
log
@Kill #if __STDC__ used to do K&R vs. ANSI varargs/stdarg; just do things
the ANSI way.
@
text
@d1 1
a1 1
/*	$OpenBSD: cltp_usrreq.c,v 1.2 1996/03/04 10:35:06 mickey Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@Initial commit of NetBSD 960217 netiso.
all the rest is the fixes to the import by Niklas.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a81 1
#if __STDC__
a82 5
#else
cltp_input(m0, va_alist)
	struct mbuf    *m0;
	va_dcl
#endif
a218 1
#if __STDC__
a219 5
#else
cltp_output(m, va_alist)
	struct mbuf *m;
	va_dcl
#endif
@


1.2.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cltp_usrreq.c,v 1.2 1996/03/04 10:35:06 mickey Exp $	*/
d82 1
d84 5
d225 1
d227 5
@


1.2.16.1
log
@Merge in -current from roughly a week ago
@
text
@d82 1
d84 5
d225 1
d227 5
@


1.2.16.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: cltp_usrreq.c,v 1.2.16.1 2002/03/28 14:57:37 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2.16.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 1
a58 1
#include <sys/stdarg.h>
d82 4
a85 4
	struct isopcb *isop;
	struct mbuf *m = m0;
	u_char *up = mtod(m, u_char *);
	struct sockaddr_iso *src;
d172 1
a172 1
	struct isopcb *isop;
d188 1
a188 1
	if ((unsigned) cmd >= PRC_NCMDS)
d217 3
a219 3
	struct isopcb *isop;
	int    len;
	struct sockaddr_iso *siso;
d221 1
a221 1
	u_char *up;
d285 1
a285 1
	struct isopcb *isop = sotoisopcb(so);
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: cltp_usrreq.c,v 1.8 1995/08/12 23:59:46 mycroft Exp $	*/
d39 1
a39 1
#ifndef CLTPOVAL_SRC /* XXX -- till files gets changed */
d48 1
d59 4
d65 1
d77 1
a77 1
int cltp_cksum = 1;
d82 8
a89 2
cltp_input(m0, srcsa, dstsa, cons_channel, output)
	struct mbuf *m0;
d91 1
a91 3
	u_int cons_channel;
	int (*output)();
{
d95 12
a106 4
	register struct sockaddr_iso *src = satosiso(srcsa);
	int len, hdrlen = *up + 1, dlen = 0;
	u_char *uplim = up + hdrlen;
	caddr_t dtsap;
d110 29
a138 10
	up += 2; /* skip header */
	while (up < uplim) switch (*up) { /* process options */
	case CLTPOVAL_SRC:
		src->siso_tlen = up[1];
		src->siso_len = up[1] + TSEL(src) - (caddr_t)src;
		if (src->siso_len < sizeof(*src))
			src->siso_len = sizeof(*src);
		else if (src->siso_len > sizeof(*src)) {
			MGET(m, M_DONTWAIT, MT_SONAME);
			if (m == 0)
d140 7
a146 17
			m->m_len = src->siso_len;
			src = mtod(m, struct sockaddr_iso *);
			bcopy((caddr_t)srcsa, (caddr_t)src, srcsa->sa_len);
		}
		bcopy((caddr_t)up + 2, TSEL(src), up[1]);
		up += 2 + src->siso_tlen;
		continue;
	
	case CLTPOVAL_DST:
		dtsap = 2 + (caddr_t)up;
		dlen = up[1];
		up += 2 + dlen;
		continue;

	case CLTPOVAL_CSM:
		if (iso_check_csum(m0, len)) {
			cltpstat.cltps_badsum++;
a148 8
		up += 4;
		continue;

	default:
		printf("clts: unknown option (%x)\n", up[0]);
		cltpstat.cltps_hdrops++;
		goto bad;
	}
d164 1
a164 1
	    (struct mbuf *)0) == 0)
d180 1
d190 2
a191 2
cltp_ctlinput(cmd, sa)
	int cmd;
d193 1
d195 1
a195 1
	extern u_char inetctlerrmap[];
a196 1
	int iso_rtchange();
d198 1
a198 1
	if ((unsigned)cmd > PRC_NCMDS)
d213 1
a213 1
				(int)inetctlerrmap[cmd], iso_rtchange);
d218 3
a220 3
			return;		/* XXX */
		iso_pcbnotify(&cltb, siso, (int)inetctlerrmap[cmd],
			cltp_notify);
d224 9
a232 1
cltp_output(isop, m)
d234 1
a234 3
	register struct mbuf *m;
{
	register int len;
d236 1
a236 1
	int hdrlen, error = 0, docsum;
d238 5
d252 3
a254 2
		   + 2 + isop->isop_faddr->siso_tlen;
	if (docsum = /*isop->isop_flags & CLNP_NO_CKSUM*/ cltp_cksum)
d267 1
a267 1
	bcopy(TSEL(siso), (caddr_t)up, siso->siso_tlen);
d272 1
a272 1
	bcopy(TSEL(siso), (caddr_t)up, siso->siso_tlen);
d283 1
a283 1
	return (tpclnp_output(isop, m, len, !docsum));
d289 3
a291 3
u_long	cltp_sendspace = 9216;		/* really max datagram size */
u_long	cltp_recvspace = 40 * (1024 + sizeof(struct sockaddr_iso));
					/* 40 1K datagrams */
d294 2
a295 1
/*ARGSUSED*/
d297 3
a299 3
	struct socket *so;
	int req;
	struct mbuf *m, *nam, *control;
d302 1
a302 1
	int s, error = 0;
d305 2
a306 2
		return (iso_control(so, (long)m, (caddr_t)nam,
			(struct ifnet *)control));
d363 1
a363 1
		so->so_state &= ~SS_ISCONNECTED;		/* XXX */
d391 1
a391 1
		error = cltp_output(isop, m);
d406 2
a407 2
			bcopy((caddr_t)isop->isop_laddr, mtod(m, caddr_t),
				nam->m_len = isop->isop_laddr->siso_len);
d412 2
a413 2
			bcopy((caddr_t)isop->isop_faddr, mtod(m, caddr_t),
				nam->m_len = isop->isop_faddr->siso_len);
d427 1
a427 1
		error =  EOPNOTSUPP;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
