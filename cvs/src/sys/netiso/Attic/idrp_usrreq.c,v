head	1.7;
access;
symbols
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2004.07.15.12.10.45;	author henning;	state dead;
branches;
next	1.6;

1.6
date	2004.01.03.14.08.54;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.10.07.22.43;	author itojun;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.02.23.28.17;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.15.18.19.53;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.10.35.20;	author mickey;	state Exp;
branches
	1.2.16.1
	1.2.26.1;
next	1.1;

1.1
date	95.10.18.08.53.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.14;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2002.03.28.14.57.37;	author niklas;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.06.07.11.06.10;	author ho;	state Exp;
branches;
next	1.2.16.3;

1.2.16.3
date	2004.02.19.10.57.26;	author niklas;	state Exp;
branches;
next	;

1.2.26.1
date	2002.06.11.03.31.38;	author art;	state Exp;
branches;
next	;


desc
@@


1.7
log
@bye bye netiso, you won't be missed
ok millert deraadt
@
text
@/*	$OpenBSD: idrp_usrreq.c,v 1.6 2004/01/03 14:08:54 espie Exp $	*/
/*	$NetBSD: idrp_usrreq.c,v 1.5 1996/02/13 22:09:33 christos Exp $	*/

/*
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)idrp_usrreq.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/proc.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/protosw.h>
#include <sys/errno.h>

#include <net/route.h>
#include <net/if.h>

#include <netiso/argo_debug.h>
#include <netiso/iso.h>
#include <netiso/clnp.h>
#include <netiso/clnl.h>
#include <netiso/iso_pcb.h>
#include <netiso/iso_var.h>
#include <netiso/idrp_var.h>

#include <sys/stdarg.h>

struct isopcb   idrp_isop;
static struct sockaddr_iso idrp_addrs[2] =
{{sizeof(idrp_addrs), AF_ISO,}, {sizeof(idrp_addrs[1]), AF_ISO,}};

/*
 * IDRP initialization
 */
void
idrp_init()
{
	extern struct clnl_protosw clnl_protox[256];

	idrp_isop.isop_next = idrp_isop.isop_prev = &idrp_isop;
	idrp_isop.isop_faddr = &idrp_isop.isop_sfaddr;
	idrp_isop.isop_laddr = &idrp_isop.isop_sladdr;
	idrp_isop.isop_sladdr = idrp_addrs[1];
	idrp_isop.isop_sfaddr = idrp_addrs[1];
	clnl_protox[ISO10747_IDRP].clnl_input = idrp_input;
}

/*
 * CALLED FROM:
 * 	tpclnp_input().
 * FUNCTION and ARGUMENTS:
 * Take a packet (m) from clnp, strip off the clnp header
 * and mke suitable for the idrp socket.
 * No return value.
 */
void
idrp_input(struct mbuf *m, ...)
{
	struct sockaddr_iso *src, *dst;
	va_list ap;

	va_start(ap, m);
	src = va_arg(ap, struct sockaddr_iso *);
	dst = va_arg(ap, struct sockaddr_iso *);
	va_end(ap);

	if (idrp_isop.isop_socket == 0) {
bad:		m_freem(m);
		return;
	}
	bzero(idrp_addrs[0].siso_data, sizeof(idrp_addrs[0].siso_data));
	bcopy((caddr_t) & (src->siso_addr), (caddr_t) & idrp_addrs[0].siso_addr,
	      1 + src->siso_nlen);
	bzero(idrp_addrs[1].siso_data, sizeof(idrp_addrs[1].siso_data));
	bcopy((caddr_t) & (dst->siso_addr), (caddr_t) & idrp_addrs[1].siso_addr,
	      1 + dst->siso_nlen);
	if (sbappendaddr(&idrp_isop.isop_socket->so_rcv,
			 sisotosa(idrp_addrs), m, (struct mbuf *) 0) == 0)
		goto bad;
	sorwakeup(idrp_isop.isop_socket);
}

int
idrp_output(struct mbuf *m, ...)
{
	struct mbuf *addr;
	struct sockaddr_iso *siso;
	int             s = splsoftnet(), i;
	va_list ap;
	va_start(ap, m);
	addr = va_arg(ap, struct mbuf *);
	va_end(ap);
	siso = mtod(addr, struct sockaddr_iso *);

	bcopy((caddr_t) & (siso->siso_addr),
	  (caddr_t) & idrp_isop.isop_sfaddr.siso_addr, 1 + siso->siso_nlen);
	siso++;
	bcopy((caddr_t) & (siso->siso_addr),
	  (caddr_t) & idrp_isop.isop_sladdr.siso_addr, 1 + siso->siso_nlen);
	i = clnp_output(m, idrp_isop, m->m_pkthdr.len, 0);
	splx(s);
	return (i);
}

u_long          idrp_sendspace = 3072;	/* really max datagram size */
u_long          idrp_recvspace = 40 * 1024;	/* 40 1K datagrams */

/* ARGSUSED */
int
idrp_usrreq(so, req, m, addr, control)
	struct socket  *so;
	int             req;
	struct mbuf    *m, *addr, *control;
{
	int             error = 0;

	/*
	 * Note: need to block idrp_input while changing the udp pcb queue
	 * and/or pcb addresses.
	 */
	switch (req) {

	case PRU_ATTACH:
		if (idrp_isop.isop_socket != NULL) {
			error = ENXIO;
			break;
		}
		idrp_isop.isop_socket = so;
		error = soreserve(so, idrp_sendspace, idrp_recvspace);
		break;

	case PRU_SHUTDOWN:
		socantsendmore(so);
		break;

	case PRU_SEND:
		return (idrp_output(m, addr));

	case PRU_ABORT:
		soisdisconnected(so);
	case PRU_DETACH:
		idrp_isop.isop_socket = 0;
		break;


	case PRU_SENSE:
		/*
		 * stat: don't bother with a blocksize.
		 */
		return (0);

	default:
		return (EOPNOTSUPP);	/* do not free mbuf's */
	}

	if (control) {
		printf("idrp control data unexpectedly retained\n");
		m_freem(control);
	}
	if (m)
		m_freem(m);
	return (error);
}
@


1.6
log
@put an mi wrapper around stdarg.h/varargs.h. gcc3 moved stdarg/varargs macros
to built-ins, so eventually we will have one version of these files.
Special adjustments for the kernel to cope: machine/stdarg.h -> sys/stdarg.h
and machine/ansi.h needs to have a _BSD_VA_LIST_ for syslog* prototypes.
okay millert@@, drahn@@, miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: idrp_usrreq.c,v 1.5 2003/12/10 07:22:43 itojun Exp $	*/
@


1.5
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: idrp_usrreq.c,v 1.4 2003/06/02 23:28:17 millert Exp $	*/
d56 1
a56 1
#include <machine/stdarg.h>
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: idrp_usrreq.c,v 1.3 2002/03/15 18:19:53 millert Exp $	*/
d117 1
a117 1
	register struct sockaddr_iso *siso;
@


1.3
log
@Kill #if __STDC__ used to do K&R vs. ANSI varargs/stdarg; just do things
the ANSI way.
@
text
@d1 1
a1 1
/*	$OpenBSD: idrp_usrreq.c,v 1.2 1996/03/04 10:35:20 mickey Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2
log
@Initial commit of NetBSD 960217 netiso.
all the rest is the fixes to the import by Niklas.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a90 1
#if __STDC__
a91 5
#else
idrp_input(m, va_alist)
	struct mbuf *m;
	va_dcl
#endif
a117 1
#if __STDC__
a118 5
#else
idrp_output(m, va_alist)
	struct mbuf    *m;
	va_dcl
#endif
@


1.2.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: idrp_usrreq.c,v 1.2 1996/03/04 10:35:20 mickey Exp $	*/
d91 1
d93 5
d124 1
d126 5
@


1.2.16.1
log
@Merge in -current from roughly a week ago
@
text
@d91 1
d93 5
d124 1
d126 5
@


1.2.16.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: idrp_usrreq.c,v 1.2.16.1 2002/03/28 14:57:37 niklas Exp $	*/
d16 5
a20 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2.16.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d56 1
a56 1
#include <sys/stdarg.h>
d117 1
a117 1
	struct sockaddr_iso *siso;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: idrp_usrreq.c,v 1.4 1995/08/12 23:59:47 mycroft Exp $	*/
d58 1
d60 5
a64 4
void	idrp_input();
struct	isopcb	idrp_isop;
static	struct	sockaddr_iso idrp_addrs[2] =
{  { sizeof(idrp_addrs), AF_ISO, }, { sizeof(idrp_addrs[1]), AF_ISO, } };
d88 1
a88 1
 * No return value.  
d91 8
a98 2
idrp_input(m, src, dst)
	register struct mbuf *m;
d100 7
a106 1
{
d108 1
a108 1
	bad:	m_freem(m);
d112 2
a113 2
	bcopy((caddr_t)&(src->siso_addr), (caddr_t)&idrp_addrs[0].siso_addr,
		1 + src->siso_nlen);
d115 2
a116 2
	bcopy((caddr_t)&(dst->siso_addr), (caddr_t)&idrp_addrs[1].siso_addr,
		1 + dst->siso_nlen);
d118 1
a118 1
		sisotosa(idrp_addrs), m, (struct mbuf *)0) == 0)
d123 8
a130 2
idrp_output(m, addr)
	struct mbuf *m, *addr;
d132 8
a139 2
	register struct sockaddr_iso *siso = mtod(addr, struct sockaddr_iso *);
	int s = splsoftnet(), i;
d141 2
a142 2
	bcopy((caddr_t)&(siso->siso_addr),
	      (caddr_t)&idrp_isop.isop_sfaddr.siso_addr, 1 + siso->siso_nlen);
d144 2
a145 2
	bcopy((caddr_t)&(siso->siso_addr),
	      (caddr_t)&idrp_isop.isop_sladdr.siso_addr, 1 + siso->siso_nlen);
d151 2
a152 2
u_long	idrp_sendspace = 3072;		/* really max datagram size */
u_long	idrp_recvspace = 40 * 1024;	/* 40 1K datagrams */
d154 2
a155 1
/*ARGSUSED*/
d157 3
a159 3
	struct socket *so;
	int req;
	struct mbuf *m, *addr, *control;
d161 1
a161 1
	int error = 0;
d163 3
a165 2
	 /* Note: need to block idrp_input while changing
	 * the udp pcb queue and/or pcb addresses.
a201 1
release:
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
