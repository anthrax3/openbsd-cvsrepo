head	1.3;
access;
symbols
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	UBC_SYNC_A:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@# @;


1.3
date	2002.02.18.21.46.03;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	96.03.04.10.37.28;	author mickey;	state Exp;
branches
	1.2.16.1
	1.2.26.1;
next	1.1;

1.1
date	95.10.18.08.53.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.19;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2002.03.06.02.15.09;	author niklas;	state dead;
branches;
next	;

1.2.26.1
date	2002.06.11.03.31.38;	author art;	state dead;
branches;
next	;


desc
@@


1.3
log
@bye bye.  i delete this not because it is disgusting, but because it is disgusting code in the wrong place
@
text
@/*	$OpenBSD: xebec.bnf,v 1.2 1996/03/04 10:37:28 mickey Exp $	*/
/*	$NetBSD: xebec.bnf,v 1.4 1994/06/29 06:41:22 cgd Exp $	*/

#include "main.h"
#include "sets.h"
#include <stdio.h> 

extern FILE *eventfile_h, *actfile; 
}

*fmq

	novocab
	nobnf
	nofirst
	nofollow
	noparsetable
	noerrortables
	nos
	noe

*terminals

ID		 	0	0	{ char *address; }
STRUCT		0	0
SYNONYM		0	0
PREDICATE		0	0	{ char *address; }
ACTION		0	0	{ char *address; }
/*
FSTRING		0	0	{ char *address; }
*/
PROTOCOL	0	0	
LBRACK		0	0
RBRACK		0	0
LANGLE		0	0
EQUAL		0	0
COMMA		0	0
STAR		0	0
EVENTS		0	0
TRANSITIONS	0	0
INCLUDE		0	0
STATES		0	0
SEMI		0	0
PCB			0	0		{ char *address; }
DEFAULT		0	0
NULLACTION	0 	0
SAME		0 	0

*nonterminals

pcb				{ char *address; int isevent; }
syn				{ int type; }
setlist			{ struct Object *setnum; }
setlisttail		{ struct Object *setnum; }
part			{ unsigned char type; }
parttail		{ unsigned char type; }
partrest		{ unsigned char type; char *address; }
setstruct		{ struct Object *object; }
setdef			{ unsigned char type,keep; char *address; struct Object *object; }
translist		
transition	
event			{ struct Object *object;  }
oldstate		{	struct Object *object;	}
newstate		{	struct Object *object;	}
predicatepart 	{	char *string; }
actionpart		{ 	char *string; struct Object *oldstate; struct Object *newstate; }

*productions

program 	::= 
				STAR PROTOCOL ID 
				{	
					if(strlen($ID.address) > 50 ) {
						fprintf(stderr, 
						"Protocol name may not exceed 50 chars in length.\n"); 
						Exit(-1);
					}
					strcpy(protocol, $ID.address); 
					openfiles(protocol); 
				}
				STAR includelist
				PCB  
				{ 
					$$pcb.isevent = 0; 
				}
				pcb 
				{
				  fprintf(actfile, "\ntypedef %s %s%s;\n",
							  $pcb[7].address,protocol, PCBNAME); 
				  $$syn.type = PCB_SYN;
				} 
				syn 
				STAR STATES { $$part.type = (unsigned char) STATESET; } part
				STAR { end_states(eventfile_h); } EVENTS 
				{ $$pcb.isevent = 1; }
				pcb 
				{
					fprintf(eventfile_h, "\t"); /* fmq gags on single chars */
					includecode(eventfile_h, $pcb[14].address);
					fprintf(eventfile_h, "\n"); /* fmq gags on single chars */
					$$syn.type = EVENT_SYN;
				}
				syn 
				{ 
				  	$$part.type = (unsigned char)EVENTSET; 
				} 
				part 
				STAR { end_events(); } 
				TRANSITIONS 
				{ 
					putincludes();
					putdriver(actfile, 9);
				} 
				translist
;
pcb 	::=  STRUCT  
			 {	if($pcb.isevent)  {
					fprintf(stderr, 
					"Event is a list of objects enclosed by \"{}\"\n");
					Exit(-1);
				}
			  fprintf(eventfile_h, "struct "); 
			}
			 ACTION { $pcb.address = $ACTION.address; }
			 optsemi
		::=	 ACTION 
			{	if( ! $pcb.isevent)  {
					fprintf(stderr, 
					"Pcb requires a type or structure definition.\"{}\"\n");
					Exit(-1);
				}
			   $pcb.address = $ACTION.address; 
			}
			 optsemi
		::=  ID {  $pcb.address = $ID.address; } optsemi
;

syn ::= SYNONYM ID { synonyms[$syn.type] = stash( $ID.address ); }
		::= 
;

optsemi ::= SEMI 
		::= 
;
includelist ::= INCLUDE ACTION { includecode(actfile, $ACTION.address);} STAR
			::=
;
part ::= ID 
		{ 
			$$partrest.address = $ID.address;
			$$partrest.type = $part.type; 
		}
		partrest  
		{ $$parttail.type = $part.type; } 
		parttail
;
parttail ::= { $$part.type = $parttail.type; } part 
		::=  
;
partrest ::=  EQUAL 
			{ 
			  if(  lookup( $partrest.type, $partrest.address ) ) {
				fprintf(stderr, "bnf:trying to redefine obj type 0x%x, adr %s\n",
					$partrest.type, $partrest.address);
				Exit(-1);
			  } 
			  $$setdef.type = $partrest.type;
			  $$setdef.address = stash( $partrest.address );
			  $$setdef.keep = 1;
			} setdef { $$setstruct.object = $setdef.object; } setstruct

	::=  ACTION 
		{ 
		 defineitem($partrest.type, 
					$partrest.address, $ACTION.address); 
		}

	::= { 
			defineitem($partrest.type, $partrest.address, (char *)0);
		}
;

setstruct ::= ACTION 
			{
				if($setstruct.object)  {
					/* WHEN COULD THIS BE FALSE?? 
					 * isn't it supposed to be setstruct.object???
					 * (it used to be $ACTION.address)
					 */

					$setstruct.object->obj_struc = $ACTION.address;
					fprintf(eventfile_h, 
						"struct %s %s%s;\n\n", $ACTION.address, 
						EV_PREFIX,  $setstruct.object->obj_name);
				}
			}
		::=
;

setdef ::= LBRACK 
		{ 
			$$setlist.setnum = 
			defineset($setdef.type, $setdef.address, $setdef.keep); 
		} setlist RBRACK { $setdef.object = $setlist.setnum; }
;

setlist ::= ID 
	{ 
		member($setlist.setnum, $ID.address); 
				$$setlisttail.setnum = $setlist.setnum; 
	} setlisttail 
;

setlisttail ::= COMMA { $$setlist.setnum = $setlisttail.setnum; } setlist
		::=
;
translist		::=	 transition  translisttail 
;
translisttail	::= translist
	::=	
;
transition ::=  newstate { transno ++; } LANGLE EQUAL EQUAL oldstate  
	event 
	{ 
	 	CurrentEvent /* GAG! */ = $event.object; 
	 }
	predicatepart
	{ 
		$$actionpart.string = $predicatepart.string; 
		$$actionpart.newstate = $newstate.object; 
		$$actionpart.oldstate = $oldstate.object;
	}
	actionpart
	SEMI
;

predicatepart ::= PREDICATE
	{ 
		 $predicatepart.string = stash ( $PREDICATE.address );
	}
	::= DEFAULT
	{ 
		$predicatepart.string = (char *)0;
	}
;

actionpart ::=  
	ACTION
	{
	  statetable( $actionpart.string, $actionpart.oldstate, 
					$actionpart.newstate,
					acttable(actfile, $ACTION.address ), 
					CurrentEvent ); 
	  if( print_trans ) {
	  	dump_trans( $actionpart.string, $actionpart.oldstate, 
					$actionpart.newstate,
					$ACTION.address, CurrentEvent ); 
	  }
	}
	::= NULLACTION
	{
	  statetable($actionpart.string, $actionpart.oldstate, $actionpart.newstate,
				  0, CurrentEvent ); /* KLUDGE - remove this */
	  if( print_trans ) {
	  	dump_trans( $actionpart.string, $actionpart.oldstate, 
					$actionpart.newstate,
					"NULLACTION", CurrentEvent ); 
	  }
	}
;

oldstate ::= ID 
	{	
		$oldstate.object = Lookup(STATESET, $ID.address);
	}
	::= {
			$$setdef.address = (char *)0;
			$$setdef.type = (unsigned char)STATESET; 
			$$setdef.keep = 0;
		}
		setdef 
		{ 
			$oldstate.object = $setdef.object; 
		}
;

newstate ::= ID 
	{ 
		$newstate.object = Lookup(STATESET, $ID.address); 
	}
;

newstate ::= SAME 
	{ 
		extern struct Object *SameState;

		$newstate.object = SameState;
	}
;

event ::= ID 
		{
			$event.object = Lookup(EVENTSET, $ID.address); 
		}
	::= 
		{
			$$setdef.address = (char *)0;
			$$setdef.type = (unsigned char)EVENTSET; 
			$$setdef.keep = 0;
		}
		setdef 
		{ 
			$event.object = $setdef.object; 
		}
;

*end
@


1.2
log
@Initial commit of NetBSD 960217 netiso.
all the rest is the fixes to the import by Niklas.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.2.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: xebec.bnf,v 1.2 1996/03/04 10:37:28 mickey Exp $	*/
@


1.2.16.1
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD: xebec.bnf,v 1.2 1996/03/04 10:37:28 mickey Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
