head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.42
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.40
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.36
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.32
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.34
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.26
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.30
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.28
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.24
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.22
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.20
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.18
	OPENBSD_5_0:1.3.0.16
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.1.0.16
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.14
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.12
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.10
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.8
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	SMP_SYNC_A:1.1
	SMP_SYNC_B:1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2007.09.11.12.07.05;	author djm;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.24.19.35.20;	author damien;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.07.07.07.14;	author markus;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.19.10.51.30;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Add __bounded__ attributes to prototypes.
Use (x & 0xff) rather than (x % 256) - compilers generate faster code.
Add arc4_getbytes function to extract raw keystream
ok markus@@ tom@@
@
text
@/*	$OpenBSD: arc4.c,v 1.2 2007/07/24 19:35:20 damien Exp $	*/
/*
 * Copyright (c) 2003 Markus Friedl <markus@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>                                                         

#include <crypto/arc4.h> 

#define RC4SWAP(x,y) \
	do { \
		u_int8_t t = ctx->state[x];  \
		ctx->state[x] = ctx->state[y]; \
		ctx->state[y] = t; \
	} while(0)

void
rc4_keysetup(struct rc4_ctx *ctx, u_char *key, u_int32_t klen)
{
	u_int8_t x, y;
	u_int32_t i;

	x = y = 0;
	for (i = 0; i < RC4STATE; i++)
		ctx->state[i] = i;
	for (i = 0; i < RC4STATE; i++) {
		y = (key[x] + ctx->state[i] + y) & (RC4STATE - 1);
		RC4SWAP(i, y);
		x = (x + 1) % klen;
	}
	ctx->x = ctx->y = 0;
}

void
rc4_crypt(struct rc4_ctx *ctx, u_char *src, u_char *dst,
    u_int32_t len)
{
	u_int32_t i;

	for (i = 0; i < len; i++) {
		ctx->x = (ctx->x + 1) & (RC4STATE - 1);
		ctx->y = (ctx->state[ctx->x] + ctx->y) & (RC4STATE - 1);
		RC4SWAP(ctx->x, ctx->y);
		dst[i] = src[i] ^ ctx->state[
		   (ctx->state[ctx->x] + ctx->state[ctx->y]) & (RC4STATE - 1)];
	}
}

void
rc4_getbytes(struct rc4_ctx *ctx, u_char *dst, u_int32_t len)
{
	u_int32_t i;

	for (i = 0; i < len; i++) {
		ctx->x = (ctx->x + 1) & (RC4STATE - 1);
		ctx->y = (ctx->state[ctx->x] + ctx->y) & (RC4STATE - 1);
		RC4SWAP(ctx->x, ctx->y);
		dst[i] = ctx->state[
		   (ctx->state[ctx->x] + ctx->state[ctx->y]) & (RC4STATE - 1)];
	}
}

void
rc4_skip(struct rc4_ctx *ctx, u_int32_t len)
{
	for (; len > 0; len--) {
		ctx->x = (ctx->x + 1) & (RC4STATE - 1);
		ctx->y = (ctx->state[ctx->x] + ctx->y) & (RC4STATE - 1);
		RC4SWAP(ctx->x, ctx->y);
	}
}
@


1.2
log
@add rc4_skip() function that can be used to discard bytes from
the arc4 key stream.

rc4_skip(ctx, len);
is equivalent to:
u_int8_t dummy[len];
rc4_crypt(ctx, dummy, dummy, len);

except that is does not require storage space and that it saves
some cpu cycles.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: arc4.c,v 1.1 2003/10/07 07:07:14 markus Exp $	*/
d39 1
a39 1
		y = (key[x] + ctx->state[i] + y) % RC4STATE;
d53 2
a54 2
		ctx->x = (ctx->x + 1) % RC4STATE;
		ctx->y = (ctx->state[ctx->x] + ctx->y) % RC4STATE;
d57 15
a71 1
		   (ctx->state[ctx->x] + ctx->state[ctx->y]) % RC4STATE];
d79 2
a80 2
		ctx->x = (ctx->x + 1) % RC4STATE;
		ctx->y = (ctx->state[ctx->x] + ctx->y) % RC4STATE;
@


1.1
log
@arc4 support; ok millert@@, fgsch@@
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d58 10
@


1.1.2.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@

