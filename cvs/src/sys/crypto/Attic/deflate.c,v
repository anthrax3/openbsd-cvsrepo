head	1.7;
access;
symbols
	OPENBSD_4_9:1.5.0.14
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.12
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.8
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.10
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.8
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.6
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.4
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.2
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.3.0.20
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.18
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.16
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.14
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.12
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.10
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.3.0.6
	UBC_BASE:1.3
	SMP:1.3.0.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3;
locks; strict;
comment	@ * @;


1.7
date	2011.07.07.03.14.02;	author tedu;	state dead;
branches;
next	1.6;

1.6
date	2011.07.07.02.57.24;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.13.21.26.41;	author hshoexer;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.24.11.43.40;	author hshoexer;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.20.02.45.22;	author hugh;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2001.07.05.17.52.59;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.05.12.04.31;	author jjbg;	state Exp;
branches;
next	;

1.3.4.1
date	2001.10.31.03.11.47;	author nate;	state Exp;
branches;
next	;


desc
@@


1.7
log
@empty files should be deleted
@
text
@@


1.6
log
@Replace the cruddy old sys/net/zlib.[ch].  We now use the sys/lib/libz
code.  Missing chunks of the API are imported from the libc version,
with a few #ifdef's to port it into the kernel environment.

The bootblocks already used the newer code, and should encounter no
surprises since there are so few changes to the existing files. In
the kernel, ipcomp and kernel ppp are changed to the new API.
ipcomp has been tested.

ok tedu the brave
@
text
@@


1.5
log
@Here too:  Convert MALLOC/FREE to malloc/free and use M_ZERO where applicable.

error spotting and ok krw@@
@
text
@a0 176
/* $OpenBSD: deflate.c,v 1.4 2005/03/24 11:43:40 hshoexer Exp $ */

/*
 * Copyright (c) 2001 Jean-Jacques Bernard-Gundol (jj@@wabbitt.org)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *   derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This file contains a wrapper around the deflate algo compression
 * functions using the zlib library (see net/zlib.{c,h})
 */

#include <sys/types.h>
#include <sys/malloc.h>
#include <sys/param.h>
#include <sys/systm.h>
#include <net/zlib.h>
#include <crypto/deflate.h>

int window_inflate = -1 * MAX_WBITS;
int window_deflate = -12;

/*
 * This function takes a block of data and (de)compress it using the deflate
 * algorithm
 */

u_int32_t
deflate_global(u_int8_t *data, u_int32_t size, int comp, u_int8_t **out)
{
	/* comp indicates whether we compress (0) or decompress (1) */

	z_stream zbuf;
	u_int8_t *output;
	u_int32_t count, result;
	int error, i = 0, j;
	struct deflate_buf buf[ZBUF];

	bzero(&zbuf, sizeof(z_stream));
	for (j = 0; j < ZBUF; j++)
		buf[j].flag = 0;

	zbuf.next_in = data;	/* data that is going to be processed */
	zbuf.zalloc = z_alloc;
	zbuf.zfree = z_free;
	zbuf.opaque = Z_NULL;
	zbuf.avail_in = size;	/* Total length of data to be processed */

	if (comp == 0) {
		buf[i].out = malloc((u_long)size, M_CRYPTO_DATA, M_NOWAIT);
		if (buf[i].out == NULL)
			goto bad;
		buf[i].size = size;
		buf[i].flag = 1;
		i++;
	} else {
		/*
	 	 * Choose a buffer with 4x the size of the input buffer
	 	 * for the size of the output buffer in the case of
	 	 * decompression. If it's not sufficient, it will need to be
	 	 * updated while the decompression is going on
	 	 */
		buf[i].out = malloc((u_long)(size * 4), M_CRYPTO_DATA, M_NOWAIT);
		if (buf[i].out == NULL)
			goto bad;
		buf[i].size = size * 4;
		buf[i].flag = 1;
		i++;
	}

	zbuf.next_out = buf[0].out;
	zbuf.avail_out = buf[0].size;

	error = comp ? inflateInit2(&zbuf, window_inflate) :
	    deflateInit2(&zbuf, Z_DEFAULT_COMPRESSION, Z_METHOD,
	    window_deflate, Z_MEMLEVEL, Z_DEFAULT_STRATEGY, MINCOMP);

	if (error != Z_OK)
		goto bad;
	for (;;) {
		error = comp ? inflate(&zbuf, Z_PARTIAL_FLUSH) :
		    deflate(&zbuf, Z_PARTIAL_FLUSH);
		if (error != Z_OK && error != Z_STREAM_END)
			goto bad;
		else if (zbuf.avail_in == 0 && zbuf.avail_out != 0)
			goto end;
		else if (zbuf.avail_out == 0 && i < (ZBUF - 1)) {
			/* we need more output space, allocate size */
			buf[i].out = malloc((u_long)size, M_CRYPTO_DATA,
			    M_NOWAIT);
			if (buf[i].out == NULL)
				goto bad;
			zbuf.next_out = buf[i].out;
			buf[i].size = size;
			buf[i].flag = 1;
			zbuf.avail_out = buf[i].size;
			i++;
		} else
			goto bad;
	}

end:
	result = count = zbuf.total_out;

	*out = malloc((u_long)result, M_CRYPTO_DATA, M_NOWAIT);
	if (*out == NULL)
		goto bad;
	if (comp)
		inflateEnd(&zbuf);
	else
		deflateEnd(&zbuf);
	output = *out;
	for (j = 0; buf[j].flag != 0; j++) {
		if (count > buf[j].size) {
			bcopy(buf[j].out, *out, buf[j].size);
			*out += buf[j].size;
			free(buf[j].out, M_CRYPTO_DATA);
			count -= buf[j].size;
		} else {
			/* it should be the last buffer */
			bcopy(buf[j].out, *out, count);
			*out += count;
			free(buf[j].out, M_CRYPTO_DATA);
			count = 0;
		}
	}
	*out = output;
	return result;

bad:
	*out = NULL;
	for (j = 0; buf[j].flag != 0; j++)
		free(buf[j].out, M_CRYPTO_DATA);
	if (comp)
		inflateEnd(&zbuf);
	else
		deflateEnd(&zbuf);
	return 0;
}

void *
z_alloc(void *nil, u_int type, u_int size)
{
	void *ptr;

	ptr = malloc(type *size, M_CRYPTO_DATA, M_NOWAIT);
	return ptr;
}

void
z_free(void *nil, void *ptr, u_int size)
{
	free(ptr, M_CRYPTO_DATA);
}
@


1.4
log
@ansi and tiny knf

ok deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: deflate.c,v 1.3 2001/08/20 02:45:22 hugh Exp $ */
d72 1
a72 2
		MALLOC(buf[i].out, u_int8_t *, (u_long) size, M_CRYPTO_DATA, 
		    M_NOWAIT);
d85 1
a85 3

		MALLOC(buf[i].out, u_int8_t *, (u_long) (size * 4), 
		    M_CRYPTO_DATA, M_NOWAIT);
d111 2
a112 2
			MALLOC(buf[i].out, u_int8_t *, (u_long) size,
			    M_CRYPTO_DATA, M_NOWAIT);
d127 1
a127 1
	MALLOC(*out, u_int8_t *, (u_long) result, M_CRYPTO_DATA, M_NOWAIT);
d139 1
a139 1
			FREE(buf[j].out, M_CRYPTO_DATA);
d145 1
a145 1
			FREE(buf[j].out, M_CRYPTO_DATA);
d155 1
a155 1
		FREE(buf[j].out, M_CRYPTO_DATA);
@


1.3
log
@Move param.h before systm.h so vax macros are picked up properly.
@
text
@d1 1
a1 1
/* $OpenBSD: deflate.c,v 1.2 2001/07/05 17:52:59 deraadt Exp $ */
d51 1
a51 5
deflate_global(data, size, comp, out)
	u_int8_t *data;
	u_int32_t size;
	int comp;
	u_int8_t **out;
d167 1
a167 3
z_alloc(nil, type, size)
	void *nil;
	u_int type, size;
d176 1
a176 3
z_free(nil, ptr, size)
	void *nil, *ptr;
	u_int size;
@


1.3.4.1
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/* $OpenBSD$ */
@


1.2
log
@KNF
@
text
@d1 1
a1 1
/* $OpenBSD: deflate.c,v 1.1 2001/07/05 12:04:31 jjbg Exp $ */
d37 1
a38 1
#include <sys/param.h>
@


1.1
log
@deflate algo, used by IPComp. Currently it won't be compiled until IPComp
is completely imported into the tree.
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d66 1
a66 1
	for (j = 0; j < ZBUF; j++) {
a67 1
	}
d78 1
a78 1
		if (buf[i].out == NULL) {
a79 1
		}
d93 1
a93 1
		if (buf[i].out == NULL) {
a94 1
		}
d103 3
a105 4
	error = comp ? inflateInit2(&zbuf, window_inflate)
		: deflateInit2(&zbuf, Z_DEFAULT_COMPRESSION, Z_METHOD,
			       window_deflate, Z_MEMLEVEL,
			       Z_DEFAULT_STRATEGY, MINCOMP);
d107 1
a107 1
	if (error != Z_OK) {
a108 1
	}
d110 3
a112 3
		error = comp ? inflate(&zbuf, Z_PARTIAL_FLUSH)
			: deflate(&zbuf, Z_PARTIAL_FLUSH);
		if (error != Z_OK && error != Z_STREAM_END) {
d114 1
a114 1
		} else if (zbuf.avail_in == 0 && zbuf.avail_out != 0) {
d116 1
a116 1
		} else if (zbuf.avail_out == 0 && i < (ZBUF - 1)) {
d120 1
a120 1
			if (buf[i].out == NULL) {
a121 1
			}
d127 1
a127 1
		} else {
a128 1
		}
d135 1
a135 1
	if (*out == NULL) {
d137 4
a140 2
	}
	comp ? inflateEnd(&zbuf) : deflateEnd(&zbuf);
d161 1
a161 1
	for (j = 0; buf[j].flag != 0; j++) {
d163 4
a166 2
	}
	comp ? inflateEnd(&zbuf) : deflateEnd(&zbuf);
d175 2
a176 1
	void           *ptr;
@

