head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.2
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.24
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.20
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.22
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.14
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.18
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.16
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.12
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.10
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.8
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2016.09.19.18.09.40;	author tedu;	state Exp;
branches;
next	1.3;
commitid	ylyllqBwTV1qZHDZ;

1.3
date	2011.01.11.15.42.05;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.06.22.23.20;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.12.15.43.00;	author damien;	state Exp;
branches;
next	;


desc
@@


1.4
log
@convert bcopy to memcpy. from david hill
@
text
@/*	$OpenBSD: hmac.c,v 1.3 2011/01/11 15:42:05 deraadt Exp $	*/

/*-
 * Copyright (c) 2008 Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * This code implements the HMAC algorithm described in RFC 2104 using
 * the MD5, SHA1 and SHA-256 hash functions.
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <crypto/md5.h>
#include <crypto/sha1.h>
#include <crypto/sha2.h>
#include <crypto/hmac.h>

void
HMAC_MD5_Init(HMAC_MD5_CTX *ctx, const u_int8_t *key, u_int key_len)
{
	u_int8_t k_ipad[MD5_BLOCK_LENGTH];
	int i;

	if (key_len > MD5_BLOCK_LENGTH) {
		MD5Init(&ctx->ctx);
		MD5Update(&ctx->ctx, key, key_len);
		MD5Final(ctx->key, &ctx->ctx);
		ctx->key_len = MD5_DIGEST_LENGTH;
	} else {
		bcopy(key, ctx->key, key_len);
		ctx->key_len = key_len;
	}

	bzero(k_ipad, MD5_BLOCK_LENGTH);
	memcpy(k_ipad, ctx->key, ctx->key_len);
	for (i = 0; i < MD5_BLOCK_LENGTH; i++)
		k_ipad[i] ^= 0x36;

	MD5Init(&ctx->ctx);
	MD5Update(&ctx->ctx, k_ipad, MD5_BLOCK_LENGTH);

	explicit_bzero(k_ipad, sizeof k_ipad);
}

void
HMAC_MD5_Update(HMAC_MD5_CTX *ctx, const u_int8_t *data, u_int len)
{
	MD5Update(&ctx->ctx, data, len);
}

void
HMAC_MD5_Final(u_int8_t digest[MD5_DIGEST_LENGTH], HMAC_MD5_CTX *ctx)
{
	u_int8_t k_opad[MD5_BLOCK_LENGTH];
	int i;

	MD5Final(digest, &ctx->ctx);

	bzero(k_opad, MD5_BLOCK_LENGTH);
	memcpy(k_opad, ctx->key, ctx->key_len);
	for (i = 0; i < MD5_BLOCK_LENGTH; i++)
		k_opad[i] ^= 0x5c;

	MD5Init(&ctx->ctx);
	MD5Update(&ctx->ctx, k_opad, MD5_BLOCK_LENGTH);
	MD5Update(&ctx->ctx, digest, MD5_DIGEST_LENGTH);
	MD5Final(digest, &ctx->ctx);

	explicit_bzero(k_opad, sizeof k_opad);
}

void
HMAC_SHA1_Init(HMAC_SHA1_CTX *ctx, const u_int8_t *key, u_int key_len)
{
	u_int8_t k_ipad[SHA1_BLOCK_LENGTH];
	int i;

	if (key_len > SHA1_BLOCK_LENGTH) {
		SHA1Init(&ctx->ctx);
		SHA1Update(&ctx->ctx, key, key_len);
		SHA1Final(ctx->key, &ctx->ctx);
		ctx->key_len = SHA1_DIGEST_LENGTH;
	} else {
		bcopy(key, ctx->key, key_len);
		ctx->key_len = key_len;
	}

	bzero(k_ipad, SHA1_BLOCK_LENGTH);
	memcpy(k_ipad, ctx->key, ctx->key_len);
	for (i = 0; i < SHA1_BLOCK_LENGTH; i++)
		k_ipad[i] ^= 0x36;

	SHA1Init(&ctx->ctx);
	SHA1Update(&ctx->ctx, k_ipad, SHA1_BLOCK_LENGTH);

	explicit_bzero(k_ipad, sizeof k_ipad);
}

void
HMAC_SHA1_Update(HMAC_SHA1_CTX *ctx, const u_int8_t *data, u_int len)
{
	SHA1Update(&ctx->ctx, data, len);
}

void
HMAC_SHA1_Final(u_int8_t digest[SHA1_DIGEST_LENGTH], HMAC_SHA1_CTX *ctx)
{
	u_int8_t k_opad[SHA1_BLOCK_LENGTH];
	int i;

	SHA1Final(digest, &ctx->ctx);

	bzero(k_opad, SHA1_BLOCK_LENGTH);
	memcpy(k_opad, ctx->key, ctx->key_len);
	for (i = 0; i < SHA1_BLOCK_LENGTH; i++)
		k_opad[i] ^= 0x5c;

	SHA1Init(&ctx->ctx);
	SHA1Update(&ctx->ctx, k_opad, SHA1_BLOCK_LENGTH);
	SHA1Update(&ctx->ctx, digest, SHA1_DIGEST_LENGTH);
	SHA1Final(digest, &ctx->ctx);

	explicit_bzero(k_opad, sizeof k_opad);
}

void
HMAC_SHA256_Init(HMAC_SHA256_CTX *ctx, const u_int8_t *key, u_int key_len)
{
	u_int8_t k_ipad[SHA256_BLOCK_LENGTH];
	int i;

	if (key_len > SHA256_BLOCK_LENGTH) {
		SHA256Init(&ctx->ctx);
		SHA256Update(&ctx->ctx, key, key_len);
		SHA256Final(ctx->key, &ctx->ctx);
		ctx->key_len = SHA256_DIGEST_LENGTH;
	} else {
		bcopy(key, ctx->key, key_len);
		ctx->key_len = key_len;
	}

	bzero(k_ipad, SHA256_BLOCK_LENGTH);
	memcpy(k_ipad, ctx->key, ctx->key_len);
	for (i = 0; i < SHA256_BLOCK_LENGTH; i++)
		k_ipad[i] ^= 0x36;

	SHA256Init(&ctx->ctx);
	SHA256Update(&ctx->ctx, k_ipad, SHA256_BLOCK_LENGTH);

	explicit_bzero(k_ipad, sizeof k_ipad);
}

void
HMAC_SHA256_Update(HMAC_SHA256_CTX *ctx, const u_int8_t *data, u_int len)
{
	SHA256Update(&ctx->ctx, data, len);
}

void
HMAC_SHA256_Final(u_int8_t digest[SHA256_DIGEST_LENGTH], HMAC_SHA256_CTX *ctx)
{
	u_int8_t k_opad[SHA256_BLOCK_LENGTH];
	int i;

	SHA256Final(digest, &ctx->ctx);

	bzero(k_opad, SHA256_BLOCK_LENGTH);
	memcpy(k_opad, ctx->key, ctx->key_len);
	for (i = 0; i < SHA256_BLOCK_LENGTH; i++)
		k_opad[i] ^= 0x5c;

	SHA256Init(&ctx->ctx);
	SHA256Update(&ctx->ctx, k_opad, SHA256_BLOCK_LENGTH);
	SHA256Update(&ctx->ctx, digest, SHA256_DIGEST_LENGTH);
	SHA256Final(digest, &ctx->ctx);

	explicit_bzero(k_opad, sizeof k_opad);
}
@


1.3
log
@for key material that is being being discarded, convert bzero() to
explicit_bzero() where required
ok markus mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: hmac.c,v 1.2 2008/09/06 22:23:20 djm Exp $	*/
d49 1
a49 1
	bcopy(ctx->key, k_ipad, ctx->key_len);
d74 1
a74 1
	bcopy(ctx->key, k_opad, ctx->key_len);
d103 1
a103 1
	bcopy(ctx->key, k_ipad, ctx->key_len);
d128 1
a128 1
	bcopy(ctx->key, k_opad, ctx->key_len);
d157 1
a157 1
	bcopy(ctx->key, k_ipad, ctx->key_len);
d182 1
a182 1
	bcopy(ctx->key, k_opad, ctx->key_len);
@


1.2
log
@match libc sha2(3) API changes for kernel; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hmac.c,v 1.1 2008/08/12 15:43:00 damien Exp $	*/
d56 1
a56 1
	bzero(k_ipad, sizeof k_ipad);
d83 1
a83 1
	bzero(k_opad, sizeof k_opad);
d110 1
a110 1
	bzero(k_ipad, sizeof k_ipad);
d137 1
a137 1
	bzero(k_opad, sizeof k_opad);
d164 1
a164 1
	bzero(k_ipad, sizeof k_ipad);
d191 1
a191 1
	bzero(k_opad, sizeof k_opad);
@


1.1
log
@Implementation of the HMAC-MD5, HMAC-SHA1, HMAC-SHA256, AES-128-CMAC
and AES Key Wrap algorithms.
They will replace/extend the non-generic implementation in net80211.

AES-128-CMAC tested by sobrado@@ (AlphaServer 1200),
naddy@@ (alpha/sparc64) and sthen@@ (sparc64, armish).
HMAC-* reviewed by hshoexer@@

ok and hints from djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d147 3
a149 3
		SHA256_Init(&ctx->ctx);
		SHA256_Update(&ctx->ctx, key, key_len);
		SHA256_Final(ctx->key, &ctx->ctx);
d161 2
a162 2
	SHA256_Init(&ctx->ctx);
	SHA256_Update(&ctx->ctx, k_ipad, SHA256_BLOCK_LENGTH);
d170 1
a170 1
	SHA256_Update(&ctx->ctx, data, len);
d179 1
a179 1
	SHA256_Final(digest, &ctx->ctx);
d186 4
a189 4
	SHA256_Init(&ctx->ctx);
	SHA256_Update(&ctx->ctx, k_opad, SHA256_BLOCK_LENGTH);
	SHA256_Update(&ctx->ctx, digest, SHA256_DIGEST_LENGTH);
	SHA256_Final(digest, &ctx->ctx);
@

