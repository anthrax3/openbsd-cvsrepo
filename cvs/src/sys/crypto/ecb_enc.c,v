head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.34
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.32
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.30
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.28
	OPENBSD_5_0:1.3.0.26
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.24
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.22
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.18
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.20
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.16
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.14
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.12
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.10
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.10
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.8
	OPENBSD_3_6_BASE:1.2
	SMP_SYNC_A:1.2
	SMP_SYNC_B:1.2
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.1.0.16
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.14
	OPENBSD_3_1_BASE:1.1
	UBC_SYNC_B:1.2
	UBC:1.1.0.12
	UBC_BASE:1.1
	OPENBSD_3_0:1.1.0.10
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.8
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.6
date	2015.12.10.21.00.51;	author naddy;	state Exp;
branches;
next	1.5;
commitid	T0HbsCFlrwPATHlH;

1.5
date	2015.01.15.23.26.40;	author tedu;	state Exp;
branches;
next	1.4;
commitid	As4xkBxJjTnDCkH2;

1.4
date	2013.11.18.18.49.53;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.13.10.56.44;	author hshoexer;	state Exp;
branches;
next	1.2;

1.2
date	2002.10.27.13.24.26;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.28.23.13.05;	author deraadt;	state Exp;
branches
	1.1.2.1
	1.1.12.1;
next	;

1.1.2.1
date	2000.03.02.07.04.36;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.03.27.23.53.48;	author niklas;	state Exp;
branches;
next	;

1.1.12.1
date	2002.10.29.00.30.52;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove plain DES from the kernel crypto framework, including the crypto
accelerator drivers.  No longer used by anything.  ok sthen@@ mikeb@@
@
text
@/*	$OpenBSD: ecb_enc.c,v 1.5 2015/01/15 23:26:40 tedu Exp $	*/

/* lib/des/ecb_enc.c */
/* Copyright (C) 1995 Eric Young (eay@@mincom.oz.au)
 * All rights reserved.
 * 
 * This file is part of an SSL implementation written
 * by Eric Young (eay@@mincom.oz.au).
 * The implementation was written so as to conform with Netscapes SSL
 * specification.  This library and applications are
 * FREE FOR COMMERCIAL AND NON-COMMERCIAL USE
 * as long as the following conditions are aheared to.
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.  If this code is used in a product,
 * Eric Young should be given attribution as the author of the parts used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    This product includes software developed by Eric Young (eay@@mincom.oz.au)
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */

#include "des_locl.h"
#include "spr.h"

void
des_encrypt2(u_int32_t *data, des_key_schedule ks, int encrypt)
{
	register u_int32_t l, r, t, u;
#ifdef DES_USE_PTR
	register unsigned char *des_SP=(unsigned char *)des_SPtrans;
#endif
	register int i;
	register u_int32_t *s;

	u = data[0];
	r = data[1];

	/* Things have been modified so that the initial rotate is
	 * done outside the loop.  This required the
	 * des_SPtrans values in sp.h to be rotated 1 bit to the right.
	 * One perl script later and things have a 5% speed up on a sparc2.
	 * Thanks to Richard Outerbridge <71755.204@@CompuServe.COM>
	 * for pointing this out. */
	l = (r << 1) | (r >> 31);
	r = (u << 1) | (u >> 31);

	/* clear the top bits on machines with 8byte longs */
	l &= 0xffffffffL;
	r &= 0xffffffffL;

	s = (u_int32_t *) ks;
	/* I don't know if it is worth the effort of loop unrolling the
	 * inner loop */
	if (encrypt) {
		for (i = 0; i < 32; i += 4) {
			D_ENCRYPT(l, r, i + 0); /*  1 */
			D_ENCRYPT(r, l, i + 2); /*  2 */
		}
	} else {
		for (i = 30; i > 0; i -= 4) {
			D_ENCRYPT(l, r, i - 0); /* 16 */
			D_ENCRYPT(r, l, i - 2); /* 15 */
		}
	}
	l = (l >> 1) | (l << 31);
	r = (r >> 1) | (r << 31);
	/* clear the top bits on machines with 8byte longs */
	l &= 0xffffffffL;
	r &= 0xffffffffL;

	data[0] = l;
	data[1] = r;
	l = r = t = u = 0;
}
@


1.5
log
@remove static version string
@
text
@d1 1
a1 1
/*	$OpenBSD: ecb_enc.c,v 1.4 2013/11/18 18:49:53 brad Exp $	*/
a51 75

void
des_ecb_encrypt(des_cblock (*input), des_cblock (*output), des_key_schedule ks,
    int encrypt)
{
	register u_int32_t l0, l1;
	register unsigned char *in, *out;
	u_int32_t ll[2];

	in = (unsigned char *) input;
	out = (unsigned char *) output;
	c2l(in, l0);
	ll[0] = l0;
	c2l(in, l1);
	ll[1] = l1;
	des_encrypt(ll, ks, encrypt);
	l0 = ll[0];
	l2c(l0, out);
	l1 = ll[1];
	l2c(l1, out);
	l0 = l1 = ll[0] = ll[1] = 0;
}

void
des_encrypt(u_int32_t *data, des_key_schedule ks, int encrypt)
{
	register u_int32_t l, r, t, u;
#ifdef DES_USE_PTR
	register unsigned char *des_SP=(unsigned char *)des_SPtrans;
#endif
	register int i;
	register u_int32_t *s;

	u = data[0];
	r = data[1];

	IP(u, r);
	/* Things have been modified so that the initial rotate is
	 * done outside the loop.  This required the
	 * des_SPtrans values in sp.h to be rotated 1 bit to the right.
	 * One perl script later and things have a 5% speed up on a sparc2.
	 * Thanks to Richard Outerbridge <71755.204@@CompuServe.COM>
	 * for pointing this out. */
	l = (r << 1) | (r >> 31);
	r = (u << 1) | (u >> 31);

	/* clear the top bits on machines with 8byte longs */
	l &= 0xffffffffL;
	r &= 0xffffffffL;

	s = (u_int32_t *) ks;
	/* I don't know if it is worth the effort of loop unrolling the
	 * inner loop */
	if (encrypt) {
		for (i = 0; i < 32; i += 4) {
			D_ENCRYPT(l, r, i + 0); /*  1 */
			D_ENCRYPT(r, l, i + 2); /*  2 */
		}
	} else {
		for (i = 30; i > 0; i -= 4) {
			D_ENCRYPT(l, r, i - 0); /* 16 */
			D_ENCRYPT(r, l, i - 2); /* 15 */
		}
	}
	l = (l >> 1) | (l << 31);
	r = (r >> 1) | (r << 31);
	/* clear the top bits on machines with 8byte longs */
	l &= 0xffffffffL;
	r &= 0xffffffffL;

	FP(r, l);
	data[0] = l;
	data[1] = r;
	l = r = t = u = 0;
}
@


1.4
log
@ansify some function definitions and tidy up this code style wise. this
ancient code looked pretty crummy.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ecb_enc.c,v 1.3 2005/06/13 10:56:44 hshoexer Exp $	*/
a51 2

const char *DES_version="libdes v 3.21 - 95/11/21 - eay";
@


1.3
log
@get rid of ifdef MSDOS, no binary change
ok markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ecb_enc.c,v 1.2 2002/10/27 13:24:26 miod Exp $	*/
d55 6
a60 8
void des_ecb_encrypt(input, output, ks, encrypt)
des_cblock (*input);
des_cblock (*output);
des_key_schedule ks;
int encrypt;
	{
	register u_int32_t l0,l1;
	register unsigned char *in,*out;
d63 18
a80 16
	in=(unsigned char *)input;
	out=(unsigned char *)output;
	c2l(in,l0); ll[0]=l0;
	c2l(in,l1); ll[1]=l1;
	des_encrypt(ll,ks,encrypt);
	l0=ll[0]; l2c(l0,out);
	l1=ll[1]; l2c(l1,out);
	l0=l1=ll[0]=ll[1]=0;
	}

void des_encrypt(data, ks, encrypt)
u_int32_t *data;
des_key_schedule ks;
int encrypt;
	{
	register u_int32_t l,r,t,u;
d87 2
a88 2
	u=data[0];
	r=data[1];
d90 1
a90 1
	IP(u,r);
d97 2
a98 2
	l=(r<<1)|(r>>31);
	r=(u<<1)|(u>>31);
d101 2
a102 2
	l&=0xffffffffL;
	r&=0xffffffffL;
d104 1
a104 1
	s=(u_int32_t *)ks;
d107 4
a110 7
	if (encrypt)
		{
		for (i=0; i<32; i+=4)
			{
			D_ENCRYPT(l,r,i+0); /*  1 */
			D_ENCRYPT(r,l,i+2); /*  2 */
			}
d112 4
a115 7
	else
		{
		for (i=30; i>0; i-=4)
			{
			D_ENCRYPT(l,r,i-0); /* 16 */
			D_ENCRYPT(r,l,i-2); /* 15 */
			}
d117 3
a119 2
	l=(l>>1)|(l<<31);
	r=(r>>1)|(r<<31);
d121 2
a122 2
	l&=0xffffffffL;
	r&=0xffffffffL;
d124 10
a133 12
	FP(r,l);
	data[0]=l;
	data[1]=r;
	l=r=t=u=0;
	}

void des_encrypt2(data, ks, encrypt)
u_int32_t *data;
des_key_schedule ks;
int encrypt;
	{
	register u_int32_t l,r,t,u;
d140 2
a141 2
	u=data[0];
	r=data[1];
d149 2
a150 2
	l=(r<<1)|(r>>31);
	r=(u<<1)|(u>>31);
d153 2
a154 2
	l&=0xffffffffL;
	r&=0xffffffffL;
d156 1
a156 1
	s=(u_int32_t *)ks;
d159 4
a162 7
	if (encrypt)
		{
		for (i=0; i<32; i+=4)
			{
			D_ENCRYPT(l,r,i+0); /*  1 */
			D_ENCRYPT(r,l,i+2); /*  2 */
			}
d164 4
a167 7
	else
		{
		for (i=30; i>0; i-=4)
			{
			D_ENCRYPT(l,r,i-0); /* 16 */
			D_ENCRYPT(r,l,i-2); /* 15 */
			}
d169 3
a171 2
	l=(l>>1)|(l<<31);
	r=(r>>1)|(r<<31);
d173 2
a174 2
	l&=0xffffffffL;
	r&=0xffffffffL;
d176 4
a179 4
	data[0]=l;
	data[1]=r;
	l=r=t=u=0;
	}
@


1.2
log
@Use int32_t rather long on strategic places, to be more sparc64-friendly;
ok jason@@ a long time ago
@
text
@d1 1
a1 1
/*	$OpenBSD: ecb_enc.c,v 1.1 2000/02/28 23:13:05 deraadt Exp $	*/
a83 7
#ifdef MSDOS
	union fudge {
		u_int32_t  l;
		unsigned short s[2];
		unsigned char  c[4];
		} U,T;
#endif
a142 7
#endif
#ifdef MSDOS
	union fudge {
		u_int32_t  l;
		unsigned short s[2];
		unsigned char  c[4];
		} U,T;
@


1.1
log
@move crypto code
@
text
@d1 1
a1 1
/*	$OpenBSD: ecb_enc.c,v 1.2 1997/02/24 14:06:52 niklas Exp $	*/
d61 1
a61 1
	register unsigned long l0,l1;
d63 1
a63 1
	unsigned long ll[2];
d76 1
a76 1
unsigned long *data;
d80 1
a80 1
	register unsigned long l,r,t,u;
d86 1
a86 1
		unsigned long  l;
d92 1
a92 1
	register unsigned long *s;
d111 1
a111 1
	s=(unsigned long *)ks;
d143 1
a143 1
unsigned long *data;
d147 1
a147 1
	register unsigned long l,r,t,u;
d153 1
a153 1
		unsigned long  l;
d159 1
a159 1
	register unsigned long *s;
d177 1
a177 1
	s=(unsigned long *)ks;
@


1.1.12.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ecb_enc.c,v 1.1 2000/02/28 23:13:05 deraadt Exp $	*/
d61 1
a61 1
	register u_int32_t l0,l1;
d63 1
a63 1
	u_int32_t ll[2];
d76 1
a76 1
u_int32_t *data;
d80 1
a80 1
	register u_int32_t l,r,t,u;
d86 1
a86 1
		u_int32_t  l;
d92 1
a92 1
	register u_int32_t *s;
d111 1
a111 1
	s=(u_int32_t *)ks;
d143 1
a143 1
u_int32_t *data;
d147 1
a147 1
	register u_int32_t l,r,t,u;
d153 1
a153 1
		u_int32_t  l;
d159 1
a159 1
	register u_int32_t *s;
d177 1
a177 1
	s=(u_int32_t *)ks;
@


1.1.2.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1.2.2
log
@Sync the SMP branch with 3.3
@
text
@d61 1
a61 1
	register u_int32_t l0,l1;
d63 1
a63 1
	u_int32_t ll[2];
d76 1
a76 1
u_int32_t *data;
d80 1
a80 1
	register u_int32_t l,r,t,u;
d86 1
a86 1
		u_int32_t  l;
d92 1
a92 1
	register u_int32_t *s;
d111 1
a111 1
	s=(u_int32_t *)ks;
d143 1
a143 1
u_int32_t *data;
d147 1
a147 1
	register u_int32_t l,r,t,u;
d153 1
a153 1
		u_int32_t  l;
d159 1
a159 1
	register u_int32_t *s;
d177 1
a177 1
	s=(u_int32_t *)ks;
@


