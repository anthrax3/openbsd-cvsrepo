head	1.10;
access;
symbols
	OPENBSD_6_2:1.10.0.2
	OPENBSD_6_2_BASE:1.10
	OPENBSD_6_1:1.9.0.4
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.18
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.16
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.12
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.10
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3;
locks; strict;
comment	@ * @;


1.10
date	2017.05.02.11.44.32;	author mikeb;	state Exp;
branches;
next	1.9;
commitid	wirszMgsR4O7G8R6;

1.9
date	2016.09.19.18.09.40;	author tedu;	state Exp;
branches;
next	1.8;
commitid	ylyllqBwTV1qZHDZ;

1.8
date	2015.11.07.17.46.49;	author mikeb;	state Exp;
branches;
next	1.7;
commitid	5yYZiRe9782UzVyj;

1.7
date	2015.11.07.17.46.07;	author mikeb;	state Exp;
branches;
next	1.6;
commitid	s8MMyIRXEKnnagrT;

1.6
date	2015.11.07.01.37.26;	author naddy;	state Exp;
branches;
next	1.5;
commitid	L3HpIZTyGf6C2PRf;

1.5
date	2015.11.06.16.43.51;	author naddy;	state Exp;
branches;
next	1.4;
commitid	iUorVvZXgrCDxaQG;

1.4
date	2014.11.12.17.52.02;	author mikeb;	state Exp;
branches;
next	1.3;
commitid	ac6WnWvsIgpLdPBB;

1.3
date	2011.01.11.15.44.23;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2010.11.08.10.27.50;	author mikeb;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.22.11.54.23;	author mikeb;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Switch OCF and IPsec over to the new AES

ok djm
@
text
@/*	$OpenBSD: gmac.c,v 1.9 2016/09/19 18:09:40 tedu Exp $	*/

/*
 * Copyright (c) 2010 Mike Belopuhov
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * This code implements the Message Authentication part of the
 * Galois/Counter Mode (as being described in the RFC 4543) using
 * the AES cipher.  FIPS SP 800-38D describes the algorithm details.
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <crypto/aes.h>
#include <crypto/gmac.h>

void	ghash_gfmul(uint32_t *, uint32_t *, uint32_t *);
void	ghash_update_mi(GHASH_CTX *, uint8_t *, size_t);

/* Allow overriding with optimized MD function */
void	(*ghash_update)(GHASH_CTX *, uint8_t *, size_t) = ghash_update_mi;

/* Computes a block multiplication in the GF(2^128) */
void
ghash_gfmul(uint32_t *X, uint32_t *Y, uint32_t *product)
{
	uint32_t	v[4];
	uint32_t	z[4] = { 0, 0, 0, 0};
	uint8_t		*x = (uint8_t *)X;
	uint32_t	mask;
	int		i;

	v[0] = betoh32(Y[0]);
	v[1] = betoh32(Y[1]);
	v[2] = betoh32(Y[2]);
	v[3] = betoh32(Y[3]);

	for (i = 0; i < GMAC_BLOCK_LEN * 8; i++) {
		/* update Z */
		mask = !!(x[i >> 3] & (1 << (~i & 7)));
		mask = ~(mask - 1);
		z[0] ^= v[0] & mask;
		z[1] ^= v[1] & mask;
		z[2] ^= v[2] & mask;
		z[3] ^= v[3] & mask;

		/* update V */
		mask = ~((v[3] & 1) - 1);
		v[3] = (v[2] << 31) | (v[3] >> 1);
		v[2] = (v[1] << 31) | (v[2] >> 1);
		v[1] = (v[0] << 31) | (v[1] >> 1);
		v[0] = (v[0] >> 1) ^ (0xe1000000 & mask);
	}

	product[0] = htobe32(z[0]);
	product[1] = htobe32(z[1]);
	product[2] = htobe32(z[2]);
	product[3] = htobe32(z[3]);
}

void
ghash_update_mi(GHASH_CTX *ctx, uint8_t *X, size_t len)
{
	uint32_t	*x = (uint32_t *)X;
	uint32_t	*s = (uint32_t *)ctx->S;
	uint32_t	*y = (uint32_t *)ctx->Z;
	int		i;

	for (i = 0; i < len / GMAC_BLOCK_LEN; i++) {
		s[0] = y[0] ^ x[0];
		s[1] = y[1] ^ x[1];
		s[2] = y[2] ^ x[2];
		s[3] = y[3] ^ x[3];

		ghash_gfmul((uint32_t *)ctx->S, (uint32_t *)ctx->H,
		    (uint32_t *)ctx->S);

		y = s;
		x += 4;
	}

	bcopy(ctx->S, ctx->Z, GMAC_BLOCK_LEN);
}

#define AESCTR_NONCESIZE	4

void
AES_GMAC_Init(void *xctx)
{
	AES_GMAC_CTX	*ctx = xctx;

	bzero(ctx->ghash.H, GMAC_BLOCK_LEN);
	bzero(ctx->ghash.S, GMAC_BLOCK_LEN);
	bzero(ctx->ghash.Z, GMAC_BLOCK_LEN);
	bzero(ctx->J, GMAC_BLOCK_LEN);
}

void
AES_GMAC_Setkey(void *xctx, const uint8_t *key, uint16_t klen)
{
	AES_GMAC_CTX	*ctx = xctx;

	AES_Setkey(&ctx->K, key, klen - AESCTR_NONCESIZE);
	/* copy out salt to the counter block */
	bcopy(key + klen - AESCTR_NONCESIZE, ctx->J, AESCTR_NONCESIZE);
	/* prepare a hash subkey */
	AES_Encrypt(&ctx->K, ctx->ghash.H, ctx->ghash.H);
}

void
AES_GMAC_Reinit(void *xctx, const uint8_t *iv, uint16_t ivlen)
{
	AES_GMAC_CTX	*ctx = xctx;

	/* copy out IV to the counter block */
	bcopy(iv, ctx->J + AESCTR_NONCESIZE, ivlen);
}

int
AES_GMAC_Update(void *xctx, const uint8_t *data, uint16_t len)
{
	AES_GMAC_CTX	*ctx = xctx;
	uint32_t	blk[4] = { 0, 0, 0, 0 };
	int		plen;

	if (len > 0) {
		plen = len % GMAC_BLOCK_LEN;
		if (len >= GMAC_BLOCK_LEN)
			(*ghash_update)(&ctx->ghash, (uint8_t *)data,
			    len - plen);
		if (plen) {
			memcpy((uint8_t *)blk, (uint8_t *)data + (len - plen),
			    plen);
			(*ghash_update)(&ctx->ghash, (uint8_t *)blk,
			    GMAC_BLOCK_LEN);
		}
	}
	return (0);
}

void
AES_GMAC_Final(uint8_t digest[GMAC_DIGEST_LEN], void *xctx)
{
	AES_GMAC_CTX	*ctx = xctx;
	uint8_t		keystream[GMAC_BLOCK_LEN];
	int		i;

	/* do one round of GCTR */
	ctx->J[GMAC_BLOCK_LEN - 1] = 1;
	AES_Encrypt(&ctx->K, ctx->J, keystream);
	for (i = 0; i < GMAC_DIGEST_LEN; i++)
		digest[i] = ctx->ghash.S[i] ^ keystream[i];
	explicit_bzero(keystream, sizeof(keystream));
}
@


1.9
log
@convert bcopy to memcpy. from david hill
@
text
@d1 1
a1 1
/*	$OpenBSD: gmac.c,v 1.8 2015/11/07 17:46:49 mikeb Exp $	*/
d28 1
a28 1
#include <crypto/rijndael.h>
d117 1
a117 2
	ctx->rounds = rijndaelKeySetupEnc(ctx->K, (u_char *)key,
	    (klen - AESCTR_NONCESIZE) * 8);
d121 1
a121 1
	rijndaelEncrypt(ctx->K, ctx->rounds, ctx->ghash.H, ctx->ghash.H);
d164 1
a164 1
	rijndaelEncrypt(ctx->K, ctx->rounds, ctx->J, keystream);
@


1.8
log
@Update copyright information
@
text
@d1 1
a1 1
/*	$OpenBSD: gmac.c,v 1.7 2015/11/07 17:46:07 mikeb Exp $	*/
d147 1
a147 1
			bcopy((uint8_t *)data + (len - plen), (uint8_t *)blk,
@


1.7
log
@Pass AES_GMAC context as a void pointer to cut down on casts in xform.c
@
text
@d1 1
a1 1
/*	$OpenBSD: gmac.c,v 1.6 2015/11/07 01:37:26 naddy Exp $	*/
d4 1
a4 1
 * Copyright (c) 2010 Mike Belopuhov <mike@@vantronix.net>
@


1.6
log
@Allow overriding ghash_update() with an optimized MD function.  Use
this on amd64 to provide a version that uses the PCLMUL instruction
on CPUs that support it but don't have AESNI.  ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gmac.c,v 1.5 2015/11/06 16:43:51 naddy Exp $	*/
d102 1
a102 1
AES_GMAC_Init(AES_GMAC_CTX *ctx)
d104 2
d113 1
a113 1
AES_GMAC_Setkey(AES_GMAC_CTX *ctx, const uint8_t *key, uint16_t klen)
d115 2
d126 1
a126 1
AES_GMAC_Reinit(AES_GMAC_CTX *ctx, const uint8_t *iv, uint16_t ivlen)
d128 2
d135 1
a135 1
AES_GMAC_Update(AES_GMAC_CTX *ctx, const uint8_t *data, uint16_t len)
d137 1
d157 1
a157 1
AES_GMAC_Final(uint8_t digest[GMAC_DIGEST_LEN], AES_GMAC_CTX *ctx)
d159 1
@


1.5
log
@Instead of multiplying with 0..1, extend the bit into a mask and do an AND.
The same technique was already used a few lines above.  ok mikeb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: gmac.c,v 1.4 2014/11/12 17:52:02 mikeb Exp $	*/
d32 4
a35 1
void	ghash_update(GHASH_CTX *, uint8_t *, size_t);
d76 1
a76 1
ghash_update(GHASH_CTX *ctx, uint8_t *X, size_t len)
d137 2
a138 1
			ghash_update(&ctx->ghash, (uint8_t *)data, len - plen);
d142 1
a142 1
			ghash_update(&ctx->ghash, (uint8_t *)blk,
@


1.4
log
@Improve performance of an internal loop by saving up on branching
Pointed out by John-Mark Gurney <jmg at funkthat ! com>, thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: gmac.c,v 1.3 2011/01/11 15:44:23 deraadt Exp $	*/
d41 1
a41 1
	uint32_t	mask, mul;
d59 1
a59 1
		mul = v[3] & 1;
d63 1
a63 1
		v[0] = (v[0] >> 1) ^ (0xe1000000 * mul);
@


1.3
log
@in AES_GMAC_Final(), explicitly clear the local buffer
ok mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: gmac.c,v 1.2 2010/11/08 10:27:50 mikeb Exp $	*/
d41 1
a41 1
	uint32_t	mul;
d51 6
a56 6
		if (x[i >> 3] & (1 << (~i & 7))) {
			z[0] ^= v[0];
			z[1] ^= v[1];
			z[2] ^= v[2];
			z[3] ^= v[3];
		} /* else: we preserve old values */
@


1.2
log
@use a well established define instead of rolling our own;  no binary change
@
text
@d1 1
a1 1
/*	$OpenBSD: gmac.c,v 1.1 2010/09/22 11:54:23 mikeb Exp $	*/
d156 1
@


1.1
log
@OCF support for the Galois/Counter Mode (GCM) for AES as
described in FIPS SP 800-38D.

This implementation supports 16 byte authentication tag only,
splitting transformation into two parts: encryption and
authentication.  Encryption is handled by the existing
AES-CTR implementation, while authentication requires new
AES_GMAC hash function.

Additional routine is added to the software crypto driver
to deal with peculiarities of a combined authentication-
encryption transformation.

With suggestions from reyk, naddy and toby.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d96 1
a96 3
/* defines from xform.c */
#define AES_GCM_SALTSIZE	4
#define AES_GCM_IVSIZE		8
d111 1
a111 1
	    (klen - AES_GCM_SALTSIZE) * 8);
d113 1
a113 1
	bcopy(key + klen - AES_GCM_SALTSIZE, ctx->J, AES_GCM_SALTSIZE);
d122 1
a122 1
	bcopy(iv, ctx->J + AES_GCM_SALTSIZE, ivlen);
@

