head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2017.04.30.21.33.02;	author mikeb;	state Exp;
branches;
next	;
commitid	oZW9ZdETDbgUy9ox;


desc
@@


1.1
log
@Constant time AES implementation

This introduces a 32-bit constant time AES implementation from
Thomas Pornin originally for BearSSL and then adjusted by Thomas
and myself to fit OpenBSD kernel. One of the additional features
is an API for encryption and decryption subkey expansion in the
format specified by NIST in FIPS 197.

Tested by myself and naddy@@, ok djm@@
@
text
@/*
 * Copyright (c) 2016 Thomas Pornin <pornin@@bolet.org>
 * Copyright (c) 2016 Mike Belopuhov
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef _AES_H_
#define _AES_H_

typedef struct aes_ctx {
	uint32_t sk[60];
	uint32_t sk_exp[120];

	unsigned num_rounds;
} AES_CTX;

int	AES_Setkey(AES_CTX *, const uint8_t *, int);
void	AES_Encrypt(AES_CTX *, const uint8_t *, uint8_t *);
void	AES_Decrypt(AES_CTX *, const uint8_t *, uint8_t *);
void	AES_Encrypt_ECB(AES_CTX *, const uint8_t *, uint8_t *, size_t);
void	AES_Decrypt_ECB(AES_CTX *, const uint8_t *, uint8_t *, size_t);

int	AES_KeySetup_Encrypt(uint32_t *, const uint8_t *, int);
int	AES_KeySetup_Decrypt(uint32_t *, const uint8_t *, int);

#endif	/* _AES_H_ */
@
