head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.8
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.30
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.28
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.24
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.22
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.20
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.18
	OPENBSD_5_0:1.5.0.16
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.14
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.12
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.8
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.8
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.6
date	2014.11.16.17.39.09;	author tedu;	state Exp;
branches;
next	1.5;
commitid	ng8vnAVgB6pQddBw;

1.5
date	2007.09.10.22.19.42;	author henric;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.28.20.39.35;	author hshoexer;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.51;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.04.16.37.02;	author deraadt;	state Exp;
branches
	1.2.8.1;
next	1.1;

1.1
date	2000.02.28.23.13.05;	author deraadt;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.03.02.07.04.37;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.05.14.22.06.54;	author niklas;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.03.28.11.43.03;	author niklas;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2004.06.05.23.12.36;	author niklas;	state Exp;
branches;
next	;

1.2.8.1
date	2002.06.11.03.28.34;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Defining the interface in terms of char * means most callers are
required to cast their pointers, which is ugly and possibly error
prone. accidentally casting an int to a pointer, for example, instead
of the address of the int. implicit void * casting is safer.

This updates the kernel hash interfaces to use void *. Similar changes
are possible for userland. I think it's safe, but there may be some
peculiar source compatbility issues there, so let's just do the kernel
first.
ok dlg millert
@
text
@/*	$OpenBSD: sha1.h,v 1.5 2007/09/10 22:19:42 henric Exp $	*/

/*
 * SHA-1 in C
 * By Steve Reid <steve@@edmweb.com>
 * 100% Public Domain
 */

#ifndef _SHA1_H_
#define _SHA1_H_

#define	SHA1_BLOCK_LENGTH		64
#define	SHA1_DIGEST_LENGTH		20

typedef struct {
	u_int32_t	state[5];
	u_int64_t	count;
	unsigned char	buffer[SHA1_BLOCK_LENGTH];
} SHA1_CTX;
  
void SHA1Init(SHA1_CTX * context);
void SHA1Transform(u_int32_t state[5], const unsigned char buffer[SHA1_BLOCK_LENGTH]);
void SHA1Update(SHA1_CTX *context, const void *data, unsigned int len);
void SHA1Final(unsigned char digest[SHA1_DIGEST_LENGTH], SHA1_CTX *context);

#endif /* _SHA1_H_ */
@


1.5
log
@Make the hmac ipad/opad globals "const" and fixup the crypto functions
to match.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.4 2004/04/28 20:39:35 hshoexer Exp $	*/
d23 1
a23 1
void SHA1Update(SHA1_CTX *context, const unsigned char *data, unsigned int len);
@


1.4
log
@Some KNF, made bit count u_int64_t instead of u_int32_t (similar to libc).
Added constants for buffer lengths.

ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.3 2002/03/14 01:26:51 millert Exp $	*/
d22 2
a23 2
void SHA1Transform(u_int32_t state[5], unsigned char buffer[SHA1_BLOCK_LENGTH]);
void SHA1Update(SHA1_CTX *context, unsigned char *data, unsigned int len);
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.2 2000/06/04 16:37:02 deraadt Exp $	*/
d12 3
d17 2
a18 2
	u_int32_t	count[2];  
	unsigned char	buffer[64];
a20 1
void SHA1Transform(u_int32_t state[5], unsigned char buffer[64]);
d22 3
a24 2
void SHA1Update(SHA1_CTX * context, unsigned char * data, unsigned int len);
void SHA1Final(unsigned char digest[20], SHA1_CTX * context);
@


1.2
log
@better indent for easier searching
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d18 4
a21 4
void SHA1Transform __P((u_int32_t state[5], unsigned char buffer[64]));
void SHA1Init __P((SHA1_CTX * context));
void SHA1Update __P((SHA1_CTX * context, unsigned char * data, unsigned int len));
void SHA1Final __P((unsigned char digest[20], SHA1_CTX * context));
@


1.2.8.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: sha1.h,v 1.2 2000/06/04 16:37:02 deraadt Exp $	*/
d18 4
a21 4
void SHA1Transform(u_int32_t state[5], unsigned char buffer[64]);
void SHA1Init(SHA1_CTX * context);
void SHA1Update(SHA1_CTX * context, unsigned char * data, unsigned int len);
void SHA1Final(unsigned char digest[20], SHA1_CTX * context);
@


1.1
log
@move crypto code
@
text
@d1 1
a1 1
/*	$OpenBSD: ip_sha1.h,v 1.5 1999/02/17 18:10:24 deraadt Exp $	*/
d19 3
a21 3
void SHA1Init __P((SHA1_CTX* context));
void SHA1Update __P((SHA1_CTX* context, unsigned char* data, unsigned int len));
void SHA1Final __P((unsigned char digest[20], SHA1_CTX* context));
@


1.1.2.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1.2.2
log
@merge in approximately 2.9 into SMP branch
@
text
@d19 3
a21 3
void SHA1Init __P((SHA1_CTX * context));
void SHA1Update __P((SHA1_CTX * context, unsigned char * data, unsigned int len));
void SHA1Final __P((unsigned char digest[20], SHA1_CTX * context));
@


1.1.2.3
log
@Merge in -current from about a week ago
@
text
@d18 4
a21 4
void SHA1Transform(u_int32_t state[5], unsigned char buffer[64]);
void SHA1Init(SHA1_CTX * context);
void SHA1Update(SHA1_CTX * context, unsigned char * data, unsigned int len);
void SHA1Final(unsigned char digest[20], SHA1_CTX * context);
@


1.1.2.4
log
@Merge with the trunk
@
text
@a11 3
#define	SHA1_BLOCK_LENGTH		64
#define	SHA1_DIGEST_LENGTH		20

d14 2
a15 2
	u_int64_t	count;
	unsigned char	buffer[SHA1_BLOCK_LENGTH];
d18 1
d20 2
a21 3
void SHA1Transform(u_int32_t state[5], unsigned char buffer[SHA1_BLOCK_LENGTH]);
void SHA1Update(SHA1_CTX *context, unsigned char *data, unsigned int len);
void SHA1Final(unsigned char digest[SHA1_DIGEST_LENGTH], SHA1_CTX *context);
@


