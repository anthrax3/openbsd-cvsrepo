head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.34
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.30
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.32
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.24
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.28
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.26
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.22
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.20
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.18
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.16
	OPENBSD_5_0:1.13.0.14
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.12
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.10
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.6
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.13.0.8
	OPENBSD_4_6_BASE:1.13
	OPENBSD_4_5:1.13.0.4
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.2
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.12.0.4
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.2
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.11.0.8
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.6
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.4
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.2
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	SMP_SYNC_A:1.9
	SMP_SYNC_B:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.7.0.8
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.7
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	UBC_SYNC_B:1.7
	UBC:1.6.0.4
	UBC_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	SMP:1.3.0.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2;
locks; strict;
comment	@ * @;


1.13
date	2008.06.09.07.49.45;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2007.05.27.05.43.17;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2005.05.25.05.47.53;	author markus;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.20.20.31.18;	author hshoexer;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.05.18.55.20;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.26.10.04.49;	author markus;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.19.17.42.24;	author markus;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.13.09.48.39;	author markus;	state Exp;
branches
	1.6.4.1;
next	1.5;

1.5
date	2001.08.24.15.59.42;	author markus;	state Exp;
branches;
next	1.4;

1.4
date	2001.07.31.16.39.54;	author stevesk;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.09.23.01.32;	author markus;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2000.10.16.22.44.33;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.27.21.06.08;	author provos;	state Exp;
branches;
next	;

1.3.2.1
date	2001.05.14.22.06.53;	author niklas;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2001.07.04.10.40.01;	author niklas;	state Exp;
branches;
next	1.3.2.3;

1.3.2.3
date	2001.10.31.03.11.47;	author nate;	state Exp;
branches;
next	1.3.2.4;

1.3.2.4
date	2002.03.06.02.07.09;	author niklas;	state Exp;
branches;
next	1.3.2.5;

1.3.2.5
date	2002.03.30.08.35.20;	author niklas;	state Exp;
branches;
next	1.3.2.6;

1.3.2.6
date	2004.02.19.10.51.30;	author niklas;	state Exp;
branches;
next	1.3.2.7;

1.3.2.7
date	2004.06.05.23.12.36;	author niklas;	state Exp;
branches;
next	;

1.6.4.1
date	2002.01.31.22.55.29;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.13
log
@constify arguments in wrapper functions; the lower level functions
were already done
@
text
@/*	$OpenBSD: rijndael.h,v 1.12 2007/05/27 05:43:17 tedu Exp $ */

/**
 * rijndael-alg-fst.h
 *
 * @@version 3.0 (December 2000)
 *
 * Optimised ANSI C code for the Rijndael cipher (now AES)
 *
 * @@author Vincent Rijmen <vincent.rijmen@@esat.kuleuven.ac.be>
 * @@author Antoon Bosselaers <antoon.bosselaers@@esat.kuleuven.ac.be>
 * @@author Paulo Barreto <paulo.barreto@@terra.com.br>
 *
 * This code is hereby placed in the public domain.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef __RIJNDAEL_H
#define __RIJNDAEL_H

#define AES_MAXKEYBITS	(256)
#define AES_MAXKEYBYTES	(AES_MAXKEYBITS/8)
/* for 256-bit keys, fewer for less */
#define AES_MAXROUNDS	14

typedef unsigned char	u8;
typedef unsigned short	u16;
typedef unsigned int	u32;

/*  The structure for key information */
typedef struct {
	int	enc_only;		/* context contains only encrypt schedule */
	int	Nr;			/* key-length-dependent number of rounds */
	u32	ek[4*(AES_MAXROUNDS + 1)];	/* encrypt key schedule */
	u32	dk[4*(AES_MAXROUNDS + 1)];	/* decrypt key schedule */
} rijndael_ctx;

int	 rijndael_set_key(rijndael_ctx *, const u_char *, int);
int	 rijndael_set_key_enc_only(rijndael_ctx *, const u_char *, int);
void	 rijndael_decrypt(rijndael_ctx *, const u_char *, u_char *);
void	 rijndael_encrypt(rijndael_ctx *, const u_char *, u_char *);

int	rijndaelKeySetupEnc(unsigned int [], const unsigned char [], int);
int	rijndaelKeySetupDec(unsigned int [], const unsigned char [], int);
void	rijndaelEncrypt(const unsigned int [], int, const unsigned char [],
	    unsigned char []);

#endif /* __RIJNDAEL_H */
@


1.12
log
@make the #defines in rijndael.h a bit more meaningful
ok djm and with a hint from henning
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.11 2005/05/25 05:47:53 markus Exp $ */
d48 4
a51 4
int	 rijndael_set_key(rijndael_ctx *, u_char *, int);
int	 rijndael_set_key_enc_only(rijndael_ctx *, u_char *, int);
void	 rijndael_decrypt(rijndael_ctx *, u_char *, u_char *);
void	 rijndael_encrypt(rijndael_ctx *, u_char *, u_char *);
@


1.11
log
@AESCTR support for ESP (RFC 3686); ok hshoexer
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.10 2004/12/20 20:31:18 hshoexer Exp $ */
d31 4
a34 3
#define MAXKC	(256/32)
#define MAXKB	(256/8)
#define MAXNR	14
d44 2
a45 2
	u32	ek[4*(MAXNR + 1)];	/* encrypt key schedule */
	u32	dk[4*(MAXNR + 1)];	/* decrypt key schedule */
@


1.10
log
@Allow the setkey function of a transform to fail, eg. when an insufficient
number of key bits is supplied.

Only AES and DES/3DES might fail.

ok and help markus@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.9 2004/02/05 18:55:20 deraadt Exp $ */
d54 2
@


1.9
log
@expose two more functions
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.8 2003/12/26 10:04:49 markus Exp $ */
d47 2
a48 2
void	 rijndael_set_key(rijndael_ctx *, u_char *, int);
void	 rijndael_set_key_enc_only(rijndael_ctx *, u_char *, int);
@


1.8
log
@- use 1/2 space for rijndael context in ipsec
- rijndael_set_key_enc_only()  sets up context for encryption only
- rijndael_set_key() always sets up full context
- rijndaelKeySetupDec() gets back original protoype
- uvm: use _enc_only() interface
with hshoexer@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.7 2001/12/19 17:42:24 markus Exp $ */
d51 3
@


1.7
log
@sync KNF with src/usr.bin/ssh
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.6 2001/09/13 09:48:39 markus Exp $ */
d41 1
a41 1
	int	decrypt;
d47 2
a48 1
void	 rijndael_set_key(rijndael_ctx *, u_char *, int, int);
@


1.6
log
@missing $OpenBSD:
@
text
@d1 1
a1 1
/*	$OpenBSD: pf.c,v 1.121 2001/07/30 23:00:37 deraadt Exp $ */
d35 2
a36 2
typedef unsigned char	u8;	
typedef unsigned short	u16;	
@


1.6.4.1
log
@Merge in -current, builds on i386, otherwise untested
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.7 2001/12/19 17:42:24 markus Exp $ */
d35 2
a36 2
typedef unsigned char	u8;
typedef unsigned short	u16;
@


1.5
log
@switch to the optimised AES reference code from
http://www.esat.kuleuven.ac.be/~rijmen/rijndael/rijndael-fst-3.0.zip
the same code is used by ssh, so please make sure to update
usr.sbin/ssh/rijndael.c if you change this code.
tested on sparc (jason) and with swap encryption (me); ok deraadt@@, provos@@
@
text
@d1 2
@


1.4
log
@new BSD-style license and whitespace sync with openssh
@
text
@d1 42
a42 47
/*	$OpenBSD: rijndael.h,v 1.9 2001/07/30 16:23:30 stevesk Exp $	*/

/* This is an independent implementation of the encryption algorithm:   */
/*                                                                      */
/*         RIJNDAEL by Joan Daemen and Vincent Rijmen                   */
/*                                                                      */
/* which is a candidate algorithm in the Advanced Encryption Standard   */
/* programme of the US National Institute of Standards and Technology.  */

/*
   -----------------------------------------------------------------------
   Copyright (c) 2001 Dr Brian Gladman <brg@@gladman.uk.net>, Worcester, UK
   
   TERMS

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

   This software is provided 'as is' with no guarantees of correctness or
   fitness for purpose.
   -----------------------------------------------------------------------
*/

#ifndef _RIJNDAEL_H_
#define _RIJNDAEL_H_

/* 1. Standard types for AES cryptography source code               */

typedef u_int8_t   u1byte; /* an 8 bit unsigned character type */
typedef u_int16_t  u2byte; /* a 16 bit unsigned integer type   */
typedef u_int32_t  u4byte; /* a 32 bit unsigned integer type   */

typedef int8_t     s1byte; /* an 8 bit signed character type   */
typedef int16_t    s2byte; /* a 16 bit signed integer type     */
typedef int32_t    s4byte; /* a 32 bit signed integer type     */

typedef struct _rijndael_ctx {
	u4byte  k_len;
	int decrypt;
	u4byte  e_key[64];
	u4byte  d_key[64];
d45 3
d49 1
a49 11
/* 2. Standard interface for AES cryptographic routines             */

/* These are all based on 32 bit unsigned values and will therefore */
/* require endian conversions for big-endian architectures          */

rijndael_ctx *
rijndael_set_key __P((rijndael_ctx *, const u4byte *, const u4byte, int));
void rijndael_encrypt __P((rijndael_ctx *, const u4byte *, u4byte *));
void rijndael_decrypt __P((rijndael_ctx *, const u4byte *, u4byte *));

#endif /* _RIJNDAEL_H_ */
@


1.3
log
@fix prototype; J.S.Peatfield@@damtp.cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.2 2000/10/16 22:44:33 deraadt Exp $	*/
d9 20
a28 7
/*                                                                      */
/* Copyright in this implementation is held by Dr B R Gladman but I     */
/* hereby give permission for its free direct or derivative use subject */
/* to acknowledgment of its origin and compliance with any conditions   */
/* that the originators of the algorithm place on its exploitation.     */
/*                                                                      */
/* Dr Brian Gladman (gladman@@seven77.demon.co.uk) 14th January 1999     */
d57 1
a57 1
rijndael_set_key  __P((rijndael_ctx *, const u4byte *, const u4byte, int));
@


1.3.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d43 2
a44 1
rijndael_ctx *rijndael_set_key  __P((rijndael_ctx *, const u4byte *, u4byte, int));
@


1.3.2.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.3.2.1 2001/05/14 22:06:53 niklas Exp $	*/
d43 1
a43 2
rijndael_ctx *
rijndael_set_key  __P((rijndael_ctx *, const u4byte *, const u4byte, int));
@


1.3.2.3
log
@Sync the SMP branch to something just after 3.0
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.h,v 1.3.2.2 2001/07/04 10:40:01 niklas Exp $	*/
d3 32
a34 42
/**
 * rijndael-alg-fst.h
 *
 * @@version 3.0 (December 2000)
 *
 * Optimised ANSI C code for the Rijndael cipher (now AES)
 *
 * @@author Vincent Rijmen <vincent.rijmen@@esat.kuleuven.ac.be>
 * @@author Antoon Bosselaers <antoon.bosselaers@@esat.kuleuven.ac.be>
 * @@author Paulo Barreto <paulo.barreto@@terra.com.br>
 *
 * This code is hereby placed in the public domain.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef __RIJNDAEL_H
#define __RIJNDAEL_H

#define MAXKC	(256/32)
#define MAXKB	(256/8)
#define MAXNR	14

typedef unsigned char	u8;	
typedef unsigned short	u16;	
typedef unsigned int	u32;

/*  The structure for key information */
typedef struct {
	int	decrypt;
	int	Nr;			/* key-length-dependent number of rounds */
	u32	ek[4*(MAXNR + 1)];	/* encrypt key schedule */
	u32	dk[4*(MAXNR + 1)];	/* decrypt key schedule */
a36 3
void	 rijndael_set_key(rijndael_ctx *, u_char *, int, int);
void	 rijndael_decrypt(rijndael_ctx *, u_char *, u_char *);
void	 rijndael_encrypt(rijndael_ctx *, u_char *, u_char *);
d38 11
a48 1
#endif /* __RIJNDAEL_H */
@


1.3.2.4
log
@Merge in trunk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d35 2
a36 2
typedef unsigned char	u8;
typedef unsigned short	u16;
@


1.3.2.5
log
@manual sync
@
text
@d1 1
a1 1
/*	$OpenBSD$ */
@


1.3.2.6
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d41 1
a41 1
	int	enc_only;		/* context contains only encrypt schedule */
d47 1
a47 2
void	 rijndael_set_key(rijndael_ctx *, u_char *, int);
void	 rijndael_set_key_enc_only(rijndael_ctx *, u_char *, int);
@


1.3.2.7
log
@Merge with the trunk
@
text
@a51 3
int	rijndaelKeySetupEnc(unsigned int [], const unsigned char [], int);
int	rijndaelKeySetupDec(unsigned int [], const unsigned char [], int);

@


1.2
log
@indent
@
text
@d1 1
a1 1
/*	$OpenBSD: rijndael.c,v 1.3 2000/10/15 14:18:31 markus Exp $	*/
d43 2
a44 1
rijndael_ctx *rijndael_set_key  __P((rijndael_ctx *, const u4byte *, u4byte, int));
@


1.1
log
@use rijndael instead of blowfish because of faster key setup.
break swap paritions into sections, each section has own
encryption key.  if a section's key becomes unreferenced, erase it.
@
text
@d1 16
@

