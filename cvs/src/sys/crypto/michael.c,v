head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.34
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.30
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.32
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.24
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.28
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.26
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.22
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.20
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.18
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.6
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.0.8
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.6
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.4
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.2
	OPENBSD_4_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2008.07.21.19.52.45;	author damien;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.21.18.40.54;	author reyk;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gives this a chance to work on architectures with strict alignment
constraints.
@
text
@/*	$OpenBSD: michael.c,v 1.1 2006/03/21 18:40:54 reyk Exp $	*/

/*
 * Copyright (c) 2005, 2006 Reyk Floeter <reyk@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Implementation of the Michael MIC as defined in IEEE 802.11i for TKIP.
 * The MIC generates a 64bit digest, which shouldn't be used for any other
 * applications except TKIP.
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <crypto/michael.h>

#define ROL(n, x)	(((x) << (n)) | ((x) >> (32 - (n))))
#define ROR(n, x)	(((x) >> (n)) | ((x) << (32 - (n))))
#define XSWAP(x)	(((x) & 0xff00ff00UL) >> 8 | ((x) & 0x00ff00ffUL) << 8)

#if defined(__STRICT_ALIGNMENT) || _BYTE_ORDER != _LITTLE_ENDIAN
#define GETLE32(x)	((x)[0] | (x)[1] << 8 | (x)[2] << 16 | (x)[3] << 24)
#define PUTLE32(x, v)	((x)[0] = (u_int8_t)(v),			\
			 (x)[1] = (u_int8_t)((v) >> 8),			\
			 (x)[2] = (u_int8_t)((v) >> 16),		\
			 (x)[3] = (u_int8_t)((v) >> 24))
#else
#define GETLE32(x)	(*((u_int32_t *)(x)))
#define PUTLE32(x, v)	(*((u_int32_t *)(x)) = (v))
#endif

#define MICHAEL_BLOCK(l, r) do {					\
	r ^= ROL(17, l);						\
	l += r;								\
	r ^= XSWAP(l);							\
	l += r;								\
	r ^= ROL(3, l);							\
	l += r;								\
	r ^= ROR(2, l);							\
	l += r;								\
} while (0)

void
michael_init(MICHAEL_CTX *ctx)
{
	bzero(ctx, sizeof(MICHAEL_CTX));
}

void
michael_update(MICHAEL_CTX *ctx, const u_int8_t *data, u_int len)
{
	int i;

	for (i = 0; i < len; i++) {
		ctx->michael_state |= data[i] << (ctx->michael_count << 3);
		ctx->michael_count++;

		if (ctx->michael_count >= MICHAEL_RAW_BLOCK_LENGTH) {
			ctx->michael_l ^= ctx->michael_state;
			MICHAEL_BLOCK(ctx->michael_l, ctx->michael_r);
			ctx->michael_state = ctx->michael_count = 0;
		}
	}
}

void
michael_final(u_int8_t digest[MICHAEL_DIGEST_LENGTH], MICHAEL_CTX *ctx)
{
	static const u_int8_t pad[] =
	    { 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

	michael_update(ctx, pad, sizeof(pad));

	PUTLE32(digest, ctx->michael_l);
	PUTLE32(digest + MICHAEL_RAW_BLOCK_LENGTH, ctx->michael_r);
}

void
michael_key(const u_int8_t *key, MICHAEL_CTX *ctx)
{
	ctx->michael_l = ctx->michael_key[0] =
	    GETLE32(key);
	ctx->michael_r = ctx->michael_key[1] =
	    GETLE32(key + MICHAEL_RAW_BLOCK_LENGTH);
}
@


1.1
log
@Implementation of the Michael MIC as defined in IEEE 802.11i for TKIP.
The MIC generates a weak 64bit digest protected by an additional key.
Obviously, this digest alg is required for future IEEE 802.11i/WPA
support.

test vectors passed on alpha amd64 mvme68k mvme88k sgi sparc sparc64 vax i386

ok djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d32 1
a32 2
#define VAL32(x)	(*((u_int32_t *)(x)))
#define XSWAP(x)	(((x) & 0xff00ff00UL) >> 8) | ((((x) & 0x00ff00ffUL) << 8))
d34 20
a53 9
#define MICHAEL_BLOCK(l, r) do {						\
	r ^= ROL(17, l);							\
	l += r;									\
	r ^= XSWAP(l);								\
	l += r;									\
	r ^= ROL(3, l);								\
	l += r;									\
	r ^= ROR(2, l);								\
	l += r;									\
d82 2
a83 1
	u_int8_t pad[] = { 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
d87 2
a88 2
	VAL32(digest) = letoh32(ctx->michael_l);
	VAL32(digest + MICHAEL_RAW_BLOCK_LENGTH) = letoh32(ctx->michael_r);
d95 1
a95 1
	    htole32(VAL32(key));
d97 1
a97 1
	    htole32(VAL32(key + MICHAEL_RAW_BLOCK_LENGTH));
@

