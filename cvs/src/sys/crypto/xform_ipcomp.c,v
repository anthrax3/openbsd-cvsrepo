head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.8
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.1.0.10
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.8
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.6
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.7
date	2015.03.16.20.26.24;	author miod;	state Exp;
branches;
next	1.6;
commitid	DRl4We0udLCDFUcm;

1.6
date	2015.03.14.14.35.00;	author logan;	state Exp;
branches;
next	1.5;
commitid	jNEYGbfkfCcWGg8Y;

1.5
date	2015.03.14.03.38.46;	author jsg;	state Exp;
branches;
next	1.4;
commitid	p4LJxGKbi0BU2cG6;

1.4
date	2014.07.12.18.50.00;	author tedu;	state Exp;
branches;
next	1.3;
commitid	C8XZQyreqTUCeixA;

1.3
date	2014.02.18.09.43.34;	author markus;	state Exp;
branches;
next	1.2;

1.2
date	2014.02.11.16.51.19;	author markus;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.07.02.57.24;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Include <sys/param.h> rather than <sys/types.h> when also including
<sys/systm.h>; fixes build on vax due to <machine/macros.h> redeclaring
some functions from <lib/libkern/libkern.h> as inlines.
@
text
@/* $OpenBSD: xform_ipcomp.c,v 1.6 2015/03/14 14:35:00 logan Exp $ */

/*
 * Copyright (c) 2001 Jean-Jacques Bernard-Gundol (jj@@wabbitt.org)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *   derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This file contains a wrapper around the deflate algo compression
 * functions using the zlib library 
 */

#include <sys/param.h>
#include <sys/malloc.h>
#include <sys/systm.h>
#include <lib/libz/zutil.h>

#define Z_METHOD	8
#define Z_MEMLEVEL	8
#define ZBUF		10

u_int32_t deflate_global(u_int8_t *, u_int32_t, int, u_int8_t **);

struct deflate_buf {
	u_int8_t *out;
	u_int32_t size;
	int flag;
};

int window_inflate = -1 * MAX_WBITS;
int window_deflate = -12;

/*
 * This function takes a block of data and (de)compress it using the deflate
 * algorithm
 */

u_int32_t
deflate_global(u_int8_t *data, u_int32_t size, int decomp, u_int8_t **out)
{
	z_stream zbuf;
	u_int8_t *output;
	u_int32_t count, result;
	int error, i = 0, j;
	struct deflate_buf buf[ZBUF];

	bzero(&zbuf, sizeof(z_stream));
	for (j = 0; j < ZBUF; j++)
		buf[j].flag = 0;

	zbuf.next_in = data;	/* data that is going to be processed */
	zbuf.zalloc = zcalloc;
	zbuf.zfree = zcfree;
	zbuf.opaque = Z_NULL;
	zbuf.avail_in = size;	/* Total length of data to be processed */

	if (decomp) {
		/*
	 	 * Choose a buffer with 4x the size of the input buffer
	 	 * for the size of the output buffer in the case of
	 	 * decompression. If it's not sufficient, it will need to be
	 	 * updated while the decompression is going on
	 	 */
		if (size < 32 * 1024)
			size *= 4;
	}
	buf[i].out = malloc((u_long)size, M_CRYPTO_DATA, M_NOWAIT);
	if (buf[i].out == NULL)
		goto bad;
	buf[i].size = size;
	buf[i].flag = 1;
	i++;

	zbuf.next_out = buf[0].out;
	zbuf.avail_out = buf[0].size;

	error = decomp ?
	    inflateInit2(&zbuf, window_inflate) :
	    deflateInit2(&zbuf, Z_DEFAULT_COMPRESSION, Z_METHOD,
	    window_deflate, Z_MEMLEVEL, Z_DEFAULT_STRATEGY);

	if (error != Z_OK)
		goto bad;
	for (;;) {
		error = decomp ?
		    inflate(&zbuf, Z_PARTIAL_FLUSH) :
		    deflate(&zbuf, Z_FINISH);
		if (error == Z_STREAM_END)
			break;
		if (error != Z_OK)
			goto bad;
		if (zbuf.avail_out == 0 && i < (ZBUF - 1)) {
			/* we need more output space, allocate size */
			if (size < 32 * 1024)
				size *= 2;
			buf[i].out = malloc((u_long)size, M_CRYPTO_DATA,
			    M_NOWAIT);
			if (buf[i].out == NULL)
				goto bad;
			zbuf.next_out = buf[i].out;
			buf[i].size = size;
			buf[i].flag = 1;
			zbuf.avail_out = buf[i].size;
			i++;
		} else
			goto bad;	/* out of buffers */
	}
	result = count = zbuf.total_out;

	*out = malloc((u_long)result, M_CRYPTO_DATA, M_NOWAIT);
	if (*out == NULL)
		goto bad;
	if (decomp)
		inflateEnd(&zbuf);
	else
		deflateEnd(&zbuf);
	output = *out;
	for (j = 0; buf[j].flag != 0; j++) {
		if (count > buf[j].size) {
			bcopy(buf[j].out, *out, buf[j].size);
			*out += buf[j].size;
			free(buf[j].out, M_CRYPTO_DATA, 0);
			count -= buf[j].size;
		} else {
			/* it should be the last buffer */
			bcopy(buf[j].out, *out, count);
			*out += count;
			free(buf[j].out, M_CRYPTO_DATA, 0);
			count = 0;
		}
	}
	*out = output;
	return result;

bad:
	*out = NULL;
	for (j = 0; buf[j].flag != 0; j++)
		free(buf[j].out, M_CRYPTO_DATA, 0);
	if (decomp)
		inflateEnd(&zbuf);
	else
		deflateEnd(&zbuf);
	return 0;
}
@


1.6
log
@Remove wrong reference to zlib.

OK deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: xform_ipcomp.c,v 1.5 2015/03/14 03:38:46 jsg Exp $ */
d35 1
a35 1
#include <sys/types.h>
@


1.5
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@d1 1
a1 1
/* $OpenBSD: xform_ipcomp.c,v 1.4 2014/07/12 18:50:00 tedu Exp $ */
d32 1
a32 1
 * functions using the zlib library (see net/zlib.{c,h})
@


1.4
log
@add a size argument to free. will be used soon, but for now default to 0.
after discussions with beck deraadt kettenis.
@
text
@d1 1
a1 1
/* $OpenBSD: xform_ipcomp.c,v 1.3 2014/02/18 09:43:34 markus Exp $ */
a36 1
#include <sys/param.h>
@


1.3
log
@fix IPComp interop with linux: switch Z_PARTIAL_FLUSH to Z_FINISH for
deflate(); this hurts interop with broken old openbsd releases; ok reyk@@
@
text
@d1 1
a1 1
/* $OpenBSD: xform_ipcomp.c,v 1.1 2011/07/07 02:57:24 deraadt Exp $ */
d145 1
a145 1
			free(buf[j].out, M_CRYPTO_DATA);
d151 1
a151 1
			free(buf[j].out, M_CRYPTO_DATA);
d161 1
a161 1
		free(buf[j].out, M_CRYPTO_DATA);
@


1.2
log
@- grow the decompression buffer more aggressively if we have
  a high compression ratio, e.g. for ping -s 10000 -p aa
- deal with inflate returning Z_BUF_ERROR if the output buffer is full.
  this can happen in some edge cases with upgraded libz from 2004
ok mikeb@@
@
text
@a42 1
#define MINCOMP		2	/* won't be used, but must be defined */
d62 1
a62 1
deflate_global(u_int8_t *data, u_int32_t size, int comp, u_int8_t **out)
a63 2
	/* comp indicates whether we compress (0) or decompress (1) */

d80 1
a80 1
	if (comp) {
d100 2
a101 1
	error = comp ? inflateInit2(&zbuf, window_inflate) :
d108 6
a113 5
		error = comp ? inflate(&zbuf, Z_PARTIAL_FLUSH) :
		    deflate(&zbuf, Z_PARTIAL_FLUSH);
		if (error != Z_OK && error != Z_STREAM_END &&
		    !(error == Z_BUF_ERROR && comp && zbuf.avail_in == 0 &&
		    zbuf.avail_out == 0))
d115 1
a115 3
		else if (zbuf.avail_in == 0 && zbuf.avail_out != 0)
			goto end;
		else if (zbuf.avail_out == 0 && i < (ZBUF - 1)) {
d129 1
a129 1
			goto bad;
a130 2

end:
d136 1
a136 1
	if (comp)
d162 1
a162 1
	if (comp)
@


1.1
log
@Replace the cruddy old sys/net/zlib.[ch].  We now use the sys/lib/libz
code.  Missing chunks of the API are imported from the libc version,
with a few #ifdef's to port it into the kernel environment.

The bootblocks already used the newer code, and should encounter no
surprises since there are so few changes to the existing files. In
the kernel, ipcomp and kernel ppp are changed to the new API.
ipcomp has been tested.

ok tedu the brave
@
text
@d1 1
a1 1
/* $OpenBSD: deflate.c,v 1.5 2007/09/13 21:26:41 hshoexer Exp $ */
d83 1
a83 8
	if (comp == 0) {
		buf[i].out = malloc((u_long)size, M_CRYPTO_DATA, M_NOWAIT);
		if (buf[i].out == NULL)
			goto bad;
		buf[i].size = size;
		buf[i].flag = 1;
		i++;
	} else {
d90 2
a91 6
		buf[i].out = malloc((u_long)(size * 4), M_CRYPTO_DATA, M_NOWAIT);
		if (buf[i].out == NULL)
			goto bad;
		buf[i].size = size * 4;
		buf[i].flag = 1;
		i++;
d93 6
d112 3
a114 1
		if (error != Z_OK && error != Z_STREAM_END)
d120 2
@

