head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.10
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.6
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.18.0.4
	OPENBSD_5_8_BASE:1.18
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.8.0.18
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.16
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.12
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.18
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.16
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.14
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.12
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	SMP_SYNC_A:1.6
	SMP_SYNC_B:1.6
	OPENBSD_3_5:1.2.0.6
	OPENBSD_3_5_BASE:1.2
	SMP:1.2.0.4
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2;
locks; strict;
comment	@ * @;


1.18
date	2015.03.14.03.38.46;	author jsg;	state Exp;
branches;
next	1.17;
commitid	p4LJxGKbi0BU2cG6;

1.17
date	2014.12.31.16.56.55;	author tedu;	state Exp;
branches;
next	1.16;
commitid	jyGiMBwR7la68ycx;

1.16
date	2014.12.23.20.40.06;	author tedu;	state Exp;
branches;
next	1.15;
commitid	tKW6eXowekpzuCzu;

1.15
date	2014.12.23.20.34.41;	author tedu;	state Exp;
branches;
next	1.14;
commitid	FUzzrA660HMEnr1A;

1.14
date	2014.12.23.19.21.58;	author tedu;	state Exp;
branches;
next	1.13;
commitid	kFcZzoQkNtLrGH5I;

1.13
date	2014.12.19.17.16.57;	author tedu;	state Exp;
branches;
next	1.12;
commitid	6HvKDCzNJEry23Kq;

1.12
date	2014.12.19.02.50.27;	author tedu;	state Exp;
branches;
next	1.11;
commitid	1V6vIitX5vbxeXIn;

1.11
date	2014.12.18.20.29.08;	author tedu;	state Exp;
branches;
next	1.10;
commitid	lb9kNSjnA5wxP5Il;

1.10
date	2014.12.17.19.40.24;	author tedu;	state Exp;
branches;
next	1.9;
commitid	z2XJxhrCQzU5hiPv;

1.9
date	2014.11.16.17.39.09;	author tedu;	state Exp;
branches;
next	1.8;
commitid	ng8vnAVgB6pQddBw;

1.8
date	2011.01.11.15.42.05;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.06.22.23.20;	author djm;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.03.02.57.36;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.03.02.55.56;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.04.29.14.13.18;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.28.23.11.57;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.03.18.26.34;	author fgsch;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2003.07.24.08.03.19;	author itojun;	state Exp;
branches;
next	;

1.2.4.1
date	2004.02.19.10.51.30;	author niklas;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2004.06.05.23.12.36;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Remove some includes include-what-you-use claims don't
have any direct symbols used.  Tested for indirect use by compiling
amd64/i386/sparc64 kernels.

ok tedu@@ deraadt@@
@
text
@/*	$OpenBSD: sha2.c,v 1.17 2014/12/31 16:56:55 tedu Exp $	*/

/*
 * FILE:	sha2.c
 * AUTHOR:	Aaron D. Gifford <me@@aarongifford.com>
 * 
 * Copyright (c) 2000-2001, Aaron D. Gifford
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTOR(S) ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTOR(S) BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * $From: sha2.c,v 1.1 2001/11/08 00:01:51 adg Exp adg $
 */

#include <sys/time.h>
#include <sys/systm.h>
#include <crypto/sha2.h>

/*
 * UNROLLED TRANSFORM LOOP NOTE:
 * You can define SHA2_UNROLL_TRANSFORM to use the unrolled transform
 * loop version for the hash transform rounds (defined using macros
 * later in this file).  Either define on the command line, for example:
 *
 *   cc -DSHA2_UNROLL_TRANSFORM -o sha2 sha2.c sha2prog.c
 *
 * or define below:
 *
 *   #define SHA2_UNROLL_TRANSFORM
 *
 */
#ifndef SMALL_KERNEL
#if defined(__amd64__) || defined(__i386__)
#define SHA2_UNROLL_TRANSFORM
#endif
#endif

/*** SHA-256/384/512 Machine Architecture Definitions *****************/
/*
 * BYTE_ORDER NOTE:
 *
 * Please make sure that your system defines BYTE_ORDER.  If your
 * architecture is little-endian, make sure it also defines
 * LITTLE_ENDIAN and that the two (BYTE_ORDER and LITTLE_ENDIAN) are
 * equivilent.
 *
 * If your system does not define the above, then you can do so by
 * hand like this:
 *
 *   #define LITTLE_ENDIAN 1234
 *   #define BIG_ENDIAN    4321
 *
 * And for little-endian machines, add:
 *
 *   #define BYTE_ORDER LITTLE_ENDIAN 
 *
 * Or for big-endian machines:
 *
 *   #define BYTE_ORDER BIG_ENDIAN
 *
 * The FreeBSD machine this was written on defines BYTE_ORDER
 * appropriately by including <sys/types.h> (which in turn includes
 * <machine/endian.h> where the appropriate definitions are actually
 * made).
 */
#if !defined(BYTE_ORDER) || (BYTE_ORDER != LITTLE_ENDIAN && BYTE_ORDER != BIG_ENDIAN)
#error Define BYTE_ORDER to be equal to either LITTLE_ENDIAN or BIG_ENDIAN
#endif


/*** SHA-256/384/512 Various Length Definitions ***********************/
/* NOTE: Most of these are in sha2.h */
#define SHA256_SHORT_BLOCK_LENGTH	(SHA256_BLOCK_LENGTH - 8)
#define SHA384_SHORT_BLOCK_LENGTH	(SHA384_BLOCK_LENGTH - 16)
#define SHA512_SHORT_BLOCK_LENGTH	(SHA512_BLOCK_LENGTH - 16)

/*
 * Macro for incrementally adding the unsigned 64-bit integer n to the
 * unsigned 128-bit integer (represented using a two-element array of
 * 64-bit words):
 */
#define ADDINC128(w,n)	{ \
	(w)[0] += (u_int64_t)(n); \
	if ((w)[0] < (n)) { \
		(w)[1]++; \
	} \
}

/*** THE SIX LOGICAL FUNCTIONS ****************************************/
/*
 * Bit shifting and rotation (used by the six SHA-XYZ logical functions:
 *
 *   NOTE:  The naming of R and S appears backwards here (R is a SHIFT and
 *   S is a ROTATION) because the SHA-256/384/512 description document
 *   (see http://csrc.nist.gov/cryptval/shs/sha256-384-512.pdf) uses this
 *   same "backwards" definition.
 */
/* Shift-right (used in SHA-256, SHA-384, and SHA-512): */
#define R(b,x) 		((x) >> (b))
/* 32-bit Rotate-right (used in SHA-256): */
#define S32(b,x)	(((x) >> (b)) | ((x) << (32 - (b))))
/* 64-bit Rotate-right (used in SHA-384 and SHA-512): */
#define S64(b,x)	(((x) >> (b)) | ((x) << (64 - (b))))

/* Two of six logical functions used in SHA-256, SHA-384, and SHA-512: */
#define Ch(x,y,z)	(((x) & (y)) ^ ((~(x)) & (z)))
#define Maj(x,y,z)	(((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))

/* Four of six logical functions used in SHA-256: */
#define Sigma0_256(x)	(S32(2,  (x)) ^ S32(13, (x)) ^ S32(22, (x)))
#define Sigma1_256(x)	(S32(6,  (x)) ^ S32(11, (x)) ^ S32(25, (x)))
#define sigma0_256(x)	(S32(7,  (x)) ^ S32(18, (x)) ^ R(3 ,   (x)))
#define sigma1_256(x)	(S32(17, (x)) ^ S32(19, (x)) ^ R(10,   (x)))

/* Four of six logical functions used in SHA-384 and SHA-512: */
#define Sigma0_512(x)	(S64(28, (x)) ^ S64(34, (x)) ^ S64(39, (x)))
#define Sigma1_512(x)	(S64(14, (x)) ^ S64(18, (x)) ^ S64(41, (x)))
#define sigma0_512(x)	(S64( 1, (x)) ^ S64( 8, (x)) ^ R( 7,   (x)))
#define sigma1_512(x)	(S64(19, (x)) ^ S64(61, (x)) ^ R( 6,   (x)))

/*** INTERNAL FUNCTION PROTOTYPES *************************************/
/* NOTE: These should not be accessed directly from outside this
 * library -- they are intended for private internal visibility/use
 * only.
 */
void SHA512Last(SHA2_CTX *);
void SHA256Transform(u_int32_t *, const u_int8_t *);
void SHA512Transform(u_int64_t *, const u_int8_t *);


/*** SHA-XYZ INITIAL HASH VALUES AND CONSTANTS ************************/
/* Hash constant words K for SHA-256: */
const static u_int32_t K256[64] = {
	0x428a2f98UL, 0x71374491UL, 0xb5c0fbcfUL, 0xe9b5dba5UL,
	0x3956c25bUL, 0x59f111f1UL, 0x923f82a4UL, 0xab1c5ed5UL,
	0xd807aa98UL, 0x12835b01UL, 0x243185beUL, 0x550c7dc3UL,
	0x72be5d74UL, 0x80deb1feUL, 0x9bdc06a7UL, 0xc19bf174UL,
	0xe49b69c1UL, 0xefbe4786UL, 0x0fc19dc6UL, 0x240ca1ccUL,
	0x2de92c6fUL, 0x4a7484aaUL, 0x5cb0a9dcUL, 0x76f988daUL,
	0x983e5152UL, 0xa831c66dUL, 0xb00327c8UL, 0xbf597fc7UL,
	0xc6e00bf3UL, 0xd5a79147UL, 0x06ca6351UL, 0x14292967UL,
	0x27b70a85UL, 0x2e1b2138UL, 0x4d2c6dfcUL, 0x53380d13UL,
	0x650a7354UL, 0x766a0abbUL, 0x81c2c92eUL, 0x92722c85UL,
	0xa2bfe8a1UL, 0xa81a664bUL, 0xc24b8b70UL, 0xc76c51a3UL,
	0xd192e819UL, 0xd6990624UL, 0xf40e3585UL, 0x106aa070UL,
	0x19a4c116UL, 0x1e376c08UL, 0x2748774cUL, 0x34b0bcb5UL,
	0x391c0cb3UL, 0x4ed8aa4aUL, 0x5b9cca4fUL, 0x682e6ff3UL,
	0x748f82eeUL, 0x78a5636fUL, 0x84c87814UL, 0x8cc70208UL,
	0x90befffaUL, 0xa4506cebUL, 0xbef9a3f7UL, 0xc67178f2UL
};

/* Initial hash value H for SHA-256: */
const static u_int32_t sha256_initial_hash_value[8] = {
	0x6a09e667UL,
	0xbb67ae85UL,
	0x3c6ef372UL,
	0xa54ff53aUL,
	0x510e527fUL,
	0x9b05688cUL,
	0x1f83d9abUL,
	0x5be0cd19UL
};

/* Hash constant words K for SHA-384 and SHA-512: */
const static u_int64_t K512[80] = {
	0x428a2f98d728ae22ULL, 0x7137449123ef65cdULL,
	0xb5c0fbcfec4d3b2fULL, 0xe9b5dba58189dbbcULL,
	0x3956c25bf348b538ULL, 0x59f111f1b605d019ULL,
	0x923f82a4af194f9bULL, 0xab1c5ed5da6d8118ULL,
	0xd807aa98a3030242ULL, 0x12835b0145706fbeULL,
	0x243185be4ee4b28cULL, 0x550c7dc3d5ffb4e2ULL,
	0x72be5d74f27b896fULL, 0x80deb1fe3b1696b1ULL,
	0x9bdc06a725c71235ULL, 0xc19bf174cf692694ULL,
	0xe49b69c19ef14ad2ULL, 0xefbe4786384f25e3ULL,
	0x0fc19dc68b8cd5b5ULL, 0x240ca1cc77ac9c65ULL,
	0x2de92c6f592b0275ULL, 0x4a7484aa6ea6e483ULL,
	0x5cb0a9dcbd41fbd4ULL, 0x76f988da831153b5ULL,
	0x983e5152ee66dfabULL, 0xa831c66d2db43210ULL,
	0xb00327c898fb213fULL, 0xbf597fc7beef0ee4ULL,
	0xc6e00bf33da88fc2ULL, 0xd5a79147930aa725ULL,
	0x06ca6351e003826fULL, 0x142929670a0e6e70ULL,
	0x27b70a8546d22ffcULL, 0x2e1b21385c26c926ULL,
	0x4d2c6dfc5ac42aedULL, 0x53380d139d95b3dfULL,
	0x650a73548baf63deULL, 0x766a0abb3c77b2a8ULL,
	0x81c2c92e47edaee6ULL, 0x92722c851482353bULL,
	0xa2bfe8a14cf10364ULL, 0xa81a664bbc423001ULL,
	0xc24b8b70d0f89791ULL, 0xc76c51a30654be30ULL,
	0xd192e819d6ef5218ULL, 0xd69906245565a910ULL,
	0xf40e35855771202aULL, 0x106aa07032bbd1b8ULL,
	0x19a4c116b8d2d0c8ULL, 0x1e376c085141ab53ULL,
	0x2748774cdf8eeb99ULL, 0x34b0bcb5e19b48a8ULL,
	0x391c0cb3c5c95a63ULL, 0x4ed8aa4ae3418acbULL,
	0x5b9cca4f7763e373ULL, 0x682e6ff3d6b2b8a3ULL,
	0x748f82ee5defb2fcULL, 0x78a5636f43172f60ULL,
	0x84c87814a1f0ab72ULL, 0x8cc702081a6439ecULL,
	0x90befffa23631e28ULL, 0xa4506cebde82bde9ULL,
	0xbef9a3f7b2c67915ULL, 0xc67178f2e372532bULL,
	0xca273eceea26619cULL, 0xd186b8c721c0c207ULL,
	0xeada7dd6cde0eb1eULL, 0xf57d4f7fee6ed178ULL,
	0x06f067aa72176fbaULL, 0x0a637dc5a2c898a6ULL,
	0x113f9804bef90daeULL, 0x1b710b35131c471bULL,
	0x28db77f523047d84ULL, 0x32caab7b40c72493ULL,
	0x3c9ebe0a15c9bebcULL, 0x431d67c49c100d4cULL,
	0x4cc5d4becb3e42b6ULL, 0x597f299cfc657e2aULL,
	0x5fcb6fab3ad6faecULL, 0x6c44198c4a475817ULL
};

/* Initial hash value H for SHA-384 */
const static u_int64_t sha384_initial_hash_value[8] = {
	0xcbbb9d5dc1059ed8ULL,
	0x629a292a367cd507ULL,
	0x9159015a3070dd17ULL,
	0x152fecd8f70e5939ULL,
	0x67332667ffc00b31ULL,
	0x8eb44a8768581511ULL,
	0xdb0c2e0d64f98fa7ULL,
	0x47b5481dbefa4fa4ULL
};

/* Initial hash value H for SHA-512 */
const static u_int64_t sha512_initial_hash_value[8] = {
	0x6a09e667f3bcc908ULL,
	0xbb67ae8584caa73bULL,
	0x3c6ef372fe94f82bULL,
	0xa54ff53a5f1d36f1ULL,
	0x510e527fade682d1ULL,
	0x9b05688c2b3e6c1fULL,
	0x1f83d9abfb41bd6bULL,
	0x5be0cd19137e2179ULL
};


/*** SHA-256: *********************************************************/
void
SHA256Init(SHA2_CTX *context)
{
	memcpy(context->state.st32, sha256_initial_hash_value,
	    SHA256_DIGEST_LENGTH);
	memset(context->buffer, 0, SHA256_BLOCK_LENGTH);
	context->bitcount[0] = 0;
}

#ifdef SHA2_UNROLL_TRANSFORM

/* Unrolled SHA-256 round macros: */

#define ROUND256_0_TO_15(a,b,c,d,e,f,g,h) do {				    \
	W256[j] = (u_int32_t)data[3] | ((u_int32_t)data[2] << 8) |	    \
	    ((u_int32_t)data[1] << 16) | ((u_int32_t)data[0] << 24);	    \
	data += 4;							    \
	T1 = (h) + Sigma1_256((e)) + Ch((e), (f), (g)) + K256[j] + W256[j]; \
	(d) += T1;							    \
	(h) = T1 + Sigma0_256((a)) + Maj((a), (b), (c));		    \
	j++;								    \
} while(0)

#define ROUND256(a,b,c,d,e,f,g,h) do {					    \
	s0 = W256[(j+1)&0x0f];						    \
	s0 = sigma0_256(s0);						    \
	s1 = W256[(j+14)&0x0f];						    \
	s1 = sigma1_256(s1);						    \
	T1 = (h) + Sigma1_256((e)) + Ch((e), (f), (g)) + K256[j] +	    \
	     (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);		    \
	(d) += T1;							    \
	(h) = T1 + Sigma0_256((a)) + Maj((a), (b), (c));		    \
	j++;								    \
} while(0)

void
SHA256Transform(u_int32_t *state, const u_int8_t *data)
{
	u_int32_t	a, b, c, d, e, f, g, h, s0, s1;
	u_int32_t	T1, W256[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state[0];
	b = state[1];
	c = state[2];
	d = state[3];
	e = state[4];
	f = state[5];
	g = state[6];
	h = state[7];

	j = 0;
	do {
		/* Rounds 0 to 15 (unrolled): */
		ROUND256_0_TO_15(a,b,c,d,e,f,g,h);
		ROUND256_0_TO_15(h,a,b,c,d,e,f,g);
		ROUND256_0_TO_15(g,h,a,b,c,d,e,f);
		ROUND256_0_TO_15(f,g,h,a,b,c,d,e);
		ROUND256_0_TO_15(e,f,g,h,a,b,c,d);
		ROUND256_0_TO_15(d,e,f,g,h,a,b,c);
		ROUND256_0_TO_15(c,d,e,f,g,h,a,b);
		ROUND256_0_TO_15(b,c,d,e,f,g,h,a);
	} while (j < 16);

	/* Now for the remaining rounds to 64: */
	do {
		ROUND256(a,b,c,d,e,f,g,h);
		ROUND256(h,a,b,c,d,e,f,g);
		ROUND256(g,h,a,b,c,d,e,f);
		ROUND256(f,g,h,a,b,c,d,e);
		ROUND256(e,f,g,h,a,b,c,d);
		ROUND256(d,e,f,g,h,a,b,c);
		ROUND256(c,d,e,f,g,h,a,b);
		ROUND256(b,c,d,e,f,g,h,a);
	} while (j < 64);

	/* Compute the current intermediate hash value */
	state[0] += a;
	state[1] += b;
	state[2] += c;
	state[3] += d;
	state[4] += e;
	state[5] += f;
	state[6] += g;
	state[7] += h;

	/* Clean up */
	a = b = c = d = e = f = g = h = T1 = 0;
}

#else /* SHA2_UNROLL_TRANSFORM */

void
SHA256Transform(u_int32_t *state, const u_int8_t *data)
{
	u_int32_t	a, b, c, d, e, f, g, h, s0, s1;
	u_int32_t	T1, T2, W256[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state[0];
	b = state[1];
	c = state[2];
	d = state[3];
	e = state[4];
	f = state[5];
	g = state[6];
	h = state[7];

	j = 0;
	do {
		W256[j] = (u_int32_t)data[3] | ((u_int32_t)data[2] << 8) |
		    ((u_int32_t)data[1] << 16) | ((u_int32_t)data[0] << 24);
		data += 4;
		/* Apply the SHA-256 compression function to update a..h */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + W256[j];
		T2 = Sigma0_256(a) + Maj(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + T1;
		d = c;
		c = b;
		b = a;
		a = T1 + T2;

		j++;
	} while (j < 16);

	do {
		/* Part of the message block expansion: */
		s0 = W256[(j+1)&0x0f];
		s0 = sigma0_256(s0);
		s1 = W256[(j+14)&0x0f];	
		s1 = sigma1_256(s1);

		/* Apply the SHA-256 compression function to update a..h */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + 
		     (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);
		T2 = Sigma0_256(a) + Maj(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + T1;
		d = c;
		c = b;
		b = a;
		a = T1 + T2;

		j++;
	} while (j < 64);

	/* Compute the current intermediate hash value */
	state[0] += a;
	state[1] += b;
	state[2] += c;
	state[3] += d;
	state[4] += e;
	state[5] += f;
	state[6] += g;
	state[7] += h;

	/* Clean up */
	a = b = c = d = e = f = g = h = T1 = T2 = 0;
}

#endif /* SHA2_UNROLL_TRANSFORM */

void
SHA256Update(SHA2_CTX *context, const void *dataptr, size_t len)
{
	const uint8_t *data = dataptr;
	size_t	freespace, usedspace;

	/* Calling with no data is valid (we do nothing) */
	if (len == 0)
		return;

	usedspace = (context->bitcount[0] >> 3) % SHA256_BLOCK_LENGTH;
	if (usedspace > 0) {
		/* Calculate how much free space is available in the buffer */
		freespace = SHA256_BLOCK_LENGTH - usedspace;

		if (len >= freespace) {
			/* Fill the buffer completely and process it */
			memcpy(&context->buffer[usedspace], data, freespace);
			context->bitcount[0] += freespace << 3;
			len -= freespace;
			data += freespace;
			SHA256Transform(context->state.st32, context->buffer);
		} else {
			/* The buffer is not yet full */
			memcpy(&context->buffer[usedspace], data, len);
			context->bitcount[0] += len << 3;
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA256_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		SHA256Transform(context->state.st32, data);
		context->bitcount[0] += SHA256_BLOCK_LENGTH << 3;
		len -= SHA256_BLOCK_LENGTH;
		data += SHA256_BLOCK_LENGTH;
	}
	if (len > 0) {
		/* There's left-overs, so save 'em */
		memcpy(context->buffer, data, len);
		context->bitcount[0] += len << 3;
	}
	/* Clean up: */
	usedspace = freespace = 0;
}

void
SHA256Final(u_int8_t digest[], SHA2_CTX *context)
{
	unsigned int	usedspace;

	usedspace = (context->bitcount[0] >> 3) % SHA256_BLOCK_LENGTH;
#if BYTE_ORDER == LITTLE_ENDIAN
	/* Convert FROM host byte order */
	context->bitcount[0] = swap64(context->bitcount[0]);
#endif
	if (usedspace > 0) {
		/* Begin padding with a 1 bit: */
		context->buffer[usedspace++] = 0x80;

		if (usedspace <= SHA256_SHORT_BLOCK_LENGTH) {
			/* Set-up for the last transform: */
			memset(&context->buffer[usedspace], 0,
			    SHA256_SHORT_BLOCK_LENGTH - usedspace);
		} else {
			if (usedspace < SHA256_BLOCK_LENGTH) {
				memset(&context->buffer[usedspace], 0,
				    SHA256_BLOCK_LENGTH - usedspace);
			}
			/* Do second-to-last transform: */
			SHA256Transform(context->state.st32, context->buffer);

			/* And set-up for the last transform: */
			memset(context->buffer, 0,
			    SHA256_SHORT_BLOCK_LENGTH);
		}
	} else {
		/* Set-up for the last transform: */
		memset(context->buffer, 0, SHA256_SHORT_BLOCK_LENGTH);

		/* Begin padding with a 1 bit: */
		*context->buffer = 0x80;
	}
	/* Set the bit count: */
	*(u_int64_t *)&context->buffer[SHA256_SHORT_BLOCK_LENGTH] = context->bitcount[0];

	/* Final transform: */
	SHA256Transform(context->state.st32, context->buffer);

#if BYTE_ORDER == LITTLE_ENDIAN
	{
		/* Convert TO host byte order */
		int	j;
		for (j = 0; j < 8; j++) {
			context->state.st32[j] = swap32(context->state.st32[j]);
		}
	}
#endif
	memcpy(digest, context->state.st32, SHA256_DIGEST_LENGTH);
	/* Clean up state data: */
	explicit_bzero(context, sizeof(*context));
	usedspace = 0;
}


/*** SHA-512: *********************************************************/
void
SHA512Init(SHA2_CTX *context)
{
	memcpy(context->state.st64, sha512_initial_hash_value,
	    SHA512_DIGEST_LENGTH);
	memset(context->buffer, 0, SHA512_BLOCK_LENGTH);
	context->bitcount[0] = context->bitcount[1] =  0;
}

#ifdef SHA2_UNROLL_TRANSFORM

/* Unrolled SHA-512 round macros: */

#define ROUND512_0_TO_15(a,b,c,d,e,f,g,h) do {				    \
	W512[j] = (u_int64_t)data[7] | ((u_int64_t)data[6] << 8) |	    \
	    ((u_int64_t)data[5] << 16) | ((u_int64_t)data[4] << 24) |	    \
	    ((u_int64_t)data[3] << 32) | ((u_int64_t)data[2] << 40) |	    \
	    ((u_int64_t)data[1] << 48) | ((u_int64_t)data[0] << 56);	    \
	data += 8;							    \
	T1 = (h) + Sigma1_512((e)) + Ch((e), (f), (g)) + K512[j] + W512[j]; \
	(d) += T1;							    \
	(h) = T1 + Sigma0_512((a)) + Maj((a), (b), (c));		    \
	j++;								    \
} while(0)


#define ROUND512(a,b,c,d,e,f,g,h) do {					    \
	s0 = W512[(j+1)&0x0f];						    \
	s0 = sigma0_512(s0);						    \
	s1 = W512[(j+14)&0x0f];						    \
	s1 = sigma1_512(s1);						    \
	T1 = (h) + Sigma1_512((e)) + Ch((e), (f), (g)) + K512[j] +	    \
             (W512[j&0x0f] += s1 + W512[(j+9)&0x0f] + s0);		    \
	(d) += T1;							    \
	(h) = T1 + Sigma0_512((a)) + Maj((a), (b), (c));		    \
	j++;								    \
} while(0)

void
SHA512Transform(u_int64_t *state, const u_int8_t *data)
{
	u_int64_t	a, b, c, d, e, f, g, h, s0, s1;
	u_int64_t	T1, W512[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state[0];
	b = state[1];
	c = state[2];
	d = state[3];
	e = state[4];
	f = state[5];
	g = state[6];
	h = state[7];

	j = 0;
	do {
		ROUND512_0_TO_15(a,b,c,d,e,f,g,h);
		ROUND512_0_TO_15(h,a,b,c,d,e,f,g);
		ROUND512_0_TO_15(g,h,a,b,c,d,e,f);
		ROUND512_0_TO_15(f,g,h,a,b,c,d,e);
		ROUND512_0_TO_15(e,f,g,h,a,b,c,d);
		ROUND512_0_TO_15(d,e,f,g,h,a,b,c);
		ROUND512_0_TO_15(c,d,e,f,g,h,a,b);
		ROUND512_0_TO_15(b,c,d,e,f,g,h,a);
	} while (j < 16);

	/* Now for the remaining rounds up to 79: */
	do {
		ROUND512(a,b,c,d,e,f,g,h);
		ROUND512(h,a,b,c,d,e,f,g);
		ROUND512(g,h,a,b,c,d,e,f);
		ROUND512(f,g,h,a,b,c,d,e);
		ROUND512(e,f,g,h,a,b,c,d);
		ROUND512(d,e,f,g,h,a,b,c);
		ROUND512(c,d,e,f,g,h,a,b);
		ROUND512(b,c,d,e,f,g,h,a);
	} while (j < 80);

	/* Compute the current intermediate hash value */
	state[0] += a;
	state[1] += b;
	state[2] += c;
	state[3] += d;
	state[4] += e;
	state[5] += f;
	state[6] += g;
	state[7] += h;

	/* Clean up */
	a = b = c = d = e = f = g = h = T1 = 0;
}

#else /* SHA2_UNROLL_TRANSFORM */

void
SHA512Transform(u_int64_t *state, const u_int8_t *data)
{
	u_int64_t	a, b, c, d, e, f, g, h, s0, s1;
	u_int64_t	T1, T2, W512[16];
	int		j;

	/* Initialize registers with the prev. intermediate value */
	a = state[0];
	b = state[1];
	c = state[2];
	d = state[3];
	e = state[4];
	f = state[5];
	g = state[6];
	h = state[7];

	j = 0;
	do {
		W512[j] = (u_int64_t)data[7] | ((u_int64_t)data[6] << 8) |
		    ((u_int64_t)data[5] << 16) | ((u_int64_t)data[4] << 24) |
		    ((u_int64_t)data[3] << 32) | ((u_int64_t)data[2] << 40) |
		    ((u_int64_t)data[1] << 48) | ((u_int64_t)data[0] << 56);
		data += 8;
		/* Apply the SHA-512 compression function to update a..h */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] + W512[j];
		T2 = Sigma0_512(a) + Maj(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + T1;
		d = c;
		c = b;
		b = a;
		a = T1 + T2;

		j++;
	} while (j < 16);

	do {
		/* Part of the message block expansion: */
		s0 = W512[(j+1)&0x0f];
		s0 = sigma0_512(s0);
		s1 = W512[(j+14)&0x0f];
		s1 =  sigma1_512(s1);

		/* Apply the SHA-512 compression function to update a..h */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] +
		     (W512[j&0x0f] += s1 + W512[(j+9)&0x0f] + s0);
		T2 = Sigma0_512(a) + Maj(a, b, c);
		h = g;
		g = f;
		f = e;
		e = d + T1;
		d = c;
		c = b;
		b = a;
		a = T1 + T2;

		j++;
	} while (j < 80);

	/* Compute the current intermediate hash value */
	state[0] += a;
	state[1] += b;
	state[2] += c;
	state[3] += d;
	state[4] += e;
	state[5] += f;
	state[6] += g;
	state[7] += h;

	/* Clean up */
	a = b = c = d = e = f = g = h = T1 = T2 = 0;
}

#endif /* SHA2_UNROLL_TRANSFORM */

void
SHA512Update(SHA2_CTX *context, const void *dataptr, size_t len)
{
	const uint8_t *data = dataptr;
	size_t	freespace, usedspace;

	/* Calling with no data is valid (we do nothing) */
	if (len == 0)
		return;

	usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
	if (usedspace > 0) {
		/* Calculate how much free space is available in the buffer */
		freespace = SHA512_BLOCK_LENGTH - usedspace;

		if (len >= freespace) {
			/* Fill the buffer completely and process it */
			memcpy(&context->buffer[usedspace], data, freespace);
			ADDINC128(context->bitcount, freespace << 3);
			len -= freespace;
			data += freespace;
			SHA512Transform(context->state.st64, context->buffer);
		} else {
			/* The buffer is not yet full */
			memcpy(&context->buffer[usedspace], data, len);
			ADDINC128(context->bitcount, len << 3);
			/* Clean up: */
			usedspace = freespace = 0;
			return;
		}
	}
	while (len >= SHA512_BLOCK_LENGTH) {
		/* Process as many complete blocks as we can */
		SHA512Transform(context->state.st64, data);
		ADDINC128(context->bitcount, SHA512_BLOCK_LENGTH << 3);
		len -= SHA512_BLOCK_LENGTH;
		data += SHA512_BLOCK_LENGTH;
	}
	if (len > 0) {
		/* There's left-overs, so save 'em */
		memcpy(context->buffer, data, len);
		ADDINC128(context->bitcount, len << 3);
	}
	/* Clean up: */
	usedspace = freespace = 0;
}

void
SHA512Last(SHA2_CTX *context)
{
	unsigned int	usedspace;

	usedspace = (context->bitcount[0] >> 3) % SHA512_BLOCK_LENGTH;
#if BYTE_ORDER == LITTLE_ENDIAN
	/* Convert FROM host byte order */
	context->bitcount[0] = swap64(context->bitcount[0]);
	context->bitcount[1] = swap64(context->bitcount[1]);
#endif
	if (usedspace > 0) {
		/* Begin padding with a 1 bit: */
		context->buffer[usedspace++] = 0x80;

		if (usedspace <= SHA512_SHORT_BLOCK_LENGTH) {
			/* Set-up for the last transform: */
			memset(&context->buffer[usedspace], 0,
			    SHA512_SHORT_BLOCK_LENGTH - usedspace);
		} else {
			if (usedspace < SHA512_BLOCK_LENGTH) {
				memset(&context->buffer[usedspace], 0,
				    SHA512_BLOCK_LENGTH - usedspace);
			}
			/* Do second-to-last transform: */
			SHA512Transform(context->state.st64, context->buffer);

			/* And set-up for the last transform: */
			memset(context->buffer, 0, SHA512_BLOCK_LENGTH - 2);
		}
	} else {
		/* Prepare for final transform: */
		memset(context->buffer, 0, SHA512_SHORT_BLOCK_LENGTH);

		/* Begin padding with a 1 bit: */
		*context->buffer = 0x80;
	}
	/* Store the length of input data (in bits): */
	*(u_int64_t *)&context->buffer[SHA512_SHORT_BLOCK_LENGTH] = context->bitcount[1];
	*(u_int64_t *)&context->buffer[SHA512_SHORT_BLOCK_LENGTH+8] = context->bitcount[0];

	/* Final transform: */
	SHA512Transform(context->state.st64, context->buffer);
}

void
SHA512Final(u_int8_t digest[], SHA2_CTX *context)
{

	SHA512Last(context);

	/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
	{
		/* Convert TO host byte order */
		int	j;
		for (j = 0; j < 8; j++) {
			context->state.st64[j] = swap64(context->state.st64[j]);
		}
	}
#endif
	memcpy(digest, context->state.st64, SHA512_DIGEST_LENGTH);

	/* Zero out state data */
	explicit_bzero(context, sizeof(*context));
}


/*** SHA-384: *********************************************************/
void
SHA384Init(SHA2_CTX *context)
{
	memcpy(context->state.st64, sha384_initial_hash_value,
	    SHA512_DIGEST_LENGTH);
	memset(context->buffer, 0, SHA384_BLOCK_LENGTH);
	context->bitcount[0] = context->bitcount[1] = 0;
}

void
SHA384Update(SHA2_CTX *context, const void *data, size_t len)
{
	SHA512Update(context, data, len);
}

void
SHA384Final(u_int8_t digest[], SHA2_CTX *context)
{

	SHA512Last(context);

	/* Save the hash data for output: */
#if BYTE_ORDER == LITTLE_ENDIAN
	{
		/* Convert TO host byte order */
		int	j;
		for (j = 0; j < 6; j++) {
			context->state.st64[j] = swap64(context->state.st64[j]);
		}
	}
#endif
	memcpy(digest, context->state.st64, SHA384_DIGEST_LENGTH);
	/* Zero out state data */
	explicit_bzero(context, sizeof(*context));
}
@


1.17
log
@recent changes broke alignment requirements on arm.
simplify a bit more, swapping only aligned values and then using memcpy
to fill the digest. fix confirmed by jsg.
ok jsg kettenis millert
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.16 2014/12/23 20:40:06 tedu Exp $	*/
a36 1
#include <sys/param.h>
@


1.16
log
@as in libc, always assume digest is passed to Final. no null allowed.
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.15 2014/12/23 20:34:41 tedu Exp $	*/
a475 1
	u_int32_t	*d = (u_int32_t *)digest;
d521 1
a521 1
			*d++ = swap32(context->state.st32[j]);
a523 2
#else
	memcpy(d, context->state.st32, SHA256_DIGEST_LENGTH);
d525 1
a800 1
	u_int64_t	*d = (u_int64_t *)digest;
d810 1
a810 1
			*d++ = swap64(context->state.st64[j]);
a812 2
#else
	memcpy(d, context->state.st64, SHA512_DIGEST_LENGTH);
d814 1
a839 1
	u_int64_t	*d = (u_int64_t *)digest;
d849 1
a849 1
			*d++ = swap64(context->state.st64[j]);
a851 2
#else
	memcpy(d, context->state.st64, SHA384_DIGEST_LENGTH);
d853 1
@


1.15
log
@as in libc, there's no need to check for calling Init on null context
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.14 2014/12/23 19:21:58 tedu Exp $	*/
d479 1
a479 3
	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != NULL) {
		usedspace = (context->bitcount[0] >> 3) % SHA256_BLOCK_LENGTH;
d481 2
a482 2
		/* Convert FROM host byte order */
		context->bitcount[0] = swap64(context->bitcount[0]);
d484 3
a486 3
		if (usedspace > 0) {
			/* Begin padding with a 1 bit: */
			context->buffer[usedspace++] = 0x80;
d488 6
a493 2
			if (usedspace <= SHA256_SHORT_BLOCK_LENGTH) {
				/* Set-up for the last transform: */
d495 1
a495 12
				    SHA256_SHORT_BLOCK_LENGTH - usedspace);
			} else {
				if (usedspace < SHA256_BLOCK_LENGTH) {
					memset(&context->buffer[usedspace], 0,
					    SHA256_BLOCK_LENGTH - usedspace);
				}
				/* Do second-to-last transform: */
				SHA256Transform(context->state.st32, context->buffer);

				/* And set-up for the last transform: */
				memset(context->buffer, 0,
				    SHA256_SHORT_BLOCK_LENGTH);
d497 2
a498 3
		} else {
			/* Set-up for the last transform: */
			memset(context->buffer, 0, SHA256_SHORT_BLOCK_LENGTH);
d500 3
a502 2
			/* Begin padding with a 1 bit: */
			*context->buffer = 0x80;
d504 3
a506 2
		/* Set the bit count: */
		*(u_int64_t *)&context->buffer[SHA256_SHORT_BLOCK_LENGTH] = context->bitcount[0];
d508 8
a515 2
		/* Final transform: */
		SHA256Transform(context->state.st32, context->buffer);
d518 5
a522 6
		{
			/* Convert TO host byte order */
			int	j;
			for (j = 0; j < 8; j++) {
				*d++ = swap32(context->state.st32[j]);
			}
d524 1
d526 1
a526 1
		memcpy(d, context->state.st32, SHA256_DIGEST_LENGTH);
a527 2
	}

d805 1
a805 3
	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != NULL) {
		SHA512Last(context);
d807 1
a807 1
		/* Save the hash data for output: */
d809 5
a813 6
		{
			/* Convert TO host byte order */
			int	j;
			for (j = 0; j < 8; j++) {
				*d++ = swap64(context->state.st64[j]);
			}
d815 1
d817 1
a817 1
		memcpy(d, context->state.st64, SHA512_DIGEST_LENGTH);
a818 1
	}
d846 1
a846 3
	/* If no digest buffer is passed, we don't bother doing this: */
	if (digest != NULL) {
		SHA512Last((SHA2_CTX *)context);
d848 1
a848 1
		/* Save the hash data for output: */
d850 5
a854 6
		{
			/* Convert TO host byte order */
			int	j;
			for (j = 0; j < 6; j++) {
				*d++ = swap64(context->state.st64[j]);
			}
d856 1
d858 1
a858 1
		memcpy(d, context->state.st64, SHA384_DIGEST_LENGTH);
a859 2
	}

@


1.14
log
@use endian.h swap macros instead of home grown versions
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.13 2014/12/19 17:16:57 tedu Exp $	*/
a259 2
	if (context == NULL)
		return;
a541 2
	if (context == NULL)
		return;
a835 2
	if (context == NULL)
		return;
@


1.13
log
@make the code look more like libc by changing Transform to take the state
ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.11 2014/12/18 20:29:08 tedu Exp $	*/
a99 18

/*** ENDIAN REVERSAL MACROS *******************************************/
#if BYTE_ORDER == LITTLE_ENDIAN
#define REVERSE32(w,x)	{ \
	u_int32_t tmp = (w); \
	tmp = (tmp >> 16) | (tmp << 16); \
	(x) = ((tmp & 0xff00ff00UL) >> 8) | ((tmp & 0x00ff00ffUL) << 8); \
}
#define REVERSE64(w,x)	{ \
	u_int64_t tmp = (w); \
	tmp = (tmp >> 32) | (tmp << 32); \
	tmp = ((tmp & 0xff00ff00ff00ff00ULL) >> 8) | \
	      ((tmp & 0x00ff00ff00ff00ffULL) << 8); \
	(x) = ((tmp & 0xffff0000ffff0000ULL) >> 16) | \
	      ((tmp & 0x0000ffff0000ffffULL) << 16); \
}
#endif /* BYTE_ORDER == LITTLE_ENDIAN */

d486 1
a486 1
		REVERSE64(context->bitcount[0], context->bitcount[0]);
d526 1
a526 3
				REVERSE32(context->state.st32[j],
				    context->state.st32[j]);
				*d++ = context->state.st32[j];
d771 2
a772 2
	REVERSE64(context->bitcount[0],context->bitcount[0]);
	REVERSE64(context->bitcount[1],context->bitcount[1]);
d823 1
a823 3
				REVERSE64(context->state.st64[j],
				    context->state.st64[j]);
				*d++ = context->state.st64[j];
d869 1
a869 3
				REVERSE64(context->state.st64[j],
				    context->state.st64[j]);
				*d++ = context->state.st64[j];
@


1.12
log
@convert bcopy/zero to memcpy. ok deraadt djm
@
text
@d168 2
a169 2
void SHA256Transform(SHA2_CTX *, const u_int8_t *);
void SHA512Transform(SHA2_CTX *, const u_int8_t *);
d313 1
a313 1
SHA256Transform(SHA2_CTX *context, const u_int8_t *data)
d316 1
a316 1
	u_int32_t	T1, *W256;
a318 2
	W256 = (u_int32_t *)context->buffer;

d320 8
a327 8
	a = context->state.st32[0];
	b = context->state.st32[1];
	c = context->state.st32[2];
	d = context->state.st32[3];
	e = context->state.st32[4];
	f = context->state.st32[5];
	g = context->state.st32[6];
	h = context->state.st32[7];
d355 8
a362 8
	context->state.st32[0] += a;
	context->state.st32[1] += b;
	context->state.st32[2] += c;
	context->state.st32[3] += d;
	context->state.st32[4] += e;
	context->state.st32[5] += f;
	context->state.st32[6] += g;
	context->state.st32[7] += h;
d371 1
a371 1
SHA256Transform(SHA2_CTX *context, const u_int8_t *data)
d374 1
a374 1
	u_int32_t	T1, T2, *W256;
a376 2
	W256 = (u_int32_t *)context->buffer;

d378 8
a385 8
	a = context->state.st32[0];
	b = context->state.st32[1];
	c = context->state.st32[2];
	d = context->state.st32[3];
	e = context->state.st32[4];
	f = context->state.st32[5];
	g = context->state.st32[6];
	h = context->state.st32[7];
d431 8
a438 8
	context->state.st32[0] += a;
	context->state.st32[1] += b;
	context->state.st32[2] += c;
	context->state.st32[3] += d;
	context->state.st32[4] += e;
	context->state.st32[5] += f;
	context->state.st32[6] += g;
	context->state.st32[7] += h;
d467 1
a467 1
			SHA256Transform(context, context->buffer);
d479 1
a479 1
		SHA256Transform(context, data);
d520 1
a520 1
				SHA256Transform(context, context->buffer);
d537 1
a537 1
		SHA256Transform(context, context->buffer);
d602 1
a602 1
SHA512Transform(SHA2_CTX *context, const u_int8_t *data)
d605 1
a605 1
	u_int64_t	T1, *W512 = (u_int64_t *)context->buffer;
d609 8
a616 8
	a = context->state.st64[0];
	b = context->state.st64[1];
	c = context->state.st64[2];
	d = context->state.st64[3];
	e = context->state.st64[4];
	f = context->state.st64[5];
	g = context->state.st64[6];
	h = context->state.st64[7];
d643 8
a650 8
	context->state.st64[0] += a;
	context->state.st64[1] += b;
	context->state.st64[2] += c;
	context->state.st64[3] += d;
	context->state.st64[4] += e;
	context->state.st64[5] += f;
	context->state.st64[6] += g;
	context->state.st64[7] += h;
d659 1
a659 1
SHA512Transform(SHA2_CTX *context, const u_int8_t *data)
d662 1
a662 1
	u_int64_t	T1, T2, *W512 = (u_int64_t *)context->buffer;
d666 8
a673 8
	a = context->state.st64[0];
	b = context->state.st64[1];
	c = context->state.st64[2];
	d = context->state.st64[3];
	e = context->state.st64[4];
	f = context->state.st64[5];
	g = context->state.st64[6];
	h = context->state.st64[7];
d721 8
a728 8
	context->state.st64[0] += a;
	context->state.st64[1] += b;
	context->state.st64[2] += c;
	context->state.st64[3] += d;
	context->state.st64[4] += e;
	context->state.st64[5] += f;
	context->state.st64[6] += g;
	context->state.st64[7] += h;
d757 1
a757 1
			SHA512Transform(context, context->buffer);
d769 1
a769 1
		SHA512Transform(context, data);
d808 1
a808 1
			SHA512Transform(context, context->buffer);
d825 1
a825 1
	SHA512Transform(context, context->buffer);
@


1.11
log
@only unroll on i386 and amd64 (where confirmed to be much faster).
naddy found sparc64 gets a little slower when unrolled.
ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.10 2014/12/17 19:40:24 tedu Exp $	*/
d280 1
a280 1
	bcopy(sha256_initial_hash_value, context->state.st32,
d282 1
a282 1
	bzero(context->buffer, SHA256_BLOCK_LENGTH);
d467 1
a467 1
			bcopy(data, &context->buffer[usedspace], freespace);
d474 1
a474 1
			bcopy(data, &context->buffer[usedspace], len);
d490 1
a490 1
		bcopy(data, context->buffer, len);
d516 2
a517 1
				bzero(&context->buffer[usedspace], SHA256_SHORT_BLOCK_LENGTH - usedspace);
d520 2
a521 1
					bzero(&context->buffer[usedspace], SHA256_BLOCK_LENGTH - usedspace);
d527 2
a528 1
				bzero(context->buffer, SHA256_SHORT_BLOCK_LENGTH);
d532 1
a532 1
			bzero(context->buffer, SHA256_SHORT_BLOCK_LENGTH);
d554 1
a554 1
		bcopy(context->state.st32, d, SHA256_DIGEST_LENGTH);
d570 1
a570 1
	bcopy(sha512_initial_hash_value, context->state.st64,
d572 1
a572 1
	bzero(context->buffer, SHA512_BLOCK_LENGTH);
d757 1
a757 1
			bcopy(data, &context->buffer[usedspace], freespace);
d764 1
a764 1
			bcopy(data, &context->buffer[usedspace], len);
d780 1
a780 1
		bcopy(data, context->buffer, len);
d804 2
a805 1
			bzero(&context->buffer[usedspace], SHA512_SHORT_BLOCK_LENGTH - usedspace);
d808 2
a809 1
				bzero(&context->buffer[usedspace], SHA512_BLOCK_LENGTH - usedspace);
d815 1
a815 1
			bzero(context->buffer, SHA512_BLOCK_LENGTH - 2);
d819 1
a819 1
		bzero(context->buffer, SHA512_SHORT_BLOCK_LENGTH);
d853 1
a853 1
		bcopy(context->state.st64, d, SHA512_DIGEST_LENGTH);
d868 1
a868 1
	bcopy(sha384_initial_hash_value, context->state.st64,
d870 1
a870 1
	bzero(context->buffer, SHA384_BLOCK_LENGTH);
d901 1
a901 1
		bcopy(context->state.st64, d, SHA384_DIGEST_LENGTH);
@


1.10
log
@unroll loops for sha2. quite a bit faster for amd64.
ok deraadt millert
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.9 2014/11/16 17:39:09 tedu Exp $	*/
d56 1
d59 1
a59 1

@


1.9
log
@Defining the interface in terms of char * means most callers are
required to cast their pointers, which is ugly and possibly error
prone. accidentally casting an int to a pointer, for example, instead
of the address of the int. implicit void * casting is safer.

This updates the kernel hash interfaces to use void *. Similar changes
are possible for userland. I think it's safe, but there may be some
peculiar source compatbility issues there, so let's just do the kernel
first.
ok dlg millert
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.8 2011/01/11 15:42:05 deraadt Exp $	*/
d55 3
@


1.8
log
@for key material that is being being discarded, convert bzero() to
explicit_bzero() where required
ok markus mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.7 2008/09/06 22:23:20 djm Exp $	*/
d447 1
a447 1
SHA256Update(SHA2_CTX *context, const u_int8_t *data, size_t len)
d449 1
d734 1
a734 1
SHA512Update(SHA2_CTX *context, const u_int8_t *data, size_t len)
d736 1
d866 1
a866 1
SHA384Update(SHA2_CTX *context, const u_int8_t *data, size_t len)
d868 1
a868 1
	SHA512Update((SHA2_CTX *)context, data, len);
@


1.7
log
@match libc sha2(3) API changes for kernel; ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.6 2004/05/03 02:57:36 millert Exp $	*/
d551 1
a551 1
	bzero(context, sizeof(*context));
d847 1
a847 1
	bzero(context, sizeof(*context));
d895 1
a895 1
	bzero(context, sizeof(*context));
@


1.6
log
@Rev 1.4 was bogus (committed from the wrong tree), this repairs it.
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.3 2004/04/28 22:06:02 millert Exp $	*/
d163 3
a165 3
void SHA512_Last(SHA512_CTX *);
void SHA256_Transform(SHA256_CTX *, const u_int8_t *);
void SHA512_Transform(SHA512_CTX *, const u_int8_t *);
d272 1
a272 1
SHA256_Init(SHA256_CTX *context)
d276 2
a277 1
	bcopy(sha256_initial_hash_value, context->state, SHA256_DIGEST_LENGTH);
d279 1
a279 1
	context->bitcount = 0;
d309 1
a309 1
SHA256_Transform(SHA256_CTX *context, const u_int8_t *data)
d318 8
a325 8
	a = context->state[0];
	b = context->state[1];
	c = context->state[2];
	d = context->state[3];
	e = context->state[4];
	f = context->state[5];
	g = context->state[6];
	h = context->state[7];
d353 8
a360 8
	context->state[0] += a;
	context->state[1] += b;
	context->state[2] += c;
	context->state[3] += d;
	context->state[4] += e;
	context->state[5] += f;
	context->state[6] += g;
	context->state[7] += h;
d369 1
a369 1
SHA256_Transform(SHA256_CTX *context, const u_int8_t *data)
d378 8
a385 8
	a = context->state[0];
	b = context->state[1];
	c = context->state[2];
	d = context->state[3];
	e = context->state[4];
	f = context->state[5];
	g = context->state[6];
	h = context->state[7];
d431 8
a438 8
	context->state[0] += a;
	context->state[1] += b;
	context->state[2] += c;
	context->state[3] += d;
	context->state[4] += e;
	context->state[5] += f;
	context->state[6] += g;
	context->state[7] += h;
d447 1
a447 1
SHA256_Update(SHA256_CTX *context, const u_int8_t *data, size_t len)
d455 1
a455 1
	usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
d463 1
a463 1
			context->bitcount += freespace << 3;
d466 1
a466 1
			SHA256_Transform(context, context->buffer);
d470 1
a470 1
			context->bitcount += len << 3;
d478 2
a479 2
		SHA256_Transform(context, data);
		context->bitcount += SHA256_BLOCK_LENGTH << 3;
d486 1
a486 1
		context->bitcount += len << 3;
d493 1
a493 1
SHA256_Final(u_int8_t digest[], SHA256_CTX *context)
d500 1
a500 1
		usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH;
d503 1
a503 1
		REVERSE64(context->bitcount,context->bitcount);
d517 1
a517 1
				SHA256_Transform(context, context->buffer);
d530 1
a530 1
		*(u_int64_t *)&context->buffer[SHA256_SHORT_BLOCK_LENGTH] = context->bitcount;
d533 1
a533 1
		SHA256_Transform(context, context->buffer);
d540 3
a542 2
				REVERSE32(context->state[j],context->state[j]);
				*d++ = context->state[j];
d546 1
a546 1
		bcopy(context->state, d, SHA256_DIGEST_LENGTH);
d558 1
a558 1
SHA512_Init(SHA512_CTX *context)
d562 2
a563 1
	bcopy(sha512_initial_hash_value, context->state, SHA512_DIGEST_LENGTH);
d598 1
a598 1
SHA512_Transform(SHA512_CTX *context, const u_int8_t *data)
d605 8
a612 8
	a = context->state[0];
	b = context->state[1];
	c = context->state[2];
	d = context->state[3];
	e = context->state[4];
	f = context->state[5];
	g = context->state[6];
	h = context->state[7];
d639 8
a646 8
	context->state[0] += a;
	context->state[1] += b;
	context->state[2] += c;
	context->state[3] += d;
	context->state[4] += e;
	context->state[5] += f;
	context->state[6] += g;
	context->state[7] += h;
d655 1
a655 1
SHA512_Transform(SHA512_CTX *context, const u_int8_t *data)
d662 8
a669 8
	a = context->state[0];
	b = context->state[1];
	c = context->state[2];
	d = context->state[3];
	e = context->state[4];
	f = context->state[5];
	g = context->state[6];
	h = context->state[7];
d717 8
a724 8
	context->state[0] += a;
	context->state[1] += b;
	context->state[2] += c;
	context->state[3] += d;
	context->state[4] += e;
	context->state[5] += f;
	context->state[6] += g;
	context->state[7] += h;
d733 1
a733 1
SHA512_Update(SHA512_CTX *context, const u_int8_t *data, size_t len)
d752 1
a752 1
			SHA512_Transform(context, context->buffer);
d764 1
a764 1
		SHA512_Transform(context, data);
d779 1
a779 1
SHA512_Last(SHA512_CTX *context)
d801 1
a801 1
			SHA512_Transform(context, context->buffer);
d818 1
a818 1
	SHA512_Transform(context, context->buffer);
d822 1
a822 1
SHA512_Final(u_int8_t digest[], SHA512_CTX *context)
d828 1
a828 1
		SHA512_Last(context);
d836 3
a838 2
				REVERSE64(context->state[j],context->state[j]);
				*d++ = context->state[j];
d842 1
a842 1
		bcopy(context->state, d, SHA512_DIGEST_LENGTH);
d853 1
a853 1
SHA384_Init(SHA384_CTX *context)
d857 2
a858 1
	bcopy(sha384_initial_hash_value, context->state, SHA512_DIGEST_LENGTH);
d864 1
a864 1
SHA384_Update(SHA384_CTX *context, const u_int8_t *data, size_t len)
d866 1
a866 1
	SHA512_Update((SHA512_CTX *)context, data, len);
d870 1
a870 1
SHA384_Final(u_int8_t digest[], SHA384_CTX *context)
d876 1
a876 1
		SHA512_Last((SHA512_CTX *)context);
d884 3
a886 2
				REVERSE64(context->state[j],context->state[j]);
				*d++ = context->state[j];
d890 1
a890 1
		bcopy(context->state, d, SHA384_DIGEST_LENGTH);
@


1.5
log
@some minor KNF
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.5 2004/05/02 23:53:47 millert Exp $	*/
d164 2
a165 2
void SHA256_Transform(SHA256_CTX *, const u_int32_t *);
void SHA512_Transform(SHA512_CTX *, const u_int64_t *);
d285 21
a305 32
#if BYTE_ORDER == LITTLE_ENDIAN

#define ROUND256_0_TO_15(a,b,c,d,e,f,g,h)	\
	REVERSE32(*data++, W256[j]); \
	T1 = (h) + Sigma1_256(e) + Ch((e), (f), (g)) + \
             K256[j] + W256[j]; \
	(d) += T1; \
	(h) = T1 + Sigma0_256(a) + Maj((a), (b), (c)); \
	j++


#else /* BYTE_ORDER == LITTLE_ENDIAN */

#define ROUND256_0_TO_15(a,b,c,d,e,f,g,h)	\
	T1 = (h) + Sigma1_256(e) + Ch((e), (f), (g)) + \
	     K256[j] + (W256[j] = *data++); \
	(d) += T1; \
	(h) = T1 + Sigma0_256(a) + Maj((a), (b), (c)); \
	j++

#endif /* BYTE_ORDER == LITTLE_ENDIAN */

#define ROUND256(a,b,c,d,e,f,g,h)	\
	s0 = W256[(j+1)&0x0f]; \
	s0 = sigma0_256(s0); \
	s1 = W256[(j+14)&0x0f]; \
	s1 = sigma1_256(s1); \
	T1 = (h) + Sigma1_256(e) + Ch((e), (f), (g)) + K256[j] + \
	     (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0); \
	(d) += T1; \
	(h) = T1 + Sigma0_256(a) + Maj((a), (b), (c)); \
	j++
d308 1
a308 1
SHA256_Transform(SHA256_CTX *context, const u_int32_t *data)
d368 1
a368 1
SHA256_Transform(SHA256_CTX *context, const u_int32_t *data)
d388 3
a390 3
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Copy data while converting to host byte order */
		REVERSE32(*data++, W256[j]);
a392 4
#else /* BYTE_ORDER == LITTLE_ENDIAN */
		/* Apply the SHA-256 compression function to update a..h with copy */
		T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + (W256[j] = *data++);
#endif /* BYTE_ORDER == LITTLE_ENDIAN */
d465 1
a465 1
			SHA256_Transform(context, (u_int32_t *)context->buffer);
d477 1
a477 1
		SHA256_Transform(context, (const u_int32_t *)data);
d516 1
a516 1
				SHA256_Transform(context, (u_int32_t *)context->buffer);
d532 1
a532 1
		SHA256_Transform(context, (u_int32_t *)context->buffer);
a567 21
#if BYTE_ORDER == LITTLE_ENDIAN

#define ROUND512_0_TO_15(a,b,c,d,e,f,g,h)	\
	REVERSE64(*data++, W512[j]); \
	T1 = (h) + Sigma1_512(e) + Ch((e), (f), (g)) + \
             K512[j] + W512[j]; \
	(d) += T1, \
	(h) = T1 + Sigma0_512(a) + Maj((a), (b), (c)), \
	j++


#else /* BYTE_ORDER == LITTLE_ENDIAN */

#define ROUND512_0_TO_15(a,b,c,d,e,f,g,h)	\
	T1 = (h) + Sigma1_512(e) + Ch((e), (f), (g)) + \
             K512[j] + (W512[j] = *data++); \
	(d) += T1; \
	(h) = T1 + Sigma0_512(a) + Maj((a), (b), (c)); \
	j++

#endif /* BYTE_ORDER == LITTLE_ENDIAN */
d569 24
a592 10
#define ROUND512(a,b,c,d,e,f,g,h)	\
	s0 = W512[(j+1)&0x0f]; \
	s0 = sigma0_512(s0); \
	s1 = W512[(j+14)&0x0f]; \
	s1 = sigma1_512(s1); \
	T1 = (h) + Sigma1_512(e) + Ch((e), (f), (g)) + K512[j] + \
             (W512[j&0x0f] += s1 + W512[(j+9)&0x0f] + s0); \
	(d) += T1; \
	(h) = T1 + Sigma0_512(a) + Maj((a), (b), (c)); \
	j++
d595 1
a595 1
SHA512_Transform(SHA512_CTX *context, const u_int64_t *data)
d652 1
a652 1
SHA512_Transform(SHA512_CTX *context, const u_int64_t *data)
d674 1
a674 1
		data++;
d749 1
a749 1
			SHA512_Transform(context, (u_int64_t *)context->buffer);
d761 1
a761 1
		SHA512_Transform(context, (const u_int64_t *)data);
d798 1
a798 1
			SHA512_Transform(context, (u_int64_t *)context->buffer);
d815 1
a815 1
	SHA512_Transform(context, (u_int64_t *)context->buffer);
@


1.4
log
@The data pointer passed to the transform function may not be properly
aligned so copy it in a way that a) is endian indepenent and b) does
not rely on alignment.  Problem found and solution tested by hshoexer@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.3 2004/04/28 23:11:57 millert Exp $	*/
d37 1
a37 1
#include <sys/types.h>
d272 3
a274 2
SHA256_Init(SHA256_CTX *context) {
	if (context == (SHA256_CTX *)0) {
a275 1
	}
d319 2
a320 1
SHA256_Transform(SHA256_CTX *context, const u_int32_t *data) {
d379 2
a380 1
SHA256_Transform(SHA256_CTX *context, const u_int32_t *data) {
d461 3
a463 2
SHA256_Update(SHA256_CTX *context, const u_int8_t *data, size_t len) {
	unsigned int	freespace, usedspace;
d465 2
a466 2
	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
a467 1
	}
d507 2
a508 1
SHA256_Final(u_int8_t digest[], SHA256_CTX *context) {
d513 1
a513 1
	if (digest != (u_int8_t *)0) {
d571 3
a573 2
SHA512_Init(SHA512_CTX *context) {
	if (context == (SHA512_CTX *)0) {
a574 1
	}
d617 2
a618 1
SHA512_Transform(SHA512_CTX *context, const u_int64_t *data) {
d674 2
a675 1
SHA512_Transform(SHA512_CTX *context, const u_int64_t *data) {
d752 3
a754 2
SHA512_Update(SHA512_CTX *context, const u_int8_t *data, size_t len) {
	unsigned int	freespace, usedspace;
d756 2
a757 2
	if (len == 0) {
		/* Calling with no data is valid - we do nothing */
a758 1
	}
d798 2
a799 1
SHA512_Last(SHA512_CTX *context) {
d841 2
a842 1
SHA512_Final(u_int8_t digest[], SHA512_CTX *context) {
d846 1
a846 1
	if (digest != (u_int8_t *)0) {
d871 3
a873 2
SHA384_Init(SHA384_CTX *context) {
	if (context == (SHA384_CTX *)0) {
a874 1
	}
d881 2
a882 1
SHA384_Update(SHA384_CTX *context, const u_int8_t *data, size_t len) {
d887 2
a888 1
SHA384_Final(u_int8_t digest[], SHA384_CTX *context) {
d892 1
a892 1
	if (digest != (u_int8_t *)0) {
@


1.3
log
@Sync userland sha2.c with kernel.  The SHAXXX_End and SHAXXX_Data functions
have been removed; we provide these in userland but not in the kernel.
@
text
@d1 1
a1 1
/*	$OpenBSD: sha2.c,v 1.2 2003/09/08 00:00:47 millert Exp $	*/
d687 5
a691 3
#if BYTE_ORDER == LITTLE_ENDIAN
		/* Convert TO host byte order */
		REVERSE64(*data++, W512[j]);
a693 4
#else /* BYTE_ORDER == LITTLE_ENDIAN */
		/* Apply the SHA-512 compression function to update a..h with copy */
		T1 = h + Sigma1_512(e) + Ch(e, f, g) + K512[j] + (W512[j] = *data++);
#endif /* BYTE_ORDER == LITTLE_ENDIAN */
@


1.2
log
@zap context correctly, from Juergen Buchmueller <pullmoll at stop1984 dot com>
deraadt@@ ok.
@
text
@d1 1
a1 2
/*	$NetBSD: sha2.c,v 1.1 2003/07/22 03:24:25 itojun Exp $	*/
/*	$KAME: sha2.c,v 1.9 2003/07/20 00:28:38 itojun Exp $	*/
d4 5
a8 7
 * sha2.c
 *
 * Version 1.0.0beta1
 *
 * Written by Aaron D. Gifford <me@@aarongifford.com>
 *
 * Copyright 2000 Aaron D. Gifford.  All rights reserved.
d22 1
a22 1
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) AND CONTRIBUTOR(S) ``AS IS'' AND
d25 1
a25 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR(S) OR CONTRIBUTOR(S) BE LIABLE
d34 1
a39 1
#include <machine/endian.h>
a42 6
 * ASSERT NOTE:
 * Some sanity checking code is included using assert().  On my FreeBSD
 * system, this additional code can be removed by compiling with NDEBUG
 * defined.  Check your own systems manpage on assert() to see how to
 * compile WITHOUT the sanity checking code on your system.
 *
a55 4
#if defined(__bsdi__) || defined(__FreeBSD__)
#define assert(x)
#endif

a88 28
/*
 * Define the followingsha2_* types to types of the correct length on
 * the native archtecture.   Most BSD systems and Linux define u_intXX_t
 * types.  Machines with very recent ANSI C headers, can use the
 * uintXX_t definintions from inttypes.h by defining SHA2_USE_INTTYPES_H
 * during compile or in the sha.h header file.
 *
 * Machines that support neither u_intXX_t nor inttypes.h's uintXX_t
 * will need to define these three typedefs below (and the appropriate
 * ones in sha.h too) by hand according to their system architecture.
 *
 * Thank you, Jun-ichiro itojun Hagino, for suggesting using u_intXX_t
 * types and pointing out recent ANSI C support for uintXX_t in inttypes.h.
 */
#if 0 /*def SHA2_USE_INTTYPES_H*/

typedef uint8_t  sha2_byte;	/* Exactly 1 byte */
typedef uint32_t sha2_word32;	/* Exactly 4 bytes */
typedef uint64_t sha2_word64;	/* Exactly 8 bytes */

#else /* SHA2_USE_INTTYPES_H */

typedef u_int8_t  sha2_byte;	/* Exactly 1 byte */
typedef u_int32_t sha2_word32;	/* Exactly 4 bytes */
typedef u_int64_t sha2_word64;	/* Exactly 8 bytes */

#endif /* SHA2_USE_INTTYPES_H */

d100 1
a100 1
	sha2_word32 tmp = (w); \
d105 1
a105 1
	sha2_word64 tmp = (w); \
d120 1
a120 1
	(w)[0] += (sha2_word64)(n); \
d163 3
a165 3
void SHA512_Last(SHA512_CTX*);
void SHA256_Transform(SHA256_CTX*, const sha2_word32*);
void SHA512_Transform(SHA512_CTX*, const sha2_word64*);
d170 1
a170 1
const static sha2_word32 K256[64] = {
d190 1
a190 1
const static sha2_word32 sha256_initial_hash_value[8] = {
d202 1
a202 1
const static sha2_word64 K512[80] = {
d246 1
a246 1
const static sha2_word64 sha384_initial_hash_value[8] = {
d258 1
a258 1
const static sha2_word64 sha512_initial_hash_value[8] = {
a268 6
/*
 * Constant used by SHA256/384/512_End() functions for converting the
 * digest to a readable hexadecimal character string:
 */
static const char *sha2_hex_digits = "0123456789abcdef";

d271 3
a273 2
void SHA256_Init(SHA256_CTX* context) {
	if (context == (SHA256_CTX*)0) {
d318 4
a321 3
void SHA256_Transform(SHA256_CTX* context, const sha2_word32* data) {
	sha2_word32	a, b, c, d, e, f, g, h, s0, s1;
	sha2_word32	T1, *W256;
d324 1
a324 1
	W256 = (sha2_word32*)context->buffer;
d377 4
a380 3
void SHA256_Transform(SHA256_CTX* context, const sha2_word32* data) {
	sha2_word32	a, b, c, d, e, f, g, h, s0, s1;
	sha2_word32	T1, T2, *W256;
d383 1
a383 1
	W256 = (sha2_word32*)context->buffer;
d399 1
a399 1
		REVERSE32(*data++,W256[j]);
d458 2
a459 1
void SHA256_Update(SHA256_CTX* context, const sha2_byte *data, size_t len) {
a466 3
	/* Sanity check: */
	assert(context != (SHA256_CTX*)0 && data != (sha2_byte*)0);

d478 1
a478 1
			SHA256_Transform(context, (sha2_word32*)context->buffer);
d490 1
a490 1
		SHA256_Transform(context, (const sha2_word32*)data);
d504 3
a506 2
void SHA256_Final(sha2_byte digest[], SHA256_CTX* context) {
	sha2_word32	*d = (sha2_word32*)digest;
a508 3
	/* Sanity check: */
	assert(context != (SHA256_CTX*)0);

d510 1
a510 1
	if (digest != (sha2_byte*)0) {
d528 1
a528 1
				SHA256_Transform(context, (sha2_word32*)context->buffer);
d541 1
a541 1
		*(sha2_word64*)&context->buffer[SHA256_SHORT_BLOCK_LENGTH] = context->bitcount;
d544 1
a544 1
		SHA256_Transform(context, (sha2_word32*)context->buffer);
a564 31
char *SHA256_End(SHA256_CTX* context, char buffer[]) {
	sha2_byte	digest[SHA256_DIGEST_LENGTH], *d = digest;
	int		i;

	/* Sanity check: */
	assert(context != (SHA256_CTX*)0);

	if (buffer != (char*)0) {
		SHA256_Final(digest, context);

		for (i = 0; i < SHA256_DIGEST_LENGTH; i++) {
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
	} else {
		bzero(context, sizeof(*context));
	}
	bzero(digest, SHA256_DIGEST_LENGTH);
	return buffer;
}

char* SHA256_Data(const sha2_byte* data, size_t len, char digest[SHA256_DIGEST_STRING_LENGTH]) {
	SHA256_CTX	context;

	SHA256_Init(&context);
	SHA256_Update(&context, data, len);
	return SHA256_End(&context, digest);
}

d567 3
a569 2
void SHA512_Init(SHA512_CTX* context) {
	if (context == (SHA512_CTX*)0) {
d613 4
a616 3
void SHA512_Transform(SHA512_CTX* context, const sha2_word64* data) {
	sha2_word64	a, b, c, d, e, f, g, h, s0, s1;
	sha2_word64	T1, *W512 = (sha2_word64*)context->buffer;
d669 4
a672 3
void SHA512_Transform(SHA512_CTX* context, const sha2_word64* data) {
	sha2_word64	a, b, c, d, e, f, g, h, s0, s1;
	sha2_word64	T1, T2, *W512 = (sha2_word64*)context->buffer;
d748 2
a749 1
void SHA512_Update(SHA512_CTX* context, const sha2_byte *data, size_t len) {
a756 3
	/* Sanity check: */
	assert(context != (SHA512_CTX*)0 && data != (sha2_byte*)0);

d768 1
a768 1
			SHA512_Transform(context, (sha2_word64*)context->buffer);
d780 1
a780 1
		SHA512_Transform(context, (const sha2_word64*)data);
d794 2
a795 1
void SHA512_Last(SHA512_CTX* context) {
d816 1
a816 1
			SHA512_Transform(context, (sha2_word64*)context->buffer);
d829 2
a830 2
	*(sha2_word64*)&context->buffer[SHA512_SHORT_BLOCK_LENGTH] = context->bitcount[1];
	*(sha2_word64*)&context->buffer[SHA512_SHORT_BLOCK_LENGTH+8] = context->bitcount[0];
d833 1
a833 1
	SHA512_Transform(context, (sha2_word64*)context->buffer);
d836 3
a838 5
void SHA512_Final(sha2_byte digest[], SHA512_CTX* context) {
	sha2_word64	*d = (sha2_word64*)digest;

	/* Sanity check: */
	assert(context != (SHA512_CTX*)0);
d841 1
a841 1
	if (digest != (sha2_byte*)0) {
a862 31
char *SHA512_End(SHA512_CTX* context, char buffer[]) {
	sha2_byte	digest[SHA512_DIGEST_LENGTH], *d = digest;
	int		i;

	/* Sanity check: */
	assert(context != (SHA512_CTX*)0);

	if (buffer != (char*)0) {
		SHA512_Final(digest, context);

		for (i = 0; i < SHA512_DIGEST_LENGTH; i++) {
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
	} else {
		bzero(context, sizeof(*context));
	}
	bzero(digest, SHA512_DIGEST_LENGTH);
	return buffer;
}

char* SHA512_Data(const sha2_byte* data, size_t len, char digest[SHA512_DIGEST_STRING_LENGTH]) {
	SHA512_CTX	context;

	SHA512_Init(&context);
	SHA512_Update(&context, data, len);
	return SHA512_End(&context, digest);
}

d865 3
a867 2
void SHA384_Init(SHA384_CTX* context) {
	if (context == (SHA384_CTX*)0) {
d875 3
a877 2
void SHA384_Update(SHA384_CTX* context, const sha2_byte* data, size_t len) {
	SHA512_Update((SHA512_CTX*)context, data, len);
d880 3
a882 5
void SHA384_Final(sha2_byte digest[], SHA384_CTX* context) {
	sha2_word64	*d = (sha2_word64*)digest;

	/* Sanity check: */
	assert(context != (SHA384_CTX*)0);
d885 2
a886 2
	if (digest != (sha2_byte*)0) {
		SHA512_Last((SHA512_CTX*)context);
a904 31
}

char *SHA384_End(SHA384_CTX* context, char buffer[]) {
	sha2_byte	digest[SHA384_DIGEST_LENGTH], *d = digest;
	int		i;

	/* Sanity check: */
	assert(context != (SHA384_CTX*)0);

	if (buffer != (char*)0) {
		SHA384_Final(digest, context);

		for (i = 0; i < SHA384_DIGEST_LENGTH; i++) {
			*buffer++ = sha2_hex_digits[(*d & 0xf0) >> 4];
			*buffer++ = sha2_hex_digits[*d & 0x0f];
			d++;
		}
		*buffer = (char)0;
	} else {
		bzero(context, sizeof(*context));
	}
	bzero(digest, SHA384_DIGEST_LENGTH);
	return buffer;
}

char* SHA384_Data(const sha2_byte* data, size_t len, char digest[SHA384_DIGEST_STRING_LENGTH]) {
	SHA384_CTX	context;

	SHA384_Init(&context);
	SHA384_Update(&context, data, len);
	return SHA384_End(&context, digest);
@


1.2.4.1
log
@Merge of current from two weeks agointo the SMP branch
@
text
@@


1.2.4.2
log
@Merge with the trunk
@
text
@d1 2
a2 1
/*	$OpenBSD$	*/
d5 7
a11 5
 * FILE:	sha2.c
 * AUTHOR:	Aaron D. Gifford <me@@aarongifford.com>
 * 
 * Copyright (c) 2000-2001, Aaron D. Gifford
 * All rights reserved.
d25 1
a25 1
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTOR(S) ``AS IS'' AND
d28 1
a28 1
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTOR(S) BE LIABLE
a36 1
 * $From: sha2.c,v 1.1 2001/11/08 00:01:51 adg Exp adg $
d39 1
a39 1
#include <sys/param.h>
d42 1
d46 6
d65 4
d102 28
d141 1
a141 1
	u_int32_t tmp = (w); \
d146 1
a146 1
	u_int64_t tmp = (w); \
d161 1
a161 1
	(w)[0] += (u_int64_t)(n); \
d204 3
a206 3
void SHA512_Last(SHA512_CTX *);
void SHA256_Transform(SHA256_CTX *, const u_int8_t *);
void SHA512_Transform(SHA512_CTX *, const u_int8_t *);
d211 1
a211 1
const static u_int32_t K256[64] = {
d231 1
a231 1
const static u_int32_t sha256_initial_hash_value[8] = {
d243 1
a243 1
const static u_int64_t K512[80] = {
d287 1
a287 1
const static u_int64_t sha384_initial_hash_value[8] = {
d299 1
a299 1
const static u_int64_t sha512_initial_hash_value[8] = {
d310 6
d318 2
a319 4
void
SHA256_Init(SHA256_CTX *context)
{
	if (context == NULL)
d321 1
d331 36
a366 27
#define ROUND256_0_TO_15(a,b,c,d,e,f,g,h) do {				    \
	W256[j] = (u_int32_t)data[3] | ((u_int32_t)data[2] << 8) |	    \
	    ((u_int32_t)data[1] << 16) | ((u_int32_t)data[0] << 24);	    \
	data += 4;							    \
	T1 = (h) + Sigma1_256((e)) + Ch((e), (f), (g)) + K256[j] + W256[j]; \
	(d) += T1;							    \
	(h) = T1 + Sigma0_256((a)) + Maj((a), (b), (c));		    \
	j++;								    \
} while(0)

#define ROUND256(a,b,c,d,e,f,g,h) do {					    \
	s0 = W256[(j+1)&0x0f];						    \
	s0 = sigma0_256(s0);						    \
	s1 = W256[(j+14)&0x0f];						    \
	s1 = sigma1_256(s1);						    \
	T1 = (h) + Sigma1_256((e)) + Ch((e), (f), (g)) + K256[j] +	    \
	     (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);		    \
	(d) += T1;							    \
	(h) = T1 + Sigma0_256((a)) + Maj((a), (b), (c));		    \
	j++;								    \
} while(0)

void
SHA256_Transform(SHA256_CTX *context, const u_int8_t *data)
{
	u_int32_t	a, b, c, d, e, f, g, h, s0, s1;
	u_int32_t	T1, *W256;
d369 1
a369 1
	W256 = (u_int32_t *)context->buffer;
d422 3
a424 5
void
SHA256_Transform(SHA256_CTX *context, const u_int8_t *data)
{
	u_int32_t	a, b, c, d, e, f, g, h, s0, s1;
	u_int32_t	T1, T2, *W256;
d427 1
a427 1
	W256 = (u_int32_t *)context->buffer;
d441 3
a443 3
		W256[j] = (u_int32_t)data[3] | ((u_int32_t)data[2] << 8) |
		    ((u_int32_t)data[1] << 16) | ((u_int32_t)data[0] << 24);
		data += 4;
d446 4
d502 2
a503 4
void
SHA256_Update(SHA256_CTX *context, const u_int8_t *data, size_t len)
{
	size_t	freespace, usedspace;
d505 2
a506 2
	/* Calling with no data is valid (we do nothing) */
	if (len == 0)
d508 4
d524 1
a524 1
			SHA256_Transform(context, context->buffer);
d536 1
a536 1
		SHA256_Transform(context, data);
d550 2
a551 4
void
SHA256_Final(u_int8_t digest[], SHA256_CTX *context)
{
	u_int32_t	*d = (u_int32_t *)digest;
d554 3
d558 1
a558 1
	if (digest != NULL) {
d576 1
a576 1
				SHA256_Transform(context, context->buffer);
d589 1
a589 1
		*(u_int64_t *)&context->buffer[SHA256_SHORT_BLOCK_LENGTH] = context->bitcount;
d592 1
a592 1
		SHA256_Transform(context, context->buffer);
d613 31
d646 2
a647 4
void
SHA512_Init(SHA512_CTX *context)
{
	if (context == NULL)
d649 1
d658 1
d660 34
a693 30
#define ROUND512_0_TO_15(a,b,c,d,e,f,g,h) do {				    \
	W512[j] = (u_int64_t)data[7] | ((u_int64_t)data[6] << 8) |	    \
	    ((u_int64_t)data[5] << 16) | ((u_int64_t)data[4] << 24) |	    \
	    ((u_int64_t)data[3] << 32) | ((u_int64_t)data[2] << 40) |	    \
	    ((u_int64_t)data[1] << 48) | ((u_int64_t)data[0] << 56);	    \
	data += 8;							    \
	T1 = (h) + Sigma1_512((e)) + Ch((e), (f), (g)) + K512[j] + W512[j]; \
	(d) += T1;							    \
	(h) = T1 + Sigma0_512((a)) + Maj((a), (b), (c));		    \
	j++;								    \
} while(0)


#define ROUND512(a,b,c,d,e,f,g,h) do {					    \
	s0 = W512[(j+1)&0x0f];						    \
	s0 = sigma0_512(s0);						    \
	s1 = W512[(j+14)&0x0f];						    \
	s1 = sigma1_512(s1);						    \
	T1 = (h) + Sigma1_512((e)) + Ch((e), (f), (g)) + K512[j] +	    \
             (W512[j&0x0f] += s1 + W512[(j+9)&0x0f] + s0);		    \
	(d) += T1;							    \
	(h) = T1 + Sigma0_512((a)) + Maj((a), (b), (c));		    \
	j++;								    \
} while(0)

void
SHA512_Transform(SHA512_CTX *context, const u_int8_t *data)
{
	u_int64_t	a, b, c, d, e, f, g, h, s0, s1;
	u_int64_t	T1, *W512 = (u_int64_t *)context->buffer;
d746 3
a748 5
void
SHA512_Transform(SHA512_CTX *context, const u_int8_t *data)
{
	u_int64_t	a, b, c, d, e, f, g, h, s0, s1;
	u_int64_t	T1, T2, *W512 = (u_int64_t *)context->buffer;
d763 3
a765 5
		W512[j] = (u_int64_t)data[7] | ((u_int64_t)data[6] << 8) |
		    ((u_int64_t)data[5] << 16) | ((u_int64_t)data[4] << 24) |
		    ((u_int64_t)data[3] << 32) | ((u_int64_t)data[2] << 40) |
		    ((u_int64_t)data[1] << 48) | ((u_int64_t)data[0] << 56);
		data += 8;
d768 4
d824 2
a825 4
void
SHA512_Update(SHA512_CTX *context, const u_int8_t *data, size_t len)
{
	size_t	freespace, usedspace;
d827 2
a828 2
	/* Calling with no data is valid (we do nothing) */
	if (len == 0)
d830 4
d846 1
a846 1
			SHA512_Transform(context, context->buffer);
d858 1
a858 1
		SHA512_Transform(context, data);
d872 1
a872 3
void
SHA512_Last(SHA512_CTX *context)
{
d893 1
a893 1
			SHA512_Transform(context, context->buffer);
d906 2
a907 2
	*(u_int64_t *)&context->buffer[SHA512_SHORT_BLOCK_LENGTH] = context->bitcount[1];
	*(u_int64_t *)&context->buffer[SHA512_SHORT_BLOCK_LENGTH+8] = context->bitcount[0];
d910 1
a910 1
	SHA512_Transform(context, context->buffer);
d913 5
a917 4
void
SHA512_Final(u_int8_t digest[], SHA512_CTX *context)
{
	u_int64_t	*d = (u_int64_t *)digest;
d920 1
a920 1
	if (digest != NULL) {
d942 31
d975 2
a976 4
void
SHA384_Init(SHA384_CTX *context)
{
	if (context == NULL)
d978 1
d984 2
a985 4
void
SHA384_Update(SHA384_CTX *context, const u_int8_t *data, size_t len)
{
	SHA512_Update((SHA512_CTX *)context, data, len);
d988 5
a992 4
void
SHA384_Final(u_int8_t digest[], SHA384_CTX *context)
{
	u_int64_t	*d = (u_int64_t *)digest;
d995 2
a996 2
	if (digest != NULL) {
		SHA512_Last((SHA512_CTX *)context);
d1015 31
@


1.1
log
@hmac-sha2-{256,384,512} support in AH/ESP auth.  markus ok
@
text
@d609 1
a609 1
	bzero(context, sizeof(context));
d630 1
a630 1
		bzero(context, sizeof(context));
d939 1
a939 1
	bzero(context, sizeof(context));
d959 1
a959 1
		bzero(context, sizeof(context));
d1014 1
a1014 1
	bzero(context, sizeof(context));
d1034 1
a1034 1
		bzero(context, sizeof(context));
@

