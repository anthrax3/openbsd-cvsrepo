head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.30
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.26
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.28
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.20
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.24
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.22
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.18
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.16
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.14
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.12
	OPENBSD_5_0:1.5.0.10
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.8
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.6
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.2
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.28
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.26
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.24
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.22
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.20
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.18
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.16
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.14
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.12
	OPENBSD_3_6_BASE:1.3
	SMP_SYNC_A:1.3
	SMP_SYNC_B:1.3
	OPENBSD_3_5:1.3.0.10
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.8
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.3
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	UBC_SYNC_B:1.3
	UBC:1.2.0.4
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_9:1.1.0.8
	OPENBSD_2_8:1.1.0.6
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.4
	OPENBSD_2_7_BASE:1.1
	SMP:1.1.0.2;
locks; strict;
comment	@ * @;


1.5
date	2009.07.05.19.33.46;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.04.23.08.47;	author hshoexer;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.26.51;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.26.21.40.13;	author markus;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2000.02.28.23.13.05;	author deraadt;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2000.03.02.07.04.36;	author niklas;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2001.10.31.03.11.47;	author nate;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.03.28.11.43.03;	author niklas;	state Exp;
branches;
next	;

1.2.4.1
date	2002.06.11.03.28.34;	author art;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Buffer in RMD160_CTX is length RMD160_BLOCK_LENGTH not RMD160_DIGEST_LENGTH.
Userland version was already correct.  From Jason Fritcher.  OK deraadt@@
@
text
@/*	$OpenBSD: rmd160.h,v 1.4 2008/11/04 23:08:47 hshoexer Exp $	*/
/*
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef  _RMD160_H
#define  _RMD160_H

#define RMD160_BLOCK_LENGTH		64
#define RMD160_DIGEST_LENGTH		20

/* RMD160 context. */
typedef struct RMD160Context {
	u_int32_t state[5];			/* state */
	u_int64_t count;			/* number of bits, mod 2^64 */
	u_char buffer[RMD160_BLOCK_LENGTH];	/* input buffer */
} RMD160_CTX;

__BEGIN_DECLS
void	 RMD160Init(RMD160_CTX *);
void	 RMD160Transform(u_int32_t [5], const u_char [RMD160_BLOCK_LENGTH])
	     __attribute__((__bounded__(__minbytes__,1,5)))
	     __attribute__((__bounded__(__minbytes__,2,RMD160_BLOCK_LENGTH)));
void	 RMD160Update(RMD160_CTX *, const u_char *, u_int32_t)
	     __attribute__((__bounded__(__string__,2,3)));
void	 RMD160Final(u_char [RMD160_DIGEST_LENGTH], RMD160_CTX *)
	     __attribute__((__bounded__(__minbytes__,1,RMD160_DIGEST_LENGTH)));
__END_DECLS

#endif  /* _RMD160_H */
@


1.4
log
@Use defines for constants.  Use __attribute__ bounded.

ok markus@@ (quite some time ago)
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.3 2002/03/14 01:26:51 millert Exp $	*/
d35 1
a35 1
	u_char buffer[RMD160_DIGEST_LENGTH];	/* input buffer */
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.2 2001/09/26 21:40:13 markus Exp $	*/
d28 3
d33 3
a35 3
	u_int32_t state[5];	/* state */
	u_int64_t count;	/* number of bits, modulo 2^64 */
	u_char buffer[64];	/* input buffer */
d38 1
d40 8
a47 3
void	 RMD160Transform(u_int32_t [5], const u_char [64]);
void	 RMD160Update(RMD160_CTX *, const u_char *, u_int32_t);
void	 RMD160Final(u_char [20], RMD160_CTX *);
@


1.2
log
@RIPEMD-160 implementation based on
ftp://ftp.rsasecurity.com/pub/cryptobytes/crypto3n2.pdf, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: $	*/
d35 4
a38 4
void	 RMD160Init __P((RMD160_CTX *));
void	 RMD160Transform __P ((u_int32_t [5], const u_char [64]));
void	 RMD160Update __P((RMD160_CTX *, const u_char *, u_int32_t));
void	 RMD160Final __P((u_char [20], RMD160_CTX *));
@


1.2.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: rmd160.h,v 1.2 2001/09/26 21:40:13 markus Exp $	*/
d35 4
a38 4
void	 RMD160Init(RMD160_CTX *);
void	 RMD160Transform(u_int32_t [5], const u_char [64]);
void	 RMD160Update(RMD160_CTX *, const u_char *, u_int32_t);
void	 RMD160Final(u_char [20], RMD160_CTX *);
@


1.1
log
@move crypto code
@
text
@d1 1
a1 2
/*	$OpenBSD: ip_rmd160.h,v 1.3 1999/02/17 18:10:08 deraadt Exp $	*/

d3 1
a3 5
 *      FILE:     rmd160.h
 *
 *      CONTENTS: Header file for a sample C-implementation of the
 *                RIPEMD-160 hash-function. 
 *      TARGET:   any computer with an ANSI C compiler
d5 8
a12 6
 *      AUTHOR:   Antoon Bosselaers, ESAT-COSIC
 *      DATE:     1 March 1996
 *      VERSION:  1.0
 *
 *      Copyright (c) Katholieke Universiteit Leuven
 *      1996, All Rights Reserved
d14 10
d25 1
a25 2

#ifndef  _RMD160_H	/* make sure this file is read only once */
d28 5
a32 5
typedef struct {
	u_int32_t state[5];	/* state (ABCDE) */
	u_int32_t length[2];	/* number of bits */
	u_char    bbuffer[64];	/* overflow buffer */
	u_int32_t buflen;	/* number of chars in bbuffer */
d35 4
a38 7
void RMD160Init __P((RMD160_CTX *context));
void RMD160Transform __P((u_int32_t state[5], const u_int32_t block[16]));
void RMD160Update __P((RMD160_CTX *context, const u_char *data, u_int nbytes));
void RMD160Final __P((u_char digest[20], RMD160_CTX *context));
char *RMD160End __P((RMD160_CTX *, char *));
char *RMD160File __P((char *, char *));
char *RMD160Data __P((const u_char *, size_t, char *));
@


1.1.2.1
log
@Sync with -current
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.1.2.2
log
@Sync the SMP branch to something just after 3.0
@
text
@d2 1
d4 5
a8 1
 * Copyright (c) 2001 Markus Friedl.  All rights reserved.
d10 6
a15 8
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
a16 10
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
d18 2
a19 1
#ifndef  _RMD160_H
d22 5
a26 5
/* RMD160 context. */
typedef struct RMD160Context {
	u_int32_t state[5];	/* state */
	u_int64_t count;	/* number of bits, modulo 2^64 */
	u_char buffer[64];	/* input buffer */
d29 7
a35 4
void	 RMD160Init __P((RMD160_CTX *));
void	 RMD160Transform __P ((u_int32_t [5], const u_char [64]));
void	 RMD160Update __P((RMD160_CTX *, const u_char *, u_int32_t));
void	 RMD160Final __P((u_char [20], RMD160_CTX *));
@


1.1.2.3
log
@Merge in -current from about a week ago
@
text
@d35 4
a38 4
void	 RMD160Init(RMD160_CTX *);
void	 RMD160Transform(u_int32_t [5], const u_char [64]);
void	 RMD160Update(RMD160_CTX *, const u_char *, u_int32_t);
void	 RMD160Final(u_char [20], RMD160_CTX *);
@


