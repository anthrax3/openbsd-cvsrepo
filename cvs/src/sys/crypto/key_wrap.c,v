head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.2
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.4.0.18
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.14
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.10
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.10
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.4
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@ * @;


1.5
date	2017.05.02.17.07.06;	author mikeb;	state Exp;
branches;
next	1.4;
commitid	8itHxD4pqII16hPy;

1.4
date	2013.06.11.18.45.08;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.11.15.42.05;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.20.15.36.03;	author matthew;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.12.15.43.00;	author damien;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Switch 802.11 crypto over to the new AES

OK stsp@@
@
text
@/*	$OpenBSD: key_wrap.c,v 1.4 2013/06/11 18:45:08 deraadt Exp $	*/

/*-
 * Copyright (c) 2008 Damien Bergamini <damien.bergamini@@free.fr>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * This code implements the AES Key Wrap algorithm described in RFC 3394.
 */

#include <sys/param.h>
#include <sys/systm.h>

#include <crypto/aes.h>
#include <crypto/key_wrap.h>

static const u_int8_t IV[8] =
	{ 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6 };

void
aes_key_wrap_set_key(aes_key_wrap_ctx *ctx, const u_int8_t *K, size_t K_len)
{
	AES_Setkey(&ctx->ctx, K, K_len);
}

void
aes_key_wrap_set_key_wrap_only(aes_key_wrap_ctx *ctx, const u_int8_t *K,
    size_t K_len)
{
	AES_Setkey(&ctx->ctx, K, K_len);
}

void
aes_key_wrap(aes_key_wrap_ctx *ctx, const u_int8_t *P, size_t n, u_int8_t *C)
{
	u_int64_t B[2], t;
	u_int8_t *A, *R;
	size_t i;
	int j;

	memmove(C + 8, P, n * 8);	/* P and C may overlap */
	A = C;				/* A points to C[0] */
	memcpy(A, IV, 8);		/* A = IV, an initial value */

	for (j = 0, t = 1; j <= 5; j++) {
		R = C + 8;
		for (i = 1; i <= n; i++, t++) {
			/* B = A | R[i] */
			memcpy(&B[0], A, 8);
			memcpy(&B[1], R, 8);
			/* B = AES(K, B) */
			AES_Encrypt(&ctx->ctx, (caddr_t)B, (caddr_t)B);
			/* MSB(64, B) = MSB(64, B) ^ t */
			B[0] ^= htobe64(t);
			/* A = MSB(64, B) */
			memcpy(A, &B[0], 8);
			/* R[i] = LSB(64, B) */
			memcpy(R, &B[1], 8);

			R += 8;
		}
	}
	explicit_bzero(B, sizeof B);
}

int
aes_key_unwrap(aes_key_wrap_ctx *ctx, const u_int8_t *C, u_int8_t *P, size_t n)
{
	u_int64_t B[2], t;
	u_int8_t A[8], *R;
	size_t i;
	int j;

	memcpy(A, C, 8);		/* A = C[0] */
	memmove(P, C + 8, n * 8);	/* P and C may overlap */

	for (j = 5, t = 6 * n; j >= 0; j--) {
		R = P + (n - 1) * 8;
		for (i = n; i >= 1; i--, t--) {
			/* MSB(64, B) = A */
			memcpy(&B[0], A, 8);
			/* MSB(64, B) = MSB(64, B) ^ t */
			B[0] ^= htobe64(t);
			/* B = MSB(64, B) | R[i] */
			memcpy(&B[1], R, 8);
			/* B = AES-1(K, B) */
			AES_Decrypt(&ctx->ctx, (caddr_t)B, (caddr_t)B);
			/* A = MSB(64, B) */
			memcpy(A, &B[0], 8);
			/* R[i] = LSB(64, B) */
			memcpy(R, &B[1], 8);

			R -= 8;
		}
	}
	explicit_bzero(B, sizeof B);

	/* check that A is an appropriate initial value */
	return timingsafe_bcmp(A, IV, 8) != 0;
}
@


1.4
log
@Replace more ovbcopy with memmove; swap the src and dst arguments too
@
text
@d1 1
a1 1
/*	$OpenBSD: key_wrap.c,v 1.3 2011/01/11 15:42:05 deraadt Exp $	*/
d26 1
a26 1
#include <crypto/rijndael.h>
d35 1
a35 1
	rijndael_set_key(&ctx->ctx, K, K_len * NBBY);
d42 1
a42 1
	rijndael_set_key_enc_only(&ctx->ctx, K, K_len * NBBY);
d64 1
a64 1
			rijndael_encrypt(&ctx->ctx, (caddr_t)B, (caddr_t)B);
d99 1
a99 1
			rijndael_decrypt(&ctx->ctx, (caddr_t)B, (caddr_t)B);
@


1.3
log
@for key material that is being being discarded, convert bzero() to
explicit_bzero() where required
ok markus mikeb
@
text
@d1 1
a1 1
/*	$OpenBSD: key_wrap.c,v 1.2 2010/07/20 15:36:03 matthew Exp $	*/
d53 1
a53 1
	ovbcopy(P, C + 8, n * 8);	/* P and C may overlap */
d87 1
a87 1
	ovbcopy(C + 8, P, n * 8);	/* P and C may overlap */
@


1.2
log
@Switch some obvious network stack MAC comparisons from bcmp() to
timingsafe_bcmp().

ok deraadt@@; committed over WPA.
@
text
@d1 1
a1 1
/*	$OpenBSD: key_wrap.c,v 1.1 2008/08/12 15:43:00 damien Exp $	*/
d75 1
a75 1
	memset(B, 0, sizeof B);
d108 1
a108 1
	memset(B, 0, sizeof B);
@


1.1
log
@Implementation of the HMAC-MD5, HMAC-SHA1, HMAC-SHA256, AES-128-CMAC
and AES Key Wrap algorithms.
They will replace/extend the non-generic implementation in net80211.

AES-128-CMAC tested by sobrado@@ (AlphaServer 1200),
naddy@@ (alpha/sparc64) and sthen@@ (sparc64, armish).
HMAC-* reviewed by hshoexer@@

ok and hints from djm@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d111 1
a111 1
	return memcmp(A, IV, 8) != 0;
@

