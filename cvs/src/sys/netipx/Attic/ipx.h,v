head	1.19;
access;
symbols
	OPENBSD_4_1:1.18.0.14
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.12
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.10
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.8
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.6
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.18.0.4
	OPENBSD_3_6_BASE:1.18
	SMP_SYNC_A:1.18
	SMP_SYNC_B:1.18
	OPENBSD_3_5:1.18.0.2
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	UBC_SYNC_A:1.16
	OPENBSD_3_3:1.16.0.4
	OPENBSD_3_3_BASE:1.16
	OPENBSD_3_2:1.16.0.2
	OPENBSD_3_2_BASE:1.16
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	UBC_SYNC_B:1.16
	UBC:1.14.0.6
	UBC_BASE:1.14
	OPENBSD_3_0:1.14.0.4
	OPENBSD_3_0_BASE:1.14
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_9:1.14.0.2
	OPENBSD_2_8:1.13.0.2
	OPENBSD_2_8_BASE:1.13
	OPENBSD_2_7:1.12.0.4
	OPENBSD_2_7_BASE:1.12
	SMP:1.12.0.2
	SMP_BASE:1.12
	kame_19991208:1.5
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.19
date	2007.06.06.10.05.48;	author henning;	state dead;
branches;
next	1.18;

1.18
date	2003.10.26.17.01.11;	author avsm;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.02.23.28.16;	author millert;	state Exp;
branches;
next	1.16;

1.16
date	2002.09.06.21.11.20;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.14.01.27.12;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2000.12.06.17.19.01;	author deraadt;	state Exp;
branches
	1.14.6.1;
next	1.13;

1.13
date	2000.09.22.14.56.22;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2000.01.17.00.34.00;	author fgsch;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2000.01.13.07.10.36;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.13.06.48.21;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.13.04.36.40;	author fgsch;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.11.20.54.59;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.11.19.31.54;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.11.01.26.20;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	96.12.23.08.47.03;	author mickey;	state Exp;
branches;
next	1.4;

1.4
date	96.11.25.08.19.58;	author mickey;	state Exp;
branches;
next	1.3;

1.3
date	96.10.26.09.40.30;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.10.26.09.34.48;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	96.08.16.09.15.58;	author mickey;	state Exp;
branches;
next	;

1.12.2.1
date	2001.05.14.22.40.21;	author niklas;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2002.03.28.14.57.37;	author niklas;	state Exp;
branches;
next	1.12.2.3;

1.12.2.3
date	2003.03.28.00.06.55;	author niklas;	state Exp;
branches;
next	1.12.2.4;

1.12.2.4
date	2003.06.07.11.06.09;	author ho;	state Exp;
branches;
next	1.12.2.5;

1.12.2.5
date	2004.02.19.10.57.26;	author niklas;	state Exp;
branches;
next	;

1.14.6.1
date	2002.06.11.03.31.38;	author art;	state Exp;
branches;
next	1.14.6.2;

1.14.6.2
date	2002.10.29.00.36.48;	author art;	state Exp;
branches;
next	;


desc
@@


1.19
log
@bye bye
most of the IPX removal work done @@ calgary airport
@
text
@/*	$OpenBSD: ipx.h,v 1.18 2003/10/26 17:01:11 avsm Exp $	*/

/*-
 *
 * Copyright (c) 1996 Michael Shalayeff
 * Copyright (c) 1995, Mike Mitchell
 * Copyright (c) 1984, 1985, 1986, 1987, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ipx.h
 *
 * from FreeBSD Id: ipx.h,v 1.7 1996/01/30 22:58:48 mpp Exp
 */

#ifndef _NETIPX_IPX_H_
#define	_NETIPX_IPX_H_

/*
 * Constants and Structures
 */

/*
 * Protocols
 */
#define IPXPROTO_UNKWN		0	/* Unknown */
#define IPXPROTO_RI		1	/* RIP Routing Information */
#define IPXPROTO_PXP		4	/* IPX Packet Exchange Protocol */
#define IPXPROTO_SPX		5	/* SPX Sequenced Packet */
#define IPXPROTO_NCP		17	/* NCP NetWare Core */
#define IPXPROTO_NETBIOS	20	/* Propagated Packet */
#define IPXPROTO_RAW		255	/* Placemarker*/
#define IPXPROTO_MAX		256	/* Placemarker*/

/*
 * Port/Socket numbers: network standard functions
 */

#define IPXPORT_RI		1	/* NS RIP Routing Information */
#define IPXPORT_ECHO		2	/* NS Echo */
#define IPXPORT_RE		3	/* NS Router Error */
#define IPXPORT_FSP		0x0451	/* NW NCP Core Protocol */
#define IPXPORT_SAP		0x0452	/* NW SAP Service Advertising */
#define IPXPORT_RIP		0x0453	/* NW RIP Routing Information */
#define IPXPORT_NETBIOS		0x0455	/* NW NetBIOS */
#define IPXPORT_DIAGS		0x0456	/* NW Diagnostics */
#define IPXPORT_SERIAL		0x0457	/* NW Serialization */
#define IPXPORT_NLSP		0x9001	/* NW NLSP */
#define IPXPORT_WAN		0x9004	/* NW IPXWAN */
#define IPXPORT_PING		0x9086	/* NW IPX Ping */
#define IPXPORT_MOBILE		0x9088	/* NW Mobile IPX Socket */
/*
 * Ports < IPXPORT_RESERVED are reserved for privileged
 */
#define IPXPORT_RESERVED	0x4000
/*
 * Ports > IPXPORT_WELLKNOWN are reserved for privileged
 * processes (e.g. root).
 */
#define IPXPORT_WELLKNOWN	0x6000

/* flags passed to ipx_outputfl as last parameter */

#define IPX_FORWARDING		0x1	/* most of ipx header exists */
#define IPX_ROUTETOIF		0x10	/* same as SO_DONTROUTE */
#define IPX_ALLOWBROADCAST	SO_BROADCAST   /* can send broadcast packets */

#define IPX_MAXHOPS		15

/* flags passed to get/set socket option */
#define SO_HEADERS_ON_INPUT	1
#define SO_HEADERS_ON_OUTPUT	2
#define SO_DEFAULT_HEADERS	3
#define SO_LAST_HEADER		4
#define SO_IPXIP_ROUTE		5
#define SO_SEQNO		6
#define SO_ALL_PACKETS		7
#define SO_MTU			8
#define SO_IPXTUN_ROUTE		9
#define SO_IPX_CHECKSUM		10

/*
 * IPX addressing
 */
#define IPX_HOSTADDRLEN	6
#define IPX_NETADDRLEN	4

typedef
union ipx_host {
	u_int8_t	c_host[IPX_HOSTADDRLEN]		__packed;
	u_int16_t	s_host[IPX_HOSTADDRLEN/2]	__packed;
} ipx_host_t;

typedef
union ipx_net {
	u_int8_t	c_net[IPX_NETADDRLEN]		__packed;
	u_int16_t	s_net[IPX_NETADDRLEN/2]		__packed;
	u_int32_t	l_net				__packed;
} ipx_net_t;

typedef	u_int16_t	ipx_port_t;

typedef
struct ipx_addr {
	ipx_net_t	ipx_net				__packed;
	ipx_host_t	ipx_host			__packed;
	ipx_port_t	ipx_port			__packed;
} ipx_addr_t;

/*
 * Socket address
 */
struct sockaddr_ipx {
	u_int8_t	sipx_len;
	u_int8_t	sipx_family;
	u_int16_t	sipx_type;
	struct ipx_addr	sipx_addr;
};
#define sipx_net  sipx_addr.ipx_net
#define sipx_network  sipx_addr.ipx_net.l_net
#define sipx_node sipx_addr.ipx_host.c_host
#define sipx_port sipx_addr.ipx_port

/*
 * Definitions for IPX Internet Datagram Protocol
 */
struct ipx {
	u_int16_t  ipx_sum __packed;	/* Checksum */
	u_int16_t  ipx_len __packed;	/* Length, in bytes, including header */
	u_int8_t   ipx_tc  __packed;	/* Transport Control (i.e. hop count) */
	u_int8_t   ipx_pt  __packed;	/* Packet Type (i.e. lev 2 protocol) */
	ipx_addr_t ipx_dna __packed;	/* Destination Network Address */
	ipx_addr_t ipx_sna __packed;	/* Source Network Address */
};

#define ipx_neteqnn(a,b) \
	(((a).s_net[0]==(b).s_net[0]) && ((a).s_net[1]==(b).s_net[1]))
#define ipx_neteq(a,b) ipx_neteqnn((a).ipx_net, (b).ipx_net)
#define satoipx_addr(sa) (((struct sockaddr_ipx *)&(sa))->sipx_addr)
#define ipx_hosteqnh(s,t) ((s).s_host[0] == (t).s_host[0] && \
	(s).s_host[1] == (t).s_host[1] && (s).s_host[2] == (t).s_host[2])
#define ipx_hosteq(s,t) (ipx_hosteqnh((s).ipx_host,(t).ipx_host))
#define ipx_nullnet(x) \
	(((x).ipx_net.s_net[0]==0) && ((x).ipx_net.s_net[1]==0))
#define ipx_nullhost(x) (((x).ipx_host.s_host[0]==0) && \
	((x).ipx_host.s_host[1]==0) && ((x).ipx_host.s_host[2]==0))
#define ipx_wildnet(x) (((x).ipx_net.s_net[0]==0xffff) && \
	((x).ipx_net.s_net[1]==0xffff))
#define ipx_wildhost(x) (((x).ipx_host.s_host[0]==0xffff) && \
	((x).ipx_host.s_host[1]==0xffff) && ((x).ipx_host.s_host[2]==0xffff))

/*
 * Definitions for inet sysctl operations.
 *
 * Third level is protocol number.
 * Fourth level is desired variable within that protocol.
 */
#define IPXPROTO_MAXID	(IPXPROTO_SPX + 1)	/* don't list to IPPROTO_MAX */

#define CTL_IPXPROTO_NAMES { \
	{ "ipx", CTLTYPE_NODE }, \
	{ 0, 0 }, \
	{ 0, 0 }, \
	{ 0, 0 }, \
	{ 0, 0 }, \
	{ "spx", CTLTYPE_NODE }, \
}

#ifdef _KERNEL

#define	satosipx(a)	((struct sockaddr_ipx *)(a))
#define	sipxtosa(a)	((struct sockaddr *)(a))

extern int ipxcksum;
extern int ipxforwarding;
extern int ipxnetbios;
extern struct domain ipxdomain;
extern struct sockaddr_ipx ipx_netmask;
extern struct sockaddr_ipx ipx_hostmask;

extern union ipx_net	ipx_zeronet;
extern union ipx_host	ipx_zerohost;
extern union ipx_net	ipx_broadnet;
extern union ipx_host	ipx_broadhost;

extern u_long ipx_pexseq;
extern u_char ipxctlerrmap[];

struct route;
struct sockaddr;
struct socket;
struct ipxpcb;
void	ipx_abort(struct ipxpcb *ipxp);
u_short	ipx_cksum(struct mbuf *m, int len);
int	ipx_control(struct socket *so, u_long cmd, caddr_t data,
			 struct ifnet *ifp);
void	*ipx_ctlinput(int cmd, struct sockaddr *arg_as_sa, void *dummy);
int	ipx_ctloutput(int req, struct socket *so, int level, int name,
			   struct mbuf **value);
int	ipx_do_route(struct ipx_addr *src, struct route *ro);
void	ipx_drop(struct ipxpcb *ipxp, int errno);
void	ipx_forward(struct mbuf *m);
void	ipx_init(void);
void	ipx_input(struct mbuf *, ...);
void	ipxintr(void);
int	ipx_output(struct mbuf *m0, ...);
int	ipx_outputfl(struct mbuf *m0, struct route *ro, int flags);
int	ipx_output_type20(struct mbuf *m);
int	ipx_raw_usrreq(struct socket *so, int req, struct mbuf *m,
			    struct mbuf *nam, struct mbuf *control);
void	ipx_undo_route(struct route *ro);
int	ipx_usrreq(struct socket *so, int req, struct mbuf *m,
			struct mbuf *nam, struct mbuf *control);
void	ipx_watch_output(struct mbuf *m, struct ifnet *ifp);
int	ipx_sysctl(int *, u_int, void *, size_t *, void *, size_t);
void	ipx_printhost(struct ipx_addr *addr);

#endif /* _KERNEL */

#include <sys/cdefs.h>

__BEGIN_DECLS
struct	ipx_addr ipx_addr(const char *);
char	*ipx_ntoa(struct ipx_addr);
__END_DECLS

#endif /* !_NETIPX_IPX_H_ */
@


1.18
log
@Use __packed attribute to cleanup the '#define XXX' stuff in here.
Also stops the struct having a double ;; in variable declarations,
which breaks a few non-gcc parsers.

millert@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.17 2003/06/02 23:28:16 millert Exp $	*/
@


1.17
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.16 2002/09/06 21:11:20 deraadt Exp $	*/
a109 1
#define XXX	__attribute__((__packed__))
d113 2
a114 2
	u_int8_t	c_host[IPX_HOSTADDRLEN]		XXX;
	u_int16_t	s_host[IPX_HOSTADDRLEN/2]	XXX;
d119 3
a121 3
	u_int8_t	c_net[IPX_NETADDRLEN]		XXX;
	u_int16_t	s_net[IPX_NETADDRLEN/2]		XXX;
	u_int32_t	l_net				XXX;
d128 3
a130 3
	ipx_net_t	ipx_net				XXX;
	ipx_host_t	ipx_host			XXX;
	ipx_port_t	ipx_port			XXX;
d151 6
a156 6
	u_int16_t	ipx_sum XXX;	/* Checksum */
	u_int16_t	ipx_len XXX;	/* Length, in bytes, including header */
	u_int8_t	ipx_tc  XXX;	/* Transport Control (i.e. hop count) */
	u_int8_t	ipx_pt  XXX;	/* Packet Type (i.e. lev 2 protocol) */
	ipx_addr_t	ipx_dna XXX;	/* Destination Network Address */
	ipx_addr_t	ipx_sna XXX;	/* Source Network Address */
a157 1
#undef	XXX
@


1.16
log
@no ; at end of CTL_IPXPROTO_NAMES
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.15 2002/03/14 01:27:12 millert Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.15
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.14 2000/12/06 17:19:01 deraadt Exp $	*/
d196 1
a196 1
};
@


1.14
log
@use __x__ formats for __attribute__ arguments; guenther@@gac.edu
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.13 2000/09/22 14:56:22 millert Exp $	*/
d222 24
a245 24
void	ipx_abort __P((struct ipxpcb *ipxp));
u_short	ipx_cksum __P((struct mbuf *m, int len));
int	ipx_control __P((struct socket *so, u_long cmd, caddr_t data,
			 struct ifnet *ifp));
void	*ipx_ctlinput __P((int cmd, struct sockaddr *arg_as_sa, void *dummy));
int	ipx_ctloutput __P((int req, struct socket *so, int level, int name,
			   struct mbuf **value));
int	ipx_do_route __P((struct ipx_addr *src, struct route *ro));
void	ipx_drop __P((struct ipxpcb *ipxp, int errno));
void	ipx_forward __P((struct mbuf *m));
void	ipx_init __P((void));
void	ipx_input __P((struct mbuf *, ...));
void	ipxintr __P((void));
int	ipx_output __P((struct mbuf *m0, ...));
int	ipx_outputfl __P((struct mbuf *m0, struct route *ro, int flags));
int	ipx_output_type20 __P((struct mbuf *m));
int	ipx_raw_usrreq __P((struct socket *so, int req, struct mbuf *m,
			    struct mbuf *nam, struct mbuf *control));
void	ipx_undo_route __P((struct route *ro));
int	ipx_usrreq __P((struct socket *so, int req, struct mbuf *m,
			struct mbuf *nam, struct mbuf *control));
void	ipx_watch_output __P((struct mbuf *m, struct ifnet *ifp));
int	ipx_sysctl __P((int *, u_int, void *, size_t *, void *, size_t));
void	ipx_printhost __P((struct ipx_addr *addr));
d252 2
a253 2
struct	ipx_addr ipx_addr __P((const char *));
char	*ipx_ntoa __P((struct ipx_addr));
@


1.14.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.14 2000/12/06 17:19:01 deraadt Exp $	*/
d222 24
a245 24
void	ipx_abort(struct ipxpcb *ipxp);
u_short	ipx_cksum(struct mbuf *m, int len);
int	ipx_control(struct socket *so, u_long cmd, caddr_t data,
			 struct ifnet *ifp);
void	*ipx_ctlinput(int cmd, struct sockaddr *arg_as_sa, void *dummy);
int	ipx_ctloutput(int req, struct socket *so, int level, int name,
			   struct mbuf **value);
int	ipx_do_route(struct ipx_addr *src, struct route *ro);
void	ipx_drop(struct ipxpcb *ipxp, int errno);
void	ipx_forward(struct mbuf *m);
void	ipx_init(void);
void	ipx_input(struct mbuf *, ...);
void	ipxintr(void);
int	ipx_output(struct mbuf *m0, ...);
int	ipx_outputfl(struct mbuf *m0, struct route *ro, int flags);
int	ipx_output_type20(struct mbuf *m);
int	ipx_raw_usrreq(struct socket *so, int req, struct mbuf *m,
			    struct mbuf *nam, struct mbuf *control);
void	ipx_undo_route(struct route *ro);
int	ipx_usrreq(struct socket *so, int req, struct mbuf *m,
			struct mbuf *nam, struct mbuf *control);
void	ipx_watch_output(struct mbuf *m, struct ifnet *ifp);
int	ipx_sysctl(int *, u_int, void *, size_t *, void *, size_t);
void	ipx_printhost(struct ipx_addr *addr);
d252 2
a253 2
struct	ipx_addr ipx_addr(const char *);
char	*ipx_ntoa(struct ipx_addr);
@


1.14.6.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.14.6.1 2002/06/11 03:31:38 art Exp $	*/
d196 1
a196 1
}
@


1.13
log
@Add prototypes for ipx_addr() and ipx_ntoa(); mickey@@ OK'd
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.12 2000/01/17 00:34:00 fgsch Exp $	*/
d114 1
a114 1
#define XXX	__attribute__((packed))
@


1.12
log
@Add sysctl vars for checksum, forwarding and netbios.
Remove ancient code from ipx_input. ipxrecvspace/ipxsendspace changed
to ipx_xxx to match netinet counterparts.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.11 2000/01/13 07:10:36 fgsch Exp $	*/
d248 7
@


1.12.2.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.14 2000/12/06 17:19:01 deraadt Exp $	*/
d114 1
a114 1
#define XXX	__attribute__((__packed__))
a247 7

#include <sys/cdefs.h>

__BEGIN_DECLS
struct	ipx_addr ipx_addr __P((const char *));
char	*ipx_ntoa __P((struct ipx_addr));
__END_DECLS
@


1.12.2.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d222 24
a245 24
void	ipx_abort(struct ipxpcb *ipxp);
u_short	ipx_cksum(struct mbuf *m, int len);
int	ipx_control(struct socket *so, u_long cmd, caddr_t data,
			 struct ifnet *ifp);
void	*ipx_ctlinput(int cmd, struct sockaddr *arg_as_sa, void *dummy);
int	ipx_ctloutput(int req, struct socket *so, int level, int name,
			   struct mbuf **value);
int	ipx_do_route(struct ipx_addr *src, struct route *ro);
void	ipx_drop(struct ipxpcb *ipxp, int errno);
void	ipx_forward(struct mbuf *m);
void	ipx_init(void);
void	ipx_input(struct mbuf *, ...);
void	ipxintr(void);
int	ipx_output(struct mbuf *m0, ...);
int	ipx_outputfl(struct mbuf *m0, struct route *ro, int flags);
int	ipx_output_type20(struct mbuf *m);
int	ipx_raw_usrreq(struct socket *so, int req, struct mbuf *m,
			    struct mbuf *nam, struct mbuf *control);
void	ipx_undo_route(struct route *ro);
int	ipx_usrreq(struct socket *so, int req, struct mbuf *m,
			struct mbuf *nam, struct mbuf *control);
void	ipx_watch_output(struct mbuf *m, struct ifnet *ifp);
int	ipx_sysctl(int *, u_int, void *, size_t *, void *, size_t);
void	ipx_printhost(struct ipx_addr *addr);
d252 2
a253 2
struct	ipx_addr ipx_addr(const char *);
char	*ipx_ntoa(struct ipx_addr);
@


1.12.2.3
log
@Sync the SMP branch with 3.3
@
text
@d196 1
a196 1
}
@


1.12.2.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.12.2.3 2003/03/28 00:06:55 niklas Exp $	*/
d18 5
a22 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.12.2.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d110 1
d114 2
a115 2
	u_int8_t	c_host[IPX_HOSTADDRLEN]		__packed;
	u_int16_t	s_host[IPX_HOSTADDRLEN/2]	__packed;
d120 3
a122 3
	u_int8_t	c_net[IPX_NETADDRLEN]		__packed;
	u_int16_t	s_net[IPX_NETADDRLEN/2]		__packed;
	u_int32_t	l_net				__packed;
d129 3
a131 3
	ipx_net_t	ipx_net				__packed;
	ipx_host_t	ipx_host			__packed;
	ipx_port_t	ipx_port			__packed;
d152 6
a157 6
	u_int16_t  ipx_sum __packed;	/* Checksum */
	u_int16_t  ipx_len __packed;	/* Length, in bytes, including header */
	u_int8_t   ipx_tc  __packed;	/* Transport Control (i.e. hop count) */
	u_int8_t   ipx_pt  __packed;	/* Packet Type (i.e. lev 2 protocol) */
	ipx_addr_t ipx_dna __packed;	/* Destination Network Address */
	ipx_addr_t ipx_sna __packed;	/* Source Network Address */
d159 1
@


1.11
log
@Rearrange IPXPROTO and IPXPORT names; add socket option for checksum; use
higher ports (> 6000) for privileged users; from FreeBSD.
Add some new port entries.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.10 2000/01/13 06:48:21 fgsch Exp $	*/
d204 2
@


1.10
log
@Remove error protocol.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.9 2000/01/13 04:36:40 fgsch Exp $	*/
d53 8
a60 9
#define IPXPROTO_UNKWN	0		/* Unknown */
#define IPXPROTO_RI	1		/* RIP Routing Information */
#define IPXPROTO_ECHO	2		/* Echo Protocol */
#define IPXPROTO_PXP	4		/* PXP Packet Exchange */
#define IPXPROTO_SPX	5		/* SPX Sequenced Packet */
#define IPXPROTO_NCP	17		/* NCP NetWare Core */
#define IPXPROTO_PPROP	20		/* complicated flood w/ bcast */
#define IPXPROTO_RAW	255		/* Placemarker*/
#define IPXPROTO_MAX	256		/* Placemarker*/
d66 22
a87 11
#define IPXPORT_RI	1		/* NS RIP Routing Information */
#define IPXPORT_ECHO	2		/* NS Echo */
#define IPXPORT_RE	3		/* NS Router Error */
#define IPXPORT_FSP	0x0451		/* NW FSP File Service */
#define IPXPORT_SAP	0x0452		/* NW SAP Service Advertising */
#define IPXPORT_RIP	0x0453		/* NW RIP Routing Information */
#define IPXPORT_NETBIOS	0x0455		/* NW NetBIOS */
#define IPXPORT_DIAGS	0x0456		/* NW Diagnostics */
#define IPXPORT_WDOG	0x4001		/* NW Watchdog Packets */
#define IPXPORT_SHELL	0x4003		/* NW Shell Socket */
#define IPXPORT_MAX	0x8000		/* Maximum User Addressable Port */
d93 1
a93 1
#define IPX_ALLOWBROADCAST		SO_BROADCAST   /* can send broadcast packets */
d100 1
a100 1
#define SO_DEFAULT_HEADERS		3
d103 1
a103 1
#define SO_SEQNO			6
d107 1
@


1.9
log
@more KNF. remove unneeded and ancient debug code.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.8 2000/01/11 20:54:59 fgsch Exp $	*/
a55 1
#define IPXPROTO_ERROR	3		/* Error Protocol */
@


1.8
log
@Add ipx_output_type20 prototype.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.7 2000/01/11 19:31:54 fgsch Exp $	*/
a233 14

#ifdef	IPXDEBUG
struct ipx_addr	ipx_addr __P((const char *));
char		*ipx_ntoa __P((struct ipx_addr));
#endif

#else

#include <sys/cdefs.h>

__BEGIN_DECLS
struct ipx_addr	ipx_addr __P((const char *));
char		*ipx_ntoa __P((struct ipx_addr));
__END_DECLS
@


1.7
log
@Remove references to ipx_thishost; instead find the address from
ipx_ifaddr.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.6 2000/01/11 01:26:20 fgsch Exp $	*/
d225 1
@


1.6
log
@Remove references to ipx_error. IPX does not generate any errors.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.5 1996/12/23 08:47:03 mickey Exp $	*/
a197 1
extern union ipx_host	ipx_thishost;
@


1.5
log
@no panic on ppp down/retry
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.4 1996/11/25 08:19:58 mickey Exp $	*/
d233 1
@


1.4
log
@sysctl entries;
control ipx {send,recv} queues size
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.3 1996/10/26 09:40:30 mickey Exp $	*/
d82 3
a84 3
#define	IPX_FORWARDING		0x1	/* most of ipx header exists */
#define	IPX_ROUTETOIF		0x10	/* same as SO_DONTROUTE */
#define	IPX_ALLOWBROADCAST	SO_BROADCAST	/* can send broadcast packets */
d89 7
a95 7
#define	SO_HEADERS_ON_INPUT	1
#define	SO_HEADERS_ON_OUTPUT	2
#define	SO_DEFAULT_HEADERS	3
#define	SO_LAST_HEADER		4
#define	SO_IPXIP_ROUTE		5
#define SO_SEQNO		6
#define	SO_ALL_PACKETS		7
d102 3
a104 3
#define	IPX_HOSTADDRLEN	6
#define	IPX_NETADDRLEN	4
#define	XXX	__attribute__((packed))
@


1.3
log
@sockaddr_ipx members order change
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.2 1996/10/26 09:34:48 mickey Exp $	*/
d171 17
d232 1
@


1.2
log
@remove my CVS tag.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.h,v 1.1 1996/08/16 09:15:58 mickey Exp $	*/
d134 1
a135 1
	u_int16_t	sipx_type;
@


1.1
log
@initial commit of Free's netipx w/ some changes.
ip<-->ipx encapsulations does not work still.
spx suspected to do too.
@
text
@d1 1
a1 2
/*	$OpenBSD$	*/
/*	$NOWHERE: ipx.h,v 1.3 1996/05/07 12:32:01 mickey Exp $	*/
@
