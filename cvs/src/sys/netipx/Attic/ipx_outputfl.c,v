head	1.9;
access;
symbols
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.18
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.16
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.14
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.5.0.12
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.10
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_9:1.5.0.8
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	SMP:1.5.0.2
	SMP_BASE:1.5
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.9
date	2007.06.06.10.05.48;	author henning;	state dead;
branches;
next	1.8;

1.8
date	2006.03.05.21.48.57;	author miod;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.10.07.22.43;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.28.16;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.15.18.52.14;	author fgsch;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2000.01.15.18.00.47;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.01.11.20.54.13;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	96.10.26.09.34.52;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	96.08.16.09.16.00;	author mickey;	state Exp;
branches;
next	;

1.5.2.1
date	2003.06.07.11.06.09;	author ho;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2004.02.19.10.57.26;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.9
log
@bye bye
most of the IPX removal work done @@ calgary airport
@
text
@/*	$OpenBSD: ipx_outputfl.c,v 1.8 2006/03/05 21:48:57 miod Exp $	*/

/*-
 *
 * Copyright (c) 1996 Michael Shalayeff
 * Copyright (c) 1995, Mike Mitchell
 * Copyright (c) 1984, 1985, 1986, 1987, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)ipx_outputfl.c
 *
 * from FreeBSD Id: ipx_outputfl.c,v 1.4 1996/03/11 15:13:52 davidg Exp
 */

#include <sys/param.h>
#include <sys/queue.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/mbuf.h>
#include <sys/errno.h>
#include <sys/socket.h>
#include <sys/socketvar.h>

#include <net/if.h>
#include <net/route.h>

#include <netipx/ipx.h>
#include <netipx/ipx_if.h>
#include <netipx/ipx_var.h>

int ipx_copy_output = 0;

int
ipx_outputfl(m0, ro, flags)
	struct mbuf *m0;
	struct route *ro;
	int flags;
{
	struct ipx *ipx = mtod(m0, struct ipx *);
	struct ifnet *ifp = NULL;
	int error = 0;
	struct sockaddr_ipx *dst;
	struct route ipxroute;

	/*
	 * Route packet.
	 */
	if (ro == NULL) {
		ro = &ipxroute;
		bzero((caddr_t)ro, sizeof(*ro));
	}
	dst = (struct sockaddr_ipx *)&ro->ro_dst;
	if (ro->ro_rt == NULL) {
		dst->sipx_family = AF_IPX;
		dst->sipx_len = sizeof(*dst);
		dst->sipx_addr = ipx->ipx_dna;
		dst->sipx_addr.ipx_port = 0;
		/*
		 * If routing to interface only,
		 * short circuit routing lookup.
		 */
		if (flags & IPX_ROUTETOIF) {
			struct ipx_ifaddr *ia = ipx_iaonnetof(&ipx->ipx_dna);

			if (ia == NULL) {
				ipxstat.ipxs_noroute++;
				error = ENETUNREACH;
				goto bad;
			}
			ifp = ia->ia_ifp;
			goto gotif;
		}
		rtalloc(ro);
	} else if ((ro->ro_rt->rt_flags & RTF_UP) == 0) {
		/*
		 * The old route has gone away; try for a new one.
		 */
		rtfree(ro->ro_rt);
		ro->ro_rt = NULL;
		rtalloc(ro);
	}
	if (ro->ro_rt == NULL || (ifp = ro->ro_rt->rt_ifp) == NULL) {
		ipxstat.ipxs_noroute++;
		error = ENETUNREACH;
		goto bad;
	}
	ro->ro_rt->rt_use++;
	if (ro->ro_rt->rt_flags & (RTF_GATEWAY|RTF_HOST))
		dst = (struct sockaddr_ipx *)ro->ro_rt->rt_gateway;
gotif:
	/*
	 * Look for multicast addresses and
	 * verify user is allowed to send
	 * such a packet.
	 */
	if (dst->sipx_addr.ipx_host.c_host[0] & 1) {
		if ((ifp->if_flags & IFF_BROADCAST) == 0) {
			error = EADDRNOTAVAIL;
			goto bad;
		}
		if ((flags & IPX_ALLOWBROADCAST) == 0) {
			error = EACCES;
			goto bad;
		}
		m0->m_flags |= M_BCAST;
	}

	if (htons(ipx->ipx_len) <= ifp->if_mtu) {
		ipxstat.ipxs_localout++;
		if (ipx_copy_output) {
			ipx_watch_output(m0, ifp);
		}
		error = (*ifp->if_output)(ifp, m0, (struct sockaddr *)dst,
		    ro->ro_rt);
		goto done;
	} else {
		ipxstat.ipxs_mtutoosmall++;
		error = EMSGSIZE;
	}
bad:
	if (ipx_copy_output) {
		ipx_watch_output(m0, ifp);
	}
	m_freem(m0);
done:
	if (ro == &ipxroute && (flags & IPX_ROUTETOIF) == 0 && ro->ro_rt) {
		RTFREE(ro->ro_rt);
		ro->ro_rt = NULL;
	}
	return (error);
}

/*
 * This will broadcast the type 20 (Netbios) packet to all the interfaces
 * that have ipx configured and isn't in the list yet.
 */
int
ipx_output_type20(m)
	struct mbuf *m;
{
	struct ipx *ipx;
	union ipx_net *nbnet;
	struct ipx_ifaddr *ia, *tia = NULL;
	int error = 0;
	struct mbuf *m1;
	int i;
	struct ifnet *ifp;
	struct sockaddr_ipx dst;

	/*
	 * We have to get to the 32 bytes after the ipx header also, so
	 * that we can fill in the network address of the receiving
	 * interface.
	 */
	if ((m->m_flags & M_EXT || m->m_len < (sizeof(struct ipx) + 32)) &&
	    (m = m_pullup(m, sizeof(struct ipx) + 32)) == NULL) {
		ipxstat.ipxs_toosmall++;
		return (0);
	}
	ipx = mtod(m, struct ipx *);
	nbnet = (union ipx_net *)(ipx + 1);

	if (ipx->ipx_tc >= 8)
		goto bad;
	/*
	 * Now see if we have already seen this.
	 */
	TAILQ_FOREACH(ia, &ipx_ifaddr, ia_list)
		if(ia->ia_ifa.ifa_ifp == m->m_pkthdr.rcvif) {
			if(tia == NULL)
				tia = ia;

			for (i = 0; i < ipx->ipx_tc; i++, nbnet++)
				if(ipx_neteqnn(ia->ia_addr.sipx_addr.ipx_net,
				    *nbnet))
					goto bad;
		}
	/*
	 * Don't route the packet if the interface where it come from
	 * does not have an IPX address.
	 */
	if(tia == NULL)
		goto bad;

	/*
	 * Add our receiving interface to the list.
	 */
        nbnet = (union ipx_net *)(ipx + 1);
	nbnet += ipx->ipx_tc;
	*nbnet = tia->ia_addr.sipx_addr.ipx_net;

	/*
	 * Increment the hop count.
	 */
	ipx->ipx_tc++;
	ipxstat.ipxs_forward++;

	/*
	 * Send to all directly connected ifaces not in list and
	 * not to the one it came from.
	 */
	m->m_flags &= ~M_BCAST;
	bzero(&dst, sizeof(dst));
	dst.sipx_family = AF_IPX;
	dst.sipx_len = sizeof(dst);
	dst.sipx_addr.ipx_host = ipx_broadhost;

	TAILQ_FOREACH(ia, &ipx_ifaddr, ia_list)
		if(ia->ia_ifa.ifa_ifp != m->m_pkthdr.rcvif) {
        		nbnet = (union ipx_net *)(ipx + 1);
			for (i = 0; i < ipx->ipx_tc; i++, nbnet++)
				if(ipx_neteqnn(ia->ia_addr.sipx_addr.ipx_net,
				    *nbnet))
					goto skip_this;

			/*
			 * Insert the net address of the dest net and
			 * calculate the new checksum if needed.
			 */
			ifp = ia->ia_ifa.ifa_ifp;
			dst.sipx_addr.ipx_net = ia->ia_addr.sipx_addr.ipx_net;
			ipx->ipx_dna.ipx_net = dst.sipx_addr.ipx_net;
			m1 = m_copym(m, 0, M_COPYALL, M_DONTWAIT);

			if(ipx->ipx_sum != 0xffff)
				ipx->ipx_sum =
				    ipx_cksum(m, ntohs(ipx->ipx_len));
			if(m1) {
				error = (*ifp->if_output)(ifp, m1,
					(struct sockaddr *)&dst, NULL);
				/* XXX ipxstat.ipxs_localout++; */
			}
skip_this: ;
		}

bad:
	m_freem(m);
	return (error);
}
@


1.8
log
@Use more queue macros rather than doing it by hand; ok otto@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx_outputfl.c,v 1.7 2003/12/10 07:22:43 itojun Exp $	*/
@


1.7
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx_outputfl.c,v 1.6 2003/06/02 23:28:16 millert Exp $	*/
d192 1
a192 1
	for (ia = ipx_ifaddr.tqh_first; ia != NULL; ia = ia->ia_list.tqe_next)
d232 1
a232 1
	for (ia = ipx_ifaddr.tqh_first; ia != NULL; ia = ia->ia_list.tqe_next)
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx_outputfl.c,v 1.5 2000/01/15 18:52:14 fgsch Exp $	*/
d63 2
a64 2
	register struct ipx *ipx = mtod(m0, struct ipx *);
	register struct ifnet *ifp = NULL;
d165 1
a165 1
	register struct ipx *ipx;
@


1.5
log
@Some KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx_outputfl.c,v 1.4 2000/01/15 18:00:47 fgsch Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5.2.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx_outputfl.c,v 1.5 2000/01/15 18:52:14 fgsch Exp $	*/
d18 5
a22 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.5.2.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d63 2
a64 2
	struct ipx *ipx = mtod(m0, struct ipx *);
	struct ifnet *ifp = NULL;
d165 1
a165 1
	struct ipx *ipx;
@


1.4
log
@Remove unneded vars and code. 0 -> NULL. Some KNF.
Use statistics where available.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx_outputfl.c,v 1.3 2000/01/11 20:54:13 fgsch Exp $	*/
d141 2
a142 2
		error = (*ifp->if_output)(ifp, m0,
					(struct sockaddr *)dst, ro->ro_rt);
d201 1
a201 1
			for (i=0;i<ipx->ipx_tc;i++,nbnet++)
d239 1
a239 1
			for (i=0;i<ipx->ipx_tc;i++,nbnet++)
@


1.3
log
@Add output routine to broadcast type 20 (Netbios) packets; from FreeBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx_outputfl.c,v 1.2 1996/10/26 09:34:52 mickey Exp $	*/
a58 1
int ipx_hold_output = 0;
a59 2
int ipx_outputfl_cnt = 0;
struct mbuf *ipx_lastout;
d68 1
a68 1
	register struct ifnet *ifp = 0;
a72 6
	if (ipx_hold_output) {
		if (ipx_lastout) {
			(void)m_free(ipx_lastout);
		}
		ipx_lastout = m_copy(m0, 0, (int)M_COPYALL);
	}
d76 1
a76 1
	if (ro == 0) {
d78 1
a78 1
		bzero((caddr_t)ro, sizeof (*ro));
d81 1
a81 1
	if (ro->ro_rt == 0) {
d83 1
a83 1
		dst->sipx_len = sizeof (*dst);
d93 2
a94 1
			if (ia == 0) {
d110 2
a111 1
	if (ro->ro_rt == 0 || (ifp = ro->ro_rt->rt_ifp) == 0) {
d124 1
a124 1
	if (dst->sipx_addr.ipx_host.c_host[0]&1) {
d133 1
d137 1
a137 1
		ipx_outputfl_cnt++;
d144 4
a147 1
	} else error = EMSGSIZE;
d156 1
a156 1
		ro->ro_rt = 0;
@


1.2
log
@remove my CVS tag.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx_outputfl.c,v 1.1 1996/08/16 09:16:00 mickey Exp $	*/
d161 108
@


1.1
log
@initial commit of Free's netipx w/ some changes.
ip<-->ipx encapsulations does not work still.
spx suspected to do too.
@
text
@d1 1
a1 2
/*	$OpenBSD$	*/
/*	$NOWHERE: ipx_outputfl.c,v 1.2 1996/05/07 09:49:45 mickey Exp $	*/
@
