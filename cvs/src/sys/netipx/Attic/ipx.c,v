head	1.15;
access;
symbols
	OPENBSD_4_1:1.14.0.4
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.2
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.12.0.10
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.8
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.6
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	SMP_SYNC_A:1.12
	SMP_SYNC_B:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	UBC_SYNC_A:1.10
	OPENBSD_3_3:1.10.0.10
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.8
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.6
	OPENBSD_3_1_BASE:1.10
	UBC_SYNC_B:1.10
	UBC:1.10.0.4
	UBC_BASE:1.10
	OPENBSD_3_0:1.10.0.2
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_9:1.9.0.8
	OPENBSD_2_8:1.9.0.6
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.4
	OPENBSD_2_7_BASE:1.9
	SMP:1.9.0.2
	SMP_BASE:1.9
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1;
locks; strict;
comment	@ * @;


1.15
date	2007.06.06.10.05.48;	author henning;	state dead;
branches;
next	1.14;

1.14
date	2006.03.05.21.48.57;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.04.22.40.16;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.10.07.22.43;	author itojun;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.02.23.28.16;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.16.12.54.06;	author ho;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.15.18.52.13;	author fgsch;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2000.01.13.04.36.40;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2000.01.11.21.10.33;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.11.19.31.53;	author fgsch;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.11.02.15.37;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.11.01.26.20;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	96.10.26.09.34.48;	author mickey;	state Exp;
branches;
next	1.2;

1.2
date	96.10.18.14.28.21;	author mickey;	state Exp;
branches;
next	1.1;

1.1
date	96.08.16.09.15.57;	author mickey;	state Exp;
branches;
next	;

1.9.2.1
date	2001.07.04.10.55.30;	author niklas;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2003.06.07.11.06.09;	author ho;	state Exp;
branches;
next	1.9.2.3;

1.9.2.3
date	2004.02.19.10.57.26;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.15
log
@bye bye
most of the IPX removal work done @@ calgary airport
@
text
@/*	$OpenBSD: ipx.c,v 1.14 2006/03/05 21:48:57 miod Exp $	*/

/*-
 *
 * Copyright (c) 1996 Michael Shalayeff
 * Copyright (c) 1995, Mike Mitchell
 * Copyright (c) 1984, 1985, 1986, 1987, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 *	@@(#)ipx.c
 *
 * from FreeBSD Id: ipx.c,v 1.4 1996/03/11 15:13:46 davidg Exp
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/malloc.h>
#include <sys/ioctl.h>
#include <sys/protosw.h>
#include <sys/socket.h>
#include <sys/socketvar.h>

#include <net/if.h>
#include <net/route.h>

#include <netipx/ipx.h>
#include <netipx/ipx_if.h>

/*
 * Generic internet control operations (ioctl's).
 */
/* ARGSUSED */
int
ipx_control(so, cmd, data, ifp)
	struct socket *so;
	u_long	cmd;
	caddr_t	data;
	struct ifnet *ifp;
{
	struct ifreq *ifr = (struct ifreq *)data;
	struct ipx_aliasreq *ifra = (struct ipx_aliasreq *)data;
	struct ipx_ifaddr *ia;
	int dstIsNew, hostIsNew;
	int error = 0;

	/*
	 * Find address for this interface, if it exists.
	 */
	if (ifp)
		TAILQ_FOREACH(ia, &ipx_ifaddr, ia_list)
			if (ia->ia_ifp == ifp)
				break;

	switch (cmd) {
	case SIOCAIFADDR:
	case SIOCDIFADDR:
		if (ifra->ifra_addr.sipx_family == AF_IPX)
			for (; ia != TAILQ_END(&ipx_ifaddr);
			    ia = TAILQ_NEXT(ia, ia_list)) {
				if (ia->ia_ifp == ifp  &&
				    ipx_neteq(ia->ia_addr.sipx_addr,
					      ifra->ifra_addr.sipx_addr))
					break;
			}
		if (cmd == SIOCDIFADDR && ia == 0)
			return (EADDRNOTAVAIL);
		/* FALLTHROUGH */

	case SIOCSIFADDR:
	case SIOCSIFDSTADDR:
		if ((so->so_state & SS_PRIV) == 0)
			return (EPERM);

		if (ia == (struct ipx_ifaddr *)NULL) {
			ia = (struct ipx_ifaddr *)
				malloc(sizeof(*ia), M_IFADDR, M_WAITOK);
			bzero((caddr_t)ia, sizeof(*ia));
			TAILQ_INSERT_TAIL(&ifp->if_addrlist,
				(struct ifaddr *)ia, ifa_list);
			TAILQ_INSERT_TAIL(&ipx_ifaddr, ia, ia_list);
			ia->ia_ifp = ifp;
			ia->ia_ifa.ifa_addr = (struct sockaddr *)&ia->ia_addr;

			ia->ia_ifa.ifa_netmask =
				(struct sockaddr *)&ipx_netmask;

			ia->ia_ifa.ifa_dstaddr =
				(struct sockaddr *)&ia->ia_dstaddr;
			if (ifp->if_flags & IFF_BROADCAST) {
				ia->ia_broadaddr.sipx_family = AF_IPX;
				ia->ia_broadaddr.sipx_len =
				    sizeof(ia->ia_addr);
				ia->ia_broadaddr.sipx_addr.ipx_host =
				    ipx_broadhost;
			}
		}
		break;

	case SIOCSIFBRDADDR:
		if ((so->so_state & SS_PRIV) == 0)
			return (EPERM);
		/* FALLTHROUGH */

	case SIOCGIFADDR:
	case SIOCGIFDSTADDR:
	case SIOCGIFBRDADDR:
		if (ia == (struct ipx_ifaddr *)NULL)
			return (EADDRNOTAVAIL);
		break;
	}

	switch (cmd) {

	case SIOCGIFADDR:
		*(struct sockaddr_ipx *)&ifr->ifr_addr = ia->ia_addr;
		return (0);

	case SIOCGIFBRDADDR:
		if ((ifp->if_flags & IFF_BROADCAST) == 0)
			return (EINVAL);
		*(struct sockaddr_ipx *)&ifr->ifr_dstaddr = ia->ia_broadaddr;
		return (0);

	case SIOCGIFDSTADDR:
		if ((ifp->if_flags & IFF_POINTOPOINT) == 0)
			return (EINVAL);
		*(struct sockaddr_ipx *)&ifr->ifr_dstaddr = ia->ia_dstaddr;
		return (0);

	case SIOCSIFDSTADDR:
		if ((ifp->if_flags & IFF_POINTOPOINT) == 0)
			return (EINVAL);
		if (ia->ia_flags & IFA_ROUTE) {
			rtinit(&(ia->ia_ifa), (int)RTM_DELETE, RTF_HOST);
			ia->ia_flags &= ~IFA_ROUTE;
		}
		if (ifp->if_ioctl) {
			error = (*ifp->if_ioctl)(ifp, SIOCSIFDSTADDR,
			    (void *)ia);
			if (error)
				return (error);
		}
		*(struct sockaddr *)&ia->ia_dstaddr = ifr->ifr_dstaddr;
		return (0);

	case SIOCSIFADDR:
		return (ipx_ifinit(ifp, ia,
				(struct sockaddr_ipx *)&ifr->ifr_addr, 1));

	case SIOCDIFADDR:
		ipx_ifscrub(ifp, ia);
		TAILQ_REMOVE(&ifp->if_addrlist, (struct ifaddr *)ia, ifa_list);
		TAILQ_REMOVE(&ipx_ifaddr, ia, ia_list);
		IFAFREE((&ia->ia_ifa));
		return (0);
	
	case SIOCAIFADDR:
		dstIsNew = 0; hostIsNew = 1;
		if (ia->ia_addr.sipx_family == AF_IPX) {
			if (ifra->ifra_addr.sipx_len == 0) {
				ifra->ifra_addr = ia->ia_addr;
				hostIsNew = 0;
			} else if (ipx_neteq(ifra->ifra_addr.sipx_addr,
					 ia->ia_addr.sipx_addr))
				hostIsNew = 0;
		}
		if ((ifp->if_flags & IFF_POINTOPOINT) &&
		    (ifra->ifra_dstaddr.sipx_family == AF_IPX)) {
			if (hostIsNew == 0)
				ipx_ifscrub(ifp, ia);
			ia->ia_dstaddr = ifra->ifra_dstaddr;
			dstIsNew  = 1;
		}
		if (ifra->ifra_addr.sipx_family == AF_IPX &&
					    (hostIsNew || dstIsNew))
			error = ipx_ifinit(ifp, ia, &ifra->ifra_addr, 0);
		return (error);

	default:
		if (ifp->if_ioctl == 0)
			return (EOPNOTSUPP);
		return ((*ifp->if_ioctl)(ifp, cmd, data));
	}
}

/*
 * Delete any previous route for an old address.
 */
void
ipx_ifscrub(ifp, ia)
	struct ifnet *ifp;
	struct ipx_ifaddr *ia; 
{
	if (ia->ia_flags & IFA_ROUTE) {
		if (ifp->if_flags & IFF_POINTOPOINT) {
			rtinit(&(ia->ia_ifa), (int)RTM_DELETE, RTF_HOST);
		} else
			rtinit(&(ia->ia_ifa), (int)RTM_DELETE, 0);
		ia->ia_flags &= ~IFA_ROUTE;
	}
}

/*
 * Initialize an interface's IPX address
 * and routing table entry.
 */
int
ipx_ifinit(ifp, ia, sipx, scrub)
	struct ifnet *ifp;
	struct ipx_ifaddr *ia;
	struct sockaddr_ipx *sipx;
	int scrub;
{
	struct sockaddr_ipx oldaddr;
	int s = splnet(), error;

	/*
	 * Set up new addresses.
	 */
	oldaddr = ia->ia_addr;
	ia->ia_addr = *sipx;

	/*
	 * The convention we shall adopt for naming is that
	 * a supplied address of zero means that "we don't care".
	 * Use the MAC address of the interface. If it is an
	 * interface without a MAC address, like a serial line, the
	 * address must be supplied.
	 *
	 * Give the interface a chance to initialize
	 * if this is its first address,
	 * and to validate the address if necessary.
	 */
	if (ifp->if_ioctl != NULL &&
	    (error = (*ifp->if_ioctl)(ifp, SIOCSIFADDR, (void *)ia))) {
		ia->ia_addr = oldaddr;
		splx(s);
		return (error);
	}
	ia->ia_ifa.ifa_metric = ifp->if_metric;
	/*
	 * Add route for the network.
	 */
	if (scrub) {
		ia->ia_ifa.ifa_addr = (struct sockaddr *)&oldaddr;
		ipx_ifscrub(ifp, ia);
		ia->ia_ifa.ifa_addr = (struct sockaddr *)&ia->ia_addr;
	}
	if (ifp->if_flags & IFF_POINTOPOINT)
		rtinit(&(ia->ia_ifa), (int)RTM_ADD, RTF_HOST|RTF_UP);
	else {
		ia->ia_broadaddr.sipx_addr.ipx_net =
		    ia->ia_addr.sipx_addr.ipx_net;
		rtinit(&(ia->ia_ifa), (int)RTM_ADD, RTF_UP);
	}
	ia->ia_flags |= IFA_ROUTE;
	splx(s);
	return (0);
}

/*
 * Return address info for specified IPX network.
 */
struct ipx_ifaddr *
ipx_iaonnetof(dst)
	struct ipx_addr *dst;
{
	struct ipx_ifaddr *ia;
	struct ipx_addr *compare;
	struct ifnet *ifp;
	struct ipx_ifaddr *ia_maybe = NULL;
	union ipx_net net = dst->ipx_net;

	TAILQ_FOREACH(ia, &ipx_ifaddr, ia_list) {
		if ((ifp = ia->ia_ifp)) {
			if (ifp->if_flags & IFF_POINTOPOINT) {
				compare = &satoipx_addr(ia->ia_dstaddr);
				if (ipx_hosteq(*dst, *compare))
					return (ia);
				if (ipx_neteqnn(net,
				    ia->ia_addr.sipx_addr.ipx_net))
					ia_maybe = ia;
			} else {
				if (ipx_neteqnn(net,
				    ia->ia_addr.sipx_addr.ipx_net))
					return (ia);
			}
		}
	}
	return (ia_maybe);
}

void
ipx_printhost(addr)
register struct ipx_addr *addr;
{
	u_short port;
	struct ipx_addr work = *addr;
	char *p;
	u_char *q;
	char *net = "", *host = "";
	char cport[10], chost[15], cnet[15];

	port = ntohs(work.ipx_port);

	if (ipx_nullnet(work) && ipx_nullhost(work)) {

		if (port)
			printf("*.%x", port);
		else
			printf("*.*");

		return;
	}

	if (ipx_wildnet(work))
		net = "any";
	else if (ipx_nullnet(work))
		net = "*";
	else {
		q = work.ipx_net.c_net;
		snprintf(cnet, sizeof(cnet), "%x%x%x%x",
			q[0], q[1], q[2], q[3]);
		for (p = cnet; *p == '0' && p < cnet + 8; p++)
			continue;
		net = p;
	}

	if (ipx_wildhost(work))
		host = "any";
	else if (ipx_nullhost(work))
		host = "*";
	else {
		q = work.ipx_host.c_host;
		snprintf(chost, sizeof(chost), "%x%x%x%x%x%x",
			q[0], q[1], q[2], q[3], q[4], q[5]);
		for (p = chost; *p == '0' && p < chost + 12; p++)
			continue;
		host = p;
	}

	if (port) {
		if (strcmp(host, "*") == 0) {
			host = "";
			snprintf(cport, sizeof(cport), "%x", port);
		} else
			snprintf(cport, sizeof(cport), ".%x", port);
	} else
		*cport = 0;

	printf("%s.%s%s", net, host, cport);
}

@


1.14
log
@Use more queue macros rather than doing it by hand; ok otto@@ krw@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.13 2006/03/04 22:40:16 brad Exp $	*/
@


1.13
log
@With the exception of two other small uncommited diffs this moves
the remainder of the network stack from splimp to splnet.

ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.12 2003/12/10 07:22:43 itojun Exp $	*/
d74 1
a74 1
		for (ia = ipx_ifaddr.tqh_first; ia; ia = ia->ia_list.tqe_next)
d82 2
a83 1
			for (; ia; ia = ia->ia_list.tqe_next) {
d298 1
a298 1
	for (ia = ipx_ifaddr.tqh_first; ia; ia = ia->ia_list.tqe_next) {
@


1.12
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.11 2003/06/02 23:28:16 millert Exp $	*/
d238 1
a238 1
	int s = splimp(), error;
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.10 2001/05/16 12:54:06 ho Exp $	*/
d62 1
a62 1
	register struct ifnet *ifp;
d64 3
a66 3
	register struct ifreq *ifr = (struct ifreq *)data;
	register struct ipx_aliasreq *ifra = (struct ipx_aliasreq *)data;
	register struct ipx_ifaddr *ia;
d214 2
a215 2
	register struct ifnet *ifp;
	register struct ipx_ifaddr *ia; 
d232 3
a234 3
	register struct ifnet *ifp;
	register struct ipx_ifaddr *ia;
	register struct sockaddr_ipx *sipx;
d289 1
a289 1
	register struct ipx_addr *dst;
d291 3
a293 3
	register struct ipx_ifaddr *ia;
	register struct ipx_addr *compare;
	register struct ifnet *ifp;
d322 3
a324 2
	register char *p; register u_char *q;
	register char *net = "", *host = "";
@


1.10
log
@No need to check M_WAIT/M_WAITOK malloc return values. (art@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.9 2000/01/15 18:52:13 fgsch Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.9
log
@Some KNF.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.8 2000/01/13 04:36:40 fgsch Exp $	*/
a103 2
			if (ia == (struct ipx_ifaddr *)NULL)
				return (ENOBUFS);
@


1.9.2.1
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.9 2000/01/15 18:52:13 fgsch Exp $	*/
d104 2
@


1.9.2.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.9.2.1 2001/07/04 10:55:30 niklas Exp $	*/
d18 5
a22 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.9.2.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d62 1
a62 1
	struct ifnet *ifp;
d64 3
a66 3
	struct ifreq *ifr = (struct ifreq *)data;
	struct ipx_aliasreq *ifra = (struct ipx_aliasreq *)data;
	struct ipx_ifaddr *ia;
d214 2
a215 2
	struct ifnet *ifp;
	struct ipx_ifaddr *ia; 
d232 3
a234 3
	struct ifnet *ifp;
	struct ipx_ifaddr *ia;
	struct sockaddr_ipx *sipx;
d289 1
a289 1
	struct ipx_addr *dst;
d291 3
a293 3
	struct ipx_ifaddr *ia;
	struct ipx_addr *compare;
	struct ifnet *ifp;
d322 2
a323 3
	char *p;
	u_char *q;
	char *net = "", *host = "";
@


1.8
log
@more KNF. remove unneeded and ancient debug code.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.7 2000/01/11 21:10:33 fgsch Exp $	*/
d300 1
a300 1
	struct ipx_ifaddr *ia_maybe = 0;
@


1.7
log
@Rearrange includes and remove unnecessary ones.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.6 2000/01/11 19:31:53 fgsch Exp $	*/
d103 1
a103 1
				malloc(sizeof *ia, M_IFADDR, M_WAITOK);
d120 4
a123 2
				ia->ia_broadaddr.sipx_len = sizeof(ia->ia_addr);
				ia->ia_broadaddr.sipx_addr.ipx_host = ipx_broadhost;
d167 2
a168 1
			error = (*ifp->if_ioctl)(ifp, SIOCSIFDSTADDR, (void *)ia);
d309 2
a310 1
				if (ipx_neteqnn(net, ia->ia_addr.sipx_addr.ipx_net))
d313 2
a314 1
				if (ipx_neteqnn(net, ia->ia_addr.sipx_addr.ipx_net))
a381 33
#ifdef	IPXDEBUG
struct ipx_addr
ipx_addr(str)
	const char *str;
{
	struct ipx_addr	ret;


	return ret;
}

char *
ipx_ntoa(ipx)
	struct ipx_addr	ipx;
{
	static char	bufs[4][4+1+(3*6)+5], *cbuf = bufs[4];

	if (cbuf == bufs[4])
		cbuf = bufs[0];
	else
		cbuf++;

	sprintf(cbuf, "%04x.%02x:%02x:%02x:%02x:%02x:%02x.%u",
		ipx.ipx_net.l_net,
		ipx.ipx_host.c_host[0], ipx.ipx_host.c_host[1],
		ipx.ipx_host.c_host[2], ipx.ipx_host.c_host[3],
		ipx.ipx_host.c_host[4], ipx.ipx_host.c_host[5],
		ipx.ipx_port);

	return cbuf;
}

#endif
@


1.6
log
@Remove references to ipx_thishost; instead find the address from
ipx_ifaddr.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.5 2000/01/11 02:15:37 fgsch Exp $	*/
a43 1
#include <sys/queue.h>
d45 1
a45 1
#include <sys/mbuf.h>
a47 1
#include <sys/errno.h>
@


1.5
log
@Remove ipx_interface.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.4 2000/01/11 01:26:20 fgsch Exp $	*/
a242 1
	register union ipx_host *h = &ia->ia_addr.sipx_addr.ipx_host;
d254 3
a256 4
	 * if there is a single interface, use the address of that
	 * interface as our 6 byte host address.
	 * if there are multiple interfaces, use any address already
	 * used.
d262 2
a263 23
	if (ipx_hosteqnh(ipx_thishost, ipx_zerohost)) {
		if (ifp->if_ioctl &&
		     (error = (*ifp->if_ioctl)(ifp, SIOCSIFADDR, (void *)ia))) {
			ia->ia_addr = oldaddr;
			splx(s);
			return (error);
		}
		ipx_thishost = *h;
	} else if (ipx_hosteqnh(sipx->sipx_addr.ipx_host, ipx_zerohost)
	    || ipx_hosteqnh(sipx->sipx_addr.ipx_host, ipx_thishost)) {
		*h = ipx_thishost;
		if (ifp->if_ioctl &&
		     (error = (*ifp->if_ioctl)(ifp, SIOCSIFADDR, (void *)ia))) {
			ia->ia_addr = oldaddr;
			splx(s);
			return (error);
		}
		if (!ipx_hosteqnh(ipx_thishost,*h)) {
			ia->ia_addr = oldaddr;
			splx(s);
			return (EINVAL);
		}
	} else {
d266 1
a266 1
		return (EINVAL);
d280 2
a281 1
		ia->ia_broadaddr.sipx_addr.ipx_net = ia->ia_addr.sipx_addr.ipx_net;
@


1.4
log
@Remove references to ipx_error. IPX does not generate any errors.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.3 1996/10/26 09:34:48 mickey Exp $	*/
a58 2
int ipx_interfaces;

a124 1
			ipx_interfaces++;
a182 6
		if (0 == --ipx_interfaces) {
			/*
			 * We reset to virginity and start all over again
			 */
			ipx_thishost = ipx_zerohost;
		}
@


1.3
log
@remove my CVS tag.
@
text
@d1 1
a1 1
/*	$OpenBSD: ipx.c,v 1.1 1996/08/16 09:15:57 mickey Exp $	*/
d348 60
@


1.2
log
@-Wall happieness. bug fix caused by parens...
@
text
@a1 1
/*	$NOWHERE: ipx.c,v 1.2 1996/05/07 09:49:37 mickey Exp $	*/
@


1.1
log
@initial commit of Free's netipx w/ some changes.
ip<-->ipx encapsulations does not work still.
spx suspected to do too.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a75 1
	struct ifaddr *ifa;
@
