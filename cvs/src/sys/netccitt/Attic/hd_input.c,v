head	1.8;
access;
symbols
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.5
	UBC:1.3.0.26
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.24
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.22
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2005.06.16.17.37.54;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2003.12.10.07.22.42;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.02.23.28.13;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.14.21.35.00;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.27.10;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.04.21.22.28.52;	author deraadt;	state Exp;
branches
	1.3.16.1
	1.3.26.1;
next	1.2;

1.2
date	96.03.04.07.36.22;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.08;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2002.03.28.14.57.37;	author niklas;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2003.03.28.00.06.55;	author niklas;	state Exp;
branches;
next	1.3.16.3;

1.3.16.3
date	2003.06.07.11.06.07;	author ho;	state Exp;
branches;
next	1.3.16.4;

1.3.16.4
date	2004.02.19.10.57.23;	author niklas;	state Exp;
branches;
next	;

1.3.26.1
date	2002.06.11.03.31.36;	author art;	state Exp;
branches;
next	1.3.26.2;

1.3.26.2
date	2002.10.29.00.36.46;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove remaining netccitt parts, full ports build test by pval, thanks!
@
text
@/*	$OpenBSD: hd_input.c,v 1.7 2003/12/10 07:22:42 itojun Exp $	*/
/*	$NetBSD: hd_input.c,v 1.9 1996/04/13 01:34:16 cgd Exp $	*/

/*
 * Copyright (c) University of British Columbia, 1984
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Laboratory for Computation Vision and the Computer Science Department
 * of the University of British Columbia.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)hd_input.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/domain.h>
#include <sys/socket.h>
#include <sys/protosw.h>
#include <sys/errno.h>
#include <sys/time.h>
#include <sys/kernel.h>

#include <net/if.h>

#include <netccitt/hdlc.h>
#include <netccitt/hd_var.h>
#include <netccitt/x25.h>
#include <netccitt/pk_extern.h>

static void frame_reject(struct hdcb *, int, struct Hdlc_iframe *);
static void rej_routine(register struct hdcb *, int);
static void free_iframes(struct hdcb *, int *, int);

/*
 *      HDLC INPUT INTERFACE
 *
 *      This routine is called when the HDLC physical device has
 *      completed reading a frame.
 */

void
hdintr()
{
	struct mbuf *m;
	struct hdcb *hdp;
	struct ifnet *ifp;
	int    s;
	static struct ifnet *lastifp;
	static struct hdcb *lasthdp;

	for (;;) {
		s = splimp();
		IF_DEQUEUE(&hdintrq, m);
		splx(s);
		if (m == 0)
			break;
		if (m->m_len < HDHEADERLN) {
			printf("hdintr: packet too short (len=%d)\n",
			       m->m_len);
			m_freem(m);
			continue;
		}
		if ((m->m_flags & M_PKTHDR) == 0)
			panic("hdintr");
		ifp = m->m_pkthdr.rcvif;

		/*
		 * look up the appropriate hdlc control block
		 */

		if (ifp == lastifp)
			hdp = lasthdp;
		else {
			for (hdp = hdcbhead; hdp; hdp = hdp->hd_next)
				if (hdp->hd_ifp == ifp)
					break;
			if (hdp == 0) {
				printf("hdintr: unknown interface %p\n", ifp);
				m_freem(m);
				continue;
			}
			lastifp = ifp;
			lasthdp = hdp;
		}

		/*
		 * Process_rxframe returns FALSE if the frame was NOT queued
		 * for the next higher layers.
		 */
		if (process_rxframe(hdp, m) == FALSE)
			m_freem(m);
	}
}

int
process_rxframe(hdp, fbuf)
	struct hdcb *hdp;
	struct mbuf *fbuf;
{
	int    queued = FALSE, frametype, pf;
	struct Hdlc_frame *frame;
	struct sockaddr *sa = (struct sockaddr *) hdp->hd_pkp;

	frame = mtod(fbuf, struct Hdlc_frame *);
	pf = ((struct Hdlc_iframe *) frame)->pf;

	hd_trace(hdp, RX, frame);
	if (frame->address != ADDRESS_A && frame->address != ADDRESS_B)
		return (queued);

	switch ((frametype = hd_decode(hdp, frame)) + hdp->hd_state) {
	case DM + DISC_SENT:
	case UA + DISC_SENT:
		/*
		 * Link now closed.  Leave timer running
		 * so hd_timer() can periodically check the
		 * status of interface driver flag bit IFF_UP.
		 */
		hdp->hd_state = DISCONNECTED;
		break;

	case DM + INIT:
	case UA + INIT:
		/*
		 * This is a non-standard state change needed for DCEs
		 * that do dynamic link selection.  We can't go into the
		 * usual "SEND DM" state because a DM is a SARM in LAP.
		 */
		hd_writeinternal(hdp, SABM, POLLOFF);
		hdp->hd_state = SABM_SENT;
		SET_TIMER(hdp);
		break;

	case SABM + DM_SENT:
	case SABM + WAIT_SABM:
		hd_writeinternal(hdp, UA, pf);
	case UA + SABM_SENT:
	case UA + WAIT_UA:
		KILL_TIMER(hdp);
		hd_initvars(hdp);
		hdp->hd_state = ABM;
		hd_message(hdp, "Link level operational");
		/* Notify the packet level - to send RESTART. */
		(void) pk_ctlinput(PRC_LINKUP, sa, NULL);
		break;

	case SABM + SABM_SENT:
		/*
		 * Got a SABM collision. Acknowledge the remote's SABM via UA
		 * but still wait for UA.
		 */
		hd_writeinternal(hdp, UA, pf);
		break;

	case SABM + ABM:
		/* Request to reset the link from the remote. */
		KILL_TIMER(hdp);
		hd_message(hdp, "Link reset");
#ifdef HDLCDEBUG
		hd_dumptrace(hdp);
#endif
		hd_flush(hdp->hd_ifp);
		hd_writeinternal(hdp, UA, pf);
		hd_initvars(hdp);
		(void) pk_ctlinput(PRC_LINKRESET, sa, NULL);
		hdp->hd_resets++;
		break;

	case SABM + WAIT_UA:
		hd_writeinternal(hdp, UA, pf);
		break;

	case DM + ABM:
		hd_message(hdp, "DM received: link down");
#ifdef HDLCDEBUG
		hd_dumptrace(hdp);
#endif
		(void) pk_ctlinput(PRC_LINKDOWN, sa, NULL);
		hd_flush(hdp->hd_ifp);
	case DM + DM_SENT:
	case DM + WAIT_SABM:
	case DM + WAIT_UA:
		hd_writeinternal(hdp, SABM, pf);
		hdp->hd_state = SABM_SENT;
		SET_TIMER(hdp);
		break;

	case DISC + INIT:
	case DISC + DM_SENT:
	case DISC + SABM_SENT:
		/* Note: This is a non-standard state change. */
		hd_writeinternal(hdp, UA, pf);
		hd_writeinternal(hdp, SABM, POLLOFF);
		hdp->hd_state = SABM_SENT;
		SET_TIMER(hdp);
		break;

	case DISC + WAIT_UA:
		hd_writeinternal(hdp, DM, pf);
		SET_TIMER(hdp);
		hdp->hd_state = DM_SENT;
		break;

	case DISC + ABM:
		hd_message(hdp, "DISC received: link down");
		(void) pk_ctlinput(PRC_LINKDOWN, sa, NULL);
	case DISC + WAIT_SABM:
		hd_writeinternal(hdp, UA, pf);
		hdp->hd_state = DM_SENT;
		SET_TIMER(hdp);
		break;

	case UA + ABM:
		hd_message(hdp, "UA received: link down");
		(void) pk_ctlinput(PRC_LINKDOWN, sa, NULL);
	case UA + WAIT_SABM:
		hd_writeinternal(hdp, DM, pf);
		hdp->hd_state = DM_SENT;
		SET_TIMER(hdp);
		break;

	case FRMR + DM_SENT:
		hd_writeinternal(hdp, SABM, pf);
		hdp->hd_state = SABM_SENT;
		SET_TIMER(hdp);
		break;

	case FRMR + WAIT_SABM:
		hd_writeinternal(hdp, DM, pf);
		hdp->hd_state = DM_SENT;
		SET_TIMER(hdp);
		break;

	case FRMR + ABM:
		hd_message(hdp, "FRMR received: link down");
		(void) pk_ctlinput(PRC_LINKDOWN, sa, NULL);
#ifdef HDLCDEBUG
		hd_dumptrace(hdp);
#endif
		hd_flush(hdp->hd_ifp);
		hd_writeinternal(hdp, SABM, pf);
		hdp->hd_state = WAIT_UA;
		SET_TIMER(hdp);
		break;

	case RR + ABM:
	case RNR + ABM:
	case REJ + ABM:
		process_sframe(hdp, (struct Hdlc_sframe *) frame, frametype);
		break;

	case IFRAME + ABM:
		queued = process_iframe(hdp, fbuf, (struct Hdlc_iframe *) frame);
		break;

	case IFRAME + SABM_SENT:
	case RR + SABM_SENT:
	case RNR + SABM_SENT:
	case REJ + SABM_SENT:
		hd_writeinternal(hdp, DM, POLLON);
		hdp->hd_state = DM_SENT;
		SET_TIMER(hdp);
		break;

	case IFRAME + WAIT_SABM:
	case RR + WAIT_SABM:
	case RNR + WAIT_SABM:
	case REJ + WAIT_SABM:
		hd_writeinternal(hdp, FRMR, POLLOFF);
		SET_TIMER(hdp);
		break;

	case ILLEGAL + SABM_SENT:
		hdp->hd_unknown++;
		hd_writeinternal(hdp, DM, POLLOFF);
		hdp->hd_state = DM_SENT;
		SET_TIMER(hdp);
		break;

	case ILLEGAL + ABM:
		hd_message(hdp, "Unknown frame received: link down");
		(void) pk_ctlinput(PRC_LINKDOWN, sa, NULL);
	case ILLEGAL + WAIT_SABM:
		hdp->hd_unknown++;
#ifdef HDLCDEBUG
		hd_dumptrace(hdp);
#endif
		hd_writeinternal(hdp, FRMR, POLLOFF);
		hdp->hd_state = WAIT_SABM;
		SET_TIMER(hdp);
		break;
	}

	return (queued);
}

int
process_iframe(hdp, fbuf, frame)
	struct hdcb *hdp;
	struct mbuf    *fbuf;
	struct Hdlc_iframe *frame;
{
	int    nr = frame->nr, ns = frame->ns, pf = frame->pf;
	int    queued = FALSE;

	/*
	 * Validate the iframe's N(R) value. It's N(R) value must be in sync
	 * with our V(S) value and our "last received nr".
	 */

	if (valid_nr(hdp, nr, FALSE) == FALSE) {
		frame_reject(hdp, Z, frame);
		return (queued);
	}
	/*
	 * This section tests the IFRAME for proper sequence. That is, it's
	 * sequence number N(S) MUST be equal to V(S).
	 */

	if (ns != hdp->hd_vr) {
		hdp->hd_invalid_ns++;
		if (pf || (hdp->hd_condition & REJ_CONDITION) == 0) {
			hdp->hd_condition |= REJ_CONDITION;
			/*
			 * Flush the transmit queue. This is ugly but we
			 * have no choice.  A reject response must be
			 * immediately sent to the DCE.  Failure to do so
			 * may result in another out of sequence iframe
			 * arriving (and thus sending another reject)
			 * before the first reject is transmitted. This
			 * will cause the DCE to receive two or more
			 * rejects back to back, which must never happen.
			 */
			hd_flush(hdp->hd_ifp);
			hd_writeinternal(hdp, REJ, pf);
		}
		return (queued);
	}
	hdp->hd_condition &= ~REJ_CONDITION;

	/*
	 * This section finally tests the IFRAME's sequence number against
	 * the window size (K)  and the sequence number of the  last frame we
	 * have acknowledged.  If the IFRAME is completely correct then it is
	 * queued for the packet level.
	 */

	if (ns != (hdp->hd_lasttxnr + hdp->hd_xcp->xc_lwsize) % MODULUS) {
		hdp->hd_vr = (hdp->hd_vr + 1) % MODULUS;
		if (pf == 1) {
			/* Must generate a RR or RNR with final bit on. */
			hd_writeinternal(hdp, RR, POLLON);
		} else
			/*
			 * Hopefully we can piggyback the RR, if not we will
			 * generate a RR when T3 timer expires.
			 */
		if (hdp->hd_rrtimer == 0)
			hdp->hd_rrtimer = hd_t3;

		/* Forward iframe to packet level of X.25. */
		fbuf->m_data += HDHEADERLN;
		fbuf->m_len -= HDHEADERLN;
		fbuf->m_pkthdr.len -= HDHEADERLN;
		fbuf->m_pkthdr.rcvif = (struct ifnet *) hdp->hd_pkp;
#ifdef BSD4_3
		fbuf->m_act = 0;/* probably not necessary */
#else
		{
			struct mbuf *m;

			for (m = fbuf; m->m_next; m = m->m_next)
				m->m_act = (struct mbuf *) 0;
			m->m_act = (struct mbuf *) 1;
		}
#endif
		pk_input(fbuf);
		queued = TRUE;
		hd_start(hdp);
	} else {
		/*
		 * Here if the remote station has transmitted more iframes
		 * then the number which have been acknowledged plus K.
		 */
		hdp->hd_invalid_ns++;
		frame_reject(hdp, W, frame);
	}
	return (queued);
}

/*
 * This routine is used to determine if a value (the middle parameter) is
 * between two other values. The low value is  the first  parameter the high
 * value is the last parameter. The routine checks the middle value to see if
 * it is within the range of the first and last values. The reason we need
 * this routine is the values are modulo some  base hence a simple test for
 * greater or less than is not sufficient.
 */

bool
range_check(rear, value, front)
	int             rear, value, front;
{
	bool   result = FALSE;

	if (front > rear)
		result = (rear <= value) && (value <= front);
	else
		result = (rear <= value) || (value <= front);

	return (result);
}

/*
 * This routine handles all the frame reject conditions which can arise as a
 * result  of secondary  processing.  The frame reject condition Y (frame
 * length error) are handled elsewhere.
 */

static void
frame_reject(hdp, rejectcode, frame)
	struct hdcb    *hdp;
	int rejectcode;
	struct Hdlc_iframe *frame;
{
	struct Frmr_frame *frmr = &hd_frmr;

	frmr->frmr_control = ((struct Hdlc_frame *) frame)->control;

	frmr->frmr_ns = frame->ns;
	frmr->frmr_f1_0 = 0;
	frmr->frmr_nr = frame->nr;
	frmr->frmr_f2_0 = 0;

	frmr->frmr_0000 = 0;
	frmr->frmr_w = frmr->frmr_x = frmr->frmr_y =
		frmr->frmr_z = 0;
	switch (rejectcode) {
	case Z:
		frmr->frmr_z = 1;	/* invalid N(R). */
		break;

	case Y:
		frmr->frmr_y = 1;	/* iframe length error. */
		break;

	case X:
		frmr->frmr_x = 1;	/* invalid information field. */
		frmr->frmr_w = 1;
		break;

	case W:
		frmr->frmr_w = 1;	/* invalid N(S). */
	}

	hd_writeinternal(hdp, FRMR, POLLOFF);

	hdp->hd_state = WAIT_SABM;
	SET_TIMER(hdp);
}

/*
 * This procedure is invoked when ever we receive a supervisor frame such as
 * RR, RNR and REJ. All processing for these frames is done here.
 */

void
process_sframe(hdp, frame, frametype)
	struct hdcb *hdp;
	struct Hdlc_sframe *frame;
	int             frametype;
{
	int    nr = frame->nr, pf = frame->pf, pollbit = 0;

	if (valid_nr(hdp, nr, pf) == TRUE) {
		switch (frametype) {
		case RR:
			hdp->hd_condition &= ~REMOTE_RNR_CONDITION;
			break;

		case RNR:
			hdp->hd_condition |= REMOTE_RNR_CONDITION;
			hdp->hd_retxcnt = 0;
			break;

		case REJ:
			hdp->hd_condition &= ~REMOTE_RNR_CONDITION;
			rej_routine(hdp, nr);
		}

		if (pf == 1) {
			hdp->hd_retxcnt = 0;
			hdp->hd_condition &= ~TIMER_RECOVERY_CONDITION;

			if (frametype == RR && hdp->hd_lastrxnr == hdp->hd_vs
			    && hdp->hd_timer == 0 && hdp->hd_txq.head == 0)
				hd_writeinternal(hdp, RR, pf);
			else
				/*
				 * If any iframes have been queued because of
				 * the timer condition, transmit then now.
				 */
			if (hdp->hd_condition & REMOTE_RNR_CONDITION) {
				/*
				 * Remote is busy or timer condition, so only
				 * send one.
				 */
				if (hdp->hd_vs != hdp->hd_retxqi)
					hd_send_iframe(hdp,
					    hdp->hd_retxq[(u_char)hdp->hd_vs],
					    pollbit);
			} else	/* Flush the retransmit list first. */
				while (hdp->hd_vs != hdp->hd_retxqi)
					hd_send_iframe(hdp,
					    hdp->hd_retxq[(u_char)hdp->hd_vs],
					    POLLOFF);
		}
		hd_start(hdp);
	} else
		frame_reject(hdp, Z, (struct Hdlc_iframe *) frame);	/* Invalid N(R). */
}

/*
 * This routine tests the validity of the N(R) which we have received. If it
 * is ok,  then all the  iframes which it acknowledges  (if any) will be
 * freed.
 */

bool
valid_nr(hdp, nr, finalbit)
	struct hdcb *hdp;
	int nr;
	int    finalbit;
{
	/* Make sure it really does acknowledge something. */
	if (hdp->hd_lastrxnr == nr)
		return (TRUE);

	/*
	 * This section validates the frame's  N(R) value.  It's N(R) value
	 * must be  in synchronization  with  our V(S)  value and  our "last
	 * received nr" variable. If it is correct then we are able to send
	 * more IFRAME's, else frame reject condition is entered.
	 */

	if (range_check(hdp->hd_lastrxnr, nr, hdp->hd_vs) == FALSE) {
		if ((hdp->hd_condition & TIMER_RECOVERY_CONDITION) &&
		    range_check(hdp->hd_vs, nr, hdp->hd_xx) == TRUE)
			hdp->hd_vs = nr;

		else {
			hdp->hd_invalid_nr++;
			return (FALSE);
		}
	}
	/*
	 * If we get to here, we do have a valid frame  but it might be out
	 * of sequence.  However, we should  still accept the receive state
	 * number N(R) since it has already passed our previous test and it
	 * does acknowledge frames which we are sending.
	 */

	KILL_TIMER(hdp);
	free_iframes(hdp, &nr, finalbit);	/* Free all acknowledged
						 * iframes */
	if (nr != hdp->hd_vs)
		SET_TIMER(hdp);

	return (TRUE);
}

/*
 * This routine determines how many iframes need to be retransmitted. It then
 * resets the Send State Variable V(S) to accomplish this.
 */

static void
rej_routine(hdp, rejnr)
	struct hdcb *hdp;
	int    rejnr;
{
	int    anchor;

	/*
	 * Flush the output queue.  Any iframes queued for
	 * transmission will be out of sequence.
	 */

	hd_flush(hdp->hd_ifp);

	/*
	 * Determine how many frames should be re-transmitted. In the case of
	 * a normal REJ this  should be 1 to K.  In the case of a timer
	 * recovery REJ (ie. a REJ with the Final Bit on) this could be 0.
	 */

	anchor = hdp->hd_vs;
	if (hdp->hd_condition & TIMER_RECOVERY_CONDITION)
		anchor = hdp->hd_xx;

	anchor = (anchor - rejnr + 8) % MODULUS;

	if (anchor > 0) {

		/* There is at least one iframe to retransmit. */
		KILL_TIMER(hdp);
		hdp->hd_vs = rejnr;

		while (hdp->hd_vs != hdp->hd_retxqi)
			hd_send_iframe(hdp, hdp->hd_retxq[(u_char)hdp->hd_vs],
				       POLLOFF);

	}
	hd_start(hdp);
}

/*
 * This routine frees iframes from the retransmit queue. It is called when a
 * previously written iframe is acknowledged.
 */

static void
free_iframes(hdp, nr, finalbit)
	struct hdcb *hdp;
	int            *nr;
	int    finalbit;

{
	int    i, k;

	/*
	 * We  need to do the  following  because  of a  funny quirk  in  the
	 * protocol.  This case  occures  when  in Timer  recovery  condition
	 * we get  a  N(R)  which  acknowledges all  the outstanding  iframes
	 * but with  the Final Bit off. In this case we need to save the last
	 * iframe for possible retransmission even though it has already been
	 * acknowledged!
	 */

	if ((hdp->hd_condition & TIMER_RECOVERY_CONDITION) && *nr == hdp->hd_xx && finalbit == 0) {
		*nr = (*nr - 1 + 8) % MODULUS;
		/* printf ("QUIRK\n"); */
	}
	k = (*nr - hdp->hd_lastrxnr + 8) % MODULUS;

	/* Loop here freeing all acknowledged iframes. */
	for (i = 0; i < k; ++i) {
		m_freem(hdp->hd_retxq[(u_char)hdp->hd_lastrxnr]);
		hdp->hd_retxq[(u_char)hdp->hd_lastrxnr] = 0;
		hdp->hd_lastrxnr = (hdp->hd_lastrxnr + 1) % MODULUS;
	}

}
@


1.7
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_input.c,v 1.6 2003/06/02 23:28:13 millert Exp $	*/
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_input.c,v 1.5 2002/06/14 21:35:00 todd Exp $	*/
d71 4
a74 4
	register struct mbuf *m;
	register struct hdcb *hdp;
	register struct ifnet *ifp;
	register int    s;
d124 2
a125 2
	register struct hdcb *hdp;
	register struct mbuf *fbuf;
d127 2
a128 2
	register int    queued = FALSE, frametype, pf;
	register struct Hdlc_frame *frame;
d326 1
a326 1
	register struct hdcb *hdp;
d328 1
a328 1
	register struct Hdlc_iframe *frame;
d330 2
a331 2
	register int    nr = frame->nr, ns = frame->ns, pf = frame->pf;
	register int    queued = FALSE;
d397 1
a397 1
			register struct mbuf *m;
d431 1
a431 1
	register bool   result = FALSE;
d453 1
a453 1
	register struct Frmr_frame *frmr = &hd_frmr;
d496 2
a497 2
	register struct hdcb *hdp;
	register struct Hdlc_sframe *frame;
d500 1
a500 1
	register int    nr = frame->nr, pf = frame->pf, pollbit = 0;
d558 1
a558 1
	register struct hdcb *hdp;
d560 1
a560 1
	register int    finalbit;
d606 2
a607 2
	register struct hdcb *hdp;
	register int    rejnr;
d609 1
a609 1
	register int    anchor;
d651 1
a651 1
	register struct hdcb *hdp;
d653 1
a653 1
	register int    finalbit;
d656 1
a656 1
	register int    i, k;
@


1.5
log
@spelling; from Brian Poole <raj@@cerias.purdue.edu>
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_input.c,v 1.4 2002/03/14 01:27:10 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_input.c,v 1.3 1996/04/21 22:28:52 deraadt Exp $	*/
d572 1
a572 1
	 * must be  in syncronization  with  our V(S)  value and  our "last
@


1.3
log
@partial sync with netbsd 960418, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_input.c,v 1.2 1996/03/04 07:36:22 niklas Exp $	*/
d61 3
a63 3
static void frame_reject __P((struct hdcb *, int, struct Hdlc_iframe *));
static void rej_routine __P((register struct hdcb *, int));
static void free_iframes __P((struct hdcb *, int *, int));
@


1.3.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_input.c,v 1.3 1996/04/21 22:28:52 deraadt Exp $	*/
d61 3
a63 3
static void frame_reject(struct hdcb *, int, struct Hdlc_iframe *);
static void rej_routine(register struct hdcb *, int);
static void free_iframes(struct hdcb *, int *, int);
@


1.3.26.2
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_input.c,v 1.3.26.1 2002/06/11 03:31:36 art Exp $	*/
d572 1
a572 1
	 * must be  in synchronization  with  our V(S)  value and  our "last
@


1.3.16.1
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d61 3
a63 3
static void frame_reject(struct hdcb *, int, struct Hdlc_iframe *);
static void rej_routine(register struct hdcb *, int);
static void free_iframes(struct hdcb *, int *, int);
@


1.3.16.2
log
@Sync the SMP branch with 3.3
@
text
@d572 1
a572 1
	 * must be  in synchronization  with  our V(S)  value and  our "last
@


1.3.16.3
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_input.c,v 1.3.16.2 2003/03/28 00:06:55 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3.16.4
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d71 4
a74 4
	struct mbuf *m;
	struct hdcb *hdp;
	struct ifnet *ifp;
	int    s;
d124 2
a125 2
	struct hdcb *hdp;
	struct mbuf *fbuf;
d127 2
a128 2
	int    queued = FALSE, frametype, pf;
	struct Hdlc_frame *frame;
d326 1
a326 1
	struct hdcb *hdp;
d328 1
a328 1
	struct Hdlc_iframe *frame;
d330 2
a331 2
	int    nr = frame->nr, ns = frame->ns, pf = frame->pf;
	int    queued = FALSE;
d397 1
a397 1
			struct mbuf *m;
d431 1
a431 1
	bool   result = FALSE;
d453 1
a453 1
	struct Frmr_frame *frmr = &hd_frmr;
d496 2
a497 2
	struct hdcb *hdp;
	struct Hdlc_sframe *frame;
d500 1
a500 1
	int    nr = frame->nr, pf = frame->pf, pollbit = 0;
d558 1
a558 1
	struct hdcb *hdp;
d560 1
a560 1
	int    finalbit;
d606 2
a607 2
	struct hdcb *hdp;
	int    rejnr;
d609 1
a609 1
	int    anchor;
d651 1
a651 1
	struct hdcb *hdp;
d653 1
a653 1
	int    finalbit;
d656 1
a656 1
	int    i, k;
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 2
a2 2
/*	$OpenBSD$	*/
/*	$NetBSD: hd_input.c,v 1.8 1996/02/13 22:04:27 christos Exp $	*/
d109 1
a109 2
				printf("hdintr: unknown interface %x\n", 
				       (unsigned int) ifp);
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: hd_input.c,v 1.7 1994/06/29 06:37:07 cgd Exp $	*/
d59 5
a64 3
static frame_reject();
static rej_routine();
static free_iframes();
d72 2
a73 1
hdintr ()
d78 1
a78 1
	register int s;
d83 3
a85 3
		s = splimp ();
		IF_DEQUEUE (&hdintrq, m);
		splx (s);
d89 3
a91 3
			printf ("hdintr: packet too short (len=%d)\n",
				m->m_len);
			m_freem (m);
d109 3
a111 2
				printf ("hdintr: unknown interface %x\n", ifp);
				m_freem (m);
d118 6
a123 4
		/* Process_rxframe returns FALSE if the frame was NOT queued
		   for the next higher layers. */
		if (process_rxframe (hdp, m) == FALSE)
			m_freem (m);
d127 4
a130 3
process_rxframe (hdp, fbuf)
register struct hdcb *hdp;
register struct mbuf *fbuf;
d132 1
a132 1
	register int queued = FALSE, frametype, pf;
d134 1
d136 2
a137 2
	frame = mtod (fbuf, struct Hdlc_frame *);
	pf = ((struct Hdlc_iframe *) frame) -> pf;
d139 2
a140 2
	hd_trace (hdp, RX, frame);
	if (frame -> address != ADDRESS_A && frame -> address != ADDRESS_B)
d143 1
a143 1
	switch ((frametype = hd_decode (hdp, frame)) + hdp->hd_state) {
d161 1
a161 1
		hd_writeinternal (hdp, SABM, POLLOFF);
d163 1
a163 1
		SET_TIMER (hdp);
d166 7
a172 7
	case SABM + DM_SENT: 
	case SABM + WAIT_SABM: 
		hd_writeinternal (hdp, UA, pf);
	case UA + SABM_SENT: 
	case UA + WAIT_UA: 
		KILL_TIMER (hdp);
		hd_initvars (hdp);
d174 1
a174 1
		hd_message (hdp, "Link level operational");
d176 1
a176 1
		(void) pk_ctlinput (PRC_LINKUP, hdp->hd_pkp);
d179 6
a184 4
	case SABM + SABM_SENT: 
		/* Got a SABM collision. Acknowledge the remote's SABM
		   via UA but still wait for UA. */
		hd_writeinternal (hdp, UA, pf);
d187 1
a187 1
	case SABM + ABM: 
d189 2
a190 2
		KILL_TIMER (hdp);
		hd_message (hdp, "Link reset");
d192 1
a192 1
		hd_dumptrace (hdp);
d194 4
a197 4
		hd_flush (hdp->hd_ifp);
		hd_writeinternal (hdp, UA, pf);
		hd_initvars (hdp);
		(void) pk_ctlinput (PRC_LINKRESET, hdp->hd_pkp);
d201 2
a202 2
	case SABM + WAIT_UA: 
		hd_writeinternal (hdp, UA, pf);
d205 2
a206 2
	case DM + ABM: 
		hd_message (hdp, "DM received: link down");
d208 1
a208 1
		hd_dumptrace (hdp);
d210 6
a215 6
		(void) pk_ctlinput (PRC_LINKDOWN, hdp->hd_pkp);
		hd_flush (hdp->hd_ifp);
	case DM + DM_SENT: 
	case DM + WAIT_SABM: 
	case DM + WAIT_UA: 
		hd_writeinternal (hdp, SABM, pf);
d217 1
a217 1
		SET_TIMER (hdp);
d221 2
a222 2
	case DISC + DM_SENT: 
	case DISC + SABM_SENT: 
d224 2
a225 2
		hd_writeinternal (hdp, UA, pf);
		hd_writeinternal (hdp, SABM, POLLOFF);
d227 1
a227 1
		SET_TIMER (hdp);
d230 3
a232 3
	case DISC + WAIT_UA: 
		hd_writeinternal (hdp, DM, pf);
		SET_TIMER (hdp);
d236 5
a240 5
	case DISC + ABM: 
		hd_message (hdp, "DISC received: link down");
		(void) pk_ctlinput (PRC_LINKDOWN, hdp->hd_pkp);
	case DISC + WAIT_SABM: 
		hd_writeinternal (hdp, UA, pf);
d242 1
a242 1
		SET_TIMER (hdp);
d245 5
a249 5
	case UA + ABM: 
		hd_message (hdp, "UA received: link down");
		(void) pk_ctlinput (PRC_LINKDOWN, hdp->hd_pkp);
	case UA + WAIT_SABM: 
		hd_writeinternal (hdp, DM, pf);
d251 1
a251 1
		SET_TIMER (hdp);
d254 2
a255 2
	case FRMR + DM_SENT: 
		hd_writeinternal (hdp, SABM, pf);
d257 1
a257 1
		SET_TIMER (hdp);
d260 2
a261 2
	case FRMR + WAIT_SABM: 
		hd_writeinternal (hdp, DM, pf);
d263 1
a263 1
		SET_TIMER (hdp);
d266 3
a268 3
	case FRMR + ABM: 
		hd_message (hdp, "FRMR received: link down");
		(void) pk_ctlinput (PRC_LINKDOWN, hdp->hd_pkp);
d270 1
a270 1
		hd_dumptrace (hdp);
d272 2
a273 2
		hd_flush (hdp->hd_ifp);
		hd_writeinternal (hdp, SABM, pf);
d275 1
a275 1
		SET_TIMER (hdp);
d278 4
a281 4
	case RR + ABM: 
	case RNR + ABM: 
	case REJ + ABM: 
		process_sframe (hdp, (struct Hdlc_sframe *)frame, frametype);
d284 2
a285 2
	case IFRAME + ABM: 
		queued = process_iframe (hdp, fbuf, (struct Hdlc_iframe *)frame);
d288 5
a292 5
	case IFRAME + SABM_SENT: 
	case RR + SABM_SENT: 
	case RNR + SABM_SENT: 
	case REJ + SABM_SENT: 
		hd_writeinternal (hdp, DM, POLLON);
d294 1
a294 1
		SET_TIMER (hdp);
d297 6
a302 6
	case IFRAME + WAIT_SABM: 
	case RR + WAIT_SABM: 
	case RNR + WAIT_SABM: 
	case REJ + WAIT_SABM: 
		hd_writeinternal (hdp, FRMR, POLLOFF);
		SET_TIMER (hdp);
d305 1
a305 1
	case ILLEGAL + SABM_SENT: 
d307 1
a307 1
		hd_writeinternal (hdp, DM, POLLOFF);
d309 1
a309 1
		SET_TIMER (hdp);
d312 3
a314 3
	case ILLEGAL + ABM: 
		hd_message (hdp, "Unknown frame received: link down");
		(void) pk_ctlinput (PRC_LINKDOWN, hdp->hd_pkp);
d318 1
a318 1
		hd_dumptrace (hdp);
d320 1
a320 1
		hd_writeinternal (hdp, FRMR, POLLOFF);
d322 1
a322 1
		SET_TIMER (hdp);
d329 5
a333 4
process_iframe (hdp, fbuf, frame)
register struct hdcb *hdp;
struct mbuf *fbuf;
register struct Hdlc_iframe *frame;
d335 1
a335 3
	register int    nr = frame -> nr,
	                ns = frame -> ns,
	                pf = frame -> pf;
d338 3
a340 3
	/* 
	 *  Validate the iframe's N(R) value. It's N(R) value must be in
	 *   sync with our V(S) value and our "last received nr".
d343 2
a344 2
	if (valid_nr (hdp, nr, FALSE) == FALSE) {
		frame_reject (hdp, Z, frame);
d347 3
a349 5


	/* 
	 *  This section tests the IFRAME for proper sequence. That is, it's
	 *  sequence number N(S) MUST be equal to V(S).
d366 2
a367 2
			hd_flush (hdp->hd_ifp);
			hd_writeinternal (hdp, REJ, pf);
d373 5
a377 5
	/* 
	 *  This section finally tests the IFRAME's sequence number against
	 *  the window size (K)  and the sequence number of the  last frame
	 *  we have acknowledged.  If the IFRAME is completely correct then 
	 *  it is queued for the packet level.
d380 2
a381 2
	if (ns != (hdp -> hd_lasttxnr + hdp -> hd_xcp -> xc_lwsize) % MODULUS) {
		hdp -> hd_vr = (hdp -> hd_vr + 1) % MODULUS;
d384 1
a384 1
			hd_writeinternal (hdp, RR, POLLON);
d386 3
a388 3
			/*    
			 *  Hopefully we can piggyback the RR, if not we will generate
			 *  a RR when T3 timer expires.
d390 2
a391 2
			if (hdp -> hd_rrtimer == 0)
				hdp->hd_rrtimer = hd_t3;
d394 4
a397 4
		fbuf -> m_data += HDHEADERLN;
		fbuf -> m_len -= HDHEADERLN;
		fbuf -> m_pkthdr.len -= HDHEADERLN;
		fbuf -> m_pkthdr.rcvif = (struct ifnet *)hdp -> hd_pkp;
d399 1
a399 1
		fbuf->m_act = 0;	/* probably not necessary */
d403 4
a406 4
			
			for (m = fbuf; m -> m_next; m = m -> m_next)
				m -> m_act = (struct mbuf *) 0;
			m -> m_act = (struct mbuf *) 1;
d409 1
a409 1
		pk_input (fbuf);
d411 1
a411 1
		hd_start (hdp);
d413 3
a415 3
		/* 
		 *  Here if the remote station has transmitted more iframes then
		 *  the number which have been acknowledged plus K. 
d418 1
a418 1
		frame_reject (hdp, W, frame);
d423 7
a429 7
/* 
 *  This routine is used to determine if a value (the middle parameter)
 *  is between two other values. The low value is  the first  parameter
 *  the high value is the last parameter. The routine checks the middle
 *  value to see if it is within the range of the first and last values.
 *  The reason we need this routine is the values are modulo some  base
 *  hence a simple test for greater or less than is not sufficient.
d433 2
a434 4
range_check (rear, value, front)
int     rear,
        value,
        front;
d436 1
a436 1
	register bool result = FALSE;
d446 4
a449 4
/* 
 *  This routine handles all the frame reject conditions which can
 *  arise as a result  of secondary  processing.  The frame reject
 *  condition Y (frame length error) are handled elsewhere.
d452 5
a456 4
static
frame_reject (hdp, rejectcode, frame)
struct hdcb *hdp;
struct Hdlc_iframe *frame;
d460 1
a460 1
	frmr -> frmr_control = ((struct Hdlc_frame *) frame) -> control;
d462 8
a469 8
	frmr -> frmr_ns = frame -> ns;
	frmr -> frmr_f1_0 = 0;
	frmr -> frmr_nr = frame -> nr;
	frmr -> frmr_f2_0 = 0;

	frmr -> frmr_0000 = 0;
	frmr -> frmr_w = frmr -> frmr_x = frmr -> frmr_y =
		frmr -> frmr_z = 0;
d471 2
a472 2
	case Z: 
		frmr -> frmr_z = 1;/* invalid N(R). */
d475 2
a476 2
	case Y: 
		frmr -> frmr_y = 1;/* iframe length error. */
d479 3
a481 3
	case X: 
		frmr -> frmr_x = 1;/* invalid information field. */
		frmr -> frmr_w = 1;
d484 2
a485 2
	case W: 
		frmr -> frmr_w = 1;/* invalid N(S). */
d488 1
a488 1
	hd_writeinternal (hdp, FRMR, POLLOFF);
d491 1
a491 1
	SET_TIMER (hdp);
d494 3
a496 4
/* 
 *  This procedure is invoked when ever we receive a supervisor
 *  frame such as RR, RNR and REJ. All processing for these
 *  frames is done here.
d499 5
a503 4
process_sframe (hdp, frame, frametype)
register struct hdcb *hdp;
register struct Hdlc_sframe *frame;
int frametype;
d505 1
a505 1
	register int nr = frame -> nr, pf = frame -> pf, pollbit = 0;
d507 1
a507 1
	if (valid_nr (hdp, nr, pf) == TRUE) {
d509 1
a509 1
		case RR: 
d513 1
a513 1
		case RNR: 
d518 1
a518 1
		case REJ: 
d520 1
a520 1
			rej_routine (hdp, nr);
d528 1
a528 1
				&& hdp->hd_timer == 0 && hdp->hd_txq.head == 0)
d531 4
a534 2
			/* If any iframes have been queued because of the
			   timer condition, transmit then now. */
d536 4
a539 2
				/* Remote is busy or timer condition, so only
				   send one. */
d541 4
a544 3
					hd_send_iframe (hdp, hdp->hd_retxq[hdp->hd_vs], pollbit);
			}
			else	/* Flush the retransmit list first. */
d546 3
a548 1
					hd_send_iframe (hdp, hdp->hd_retxq[hdp->hd_vs], POLLOFF);
d550 1
a550 2

		hd_start (hdp);
d552 1
a552 1
		frame_reject (hdp, Z, (struct Hdlc_iframe *)frame);	/* Invalid N(R). */
d555 4
a558 4
/* 
 *  This routine tests the validity of the N(R) which we have received.
 *  If it is ok,  then all the  iframes which it acknowledges  (if any)
 *  will be freed.
d562 4
a565 3
valid_nr (hdp, nr, finalbit)
register struct hdcb *hdp;
register int finalbit;
d571 5
a575 5
	/* 
	 *  This section validates the frame's  N(R) value.  It's N(R) value
	 *  must be  in syncronization  with  our V(S)  value and  our "last
	 *  received nr" variable. If it is correct then we are able to send
	 *  more IFRAME's, else frame reject condition is entered.
d578 1
a578 1
	if (range_check (hdp->hd_lastrxnr, nr, hdp->hd_vs) == FALSE) {
d580 1
a580 1
				range_check (hdp->hd_vs, nr, hdp->hd_xx) == TRUE)
d588 5
a592 6

	/* 
	 *  If we get to here, we do have a valid frame  but it might be out
	 *  of sequence.  However, we should  still accept the receive state
	 *  number N(R) since it has already passed our previous test and it
	 *  does acknowledge frames which we are sending.
d595 3
a597 2
	KILL_TIMER (hdp);
	free_iframes (hdp, &nr, finalbit);/* Free all acknowledged iframes */
d599 1
a599 1
		SET_TIMER (hdp);
d604 3
a606 3
/* 
 *  This routine determines how many iframes need to be retransmitted.
 *  It then resets the Send State Variable V(S) to accomplish this.
d609 4
a612 4
static
rej_routine (hdp, rejnr)
register struct hdcb *hdp;
register int rejnr;
d614 1
a614 1
	register int anchor;
d621 1
a621 1
	hd_flush (hdp->hd_ifp);
d623 4
a626 4
	/* 
	 *  Determine how many frames should be re-transmitted. In the case 
	 *  of a normal REJ this  should be 1 to K.  In the case of a timer
	 *  recovery REJ (ie. a REJ with the Final Bit on) this could be 0. 
d638 1
a638 1
		KILL_TIMER (hdp);
d642 2
a643 1
			hd_send_iframe (hdp, hdp->hd_retxq[hdp->hd_vs], POLLOFF);
d646 1
a646 1
	hd_start (hdp);
d649 3
a651 3
/* 
 *  This routine frees iframes from the retransmit queue. It is called
 *  when a previously written iframe is acknowledged.
d654 5
a658 5
static
free_iframes (hdp, nr, finalbit)
register struct hdcb *hdp;
int *nr;
register int finalbit;
d663 7
a669 7
	/* 
	 *  We  need to do the  following  because  of a  funny quirk  in  the 
	 *  protocol.  This case  occures  when  in Timer  recovery  condition 
	 *  we get  a  N(R)  which  acknowledges all  the outstanding  iframes
	 *  but with  the Final Bit off. In this case we need to save the last
	 *  iframe for possible retransmission even though it has already been 
	 *  acknowledged!
d674 1
a674 1
/*		printf ("QUIRK\n"); */
a675 1

d680 2
a681 2
		m_freem (hdp->hd_retxq[hdp->hd_lastrxnr]);
		hdp->hd_retxq[hdp->hd_lastrxnr] = 0;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
