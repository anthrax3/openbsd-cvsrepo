head	1.6;
access;
symbols
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2005.06.16.17.37.54;	author henning;	state dead;
branches;
next	1.5;

1.5
date	2003.06.02.23.28.13;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.15.01.20.04;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.14.01.27.10;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.07.36.27;	author niklas;	state Exp;
branches
	1.2.16.1
	1.2.26.1;
next	1.1;

1.1
date	95.10.18.08.53.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.08;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2002.03.28.14.57.37;	author niklas;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2003.06.07.11.06.07;	author ho;	state Exp;
branches;
next	;

1.2.26.1
date	2002.06.11.03.31.36;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove remaining netccitt parts, full ports build test by pval, thanks!
@
text
@/*	$OpenBSD: hd_var.h,v 1.5 2003/06/02 23:28:13 millert Exp $	*/
/*	$NetBSD: hd_var.h,v 1.7 1996/02/13 22:04:34 christos Exp $	*/

/*
 * Copyright (c) University of British Columbia, 1984
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Laboratory for Computation Vision and the Computer Science Department
 * of the University of British Columbia.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)hd_var.h	8.1 (Berkeley) 6/10/93
 */

/*
 *
 * hdlc control block
 *
 */

struct	hdtxq {
	struct	mbuf *head;
	struct	mbuf *tail;
};

struct	hdcb {
	struct	hdcb *hd_next;	/* pointer to next hdlc control block */
	char	hd_state;	/* link state */
	char	hd_vs;		/* send state variable */
	char	hd_vr;		/* receive state variable */
	char	hd_lastrxnr;	/* last received N(R) */
	char	hd_lasttxnr;	/* last transmitted N(R) */
	char	hd_condition;
#define TIMER_RECOVERY_CONDITION        0x01
#define REJ_CONDITION                   0x02
#define REMOTE_RNR_CONDITION            0X04
	char	hd_retxcnt;
	char	hd_xx;
	struct	hdtxq hd_txq;
	struct	mbuf *hd_retxq[MODULUS];
	char	hd_retxqi;
	char	hd_rrtimer;
	char	hd_timer;
#define SET_TIMER(hdp)		hdp->hd_timer = hd_t1
#define KILL_TIMER(hdp)		hdp->hd_timer = 0
	char	hd_dontcopy;	/* if-driver doesn't free I-frames */
	struct	ifnet *hd_ifp;	/* device's network visible interface */
	struct	ifaddr *hd_ifa;	/* device's X.25 network address */
	struct	x25config *hd_xcp;
	caddr_t	hd_pkp;		/* Level III junk */
				/* separate entry for HDLC direct output */
	int	(*hd_output)(struct mbuf *, ...);

	/* link statistics */

	long	hd_iframes_in;
	long	hd_iframes_out;
	long	hd_rrs_in;
	long	hd_rrs_out;
	short	hd_rejs_in;
	short	hd_rejs_out;
	long	hd_window_condition;
	short	hd_invalid_ns;
	short	hd_invalid_nr;
	short	hd_timeouts;
	short	hd_resets;
	short	hd_unknown;
	short	hd_frmrs_in;
	short	hd_frmrs_out;
	short	hd_rnrs_in;
	short	hd_rnrs_out;
};

#ifdef _KERNEL
struct	hdcb *hdcbhead;		/* head of linked list of hdcb's */
struct	Frmr_frame hd_frmr;	/* rejected frame diagnostic info */
struct	ifqueue hdintrq;	/* hdlc packet input queue */
struct	Hdlc_frame;
struct	Hdlc_iframe;
struct	Hdlc_sframe;

int	hd_t1;			/* timer T1 value */
int	hd_t3;			/* RR send timer */
int	hd_n2;			/* frame retransmission limit */


/* hd_debug.c */
void hd_trace(struct hdcb *, int , struct Hdlc_frame *);
int hd_dumptrace(struct hdcb *);

/* hd_input.c */
void hdintr(void);
int process_rxframe(struct hdcb *, struct mbuf *);
int process_iframe(struct hdcb *, struct mbuf *, struct Hdlc_iframe *);
bool range_check(int, int , int );
void process_sframe(struct hdcb *, struct Hdlc_sframe *, int);
bool valid_nr(struct hdcb *, int , int);

/* hd_output.c */
int hd_output(struct mbuf *, ...);
void hd_start(struct hdcb *);
void hd_send_iframe(struct hdcb *, struct mbuf *, int);
int hd_ifoutput(struct mbuf *, ...);
void hd_resend_iframe(struct hdcb *);

/* hd_subr.c */
void hd_init(void);
void *hd_ctlinput(int , struct sockaddr *, void *);
void hd_initvars(struct hdcb *);
int hd_decode(struct hdcb *, struct Hdlc_frame *);
void hd_writeinternal(struct hdcb *, int, int );
void hd_append(struct hdtxq *, struct mbuf *);
void hd_flush(struct ifnet *);
void hd_message(struct hdcb *, char *);
int hd_status(struct hdcb *);
struct mbuf *hd_remove(struct hdtxq *);

/* hd_timer.c */
void hd_timer(void);

#endif
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_var.h,v 1.4 2002/03/15 01:20:04 millert Exp $	*/
@


1.4
log
@Cosmetic changes only, primarily making comments line up nicely after the
__P removal.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_var.h,v 1.3 2002/03/14 01:27:10 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_var.h,v 1.2 1996/03/04 07:36:27 niklas Exp $	*/
d80 2
a81 1
	int	(*hd_output)	/* separate entry for HDLC direct output */(struct mbuf *, ...);
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d80 1
a80 2
	int	(*hd_output)	/* separate entry for HDLC direct output */
			__P((struct mbuf *, ...));
d116 2
a117 2
void hd_trace __P((struct hdcb *, int , struct Hdlc_frame *));
int hd_dumptrace __P((struct hdcb *));
d120 6
a125 6
void hdintr __P((void));
int process_rxframe __P((struct hdcb *, struct mbuf *));
int process_iframe __P((struct hdcb *, struct mbuf *, struct Hdlc_iframe *));
bool range_check __P((int, int , int ));
void process_sframe __P((struct hdcb *, struct Hdlc_sframe *, int));
bool valid_nr __P((struct hdcb *, int , int));
d128 5
a132 5
int hd_output __P((struct mbuf *, ...));
void hd_start __P((struct hdcb *));
void hd_send_iframe __P((struct hdcb *, struct mbuf *, int));
int hd_ifoutput __P((struct mbuf *, ...));
void hd_resend_iframe __P((struct hdcb *));
d135 10
a144 10
void hd_init __P((void));
void *hd_ctlinput __P((int , struct sockaddr *, void *));
void hd_initvars __P((struct hdcb *));
int hd_decode __P((struct hdcb *, struct Hdlc_frame *));
void hd_writeinternal __P((struct hdcb *, int, int ));
void hd_append __P((struct hdtxq *, struct mbuf *));
void hd_flush __P((struct ifnet *));
void hd_message __P((struct hdcb *, char *));
int hd_status __P((struct hdcb *));
struct mbuf *hd_remove __P((struct hdtxq *));
d147 1
a147 1
void hd_timer __P((void));
@


1.2.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_var.h,v 1.2 1996/03/04 07:36:27 niklas Exp $	*/
d80 2
a81 2
				/* separate entry for HDLC direct output */
	int	(*hd_output)(struct mbuf *, ...);
d117 2
a118 2
void hd_trace(struct hdcb *, int , struct Hdlc_frame *);
int hd_dumptrace(struct hdcb *);
d121 6
a126 6
void hdintr(void);
int process_rxframe(struct hdcb *, struct mbuf *);
int process_iframe(struct hdcb *, struct mbuf *, struct Hdlc_iframe *);
bool range_check(int, int , int );
void process_sframe(struct hdcb *, struct Hdlc_sframe *, int);
bool valid_nr(struct hdcb *, int , int);
d129 5
a133 5
int hd_output(struct mbuf *, ...);
void hd_start(struct hdcb *);
void hd_send_iframe(struct hdcb *, struct mbuf *, int);
int hd_ifoutput(struct mbuf *, ...);
void hd_resend_iframe(struct hdcb *);
d136 10
a145 10
void hd_init(void);
void *hd_ctlinput(int , struct sockaddr *, void *);
void hd_initvars(struct hdcb *);
int hd_decode(struct hdcb *, struct Hdlc_frame *);
void hd_writeinternal(struct hdcb *, int, int );
void hd_append(struct hdtxq *, struct mbuf *);
void hd_flush(struct ifnet *);
void hd_message(struct hdcb *, char *);
int hd_status(struct hdcb *);
struct mbuf *hd_remove(struct hdtxq *);
d148 1
a148 1
void hd_timer(void);
@


1.2.16.1
log
@Merge in -current from roughly a week ago
@
text
@d80 2
a81 2
				/* separate entry for HDLC direct output */
	int	(*hd_output)(struct mbuf *, ...);
d117 2
a118 2
void hd_trace(struct hdcb *, int , struct Hdlc_frame *);
int hd_dumptrace(struct hdcb *);
d121 6
a126 6
void hdintr(void);
int process_rxframe(struct hdcb *, struct mbuf *);
int process_iframe(struct hdcb *, struct mbuf *, struct Hdlc_iframe *);
bool range_check(int, int , int );
void process_sframe(struct hdcb *, struct Hdlc_sframe *, int);
bool valid_nr(struct hdcb *, int , int);
d129 5
a133 5
int hd_output(struct mbuf *, ...);
void hd_start(struct hdcb *);
void hd_send_iframe(struct hdcb *, struct mbuf *, int);
int hd_ifoutput(struct mbuf *, ...);
void hd_resend_iframe(struct hdcb *);
d136 10
a145 10
void hd_init(void);
void *hd_ctlinput(int , struct sockaddr *, void *);
void hd_initvars(struct hdcb *);
int hd_decode(struct hdcb *, struct Hdlc_frame *);
void hd_writeinternal(struct hdcb *, int, int );
void hd_append(struct hdtxq *, struct mbuf *);
void hd_flush(struct ifnet *);
void hd_message(struct hdcb *, char *);
int hd_status(struct hdcb *);
struct mbuf *hd_remove(struct hdtxq *);
d148 1
a148 1
void hd_timer(void);
@


1.2.16.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_var.h,v 1.2.16.1 2002/03/28 14:57:37 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: hd_var.h,v 1.6 1995/03/26 20:33:44 jtc Exp $	*/
d80 2
a81 1
	int	(*hd_output)();	/* separate entry for HDLC direct output */
d107 3
d114 36
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
