head	1.5;
access;
symbols
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.32
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.30
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.28
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2005.06.16.17.37.54;	author henning;	state dead;
branches;
next	1.4;

1.4
date	2003.12.10.07.22.42;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.23.28.13;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.07.36.25;	author niklas;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.53.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.08;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2003.06.07.11.06.07;	author ho;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2004.02.19.10.57.23;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove remaining netccitt parts, full ports build test by pval, thanks!
@
text
@/*	$OpenBSD: hd_subr.c,v 1.4 2003/12/10 07:22:42 itojun Exp $	*/
/*	$NetBSD: hd_subr.c,v 1.6 1996/02/13 22:04:31 christos Exp $	*/

/*
 * Copyright (c) University of British Columbia, 1984
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Laboratory for Computation Vision and the Computer Science Department
 * of the University of British Columbia.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)hd_subr.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/domain.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/protosw.h>
#include <sys/errno.h>
#include <sys/time.h>
#include <sys/kernel.h>

#include <net/if.h>

#include <netccitt/hdlc.h>
#include <netccitt/hd_var.h>
#include <netccitt/x25.h>
#include <netccitt/pk_var.h>
#include <netccitt/pk_extern.h>

void
hd_init()
{

	hdintrq.ifq_maxlen = IFQ_MAXLEN;
}

void *
hd_ctlinput(prc, addr, ext)
	int             prc;
	struct sockaddr *addr;
	void           *ext;
{
	struct x25config *xcp = (struct x25config *) addr;
	struct hdcb *hdp;
	struct ifaddr *ifa;
	struct ifnet   *ifp;

	if (addr->sa_family != AF_CCITT)
		return (void *) (EAFNOSUPPORT);
	if (xcp->xc_lptype != HDLCPROTO_LAPB)
		return (void *) (EPROTONOSUPPORT);
	ifa = ifa_ifwithaddr(addr);
	if (ifa == 0 || ifa->ifa_addr->sa_family != AF_CCITT ||
	    (ifp = ifa->ifa_ifp) == 0)
		panic("hd_ctlinput");
	for (hdp = hdcbhead; hdp; hdp = hdp->hd_next)
		if (hdp->hd_ifp == ifp)
			break;

	if (hdp == 0) {		/* new interface */

		/* an hdcb is now too big to fit in an mbuf */
		MALLOC(hdp, struct hdcb *, sizeof(*hdp), M_PCB, M_DONTWAIT);
		if (hdp == 0)
			return (void *) (ENOBUFS);
		bzero((caddr_t) hdp, sizeof(*hdp));
		hdp->hd_pkp =
			(caddr_t) pk_newlink((struct x25_ifaddr *) ifa,
					     (caddr_t) hdp);
		((struct x25_ifaddr *) ifa)->ia_pkcb =
			(struct pkcb *) hdp->hd_pkp;
		if (hdp->hd_pkp == 0) {
			free(hdp, M_PCB);
			return (void *) (ENOBUFS);
		}
		hdp->hd_ifp = ifp;
		hdp->hd_ifa = ifa;
		hdp->hd_xcp = xcp;
		hdp->hd_state = INIT;
		hdp->hd_output = hd_ifoutput;
		hdp->hd_next = hdcbhead;
		hdcbhead = hdp;
	} else if (hdp->hd_pkp == 0) {	/* interface got reconfigured */
		hdp->hd_pkp =
			(caddr_t) pk_newlink((struct x25_ifaddr *) ifa,
					     (caddr_t) hdp);
		((struct x25_ifaddr *) ifa)->ia_pkcb =
			(struct pkcb *) hdp->hd_pkp;
		if (hdp->hd_pkp == 0) {
			free(hdp, M_PCB);
			return (void *) (ENOBUFS);
		}
	}
	switch (prc) {
	case PRC_IFUP:
		if (xcp->xc_lwsize == 0 ||
		    xcp->xc_lwsize > MAX_WINDOW_SIZE)
			xcp->xc_lwsize = MAX_WINDOW_SIZE;
		if (hdp->hd_state == INIT)
			SET_TIMER(hdp);
		break;

	case PRC_IFDOWN:
		if (hdp->hd_state == ABM)
			hd_message(hdp, "Operator shutdown: link closed");
		(void) pk_ctlinput(PRC_LINKDOWN,
				   (struct sockaddr *) hdp->hd_pkp, NULL);

		/* fall thru to ... */

	case PRC_DISCONNECT_REQUEST:
		/* drop reference to pkcb --- it's dead meat */
		hdp->hd_pkp = (caddr_t) 0;
		((struct x25_ifaddr *) ifa)->ia_pkcb = (struct pkcb *) 0;

		hd_writeinternal(hdp, DISC, POLLON);
		hdp->hd_state = DISC_SENT;
		SET_TIMER(hdp);
	}
	return (void *) (0);
}

void
hd_initvars(hdp)
	struct hdcb *hdp;
{
	struct mbuf *m;
	int    i;

	/* Clear Transmit queue. */
	while ((m = hd_remove(&hdp->hd_txq)) != NULL)
		m_freem(m);

	/* Clear Retransmit queue. */
	i = hdp->hd_lastrxnr;
	while (i != hdp->hd_retxqi) {
		m_freem(hdp->hd_retxq[i]);
		i = (i + 1) % MODULUS;
	}
	hdp->hd_retxqi = 0;

	hdp->hd_vs = hdp->hd_vr = 0;
	hdp->hd_lasttxnr = hdp->hd_lastrxnr = 0;
	hdp->hd_rrtimer = 0;
	KILL_TIMER(hdp);
	hdp->hd_retxcnt = 0;
	hdp->hd_condition = 0;
}

int
hd_decode(hdp, frame)
	struct hdcb *hdp;
	struct Hdlc_frame *frame;
{
	int    frametype = ILLEGAL;
	struct Hdlc_iframe *iframe = (struct Hdlc_iframe *) frame;
	struct Hdlc_sframe *sframe = (struct Hdlc_sframe *) frame;
	struct Hdlc_uframe *uframe = (struct Hdlc_uframe *) frame;

	if (iframe->hdlc_0 == 0) {
		frametype = IFRAME;
		hdp->hd_iframes_in++;
	} else if (sframe->hdlc_01 == 1) {
		/* Supervisory format. */
		switch (sframe->s2) {
		case 0:
			frametype = RR;
			hdp->hd_rrs_in++;
			break;

		case 1:
			frametype = RNR;
			hdp->hd_rnrs_in++;
			break;

		case 2:
			frametype = REJ;
			hdp->hd_rejs_in++;
		}
	} else if (uframe->hdlc_11 == 3) {
		/* Unnumbered format. */
		switch (uframe->m3) {
		case 0:
			frametype = DM;
			break;

		case 1:
			frametype = SABM;
			break;

		case 2:
			frametype = DISC;
			break;

		case 3:
			frametype = UA;
			break;

		case 4:
			frametype = FRMR;
			hdp->hd_frmrs_in++;
		}
	}
	return (frametype);
}

/*
 * This routine is called when the HDLC layer internally  generates a command
 * or  response  for  the remote machine ( eg. RR, UA etc. ). Only
 * supervisory or unnumbered frames are processed.
 */

void
hd_writeinternal(hdp, frametype, pf)
	struct hdcb *hdp;
	int    frametype, pf;
{
	struct mbuf *buf;
	struct Hdlc_frame *frame;
	struct Hdlc_sframe *sframe;
	struct Hdlc_uframe *uframe;

	MGETHDR(buf, M_DONTWAIT, MT_HEADER);
	if (buf == 0)
		return;
	frame = mtod(buf, struct Hdlc_frame *);
	sframe = mtod(buf, struct Hdlc_sframe *);
	uframe = mtod(buf, struct Hdlc_uframe *);

	/* Assume a response - address structure for DTE */
	frame->address = ADDRESS_A;
	buf->m_len = 2;
	buf->m_act = buf->m_next = NULL;

	switch (frametype) {
	case RR:
		frame->control = RR_CONTROL;
		hdp->hd_rrs_out++;
		break;

	case RNR:
		frame->control = RNR_CONTROL;
		hdp->hd_rnrs_out++;
		break;

	case REJ:
		frame->control = REJ_CONTROL;
		hdp->hd_rejs_out++;
		break;

	case SABM:
		frame->control = SABM_CONTROL;
		frame->address = ADDRESS_B;
		break;

	case DISC:
		if ((hdp->hd_ifp->if_flags & IFF_UP) == 0) {
			hdp->hd_state = DISCONNECTED;
			(void) m_freem(buf);
			hd_flush(hdp->hd_ifp);
			return;
		}
		frame->control = DISC_CONTROL;
		frame->address = ADDRESS_B;
		break;

	case DM:
		frame->control = DM_CONTROL;
		break;

	case UA:
		frame->control = UA_CONTROL;
		break;

	case FRMR:
		frame->control = FRMR_CONTROL;
		bcopy((caddr_t) & hd_frmr, (caddr_t) frame->info, 3);
		buf->m_len = 5;
		hdp->hd_frmrs_out++;

	}

	if (sframe->hdlc_01 == 1) {
		/* Supervisory format - RR, REJ, or RNR. */
		sframe->nr = hdp->hd_vr;
		sframe->pf = pf;
		hdp->hd_lasttxnr = hdp->hd_vr;
		hdp->hd_rrtimer = 0;
	} else
		uframe->pf = pf;

	hd_trace(hdp, TX, frame);
	buf->m_pkthdr.len = buf->m_len;
	(*hdp->hd_output) (buf, hdp, NULL);
}

struct mbuf *
hd_remove(q)
	struct hdtxq   *q;
{
	struct mbuf *m;

	m = q->head;
	if (m) {
		if ((q->head = m->m_act) == NULL)
			q->tail = NULL;
		m->m_act = 0;
	}
	return (m);
}

void
hd_append(q, m)
	struct hdtxq *q;
	struct mbuf *m;
{

	m->m_act = NULL;
	if (q->tail == NULL)
		q->head = m;
	else
		q->tail->m_act = m;
	q->tail = m;
}

void
hd_flush(ifp)
	struct ifnet   *ifp;
{
	struct mbuf *m;
	int    s;

	while (1) {
		s = splimp();
		IF_DEQUEUE(&ifp->if_snd, m);
		splx(s);
		if (m == 0)
			break;
		m_freem(m);
	}
}

void
hd_message(hdp, msg)
	struct hdcb    *hdp;
	char           *msg;
{
	if (hdcbhead->hd_next)
		printf("HDLC(%s): %s\n", format_ntn(hdp->hd_xcp), msg);
	else
		printf("HDLC: %s\n", msg);
}

#ifdef HDLCDEBUG
void
hd_status(hdp)
	struct hdcb    *hdp;
{
	printf("HDLC STATUS:\n V(S)=%d, V(R)=%d, retxqi=%d,\n",
	       hdp->hd_vs, hdp->hd_vr, hdp->hd_retxqi);

	printf("Last_rx_nr=%d, Last_tx_nr=%d,\n Condition=%d, Xx=%d\n",
	 hdp->hd_lastrxnr, hdp->hd_lasttxnr, hdp->hd_condition, hdp->hd_xx);
}
#endif
@


1.4
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_subr.c,v 1.3 2003/06/02 23:28:13 millert Exp $	*/
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_subr.c,v 1.2 1996/03/04 07:36:25 niklas Exp $	*/
d72 3
a74 3
	register struct x25config *xcp = (struct x25config *) addr;
	register struct hdcb *hdp;
	register struct ifaddr *ifa;
d154 1
a154 1
	register struct hdcb *hdp;
d156 2
a157 2
	register struct mbuf *m;
	register int    i;
d181 1
a181 1
	register struct hdcb *hdp;
d184 4
a187 4
	register int    frametype = ILLEGAL;
	register struct Hdlc_iframe *iframe = (struct Hdlc_iframe *) frame;
	register struct Hdlc_sframe *sframe = (struct Hdlc_sframe *) frame;
	register struct Hdlc_uframe *uframe = (struct Hdlc_uframe *) frame;
d244 2
a245 2
	register struct hdcb *hdp;
	register int    frametype, pf;
d247 1
a247 1
	register struct mbuf *buf;
d249 2
a250 2
	register struct Hdlc_sframe *sframe;
	register struct Hdlc_uframe *uframe;
d330 1
a330 1
	register struct mbuf *m;
d343 2
a344 2
	register struct hdtxq *q;
	register struct mbuf *m;
d359 2
a360 2
	register struct mbuf *m;
	register int    s;
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2.16.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_subr.c,v 1.2 1996/03/04 07:36:25 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2.16.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d72 3
a74 3
	struct x25config *xcp = (struct x25config *) addr;
	struct hdcb *hdp;
	struct ifaddr *ifa;
d154 1
a154 1
	struct hdcb *hdp;
d156 2
a157 2
	struct mbuf *m;
	int    i;
d181 1
a181 1
	struct hdcb *hdp;
d184 4
a187 4
	int    frametype = ILLEGAL;
	struct Hdlc_iframe *iframe = (struct Hdlc_iframe *) frame;
	struct Hdlc_sframe *sframe = (struct Hdlc_sframe *) frame;
	struct Hdlc_uframe *uframe = (struct Hdlc_uframe *) frame;
d244 2
a245 2
	struct hdcb *hdp;
	int    frametype, pf;
d247 1
a247 1
	struct mbuf *buf;
d249 2
a250 2
	struct Hdlc_sframe *sframe;
	struct Hdlc_uframe *uframe;
d330 1
a330 1
	struct mbuf *m;
d343 2
a344 2
	struct hdtxq *q;
	struct mbuf *m;
d359 2
a360 2
	struct mbuf *m;
	int    s;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: hd_subr.c,v 1.5 1994/06/29 06:37:13 cgd Exp $	*/
d61 1
d63 2
a64 1
hd_init ()
d70 5
a74 2
hd_ctlinput (prc, addr)
struct sockaddr *addr;
d76 1
a76 1
	register struct x25config *xcp = (struct x25config *)addr;
d79 1
a79 2
	struct ifnet *ifp;
	caddr_t pk_newlink();
d82 1
a82 1
		return (EAFNOSUPPORT);
d84 1
a84 1
		return (EPROTONOSUPPORT);
d88 1
a88 1
		panic ("hd_ctlinput");
a93 1
		int error, hd_ifoutput(), hd_output();
d96 1
a96 1
		MALLOC(hdp, struct hdcb *, sizeof (*hdp), M_PCB, M_DONTWAIT);
d98 2
a99 2
			return (ENOBUFS);
		bzero((caddr_t)hdp, sizeof(*hdp));
d101 3
a103 3
			(caddr_t) pk_newlink ((struct x25_ifaddr *) ifa, 
					      (caddr_t) hdp);
		((struct x25_ifaddr *)ifa)->ia_pkcb = 
d105 1
a105 1
		if (hdp -> hd_pkp == 0) {
d107 1
a107 1
			return (ENOBUFS);
d116 1
a116 1
	} else if (hdp->hd_pkp == 0) { /* interface got reconfigured */
d118 3
a120 3
			(caddr_t) pk_newlink ((struct x25_ifaddr *) ifa, 
					      (caddr_t) hdp);
		((struct x25_ifaddr *)ifa)->ia_pkcb = 
d122 1
a122 1
		if (hdp -> hd_pkp == 0) {
d124 1
a124 1
			return (ENOBUFS);
a126 1

d130 2
a131 2
			xcp->xc_lwsize > MAX_WINDOW_SIZE)
				xcp->xc_lwsize = MAX_WINDOW_SIZE;
d133 1
a133 1
			SET_TIMER (hdp);
d138 3
a140 2
			hd_message (hdp, "Operator shutdown: link closed");
		(void) pk_ctlinput (PRC_LINKDOWN, hdp->hd_pkp);
d147 1
a147 1
		((struct x25_ifaddr *)ifa)->ia_pkcb = (struct pkcb *) 0;
d149 1
a149 1
		hd_writeinternal (hdp, DISC, POLLON);
d151 1
a151 1
		SET_TIMER (hdp);
d153 1
a153 1
	return (0);
d156 3
a158 2
hd_initvars (hdp)
register struct hdcb *hdp;
d161 1
a161 1
	register int i;
d164 2
a165 2
	while ((m = hd_remove (&hdp->hd_txq)) != NULL)
		m_freem (m);
d170 1
a170 1
		m_freem (hdp->hd_retxq[i]);
d183 4
a186 3
hd_decode (hdp, frame)
register struct hdcb *hdp;
struct Hdlc_frame *frame;
d188 1
a188 1
	register int frametype = ILLEGAL;
d193 1
a193 1
	if (iframe -> hdlc_0 == 0) {
d196 1
a196 3
	}

	else if (sframe -> hdlc_01 == 1) {
d198 2
a199 2
		switch (sframe -> s2) {
		case 0: 
d204 1
a204 1
		case 1: 
d209 1
a209 1
		case 2: 
d213 1
a213 2
	}
	else if (uframe -> hdlc_11 == 3) {
d215 2
a216 2
		switch (uframe -> m3) {
		case 0: 
d220 1
a220 1
		case 1: 
d224 1
a224 1
		case 2: 
d228 1
a228 1
		case 3: 
d232 1
a232 1
		case 4: 
d240 4
a243 4
/* 
 *  This routine is called when the HDLC layer internally  generates a
 *  command or  response  for  the remote machine ( eg. RR, UA etc. ). 
 *  Only supervisory or unnumbered frames are processed.
d246 4
a249 3
hd_writeinternal (hdp, frametype, pf)
register struct hdcb *hdp;
register int frametype, pf;
d256 1
a256 1
	MGETHDR (buf, M_DONTWAIT, MT_HEADER);
d259 3
a261 3
	frame = mtod (buf, struct Hdlc_frame *);
	sframe = mtod (buf, struct Hdlc_sframe *);
	uframe = mtod (buf, struct Hdlc_uframe *);
d264 3
a266 3
	frame -> address = ADDRESS_A;
	buf -> m_len = 2;
	buf -> m_act = buf -> m_next = NULL;
d269 2
a270 2
	case RR: 
		frame -> control = RR_CONTROL;
d274 2
a275 2
	case RNR: 
		frame -> control = RNR_CONTROL;
d279 2
a280 2
	case REJ: 
		frame -> control = REJ_CONTROL;
d284 3
a286 3
	case SABM: 
		frame -> control = SABM_CONTROL;
		frame -> address = ADDRESS_B;
d289 1
a289 1
	case DISC: 
d292 2
a293 2
			(void) m_freem (buf);
			hd_flush (hdp->hd_ifp);
d296 2
a297 2
		frame -> control = DISC_CONTROL;
		frame -> address = ADDRESS_B;
d300 2
a301 2
	case DM: 
		frame -> control = DM_CONTROL;
d304 2
a305 2
	case UA: 
		frame -> control = UA_CONTROL;
d308 4
a311 4
	case FRMR: 
		frame -> control = FRMR_CONTROL;
		bcopy ((caddr_t)&hd_frmr, (caddr_t)frame -> info, 3);
		buf -> m_len = 5;
d316 1
a316 1
	if (sframe -> hdlc_01 == 1) {
d318 2
a319 2
		sframe -> nr = hdp->hd_vr;
		sframe -> pf = pf;
d322 2
a323 3
	}
	else
		uframe -> pf = pf;
d325 3
a327 3
	hd_trace (hdp, TX, frame);
	buf -> m_pkthdr.len = buf -> m_len;
	(*hdp->hd_output) (hdp, buf);
d331 2
a332 2
hd_remove (q)
struct hdtxq *q;
d336 1
a336 1
	m = q -> head;
d338 3
a340 3
		if ((q -> head = m -> m_act) == NULL)
			q -> tail = NULL;
		m -> m_act = 0;
d345 4
a348 3
hd_append (q, m)
register struct hdtxq *q;
register struct mbuf *m;
d351 3
a353 3
	m -> m_act = NULL;
	if (q -> tail == NULL)
		q -> head = m;
d355 2
a356 2
		q -> tail -> m_act = m;
	q -> tail = m;
d359 3
a361 2
hd_flush (ifp)
struct ifnet *ifp;
d364 1
a364 1
	register int s;
d367 3
a369 3
		s = splimp ();
		IF_DEQUEUE (&ifp->if_snd, m);
		splx (s);
d372 1
a372 1
		m_freem (m);
d376 4
a379 3
hd_message (hdp, msg)
struct hdcb *hdp;
char *msg;
d381 2
a382 4
	char *format_ntn ();

	if (hdcbhead -> hd_next)
		printf ("HDLC(%s): %s\n", format_ntn (hdp->hd_xcp), msg);
d384 1
a384 1
		printf ("HDLC: %s\n", msg);
d388 3
a390 2
hd_status (hdp)
struct hdcb *hdp;
d392 2
a393 2
	printf ("HDLC STATUS:\n V(S)=%d, V(R)=%d, retxqi=%d,\n",
		hdp->hd_vs, hdp->hd_vr, hdp->hd_retxqi);
d395 2
a396 2
	printf ("Last_rx_nr=%d, Last_tx_nr=%d,\n Condition=%d, Xx=%d\n",
		hdp->hd_lastrxnr, hdp->hd_lasttxnr, hdp->hd_condition, hdp->hd_xx);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
