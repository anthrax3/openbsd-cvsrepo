head	1.9;
access;
symbols
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	SMP_SYNC_A:1.8
	SMP_SYNC_B:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	UBC_SYNC_A:1.6
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	UBC_SYNC_B:1.6
	UBC:1.5.0.4
	UBC_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2005.06.16.17.37.55;	author henning;	state dead;
branches;
next	1.8;

1.8
date	2003.12.10.07.22.43;	author itojun;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.02.23.28.13;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.03.14.01.27.10;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.16.12.53.35;	author ho;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2001.01.19.06.37.37;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	96.04.19.16.10.09;	author niklas;	state Exp;
branches
	1.3.16.1;
next	1.2;

1.2
date	96.03.04.07.36.42;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.09;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2001.05.14.22.40.06;	author niklas;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2001.07.04.10.54.25;	author niklas;	state Exp;
branches;
next	1.3.16.3;

1.3.16.3
date	2002.03.28.14.57.37;	author niklas;	state Exp;
branches;
next	1.3.16.4;

1.3.16.4
date	2003.06.07.11.06.07;	author ho;	state Exp;
branches;
next	1.3.16.5;

1.3.16.5
date	2004.02.19.10.57.23;	author niklas;	state Exp;
branches;
next	;

1.5.4.1
date	2002.06.11.03.31.36;	author art;	state Exp;
branches;
next	;


desc
@@


1.9
log
@remove remaining netccitt parts, full ports build test by pval, thanks!
@
text
@/*	$OpenBSD: pk_llcsubr.c,v 1.8 2003/12/10 07:22:43 itojun Exp $	*/
/*	$NetBSD: pk_llcsubr.c,v 1.4 1996/02/13 22:05:26 christos Exp $	*/

/* 
 * Copyright (C) Dirk Husemann, Computer Science Department IV, 
 * 		 University of Erlangen-Nuremberg, Germany, 1990, 1991, 1992
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 * 
 * This code is derived from software contributed to Berkeley by
 * Dirk Husemann and the Computer Science Department (IV) of
 * the University of Erlangen-Nuremberg, Germany.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)pk_llcsubr.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/domain.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/protosw.h>
#include <sys/errno.h>
#include <sys/time.h>
#include <sys/kernel.h>

#include <net/if.h>
#include <net/if_dl.h>
#include <net/if_llc.h>
#include <net/if_types.h>
#include <net/route.h>

#include <netccitt/dll.h>
#include <netccitt/x25.h>
#include <netccitt/pk.h>
#include <netccitt/pk_var.h>
#include <netccitt/pk_extern.h>
#include <netccitt/llc_var.h>


/*
 * Routing support for X.25
 *
 * We distinguish between two cases:
 * RTF_HOST:
 * 	rt_key(rt)	X.25 address of host
 *	rt_gateway	SNPA (MAC+DLSAP) address of host
 *	rt_llinfo	pkcb for rt_key(rt)
 *
 * RTF_GATEWAY
 *	rt_key(rt)	X.25 address of host or suitably masked network
 *	rt_gateway	X.25 address of next X.25 gateway (switch)
 *	rt_llinfo	rtentry for rt_gateway address
 *			ought to be of type RTF_HOST
 *
 *
 * Mapping of X.121 to pkcbs:
 *
 * HDLC uses the DTE-DCE model of X.25, therefore we need a many-to-one
 * relationship, i.e.:
 *
 * 	{X.121_a, X.121_b, X.121_c, ..., X.121_i} -> pkcb_0
 *
 * LLC2 utilizes the DTE-DTE model of X.25, resulting effectively in a
 * one-to-one relationship, i.e.:
 *
 *	{X.121_j} 	->	pkcb_1a
 *	{X.121_k}	->	pkcb_1b
 *	...
 *	{X.121_q}	->	pkcb_1q
 *
 * It might make sense to allow a many-to-one relation for LLC2 also,
 *
 *	{X.121_r, X.121_s, X.121_t, X.121_u} -> pkcb_2a
 *
 * This would make addresses X.121_[r-u] essentially aliases of one
 * address ({X.121_[r-u]} would constitute a representative set).
 *
 * Each one-to-one relation must obviously be entered individually with
 * a route add command, whereas a many-to-one relationship can be
 * either entered individually or generated by using a netmask.
 *
 * To facilitate dealings the many-to-one case for LLC2 can only be
 * established via a netmask.
 *
 */

#define XTRACTPKP(rt)	((rt)->rt_flags & RTF_GATEWAY ? \
			 ((rt)->rt_llinfo ? \
			  (struct pkcb *) ((struct rtentry *)((rt)->rt_llinfo))->rt_llinfo : \
			  (struct pkcb *) NULL) : \
			 (struct pkcb *)((rt)->rt_llinfo))

#define equal(a1, a2) (bcmp((caddr_t)(a1), \
			       (caddr_t)(a2), \
			       (a1)->sa_len) == 0)
#define XIFA(rt) ((struct x25_ifaddr *)((rt)->rt_ifa))
#define SA(s) ((struct sockaddr *)s)

static int cons_rtrequest_internal(int, struct rtentry *,
    struct rt_addrinfo *);

/* 
 * ifa_rtrequest currently does not check the error from the rtrequest call
 * so we use a void version of the cons_rtrequest routine.
 */
void
cons_rtrequest(cmd, rt, info)
        int             cmd;
        struct rtentry *rt;
        struct rt_addrinfo *info;
{
        cons_rtrequest_internal(cmd, rt, info);
}


static int
cons_rtrequest_internal(cmd, rt, info)
	int             cmd;
	struct rtentry *rt;
	struct rt_addrinfo *info;
{
	struct pkcb *pkp;
	char   one_to_one;

	pkp = XTRACTPKP(rt);

	switch (cmd) {
	case RTM_RESOLVE:
	case RTM_ADD:
		if (pkp)
			return (EEXIST);

		if (rt->rt_flags & RTF_GATEWAY) {
			if (rt->rt_llinfo)
				RTFREE((struct rtentry *) rt->rt_llinfo);
			rt->rt_llinfo = (caddr_t) rtalloc1(rt->rt_gateway, 1);
			return (0);
		}
		/*
		 * Assumptions:	(1) ifnet structure is filled in
		 *		(2) at least the pkcb created via
		 *		    x25config (ifconfig?) has been
		 *		    set up already.
		 *		(3) HDLC interfaces have an if_type of
		 *		    IFT_X25{,DDN}, LLC2 interfaces
		 *		    anything else (any better way to
		 *		    do this?)
		 *
		 */
		if (!rt->rt_ifa)
			return (ENETDOWN);

		/*
		 * We differentiate between dealing with a many-to-one (HDLC:
		 * DTE-DCE) and a one-to-one (LLC2: DTE-DTE) relationship (by
		 * looking at the if type).
		 * 
		 * Only in case of the many-to-one relationship (HDLC) we set
		 * the ia->ia_pkcb pointer to the pkcb allocated via
		 * pk_newlink() as we will use just that one pkcb for future
		 * route additions (the rtentry->rt_llinfo pointer points to
		 * the pkcb allocated for that route).
		 * 
		 * In case of the one-to-one relationship (LLC2) we create a new
		 * pkcb (via pk_newlink()) for each new rtentry.
		 * 
		 * NOTE: Only in case of HDLC does ia->ia_pkcb point to a pkcb,
		 * in the LLC2 case it doesn't (as we don't need it here)!
		 */
		one_to_one = ISISO8802(rt->rt_ifp);

		if (!(pkp = XIFA(rt)->ia_pkcb) && !one_to_one)
			XIFA(rt)->ia_pkcb = pkp =
				pk_newlink(XIFA(rt), (caddr_t) 0);
		else if (one_to_one &&
			 !equal(rt->rt_gateway, rt->rt_ifa->ifa_addr)) {
			pkp = pk_newlink(XIFA(rt), (caddr_t) 0);
			/*
			 * We also need another route entry for mapping
			 * MAC+LSAP->X.25 address
			 */
			pkp->pk_llrt = npaidb_enter((struct sockaddr_dl *)
						    rt->rt_gateway, rt_key(rt),
						    rt, 0);
		}
		if (pkp) {
			if (!pkp->pk_rt)
				pkp->pk_rt = rt;
			pkp->pk_refcount++;
		}
		rt->rt_llinfo = (caddr_t) pkp;

		return (0);

	case RTM_DELETE:
		{
			/*
			 * The pkp might be empty if we are dealing
			 * with an interface route entry for LLC2, in this
			 * case we don't need to do anything ...
			 */
			if (pkp) {
				if (rt->rt_flags & RTF_GATEWAY) {
					if (rt->rt_llinfo)
						RTFREE((struct rtentry *) rt->rt_llinfo);
					return (0);
				}
				if (pkp->pk_llrt)
					npaidb_destroy(pkp->pk_llrt);

				pk_dellink(pkp);

				return (0);
			}
		}
	}
	return 0;
}

/*
 * Network Protocol Addressing Information DataBase (npaidb)
 *
 * To speed up locating the entity dealing with an LLC packet use is made
 * of a routing tree. This npaidb routing tree is handled
 * by the normal rn_*() routines just like (almost) any other routing tree.
 *
 * The mapping being done by the npaidb_*() routines is as follows:
 *
 *     Key:       MAC,LSAP (enhancing struct sockaddr_dl)
 *     Gateway:   sockaddr_x25 (i.e. X.25 address - X.121 or NSAP)
 *     Llinfo:    npaidbentry {
 *                         struct llc_linkcb *npaidb_linkp;
 *                         struct rtentry *npaidb_rt;
 *                }
 *
 * Using the npaidbentry provided by llinfo we can then access
 *
 *       o the pkcb by using (struct pkcb *) (npaidb_rt->rt_llinfo)
 *       o the linkcb via npaidb_linkp
 *
 * The following functions are provided
 *
 *       o npaidb_enter(struct sockaddr_dl *sdl, struct sockaddr_x25 *sx25,
 *                      struct struct llc_linkcb *link, struct rtentry *rt)
 *
 *       o npaidb_enrich(short type, caddr_t info)
 *
 */

struct sockaddr_dl npdl_netmask = {
	sizeof(struct sockaddr_dl),	/* _len */
	0,			/* _family */
	0,			/* _index */
	0,			/* _type */
	-1,			/* _nlen */
	-1,			/* _alen */
	-1,			/* _slen */
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},	/* _data */
};
struct sockaddr npdl_dummy;

int             npdl_datasize = sizeof(struct sockaddr_dl) -
((int) ((caddr_t) & ((struct sockaddr_dl *) 0)->sdl_data[0]));

struct rtentry *
npaidb_enter(key, value, rt, link)
	struct sockaddr_dl *key;
	struct sockaddr *value;
	struct rtentry *rt;
	struct llc_linkcb *link;
{
	struct rtentry *nprt;
	int    i;

	USES_AF_LINK_RTS;

	if ((nprt = rtalloc1(SA(key), 0)) == 0) {
		u_int  size = sizeof(struct npaidbentry);
		u_char saploc = LLSAPLOC(key, rt->rt_ifp);

		/*
		 * set up netmask: LLC2 packets have the lowest bit set in
		 * response packets (e.g. 0x7e for command packets, 0x7f for
		 * response packets), to facilitate the lookup we use a
		 * netmask of 11111110 for the SAP position. The remaining
		 * positions are zeroed out.
		 */
		npdl_netmask.sdl_data[saploc] = NPDL_SAPNETMASK;
		bzero((caddr_t) & npdl_netmask.sdl_data[saploc + 1],
		      npdl_datasize - saploc - 1);

		if (value == 0)
			value = &npdl_dummy;

		/* now enter it */
		rtrequest(RTM_ADD, SA(key), SA(value),
			  SA(&npdl_netmask), 0, &nprt);

		/* and reset npdl_netmask */
		for (i = saploc; i < npdl_datasize; i++)
			npdl_netmask.sdl_data[i] = -1;

		nprt->rt_llinfo = malloc(size, M_PCB, M_WAITOK);
		bzero(nprt->rt_llinfo, size);
		((struct npaidbentry *) (nprt->rt_llinfo))->np_rt = rt;
	} else
		nprt->rt_refcnt--;
	return nprt;
}

struct rtentry *
npaidb_enrich(type, info, sdl)
	short           type;
	caddr_t         info;
	struct sockaddr_dl *sdl;
{
	struct rtentry *rt;

	USES_AF_LINK_RTS;

	if ((rt = rtalloc1((struct sockaddr *) sdl, 0)) != NULL) {
		rt->rt_refcnt--;
		switch (type) {
		case NPAIDB_LINK:
			((struct npaidbentry *) (rt->rt_llinfo))->np_link =
				(struct llc_linkcb *) info;
			break;
		}
		return rt;
	}
	return ((struct rtentry *) 0);

}

int
npaidb_destroy(rt)
	struct rtentry *rt;
{
	USES_AF_LINK_RTS;

	if (rt->rt_llinfo)
		free((caddr_t) rt->rt_llinfo, M_PCB);
	return (rtrequest(RTM_DELETE, rt_key(rt), rt->rt_gateway, rt_mask(rt),
			  0, 0));
}


#ifdef LLC
/*
 * Glue between X.25 and LLC2
 */
long
x25_llcglue(prc, addr)
	int             prc;
	struct sockaddr *addr;
{
	struct x25_ifaddr *x25ifa;
	struct dll_ctlinfo ctlinfo;

	if ((x25ifa = (struct x25_ifaddr *) ifa_ifwithaddr(addr)) == 0)
		return 0;

	ctlinfo.dlcti_cfg =
		(struct dllconfig *) (((struct sockaddr_x25 *) (&x25ifa->ia_xc)) + 1);
	ctlinfo.dlcti_lsap = LLC_X25_LSAP;

	return ((long) llc_ctlinput(prc, addr, &ctlinfo));
}
#endif				/* LLC */
@


1.8
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_llcsubr.c,v 1.7 2003/06/02 23:28:13 millert Exp $	*/
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_llcsubr.c,v 1.6 2002/03/14 01:27:10 millert Exp $	*/
d148 2
a149 2
	register struct pkcb *pkp;
	register char   one_to_one;
d299 1
a299 1
	register int    i;
d304 2
a305 2
		register u_int  size = sizeof(struct npaidbentry);
		register u_char saploc = LLSAPLOC(key, rt->rt_ifp);
d383 1
a383 1
	register struct x25_ifaddr *x25ifa;
@


1.6
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_llcsubr.c,v 1.5 2001/05/16 12:53:35 ho Exp $	*/
d22 1
a22 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@No need to check M_WAIT/M_WAITOK malloc return values. (art@@ ok)
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_llcsubr.c,v 1.4 2001/01/19 06:37:37 itojun Exp $	*/
d129 2
a130 2
static int cons_rtrequest_internal __P((int, struct rtentry *,
    struct rt_addrinfo *));
@


1.5.4.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_llcsubr.c,v 1.5 2001/05/16 12:53:35 ho Exp $	*/
d129 2
a130 2
static int cons_rtrequest_internal(int, struct rtentry *,
    struct rt_addrinfo *);
@


1.4
log
@pull post-4.4BSD change to sys/net/route.c from BSD/OS 4.2 (UCB copyrighted).

have sys/net/route.c:rtrequest1(), which takes rt_addrinfo * as the argument.
pass rt_addrinfo all the way down to rtrequest, and ifa->ifa_rtrequest.
3rd arg of ifa->ifa_rtrequest is now rt_addrinfo * instead of sockaddr *
(almost noone is using it anyways).

benefit: the follwoing command now works.  previously we need two route(8)
invocations, "add" then "change".
# route add -inet6 default ::1 -ifp gif0

remove unsafe typecast in rtrequest(), from rtentry * to sockaddr *.  it was
introduced by 4.3BSD-reno and never corrected.

XXX is eon_rtrequest() change correct regarding to 3rd arg?
eon_rtrequest() and rtrequest() were incorrect since 4.3BSD-reno,
so i do not have correct answer in the source code.
someone with more clue about netiso-over-ip, please help.
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_llcsubr.c,v 1.3 1996/04/19 16:10:09 niklas Exp $	*/
d334 2
a335 4
		if (nprt->rt_llinfo) {
			bzero(nprt->rt_llinfo, size);
			((struct npaidbentry *) (nprt->rt_llinfo))->np_rt = rt;
		}
@


1.3
log
@NetBSD 960317 merge
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_llcsubr.c,v 1.2 1996/03/04 07:36:42 niklas Exp $	*/
d130 1
a130 1
    struct sockaddr *));
d137 1
a137 1
cons_rtrequest(cmd, rt, dst)
d140 1
a140 1
        struct sockaddr *dst;
d142 1
a142 1
        cons_rtrequest_internal(cmd, rt, dst);
d147 1
a147 1
cons_rtrequest_internal(cmd, rt, dst)
d150 1
a150 1
	struct sockaddr *dst;
@


1.3.16.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_llcsubr.c,v 1.4 2001/01/19 06:37:37 itojun Exp $	*/
d130 1
a130 1
    struct rt_addrinfo *));
d137 1
a137 1
cons_rtrequest(cmd, rt, info)
d140 1
a140 1
        struct rt_addrinfo *info;
d142 1
a142 1
        cons_rtrequest_internal(cmd, rt, info);
d147 1
a147 1
cons_rtrequest_internal(cmd, rt, info)
d150 1
a150 1
	struct rt_addrinfo *info;
@


1.3.16.2
log
@Merge in -current from two days ago in the SMP branch.
As usual with merges, they do not indicate progress, so do not hold
your breath for working SMP, and do not mail me and ask about the
state of it.  It has not changed.  There is work ongoing, but very, very
slowly.  The commit is done in parts as to not lock up the tree in too
big chunks at a time.
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_llcsubr.c,v 1.3.16.1 2001/05/14 22:40:06 niklas Exp $	*/
d334 4
a337 2
		bzero(nprt->rt_llinfo, size);
		((struct npaidbentry *) (nprt->rt_llinfo))->np_rt = rt;
@


1.3.16.3
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d129 2
a130 2
static int cons_rtrequest_internal(int, struct rtentry *,
    struct rt_addrinfo *);
@


1.3.16.4
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_llcsubr.c,v 1.3.16.3 2002/03/28 14:57:37 niklas Exp $	*/
d22 5
a26 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3.16.5
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d148 2
a149 2
	struct pkcb *pkp;
	char   one_to_one;
d299 1
a299 1
	int    i;
d304 2
a305 2
		u_int  size = sizeof(struct npaidbentry);
		u_char saploc = LLSAPLOC(key, rt->rt_ifp);
d383 1
a383 1
	struct x25_ifaddr *x25ifa;
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d129 8
a136 1
int
d138 10
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: pk_llcsubr.c,v 1.3 1995/03/08 02:14:01 cgd Exp $	*/
d66 1
d90 1
a90 1
 *	
d100 1
a100 1
 * 
d102 1
a102 1
 * 
d109 1
a109 1
 * a route add command, whereas a many-to-one relationship can be 
d111 1
a111 1
 * 
d130 4
a133 1
cons_rtrequest(int cmd, struct rtentry *rt, struct sockaddr *dst)
d136 1
a136 4
	register int i;
	register char one_to_one;
	struct pkcb *pk_newlink();
	struct rtentry *npaidb_enter();
d140 1
a140 1
	switch(cmd) {
d143 2
a144 2
		if (pkp) 
			return(EEXIST);
d148 1
a148 1
				RTFREE((struct rtentry *)rt->rt_llinfo);
d150 1
a150 1
			return(0);
d154 2
a155 2
		 *		(2) at least the pkcb created via 
		 *		    x25config (ifconfig?) has been 
d157 3
a159 3
		 *		(3) HDLC interfaces have an if_type of 
		 *		    IFT_X25{,DDN}, LLC2 interfaces 
		 *		    anything else (any better way to 
d165 14
a178 14
	
		/*	
		 * We differentiate between dealing with a many-to-one
		 * (HDLC: DTE-DCE) and a one-to-one (LLC2: DTE-DTE) 
		 * relationship (by looking at the if type).
		 *
		 * Only in case of the many-to-one relationship (HDLC)
		 * we set the ia->ia_pkcb pointer to the pkcb allocated
		 * via pk_newlink() as we will use just that one pkcb for
		 * future route additions (the rtentry->rt_llinfo pointer
		 * points to the pkcb allocated for that route).
		 *
		 * In case of the one-to-one relationship (LLC2) we 
		 * create a new pkcb (via pk_newlink()) for each new rtentry.
d180 2
a181 3
		 * NOTE: Only in case of HDLC does ia->ia_pkcb point
		 * to a pkcb, in the LLC2 case it doesn't (as we don't 
		 * need it here)!
d185 2
a186 2
		if (!(pkp = XIFA(rt)->ia_pkcb) && !one_to_one) 
			XIFA(rt)->ia_pkcb = pkp = 
d188 1
a188 1
		else if (one_to_one && 
d195 3
a197 1
			pkp->pk_llrt = npaidb_enter(rt->rt_gateway, rt_key(rt), rt, 0);
d206 1
a206 1
		return(0);
d209 18
a226 11
	{
		/*
		 * The pkp might be empty if we are dealing
		 * with an interface route entry for LLC2, in this 
		 * case we don't need to do anything ...
		 */
		if (pkp) {
			if ( rt->rt_flags & RTF_GATEWAY ) {
				if (rt->rt_llinfo)
					RTFREE((struct rtentry *)rt->rt_llinfo);
				return(0);
a227 7
			
			if (pkp->pk_llrt)
				npaidb_destroy(pkp->pk_llrt);

			pk_dellink (pkp);
			
			return(0);
d230 1
a230 1
	}
d234 17
a250 17
 * Network Protocol Addressing Information DataBase (npaidb) 
 * 
 * To speed up locating the entity dealing with an LLC packet use is made 
 * of a routing tree. This npaidb routing tree is handled 
 * by the normal rn_*() routines just like (almost) any other routing tree. 
 * 
 * The mapping being done by the npaidb_*() routines is as follows: 
 * 
 *     Key:       MAC,LSAP (enhancing struct sockaddr_dl) 
 *     Gateway:   sockaddr_x25 (i.e. X.25 address - X.121 or NSAP) 
 *     Llinfo:    npaidbentry { 
 *                         struct llc_linkcb *npaidb_linkp; 
 *                         struct rtentry *npaidb_rt; 
 *                } 
 * 
 * Using the npaidbentry provided by llinfo we can then access 
 * 
d252 9
a260 9
 *       o the linkcb via npaidb_linkp 
 * 
 * The following functions are provided 
 * 
 *       o npaidb_enter(struct sockaddr_dl *sdl, struct sockaddr_x25 *sx25, 
 *                      struct struct llc_linkcb *link, struct rtentry *rt) 
 * 
 *       o npaidb_enrich(short type, caddr_t info) 
 * 
d264 9
a272 9
 sizeof(struct sockaddr_dl),					/* _len */
 0,								/* _family */
 0,								/* _index */
 0,								/* _type */
 -1,								/* _nlen */
 -1,								/* _alen */
 -1,								/* _slen */
 { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},		/* _data */
}; 
d275 2
a276 2
int npdl_datasize = sizeof(struct sockaddr_dl)-
		((int)((caddr_t)&((struct sockaddr_dl *)0)->sdl_data[0]));
d279 5
a283 2
npaidb_enter(struct sockaddr_dl *key, struct sockaddr *value,
	     struct rtentry *rt, struct llc_linkcb *link)
d285 2
a286 1
	struct rtentry *nprt; register int i;
d291 1
a291 1
		register u_int size = sizeof(struct npaidbentry);
d294 1
a294 1
		/* 
d297 3
a299 3
		 * response packets), to facilitate the lookup we use a netmask
		 * of 11111110 for the SAP position. The remaining positions 
		 * are zeroed out.
d302 2
a303 2
		bzero((caddr_t)&npdl_netmask.sdl_data[saploc+1], 
		      npdl_datasize-saploc-1);
d310 1
a310 1
			SA(&npdl_netmask), 0, &nprt);
d316 1
a316 1
		nprt->rt_llinfo = malloc(size , M_PCB, M_WAITOK);
d318 1
a318 1
			bzero (nprt->rt_llinfo, size);
d321 2
a322 1
	} else nprt->rt_refcnt--;
d327 4
a330 1
npaidb_enrich(short type, caddr_t info, struct sockaddr_dl *sdl)
d336 1
a336 1
	if (rt = rtalloc1((struct sockaddr *)sdl, 0)) {
d340 1
a340 1
			((struct npaidbentry *)(rt->rt_llinfo))->np_link = 
d345 1
a345 2
	}		

d350 3
a352 1
npaidb_destroy(struct rtentry *rt)
d356 1
a356 1
	if (rt->rt_llinfo) 
d358 2
a359 2
	return(rtrequest(RTM_DELETE, rt_key(rt), rt->rt_gateway, rt_mask(rt), 
			 0, 0));
d368 3
a370 1
x25_llcglue(int prc, struct sockaddr *addr)
a371 1
	register struct sockaddr_x25 *sx25 = (struct sockaddr_x25 *)addr;
d374 2
a375 2
	
	if((x25ifa = (struct x25_ifaddr *)ifa_ifwithaddr(addr)) == 0)
d378 2
a379 2
	ctlinfo.dlcti_cfg  =
	    (struct dllconfig *)(((struct sockaddr_x25 *)(&x25ifa->ia_xc))+1);
d382 1
a382 1
	return ((long)llc_ctlinput(prc, addr, (caddr_t)&ctlinfo));
d384 1
a384 1
#endif /* LLC */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
