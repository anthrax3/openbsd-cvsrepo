head	1.6;
access;
symbols
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.4
	SMP_SYNC_B:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	UBC_SYNC_A:1.2
	OPENBSD_3_3:1.2.0.32
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.30
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.28
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.2
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2005.06.16.17.37.54;	author henning;	state dead;
branches;
next	1.5;

1.5
date	2004.06.24.19.35.25;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.10.07.22.42;	author itojun;	state Exp;
branches;
next	1.3;

1.3
date	2003.06.02.23.28.13;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.07.36.21;	author niklas;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	95.10.18.08.53.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.08;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2003.06.07.11.06.07;	author ho;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2004.02.19.10.57.23;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove remaining netccitt parts, full ports build test by pval, thanks!
@
text
@/*	$OpenBSD: hd_debug.c,v 1.5 2004/06/24 19:35:25 tholo Exp $	*/
/*	$NetBSD: hd_debug.c,v 1.6 1996/02/13 22:04:25 christos Exp $	*/

/*
 * Copyright (c) University of British Columbia, 1984
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Laboratory for Computation Vision and the Computer Science Department
 * of the University of British Columbia.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)hd_debug.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/domain.h>
#include <sys/socket.h>
#include <sys/protosw.h>
#include <sys/errno.h>
#include <sys/time.h>
#include <sys/kernel.h>

#include <net/if.h>

#include <netccitt/hdlc.h>
#include <netccitt/hd_var.h>
#include <netccitt/x25.h>

#ifdef HDLCDEBUG
#define NTRACE		32

struct hdlctrace {
	struct hdcb    *ht_hdp;
	short           ht_dir;
	struct mbuf    *ht_frame;
	struct timeval  ht_time;
}               hdtrace[NTRACE];

int             lasttracelogged, freezetrace;
#endif

void
hd_trace(hdp, direction, frame)
	struct hdcb    *hdp;
	int direction;
	struct Hdlc_frame *frame;
{
	char  *s;
	int    nr, pf, ns, i;
	struct Hdlc_iframe *iframe = (struct Hdlc_iframe *) frame;

#ifdef HDLCDEBUG
	hd_savetrace(hdp, direction, frame);
#endif
	if (hdp->hd_xcp->xc_ltrace) {
		if (direction == RX)
			printf("F-In:  ");
		else if (direction == 2)
			printf("F-Xmt: ");
		else
			printf("F-Out:   ");

		nr = iframe->nr;
		pf = iframe->pf;
		ns = iframe->ns;

		switch (hd_decode(hdp, frame)) {
		case SABM:
			printf("SABM   : PF=%d\n", pf);
			break;

		case DISC:
			printf("DISC   : PF=%d\n", pf);
			break;

		case DM:
			printf("DM     : PF=%d\n", pf);
			break;

		case FRMR:
			{
				struct Frmr_frame *f = (struct Frmr_frame *) frame;

				printf("FRMR   : PF=%d, TEXT=", pf);
				for (s = (char *) frame, i = 0; i < 5; ++i, ++s)
					printf("%x ", (int) *s & 0xff);
				printf("\n");
				printf("control=%x v(s)=%d v(r)=%d w%d x%d y%d z%d\n",
				    f->frmr_control, f->frmr_ns, f->frmr_nr,
				f->frmr_w, f->frmr_x, f->frmr_y, f->frmr_z);
				break;
			}

		case UA:
			printf("UA     : PF=%d\n", pf);
			break;

		case RR:
			printf("RR     : N(R)=%d, PF=%d\n", nr, pf);
			break;

		case RNR:
			printf("RNR    : N(R)=%d, PF=%d\n", nr, pf);
			break;

		case REJ:
			printf("REJ    : N(R)=%d, PF=%d\n", nr, pf);
			break;

		case IFRAME:
			{
				struct mbuf *m;
				int    len = 0;

				for (m = dtom(frame); m; m = m->m_next)
					len += m->m_len;
				len -= HDHEADERLN;
				printf("IFRAME : N(R)=%d, PF=%d, N(S)=%d, DATA(%d)=",
				       nr, pf, ns, len);
				for (s = (char *) iframe->i_field, i = 0; i < 3; ++i, ++s)
					printf("%x ", (int) *s & 0xff);
				printf("\n");
				break;
			}

		default:
			printf("ILLEGAL: ");
			for (s = (char *) frame, i = 0; i < 5; ++i, ++s)
				printf("%x ", (int) *s & 0xff);
			printf("\n");
		}

	}
}

#ifdef HDLCDEBUG
static void
hd_savetrace(hdp, dir, frame)
	struct hdcb    *hdp;
	int dir;
	struct Hdlc_frame *frame;
{
	struct hdlctrace *htp;
	struct mbuf *m;

	if (freezetrace)
		return;
	htp = &hdtrace[lasttracelogged];
	lasttracelogged = (lasttracelogged + 1) % NTRACE;
	if (m = htp->ht_frame)
		m_freem(m);
	m = dtom(frame);
	htp->ht_frame = m_copy(m, 0, m->m_len);
	htp->ht_hdp = hdp;
	htp->ht_dir = dir;
	getmicrotime(&htp->ht_time);
}

void
hd_dumptrace(hdp)
	struct hdcb    *hdp;
{
	int    i, ltrace;
	struct hdlctrace *htp;

	freezetrace = 1;
	hd_status(hdp);
	printf("retransmit queue:");
	for (i = 0; i < 8; i++)
		printf(" %x", hdp->hd_retxq[i]);
	printf("\n");
	ltrace = hdp->hd_xcp->xc_ltrace;
	hdp->hd_xcp->xc_ltrace = 1;
	for (i = 0; i < NTRACE; i++) {
		htp = &hdtrace[(lasttracelogged + i) % NTRACE];
		if (htp->ht_hdp != hdp || htp->ht_frame == 0)
			continue;
		printf("%d/%d	", htp->ht_time.tv_sec & 0xff,
		       htp->ht_time.tv_usec / 10000);
		hd_trace(htp->ht_hdp, htp->ht_dir,
			 mtod(htp->ht_frame, struct Hdlc_frame *));
		m_freem(htp->ht_frame);
		htp->ht_frame = 0;
	}
	hdp->hd_xcp->xc_ltrace = ltrace;
	freezetrace = 0;
}
#endif
@


1.5
log
@This moves access to wall and uptime variables in MI code,
encapsulating all such access into wall-defined functions
that makes sure locking is done as needed.

It also cleans up some uses of wall time vs. uptime some
places, but there is sure to be more of these needed as
well, particularily in MD code.  Also, many current calls
to microtime() should probably be changed to getmicrotime(),
or to the {,get}microuptime() versions.

ok art@@ deraadt@@ aaron@@ matthieu@@ beck@@ sturm@@ millert@@ others
"Oh, that is not your problem!" from miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_debug.c,v 1.4 2003/12/10 07:22:42 itojun Exp $	*/
@


1.4
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_debug.c,v 1.3 2003/06/02 23:28:13 millert Exp $	*/
d183 1
a183 1
	htp->ht_time = time;
@


1.3
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_debug.c,v 1.2 1996/03/04 07:36:21 niklas Exp $	*/
d73 1
a73 1
	register struct Hdlc_frame *frame;
d75 2
a76 2
	register char  *s;
	register int    nr, pf, ns, i;
d109 1
a109 1
				register struct Frmr_frame *f = (struct Frmr_frame *) frame;
d139 2
a140 2
				register struct mbuf *m;
				register int    len = 0;
d170 2
a171 2
	register struct hdlctrace *htp;
	register struct mbuf *m;
d190 2
a191 2
	register int    i, ltrace;
	register struct hdlctrace *htp;
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.2.16.1
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_debug.c,v 1.2 1996/03/04 07:36:21 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.2.16.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d73 1
a73 1
	struct Hdlc_frame *frame;
d75 2
a76 2
	char  *s;
	int    nr, pf, ns, i;
d109 1
a109 1
				struct Frmr_frame *f = (struct Frmr_frame *) frame;
d139 2
a140 2
				struct mbuf *m;
				int    len = 0;
d170 2
a171 2
	struct hdlctrace *htp;
	struct mbuf *m;
d190 2
a191 2
	int    i, ltrace;
	struct hdlctrace *htp;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: hd_debug.c,v 1.5 1994/06/29 06:37:05 cgd Exp $	*/
d63 6
a68 6
struct	hdlctrace {
	struct	hdcb *ht_hdp;
	short	ht_dir;
	struct	mbuf *ht_frame;
	struct	timeval ht_time;
} hdtrace[NTRACE];
d70 1
a70 1
int	lasttracelogged, freezetrace;
d73 5
a77 3
hd_trace (hdp, direction, frame)
struct hdcb *hdp;
register struct Hdlc_frame *frame;
d79 2
a80 2
	register char *s;
	register int nr, pf, ns, i;
d84 1
a84 1
	hd_savetrace (hdp, direction, frame);
d86 1
a86 1
	if (hdp -> hd_xcp -> xc_ltrace) {
d88 1
a88 1
			printf ("F-In:  ");
d90 3
a92 3
				printf ("F-Xmt: ");
			else
				printf ("F-Out:   ");
d94 3
a96 3
		nr = iframe -> nr;
		pf = iframe -> pf;
		ns = iframe -> ns;
d98 3
a100 3
		switch (hd_decode (hdp, frame)) {
		case SABM: 
			printf ("SABM   : PF=%d\n", pf);
d103 2
a104 2
		case DISC: 
			printf ("DISC   : PF=%d\n", pf);
d107 2
a108 2
		case DM: 
			printf ("DM     : PF=%d\n", pf);
d111 1
a111 1
		case FRMR: 
d113 1
a113 1
			register struct Frmr_frame *f = (struct Frmr_frame *)frame;
d115 6
a120 6
			printf ("FRMR   : PF=%d, TEXT=", pf);
			for (s = (char *) frame, i = 0; i < 5; ++i, ++s)
				printf ("%x ", (int) * s & 0xff);
			printf ("\n");
			printf ("control=%x v(s)=%d v(r)=%d w%d x%d y%d z%d\n",
				f->frmr_control, f->frmr_ns, f->frmr_nr,
d122 1
a122 1
			break;
d125 2
a126 2
		case UA: 
			printf ("UA     : PF=%d\n", pf);
d129 2
a130 2
		case RR: 
			printf ("RR     : N(R)=%d, PF=%d\n", nr, pf);
d133 2
a134 2
		case RNR: 
			printf ("RNR    : N(R)=%d, PF=%d\n", nr, pf);
d137 2
a138 2
		case REJ: 
			printf ("REJ    : N(R)=%d, PF=%d\n", nr, pf);
d141 1
a141 1
		case IFRAME: 
d143 2
a144 2
			register struct mbuf *m;
			register int len = 0;
d146 9
a154 9
			for(m = dtom (frame); m; m = m -> m_next)
				len += m -> m_len;
			len -= HDHEADERLN;
			printf ("IFRAME : N(R)=%d, PF=%d, N(S)=%d, DATA(%d)=",
				nr, pf, ns, len);
			for (s = (char *)iframe->i_field, i = 0; i < 3; ++i, ++s)
				printf ("%x ", (int) *s & 0xff);
			printf ("\n");
			break;
d157 2
a158 2
		default: 
			printf ("ILLEGAL: ");
d160 2
a161 2
				printf ("%x ", (int) *s & 0xff);
			printf ("\n");
d168 5
a172 4
static
hd_savetrace (hdp, dir, frame)
struct hdcb *hdp;
struct Hdlc_frame *frame;
d182 3
a184 3
		m_freem (m);
	m = dtom (frame);
	htp->ht_frame = m_copy (m, 0, m->m_len);
d190 3
a192 2
hd_dumptrace (hdp)
struct hdcb *hdp;
d194 1
a194 1
	register int i, ltrace;
d198 2
a199 2
	hd_status (hdp);
	printf ("retransmit queue:");
d201 4
a204 4
		printf (" %x", hdp -> hd_retxq[i]);
	printf ("\n");
	ltrace = hdp -> hd_xcp -> xc_ltrace;
	hdp -> hd_xcp -> xc_ltrace = 1;
d209 5
a213 5
		printf ("%d/%d	", htp->ht_time.tv_sec & 0xff,
			htp->ht_time.tv_usec / 10000);
		hd_trace (htp->ht_hdp, htp->ht_dir,
			mtod (htp->ht_frame, struct Hdlc_frame *));
		m_freem (htp->ht_frame);
d216 1
a216 1
	hdp -> hd_xcp -> xc_ltrace = ltrace;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
