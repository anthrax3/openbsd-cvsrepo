head	1.8;
access;
symbols
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	UBC_SYNC_B:1.4
	UBC:1.3.0.26
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.24
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.22
	OPENBSD_2_8:1.3.0.20
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	SMP:1.3.0.16
	SMP_BASE:1.3
	kame_19991208:1.3
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2005.06.16.17.37.54;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2004.01.03.14.08.53;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.10.07.22.42;	author itojun;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.02.23.28.13;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.15.18.19.52;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.05.10.12.31.15;	author deraadt;	state Exp;
branches
	1.3.16.1
	1.3.26.1;
next	1.2;

1.2
date	96.03.04.07.36.24;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.53.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.08;	author deraadt;	state Exp;
branches;
next	;

1.3.16.1
date	2002.03.28.14.57.37;	author niklas;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2003.06.07.11.06.07;	author ho;	state Exp;
branches;
next	1.3.16.3;

1.3.16.3
date	2004.02.19.10.57.23;	author niklas;	state Exp;
branches;
next	;

1.3.26.1
date	2002.06.11.03.31.36;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove remaining netccitt parts, full ports build test by pval, thanks!
@
text
@/*	$OpenBSD: hd_output.c,v 1.7 2004/01/03 14:08:53 espie Exp $	*/
/*	$NetBSD: hd_output.c,v 1.7 1996/05/07 02:36:06 thorpej Exp $	*/

/*
 * Copyright (c) University of British Columbia, 1984
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Laboratory for Computation Vision and the Computer Science Department
 * of the University of British Columbia.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)hd_output.c	8.1 (Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/domain.h>
#include <sys/socket.h>
#include <sys/syslog.h>
#include <sys/protosw.h>
#include <sys/errno.h>
#include <sys/time.h>
#include <sys/kernel.h>

#include <net/if.h>

#include <netccitt/hdlc.h>
#include <netccitt/hd_var.h>
#include <netccitt/x25.h>
#include <netccitt/pk_extern.h>

#include <sys/stdarg.h>

/*
 *      HDLC OUTPUT INTERFACE
 *
 *      This routine is called when the X.25 packet layer output routine
 *      has a information frame (iframe)  to write.   It is  also called
 *      by the input and control routines of the HDLC layer.
 */

int
hd_output(struct mbuf *m0, ...)
{
	struct hdcb *hdp;
	struct mbuf *m = m0;
	int             len;
	va_list	ap;

	va_start(ap, m0);
	hdp = va_arg(ap, struct hdcb *);
	va_end(ap);

	if (m == NULL)
		panic("hd_output");
	if ((m->m_flags & M_PKTHDR) == 0)
		panic("hd_output 2");

	if (hdp->hd_state != ABM) {
		m_freem(m);
		return 0;
	}
	/*
	 * Make room for the hdlc header either by prepending
	 * another mbuf, or by adjusting the offset and length
	 * of the first mbuf in the mbuf chain.
	 */

	M_PREPEND(m, HDHEADERLN, M_DONTWAIT);
	if (m == NULL)
		return 0;
	for (len = 0; m; m = m->m_next)
		len += m->m_len;
	m = m0;
	m->m_pkthdr.len = len;

	hd_append(&hdp->hd_txq, m);
	hd_start(hdp);
	return 0;
}

void
hd_start(hdp)
	struct hdcb *hdp;
{
	struct mbuf *m;

	/*
	 * The iframe is only transmitted if all these conditions are FALSE.
	 * The iframe remains queued (hdp->hd_txq) however and will be
	 * transmitted as soon as these conditions are cleared.
	 */

	while (!(hdp->hd_condition & (TIMER_RECOVERY_CONDITION |
				     REMOTE_RNR_CONDITION | REJ_CONDITION))) {
		if (hdp->hd_vs ==
			(hdp->hd_lastrxnr + hdp->hd_xcp->xc_lwsize) % MODULUS) {

			/*
			 * We have now exceeded the  maximum  number  of
			 * outstanding iframes. Therefore,  we must wait
			 * until  at least  one is acknowledged if this
			 * condition  is not  turned off before we are
			 * requested to write another iframe.
			 */
			hdp->hd_window_condition++;
			break;
		}
		/* hd_remove top iframe from transmit queue. */
		if ((m = hd_remove(&hdp->hd_txq)) == NULL)
			break;

		hd_send_iframe(hdp, m, POLLOFF);
	}
}

/*
 * This procedure is passed a buffer descriptor for an iframe. It builds the
 * rest of the control part of the frame and then writes it out.  It also
 * starts the  acknowledgement  timer and keeps  the iframe in the Retransmit
 * queue (Retxq) just in case  we have to do this again.
 * 
 * Note: This routine is also called from hd_input.c when retransmission of old
 * frames is required.
 */
void
hd_send_iframe(hdp, buf, poll_bit)
	struct hdcb *hdp;
	struct mbuf *buf;
	int             poll_bit;
{
	struct Hdlc_iframe *iframe;
	struct mbuf    *m;

	KILL_TIMER(hdp);

	if (buf == 0) {
		printf("hd_send_iframe: zero arg\n");
#ifdef HDLCDEBUG
		hd_status(hdp);
		hd_dumptrace(hdp);
#endif
		hdp->hd_vs = (hdp->hd_vs + 7) % MODULUS;
		return;
	}
	iframe = mtod(buf, struct Hdlc_iframe *);

	iframe->hdlc_0 = 0;
	iframe->nr = hdp->hd_vr;
	iframe->pf = poll_bit;
	iframe->ns = hdp->hd_vs;
	iframe->address = ADDRESS_B;
	hdp->hd_lasttxnr = hdp->hd_vr;
	hdp->hd_rrtimer = 0;

	if (hdp->hd_vs == hdp->hd_retxqi) {
		/* Check for retransmissions. */
		/* Put iframe only once in the Retransmission queue. */
		hdp->hd_retxq[(u_char) hdp->hd_retxqi] = buf;
		hdp->hd_retxqi = (hdp->hd_retxqi + 1) % MODULUS;
		hdp->hd_iframes_out++;
	}
	hdp->hd_vs = (hdp->hd_vs + 1) % MODULUS;

	hd_trace(hdp, TX, (struct Hdlc_frame *) iframe);

	/* Write buffer on device. */
	m = hdp->hd_dontcopy ? buf : m_copy(buf, 0, (int) M_COPYALL);
	if (m == 0) {
		printf("hdlc: out of mbufs\n");
		return;
	}
	(*hdp->hd_output) (m, hdp);
	SET_TIMER(hdp);
}

int
hd_ifoutput(struct mbuf *m, ...)
{
	struct hdcb *hdp;
	struct ifnet *ifp;
	int             s = splimp();
	va_list	ap;

	va_start(ap, m);
	hdp = va_arg(ap, struct hdcb *);
	va_end(ap);
	ifp = hdp->hd_ifp;

	/*
	 * Queue message on interface, and start output if interface
	 * not yet active.
	 */

	if (IF_QFULL(&ifp->if_snd)) {
		IF_DROP(&ifp->if_snd);
		/*
		 * printf("%s: HDLC says OK to send but queue full, may
		 * hang\n", ifp->if_xname);
		 */
		m_freem(m);
	} else {
		IF_ENQUEUE(&ifp->if_snd, m);
		if ((ifp->if_flags & IFF_OACTIVE) == 0)
			(*ifp->if_start) (ifp);
	}
	splx(s);
	return 0;
}


/*
 * This routine gets control when the timer expires because we have not
 * received an acknowledgement for a iframe.
 */

void
hd_resend_iframe(hdp)
	struct hdcb *hdp;
{

	if (hdp->hd_retxcnt++ < hd_n2) {
		if (!(hdp->hd_condition & TIMER_RECOVERY_CONDITION)) {
			hdp->hd_xx = hdp->hd_vs;
			hdp->hd_condition |= TIMER_RECOVERY_CONDITION;
		}
		hdp->hd_vs = hdp->hd_lastrxnr;
		hd_send_iframe(hdp, hdp->hd_retxq[(u_char)hdp->hd_vs], POLLON);
	} else {
		/*
		 * At this point we have not received a RR even after N2
		 * retries - attempt to reset link.
		 */

		hd_initvars(hdp);
		hd_writeinternal(hdp, SABM, POLLOFF);
		hdp->hd_state = WAIT_UA;
		SET_TIMER(hdp);
		hd_message(hdp, "Timer recovery failed: link down");
		(void) pk_ctlinput(PRC_LINKDOWN,
				   (struct sockaddr *)hdp->hd_pkp, NULL);
	}
}
@


1.7
log
@put an mi wrapper around stdarg.h/varargs.h. gcc3 moved stdarg/varargs macros
to built-ins, so eventually we will have one version of these files.
Special adjustments for the kernel to cope: machine/stdarg.h -> sys/stdarg.h
and machine/ansi.h needs to have a _BSD_VA_LIST_ for syslog* prototypes.
okay millert@@, drahn@@, miod@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_output.c,v 1.6 2003/12/10 07:22:42 itojun Exp $	*/
@


1.6
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_output.c,v 1.5 2003/06/02 23:28:13 millert Exp $	*/
d58 1
a58 1
#include <machine/stdarg.h>
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_output.c,v 1.4 2002/03/15 18:19:52 millert Exp $	*/
d71 2
a72 2
	register struct hdcb *hdp;
	register struct mbuf *m = m0;
d110 1
a110 1
	register struct hdcb *hdp;
d112 1
a112 1
	register struct mbuf *m;
d154 2
a155 2
	register struct hdcb *hdp;
	register struct mbuf *buf;
d158 1
a158 1
	register struct Hdlc_iframe *iframe;
d206 2
a207 2
	register struct hdcb *hdp;
	register struct ifnet *ifp;
d245 1
a245 1
	register struct hdcb *hdp;
@


1.4
log
@Kill #if __STDC__ used to do K&R vs. ANSI varargs/stdarg; just do things
the ANSI way.
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_output.c,v 1.3 1996/05/10 12:31:15 deraadt Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.3
log
@if_name/if_unit -> if_xname/if_softc
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a72 1
#if __STDC__
a73 5
#else
hd_output(m0, va_alist)
	struct mbuf    *m0;
	va_dcl
#endif
a207 1
#if __STDC__
a208 5
#else
hd_ifoutput(m, va_alist)
	struct mbuf *m;
	va_dcl
#endif
@


1.3.26.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_output.c,v 1.3 1996/05/10 12:31:15 deraadt Exp $	*/
d73 1
d75 5
d214 1
d216 5
@


1.3.16.1
log
@Merge in -current from roughly a week ago
@
text
@d73 1
d75 5
d214 1
d216 5
@


1.3.16.2
log
@Sync SMP branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: hd_output.c,v 1.3.16.1 2002/03/28 14:57:37 niklas Exp $	*/
d21 5
a25 1
 * 3. Neither the name of the University nor the names of its contributors
@


1.3.16.3
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d58 1
a58 1
#include <sys/stdarg.h>
d71 2
a72 2
	struct hdcb *hdp;
	struct mbuf *m = m0;
d110 1
a110 1
	struct hdcb *hdp;
d112 1
a112 1
	struct mbuf *m;
d154 2
a155 2
	struct hdcb *hdp;
	struct mbuf *buf;
d158 1
a158 1
	struct Hdlc_iframe *iframe;
d206 2
a207 2
	struct hdcb *hdp;
	struct ifnet *ifp;
d245 1
a245 1
	struct hdcb *hdp;
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d2 1
a2 1
/*	$NetBSD: hd_output.c,v 1.6 1996/02/13 22:04:29 christos Exp $	*/
d240 2
a241 2
		 * printf("%s%d: HDLC says OK to send but queue full, may
		 * hang\n", ifp->if_name, ifp->if_unit);
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: hd_output.c,v 1.5 1994/06/29 06:37:11 cgd Exp $	*/
d60 3
d68 1
a68 1
 *      has a information frame (iframe)  to write.   It is  also called 
d72 8
a79 3
hd_output (hdp, m0)
register struct hdcb *hdp;
struct mbuf *m0;
d81 1
a81 1
	struct x25config *xcp;
d83 6
a88 1
	int len;
d91 1
a91 1
		panic ("hd_output");
d93 1
a93 1
		panic ("hd_output 2");
d96 2
a97 2
		m_freem (m);
		return;
a98 1

d107 1
a107 1
		return;
d113 3
a115 2
	hd_append (&hdp->hd_txq, m);
	hd_start (hdp);
d118 3
a120 2
hd_start (hdp)
register struct hdcb *hdp;
d124 1
a124 1
	/* 
d130 12
a141 8
	while (!(hdp->hd_condition & (TIMER_RECOVERY_CONDITION | REMOTE_RNR_CONDITION | REJ_CONDITION))) {
		if (hdp->hd_vs == (hdp->hd_lastrxnr + hdp->hd_xcp->xc_lwsize) % MODULUS) {

			/* We have now exceeded the  maximum  number  of 
			   outstanding iframes. Therefore,  we must wait 
			   until  at least  one is acknowledged if this 
			   condition  is not  turned off before we are
			   requested to write another iframe. */
a144 1

d146 1
a146 1
		if ((m = hd_remove (&hdp->hd_txq)) == NULL)
d149 1
a149 1
		hd_send_iframe (hdp, m, POLLOFF);
d153 8
a160 8
/* 
 *  This procedure is passed a buffer descriptor for an iframe. It builds
 *  the rest of the control part of the frame and then writes it out.  It
 *  also  starts the  acknowledgement  timer and keeps  the iframe in the
 *  Retransmit queue (Retxq) just in case  we have to do this again.
 *
 *  Note: This routine is also called from hd_input.c when retransmission
 *       of old frames is required.
d162 5
a166 5

hd_send_iframe (hdp, buf, poll_bit)
register struct hdcb *hdp;
register struct mbuf *buf;
int poll_bit;
d169 1
a169 1
	struct mbuf *m;
d171 1
a171 1
	KILL_TIMER (hdp);
d174 1
a174 1
		printf ("hd_send_iframe: zero arg\n");
d176 2
a177 2
		hd_status (hdp);
		hd_dumptrace (hdp);
d182 1
a182 1
	iframe = mtod (buf, struct Hdlc_iframe *);
d184 5
a188 5
	iframe -> hdlc_0 = 0;
	iframe -> nr = hdp->hd_vr;
	iframe -> pf = poll_bit;
	iframe -> ns = hdp->hd_vs;
	iframe -> address = ADDRESS_B;
d195 1
a195 1
		hdp->hd_retxq[hdp->hd_retxqi] = buf;
a198 1

d201 1
a201 1
	hd_trace (hdp, TX, (struct Hdlc_frame *)iframe);
d204 1
a204 1
	m = hdp->hd_dontcopy ? buf : m_copy(buf, 0, (int)M_COPYALL);
d209 2
a210 2
	(*hdp->hd_output)(hdp, m);
	SET_TIMER (hdp);
d213 8
a220 3
hd_ifoutput(hdp, m)
register struct mbuf *m;
register struct hdcb *hdp;
d222 10
a235 2
	register struct ifnet *ifp = hdp->hd_ifp;
	int s = splimp();
d239 4
a242 2
	    /* printf("%s%d: HDLC says OK to send but queue full, may hang\n",
			ifp->if_name, ifp->if_unit);*/
d247 1
a247 1
			(*ifp->if_start)(ifp);
d250 1
d254 3
a256 3
/* 
 *  This routine gets control when the timer expires because we have not
 *  received an acknowledgement for a iframe.
d259 3
a261 2
hd_resend_iframe (hdp)
register struct hdcb *hdp;
a268 1

d270 1
a270 1
		hd_send_iframe (hdp, hdp->hd_retxq[hdp->hd_vs], POLLON);
d272 4
a275 2
		/* At this point we have not received a RR even after N2
		   retries - attempt to reset link. */
d277 2
a278 2
		hd_initvars (hdp);
		hd_writeinternal (hdp, SABM, POLLOFF);
d280 4
a283 3
		SET_TIMER (hdp);
		hd_message (hdp, "Timer recovery failed: link down");
		(void) pk_ctlinput (PRC_LINKDOWN, hdp->hd_pkp);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
