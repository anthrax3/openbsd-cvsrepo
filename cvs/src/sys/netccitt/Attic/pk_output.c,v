head	1.8;
access;
symbols
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	SMP_SYNC_A:1.7
	SMP_SYNC_B:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.2.0.28
	OPENBSD_3_1_BASE:1.2
	UBC_SYNC_B:1.5
	UBC:1.2.0.26
	UBC_BASE:1.2
	OPENBSD_3_0:1.2.0.24
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_9:1.2.0.22
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2005.06.16.17.37.55;	author henning;	state dead;
branches;
next	1.7;

1.7
date	2003.12.10.07.22.43;	author itojun;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.12.01.07.27;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.08.19.18.12;	author provos;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.08.18.26.37;	author todd;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.08.17.07.32;	author provos;	state Exp;
branches;
next	1.2;

1.2
date	96.03.04.07.36.43;	author niklas;	state Exp;
branches
	1.2.16.1
	1.2.26.1;
next	1.1;

1.1
date	95.10.18.08.53.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.53.09;	author deraadt;	state Exp;
branches;
next	;

1.2.16.1
date	2003.03.28.00.06.55;	author niklas;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2004.02.19.10.57.23;	author niklas;	state Exp;
branches;
next	;

1.2.26.1
date	2002.10.29.00.36.46;	author art;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove remaining netccitt parts, full ports build test by pval, thanks!
@
text
@/*	$OpenBSD: pk_output.c,v 1.7 2003/12/10 07:22:43 itojun Exp $	*/
/*	$NetBSD: pk_output.c,v 1.7 1996/02/13 22:05:30 christos Exp $	*/

/*
 * Copyright(c) University of British Columbia, 1984
 * Copyright(C) Computer Science Department IV,
 * 		 University of Erlangen-Nuremberg, Germany, 1992
 * Copyright(c) 1991, 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by the
 * Laboratory for Computation Vision and the Computer Science Department
 * of the the University of British Columbia and the Computer Science
 * Department(IV) of the University of Erlangen-Nuremberg, Germany.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)pk_output.c	8.1(Berkeley) 6/10/93
 */

#include <sys/param.h>
#include <sys/systm.h>
#include <sys/mbuf.h>
#include <sys/socket.h>
#include <sys/socketvar.h>
#include <sys/protosw.h>
#include <sys/errno.h>

#include <net/if.h>

#include <netccitt/x25.h>
#include <netccitt/pk.h>
#include <netccitt/pk_var.h>
#include <netccitt/pk_extern.h>

struct mbuf_cache pk_output_cache = {0}, pk_input_cache;

void
pk_output(lcp)
	struct pklcd *lcp;
{
	struct x25_packet *xp;
	struct mbuf *m;
	struct pkcb *pkp = lcp->lcd_pkp;

	if (lcp == 0 || pkp == 0) {
		printf("pk_output: zero arg\n");
		return;
	}
	while ((m = nextpk(lcp)) != NULL) {
		xp = mtod(m, struct x25_packet *);

		switch (pk_decode(xp) + lcp->lcd_state) {
			/*
			 * All the work is already done - just set the state
			 * and pass to peer.
			 */
		case PK_CALL + READY:
			lcp->lcd_state = SENT_CALL;
			lcp->lcd_timer = pk_t21;
			break;

			/*
			 *  Just set the state to allow packet to flow and send the
			 *  confirmation.
			 */
		case PK_CALL_ACCEPTED + RECEIVED_CALL:
			lcp->lcd_state = DATA_TRANSFER;
			break;

			/*
			 * Just set the state. Keep the LCD around till the
			 * clear confirmation is returned.
			 */
		case PK_CLEAR + RECEIVED_CALL:
		case PK_CLEAR + SENT_CALL:
		case PK_CLEAR + DATA_TRANSFER:
			lcp->lcd_state = SENT_CLEAR;
			lcp->lcd_retry = 0;
			/* fall through */

		case PK_CLEAR + SENT_CLEAR:
			lcp->lcd_timer = pk_t23;
			lcp->lcd_retry++;
			break;

		case PK_CLEAR_CONF + RECEIVED_CLEAR:
		case PK_CLEAR_CONF + SENT_CLEAR:
		case PK_CLEAR_CONF + READY:
			lcp->lcd_state = READY;
			break;

		case PK_DATA + DATA_TRANSFER:
			SPS(xp, lcp->lcd_ssn);
			lcp->lcd_input_window =
				(lcp->lcd_rsn + 1) % MODULUS;
			SPR(xp, lcp->lcd_input_window);
			lcp->lcd_last_transmitted_pr = lcp->lcd_input_window;
			lcp->lcd_ssn = (lcp->lcd_ssn + 1) % MODULUS;
			if (lcp->lcd_ssn == ((lcp->lcd_output_window + lcp->lcd_windowsize) % MODULUS))
				lcp->lcd_window_condition = TRUE;
			break;

		case PK_INTERRUPT + DATA_TRANSFER:
#ifdef ancient_history
			xp->packet_data = 0;
#endif
			lcp->lcd_intrconf_pending = TRUE;
			break;

		case PK_INTERRUPT_CONF + DATA_TRANSFER:
			break;

		case PK_RR + DATA_TRANSFER:
		case PK_RNR + DATA_TRANSFER:
			lcp->lcd_input_window =
				(lcp->lcd_rsn + 1) % MODULUS;
			SPR(xp, lcp->lcd_input_window);
			lcp->lcd_last_transmitted_pr = lcp->lcd_input_window;
			break;

		case PK_RESET + DATA_TRANSFER:
			lcp->lcd_reset_condition = TRUE;
			break;

		case PK_RESET_CONF + DATA_TRANSFER:
			lcp->lcd_reset_condition = FALSE;
			break;

			/*
			 * A restart should be only generated internally.
			 * Therefore all logic for restart is in the
			 * pk_restart routine.
			 */
		case PK_RESTART + READY:
			lcp->lcd_timer = pk_t20;
			break;

			/*
			 * Restarts are all  handled internally.  Therefore
			 * all the logic for the incoming restart packet is
			 * handled in  the pk_input routine.
			 */
		case PK_RESTART_CONF + READY:
			break;

		default:
			m_freem(m);
			return;
		}

		/* Trace the packet. */
		pk_trace(pkp->pk_xcp, m, "P-Out");

		/* Pass the packet on down to the link layer */
		if (pk_input_cache.mbc_size || pk_input_cache.mbc_oldsize) {
			m->m_flags |= 0x08;
			mbuf_cache(&pk_input_cache, m);
		}
		(*pkp->pk_lloutput) (m, pkp->pk_llnext, pkp->pk_rt);
	}
}

/*
 * This procedure returns the next packet to send or null. A packet is
 * composed of one or more mbufs.
 */

struct mbuf *
nextpk(lcp)
	struct pklcd   *lcp;
{
	struct mbuf *m, *n;
	struct socket  *so = lcp->lcd_so;
	struct sockbuf *sb = (so ? &so->so_snd : &lcp->lcd_sb);

	if (lcp->lcd_template) {
		m = lcp->lcd_template;
		lcp->lcd_template = NULL;
	} else {
		if (lcp->lcd_rnr_condition || lcp->lcd_window_condition ||
		    lcp->lcd_reset_condition)
			return (NULL);

		if ((m = sb->sb_mb) == 0)
			return (NULL);

		sb->sb_mb = m->m_nextpkt;
		SB_EMPTY_FIXUP(sb);
		m->m_nextpkt = 0;
		for (n = m; n; n = n->m_next)
			sbfree(sb, n);
	}
	return (m);
}
@


1.7
log
@de-register.  deraadt ok
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_output.c,v 1.6 2003/06/12 01:07:27 deraadt Exp $	*/
@


1.6
log
@final bits of obvious UCB term 3 removal
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_output.c,v 1.5 2002/08/08 19:18:12 provos Exp $	*/
d62 1
a62 1
	register struct pklcd *lcp;
d64 3
a66 3
	register struct x25_packet *xp;
	register struct mbuf *m;
	register struct pkcb *pkp = lcp->lcd_pkp;
d195 1
a195 1
	register struct mbuf *m, *n;
d197 1
a197 1
	register struct sockbuf *sb = (so ? &so->so_snd : &lcp->lcd_sb);
@


1.5
log
@redo socketbuf speedup.
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_output.c,v 1.3 2002/08/08 17:07:32 provos Exp $	*/
d24 1
a24 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@backout the tree break. ok pb@@, art@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_output.c,v 1.2 1996/03/04 07:36:43 niklas Exp $	*/
d215 2
a216 1
		m->m_act = 0;
@


1.3
log
@socket buf speedup from thorpej@@netbsd, okay art@@ ericj@@:

Make insertion of data into socket buffers O(C):
* Keep pointers to the first and last mbufs of the last record in the
  socket buffer.
* Use the sb_lastrecord pointer in the sbappend*() family of functions
  to avoid traversing the packet chain to find the last record.
* Add a new sbappend_stream() function for stream protocols which
  guarantee that there will never be more than one record in the
  socket buffer.  This function uses the sb_mbtail pointer to perform
  the data insertion.  Make TCP use sbappend_stream(). On a profiling
run, this makes sbappend of a TCP transmission using
a 1M socket buffer go from 50% of the time to .02% of the time. Thanks
to Bill Sommerfeld and YAMAMOTO Takashi for their debugging
assistance!
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d215 1
a215 2
		SB_EMPTY_FIXUP(sb);
		m->m_nextpkt = 0;
@


1.2
log
@From NetBSD: 960217 merge
@
text
@d215 2
a216 1
		m->m_act = 0;
@


1.2.16.1
log
@Sync the SMP branch with 3.3
@
text
@d215 1
a215 2
		SB_EMPTY_FIXUP(sb);
		m->m_nextpkt = 0;
@


1.2.16.2
log
@Merge of current from two weeks agointo the SMP branch
@
text
@d24 5
a28 1
 * 3. Neither the name of the University nor the names of its contributors
d66 1
a66 1
	struct pklcd *lcp;
d68 3
a70 3
	struct x25_packet *xp;
	struct mbuf *m;
	struct pkcb *pkp = lcp->lcd_pkp;
d199 1
a199 1
	struct mbuf *m, *n;
d201 1
a201 1
	struct sockbuf *sb = (so ? &so->so_snd : &lcp->lcd_sb);
@


1.2.26.1
log
@sync to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_output.c,v 1.2 1996/03/04 07:36:43 niklas Exp $	*/
d215 1
a215 2
		SB_EMPTY_FIXUP(sb);
		m->m_nextpkt = 0;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: pk_output.c,v 1.6 1994/09/20 06:41:04 cgd Exp $	*/
d5 2
a6 2
 * Copyright (c) University of British Columbia, 1984
 * Copyright (C) Computer Science Department IV, 
d8 1
a8 1
 * Copyright (c) 1991, 1992, 1993
d14 1
a14 1
 * Department (IV) of the University of Erlangen-Nuremberg, Germany.
d37 1
a37 1
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
d40 1
a40 1
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
d44 1
a44 1
 *	@@(#)pk_output.c	8.1 (Berkeley) 6/10/93
d60 1
d62 1
a62 2
struct mbuf_cache pk_output_cache = {0 }, pk_input_cache;
struct	mbuf *nextpk ();
d64 3
a66 2
pk_output (lcp)
register struct pklcd *lcp;
d70 1
a70 1
	register struct pkcb *pkp = lcp -> lcd_pkp;
d73 1
a73 1
		printf ("pk_output: zero arg\n");
d76 2
d79 27
a105 30
	while ((m = nextpk (lcp)) != NULL) {
		xp = mtod (m, struct x25_packet *);

		switch (pk_decode (xp) + lcp -> lcd_state) {
		/* 
		 *  All the work is already done - just set the state and
		 *  pass to peer.
		 */
		case CALL + READY: 
			lcp -> lcd_state = SENT_CALL;
			lcp -> lcd_timer = pk_t21;
			break;

		/*
		 *  Just set the state to allow packet to flow and send the
		 *  confirmation.
		 */
		case CALL_ACCEPTED + RECEIVED_CALL: 
			lcp -> lcd_state = DATA_TRANSFER;
			break;

		/* 
		 *  Just set the state. Keep the LCD around till the clear
		 *  confirmation is returned.
		 */
		case CLEAR + RECEIVED_CALL: 
		case CLEAR + SENT_CALL: 
		case CLEAR + DATA_TRANSFER: 
			lcp -> lcd_state = SENT_CLEAR;
			lcp -> lcd_retry = 0;
d108 3
a110 3
		case CLEAR + SENT_CLEAR:
			lcp -> lcd_timer = pk_t23;
			lcp -> lcd_retry++;
d113 4
a116 4
		case CLEAR_CONF + RECEIVED_CLEAR: 
		case CLEAR_CONF + SENT_CLEAR: 
		case CLEAR_CONF + READY: 
			lcp -> lcd_state = READY;
d119 9
a127 9
		case DATA + DATA_TRANSFER: 
			SPS(xp, lcp -> lcd_ssn);
			lcp -> lcd_input_window =
				(lcp -> lcd_rsn + 1) % MODULUS;
			SPR(xp, lcp -> lcd_input_window);
			lcp -> lcd_last_transmitted_pr = lcp -> lcd_input_window;
			lcp -> lcd_ssn = (lcp -> lcd_ssn + 1) % MODULUS;
			if (lcp -> lcd_ssn == ((lcp -> lcd_output_window + lcp -> lcd_windowsize) % MODULUS))
				lcp -> lcd_window_condition = TRUE;
d130 1
a130 1
		case INTERRUPT + DATA_TRANSFER: 
d132 1
a132 1
			xp -> packet_data = 0;
d134 1
a134 1
			lcp -> lcd_intrconf_pending = TRUE;
d137 1
a137 1
		case INTERRUPT_CONF + DATA_TRANSFER: 
d140 6
a145 6
		case RR + DATA_TRANSFER: 
		case RNR + DATA_TRANSFER: 
			lcp -> lcd_input_window =
				(lcp -> lcd_rsn + 1) % MODULUS;
			SPR(xp, lcp -> lcd_input_window);
			lcp -> lcd_last_transmitted_pr = lcp -> lcd_input_window;
d148 2
a149 2
		case RESET + DATA_TRANSFER: 
			lcp -> lcd_reset_condition = TRUE;
d152 2
a153 2
		case RESET_CONF + DATA_TRANSFER: 
			lcp -> lcd_reset_condition = FALSE;
d156 7
a162 6
		/* 
		 *  A restart should be only generated internally. Therefore
		 *  all logic for restart is in the pk_restart routine.
		 */
		case RESTART + READY: 
			lcp -> lcd_timer = pk_t20;
d165 6
a170 6
		/* 
		 *  Restarts are all  handled internally.  Therefore all the
		 *  logic for the incoming restart packet is handled in  the
		 *  pk_input routine.
		 */
		case RESTART_CONF + READY: 
d173 2
a174 2
		default: 
			m_freem (m);
d179 1
a179 1
		pk_trace (pkp -> pk_xcp, m, "P-Out");
d186 1
a186 1
		(*pkp -> pk_lloutput) (pkp -> pk_llnext, m, pkp -> pk_rt);
d190 3
a192 3
/* 
 *  This procedure returns the next packet to send or null. A
 *  packet is composed of one or more mbufs.
d196 2
a197 2
nextpk (lcp)
struct pklcd *lcp;
d200 1
a200 1
	struct socket *so = lcp -> lcd_so;
d203 3
a205 3
	if (lcp -> lcd_template) {
		m = lcp -> lcd_template;
		lcp -> lcd_template = NULL;
d207 2
a208 2
		if (lcp -> lcd_rnr_condition || lcp -> lcd_window_condition ||
				lcp -> lcd_reset_condition)
d211 1
a211 1
		if ((m = sb -> sb_mb) == 0)
d214 4
a217 4
 		sb -> sb_mb = m -> m_nextpkt;
 		m->m_act = 0;
		for (n = m; n; n = n -> m_next)
			sbfree (sb, n);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
