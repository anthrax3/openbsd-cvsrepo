head	1.6;
access;
symbols
	OPENBSD_3_7:1.5.0.14
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.12
	OPENBSD_3_6_BASE:1.5
	SMP_SYNC_A:1.5
	SMP_SYNC_B:1.5
	OPENBSD_3_5:1.5.0.10
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.8
	OPENBSD_3_4_BASE:1.5
	UBC_SYNC_A:1.5
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	UBC_SYNC_B:1.5
	UBC:1.3.0.6
	UBC_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_8:1.2.0.20
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	SMP:1.2.0.16
	SMP_BASE:1.2
	kame_19991208:1.2
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2;
locks; strict;
comment	@ * @;


1.6
date	2005.06.16.17.37.55;	author henning;	state dead;
branches;
next	1.5;

1.5
date	2002.03.14.03.16.11;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.14.01.27.10;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.19.06.37.37;	author itojun;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	96.04.19.16.10.07;	author niklas;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	96.03.04.07.36.40;	author niklas;	state Exp;
branches;
next	;

1.2.16.1
date	2001.05.14.22.40.06;	author niklas;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2002.03.28.14.57.37;	author niklas;	state Exp;
branches;
next	;

1.3.6.1
date	2002.06.11.03.31.36;	author art;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove remaining netccitt parts, full ports build test by pval, thanks!
@
text
@/*	$OpenBSD: pk_extern.h,v 1.5 2002/03/14 03:16:11 millert Exp $	*/
/*	$NetBSD: pk_extern.h,v 1.1 1996/02/13 22:05:17 christos Exp $	*/

/*
 * Copyright (c) 1995 Christos Zoulas.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Christos Zoulas.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifdef _KERNEL
struct pklcd;
struct mbuf_cache;
struct x25_ifaddr;
struct x25_calladdr;
struct x25_packet;
struct llc_linkcb;
struct bcdinfo;
struct sockaddr_dl;
struct rt_addrinfo;

/* pk_acct.c */
int pk_accton(char *);
void pk_acct(struct pklcd *);

/* pk_debug.c */
void pk_trace(struct x25config *, struct mbuf *, char *);
void mbuf_cache(struct mbuf_cache *, struct mbuf *);

/* pk_input.c */
void ccittintr(void);
struct pkcb *pk_newlink(struct x25_ifaddr *, caddr_t);
int pk_dellink(struct pkcb *);
int pk_resize(struct pkcb *);
void *pk_ctlinput(int, struct sockaddr *, void *);
void pkintr(void);
void pk_input(struct mbuf *, ...);
void pk_simple_bsd(octet *, octet *, int, int);
void pk_from_bcd(struct x25_calladdr *, int, struct sockaddr_x25 *,
		      struct x25config *);
void pk_incoming_call(struct pkcb *, struct mbuf *);
void pk_call_accepted(struct pklcd *, struct mbuf *);
void pk_parse_facilities(octet *, struct sockaddr_x25 *);

/* pk_llcsubr.c */
void cons_rtrequest(int, struct rtentry *, struct rt_addrinfo *);
struct rtentry *npaidb_enter(struct sockaddr_dl *, struct sockaddr *,
				  struct rtentry *, struct llc_linkcb *);
struct rtentry *npaidb_enrich(short, caddr_t, struct sockaddr_dl *);
int npaidb_destroy(struct rtentry *);
long x25_llcglue(int, struct sockaddr *);

/* pk_output.c */
void pk_output(struct pklcd *);
struct mbuf *nextpk(struct pklcd *);

/* pk_subr.c */
struct pklcd *pk_attach(struct socket *);
void pk_disconnect(struct pklcd *);
void pk_close(struct pklcd *);
struct mbuf *pk_template(int, int);
void pk_restart(struct pkcb *, int);
void pk_freelcd(struct pklcd *);
int pk_bind(struct pklcd *, struct mbuf *);
int pk_listen(struct pklcd *);
int pk_protolisten(int, int, int (*)(struct mbuf *, void *));
void pk_assoc(struct pkcb *, struct pklcd *, struct sockaddr_x25 *);
int pk_connect(struct pklcd *, struct sockaddr_x25 *);
void pk_callcomplete(struct pkcb *);
void pk_callrequest(struct pklcd *, struct sockaddr_x25 *,
			 struct x25config *);
void pk_build_facilities(struct mbuf *, struct sockaddr_x25 *, int);
int to_bcd(struct bcdinfo *, struct sockaddr_x25 *, struct x25config *);
int pk_getlcn(struct pkcb *);
void pk_clear(struct pklcd *, int, int);
void pk_flowcontrol(struct pklcd *, int, int);
void pk_flush(struct pklcd *);
void pk_procerror(int, struct pklcd *, char *, int);
int pk_ack(struct pklcd *, unsigned);
int pk_decode(struct x25_packet *);
void pk_restartcause(struct pkcb *, struct x25_packet *);
void pk_resetcause(struct pkcb *, struct x25_packet *);
void pk_clearcause(struct pkcb *, struct x25_packet *);
char *format_ntn(struct x25config *);
void pk_message(int, struct x25config *, char *, ...);
int pk_fragment(struct pklcd *, struct mbuf *, int, int, int);

/* pk_timer.c */
void pk_timer(void);

/* pk_usrreq.c */
int pk_usrreq(struct socket *, int, struct mbuf *, struct mbuf *,
		   struct mbuf *);
int pk_start(struct pklcd *);
int pk_control(struct socket *, u_long, caddr_t, struct ifnet *);
int pk_ctloutput(int, struct socket *, int, int, struct mbuf **);
int pk_checksockaddr(struct mbuf *);
int pk_send(struct mbuf *, void *);

#endif
@


1.5
log
@Final __P removal plus some cosmetic fixups
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_extern.h,v 1.4 2002/03/14 01:27:10 millert Exp $	*/
@


1.4
log
@First round of __P removal in sys
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_extern.h,v 1.3 2001/01/19 06:37:37 itojun Exp $	*/
d88 1
a88 1
int pk_protolisten __P((int, int, int (*)(struct mbuf *, void *)));
@


1.3
log
@pull post-4.4BSD change to sys/net/route.c from BSD/OS 4.2 (UCB copyrighted).

have sys/net/route.c:rtrequest1(), which takes rt_addrinfo * as the argument.
pass rt_addrinfo all the way down to rtrequest, and ifa->ifa_rtrequest.
3rd arg of ifa->ifa_rtrequest is now rt_addrinfo * instead of sockaddr *
(almost noone is using it anyways).

benefit: the follwoing command now works.  previously we need two route(8)
invocations, "add" then "change".
# route add -inet6 default ::1 -ifp gif0

remove unsafe typecast in rtrequest(), from rtentry * to sockaddr *.  it was
introduced by 4.3BSD-reno and never corrected.

XXX is eon_rtrequest() change correct regarding to 3rd arg?
eon_rtrequest() and rtrequest() were incorrect since 4.3BSD-reno,
so i do not have correct answer in the source code.
someone with more clue about netiso-over-ip, please help.
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_extern.h,v 1.2 1996/04/19 16:10:07 niklas Exp $	*/
d45 2
a46 2
int pk_accton __P((char *));
void pk_acct __P((struct pklcd *));
d49 2
a50 2
void pk_trace __P((struct x25config *, struct mbuf *, char *));
void mbuf_cache __P((struct mbuf_cache *, struct mbuf *));
d53 13
a65 13
void ccittintr __P((void));
struct pkcb *pk_newlink __P((struct x25_ifaddr *, caddr_t));
int pk_dellink __P((struct pkcb *));
int pk_resize __P((struct pkcb *));
void *pk_ctlinput __P((int, struct sockaddr *, void *));
void pkintr __P((void));
void pk_input __P((struct mbuf *, ...));
void pk_simple_bsd __P((octet *, octet *, int, int));
void pk_from_bcd __P((struct x25_calladdr *, int, struct sockaddr_x25 *,
		      struct x25config *));
void pk_incoming_call __P((struct pkcb *, struct mbuf *));
void pk_call_accepted __P((struct pklcd *, struct mbuf *));
void pk_parse_facilities __P((octet *, struct sockaddr_x25 *));
d68 6
a73 6
void cons_rtrequest __P((int, struct rtentry *, struct rt_addrinfo *));
struct rtentry *npaidb_enter __P((struct sockaddr_dl *, struct sockaddr *,
				  struct rtentry *, struct llc_linkcb *));
struct rtentry *npaidb_enrich __P((short, caddr_t, struct sockaddr_dl *));
int npaidb_destroy __P((struct rtentry *));
long x25_llcglue __P((int, struct sockaddr *));
d76 2
a77 2
void pk_output __P((struct pklcd *));
struct mbuf *nextpk __P((struct pklcd *));
d80 8
a87 8
struct pklcd *pk_attach __P((struct socket *));
void pk_disconnect __P((struct pklcd *));
void pk_close __P((struct pklcd *));
struct mbuf *pk_template __P((int, int));
void pk_restart __P((struct pkcb *, int));
void pk_freelcd __P((struct pklcd *));
int pk_bind __P((struct pklcd *, struct mbuf *));
int pk_listen __P((struct pklcd *));
d89 20
a108 20
void pk_assoc __P((struct pkcb *, struct pklcd *, struct sockaddr_x25 *));
int pk_connect __P((struct pklcd *, struct sockaddr_x25 *));
void pk_callcomplete __P((struct pkcb *));
void pk_callrequest __P((struct pklcd *, struct sockaddr_x25 *,
			 struct x25config *));
void pk_build_facilities __P((struct mbuf *, struct sockaddr_x25 *, int));
int to_bcd __P((struct bcdinfo *, struct sockaddr_x25 *, struct x25config *));
int pk_getlcn __P((struct pkcb *));
void pk_clear __P((struct pklcd *, int, int));
void pk_flowcontrol __P((struct pklcd *, int, int));
void pk_flush __P((struct pklcd *));
void pk_procerror __P((int, struct pklcd *, char *, int));
int pk_ack __P((struct pklcd *, unsigned));
int pk_decode __P((struct x25_packet *));
void pk_restartcause __P((struct pkcb *, struct x25_packet *));
void pk_resetcause __P((struct pkcb *, struct x25_packet *));
void pk_clearcause __P((struct pkcb *, struct x25_packet *));
char *format_ntn __P((struct x25config *));
void pk_message __P((int, struct x25config *, char *, ...));
int pk_fragment __P((struct pklcd *, struct mbuf *, int, int, int));
d111 1
a111 1
void pk_timer __P((void));
d114 7
a120 7
int pk_usrreq __P((struct socket *, int, struct mbuf *, struct mbuf *,
		   struct mbuf *));
int pk_start __P((struct pklcd *));
int pk_control __P((struct socket *, u_long, caddr_t, struct ifnet *));
int pk_ctloutput __P((int, struct socket *, int, int, struct mbuf **));
int pk_checksockaddr __P((struct mbuf *));
int pk_send __P((struct mbuf *, void *));
@


1.3.6.1
log
@Sync UBC branch to -current
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_extern.h,v 1.3 2001/01/19 06:37:37 itojun Exp $	*/
d45 2
a46 2
int pk_accton(char *);
void pk_acct(struct pklcd *);
d49 2
a50 2
void pk_trace(struct x25config *, struct mbuf *, char *);
void mbuf_cache(struct mbuf_cache *, struct mbuf *);
d53 13
a65 13
void ccittintr(void);
struct pkcb *pk_newlink(struct x25_ifaddr *, caddr_t);
int pk_dellink(struct pkcb *);
int pk_resize(struct pkcb *);
void *pk_ctlinput(int, struct sockaddr *, void *);
void pkintr(void);
void pk_input(struct mbuf *, ...);
void pk_simple_bsd(octet *, octet *, int, int);
void pk_from_bcd(struct x25_calladdr *, int, struct sockaddr_x25 *,
		      struct x25config *);
void pk_incoming_call(struct pkcb *, struct mbuf *);
void pk_call_accepted(struct pklcd *, struct mbuf *);
void pk_parse_facilities(octet *, struct sockaddr_x25 *);
d68 6
a73 6
void cons_rtrequest(int, struct rtentry *, struct rt_addrinfo *);
struct rtentry *npaidb_enter(struct sockaddr_dl *, struct sockaddr *,
				  struct rtentry *, struct llc_linkcb *);
struct rtentry *npaidb_enrich(short, caddr_t, struct sockaddr_dl *);
int npaidb_destroy(struct rtentry *);
long x25_llcglue(int, struct sockaddr *);
d76 2
a77 2
void pk_output(struct pklcd *);
struct mbuf *nextpk(struct pklcd *);
d80 29
a108 29
struct pklcd *pk_attach(struct socket *);
void pk_disconnect(struct pklcd *);
void pk_close(struct pklcd *);
struct mbuf *pk_template(int, int);
void pk_restart(struct pkcb *, int);
void pk_freelcd(struct pklcd *);
int pk_bind(struct pklcd *, struct mbuf *);
int pk_listen(struct pklcd *);
int pk_protolisten(int, int, int (*)(struct mbuf *, void *));
void pk_assoc(struct pkcb *, struct pklcd *, struct sockaddr_x25 *);
int pk_connect(struct pklcd *, struct sockaddr_x25 *);
void pk_callcomplete(struct pkcb *);
void pk_callrequest(struct pklcd *, struct sockaddr_x25 *,
			 struct x25config *);
void pk_build_facilities(struct mbuf *, struct sockaddr_x25 *, int);
int to_bcd(struct bcdinfo *, struct sockaddr_x25 *, struct x25config *);
int pk_getlcn(struct pkcb *);
void pk_clear(struct pklcd *, int, int);
void pk_flowcontrol(struct pklcd *, int, int);
void pk_flush(struct pklcd *);
void pk_procerror(int, struct pklcd *, char *, int);
int pk_ack(struct pklcd *, unsigned);
int pk_decode(struct x25_packet *);
void pk_restartcause(struct pkcb *, struct x25_packet *);
void pk_resetcause(struct pkcb *, struct x25_packet *);
void pk_clearcause(struct pkcb *, struct x25_packet *);
char *format_ntn(struct x25config *);
void pk_message(int, struct x25config *, char *, ...);
int pk_fragment(struct pklcd *, struct mbuf *, int, int, int);
d111 1
a111 1
void pk_timer(void);
d114 7
a120 7
int pk_usrreq(struct socket *, int, struct mbuf *, struct mbuf *,
		   struct mbuf *);
int pk_start(struct pklcd *);
int pk_control(struct socket *, u_long, caddr_t, struct ifnet *);
int pk_ctloutput(int, struct socket *, int, int, struct mbuf **);
int pk_checksockaddr(struct mbuf *);
int pk_send(struct mbuf *, void *);
@


1.2
log
@NetBSD 960317 merge
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_extern.h,v 1.1 1996/03/04 07:36:40 niklas Exp $	*/
d42 1
d68 1
a68 1
void cons_rtrequest __P((int, struct rtentry *, struct sockaddr *));
@


1.2.16.1
log
@merge in approximately 2.9 into SMP branch
@
text
@d1 1
a1 1
/*	$OpenBSD: pk_extern.h,v 1.3 2001/01/19 06:37:37 itojun Exp $	*/
a41 1
struct rt_addrinfo;
d67 1
a67 1
void cons_rtrequest __P((int, struct rtentry *, struct rt_addrinfo *));
@


1.2.16.2
log
@Merge in -current from roughly a week ago
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 2
a46 2
int pk_accton(char *);
void pk_acct(struct pklcd *);
d49 2
a50 2
void pk_trace(struct x25config *, struct mbuf *, char *);
void mbuf_cache(struct mbuf_cache *, struct mbuf *);
d53 13
a65 13
void ccittintr(void);
struct pkcb *pk_newlink(struct x25_ifaddr *, caddr_t);
int pk_dellink(struct pkcb *);
int pk_resize(struct pkcb *);
void *pk_ctlinput(int, struct sockaddr *, void *);
void pkintr(void);
void pk_input(struct mbuf *, ...);
void pk_simple_bsd(octet *, octet *, int, int);
void pk_from_bcd(struct x25_calladdr *, int, struct sockaddr_x25 *,
		      struct x25config *);
void pk_incoming_call(struct pkcb *, struct mbuf *);
void pk_call_accepted(struct pklcd *, struct mbuf *);
void pk_parse_facilities(octet *, struct sockaddr_x25 *);
d68 6
a73 6
void cons_rtrequest(int, struct rtentry *, struct rt_addrinfo *);
struct rtentry *npaidb_enter(struct sockaddr_dl *, struct sockaddr *,
				  struct rtentry *, struct llc_linkcb *);
struct rtentry *npaidb_enrich(short, caddr_t, struct sockaddr_dl *);
int npaidb_destroy(struct rtentry *);
long x25_llcglue(int, struct sockaddr *);
d76 2
a77 2
void pk_output(struct pklcd *);
struct mbuf *nextpk(struct pklcd *);
d80 29
a108 29
struct pklcd *pk_attach(struct socket *);
void pk_disconnect(struct pklcd *);
void pk_close(struct pklcd *);
struct mbuf *pk_template(int, int);
void pk_restart(struct pkcb *, int);
void pk_freelcd(struct pklcd *);
int pk_bind(struct pklcd *, struct mbuf *);
int pk_listen(struct pklcd *);
int pk_protolisten(int, int, int (*)(struct mbuf *, void *));
void pk_assoc(struct pkcb *, struct pklcd *, struct sockaddr_x25 *);
int pk_connect(struct pklcd *, struct sockaddr_x25 *);
void pk_callcomplete(struct pkcb *);
void pk_callrequest(struct pklcd *, struct sockaddr_x25 *,
			 struct x25config *);
void pk_build_facilities(struct mbuf *, struct sockaddr_x25 *, int);
int to_bcd(struct bcdinfo *, struct sockaddr_x25 *, struct x25config *);
int pk_getlcn(struct pkcb *);
void pk_clear(struct pklcd *, int, int);
void pk_flowcontrol(struct pklcd *, int, int);
void pk_flush(struct pklcd *);
void pk_procerror(int, struct pklcd *, char *, int);
int pk_ack(struct pklcd *, unsigned);
int pk_decode(struct x25_packet *);
void pk_restartcause(struct pkcb *, struct x25_packet *);
void pk_resetcause(struct pkcb *, struct x25_packet *);
void pk_clearcause(struct pkcb *, struct x25_packet *);
char *format_ntn(struct x25config *);
void pk_message(int, struct x25config *, char *, ...);
int pk_fragment(struct pklcd *, struct mbuf *, int, int, int);
d111 1
a111 1
void pk_timer(void);
d114 7
a120 7
int pk_usrreq(struct socket *, int, struct mbuf *, struct mbuf *,
		   struct mbuf *);
int pk_start(struct pklcd *);
int pk_control(struct socket *, u_long, caddr_t, struct ifnet *);
int pk_ctloutput(int, struct socket *, int, int, struct mbuf **);
int pk_checksockaddr(struct mbuf *);
int pk_send(struct mbuf *, void *);
@


1.1
log
@From NetBSD: 960217 merge
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d67 1
a67 1
int cons_rtrequest __P((int, struct rtentry *, struct sockaddr *));
@
