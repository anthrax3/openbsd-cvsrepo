head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.6
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.13.0.26
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.18
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.22
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.20
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.28
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.24
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.22
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.20
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.18
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.16
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.14
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.12
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.10
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.01.07.14.37.51;	author mestre;	state Exp;
branches;
next	1.14;
commitid	cyBBZmhWXII305xB;

1.14
date	2016.01.07.14.30.32;	author mestre;	state Exp;
branches;
next	1.13;
commitid	7u0wG0oR4oWUoxID;

1.13
date	2009.10.27.23.59.27;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.10.00.03.01;	author david;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.06.18.50.38;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.31.04.21.30;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.25.00.18.48;	author pvalchev;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.25.00.15.19;	author pvalchev;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.24.09.07.46;	author pvalchev;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.12;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.07.31.18.48.58;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	99.03.12.03.02.41;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	98.08.19.07.41.36;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.25;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.25;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@ANSIfy trek(6)

Note: Binary change is introduced due to function schedule() where its args are
(int,double,char,char,char), but on trek.h are (int,double,int,int,int). Changed
to the latter since the 3 last args are coordinates.

OK tb@@
@
text
@/*	$OpenBSD: getpar.c,v 1.14 2016/01/07 14:30:32 mestre Exp $	*/
/*	$NetBSD: getpar.c,v 1.4 1995/04/24 12:25:57 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "getpar.h"
#include "trek.h"

static int testterm(void);

/**
 **	get integer parameter
 **/

int
getintpar(const char *s)
{
	int	i, n;

	while (1)
	{
		if (testnl() && s)
			printf("%s: ", s);
		i = scanf("%d", &n);
		if (i < 0)
			exit(1);
		if (i > 0 && testterm())
			return (n);
		printf("invalid input; please enter an integer\n");
		skiptonl(0);
	}
}

/**
 **	get floating parameter
 **/

double
getfltpar(const char *s)
{
	int		i;
	double		d;

	while (1)
	{
		if (testnl() && s)
			printf("%s: ", s);
		i = scanf("%lf", &d);
		if (i < 0)
			exit(1);
		if (i > 0 && testterm())
			return (d);
		printf("invalid input; please enter a double\n");
		skiptonl(0);
	}
}

/**
 **	get yes/no parameter
 **/

const struct cvntab	Yntab[] =
{
	{ "y",	"es",	(cmdfun)1,	1 },
	{ "n",	"o",	(cmdfun)0,	0 },
	{ NULL,	NULL,	NULL,		0 }
};

int
getynpar(const char *s)
{
	const struct cvntab	*r;

	r = getcodpar(s, Yntab);
	return (r->value2);
}


/**
 **	get coded parameter
 **/

const struct cvntab *
getcodpar(const char *s, const struct cvntab tab[])
{
	char				input[100];
	const struct cvntab		*r;
	int				flag;
	const char			*p, *q;
	int				c;
	int				f;

	flag = 0;
	while (1)
	{
		flag |= (f = testnl());
		if (flag)
			printf("%s: ", s);
		if (f)
			getchar();		/* throw out the newline */
		scanf("%*[ \t;]");
		if ((c = scanf("%99[^ \t;\n]", input)) < 0)
			exit(1);
		if (c == 0)
			continue;
		flag = 1;

		/* if command list, print four per line */
		if (input[0] == '?' && input[1] == 0)
		{
			c = 4;
			for (r = tab; r->abrev; r++)
			{
				strlcpy(input, r->abrev, sizeof input);
				strlcat(input, r->full, sizeof input);
				printf("%14.14s", input);
				if (--c > 0)
					continue;
				c = 4;
				printf("\n");
			}
			if (c != 4)
				printf("\n");
			continue;
		}

		/* search for in table */
		for (r = tab; r->abrev; r++)
		{
			p = input;
			for (q = r->abrev; *q; q++)
				if (*p++ != *q)
					break;
			if (!*q)
			{
				for (q = r->full; *p && *q; q++, p++)
					if (*p != *q)
						break;
				if (!*p || !*q)
					break;
			}
		}

		/* check for not found */
		if (!r->abrev)
		{
			printf("invalid input; ? for valid inputs\n");
			skiptonl(0);
		}
		else
			return (r);
	}
}


/**
 **	get string parameter
 **/

void
getstrpar(const char *s, char *r, int l, const char *t)
{
	int	i, f;
	char	format[20];

	if (t == 0)
		t = " \t\n;";
	(void)snprintf(format, sizeof format, "%%%d[^%s]", l, t);
	while (1)
	{
		if ((f = testnl()) && s)
			printf("%s: ", s);
		if (f)
			getchar();
		scanf("%*[\t ;]");
		i = scanf(format, r);
		if (i < 0)
			exit(1);
		if (i != 0)
			return;
	}
}


/**
 **	test if newline is next valid character
 **/

int
testnl(void)
{
	int	c;

	while ((c = getchar()) != '\n')
		if ((c >= '0' && c <= '9') || c == '.' || c == '!' ||
				(c >= 'A' && c <= 'Z') ||
				(c >= 'a' && c <= 'z') || c == '-' || c == EOF)
		{
			ungetc(c, stdin);
			return(0);
		}
	ungetc(c, stdin);
	return (1);
}


/**
 **	scan for newline
 **/

void
skiptonl(int c)
{
	while (c != '\n')
		if (!(c = getchar()))
			return;
	ungetc('\n', stdin);
	return;
}


/**
 **	test for valid terminator
 **/

static int
testterm(void)
{
	int	c;

	if (!(c = getchar()))
		return (1);
	if (c == '.')
		return (0);
	if (c == '\n' || c == ';')
		ungetc(c, stdin);
	return (1);
}


/*
**  TEST FOR SPECIFIED DELIMETER
**
**	The standard input is scanned for the parameter.  If found,
**	it is thrown away and non-zero is returned.  If not found,
**	zero is returned.
*/

int
readdelim(int d)
{
	int	c;

	while ((c = getchar()))
	{
		if (c == d)
			return (1);
		if (c == ' ')
			continue;
		ungetc(c, stdin);
		break;
	}
	return (0);
}
@


1.14
log
@Remove unnecessary headers and sort the remaining alphabetically

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getpar.c,v 1.13 2009/10/27 23:59:27 deraadt Exp $	*/
d47 1
a47 2
getintpar(s)
	const char	*s;
d70 1
a70 2
getfltpar(s)
	const char	*s;
d101 1
a101 2
getynpar(s)
	const char	*s;
d115 1
a115 3
getcodpar(s, tab)
	const char		*s;
	const struct cvntab	tab[];
d192 1
a192 5
getstrpar(s, r, l, t)
	const char	*s;
	char		*r;
	int		l;
	const char	*t;
d221 1
a221 1
testnl()
d243 1
a243 2
skiptonl(c)
	int	c;
d258 1
a258 1
testterm()
d281 1
a281 2
readdelim(d)
	int	d;
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: getpar.c,v 1.12 2003/07/10 00:03:01 david Exp $	*/
d36 1
@


1.12
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: getpar.c,v 1.11 2003/06/03 03:01:41 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)getpar.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: getpar.c,v 1.11 2003/06/03 03:01:41 millert Exp $";
#endif
#endif /* not lint */
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: getpar.c,v 1.10 2003/04/06 18:50:38 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: getpar.c,v 1.10 2003/04/06 18:50:38 deraadt Exp $";
d42 1
@


1.10
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: getpar.c,v 1.9 2002/05/31 04:21:30 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: getpar.c,v 1.9 2002/05/31 04:21:30 pjanzen Exp $";
@


1.9
log
@de-register
@
text
@d1 1
a1 1
/*	$OpenBSD: getpar.c,v 1.8 2002/02/25 00:18:48 pvalchev Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: getpar.c,v 1.8 2002/02/25 00:18:48 pvalchev Exp $";
d160 2
a161 2
				strcpy(input, r->abrev);
				strcat(input, r->full);
d218 1
a218 1
	(void)sprintf(format, "%%%d[^%s]", l, t);
@


1.8
log
@fix buffer overflow in scanf; found by pjanzen
@
text
@d1 1
a1 1
/*	$OpenBSD: getpar.c,v 1.6 2002/02/24 09:07:46 pvalchev Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: getpar.c,v 1.5 2002/02/16 21:27:12 millert Exp $";
d60 1
a60 2
	register int	i;
	int		n;
d84 2
a85 2
	register int		i;
	double			d;
d213 2
a214 3
	register int	i;
	char		format[20];
	register int	f;
@


1.7
log
@handle EOF gracefully; ok pjanzen
@
text
@d149 1
a149 1
		if ((c = scanf("%[^ \t;\n]", input)) < 0)
@


1.6
log
@getchar fixes; ok pjanzen
@
text
@d1 1
a1 1
/*	$OpenBSD: getpar.c,v 1.5 2002/02/16 21:27:12 millert Exp $	*/
d249 1
a249 1
				(c >= 'a' && c <= 'z') || c == '-')
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: getpar.c,v 1.4 1999/07/31 18:48:58 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: getpar.c,v 1.4 1999/07/31 18:48:58 pjanzen Exp $";
d244 1
a244 1
	register char		c;
d265 1
a265 1
	char	c;
d282 1
a282 1
	char		c;
d304 1
a304 1
	char	d;
d306 1
a306 1
	register char	c;
@


1.4
log
@Use const where appropriate:  jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: getpar.c,v 1.3 1999/03/12 03:02:41 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: getpar.c,v 1.3 1999/03/12 03:02:41 pjanzen Exp $";
d50 1
a50 1
static int testterm __P((void));
@


1.3
log
@Correct documentation, remove useless code, remove duplicate documentation,
don't compile with xTRACE defined, and trim things.
@
text
@d1 1
a1 1
/*	$OpenBSD: getpar.c,v 1.2 1998/08/19 07:41:36 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: getpar.c,v 1.2 1998/08/19 07:41:36 pjanzen Exp $";
d58 1
a58 1
	char	*s;
d83 1
a83 1
	char	*s;
d106 1
a106 1
struct cvntab	Yntab[] =
d115 1
a115 1
	char	*s;
d117 1
a117 1
	struct cvntab		*r;
d128 1
a128 1
struct cvntab *
d130 2
a131 2
	char		*s;
	struct cvntab	tab[];
d134 1
a134 1
	register struct cvntab		*r;
d136 1
a136 1
	register char			*p, *q;
d209 4
a212 4
	char	*s;
	char	*r;
	int	l;
	char	*t;
@


1.2
log
@tags, formatting, ANSI-fication, prototypes, de-typos, and the occasional
initialization, removal of unused variable, or other minor fix.  Most
changes are from or inspired by NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d147 1
a147 1
			cgetc(0);		/* throw out the newline */
d226 1
a226 1
			cgetc(0);
d246 1
a246 1
	while ((c = cgetc(0)) != '\n')
d268 1
a268 1
		if (!(c = cgetc(0)))
d284 1
a284 1
	if (!(c = cgetc(0)))
d308 1
a308 1
	while ((c = cgetc(0)))
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: getpar.c,v 1.4 1995/04/24 12:25:57 cgd Exp $";
d45 6
a50 2
# include	<stdio.h>
# include	"getpar.h"
d56 1
d58 1
a58 1
char	*s;
d81 3
a83 2
double getfltpar(s)
char	*s;
d108 3
a110 3
	"y",	"es",	(int (*)())1,	0,
	"n",	"o",	(int (*)())0,	0,
	0
d113 1
d115 1
a115 1
char	*s;
d120 1
a120 1
	return ((long) r->value);
d128 4
a131 3
struct cvntab *getcodpar(s, tab)
char		*s;
struct cvntab	tab[];
d161 2
a162 1
				concat(r->abrev, r->full, input);
d207 1
d209 4
a212 4
char	*s;
char	*r;
int	l;
char	*t;
d241 1
d263 1
d265 1
a265 1
char	c;
d279 1
d282 1
a282 1
	register char		c;
d302 1
d304 1
a304 1
char	d;
d308 1
a308 1
	while (c = cgetc(0))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
