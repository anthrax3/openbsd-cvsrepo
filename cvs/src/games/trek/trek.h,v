head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.14
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.10
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.12
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.8
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.11.0.10
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.8
	OPENBSD_5_0:1.11.0.6
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.4
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.2
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.10.0.12
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.10.0.14
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.10
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.8
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.6
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.4
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.4
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.2
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.10
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.8
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.6
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2013.06.02.04.28.39;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2012.12.05.23.19.51;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2010.04.30.19.29.01;	author jsg;	state Exp;
branches;
next	1.10;

1.10
date	2006.11.06.21.32.15;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.15.07.02.35;	author miod;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.23.01.33.34;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.03.01.42;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.12;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	99.07.31.18.49.00;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	99.03.12.03.02.45;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.08.19.07.42.12;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	97.04.01.16.00.59;	author rahnds;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.27;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.27;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Correct obviously exchanged labels in the "computer warpcost" output and
fix a typo in a comment; from <Ted dot Roby at gmail dot com> on tech@@.
@
text
@/*	$OpenBSD: trek.h,v 1.12 2012/12/05 23:19:51 deraadt Exp $	*/
/*	$NetBSD: trek.h,v 1.3 1995/04/22 10:59:36 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)trek.h	8.1 (Berkeley) 5/31/93
 */

/*
**  Global Declarations
**
**	Virtually all non-local variable declarations are made in this
**	file.  Exceptions are those things which are initialized, which
**	are defined in "externs.c", and things which are local to one
**	program file.
**
**	So far as I know, nothing in here must be preinitialized to
**	zero.
**
**	You may have problems from the loader if you move this to a
**	different machine.  These things actually get allocated in each
**	source file, which UNIX allows; however, you may (on other
**	systems) have to change everything in here to be "extern" and
**	actually allocate stuff in "externs.c"
*/

/*********************  GALAXY  **************************/

/* galactic parameters */
#define	NSECTS		10	/* dimensions of quadrant in sectors */
#define	NQUADS		8	/* dimension of galaxy in quadrants */
#define	NINHAB		32	/* number of quadrants which are inhabited */

struct quad		/* definition for each quadrant */
{
	unsigned char	bases;	/* number of bases in this quadrant */
	char	klings;		/* number of Klingons in this quadrant */
	signed   char	holes;	/* number of black holes in this quadrant */
	int	scanned;	/* star chart entry (see below) */
	short	stars;		/* number of stars in this quadrant */
	char	qsystemname;	/* starsystem name (see below) */
};

#define	Q_DISTRESSED	0200
#define	Q_SYSTEM	077

/*  systemname conventions:
 *	1 -> NINHAB	index into Systemname table for live system.
 *	+ Q_DISTRESSED	distressed starsystem -- systemname & Q_SYSTEM
 *			is the index into the Event table which will
 *			have the system name
 *	0		dead or nonexistent starsystem
 *
 *  starchart ("scanned") conventions:
 *	0 -> 999	taken as is
 *	-1		not yet scanned ("...")
 *	1000		supernova ("///")
 *	1001		starbase + ??? (".1.")
*/

/* ascii names of systems */
extern const char	*const Systemname[NINHAB];

/* quadrant definition */
struct quad	Quad[NQUADS][NQUADS];

/* defines for sector map  (below) */
#define	EMPTY		'.'
#define	STAR		'*'
#define	BASE		'#'
#define	ENTERPRISE	'E'
#define	QUEENE		'Q'
#define	KLINGON		'K'
#define	INHABIT		'@@'
#define	HOLE		' '

/* current sector map */
char	Sect[NSECTS][NSECTS];


/************************ DEVICES ******************************/

#define	NDEV		16	/* max number of devices */

/* device tokens */
#define	WARP		0	/* warp engines */
#define	SRSCAN		1	/* short range scanners */
#define	LRSCAN		2	/* long range scanners */
#define	PHASER		3	/* phaser control */
#define	TORPED		4	/* photon torpedo control */
#define	IMPULSE		5	/* impulse engines */
#define	SHIELD		6	/* shield control */
#define	COMPUTER	7	/* on board computer */
#define	SSRADIO		8	/* subspace radio */
#define	LIFESUP		9	/* life support systems */
#define	SINS		10	/* Space Inertial Navigation System */
#define	CLOAK		11	/* cloaking device */
#define	XPORTER		12	/* transporter */
#define	SHUTTLE		13	/* shuttlecraft */

/* device names */
struct device
{
	const char	*name;		/* device name */
	const char	*person;	/* the person who fixes it */
};

extern const struct device	Device[NDEV];

/***************************  EVENTS  ****************************/

#define	NEVENTS		12	/* number of different event types */

#define	E_LRTB		1	/* long range tractor beam */
#define	E_KATSB		2	/* Klingon attacks starbase */
#define	E_KDESB		3	/* Klingon destroys starbase */
#define	E_ISSUE		4	/* distress call is issued */
#define	E_ENSLV		5	/* Klingons enslave a quadrant */
#define	E_REPRO		6	/* a Klingon is reproduced */
#define	E_FIXDV		7	/* fix a device */
#define	E_ATTACK	8	/* Klingon attack during rest period */
#define	E_SNAP		9	/* take a snapshot for time warp */
#define	E_SNOVA		10	/* supernova occurs */

#define	E_GHOST		0100	/* ghost of a distress call if ssradio out */
#define	E_HIDDEN	0200	/* event that is unreportable because ssradio out */
#define	E_EVENT		077	/* mask to get event code */

struct event
{
	unsigned char	x, y;		/* coordinates */
	double		date;		/* trap stardate */
	char		evcode;		/* event type */
	unsigned char	systemname;	/* starsystem name */
};
/* systemname conventions:
 *	1 -> NINHAB	index into Systemname table for reported distress calls
 *
 * evcode conventions:
 *	1 -> NEVENTS-1	event type
 *	+ E_HIDDEN	unreported (SSradio out)
 *	+ E_GHOST	actually already expired
 *	0		unallocated
 */

#define	MAXEVENTS	25	/* max number of concurrently pending events */

struct event	Event[MAXEVENTS];	/* dynamic event list; one entry per pending event */

/*****************************  KLINGONS  *******************************/

struct kling
{
	unsigned char	x, y;	/* coordinates */
	int	power;		/* power left */
	double	dist;		/* distance to Enterprise */
	double	avgdist;	/* average over this move */
	char	srndreq;	/* set if surrender has been requested */
};

#define	MAXKLQUAD	9	/* maximum klingons per quadrant */

/********************** MISCELLANEOUS ***************************/

/* condition codes */
#define	GREEN		0
#define	DOCKED		1
#define	YELLOW		2
#define	RED		3

/* starbase coordinates */
#define	MAXBASES	9	/* maximum number of starbases in galaxy */

/*  distress calls  */
#define	MAXDISTR	5	/* maximum concurrent distress calls */

/* phaser banks */
#define	NBANKS		6	/* number of phaser banks */

struct xy
{
	unsigned char	x, y;		/* coordinates */
};


/*
 *	note that much of the stuff in the following structs CAN NOT
 *	be moved around!!!!
 */


/* information regarding the state of the starship */
struct
{
	double	warp;		/* warp factor */
	double	warp2;		/* warp factor squared */
	double	warp3;		/* warp factor cubed */
	char	shldup;		/* shield up flag */
	char	cloaked;	/* set if cloaking device on */
	int	energy;		/* starship's energy */
	int	shield;		/* energy in shields */
	double	reserves;	/* life support reserves */
	int	crew;		/* ship's complement */
	int	brigfree;	/* space left in brig */
	char	torped;		/* torpedoes */
	char	cloakgood;	/* set if we have moved */
	int	quadx;		/* quadrant x coord */
	int	quady;		/* quadrant y coord */
	int	sectx;		/* sector x coord */
	int	secty;		/* sector y coord */
	unsigned char	cond;	/* condition code */
	char	sinsbad;	/* Space Inertial Navigation System condition */
	const char	*shipname;	/* name of current starship */
	char	ship;		/* current starship */
	int	distressed;	/* number of distress calls */
}	Ship;

/* sinsbad is set if SINS is working but not calibrated */

/* game related information, mostly scoring */
struct
{
	int	killk;		/* number of klingons killed */
	int	deaths;		/* number of deaths onboard Enterprise */
	char	negenbar;	/* number of hits on negative energy barrier */
	char	killb;		/* number of starbases killed */
	int	kills;		/* number of stars killed */
	char	skill;		/* skill rating of player */
	char	length;		/* length of game */
	char	killed;		/* set if you were killed */
	char	killinhab;	/* number of inhabited starsystems killed */
	char	tourn;		/* set if a tournament game */
	char	passwd[15];	/* game password */
	char	snap;		/* set if snapshot taken */
	char	helps;		/* number of help calls */
	int	captives;	/* total number of captives taken */
}	Game;

/* per move information */
struct
{
	char	free;		/* set if a move is free */
	char	endgame;	/* end of game flag */
	char	shldchg;	/* set if shields changed this move */
	char	newquad;	/* set if just entered this quadrant */
	char	resting;	/* set if this move is a rest */
	double	time;		/* time used this move */
}	Move;

/* parametric information */
struct
{
	unsigned char	bases;	/* number of starbases */
	char	klings;		/* number of klingons */
	double	date;		/* stardate */
	double	time;		/* time left */
	double	resource;	/* Federation resources */
	int	energy;		/* starship's energy */
	int	shield;		/* energy in shields */
	double	reserves;	/* life support reserves */
	int	crew;		/* size of ship's complement */
	int	brigfree;	/* max possible number of captives */
	char	torped;		/* photon torpedos */
	double	damfac[NDEV];	/* damage factor */
	double	dockfac;	/* docked repair time factor */
	double	regenfac;	/* regeneration factor */
	int	stopengy;	/* energy to do emergency stop */
	int	shupengy;	/* energy to put up shields */
	int	klingpwr;	/* Klingon initial power */
	int	warptime;	/* time chewer multiplier */
	double	phasfac;	/* Klingon phaser power eater factor */
	char	moveprob[6];	/* probability that a Klingon moves */
	double	movefac[6];	/* Klingon move distance multiplier */
	double	eventdly[NEVENTS];	/* event time multipliers */
	double	navigcrud[2];	/* navigation crudup factor */
	int	cloakenergy;	/* cloaking device energy per stardate */
	double	damprob[NDEV];	/* damage probability */
	double	hitfac;		/* Klingon attack factor */
	int	klingcrew;	/* number of Klingons in a crew */
	double	srndrprob;	/* surrender probability */
	int	energylow;	/* low energy mark (cond YELLOW) */
}	Param;

/* Sum of damage probabilities must add to 1000 */

/* other information kept in a snapshot */
struct
{
	unsigned char	bases;	/* number of starbases */
	char	klings;		/* number of klingons */
	double	date;		/* stardate */
	double	time;		/* time left */
	double	resource;	/* Federation resources */
	char	distressed;	/* number of currently distressed quadrants */
	struct event	*eventptr[NEVENTS];	/* pointer to event structs */
	struct xy	base[MAXBASES];		/* locations of starbases */
}	Now;

/* Other stuff, not dumped in a snapshot */
struct
{
	struct kling	klingon[MAXKLQUAD];	/* sorted Klingon list */
	short		nkling;			/* number of Klingons in this sector */
						/* < 0 means automatic override mode */
	struct xy	starbase;	/* starbase in current quadrant */
	char		snapshot[sizeof Quad + sizeof Event + sizeof Now];	/* snapshot for time warp */
	char		statreport;		/* set to get a status report on a srscan */
}	Etc;

/*
 *	eventptr is a pointer to the event[] entry of the last
 *	scheduled event of each type.  Zero if no such event scheduled.
 */

/* Klingon move indices */
#define	KM_OB		0	/* Old quadrant, Before attack */
#define	KM_OA		1	/* Old quadrant, After attack */
#define	KM_EB		2	/* Enter quadrant, Before attack */
#define	KM_EA		3	/* Enter quadrant, After attack */
#define	KM_LB		4	/* Leave quadrant, Before attack */
#define	KM_LA		5	/* Leave quadrant, After attack */

/* you lose codes */
#define	L_NOTIME	1	/* ran out of time */
#define	L_NOENGY	2	/* ran out of energy */
#define	L_DSTRYD	3	/* destroyed by a Klingon */
#define	L_NEGENB	4	/* ran into the negative energy barrier */
#define	L_SUICID	5	/* destroyed in a nova */
#define	L_SNOVA		6	/* destroyed in a supernova */
#define	L_NOLIFE	7	/* life support died (so did you) */
#define	L_NOHELP	8	/* you could not be rematerialized */
#define	L_TOOFAST	9	/* pretty stupid going at warp 10 */
#define	L_STAR		10	/* ran into a star */
#define	L_DSTRCT	11	/* self destructed */
#define	L_CAPTURED	12	/* captured by Klingons */
#define	L_NOCREW	13	/* you ran out of crew */

/******************  COMPILE OPTIONS  ***********************/

/* Trace info */
/* #define	xTRACE		1 */
#ifdef xTRACE
int	Trace;
#endif

/* abandon.c */
void abandon(int);

/* attack.c */
void attack(int);

/* autover.c */
void autover(void);

/* capture.c */
void capture(int);
struct kling *selectklingon(void);

/* check_out.c */
int check_out(int);

/* checkcond.c */
void checkcond(void);

/* compkl.c */
void compkldist(int);

/* computer.c */
void computer(int);

/* damage.c */
void damage(int, double);

/* damaged.c */
int damaged(int);

/* dcrept.c */
void dcrept(int);

/* destruct.c */
void destruct(int);

/* dock.c */
void dock(int);
void undock(int);

/* dumpgame.c */
void dumpgame(int);
int restartgame(void);

/* dumpme.c */
void dumpme(int);

/* dumpssradio.c */
int dumpssradio(void);

/* events.c */
int events(int);

/* externs.c */

/* getcodi.c */
int getcodi(int *, double *);

/* help.c */
void help(int);

/* impulse.c */
void impulse(int);

/* initquad.c */
void initquad(int);
void sector(int *, int *);

/* kill.c */
void killk(int, int );
void killb(int, int );
void kills(int, int , int);
void killd(int, int , int);

/* klmove.c */
void klmove(int);

/* lose.c */
void lose(int);

/* lrscan.c */
void lrscan(int);

/* move.c */
double move(int, int, double, double);

/* nova.c */
void nova(int, int );

/* out.c */
void out(int);

/* phaser.c */
void phaser(int);

/* play.c */
void myreset(int);
void play(void);

/* ram.c */
void ram(int, int );

/* ranf.c */
int ranf(int);
double franf(void);

/* rest.c */
void rest(int);

/* schedule.c */
struct event *schedule(int, double, int, int , int);
void reschedule(struct event *, double);
void unschedule(struct event *);
struct event *xsched(int, int, int, int , int );
void xresched(struct event *, int, int);

/* score.c */
long score(void);

/* setup.c */
void setup(void);

/* setwarp.c */
void setwarp(int);

/* shield.c */
void shield(int);

/* snova.c */
void snova(int, int );

/* srscan.c */
void srscan(int);

/* systemname.c */
const char *systemname(const struct quad *);

/* torped.c */
void torped(int);

/* visual.c */
void visual(int);

/* warp.c */
void dowarp(int);
void warp(int, int, double);

/* win.c */
void win(void);
@


1.12
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: trek.h,v 1.11 2010/04/30 19:29:01 jsg Exp $	*/
d57 1
a57 1
#define	NQUADS		8	/* dimension of galazy in quadrants */
@


1.11
log
@shuffle some things around to deal with incomplete types
gcc4 gets upset about.
based on suggestions from miod@@, ok millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: trek.h,v 1.10 2006/11/06 21:32:15 deraadt Exp $	*/
a33 2

#include <sys/cdefs.h>
@


1.10
log
@signed char fixes need to avoid infinite loops; pr5284 from
smallm@@panix.com
a very well written pr, very detailed... well worth reading
@
text
@d1 1
a1 1
/*	$OpenBSD: trek.h,v 1.9 2005/11/15 07:02:35 miod Exp $	*/
a212 3

extern const struct cvntab	Skitab[];
extern const struct cvntab	Lentab[];
@


1.9
log
@More typos (especially indicies -> indices), checked with jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: trek.h,v 1.8 2004/05/23 01:33:34 deraadt Exp $	*/
d66 1
a66 1
	char	holes;		/* number of black holes in this quadrant */
@


1.8
log
@cats ld showed that there was a common size mismatch...
@
text
@d1 1
a1 1
/*	$OpenBSD: trek.h,v 1.7 2003/06/03 03:01:42 millert Exp $	*/
d346 1
a346 1
/* Klingon move indicies */
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: trek.h,v 1.6 2002/02/16 21:27:12 millert Exp $	*/
d136 1
a136 1
const struct device	Device[NDEV];
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: trek.h,v 1.5 1999/07/31 18:49:00 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@Use const where appropriate:  jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: trek.h,v 1.4 1999/03/12 03:02:45 pjanzen Exp $	*/
d382 1
a382 1
void abandon __P((int));
d385 1
a385 1
void attack __P((int));
d388 1
a388 1
void autover __P((void));
d391 2
a392 2
void capture __P((int));
struct kling *selectklingon __P((void));
d395 1
a395 1
int check_out __P((int));
d398 1
a398 1
void checkcond __P((void));
d401 1
a401 1
void compkldist __P((int));
d404 1
a404 1
void computer __P((int));
d407 1
a407 1
void damage __P((int, double));
d410 1
a410 1
int damaged __P((int));
d413 1
a413 1
void dcrept __P((int));
d416 1
a416 1
void destruct __P((int));
d419 2
a420 2
void dock __P((int));
void undock __P((int));
d423 2
a424 2
void dumpgame __P((int));
int restartgame __P((void));
d427 1
a427 1
void dumpme __P((int));
d430 1
a430 1
int dumpssradio __P((void));
d433 1
a433 1
int events __P((int));
d438 1
a438 1
int getcodi __P((int *, double *));
d441 1
a441 1
void help __P((int));
d444 1
a444 1
void impulse __P((int));
d447 2
a448 2
void initquad __P((int));
void sector __P((int *, int *));
d451 4
a454 4
void killk __P((int, int ));
void killb __P((int, int ));
void kills __P((int, int , int));
void killd __P((int, int , int));
d457 1
a457 1
void klmove __P((int));
d460 1
a460 1
void lose __P((int));
d463 1
a463 1
void lrscan __P((int));
d466 1
a466 1
double move __P((int, int, double, double));
d469 1
a469 1
void nova __P((int, int ));
d472 1
a472 1
void out __P((int));
d475 1
a475 1
void phaser __P((int));
d478 2
a479 2
void myreset __P((int));
void play __P((void));
d482 1
a482 1
void ram __P((int, int ));
d485 2
a486 2
int ranf __P((int));
double franf __P((void));
d489 1
a489 1
void rest __P((int));
d492 5
a496 5
struct event *schedule __P((int, double, int, int , int));
void reschedule __P((struct event *, double));
void unschedule __P((struct event *));
struct event *xsched __P((int, int, int, int , int ));
void xresched __P((struct event *, int, int));
d499 1
a499 1
long score __P((void));
d502 1
a502 1
void setup __P((void));
d505 1
a505 1
void setwarp __P((int));
d508 1
a508 1
void shield __P((int));
d511 1
a511 1
void snova __P((int, int ));
d514 1
a514 1
void srscan __P((int));
d517 1
a517 1
const char *systemname __P((const struct quad *));
d520 1
a520 1
void torped __P((int));
d523 1
a523 1
void visual __P((int));
d526 2
a527 2
void dowarp __P((int));
void warp __P((int, int, double));
d530 1
a530 1
void win __P((void));
@


1.4
log
@Correct documentation, remove useless code, remove duplicate documentation,
don't compile with xTRACE defined, and trim things.
@
text
@d1 1
a1 1
/*	$OpenBSD: trek.h,v 1.3 1998/08/19 07:42:12 pjanzen Exp $	*/
d94 1
a94 1
extern char	*Systemname[NINHAB];
d136 2
a137 2
	char	*name;		/* device name */
	char	*person;	/* the person who fixes it */
d140 1
a140 1
struct device	Device[NDEV];
d218 2
a219 2
extern struct cvntab	Skitab[];
extern struct cvntab	Lentab[];
d248 1
a248 1
	char	*shipname;	/* name of current starship */
d517 1
a517 1
char *systemname __P((struct quad *));
@


1.3
log
@tags, formatting, ANSI-fication, prototypes, de-typos, and the occasional
initialization, removal of unused variable, or other minor fix.  Most
changes are from or inspired by NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a339 1
	char		fast;			/* set if speed > 300 baud */
d376 2
a377 1
#define	xTRACE		1
d379 1
a392 3

/* cgetc.c */
char cgetc __P((int));
@


1.2
log
@Changes from NetBSD to compile games without warnings due to short being
unsigned on some archs, PowerPC, ROMP.
@
text
@d1 1
d39 2
a58 10
/* external function definitions */
extern double	franf();	/* floating random number function */
extern double	sqrt();		/* square root */
extern double	sin(), cos();	/* trig functions */
extern double	atan2();	/* fancy arc tangent function */
extern double	log();		/* log base e */
extern double	pow();		/* power function */
extern double	fabs();		/* absolute value function */
extern double	exp();		/* exponential function */

d62 3
a64 3
# define	NSECTS		10	/* dimensions of quadrant in sectors */
# define	NQUADS		8	/* dimension of galazy in quadrants */
# define	NINHAB		32	/* number of quadrants which are inhabited */
d68 1
a68 1
	char	bases;		/* number of bases in this quadrant */
d76 2
a77 2
# define	Q_DISTRESSED	0200
# define	Q_SYSTEM	077
d100 8
a107 8
# define	EMPTY		'.'
# define	STAR		'*'
# define	BASE		'#'
# define	ENTERPRISE	'E'
# define	QUEENE		'Q'
# define	KLINGON		'K'
# define	INHABIT		'@@'
# define	HOLE		' '
d115 1
a115 1
# define	NDEV		16	/* max number of devices */
d118 14
a131 14
# define	WARP		0	/* warp engines */
# define	SRSCAN		1	/* short range scanners */
# define	LRSCAN		2	/* long range scanners */
# define	PHASER		3	/* phaser control */
# define	TORPED		4	/* photon torpedo control */
# define	IMPULSE		5	/* impulse engines */
# define	SHIELD		6	/* shield control */
# define	COMPUTER	7	/* on board computer */
# define	SSRADIO		8	/* subspace radio */
# define	LIFESUP		9	/* life support systems */
# define	SINS		10	/* Space Inertial Navigation System */
# define	CLOAK		11	/* cloaking device */
# define	XPORTER		12	/* transporter */
# define	SHUTTLE		13	/* shuttlecraft */
d144 1
a144 1
# define	NEVENTS		12	/* number of different event types */
d146 14
a159 14
# define	E_LRTB		1	/* long range tractor beam */
# define	E_KATSB		2	/* Klingon attacks starbase */
# define	E_KDESB		3	/* Klingon destroys starbase */
# define	E_ISSUE		4	/* distress call is issued */
# define	E_ENSLV		5	/* Klingons enslave a quadrant */
# define	E_REPRO		6	/* a Klingon is reproduced */
# define	E_FIXDV		7	/* fix a device */
# define	E_ATTACK	8	/* Klingon attack during rest period */
# define	E_SNAP		9	/* take a snapshot for time warp */
# define	E_SNOVA		10	/* supernova occurs */

# define	E_GHOST		0100	/* ghost of a distress call if ssradio out */
# define	E_HIDDEN	0200	/* event that is unreportable because ssradio out */
# define	E_EVENT		077	/* mask to get event code */
d163 4
a166 4
	char	x, y;			/* coordinates */
	double	date;			/* trap stardate */
	char	evcode;			/* event type */
	char	systemname;		/* starsystem name */
d178 1
a178 1
# define	MAXEVENTS	25	/* max number of concurrently pending events */
d186 1
a186 1
	char	x, y;		/* coordinates */
d193 1
a193 1
# define	MAXKLQUAD	9	/* maximum klingons per quadrant */
d198 4
a201 4
# define	GREEN		0
# define	DOCKED		1
# define	YELLOW		2
# define	RED		3
d204 1
a204 1
# define	MAXBASES	9	/* maximum number of starbases in galaxy */
d207 1
a207 1
# define	MAXDISTR	5	/* maximum concurrent distress calls */
d210 1
a210 1
# define	NBANKS		6	/* number of phaser banks */
d214 1
a214 1
	char	x, y;		/* coordinates */
d218 3
d246 1
a246 1
	char	cond;		/* condition code */
d288 1
a288 1
	char	bases;		/* number of starbases */
d324 1
a324 1
	char	bases;		/* number of starbases */
d352 6
a357 6
# define	KM_OB		0	/* Old quadrant, Before attack */
# define	KM_OA		1	/* Old quadrant, After attack */
# define	KM_EB		2	/* Enter quadrant, Before attack */
# define	KM_EA		3	/* Enter quadrant, After attack */
# define	KM_LB		4	/* Leave quadrant, Before attack */
# define	KM_LA		5	/* Leave quadrant, After attack */
d360 13
a372 13
# define	L_NOTIME	1	/* ran out of time */
# define	L_NOENGY	2	/* ran out of energy */
# define	L_DSTRYD	3	/* destroyed by a Klingon */
# define	L_NEGENB	4	/* ran into the negative energy barrier */
# define	L_SUICID	5	/* destroyed in a nova */
# define	L_SNOVA		6	/* destroyed in a supernova */
# define	L_NOLIFE	7	/* life support died (so did you) */
# define	L_NOHELP	8	/* you could not be rematerialized */
# define	L_TOOFAST	9	/* pretty stupid going at warp 10 */
# define	L_STAR		10	/* ran into a star */
# define	L_DSTRCT	11	/* self destructed */
# define	L_CAPTURED	12	/* captured by Klingons */
# define	L_NOCREW	13	/* you ran out of crew */
d377 1
a377 1
# define	xTRACE		1
d379 154
@


1.1
log
@Initial revision
@
text
@d79 1
a79 1
	char	stars;		/* number of stars in this quadrant */
d342 1
a342 1
	char		nkling;			/* number of Klingons in this sector */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
