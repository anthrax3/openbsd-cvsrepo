head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.8
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.10.0.12
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.8
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.28
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.24
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.01.07.14.37.51;	author mestre;	state Exp;
branches;
next	1.11;
commitid	cyBBZmhWXII305xB;

1.11
date	2016.01.07.14.30.32;	author mestre;	state Exp;
branches;
next	1.10;
commitid	7u0wG0oR4oWUoxID;

1.10
date	2013.06.02.04.28.39;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.27.23.59.27;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.07.10.00.03.01;	author david;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.31.04.21.30;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.12;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.07.31.18.48.58;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	99.03.12.03.02.40;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	98.08.19.07.41.20;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.24;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.24;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@ANSIfy trek(6)

Note: Binary change is introduced due to function schedule() where its args are
(int,double,char,char,char), but on trek.h are (int,double,int,int,int). Changed
to the latter since the 3 last args are coordinates.

OK tb@@
@
text
@/*	$OpenBSD: computer.c,v 1.11 2016/01/07 14:30:32 mestre Exp $	*/
/*	$NetBSD: computer.c,v 1.4 1995/04/24 12:25:51 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#include "getpar.h"
#include "trek.h"

/*
**  On-Board Computer
**
**	A computer request is fetched from the captain.  The requests
**	are:
**
**	chart -- print a star chart of the known galaxy.  This includes
**		every quadrant that has ever had a long range or
**		a short range scan done of it, plus the location of
**		all starbases.  This is of course updated by any sub-
**		space radio broadcasts (unless the radio is out).
**		The format is the same as that of a long range scan
**		except that ".1." indicates that a starbase exists
**		but we know nothing else.
**
**	trajectory -- gives the course and distance to every know
**		Klingon in the quadrant.  Obviously this fails if the
**		short range scanners are out.
**
**	course -- gives a course computation from whereever you are
**		to any specified location.  If the course begins
**		with a slash, the current quadrant is taken.
**		Otherwise the input is quadrant and sector coordi-
**		nates of the target sector.
**
**	move -- identical to course, except that the move is performed.
**
**	score -- prints out the current score.
**
**	pheff -- "PHaser EFFectiveness" at a given distance.  Tells
**		you how much stuff you need to make it work.
**
**	warpcost -- Gives you the cost in time and units to move for
**		a given distance under a given warp speed.
**
**	impcost -- Same for the impulse engines.
**
**	distresslist -- Gives a list of the currently known starsystems
**		or starbases which are distressed, together with their
**		quadrant coordinates.
**
**	If a command is terminated with a semicolon, you remain in
**	the computer; otherwise, you escape immediately to the main
**	command processor.
*/

struct cvntab	Cputab[] =
{
	{ "ch",		"art",			(cmdfun)1,		0 },
	{ "t",		"rajectory",		(cmdfun)2,		0 },
	{ "c",		"ourse",		(cmdfun)3,		0 },
	{ "m",		"ove",			(cmdfun)3,		1 },
	{ "s",		"core",			(cmdfun)4,		0 },
	{ "p",		"heff",			(cmdfun)5,		0 },
	{ "w",		"arpcost",		(cmdfun)6,		0 },
	{ "i",		"mpcost",		(cmdfun)7,		0 },
	{ "d",		"istresslist",		(cmdfun)8,		0 },
	{ NULL,		NULL,			NULL,			0 }
};

static int kalc(int, int, int, int, double *);
static void prkalc(int, double);

void
computer(int v)
{
	int			ix, iy;
	int			i, j;
	int			tqx, tqy;
	const struct cvntab	*r;
	int			cost;
	int			course;
	double			dist, time;
	double			warpfact;
	struct quad		*q;
	struct event		*e;

	if (check_out(COMPUTER))
		return;
	while (1)
	{
		r = getcodpar("\nRequest", Cputab);
		switch ((long)r->value)
		{

		  case 1:			/* star chart */
			printf("Computer record of galaxy for all long range sensor scans\n\n");
			printf("  ");
			/* print top header */
			for (i = 0; i < NQUADS; i++)
				printf("-%d- ", i);
			printf("\n");
			for (i = 0; i < NQUADS; i++)
			{
				printf("%d ", i);
				for (j = 0; j < NQUADS; j++)
				{
					if (i == Ship.quadx && j == Ship.quady)
					{
						printf("$$$ ");
						continue;
					}
					q = &Quad[i][j];
					/* 1000 or 1001 is special case */
					if (q->scanned >= 1000)
					{
						if (q->scanned > 1000)
							printf(".1. ");
						else
							printf("/// ");
					}
					else
						if (q->scanned < 0)
							printf("... ");
						else
							printf("%3d ", q->scanned);
				}
				printf("%d\n", i);
			}
			printf("  ");
			/* print bottom footer */
			for (i = 0; i < NQUADS; i++)
				printf("-%d- ", i);
			printf("\n");
			break;

		  case 2:			/* trajectory */
			if (check_out(SRSCAN))
			{
				break;
			}
			if (Etc.nkling <= 0)
			{
				printf("No Klingons in this quadrant\n");
				break;
			}
			/* for each Klingon, give the course & distance */
			for (i = 0; i < Etc.nkling; i++)
			{
				printf("Klingon at %d,%d", Etc.klingon[i].x, Etc.klingon[i].y);
				course = kalc(Ship.quadx, Ship.quady, Etc.klingon[i].x, Etc.klingon[i].y, &dist);
				prkalc(course, dist);
			}
			break;

		  case 3:			/* course calculation */
			if (readdelim('/'))
			{
				tqx = Ship.quadx;
				tqy = Ship.quady;
			}
			else
			{
				ix = getintpar("Quadrant");
				if (ix < 0 || ix >= NSECTS)
					break;
				iy = getintpar("q-y");
				if (iy < 0 || iy >= NSECTS)
					break;
				tqx = ix;
				tqy = iy;
			}
			ix = getintpar("Sector");
			if (ix < 0 || ix >= NSECTS)
				break;
			iy = getintpar("s-y");
			if (iy < 0 || iy >= NSECTS)
				break;
			course = kalc(tqx, tqy, ix, iy, &dist);
			if (r->value2)
			{
				warp(-1, course, dist);
				break;
			}
			printf("%d,%d/%d,%d to %d,%d/%d,%d",
				Ship.quadx, Ship.quady, Ship.sectx, Ship.secty, tqx, tqy, ix, iy);
			prkalc(course, dist);
			break;

		  case 4:			/* score */
			score();
			break;

		  case 5:			/* phaser effectiveness */
			dist = getfltpar("range");
			if (dist < 0.0)
				break;
			dist *= 10.0;
			cost = pow(0.90, dist) * 98.0 + 0.5;
			printf("Phasers are %d%% effective at that range\n", cost);
			break;

		  case 6:			/* warp cost (time/energy) */
			dist = getfltpar("distance");
			if (dist < 0.0)
				break;
			warpfact = getfltpar("warp factor");
			if (warpfact <= 0.0)
				warpfact = Ship.warp;
			cost = (dist + 0.05) * warpfact * warpfact * warpfact;
			time = Param.warptime * dist / (warpfact * warpfact);
			printf("Warp %.2f distance %.2f stardates %.2f cost %d (%d w/ shlds up) units\n",
				warpfact, dist, time, cost, cost + cost);
			break;

		  case 7:			/* impulse cost */
			dist = getfltpar("distance");
			if (dist < 0.0)
				break;
			cost = 20 + 100 * dist;
			time = dist / 0.095;
			printf("Distance %.2f cost %.2f stardates %d units\n",
				dist, time, cost);
			break;

		  case 8:			/* distresslist */
			j = 1;
			printf("\n");
			/* scan the event list */
			for (i = 0; i < MAXEVENTS; i++)
			{
				e = &Event[i];
				/* ignore hidden entries */
				if (e->evcode & E_HIDDEN)
					continue;
				switch (e->evcode & E_EVENT)
				{

				  case E_KDESB:
					printf("Klingon is attacking starbase in quadrant %d,%d\n",
						e->x, e->y);
					j = 0;
					break;

				  case E_ENSLV:
				  case E_REPRO:
					printf("Starsystem %s in quadrant %d,%d is distressed\n",
						Systemname[e->systemname], e->x, e->y);
					j = 0;
					break;
				}
			}
			if (j)
				printf("No known distress calls are active\n");
			break;

		}

		/* skip to next semicolon or newline.  Semicolon
		 * means get new computer request; newline means
		 * exit computer mode. */
		while ((i = getchar()) != ';')
		{
			if (i == '\0')
				exit(1);
			if (i == '\n')
			{
				ungetc(i, stdin);
				return;
			}
		}
	}
}


/*
**  Course Calculation
**
**	Computes and outputs the course and distance from position
**	sqx,sqy/ssx,ssy to tqx,tqy/tsx,tsy.
*/

static int
kalc(int tqx, int tqy, int tsx, int tsy, double *dist)
{
	double		dx, dy;
	double		quadsize;
	double		angle;
	int		course;

	/* normalize to quadrant distances */
	quadsize = NSECTS;
	dx = (Ship.quadx + Ship.sectx / quadsize) - (tqx + tsx / quadsize);
	dy = (tqy + tsy / quadsize) - (Ship.quady + Ship.secty / quadsize);

	/* get the angle */
	angle = atan2(dy, dx);
	/* make it 0 -> 2 pi */
	if (angle < 0.0)
		angle += 6.283185307;
	/* convert from radians to degrees */
	course = angle * 57.29577951 + 0.5;
	dx = dx * dx + dy * dy;
	*dist = sqrt(dx);
	return (course);
}

static void
prkalc(int course, double dist)
{
	printf(": course %d  dist %.3f\n", course, dist);
}
@


1.11
log
@Remove unnecessary headers and sort the remaining alphabetically

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: computer.c,v 1.10 2013/06/02 04:28:39 schwarze Exp $	*/
d104 1
a104 2
computer(v)
	int v;
d313 1
a313 6
kalc(tqx, tqy, tsx, tsy, dist)
	int	tqx;
	int	tqy;
	int	tsx;
	int	tsy;
	double	*dist;
d338 1
a338 3
prkalc(course, dist)
	int	course;
	double	dist;
@


1.10
log
@Correct obviously exchanged labels in the "computer warpcost" output and
fix a typo in a comment; from <Ted dot Roby at gmail dot com> on tech@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: computer.c,v 1.9 2009/10/27 23:59:27 deraadt Exp $	*/
d33 1
d36 2
a37 1
#include <math.h>
a38 1
#include "getpar.h"
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: computer.c,v 1.8 2003/07/10 00:03:01 david Exp $	*/
d241 1
a241 1
			printf("Warp %.2f distance %.2f cost %.2f stardates %d (%d w/ shlds up) units\n",
@


1.8
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: computer.c,v 1.7 2003/06/03 03:01:41 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)computer.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: computer.c,v 1.7 2003/06/03 03:01:41 millert Exp $";
#endif
#endif /* not lint */
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: computer.c,v 1.6 2002/05/31 04:21:30 pjanzen Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: computer.c,v 1.6 2002/05/31 04:21:30 pjanzen Exp $";
d42 1
@


1.6
log
@de-register
@
text
@d1 1
a1 1
/*	$OpenBSD: computer.c,v 1.5 2002/02/16 21:27:12 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: computer.c,v 1.5 2002/02/16 21:27:12 millert Exp $";
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: computer.c,v 1.4 1999/07/31 18:48:58 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: computer.c,v 1.4 1999/07/31 18:48:58 pjanzen Exp $";
d118 1
a118 1
	register int		i, j;
d120 1
a120 1
	const struct cvntab		*r;
d126 1
a126 1
	register struct event	*e;
d331 4
a334 4
	double			dx, dy;
	double			quadsize;
	double			angle;
	register int		course;
@


1.4
log
@Use const where appropriate:  jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: computer.c,v 1.3 1999/03/12 03:02:40 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: computer.c,v 1.3 1999/03/12 03:02:40 pjanzen Exp $";
d110 2
a111 2
static int kalc __P((int, int, int, int, double *));
static void prkalc __P((int, double));
@


1.3
log
@Correct documentation, remove useless code, remove duplicate documentation,
don't compile with xTRACE defined, and trim things.
@
text
@d1 1
a1 1
/*	$OpenBSD: computer.c,v 1.2 1998/08/19 07:41:20 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: computer.c,v 1.2 1998/08/19 07:41:20 pjanzen Exp $";
d120 1
a120 1
	struct cvntab		*r;
@


1.2
log
@tags, formatting, ANSI-fication, prototypes, de-typos, and the occasional
initialization, removal of unused variable, or other minor fix.  Most
changes are from or inspired by NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d302 1
a302 1
		while ((i = cgetc(0)) != ';')
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: computer.c,v 1.4 1995/04/24 12:25:51 cgd Exp $";
d45 5
a49 3
# include	"trek.h"
# include	"getpar.h"
# include	<stdio.h>
d98 10
a107 10
	"ch",			"art",			(int (*)())1,		0,
	"t",			"rajectory",		(int (*)())2,		0,
	"c",			"ourse",		(int (*)())3,		0,
	"m",			"ove",			(int (*)())3,		1,
	"s",			"core",			(int (*)())4,		0,
	"p",			"heff",			(int (*)())5,		0,
	"w",			"arpcost",		(int (*)())6,		0,
	"i",			"mpcost",		(int (*)())7,		0,
	"d",			"istresslist",		(int (*)())8,		0,
	0
d110 6
a115 1
computer()
a118 1
	int			numout;
d156 1
d161 1
d323 1
d325 5
a329 5
int	tqx;
int	tqy;
int	tsx;
int	tsy;
double	*dist;
d353 1
a353 1

d355 2
a356 2
int	course;
double	dist;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
