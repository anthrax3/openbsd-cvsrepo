head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.26
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.18
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.22
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.20
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.5.0.28
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.24
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.22
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.20
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.18
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.16
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.14
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.18
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.16
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.14
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.12
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.10
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.8
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	GOMOKU:1.1.1.1
	BSDGAMES:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.01.08.21.38.33;	author mestre;	state Exp;
branches;
next	1.7;
commitid	uLyOQtYIyaVyqJOK;

1.7
date	2016.01.04.17.33.24;	author mestre;	state Exp;
branches;
next	1.6;
commitid	b21xvsfCGMtCOVrz;

1.6
date	2009.10.27.23.59.24;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.03.03.01.39;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.31.04.21.30;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.03.26.21.16.43;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	96.12.21.21.17.49;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	96.12.16.06.56.07;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.16.06.56.07;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.8
log
@ANSIfy gomoku(6) and change a char* to u_char*

OK tb@@
@
text
@/*	$OpenBSD: bdinit.c,v 1.7 2016/01/04 17:33:24 mestre Exp $	*/
/*
 * Copyright (c) 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <string.h>

#include "gomoku.h"

void
bdinit(struct spotstr *bp)
{
	int i, j, r;
	struct spotstr *sp;
	struct combostr *cbp;

	movenum = 1;

	/* mark the borders as such */
	sp = bp;
	for (i = BSZ2; --i >= 0; sp++) {
		sp->s_occ = BORDER;		/* top border */
		sp->s_flg = BFLAGALL;
	}

	/* fill entire board with EMPTY spots */
	memset(frames, 0, sizeof(frames));
	cbp = frames;
	for (j = 0; ++j < BSZ1; sp++) {			/* for each row */
		for (i = 0; ++i < BSZ1; sp++) {		/* for each column */
			sp->s_occ = EMPTY;
			sp->s_flg = 0;
			sp->s_wval = 0;
			if (j < 5) {
				/* directions 1, 2, 3 are blocked */
				sp->s_flg |= (BFLAG << 1) | (BFLAG << 2) |
					(BFLAG << 3);
				sp->s_fval[BLACK][1].s = MAXCOMBO;
				sp->s_fval[BLACK][2].s = MAXCOMBO;
				sp->s_fval[BLACK][3].s = MAXCOMBO;
				sp->s_fval[WHITE][1].s = MAXCOMBO;
				sp->s_fval[WHITE][2].s = MAXCOMBO;
				sp->s_fval[WHITE][3].s = MAXCOMBO;
			} else if (j == 5) {
				/* five spaces, blocked on one side */
				sp->s_fval[BLACK][1].s = 0x500;
				sp->s_fval[BLACK][2].s = 0x500;
				sp->s_fval[BLACK][3].s = 0x500;
				sp->s_fval[WHITE][1].s = 0x500;
				sp->s_fval[WHITE][2].s = 0x500;
				sp->s_fval[WHITE][3].s = 0x500;
			} else {
				/* six spaces, not blocked */
				sp->s_fval[BLACK][1].s = 0x401;
				sp->s_fval[BLACK][2].s = 0x401;
				sp->s_fval[BLACK][3].s = 0x401;
				sp->s_fval[WHITE][1].s = 0x401;
				sp->s_fval[WHITE][2].s = 0x401;
				sp->s_fval[WHITE][3].s = 0x401;
			}
			if (i > (BSZ - 4)) {
				/* directions 0, 1 are blocked */
				sp->s_flg |= BFLAG | (BFLAG << 1);
				sp->s_fval[BLACK][0].s = MAXCOMBO;
				sp->s_fval[BLACK][1].s = MAXCOMBO;
				sp->s_fval[WHITE][0].s = MAXCOMBO;
				sp->s_fval[WHITE][1].s = MAXCOMBO;
			} else if (i == (BSZ - 4)) {
				sp->s_fval[BLACK][0].s = 0x500;
				sp->s_fval[WHITE][0].s = 0x500;
				/* if direction 1 is not blocked */
				if (!(sp->s_flg & (BFLAG << 1))) {
					sp->s_fval[BLACK][1].s = 0x500;
					sp->s_fval[WHITE][1].s = 0x500;
				}
			} else {
				sp->s_fval[BLACK][0].s = 0x401;
				sp->s_fval[WHITE][0].s = 0x401;
				if (i < 5) {
					/* direction 3 is blocked */
					sp->s_flg |= (BFLAG << 3);
					sp->s_fval[BLACK][3].s = MAXCOMBO;
					sp->s_fval[WHITE][3].s = MAXCOMBO;
				} else if (i == 5 &&
				    !(sp->s_flg & (BFLAG << 3))) {
					sp->s_fval[BLACK][3].s = 0x500;
					sp->s_fval[WHITE][3].s = 0x500;
				}
			}
			/*
			 * Allocate a frame structure for non blocked frames.
			 */
			for (r = 4; --r >= 0; ) {
				if (sp->s_flg & (BFLAG << r))
					continue;
				cbp->c_combo.s = sp->s_fval[BLACK][r].s;
				cbp->c_vertex = sp - board;
				cbp->c_nframes = 1;
				cbp->c_dir = r;
				sp->s_frame[r] = cbp;
				cbp++;
			}
		}
		sp->s_occ = BORDER;		/* left & right border */
		sp->s_flg = BFLAGALL;
	}

	/* mark the borders as such */
	for (i = BSZ1; --i >= 0; sp++) {
		sp->s_occ = BORDER;		/* bottom border */
		sp->s_flg = BFLAGALL;
	}

	sortframes[BLACK] = (struct combostr *)0;
	sortframes[WHITE] = (struct combostr *)0;
	init_overlap();
}

/*
 * Initialize the overlap array.
 * Each entry in the array is a bit mask with eight bits corresponding
 * to whether frame B overlaps frame A (as indexed by overlap[A * FAREA + B]).
 * The eight bits coorespond to whether A and B are open ended (length 6) or
 * closed (length 5).
 *	0	A closed and B closed
 *	1	A closed and B open
 *	2	A open and B closed
 *	3	A open and B open
 *	4	A closed and B closed and overlaps in more than one spot
 *	5	A closed and B open and overlaps in more than one spot
 *	6	A open and B closed and overlaps in more than one spot
 *	7	A open and B open and overlaps in more than one spot
 * As pieces are played, it can make frames not overlap if there are no
 * common open spaces shared between the two frames.
 */
void
init_overlap(void)
{
	struct spotstr *sp1, *sp2;
	struct combostr *cbp;
	int i, f, r, n, d1, d2;
	int mask, bmask, vertex, s;
	u_char *str;
	short *ip;

	memset(overlap, 0, sizeof(overlap));
	memset(intersect, 0, sizeof(intersect));
	str = &overlap[FAREA * FAREA];
	ip = &intersect[FAREA * FAREA];
	for (cbp = frames + FAREA; --cbp >= frames; ) {		/* each frame */
	    str -= FAREA;
	    ip -= FAREA;
	    sp1 = &board[vertex = cbp->c_vertex];
	    d1 = dd[r = cbp->c_dir];
	    /*
	     * s = 5 if closed, 6 if open.
	     * At this point black & white are the same.
	     */
	    s = 5 + sp1->s_fval[BLACK][r].c.b;
	    /* for each spot in frame A */
	    for (i = 0; i < s; i++, sp1 += d1, vertex += d1) {
		/* the sixth spot in frame A only overlaps if it is open */
		mask = (i == 5) ? 0xC : 0xF;
		/* for each direction */
		for (r = 4; --r >= 0; ) {
		    bmask = BFLAG << r;
		    sp2 = sp1;
		    d2 = dd[r];
		    /* for each frame that intersects at spot sp1 */
		    for (f = 0; f < 6; f++, sp2 -= d2) {
			if (sp2->s_occ == BORDER)
			    break;
			if (sp2->s_flg & bmask)
			    continue;
			n = sp2->s_frame[r] - frames;
			ip[n] = vertex;
			str[n] |= (f == 5) ? mask & 0xA : mask;
			if (r == cbp->c_dir) {
			    /* compute the multiple spot overlap values */
			    switch (i) {
			    case 0:	/* sp1 is the first spot in A */
				if (f == 4)
				    str[n] |= 0xA0;
				else if (f != 5)
				    str[n] |= 0xF0;
				break;
			    case 1:	/* sp1 is the second spot in A */
				if (f == 5)
				    str[n] |= 0xA0;
				else
				    str[n] |= 0xF0;
				break;
			    case 4:	/* sp1 is the penultimate spot in A */
				if (f == 0)
				    str[n] |= 0xC0;
				else
				    str[n] |= 0xF0;
				break;
			    case 5:	/* sp1 is the last spot in A */
				if (f == 1)
				    str[n] |= 0xC0;
				else if (f != 0)
				    str[n] |= 0xF0;
				break;
			    default:
				str[n] |= 0xF0;
			    }
			}
		    }
		}
	    }
	}
}
@


1.7
log
@More cleanup and sorting on header section

OK tb@@ and he also pointed out that for consistency with rest of the tree we
should include termios.h instead of sys/ttydefaults.h, where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: bdinit.c,v 1.6 2009/10/27 23:59:24 deraadt Exp $	*/
d39 1
a39 2
bdinit(bp)
	struct spotstr *bp;
d165 1
a165 1
init_overlap()
@


1.6
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: bdinit.c,v 1.5 2003/06/03 03:01:39 millert Exp $	*/
d34 2
a36 1
#include <string.h>
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: bdinit.c,v 1.4 2002/05/31 04:21:30 pjanzen Exp $	*/
a32 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)bdinit.c	8.2 (Berkeley) 5/3/95";
#else
static char rcsid[] = "$OpenBSD: bdinit.c,v 1.4 2002/05/31 04:21:30 pjanzen Exp $";
#endif
#endif /* not lint */
@


1.4
log
@de-register
@
text
@d1 1
a1 1
/*	$OpenBSD: bdinit.c,v 1.3 1998/03/26 21:16:43 pjanzen Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d38 1
a38 1
static char rcsid[] = "$OpenBSD: bdinit.c,v 1.3 1998/03/26 21:16:43 pjanzen Exp $";
@


1.3
log
@improved interactive input and minor tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: bdinit.c,v 1.2 1996/12/21 21:17:49 tholo Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD$";
d53 3
a55 3
	register int i, j, r;
	register struct spotstr *sp;
	register struct combostr *cbp;
d179 3
a181 3
	register struct spotstr *sp1, *sp2;
	register struct combostr *cbp;
	register int i, f, r, n, d1, d2;
@


1.2
log
@Clean up lint and -Wall output
@
text
@d1 1
a1 1
/*	$OpenBSD: bdinit.c,v 1.1.1.1 1996/12/16 06:56:07 downsj Exp $	*/
d39 1
d41 3
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
a43 1
#include "gomoku.h"
d45 1
d172 1
@


1.1.1.1
log
@Import of gomoku from 4.4BSD Lite2.  Uses ocurses.
@
text
@@
