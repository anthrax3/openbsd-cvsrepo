head	1.32;
access;
symbols
	OPENBSD_6_1_BASE:1.32
	OPENBSD_6_0:1.32.0.4
	OPENBSD_6_0_BASE:1.32
	OPENBSD_5_9:1.32.0.2
	OPENBSD_5_9_BASE:1.32
	OPENBSD_5_8:1.27.0.6
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.27.0.2
	OPENBSD_5_7_BASE:1.27
	OPENBSD_5_6:1.24.0.6
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.4
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.23.0.6
	OPENBSD_5_4_BASE:1.23
	OPENBSD_5_3:1.23.0.4
	OPENBSD_5_3_BASE:1.23
	OPENBSD_5_2:1.23.0.2
	OPENBSD_5_2_BASE:1.23
	OPENBSD_5_1_BASE:1.22
	OPENBSD_5_1:1.22.0.10
	OPENBSD_5_0:1.22.0.8
	OPENBSD_5_0_BASE:1.22
	OPENBSD_4_9:1.22.0.6
	OPENBSD_4_9_BASE:1.22
	OPENBSD_4_8:1.22.0.4
	OPENBSD_4_8_BASE:1.22
	OPENBSD_4_7:1.22.0.2
	OPENBSD_4_7_BASE:1.22
	OPENBSD_4_6:1.21.0.8
	OPENBSD_4_6_BASE:1.21
	OPENBSD_4_5:1.21.0.4
	OPENBSD_4_5_BASE:1.21
	OPENBSD_4_4:1.21.0.2
	OPENBSD_4_4_BASE:1.21
	OPENBSD_4_3:1.20.0.4
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.2
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.19.0.2
	OPENBSD_4_1_BASE:1.19
	OPENBSD_4_0:1.17.0.12
	OPENBSD_4_0_BASE:1.17
	OPENBSD_3_9:1.17.0.10
	OPENBSD_3_9_BASE:1.17
	OPENBSD_3_8:1.17.0.8
	OPENBSD_3_8_BASE:1.17
	OPENBSD_3_7:1.17.0.6
	OPENBSD_3_7_BASE:1.17
	OPENBSD_3_6:1.17.0.4
	OPENBSD_3_6_BASE:1.17
	OPENBSD_3_5:1.17.0.2
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.16.0.2
	OPENBSD_3_4_BASE:1.16
	OPENBSD_3_3:1.13.0.2
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.6
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.8.0.12
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.10
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.8
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.8.0.6
	OPENBSD_2_5_BASE:1.8
	OPENBSD_2_4:1.8.0.4
	OPENBSD_2_4_BASE:1.8
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.7.0.4
	OPENBSD_2_2_BASE:1.7
	OPENBSD_2_1:1.7.0.2
	OPENBSD_2_1_BASE:1.7
	GOMOKU:1.1.1.1
	BSDGAMES:1.1.1;
locks; strict;
comment	@ * @;


1.32
date	2016.01.08.21.38.33;	author mestre;	state Exp;
branches;
next	1.31;
commitid	uLyOQtYIyaVyqJOK;

1.31
date	2016.01.07.16.00.32;	author tb;	state Exp;
branches;
next	1.30;
commitid	IwzFE3fG5RnKTWNh;

1.30
date	2015.12.06.12.00.16;	author tobias;	state Exp;
branches;
next	1.29;
commitid	CoyY8UEEpJPwBza5;

1.29
date	2015.11.30.08.44.51;	author tb;	state Exp;
branches;
next	1.28;
commitid	MGY8s6NSn9aRO4su;

1.28
date	2015.11.04.21.22.10;	author tedu;	state Exp;
branches;
next	1.27;
commitid	XDKIiXhFNs4jqYjv;

1.27
date	2014.12.07.19.56.19;	author deraadt;	state Exp;
branches;
next	1.26;
commitid	RcHvfHykZdZlcvl5;

1.26
date	2014.12.05.00.48.57;	author deraadt;	state Exp;
branches;
next	1.25;
commitid	M0kF4Q4Kh7PW1QEn;

1.25
date	2014.11.16.04.49.48;	author guenther;	state Exp;
branches;
next	1.24;
commitid	8XNajyb9IqHkZEKg;

1.24
date	2013.08.29.20.22.13;	author naddy;	state Exp;
branches;
next	1.23;

1.23
date	2012.03.04.04.05.15;	author fgsch;	state Exp;
branches;
next	1.22;

1.22
date	2009.10.27.23.59.24;	author deraadt;	state Exp;
branches;
next	1.21;

1.21
date	2008.03.17.09.17.56;	author sobrado;	state Exp;
branches;
next	1.20;

1.20
date	2007.04.02.14.33.37;	author jmc;	state Exp;
branches;
next	1.19;

1.19
date	2006.12.24.14.14.02;	author martin;	state Exp;
branches;
next	1.18;

1.18
date	2006.12.14.10.15.09;	author martin;	state Exp;
branches;
next	1.17;

1.17
date	2004.01.16.00.13.19;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.03.03.01.39;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.25.21.21.28;	author tdeval;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.06.18.50.37;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2002.12.06.21.48.51;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.31.03.40.00;	author pjanzen;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.30.04.40.07;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	2001.02.17.23.01.04;	author pjanzen;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.17.22.38.06;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	98.03.26.21.16.49;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	97.01.26.08.00.53;	author downsj;	state Exp;
branches;
next	1.6;

1.6
date	97.01.15.23.40.49;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	96.12.22.20.01.16;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.12.21.21.17.51;	author tholo;	state Exp;
branches;
next	1.3;

1.3
date	96.12.20.00.22.21;	author downsj;	state Exp;
branches;
next	1.2;

1.2
date	96.12.19.22.21.28;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	96.12.16.06.56.08;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.16.06.56.08;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.32
log
@ANSIfy gomoku(6) and change a char* to u_char*

OK tb@@
@
text
@/*	$OpenBSD: main.c,v 1.31 2016/01/07 16:00:32 tb Exp $	*/
/*
 * Copyright (c) 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <curses.h>
#include <err.h>
#include <limits.h>
#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "gomoku.h"

#define USER	0		/* get input from standard input */
#define PROGRAM	1		/* get input from program */
#define INPUTF	2		/* get input from a file */

extern char *__progname;	/* name of program */

int	interactive = 1;	/* true if interactive */
int	debug;			/* true if debugging */
int	test;			/* both moves come from 1: input, 2: computer */
FILE	*debugfp;		/* file for debug output */
FILE	*inputfp;		/* file for debug input */

char	pdir[4]		= "-\\|/";
char	fmtbuf[128];

struct	spotstr	board[BAREA];		/* info for board */
struct	combostr frames[FAREA];		/* storage for all frames */
struct	combostr *sortframes[2];	/* sorted list of non-empty frames */
u_char	overlap[FAREA * FAREA];		/* true if frame [a][b] overlap */
short	intersect[FAREA * FAREA];	/* frame [a][b] intersection */
int	movelog[BSZ * BSZ];		/* log of all the moves */
int	movenum;			/* current move number */
char	*plyr[2];			/* who's who */

static char you[LOGIN_NAME_MAX];	/* username */

int
main(int argc, char **argv)
{
	char buf[128];
	char fname[PATH_MAX];
	int color = BLACK, curmove = 0, i, ch;
	int input[2];
	static char *fmt[2] = {
		"%3d %-6s",
		"%3d        %-6s"
	};
	char *tmpname;

	if (pledge("stdio rpath wpath cpath tty", NULL) == -1)
		err(1, "pledge");

	if ((tmpname = getlogin()) != NULL)
		strlcpy(you, tmpname, sizeof(you));
	else
		strlcpy(you, "you", sizeof(you));

	while ((ch = getopt(argc, argv, "bcdD:hu")) != -1) {
		switch (ch) {
		case 'b':	/* background */
			interactive = 0;
			break;
		case 'd':	/* debugging */
			debug++;
			break;
		case 'D':	/* log debug output to file */
			if ((debugfp = fopen(optarg, "w")) == NULL)
				err(1, "%s", optarg);
			break;
		case 'u':	/* testing: user versus user */
			test = 1;
			break;
		case 'c':	/* testing: computer versus computer */
			test = 2;
			break;
		case 'h':
		default:
			fprintf(stderr,
			    "usage: %s [-bcdu] [-D debugfile] [inputfile]\n",
			    __progname);
			return 1;
		}
	}
	argc -= optind;
	argv += optind;
	if (argc) {
		if ((inputfp = fopen(*argv, "r")) == NULL)
			err(1, "%s", *argv);
	}

	if (interactive)
		cursinit();		/* initialize curses */
again:
	bdinit(board);			/* initialize board contents */

	if (interactive) {
		plyr[BLACK] = plyr[WHITE] = "???";
		bdisp_init();		/* initialize display of board */
#ifdef DEBUG
		signal(SIGINT, whatsup);
#else
		signal(SIGINT, quit);
#endif

		if (inputfp == NULL && test == 0) {
			ask("black or white? ");
			while (((ch = getchar()) != 'b') && (ch != 'B') &&
				(ch != 'w') && (ch != 'W')) {
				move(BSZ3, 0);
				printw("Black moves first. Please enter `black' or `white'\n");
				refresh();
			}
			if (ch == 'b' || ch == 'B')
				color = BLACK;
			else
				color = WHITE;
			move(BSZ3, 0);
			clrtoeol();
		}
	} else {
		setvbuf(stdout, NULL, _IONBF, 0);
		get_line(buf, sizeof(buf));
		if (strcmp(buf, "black") == 0)
			color = BLACK;
		else if (strcmp(buf, "white") == 0)
			color = WHITE;
		else {
			snprintf(fmtbuf, sizeof fmtbuf,
			    "Huh?  Expected `black' or `white', got `%s'\n",
			    buf);
			panic(fmtbuf);
		}
	}

	if (inputfp) {
		input[BLACK] = INPUTF;
		input[WHITE] = INPUTF;
	} else {
		switch (test) {
		case 0: /* user versus program */
			input[color] = USER;
			input[!color] = PROGRAM;
			break;

		case 1: /* user versus user */
			input[BLACK] = USER;
			input[WHITE] = USER;
			break;

		case 2: /* program versus program */
			input[BLACK] = PROGRAM;
			input[WHITE] = PROGRAM;
			break;
		}
	}
	if (interactive) {
		plyr[BLACK] = input[BLACK] == USER ? you : __progname;
		plyr[WHITE] = input[WHITE] == USER ? you : __progname;
		bdwho(1);
	}

	for (color = BLACK; ; color = !color) {
	top:
		switch (input[color]) {
		case INPUTF: /* input comes from a file */
			curmove = readinput(inputfp);
			if (curmove != ILLEGAL)
				break;
			switch (test) {
			case 0: /* user versus program */
				input[color] = USER;
				input[!color] = PROGRAM;
				break;

			case 1: /* user versus user */
				input[BLACK] = USER;
				input[WHITE] = USER;
				break;

			case 2: /* program versus program */
				input[BLACK] = PROGRAM;
				input[WHITE] = PROGRAM;
				break;
			}
			plyr[BLACK] = input[BLACK] == USER ? you : __progname;
			plyr[WHITE] = input[WHITE] == USER ? you : __progname;
			bdwho(1);
			goto top;

		case USER: /* input comes from standard input */
		getinput:
			if (interactive) {
				ask("Enter move (hjklyubn/S/Q)");
				curmove = getcoord();
				if (curmove == SAVE) {
					FILE *fp;

					ask("save file name? ");
					(void)get_line(fname, sizeof(fname));
					if ((fp = fopen(fname, "w")) == NULL) {
						logit("cannot create save file");
						goto getinput;
					}
					for (i = 0; i < movenum - 1; i++)
						fprintf(fp, "%s\n",
							stoc(movelog[i]));
					fclose(fp);
					goto getinput;
				}
				if (curmove != RESIGN &&
				    board[curmove].s_occ != EMPTY) {
				/*	logit("Illegal move"); */
					beep();
					goto getinput;
				}
			} else {
				if (!get_line(buf, sizeof(buf))) {
					curmove = RESIGN;
					break;
				}
				if (buf[0] == '\0')
					goto getinput;
				curmove = ctos(buf);
			}
			break;

		case PROGRAM: /* input comes from the program */
			if (interactive)
				ask("Thinking...");
			curmove = pickmove(color);
			break;
		}
		if (interactive) {
			snprintf(fmtbuf, sizeof fmtbuf,
				fmt[color], movenum, stoc(curmove));
			logit(fmtbuf);
		}
		if ((i = makemove(color, curmove)) != MOVEOK)
			break;
		if (interactive)
			bdisp();
	}
	if (interactive) {
		move(BSZ3, 0);
		switch (i) {
		case WIN:
			if (input[color] == PROGRAM)
				addstr("Ha ha, I won");
			else
				if (input[0] == USER && input[1] == USER)
					addstr("Well, you won (and lost).");
				else
					addstr("Rats! You won");
			break;
		case TIE:
			addstr("Wow! its a tie");
			break;
		case ILLEGAL:
			addstr("Illegal move");
			break;
		}
		clrtoeol();
		bdisp();
		if (i != RESIGN) {
		replay:
			ask("replay? ");
			if (get_line(buf, sizeof(buf)) &&
			    (buf[0] == 'y' || buf[0] == 'Y'))
				goto again;
			if (strcmp(buf, "save") == 0) {
				FILE *fp;

				ask("save file name? ");
				(void)get_line(buf, sizeof(buf));
				if ((fp = fopen(buf, "w")) == NULL) {
					logit("cannot create save file");
					goto replay;
				}
				for (i = 0; i < movenum - 1; i++)
					fprintf(fp, "%s\n",
						stoc(movelog[i]));
				fclose(fp);
				goto replay;
			}
		}
	}
	quit(0);
}

int
readinput(FILE *fp)
{
	char *cp;
	int c;

	cp = fmtbuf;
	while ((c = getc(fp)) != EOF && c != '\n')
		*cp++ = c;
	*cp = '\0';
	return (ctos(fmtbuf));
}

#ifdef DEBUG
/*
 * Handle strange situations.
 */
void
whatsup(int signum)
{
	int i, pnum, n, s1, s2, d1, d2;
	struct spotstr *sp;
	FILE *fp;
	char *str;
	struct elist *ep;
	struct combostr *cbp;

	if (!interactive)
		quit(0);
top:
	ask("cmd? ");
	if (!get_line(fmtbuf, sizeof(fmtbuf)))
		quit(0);
	switch (*fmtbuf) {
	case '\0':
		goto top;
	case 'q':		/* conservative quit */
		quit(0);
	case 'd':		/* set debug level */
		debug = fmtbuf[1] - '0';
		snprintf(fmtbuf, sizeof fmtbuf,
			"Debug set to %d", debug);
		dlog(fmtbuf);
		sleep(1);
	case 'c':
		break;
	case 'b':		/* back up a move */
		if (movenum > 1) {
			movenum--;
			board[movelog[movenum - 1]].s_occ = EMPTY;
			bdisp();
		}
		goto top;
	case 's':		/* suggest a move */
		i = fmtbuf[1] == 'b' ? BLACK : WHITE;
		snprintf(fmtbuf, sizeof fmtbuf,
			"suggest %c %s", i == BLACK ? 'B' : 'W',
			stoc(pickmove(i)));
		dlog(fmtbuf);
		goto top;
	case 'f':		/* go forward a move */
		board[movelog[movenum - 1]].s_occ = movenum & 1 ? BLACK : WHITE;
		movenum++;
		bdisp();
		goto top;
	case 'l':		/* print move history */
		if (fmtbuf[1] == '\0') {
			for (i = 0; i < movenum - 1; i++)
				dlog(stoc(movelog[i]));
			goto top;
		}
		if ((fp = fopen(fmtbuf + 1, "w")) == NULL)
			goto top;
		for (i = 0; i < movenum - 1; i++) {
			fprintf(fp, "%s", stoc(movelog[i]));
			if (++i < movenum - 1)
				fprintf(fp, " %s\n", stoc(movelog[i]));
			else
				fputc('\n', fp);
		}
		bdump(fp);
		fclose(fp);
		goto top;
	case 'o':
		n = 0;
		for (str = fmtbuf + 1; *str; str++)
			if (*str == ',') {
				for (d1 = 0; d1 < 4; d1++)
					if (str[-1] == pdir[d1])
						break;
				str[-1] = '\0';
				sp = &board[s1 = ctos(fmtbuf + 1)];
				n = (sp->s_frame[d1] - frames) * FAREA;
				*str++ = '\0';
				break;
			}
		sp = &board[s2 = ctos(str)];
		while (*str)
			str++;
		for (d2 = 0; d2 < 4; d2++)
			if (str[-1] == pdir[d2])
				break;
		n += sp->s_frame[d2] - frames;
		str = fmtbuf;
		snprintf(str, fmtbuf + sizeof fmtbuf - str,
		    "overlap %s%c,", stoc(s1), pdir[d1]);
		str += strlen(str);
		snprintf(str, fmtbuf + sizeof fmtbuf - str,
		    "%s%c = %x", stoc(s2), pdir[d2], overlap[n]);
		dlog(fmtbuf);
		goto top;
	case 'p':
		sp = &board[i = ctos(fmtbuf + 1)];
		snprintf(fmtbuf, sizeof fmtbuf,
			"V %s %x/%d %d %x/%d %d %d %x", stoc(i),
			sp->s_combo[BLACK].s, sp->s_level[BLACK],
			sp->s_nforce[BLACK],
			sp->s_combo[WHITE].s, sp->s_level[WHITE],
			sp->s_nforce[WHITE], sp->s_wval, sp->s_flg);
		dlog(fmtbuf);
		snprintf(fmtbuf, sizeof fmtbuf,
			"FB %s %x %x %x %x", stoc(i),
			sp->s_fval[BLACK][0].s, sp->s_fval[BLACK][1].s,
			sp->s_fval[BLACK][2].s, sp->s_fval[BLACK][3].s);
		dlog(fmtbuf);
		snprintf(fmtbuf, sizeof fmtbuf,
			"FW %s %x %x %x %x", stoc(i),
			sp->s_fval[WHITE][0].s, sp->s_fval[WHITE][1].s,
			sp->s_fval[WHITE][2].s, sp->s_fval[WHITE][3].s);
		dlog(fmtbuf);
		goto top;
	case 'e':	/* e {b|w} [0-9] spot */
		str = fmtbuf + 1;
		if (*str >= '0' && *str <= '9')
			n = *str++ - '0';
		else
			n = 0;
		sp = &board[i = ctos(str)];
		for (ep = sp->s_empty; ep; ep = ep->e_next) {
			cbp = ep->e_combo;
			if (n) {
				if (cbp->c_nframes > n)
					continue;
				if (cbp->c_nframes != n)
					break;
			}
			printcombo(cbp, fmtbuf, sizeof fmtbuf);
			dlog(fmtbuf);
		}
		goto top;
	default:
syntax:
		dlog("Options are:");
		dlog("q    - quit");
		dlog("c    - continue");
		dlog("d#   - set debug level to #");
		dlog("p#   - print values at #");
		goto top;
	}
}
#endif /* DEBUG */

/*
 * Display debug info.
 */
void
dlog(char *str)
{

	if (debugfp)
		fprintf(debugfp, "%s\n", str);
	if (interactive)
		dislog(str);
	else
		fprintf(stderr, "%s\n", str);
}

void
logit(char *str)
{

	if (debugfp)
		fprintf(debugfp, "%s\n", str);
	if (interactive)
		dislog(str);
	else
		printf("%s\n", str);
}

/*
 * Deal with a fatal error.
 */
void
qlog(char *str)
{
	dlog(str);
	if (interactive)
		beep();
	sleep(5);
	quit(0);
}

void
quit(int sig)
{
	if (interactive) {
		bdisp();		/* show final board */
		cursfini();
	}
	exit(0);
}

/*
 * Die gracefully.
 */
void
panic(char *str)
{
	fprintf(stderr, "%s: %s\n", __progname, str);
	fputs("resign\n", stdout);
	quit(0);
}
@


1.31
log
@Some basic code maintenance in games/

- in main() replace exit with return
- drop some /* NOTREACHED */ lint comments along the way.
- make more use of standard CFLAGS, esp. -Wimplicit-function-declaration
- add and sort some headers when needed
- add straightforward pledges to some programs used at compile time

discussed with and ok mestre@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.30 2015/12/06 12:00:16 tobias Exp $	*/
d71 1
a71 3
main(argc, argv)
	int argc;
	char **argv;
a320 1
	/* NOTREACHED */
d324 1
a324 2
readinput(fp)
	FILE *fp;
d341 1
a341 2
whatsup(signum)
	int signum;
d489 1
a489 2
dlog(str)
	char *str;
d501 1
a501 2
logit(str)
	char *str;
d516 1
a516 2
qlog(str)
	char *str;
a524 1
/* ARGSUSED */
d526 1
a526 2
quit(sig)
	int sig;
d539 1
a539 2
panic(str)
	char *str;
@


1.30
log
@Use __progname instead of manually handling argv[0].

ok deraadt, mmcc, tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.29 2015/11/30 08:44:51 tb Exp $	*/
d116 1
a116 1
			exit(1);
@


1.29
log
@straightforward pledge "stdio rpath wpath cpath tty" for gomoku
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.28 2015/11/04 21:22:10 tedu Exp $	*/
d48 2
a52 1
char	*prog;			/* name of program */
a87 6
	prog = strrchr(argv[0], '/');
	if (prog)
		prog++;
	else
		prog = argv[0];

d115 1
a115 1
			    prog);
d192 2
a193 2
		plyr[BLACK] = input[BLACK] == USER ? you : prog;
		plyr[WHITE] = input[WHITE] == USER ? you : prog;
d220 2
a221 2
			plyr[BLACK] = input[BLACK] == USER ? you : prog;
			plyr[WHITE] = input[WHITE] == USER ? you : prog;
d552 1
a552 1
	fprintf(stderr, "%s: %s\n", prog, str);
@


1.28
log
@replace setbuf with setvbuf, from Frederic Nowak
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.27 2014/12/07 19:56:19 deraadt Exp $	*/
d83 3
@


1.27
log
@the debug / SVR4 chunk has been busted for a while.  interesting.
from Jonas Termansen
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.26 2014/12/05 00:48:57 deraadt Exp $	*/
d158 1
a158 1
		setbuf(stdout, 0);
@


1.26
log
@Remove SVR4 codeblock which insisted on using srand(time(0)) and rand().
How did this survive the tedu?? Very disappointed!!
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.25 2014/11/16 04:49:48 guenther Exp $	*/
a127 1
	if (!debug)
@


1.25
log
@Eliminate pointless use of <sys/param.h>, <sys/file.h>, <sys/sockio.h>,
    and <sys/ttydefaults.h>
Replace MAXPATHLEN with PATH_MAX and MAXLOGNAME with LOGIN_NAME_MAX
Pull in <limits.h> where needed
Prefer sizeof(var) over MAXFOO or FOO_MAX

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.24 2013/08/29 20:22:13 naddy Exp $	*/
a128 3
#ifdef SVR4
		srand(time(0));
#endif
@


1.24
log
@replace srandomdev()+random() with the arc4random*() family
tweaks and ok millert@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.23 2012/03/04 04:05:15 fgsch Exp $	*/
a33 1
#include <sys/param.h>
d36 1
d67 1
a67 1
static char you[MAXLOGNAME];	/* username */
d75 1
a75 1
	char fname[MAXPATHLEN];
@


1.23
log
@In preparation for getline and getdelim additions to libc, rename getline()
occurrences to get_line().
Based on a diff from Jan Klemkow <j-dot-klemkow-at-wemelug-dot-de> to tech.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.22 2009/10/27 23:59:24 deraadt Exp $	*/
a130 2
#else
		srandomdev();
@


1.22
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.21 2008/03/17 09:17:56 sobrado Exp $	*/
d165 1
a165 1
		getline(buf, sizeof(buf));
d242 1
a242 1
					(void)getline(fname, sizeof(fname));
d260 1
a260 1
				if (!getline(buf, sizeof(buf))) {
d310 1
a310 1
			if (getline(buf, sizeof(buf)) &&
d317 1
a317 1
				(void)getline(buf, sizeof(buf));
d367 1
a367 1
	if (!getline(fmtbuf, sizeof(fmtbuf)))
@


1.21
log
@synchronization between usage and synopsis; add some missing "usage:"'s

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.20 2007/04/02 14:33:37 jmc Exp $	*/
a32 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1994\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)main.c	8.4 (Berkeley) 5/4/95";
#else
static char rcsid[] = "$OpenBSD: main.c,v 1.20 2007/04/02 14:33:37 jmc Exp $";
#endif
#endif /* not lint */
@


1.20
log
@sort options + kill usage() verbosity; from Igor Sobrado
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.19 2006/12/24 14:14:02 martin Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: main.c,v 1.19 2006/12/24 14:14:02 martin Exp $";
d130 1
a130 1
			    "usage:  %s [-bcdu] [-D debugfile] [inputfile]\n",
@


1.19
log
@fix typos in comments (verses->versus)
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.18 2006/12/14 10:15:09 martin Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: main.c,v 1.18 2006/12/14 10:15:09 martin Exp $";
a128 6
			fprintf(stderr,"usage:  %s [-bcdu] [-D debugfile] [inputfile]\n",
					prog);
			fprintf(stderr,"\tWhere the options are:\n\t-b : background\n");
			fprintf(stderr,"\t-c : computer vs itself\n");
			fprintf(stderr,"\t-d : print debugging information\n");
			fprintf(stderr,"\t-u : user vs user\n");
d130 2
a131 3
	"\t-D : print debugging information to debugfile\n");
			fprintf(stderr,
	"\t  The game will be restored from inputfile if one is specified.\n");
@


1.18
log
@fix some obvious mistakes to make DEBUG compile

ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.17 2004/01/16 00:13:19 espie Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: main.c,v 1.17 2004/01/16 00:13:19 espie Exp $";
d121 1
a121 1
		case 'u':	/* testing: user verses user */
d124 1
a124 1
		case 'c':	/* testing: computer verses computer */
d204 1
a204 1
		case 0: /* user verses program */
d209 1
a209 1
		case 1: /* user verses user */
d214 1
a214 1
		case 2: /* program verses program */
@


1.17
log
@ISO C police: log and expl are reserved for the C library.
expl -> expl_string
log -> logit
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.16 2003/06/03 03:01:39 millert Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: main.c,v 1.16 2003/06/03 03:01:39 millert Exp $";
d503 1
a503 1
			printcombo(cbp, fmtbuf);
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.15 2003/04/25 21:21:28 tdeval Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: main.c,v 1.15 2003/04/25 21:21:28 tdeval Exp $";
d265 1
a265 1
						log("cannot create save file");
d276 1
a276 1
				/*	log("Illegal move"); */
d300 1
a300 1
			log(fmtbuf);
d340 1
a340 1
					log("cannot create save file");
d536 1
a536 1
log(str)
@


1.15
log
@strings... ok tedu@@, millert@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.14 2003/04/06 18:50:37 deraadt Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d44 1
a44 1
static char rcsid[] = "$OpenBSD: main.c,v 1.14 2003/04/06 18:50:37 deraadt Exp $";
@


1.14
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.13 2002/12/06 21:48:51 millert Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: main.c,v 1.13 2002/12/06 21:48:51 millert Exp $";
d465 2
a466 1
		sprintf(str, "overlap %s%c,", stoc(s1), pdir[d1]);
d468 2
a469 1
		sprintf(str, "%s%c = %x", stoc(s2), pdir[d2], overlap[n]);
@


1.13
log
@Replace things like srandom(time(NULL)) with srandomdev(3).  random(3)
good enough for games but we should at least use a decent seed.
pjanzen@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.12 2002/05/31 03:40:00 pjanzen Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: main.c,v 1.12 2002/05/31 03:40:00 pjanzen Exp $";
d196 1
a196 1
			sprintf(fmtbuf,
d302 2
a303 1
			sprintf(fmtbuf, fmt[color], movenum, stoc(curmove));
d401 2
a402 1
		sprintf(fmtbuf, "Debug set to %d", debug);
d416 2
a417 1
		sprintf(fmtbuf, "suggest %c %s", i == BLACK ? 'B' : 'W',
d472 2
a473 1
		sprintf(fmtbuf, "V %s %x/%d %d %x/%d %d %d %x", stoc(i),
d479 2
a480 1
		sprintf(fmtbuf, "FB %s %x %x %x %x", stoc(i),
d484 2
a485 1
		sprintf(fmtbuf, "FW %s %x %x %x %x", stoc(i),
@


1.12
log
@No dm -> no need to revoke setegid.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.11 2001/03/30 04:40:07 pjanzen Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: main.c,v 1.11 2001/03/30 04:40:07 pjanzen Exp $";
d157 1
a157 1
		srandom(time(0));
@


1.11
log
@filename length fix: ianm@@cit.uws.edu.au
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.10 2001/02/17 23:01:04 pjanzen Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: main.c,v 1.10 2001/02/17 23:01:04 pjanzen Exp $";
a100 4

	/* revoke privs */
	setegid(getgid());
	setgid(getgid());
@


1.10
log
@display username when playing restored games
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.9 2001/02/17 22:38:06 pjanzen Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: main.c,v 1.9 2001/02/17 22:38:06 pjanzen Exp $";
d93 1
d271 2
a272 2
					(void)getline(buf, sizeof(buf));
					if ((fp = fopen(buf, "w")) == NULL) {
@


1.9
log
@Handle long usernames better
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.8 1998/03/26 21:16:49 pjanzen Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: main.c,v 1.8 1998/03/26 21:16:49 pjanzen Exp $";
d256 2
a257 2
			plyr[BLACK] = input[BLACK] == USER ? "you" : prog;
			plyr[WHITE] = input[WHITE] == USER ? "you" : prog;
@


1.8
log
@improved interactive input and minor tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.7 1997/01/26 08:00:53 downsj Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD$";
d52 1
a52 1
#include "gomoku.h"
d60 2
d85 1
a85 1
static char you[9] = "you\0\0\0\0\0\0";	/* username */
d111 4
a114 2
	if ((tmpname = getlogin()) != 0)
		strncpy(you,tmpname,8);
@


1.7
log
@Check malloc() return value.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.6 1997/01/15 23:40:49 millert Exp $	*/
d45 1
d47 3
d83 2
d97 1
d109 4
a112 1
	while ((ch = getopt(argc, argv, "bcdD:u")) != -1) {
d130 13
d173 4
a176 12
			for (;;) {
				ask("black or white? ");
				getline(buf, sizeof(buf));
				if (buf[0] == 'b' || buf[0] == 'B') {
					color = BLACK;
					break;
				}
				if (buf[0] == 'w' || buf[0] == 'W') {
					color = WHITE;
					break;
				}
				move(22, 0);
d178 1
d180 5
a184 1
			move(22, 0);
d224 2
a225 2
		plyr[BLACK] = input[BLACK] == USER ? "you" : prog;
		plyr[WHITE] = input[WHITE] == USER ? "you" : prog;
d237 1
a237 1
			case 0: /* user verses program */
d242 1
a242 1
			case 1: /* user verses user */
d247 1
a247 1
			case 2: /* program verses program */
a258 9
			if (interactive)
				ask("move? ");
			if (!getline(buf, sizeof(buf))) {
				curmove = RESIGN;
				break;
			}
			if (buf[0] == '\0')
				goto getinput;
			curmove = ctos(buf);
d260 2
d279 2
a280 1
					log("Illegal move");
d283 8
d295 2
d310 1
a310 1
		move(22, 0);
d316 4
a319 1
				addstr("Rats! you won");
@


1.6
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.5 1996/12/22 20:01:16 deraadt Exp $	*/
d514 14
@


1.5
log
@proper gid revoke
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.4 1996/12/21 21:17:51 tholo Exp $	*/
d102 1
a102 1
	while ((ch = getopt(argc, argv, "bcdD:u")) != EOF) {
@


1.4
log
@Clean up lint and -Wall output
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.3 1996/12/20 00:22:21 downsj Exp $	*/
d92 2
@


1.3
log
@Nevermind, curses problem was caused by a busted lib on threadway.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.2 1996/12/19 22:21:28 deraadt Exp $	*/
d48 1
a51 1
#include <stdio.h>
a55 2
#include "gomoku.h"

d79 1
a79 5
extern void quit();
#ifdef DEBUG
extern void whatsup();
#endif

d85 1
a85 1
	int color, curmove, i, ch;
d305 1
a305 1
			    buf[0] == 'y' || buf[0] == 'Y')
d324 2
a325 1
	quit();
d328 1
d358 1
a358 1
		quit();
d362 1
a362 1
		quit();
d367 1
a367 1
		quit();
d488 1
d501 1
d514 1
d516 2
a517 1
quit()
d529 1
d535 1
a535 1
	quit();
@


1.2
log
@setgid games, not setuid games. closes a neat set of holes
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.1.1.1 1996/12/16 06:56:08 downsj Exp $	*/
d48 1
a48 1
#include <ocurses.h>
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d97 2
@


1.1.1.1
log
@Import of gomoku from 4.4BSD Lite2.  Uses ocurses.
@
text
@@
