head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.11.0.16
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.8
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.12
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.10
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.6
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.4
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.14
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.10
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.8
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.6
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.4
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.2
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.6
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.4
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.2
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.4.0.12
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.10
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.8
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.6
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.4
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	GOMOKU:1.1.1.1
	BSDGAMES:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.01.08.21.38.33;	author mestre;	state Exp;
branches;
next	1.12;
commitid	uLyOQtYIyaVyqJOK;

1.12
date	2016.01.04.17.33.24;	author mestre;	state Exp;
branches;
next	1.11;
commitid	b21xvsfCGMtCOVrz;

1.11
date	2012.03.04.04.05.15;	author fgsch;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.27.23.59.24;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2006.12.14.10.15.09;	author martin;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.03.01.39;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.31.04.21.30;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.17.23.03.57;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.17.22.38.06;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.03.26.21.16.45;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	96.12.21.21.17.49;	author tholo;	state Exp;
branches;
next	1.2;

1.2
date	96.12.20.00.22.19;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	96.12.16.06.56.08;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.16.06.56.08;	author downsj;	state Exp;
branches;
next	;


desc
@@


1.13
log
@ANSIfy gomoku(6) and change a char* to u_char*

OK tb@@
@
text
@/*	$OpenBSD: bdisp.c,v 1.12 2016/01/04 17:33:24 mestre Exp $	*/
/*
 * Copyright (c) 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ralph Campbell.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <curses.h>
#include <err.h>
#include <string.h>

#include "gomoku.h"

#define	SCRNH		24		/* assume 24 lines for the moment */
#define	SCRNW		80		/* assume 80 chars for the moment */

static	int	lastline;
static	char	pcolor[] = "*O.?";

/*
 * Initialize screen display.
 */
void
cursinit(void)
{
	initscr();
	if ((LINES < SCRNH) || (COLS < SCRNW)) {
		endwin();
		errx(1,"Screen too small (need %dx%d)",SCRNW,SCRNH);
	}
#ifdef KEY_MIN
	keypad(stdscr, TRUE);
#endif /* KEY_MIN */
	nonl();
	noecho();
	cbreak();

#ifdef NCURSES_MOUSE_VERSION
	mousemask(BUTTON1_CLICKED, (mmask_t *)NULL);
#endif /* NCURSES_MOUSE_VERSION*/
}

/*
 * Restore screen display.
 */
void
cursfini(void)
{
	move(BSZ4, 0);
	clrtoeol();
	refresh();
	echo();
	endwin();
}

/*
 * Initialize board display.
 */
void
bdisp_init(void)
{
	int i, j;

	/* top border */
	for (i = 1; i < BSZ1; i++) {
		move(0, 2 * i + 1);
		addch(letters[i]);
	}
	/* left and right edges */
	for (j = BSZ1; --j > 0; ) {
		move(20 - j, 0);
		printw("%2d ", j);
		move(20 - j, 2 * BSZ1 + 1);
		printw("%d ", j);
	}
	/* bottom border */
	for (i = 1; i < BSZ1; i++) {
		move(20, 2 * i + 1);
		addch(letters[i]);
	}
	bdwho(0);
	move(0, 47);
	addstr("#  black  white");
	lastline = 0;
	bdisp();
}

/*
 * Update who is playing whom.
 */
void
bdwho(int update)
{
	int i, j;
	extern char *plyr[];

	move(21, 0);
	printw("                                              ");
	i = strlen(plyr[BLACK]);
	j = strlen(plyr[WHITE]);
	if (i + j <= 20) {
		move(21, 10 - (i + j)/2);
		printw("BLACK/%s (*) vs. WHITE/%s (O)",
		    plyr[BLACK], plyr[WHITE]);
	} else {
		move(21, 0);
		if (i <= 10)
			j = 20 - i;
		else if (j <= 10)
			i = 20 - j;
		else
			i = j = 10;
		printw("BLACK/%.*s (*) vs. WHITE/%.*s (O)",
		    i, plyr[BLACK], j, plyr[WHITE]);
	}
	if (update)
		refresh();
}

/*
 * Update the board display after a move.
 */
void
bdisp(void)
{
	int i, j, c;
	struct spotstr *sp;

	for (j = BSZ1; --j > 0; ) {
		for (i = 1; i < BSZ1; i++) {
			move(BSZ1 - j, 2 * i + 1);
			sp = &board[i + j * BSZ1];
			if (debug > 1 && sp->s_occ == EMPTY) {
				if (sp->s_flg & IFLAGALL)
					c = '+';
				else if (sp->s_flg & CFLAGALL)
					c = '-';
				else
					c = '.';
			} else
				c = pcolor[sp->s_occ];
			addch(c);
		}
	}
	refresh();
}

#ifdef DEBUG
/*
 * Dump board display to a file.
 */
void bdump(FILE *fp)
{
	int i, j, c;
	struct spotstr *sp;

	/* top border */
	fprintf(fp, "   A B C D E F G H J K L M N O P Q R S T\n");

	for (j = BSZ1; --j > 0; ) {
		/* left edge */
		fprintf(fp, "%2d ", j);
		for (i = 1; i < BSZ1; i++) {
			sp = &board[i + j * BSZ1];
			if (debug > 1 && sp->s_occ == EMPTY) {
				if (sp->s_flg & IFLAGALL)
					c = '+';
				else if (sp->s_flg & CFLAGALL)
					c = '-';
				else
					c = '.';
			} else
				c = pcolor[sp->s_occ];
			putc(c, fp);
			putc(' ', fp);
		}
		/* right edge */
		fprintf(fp, "%d\n", j);
	}

	/* bottom border */
	fprintf(fp, "   A B C D E F G H J K L M N O P Q R S T\n");
}
#endif /* DEBUG */

/*
 * Display a transcript entry
 */
void
dislog(char *str)
{

	if (++lastline >= SCRNH - 1) {
		/* move 'em up */
		lastline = 1;
	}
	if (strlen(str) >= SCRNW - (2 * BSZ4))
		str[SCRNW - (2 * BSZ4) - 1] = '\0';
	move(lastline, (2 * BSZ4));
	addstr(str);
	clrtoeol();
	move(lastline + 1, (2 * BSZ4));
	clrtoeol();
}

/*
 * Display a question.
 */
void
ask(char *str)
{
	int len = strlen(str);

	move(BSZ4, 0);
	addstr(str);
	clrtoeol();
	move(BSZ4, len);
	refresh();
}

int
get_line(char *buf, int size)
{
	char *cp, *end;
	int c = EOF;
	extern int interactive;

	cp = buf;
	end = buf + size - 1;	/* save room for the '\0' */
	while (cp < end && (c = getchar()) != EOF && c != '\n' && c != '\r') {
		*cp++ = c;
		if (interactive) {
			switch (c) {
			case 0x0c: /* ^L */
				wrefresh(curscr);
				cp--;
				continue;
			case 0x15: /* ^U */
			case 0x18: /* ^X */
				while (cp > buf) {
					cp--;
					addch('\b');
				}
				clrtoeol();
				break;
			case '\b':
			case 0x7f: /* DEL */
				if (cp == buf + 1) {
					cp--;
					continue;
				}
				cp -= 2;
				addch('\b');
				c = ' ';
				/* FALLTHROUGH */
			default:
				addch(c);
			}
			refresh();
		}
	}
	*cp = '\0';
	return(c != EOF);
}


/* Decent (n)curses interface for the game, based on Eric S. Raymond's
 * modifications to the battleship (bs) user interface.
 */
int getcoord(void)
{
	static int curx = BSZ / 2;
	static int cury = BSZ / 2;
	int ny, nx, c;

	BGOTO(cury,curx);
	refresh();
	nx = curx; ny = cury;
	for (;;) {
		mvprintw(BSZ3, (BSZ -6)/2, "(%c %d)", 
				'A'+ ((curx > 7) ? (curx+1) : curx), cury + 1);
		BGOTO(cury, curx);

		switch(c = getch()) {
		case 'k': case '8':
#ifdef KEY_MIN
		case KEY_UP:
#endif /* KEY_MIN */
			ny = cury + 1;       nx = curx;
			break;
		case 'j': case '2':
#ifdef KEY_MIN
		case KEY_DOWN:
#endif /* KEY_MIN */
			ny = BSZ + cury - 1; nx = curx;
			break;
		case 'h': case '4':
#ifdef KEY_MIN
		case KEY_LEFT:
#endif /* KEY_MIN */
			ny = cury;          nx = BSZ + curx - 1;
			break;
		case 'l': case '6':
#ifdef KEY_MIN
		case KEY_RIGHT:
#endif /* KEY_MIN */
			ny = cury;          nx = curx + 1;
			break;
		case 'y': case '7':
#ifdef KEY_MIN
		case KEY_A1:
#endif /* KEY_MIN */
			ny = cury + 1;        nx = BSZ + curx - 1;
			break;
		case 'b': case '1':
#ifdef KEY_MIN
		case KEY_C1:
#endif /* KEY_MIN */
			ny = BSZ + cury - 1; nx = BSZ + curx - 1;
			break;
		case 'u': case '9':
#ifdef KEY_MIN
		case KEY_A3:
#endif /* KEY_MIN */
			ny = cury + 1;        nx = curx + 1;
			break;
		case 'n': case '3':
#ifdef KEY_MIN
		case KEY_C3:
#endif /* KEY_MIN */
			ny = BSZ + cury - 1; nx = curx + 1;
			break;
		case 'K':
			ny = cury + 5;       nx = curx;
			break;
		case 'J':
			ny = BSZ + cury - 5; nx = curx;
			break;
		case 'H':
			ny = cury;          nx = BSZ + curx - 5;
			break;
		case 'L':
			ny = cury;          nx = curx + 5;
			break;
		case 'Y':
			ny = cury + 5;        nx = BSZ + curx - 5;
			break;
		case 'B':
			ny = BSZ + cury - 5; nx = BSZ + curx - 5;
			break;
		case 'U':
			ny = cury + 5;        nx = curx + 5;
			break;
		case 'N':
			ny = BSZ + cury - 5; nx = curx + 5;
			break;
		case FF:
			nx = curx; ny = cury;
			(void)clearok(stdscr, TRUE);
			(void)refresh();
			break;
#ifdef NCURSES_MOUSE_VERSION
		case KEY_MOUSE:
		{
			MEVENT	myevent;

			getmouse(&myevent);
			if (myevent.y >= 1 && myevent.y <= BSZ1
				&& myevent.x >= 3 && myevent.x <= (2 * BSZ + 1))
			{
				curx = (myevent.x - 3) / 2;
				cury = BSZ - myevent.y;
				return(PT(curx,cury));
			}
			else
				beep();
		}
		break;
#endif /* NCURSES_MOUSE_VERSION */
		case 'Q':
			return(RESIGN);
			break;
		case 'S':
			return(SAVE);
			break;
		case ' ':
		case '\015':  /* return */
			(void) mvaddstr(BSZ3, (BSZ -6)/2, "      ");
			return(PT(curx+1,cury+1));
			break;
	}

	curx = nx % BSZ;
	cury = ny % BSZ;
    }
}
@


1.12
log
@More cleanup and sorting on header section

OK tb@@ and he also pointed out that for consistency with rest of the tree we
should include termios.h instead of sys/ttydefaults.h, where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: bdisp.c,v 1.11 2012/03/04 04:05:15 fgsch Exp $	*/
d50 1
a50 1
cursinit()
d73 1
a73 1
cursfini()
d86 1
a86 1
bdisp_init()
d118 1
a118 2
bdwho(update)
	int update;
d150 1
a150 1
bdisp()
d178 1
a178 2
void bdump(fp)
	FILE *fp;
d216 1
a216 2
dislog(str)
	char *str;
d236 1
a236 2
ask(str)
	char *str;
d248 1
a248 3
get_line(buf, size)
	char *buf;
	int size;
@


1.11
log
@In preparation for getline and getdelim additions to libc, rename getline()
occurrences to get_line().
Based on a diff from Jan Klemkow <j-dot-klemkow-at-wemelug-dot-de> to tech.
@
text
@d1 1
a1 1
/*	$OpenBSD: bdisp.c,v 1.10 2009/10/27 23:59:24 deraadt Exp $	*/
a33 1
#include "gomoku.h"
d35 1
d37 2
a38 1
#include <err.h>
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: bdisp.c,v 1.9 2006/12/14 10:15:09 martin Exp $	*/
d251 1
a251 1
getline(buf, size)
@


1.9
log
@fix some obvious mistakes to make DEBUG compile

ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bdisp.c,v 1.8 2003/06/03 03:01:39 millert Exp $	*/
a32 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)bdisp.c	8.2 (Berkeley) 5/3/95";
#else
static char rcsid[] = "$OpenBSD: bdisp.c,v 1.8 2003/06/03 03:01:39 millert Exp $";
#endif
#endif /* not lint */
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: bdisp.c,v 1.7 2002/05/31 04:21:30 pjanzen Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: bdisp.c,v 1.7 2002/05/31 04:21:30 pjanzen Exp $";
d186 1
a186 1
bdump(fp)
@


1.7
log
@de-register
@
text
@d1 1
a1 1
/*	$OpenBSD: bdisp.c,v 1.6 2001/02/17 23:03:57 pjanzen Exp $	*/
d17 1
a17 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d38 1
a38 1
static char rcsid[] = "$OpenBSD: bdisp.c,v 1.6 2001/02/17 23:03:57 pjanzen Exp $";
@


1.6
log
@clrtoeol() is bad if there's stuff to the right you want to keep.
@
text
@d1 1
a1 1
/*	$OpenBSD: bdisp.c,v 1.5 2001/02/17 22:38:06 pjanzen Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: bdisp.c,v 1.5 2001/02/17 22:38:06 pjanzen Exp $";
d99 1
a99 1
	register int i, j;
d164 2
a165 2
	register int i, j, c;
	register struct spotstr *sp;
d193 2
a194 2
	register int i, j, c;
	register struct spotstr *sp;
d267 2
a268 2
	register char *cp, *end;
	register int c = EOF;
@


1.5
log
@Handle long usernames better
@
text
@d1 1
a1 1
/*	$OpenBSD: bdisp.c,v 1.4 1998/03/26 21:16:45 pjanzen Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: bdisp.c,v 1.4 1998/03/26 21:16:45 pjanzen Exp $";
d136 1
a136 1
	clrtoeol();
@


1.4
log
@improved interactive input and minor tweaks
@
text
@d1 1
a1 1
/*	$OpenBSD: bdisp.c,v 1.3 1996/12/21 21:17:49 tholo Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD$";
d132 1
a132 1
	int i;
d137 17
a153 8
	i = 4 - strlen(plyr[BLACK]) / 2;
	move(21, i > 0 ? i : 0);
	printw("BLACK/%s (*)", plyr[BLACK]);
	i = 28 - strlen(plyr[WHITE]) / 2;
	move(21, i > 24 ? i : 24);
	printw("WHITE/%s (O)", plyr[WHITE]);
	move(21, 19);
	addstr(" vs. ");
@


1.3
log
@Clean up lint and -Wall output
@
text
@d1 1
a1 1
/*	$OpenBSD: bdisp.c,v 1.2 1996/12/20 00:22:19 downsj Exp $	*/
d39 1
d41 3
d49 1
d64 8
d74 4
d86 1
a86 1
	move(23, 0);
d89 1
d137 1
a137 1
	i = 6 - strlen(plyr[BLACK]) / 2;
d139 4
a142 4
	printw("BLACK/%s", plyr[BLACK]);
	i = 30 - strlen(plyr[WHITE]) / 2;
	move(21, i);
	printw("WHITE/%s", plyr[WHITE]);
d228 3
a230 3
	if (strlen(str) >= SCRNW - 46)
		str[SCRNW - 46 - 1] = '\0';
	move(lastline, 46);
d233 1
a233 1
	move(lastline + 1, 46);
d246 1
a246 1
	move(23, 0);
d249 1
a249 1
	move(23, len);
d298 132
@


1.2
log
@Nevermind, curses problem was caused by a busted lib on threadway.
@
text
@d1 1
a1 1
/*	$OpenBSD: bdisp.c,v 1.1.1.1 1996/12/16 06:56:08 downsj Exp $	*/
a42 1
#include <stdio.h>
d44 1
d55 1
a57 1

a60 1
	leaveok(stdscr, TRUE);
d66 1
a68 2

	leaveok(stdscr, FALSE);
d78 1
d110 1
d134 1
d201 1
d222 1
d235 1
d241 1
a241 1
	register int c;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
#include <ocurses.h>
@


1.1.1.1
log
@Import of gomoku from 4.4BSD Lite2.  Uses ocurses.
@
text
@@
