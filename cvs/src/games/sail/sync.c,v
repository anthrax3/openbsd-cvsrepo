head	1.15;
access;
symbols
	OPENBSD_6_2:1.15.0.6
	OPENBSD_6_2_BASE:1.15
	OPENBSD_6_1:1.15.0.4
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.16
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.14
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.10
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.8
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.6
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.4
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.22
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.18
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.16
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.14
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.12
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.12
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.10
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.09.11.14.21.18;	author tb;	state Exp;
branches;
next	1.14;
commitid	vQliJ9M8LCn9g8k6;

1.14
date	2016.01.08.20.26.33;	author mestre;	state Exp;
branches;
next	1.13;
commitid	er3iaGFzAlZtZ8NY;

1.13
date	2015.12.31.16.44.22;	author mestre;	state Exp;
branches;
next	1.12;
commitid	2lAH78sqshL9k4xy;

1.12
date	2015.09.27.05.09.01;	author guenther;	state Exp;
branches;
next	1.11;
commitid	XjBGBc2epgYXS9ti;

1.11
date	2014.11.16.04.49.48;	author guenther;	state Exp;
branches;
next	1.10;
commitid	8XNajyb9IqHkZEKg;

1.10
date	2011.06.20.17.40.55;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.27.23.59.27;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.17.18.46.32;	author moritz;	state Exp;
branches;
next	1.7;

1.7
date	2003.07.06.02.03.13;	author avsm;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.25.22.23.44;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.06.18.50.38;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.01.18.06.20.54;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.21;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Callers of time(3) should #include <time.h>.

ok deraadt
@
text
@/*	$OpenBSD: sync.c,v 1.14 2016/01/08 20:26:33 mestre Exp $	*/
/*	$NetBSD: sync.c,v 1.9 1998/08/30 09:19:40 veego Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/stat.h>

#include <errno.h>
#ifdef LOCK_EX
#include <fcntl.h>
#endif
#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "extern.h"
#include "machdep.h"
#include "pathnames.h"
#include "player.h"

#define BUFSIZE 4096

static const char SF[] = _PATH_SYNC;
static const char LF[] = _PATH_LOCK;
static char sync_buf[BUFSIZE];
static char *sync_bp = sync_buf;
static char sync_lock[sizeof SF];
static char sync_file[sizeof LF];
static long sync_seek;
static FILE *sync_fp;

void
fmtship(char *buf, size_t len, const char *fmt, struct ship *ship)
{
	if (len == 0)
		abort();	/* XXX */

	while (*fmt && len > 1) {
		if (*fmt == '$' && fmt[1] == '$') {
			size_t l;
			snprintf(buf, len, "%s (%c%c)",
			    ship->shipname, colours(ship), sterncolour(ship));
			l = strlen(buf);
			buf += l;
			len -= l;
			fmt += 2;
		} else {
			*buf++ = *fmt++;
			len--;
		}
	}

	*buf = '\0';
}


void
makesignal(struct ship *from, const char *fmt, struct ship *ship, ...)
{
	char message[BUFSIZ];
	char format[BUFSIZ];
	va_list ap;

	va_start(ap, ship);
	fmtship(format, sizeof(format), fmt, ship);
	(void) vsnprintf(message, sizeof message, format, ap);
	va_end(ap);
	Writestr(W_SIGNAL, from, message);
}

void
makemsg(struct ship *from, const char *fmt, ...)
{
	char message[BUFSIZ];
	va_list ap;

	va_start(ap, fmt);
	(void) vsnprintf(message, sizeof message, fmt, ap);
	va_end(ap);
	Writestr(W_SIGNAL, from, message);
}

int
sync_exists(int game)
{
	char buf[sizeof sync_file];
	struct stat s;
	time_t t;

	(void) snprintf(buf, sizeof buf, SF, game);
	(void) time(&t);
	setegid(egid);
	if (stat(buf, &s) < 0) {
		setegid(gid);
		return 0;
	}
	if (s.st_mtime < t - 60*60*2) {		/* 2 hours */
		(void) unlink(buf);
		(void) snprintf(buf, sizeof buf, LF, game);
		(void) unlink(buf);
		setegid(gid);
		return 0;
	}
	setegid(gid);
	return 1;
}

int
sync_open(void)
{
	struct stat tmp;

	if (sync_fp != NULL)
		(void) fclose(sync_fp);
	(void) snprintf(sync_lock, sizeof sync_lock, LF, game);
	(void) snprintf(sync_file, sizeof sync_file, SF, game);
	setegid(egid);
	if (stat(sync_file, &tmp) < 0) {
		mode_t omask = umask(002);
		sync_fp = fopen(sync_file, "w+");
		(void) umask(omask);
	} else
		sync_fp = fopen(sync_file, "r+");
	setegid(gid);
	if (sync_fp == NULL)
		return -1;
	sync_seek = 0;
	return 0;
}

void
sync_close(int remove)
{
	if (sync_fp != 0)
		(void) fclose(sync_fp);
	if (remove) {
		setegid(egid);
		(void) unlink(sync_file);
		setegid(gid);
	}
}

void
Write(int type, struct ship *ship, long a, long b, long c, long d)
{
	(void) snprintf(sync_bp, sync_buf + sizeof sync_buf - sync_bp,
		"%d %d 0 %ld %ld %ld %ld\n",
	       type, ship->file->index, a, b, c, d);
	while (*sync_bp++)
		;
	sync_bp--;
	if (sync_bp >= &sync_buf[sizeof sync_buf])
		abort();
	(void) sync_update(type, ship, NULL, a, b, c, d);
}

void
Writestr(int type, struct ship *ship, const char *a)
{
	(void) snprintf(sync_bp, sync_buf + sizeof sync_buf - sync_bp,
		"%d %d 1 %s\n",
		type, ship->file->index, a);
	while (*sync_bp++)
		;
	sync_bp--;
	if (sync_bp >= &sync_buf[sizeof sync_buf])
		abort();
	(void) sync_update(type, ship, a, 0, 0, 0, 0);
}

int
Sync(void)
{
	sig_t sighup, sigint;
	int n;
	int type, shipnum, isstr;
	char *astr;
	long a, b, c, d;
	char buf[80];
	char erred = 0;

	sighup = signal(SIGHUP, SIG_IGN);
	sigint = signal(SIGINT, SIG_IGN);
	for (n = TIMEOUT; --n >= 0;) {
#ifdef LOCK_EX
		if (flock(fileno(sync_fp), LOCK_EX|LOCK_NB) >= 0)
			break;
		if (errno != EWOULDBLOCK)
			return -1;
#else
		setegid(egid);
		if (link(sync_file, sync_lock) >= 0) {
			setegid(gid);
			break;
		}
		setegid(gid);
		if (errno != EEXIST)
			return -1;
#endif
		sleep(1);
	}
	if (n <= 0)
		return -1;
	(void) fseek(sync_fp, sync_seek, SEEK_SET);
	for (;;) {
		switch (fscanf(sync_fp, "%d%d%d", &type, &shipnum, &isstr)) {
		case 3:
			break;
		case EOF:
			goto out;
		default:
			goto bad;
		}
		if (shipnum < 0 || shipnum >= cc->vessels)
			goto bad;
		if (isstr != 0 && isstr != 1)
			goto bad;
		if (isstr) {
			int ch;
			char *p;

			for (p = buf;;) {
				ch = getc(sync_fp);
				switch (ch) {
				case '\n':
				case EOF:
					break;
				default:
					if (p < buf + sizeof buf)
						*p++ = ch;
					continue;
				}
				break;
			}
			*p = 0;
			for (p = buf; *p == ' '; p++)
				;
			astr = p;
			a = b = c = d = 0;
		} else {
			if (fscanf(sync_fp, "%ld%ld%ld%ld", &a, &b, &c, &d) != 4)
				goto bad;
			astr = NULL;
		}
		if (sync_update(type, SHIP(shipnum), astr, a, b, c, d) < 0)
			goto bad;
	}
bad:
	erred++;
out:
	if (!erred && sync_bp != sync_buf) {
		(void) fseek(sync_fp, 0L, SEEK_END);
		(void) fwrite(sync_buf, sizeof *sync_buf, sync_bp - sync_buf,
			sync_fp);
		(void) fflush(sync_fp);
		sync_bp = sync_buf;
	}
	sync_seek = ftell(sync_fp);
#ifdef LOCK_EX
	(void) flock(fileno(sync_fp), LOCK_UN);
#else
	setegid(egid);
	(void) unlink(sync_lock);
	setegid(gid);
#endif
	(void) signal(SIGHUP, sighup);
	(void) signal(SIGINT, sigint);
	return erred ? -1 : 0;
}

int
sync_update(int type, struct ship *ship, const char *astr, long a, long b,
    long c, long d)
{
	switch (type) {
	case W_DBP: {
		struct BP *p = &ship->file->DBP[a];
		p->turnsent = b;
		p->toship = SHIP(c);
		p->mensent = d;
		break;
		}
	case W_OBP: {
		struct BP *p = &ship->file->OBP[a];
		p->turnsent = b;
		p->toship = SHIP(c);
		p->mensent = d;
		break;
		}
	case W_FOUL: {
		struct snag *p = &ship->file->foul[a];
		if (SHIP(a)->file->dir == 0)
			break;
		if (p->sn_count++ == 0)
			p->sn_turn = turn;
		ship->file->nfoul++;
		break;
		}
	case W_GRAP: {
		struct snag *p = &ship->file->grap[a];
		if (SHIP(a)->file->dir == 0)
			break;
		if (p->sn_count++ == 0)
			p->sn_turn = turn;
		ship->file->ngrap++;
		break;
		}
	case W_UNFOUL: {
		struct snag *p = &ship->file->foul[a];
		if (p->sn_count > 0) {
			if (b) {
				ship->file->nfoul -= p->sn_count;
				p->sn_count = 0;
			} else {
				ship->file->nfoul--;
				p->sn_count--;
			}
		}
		break;
		}
	case W_UNGRAP: {
		struct snag *p = &ship->file->grap[a];
		if (p->sn_count > 0) {
			if (b) {
				ship->file->ngrap -= p->sn_count;
				p->sn_count = 0;
			} else {
				ship->file->ngrap--;
				p->sn_count--;
			}
		}
		break;
		}
	case W_SIGNAL:
		if (mode == MODE_PLAYER) {
			if (nobells)
				Signal("$$: %s", ship, astr);
			else
				Signal("\7$$: %s", ship, astr);
		}
		break;
	case W_CREW: {
		struct shipspecs *s = ship->specs;
		s->crew1 = a;
		s->crew2 = b;
		s->crew3 = c;
		break;
		}
	case W_CAPTAIN:
		(void) strlcpy(ship->file->captain, astr,
			sizeof ship->file->captain);
		break;
	case W_CAPTURED:
		if (a < 0)
			ship->file->captured = 0;
		else
			ship->file->captured = SHIP(a);
		break;
	case W_CLASS:
		ship->specs->class = a;
		break;
	case W_DRIFT:
		ship->file->drift = a;
		break;
	case W_EXPLODE:
		if ((ship->file->explode = a) == 2)
			ship->file->dir = 0;
		break;
	case W_FS:
		ship->file->FS = a;
		break;
	case W_GUNL: {
		struct shipspecs *s = ship->specs;
		s->gunL = a;
		s->carL = b;
		break;
		}
	case W_GUNR: {
		struct shipspecs *s = ship->specs;
		s->gunR = a;
		s->carR = b;
		break;
		}
	case W_HULL:
		ship->specs->hull = a;
		break;
	case W_MOVE:
		(void) strlcpy(ship->file->movebuf, astr,
			sizeof ship->file->movebuf);
		break;
	case W_PCREW:
		ship->file->pcrew = a;
		break;
	case W_POINTS:
		ship->file->points = a;
		break;
	case W_QUAL:
		ship->specs->qual = a;
		break;
	case W_RIGG: {
		struct shipspecs *s = ship->specs;
		s->rig1 = a;
		s->rig2 = b;
		s->rig3 = c;
		s->rig4 = d;
		break;
		}
	case W_RIG1:
		ship->specs->rig1 = a;
		break;
	case W_RIG2:
		ship->specs->rig2 = a;
		break;
	case W_RIG3:
		ship->specs->rig3 = a;
		break;
	case W_RIG4:
		ship->specs->rig4 = a;
		break;
	case W_COL:
		ship->file->col = a;
		break;
	case W_DIR:
		ship->file->dir = a;
		break;
	case W_ROW:
		ship->file->row = a;
		break;
	case W_SINK:
		if ((ship->file->sink = a) == 2)
			ship->file->dir = 0;
		break;
	case W_STRUCK:
		ship->file->struck = a;
		break;
	case W_TA:
		ship->specs->ta = a;
		break;
	case W_ALIVE:
		alive = 1;
		break;
	case W_TURN:
		turn = a;
		break;
	case W_WIND:
		winddir = a;
		windspeed = b;
		break;
	case W_BEGIN:
		(void) strlcpy(ship->file->captain, "begin",
		    sizeof ship->file->captain);
		people++;
		break;
	case W_END:
		*ship->file->captain = 0;
		ship->file->points = 0;
		people--;
		break;
	case W_DDEAD:
		hasdriver = 0;
		break;
	default:
		fprintf(stderr, "sync_update: unknown type %d\r\n", type);
		return -1;
	}
	return 0;
}
@


1.14
log
@ANSIfy sail(6) plus some cleanup

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sync.c,v 1.13 2015/12/31 16:44:22 mestre Exp $	*/
d42 1
@


1.13
log
@Include only needed header files per each source file

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sync.c,v 1.12 2015/09/27 05:09:01 guenther Exp $	*/
d36 3
d61 1
a61 5
fmtship(buf, len, fmt, ship)
	char *buf;
	size_t len;
	const char *fmt;
	struct ship *ship;
d112 1
a112 2
sync_exists(game)
	int game;
d137 1
a137 1
sync_open()
d160 1
a160 2
sync_close(remove)
	char remove;
d172 1
a172 4
Write(type, ship, a, b, c, d)
	int type;
	struct ship *ship;
	long a, b, c, d;
d186 1
a186 4
Writestr(type, ship, a)
	int type;
	struct ship *ship;
	const char *a;
d200 1
a200 1
Sync()
d300 2
a301 5
sync_update(type, ship, astr, a, b, c, d)
	int type;
	struct ship *ship;
	const char *astr;
	long a, b, c, d;
@


1.12
log
@Delete obsolete lint comments

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sync.c,v 1.11 2014/11/16 04:49:48 guenther Exp $	*/
a32 1
#include <sys/types.h>
a34 1
#include <fcntl.h>
d36 1
a36 1
#include <stdarg.h>
d38 1
d40 1
a40 1
#include <time.h>
d42 1
d44 1
@


1.11
log
@Eliminate pointless use of <sys/param.h>, <sys/file.h>, <sys/sockio.h>,
    and <sys/ttydefaults.h>
Replace MAXPATHLEN with PATH_MAX and MAXLOGNAME with LOGIN_NAME_MAX
Pull in <limits.h> where needed
Prefer sizeof(var) over MAXFOO or FOO_MAX

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sync.c,v 1.10 2011/06/20 17:40:55 miod Exp $	*/
a84 1
/*VARARGS3*/
@


1.10
log
@Do not compare a `char' variable to EOF, which does not fit if `char' defaults
to unsigned (e.g. arm, powerpc); ok guenther@@ matthew@@ looks good deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sync.c,v 1.9 2009/10/27 23:59:27 deraadt Exp $	*/
d33 3
a40 3
#include <sys/file.h>
#include <sys/types.h>
#include <sys/stat.h>
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: sync.c,v 1.8 2004/12/17 18:46:32 moritz Exp $	*/
d256 1
d258 1
d260 2
a261 1
				switch (*p++ = getc(sync_fp)) {
a262 1
					p--;
d266 2
a267 2
					if (p >= buf + sizeof buf)
						p--;
@


1.8
log
@fix an off-by-one and a case of snprintf() misuse.

ok pjanzen@@, henning@@
@
text
@d1 1
a1 1
/*	$OpenBSD: sync.c,v 1.7 2003/07/06 02:03:13 avsm Exp $	*/
a31 9

#include <sys/cdefs.h>
#ifndef lint
#if 0
static char sccsid[] = "@@(#)sync.c	8.2 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: sync.c,v 1.7 2003/07/06 02:03:13 avsm Exp $";
#endif
#endif /* not lint */
@


1.7
log
@convert some strncpy->strlcpy
pjanzen@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: sync.c,v 1.6 2003/06/03 03:01:41 millert Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: sync.c,v 1.6 2003/06/03 03:01:41 millert Exp $";
d72 4
a75 5
	while (*fmt) {
		if (len-- == 0) {
			*buf = '\0';
			return;
		}
d77 2
a78 1
			size_t l = snprintf(buf, len, "%s (%c%c)",
d80 1
d82 1
a82 1
			len -= l - 1;
d84 3
a87 2
		else
			*buf++ = *fmt++;
d90 1
a90 2
	if (len > 0)
		*buf = '\0';
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: sync.c,v 1.5 2003/04/25 22:23:44 deraadt Exp $	*/
d38 1
a38 1
static char rcsid[] = "$OpenBSD: sync.c,v 1.5 2003/04/25 22:23:44 deraadt Exp $";
d396 2
a397 3
		(void) strncpy(ship->file->captain, astr,
			sizeof ship->file->captain - 1);
		ship->file->captain[sizeof ship->file->captain - 1] = 0;
d434 2
a435 3
		(void) strncpy(ship->file->movebuf, astr,
			sizeof ship->file->movebuf - 1);
		ship->file->movebuf[sizeof ship->file->movebuf - 1] = 0;
@


1.5
log
@string cleanup; ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: sync.c,v 1.4 2003/04/06 18:50:38 deraadt Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d38 1
a38 1
static char rcsid[] = "$OpenBSD: sync.c,v 1.4 2003/04/06 18:50:38 deraadt Exp $";
@


1.4
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: sync.c,v 1.3 2002/02/19 19:39:36 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: sync.c,v 1.3 2002/02/19 19:39:36 millert Exp $";
d502 2
a503 1
		(void) strcpy(ship->file->captain, "begin");
@


1.3
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: sync.c,v 1.2 1999/01/18 06:20:54 pjanzen Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: sync.c,v 1.2 1999/01/18 06:20:54 pjanzen Exp $";
d107 1
a107 1
	(void) vsprintf(message, format, ap);
d119 1
a119 1
	(void) vsprintf(message, fmt, ap);
d132 1
a132 1
	(void) sprintf(buf, SF, game);
d141 1
a141 1
		(void) sprintf(buf, LF, game);
d157 2
a158 2
	(void) sprintf(sync_lock, LF, game);
	(void) sprintf(sync_file, SF, game);
d192 3
a194 2
	(void) sprintf(sync_bp, "%d %d 0 %ld %ld %ld %ld\n",
		       type, ship->file->index, a, b, c, d);
d209 3
a211 2
	(void) sprintf(sync_bp, "%d %d 1 %s\n",
		       type, ship->file->index, a);
@


1.2
log
@NetBSD merge with additional fixes from jsm28@@cam.ac.uk.  This game still
needs much more work.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD$";
a47 1
#ifdef __STDC__
a48 3
#else
#include <varargs.h>
#endif
a98 1
#ifdef __STDC__
a99 4
#else
makesignal(va_alias)
	va_dcl
#endif
a103 4
#ifndef __STDC__
	struct ship *from;
	const char *fmt;
	struct ship *ship;
a104 5
	va_start(ap);
	from = va_arg(ap, struct ship *);
	fmt = va_arg(ap, const char *);
	ship = va_arg(ap, struct ship *);
#else
a105 1
#endif
a112 1
#ifdef __STDC__
a113 4
#else
makemsg(va_alias)
	va_dcl
#endif
a116 3
#ifndef __STDC__
	struct ship *from;
	const char *fmt;
a117 4
	va_start(ap);
	from = va_arg(ap, struct ship *);
	fmt = va_arg(ap, const char *);
#else
a118 1
#endif
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/*	$NetBSD: sync.c,v 1.4 1995/04/24 12:25:28 cgd Exp $	*/
d37 1
d40 1
a40 1
static char sccsid[] = "@@(#)sync.c	8.1 (Berkeley) 5/31/93";
d42 1
a42 1
static char rcsid[] = "$NetBSD: sync.c,v 1.4 1995/04/24 12:25:28 cgd Exp $";
d46 9
a54 1
#include "externs.h"
d56 5
a60 1
#include <sys/errno.h>
d64 2
d68 2
a69 2
static char sync_lock[25];
static char sync_file[25];
d72 28
a99 2
#define SF "/tmp/#sailsink.%d"
#define LF "/tmp/#saillock.%d"
d102 12
a113 1
makesignal(from, fmt, ship, a, b, c)
d115 23
a137 3
	char *fmt;
	register struct ship *ship;
	long a, b, c;
d139 5
a143 1
	char message[80];
d145 9
a153 7
	if (ship == 0)
		(void) sprintf(message, fmt, a, b, c);
	else
		(void) sprintf(message, fmt,
			ship->shipname, colours(ship),
			sterncolour(ship), a, b, c);
	Write(W_SIGNAL, from, 1, (long)message, 0, 0, 0);
d156 1
a156 2
#include <sys/types.h>
#include <sys/stat.h>
d158 1
d166 3
a168 1
	if (stat(buf, &s) < 0)
d170 1
d175 1
d177 3
a179 2
	} else
		return 1;
d182 1
d185 2
d191 3
a193 2
	if (access(sync_file, 0) < 0) {
		int omask = umask(issetuid ? 077 : 011);
d198 1
d205 1
d211 2
a212 1
	if (remove)
d214 2
d218 2
a219 1
Write(type, ship, isstr, a, b, c, d)
a221 1
	char isstr;
d224 2
a225 6
	if (isstr)
		(void) sprintf(sync_bp, "%d %d %d %s\n",
			type, ship->file->index, isstr, a);
	else
		(void) sprintf(sync_bp, "%d %d %d %d %d %d %d\n",
			type, ship->file->index, isstr, a, b, c, d);
d231 1
a231 1
	(void) sync_update(type, ship, a, b, c, d);
d234 17
d254 1
a254 1
	register n;
d256 1
a259 1
	extern errno;
d270 3
a272 1
		if (link(sync_file, sync_lock) >= 0)
d274 2
d283 1
a283 1
	(void) fseek(sync_fp, sync_seek, 0);
d298 1
a298 1
			register char *p;
d315 4
a318 4
			a = (long)p;
			b = c = d = 0;
		} else
			if (fscanf(sync_fp, "%d%d%d%d", &a, &b, &c, &d) != 4)
d320 3
a322 1
		if (sync_update(type, SHIP(shipnum), a, b, c, d) < 0)
d329 1
a329 1
		(void) fseek(sync_fp, 0L, 2);
d339 1
d341 1
d348 2
a349 1
sync_update(type, ship, a, b, c, d)
d351 2
a352 1
	register struct ship *ship;
d357 1
a357 1
		register struct BP *p = &ship->file->DBP[a];
d364 1
a364 1
		register struct BP *p = &ship->file->OBP[a];
d371 1
a371 1
		register struct snag *p = &ship->file->foul[a];
d380 1
a380 1
		register struct snag *p = &ship->file->grap[a];
d389 2
a390 2
		register struct snag *p = &ship->file->foul[a];
		if (p->sn_count > 0)
d398 1
d402 2
a403 2
		register struct snag *p = &ship->file->grap[a];
		if (p->sn_count > 0)
d411 1
d415 1
a415 1
		if (mode == MODE_PLAYER)
d417 1
a417 1
				Signal("%s (%c%c): %s", ship, a);
d419 2
a420 1
				Signal("\7%s (%c%c): %s", ship, a);
d423 1
a423 1
		register struct shipspecs *s = ship->specs;
d430 1
a430 1
		(void) strncpy(ship->file->captain, (char *)a,
d454 1
a454 1
		register struct shipspecs *s = ship->specs;
d460 1
a460 1
		register struct shipspecs *s = ship->specs;
d469 1
a469 1
		(void) strncpy(ship->file->movebuf, (char *)a,
d483 1
a483 1
		register struct shipspecs *s = ship->specs;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
