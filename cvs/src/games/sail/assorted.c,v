head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.10
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.12
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.10
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.01.08.20.26.33;	author mestre;	state Exp;
branches;
next	1.7;
commitid	er3iaGFzAlZtZ8NY;

1.7
date	2015.09.27.05.07.06;	author guenther;	state Exp;
branches;
next	1.6;
commitid	Ogu6zL5mcduGOoJY;

1.6
date	2012.12.05.23.19.50;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2009.10.27.23.59.27;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.27.11;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.01.18.06.20.51;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@ANSIfy sail(6) plus some cleanup

OK tb@@
@
text
@/*	$OpenBSD: assorted.c,v 1.7 2015/09/27 05:07:06 guenther Exp $	*/
/*	$NetBSD: assorted.c,v 1.3 1995/04/22 10:36:45 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <err.h>
#include <stdlib.h>

#include "extern.h"

static void strike(struct ship *, struct ship *);

void
table(int rig, int shot, int hittable, struct ship *on, struct ship *from,
    int roll)
{
	int hhits = 0, chits = 0, ghits = 0, rhits = 0;
	int Ghit = 0, Hhit = 0, Rhit = 0, Chit = 0;
	int guns, car, pc, hull;
	int crew[3];
	int n;
	int rigg[4];
	const char *message;
	const struct Tables *tp;

	pc = on->file->pcrew;
	hull = on->specs->hull;
	crew[0] = on->specs->crew1;
	crew[1] = on->specs->crew2;
	crew[2] = on->specs->crew3;
	rigg[0] = on->specs->rig1;
	rigg[1] = on->specs->rig2;
	rigg[2] = on->specs->rig3;
	rigg[3] = on->specs->rig4;
	if (shot == L_GRAPE)
		Chit = chits = hittable;
	else {
		tp = &(rig ? RigTable : HullTable)[hittable][roll-1];
		Chit = chits = tp->C;
		Rhit = rhits = tp->R;
		Hhit = hhits = tp->H;
		Ghit = ghits = tp->G;
		if (on->file->FS)
			rhits *= 2;
		if (shot == L_CHAIN) {
			Ghit = ghits = 0;
			Hhit = hhits = 0;
		}
	}
	if (on->file->captured != 0) {
		pc -= (chits + 1) / 2;
		chits /= 2;
	}
	for (n = 0; n < 3; n++)
		if (chits > crew[n]) {
			chits -= crew[n];
			crew[n] = 0;
		} else {
			crew[n] -= chits;
			chits = 0;
		}
	for (n = 0; n < 3; n++)
		if (rhits > rigg[n]){
			rhits -= rigg[n];
			rigg[n] = 0;
		} else {
			rigg[n] -= rhits;
			rhits = 0;
		}
	if (rigg[3] != -1 && rhits > rigg[3]) {
		rhits -= rigg[3];
		rigg[3] = 0;
	} else if (rigg[3] != -1) {
		rigg[3] -= rhits;
	}
	if (rig && !rigg[2] && (!rigg[3] || rigg[3] == -1))
		makemsg(on, "dismasted!");
	if (portside(from, on, 0)) {
		guns = on->specs->gunR;
		car = on->specs->carR;
	} else {
		guns = on->specs->gunL;
		car = on->specs->carL;
	}
	if (ghits > car) {
		ghits -= car;
		car = 0;
	} else {
		car -= ghits;
		ghits = 0;
	}
	if (ghits > guns){
		ghits -= guns;
		guns = 0;
	} else {
		guns -= ghits;
		ghits = 0;
	}
	hull -= ghits;
	if (Ghit)
		Write(portside(from, on, 0) ? W_GUNR : W_GUNL,
			on, guns, car, 0, 0);
	hull -= hhits;
	hull = hull < 0 ? 0 : hull;
	if (on->file->captured != 0 && Chit)
		Write(W_PCREW, on, pc, 0, 0, 0);
	if (Hhit)
		Write(W_HULL, on, hull, 0, 0, 0);
	if (Chit)
		Write(W_CREW, on, crew[0], crew[1], crew[2], 0);
	if (Rhit)
		Write(W_RIGG, on, rigg[0], rigg[1], rigg[2], rigg[3]);
	switch (shot) {
	case L_ROUND:
		message = "firing round shot on $$";
		break;
	case L_GRAPE:
		message = "firing grape shot on $$";
		break;
	case L_CHAIN:
		message = "firing chain shot on $$";
		break;
	case L_DOUBLE:
		message = "firing double shot on $$";
		break;
	case L_EXPLODE:
		message = "exploding shot on $$";
		break;
	default:
		errx(1, "Unknown shot type %d", shot);
	}
	makesignal(from, "%s", on, message);
	if (roll == 6 && rig) {
		switch(Rhit) {
		case 0:
			message = "fore topsail sheets parted";
			break;
		case 1:
			message = "mizzen shrouds parted";
			break;
		case 2:
			message = "main topsail yard shot away";
			break;
		case 4:
			message = "fore topmast and foremast shrouds shot away";
			break;
		case 5:
			message = "mizzen mast and yard shot through";
			break;
		case 6:
			message = "foremast and spritsail yard shattered";
			break;
		case 7:
			message = "main topmast and mizzen mast shattered";
			break;
		default:
			errx(1, "Bad Rhit = %d", Rhit);
		}
		makemsg(on, "%s", message);
	} else if (roll == 6) {
		switch (Hhit) {
		case 0:
			message = "anchor cables severed";
			break;
		case 1:
			message = "two anchor stocks shot away";
			break;
		case 2:
			message = "quarterdeck bulwarks damaged";
			break;
		case 3:
			message = "three gun ports shot away";
			break;
		case 4:
			message = "four guns dismounted";
			break;
		case 5:
			message = "rudder cables shot through";
			Write(W_TA, on, 0, 0, 0, 0);
			break;
		case 6:
			message = "shot holes below the water line";
			break;
		default:
			errx(1, "Bad Hhit = %d", Hhit);
		}
		makemsg(on, "%s", message);
	}
	/*
	if (Chit > 1 && on->file->readyL&R_INITIAL && on->file->readyR&R_INITIAL) {
		on->specs->qual--;
		if (on->specs->qual <= 0) {
			makemsg(on, "crew mutinying!");
			on->specs->qual = 5;
			Write(W_CAPTURED, on, on->file->index, 0, 0, 0);
		} else 
			makemsg(on, "crew demoralized");
		Write(W_QUAL, on, on->specs->qual, 0, 0, 0);
	}
	*/
	if (!hull)
		strike(on, from);
}

void
Cleansnag(struct ship *from, struct ship *to, int all, int flag)
{
	if (flag & 1) {
		Write(W_UNGRAP, from, to->file->index, all, 0, 0);
		Write(W_UNGRAP, to, from->file->index, all, 0, 0);
	}
	if (flag & 2) {
		Write(W_UNFOUL, from, to->file->index, all, 0, 0);
		Write(W_UNFOUL, to, from->file->index, all, 0, 0);
	}
	if (!snagged2(from, to)) {
		if (!snagged(from)) {
			unboard(from, from, 1);		/* defense */
			unboard(from, from, 0);		/* defense */
		} else
			unboard(from, to, 0);		/* offense */
		if (!snagged(to)) {
			unboard(to, to, 1);		/* defense */
			unboard(to, to, 0);		/* defense */
		} else
			unboard(to, from, 0);		/* offense */
	}
}

static void
strike(struct ship *ship, struct ship *from)
{
	int points;

	if (ship->file->struck)
		return;
	Write(W_STRUCK, ship, 1, 0, 0, 0);
	points = ship->specs->pts + from->file->points;
	Write(W_POINTS, from, points, 0, 0, 0);
	unboard(ship, ship, 0);		/* all offense */
	unboard(ship, ship, 1);		/* all defense */
	switch (die()) {
	case 3:
	case 4:		/* ship may sink */
		Write(W_SINK, ship, 1, 0, 0, 0);
		break;
	case 5:
	case 6:		/* ship may explode */
		Write(W_EXPLODE, ship, 1, 0, 0, 0);
		break;
	}
	Writestr(W_SIGNAL, ship, "striking her colours!");
}
@


1.7
log
@Make -Wformat=2 happier with a few foo(str) -> foo("%s", str) fixes

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: assorted.c,v 1.6 2012/12/05 23:19:50 deraadt Exp $	*/
d33 3
a36 3
#include <stdlib.h>
#include <unistd.h>
#include <err.h>
d41 2
a42 3
table(rig, shot, hittable, on, from, roll)
	struct ship *on, *from;
	int rig, shot, hittable, roll;
d233 1
a233 3
Cleansnag(from, to, all, flag)
	struct ship *from, *to;
	char all, flag;
d258 1
a258 2
strike(ship, from)
	struct ship *ship, *from;
@


1.6
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: assorted.c,v 1.5 2009/10/27 23:59:27 deraadt Exp $	*/
d160 1
a160 1
	makesignal(from, message, on);
d187 1
a187 1
		makemsg(on, message);
d215 1
a215 1
		makemsg(on, message);
@


1.5
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: assorted.c,v 1.4 2003/06/03 03:01:41 millert Exp $	*/
a33 1
#include <sys/cdefs.h>
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: assorted.c,v 1.3 2002/02/16 21:27:11 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)assorted.c	8.2 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: assorted.c,v 1.3 2002/02/16 21:27:11 millert Exp $";
#endif
#endif /* not lint */
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: assorted.c,v 1.2 1999/01/18 06:20:51 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: assorted.c,v 1.2 1999/01/18 06:20:51 pjanzen Exp $";
@


1.2
log
@NetBSD merge with additional fixes from jsm28@@cam.ac.uk.  This game still
needs much more work.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d51 1
a51 1
static void strike __P((struct ship *, struct ship *));
@


1.1
log
@Initial revision
@
text
@d1 1
d39 1
a39 1
static char sccsid[] = "@@(#)assorted.c	8.1 (Berkeley) 5/31/93";
d41 1
a41 1
static char rcsid[] = "$NetBSD: assorted.c,v 1.3 1995/04/22 10:36:45 cgd Exp $";
d45 5
a49 1
#include "externs.h"
d51 3
d55 2
a56 2
struct ship *on, *from;
int rig, shot, hittable, roll;
d58 1
a58 1
	register int hhits = 0, chits = 0, ghits = 0, rhits = 0;
d62 1
a62 1
	register int n;
d64 2
a65 2
	char *message;
	struct Tables *tp;
d118 1
a118 1
		makesignal(on, "dismasted!", (struct ship *)0);
d143 1
a143 1
			on, 0, guns, car, 0, 0);
d147 1
a147 1
		Write(W_PCREW, on, 0, pc, 0, 0, 0);
d149 1
a149 1
		Write(W_HULL, on, 0, hull, 0, 0, 0);
d151 1
a151 1
		Write(W_CREW, on, 0, crew[0], crew[1], crew[2], 0);
d153 1
a153 1
		Write(W_RIGG, on, 0, rigg[0], rigg[1], rigg[2], rigg[3]);
d156 1
a156 1
		message = "firing round shot on %s (%c%c)";
d159 1
a159 1
		message = "firing grape shot on %s (%c%c)";
d162 1
a162 1
		message = "firing chain shot on %s (%c%c)";
d165 1
a165 1
		message = "firing double shot on %s (%c%c)";
d168 4
a171 1
		message = "exploding shot on %s (%c%c)";
d197 2
d200 1
a200 1
		makesignal(on, message, (struct ship *)0);
d220 1
a220 1
			Write(W_TA, on, 0, 0, 0, 0, 0);
d225 2
d228 1
a228 1
		makesignal(on, message, (struct ship *)0);
d234 1
a234 1
			makesignal(on, "crew mutinying!", (struct ship *)0);
d236 1
a236 1
			Write(W_CAPTURED, on, 0, on->file->index, 0, 0, 0);
d238 2
a239 2
			makesignal(on, "crew demoralized", (struct ship *)0);
		Write(W_QUAL, on, 0, on->specs->qual, 0, 0, 0);
d246 1
d248 2
a249 2
register struct ship *from, *to;
char all, flag;
d252 2
a253 2
		Write(W_UNGRAP, from, 0, to->file->index, all, 0, 0);
		Write(W_UNGRAP, to, 0, from->file->index, all, 0, 0);
d256 2
a257 2
		Write(W_UNFOUL, from, 0, to->file->index, all, 0, 0);
		Write(W_UNFOUL, to, 0, from->file->index, all, 0, 0);
d273 1
d275 1
a275 1
register struct ship *ship, *from;
d281 1
a281 1
	Write(W_STRUCK, ship, 0, 1, 0, 0, 0);
d283 1
a283 1
	Write(W_POINTS, from, 0, points, 0, 0, 0);
d289 1
a289 1
		Write(W_SINK, ship, 0, 1, 0, 0, 0);
d293 1
a293 1
		Write(W_EXPLODE, ship, 0, 1, 0, 0, 0);
d296 1
a296 1
	Write(W_SIGNAL, ship, 1, (int) "striking her colours!", 0, 0, 0);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
