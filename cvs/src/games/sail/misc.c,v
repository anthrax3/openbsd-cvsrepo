head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.2
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.22
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.2.0.18
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.16
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.14
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.12
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.10
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.03.16.15.00.35;	author mestre;	state Exp;
branches;
next	1.9;
commitid	idQfhcm2r53iTZ8v;

1.9
date	2016.01.08.20.26.33;	author mestre;	state Exp;
branches;
next	1.8;
commitid	er3iaGFzAlZtZ8NY;

1.8
date	2015.12.31.16.44.22;	author mestre;	state Exp;
branches;
next	1.7;
commitid	2lAH78sqshL9k4xy;

1.7
date	2015.10.24.18.16.40;	author mmcc;	state Exp;
branches;
next	1.6;
commitid	QVw7hIPu7RpwvKOB;

1.6
date	2014.11.16.04.49.48;	author guenther;	state Exp;
branches;
next	1.5;
commitid	8XNajyb9IqHkZEKg;

1.5
date	2009.10.27.23.59.27;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.06.18.50.38;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.01.18.06.20.53;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.21;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.21;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Prefer fseek(3) over rewind(3) since the latter although it also calls fseek
then additionally it calls clearerr(3) deliberately but we want to catch any
error that may happen and this way we couldn't catch it

OK tb@@
@
text
@/*	$OpenBSD: misc.c,v 1.9 2016/01/08 20:26:33 mestre Exp $	*/
/*	$NetBSD: misc.c,v 1.3 1995/04/22 10:37:03 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <ctype.h>
#include <err.h>
#ifdef LOCK_EX
#include <fcntl.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "extern.h"
#include "pathnames.h"

#define distance(x,y) (abs(x) >= abs(y) ? abs(x) + abs(y)/2 : abs(y) + abs(x)/2)

/* XXX */
int
range(struct ship *from, struct ship *to)
{
	int bow1r, bow1c, bow2r, bow2c;
	int stern1r, stern1c, stern2c, stern2r;
	int bb, bs, sb, ss, result;

	if (!to->file->dir)
		return -1;
	stern1r = bow1r = from->file->row;
	stern1c = bow1c = from->file->col;
	stern2r = bow2r = to->file->row;
	stern2c = bow2c = to->file->col;
	result = bb = distance(bow2r - bow1r, bow2c - bow1c);
	if (bb < 5) {
		stern2r += dr[to->file->dir];
		stern2c += dc[to->file->dir];
		stern1r += dr[from->file->dir];
		stern1c += dc[from->file->dir];
		bs = distance((bow2r - stern1r), (bow2c - stern1c));
		sb = distance((bow1r - stern2r), (bow1c - stern2c));
		ss = distance((stern2r - stern1r) ,(stern2c - stern1c));
		result = min(bb, min(bs, min(sb, ss)));
	}
	return result;
}

struct ship *
closestenemy(struct ship *from, int side, int anyship)
{
	struct ship *sp;
	char a;
	int olddist = 30000, dist;
	struct ship *closest = 0;

	a = capship(from)->nationality;
	foreachship(sp) {
		if (sp == from)
			continue;
		if (sp->file->dir == 0)
			continue;
		if (a == capship(sp)->nationality && !anyship)
			continue;
		if (side && gunsbear(from, sp) != side)
			continue;
		dist = range(from, sp);
		if (dist < olddist) {
			closest = sp;
			olddist = dist;
		}
	}
	return closest;
}

int
angle(int dr, int dc)
{
	int i;

	if (dc >= 0 && dr > 0)
		i = 0;
	else if (dr <= 0 && dc > 0)
		i = 2;
	else if (dc <= 0 && dr < 0)
		i = 4;
	else
		i = 6;
	dr = abs(dr);
	dc = abs(dc);
	if ((i == 0 || i == 4) && dc * 2.4 > dr) {
		i++;
		if (dc > dr * 2.4)
			i++;
	} else if ((i == 2 || i == 6) && dr * 2.4 > dc) {
		i++;
		if (dr > dc * 2.4)
			i++;
	}
	return i % 8 + 1;
}

/* checks for target bow or stern */
int
gunsbear(struct ship *from, struct ship *to)
{
	int Dr, Dc, i;
	int ang;

	Dr = from->file->row - to->file->row;
	Dc = to->file->col - from->file->col;
	for (i = 2; i; i--) {
		if ((ang = angle(Dr, Dc) - from->file->dir + 1) < 1)
			ang += 8;
		if (ang >= 2 && ang <= 4)
			return 'r';
		if (ang >= 6 && ang <= 7)
			return 'l';
		Dr += dr[to->file->dir];
		Dc += dc[to->file->dir];
	}
	return 0;
}

/* returns true if fromship is shooting at onship's starboard side */
int
portside(struct ship *from, struct ship *on, int quick)
{
	int ang;
	int Dr, Dc;

	Dr = from->file->row - on->file->row;
	Dc = on->file->col - from->file->col;
	if (quick == -1) {
		Dr += dr[on->file->dir];
		Dc += dc[on->file->dir];
	}
	ang = angle(Dr, Dc);
	if (quick != 0)
		return ang;
	ang = (ang + 4 - on->file->dir - 1) % 8 + 1;
	return ang < 5;
}

int
colours(struct ship *sp)
{
	char flag;

	if (sp->file->struck) {
		flag = '!';
		return flag;
	}
	if (sp->file->explode)
		flag = '#';
	if (sp->file->sink)
		flag = '~';
	flag = *countryname[capship(sp)->nationality];
	return sp->file->FS ? flag : tolower((unsigned char)flag);
}

void
logger(struct ship *s)
{
	FILE *fp;
	int persons;
	int n;
	struct logs log[NLOG];
	float net;
	struct logs *lp;

	setegid(egid);
	if ((fp = fopen(_PATH_LOGFILE, "r+")) == NULL) {
		setegid(gid);
		return;
	}
	setegid(gid);
#ifdef LOCK_EX
	if (flock(fileno(fp), LOCK_EX) < 0)
		return;
#endif
	net = (float)s->file->points / s->specs->pts;
	persons = getw(fp);
	n = fread((char *)log, sizeof(struct logs), NLOG, fp);
	for (lp = &log[n]; lp < &log[NLOG]; lp++)
		lp->l_name[0] = lp->l_uid = lp->l_shipnum
			= lp->l_gamenum = lp->l_netpoints = 0;
	if (fseek(fp, 0L, SEEK_SET) == -1)
		err(1, "fseek");
	if (persons < 0)
		(void) putw(1, fp);
	else
		(void) putw(persons + 1, fp);
	for (lp = log; lp < &log[NLOG]; lp++)
		if (net > (float)lp->l_netpoints
		    / scene[lp->l_gamenum].ship[lp->l_shipnum].specs->pts) {
			(void) fwrite((char *)log,
				sizeof (struct logs), lp - log, fp);
			(void) strlcpy(log[NLOG-1].l_name, s->file->captain,
			    sizeof log[NLOG-1].l_name);
			log[NLOG-1].l_uid = getuid();
			log[NLOG-1].l_shipnum = s->file->index;
			log[NLOG-1].l_gamenum = game;
			log[NLOG-1].l_netpoints = s->file->points;
			(void) fwrite((char *)&log[NLOG-1],
				sizeof (struct logs), 1, fp);
			(void) fwrite((char *)lp,
				sizeof (struct logs), &log[NLOG-1] - lp, fp);
			break;
		}
#ifdef LOCK_EX
	(void) flock(fileno(fp), LOCK_UN);
#endif
	(void) fclose(fp);
}
@


1.9
log
@ANSIfy sail(6) plus some cleanup

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.8 2015/12/31 16:44:22 mestre Exp $	*/
d34 1
d215 2
a216 1
	rewind(fp);
@


1.8
log
@Include only needed header files per each source file

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.7 2015/10/24 18:16:40 mmcc Exp $	*/
d34 3
d49 1
a49 2
range(from, to)
	struct ship *from, *to;
d76 1
a76 3
closestenemy(from, side, anyship)
	struct ship *from;
	char side, anyship;
d103 1
a103 2
angle(dr, dc)
	int dr, dc;
d129 1
d131 1
a131 2
gunsbear(from, to)		/* checks for target bow or stern */
	struct ship *from, *to;
d151 1
d153 2
a154 4
portside(from, on, quick)
	struct ship *from, *on;
	int quick;		/* returns true if fromship is */
{				/* shooting at onship's starboard side */
d172 1
a172 2
colours(sp)
	struct ship *sp;
d189 1
a189 2
logger(s)
	struct ship *s;
@


1.7
log
@Cast ctype functions' argument to unsigned char.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.6 2014/11/16 04:49:48 guenther Exp $	*/
d33 2
a34 1
#include <fcntl.h>
d36 1
d38 1
@


1.6
log
@Eliminate pointless use of <sys/param.h>, <sys/file.h>, <sys/sockio.h>,
    and <sys/ttydefaults.h>
Replace MAXPATHLEN with PATH_MAX and MAXLOGNAME with LOGIN_NAME_MAX
Pull in <limits.h> where needed
Prefer sizeof(var) over MAXFOO or FOO_MAX

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.5 2009/10/27 23:59:27 deraadt Exp $	*/
d185 1
a185 1
	return sp->file->FS ? flag : tolower(flag);
@


1.5
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.4 2003/06/03 03:01:41 millert Exp $	*/
a34 1
#include <sys/file.h>
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.3 2003/04/06 18:50:38 deraadt Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)misc.c	8.2 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: misc.c,v 1.3 2003/04/06 18:50:38 deraadt Exp $";
#endif
#endif /* not lint */
@


1.3
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.2 1999/01/18 06:20:53 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.2 1999/01/18 06:20:53 pjanzen Exp $";
@


1.2
log
@NetBSD merge with additional fixes from jsm28@@cam.ac.uk.  This game still
needs much more work.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d238 2
a239 1
			(void) strcpy(log[NLOG-1].l_name, s->file->captain);
@


1.1
log
@Initial revision
@
text
@d1 1
d39 1
a39 1
static char sccsid[] = "@@(#)misc.c	8.1 (Berkeley) 5/31/93";
d41 1
a41 1
static char rcsid[] = "$NetBSD: misc.c,v 1.3 1995/04/22 10:37:03 cgd Exp $";
d45 5
a49 1
#include "externs.h"
d55 1
d57 1
a57 1
struct ship *from, *to;
d59 1
a59 1
	register bow1r, bow1c, bow2r, bow2c;
d61 1
a61 1
	register int bb, bs, sb, ss, result;
d85 2
a86 2
register struct ship *from;
char side, anyship;
d88 2
a89 2
	register struct ship *sp;
	register char a;
d112 1
d114 1
a114 1
register dr, dc;
d116 1
a116 1
	register i;
d140 1
d142 1
a142 1
register struct ship *from, *to;
d145 1
a145 1
	register ang;
d162 1
d164 2
a165 2
register struct ship *from, *on;
int quick;			/* returns true if fromship is */
d167 2
a168 2
	register ang;
	register Dr, Dc;
d183 1
d185 1
a185 1
register struct ship *sp;
d187 1
a187 1
	register char flag;
d189 1
a189 1
	if (sp->file->struck)
d191 2
a196 2
	if (sp->file->struck)
		return flag;
d201 3
a203 3
#include <sys/file.h>
log(s)
register struct ship *s;
d210 1
a210 1
	register struct logs *lp;
d212 3
a214 1
	if ((fp = fopen(_PATH_LOGFILE, "r+")) == NULL)
d216 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
