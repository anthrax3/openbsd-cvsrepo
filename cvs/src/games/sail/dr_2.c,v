head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.5.0.26
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.18
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.22
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.20
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.16
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.14
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.12
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.10
	OPENBSD_5_0:1.5.0.8
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.6
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.4
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.2.0.18
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.16
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.14
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.12
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.10
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.8
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.6
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2016.01.08.20.26.33;	author mestre;	state Exp;
branches;
next	1.6;
commitid	er3iaGFzAlZtZ8NY;

1.6
date	2015.12.31.16.44.21;	author mestre;	state Exp;
branches;
next	1.5;
commitid	2lAH78sqshL9k4xy;

1.5
date	2009.10.27.23.59.27;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.06.18.50.38;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	99.01.18.06.20.52;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.20;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.20;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.7
log
@ANSIfy sail(6) plus some cleanup

OK tb@@
@
text
@/*	$OpenBSD: dr_2.c,v 1.6 2015/12/31 16:44:21 mestre Exp $	*/
/*	$NetBSD: dr_2.c,v 1.4 1995/04/24 12:25:12 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdlib.h>
#include <string.h>

#include "driver.h"
#include "extern.h"
#include "player.h"

#define couldwin(f,t) (f->specs->crew2 > t->specs->crew2 * 1.5)

void
thinkofgrapples(void)
{
	struct ship *sp, *sq;
	char friendly;

	foreachship(sp) {
		if (sp->file->captain[0] || sp->file->dir == 0)
			continue;
		foreachship(sq) {
			friendly = sp->nationality == capship(sq)->nationality;
			if (!friendly) {
				if (sp->file->struck || sp->file->captured != 0)
					continue;
				if (range(sp, sq) != 1)
					continue;
				if (grappled2(sp, sq)) {
					if (is_toughmelee(sp, sq, 0, 0))
						ungrap(sp, sq);
					else
						grap(sp, sq);
				} else if (couldwin(sp, sq)) {
					grap(sp, sq);
					sp->file->loadwith = L_GRAPE;
				}
			} else
				ungrap(sp, sq);
		}
	}
}

void
checkup(void)
{
	struct ship *sp, *sq;
	char explode, sink;

	foreachship(sp) {
		if (sp->file->dir == 0)
			continue;
		explode = sp->file->explode;
		sink = sp->file->sink;
		if (explode != 1 && sink != 1)
			continue;
		if (die() < 5)
			continue;
		Write(sink == 1 ? W_SINK : W_EXPLODE, sp, 2, 0, 0, 0);
		Write(W_DIR, sp, 0, 0, 0, 0);
		if (snagged(sp))
			foreachship(sq)
				cleansnag(sp, sq, 1);
		if (sink != 1) {
			makemsg(sp, "exploding!");
			foreachship(sq) {
				if (sp != sq && sq->file->dir && range(sp, sq) < 4)
					table(RIGGING, L_EXPLODE, sp->specs->guns/13, sq, sp, 6);
			}
		} else
			makemsg(sp, "sinking!");
	}
}

void
prizecheck(void)
{
	struct ship *sp;

	foreachship(sp) {
		if (sp->file->captured == 0)
			continue;
		if (sp->file->struck || sp->file->dir == 0)
			continue;
		if (sp->specs->crew1 + sp->specs->crew2 + sp->specs->crew3 > sp->file->pcrew * 6) {
			Writestr(W_SIGNAL, sp, "prize crew overthrown");
			Write(W_POINTS, sp->file->captured, sp->file->captured->file->points - 2 * sp->specs->pts, 0, 0, 0);
			Write(W_CAPTURED, sp, -1, 0, 0, 0);
		}
	}
}

int
str_end(const char *str)
{
	const char *p;

	for (p = str; *p; p++)
		;
	return p == str ? 0 : p[-1];
}

void
closeon(struct ship *from, struct ship *to, char command[], size_t commandl,
    int ta, int ma, int af)
{
	int high;
	char temp[10];

	temp[0] = command[0] = '\0';
	high = -30000;
	try(command, commandl, temp, sizeof temp, ma, ta, af, ma, from->file->dir,
	    from, to, &high, 0);
}

const int dtab[] = {0,1,1,2,3,4,4,5};	/* diagonal distances in x==y */

int
score(char movement[], size_t movementl, struct ship *ship, struct ship *to,
    int onlytemp)
{
	char drift;
	int row, col, dir, total, ran;
	struct File *fp = ship->file;

	if ((dir = fp->dir) == 0)
		return 0;
	row = fp->row;
	col = fp->col;
	drift = fp->drift;
	move_ship(movement, ship, &fp->dir, &fp->row, &fp->col, &drift);
	if (!*movement)
		(void) strlcpy(movement, "d", movementl);

	ran = range(ship, to);
	total = -50 * ran;
	if (ran < 4 && gunsbear(ship, to))
		total += 60;
	if ((ran = portside(ship, to, 1) - fp->dir) == 4 || ran == -4)
		total = -30000;

	if (!onlytemp) {
		fp->row = row;
		fp->col = col;
		fp->dir = dir;
	}
	return total;
}

void
move_ship(const char *p, struct ship *ship, unsigned char *dir, short *row,
    short *col, char *drift)
{
	int dist;
	char moved = 0;

	for (; *p; p++) {
		switch (*p) {
		case 'r':
			if (++*dir == 9)
				*dir = 1;
			break;
		case 'l':
			if (--*dir == 0)
				*dir = 8;
			break;
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7':
			moved++;
			if (*dir % 2 == 0)
				dist = dtab[*p - '0'];
			else
				dist = *p - '0';
			*row -= dr[*dir] * dist;
			*col -= dc[*dir] * dist;
			break;
		}
	}
	if (!moved) {
		if (windspeed != 0 && ++*drift > 2) {
			if ((ship->specs->class >= 3 && !snagged(ship))
			    || (turn & 1) == 0) {
				*row -= dr[winddir];
				*col -= dc[winddir];
			}
		}
	} else
		*drift = 0;
}

void
try(char command[], size_t commandl, char temp[], size_t templ, int ma, int ta,
    int af, int vma, int dir, struct ship *f, struct ship *t, int *high,
    int rakeme)
{
	int new, n;
	char st[4];
#define rakeyou (gunsbear(f, t) && !gunsbear(t, f))

	if ((n = str_end(temp)) < '1' || n > '9')
		for (n = 1; vma - n >= 0; n++) {
			(void) snprintf(st, sizeof st, "%d", n);
			(void) strlcat(temp, st, templ);
			new = score(temp, templ, f, t, rakeme);
			if (new > *high && (!rakeme || rakeyou)) {
				*high = new;
				(void) strlcpy(command, temp, commandl);
			}
			try(command, commandl, temp, templ, ma-n, ta, af, vma-n,
				dir, f, t, high, rakeme);
			rmend(temp);
		}
	if ((ma > 0 && ta > 0 && (n = str_end(temp)) != 'l' && n != 'r') || !strlen(temp)) {
		(void) strlcat(temp, "r", templ);
		new = score(temp, templ, f, t, rakeme);
		if (new > *high && (!rakeme || (gunsbear(f, t) && !gunsbear(t, f)))) {
			*high = new;
			(void) strlcpy(command, temp, commandl);
		}
		try(command, commandl, temp, templ, ma-1, ta-1, af, min(ma-1, maxmove(f, (dir == 8 ? 1 : dir+1), 0)), (dir == 8 ? 1 : dir+1),f,t,high,rakeme);
		rmend(temp);
	}
	if ((ma > 0 && ta > 0 && (n = str_end(temp)) != 'l' && n != 'r') || !strlen(temp)){
		(void) strlcat(temp, "l", templ);
		new = score(temp, templ, f, t, rakeme);
		if (new > *high && (!rakeme || (gunsbear(f, t) && !gunsbear(t, f)))){
			*high = new;
			(void) strlcpy(command, temp, commandl);
		}
		try(command, commandl, temp, templ, ma-1, ta-1, af, (min(ma-1,maxmove(f, (dir-1 ? dir-1 : 8), 0))), (dir-1 ? dir -1 : 8), f, t, high, rakeme);
		rmend(temp);
	}
}

void
rmend(char *str)
{
	char *p;

	for (p = str; *p; p++)
		;
	if (p != str)
		*--p = 0;
}
@


1.6
log
@Include only needed header files per each source file

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: dr_2.c,v 1.5 2009/10/27 23:59:27 deraadt Exp $	*/
d43 1
a43 1
thinkofgrapples()
d74 1
a74 1
checkup()
d105 1
a105 1
prizecheck()
d123 1
a123 2
str_end(str)
	const char *str;
d133 2
a134 5
closeon(from, to, command, commandl, ta, ma, af)
	struct ship *from, *to;
	char command[];
	size_t commandl;
	int ma, ta, af;
d148 2
a149 5
score(movement, movementl, ship, to, onlytemp)
	char movement[];
	size_t movementl;
	struct ship *ship, *to;
	char onlytemp;
d180 2
a181 6
move_ship(p, ship, dir, row, col, drift)
	const char *p;
	struct ship *ship;
	unsigned char *dir;
	short *row, *col;
	char *drift;
d221 3
a223 8
try(command, commandl, temp, templ, ma, ta, af, vma, dir, f, t, high, rakeme)
	char command[];
	size_t commandl;
	char temp[];
	size_t templ;
	int ma, ta, af, vma, dir;
	struct ship *f, *t;
	int *high, rakeme;
d265 1
a265 2
rmend(str)
	char *str;
@


1.5
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: dr_2.c,v 1.4 2003/06/03 03:01:41 millert Exp $	*/
d33 3
d37 2
a38 1
#include <stdlib.h>
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: dr_2.c,v 1.3 2003/04/06 18:50:38 deraadt Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)dr_2.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: dr_2.c,v 1.3 2003/04/06 18:50:38 deraadt Exp $";
#endif
#endif /* not lint */
@


1.3
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: dr_2.c,v 1.2 1999/01/18 06:20:52 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: dr_2.c,v 1.2 1999/01/18 06:20:52 pjanzen Exp $";
@


1.2
log
@NetBSD merge with additional fixes from jsm28@@cam.ac.uk.  This game still
needs much more work.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d142 1
a142 1
closeon(from, to, command, ta, ma, af)
d145 1
d153 2
a154 1
	try(command, temp, ma, ta, af, ma, from->file->dir, from, to, &high, 0);
d160 1
a160 1
score(movement, ship, to, onlytemp)
d162 1
d177 1
a177 1
		(void) strcpy(movement, "d");
d240 6
a245 1
try(command, temp, ma, ta, af, vma, dir, f, t, high, rakeme)
d247 1
a247 2
	int ma, ta, af, vma, dir, *high, rakeme;
	char command[], temp[];
d255 3
a257 3
			(void) sprintf(st, "%d", n);
			(void) strcat(temp, st);
			new = score(temp, f, t, rakeme);
d260 1
a260 1
				(void) strcpy(command, temp);
d262 1
a262 1
			try(command, temp, ma-n, ta, af, vma-n,
d267 2
a268 2
		(void) strcat(temp, "r");
		new = score(temp, f, t, rakeme);
d271 1
a271 1
			(void) strcpy(command, temp);
d273 1
a273 1
		try(command, temp, ma-1, ta-1, af, min(ma-1, maxmove(f, (dir == 8 ? 1 : dir+1), 0)), (dir == 8 ? 1 : dir+1),f,t,high,rakeme);
d277 2
a278 2
		(void) strcat(temp, "l");
		new = score(temp, f, t, rakeme);
d281 1
a281 1
			(void) strcpy(command, temp);
d283 1
a283 1
		try(command, temp, ma-1, ta-1, af, (min(ma-1,maxmove(f, (dir-1 ? dir-1 : 8), 0))), (dir-1 ? dir -1 : 8), f, t, high, rakeme);
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: dr_2.c,v 1.4 1995/04/24 12:25:12 cgd Exp $";
d46 1
d50 1
d53 1
a53 1
	register struct ship *sp, *sq;
d66 2
a67 2
				if (grappled2(sp, sq))
					if (toughmelee(sp, sq, 0, 0))
d71 1
a71 1
				else if (couldwin(sp, sq)) {
d81 1
d84 2
a85 2
	register struct ship *sp, *sq;
	register char explode, sink;
d96 2
a97 2
		Write(sink == 1 ? W_SINK : W_EXPLODE, sp, 0, 2, 0, 0, 0);
		Write(W_DIR, sp, 0, 0, 0, 0, 0);
d102 1
a102 1
			makesignal(sp, "exploding!", (struct ship *)0);
d108 1
a108 1
			makesignal(sp, "sinking!", (struct ship *)0);
d112 1
d115 1
a115 1
	register struct ship *sp;
d123 3
a125 4
			Write(W_SIGNAL, sp, 1,
				(long)"prize crew overthrown", 0, 0, 0);
			Write(W_POINTS, sp->file->captured, 0, sp->file->captured->file->points - 2 * sp->specs->pts, 0, 0, 0);
			Write(W_CAPTURED, sp, 0, -1, 0, 0, 0);
d130 3
a132 2
strend(str)
char *str;
d134 1
a134 1
	register char *p;
d141 1
d143 3
a145 3
register struct ship *from, *to;
char command[];
int ma, ta, af;
d155 1
a155 1
int dtab[] = {0,1,1,2,3,4,4,5};		/* diagonal distances in x==y */
d157 1
d159 3
a161 3
char movement[];
register struct ship *ship, *to;
char onlytemp;
d165 1
a165 1
	register struct File *fp = ship->file;
d172 1
a172 1
	move(movement, ship, &fp->dir, &fp->row, &fp->col, &drift);
d191 7
a197 6
move(p, ship, dir, row, col, drift)
register char *p;
register struct ship *ship;
register char *dir;
register short *row, *col;
register char *drift;
d226 1
a226 1
			if (ship->specs->class >= 3 && !snagged(ship)
d236 1
d238 3
a240 3
register struct ship *f, *t;
int ma, ta, af, *high, rakeme;
char command[], temp[];
d242 1
a242 1
	register int new, n;
d246 1
a246 1
	if ((n = strend(temp)) < '1' || n > '9')
d259 1
a259 1
	if (ma > 0 && ta > 0 && (n = strend(temp)) != 'l' && n != 'r' || !strlen(temp)) {
d262 1
a262 1
		if (new > *high && (!rakeme || gunsbear(f, t) && !gunsbear(t, f))) {
d269 1
a269 1
	if ((ma > 0 && ta > 0 && (n = strend(temp)) != 'l' && n != 'r') || !strlen(temp)){
d281 1
d283 1
a283 1
char *str;
d285 1
a285 1
	register char *p;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
