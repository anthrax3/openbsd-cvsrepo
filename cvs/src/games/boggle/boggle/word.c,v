head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.8
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.26
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.18
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.22
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.20
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.16
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.01.10.13.18.07;	author mestre;	state Exp;
branches;
next	1.7;
commitid	H7VQLgV7QCavpvH5;

1.7
date	2009.10.27.23.59.24;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.27.00.10.14;	author tedu;	state Exp;
branches;
next	1.5;

1.5
date	2004.07.10.07.26.22;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.03.03.01.39;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.31.04.21.29;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	98.09.24.06.45.06;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.45;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.45;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove unnecessary headers

OK tb@@
@
text
@/*	$OpenBSD: word.c,v 1.7 2009/10/27 23:59:24 deraadt Exp $	*/
/*	$NetBSD: word.c,v 1.2 1995/03/21 12:14:45 cgd Exp $	*/

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Barry Brachman.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/stat.h>

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "bog.h"

static char *dictspace, *dictend;
static char *sp;

static int first = 1, lastch = 0;

/*
 * Return the next word in the compressed dictionary in 'buffer' or
 * NULL on end-of-file
 */
char *
nextword(FILE *fp)
{
	extern int wordlen;
	int ch, pcount;
	char *p;
	static char buf[MAXWORDLEN + 1];

	if (fp == NULL) {
		if (sp == dictend)
			return (NULL);
	
		p = buf + (int) *sp++;

		/*
		 * The dictionary ends with a null byte
		 */
		while (*sp >= 'a')
			if ((*p++ = *sp++) == 'q')
				*p++ = 'u';
	} else {
		if (first) {
			if ((pcount = getc(fp)) == EOF)
				return (NULL);
			first = 0;
		} else if ((pcount = lastch) == EOF)
			return (NULL);

		p = buf + pcount;
 
		while ((ch = getc(fp)) != EOF && ch >= 'a')
			if ((*p++ = ch) == 'q')
				*p++ = 'u';
		lastch = ch;
	}
	wordlen = (int) (p - buf);
	*p = '\0';
	return (buf);
}
 
/*
 * Reset the state of nextword() and do the fseek()
 */
long
dictseek(FILE *fp, long offset, int ptrname)
{
	if (fp == NULL) {
		if ((sp = dictspace + offset) >= dictend)
			return (-1);
		return (0);
	}

	first = 1;
	return (fseek(fp, offset, ptrname));
}

FILE *
opendict(char *dict)
{
	FILE *fp;

	if ((fp = fopen(dict, "r")) == NULL)
		return (NULL);
	return (fp);
}

/*
 * Load the given dictionary and initialize the pointers
 */
int
loaddict(FILE *fp)
{
	struct stat statb;
	long n;
	int st;
	char *p;

	if (fstat(fileno(fp), &statb) < 0) {
		(void)fclose(fp);
		return (-1);
	}

	/*
	 * An extra character (a sentinel) is allocated and set to null
	 * to improve the expansion loop in nextword().
	 */
	if ((dictspace = malloc(statb.st_size + 1)) == NULL) {
		(void)fclose(fp);
		return (-1);
	}
	n = (long)statb.st_size;
	sp = dictspace;
	dictend = dictspace + n;

	p = dictspace;
	st = -1;
	while (n > 0 && (st = fread(p, 1, BUFSIZ, fp)) > 0) {
		p += st;
		n -= st;
	}
	if (st < 0) {
		(void)fclose(fp);
		warnx("Error reading dictionary");
		return (-1);
	}
	*p = '\0';
	return (0);
}

/*
 * Dependent on the exact format of the index file:
 * Starting offset field begins in column 1 and length field in column 9
 * Taking the easy way out, the input buffer is made "large" and a check
 * is made for lines that are too long
 */
int
loadindex(char *indexfile)
{
	int i, j;
	char buf[BUFSIZ];
	FILE *fp;
	extern struct dictindex dictindex[];
 
	if ((fp = fopen(indexfile, "r")) == NULL) {
		warnx("Can't open '%s'", indexfile);
		return (-1);
	}
	i = 0;
	while (fgets(buf, sizeof(buf), fp) != NULL) {
		if (strchr(buf, '\n') == NULL) {
			warnx("A line in the index file is too long");
			fclose(fp);
			return(-1);
		}
		j = *buf - 'a';
		if (i != j) {
			warnx("Bad index order");
			fclose(fp);
			return(-1);
		}
		dictindex[j].start = atol(buf + 1);
		dictindex[j].length = atol(buf + 9) - dictindex[j].start;
		i++;
	}
	if (i != 26) {
		warnx("Bad index length");
		fclose(fp);
		return(-1);
	}
	(void) fclose(fp);
	return(0);
} 
@


1.7
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: word.c,v 1.6 2006/03/27 00:10:14 tedu Exp $	*/
a35 1
#include <sys/types.h>
a43 1
#include "extern.h"
@


1.6
log
@assorted fixes mostly from coverity via netbsd via jasper adriaanse via tech
@
text
@d1 1
a1 1
/*	$OpenBSD: word.c,v 1.5 2004/07/10 07:26:22 deraadt Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)word.c	8.1 (Berkeley) 6/11/93";
#else
static char rcsid[] = "$OpenBSD: word.c,v 1.5 2004/07/10 07:26:22 deraadt Exp $";
#endif
#endif /* not lint */
@


1.5
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: word.c,v 1.4 2003/06/03 03:01:39 millert Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: word.c,v 1.4 2003/06/03 03:01:39 millert Exp $";
d195 1
d201 1
d210 1
@


1.4
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: word.c,v 1.3 2002/05/31 04:21:29 pjanzen Exp $	*/
d40 1
a40 1
static char rcsid[] = "$OpenBSD: word.c,v 1.3 2002/05/31 04:21:29 pjanzen Exp $";
d65 1
a65 2
nextword(fp)
	FILE *fp;
d108 1
a108 4
dictseek(fp, offset, ptrname)
	FILE *fp;
	long offset;
	int ptrname;
d121 1
a121 2
opendict(dict)
	char *dict;
d134 1
a134 2
loaddict(fp)
	FILE *fp;
d180 1
a180 2
loadindex(indexfile)
	char *indexfile;
@


1.3
log
@de-register
@
text
@d1 1
a1 1
/*	$OpenBSD: word.c,v 1.2 1998/09/24 06:45:06 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static char rcsid[] = "$OpenBSD: word.c,v 1.2 1998/09/24 06:45:06 pjanzen Exp $";
@


1.2
log
@NetBSD changes and a few obvious fixes
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD$";
d73 2
a74 2
	register int ch, pcount;
	register char *p;
d193 1
a193 1
	register int i, j;
@


1.1
log
@Initial revision
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: word.c,v 1.2 1995/03/21 12:14:45 cgd Exp $";
d51 1
d176 1
a176 1
		(void)fprintf(stderr, "Error reading dictionary\n");
d199 1
a199 1
		(void) fprintf(stderr, "Can't open '%s'\n", indexfile);
d205 1
a205 2
			(void)fprintf(stderr,
				"A line in the index file is too long\n");
d210 2
a211 2
		    (void) fprintf(stderr, "Bad index order\n");
		    return(-1);
d218 1
a218 1
		(void) fprintf(stderr, "Bad index length\n");
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
