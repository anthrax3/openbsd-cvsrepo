head	1.11;
access;
symbols
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.34
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.30
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.32
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.24
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.28
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.26
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.22
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.20
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.18
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.16
	OPENBSD_5_0:1.11.0.14
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.12
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.10
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.6
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.8
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.4
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.2
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.9.0.16
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.14
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.12
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.10
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.4.0.14
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2008.08.04.18.42.09;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.03.20.12.02.27;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.10.07.26.22;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.03.01.39;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.31.04.21.29;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.17.19.42.20;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.09;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.09.24.06.45.06;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	97.07.23.20.04.49;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	97.04.09.02.01.17;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.45;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.45;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Accept 'q' or 'Q' for quit at the --More-- prompt.
@
text
@/*	$OpenBSD: prtable.c,v 1.10 2008/03/20 12:02:27 millert Exp $	*/
/*	$NetBSD: prtable.c,v 1.2 1995/03/21 12:14:42 cgd Exp $	*/

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Barry Brachman.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)prtable.c	8.1 (Berkeley) 6/11/93
 */

#include <curses.h>

#include "extern.h"

#define NCOLS	5

static int	get_maxlen(char **, int, int (*)(char **, int));

extern int	lastline, LIST_LINE, LIST_COL;

/*
 * Routine to print a table
 * Modified from 'ls.c' mods (BJB/83)
 * Arguments:
 *	base	- address of first entry
 *	num     - number of entries
 *	d_cols  - number of columns to use if > 0, "best" size if == 0
 *	width	- max line width if not zero
 *	prentry - address of the routine to call to print the string
 *	length  - address of the routine to call to determine the length
 *		  of string to be printed 
 *
 * prtable and length are called with the address of the base and
 * an index
 */
void
prtable(char **base, int num, int d_cols, int width, 
        void (*prentry)(char **, int), int (*length)(char **, int))
{
	int c, j;
	int a, b, cols, loc, maxlen, nrows, z;
	int col, row;

	if (num == 0)
		return;
	maxlen = get_maxlen(base, num, length) + 1;
	if (d_cols > 0)
		cols = d_cols;
	else
		cols = width / maxlen;
	if (cols == 0)
		cols = NCOLS;
	nrows = (num - 1) / cols + 1;
	for (a = 1; a <= nrows; a++) {
		b = c = z = loc = 0;
		for (j = 0; j < num; j++) {
			c++;
			if (c >= a + b)
				break;
		}
		while (j < num) {
			(*prentry)(base, j);
			loc += (*length)(base, j);
			z++;
			b += nrows;
			for (j++; j < num; j++) {
				c++;
				if (c >= a + b)
					break;
			}
			if (j < num) {
				while (loc < z * maxlen) {
					addch(' ');
					loc++;
				}
			}
		}
		getyx(stdscr, row, col);
		move(row + 1, 0);
		if (row + 1 == lastline && a != nrows) {
			attron(A_REVERSE);
			printw("--More--");
			attroff(A_REVERSE);
			do {
			    j = inputch();
			} while (j != ' ' && j != 'q' && j != 'Q');
			if (j == 'q' || j == 'Q') {
				move(row + 1, 0);
				wclrtoeol(stdscr);
				break;
			}
			move(LIST_LINE, LIST_COL);
			wclrtobot(stdscr);
		}
	}
	refresh();
}

static int
get_maxlen(char **base, int num, int (*length)(char **, int))
{
	int i, len, max;

	max = (*length)(base, 0);
	for (i = 0; i < num; i++) {
		if ((len = (*length)(base, i)) > max)
			max = len;
	}
	return(max);
}
@


1.10
log
@Make the bog code generic enough to handle arbitrary NxN grids and
add cubes for 5x5 mode based on Boggle Deluxe (aka Big Boggle) as
well as support for the "challenge cube" shipped with some versions
of Boggle.  Also Dynamically allocate record keeping structures so
we can deal with large word lists and add a --More-- prompt for
when there are too many wwords found by the computer to fit on the
terminal.  OK deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: prtable.c,v 1.9 2004/07/10 07:26:22 deraadt Exp $	*/
d111 8
a118 1
			while (inputch() != ' ');
@


1.9
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: prtable.c,v 1.8 2003/06/03 03:01:39 millert Exp $	*/
d44 3
a46 1
static int	get_maxlen(char *[], int, int (*)(char **, int));
d64 2
a65 2
prtable(char *base[], int num, int d_cols, int width, 
        void (*prentry)(char *[], int), int (*length)(char *[], int))
d107 8
d120 1
a120 1
get_maxlen(char *base[], int num, int (*length)(char **, int))
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: prtable.c,v 1.7 2002/05/31 04:21:29 pjanzen Exp $	*/
d62 2
a63 5
prtable(base, num, d_cols, width, prentry, length)
	char *base[];
	int num, d_cols, width;
	void (*prentry)(char *[], int);
	int (*length)(char *[], int);
d110 1
a110 4
get_maxlen(base, num, length)
	char *base[];
	int num;
	int (*length)(char **, int);
@


1.7
log
@de-register
@
text
@d1 1
a1 1
/*	$OpenBSD: prtable.c,v 1.6 2002/02/17 19:42:20 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.6
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: prtable.c,v 1.5 2002/02/16 21:27:09 millert Exp $	*/
d72 2
a73 2
	register int c, j;
	register int a, b, cols, loc, maxlen, nrows, z;
d122 1
a122 1
	register int i, len, max;
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: prtable.c,v 1.4 1998/09/24 06:45:06 pjanzen Exp $	*/
d48 1
a48 1
static int	get_maxlen __P((char *[], int, int (*)(char **, int)));
@


1.4
log
@NetBSD changes and a few obvious fixes
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d69 2
a70 2
	void (*prentry) __P((char *[], int));
	int (*length) __P((char *[], int));
d120 1
a120 1
	int (*length) __P((char **, int));
@


1.3
log
@tabify
@
text
@d1 1
@


1.2
log
@the the
@
text
@d71 2
a72 2
        register int c, j;
        register int a, b, cols, loc, maxlen, nrows, z;
d75 2
a76 2
        if (num == 0)
                return;
d84 10
a93 10
        nrows = (num - 1) / cols + 1;
        for (a = 1; a <= nrows; a++) {
                b = c = z = loc = 0;
                for (j = 0; j < num; j++) {
                        c++;
                        if (c >= a + b)
                                break;
                }
                while (j < num) {
                        (*prentry)(base, j);
d95 9
a103 9
                        z++;
                        b += nrows;
                        for (j++; j < num; j++) {
                                c++;
                                if (c >= a + b)
                                        break;
                        }
                        if (j < num) {
                                while (loc < z * maxlen) {
d105 2
a106 2
                                        loc++;
                                }
d108 1
a108 1
                }
d111 1
a111 1
        }
@


1.1
log
@Initial revision
@
text
@d61 1
a61 1
 * prtable and length are called with the the address of the base and
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
