head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.2
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.8.0.26
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.18
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.8
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.09.11.14.21.18;	author tb;	state Exp;
branches;
next	1.12;
commitid	vQliJ9M8LCn9g8k6;

1.12
date	2016.01.08.18.09.59;	author mestre;	state Exp;
branches;
next	1.11;
commitid	rzHxXR4ksTqCTr4f;

1.11
date	2016.01.08.18.05.58;	author mestre;	state Exp;
branches;
next	1.10;
commitid	qycMYAxRCIO41J4W;

1.10
date	2016.01.03.14.38.17;	author mestre;	state Exp;
branches;
next	1.9;
commitid	Ptgw9rNvmSHNRfGy;

1.9
date	2015.11.11.01.12.10;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	nVtGolYSsQ6VkRrW;

1.8
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.06.18.50.37;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.03.21.36.12;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	99.09.25.15.52.20;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.09.22.04.08.24;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	96.06.02.19.47.09;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.08;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Callers of time(3) should #include <time.h>.

ok deraadt
@
text
@/*	$OpenBSD: save.c,v 1.12 2016/01/08 18:09:59 mestre Exp $	*/
/*	$NetBSD: save.c,v 1.4 1995/03/24 05:02:13 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/stat.h>

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "mille.h"

/*
 * @@(#)save.c	1.2 (Berkeley) 3/28/83
 */

typedef	struct stat	STAT;

/*
 *	This routine saves the current game for use at a later date.
 *	Returns FALSE if it couldn't be done.
 */
bool
save(void)
{
	char	*sp;
	int	outf;
	time_t	*tp;
	char	buf[256];
	time_t	tme;
	STAT	junk;
	bool	rv;

	sp = NULL;
	tp = &tme;
	if (Fromfile && getyn(SAMEFILEPROMPT))
		strlcpy(buf, Fromfile, sizeof(buf));
	else {
over:
		prompt(FILEPROMPT);
		leaveok(Board, FALSE);
		refresh();
		sp = buf;
		while ((*sp = readch()) != '\n' && *sp != '\r' &&
		    (sp - buf < (int)sizeof(buf))) {
			if (*sp == killchar())
				goto over;
			else if (*sp == erasechar()) {
				if (--sp < buf)
					sp = buf;
				else {
					addch('\b');
					/*
					 * if the previous char was a control
					 * char, cover up two characters.
					 */
					if (*sp < ' ')
						addch('\b');
					clrtoeol();
				}
			}
			else {
				addstr(unctrl(*sp));
				++sp;
			}
			refresh();
		}
		*sp = '\0';
		leaveok(Board, TRUE);
	}

	/*
	 * check for existing files, and confirm overwrite if needed
	 */

	if (sp == buf || (!Fromfile && stat(buf, &junk) > -1
	    && getyn(OVERWRITEFILEPROMPT) == FALSE))
		return FALSE;

	if ((outf = open(buf, O_CREAT | O_TRUNC | O_WRONLY, 0644)) < 0) {
		error(strerror(errno));
		return FALSE;
	}
	mvwaddstr(Score, ERR_Y, ERR_X, buf);
	wrefresh(Score);
	time(tp);			/* get current time		*/
	rv = varpush(outf, writev);
	close(outf);
	if (!rv)
		unlink(buf);
	else {
		strlcpy(buf, ctime(tp), sizeof buf);
		for (sp = buf; *sp != '\n'; sp++)
			continue;
		*sp = '\0';
		wprintw(Score, " [%s]", buf);
	}
	wclrtoeol(Score);
	wrefresh(Score);
	return rv;
}

/*
 *	This does the actual restoring.  It returns TRUE if the
 * backup was made on exiting, in which case certain things must
 * be cleaned up before the game starts.
 */
bool
rest_f(const char *file)
{
	char	*sp;
	int	inf;
	char	buf[80];
	STAT	sbuf;

	if ((inf = open(file, O_RDONLY)) < 0)
		err(1, "%s", file);
	if (fstat(inf, &sbuf) < 0)		/* get file stats	*/
		err(1, "%s", file);
	varpush(inf, readv);
	close(inf);
	strlcpy(buf, ctime(&sbuf.st_mtime), sizeof buf);
	for (sp = buf; *sp != '\n'; sp++)
		continue;
	*sp = '\0';
	/*
	 * initialize some necessary values
	 */
	(void)snprintf(Initstr, sizeof Initstr, "%s [%s]\n", file, buf);
	Fromfile = file;
	return !On_exit;
}
@


1.12
log
@ANSIfy mille(6)

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.11 2016/01/08 18:05:58 mestre Exp $	*/
d39 1
@


1.11
log
@Headers cleanup and also the following:

mille.h:
#define CTRL locally, which is used by move.c and misc.c, to avoid including
termios.h or sys/ttydefaults.h where it's actually defined

varpush.c:
Change _PATH_DEVNULL to "/dev/null" since other systems may not have it defined
but also avoids including <paths.h>

Included a few sugestions from tb@@ who also gave his OK
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.10 2016/01/03 14:38:17 mestre Exp $	*/
d54 1
a54 1
save()
d139 1
a139 2
rest_f(file)
	const char	*file;
@


1.10
log
@About 13 years ago when the idiom srandom(time()), and sometimes
srandom(time()+getpid()), was changed by srandomdev(), but #include <time.h>
lived up until this day so remove it.

Additionally, earlier than that, 18 years ago, random(6) was one of the first
consumers of arc4random(3) family, and was pulling it from dev/rndvar.h but
these days we pull it from stdlib.h, which is already done, so while here
remove dev/rndvar.h also.

"seems comprehensive to me" deraadt@@ and OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.9 2015/11/11 01:12:10 deraadt Exp $	*/
d32 8
@


1.9
log
@creat() -> open equiv; from Frederic Nowak
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.8 2009/10/27 23:59:26 deraadt Exp $	*/
a32 1
#include <time.h>
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.7 2003/06/03 03:01:40 millert Exp $	*/
d103 1
a103 1
	if ((outf = creat(buf, 0644)) < 0) {
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.6 2003/04/06 18:50:37 deraadt Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)save.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: save.c,v 1.6 2003/04/06 18:50:37 deraadt Exp $";
#endif
#endif /* not lint */
@


1.6
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.5 2001/09/03 21:36:12 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: save.c,v 1.5 2001/09/03 21:36:12 pjanzen Exp $";
@


1.5
log
@Tidying, some from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.4 1999/09/25 15:52:20 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: save.c,v 1.4 1999/09/25 15:52:20 pjanzen Exp $";
d127 1
a127 1
		strcpy(buf, ctime(tp));
d158 1
a158 1
	strcpy(buf, ctime(&sbuf.st_mtime));
d165 1
a165 1
	(void)sprintf(Initstr, "%s [%s]\n", file, buf);
@


1.4
log
@Tidying and minor changes from or based on jsm28@@cam.ac.uk's work for the
Linux bsd-games package and NetBSD.  Mainly using 'const'.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.3 1998/09/22 04:08:24 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: save.c,v 1.3 1998/09/22 04:08:24 pjanzen Exp $";
d80 1
a80 1
		    (sp - buf < sizeof(buf))) {
@


1.3
log
@NetBSD changes and further fixes (reformatted man page, better handling of
user input).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d45 1
a47 5
# ifdef	attron
#	include	<term.h>
#	define	_tty	cur_term->Nttyb
# endif	attron

d71 3
a73 4
	if (Fromfile && getyn(SAMEFILEPROMPT)) {
		strncpy(buf, Fromfile, sizeof(buf));
		buf[sizeof(buf) - 1] = '\0';
	} else {
d145 1
a145 1
	char	*file;
@


1.2
log
@Update for modern curses implementation
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: save.c,v 1.4 1995/03/24 05:02:13 cgd Exp $";
a44 4
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <termios.h>
a57 4
char	*ctime();

int	read(), write();

d59 2
a60 1
 *	This routine saves the current game for use at a later date
d62 10
d73 1
a73 10
save() {

	extern int	errno;
	register char	*sp;
	register int		outf;
	register time_t	*tp;
	char		buf[80];
	time_t		tme;
	STAT		junk;

d75 4
a78 3
	if (Fromfile && getyn(SAMEFILEPROMPT))
		strcpy(buf, Fromfile);
	else {
d84 2
a85 1
		while ((*sp = readch()) != '\n') {
d127 1
a127 5
	strcpy(buf, ctime(tp));
	for (sp = buf; *sp != '\n'; sp++)
		continue;
	*sp = '\0';
	varpush(outf, write);
d129 9
a137 1
	wprintw(Score, " [%s]", buf);
d140 1
a140 1
	return TRUE;
d148 1
d150 12
a161 16
register char	*file; {

	register char	*sp;
	register int		inf;
	char		buf[80];
	STAT		sbuf;

	if ((inf = open(file, 0)) < 0) {
		perror(file);
		exit(1);
	}
	if (fstat(inf, &sbuf) < 0) {		/* get file stats	*/
		perror(file);
		exit(1);
	}
	varpush(inf, read);
a173 1

@


1.1
log
@Initial revision
@
text
@a49 4
#ifndef	unctrl
#include "unctrl.h"
#endif

d72 3
a74 3
	reg char	*sp;
	reg int		outf;
	reg time_t	*tp;
d148 1
a148 1
reg char	*file; {
d150 2
a151 2
	reg char	*sp;
	reg int		inf;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
