head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.6
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.4
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.9.0.42
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.40
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.38
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.36
	OPENBSD_5_0:1.9.0.34
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.32
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.30
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.26
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.9.0.28
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.24
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.22
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.20
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.18
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.16
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.14
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.12
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.01.08.18.05.58;	author mestre;	state Exp;
branches;
next	1.12;
commitid	qycMYAxRCIO41J4W;

1.12
date	2015.12.26.00.26.39;	author mestre;	state Exp;
branches;
next	1.11;
commitid	NcBz9zfScw6TwPoT;

1.11
date	2015.01.19.00.47.01;	author deraadt;	state Exp;
branches;
next	1.10;
commitid	5ZAlaeZ7VdZBObKN;

1.10
date	2013.08.29.20.22.16;	author naddy;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.06.18.50.37;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.17.19.42.20;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.10;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.03.21.36.12;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	99.09.25.15.52.20;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.09.22.04.08.23;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	96.06.02.19.47.07;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.07;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.07;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Headers cleanup and also the following:

mille.h:
#define CTRL locally, which is used by move.c and misc.c, to avoid including
termios.h or sys/ttydefaults.h where it's actually defined

varpush.c:
Change _PATH_DEVNULL to "/dev/null" since other systems may not have it defined
but also avoids including <paths.h>

Included a few sugestions from tb@@ who also gave his OK
@
text
@/*	$OpenBSD: mille.h,v 1.12 2015/12/26 00:26:39 mestre Exp $	*/
/*	$NetBSD: mille.h,v 1.5 1995/03/24 05:01:51 cgd Exp $	*/

/*
 * Copyright (c) 1982, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)mille.h	8.1 (Berkeley) 5/31/93
 */

#include <sys/uio.h>

#include <curses.h>

/*
 * @@(#)mille.h	1.1 (Berkeley) 4/1/82
 */

/*
 * Miscellaneous constants
 */

#define	CARD		short

#define	HAND_SZ		7	/* number of cards in a hand	*/
#define	DECK_SZ		101	/* number of cards in decks	*/
#define	NUM_SAFE	4	/* number of safety cards	*/
#define	NUM_MILES	5	/* number of milestones types	*/
#define	NUM_CARDS	20	/* number of types of cards	*/
#define	BOARD_Y		17	/* size of board screen		*/
#define	BOARD_X		40
#define	MILES_Y		7	/* size of mileage screen	*/
#define	MILES_X		80
#define	SCORE_Y		17	/* size of score screen		*/
#define	SCORE_X		40
#define	MOVE_Y		10	/* Where to print move prompt	*/
#define	MOVE_X		20
#define	ERR_Y		15	/* Where to print errors	*/
#define	ERR_X		5
#define	EXT_Y		4	/* Where to put Extension	*/
#define	EXT_X		9

#define	PLAYER		0
#define	COMP		1

#define	W_SMALL		0	/* Small (initial) window	*/
#define	W_FULL		1	/* Full (final) window		*/

/*
 * Move types
 */

#define	M_DISCARD	0
#define	M_DRAW		1
#define	M_PLAY		2
#define	M_ORDER		3

/*
 * Scores
 */

#define	SC_SAFETY	100
#define	SC_ALL_SAFE	300
#define	SC_COUP		300
#define	SC_TRIP		400
#define	SC_SAFE		300
#define	SC_DELAY	300
#define	SC_EXTENSION	200
#define	SC_SHUT_OUT	500

/*
 * safety descriptions
 */

#define	S_UNKNOWN	0	/* location of safety unknown	*/
#define	S_IN_HAND	1	/* safety in player's hand	*/
#define	S_PLAYED	2	/* safety has been played	*/
#define	S_GAS_SAFE	0	/* Gas safety card index	*/
#define	S_SPARE_SAFE	1	/* Tire safety card index	*/
#define	S_DRIVE_SAFE	2	/* Driveing safety card index	*/
#define	S_RIGHT_WAY	3	/* Right-of-Way card index	*/
#define	S_CONV		15	/* conversion from C_ to S_	*/

/*
 * card numbers
 */

#define	C_INIT		-1
#define	C_25		0
#define	C_50		1
#define	C_75		2
#define	C_100		3
#define	C_200		4
#define	C_EMPTY		5
#define	C_FLAT		6	
#define	C_CRASH		7
#define	C_STOP		8
#define	C_LIMIT		9
#define	C_GAS		10
#define	C_SPARE		11
#define	C_REPAIRS	12
#define	C_GO		13
#define	C_END_LIMIT	14
#define	C_GAS_SAFE	15
#define	C_SPARE_SAFE	16
#define	C_DRIVE_SAFE	17
#define	C_RIGHT_WAY	18

/*
 * prompt types
 */

#define	MOVEPROMPT		0
#define	REALLYPROMPT		1
#define	ANOTHERHANDPROMPT	2
#define	ANOTHERGAMEPROMPT	3
#define	SAVEGAMEPROMPT		4
#define	SAMEFILEPROMPT		5
#define	FILEPROMPT		6
#define	EXTENSIONPROMPT		7
#define	OVERWRITEFILEPROMPT	8

typedef struct {
	bool	coups[NUM_SAFE];
	bool	can_go;
	bool	new_battle;
	bool	new_speed;
	short	safety[NUM_SAFE];
	short	sh_safety[NUM_SAFE];
	short	nummiles[NUM_MILES];
	short	sh_nummiles[NUM_MILES];
	CARD	hand[HAND_SZ];
	CARD	sh_hand[HAND_SZ];
	CARD	battle;
	CARD	sh_battle;
	CARD	speed;
	CARD	sh_speed;
	int	mileage;
	int	sh_mileage;
	int	hand_tot;
	int	sh_hand_tot;
	int	safescore;
	int	sh_safescore;
	int	coupscore;
	int	total;
	int	sh_total;
	int	games;
	int	sh_games;
	int	was_finished;
} PLAY;

/*
 * macros
 */

#undef 	CTRL
#define	CTRL(c)		((c) & 0x1f)
#define	other(x)	(1 - x)
#define	nextplay()	(Play = other(Play))
#define	nextwin(x)	(1 - x)
#define	opposite(x)	(Opposite[x])
#define	is_safety(x)	(x >= C_GAS_SAFE)

/*
 * externals
 */

extern bool	Debug, Finished, Next, On_exit, Order, Saved;

extern char	Initstr[100], *C_fmt;
extern const char	*const *C_name, *Fromfile;

extern int	Card_no, End, Handstart, Movetype, Numgos,
		Numneed[], Numseen[NUM_CARDS], Play, Window;
extern const int	Numcards[], Value[];

extern CARD	Deck[DECK_SZ], Discard, Sh_discard, *Topcard;
extern const CARD	Opposite[NUM_CARDS];

extern FILE	*outf;

extern PLAY	Player[2];

extern WINDOW	*Board, *Miles, *Score;

/*
 * functions
 */

void	account(CARD);
void	calcmove(void);
int	canplay(const PLAY *, const PLAY *, CARD);
int	check_ext(bool);
void	check_go(void);
void	check_more(void);
__dead void	die(int);
void	domove(void);
bool	error(char *, ...);
void	finalscore(PLAY *);
CARD	getcard(void);
void	getmove(void);
int	getyn(int);
int	haspicked(const PLAY *);
void	init(void);
int	is_repair(CARD);
void	newboard(void);
void	newscore(void);
int	onecard(const PLAY *);
int	playcard(PLAY *);
void	prboard(void);
void	prompt(int);
void	prscore(bool);
int	readch(void);
bool	rest_f(const char *);
int	roll(int, int);
void	rub(int);
int	safety(CARD);
bool	save(void);
void	show_card(int, int, CARD, CARD *);
void	show_score(int, int, int, int *);
void	shuffle(void);
void	sort(CARD *);
bool	varpush(int, ssize_t(int, const struct iovec *, int));
#ifdef EXTRAP
void	extrapolate(PLAY *);
void	undoex(void);
#endif
@


1.12
log
@Set as __dead a few more functions, that don't return, on games/

With precious tip, help and also OK from tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mille.h,v 1.11 2015/01/19 00:47:01 deraadt Exp $	*/
d35 3
a37 12
#include	<sys/types.h>
#include	<sys/uio.h>
#include	<sys/stat.h>
#include	<ctype.h>
#include	<err.h>
#include	<errno.h>
#include	<curses.h>
#include	<fcntl.h>
#include	<stdlib.h>
#include	<string.h>
#include	<termios.h>
#include	<unistd.h>
d180 2
a229 1
int	main(int, char **);
@


1.11
log
@normalize formatting
@
text
@d1 1
a1 1
/*	$OpenBSD: mille.h,v 1.10 2013/08/29 20:22:16 naddy Exp $	*/
d227 1
a227 1
void	die(int);
@


1.10
log
@replace srandomdev()+random() with the arc4random*() family
tweaks and ok millert@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: mille.h,v 1.9 2003/06/03 03:01:40 millert Exp $	*/
d35 12
a46 12
# include	<sys/types.h>
# include	<sys/uio.h>
# include	<sys/stat.h>
# include	<ctype.h>
# include	<err.h>
# include	<errno.h>
# include	<curses.h>
# include	<fcntl.h>
# include	<stdlib.h>
# include	<string.h>
# include	<termios.h>
# include	<unistd.h>
d56 1
a56 2
# define	unsgn		unsigned
# define	CARD		short
d58 17
a74 17
# define	HAND_SZ		7	/* number of cards in a hand	*/
# define	DECK_SZ		101	/* number of cards in decks	*/
# define	NUM_SAFE	4	/* number of safety cards	*/
# define	NUM_MILES	5	/* number of milestones types	*/
# define	NUM_CARDS	20	/* number of types of cards	*/
# define	BOARD_Y		17	/* size of board screen		*/
# define	BOARD_X		40
# define	MILES_Y		7	/* size of mileage screen	*/
# define	MILES_X		80
# define	SCORE_Y		17	/* size of score screen		*/
# define	SCORE_X		40
# define	MOVE_Y		10	/* Where to print move prompt	*/
# define	MOVE_X		20
# define	ERR_Y		15	/* Where to print errors	*/
# define	ERR_X		5
# define	EXT_Y		4	/* Where to put Extension	*/
# define	EXT_X		9
d76 2
a77 2
# define	PLAYER		0
# define	COMP		1
d79 2
a80 2
# define	W_SMALL		0	/* Small (initial) window	*/
# define	W_FULL		1	/* Full (final) window		*/
d86 4
a89 4
# define	M_DISCARD	0
# define	M_DRAW		1
# define	M_PLAY		2
# define	M_ORDER		3
d95 8
a102 8
# define	SC_SAFETY	100
# define	SC_ALL_SAFE	300
# define	SC_COUP		300
# define	SC_TRIP		400
# define	SC_SAFE		300
# define	SC_DELAY	300
# define	SC_EXTENSION	200
# define	SC_SHUT_OUT	500
d108 8
a115 8
# define	S_UNKNOWN	0	/* location of safety unknown	*/
# define	S_IN_HAND	1	/* safety in player's hand	*/
# define	S_PLAYED	2	/* safety has been played	*/
# define	S_GAS_SAFE	0	/* Gas safety card index	*/
# define	S_SPARE_SAFE	1	/* Tire safety card index	*/
# define	S_DRIVE_SAFE	2	/* Driveing safety card index	*/
# define	S_RIGHT_WAY	3	/* Right-of-Way card index	*/
# define	S_CONV		15	/* conversion from C_ to S_	*/
d121 20
a140 20
# define	C_INIT		-1
# define	C_25		0
# define	C_50		1
# define	C_75		2
# define	C_100		3
# define	C_200		4
# define	C_EMPTY		5
# define	C_FLAT		6	
# define	C_CRASH		7
# define	C_STOP		8
# define	C_LIMIT		9
# define	C_GAS		10
# define	C_SPARE		11
# define	C_REPAIRS	12
# define	C_GO		13
# define	C_END_LIMIT	14
# define	C_GAS_SAFE	15
# define	C_SPARE_SAFE	16
# define	C_DRIVE_SAFE	17
# define	C_RIGHT_WAY	18
d146 9
a154 9
# define	MOVEPROMPT		0
# define	REALLYPROMPT		1
# define	ANOTHERHANDPROMPT	2
# define	ANOTHERGAMEPROMPT	3
# define	SAVEGAMEPROMPT		4
# define	SAMEFILEPROMPT		5
# define	FILEPROMPT		6
# define	EXTENSIONPROMPT		7
# define	OVERWRITEFILEPROMPT	8
d189 5
a193 5
# define	other(x)	(1 - x)
# define	nextplay()	(Play = other(Play))
# define	nextwin(x)	(1 - x)
# define	opposite(x)	(Opposite[x])
# define	is_safety(x)	(x >= C_GAS_SAFE)
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: mille.h,v 1.8 2003/04/06 18:50:37 deraadt Exp $	*/
a155 5

# ifdef	SYSV
# define	srandom(x)	srand(x)
# define	random()	rand()
# endif		/* SYSV */
@


1.8
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: mille.h,v 1.7 2002/02/17 19:42:20 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: mille.h,v 1.6 2002/02/16 21:27:10 millert Exp $	*/
d211 1
a211 1
extern char	Initstr[], *C_fmt;
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: mille.h,v 1.5 2001/09/03 21:36:12 pjanzen Exp $	*/
d265 1
a265 1
bool	varpush __P((int, ssize_t(int, const struct iovec *, int)));
@


1.5
log
@Tidying, some from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: mille.h,v 1.4 1999/09/25 15:52:20 pjanzen Exp $	*/
d231 35
a265 35
void	account __P((CARD));
void	calcmove __P((void));
int	canplay __P((const PLAY *, const PLAY *, CARD));
int	check_ext __P((bool));
void	check_go __P((void));
void	check_more __P((void));
void	die __P((int));
void	domove __P((void));
bool	error __P((char *, ...));
void	finalscore __P((PLAY *));
CARD	getcard __P((void));
void	getmove __P((void));
int	getyn __P((int));
int	haspicked __P((const PLAY *));
void	init __P((void));
int	is_repair __P((CARD));
int	main __P((int, char **));
void	newboard __P((void));
void	newscore __P((void));
int	onecard __P((const PLAY *));
int	playcard __P((PLAY *));
void	prboard __P((void));
void	prompt __P((int));
void	prscore __P((bool));
int	readch __P((void));
bool	rest_f __P((const char *));
int	roll __P((int, int));
void	rub __P((int));
int	safety __P((CARD));
bool	save __P((void));
void	show_card __P((int, int, CARD, CARD *));
void	show_score __P((int, int, int, int *));
void	shuffle __P((void));
void	sort __P((CARD *));
bool	varpush __P((int, ssize_t __P((int, const struct iovec *, int))));
d267 2
a268 2
void	extrapolate __P((PLAY *));
void	undoex __P((void));
@


1.4
log
@Tidying and minor changes from or based on jsm28@@cam.ac.uk's work for the
Linux bsd-games package and NetBSD.  Mainly using 'const'.
@
text
@d1 1
a1 1
/*	$OpenBSD: mille.h,v 1.3 1998/09/22 04:08:23 pjanzen Exp $	*/
d65 1
a65 1
# define	NUM_SAFE	4	/* number of saftey cards	*/
d203 1
a203 1
# define	issafety(x)	(x >= C_GAS_SAFE)
d246 1
a246 1
int	isrepair __P((CARD));
@


1.3
log
@NetBSD changes and further fixes (reformatted man page, better handling of
user input).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a163 5

# ifndef	attron
#	define	erasechar()	_tty.c_cc[VERASE]
#	define	killchar()	_tty.c_cc[VKILL]
# endif
d211 2
a212 1
extern char	*C_fmt, **C_name, *Fromfile, Initstr[];
d214 3
a216 2
extern int	Card_no, End, Handstart, Movetype, Numcards[], Numgos,
		Numneed[], Numseen[NUM_CARDS], Play, Value[], Window;
d218 2
a219 2
extern CARD	Deck[DECK_SZ], Discard, Opposite[NUM_CARDS], Sh_discard,
		*Topcard;
d233 1
a233 1
int	canplay __P((PLAY *, PLAY *, CARD));
d244 1
a244 1
int	haspicked __P((PLAY *));
d250 1
a250 1
int	onecard __P((PLAY *));
d254 1
a254 1
void	prscore __P((int));
d256 1
a256 1
bool	rest_f __P((char *));
@


1.2
log
@Update for modern curses implementation
@
text
@d1 1
d40 2
d43 2
d46 3
d50 1
a50 1
# include	<string.h>
d169 1
a169 1
# endif	SYSV
d234 39
a272 1
CARD	getcard();
@


1.1
log
@Initial revision
@
text
@a160 5
# else
# ifndef	erasechar
#	define	erasechar()	_tty.sg_erase
#	define	killchar()	_tty.sg_kill
# endif
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
