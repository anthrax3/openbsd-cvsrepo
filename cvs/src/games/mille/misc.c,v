head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.22
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.20
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.28
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.24
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.22
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.20
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.18
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.16
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.14
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.12
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.6
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.4
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.01.08.18.09.59;	author mestre;	state Exp;
branches;
next	1.12;
commitid	rzHxXR4ksTqCTr4f;

1.12
date	2016.01.08.18.05.58;	author mestre;	state Exp;
branches;
next	1.11;
commitid	qycMYAxRCIO41J4W;

1.11
date	2014.11.16.04.49.48;	author guenther;	state Exp;
branches;
next	1.10;
commitid	8XNajyb9IqHkZEKg;

1.10
date	2009.10.27.23.59.25;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.03.21.36.12;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.23.21.50.20;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	99.09.30.03.24.32;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	99.09.25.15.52.20;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.09.22.04.08.23;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	96.06.02.19.47.07;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.07;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.07;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@ANSIfy mille(6)

OK tb@@
@
text
@/*	$OpenBSD: misc.c,v 1.12 2016/01/08 18:05:58 mestre Exp $	*/
/*	$NetBSD: misc.c,v 1.4 1995/03/24 05:01:54 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <ctype.h>
#include <unistd.h>

#include "mille.h"

/*
 * @@(#)misc.c	1.2 (Berkeley) 3/28/83
 */

#define	NUMSAFE	4

bool
error(char *str, ...)
{
	va_list ap;

	va_start(ap, str);
	wmove(Score, ERR_Y, ERR_X);
	vwprintw(Score, str, ap);
	wclrtoeol(Score);
	beep();
	refresh();
	va_end(ap);
	return FALSE;
}

CARD
getcard(void)
{
	int	c, c1;

	for (;;) {
		while ((c = readch()) == '\n' || c == '\r' || c == ' ')
			continue;
		if (islower(c))
			c = toupper(c);
		if (c == killchar() || c == erasechar())
			return -1;
		addstr(unctrl(c));
		clrtoeol();
		switch (c) {
		  case '1':	case '2':	case '3':
		  case '4':	case '5':	case '6':
			c -= '0';
			break;
		  case '0':	case 'P':	case 'p':
			c = 0;
			break;
		  default:
			beep();
			addch('\b');
			if (!isprint(c))
				addch('\b');
			c = -1;
			break;
		}
		refresh();
		if (c >= 0) {
			while ((c1 = readch()) != '\r' && c1 != '\n' && c1 != ' ')
				if (c1 == killchar())
					return -1;
				else if (c1 == erasechar()) {
					addch('\b');
					clrtoeol();
					refresh();
					goto cont;
				}
				else
					beep();
			return c;
		}
cont:		;
	}
}

int
check_ext(bool forcomp)
{
	if (End == 700) {
		if (Play == PLAYER) {
			if (getyn(EXTENSIONPROMPT)) {
extend:
				if (!forcomp)
					End = 1000;
				return TRUE;
			} else {
done:
				if (!forcomp)
					Finished = TRUE;
				return FALSE;
			}
		} else {
			PLAY	*pp, *op;
			int	i, safe, miles;

			pp = &Player[COMP];
			op = &Player[PLAYER];
			for (safe = 0, i = 0; i < NUMSAFE; i++)
				if (pp->safety[i] != S_UNKNOWN)
					safe++;
			if (safe < 2)
				goto done;
			if (op->mileage == 0 || onecard(op)
			    || (op->can_go && op->mileage >= 500))
				goto done;
			for (miles = 0, i = 0; i < NUMSAFE; i++)
				if (op->safety[i] != S_PLAYED
				    && pp->safety[i] == S_UNKNOWN)
					miles++;
			if (miles + safe == NUMSAFE)
				goto extend;
			for (miles = 0, i = 0; i < HAND_SZ; i++)
				if ((safe = pp->hand[i]) <= C_200)
					miles += Value[safe];
			if (miles + (Topcard - Deck) * 3 > 1000)
				goto extend;
			goto done;
		}
	} else
		goto done;
}

/*
 *	Get a yes or no answer to the given question.  Saves are
 * also allowed.  Return TRUE if the answer was yes, FALSE if no.
 */
int
getyn(int promptno)
{
	char	c;

	Saved = FALSE;
	for (;;) {
		leaveok(Board, FALSE);
		prompt(promptno);
		clrtoeol();
		refresh();
		switch (c = readch()) {
		  case 'n':	case 'N':
			addch('N');
			refresh();
			leaveok(Board, TRUE);
			return FALSE;
		  case 'y':	case 'Y':
			addch('Y');
			refresh();
			leaveok(Board, TRUE);
			return TRUE;
		  case 's':	case 'S':
			addch('S');
			refresh();
			Saved = save();
			continue;
		  case CTRL('L'):
			wrefresh(curscr);
			break;
		  default:
			addstr(unctrl(c));
			refresh();
			beep();
			break;
		}
	}
}

/*
 *	Check to see if more games are desired.  If not, and game
 * came from a saved file, make sure that they don't want to restore
 * it.  Exit appropriately.
 */
void
check_more(void)
{
	On_exit = TRUE;
	if (Player[PLAYER].total >= 5000 || Player[COMP].total >= 5000) {
		if (getyn(ANOTHERGAMEPROMPT))
			return;
		else {
			/*
			 * must do accounting normally done in main()
			 */
			if (Player[PLAYER].total > Player[COMP].total)
				Player[PLAYER].games++;
			else if (Player[PLAYER].total < Player[COMP].total)
				Player[COMP].games++;
			Player[COMP].total = 0;
			Player[PLAYER].total = 0;
		}
	} else
		if (getyn(ANOTHERHANDPROMPT))
			return;
	if (!Saved && getyn(SAVEGAMEPROMPT))
		if (!save())
			return;
	die(0);
}

int
readch(void)
{
	int	cnt;
	static char	c;

	for (cnt = 0; read(STDIN_FILENO, &c, 1) <= 0; cnt++)
		if (cnt > 100)
			die(1);
	return c;
}
@


1.12
log
@Headers cleanup and also the following:

mille.h:
#define CTRL locally, which is used by move.c and misc.c, to avoid including
termios.h or sys/ttydefaults.h where it's actually defined

varpush.c:
Change _PATH_DEVNULL to "/dev/null" since other systems may not have it defined
but also avoids including <paths.h>

Included a few sugestions from tb@@ who also gave his OK
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.11 2014/11/16 04:49:48 guenther Exp $	*/
d60 1
a60 1
getcard()
d109 1
a109 2
check_ext(forcomp)
	bool	forcomp;
d160 1
a160 2
getyn(promptno)
	int	promptno;
d204 1
a204 1
check_more()
d231 1
a231 1
readch()
@


1.11
log
@Eliminate pointless use of <sys/param.h>, <sys/file.h>, <sys/sockio.h>,
    and <sys/ttydefaults.h>
Replace MAXPATHLEN with PATH_MAX and MAXLOGNAME with LOGIN_NAME_MAX
Pull in <limits.h> where needed
Prefer sizeof(var) over MAXFOO or FOO_MAX

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.10 2009/10/27 23:59:25 deraadt Exp $	*/
d33 2
a34 2
#include <termios.h>
#include <stdarg.h>
d36 1
a36 1
#include	"mille.h"
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.9 2003/06/03 03:01:40 millert Exp $	*/
a32 1
#include <sys/file.h>
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.8 2002/02/19 19:39:36 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)misc.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: misc.c,v 1.8 2002/02/19 19:39:36 millert Exp $";
#endif
#endif /* not lint */
@


1.8
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.7 2001/09/03 21:36:12 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.7 2001/09/03 21:36:12 pjanzen Exp $";
@


1.7
log
@Tidying, some from NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.6 2000/07/23 21:50:20 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.6 2000/07/23 21:50:20 pjanzen Exp $";
d47 1
a47 6

#if __STDC__
#include	<stdarg.h>
#else
#include	<varargs.h>
#endif
a57 1
#if __STDC__
a58 5
#else
error(str, arg)
	char	*str;
	va_dcl
#endif
a61 1
#if __STDC__
a62 3
#else
	va_start(ap);
#endif
@


1.6
log
@Die more cleanly if stdin can't be read from.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.5 1999/09/30 03:24:32 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.5 1999/09/30 03:24:32 pjanzen Exp $";
d110 1
a110 1
			putchar('\07');
d129 1
a129 1
					write(0, "\07", 1);
d175 1
a175 1
					miles += Value[safe]; 
d222 1
a222 1
			putchar('\07');
@


1.5
log
@better use of curses
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.4 1999/09/25 15:52:20 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.4 1999/09/25 15:52:20 pjanzen Exp $";
d268 1
a268 1
			exit(1);
@


1.4
log
@Tidying and minor changes from or based on jsm28@@cam.ac.uk's work for the
Linux bsd-games package and NetBSD.  Mainly using 'const'.
@
text
@d1 1
a1 1
/*	$OpenBSD: misc.c,v 1.3 1998/09/22 04:08:23 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: misc.c,v 1.3 1998/09/22 04:08:23 pjanzen Exp $";
d80 2
a81 2
	clrtoeol();
	putchar('\07');
@


1.3
log
@NetBSD changes and further fixes (reformatted man page, better handling of
user input).
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
a54 5

# ifdef	attron
#	include	<term.h>
#	define	_tty	cur_term->Nttyb
# endif	attron
@


1.2
log
@Update for modern curses implementation
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: misc.c,v 1.4 1995/03/24 05:01:54 cgd Exp $";
d48 6
d67 4
a70 1
/* VARARGS1 */
d72 3
a74 1
char	*str;
d76 9
a84 2
	stdscr = Score;
	mvprintw(ERR_Y, ERR_X, str, arg);
d88 1
a88 1
	stdscr = Board;
d95 1
a95 1
	register int		c, c1;
d124 1
a124 1
			while ((c1=readch()) != '\r' && c1 != '\n' && c1 != ' ')
d141 1
d143 3
a145 4
register bool	forcomp; {


	if (End == 700)
d152 1
a152 2
			}
			else {
d158 3
a160 4
		}
		else {
			register PLAY	*pp, *op;
			register int		i, safe, miles;
d185 1
a185 1
	else
d193 1
d195 3
a197 3
register int	promptno; {

	register char	c;
d238 3
a240 2
check_more() {

d242 1
a242 1
	if (Player[PLAYER].total >= 5000 || Player[COMP].total >= 5000)
d256 1
a256 1
	else
d265 1
d268 1
a268 1
	register int		cnt;
d271 1
a271 1
	for (cnt = 0; read(0, &c, 1) <= 0; cnt++)
@


1.1
log
@Initial revision
@
text
@a47 4
#ifndef	unctrl
#include	"unctrl.h"
#endif

d76 1
a76 1
	reg int		c, c1;
d123 1
a123 1
reg bool	forcomp; {
d142 2
a143 2
			reg PLAY	*pp, *op;
			reg int		i, safe, miles;
d179 1
a179 1
	reg char	c;
d248 1
a248 1
	reg int		cnt;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
