head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.6
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.8
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.17.0.10
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.6
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.4
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.16.0.6
	OPENBSD_5_4_BASE:1.16
	OPENBSD_5_3:1.16.0.4
	OPENBSD_5_3_BASE:1.16
	OPENBSD_5_2:1.16.0.2
	OPENBSD_5_2_BASE:1.16
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.24
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.20
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.18
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.16
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.14
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.12
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.10
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.8
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.6
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.4
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.2
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.8
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.6
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.7.0.6
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.21
date	2016.01.07.16.00.33;	author tb;	state Exp;
branches;
next	1.20;
commitid	IwzFE3fG5RnKTWNh;

1.20
date	2016.01.04.17.33.24;	author mestre;	state Exp;
branches;
next	1.19;
commitid	b21xvsfCGMtCOVrz;

1.19
date	2015.12.06.11.22.37;	author tb;	state Exp;
branches;
next	1.18;
commitid	OXmUMHTknq57PKts;

1.18
date	2015.10.14.07.19.23;	author semarie;	state Exp;
branches;
next	1.17;
commitid	uq6skYJOzOAomCLB;

1.17
date	2013.08.29.20.22.18;	author naddy;	state Exp;
branches;
next	1.16;

1.16
date	2012.05.27.10.09.33;	author sthen;	state Exp;
branches;
next	1.15;

1.15
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.10.07.26.23;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.12.06.21.48.51;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.31.03.40.01;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.11;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.25.06.37.09;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	99.10.29.03.59.01;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	98.09.15.05.29.48;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	98.08.19.07.41.06;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	98.03.12.09.09.22;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.02.14.20.40.37;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.12.22.20.01.48;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.12.19.22.21.54;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.16;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Some basic code maintenance in games/

- in main() replace exit with return
- drop some /* NOTREACHED */ lint comments along the way.
- make more use of standard CFLAGS, esp. -Wimplicit-function-declaration
- add and sort some headers when needed
- add straightforward pledges to some programs used at compile time

discussed with and ok mestre@@
@
text
@/*	$OpenBSD: rain.c,v 1.20 2016/01/04 17:33:24 mestre Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * rain 11/3/1980 EPS/CITHEP
 * cc rain.c -o rain -O -ltermlib
 */

#include <curses.h>
#include <err.h>
#include <signal.h>
#include <stdlib.h>
#include <termios.h>
#include <unistd.h>

volatile sig_atomic_t sig_caught = 0;

static void	onsig(int);


int
main(int argc, char *argv[])
{
	int x, y, j;
	long tcols, tlines;
	const char *errstr;
	struct termios term;
	struct timespec sleeptime;
	speed_t speed;
	time_t delay = 0;
	int ch;
	int xpos[5], ypos[5];

	if (pledge("stdio rpath tty", NULL) == -1)
		err(1, "pledge");

	/* set default delay based on terminal baud rate */
	if (tcgetattr(STDOUT_FILENO, &term) == 0 &&
	    (speed = cfgetospeed(&term)) > B9600)
		delay = (speed / B9600) - 1;

	while ((ch = getopt(argc, argv, "d:h")) != -1)
		switch(ch) {
		case 'd':
			delay = (time_t)strtonum(optarg, 0, 1000, &errstr);
			if (errstr)
			    errx(1, "delay (0-1000) is %s: %s", errstr, optarg);
			break;
		case 'h':
		default:
			(void)fprintf(stderr, "usage: rain [-d delay]\n");
			return 1;
		}

	/* Convert delay from ms -> ns */
	sleeptime.tv_sec = 0;
	sleeptime.tv_nsec = delay * 500000;
	timespecadd(&sleeptime, &sleeptime, &sleeptime);

	initscr();

	if (pledge("stdio tty", NULL) == -1)
		err(1, "pledge");

	tcols = COLS - 4;
	tlines = LINES - 4;

	(void)signal(SIGHUP, onsig);
	(void)signal(SIGINT, onsig);
	(void)signal(SIGQUIT, onsig);
	(void)signal(SIGSTOP, onsig);
	(void)signal(SIGTSTP, onsig);
	(void)signal(SIGTERM, onsig);
	
	curs_set(0);
	for (j = 4; j >= 0; --j) {
		xpos[j] = arc4random_uniform(tcols) + 2;
		ypos[j] = arc4random_uniform(tlines) + 2;
	}
	for (j = 0;;) {
		if (sig_caught) {
			endwin();
			return 0;
		}
		x = arc4random_uniform(tcols) + 2;
		y = arc4random_uniform(tlines) + 2;
		mvaddch(y, x, '.');
		mvaddch(ypos[j], xpos[j], 'o');
		if (!j--)
			j = 4;
		mvaddch(ypos[j], xpos[j], 'O');
		if (!j--)
			j = 4;
		mvaddch(ypos[j] - 1, xpos[j], '-');
		mvaddstr(ypos[j], xpos[j] - 1, "|.|");
		mvaddch(ypos[j] + 1, xpos[j], '-');
		if (!j--)
			j = 4;
		mvaddch(ypos[j] - 2, xpos[j], '-');
		mvaddstr(ypos[j] - 1, xpos[j] - 1, "/ \\");
		mvaddstr(ypos[j], xpos[j] - 2, "| O |");
		mvaddstr(ypos[j] + 1, xpos[j] - 1, "\\ /");
		mvaddch(ypos[j] + 2, xpos[j], '-');
		if (!j--)
			j = 4;
		mvaddch(ypos[j] - 2, xpos[j], ' ');
		mvaddstr(ypos[j] - 1, xpos[j] - 1, "   ");
		mvaddstr(ypos[j], xpos[j] - 2, "     ");
		mvaddstr(ypos[j] + 1, xpos[j] - 1, "   ");
		mvaddch(ypos[j] + 2, xpos[j], ' ');
		xpos[j] = x;
		ypos[j] = y;
		refresh();
		nanosleep(&sleeptime, NULL);
	}
}

static void
onsig(int dummy)
{
	sig_caught = 1;
}
@


1.20
log
@More cleanup and sorting on header section

OK tb@@ and he also pointed out that for consistency with rest of the tree we
should include termios.h instead of sys/ttydefaults.h, where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.19 2015/12/06 11:22:37 tb Exp $	*/
d80 1
a80 1
			exit(1);
d111 1
a111 1
			exit(0);
@


1.19
log
@pledge "getpw" is not needed here.

ok semarie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.18 2015/10/14 07:19:23 semarie Exp $	*/
a36 1
#include <sys/types.h>
a39 1
#include <stdio.h>
@


1.18
log
@enable pledge(2) in rain(6)

it is libcurses program: at init it needs "stdio rpath getpw tty", and after
drop to just "stdio tty". "tty" is needed at end for restoring the tty.

initial patch from doug@@
ok doug@@ deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.17 2013/08/29 20:22:18 naddy Exp $	*/
d64 1
a64 1
	if (pledge("stdio rpath getpw tty", NULL) == -1)
@


1.17
log
@replace srandomdev()+random() with the arc4random*() family
tweaks and ok millert@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.16 2012/05/27 10:09:33 sthen Exp $	*/
d64 3
d91 4
@


1.16
log
@Teach rain(6) to calculate terminal delays in the same way as worms(6),
rather than use a default which totally floods the network if run over ssh.

Discussed with matthieu@@ martynas@@, ok matthieu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.15 2009/10/27 23:59:26 deraadt Exp $	*/
a86 1
	srandomdev();
d100 2
a101 2
		xpos[j] = random() % tcols + 2;
		ypos[j] = random() % tlines + 2;
d108 2
a109 2
		x = random() % tcols + 2;
		y = random() % tlines + 2;
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.14 2004/07/10 07:26:23 deraadt Exp $	*/
d43 1
d56 5
a60 1
	u_int delay = 0;
d64 5
d72 3
a74 4
			if ((delay = (u_int)strtoul(optarg,(char **)NULL,10)) < 1
				|| delay > 1000)
				errx(1, "invalid delay (1-1000)");
			delay *= 1000;  /* ms -> us */
d82 5
d138 1
a138 1
		if (delay) usleep(delay);
@


1.14
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.13 2003/06/03 03:01:40 millert Exp $	*/
a30 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1980, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)rain.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: rain.c,v 1.13 2003/06/03 03:01:40 millert Exp $";
#endif
#endif /* not lint */
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.12 2002/12/06 21:48:51 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: rain.c,v 1.12 2002/12/06 21:48:51 millert Exp $";
d65 1
a65 3
main(argc, argv)
	int argc;
	char **argv;
d143 1
a143 2
onsig(dummy)
	int dummy;
@


1.12
log
@Replace things like srandom(time(NULL)) with srandomdev(3).  random(3)
good enough for games but we should at least use a decent seed.
pjanzen@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.11 2002/05/31 03:40:01 pjanzen Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d42 1
a42 1
static char rcsid[] = "$OpenBSD: rain.c,v 1.11 2002/05/31 03:40:01 pjanzen Exp $";
@


1.11
log
@No dm -> no need to revoke setegid.
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.10 2002/02/16 21:27:11 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: rain.c,v 1.10 2002/02/16 21:27:11 millert Exp $";
d93 1
a93 1
	srandom(time((time_t *)NULL));
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.9 2000/01/25 06:37:09 pjanzen Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: rain.c,v 1.9 2000/01/25 06:37:09 pjanzen Exp $";
a77 4

	/* revoke */
	setegid(getgid());
	setgid(getgid());
@


1.9
log
@use only non-deprecated curses (i.e., no termcap) and tidy a little; mostly
from jsm@@netbsd.org
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.8 1999/10/29 03:59:01 pjanzen Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: rain.c,v 1.8 1999/10/29 03:59:01 pjanzen Exp $";
d65 1
a65 1
static void	onsig __P((int));
@


1.8
log
@srandom() for variety.
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.7 1998/09/15 05:29:48 pjanzen Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: rain.c,v 1.7 1998/09/15 05:29:48 pjanzen Exp $";
d56 1
a56 1
#include <sys/ioctl.h>
a60 4
#include <string.h>
#include <term.h>
#include <termios.h>
#include <time.h>
d63 1
a63 1
#define	cursor(c, r)	tputs(tgoto(CM, c, r), 1, fputchar)
a64 3
static struct termios sg, old_tty;

int	fputchar __P((int));
a67 2
char	*LL, *TE, *VE;

d73 1
a73 5
	extern speed_t ospeed;
	extern char *UP;
	register int x, y, j;
	register char *CM, *BC, *DN, *ND, *term;
	char *TI, *tcp, *mp, tcb[100];
d76 1
a76 1
	char ch;
a77 3
#ifdef TIOCGWINSZ
	struct winsize ws;
#endif
d93 1
a93 1
			(void)fprintf(stderr,"usage: rain [-d delay]\n");
d98 4
a101 39
	if (!(term = getenv("TERM")))
		errx(1, "TERM: parameter not set");
	if (!(mp = malloc((u_int)1024)))
		errx(1, "out of space");
	if (tgetent(mp, term) <= 0)
		errx(1, "unknown terminal type `%s'", term);
	tcp = tcb;
	if (!(CM = tgetstr("cm", &tcp)))
		errx(1, "terminal not capable of cursor motion");
	if (!(BC = tgetstr("bc", &tcp)))
		BC = "\b";
	if (!(DN = tgetstr("dn", &tcp)))
		DN = "\n";
	if (!(ND = tgetstr("nd", &tcp)))
		ND = " ";
	VE = tgetstr("ve", &tcp);
#ifdef TIOCGWINSZ
	if (ioctl(fileno(stdout), TIOCGWINSZ, &ws) != -1 &&
	    ws.ws_col && ws.ws_row) {
		tcols = ws.ws_col;
		tlines = ws.ws_row;
	} else
#endif
	{
		if ((tcols = tgetnum("co")) == -1)
			tcols = 80;
		if ((tlines = tgetnum("li")) == -1)
			tlines = 24;
	}
	tcols -= 4;
	tlines -= 4;
	TE = tgetstr("te", &tcp);
	TI = tgetstr("ti", &tcp);
	UP = tgetstr("up", &tcp);
	if (!(LL = tgetstr("ll", &tcp))) {
		if (!(LL = malloc((u_int)10)))
			errx(1, "out of memory");
		(void)strcpy(LL, tgoto(CM, 0, 23));
	}
d108 2
a109 12
	tcgetattr(1, &sg);
	old_tty = sg;
	ospeed = cfgetospeed(&sg);
	sg.c_iflag &= ~ICRNL;
	sg.c_oflag &= ~ONLCR;
	sg.c_lflag &= ~ECHO;
	tcsetattr(1, TCSADRAIN, &sg);
	if (TI)
		tputs(TI, 1, fputchar);
	tputs(tgetstr("cl", &tcp), 1, fputchar);
	tputs(tgetstr("vi", &tcp), 1, fputchar);                              
	(void)fflush(stdout);
d115 4
d121 2
a122 4
		cursor(x, y);
		fputchar('.');
		cursor(xpos[j], ypos[j]);
		fputchar('o');
d125 1
a125 2
		cursor(xpos[j], ypos[j]);
		fputchar('O');
d128 3
a130 10
		cursor(xpos[j], ypos[j] - 1);
		fputchar('-');
		tputs(DN, 1, fputchar);
		tputs(BC, 1, fputchar);
		tputs(BC, 1, fputchar);
		fputs("|.|", stdout);
		tputs(DN, 1, fputchar);
		tputs(BC, 1, fputchar);
		tputs(BC, 1, fputchar);
		fputchar('-');
d133 5
a137 14
		cursor(xpos[j], ypos[j] - 2);
		fputchar('-');
		tputs(DN, 1, fputchar);
		tputs(BC, 1, fputchar);
		tputs(BC, 1, fputchar);
		fputs("/ \\", stdout);
		cursor(xpos[j] - 2, ypos[j]);
		fputs("| O |", stdout);
		cursor(xpos[j] - 1, ypos[j] + 1);
		fputs("\\ /", stdout);
		tputs(DN, 1, fputchar);
		tputs(BC, 1, fputchar);
		tputs(BC, 1, fputchar);
		fputchar('-');
d140 5
a144 22
		cursor(xpos[j], ypos[j] - 2);
		fputchar(' ');
		tputs(DN, 1, fputchar);
		tputs(BC, 1, fputchar);
		tputs(BC, 1, fputchar);
		fputchar(' ');
		tputs(ND, 1, fputchar);
		fputchar(' ');
		cursor(xpos[j] - 2, ypos[j]);
		fputchar(' ');
		tputs(ND, 1, fputchar);
		fputchar(' ');
		tputs(ND, 1, fputchar);
		fputchar(' ');
		cursor(xpos[j] - 1, ypos[j] + 1);
		fputchar(' ');
		tputs(ND, 1, fputchar);
		fputchar(' ');
		tputs(DN, 1, fputchar);
		tputs(BC, 1, fputchar);
		tputs(BC, 1, fputchar);
		fputchar(' ');
d147 1
a147 1
		(void)fflush(stdout);
d156 1
a156 14
	tputs(VE, 1, fputchar);                              
	tputs(LL, 1, fputchar);
	if (TE)
		tputs(TE, 1, fputchar);
	(void)fflush(stdout);
	tcsetattr(1, TCSADRAIN, &old_tty);
	exit(0);
}

int
fputchar(c)
	int c;
{
	return(putchar(c));
@


1.7
log
@use errx
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.6 1998/08/19 07:41:06 pjanzen Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: rain.c,v 1.6 1998/08/19 07:41:06 pjanzen Exp $";
d64 1
d113 1
@


1.6
log
@tags, formatting, ANSI-fication, prototypes, de-typos, and the occasional
initialization, removal of unused variable, or other minor fix.  Most
changes are from or inspired by NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD: rain.c,v 1.5 1998/03/12 09:09:22 pjanzen Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: rain.c,v 1.5 1998/03/12 09:09:22 pjanzen Exp $";
d147 2
a148 4
		if (!(LL = malloc((u_int)10))) {
			fprintf(stderr, "%s: out of space.\n", *argv);
			exit(1);
		}
@


1.5
log
@OpenBSD ID (changed from NetBSD)
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD$";
d56 3
d61 1
a61 1
#include <unistd.h>
d64 1
a64 2
#include <signal.h>
#include <string.h>
d70 4
a73 1
int  fputchar __P((int));
a87 2
	extern int optind;
	extern char *optarg;
a89 1
	static void onsig();
d102 2
a103 4
				|| delay > 1000) {
				(void)fprintf(stderr,"rain: invalid delay (1-1000)\n");
				exit(1);
			}
d112 6
a117 12
	if (!(term = getenv("TERM"))) {
		fprintf(stderr, "%s: TERM: parameter not set\n", *argv);
		exit(1);
	}
	if (!(mp = malloc((u_int)1024))) {
		fprintf(stderr, "%s: out of space.\n", *argv);
		exit(1);
	}
	if (tgetent(mp, term) <= 0) {
		fprintf(stderr, "%s: %s: unknown terminal type\n", *argv, term);
		exit(1);
	}
d119 2
a120 4
	if (!(CM = tgetstr("cm", &tcp))) {
		fprintf(stderr, "%s: terminal not capable of cursor motion\n", *argv);
		exit(1);
	}
d246 2
a247 1
onsig()
@


1.4
log
@further fixes from pjanzen@@foatdi.harvard.edu
@
text
@d1 1
a1 1
/*	$NetBSD: rain.c,v 1.7 1995/04/29 00:51:04 mycroft Exp $	*/
d46 1
a46 1
static char rcsid[] = "$NetBSD: rain.c,v 1.7 1995/04/29 00:51:04 mycroft Exp $";
@


1.3
log
@proper gid revoke
@
text
@d57 3
d62 1
d68 2
a69 2
void	fputchar __P((int));
char	*LL, *TE, *tgoto();
d71 1
d80 6
a85 3
	char *TI, *tcp, *mp, tcb[100],
		*malloc(), *getenv(), *strcpy(), *tgetstr();
	long cols, lines, random();
d96 16
d135 1
d139 2
a140 2
		cols = ws.ws_col;
		lines = ws.ws_row;
d144 4
a147 4
		if ((cols = tgetnum("co")) == -1)
			cols = 80;
		if ((lines = tgetnum("li")) == -1)
			lines = 24;
d149 2
a150 2
	cols -= 4;
	lines -= 4;
d177 1
d180 2
a181 2
		xpos[j] = random() % cols + 2;
		ypos[j] = random() % lines + 2;
d184 2
a185 2
		x = random() % cols + 2;
		y = random() % lines + 2;
d249 1
d256 1
d265 1
a265 1
void
d269 1
a269 1
	(void)putchar(c);
@


1.2
log
@setgid games, not setuid games. closes a neat set of holes
@
text
@d84 2
@


1.1
log
@Initial revision
@
text
@d84 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

