head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.32
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.28
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.24
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.26
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.18
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.24
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.20
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.18
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.6
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.4
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.10
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.8
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.10.07.26.23;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.11;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	99.10.02.06.36.45;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	99.03.27.04.45.26;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	98.08.19.07.41.00;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.14;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.14;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@/*	$OpenBSD: rxp.c,v 1.7 2004/07/10 07:26:23 deraadt Exp $	*/
/*	$NetBSD: rxp.c,v 1.5 1995/04/22 10:17:00 cgd Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jim R. Oldroyd at The Instruction Set and Keith Gabryelski at
 * Commodore Business Machines.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * regular expression parser
 *
 * external functions and return values are:
 * rxp_compile(s)
 *	TRUE	success
 *	FALSE	parse failure; error message will be in char rxperr[]
 * metas are:
 *	{...}	optional pattern, equialent to [...|]
 *	|	alternate pattern
 *	[...]	pattern delimiters
 *
 * rxp_match(s)
 *	TRUE	string s matches compiled pattern
 *	FALSE	match failure or regexp error
 *
 * rxp_expand()
 *	char *	reverse-engineered regular expression string
 *	NULL	regexp error
 */

#include <stdio.h>
#include <ctype.h>
#include "quiz.h"
					/* regexp tokens,	arg */
#define	LIT	(-1)			/* literal character,	char */
#define	SOT	(-2)			/* start text anchor,	- */
#define	EOT	(-3)			/* end text anchor,	- */
#define	GRP_S	(-4)			/* start alternate grp,	ptr_to_end */
#define	GRP_E	(-5)			/* end group,		- */
#define	ALT_S	(-6)			/* alternate starts,	ptr_to_next */
#define	ALT_E	(-7)			/* alternate ends,	- */
#define	END	(-8)			/* end of regexp,	- */

typedef short Rxp_t;			/* type for regexp tokens */

static Rxp_t rxpbuf[RXP_LINE_SZ];	/* compiled regular expression buffer */
char rxperr[128];			/* parser error message */

static int	 rxp__compile(const char *, int);
static char	*rxp__expand(int);
static int	 rxp__match(const char *, int, Rxp_t *, Rxp_t *, const char *);

int
rxp_compile(const char *s)
{
	return (rxp__compile(s, TRUE));
}

static int
rxp__compile(const char *s, int first)
{
	static Rxp_t *rp;
	static const char *sp;
	Rxp_t *grp_ptr;
	Rxp_t *alt_ptr;
	int esc, err;

	if (s == NULL) {
		(void)snprintf(rxperr, sizeof(rxperr),
		    "null string sent to rxp_compile");
		return(FALSE);
	}
	esc = 0;
	if (first) {
		rp = rxpbuf;
		sp = s;
		*rp++ = SOT;	/* auto-anchor: pat is really ^pat$ */
		*rp++ = GRP_S;	/* auto-group: ^pat$ is really ^[pat]$ */
		*rp++ = 0;
	}
	*rp++ = ALT_S;
	alt_ptr = rp;
	*rp++ = 0;
	for (; *sp; ++sp) {
		if (rp - rxpbuf >= RXP_LINE_SZ - 4) {
			(void)snprintf(rxperr, sizeof(rxperr),
			    "regular expression too long %s", s);
			return (FALSE);
		}
		if (*sp == ':' && !esc)
			break;
		if (esc) {
			*rp++ = LIT;
			*rp++ = *sp;
			esc = 0;
		}
		else switch (*sp) {
		case '\\':
			esc = 1;
			break;
		case '{':
		case '[':
			*rp++ = GRP_S;
			grp_ptr = rp;
			*rp++ = 0;
			sp++;
			if ((err = rxp__compile(s, FALSE)) != TRUE)
				return (err);
			*rp++ = GRP_E;
			*grp_ptr = rp - rxpbuf;
			break;
		case '}':
		case ']':
		case '|':
			*rp++ = ALT_E;
			*alt_ptr = rp - rxpbuf;
			if (*sp != ']') {
				*rp++ = ALT_S;
				alt_ptr = rp;
				*rp++ = 0;
			}
			if (*sp != '|') {
				if (*sp != ']') {
					*rp++ = ALT_E;
					*alt_ptr = rp - rxpbuf;
				}
				if (first) {
					(void)snprintf(rxperr, sizeof(rxperr),
					    "unmatched alternator in regexp %s",
					     s);
					return (FALSE);
				}
				return (TRUE);
			}
			break;
		default:
			*rp++ = LIT;
			*rp++ = *sp;
			esc = 0;
			break;
		}
	}
	if (!first) {
		(void)snprintf(rxperr, sizeof(rxperr),
		    "unmatched alternator in regexp %s", s);
		return (FALSE);
	}
	*rp++ = ALT_E;
	*alt_ptr = rp - rxpbuf;
	*rp++ = GRP_E;
	*(rxpbuf + 2) = rp - rxpbuf;
	*rp++ = EOT;
	*rp = END;
	return (TRUE);
}

/*
 * match string against compiled regular expression
 */
int
rxp_match(const char *s)
{
	return (rxp__match(s, TRUE, NULL, NULL, NULL));
}

/*
 * j_succ : jump here on successful alt match
 * j_fail : jump here on failed match
 * sp_fail: reset sp to here on failed match
 */
static int
rxp__match(const char *s, int first, Rxp_t *j_succ, Rxp_t *j_fail,
           const char *sp_fail)
{
	static Rxp_t *rp;
	static const char *sp;
	int ch;
	Rxp_t *grp_end = NULL;
	int err;

	if (first) {
		rp = rxpbuf;
		sp = s;
	}
	while (rp < rxpbuf + RXP_LINE_SZ && *rp != END)
		switch(*rp) {
		case LIT:
			rp++;
			ch = isascii(*rp) && isupper(*rp) ? tolower(*rp) : *rp;
			if (ch != *sp++) {
				rp = j_fail;
				sp = sp_fail;
				return (TRUE);
			}
			rp++;
			break;
		case SOT:
			if (sp != s)
				return (FALSE);
			rp++;
			break;
		case EOT:
			if (*sp != 0)
				return (FALSE);
			rp++;
			break;
		case GRP_S:
			rp++;
			grp_end = rxpbuf + *rp++;
			break;
		case ALT_S:
			rp++;
			if ((err = rxp__match(sp,
			    FALSE, grp_end, rxpbuf + *rp++, sp)) != TRUE)
				return (err);
			break;
		case ALT_E:
			rp = j_succ;
			return (TRUE);
		case GRP_E:
		default:
			return (FALSE);
		}
	return (*rp != END ? FALSE : TRUE);
}

/*
 * Reverse engineer the regular expression, by picking first of all alternates.
 */
char *
rxp_expand(void)
{
	return (rxp__expand(TRUE));
}

static char *
rxp__expand(int first)
{
	static char buf[RXP_LINE_SZ/2];
	static Rxp_t *rp;
	static char *bp;
	Rxp_t *grp_ptr;
	char *err;

	if (first) {
		rp = rxpbuf;
		bp = buf;
	}
	while (rp < rxpbuf + RXP_LINE_SZ && *rp != END)
		switch(*rp) {
		case LIT:
			rp++;
			*bp++ = *rp++;
			break;
		case GRP_S:
			rp++;
			grp_ptr = rxpbuf + *rp;
			rp++;
			if ((err = rxp__expand(FALSE)) == NULL)
				return (err);
			rp = grp_ptr;
			break;
		case ALT_E:
			return (buf);
		case ALT_S:
			rp++;
			/* FALLTHROUGH */
		case SOT:
		case EOT:
		case GRP_E:
			rp++;
			break;
		default:
			return (NULL);
		}
	if (first) {
		if (*rp != END)
			return (NULL);
		*bp = '\0';
	}
	return (buf);
}
@


1.7
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: rxp.c,v 1.6 2003/06/03 03:01:40 millert Exp $	*/
a35 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)rxp.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: rxp.c,v 1.6 2003/06/03 03:01:40 millert Exp $";
#endif
#endif /* not lint */
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: rxp.c,v 1.5 2002/02/16 21:27:11 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: rxp.c,v 1.5 2002/02/16 21:27:11 millert Exp $";
d89 1
a89 2
rxp_compile(s)
	const char *	s;
d95 1
a95 3
rxp__compile(s, first)
	const char *s;
	int first;
d196 1
a196 2
rxp_match(s)
	const char *s;
d201 5
d207 2
a208 6
rxp__match(s, first, j_succ, j_fail, sp_fail)
	const char *s;
	int first;
	Rxp_t *j_succ;		/* jump here on successful alt match */
	Rxp_t *j_fail;		/* jump here on failed match */
	const char *sp_fail;		/* reset sp to here on failed match */
d266 1
a266 1
rxp_expand()
d272 1
a272 2
rxp__expand(first)
	int first;
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: rxp.c,v 1.4 1999/10/02 06:36:45 pjanzen Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d41 1
a41 1
static char rcsid[] = "$OpenBSD: rxp.c,v 1.4 1999/10/02 06:36:45 pjanzen Exp $";
@


1.4
log
@Clean up the string handling to avoid segfaults when the regexp routines
pass each other (char *)NULLs, which used to happen on suitably invalid
data files.
@
text
@d1 1
a1 1
/*	$OpenBSD: rxp.c,v 1.3 1999/03/27 04:45:26 pjanzen Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: rxp.c,v 1.3 1999/03/27 04:45:26 pjanzen Exp $";
d88 3
a90 3
static int	 rxp__compile __P((const char *, int));
static char	*rxp__expand __P((int));
static int	 rxp__match __P((const char *, int, Rxp_t *, Rxp_t *, const char *));
@


1.3
log
@use const where appropriate; jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: rxp.c,v 1.2 1998/08/19 07:41:00 pjanzen Exp $	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD: rxp.c,v 1.2 1998/08/19 07:41:00 pjanzen Exp $";
d110 5
@


1.2
log
@tags, formatting, ANSI-fication, prototypes, de-typos, and the occasional
initialization, removal of unused variable, or other minor fix.  Most
changes are from or inspired by NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
static char rcsid[] = "$OpenBSD$";
d88 1
a88 1
static int	 rxp__compile __P((char *, int));
d90 1
a90 1
static int	 rxp__match __P((char *, int, Rxp_t *, Rxp_t *, char *));
d94 1
a94 1
	char *	s;
d101 1
a101 1
	char *s;
d105 1
a105 1
	static char *sp;
d199 1
a199 1
	char *	s;
d206 1
a206 1
	char *s;
d210 1
a210 1
	char *sp_fail;		/* reset sp to here on failed match */
d213 1
a213 1
	static char *sp;
@


1.1
log
@Initial revision
@
text
@d1 1
d45 1
a45 1
static char rcsid[] = "$NetBSD: rxp.c,v 1.5 1995/04/22 10:17:00 cgd Exp $";
d94 1
a94 1
	register char *	s;
d101 1
a101 1
	register char *s;
d199 1
a199 1
	register char *	s;
d214 2
a215 2
	register int ch;
	Rxp_t *grp_end;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
