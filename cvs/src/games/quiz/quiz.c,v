head	1.29;
access;
symbols
	OPENBSD_6_1:1.29.0.6
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.29.0.2
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.21.0.10
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.2
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.6
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.4
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.20.0.16
	OPENBSD_5_4_BASE:1.20
	OPENBSD_5_3:1.20.0.14
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.12
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.10
	OPENBSD_5_0:1.20.0.8
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.6
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.4
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.2
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.19.0.6
	OPENBSD_4_6_BASE:1.19
	OPENBSD_4_5:1.19.0.2
	OPENBSD_4_5_BASE:1.19
	OPENBSD_4_4:1.18.0.2
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.17.0.6
	OPENBSD_4_3_BASE:1.17
	OPENBSD_4_2:1.17.0.4
	OPENBSD_4_2_BASE:1.17
	OPENBSD_4_1:1.17.0.2
	OPENBSD_4_1_BASE:1.17
	OPENBSD_4_0:1.16.0.10
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.8
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.6
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.16.0.4
	OPENBSD_3_7_BASE:1.16
	OPENBSD_3_6:1.16.0.2
	OPENBSD_3_6_BASE:1.16
	OPENBSD_3_5:1.15.0.4
	OPENBSD_3_5_BASE:1.15
	OPENBSD_3_4:1.15.0.2
	OPENBSD_3_4_BASE:1.15
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.10.0.2
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.9.0.10
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.8
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.6
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.4
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.9.0.2
	OPENBSD_2_6_BASE:1.9
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.29
date	2016.03.07.12.07.56;	author mestre;	state Exp;
branches;
next	1.28;
commitid	NZhYxChmyb9vOEMM;

1.28
date	2016.01.10.13.35.10;	author mestre;	state Exp;
branches;
next	1.27;
commitid	mVbl9a8GbGdqcFgu;

1.27
date	2016.01.07.16.00.33;	author tb;	state Exp;
branches;
next	1.26;
commitid	IwzFE3fG5RnKTWNh;

1.26
date	2016.01.04.17.33.24;	author mestre;	state Exp;
branches;
next	1.25;
commitid	b21xvsfCGMtCOVrz;

1.25
date	2016.01.03.14.38.17;	author mestre;	state Exp;
branches;
next	1.24;
commitid	Ptgw9rNvmSHNRfGy;

1.24
date	2015.12.25.20.59.09;	author mestre;	state Exp;
branches;
next	1.23;
commitid	5J5Os05YMVA0ZKC5;

1.23
date	2015.12.06.09.55.58;	author tb;	state Exp;
branches;
next	1.22;
commitid	WLOEPZs8HkSu7jql;

1.22
date	2015.10.25.09.34.49;	author tedu;	state Exp;
branches;
next	1.21;
commitid	90q1D3CstHpYvTVd;

1.21
date	2013.08.29.20.22.18;	author naddy;	state Exp;
branches;
next	1.20;

1.20
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.19;

1.19
date	2008.10.03.13.00.06;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2008.03.17.09.17.56;	author sobrado;	state Exp;
branches;
next	1.17;

1.17
date	2006.11.02.18.19.30;	author ray;	state Exp;
branches;
next	1.16;

1.16
date	2004.07.10.07.26.23;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2003.07.06.02.04.03;	author avsm;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.04.06.18.50.38;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.12.06.21.48.51;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.31.03.40.01;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.16.21.27.11;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	99.10.02.06.36.45;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	99.06.10.22.58.24;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	99.03.27.04.45.25;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	98.08.19.07.40.57;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	97.07.08.09.32.35;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.01.15.23.40.43;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.22.20.01.45;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.12.19.22.21.52;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.13;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.13;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.29
log
@- General changes:
- Remove -? from getopt(3) options, but still keep (or add) -h where applicable
- Replace hardcoded program strings by getprogname(3)

- Specific changes:
- atc(6): this used -? and -u for usage(), remove both from game and manpage
- bcd(6): use __progname instead of getprogname(3), no need to include stdlib.h
- hunt(6): replace fputs(3) by fprintf(3)

OK tb@@ after his suggestions
@
text
@/*	$OpenBSD: quiz.c,v 1.28 2016/01/10 13:35:10 mestre Exp $	*/
/*	$NetBSD: quiz.c,v 1.9 1995/04/22 10:16:58 cgd Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Jim R. Oldroyd at The Instruction Set and Keith Gabryelski at
 * Commodore Business Machines.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <ctype.h>
#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "pathnames.h"
#include "quiz.h"

static QE qlist;
static int catone, cattwo, tflag;
static u_int qsize;

char	*appdstr(char *, const char *, size_t);
void	 downcase(char *);
void	 get_cats(char *, char *);
void	 get_file(const char *);
const char	*next_cat(const char *);
void	 quiz(void);
void	 score(u_int, u_int, u_int);
void	 show_index(void);
__dead void	usage(void);

int
main(int argc, char *argv[])
{
	int ch;
	const char *indexfile;

	if (pledge("stdio rpath proc exec", NULL) == -1)
		err(1, "pledge");

	indexfile = _PATH_QUIZIDX;
	while ((ch = getopt(argc, argv, "hi:t")) != -1)
		switch(ch) {
		case 'i':
			indexfile = optarg;
			break;
		case 't':
			tflag = 1;
			break;
		case 'h':
		default:
			usage();
		}
	argc -= optind;
	argv += optind;

	switch(argc) {
	case 0:
		get_file(indexfile);
		show_index();
		break;
	case 2:
		if (pledge("stdio rpath", NULL) == -1)
			err(1, "pledge");
		get_file(indexfile);
		get_cats(argv[0], argv[1]);
		quiz();
		break;
	default:
		usage();
	}
	return 0;
}

void
get_file(const char *file)
{
	FILE *fp;
	QE *qp;
	size_t len;
	char *lp;

	if ((fp = fopen(file, "r")) == NULL)
		err(1, "%s", file);

	/*
	 * XXX
	 * Should really free up space from any earlier read list
	 * but there are no reverse pointers to do so with.
	 */
	qp = &qlist;
	qsize = 0;
	while ((lp = fgetln(fp, &len)) != NULL) {
		if (lp[len - 1] == '\n')
			--len;
		if (qp->q_text && qp->q_text[0] != '\0' &&
		    qp->q_text[strlen(qp->q_text) - 1] == '\\')
			qp->q_text = appdstr(qp->q_text, lp, len);
		else {
			if ((qp->q_next = malloc(sizeof(QE))) == NULL)
				errx(1, "malloc");
			qp = qp->q_next;
			if ((qp->q_text = malloc(len + 1)) == NULL)
				errx(1, "malloc");
			/* lp may not be zero-terminated; cannot use strlcpy */
			strncpy(qp->q_text, lp, len);
			qp->q_text[len] = '\0';
			qp->q_asked = qp->q_answered = FALSE;
			qp->q_next = NULL;
			++qsize;
		}
	}
	(void)fclose(fp);
}

void
show_index(void)
{
	QE *qp;
	const char *p, *s;
	FILE *pf;
	const char *pager;

	if (!isatty(1))
		pager = "/bin/cat";
	else if (!(pager = getenv("PAGER")) || (*pager == 0))
			pager = _PATH_PAGER;
	if ((pf = popen(pager, "w")) == NULL)
		err(1, "%s", pager);
	(void)fprintf(pf, "Subjects:\n\n");
	for (qp = qlist.q_next; qp; qp = qp->q_next) {
		for (s = next_cat(qp->q_text); s; s = next_cat(s)) {
			if (!rxp_compile(s))
				errx(1, "%s", rxperr);
			if ((p = rxp_expand()))
				(void)fprintf(pf, "%s ", p);
		}
		(void)fprintf(pf, "\n");
	}
	(void)fprintf(pf, "\n%s\n%s\n%s\n",
"For example, \"quiz victim killer\" prints a victim's name and you reply",
"with the killer, and \"quiz killer victim\" works the other way around.",
"Type an empty line to get the correct answer.");
	(void)pclose(pf);
}

void
get_cats(char *cat1, char *cat2)
{
	QE *qp;
	int i;
	const char *s;

	downcase(cat1);
	downcase(cat2);
	for (qp = qlist.q_next; qp; qp = qp->q_next) {
		s = next_cat(qp->q_text);
		catone = cattwo = i = 0;
		while (s) {
			if (!rxp_compile(s))
				errx(1, "%s", rxperr);
			i++;
			if (rxp_match(cat1))
				catone = i;
			if (rxp_match(cat2))
				cattwo = i;
			s = next_cat(s);
		}
		if (catone && cattwo && catone != cattwo) {
			if (!rxp_compile(qp->q_text))
				errx(1, "%s", rxperr);
			get_file(rxp_expand());
			return;
		}
	}
	errx(1, "invalid categories");
}

void
quiz(void)
{
	QE *qp;
	int i;
	size_t len;
	u_int guesses, rights, wrongs;
	int next;
	char *answer, *t, question[LINE_SZ];
	const char *s;

	guesses = rights = wrongs = 0;
	for (;;) {
		if (qsize == 0)
			break;
		next = arc4random_uniform(qsize);
		qp = qlist.q_next;
		for (i = 0; i < next; i++)
			qp = qp->q_next;
		while (qp && qp->q_answered)
			qp = qp->q_next;
		if (!qp) {
			qsize = next;
			continue;
		}
		if (tflag && arc4random_uniform(100) > 20) {
			/* repeat questions in tutorial mode */
			while (qp && (!qp->q_asked || qp->q_answered))
				qp = qp->q_next;
			if (!qp)
				continue;
		}
		s = qp->q_text;
		for (i = 0; i < catone - 1; i++)
			s = next_cat(s);
		if (!rxp_compile(s))
			errx(1, "%s", rxperr);
		t = rxp_expand();
		if (!t || *t == '\0') {
			qp->q_answered = TRUE;
			continue;
		}
		(void)strlcpy(question, t, sizeof question);
		s = qp->q_text;
		for (i = 0; i < cattwo - 1; i++)
			s = next_cat(s);
		if (s == NULL)
			errx(1, "too few fields in data file, line \"%s\"",
			    qp->q_text);
		if (!rxp_compile(s))
			errx(1, "%s", rxperr);
		t = rxp_expand();
		if (!t || *t == '\0') {
			qp->q_answered = TRUE;
			continue;
		}
		qp->q_asked = TRUE;
		(void)printf("%s?\n", question);
		for (;; ++guesses) {
			if ((answer = fgetln(stdin, &len)) == NULL ||
			    answer[len - 1] != '\n') {
				score(rights, wrongs, guesses);
				exit(0);
			}
			answer[len - 1] = '\0';
			downcase(answer);
			if (rxp_match(answer)) {
				(void)printf("Right!\n");
				++rights;
				qp->q_answered = TRUE;
				break;
			}
			if (*answer == '\0') {
				(void)printf("%s\n", t);
				++wrongs;
				if (!tflag)
					qp->q_answered = TRUE;
				break;
			}
			(void)printf("What?\n");
		}
	}
	score(rights, wrongs, guesses);
}

const char *
next_cat(const char *s)
{
	int esc;

	if (s == NULL)
		return (NULL);
	esc = 0;
	for (;;)
		switch (*s++) {
		case '\0':
			return (NULL);
		case '\\':
			esc = 1;
			break;
		case ':':
			if (!esc)
				return (s);
		default:
			esc = 0;
			break;
		}
}

char *
appdstr(char *s, const char *tp, size_t len)
{
	char *mp;
	const char *sp;
	int ch;
	char *m;

	if ((m = malloc(strlen(s) + len + 1)) == NULL)
		errx(1, "malloc");
	for (mp = m, sp = s; (*mp++ = *sp++) != '\0'; )
		;
	--mp;
	if (*(mp - 1) == '\\')
		--mp;

	while ((ch = *mp++ = *tp++) && ch != '\n')
		;
	if (*(mp - 2) == '\\')
		mp--;
	*mp = '\0';

	free(s);
	return (m);
}

void
score(u_int r, u_int w, u_int g)
{
	(void)printf("Rights %d, wrongs %d,", r, w);
	if (g)
		(void)printf(" extra guesses %d,", g);
	(void)printf(" score %d%%\n", (r + w + g) ? r * 100 / (r + w + g) : 0);
}

void
downcase(char *p)
{
	int ch;

	for (; (ch = *p) != '\0'; ++p)
		if (isascii(ch) && isupper(ch))
			*p = tolower(ch);
}

void
usage(void)
{
	(void)fprintf(stderr,
	    "usage: %s [-t] [-i file] category1 category2\n", getprogname());
	exit(1);
}
@


1.28
log
@As per style(9), remove remaining lint-style comments from games/

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.27 2016/01/07 16:00:33 tb Exp $	*/
d71 1
a71 1
	while ((ch = getopt(argc, argv, "i:t")) != -1)
d79 1
a79 1
		case '?':
d366 1
a366 1
	    "usage: quiz [-t] [-i file] category1 category2\n");
@


1.27
log
@Some basic code maintenance in games/

- in main() replace exit with return
- drop some /* NOTREACHED */ lint comments along the way.
- make more use of standard CFLAGS, esp. -Wimplicit-function-declaration
- add and sort some headers when needed
- add straightforward pledges to some programs used at compile time

discussed with and ok mestre@@
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.26 2016/01/04 17:33:24 mestre Exp $	*/
a314 1
	/* NOTREACHED */
@


1.26
log
@More cleanup and sorting on header section

OK tb@@ and he also pointed out that for consistency with rest of the tree we
should include termios.h instead of sys/ttydefaults.h, where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.25 2016/01/03 14:38:17 mestre Exp $	*/
d101 1
a101 1
	exit(0);
@


1.25
log
@About 13 years ago when the idiom srandom(time()), and sometimes
srandom(time()+getpid()), was changed by srandomdev(), but #include <time.h>
lived up until this day so remove it.

Additionally, earlier than that, 18 years ago, random(6) was one of the first
consumers of arc4random(3) family, and was pulling it from dev/rndvar.h but
these days we pull it from stdlib.h, which is already done, so while here
remove dev/rndvar.h also.

"seems comprehensive to me" deraadt@@ and OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.24 2015/12/25 20:59:09 mestre Exp $	*/
a36 2
#include <sys/types.h>

a38 1
#include <errno.h>
@


1.24
log
@Declare usage() functions as __dead void, if they don't return, on games section.

Found another one in arithmetic(6) which also didn't return, and removed a function from number(6) which is not used anymore.

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.23 2015/12/06 09:55:58 tb Exp $	*/
d38 3
a44 3
#include <ctype.h>
#include <err.h>
#include <time.h>
d46 2
a48 1
#include "pathnames.h"
@


1.23
log
@Treat quiz the same way as the other games and try to preserve the look
and feel.  Revert previous and allow the pager with pledge "proc exec".
Play the game with pledge "stdio rpath".

Discussed with tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.21 2013/08/29 20:22:18 naddy Exp $	*/
d61 1
a61 1
void	 usage(void);
@


1.22
log
@just dump the help on stdout with messing about with a pager.
makes pledge much simpler.
from jan stary
@
text
@d69 1
a69 1
	if (pledge("stdio rpath", NULL) == -1)
d94 2
d152 2
d155 7
a161 1
	printf("Subjects:\n\n");
d167 1
a167 1
				printf("%s ", p);
d169 1
a169 1
		printf("\n");
d171 1
a171 1
	printf("\n%s\n%s\n%s\n",
d175 1
@


1.21
log
@replace srandomdev()+random() with the arc4random*() family
tweaks and ok millert@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.20 2009/10/27 23:59:26 deraadt Exp $	*/
d69 3
a149 2
	FILE *pf;
	const char *pager;
d151 1
a151 7
	if (!isatty(1))
		pager = "/bin/cat";
	else if (!(pager = getenv("PAGER")) || (*pager == 0))
			pager = _PATH_PAGER;
	if ((pf = popen(pager, "w")) == NULL)
		err(1, "%s", pager);
	(void)fprintf(pf, "Subjects:\n\n");
d157 1
a157 1
				(void)fprintf(pf, "%s ", p);
d159 1
a159 1
		(void)fprintf(pf, "\n");
d161 1
a161 1
	(void)fprintf(pf, "\n%s\n%s\n%s\n",
a164 1
	(void)pclose(pf);
@


1.20
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.19 2008/10/03 13:00:06 deraadt Exp $	*/
a215 1
	srandomdev();
d220 1
a220 1
		next = random() % qsize;
d230 1
a230 1
		if (tflag && random() % 100 > 20) {
@


1.19
log
@Repair long group handling; Alf Schlichting, PR 4164
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.18 2008/03/17 09:17:56 sobrado Exp $	*/
a35 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1991, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)quiz.c	8.3 (Berkeley) 5/4/95";
#else
static char rcsid[] = "$OpenBSD: quiz.c,v 1.18 2008/03/17 09:17:56 sobrado Exp $";
#endif
#endif /* not lint */
@


1.18
log
@synchronization between usage and synopsis; add some missing "usage:"'s

ok jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.17 2006/11/02 18:19:30 ray Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: quiz.c,v 1.17 2006/11/02 18:19:30 ray Exp $";
d348 2
@


1.17
log
@Don't check buf[strlen(buf) - 1] on empty strings.

OK moritz@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.16 2004/07/10 07:26:23 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: quiz.c,v 1.16 2004/07/10 07:26:23 deraadt Exp $";
d376 2
a377 1
	(void)fprintf(stderr, "quiz [-t] [-i file] category1 category2\n");
@


1.16
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.15 2003/07/06 02:04:03 avsm Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: quiz.c,v 1.15 2003/07/06 02:04:03 avsm Exp $";
d136 2
a137 1
		if (qp->q_text && qp->q_text[strlen(qp->q_text) - 1] == '\\')
@


1.15
log
@add a comment that an strncpy should not be converted to an strlcpy;
noted by pjanzen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.14 2003/06/03 03:01:40 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: quiz.c,v 1.14 2003/06/03 03:01:40 millert Exp $";
d78 1
a78 3
main(argc, argv)
	int argc;
	char *argv[];
d116 1
a116 2
get_file(file)
	const char *file;
d156 1
a156 1
show_index()
d187 1
a187 2
get_cats(cat1, cat2)
	char *cat1, *cat2;
d219 1
a219 1
quiz()
d305 1
a305 2
next_cat(s)
	const char *	s;
d330 1
a330 4
appdstr(s, tp, len)
	char *s;
	const char *tp;
	size_t len;
d354 1
a354 2
score(r, w, g)
	u_int r, w, g;
d363 1
a363 2
downcase(p)
	char *p;
d373 1
a373 1
usage()
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.13 2003/04/06 18:50:38 deraadt Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: quiz.c,v 1.13 2003/04/06 18:50:38 deraadt Exp $";
d147 1
@


1.13
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.12 2002/12/06 21:48:51 millert Exp $	*/
d20 1
a20 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d47 1
a47 1
static char rcsid[] = "$OpenBSD: quiz.c,v 1.12 2002/12/06 21:48:51 millert Exp $";
@


1.12
log
@Replace things like srandom(time(NULL)) with srandomdev(3).  random(3)
good enough for games but we should at least use a decent seed.
pjanzen@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.11 2002/05/31 03:40:01 pjanzen Exp $	*/
d51 1
a51 1
static char rcsid[] = "$OpenBSD: quiz.c,v 1.11 2002/05/31 03:40:01 pjanzen Exp $";
d268 1
a268 1
		(void)strcpy(question, t);
@


1.11
log
@No dm -> no need to revoke setegid.
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.10 2002/02/16 21:27:11 millert Exp $	*/
d51 1
a51 1
static char rcsid[] = "$OpenBSD: quiz.c,v 1.10 2002/02/16 21:27:11 millert Exp $";
d236 1
a236 1
	srandom(time(NULL));
@


1.10
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.9 1999/10/02 06:36:45 pjanzen Exp $	*/
d51 1
a51 1
static char rcsid[] = "$OpenBSD: quiz.c,v 1.9 1999/10/02 06:36:45 pjanzen Exp $";
a87 4

	/* revoke */
	setegid(getgid());
	setgid(getgid());
@


1.9
log
@Clean up the string handling to avoid segfaults when the regexp routines
pass each other (char *)NULLs, which used to happen on suitably invalid
data files.
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.8 1999/06/10 22:58:24 pjanzen Exp $	*/
d51 1
a51 1
static char rcsid[] = "$OpenBSD: quiz.c,v 1.8 1999/06/10 22:58:24 pjanzen Exp $";
d71 9
a79 9
char	*appdstr __P((char *, const char *, size_t));
void	 downcase __P((char *));
void	 get_cats __P((char *, char *));
void	 get_file __P((const char *));
const char	*next_cat __P((const char *));
void	 quiz __P((void));
void	 score __P((u_int, u_int, u_int));
void	 show_index __P((void));
void	 usage __P((void));
@


1.8
log
@jsm28@@cam.ac.uk : handle PAGER in a manner consistent with the
Single UNIX specification for mailx and man
(http://www.opengroup.org/onlinepubs/7908799/xcu/mailx.html).
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.7 1999/03/27 04:45:25 pjanzen Exp $	*/
d51 1
a51 1
static char rcsid[] = "$OpenBSD: quiz.c,v 1.7 1999/03/27 04:45:25 pjanzen Exp $";
d276 3
d321 2
d354 1
a354 1
	for (mp = m, sp = s; (*mp++ = *sp++) != NULL; )
@


1.7
log
@use const where appropriate; jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: quiz.c,v 1.6 1998/08/19 07:40:57 pjanzen Exp $	*/
d51 1
a51 1
static char rcsid[] = "$OpenBSD: quiz.c,v 1.6 1998/08/19 07:40:57 pjanzen Exp $";
d171 1
d173 6
a178 2
	if ((pf = popen(_PATH_PAGER, "w")) == NULL)
		err(1, "%s", _PATH_PAGER);
@


1.6
log
@tags, formatting, ANSI-fication, prototypes, de-typos, and the occasional
initialization, removal of unused variable, or other minor fix.  Most
changes are from or inspired by NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d51 1
a51 1
static char rcsid[] = "$OpenBSD$";
d71 1
a71 1
char	*appdstr __P((char *, char *, size_t));
d74 2
a75 2
void	 get_file __P((char *));
char	*next_cat __P((char *));
d87 1
a87 1
	char *indexfile;
d127 1
a127 1
	char *file;
d169 1
a169 1
	char *p, *s;
d197 1
a197 1
	char *s;
d232 2
a233 1
	char *answer, *s, *t, question[LINE_SZ];
d307 1
a307 1
char *
d309 1
a309 1
	char *	s;
d334 1
a334 1
	char *tp;
d337 2
a338 1
	char *mp, *sp;
@


1.5
log
@fixes; netbsd
@
text
@d1 1
d49 1
a49 1
static char sccsid[] = "@@(#)quiz.c	8.2 (Berkeley) 1/3/94";
d51 1
a51 1
static char rcsid[] = "$NetBSD: quiz.c,v 1.9 1995/04/22 10:16:58 cgd Exp $";
a56 1
#include <time.h>
d62 2
d86 1
a86 1
	register int ch;
d129 2
a130 2
	register FILE *fp;
	register QE *qp;
d145 2
a146 1
		lp[--len] = '\0';
d151 1
a151 1
				err(1, NULL);
d153 4
a156 2
			if ((qp->q_text = strdup(lp)) == NULL)
				err(1, NULL);
d168 2
a169 2
	register QE *qp;
	register char *p, *s;
d179 1
a179 1
			if (p = rxp_expand())
d195 1
a195 1
	register QE *qp;
d227 2
a228 2
	register QE *qp;
	register int i;
d280 2
a281 1
			if ((answer = fgetln(stdin, &len)) == NULL) {
d308 1
a308 1
	register char *	s;
d310 1
a310 1
	int esc = 0;
d312 1
d333 1
a333 1
	register char *tp;
d336 2
a337 2
	register char *mp, *sp;
	register int ch;
d341 3
a343 2
		err(1, NULL);
	for (mp = m, sp = s; *mp++ = *sp++;);
d348 2
a349 1
	while ((ch = *mp++ = *tp++) && ch != '\n');
d368 1
a368 1
	register char *p;
d370 1
a370 1
	register int ch;
d372 1
a372 1
	for (; ch = *p; ++p)
@


1.4
log
@getopt(3) returns -1 when out of args, not EOF, whee!
@
text
@d304 2
d311 1
d314 5
a318 1
			return (s);
@


1.3
log
@proper gid revoke
@
text
@d92 1
a92 1
	while ((ch = getopt(argc, argv, "i:t")) != EOF)
@


1.2
log
@setgid games, not setuid games. closes a neat set of holes
@
text
@d87 2
@


1.1
log
@Initial revision
@
text
@d87 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
