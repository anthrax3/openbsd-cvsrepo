head	1.26;
access;
symbols
	OPENBSD_6_2:1.26.0.2
	OPENBSD_6_2_BASE:1.26
	OPENBSD_6_1:1.25.0.6
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.2
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.6
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.18.0.4
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.17.0.16
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.14
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.12
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.10
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.20
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.16
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.14
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.12
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.10
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.8
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.6
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.16.0.4
	OPENBSD_3_9_BASE:1.16
	OPENBSD_3_8:1.16.0.2
	OPENBSD_3_8_BASE:1.16
	OPENBSD_3_7:1.14.0.2
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.12.0.2
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.9.0.10
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.8
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.6
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.4
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.9.0.2
	OPENBSD_2_7_BASE:1.9
	OPENBSD_2_6:1.7.0.6
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.26
date	2017.05.28.21.01.13;	author tedu;	state Exp;
branches;
next	1.25;
commitid	I1y03UKRmatBQQ8U;

1.25
date	2016.03.07.12.07.57;	author mestre;	state Exp;
branches;
next	1.24;
commitid	NZhYxChmyb9vOEMM;

1.24
date	2016.01.07.16.00.33;	author tb;	state Exp;
branches;
next	1.23;
commitid	IwzFE3fG5RnKTWNh;

1.23
date	2016.01.04.17.33.24;	author mestre;	state Exp;
branches;
next	1.22;
commitid	b21xvsfCGMtCOVrz;

1.22
date	2015.12.04.16.40.09;	author tb;	state Exp;
branches;
next	1.21;
commitid	tL2RUU4SGRJ3N3qd;

1.21
date	2015.11.29.15.13.19;	author tb;	state Exp;
branches;
next	1.20;
commitid	GuIaxansCepwBVFg;

1.20
date	2015.08.26.00.29.24;	author rzalamena;	state Exp;
branches;
next	1.19;
commitid	vzOZPbMh8g7a1MuE;

1.19
date	2014.11.03.22.14.54;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	as6i62fI9q0ursQL;

1.18
date	2013.08.29.20.22.19;	author naddy;	state Exp;
branches;
next	1.17;

1.17
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2005.05.01.02.43.12;	author djm;	state Exp;
branches;
next	1.15;

1.15
date	2005.04.10.13.49.13;	author jmc;	state Exp;
branches;
next	1.14;

1.14
date	2004.11.29.08.52.28;	author jsg;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2002.12.06.21.48.51;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.05.31.05.11.37;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.31.04.21.30;	author pjanzen;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.21.04.11.13;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	99.12.18.11.18.12;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	98.08.22.08.55.54;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	98.07.09.04.34.16;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	97.02.05.18.28.35;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	97.02.05.18.26.08;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	97.01.17.07.11.48;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.12.22.20.01.55;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.16;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.26
log
@if your dying scream would escape the death field, realign to stay within
@
text
@/*	$OpenBSD: main.c,v 1.25 2016/03/07 12:07:57 mestre Exp $	*/
/*	$NetBSD: main.c,v 1.5 1995/04/22 10:08:54 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <signal.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "robots.h"

void
usage(void)
{
	fprintf(stderr, "usage: %s [-ajrst] [scorefile]\n", getprogname());
	exit(1);
}

int
main(int ac, char *av[])
{
	bool		show_only;
	extern char	Scorefile[PATH_MAX];
	int		score_wfd;     /* high score writable file descriptor */
	int		score_err = 0; /* hold errno from score file open */
	int		ch;
	int		ret;
	extern int	optind;
	char		*home;
#ifdef FANCY
	char		*sp;
#endif

	if (pledge("stdio rpath wpath cpath tty", NULL) == -1)
		err(1, "pledge");

	home = getenv("HOME");
	if (home == NULL || *home == '\0')
		err(1, "getenv");

	ret = snprintf(Scorefile, sizeof(Scorefile), "%s/%s", home,
	    ".robots.scores");
	if (ret < 0 || ret >= PATH_MAX)
		errc(1, ENAMETOOLONG, "%s/%s", home, ".robots.scores");

	if ((score_wfd = open(Scorefile, O_RDWR | O_CREAT, 0666)) < 0)
		score_err = errno;

	show_only = FALSE;
	while ((ch = getopt(ac, av, "srajt")) != -1)
		switch (ch) {
		case 's':
			show_only = TRUE;
			break;
		case 'r':
			Real_time = TRUE;
			/* Could be a command-line option */
			tv.tv_sec = 3;
			break;
		case 'a':
			Start_level = 4;
			break;
		case 'j':
			Jump = TRUE;
			break;
		case 't':
			Teleport = TRUE;
			break;
		case '?':
		default:
			usage();
		}
	ac -= optind;
	av += optind;

	if (ac > 1)
		usage();
	if (ac == 1) {
		if (strlcpy(Scorefile, av[0], sizeof(Scorefile)) >=
		    sizeof(Scorefile))
			errc(1, ENAMETOOLONG, "%s", av[0]);
		if (score_wfd >= 0)
			close(score_wfd);
		/* This file requires no special privileges. */
		if ((score_wfd = open(Scorefile, O_RDWR | O_CREAT, 0666)) < 0)
			score_err = errno;
#ifdef	FANCY
		sp = strrchr(Scorefile, '/');
		if (sp == NULL)
			sp = Scorefile;
		if (strcmp(sp, "pattern_roll") == 0)
			Pattern_roll = TRUE;
		else if (strcmp(sp, "stand_still") == 0)
			Stand_still = TRUE;
		if (Pattern_roll || Stand_still)
			Teleport = TRUE;
#endif
	}

	if (show_only) {
		show_score();
		return 0;
	}

	if (score_wfd < 0) {
		warnx("%s: %s; no scores will be saved", Scorefile,
			strerror(score_err));
		sleep(1);
	}

	initscr();
	signal(SIGINT, quit);
	cbreak();
	noecho();
	nonl();
	if (LINES != Y_SIZE || COLS != X_SIZE) {
		if (LINES < Y_SIZE || COLS < X_SIZE) {
			endwin();
			errx(1, "Need at least a %dx%d screen", Y_SIZE, X_SIZE);
		}
		delwin(stdscr);
		stdscr = newwin(Y_SIZE, X_SIZE, 0, 0);
	}

	do {
		init_field();
		for (Level = Start_level; !Dead; Level++) {
			make_level();
			play_level();
		}
		if (My_pos.x > X_FIELDSIZE - 16)
			move(My_pos.y, X_FIELDSIZE - 16);
		else
			move(My_pos.y, My_pos.x);
		printw("AARRrrgghhhh....");
		refresh();
		score(score_wfd);
	} while (another());
	quit(0);
}

/*
 * quit:
 *	Leave the program elegantly.
 */
void
quit(int dummy)
{
	endwin();
	exit(0);
}

/*
 * another:
 *	See if another game is desired
 */
bool
another(void)
{
	int	y;

#ifdef	FANCY
	if ((Stand_still || Pattern_roll) && !Newscore)
		return TRUE;
#endif

	if (query("Another game?")) {
		if (Full_clear) {
			for (y = 1; y <= Num_scores; y++) {
				move(y, 1);
				clrtoeol();
			}
			refresh();
		}
		return TRUE;
	}
	return FALSE;
}
@


1.25
log
@- General changes:
- Remove -? from getopt(3) options, but still keep (or add) -h where applicable
- Replace hardcoded program strings by getprogname(3)

- Specific changes:
- atc(6): this used -? and -u for usage(), remove both from game and manpage
- bcd(6): use __progname instead of getprogname(3), no need to include stdlib.h
- hunt(6): replace fputs(3) by fprintf(3)

OK tb@@ after his suggestions
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.24 2016/01/07 16:00:33 tb Exp $	*/
d162 4
a165 1
		move(My_pos.y, My_pos.x);
@


1.24
log
@Some basic code maintenance in games/

- in main() replace exit with return
- drop some /* NOTREACHED */ lint comments along the way.
- make more use of standard CFLAGS, esp. -Wimplicit-function-declaration
- add and sort some headers when needed
- add straightforward pledges to some programs used at compile time

discussed with and ok mestre@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.23 2016/01/04 17:33:24 mestre Exp $	*/
d46 1
a46 1
	fprintf(stderr, "usage: robots [-ajrst] [scorefile]\n");
@


1.23
log
@More cleanup and sorting on header section

OK tb@@ and he also pointed out that for consistency with rest of the tree we
should include termios.h instead of sys/ttydefaults.h, where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.22 2015/12/04 16:40:09 tb Exp $	*/
d133 1
a133 1
		exit(0);
a167 1
	/* NOT REACHED */
@


1.22
log
@Drop pledge("getpw") and pwd.h and use the now usual
LOGNAME -> USER -> getlogin() -> ??? fallback
in the score file, as requested by tedu@@

Man page bits adapted from jmc@@'s tweaks to snake.6
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.21 2015/11/29 15:13:19 tb Exp $	*/
d33 9
a41 1
#include	"robots.h"
@


1.21
log
@Move scorefile to $HOME.  The nice implementation of the score file
depends on getpwuid(), so add "getpw" to the rest of the required
pledges: "stdio rpath wpath cpath tty".
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.20 2015/08/26 00:29:24 rzalamena Exp $	*/
d57 1
a57 1
	if (pledge("stdio rpath wpath cpath getpw tty", NULL) == -1)
@


1.20
log
@Improve robots(6) by using timespec*() functions, replacing gettimeofday()
with clock_gettime(MONOTONIC) to avoid clock changes and replacing poll()
with ppoll() to deal better with timespec.

ok guenther@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.19 2014/11/03 22:14:54 deraadt Exp $	*/
d46 1
a46 1
	extern char	*Scorefile;
d50 1
d52 1
a52 1
	gid_t		gid;
d57 13
a69 1
	if ((score_wfd = open(Scorefile, O_RDWR)) < 0)
a71 4
	/* revoke privs */
	gid = getgid();
	setresgid(gid, gid, gid);

d102 3
a104 1
		Scorefile = av[0];
d108 1
a108 1
		if ((score_wfd = open(Scorefile, O_RDWR)) < 0)
@


1.19
log
@select() to poll() conversions
ok tedu (... other games maintainer absent)
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.18 2013/08/29 20:22:19 naddy Exp $	*/
a72 1
			tv.tv_usec = 0;
@


1.18
log
@replace srandomdev()+random() with the arc4random*() family
tweaks and ok millert@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.17 2009/10/27 23:59:26 deraadt Exp $	*/
a73 1
			FD_ZERO(&rset);
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.16 2005/05/01 02:43:12 djm Exp $	*/
a138 1
	srandomdev();
@


1.16
log
@use setresgid() to drop privs, it is simply a better and less ambiguous API;
ok deraadt@@ and millert@@ a while ago, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.15 2005/04/10 13:49:13 jmc Exp $	*/
a31 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1980, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)main.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: main.c,v 1.15 2005/04/10 13:49:13 jmc Exp $";
#endif
#endif /* not lint */
@


1.15
log
@sort options + sync usage();
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.14 2004/11/29 08:52:28 jsg Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: main.c,v 1.14 2004/11/29 08:52:28 jsg Exp $";
d65 1
d73 3
a75 3
	/* revoke */
	setegid(getgid());
	setgid(getgid());
@


1.14
log
@ansi. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.13 2003/06/03 03:01:40 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: main.c,v 1.13 2003/06/03 03:01:40 millert Exp $";
d52 1
a52 1
	fprintf(stderr, "usage: robots [-sjtar] [scorefile]\n");
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.12 2002/12/06 21:48:51 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: main.c,v 1.12 2002/12/06 21:48:51 millert Exp $";
d50 1
a50 1
usage()
d57 1
a57 3
main(ac, av)
	int	ac;
	char	**av;
d173 1
a173 2
quit(dummy)
	int dummy;
d184 1
a184 1
another()
@


1.12
log
@Replace things like srandom(time(NULL)) with srandomdev(3).  random(3)
good enough for games but we should at least use a decent seed.
pjanzen@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.11 2002/05/31 05:11:37 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: main.c,v 1.11 2002/05/31 05:11:37 pjanzen Exp $";
@


1.11
log
@crmode -> cbreak
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.10 2002/05/31 04:21:30 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: main.c,v 1.10 2002/05/31 04:21:30 pjanzen Exp $";
d158 1
a158 1
	srandom(getpid());
@


1.10
log
@de-register
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.9 2000/01/21 04:11:13 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: main.c,v 1.9 2000/01/21 04:11:13 pjanzen Exp $";
d146 1
a146 1
	crmode();
@


1.9
log
@Remove unused function; jsm@@netbsd.org
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.8 1999/12/18 11:18:12 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: main.c,v 1.8 1999/12/18 11:18:12 pjanzen Exp $";
d65 1
a65 1
	register bool	show_only;
d72 1
a72 1
	register char	*sp;
d193 1
a193 1
	register int	y;
@


1.8
log
@Enable realtime mode, use native curses functions when available, tidy man
page, and use MAXLOGNAME for scorefile (this makes new scorefiles incompatible
with old ones).  Realtime idea and some code from d@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.7 1998/08/22 08:55:54 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: main.c,v 1.7 1998/08/22 08:55:54 pjanzen Exp $";
a171 7
}

void
__cputchar(ch)
	int ch;
{
	(void)putchar(ch);
@


1.7
log
@More largely NetBSD-inspired code cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.6 1998/07/09 04:34:16 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: main.c,v 1.6 1998/07/09 04:34:16 pjanzen Exp $";
d53 7
a64 2
	register char	*sp;
	register bool	bad_arg;
d69 5
d83 37
a119 10
	if (ac > 1) {
		bad_arg = FALSE;
		for (++av; ac > 1 && *av[0]; av++, ac--)
			if (av[0][0] != '-') {
				Scorefile = av[0];
				if (score_wfd >= 0)
					close(score_wfd);
			/* This file requires no special privileges. */
				if ((score_wfd = open(Scorefile, O_RDWR)) < 0)
					score_err = errno;
d121 9
a129 9
				sp = strrchr(Scorefile, '/');
				if (sp == NULL)
					sp = Scorefile;
				if (strcmp(sp, "pattern_roll") == 0)
					Pattern_roll = TRUE;
				else if (strcmp(sp, "stand_still") == 0)
					Stand_still = TRUE;
				if (Pattern_roll || Stand_still)
					Teleport = TRUE;
a130 27
			} else
				for (sp = &av[0][1]; *sp; sp++)
					switch (*sp) {
					  case 's':
						show_only = TRUE;
						break;
					  case 'r':
						Real_time = TRUE;
						break;
					  case 'a':
						Start_level = 4;
						break;
					  case 'j':
						Jump = TRUE;
						break;
					  case 't':
						Teleport = TRUE;
						break;
					  default:
						warnx("unknown option: %c", *sp);
						bad_arg = TRUE;
						break;
					}
		if (bad_arg) {
			exit(1);
			/* NOTREACHED */
		}
d138 1
a138 1
	if (score_wfd < 0)
d141 2
a158 2
	if (Real_time)
		signal(SIGALRM, move_robots);
a190 1
	/* NOTREACHED */
@


1.6
log
@Scorefile bugfix and minor code cleaning, some from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.5 1997/02/05 18:28:35 kstailey Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD$";
d65 1
a65 1
	if ((score_wfd = open(Scorefile, O_RDWR)) < 0) {
a66 1
	}	
a77 3
				sp = strrchr(Scorefile, '/');
				if (sp == NULL)
					sp = Scorefile;
d80 1
a80 2
			/* This file is in the current directory  */
			/* and requires no special privileges: */
d84 3
d113 1
a113 1
						fprintf(stderr, "robots: unknown option: %c\n", *sp);
d128 3
a130 4
	if (score_wfd < 0) {
		fprintf(stderr, "%s: %s\n", Scorefile, strerror(score_err));
		exit(1);
	}
d140 1
a140 3
			printf("Need at least a %dx%d screen\n",
			    Y_SIZE, X_SIZE);
			exit(1);
@


1.5
log
@add tags to changed files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
static char rcsid[] = "$NetBSD: main.c,v 1.5 1995/04/22 10:08:54 cgd Exp $";
d51 1
a51 3
# include	"robots.h"
# include	<signal.h>
# include	<ctype.h>
d53 1
d55 2
a56 2
int	ac;
char	**av;
d62 2
a63 3
	extern int	Max_per_uid;
	int		score_wfd; /* high score writable file descriptor */
	void quit();
d65 2
a66 3
	if ((score_wfd = open(Scorefile, 2)) < 0) {
		perror(Scorefile);
		exit(1);
d77 6
a82 9
			if (av[0][0] != '-')
				if (isdigit(av[0][0]))
					Max_per_uid = atoi(av[0]);
				else {
					Scorefile = av[0];
# ifdef	FANCY
					sp = strrchr(Scorefile, '/');
					if (sp == NULL)
						sp = Scorefile;
d84 13
a96 17
				/* This file is in the current directory  */
				/* and requires no special privileges: */
					if ((score_wfd =
					     open(Scorefile, 2)) < 0) {
						perror(Scorefile);
						exit(1);
					}

					if (strcmp(sp, "pattern_roll") == 0)
						Pattern_roll = TRUE;
					else if (strcmp(sp, "stand_still") == 0)
						Stand_still = TRUE;
					if (Pattern_roll || Stand_still)
						Teleport = TRUE;
# endif
				}
			else
d115 1
a115 1
						fprintf(stderr, "robots: uknown option: %c\n", *sp);
d128 5
a132 1
		/* NOTREACHED */
d151 1
a151 1
	srand(getpid());
d165 2
a166 1
	quit();
d181 2
a182 1
quit()
d193 1
@


1.4
log
@fix highscore without breaking security
@
text
@d1 1
@


1.3
log
@r?index -> strr?chr
@
text
@d63 1
d66 5
d88 9
d168 1
a168 1
		score();
@


1.2
log
@proper gid revoke
@
text
@d79 1
a79 1
					sp = rindex(Scorefile, '/');
@


1.1
log
@Initial revision
@
text
@d65 4
a76 2
					setuid(getuid());
					setgid(getgid());
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
