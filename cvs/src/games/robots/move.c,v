head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.22
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.18
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.16
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.14
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.12
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.10
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.8
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2016.08.27.02.02.44;	author guenther;	state Exp;
branches;
next	1.12;
commitid	gupFWcYhnkwQ5f1q;

1.12
date	2016.01.04.17.33.24;	author mestre;	state Exp;
branches;
next	1.11;
commitid	b21xvsfCGMtCOVrz;

1.11
date	2015.08.26.00.29.24;	author rzalamena;	state Exp;
branches;
next	1.10;
commitid	vzOZPbMh8g7a1MuE;

1.10
date	2014.11.03.22.14.54;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	as6i62fI9q0ursQL;

1.9
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.11.29.08.52.28;	author jsg;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.31.04.21.30;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.23.22.23.42;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	99.12.18.11.18.12;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.07.09.04.34.18;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	96.06.02.19.47.12;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.16;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.16;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Pull in <sys/time.h> for struct timespec, gettimeofday(), clock_gettime(),
and setitimer()

ok deraadt@@
@
text
@/*	$OpenBSD: move.c,v 1.12 2016/01/04 17:33:24 mestre Exp $	*/
/*	$NetBSD: move.c,v 1.4 1995/04/22 10:08:58 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <sys/time.h>
#include <ctype.h>
#include <poll.h>
#include <termios.h>
#include <unistd.h>

#include "robots.h"

#define	ESC	'\033'

/*
 * get_move:
 *	Get and execute a move from the player
 */
void
get_move(void)
{
	int	c;
	int retval;
	struct timespec t, tn;
#ifdef FANCY
	int lastmove;
#endif

	if (Waiting)
		return;

#ifdef	FANCY
	if (Pattern_roll) {
		if (Next_move >= Move_list)
			lastmove = *Next_move;
		else
			lastmove = -1;	/* flag for "first time in" */
	}
#endif
	if (Real_time) {
		t = tv;
		clock_gettime(CLOCK_MONOTONIC, &tn);
	}
	for (;;) {
		if (Teleport && must_telep())
			goto teleport;
		if (Running)
			c = Run_ch;
		else if (Count != 0)
			c = Cnt_move;
#ifdef	FANCY
		else if (Num_robots > 1 && Stand_still)
			c = '>';
		else if (Num_robots > 1 && Pattern_roll) {
			if (*++Next_move == '\0') {
				if (lastmove < 0)
					goto over;
				Next_move = Move_list;
			}
			c = *Next_move;
			mvaddch(0, 0, c);
			if (c == lastmove)
				goto over;
		}
#endif
		else {
over:
			if (Real_time) {
				struct pollfd pfd[1];

				pfd[0].fd = STDIN_FILENO;
				pfd[0].events = POLLIN;
				retval = ppoll(pfd, 1, &t, NULL);
				if (retval > 0)
					c = getchar();
				else	/* Don't move if timed out or error */
					c = ' ';
			} else {
				c = getchar();
				/* Can't use digits in real time mode, or digit/ESC
				 * is an effective way to stop the game.
				 */
				if (isdigit(c)) {
					Count = (c - '0');
					while (isdigit(c = getchar()))
						Count = Count * 10 + (c - '0');
					if (c == ESC)
						goto over;
					Cnt_move = c;
					if (Count)
						leaveok(stdscr, TRUE);
				}
			}
		}

		switch (c) {
		  case ' ':
		  case '.':
			if (do_move(0, 0))
				goto ret;
			break;
		  case 'y':
			if (do_move(-1, -1))
				goto ret;
			break;
		  case 'k':
			if (do_move(-1, 0))
				goto ret;
			break;
		  case 'u':
			if (do_move(-1, 1))
				goto ret;
			break;
		  case 'h':
			if (do_move(0, -1))
				goto ret;
			break;
		  case 'l':
			if (do_move(0, 1))
				goto ret;
			break;
		  case 'b':
			if (do_move(1, -1))
				goto ret;
			break;
		  case 'j':
			if (do_move(1, 0))
				goto ret;
			break;
		  case 'n':
			if (do_move(1, 1))
				goto ret;
			break;
		  case 'Y': case 'U': case 'H': case 'J':
		  case 'K': case 'L': case 'B': case 'N':
		  case '>':
			Running = TRUE;
			if (c == '>')
				Run_ch = ' ';
			else
				Run_ch = tolower(c);
			leaveok(stdscr, TRUE);
			break;
		  case 'q':
		  case 'Q':
			if (query("Really quit?"))
				quit(0);
			refresh();
			break;
		  case 'w':
		  case 'W':
			Waiting = TRUE;
			leaveok(stdscr, TRUE);
#ifndef NCURSES_VERSION
			flushok(stdscr, FALSE);
#endif
			goto ret;
		  case 't':
		  case 'T':
teleport:
			Running = FALSE;
			mvaddch(My_pos.y, My_pos.x, ' ');
			My_pos = *rnd_pos();
			mvaddch(My_pos.y, My_pos.x, PLAYER);
			leaveok(stdscr, FALSE);
			refresh();
			flushinp();
			goto ret;
		  case CTRL('L'):
			wrefresh(curscr);
			break;
		  case EOF:
			quit(0);
			break;
		  default:
			beep();
			reset_count();
			break;
		}
		if (Real_time) {
			/* Update current time. */
			clock_gettime(CLOCK_MONOTONIC, &t);

			/* Check whether tv time has passed. */
			timespecadd(&tn, &tv, &tn);
			if (timespeccmp(&tn, &t, <))
				goto ret;

			/* Keep the difference otherwise. */
			timespecsub(&tn, &t, &t);
		}
	}
ret:
	if (Count > 0)
		if (--Count == 0)
			leaveok(stdscr, FALSE);
}

/*
 * must_telep:
 *	Must I teleport; i.e., is there anywhere I can move without
 * being eaten?
 */
bool
must_telep(void)
{
	int		x, y;
	static COORD	newpos;

#ifdef	FANCY
	if (Stand_still && Num_robots > 1 && eaten(&My_pos))
		return TRUE;
#endif

	for (y = -1; y <= 1; y++) {
		newpos.y = My_pos.y + y;
		if (newpos.y <= 0 || newpos.y >= Y_FIELDSIZE)
			continue;
		for (x = -1; x <= 1; x++) {
			newpos.x = My_pos.x + x;
			if (newpos.x <= 0 || newpos.x >= X_FIELDSIZE)
				continue;
			if (Field[newpos.y][newpos.x] > 0)
				continue;
			if (!eaten(&newpos))
				return FALSE;
		}
	}
	return TRUE;
}

/*
 * do_move:
 *	Execute a move
 */
bool
do_move(int dy, int dx)
{
	static COORD	newpos;

	newpos.y = My_pos.y + dy;
	newpos.x = My_pos.x + dx;
	if (newpos.y <= 0 || newpos.y >= Y_FIELDSIZE ||
	    newpos.x <= 0 || newpos.x >= X_FIELDSIZE ||
	    Field[newpos.y][newpos.x] > 0 || eaten(&newpos)) {
		if (Running) {
			Running = FALSE;
			leaveok(stdscr, FALSE);
			move(My_pos.y, My_pos.x);
			refresh();
		} else {
			beep();
			reset_count();
		}
		return FALSE;
	}
	else if (dy == 0 && dx == 0)
		return TRUE;
	mvaddch(My_pos.y, My_pos.x, ' ');
	My_pos = newpos;
	mvaddch(My_pos.y, My_pos.x, PLAYER);
	if (!jumping())
		refresh();
	return TRUE;
}

/*
 * eaten:
 *	Player would get eaten at this place
 */
bool
eaten(COORD *pos)
{
	int	x, y;

	for (y = pos->y - 1; y <= pos->y + 1; y++) {
		if (y <= 0 || y >= Y_FIELDSIZE)
			continue;
		for (x = pos->x - 1; x <= pos->x + 1; x++) {
			if (x <= 0 || x >= X_FIELDSIZE)
				continue;
			if (Field[y][x] == 1)
				return TRUE;
		}
	}
	return FALSE;
}

/*
 * reset_count:
 *	Reset the count variables
 */
void
reset_count(void)
{
	Count = 0;
	Running = FALSE;
	leaveok(stdscr, FALSE);
	refresh();
}

/*
 * jumping:
 *	See if we are jumping, i.e., we should not refresh.
 */
bool
jumping(void)
{
	return (Jump && (Count || Running || Waiting));
}
@


1.12
log
@More cleanup and sorting on header section

OK tb@@ and he also pointed out that for consistency with rest of the tree we
should include termios.h instead of sys/ttydefaults.h, where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: move.c,v 1.11 2015/08/26 00:29:24 rzalamena Exp $	*/
d33 1
@


1.11
log
@Improve robots(6) by using timespec*() functions, replacing gettimeofday()
with clock_gettime(MONOTONIC) to avoid clock changes and replacing poll()
with ppoll() to deal better with timespec.

ok guenther@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: move.c,v 1.10 2014/11/03 22:14:54 deraadt Exp $	*/
d32 5
@


1.10
log
@select() to poll() conversions
ok tedu (... other games maintainer absent)
@
text
@d1 1
a1 1
/*	$OpenBSD: move.c,v 1.9 2009/10/27 23:59:26 deraadt Exp $	*/
d46 1
a46 2
	struct timeval t, tod;
	struct timezone tz;
d63 2
a64 3
		t.tv_sec = tv.tv_sec;
		t.tv_usec = tv.tv_usec;
		(void)gettimeofday(&tod, &tz);
d95 1
a95 2
				retval = poll(pfd, 1,
				    t.tv_sec * 1000 + t.tv_usec / 1000);
d203 6
a208 8
			(void)gettimeofday(&t, &tz);
			t.tv_sec = tod.tv_sec + tv.tv_sec - t.tv_sec;
			t.tv_usec = tod.tv_usec + tv.tv_usec - t.tv_usec;
			if (t.tv_usec < 0) {
				t.tv_sec--;
				t.tv_usec += 1000000;	/* Now it must be > 0 */
			}
			if (t.tv_sec < 0)
d210 3
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: move.c,v 1.8 2004/11/29 08:52:28 jsg Exp $	*/
d93 6
a98 2
				FD_SET(STDIN_FILENO, &rset);
				retval = select(STDIN_FILENO + 1, &rset, NULL, NULL, &t);
@


1.8
log
@ansi. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: move.c,v 1.7 2003/06/03 03:01:41 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)move.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: move.c,v 1.7 2003/06/03 03:01:41 millert Exp $";
#endif
#endif /* not lint */
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: move.c,v 1.6 2002/05/31 04:21:30 pjanzen Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: move.c,v 1.6 2002/05/31 04:21:30 pjanzen Exp $";
d50 1
a50 1
get_move()
d233 1
a233 1
must_telep()
d265 1
a265 2
do_move(dy, dx)
	int	dy, dx;
d300 1
a300 2
eaten(pos)
	COORD	*pos;
d322 1
a322 1
reset_count()
d335 1
a335 1
jumping()
@


1.6
log
@de-register
@
text
@d1 1
a1 1
/*	$OpenBSD: move.c,v 1.5 2000/07/23 22:23:42 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: move.c,v 1.5 2000/07/23 22:23:42 pjanzen Exp $";
@


1.5
log
@Handle EOF on stdin.
@
text
@d1 1
a1 1
/*	$OpenBSD: move.c,v 1.4 1999/12/18 11:18:12 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: move.c,v 1.4 1999/12/18 11:18:12 pjanzen Exp $";
d239 1
a239 1
	register int	x, y;
d306 1
a306 1
	register COORD	*pos;
d308 1
a308 1
	register int	x, y;
@


1.4
log
@Enable realtime mode, use native curses functions when available, tidy man
page, and use MAXLOGNAME for scorefile (this makes new scorefiles incompatible
with old ones).  Realtime idea and some code from d@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: move.c,v 1.3 1998/07/09 04:34:18 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: move.c,v 1.3 1998/07/09 04:34:18 pjanzen Exp $";
d206 1
@


1.3
log
@Scorefile bugfix and minor code cleaning, some from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d56 4
a59 1
	register int	c;
d75 5
d104 22
a125 10
			c = getchar();
			if (isdigit(c)) {
				Count = (c - '0');
				while (isdigit(c = getchar()))
					Count = Count * 10 + (c - '0');
				if (c == ESC)
					goto over;
				Cnt_move = c;
				if (Count)
					leaveok(stdscr, TRUE);
d200 1
a200 1
			flush_in();
d208 1
a208 1
			putchar(CTRL('G'));
a209 1
			fflush(stdout);
d212 11
d283 2
a284 3
		}
		else {
			putchar(CTRL('G'));
@


1.2
log
@Update for modern curses implementation
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: move.c,v 1.4 1995/04/22 10:08:58 cgd Exp $";
a44 2
#include <sys/ttydefaults.h>
#include <ctype.h>
d47 1
a47 1
# define	ESC	'\033'
d53 1
d57 3
a59 2
	register int	y, x, lastmove;
	static COORD	newpos;
d160 1
a160 1
				quit();
d205 1
d237 1
d239 1
a239 1
int	dy, dx;
d274 1
d276 1
a276 1
register COORD	*pos;
d297 1
d310 1
@


1.1
log
@Initial revision
@
text
@d166 1
d168 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
