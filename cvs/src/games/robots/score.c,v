head	1.15;
access;
symbols
	OPENBSD_6_1:1.14.0.8
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.10.0.22
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.20
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.22
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.18
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.16
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.14
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.12
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.10
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.8
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.10
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.8
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.6
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.4
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.2
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2017.05.28.20.34.33;	author tedu;	state Exp;
branches;
next	1.14;
commitid	Ah8LnFc1GFVDbYrX;

1.14
date	2016.01.04.17.33.24;	author mestre;	state Exp;
branches;
next	1.13;
commitid	b21xvsfCGMtCOVrz;

1.13
date	2015.12.04.16.40.09;	author tb;	state Exp;
branches;
next	1.12;
commitid	tL2RUU4SGRJ3N3qd;

1.12
date	2015.11.29.15.13.19;	author tb;	state Exp;
branches;
next	1.11;
commitid	GuIaxansCepwBVFg;

1.11
date	2014.11.16.04.49.48;	author guenther;	state Exp;
branches;
next	1.10;
commitid	8XNajyb9IqHkZEKg;

1.10
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.29.08.52.29;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.31.04.21.30;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	99.12.18.11.18.13;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	98.08.22.08.56.01;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.07.09.04.34.25;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	97.02.05.18.28.36;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	97.02.05.18.26.09;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@high scores printed too far to the right, move it left a little
@
text
@/*	$OpenBSD: score.c,v 1.14 2016/01/04 17:33:24 mestre Exp $	*/
/*	$NetBSD: score.c,v 1.3 1995/04/22 10:09:12 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "robots.h"

char	Scorefile[PATH_MAX];

#ifndef MAX_PER_UID
#define MAX_PER_UID	5
#endif

int	Max_per_uid = MAX_PER_UID;

static SCORE	Top[MAXSCORES];

/*
 * score:
 *	Post the player's score, if reasonable, and then print out the
 *	top list.
 */
void
score(int score_wfd)
{
	int	inf = score_wfd;
	SCORE	*scp;
	uid_t	uid;
	bool	done_show = FALSE;
	static int	numscores, max_uid;

	Newscore = FALSE;
	if (inf < 0)
		return;

	if (read(inf, &max_uid, sizeof max_uid) == sizeof max_uid)
		read(inf, Top, sizeof Top);
	else {
		for (scp = Top; scp < &Top[MAXSCORES]; scp++)
			scp->s_score = -1;
		max_uid = Max_per_uid;
	}

	uid = getuid();
	if (Top[MAXSCORES-1].s_score <= Score) {
		numscores = 0;
		for (scp = Top; scp < &Top[MAXSCORES]; scp++)
			if (scp->s_score < 0 ||
			    (scp->s_uid == uid && ++numscores == max_uid)) {
				if (scp->s_score > Score)
					break;
				scp->s_score = Score;
				scp->s_uid = uid;
				set_name(scp);
				Newscore = TRUE;
				break;
			}
		if (scp == &Top[MAXSCORES]) {
			Top[MAXSCORES-1].s_score = Score;
			Top[MAXSCORES-1].s_uid = uid;
			set_name(&Top[MAXSCORES-1]);
			Newscore = TRUE;
		}
		if (Newscore)
			qsort(Top, MAXSCORES, sizeof Top[0], cmp_sc);
	}

	if (!Newscore) {
		Full_clear = FALSE;
		fsync(inf);
		lseek(inf, 0, SEEK_SET);
		return;
	}
	else
		Full_clear = TRUE;

	for (scp = Top; scp < &Top[MAXSCORES]; scp++) {
		if (scp->s_score < 0)
			break;
		move((scp - Top) + 1, 6);
		if (!done_show && scp->s_uid == uid && scp->s_score == Score)
			standout();
		printw(" %d\t%d\t%-*s ", (scp - Top) + 1, scp->s_score,
			(int)(sizeof scp->s_name), scp->s_name);
		if (!done_show && scp->s_uid == uid && scp->s_score == Score) {
			standend();
			done_show = TRUE;
		}
	}
	Num_scores = scp - Top;
	refresh();

	if (Newscore) {
		lseek(inf, 0L, SEEK_SET);
		write(inf, &max_uid, sizeof max_uid);
		write(inf, Top, sizeof Top);
	}
	fsync(inf);
	lseek(inf, 0, SEEK_SET);
}

void
set_name(SCORE *scp)
{
	const char	*name;

	name = getenv("LOGNAME");
	if (name == NULL || *name == '\0')
		name = getenv("USER");
	if (name == NULL || *name == '\0')
		name = getlogin();
	if (name == NULL || *name == '\0')
		name = "  ???";

	strlcpy(scp->s_name, name, LOGIN_NAME_MAX);
}

/*
 * cmp_sc:
 *	Compare two scores.
 */
int
cmp_sc(const void *s1, const void *s2)
{
	return ((SCORE *)s2)->s_score - ((SCORE *)s1)->s_score;
}

/*
 * show_score:
 *	Show the score list for the '-s' option.
 */
void
show_score(void)
{
	SCORE	*scp;
	int	inf;
	static int	max_score;

	if ((inf = open(Scorefile, O_RDONLY)) < 0) {
		perror(Scorefile);
		return;
	}

	for (scp = Top; scp < &Top[MAXSCORES]; scp++)
		scp->s_score = -1;

	read(inf, &max_score, sizeof max_score);
	read(inf, Top, sizeof Top);
	close(inf);
	inf = 1;
	for (scp = Top; scp < &Top[MAXSCORES]; scp++)
		if (scp->s_score >= 0)
			printf("%d\t%d\t%.*s\n", inf++, scp->s_score,
				(int)(sizeof scp->s_name), scp->s_name);
}
@


1.14
log
@More cleanup and sorting on header section

OK tb@@ and he also pointed out that for consistency with rest of the tree we
should include termios.h instead of sys/ttydefaults.h, where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.13 2015/12/04 16:40:09 tb Exp $	*/
d112 1
a112 1
		move((scp - Top) + 1, 15);
@


1.13
log
@Drop pledge("getpw") and pwd.h and use the now usual
LOGNAME -> USER -> getlogin() -> ??? fallback
in the score file, as requested by tedu@@

Man page bits adapted from jmc@@'s tweaks to snake.6
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.12 2015/11/29 15:13:19 tb Exp $	*/
d33 6
a38 1
#include	"robots.h"
@


1.12
log
@Move scorefile to $HOME.  The nice implementation of the score file
depends on getpwuid(), so add "getpw" to the rest of the required
pledges: "stdio rpath wpath cpath tty".
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.11 2014/11/16 04:49:48 guenther Exp $	*/
d132 1
a132 1
	struct passwd	*pp;
d134 9
a142 3
	if ((pp = getpwuid(scp->s_uid)) == NULL)
		pp->pw_name = "???";
	strlcpy(scp->s_name, pp->pw_name, LOGIN_NAME_MAX);
@


1.11
log
@Eliminate pointless use of <sys/param.h>, <sys/file.h>, <sys/sockio.h>,
    and <sys/ttydefaults.h>
Replace MAXPATHLEN with PATH_MAX and MAXLOGNAME with LOGIN_NAME_MAX
Pull in <limits.h> where needed
Prefer sizeof(var) over MAXFOO or FOO_MAX

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.10 2009/10/27 23:59:26 deraadt Exp $	*/
a33 1
#include	"pathnames.h"
d35 1
a35 1
char	*Scorefile = _PATH_SCORE;
d132 1
a132 1
	PASSWD	*pp;
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.9 2004/11/29 08:52:29 jsg Exp $	*/
d137 1
a137 1
	strlcpy(scp->s_name, pp->pw_name, MAXLOGNAME);
@


1.9
log
@ansi. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.8 2003/06/03 03:01:41 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)score.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: score.c,v 1.8 2003/06/03 03:01:41 millert Exp $";
#endif
#endif /* not lint */
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.7 2002/05/31 04:21:30 pjanzen Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: score.c,v 1.7 2002/05/31 04:21:30 pjanzen Exp $";
d60 1
a60 2
score(score_wfd)
     int score_wfd;
d139 1
a139 2
set_name(scp)
	SCORE	*scp;
d153 1
a153 2
cmp_sc(s1, s2)
	const void	*s1, *s2;
d163 1
a163 1
show_score()
@


1.7
log
@de-register
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.6 1999/12/18 11:18:13 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: score.c,v 1.6 1999/12/18 11:18:13 pjanzen Exp $";
@


1.6
log
@Enable realtime mode, use native curses functions when available, tidy man
page, and use MAXLOGNAME for scorefile (this makes new scorefiles incompatible
with old ones).  Realtime idea and some code from d@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.5 1998/08/22 08:56:01 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: score.c,v 1.5 1998/08/22 08:56:01 pjanzen Exp $";
d67 2
a68 2
	register int	inf = score_wfd;
	register SCORE	*scp;
d70 1
a70 1
	register bool	done_show = FALSE;
d172 2
a173 2
	register SCORE	*scp;
	register int	inf;
@


1.5
log
@More largely NetBSD-inspired code cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.4 1998/07/09 04:34:25 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: score.c,v 1.4 1998/07/09 04:34:25 pjanzen Exp $";
d151 1
a151 1
	strncpy(scp->s_name, pp->pw_name, MAXNAME);
@


1.4
log
@Scorefile bugfix and minor code cleaning, some from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.3 1997/02/05 18:28:36 kstailey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d74 2
@


1.3
log
@add tags to changed files
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$NetBSD: score.c,v 1.3 1995/04/22 10:09:12 cgd Exp $";
d45 2
a46 10
# include	"robots.h"
# include	<sys/types.h>
# include	<pwd.h>
# include	"pathnames.h"

typedef struct {
	int	s_uid;
	int	s_score;
	char	s_name[MAXNAME];
} SCORE;
d48 1
a48 1
typedef struct passwd	PASSWD;
d50 3
a52 1
char	*Scorefile = _PATH_SCORE;
d63 1
d69 1
a69 1
	register int	uid;
d110 1
d122 2
a123 1
		printw(" %d\t%d\t%-8.8s ", (scp - Top) + 1, scp->s_score, scp->s_name);
d133 1
a133 1
		lseek(inf, 0L, 0);
d138 1
d141 1
d143 1
a143 1
register SCORE	*scp;
d145 1
a145 1
	register PASSWD	*pp;
d156 1
d158 1
a158 1
register SCORE	*s1, *s2;
d160 1
a160 1
	return s2->s_score - s1->s_score;
d167 1
d174 1
a174 1
	if ((inf = open(Scorefile, 0)) < 0) {
d188 2
a189 1
			printf("%d\t%d\t%.*s\n", inf++, scp->s_score, sizeof scp->s_name, scp->s_name);
@


1.2
log
@fix highscore without breaking security
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d68 2
a69 1
score()
d71 1
a71 1
	register int	inf;
a77 4
	if ((inf = open(Scorefile, 2)) < 0) {
		perror(Scorefile);
		return;
	}
d113 1
a113 1
		close(inf);
d139 1
a139 1
	close(inf);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
