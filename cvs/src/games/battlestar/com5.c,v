head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.10
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.26
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.24
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.20
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.18
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.16
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.14
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.12
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.10
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.8
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.6
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.12
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.10
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.8
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.6
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.4
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.9.0.2
	OPENBSD_2_8_BASE:1.9
	OPENBSD_2_7:1.5.0.4
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.2
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.12.31.17.51.19;	author mestre;	state Exp;
branches;
next	1.12;
commitid	GSzV0GYeNlCgMbj0;

1.12
date	2009.10.27.23.59.23;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.10.07.26.22;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.03.01.38;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.26.04.42.55;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	2000.09.24.21.55.23;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	2000.09.23.03.02.36;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.03.05.23.44;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	99.09.25.20.30.45;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.09.13.01.30.30;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	97.08.24.21.55.03;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.06.30.19.56.31;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Include only needed header files per each source file

OK tb@@
@
text
@/*	$OpenBSD: com5.c,v 1.12 2009/10/27 23:59:23 deraadt Exp $	*/
/*	$NetBSD: com5.c,v 1.3 1995/03/21 15:07:07 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>
#include <stdlib.h>

#include "extern.h"

void
kiss(void)
{
	if (inc_wordnumber(words[wordnumber], "whom"))
		return;
	/* The goddess must be "taken" first if bathing. */
	if (wordtype[wordnumber] == NOUNS && wordvalue[wordnumber] == NORMGOD
	    && TestBit(location[position].objects, BATHGOD)) {
		wordvalue[--wordnumber] = TAKE;
		cypher();
		return;
	}
	if (wordtype[wordnumber] == NOUNS) {
	    if (TestBit(location[position].objects, wordvalue[wordnumber])) {
		pleasure++;
		printf("Kissed.\n");
		switch (wordvalue[wordnumber]) {
		case NORMGOD:
 			switch (godready++) {
			case 0:
				puts("She squirms and avoids your advances.");
				break;
			case 1:
				puts("She is coming around; she didn't fight it as much.");
				break;
			case 2:
				puts("She's beginning to like it.");
				break;
			default:
				puts("She's gone limp.");

			}
			break;
		case NATIVE:
			puts("Her lips are warm and her body robust.  She pulls you down to the ground.");
			break;
		case TIMER:
			puts("The old man blushes.");
			break;
		case MAN:
			puts("The dwarf punches you in the kneecap.");
			break;
		default:
			pleasure--;
		}
	    } else
		puts("I see nothing like that here.");
	} else
		puts("I'd prefer not to.");
	wordnumber++;
}

void
love(void)
{
	int     n;

	if (inc_wordnumber(words[wordnumber], "whom"))
		return;
	if (wordtype[wordnumber] == NOUNS) {
	    if ((TestBit(location[position].objects, BATHGOD) ||
	        TestBit(location[position].objects, NORMGOD)) &&
		   wordvalue[wordnumber] == NORMGOD) {
			wordnumber++;
			if (loved) {
				printf("Loved.\n");
				return;
			}
			if (godready >= 2) {
				puts("She cuddles up to you, and her mouth starts to work:\n'That was my sister's amulet.  The lovely goddess, Purl, was she.  The Empire\ncaptured her just after the Darkness came.  My other sister, Vert, was killed\nby the Dark Lord himself.  He took her amulet and warped its power.\nYour quest was foretold by my father before he died, but to get the Dark Lord's\namulet you must use cunning and skill.  I will leave you my amulet,");
				puts("which you may use as you wish.  As for me, I am the last goddess of the\nwaters.  My father was the Island King, and the rule is rightfully mine.'\n\nShe pulls the throne out into a large bed.");
				power++;
				pleasure += 15;
				ego++;
				if (card(injuries, NUMOFINJURIES)) {
					puts("Her kisses revive you; your wounds are healed.\n");
					for (n = 0; n < NUMOFINJURIES; n++)
						injuries[n] = 0;
					WEIGHT = MAXWEIGHT;
					CUMBER = MAXCUMBER;
				}
				printf("Goddess:\n");
				if (!loved)
					SetBit(location[position].objects, MEDALION);
				loved = 1;
				ourtime += 10;
				printf("Loved.\n");
				zzz();
				return;
			} else {
				puts("You wish!");
				return;
			}
		}
	    if (TestBit(location[position].objects, wordvalue[wordnumber])) {
		if (wordvalue[wordnumber] == NATIVE) {
			puts("The girl is easy prey.  She peels off her sarong and indulges you.");
			power++;
			pleasure += 5;
			printf("Girl:\n");
			ourtime += 10;
			printf("Loved.\n");
			zzz();
		}
		if (wordvalue[wordnumber] == MAN ||
		    wordvalue[wordnumber] == BODY ||
		    wordvalue[wordnumber] == ELF ||
		    wordvalue[wordnumber] == TIMER)
			puts("Kinky!");
		else
			puts("It doesn't seem to work.");
	    } else
		puts("Where's your lover?");
	} else
		puts("It doesn't seem to work.");
	wordnumber++;
}

int
zzz(void)
{
	int     oldtime;
	int     n;

	oldtime = ourtime;
	if ((snooze - ourtime) < (0.75 * CYCLE)) {
		ourtime += 0.75 * CYCLE - (snooze - ourtime);
		printf("<zzz>");
		for (n = 0; n < ourtime - oldtime; n++)
			printf(".");
		printf("\n");
		snooze += 3 * (ourtime - oldtime);
		if (notes[LAUNCHED]) {
			fuel -= (ourtime - oldtime);
			if (location[position].down) {
				position = location[position].down;
				crash();
			} else
				notes[LAUNCHED] = 0;
		}
		if (OUTSIDE && rnd(100) < 50) {
			puts("You are awakened abruptly by the sound of someone nearby.");
			switch (rnd(4)) {
			case 0:
				if (ucard(inven)) {
					n = rnd(NUMOFOBJECTS);
					while (!TestBit(inven, n))
						n = rnd(NUMOFOBJECTS);
					ClearBit(inven, n);
					if (n != AMULET && n != MEDALION && n != TALISMAN)
						SetBit(location[position].objects, n);
					carrying -= objwt[n];
					encumber -= objcumber[n];
				}
				puts("A fiendish little Elf is stealing your treasures!");
				fight(ELF, 10);
				break;
			case 1:
				SetBit(location[position].objects, DEADWOOD);
				break;
			case 2:
				SetBit(location[position].objects, HALBERD);
				break;
			default:
				break;
			}
		}
	} else
		return (0);
	return (1);
}

void
chime(void)
{
	if ((ourtime / CYCLE + 1) % 2 && OUTSIDE)
		switch ((ourtime % CYCLE) / (CYCLE / 7)) {
		case 0:
			puts("It is just after sunrise.");
			break;
		case 1:
			puts("It is early morning.");
			break;
		case 2:
			puts("It is late morning.");
			break;
		case 3:
			puts("It is near noon.");
			break;
		case 4:
			puts("It is early afternoon.");
			break;
		case 5:
			puts("It is late afternoon.");
			break;
		case 6:
			puts("It is near sunset.");
			break;
		}
	else if (OUTSIDE)
		switch ((ourtime % CYCLE) / (CYCLE / 7)) {
		case 0:
			puts("It is just after sunset.");
			break;
		case 1:
			puts("It is early evening.");
			break;
		case 2:
			puts("The evening is getting old.");
			break;
		case 3:
			puts("It is near midnight.");
			break;
		case 4:
			puts("These are the wee hours of the morning.");
			break;
		case 5:
			puts("The night is waning.");
			break;
		case 6:
			puts("It is almost morning.");
			break;
		}
	else
		puts("I can't tell the time in here.");
}

int
give(void)
{
	int obj = -1, result = -1, person = 0, firstnumber, last1, last2;

	last1 = last2 = wordcount + 2;
	firstnumber = wordnumber;
	while (wordtype[++wordnumber] != OBJECT &&
	    wordvalue[wordnumber] != AMULET &&
	    wordvalue[wordnumber] != MEDALION &&
	    wordvalue[wordnumber] != TALISMAN &&
	    wordnumber <= wordcount)
		;
	if (wordnumber <= wordcount) {
		obj = wordvalue[wordnumber];
		if (obj == EVERYTHING)
			wordtype[wordnumber] = -1;
		last1 = wordnumber;
	}
	wordnumber = firstnumber;
	while ((wordtype[++wordnumber] != NOUNS || wordvalue[wordnumber] == obj) && wordnumber <= wordcount)
		;
	if (wordtype[wordnumber] == NOUNS) {
		person = wordvalue[wordnumber];
		last2 = wordnumber;
	}
	/* Setting wordnumber to last1 - 1 looks wrong if last1 is 0, e.g.,
	 * plain `give'.  However, detecting this case is liable to detect
	 * `give foo' as well, which would give a confusing error.  We
	 * need to make sure the -1 value can cause no problems if it arises.
	 * If in the below we get to the drop("Given") then drop will look
	 * at word 0 for an object to give, and fail, which is OK; then
	 * result will be -1 and we get to the end, where wordnumber gets
	 * set to something more sensible.  If we get to "I don't think
	 * that is possible" then again wordnumber is set to something
	 * sensible.  The wordnumber we leave with still isn't right if
	 * you include words the game doesn't know in your command, but
	 * that's no worse than what other commands than give do in
	 * the same place.  */
	wordnumber = last1 - 1;
	if (person && TestBit(location[position].objects, person)) {
		if (person == NORMGOD && godready < 2 && !(obj == RING || obj == BRACELET))
			puts("The goddess won't look at you.");
		else
			result = drop("Given");
	} else {
		puts("I don't think that is possible.");
		wordnumber = max(last1, last2) + 1;
		return (0);
	}
	if (result != -1 && (TestBit(location[position].objects, obj) || obj == AMULET || obj == MEDALION || obj == TALISMAN)) {
		ClearBit(location[position].objects, obj);
		ourtime++;
		ego++;
		switch (person) {
		case NATIVE:
			puts("She accepts it shyly.");
			ego += 2;
			break;
		case NORMGOD:
			if (obj == RING || obj == BRACELET) {
				puts("She takes the charm and puts it on.  A little kiss on the cheek is");
				puts("your reward.");
				ego += 5;
				godready += 3;
			}
			if (obj == AMULET || obj == MEDALION || obj == TALISMAN) {
				win++;
				ego += 5;
				power -= 5;
				if (win >= 3) {
					puts("The powers of the earth are now legitimate.  You have destroyed the Darkness");
					puts("and restored the goddess to her throne.  The entire island celebrates with");
					puts("dancing and spring feasts.  As a measure of her gratitude, the goddess weds you");
					puts("in the late summer and crowns you Prince Liverwort, Lord of Fungus.");
					puts("\nBut, as the year wears on and autumn comes along, you become restless and");
					puts("yearn for adventure.  The goddess, too, realizes that the marriage can't last.");
					puts("She becomes bored and takes several more natives as husbands.  One evening,");
					puts("after having been out drinking with the girls, she kicks the throne particularly");
					puts("hard and wakes you up.  (If you want to win this game, you're going to have to\nshoot her!)");
					ClearBit(location[position].objects, MEDALION);
					wintime = ourtime;
				}
			}
			break;
		case TIMER:
			if (obj == COINS) {
				puts("He fingers the coins for a moment and then looks up agape.  `Kind you are and");
				puts("I mean to repay you as best I can.'  Grabbing a pencil and cocktail napkin...\n");
				printf("+-----------------------------------------------------------------------------+\n");
				printf("|				   xxxxxxxx\\				      |\n");
				printf("|				       xxxxx\\	CLIFFS			      |\n");
				printf("|		FOREST			  xxx\\				      |\n");
				printf("|				\\\\	     x\\        	OCEAN		      |\n");
				printf("|				||	       x\\			      |\n");
				printf("|				||  ROAD	x\\			      |\n");
				printf("|				||		x\\			      |\n");
				printf("|		SECRET		||	  .........			      |\n");
				printf("|		 - + -		||	   ........			      |\n");
				printf("|		ENTRANCE	||		...      BEACH		      |\n");
				printf("|				||		...		  E	      |\n");
				printf("|				||		...		  |	      |\n");
				printf("|				//		...	    N <-- + --- S     |\n");
				printf("|		PALM GROVE     //		...		  |	      |\n");
				printf("|			      //		...		  W	      |\n");
				printf("+-----------------------------------------------------------------------------+\n");
				puts("\n`This map shows a secret entrance to the catacombs.");
				puts("You will know when you arrive because I left an old pair of shoes there.'");
			}
			break;
		}
	}
	wordnumber = max(last1, last2) + 1;
	return (firstnumber);
}
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: com5.c,v 1.11 2004/07/10 07:26:22 deraadt Exp $	*/
d32 3
@


1.11
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: com5.c,v 1.10 2003/06/03 03:01:38 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)com5.c	8.2 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: com5.c,v 1.10 2003/06/03 03:01:38 millert Exp $";
#endif
#endif /* not lint */
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: com5.c,v 1.9 2000/09/26 04:42:55 pjanzen Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: com5.c,v 1.9 2000/09/26 04:42:55 pjanzen Exp $";
d44 1
a44 1
kiss()
d96 1
a96 1
love()
d162 1
a162 1
zzz()
d216 1
a216 1
chime()
d271 1
a271 1
give()
@


1.9
log
@Improve handling of multiple commands on one line.  Tidy fight parser.
Handle "all" in one place (almost).  Add AUXVERB category and OBJ_PERSON/
OBJ_NONOBJ flags.  Most was discussed with jsm@@netbsd.org, and some is from
him.
@
text
@d1 1
a1 1
/*	$OpenBSD: com5.c,v 1.8 2000/09/24 21:55:23 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: com5.c,v 1.8 2000/09/24 21:55:23 pjanzen Exp $";
@


1.8
log
@numerous changes from jsm@@netbsd.org:
static where appropriate, add a few comments, format a bit better, and
deal with WEIGHT/CUMBER being zero (and not less).
@
text
@d1 1
a1 1
/*	$OpenBSD: com5.c,v 1.7 2000/09/23 03:02:36 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com5.c,v 1.7 2000/09/23 03:02:36 pjanzen Exp $";
d50 2
a51 2
	while (wordtype[++wordnumber] != NOUNS && wordnumber <= wordcount)
		;
d96 1
d104 2
a105 2
	while (wordtype[++wordnumber] != NOUNS && wordnumber <= wordcount)
		;
d110 1
d162 1
d281 5
a285 1
	while (wordtype[++wordnumber] != OBJECT && wordvalue[wordnumber] != AMULET && wordvalue[wordnumber] != MEDALION && wordvalue[wordnumber] != TALISMAN && wordnumber <= wordcount)
@


1.7
log
@drop adjectives in parse(), since they're never used.
tidy a little.  fix love() a bit.
From conversations with jsm@@netbsd.org:
Add objflags[] to deal with plurals and a/an usage.
Commas don't mean AND if followed by a verb.
Check for object presence before trying to lift or eat it.
@
text
@d1 1
a1 1
/*	$OpenBSD: com5.c,v 1.6 2000/07/03 05:23:44 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com5.c,v 1.6 2000/07/03 05:23:44 pjanzen Exp $";
d278 2
a279 1
	while (wordtype[++wordnumber] != OBJECT && wordvalue[wordnumber] != AMULET && wordvalue[wordnumber] != MEDALION && wordvalue[wordnumber] != TALISMAN && wordnumber <= wordcount);
d287 2
a288 1
	while ((wordtype[++wordnumber] != NOUNS || wordvalue[wordnumber] == obj) && wordnumber <= wordcount);
@


1.6
log
@Finding bugs in battlestar is like shooting fish in a barrel.
	Don't overflow beenthere[].  Add "verbose" option.
	Fix spelling (including embedded hyphens in descriptions) and grammar.
	"Kill" will now use the laser if you have no cutting implements.
	Formatting.
	You can do more things to the bathing goddess.
	A little less guess-the-word.  Occasionally better error messages,
particularly with "all" when nothing applies.
	"kick door" no longer segfaults.  Nor does "kill door".
More bugs remain...
@
text
@d1 1
a1 1
/*	$OpenBSD: com5.c,v 1.5 1999/09/25 20:30:45 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com5.c,v 1.5 1999/09/25 20:30:45 pjanzen Exp $";
d108 5
a112 1
		wordvalue[wordnumber] == NORMGOD && !loved) {
d133 1
d154 2
@


1.5
log
@Merge 4.4BSD-Lite2 and NetBSD, including improved save file handling of
jsm28@@cam.ac.uk.  Rename setbit() family of macros so as not to conflict
with <sys/param.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: com5.c,v 1.4 1998/09/13 01:30:30 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com5.c,v 1.4 1998/09/13 01:30:30 pjanzen Exp $";
d50 11
a60 3
	while (wordtype[++wordnumber] != NOUNS && wordnumber <= wordcount);
	if (wordtype[wordnumber] == NOUNS &&
	    TestBit(location[position].objects, wordvalue[wordnumber])) {
d65 1
a65 1
			switch (godready++) {
d73 1
a73 1
				puts("She's begining to like it.");
d81 1
a81 1
			puts("The lips are warm and her body robust.  She pulls you down to the ground.");
d92 2
d103 6
a108 3
	while (wordtype[++wordnumber] != NOUNS && wordnumber <= wordcount);
	if (wordtype[wordnumber] == NOUNS && TestBit(location[position].objects, wordvalue[wordnumber])) {
		if (wordvalue[wordnumber] == NORMGOD && !loved) {
d127 1
d134 1
d141 1
d144 7
a150 1
		printf("Loved.\n");
@


1.4
log
@NetBSD merge, numerous patches from jsm28@@cam.ac.uk, spelling fixes, and
correct gid revoke.
@
text
@d1 1
a1 1
/*	$OpenBSD: com5.c,v 1.3 1997/08/24 21:55:03 deraadt Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)com5.c	8.1 (Berkeley) 5/31/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d52 1
a52 1
	    testbit(location[position].objects, wordvalue[wordnumber])) {
d94 1
a94 1
	if (wordtype[wordnumber] == NOUNS && testbit(location[position].objects, wordvalue[wordnumber])) {
d111 1
a111 1
					setbit(location[position].objects, MEDALION);
d161 1
a161 1
					while (!testbit(inven, n))
d163 1
a163 1
					clearbit(inven, n);
d165 1
a165 1
						setbit(location[position].objects, n);
d173 1
a173 1
				setbit(location[position].objects, DEADWOOD);
d176 1
a176 1
				setbit(location[position].objects, HALBERD);
d276 1
a276 1
	if (person && testbit(location[position].objects, person)) {
d286 2
a287 2
	if (result != -1 && (testbit(location[position].objects, obj) || obj == AMULET || obj == MEDALION || obj == TALISMAN)) {
		clearbit(location[position].objects, obj);
d316 1
a316 1
					clearbit(location[position].objects, MEDALION);
@


1.3
log
@various linux-based patches; from linux people; sent by jsm@@octomino.demon.co.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: com5.c,v 1.2 1997/06/30 19:56:31 kstailey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$NetBSD: com5.c,v 1.3 1995/03/21 15:07:07 cgd Exp $";
d51 2
a52 1
	if (wordtype[wordnumber] == NOUNS && testbit(location[position].objects,wordvalue[wordnumber])){
d55 5
a59 19
		switch (wordvalue[wordnumber]){
			case NORMGOD:
			switch(godready++){
				case 0:
					puts("She squirms and avoids your advances.");
					break;
				case 1:
					puts("She is coming around; she didn't fight it as much.");
					break;
				case 2:
					puts("She's begining to like it.");
					break;
				default:
					puts("She's gone limp.");
					
			}
			break;
			case NATIVE:
				puts("The lips are warm and her body robust.  She pulls you down to the ground.");
d61 2
a62 2
			case TIMER:
				puts("The old man blushes.");
d64 2
a65 2
			case MAN:
				puts("The dwarf punches you in the kneecap.");
d68 15
a82 1
				pleasure--;
d84 2
a85 2
	}
	else	puts("I'd prefer not to.");
d91 1
a91 1
	register int n;
d94 4
a97 4
	if (wordtype[wordnumber] == NOUNS && testbit(location[position].objects,wordvalue[wordnumber])){
		if (wordvalue[wordnumber] == NORMGOD && !loved)
			if (godready >= 2){
				puts("She cuddles up to you, and her mouth starts to work:\n'That was my sister's amulet.  The lovely goddess, Purl, was she.  The Empire\ncaptured her just after the Darkness came.  My other sister, Vert, was killed\nby the Dark Lord himself.  He took her amulet and warped its power.\nYour quest was foretold by my father before he died, but to get the Dark Lord's\namulet you must use cunning and skill.  I will leave you my amulet.");
d102 1
a102 1
				if (card(injuries, NUMOFINJURIES)){
d104 1
a104 1
					for (n=0; n < NUMOFINJURIES; n++)
d111 1
a111 1
					setbit(location[position].objects,MEDALION);
d113 1
a113 1
				btime += 10;
d115 1
a115 2
			}
			else {
d119 3
a121 2
		if (wordvalue[wordnumber] == NATIVE){
			puts("The girl is easy prey.  She peals off her sarong and indulges you.");
d125 1
a125 1
			btime += 10;
d129 2
a130 2
	}
	else puts("I't doesn't seem to work.");
d136 2
a137 2
	int oldtime;
	register int n;
d139 3
a141 3
	oldtime = btime;
	if ((snooze - btime) < (0.75 * CYCLE)){
		btime += 0.75 * CYCLE - (snooze - btime);
d143 1
a143 1
		for (n = 0; n < btime - oldtime; n++)
d146 4
a149 4
		snooze += 3 * (btime - oldtime);
		if (notes[LAUNCHED]){
			fuel -= (btime - oldtime);
			if (location[position].down){
d152 1
a152 2
			}
			else
d155 1
a155 1
		if (OUTSIDE && rnd(100) < 50){
d157 5
a161 3
			switch(rnd(4)){
				case 0:
					if (ucard(inven)){
d163 17
a179 19
						while(!testbit(inven,n))
							n = rnd(NUMOFOBJECTS);
						clearbit(inven,n);
						if (n != AMULET && n != MEDALION && n != TALISMAN)
							setbit(location[position].objects,n);
						carrying -= objwt[n];
						encumber -= objcumber[n];
					}
					puts("A fiendish little Elf is stealing your treasures!");
					fight(ELF,10);
					break;
				case 1:
					setbit(location[position].objects,DEADWOOD);
					break;
				case 2:
					setbit(location[position].objects,HALBERD);
					break;
				default:
					break;
d182 3
a184 4
	}
	else
		return(0);
	return(1);
d190 23
a212 23
	if ((btime / CYCLE + 1) % 2 && OUTSIDE)
		switch((btime % CYCLE)/(CYCLE / 7)){
			case 0:
				puts("It is just after sunrise.");
				break;
			case 1:
				puts("It is early morning.");
				break;
			case 2:
				puts("It is late morning.");
				break;
			case 3:
				puts("It is near noon.");
				break;
			case 4:
				puts("It is early afternoon.");
				break;
			case 5:
				puts("It is late afternoon.");
				break;
			case 6:
				puts("It is near sunset.");
				break;
d215 22
a236 22
		switch((btime % CYCLE)/(CYCLE / 7)){
			case 0:
				puts("It is just after sunset.");
				break;
			case 1:
				puts("It is early evening.");
				break;
			case 2:
				puts("The evening is getting old.");
				break;
			case 3:
				puts("It is near midnight.");
				break;
			case 4:
				puts("These are the wee hours of the morning.");
				break;
			case 5:
				puts("The night is waning.");
				break;
			case 6:
				puts("It is almost morning.");
				break;
d249 2
a250 2
	while (wordtype[++wordnumber] != OBJECT  && wordvalue[wordnumber] != AMULET && wordvalue[wordnumber] != MEDALION && wordvalue[wordnumber] != TALISMAN && wordnumber <= wordcount);
	if (wordnumber <= wordcount){
d258 1
a258 1
	if (wordtype[wordnumber] == NOUNS){
d262 13
d276 1
a276 1
	if (person && testbit(location[position].objects,person))
d281 1
a281 1
	else {
d283 2
a284 1
		return(0);
d286 3
a288 3
	if (result != -1 && (testbit(location[position].objects,obj) || obj == AMULET || obj == MEDALION || obj == TALISMAN)){
		clearbit(location[position].objects,obj);
		btime++;
d290 28
a317 11
		switch(person){
			case NATIVE:
				puts("She accepts it shyly.");
				ego += 2;
				break;
			case NORMGOD:
				if (obj == RING || obj == BRACELET){
					puts("She takes the charm and puts it on.  A little kiss on the cheek is");
					puts("your reward.");
					ego += 5;
					godready += 3;
d319 27
a345 44
				if (obj == AMULET || obj == MEDALION || obj == TALISMAN){
					win++;
					ego += 5;
					power -= 5;
					if (win >= 3){
						puts("The powers of the earth are now legitimate.  You have destroyed the Darkness");
						puts("and restored the goddess to her thrown.  The entire island celebrates with");
						puts("dancing and spring feasts.  As a measure of her gratitude, the goddess weds you");
						puts("in the late summer and crowns you Prince Liverwort, Lord of Fungus.");
						puts("\nBut, as the year wears on and autumn comes along, you become restless and");
						puts("yearn for adventure.  The goddess, too, realizes that the marriage can't last.");
						puts("She becomes bored and takes several more natives as husbands.  One evening,");
						puts("after having been out drinking with the girls, she kicks the throne particulary");
						puts("hard and wakes you up.  (If you want to win this game, you're going to have to\nshoot her!)");
						clearbit(location[position].objects,MEDALION);
						wintime = btime;
					}
				}
				break;
			case TIMER:
				if (obj == COINS){
					puts("He fingers the coins for a moment and then looks up agape.  `Kind you are and");
					puts("I mean to repay you as best I can.'  Grabbing a pencil and cocktail napkin...\n");
					printf(  "+-----------------------------------------------------------------------------+\n");
					printf(  "|				   xxxxxxxx\\				      |\n");
					printf(  "|				       xxxxx\\	CLIFFS			      |\n");
					printf(  "|		FOREST			  xxx\\				      |\n");
					printf(  "|				\\\\	     x\\        	OCEAN		      |\n");
					printf(  "|				||	       x\\			      |\n");
					printf(  "|				||  ROAD	x\\			      |\n");
					printf(  "|				||		x\\			      |\n");
					printf(  "|		SECRET		||	  .........			      |\n");
					printf(  "|		 - + -		||	   ........			      |\n");
					printf(  "|		ENTRANCE	||		...      BEACH		      |\n");
					printf(  "|				||		...		  E	      |\n");
					printf(  "|				||		...		  |	      |\n");
					printf(  "|				//		...	    N <-- + --- S     |\n");
					printf(  "|		PALM GROVE     //		...		  |	      |\n");
					printf(  "|			      //		...		  W	      |\n");
					printf(  "+-----------------------------------------------------------------------------+\n");
					puts("\n`This map shows a secret entrance to the catacombs.");
					puts("You will know when you arrive because I left an old pair of shoes there.'");
				}
				break;
d348 2
a349 2
	wordnumber = max(last1,last2);
	return(firstnumber);
@


1.2
log
@tag
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
#include "externs.h"
d47 1
d87 1
d112 1
a112 1
				time += 10;
d124 1
a124 1
			time += 10;
d132 1
d138 3
a140 3
	oldtime = time;
	if ((snooze - time) < (0.75 * CYCLE)){
		time += 0.75 * CYCLE - (snooze - time);
d142 1
a142 1
		for (n = 0; n < time - oldtime; n++)
d145 1
a145 1
		snooze += 3 * (time - oldtime);
d147 1
a147 1
			fuel -= (time - oldtime);
d188 1
d191 2
a192 2
	if ((time / CYCLE + 1) % 2 && OUTSIDE)
		switch((time % CYCLE)/(CYCLE / 7)){
d216 1
a216 1
		switch((time % CYCLE)/(CYCLE / 7)){
d243 1
d248 1
d275 1
a275 1
		time++;
d304 1
a304 1
						wintime = time;
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
