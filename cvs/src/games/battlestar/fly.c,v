head	1.14;
access;
symbols
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.13.0.26
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.18
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.22
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.20
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.24
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.20
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.18
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.16
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.14
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.12
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.10
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.8
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.6
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.4
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.2
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.12.31.17.51.19;	author mestre;	state Exp;
branches;
next	1.13;
commitid	GSzV0GYeNlCgMbj0;

1.13
date	2009.10.27.23.59.24;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.10.07.26.22;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.03.01.38;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.31.05.11.32;	author pjanzen;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.09;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.09.24.21.55.25;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	99.09.25.20.30.45;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	98.09.13.01.30.32;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	97.12.16.07.54.25;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	97.08.24.21.55.08;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.06.30.19.56.35;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.06.16.05.06.56;	author downsj;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.43;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.43;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Include only needed header files per each source file

OK tb@@
@
text
@/*	$OpenBSD: fly.c,v 1.13 2009/10/27 23:59:24 deraadt Exp $	*/
/*	$NetBSD: fly.c,v 1.3 1995/03/21 15:07:28 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <curses.h>
#include <signal.h>
#include <stdlib.h>
#include <unistd.h>

#include "extern.h"

#undef UP

#define MIDR  (LINES/2 - 1)
#define MIDC  (COLS/2 - 1)

int     ourclock = 120;	/* time for all the flights in the game */

static int     row, column;
static int     dr = 0, dc = 0;
static char    destroyed;
static char    cross = 0;
static sig_t   oldsig;

static void blast(void);
static void endfly(void);
static void moveenemy(int);
static void notarget(void);
static void screen(void);
static void succumb(int);
static void target(void);

static void
succumb(int sigraised)
{
	if (oldsig == SIG_DFL) {
		endfly();
		exit(1);
	}
	if (oldsig != SIG_IGN) {
		endfly();
		(*oldsig)(SIGINT);
	}
}

int
visual(void)
{
	destroyed = 0;
	if (initscr() == NULL) {
		puts("Whoops!  No more memory...");
		return (0);
	}
	oldsig = signal(SIGINT, succumb);
	cbreak();
	noecho();
	screen();
	row = rnd(LINES - 3) + 1;
	column = rnd(COLS - 2) + 1;
	moveenemy(0);
	for (;;) {
		switch (getchar()) {

		case 'h':
		case 'r':
			dc = -1;
			fuel--;
			break;

		case 'H':
		case 'R':
			dc = -5;
			fuel -= 10;
			break;

		case 'l':
			dc = 1;
			fuel--;
			break;

		case 'L':
			dc = 5;
			fuel -= 10;
			break;

		case 'j':
		case 'u':
			dr = 1;
			fuel--;
			break;

		case 'J':
		case 'U':
			dr = 5;
			fuel -= 10;
			break;

		case 'k':
		case 'd':
			dr = -1;
			fuel--;
			break;

		case 'K':
		case 'D':
			dr = -5;
			fuel -= 10;
			break;

		case '+':
			if (cross) {
				cross = 0;
				notarget();
			} else
				cross = 1;
			break;

		case ' ':
		case 'f':
			if (torps) {
				torps -= 2;
				blast();
				if (row == MIDR && column - MIDC < 2 && MIDC - column < 2) {
					destroyed = 1;
					alarm(0);
				}
			} else
				mvaddstr(0, 0, "*** Out of torpedoes. ***");
			break;

		case 'q':
			endfly();
			return (0);

		default:
			mvaddstr(0, 26, "Commands = r,R,l,L,u,U,d,D,f,+,q");
			continue;

		case EOF:
			break;
		}
		if (destroyed) {
			endfly();
			return (1);
		}
		if (ourclock <= 0) {
			endfly();
			die(0);
		}
	}
}

static void
screen(void)
{
	int     r, c, n;
	int     i;

	clear();
	i = rnd(100);
	for (n = 0; n < i; n++) {
		r = rnd(LINES - 3) + 1;
		c = rnd(COLS);
		mvaddch(r, c, '.');
	}
	mvaddstr(LINES - 1 - 1, 21, "TORPEDOES           FUEL           TIME");
	refresh();
}

static void
target(void)
{
	int     n;

	move(MIDR, MIDC - 10);
	addstr("-------   +   -------");
	for (n = MIDR - 4; n < MIDR - 1; n++) {
		mvaddch(n, MIDC, '|');
		mvaddch(n + 6, MIDC, '|');
	}
}

static void
notarget(void)
{
	int     n;

	move(MIDR, MIDC - 10);
	addstr("                     ");
	for (n = MIDR - 4; n < MIDR - 1; n++) {
		mvaddch(n, MIDC, ' ');
		mvaddch(n + 6, MIDC, ' ');
	}
}

static void
blast(void)
{
	int     n;

	alarm(0);
	move(LINES - 1, 24);
	printw("%3d", torps);
	for(n = LINES - 1 - 2; n >= MIDR + 1; n--) {
		mvaddch(n, MIDC + MIDR - n, '/');
		mvaddch(n, MIDC - MIDR + n, '\\');
		refresh();
	}
	mvaddch(MIDR, MIDC, '*');
	for (n = LINES - 1 - 2; n >= MIDR + 1; n--) {
		mvaddch(n, MIDC + MIDR - n, ' ');
		mvaddch(n, MIDC - MIDR + n, ' ');
		refresh();
	}
	alarm(1);
}

static void
moveenemy(int sigraised)
{
	double  d;
	int     oldr, oldc;

	oldr = row;
	oldc = column;
	if (fuel > 0) {
		if (row + dr <= LINES - 3 && row + dr > 0)
			row += dr;
		if (column + dc < COLS - 1 && column + dc > 0)
			column += dc;
	} else
		if (fuel < 0) {
			fuel = 0;
			mvaddstr(0, 60, "*** Out of fuel ***");
		}
	d = (double) ((row - MIDR) * (row - MIDR) + (column - MIDC) * (column - MIDC));
	if (d < 16) {
		row += (rnd(9) - 4) % (4 - abs(row - MIDR));
		column += (rnd(9) - 4) % (4 - abs(column - MIDC));
	}
	ourclock--;
	mvaddstr(oldr, oldc - 1, "   ");
	if (cross)
		target();
	mvaddstr(row, column - 1, "/-\\");
	move(LINES - 1, 24);
	printw("%3d", torps);
	move(LINES - 1, 42);
	printw("%3d", fuel);
	move(LINES - 1, 57);
	printw("%3d", ourclock);
	refresh();
	signal(SIGALRM, moveenemy);
	alarm(1);
}

static void
endfly(void)
{
	alarm(0);
	signal(SIGALRM, SIG_DFL);
	mvcur(0, COLS - 1, LINES - 1, 0);
	endwin();
	setvbuf(stdout, NULL, _IOLBF, BUFSIZ);
	signal(SIGTSTP, SIG_DFL);
	signal(SIGINT, oldsig);
}
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: fly.c,v 1.12 2004/07/10 07:26:22 deraadt Exp $	*/
d33 5
d39 1
a40 1
#include <curses.h>
@


1.12
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: fly.c,v 1.11 2003/06/03 03:01:38 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)fly.c	8.2 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: fly.c,v 1.11 2003/06/03 03:01:38 millert Exp $";
#endif
#endif /* not lint */
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: fly.c,v 1.10 2002/05/31 05:11:32 pjanzen Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: fly.c,v 1.10 2002/05/31 05:11:32 pjanzen Exp $";
d65 1
a65 2
succumb(sigraised)
	int     sigraised;
d78 1
a78 1
visual()
d185 1
a185 1
screen()
d202 1
a202 1
target()
d215 1
a215 1
notarget()
d228 1
a228 1
blast()
d250 1
a250 2
moveenemy(sigraised)
	int     sigraised;
d289 1
a289 1
endfly()
@


1.10
log
@crmode -> cbreak
@
text
@d1 1
a1 1
/*	$OpenBSD: fly.c,v 1.9 2002/02/16 21:27:09 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: fly.c,v 1.9 2002/02/16 21:27:09 millert Exp $";
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: fly.c,v 1.8 2000/09/24 21:55:25 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: fly.c,v 1.8 2000/09/24 21:55:25 pjanzen Exp $";
d91 1
a91 1
	crmode();
@


1.8
log
@numerous changes from jsm@@netbsd.org:
static where appropriate, add a few comments, format a bit better, and
deal with WEIGHT/CUMBER being zero (and not less).
@
text
@d1 1
a1 1
/*	$OpenBSD: fly.c,v 1.7 1999/09/25 20:30:45 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: fly.c,v 1.7 1999/09/25 20:30:45 pjanzen Exp $";
d60 7
a66 7
static void blast __P((void));
static void endfly __P((void));
static void moveenemy __P((int));
static void notarget __P((void));
static void screen __P((void));
static void succumb __P((int));
static void target __P((void));
@


1.7
log
@Merge 4.4BSD-Lite2 and NetBSD, including improved save file handling of
jsm28@@cam.ac.uk.  Rename setbit() family of macros so as not to conflict
with <sys/param.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: fly.c,v 1.6 1998/09/13 01:30:32 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: fly.c,v 1.6 1998/09/13 01:30:32 pjanzen Exp $";
a48 1
#define abs(a)	((a) < 0 ? -(a) : (a))
a51 3
int     row, column;
int     dr = 0, dc = 0;
char    destroyed;
a52 2
char    cross = 0;
sig_t   oldsig;
d54 13
d68 1
a68 1
void
d189 1
a189 1
void
d206 1
a206 1
void
d219 1
a219 1
void
d232 1
a232 1
void
d254 1
a254 1
void
d294 1
a294 1
void
@


1.6
log
@NetBSD merge, numerous patches from jsm28@@cam.ac.uk, spelling fixes, and
correct gid revoke.
@
text
@d1 1
a1 1
/*	$OpenBSD: fly.c,v 1.5 1997/12/16 07:54:25 angelos Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)fly.c	8.1 (Berkeley) 5/31/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
@


1.5
log
@Fix annoying warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: fly.c,v 1.4 1997/08/24 21:55:08 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$NetBSD: fly.c,v 1.3 1995/03/21 15:07:28 cgd Exp $";
a44 1
#include <unistd.h>
d53 7
a59 14
int row, column;
int dr = 0, dc = 0;
char destroyed;
int bclock = 120;		/* time for all the flights in the game */
char cross = 0;
sig_t oldsig;

void blast __P((void));
void endfly __P((void));
void moveenemy __P((int));
void notarget __P((void));
void screen __P((void));
void succumb __P((int));
void target __P((void));
d63 1
a63 1
int sigraised;
d79 1
a79 1
	if(initscr() == NULL){
d81 1
a81 1
		return(0);
d87 2
a88 2
	row = rnd(LINES-3) + 1;
	column = rnd(COLS-2) + 1;
d91 1
a91 1
		switch(getchar()){
d93 62
a154 50
			case 'h':
			case 'r':
				dc = -1;
				fuel--;
				break;

			case 'H':
			case 'R':
				dc = -5;
				fuel -= 10;
				break;

			case 'l':
				dc = 1;
				fuel--;
				break;

			case 'L':
				dc = 5;
				fuel -= 10;
				break;

			case 'j':
			case 'u':
				dr = 1;
				fuel--;
				break;

			case 'J':
			case 'U':
				dr = 5;
				fuel -= 10;
				break;

			case 'k':
			case 'd':
				dr = -1;
				fuel--;
				break;

			case 'K':
			case 'D':
				dr = -5;
				fuel -= 10;
				break;

			case '+':
				if (cross){
					cross = 0;
					notarget();
d156 11
a166 25
				else
					cross = 1;
				break;

			case ' ':
			case 'f':
				if (torps){
					torps -= 2;
					blast();
					if (row == MIDR && column - MIDC < 2 && MIDC - column < 2){
						destroyed = 1;
						alarm(0);
					}
				}
				else
					mvaddstr(0,0,"*** Out of torpedoes. ***");
				break;

			case 'q':
				endfly();
				return(0);

			default:
				mvaddstr(0,26,"Commands = r,R,l,L,u,U,d,D,f,+,q");
				continue;
d168 2
a169 2
			case EOF:
				break;
d171 1
a171 1
		if (destroyed){
d173 1
a173 1
			return(1);
d175 1
a175 1
		if (bclock <= 0){
d185 2
a186 2
	register int r,c,n;
	int i;
d190 2
a191 2
	for (n=0; n < i; n++){
		r = rnd(LINES-3) + 1;
d195 1
a195 1
	mvaddstr(LINES-1-1,21,"TORPEDOES           FUEL           TIME");
d202 1
a202 1
	register int n;
d204 1
a204 1
	move(MIDR,MIDC-10);
d206 3
a208 3
	for (n = MIDR-4; n < MIDR-1; n++){
		mvaddch(n,MIDC,'|');
		mvaddch(n+6,MIDC,'|');
d215 1
a215 1
	register int n;
d217 1
a217 1
	move(MIDR,MIDC-10);
d219 3
a221 3
	for (n = MIDR-4; n < MIDR-1; n++){
		mvaddch(n,MIDC,' ');
		mvaddch(n+6,MIDC,' ');
d228 1
a228 1
	register int n;
d231 1
a231 1
	move(LINES-1, 24);
d233 3
a235 3
	for(n = LINES-1-2; n >= MIDR + 1; n--){
		mvaddch(n, MIDC+MIDR-n, '/');
		mvaddch(n, MIDC-MIDR+n, '\\');
d238 4
a241 4
	mvaddch(MIDR,MIDC,'*');
	for(n = LINES-1-2; n >= MIDR + 1; n--){
		mvaddch(n, MIDC+MIDR-n, ' ');
		mvaddch(n, MIDC-MIDR+n, ' ');
d249 1
a249 1
int sigraised;
d251 2
a252 2
	double d;
	int oldr, oldc;
d256 2
a257 2
	if (fuel > 0){
		if (row + dr <= LINES-3 && row + dr > 0)
d259 1
a259 1
		if (column + dc < COLS-1 && column + dc > 0)
d261 7
a267 6
	} else if (fuel < 0){
		fuel = 0;
		mvaddstr(0,60,"*** Out of fuel ***");
	}
	d = (double) ((row - MIDR)*(row - MIDR) + (column - MIDC)*(column - MIDC));
	if (d < 16){
d271 1
a271 1
	bclock--;
d276 1
a276 1
	move(LINES-1, 24);
d278 1
a278 1
	move(LINES-1, 42);
d280 2
a281 2
	move(LINES-1, 57);
	printw("%3d", bclock);
d292 1
a292 1
	mvcur(0,COLS-1,LINES-1,0);
@


1.4
log
@various linux-based patches; from linux people; sent by jsm@@octomino.demon.co.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: fly.c,v 1.3 1997/06/30 19:56:35 kstailey Exp $	*/
d63 1
a63 1
void moveenemy __P((void));
d66 1
a66 1
void succumb __P((void));
d70 2
a71 1
succumb()
d97 1
a97 1
	moveenemy();
d187 1
a187 1
			die();
d258 2
a259 1
moveenemy()
@


1.3
log
@tag
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 2
a46 1
#include "externs.h"
d57 1
a57 1
int clock = 120;		/* time for all the flights in the game */
d61 8
d82 1
a84 2
	void moveenemy();

d184 1
a184 1
		if (clock <= 0){
d191 1
d208 1
d221 1
d234 1
d278 1
a278 1
	clock--;
d288 1
a288 1
	printw("%3d", clock);
d294 1
d301 1
@


1.2
log
@ncurses: ERR -> NULL
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d77 1
a77 1
	if(initscr() == ERR){
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
