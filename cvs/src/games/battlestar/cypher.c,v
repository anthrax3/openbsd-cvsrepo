head	1.19;
access;
symbols
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.17.0.26
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.18
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.22
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.20
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.16
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.14
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.12
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.10
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.10
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.6
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.14
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.12
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.10
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.8
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.6
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.4
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.13.0.6
	OPENBSD_3_3_BASE:1.13
	OPENBSD_3_2:1.13.0.4
	OPENBSD_3_2_BASE:1.13
	OPENBSD_3_1:1.13.0.2
	OPENBSD_3_1_BASE:1.13
	OPENBSD_3_0:1.12.0.6
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.12.0.4
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2015.12.31.17.51.19;	author mestre;	state Exp;
branches;
next	1.18;
commitid	GSzV0GYeNlCgMbj0;

1.18
date	2015.10.24.17.20.17;	author mmcc;	state Exp;
branches;
next	1.17;
commitid	5RlwuxWTcGlIM0mc;

1.17
date	2009.10.27.23.59.23;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2007.09.09.17.10.02;	author ray;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.10.07.26.22;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.03.03.01.38;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2002.02.17.19.42.20;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2000.09.26.04.42.56;	author pjanzen;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.24.21.55.23;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.23.03.02.36;	author pjanzen;	state Exp;
branches;
next	1.9;

1.9
date	2000.07.24.01.02.43;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	2000.07.03.05.23.45;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	99.09.25.20.30.45;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	98.09.13.01.30.31;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	97.12.16.07.54.24;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	97.09.01.18.13.15;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.08.24.21.55.05;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.06.30.19.56.33;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Include only needed header files per each source file

OK tb@@
@
text
@/*	$OpenBSD: cypher.c,v 1.18 2015/10/24 17:20:17 mmcc Exp $	*/
/*	$NetBSD: cypher.c,v 1.3 1995/03/21 15:07:15 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <ctype.h>
#include <err.h>
#include <limits.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "extern.h"
#include "pathnames.h"

static void verb_with_all(unsigned int *, int, int (*)(void), const char *);

/*
 * Prompt user to input an integer, which is stored in *value.
 * On failure prints a warning, leaves *value untouched, and returns -1.
 */
int
getnum(int *value, const char *fmt, ...)
{
	char buffer[BUFSIZ];
	va_list ap;
	const char *errstr;
	int n;

	va_start(ap, fmt);
	vprintf(fmt, ap);
	fflush(stdout);
	va_end(ap);

	if (fgets(buffer, sizeof(buffer), stdin) == NULL) {
		warnx("error reading input");
		return (-1);
	}
	buffer[strcspn(buffer, "\n")] = '\0';

	n = strtonum(buffer, INT_MIN, INT_MAX, &errstr);
	if (errstr) {
		warnx("number %s: %s", errstr, buffer);
		return (-1);
	}
	*value = n;
	return (0);
}

/* returns 0 if error or no more commands to do,
 *         1 if there are more commands remaining on the current input line
 */
int
cypher(void)
{
	int     n;
	int     junk;
	int     lflag = -1;
	char   *filename, *rfilename;
	size_t  filename_len;

	while (wordnumber <= wordcount) {
		if (wordtype[wordnumber] != VERB &&
		    !(wordtype[wordnumber] == OBJECT &&
		    wordvalue[wordnumber] == KNIFE)) {
			printf("%s: How's that?\n",
			    (wordnumber == wordcount) ? words[wordnumber - 1] : words[wordnumber]);
			return (0);
		}

		switch (wordvalue[wordnumber]) {

		case AUXVERB:
			/* Take the following word as the verb */
			wordnumber++;
			return(cypher());
			break;

		case UP:
			if (location[position].access || wiz || tempwiz) {
				if (!location[position].access)
					puts("Zap!  A gust of wind lifts you up.");
				if (!moveplayer(location[position].up, AHEAD))
					return (0);
			} else {
				puts("There is no way up.");
				return (0);
			}
			lflag = 0;
			break;

		case DOWN:
			if (!moveplayer(location[position].down, AHEAD))
				return (0);
			lflag = 0;
			break;

		case LEFT:
			if (!moveplayer(left, LEFT))
				return (0);
			lflag = 0;
			break;

		case RIGHT:
			if (!moveplayer(right, RIGHT))
				return (0);
			lflag = 0;
			break;

		case AHEAD:
			if (!moveplayer(ahead, AHEAD))
				return (0);
			lflag = 0;
			break;

		case BACK:
			if (!moveplayer(back, BACK))
				return (0);
			lflag = 0;
			break;

		case SHOOT:
			verb_with_all(location[position].objects, OBJ_PERSON,
			    shoot, "shoot at");
			break;

		case TAKE:
			if (wordnumber < wordcount && wordvalue[wordnumber + 1] == EVERYTHING) {
				int things;
				things = 0;
				for (n = 0; n < NUMOFOBJECTS; n++)
					if (TestBit(location[position].objects, n) && objsht[n]) {
						things++;
						wordvalue[wordnumber + 1] = n;
/* Some objects (type NOUNS) have special treatment in take().  For these
 * we must set the type to NOUNS.  However for SWORD and BODY all it does
 * is find which of many objects is meant, so we need do nothing here.
 * BATHGOD must become NORMGOD as well.  NOUNS with no special case must be
 * included here to get the right error.  DOOR cannot occur as an object so
 * need not be included.
 */
						switch (n) {
						case BATHGOD:
							wordvalue[wordnumber + 1] = NORMGOD;
							/* FALLTHROUGH */
						case NORMGOD:
						case AMULET:
						case MEDALION:
						case TALISMAN:
						case MAN:
						case TIMER:
						case NATIVE:
							wordtype[wordnumber + 1] = NOUNS;
							break;
						default:
							wordtype[wordnumber + 1] = OBJECT;
						}
						wordnumber = take(location[position].objects);
						wordnumber += 2;
					}
				if (!things)
					puts("Nothing to take!");
			} else
				take(location[position].objects);
			break;

		case DROP:
			if (wordnumber < wordcount && wordvalue[wordnumber + 1] == EVERYTHING) {
				int things;
				things = 0;
				for (n = 0; n < NUMOFOBJECTS; n++)
					if (TestBit(inven, n)) {
						things++;
						wordvalue[wordnumber + 1] = n;
						wordnumber = drop("Dropped");
					}
				wordnumber++;
				wordnumber++;
				if (!things)
					puts("Nothing to drop!");
			} else
				drop("Dropped");
			break;


		case KICK:
		case THROW:
			if (wordnumber < wordcount && wordvalue[wordnumber + 1] == EVERYTHING) {
				int things, wv;
				things = 0;
				wv = wordvalue[wordnumber];
				for (n = 0; n < NUMOFOBJECTS; n++)
					if (TestBit(inven, n) ||
					  (TestBit(location[position].objects, n) && objsht[n])) {
						things++;
						wordvalue[wordnumber + 1] = n;
						wordnumber = throw(wordvalue[wordnumber] == KICK ? "Kicked" : "Thrown");
					}
				wordnumber += 2;
				if (!things)
					printf("Nothing to %s!\n", wv == KICK ? "kick" : "throw");
			} else
				throw(wordvalue[wordnumber] == KICK ? "Kicked" : "Thrown");
			break;

		case TAKEOFF:
			verb_with_all(wear, 0, takeoff, "take off");
			break;

		case DRAW:
			verb_with_all(wear, 0, draw, "draw");
			break;

		case PUTON:
			verb_with_all(location[position].objects, 0, puton, "put on");
			break;

		case WEARIT:
			verb_with_all(inven, 0, wearit, "wear");
			break;

		case EAT:
			verb_with_all(inven, 0, eat, "eat");
			break;

		case PUT:
			put();
			break;

		case INVEN:
			if (ucard(inven)) {
				puts("You are holding:\n");
				for (n = 0; n < NUMOFOBJECTS; n++)
					if (TestBit(inven, n))
						printf("\t%s\n", objsht[n]);
				printf("\n= %d kilogram%s ", carrying,
				    (carrying == 1 ?  "." : "s."));
				if (WEIGHT)
					printf("(%d%%)\n", carrying * 100 / WEIGHT);
				else
					printf("(can't lift any weight%s)\n",
					    (carrying ? " or move with what you have" : ""));
				if (CUMBER)
					printf("Your arms are %d%% full.\n",
					    encumber * 100 / CUMBER);
				else
					printf("You can't pick anything up.\n");
			} else
				puts("You aren't carrying anything.");

			if (ucard(wear)) {
				puts("\nYou are wearing:\n");
				for (n = 0; n < NUMOFOBJECTS; n++)
					if (TestBit(wear, n))
						printf("\t%s\n", objsht[n]);
			} else
				puts("\nYou are stark naked.");
			if (card(injuries, NUMOFINJURIES)) {
				puts("\nYou have suffered:\n");
				for (n = 0; n < NUMOFINJURIES; n++)
					if (injuries[n])
						printf("\t%s\n", ouch[n]);
				printf("\nYou can still carry up to %d kilogram%s\n", WEIGHT, (WEIGHT == 1 ? "." : "s."));
			} else
				puts("\nYou are in perfect health.");
			break;

		case USE:
			lflag = use();
			break;

		case OPEN:
			dooropen();
			break;

		case LOOK:
			if (!notes[CANTSEE] || TestBit(inven, LAMPON) ||
			    TestBit(location[position].objects, LAMPON)
			    || matchlight) {
				beenthere[position] = 2;
				writedes();
				printobjs();
				if (matchlight) {
					puts("\nYour match splutters out.");
					matchlight = 0;
				}
			} else
				puts("I can't see anything.");
			return (0);	/* No commands after a look */
			break;

		case SU:
			if (wiz || tempwiz) {
				getnum(&position, "\nRoom (was %d) = ", position);
				getnum(&ourtime, "Time (was %d) = ", ourtime);
				getnum(&fuel, "Fuel (was %d) = ", fuel);
				getnum(&torps, "Torps (was %d) = ", torps);
				getnum(&CUMBER, "CUMBER (was %d) = ", CUMBER);
				getnum(&WEIGHT, "WEIGHT (was %d) = ", WEIGHT);
				getnum(&ourclock, "Clock (was %d) = ", ourclock);
				if (getnum(&junk, "Wizard (was %d, %d) = ", wiz, tempwiz) != -1 && !junk)
					tempwiz = wiz = 0;
				printf("\nDONE.\n");
				return (0);	/* No commands after a SU */
			} else
				puts("You aren't a wizard.");
			break;

		case SCORE:
			printf("\tPLEASURE\tPOWER\t\tEGO\n");
			printf("\t%3d\t\t%3d\t\t%3d\n\n", pleasure, power, ego);
			printf("This gives you the rating of %s in %d turns.\n", rate(), ourtime);
			printf("You have visited %d out of %d rooms this run (%d%%).\n", card(beenthere, NUMOFROOMS), NUMOFROOMS, card(beenthere, NUMOFROOMS) * 100 / NUMOFROOMS);
			break;

		/* case KNIFE: */
		case KILL:
			murder();
			break;

		case UNDRESS:
			undress();
			break;

		case RAVAGE:
			ravage();
			break;

		case SAVE:
			printf("\nSave file name (default %s):  ",
			    DEFAULT_SAVE_FILE);
			filename = fgetln(stdin, &filename_len);
			if (filename_len == 0
			    || (filename_len == 1 && filename[0] == '\n'))
				rfilename = save_file_name(DEFAULT_SAVE_FILE,
				    strlen(DEFAULT_SAVE_FILE));
			else {
				if (filename[filename_len - 1] == '\n')
					filename_len--;
				rfilename = save_file_name(filename,
				    filename_len);
			}
			save(rfilename);
			free(rfilename);
			break;

		case VERBOSE:
			verbose = 1;
			printf("[Maximum verbosity]\n");
			break;

		case BRIEF:
			verbose = 0;
			printf("[Standard verbosity]\n");
			break;

		case FOLLOW:
			lflag = follow();
			break;

		case GIVE:
			give();
			break;

		case KISS:
			kiss();
			break;

		case LOVE:
			love();
			break;

		case RIDE:
			lflag = ride();
			break;

		case DRIVE:
			lflag = drive();
			break;

		case LIGHT:
			light();
			break;

		case LAUNCH:
			if (!launch())
				return (0);
			else
				lflag = 0;
			break;

		case LANDIT:
			if (!land())
				return (0);
			else
				lflag = 0;
			break;

		case TIME:
			chime();
			break;

		case SLEEP:
			zzz();
			break;

		case DIG:
			dig();
			break;

		case JUMP:
			lflag = jump();
			break;

		case BURY:
			bury();
			break;

		case SWIM:
			puts("Surf's up!");
			break;

		case DRINK:
			drink();
			break;

		case QUIT:
			die(0);

		default:
			puts("How's that?");
			return (0);
			break;

		}
		if (!lflag)
			newlocation();
		if (wordnumber < wordcount && !stop_cypher &&
		    (*words[wordnumber] == ',' || *words[wordnumber] == '.')) {
			wordnumber++;
			return (1);
		} else
			return (0);
	}
	return (0);
}

int
inc_wordnumber(const char *v, const char *adv)
{
	wordnumber++;
	if (wordnumber >= wordcount) {
		printf("%c%s %s?\n",
		    toupper((unsigned char)v[0]), v + 1, adv);
		return(-1);
	}
	return(0);
}

static void
verb_with_all(unsigned int *testarray, int objflg, int (*verbfunc)(void),
              const char *verbname)
{
	int things, n;

	things = 0;
	if (wordnumber < wordcount && wordvalue[wordnumber + 1] == EVERYTHING) {
		for (n = 0; n < NUMOFOBJECTS; n++)
			if (TestBit(testarray, n) &&
			    (objsht[n] || (objflg & objflags[n]))) {
				things++;
				wordvalue[wordnumber + 1] = n;
				/* Assume it's a NOUN if no short description */
				if (objsht[n])
					wordtype[wordnumber + 1] = OBJECT;
				else
					wordtype[wordnumber + 1] = NOUNS;
				wordnumber = verbfunc();
			}
		wordnumber += 2;
		if (!things)
			printf("Nothing to %s!\n", verbname);
	} else
		verbfunc();
}
@


1.18
log
@Cast ctype functions' arguments to unsigned char.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.17 2009/10/27 23:59:23 deraadt Exp $	*/
d33 3
d37 3
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.16 2007/09/09 17:10:02 ray Exp $	*/
d475 2
a476 1
		printf("%c%s %s?\n", toupper(v[0]), v + 1, adv);
@


1.16
log
@Move redundant prompt/fgets/sscanf lines into a function with
appropriate checks, changing sscanf to strtonum in the process.

Initial diff from Charles Longeau.

OK moritz and chl.
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.15 2004/07/10 07:26:22 deraadt Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)cypher.c	8.2 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: cypher.c,v 1.15 2004/07/10 07:26:22 deraadt Exp $";
#endif
#endif /* not lint */
@


1.15
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.14 2003/06/03 03:01:38 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: cypher.c,v 1.14 2003/06/03 03:01:38 millert Exp $";
d41 2
d48 32
a88 1
	char    buffer[10];
d324 9
a332 35
				printf("\nRoom (was %d) = ", position);
				fgets(buffer, 10, stdin);
				if (*buffer != '\n')
					sscanf(buffer, "%d", &position);
				printf("Time (was %d) = ", ourtime);
				fgets(buffer, 10, stdin);
				if (*buffer != '\n')
					sscanf(buffer, "%d", &ourtime);
				printf("Fuel (was %d) = ", fuel);
				fgets(buffer, 10, stdin);
				if (*buffer != '\n')
					sscanf(buffer, "%d", &fuel);
				printf("Torps (was %d) = ", torps);
				fgets(buffer, 10, stdin);
				if (*buffer != '\n')
					sscanf(buffer, "%d", &torps);
				printf("CUMBER (was %d) = ", CUMBER);
				fgets(buffer, 10, stdin);
				if (*buffer != '\n')
					sscanf(buffer, "%d", &CUMBER);
				printf("WEIGHT (was %d) = ", WEIGHT);
				fgets(buffer, 10, stdin);
				if (*buffer != '\n')
					sscanf(buffer, "%d", &WEIGHT);
				printf("Clock (was %d) = ", ourclock);
				fgets(buffer, 10, stdin);
				if (*buffer != '\n')
					sscanf(buffer, "%d", &ourclock);
				printf("Wizard (was %d, %d) = ", wiz, tempwiz);
				fgets(buffer, 10, stdin);
				if (*buffer != '\n') {
					sscanf(buffer, "%d", &junk);
					if (!junk)
						tempwiz = wiz = 0;
				}
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.13 2002/02/17 19:42:20 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: cypher.c,v 1.13 2002/02/17 19:42:20 millert Exp $";
d50 1
a50 1
cypher()
d472 1
a472 2
inc_wordnumber(v, adv)
	const char *v, *adv;
d483 2
a484 5
verb_with_all(testarray, objflg, verbfunc, verbname)
	unsigned int *testarray;
	int objflg;
	int (*verbfunc)(void);
	const char *verbname;
@


1.13
log
@Manual cleanup of remaining userland __P use (excluding packages maintained outside the tree)
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.12 2000/09/26 04:42:56 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: cypher.c,v 1.12 2000/09/26 04:42:56 pjanzen Exp $";
@


1.12
log
@Improve handling of multiple commands on one line.  Tidy fight parser.
Handle "all" in one place (almost).  Add AUXVERB category and OBJ_PERSON/
OBJ_NONOBJ flags.  Most was discussed with jsm@@netbsd.org, and some is from
him.
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.11 2000/09/24 21:55:23 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cypher.c,v 1.11 2000/09/24 21:55:23 pjanzen Exp $";
d48 1
a48 1
static void verb_with_all __P((unsigned int *, int, int (*)(void), const char *));
@


1.11
log
@numerous changes from jsm@@netbsd.org:
static where appropriate, add a few comments, format a bit better, and
deal with WEIGHT/CUMBER being zero (and not less).
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.10 2000/09/23 03:02:36 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cypher.c,v 1.10 2000/09/23 03:02:36 pjanzen Exp $";
d48 5
d64 6
a69 3
		if (wordtype[wordnumber] != VERB) {
			printf("%s: How's that?\n", words[wordnumber]);
			return (-1);
d74 6
d85 1
a85 1
					return (-1);
d88 1
a88 1
				return (-1);
d95 1
a95 1
				return (-1);
d101 1
a101 1
				return (-1);
d107 1
a107 1
				return (-1);
d113 1
a113 1
				return (-1);
d119 1
a119 1
				return (-1);
d124 2
a125 15
			if (wordnumber < wordcount && wordvalue[wordnumber + 1] == EVERYTHING) {
				int things;
				things = 0;
				for (n = 0; n < NUMOFOBJECTS; n++)
					if (TestBit(location[position].objects, n) && objsht[n]) {
						things++;
						wordvalue[wordnumber + 1] = n;
						wordnumber = shoot();
					}
				if (!things)
					puts("Nothing to shoot at!");
				wordnumber++;
				wordnumber++;
			} else
				shoot();
d160 1
a161 2
				wordnumber++;
				wordnumber++;
d208 1
a208 14
			if (wordnumber < wordcount && wordvalue[wordnumber + 1] == EVERYTHING) {
				int things;
				things = 0;
				for (n = 0; n < NUMOFOBJECTS; n++)
					if (TestBit(wear, n)) {
						things++;
						wordvalue[wordnumber + 1] = n;
						wordnumber = takeoff();
					}
				wordnumber += 2;
				if (!things)
					puts("Nothing to take off!");
			} else
				takeoff();
d212 1
a212 14
			if (wordnumber < wordcount && wordvalue[wordnumber + 1] == EVERYTHING) {
				int things;
				things = 0;
				for (n = 0; n < NUMOFOBJECTS; n++)
					if (TestBit(wear, n)) {
						things++;
						wordvalue[wordnumber + 1] = n;
						wordnumber = draw();
					}
				wordnumber += 2;
				if (!things)
					puts("Nothing to draw!");
			} else
				draw();
d216 1
a216 14
			if (wordnumber < wordcount && wordvalue[wordnumber + 1] == EVERYTHING) {
				int things;
				things = 0;
				for (n = 0; n < NUMOFOBJECTS; n++)
					if (TestBit(location[position].objects, n) && objsht[n]) {
						things++;
						wordvalue[wordnumber + 1] = n;
						wordnumber = puton();
					}
				wordnumber += 2;
				if (!things)
					puts("Nothing to put on!");
			} else
				puton();
d220 1
a220 14
			if (wordnumber < wordcount && wordvalue[wordnumber + 1] == EVERYTHING) {
				int things;
				things = 0;
				for (n = 0; n < NUMOFOBJECTS; n++)
					if (TestBit(inven, n)) {
						things++;
						wordvalue[wordnumber + 1] = n;
						wordnumber = wearit();
					}
				wordnumber += 2;
				if (!things)
					puts("Nothing to wear!");
			} else
				wearit();
d224 1
a224 14
			if (wordnumber < wordcount && wordvalue[wordnumber + 1] == EVERYTHING) {
				int things;
				things = 0;
				for (n = 0; n < NUMOFOBJECTS; n++)
					if (TestBit(inven, n)) {
						things++;
						wordvalue[wordnumber + 1] = n;
						wordnumber = eat();
					}
				wordnumber += 2;
				if (!things)
					puts("Nothing to eat!");
			} else
				eat();
d274 1
a274 14
			if (wordnumber < wordcount && wordvalue[wordnumber + 1] == EVERYTHING) {
				int things;
				things = 0;
				for (n = 0; n < NUMOFOBJECTS; n++)
					if (TestBit(inven, n)) {
						things++;
						wordvalue[wordnumber + 1] = n;
						dooropen();
					}
				wordnumber += 2;
				if (!things)
					puts("Nothing to open!");
			} else
				dooropen();
d290 1
a290 1
			return (-1);
d331 1
a331 1
				return (0);
d343 1
a343 1
		case KNIFE:
d349 3
d414 1
a414 1
				return (-1);
d421 1
a421 1
				return (-1);
d459 1
a459 1
			return (-1);
d463 20
a482 4
		if (wordnumber < wordcount && *words[wordnumber++] == ',')
			continue;
		else
			return (lflag);
d484 31
a514 1
	return (lflag);
@


1.10
log
@drop adjectives in parse(), since they're never used.
tidy a little.  fix love() a bit.
From conversations with jsm@@netbsd.org:
Add objflags[] to deal with plurals and a/an usage.
Commas don't mean AND if followed by a verb.
Check for object presence before trying to lift or eat it.
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.9 2000/07/24 01:02:43 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cypher.c,v 1.9 2000/07/24 01:02:43 pjanzen Exp $";
d302 12
a313 2
				printf("\n= %d kilogram%s (%d%%)\n", carrying, (carrying == 1 ? "." : "s."), (WEIGHT ? carrying * 100 / WEIGHT : -1));
				printf("Your arms are %d%% full.\n", encumber * 100 / CUMBER);
@


1.9
log
@Rename move() to moveplayer() to avoid clashing with curses;
from mycroft@@netbsd.org
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.8 2000/07/03 05:23:45 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cypher.c,v 1.8 2000/07/03 05:23:45 pjanzen Exp $";
a57 2
	while (wordtype[wordnumber] == ADJS)
		wordnumber++;
d59 5
@


1.8
log
@Finding bugs in battlestar is like shooting fish in a barrel.
	Don't overflow beenthere[].  Add "verbose" option.
	Fix spelling (including embedded hyphens in descriptions) and grammar.
	"Kill" will now use the laser if you have no cutting implements.
	Formatting.
	You can do more things to the bathing goddess.
	A little less guess-the-word.  Occasionally better error messages,
particularly with "all" when nothing applies.
	"kick door" no longer segfaults.  Nor does "kill door".
More bugs remain...
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.7 1999/09/25 20:30:45 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cypher.c,v 1.7 1999/09/25 20:30:45 pjanzen Exp $";
d67 1
a67 1
				if (!move(location[position].up, AHEAD))
d77 1
a77 1
			if (!move(location[position].down, AHEAD))
d83 1
a83 1
			if (!move(left, LEFT))
d89 1
a89 1
			if (!move(right, RIGHT))
d95 1
a95 1
			if (!move(ahead, AHEAD))
d101 1
a101 1
			if (!move(back, BACK))
@


1.7
log
@Merge 4.4BSD-Lite2 and NetBSD, including improved save file handling of
jsm28@@cam.ac.uk.  Rename setbit() family of macros so as not to conflict
with <sys/param.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.6 1998/09/13 01:30:31 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cypher.c,v 1.6 1998/09/13 01:30:31 pjanzen Exp $";
d70 1
a70 1
				puts("There is no way up");
d108 2
d112 1
d116 2
d126 2
d130 1
d159 2
d167 2
d171 1
d177 2
d187 3
d193 1
d198 2
d206 2
d210 1
d215 2
d223 2
d227 1
d232 2
d240 2
d244 1
d249 2
d257 2
d261 1
d266 2
d274 2
d278 1
d283 2
d325 17
d434 10
@


1.6
log
@NetBSD merge, numerous patches from jsm28@@cam.ac.uk, spelling fixes, and
correct gid revoke.
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.5 1997/12/16 07:54:24 angelos Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)cypher.c	8.1 (Berkeley) 5/31/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d46 1
d55 2
d109 1
a109 1
					if (testbit(location[position].objects, n) && objsht[n]) {
d122 1
a122 1
					if (testbit(location[position].objects, n) && objsht[n]) {
d134 1
d158 1
a158 1
					if (testbit(inven, n)) {
d173 2
a174 2
					if (testbit(inven, n) ||
					  (testbit(location[position].objects, n) && objsht[n])) {
d186 1
a186 1
					if (testbit(wear, n)) {
d198 1
a198 1
					if (testbit(wear, n)) {
d210 1
a210 1
					if (testbit(location[position].objects, n) && objsht[n]) {
d222 1
a222 1
					if (testbit(inven, n)) {
d234 1
a234 1
					if (testbit(inven, n)) {
d251 1
a251 1
					if (testbit(inven, n))
d261 1
a261 1
					if (testbit(wear, n))
d280 2
a281 2
			if (!notes[CANTSEE] || testbit(inven, LAMPON) ||
			    testbit(location[position].objects, LAMPON)
d356 15
a370 1
			save();
@


1.5
log
@Fix annoying warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.4 1997/09/01 18:13:15 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$NetBSD: cypher.c,v 1.3 1995/03/21 15:07:15 cgd Exp $";
d50 4
a53 4
	register int n;
	int junk;
	int lflag = -1;
	char buffer[10];
d58 1
a58 1
		switch(wordvalue[wordnumber]) {
d60 50
a109 50
			case UP:
				if (location[position].access || wiz || tempwiz) {
					if (!location[position].access)
						puts("Zap!  A gust of wind lifts you up.");
					if (!move(location[position].up, AHEAD))
						return(-1);
				} else {
					puts("There is no way up");
					return(-1);
				}
				lflag = 0;
				break;

			 case DOWN:
				if (!move(location[position].down, AHEAD))
					return(-1);
				lflag = 0;
				break;

			 case LEFT:
				if (!move(left, LEFT))
					return(-1);
				lflag = 0;
				break;

			 case RIGHT:
				if (!move(right, RIGHT))
					return(-1);
				lflag = 0;
				break;
			
			 case AHEAD:
				if (!move(ahead, AHEAD))
					return(-1);
				lflag = 0;
				break;
			
			 case BACK:
				if (!move(back, BACK))
					return(-1);
				lflag = 0;
				break;
			
			 case SHOOT:
				if (wordnumber < wordcount && wordvalue[wordnumber+1] == EVERYTHING){
					for (n=0; n < NUMOFOBJECTS; n++)
						if (testbit(location[position].objects,n) && objsht[n]){
							wordvalue[wordnumber+1] = n;
							wordnumber = shoot();
						}
d112 30
a141 14
				}
				else
					shoot();
				break;

			 case TAKE:
				if (wordnumber < wordcount && wordvalue[wordnumber+1] == EVERYTHING){
					for (n=0; n < NUMOFOBJECTS; n++)
						if (testbit(location[position].objects,n) && objsht[n]){
							wordvalue[wordnumber+1] = n;
							wordtype[wordnumber+1] = OBJECT;
							if ((n == AMULET) || (n == MEDALION) || (n == TALISMAN) || (n == MAN) || (n == TIMER) || (n == NATIVE))
								wordtype[wordnumber+1] = NOUNS;
							wordnumber = take(location[position].objects);
d143 2
d147 11
a157 13
				}
				else
					take(location[position].objects);
				break;

			 case DROP:

				if (wordnumber < wordcount && wordvalue[wordnumber+1] == EVERYTHING){
					for (n=0; n < NUMOFOBJECTS; n++)
						if (testbit(inven,n)){
							wordvalue[wordnumber+1] = n;
							wordnumber = drop("Dropped");
						}
d160 3
a162 4
				}
				else
					drop("Dropped");
				break;
d165 68
a232 135
			 case KICK:
			 case THROW:
				if (wordnumber < wordcount && wordvalue[wordnumber+1] == EVERYTHING){
					for (n=0; n < NUMOFOBJECTS; n++)
						if (testbit(inven,n) ||
						  testbit(location[position].objects, n) && objsht[n]){
							wordvalue[wordnumber+1] = n;
							wordnumber = throw(wordvalue[wordnumber] == KICK ? "Kicked" : "Thrown");
						}
					wordnumber += 2;
				} else
					throw(wordvalue[wordnumber] == KICK ? "Kicked" : "Thrown");
				break;

			 case TAKEOFF:
				if (wordnumber < wordcount && wordvalue[wordnumber+1] == EVERYTHING){
					for (n=0; n < NUMOFOBJECTS; n++)
						if (testbit(wear,n)){
							wordvalue[wordnumber+1] = n;
							wordnumber = takeoff();
						}
					wordnumber += 2;
				}
				else
					takeoff();
				break;


			 case DRAW:

				if (wordnumber < wordcount && wordvalue[wordnumber+1] == EVERYTHING){
					for (n=0; n < NUMOFOBJECTS; n++)
						if (testbit(wear,n)){
							wordvalue[wordnumber+1] = n;
							wordnumber = draw();
						}
					wordnumber += 2;
				}
				else
					draw();
				break;


			 case PUTON:

				if (wordnumber < wordcount && wordvalue[wordnumber+1] == EVERYTHING){
					for (n=0; n < NUMOFOBJECTS; n++)
						if (testbit(location[position].objects,n) && objsht[n]){
							wordvalue[wordnumber+1] = n;
							wordnumber = puton();
						}
					wordnumber += 2;
				}
				else
					puton();
				break;

			 case WEARIT:

				if (wordnumber < wordcount && wordvalue[wordnumber+1] == EVERYTHING){
					for (n=0; n < NUMOFOBJECTS; n++)
						if (testbit(inven,n)){
							wordvalue[wordnumber+1] = n;
							wordnumber = wearit();
						}
					wordnumber += 2;
				}
				else
					wearit();
				break;


			 case EAT:

				if (wordnumber < wordcount && wordvalue[wordnumber+1] == EVERYTHING){
					for (n=0; n < NUMOFOBJECTS; n++)
						if (testbit(inven,n)){
							wordvalue[wordnumber+1] = n;
							wordnumber = eat();
						}
					wordnumber += 2;
				}
				else
					eat();
				break;


			case PUT:
				put();
				break;


			case INVEN:
				if (ucard(inven)){
					puts("You are holding:\n");
					for (n=0; n < NUMOFOBJECTS; n++)
						if (testbit(inven,n))
							printf("\t%s\n", objsht[n]);
					printf("\n= %d kilogram%s (%d%%)\n", carrying, (carrying == 1 ? "." : "s."),(WEIGHT ? carrying*100/WEIGHT : -1));
					printf("Your arms are %d%% full.\n",encumber*100/CUMBER);
				}
				else
					puts("You aren't carrying anything.");
					
				if (ucard(wear)){
					puts("\nYou are wearing:\n");
					for (n=0; n < NUMOFOBJECTS; n++)
						if (testbit(wear,n))
							printf("\t%s\n", objsht[n]);
				}
				else
					puts("\nYou are stark naked.");
				if (card(injuries,NUMOFINJURIES)){
					puts("\nYou have suffered:\n");
					for (n=0; n < NUMOFINJURIES; n++)
						if (injuries[n])
							printf("\t%s\n",ouch[n]);
					printf("\nYou can still carry up to %d kilogram%s\n",WEIGHT,(WEIGHT == 1 ? "." : "s."));
				}
				else
					puts("\nYou are in perfect health.");
				break;

			case USE:
				lflag = use();
				break;

			case LOOK:
				if (!notes[CANTSEE] || testbit(inven,LAMPON) || testbit(location[position].objects,LAMPON) || matchlight){
					beenthere[position] = 2;
					writedes();
					printobjs();
					if (matchlight){
						puts("\nYour match splutters out.");
						matchlight = 0;
d234 56
a289 4
				} else
					puts("I can't see anything.");
				return(-1);
				break;
d291 2
a292 2
			 case SU:
			 if (wiz || tempwiz){
d294 1
a294 1
				fgets(buffer,10,stdin);
d296 3
a298 3
					sscanf(buffer,"%d", &position);
				printf("Time (was %d) = ",btime);
				fgets(buffer,10,stdin);
d300 3
a302 3
					sscanf(buffer,"%d", &btime);
				printf("Fuel (was %d) = ",fuel);
				fgets(buffer,10,stdin);
d304 3
a306 3
					sscanf(buffer,"%d", &fuel);
				printf("Torps (was %d) = ",torps);
				fgets(buffer,10,stdin);
d308 3
a310 3
					sscanf(buffer,"%d", &torps);
				printf("CUMBER (was %d) = ",CUMBER);
				fgets(buffer,10,stdin);
d312 3
a314 3
					sscanf(buffer,"%d", &CUMBER);
				printf("WEIGHT (was %d) = ",WEIGHT);
				fgets(buffer,10,stdin);
d316 3
a318 3
					sscanf(buffer,"%d",&WEIGHT);
				printf("Clock (was %d) = ",bclock);
				fgets(buffer,10,stdin);
d320 5
a324 5
					sscanf(buffer,"%d",&bclock);
				printf("Wizard (was %d, %d) = ",wiz, tempwiz);
				fgets(buffer,10,stdin);
				if (*buffer != '\n'){
					sscanf(buffer,"%d",&junk);
d329 103
a431 104
				return(0);
			 }
			 else
				 puts("You aren't a wizard.");
			 break;
				
			 case SCORE:
				printf("\tPLEASURE\tPOWER\t\tEGO\n");
				printf("\t%3d\t\t%3d\t\t%3d\n\n",pleasure,power,ego);
				printf("This gives you the rating of %s in %d turns.\n",rate(),btime);
				printf("You have visited %d out of %d rooms this run (%d%%).\n",card(beenthere,NUMOFROOMS),NUMOFROOMS,card(beenthere,NUMOFROOMS)*100/NUMOFROOMS);
				break;

			 case KNIFE:
			 case KILL:
				murder();
				break;

			 case UNDRESS:
			 case RAVAGE:
				ravage();
				break;

			 case SAVE:
				save();
				break;

			 case FOLLOW:
				lflag = follow();
				break;

			 case GIVE:
				give();
				break;

			 case KISS:
				kiss();
				break;

			 case LOVE:
				 love();
				 break;

			 case RIDE:
				lflag = ride();
				break;

			 case DRIVE:
				lflag = drive();
				break;

			 case LIGHT:
				 light();
				 break;

			 case LAUNCH:
				if (!launch())
					return(-1);
				else
					lflag = 0;
				break;

			case LANDIT:
				if (!land())
					return(-1);
				else
					lflag = 0;
				break;

			case TIME:
				chime();
				break;

			 case SLEEP:
				zzz();
				break;

			 case DIG:
				dig();
				break;

			 case JUMP:
				lflag = jump();
				break;

			 case BURY:
				bury();
				break;

			 case SWIM:
				puts("Surf's up!");
				break;

			 case DRINK:
				drink();
				break;

			 case QUIT:
				die(0);

			 default:
				puts("How's that?");
				return(-1);
				break;
a432 1
			
d436 4
a439 3
		else return(lflag);
       }
       return(lflag);
@


1.4
log
@Remove trailing spaces on lines, use sane pathname sizes, and
use warn instead of perror.
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.3 1997/08/24 21:55:05 deraadt Exp $	*/
d427 1
a427 1
				die();
@


1.3
log
@various linux-based patches; from linux people; sent by jsm@@octomino.demon.co.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: cypher.c,v 1.2 1997/06/30 19:56:33 kstailey Exp $	*/
d90 1
a90 1
			 
d96 1
a96 1
			 
d102 1
a102 1
			 
d113 1
a113 1
				else 
d130 1
a130 1
				else 
d145 1
a145 1
				else 
d160 1
a160 1
				} else 
d173 1
a173 1
				else 
d188 1
a188 1
				else 
d203 1
a203 1
				else 
d217 1
a217 1
				else 
d232 1
a232 1
				else 
d286 1
a286 1
				} else 
d387 1
a387 1
				else 
d434 1
a434 1
			 
@


1.2
log
@tag
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
#include "externs.h"
d47 1
d106 1
a106 1
						if (testbit(location[position].objects,n) && *objsht[n]){
d120 1
a120 1
						if (testbit(location[position].objects,n) && *objsht[n]){
d122 3
d155 1
a155 1
						  testbit(location[position].objects, n) && *objsht[n]){
d197 1
a197 1
						if (testbit(location[position].objects,n) && *objsht[n]){
d297 1
a297 1
				printf("Time (was %d) = ",time);
d300 1
a300 1
					sscanf(buffer,"%d", &time);
d317 1
a317 1
				printf("Clock (was %d) = ",clock);
d320 1
a320 1
					sscanf(buffer,"%d",&clock);
d338 1
a338 1
				printf("This gives you the rating of %s in %d turns.\n",rate(),time);
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
