head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.6
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.15.0.26
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.18
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.22
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.20
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.16
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.10
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.6
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.4
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.2
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.13.0.14
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.12
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.10
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.8
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.6
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.13.0.4
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.2
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.6
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.4
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.11.0.2
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.10.0.6
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.4
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2015.12.31.17.51.19;	author mestre;	state Exp;
branches;
next	1.15;
commitid	GSzV0GYeNlCgMbj0;

1.15
date	2009.10.27.23.59.24;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2007.11.24.12.59.28;	author jmc;	state Exp;
branches;
next	1.13;

1.13
date	2004.07.10.07.26.22;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.03.01.38;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.02.16.21.27.09;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.26.04.42.56;	author pjanzen;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.24.21.55.26;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	2000.09.23.03.02.38;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	2000.09.17.21.28.33;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	99.09.25.20.30.46;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	98.09.13.01.30.33;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	97.08.24.21.55.12;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	97.07.23.20.04.47;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	97.06.30.19.56.39;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.43;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.43;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Include only needed header files per each source file

OK tb@@
@
text
@/*	$OpenBSD: parse.c,v 1.15 2009/10/27 23:59:24 deraadt Exp $	*/
/*	$NetBSD: parse.c,v 1.3 1995/03/21 15:07:48 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>
#include <string.h>

#include "extern.h"

#define HASHSIZE	256
#define HASHMUL		81
#define HASHMASK	(HASHSIZE - 1)

static int hash(const char *);
static void install(struct wlist *);
static struct wlist *lookup(const char *);

struct wlist *hashtab[HASHSIZE];

void
wordinit(void)
{
	struct wlist *w;

	for (w = wlist; w->string; w++)
		install(w);
}

static int
hash(const char *s)
{
	int     hashval = 0;

	while (*s) {
		hashval += *s++;
		hashval *= HASHMUL;
		hashval &= HASHMASK;
	}
	return hashval;
}

static struct wlist *
lookup(const char *s)
{
	struct wlist *wp;

	for (wp = hashtab[hash(s)]; wp != NULL; wp = wp->next)
		if (*s == *wp->string && strcmp(s, wp->string) == 0)
			return wp;
	return NULL;
}

static void
install(struct wlist *wp)
{
	int     hashval;

	if (lookup(wp->string) == NULL) {
		hashval = hash(wp->string);
		wp->next = hashtab[hashval];
		hashtab[hashval] = wp;
	} else
		printf("Multiply defined %s.\n", wp->string);
}

void
parse(void)
{
	struct wlist *wp;
	int     n;
	int     flag;

	wordnumber = 0;		/* for cypher */
	for (n = 0; n <= wordcount; n++) {
		if ((wp = lookup(words[n])) == NULL) {
			wordvalue[n] = -1;
			wordtype[n] = -1;
		} else {
			wordvalue[n] = wp->value;
			wordtype[n] = wp->article;
		}
	}
	/* We never use adjectives, so yank them all; disambiguation
	 * code would need to go before this.
	 */
	for (n = 1; n < wordcount; n++)
		if (wordtype[n] == ADJS) {
			int i;
			for (i = n + 1; i <= wordcount; i++) {
				wordtype[i - 1] = wordtype[i];
				wordvalue[i - 1] = wordvalue[i];
				strlcpy(words[i - 1], words[i], WORDLEN);
			}
			wordcount--;
			n--;
		}
	/* Don't let a comma mean AND if followed by a verb. */
	for (n = 0; n < wordcount; n++)
		if (wordvalue[n] == AND && words[n][0] == ','
		    && wordtype[n + 1] == VERB) {
			wordvalue[n] = -1;
			wordtype[n] = -1;
		}
	/* Trim "AND AND" which can happen naturally at the end of a
	 * comma-delimited list.
	 */
	for (n = 1; n < wordcount; n++)
		if (wordvalue[n - 1] == AND && wordvalue[n] == AND) {
			int i;
			for (i = n + 1; i <= wordcount; i++) {
				wordtype[i - 1] = wordtype[i];
				wordvalue[i - 1] = wordvalue[i];
				strlcpy(words[i - 1], words[i], WORDLEN);
			}
			wordcount--;
		}

	/* If there is a sequence (NOUN | OBJECT) AND EVERYTHING
	 * then move all the EVERYTHINGs to the beginning, since that's where
	 * they're expected.  We can't get rid of the NOUNs and OBJECTs in
	 * case they aren't in EVERYTHING (i.e. not here or nonexistent).
	 */
	flag = 1;
	while (flag) {
		flag = 0;
		for (n = 1; n < wordcount; n++)
			if ((wordtype[n - 1] == NOUNS || wordtype[n - 1] == OBJECT) &&
			    wordvalue[n] == AND && wordvalue[n + 1] == EVERYTHING) {
				char tmpword[WORDLEN];
				wordvalue[n + 1] = wordvalue[n - 1];
				wordvalue[n - 1] = EVERYTHING;
				wordtype[n + 1] = wordtype[n - 1];
				wordtype[n - 1] = OBJECT;
				strlcpy(tmpword, words[n - 1], WORDLEN);
				strlcpy(words[n - 1], words[n + 1], WORDLEN);
				strlcpy(words[n + 1], tmpword, WORDLEN);
				flag = 1;
		}
		/* And trim EVERYTHING AND EVERYTHING */
		for (n = 1; n < wordcount; n++)
			if (wordvalue[n - 1] == EVERYTHING &&
			    wordvalue[n] == AND && wordvalue[n + 1] == EVERYTHING) {
				int i;
				for (i = n + 1; i < wordcount; i++) {
					wordtype[i - 1] = wordtype[i + 1];
					wordvalue[i - 1] = wordvalue[i + 1];
					strlcpy(words[i - 1], words[i + 1], WORDLEN);
				}
				wordcount--;
				wordcount--;
				flag = 1;
			}
	}
}
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.14 2007/11/24 12:59:28 jmc Exp $	*/
d32 3
@


1.14
log
@some spelling fixes from Martynas Venckus
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.13 2004/07/10 07:26:22 deraadt Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)parse.c	8.2 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: parse.c,v 1.13 2004/07/10 07:26:22 deraadt Exp $";
#endif
#endif /* not lint */
@


1.13
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.12 2003/06/03 03:01:38 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: parse.c,v 1.12 2003/06/03 03:01:38 millert Exp $";
d154 1
a154 1
	 * case they aren't in EVERYTHING (i.e. not here or nonexistant).
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.11 2002/02/16 21:27:09 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: parse.c,v 1.11 2002/02/16 21:27:09 millert Exp $";
d54 1
a54 1
wordinit()
d63 1
a63 2
hash(s)
	const char   *s;
d76 1
a76 2
lookup(s)
	const char   *s;
d87 1
a87 2
install(wp)
	struct wlist *wp;
d100 1
a100 1
parse()
@


1.11
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.10 2000/09/26 04:42:56 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: parse.c,v 1.10 2000/09/26 04:42:56 pjanzen Exp $";
@


1.10
log
@Improve handling of multiple commands on one line.  Tidy fight parser.
Handle "all" in one place (almost).  Add AUXVERB category and OBJ_PERSON/
OBJ_NONOBJ flags.  Most was discussed with jsm@@netbsd.org, and some is from
him.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.9 2000/09/24 21:55:26 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: parse.c,v 1.9 2000/09/24 21:55:26 pjanzen Exp $";
d51 3
a53 3
static int hash __P((const char *));
static void install __P((struct wlist *));
static struct wlist *lookup __P((const char *));
@


1.9
log
@numerous changes from jsm@@netbsd.org:
static where appropriate, add a few comments, format a bit better, and
deal with WEIGHT/CUMBER being zero (and not less).
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.8 2000/09/23 03:02:38 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: parse.c,v 1.8 2000/09/23 03:02:38 pjanzen Exp $";
d129 1
a129 1
			for (i = n + 1; i < wordcount; i++) {
d135 1
@


1.8
log
@drop adjectives in parse(), since they're never used.
tidy a little.  fix love() a bit.
From conversations with jsm@@netbsd.org:
Add objflags[] to deal with plurals and a/an usage.
Commas don't mean AND if followed by a verb.
Check for object presence before trying to lift or eat it.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.7 2000/09/17 21:28:33 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: parse.c,v 1.7 2000/09/17 21:28:33 pjanzen Exp $";
d47 10
d66 1
a66 1
int
d80 1
a80 1
struct wlist *
d92 1
a92 1
void
a122 7
	/* Don't let a comma mean AND if followed by a verb. */
	for (n = 0; n < wordcount; n++)
		if (wordvalue[n] == AND && words[n][0] == ','
		    && wordtype[n + 1] == VERB) {
			wordvalue[n] = -1;
			wordtype[n] = -1;
		}
d135 7
@


1.7
log
@Fewer segfaults ("take all and all", "wear wear"), better parsing
(e.g. disambiguation of "drop body").  Also, use "a" or "an" correctly,
don't overflow the words array, and don't kick items you're wearing.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.6 1999/09/25 20:30:46 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: parse.c,v 1.6 1999/09/25 20:30:46 pjanzen Exp $";
d113 20
d134 1
a134 1
	 * comma-delimited list
d139 1
a139 1
			for (i = n + 1; i < wordcount; i++) {
@


1.6
log
@Merge 4.4BSD-Lite2 and NetBSD, including improved save file handling of
jsm28@@cam.ac.uk.  Rename setbit() family of macros so as not to conflict
with <sys/param.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.5 1998/09/13 01:30:33 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: parse.c,v 1.5 1998/09/13 01:30:33 pjanzen Exp $";
d101 1
d112 50
@


1.5
log
@NetBSD merge, numerous patches from jsm28@@cam.ac.uk, spelling fixes, and
correct gid revoke.
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.4 1997/08/24 21:55:12 deraadt Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)parse.c	8.1 (Berkeley) 5/31/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d58 1
a58 1
	char   *s;
d72 1
a72 1
	char   *s;
@


1.4
log
@various linux-based patches; from linux people; sent by jsm@@octomino.demon.co.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.3 1997/07/23 20:04:47 kstailey Exp $	*/
d41 1
a41 1
static char rcsid[] = "$NetBSD: parse.c,v 1.3 1995/03/21 15:07:48 cgd Exp $";
a46 4
int hash __P((char *));
void install __P((struct wlist *));
struct wlist *lookup __P((char *));

d50 1
a50 1
	register struct wlist *w;
d58 1
a58 1
	register char *s;
d60 1
a60 1
	register hashval = 0;
d72 1
a72 1
	char *s;
d74 1
a74 1
	register struct wlist *wp;
d84 1
a84 1
	register struct wlist *wp;
d86 1
a86 1
	int hashval;
d99 2
a100 2
	register struct wlist *wp;
	register n;
d102 1
a102 1
	wordnumber = 0;		  /* for cypher */
d108 2
a109 2
			wordvalue[n] = wp -> value;
			wordtype[n] = wp -> article;
@


1.3
log
@tabify
@
text
@d1 1
a1 1
/*	$OpenBSD: parse.c,v 1.2 1997/06/30 19:56:39 kstailey Exp $	*/
d45 1
a45 1
#include "externs.h"
d47 5
d60 1
d86 1
d100 1
@


1.2
log
@tag
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d98 1
a98 1
	wordnumber = 0;           /* for cypher */
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
