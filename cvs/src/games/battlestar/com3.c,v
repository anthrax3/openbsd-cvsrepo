head	1.14;
access;
symbols
	OPENBSD_6_2:1.14.0.10
	OPENBSD_6_2_BASE:1.14
	OPENBSD_6_1:1.14.0.8
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.4
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.13.0.26
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.18
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.22
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.20
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.24
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.20
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.18
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.16
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.14
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.12
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.10
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.8
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.6
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.10.0.12
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.10
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.10.0.8
	OPENBSD_3_1_BASE:1.10
	OPENBSD_3_0:1.10.0.6
	OPENBSD_3_0_BASE:1.10
	OPENBSD_2_9:1.10.0.4
	OPENBSD_2_9_BASE:1.10
	OPENBSD_2_8:1.10.0.2
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.12.31.17.51.19;	author mestre;	state Exp;
branches;
next	1.13;
commitid	GSzV0GYeNlCgMbj0;

1.13
date	2009.10.27.23.59.23;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.10.07.26.22;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.06.03.03.01.38;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.26.04.42.55;	author pjanzen;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.24.21.55.23;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	2000.09.23.03.02.35;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	2000.07.03.05.23.44;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	99.09.25.20.30.45;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	98.09.13.01.30.30;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	97.12.16.07.54.22;	author angelos;	state Exp;
branches;
next	1.3;

1.3
date	97.08.24.21.55.02;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.06.30.19.56.30;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Include only needed header files per each source file

OK tb@@
@
text
@/*	$OpenBSD: com3.c,v 1.13 2009/10/27 23:59:23 deraadt Exp $	*/
/*	$NetBSD: com3.c,v 1.3 1995/03/21 15:07:00 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>

#include "extern.h"

void
dig(void)
{
	if (TestBit(inven, SHOVEL)) {
		puts("OK");
		ourtime++;
		switch (position) {
		case 144:	/* copse near beach */
			if (!notes[DUG]) {
				SetBit(location[position].objects, DEADWOOD);
				SetBit(location[position].objects, COMPASS);
				SetBit(location[position].objects, KNIFE);
				SetBit(location[position].objects, MACE);
				notes[DUG] = 1;
			}
			break;

		default:
			puts("Nothing happens.");
		}
	} else	
		puts("You don't have a shovel.");
}

int
jump(void)
{
	int     n;

	switch (position) {
	default:
		puts("Nothing happens.");
		return (-1);

	case 242:
		position = 133;
		break;
	case 214:
	case 215:
	case 162:
	case 159:
		position = 145;
		break;
	case 232:
		position = FINAL;
		break;
	case 3:
		position = 1;
		break;
	case 172:
		position = 201;
	}
	puts("Ahhhhhhh...");
	injuries[12] = injuries[8] = injuries[7] = injuries[6] = 1;
	for (n = 0; n < NUMOFOBJECTS; n++)
		if (TestBit(inven, n)) {
			ClearBit(inven, n);
			SetBit(location[position].objects, n);
		}
	carrying = 0;
	encumber = 0;
	return (0);
}

void
bury(void)
{
	int     value;

	if (TestBit(inven, SHOVEL)) {
		while (wordtype[++wordnumber] != OBJECT && wordtype[wordnumber] != NOUNS && wordnumber <= wordcount)
			;
		value = wordvalue[wordnumber];
		if (wordtype[wordnumber] == NOUNS && (TestBit(location[position].objects, value) || value == BODY))
			switch (value) {
			case BODY:
				wordtype[wordnumber] = OBJECT;
				if (TestBit(inven, MAID) || TestBit(location[position].objects, MAID))
					value = MAID;
				if (TestBit(inven, DEADWOOD) || TestBit(location[position].objects, DEADWOOD))
					value = DEADWOOD;
				if (TestBit(inven, DEADGOD) || TestBit(location[position].objects, DEADGOD))
					value = DEADGOD;
				if (TestBit(inven, DEADTIME) || TestBit(location[position].objects, DEADTIME))
					value = DEADTIME;
				if (TestBit(inven, DEADNATIVE) || TestBit(location[position].objects, DEADNATIVE))
					value = DEADNATIVE;
				break;

			case NATIVE:
			case NORMGOD:
				puts("She screams as you wrestle her into the hole.");
			case TIMER:
				power += 7;
				ego -= 10;
			case AMULET:
			case MEDALION:
			case TALISMAN:
				wordtype[wordnumber] = OBJECT;
				break;

			default:
				puts("Wha..?");
			}
		if (wordtype[wordnumber] == OBJECT && position > 88 && (TestBit(inven, value) || TestBit(location[position].objects, value))) {
			puts("Buried.");
			if (TestBit(inven, value)) {
				ClearBit(inven, value);
				carrying -= objwt[value];
				encumber -= objcumber[value];
			}
			ClearBit(location[position].objects, value);
			switch (value) {
			case MAID:
			case DEADWOOD:
			case DEADNATIVE:
			case DEADTIME:
			case DEADGOD:
				ego += 2;
				printf("The %s should rest easier now.\n", objsht[value]);
			}
		} else
			puts("It doesn't seem to work.");
	} else
		puts("You aren't holding a shovel.");
}

void
drink(void)
{
	int     n;

	if (TestBit(inven, POTION)) {
		puts("The cool liquid runs down your throat but turns to fire and you choke.");
		puts("The heat reaches your limbs and tingles your spirit.  You feel like falling");
		puts("asleep.");
		ClearBit(inven, POTION);
		WEIGHT = MAXWEIGHT;
		CUMBER = MAXCUMBER;
		for (n = 0; n < NUMOFINJURIES; n++)
			injuries[n] = 0;
		ourtime++;
		zzz();
	} else
		puts("I'm not thirsty.");
}

int
shoot(void)
{
	int     firstnumber, value;

	firstnumber = wordnumber;
	if (!TestBit(inven, LASER))
		puts("You aren't holding a blaster.");
	else {
		wordnumber++;
		while(wordnumber <= wordcount && wordtype[wordnumber] == OBJECT) {
			value = wordvalue[wordnumber];
			printf("%s:\n", objsht[value]);
			if (TestBit(location[position].objects, value)) {
				ClearBit(location[position].objects, value);
				ourtime++;
				printf("The %s explode%s\n", objsht[value],
				    (IS_PLURAL(value) ? "." : "s."));
				if (value == BOMB)
					die(0);
			} else
				printf("I don't see any %s around here.\n", objsht[value]);
			if (wordnumber < wordcount - 1 && wordvalue[++wordnumber] == AND)
				wordnumber++;
			else
				return (firstnumber);
		}
		/* special cases with their own return()'s */

		if (wordnumber <= wordcount && wordtype[wordnumber] == NOUNS) {
			ourtime++;
			switch (wordvalue[wordnumber]) {

			case DOOR:
				switch(position) {
				case 189:
				case 231:
					puts("The door is unhinged.");
					location[189].north = 231;
					location[231].south = 189;
					whichway(location[position]);
					break;
				case 30:
					puts("The wooden door splinters.");
					location[30].west = 25;
					whichway(location[position]);
					break;
				case 31:
					puts("The laser blast has no effect on the door.");
					break;
				case 20:
					puts("The blast hits the door and it explodes into flame.  The magnesium burns");
					puts("so rapidly that we have no chance to escape.");
					die(0);
				default:
					puts("Nothing happens.");
				}
				break;

			case NORMGOD:
			case BATHGOD:
				if (TestBit(location[position].objects, BATHGOD)) {
					puts("The goddess is hit in the chest and splashes back against the rocks.");
					puts("Dark blood oozes from the charred blast hole.  Her naked body floats in the");
					puts("pools and then off downstream.");
					ClearBit(location[position].objects, BATHGOD);
					SetBit(location[180].objects, DEADGOD);
					power += 5;
					ego -= 10;
					notes[JINXED]++;
				} else
					if (TestBit(location[position].objects, NORMGOD)) {
						puts("The blast catches the goddess in the stomach, knocking her to the ground.");
						puts("She writhes in the dirt as the agony of death taunts her.");
						puts("She has stopped moving.");
						ClearBit(location[position].objects, NORMGOD);
						SetBit(location[position].objects, DEADGOD);
						power += 5;
						ego -= 10;
						notes[JINXED]++;
						if (wintime)
							live();
						break;
					} else
						puts("I don't see any goddess around here.");
				break;

			case TIMER:
				if (TestBit(location[position].objects, TIMER)) {
					puts("The old man slumps over the bar.");
					power++;
					ego -= 2;
					notes[JINXED]++;
					ClearBit(location[position].objects, TIMER);
					SetBit(location[position].objects, DEADTIME);
				} else
					puts("What old-timer?");
				break;
			case MAN:
				if (TestBit(location[position].objects, MAN)) {
					puts("The man falls to the ground with blood pouring all over his white suit.");
					puts("Your fantasy is over.");
					die(0);
				} else
					puts("What man?");
				break;
			case NATIVE:
				if (TestBit(location[position].objects, NATIVE)) {
					puts("The girl is blown backwards several feet and lies in a pool of blood.");
					ClearBit(location[position].objects, NATIVE);
					SetBit(location[position].objects, DEADNATIVE);
					power += 5;
					ego -= 2;
					notes[JINXED]++;
				} else
					puts("There is no girl here.");
				break;
			case -1:
				puts("Shoot what?");
				break;

			default:
				printf("You can't shoot the %s.\n", objsht[wordvalue[wordnumber]]);
			}
		} else
			puts("You must be a looney.");
	}
	return (firstnumber);
}
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: com3.c,v 1.12 2004/07/10 07:26:22 deraadt Exp $	*/
d32 2
@


1.12
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: com3.c,v 1.11 2003/06/03 03:01:38 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)com3.c	8.2 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: com3.c,v 1.11 2003/06/03 03:01:38 millert Exp $";
#endif
#endif /* not lint */
@


1.11
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: com3.c,v 1.10 2000/09/26 04:42:55 pjanzen Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: com3.c,v 1.10 2000/09/26 04:42:55 pjanzen Exp $";
d44 1
a44 1
dig()
d68 1
a68 1
jump()
d108 1
a108 1
bury()
d171 1
a171 1
drink()
d191 1
a191 1
shoot()
@


1.10
log
@Improve handling of multiple commands on one line.  Tidy fight parser.
Handle "all" in one place (almost).  Add AUXVERB category and OBJ_PERSON/
OBJ_NONOBJ flags.  Most was discussed with jsm@@netbsd.org, and some is from
him.
@
text
@d1 1
a1 1
/*	$OpenBSD: com3.c,v 1.9 2000/09/24 21:55:23 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: com3.c,v 1.9 2000/09/24 21:55:23 pjanzen Exp $";
@


1.9
log
@numerous changes from jsm@@netbsd.org:
static where appropriate, add a few comments, format a bit better, and
deal with WEIGHT/CUMBER being zero (and not less).
@
text
@d1 1
a1 1
/*	$OpenBSD: com3.c,v 1.8 2000/09/23 03:02:35 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com3.c,v 1.8 2000/09/23 03:02:35 pjanzen Exp $";
d211 1
a211 1
				    (IsPluralObject(value) ? "." : "s."));
d254 1
@


1.8
log
@drop adjectives in parse(), since they're never used.
tidy a little.  fix love() a bit.
From conversations with jsm@@netbsd.org:
Add objflags[] to deal with plurals and a/an usage.
Commas don't mean AND if followed by a verb.
Check for object presence before trying to lift or eat it.
@
text
@d1 1
a1 1
/*	$OpenBSD: com3.c,v 1.7 2000/07/03 05:23:44 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com3.c,v 1.7 2000/07/03 05:23:44 pjanzen Exp $";
d117 2
a118 1
		while (wordtype[++wordnumber] != OBJECT && wordtype[wordnumber] != NOUNS && wordnumber <= wordcount);
@


1.7
log
@Finding bugs in battlestar is like shooting fish in a barrel.
	Don't overflow beenthere[].  Add "verbose" option.
	Fix spelling (including embedded hyphens in descriptions) and grammar.
	"Kill" will now use the laser if you have no cutting implements.
	Formatting.
	You can do more things to the bathing goddess.
	A little less guess-the-word.  Occasionally better error messages,
particularly with "all" when nothing applies.
	"kick door" no longer segfaults.  Nor does "kill door".
More bugs remain...
@
text
@d1 1
a1 1
/*	$OpenBSD: com3.c,v 1.6 1999/09/25 20:30:45 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com3.c,v 1.6 1999/09/25 20:30:45 pjanzen Exp $";
d91 1
a91 1
		position = 275;
d117 1
a117 1
		while (wordtype[++wordnumber] != OBJECT && wordtype[wordnumber] != NOUNS && wordnumber < wordcount);
a196 1
	int     n;
d202 1
a202 2
		while(wordtype[++wordnumber] == ADJS)
			;
a205 1
			for (n=0; objsht[value][n]; n++);
d209 2
a210 1
				printf("The %s explode%s\n", objsht[value], (objsht[value][n-1]=='s' ? (objsht[value][n-2]=='s' ? "s." : ".") : "s."));
d214 1
a214 1
				printf("I dont see any %s around here.\n", objsht[value]);
@


1.6
log
@Merge 4.4BSD-Lite2 and NetBSD, including improved save file handling of
jsm28@@cam.ac.uk.  Rename setbit() family of macros so as not to conflict
with <sys/param.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: com3.c,v 1.5 1998/09/13 01:30:30 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com3.c,v 1.5 1998/09/13 01:30:30 pjanzen Exp $";
d203 2
a204 1
		while(wordtype[++wordnumber] == ADJS);
@


1.5
log
@NetBSD merge, numerous patches from jsm28@@cam.ac.uk, spelling fixes, and
correct gid revoke.
@
text
@d1 1
a1 1
/*	$OpenBSD: com3.c,v 1.4 1997/12/16 07:54:22 angelos Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)com3.c	8.1 (Berkeley) 5/31/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d50 1
a50 1
	if (testbit(inven, SHOVEL)) {
d56 4
a59 4
				setbit(location[position].objects, DEADWOOD);
				setbit(location[position].objects, COMPASS);
				setbit(location[position].objects, KNIFE);
				setbit(location[position].objects, MACE);
d102 3
a104 3
		if (testbit(inven, n)) {
			clearbit(inven, n);
			setbit(location[position].objects, n);
d116 1
a116 1
	if (testbit(inven, SHOVEL)) {
d119 1
a119 1
		if (wordtype[wordnumber] == NOUNS && (testbit(location[position].objects, value) || value == BODY))
d123 1
a123 1
				if (testbit(inven, MAID) || testbit(location[position].objects, MAID))
d125 1
a125 1
				if (testbit(inven, DEADWOOD) || testbit(location[position].objects, DEADWOOD))
d127 1
a127 1
				if (testbit(inven, DEADGOD) || testbit(location[position].objects, DEADGOD))
d129 1
a129 1
				if (testbit(inven, DEADTIME) || testbit(location[position].objects, DEADTIME))
d131 1
a131 1
				if (testbit(inven, DEADNATIVE) || testbit(location[position].objects, DEADNATIVE))
d150 1
a150 1
		if (wordtype[wordnumber] == OBJECT && position > 88 && (testbit(inven, value) || testbit(location[position].objects, value))) {
d152 2
a153 2
			if (testbit(inven, value)) {
				clearbit(inven, value);
d157 1
a157 1
			clearbit(location[position].objects, value);
d178 1
a178 1
	if (testbit(inven, POTION)) {
d182 1
a182 1
		clearbit(inven, POTION);
d200 1
a200 1
	if (!testbit(inven, LASER))
d208 2
a209 2
			if (testbit(location[position].objects, value)) {
				clearbit(location[position].objects, value);
d254 1
a254 1
				if (testbit(location[position].objects, BATHGOD)) {
d258 2
a259 2
					clearbit(location[position].objects, BATHGOD);
					setbit(location[180].objects, DEADGOD);
d264 1
a264 1
					if (testbit(location[position].objects, NORMGOD)) {
d268 2
a269 2
						clearbit(location[position].objects, NORMGOD);
						setbit(location[position].objects, DEADGOD);
d281 1
a281 1
				if (testbit(location[position].objects, TIMER)) {
d286 2
a287 2
					clearbit(location[position].objects, TIMER);
					setbit(location[position].objects, DEADTIME);
d292 1
a292 1
				if (testbit(location[position].objects, MAN)) {
d300 1
a300 1
				if (testbit(location[position].objects, NATIVE)) {
d302 2
a303 2
					clearbit(location[position].objects, NATIVE);
					setbit(location[position].objects, DEADNATIVE);
@


1.4
log
@Fix annoying warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: com3.c,v 1.3 1997/08/24 21:55:02 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$NetBSD: com3.c,v 1.3 1995/03/21 15:07:00 cgd Exp $";
d50 1
a50 1
	if (testbit(inven,SHOVEL)){
d52 11
a62 11
		btime++;
		switch(position){
			case 144:		/* copse near beach */
				if (!notes[DUG]){
					setbit(location[position].objects,DEADWOOD);
					setbit(location[position].objects,COMPASS);
					setbit(location[position].objects,KNIFE);
					setbit(location[position].objects,MACE);
					notes[DUG] = 1;
				}
				break;
d64 2
a65 2
			default:
				puts("Nothing happens.");
d67 1
a67 2
	}
	else	
d74 1
a74 6
	register int n;

	switch(position){
		default:
			puts("Nothing happens.");
			return(-1);
d76 22
a97 17
		case 242:
			position = 133;
			break;
		case 214:
		case 215:
		case 162:
		case 159:
			position = 145;
			break;
		case 232:
			position = 275;
			break;
		case 3:
			position = 1;
			break;
		case 172:
			position = 201;
d101 4
a104 4
	for (n=0; n < NUMOFOBJECTS; n++)
		if (testbit(inven,n)){
			clearbit(inven,n);
			setbit(location[position].objects,n);
d108 1
a108 1
	return(0);
d114 1
a114 1
	int value;
d116 2
a117 2
	if (testbit(inven,SHOVEL)){
		while(wordtype[++wordnumber] != OBJECT && wordtype[wordnumber] != NOUNS && wordnumber < wordcount);
d119 15
a133 15
		if (wordtype[wordnumber] == NOUNS && (testbit(location[position].objects,value) || value == BODY))
			switch(value){
				case BODY:
					wordtype[wordnumber] = OBJECT;
					if (testbit(inven,MAID) || testbit(location[position].objects,MAID))
						value = MAID;
					if (testbit(inven,DEADWOOD) || testbit(location[position].objects,DEADWOOD))
						value = DEADWOOD;
					if (testbit(inven,DEADGOD) || testbit(location[position].objects,DEADGOD))
						value = DEADGOD;
					if (testbit(inven,DEADTIME) || testbit(location[position].objects,DEADTIME))
						value = DEADTIME;
					if (testbit(inven,DEADNATIVE) || testbit(location[position].objects,DEADNATIVE))
						value = DEADNATIVE;
					break;
d135 11
a145 11
				case NATIVE:
				case NORMGOD:
					puts("She screams as you wrestle her into the hole.");
				case TIMER:
					power += 7;
					ego -= 10;
				case AMULET:
				case MEDALION:
				case TALISMAN:
					wordtype[wordnumber] = OBJECT;
					break;
d147 2
a148 2
				default:
					puts("Wha..?");
d150 1
a150 1
		if (wordtype[wordnumber] == OBJECT && position > 88 && (testbit(inven,value) || testbit(location[position].objects,value))){
d152 2
a153 2
			if (testbit(inven,value)){
				clearbit(inven,value);
d157 9
a165 9
			clearbit(location[position].objects,value);
			switch(value){
				case MAID:
				case DEADWOOD:
				case DEADNATIVE:
				case DEADTIME:
				case DEADGOD:
					ego += 2;
					printf("The %s should rest easier now.\n",objsht[value]);
d167 1
a167 2
		}
		else
d169 1
a169 2
	}
	else
d176 1
a176 1
	register int n;
d178 1
a178 1
	if (testbit(inven,POTION)){
d185 1
a185 1
		for (n=0; n < NUMOFINJURIES; n++)
d187 1
a187 1
		btime++;
d189 1
a189 2
	}
	else
d196 2
a197 2
	int firstnumber, value;
	register int n;
d199 2
a200 2
	firstnumber = wordcount + 2;
	if (!testbit(inven,LASER))
a202 1
		firstnumber = wordnumber;
d204 1
a204 1
		while(wordnumber<=wordcount && wordtype[wordnumber] == OBJECT){
d208 4
a211 4
			if (testbit(location[position].objects,value)){
				clearbit(location[position].objects,value);
				btime++;
				printf("The %s explode%s\n",objsht[value],(objsht[value][n-1]=='s' ? (objsht[value][n-2]=='s' ? "s." : ".") : "s."));
d214 1
a214 2
			}
			else
d219 1
a219 1
				return(firstnumber);
d221 1
a221 1
			    /* special cases with their own return()'s */
d223 12
a234 28
		if (wordnumber <= wordcount && wordtype[wordnumber] == NOUNS){
			btime++;
			switch(wordvalue[wordnumber]){
			
				case DOOR:
					switch(position){
						case 189:
						case 231:
							puts("The door is unhinged.");
							location[189].north = 231;
							location[231].south = 189;
							whichway(location[position]);
							break;
						case 30:
							puts("The wooden door splinters.");
							location[30].west = 25;
							whichway(location[position]);
							break;
						case 31:
							puts("The laser blast has no effect on the door.");
							break;
						case 20:
							puts("The blast hits the door and it explodes into flame.  The magnesium burns");
							puts("so rapidly that we have no chance to escape.");
							die(0);
						default:
							puts("Nothing happens.");
					}
d236 16
d253 12
a264 11
				case NORMGOD:
					if (testbit(location[position].objects,BATHGOD)){
						puts("The goddess is hit in the chest and splashes back against the rocks.");
						puts("Dark blood oozes from the charred blast hole.  Her naked body floats in the");
						puts("pools and then off downstream.");
						clearbit(location[position].objects,BATHGOD);
						setbit(location[180].objects,DEADGOD);
						power += 5;
						ego -= 10;
						notes[JINXED]++;
					} else if (testbit(location[position].objects,NORMGOD)){
d268 2
a269 2
						clearbit(location[position].objects,NORMGOD);
						setbit(location[position].objects,DEADGOD);
d278 1
a278 1
					break;
d280 33
a312 32
				case TIMER:
					if (testbit(location[position].objects,TIMER)){
						puts("The old man slumps over the bar.");
						power++;
						ego -= 2;
						notes[JINXED]++;
						clearbit(location[position].objects,TIMER);
						setbit(location[position].objects,DEADTIME);
					}
					else puts("What old timer?");
					break;
				case MAN:
					if (testbit(location[position].objects,MAN)){
						puts("The man falls to the ground with blood pouring all over his white suit.");
						puts("Your fantasy is over.");
						die(0);
					}
					else puts("What man?");
					break;
				case NATIVE:
					if (testbit(location[position].objects,NATIVE)){
						puts("The girl is blown backwards several feet and lies in a pool of blood.");
						clearbit(location[position].objects,NATIVE);
						setbit(location[position].objects,DEADNATIVE);
						power += 5;
						ego -= 2;
						notes[JINXED]++;
					} else puts("There is no girl here.");
					break;
				case -1:
					puts("Shoot what?");
					break;
d314 2
a315 2
				default:
					printf("You can't shoot the %s.\n",objsht[wordvalue[wordnumber]]);
d317 2
a318 2
		}
		else puts("You must be a looney.");
d320 1
a320 1
	return(firstnumber);
@


1.3
log
@various linux-based patches; from linux people; sent by jsm@@octomino.demon.co.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: com3.c,v 1.2 1997/06/30 19:56:30 kstailey Exp $	*/
d218 1
a218 1
					die();
d253 1
a253 1
							die();
d300 1
a300 1
						die();
@


1.2
log
@tag
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
#include "externs.h"
d47 1
d52 1
a52 1
		time++;
d72 1
d112 1
d176 1
d190 1
a190 1
		time++;
d197 1
d203 1
d215 1
a215 1
				time++;
d230 1
a230 1
			time++;
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
