head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.8
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.4
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.18.0.2
	OPENBSD_5_9_BASE:1.18
	OPENBSD_5_8:1.17.0.26
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.17.0.18
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.17.0.22
	OPENBSD_5_6_BASE:1.17
	OPENBSD_5_5:1.17.0.20
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.16
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.14
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.12
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.10
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.15.0.24
	OPENBSD_4_6_BASE:1.15
	OPENBSD_4_5:1.15.0.20
	OPENBSD_4_5_BASE:1.15
	OPENBSD_4_4:1.15.0.18
	OPENBSD_4_4_BASE:1.15
	OPENBSD_4_3:1.15.0.16
	OPENBSD_4_3_BASE:1.15
	OPENBSD_4_2:1.15.0.14
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.12
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.10
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.8
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.6
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.4
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.15.0.2
	OPENBSD_3_6_BASE:1.15
	OPENBSD_3_5:1.14.0.4
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.14.0.2
	OPENBSD_3_4_BASE:1.14
	OPENBSD_3_3:1.12.0.12
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.10
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.12.0.8
	OPENBSD_3_1_BASE:1.12
	OPENBSD_3_0:1.12.0.6
	OPENBSD_3_0_BASE:1.12
	OPENBSD_2_9:1.12.0.4
	OPENBSD_2_9_BASE:1.12
	OPENBSD_2_8:1.12.0.2
	OPENBSD_2_8_BASE:1.12
	OPENBSD_2_7:1.7.0.4
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.2
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.2
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2015.12.31.17.51.19;	author mestre;	state Exp;
branches;
next	1.17;
commitid	GSzV0GYeNlCgMbj0;

1.17
date	2009.12.10.23.53.03;	author beck;	state Exp;
branches;
next	1.16;

1.16
date	2009.10.27.23.59.23;	author deraadt;	state Exp;
branches;
next	1.15;

1.15
date	2004.07.10.07.26.22;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.03.03.01.38;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.19.08.49.09;	author pjanzen;	state Exp;
branches;
next	1.12;

1.12
date	2000.09.26.04.42.55;	author pjanzen;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.24.21.55.22;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.23.03.02.35;	author pjanzen;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.17.21.28.32;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	2000.07.03.05.23.44;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	99.09.25.20.30.45;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	98.09.13.01.30.30;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	97.12.16.07.54.22;	author angelos;	state Exp;
branches;
next	1.4;

1.4
date	97.09.01.18.13.10;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.08.24.21.55.02;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	97.06.30.19.56.29;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.42;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.42;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Include only needed header files per each source file

OK tb@@
@
text
@/*	$OpenBSD: com2.c,v 1.17 2009/12/10 23:53:03 beck Exp $	*/
/*	$NetBSD: com2.c,v 1.3 1995/03/21 15:06:55 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>
#include <stdlib.h>

#include "extern.h"

int
wearit(void)
{				/* synonyms = {sheathe, sheath} */
	int     firstnumber, value;

	firstnumber = wordnumber;
	wordnumber++;
	while (wordnumber <= wordcount && (wordtype[wordnumber] == OBJECT ||
	    (wordtype[wordnumber] == NOUNS && wordvalue[wordnumber] != DOOR))) {
		value = wordvalue[wordnumber];
		if (value >= 0 && objsht[value] == NULL)
			break;
		switch (value) {

		case -1:
			puts("Wear what?");
			return (firstnumber);

		default:
			printf("You can't wear %s%s!\n",
			    A_OR_AN_OR_BLANK(value), objsht[value]);
			return (firstnumber);

		case KNIFE:
	/*	case SHIRT:	*/
		case ROBE:
		case LEVIS:	/* wearable things */
		case SWORD:
		case MAIL:
		case HELM:
		case SHOES:
		case PAJAMAS:
		case COMPASS:
		case LASER:
		case AMULET:
		case TALISMAN:
		case MEDALION:
		case ROPE:
		case RING:
		case BRACELET:
		case GRENADE:

			if (TestBit(inven, value)) {
				ClearBit(inven, value);
				SetBit(wear, value);
				carrying -= objwt[value];
				encumber -= objcumber[value];
				ourtime++;
				printf("You are now wearing %s%s.\n",
				    A_OR_AN_OR_THE(value), objsht[value]);
			} else
				if (TestBit(wear, value))
					printf("You are already wearing the %s.\n",
					    objsht[value]);
				else
					printf("You aren't holding the %s.\n",
					    objsht[value]);
			if (wordnumber < wordcount - 1 &&
			    wordvalue[++wordnumber] == AND)
				wordnumber++;
			else
				return (firstnumber);
		}		/* end switch */
	}			/* end while */
	puts("Don't be ridiculous.");
	return (firstnumber);
}

int
put(void)
{				/* synonyms = {buckle, strap, tie} */
	if (inc_wordnumber(words[wordnumber], "what"))
		return(-1);
	if (wordvalue[wordnumber] == ON) {
		wordvalue[wordnumber] = PUTON;
		wordtype[wordnumber] = VERB;
		return (cypher() - 1);
	}
	if (wordvalue[wordnumber] == DOWN) {
		wordvalue[wordnumber] = DROP;
		wordtype[wordnumber] = VERB;
		return (cypher() - 1);
	}
	puts("I don't understand what you want to put.");
	return (-1);
}

int
draw(void)
{				/* synonyms = {pull, carry} */
	return (take(wear));
}

int
use(void)
{
	if (inc_wordnumber(words[wordnumber], "what"))
		return(-1);
	if (wordvalue[wordnumber] == AMULET && TestBit(inven, AMULET) &&
	    position != FINAL) {
		puts("The amulet begins to glow.");
		if (TestBit(inven, MEDALION)) {
			puts("The medallion comes to life too.");
			if (position == 114) {
				location[position].down = 160;
				whichway(location[position]);
				puts("The waves subside and it is possible to descend to the sea cave now.");
				ourtime++;
				wordnumber++;
				return (-1);
			}
		}
		puts("A light mist falls over your eyes and the sound of purling water trickles in");
		puts("your ears.   When the mist lifts you are standing beside a cool stream.");
		if (position == 229)
			position = 224;
		else
			position = 229;
		ourtime++;
		notes[CANTSEE] = 0;
		wordnumber++;
		return (0);
	}
	else if (position == FINAL)
		puts("The amulet won't work in here.");
	else if (wordvalue[wordnumber] == COMPASS && TestBit(inven, COMPASS))
		printf("Your compass points %s.\n", truedirec(NORTH,'-'));
	else if (wordvalue[wordnumber] == COMPASS)
		puts("You aren't holding the compass.");
	else if (wordvalue[wordnumber] == AMULET)
		puts("You aren't holding the amulet.");
	else
		puts("There is no apparent use.");
	wordnumber++;
	return (-1);
}

void
murder(void)
{
	int     n;

	if (inc_wordnumber(words[wordnumber], "whom"))
		return;
	for (n = 0; n < NUMOFOBJECTS && !((n == SWORD || n == KNIFE || n == TWO_HANDED || n == MACE || n == CLEAVER || n == BROAD || n == CHAIN || n == SHOVEL || n == HALBERD) && TestBit(inven, n)); n++)
		;
	if (n == NUMOFOBJECTS) {
		if (TestBit(inven, LASER)) {
			printf("Your laser should do the trick.\n");
			switch(wordvalue[wordnumber]) {
			case NORMGOD:
			case TIMER:
			case NATIVE:
			case MAN:
				wordvalue[--wordnumber] = SHOOT;
				cypher();
				break;
			case -1:
				puts("Kill what?");
				break;
			default:
				if (wordtype[wordnumber] != OBJECT ||
				    wordvalue[wordnumber] == EVERYTHING)
					puts("You can't kill that!");
				else
					printf("You can't kill %s%s!\n",
					    A_OR_AN_OR_BLANK(wordvalue[wordnumber]),
					    objsht[wordvalue[wordnumber]]);
				break;
			}
		} else
			puts("You don't have suitable weapons to kill.");
	} else {
		printf("Your %s should do the trick.\n", objsht[n]);
		switch (wordvalue[wordnumber]) {

		case NORMGOD:
			if (TestBit(location[position].objects, BATHGOD)) {
				puts("The goddess's head slices off.  Her corpse floats in the water.");
				ClearBit(location[position].objects, BATHGOD);
				SetBit(location[position].objects, DEADGOD);
				power += 5;
				notes[JINXED]++;
			} else
				if (TestBit(location[position].objects, NORMGOD)) {
					puts("The goddess pleads but you strike her mercilessly.  Her broken body lies in a\npool of blood.");
					ClearBit(location[position].objects, NORMGOD);
					SetBit(location[position].objects, DEADGOD);
					power += 5;
					notes[JINXED]++;
					if (wintime)
						live();
				} else
					puts("I don't see her anywhere.");
			break;
		case TIMER:
			if (TestBit(location[position].objects, TIMER)) {
				puts("The old man offers no resistance.");
				ClearBit(location[position].objects, TIMER);
				SetBit(location[position].objects, DEADTIME);
				power++;
				notes[JINXED]++;
			} else
				puts("Who?");
			break;
		case NATIVE:
			if (TestBit(location[position].objects, NATIVE)) {
				puts("The girl screams as you cut her body to shreds.  She is dead.");
				ClearBit(location[position].objects, NATIVE);
				SetBit(location[position].objects, DEADNATIVE);
				power += 5;
				notes[JINXED]++;
			} else
				puts("What girl?");
			break;
		case MAN:
			if (TestBit(location[position].objects, MAN)) {
				puts("You strike him to the ground, and he coughs up blood.");
				puts("Your fantasy is over.");
				die(0);
			}
		case -1:
			puts("Kill what?");
			break;

		default:
			if (wordtype[wordnumber] != OBJECT ||
			    wordvalue[wordnumber] == EVERYTHING)
				puts("You can't kill that!");
			else
				printf("You can't kill the %s!\n",
				    objsht[wordvalue[wordnumber]]);
		}
	}
	wordnumber++;
}

void
ravage(void)
{
	if (inc_wordnumber(words[wordnumber], "whom"))
		return;
	if (wordtype[wordnumber] == NOUNS && (TestBit(location[position].objects, wordvalue[wordnumber])
	    || (wordvalue[wordnumber] == NORMGOD && TestBit(location[position].objects, BATHGOD)))) {
		ourtime++;
		switch (wordvalue[wordnumber]) {
		case NORMGOD:
			puts("You attack the goddess, and she screams as you beat her.  She falls down");
			if (TestBit(location[position].objects, BATHGOD))
				puts("crying and tries to cover her nakedness.");
			else
				puts("crying and tries to hold her torn and bloodied dress around her.");
			power += 5;
			pleasure += 8;
			ego -= 10;
			wordnumber--;
			godready = -30000;
			murder();
			win = -30000;
			break;
		case NATIVE:
			puts("The girl tries to run, but you catch her and throw her down.  Her face is");
			puts("bleeding, and she screams as you tear off her clothes.");
			power += 3;
			pleasure += 5;
			ego -= 10;
			wordnumber--;
			murder();
			if (rnd(100) < 50) {
				puts("Her screams have attracted attention.  I think we are surrounded.");
				SetBit(location[ahead].objects, WOODSMAN);
				SetBit(location[ahead].objects, DEADWOOD);
				SetBit(location[ahead].objects, MALLET);
				SetBit(location[back].objects, WOODSMAN);
				SetBit(location[back].objects, DEADWOOD);
				SetBit(location[back].objects, MALLET);
				SetBit(location[left].objects, WOODSMAN);
				SetBit(location[left].objects, DEADWOOD);
				SetBit(location[left].objects, MALLET);
				SetBit(location[right].objects, WOODSMAN);
				SetBit(location[right].objects, DEADWOOD);
				SetBit(location[right].objects, MALLET);
			}
			break;
		default:
			puts("You are perverted.");
			wordnumber++;
		}
	} else {
		printf("%s:  Who?\n", words[wordnumber]);
		wordnumber++;
	}
}

int
follow(void)
{
	if (followfight == ourtime) {
		puts("The Dark Lord leaps away and runs down secret tunnels and corridors.");
		puts("You chase him through the darkness and splash in pools of water.");
		puts("You have cornered him.  His laser sword extends as he steps forward.");
		position = FINAL;
		fight(DARK, 75);
		SetBit(location[position].objects, TALISMAN);
		SetBit(location[position].objects, AMULET);
		return (0);
	} else
		if (followgod == ourtime) {
			puts("The goddess leads you down a steamy tunnel and into a high, wide chamber.");
			puts("She sits down on a throne.");
			position = 268;
			SetBit(location[position].objects, NORMGOD);
			notes[CANTSEE] = 1;
			return (0);
		} else
			puts("There is no one to follow.");
	return (-1);
}

void
undress(void)
{
	if (inc_wordnumber(words[wordnumber], "whom"))
		return;
	if (wordvalue[wordnumber] == NORMGOD &&
	    (TestBit(location[position].objects, NORMGOD)) && godready >= 2) {
		wordnumber--;
		love();
	} else {
		wordnumber--;
		ravage();
	}
}	
@


1.17
log
@fix potential bugs spotted by parfait
ok millert@@ pjanzen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.16 2009/10/27 23:59:23 deraadt Exp $	*/
d32 3
@


1.16
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.15 2004/07/10 07:26:22 deraadt Exp $	*/
d179 1
a179 1
	for (n = 0; !((n == SWORD || n == KNIFE || n == TWO_HANDED || n == MACE || n == CLEAVER || n == BROAD || n == CHAIN || n == SHOVEL || n == HALBERD) && TestBit(inven, n)) && n < NUMOFOBJECTS; n++)
@


1.15
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.14 2003/06/03 03:01:38 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)com2.c	8.2 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: com2.c,v 1.14 2003/06/03 03:01:38 millert Exp $";
#endif
#endif /* not lint */
@


1.14
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.13 2003/05/19 08:49:09 pjanzen Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: com2.c,v 1.13 2003/05/19 08:49:09 pjanzen Exp $";
d44 1
a44 1
wearit()
d112 1
a112 1
put()
d131 1
a131 1
draw()
d137 1
a137 1
use()
d181 1
a181 1
murder()
d281 1
a281 1
ravage()
d338 1
a338 1
follow()
d363 1
a363 1
undress()
@


1.13
log
@NetBSD check to make sure not to deref -1.
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.12 2000/09/26 04:42:55 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: com2.c,v 1.12 2000/09/26 04:42:55 pjanzen Exp $";
@


1.12
log
@Improve handling of multiple commands on one line.  Tidy fight parser.
Handle "all" in one place (almost).  Add AUXVERB category and OBJ_PERSON/
OBJ_NONOBJ flags.  Most was discussed with jsm@@netbsd.org, and some is from
him.
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.11 2000/09/24 21:55:22 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com2.c,v 1.11 2000/09/24 21:55:22 pjanzen Exp $";
d57 1
a57 1
		if (objsht[value] == NULL)
@


1.11
log
@numerous changes from jsm@@netbsd.org:
static where appropriate, add a few comments, format a bit better, and
deal with WEIGHT/CUMBER being zero (and not less).
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.10 2000/09/23 03:02:35 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com2.c,v 1.10 2000/09/23 03:02:35 pjanzen Exp $";
d67 1
a67 2
			    (IsPluralObject(value) ? "" : AorAn(value)),
			    objsht[value]);
d96 1
a96 2
				    (IsPluralObject(value) ? "the " : 
				    (AorAn(value))), objsht[value]);
d118 6
a123 3
	if (wordvalue[wordnumber + 1] == ON) {
		wordvalue[++wordnumber] = PUTON;
		return (cypher());
d125 4
a128 3
	if (wordvalue[wordnumber + 1] == DOWN) {
		wordvalue[++wordnumber] = DROP;
		return (cypher());
a131 1

d143 2
a144 1
	wordnumber++;
d155 1
d167 1
d180 1
d189 2
a195 1
			wordnumber++;
d213 1
a213 2
					    (IsPluralObject(wordvalue[wordnumber]) ? "" :
					    AorAn(wordvalue[wordnumber])),
a220 1
		wordnumber++;
d281 1
d287 2
a288 2
	while (wordtype[++wordnumber] != NOUNS && wordnumber <= wordcount)
		;
d333 1
d335 4
a338 2
	} else
		puts("Who?");
d365 15
@


1.10
log
@drop adjectives in parse(), since they're never used.
tidy a little.  fix love() a bit.
From conversations with jsm@@netbsd.org:
Add objflags[] to deal with plurals and a/an usage.
Commas don't mean AND if followed by a verb.
Check for object presence before trying to lift or eat it.
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.9 2000/09/17 21:28:32 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com2.c,v 1.9 2000/09/17 21:28:32 pjanzen Exp $";
d282 2
a283 1
	while (wordtype[++wordnumber] != NOUNS && wordnumber <= wordcount);
@


1.9
log
@Fewer segfaults ("take all and all", "wear wear"), better parsing
(e.g. disambiguation of "drop body").  Also, use "a" or "an" correctly,
don't overflow the words array, and don't kick items you're wearing.
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.8 2000/07/03 05:23:44 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com2.c,v 1.8 2000/07/03 05:23:44 pjanzen Exp $";
a49 1
	int     n;
d53 1
a53 1
	while (wordtype[++wordnumber] == ADJS);
d55 1
a55 1
	    wordtype[wordnumber] == NOUNS)) {
d57 2
a58 1
		for (n = 0; objsht[value][n]; n++);
d66 3
a68 1
			printf("You can't wear%s%s!\n", (objsht[value][n - 1] == 's' ? " " : " a "), objsht[value]);
d97 1
a97 1
				    (objsht[value][n - 1] == 's' ? "the " : 
d142 1
a142 1
	while (wordtype[++wordnumber] == ADJS && wordnumber < wordcount);
d189 2
a190 4
			n = wordnumber;
			while (wordtype[++n] == ADJS)
				;
			switch(wordvalue[n]) {
d195 1
a195 1
				wordvalue[wordnumber] = SHOOT;
d202 1
a202 1
				if (wordtype[n] != OBJECT ||
d206 4
a209 2
					printf("You can't kill the %s!\n",
					    objsht[wordvalue[n]]);
d216 1
a216 2
		while (wordtype[++wordnumber] == ADJS)
			;
d236 1
a236 1
					puts("I dont see her anywhere.");
@


1.8
log
@Finding bugs in battlestar is like shooting fish in a barrel.
	Don't overflow beenthere[].  Add "verbose" option.
	Fix spelling (including embedded hyphens in descriptions) and grammar.
	"Kill" will now use the laser if you have no cutting implements.
	Formatting.
	You can do more things to the bathing goddess.
	A little less guess-the-word.  Occasionally better error messages,
particularly with "all" when nothing applies.
	"kick door" no longer segfaults.  Nor does "kill door".
More bugs remain...
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.7 1999/09/25 20:30:45 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com2.c,v 1.7 1999/09/25 20:30:45 pjanzen Exp $";
d55 2
a56 1
	while (wordnumber <= wordcount) {
d94 3
a96 3
				printf("You are now wearing %s %s.\n",
				    (objsht[value][n - 1] == 's' ? "the" : "a"),
				    objsht[value]);
d202 2
a203 1
				if (wordtype[n] != OBJECT)
d207 1
a207 1
				    	objsht[wordvalue[n]]);
d268 2
a269 1
			if (wordtype[wordnumber] != OBJECT)
@


1.7
log
@Merge 4.4BSD-Lite2 and NetBSD, including improved save file handling of
jsm28@@cam.ac.uk.  Rename setbit() family of macros so as not to conflict
with <sys/param.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.6 1998/09/13 01:30:30 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: com2.c,v 1.6 1998/09/13 01:30:30 pjanzen Exp $";
d181 30
a210 4
	for (n = 0; !((n == SWORD || n == KNIFE || n == TWO_HANDED || n == MACE || n == CLEAVER || n == BROAD || n == CHAIN || n == SHOVEL || n == HALBERD) && TestBit(inven, n)) && n < NUMOFOBJECTS; n++);
	if (n == NUMOFOBJECTS)
		puts("You don't have suitable weapons to kill.");
	else {
d212 2
a213 1
		while (wordtype[++wordnumber] == ADJS);
d266 2
a267 2
			if (wordtype[wordnumber] != NOUNS)
				puts("Kill what?");
d279 2
a280 1
	if (wordtype[wordnumber] == NOUNS && TestBit(location[position].objects, wordvalue[wordnumber])) {
d285 4
a288 1
			puts("crying and tries to hold her torn and bloodied dress around her.");
@


1.6
log
@NetBSD merge, numerous patches from jsm28@@cam.ac.uk, spelling fixes, and
correct gid revoke.
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.5 1997/12/16 07:54:22 angelos Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)com2.c	8.1 (Berkeley) 5/31/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d87 3
a89 3
			if (testbit(inven, value)) {
				clearbit(inven, value);
				setbit(wear, value);
d97 1
a97 1
				if (testbit(wear, value))
d140 1
a140 1
	if (wordvalue[wordnumber] == AMULET && testbit(inven, AMULET) &&
d143 1
a143 1
		if (testbit(inven, MEDALION)) {
d165 1
a165 1
	else if (wordvalue[wordnumber] == COMPASS && testbit(inven, COMPASS))
d181 1
a181 1
	for (n = 0; !((n == SWORD || n == KNIFE || n == TWO_HANDED || n == MACE || n == CLEAVER || n == BROAD || n == CHAIN || n == SHOVEL || n == HALBERD) && testbit(inven, n)) && n < NUMOFOBJECTS; n++);
d190 1
a190 1
			if (testbit(location[position].objects, BATHGOD)) {
d192 2
a193 2
				clearbit(location[position].objects, BATHGOD);
				setbit(location[position].objects, DEADGOD);
d197 1
a197 1
				if (testbit(location[position].objects, NORMGOD)) {
d199 2
a200 2
					clearbit(location[position].objects, NORMGOD);
					setbit(location[position].objects, DEADGOD);
d209 1
a209 1
			if (testbit(location[position].objects, TIMER)) {
d211 2
a212 2
				clearbit(location[position].objects, TIMER);
				setbit(location[position].objects, DEADTIME);
d219 1
a219 1
			if (testbit(location[position].objects, NATIVE)) {
d221 2
a222 2
				clearbit(location[position].objects, NATIVE);
				setbit(location[position].objects, DEADNATIVE);
d229 1
a229 1
			if (testbit(location[position].objects, MAN)) {
d252 1
a252 1
	if (wordtype[wordnumber] == NOUNS && testbit(location[position].objects, wordvalue[wordnumber])) {
d276 12
a287 12
				setbit(location[ahead].objects, WOODSMAN);
				setbit(location[ahead].objects, DEADWOOD);
				setbit(location[ahead].objects, MALLET);
				setbit(location[back].objects, WOODSMAN);
				setbit(location[back].objects, DEADWOOD);
				setbit(location[back].objects, MALLET);
				setbit(location[left].objects, WOODSMAN);
				setbit(location[left].objects, DEADWOOD);
				setbit(location[left].objects, MALLET);
				setbit(location[right].objects, WOODSMAN);
				setbit(location[right].objects, DEADWOOD);
				setbit(location[right].objects, MALLET);
d306 2
a307 2
		setbit(location[position].objects, TALISMAN);
		setbit(location[position].objects, AMULET);
d314 1
a314 1
			setbit(location[position].objects, NORMGOD);
@


1.5
log
@Fix annoying warnings.
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.4 1997/09/01 18:13:10 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$NetBSD: com2.c,v 1.3 1995/03/21 15:06:55 cgd Exp $";
d48 4
a51 4
wearit()		/* synonyms = {sheathe, sheath} */
{
	register int n;
	int firstnumber, value;
d54 2
a55 2
	while(wordtype[++wordnumber] == ADJS);
	while(wordnumber <= wordcount){
d57 43
a99 44
		for (n=0; objsht[value][n]; n++);
		switch(value){
			
			case -1:
				puts("Wear what?");
				return(firstnumber);

			default:
				printf("You can't wear%s%s!\n",(objsht[value][n-1] == 's' ? " " : " a "),objsht[value]);
				return(firstnumber);

			case KNIFE:
		/*	case SHIRT:	*/
			case ROBE:
			case LEVIS:	/* wearable things */
			case SWORD:
			case MAIL:
			case HELM:
			case SHOES:
			case PAJAMAS:
			case COMPASS:
			case LASER:
			case AMULET:
			case TALISMAN:
			case MEDALION:
			case ROPE:
			case RING:
			case BRACELET:
			case GRENADE:

				if (testbit(inven,value)){
					clearbit(inven,value);
					setbit(wear,value);
					carrying -= objwt[value];
					encumber -= objcumber[value];
					btime++;
					printf("You are now wearing %s %s.\n",(objsht[value][n-1] == 's' ? "the" : "a"), objsht[value]);
				}
				else if (testbit(wear,value))
					printf("You are already wearing the %s.\n", objsht[value]);
				else
					printf("You aren't holding the %s.\n", objsht[value]);
				if (wordnumber < wordcount - 1 && wordvalue[++wordnumber] == AND)
					wordnumber++;
d101 9
a109 3
					return(firstnumber);
		} /* end switch */
	} /* end while */
d111 1
a111 1
	return(firstnumber);
d115 3
a117 3
put()		/* synonyms = {buckle, strap, tie} */
{
	if (wordvalue[wordnumber + 1] == ON){
d119 1
a119 1
		return(cypher());
d121 1
a121 1
	if (wordvalue[wordnumber + 1] == DOWN){
d123 1
a123 1
		return(cypher());
d126 1
a126 1
	return(-1);
d131 3
a133 3
draw() 			/* synonyms = {pull, carry} */
{
	return(take(wear));
d140 2
a141 1
	if (wordvalue[wordnumber] == AMULET && testbit(inven,AMULET) && position != FINAL){
d143 1
a143 1
		if (testbit(inven,MEDALION)){
d145 1
a145 1
			if (position == 114){
d149 2
a150 2
				btime++;
				return(-1);
d159 1
a159 1
		btime++;
d161 1
a161 1
		return(0);
d165 2
a166 2
	else if (wordvalue[wordnumber] == COMPASS && testbit(inven,COMPASS))
		printf("Your compass points %s.\n",truedirec(NORTH,'-'));
d173 1
a173 1
	return(-1);
d179 1
a179 1
	register int n;
d181 1
a181 1
	for (n=0; !((n == SWORD || n == KNIFE || n == TWO_HANDED || n == MACE || n == CLEAVER || n == BROAD || n == CHAIN || n == SHOVEL || n == HALBERD) && testbit(inven,n)) && n < NUMOFOBJECTS; n++);
d185 1
a185 1
		printf("Your %s should do the trick.\n",objsht[n]);
d187 11
a197 10
		switch(wordvalue[wordnumber]){
			
			case NORMGOD:
				if (testbit(location[position].objects,BATHGOD)){
					puts("The goddess's head slices off.  Her corpse floats in the water.");
					clearbit(location[position].objects,BATHGOD);
					setbit(location[position].objects,DEADGOD);
					power += 5;
					notes[JINXED]++;
				} else if (testbit(location[position].objects,NORMGOD)){
d199 2
a200 2
					clearbit(location[position].objects,NORMGOD);
					setbit(location[position].objects,DEADGOD);
d205 35
a239 27
				} else puts("I dont see her anywhere.");
				break;
			case TIMER:
				if (testbit(location[position].objects,TIMER)){
					puts("The old man offers no resistance.");
					clearbit(location[position].objects,TIMER);
					setbit(location[position].objects,DEADTIME);
					power++;
					notes[JINXED]++;
				} else puts("Who?");
				break;
			case NATIVE:
				if (testbit(location[position].objects,NATIVE)){
					puts("The girl screams as you cut her body to shreds.  She is dead.");
					clearbit(location[position].objects,NATIVE);
					setbit(location[position].objects,DEADNATIVE);
					power += 5;
					notes[JINXED]++;
				} else puts("What girl?");
				break;
			case MAN:
				if (testbit(location[position].objects,MAN)){
					puts("You strike him to the ground, and he coughs up blood.");
					puts("Your fantasy is over.");
					die(0);
				}
			case -1:
d241 3
a243 7
				break;

			default:
				if (wordtype[wordnumber] != NOUNS)
					puts("Kill what?");
				else
					printf("You can't kill the %s!\n",objsht[wordvalue[wordnumber]]);
d252 40
a291 40
	if (wordtype[wordnumber] == NOUNS && testbit(location[position].objects,wordvalue[wordnumber])){
		btime++;
		switch(wordvalue[wordnumber]){
			case NORMGOD:
				puts("You attack the goddess, and she screams as you beat her.  She falls down");
				puts("crying and tries to hold her torn and bloodied dress around her.");
				power += 5;
				pleasure += 8;
				ego -= 10;
				wordnumber--;
				godready = -30000;
				murder();
				win = -30000;
				break;
			case NATIVE:
				puts("The girl tries to run, but you catch her and throw her down.  Her face is");
				puts("bleeding, and she screams as you tear off her clothes.");
				power += 3;
				pleasure += 5;
				ego -= 10;
				wordnumber--;
				murder();
				if (rnd(100) < 50){
					puts("Her screams have attracted attention.  I think we are surrounded.");
					setbit(location[ahead].objects,WOODSMAN);
					setbit(location[ahead].objects,DEADWOOD);
					setbit(location[ahead].objects,MALLET);
					setbit(location[back].objects,WOODSMAN);
					setbit(location[back].objects,DEADWOOD);
					setbit(location[back].objects,MALLET);
					setbit(location[left].objects,WOODSMAN);
					setbit(location[left].objects,DEADWOOD);
					setbit(location[left].objects,MALLET);
					setbit(location[right].objects,WOODSMAN);
					setbit(location[right].objects,DEADWOOD);
					setbit(location[right].objects,MALLET);
				}
				break;
			default:
				puts("You are perverted.");
d293 1
a293 2
	}
	else
d300 2
a301 2
	if (followfight == btime){
		puts("The Dark Lord leaps away and runs down secret tunnels and corridoors.");
d305 15
a319 16
		fight(DARK,75);
		setbit(location[position].objects,TALISMAN);
		setbit(location[position].objects,AMULET);
		return(0);
	}
	else if (followgod == btime){
		puts("The goddess leads you down a steamy tunnel and into a high, wide chamber.");
		puts("She sits down on a throne.");
		position = 268;
		setbit(location[position].objects,NORMGOD);
		notes[CANTSEE] = 1;
		return(0);
	}
	else
		puts("There is no one to follow.");
	return(-1);
@


1.4
log
@Remove trailing spaces on lines, use sane pathname sizes, and
use warn instead of perror.
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.3 1997/08/24 21:55:02 deraadt Exp $	*/
d222 1
a222 1
					die();
@


1.3
log
@various linux-based patches; from linux people; sent by jsm@@octomino.demon.co.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: com2.c,v 1.2 1997/06/30 19:56:29 kstailey Exp $	*/
d97 1
a97 1
				else 
d101 1
a101 1
				else 
d308 1
a308 1
	else 
@


1.2
log
@tag
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
#include "externs.h"
d47 1
d92 1
a92 1
					time++;
d109 1
d125 1
d131 1
d143 1
a143 1
				time++;
d153 2
a154 1
		time++;
d170 1
d237 1
d242 1
a242 1
		time++;
d287 1
d290 1
a290 1
	if (followfight == time){
d300 1
a300 1
	else if (followgod == time){
@


1.1
log
@Initial revision
@
text
@d1 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
