head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.6
	OPENBSD_6_2_BASE:1.13
	OPENBSD_6_1:1.13.0.8
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.11.0.26
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.18
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.22
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.24
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.20
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.18
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.16
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.14
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.12
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.10
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.8
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.6
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.4
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.16
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.14
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.8.0.12
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.8.0.10
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.8
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.8.0.6
	OPENBSD_2_8_BASE:1.8
	OPENBSD_2_7:1.8.0.4
	OPENBSD_2_7_BASE:1.8
	OPENBSD_2_6:1.8.0.2
	OPENBSD_2_6_BASE:1.8
	OPENBSD_2_5:1.7.0.4
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.7.0.2
	OPENBSD_2_4_BASE:1.7
	OPENBSD_2_3:1.6.0.4
	OPENBSD_2_3_BASE:1.6
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.12.31.17.51.19;	author mestre;	state Exp;
branches;
next	1.12;
commitid	GSzV0GYeNlCgMbj0;

1.12
date	2015.08.22.14.47.41;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	vWCbqNWL9DL2UkGT;

1.11
date	2009.10.27.23.59.24;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2004.07.10.07.26.22;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.03.01.38;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	99.09.25.20.30.46;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	98.09.13.01.30.33;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	97.09.01.18.13.20;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.08.24.21.55.13;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	97.06.30.19.56.41;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.12.19.22.21.06;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.10.27.23.51.37;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.44;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.44;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Include only needed header files per each source file

OK tb@@
@
text
@/*	$OpenBSD: save.c,v 1.12 2015/08/22 14:47:41 deraadt Exp $	*/
/*	$NetBSD: save.c,v 1.3 1995/03/21 15:07:57 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "extern.h"

void
restore(const char *filename)
{
	int     n;
	int     tmp;
	FILE   *fp;

	if (filename == NULL)
		exit(1); /* Error determining save file name.  */
	if ((fp = fopen(filename, "r")) == NULL)
		err(1, "can't open %s for reading", filename);
	fread(&WEIGHT, sizeof WEIGHT, 1, fp);
	fread(&CUMBER, sizeof CUMBER, 1, fp);
	fread(&ourclock, sizeof ourclock, 1, fp);
	fread(&tmp, sizeof tmp, 1, fp);
	location = tmp ? dayfile : nightfile;
	for (n = 1; n <= NUMOFROOMS; n++) {
		fread(location[n].link, sizeof location[n].link, 1, fp);
		fread(location[n].objects, sizeof location[n].objects, 1, fp);
	}
	fread(inven, sizeof inven, 1, fp);
	fread(wear, sizeof wear, 1, fp);
	fread(injuries, sizeof injuries, 1, fp);
	fread(notes, sizeof notes, 1, fp);
	fread(&direction, sizeof direction, 1, fp);
	fread(&position, sizeof position, 1, fp);
	fread(&ourtime, sizeof ourtime, 1, fp);
	fread(&fuel, sizeof fuel, 1, fp);
	fread(&torps, sizeof torps, 1, fp);
	fread(&carrying, sizeof carrying, 1, fp);
	fread(&encumber, sizeof encumber, 1, fp);
	fread(&rythmn, sizeof rythmn, 1, fp);
	fread(&followfight, sizeof followfight, 1, fp);
	fread(&ate, sizeof ate, 1, fp);
	fread(&snooze, sizeof snooze, 1, fp);
	fread(&meetgirl, sizeof meetgirl, 1, fp);
	fread(&followgod, sizeof followgod, 1, fp);
	fread(&godready, sizeof godready, 1, fp);
	fread(&win, sizeof win, 1, fp);
	fread(&wintime, sizeof wintime, 1, fp);
	fread(&matchlight, sizeof matchlight, 1, fp);
	fread(&matchcount, sizeof matchcount, 1, fp);
	fread(&loved, sizeof loved, 1, fp);
	fread(&pleasure, sizeof pleasure, 1, fp);
	fread(&power, sizeof power, 1, fp);
	/* Check the final read in case file was truncated */
	if (fread(&ego, sizeof ego, 1, fp) < 1)
		errx(1, "save file %s is truncated", filename);
	fclose(fp);
}

void
save(const char *filename)
{
	int     n;
	int     tmp;
	FILE   *fp;

	if (filename == NULL)
		return; /* Error determining save file name.  */
	if ((fp = fopen(filename, "w")) == NULL) {
		warn("can't open %s for writing", filename);
		return;
	}
	fwrite(&WEIGHT, sizeof WEIGHT, 1, fp);
	fwrite(&CUMBER, sizeof CUMBER, 1, fp);
	fwrite(&ourclock, sizeof ourclock, 1, fp);
	tmp = location == dayfile;
	fwrite(&tmp, sizeof tmp, 1, fp);
	for (n = 1; n <= NUMOFROOMS; n++) {
		fwrite(location[n].link, sizeof location[n].link, 1, fp);
		fwrite(location[n].objects, sizeof location[n].objects, 1, fp);
	}
	fwrite(inven, sizeof inven, 1, fp);
	fwrite(wear, sizeof wear, 1, fp);
	fwrite(injuries, sizeof injuries, 1, fp);
	fwrite(notes, sizeof notes, 1, fp);
	fwrite(&direction, sizeof direction, 1, fp);
	fwrite(&position, sizeof position, 1, fp);
	fwrite(&ourtime, sizeof ourtime, 1, fp);
	fwrite(&fuel, sizeof fuel, 1, fp);
	fwrite(&torps, sizeof torps, 1, fp);
	fwrite(&carrying, sizeof carrying, 1, fp);
	fwrite(&encumber, sizeof encumber, 1, fp);
	fwrite(&rythmn, sizeof rythmn, 1, fp);
	fwrite(&followfight, sizeof followfight, 1, fp);
	fwrite(&ate, sizeof ate, 1, fp);
	fwrite(&snooze, sizeof snooze, 1, fp);
	fwrite(&meetgirl, sizeof meetgirl, 1, fp);
	fwrite(&followgod, sizeof followgod, 1, fp);
	fwrite(&godready, sizeof godready, 1, fp);
	fwrite(&win, sizeof win, 1, fp);
	fwrite(&wintime, sizeof wintime, 1, fp);
	fwrite(&matchlight, sizeof matchlight, 1, fp);
	fwrite(&matchcount, sizeof matchcount, 1, fp);
	fwrite(&loved, sizeof loved, 1, fp);
	fwrite(&pleasure, sizeof pleasure, 1, fp);
	fwrite(&power, sizeof power, 1, fp);
	fwrite(&ego, sizeof ego, 1, fp);
	fflush(fp);
	if (ferror(fp))
		warn("fwrite %s", filename);
	else
		printf("Saved in %s.\n", filename);
	fclose(fp);
}

/*
 * Given a save file name (possibly from fgetln, so without terminating NUL),
 * determine the name of the file to be saved to by adding the HOME
 * directory if the name does not contain a slash.  Name will be allocated
 * with malloc(3).
 */
char *
save_file_name(const char *filename, size_t len)
{
	char   *home;
	char   *newname;
	size_t	tmpl;

	if (memchr(filename, '/', len)) {
		if ((newname = malloc(len + 1)) == NULL) {
			warnx("out of memory");
			return NULL;
		}
		memcpy(newname, filename, len);
		newname[len] = 0;
	} else {
		if ((home = getenv("HOME")) != NULL) {
			tmpl = strlen(home);
			if ((newname = malloc(tmpl + len + 2)) == NULL) {
				warnx("out of memory");
				return NULL;
			}
			memcpy(newname, home, tmpl);
			newname[tmpl] = '/';
			memcpy(newname + tmpl + 1, filename, len);
			newname[tmpl + len + 1] = 0;
		} else {
			if ((newname = malloc(len + 1)) == NULL) {
				warnx("out of memory");
				return NULL;
			}
			memcpy(newname, filename, len);
			newname[len] = 0;
		}
	}
	return(newname);
}
@


1.12
log
@remove malloc/calloc/realloc* casts, due to stdlib.h being present; ok millert krw
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.11 2009/10/27 23:59:24 deraadt Exp $	*/
d32 5
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.10 2004/07/10 07:26:22 deraadt Exp $	*/
d156 1
a156 1
		if ((newname = (char *)malloc(len + 1)) == NULL) {
d165 1
a165 1
			if ((newname = (char *)malloc(tmpl + len + 2)) == NULL) {
d174 1
a174 1
			if ((newname = (char *)malloc(len + 1)) == NULL) {
@


1.10
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.9 2003/06/03 03:01:38 millert Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)save.c	8.2 (Berkeley) 4/28/95";
#else
static char rcsid[] = "$OpenBSD: save.c,v 1.9 2003/06/03 03:01:38 millert Exp $";
#endif
#endif /* not lint */
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.8 1999/09/25 20:30:46 pjanzen Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: save.c,v 1.8 1999/09/25 20:30:46 pjanzen Exp $";
d44 1
a44 2
restore(filename)
	const char *filename;
d95 1
a95 2
save(filename)
	const char *filename;
d157 1
a157 3
save_file_name(filename, len)
	const char *filename;
	size_t len;
@


1.8
log
@Merge 4.4BSD-Lite2 and NetBSD, including improved save file handling of
jsm28@@cam.ac.uk.  Rename setbit() family of macros so as not to conflict
with <sys/param.h>.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.7 1998/09/13 01:30:33 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: save.c,v 1.7 1998/09/13 01:30:33 pjanzen Exp $";
@


1.7
log
@NetBSD merge, numerous patches from jsm28@@cam.ac.uk, spelling fixes, and
correct gid revoke.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.6 1997/09/01 18:13:20 millert Exp $	*/
d39 1
a39 1
static char sccsid[] = "@@(#)save.c	8.1 (Berkeley) 5/31/93";
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d48 2
a49 1
restore()
a50 2
	char   *home;
	char    home1[PATH_MAX];
d55 4
a58 12
	home = getenv("HOME");
	if (strlen(home) + 6 < sizeof(home1)) {
		strcpy(home1, home);
		strcat(home1, "/Bstar");
	} else {
		fprintf(stderr, "%s: %s\n", home1, strerror(ENAMETOOLONG));
		return;
	}
	if ((fp = fopen(home1, "r")) == NULL) {
		err(1, "can't open %s for reading", home1);
		return;
	}
d95 1
a95 1
		errx(1, "save file %s is truncated", home1);
d100 2
a101 1
save()
a102 2
	char   *home;
	char    home1[PATH_MAX];
d107 4
a110 10
	home = getenv("HOME");
	if (strlen(home) + 6 < sizeof(home1)) {
		strcpy(home1, home);
		strcat(home1, "/Bstar");
	} else {
		fprintf(stderr, "%s/Bstar: %s\n", home, strerror(ENAMETOOLONG));
		return;
	}
	if ((fp = fopen(home1, "w")) == NULL) {
		warn("can't open %s for writing", home1);
a112 1
	printf("Saved in %s.\n", home1);
d150 3
a152 1
		warn("fwrite %s", home1);
d154 45
@


1.6
log
@Remove trailing spaces on lines, use sane pathname sizes, and
use warn instead of perror.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.5 1997/08/24 21:55:13 deraadt Exp $	*/
d41 1
a41 1
static char rcsid[] = "$NetBSD: save.c,v 1.3 1995/03/21 15:07:57 cgd Exp $";
d50 5
a54 5
	char *home;
	char home1[PATH_MAX];
	register int n;
	int tmp;
	register FILE *fp;
a63 1
	setegid(egid);
d65 1
a65 2
		warn("can't open %s for reading", home1);
		setegid(getgid());
a67 1
	setegid(getgid());
d70 1
a70 1
	fread(&bclock, sizeof bclock, 1, fp);
d83 1
a83 1
	fread(&btime, sizeof btime, 1, fp);
d102 3
a104 1
	fread(&ego, sizeof ego, 1, fp);
d111 5
a115 5
	char *home;
	char home1[PATH_MAX];
	register int n;
	int tmp;
	FILE *fp;
a124 1
	setegid(egid);
a126 1
		setegid(getgid());
a128 1
	setegid(getgid());
d132 1
a132 1
	fwrite(&bclock, sizeof bclock, 1, fp);
d145 1
a145 1
	fwrite(&btime, sizeof btime, 1, fp);
d165 3
@


1.5
log
@various linux-based patches; from linux people; sent by jsm@@octomino.demon.co.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.4 1997/06/30 19:56:41 kstailey Exp $	*/
d51 1
a51 1
	char home1[1024];
d65 2
a66 2
	if ((fp = fopen(home1, "r")) == 0) {
		perror(home1);
d68 1
a68 1
		exit(1);
d113 1
a113 1
	char home1[100];
d127 2
a128 2
	if ((fp = fopen(home1, "w")) == 0) {
		perror(home1);
@


1.4
log
@tag
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d45 1
a45 1
#include "externs.h"
d47 1
a49 1
	char *getenv();
d68 1
a68 1
		return;
d73 1
a73 1
	fread(&clock, sizeof clock, 1, fp);
d86 1
a86 1
	fread(&time, sizeof time, 1, fp);
d106 1
d109 1
a111 1
	char *getenv();
d136 1
a136 1
	fwrite(&clock, sizeof clock, 1, fp);
d149 1
a149 1
	fwrite(&time, sizeof time, 1, fp);
d169 1
@


1.3
log
@setgid games, not setuid games. closes a neat set of holes
@
text
@d1 1
@


1.2
log
@Don't make size assumptions wrt $HOME
@
text
@d50 1
a50 1
	char home1[100];
d60 1
a60 1
		fprintf(stderr, "%s/Bstar: %s\n", home, strerror(ENAMETOOLONG));
d63 1
d66 1
d69 1
d124 1
d127 1
d130 1
@


1.1
log
@Initial revision
@
text
@d56 7
a62 2
	strcpy(home1, home);
	strcat(home1, "/Bstar");
d114 7
a120 2
	strcpy(home1, home);
	strcat(home1, "/Bstar");
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
