head	1.12;
access;
symbols
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.10.0.16
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.8
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.12
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.10
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.6
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.4
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.8
	OPENBSD_5_0:1.9.0.6
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.4
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.2
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.8.0.22
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.8.0.24
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.20
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.18
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.16
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.14
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.12
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.10
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.14
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.12
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.10
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.12.31.18.10.19;	author mestre;	state Exp;
branches;
next	1.11;
commitid	sUE3xE4r7FTWhVk4;

1.11
date	2015.12.26.00.26.39;	author mestre;	state Exp;
branches;
next	1.10;
commitid	NcBz9zfScw6TwPoT;

1.10
date	2012.03.04.04.05.15;	author fgsch;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.10.08.53.12;	author nicm;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.10.07.26.23;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.16.00.13.18;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.03.01.39;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.06.18.50.36;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.09;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.10.23.50.22;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	99.11.29.06.42.20;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.47;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.47;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Include only needed header files per each source file

This one was also OK'ed by tb@@
@
text
@/*	$OpenBSD: cribbage.h,v 1.11 2015/12/26 00:26:39 mestre Exp $	*/
/*	$NetBSD: cribbage.h,v 1.3 1995/03/21 15:08:46 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)cribbage.h	8.1 (Berkeley) 5/31/93
 */

#include <curses.h>
#include <stdbool.h>

#include "deck.h"

extern  CARD		deck[ CARDS ];		/* a deck */
extern  CARD		phand[ FULLHAND ];	/* player's hand */
extern  CARD		chand[ FULLHAND ];	/* computer's hand */
extern  CARD		crib[ CINHAND ];	/* the crib */
extern  CARD		turnover;		/* the starter */

extern  CARD		known[ CARDS ];		/* cards we have seen */
extern  int		knownum;		/* # of cards we know */

extern  int		pscore;			/* player's score */
extern  int		cscore;			/* comp's score */
extern  int		glimit;			/* points to win game */

extern  int		pgames;			/* player's games won */
extern  int		cgames;			/* comp's games won */
extern  int		gamecount;		/* # games played */
extern	int		Lastscore[2];		/* previous score for each */

extern  bool		iwon;			/* if comp won last */
extern  bool		explain;		/* player mistakes explained */
extern  bool		muggins;		/* player mistakes exploited */
extern  bool		rflag;			/* if all cuts random */
extern  bool		quiet;			/* if suppress random mess */
extern	bool		playing;		/* currently playing game */

extern  char		expl_string[128];		/* string for explanation */

void	 addmsg(const char *, ...);
int	 adjust(CARD [], CARD);
int	 anymove(CARD [], int, int);
int	 anysumto(CARD [], int, int, int);
void	 bye(void);
int	 cchose(CARD [], int, int);
void	 cdiscard(bool);
int	 chkscr(int *, int);
int	 comphand(CARD [], char *);
void	 cremove(CARD, CARD [], int);
int	 cut(bool, int);
int	 deal(bool);
void	 discard(bool);
void	 do_wait(void);
void	 endmsg(void);
int	 eq(CARD, CARD);
int	 fifteens(CARD [], int);
void	 game(void);
void	 gamescore(void);
char	*get_line(void);
int	 getuchar(void);
int	 incard(CARD *);
int	 infrom(CARD [], int, char *);
void	 instructions(void);
int	 isone(CARD, CARD [], int);
void	 makeboard(void);
void	 makedeck(CARD []);
void	 makeknown(CARD [], int);
void	 msg(const char *, ...);
int	 msgcard(CARD, bool);
int	 msgcrd(CARD, bool, char *, bool);
int	 number(int, int, char *);
int	 numofval(CARD [], int, int);
int	 pairuns(CARD [], int);
int	 peg(bool);
int	 pegscore(CARD, CARD [], int, int);
int	 playhand(bool);
int	 plyrhand(CARD [], char *);
void	 prcard(WINDOW *, int, int, CARD, bool);
void	 prcrib(bool, bool);
void	 prhand(CARD [], int, WINDOW *, bool);
void	 printcard(WINDOW *, int, CARD, bool);
void	 prpeg(int, int, bool);
void	 prtable(int);
int	 readchar(void);
__dead void	 rintsig(int);
int	 score(bool);
int	 scorehand(CARD [], CARD, int, bool, bool);
void	 shuffle(CARD []);
void	 sorthand(CARD [], int);
void	 wait_for(int);
@


1.11
log
@Set as __dead a few more functions, that don't return, on games/

With precious tip, help and also OK from tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cribbage.h,v 1.10 2012/03/04 04:05:15 fgsch Exp $	*/
d34 5
@


1.10
log
@In preparation for getline and getdelim additions to libc, rename getline()
occurrences to get_line().
Based on a diff from Jan Klemkow <j-dot-klemkow-at-wemelug-dot-de> to tech.
@
text
@d1 1
a1 1
/*	$OpenBSD: cribbage.h,v 1.9 2010/05/10 08:53:12 nicm Exp $	*/
d107 1
a107 1
void	 rintsig(int);
@


1.9
log
@Rename use of some builtins that makes gcc4 warn.

ok millert
@
text
@d1 1
a1 1
/*	$OpenBSD: cribbage.h,v 1.8 2004/07/10 07:26:23 deraadt Exp $	*/
d81 1
a81 1
char	*getline(void);
@


1.8
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: cribbage.h,v 1.7 2004/01/16 00:13:18 espie Exp $	*/
d107 1
a107 1
void	 rint(int);
@


1.7
log
@ISO C police: log and expl are reserved for the C library.
expl -> expl_string
log -> logit
@
text
@d1 1
a1 1
/*	$OpenBSD: cribbage.h,v 1.6 2003/06/03 03:01:39 millert Exp $	*/
d73 1
a73 1
int	 deal(int);
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cribbage.h,v 1.5 2003/04/06 18:50:36 deraadt Exp $	*/
d60 1
a60 1
extern  char		expl[128];		/* string for explanation */
@


1.5
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: cribbage.h,v 1.4 2002/02/16 21:27:09 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: cribbage.h,v 1.3 2001/08/10 23:50:22 pjanzen Exp $	*/
d64 1
a64 1
extern  char		expl[];			/* string for explanation */
@


1.3
log
@-m option for muggins
better user input parsing
man page tidying and syncing of rules to Hoyle's
typo and context correction in "Hoyle's" transcription
@
text
@d1 1
a1 1
/*	$OpenBSD: cribbage.h,v 1.2 1999/11/29 06:42:20 millert Exp $	*/
d66 51
a116 51
void	 addmsg __P((const char *, ...));
int	 adjust __P((CARD [], CARD));
int	 anymove __P((CARD [], int, int));
int	 anysumto __P((CARD [], int, int, int));
void	 bye __P((void));
int	 cchose __P((CARD [], int, int));
void	 cdiscard __P((bool));
int	 chkscr __P((int *, int));
int	 comphand __P((CARD [], char *));
void	 cremove __P((CARD, CARD [], int));
int	 cut __P((bool, int));
int	 deal __P((int));
void	 discard __P((bool));
void	 do_wait __P((void));
void	 endmsg __P((void));
int	 eq __P((CARD, CARD));
int	 fifteens __P((CARD [], int));
void	 game __P((void));
void	 gamescore __P((void));
char	*getline __P((void));
int	 getuchar __P((void));
int	 incard __P((CARD *));
int	 infrom __P((CARD [], int, char *));
void	 instructions __P((void));
int	 isone __P((CARD, CARD [], int));
void	 makeboard __P((void));
void	 makedeck __P((CARD []));
void	 makeknown __P((CARD [], int));
void	 msg __P((const char *, ...));
int	 msgcard __P((CARD, bool));
int	 msgcrd __P((CARD, bool, char *, bool));
int	 number __P((int, int, char *));
int	 numofval __P((CARD [], int, int));
int	 pairuns __P((CARD [], int));
int	 peg __P((bool));
int	 pegscore __P((CARD, CARD [], int, int));
int	 playhand __P((bool));
int	 plyrhand __P((CARD [], char *));
void	 prcard __P((WINDOW *, int, int, CARD, bool));
void	 prcrib __P((bool, bool));
void	 prhand __P((CARD [], int, WINDOW *, bool));
void	 printcard __P((WINDOW *, int, CARD, bool));
void	 prpeg __P((int, int, bool));
void	 prtable __P((int));
int	 readchar __P((void));
void	 rint __P((int));
int	 score __P((bool));
int	 scorehand __P((CARD [], CARD, int, bool, bool));
void	 shuffle __P((CARD []));
void	 sorthand __P((CARD [], int));
void	 wait_for __P((int));
@


1.2
log
@Kill BOOLEAN, just use the curses/c++ bool type instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: cribbage.h,v 1.3 1995/03/21 15:08:46 cgd Exp $	*/
d59 1
@


1.1
log
@Initial revision
@
text
@d1 1
d57 5
a61 5
extern  BOOLEAN		iwon;			/* if comp won last */
extern  BOOLEAN		explain;		/* player mistakes explained */
extern  BOOLEAN		rflag;			/* if all cuts random */
extern  BOOLEAN		quiet;			/* if suppress random mess */
extern	BOOLEAN		playing;		/* currently playing game */
d71 1
a71 1
void	 cdiscard __P((BOOLEAN));
d75 1
a75 1
int	 cut __P((BOOLEAN, int));
d77 1
a77 1
void	 discard __P((BOOLEAN));
d94 2
a95 2
int	 msgcard __P((CARD, BOOLEAN));
int	 msgcrd __P((CARD, BOOLEAN, char *, BOOLEAN));
d99 1
a99 1
int	 peg __P((BOOLEAN));
d101 1
a101 1
int	 playhand __P((BOOLEAN));
d103 5
a107 5
void	 prcard __P((WINDOW *, int, int, CARD, BOOLEAN));
void	 prcrib __P((BOOLEAN, BOOLEAN));
void	 prhand __P((CARD [], int, WINDOW *, BOOLEAN));
void	 printcard __P((WINDOW *, int, CARD, BOOLEAN));
void	 prpeg __P((int, int, BOOLEAN));
d111 2
a112 2
int	 score __P((BOOLEAN));
int	 scorehand __P((CARD [], CARD, int, BOOLEAN, BOOLEAN));
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
