head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.8
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.24
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.20
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.18
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.16
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.14
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.12
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.10
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2015.12.31.18.10.20;	author mestre;	state Exp;
branches;
next	1.10;
commitid	sUE3xE4r7FTWhVk4;

1.10
date	2014.05.08.23.12.40;	author schwarze;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.27.23.59.24;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2004.07.10.07.26.23;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.16.00.13.18;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.03.01.39;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.06.18.50.36;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.10.23.50.22;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	99.11.29.06.42.20;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.08.19.07.40.24;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.48;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.48;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Include only needed header files per each source file

This one was also OK'ed by tb@@
@
text
@/*	$OpenBSD: score.c,v 1.10 2014/05/08 23:12:40 schwarze Exp $	*/
/*	$NetBSD: score.c,v 1.3 1995/03/21 15:08:57 cgd Exp $	*/

/*-
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdlib.h>
#include <string.h>

#include "cribbage.h"

/*
 * the following arrays give the sum of the scores of the (50 2)*48 = 58800
 * hands obtainable for the crib given the two cards whose ranks index the
 * array.  the two arrays are for the case where the suits are equal and
 * not equal respectively
 */
long crbescr[169] = {
    -10000, 271827, 278883, 332319, 347769, 261129, 250653, 253203, 248259,
    243435, 256275, 237435, 231051, -10000, -10000, 412815, 295707, 349497,
    267519, 262521, 259695, 254019, 250047, 262887, 244047, 237663, -10000,
    -10000, -10000, 333987, 388629, 262017, 266787, 262971, 252729, 254475,
    267315, 248475, 242091, -10000, -10000, -10000, -10000, 422097, 302787,
    256437, 263751, 257883, 254271, 267111, 248271, 241887, -10000, -10000,
    -10000, -10000, -10000, 427677, 387837, 349173, 347985, 423861, 436701,
    417861, 411477, -10000, -10000, -10000, -10000, -10000, -10000, 336387,
    298851, 338667, 236487, 249327, 230487, 224103, -10000, -10000, -10000,
    -10000, -10000, -10000, -10000, 408483, 266691, 229803, 246195, 227355,
    220971, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000,
    300675, 263787, 241695, 226407, 220023, -10000, -10000, -10000, -10000,
    -10000, -10000, -10000, -10000, -10000, 295635, 273543, 219771, 216939,
    -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000,
    -10000, 306519, 252747, 211431, -10000, -10000, -10000, -10000, -10000,
    -10000, -10000, -10000, -10000, -10000, -10000, 304287, 262971, -10000,
    -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000,
    -10000, -10000, 244131, -10000, -10000, -10000, -10000, -10000, -10000,
    -10000, -10000, -10000, -10000, -10000, -10000, -10000
};

long crbnescr[169] = {
    325272, 260772, 267828, 321264, 336714, 250074, 239598, 242148, 237204,
    232380, 246348, 226380, 219996, -10000, 342528, 401760, 284652, 338442,
    256464, 251466, 248640, 242964, 238992, 252960, 232992, 226608, -10000,
    -10000, 362280, 322932, 377574, 250962, 255732, 251916, 241674, 243420,
    257388, 237420, 231036, -10000, -10000, -10000, 360768, 411042, 291732,
    245382, 252696, 246828, 243216, 257184, 237216, 230832, -10000, -10000,
    -10000, -10000, 528768, 416622, 376782, 338118, 336930, 412806, 426774,
    406806, 400422, -10000, -10000, -10000, -10000, -10000, 369864, 325332,
    287796, 327612, 225432, 239400, 219432, 213048, -10000, -10000, -10000,
    -10000, -10000, -10000, 359160, 397428, 255636, 218748, 236268, 216300,
    209916, -10000, -10000, -10000, -10000, -10000, -10000, -10000, 331320,
    289620, 252732, 231768, 215352, 208968, -10000, -10000, -10000, -10000,
    -10000, -10000, -10000, -10000, 325152, 284580, 263616, 208716, 205884,
    -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000,
    321240, 296592, 241692, 200376, -10000, -10000, -10000, -10000, -10000,
    -10000, -10000, -10000, -10000, -10000, 348600, 294360, 253044, -10000,
    -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000, -10000,
    -10000, 308664, 233076, -10000, -10000, -10000, -10000, -10000, -10000,
    -10000, -10000, -10000, -10000, -10000, -10000, 295896
};

static int ichoose2[5] = { 0, 0, 2, 6, 12 };
static int pairpoints, runpoints;		/* Globals from pairuns. */

/*
 * scorehand:
 *	Score the given hand of n cards and the starter card.
 *	n must be <= 4
 * crb       : true if scoring crib
 * do_explain: true if must explain this hand 
 */
int
scorehand(CARD hand[], CARD starter, int n, bool crb, bool do_explain)
{
	int i, k;
	int score;
	bool flag;
	CARD h[(CINHAND + 1)];
	char buf[32];

	expl_string[0] = '\0';		/* initialize explanation */
	score = 0;
	flag = TRUE;
	k = hand[0].suit;
	for (i = 0; i < n; i++) {	/* check for flush */
		flag = (flag && (hand[i].suit == k));
		if (hand[i].rank == JACK)	/* check for his nobs */
			if (hand[i].suit == starter.suit) {
				score++;
				if (do_explain)
					strlcat(expl_string, "His Nobs", sizeof expl_string);
			}
		h[i] = hand[i];
	}

	if (flag && n >= CINHAND) {
		if (do_explain && expl_string[0] != '\0')
			strlcat(expl_string, ", ", sizeof expl_string);
		if (starter.suit == k) {
			score += 5;
			if (do_explain)
				strlcat(expl_string, "Five-flush", sizeof expl_string);
		} else
			if (!crb) {
				score += 4;
				if (do_explain && expl_string[0] != '\0')
					strlcat(expl_string, ", Four-flush", sizeof expl_string);
				else
					strlcpy(expl_string, "Four-flush", sizeof expl_string);
			}
	}
	if (do_explain && expl_string[0] != '\0')
		strlcat(expl_string, ", ", sizeof expl_string);
	h[n] = starter;
	sorthand(h, n + 1);	/* sort by rank */
	i = 2 * fifteens(h, n + 1);
	score += i;
	if (do_explain) {
		if (i > 0) {
			(void) snprintf(buf, sizeof buf,
			    "%d points in fifteens", i);
			strlcat(expl_string, buf, sizeof expl_string);
		} else
			strlcat(expl_string, "No fifteens", sizeof expl_string);
	}
	i = pairuns(h, n + 1);
	score += i;
	if (do_explain) {
		if (i > 0) {
			(void) snprintf(buf, sizeof buf,
			    ", %d points in pairs, %d in runs",
			    pairpoints, runpoints);
			strlcat(expl_string, buf, sizeof expl_string);
		} else
			strlcat(expl_string, ", No pairs/runs", sizeof expl_string);
	}
	return (score);
}

/*
 * fifteens:
 *	Return number of fifteens in hand of n cards
 */
int
fifteens(CARD hand[], int n)
{
	int *sp, *np;
	int i;
	CARD *endp;
	static int sums[15], nsums[15];

	np = nsums;
	sp = sums;
	i = 16;
	while (--i) {
		*np++ = 0;
		*sp++ = 0;
	}
	for (endp = &hand[n]; hand < endp; hand++) {
		i = hand->rank + 1;
		if (i > 10)
			i = 10;
		np = &nsums[i];
		np[-1]++;	/* one way to make this */
		sp = sums;
		while (i < 15) {
			*np++ += *sp++;
			i++;
		}
		sp = sums;
		np = nsums;
		i = 16;
		while (--i)
			*sp++ = *np++;
	}
	return sums[14];
}

/*
 * pairuns returns the number of points in the n card sorted hand
 * due to pairs and runs
 * this routine only works if n is strictly less than 6
 * sets the globals pairpoints and runpoints appropriately
 */
int
pairuns(CARD h[], int n)
{
	int i;
	int runlength, runmult, lastmult, curmult;
	int mult1, mult2, pair1, pair2;
	bool run;

	run = TRUE;
	runlength = 1;
	mult1 = 1;
	pair1 = -1;
	mult2 = 1;
	pair2 = -1;
	curmult = runmult = 1;
	for (i = 1; i < n; i++) {
		lastmult = curmult;
		if (h[i].rank == h[i - 1].rank) {
			if (pair1 < 0) {
				pair1 = h[i].rank;
				mult1 = curmult = 2;
			} else {
				if (h[i].rank == pair1) {
					curmult = ++mult1;
				} else {
					if (pair2 < 0) {
						pair2 = h[i].rank;
						mult2 = curmult = 2;
					} else {
						curmult = ++mult2;
					}
				}
			}
			if (i == (n - 1) && run) {
				runmult *= curmult;
			}
		} else {
			curmult = 1;
			if (h[i].rank == h[i - 1].rank + 1) {
				if (run) {
					++runlength;
				} else {
							/* only if old short */
					if (runlength < 3) {
						run = TRUE;
						runlength = 2;
						runmult = 1;
					}
				}
				runmult *= lastmult;
			} else {
							/* if just ended */
				if (run)
					runmult *= lastmult;
				run = FALSE;
			}
		}
	}
	pairpoints = ichoose2[mult1] + ichoose2[mult2];
	runpoints = (runlength >= 3 ? runlength * runmult : 0);
	return (pairpoints + runpoints);
}

/*
 * pegscore tells how many points crd would get if played after
 * the n cards in tbl during pegging
 */
int
pegscore(CARD crd, CARD tbl[], int n, int sum)
{
	bool got[RANKS];
	int i, j, scr;
	int k, lo, hi;

	sum += VAL(crd.rank);
	if (sum > 31)
		return (-1);
	if (sum == 31 || sum == 15)
		scr = 2;
	else
		scr = 0;
	if (!n)
		return (scr);
	j = 1;
	while ((j <= n) && (crd.rank == tbl[n - j].rank))
		++j;
	if (j > 1)
		return (scr + ichoose2[j]);
	if (n < 2)
		return (scr);
	lo = hi = crd.rank;
	for (i = 0; i < RANKS; i++)
		got[i] = FALSE;
	got[crd.rank] = TRUE;
	k = -1;
	for (i = n - 1; i >= 0; --i) {
		if (got[tbl[i].rank])
			break;
		got[tbl[i].rank] = TRUE;
		if (tbl[i].rank < lo)
			lo = tbl[i].rank;
		if (tbl[i].rank > hi)
			hi = tbl[i].rank;
		for (j = lo; j <= hi; j++)
			if (!got[j])
				break;
		if (j > hi)
			k = hi - lo + 1;
	}
	if (k >= 3)
		return (scr + k);
	else
		return (scr);
}

/*
 * adjust takes a two card hand that will be put in the crib
 * and returns an adjusted normalized score for the number of
 * points such a crib will get.
 */
int
adjust(CARD cb[], CARD tnv)
{
	long scr;
	int i, c0, c1;

	c0 = cb[0].rank;
	c1 = cb[1].rank;
	if (c0 > c1) {
		i = c0;
		c0 = c1;
		c1 = i;
	}
	if (cb[0].suit != cb[1].suit)
		scr = crbnescr[RANKS * c0 + c1];
	else
		scr = crbescr[RANKS * c0 + c1];
	if (scr <= 0) {
		printf("\nADJUST: internal error %d %d\n", c0, c1);
		exit(93);
	}
	return ((scr + 29400) / 58800);
}
@


1.10
log
@Do not read from index -1 of an array.
NetBSD rev. 1.16 (Oct 13, 2012) by dholland@@NetBSD via maintainer pjanzen@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.9 2009/10/27 23:59:24 deraadt Exp $	*/
a32 2
#include <curses.h>
#include <stdio.h>
a35 1
#include "deck.h"
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.8 2004/07/10 07:26:23 deraadt Exp $	*/
d298 1
a298 1
	while ((crd.rank == tbl[n - j].rank) && (n - j >= 0))
@


1.8
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.7 2004/01/16 00:13:18 espie Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)score.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: score.c,v 1.7 2004/01/16 00:13:18 espie Exp $";
#endif
#endif /* not lint */
@


1.7
log
@ISO C police: log and expl are reserved for the C library.
expl -> expl_string
log -> logit
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.6 2003/06/03 03:01:39 millert Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: score.c,v 1.6 2003/06/03 03:01:39 millert Exp $";
d106 2
d110 1
a110 6
scorehand(hand, starter, n, crb, do_explain)
	CARD hand[];
	CARD starter;
	int n;
	bool crb;		/* true if scoring crib */
	bool do_explain;	/* true if must explain this hand */
d182 1
a182 3
fifteens(hand, n)
	CARD hand[];
	int n;
d223 1
a223 3
pairuns(h, n)
	CARD h[];
	int n;
d290 1
a290 3
pegscore(crd, tbl, n, sum)
	CARD crd, tbl[];
	int n, sum;
d343 1
a343 2
adjust(cb, tnv)
	CARD cb[], tnv;
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.5 2003/04/06 18:50:36 deraadt Exp $	*/
d37 1
a37 1
static char rcsid[] = "$OpenBSD: score.c,v 1.5 2003/04/06 18:50:36 deraadt Exp $";
d121 1
a121 1
	expl[0] = '\0';		/* initialize explanation */
d131 1
a131 1
					strlcat(expl, "His Nobs", sizeof expl);
d137 2
a138 2
		if (do_explain && expl[0] != '\0')
			strlcat(expl, ", ", sizeof expl);
d142 1
a142 1
				strlcat(expl, "Five-flush", sizeof expl);
d146 2
a147 2
				if (do_explain && expl[0] != '\0')
					strlcat(expl, ", Four-flush", sizeof expl);
d149 1
a149 1
					strlcpy(expl, "Four-flush", sizeof expl);
d152 2
a153 2
	if (do_explain && expl[0] != '\0')
		strlcat(expl, ", ", sizeof expl);
d162 1
a162 1
			strlcat(expl, buf, sizeof expl);
d164 1
a164 1
			strlcat(expl, "No fifteens", sizeof expl);
d173 1
a173 1
			strlcat(expl, buf, sizeof expl);
d175 1
a175 1
			strlcat(expl, ", No pairs/runs", sizeof expl);
@


1.5
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.4 2001/08/10 23:50:22 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static char rcsid[] = "$OpenBSD: score.c,v 1.4 2001/08/10 23:50:22 pjanzen Exp $";
@


1.4
log
@-m option for muggins
better user input parsing
man page tidying and syncing of rules to Hoyle's
typo and context correction in "Hoyle's" transcription
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.3 1999/11/29 06:42:20 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: score.c,v 1.3 1999/11/29 06:42:20 millert Exp $";
d135 1
a135 1
					strcat(expl, "His Nobs");
d142 1
a142 1
			strcat(expl, ", ");
d146 1
a146 1
				strcat(expl, "Five-flush");
d151 1
a151 1
					strcat(expl, ", Four-flush");
d153 1
a153 1
					strcpy(expl, "Four-flush");
d157 1
a157 1
		strcat(expl, ", ");
d164 3
a166 2
			(void) sprintf(buf, "%d points in fifteens", i);
			strcat(expl, buf);
d168 1
a168 1
			strcat(expl, "No fifteens");
d174 2
a175 1
			(void) sprintf(buf, ", %d points in pairs, %d in runs",
d177 1
a177 1
			strcat(expl, buf);
d179 1
a179 1
			strcat(expl, ", No pairs/runs");
@


1.3
log
@Kill BOOLEAN, just use the curses/c++ bool type instead.
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.2 1998/08/19 07:40:24 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: score.c,v 1.2 1998/08/19 07:40:24 pjanzen Exp $";
d131 1
a131 1
		if (hand[i].rank == JACK)	/* check for his nibs */
@


1.2
log
@tags, formatting, ANSI-fication, prototypes, de-typos, and the occasional
initialization, removal of unused variable, or other minor fix.  Most
changes are from or inspired by NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d116 2
a117 2
	BOOLEAN crb;		/* true if scoring crib */
	BOOLEAN do_explain;	/* true if must explain this hand */
d121 1
a121 1
	BOOLEAN flag;
d237 1
a237 1
	BOOLEAN run;
d303 1
a303 1
	BOOLEAN got[RANKS];
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: score.c,v 1.3 1995/03/21 15:08:57 cgd Exp $";
d113 1
a113 1
	register CARD hand[];
d119 3
a121 3
	register int i, k;
	register int score;
	register BOOLEAN flag;
d125 1
a125 1
	expl[0] = NULL;		/* initialize explanation */
d141 1
a141 1
		if (do_explain && expl[0] != NULL)
d150 1
a150 1
				if (do_explain && expl[0] != NULL)
d156 1
a156 1
	if (do_explain && expl[0] != NULL)
d162 1
a162 1
	if (do_explain)
d168 1
d171 1
a171 1
	if (do_explain)
d178 1
d188 1
a188 1
	register CARD hand[];
d191 3
a193 3
	register int *sp, *np;
	register int i;
	register CARD *endp;
d234 1
a234 1
	register int i;
d304 1
a304 1
	register int i, j, scr;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
