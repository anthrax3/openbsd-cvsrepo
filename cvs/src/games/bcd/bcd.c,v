head	1.25;
access;
symbols
	OPENBSD_6_1_BASE:1.25
	OPENBSD_6_0:1.25.0.2
	OPENBSD_6_0_BASE:1.25
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.13.0.22
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.20
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.10
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.6
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.4
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.2
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.11.0.14
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.12
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.10
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.8
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.6
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.10
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.8
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.6
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2016.03.07.12.07.55;	author mestre;	state Exp;
branches;
next	1.24;
commitid	NZhYxChmyb9vOEMM;

1.24
date	2016.01.08.20.15.15;	author mestre;	state Exp;
branches;
next	1.23;
commitid	nmgNqNBwS0dDcaEQ;

1.23
date	2016.01.07.16.00.31;	author tb;	state Exp;
branches;
next	1.22;
commitid	IwzFE3fG5RnKTWNh;

1.22
date	2015.10.23.02.01.15;	author jsg;	state Exp;
branches;
next	1.21;
commitid	UP7jsVNjadNAJ49v;

1.21
date	2015.10.14.08.12.12;	author doug;	state Exp;
branches;
next	1.20;
commitid	l6H409xsPGcs6ezU;

1.20
date	2014.11.07.22.17.49;	author schwarze;	state Exp;
branches;
next	1.19;
commitid	dP6c7Z23zuUAAYuQ;

1.19
date	2014.11.06.19.54.10;	author tedu;	state Exp;
branches;
next	1.18;
commitid	jf8fq4u7sApOMX9p;

1.18
date	2014.11.06.19.42.06;	author tedu;	state Exp;
branches;
next	1.17;
commitid	wUaoAZyWQTBv78k5;

1.17
date	2014.11.06.19.35.13;	author tedu;	state Exp;
branches;
next	1.16;
commitid	V9ienV4AwhkBrosU;

1.16
date	2014.11.04.17.58.26;	author tedu;	state Exp;
branches;
next	1.15;
commitid	5GTSQRGWro4Sk3Lu;

1.15
date	2014.11.04.17.52.12;	author tedu;	state Exp;
branches;
next	1.14;
commitid	8e1MD9u4TEkvbvgu;

1.14
date	2014.11.04.17.50.23;	author tedu;	state Exp;
branches;
next	1.13;
commitid	3F7bSpbuKHjfTYcz;

1.13
date	2009.10.27.23.59.24;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2007.09.11.15.21.05;	author gilles;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.09.15.59.26;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.10.00.03.01;	author david;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.03.01.39;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.31.03.40.00;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.09;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	99.09.25.15.52.09;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	98.08.19.07.40.15;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	97.01.17.07.10.50;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.22.20.00.56;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.12.19.22.21.08;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.44;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.44;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@- General changes:
- Remove -? from getopt(3) options, but still keep (or add) -h where applicable
- Replace hardcoded program strings by getprogname(3)

- Specific changes:
- atc(6): this used -? and -u for usage(), remove both from game and manpage
- bcd(6): use __progname instead of getprogname(3), no need to include stdlib.h
- hunt(6): replace fputs(3) by fprintf(3)

OK tb@@ after his suggestions
@
text
@/*	$OpenBSD: bcd.c,v 1.24 2016/01/08 20:15:15 mestre Exp $	*/
/*	$NetBSD: bcd.c,v 1.6 1995/04/24 12:22:23 cgd Exp $	*/

/*
 * Copyright (c) 1989, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Steve Hayman of the Indiana University Computer Science Dept.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * bcd --
 *
 * Read one line of standard input and produce something that looks like a
 * punch card.  An attempt to reimplement /usr/games/bcd.  All I looked at
 * was the man page.
 *
 * I couldn't find a BCD table handy so I wrote a shell script to deduce what
 * the patterns were that the old bcd was using for each possible 8-bit
 * character.  These are the results -- the low order 12 bits represent the
 * holes.  (A 1 bit is a hole.)  These may be wrong, but they match the old
 * program!
 *
 * Steve Hayman
 * sahayman@@iuvax.cs.indiana.edu
 * 1989 11 30
 *
 *
 * I found an error in the table. The same error is found in the SunOS 4.1.1
 * version of bcd. It has apparently been around a long time. The error caused
 * 'Q' and 'R' to have the same punch code. I only noticed the error due to
 * someone pointing it out to me when the program was used to print a cover
 * for an APA!  The table was wrong in 4 places. The other error was masked
 * by the fact that the input is converted to upper case before lookup.
 *
 * Dyane Bruce
 * db@@diana.ocunix.on.ca
 * Nov 5, 1993
 */

#include <err.h>
#include <ctype.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

u_short holes[256] = {
    0x0,	 0x0,	  0x0,	   0x0,	    0x0,     0x0,     0x0,     0x0,
    0x0,	 0x0,	  0x0,	   0x0,	    0x0,     0x0,     0x0,     0x0,
    0x0,	 0x0,	  0x0,	   0x0,	    0x0,     0x0,     0x0,     0x0,
    0x0,	 0x0,	  0x0,	   0x0,	    0x0,     0x0,     0x0,     0x0,
    0x0,	 0x206,	  0x20a,   0x042,   0x442,   0x222,   0x800,   0x406,
    0x812,	 0x412,	  0x422,   0xa00,   0x242,   0x400,   0x842,   0x300,
    0x200,	 0x100,	  0x080,   0x040,   0x020,   0x010,   0x008,   0x004,
    0x002,	 0x001,	  0x012,   0x40a,   0x80a,   0x212,   0x00a,   0x006,
    0x022,	 0x900,	  0x880,   0x840,   0x820,   0x810,   0x808,   0x804,
    0x802,	 0x801,	  0x500,   0x480,   0x440,   0x420,   0x410,   0x408,
    0x404,	 0x402,	  0x401,   0x280,   0x240,   0x220,   0x210,   0x208,
    0x204,	 0x202,	  0x201,   0x082,   0x822,   0x600,   0x282,   0x30f,
    0x900,	 0x880,	  0x840,   0x820,   0x810,   0x808,   0x804,   0x802,
    0x801,	 0x500,	  0x480,   0x440,   0x420,   0x410,   0x408,   0x404,
    0x402,	 0x401,	  0x280,   0x240,   0x220,   0x210,   0x208,   0x204,
    0x202,	 0x201,	  0x082,   0x806,   0x822,   0x600,   0x282,   0x0,
    0x0,	 0x0,	  0x0,	   0x0,	    0x0,     0x0,     0x0,     0x0,
    0x0,	 0x0,	  0x0,	   0x0,	    0x0,     0x0,     0x0,     0x0,
    0x0,	 0x0,	  0x0,	   0x0,	    0x0,     0x0,     0x0,     0x0,
    0x0,	 0x0,	  0x0,	   0x0,	    0x0,     0x0,     0x0,     0x0,
    0x206,	 0x20a,	  0x042,   0x442,   0x222,   0x800,   0x406,   0x812,
    0x412,	 0x422,	  0xa00,   0x242,   0x400,   0x842,   0x300,   0x200,
    0x100,	 0x080,	  0x040,   0x020,   0x010,   0x008,   0x004,   0x002,
    0x001,	 0x012,	  0x40a,   0x80a,   0x212,   0x00a,   0x006,   0x022,
    0x900,	 0x880,	  0x840,   0x820,   0x810,   0x808,   0x804,   0x802,
    0x801,	 0x500,	  0x480,   0x440,   0x420,   0x410,   0x408,   0x404,
    0x402,	 0x401,	  0x280,   0x240,   0x220,   0x210,   0x208,   0x204,
    0x202,	 0x201,	  0x082,   0x806,   0x822,   0x600,   0x282,   0x30f,
    0x900,	 0x880,	  0x840,   0x820,   0x810,   0x808,   0x804,   0x802,
    0x801,	 0x500,	  0x480,   0x440,   0x420,   0x410,   0x408,   0x404,
    0x402,	 0x401,	  0x280,   0x240,   0x220,   0x210,   0x208,   0x204,
    0x202,	 0x201,	  0x082,   0x806,   0x822,   0x600,   0x282,   0x0
};

/*
 * i'th bit of w.
 */
#define	bit(w,i)	((w)&(1<<(i)))

void	printonecard(char *, size_t);
void	printcard(char *);
int	decode(char *buf);

int	columns	= 48;

int
main(int argc, char *argv[])
{
	char cardline[1024];
	extern char *__progname;
	int dflag = 0;
	int ch;

	if (pledge("stdio", NULL) == -1)
		err(1, "pledge");

	while ((ch = getopt(argc, argv, "dl")) != -1) {
		switch (ch) {
		case 'd':
			dflag = 1;
			break;
		case 'l':
			columns = 80;
			break;
		default:
			fprintf(stderr, "usage: %s [-l] [string ...]\n",
			    __progname);
			fprintf(stderr, "usage: %s -d [-l]\n", __progname);
			return 1;
		}
	}
	argc -= optind;
	argv += optind;

	if (dflag) {
		while (decode(cardline) == 0) {
			printf("%s\n", cardline);
		}
		return 0;
	}


	/*
	 * The original bcd prompts with a "%" when reading from stdin,
	 * but this seems kind of silly.  So this one doesn't.
	 */
	if (argc > 0) {
		while (argc--) {
			printcard(*argv);
			argv++;
		}
	} else {
		while (fgets(cardline, sizeof(cardline), stdin))
			printcard(cardline);
	}
	return 0;
}

void
printcard(char *str)
{
	size_t len = strlen(str);

	while (len > 0) {
		size_t amt = len > columns ? columns : len;
		printonecard(str, amt);
		str += amt;
		len -= amt;
	}
}

void
printonecard(char *str, size_t len)
{
	static const char rowchars[] = "   123456789";
	int	i, row;
	char	*p, *end;

	end = str + len;

	/* make string upper case. */
	for (p = str; p < end; ++p)
		*p = toupper((unsigned char)*p);

	/* top of card */
	putchar(' ');
	for (i = 1; i <= columns; ++i)
		putchar('_');
	putchar('\n');

	/*
	 * line of text.  Leave a blank if the character doesn't have
	 * a hole pattern.
	 */
	p = str;
	putchar('/');
	for (i = 1; p < end; i++, p++)
		if (holes[(unsigned char)*p])
			putchar(*p);
		else
			putchar(' ');
	while (i++ <= columns)
		putchar(' ');
	putchar('|');
	putchar('\n');

	/*
	 * 12 rows of potential holes; output a ']', which looks kind of
	 * like a hole, if the appropriate bit is set in the holes[] table.
	 * The original bcd output a '[', a backspace, five control A's,
	 * and then a ']'.  This seems a little excessive.
	 */
	for (row = 0; row <= 11; ++row) {
		putchar('|');
		for (i = 0, p = str; p < end; i++, p++) {
			if (bit(holes[(unsigned char)*p], 11 - row))
				putchar(']');
			else
				putchar(rowchars[row]);
		}
		while (i++ < columns)
			putchar(rowchars[row]);
		putchar('|');
		putchar('\n');
	}

	/* bottom of card */
	putchar('|');
	for (i = 1; i <= columns; i++)
		putchar('_');
	putchar('|');
	putchar('\n');
}

#define LINES 12

int
decode(char *buf)
{
	int col, i;
	char lines[LINES][1024];
	char tmp[1024];

	/* top of card; if missing signal no more input */
	if (fgets(tmp, sizeof(tmp), stdin) == NULL)
		return 1;
	/* text line, ignored */
	if (fgets(tmp, sizeof(tmp), stdin) == NULL)
		return -1;
	/* twelve lines of data */
	for (i = 0; i < LINES; i++)
		if (fgets(lines[i], sizeof(lines[i]), stdin) == NULL)
			return -1;
	/* bottom of card */
	if (fgets(tmp, sizeof(tmp), stdin) == NULL)
		return -1;

	for (i = 0; i < LINES; i++) {
		if (strlen(lines[i]) < columns + 2)
			return -1;
		if (lines[i][0] != '|' || lines[i][columns + 1] != '|')
			return -1;
		memmove(&lines[i][0], &lines[i][1], columns);
		lines[i][columns] = 0;
	}
	for (col = 0; col < columns; col++) {
		unsigned int val = 0;
		for (i = 0; i < LINES; i++)
			if (lines[i][col] == ']')
				val |= 1 << (11 - i);
		buf[col] = ' ';
		for (i = 0; i < 256; i++)
			if (holes[i] == val && holes[i]) {
				buf[col] = i;
				break;
			}
	}
	buf[col] = 0;
	for (col = columns - 1; col >= 0; col--) {
		if (buf[col] == ' ')
			buf[col] = '\0';
		else
			break;
	}
	return 0;
}
@


1.24
log
@Straightforward headers cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.23 2016/01/07 16:00:31 tb Exp $	*/
a117 1

d122 1
d138 3
a140 2
			fprintf(stderr, "usage: bcd [-l] [string ...]\n");
			fprintf(stderr, "usage: bcd -d [-l]\n");
@


1.23
log
@Some basic code maintenance in games/

- in main() replace exit with return
- drop some /* NOTREACHED */ lint comments along the way.
- make more use of standard CFLAGS, esp. -Wimplicit-function-declaration
- add and sort some headers when needed
- add straightforward pledges to some programs used at compile time

discussed with and ok mestre@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.22 2015/10/23 02:01:15 jsg Exp $	*/
d66 2
a67 1
#include <sys/types.h>
a68 1
#include <stdlib.h>
a69 1
#include <ctype.h>
a70 1
#include <err.h>
@


1.22
log
@include err.h for err() calls added with recent pledge commits.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.21 2015/10/14 08:12:12 doug Exp $	*/
d142 1
a142 1
			exit(1);
d169 1
a169 1
	exit(0);
@


1.21
log
@Pledge "stdio" for simple games.

ok semarie@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.20 2014/11/07 22:17:49 schwarze Exp $	*/
d72 1
@


1.20
log
@Split bcd(6), morse(6), and ppt(6) into three separate manuals
since most of the text is different.
Improve the SYNOPSIS according to suggestions by jmc@@, tweaked by me.
Delete a few redundant words, applying a patch from jmc@@.
Intentionally not doing any other text changes in this commit;
for further tweaking in the tree.

jmc@@, tedu@@, and millert@@ agree with the general direction, and
deraadt@@ suspects we are "all grey beard fanatics" (in all caps).
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.19 2014/11/06 19:54:10 tedu Exp $	*/
d126 3
@


1.19
log
@fixup argv handling after getopt conversion. oops.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.18 2014/11/06 19:42:06 tedu Exp $	*/
d136 2
a137 1
			fprintf(stderr, "unknown option");
@


1.18
log
@-l option to create "modern" 80 column cards
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.17 2014/11/06 19:35:13 tedu Exp $	*/
d155 3
a157 2
	if (argc > 1) {
		while (--argc) {
a158 1
			printcard(*argv);
@


1.17
log
@basic decode functionality
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.16 2014/11/04 17:58:26 tedu Exp $	*/
d117 1
a117 1
#define	COLUMNS	48
d124 26
a155 6
		if (strcmp(argv[1], "-d") == 0) {
			while (decode(cardline) == 0) {
				printf("%s\n", cardline);
			}
			return 0;
		}
d173 1
a173 1
		size_t amt = len > COLUMNS ? COLUMNS : len;
d193 1
a193 5
	for (p = str; p < end; p++) {
		printf("%c: %x\n", *p, holes[(unsigned char)*p]);
	}

	 /* top of card */
d195 1
a195 1
	for (i = 1; i <= COLUMNS; ++i)
d210 1
a210 1
	while (i++ <= COLUMNS)
d229 1
a229 1
		while (i++ < COLUMNS)
d237 1
a237 1
	for (i = 1; i <= COLUMNS; i++)
d267 1
a267 1
		if (strlen(lines[i]) < COLUMNS + 2)
d269 1
a269 1
		if (lines[i][0] != '|' || lines[i][COLUMNS + 1] != '|')
d271 2
a272 2
		memmove(&lines[i][0], &lines[i][1], COLUMNS);
		lines[i][COLUMNS] = 0;
d274 1
a274 1
	for (col = 0; col < COLUMNS; col++) {
d287 1
a287 1
	for (col = COLUMNS - 1; col >= 0; col--) {
@


1.16
log
@make the long line code work with argv too
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.15 2014/11/04 17:52:12 tedu Exp $	*/
d115 1
d123 1
d130 6
a140 1
		char cardline[1024];
d173 4
d225 53
@


1.15
log
@fix another signed char bug. while here, toupper() is now safe to call
on any char value.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.14 2014/11/04 17:50:23 tedu Exp $	*/
d113 2
a114 1
void	printcard(char *, size_t);
d130 1
a130 1
			printcard(*argv, strlen(*argv));
d134 2
a135 10
		while (fgets(cardline, sizeof(cardline), stdin)) {
			char *p = cardline;
			size_t len = strlen(p);
			while (len > 0) {
				size_t amt = len > COLUMNS ? COLUMNS : len;
				printcard(p, amt);
				p += amt;
				len -= amt;
			}
		}
d141 14
a154 1
printcard(char *str, size_t len)
@


1.14
log
@allow printing longer lines than fit on a card by spilling onto more cards.
don't negatively index into the table for signed chars.
ok pjanzen
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.13 2009/10/27 23:59:24 deraadt Exp $	*/
d158 1
a158 2
		if (isascii(*p) && islower(*p))
			*p = toupper(*p);
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.12 2007/09/11 15:21:05 gilles Exp $	*/
d113 4
a116 1
void	printcard(char *);
a120 1
	char cardline[80];
a125 1

d127 17
a143 5
		while (--argc)
			printcard(*++argv);
	} else
		while (fgets(cardline, sizeof(cardline), stdin))
			printcard(cardline);
a146 2
#define	COLUMNS	48

d148 1
a148 1
printcard(char *str)
d152 1
a152 4
	char	*p;

	/* ruthlessly remove newlines and truncate at 48 characters. */
	str[strcspn(str, "\n")] = '\0';
d154 1
a154 2
	if (strlen(str) > COLUMNS)
		str[COLUMNS] = '\0';
d157 1
a157 1
	for (p = str; *p; ++p)
d173 2
a174 2
	for (i = 1; *p; i++, p++)
		if (holes[(int)*p])
d191 2
a192 2
		for (i = 0, p = str; *p; i++, p++) {
			if (bit(holes[(int)*p], 11 - row))
@


1.12
log
@use strcspn to properly overwrite '\n' in fgets returned buffer

ok pyr@@, ray@@, millert@@, moritz@@, chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.11 2004/07/09 15:59:26 deraadt Exp $	*/
a34 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1989, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)bcd.c	8.2 (Berkeley) 3/20/94";
#else
static char rcsid[] = "$OpenBSD: bcd.c,v 1.11 2004/07/09 15:59:26 deraadt Exp $";
#endif
#endif /* not lint */
@


1.11
log
@ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.10 2003/07/10 00:03:01 david Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: bcd.c,v 1.10 2003/07/10 00:03:01 david Exp $";
d158 1
a158 2
	if ((p = strchr(str, '\n')))
		*p = '\0';
@


1.10
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.9 2003/06/03 03:01:39 millert Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: bcd.c,v 1.9 2003/06/03 03:01:39 millert Exp $";
d130 1
a130 3
main(argc, argv)
	int argc;
	char **argv;
d151 1
a151 2
printcard(str)
	char *str;
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.8 2002/05/31 03:40:00 pjanzen Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: bcd.c,v 1.8 2002/05/31 03:40:00 pjanzen Exp $";
d82 1
@


1.8
log
@No dm -> no need to revoke setegid.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.7 2002/02/16 21:27:09 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d46 1
a46 1
static char rcsid[] = "$OpenBSD: bcd.c,v 1.7 2002/02/16 21:27:09 millert Exp $";
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.6 1999/09/25 15:52:09 pjanzen Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: bcd.c,v 1.6 1999/09/25 15:52:09 pjanzen Exp $";
a142 4

	/* revoke privs */
	setegid(getgid());
	setgid(getgid());
@


1.6
log
@Tidying and minor changes from or based on jsm28@@cam.ac.uk's work for the
Linux bsd-games package and NetBSD.  Mainly using 'const'.
@
text
@d1 1
a1 1
/*	$OpenBSD: bcd.c,v 1.5 1998/08/19 07:40:15 pjanzen Exp $	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD: bcd.c,v 1.5 1998/08/19 07:40:15 pjanzen Exp $";
d130 1
a130 1
void	printcard __P((char *));
@


1.5
log
@tags, formatting, ANSI-fication, prototypes, de-typos, and the occasional
initialization, removal of unused variable, or other minor fix.  Most
changes are from or inspired by NetBSD.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d50 1
a50 1
static char rcsid[] = "$OpenBSD$";
d163 3
a165 3
	static char rowchars[] = "   123456789";
	register int	i, row;
	register char	*p;
@


1.4
log
@r?index -> strr?chr
@
text
@d1 1
d47 1
d49 3
a84 1

d88 1
d130 2
d159 1
d161 1
a161 1
	register char *str;
d164 2
a165 2
	register int i, row;
	register char *p;
d192 1
a192 1
		if (holes[*p])
d210 1
a210 1
			if (bit(holes[*p], 11 - row))
@


1.3
log
@proper gid revoke
@
text
@a157 1
	char *index();
d160 1
a160 1
	if ((p = index(str, '\n')))
@


1.2
log
@setgid games, not setuid games. closes a neat set of holes
@
text
@d137 2
@


1.1
log
@Initial revision
@
text
@d137 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
