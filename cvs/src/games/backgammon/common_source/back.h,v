head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.6
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.4
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.13.0.8
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.4
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.28
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.26
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.24
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.22
	OPENBSD_5_0:1.11.0.20
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.18
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.16
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.12
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.14
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.10
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.8
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.6
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.4
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.9.0.14
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.9.0.12
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.10
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.8
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.6
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2015.12.26.00.26.39;	author mestre;	state Exp;
branches;
next	1.14;
commitid	NcBz9zfScw6TwPoT;

1.14
date	2015.12.02.20.05.01;	author tb;	state Exp;
branches;
next	1.13;
commitid	d7NTsg9vGQclKcoo;

1.13
date	2014.04.25.20.23.37;	author schwarze;	state Exp;
branches;
next	1.12;

1.12
date	2013.08.29.20.22.10;	author naddy;	state Exp;
branches;
next	1.11;

1.11
date	2006.12.14.10.14.05;	author martin;	state Exp;
branches;
next	1.10;

1.10
date	2006.10.29.20.02.41;	author martin;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.03.01.38;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.30.05.27.49;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.08;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.23.23.50.02;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.18.03.32.52;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	99.07.31.21.57.40;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.09.02.06.46.51;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	98.03.19.11.13.14;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.40;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.40;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Set as __dead a few more functions, that don't return, on games/

With precious tip, help and also OK from tb@@
@
text
@/*	$OpenBSD: back.h,v 1.14 2015/12/02 20:05:01 tb Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)back.h	8.1 (Berkeley) 5/31/93
 */

#include <sys/types.h>
#include <sys/uio.h>

#include <curses.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <term.h>
#include <unistd.h>

#define rnum(r)	arc4random_uniform(r)
#define D0	dice[0]
#define D1	dice[1]
#define swap	{D0 ^= D1; D1 ^= D0; D0 ^= D1; d0 = 1-d0;}
 
#define CIN_SIZE 40

#ifdef DEBUG
extern FILE	*ftrace;
#endif

/*
 *
 * Some numerical conventions:
 *
 *	Arrays have white's value in [0], red in [1].
 *	Numeric values which are one color or the other use
 *	-1 for white, 1 for red.
 *	Hence, white will be negative values, red positive one.
 *	This makes a lot of sense since white is going in decending
 *	order around the board, and red is ascending.
 *
 */

extern	const char	EXEC[];		/* object for main program */
extern	const char	TEACH[];	/* object for tutorial program */

extern	int	pnum;		/* color of player:
					-1 = white
					 1 = red
					 0 = both
					 2 = not yet init'ed */
extern	int	aflag;		/* flag to ask for rules or instructions */
extern	int	cflag;		/* case conversion flag */
extern	int	hflag;		/* flag for cleaning screen */
extern	int	mflag;		/* backgammon flag */
extern	int	raflag;		/* 'roll again' flag for recovered game */
extern	int	rflag;		/* recovered game flag */
extern	int	dflag;		/* disable doubling flag */
extern	int	rfl;		/* saved value of rflag */
extern	int	iroll;		/* special flag for inputting rolls */
extern	int	board[26];	/* board:  negative values are white,
				   positive are red */
extern	int	dice[2];	/* value of dice */
extern	int	mvlim;		/* 'move limit':  max. number of moves */
extern	int	mvl;		/* working copy of mvlim */
extern	int	p[5];		/* starting position of moves */
extern	int	g[5];		/* ending position of moves (goals) */
extern	int	h[4];		/* flag for each move if a man was hit */
extern	int	cturn;		/* whose turn it currently is:
					-1 = white
					 1 = red
					 0 = just quit
					-2 = white just lost
					 2 = red just lost */
extern	int	d0;		/* flag if dice have been reversed from
				   original position */
extern	int	table[6][6];	/* odds table for possible rolls */
extern	int	rscore;		/* red's score */
extern	int	wscore;		/* white's score */
extern	int	gvalue;		/* value of game (64 max.) */
extern	int	dlast;		/* who doubled last (0 = neither) */
extern	int	bar;		/* position of bar for current player */
extern	int	home;		/* position of home for current player */
extern	int	off[2];		/* number of men off board */
extern	int	*offptr;	/* pointer to off for current player */
extern	int	*offopp;	/* pointer to off for opponent */
extern	int	in[2];		/* number of men in inner table */
extern	int	*inptr;		/* pointer to in for current player */
extern	int	*inopp;		/* pointer to in for opponent */

extern	int	ncin;		/* number of characters in cin */
extern	char	cin[CIN_SIZE];	/* input line of current move
				   (used for reconstructing input after
				   a backspace) */

extern	const char	*const color[];	 /* colors as strings */
extern	const char	*const *colorptr;	/* color of current player */
extern	const char	*const *Colorptr;	/* color of current player,
						 * capitalized */
extern	int	colen;		/* length of color of current player */

extern	int	begscr;		/* 'beginning' of screen
				   (not including board) */

int	addbuf(int);
void	backone(int);
void	bsect(int, int, int, int);
int	canhit(int, int);
int	checkd(int);
int	checkmove(int);
int	count(void);
int	dotable(char, int);
void	errexit(const char *);
void	fboard(void);
void	fixcol(int, int, int, int, int);
void	fixpos(int, int, int, int, int);
void	getarg(int, char **);
void	getmove(void);
__dead void	getout(int);	/* function to exit backgammon cleanly */
void	gwrite(void);
void	init(void);
void	initcurses(void);
int	last(void);
int	makmove(int);
int	movallow(void);
void	movback(int);
void	moveplayers(void);
void	moverr(int);
int	movokay(int);
void	nexturn(void);
void	norec(const char *);
void	odds(int, int, int);
void	proll(void);
int	quit(void);
int	readc(void);
void	recover(const char *);
void	roll(void);
int	rsetbrd(void);
void	save(int);
int	text(const char *const *);
void	wrboard(void);
void	wrhit(int);
void	wrscore(void);
int	yorn(char);
@


1.14
log
@Drop the argument passing between backgammon and teachgammon.
It's broken.  Instead, make -d imply -n.  You're supposed to
know the rules before you start tweaking them.

Issue reported by and ok pjanzen@@
Patient help with the manual jmc@@
@
text
@d1 1
a1 1
/*	$OpenBSD: back.h,v 1.13 2014/04/25 20:23:37 schwarze Exp $	*/
d145 1
a145 1
void	getout(int);		/* function to exit backgammon cleanly */
@


1.13
log
@Security is square, gaming is hip,
so extend the Valhalla Rampage to where it really matters.

Tedu 118 lines of dead code containing 77 dead magic numbers,
rotting in the tree since June 24, 2001.

Spotted by and ok jsg@@, ok sthen@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: back.h,v 1.12 2013/08/29 20:22:10 naddy Exp $	*/
a77 2
extern	char	args[100];	/* args passed to teachgammon and back */
extern	int	acnt;		/* length of args */
@


1.12
log
@replace srandomdev()+random() with the arc4random*() family
tweaks and ok millert@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: back.h,v 1.11 2006/12/14 10:14:05 martin Exp $	*/
a169 1
void	wrbsub(void);
@


1.11
log
@fix DEBUG by renaming a variable colliding with ncurses

found by Sascha Welter, ok otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: back.h,v 1.10 2006/10/29 20:02:41 martin Exp $	*/
d46 1
a46 1
#define rnum(r)	(random()%r)
@


1.10
log
@-d: make it possible playing without doubling as it is not commonly
played everywhere in the world

ok todd@@ otto@@
@
text
@d1 1
a1 1
/*	$OpenBSD: back.h,v 1.9 2003/06/03 03:01:38 millert Exp $	*/
d54 1
a54 1
extern FILE	*trace;
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: back.h,v 1.8 2002/07/30 05:27:49 pjanzen Exp $	*/
d86 1
@


1.8
log
@Kill buffer overflow.
@
text
@d1 1
a1 1
/*	$OpenBSD: back.h,v 1.7 2002/02/16 21:27:08 millert Exp $	*/
d15 1
a15 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: back.h,v 1.6 2001/06/23 23:50:02 pjanzen Exp $	*/
d54 2
d123 1
a123 1
extern	char	cin[100];	/* input line of current move
@


1.6
log
@termios -> curses
@
text
@d1 1
a1 1
/*	$OpenBSD: back.h,v 1.5 2001/02/18 03:32:52 pjanzen Exp $	*/
d134 41
a174 41
int	addbuf __P((int));
void	backone __P((int));
void	bsect __P((int, int, int, int));
int	canhit __P((int, int));
int	checkd __P((int));
int	checkmove __P((int));
int	count __P((void));
int	dotable __P((char, int));
void	errexit __P((const char *));
void	fboard __P((void));
void	fixcol __P((int, int, int, int, int));
void	fixpos __P((int, int, int, int, int));
void	getarg __P((int, char **));
void	getmove __P((void));
void	getout __P((int));	/* function to exit backgammon cleanly */
void	gwrite __P((void));
void	init __P((void));
void	initcurses __P((void));
int	last __P((void));
int	makmove __P((int));
int	movallow __P((void));
void	movback __P((int));
void	moveplayers __P((void));
void	moverr __P((int));
int	movokay __P((int));
void	nexturn __P((void));
void	norec __P((const char *));
void	odds __P((int, int, int));
void	proll __P((void));
int	quit __P((void));
int	readc __P((void));
void	recover __P((const char *));
void	roll __P((void));
int	rsetbrd __P((void));
void	save __P((int));
int	text __P((const char *const *));
void	wrboard __P((void));
void	wrbsub __P((void));
void	wrhit __P((int));
void	wrscore __P((void));
int	yorn __P((char));
@


1.5
log
@Get this not to segfault on startup on alpha.
@
text
@d1 1
a1 1
/*	$OpenBSD: back.h,v 1.4 1999/07/31 21:57:40 pjanzen Exp $	*/
d41 1
a46 1
#include <termios.h>
a82 1
extern	int	bflag;		/* flag for automatic board printing */
a87 1
extern	int	tflag;		/* cursor addressing flag */
a130 4
extern	struct termios	old, noech, traw;/* original tty status */

extern	int	curr;		/* row position of cursor */
extern	int	curc;		/* column position of cursor */
a136 1
void	buflush __P((void));
a139 3
void	clear __P((void));
void	clend __P((void));
void	cline __P((void));
a140 1
void	curmove __P((int, int));
a142 1
void	fancyc __P((int));
a145 1
void	fixtty __P((struct termios *));
a146 1
int	getcaps __P((const char *));
d151 1
d156 1
a158 1
void	newpos __P((void));
a165 1
void	refresh __P((void));
a172 3
void	wrint __P((int));
void	writec __P((char));
void	writel __P((const char *));
@


1.4
log
@use const where appropriate (jsm28@@cam.ac.uk).  Also some very minor tidying.
@
text
@d1 1
a1 1
/*	$OpenBSD: back.h,v 1.3 1998/09/02 06:46:51 pjanzen Exp $	*/
d133 1
a133 1
extern	struct termios	old, noech, raw;/* original tty status */
@


1.3
log
@Delete two unused functions; jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: back.h,v 1.2 1998/03/19 11:13:14 pjanzen Exp $	*/
d72 2
a73 2
extern	char	EXEC[];		/* object for main program */
extern	char	TEACH[];	/* object for tutorial program */
d127 4
a130 3
extern	char	*color[];	 /* colors as strings */
extern	char	**colorptr;	/* color of current player */
extern	char	**Colorptr;	/* color of current player, capitalized */
d160 1
a160 1
int	getcaps __P((char *));
d173 1
a173 1
void	norec __P((char *));
d178 1
a178 1
void	recover __P((char *));
d183 1
a183 1
int	text __P((char **));
d189 1
a189 1
void	writel __P((char *));
@


1.2
log
@NetBSD changes and further improvements and corrections
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a181 1
void	strset __P((char *, char *));
a182 1
void	tos __P((void));
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: back.h,v 1.5 1995/04/29 00:44:10 mycroft Exp $	*/
d38 6
a43 1
#include <termios.h>
d46 3
d55 4
d72 2
a73 2
char	EXEC[];			/* object for main program */
char	TEACH[];		/* object for tutorial program */
d75 1
a75 1
int	pnum;			/* color of player:
d80 13
a92 13
char	args[100];		/* args passed to teachgammon and back */
int	acnt;			/* length of args */
int	aflag;			/* flag to ask for rules or instructions */
int	bflag;			/* flag for automatic board printing */
int	cflag;			/* case conversion flag */
int	hflag;			/* flag for cleaning screen */
int	mflag;			/* backgammon flag */
int	raflag;			/* 'roll again' flag for recovered game */
int	rflag;			/* recovered game flag */
int	tflag;			/* cursor addressing flag */
int	rfl;			/* saved value of rflag */
int	iroll;			/* special flag for inputting rolls */
int	board[26];		/* board:  negative values are white,
d94 7
a100 7
int	dice[2];		/* value of dice */
int	mvlim;			/* 'move limit':  max. number of moves */
int	mvl;			/* working copy of mvlim */
int	p[5];			/* starting position of moves */
int	g[5];			/* ending position of moves (goals) */
int	h[4];			/* flag for each move if a man was hit */
int	cturn;			/* whose turn it currently is:
d103 1
a103 1
					 0 = just quitted
d106 1
a106 1
int	d0;			/* flag if dice have been reversed from
d108 13
a120 13
int	table[6][6];		/* odds table for possible rolls */
int	rscore;			/* red's score */
int	wscore;			/* white's score */
int	gvalue;			/* value of game (64 max.) */
int	dlast;			/* who doubled last (0 = neither) */
int	bar;			/* position of bar for current player */
int	home;			/* position of home for current player */
int	off[2];			/* number of men off board */
int	*offptr;		/* pointer to off for current player */
int	*offopp;		/* pointer to off for opponent */
int	in[2];			/* number of men in inner table */
int	*inptr;			/* pointer to in for current player */
int	*inopp;			/* pointer to in for opponent */
d122 2
a123 2
int	ncin;			/* number of characters in cin */
char	cin[100];		/* input line of current move
d127 10
a136 11
char	*color[];
				/* colors as strings */
char	**colorptr;		/* color of current player */
char	**Colorptr;		/* color of current player, capitalized */
int	colen;			/* length of color of current player */

struct termios	old, noech, raw;/* original tty status */

int	curr;			/* row position of cursor */
int	curc;			/* column position of cursor */
int	begscr;			/* 'beginning' of screen
d139 54
a192 1
int	getout();		/* function to exit backgammon cleanly */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

