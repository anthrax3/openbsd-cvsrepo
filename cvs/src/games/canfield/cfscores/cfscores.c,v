head	1.23;
access;
symbols
	OPENBSD_6_0:1.23.0.4
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.23.0.2
	OPENBSD_5_9_BASE:1.23
	OPENBSD_5_8:1.15.0.26
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.18
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.22
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.20
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.16
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.4
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.13.0.16
	OPENBSD_4_5_BASE:1.13
	OPENBSD_4_4:1.13.0.14
	OPENBSD_4_4_BASE:1.13
	OPENBSD_4_3:1.13.0.12
	OPENBSD_4_3_BASE:1.13
	OPENBSD_4_2:1.13.0.10
	OPENBSD_4_2_BASE:1.13
	OPENBSD_4_1:1.13.0.8
	OPENBSD_4_1_BASE:1.13
	OPENBSD_4_0:1.13.0.6
	OPENBSD_4_0_BASE:1.13
	OPENBSD_3_9:1.13.0.4
	OPENBSD_3_9_BASE:1.13
	OPENBSD_3_8:1.13.0.2
	OPENBSD_3_8_BASE:1.13
	OPENBSD_3_7:1.12.0.4
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.2
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.11.0.4
	OPENBSD_3_5_BASE:1.11
	OPENBSD_3_4:1.11.0.2
	OPENBSD_3_4_BASE:1.11
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.8.0.2
	OPENBSD_3_1_BASE:1.8
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.23
date	2016.01.08.20.23.54;	author mestre;	state Exp;
branches;
next	1.22;
commitid	xPg8LsLa17FBqCPR;

1.22
date	2016.01.07.16.00.32;	author tb;	state Exp;
branches;
next	1.21;
commitid	IwzFE3fG5RnKTWNh;

1.21
date	2015.12.02.18.34.10;	author tb;	state Exp;
branches;
next	1.20;
commitid	DDAJ2VUhNI5mHNPm;

1.20
date	2015.11.30.08.38.13;	author tb;	state Exp;
branches;
next	1.19;
commitid	7WpGq3J5O51j3rZz;

1.19
date	2015.11.26.13.28.22;	author tb;	state Exp;
branches;
next	1.18;
commitid	NmOzVD9iyGc3f192;

1.18
date	2015.11.24.16.54.22;	author tedu;	state Exp;
branches;
next	1.17;
commitid	ROjjDo2vh1Naxk8B;

1.17
date	2015.11.24.02.53.39;	author tedu;	state Exp;
branches;
next	1.16;
commitid	FGihgs4rqofc8Cgg;

1.16
date	2015.11.24.02.51.50;	author tedu;	state Exp;
branches;
next	1.15;
commitid	dnpy6WhY14kBN0TS;

1.15
date	2009.10.27.23.59.24;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.09.14.56.19;	author sobrado;	state Exp;
branches;
next	1.13;

1.13
date	2005.05.01.02.43.12;	author djm;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.09.15.59.26;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.10.00.03.01;	author david;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.03.01.39;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.23.03.01.13;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.16.21.27.09;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.18.18.13.38;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.13.12.17.23;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.23.21.49.07;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.08.29.23.00.09;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	96.12.22.20.01.09;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.12.19.22.21.21;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.47;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.47;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.23
log
@Headers clean up
@
text
@/*	$OpenBSD: cfscores.c,v 1.22 2016/01/07 16:00:32 tb Exp $	*/
/*	$NetBSD: cfscores.c,v 1.3 1995/03/21 15:08:37 cgd Exp $	*/

/*
 * Copyright (c) 1983, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

struct betinfo {
	long	hand;		/* cost of dealing hand */
	long	inspection;	/* cost of inspecting hand */
	long	game;		/* cost of buying game */
	long	runs;		/* cost of running through hands */
	long	information;	/* cost of information */
	long	thinktime;	/* cost of thinking time */
	long	wins;		/* total winnings */
	long	worth;		/* net worth after costs */
};

int dbfd;
char scorepath[PATH_MAX];

void	printuser(void);

int
main(int argc, char *argv[])
{
	const char *home;
	int ret;

	if (pledge("stdio rpath", NULL) == -1)
		err(1, "pledge");
	
	home = getenv("HOME");
	if (home == NULL || *home == '\0')
		err(1, "getenv");

	ret = snprintf(scorepath, sizeof(scorepath), "%s/%s", home,
	    ".cfscores");
	if (ret < 0 || ret >= PATH_MAX)
		errc(1, ENAMETOOLONG, "%s/%s", home, ".cfscores");

	dbfd = open(scorepath, O_RDONLY);
	if (dbfd < 0)
		err(2, "%s", scorepath);

	printuser();
	return 0;
}

/*
 * print out info for specified password entry
 */
void
printuser(void)
{
	struct betinfo total;
	const char *name;
	int i;

	name = getlogin();
	if (name == NULL || *name == '\0')
		name = " ??? ";

	i = read(dbfd, (char *)&total, sizeof(total));
	if (i < 0) {
		warn("lseek %s", scorepath);
		return;
	}
	if (i == 0 || total.hand == 0) {
		printf("%s has never played canfield.\n", name);
		return;
	}
	i = strlen(name);
	printf("*----------------------*\n");
	if (total.worth >= 0) {
		if (i <= 8)
			printf("* Winnings for %-8s*\n", name);
		else {
			printf("*     Winnings for     *\n");
			if (i <= 20)
				printf("* %20s *\n", name);
			else
				printf("%s\n", name);
		}
	} else {
		if (i <= 10)
			printf("* Losses for %-10s*\n", name);
		else {
			printf("*      Losses for      *\n");
			if (i <= 20)
				printf("* %20s *\n", name);
			else
				printf("%s\n", name);
		}
	}
	printf("*======================*\n");
	printf("|Costs           Total |\n");
	printf("| Hands       %8ld |\n", total.hand);
	printf("| Inspections %8ld |\n", total.inspection);
	printf("| Games       %8ld |\n", total.game);
	printf("| Runs        %8ld |\n", total.runs);
	printf("| Information %8ld |\n", total.information);
	printf("| Think time  %8ld |\n", total.thinktime);
	printf("|Total Costs  %8ld |\n", total.wins - total.worth);
	printf("|Winnings     %8ld |\n", total.wins);
	printf("|Net Worth    %8ld |\n", total.worth);
	printf("*----------------------*\n\n");
}
@


1.22
log
@Some basic code maintenance in games/

- in main() replace exit with return
- drop some /* NOTREACHED */ lint comments along the way.
- make more use of standard CFLAGS, esp. -Wimplicit-function-declaration
- add and sort some headers when needed
- add straightforward pledges to some programs used at compile time

discussed with and ok mestre@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.21 2015/12/02 18:34:10 tb Exp $	*/
d33 1
a33 1
#include <sys/types.h>
a34 1
#include <err.h>
@


1.21
log
@add const and remove unused variable.

from mestre.
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.20 2015/11/30 08:38:13 tb Exp $	*/
d82 1
a82 1
	exit(0);
@


1.20
log
@pledge "stdio rpath wpath cpath tty" for canfield
pledge "stdio rpath" for cfscores

made possible by Ricardo Mestre's earlier work
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.19 2015/11/26 13:28:22 tb Exp $	*/
d62 1
a62 1
	char *home, *name;
@


1.19
log
@Add checks for getenv(), snprintf() and getlogin().

From Ricardo Mestre (up to a small tweak).  Thanks!
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.18 2015/11/24 16:54:22 tedu Exp $	*/
d64 3
@


1.18
log
@repair lseeks, from Ricardo
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.17 2015/11/24 02:53:39 tedu Exp $	*/
d34 1
a37 1
#include <pwd.h>
d57 1
a57 1
void	printuser(const struct passwd *, int);
d62 2
a63 2
	struct passwd *pw;
	uid_t uid;
d65 5
a69 3
	if (!getenv("HOME"))
		return;
	snprintf(scorepath, sizeof(scorepath), "%s/%s", getenv("HOME"),
d71 3
d78 1
a78 5
	setpwent();
	uid = getuid();
	pw = getpwuid(uid);

	printuser(pw, 1);
d86 1
a86 1
printuser(const struct passwd *pw, int printfail)
d89 1
d92 4
a95 4
	if (pw->pw_uid < 0) {
		printf("Bad uid %u\n", pw->pw_uid);
		return;
	}
d102 1
a102 2
		if (printfail)
			printf("%s has never played canfield.\n", pw->pw_name);
d105 1
a105 1
	i = strlen(pw->pw_name);
d109 1
a109 1
			printf("* Winnings for %-8s*\n", pw->pw_name);
d113 1
a113 1
				printf("* %20s *\n", pw->pw_name);
d115 1
a115 1
				printf("%s\n", pw->pw_name);
d119 1
a119 1
			printf("* Losses for %-10s*\n", pw->pw_name);
d123 1
a123 1
				printf("* %20s *\n", pw->pw_name);
d125 1
a125 1
				printf("%s\n", pw->pw_name);
@


1.17
log
@change score file name to .cfscores so it's not taking up valuable space
in my home directory of serious business files
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.16 2015/11/24 02:51:50 tedu Exp $	*/
a91 5
		return;
	}
	i = lseek(dbfd, sizeof(struct betinfo), SEEK_SET);
	if (i < 0) {
		warn("lseek %s", scorepath);
@


1.16
log
@move score files to home directory and drop setgid. from Ricardo Mestre
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.15 2009/10/27 23:59:24 deraadt Exp $	*/
d68 1
a68 1
			"cfscores");
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.14 2009/06/09 14:56:19 sobrado Exp $	*/
d36 1
a41 1
#include "pathnames.h"
d55 1
d64 6
a69 7
	gid_t gid;

	if (argc > 2) {
		fprintf(stderr, "usage: cfscores [-a] [username]\n");
		exit(1);
	}
	dbfd = open(_PATH_SCORE, O_RDONLY);
d71 1
a71 1
		err(2, "%s", _PATH_SCORE);
d73 3
a75 3
	/* revoke privs */
	gid = getgid();
	setresgid(gid, gid, gid);
a76 21
	setpwent();
	if (argc == 1) {
		uid = getuid();
		pw = getpwuid(uid);
		if (pw == 0) {
			printf("You are not listed in the password file?!?\n");
			exit(2);
		}
		printuser(pw, 1);
		exit(0);
	}
	if (strcmp(argv[1], "-a") == 0) {
		while ((pw = getpwent()) != 0)
			printuser(pw, 0);
		exit(0);
	}
	pw = getpwnam(argv[1]);
	if (pw == 0) {
		printf("User %s unknown\n", argv[1]);
		exit(3);
	}
d94 1
a94 1
	i = lseek(dbfd, pw->pw_uid * sizeof(struct betinfo), SEEK_SET);
d96 1
a96 1
		warn("lseek %s", _PATH_SCORE);
d101 1
a101 1
		warn("lseek %s", _PATH_SCORE);
@


1.14
log
@add missing flag to usage; synchronize argument names with documentation;
while here, use lowercase letters for "usage:".
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.13 2005/05/01 02:43:12 djm Exp $	*/
a31 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1983, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)cfscores.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: cfscores.c,v 1.13 2005/05/01 02:43:12 djm Exp $";
#endif
#endif /* not lint */
@


1.13
log
@use setresgid() to drop privs, it is simply a better and less ambiguous API;
ok deraadt@@ and millert@@ a while ago, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.12 2004/07/09 15:59:26 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cfscores.c,v 1.12 2004/07/09 15:59:26 deraadt Exp $";
d80 1
a80 1
		fprintf(stderr, "Usage: cfscores [user]\n");
@


1.12
log
@ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.11 2003/07/10 00:03:01 david Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cfscores.c,v 1.11 2003/07/10 00:03:01 david Exp $";
d76 2
a77 1
	int uid;
d88 2
a89 2
	setegid(getgid());
	setgid(getgid());
@


1.11
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.10 2003/06/03 03:01:39 millert Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cfscores.c,v 1.10 2003/06/03 03:01:39 millert Exp $";
d73 1
a73 3
main(argc, argv)
	int argc;
	char *argv[];
d119 1
a119 3
printuser(pw, printfail)
	const struct passwd *pw;
	int printfail;
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.9 2002/06/23 03:01:13 deraadt Exp $	*/
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cfscores.c,v 1.9 2002/06/23 03:01:13 deraadt Exp $";
d52 1
@


1.9
log
@uid_t and gid_t are unsigned
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.8 2002/02/16 21:27:09 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static char rcsid[] = "$OpenBSD: cfscores.c,v 1.8 2002/02/16 21:27:09 millert Exp $";
@


1.8
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.7 2001/02/18 18:13:38 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cfscores.c,v 1.7 2001/02/18 18:13:38 pjanzen Exp $";
d132 1
a132 1
		printf("Bad uid %d\n", pw->pw_uid);
@


1.7
log
@include <string.h>
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.6 2001/02/13 12:17:23 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cfscores.c,v 1.6 2001/02/13 12:17:23 pjanzen Exp $";
d73 1
a73 1
void	printuser __P((const struct passwd *, int));
@


1.6
log
@Try to keep formatting pretty for long usernames
@
text
@d1 1
a1 1
/*	$OpenBSD: cfscores.c,v 1.5 2000/07/23 21:49:07 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: cfscores.c,v 1.5 2000/07/23 21:49:07 pjanzen Exp $";
d56 1
@


1.5
log
@Code cleanups (some from NetBSD), typo fix.
Don't barf if stdin hits EOF.
Install cfscores in /var/games if one isn't already there.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD$";
d149 1
d151 21
a171 4
	if (total.worth >= 0)
		printf("* Winnings for %-8s*\n", pw->pw_name);
	else
		printf("* Losses for %-10s*\n", pw->pw_name);
@


1.4
log
@use names for constants in lseek() and open(); NetBSD PR6057; jsm28@@cam.ac.uk
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: cfscores.c,v 1.3 1995/03/21 15:08:37 cgd Exp $";
d52 1
d72 3
d79 1
a79 1
	register struct passwd *pw;
d83 1
a83 1
		printf("Usage: cfscores [user]\n");
d87 2
a88 4
	if (dbfd < 0) {
		perror(_PATH_SCORE);
		exit(2);
	}
d122 1
d124 1
a124 1
	register struct passwd *pw;
d136 1
a136 1
		perror("lseek");
d141 1
a141 1
		perror("read");
d156 9
a164 9
	printf("| Hands       %8d |\n", total.hand);
	printf("| Inspections %8d |\n", total.inspection);
	printf("| Games       %8d |\n", total.game);
	printf("| Runs        %8d |\n", total.runs);
	printf("| Information %8d |\n", total.information);
	printf("| Think time  %8d |\n", total.thinktime);
	printf("|Total Costs  %8d |\n", total.wins - total.worth);
	printf("|Winnings     %8d |\n", total.wins);
	printf("|Net Worth    %8d |\n", total.worth);
@


1.3
log
@proper gid revoke
@
text
@d51 1
d53 2
d81 1
a81 1
	dbfd = open(_PATH_SCORE, 0);
d130 1
a130 1
	i = lseek(dbfd, pw->pw_uid * sizeof(struct betinfo), 0);
@


1.2
log
@setgid games, not setuid games. closes a neat set of holes
@
text
@d83 5
a87 1
	setgid(getgid());		/* revoke */
@


1.1
log
@Initial revision
@
text
@d83 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
