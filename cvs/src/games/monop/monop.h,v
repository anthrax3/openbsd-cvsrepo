head	1.8;
access;
symbols
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.52
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.44
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.48
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.46
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.42
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.40
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.14
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2016.01.08.18.19.47;	author mestre;	state Exp;
branches;
next	1.7;
commitid	73TLYe3VSt6HwinY;

1.7
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.28.08.44.14;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.10;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	98.09.20.23.36.54;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	97.04.01.16.00.58;	author rahnds;	state Exp;
branches;
next	1.2;

1.2
date	96.10.06.03.20.46;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Headers cleanup and removal where suitable

OK tb@@
@
text
@/*	$OpenBSD: monop.h,v 1.7 2003/06/03 03:01:40 millert Exp $	*/
/*	$NetBSD: monop.h,v 1.4 1995/04/24 12:24:23 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)monop.h	8.1 (Berkeley) 5/31/93
 */

#ifdef __CHAR_UNSIGNED__
#define	shrt	short
#else
#define	shrt	char
#endif
#define	bool	int8_t

#define	TRUE	(1)
#define	FALSE	(0)

#define	N_MON	8	/* number of monopolies			*/
#define	N_PROP	22	/* number of normal property squares	*/
#define	N_RR	4	/* number of railroads			*/
#define	N_UTIL	2	/* number of utilities			*/
#define	N_SQRS	40	/* number of squares on board		*/
#define	MAX_PL	9	/* maximum number of players		*/
#define	MAX_PRP	(N_PROP+N_RR+N_UTIL) /* max # ownable property	*/
#define	N_HOUSE	32	/* total number of houses available	*/
#define	N_HOTEL	12	/* total number of hotels available	*/

			/* square type numbers			*/
#define	PRPTY	0	/* normal property			*/
#define	RR	1	/* railroad				*/
#define	UTIL	2	/* water works - electric co		*/
#define	SAFE	3	/* safe spot				*/
#define	CC	4	/* community chest			*/
#define	CHANCE	5	/* chance (surprise!!!)			*/
#define	INC_TAX	6	/* Income tax */
#define	GOTO_J	7	/* Go To Jail! */
#define	LUX_TAX	8	/* Luxury tax */
#define	IN_JAIL	9	/* In jail */

#define	JAIL	40	/* JAIL square number			*/

#define	lucky(str)	printf("%s%s\n",str,lucky_mes[roll(1,num_luck)-1])
#define	printline()	printf("------------------------------\n")
#define	sqnum(sqp)	(sqp - board)

struct sqr_st {			/* structure for square			*/
	char	*name;			/* place name			*/
	shrt	owner;			/* owner number			*/
	shrt	type;			/* place type			*/
	struct prp_st	*desc;		/* description struct		*/
	int	cost;			/* cost				*/
};

typedef struct sqr_st	SQUARE;

struct mon_st {			/* monopoly description structure	*/
	char	*name;			/* monop. name (color)		*/
	shrt	owner;			/* owner of monopoly		*/
	shrt	num_in;			/* # in monopoly		*/
	shrt	num_own;		/* # owned (-1: not poss. monop)*/
	shrt	h_cost;			/* price of houses		*/
	char	*not_m;			/* name if not monopoly		*/
	char	*mon_n;			/* name if a monopoly		*/
	char	sqnums[3];		/* Square numbers (used to init)*/
	SQUARE	*sq[3];			/* list of squares in monop	*/
};

typedef struct mon_st	MON;

/*
 * This struct describes a property.  For railroads and utilities, only
 * the "morg" member is used.
 */
struct prp_st {			/* property description structure	*/
	bool	morg;			/* set if mortgaged		*/
	bool	monop;			/* set if monopoly		*/
	shrt	square;			/* square description		*/
	shrt	houses;			/* number of houses		*/
	MON	*mon_desc;		/* name of color		*/
	int	rent[6];		/* rents			*/
};

struct own_st {			/* element in list owned things		*/
	SQUARE	*sqr;			/* pointer to square		*/
	struct own_st	*next;		/* next in list			*/
};

typedef struct own_st	OWN;

struct plr_st {			/* player description structure		*/
	char	*name;			/* owner name			*/
	shrt	num_gojf;		/* # of get-out-of-jail-free's	*/
	shrt	num_rr;			/* # of railroads owned		*/
	shrt	num_util;		/* # of water works/elec. co.	*/
	shrt	loc;			/* location on board		*/
	shrt	in_jail;		/* count of turns in jail	*/
	int	money;			/* amount of money		*/
	OWN	*own_list;		/* start of property list	*/
};

typedef struct plr_st	PLAY;
typedef struct prp_st	PROP;
typedef struct prp_st	RR_S;
typedef struct prp_st	UTIL_S;

/* cards.c */
void	init_decks(void);
void	get_card(DECK *);
void	ret_card(PLAY *);

/* execute.c */
void	execute(int);
void	do_move(void);
void	move(int);
void	save(void);
void	restore(void);
void	game_restore(void);
int	rest_f(char *);

/* getinp.c */
int	getinp(char *, char *[]);

/* houses.c */
void	buy_houses(void);
void	sell_houses(void);

/* jail.c */
void	card(void);
void	pay(void);
int	move_jail(int, int );
void	printturn(void);

/* misc.c */
int	getyn(char *);
void	notify(void);
void	next_play(void);
int	get_int(char *);
void	set_ownlist(int);
void	is_monop(MON *, int);
void	isnot_monop(MON *);
void	list(void);
void	list_all(void);
void	quit(void);

/* morg.c */
void	mortgage(void);
void	unmortgage(void);
void	force_morg(void);

/* print.c */
void	printboard(void);
void	where(void);
void	printsq(int, bool);
void	printhold(int);

/* prop.c */
void	buy(int, SQUARE *);
void	add_list(int, OWN **, int);
void	del_list(int, OWN **, shrt);
void	bid(void);
int	prop_worth(PLAY *);

/* rent.c */
void	rent(SQUARE *);

/* roll.c */
int	roll(int, int);

/* spec.c */
void	inc_tax(void);
void	goto_jail(void);
void	lux_tax(void);
void	cc(void);
void	chance(void);

/* trade.c */
void	trade(void);
void	resign(void);
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.h,v 1.6 2002/07/28 08:44:14 pjanzen Exp $	*/
a33 4

#include	<stdio.h>
#include	<stdlib.h>
#include	<string.h>
@


1.6
log
@Tidy the code, follow the rules more closely (and document where we diverge),
and make save files work.  The last stops a number of segfaults.
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.h,v 1.5 2002/02/16 21:27:10 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.h,v 1.4 1998/09/20 23:36:54 pjanzen Exp $	*/
d60 2
d144 1
d152 1
a163 1
void	ret_card(PLAY *);
@


1.4
log
@rand -> random; handle EOF; don't overflow on user input; check for calloc()
success; OpenBSD tags; some reformatting and ridding of unused variables.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d140 2
a141 2
void	init_decks __P((void));
void	get_card __P((DECK *));
d144 6
a149 6
void	execute __P((int));
void	do_move __P((void));
void	move __P((int));
void	save __P((void));
void	restore __P((void));
int	rest_f __P((char *));
d152 1
a152 1
int	getinp __P((char *, char *[]));
d155 2
a156 2
void	buy_houses __P((void));
void	sell_houses __P((void));
d159 5
a163 5
void	card __P((void));
void	ret_card __P((PLAY *));
void	pay __P((void));
int	move_jail __P((int, int ));
void	printturn __P((void));
d166 10
a175 10
int	getyn __P((char *));
void	notify __P((void));
void	next_play __P((void));
int	get_int __P((char *));
void	set_ownlist __P((int));
void	is_monop __P((MON *, int));
void	isnot_monop __P((MON *));
void	list __P((void));
void	list_all __P((void));
void	quit __P((void));
d178 3
a180 3
void	mortgage __P((void));
void	unmortgage __P((void));
void	force_morg __P((void));
d183 4
a186 4
void	printboard __P((void));
void	where __P((void));
void	printsq __P((int, bool));
void	printhold __P((int));
d189 5
a193 5
void	buy __P((int, SQUARE *));
void	add_list __P((int, OWN **, int));
void	del_list __P((int, OWN **, shrt));
void	bid __P((void));
int	prop_worth __P((PLAY *));
d196 1
a196 1
void	rent __P((SQUARE *));
d199 1
a199 1
int	roll __P((int, int));
d202 5
a206 5
void	inc_tax __P((void));
void	goto_jail __P((void));
void	lux_tax __P((void));
void	cc __P((void));
void	chance __P((void));
d209 2
a210 2
void	trade __P((void));
void	resign __P((void));
@


1.3
log
@Changes from NetBSD to compile games without warnings due to short being
unsigned on some archs, PowerPC, ROMP.
@
text
@d1 1
d39 3
a41 3
# include	<stdio.h>
# include	<stdlib.h>
# include	<string.h>
a42 1
# define	reg	register
d44 1
a44 1
# define	shrt	short
d46 1
a46 1
# define	shrt	char
d48 1
a48 2
# define	bool	int8_t
# define	unsgn	unsigned
d50 2
a51 2
# define	TRUE	(1)
# define	FALSE	(0)
d53 25
a77 30
# define	N_MON	8	/* number of monopolies			*/
# define	N_PROP	22	/* number of normal property squares	*/
# define	N_RR	4	/* number of railroads			*/
# define	N_UTIL	2	/* number of utilities			*/
# define	N_SQRS	40	/* number of squares on board		*/
# define	MAX_PL	9	/* maximum number of players		*/
# define	MAX_PRP	(N_PROP+N_RR+N_UTIL) /* max # ownable property	*/

				/* square type numbers			*/
# define	PRPTY	0	/* normal property			*/
# define	RR	1	/* railroad				*/
# define	UTIL	2	/* water works - electric co		*/
# define	SAFE	3	/* safe spot				*/
# define	CC	4	/* community chest			*/
# define	CHANCE	5	/* chance (surprise!!!)			*/
# define	INC_TAX	6	/* Income tax */
# define	GOTO_J	7	/* Go To Jail! */
# define	LUX_TAX	8	/* Luxury tax */
# define	IN_JAIL	9	/* In jail */

# define	JAIL	40	/* JAIL square number			*/

# define	lucky(str)	printf("%s%s\n",str,lucky_mes[roll(1,num_luck)-1])
# define	printline()	printf("------------------------------\n")
# define	sqnum(sqp)	(sqp - board)
# define	swap(A1,A2)	if ((A1) != (A2)) { \
					(A1) ^= (A2); \
					(A2) ^= (A1); \
					(A1) ^= (A2); \
				}
d131 1
a131 1
	OWN	*own_list;		/* start of propery list	*/
d139 72
a210 1
int	cc(), chance(), lux_tax(), goto_jail(), inc_tax();
@


1.2
log
@Store the card deck using fixed sizes and network byte order
@
text
@d43 3
d47 1
@


1.1
log
@Initial revision
@
text
@d44 1
a44 1
# define	bool	char
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
