head	1.17;
access;
symbols
	OPENBSD_6_2:1.17.0.10
	OPENBSD_6_2_BASE:1.17
	OPENBSD_6_1:1.17.0.8
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.13.0.26
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.18
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.22
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.20
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.28
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.24
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.22
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.20
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.18
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.16
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.14
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.12
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.10
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.11.0.4
	OPENBSD_3_3_BASE:1.11
	OPENBSD_3_2:1.11.0.2
	OPENBSD_3_2_BASE:1.11
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.4
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2016.01.08.18.20.33;	author mestre;	state Exp;
branches;
next	1.16;
commitid	IlHJftt9IPFIQn9F;

1.16
date	2016.01.08.18.19.47;	author mestre;	state Exp;
branches;
next	1.15;
commitid	73TLYe3VSt6HwinY;

1.15
date	2016.01.07.16.00.32;	author tb;	state Exp;
branches;
next	1.14;
commitid	IwzFE3fG5RnKTWNh;

1.14
date	2015.08.22.14.47.41;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	vWCbqNWL9DL2UkGT;

1.13
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.28.08.44.14;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.31.03.40.01;	author pjanzen;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.16.21.27.10;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.10.15.33.03;	author provos;	state Exp;
branches;
next	1.7;

1.7
date	2000.06.30.16.00.04;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.09.20.23.36.51;	author pjanzen;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	97.01.02.02.25.56;	author rahnds;	state Exp;
branches;
next	1.4;

1.4
date	96.12.22.20.01.29;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.12.19.22.21.37;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.10.06.03.20.46;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.09;	author deraadt;	state Exp;
branches;
next	;

1.6.8.1
date	2000.10.06.20.40.25;	author jason;	state Exp;
branches;
next	;


desc
@@


1.17
log
@ANSIfy monop(6)

OK tb@@
@
text
@/*	$OpenBSD: initdeck.c,v 1.16 2016/01/08 18:19:47 mestre Exp $	*/
/*	$NetBSD: initdeck.c,v 1.3 1995/03/23 08:34:43 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include "deck.h"

/*
 *	This program initializes the card files for monopoly.
 * It reads in a data file with Com. Chest cards, followed by
 * the Chance card.  The two are separated by a line of "%-".
 * All other cards are separated by lines of "%%".  In the front
 * of the file is the data for the decks in the same order.
 * This includes the seek pointer for the start of each card.
 * All cards start with their execution code, followed by the
 * string to print, terminated with a null byte.
 */

#define	TRUE	1
#define	FALSE	0

#define	bool	int8_t

char	*infile		= "cards.inp",		/* input file		*/
	*outfile	= "cards.pck";		/* "packed" file	*/

DECK	deck[2];

FILE	*inf, *outf;

static void	getargs(int, char *[]);
static void	count(void);
static void	putem(void);

int
main(int ac, char *av[])
{
	int n;

	if (pledge("stdio rpath wpath cpath", NULL) == -1)
		err(1, "pledge");

	getargs(ac, av);
	if ((inf = fopen(infile, "r")) == NULL)
		err(1, "%s", infile);
	count();
	/*
	 * allocate space for pointers.
	 */
	if ((CC_D.offsets = calloc(CC_D.num_cards + 1,
			sizeof (int32_t))) == NULL ||
	    (CH_D.offsets = calloc(CH_D.num_cards + 1,
			sizeof (int32_t))) == NULL)
		err(1, NULL);
	fseek(inf, 0L, SEEK_SET);
	if ((outf = fopen(outfile, "w")) == NULL)
		err(1, "%s", outfile);

	if (pledge("stdio", NULL) == -1)
		err(1, "pledge");

	fwrite(&deck[0].num_cards, sizeof(deck[0].num_cards), 1, outf);
	fwrite(&deck[0].top_card, sizeof(deck[0].top_card), 1, outf);
	fwrite(&deck[0].gojf_used, sizeof(deck[0].gojf_used), 1, outf);

	fwrite(&deck[0].num_cards, sizeof(deck[0].num_cards), 1, outf);
	fwrite(&deck[0].top_card, sizeof(deck[0].top_card), 1, outf);
	fwrite(&deck[0].gojf_used, sizeof(deck[0].gojf_used), 1, outf);

	fwrite(CC_D.offsets, sizeof(CC_D.offsets[0]), CC_D.num_cards, outf);
	fwrite(CH_D.offsets, sizeof(CH_D.offsets[0]), CH_D.num_cards, outf);
	putem();

	fclose(inf);
	fseek(outf, 0L, SEEK_SET);

	deck[0].num_cards = htons(deck[0].num_cards);
	fwrite(&deck[0].num_cards, sizeof(deck[0].num_cards), 1, outf);
	deck[0].top_card = htons(deck[0].top_card);
	fwrite(&deck[0].top_card, sizeof(deck[0].top_card), 1, outf);
	fwrite(&deck[0].gojf_used, sizeof(deck[0].gojf_used), 1, outf);
	deck[0].num_cards = ntohs(deck[0].num_cards);

	deck[1].num_cards = htons(deck[1].num_cards);
	fwrite(&deck[1].num_cards, sizeof(deck[1].num_cards), 1, outf);
	deck[1].top_card = htons(deck[1].top_card);
	fwrite(&deck[1].top_card, sizeof(deck[1].top_card), 1, outf);
	fwrite(&deck[1].gojf_used, sizeof(deck[1].gojf_used), 1, outf);
	deck[1].num_cards = ntohs(deck[1].num_cards);

	for (n = 0 ; n < CC_D.num_cards ; n++) {
		CC_D.offsets[n] = htonl(CC_D.offsets[n]);
		fwrite(&CC_D.offsets[n], sizeof(CC_D.offsets[n]), 1, outf);
	}
	for (n = 0 ; n < CH_D.num_cards ; n++) {
		CH_D.offsets[n] = htonl(CH_D.offsets[n]);
		fwrite(&CH_D.offsets[n], sizeof(CH_D.offsets[n]), 1, outf);
	}

	fclose(outf);
	printf("There were %d com. chest and %d chance cards\n", CC_D.num_cards,
	    CH_D.num_cards);
	return 0;
}

static void
getargs(int ac, char *av[])
{
	if (ac > 1)
		infile = av[1];
	if (ac > 2)
		outfile = av[2];
}

/*
 * count the cards
 */
static void
count(void)
{
	bool	newline;
	DECK	*in_deck;
	int	c;

	newline = TRUE;
	in_deck = &CC_D;
	while ((c=getc(inf)) != EOF)
		if (newline && c == '%') {
			newline = FALSE;
			in_deck->num_cards++;
			if (getc(inf) == '-')
				in_deck = &CH_D;
		}
		else
			newline = (c == '\n');
	in_deck->num_cards++;
}
/*
 *	put strings in the file
 */
static void
putem(void)
{
	bool	newline;
	DECK	*in_deck;
	int	c;
	int16_t	num;

	in_deck = &CC_D;
	CC_D.num_cards = 1;
	CH_D.num_cards = 0;
	CC_D.offsets[0] = ftell(outf);
	putc(getc(inf), outf);
	putc(getc(inf), outf);
	for (num = 0; (c=getc(inf)) != '\n'; )
		num = num * 10 + (c - '0');
	num = htons(num);
	fwrite(&num, sizeof(num), 1, outf);
	newline = FALSE;
	while ((c=getc(inf)) != EOF)
		if (newline && c == '%') {
			putc('\0', outf);
			newline = FALSE;
			if (getc(inf) == '-')
				in_deck = &CH_D;
			while (getc(inf) != '\n')
				continue;
			in_deck->offsets[in_deck->num_cards++] = ftell(outf);
			if ((c=getc(inf)) == EOF)
				break;
			putc(c, outf);
			putc(c = getc(inf), outf);
			for (num = 0; (c=getc(inf)) != EOF && c != '\n'; )
				num = num * 10 + (c - '0');
			num = htons(num);
			fwrite(&num, sizeof(num), 1, outf);
		}
		else {
			putc(c, outf);
			newline = (c == '\n');
		}
	putc('\0', outf);
}
@


1.16
log
@Headers cleanup and removal where suitable

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: initdeck.c,v 1.15 2016/01/07 16:00:32 tb Exp $	*/
d68 1
a68 3
main(ac, av)
	int	ac;
	char	*av[];
d139 1
a139 3
getargs(ac, av)
	int	ac;
	char	*av[];
d151 1
a151 1
count()
d174 1
a174 1
putem()
@


1.15
log
@Some basic code maintenance in games/

- in main() replace exit with return
- drop some /* NOTREACHED */ lint comments along the way.
- make more use of standard CFLAGS, esp. -Wimplicit-function-declaration
- add and sort some headers when needed
- add straightforward pledges to some programs used at compile time

discussed with and ok mestre@@
@
text
@d1 1
a1 1
/*	$OpenBSD: initdeck.c,v 1.14 2015/08/22 14:47:41 deraadt Exp $	*/
d33 4
a36 4
#include	<err.h>
#include	<stdio.h>
#include	<stdlib.h>
#include	<unistd.h>
d38 1
a38 1
#include	"deck.h"
@


1.14
log
@remove malloc/calloc/realloc* casts, due to stdlib.h being present; ok millert krw
@
text
@d1 1
a1 1
/*	$OpenBSD: initdeck.c,v 1.13 2009/10/27 23:59:26 deraadt Exp $	*/
d37 1
d74 3
d93 3
d135 3
a137 2
	printf("There were %d com. chest and %d chance cards\n", CC_D.num_cards, CH_D.num_cards);
	exit(0);
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: initdeck.c,v 1.12 2003/06/03 03:01:40 millert Exp $	*/
d80 1
a80 1
	if ((CC_D.offsets = (int32_t *)calloc(CC_D.num_cards + 1,
d82 1
a82 1
	    (CH_D.offsets = (int32_t *)calloc(CH_D.num_cards + 1,
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: initdeck.c,v 1.11 2002/07/28 08:44:14 pjanzen Exp $	*/
a31 14

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1980, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)initdeck.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: initdeck.c,v 1.11 2002/07/28 08:44:14 pjanzen Exp $";
#endif
#endif /* not lint */
@


1.11
log
@Tidy the code, follow the rules more closely (and document where we diverge),
and make save files work.  The last stops a number of segfaults.
@
text
@d1 1
a1 1
/*	$OpenBSD: initdeck.c,v 1.10 2002/05/31 03:40:01 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static const char rcsid[] = "$OpenBSD$";
@


1.10
log
@No dm -> no need to revoke setegid.
@
text
@d1 1
a1 1
/*	$OpenBSD: initdeck.c,v 1.9 2002/02/16 21:27:10 millert Exp $	*/
d38 1
a38 1
static char copyright[] =
d47 1
a47 1
static char rcsid[] = "$OpenBSD: initdeck.c,v 1.9 2002/02/16 21:27:10 millert Exp $";
d102 2
a103 2
		errx(1, "malloc");
	fseek(inf, 0L, 0);
d108 1
a108 1
	fwrite(&deck[0].last_card, sizeof(deck[0].last_card), 1, outf);
d112 1
a112 1
	fwrite(&deck[0].last_card, sizeof(deck[0].last_card), 1, outf);
d120 1
a120 1
	fseek(outf, 0, 0L);
d124 2
a125 2
	deck[0].last_card = htons(deck[0].last_card);
	fwrite(&deck[0].last_card, sizeof(deck[0].last_card), 1, outf);
d131 2
a132 2
	deck[1].last_card = htons(deck[1].last_card);
	fwrite(&deck[1].last_card, sizeof(deck[1].last_card), 1, outf);
@


1.9
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: initdeck.c,v 1.8 2000/11/10 15:33:03 provos Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: initdeck.c,v 1.8 2000/11/10 15:33:03 provos Exp $";
a89 4

	/* revoke */
	setegid(getgid());
	setgid(getgid());
@


1.8
log
@seperate -> separate, okay aaron@@
@
text
@d1 1
a1 1
/*	$OpenBSD: initdeck.c,v 1.7 2000/06/30 16:00:04 millert Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: initdeck.c,v 1.7 2000/06/30 16:00:04 millert Exp $";
d80 3
a82 3
static void	getargs __P((int, char *[]));
static void	count __P((void));
static void	putem __P((void));
@


1.7
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: initdeck.c,v 1.6 1998/09/20 23:36:51 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: initdeck.c,v 1.6 1998/09/20 23:36:51 pjanzen Exp $";
d60 2
a61 2
 * the Chance card.  The two are seperated by a line of "%-".
 * All other cards are seperated by lines of "%%".  In the front
@


1.6
log
@rand -> random; handle EOF; don't overflow on user input; check for calloc()
success; OpenBSD tags; some reformatting and ridding of unused variables.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD$";
d97 1
a97 1
		err(1, infile);
d109 1
a109 1
		err(1, outfile);
@


1.6.8.1
log
@Pull in patch from current (more to come...):
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: initdeck.c,v 1.6 1998/09/20 23:36:51 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: initdeck.c,v 1.6 1998/09/20 23:36:51 pjanzen Exp $";
d97 1
a97 1
		err(1, "%s", infile);
d109 1
a109 1
		err(1, "%s", outfile);
@


1.5
log
@getc returns int not char.
This matters on some ports, such as powerpc. (signed vs unsigned issue).
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: initdeck.c,v 1.3 1995/03/23 08:34:43 cgd Exp $";
d51 5
a55 2
# include	<stdio.h>
# include	"deck.h"
d68 2
a69 2
# define	TRUE	1
# define	FALSE	0
d71 1
a71 2
# define	bool	int8_t
# define	reg	register
a75 3
extern long	ftell();
extern char *calloc();

d80 5
d86 3
a88 2
int	ac;
char	*av[]; {
d96 2
a97 4
	if ((inf = fopen(infile, "r")) == NULL) {
		perror(infile);
		exit(1);
	}
d102 5
a106 2
	CC_D.offsets = (int32_t *)calloc(CC_D.num_cards + 1, sizeof (int32_t));
	CH_D.offsets = (int32_t *)calloc(CH_D.num_cards + 1, sizeof (int32_t));
d108 2
a109 4
	if ((outf = fopen(outfile, "w")) == NULL) {
		perror(outfile);
		exit(0);
	}
d154 1
d156 3
a158 3
int	ac;
char	*av[]; {

d168 6
a173 5
count() {

	reg bool	newline;
	reg DECK	*in_deck;
	reg int	c;
d191 7
a197 6
putem() {

	reg bool	newline;
	reg DECK	*in_deck;
	reg int	c;
	int16_t		num;
@


1.4
log
@proper gid revoke
@
text
@d166 1
a166 1
	reg char	c;
d188 1
a188 1
	reg char	c;
@


1.3
log
@setgid games, not setuid games. closes a neat set of holes
@
text
@d85 2
@


1.2
log
@Store the card deck using fixed sizes and network byte order
@
text
@d85 2
@


1.1
log
@Initial revision
@
text
@d67 1
a67 1
# define	bool	char
d83 1
d94 2
a95 2
	CC_D.offsets = (long *)calloc(CC_D.num_cards + 1, sizeof (long));
	CH_D.offsets = (long *)calloc(CH_D.num_cards + 1, sizeof (long));
d102 10
a111 3
	fwrite(deck, sizeof (DECK), 2, outf);
	fwrite(CC_D.offsets, sizeof (long), CC_D.num_cards, outf);
	fwrite(CH_D.offsets, sizeof (long), CH_D.num_cards, outf);
d116 24
a139 3
	fwrite(deck, sizeof (DECK), 2, outf);
	fwrite(CC_D.offsets, sizeof (long), CC_D.num_cards, outf);
	fwrite(CH_D.offsets, sizeof (long), CH_D.num_cards, outf);
d185 1
a185 1
	reg int		num;
d195 2
a196 1
	putw(num, outf);
d213 2
a214 1
			putw(num, outf);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
