head	1.10;
access;
symbols
	OPENBSD_6_1:1.10.0.6
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.4
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.8.0.26
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.18
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.22
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.5.0.12
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.10
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.8
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.6
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.4
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.2.0.14
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.12
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2016.01.08.18.20.33;	author mestre;	state Exp;
branches;
next	1.9;
commitid	IlHJftt9IPFIQn9F;

1.9
date	2016.01.08.18.19.47;	author mestre;	state Exp;
branches;
next	1.8;
commitid	73TLYe3VSt6HwinY;

1.8
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2008.11.10.18.02.17;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.26.17.20.51;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.28.08.44.14;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.16.21.27.10;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	98.09.20.23.36.51;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@ANSIfy monop(6)

OK tb@@
@
text
@/*	$OpenBSD: houses.c,v 1.9 2016/01/08 18:19:47 mestre Exp $	*/
/*	$NetBSD: houses.c,v 1.3 1995/03/23 08:34:40 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>
#include <stdlib.h>

#include "monop.ext"

static char	*names[N_MON+2],
		cur_prop[80];

static MON	*monops[N_MON];

static void	buy_h(MON *);
static void	sell_h(MON *);
static void	list_cur(MON *);
static int	avail_houses();
static int	avail_hotels();
static bool	can_only_buy_hotel(MON *);

/*
 *	These routines deal with buying and selling houses
 */
void
buy_houses(void)
{
	int	num_mon;
	MON	*mp;
	OWN	*op;
	bool	good, got_morg;
	int	i,p;

over:
	num_mon = 0;
	good = TRUE;
	got_morg = FALSE;
	for (op = cur_p->own_list; op && op->sqr->type != PRPTY; op = op->next)
		continue;
	while (op)
		if (op->sqr->desc->monop) {
			mp = op->sqr->desc->mon_desc;
			names[num_mon] = (monops[num_mon]=mp)->name;
			num_mon++;
			got_morg = good = FALSE;
			for (i = 0; i < mp->num_in; i++) {
				if (op->sqr->desc->morg)
					got_morg = TRUE;
				if (op->sqr->desc->houses != 5)
					good = TRUE;
				op = op->next;
			}
			if (!good || got_morg)
				--num_mon;
		}
		else
			op = op->next;
	if (num_mon == 0) {
		if (got_morg)
			printf("You can't build on mortgaged monopolies.\n");
		else if (!good)
			printf("You can't build any more.\n");
		else
			printf("But you don't have any monopolies!!\n");
		return;
	}
	if (num_mon == 1)
		buy_h(monops[0]);
	else {
		names[num_mon++] = "done";
		names[num_mon--] = 0;
		if ((p=getinp("Which property do you wish to buy houses for? ", names)) == num_mon)
			return;
		buy_h(monops[p]);
		goto over;
	}
}

static void
buy_h(MON *mnp)
{
	int	i;
	MON	*mp;
	int	price;
	shrt	input[3],temp[3];
	int	tot, tot2;
	PROP	*pp;
	int	nhous, nhot;
	bool chot;

	mp = mnp;
	price = mp->h_cost * 50;
	nhous = avail_houses();
	nhot = avail_hotels();
	chot = can_only_buy_hotel(mnp);
	if (nhous == 0 && !chot) {
		printf("Building shortage:  no houses available.");
		return;
	}
	if (nhot == 0 && chot) {
		printf("Building shortage:  no hotels available.");
		return;
	}
blew_it:
	list_cur(mp);
	printf("Houses will cost $%d\n", price);
	printf("How many houses do you wish to buy for\n");
	for (i = 0; i < mp->num_in; i++) {
		pp = mp->sq[i]->desc;
over:
		if (pp->houses == 5) {
			printf("%s (H):\n", mp->sq[i]->name);
			input[i] = 0;
			temp[i] = 5;
			continue;
		}
		(void)snprintf(cur_prop, sizeof(cur_prop), "%s (%d): ",
			mp->sq[i]->name, pp->houses);
		input[i] = get_int(cur_prop);
		temp[i] = input[i] + pp->houses;
		if (temp[i] > 5 || temp[i] < 0) {
			printf("That's too many.  The most you can buy is %d\n",
			    5 - pp->houses);
				goto over;
			}
	}
	if (mp->num_in == 3 && (abs(temp[0] - temp[1]) > 1 ||
	    abs(temp[0] - temp[2]) > 1 || abs(temp[1] - temp[2]) > 1)) {
err:		printf("That makes the spread too wide.  Try again\n");
		goto blew_it;
	}
	else if (mp->num_in == 2 && abs(temp[0] - temp[1]) > 1)
		goto err;
	for (tot = tot2 = i = 0; i < mp->num_in; i++) {
		if (temp[i] == 5 && input[i])
			tot2++;
		else
			tot += input[i];
	}
	if (tot > nhous) {
		printf(
"You have asked for %d house%s but only %d are available.  Try again\n",
		    tot, tot == 1 ? "":"s", nhous);
		goto blew_it;
	} else if (tot2 > nhot) {
		printf(
"You have asked for %d hotel%s but only %d are available.  Try again\n",
		    tot2, tot2 == 1 ? "":"s", nhot);
		goto blew_it;
	}
	if (!chot && tot2) {
		printf(
"You must have 4 houses on all your property before building hotels\n");
		goto blew_it;
	}
	if (tot || tot2) {
		printf("You asked for %d %s%s for $%d\n", tot ? tot : tot2, 
		    tot ? "house" : "hotel", (tot == 1 || tot2 == 1) ? "" : "s",
		    (tot ? tot : tot2) * price);
		if (getyn("Is that ok? ") == 0) {
			cur_p->money -= (tot ? tot : tot2) * price;
			for (tot = i = 0; i < mp->num_in; i++)
				mp->sq[i]->desc->houses = temp[i];
		}
	}
}

/*
 *	This routine sells houses.
 */
void
sell_houses(void)
{
	int	num_mon;
	MON	*mp;
	OWN	*op;
	bool	good;
	int	p;

over:
	num_mon = 0;
	good = TRUE;
	for (op = cur_p->own_list; op; op = op->next)
		if (op->sqr->type == PRPTY && op->sqr->desc->monop) {
			mp = op->sqr->desc->mon_desc;
			names[num_mon] = (monops[num_mon]=mp)->name;
			num_mon++;
			good = 0;
			do
				if (!good && op->sqr->desc->houses != 0)
					good++;
			while (op->next && op->sqr->desc->mon_desc == mp
			    && (op=op->next));
			if (!good)
				--num_mon;
		}
	if (num_mon == 0) {
		printf("You don't have any houses to sell!!\n");
		return;
	}
	if (num_mon == 1)
		sell_h(monops[0]);
	else {
		names[num_mon++] = "done";
		names[num_mon--] = 0;
		if ((p=getinp("Which property do you wish to sell houses from? ", names)) == num_mon)
			return;
		sell_h(monops[p]);
		notify();
		goto over;
	}
}

static void
sell_h(MON *mnp)
{
	int	i;
	MON	*mp;
	int	price;
	shrt	input[3],temp[3];
	int	tot;
	PROP	*pp;

	mp = mnp;
	price = mp->h_cost * 25;
blew_it:
	printf("Houses will get you $%d apiece\n", price);
	list_cur(mp);
	printf("How many houses do you wish to sell from\n");
	for (i = 0; i < mp->num_in; i++) {
		pp = mp->sq[i]->desc;
over:
		if (pp->houses == 0) {
			printf("%s (0):\n", mp->sq[i]->name);
			input[i] = temp[i] = 0;
			continue;
		}
		if (pp->houses < 5)
			(void)snprintf(cur_prop, sizeof(cur_prop), "%s (%d): ",
				mp->sq[i]->name,pp->houses);
		else
			(void)snprintf(cur_prop, sizeof(cur_prop), "%s (H): ",
			    mp->sq[i]->name);
		input[i] = get_int(cur_prop);
		temp[i] = pp->houses - input[i];
		if (temp[i] < 0) {
			printf("That's too many.  The most you can sell is %d\n", pp->houses);
				goto over;
			}
	}
	if (mp->num_in == 3 && (abs(temp[0] - temp[1]) > 1 ||
	    abs(temp[0] - temp[2]) > 1 || abs(temp[1] - temp[2]) > 1)) {
err:		printf("That makes the spread too wide.  Try again\n");
		goto blew_it;
	}
	else if (mp->num_in == 2 && abs(temp[0] - temp[1]) > 1)
		goto err;
	for (tot = i = 0; i < mp->num_in; i++)
		tot += input[i];
	if (tot) {
		printf("You asked to sell %d house%s for $%d\n", tot,
		    tot == 1 ? "" : "s", tot * price);
		if (getyn("Is that ok? ") == 0) {
			cur_p->money += tot * price;
			for (tot = i = 0; i < mp->num_in; i++)
				mp->sq[i]->desc->houses = temp[i];
		}
	}
}

static void
list_cur(MON *mp)
{
	int	i;
	SQUARE	*sqp;

	for (i = 0; i < mp->num_in; i++) {
		sqp = mp->sq[i];
		if (sqp->desc->houses == 5)
			printf("%s (H) ", sqp->name);
		else
			printf("%s (%d) ", sqp->name, sqp->desc->houses);
	}
	putchar('\n');
}

static int
avail_houses(void)
{
	int i, c;
	SQUARE *sqp;

	c = 0;
	for (i = 0; i < N_SQRS; i++) {
		sqp = &board[i];
		if (sqp->type == PRPTY && sqp->owner >= 0 && sqp->desc->monop) {
			if (sqp->desc->houses < 5 && sqp->desc->houses > 0)
				c += sqp->desc->houses;
		}
	}
	return(N_HOUSE - c);
}

static int
avail_hotels(void)
{
	int i, c;
	SQUARE *sqp;

	c = 0;
	for (i = 0; i < N_SQRS; i++) {
		sqp = &board[i];
		if (sqp->type == PRPTY && sqp->owner >= 0 && sqp->desc->monop) {
			if (sqp->desc->houses == 5)
				c++;
		}
	}
	return(N_HOTEL - c);
}

static bool
can_only_buy_hotel(MON *mp)
{
	int i;

	for (i = 0; i < mp->num_in; i++) {
		if (mp->sq[i]->desc->houses < 4)
			return(FALSE);
	}
	return(TRUE);
}
@


1.9
log
@Headers cleanup and removal where suitable

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: houses.c,v 1.8 2009/10/27 23:59:26 deraadt Exp $	*/
d54 1
a54 1
buy_houses()
d108 1
a108 2
buy_h(mnp)
     MON	*mnp;
d200 1
a200 1
sell_houses()
d243 1
a243 2
sell_h(mnp)
	MON	*mnp;
d300 1
a300 2
list_cur(mp)
	MON	*mp;
d316 1
a316 1
avail_houses()
d333 1
a333 1
avail_hotels()
d350 1
a350 2
can_only_buy_hotel(mp)
	MON	*mp;
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: houses.c,v 1.7 2008/11/10 18:02:17 sthen Exp $	*/
d33 4
a36 1
# include	"monop.ext"
@


1.7
log
@fix some situations where it was impossible to buy a hotel,
and make the game closer to the rules (may only buy a hotel
after 4 houses are owned on all properties in the group).

from Olivier ANTOINE in PR 5976.
@
text
@d1 1
a1 1
/*	$OpenBSD: houses.c,v 1.6 2006/03/26 17:20:51 deraadt Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)houses.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: houses.c,v 1.6 2006/03/26 17:20:51 deraadt Exp $";
#endif
#endif /* not lint */
@


1.6
log
@do not permit out of range house counts; af.dingo@@gmail
@
text
@d1 1
a1 1
/*	$OpenBSD: houses.c,v 1.5 2003/06/03 03:01:40 millert Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: houses.c,v 1.5 2003/06/03 03:01:40 millert Exp $";
d169 1
a169 1
		if (temp[i] == 5)
d185 9
a193 4

	if (tot) {
		printf("You asked for %d house%s and %d hotel%s for $%d\n", tot,
		    tot == 1 ? "" : "s", tot2, tot2 == 1 ? "" : "s", tot * price);
d195 1
a195 1
			cur_p->money -= tot * price;
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: houses.c,v 1.4 2002/07/28 08:44:14 pjanzen Exp $	*/
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: houses.c,v 1.4 2002/07/28 08:44:14 pjanzen Exp $";
d155 1
a155 1
		if (temp[i] > 5) {
d157 1
a157 1
				5 - pp->houses);
@


1.4
log
@Tidy the code, follow the rules more closely (and document where we diverge),
and make save files work.  The last stops a number of segfaults.
@
text
@d1 1
a1 1
/*	$OpenBSD: houses.c,v 1.3 2002/02/16 21:27:10 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD$";
@


1.3
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: houses.c,v 1.2 1998/09/20 23:36:51 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: houses.c,v 1.2 1998/09/20 23:36:51 pjanzen Exp $";
d55 3
d68 1
a68 1
	bool	good,got_morg;
d85 1
a85 1
					got_morg++;
d87 1
a87 1
					good++;
d124 1
a124 1
	int	tot;
d126 2
d131 11
d155 1
a155 1
		(void)sprintf(cur_prop, "%s (%d): ",
d172 18
a189 2
	for (tot = i = 0; i < mp->num_in; i++)
		tot += input[i];
d191 2
a192 1
		printf("You asked for %d houses for $%d\n", tot, tot * price);
d273 1
a273 1
			(void)sprintf(cur_prop,"%s (%d): ",
d276 2
a277 1
			(void)sprintf(cur_prop,"%s (H): ",mp->sq[i]->name);
d295 2
a296 1
		printf("You asked to sell %d houses for $%d\n",tot,tot * price);
d320 47
@


1.2
log
@rand -> random; handle EOF; don't overflow on user input; check for calloc()
success; OpenBSD tags; some reformatting and ridding of unused variables.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d52 3
a54 3
static void	buy_h __P((MON *));
static void	sell_h __P((MON *));
static void	list_cur __P((MON *));
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: houses.c,v 1.3 1995/03/23 08:34:40 cgd Exp $";
d52 4
d59 6
a64 5
buy_houses() {

	reg int num_mon;
	reg MON	*mp;
	reg OWN	*op;
d113 1
d115 5
a119 5
MON	*mnp; {

	reg int	i;
	reg MON	*mp;
	reg int	price;
d160 1
a160 1
		if (getyn("Is that ok? ", yn) == 0) {
d171 6
a176 5
sell_houses() {

	reg int	num_mon;
	reg MON	*mp;
	reg OWN	*op;
d214 1
d216 5
a220 5
MON	*mnp; {

	reg int	i;
	reg MON	*mp;
	reg int	price;
d262 1
a262 1
		if (getyn("Is that ok? ", yn) == 0) {
d270 1
d272 4
a275 4
reg MON	*mp; {

	reg int		i;
	reg SQUARE	*sqp;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
