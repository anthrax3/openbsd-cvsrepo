head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.10
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.8
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.12.0.4
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.9.0.26
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.18
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.28
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.24
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.2
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.01.08.18.20.33;	author mestre;	state Exp;
branches;
next	1.11;
commitid	IlHJftt9IPFIQn9F;

1.11
date	2016.01.08.18.19.47;	author mestre;	state Exp;
branches;
next	1.10;
commitid	73TLYe3VSt6HwinY;

1.10
date	2015.08.22.14.47.41;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	vWCbqNWL9DL2UkGT;

1.9
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.08.12.00.42.56;	author aaron;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.28.08.44.14;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.16.21.27.10;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.30.16.00.04;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	98.09.20.23.36.50;	author pjanzen;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	96.10.06.03.20.44;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.08;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.08;	author deraadt;	state Exp;
branches;
next	;

1.3.8.1
date	2000.10.06.20.40.25;	author jason;	state Exp;
branches;
next	;


desc
@@


1.12
log
@ANSIfy monop(6)

OK tb@@
@
text
@/*	$OpenBSD: cards.c,v 1.11 2016/01/08 18:19:47 mestre Exp $	*/
/*	$NetBSD: cards.c,v 1.3 1995/03/23 08:34:35 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <err.h>
#include <stdio.h>
#include <stdlib.h>

#include "monop.ext"
#include "pathnames.h"

/*
 *	These routine deal with the card decks
 */

#define	GOJF	'F'	/* char for get-out-of-jail-free cards	*/

static char	*cardfile	= _PATH_CARDS;

static FILE	*deckf;

static void set_up(DECK *);
static void printmes(void);

/*
 *	This routine initializes the decks from the data file,
 * which it opens.
 */
void
init_decks(void)
{
	if ((deckf = fopen(cardfile, "r")) == NULL)
file_err:
		err(1, "%s", cardfile);
	if (fread(&deck[0].num_cards, sizeof(deck[0].num_cards), 1, deckf) != 1)
		goto file_err;
	if (fread(&deck[0].top_card, sizeof(deck[0].top_card), 1, deckf) != 1)
		goto file_err;
	if (fread(&deck[0].gojf_used, sizeof(deck[0].gojf_used), 1, deckf) != 1)
		goto file_err;
	deck[0].num_cards = ntohs(deck[0].num_cards);
	deck[0].top_card = ntohs(deck[0].top_card);

	if (fread(&deck[1].num_cards, sizeof(deck[1].num_cards), 1, deckf) != 1)
		goto file_err;
	if (fread(&deck[1].top_card, sizeof(deck[1].top_card), 1, deckf) != 1)
		goto file_err;
	if (fread(&deck[1].gojf_used, sizeof(deck[1].gojf_used), 1, deckf) != 1)
		goto file_err;
	deck[1].num_cards = ntohs(deck[1].num_cards);
	deck[1].top_card = ntohs(deck[1].top_card);

	set_up(&CC_D);
	set_up(&CH_D);
}
/*
 *	This routine sets up the offset pointers for the given deck.
 */
static void
set_up(DECK *dp)
{
	int	r1, r2;
	int	i;

	if ((dp->offsets = calloc(dp->num_cards, sizeof (int32_t))) == NULL)
		err(1, NULL);
	for (i = 0 ; i < dp->num_cards ; i++) {
		if (fread(&dp->offsets[i], sizeof(dp->offsets[i]), 1, deckf) != 1)
			err(1, "%s", cardfile);
		dp->offsets[i] = ntohl(dp->offsets[i]);
	}
	dp->top_card = 0;
	dp->gojf_used = FALSE;
	for (i = 0; i < dp->num_cards; i++) {
		long	temp;

		r1 = roll(1, dp->num_cards) - 1;
		r2 = roll(1, dp->num_cards) - 1;
		temp = dp->offsets[r2];
		dp->offsets[r2] = dp->offsets[r1];
		dp->offsets[r1] = temp;
	}
}
/*
 *	This routine draws a card from the given deck
 */
void
get_card(DECK *dp)
{
	char	type_maj, type_min;
	int16_t	num;
	int	i, per_h, per_H, num_h, num_H;
	OWN	*op;

	do {
		fseek(deckf, dp->offsets[dp->top_card], SEEK_SET);
		dp->top_card = ++(dp->top_card) % dp->num_cards;
		type_maj = getc(deckf);
	} while (dp->gojf_used && type_maj == GOJF);
	type_min = getc(deckf);
	fread(&num, sizeof(num), 1, deckf);
	num = ntohs(num);
	printmes();
	switch (type_maj) {
	  case '+':		/* get money		*/
		if (type_min == 'A') {
			for (i = 0; i < num_play; i++)
				if (i != player)
					play[i].money -= num;
			num = num * (num_play - 1);
		}
		cur_p->money += num;
		break;
	  case '-':		/* lose money		*/
		if (type_min == 'A') {
			for (i = 0; i < num_play; i++)
				if (i != player)
					play[i].money += num;
			num = num * (num_play - 1);
		}
		cur_p->money -= num;
		break;
	  case 'M':		/* move somewhere	*/
		switch (type_min) {
		  case 'F':		/* move forward	*/
			num -= cur_p->loc;
			if (num < 0)
				num += 40;
			break;
		  case 'J':		/* move to jail	*/
			goto_jail();
			return;
		  case 'R':		/* move to railroad	*/
			spec = TRUE;
			num = (int)((cur_p->loc + 5)/10)*10 + 5 - cur_p->loc;
			break;
		  case 'U':		/* move to utility	*/
			spec = TRUE;
			if (cur_p->loc >= 12 && cur_p->loc < 28)
				num = 28 - cur_p->loc;
			else {
				num = 12 - cur_p->loc;
				if (num < 0)
					num += 40;
			}
			break;
		  case 'B':
			num = -num;
			break;
		}
		move(num);
		break;
	  case 'T':			/* tax			*/
		if (dp == &CC_D) {
			per_h = 40;
			per_H = 115;
		}
		else {
			per_h = 25;
			per_H = 100;
		}
		num_h = num_H = 0;
		for (op = cur_p->own_list; op; op = op->next)
			if (op->sqr->type == PRPTY) {
				if (op->sqr->desc->houses == 5)
					++num_H;
				else
					num_h += op->sqr->desc->houses;
			}
		num = per_h * num_h + per_H * num_H;
		printf("You had %d Houses and %d Hotels, so that cost you $%d\n", num_h, num_H, num);
		if (num == 0)
			lucky("");
		else
			cur_p->money -= num;
		break;
	  case GOJF:		/* get-out-of-jail-free card	*/
		cur_p->num_gojf++;
		dp->gojf_used = TRUE;
		break;
	}
	spec = FALSE;
}

/*
 *	This routine prints out the message on the card
 */
static void
printmes(void)
{
	char	c;

	printline();
	fflush(stdout);
	while ((c = getc(deckf)) != '\0')
		putchar(c);
	printline();
	fflush(stdout);
}

/*
 *	This routine returns the players get-out-of-jail-free card
 * to the bottom of a deck.  XXX currently does not return to the correct
 * deck.
 */
void
ret_card(PLAY *plr)
{
	char	type_maj;
	int16_t	gojfpos, last_card;
	int	i;
	DECK *dp;
	int32_t temp;

	plr->num_gojf--;
	if (CC_D.gojf_used)
		dp = &CC_D;
	else
		dp = &CH_D;
	dp->gojf_used = FALSE;

	/* Put at bottom of deck (top_card - 1) and remove it from wherever else
	 * it used to be.
	 */
	last_card = dp->top_card - 1;
	if (last_card < 0)
		last_card += dp->num_cards;
	gojfpos = dp->top_card;
	do {
		gojfpos = (gojfpos + 1) % dp->num_cards;
		fseek(deckf, dp->offsets[gojfpos], SEEK_SET);
		type_maj = getc(deckf);
	} while (type_maj != GOJF);
	temp = dp->offsets[gojfpos];
	/* Only one of the next two loops does anything */
	for (i = gojfpos - 1; i > last_card; i--)
		dp->offsets[i + 1] = dp->offsets[i];
	for (i = gojfpos; i < last_card; i++)
		dp->offsets[i] = dp->offsets[i + 1];
	if (gojfpos > last_card) {
		dp->offsets[dp->top_card] = temp;
		dp->top_card++;
		dp->top_card %= dp->num_cards;
	} else
		dp->offsets[last_card] = temp;
}
@


1.11
log
@Headers cleanup and removal where suitable

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: cards.c,v 1.10 2015/08/22 14:47:41 deraadt Exp $	*/
d58 1
a58 1
init_decks()
d88 1
a88 2
set_up(dp)
	DECK	*dp;
d116 1
a116 2
get_card(dp)
	DECK	*dp;
d217 1
a217 1
printmes()
d235 1
a235 2
ret_card(plr)
	PLAY	*plr;
@


1.10
log
@remove malloc/calloc/realloc* casts, due to stdlib.h being present; ok millert krw
@
text
@d1 1
a1 1
/*	$OpenBSD: cards.c,v 1.9 2009/10/27 23:59:26 deraadt Exp $	*/
d33 6
a38 3
#include	<err.h>
#include	"monop.ext"
#include	"pathnames.h"
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: cards.c,v 1.8 2003/06/03 03:01:40 millert Exp $	*/
d91 1
a91 1
	if ((dp->offsets = (int32_t *) calloc(dp->num_cards, sizeof (int32_t))) == NULL)
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: cards.c,v 1.7 2002/08/12 00:42:56 aaron Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)cards.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: cards.c,v 1.7 2002/08/12 00:42:56 aaron Exp $";
#endif
#endif /* not lint */
@


1.7
log
@Swap args to calloc(3) so they are in the correct order; art@@ ok.
@
text
@d1 1
a1 1
/*	$OpenBSD: cards.c,v 1.6 2002/07/28 08:44:14 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD: cards.c,v 1.6 2002/07/28 08:44:14 pjanzen Exp $";
@


1.6
log
@Tidy the code, follow the rules more closely (and document where we diverge),
and make save files work.  The last stops a number of segfaults.
@
text
@d1 1
a1 1
/*	$OpenBSD: cards.c,v 1.5 2002/02/16 21:27:10 millert Exp $	*/
d41 1
a41 1
static const char rcsid[] = "$OpenBSD$";
d103 1
a103 1
	if ((dp->offsets = (int32_t *) calloc(sizeof (int32_t), dp->num_cards)) == NULL)
@


1.5
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: cards.c,v 1.4 2000/06/30 16:00:04 millert Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cards.c,v 1.4 2000/06/30 16:00:04 millert Exp $";
a54 1
#ifndef DEV
a55 3
#else
static char	*cardfile	= "cards.pck";
#endif
d74 1
a74 1
	if (fread(&deck[0].last_card, sizeof(deck[0].last_card), 1, deckf) != 1)
d79 1
a79 1
	deck[0].last_card = ntohs(deck[0].last_card);
d83 1
a83 1
	if (fread(&deck[1].last_card, sizeof(deck[1].last_card), 1, deckf) != 1)
d88 1
a88 1
	deck[1].last_card = ntohs(deck[1].last_card);
d104 1
a104 1
		errx(1, "malloc");
d110 1
a110 1
	dp->last_card = 0;
d135 2
a136 2
		fseek(deckf, dp->offsets[dp->last_card], 0);
		dp->last_card = ++(dp->last_card) % dp->num_cards;
d223 1
d238 48
@


1.4
log
@warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: cards.c,v 1.3 1998/09/20 23:36:50 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cards.c,v 1.3 1998/09/20 23:36:50 pjanzen Exp $";
d63 2
a64 2
static void set_up __P((DECK *));
static void printmes __P((void));
@


1.3
log
@rand -> random; handle EOF; don't overflow on user input; check for calloc()
success; OpenBSD tags; some reformatting and ridding of unused variables.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d75 1
a75 1
		err(1, cardfile);
d111 1
a111 1
			err(1, cardfile);
@


1.3.8.1
log
@Pull in patch from current (more to come...):
Fix (millert):
warnx?/errx? paranoia (use "%s" not a bare string unless it is a
constant).  These are not security holes but it is worth fixing
them anyway both for robustness and so folks looking for examples
in the tree are not misled into doing something potentially dangerous.
Furthermore, it is a bad idea to assume that pathnames will not
include '%' in them and that error routines don't return strings
with '%' in them (especially in light of the possibility of locales).
@
text
@d1 1
a1 1
/*	$OpenBSD: cards.c,v 1.3 1998/09/20 23:36:50 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: cards.c,v 1.3 1998/09/20 23:36:50 pjanzen Exp $";
d75 1
a75 1
		err(1, "%s", cardfile);
d111 1
a111 1
			err(1, "%s", cardfile);
@


1.2
log
@Store the card deck using fixed sizes and network byte order
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: cards.c,v 1.3 1995/03/23 08:34:35 cgd Exp $";
d45 3
a47 2
# include	"monop.ext"
# include	"pathnames.h"
d53 1
a53 1
# define	GOJF	'F'	/* char for get-out-of-jail-free cards	*/
d55 1
a55 1
# ifndef DEV
d57 1
a57 1
# else
d59 1
a59 1
# endif
d63 3
d70 4
a73 3
init_decks() {

	if ((deckf=fopen(cardfile, "r")) == NULL) {
d75 1
a75 3
		perror(cardfile);
		exit(1);
	}
d100 1
d102 3
a104 3
DECK	*dp; {

	reg int	r1, r2;
d107 2
a108 1
	dp->offsets = (int32_t *) calloc(sizeof (int32_t), dp->num_cards);
d110 2
a111 4
		if (fread(&dp->offsets[i], sizeof(dp->offsets[i]), 1, deckf) != 1) {
			perror(cardfile);
			exit(1);
		}
d117 1
a117 1
		reg long	temp;
d129 1
d131 6
a136 6
DECK	*dp; {

	reg char	type_maj, type_min;
	int16_t		num;
	int		i, per_h, per_H, num_h, num_H;
	OWN		*op;
d207 1
a207 1
			if (op->sqr->type == PRPTY)
d212 1
d230 4
a233 3
printmes() {

	reg char	c;
@


1.1
log
@Initial revision
@
text
@d72 1
a72 1
	if (fread(deck, sizeof (DECK), 2, deckf) != 2)
d74 16
d102 7
a108 4
	dp->offsets = (long *) calloc(sizeof (long), dp->num_cards);
	if (fread(dp->offsets, sizeof(long), dp->num_cards, deckf) != dp->num_cards) {
		perror(cardfile);
		exit(1);
d129 1
a129 1
	reg int		num;
d139 2
a140 1
	num = getw(deckf);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
