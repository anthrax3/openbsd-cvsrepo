head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.8
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.8.0.6
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.7.0.22
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.20
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.01.08.18.20.33;	author mestre;	state Exp;
branches;
next	1.10;
commitid	IlHJftt9IPFIQn9F;

1.10
date	2016.01.08.18.19.47;	author mestre;	state Exp;
branches;
next	1.9;
commitid	73TLYe3VSt6HwinY;

1.9
date	2015.08.22.14.47.41;	author deraadt;	state Exp;
branches;
next	1.8;
commitid	vWCbqNWL9DL2UkGT;

1.8
date	2014.12.08.21.11.02;	author tedu;	state Exp;
branches;
next	1.7;
commitid	29EfK2OXVbH3I5SA;

1.7
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.28.08.44.14;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.17.00.27.21;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	98.09.20.23.36.55;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@ANSIfy monop(6)

OK tb@@
@
text
@/*	$OpenBSD: prop.c,v 1.10 2016/01/08 18:19:47 mestre Exp $	*/
/*	$NetBSD: prop.c,v 1.3 1995/03/23 08:35:06 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <err.h>
#include <stdio.h>
#include <stdlib.h>

#include "monop.ext"

static int	value(SQUARE *);

/*
 *	This routine deals with buying property, setting all the
 * appropriate flags.
 */
void
buy(int plr, SQUARE *sqrp)
{
	trading = FALSE;
	sqrp->owner = plr;
	add_list(plr, &(play[plr].own_list), cur_p->loc);
}
/*
 *	This routine adds an item to the list.
 */
void
add_list(int plr, OWN **head, int op_sqr)
{
	int	val;
	OWN	*tp, *last_tp;
	OWN	*op;

	if ((op = calloc(1, sizeof (OWN))) == NULL)
		err(1, NULL);
	op->sqr = &board[op_sqr];
	val = value(op->sqr);
	last_tp = NULL;
	for (tp = *head; tp && value(tp->sqr) < val; tp = tp->next)
		if (val == value(tp->sqr)) {
			free(op);
			return;
		}
		else
			last_tp = tp;
	op->next = tp;
	if (last_tp != NULL)
		last_tp->next = op;
	else
		*head = op;
	if (!trading)
		set_ownlist(plr);
}
/*
 *	This routine deletes property from the list.
 */
void
del_list(int plr, OWN **head, shrt op_sqr)
{
	OWN	*op, *last_op;

	switch (board[(int)op_sqr].type) {
	case PRPTY:
		board[(int)op_sqr].desc->mon_desc->num_own--;
		break;
	case RR:
		play[plr].num_rr--;
		break;
	case UTIL:
		play[plr].num_util--;
		break;
	}
	last_op = NULL;
	for (op = *head; op; op = op->next)
		if (op->sqr == &board[(int)op_sqr])
			break;
		else
			last_op = op;
	if (last_op == NULL)
		*head = op->next;
	else {
		last_op->next = op->next;
		free(op);
	}
}
/*
 *	This routine calculates the value for sorting of the
 * given square.
 */
static int
value(SQUARE *sqp)
{
	int	sqr;

	sqr = sqnum(sqp);
	switch (sqp->type) {
	case SAFE:
		return 0;
	default:		/* Specials, etc */
		return 1;
	case UTIL:
		if (sqr == 12)
			return 2;
		else
			return 3;
	case RR:
		return 4 + sqr/10;
	case PRPTY:
		return 8 + (sqp->desc) - prop;
	}
}
/*
 *	This routine accepts bids for the current piece of property.
 */
void
bid(void)
{
	static bool	in[MAX_PL];
	int		i, num_in, cur_max;
	char		buf[257];
	int		cur_bid;

	printf("\nSo it goes up for auction.  Type your bid after your name\n");
	for (i = 0; i < num_play; i++)
		in[i] = TRUE;
	i = -1;
	cur_max = 0;
	num_in = num_play;
	while (num_in > 1 || (cur_max == 0 && num_in > 0)) {
		i = (i + 1) % num_play;
		if (in[i]) {
			do {
				(void)snprintf(buf, sizeof(buf), "%s: ", name_list[i]);
				cur_bid = get_int(buf);
				if (cur_bid == 0) {
					in[i] = FALSE;
					if (--num_in == 0)
						break;
				} else if (cur_bid <= cur_max) {
					printf("You must bid higher than %d to stay in\n", cur_max);
					printf("(bid of 0 drops you out)\n");
				} else if (cur_bid > play[i].money) {
					printf("You can't bid more than your cash ($%d)\n",
					    play[i].money);
					cur_bid = -1;
				}
			} while (cur_bid != 0 && cur_bid <= cur_max);
			cur_max = (cur_bid ? cur_bid : cur_max);
		}
	}
	if (cur_max != 0) {
		while (!in[i])
			i = (i + 1) % num_play;
		printf("It goes to %s (%d) for $%d\n",play[i].name,i+1,cur_max);
		buy(i, &board[(int)cur_p->loc]);
		play[i].money -= cur_max;
	}
	else
		printf("Nobody seems to want it, so we'll leave it for later\n");
}
/*
 *	This routine calculates the value of the property
 * of given player.
 */
int
prop_worth(PLAY *plp)
{
	OWN	*op;
	int	worth;

	worth = 0;
	for (op = plp->own_list; op; op = op->next) {
		if (op->sqr->type == PRPTY && op->sqr->desc->monop)
			worth += op->sqr->desc->mon_desc->h_cost * 50 *
			    op->sqr->desc->houses;
		worth += op->sqr->cost;
	}
	return worth;
}
@


1.10
log
@Headers cleanup and removal where suitable

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: prop.c,v 1.9 2015/08/22 14:47:41 deraadt Exp $	*/
d46 1
a46 3
buy(plr, sqrp)
	int	plr;
	SQUARE	*sqrp;
d56 1
a56 4
add_list(plr, head, op_sqr)
	int	plr;
	OWN	**head;
	int	op_sqr;
d86 1
a86 4
del_list(plr, head, op_sqr)
	int	plr;
	OWN	**head;
	shrt	op_sqr;
d119 1
a119 2
value(sqp)
	SQUARE	*sqp;
d144 1
a144 1
bid()
d194 1
a194 2
prop_worth(plp)
	PLAY	*plp;
@


1.9
log
@remove malloc/calloc/realloc* casts, due to stdlib.h being present; ok millert krw
@
text
@d1 1
a1 1
/*	$OpenBSD: prop.c,v 1.8 2014/12/08 21:11:02 tedu Exp $	*/
d33 5
a37 2
#include	<err.h>
#include	"monop.ext"
@


1.8
log
@okan noticed this was actually calling the cfree turd.
@
text
@d1 1
a1 1
/*	$OpenBSD: prop.c,v 1.7 2009/10/27 23:59:26 deraadt Exp $	*/
d64 1
a64 1
	if ((op = (OWN *)calloc(1, sizeof (OWN))) == NULL)
@


1.7
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: prop.c,v 1.6 2003/06/03 03:01:40 millert Exp $	*/
d71 1
a71 1
			cfree(op);
d116 1
a116 1
		cfree(op);
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: prop.c,v 1.5 2002/07/28 08:44:14 pjanzen Exp $	*/
a31 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)prop.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: prop.c,v 1.5 2002/07/28 08:44:14 pjanzen Exp $";
#endif
#endif /* not lint */
@


1.5
log
@Tidy the code, follow the rules more closely (and document where we diverge),
and make save files work.  The last stops a number of segfaults.
@
text
@d1 1
a1 1
/*	$OpenBSD: prop.c,v 1.4 2002/02/16 21:27:11 millert Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d37 1
a37 1
static const char rcsid[] = "$OpenBSD$";
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: prop.c,v 1.3 2001/01/17 00:27:21 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: prop.c,v 1.3 2001/01/17 00:27:21 pjanzen Exp $";
d55 2
a56 2
buy(player, sqrp)
	int	player;
d60 2
a61 2
	sqrp->owner = player;
	add_list(player, &(play[player].own_list), cur_p->loc);
d77 1
a77 1
		errx(1, "malloc");
d107 1
a107 1
	switch (board[op_sqr].type) {
d109 1
a109 1
		board[op_sqr].desc->mon_desc->num_own--;
d120 1
a120 1
		if (op->sqr == &board[op_sqr])
d159 1
a159 2
 *	This routine accepts bids for the current peice
 * of property.
d179 1
a179 1
				(void)sprintf(buf, "%s: ", name_list[i]);
d185 1
a185 2
				}
				else if (cur_bid <= cur_max) {
d188 4
d201 1
a201 1
		buy(i, &board[cur_p->loc]);
@


1.3
log
@avoid C sequence point issues; found by cgd@@netbsd.org using a development
version of gcc.
@
text
@d1 1
a1 1
/*	$OpenBSD: prop.c,v 1.2 1998/09/20 23:36:55 pjanzen Exp $	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD: prop.c,v 1.2 1998/09/20 23:36:55 pjanzen Exp $";
d48 1
a48 1
static int	value __P((SQUARE *));
@


1.2
log
@rand -> random; handle EOF; don't overflow on user input; check for calloc()
success; OpenBSD tags; some reformatting and ridding of unused variables.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 1
static char rcsid[] = "$OpenBSD$";
d177 1
a177 1
		i = ++i % num_play;
d197 1
a197 1
			i = ++i % num_play;
@


1.1
log
@Initial revision
@
text
@d1 1
d41 1
a41 1
static char rcsid[] = "$NetBSD: prop.c,v 1.3 1995/03/23 08:35:06 cgd Exp $";
d45 2
a46 1
# include	"monop.ext"
d48 1
a48 1
extern char *calloc();
d54 1
d56 3
a58 3
reg int		player;
reg SQUARE	*sqrp; {

d66 1
d68 6
a73 7
int	plr;
OWN	**head;
int	op_sqr; {

	reg int	val;
	reg OWN	*tp, *last_tp;
	MON	*mp;
d76 2
a77 1
	op = (OWN *)calloc(1, sizeof (OWN));
d99 1
d101 5
a105 6
int	plr;
OWN	**head;
shrt	op_sqr; {

	reg int	i;
	reg OWN	*op, *last_op;
d108 1
a108 1
	  case PRPTY:
d111 1
a111 1
	  case RR:
d114 1
a114 1
	  case UTIL:
d135 1
d137 3
a139 3
reg SQUARE	*sqp; {

	reg int	sqr;
d143 1
a143 1
	  case SAFE:
d145 1
a145 1
	  default:		/* Specials, etc */
d147 1
a147 1
	  case UTIL:
d152 1
a152 1
	  case RR:
d154 1
a154 1
	  case PRPTY:
d162 3
a164 2
bid() {

d166 2
a167 2
	reg int		i, num_in, cur_max;
	char		buf[80];
d209 1
d211 4
a214 4
reg PLAY	*plp; {

	reg OWN	*op;
	reg int	worth;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
