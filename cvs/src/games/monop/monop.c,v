head	1.16;
access;
symbols
	OPENBSD_6_1:1.16.0.8
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.4
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.16
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.14
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.12
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.10
	OPENBSD_5_0:1.10.0.8
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.10
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.6
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.4
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.2
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.8.0.4
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.2
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.10
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.8
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.6
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2016.01.08.18.20.33;	author mestre;	state Exp;
branches;
next	1.15;
commitid	IlHJftt9IPFIQn9F;

1.15
date	2016.01.08.18.19.47;	author mestre;	state Exp;
branches;
next	1.14;
commitid	73TLYe3VSt6HwinY;

1.14
date	2015.11.21.03.20.30;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	XFuRsPC9W3quF3fZ;

1.13
date	2015.08.22.14.47.41;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	vWCbqNWL9DL2UkGT;

1.12
date	2014.12.08.21.11.02;	author tedu;	state Exp;
branches;
next	1.11;
commitid	29EfK2OXVbH3I5SA;

1.11
date	2013.08.29.20.22.16;	author naddy;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2007.09.11.15.21.05;	author gilles;	state Exp;
branches;
next	1.8;

1.8
date	2007.03.02.04.32.32;	author ray;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.03.01.40;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.12.06.21.48.51;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.28.08.44.14;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.16.21.27.10;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.04.20.41.31;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	98.09.20.23.36.52;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.09;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.09;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@ANSIfy monop(6)

OK tb@@
@
text
@/*	$OpenBSD: monop.c,v 1.15 2016/01/08 18:19:47 mestre Exp $	*/
/*	$NetBSD: monop.c,v 1.3 1995/03/23 08:34:52 cgd Exp $	*/

/*
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <err.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "monop.def"

static void	getplayers(void);
static void	init_players(void);
static void	init_monops(void);

/*
 *	This program implements a monopoly game
 */
int
main(int ac, char *av[])
{
	num_luck = sizeof lucky_mes / sizeof (char *);

	if (pledge("stdio rpath wpath cpath", NULL) == -1)
		err(1, "pledge");

	init_decks();
	init_monops();
	if (ac > 1) {
		if (!rest_f(av[1]))
			restore();
	}
	else {
		getplayers();
		init_players();
	}
	for (;;) {
		printf("\n%s (%d) (cash $%d) on %s\n", cur_p->name, player + 1,
			cur_p->money, board[(int)cur_p->loc].name);
		printturn();
		force_morg();
		execute(getinp("-- Command: ", comlist));
	}
}

/*
 *	This routine gets the names of the players
 */
static void
getplayers(void)
{
	int	i, j;
	char	buf[257];

blew_it:
	for (;;) {
		if ((num_play = get_int("How many players? ")) <= 1 ||
		    num_play > MAX_PL)
			printf("Sorry. Number must range from 2 to %d\n",
			    MAX_PL);
		else
			break;
	}
	if ((cur_p = play = calloc(num_play, sizeof (PLAY))) == NULL)
		err(1, NULL);
	for (i = 0; i < num_play; i++) {
		do {
			printf("Player %d's name: ", i + 1);
			fgets(buf, sizeof(buf), stdin);
			if ((feof(stdin))) {
				printf("user closed input stream, quitting...\n");
				exit(0);
			}
			buf[strcspn(buf, "\n")] = '\0';
		} while (strlen(buf) == 0);
		if ((name_list[i] = play[i].name = strdup(buf)) == NULL)
			err(1, NULL);
		play[i].money = 1500;
	}
	name_list[i++] = "done";
	name_list[i] = 0;
	for (i = 0; i < num_play; i++)
		for (j = i + 1; j <= num_play; j++)
			if (strcasecmp(name_list[i], name_list[j]) == 0) {
				if (j != num_play)
					printf("Hey!!! Some of those are IDENTICAL!!  Let's try that again...\n");
				else
					printf("\"done\" is a reserved word.  Please try again\n");
				for (i = 0; i < num_play; i++)
					free(play[i].name);
				free(play);
				goto blew_it;
			}
}
/*
 *	This routine figures out who goes first
 */
static void
init_players(void)
{
	int	i, rl, cur_max;
	bool	over = 0;
	int	max_pl = 0;

again:
	putchar('\n');
	for (cur_max = i = 0; i < num_play; i++) {
		printf("%s (%d) rolls %d\n", play[i].name, i+1, rl=roll(2, 6));
		if (rl > cur_max) {
			over = FALSE;
			cur_max = rl;
			max_pl = i;
		}
		else if (rl == cur_max)
			over++;
	}
	if (over) {
		printf("%d people rolled the same thing, so we'll try again\n",
		    over + 1);
		goto again;
	}
	player = max_pl;
	cur_p = &play[max_pl];
	printf("%s (%d) goes first\n", cur_p->name, max_pl + 1);
}
/*
 *	This routine initializes the monopoly structures.
 */
static void
init_monops(void)
{
	MON	*mp;
	int	i;

	for (mp = mon; mp < &mon[N_MON]; mp++) {
		mp->name = mp->not_m;
		for (i = 0; i < mp->num_in; i++)
			mp->sq[i] = &board[(int)mp->sqnums[i]];
	}
}
@


1.15
log
@Headers cleanup and removal where suitable

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.14 2015/11/21 03:20:30 deraadt Exp $	*/
d49 1
a49 3
main(ac, av)
	int	ac;
	char	*av[];
d79 1
a79 1
getplayers()
d128 1
a128 1
init_players()
d159 1
a159 1
init_monops()
@


1.14
log
@pledge "stdio rpath wpath cpath"
from Ricardo Mestre
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.13 2015/08/22 14:47:41 deraadt Exp $	*/
d33 7
a39 4
#include	<err.h>
#include	<stdlib.h>
#include	<unistd.h>
#include	"monop.def"
@


1.13
log
@remove malloc/calloc/realloc* casts, due to stdlib.h being present; ok millert krw
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.12 2014/12/08 21:11:02 tedu Exp $	*/
d51 4
d56 1
a56 1
		init_monops();
@


1.12
log
@okan noticed this was actually calling the cfree turd.
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.11 2013/08/29 20:22:16 naddy Exp $	*/
d88 1
a88 1
	if ((cur_p = play = (PLAY *) calloc(num_play, sizeof (PLAY))) == NULL)
@


1.11
log
@replace srandomdev()+random() with the arc4random*() family
tweaks and ok millert@@, ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.10 2009/10/27 23:59:26 deraadt Exp $	*/
d115 1
a115 1
				cfree(play);
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.9 2007/09/11 15:21:05 gilles Exp $	*/
a49 1
	srandomdev();
@


1.9
log
@use strcspn to properly overwrite '\n' in fgets returned buffer

ok pyr@@, ray@@, millert@@, moritz@@, chl@@
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.8 2007/03/02 04:32:32 ray Exp $	*/
a31 14

#ifndef lint
static const char copyright[] =
"@@(#) Copyright (c) 1980, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)monop.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: monop.c,v 1.8 2007/03/02 04:32:32 ray Exp $";
#endif
#endif /* not lint */
@


1.8
log
@strlen fixes from Charles Longeau.

OK moritz@@.
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.7 2003/06/03 03:01:40 millert Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: monop.c,v 1.7 2003/06/03 03:01:40 millert Exp $";
a90 1
	char	*sp;
d113 1
a113 2
			if ((sp = strchr(buf, '\n')) != NULL)
				*sp = '\0';
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.6 2002/12/06 21:48:51 millert Exp $	*/
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: monop.c,v 1.6 2002/12/06 21:48:51 millert Exp $";
d114 1
a114 2
			sp = buf + strlen(buf) - 1;
			if (*sp == '\n')
@


1.6
log
@Replace things like srandom(time(NULL)) with srandomdev(3).  random(3)
good enough for games but we should at least use a decent seed.
pjanzen@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.5 2002/07/28 08:44:14 pjanzen Exp $	*/
d16 1
a16 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d43 1
a43 1
static const char rcsid[] = "$OpenBSD: monop.c,v 1.5 2002/07/28 08:44:14 pjanzen Exp $";
@


1.5
log
@Tidy the code, follow the rules more closely (and document where we diverge),
and make save files work.  The last stops a number of segfaults.
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.4 2002/02/16 21:27:10 millert Exp $	*/
d47 1
a47 1
static const char rcsid[] = "$OpenBSD$";
d68 1
a68 1
	srandom(getpid());
@


1.4
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.3 2001/01/04 20:41:31 todd Exp $	*/
d38 1
a38 1
static char copyright[] =
d47 1
a47 1
static char rcsid[] = "$OpenBSD: monop.c,v 1.3 2001/01/04 20:41:31 todd Exp $";
a51 1
#include	<signal.h>
a58 1
static void	do_quit(int);
d69 3
a78 1
		init_monops();
a79 3
	num_luck = sizeof lucky_mes / sizeof (char *);
	init_decks();
	signal(SIGQUIT, do_quit);
d82 1
a82 1
			cur_p->money, board[cur_p->loc].name);
a88 6
static void
do_quit(n)
	int	n;
{
	quit();
}
d103 2
a104 1
			printf("Sorry. Number must range from 2 to 9\n");
d109 1
a109 1
		errx(1, "malloc");
d122 2
a123 3
		if ((name_list[i] = play[i].name = (char *)calloc(1, sizeof(buf))) == NULL)
			errx(1, "malloc");
		strcpy(name_list[i], buf);
d136 1
a136 1
					cfree(play[i].name);
d184 1
a184 1
			mp->sq[i] = &board[mp->sqnums[i]];
@


1.3
log
@spelling
@
text
@d1 1
a1 1
/*	$OpenBSD: monop.c,v 1.2 1998/09/20 23:36:52 pjanzen Exp $	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD: monop.c,v 1.2 1998/09/20 23:36:52 pjanzen Exp $";
d57 4
a60 4
static void	getplayers __P((void));
static void	init_players __P((void));
static void	init_monops __P((void));
static void	do_quit __P((int));
@


1.2
log
@rand -> random; handle EOF; don't overflow on user input; check for calloc()
success; OpenBSD tags; some reformatting and ridding of unused variables.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d47 1
a47 1
static char rcsid[] = "$OpenBSD$";
d182 1
a182 1
 *	This routine initalizes the monopoly structures.
@


1.1
log
@Initial revision
@
text
@d1 1
d47 1
a47 1
static char rcsid[] = "$NetBSD: monop.c,v 1.3 1995/03/23 08:34:52 cgd Exp $";
d51 10
a60 1
# include	"monop.def"
d65 1
d67 4
a70 5
reg int		ac;
reg char	*av[]; {


	srand(getpid());
d82 1
a82 1
	signal(2, quit);
d91 7
d101 6
a106 5
getplayers() {

	reg char	*sp;
	reg int		i, j;
	char		buf[257];
d110 1
a110 1
		if ((num_play=get_int("How many players? ")) <= 0 ||
d112 1
a112 1
			printf("Sorry. Number must range from 1 to 9\n");
d116 2
a117 1
	cur_p = play = (PLAY *) calloc(num_play, sizeof (PLAY));
d119 14
a132 8
over:
		printf("Player %d's name: ", i + 1);
		for (sp = buf; (*sp=getchar()) != '\n'; sp++)
			continue;
		if (sp == buf)
			goto over;
		*sp++ = '\0';
		strcpy(name_list[i]=play[i].name=(char *)calloc(1,sp-buf),buf);
d138 1
a138 1
		for (j = i + 1; j < num_play; j++)
d140 2
a141 2
				if (i != num_play - 1)
					printf("Hey!!! Some of those are IDENTICAL!!  Let's try that again....\n");
d153 6
a158 5
init_players() {

	reg int	i, rl, cur_max;
	bool	over;
	int	max_pl;
d184 5
a188 4
init_monops() {

	reg MON	*mp;
	reg int	i;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
