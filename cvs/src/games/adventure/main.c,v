head	1.25;
access;
symbols
	OPENBSD_6_0:1.23.0.2
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.22
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.20
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.16
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.19.0.14
	OPENBSD_5_3_BASE:1.19
	OPENBSD_5_2:1.19.0.12
	OPENBSD_5_2_BASE:1.19
	OPENBSD_5_1_BASE:1.19
	OPENBSD_5_1:1.19.0.10
	OPENBSD_5_0:1.19.0.8
	OPENBSD_5_0_BASE:1.19
	OPENBSD_4_9:1.19.0.6
	OPENBSD_4_9_BASE:1.19
	OPENBSD_4_8:1.19.0.4
	OPENBSD_4_8_BASE:1.19
	OPENBSD_4_7:1.19.0.2
	OPENBSD_4_7_BASE:1.19
	OPENBSD_4_6:1.18.0.24
	OPENBSD_4_6_BASE:1.18
	OPENBSD_4_5:1.18.0.20
	OPENBSD_4_5_BASE:1.18
	OPENBSD_4_4:1.18.0.18
	OPENBSD_4_4_BASE:1.18
	OPENBSD_4_3:1.18.0.16
	OPENBSD_4_3_BASE:1.18
	OPENBSD_4_2:1.18.0.14
	OPENBSD_4_2_BASE:1.18
	OPENBSD_4_1:1.18.0.12
	OPENBSD_4_1_BASE:1.18
	OPENBSD_4_0:1.18.0.10
	OPENBSD_4_0_BASE:1.18
	OPENBSD_3_9:1.18.0.8
	OPENBSD_3_9_BASE:1.18
	OPENBSD_3_8:1.18.0.6
	OPENBSD_3_8_BASE:1.18
	OPENBSD_3_7:1.18.0.4
	OPENBSD_3_7_BASE:1.18
	OPENBSD_3_6:1.18.0.2
	OPENBSD_3_6_BASE:1.18
	OPENBSD_3_5:1.17.0.4
	OPENBSD_3_5_BASE:1.17
	OPENBSD_3_4:1.17.0.2
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.12.0.4
	OPENBSD_3_3_BASE:1.12
	OPENBSD_3_2:1.12.0.2
	OPENBSD_3_2_BASE:1.12
	OPENBSD_3_1:1.11.0.6
	OPENBSD_3_1_BASE:1.11
	OPENBSD_3_0:1.11.0.4
	OPENBSD_3_0_BASE:1.11
	OPENBSD_2_9:1.11.0.2
	OPENBSD_2_9_BASE:1.11
	OPENBSD_2_8:1.10.0.8
	OPENBSD_2_8_BASE:1.10
	OPENBSD_2_7:1.10.0.6
	OPENBSD_2_7_BASE:1.10
	OPENBSD_2_6:1.10.0.4
	OPENBSD_2_6_BASE:1.10
	OPENBSD_2_5:1.10.0.2
	OPENBSD_2_5_BASE:1.10
	OPENBSD_2_4:1.9.0.2
	OPENBSD_2_4_BASE:1.9
	OPENBSD_2_3:1.7.0.2
	OPENBSD_2_3_BASE:1.7
	OPENBSD_2_2:1.6.0.2
	OPENBSD_2_2_BASE:1.6
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.25
date	2017.01.21.08.22.57;	author krw;	state Exp;
branches;
next	1.24;
commitid	slqvWeiHNc6j5Mv6;

1.24
date	2016.12.25.20.30.41;	author krw;	state Exp;
branches;
next	1.23;
commitid	ALHQLQcKN7UxSqzC;

1.23
date	2016.03.08.10.48.39;	author mestre;	state Exp;
branches;
next	1.22;
commitid	MVW94yecJ4ENUFco;

1.22
date	2016.01.07.16.00.31;	author tb;	state Exp;
branches;
next	1.21;
commitid	IwzFE3fG5RnKTWNh;

1.21
date	2015.11.30.08.14.48;	author tb;	state Exp;
branches;
next	1.20;
commitid	1yJj8gGEgZHyn6nu;

1.20
date	2014.11.16.04.49.48;	author guenther;	state Exp;
branches;
next	1.19;
commitid	8XNajyb9IqHkZEKg;

1.19
date	2009.10.27.23.59.23;	author deraadt;	state Exp;
branches;
next	1.18;

1.18
date	2004.07.09.15.59.26;	author deraadt;	state Exp;
branches;
next	1.17;

1.17
date	2003.07.10.00.03.01;	author david;	state Exp;
branches;
next	1.16;

1.16
date	2003.06.03.03.01.37;	author millert;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.08.01.46.45;	author millert;	state Exp;
branches;
next	1.14;

1.14
date	2003.04.07.18.19.37;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	2003.04.06.18.50.33;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2002.05.31.03.39.55;	author pjanzen;	state Exp;
branches;
next	1.11;

1.11
date	2001.02.04.06.07.20;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	98.11.29.19.45.10;	author pjanzen;	state Exp;
branches;
next	1.9;

1.9
date	98.09.02.06.36.07;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	98.08.31.02.29.42;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	98.03.19.11.41.49;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	97.07.23.20.04.41;	author kstailey;	state Exp;
branches;
next	1.5;

1.5
date	96.12.19.22.20.47;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	96.05.28.12.39.19;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.26.01.04.44;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.02.17.23.54.37;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.36;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.36;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Nuke whitespace foolish enough to expose itself during the great
"warning:" rectification.
@
text
@/*	$OpenBSD: main.c,v 1.24 2016/12/25 20:30:41 krw Exp $	*/
/*	$NetBSD: main.c,v 1.5 1996/05/21 21:53:09 mrg Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * The game adventure was originally written in Fortran by Will Crowther
 * and Don Woods.  It was later translated to C and enhanced by Jim
 * Gillogly.  This code is derived from software contributed to Berkeley
 * by Jim Gillogly at The Rand Corporation.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*	Re-coding of advent in C: main program				*/

#include <err.h>
#include <stdio.h>
#include <time.h>
#include <unistd.h>

#include "extern.h"
#include "hdr.h"

int
main(int argc, char *argv[])
{
	int     i;
	int     rval, ll;
	struct text *kk;

	if (pledge("stdio rpath wpath cpath", NULL) == -1)
		err(1, "pledge");

	init();		/* Initialize everything */
	signal(SIGINT, trapdel);

	if (argc > 1) {	/* Restore file specified */
		/* Restart is label 8305 (Fortran) */
		i = restore(argv[1]);	/* See what we've got */
		switch (i) {
		case 0:			/* The restore worked fine */
			yea = Start();
			k = null;
			unlink(argv[1]);/* Don't re-use the save */
			goto l8;	/* Get where we're going */
		case 1:		/* Couldn't open it */
			errx(1, "can't open file");	/* So give up */
		case 2:		/* Oops -- file was altered */
			rspeak(202);	/* You dissolve */
			return 2;	/* File could be non-adventure */
		}			/* So don't unlink it. */
	}

	startup();		/* prepare for a user		*/

	for (;;) {		/* main command loop (label 2)	*/
		if (newloc < 9 && newloc != 0 && closng) {
			rspeak(130);	/* if closing leave only by	*/
			newloc = loc;	/*	main office		*/
			if (!panic)
				clock2 = 15;
			panic = TRUE;
		}

		rval = fdwarf();		/* dwarf stuff			*/
		if (rval == 99)
			die(99);

l2000:		if (loc == 0)
			die(99);	/* label 2000			*/
		kk = &stext[loc];
		if ((abb[loc] % abbnum) ==0 || kk->seekadr == 0)
			kk = &ltext[loc];
		if (!forced(loc) && dark()) {
			if (wzdark && pct(35)) {
				die(90);
				goto l2000;
			}
			kk = &rtext[16];
		}
		if (toting(bear))
			rspeak(141);	/* 2001			*/
		speak(kk);
		k = 1;
		if (forced(loc))
			goto l8;
		if (loc == 33 && pct(25) && !closng)
			rspeak(8);
		if (!dark()) {
			abb[loc]++;
			for (i = atloc[loc]; i != 0; i = linkx[i]) {	/*2004*/
				obj = i;
				if (obj > 100)
					obj -= 100;
				if (obj == steps && toting(nugget))
					continue;
				if (prop[obj] < 0) {
					if (closed)
						continue;
					prop[obj] = 0;
					if (obj == rug || obj == chain)
						prop[obj] = 1;
					tally--;
					if (tally == tally2 && tally != 0)
						if (limit > 35)
							limit = 35;
				}
				ll = prop[obj];	/* 2006	*/
				if (obj == steps && loc == fixed[steps])
					ll = 1;
				pspeak(obj, ll);
			}		/* 2008 */
			goto l2012;
l2009:		k = 54;			/* 2009			*/
l2010:		spk = k;
l2011:		rspeak(spk);
		}
l2012:		verb = 0;		/* 2012			*/
		obj = 0;
l2600:		checkhints();		/* to 2600-2602		*/
		if (closed) {
			if (prop[oyster] < 0 && toting(oyster))
				pspeak(oyster, 1);
			for (i = 1; i < 100; i++)
				if (toting(i) && prop[i] < 0)	/* 2604 */
					prop[i] = -1 - prop[i];
		}
		wzdark = dark();	/* 2605			*/
		if (knfloc > 0 && knfloc != loc)
			knfloc = 1;
		getin(wd1, sizeof(wd1), wd2, sizeof(wd2));
		if (delhit) {		/* user typed a DEL	*/
			delhit = 0;	/* reset counter	*/
			/* pretend he's quitting */
			strlcpy(wd1, "quit", sizeof(wd1));
			wd2[0] = 0;
		}
l2608:		if ((foobar = -foobar) > 0)
			foobar = 0;	/* 2608		*/
		/* should check here for "magic mode"		*/
		turns++;
		if (demo && turns >= SHORT)
			done(1);	/* to 13000	*/

		if (verb == say && wd2[0] != 0)
			verb = 0;
		if (verb == say)
			goto l4090;
		if (tally == 0 && loc >= 15 && loc != 33)
			clock1--;
		if (clock1 == 0) {
			closing();			/* to 10000	*/
			goto l19999;
		}
		if (clock1 < 0)
			clock2--;
		if (clock2 == 0) {
			caveclose();		/* to 11000		*/
			continue;		/* back to 2		*/
		}
		if (prop[lamp] == 1)
			limit--;
		if (limit <= 30 && here(batter) && prop[batter] == 0
			&& here(lamp)) {
			rspeak(188);		/* 12000		*/
			prop[batter] = 1;
			if (toting(batter))
				drop(batter, loc);
			limit += 2500;
			lmwarn = FALSE;
			goto l19999;
		}
		if (limit == 0) {
			limit = -1;		/* 12400		*/
			prop[lamp] = 0;
			rspeak(184);
			goto l19999;
		}
		if (limit < 0 && loc <= 8) {
			rspeak(185);		/* 12600		*/
			gaveup = TRUE;
			done(2);		/* to 20000		*/
		}
		if (limit <= 30) {
			if (lmwarn || !here(lamp))
				goto l19999;	/*12200*/
			lmwarn = TRUE;
			spk = 187;
			if (place[batter] == 0)
				spk = 183;
			if (prop[batter] == 1)
				spk = 189;
			rspeak(spk);
		}
l19999:		k = 43;
		if (liqloc(loc) == water)
			k = 70;
		if (weq(wd1, "enter") &&
		    (weq(wd2, "strea") || weq(wd2, "water")))
			goto l2010;
		if (weq(wd1, "enter") && *wd2 != 0)
			goto l2800;
		if ((!weq(wd1, "water") && !weq(wd1, "oil"))
		    || (!weq(wd2, "plant") && !weq(wd2, "door")))
			goto l2610;
		if (at(vocab(wd2, 1, 0)))
			strlcpy(wd2, "pour", sizeof(wd2));

l2610:		if (weq(wd1, "west"))
			if (++iwest == 10)
				rspeak(17);
l2630:		i = vocab(wd1, -1, 0);
		if (i== -1) {
			spk = 60;			/* 3000		*/
			if (pct(20))
				spk = 61;
			if (pct(20))
				spk = 13;
			rspeak(spk);
			goto l2600;
		}
		k = i % 1000;
		kq = i / 1000 + 1;
		switch (kq) {
		case 1: goto l8;
		case 2: goto l5000;
		case 3: goto l4000;
		case 4: goto l2010;
		default:
			bug(22);
		}

l8:
		switch (march()) {
		case 2: continue;		/* i.e. goto l2		*/
		case 99:
			die(99);
			goto l2000;
		default: bug(110);
		}

l2800:		strlcpy(wd1, wd2, sizeof(wd1));
		wd2[0] = 0;
		goto l2610;

l4000:		verb = k;
		spk = actspk[verb];
		if (wd2[0] != 0 && verb != say)
			goto l2800;
		if (verb == say)
			obj = wd2[0];
		if (obj != 0)
			goto l4090;

		switch (verb) {
		case 1:			/* take = 8010		*/
			if (atloc[loc] == 0 || linkx[atloc[loc]] != 0)
				goto l8000;
			for (i = 1; i <= 5; i++)
				if (dloc[i] == loc && dflag >= 2)
					goto l8000;
			obj = atloc[loc];
			goto l9010;
		case 2: case 3: case 9:		/* 8000 : drop, say, wave */
		case 10: case 16: case 17:	/* calm, rub, toss	*/
		case 19: case 21: case 28:	/* find, feed, break	*/
		case 29:			/* wake			*/
l8000:			printf("%s what?\n", wd1);
			obj = 0;
			goto l2600;
		case 4: case 6:		/* 8040 open, lock	*/
			spk = 28;
			if (here(clam))
				obj = clam;
			if (here(oyster))
				obj = oyster;
			if (at(door))
				obj = door;
			if (at(grate))
				obj = grate;
			if (obj != 0 && here(chain))
				goto l8000;
			if (here(chain))
				obj = chain;
			if (obj == 0)
				goto l2011;
			goto l9040;
		case 5: goto l2009;		/* nothing		*/
		case 7: goto l9070;		/* on			*/
		case 8: goto l9080;		/* off			*/
		case 11: goto l8000;	/* walk			*/
		case 12: goto l9120;	/* kill			*/
		case 13: goto l9130;	/* pour			*/
		case 14:			/* eat: 8140		*/
			if (!here(food))
				goto l8000;
l8142:			dstroy(food);
			spk = 72;
			goto l2011;
		case 15: goto l9150;	/* drink		*/
		case 18:			/* quit: 8180		*/
			gaveup = yes(22, 54, 54);
			if (gaveup)
				done(2);	/* 8185			*/
			goto l2012;
		case 20:			/* invent = 8200	*/
			spk = 98;
			for (i = 1; i <= 100; i++) {
				if (i != bear && toting(i)) {
					if (spk == 98)
						rspeak(99);
					blklin = FALSE;
					pspeak(i, -1);
					blklin = TRUE;
					spk = 0;
				}
			}
			if (toting(bear))
				spk = 141;
			goto l2011;
		case 22: goto l9220;	/* fill			*/
		case 23: goto l9230;	/* blast		*/
		case 24:			/* score: 8240		*/
			scorng = TRUE;
			printf("If you were to quit now, you would score");
			printf(" %d out of a possible ", score());
			printf("%d.", mxscor);
			scorng = FALSE;
			gaveup = yes(143, 54, 54);
			if (gaveup)
				done(2);
			goto l2012;
		case 25:			/* foo: 8250		*/
			k = vocab(wd1, 3, 0);
			spk = 42;
			if (foobar == 1 - k)
				goto l8252;
			if (foobar != 0)
				spk = 151;
			goto l2011;
l8252:			foobar = k;
			if (k != 4)
				goto l2009;
			foobar = 0;
			if (place[eggs] == plac[eggs]
				|| (toting(eggs) && loc == plac[eggs])) goto l2011;
			if (place[eggs] == 0 && place[troll] == 0 && prop[troll] == 0)
				prop[troll] = 1;
			k = 2;
			if (here(eggs))
				k = 1;
			if (loc == plac[eggs])
				k = 0;
			move(eggs, plac[eggs]);
			pspeak(eggs, k);
			goto l2012;
		case 26:			/* brief = 8260		*/
			spk = 156;
			abbnum = 10000;
			detail = 3;
			goto l2011;
		case 27:			/* read = 8270		*/
			if (here(magzin))
				obj = magzin;
			if (here(tablet))
				obj = obj * 100 + tablet;
			if (here(messag))
				obj = obj * 100 + messag;
			if (closed && toting(oyster))
				obj = oyster;
			if (obj > 100 || obj == 0 || dark())
				goto l8000;
			goto l9270;
		case 30:			/* suspend = 8300	*/
			spk = 201;
			if (demo)
				goto l2011;
			printf("I can suspend your adventure for you so");
			printf(" you can resume later, but\n");
			printf("you will have to wait at least");
			printf(" %d minutes before continuing.", latncy);
			if (!yes(200, 54, 54))
				goto l2012;
			time(&savet);
			ciao();		/* Do we quit? */
			continue;		/* Maybe not */
		case 31:			/* hours = 8310		*/
			printf("Colossal cave is closed 9am-5pm Mon ");
			printf("through Fri except holidays.\n");
			goto l2012;
		default:
			bug(23);
		}

l4090:
		switch (verb) {
		case 1:			/* take = 9010		*/
l9010:			switch (trtake()) {
			case 2011: goto l2011;
			case 9220: goto l9220;
			case 2009: goto l2009;
			case 2012: goto l2012;
			default: bug(102);
			}
l9020:		case 2:			/* drop = 9020		*/
			switch (trdrop()) {
			case 2011: goto l2011;
			case 19000: done(3);
			case 2012: goto l2012;
			default: bug(105);
			}
		case 3:
			switch (trsay()) {
			case 2012: goto l2012;
			case 2630: goto l2630;
			default: bug(107);
			}
l9040:		case 4: case 6:		/* open, close		*/
			switch (tropen()) {
			case 2011: goto l2011;
			case 2010: goto l2010;
			default: bug(106);
			}
		case 5: goto l2009;	/* nothing		*/
		case 7:			/* on	9070		*/
l9070:			if (!here(lamp))
				goto l2011;
			spk = 184;
			if (limit < 0)
				goto l2011;
			prop[lamp] = 1;
			rspeak(39);
			if (wzdark)
				goto l2000;
			goto l2012;

		case 8:			/* off			*/
l9080:			if (!here(lamp))
				goto l2011;
			prop[lamp] = 0;
			rspeak(40);
			if (dark())
				rspeak(16);
			goto l2012;

		case 9:			/* wave			*/
			if ((!toting(obj)) && (obj != rod || !toting(rod2)))
				spk = 29;
			if (obj != rod || !at(fissur)||!toting(obj) || closng)
				goto l2011;
			prop[fissur] = 1-prop[fissur];
			pspeak(fissur, 2-prop[fissur]);
			goto l2012;
		case 10: case 11: case 18:	/* calm, walk, quit	*/
		case 24: case 25: case 26:	/* score, foo, brief	*/
		case 30: case 31:		/* suspend, hours	*/
			goto l2011;
l9120:		case 12:			/* kill			*/
			switch (trkill()) {
			case 8000: goto l8000;
			case 8: goto l8;
			case 2011: goto l2011;
			case 2608: goto l2608;
			case 19000: done(3);
			default: bug(112);
			}
l9130:		case 13:			/* pour			*/
			if (obj == bottle || obj == 0)
				obj = liq();
			if (obj == 0)
				goto l8000;
			if (!toting(obj))
				goto l2011;
			spk = 78;
			if (obj != oil && obj != water)
				goto l2011;
			prop[bottle] = 1;
			place[obj] = 0;
			spk = 77;
			if (!(at(plant) || at(door)))
				goto l2011;
			if (at(door)) {
				prop[door] = 0;	/* 9132			*/
				if (obj == oil)
					prop[door] = 1;
				spk = 113 + prop[door];
				goto l2011;
			}
			spk = 112;
			if (obj != water)
				goto l2011;
			pspeak(plant, prop[plant] + 1);
			prop[plant] = (prop[plant] + 2) % 6;
			prop[plant2] = prop[plant] / 2;
			k = null;
			goto l8;
		case 14:			/* 9140 - eat		*/
			if (obj == food)
				goto l8142;
			if (obj == bird || obj == snake || obj == clam || obj == oyster
			    || obj == dwarf || obj == dragon || obj == troll
			    || obj == bear) spk = 71;
			goto l2011;
l9150:		case 15:			/* 9150 - drink		*/
			if (obj == 0 && liqloc(loc) != water && (liq() != water
				|| !here(bottle)))
				goto l8000;
			if (obj != 0 && obj != water)
				spk = 110;
			if (spk == 110 || liq() != water || !here(bottle))
				goto l2011;
			prop[bottle] = 1;
			place[water] = 0;
			spk = 74;
			goto l2011;
		case 16:			/* 9160: rub		*/
			if (obj != lamp)
				spk = 76;
			goto l2011;
		case 17:			/* 9170: throw		*/
			switch (trtoss()) {
			case 2011: goto l2011;
			case 9020: goto l9020;
			case 9120: goto l9120;
			case 8: goto l8;
			case 9210: goto l9210;
			default: bug(113);
			}
		case 19: case 20:		/* 9190: find, invent	*/
			if (at(obj) || (liq() == obj && at(bottle))
				|| k == liqloc(loc))
				spk = 94;
			for (i = 1; i <= 5; i++)
				if (dloc[i] == loc && dflag >= 2 && obj == dwarf)
					spk = 94;
			if (closed)
				spk = 138;
			if (toting(obj))
				spk = 24;
			goto l2011;
l9210:		case 21:			/* feed			*/
			switch (trfeed()) {
			case 2011: goto l2011;
			default: bug(114);
			}
l9220:		case 22:			/* fill			*/
			switch (trfill()) {
			case 2011: goto l2011;
			case 8000: goto l8000;
			case 9020: goto l9020;
			default: bug(115);
			}
l9230:		case 23:			/* blast		*/
			if (prop[rod2] < 0 || !closed)
				goto l2011;
			bonus = 133;
			if (loc == 115)
				bonus = 134;
			if (here(rod2))
				bonus = 135;
			rspeak(bonus);
			done(2);
l9270:		case 27:			/* read			*/
			if (dark())
				goto l5190;
			if (obj == magzin)
				spk = 190;
			if (obj == tablet)
				spk = 196;
			if (obj == messag)
				spk = 191;
			if (obj == oyster && hinted[2] && toting(oyster))
				spk = 194;
			if (obj != oyster || hinted[2] || !toting(oyster)
				|| !closed) goto l2011;
			hinted[2] = yes(192, 193, 54);
			goto l2012;
		case 28:			/* break		*/
			if (obj == mirror)
				spk = 148;
			if (obj == vase && prop[vase] == 0) {
				spk = 198;
				if (toting(vase))
					drop(vase, loc);
				prop[vase] = 2;
				fixed[vase] = -1;
				goto l2011;
			}
			if (obj != mirror||!closed)
				goto l2011;
			rspeak(197);
			done(3);
		case 29:			/* wake			*/
			if (obj != dwarf||!closed)
				goto l2011;
			rspeak(199);
			done(3);

		default: bug(24);
		}

l5000:
		obj = k;
		if (fixed[k] != loc && !here(k))
			goto l5100;
l5010:		if (wd2[0] != 0)
			goto l2800;
		if (verb != 0)
			goto l4090;
		printf("What do you want to do with the %s?\n", wd1);
		goto l2600;
l5100:		if (k != grate)
			goto l5110;
		if (loc == 1 || loc == 4 || loc == 7)
			k = dprssn;
		if (loc > 9 && loc < 15)
			k = entrnc;
		if (k != grate)
			goto l8;
l5110:		if (k != dwarf)
			goto l5120;
		for (i = 1; i <= 5; i++)
			if (dloc[i] == loc && dflag >= 2)
				goto l5010;
l5120:		if ((liq() == k && here(bottle)) || k == liqloc(loc))
			goto l5010;
		if (obj != plant || !at(plant2) || prop[plant2] == 0)
			goto l5130;
		obj = plant2;
		goto l5010;
l5130:		if (obj != knife || knfloc != loc)
			goto l5140;
		knfloc = -1;
		spk = 116;
		goto l2011;
l5140:		if (obj != rod || !here(rod2))
			goto l5190;
		obj = rod2;
		goto l5010;
l5190:		if ((verb == find || verb == invent) && wd2[0] == 0)
			goto l5010;
		printf("I see no %s here\n", wd1);
		goto l2012;
	}
}
@


1.24
log
@gcc says "if you define labels and don't use them, I will whine."

ok tom@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.23 2016/03/08 10:48:39 mestre Exp $	*/
d57 1
a57 1
	
@


1.23
log
@Headers cleanup with and OK tb@@

This was prompted by an initial patch sent by Edgar Pettijohn
<edgar ! pettijohn-web.com> but the actual commit is different
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.22 2016/01/07 16:00:31 tb Exp $	*/
d105 1
a105 1
l2001:		if (toting(bear))
d278 1
a278 1
l4080:
d436 1
a436 1
l9030:		case 3:
d602 1
a602 1
l9280:		case 28:			/* break		*/
d617 1
a617 1
l9290:		case 29:			/* wake			*/
@


1.22
log
@Some basic code maintenance in games/

- in main() replace exit with return
- drop some /* NOTREACHED */ lint comments along the way.
- make more use of standard CFLAGS, esp. -Wimplicit-function-declaration
- add and sort some headers when needed
- add straightforward pledges to some programs used at compile time

discussed with and ok mestre@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.21 2015/11/30 08:14:48 tb Exp $	*/
a40 1
#include <signal.h>
d42 1
a42 1
#include <stdlib.h>
d44 2
a46 1
#include "extern.h"
@


1.21
log
@Straightforward pledge "stdio rpath wpath cpath" for adventure.
It is possible to make it finer grained, but try to keep it
simple for now.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.20 2014/11/16 04:49:48 guenther Exp $	*/
d74 1
a74 1
			exit(2);	/* File could be non-adventure */
@


1.20
log
@Eliminate pointless use of <sys/param.h>, <sys/file.h>, <sys/sockio.h>,
    and <sys/ttydefaults.h>
Replace MAXPATHLEN with PATH_MAX and MAXLOGNAME with LOGIN_NAME_MAX
Pull in <limits.h> where needed
Prefer sizeof(var) over MAXFOO or FOO_MAX

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.19 2009/10/27 23:59:23 deraadt Exp $	*/
d55 3
@


1.19
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.18 2004/07/09 15:59:26 deraadt Exp $	*/
a39 1
#include <sys/file.h>
@


1.18
log
@ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.17 2003/07/10 00:03:01 david Exp $	*/
a36 14

#ifndef lint
static char copyright[] =
"@@(#) Copyright (c) 1991, 1993\n\
	The Regents of the University of California.  All rights reserved.\n";
#endif /* not lint */

#ifndef lint
#if 0
static char sccsid[] = "@@(#)main.c	8.1 (Berkeley) 6/2/93";
#else
static char rcsid[] = "$OpenBSD: main.c,v 1.17 2003/07/10 00:03:01 david Exp $";
#endif
#endif /* not lint */
@


1.17
log
@add missing includes
ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.16 2003/06/03 03:01:37 millert Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: main.c,v 1.16 2003/06/03 03:01:37 millert Exp $";
d64 1
a64 3
main(argc, argv)
	int     argc;
	char  **argv;
@


1.16
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.15 2003/04/08 01:46:45 millert Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: main.c,v 1.15 2003/04/08 01:46:45 millert Exp $";
d58 1
@


1.15
log
@Change remaining strcpy -> strlcpy; noticed by Theo
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.14 2003/04/07 18:19:37 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d48 1
a48 1
static char rcsid[] = "$OpenBSD: main.c,v 1.14 2003/04/07 18:19:37 millert Exp $";
@


1.14
log
@Change wd1 and wd2 from pointers to arrays.  This removes the need
for getin() to have static buffers and allows us to do "sizeof wd1".

Also fix saved game path.  It was removing the first 2 chars of
the filename due to a bug.

tdeval@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.13 2003/04/06 18:50:33 deraadt Exp $	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD: main.c,v 1.13 2003/04/06 18:50:33 deraadt Exp $";
d248 1
a248 1
			strcpy(wd2, "pour");
@


1.13
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.12 2002/05/31 03:39:55 pjanzen Exp $	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD: main.c,v 1.12 2002/05/31 03:39:55 pjanzen Exp $";
d172 1
a172 1
		getin(&wd1, &wd2);
d176 2
a177 2
			strcpy(wd1, "quit");
			*wd2 = 0;
d186 1
a186 1
		if (verb == say && *wd2 != 0)
d283 2
a284 2
l2800:		strcpy(wd1, wd2);
		*wd2 = 0;
d289 1
a289 1
		if (*wd2 != 0 && verb != say)
d292 1
a292 1
			obj= *wd2;
d647 1
a647 1
l5010:		if (*wd2 != 0)
d681 1
a681 1
l5190:		if ((verb == find || verb == invent) && *wd2 == 0)
@


1.12
log
@No dm -> no need to revoke setegid.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.11 2001/02/04 06:07:20 pjanzen Exp $	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD: main.c,v 1.11 2001/02/04 06:07:20 pjanzen Exp $";
d175 2
a176 1
			copystr("quit", wd1);	/* pretend he's quitting */
d248 1
a248 1
			copystr("pour", wd2);
d283 1
a283 1
l2800:		copystr(wd2, wd1);
@


1.11
log
@Remove -traditional-cpp and do some -Wall cleanups; from Chris K. Young
<cky@@pobox.com> in PR 1652.
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.10 1998/11/29 19:45:10 pjanzen Exp $	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD: main.c,v 1.10 1998/11/29 19:45:10 pjanzen Exp $";
a73 4

	/* revoke privs */
	setegid(getgid());
	setgid(getgid());
@


1.10
log
@Minor changes from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.9 1998/09/02 06:36:07 pjanzen Exp $	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD: main.c,v 1.9 1998/09/02 06:36:07 pjanzen Exp $";
d59 1
@


1.9
log
@More changes from jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: main.c,v 1.8 1998/08/31 02:29:42 pjanzen Exp $	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD: main.c,v 1.8 1998/08/31 02:29:42 pjanzen Exp $";
d91 1
a91 1
			exit(1);	/* So give up */
d273 1
a273 2
			printf("Error 22\n");
			exit(22);
@


1.8
log
@merge in NetBSD, including recent PR's of jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD$";
d281 2
a282 4
			switch (die(99)) {
			case 2000: goto l2000;
			default: bug(111);
			}
@


1.7
log
@Minor tweaks, mainly setgid-related
@
text
@d1 1
d52 1
a52 1
static char rcsid[] = "$NetBSD: main.c,v 1.5 1996/05/21 21:53:09 mrg Exp $";
d61 1
d63 1
d65 4
a68 3
main(argc,argv)
int argc;
char **argv;
d70 2
a71 2
	register int i;
	int rval,ll;
a72 1
	extern trapdel();
d79 1
a79 1
	signal(SIGINT,trapdel);
d81 7
a87 8
	if (argc > 1)   /* Restore file specified */
	{		/* Restart is label 8305 (Fortran) */
		i = restore(argv[1]);       /* See what we've got */
		switch(i)
		{
		    case 0:     /* The restore worked fine */
			yea=Start(0);
			k=null;
d90 5
a94 5
		    case 1:		/* Couldn't open it */
			exit(0);	/* So give up */
		    case 2:		/* Oops -- file was altered */
			rspeak(202);    /* You dissolve */
			exit(0);	/* File could be non-adventure */
d100 7
a106 6
	for (;;)			/* main command loop (label 2)	*/
	{       if (newloc<9 && newloc!=0 && closng)
		{       rspeak(130);    /* if closing leave only by     */
			newloc=loc;	/*	main office		*/
			if (!panic) clock2=15;
			panic=TRUE;
d109 3
a111 2
		rval=fdwarf();		/* dwarf stuff			*/
		if (rval==99) die(99);
d113 2
a114 1
	l2000:	if (loc==0) die(99);	/* label 2000			*/
d116 1
a116 1
		if ((abb[loc]%abbnum)==0 || kk->seekadr==0)
d118 3
a120 3
		if (!forced(loc) && dark(0))
		{       if (wzdark && pct(35))
			{       die(90);
d125 2
a126 1
	l2001:	if (toting(bear)) rspeak(141);	/* 2001			*/
d128 1
a128 1
		k=1;
d131 16
a146 12
		if (loc==33 && pct(25)&&!closng) rspeak(8);
		if (!dark(0))
		{       abb[loc]++;
			for (i=atloc[loc]; i!=0; i=linkx[i])     /*2004  */
			{       obj=i;
				if (obj>100) obj -= 100;
				if (obj==steps && toting(nugget)) continue;
				if (prop[obj]<0)
				{       if (closed) continue;
					prop[obj]=0;
					if (obj==rug||obj==chain)
						prop[obj]=1;
d148 3
a150 2
					if (tally==tally2 && tally != 0)
						if (limit>35) limit=35;
d152 2
a153 2
				ll =  prop[obj];   /* 2006	   */
				if (obj==steps && loc==fixed[steps])
d156 1
a156 1
			}					/* 2008 */
d158 26
a183 24
	l2009:		k=54;			/* 2009			*/
	l2010:		spk=k;
	l2011:		rspeak(spk);
		}
	l2012:	verb=0;				/* 2012			*/
		obj=0;
	l2600:	checkhints();			/* to 2600-2602		*/
		if (closed)
		{       if (prop[oyster]<0 && toting(oyster))
				pspeak(oyster,1);
			for (i=1; i<100; i++)
				if (toting(i)&&prop[i]<0)       /*2604  */
					prop[i] = -1-prop[i];
		}
		wzdark=dark(0);			/* 2605			*/
		if (knfloc>0 && knfloc!=loc) knfloc=1;
		getin(&wd1,&wd2);
		if (delhit)			/* user typed a DEL	*/
		{	delhit=0;		/* reset counter	*/
			copystr("quit",wd1);    /* pretend he's quitting*/
			*wd2=0;
		}
	l2608:	if ((foobar = -foobar)>0) foobar=0;	/* 2608		*/
		/* should check here for "magic mode"			*/
d185 2
a186 1
		if (demo && turns>=SHORT) done(1);      /* to 13000     */
d188 3
a190 2
		if (verb==say && *wd2!=0) verb=0;
		if (verb==say)
d192 4
a195 3
		if (tally==0 && loc>=15 && loc!=33) clock1--;
		if (clock1==0)
		{	closing();			/* to 10000	*/
d198 4
a201 3
		if (clock1<0) clock2--;
		if (clock2==0)
		{	caveclose();		/* to 11000		*/
d204 10
a213 8
		if (prop[lamp]==1) limit--;
		if (limit<=30 && here(batter) && prop[batter]==0
			&& here(lamp))
		{	rspeak(188);		/* 12000		*/
			prop[batter]=1;
			if (toting(batter)) drop(batter,loc);
			limit=limit+2500;
			lmwarn=FALSE;
d216 3
a218 3
		if (limit==0)
		{	limit = -1;		/* 12400		*/
			prop[lamp]=0;
d222 3
a224 3
		if (limit<0&&loc<=8)
		{	rspeak(185);		/* 12600		*/
			gaveup=TRUE;
d227 9
a235 6
		if (limit<=30)
		{       if (lmwarn|| !here(lamp)) goto l19999;  /*12200*/
			lmwarn=TRUE;
			spk=187;
			if (place[batter]==0) spk=183;
			if (prop[batter]==1) spk=189;
d238 5
a242 4
	l19999: k=43;
		if (liqloc(loc)==water) k=70;
		if (weq(wd1,"enter") &&
		    (weq(wd2,"strea")||weq(wd2,"water")))
d244 4
a247 3
		if (weq(wd1,"enter") && *wd2!=0) goto l2800;
		if ((!weq(wd1,"water")&&!weq(wd1,"oil"))
		    || (!weq(wd2,"plant")&&!weq(wd2,"door")))
d249 2
a250 1
		if (at(vocab(wd2,1))) copystr("pour",wd2);
d252 10
a261 7
	l2610:  if (weq(wd1,"west"))
			if (++iwest==10) rspeak(17);
	l2630:  i=vocab(wd1,-1);
		if (i== -1)
		{	spk=60;			/* 3000		*/
			if (pct(20)) spk=61;
			if (pct(20)) spk=13;
d265 8
a272 8
		k=i%1000;
		kq=i/1000+1;
		switch(kq)
		{   case 1: goto l8;
		    case 2: goto l5000;
		    case 3: goto l4000;
		    case 4: goto l2010;
		    default:
d274 1
a274 1
			exit(0);
d277 7
a283 7
	l8:
		switch(march())
		{   case 2: continue;		/* i.e. goto l2		*/
		    case 99:
			switch(die(99))
			{   case 2000: goto l2000;
			    default: bug(111);
d285 1
a285 1
		    default: bug(110);
d288 2
a289 2
	l2800:  copystr(wd2,wd1);
		*wd2=0;
d292 17
a308 12
	l4000:  verb=k;
		spk=actspk[verb];
		if (*wd2!=0 && verb!=say) goto l2800;
		if (verb==say) obj= *wd2;
		if (obj!=0) goto l4090;
	l4080:
		switch(verb)
		{   case 1:			/* take = 8010		*/
			if (atloc[loc]==0||linkx[atloc[loc]]!=0) goto l8000;
			for (i=1; i<=5; i++)
				if (dloc[i]==loc&&dflag>=2) goto l8000;
			obj=atloc[loc];
d310 6
a315 6
		    case 2: case 3: case 9:     /* 8000 : drop,say,wave */
		    case 10: case 16: case 17:	/* calm,rub,toss	*/
		    case 19: case 21: case 28:  /* find,feed,break      */
		    case 29:			/* wake			*/
		l8000:  printf("%s what?\n",wd1);
			obj=0;
d317 16
a332 9
		    case 4: case 6:		/* 8040 open,lock	*/
			spk=28;
			if (here(clam)) obj=clam;
			if (here(oyster)) obj=oyster;
			if (at(door)) obj=door;
			if (at(grate)) obj=grate;
			if (obj!=0 && here(chain)) goto l8000;
			if (here(chain)) obj=chain;
			if (obj==0) goto l2011;
d334 11
a344 10
		    case 5: goto l2009;		/* nothing		*/
		    case 7: goto l9070;		/* on			*/
		    case 8: goto l9080;		/* off			*/
		    case 11: goto l8000;	/* walk			*/
		    case 12: goto l9120;	/* kill			*/
		    case 13: goto l9130;	/* pour			*/
		    case 14:			/* eat: 8140		*/
			if (!here(food)) goto l8000;
		l8142:  dstroy(food);
			spk=72;
d346 5
a350 4
		    case 15: goto l9150;	/* drink		*/
		    case 18:			/* quit: 8180		*/
			gaveup=yes(22,54,54);
			if (gaveup) done(2);	/* 8185			*/
d352 10
a361 9
		    case 20:			/* invent=8200		*/
			spk=98;
			for (i=1; i<=100; i++)
			{       if (i!=bear && toting(i))
				{       if (spk==98) rspeak(99);
					blklin=FALSE;
					pspeak(i,-1);
					blklin=TRUE;
					spk=0;
d364 2
a365 1
			if (toting(bear)) spk=141;
d367 4
a370 4
		    case 22: goto l9220;	/* fill			*/
		    case 23: goto l9230;	/* blast		*/
		    case 24:			/* score: 8240		*/
			scorng=TRUE;
d372 6
a377 5
			printf(" %d out of a possible ",score());
			printf("%d.",mxscor);
			scorng=FALSE;
			gaveup=yes(143,54,54);
			if (gaveup) done(2);
d379 7
a385 5
		    case 25:			/* foo: 8250		*/
			k=vocab(wd1,3);
			spk=42;
			if (foobar==1-k) goto l8252;
			if (foobar!=0) spk=151;
d387 15
a401 12
		l8252:  foobar=k;
			if (k!=4) goto l2009;
			foobar=0;
			if (place[eggs]==plac[eggs]
				||(toting(eggs)&&loc==plac[eggs])) goto l2011;
			if (place[eggs]==0&&place[troll]==0&&prop[troll]==0)
				prop[troll]=1;
			k=2;
			if (here(eggs)) k=1;
			if (loc==plac[eggs]) k=0;
			move(eggs,plac[eggs]);
			pspeak(eggs,k);
d403 4
a406 4
		    case 26:			/* brief=8260		*/
			spk=156;
			abbnum=10000;
			detail=3;
d408 11
a418 6
		    case 27:			/* read=8270		*/
			if (here(magzin)) obj=magzin;
			if (here(tablet)) obj=obj*100+tablet;
			if (here(messag)) obj=obj*100+messag;
			if (closed&&toting(oyster)) obj=oyster;
			if (obj>100||obj==0||dark(0)) goto l8000;
d420 4
a423 3
		    case 30:			/* suspend=8300		*/
			spk=201;
			if (demo) goto l2011;
d427 5
a431 4
			printf(" %d minutes before continuing.",latncy);
			if (!yes(200,54,54)) goto l2012;
			datime(&saved,&savet);
			ciao(argv[0]);		/* Do we quit? */
d433 1
a433 1
		    case 31:			/* hours=8310		*/
d437 2
a438 1
		    default: bug(23);
d441 37
a477 35
	l4090:
		switch(verb)
		{   case 1:			/* take = 9010		*/
	l9010:		switch(trtake())
			{   case 2011: goto l2011;
			    case 9220: goto l9220;
			    case 2009: goto l2009;
			    case 2012: goto l2012;
			    default: bug(102);
			}
	l9020:	    case 2:			/* drop = 9020		*/
			switch(trdrop())
			{   case 2011: goto l2011;
			    case 19000: done(3);
			    case 2012: goto l2012;
			    default: bug(105);
			}
	l9030:      case 3:
			switch(trsay())
			{   case 2012: goto l2012;
			    case 2630: goto l2630;
			    default: bug(107);
			}
	l9040:	    case 4:  case 6:		/* open, close		*/
			switch(tropen())
			{   case 2011: goto l2011;
			    case 2010: goto l2010;
			    default: bug(106);
			}
		    case 5: goto l2009;		/* nothing		*/
		    case 7:			/* on	9070		*/
	l9070:		if (!here(lamp))  goto l2011;
			spk=184;
			if (limit<0) goto l2011;
			prop[lamp]=1;
d479 2
a480 1
			if (wzdark) goto l2000;
d483 4
a486 3
		    case 8:			/* off			*/
	l9080:		if (!here(lamp)) goto l2011;
			prop[lamp]=0;
d488 2
a489 1
			if (dark(0)) rspeak(16);
d492 4
a495 4
		    case 9:			/* wave			*/
			if ((!toting(obj))&&(obj!=rod||!toting(rod2)))
				spk=29;
			if (obj!=rod||!at(fissur)||!toting(obj)||closng)
d497 2
a498 2
			prop[fissur]=1-prop[fissur];
			pspeak(fissur,2-prop[fissur]);
d500 33
a532 27
		    case 10: case 11: case 18:  /* calm, walk, quit     */
		    case 24: case 25: case 26:  /* score, foo, brief    */
		    case 30: case 31:		/* suspend, hours	*/
			     goto l2011;
	l9120:	    case 12:			/* kill			*/
			switch(trkill())
			{   case 8000: goto l8000;
			    case 8: goto l8;
			    case 2011: goto l2011;
			    case 2608: goto l2608;
			    case 19000: done(3);
			    default: bug(112);
			}
	l9130:	    case 13:			/* pour			*/
			if (obj==bottle||obj==0) obj=liq(0);
			if (obj==0) goto l8000;
			if (!toting(obj)) goto l2011;
			spk=78;
			if (obj!=oil&&obj!=water) goto l2011;
			prop[bottle]=1;
			place[obj]=0;
			spk=77;
			if (!(at(plant)||at(door))) goto l2011;
			if (at(door))
			{	prop[door]=0;	/* 9132			*/
				if (obj==oil) prop[door]=1;
				spk=113+prop[door];
d535 7
a541 6
			spk=112;
			if (obj!=water) goto l2011;
			pspeak(plant,prop[plant]+1);
			prop[plant]=(prop[plant]+2)% 6;
			prop[plant2]=prop[plant]/2;
			k=null;
d543 6
a548 5
		    case 14:			/* 9140 - eat		*/
			if (obj==food) goto l8142;
			if (obj==bird||obj==snake||obj==clam||obj==oyster
			    ||obj==dwarf||obj==dragon||obj==troll
			    ||obj==bear) spk=71;
d550 11
a560 9
	l9150:	    case 15:			/* 9150 - drink		*/
			if (obj==0&&liqloc(loc)!=water&&(liq(0)!=water
				||!here(bottle))) goto l8000;
			if (obj!=0&&obj!=water) spk=110;
			if (spk==110||liq(0)!=water||!here(bottle))
				goto l2011;
			prop[bottle]=1;
			place[water]=0;
			spk=74;
d562 3
a564 2
		    case 16:			/* 9160: rub		*/
			if (obj!=lamp) spk=76;
d566 20
a585 17
		    case 17:			/* 9170: throw		*/
			switch(trtoss())
			{   case 2011: goto l2011;
			    case 9020: goto l9020;
			    case 9120: goto l9120;
			    case 8: goto l8;
			    case 9210: goto l9210;
			    default: bug(113);
			}
		    case 19: case 20:		/* 9190: find, invent	*/
			if (at(obj)||(liq(0)==obj&&at(bottle))
				||k==liqloc(loc)) spk=94;
			for (i=1; i<=5; i++)
				if (dloc[i]==loc&&dflag>=2&&obj==dwarf)
					spk=94;
			if (closed) spk=138;
			if (toting(obj)) spk=24;
d587 20
a606 17
	l9210:	    case 21:			/* feed			*/
			switch(trfeed())
			{   case 2011: goto l2011;
			    default: bug(114);
			}
	l9220:	    case 22:			/* fill			*/
			switch(trfill())
			{   case 2011: goto l2011;
			    case 8000: goto l8000;
			    case 9020: goto l9020;
			    default: bug(115);
			}
	l9230:	    case 23:			/* blast		*/
			if (prop[rod2]<0||!closed) goto l2011;
			bonus=133;
			if (loc==115) bonus=134;
			if (here(rod2)) bonus=135;
d609 14
a622 9
	l9270:	    case 27:			/* read			*/
			if (dark(0)) goto l5190;
			if (obj==magzin) spk=190;
			if (obj==tablet) spk=196;
			if (obj==messag) spk=191;
			if (obj==oyster&&hinted[2]&&toting(oyster)) spk=194;
			if (obj!=oyster||hinted[2]||!toting(oyster)
				||!closed) goto l2011;
			hinted[2]=yes(192,193,54);
d624 9
a632 7
	l9280:	    case 28:			/* break		*/
			if (obj==mirror) spk=148;
			if (obj==vase&&prop[vase]==0)
			{       spk=198;
				if (toting(vase)) drop(vase,loc);
				prop[vase]=2;
				fixed[vase]= -1;
d635 2
a636 1
			if (obj!=mirror||!closed) goto l2011;
d639 3
a641 3

	l9290:	    case 29:			/* wake			*/
			if (obj!=dwarf||!closed) goto l2011;
d645 1
a645 1
		    default: bug(24);
d648 9
a656 6
	l5000:
		obj=k;
		if (fixed[k]!=loc && !here(k)) goto l5100;
	l5010:  if (*wd2!=0) goto l2800;
		if (verb!=0) goto l4090;
		printf("What do you want to do with the %s?\n",wd1);
d658 18
a675 10
	l5100:  if (k!=grate) goto l5110;
		if (loc==1||loc==4||loc==7) k=dprssn;
		if (loc>9&&loc<15) k=entrnc;
		if (k!=grate) goto l8;
	l5110:  if (k!=dwarf) goto l5120;
		for (i=1; i<=5; i++)
			if (dloc[i]==loc&&dflag>=2) goto l5010;
	l5120:  if ((liq(0)==k&&here(bottle))||k==liqloc(loc)) goto l5010;
		if (obj!=plant||!at(plant2)||prop[plant2]==0) goto l5130;
		obj=plant2;
d677 2
a678 1
	l5130:  if (obj!=knife||knfloc!=loc) goto l5140;
d680 1
a680 1
		spk=116;
d682 3
a684 2
	l5140:  if (obj!=rod||!here(rod2)) goto l5190;
		obj=rod2;
d686 3
a688 2
	l5190:  if ((verb==find||verb==invent)&&*wd2==0) goto l5010;
		printf("I see no %s here\n",wd1);
@


1.6
log
@tabify
@
text
@d71 1
a71 1
	egid = getegid();
d73 1
@


1.5
log
@setgid games, not setuid games. closes a neat set of holes
@
text
@d55 1
a55 1
/*      Re-coding of advent in C: main program                          */
d74 1
a74 1
	init();         /* Initialize everything */
d78 1
a78 1
	{               /* Restart is label 8305 (Fortran) */
d86 4
a89 4
			goto l8;        /* Get where we're going */
		    case 1:             /* Couldn't open it */
			exit(0);        /* So give up */
		    case 2:             /* Oops -- file was altered */
d91 2
a92 2
			exit(0);        /* File could be non-adventure */
		}                       /* So don't unlink it. */
d95 1
a95 1
	startup();              /* prepare for a user           */
d97 1
a97 1
	for (;;)                        /* main command loop (label 2)  */
d100 1
a100 1
			newloc=loc;     /*      main office             */
d105 1
a105 1
		rval=fdwarf();          /* dwarf stuff                  */
d108 1
a108 1
	l2000:  if (loc==0) die(99);    /* label 2000                   */
d119 1
a119 1
	l2001:  if (toting(bear)) rspeak(141);  /* 2001                 */
d140 1
a140 1
				ll =  prop[obj];   /* 2006         */
d144 1
a144 1
			}                                       /* 2008 */
d146 3
a148 3
	l2009:          k=54;                   /* 2009                 */
	l2010:          spk=k;
	l2011:          rspeak(spk);
d150 1
a150 1
	l2012:  verb=0;                         /* 2012                 */
d152 1
a152 1
	l2600:	checkhints();                   /* to 2600-2602         */
d160 1
a160 1
		wzdark=dark(0);                 /* 2605                 */
d163 2
a164 2
		if (delhit)                     /* user typed a DEL     */
		{       delhit=0;               /* reset counter        */
d168 2
a169 2
	l2608:  if ((foobar = -foobar)>0) foobar=0;     /* 2608         */
		/* should check here for "magic mode"                   */
d178 1
a178 1
		{       closing();                      /* to 10000     */
d183 2
a184 2
		{       caveclose();            /* to 11000             */
			continue;               /* back to 2            */
d189 1
a189 1
		{       rspeak(188);            /* 12000                */
d197 1
a197 1
		{       limit = -1;             /* 12400                */
d203 1
a203 1
		{       rspeak(185);            /* 12600                */
d205 1
a205 1
			done(2);                /* to 20000             */
d230 1
a230 1
		{       spk=60;                 /* 3000         */
d250 1
a250 1
		{   case 2: continue;           /* i.e. goto l2         */
d270 1
a270 1
		{   case 1:                     /* take = 8010          */
d277 1
a277 1
		    case 10: case 16: case 17:  /* calm,rub,toss        */
d279 1
a279 1
		    case 29:                    /* wake                 */
d283 1
a283 1
		    case 4: case 6:             /* 8040 open,lock       */
d293 7
a299 7
		    case 5: goto l2009;         /* nothing              */
		    case 7: goto l9070;         /* on                   */
		    case 8: goto l9080;         /* off                  */
		    case 11: goto l8000;        /* walk                 */
		    case 12: goto l9120;        /* kill                 */
		    case 13: goto l9130;        /* pour                 */
		    case 14:                    /* eat: 8140            */
d304 2
a305 2
		    case 15: goto l9150;        /* drink                */
		    case 18:                    /* quit: 8180           */
d307 1
a307 1
			if (gaveup) done(2);    /* 8185                 */
d309 1
a309 1
		    case 20:                    /* invent=8200          */
d322 3
a324 3
		    case 22: goto l9220;        /* fill                 */
		    case 23: goto l9230;        /* blast                */
		    case 24:                    /* score: 8240          */
d333 1
a333 1
		    case 25:                    /* foo: 8250            */
d352 1
a352 1
		    case 26:                    /* brief=8260           */
d357 1
a357 1
		    case 27:                    /* read=8270            */
d364 1
a364 1
		    case 30:                    /* suspend=8300         */
d373 3
a375 3
			ciao(argv[0]);          /* Do we quit? */
			continue;               /* Maybe not */
		    case 31:                    /* hours=8310           */
d384 2
a385 2
		{   case 1:                     /* take = 9010          */
	l9010:          switch(trtake())
d392 1
a392 1
	l9020:      case 2:                     /* drop = 9020          */
d405 1
a405 1
	l9040:      case 4:  case 6:            /* open, close          */
d411 3
a413 3
		    case 5: goto l2009;         /* nothing              */
		    case 7:                     /* on   9070            */
	l9070:          if (!here(lamp))  goto l2011;
d421 2
a422 2
		    case 8:                     /* off                  */
	l9080:          if (!here(lamp)) goto l2011;
d428 1
a428 1
		    case 9:                     /* wave                 */
d438 1
a438 1
		    case 30: case 31:           /* suspend, hours       */
d440 1
a440 1
	l9120:      case 12:                    /* kill                 */
d449 1
a449 1
	l9130:      case 13:                    /* pour                 */
d460 1
a460 1
			{       prop[door]=0;   /* 9132                 */
d472 1
a472 1
		    case 14:                    /* 9140 - eat           */
d478 1
a478 1
	l9150:      case 15:                    /* 9150 - drink         */
d488 1
a488 1
		    case 16:                    /* 9160: rub            */
d491 1
a491 1
		    case 17:                    /* 9170: throw          */
d500 1
a500 1
		    case 19: case 20:           /* 9190: find, invent   */
d509 1
a509 1
	l9210:      case 21:                    /* feed                 */
d514 1
a514 1
	l9220:      case 22:                    /* fill                 */
d521 1
a521 1
	l9230:      case 23:                    /* blast                */
d528 1
a528 1
	l9270:      case 27:                    /* read                 */
d538 1
a538 1
	l9280:      case 28:                    /* break                */
d551 1
a551 1
	l9290:      case 29:                    /* wake                 */
@


1.4
log
@pull signal.h
@
text
@d71 2
a72 3
	/* adventure doesn't need setuid-ness, so, just get rid of it */
	if (setuid(getuid()) < 0)
		perror("setuid");
d127 1
a127 1
			for (i=atloc[loc]; i!=0; i=link[i])     /*2004  */
d271 1
a271 1
			if (atloc[loc]==0||link[atloc[loc]]!=0) goto l8000;
@


1.3
log
@sync 0521
@
text
@d1 1
a1 1
/*    $NetBSD: main.c,v 1.3 1996/02/06 22:47:06 jtc Exp $     */
d51 1
a51 1
static char rcsid[] = "$NetBSD: main.c,v 1.4 1996/05/21 10:48:07 mrg Exp $";
d58 1
a58 1
#include <sys/signal.h>
@


1.2
log
@From netbsd:
Removed "extern int errno"; Added #include <errno.h> if not already present.
@
text
@d51 1
a51 1
static char rcsid[] = "$NetBSD: main.c,v 1.3 1996/02/06 22:47:06 jtc Exp $";
d58 1
a61 1

d71 4
d76 1
a76 1
	signal(2,trapdel);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: main.c,v 1.2 1995/03/21 12:05:07 cgd Exp $	*/
d51 1
a51 1
static char rcsid[] = "$NetBSD: main.c,v 1.2 1995/03/21 12:05:07 cgd Exp $";
a65 1
	extern int errno;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

