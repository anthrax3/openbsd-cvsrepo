head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.6
	OPENBSD_6_2_BASE:1.12
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.10.0.4
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.6
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.24
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.20
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.18
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.20
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.18
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.16
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.14
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.12
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.10
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.8
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2017.01.21.08.22.57;	author krw;	state Exp;
branches;
next	1.11;
commitid	slqvWeiHNc6j5Mv6;

1.11
date	2016.03.08.10.48.39;	author mestre;	state Exp;
branches;
next	1.10;
commitid	MVW94yecJ4ENUFco;

1.10
date	2014.12.08.21.56.27;	author deraadt;	state Exp;
branches;
next	1.9;
commitid	fyZyamgf42dtoHOi;

1.9
date	2014.07.13.19.40.57;	author tedu;	state Exp;
branches;
next	1.8;
commitid	ZHDTWGMnFWPBa5HW;

1.8
date	2009.10.27.23.59.23;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.07.09.15.59.26;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.03.01.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.08.31.02.29.43;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	97.07.23.20.04.42;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.12.19.22.20.48;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.10.15.09.35.58;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.36;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.36;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Nuke whitespace foolish enough to expose itself during the great
"warning:" rectification.
@
text
@/*	$OpenBSD: save.c,v 1.11 2016/03/08 10:48:39 mestre Exp $	*/
/*	$NetBSD: save.c,v 1.2 1995/03/21 12:05:08 cgd Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * The game adventure was originally written in Fortran by Will Crowther
 * and Don Woods.  It was later translated to C and enhanced by Jim
 * Gillogly.  This code is derived from software contributed to Berkeley
 * by Jim Gillogly at The Rand Corporation.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#include <stdio.h>
#include <stdlib.h>

#include "extern.h"
#include "hdr.h"

struct savestruct
{
	void *address;
	int width;
};

struct savestruct save_array[] =
{
	{&abbnum, sizeof(abbnum)},
	{&attack, sizeof(attack)},
	{&blklin, sizeof(blklin)},
	{&bonus,  sizeof(bonus)},
	{&chloc,  sizeof(chloc)},
	{&chloc2, sizeof(chloc2)},
	{&clock1, sizeof(clock1)},
	{&clock2, sizeof(clock2)},
	{&closed, sizeof(closed)},
	{&closng, sizeof(closng)},
	{&daltlc, sizeof(daltlc)},
	{&demo,   sizeof(demo)},
	{&detail, sizeof(detail)},
	{&dflag,  sizeof(dflag)},
	{&dkill,  sizeof(dkill)},
	{&dtotal, sizeof(dtotal)},
	{&foobar, sizeof(foobar)},
	{&gaveup, sizeof(gaveup)},
	{&holdng, sizeof(holdng)},
	{&iwest,  sizeof(iwest)},
	{&k,      sizeof(k)},
	{&k2,     sizeof(k2)},
	{&knfloc, sizeof(knfloc)},
	{&kq,     sizeof(kq)},
	{&latncy, sizeof(latncy)},
	{&limit,  sizeof(limit)},
	{&lmwarn, sizeof(lmwarn)},
	{&loc,    sizeof(loc)},
	{&maxdie, sizeof(maxdie)},
	{&mxscor, sizeof(mxscor)},
	{&newloc, sizeof(newloc)},
	{&numdie, sizeof(numdie)},
	{&obj,    sizeof(obj)},
	{&oldlc2, sizeof(oldlc2)},
	{&oldloc, sizeof(oldloc)},
	{&panic,  sizeof(panic)},
	{&savet,  sizeof(savet)},
	{&scorng, sizeof(scorng)},
	{&spk,    sizeof(spk)},
	{&stick,  sizeof(stick)},
	{&tally,  sizeof(tally)},
	{&tally2, sizeof(tally2)},
	{&tkk,    sizeof(tkk)},
	{&turns,  sizeof(turns)},
	{&verb,   sizeof(verb)},
	{&wd1,    sizeof(wd1)},
	{&wd2,    sizeof(wd2)},
	{&wzdark, sizeof(wzdark)},
	{&yea,    sizeof(yea)},
	{atloc,   sizeof(atloc)},
	{dloc,    sizeof(dloc)},
	{dseen,   sizeof(dseen)},
	{fixed,   sizeof(fixed)},
	{hinted,  sizeof(hinted)},
	{linkx,   sizeof(linkx)},
	{odloc,   sizeof(odloc)},
	{place,   sizeof(place)},
	{prop,    sizeof(prop)},
	{tk,      sizeof(tk)},

	{NULL,    0}
};

/*
 * Two passes on data: first to get checksum, second
 * to output the data using checksum to start random #s
 */
int
save(const char *outfile)
{
	FILE   *out;
	struct savestruct *p;
	char   *s;
	long    sum;
	int     i;

	crc_start();
	for (p = save_array; p->address != NULL; p++)
		sum = crc(p->address, p->width);
	srandom_deterministic((int) sum);

	if ((out = fopen(outfile, "wb")) == NULL) {
		fprintf(stderr,
		   "Hmm.  The name \"%s\" appears to be magically blocked.\n",
		   outfile);
		return 1;
	}

	fwrite(&sum, sizeof(sum), 1, out);	/* Here's the random() key */
	for (p = save_array; p->address != NULL; p++) {
		for (s = p->address, i = 0; i < p->width; i++, s++)
			*s = (*s ^ random()) & 0xFF;	/* Slightly obfuscate */
		fwrite(p->address, p->width, 1, out);
	}
	fclose(out);
	return 0;
}

int
restore(const char *infile)
{
	FILE   *in;
	struct savestruct *p;
	char   *s;
	long    sum, cksum;
	int     i;

	if ((in = fopen(infile, "rb")) == NULL) {
		fprintf(stderr,
		   "Hmm.  The file \"%s\" appears to be magically blocked.\n",
		   infile);
		return 1;
	}

	fread(&sum, sizeof(sum), 1, in);	/* Get the seed */
	srandom_deterministic((unsigned int) sum);
	for (p = save_array; p->address != NULL; p++) {
		fread(p->address, p->width, 1, in);
		for (s = p->address, i = 0; i < p->width; i++, s++)
			*s = (*s ^ random()) & 0xFF;	/* deobfuscate */
	}
	fclose(in);

	crc_start();			/* See if she cheated */
	for (p = save_array; p->address != NULL; p++)
		cksum = crc(p->address, p->width);
	if (sum != cksum)		/* Tsk tsk */
		return 2;		/* Altered the file */
	/* We successfully restored, so this really was a save file */
	/* Get rid of the file, but don't bother checking that we did */
	return 0;
}
@


1.11
log
@Headers cleanup with and OK tb@@

This was prompted by an initial patch sent by Edgar Pettijohn
<edgar ! pettijohn-web.com> but the actual commit is different
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.10 2014/12/08 21:56:27 deraadt Exp $	*/
d120 1
a120 1
save(const char *outfile)	
@


1.10
log
@For now, these games still contain deterministic randomization (for
save / replay modes of operation that have not yet been cleaned up).
OK, I've let the cat out of the bag, now some of you know you can cheat
at them..
ok millert guenther tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.9 2014/07/13 19:40:57 tedu Exp $	*/
d40 2
a42 1
#include "extern.h"
@


1.9
log
@calling this "encryption" makes me cringe. "slightly obfuscated" is better.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.8 2009/10/27 23:59:23 deraadt Exp $	*/
d130 1
a130 1
	srandom((int) sum);
d166 1
a166 1
	srandom((unsigned int) sum);
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.7 2004/07/09 15:59:26 deraadt Exp $	*/
d142 1
a142 1
			*s = (*s ^ random()) & 0xFF;	/* Lightly encrypt */
d170 1
a170 1
			*s = (*s ^ random()) & 0xFF;	/* Lightly decrypt */
@


1.7
log
@ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.6 2003/06/03 03:01:37 millert Exp $	*/
a36 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)save.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: save.c,v 1.6 2003/06/03 03:01:37 millert Exp $";
#endif
#endif /* not lint */
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.5 1998/08/31 02:29:43 pjanzen Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: save.c,v 1.5 1998/08/31 02:29:43 pjanzen Exp $";
d122 4
d127 1
a127 2
save(outfile)	/* Two passes on data: first to get checksum, second */
	const char *outfile;  /* to output the data using checksum to start random #s */
d158 1
a158 2
restore(infile)
	const char *infile;
@


1.5
log
@merge in NetBSD, including recent PR's of jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d42 1
a42 1
static char rcsid[] = "$OpenBSD$";
@


1.4
log
@tabify
@
text
@d1 1
d46 1
a46 1
static char rcsid[] = "$NetBSD: save.c,v 1.2 1995/03/21 12:05:08 cgd Exp $";
a49 1
#include <sys/types.h>
d53 1
d63 59
a121 60
	&abbnum,	sizeof(abbnum),
	&attack,	sizeof(attack),
	&blklin,	sizeof(blklin),
	&bonus,		sizeof(bonus),
	&chloc,		sizeof(chloc),
	&chloc2,	sizeof(chloc2),
	&clock1,	sizeof(clock1),
	&clock2,	sizeof(clock2),
	&closed,	sizeof(closed),
	&closng,	sizeof(closng),
	&daltlc,	sizeof(daltlc),
	&demo,		sizeof(demo),
	&detail,	sizeof(detail),
	&dflag,		sizeof(dflag),
	&dkill,		sizeof(dkill),
	&dtotal,	sizeof(dtotal),
	&foobar,	sizeof(foobar),
	&gaveup,	sizeof(gaveup),
	&holdng,	sizeof(holdng),
	&iwest,		sizeof(iwest),
	&k,		sizeof(k),
	&k2,		sizeof(k2),
	&knfloc,	sizeof(knfloc),
	&kq,		sizeof(kq),
	&latncy,	sizeof(latncy),
	&limit,		sizeof(limit),
	&lmwarn,	sizeof(lmwarn),
	&loc,		sizeof(loc),
	&maxdie,	sizeof(maxdie),
	&mxscor,	sizeof(mxscor),
	&newloc,	sizeof(newloc),
	&numdie,	sizeof(numdie),
	&obj,		sizeof(obj),
	&oldlc2,	sizeof(oldlc2),
	&oldloc,	sizeof(oldloc),
	&panic,		sizeof(panic),
	&saved,		sizeof(saved),
	&savet,		sizeof(savet),
	&scorng,	sizeof(scorng),
	&spk,		sizeof(spk),
	&stick,		sizeof(stick),
	&tally,		sizeof(tally),
	&tally2,	sizeof(tally2),
	&tkk,		sizeof(tkk),
	&turns,		sizeof(turns),
	&verb,		sizeof(verb),
	&wd1,		sizeof(wd1),
	&wd2,		sizeof(wd2),
	&wzdark,	sizeof(wzdark),
	&yea,		sizeof(yea),
	atloc,		sizeof(atloc),
	dloc,		sizeof(dloc),
	dseen,		sizeof(dseen),
	fixed,		sizeof(fixed),
	hinted,		sizeof(hinted),
	linkx,		 sizeof(linkx),
	odloc,		sizeof(odloc),
	place,		sizeof(place),
	prop,		sizeof(prop),
	tk,		sizeof(tk),
d123 1
a123 1
	NULL,   0
d126 3
a128 2
save(outfile)   /* Two passes on data: first to get checksum, second */
char *outfile;  /* to output the data using checksum to start random #s */
d130 1
a130 1
	FILE *out;
d132 3
a134 3
	char *s;
	long sum;
	int i;
d141 5
a145 8
	setegid(egid);
	if ((out = fopen(outfile, "wb")) == NULL)
	{
	    fprintf(stderr,
		"Hmm.  The name \"%s\" appears to be magically blocked.\n",
		outfile);
	    setegid(getgid());
	    return 1;
a146 1
	setegid(getgid());
d148 2
a149 3
	fwrite(&sum, sizeof(sum), 1, out);      /* Here's the random() key */
	for (p = save_array; p->address != NULL; p++)
	{
d151 1
a151 1
			*s = (*s ^ random()) & 0xFF;      /* Lightly encrypt */
d158 1
d160 1
a160 1
char *infile;
d162 1
a162 1
	FILE *in;
d164 9
a172 12
	char *s;
	long sum, cksum;
	int i;

	setegid(egid);
	if ((in = fopen(infile, "rb")) == NULL)
	{
	    fprintf(stderr,
		"Hmm.  The file \"%s\" appears to be magically blocked.\n",
		infile);
	    setegid(getgid());
	    return 1;
a173 1
	setegid(getgid());
d176 2
a177 3
	srandom((int) sum);
	for (p = save_array; p->address != NULL; p++)
	{
d180 1
a180 1
			*s = (*s ^ random()) & 0xFF;  /* Lightly decrypt */
d184 1
a184 1
	crc_start();				/* See if she cheated */
d187 2
a188 2
	if (sum != cksum)			/* Tsk tsk */
	    return 2;				/* Altered the file */
@


1.3
log
@setgid games, not setuid games. closes a neat set of holes
@
text
@d62 60
a121 60
	&abbnum,        sizeof(abbnum),
	&attack,        sizeof(attack),
	&blklin,        sizeof(blklin),
	&bonus,         sizeof(bonus),
	&chloc,         sizeof(chloc),
	&chloc2,        sizeof(chloc2),
	&clock1,        sizeof(clock1),
	&clock2,        sizeof(clock2),
	&closed,        sizeof(closed),
	&closng,        sizeof(closng),
	&daltlc,        sizeof(daltlc),
	&demo,          sizeof(demo),
	&detail,        sizeof(detail),
	&dflag,         sizeof(dflag),
	&dkill,         sizeof(dkill),
	&dtotal,        sizeof(dtotal),
	&foobar,        sizeof(foobar),
	&gaveup,        sizeof(gaveup),
	&holdng,        sizeof(holdng),
	&iwest,         sizeof(iwest),
	&k,             sizeof(k),
	&k2,            sizeof(k2),
	&knfloc,        sizeof(knfloc),
	&kq,            sizeof(kq),
	&latncy,        sizeof(latncy),
	&limit,         sizeof(limit),
	&lmwarn,        sizeof(lmwarn),
	&loc,           sizeof(loc),
	&maxdie,        sizeof(maxdie),
	&mxscor,        sizeof(mxscor),
	&newloc,        sizeof(newloc),
	&numdie,        sizeof(numdie),
	&obj,           sizeof(obj),
	&oldlc2,        sizeof(oldlc2),
	&oldloc,        sizeof(oldloc),
	&panic,         sizeof(panic),
	&saved,         sizeof(saved),
	&savet,         sizeof(savet),
	&scorng,        sizeof(scorng),
	&spk,           sizeof(spk),
	&stick,         sizeof(stick),
	&tally,         sizeof(tally),
	&tally2,        sizeof(tally2),
	&tkk,           sizeof(tkk),
	&turns,         sizeof(turns),
	&verb,          sizeof(verb),
	&wd1,           sizeof(wd1),
	&wd2,           sizeof(wd2),
	&wzdark,        sizeof(wzdark),
	&yea,           sizeof(yea),
	atloc,          sizeof(atloc),
	dloc,           sizeof(dloc),
	dseen,          sizeof(dseen),
	fixed,          sizeof(fixed),
	hinted,         sizeof(hinted),
	linkx,           sizeof(linkx),
	odloc,          sizeof(odloc),
	place,          sizeof(place),
	prop,           sizeof(prop),
	tk,             sizeof(tk),
d182 1
a182 1
	fread(&sum, sizeof(sum), 1, in);        /* Get the seed */
d192 1
a192 1
	crc_start();                            /* See if she cheated */
d195 2
a196 2
	if (sum != cksum)                       /* Tsk tsk */
	    return 2;                           /* Altered the file */
@


1.2
log
@deal with files as euid; based on code by alex@@freebsd.org
@
text
@d117 1
a117 1
	link,           sizeof(link),
a133 1
	uid_t euid_save;
d140 1
a140 3
	euid_save = geteuid();
	seteuid(getuid());

d146 1
a146 1
	    seteuid(euid_save);
d149 1
a149 1
	seteuid(euid_save);
a169 4
	uid_t euid_save;

	euid_save = geteuid();
	seteuid(euid_save);
d171 1
d177 1
a177 1
	    seteuid(euid_save);
d180 1
a180 1
	seteuid(euid_save);
@


1.1
log
@Initial revision
@
text
@d49 1
d51 1
d134 1
d141 3
d149 1
d152 2
d173 4
d183 1
d186 2
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
