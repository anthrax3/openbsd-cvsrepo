head	1.16;
access;
symbols
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.6
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.13.0.20
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.16
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.14
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.12
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.10
	OPENBSD_5_0:1.13.0.8
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.16
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.12
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.10
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.8
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.11.0.8
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.6
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.10
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.8
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.6
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.4
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.9.0.2
	OPENBSD_2_9_BASE:1.9
	OPENBSD_2_8:1.7.0.8
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.6
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2017.01.21.08.22.57;	author krw;	state Exp;
branches;
next	1.15;
commitid	slqvWeiHNc6j5Mv6;

1.15
date	2016.03.08.10.48.39;	author mestre;	state Exp;
branches;
next	1.14;
commitid	MVW94yecJ4ENUFco;

1.14
date	2014.07.13.19.40.57;	author tedu;	state Exp;
branches;
next	1.13;
commitid	ZHDTWGMnFWPBa5HW;

1.13
date	2009.10.27.23.59.23;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.27.00.10.14;	author tedu;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.09.15.59.26;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.03.01.37;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.17.20.14.57;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.04.06.07.20;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	98.11.29.19.45.10;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	98.09.12.01.54.42;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	98.08.31.02.29.46;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	97.07.23.20.04.43;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	96.12.19.22.20.49;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.12.14.15.21.28;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.36;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.36;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Nuke whitespace foolish enough to expose itself during the great
"warning:" rectification.
@
text
@/*	$OpenBSD: vocab.c,v 1.15 2016/03/08 10:48:39 mestre Exp $	*/
/*	$NetBSD: vocab.c,v 1.2 1995/03/21 12:05:13 cgd Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * The game adventure was originally written in Fortran by Will Crowther
 * and Don Woods.  It was later translated to C and enhanced by Jim
 * Gillogly.  This code is derived from software contributed to Berkeley
 * by Jim Gillogly at The Rand Corporation.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*	Re-coding of advent in C: data structure routines		*/

#include <err.h>
#include <stdio.h>
#include <stdlib.h>

#include "extern.h"
#include "hdr.h"

void
dstroy(int object)
{
	move(object, 0);
}

void
juggle(int object)
{
	int	i, j;

	i = place[object];
	j = fixed[object];
	move(object, i);
	move(object + 100, j);
}


void
move(int object, int where)
{
	int	from;

	if (object <= 100)
		from = place[object];
	else
		from = fixed[object - 100];
	if (from > 0 && from <= 300)
		carry(object, from);
	drop(object, where);
}


int
put(int object, int where, int pval)
{
	move(object, where);
	return (-1 - pval);
}


void
carry(int object, int where)
{
	int	temp;

	if (object <= 100) {
		if (place[object] == -1)
			return;
		place[object] = -1;
		holdng++;
	}
	if (atloc[where] == object) {
		atloc[where] = linkx[object];
		return;
	}
	for (temp = atloc[where]; linkx[temp] != object; temp = linkx[temp])
		;
	linkx[temp] = linkx[object];
}


void
drop(int object, int where)
{
	if (object > 100)
		fixed[object - 100] = where;
	else {
		if (place[object] == -1)
			holdng--;
		place[object] = where;
	}
	if (where <= 0)
		return;
	linkx[object] = atloc[where];
	atloc[where] = object;
}

/*
 * Look up or store a word
 * type: -2 for store, -1 for user word, >=0 for canned lookup
 * value: used for storing only
 */
int
vocab(const char *word, int type, int value)
{
	int	adr;
	const char *s;
	char	*t;
	int	hash, i;
	struct hashtab *h;

	for (hash = 0, s = word, i = 0; i < 5 && *s; i++)  /* some kind of hash */
		hash += *s++;		/* add all chars in the word	*/
	hash = (hash * 3719) & 077777;	/* pulled that one out of a hat */
	hash %= HTSIZE;			/* put it into range of table	*/

	for (adr = hash; ; adr++) {	/* look for entry in table	*/
		if (adr == HTSIZE)
			adr = 0; /* wrap around			*/
		h = &voc[adr];		/* point at the entry		*/
		switch (type) {
		case -2:		/* fill in entry		*/
			if (h->val)	/* already got an entry?	*/
				goto exitloop2;
			h->val = value;
			if ((h->atab = malloc(length(word))) == NULL)
				err(1, NULL);
			for (s = word, t = h->atab; *s;)
				*t++ = *s++ ^ '=';
			*t = 0 ^ '=';
			/* obfuscate slightly to frustrate core reader	*/
		/*	printf("Stored \"%s\" (%d ch) as entry %d\n",	*/
		/*		word, length(word), adr);		*/
			return (0);	/* entry unused			*/
		case -1:		/* looking up user word		*/
			if (h->val == 0)
				return (-1);	/* not found	*/
			for (s = word, t = h->atab; *t ^ '=';)
				if ((*s++ ^ '=') != *t++)
					goto exitloop2;
			if ((*s ^ '=') != *t && s - word < 5)
				goto exitloop2;
			/* the word matched o.k.			*/
			return (h->val);
		default:		/* looking up known word	*/
			if (h->val == 0)
				errx(1, "Unable to find %s in vocab", word);
			for (s = word, t = h->atab; *t ^ '=';)
				if ((*s++ ^ '=') != *t++)
					goto exitloop2;
			/* the word matched o.k.			*/
			if (h->val / 1000 != type)
				continue;
			return (h->val%1000);
		}

exitloop2:			/* hashed entry does not match	*/
		if (adr + 1 == hash || hash == 0)
			errx(1, "Hash table overflow");
	}
}

void
prht(void)				/* print hash table		*/
{
	int	i, j, l;
	char	*c;
	struct hashtab *h;

	for (i = 0; i < HTSIZE / 10 + 1; i++) {
		printf("%4d", i * 10);
		for (j = 0; j < 10; j++) {
			if (i * 10 + j >= HTSIZE)
				break;
			h = &voc[i * 10 + j];
			putchar(' ');
			if (h->val == 0) {
				printf("-----");
				continue;
			}
			for (l = 0, c = h->atab; l < 5; l++)
				if ((*c ^ '='))
					putchar(*c++ ^ '=');
				else
					putchar(' ');
		}
		putchar('\n');
	}
}
@


1.15
log
@Headers cleanup with and OK tb@@

This was prompted by an initial patch sent by Edgar Pettijohn
<edgar ! pettijohn-web.com> but the actual commit is different
@
text
@d1 1
a1 1
/*	$OpenBSD: vocab.c,v 1.14 2014/07/13 19:40:57 tedu Exp $	*/
d131 1
a131 1
vocab(const char *word, int type, int value)	
@


1.14
log
@calling this "encryption" makes me cringe. "slightly obfuscated" is better.
@
text
@d1 1
a1 1
/*	$OpenBSD: vocab.c,v 1.13 2009/10/27 23:59:23 deraadt Exp $	*/
d43 2
a45 1
#include "extern.h"
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: vocab.c,v 1.12 2006/03/27 00:10:14 tedu Exp $	*/
d157 1
a157 1
			/* encrypt slightly to thwart core reader	*/
@


1.12
log
@assorted fixes mostly from coverity via netbsd via jasper adriaanse via tech
@
text
@d1 1
a1 1
/*	$OpenBSD: vocab.c,v 1.11 2004/07/09 15:59:26 deraadt Exp $	*/
a36 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)vocab.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: vocab.c,v 1.11 2004/07/09 15:59:26 deraadt Exp $";
#endif
#endif /* not lint */
@


1.11
log
@ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: vocab.c,v 1.10 2003/06/03 03:01:37 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: vocab.c,v 1.10 2003/06/03 03:01:37 millert Exp $";
d192 1
a192 1
		if (adr + 1 == hash || (adr == HTSIZE && hash == 0))
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: vocab.c,v 1.9 2001/02/17 20:14:57 pjanzen Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: vocab.c,v 1.9 2001/02/17 20:14:57 pjanzen Exp $";
d55 1
a55 2
dstroy(object)
	int	object;
d61 1
a61 2
juggle(object)
	int	object;
d73 1
a73 2
move(object, where)
	int	object, where;
d88 1
a88 2
put(object, where, pval)
	int	object, where, pval;
d96 1
a96 2
carry(object, where)
	int	object, where;
d117 1
a117 2
drop(object, where)
	int	object, where;
d132 5
a136 1

d138 1
a138 4
vocab(word, type, value)	/* look up or store a word	*/
	const char *word;
	int	type;		/* -2 for store, -1 for user word, >=0 for canned lookup*/
	int	value;		/* used for storing only	*/
d198 1
a198 1
prht()					/* print hash table		*/
@


1.9
log
@Use err() rather than errx() immediately after alloc failure.
@
text
@d1 1
a1 1
/*	$OpenBSD: vocab.c,v 1.8 2001/02/04 06:07:20 pjanzen Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d42 1
a42 1
static char rcsid[] = "$OpenBSD: vocab.c,v 1.8 2001/02/04 06:07:20 pjanzen Exp $";
@


1.8
log
@Remove -traditional-cpp and do some -Wall cleanups; from Chris K. Young
<cky@@pobox.com> in PR 1652.
@
text
@d1 1
a1 1
/*	$OpenBSD: vocab.c,v 1.7 1998/11/29 19:45:10 pjanzen Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: vocab.c,v 1.7 1998/11/29 19:45:10 pjanzen Exp $";
d170 1
a170 1
				errx(1, "Out of memory!");
@


1.7
log
@Minor changes from NetBSD
@
text
@d1 1
a1 1
/*	$OpenBSD: vocab.c,v 1.6 1998/09/12 01:54:42 pjanzen Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: vocab.c,v 1.6 1998/09/12 01:54:42 pjanzen Exp $";
d145 1
a145 1
	char	*word;
@


1.6
log
@check for malloc() failure; jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: vocab.c,v 1.5 1998/08/31 02:29:46 pjanzen Exp $	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD: vocab.c,v 1.5 1998/08/31 02:29:46 pjanzen Exp $";
d189 2
a190 4
			if (h->val == 0) {
				printf("Unable to find %s in vocab\n", word);
				exit(1);
			}
d201 2
a202 4
		if (adr + 1 == hash || (adr == HTSIZE && hash == 0)) {
			printf("Hash table overflow\n");
			exit(1);
		}
@


1.5
log
@merge in NetBSD, including recent PR's of jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD$";
d52 1
d169 2
a170 1
			h->atab = malloc(length(word));
@


1.4
log
@tabify
@
text
@d1 1
d46 1
a46 1
static char rcsid[] = "$NetBSD: vocab.c,v 1.2 1995/03/21 12:05:13 cgd Exp $";
d52 1
d55 1
d57 1
d59 3
a61 2
int object;
{       move(object,0);
d64 1
d66 3
a68 2
int object;
{       register int i,j;
d70 4
a73 4
	i=place[object];
	j=fixed[object];
	move(object,i);
	move(object+100,j);
d77 5
a81 3
move(object,where)
int object,where;
{       register int from;
d83 2
a84 2
	if (object<=100)
		from=place[object];
d86 4
a89 3
		from=fixed[object-100];
	if (from>0 && from<=300) carry(object,from);
	drop(object,where);
d93 6
a98 4
put(object,where,pval)
int object,where,pval;
{       move(object,where);
	return(-1-pval);
a100 3
carry(object,where)
int object,where;
{       register int temp;
d102 9
a110 2
	if (object<=100)
	{       if (place[object]== -1) return;
d114 2
a115 2
	if (atloc[where]==object)
	{       atloc[where]=linkx[object];
d118 3
a120 2
	for (temp=atloc[where]; linkx[temp]!=object; temp=linkx[temp]);
	linkx[temp]=linkx[object];
d124 10
a133 6
drop(object,where)
int object,where;
{	if (object>100) fixed[object-100]=where;
	else
	{       if (place[object]== -1) holdng--;
		place[object]=where;
d135 4
a138 3
	if (where<=0) return;
	linkx[object]=atloc[where];
	atloc[where]=object;
d142 10
a151 7
vocab(word,type,value)			/* look up or store a word	*/
char *word;
int type;       /* -2 for store, -1 for user word, >=0 for canned lookup*/
int value;				/* used for storing only	*/
{       register int adr;
	register char *s,*t;
	int hash, i;
d154 1
a154 1
	for (hash=0,s=word,i=0; i<5 &&*s; i++)  /* some kind of hash    */
d156 1
a156 1
	hash = (hash*3719)&077777;      /* pulled that one out of a hat */
d159 3
a161 2
	for(adr=hash;; adr++)		/* look for entry in table	*/
	{	if (adr==HTSIZE) adr=0; /* wrap around			*/
d163 2
a164 2
		switch(type)
		{   case -2:		/* fill in entry		*/
d167 3
a169 3
			h->val=value;
			h->atab=malloc(length(word));
			for (s=word,t=h->atab; *s;)
d171 3
a173 3
			*t=0^'=';
			/* encrypt slightly to thwart core reader       */
		/*      printf("Stored \"%s\" (%d ch) as entry %d\n",   */
d175 5
a179 4
			return(0);	/* entry unused			*/
		    case -1:		/* looking up user word		*/
			if (h->val==0) return(-1);   /* not found    */
			for (s=word, t=h->atab;*t ^ '=';)
d182 2
a183 1
			if ((*s ^ '=') != *t && s-word<5) goto exitloop2;
d185 5
a189 5
			return(h->val);
		    default:		/* looking up known word	*/
			if (h->val==0)
			{       printf("Unable to find %s in vocab\n",word);
				exit(0);
d191 3
a193 2
			for (s=word, t=h->atab;*t ^ '=';)
				if ((*s++ ^ '=') != *t++) goto exitloop2;
d195 3
a197 2
			if (h->val/1000 != type) continue;
			return(h->val%1000);
d200 4
a203 4
	    exitloop2:			/* hashed entry does not match	*/
		if (adr+1==hash || (adr==HTSIZE && hash==0))
		{       printf("Hash table overflow\n");
			exit(0);
d208 1
a208 32

copystr(w1,w2)				/* copy one string to another	*/
char *w1,*w2;
{       register char *s,*t;
	for (s=w1,t=w2; *s;)
		*t++ = *s++;
	*t=0;
}

weq(w1,w2)				/* compare words		*/
char *w1,*w2;				/* w1 is user, w2 is system	*/
{       register char *s,*t;
	register int i;
	s=w1;
	t=w2;
	for (i=0; i<5; i++)		/* compare at most 5 chars	*/
	{       if (*t==0 && *s==0)
			return(TRUE);
		if (*s++ != *t++) return(FALSE);
	}
	return(TRUE);
}


length(str)				/* includes 0 at end		*/
char *str;
{       register char *s;
	register int n;
	for (n=0,s=str; *s++;) n++;
	return(n+1);
}

d210 3
a212 2
{       register int i,j,l;
	char *c;
d214 7
a220 5
	for (i=0; i<HTSIZE/10+1; i++)
	{       printf("%4d",i*10);
		for (j=0; j<10; j++)
		{       if (i*10+j>=HTSIZE) break;
			h= &voc[i*10+j];
d222 2
a223 2
			if (h->val==0)
			{       printf("-----");
d226 5
a230 3
			for (l=0, c=h->atab; l<5; l++)
				if ((*c ^ '=')) putchar(*c++ ^ '=');
				else putchar(' ');
@


1.3
log
@setgid games, not setuid games. closes a neat set of holes
@
text
@d49 1
a49 1
/*      Re-coding of advent in C: data structure routines               */
d120 1
a120 1
vocab(word,type,value)                  /* look up or store a word      */
d123 1
a123 1
int value;                              /* used for storing only        */
d130 1
a130 1
		hash += *s++;           /* add all chars in the word    */
d132 1
a132 1
	hash %= HTSIZE;                 /* put it into range of table   */
d134 3
a136 3
	for(adr=hash;; adr++)           /* look for entry in table      */
	{       if (adr==HTSIZE) adr=0; /* wrap around                  */
		h = &voc[adr];          /* point at the entry           */
d138 2
a139 2
		{   case -2:            /* fill in entry                */
			if (h->val)     /* already got an entry?        */
d148 3
a150 3
		/*              word, length(word), adr);               */
			return(0);      /* entry unused                 */
		    case -1:            /* looking up user word         */
d156 1
a156 1
			/* the word matched o.k.                        */
d158 1
a158 1
		    default:            /* looking up known word        */
d165 1
a165 1
			/* the word matched o.k.                        */
d170 1
a170 1
	    exitloop2:                  /* hashed entry does not match  */
d179 1
a179 1
copystr(w1,w2)                          /* copy one string to another   */
d187 2
a188 2
weq(w1,w2)                              /* compare words                */
char *w1,*w2;                           /* w1 is user, w2 is system     */
d193 1
a193 1
	for (i=0; i<5; i++)             /* compare at most 5 chars      */
d202 1
a202 1
length(str)                             /* includes 0 at end            */
d210 1
a210 1
prht()                                  /* print hash table             */
@


1.2
log
@some cleanup from bde@@freebsd
@
text
@d99 1
a99 1
	{       atloc[where]=link[object];
d102 2
a103 2
	for (temp=atloc[where]; link[temp]!=object; temp=link[temp]);
	link[temp]=link[object];
d115 1
a115 1
	link[object]=atloc[where];
@


1.1
log
@Initial revision
@
text
@d51 2
a52 1
# include "hdr.h"
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
