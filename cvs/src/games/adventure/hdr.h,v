head	1.16;
access;
symbols
	OPENBSD_6_1:1.15.0.6
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.4
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.46
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.42
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.40
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.38
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.36
	OPENBSD_5_0:1.12.0.34
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.32
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.30
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.26
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.28
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.24
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.22
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.20
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.18
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.16
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.14
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.12
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.10
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.12.0.8
	OPENBSD_3_7_BASE:1.12
	OPENBSD_3_6:1.12.0.6
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.4
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.9.0.6
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.4
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.9.0.2
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.6.0.10
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2017.04.10.13.56.16;	author fcambus;	state Exp;
branches;
next	1.15;
commitid	yqhrJco7ojU2lOtC;

1.15
date	2016.03.08.10.48.39;	author mestre;	state Exp;
branches;
next	1.14;
commitid	MVW94yecJ4ENUFco;

1.14
date	2014.12.08.21.56.27;	author deraadt;	state Exp;
branches;
next	1.13;
commitid	fyZyamgf42dtoHOi;

1.13
date	2014.07.13.19.40.57;	author tedu;	state Exp;
branches;
next	1.12;
commitid	ZHDTWGMnFWPBa5HW;

1.12
date	2003.06.03.03.01.37;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.12.09.13.46;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.07.18.19.37;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.06.22.59.05;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.04.06.07.20;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	98.08.31.02.29.38;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	97.07.23.20.04.40;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	97.01.11.10.01.27;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.12.19.22.20.46;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.12.14.15.21.26;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.35;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Clean up disabled declaration in the text struct.

OK deraadt@@
@
text
@/*	$OpenBSD: hdr.h,v 1.15 2016/03/08 10:48:39 mestre Exp $	*/
/*	$NetBSD: hdr.h,v 1.2 1995/03/21 12:05:02 cgd Exp $	*/

/*-
 * Copyright (c) 1991, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * The game adventure was originally written in Fortran by Will Crowther
 * and Don Woods.  It was later translated to C and enhanced by Jim
 * Gillogly.  This code is derived from software contributed to Berkeley
 * by Jim Gillogly at The Rand Corporation.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)hdr.h	8.1 (Berkeley) 5/31/93
 */

/*   ADVENTURE -- Jim Gillogly, Jul 1977
 * This program is a re-write of ADVENT, written in FORTRAN mostly by
 * Don Woods of SAIL.  In most places it is as nearly identical to the
 * original as possible given the language and word-size differences.
 * A few places, such as the message arrays and travel arrays were changed
 * to reflect the smaller core size and word size.  The labels of the
 * original are reflected in this version, so that the comments of the
 * fortran are still applicable here.
 *
 * The data file distributed with the fortran source is assumed to be called
 * "glorkz" in the directory where the program is first run.
 */

/* hdr.h: included by c advent files */

#include <sys/types.h>

#include <signal.h>

int     datfd;			/* message file descriptor	*/
volatile sig_atomic_t delhit;
int     yea;
extern char data_file[];	/* Virtual data file		*/

#define TAB     011
#define LF      012
#define FLUSHLINE do { int c; while ((c = getchar()) != EOF && c != '\n'); } while (0)
#define FLUSHLF   while (next()!=LF)

int     loc, newloc, oldloc, oldlc2, wzdark, gaveup, kq, k, k2;
int     verb, obj, spk;
extern int blklin;
time_t  savet;
int     mxscor, latncy;

#define SHORT 50		/* How short is a demo game?	*/

#define MAXSTR  20		/* max length of user's words	*/
char	wd1[MAXSTR];		/* the complete words		*/
char	wd2[MAXSTR];

#define HTSIZE  512		/* max number of vocab words	*/
struct hashtab	{		/* hash table for vocabulary	*/
	int     val;		/* word type &index (ktab)	*/
	char  *atab;		/* pointer to actual string	*/
} voc[HTSIZE];

struct text {
	char *seekadr;		/* Msg start in virtual disk	*/
	int txtlen;		/* length of msg starting here	*/
};

#define RTXSIZ  205
struct text rtext[RTXSIZ];	/* random text messages		*/

#define MAGSIZ  35
struct text mtext[MAGSIZ];	/* magic messages		*/

int clsses;
#define CLSMAX  12
struct text ctext[CLSMAX];	/* classes of adventurer	*/
int cval[CLSMAX];

struct text ptext[101];		/* object descriptions		*/

#define LOCSIZ	141		/* number of locations		*/
struct text ltext[LOCSIZ];	/* long loc description		*/
struct text stext[LOCSIZ];	/* short loc descriptions	*/

struct travlist			/* direcs & conditions of travel*/
{	struct travlist *next;	/* ptr to next list entry	*/
	int conditions;		/* m in writeup (newloc / 1000) */
	int tloc;		/* n in writeup (newloc % 1000) */
	int tverb;		/* the verb that takes you there*/
} *travel[LOCSIZ],*tkk;		/* travel is closer to keys(...)*/

int atloc[LOCSIZ];

int	plac[101];		/* initial object placement	*/
int	fixd[101], fixed[101];	/* location fixed?		*/

int	actspk[35];		/* rtext msg for verb <n>	*/

int	cond[LOCSIZ];		/* various condition bits	*/

extern int setbit[16];		/* bit defn masks 1,2,4,...	*/

int	hntmax;
int	hints[20][5];		/* info on hints		*/
int	hinted[20], hintlc[20];

int	place[101], prop[101], linkx[201];
int	abb[LOCSIZ];

int	maxtrs, tally, tally2;	/* treasure values		*/

#define FALSE   0
#define TRUE    1

int	keys, lamp, grate, cage, rod, rod2, steps,	/* mnemonics */
	bird, door, pillow, snake, fissur, tablet, clam, oyster,
	magzin, dwarf, knife, food, bottle, water, oil, plant, plant2,
	axe, mirror, dragon, chasm, troll, troll2, bear, messag,
	vend, batter, nugget, coins, chest, eggs, tridnt, vase,
	emrald, pyram, pearl, rug, chain, spices, back, look, cave,
	null, entrnc, dprssn, enter, stream, pour, say, lock, throw,
	find, invent;

int	chloc, chloc2, dseen[7], dloc[7],	/* dwarf stuff	*/
	odloc[7], dflag, daltlc;

int	tk[21], stick, dtotal, attack;
int	turns, lmwarn, iwest, knfloc, detail,   /* various flags & counters */
	abbnum, maxdie, numdie, holdng, dkill, foobar, bonus, clock1,
	clock2, saved, closng, panic, closed, scorng;

int	demo, limit;

/* We need to get a little tricky to avoid strings */
#define DECR(a,b,c,d,e) decr(*#a+'+',*#b+'-',*#c+'#',*#d+'&',*#e+'%')
@


1.15
log
@Headers cleanup with and OK tb@@

This was prompted by an initial patch sent by Edgar Pettijohn
<edgar ! pettijohn-web.com> but the actual commit is different
@
text
@d1 1
a1 1
/*	$OpenBSD: hdr.h,v 1.14 2014/12/08 21:56:27 deraadt Exp $	*/
a87 3
#ifdef OLDSTUFF
	int seekadr;		/* DATFILE must be < 2**16	*/
#endif /* OLDSTUFF */
@


1.14
log
@For now, these games still contain deterministic randomization (for
save / replay modes of operation that have not yet been cleaned up).
OK, I've let the cat out of the bag, now some of you know you can cheat
at them..
ok millert guenther tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: hdr.h,v 1.13 2014/07/13 19:40:57 tedu Exp $	*/
d56 1
@


1.13
log
@calling this "encryption" makes me cringe. "slightly obfuscated" is better.
@
text
@d1 1
a1 1
/*	$OpenBSD: hdr.h,v 1.12 2003/06/03 03:01:37 millert Exp $	*/
a84 2

#define SEED 1815622		/* "obfuscation" seed		*/
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: hdr.h,v 1.11 2003/05/12 09:13:46 pjanzen Exp $	*/
d86 1
a86 1
#define SEED 1815622		/* "Encryption" seed		*/
@


1.11
log
@NetBSD: remove redundant decl
@
text
@d1 1
a1 1
/*	$OpenBSD: hdr.h,v 1.10 2003/04/07 18:19:37 millert Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.10
log
@Change wd1 and wd2 from pointers to arrays.  This removes the need
for getin() to have static buffers and allows us to do "sizeof wd1".

Also fix saved game path.  It was removing the first 2 chars of
the filename due to a bug.

tdeval@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: hdr.h,v 1.9 2002/02/19 19:39:36 millert Exp $	*/
d164 1
a164 1
int	demo, newloc, limit;
@


1.9
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: hdr.h,v 1.8 2001/08/06 22:59:05 pjanzen Exp $	*/
a72 1
char   *wd1,*wd2;		/* the complete words		*/
d81 2
@


1.8
log
@Nothing but comments after #endif and #else; heko@@iki.fi
@
text
@d1 1
a1 1
/*	$OpenBSD: hdr.h,v 1.7 2001/02/04 06:07:20 pjanzen Exp $	*/
a165 1
#ifdef __STDC__
a166 3
#else
#define DECR(a,b,c,d,e) decr('a'+'+','b'+'-','c'+'#','d'+'&','e'+'%')
#endif
@


1.7
log
@Remove -traditional-cpp and do some -Wall cleanups; from Chris K. Young
<cky@@pobox.com> in PR 1652.
@
text
@d1 1
a1 1
/*	$OpenBSD: hdr.h,v 1.6 1998/08/31 02:29:38 pjanzen Exp $	*/
d94 1
a94 1
#endif OLDSTUFF
@


1.6
log
@merge in NetBSD, including recent PR's of jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d166 3
d170 1
@


1.5
log
@tabify
@
text
@d1 1
d58 1
d60 1
a60 1
#include <stdio.h>
d62 4
a65 4
int datfd;				/* message file descriptor	*/
int delhit;
int yea;
extern char data_file[];		/* Virtual data file		*/
d72 3
a74 3
int loc,newloc,oldloc,oldlc2,wzdark,gaveup,kq,k,k2;
char *wd1,*wd2;				/* the complete words		*/
int verb,obj,spk;
d76 2
a77 1
int saved,savet,mxscor,latncy;
d79 1
a79 1
#define SHORT 50			/* How short is a demo game?	*/
d81 1
a81 1
#define MAXSTR	20			/* max length of user's words	*/
d83 4
a86 4
#define HTSIZE	512			/* max number of vocab words	*/
struct hashtab				/* hash table for vocabulary	*/
{	int val;			/* word type &index (ktab)	*/
	char *atab;			/* pointer to actual string	*/
d89 1
a89 1
#define SEED 1815622			/* "Encryption" seed		*/
d91 1
a91 1
struct text
d93 1
a93 1
{	int seekadr;			/* DATFILE must be < 2**16	*/
d95 2
a96 2
{	char *seekadr;			/* Msg start in virtual disk	*/
	int txtlen;			/* length of msg starting here	*/
d100 1
a100 1
struct text rtext[RTXSIZ];		/* random text messages		*/
d103 1
a103 1
struct text mtext[MAGSIZ];		/* magic messages		*/
d107 1
a107 1
struct text ctext[CLSMAX];		/* classes of adventurer	*/
d110 1
a110 1
struct text ptext[101];			/* object descriptions		*/
d112 10
a121 10
#define LOCSIZ	141			/* number of locations		*/
struct text ltext[LOCSIZ];		/* long loc description		*/
struct text stext[LOCSIZ];		/* short loc descriptions	*/

struct travlist				/* direcs & conditions of travel*/
{	struct travlist *next;		/* ptr to next list entry	*/
	int conditions;			/* m in writeup (newloc / 1000) */
	int tloc;			/* n in writeup (newloc % 1000) */
	int tverb;			/* the verb that takes you there*/
} *travel[LOCSIZ],*tkk;			/* travel is closer to keys(...)*/
d125 2
a126 2
int  plac[101];				/* initial object placement	*/
int  fixd[101],fixed[101];		/* location fixed?		*/
d128 1
a128 1
int actspk[35];				/* rtext msg for verb <n>	*/
d130 1
a130 1
int cond[LOCSIZ];			/* various condition bits	*/
d132 1
a132 1
extern int setbit[16];			/* bit defn masks 1,2,4,...	*/
d134 3
a136 3
int hntmax;
int hints[20][5];			/* info on hints		*/
int hinted[20],hintlc[20];
d138 2
a139 2
int place[101], prop[101],linkx[201];
int abb[LOCSIZ];
d141 1
a141 1
int maxtrs,tally,tally2;		/* treasure values		*/
d146 16
a161 19
int keys,lamp,grate,cage,rod,rod2,steps,/* mnemonics			*/
	bird,door,pillow,snake,fissur,tablet,clam,oyster,magzin,
	dwarf,knife,food,bottle,water,oil,plant,plant2,axe,mirror,dragon,
	chasm,troll,troll2,bear,messag,vend,batter,
	nugget,coins,chest,eggs,tridnt,vase,emrald,pyram,pearl,rug,chain,
	spices,
	back,look,cave,null,entrnc,dprssn,
	enter, stream, pour,
	say,lock,throw,find,invent;

int chloc,chloc2,dseen[7],dloc[7],	/* dwarf stuff			*/
	odloc[7],dflag,daltlc;

int tk[21],stick,dtotal,attack;
int turns,lmwarn,iwest,knfloc,detail,   /* various flags & counters     */
	abbnum,maxdie,numdie,holdng,dkill,foobar,bonus,clock1,clock2,
	saved,closng,panic,closed,scorng;

int demo,newloc,limit;
d163 1
a163 2
char *decr();
unsigned long crc();
a166 2

gid_t	egid;
@


1.4
log
@Fix PR#2 in a simplistic way.  Handle EOF on all getchar()s
@
text
@d60 1
a60 1
int datfd;                              /* message file descriptor      */
d63 1
a63 1
extern char data_file[];                /* Virtual data file            */
d71 1
a71 1
char *wd1,*wd2;                         /* the complete words           */
d76 1
a76 1
#define SHORT 50                        /* How short is a demo game?    */
d78 1
a78 1
#define MAXSTR  20                      /* max length of user's words   */
d80 4
a83 4
#define HTSIZE  512                     /* max number of vocab words    */
struct hashtab                          /* hash table for vocabulary    */
{       int val;                        /* word type &index (ktab)      */
	char *atab;                     /* pointer to actual string     */
d86 1
a86 1
#define SEED 1815622                    /* "Encryption" seed            */
d90 1
a90 1
{       int seekadr;                    /* DATFILE must be < 2**16      */
d92 2
a93 2
{       char *seekadr;                  /* Msg start in virtual disk    */
	int txtlen;                     /* length of msg starting here  */
d97 1
a97 1
struct text rtext[RTXSIZ];              /* random text messages         */
d100 1
a100 1
struct text mtext[MAGSIZ];              /* magic messages               */
d104 1
a104 1
struct text ctext[CLSMAX];              /* classes of adventurer        */
d107 1
a107 1
struct text ptext[101];                 /* object descriptions          */
d109 10
a118 10
#define LOCSIZ  141                     /* number of locations          */
struct text ltext[LOCSIZ];              /* long loc description         */
struct text stext[LOCSIZ];              /* short loc descriptions       */

struct travlist                         /* direcs & conditions of travel*/
{       struct travlist *next;          /* ptr to next list entry       */
	int conditions;                 /* m in writeup (newloc / 1000) */
	int tloc;                       /* n in writeup (newloc % 1000) */
	int tverb;                      /* the verb that takes you there*/
} *travel[LOCSIZ],*tkk;                 /* travel is closer to keys(...)*/
d122 2
a123 2
int  plac[101];                         /* initial object placement     */
int  fixd[101],fixed[101];              /* location fixed?              */
d125 1
a125 1
int actspk[35];                         /* rtext msg for verb <n>       */
d127 1
a127 1
int cond[LOCSIZ];                       /* various condition bits       */
d129 1
a129 1
extern int setbit[16];                  /* bit defn masks 1,2,4,...     */
d132 1
a132 1
int hints[20][5];                       /* info on hints                */
d138 1
a138 1
int maxtrs,tally,tally2;                /* treasure values              */
d143 1
a143 1
int keys,lamp,grate,cage,rod,rod2,steps,/* mnemonics                    */
d153 1
a153 1
int chloc,chloc2,dseen[7],dloc[7],      /* dwarf stuff                  */
@


1.3
log
@setgid games, not setuid games. closes a neat set of holes
@
text
@d58 1
d67 1
a67 1
#define FLUSHLINE while (getchar()!='\n')
@


1.2
log
@some cleanup from bde@@freebsd
@
text
@d57 1
d134 1
a134 1
int place[101], prop[101],link[201];
d167 2
@


1.1
log
@Initial revision
@
text
@a160 1
char *malloc();
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
