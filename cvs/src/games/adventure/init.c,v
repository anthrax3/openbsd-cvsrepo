head	1.15;
access;
symbols
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.11.0.22
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.20
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.16
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.14
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.16
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.12
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.6.0.18
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.16
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.14
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.6.0.12
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.10
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.8
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.6
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.6.0.4
	OPENBSD_2_5_BASE:1.6
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	OPENBSD_2_3:1.5.0.4
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.2
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.4.0.4
	OPENBSD_2_1_BASE:1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2016.03.08.10.48.39;	author mestre;	state Exp;
branches;
next	1.14;
commitid	MVW94yecJ4ENUFco;

1.14
date	2016.01.03.14.38.16;	author mestre;	state Exp;
branches;
next	1.13;
commitid	Ptgw9rNvmSHNRfGy;

1.13
date	2014.12.31.15.45.57;	author tedu;	state Exp;
branches;
next	1.12;
commitid	AUwjkKxj3SWsL8mB;

1.12
date	2014.12.08.21.56.27;	author deraadt;	state Exp;
branches;
next	1.11;
commitid	fyZyamgf42dtoHOi;

1.11
date	2009.10.27.23.59.23;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.27.00.10.14;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2004.07.09.15.59.26;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.03.01.37;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.06.21.48.50;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.08.31.02.29.39;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	97.07.23.20.04.40;	author kstailey;	state Exp;
branches;
next	1.4;

1.4
date	96.05.28.12.39.18;	author deraadt;	state Exp;
branches;
next	1.3;

1.3
date	96.05.26.07.23.02;	author fn;	state Exp;
branches;
next	1.2;

1.2
date	96.05.26.01.04.43;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.35;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.35;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Headers cleanup with and OK tb@@

This was prompted by an initial patch sent by Edgar Pettijohn
<edgar ! pettijohn-web.com> but the actual commit is different
@
text
@/*	$OpenBSD: init.c,v 1.14 2016/01/03 14:38:16 mestre Exp $	*/
/*	$NetBSD: init.c,v 1.4 1996/05/21 21:53:05 mrg Exp $	*/

/*-
 * Copyright (c) 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * The game adventure was originally written in Fortran by Will Crowther
 * and Don Woods.  It was later translated to C and enhanced by Jim
 * Gillogly.  This code is derived from software contributed to Berkeley
 * by Jim Gillogly at The Rand Corporation.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*	Re-coding of advent in C: data initialization	*/

#include <stdlib.h>

#include "extern.h"
#include "hdr.h"

int     blklin = TRUE;

int     setbit[16] = {1, 2, 4, 010, 020, 040, 0100, 0200, 0400, 01000, 02000,
				04000, 010000, 020000, 040000, 0100000};


void
init(void)			/* everything for 1st time run */
{
	/*
	 * We need deterministic randomness for the obfuscation schemes
	 * in io.c and setup.c.
	 */
	srandom_deterministic(1);
	rdata();		/* read data from orig. file */
	linkdata();
	poof();
}

char *
decr(char a, char b, char c, char d, char e)
{
	static char buf[6];

	buf[0] = a - '+';
	buf[1] = b - '-';
	buf[2] = c - '#';
	buf[3] = d - '&';
	buf[4] = e - '%';
	buf[5] = 0;
	return buf;
}

void
linkdata(void)			/* secondary data manipulation */
{
	int     i, j;

	/* array linkages */
	for (i = 1; i < LOCSIZ; i++)
		if (ltext[i].seekadr != 0 && travel[i] != 0)
			if ((travel[i]->tverb) == 1)
				cond[i] = 2;
	for (j = 100; j > 0; j--)
		if (fixd[j] > 0) {
			drop(j + 100, fixd[j]);
			drop(j, plac[j]);
		}
	for (j = 100; j > 0; j--) {
		fixed[j] = fixd[j];
		if (plac[j] != 0 && fixd[j] <= 0)
			drop(j, plac[j]);
	}

	maxtrs = 79;
	tally = 0;
	tally2 = 0;

	for (i = 50; i <= maxtrs; i++) {
		if (ptext[i].seekadr != 0)
			prop[i] = -1;
		tally -= prop[i];
	}

	/* define mnemonics */
	keys  = vocab(DECR(k,e,y,s,\0), 1, 0);
	lamp  = vocab(DECR(l,a,m,p,\0), 1, 0);
	grate = vocab(DECR(g,r,a,t,e), 1, 0);
	cage  = vocab(DECR(c,a,g,e,\0),1, 0);
	rod   = vocab(DECR(r,o,d,\0,\0),1, 0);
	rod2  = rod + 1;
	steps = vocab(DECR(s,t,e,p,s),1, 0);
	bird  = vocab(DECR(b,i,r,d,\0),1, 0);
	door  = vocab(DECR(d,o,o,r,\0),1, 0);
	pillow= vocab(DECR(p,i,l,l,o), 1, 0);
	snake = vocab(DECR(s,n,a,k,e), 1, 0);
	fissur= vocab(DECR(f,i,s,s,u), 1, 0);
	tablet= vocab(DECR(t,a,b,l,e), 1, 0);
	clam  = vocab(DECR(c,l,a,m,\0),1, 0);
	oyster= vocab(DECR(o,y,s,t,e), 1, 0);
	magzin= vocab(DECR(m,a,g,a,z), 1, 0);
	dwarf = vocab(DECR(d,w,a,r,f), 1, 0);
	knife = vocab(DECR(k,n,i,f,e), 1, 0);
	food  = vocab(DECR(f,o,o,d,\0),1, 0);
	bottle= vocab(DECR(b,o,t,t,l), 1, 0);
	water = vocab(DECR(w,a,t,e,r), 1, 0);
	oil   = vocab(DECR(o,i,l,\0,\0),1, 0);
	plant = vocab(DECR(p,l,a,n,t), 1, 0);
	plant2= plant + 1;
	axe   = vocab(DECR(a,x,e,\0,\0),1, 0);
	mirror= vocab(DECR(m,i,r,r,o), 1, 0);
	dragon= vocab(DECR(d,r,a,g,o), 1, 0);
	chasm = vocab(DECR(c,h,a,s,m), 1, 0);
	troll = vocab(DECR(t,r,o,l,l), 1, 0);
	troll2= troll + 1;
	bear  = vocab(DECR(b,e,a,r,\0),1, 0);
	messag= vocab(DECR(m,e,s,s,a), 1, 0);
	vend  = vocab(DECR(v,e,n,d,i), 1, 0);
	batter= vocab(DECR(b,a,t,t,e), 1, 0);

	nugget= vocab(DECR(g,o,l,d,\0),1, 0);
	coins = vocab(DECR(c,o,i,n,s), 1, 0);
	chest = vocab(DECR(c,h,e,s,t), 1, 0);
	eggs  = vocab(DECR(e,g,g,s,\0),1, 0);
	tridnt= vocab(DECR(t,r,i,d,e), 1, 0);
	vase  = vocab(DECR(v,a,s,e,\0),1, 0);
	emrald= vocab(DECR(e,m,e,r,a), 1, 0);
	pyram = vocab(DECR(p,y,r,a,m), 1, 0);
	pearl = vocab(DECR(p,e,a,r,l), 1, 0);
	rug   = vocab(DECR(r,u,g,\0,\0),1, 0);
	chain = vocab(DECR(c,h,a,i,n), 1, 0);

	back  = vocab(DECR(b,a,c,k,\0),0, 0);
	look  = vocab(DECR(l,o,o,k,\0),0, 0);
	cave  = vocab(DECR(c,a,v,e,\0),0, 0);
	null  = vocab(DECR(n,u,l,l,\0),0, 0);
	entrnc= vocab(DECR(e,n,t,r,a), 0, 0);
	dprssn= vocab(DECR(d,e,p,r,e), 0, 0);
	enter = vocab(DECR(e,n,t,e,r), 0, 0);

	pour  = vocab(DECR(p,o,u,r,\0), 2, 0);
	say   = vocab(DECR(s,a,y,\0,\0),2, 0);
	lock  = vocab(DECR(l,o,c,k,\0),2, 0);
	throw = vocab(DECR(t,h,r,o,w), 2, 0);
	find  = vocab(DECR(f,i,n,d,\0),2, 0);
	invent= vocab(DECR(i,n,v,e,n), 2, 0);

	/* initialize dwarves */
	chloc = 114;
	chloc2 = 140;
	for (i = 1; i <= 6; i++)
		dseen[i] = FALSE;
	dflag = 0;
	dloc[1] = 19;
	dloc[2] = 27;
	dloc[3] = 33;
	dloc[4] = 44;
	dloc[5] = 64;
	dloc[6] = chloc;
	daltlc = 18;

	/* random flags & ctrs */
	turns = 0;
	lmwarn = FALSE;
	iwest = 0;
	knfloc = 0;
	detail = 0;
	abbnum = 5;
	for (i = 0; i <= 4; i++)
		if (rtext[2 * i + 81].seekadr != 0)
			maxdie = i + 1;
	numdie = holdng = dkill = foobar = bonus = 0;
	clock1 = 30;
	clock2 = 50;
	saved = 0;
	closng = panic = closed = scorng = FALSE;
}


void
trapdel(int n)			/* come here if he hits a del	*/
{
	delhit = 1;		/* main checks, treats as QUIT	*/
	signal(SIGINT, trapdel);/* catch subsequent DELs	*/
}


void
startup(void)
{
	demo = Start();
	hinted[3] = yes(65, 1, 0);
	newloc = 1;
	delhit = 0;
	limit = 330;
	if (hinted[3])
		limit = 1000;	/* better batteries if instrucs */
}
@


1.14
log
@About 13 years ago when the idiom srandom(time()), and sometimes
srandom(time()+getpid()), was changed by srandomdev(), but #include <time.h>
lived up until this day so remove it.

Additionally, earlier than that, 18 years ago, random(6) was one of the first
consumers of arc4random(3) family, and was pulling it from dev/rndvar.h but
these days we pull it from stdlib.h, which is already done, so while here
remove dev/rndvar.h also.

"seems comprehensive to me" deraadt@@ and OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.13 2014/12/31 15:45:57 tedu Exp $	*/
a39 3
#include <sys/types.h>
#include <signal.h>
#include <stdio.h>
a40 1
#include <unistd.h>
@


1.13
log
@adventure requires deterministic random for its internal data
"obfuscation" scheme to work (words fail me), but we can use arc4random
for the in game fun. from theo buehler
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.12 2014/12/08 21:56:27 deraadt Exp $	*/
a43 1
#include <time.h>
d46 1
a47 1
#include "extern.h"
@


1.12
log
@For now, these games still contain deterministic randomization (for
save / replay modes of operation that have not yet been cleaned up).
OK, I've let the cat out of the bag, now some of you know you can cheat
at them..
ok millert guenther tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.11 2009/10/27 23:59:23 deraadt Exp $	*/
d59 5
@


1.11
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.10 2006/03/27 00:10:14 tedu Exp $	*/
a215 1
	srandomdev();
@


1.10
log
@assorted fixes mostly from coverity via netbsd via jasper adriaanse via tech
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.9 2004/07/09 15:59:26 deraadt Exp $	*/
a36 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)init.c	8.1 (Berkeley) 6/2/93";
#else
static char rcsid[] = "$OpenBSD: init.c,v 1.9 2004/07/09 15:59:26 deraadt Exp $";
#endif
#endif /* not lint */
@


1.9
log
@ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.8 2003/06/03 03:01:37 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: init.c,v 1.8 2003/06/03 03:01:37 millert Exp $";
d92 1
a92 1
	for (i = 1; i <= LOCSIZ; i++)
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.7 2002/12/06 21:48:50 millert Exp $	*/
d42 1
a42 1
static char rcsid[] = "$OpenBSD: init.c,v 1.7 2002/12/06 21:48:50 millert Exp $";
d65 1
a65 1
init()				/* everything for 1st time run */
d73 1
a73 2
decr(a, b, c, d, e)
	char a, b, c, d, e;
d87 1
a87 1
linkdata()			/* secondary data manipulation */
d213 1
a213 2
trapdel(n)			/* come here if he hits a del	*/
	int n;
d221 1
a221 1
startup()
@


1.7
log
@Replace things like srandom(time(NULL)) with srandomdev(3).  random(3)
good enough for games but we should at least use a decent seed.
pjanzen@@ OK
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.6 1998/08/31 02:29:39 pjanzen Exp $	*/
d21 1
a21 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d42 1
a42 1
static char rcsid[] = "$OpenBSD: init.c,v 1.6 1998/08/31 02:29:39 pjanzen Exp $";
@


1.6
log
@merge in NetBSD, including recent PR's of jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d46 1
a46 1
static char rcsid[] = "$OpenBSD$";
d230 1
a230 2
	srandom((unsigned int)(time((time_t *)NULL)));	/* random seed */
	/* srand(371); */			/* non-random seed */
@


1.5
log
@tabify
@
text
@d1 1
d46 1
a46 1
static char rcsid[] = "$NetBSD: init.c,v 1.4 1996/05/21 21:53:05 mrg Exp $";
d50 1
a50 1
/*	Re-coding of advent in C: data initialization			*/
d55 4
d60 1
d62 1
a62 1
int blklin = TRUE;
d64 2
a65 2
int setbit[16] = {1,2,4,010,020,040,0100,0200,0400,01000,02000,04000,
		  010000,020000,040000,0100000};
d68 2
a69 2
init(command)				/* everything for 1st time run	*/
char *command;				/* command we were called with	*/
d71 1
a71 1
	rdata();			/* read data from orig. file	*/
d76 3
a78 2
char *decr(a,b,c,d,e)
char a,b,c,d,e;
d82 5
a86 5
	buf[0] = a-'+';
	buf[1] = b-'-';
	buf[2] = c-'#';
	buf[3] = d-'&';
	buf[4] = e-'%';
d91 4
a94 2
linkdata()				/*  secondary data manipulation */
{       register int i,j;
d96 9
a104 8
	/*	array linkages		*/
	for (i=1; i<=LOCSIZ; i++)
		if (ltext[i].seekadr!=0 && travel[i] != 0)
			if ((travel[i]->tverb)==1) cond[i]=2;
	for (j=100; j>0; j--)
		if (fixd[j]>0)
		{       drop(j+100,fixd[j]);
			drop(j,plac[j]);
d106 4
a109 3
	for (j=100; j>0; j--)
	{       fixed[j]=fixd[j];
		if (plac[j]!=0 && fixd[j]<=0) drop(j,plac[j]);
d112 7
a118 6
	maxtrs=79;
	tally=0;
	tally2=0;

	for (i=50; i<=maxtrs; i++)
	{       if (ptext[i].seekadr!=0) prop[i] = -1;
d123 61
a183 61
	keys = vocab(DECR(k,e,y,s,\0), 1);
	lamp = vocab(DECR(l,a,m,p,\0), 1);
	grate = vocab(DECR(g,r,a,t,e), 1);
	cage  = vocab(DECR(c,a,g,e,\0),1);
	rod   = vocab(DECR(r,o,d,\0,\0),1);
	rod2=rod+1;
	steps=vocab(DECR(s,t,e,p,s),1);
	bird  = vocab(DECR(b,i,r,d,\0),1);
	door  = vocab(DECR(d,o,o,r,\0),1);
	pillow= vocab(DECR(p,i,l,l,o), 1);
	snake = vocab(DECR(s,n,a,k,e), 1);
	fissur= vocab(DECR(f,i,s,s,u), 1);
	tablet= vocab(DECR(t,a,b,l,e), 1);
	clam  = vocab(DECR(c,l,a,m,\0),1);
	oyster= vocab(DECR(o,y,s,t,e), 1);
	magzin= vocab(DECR(m,a,g,a,z), 1);
	dwarf = vocab(DECR(d,w,a,r,f), 1);
	knife = vocab(DECR(k,n,i,f,e), 1);
	food  = vocab(DECR(f,o,o,d,\0),1);
	bottle= vocab(DECR(b,o,t,t,l), 1);
	water = vocab(DECR(w,a,t,e,r), 1);
	oil   = vocab(DECR(o,i,l,\0,\0),1);
	plant = vocab(DECR(p,l,a,n,t), 1);
	plant2=plant+1;
	axe   = vocab(DECR(a,x,e,\0,\0),1);
	mirror= vocab(DECR(m,i,r,r,o), 1);
	dragon= vocab(DECR(d,r,a,g,o), 1);
	chasm = vocab(DECR(c,h,a,s,m), 1);
	troll = vocab(DECR(t,r,o,l,l), 1);
	troll2=troll+1;
	bear  = vocab(DECR(b,e,a,r,\0),1);
	messag= vocab(DECR(m,e,s,s,a), 1);
	vend  = vocab(DECR(v,e,n,d,i), 1);
	batter= vocab(DECR(b,a,t,t,e), 1);

	nugget= vocab(DECR(g,o,l,d,\0),1);
	coins = vocab(DECR(c,o,i,n,s), 1);
	chest = vocab(DECR(c,h,e,s,t), 1);
	eggs  = vocab(DECR(e,g,g,s,\0),1);
	tridnt= vocab(DECR(t,r,i,d,e), 1);
	vase  = vocab(DECR(v,a,s,e,\0),1);
	emrald= vocab(DECR(e,m,e,r,a), 1);
	pyram = vocab(DECR(p,y,r,a,m), 1);
	pearl = vocab(DECR(p,e,a,r,l), 1);
	rug   = vocab(DECR(r,u,g,\0,\0),1);
	chain = vocab(DECR(c,h,a,i,n), 1);

	back  = vocab(DECR(b,a,c,k,\0),0);
	look  = vocab(DECR(l,o,o,k,\0),0);
	cave  = vocab(DECR(c,a,v,e,\0),0);
	null  = vocab(DECR(n,u,l,l,\0),0);
	entrnc= vocab(DECR(e,n,t,r,a), 0);
	dprssn= vocab(DECR(d,e,p,r,e), 0);
	enter = vocab(DECR(e,n,t,e,r), 0);

	pour  = vocab(DECR(p,o,u,r,\0), 2);
	say   = vocab(DECR(s,a,y,\0,\0),2);
	lock  = vocab(DECR(l,o,c,k,\0),2);
	throw = vocab(DECR(t,h,r,o,w), 2);
	find  = vocab(DECR(f,i,n,d,\0),2);
	invent= vocab(DECR(i,n,v,e,n), 2);
d186 12
a197 12
	chloc=114;
	chloc2=140;
	for (i=1; i<=6; i++)
		dseen[i]=FALSE;
	dflag=0;
	dloc[1]=19;
	dloc[2]=27;
	dloc[3]=33;
	dloc[4]=44;
	dloc[5]=64;
	dloc[6]=chloc;
	daltlc=18;
d200 14
a213 13
	turns=0;
	lmwarn=FALSE;
	iwest=0;
	knfloc=0;
	detail=0;
	abbnum=5;
	for (i=0; i<=4; i++)
		if (rtext[2*i+81].seekadr!=0) maxdie=i+1;
	numdie=holdng=dkill=foobar=bonus=0;
	clock1=30;
	clock2=50;
	saved=0;
	closng=panic=closed=scorng=FALSE;
d217 6
a222 4

trapdel()				/* come here if he hits a del	*/
{	delhit++;			/* main checks, treats as QUIT  */
	signal(SIGINT,trapdel);		/* catch subsequent DELs	*/
d226 1
d229 2
a230 4
	time_t time();

	demo=Start(0);
	srand((int)(time((time_t *)NULL)));	/* random seed */
d232 2
a233 2
	hinted[3]=yes(65,1,0);
	newloc=1;
d235 3
a237 2
	limit=330;
	if (hinted[3]) limit=1000;      /* better batteries if instrucs */
@


1.4
log
@pull signal.h
@
text
@d49 1
a49 1
/*      Re-coding of advent in C: data initialization                   */
d62 2
a63 2
init(command)                           /* everything for 1st time run  */
char *command;                          /* command we were called with  */
d65 1
a65 1
	rdata();                        /* read data from orig. file    */
d84 1
a84 1
linkdata()                              /*  secondary data manipulation */
d87 1
a87 1
	/*      array linkages          */
d205 1
a205 1
trapdel()                               /* come here if he hits a del   */
d207 1
a207 1
	signal(SIGINT,trapdel);		/* catch subsequent DELs        */
@


1.3
log
@fixed the "/* in comments" problem.
@
text
@d1 1
a1 1
/*	$NetBSD: init.c,v 1.3 1996/05/21 10:48:09 mrg Exp $	*/
d45 1
a45 1
static char rcsid[] = "$NetBSD: init.c,v 1.3 1996/05/21 10:48:09 mrg Exp $";
d52 1
a52 1
#include <sys/signal.h>
@


1.2
log
@sync 0521
@
text
@d217 1
a217 1
	/* srand(371);				/* non-random seed */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: init.c,v 1.2 1995/03/21 12:05:04 cgd Exp $	*/
d45 1
a45 1
static char rcsid[] = "$NetBSD: init.c,v 1.2 1995/03/21 12:05:04 cgd Exp $";
d52 1
d207 1
a207 1
	signal(2,trapdel);		/* catch subsequent DELs        */
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
