head	1.11;
access;
symbols
	OPENBSD_6_2:1.11.0.6
	OPENBSD_6_2_BASE:1.11
	OPENBSD_6_1:1.11.0.8
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.9.0.26
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.18
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.22
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.20
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.16
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.14
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.12
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.10
	OPENBSD_5_0:1.9.0.8
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.28
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.24
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.22
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.20
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.18
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.16
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.14
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.8.0.12
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.10
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.8
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.8
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.6
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.4
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2016.01.09.18.33.15;	author mestre;	state Exp;
branches;
next	1.10;
commitid	cGEyAVlKS2f51J9L;

1.10
date	2015.10.24.18.49.39;	author mmcc;	state Exp;
branches;
next	1.9;
commitid	YZVlelOtyVtAENd3;

1.9
date	2009.10.27.23.59.25;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.19.06.30.56;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.07.09.48.57;	author tdeval;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.06.18.50.37;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.16.21.22.36;	author camield;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.28.23.41.45;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.04.20.40.50;	author todd;	state Exp;
branches;
next	1.2;

1.2
date	97.01.17.07.11.23;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.01;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.01;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@This diff is rather large, but it's just simply removing unnecessary headers
, remove some lint-style comments, add missing void to functions without args,
also some function prototypes (extern) were missing their args, so I added them
as they were defined in hack.h

OK tb@@ on separate diffs
@
text
@/*	$OpenBSD: hack.objnam.c,v 1.10 2015/10/24 18:49:39 mmcc Exp $	*/

/*
 * Copyright (c) 1985, Stichting Centrum voor Wiskunde en Informatica,
 * Amsterdam
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * - Neither the name of the Stichting Centrum voor Wiskunde en
 * Informatica, nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior
 * written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1982 Jay Fenlason <hack@@gnu.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>

#include "hack.h"

#define	PREFIX	15
extern int bases[];

static char bufr[BUFSZ];

static char *sitoa(int);

char *
strprepend(char *s, char *pref)
{
	int i = strlen(pref);

	if(i > PREFIX) {
		pline("WARNING: prefix too short.");
		return(s);
	}
	s -= i;
	(void) strncpy(s, pref, i);	/* do not copy trailing 0 */
	return(s);
}

static char *
sitoa(int a)
{
	static char buf[13];

	snprintf(buf, sizeof buf, (a < 0) ? "%d" : "+%d", a);
	return(buf);
}

char *
typename(int otyp)
{
	static char buf[BUFSZ];
	struct objclass *ocl = &objects[otyp];
	char *an = ocl->oc_name;
	char *dn = ocl->oc_descr;
	char *un = ocl->oc_uname;
	char *bp;
	int nn = ocl->oc_name_known;

	switch(ocl->oc_olet) {
	case POTION_SYM:
		strlcpy(buf, "potion", sizeof buf);
		break;
	case SCROLL_SYM:
		strlcpy(buf, "scroll", sizeof buf);
		break;
	case WAND_SYM:
		strlcpy(buf, "wand", sizeof buf);
		break;
	case RING_SYM:
		strlcpy(buf, "ring", sizeof buf);
		break;
	default:
		if(nn) {
			strlcpy(buf, an, sizeof buf);
			if(otyp >= TURQUOISE && otyp <= JADE)
				strlcat(buf, " stone", sizeof buf);
			if(un) {
				bp = eos(buf);
				snprintf(bp, buf + sizeof buf - bp,
				    " called %s", un);
			}
			if(dn) {
				bp = eos(buf);
				snprintf(bp, buf + sizeof buf - bp,
				    " (%s)", dn);
			}
		} else {
			strlcpy(buf, dn ? dn : an, sizeof buf);
			if(ocl->oc_olet == GEM_SYM)
				strlcat(buf, " gem", sizeof buf);
			if(un) {
				bp = eos(buf);
				snprintf(bp, buf + sizeof buf - bp,
				    " called %s", un);
			}
		}
		return(buf);
	}
	/* here for ring/scroll/potion/wand */
	if(nn) {
		bp = eos(buf);
		snprintf(bp, buf + sizeof buf - bp, " of %s", an);
	}
	if(un) {
		bp = eos(buf);
		snprintf(bp, buf + sizeof buf - bp, " called %s", un);
	}
	if(dn) {
		bp = eos(buf);
		snprintf(bp, buf + sizeof buf - bp, " (%s)", dn);
	}
	return(buf);
}

char *
xname(struct obj *obj)
{
	char *buf = &(bufr[PREFIX]);	/* leave room for "17 -3 " */
	int nn = objects[obj->otyp].oc_name_known;
	char *an = objects[obj->otyp].oc_name;
	char *dn = objects[obj->otyp].oc_descr;
	char *un = objects[obj->otyp].oc_uname;
	int pl = (obj->quan != 1);
	size_t len = bufr + sizeof bufr - buf;

	if(!obj->dknown && !Blind) obj->dknown = 1; /* %% doesn't belong here */
	switch(obj->olet) {
	case AMULET_SYM:
		strlcpy(buf, (obj->spe < 0 && obj->known)
			? "cheap plastic imitation of the " : "", len);
		strlcat(buf,"Amulet of Yendor", len);
		break;
	case TOOL_SYM:
		if(!nn) {
			strlcpy(buf, dn, len);
			break;
		}
		strlcpy(buf,an,len);
		break;
	case FOOD_SYM:
		if(obj->otyp == DEAD_HOMUNCULUS && pl) {
			pl = 0;
			strlcpy(buf, "dead homunculi", len);
			break;
		}
		/* fungis ? */
		/* fall into next case */
	case WEAPON_SYM:
		if(obj->otyp == WORM_TOOTH && pl) {
			pl = 0;
			strlcpy(buf, "worm teeth", len);
			break;
		}
		if(obj->otyp == CRYSKNIFE && pl) {
			pl = 0;
			strlcpy(buf, "crysknives", len);
			break;
		}
		/* fall into next case */
	case ARMOR_SYM:
	case CHAIN_SYM:
	case ROCK_SYM:
		strlcpy(buf,an,len);
		break;
	case BALL_SYM:
		snprintf(buf, len, "%sheavy iron ball",
		  (obj->owt > objects[obj->otyp].oc_weight) ? "very " : "");
		break;
	case POTION_SYM:
		if(nn || un || !obj->dknown) {
			strlcpy(buf, "potion", len);
			if(pl) {
				pl = 0;
				strlcat(buf, "s", len);
			}
			if(!obj->dknown) break;
			if(un) {
				strlcat(buf, " called ", len);
				strlcat(buf, un, len);
			} else {
				strlcat(buf, " of ", len);
				strlcat(buf, an, len);
			}
		} else {
			strlcpy(buf, dn, len);
			strlcat(buf, " potion", len);
		}
		break;
	case SCROLL_SYM:
		strlcpy(buf, "scroll", len);
		if(pl) {
			pl = 0;
			strlcat(buf, "s", len);
		}
		if(!obj->dknown) break;
		if(nn) {
			strlcat(buf, " of ", len);
			strlcat(buf, an, len);
		} else if(un) {
			strlcat(buf, " called ", len);
			strlcat(buf, un, len);
		} else {
			strlcat(buf, " labeled ", len);
			strlcat(buf, dn, len);
		}
		break;
	case WAND_SYM:
		if(!obj->dknown)
			snprintf(buf, len, "wand");
		else if(nn)
			snprintf(buf, len, "wand of %s", an);
		else if(un)
			snprintf(buf, len, "wand called %s", un);
		else
			snprintf(buf, len, "%s wand", dn);
		break;
	case RING_SYM:
		if(!obj->dknown)
			snprintf(buf, len, "ring");
		else if(nn)
			snprintf(buf, len, "ring of %s", an);
		else if(un)
			snprintf(buf, len, "ring called %s", un);
		else
			snprintf(buf, len, "%s ring", dn);
		break;
	case GEM_SYM:
		if(!obj->dknown) {
			strlcpy(buf, "gem", len);
			break;
		}
		if(!nn) {
			snprintf(buf, len, "%s gem", dn);
			break;
		}
		strlcpy(buf, an, len);
		if(obj->otyp >= TURQUOISE && obj->otyp <= JADE)
			strlcat(buf, " stone", len);
		break;
	default:
		snprintf(buf,len,"glorkum %c (0%o) %u %d",
			obj->olet,obj->olet,obj->otyp,obj->spe);
	}
	if(pl) {
		char *p;

		for(p = buf; *p; p++) {
			if(!strncmp(" of ", p, 4)) {
				/* pieces of, cloves of, lumps of */
				int c1, c2 = 's';

				do {
					c1 = c2; c2 = *p; *p++ = c1;
				} while(c1);
				goto nopl;
			}
		}
		p = eos(buf)-1;
		if(*p == 's' || *p == 'z' || *p == 'x' ||
		    (*p == 'h' && p[-1] == 's'))
			strlcat(buf, "es", len);	/* boxes */
		else if(*p == 'y' && !strchr(vowels, p[-1]))
				/* rubies, zruties */
			strlcpy(p, "ies", bufr + sizeof bufr - p);
		else
			strlcat(buf, "s", len);
	}
nopl:
	if(obj->onamelth) {
		strlcat(buf, " named ", len);
		strlcat(buf, ONAME(obj), len);
	}
	return(buf);
}

char *
doname(struct obj *obj)
{
	char prefix[PREFIX];
	char *bp = xname(obj);
	char *p;

	if(obj->quan != 1)
		snprintf(prefix, sizeof prefix, "%u ", obj->quan);
	else
		strlcpy(prefix, "a ", sizeof prefix);
	switch(obj->olet) {
	case AMULET_SYM:
		if(strncmp(bp, "cheap ", 6))
			strlcpy(prefix, "the ", sizeof prefix);
		break;
	case ARMOR_SYM:
		if(obj->owornmask & W_ARMOR)
			strlcat(bp, " (being worn)", bufr + sizeof bufr - bp);
		/* fall into next case */
	case WEAPON_SYM:
		if(obj->known) {
			strlcat(prefix, sitoa(obj->spe), sizeof prefix);
			strlcat(prefix, " ", sizeof prefix);
		}
		break;
	case WAND_SYM:
		if(obj->known) {
			p = eos(bp);
			snprintf(p, bufr + sizeof bufr - p, " (%d)", obj->spe);
		}
		break;
	case RING_SYM:
		if(obj->owornmask & W_RINGR)
			strlcat(bp, " (on right hand)", bufr + sizeof bufr - bp);
		if(obj->owornmask & W_RINGL)
			strlcat(bp, " (on left hand)", bufr + sizeof bufr - bp);
		if(obj->known && (objects[obj->otyp].bits & SPEC)) {
			strlcat(prefix, sitoa(obj->spe), sizeof prefix);
			strlcat(prefix, " ", sizeof prefix);
		}
		break;
	}
	if(obj->owornmask & W_WEP)
		strlcat(bp, " (weapon in hand)", bufr + sizeof bufr - bp);
	if(obj->unpaid)
		strlcat(bp, " (unpaid)", bufr + sizeof bufr - bp);
	if(!strcmp(prefix, "a ") && strchr(vowels, *bp))
		strlcpy(prefix, "an ", sizeof prefix);
	bp = strprepend(bp, prefix);
	return(bp);
}

/* used only in hack.fight.c (thitu) */
void
setan(char *str, char *buf, size_t len)
{
	if(strchr(vowels,*str))
		snprintf(buf, len, "an %s", str);
	else
		snprintf(buf, len, "a %s", str);
}

char *
aobjnam(struct obj *otmp, char *verb)
{
	char *bp = xname(otmp);
	char prefix[PREFIX];

	if(otmp->quan != 1) {
		snprintf(prefix, sizeof prefix, "%u ", otmp->quan);
		bp = strprepend(bp, prefix);
	}

	if(verb) {
		/* verb is given in plural (i.e., without trailing s) */
		strlcat(bp, " ", bufr + sizeof bufr - bp);
		if(otmp->quan != 1)
			strlcat(bp, verb, bufr + sizeof bufr - bp);
		else if(!strcmp(verb, "are"))
			strlcat(bp, "is", bufr + sizeof bufr - bp);
		else {
			strlcat(bp, verb, bufr + sizeof bufr - bp);
			strlcat(bp, "s", bufr + sizeof bufr - bp);
		}
	}
	return(bp);
}

char *
Doname(struct obj *obj)
{
	char *s = doname(obj);

	if('a' <= *s && *s <= 'z') *s -= ('a' - 'A');
	return(s);
}

char *wrp[] = { "wand", "ring", "potion", "scroll", "gem" };
char wrpsym[] = { WAND_SYM, RING_SYM, POTION_SYM, SCROLL_SYM, GEM_SYM };

struct obj *
readobjnam(char *bp, size_t len)
{
	char *p, *cp = bp;
	int i;
	int cnt, spe, spesgn, typ, heavy;
	char let;
	char *un, *dn, *an;

/* int the = 0; char *oname = 0; */
	cnt = spe = spesgn = typ = heavy = 0;
	let = 0;
	an = dn = un = 0;
	for(p = cp; *p; p++)
		if('A' <= *p && *p <= 'Z') *p += 'a'-'A';
	if(!strncmp(cp, "the ", 4)){
/*		the = 1; */
		cp += 4;
	} else if(!strncmp(cp, "an ", 3)){
		cnt = 1;
		cp += 3;
	} else if(!strncmp(cp, "a ", 2)){
		cnt = 1;
		cp += 2;
	}
	if(!cnt && isdigit((unsigned char)*cp)){
		cnt = atoi(cp);
		while(isdigit((unsigned char)*cp)) cp++;
		while(*cp == ' ') cp++;
	}
	if(!cnt) cnt = 1;		/* %% what with "gems" etc. ? */

	if(*cp == '+' || *cp == '-'){
		spesgn = (*cp++ == '+') ? 1 : -1;
		spe = atoi(cp);
		while(isdigit((unsigned char)*cp)) cp++;
		while(*cp == ' ') cp++;
	} else {
		p = strrchr(cp, '(');
		if(p) {
			if(p > cp && p[-1] == ' ') p[-1] = 0;
			else *p = 0;
			p++;
			spe = atoi(p);
			while(isdigit((unsigned char)*p)) p++;
			if(strcmp(p, ")")) spe = 0;
			else spesgn = 1;
		}
	}
	/* now we have the actual name, as delivered by xname, say
		green potions called whisky
		scrolls labeled "QWERTY"
		egg
		dead zruties
		fortune cookies
		very heavy iron ball named hoei
		wand of wishing
		elven cloak
	*/
	for(p = cp; *p; p++) if(!strncmp(p, " named ", 7)) {
		*p = 0;
/*		oname = p+7; */
	}
	for(p = cp; *p; p++) if(!strncmp(p, " called ", 8)) {
		*p = 0;
		un = p+8;
	}
	for(p = cp; *p; p++) if(!strncmp(p, " labeled ", 9)) {
		*p = 0;
		dn = p+9;
	}

	/* first change to singular if necessary */
	if(cnt != 1) {
		/* find "cloves of garlic", "worthless pieces of blue glass" */
		for(p = cp; *p; p++) if(!strncmp(p, "s of ", 5)){
			while ((*p = p[1]))
				p++;
			goto sing;
		}
		/* remove -s or -es (boxes) or -ies (rubies, zruties) */
		p = eos(cp);
		if(p[-1] == 's') {
			if(p[-2] == 'e') {
				if(p[-3] == 'i') {
					if(!strcmp(p-7, "cookies"))
						goto mins;
					strlcpy(p-3, "y", bp + len - (p-3));
					goto sing;
				}

				/* note: cloves / knives from clove / knife */
				if(!strcmp(p-6, "knives")) {
					strlcpy(p-3, "fe", bp + len - (p-3));
					goto sing;
				}

				/* note: nurses, axes but boxes */
				if(!strcmp(p-5, "boxes")) {
					p[-2] = 0;
					goto sing;
				}
			}
		mins:
			p[-1] = 0;
		} else {
			if(!strcmp(p-9, "homunculi")) {
				strlcpy(p-1, "us", bp + len - (p-1));
				goto sing;
			}
			if(!strcmp(p-5, "teeth")) {
				strlcpy(p-5, "tooth", bp + len - (p-5));
				goto sing;
			}
			/* here we cannot find the plural suffix */
		}
	}
sing:
	if(!strcmp(cp, "amulet of yendor")) {
		typ = AMULET_OF_YENDOR;
		goto typfnd;
	}
	p = eos(cp);
	if(!strcmp(p-5, " mail")){	/* Note: ring mail is not a ring ! */
		let = ARMOR_SYM;
		an = cp;
		goto srch;
	}
	for(i = 0; i < sizeof(wrpsym); i++) {
		int j = strlen(wrp[i]);
		if(!strncmp(cp, wrp[i], j)){
			let = wrpsym[i];
			cp += j;
			if(!strncmp(cp, " of ", 4)) an = cp+4;
			/* else if(*cp) ?? */
			goto srch;
		}
		if(!strcmp(p-j, wrp[i])){
			let = wrpsym[i];
			p -= j;
			*p = 0;
			if(p[-1] == ' ') p[-1] = 0;
			dn = cp;
			goto srch;
		}
	}
	if(!strcmp(p-6, " stone")){
		p[-6] = 0;
		let = GEM_SYM;
		an = cp;
		goto srch;
	}
	if(!strcmp(cp, "very heavy iron ball")){
		heavy = 1;
		typ = HEAVY_IRON_BALL;
		goto typfnd;
	}
	an = cp;
srch:
	if(!an && !dn && !un)
		goto any;
	i = 1;
	if(let) i = bases[letindex(let)];
	while(i <= NROFOBJECTS && (!let || objects[i].oc_olet == let)){
		char *zn = objects[i].oc_name;

		if(!zn) goto nxti;
		if(an && strcmp(an, zn))
			goto nxti;
		if(dn && (!(zn = objects[i].oc_descr) || strcmp(dn, zn)))
			goto nxti;
		if(un && (!(zn = objects[i].oc_uname) || strcmp(un, zn)))
			goto nxti;
		typ = i;
		goto typfnd;
	nxti:
		i++;
	}
any:
	if(!let) let = wrpsym[rn2(sizeof(wrpsym))];
	typ = probtype(let);
typfnd:
	{ struct obj *otmp;
	  extern struct obj *mksobj();
	let = objects[typ].oc_olet;
	otmp = mksobj(typ);
	if(heavy)
		otmp->owt += 15;
	if(cnt > 0 && strchr("%?!*)", let) &&
		(cnt < 4 || (let == WEAPON_SYM && typ <= ROCK && cnt < 20)))
		otmp->quan = cnt;

	if(spe > 3 && spe > otmp->spe)
		spe = 0;
	else if(let == WAND_SYM)
		spe = otmp->spe;
	if(spe == 3 && u.uluck < 0)
		spesgn = -1;
	if(let != WAND_SYM && spesgn == -1)
		spe = -spe;
	if(let == BALL_SYM)
		spe = 0;
	else if(let == AMULET_SYM)
		spe = -1;
	else if(typ == WAN_WISHING && rn2(10))
		spe = (rn2(10) ? -1 : 0);
	otmp->spe = spe;

	if(spesgn == -1)
		otmp->cursed = 1;

	return(otmp);
    }
}
@


1.10
log
@Cast ctype functions' argument to unsigned char.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.objnam.c,v 1.9 2009/10/27 23:59:25 deraadt Exp $	*/
d64 6
a69 4
#include	<ctype.h>
#include	<stdio.h>
#include	<stdlib.h>
#include	"hack.h"
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.objnam.c,v 1.8 2003/05/19 06:30:56 pjanzen Exp $	*/
d452 1
a452 1
	if(!cnt && isdigit(*cp)){
d454 1
a454 1
		while(isdigit(*cp)) cp++;
d462 1
a462 1
		while(isdigit(*cp)) cp++;
d471 1
a471 1
			while(isdigit(*p)) p++;
@


1.8
log
@De-register, ANSIfy, clean up.
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.objnam.c,v 1.7 2003/05/07 09:48:57 tdeval Exp $	*/
a62 4

#ifndef lint
static const char rcsid[] = "$OpenBSD$";
#endif /* not lint */
@


1.7
log
@Major strings rework.  Ok pjanzen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.objnam.c,v 1.6 2003/04/06 18:50:37 deraadt Exp $	*/
d65 1
a65 1
static char rcsid[] = "$OpenBSD: hack.objnam.c,v 1.6 2003/04/06 18:50:37 deraadt Exp $";
d68 3
a72 1
extern char *eos();
d77 2
d80 4
a83 2
strprepend(s,pref) register char *s, *pref; {
register int i = strlen(pref);
d93 5
a97 3
char *
sitoa(a) int a; {
static char buf[13];
d103 1
a103 2
typename(otyp)
register int otyp;
d105 8
a112 7
static char buf[BUFSZ];
register struct objclass *ocl = &objects[otyp];
register char *an = ocl->oc_name;
register char *dn = ocl->oc_descr;
register char *un = ocl->oc_uname;
register char *bp;
register int nn = ocl->oc_name_known;
d170 1
a170 2
xname(obj)
register struct obj *obj;
d172 8
a179 7
register char *buf = &(bufr[PREFIX]);	/* leave room for "17 -3 " */
register int nn = objects[obj->otyp].oc_name_known;
register char *an = objects[obj->otyp].oc_name;
register char *dn = objects[obj->otyp].oc_descr;
register char *un = objects[obj->otyp].oc_uname;
register int pl = (obj->quan != 1);
size_t len = bufr + sizeof bufr - buf;
d299 1
a299 1
		register char *p;
d304 1
a304 1
				register int c1, c2 = 's';
d331 1
a331 2
doname(obj)
register struct obj *obj;
d333 4
a336 3
char prefix[PREFIX];
register char *bp = xname(obj);
register char *p;
d384 2
a385 3
setan(str,buf,len)
register char *str,*buf;
register size_t len;
d394 5
a398 3
aobjnam(otmp,verb) register struct obj *otmp; register char *verb; {
register char *bp = xname(otmp);
char prefix[PREFIX];
d420 1
a420 2
Doname(obj)
register struct obj *obj;
d422 1
a422 1
	register char *s = doname(obj);
d432 1
a432 3
readobjnam(bp, len)
register char *bp;
register size_t len;
d434 6
a439 5
register char *p, *cp = bp;
register int i;
int cnt, spe, spesgn, typ, heavy;
char let;
char *un, *dn, *an;
d456 1
a456 1
	if(!cnt && digit(*cp)){
d458 1
a458 1
		while(digit(*cp)) cp++;
d466 1
a466 1
		while(digit(*cp)) cp++;
d475 1
a475 1
			while(digit(*p)) p++;
d507 2
a508 1
			while(*p = p[1]) p++;
d560 1
a560 1
		register int j = strlen(wrp[i]);
d595 1
a595 1
		register char *zn = objects[i].oc_name;
d613 1
a613 1
	{ register struct obj *otmp;
@


1.6
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.objnam.c,v 1.5 2003/03/16 21:22:36 camield Exp $	*/
d65 1
a65 1
static char rcsid[] = "$OpenBSD: hack.objnam.c,v 1.5 2003/03/16 21:22:36 camield Exp $";
d73 2
d103 1
d123 10
a132 4
			if(un)
				sprintf(eos(buf), " called %s", un);
			if(dn)
				sprintf(eos(buf), " (%s)", dn);
d137 5
a141 2
			if(un)
				sprintf(eos(buf), " called %s", un);
d146 12
a157 6
	if(nn)
		sprintf(eos(buf), " of %s", an);
	if(un)
		sprintf(eos(buf), " called %s", un);
	if(dn)
		sprintf(eos(buf), " (%s)", dn);
a164 1
static char bufr[BUFSZ];
d171 1
d175 3
a177 3
		strcpy(buf, (obj->spe < 0 && obj->known)
			? "cheap plastic imitation of the " : "");
		strcat(buf,"Amulet of Yendor");
d181 1
a181 1
			strcpy(buf, dn);
d184 1
a184 1
		strcpy(buf,an);
d189 1
a189 1
			strcpy(buf, "dead homunculi");
d197 1
a197 1
			strcpy(buf, "worm teeth");
d202 1
a202 1
			strcpy(buf, "crysknives");
d209 1
a209 1
		strcpy(buf,an);
d212 1
a212 1
		sprintf(buf, "%sheavy iron ball",
d217 1
a217 1
			strcpy(buf, "potion");
d220 1
a220 1
				strcat(buf, "s");
d224 2
a225 2
				strcat(buf, " called ");
				strcat(buf, un);
d227 2
a228 2
				strcat(buf, " of ");
				strcat(buf, an);
d231 2
a232 2
			strcpy(buf, dn);
			strcat(buf, " potion");
d236 1
a236 1
		strcpy(buf, "scroll");
d239 1
a239 1
			strcat(buf, "s");
d243 2
a244 2
			strcat(buf, " of ");
			strcat(buf, an);
d246 2
a247 2
			strcat(buf, " called ");
			strcat(buf, un);
d249 2
a250 2
			strcat(buf, " labeled ");
			strcat(buf, dn);
d255 1
a255 1
			sprintf(buf, "wand");
d257 1
a257 1
			sprintf(buf, "wand of %s", an);
d259 1
a259 1
			sprintf(buf, "wand called %s", un);
d261 1
a261 1
			sprintf(buf, "%s wand", dn);
d265 1
a265 1
			sprintf(buf, "ring");
d267 1
a267 1
			sprintf(buf, "ring of %s", an);
d269 1
a269 1
			sprintf(buf, "ring called %s", un);
d271 1
a271 1
			sprintf(buf, "%s ring", dn);
d275 1
a275 1
			strcpy(buf, "gem");
d279 1
a279 1
			sprintf(buf, "%s gem", dn);
d282 1
a282 1
		strcpy(buf, an);
d284 1
a284 1
			strcat(buf, " stone");
d287 1
a287 1
		sprintf(buf,"glorkum %c (0%o) %u %d",
d307 1
a307 1
			strcat(buf, "es");	/* boxes */
d309 2
a310 1
			strcpy(p, "ies");	/* rubies, zruties */
d312 1
a312 1
			strcat(buf, "s");
d316 2
a317 2
		strcat(buf, " named ");
		strcat(buf, ONAME(obj));
d328 1
d340 1
a340 1
			strcat(bp, " (being worn)");
d349 4
a352 2
		if(obj->known)
			sprintf(eos(bp), " (%d)", obj->spe);
d355 4
a358 2
		if(obj->owornmask & W_RINGR) strcat(bp, " (on right hand)");
		if(obj->owornmask & W_RINGL) strcat(bp, " (on left hand)");
d366 1
a366 1
		strcat(bp, " (weapon in hand)");
d368 1
a368 1
		strcat(bp, " (unpaid)");
d376 1
a376 1
setan(str,buf)
d378 1
d381 1
a381 1
		sprintf(buf, "an %s", str);
d383 1
a383 1
		sprintf(buf, "a %s", str);
d397 1
a397 1
		strcat(bp, " ");
d399 1
a399 1
			strcat(bp, verb);
d401 1
a401 1
			strcat(bp, "is");
d403 2
a404 2
			strcat(bp, verb);
			strcat(bp, "s");
d424 5
a428 2
readobjnam(bp) register char *bp; {
register char *p;
d437 1
a437 1
	for(p = bp; *p; p++)
d439 1
a439 1
	if(!strncmp(bp, "the ", 4)){
d441 2
a442 2
		bp += 4;
	} else if(!strncmp(bp, "an ", 3)){
d444 2
a445 2
		bp += 3;
	} else if(!strncmp(bp, "a ", 2)){
d447 1
a447 1
		bp += 2;
d449 4
a452 4
	if(!cnt && digit(*bp)){
		cnt = atoi(bp);
		while(digit(*bp)) bp++;
		while(*bp == ' ') bp++;
d456 5
a460 5
	if(*bp == '+' || *bp == '-'){
		spesgn = (*bp++ == '+') ? 1 : -1;
		spe = atoi(bp);
		while(digit(*bp)) bp++;
		while(*bp == ' ') bp++;
d462 1
a462 1
		p = strrchr(bp, '(');
d464 1
a464 1
			if(p > bp && p[-1] == ' ') p[-1] = 0;
d483 1
a483 1
	for(p = bp; *p; p++) if(!strncmp(p, " named ", 7)) {
d487 1
a487 1
	for(p = bp; *p; p++) if(!strncmp(p, " called ", 8)) {
d491 1
a491 1
	for(p = bp; *p; p++) if(!strncmp(p, " labeled ", 9)) {
d499 1
a499 1
		for(p = bp; *p; p++) if(!strncmp(p, "s of ", 5)){
d504 1
a504 1
		p = eos(bp);
d510 1
a510 1
					strcpy(p-3, "y");
d516 1
a516 1
					strcpy(p-3, "fe");
d530 1
a530 1
				strcpy(p-1, "us"); /* !! makes string longer */
d534 1
a534 1
				strcpy(p-5, "tooth");
d541 1
a541 1
	if(!strcmp(bp, "amulet of yendor")) {
d545 1
a545 1
	p = eos(bp);
d548 1
a548 1
		an = bp;
d553 1
a553 1
		if(!strncmp(bp, wrp[i], j)){
d555 3
a557 3
			bp += j;
			if(!strncmp(bp, " of ", 4)) an = bp+4;
			/* else if(*bp) ?? */
d565 1
a565 1
			dn = bp;
d572 1
a572 1
		an = bp;
d575 1
a575 1
	if(!strcmp(bp, "very heavy iron ball")){
d580 1
a580 1
	an = bp;
@


1.5
log
@hack is free

Thanks to Andries Brouwer, Jay Fenlason and the folks at CWI for their
efforts.

http://www.cwi.nl/~aeb/games/hack/hack.html

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.objnam.c,v 1.4 2001/01/28 23:41:45 niklas Exp $	*/
d65 1
a65 1
static char rcsid[] = "$OpenBSD: hack.objnam.c,v 1.4 2001/01/28 23:41:45 niklas Exp $";
a68 3
#define Sprintf (void) sprintf
#define Strcat  (void) strcat
#define	Strcpy	(void) strcpy
d88 1
a88 1
	Sprintf(buf, (a < 0) ? "%d" : "+%d", a);
d104 1
a104 1
		Strcpy(buf, "potion");
d107 1
a107 1
		Strcpy(buf, "scroll");
d110 1
a110 1
		Strcpy(buf, "wand");
d113 1
a113 1
		Strcpy(buf, "ring");
d117 1
a117 1
			Strcpy(buf, an);
d119 1
a119 1
				Strcat(buf, " stone");
d121 1
a121 1
				Sprintf(eos(buf), " called %s", un);
d123 1
a123 1
				Sprintf(eos(buf), " (%s)", dn);
d125 1
a125 1
			Strcpy(buf, dn ? dn : an);
d127 1
a127 1
				Strcat(buf, " gem");
d129 1
a129 1
				Sprintf(eos(buf), " called %s", un);
d135 1
a135 1
		Sprintf(eos(buf), " of %s", an);
d137 1
a137 1
		Sprintf(eos(buf), " called %s", un);
d139 1
a139 1
		Sprintf(eos(buf), " (%s)", dn);
d157 1
a157 1
		Strcpy(buf, (obj->spe < 0 && obj->known)
d159 1
a159 1
		Strcat(buf,"Amulet of Yendor");
d163 1
a163 1
			Strcpy(buf, dn);
d166 1
a166 1
		Strcpy(buf,an);
d171 1
a171 1
			Strcpy(buf, "dead homunculi");
d179 1
a179 1
			Strcpy(buf, "worm teeth");
d184 1
a184 1
			Strcpy(buf, "crysknives");
d191 1
a191 1
		Strcpy(buf,an);
d194 1
a194 1
		Sprintf(buf, "%sheavy iron ball",
d199 1
a199 1
			Strcpy(buf, "potion");
d202 1
a202 1
				Strcat(buf, "s");
d206 2
a207 2
				Strcat(buf, " called ");
				Strcat(buf, un);
d209 2
a210 2
				Strcat(buf, " of ");
				Strcat(buf, an);
d213 2
a214 2
			Strcpy(buf, dn);
			Strcat(buf, " potion");
d218 1
a218 1
		Strcpy(buf, "scroll");
d221 1
a221 1
			Strcat(buf, "s");
d225 2
a226 2
			Strcat(buf, " of ");
			Strcat(buf, an);
d228 2
a229 2
			Strcat(buf, " called ");
			Strcat(buf, un);
d231 2
a232 2
			Strcat(buf, " labeled ");
			Strcat(buf, dn);
d237 1
a237 1
			Sprintf(buf, "wand");
d239 1
a239 1
			Sprintf(buf, "wand of %s", an);
d241 1
a241 1
			Sprintf(buf, "wand called %s", un);
d243 1
a243 1
			Sprintf(buf, "%s wand", dn);
d247 1
a247 1
			Sprintf(buf, "ring");
d249 1
a249 1
			Sprintf(buf, "ring of %s", an);
d251 1
a251 1
			Sprintf(buf, "ring called %s", un);
d253 1
a253 1
			Sprintf(buf, "%s ring", dn);
d257 1
a257 1
			Strcpy(buf, "gem");
d261 1
a261 1
			Sprintf(buf, "%s gem", dn);
d264 1
a264 1
		Strcpy(buf, an);
d266 1
a266 1
			Strcat(buf, " stone");
d269 1
a269 1
		Sprintf(buf,"glorkum %c (0%o) %u %d",
d289 1
a289 1
			Strcat(buf, "es");	/* boxes */
d291 1
a291 1
			Strcpy(p, "ies");	/* rubies, zruties */
d293 1
a293 1
			Strcat(buf, "s");
d297 2
a298 2
		Strcat(buf, " named ");
		Strcat(buf, ONAME(obj));
d310 1
a310 1
		Sprintf(prefix, "%u ", obj->quan);
d312 1
a312 1
		Strcpy(prefix, "a ");
d316 1
a316 1
			Strcpy(prefix, "the ");
d320 1
a320 1
			Strcat(bp, " (being worn)");
d324 2
a325 2
			Strcat(prefix, sitoa(obj->spe));
			Strcat(prefix, " ");
d330 1
a330 1
			Sprintf(eos(bp), " (%d)", obj->spe);
d333 2
a334 2
		if(obj->owornmask & W_RINGR) Strcat(bp, " (on right hand)");
		if(obj->owornmask & W_RINGL) Strcat(bp, " (on left hand)");
d336 2
a337 2
			Strcat(prefix, sitoa(obj->spe));
			Strcat(prefix, " ");
d342 1
a342 1
		Strcat(bp, " (weapon in hand)");
d344 1
a344 1
		Strcat(bp, " (unpaid)");
d346 1
a346 1
		Strcpy(prefix, "an ");
d356 1
a356 1
		Sprintf(buf, "an %s", str);
d358 1
a358 1
		Sprintf(buf, "a %s", str);
d366 1
a366 1
		Sprintf(prefix, "%u ", otmp->quan);
d372 1
a372 1
		Strcat(bp, " ");
d374 1
a374 1
			Strcat(bp, verb);
d376 1
a376 1
			Strcat(bp, "is");
d378 2
a379 2
			Strcat(bp, verb);
			Strcat(bp, "s");
d482 1
a482 1
					Strcpy(p-3, "y");
d488 1
a488 1
					Strcpy(p-3, "fe");
d502 1
a502 1
				Strcpy(p-1, "us"); /* !! makes string longer */
d506 1
a506 1
				Strcpy(p-5, "tooth");
@


1.4
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d4 58
a61 1
 * Copyright (c) Stichting Mathematisch Centrum, Amsterdam, 1985.
d65 1
a65 1
static char rcsid[] = "$OpenBSD: hack.objnam.c,v 1.3 1995/03/23 08:31:10 cgd Exp $";
@


1.3
log
@comment grammar
@
text
@d1 2
d8 1
a8 1
static char rcsid[] = "$NetBSD: hack.objnam.c,v 1.3 1995/03/23 08:31:10 cgd Exp $";
@


1.2
log
@r?index -> strr?chr
@
text
@d98 1
a98 1
	if(!obj->dknown && !Blind) obj->dknown = 1; /* %% doesnt belong here */
@


1.1
log
@Initial revision
@
text
@d234 1
a234 1
		else if(*p == 'y' && !index(vowels, p[-1]))
d289 1
a289 1
	if(!strcmp(prefix, "a ") && index(vowels, *bp))
d299 1
a299 1
	if(index(vowels,*str))
d378 1
a378 1
		p = rindex(bp, '(');
d527 1
a527 1
	if(cnt > 0 && index("%?!*)", let) &&
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
