head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.10
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.9.0.8
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.7.0.26
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.18
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.22
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.20
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.16
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.14
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.12
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.10
	OPENBSD_5_0:1.7.0.8
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.6
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.28
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.24
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.22
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.20
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.18
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.16
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.14
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2016.01.09.18.33.15;	author mestre;	state Exp;
branches;
next	1.8;
commitid	cGEyAVlKS2f51J9L;

1.8
date	2015.10.24.18.26.13;	author mmcc;	state Exp;
branches;
next	1.7;
commitid	sNqoeOxu3kMCC7lD;

1.7
date	2009.10.27.23.59.25;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.19.06.30.56;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.16.21.22.35;	author camield;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.06.22.59.13;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.28.23.41.43;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	97.01.17.07.11.01;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.59;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.59;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@This diff is rather large, but it's just simply removing unnecessary headers
, remove some lint-style comments, add missing void to functions without args,
also some function prototypes (extern) were missing their args, so I added them
as they were defined in hack.h

OK tb@@ on separate diffs
@
text
@/*	$OpenBSD: hack.cmd.c,v 1.8 2015/10/24 18:26:13 mmcc Exp $	*/

/*
 * Copyright (c) 1985, Stichting Centrum voor Wiskunde en Informatica,
 * Amsterdam
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * - Neither the name of the Stichting Centrum voor Wiskunde en
 * Informatica, nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior
 * written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1982 Jay Fenlason <hack@@gnu.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <ctype.h>

#include "def.func_tab.h"
#include "hack.h"

struct func_tab cmdlist[]={
	{ '\020', doredotopl },
	{ '\022', doredraw },
	{ '\024', dotele },
#ifdef SUSPEND
	{ '\032', dosuspend },
#endif /* SUSPEND */
	{ 'a', doapply },
/*	'A' : UNUSED */
/*	'b', 'B' : go sw */
	{ 'c', ddocall },
	{ 'C', do_mname },
	{ 'd', dodrop },
	{ 'D', doddrop },
	{ 'e', doeat },
	{ 'E', doengrave },
/*	'f', 'F' : multiple go (might become 'fight') */
/*	'g', 'G' : UNUSED */
/*	'h', 'H' : go west */
	{ 'I', dotypeinv },		/* Robert Viduya */
	{ 'i', ddoinv },
/*	'j', 'J', 'k', 'K', 'l', 'L', 'm', 'M', 'n', 'N' : move commands */
/*	'o', doopen,	*/
	{ 'O', doset },
	{ 'p', dopay },
	{ 'P', dowearring },
	{ 'q', dodrink },
	{ 'Q', done2 },
	{ 'r', doread },
	{ 'R', doremring },
	{ 's', dosearch },
	{ 'S', dosave },
	{ 't', dothrow },
	{ 'T', doremarm },
/*	'u', 'U' : go ne */
	{ 'v', doversion },
/*	'V' : UNUSED */
	{ 'w', dowield },
	{ 'W', doweararm },
/*	'x', 'X' : UNUSED */
/*	'y', 'Y' : go nw */
	{ 'z', dozap },
/*	'Z' : UNUSED */
	{ '<', doup },
	{ '>', dodown },
	{ '/', dowhatis },
	{ '?', dohelp },
#ifdef SHELL
	{ '!', dosh },
#endif /* SHELL */
	{ '.', donull },
	{ ' ', donull },
	{ ',', dopickup },
	{ ':', dolook },
	{ '^', doidtrap },
	{ '\\', dodiscovered },		/* Robert Viduya */
	{ WEAPON_SYM,  doprwep },
	{ ARMOR_SYM,  doprarm },
	{ RING_SYM,  doprring },
	{ '$', doprgold },
	{ '#', doextcmd },
	{ '\0', NULL }
};

struct ext_func_tab extcmdlist[] = {
	{ "dip", dodip },
	{ "pray", dopray },
	{ NULL, donull}
};

extern char quitchars[];

static char unctrl(char);

void
rhack(char *cmd)
{
	struct func_tab *tlist = cmdlist;
	boolean firsttime = FALSE;
	int res;

	if(!cmd) {
		firsttime = TRUE;
		flags.nopick = 0;
		cmd = parse();
	}
	if(!*cmd || (*cmd & 0377) == 0377 ||
	   (flags.no_rest_on_space && *cmd == ' ')){
		hackbell();
		flags.move = 0;
		return;		/* probably we just had an interrupt */
	}
	if(movecmd(*cmd)) {
	walk:
		if(multi) flags.mv = 1;
		domove();
		return;
	}
	if(movecmd(tolower((unsigned char)*cmd))) {
		flags.run = 1;
	rush:
		if(firsttime){
			if(!multi) multi = COLNO;
			u.last_str_turn = 0;
		}
		flags.mv = 1;
#ifdef QUEST
		if(flags.run >= 4) finddir();
		if(firsttime){
			u.ux0 = u.ux + u.dx;
			u.uy0 = u.uy + u.dy;
		}
#endif /* QUEST */
		domove();
		return;
	}
	if((*cmd == 'f' && movecmd(cmd[1])) || movecmd(unctrl(*cmd))) {
		flags.run = 2;
		goto rush;
	}
	if(*cmd == 'F' && movecmd(tolower((unsigned char)cmd[1]))) {
		flags.run = 3;
		goto rush;
	}
	if(*cmd == 'm' && movecmd(cmd[1])) {
		flags.run = 0;
		flags.nopick = 1;
		goto walk;
	}
	if(*cmd == 'M' && movecmd(tolower((unsigned char)cmd[1]))) {
		flags.run = 1;
		flags.nopick = 1;
		goto rush;
	}
#ifdef QUEST
	if(*cmd == cmd[1] && (*cmd == 'f' || *cmd == 'F')) {
		flags.run = 4;
		if(*cmd == 'F') flags.run += 2;
		if(cmd[2] == '-') flags.run += 1;
		goto rush;
	}
#endif /* QUEST */
	while(tlist->f_char) {
		if(*cmd == tlist->f_char){
			res = (*(tlist->f_funct))();
			if(!res) {
				flags.move = 0;
				multi = 0;
			}
			return;
		}
		tlist++;
	}
	{ char expcmd[10];
	  char *cp = expcmd;
	  while(*cmd && cp-expcmd < sizeof(expcmd)-2) {
		if(*cmd >= 040 && *cmd < 0177)
			*cp++ = *cmd++;
		else {
			*cp++ = '^';
			*cp++ = *cmd++ ^ 0100;
		}
	  }
	  *cp++ = 0;
	  pline("Unknown command '%s'.", expcmd);
	}
	multi = flags.move = 0;
}

int
doextcmd(void)	/* here after # - now read a full-word command */
{
	char buf[BUFSZ];
	struct ext_func_tab *efp = extcmdlist;

	pline("# ");
	getlin(buf);
	clrlin();
	if(buf[0] == '\033')
		return(0);
	while(efp->ef_txt) {
		if(!strcmp(efp->ef_txt, buf))
			return((*(efp->ef_funct))());
		efp++;
	}
	pline("%s: unknown command.", buf);
	return(0);
}

static char
unctrl(char sym)
{
    return( (sym >= ('A' & 037) && sym <= ('Z' & 037)) ? sym + 0140 : sym );
}

/* 'rogue'-like direction commands */
char sdir[] = "hykulnjb><";
schar xdir[10] = { -1,-1, 0, 1, 1, 1, 0,-1, 0, 0 };
schar ydir[10] = {  0,-1,-1,-1, 0, 1, 1, 1, 0, 0 };
schar zdir[10] = {  0, 0, 0, 0, 0, 0, 0, 0, 1,-1 };

int
movecmd(char sym)	/* also sets u.dz, but returns false for <> */
{
	char *dp;

	u.dz = 0;
	if(!(dp = strchr(sdir, sym))) return(0);
	u.dx = xdir[dp-sdir];
	u.dy = ydir[dp-sdir];
	u.dz = zdir[dp-sdir];
	return(!u.dz);
}

int
getdir(boolean s)
{
	char dirsym;

	if(s) pline("In what direction?");
	dirsym = readchar();
	if(!movecmd(dirsym) && !u.dz) {
		if(!strchr(quitchars, dirsym))
			pline("What a strange direction!");
		return(0);
	}
	if(Confusion && !u.dz)
		confdir();
	return(1);
}

void
confdir(void)
{
	int x = rn2(8);
	u.dx = xdir[x];
	u.dy = ydir[x];
}

#ifdef QUEST
void
finddir(void)
{
	int i, ui = u.di;

	for(i = 0; i <= 8; i++){
		if(flags.run & 1) ui++; else ui += 7;
		ui %= 8;
		if(i == 8){
			pline("Not near a wall.");
			flags.move = multi = 0;
			return;
		}
		if(!isroom(u.ux+xdir[ui], u.uy+ydir[ui]))
			break;
	}
	for(i = 0; i <= 8; i++){
		if(flags.run & 1) ui += 7; else ui++;
		ui %= 8;
		if(i == 8){
			pline("Not near a room.");
			flags.move = multi = 0;
			return;
		}
		if(isroom(u.ux+xdir[ui], u.uy+ydir[ui]))
			break;
	}
	u.di = ui;
	u.dx = xdir[ui];
	u.dy = ydir[ui];
}

int
isroom(int x, int y)
{		/* what about POOL? */
	return(isok(x,y) && (levl[x][y].typ == ROOM ||
				(levl[x][y].typ >= LDOOR && flags.run >= 6)));
}
#endif /* QUEST */

int
isok(int x, int y)
{
	/* x corresponds to curx, so x==1 is the first column. Ach. %% */
	return(x >= 1 && x <= COLNO-1 && y >= 0 && y <= ROWNO-1);
}
@


1.8
log
@Cast ctype functions' arguments to unsigned char.

ok guenther@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.cmd.c,v 1.7 2009/10/27 23:59:25 deraadt Exp $	*/
d64 4
a67 3
#include	"hack.h"
#include	"def.func_tab.h"
#include	<ctype.h>
d239 1
a239 1
doextcmd()	/* here after # - now read a full-word command */
d301 1
a301 1
confdir()
d310 1
a310 1
finddir()
@


1.7
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.cmd.c,v 1.6 2003/05/19 06:30:56 pjanzen Exp $	*/
d166 1
a166 1
	if(movecmd(tolower(*cmd))) {
d188 1
a188 1
	if(*cmd == 'F' && movecmd(tolower(cmd[1]))) {
d197 1
a197 1
	if(*cmd == 'M' && movecmd(tolower(cmd[1]))) {
@


1.6
log
@De-register, ANSIfy, clean up.
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.cmd.c,v 1.5 2003/03/16 21:22:35 camield Exp $	*/
a62 4

#ifndef lint
static const char rcsid[] = "$OpenBSD$";
#endif /* not lint */
@


1.5
log
@hack is free

Thanks to Andries Brouwer, Jay Fenlason and the folks at CWI for their
efforts.

http://www.cwi.nl/~aeb/games/hack/hack.html

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.cmd.c,v 1.4 2001/08/06 22:59:13 pjanzen Exp $	*/
d65 1
a65 1
static char rcsid[] = "$OpenBSD: hack.cmd.c,v 1.4 2001/08/06 22:59:13 pjanzen Exp $";
d70 1
a70 13

int doredraw(),doredotopl(),dodrop(),dodrink(),doread(),dosearch(),dopickup(),
doversion(),doweararm(),dowearring(),doremarm(),doremring(),dopay(),doapply(),
dosave(),dowield(),ddoinv(),dozap(),ddocall(),dowhatis(),doengrave(),dotele(),
dohelp(),doeat(),doddrop(),do_mname(),doidtrap(),doprwep(),doprarm(),
doprring(),doprgold(),dodiscovered(),dotypeinv(),dolook(),doset(),
doup(), dodown(), done1(), donull(), dothrow(), doextcmd(), dodip(), dopray();
#ifdef SHELL
int dosh();
#endif /* SHELL */
#ifdef SUSPEND
int dosuspend();
#endif /* SUSPEND */
d73 3
a75 3
	'\020', doredotopl,
	'\022', doredraw,
	'\024', dotele,
d77 1
a77 1
	'\032', dosuspend,
d79 1
a79 1
	'a', doapply,
d82 6
a87 6
	'c', ddocall,
	'C', do_mname,
	'd', dodrop,
	'D', doddrop,
	'e', doeat,
	'E', doengrave,
d91 2
a92 2
	'I', dotypeinv,		/* Robert Viduya */
	'i', ddoinv,
d95 11
a105 11
	'O', doset,
	'p', dopay,
	'P', dowearring,
	'q', dodrink,
	'Q', done1,
	'r', doread,
	'R', doremring,
	's', dosearch,
	'S', dosave,
	't', dothrow,
	'T', doremarm,
d107 1
a107 1
	'v', doversion,
d109 2
a110 2
	'w', dowield,
	'W', doweararm,
d113 1
a113 1
	'z', dozap,
d115 4
a118 4
	'<', doup,
	'>', dodown,
	'/', dowhatis,
	'?', dohelp,
d120 1
a120 1
	'!', dosh,
d122 12
a133 12
	'.', donull,
	' ', donull,
	',', dopickup,
	':', dolook,
	'^', doidtrap,
	'\\', dodiscovered,		/* Robert Viduya */
	 WEAPON_SYM,  doprwep,
	 ARMOR_SYM,  doprarm,
	 RING_SYM,  doprring,
	'$', doprgold,
	'#', doextcmd,
	0,0,0
d137 3
a139 3
	"dip", dodip,
	"pray", dopray,
	(char *) 0, donull
d142 3
a144 1
extern char *parse(), lowc(), unctrl(), quitchars[];
d146 2
a147 2
rhack(cmd)
register char *cmd;
d149 1
a149 1
	register struct func_tab *tlist = cmdlist;
d151 1
a151 1
	register res;
d160 1
a160 1
		bell();
d170 1
a170 1
	if(movecmd(lowc(*cmd))) {
d192 1
a192 1
	if(*cmd == 'F' && movecmd(lowc(cmd[1]))) {
d201 1
a201 1
	if(*cmd == 'M' && movecmd(lowc(cmd[1]))) {
d226 1
a226 1
	  register char *cp = expcmd;
d241 1
d245 1
a245 1
	register struct ext_func_tab *efp = extcmdlist;
d261 2
a262 10
char
lowc(sym)
char sym;
{
    return( (sym >= 'A' && sym <= 'Z') ? sym+'a'-'A' : sym );
}

char
unctrl(sym)
char sym;
d273 2
a274 2
movecmd(sym)	/* also sets u.dz, but returns false for <> */
char sym;
d276 1
a276 1
	register char *dp;
d286 2
a287 2
getdir(s)
boolean s;
d303 1
d306 1
a306 1
	register x = rn2(8);
d312 5
a316 2
finddir(){
register int i, ui = u.di;
d323 1
a323 1
			return(0);
d334 1
a334 1
			return(0);
d344 3
a346 1
isroom(x,y)  register x,y; {		/* what about POOL? */
d352 3
a354 1
isok(x,y) register x,y; {
@


1.4
log
@Nothing but comments after #endif and #else; heko@@iki.fi
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.cmd.c,v 1.3 2001/01/28 23:41:43 niklas Exp $	*/
d4 58
a61 1
 * Copyright (c) Stichting Mathematisch Centrum, Amsterdam, 1985.
d65 1
a65 1
static char rcsid[] = "$OpenBSD: hack.cmd.c,v 1.3 2001/01/28 23:41:43 niklas Exp $";
@


1.3
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d8 1
a8 1
static char rcsid[] = "$OpenBSD: hack.cmd.c,v 1.3 1995/03/23 08:29:52 cgd Exp $";
d22 1
a22 1
#endif SHELL
d25 1
a25 1
#endif SUSPEND
d33 1
a33 1
#endif SUSPEND
d76 1
a76 1
#endif SHELL
d137 1
a137 1
#endif QUEST
d166 1
a166 1
#endif QUEST
d304 1
a304 1
#endif QUEST
@


1.2
log
@r?index -> strr?chr
@
text
@d1 2
d8 1
a8 1
static char rcsid[] = "$NetBSD: hack.cmd.c,v 1.3 1995/03/23 08:29:52 cgd Exp $";
@


1.1
log
@Initial revision
@
text
@d237 1
a237 1
	if(!(dp = index(sdir, sym))) return(0);
d252 1
a252 1
		if(!index(quitchars, dirsym))
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
