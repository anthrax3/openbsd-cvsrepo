head	1.22;
access;
symbols
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.22.0.4
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.15.0.22
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.20
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.16
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.20
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.14.0.16
	OPENBSD_4_5_BASE:1.14
	OPENBSD_4_4:1.14.0.14
	OPENBSD_4_4_BASE:1.14
	OPENBSD_4_3:1.14.0.12
	OPENBSD_4_3_BASE:1.14
	OPENBSD_4_2:1.14.0.10
	OPENBSD_4_2_BASE:1.14
	OPENBSD_4_1:1.14.0.8
	OPENBSD_4_1_BASE:1.14
	OPENBSD_4_0:1.14.0.6
	OPENBSD_4_0_BASE:1.14
	OPENBSD_3_9:1.14.0.4
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.2
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.13.0.8
	OPENBSD_3_7_BASE:1.13
	OPENBSD_3_6:1.13.0.6
	OPENBSD_3_6_BASE:1.13
	OPENBSD_3_5:1.13.0.4
	OPENBSD_3_5_BASE:1.13
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	OPENBSD_3_1:1.7.0.6
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.4
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.6.0.6
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2016.01.09.21.54.11;	author mestre;	state Exp;
branches;
next	1.21;
commitid	ve4zhTqqRMMVn77Z;

1.21
date	2016.01.09.18.33.15;	author mestre;	state Exp;
branches;
next	1.20;
commitid	cGEyAVlKS2f51J9L;

1.20
date	2016.01.07.16.00.32;	author tb;	state Exp;
branches;
next	1.19;
commitid	IwzFE3fG5RnKTWNh;

1.19
date	2015.12.16.14.21.50;	author tb;	state Exp;
branches;
next	1.18;
commitid	47lKFCMHfkqci7HY;

1.18
date	2015.11.04.21.22.10;	author tedu;	state Exp;
branches;
next	1.17;
commitid	XDKIiXhFNs4jqYjv;

1.17
date	2015.09.27.05.13.11;	author guenther;	state Exp;
branches;
next	1.16;
commitid	XzWkIYKZztPpIW70;

1.16
date	2014.12.08.21.56.27;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	fyZyamgf42dtoHOi;

1.15
date	2009.10.27.23.59.25;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2005.05.01.02.43.12;	author djm;	state Exp;
branches;
next	1.13;

1.13
date	2003.07.06.02.07.45;	author avsm;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.19.06.30.56;	author pjanzen;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.07.09.48.57;	author tdeval;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.06.18.50.37;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2003.03.16.21.22.35;	author camield;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.23.03.01.13;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.28.23.41.44;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	99.08.16.17.00.15;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	97.03.28.18.56.20;	author tholo;	state Exp;
branches;
next	1.4;

1.4
date	97.01.17.07.11.14;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	96.12.22.20.01.20;	author deraadt;	state Exp;
branches;
next	1.2;

1.2
date	96.10.26.19.59.27;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.00;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.00;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.22
log
@Remove several casts to (char *) 0 and replace them by NULL

Prompted and OK by tb@@
@
text
@/*	$OpenBSD: hack.main.c,v 1.21 2016/01/09 18:33:15 mestre Exp $	*/

/*
 * Copyright (c) 1985, Stichting Centrum voor Wiskunde en Informatica,
 * Amsterdam
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * - Neither the name of the Stichting Centrum voor Wiskunde en
 * Informatica, nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior
 * written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Copyright (c) 1982 Jay Fenlason <hack@@gnu.org>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
 * THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/stat.h>

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

#include "hack.h"

#ifdef QUEST
#define	gamename	"quest"
#else
#define	gamename	"hack"
#endif

extern char plname[PL_NSIZ], pl_character[PL_CSIZ];
extern struct permonst mons[CMNUM+2];
extern char genocided[60], fut_geno[60];

void (*afternmv)(void);
int (*occupation)(void);
char *occtxt;			/* defined when occupation != NULL */

int hackpid;				/* current pid */
int locknum;				/* max num of players */
#ifdef DEF_PAGER
char *catmore;				/* default pager */
#endif
char SAVEF[PL_NSIZ + 11] = "save/";	/* save/99999player */
char obuf[BUFSIZ];	/* BUFSIZ is defined in stdio.h */

extern char *nomovemsg;
extern long wailmsg;

#ifdef CHDIR
static void chdirx(char *, boolean);
#endif

int
main(int argc, char **argv)
{
	extern char *__progname;
	int fd;
#ifdef CHDIR
	char *dir;
#endif

	hackpid = getpid();

#ifdef CHDIR			/* otherwise no chdir() */
	/*
	 * See if we must change directory to the playground.
	 * (Perhaps hack runs suid and playground is inaccessible
	 *  for the player.)
	 * The environment variable HACKDIR is overridden by a
	 *  -d command line option (must be the first option given)
	 */

	dir = getenv("HACKDIR");
	if(argc > 1 && !strncmp(argv[1], "-d", 2)) {
		argc--;
		argv++;
		dir = argv[0]+2;
		if(*dir == '=' || *dir == ':') dir++;
		if(!*dir && argc > 1) {
			argc--;
			argv++;
			dir = argv[0];
		}
		if(!*dir)
		    error("Flag -d must be followed by a directory name.");
	}
#endif

	/*
	 * Who am i? Algorithm: 1. Use name as specified in HACKOPTIONS
	 *			2. Use $LOGNAME or $USER	(if 1. fails)
	 *			3. Use getlogin()		(if 2. fails)
	 * The resulting name is overridden by command line options.
	 * If everything fails, or if the resulting name is some generic
	 * account like "games", "play", "player", "hack" then eventually
	 * we'll ask him.
	 * Note that we trust him here; it is possible to play under
	 * somebody else's name.
	 */
	{ char *s;

	  initoptions();
	  if(!*plname && (s = getenv("LOGNAME")))
		(void) strlcpy(plname, s, sizeof(plname));
	  if(!*plname && (s = getenv("USER")))
		(void) strlcpy(plname, s, sizeof(plname));
	  if(!*plname && (s = getlogin()))
		(void) strlcpy(plname, s, sizeof(plname));
	}

	/*
	 * Now we know the directory containing 'record' and
	 * may do a prscore().
	 */
	if(argc > 1 && !strncmp(argv[1], "-s", 2)) {
#ifdef CHDIR
		chdirx(dir,0);
#endif
		prscore(argc, argv);
		return 0;
	}

	/*
	 * It seems he really wants to play.
	 * Remember tty modes, to be restored on exit.
	 */
	gettty();
	setvbuf(stdout, obuf, _IOFBF, sizeof obuf);
	umask(007);
	startup();
	cls();
	u.uhp = 1;	/* prevent RIP on early quits */
	u.ux = FAR;	/* prevent nscr() */
	(void) signal(SIGHUP, hackhangup);

	/*
	 * Find the creation date of this game,
	 * so as to avoid restoring outdated savefiles.
	 */
	gethdate(__progname);

	/*
	 * We cannot do chdir earlier, otherwise gethdate will fail.
	 */
#ifdef CHDIR
	chdirx(dir,1);
#endif

	/*
	 * Process options.
	 */
	while(argc > 1 && argv[1][0] == '-'){
		argv++;
		argc--;
		switch(argv[0][1]){
#ifdef WIZARD
		case 'D':
/*			if(!strcmp(getlogin(), WIZARD)) */
				wizard = TRUE;
/*			else
				printf("Sorry.\n"); */
			break;
#endif
#ifdef NEWS
		case 'n':
			flags.nonews = TRUE;
			break;
#endif
		case 'u':
			if(argv[0][2]) {
			  (void) strlcpy(plname, argv[0]+2, sizeof(plname));
			} else if(argc > 1) {
			  argc--;
			  argv++;
			  (void) strlcpy(plname, argv[0], sizeof(plname));
			} else
				printf("Player name expected after -u\n");
			break;
		default:
			/* allow -T for Tourist, etc. */
			(void) strlcpy(pl_character, argv[0]+1, sizeof(pl_character));
			/* printf("Unknown option: %s\n", *argv); */
		}
	}

	if(argc > 1)
		locknum = atoi(argv[1]);
#ifdef MAX_NR_OF_PLAYERS
	if(!locknum || locknum > MAX_NR_OF_PLAYERS)
		locknum = MAX_NR_OF_PLAYERS;
#endif
#ifdef DEF_PAGER
	if(!(catmore = getenv("HACKPAGER")) && !(catmore = getenv("PAGER")))
		catmore = DEF_PAGER;
#endif
#ifdef MAIL
	getmailstatus();
#endif
#ifdef WIZARD
	if(wizard) (void) strlcpy(plname, "wizard", sizeof plname); else
#endif
	if(!*plname || !strncmp(plname, "player", 4)
		    || !strncmp(plname, "games", 4))
		askname();
	plnamesuffix();		/* strip suffix from name; calls askname() */
				/* again if suffix was whole name */
				/* accepts any suffix */
#ifdef WIZARD
	if(!wizard) {
#endif
		/*
		 * check for multiple games under the same name
		 * (if !locknum) or check max nr of players (otherwise)
		 */
		(void) signal(SIGQUIT,SIG_IGN);
		(void) signal(SIGINT,SIG_IGN);
		if(!locknum)
			(void) strlcpy(lock,plname,sizeof lock);
		getlock();	/* sets lock if locknum != 0 */
#ifdef WIZARD
	} else {
		char *sfoo;
		(void) strlcpy(lock,plname,sizeof lock);
		if ((sfoo = getenv("MAGIC")))
			while(*sfoo) {
				switch(*sfoo++) {
				case 'n': (void) srandom_deterministic(*sfoo++);
					break;
				}
			}
		if ((sfoo = getenv("GENOCIDED"))) {
			if(*sfoo == '!'){
				struct permonst *pm = mons;
				char *gp = genocided;

				while(pm < mons+CMNUM+2){
					if(!strchr(sfoo, pm->mlet))
						*gp++ = pm->mlet;
					pm++;
				}
				*gp = 0;
			} else
				strlcpy(genocided, sfoo, sizeof genocided);
			strlcpy(fut_geno, genocided, sizeof fut_geno);
		}
	}
#endif
	setftty();
	(void) snprintf(SAVEF, sizeof SAVEF, "save/%u%s", getuid(), plname);
	regularize(SAVEF+5);		/* avoid . or / in name */
	if((fd = open(SAVEF, O_RDONLY)) >= 0 &&
	   (uptodate(fd) || unlink(SAVEF) == 666)) {
		(void) signal(SIGINT,done1);
		pline("Restoring old save file...");
		(void) fflush(stdout);
		if(!dorecover(fd))
			goto not_recovered;
		pline("Hello %s, welcome to %s!", plname, gamename);
		flags.move = 0;
	} else {
not_recovered:
		fobj = fcobj = invent = 0;
		fmon = fallen_down = 0;
		ftrap = 0;
		fgold = 0;
		flags.ident = 1;
		init_objects();
		u_init();

		(void) signal(SIGINT,done1);
		mklev();
		u.ux = xupstair;
		u.uy = yupstair;
		(void) inshop();
		setsee();
		flags.botlx = 1;
		makedog();
		{ struct monst *mtmp;
		  if ((mtmp = m_at(u.ux, u.uy)))
			  mnexto(mtmp);	/* riv05!a3 */
		}
		seemons();
#ifdef NEWS
		if(flags.nonews || !readnews())
			/* after reading news we did docrt() already */
#endif
			docrt();

		/* give welcome message before pickup messages */
		pline("Hello %s, welcome to %s!", plname, gamename);

		pickup(1);
		read_engr_at(u.ux,u.uy);
		flags.move = 1;
	}

	flags.moonphase = phase_of_the_moon();
	if(flags.moonphase == FULL_MOON) {
		pline("You are lucky! Full moon tonight.");
		u.uluck++;
	} else if(flags.moonphase == NEW_MOON) {
		pline("Be careful! New moon tonight.");
	}

	initrack();

	for(;;) {
		if(flags.move) {	/* actual time passed */

			settrack();

			if(moves%2 == 0 ||
			  (!(Fast & ~INTRINSIC) && (!Fast || rn2(3)))) {
				extern struct monst *makemon();
				movemon();
				if(!rn2(70))
				    (void) makemon((struct permonst *)0, 0, 0);
			}
			if(Glib) glibr();
			hacktimeout();
			++moves;
			if(flags.time) flags.botl = 1;
			if(u.uhp < 1) {
				pline("You die...");
				done("died");
			}
			if(u.uhp*10 < u.uhpmax && moves-wailmsg > 50){
			    wailmsg = moves;
			    if(u.uhp == 1)
			    pline("You hear the wailing of the Banshee...");
			    else
			    pline("You hear the howling of the CwnAnnwn...");
			}
			if(u.uhp < u.uhpmax) {
				if(u.ulevel > 9) {
					if(Regeneration || !(moves%3)) {
					    flags.botl = 1;
					    u.uhp += rnd((int) u.ulevel-9);
					    if(u.uhp > u.uhpmax)
						u.uhp = u.uhpmax;
					}
				} else if(Regeneration ||
					(!(moves%(22-u.ulevel*2)))) {
					flags.botl = 1;
					u.uhp++;
				}
			}
			if(Teleportation && !rn2(85)) tele();
			if(Searching && multi >= 0) (void) dosearch();
			gethungry();
			invault();
			amulet();
		}
		if(multi < 0) {
			if(!++multi){
				pline("%s", nomovemsg ? nomovemsg :
					"You can move again.");
				nomovemsg = 0;
				if(afternmv) (*afternmv)();
				afternmv = 0;
			}
		}

		find_ac();
#ifndef QUEST
		if(!flags.mv || Blind)
#endif
		{
			seeobjs();
			seemons();
			nscr();
		}
		if(flags.botl || flags.botlx) bot();

		flags.move = 1;

		if(multi >= 0 && occupation) {
			if(monster_nearby())
				stop_occupation();
			else if ((*occupation)() == 0)
				occupation = 0;
			continue;
		}

		if(multi > 0) {
#ifdef QUEST
			if(flags.run >= 4) finddir();
#endif
			lookaround();
			if(!multi) {	/* lookaround may clear multi */
				flags.move = 0;
				continue;
			}
			if(flags.mv) {
				if(multi < COLNO && !--multi)
					flags.mv = flags.run = 0;
				domove();
			} else {
				--multi;
				rhack(save_cm);
			}
		} else if(multi == 0) {
#ifdef MAIL
			ckmailstatus();
#endif
			rhack(NULL);
		}
		if(multi && multi%7 == 0)
			(void) fflush(stdout);
	}
}

void
glo(int foo)
{
	/* construct the string  xlock.n  */
	char *tf;

	tf = lock;
	while(*tf && *tf != '.') tf++;
	(void) snprintf(tf, lock + sizeof lock - tf, ".%d", foo);
}

/*
 * plname is filled either by an option (-u Player  or  -uPlayer) or
 * explicitly (-w implies wizard) or by askname.
 * It may still contain a suffix denoting pl_character.
 */
void
askname(void)
{
	int c,ct;

	printf("\nWho are you? ");
	(void) fflush(stdout);
	ct = 0;
	while((c = getchar()) != '\n'){
		if(c == EOF) error("End of input\n");
		/* some people get confused when their erase char is not ^H */
		if(c == '\010') {
			if(ct) ct--;
			continue;
		}
		if(c != '-')
		if(c < 'A' || (c > 'Z' && c < 'a') || c > 'z') c = '_';
		if(ct < sizeof(plname)-1) plname[ct++] = c;
	}
	plname[ct] = 0;
	if(ct == 0) askname();
}

void
impossible(const char *s, ...)
{
	va_list ap;

	va_start(ap, s);
	vpline(s, ap);
	va_end(ap);
	pline("Program in disorder - perhaps you'd better Quit.");
}

#ifdef CHDIR
static void
chdirx(char *dir, boolean wr)
{
	gid_t gid;

#ifdef SECURE
	if(dir					/* User specified directory? */
#ifdef HACKDIR
	       && strcmp(dir, HACKDIR)		/* and not the default? */
#endif
		) {
		/* revoke privs */
		gid = getgid();
		setresgid(gid, gid, gid);
	}
#endif

#ifdef HACKDIR
	if(dir == NULL)
		dir = HACKDIR;
#endif

	if(dir && chdir(dir) < 0) {
		perror(dir);
		error("Cannot chdir to %s.", dir);
	}

	/* warn the player if he cannot write the record file */
	/* perhaps we should also test whether . is writable */
	/* unfortunately the access systemcall is worthless */
	if(wr) {
	    int fd;

	    if(dir == NULL)
		dir = ".";
	    if((fd = open(RECORD, O_RDWR)) < 0) {
		printf("Warning: cannot write %s/%s", dir, RECORD);
		getret();
	    } else
		(void) close(fd);
	}
}
#endif

void
stop_occupation(void)
{
	if(occupation) {
		pline("You stop %s.", occtxt);
		occupation = 0;
	}
}
@


1.21
log
@This diff is rather large, but it's just simply removing unnecessary headers
, remove some lint-style comments, add missing void to functions without args,
also some function prototypes (extern) were missing their args, so I added them
as they were defined in hack.h

OK tb@@ on separate diffs
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.20 2016/01/07 16:00:32 tb Exp $	*/
d455 1
a455 1
			rhack((char *) 0);
@


1.20
log
@Some basic code maintenance in games/

- in main() replace exit with return
- drop some /* NOTREACHED */ lint comments along the way.
- make more use of standard CFLAGS, esp. -Wimplicit-function-declaration
- add and sort some headers when needed
- add straightforward pledges to some programs used at compile time

discussed with and ok mestre@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.19 2015/12/16 14:21:50 tb Exp $	*/
a63 1
#include <sys/types.h>
d65 2
a67 2
#include <stdio.h>
#include <stdarg.h>
d70 1
d479 1
a479 1
askname()
d558 1
a558 1
stop_occupation()
@


1.19
log
@Use __progname instead of hand-rolled parsing of argv[0].
Inspired by similar diffs by tobias@@ and millert@@.

"I like the concept" pjanzen@@
ok tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.18 2015/11/04 21:22:10 tedu Exp $	*/
d169 1
a169 1
		exit(0);
@


1.18
log
@replace setbuf with setvbuf, from Frederic Nowak
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.17 2015/09/27 05:13:11 guenther Exp $	*/
a92 1
char *hname;		/* name of the game (argv[0] of call) */
d105 1
a110 1
	hname = argv[0];
d189 1
a189 1
	gethdate(hname);
@


1.17
log
@Annotate funcs with __attribute__((printf(...))) and clean up the fallout:
 * lots of foo(str) --> foo("%s", str) transformations
 * one totally insane foo(fmt, ap) --> vfoo(fmt, ap) conversion: how did
   this ever work?
 * prefer const char[] over char* for static format strings, as it lets
   gcc check the format and eliminates an unnecessary pointer

ok beck@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.16 2014/12/08 21:56:27 deraadt Exp $	*/
d178 1
a178 1
	setbuf(stdout,obuf);
@


1.16
log
@For now, these games still contain deterministic randomization (for
save / replay modes of operation that have not yet been cleaned up).
OK, I've let the cat out of the bag, now some of you know you can cheat
at them..
ok millert guenther tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.15 2009/10/27 23:59:25 deraadt Exp $	*/
d406 1
a406 1
				pline(nomovemsg ? nomovemsg :
d503 1
a503 1
impossible(char *s, ...)
d508 1
a508 1
	pline(s, ap);
@


1.15
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.14 2005/05/01 02:43:12 djm Exp $	*/
a179 1
	srandomdev();
d277 1
a277 1
				case 'n': (void) srandom(*sfoo++);
@


1.14
log
@use setresgid() to drop privs, it is simply a better and less ambiguous API;
ok deraadt@@ and millert@@ a while ago, more to come
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.13 2003/07/06 02:07:45 avsm Exp $	*/
a62 4

#ifndef lint
static const char rcsid[] = "$OpenBSD: hack.main.c,v 1.13 2003/07/06 02:07:45 avsm Exp $";
#endif /* not lint */
@


1.13
log
@convert a bunch of strn{cpy,cat}->strl{cpy,cat}
pjanzen@@ ok
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.12 2003/05/19 06:30:56 pjanzen Exp $	*/
d65 1
a65 1
static const char rcsid[] = "$OpenBSD: hack.main.c,v 1.12 2003/05/19 06:30:56 pjanzen Exp $";
d522 1
d530 3
a532 3
		/* revoke */
		setegid(getgid());
		setgid(getgid());
@


1.12
log
@De-register, ANSIfy, clean up.
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.11 2003/05/07 09:48:57 tdeval Exp $	*/
d65 1
a65 1
static const char rcsid[] = "$OpenBSD$";
d158 1
a158 1
		(void) strncpy(plname, s, sizeof(plname)-1);
d160 1
a160 1
		(void) strncpy(plname, s, sizeof(plname)-1);
d162 1
a162 3
		(void) strncpy(plname, s, sizeof(plname)-1);
	  if(*plname)
		plname[sizeof(plname)-1] = '\0';
d226 1
a226 2
			  (void) strncpy(plname, argv[0]+2, sizeof(plname)-1);
			  plname[sizeof(plname)-1] = '\0';
d230 1
a230 2
			  (void) strncpy(plname, argv[0], sizeof(plname)-1);
			  plname[sizeof(plname)-1] = '\0';
d236 1
a236 4
			(void) strncpy(pl_character, argv[0]+1,
				sizeof(pl_character)-1);
			plname[sizeof(pl_character)-1] = '\0';

@


1.11
log
@Major strings rework.  Ok pjanzen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.10 2003/04/06 18:50:37 deraadt Exp $	*/
d65 1
a65 1
static char rcsid[] = "$OpenBSD: hack.main.c,v 1.10 2003/04/06 18:50:37 deraadt Exp $";
d68 3
d72 1
d74 1
a82 1
extern char *getlogin(), *getenv();
d87 2
a88 2
int (*afternmv)();
int (*occupation)();
a90 3
void done1();
void hangup();

d104 1
a104 1
static void chdirx();
d107 2
a108 3
main(argc,argv)
int argc;
char *argv[];
d110 1
a110 1
	register int fd;
d112 1
a112 1
	register char *dir;
d154 1
a154 1
	{ register char *s;
d186 1
a186 1
	setrandom();
d191 1
a191 1
	(void) signal(SIGHUP, hangup);
d284 1
a284 1
		register char *sfoo;
d286 1
a286 1
		if(sfoo = getenv("MAGIC"))
d293 1
a293 1
		if(sfoo = getenv("GENOCIDED")){
d295 2
a296 2
				register struct permonst *pm = mons;
				register char *gp = genocided;
d340 3
a342 2
		{ register struct monst *mtmp;
		  if(mtmp = m_at(u.ux, u.uy)) mnexto(mtmp);	/* riv05!a3 */
d382 1
a382 1
			timeout();
d475 2
a476 2
glo(foo)
register foo;
d479 1
a479 1
	register char *tf;
d491 5
a495 2
askname(){
register int c,ct;
d514 2
a515 3
/*VARARGS1*/
impossible(s,x1,x2)
register char *s;
d517 5
a521 1
	pline(s,x1,x2);
d527 1
a527 3
chdirx(dir, wr)
char *dir;
boolean wr;
d556 1
a556 1
	    register fd;
d569 1
@


1.10
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.9 2003/03/16 21:22:35 camield Exp $	*/
d65 1
a65 1
static char rcsid[] = "$OpenBSD: hack.main.c,v 1.9 2003/03/16 21:22:35 camield Exp $";
d81 1
a81 1
extern char genocided[], fut_geno[];
d280 1
a280 1
			(void) strcpy(lock,plname);
d285 1
a285 1
		(void) strcpy(lock,plname);
d305 2
a306 2
				(void) strcpy(genocided, sfoo);
			(void) strcpy(fut_geno, genocided);
d482 1
a482 1
	(void) sprintf(tf, ".%d", foo);
@


1.9
log
@hack is free

Thanks to Andries Brouwer, Jay Fenlason and the folks at CWI for their
efforts.

http://www.cwi.nl/~aeb/games/hack/hack.html

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.8 2002/06/23 03:01:13 deraadt Exp $	*/
d65 1
a65 1
static char rcsid[] = "$OpenBSD: hack.main.c,v 1.8 2002/06/23 03:01:13 deraadt Exp $";
d262 1
a262 1
	if(wizard) (void) strcpy(plname, "wizard"); else
d311 1
a311 1
	(void) sprintf(SAVEF, "save/%u%s", getuid(), plname);
@


1.8
log
@uid_t and gid_t are unsigned
@
text
@d1 1
a1 1
/*	$OpenBSD: hack.main.c,v 1.7 2001/01/28 23:41:44 niklas Exp $	*/
d4 58
a61 1
 * Copyright (c) Stichting Mathematisch Centrum, Amsterdam, 1985.
d65 1
a65 1
static char rcsid[] = "$OpenBSD: hack.main.c,v 1.7 2001/01/28 23:41:44 niklas Exp $";
@


1.7
log
@$OpenBSD$
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d8 1
a8 1
static char rcsid[] = "$OpenBSD: hack.main.c,v 1.3 1995/03/23 08:30:35 cgd Exp $";
d254 1
a254 1
	(void) sprintf(SAVEF, "save/%d%s", getuid(), plname);
@


1.6
log
@use O_* defines for open(2) flags and include fcntl.h
@
text
@d1 2
d8 1
a8 1
static char rcsid[] = "$NetBSD: hack.main.c,v 1.3 1995/03/23 08:30:35 cgd Exp $";
@


1.5
log
@Set umask so save files are writeable by hack
@
text
@d254 1
a254 1
	if((fd = open(SAVEF,0)) >= 0 &&
d496 1
a496 1
	    if((fd = open(RECORD, 2)) < 0) {
@


1.4
log
@r?index -> strr?chr
@
text
@d126 1
@


1.3
log
@proper gid revoke
@
text
@d239 1
a239 1
					if(!index(sfoo, pm->mlet))
@


1.2
log
@prefer $LOGNAME over $USER.  fix strncpy() usage.
@
text
@d471 3
a473 2
		(void) setuid(getuid());		/* Ron Wessels */
		(void) setgid(getgid());
@


1.1
log
@Initial revision
@
text
@d86 1
a86 1
	 *			2. Use $USER or $LOGNAME	(if 1. fails)
d98 2
a101 2
	  if(!*plname && (s = getenv("LOGNAME")))
		(void) strncpy(plname, s, sizeof(plname)-1);
d104 2
d167 1
a167 1
			if(argv[0][2])
d169 2
a170 1
			else if(argc > 1) {
d174 1
d182 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
