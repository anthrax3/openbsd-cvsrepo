head	1.3;
access;
symbols
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.0.14
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.12
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.10
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.8
	OPENBSD_2_7_BASE:1.1
	OPENBSD_2_6:1.1.0.6
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.4
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2003.03.11.09.29.28;	author deraadt;	state dead;
branches;
next	1.2;

1.2
date	2002.02.16.21.27.10;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	98.09.15.05.12.31;	author pjanzen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@OK, this is a strange case.  At least some parts of this software is
copyrighted, and then marked "Copying for Profit is Prohibited", but
the author has passed away.  A number of people have tried to make
some sort of effort at trying to contact his estate, and have failed.
Therefore, lacking the ability to correct this copyright, we must
delete it.  I would bet strongly that this is not what the author
would have intended, but until we can get this resolved, this is the
action we must take.
@
text
@/*	$OpenBSD: extern.h,v 1.2 2002/02/16 21:27:10 millert Exp $	*/
/*	$NetBSD: extern.h,v 1.1 1997/10/18 20:03:17 christos Exp $	*/

/*
 * Copyright (c) 1997 Christos Zoulas.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Christos Zoulas.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* bill.c */
void mailbill(void);

/* config.c */

/* create.c */
void makeplayer(void);
void newcavelevel(int);
void makemaze(int);
void eat(int, int);
int cannedlevel(int);
void treasureroom(int);
void troom(int, int, int, int, int, int);
void makeobject(int);
void fillmroom(int, int, int);
void froom(int, int, int);
int fillmonst(int);
void sethp(int);
void checkgen(void);

/* data.c */

/* diag.c */
void diag(void);
int dcount(int);
void diagdrawscreen(void);
int savegame(char *);
void restoregame(char *);
void greedy(void);
void fsorry(void);
void fcheat(void);

/* display.c */
void bottomline(void);
void bottomhp(void);
void bottomspell(void);
void bottomdo(void);
void bot_linex(void);
void bottomgold(void);
void bot_hpx(void);
void bot_spellx(void);
void botside(void);
void draws(int, int, int, int);
void drawscreen(void);
void showcell(int, int);
void show1cell(int, int);
void showplayer(void);
int moveplayer(int);
void seemagic(int);
void seepage(void);

/* fortune.c */
char *fortune(void);

/* global.c */
void raiselevel(void);
void loselevel(void);
void raiseexperience(long);
void loseexperience(long);
void losehp(int);
void losemhp(int);
void raisehp(int);
void raisemhp(int);
void raisespells(int);
void raisemspells(int);
void losespells(int);
void losemspells(int);
int makemonst(int);
void positionplayer(void);
void recalc(void);
void quit(void);
void more(void);
int take(int, int);
int drop_object(int);
void enchantarmor(void);
void enchweapon(void);
int pocketfull(void);
int nearbymonst(void);
int stealsomething(void);
int emptyhanded(void);
void creategem(void);
void adjustcvalues(int, int);
void gettokstr(char *);
int getpassword(void);
int getyn(void);
int packweight(void);
int rnd(int);
int rund(int);

/* help.c */
void help(void);
void welcome(void);
void retcont(void);
int openhelp(void);

/* io.c */
void setupvt100(void);
void clearvt100(void);
int lgetchar(void);
void scbr(void);
void sncbr(void);
void newgame(void);
void lprintf(const char *, ...);
void lprint(long);
void lwrite(char *, int);
long lgetc(void);
long lrint(void);
void lrfill(char *, int);
char *lgetw(void);
char *lgetl(void);
int lcreat(char *);
int lopen(char *);
int lappend(char *);
void lrclose(void);
void lwclose(void);
void lprcat(char *);
void cursor(int, int);
void cursors(void);
void init_term(void);
void cl_line(int, int);
void cl_up(int, int);
void cl_dn(int, int);
void lstandout(char *);
void set_score_output(void);
void lflush(void);
int xputchar(int);
void flush_buf(void);
char *tmcapcnv(char *, char *);
void lbeep(void);

/* main.c */
int main(int, char **);
void showstr(void);
void qshowstr(void);
void t_setup(int);
void t_endup(int);
void showwear(void);
void showwield(void);
void showread(void);
void showeat(void);
void showquaff(void);
void show1(int, char *[]);
void show3(int);
void randmonst(void);
void parse(void);
void parse2(void);
void run(int);
void wield(void);
void ydhi(int);
void ycwi(int);
void wear(void);
void dropobj(void);
void readscr(void);
void eatcookie(void);
void quaff(void);
int whatitem(char *);
unsigned long readnum(long);
void szero(char *);

/* monster.c */
void createmonster(int);
int cgood(int, int, int, int);
void createitem(int, int);
void cast(void);
void speldamage(int);
void loseint(void);
int isconfuse(void);
int nospell(int, int);
int fullhit(int);
void direct(int, int, char *, int);
void godirect(int, int, char *, int, int);
void ifblind(int, int);
void tdirect(int);
void omnidirect(int, int, char *);
int vxy(int *, int *);
void dirpoly(int);
void hitmonster(int, int);
int hitm(int, int, int);
void hitplayer(int, int);
void dropsomething(int);
void dropgold(int);
void something(int);
int newobject(int, int *);
int spattack(int, int, int);
void checkloss(int);
int annihilate(void);
int newsphere(int, int, int, int);
int rmsphere(int, int);
void sphboom(int, int);
void genmonst(void);

/* moreobj.c */
void oaltar(void);
void othrone(int);
void odeadthrone(void);
void ochest(void);
void ofountain(void);
void fntchange(int);

/* movem.c */
void movemonst(void);
void movemt(int, int);
void mmove(int, int, int, int);
void movsphere(void);

/* nap.c */
void nap(int);

/* object.c */
void lookforobject(void);
void finditem(int);
void ostairs(int);
void oteleport(int);
void opotion(int);
void quaffpotion(int);
void oscroll(int);
void adjusttime(long);
void read_scroll(int);
void oorb(void);
void opit(void);
void obottomless(void);
void oelevator(int);
void ostatue(void);
void omirror(void);
void obook(void);
void readbook(int);
void ocookie(void);
void ogold(int);
void ohome(void);
void iopts(void);
void ignore(void);

/* regen.c */
void regen(void);

/* savelev.c */
void savelevel(void);
void getlevel(void);

/* scores.c */
int readboard(void);
int writeboard(void);
int makeboard(void);
int hashewon(void);
long paytaxes(long);
int winshou(void);
int shou(int);
void showscores(void);
void showallscores(void);
int sortboard(void);
void newscore(long, char *, int, int);
void new1sub(long, int, char *, long);
void new2sub(long, int, char *, int);
void died(int);
void diedsub(int);
void diedlog(void);
int getplid(char *);

/* signal.c */
void sigsetup(void);

/* store.c */
void dnd_2hed(void);
void dnd_hed(void);
void dndstore(void);
void sch_hed(void);
void oschool(void);
void obank(void);
void obank2(void);
void ointerest(void);
void obanksub(void);
void appraise(int);
void otradepost(void);
void cnsitm(void);
void olrs(void);

/* tok.c */
int yylex(void);
void flushall(void);
void sethard(int);
void readopts(void);
@


1.2
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: extern.h,v 1.1 1998/09/15 05:12:31 pjanzen Exp $	*/
@


1.1
log
@NetBSD merge; also renamed some functions so as not to conflict with curses
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d34 1
a34 1
void mailbill __P((void));
d39 13
a51 13
void makeplayer __P((void));
void newcavelevel __P((int));
void makemaze __P((int));
void eat __P((int, int));
int cannedlevel __P((int));
void treasureroom __P((int));
void troom __P((int, int, int, int, int, int));
void makeobject __P((int));
void fillmroom __P((int, int, int));
void froom __P((int, int, int));
int fillmonst __P((int));
void sethp __P((int));
void checkgen __P((void));
d56 8
a63 8
void diag __P((void));
int dcount __P((int));
void diagdrawscreen __P((void));
int savegame __P((char *));
void restoregame __P((char *));
void greedy __P((void));
void fsorry __P((void));
void fcheat __P((void));
d66 17
a82 17
void bottomline __P((void));
void bottomhp __P((void));
void bottomspell __P((void));
void bottomdo __P((void));
void bot_linex __P((void));
void bottomgold __P((void));
void bot_hpx __P((void));
void bot_spellx __P((void));
void botside __P((void));
void draws __P((int, int, int, int));
void drawscreen __P((void));
void showcell __P((int, int));
void show1cell __P((int, int));
void showplayer __P((void));
int moveplayer __P((int));
void seemagic __P((int));
void seepage __P((void));
d85 1
a85 1
char *fortune __P((void));
d88 33
a120 33
void raiselevel __P((void));
void loselevel __P((void));
void raiseexperience __P((long));
void loseexperience __P((long));
void losehp __P((int));
void losemhp __P((int));
void raisehp __P((int));
void raisemhp __P((int));
void raisespells __P((int));
void raisemspells __P((int));
void losespells __P((int));
void losemspells __P((int));
int makemonst __P((int));
void positionplayer __P((void));
void recalc __P((void));
void quit __P((void));
void more __P((void));
int take __P((int, int));
int drop_object __P((int));
void enchantarmor __P((void));
void enchweapon __P((void));
int pocketfull __P((void));
int nearbymonst __P((void));
int stealsomething __P((void));
int emptyhanded __P((void));
void creategem __P((void));
void adjustcvalues __P((int, int));
void gettokstr __P((char *));
int getpassword __P((void));
int getyn __P((void));
int packweight __P((void));
int rnd __P((int));
int rund __P((int));
d123 4
a126 4
void help __P((void));
void welcome __P((void));
void retcont __P((void));
int openhelp __P((void));
d129 33
a161 33
void setupvt100 __P((void));
void clearvt100 __P((void));
int lgetchar __P((void));
void scbr __P((void));
void sncbr __P((void));
void newgame __P((void));
void lprintf __P((const char *, ...));
void lprint __P((long));
void lwrite __P((char *, int));
long lgetc __P((void));
long lrint __P((void));
void lrfill __P((char *, int));
char *lgetw __P((void));
char *lgetl __P((void));
int lcreat __P((char *));
int lopen __P((char *));
int lappend __P((char *));
void lrclose __P((void));
void lwclose __P((void));
void lprcat __P((char *));
void cursor __P((int, int));
void cursors __P((void));
void init_term __P((void));
void cl_line __P((int, int));
void cl_up __P((int, int));
void cl_dn __P((int, int));
void lstandout __P((char *));
void set_score_output __P((void));
void lflush __P((void));
int xputchar __P((int));
void flush_buf __P((void));
char *tmcapcnv __P((char *, char *));
void lbeep __P((void));
d164 27
a190 27
int main __P((int, char **));
void showstr __P((void));
void qshowstr __P((void));
void t_setup __P((int));
void t_endup __P((int));
void showwear __P((void));
void showwield __P((void));
void showread __P((void));
void showeat __P((void));
void showquaff __P((void));
void show1 __P((int, char *[]));
void show3 __P((int));
void randmonst __P((void));
void parse __P((void));
void parse2 __P((void));
void run __P((int));
void wield __P((void));
void ydhi __P((int));
void ycwi __P((int));
void wear __P((void));
void dropobj __P((void));
void readscr __P((void));
void eatcookie __P((void));
void quaff __P((void));
int whatitem __P((char *));
unsigned long readnum __P((long));
void szero __P((char *));
d193 30
a222 30
void createmonster __P((int));
int cgood __P((int, int, int, int));
void createitem __P((int, int));
void cast __P((void));
void speldamage __P((int));
void loseint __P((void));
int isconfuse __P((void));
int nospell __P((int, int));
int fullhit __P((int));
void direct __P((int, int, char *, int));
void godirect __P((int, int, char *, int, int));
void ifblind __P((int, int));
void tdirect __P((int));
void omnidirect __P((int, int, char *));
int vxy __P((int *, int *));
void dirpoly __P((int));
void hitmonster __P((int, int));
int hitm __P((int, int, int));
void hitplayer __P((int, int));
void dropsomething __P((int));
void dropgold __P((int));
void something __P((int));
int newobject __P((int, int *));
int spattack __P((int, int, int));
void checkloss __P((int));
int annihilate __P((void));
int newsphere __P((int, int, int, int));
int rmsphere __P((int, int));
void sphboom __P((int, int));
void genmonst __P((void));
d225 6
a230 6
void oaltar __P((void));
void othrone __P((int));
void odeadthrone __P((void));
void ochest __P((void));
void ofountain __P((void));
void fntchange __P((int));
d233 4
a236 4
void movemonst __P((void));
void movemt __P((int, int));
void mmove __P((int, int, int, int));
void movsphere __P((void));
d239 1
a239 1
void nap __P((int));
d242 22
a263 22
void lookforobject __P((void));
void finditem __P((int));
void ostairs __P((int));
void oteleport __P((int));
void opotion __P((int));
void quaffpotion __P((int));
void oscroll __P((int));
void adjusttime __P((long));
void read_scroll __P((int));
void oorb __P((void));
void opit __P((void));
void obottomless __P((void));
void oelevator __P((int));
void ostatue __P((void));
void omirror __P((void));
void obook __P((void));
void readbook __P((int));
void ocookie __P((void));
void ogold __P((int));
void ohome __P((void));
void iopts __P((void));
void ignore __P((void));
d266 1
a266 1
void regen __P((void));
d269 2
a270 2
void savelevel __P((void));
void getlevel __P((void));
d273 17
a289 17
int readboard __P((void));
int writeboard __P((void));
int makeboard __P((void));
int hashewon __P((void));
long paytaxes __P((long));
int winshou __P((void));
int shou __P((int));
void showscores __P((void));
void showallscores __P((void));
int sortboard __P((void));
void newscore __P((long, char *, int, int));
void new1sub __P((long, int, char *, long));
void new2sub __P((long, int, char *, int));
void died __P((int));
void diedsub __P((int));
void diedlog __P((void));
int getplid __P((char *));
d292 1
a292 1
void sigsetup __P((void));
d295 13
a307 13
void dnd_2hed __P((void));
void dnd_hed __P((void));
void dndstore __P((void));
void sch_hed __P((void));
void oschool __P((void));
void obank __P((void));
void obank2 __P((void));
void ointerest __P((void));
void obanksub __P((void));
void appraise __P((int));
void otradepost __P((void));
void cnsitm __P((void));
void olrs __P((void));
d310 4
a313 4
int yylex __P((void));
void flushall __P((void));
void sethard __P((int));
void readopts __P((void));
@

