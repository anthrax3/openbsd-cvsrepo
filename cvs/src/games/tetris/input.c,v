head	1.18;
access;
symbols
	OPENBSD_6_1:1.18.0.2
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.12.0.40
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.38
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.34
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.32
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.30
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.28
	OPENBSD_5_0:1.12.0.26
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.24
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.22
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.18
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.12.0.20
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.16
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.14
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.12
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.10
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.8
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.6
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.12.0.4
	OPENBSD_3_9_BASE:1.12
	OPENBSD_3_8:1.12.0.2
	OPENBSD_3_8_BASE:1.12
	OPENBSD_3_7:1.11.0.4
	OPENBSD_3_7_BASE:1.11
	OPENBSD_3_6:1.11.0.2
	OPENBSD_3_6_BASE:1.11
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.5.0.2
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.4.0.8
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.6
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.4
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.2
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.18
date	2016.08.27.02.02.44;	author guenther;	state Exp;
branches;
next	1.17;
commitid	gupFWcYhnkwQ5f1q;

1.17
date	2016.01.10.13.35.10;	author mestre;	state Exp;
branches;
next	1.16;
commitid	mVbl9a8GbGdqcFgu;

1.16
date	2016.01.04.17.33.24;	author mestre;	state Exp;
branches;
next	1.15;
commitid	b21xvsfCGMtCOVrz;

1.15
date	2014.12.31.15.42.08;	author tedu;	state Exp;
branches;
next	1.14;
commitid	jrRWLSAFTs6PXF6k;

1.14
date	2014.11.05.20.23.38;	author tedu;	state Exp;
branches;
next	1.13;
commitid	VTNos4UihRxFhaGR;

1.13
date	2014.11.03.22.14.54;	author deraadt;	state Exp;
branches;
next	1.12;
commitid	as6i62fI9q0ursQL;

1.12
date	2005.04.13.02.33.08;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2004.07.10.07.26.24;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.26.21.30.20;	author mickey;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.31.04.21.30;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	2001.09.27.08.37.33;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.05.20.03.07;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.04.14.23.27;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	99.03.22.07.38.24;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.09.24.06.45.07;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	96.02.17.23.54.47;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.23;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.23;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.18
log
@Pull in <sys/time.h> for struct timespec, gettimeofday(), clock_gettime(),
and setitimer()

ok deraadt@@
@
text
@/*	$OpenBSD: input.c,v 1.17 2016/01/10 13:35:10 mestre Exp $	*/
/*    $NetBSD: input.c,v 1.3 1996/02/06 22:47:33 jtc Exp $    */

/*-
 * Copyright (c) 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Chris Torek and Darren F. Provine.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)input.c	8.1 (Berkeley) 5/31/93
 */

/*
 * Tetris input.
 */

#include <sys/time.h>
#include <errno.h>
#include <poll.h>
#include <unistd.h>

#include "input.h"
#include "tetris.h"

/* return true iff the given timeval is positive */
#define	TV_POS(tv) \
	((tv)->tv_sec > 0 || ((tv)->tv_sec == 0 && (tv)->tv_usec > 0))

/* subtract timeval `sub' from `res' */
#define	TV_SUB(res, sub) \
	(res)->tv_sec -= (sub)->tv_sec; \
	(res)->tv_usec -= (sub)->tv_usec; \
	if ((res)->tv_usec < 0) { \
		(res)->tv_usec += 1000000; \
		(res)->tv_sec--; \
	}

/*
 * Do a `read wait': poll for reading from stdin, with timeout *tvp.
 * On return, modify *tvp to reflect the amount of time spent waiting.
 * It will be positive only if input appeared before the time ran out;
 * otherwise it will be zero or perhaps negative.
 *
 * If tvp is nil, wait forever, but return if poll is interrupted.
 *
 * Return 0 => no input, 1 => can read() from stdin
 */
int
rwait(struct timeval *tvp)
{
	int	timo = INFTIM;
	struct timeval starttv, endtv;
	struct pollfd pfd[1];

#define	NILTZ ((struct timezone *)0)

	if (tvp) {
		(void) gettimeofday(&starttv, NILTZ);
		endtv = *tvp;
		timo = endtv.tv_sec * 1000 + endtv.tv_usec / 1000;
	}
again:
	pfd[0].fd = STDIN_FILENO;
	pfd[0].events = POLLIN;
	switch (poll(pfd, 1, timo)) {
	case -1:
		if (tvp == 0)
			return (-1);
		if (errno == EINTR)
			goto again;
		stop("poll failed, help");

	case 0:	/* timed out */
		tvp->tv_sec = 0;
		tvp->tv_usec = 0;
		return (0);
	}
	if (tvp) {
		/* since there is input, we may not have timed out */
		(void) gettimeofday(&endtv, NILTZ);
		TV_SUB(&endtv, &starttv);
		TV_SUB(tvp, &endtv);	/* adjust *tvp by elapsed time */
	}
	return (1);
}

/*
 * `sleep' for the current turn time (using poll).
 * Eat any input that might be available.
 */
void
tsleep(void)
{
	struct timeval tv;
	char c;

	tv.tv_sec = 0;
	tv.tv_usec = fallrate;
	while (TV_POS(&tv))
		if (rwait(&tv) && read(STDIN_FILENO, &c, 1) != 1)
			break;
}

/*
 * getchar with timeout.
 */
int
tgetchar(void)
{
	static struct timeval timeleft;
	char c;

	/*
	 * Reset timeleft to fallrate whenever it is not positive.
	 * In any case, wait to see if there is any input.  If so,
	 * take it, and update timeleft so that the next call to
	 * tgetchar() will not wait as long.  If there is no input,
	 * make timeleft zero or negative, and return -1.
	 *
	 * Most of the hard work is done by rwait().
	 */
	if (!TV_POS(&timeleft)) {
		faster();	/* go faster */
		timeleft.tv_sec = 0;
		timeleft.tv_usec = fallrate;
	}
	if (!rwait(&timeleft))
		return (-1);
	if (read(STDIN_FILENO, &c, 1) != 1)
		stop("end of file, help");
	return ((int)(unsigned char)c);
}
@


1.17
log
@As per style(9), remove remaining lint-style comments from games/

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.16 2016/01/04 17:33:24 mestre Exp $	*/
d42 1
@


1.16
log
@More cleanup and sorting on header section

OK tb@@ and he also pointed out that for consistency with rest of the tree we
should include termios.h instead of sys/ttydefaults.h, where applicable
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.15 2014/12/31 15:42:08 tedu Exp $	*/
a95 1
		/* NOTREACHED */
@


1.15
log
@simplify poll() conversion. from patrick keshishian
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.14 2014/11/05 20:23:38 tedu Exp $	*/
a41 3
#include <sys/types.h>
#include <sys/time.h>

d43 1
a44 2
#include <poll.h>
#include <string.h>
@


1.14
log
@don't deref timeout if null. from theo buehler.
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.13 2014/11/03 22:14:54 deraadt Exp $	*/
d79 2
a80 1
	struct timeval starttv, endtv, *s;
d88 2
a89 3
		s = &endtv;
	} else
		s = NULL;
d93 1
a93 3
	switch (poll(pfd, 1, s ? s->tv_sec * 1000 + s->tv_usec / 1000 :
	    INFTIM)) {

@


1.13
log
@select() to poll() conversions
ok tedu (... other games maintainer absent)
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.12 2005/04/13 02:33:08 deraadt Exp $	*/
d67 1
a67 1
 * Do a `read wait': select for reading from stdin, with timeout *tvp.
d72 1
a72 1
 * If tvp is nil, wait forever, but return if select is interrupted.
d93 2
a94 1
	switch (poll(pfd, 1, s->tv_sec * 1000 + s->tv_usec / 1000)) {
d101 1
a101 1
		stop("select failed, help");
d119 1
a119 1
 * `sleep' for the current turn time (using select).
@


1.12
log
@use STD{IN,OUT,ERR}_FILENO
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.11 2004/07/10 07:26:24 deraadt Exp $	*/
d47 1
d80 1
a80 1
	fd_set fds;
a83 5
	/*
	 * Someday, select() will do this for us.
	 * Just in case that day is now, and no one has
	 * changed this, we use a temporary.
	 */
d91 3
a93 3
	FD_ZERO(&fds);
	FD_SET(STDIN_FILENO, &fds);
	switch (select(STDIN_FILENO + 1, &fds, (fd_set *)0, (fd_set *)0, s)) {
@


1.11
log
@more ansi; khalek@@linuxgamers.net
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.10 2003/06/03 03:01:41 millert Exp $	*/
d134 1
a134 1
		if (rwait(&tv) && read(0, &c, 1) != 1)
d163 1
a163 1
	if (read(0, &c, 1) != 1)
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.9 2002/07/26 21:30:20 mickey Exp $	*/
d76 1
a76 2
rwait(tvp)
	struct timeval *tvp;
d126 1
a126 1
tsleep()
d142 1
a142 1
tgetchar()
@


1.9
log
@put to the -Wall an unused variable
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.8 2002/05/31 04:21:30 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.8
log
@de-register
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.7 2001/09/27 08:37:33 deraadt Exp $	*/
a82 1
	int i;
@


1.7
log
@missing header
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.6 2001/09/05 20:03:07 deraadt Exp $	*/
d81 1
a81 1
	register struct timeval *tvp;
@


1.6
log
@use select() better
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.5 2001/02/04 14:23:27 pjanzen Exp $	*/
d51 1
@


1.5
log
@Long usernames.  This really messes up the scoreboard printout, so change
it from two columns to one column with leaders printed every third score
to guide the eye across the vast whitespace that's left with the
traditional 8-char usernames.
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.4 1999/03/22 07:38:24 pjanzen Exp $	*/
d84 2
d100 3
a102 2
	i = 1;
	switch (select(1, (fd_set *)&i, (fd_set *)0, (fd_set *)0, s)) {
@


1.4
log
@Many fixes, most either from or based on NetBSD changes:
	get rid of unused function
	improve output format
	allow previewing of next piece
	randomize initial rotation angle of falling blocks.
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.3 1998/09/24 06:45:07 pjanzen Exp $	*/
d96 1
a96 1
		s = 0;
@


1.3
log
@NetBSD changes and a few obvious fixes
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a137 14
}

/*
 * Eat up any input (used at end of game).
 */
void
eat_input()
{
	struct timeval tv;
	char c;

	do {
		tv.tv_sec = tv.tv_usec = 0;
	} while (rwait(&tv) && read(0, &c, 1) == 1);
@


1.2
log
@From netbsd:
Removed "extern int errno"; Added #include <errno.h> if not already present.
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$NetBSD: input.c,v 1.2 1995/04/22 07:42:34 cgd Exp $	*/
a82 1
	extern int errno;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
