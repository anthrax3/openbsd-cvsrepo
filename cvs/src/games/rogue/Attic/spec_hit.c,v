head	1.9;
access;
symbols
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.12
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2011.07.03.05.12.15;	author martynas;	state dead;
branches;
next	1.8;

1.8
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.08.09.44.35;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.18.07.13.57;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.12.19.52.56;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.08.22.08.55.48;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	97.07.23.20.05.11;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.19;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove rogue.  Its license is not acceptable for our tree;  been
unlinked from the builds for 8 years.  I've been talking with the
author 2 years ago, he didn't release a proper license.  It's clear
that the issue won't be resolved.  OK tedu@@.
@
text
@/*	$OpenBSD: spec_hit.c,v 1.8 2009/10/27 23:59:26 deraadt Exp $	*/
/*	$NetBSD: spec_hit.c,v 1.3 1995/04/22 10:28:29 cgd Exp $	*/

/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Timothy C. Stoehr.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * special_hit.c
 *
 * This source herein may be modified and/or distributed by anybody who
 * so desires, with the following restrictions:
 *    1.)  No portion of this notice shall be removed.
 *    2.)  Credit shall not be taken for the creation of this source.
 *    3.)  This code is not to be traded, sold, or used for personal
 *         gain or profit.
 *
 */

#include "rogue.h"

short less_hp = 0;
boolean being_held;

void
special_hit(object *monster)
{
	if ((monster->m_flags & CONFUSED) && rand_percent(66))
		return;
	if (wizard && rand_percent(50))
		return;
	if (monster->m_flags & RUSTS)
		rust(monster);
	if ((monster->m_flags & HOLDS) && !levitate)
		being_held = 1;
	if (monster->m_flags & FREEZES)
		freeze(monster);
	if (monster->m_flags & STINGS)
		sting(monster);
	if (monster->m_flags & DRAINS_LIFE)
		drain_life();
	if (monster->m_flags & DROPS_LEVEL)
		drop_level();
	if (monster->m_flags & STEALS_GOLD)
		steal_gold(monster);
	else if (monster->m_flags & STEALS_ITEM) 
		steal_item(monster);
}

void
rust(object *monster)
{
	if ((!rogue.armor) || (get_armor_class(rogue.armor) <= 1) ||
		(rogue.armor->which_kind == LEATHER)) {
		return;
	}
	if ((rogue.armor->is_protected) || maintain_armor) {
		if (monster && (!(monster->m_flags & RUST_VANISHED))) {
			messagef(0, "the rust vanishes instantly");
			monster->m_flags |= RUST_VANISHED;
		}
	} else {
		rogue.armor->d_enchant--;
		messagef(0, "your armor weakens");
		print_stats(STAT_ARMOR);
	}
}

void
freeze(object *monster)
{
	short freeze_percent = 99;
	short i, n;

	if (rand_percent(12)) {
		return;
	}
	freeze_percent -= (rogue.str_current+(rogue.str_current / 2));
	freeze_percent -= ((rogue.exp + ring_exp) * 4);
	freeze_percent -= (get_armor_class(rogue.armor) * 5);
	freeze_percent -= (rogue.hp_max / 3);

	if (freeze_percent > 10) {
		monster->m_flags |= FREEZING_ROGUE;
		messagef(1, "you are frozen");

		n = get_rand(4, 8);
		for (i = 0; i < n; i++) {
			mv_mons();
		}
		if (rand_percent(freeze_percent)) {
			for (i = 0; i < 50; i++) {
				mv_mons();
			}
			killed_by((object *)0, HYPOTHERMIA);
		}
		messagef(1, "%s", you_can_move_again);
		monster->m_flags &= (~FREEZING_ROGUE);
	}
}

void
steal_gold(object *monster)
{
	int amount;

	if ((rogue.gold <= 0) || rand_percent(10)) {
		return;
	}

	amount = get_rand((cur_level * 10), (cur_level * 30));

	if (amount > rogue.gold) {
		amount = rogue.gold;
	}
	rogue.gold -= amount;
	messagef(0, "your purse feels lighter");
	print_stats(STAT_GOLD);
	disappear(monster);
}

void
steal_item(object *monster)
{
	object *obj;
	short i, n, t = 0;
	char desc[80];
	boolean has_something = 0;

	if (rand_percent(15)) {
		return;
	}
	obj = rogue.pack.next_object;

	if (!obj) {
		goto DSPR;
	}
	while (obj) {
		if (!(obj->in_use_flags & BEING_USED)) {
			has_something = 1;
			break;
		}
		obj = obj->next_object;
	}
	if (!has_something) {
		goto DSPR;
	}
	n = get_rand(0, MAX_PACK_COUNT);
	obj = rogue.pack.next_object;

	for (i = 0; i <= n; i++) {
		obj = obj->next_object;
		while ((!obj) || (obj->in_use_flags & BEING_USED)) {
			if (!obj) {
				obj = rogue.pack.next_object;
			} else {
				obj = obj->next_object;
			}
		}
	}
	if (obj->what_is != WEAPON) {
		t = obj->quantity;
		obj->quantity = 1;
	}
	get_desc(obj, desc, sizeof(desc));
	messagef(0, "she stole %s", desc);

	obj->quantity = ((obj->what_is != WEAPON) ? t : 1);

	vanish(obj, 0, &rogue.pack);
DSPR:
	disappear(monster);
}

void
disappear(object *monster)
{
	short row, col;

	row = monster->row;
	col = monster->col;

	dungeon[row][col] &= ~MONSTER;
	if (rogue_can_see(row, col)) {
		mvaddch(row, col, get_dungeon_char(row, col));
	}
	take_from_pack(monster, &level_monsters);
	free_object(monster);
	mon_disappeared = 1;
}

void
cough_up(object *monster)
{
	object *obj;
	short row, col, i, n;

	if (cur_level < max_level) {
		return;
	}

	if (monster->m_flags & STEALS_GOLD) {
		obj = alloc_object();
		obj->what_is = GOLD;
		obj->quantity = get_rand((cur_level * 15), (cur_level * 30));
	} else {
		if (!rand_percent((int) monster->drop_percent)) {
			return;
		}
		obj = gr_object();
	}
	row = monster->row;
	col = monster->col;

	for (n = 0; n <= 5; n++) {
		for (i = -n; i <= n; i++) {
			if (try_to_cough(row+n, col+i, obj)) {
				return;
			}
			if (try_to_cough(row-n, col+i, obj)) {
				return;
			}
		}
		for (i = -n; i <= n; i++) {
			if (try_to_cough(row+i, col-n, obj)) {
				return;
			}
			if (try_to_cough(row+i, col+n, obj)) {
				return;
			}
		}
	}
	free_object(obj);
}

boolean
try_to_cough(short row, short col, object *obj)
{
	if ((row < MIN_ROW) ||
	    (row > (DROWS-2)) || (col < 0) || (col>(DCOLS-1))) {
		return(0);
	}
	if ((!(dungeon[row][col] & (OBJECT | STAIRS | TRAP))) &&
		(dungeon[row][col] & (TUNNEL | FLOOR | DOOR))) {
		place_at(obj, row, col);
		if (((row != rogue.row) || (col != rogue.col)) &&
			(!(dungeon[row][col] & MONSTER))) {
			mvaddch(row, col, get_dungeon_char(row, col));
		}
		return(1);
	}
	return(0);
}

boolean
seek_gold(object *monster)
{
	short i, j, rn, s;

	if ((rn = get_room_number(monster->row, monster->col)) < 0) {
		return(0);
	}
	for (i = rooms[rn].top_row+1; i < rooms[rn].bottom_row; i++) {
		for (j = rooms[rn].left_col+1; j < rooms[rn].right_col; j++) {
			if ((gold_at(i, j)) && !(dungeon[i][j] & MONSTER)) {
				monster->m_flags |= CAN_FLIT;
				s = mon_can_go(monster, i, j);
				monster->m_flags &= (~CAN_FLIT);
				if (s) {
					move_mon_to(monster, i, j);
					monster->m_flags |= ASLEEP;
					monster->m_flags &= (~(WAKENS | SEEKS_GOLD));
					return(1);
				}
				monster->m_flags &= (~SEEKS_GOLD);
				monster->m_flags |= CAN_FLIT;
				mv_1_monster(monster, i, j);
				monster->m_flags &= (~CAN_FLIT);
				monster->m_flags |= SEEKS_GOLD;
				return(1);
			}
		}
	}
	return(0);
}

boolean
gold_at(short row, short col)
{
	if (dungeon[row][col] & OBJECT) {
		object *obj;

		if ((obj = object_at(&level_objects, row, col)) &&
				(obj->what_is == GOLD)) {
			return(1);
		}
	}
	return(0);
}

void
check_gold_seeker(object *monster)
{
	monster->m_flags &= (~SEEKS_GOLD);
}

boolean
check_imitator(object *monster)
{
	if (monster->m_flags & IMITATES) {
		wake_up(monster);
		if (!blind) {
			mvaddch(monster->row, monster->col,
					get_dungeon_char(monster->row, monster->col));
			check_message();
			messagef(1, "wait, that's a %s!", mon_name(monster));
		}
		return(1);
	}
	return(0);
}

boolean
imitating(short row, short col)
{
	if (dungeon[row][col] & MONSTER) {
		object *monster;

		if ((monster = object_at(&level_monsters, row, col))) {
			if (monster->m_flags & IMITATES) {
				return(1);
			}
		}
	}
	return(0);
}

void
sting(object *monster)
{
	short sting_chance = 35;

	if ((rogue.str_current <= 3) || sustain_strength) {
		return;
	}
	sting_chance += (6 * (6 - get_armor_class(rogue.armor)));

	if ((rogue.exp + ring_exp) > 8) {
		sting_chance -= (6 * ((rogue.exp + ring_exp) - 8));
	}
	if (rand_percent(sting_chance)) {
		messagef(0, "the %s's bite has weakened you",
		    mon_name(monster));
		rogue.str_current--;
		print_stats(STAT_STRENGTH);
	}
}

void
drop_level(void)
{
	int hp;

	if (rand_percent(80) || (rogue.exp <= 5)) {
		return;
	}
	rogue.exp_points = level_points[rogue.exp-2] - get_rand(9, 29);
	rogue.exp -= 2;
	hp = hp_raise();
	if ((rogue.hp_current -= hp) <= 0) {
		rogue.hp_current = 1;
	}
	if ((rogue.hp_max -= hp) <= 0) {
		rogue.hp_max = 1;
	}
	add_exp(1, 0);
}

void
drain_life(void)
{
	short n;

	if (rand_percent(60) || (rogue.hp_max <= 30) || (rogue.hp_current < 10)) {
		return;
	}
	n = get_rand(1, 3);		/* 1 Hp, 2 Str, 3 both */

	if ((n != 2) || (!sustain_strength)) {
		messagef(0, "you feel weaker");
	}
	if (n != 2) {
		rogue.hp_max--;
		rogue.hp_current--;
		less_hp++;
	}
	if (n != 1) {
		if ((rogue.str_current > 3) && (!sustain_strength)) {
			rogue.str_current--;
			if (coin_toss()) {
				rogue.str_max--;
			}
		}
	}
	print_stats((STAT_STRENGTH | STAT_HP));
}

boolean
m_confuse(object *monster)
{
	if (!rogue_can_see(monster->row, monster->col)) {
		return(0);
	}
	if (rand_percent(45)) {
		monster->m_flags &= (~CONFUSES);	/* will not confuse the rogue */
		return(0);
	}
	if (rand_percent(55)) {
		monster->m_flags &= (~CONFUSES);
		messagef(1, "the gaze of the %s has confused you",
		    mon_name(monster));
		cnfs();
		return(1);
	}
	return(0);
}

boolean
flame_broil(object *monster)
{
	short row, col, dir;

	if ((!mon_sees(monster, rogue.row, rogue.col)) || coin_toss()) {
		return(0);
	}
	row = rogue.row - monster->row;
	col = rogue.col - monster->col;
	if (row < 0) {
		row = -row;
	}
	if (col < 0) {
		col = -col;
	}
	if (((row != 0) && (col != 0) && (row != col)) ||
		((row > 7) || (col > 7))) {
		return(0);
	}
	dir = get_dir(monster->row, monster->col, row, col);
	bounce(FIRE, dir, monster->row, monster->col, 0);

	return(1);
}

int
get_dir(short srow, short scol, short drow, short dcol)
{
	if (srow == drow) {
		if (scol < dcol) {
			return(RIGHT);
		} else {
			return(LEFT);
		}
	}
	if (scol == dcol) {
		if (srow < drow) {
			return(DOWN);
		} else {
			return(UPWARD);
		}
	}
	if ((srow > drow) && (scol > dcol)) {
		return(UPLEFT);
	}
	if ((srow < drow) && (scol < dcol)) {
		return(DOWNRIGHT);
	}
	if ((srow < drow) && (scol > dcol)) {
		return(DOWNLEFT);
	}
	/*if ((srow > drow) && (scol < dcol)) {*/
		return(UPRIGHT);
	/*}*/
}
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: spec_hit.c,v 1.7 2006/03/08 09:44:35 otto Exp $	*/
@


1.7
log
@Ansify; from Alexey Dobriyan; hope the license gets cleared up, so we
can include this in the build again.
@
text
@d1 1
a1 1
/*	$OpenBSD: spec_hit.c,v 1.6 2003/06/03 03:01:41 millert Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)spec_hit.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: spec_hit.c,v 1.6 2003/06/03 03:01:41 millert Exp $";
#endif
#endif /* not lint */
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: spec_hit.c,v 1.5 2002/07/18 07:13:57 pjanzen Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: spec_hit.c,v 1.5 2002/07/18 07:13:57 pjanzen Exp $";
d62 1
a62 2
special_hit(monster)
	object *monster;
d87 1
a87 2
rust(monster)
	object *monster;
d106 1
a106 2
freeze(monster)
	object *monster;
d139 1
a139 2
steal_gold(monster)
	object *monster;
d159 1
a159 2
steal_item(monster)
	object *monster;
d212 1
a212 2
disappear(monster)
	object *monster;
d229 1
a229 2
cough_up(monster)
	object *monster;
d273 1
a273 3
try_to_cough(row, col, obj)
	short row, col;
	object *obj;
d292 1
a292 2
seek_gold(monster)
	object *monster;
d324 1
a324 2
gold_at(row, col)
	short row, col;
d338 1
a338 2
check_gold_seeker(monster)
	object *monster;
d344 1
a344 2
check_imitator(monster)
	object *monster;
d360 1
a360 2
imitating(row, col)
	short row, col;
d375 1
a375 2
sting(monster)
	object *monster;
d396 1
a396 1
drop_level()
d416 1
a416 1
drain_life()
d445 1
a445 2
m_confuse(monster)
	object *monster;
d465 1
a465 2
flame_broil(monster)
	object *monster;
d491 1
a491 2
get_dir(srow, scol, drow, dcol)
	short srow, scol, drow, dcol;
@


1.5
log
@- string handling patch from David Holland, minimally modified.  Highlights
are fewer magic constants, sprintf->snprintf, and better scorefile handling.
Also, won't hang if forking a subshell fails.
- a few needless functions have been trimmed, and a few extra defaults have
been added to a few switches, just in case.
@
text
@d1 1
a1 1
/*	$OpenBSD: spec_hit.c,v 1.4 2001/08/12 19:52:56 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD$";
@


1.4
log
@make get_input_line more general (only affects wizard mode)
make special attacks a bit less likely in wizard mode
remove declarations of a few nonexistant functions
@
text
@d1 1
a1 1
/*	$OpenBSD: spec_hit.c,v 1.3 1998/08/22 08:55:48 pjanzen Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: spec_hit.c,v 1.3 1998/08/22 08:55:48 pjanzen Exp $";
d101 1
a101 1
			message("the rust vanishes instantly", 0);
d106 1
a106 1
		message("your armor weakens", 0);
d128 1
a128 1
		message("you are frozen", 1);
d140 1
a140 1
		message(you_can_move_again, 1);
d161 1
a161 1
	message("your purse feels lighter", 0);
a205 1
	(void) strcpy(desc, "she stole ");
d210 2
a211 2
	get_desc(obj, desc+10);
	message(desc, 0);
a362 2
	char msg[80];

d369 1
a369 2
			sprintf(msg, "wait, that's a %s!", mon_name(monster));
			message(msg, 1);
a396 1
	char msg[80];
d407 2
a408 3
		sprintf(msg, "the %s's bite has weakened you",
		mon_name(monster));
		message(msg, 0);
d445 1
a445 1
		message("you feel weaker", 0);
a466 2
	char msg[80];

d476 2
a477 2
		sprintf(msg, "the gaze of the %s has confused you", mon_name(monster));
		message(msg, 1);
@


1.3
log
@More largely NetBSD-inspired code cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD$";
d69 1
a69 1
	if ((monster->m_flags & CONFUSED) && rand_percent(66)) {
d71 3
a73 2
	}
	if (monster->m_flags & RUSTS) {
d75 1
a75 2
	}
	if ((monster->m_flags & HOLDS) && !levitate) {
d77 1
a77 2
	}
	if (monster->m_flags & FREEZES) {
d79 1
a79 2
	}
	if (monster->m_flags & STINGS) {
d81 1
a81 2
	}
	if (monster->m_flags & DRAINS_LIFE) {
d83 1
a83 2
	}
	if (monster->m_flags & DROPS_LEVEL) {
d85 1
a85 2
	}
	if (monster->m_flags & STEALS_GOLD) {
d87 1
a87 1
	} else if (monster->m_flags & STEALS_ITEM) {
a88 1
	}
@


1.2
log
@tabify
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: spec_hit.c,v 1.3 1995/04/22 10:28:29 cgd Exp $";
d56 1
a56 1
 *	   gain or profit.
d65 1
a65 6
extern short cur_level, max_level, blind, levitate, ring_exp;
extern long level_points[];
extern boolean detect_monster, mon_disappeared;
extern boolean sustain_strength, maintain_armor;
extern char *you_can_move_again;

d67 1
a67 1
object *monster;
d97 1
d99 1
a99 1
object *monster;
d117 1
d119 1
a119 1
object *monster;
d151 1
d153 1
a153 1
object *monster;
d172 1
d174 1
a174 1
object *monster;
d177 1
a177 1
	short i, n, t;
d227 1
d229 1
a229 1
object *monster;
d245 1
d247 1
a247 1
object *monster;
d290 1
d292 2
a293 2
short row, col;
object *obj;
d295 2
a296 1
	if ((row < MIN_ROW) || (row > (DROWS-2)) || (col < 0) || (col>(DCOLS-1))) {
d311 1
d313 1
a313 1
object *monster;
d344 1
d346 1
a346 1
short row, col;
d359 1
d361 1
a361 1
object *monster;
d366 1
d368 1
a368 1
object *monster;
d386 1
d388 1
a388 1
register short row, col;
d391 1
a391 1
		object *object_at(), *monster;
d393 1
a393 1
		if (monster = object_at(&level_monsters, row, col)) {
d402 1
d404 1
a404 1
object *monster;
d426 1
d446 1
d475 1
d477 1
a477 1
object *monster;
d498 1
d500 1
a500 1
object *monster;
d525 1
d527 1
a527 1
short srow, scol, drow, dcol;
@


1.1
log
@Initial revision
@
text
@d55 1
a55 1
 *         gain or profit.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
