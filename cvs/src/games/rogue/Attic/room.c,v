head	1.11;
access;
symbols
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.16
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.12
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.12
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2011.07.03.05.12.15;	author martynas;	state dead;
branches;
next	1.10;

1.10
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.08.09.44.35;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.21.19.12.13;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.27.21.27.00;	author tdeval;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.18.07.13.57;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.10.18.32.46;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.08.22.08.55.45;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	97.07.23.20.05.09;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.18;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove rogue.  Its license is not acceptable for our tree;  been
unlinked from the builds for 8 years.  I've been talking with the
author 2 years ago, he didn't release a proper license.  It's clear
that the issue won't be resolved.  OK tedu@@.
@
text
@/*	$OpenBSD: room.c,v 1.10 2009/10/27 23:59:26 deraadt Exp $	*/
/*	$NetBSD: room.c,v 1.3 1995/04/22 10:28:17 cgd Exp $	*/

/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Timothy C. Stoehr.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * room.c
 *
 * This source herein may be modified and/or distributed by anybody who
 * so desires, with the following restrictions:
 *    1.)  No portion of this notice shall be removed.
 *    2.)  Credit shall not be taken for the creation of this source.
 *    3.)  This code is not to be traded, sold, or used for personal
 *         gain or profit.
 *
 */

#include "rogue.h"

room rooms[MAXROOMS];
boolean rooms_visited[MAXROOMS];

#define NOPTS 7

const struct option {
	const char *prompt;
	boolean is_bool;
	char **strval;
	boolean *bval;
} options[NOPTS] = {
	{
		"Show position only at end of run (\"jump\"): ",
		1, (char **) NULL, &jump
	},
	{
		"Follow turnings in passageways (\"passgo\"): ",
		1, (char **) NULL, &passgo
	},
	{
		"Don't print skull when killed (\"noskull\" or \"notombstone\"): ",
		1, (char **) NULL, &no_skull
	},
	{
		"Ask player before saying 'Okay, bye-bye!' (\"askquit\"): ",
		1, (char **) NULL, &ask_quit
	},
	{
		"Name (\"name\"): ",
		0, &nick_name, (boolean *) NULL
	},
	{
		"Fruit (\"fruit\"): ",
		0, &fruit, (boolean *) NULL
	},
	{
		"Save file (\"file\"): ",
		0, &save_file, (boolean *) NULL
	}
};

void
light_up_room(int rn)
{
	short i, j;

	if (!blind) {
		for (i = rooms[rn].top_row;
			i <= rooms[rn].bottom_row; i++) {
			for (j = rooms[rn].left_col;
				j <= rooms[rn].right_col; j++) {
				if (dungeon[i][j] & MONSTER) {
					object *monster;

					if ((monster = object_at(&level_monsters, i, j))) {
						dungeon[monster->row][monster->col] &= (~MONSTER);
						monster->trail_char =
							get_dungeon_char(monster->row, monster->col);
						dungeon[monster->row][monster->col] |= MONSTER;
					}
				}
				mvaddch(i, j, get_dungeon_char(i, j));
			}
		}
		mvaddch(rogue.row, rogue.col, rogue.fchar);
	}
}

void
light_passage(short row, short col)
{
	short i, j, i_end, j_end;

	if (blind) {
		return;
	}
	i_end = (row < (DROWS-2)) ? 1 : 0;
	j_end = (col < (DCOLS-1)) ? 1 : 0;

	for (i = ((row > MIN_ROW) ? -1 : 0); i <= i_end; i++) {
		for (j = ((col > 0) ? -1 : 0); j <= j_end; j++) {
			if (can_move(row, col, row+i, col+j)) {
				mvaddch(row+i, col+j, get_dungeon_char(row+i, col+j));
			}
		}
	}
}

void
darken_room(short rn)
{
	short i, j;

	for (i = rooms[rn].top_row + 1; i < rooms[rn].bottom_row; i++) {
		for (j = rooms[rn].left_col + 1; j < rooms[rn].right_col; j++) {
			if (blind) {
				mvaddch(i, j, ' ');
			} else {
				if (!(dungeon[i][j] & (OBJECT | STAIRS)) &&
					!(detect_monster && (dungeon[i][j] & MONSTER))) {
					if (!imitating(i, j)) {
						mvaddch(i, j, ' ');
					}
					if ((dungeon[i][j] & TRAP) && (!(dungeon[i][j] & HIDDEN))) {
						mvaddch(i, j, '^');
					}
				}
			}
		}
	}
}

char
get_dungeon_char(short row, short col)
{
	unsigned short mask = dungeon[row][col];

	if (mask & MONSTER) {
		return(gmc_row_col(row, col));
	}
	if (mask & OBJECT) {
		object *obj;

		obj = object_at(&level_objects, row, col);
		return(get_mask_char(obj->what_is));
	}
	if (mask & (TUNNEL | STAIRS | HORWALL | VERTWALL | FLOOR | DOOR)) {
		if ((mask & (TUNNEL| STAIRS)) && (!(mask & HIDDEN))) {
			return(((mask & STAIRS) ? '%' : '#'));
		}
		if (mask & HORWALL) {
			return('-');
		}
		if (mask & VERTWALL) {
			return('|');
		}
		if (mask & FLOOR) {
			if (mask & TRAP) {
				if (!(dungeon[row][col] & HIDDEN)) {
					return('^');
				}
			}
			return('.');
		}
		if (mask & DOOR) {
			if (mask & HIDDEN) {
				if (((col > 0) && (dungeon[row][col-1] & HORWALL)) ||
					((col < (DCOLS-1)) && (dungeon[row][col+1] & HORWALL))) {
					return('-');
				} else {
					return('|');
				}
			} else {
				return('+');
			}
		}
	}
	return(' ');
}

char
get_mask_char(unsigned short mask)
{
		switch(mask) {
		case SCROL:
			return('?');
		case POTION:
			return('!');
		case GOLD:
			return('*');
		case FOOD:
			return(':');
		case WAND:
			return('/');
		case ARMOR:
			return(']');
		case WEAPON:
			return(')');
		case RING:
			return('=');
		case AMULET:
			return(',');
		default:
			return('~');	/* unknown, something is wrong */
		}
}

void
gr_row_col(short *row, short *col, unsigned short mask)
{
	short rn;
	short r, c;

	do {
		r = get_rand(MIN_ROW, DROWS-2);
		c = get_rand(0, DCOLS-1);
		rn = get_room_number(r, c);
	} while ((rn == NO_ROOM) ||
		(!(dungeon[r][c] & mask)) ||
		(dungeon[r][c] & (~mask)) ||
		(!(rooms[rn].is_room & (R_ROOM | R_MAZE))) ||
		((r == rogue.row) && (c == rogue.col)));

	*row = r;
	*col = c;
}

short
gr_room(void)
{
	short i;

	do {
		i = get_rand(0, MAXROOMS-1);
	} while (!(rooms[i].is_room & (R_ROOM | R_MAZE)));

	return(i);
}

short
party_objects(int rn)
{
	short i, j, nf = 0;
	object *obj;
	short n, N, row, col;
	boolean found;

	N = ((rooms[rn].bottom_row - rooms[rn].top_row) - 1) *
		((rooms[rn].right_col - rooms[rn].left_col) - 1);
	n =  get_rand(5, 10);
	if (n > N) {
		n = N - 2;
	}
	for (i = 0; i < n; i++) {
		for (j = found = 0; ((!found) && (j < 250)); j++) {
			row = get_rand(rooms[rn].top_row+1,
					   rooms[rn].bottom_row-1);
			col = get_rand(rooms[rn].left_col+1,
					   rooms[rn].right_col-1);
			if ((dungeon[row][col] == FLOOR) || (dungeon[row][col] == TUNNEL)) {
				found = 1;
			}
		}
		if (found) {
			obj = gr_object();
			place_at(obj, row, col);
			nf++;
		}
	}
	return(nf);
}

short
get_room_number(short row, short col)
{
	short i;

	for (i = 0; i < MAXROOMS; i++) {
		if ((row >= rooms[i].top_row) && (row <= rooms[i].bottom_row) &&
			(col >= rooms[i].left_col) && (col <= rooms[i].right_col)) {
			return(i);
		}
	}
	return(NO_ROOM);
}

boolean
is_all_connected(void)
{
	short i, starting_room;

	starting_room = 0;
	for (i = 0; i < MAXROOMS; i++) {
		rooms_visited[i] = 0;
		if (rooms[i].is_room & (R_ROOM | R_MAZE)) {
			starting_room = i;
		}
	}

	visit_rooms(starting_room);

	for (i = 0; i < MAXROOMS; i++) {
		if ((rooms[i].is_room & (R_ROOM | R_MAZE)) && (!rooms_visited[i])) {
			return(0);
		}
	}
	return(1);
}

void
visit_rooms(int rn)
{
	short i;
	short oth_rn;

	rooms_visited[rn] = 1;

	for (i = 0; i < 4; i++) {
		oth_rn = rooms[rn].doors[i].oth_room;
		if ((oth_rn >= 0) && (!rooms_visited[oth_rn])) {
			visit_rooms(oth_rn);
		}
	}
}

void
draw_magic_map(void)
{
	short i, j, ch, och;
	unsigned short mask = (HORWALL | VERTWALL | DOOR | TUNNEL | TRAP | STAIRS |
			MONSTER);
	unsigned short s;

	for (i = 0; i < DROWS; i++) {
		for (j = 0; j < DCOLS; j++) {
			s = dungeon[i][j];
			if (s & mask) {
				if (((ch = mvinch(i, j)) == ' ') ||
					((ch >= 'A') && (ch <= 'Z')) || (s & (TRAP | HIDDEN))) {
					och = ch;
					dungeon[i][j] &= (~HIDDEN);
					if (s & HORWALL) {
						ch = '-';
					} else if (s & VERTWALL) {
						ch = '|';
					} else if (s & DOOR) {
						ch = '+';
					} else if (s & TRAP) {
						ch = '^';
					} else if (s & STAIRS) {
						ch = '%';
					} else if (s & TUNNEL) {
						ch = '#';
					} else {
						continue;
					}
					if ((!(s & MONSTER)) || (och == ' ')) {
						addch(ch);
					}
					if (s & MONSTER) {
						object *monster;

						if ((monster = object_at(&level_monsters, i, j)))
						{
							monster->trail_char = ch;
						}
					}
				}
			}
		}
	}
}

void
dr_course(object *monster, boolean entering, short row, short col)
{
	short i, j, k, rn;
	short r, rr;

	monster->row = row;
	monster->col = col;

	if (mon_sees(monster, rogue.row, rogue.col)) {
		monster->trow = NO_ROOM;
		return;
	}
	rn = get_room_number(row, col);

	if (entering) {		/* entering room */
		/* look for door to some other room */
		r = get_rand(0, MAXROOMS-1);
		for (i = 0; i < MAXROOMS; i++) {
			rr = (r + i) % MAXROOMS;
			if ((!(rooms[rr].is_room & (R_ROOM | R_MAZE))) || (rr == rn)) {
				continue;
			}
			for (k = 0; k < 4; k++) {
				if (rooms[rr].doors[k].oth_room == rn) {
					monster->trow = rooms[rr].doors[k].oth_row;
					monster->tcol = rooms[rr].doors[k].oth_col;
					if ((monster->trow == row) &&
						(monster->tcol == col)) {
						continue;
					}
					return;
				}
			}
		}
		/* look for door to dead end */
		for (i = rooms[rn].top_row; i <= rooms[rn].bottom_row; i++) {
			for (j = rooms[rn].left_col; j <= rooms[rn].right_col; j++) {
				if ((i != monster->row) && (j != monster->col) &&
					(dungeon[i][j] & DOOR)) {
					monster->trow = i;
					monster->tcol = j;
					return;
				}
			}
		}
		/* return monster to room that he came from */
		for (i = 0; i < MAXROOMS; i++) {
			for (j = 0; j < 4; j++) {
				if (rooms[i].doors[j].oth_room == rn) {
					for (k = 0; k < 4; k++) {
						if (rooms[rn].doors[k].oth_room == i) {
							monster->trow = rooms[rn].doors[k].oth_row;
							monster->tcol = rooms[rn].doors[k].oth_col;
							return;
						}
					}
				}
			}
		}
		/* no place to send monster */
		monster->trow = NO_ROOM;
	} else {		/* exiting room */
		if (!get_oth_room(rn, &row, &col)) {
			monster->trow = NO_ROOM;
		} else {
			monster->trow = row;
			monster->tcol = col;
		}
	}
}

boolean
get_oth_room(short rn, short *row, short *col)
{
	short d = -1;

	if (*row == rooms[rn].top_row) {
		d = UPWARD/2;
	} else if (*row == rooms[rn].bottom_row) {
		d = DOWN/2;
	} else if (*col == rooms[rn].left_col) {
		d = LEFT/2;
	} else if (*col == rooms[rn].right_col) {
		d = RIGHT/2;
	}
	if ((d != -1) && (rooms[rn].doors[d].oth_room >= 0)) {
		*row = rooms[rn].doors[d].oth_row;
		*col = rooms[rn].doors[d].oth_col;
		return(1);
	}
	return(0);
}

void
edit_opts(void)
{
	char save[NOPTS+1][DCOLS];
	short i, j;
	short ch;
	boolean done = 0;
	char buf[MAX_OPT_LEN + 2];

	for (i = 0; i < NOPTS+1; i++) {
		for (j = 0; j < DCOLS; j++) {
			save[i][j] = mvinch(i, j);
		}
		if (i < NOPTS) {
			opt_show(i);
		}
	}
	opt_go(0);
	i = 0;

	while (!done) {
		refresh();
		ch = rgetchar();
CH:
		switch(ch) {
		case '\033':
			done = 1;
			break;
		case '\012':
		case '\015':
			if (i == (NOPTS - 1)) {
				mvaddstr(NOPTS, 0, press_space);
				refresh();
				wait_for_ack();
				done = 1;
			} else {
				i++;
				opt_go(i);
			}
			break;
		case '-':
			if (i > 0) {
				opt_go(--i);
			} else {
				beep();
			}
			break;
		case 't':
		case 'T':
		case 'f':
		case 'F':
			if (options[i].is_bool) {
				*(options[i].bval) = (((ch == 't') || (ch == 'T')) ? 1 : 0);
				opt_show(i);
				opt_go(++i);
				break;
			}
		default:
			if (options[i].is_bool) {
				beep();
				break;
			}
			j = 0;
			if ((ch == '\b') || ((ch >= ' ') && (ch <= '~'))) {
				opt_erase(i);
				do {
					if ((ch >= ' ') && (ch <= '~') && (j < MAX_OPT_LEN)) {
						buf[j++] = ch;
						buf[j] = '\0';
						addch(ch);
					} else if ((ch == '\b' || ch == erasechar()) &&
					    (j > 0)) {
						buf[--j] = '\0';
						move(i, j + strlen(options[i].prompt));
						addch(' ');
						move(i, j + strlen(options[i].prompt));
					}
					refresh();
					ch = rgetchar();
				} while ((ch != '\012') && (ch != '\015') && (ch != '\033'));
				if (j != 0) {
					/* We rely on the option string being
					 * allocated to hold MAX_OPT_LEN+2
					 * bytes. This is arranged in init.c.
					 */
					(void) strlcpy(*(options[i].strval),
					    buf, MAX_OPT_LEN+2);
				}
				opt_show(i);
				goto CH;
			} else {
				beep();
			}
			break;
		}
	}

	for (i = 0; i < NOPTS+1; i++) {
		move(i, 0);
		for (j = 0; j < DCOLS; j++) {
			addch(save[i][j]);
		}
	}
}

void
opt_show(int i)
{
	const char *s;
	const struct option *opt = &options[i];

	opt_erase(i);

	if (opt->is_bool) {
		s = *(opt->bval) ? "True" : "False";
	} else {
		s = *(opt->strval);
	}
	addstr(s);
}

void
opt_erase(int i)
{
	const struct option *opt = &options[i];

	mvaddstr(i, 0, opt->prompt);
	clrtoeol();
}

void
opt_go(int i)
{
	move(i, strlen(options[i].prompt));
}

void
do_shell(void)
{
	const char *sh;

	md_ignore_signals();
	if (!(sh = md_getenv("SHELL"))) {
		sh = "/bin/sh";
	}
	move(LINES-1, 0);
	refresh();
	stop_window();
	printf("\nCreating new shell...\n");
	md_shell(sh);
	start_window();
	wrefresh(curscr);
	md_heed_signals();
}
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: room.c,v 1.9 2006/03/08 09:44:35 otto Exp $	*/
@


1.9
log
@Ansify; from Alexey Dobriyan; hope the license gets cleared up, so we
can include this in the build again.
@
text
@d1 1
a1 1
/*	$OpenBSD: room.c,v 1.8 2004/01/21 19:12:13 espie Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)room.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: room.c,v 1.8 2004/01/21 19:12:13 espie Exp $";
#endif
#endif /* not lint */
@


1.8
log
@make rogue const-correct, and fix one write-strings issue.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: room.c,v 1.7 2003/06/03 03:01:41 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: room.c,v 1.7 2003/06/03 03:01:41 millert Exp $";
d100 1
a100 2
light_up_room(rn)
	int rn;
d127 1
a127 2
light_passage(row, col)
	short row, col;
d147 1
a147 2
darken_room(rn)
	short rn;
d171 1
a171 2
get_dungeon_char(row, col)
	short row, col;
d219 1
a219 2
get_mask_char(mask)
	unsigned short mask;
d246 1
a246 3
gr_row_col(row, col, mask)
	short *row, *col;
	unsigned short mask;
d266 1
a266 1
gr_room()
d278 1
a278 2
party_objects(rn)
	int rn;
d311 1
a311 2
get_room_number(row, col)
	short row, col;
d325 1
a325 1
is_all_connected()
d348 1
a348 2
visit_rooms(rn)
	int rn;
d364 1
a364 1
draw_magic_map()
d412 1
a412 4
dr_course(monster, entering, row, col)
	object *monster;
	boolean entering;
	short row, col;
d484 1
a484 2
get_oth_room(rn, row, col)
	short rn, *row, *col;
d506 1
a506 1
edit_opts()
d611 1
a611 2
opt_show(i)
	int i;
d627 1
a627 2
opt_erase(i)
	int i;
d636 1
a636 2
opt_go(i)
	int i;
d642 1
a642 1
do_shell()
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: room.c,v 1.6 2003/04/27 21:27:00 tdeval Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: room.c,v 1.6 2003/04/27 21:27:00 tdeval Exp $";
d661 1
a661 1
	char *sh;
@


1.6
log
@strcpy -> strlcpy
@
text
@d1 1
a1 1
/*	$OpenBSD: room.c,v 1.5 2002/07/18 07:13:57 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: room.c,v 1.5 2002/07/18 07:13:57 pjanzen Exp $";
@


1.5
log
@- string handling patch from David Holland, minimally modified.  Highlights
are fewer magic constants, sprintf->snprintf, and better scorefile handling.
Also, won't hang if forking a subshell fails.
- a few needless functions have been trimmed, and a few extra defaults have
been added to a few switches, just in case.
@
text
@d1 1
a1 1
/*	$OpenBSD: room.c,v 1.4 2001/08/10 18:32:46 pjanzen Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD$";
d608 2
a609 1
					(void) strcpy(*(options[i].strval), buf);
@


1.4
log
@Minor -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: room.c,v 1.3 1998/08/22 08:55:45 pjanzen Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: room.c,v 1.3 1998/08/22 08:55:45 pjanzen Exp $";
d67 2
a68 2
struct option {
	char *prompt;
d567 1
a567 1
				sound_bell();
d582 1
a582 1
				sound_bell();
d586 1
a586 1
			if ((ch == '\010') || ((ch >= ' ') && (ch <= '~'))) {
d593 2
a594 1
					} else if ((ch == '\010') && (j > 0)) {
d604 4
d613 1
a613 1
				sound_bell();
d631 2
a632 2
	char *s;
	struct option *opt = &options[i];
d648 1
a648 1
	struct option *opt = &options[i];
a663 1
#ifdef UNIX
a677 1
#endif
@


1.3
log
@More largely NetBSD-inspired code cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD$";
d75 1
a75 1
		1, (char **) 0, &jump
d79 1
a79 1
		1, (char **) 0, &passgo
d83 1
a83 1
		1, (char **) 0, &no_skull
d87 1
a87 1
		1, (char **) 0, &ask_quit
d91 1
a91 1
		0, &nick_name
d95 1
a95 1
		0, &fruit
d99 1
a99 1
		0, &save_file
@


1.2
log
@tabify
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: room.c,v 1.3 1995/04/22 10:28:17 cgd Exp $";
d56 1
a56 1
 *	   gain or profit.
a64 4
extern short blind;
extern boolean detect_monster, jump, passgo, no_skull, ask_quit;
extern char *nick_name, *fruit, *save_file, *press_space;

d103 1
d105 1
a105 1
int rn;
d117 1
a117 1
					if (monster = object_at(&level_monsters, i, j)) {
d131 1
d133 1
d152 1
d154 1
a154 1
short rn;
d177 1
d179 1
a179 1
register row, col;
d181 1
a181 1
	register unsigned short mask = dungeon[row][col];
d226 1
d228 1
a228 1
register unsigned short mask;
d254 1
d256 2
a257 2
short *row, *col;
unsigned short mask;
d276 1
d288 1
d290 1
d322 1
d324 1
a324 1
register row, col;
d337 1
d342 1
d360 1
d362 1
a362 1
int rn;
d377 1
d414 2
a415 1
						if (monster = object_at(&level_monsters, i, j)) {
d425 1
d427 3
a429 3
object *monster;
boolean entering;
short row, col;
d500 1
d502 1
a502 1
short rn, *row, *col;
d523 1
d622 1
d624 1
a624 1
int i;
d639 1
d641 1
a641 1
int i;
d649 1
d651 1
a651 1
int i;
d656 1
@


1.1
log
@Initial revision
@
text
@d55 1
a55 1
 *         gain or profit.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
