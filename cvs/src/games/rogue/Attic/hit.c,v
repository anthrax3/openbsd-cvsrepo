head	1.9;
access;
symbols
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.5.0.2
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.3.0.16
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.14
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.12
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2011.07.03.05.12.15;	author martynas;	state dead;
branches;
next	1.8;

1.8
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.08.09.44.35;	author otto;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.21.19.12.13;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.18.07.13.57;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.08.22.08.55.26;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	97.07.23.20.05.00;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Remove rogue.  Its license is not acceptable for our tree;  been
unlinked from the builds for 8 years.  I've been talking with the
author 2 years ago, he didn't release a proper license.  It's clear
that the issue won't be resolved.  OK tedu@@.
@
text
@/*	$OpenBSD: hit.c,v 1.8 2009/10/27 23:59:26 deraadt Exp $	*/
/*	$NetBSD: hit.c,v 1.3 1995/04/22 10:27:30 cgd Exp $	*/

/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Timothy C. Stoehr.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * hit.c
 *
 * This source herein may be modified and/or distributed by anybody who
 * so desires, with the following restrictions:
 *    1.)  No portion of this notice shall be removed.
 *    2.)  Credit shall not be taken for the creation of this source.
 *    3.)  This code is not to be traded, sold, or used for personal
 *         gain or profit.
 *
 */

#include "rogue.h"

object *fight_monster = 0;
char hit_message[HIT_MESSAGE_LEN] = "";

void
mon_hit(object *monster)
{
	short damage, hit_chance;
	const char *mn;
	float minus;

	if (fight_monster && (monster != fight_monster)) {
		fight_monster = 0;
	}
	monster->trow = NO_ROOM;
	if (cur_level >= (AMULET_LEVEL * 2)) {
		hit_chance = 100;
	} else {
		hit_chance = monster->m_hit_chance;
		hit_chance -= (((2 * rogue.exp) + (2 * ring_exp)) - r_rings);
	}
	if (wizard) {
		hit_chance /= 2;
	}
	if (!fight_monster) {
		interrupted = 1;
	}
	mn = mon_name(monster);

	if (!rand_percent(hit_chance)) {
		if (!fight_monster) {
			messagef(1, "%sthe %s misses", hit_message, mn);
			hit_message[0] = 0;
		}
		return;
	}
	if (!fight_monster) {
		messagef(1, "%sthe %s hit", hit_message, mn);
		hit_message[0] = 0;
	}
	if (!(monster->m_flags & STATIONARY)) {
		damage = get_damage(monster->m_damage, 1);
		if (cur_level >= (AMULET_LEVEL * 2)) {
			minus = (float) ((AMULET_LEVEL * 2) - cur_level);
		} else {
			minus = (float) get_armor_class(rogue.armor) * 3.00;
			minus = minus/100.00 * (float) damage;
		}
		damage -= (short) minus;
	} else {
		damage = monster->stationary_damage++;
	}
	if (wizard) {
		damage /= 3;
	}
	if (damage > 0) {
		rogue_damage(damage, monster, 0);
	}
	if (monster->m_flags & SPECIAL_HIT) {
		special_hit(monster);
	}
}

void
rogue_hit(object *monster, boolean force_hit)
{
	short damage, hit_chance;

	if (monster) {
		if (check_imitator(monster)) {
			return;
		}
		hit_chance = force_hit ? 100 : get_hit_chance(rogue.weapon);

		if (wizard) {
			hit_chance *= 2;
		}
		if (!rand_percent(hit_chance)) {
			if (!fight_monster) {
				(void) strlcpy(hit_message, "you miss  ",
				    sizeof(hit_message));
			}
			goto RET;
		}
		damage = get_weapon_damage(rogue.weapon);
		if (wizard) {
			damage *= 3;
		}
		if (con_mon) {
			s_con_mon(monster);
		}
		if (mon_damage(monster, damage)) {	/* still alive? */
			if (!fight_monster) {
				(void) strlcpy(hit_message, "you hit  ",
				    sizeof(hit_message));
			}
		}
RET:	check_gold_seeker(monster);
		wake_up(monster);
	}
}

void
rogue_damage(short d, object *monster, short other)
{
	if (d >= rogue.hp_current) {
		rogue.hp_current = 0;
		print_stats(STAT_HP);
		killed_by(monster, other);
	}
	if (d > 0) {
		rogue.hp_current -= d;
		print_stats(STAT_HP);
	}
}

int
get_damage(const char *ds, boolean r)
{
	int i = 0, j, n, d, total = 0;

	while (ds[i]) {
		n = get_number(ds + i);
		while ((ds[i] != 'd') && ds[i])
			i++;
		if (ds[i] == 'd')
			i++;
		d = get_number(ds + i);
		while ((ds[i] != '/') && ds[i])
			i++;
		if (ds[i] == '/')
			i++;

		for (j = 0; j < n; j++) {
			if (r) {
				total += get_rand(1, d);
			} else {
				total += d;
			}
		}
	}
	return(total);
}

int
get_w_damage(const object *obj)
{
	char new_damage[32];
	int tmp_to_hit, tmp_damage;
	int i = 0;

	if ((!obj) || (obj->what_is != WEAPON)) {
		return(-1);
	}
	tmp_to_hit = get_number(obj->damage) + obj->hit_enchant;
	while ((obj->damage[i++] != 'd') && obj->damage[i])
		i++;
	if (obj->damage[i] == 'd')
		i++;
	tmp_damage = get_number(obj->damage + i) + obj->d_enchant;

	snprintf(new_damage, sizeof(new_damage), "%dd%d", tmp_to_hit, tmp_damage);

	return(get_damage(new_damage, 1));
}

int
get_number(const char *s)
{
	int i = 0;
	int total = 0;

	while ((s[i] >= '0') && (s[i] <= '9')) {
		total = (10 * total) + (s[i] - '0');
		i++;
	}
	return(total);
}

int
to_hit(object *obj)
{
	if (!obj) {
		return(1);
	}
	return(get_number(obj->damage) + obj->hit_enchant);
}

int
damage_for_strength(void)
{
	short strength;

	strength = rogue.str_current + add_strength;

	if (strength <= 6) {
		return(strength-5);
	}
	if (strength <= 14) {
		return(1);
	}
	if (strength <= 17) {
		return(3);
	}
	if (strength <= 18) {
		return(4);
	}
	if (strength <= 20) {
		return(5);
	}
	if (strength <= 21) {
		return(6);
	}
	if (strength <= 30) {
		return(7);
	}
	return(8);
}

int
mon_damage(object *monster, short damage)
{
	const char *mn;
	short row, col;

	monster->hp_to_kill -= damage;

	if (monster->hp_to_kill <= 0) {
		row = monster->row;
		col = monster->col;
		dungeon[row][col] &= ~MONSTER;
		mvaddch(row, col, (int) get_dungeon_char(row, col));

		fight_monster = 0;
		cough_up(monster);
		mn = mon_name(monster);
		messagef(1, "%sdefeated the %s", hit_message, mn);
		hit_message[0] = 0;
		add_exp(monster->kill_exp, 1);
		take_from_pack(monster, &level_monsters);

		if (monster->m_flags & HOLDS) {
			being_held = 0;
		}
		free_object(monster);
		return(0);
	}
	return(1);
}

void
fight(boolean to_the_death)
{
	short ch, c, d;
	short row, col;
	boolean first_miss = 1;
	short possible_damage;
	object *monster;

	while (!is_direction(ch = rgetchar(), &d)) {
		beep();
		if (first_miss) {
			messagef(0, "direction?");
			first_miss = 0;
		}
	}
	check_message();
	if (ch == CANCEL) {
		return;
	}
	row = rogue.row; col = rogue.col;
	get_dir_rc(d, &row, &col, 0);

	c = mvinch(row, col);
	if (((c < 'A') || (c > 'Z')) ||
		(!can_move(rogue.row, rogue.col, row, col))) {
		messagef(0, "I see no monster there");
		return;
	}
	if (!(fight_monster = object_at(&level_monsters, row, col))) {
		return;
	}
	if (!(fight_monster->m_flags & STATIONARY)) {
		possible_damage = ((get_damage(fight_monster->m_damage, 0) * 2) / 3);
	} else {
		possible_damage = fight_monster->stationary_damage - 1;
	}
	while (fight_monster) {
		(void) one_move_rogue(ch, 0);
		if (((!to_the_death) && (rogue.hp_current <= possible_damage)) ||
			interrupted || (!(dungeon[row][col] & MONSTER))) {
			fight_monster = 0;
		} else {
			monster = object_at(&level_monsters, row, col);
			if (monster != fight_monster) {
				fight_monster = 0;
			}
		}
	}
}

void
get_dir_rc(short dir, short *row, short *col, short allow_off_screen)
{
	switch(dir) {
	case LEFT:
		if (allow_off_screen || (*col > 0)) {
			(*col)--;
		}
		break;
	case DOWN:
		if (allow_off_screen || (*row < (DROWS-2))) {
			(*row)++;
		}
		break;
	case UPWARD:
		if (allow_off_screen || (*row > MIN_ROW)) {
			(*row)--;
		}
		break;
	case RIGHT:
		if (allow_off_screen || (*col < (DCOLS-1))) {
			(*col)++;
		}
		break;
	case UPLEFT:
		if (allow_off_screen || ((*row > MIN_ROW) && (*col > 0))) {
			(*row)--;
			(*col)--;
		}
		break;
	case UPRIGHT:
		if (allow_off_screen || ((*row > MIN_ROW) && (*col < (DCOLS-1)))) {
			(*row)--;
			(*col)++;
		}
		break;
	case DOWNRIGHT:
		if (allow_off_screen || ((*row < (DROWS-2)) && (*col < (DCOLS-1)))) {
			(*row)++;
			(*col)++;
		}
		break;
	case DOWNLEFT:
		if (allow_off_screen || ((*row < (DROWS-2)) && (*col > 0))) {
			(*row)++;
			(*col)--;
		}
		break;
	}
}

int
get_hit_chance(object *weapon)
{
	short hit_chance;

	hit_chance = 40;
	hit_chance += 3 * to_hit(weapon);
	hit_chance += (((2 * rogue.exp) + (2 * ring_exp)) - r_rings);
	return(hit_chance);
}

int
get_weapon_damage(object *weapon)
{
	short damage;

	damage = get_w_damage(weapon);
	damage += damage_for_strength();
	damage += ((((rogue.exp + ring_exp) - r_rings) + 1) / 2);
	return(damage);
}

void
s_con_mon(object *monster)
{
	if (con_mon) {
		monster->m_flags |= CONFUSED;
		monster->moves_confused += get_rand(12, 22);
		messagef(0, "the monster appears confused");
		con_mon = 0;
	}
}
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: hit.c,v 1.7 2006/03/08 09:44:35 otto Exp $	*/
@


1.7
log
@Ansify; from Alexey Dobriyan; hope the license gets cleared up, so we
can include this in the build again.
@
text
@d1 1
a1 1
/*	$OpenBSD: hit.c,v 1.6 2004/01/21 19:12:13 espie Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)hit.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: hit.c,v 1.6 2004/01/21 19:12:13 espie Exp $";
#endif
#endif /* not lint */
@


1.6
log
@make rogue const-correct, and fix one write-strings issue.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: hit.c,v 1.5 2003/06/03 03:01:41 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: hit.c,v 1.5 2003/06/03 03:01:41 millert Exp $";
d62 1
a62 2
mon_hit(monster)
	object *monster;
d121 1
a121 3
rogue_hit(monster, force_hit)
	object *monster;
	boolean force_hit;
d160 1
a160 4
rogue_damage(d, monster, other)
	short d;
	object *monster;
	short other;
d174 1
a174 3
get_damage(ds, r)
	const char *ds;
	boolean r;
d202 1
a202 2
get_w_damage(obj)
	const object *obj;
d224 1
a224 2
get_number(s)
	const char *s;
d237 1
a237 2
to_hit(obj)
	object *obj;
d246 1
a246 1
damage_for_strength()
d277 1
a277 3
mon_damage(monster, damage)
	object *monster;
	short damage;
d308 1
a308 2
fight(to_the_death)
	boolean to_the_death;
d359 1
a359 4
get_dir_rc(dir, row, col, allow_off_screen)
	short dir;
	short *row, *col;
	short allow_off_screen;
d410 1
a410 2
get_hit_chance(weapon)
	object *weapon;
d421 1
a421 2
get_weapon_damage(weapon)
	object *weapon;
d432 1
a432 2
s_con_mon(monster)
	object *monster;
@


1.5
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: hit.c,v 1.4 2002/07/18 07:13:57 pjanzen Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: hit.c,v 1.4 2002/07/18 07:13:57 pjanzen Exp $";
d66 1
a66 1
	char *mn;
d181 1
a181 1
	char *ds;
d234 1
a234 1
	char *s;
d292 1
a292 1
	char *mn;
@


1.4
log
@- string handling patch from David Holland, minimally modified.  Highlights
are fewer magic constants, sprintf->snprintf, and better scorefile handling.
Also, won't hang if forking a subshell fails.
- a few needless functions have been trimmed, and a few extra defaults have
been added to a few switches, just in case.
@
text
@d1 1
a1 1
/*	$OpenBSD: hit.c,v 1.3 1998/08/22 08:55:26 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD$";
@


1.3
log
@More largely NetBSD-inspired code cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD$";
d63 1
a63 1
char hit_message[80] = "";
d93 1
a93 3
			sprintf(hit_message + strlen(hit_message),
			    "the %s misses", mn);
			message(hit_message, 1);
d99 1
a99 2
		sprintf(hit_message + strlen(hit_message), "the %s hit", mn);
		message(hit_message, 1);
d143 2
a144 1
				(void) strcpy(hit_message, "you miss  ");
d157 2
a158 1
				(void) strcpy(hit_message, "you hit  ");
d191 10
a200 4
		n = get_number(ds+i);
		while (ds[i++] != 'd') ;
		d = get_number(ds+i);
		while ((ds[i] != '/') && ds[i]) i++;
a208 3
		if (ds[i] == '/') {
			i++;
		}
d215 1
a215 1
	object *obj;
d217 2
a218 2
	char new_damage[12];
	int to_hit, damage;
d224 6
a229 3
	to_hit = get_number(obj->damage) + obj->hit_enchant;
	while (obj->damage[i++] != 'd') ;
	damage = get_number(obj->damage + i) + obj->d_enchant;
d231 1
a231 1
	sprintf(new_damage, "%dd%d", to_hit, damage);
a249 14
long
lget_number(s)
	char *s;
{
	short i = 0;
	long total = 0;

	while ((s[i] >= '0') && (s[i] <= '9')) {
		total = (10 * total) + (s[i] - '0');
		i++;
	}
	return(total);
}

d310 1
a310 2
		sprintf(hit_message+strlen(hit_message), "defeated the %s", mn);
		message(hit_message, 1);
d335 1
a335 1
		sound_bell();
d337 1
a337 1
			message("direction?", 0);
d351 1
a351 1
		message("I see no monster there", 0);
d461 1
a461 1
		message("the monster appears confused", 0);
@


1.2
log
@tabify
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: hit.c,v 1.3 1995/04/22 10:27:30 cgd Exp $";
d56 1
a56 1
 *	   gain or profit.
d65 1
a65 4
extern short halluc, blind, cur_level;
extern short add_strength, ring_exp, r_rings;
extern boolean being_held, interrupted, wizard, con_mon;

d67 1
a67 1
register object *monster;
d93 2
a94 1
			sprintf(hit_message + strlen(hit_message), "the %s misses", mn);
d128 1
d130 2
a131 2
register object *monster;
boolean force_hit;
d167 1
d169 3
a171 3
short d;
object *monster;
short other;
d184 1
d186 2
a187 2
char *ds;
boolean r;
d189 1
a189 1
	register i = 0, j, n, d, total = 0;
d211 1
d213 1
a213 1
object *obj;
d216 2
a217 2
	register to_hit, damage;
	register i = 0;
d231 1
d233 1
a233 1
register char *s;
d235 2
a236 2
	register i = 0;
	register total = 0;
d247 1
a247 1
char *s;
d259 1
d261 1
a261 1
object *obj;
d269 1
d300 1
d302 2
a303 2
object *monster;
short damage;
d334 1
d336 1
a336 1
boolean to_the_death;
d386 1
d388 3
a390 3
short dir;
short *row, *col;
short allow_off_screen;
d440 1
d442 1
a442 1
object *weapon;
d452 1
d454 1
a454 1
object *weapon;
d464 1
d466 1
a466 1
object *monster;
@


1.1
log
@Initial revision
@
text
@d55 1
a55 1
 *         gain or profit.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
