head	1.10;
access;
symbols
	OPENBSD_4_9:1.9.0.6
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.4.0.16
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.14
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2011.07.03.05.12.15;	author martynas;	state dead;
branches;
next	1.9;

1.9
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.08.09.44.36;	author otto;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.21.19.12.13;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.18.07.13.57;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.08.22.08.55.51;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	97.07.23.20.05.12;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.12.29.23.58.43;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.19;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Remove rogue.  Its license is not acceptable for our tree;  been
unlinked from the builds for 8 years.  I've been talking with the
author 2 years ago, he didn't release a proper license.  It's clear
that the issue won't be resolved.  OK tedu@@.
@
text
@/*	$OpenBSD: use.c,v 1.9 2009/10/27 23:59:26 deraadt Exp $	*/
/*	$NetBSD: use.c,v 1.3 1995/04/22 10:28:38 cgd Exp $	*/

/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Timothy C. Stoehr.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * use.c
 *
 * This source herein may be modified and/or distributed by anybody who
 * so desires, with the following restrictions:
 *    1.)  No portion of this notice shall be removed.
 *    2.)  Credit shall not be taken for the creation of this source.
 *    3.)  This code is not to be traded, sold, or used for personal
 *	   gain or profit.
 *
 */

#include "rogue.h"

short halluc = 0;
short blind = 0;
short confused = 0;
short levitate = 0;
short haste_self = 0;
boolean see_invisible = 0;
short extra_hp = 0;
boolean detect_monster = 0;
boolean con_mon = 0;
const char *strange_feeling = "you have a strange feeling for a moment, then it passes";

void
quaff(void)
{
	short ch;
	object *obj;

	ch = pack_letter("quaff what?", POTION);

	if (ch == CANCEL) {
		return;
	}
	if (!(obj = get_letter_object(ch))) {
		messagef(0, "no such item.");
		return;
	}
	if (obj->what_is != POTION) {
		messagef(0, "you can't drink that");
		return;
	}
	switch(obj->which_kind) {
		case INCREASE_STRENGTH:
			messagef(0, "you feel stronger now, what bulging muscles!");
			rogue.str_current++;
			if (rogue.str_current > rogue.str_max) {
				rogue.str_max = rogue.str_current;
			}
			break;
		case RESTORE_STRENGTH:
			rogue.str_current = rogue.str_max;
			messagef(0, "this tastes great, you feel warm all over");
			break;
		case HEALING:
			messagef(0, "you begin to feel better");
			potion_heal(0);
			break;
		case EXTRA_HEALING:
			messagef(0, "you begin to feel much better");
			potion_heal(1);
			break;
		case POISON:
			if (!sustain_strength) {
				rogue.str_current -= get_rand(1, 3);
				if (rogue.str_current < 1) {
					rogue.str_current = 1;
				}
			}
			messagef(0, "you feel very sick now");
			if (halluc) {
				unhallucinate();
			}
			break;
		case RAISE_LEVEL:
			rogue.exp_points = level_points[rogue.exp - 1];
			messagef(0, "you suddenly feel much more skillful");
			add_exp(1, 1);
			break;
		case BLINDNESS:
			go_blind();
			break;
		case HALLUCINATION:
			messagef(0, "oh wow, everything seems so cosmic");
			halluc += get_rand(500, 800);
			break;
		case DETECT_MONSTER:
			show_monsters();
			if (!(level_monsters.next_monster)) {
				messagef(0, "%s", strange_feeling);
			}
			break;
		case DETECT_OBJECTS:
			if (level_objects.next_object) {
				if (!blind) {
					show_objects();
				}
			} else {
				messagef(0, "%s", strange_feeling);
			}
			break;
		case CONFUSION:
			messagef(0, (halluc ? "what a trippy feeling" :
			    "you feel confused"));
			cnfs();
			break;
		case LEVITATION:
			messagef(0, "you start to float in the air");
			levitate += get_rand(15, 30);
			being_held = bear_trap = 0;
			break;
		case HASTE_SELF:
			messagef(0, "you feel yourself moving much faster");
			haste_self += get_rand(11, 21);
			if (!(haste_self % 2)) {
				haste_self++;
			}
			break;
		case SEE_INVISIBLE:
			messagef(0, "hmm, this potion tastes like %s juice", fruit);
			if (blind) {
				unblind();
			}
			see_invisible = 1;
			relight();
			break;
	}
	print_stats((STAT_STRENGTH | STAT_HP));
	if (id_potions[obj->which_kind].id_status != CALLED) {
		id_potions[obj->which_kind].id_status = IDENTIFIED;
	}
	vanish(obj, 1, &rogue.pack);
}

void
read_scroll(void)
{
	short ch;
	object *obj;

	ch = pack_letter("read what?", SCROL);

	if (ch == CANCEL) {
		return;
	}
	if (!(obj = get_letter_object(ch))) {
		messagef(0, "no such item.");
		return;
	}
	if (obj->what_is != SCROL) {
		messagef(0, "you can't read that");
		return;
	}
	switch(obj->which_kind) {
		case SCARE_MONSTER:
			messagef(0, "you hear a maniacal laughter in the distance");
			break;
		case HOLD_MONSTER:
			hold_monster();
			break;
		case ENCH_WEAPON:
			if (rogue.weapon) {
				if (rogue.weapon->what_is == WEAPON) {
					messagef(0, "your %sglow%s %sfor a moment",
					    name_of(rogue.weapon),
					    ((rogue.weapon->quantity <= 1) ? "s" : ""),
					    get_ench_color());
					if (coin_toss()) {
						rogue.weapon->hit_enchant++;
					} else {
						rogue.weapon->d_enchant++;
					}
				}
				rogue.weapon->is_cursed = 0;
			} else {
				messagef(0, "your hands tingle");
			}
			break;
		case ENCH_ARMOR:
			if (rogue.armor) {
				messagef(0, "your armor glows %sfor a moment",
				    get_ench_color());
				rogue.armor->d_enchant++;
				rogue.armor->is_cursed = 0;
				print_stats(STAT_ARMOR);
			} else {
				messagef(0, "your skin crawls");
			}
			break;
		case IDENTIFY:
			messagef(0, "this is a scroll of identify");
			obj->identified = 1;
			id_scrolls[obj->which_kind].id_status = IDENTIFIED;
			idntfy();
			break;
		case TELEPORT:
			tele();
			break;
		case SLEEP:
			messagef(0, "you fall asleep");
			take_a_nap();
			break;
		case PROTECT_ARMOR:
			if (rogue.armor) {
				messagef(0,  "your armor is covered by a shimmering gold shield");
				rogue.armor->is_protected = 1;
				rogue.armor->is_cursed = 0;
			} else {
				messagef(0, "your acne seems to have disappeared");
			}
			break;
		case REMOVE_CURSE:
			messagef(0, (!halluc) ?
					"you feel as though someone is watching over you" :
					"you feel in touch with the universal oneness");
			uncurse_all();
			break;
		case CREATE_MONSTER:
			create_monster();
			break;
		case AGGRAVATE_MONSTER:
			aggravate();
			break;
		case MAGIC_MAPPING:
			messagef(0, "this scroll seems to have a map on it");
			draw_magic_map();
			break;
		case CON_MON:
			con_mon = 1;
			messagef(0, "your hands glow %sfor a moment", get_ench_color());
			break;
	}
	if (id_scrolls[obj->which_kind].id_status != CALLED) {
		id_scrolls[obj->which_kind].id_status = IDENTIFIED;
	}
	vanish(obj, (obj->which_kind != SLEEP), &rogue.pack);
}

/* vanish() does NOT handle a quiver of weapons with more than one
 *  arrow (or whatever) in the quiver.  It will only decrement the count.
 */

void
vanish(object *obj, short rm, object *pack)
{
	if (obj->quantity > 1) {
		obj->quantity--;
	} else {
		if (obj->in_use_flags & BEING_WIELDED) {
			unwield(obj);
		} else if (obj->in_use_flags & BEING_WORN) {
			unwear(obj);
		} else if (obj->in_use_flags & ON_EITHER_HAND) {
			un_put_on(obj);
		}
		take_from_pack(obj, pack);
		free_object(obj);
	}
	if (rm) {
		(void) reg_move();
	}
}

void
potion_heal(int extra)
{
	float ratio;
	short add;

	rogue.hp_current += rogue.exp;

	ratio = ((float)rogue.hp_current) / rogue.hp_max;

	if (ratio >= 1.00) {
		rogue.hp_max += (extra ? 2 : 1);
		extra_hp += (extra ? 2 : 1);
		rogue.hp_current = rogue.hp_max;
	} else if (ratio >= 0.90) {
		rogue.hp_max += (extra ? 1 : 0);
		extra_hp += (extra ? 1 : 0);
		rogue.hp_current = rogue.hp_max;
	} else {
		if (ratio < 0.33) {
			ratio = 0.33;
		}
		if (extra) {
			ratio += ratio;
		}
		add = (short)(ratio * ((float)rogue.hp_max - rogue.hp_current));
		rogue.hp_current += add;
		if (rogue.hp_current > rogue.hp_max) {
			rogue.hp_current = rogue.hp_max;
		}
	}
	if (blind) {
		unblind();
	}
	if (confused && extra) {
			unconfuse();
	} else if (confused) {
		confused = (confused / 2) + 1;
	}
	if (halluc && extra) {
		unhallucinate();
	} else if (halluc) {
		halluc = (halluc / 2) + 1;
	}
}

void
idntfy(void)
{
	short ch;
	object *obj;
	struct id *id_table;
	char desc[DCOLS];
AGAIN:
	ch = pack_letter("what would you like to identify?", ALL_OBJECTS);

	if (ch == CANCEL) {
		return;
	}
	if (!(obj = get_letter_object(ch))) {
		messagef(0, "no such item, try again");
		messagef(0, "");
		check_message();
		goto AGAIN;
	}
	obj->identified = 1;
	if (obj->what_is & (SCROL | POTION | WEAPON | ARMOR | WAND | RING)) {
		id_table = get_id_table(obj);
		id_table[obj->which_kind].id_status = IDENTIFIED;
	}
	get_desc(obj, desc, sizeof(desc));
	messagef(0, "%s", desc);
}

void
eat(void)
{
	short ch;
	short moves;
	object *obj;

	ch = pack_letter("eat what?", FOOD);

	if (ch == CANCEL) {
		return;
	}
	if (!(obj = get_letter_object(ch))) {
		messagef(0, "no such item.");
		return;
	}
	if (obj->what_is != FOOD) {
		messagef(0, "you can't eat that");
		return;
	}
	if ((obj->which_kind == FRUIT) || rand_percent(60)) {
		moves = get_rand(950, 1150);
		if (obj->which_kind == RATION) {
			messagef(0, "yum, that tasted good");
		} else {
			messagef(0, "my, that was a yummy %s", fruit);
		}
	} else {
		moves = get_rand(750, 950);
		messagef(0, "yuk, that food tasted awful");
		add_exp(2, 1);
	}
	rogue.moves_left /= 3;
	rogue.moves_left += moves;
	hunger_str[0] = 0;
	print_stats(STAT_HUNGER);

	vanish(obj, 1, &rogue.pack);
}

void
hold_monster(void)
{
	short i, j;
	short mcount = 0;
	object *monster;
	short row, col;

	for (i = -2; i <= 2; i++) {
		for (j = -2; j <= 2; j++) {
			row = rogue.row + i;
			col = rogue.col + j;
			if ((row < MIN_ROW) || (row > (DROWS-2)) || (col < 0) ||
				 (col > (DCOLS-1))) {
				continue;
			}
			if (dungeon[row][col] & MONSTER) {
				monster = object_at(&level_monsters, row, col);
				monster->m_flags |= ASLEEP;
				monster->m_flags &= (~WAKENS);
				mcount++;
			}
		}
	}
	if (mcount == 0) {
		messagef(0, "you feel a strange sense of loss");
	} else if (mcount == 1) {
		messagef(0, "the monster freezes");
	} else {
		messagef(0, "the monsters around you freeze");
	}
}

void
tele(void)
{
	mvaddch(rogue.row, rogue.col, get_dungeon_char(rogue.row, rogue.col));

	if (cur_room >= 0) {
		darken_room(cur_room);
	}
	put_player(get_room_number(rogue.row, rogue.col));
	being_held = 0;
	bear_trap = 0;
}

void
hallucinate(void)
{
	object *obj, *monster;
	short ch;

	if (blind) return;

	obj = level_objects.next_object;

	while (obj) {
		ch = mvinch(obj->row, obj->col);
		if (((ch < 'A') || (ch > 'Z')) &&
			((obj->row != rogue.row) || (obj->col != rogue.col)))
		if ((ch != ' ') && (ch != '.') && (ch != '#') && (ch != '+')) {
			addch(gr_obj_char());
		}
		obj = obj->next_object;
	}
	monster = level_monsters.next_monster;

	while (monster) {
		ch = mvinch(monster->row, monster->col);
		if ((ch >= 'A') && (ch <= 'Z')) {
			addch(get_rand('A', 'Z'));
		}
		monster = monster->next_monster;
	}
}

void
unhallucinate(void)
{
	halluc = 0;
	relight();
	messagef(1, "everything looks SO boring now");
}

void
unblind(void)
{
	blind = 0;
	messagef(1, "the veil of darkness lifts");
	relight();
	if (halluc) {
		hallucinate();
	}
	if (detect_monster) {
		show_monsters();
	}
}

void
relight(void)
{
	if (cur_room == PASSAGE) {
		light_passage(rogue.row, rogue.col);
	} else {
		light_up_room(cur_room);
	}
	mvaddch(rogue.row, rogue.col, rogue.fchar);
}

void
take_a_nap(void)
{
	short i;

	i = get_rand(2, 5);
	md_sleep(1);

	while (i--) {
		mv_mons();
	}
	md_sleep(1);
	messagef(0, "%s", you_can_move_again);
}

void
go_blind(void)
{
	short i, j;

	if (!blind) {
		messagef(0, "a cloak of darkness falls around you");
	}
	blind += get_rand(500, 800);

	if (detect_monster) {
		object *monster;

		monster = level_monsters.next_monster;

		while (monster) {
			mvaddch(monster->row, monster->col, monster->trail_char);
			monster = monster->next_monster;
		}
	}
	if (cur_room >= 0) {
		for (i = rooms[cur_room].top_row + 1;
			 i < rooms[cur_room].bottom_row; i++) {
			for (j = rooms[cur_room].left_col + 1;
				 j < rooms[cur_room].right_col; j++) {
				mvaddch(i, j, ' ');
			}
		}
	}
	mvaddch(rogue.row, rogue.col, rogue.fchar);
}

const char *
get_ench_color(void)
{
	if (halluc) {
		return(id_potions[get_rand(0, POTIONS-1)].title);
	} else if (con_mon) {
		return("red ");
	} 
	return("blue ");
}

void
cnfs(void)
{
	confused += get_rand(12, 22);
}

void
unconfuse(void)
{
	confused = 0;
	messagef(1, "you feel less %s now", (halluc ? "trippy" : "confused"));
}

void
uncurse_all(void)
{
	object *obj;

	obj = rogue.pack.next_object;

	while (obj) {
		obj->is_cursed = 0;
		obj = obj->next_object;
	}
}
@


1.9
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: use.c,v 1.8 2006/03/08 09:44:36 otto Exp $	*/
@


1.8
log
@Ansify; from Alexey Dobriyan; hope the license gets cleared up, so we
can include this in the build again.
@
text
@d1 1
a1 1
/*	$OpenBSD: use.c,v 1.7 2004/01/21 19:12:13 espie Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)use.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: use.c,v 1.7 2004/01/21 19:12:13 espie Exp $";
#endif
#endif /* not lint */
@


1.7
log
@make rogue const-correct, and fix one write-strings issue.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: use.c,v 1.6 2003/06/03 03:01:41 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: use.c,v 1.6 2003/06/03 03:01:41 millert Exp $";
d70 1
a70 1
quaff()
d181 1
a181 1
read_scroll()
d289 1
a289 4
vanish(obj, rm, pack)
	object *obj;
	short rm;
	object *pack;
d310 1
a310 2
potion_heal(extra)
	int extra;
d356 1
a356 1
idntfy()
d384 1
a384 1
eat()
d424 1
a424 1
hold_monster()
d457 1
a457 1
tele()
d470 1
a470 1
hallucinate()
d500 1
a500 1
unhallucinate()
d508 1
a508 1
unblind()
d522 1
a522 1
relight()
d533 1
a533 1
take_a_nap()
d548 1
a548 1
go_blind()
d580 1
a580 1
get_ench_color()
d591 1
a591 1
cnfs()
d597 1
a597 1
unconfuse()
d604 1
a604 1
uncurse_all()
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: use.c,v 1.5 2002/07/18 07:13:57 pjanzen Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: use.c,v 1.5 2002/07/18 07:13:57 pjanzen Exp $";
d67 1
a67 1
char *strange_feeling = "you have a strange feeling for a moment, then it passes";
d583 1
a583 1
char *
@


1.5
log
@- string handling patch from David Holland, minimally modified.  Highlights
are fewer magic constants, sprintf->snprintf, and better scorefile handling.
Also, won't hang if forking a subshell fails.
- a few needless functions have been trimmed, and a few extra defaults have
been added to a few switches, just in case.
@
text
@d1 1
a1 1
/*	$OpenBSD: use.c,v 1.4 1998/08/22 08:55:51 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD$";
@


1.4
log
@More largely NetBSD-inspired code cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD$";
a76 1
	char buf[80];
d85 1
a85 1
		message("no such item.", 0);
d89 1
a89 1
		message("you can't drink that", 0);
d94 1
a94 2
			message("you feel stronger now, what bulging muscles!",
			0);
d102 1
a102 1
			message("this tastes great, you feel warm all over", 0);
d105 1
a105 1
			message("you begin to feel better", 0);
d109 1
a109 1
			message("you begin to feel much better", 0);
d119 1
a119 1
			message("you feel very sick now", 0);
d126 1
a126 1
			message("you suddenly feel much more skillful", 0);
d133 1
a133 1
			message("oh wow, everything seems so cosmic", 0);
d139 1
a139 1
				message(strange_feeling, 0);
d148 1
a148 1
				message(strange_feeling, 0);
d152 2
a153 2
			message((halluc ? "what a trippy feeling" :
			"you feel confused"), 0);
d157 1
a157 1
			message("you start to float in the air", 0);
d162 1
a162 1
			message("you feel yourself moving much faster", 0);
d169 1
a169 2
			sprintf(buf, "hmm, this potion tastes like %s juice", fruit);
			message(buf, 0);
a188 1
	char msg[DCOLS];
d196 1
a196 1
		message("no such item.", 0);
d200 1
a200 1
		message("you can't read that", 0);
d205 1
a205 2
			message("you hear a maniacal laughter in the distance",
			0);
d213 4
a216 5
					sprintf(msg, "your %sglow%s %sfor a moment",
					name_of(rogue.weapon),
					((rogue.weapon->quantity <= 1) ? "s" : ""),
					get_ench_color());
					message(msg, 0);
d225 1
a225 1
				message("your hands tingle", 0);
d230 2
a231 3
				sprintf(msg, "your armor glows %sfor a moment",
				get_ench_color());
				message(msg, 0);
d236 1
a236 1
				message("your skin crawls", 0);
d240 1
a240 1
			message("this is a scroll of identify", 0);
d249 1
a249 1
			message("you fall asleep", 0);
d254 1
a254 1
				message( "your armor is covered by a shimmering gold shield",0);
d258 1
a258 1
				message("your acne seems to have disappeared", 0);
d262 1
a262 1
				message((!halluc) ?
d264 1
a264 1
					"you feel in touch with the universal oneness", 0);
d274 1
a274 1
			message("this scroll seems to have a map on it", 0);
d279 1
a279 2
			sprintf(msg, "your hands glow %sfor a moment", get_ench_color());
			message(msg, 0);
d377 2
a378 2
		message("no such item, try again", 0);
		message("", 0);
d387 2
a388 2
	get_desc(obj, desc);
	message(desc, 0);
a396 1
	char buf[70];
d404 1
a404 1
		message("no such item.", 0);
d408 1
a408 1
		message("you can't eat that", 0);
d414 1
a414 1
			message("yum, that tasted good", 0);
d416 1
a416 2
			sprintf(buf, "my, that was a yummy %s", fruit);
			message(buf, 0);
d420 1
a420 1
		message("yuk, that food tasted awful", 0);
d456 1
a456 1
		message("you feel a strange sense of loss", 0);
d458 1
a458 1
		message("the monster freezes", 0);
d460 1
a460 1
		message("the monsters around you freeze", 0);
d512 1
a512 1
	message("everything looks SO boring now", 1);
d519 1
a519 1
	message("the veil of darkness lifts", 1);
d552 1
a552 1
	message(you_can_move_again, 0);
d561 1
a561 1
		message("a cloak of darkness falls around you", 0);
a606 2
	char msg[80];

d608 1
a608 2
	sprintf(msg, "you feel less %s now", (halluc ? "trippy" : "confused"));
	message(msg, 1);
@


1.3
log
@tabify
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: use.c,v 1.3 1995/04/22 10:28:38 cgd Exp $";
d73 1
a73 8
extern short bear_trap;
extern char hunger_str[];
extern short cur_room;
extern long level_points[];
extern boolean being_held;
extern char *fruit, *you_can_move_again;
extern boolean sustain_strength;

d187 1
d300 1
d302 3
a304 3
object *obj;
short rm;
object *pack;
d324 1
d326 1
d371 1
d399 1
d441 1
d474 1
d487 1
d517 1
d525 1
d539 1
d550 1
d565 1
d608 1
d614 1
d624 1
@


1.2
log
@Fix typo
@
text
@d55 1
a55 1
 *         gain or profit.
@


1.1
log
@Initial revision
@
text
@d177 1
a177 1
			sprintf(buf, "hmm, this potion tastes like %sjuice", fruit);
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
