head	1.17;
access;
symbols
	OPENBSD_4_9:1.16.0.20
	OPENBSD_4_9_BASE:1.16
	OPENBSD_4_8:1.16.0.18
	OPENBSD_4_8_BASE:1.16
	OPENBSD_4_7:1.16.0.14
	OPENBSD_4_7_BASE:1.16
	OPENBSD_4_6:1.16.0.16
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.12
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.10
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.8
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.16.0.6
	OPENBSD_4_2_BASE:1.16
	OPENBSD_4_1:1.16.0.4
	OPENBSD_4_1_BASE:1.16
	OPENBSD_4_0:1.16.0.2
	OPENBSD_4_0_BASE:1.16
	OPENBSD_3_9:1.14.0.10
	OPENBSD_3_9_BASE:1.14
	OPENBSD_3_8:1.14.0.8
	OPENBSD_3_8_BASE:1.14
	OPENBSD_3_7:1.14.0.6
	OPENBSD_3_7_BASE:1.14
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.13.0.2
	OPENBSD_3_4_BASE:1.13
	OPENBSD_3_3:1.10.0.2
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.3.0.12
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.17
date	2011.07.03.05.12.15;	author martynas;	state dead;
branches;
next	1.16;

1.16
date	2006.03.07.14.35.24;	author otto;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.06.04.41.18;	author deraadt;	state Exp;
branches;
next	1.14;

1.14
date	2004.01.21.19.12.13;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2003.05.12.07.39.31;	author pjanzen;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.11.05.45.48;	author pjanzen;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.11.04.47.39;	author david;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.26.19.56.07;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.18.07.13.57;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.11;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.12.19.52.56;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.10.18.32.46;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.10.18.17.56;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.08.22.08.55.43;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	97.07.23.20.05.09;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.18;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Remove rogue.  Its license is not acceptable for our tree;  been
unlinked from the builds for 8 years.  I've been talking with the
author 2 years ago, he didn't release a proper license.  It's clear
that the issue won't be resolved.  OK tedu@@.
@
text
@/*	$OpenBSD: rogue.h,v 1.16 2006/03/07 14:35:24 otto Exp $	*/
/*	$NetBSD: rogue.h,v 1.4 1995/04/24 12:25:04 cgd Exp $	*/

/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Timothy C. Stoehr.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@@(#)rogue.h	8.1 (Berkeley) 5/31/93
 */

/*
 * rogue.h
 *
 * This source herein may be modified and/or distributed by anybody who
 * so desires, with the following restrictions:
 *    1.)  This notice shall not be removed.
 *    2.)  Credit shall not be taken for the creation of this source.
 *    3.)  This code is not to be traded, sold, or used for personal
 *         gain or profit.
 */

#define boolean char

#define NOTHING		((unsigned short)     0)
#define OBJECT		((unsigned short)    01)
#define MONSTER		((unsigned short)    02)
#define STAIRS		((unsigned short)    04)
#define HORWALL		((unsigned short)   010)
#define VERTWALL	((unsigned short)   020)
#define DOOR		((unsigned short)   040)
#define FLOOR		((unsigned short)  0100)
#define TUNNEL		((unsigned short)  0200)
#define TRAP		((unsigned short)  0400)
#define HIDDEN		((unsigned short) 01000)

#define ARMOR		((unsigned short)   01)
#define WEAPON		((unsigned short)   02)
#define SCROL		((unsigned short)   04)
#define POTION		((unsigned short)  010)
#define GOLD		((unsigned short)  020)
#define FOOD		((unsigned short)  040)
#define WAND		((unsigned short) 0100)
#define RING		((unsigned short) 0200)
#define AMULET		((unsigned short) 0400)
#define ALL_OBJECTS	((unsigned short) 0777)

#define LEATHER 0
#define RINGMAIL 1
#define SCALE 2
#define CHAIN 3
#define BANDED 4
#define SPLINT 5
#define PLATE 6
#define ARMORS 7

#define BOW 0
#define DART 1
#define ARROW 2
#define DAGGER 3
#define SHURIKEN 4
#define MACE 5
#define LONG_SWORD 6
#define TWO_HANDED_SWORD 7
#define WEAPONS 8

#define MAX_PACK_COUNT 24

#define PROTECT_ARMOR 0
#define HOLD_MONSTER 1
#define ENCH_WEAPON 2
#define ENCH_ARMOR 3
#define IDENTIFY 4
#define TELEPORT 5
#define SLEEP 6
#define SCARE_MONSTER 7
#define REMOVE_CURSE 8
#define CREATE_MONSTER 9
#define AGGRAVATE_MONSTER 10
#define MAGIC_MAPPING 11
#define CON_MON 12
#define SCROLS 13

#define INCREASE_STRENGTH 0
#define RESTORE_STRENGTH 1
#define HEALING 2
#define EXTRA_HEALING 3
#define POISON 4
#define RAISE_LEVEL 5
#define BLINDNESS 6
#define HALLUCINATION 7
#define DETECT_MONSTER 8
#define DETECT_OBJECTS 9
#define CONFUSION 10
#define LEVITATION 11
#define HASTE_SELF 12
#define SEE_INVISIBLE 13
#define POTIONS 14

#define TELE_AWAY 0
#define SLOW_MONSTER 1
#define INVISIBILITY 2
#define POLYMORPH 3
#define HASTE_MONSTER 4
#define MAGIC_MISSILE 5
#define CANCELLATION 6
#define DO_NOTHING 7
#define DRAIN_LIFE 8
#define COLD 9
#define FIRE 10
#define WANDS 11

#define STEALTH 0
#define R_TELEPORT 1
#define REGENERATION 2
#define SLOW_DIGEST 3
#define ADD_STRENGTH 4
#define SUSTAIN_STRENGTH 5
#define DEXTERITY 6
#define ADORNMENT 7
#define R_SEE_INVISIBLE 8
#define MAINTAIN_ARMOR 9
#define SEARCHING 10
#define RINGS 11

#define RATION 0
#define FRUIT 1

#define NOT_USED	((unsigned short)   0)
#define BEING_WIELDED	((unsigned short)  01)
#define BEING_WORN	((unsigned short)  02)
#define ON_LEFT_HAND	((unsigned short)  04)
#define ON_RIGHT_HAND	((unsigned short) 010)
#define ON_EITHER_HAND	((unsigned short) 014)
#define BEING_USED	((unsigned short) 017)

#define NO_TRAP -1
#define TRAP_DOOR 0
#define BEAR_TRAP 1
#define TELE_TRAP 2
#define DART_TRAP 3
#define SLEEPING_GAS_TRAP 4
#define RUST_TRAP 5
#define TRAPS 6

#define STEALTH_FACTOR 3
#define R_TELE_PERCENT 8

#define UNIDENTIFIED	((unsigned short) 00)	/* MUST BE ZERO! */
#define IDENTIFIED	((unsigned short) 01)
#define CALLED		((unsigned short) 02)

#define DROWS 24
#define DCOLS 80
#define NMESSAGES 5
#define MAX_TITLE_LENGTH 30
#define MAXSYLLABLES 40
#define MAX_METAL 14
#define WAND_MATERIALS 30
#define GEMS 14

#define NUM_SCORE_ENTRIES 10

#define GOLD_PERCENT 46

#define MAX_OPT_LEN 40

struct id {
	short value;
	char title[MAX_TITLE_LENGTH];
	const char *real;
	unsigned short id_status;
};

/* The following #defines provide more meaningful names for some of the
 * struct object fields that are used for monsters.  This, since each monster
 * and object (scrolls, potions, etc) are represented by a struct object.
 * Ideally, this should be handled by some kind of union structure.
 */

#define m_damage damage
#define hp_to_kill quantity
#define m_char ichar
#define first_level is_protected
#define last_level is_cursed
#define m_hit_chance class
#define stationary_damage identified
#define drop_percent which_kind
#define trail_char d_enchant
#define slowed_toggle quiver
#define moves_confused hit_enchant
#define nap_length picked_up
#define disguise what_is
#define next_monster next_object

struct obj {				/* comment is monster meaning */
	unsigned long m_flags;		/* monster flags */
	const char *damage;		/* damage it does */
	short quantity;			/* hit points to kill */
	short ichar;			/* 'A' is for aquatar */
	short kill_exp;			/* exp for killing it */
	short is_protected;		/* level starts */
	short is_cursed;		/* level ends */
	short class;			/* chance of hitting you */
	short identified;		/* 'F' damage, 1,2,3... */
	unsigned short which_kind; /* item carry/drop % */
	short o_row, o_col, o;	/* o is how many times stuck at o_row, o_col */
	short row, col;			/* current row, col */
	short d_enchant;		/* room char when detect_monster */
	short quiver;			/* monster slowed toggle */
	short trow, tcol;		/* target row, col */
	short hit_enchant;		/* how many moves is confused */
	unsigned short what_is;	/* imitator's character (?!%: */
	short picked_up;		/* sleep from wand of sleep */
	unsigned short in_use_flags;
	struct obj *next_object;	/* next monster */
};

typedef struct obj object;

#define INIT_AW		(object*)0
#define INIT_RINGS	(object*)0
#define INIT_HP		12
#define INIT_STR	16
#define INIT_EXPLEVEL	1
#define INIT_EXP	0
#define INIT_PACK	{0, (char *)NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (struct obj *)NULL}
#define INIT_GOLD	0
#define INIT_CHAR	'@@'
#define INIT_MOVES	1250

struct fightr {
	object *armor;
	object *weapon;
	object *left_ring, *right_ring;
	short hp_current;
	short hp_max;
	short str_current;
	short str_max;
	object pack;
	long gold;
	short exp;
	long exp_points;
	short row, col;
	short fchar;
	short moves_left;
};

typedef struct fightr fighter;

struct dr {
	short oth_room;
	short oth_row,
	      oth_col;
	short door_row,
		  door_col;
};

typedef struct dr door;

struct rm {
	short bottom_row, right_col, left_col, top_row;
	door doors[4];
	unsigned short is_room;
};

typedef struct rm room;

#define MAXROOMS 9
#define BIG_ROOM 10

#define NO_ROOM -1

#define PASSAGE -3		/* cur_room value */

#define AMULET_LEVEL 26

#define R_NOTHING	((unsigned short) 01)
#define R_ROOM		((unsigned short) 02)
#define R_MAZE		((unsigned short) 04)
#define R_DEADEND	((unsigned short) 010)
#define R_CROSS		((unsigned short) 020)

#define MAX_EXP_LEVEL 21
#define MAX_EXP 10000001L
#define MAX_GOLD 999999
#define MAX_ARMOR 99
#define MAX_HP 999
#define MAX_STRENGTH 99
#define LAST_DUNGEON 99

#define STAT_LEVEL 01
#define STAT_GOLD 02
#define STAT_HP 04
#define STAT_STRENGTH 010
#define STAT_ARMOR 020
#define STAT_EXP 040
#define STAT_HUNGER 0100
#define STAT_LABEL 0200
#define STAT_ALL 0377

#define PARTY_TIME 10	/* one party somewhere in each 10 level span */

#define MAX_TRAPS 10	/* maximum traps per level */

#define HIDE_PERCENT 12

struct tr {
	short trap_type;
	short trap_row, trap_col;
};

typedef struct tr trap;

extern fighter rogue;
extern room rooms[];
extern trap traps[];
extern unsigned short dungeon[DROWS][DCOLS];
extern object level_objects;

extern struct id id_scrolls[];
extern struct id id_potions[];
extern struct id id_wands[];
extern struct id id_rings[];
extern struct id id_weapons[];
extern struct id id_armors[];

extern object mon_tab[];
extern object level_monsters;

#define MONSTERS 26

#define HASTED					01L
#define SLOWED					02L
#define INVISIBLE				04L
#define ASLEEP				   010L
#define WAKENS				   020L
#define WANDERS				   040L
#define FLIES				  0100L
#define FLITS				  0200L
#define CAN_FLIT			  0400L		/* can, but usually doesn't, flit */
#define CONFUSED	 		 01000L
#define RUSTS				 02000L
#define HOLDS				 04000L
#define FREEZES				010000L
#define STEALS_GOLD			020000L
#define STEALS_ITEM			040000L
#define STINGS			   0100000L
#define DRAINS_LIFE		   0200000L
#define DROPS_LEVEL		   0400000L
#define SEEKS_GOLD		  01000000L
#define FREEZING_ROGUE	  02000000L
#define RUST_VANISHED	  04000000L
#define CONFUSES		 010000000L
#define IMITATES		 020000000L
#define FLAMES			 040000000L
#define STATIONARY		0100000000L		/* damage will be 1,2,3,... */
#define NAPPING			0200000000L		/* can't wake up for a while */
#define ALREADY_MOVED	0400000000L

#define SPECIAL_HIT		(RUSTS|HOLDS|FREEZES|STEALS_GOLD|STEALS_ITEM|STINGS|DRAINS_LIFE|DROPS_LEVEL)

#define WAKE_PERCENT 45
#define FLIT_PERCENT 40
#define PARTY_WAKE_PERCENT 75

#define HYPOTHERMIA 1
#define STARVATION 2
#define POISON_DART 3
#define QUIT 4
#define WIN 5
#define KFIRE 6

#define UPWARD 0
#define UPRIGHT 1
#define RIGHT 2
#define DOWNRIGHT 3
#define DOWN 4
#define DOWNLEFT 5
#define LEFT 6
#define UPLEFT 7
#define DIRS 8

#define ROW1 7
#define ROW2 15

#define COL1 26
#define COL2 52

#define MOVED 0
#define MOVE_FAILED -1
#define STOPPED_ON_SOMETHING -2
#define CANCEL '\033'
#define LIST '*'

#define HUNGRY 300
#define WEAK 150
#define FAINT 20
#define STARVE 0

#define MIN_ROW 1

struct rogue_time {
	short year;		/* >= 1987 */
	short month;	/* 1 - 12 */
	short day;		/* 1 - 31 */
	short hour;		/* 0 - 23 */
	short minute;	/* 0 - 59 */
	short second;	/* 0 - 59 */
};

#include <curses.h>

/*
 * external routine declarations.
 */
#include <sys/types.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>

object	*alloc_object(void);
object	*check_duplicate(object *, object *);
const char	*get_ench_color(void);
object	*get_letter_object(int);
object	*get_thrown_at_monster(object *, short, short *, short *);
object	*get_zapped_monster(short, short *, short *);
object	*gr_monster(object *, int);
object	*gr_object(void);
char	*md_getenv(const char *);
char	*md_gln(void);
char	*md_malloc(int);
const char	*mon_name(object *);
const char	*name_of(const object *);
object	*object_at(object *, short, short);
object	*pick_up(short, short, short *);
void	add_exp(int, boolean);
void	add_mazes(void);
void	add_traps(void);
void	aggravate(void);
void	aim_monster(object *);
void	bounce(short, short, short, short, short);
void	byebye(int);
void	c_object_for_wizard(void);
void	call_it(void);
boolean	can_move(short, short, short, short);
boolean	can_turn(short, short);
void	center(short, const char *);
void	check_gold_seeker(object *);
boolean	check_hunger(boolean);
boolean	check_imitator(object *);
void	check_message(void);
int	check_up(void);
void	clean_up(const char *);
void	clear_level(void);
void	cnfs(void);
int	coin_toss(void);
int	connect_rooms(short, short);
void	cough_up(object *);
void	create_monster(void);
int	damage_for_strength(void);
void	darken_room(short);
void	disappear(object *);
void	do_args(int, char **);
void	do_opts(void);
void	do_put_on(object *, boolean);
void	do_shell(void);
void	do_wear(object *);
void	do_wield(object *);
void	dr_course(object *, boolean, short, short);
void	drain_life(void);
void	draw_magic_map(void);
void	draw_simple_passage(short, short, short, short, short);
void	drop(void);
int	drop_check(void);
void	drop_level(void);
void	eat(void);
void	edit_opts(void);
void	env_get_value(char **, char *, boolean);
void	error_save(int);
void	fight(boolean);
void	fill_it(int, boolean);
void	fill_out_level(void);
boolean	flame_broil(object *);
int	flit(object *);
void	flop_weapon(object *, short, short);
void	free_object(object *);
void	free_stuff(object *);
void	freeze(object *);
int	get_armor_class(const object *);
int	get_com_id(int *, short);
int	get_damage(const char *, boolean);
void	get_desc(const object *, char *, size_t);
int	get_dir(short, short, short, short);
void	get_dir_rc(short, short *, short *, short);
char	get_dungeon_char(short, short);
int	get_exp_level(long);
void	get_food(object *, boolean);
int	get_hit_chance(object *);
int	get_input_line(const char *, const char *, char *, size_t, const char *, boolean, boolean);
char	get_mask_char(unsigned short);
int	get_number(const char *);
boolean	get_oth_room(short, short *, short *);
int	get_rand(int, int);
short	get_room_number(short, short);
int	get_value(object *);
int	get_w_damage(const object *);
void	get_wand_and_ring_materials(void);
int	get_weapon_damage(object *);
char	gmc(object *);
char	gmc_row_col(short, short);
void	go_blind(void);
boolean	gold_at(short, short);
void	gr_armor(object *);
char	gr_dir(void);
char	gr_obj_char(void);
void	gr_potion(object *);
void	gr_ring(object *, boolean);
short	gr_room(void);
void	gr_row_col(short *, short *, unsigned short);
void	gr_scroll(object *);
void	gr_wand(object *);
void	gr_weapon(object *, int);
void	hallucinate(void);
boolean	has_amulet(void);
void	heal(void);
void	hide_boxed_passage(short, short, short, short, short);
void	hold_monster(void);
int	hp_raise(void);
void	id_all(void);
void	id_com(void);
void	id_trap(void);
void	id_type(void);
void	idntfy(void);
boolean	imitating(short, short);
int	init(int, char **);
void	init_str(char **, const char *);
void	inv_armor_weapon(boolean);
void	inv_rings(void);
void	inventory(object *, unsigned short);
boolean	is_all_connected(void);
boolean	is_digit(short);
boolean	is_direction(short, short *);
boolean	is_pack_letter(short *, unsigned short *);
boolean	is_passable(short, short);
boolean	is_vowel(short);
void	kick_into_pack(void);
void	killed_by(const object *, short);
void	light_passage(short, short);
void	light_up_room(int);
boolean	m_confuse(object *);
void	make_level(void);
void	make_maze(short, short, short, short, short, short);
void	make_party(void);
void	make_room(short, short, short, short);
void	make_scroll_titles(void);
boolean	mask_pack(object *, unsigned short);
boolean	mask_room(short, short *, short *, unsigned short);
boolean	md_df(const char *);
void	md_exit(int);
void	md_gct(struct rogue_time *);
int	md_get_file_id(const char *);
void	md_gfmt(char *, struct rogue_time *);
int	md_gseed(void);
void	md_heed_signals(void);
void	md_ignore_signals(void);
int	md_link_count(char *);
void	md_lock(boolean);
void	md_shell(const char *);
void	md_sleep(int);
void	md_slurp(void);
void	messagef(boolean, const char *, ...)
#ifdef __GNUC__
	  __attribute__((__format__(__printf__, 2, 3)))
#endif
		;
void	mix_colors(void);
void	mix_random_rooms(void);
int	mon_can_go(object *, short, short);
int	mon_damage(object *, short);
void	mon_hit(object *);
boolean	mon_sees(object *, short, short);
int	move_confused(object *);
void	move_mon_to(object *, short, short);
void	move_onto(void);
int	mtry(object *, short, short);
void	multiple_move_rogue(short);
void	mv_1_monster(object *, short, short);
void	mv_aquatars(void);
void	mv_mons(void);
short	next_avail_ichar(void);
boolean	next_to_something(short, short);
int	no_room_for_monster(int);
int	one_move_rogue(short, short);
void	onintr(int);
void	opt_erase(int);
void	opt_go(int);
void	opt_show(int);
short	pack_count(object *);
short	pack_letter(const char *, unsigned short);
void	party_monsters(int, int);
short	party_objects(int);
void	place_at(object *, short, short);
void	plant_gold(short, short, boolean);
void	play_level(void);
void	player_init(void);
void	potion_heal(int);
int	pr_com_id(int);
int	pr_motion_char(int);
void	print_stats(int);
void	put_amulet(void);
void	put_door(room *, short, short *, short *);
void	put_gold(void);
void	put_m_at(short, short, object *);
void	put_mons(void);
void	put_objects(void);
void	put_on_ring(void);
void	put_player(short);
void	put_scores(const object *, short);
void	put_stairs(void);
void	quaff(void);
void	quit(boolean);
int	r_index(const char *, int, boolean);
void	rand_around(short, short *, short *);
int	rand_percent(int);
void	rand_place(object *);
void	read_scroll(void);
void	recursive_deadend(short, short *, short, short);
boolean	reg_move(void);
void	relight(void);
void	remessage(short);
void	remove_ring(void);
void	rest(int);
void	restore(char *);
int	rgetchar(void);
void	ring_stats(boolean);
int	rogue_can_see(short, short);
void	rogue_damage(short, object *, short);
void	rogue_hit(object *, boolean);
int	rogue_is_around(short, short);
long	rrandom(void);
void	rust(object *);
void	s_con_mon(object *);
int	same_col(int, int);
int	same_row(int, int);
void	save_game(void);
void	save_into_file(const char *);
void	save_screen(void);
void	search(short, boolean);
boolean	seek_gold(object *);
void	sell_pack(void);
void	sf_error(void);
void	show_average_hp(void);
void	show_monsters(void);
void	show_objects(void);
void	show_traps(void);
void	single_inv(short);
void	special_hit(object *);
void	srrandom(int);
void	start_window(void);
void	steal_gold(object *);
void	steal_item(object *);
void	sting(object *);
void	stop_window(void);
void	take_a_nap(void);
void	take_from_pack(object *, object *);
void	take_off(void);
void	tele(void);
void	tele_away(object *);
void	throw(void);
boolean	throw_at_monster(object *, object *);
int	to_hit(object *);
short	trap_at(short, short);
void	trap_player(short, short);
boolean	try_to_cough(short, short, object *);
void	turn_passage(short, boolean);
void	un_put_on(object *);
void	unblind(void);
void	unconfuse(void);
void	uncurse_all(void);
void	unhallucinate(void);
void	unwear(object *);
void	unwield(object *);
void	vanish(object *, short, object *);
void	visit_rooms(int);
void	wait_for_ack(void);
void	wake_room(short, boolean, short, short);
void	wake_up(object *);
void	wanderer(void);
void	wdrain_life(object *);
void	wear(void);
void	wield(void);
void	win(void);
void	wizardize(void);
long	xxx(boolean);
void	xxxx(char *, short);
void	zap_monster(object *, unsigned short);
void	zapp(void);
object *add_to_pack(object *, object *, int);
struct id *get_id_table(const object *);
unsigned short gr_what_is(void);

extern	boolean	ask_quit;
extern	boolean	being_held;
extern	boolean	cant_int;
extern	boolean	con_mon;
extern	boolean	detect_monster;
extern	boolean	did_int;
extern	boolean	interrupted;
extern	boolean	is_wood[];
extern	boolean	jump;
extern	boolean	maintain_armor;
extern	boolean	mon_disappeared;
extern	boolean	msg_cleared;
extern	boolean	no_skull;
extern	boolean	passgo;
extern	boolean	r_see_invisible;
extern	boolean	r_teleport;
extern	boolean	save_is_interactive;
extern	boolean	score_only;
extern	boolean	see_invisible;
extern	boolean	sustain_strength;
extern	boolean	trap_door;
extern	boolean	wizard;
#define HIT_MESSAGE_LEN 80
extern	char	hit_message[HIT_MESSAGE_LEN];
#define HUNGER_STR_LEN 8
extern	char	hunger_str[HUNGER_STR_LEN];
#define LOGIN_NAME_LEN 40
extern	char	login_name[LOGIN_NAME_LEN];
extern	const char   *byebye_string;
extern	const char   *curse_message;
extern	const char   *error_file;
extern	char   *fruit;
extern	const char   *m_names[];
extern	const char   *more;
extern	const char   *new_level_message;
extern	char   *nick_name;
extern	const char   *press_space;
extern	char   *save_file;
extern	const char   *you_can_move_again;
extern	long	level_points[];
extern	short	add_strength;
extern	short	auto_search;
extern	short	bear_trap;
extern	short	blind;
extern	short	confused;
extern	short	cur_level;
extern	short	cur_room;
extern	short	e_rings;
extern	short	extra_hp;
extern	short	foods;
extern	short	halluc;
extern	short	haste_self;
extern	short	less_hp;
extern	short	levitate;
extern	short	m_moves;
extern	short	max_level;
extern	short	party_room;
extern	short	r_rings;
extern	short	regeneration;
extern	short	ring_exp;
extern	short	stealthy;
@


1.16
log
@Fix prototype of is_digit(). From Alexey Dobriyan.
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.15 2006/03/06 04:41:18 deraadt Exp $	*/
@


1.15
log
@fixes from adobriyan@@gmail
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.14 2004/01/21 19:12:13 espie Exp $	*/
d568 1
a568 1
boolean	is_digit(int);
@


1.14
log
@make rogue const-correct, and fix one write-strings issue.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.13 2003/06/03 03:01:41 millert Exp $	*/
d507 1
a507 1
void	fight(int);
@


1.13
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.12 2003/05/12 07:39:31 pjanzen Exp $	*/
d223 2
a224 2
	unsigned long m_flags;	/* monster flags */
	char *damage;			/* damage it does */
d450 1
a450 1
char	*get_ench_color(void);
d456 1
a456 1
char	*md_getenv(char *);
d459 2
a460 2
char	*mon_name(object *);
char	*name_of(const object *);
d480 1
a480 1
void	clean_up(char *);
d518 1
a518 1
int	get_damage(char *, boolean);
d528 1
a528 1
int	get_number(char *);
d563 1
a563 1
void	init_str(char **, char *);
d585 1
a585 1
boolean	md_df(char *);
d588 1
a588 1
int	md_get_file_id(char *);
d626 1
a626 1
short	pack_letter(char *, unsigned short);
d649 1
a649 1
int	r_index(char *, int, boolean);
d673 1
a673 1
void	save_into_file(char *);
d757 3
a759 3
extern	char   *byebye_string;
extern	char   *curse_message;
extern	char   *error_file;
d761 1
a761 1
extern	char   *m_names[];
d763 1
a763 1
extern	char   *new_level_message;
d765 1
a765 1
extern	char   *press_space;
d767 1
a767 1
extern	char   *you_can_move_again;
@


1.12
log
@From NetBSD:  remove more duplicate declarations.
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.11 2003/05/11 05:45:48 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
@


1.11
log
@Remove duplicate prototype.
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.10 2003/03/11 04:47:39 david Exp $	*/
a607 1
void	mix_colors(void);
a636 1
void	player_init(void);
a689 1
void	start_window(void);
@


1.10
log
@double words and spelling fixes
ok pjanzen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.9 2002/07/26 19:56:07 pjanzen Exp $	*/
a696 1
void	stop_window(void);
@


1.9
log
@A few better buffer sizes (from Ian McWilliam, long ago); functions local
to save.c are no longer in rogue.h; use write() to save files rather than
fwrite() since this can end up being called in a signal handler (it's still
not clean though).
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.8 2002/07/18 07:13:57 pjanzen Exp $	*/
d243 1
a243 1
	unsigned short what_is;	/* imitator's charactor (?!%: */
@


1.8
log
@- string handling patch from David Holland, minimally modified.  Highlights
are fewer magic constants, sprintf->snprintf, and better scorefile handling.
Also, won't hang if forking a subshell fails.
- a few needless functions have been trimmed, and a few extra defaults have
been added to a few switches, just in case.
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.7 2002/02/16 21:27:11 millert Exp $	*/
a555 1
boolean	has_been_touched(struct rogue_time *, struct rogue_time *);
a655 2
void	r_read(FILE *, char *, size_t);
void	r_write(FILE *, char *, size_t);
a658 1
void	read_pack(object *, FILE *, boolean);
a659 1
void	read_string(char *, size_t, FILE *);
a674 3
void	rw_dungeon(FILE *, boolean);
void	rw_id(struct id *, FILE *, int, boolean);
void	rw_rooms(FILE *, boolean);
a728 2
void	write_pack(object *, FILE *);
void	write_string(char *, FILE *);
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.6 2001/08/12 19:52:56 pjanzen Exp $	*/
d192 2
d200 2
a201 2
	char *title;
	char *real;
d464 1
a464 1
char	*name_of(object *);
d478 1
a478 1
void	center(short, char *);
d520 1
a520 1
int	get_armor_class(object *);
d523 1
a523 1
void	get_desc(object *, char *);
d530 1
a530 1
int	get_input_line(char *, char *, char *, int, char *, boolean, boolean);
d537 1
a537 1
int	get_w_damage(object *);
a568 1
void	insert_score(char [][], char [][], char *, short, short, object *, int);
d579 1
a579 2
void	killed_by(object *, short);
long	lget_number(char *);
d600 1
a600 1
void	md_shell(char *);
d603 5
a607 1
void	message(char *, boolean);
a622 1
int	name_cmp(char *, char *);
a624 1
void	nickize(char *, char *, char *);
a632 1
void	pad(char *, short);
d652 1
a652 1
void	put_scores(object *, short);
d657 2
a658 2
void	r_read(FILE *, char *, int);
void	r_write(FILE *, char *, int);
d664 1
a664 1
void	read_string(char *, FILE *);
a697 1
void	sound_bell(void);
d744 1
a744 1
struct id *get_id_table(object *);
d769 6
a774 3
extern	char	hit_message[];
extern	char	hunger_str[];
extern	char	login_name[];
d780 1
a780 1
extern	char   *more;
@


1.6
log
@make get_input_line more general (only affects wizard mode)
make special attacks a bit less likely in wizard mode
remove declarations of a few nonexistant functions
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.5 2001/08/10 18:32:46 pjanzen Exp $	*/
d450 296
a745 296
object	*alloc_object __P((void));
object	*check_duplicate __P((object *, object *));
char	*get_ench_color __P((void));
object	*get_letter_object __P((int));
object	*get_thrown_at_monster __P((object *, short, short *, short *));
object	*get_zapped_monster __P((short, short *, short *));
object	*gr_monster __P((object *, int));
object	*gr_object __P((void));
char	*md_getenv __P((char *));
char	*md_gln __P((void));
char	*md_malloc __P((int));
char	*mon_name __P((object *));
char	*name_of __P((object *));
object	*object_at __P((object *, short, short));
object	*pick_up __P((short, short, short *));
void	add_exp __P((int, boolean));
void	add_mazes __P((void));
void	add_traps __P((void));
void	aggravate __P((void));
void	aim_monster __P((object *));
void	bounce __P((short, short, short, short, short));
void	byebye __P((int));
void	c_object_for_wizard __P((void));
void	call_it __P((void));
boolean	can_move __P((short, short, short, short));
boolean	can_turn __P((short, short));
void	center __P((short, char *));
void	check_gold_seeker __P((object *));
boolean	check_hunger __P((boolean));
boolean	check_imitator __P((object *));
void	check_message __P((void));
int	check_up __P((void));
void	clean_up __P((char *));
void	clear_level __P((void));
void	cnfs __P((void));
int	coin_toss __P((void));
int	connect_rooms __P((short, short));
void	cough_up __P((object *));
void	create_monster __P((void));
int	damage_for_strength __P((void));
void	darken_room __P((short));
void	disappear __P((object *));
void	do_args __P((int, char **));
void	do_opts __P((void));
void	do_put_on __P((object *, boolean));
void	do_shell __P((void));
void	do_wear __P((object *));
void	do_wield __P((object *));
void	dr_course __P((object *, boolean, short, short));
void	drain_life __P((void));
void	draw_magic_map __P((void));
void	draw_simple_passage __P((short, short, short, short, short));
void	drop __P((void));
int	drop_check __P((void));
void	drop_level __P((void));
void	eat __P((void));
void	edit_opts __P((void));
void	env_get_value __P((char **, char *, boolean));
void	error_save __P((int));
void	fight __P((int));
void	fill_it __P((int, boolean));
void	fill_out_level __P((void));
boolean	flame_broil __P((object *));
int	flit __P((object *));
void	flop_weapon __P((object *, short, short));
void	free_object __P((object *));
void	free_stuff __P((object *));
void	freeze __P((object *));
int	get_armor_class __P((object *));
int	get_com_id __P((int *, short));
int	get_damage __P((char *, boolean));
void	get_desc __P((object *, char *));
int	get_dir __P((short, short, short, short));
void	get_dir_rc __P((short, short *, short *, short));
char	get_dungeon_char __P((short, short));
int	get_exp_level __P((long));
void	get_food __P((object *, boolean));
int	get_hit_chance __P((object *));
int	get_input_line __P((char *, char *, char *, int, char *, boolean, boolean));
char	get_mask_char __P((unsigned short));
int	get_number __P((char *));
boolean	get_oth_room __P((short, short *, short *));
int	get_rand __P((int, int));
short	get_room_number __P((short, short));
int	get_value __P((object *));
int	get_w_damage __P((object *));
void	get_wand_and_ring_materials __P((void));
int	get_weapon_damage __P((object *));
char	gmc __P((object *));
char	gmc_row_col __P((short, short));
void	go_blind __P((void));
boolean	gold_at __P((short, short));
void	gr_armor __P((object *));
char	gr_dir __P((void));
char	gr_obj_char __P((void));
void	gr_potion __P((object *));
void	gr_ring __P((object *, boolean));
short	gr_room __P((void));
void	gr_row_col __P((short *, short *, unsigned short));
void	gr_scroll __P((object *));
void	gr_wand __P((object *));
void	gr_weapon __P((object *, int));
void	hallucinate __P((void));
boolean	has_amulet __P((void));
boolean	has_been_touched __P((struct rogue_time *, struct rogue_time *));
void	heal __P((void));
void	hide_boxed_passage __P((short, short, short, short, short));
void	hold_monster __P((void));
int	hp_raise __P((void));
void	id_all __P((void));
void	id_com __P((void));
void	id_trap __P((void));
void	id_type __P((void));
void	idntfy __P((void));
boolean	imitating __P((short, short));
int	init __P((int, char **));
void	init_str __P((char **, char *));
void	insert_score __P((char [][], char [][], char *, short, short, object *, int));
void	inv_armor_weapon __P((boolean));
void	inv_rings __P((void));
void	inventory __P((object *, unsigned short));
boolean	is_all_connected __P((void));
boolean	is_digit __P((int));
boolean	is_direction __P((short, short *));
boolean	is_pack_letter __P((short *, unsigned short *));
boolean	is_passable __P((short, short));
boolean	is_vowel __P((short));
void	kick_into_pack __P((void));
void	killed_by __P((object *, short));
long	lget_number __P((char *));
void	light_passage __P((short, short));
void	light_up_room __P((int));
boolean	m_confuse __P((object *));
void	make_level __P((void));
void	make_maze __P((short, short, short, short, short, short));
void	make_party __P((void));
void	make_room __P((short, short, short, short));
void	make_scroll_titles __P((void));
boolean	mask_pack __P((object *, unsigned short));
boolean	mask_room __P((short, short *, short *, unsigned short));
boolean	md_df __P((char *));
void	md_exit __P((int));
void	md_gct __P((struct rogue_time *));
int	md_get_file_id __P((char *));
void	md_gfmt __P((char *, struct rogue_time *));
int	md_gseed __P((void));
void	md_heed_signals __P((void));
void	md_ignore_signals __P((void));
int	md_link_count __P((char *));
void	md_lock __P((boolean));
void	md_shell __P((char *));
void	md_sleep __P((int));
void	md_slurp __P((void));
void	message __P((char *, boolean));
void	mix_colors __P((void));
void	mix_colors __P((void));
void	mix_random_rooms __P((void));
int	mon_can_go __P((object *, short, short));
int	mon_damage __P((object *, short));
void	mon_hit __P((object *));
boolean	mon_sees __P((object *, short, short));
int	move_confused __P((object *));
void	move_mon_to __P((object *, short, short));
void	move_onto __P((void));
int	mtry __P((object *, short, short));
void	multiple_move_rogue __P((short));
void	mv_1_monster __P((object *, short, short));
void	mv_aquatars __P((void));
void	mv_mons __P((void));
int	name_cmp __P((char *, char *));
short	next_avail_ichar __P((void));
boolean	next_to_something __P((short, short));
void	nickize __P((char *, char *, char *));
int	no_room_for_monster __P((int));
int	one_move_rogue __P((short, short));
void	onintr __P((int));
void	opt_erase __P((int));
void	opt_go __P((int));
void	opt_show __P((int));
short	pack_count __P((object *));
short	pack_letter __P((char *, unsigned short));
void	pad __P((char *, short));
void	party_monsters __P((int, int));
short	party_objects __P((int));
void	place_at __P((object *, short, short));
void	plant_gold __P((short, short, boolean));
void	play_level __P((void));
void	player_init __P((void));
void	player_init __P((void));
void	potion_heal __P((int));
int	pr_com_id __P((int));
int	pr_motion_char __P((int));
void	print_stats __P((int));
void	put_amulet __P((void));
void	put_door __P((room *, short, short *, short *));
void	put_gold __P((void));
void	put_m_at __P((short, short, object *));
void	put_mons __P((void));
void	put_objects __P((void));
void	put_on_ring __P((void));
void	put_player __P((short));
void	put_scores __P((object *, short));
void	put_stairs __P((void));
void	quaff __P((void));
void	quit __P((boolean));
int	r_index __P((char *, int, boolean));
void	r_read __P((FILE *, char *, int));
void	r_write __P((FILE *, char *, int));
void	rand_around __P((short, short *, short *));
int	rand_percent __P((int));
void	rand_place __P((object *));
void	read_pack __P((object *, FILE *, boolean));
void	read_scroll __P((void));
void	read_string __P((char *, FILE *));
void	recursive_deadend __P((short, short *, short, short));
boolean	reg_move __P((void));
void	relight __P((void));
void	remessage __P((short));
void	remove_ring __P((void));
void	rest __P((int));
void	restore __P((char *));
int	rgetchar __P((void));
void	ring_stats __P((boolean));
int	rogue_can_see __P((short, short));
void	rogue_damage __P((short, object *, short));
void	rogue_hit __P((object *, boolean));
int	rogue_is_around __P((short, short));
long	rrandom __P((void));
void	rust __P((object *));
void	rw_dungeon __P((FILE *, boolean));
void	rw_id __P((struct id *, FILE *, int, boolean));
void	rw_rooms __P((FILE *, boolean));
void	s_con_mon __P((object *));
int	same_col __P((int, int));
int	same_row __P((int, int));
void	save_game __P((void));
void	save_into_file __P((char *));
void	save_screen __P((void));
void	search __P((short, boolean));
boolean	seek_gold __P((object *));
void	sell_pack __P((void));
void	sf_error __P((void));
void	show_average_hp __P((void));
void	show_monsters __P((void));
void	show_objects __P((void));
void	show_traps __P((void));
void	single_inv __P((short));
void	sound_bell __P((void));
void	special_hit __P((object *));
void	srrandom __P((int));
void	start_window __P((void));
void	start_window __P((void));
void	steal_gold __P((object *));
void	steal_item __P((object *));
void	sting __P((object *));
void	stop_window __P((void));
void	stop_window __P((void));
void	take_a_nap __P((void));
void	take_from_pack __P((object *, object *));
void	take_off __P((void));
void	tele __P((void));
void	tele_away __P((object *));
void	throw __P((void));
boolean	throw_at_monster __P((object *, object *));
int	to_hit __P((object *));
short	trap_at __P((short, short));
void	trap_player __P((short, short));
boolean	try_to_cough __P((short, short, object *));
void	turn_passage __P((short, boolean));
void	un_put_on __P((object *));
void	unblind __P((void));
void	unconfuse __P((void));
void	uncurse_all __P((void));
void	unhallucinate __P((void));
void	unwear __P((object *));
void	unwield __P((object *));
void	vanish __P((object *, short, object *));
void	visit_rooms __P((int));
void	wait_for_ack __P((void));
void	wake_room __P((short, boolean, short, short));
void	wake_up __P((object *));
void	wanderer __P((void));
void	wdrain_life __P((object *));
void	wear __P((void));
void	wield __P((void));
void	win __P((void));
void	wizardize __P((void));
void	write_pack __P((object *, FILE *));
void	write_string __P((char *, FILE *));
long	xxx __P((boolean));
void	xxxx __P((char *, short));
void	zap_monster __P((object *, unsigned short));
void	zapp __P((void));
object *add_to_pack __P((object *, object *, int));
struct id *get_id_table __P((object *));
unsigned short gr_what_is __P((void));
@


1.5
log
@Minor -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.4 2001/08/10 18:17:56 pjanzen Exp $	*/
d528 1
a528 1
int	get_input_line __P((char *, char *, char *, char *, boolean, boolean));
a589 1
void	md_cbreak_no_echo_nonl __P((boolean));
a592 1
char   *md_gdtcf __P((void));
a602 1
void	md_tstp __P((void));
@


1.4
log
@Remove local curses implementation which was never used.
@
text
@d1 1
a1 1
/*	$OpenBSD: rogue.h,v 1.3 1998/08/22 08:55:43 pjanzen Exp $	*/
d255 1
a255 1
#define INIT_PACK	{0}
@


1.3
log
@More largely NetBSD-inspired code cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a439 46
#ifdef CURSES
struct _win_st {
	short _cury, _curx;
	short _maxy, _maxx;
};

typedef struct _win_st WINDOW;

#ifndef FALSE
#define FALSE 0
#endif

extern int LINES, COLS;
extern WINDOW *curscr;
extern char *CL;

void	initscr __P((void));
void	endwin __P((void));
void	move __P((short, short));
void	mvaddstr __P((short, short, char *));
void	addstr __P((char *));
void	addch __P((int));
void	mvaddch __P((short, short, int));
void	refresh __P((void));
void	wrefresh __P((WINDOW *scr));
int	mvinch __P((short, short));
void	clear __P((void));
void	clrtoeol __P((void));
void	standout __P((void));
void	standend __P((void));
void	crmode __P((void));
void	noecho __P((void));
void	nonl __P((void));
void	clear_buffers __P((void));
void	put_char_at __P((short, short, int));
void	put_cursor __P((short, short));
void	put_st_char __P((int));
void	get_term_info __P((void));
boolean	tc_tname __P((FILE *, char *, char *));
void	tc_gtdata __P((FILE *, char *));
void	tc_gets __P((char *, char **));
void	tc_gnum __P((char *, int *));
void	tstp __P((void));
void	tc_cmget __P((void));

#else
a440 1
#endif
@


1.2
log
@tabify
@
text
@d1 1
d9 1
a9 1
 * Timoth C. Stoehr.
d50 1
a50 1
 *	   gain or profit.
d159 1
a159 1
#define NOT_USED		((unsigned short)   0)
d161 1
a161 1
#define BEING_WORN		((unsigned short)  02)
d165 1
a165 1
#define BEING_USED		((unsigned short) 017)
d179 3
a181 3
#define UNIDENTIFIED ((unsigned short) 00)	/* MUST BE ZERO! */
#define IDENTIFIED ((unsigned short) 01)
#define CALLED ((unsigned short) 02)
d249 10
a258 9
#define INIT_AW (object*)0,(object*)0
#define INIT_RINGS (object*)0,(object*)0
#define INIT_HP 12,12
#define INIT_STR 16,16
#define INIT_EXP 1,0
#define INIT_PACK {0}
#define INIT_GOLD 0
#define INIT_CHAR '@@'
#define INIT_MOVES 1250
a430 36
/* external routine declarations.
 */
#include <string.h>

char *mon_name();
char *get_ench_color();
char *name_of();
char *md_gln();
char *md_getenv();
char *md_malloc();
boolean is_direction();
boolean mon_sees();
boolean mask_pack();
boolean mask_room();
boolean is_digit();
boolean check_hunger();
boolean reg_move();
boolean md_df();
boolean has_been_touched();
object *add_to_pack();
object *alloc_object();
object *get_letter_object();
object *gr_monster();
object *get_thrown_at_monster();
object *get_zapped_monster();
object *check_duplicate();
object *gr_object();
object *object_at();
object *pick_up();
struct id *get_id_table();
unsigned short gr_what_is();
long rrandom();
long lget_number();
long xxx();
void byebye(), onintr(), error_save();

d448 4
d456 28
a483 1
char *md_gdtcf();
d488 367
@


1.1
log
@Initial revision
@
text
@d49 1
a49 1
 *         gain or profit.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
