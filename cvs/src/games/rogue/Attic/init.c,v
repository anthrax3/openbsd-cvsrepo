head	1.13;
access;
symbols
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.16
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.12
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.9.0.10
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.8
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.6
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.9.0.4
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.2
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.16
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.14
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.12
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.10
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.8
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2011.07.03.05.12.15;	author martynas;	state dead;
branches;
next	1.12;

1.12
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.08.09.44.35;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.06.04.41.18;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2004.01.21.19.12.13;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.18.07.13.57;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.31.05.11.37;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	98.09.16.00.44.36;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.08.22.08.55.27;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	97.07.23.20.05.01;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.12.21.22.06.21;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove rogue.  Its license is not acceptable for our tree;  been
unlinked from the builds for 8 years.  I've been talking with the
author 2 years ago, he didn't release a proper license.  It's clear
that the issue won't be resolved.  OK tedu@@.
@
text
@/*	$OpenBSD: init.c,v 1.12 2009/10/27 23:59:26 deraadt Exp $	*/
/*	$NetBSD: init.c,v 1.4 1995/04/28 23:49:19 mycroft Exp $	*/

/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Timothy C. Stoehr.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * init.c
 *
 * This source herein may be modified and/or distributed by anybody who
 * so desires, with the following restrictions:
 *    1.)  No portion of this notice shall be removed.
 *    2.)  Credit shall not be taken for the creation of this source.
 *    3.)  This code is not to be traded, sold, or used for personal
 *         gain or profit.
 *
 */

#include <err.h>
#include "rogue.h"

char login_name[LOGIN_NAME_LEN];
char *nick_name = NULL;
char *rest_file = 0;
boolean cant_int = 0;
boolean did_int = 0;
boolean score_only;
boolean init_curses = 0;
boolean save_is_interactive = 1;
boolean ask_quit = 1;
boolean no_skull = 0;
boolean passgo = 0;
const char *error_file = "rogue.esave";
const char *byebye_string = "Okay, bye bye!";
gid_t gid, egid;

int
init(int argc, char *argv[])
{
	char *pn;
	int seed;

	gid = getgid();
	egid = getegid();
	setegid(gid);
	pn = md_gln();
	if ((!pn) || (strlen(pn) >= LOGIN_NAME_LEN))
		clean_up("Hey!  Who are you?");
	(void) strlcpy(login_name, pn, sizeof(login_name));
	/* ':' is reserved.  If it's in a login_name, we're on a weird
	 * system... */
	while ((pn = strchr(login_name, ':')) != NULL)
		*pn = ';';

	do_args(argc, argv);
	do_opts();

	if (!score_only && !rest_file) {
		printf("Hello %s, just a moment while I dig the dungeon...",
			nick_name);
		fflush(stdout);
	}

	initscr();
	init_curses = 1;
	if ((LINES < DROWS) || (COLS < DCOLS)) {
		clean_up("must be played on 24 x 80 screen (or larger)");
	}
	start_window();

	md_heed_signals();

	if (score_only) {
		put_scores((object *) NULL, 0);
	}
	seed = md_gseed();
	(void) srrandom(seed);
	if (rest_file) {
		restore(rest_file);
		return(1);
	}
	mix_colors();
	get_wand_and_ring_materials();
	make_scroll_titles();

	level_objects.next_object = (object *) 0;
	level_monsters.next_monster = (object *) 0;
	player_init();
	ring_stats(0);
	return(0);
}

void
player_init(void)
{
	object *obj;

	rogue.pack.next_object = (object *) 0;

	obj = alloc_object();
	get_food(obj, 1);
	(void) add_to_pack(obj, &rogue.pack, 1);

	obj = alloc_object();		/* initial armor */
	obj->what_is = ARMOR;
	obj->which_kind = RINGMAIL;
	obj->class = RINGMAIL+2;
	obj->is_protected = 0;
	obj->d_enchant = 1;
	(void) add_to_pack(obj, &rogue.pack, 1);
	do_wear(obj);

	obj = alloc_object();		/* initial weapons */
	obj->what_is = WEAPON;
	obj->which_kind = MACE;
	obj->damage = "2d3";
	obj->hit_enchant = obj->d_enchant = 1;
	obj->identified = 1;
	(void) add_to_pack(obj, &rogue.pack, 1);
	do_wield(obj);

	obj = alloc_object();
	obj->what_is = WEAPON;
	obj->which_kind = BOW;
	obj->damage = "1d2";
	obj->hit_enchant = 1;
	obj->d_enchant = 0;
	obj->identified = 1;
	(void) add_to_pack(obj, &rogue.pack, 1);

	obj = alloc_object();
	obj->what_is = WEAPON;
	obj->which_kind = ARROW;
	obj->quantity = get_rand(25, 35);
	obj->damage = "1d2";
	obj->hit_enchant = 0;
	obj->d_enchant = 0;
	obj->identified = 1;
	(void) add_to_pack(obj, &rogue.pack, 1);
}

void
clean_up(const char *estr)
{
	if (save_is_interactive) {
		if (init_curses) {
			move(DROWS-1, 0);
			refresh();
			stop_window();
		}
		printf("\n%s\n", estr);
	}
	md_exit(0);
}

void
start_window(void)
{
	cbreak();
	noecho();
#ifndef BAD_NONL
	nonl();
#endif
}

void
stop_window(void)
{
	endwin();
}

void
byebye(int dummy)
{
	md_ignore_signals();
	if (ask_quit) {
		quit(1);
	} else {
		clean_up(byebye_string);
	}
	md_heed_signals();
}

void
onintr(int dummy)
{
	md_ignore_signals();
	if (cant_int) {
		did_int = 1;
	} else {
		check_message();
		messagef(1, "interrupt");
	}
	md_heed_signals();
}

void
error_save(int dummy)
{
	save_is_interactive = 0;
	save_into_file(error_file);
	clean_up("");
}

void
do_args(int argc, char *argv[])
{
	int i, j;

	for (i = 1; i < argc; i++) {
		if (argv[i][0] == '-') {
			for (j = 1; argv[i][j]; j++) {
				switch(argv[i][j]) {
				case 's':
					score_only = 1;
					break;
				}
			}
		} else {
			rest_file = argv[i];
		}
	}
}

void
do_opts(void)
{
	char *eptr;

	if ((eptr = md_getenv("ROGUEOPTS"))) {
		for (;;) {
			while ((*eptr) == ' ') {
				eptr++;
			}
			if (!(*eptr))
				break;
			if (!strncmp(eptr, "fruit=", 6)) {
				eptr += 6;
				env_get_value(&fruit, eptr, 1);
			} else if (!strncmp(eptr, "file=", 5)) {
				eptr += 5;
				env_get_value(&save_file, eptr, 0);
			} else if (!strncmp(eptr, "jump", 4)) {
				jump = 1;
			} else if (!strncmp(eptr, "name=", 5)) {
				eptr += 5;
				env_get_value(&nick_name, eptr, 0);
			} else if (!strncmp(eptr, "noaskquit", 9)) {
				ask_quit = 0;
			} else if (!strncmp(eptr, "noskull", 5) ||
					!strncmp(eptr,"notomb", 6)) {
				no_skull = 1;
			} else if (!strncmp(eptr, "passgo", 5)) {
				passgo = 1;
			}
			while ((*eptr) && (*eptr != ',')) {
				eptr++;
			}
			if (!(*(eptr++))) {
				break;
			}
		}
	}
	/* If some strings have not been set through ROGUEOPTS, assign defaults
	 * to them so that the options editor has data to work with.
	 */
	init_str(&nick_name, login_name);
	init_str(&save_file, "rogue.save");
	init_str(&fruit, "slime-mold");
}

void
env_get_value(char **s, char *e, boolean add_blank)
{
	short i = 0;
	char *t;

	t = e;

	while ((*e) && (*e != ',')) {
		e++;
		if (++i >= MAX_OPT_LEN)
			break;
	}
	/* room.c:edit_opts() depends on length MAX_OPT_LEN + 2 */
	if (!(*s = md_malloc(MAX_OPT_LEN + 2)))
		clean_up("out of memory");
	(void) strlcpy(*s, t, MAX_OPT_LEN + 2);
	if (add_blank) {
		(*s)[i++] = ' ';
	}
	(*s)[i] = '\0';
}

void
init_str(char **str, const char *dflt)
{
	if (!(*str)) {
		/* room.c:edit_opts() depends on length MAX_OPT_LEN + 2 */
		*str = md_malloc(MAX_OPT_LEN + 2);
		if (*str == NULL)
			clean_up("out of memory");
		(void) strlcpy(*str, dflt, MAX_OPT_LEN + 2);
	}
}
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.11 2006/03/08 09:44:35 otto Exp $	*/
@


1.11
log
@Ansify; from Alexey Dobriyan; hope the license gets cleared up, so we
can include this in the build again.
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.10 2006/03/06 04:41:18 deraadt Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)init.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: init.c,v 1.10 2006/03/06 04:41:18 deraadt Exp $";
#endif
#endif /* not lint */
@


1.10
log
@fixes from adobriyan@@gmail
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.9 2004/01/21 19:12:13 espie Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: init.c,v 1.9 2004/01/21 19:12:13 espie Exp $";
d75 1
a75 3
init(argc, argv)
	int argc;
	char *argv[];
d131 1
a131 1
player_init()
d180 1
a180 2
clean_up(estr)
	const char *estr;
d194 1
a194 1
start_window()
d204 1
a204 1
stop_window()
d210 1
a210 2
byebye(dummy)
	int dummy;
d222 1
a222 2
onintr(dummy)
	int dummy;
d235 1
a235 2
error_save(dummy)
	int dummy;
d243 1
a243 3
do_args(argc, argv)
	int argc;
	char *argv[];
d263 1
a263 1
do_opts()
d310 1
a310 3
env_get_value(s, e, add_blank)
	char **s, *e;
	boolean add_blank;
d333 1
a333 3
init_str(str, dflt)
	char **str;
	const char *dflt;
@


1.9
log
@make rogue const-correct, and fix one write-strings issue.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.8 2003/06/03 03:01:41 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: init.c,v 1.8 2003/06/03 03:01:41 millert Exp $";
d253 1
a253 1
	short i, j;
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.7 2002/07/18 07:13:57 pjanzen Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: init.c,v 1.7 2002/07/18 07:13:57 pjanzen Exp $";
d70 2
a71 2
char *error_file = "rogue.esave";
char *byebye_string = "Okay, bye bye!";
d183 1
a183 1
	char *estr;
d344 2
a345 1
	char **str, *dflt;
@


1.7
log
@- string handling patch from David Holland, minimally modified.  Highlights
are fewer magic constants, sprintf->snprintf, and better scorefile handling.
Also, won't hang if forking a subshell fails.
- a few needless functions have been trimmed, and a few extra defaults have
been added to a few switches, just in case.
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.6 2002/05/31 05:11:37 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD$";
@


1.6
log
@crmode -> cbreak
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.5 1998/09/16 00:44:36 pjanzen Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: init.c,v 1.5 1998/09/16 00:44:36 pjanzen Exp $";
d63 2
a64 2
char login_name[MAX_OPT_LEN];
char *nick_name = (char *) 0;
d90 1
a90 1
	if ((!pn) || (strlen(pn) >= MAX_OPT_LEN)) {
d92 5
a96 2
	}
	(void) strcpy(login_name, pn);
d108 1
a112 1
	init_curses = 1;
d117 1
a117 1
		put_scores((object *) 0, 0);
d238 1
a238 1
		message("interrupt", 1);
d284 1
a284 1
			if (!(*eptr)) {
a285 1
			}
a331 3
		if (*e == ':') {
			*e = ';';		/* ':' reserved for score file purposes */
		}
d333 1
a333 1
		if (++i >= MAX_OPT_LEN) {
a334 1
		}
d336 1
d338 2
a339 2
		errx(1, "malloc failure");
	(void) strncpy(*s, t, i);
d351 5
a355 3
		if (!(*str = md_malloc(MAX_OPT_LEN + 2)))
			errx(1, "malloc failure");
		(void) strcpy(*str, dflt);
@


1.5
log
@Make sure malloc() succeeds
@
text
@d1 1
a1 1
/*	$OpenBSD: init.c,v 1.4 1998/08/22 08:55:27 pjanzen Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: init.c,v 1.4 1998/08/22 08:55:27 pjanzen Exp $";
d200 1
a200 1
	crmode();
@


1.4
log
@More largely NetBSD-inspired code cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD$";
d60 1
d338 2
a339 1
	*s = md_malloc(MAX_OPT_LEN + 2);
d352 2
a353 1
		*str = md_malloc(MAX_OPT_LEN + 2);
@


1.3
log
@tabify
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: init.c,v 1.4 1995/04/28 23:49:19 mycroft Exp $";
d56 1
a56 1
 *	   gain or profit.
a59 2
#include <stdio.h>
#include <unistd.h>
d77 1
a77 5
extern char *fruit;
extern char *save_file;
extern short party_room;
extern boolean jump;

d79 2
a80 2
int argc;
char *argv[];
d105 1
a105 1
		clean_up("must be played on 24 x 80 screen");
d132 1
d181 1
d183 1
a183 1
char *estr;
d196 1
d206 1
d213 2
a214 1
byebye()
d226 2
a227 1
onintr()
d240 2
a241 1
error_save()
d248 1
d250 2
a251 2
int argc;
char *argv[];
d270 1
d275 1
a275 1
	if (eptr = md_getenv("ROGUEOPTS")) {
d318 1
d320 2
a321 2
char **s, *e;
boolean add_blank;
d345 1
d347 1
a347 1
char **str, *dflt;
@


1.2
log
@Deal correctly with being SGID
@
text
@d55 1
a55 1
 *         gain or profit.
@


1.1
log
@Initial revision
@
text
@d60 1
d76 1
d90 3
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
