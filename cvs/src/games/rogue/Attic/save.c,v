head	1.14;
access;
symbols
	OPENBSD_4_9:1.13.0.6
	OPENBSD_4_9_BASE:1.13
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	OPENBSD_4_6:1.12.0.16
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.12
	OPENBSD_4_5_BASE:1.12
	OPENBSD_4_4:1.12.0.10
	OPENBSD_4_4_BASE:1.12
	OPENBSD_4_3:1.12.0.8
	OPENBSD_4_3_BASE:1.12
	OPENBSD_4_2:1.12.0.6
	OPENBSD_4_2_BASE:1.12
	OPENBSD_4_1:1.12.0.4
	OPENBSD_4_1_BASE:1.12
	OPENBSD_4_0:1.12.0.2
	OPENBSD_4_0_BASE:1.12
	OPENBSD_3_9:1.10.0.10
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2011.07.03.05.12.15;	author martynas;	state dead;
branches;
next	1.13;

1.13
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.08.09.44.35;	author otto;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.06.17.28.58;	author henning;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.21.19.12.13;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.06.18.50.38;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.26.19.56.07;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.18.07.13.57;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.12.23.07.40;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.08.22.08.55.46;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	97.07.23.20.05.10;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.10.28.00.12.44;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.19;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Remove rogue.  Its license is not acceptable for our tree;  been
unlinked from the builds for 8 years.  I've been talking with the
author 2 years ago, he didn't release a proper license.  It's clear
that the issue won't be resolved.  OK tedu@@.
@
text
@/*	$OpenBSD: save.c,v 1.13 2009/10/27 23:59:26 deraadt Exp $	*/
/*	$NetBSD: save.c,v 1.3 1995/04/22 10:28:21 cgd Exp $	*/

/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Timothy C. Stoehr.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * save.c
 *
 * This source herein may be modified and/or distributed by anybody who
 * so desires, with the following restrictions:
 *    1.)  No portion of this notice shall be removed.
 *    2.)  Credit shall not be taken for the creation of this source.
 *    3.)  This code is not to be traded, sold, or used for personal
 *         gain or profit.
 *
 */

#include <sys/param.h>
#include <sys/types.h>
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include "rogue.h"

char *save_file = (char *) NULL;

static short write_failed = 0;

static void write_pack(object *, int);
static void read_pack(object *, int, boolean);
static void rw_dungeon(int, boolean);
static void rw_id(struct id *, int, int, boolean);
static void write_string(char *, int);
static void read_string(char *, size_t, int);
static void rw_rooms(int, boolean);
static void r_read(int, char *, size_t);
static void r_write(int, char *, size_t);
static boolean has_been_touched(struct rogue_time *, struct rogue_time *);


void
save_game(void)
{
	char fname[MAXPATHLEN];

	if (!get_input_line("file name?", save_file, fname, sizeof(fname),
	    "game not saved", 0, 1)) {
		return;
	}
	check_message();
	messagef(0, "%s", fname);
	save_into_file(fname);
}

void
save_into_file(const char *sfile)
{
	int fp;
	int file_id;
	char name_buffer[MAXPATHLEN];
	char *hptr;
	struct rogue_time rt_buf;

	if (sfile[0] == '~') {
		if ((hptr = md_getenv("HOME"))) {
			if (strlen(hptr) + strlen(sfile+1) < sizeof(name_buffer)) {
				(void) strlcpy(name_buffer, hptr,
					sizeof name_buffer);
				(void) strlcat(name_buffer, sfile+1,
					sizeof name_buffer);
				sfile = name_buffer;
			} else {
				messagef(0, "homedir is too long");
				return;
			}
		}
	}
	if (	((fp = open(sfile, O_WRONLY | O_CREAT | O_TRUNC, 0644)) == -1) ||
			((file_id = md_get_file_id(sfile)) == -1)) {
		messagef(0, "problem accessing the save file");
		if (fp != -1)
			close(fp);
		return;
	}
	md_ignore_signals();
	write_failed = 0;
	(void) xxx(1);
	r_write(fp, (char *) &detect_monster, sizeof(detect_monster));
	r_write(fp, (char *) &cur_level, sizeof(cur_level));
	r_write(fp, (char *) &max_level, sizeof(max_level));
	write_string(hunger_str, fp);
	write_string(login_name, fp);
	r_write(fp, (char *) &party_room, sizeof(party_room));
	write_pack(&level_monsters, fp);
	write_pack(&level_objects, fp);
	r_write(fp, (char *) &file_id, sizeof(file_id));
	rw_dungeon(fp, 1);
	r_write(fp, (char *) &foods, sizeof(foods));
	r_write(fp, (char *) &rogue, sizeof(fighter));
	write_pack(&rogue.pack, fp);
	rw_id(id_potions, fp, POTIONS, 1);
	rw_id(id_scrolls, fp, SCROLS, 1);
	rw_id(id_wands, fp, WANDS, 1);
	rw_id(id_rings, fp, RINGS, 1);
	r_write(fp, (char *) traps, (MAX_TRAPS * sizeof(trap)));
	r_write(fp, (char *) is_wood, (WANDS * sizeof(boolean)));
	r_write(fp, (char *) &cur_room, sizeof(cur_room));
	rw_rooms(fp, 1);
	r_write(fp, (char *) &being_held, sizeof(being_held));
	r_write(fp, (char *) &bear_trap, sizeof(bear_trap));
	r_write(fp, (char *) &halluc, sizeof(halluc));
	r_write(fp, (char *) &blind, sizeof(blind));
	r_write(fp, (char *) &confused, sizeof(confused));
	r_write(fp, (char *) &levitate, sizeof(levitate));
	r_write(fp, (char *) &haste_self, sizeof(haste_self));
	r_write(fp, (char *) &see_invisible, sizeof(see_invisible));
	r_write(fp, (char *) &detect_monster, sizeof(detect_monster));
	r_write(fp, (char *) &wizard, sizeof(wizard));
	r_write(fp, (char *) &score_only, sizeof(score_only));
	r_write(fp, (char *) &m_moves, sizeof(m_moves));
	md_gct(&rt_buf);
	rt_buf.second += 10;		/* allow for some processing time */
	r_write(fp, (char *) &rt_buf, sizeof(rt_buf));
	close(fp);

	if (write_failed) {
		(void) md_df(sfile);	/* delete file */
	} else {
		clean_up("");
	}
}

void
restore(char *fname)
{
	int fp;
	struct rogue_time saved_time, mod_time;
	char buf[4];
	char tbuf[LOGIN_NAME_LEN];
	int new_file_id, saved_file_id;

	if (((new_file_id = md_get_file_id(fname)) == -1) ||
			((fp = open(fname, O_RDONLY, 0)) == -1)) {
		clean_up("cannot open file");
		return;	/* NOT REACHED */
	}
	if (md_link_count(fname) > 1) {
		clean_up("file has link");
	}
	(void) xxx(1);
	r_read(fp, (char *) &detect_monster, sizeof(detect_monster));
	r_read(fp, (char *) &cur_level, sizeof(cur_level));
	r_read(fp, (char *) &max_level, sizeof(max_level));
	read_string(hunger_str, HUNGER_STR_LEN, fp);

	strlcpy(tbuf, login_name, sizeof(tbuf));
	read_string(login_name, LOGIN_NAME_LEN, fp);
	if (strcmp(tbuf, login_name)) {
		clean_up("you're not the original player");
	}

	r_read(fp, (char *) &party_room, sizeof(party_room));
	read_pack(&level_monsters, fp, 0);
	read_pack(&level_objects, fp, 0);
	r_read(fp, (char *) &saved_file_id, sizeof(saved_file_id));
	if (new_file_id != saved_file_id) {
		clean_up("sorry, saved game is not in the same file");
	}
	rw_dungeon(fp, 0);
	r_read(fp, (char *) &foods, sizeof(foods));
	r_read(fp, (char *) &rogue, sizeof(fighter));
	read_pack(&rogue.pack, fp, 1);
	rw_id(id_potions, fp, POTIONS, 0);
	rw_id(id_scrolls, fp, SCROLS, 0);
	rw_id(id_wands, fp, WANDS, 0);
	rw_id(id_rings, fp, RINGS, 0);
	r_read(fp, (char *) traps, (MAX_TRAPS * sizeof(trap)));
	r_read(fp, (char *) is_wood, (WANDS * sizeof(boolean)));
	r_read(fp, (char *) &cur_room, sizeof(cur_room));
	rw_rooms(fp, 0);
	r_read(fp, (char *) &being_held, sizeof(being_held));
	r_read(fp, (char *) &bear_trap, sizeof(bear_trap));
	r_read(fp, (char *) &halluc, sizeof(halluc));
	r_read(fp, (char *) &blind, sizeof(blind));
	r_read(fp, (char *) &confused, sizeof(confused));
	r_read(fp, (char *) &levitate, sizeof(levitate));
	r_read(fp, (char *) &haste_self, sizeof(haste_self));
	r_read(fp, (char *) &see_invisible, sizeof(see_invisible));
	r_read(fp, (char *) &detect_monster, sizeof(detect_monster));
	r_read(fp, (char *) &wizard, sizeof(wizard));
	r_read(fp, (char *) &score_only, sizeof(score_only));
	r_read(fp, (char *) &m_moves, sizeof(m_moves));
	r_read(fp, (char *) &saved_time, sizeof(saved_time));

	if (read(fp, buf, 1) > 0) {
		clear();
		clean_up("extra characters in file");
	}

	md_gfmt(fname, &mod_time);	/* get file modification time */

	if (has_been_touched(&saved_time, &mod_time)) {
		clear();
		clean_up("sorry, file has been touched");
	}
	if ((!wizard) && !md_df(fname)) {
		clean_up("cannot delete file");
	}
	msg_cleared = 0;
	ring_stats(0);
	close(fp);
}

static void
write_pack(object *pack, int fp)
{
	object t;

	while ((pack = pack->next_object)) {
		r_write(fp, (char *) pack, sizeof(object));
	}
	t.ichar = t.what_is = 0;
	r_write(fp, (char *) &t, sizeof(object));
}

static void
read_pack(object *pack, int fp, boolean is_rogue)
{
	object read_obj, *new_obj;

	for (;;) {
		r_read(fp, (char *) &read_obj, sizeof(object));
		if (read_obj.ichar == 0) {
			pack->next_object = (object *) 0;
			break;
		}
		new_obj = alloc_object();
		*new_obj = read_obj;
		if (is_rogue) {
			if (new_obj->in_use_flags & BEING_WORN) {
					do_wear(new_obj);
			} else if (new_obj->in_use_flags & BEING_WIELDED) {
					do_wield(new_obj);
			} else if (new_obj->in_use_flags & (ON_EITHER_HAND)) {
				do_put_on(new_obj,
					((new_obj->in_use_flags & ON_LEFT_HAND) ? 1 : 0));
			}
		}
		pack->next_object = new_obj;
		pack = new_obj;
	}
}

static void
rw_dungeon(int fp, boolean rw)
{
	short i, j;
	char buf[DCOLS];

	for (i = 0; i < DROWS; i++) {
		if (rw) {
			r_write(fp, (char *) dungeon[i], (DCOLS * sizeof(dungeon[0][0])));
			for (j = 0; j < DCOLS; j++) {
				buf[j] = mvinch(i, j);
			}
			r_write(fp, buf, DCOLS);
		} else {
			r_read(fp, (char *) dungeon[i], (DCOLS * sizeof(dungeon[0][0])));
			r_read(fp, buf, DCOLS);
			for (j = 0; j < DCOLS; j++) {
				mvaddch(i, j, buf[j]);
			}
		}
	}
}

static void
rw_id(struct id id_table[], int fp, int n, boolean wr)
{
	short i;

	for (i = 0; i < n; i++) {
		if (wr) {
			r_write(fp, (char *) &(id_table[i].value), sizeof(short));
			r_write(fp, (char *) &(id_table[i].id_status),
			    sizeof(unsigned short));
			write_string(id_table[i].title, fp);
		} else {
			r_read(fp, (char *) &(id_table[i].value), sizeof(short));
			r_read(fp, (char *) &(id_table[i].id_status),
			    sizeof(unsigned short));
			read_string(id_table[i].title, sizeof(id_table[i].title),
			    fp);
		}
	}
}

static void
write_string(char *s, int fp)
{
	short n;

	n = strlen(s) + 1;
	xxxx(s, n);
	r_write(fp, (char *) &n, sizeof(short));
	r_write(fp, s, n);
}

static void
read_string(char *s, size_t maxlen, int fp)
{
	short n;

	r_read(fp, (char *) &n, sizeof(short));
	if (n <= 0 || (size_t)(unsigned short)n > maxlen)
		clean_up("saved game is corrupt");
	r_read(fp, s, n);
	xxxx(s, n);
	/* ensure NUL termination */
	s[n - 1] = '\0';
}

static void
rw_rooms(int fp, boolean rw)
{
	short i;

	for (i = 0; i < MAXROOMS; i++) {
		rw ? r_write(fp, (char *) (rooms + i), sizeof(room)) :
			r_read(fp, (char *) (rooms + i), sizeof(room));
	}
}

static void
r_read(int fp, char *buf, size_t n)
{
	if (read(fp, buf, n) != n) {
		clean_up("read() failed, don't know why");
	}
}

static void
r_write(int fp, char *buf, size_t n)
{
	if (!write_failed) {
		if (write(fp, buf, n) != n) {
			messagef(0, "write() failed, don't know why");
			beep();
			write_failed = 1;
		}
	}
}

static boolean
has_been_touched(struct rogue_time *saved_time, struct rogue_time *mod_time)
{
	if (saved_time->year < mod_time->year) {
		return(1);
	} else if (saved_time->year > mod_time->year) {
		return(0);
	}
	if (saved_time->month < mod_time->month) {
		return(1);
	} else if (saved_time->month > mod_time->month) {
		return(0);
	}
	if (saved_time->day < mod_time->day) {
		return(1);
	} else if (saved_time->day > mod_time->day) {
		return(0);
	}
	if (saved_time->hour < mod_time->hour) {
		return(1);
	} else if (saved_time->hour > mod_time->hour) {
		return(0);
	}
	if (saved_time->minute < mod_time->minute) {
		return(1);
	} else if (saved_time->minute > mod_time->minute) {
		return(0);
	}
	if (saved_time->second < mod_time->second) {
		return(1);
	}
	return(0);
}
@


1.13
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.12 2006/03/08 09:44:35 otto Exp $	*/
@


1.12
log
@Ansify; from Alexey Dobriyan; hope the license gets cleared up, so we
can include this in the build again.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.11 2006/03/06 17:28:58 henning Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)save.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: save.c,v 1.11 2006/03/06 17:28:58 henning Exp $";
#endif
#endif /* not lint */
@


1.11
log
@open(2) returns -1 on error, not NULL
From: Alexey Dobriyan <adobriyan@@gmail.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.10 2004/01/21 19:12:13 espie Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: save.c,v 1.10 2004/01/21 19:12:13 espie Exp $";
d80 1
a80 1
save_game()
d94 1
a94 2
save_into_file(sfile)
	const char *sfile;
d172 1
a172 2
restore(fname)
	char *fname;
d253 1
a253 3
write_pack(pack, fp)
	object *pack;
	int fp;
d265 1
a265 4
read_pack(pack, fp, is_rogue)
	object *pack;
	int fp;
	boolean is_rogue;
d293 1
a293 3
rw_dungeon(fp, rw)
	int fp;
	boolean rw;
d316 1
a316 5
rw_id(id_table, fp, n, wr)
	struct id id_table[];
	int fp;
	int n;
	boolean wr;
d337 1
a337 3
write_string(s, fp)
	char *s;
	int fp;
d348 1
a348 4
read_string(s, maxlen, fp)
	char *s;
	size_t maxlen;
	int fp;
d362 1
a362 3
rw_rooms(fp, rw)
	int fp;
	boolean rw;
d373 1
a373 4
r_read(fp, buf, n)
	int fp;
	char *buf;
	size_t n;
d381 1
a381 4
r_write(fp, buf, n)
	int fp;
	char *buf;
	size_t n;
d393 1
a393 2
has_been_touched(saved_time, mod_time)
	struct rogue_time *saved_time, *mod_time;
@


1.10
log
@make rogue const-correct, and fix one write-strings issue.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.9 2003/06/03 03:01:41 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: save.c,v 1.9 2003/06/03 03:01:41 millert Exp $";
d183 1
a183 1
			((fp = open(fname, O_RDONLY, 0)) == NULL)) {
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.8 2003/04/06 18:50:38 deraadt Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: save.c,v 1.8 2003/04/06 18:50:38 deraadt Exp $";
d95 1
a95 1
	char *sfile;
@


1.8
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.7 2002/07/26 19:56:07 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: save.c,v 1.7 2002/07/26 19:56:07 pjanzen Exp $";
@


1.7
log
@A few better buffer sizes (from Ian McWilliam, long ago); functions local
to save.c are no longer in rogue.h; use write() to save files rather than
fwrite() since this can end up being called in a signal handler (it's still
not clean though).
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.6 2002/07/18 07:13:57 pjanzen Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD: save.c,v 1.6 2002/07/18 07:13:57 pjanzen Exp $";
d110 4
a113 2
				(void) strcpy(name_buffer, hptr);
				(void) strcat(name_buffer, sfile+1);
@


1.6
log
@- string handling patch from David Holland, minimally modified.  Highlights
are fewer magic constants, sprintf->snprintf, and better scorefile handling.
Also, won't hang if forking a subshell fails.
- a few needless functions have been trimmed, and a few extra defaults have
been added to a few switches, just in case.
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.5 2001/08/12 23:07:40 pjanzen Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD$";
d60 3
d64 1
d67 15
a81 2
short write_failed = 0;
char *save_file = (char *) 0;
d86 1
a86 1
	char fname[256];
d101 1
a101 1
	FILE *fp;
d103 1
a103 1
	char name_buffer[80];
d119 1
a119 1
	if (	((fp = fopen(sfile, "w")) == NULL) ||
d122 2
d165 1
a165 1
	fclose(fp);
d178 1
a178 1
	FILE *fp;
d185 1
a185 1
			((fp = fopen(fname, "r")) == NULL)) {
d187 1
d237 1
a237 1
	if (fread(buf, sizeof(char), 1, fp) > 0) {
d253 1
a253 1
	fclose(fp);
d256 1
a256 1
void
d259 1
a259 1
	FILE *fp;
d270 1
a270 1
void
d273 1
a273 1
	FILE *fp;
d301 1
a301 1
void
d303 1
a303 1
	FILE *fp;
d326 1
a326 1
void
d329 1
a329 1
	FILE *fp;
d351 1
a351 1
void
d354 1
a354 1
	FILE *fp;
d364 1
a364 1
void
d368 1
a368 1
	FILE *fp;
d381 1
a381 1
void
d383 1
a383 1
	FILE *fp;
d394 1
a394 1
void
d396 1
a396 1
	FILE *fp;
d400 1
a400 1
	if (fread(buf, sizeof(char), n, fp) != n) {
d405 1
a405 1
void
d407 1
a407 1
	FILE *fp;
d412 1
a412 1
		if (fwrite(buf, sizeof(char), n, fp) != n) {
d420 1
a420 1
boolean
@


1.5
log
@Whoops
@
text
@d1 1
a1 1
/*	$OpenBSD: save.c,v 1.4 1998/08/22 08:55:46 pjanzen Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: save.c,v 1.4 1998/08/22 08:55:46 pjanzen Exp $";
d69 1
a69 1
	char fname[64];
d76 1
a76 1
	message(fname, 0);
d97 1
a97 1
				message("homedir is too long", 0);
d104 1
a104 1
		message("problem accessing the save file", 0);
d162 1
a162 1
	char tbuf[40];
d165 1
a165 1
	if (	((new_file_id = md_get_file_id(fname)) == -1) ||
d176 1
a176 1
	read_string(hunger_str, fp);
d178 2
a179 2
	(void) strcpy(tbuf, login_name);
	read_string(login_name, fp);
d319 1
a319 1
				sizeof(unsigned short));
d324 3
a326 2
				sizeof(unsigned short));
			read_string(id_table[i].title, fp);
d345 1
a345 1
read_string(s, fp)
d347 1
d353 2
d357 2
d378 1
a378 1
	int n;
d389 1
a389 1
	int n;
d393 2
a394 2
			message("write() failed, don't know why", 0);
			sound_bell();
@


1.4
log
@More largely NetBSD-inspired code cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD$";
d71 2
a72 2
	if (!get_input_line("file name?", save_file, fname, "game not saved",
			0, 1)) {
@


1.3
log
@tabify
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: save.c,v 1.3 1995/04/22 10:28:21 cgd Exp $";
d56 1
a56 1
 *	   gain or profit.
d66 1
a66 23
extern boolean detect_monster;
extern short cur_level, max_level;
extern char hunger_str[];
extern char login_name[];
extern short party_room;
extern short foods;
extern boolean is_wood[];
extern short cur_room;
extern boolean being_held;
extern short bear_trap;
extern short halluc;
extern short blind;
extern short confused;
extern short levitate;
extern short haste_self;
extern boolean see_invisible;
extern boolean detect_monster;
extern boolean wizard;
extern boolean score_only;
extern short m_moves;

extern boolean msg_cleared;

d80 1
d82 1
a82 1
char *sfile;
d91 1
a91 1
		if (hptr = md_getenv("HOME")) {
d155 1
d157 1
a157 1
char *fname;
d236 1
d238 2
a239 2
object *pack;
FILE *fp;
d243 1
a243 1
	while (pack = pack->next_object) {
d250 1
d252 3
a254 3
object *pack;
FILE *fp;
boolean is_rogue;
d281 1
d283 2
a284 2
FILE *fp;
boolean rw;
d306 1
d308 4
a311 4
struct id id_table[];
FILE *fp;
int n;
boolean wr;
d330 1
d332 2
a333 2
char *s;
FILE *fp;
d343 1
d345 2
a346 2
char *s;
FILE *fp;
d355 1
d357 2
a358 2
FILE *fp;
boolean rw;
d368 1
d370 3
a372 3
FILE *fp;
char *buf;
int n;
d379 1
d381 3
a383 3
FILE *fp;
char *buf;
int n;
d396 1
a396 1
struct rogue_time *saved_time, *mod_time;
@


1.2
log
@Safe $HOME handling.
@
text
@d55 1
a55 1
 *         gain or profit.
@


1.1
log
@Initial revision
@
text
@d112 8
a119 3
			(void) strcpy(name_buffer, hptr);
			(void) strcat(name_buffer, sfile+1);
			sfile = name_buffer;
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
