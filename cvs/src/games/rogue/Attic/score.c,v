head	1.13;
access;
symbols
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.16
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.12
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.10.0.12
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.10
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.8
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.6
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.4
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.10.0.2
	OPENBSD_3_4_BASE:1.10
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9
	OPENBSD_3_1:1.7.0.4
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.2
	OPENBSD_3_0_BASE:1.7
	OPENBSD_2_9:1.4.0.12
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.10
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.8
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.6
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.4.0.4
	OPENBSD_2_5_BASE:1.4
	OPENBSD_2_4:1.4.0.2
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2011.07.03.05.12.15;	author martynas;	state dead;
branches;
next	1.12;

1.12
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.08.09.44.35;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.09.20.26.44;	author jsyn;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.18.07.13.57;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.17.22.28.55;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.10.18.32.46;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.08.21.20.05;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.08.22.08.55.47;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	97.07.23.20.05.10;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.12.21.22.06.22;	author tholo;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.19;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.19;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove rogue.  Its license is not acceptable for our tree;  been
unlinked from the builds for 8 years.  I've been talking with the
author 2 years ago, he didn't release a proper license.  It's clear
that the issue won't be resolved.  OK tedu@@.
@
text
@/*	$OpenBSD: score.c,v 1.12 2009/10/27 23:59:26 deraadt Exp $	*/
/*	$NetBSD: score.c,v 1.5 1995/04/22 10:28:26 cgd Exp $	*/

/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Timothy C. Stoehr.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * score.c
 *
 * This source herein may be modified and/or distributed by anybody who
 * so desires, with the following restrictions:
 *    1.)  No portion of this notice shall be removed.
 *    2.)  Credit shall not be taken for the creation of this source.
 *    3.)  This code is not to be traded, sold, or used for personal
 *         gain or profit.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include "rogue.h"
#include "pathnames.h"

void
killed_by(const object *monster, short other)
{
	const char *mechanism = "killed by something unknown (?)";
	char mechanism_buf[128];
	const char *article;
	char message_buf[128];

	md_ignore_signals();

	if (other != QUIT) {
		rogue.gold = ((rogue.gold * 9) / 10);
	}

	if (other) {
		switch(other) {
		case HYPOTHERMIA:
			mechanism = "died of hypothermia";
			break;
		case STARVATION:
			mechanism = "died of starvation";
			break;
		case POISON_DART:
			mechanism = "killed by a dart";
			break;
		case QUIT:
			mechanism = "quit";
			break;
		case KFIRE:
			mechanism = "killed by fire";
			break;
		}
	} else {
		if (is_vowel(m_names[monster->m_char - 'A'][0])) {
			article = "an";
		} else {
			article = "a";
		}
		snprintf(mechanism_buf, sizeof(mechanism_buf),
		    "Killed by %s %s", article, m_names[monster->m_char - 'A']);
		mechanism = mechanism_buf;
	}
	snprintf(message_buf, sizeof(message_buf),
	    "%s with %ld gold", mechanism, rogue.gold);
	if ((!other) && (!no_skull)) {
		clear();
		mvaddstr(4, 32, "__---------__");
		mvaddstr(5, 30, "_~             ~_");
		mvaddstr(6, 29, "/                 \\");
		mvaddstr(7, 28, "~                   ~");
		mvaddstr(8, 27, "/                     \\");
		mvaddstr(9, 27, "|    XXXX     XXXX    |");
		mvaddstr(10, 27, "|    XXXX     XXXX    |");
		mvaddstr(11, 27, "|    XXX       XXX    |");
		mvaddstr(12, 28, "\\         @@         /");
		mvaddstr(13, 29, "--\\     @@@@@@     /--");
		mvaddstr(14, 30, "| |    @@@@@@    | |");
		mvaddstr(15, 30, "| |           | |");
		mvaddstr(16, 30, "| vvVvvvvvvvVvv |");
		mvaddstr(17, 30, "|  ^^^^^^^^^^^  |");
		mvaddstr(18, 31, "\\_           _/");
		mvaddstr(19, 33, "~---------~");
		center(21, nick_name);
		center(22, message_buf);
	} else {
		messagef(0, "%s", message_buf);
	}
	messagef(0, "");
	put_scores(monster, other);
}

void
win(void)
{
	unwield(rogue.weapon);		/* disarm and relax */
	unwear(rogue.armor);
	un_put_on(rogue.left_ring);
	un_put_on(rogue.right_ring);

	clear();
	mvaddstr(10, 11, "@@   @@  @@@@@@   @@   @@      @@  @@  @@   @@@@@@   @@   @@   @@");
	mvaddstr(11, 11, " @@ @@  @@   @@  @@   @@      @@  @@  @@  @@   @@  @@@@  @@   @@");
	mvaddstr(12, 11, "  @@   @@   @@  @@   @@      @@  @@  @@  @@   @@  @@ @@ @@   @@");
	mvaddstr(13, 11, "  @@   @@   @@  @@   @@      @@  @@  @@  @@   @@  @@  @@@@");
	mvaddstr(14, 11, "  @@    @@@@@@    @@@@@@        @@@@ @@@@    @@@@@@   @@   @@   @@");
	mvaddstr(17, 11, "Congratulations,  you have  been admitted  to  the");
	mvaddstr(18, 11, "Fighters' Guild.   You return home,  sell all your");
	mvaddstr(19, 11, "treasures at great profit and retire into comfort.");
	messagef(0, "");
	messagef(0, "");
	id_all();
	sell_pack();
	put_scores((object *) 0, WIN);
}

void
quit(boolean from_intrpt)
{
	char buf[DCOLS];
	short i, orow, ocol;
	boolean mc;
	short ch;

	md_ignore_signals();

	if (from_intrpt) {
		orow = rogue.row;
		ocol = rogue.col;

		mc = msg_cleared;

		for (i = 0; i < DCOLS; i++) {
			buf[i] = mvinch(0, i);
		}
	}
	check_message();
	messagef(1, "really quit?");
	if ((ch = rgetchar()) != 'y' && ch != 'Y') {
		md_heed_signals();
		check_message();
		if (from_intrpt) {
			for (i = 0; i < DCOLS; i++) {
				mvaddch(0, i, buf[i]);
			}
			msg_cleared = mc;
			move(orow, ocol);
			refresh();
		}
		return;
	}
	if (from_intrpt) {
		clean_up(byebye_string);
	}
	check_message();
	killed_by((object *) 0, QUIT);
}

/*
 * The score file on disk is up to ten entries of the form
 *      score block [80 bytes]
 *      nickname block [30 bytes]
 *
 * The score block is to be parsed as follows:
 *      bytes 0-1	Rank (" 1" to "10")
 *      bytes 2-4	space padding
 *      bytes 5-15	Score/gold
 *      byte 15 up to a ':'	Login name
 *      past the ':'    Death mechanism
 *
 * The nickname block is an alternate name to be printed in place of the
 * login name. Both blocks are supposed to contain a null-terminator.
 *
 * XXX This score file format is historic, but the sizes can lead to
 * truncation in cause of death and nickname.  Currently LOGIN_NAME_LEN
 * is short enough actual scorefile corruption is not possible.
 */

struct score_entry {
	long gold;
	char username[LOGIN_NAME_LEN];
	char death[80];
	char nickname[MAX_OPT_LEN + 1];
};

static void pad_spaces(char *, size_t);
static void unpad_spaces(char *);
static int read_score_entry(struct score_entry *, FILE *);
static void write_score_entry(const struct score_entry *, int, FILE *);
static void make_score(struct score_entry *, const object *, int);


static void
pad_spaces(char *str, size_t len)
{
	size_t x;

	for (x = strlen(str); x < len - 1; x++) {
		str[x] = ' ';
	}
	str[len-1] = '\0';
}

static void
unpad_spaces(char *str)
{
	size_t x;

	for (x = strlen(str); x > 0 && str[x - 1] == ' '; x--)
		;
	str[x] = '\0';
}

static int
read_score_entry(struct score_entry *se, FILE *fp)
{
	char score_block[80];
	char nickname_block[30];
	size_t n, x;

	n = fread(score_block, 1, sizeof(score_block), fp);
	if (n == 0) {
		/* EOF */
		return(0);
	}
	if (n != sizeof(score_block)) {
		sf_error();
	}

	n = fread(nickname_block, 1, sizeof(nickname_block), fp);
	if (n != sizeof(nickname_block)) {
		sf_error();
	}

	xxxx(score_block, sizeof(score_block));
	xxxx(nickname_block, sizeof(nickname_block));

	/* Ensure null termination */
	score_block[sizeof(score_block) - 1] = '\0';
	nickname_block[sizeof(nickname_block) - 1] = '\0';

	/* If there are other nulls in the score block, file is corrupt */
	if (strlen(score_block) != sizeof(score_block) - 1) {
		sf_error();
	}
	/* but this is NOT true of the nickname block */

	/* quash trailing spaces */
	unpad_spaces(score_block);
	unpad_spaces(nickname_block);

	se->gold = strtol(score_block + 5, NULL, 10);

	for (x = 15; score_block[x] != '\0' && score_block[x] != ':'; x++);
	if (score_block[x] == '\0') {
		sf_error();
	}
	score_block[x++] = '\0';
	strlcpy(se->username, score_block + 15, sizeof(se->username));

	strlcpy(se->death, score_block + x, sizeof(se->death));
	strlcpy(se->nickname, nickname_block, sizeof(se->nickname));

	return(1);
}

static void
write_score_entry(const struct score_entry *se, int rank, FILE *fp)
{
	char score_block[80];
	char nickname_block[30];

	/* avoid writing crap to score file */
	memset(nickname_block, 0, sizeof(nickname_block));

	snprintf(score_block, sizeof(score_block),
		 "%2d    %6ld   %s: %s",
		 rank + 1, se->gold, se->username, se->death);
	strlcpy(nickname_block, se->nickname, sizeof(nickname_block));

	/* pad blocks out with spaces */
	pad_spaces(score_block, sizeof(score_block));
	/*pad_spaces(nickname_block, sizeof(nickname_block)); -- wrong! */

	xxxx(score_block, sizeof(score_block));
	xxxx(nickname_block, sizeof(nickname_block));

	fwrite(score_block, 1, sizeof(score_block), fp);
	fwrite(nickname_block, 1, sizeof(nickname_block), fp);
}

void
put_scores(const object *monster, short other)
{
	short i, rank = -1, found_player = -1, numscores = 0;
	struct score_entry scores[NUM_SCORE_ENTRIES];
	const char *name;
	FILE *fp;
	boolean dopause = score_only;
	extern gid_t gid, egid;

	md_lock(1);

	setegid(egid);
	if ((fp = fopen(_PATH_SCOREFILE, "r+")) == NULL &&
	    (fp = fopen(_PATH_SCOREFILE, "w+")) == NULL) {
		setegid(gid);
		messagef(0, "cannot read/write/create score file");
		sf_error();
	}
	setegid(gid);
	rewind(fp);
	(void) xxx(1);

	for (numscores = 0; numscores < NUM_SCORE_ENTRIES; numscores++) {
		if (read_score_entry(&scores[numscores], fp) == 0)
			break;
	}

	/* Search the score list. */
	for (i = 0; i < numscores; i++) {
		if (!strcmp(scores[i].username, login_name)) {
			if (rogue.gold < scores[i].gold) {
				score_only = 1;
			} else {
				/* we did better; mark entry for removal */
				found_player = i;
			}
			break;
		}
	}

	/* Remove a superseded entry, if any. */
	if (found_player != -1) {
		numscores--;
		for (i = found_player; i < numscores; i++) {
			scores[i] = scores[i + 1];
		}
	}

	/* If we're going to insert ourselves, do it now */
	if (!score_only) {
		/* If we aren't better than anyone, add at end; otherwise, find
		 * our slot.
		 */
		rank = numscores;
		for (i = 0; i < numscores; i++) {
			if (rogue.gold >= scores[i].gold) {
				rank = i;
				break;
			}
		}
		if (rank < NUM_SCORE_ENTRIES) {
			for (i = numscores; i > rank; i--) {
				scores[i] = scores[i-1];
			}
			numscores++;
			make_score(&scores[rank], monster, other);
		}

		/* Now rewrite the score file */
		md_ignore_signals();
		rewind(fp);
		(void) xxx(1);
		for (i = 0; i < numscores; i++) {
			write_score_entry(&scores[i], i, fp);
		}
	}
	md_lock(0);
	fclose(fp);

	/* Display scores */
	clear();
	mvaddstr(3, 30, "Top  Ten  Rogueists");
	mvaddstr(8, 0, "Rank   Score   Name");
	for (i = 0; i < numscores; i++) {
		if (i == rank) {
			standout();
		}
		if (scores[i].nickname[0]) {
			name = scores[i].nickname;
		} else {
			name = scores[i].username;
		}
		mvprintw(i+10, 0, "%2d    %6ld   %s: %s",
		    i + 1, scores[i].gold, name, scores[i].death);
		if (i == rank) {
			standend();
		}
	}
	refresh();
	messagef(0, "");
	if (dopause) {
		messagef(0, "");
	}
	clean_up("");
}

static void
make_score(struct score_entry *se, const object *monster, int other)
{
	const char *death = "bolts from the blue (?)";
	const char *hasamulet;
	char deathbuf[80];

	se->gold = rogue.gold;
	strlcpy(se->username, login_name, sizeof(se->username));
	if (other) {
		switch(other) {
		case HYPOTHERMIA:
			death = "died of hypothermia";
			break;
		case STARVATION:
			death = "died of starvation";
			break;
		case POISON_DART:
			death = "killed by a dart";
			break;
		case QUIT:
			death = "quit";
			break;
		case WIN:
			death = "a total winner";
			break;
		case KFIRE:
			death = "killed by fire";
			break;
		}
	} else {
		const char *mn, *article;

		mn = m_names[monster->m_char - 'A'];
		if (is_vowel(mn[0])) {
			article = "an";
		} else {
			article = "a";
		}
		snprintf(deathbuf, sizeof(deathbuf), "killed by %s %s",
		    article, mn);
		death = deathbuf;
	}
	if (other != WIN && has_amulet()) {
		hasamulet = " with amulet";
	} else {
		hasamulet = "";
	}
	snprintf(se->death, sizeof(se->death), "%s on level %d%s",
	    death, max_level, hasamulet);
	strlcpy(se->nickname, nick_name, sizeof(se->nickname));
}

boolean
is_vowel(short ch)
{
	return( (ch == 'a') ||
		(ch == 'e') ||
		(ch == 'i') ||
		(ch == 'o') ||
		(ch == 'u') );
}

void
sell_pack(void)
{
	object *obj;
	short row = 2, val;
	char buf[DCOLS];

	obj = rogue.pack.next_object;

	clear();
	mvaddstr(1, 0, "Value      Item");

	while (obj) {
		if (obj->what_is != FOOD) {
			obj->identified = 1;
			val = get_value(obj);
			rogue.gold += val;

			if (row < DROWS) {
				get_desc(obj, buf, sizeof(buf));
				mvprintw(row++, 0, "%5d      %s", val, buf);
			}
		}
		obj = obj->next_object;
	}
	refresh();
	if (rogue.gold > MAX_GOLD) {
		rogue.gold = MAX_GOLD;
	}
	messagef(0, "");
}

int
get_value(object *obj)
{
	short wc;
	int val;

	val = 0;
	wc = obj->which_kind;

	switch(obj->what_is) {
	case WEAPON:
		val = id_weapons[wc].value;
		if ((wc == ARROW) || (wc == DAGGER) || (wc == SHURIKEN) ||
			(wc == DART)) {
			val *= obj->quantity;
		}
		val += (obj->d_enchant * 85);
		val += (obj->hit_enchant * 85);
		break;
	case ARMOR:
		val = id_armors[wc].value;
		val += (obj->d_enchant * 75);
		if (obj->is_protected) {
			val += 200;
		}
		break;
	case WAND:
		val = id_wands[wc].value * (obj->class + 1);
		break;
	case SCROL:
		val = id_scrolls[wc].value * obj->quantity;
		break;
	case POTION:
		val = id_potions[wc].value * obj->quantity;
		break;
	case AMULET:
		val = 5000;
		break;
	case RING:
		val = id_rings[wc].value * (obj->class + 1);
		break;
	}
	if (val <= 0) {
		val = 10;
	}
	return(val);
}

void
id_all(void)
{
	short i;

	for (i = 0; i < SCROLS; i++) {
		id_scrolls[i].id_status = IDENTIFIED;
	}
	for (i = 0; i < WEAPONS; i++) {
		id_weapons[i].id_status = IDENTIFIED;
	}
	for (i = 0; i < ARMORS; i++) {
		id_armors[i].id_status = IDENTIFIED;
	}
	for (i = 0; i < WANDS; i++) {
		id_wands[i].id_status = IDENTIFIED;
	}
	for (i = 0; i < POTIONS; i++) {
		id_potions[i].id_status = IDENTIFIED;
	}
}

void
xxxx(char *buf, short n)
{
	short i;
	unsigned char c;

	for (i = 0; i < n; i++) {

		/* It does not matter if accuracy is lost during this assignment */
		c = (unsigned char) xxx(0);

		buf[i] ^= c;
	}
}

long
xxx(boolean st)
{
	static long f, s;
	long r;

	if (st) {
		f = 37;
		s = 7;
		return(0L);
	}
	r = ((f * s) + 9337) % 8887;
	f = s;
	s = r;
	return(r);
}

void
center(short row, const char *buf)
{
	short margin;

	margin = ((DCOLS - strlen(buf)) / 2);
	mvaddstr(row, margin, buf);
}

void
sf_error(void)
{
	md_lock(0);
	messagef(1, "");
	clean_up("sorry, score file is out of order");
}
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.11 2006/03/08 09:44:35 otto Exp $	*/
@


1.11
log
@Ansify; from Alexey Dobriyan; hope the license gets cleared up, so we
can include this in the build again.
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.10 2003/06/03 03:01:41 millert Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)score.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: score.c,v 1.10 2003/06/03 03:01:41 millert Exp $";
#endif
#endif /* not lint */
@


1.10
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.9 2002/08/09 20:26:44 jsyn Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: score.c,v 1.9 2002/08/09 20:26:44 jsyn Exp $";
d62 1
a62 3
killed_by(monster, other)
	const object *monster;
	short other;
d133 1
a133 1
win()
d157 1
a157 2
quit(from_intrpt)
	boolean from_intrpt;
d233 1
a233 3
pad_spaces(str, len)
	char *str;
	size_t len;
d244 1
a244 2
unpad_spaces(str)
	char *str;
d254 1
a254 3
read_score_entry(se, fp)
	struct score_entry *se;
	FILE *fp;
d307 1
a307 4
write_score_entry(se, rank, fp)
	const struct score_entry *se;
	int rank;
	FILE *fp;
d332 1
a332 3
put_scores(monster, other)
	const object *monster;
	short other;
d439 1
a439 4
make_score(se, monster, other)
	struct score_entry *se;
	const object *monster;
	int other;
d492 1
a492 2
is_vowel(ch)
	short ch;
d502 1
a502 1
sell_pack()
d534 1
a534 2
get_value(obj)
	object *obj;
d582 1
a582 1
id_all()
d604 1
a604 3
xxxx(buf, n)
	char *buf;
	short n;
d619 1
a619 2
xxx(st)
	boolean st;
d636 1
a636 3
center(row, buf)
	short row;
	const char *buf;
d645 1
a645 1
sf_error()
@


1.9
log
@Get rid of remaining __P usage (except for imported code);
ok millert@@, rogue ok pjanzen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.8 2002/07/18 07:13:57 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: score.c,v 1.8 2002/07/18 07:13:57 pjanzen Exp $";
@


1.8
log
@- string handling patch from David Holland, minimally modified.  Highlights
are fewer magic constants, sprintf->snprintf, and better scorefile handling.
Also, won't hang if forking a subshell fails.
- a few needless functions have been trimmed, and a few extra defaults have
been added to a few switches, just in case.
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.7 2001/08/17 22:28:55 pjanzen Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD$";
d232 1
a232 1
static void pad_spaces __P((char *, size_t));
d234 3
a236 3
static int read_score_entry __P((struct score_entry *, FILE *));
static void write_score_entry __P((const struct score_entry *, int, FILE *));
static void make_score __P((struct score_entry *, const object *, int));
@


1.7
log
@'y' and 'Y' both mean yes.
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.6 2001/08/10 18:32:46 pjanzen Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: score.c,v 1.6 2001/08/10 18:32:46 pjanzen Exp $";
d61 1
d67 1
a67 1
	object *monster;
d70 4
a73 1
	char buf[128];
d84 1
a84 1
			(void) strcpy(buf, "died of hypothermia");
d87 1
a87 1
			(void) strcpy(buf, "died of starvation");
d90 1
a90 1
			(void) strcpy(buf, "killed by a dart");
d93 1
a93 1
			(void) strcpy(buf, "quit");
d96 1
a96 1
			(void) strcpy(buf, "killed by fire");
a99 1
		(void) strcpy(buf, "Killed by ");
d101 1
a101 1
			(void) strcat(buf, "an ");
d103 1
a103 1
			(void) strcat(buf, "a ");
d105 3
a107 1
		(void) strcat(buf, m_names[monster->m_char - 'A']);
d109 2
a110 2
	(void) strcat(buf, " with ");
	sprintf(buf+strlen(buf), "%ld gold", rogue.gold);
d130 1
a130 1
		center(22, buf);
d132 1
a132 1
		message(buf, 0);
d134 1
a134 1
	message("", 0);
d155 2
a156 2
	message("", 0);
	message("", 0);
d166 1
a166 1
	char buf[128];
d184 1
a184 1
	message("really quit?", 1);
d205 141
d348 1
a348 1
	object *monster;
d351 3
a353 4
	short i, n, rank = 10, x, ne = 0, found_player = -1;
	char scores[10][82];
	char n_names[10][30];
	char buf[128];
d355 1
a355 2
	long s;
	boolean pause = score_only;
d364 1
a364 1
		message("cannot read/write/create score file", 0);
d371 13
a383 7
	for (i = 0; i < 10; i++) {
		if (((n = fread(scores[i], sizeof(char), 80, fp)) < 80) && (n != 0)) {
			sf_error();
		} else if (n != 0) {
			xxxx(scores[i], 80);
			if ((n = fread(n_names[i], sizeof(char), 30, fp)) < 30) {
				sf_error();
a384 2
			xxxx(n_names[i], 30);
		} else {
a386 15
		ne++;
		if ((!score_only) && (found_player == -1)) {
			if (!name_cmp(scores[i]+15, login_name)) {
				x = 5;
				while (scores[i][x] == ' ') {
					x++;
				}
				s = lget_number(scores[i] + x);
				if (rogue.gold < s) {
					score_only = 1;
				} else {
					found_player = i;
				}
			}
		}
d388 2
d391 3
a393 4
		ne--;
		for (i = found_player; i < ne; i++) {
			(void) strcpy(scores[i], scores[i+1]);
			(void) strcpy(n_names[i], n_names[i+1]);
d396 2
d399 6
a404 8
		for (i = 0; i < ne; i++) {
			x = 5;
			while (scores[i][x] == ' ') {
				x++;
			}
			s = lget_number(scores[i] + x);

			if (rogue.gold >= s) {
d409 3
a411 10
		if (ne == 0) {
			rank = 0;
		} else if ((ne < 10) && (rank == 10)) {
			rank = ne;
		}
		if (rank < 10) {
			insert_score(scores, n_names, nick_name, rank, ne,
			    monster, other);
			if (ne < 10) {
				ne++;
d413 2
d416 3
d420 4
d425 2
d428 1
d432 1
a432 6

	md_ignore_signals();

	(void) xxx(1);

	for (i = 0; i < ne; i++) {
d436 2
a437 3
		if (i == 9) {
			scores[i][0] = '1';
			scores[i][1] = '0';
d439 1
a439 10
			scores[i][0] = ' ';
			scores[i][1] = i + '1';
		}
		nickize(buf, scores[i], n_names[i]);
		mvaddstr(i+10, 0, buf);
		if (rank < 10) {
			xxxx(scores[i], 80);
			fwrite(scores[i], sizeof(char), 80, fp);
			xxxx(n_names[i], 30);
			fwrite(n_names[i], sizeof(char), 30, fp);
d441 2
a446 1
	md_lock(0);
d448 3
a450 4
	fclose(fp);
	message("", 0);
	if (pause) {
		message("", 0);
d455 4
a458 7
void
insert_score(scores, n_names, n_name, rank, n, monster, other)
	char scores[][82];
	char n_names[][30];
	char *n_name;
	short rank, n;
	object *monster;
d461 3
a463 13
	short i;
	char buf[128];

	if (n > 0) {
		for (i = n; i > rank; i--) {
			if ((i < 10) && (i > 0)) {
				(void) strcpy(scores[i], scores[i-1]);
				(void) strcpy(n_names[i], n_names[i-1]);
			}
		}
	}
	sprintf(buf, "%2d    %6ld   %s: ", rank+1, (long)rogue.gold,
	    login_name);
d465 2
d470 1
a470 1
			(void) strcat(buf, "died of hypothermia");
d473 1
a473 1
			(void) strcat(buf, "died of starvation");
d476 1
a476 1
			(void) strcat(buf, "killed by a dart");
d479 1
a479 1
			(void) strcat(buf, "quit");
d482 1
a482 1
			(void) strcat(buf, "a total winner");
d485 1
a485 1
			(void) strcat(buf, "killed by fire");
d489 5
a493 3
		(void) strcat(buf, "killed by ");
		if (is_vowel(m_names[monster->m_char - 'A'][0])) {
			(void) strcat(buf, "an ");
d495 1
a495 1
			(void) strcat(buf, "a ");
d497 3
a499 1
		(void) strcat(buf, m_names[monster->m_char - 'A']);
d501 4
a504 3
	sprintf(buf+strlen(buf), " on level %d ",  max_level);
	if ((other != WIN) && has_amulet()) {
		(void) strcat(buf, "with amulet");
d506 3
a508 6
	for (i = strlen(buf); i < 79; i++) {
		buf[i] = ' ';
	}
	buf[79] = 0;
	(void) strcpy(scores[rank], buf);
	(void) strcpy(n_names[rank], n_name);
d541 2
a542 3
				sprintf(buf, "%5d      ", val);
				get_desc(obj, buf+11);
				mvaddstr(row++, 0, buf);
d551 1
a551 1
	message("", 0);
a624 16
int
name_cmp(s1, s2)
	char *s1, *s2;
{
	short i = 0;
	int r;

	while(s1[i] != ':') {
		i++;
	}
	s1[i] = 0;
	r = strcmp(s1, s2);
	s1[i] = ':';
	return(r);
}

a660 26
nickize(buf, score, n_name)
	char *buf, *score, *n_name;
{
	short i = 15, j;

	if (!n_name[0]) {
		(void) strcpy(buf, score);
	} else {
		(void) strncpy(buf, score, 16);

		while (score[i] != ':') {
			i++;
		}

		(void) strcpy(buf+15, n_name);
		j = strlen(buf);

		while (score[i]) {
			buf[j++] = score[i++];
		}
		buf[j] = 0;
		buf[79] = 0;
	}
}

void
d663 1
a663 1
	char *buf;
d675 1
a675 1
	message("", 1);
@


1.6
log
@Minor -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.5 2001/08/08 21:20:05 pjanzen Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: score.c,v 1.5 2001/08/08 21:20:05 pjanzen Exp $";
d164 1
d180 1
a180 1
	if (rgetchar() != 'y') {
@


1.5
log
@FreeBSD PR 13278: killed by fire corrupts score file; from Mark W. Krentel
<krentel@@dreamscape.com>
@
text
@d1 1
a1 1
/*	$OpenBSD: score.c,v 1.4 1998/08/22 08:55:47 pjanzen Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: score.c,v 1.4 1998/08/22 08:55:47 pjanzen Exp $";
d337 1
@


1.4
log
@More largely NetBSD-inspired code cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD$";
d370 1
a370 1
			(void) strcpy(buf, "killed by fire");
@


1.3
log
@tabify
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: score.c,v 1.5 1995/04/22 10:28:26 cgd Exp $";
d56 1
a56 1
 *	   gain or profit.
d64 1
a64 6
extern char login_name[];
extern char *m_names[];
extern short max_level;
extern boolean score_only, no_skull, msg_cleared;
extern char *byebye_string, *nick_name;

d66 2
a67 2
object *monster;
short other;
d133 1
d157 1
d159 1
a159 1
boolean from_intrpt;
d199 1
d201 2
a202 2
object *monster;
short other;
d280 2
a281 2
			insert_score(scores, n_names, nick_name, rank, ne, monster,
				other);
d330 1
d332 5
a336 5
char scores[][82];
char n_names[][30];
char *n_name;
short rank, n;
object *monster;
d349 2
a350 1
	sprintf(buf, "%2d    %6d   %s: ", rank+1, rogue.gold, login_name);
d394 1
d396 1
a396 1
short ch;
d405 1
d438 1
d440 1
a440 1
object *obj;
d445 1
d487 1
d509 1
d511 1
a511 1
char *s1, *s2;
d525 1
d527 2
a528 2
char *buf;
short n;
d544 1
a544 1
boolean st;
d560 1
d562 1
a562 1
char *buf, *score, *n_name;
d586 1
d588 2
a589 2
short row;
char *buf;
d597 1
@


1.2
log
@Deal correctly with being SGID
@
text
@d55 1
a55 1
 *         gain or profit.
@


1.1
log
@Initial revision
@
text
@d212 1
d216 1
d219 1
d223 1
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
