head	1.11;
access;
symbols
	OPENBSD_4_9:1.10.0.6
	OPENBSD_4_9_BASE:1.10
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	OPENBSD_4_6:1.9.0.16
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.12
	OPENBSD_4_5_BASE:1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.10
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.8
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.6
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.8.0.4
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.2
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.4
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.2
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2011.07.03.05.12.15;	author martynas;	state dead;
branches;
next	1.10;

1.10
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.08.09.44.35;	author otto;	state Exp;
branches;
next	1.8;

1.8
date	2004.01.21.19.12.13;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.26.19.52.03;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.18.07.13.57;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.23.22.23.42;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.08.22.08.55.28;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	97.07.23.20.05.01;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.17;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.17;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove rogue.  Its license is not acceptable for our tree;  been
unlinked from the builds for 8 years.  I've been talking with the
author 2 years ago, he didn't release a proper license.  It's clear
that the issue won't be resolved.  OK tedu@@.
@
text
@/*	$OpenBSD: inventory.c,v 1.10 2009/10/27 23:59:26 deraadt Exp $	*/
/*	$NetBSD: inventory.c,v 1.3 1995/04/22 10:27:35 cgd Exp $	*/

/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Timothy C. Stoehr.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * inventory.c
 *
 * This source herein may be modified and/or distributed by anybody who
 * so desires, with the following restrictions:
 *    1.)  No portion of this notice shall be removed.
 *    2.)  Credit shall not be taken for the creation of this source.
 *    3.)  This code is not to be traded, sold, or used for personal
 *         gain or profit.
 *
 */

#include <stdarg.h>
#include "rogue.h"

boolean is_wood[WANDS];
const char *press_space = " --press space to continue--";

const char *wand_materials[WAND_MATERIALS] = {
	"steel ",
	"bronze ",
	"gold ",
	"silver ",
	"copper ",
	"nickel ",
	"cobalt ",
	"tin ",
	"iron ",
	"magnesium ",
	"chrome ",
	"carbon ",
	"platinum ",
	"silicon ",
	"titanium ",

	"teak ",
	"oak ",
	"cherry ",
	"birch ",
	"pine ",
	"cedar ",
	"redwood ",
	"balsa ",
	"ivory ",
	"walnut ",
	"maple ",
	"mahogany ",
	"elm ",
	"palm ",
	"wooden "
};

const char *gems[GEMS] = {
	"diamond ",
	"stibotantalite ",
	"lapi-lazuli ",
	"ruby ",
	"emerald ",
	"sapphire ",
	"amethyst ",
	"quartz ",
	"tiger-eye ",
	"opal ",
	"agate ",
	"turquoise ",
	"pearl ",
	"garnet "
};

const char *syllables[MAXSYLLABLES] = {
	"blech ",
	"foo ",
	"barf ",
	"rech ",
	"bar ",
	"blech ",
	"quo ",
	"bloto ",
	"oh ",
	"caca ",
	"blorp ",
	"erp ",
	"festr ",
	"rot ",
	"slie ",
	"snorf ",
	"iky ",
	"yuky ",
	"ooze ",
	"ah ",
	"bahl ",
	"zep ",
	"druhl ",
	"flem ",
	"behil ",
	"arek ",
	"mep ",
	"zihr ",
	"grit ",
	"kona ",
	"kini ",
	"ichi ",
	"tims ",
	"ogr ",
	"oo ",
	"ighr ",
	"coph ",
	"swerr ",
	"mihln ",
	"poxi "
};

#define COMS 48

struct id_com_s {
	short com_char;
	const char *com_desc;
};

struct id_com_s com_id_tab[COMS] = {
	{'?',	"?       prints help"},
	{'r',	"r       read scroll"},
	{'/',	"/       identify object"},
	{'e',	"e       eat food"},
	{'h',	"h       left "},
	{'w',	"w       wield a weapon"},
	{'j',	"j       down"},
	{'W',	"W       wear armor"},
	{'k',	"k       up"},
	{'T',	"T       take armor off"},
	{'l',	"l       right"},
	{'P',	"P       put on ring"},
	{'y',	"y       up & left"},
	{'R',	"R       remove ring"},
	{'u',	"u       up & right"},
	{'d',	"d       drop object"},
	{'b',	"b       down & left"},
	{'c',	"c       call object"},
	{'n',	"n       down & right"},
	{'\0',	"<SHIFT><dir>: run that way"},
	{')',	")       print current weapon"},
	{'\0',	"<CTRL><dir>: run till adjacent"},
	{']',	"]       print current armor"},
	{'f',	"f<dir>  fight till death or near death"},
	{'=',	"=       print current rings"},
	{'t',	"t<dir>  throw something"},
	{'\001',	"^A      print Hp-raise average"},
	{'m',	"m<dir>  move onto without picking up"},
	{'z',	"z<dir>  zap a wand in a direction"},
	{'o',	"o       examine/set options"},
	{'^',	"^<dir>  identify trap type"},
	{'\022',	"^R      redraw screen"},
	{'&',	"&       save screen into 'rogue.screen'"},
	{'s',	"s       search for trap/secret door"},
	{'\020',	"^P      repeat last message"},
	{'>',	">       go down a staircase"},
	{'\033',	"^[      cancel command"},
	{'<',	"<       go up a staircase"},
	{'S',	"S       save game"},
	{'.',	".       rest for a turn"},
	{'Q',	"Q       quit"},
	{',',	",       pick something up"},
	{'!',	"!       shell escape"},
	{'i',	"i       inventory"},
	{'F',	"F<dir>  fight till either of you dies"},
	{'I',	"I       inventory single item"},
	{'v',	"v       print version number"},
	{'q',	"q       quaff potion"}
};

void
inventory(object *pack, unsigned short mask)
{
	object *obj;
	short i = 0, j;
	size_t maxlen = 0, n;
	short row, col;
	struct {
		short letter;
		short sepchar;
		char desc[DCOLS];
		char savebuf[DCOLS+8];
	} descs[MAX_PACK_COUNT+1];

	obj = pack->next_object;

	if (!obj) {
		messagef(0, "your pack is empty");
		return;
	}
	while (obj) {
		if (obj->what_is & mask) {
			descs[i].letter = obj->ichar;
			descs[i].sepchar = ((obj->what_is & ARMOR) && obj->is_protected)
				? '}' : ')';
			get_desc(obj, descs[i].desc, sizeof(descs[i].desc));
			n = strlen(descs[i].desc) + 4;
			if (n > maxlen) {
				maxlen = n;
			}
			i++;
			if (i > MAX_PACK_COUNT) {
				clean_up("Too many objects in pack?!?");
			}
		}
		obj = obj->next_object;
	}
	if (maxlen < 27)
		maxlen = 27;
	if (maxlen > DCOLS - 2)
		maxlen = DCOLS - 2;
	col = DCOLS - (maxlen + 2);

	for (row = 0; ((row <= i) && (row < DROWS)); row++) {
		for (j = col; j < DCOLS; j++) {
			descs[row].savebuf[j - col] = mvinch(row, j);
		}
		descs[row].savebuf[j - col] = '\0';
		if (row < i) {
			mvprintw(row, col, " %c%c %s",
			    descs[row].letter, descs[row].sepchar,
			    descs[row].desc);
		} else {
			mvaddstr(row, col, press_space);
		}
		clrtoeol();
	}
	refresh();
	wait_for_ack();

	move(0, 0);
	clrtoeol();

	for (j = 1; ((j <= i) && (j < DROWS)); j++) {
		mvaddstr(j, col, descs[j].savebuf);
	}
}

void
id_com(void)
{
	int ch = 0;
	short i, j, k;

	while (ch != CANCEL) {
		check_message();
		messagef(0, "Character you want help for (* for all):");

		refresh();
		ch = getch();

		switch(ch) {
		case LIST:
			{
				char save[(((COMS / 2) + (COMS % 2)) + 1)][DCOLS];
				short rows = (((COMS / 2) + (COMS % 2)) + 1);
				boolean need_two_screens = FALSE;

				if (rows > LINES) {
					need_two_screens = 1;
					rows = LINES;
				}
				k = 0;

				for (i = 0; i < rows; i++) {
					for (j = 0; j < DCOLS; j++) {
						save[i][j] = mvinch(i, j);
					}
				}
MORE:
				for (i = 0; i < rows; i++) {
					move(i, 0);
					clrtoeol();
				}
				for (i = 0; i < (rows-1); i++) {
					if (i < (LINES-1)) {
						if (((i + i) < COMS) && ((i+i+k) < COMS)) {
							mvaddstr(i, 0, com_id_tab[i+i+k].com_desc);
						}
						if (((i + i + 1) < COMS) && ((i+i+k+1) < COMS)) {
							mvaddstr(i, (DCOLS/2),
										com_id_tab[i+i+k+1].com_desc);
						}
					}
				}
				mvaddstr(rows - 1, 0, need_two_screens ? more : press_space);
				refresh();
				wait_for_ack();

				if (need_two_screens) {
					k += ((rows-1) * 2);
					need_two_screens = 0;
					goto MORE;
				}
				for (i = 0; i < rows; i++) {
					move(i, 0);
					for (j = 0; j < DCOLS; j++) {
						addch(save[i][j]);
					}
				}
			}
			break;
		default:
			if (!pr_com_id(ch)) {
				if (!pr_motion_char(ch)) {
					check_message();
					messagef(0, "unknown character");
				}
			}
			ch = CANCEL;
			break;
		}
	}
}

int
pr_com_id(int ch)
{
	int i;

	if (!get_com_id(&i, ch)) {
		return(0);
	}
	check_message();
	messagef(0, "%s", com_id_tab[i].com_desc);
	return(1);
}

int
get_com_id(int *indexp, short ch)
{
	short i;

	for (i = 0; i < COMS; i++) {
		if (com_id_tab[i].com_char == ch) {
			*indexp = i;
			return(1);
		}
	}
	return(0);
}

int
pr_motion_char(int ch)
{
	if (	(ch == 'J') ||
			(ch == 'K') ||
			(ch == 'L') ||
			(ch == 'H') ||
			(ch == 'Y') ||
			(ch == 'U') ||
			(ch == 'N') ||
			(ch == 'B') ||
			(ch == '\012') ||
			(ch == '\013') ||
			(ch == '\010') ||
			(ch == '\014') ||
			(ch == '\025') ||
			(ch == '\031') ||
			(ch == '\016') ||
			(ch == '\002')) {
		const char *until;
		int n;

		if (ch <= '\031') {
			ch += 96;
			until = " until adjacent";
		} else {
			ch += 32;
			until = "";
		}
		(void) get_com_id(&n, ch);
		check_message();
		messagef(0, "run %s%s", com_id_tab[n].com_desc + 8, until);
		return(1);
	} else {
		return(0);
	}
}

void
mix_colors(void)
{
	short i, j, k;
	char t[MAX_TITLE_LENGTH];

	for (i = 0; i <= 32; i++) {
		j = get_rand(0, (POTIONS - 1));
		k = get_rand(0, (POTIONS - 1));
		strlcpy(t, id_potions[j].title, sizeof(t));
		strlcpy(id_potions[j].title, id_potions[k].title,
		    sizeof(id_potions[j].title));
		strlcpy(id_potions[k].title, t, sizeof(id_potions[k].title));
	}
}

void
make_scroll_titles(void)
{
	short i, j, n;
	short sylls, s;
	size_t maxlen;

	maxlen = sizeof(id_scrolls[0].title);
	for (i = 0; i < SCROLS; i++) {
		sylls = get_rand(2, 5);
		(void) strlcpy(id_scrolls[i].title, "'", maxlen);

		for (j = 0; j < sylls; j++) {
			s = get_rand(1, (MAXSYLLABLES-1));
			(void) strlcat(id_scrolls[i].title, syllables[s], maxlen);
		}
		/* trim trailing space */
		n = strlen(id_scrolls[i].title);
		id_scrolls[i].title[n-1] = '\'';
		strlcat(id_scrolls[i].title, " ", maxlen);
	}
}

struct sbuf {
	char *buf;
	size_t maxlen;
};

static void sbuf_init(struct sbuf *s, char *buf, size_t maxlen);
static void sbuf_addstr(struct sbuf *s, const char *str);
static void sbuf_addf(struct sbuf *s, const char *fmt, ...);
static void desc_count(struct sbuf *s, int n);
static void desc_called(struct sbuf *s, const object *);

static void
sbuf_init(struct sbuf *s, char *buf, size_t maxlen)
{
	s->buf = buf;
	s->maxlen = maxlen;
	s->buf[0] = 0;
}

static void
sbuf_addstr(struct sbuf *s, const char *str)
{
	strlcat(s->buf, str, s->maxlen);
}

static void
sbuf_addf(struct sbuf *s, const char *fmt, ...)
{
	va_list ap;
	size_t initlen;

	initlen = strlen(s->buf);
	va_start(ap, fmt);
	vsnprintf(s->buf+initlen, s->maxlen-initlen, fmt, ap);
	va_end(ap);
}

static void
desc_count(struct sbuf *s, int n)
{
	if (n == 1) {
		sbuf_addstr(s, "an ");
	} else {
		sbuf_addf(s, "%d ", n);
	}
}

static void
desc_called(struct sbuf *s, const object *obj)
{
	struct id *id_table;

	id_table = get_id_table(obj);
	sbuf_addstr(s, name_of(obj));
	sbuf_addstr(s, "called ");
	sbuf_addstr(s, id_table[obj->which_kind].title);
}

void
get_desc(const object *obj, char *desc, size_t desclen)
{
	const char *item_name;
	struct id *id_table;
	struct sbuf db;
	unsigned short objtype_id_status;

	if (obj->what_is == AMULET) {
		(void) strlcpy(desc, "the amulet of Yendor ", desclen);
		return;
	}
	if (obj->what_is == GOLD) {
		snprintf(desc, desclen, "%d pieces of gold", obj->quantity);
		return;
	}

	item_name = name_of(obj);
	id_table = get_id_table(obj);
	if (wizard || id_table == NULL) {
		objtype_id_status = IDENTIFIED;
	} else {
		objtype_id_status = id_table[obj->which_kind].id_status;
	}
	if (obj->what_is & (WEAPON | ARMOR | WAND | RING)) {
		if (obj->identified) {
			objtype_id_status = IDENTIFIED;
		}
	}
	sbuf_init(&db, desc, desclen);

	switch(obj->what_is) {
	case FOOD:
		if (obj->which_kind == RATION) {
			if (obj->quantity > 1) {
				sbuf_addf(&db, "%d rations of %s", obj->quantity,
				    item_name);
			} else {
				sbuf_addf(&db, "some %s", item_name);
			}
		} else {
			sbuf_addf(&db, "an %s", item_name);
		}
		break;
	case SCROL:
		desc_count(&db, obj->quantity);
		if (objtype_id_status==UNIDENTIFIED) {
			sbuf_addstr(&db, item_name);
			sbuf_addstr(&db, "entitled: ");
			sbuf_addstr(&db, id_table[obj->which_kind].title);
		} else if (objtype_id_status==CALLED) {
			desc_called(&db, obj);
		} else {
			sbuf_addstr(&db, item_name);
			sbuf_addstr(&db, id_table[obj->which_kind].real);
		}
		break;
	case POTION:
		desc_count(&db, obj->quantity);
		if (objtype_id_status==UNIDENTIFIED) {
			sbuf_addstr(&db, id_table[obj->which_kind].title);
			sbuf_addstr(&db, item_name);
		} else if (objtype_id_status==CALLED) {
			desc_called(&db, obj);
		} else {
			sbuf_addstr(&db, item_name);
			sbuf_addstr(&db, id_table[obj->which_kind].real);
		}
		break;
	case WAND:
		desc_count(&db, obj->quantity);
		if (objtype_id_status==UNIDENTIFIED) {
			sbuf_addstr(&db, id_table[obj->which_kind].title);
			sbuf_addstr(&db, item_name);
		} else if (objtype_id_status==CALLED) {
			desc_called(&db, obj);
		} else {
			sbuf_addstr(&db, item_name);
			sbuf_addstr(&db, id_table[obj->which_kind].real);
			if (wizard || obj->identified) {
				sbuf_addf(&db, "[%d]", obj->class);
			}
		}
		break;
	case RING:
		desc_count(&db, obj->quantity);
		if (objtype_id_status==UNIDENTIFIED) {
			sbuf_addstr(&db, id_table[obj->which_kind].title);
			sbuf_addstr(&db, item_name);
		} else if (objtype_id_status==CALLED) {
			desc_called(&db, obj);
		} else {
			if ((wizard || obj->identified) &&
			    (obj->which_kind == DEXTERITY ||
			    obj->which_kind == ADD_STRENGTH))
				sbuf_addf(&db, "%+d ", obj->class);
			sbuf_addstr(&db, item_name);
			sbuf_addstr(&db, id_table[obj->which_kind].real);
		}
		break;
	case ARMOR:
		/* no desc_count() */
		if (objtype_id_status==UNIDENTIFIED) {
			sbuf_addstr(&db, id_table[obj->which_kind].title);
		} else {
			sbuf_addf(&db, "%+d %s[%d] ", obj->d_enchant,
			    id_table[obj->which_kind].title,
			    get_armor_class(obj));
		}
		break;
	case WEAPON:
		desc_count(&db, obj->quantity);
		if (objtype_id_status==UNIDENTIFIED) {
			sbuf_addstr(&db, name_of(obj));
		} else {
			sbuf_addf(&db, "%+d,%+d %s", obj->hit_enchant,
			    obj->d_enchant, name_of(obj));
		}
		break;
	/* Should never execute */
	default:
		sbuf_addstr(&db, "grot");
		break;
	}

	if (obj->in_use_flags & BEING_WIELDED) {
		sbuf_addstr(&db, "in hand");
	} else if (obj->in_use_flags & BEING_WORN) {
		sbuf_addstr(&db, "being worn");
	} else if (obj->in_use_flags & ON_LEFT_HAND) {
		sbuf_addstr(&db, "on left hand");
	} else if (obj->in_use_flags & ON_RIGHT_HAND) {
		sbuf_addstr(&db, "on right hand");
	}

	if (!strncmp(db.buf, "an ", 3)) {
		if (!is_vowel(db.buf[3])) {
			memmove(db.buf+2, db.buf+3, strlen(db.buf+3)+1);
			db.buf[1] = ' ';
		}
	}
}

void
get_wand_and_ring_materials(void)
{
	short i, j;
	boolean used[WAND_MATERIALS];

	for (i = 0; i < WAND_MATERIALS; i++) {
		used[i] = 0;
	}
	for (i = 0; i < WANDS; i++) {
		do {
			j = get_rand(0, WAND_MATERIALS-1);
		} while (used[j]);
		used[j] = 1;
		strlcpy(id_wands[i].title, wand_materials[j],
		    sizeof(id_wands[i].title));
		is_wood[i] = (j > MAX_METAL);
	}
	for (i = 0; i < GEMS; i++) {
		used[i] = 0;
	}
	for (i = 0; i < RINGS; i++) {
		do {
			j = get_rand(0, GEMS-1);
		} while (used[j]);
		used[j] = 1;
		strlcpy(id_rings[i].title, gems[j],
		    sizeof(id_rings[i].title));
	}
}

void
single_inv(short ichar)
{
	short ch, ch2;
	char desc[DCOLS];
	object *obj;

	ch = ichar ? ichar : pack_letter("inventory what?", ALL_OBJECTS);

	if (ch == CANCEL) {
		return;
	}
	if (!(obj = get_letter_object(ch))) {
		messagef(0, "no such item.");
		return;
	}
	ch2 = ((obj->what_is & ARMOR) && obj->is_protected) ? '}' : ')';
	get_desc(obj, desc, sizeof(desc));
	messagef(0, "%c%c %s", ch, ch2, desc);
}

struct id *
get_id_table(const object *obj)
{
	switch(obj->what_is) {
	case SCROL:
		return(id_scrolls);
	case POTION:
		return(id_potions);
	case WAND:
		return(id_wands);
	case RING:
		return(id_rings);
	case WEAPON:
		return(id_weapons);
	case ARMOR:
		return(id_armors);
	}
	return((struct id *) 0);
}

void
inv_armor_weapon(boolean is_weapon)
{
	if (is_weapon) {
		if (rogue.weapon) {
			single_inv(rogue.weapon->ichar);
		} else {
			messagef(0, "not wielding anything");
		}
	} else {
		if (rogue.armor) {
			single_inv(rogue.armor->ichar);
		} else {
			messagef(0, "not wearing anything");
		}
	}
}

void
id_type(void)
{
	const char *id;
	int ch;

	messagef(0, "what do you want identified?");

	ch = rgetchar();

	if ((ch >= 'A') && (ch <= 'Z')) {
		id = m_names[ch-'A'];
	} else if (ch < 32) {
		check_message();
		return;
	} else {
		switch(ch) {
		case '@@':
			id = "you";
			break;
		case '%':
			id = "staircase";
			break;
		case '^':
			id = "trap";
			break;
		case '+':
			id = "door";
			break;
		case '-':
		case '|':
			id = "wall of a room";
			break;
		case '.':
			id = "floor";
			break;
		case '#':
			id = "passage";
			break;
		case ' ':
			id = "solid rock";
			break;
		case '=':
			id = "ring";
			break;
		case '?':
			id = "scroll";
			break;
		case '!':
			id = "potion";
			break;
		case '/':
			id = "wand or staff";
			break;
		case ')':
			id = "weapon";
			break;
		case ']':
			id = "armor";
			break;
		case '*':
			id = "gold";
			break;
		case ':':
			id = "food";
			break;
		case ',':
			id = "the Amulet of Yendor";
			break;
		default:
			id = "unknown character";
			break;
		}
	}
	check_message();
	messagef(0, "'%c': %s", ch, id);
}
@


1.10
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: inventory.c,v 1.9 2006/03/08 09:44:35 otto Exp $	*/
@


1.9
log
@Ansify; from Alexey Dobriyan; hope the license gets cleared up, so we
can include this in the build again.
@
text
@d1 1
a1 1
/*	$OpenBSD: inventory.c,v 1.8 2004/01/21 19:12:13 espie Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)inventory.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: inventory.c,v 1.8 2004/01/21 19:12:13 espie Exp $";
#endif
#endif /* not lint */
@


1.8
log
@make rogue const-correct, and fix one write-strings issue.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: inventory.c,v 1.7 2003/06/03 03:01:41 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: inventory.c,v 1.7 2003/06/03 03:01:41 millert Exp $";
d215 1
a215 3
inventory(pack, mask)
	object *pack;
	unsigned short mask;
d283 1
a283 1
id_com()
d360 1
a360 2
pr_com_id(ch)
	int ch;
d373 1
a373 3
get_com_id(indexp, ch)
	int *indexp;
	short ch;
d387 1
a387 2
pr_motion_char(ch)
	int ch;
d425 1
a425 1
mix_colors()
d441 1
a441 1
make_scroll_titles()
d475 1
a475 4
sbuf_init(s, buf, maxlen)
	struct sbuf *s;
	char *buf;
	size_t maxlen;
d483 1
a483 3
sbuf_addstr(s, str)
	struct sbuf *s;
	const char *str;
d501 1
a501 3
desc_count(s, n)
	struct sbuf *s;
	int n;
d511 1
a511 3
desc_called(s, obj)
	struct sbuf *s;
	const object *obj;
d522 1
a522 4
get_desc(obj, desc, desclen)
	const object *obj;
	char *desc;
	size_t desclen;
d665 1
a665 1
get_wand_and_ring_materials()
d696 1
a696 2
single_inv(ichar)
	short ichar;
d717 1
a717 2
get_id_table(obj)
	const object *obj;
d737 1
a737 2
inv_armor_weapon(is_weapon)
	boolean is_weapon;
d755 1
a755 1
id_type()
@


1.7
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: inventory.c,v 1.6 2002/07/26 19:52:03 pjanzen Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: inventory.c,v 1.6 2002/07/26 19:52:03 pjanzen Exp $";
d60 1
a60 1
char *press_space = " --press space to continue--";
d62 1
a62 1
char *wand_materials[WAND_MATERIALS] = {
d96 1
a96 1
char *gems[GEMS] = {
d113 1
a113 1
char *syllables[MAXSYLLABLES] = {
d160 1
a160 1
	char *com_desc;
@


1.6
log
@We're in curses, so use getch() rather than getchar().
@
text
@d1 1
a1 1
/*	$OpenBSD: inventory.c,v 1.5 2002/07/18 07:13:57 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: inventory.c,v 1.5 2002/07/18 07:13:57 pjanzen Exp $";
@


1.5
log
@- string handling patch from David Holland, minimally modified.  Highlights
are fewer magic constants, sprintf->snprintf, and better scorefile handling.
Also, won't hang if forking a subshell fails.
- a few needless functions have been trimmed, and a few extra defaults have
been added to a few switches, just in case.
@
text
@d1 1
a1 1
/*	$OpenBSD: inventory.c,v 1.4 2000/07/23 22:23:42 pjanzen Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD$";
d299 1
a299 1
		ch = getchar();
@


1.4
log
@Handle EOF on stdin.
@
text
@d1 1
a1 1
/*	$OpenBSD: inventory.c,v 1.3 1998/08/22 08:55:28 pjanzen Exp $	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD: inventory.c,v 1.3 1998/08/22 08:55:28 pjanzen Exp $";
d60 1
d224 2
a225 2
	short i = 0, j, maxlen = 0, n;
	char descs[MAX_PACK_COUNT+1][DCOLS];
d227 6
d237 1
a237 1
		message("your pack is empty", 0);
d242 2
a243 3
			descs[i][0] = ' ';
			descs[i][1] = obj->ichar;
			descs[i][2] = ((obj->what_is & ARMOR) && obj->is_protected)
d245 3
a247 3
			descs[i][3] = ' ';
			get_desc(obj, descs[i]+4);
			if ((n = strlen(descs[i])) > maxlen) {
d250 4
a253 1
		i++;
d257 4
a260 2
	(void) strcpy(descs[i++], press_space);
	if (maxlen < 27) maxlen = 27;
d263 11
a273 6
	for (row = 0; ((row < i) && (row < DROWS)); row++) {
		if (row > 0) {
			for (j = col; j < DCOLS; j++) {
				descs[row-1][j-col] = mvinch(row, j);
			}
			descs[row-1][j-col] = 0;
a274 1
		mvaddstr(row, col, descs[row]);
d283 2
a284 2
	for (j = 1; ((j < i) && (j < DROWS)); j++) {
		mvaddstr(j, col, descs[j-1]);
d296 1
a296 1
		message("Character you want help for (* for all):", 0);
d299 1
a299 1
		ch = rgetchar();
d356 1
a356 1
					message("unknown character", 0);
d375 1
a375 1
	message(com_id_tab[i].com_desc, 0);
d380 2
a381 2
get_com_id(index, ch)
	int *index;
d388 1
a388 1
			*index = i;
d415 1
a415 1
		char until[18], buf[DCOLS];
d420 1
a420 1
			(void) strcpy(until, "until adjacent");
d423 1
a423 1
			until[0] = '\0';
a425 1
		sprintf(buf, "run %s %s", com_id_tab[n].com_desc + 8, until);
d427 1
a427 1
		message(buf, 0);
d438 1
a438 1
	char *t;
d443 4
a446 3
		t = id_potions[j].title;
		id_potions[j].title = id_potions[k].title;
		id_potions[k].title = t;
d455 1
d457 1
d460 1
a460 1
		(void) strcpy(id_scrolls[i].title, "'");
d464 1
a464 1
			(void) strcat(id_scrolls[i].title, syllables[s]);
d466 1
d468 56
a523 1
		(void) strcpy(id_scrolls[i].title+(n-1), "' ");
d527 13
d541 2
a542 2
get_desc(obj, desc)
	object *obj;
d544 1
d546 1
a546 1
	char *item_name;
d548 2
a549 2
	char more_info[32];
	short i;
d552 1
a552 1
		(void) strcpy(desc, "the amulet of Yendor ");
a554 2
	item_name = name_of(obj);

d556 1
a556 1
		sprintf(desc, "%d pieces of gold", obj->quantity);
d560 10
a569 5
	if (obj->what_is != ARMOR) {
		if (obj->quantity == 1) {
			(void) strcpy(desc, "a ");
		} else {
			sprintf(desc, "%d ", obj->quantity);
d572 4
a575 1
	if (obj->what_is == FOOD) {
d578 2
a579 1
				sprintf(desc, "%d rations of ", obj->quantity);
d581 1
a581 1
				(void) strcpy(desc, "some ");
d584 1
a584 1
			(void) strcpy(desc, "a ");
d586 12
a597 49
		(void) strcat(desc, item_name);
		goto ANA;
	}
	id_table = get_id_table(obj);

	if (wizard) {
		goto ID;
	}
	if (obj->what_is & (WEAPON | ARMOR | WAND | RING)) {
		goto CHECK;
	}

	switch(id_table[obj->which_kind].id_status) {
	case UNIDENTIFIED:
CHECK:
		switch(obj->what_is) {
		case SCROL:
			(void) strcat(desc, item_name);
			(void) strcat(desc, "entitled: ");
			(void) strcat(desc, id_table[obj->which_kind].title);
			break;
		case POTION:
			(void) strcat(desc, id_table[obj->which_kind].title);
			(void) strcat(desc, item_name);
			break;
		case WAND:
		case RING:
			if (obj->identified ||
			(id_table[obj->which_kind].id_status == IDENTIFIED)) {
				goto ID;
			}
			if (id_table[obj->which_kind].id_status == CALLED) {
				goto CALL;
			}
			(void) strcat(desc, id_table[obj->which_kind].title);
			(void) strcat(desc, item_name);
			break;
		case ARMOR:
			if (obj->identified) {
				goto ID;
			}
			(void) strcpy(desc, id_table[obj->which_kind].title);
			break;
		case WEAPON:
			if (obj->identified) {
				goto ID;
			}
			(void) strcat(desc, name_of(obj));
			break;
d600 10
a609 10
	case CALLED:
CALL:	switch(obj->what_is) {
		case SCROL:
		case POTION:
		case WAND:
		case RING:
			(void) strcat(desc, item_name);
			(void) strcat(desc, "called ");
			(void) strcat(desc, id_table[obj->which_kind].title);
			break;
d612 10
a621 8
	case IDENTIFIED:
ID:		switch(obj->what_is) {
		case SCROL:
		case POTION:
			(void) strcat(desc, item_name);
			(void) strcat(desc, id_table[obj->which_kind].real);
			break;
		case RING:
d623 1
a623 6
				if ((obj->which_kind == DEXTERITY) ||
					(obj->which_kind == ADD_STRENGTH)) {
					sprintf(more_info, "%s%d ", ((obj->class > 0) ? "+" : ""),
						obj->class);
					(void) strcat(desc, more_info);
				}
a624 24
			(void) strcat(desc, item_name);
			(void) strcat(desc, id_table[obj->which_kind].real);
			break;
		case WAND:
			(void) strcat(desc, item_name);
			(void) strcat(desc, id_table[obj->which_kind].real);
			if (wizard || obj->identified) {
				sprintf(more_info, "[%d]", obj->class);
				(void) strcat(desc, more_info);
			}
			break;
		case ARMOR:
			sprintf(desc, "%s%d ", ((obj->d_enchant >= 0) ? "+" : ""),
			obj->d_enchant);
			(void) strcat(desc, id_table[obj->which_kind].title);
			sprintf(more_info, "[%d] ", get_armor_class(obj));
			(void) strcat(desc, more_info);
			break;
		case WEAPON:
			sprintf(desc+strlen(desc), "%s%d,%s%d ",
			((obj->hit_enchant >= 0) ? "+" : ""), obj->hit_enchant,
			((obj->d_enchant >= 0) ? "+" : ""), obj->d_enchant);
			(void) strcat(desc, name_of(obj));
			break;
d627 33
a659 8
	}
ANA:
	if (!strncmp(desc, "a ", 2)) {
		if (is_vowel(desc[2])) {
			for (i = strlen(desc) + 1; i > 1; i--) {
				desc[i] = desc[i-1];
			}
			desc[1] = 'n';
d661 5
d667 1
d669 1
a669 1
		(void) strcat(desc, "in hand");
d671 1
a671 1
		(void) strcat(desc, "being worn");
d673 1
a673 1
		(void) strcat(desc, "on left hand");
d675 8
a682 1
		(void) strcat(desc, "on right hand");
d700 2
a701 1
		(void) strcpy(id_wands[i].title, wand_materials[j]);
d712 2
a713 1
		(void) strcpy(id_rings[i].title, gems[j]);
d721 1
a721 1
	short ch;
d731 1
a731 1
		message("no such item.", 0);
d734 3
a736 6
	desc[0] = ch;
	desc[1] = ((obj->what_is & ARMOR) && obj->is_protected) ? '}' : ')';
	desc[2] = ' ';
	desc[3] = 0;
	get_desc(obj, desc+3);
	message(desc, 0);
d741 1
a741 1
	object *obj;
d768 1
a768 1
			message("not wielding anything", 0);
d774 1
a774 1
			message("not wearing anything", 0);
d782 1
a782 1
	char *id;
a783 1
	char buf[DCOLS];
d785 1
a785 1
	message("what do you want identified?", 0);
d854 1
a854 2
	sprintf(buf, "'%c': %s", ch, id);
	message(buf, 0);
@


1.3
log
@More largely NetBSD-inspired code cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d44 1
a44 1
static char rcsid[] = "$OpenBSD$";
d284 1
a284 1
		ch = getchar();
@


1.2
log
@tabify
@
text
@d1 1
d44 1
a44 1
static char rcsid[] = "$NetBSD: inventory.c,v 1.3 1995/04/22 10:27:35 cgd Exp $";
d56 1
a56 1
 *	   gain or profit.
d167 48
a214 48
	'?',	"?       prints help",
	'r',	"r       read scroll",
	'/',	"/       identify object",
	'e',	"e       eat food",
	'h',	"h       left ",
	'w',	"w       wield a weapon",
	'j',	"j       down",
	'W',	"W       wear armor",
	'k',	"k       up",
	'T',	"T       take armor off",
	'l',	"l       right",
	'P',	"P       put on ring",
	'y',	"y       up & left",
	'R',	"R       remove ring",
	'u',	"u       up & right",
	'd',	"d       drop object",
	'b',	"b       down & left",
	'c',	"c       call object",
	'n',	"n       down & right",
	NULL,	"<SHIFT><dir>: run that way",
	')',	")       print current weapon",
	NULL,	"<CTRL><dir>: run till adjacent",
	']',	"]       print current armor",
	'f',	"f<dir>  fight till death or near death",
	'=',	"=       print current rings",
	't',	"t<dir>  throw something",
	'\001',	"^A      print Hp-raise average",
	'm',	"m<dir>  move onto without picking up",
	'z',	"z<dir>  zap a wand in a direction",
	'o',	"o       examine/set options",
	'^',	"^<dir>  identify trap type",
	'\022',	"^R      redraw screen",
	'&',	"&       save screen into 'rogue.screen'",
	's',	"s       search for trap/secret door",
	'\020',	"^P      repeat last message",
	'>',	">       go down a staircase",
	'\033',	"^[      cancel command",
	'<',	"<       go up a staircase",
	'S',	"S       save game",
	'.',	".       rest for a turn",
	'Q',	"Q       quit",
	',',	",       pick something up",
	'!',	"!       shell escape",
	'i',	"i       inventory",
	'F',	"F<dir>  fight till either of you dies",
	'I',	"I       inventory single item",
	'v',	"v       print version number",
	'q',	"q       quaff potion"
d217 1
a217 3
extern boolean wizard;
extern char *m_names[], *more;

d219 2
a220 2
object *pack;
unsigned short mask;
d273 1
d291 1
a291 1
				boolean need_two_screens;
d350 1
d352 1
a352 1
int ch;
d364 1
d366 2
a367 2
int *index;
short ch;
d380 1
d382 1
a382 1
int ch;
d405 1
a405 1
			(void) strcpy(until, "until adjascent");
d420 1
d435 1
d454 1
d456 2
a457 2
object *obj;
char *desc;
d618 1
d647 1
d649 1
a649 1
short ichar;
d674 1
a674 1
object *obj;
d693 1
d695 1
a695 1
boolean is_weapon;
d712 1
@


1.1
log
@Initial revision
@
text
@d55 1
a55 1
 *         gain or profit.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
