head	1.13;
access;
symbols
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.16
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.12
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.10.0.10
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.8
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.6
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.10.0.4
	OPENBSD_3_6_BASE:1.10
	OPENBSD_3_5:1.10.0.2
	OPENBSD_3_5_BASE:1.10
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.4
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.4
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.2
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2011.07.03.05.12.15;	author martynas;	state dead;
branches;
next	1.12;

1.12
date	2009.10.27.23.59.26;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.08.09.44.35;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.21.19.12.13;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.03.01.41;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.06.18.50.38;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.18.07.13.57;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.12.19.52.56;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.10.18.32.46;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.07.04.34.16;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.08.22.08.55.38;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	97.07.23.20.05.06;	author kstailey;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.49.18;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.49.18;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Remove rogue.  Its license is not acceptable for our tree;  been
unlinked from the builds for 8 years.  I've been talking with the
author 2 years ago, he didn't release a proper license.  It's clear
that the issue won't be resolved.  OK tedu@@.
@
text
@/*	$OpenBSD: pack.c,v 1.12 2009/10/27 23:59:26 deraadt Exp $	*/
/*	$NetBSD: pack.c,v 1.3 1995/04/22 10:27:54 cgd Exp $	*/

/*
 * Copyright (c) 1988, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Timothy C. Stoehr.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * pack.c
 *
 * This source herein may be modified and/or distributed by anybody who
 * so desires, with the following restrictions:
 *    1.)  No portion of this notice shall be removed.
 *    2.)  Credit shall not be taken for the creation of this source.
 *    3.)  This code is not to be traded, sold, or used for personal
 *         gain or profit.
 *
 */

#include "rogue.h"

const char *curse_message = "you can't, it appears to be cursed";

object *
add_to_pack(object *obj, object *pack, int condense)
{
	object *op;

	if (condense) {
		if ((op = check_duplicate(obj, pack))) {
			free_object(obj);
			return(op);
		} else {
			obj->ichar = next_avail_ichar();
		}
	}
	if (pack->next_object == 0) {
		pack->next_object = obj;
	} else {
		op = pack->next_object;

		while (op->next_object) {
			op = op->next_object;
		}
		op->next_object = obj;
	}
	obj->next_object = 0;
	return(obj);
}

void
take_from_pack(object *obj, object *pack)
{
	while (pack->next_object != obj) {
		pack = pack->next_object;
	}
	pack->next_object = pack->next_object->next_object;
}

/* Note: *status is set to 0 if the rogue attempts to pick up a scroll
 * of scare-monster and it turns to dust.  *status is otherwise set to 1.
 */

object *
pick_up(short row, short col, short *status)
{
	object *obj;

	*status = 1;

	if (levitate) {
		messagef(0, "you're floating in the air!");
		return((object *) 0);
	}
	obj = object_at(&level_objects, row, col);
	if (!obj) {
		messagef(1, "pick_up(): inconsistent");
		return(obj);
	}
	if (	(obj->what_is == SCROL) &&
			(obj->which_kind == SCARE_MONSTER) &&
			obj->picked_up) {
		messagef(0, "the scroll turns to dust as you pick it up");
		dungeon[row][col] &= (~OBJECT);
		vanish(obj, 0, &level_objects);
		*status = 0;
		if (id_scrolls[SCARE_MONSTER].id_status == UNIDENTIFIED) {
			id_scrolls[SCARE_MONSTER].id_status = IDENTIFIED;
		}
		return((object *) 0);
	}
	if (obj->what_is == GOLD) {
		rogue.gold += obj->quantity;
		dungeon[row][col] &= ~(OBJECT);
		take_from_pack(obj, &level_objects);
		print_stats(STAT_GOLD);
		return(obj);	/* obj will be free_object()ed in caller */
	}
	if (pack_count(obj) >= MAX_PACK_COUNT) {
		messagef(1, "pack too full");
		return((object *) 0);
	}
	dungeon[row][col] &= ~(OBJECT);
	take_from_pack(obj, &level_objects);
	obj = add_to_pack(obj, &rogue.pack, 1);
	obj->picked_up = 1;
	return(obj);
}

void
drop(void)
{
	object *obj, *new;
	short ch;
	char desc[DCOLS];

	if (dungeon[rogue.row][rogue.col] & (OBJECT | STAIRS | TRAP)) {
		messagef(0, "there's already something there");
		return;
	}
	if (!rogue.pack.next_object) {
		messagef(0, "you have nothing to drop");
		return;
	}
	if ((ch = pack_letter("drop what?", ALL_OBJECTS)) == CANCEL) {
		return;
	}
	if (!(obj = get_letter_object(ch))) {
		messagef(0, "no such item.");
		return;
	}
	if (obj->in_use_flags & BEING_WIELDED) {
		if (obj->is_cursed) {
			messagef(0, "%s", curse_message);
			return;
		}
		unwield(rogue.weapon);
	} else if (obj->in_use_flags & BEING_WORN) {
		if (obj->is_cursed) {
			messagef(0, "%s", curse_message);
			return;
		}
		mv_aquatars();
		unwear(rogue.armor);
		print_stats(STAT_ARMOR);
	} else if (obj->in_use_flags & ON_EITHER_HAND) {
		if (obj->is_cursed) {
			messagef(0, "%s", curse_message);
			return;
		}
		un_put_on(obj);
	}
	obj->row = rogue.row;
	obj->col = rogue.col;

	if ((obj->quantity > 1) && (obj->what_is != WEAPON)) {
		obj->quantity--;
		new = alloc_object();
		*new = *obj;
		new->quantity = 1;
		obj = new;
	} else {
		obj->ichar = 'L';
		take_from_pack(obj, &rogue.pack);
	}
	place_at(obj, rogue.row, rogue.col);
	get_desc(obj, desc, sizeof(desc));
	messagef(0, "dropped %s", desc);
	(void) reg_move();
}

object *
check_duplicate(object *obj, object *pack)
{
	object *op;

	if (!(obj->what_is & (WEAPON | FOOD | SCROL | POTION))) {
		return(0);
	}
	if ((obj->what_is == FOOD) && (obj->which_kind == FRUIT)) {
		return(0);
	}
	op = pack->next_object;

	while (op) {
		if ((op->what_is == obj->what_is) && 
			(op->which_kind == obj->which_kind)) {

			if ((obj->what_is != WEAPON) ||
			((obj->what_is == WEAPON) &&
			((obj->which_kind == ARROW) ||
			(obj->which_kind == DAGGER) ||
			(obj->which_kind == DART) ||
			(obj->which_kind == SHURIKEN)) &&
			(obj->quiver == op->quiver))) {
				op->quantity += obj->quantity;
				return(op);
			}
		}
		op = op->next_object;
	}
	return(0);
}

short
next_avail_ichar(void)
{
	object *obj;
	int i;
	boolean ichars[26];

	for (i = 0; i < 26; i++) {
		ichars[i] = 0;
	}
	obj = rogue.pack.next_object;
	while (obj) {
		if (obj->ichar >= 'a' && obj->ichar <= 'z')
			ichars[(obj->ichar - 'a')] = 1;
		else
			clean_up("next_avail_ichar");
		obj = obj->next_object;
	}
	for (i = 0; i < 26; i++) {
		if (!ichars[i]) {
			return(i + 'a');
		}
	}
	return('?');
}

void
wait_for_ack(void)
{
	while (rgetchar() != ' ') ;
}

short
pack_letter(const char *prompt, unsigned short mask)
{
	short ch;
	unsigned short tmask = mask;

	if (!mask_pack(&rogue.pack, mask)) {
		messagef(0, "nothing appropriate");
		return(CANCEL);
	}
	for (;;) {

		messagef(0, "%s", prompt);

		for (;;) {
			ch = rgetchar();
			if (!is_pack_letter(&ch, &mask)) {
				beep();
			} else {
				break;
			}
		}

		if (ch == LIST) {
			check_message();
			mask = tmask;
			inventory(&rogue.pack, mask);
		} else {
			break;
		}
		mask = tmask;
	}
	check_message();
	return(ch);
}

void
take_off(void)
{
	char desc[DCOLS];
	object *obj;

	if (rogue.armor) {
		if (rogue.armor->is_cursed) {
			messagef(0, "%s", curse_message);
		} else {
			mv_aquatars();
			obj = rogue.armor;
			unwear(rogue.armor);
			get_desc(obj, desc, sizeof(desc));
			messagef(0, "was wearing %s", desc);
			print_stats(STAT_ARMOR);
			(void) reg_move();
		}
	} else {
		messagef(0, "not wearing any");
	}
}

void
wear(void)
{
	short ch;
	object *obj;
	char desc[DCOLS];

	if (rogue.armor) {
		messagef(0, "you're already wearing some");
		return;
	}
	ch = pack_letter("wear what?", ARMOR);

	if (ch == CANCEL) {
		return;
	}
	if (!(obj = get_letter_object(ch))) {
		messagef(0, "no such item.");
		return;
	}
	if (obj->what_is != ARMOR) {
		messagef(0, "you can't wear that");
		return;
	}
	obj->identified = 1;
	(void) strlcpy(desc, "wearing ", sizeof desc);
	get_desc(obj, desc, sizeof(desc));
	messagef(0, "wearing %s", desc);
	do_wear(obj);
	print_stats(STAT_ARMOR);
	(void) reg_move();
}

void
unwear(object *obj)
{
	if (obj) {
		obj->in_use_flags &= (~BEING_WORN);
	}
	rogue.armor = (object *) 0;
}

void
do_wear(object *obj)
{
	rogue.armor = obj;
	obj->in_use_flags |= BEING_WORN;
	obj->identified = 1;
}

void
wield(void)
{
	short ch;
	object *obj;
	char desc[DCOLS];

	if (rogue.weapon && rogue.weapon->is_cursed) {
		messagef(0, "%s", curse_message);
		return;
	}
	ch = pack_letter("wield what?", WEAPON);

	if (ch == CANCEL) {
		return;
	}
	if (!(obj = get_letter_object(ch))) {
		messagef(0, "No such item.");
		return;
	}
	if (obj->what_is & (ARMOR | RING)) {
		messagef(0, "you can't wield %s",
			((obj->what_is == ARMOR) ? "armor" : "rings"));
		return;
	}
	if (obj->in_use_flags & BEING_WIELDED) {
		messagef(0, "in use");
	} else {
		unwield(rogue.weapon);
		get_desc(obj, desc, sizeof(desc));
		messagef(0, "wielding %s", desc);
		do_wield(obj);
		(void) reg_move();
	}
}

void
do_wield(object *obj)
{
	rogue.weapon = obj;
	obj->in_use_flags |= BEING_WIELDED;
}

void
unwield(object *obj)
{
	if (obj) {
		obj->in_use_flags &= (~BEING_WIELDED);
	}
	rogue.weapon = (object *) 0;
}

void
call_it(void)
{
	short ch;
	object *obj;
	struct id *id_table;
	char buf[MAX_TITLE_LENGTH+2];

	ch = pack_letter("call what?", (SCROL | POTION | WAND | RING));

	if (ch == CANCEL) {
		return;
	}
	if (!(obj = get_letter_object(ch))) {
		messagef(0, "no such item.");
		return;
	}
	if (!(obj->what_is & (SCROL | POTION | WAND | RING))) {
		messagef(0, "surely you already know what that's called");
		return;
	}
	id_table = get_id_table(obj);

	if (get_input_line("call it:", "", buf, sizeof(buf),
	    id_table[obj->which_kind].title, 1, 1)) {
		id_table[obj->which_kind].id_status = CALLED;
		(void) strlcpy(id_table[obj->which_kind].title, buf,
		    sizeof(id_table[obj->which_kind].title));
	}
}

short
pack_count(object *new_obj)
{
	object *obj;
	short count = 0;

	obj = rogue.pack.next_object;

	while (obj) {
		if (obj->what_is != WEAPON) {
			count += obj->quantity;
		} else if (!new_obj) {
			count++;
		} else if ((new_obj->what_is != WEAPON) ||
			((obj->which_kind != ARROW) &&
			(obj->which_kind != DAGGER) &&
			(obj->which_kind != DART) &&
			(obj->which_kind != SHURIKEN)) ||
			(new_obj->which_kind != obj->which_kind) ||
			(obj->quiver != new_obj->quiver)) {
			count++;
		}
		obj = obj->next_object;
	}
	return(count);
}

boolean
mask_pack(object *pack, unsigned short mask)
{
	while (pack->next_object) {
		pack = pack->next_object;
		if (pack->what_is & mask) {
			return(1);
		}
	}
	return(0);
}

boolean
is_pack_letter(short *c, unsigned short *mask)
{
	if (((*c == '?') || (*c == '!') || (*c == ':') || (*c == '=') ||
		(*c == ')') || (*c == ']') || (*c == '/') || (*c == ','))) {
		switch(*c) {
		case '?':
			*mask = SCROL;
			break;
		case '!':
			*mask = POTION;
			break;
		case ':':
			*mask = FOOD;
			break;
		case ')':
			*mask = WEAPON;
			break;
		case ']':
			*mask = ARMOR;
			break;
		case '/':
			*mask = WAND;
			break;
		case '=':
			*mask = RING;
			break;
		case ',':
			*mask = AMULET;
			break;
		}
		*c = LIST;
		return(1);
	}
	return(((*c >= 'a') && (*c <= 'z')) || (*c == CANCEL) || (*c == LIST));
}

boolean
has_amulet(void)
{
	return(mask_pack(&rogue.pack, AMULET));
}

void
kick_into_pack(void)
{
	object *obj;
	char desc[DCOLS];
	short stat;

	if (!(dungeon[rogue.row][rogue.col] & OBJECT)) {
		messagef(0, "nothing here");
	} else {
		if ((obj = pick_up(rogue.row, rogue.col, &stat))) {
			get_desc(obj, desc, sizeof(desc));
			if (obj->what_is == GOLD) {
				messagef(0, "%s", desc);
				free_object(obj);
			} else {
				messagef(0, "%s(%c)", desc, obj->ichar);
			}
		}
		if (obj || (!stat)) {
			(void) reg_move();
		}
	}
}
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: pack.c,v 1.11 2006/03/08 09:44:35 otto Exp $	*/
@


1.11
log
@Ansify; from Alexey Dobriyan; hope the license gets cleared up, so we
can include this in the build again.
@
text
@d1 1
a1 1
/*	$OpenBSD: pack.c,v 1.10 2004/01/21 19:12:13 espie Exp $	*/
a34 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)pack.c	8.1 (Berkeley) 5/31/93";
#else
static const char rcsid[] = "$OpenBSD: pack.c,v 1.10 2004/01/21 19:12:13 espie Exp $";
#endif
#endif /* not lint */
@


1.10
log
@make rogue const-correct, and fix one write-strings issue.
ok miod@@
@
text
@d1 1
a1 1
/*	$OpenBSD: pack.c,v 1.9 2003/06/03 03:01:41 millert Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: pack.c,v 1.9 2003/06/03 03:01:41 millert Exp $";
d61 1
a61 3
add_to_pack(obj, pack, condense)
	object *obj, *pack;
	int condense;
d88 1
a88 2
take_from_pack(obj, pack)
	object *obj, *pack;
d101 1
a101 2
pick_up(row, col, status)
	short row, col, *status;
d147 1
a147 1
drop()
d209 1
a209 2
check_duplicate(obj, pack)
	object *obj, *pack;
d242 1
a242 1
next_avail_ichar()
d268 1
a268 1
wait_for_ack()
d274 1
a274 3
pack_letter(prompt, mask)
	const char *prompt;
	unsigned short mask;
d310 1
a310 1
take_off()
d333 1
a333 1
wear()
d366 1
a366 2
unwear(obj)
	object *obj;
d375 1
a375 2
do_wear(obj)
	object *obj;
d383 1
a383 1
wield()
d419 1
a419 2
do_wield(obj)
	object *obj;
d426 1
a426 2
unwield(obj)
	object *obj;
d435 1
a435 1
call_it()
d466 1
a466 2
pack_count(new_obj)
	object *new_obj;
d493 1
a493 3
mask_pack(pack, mask)
	object *pack;
	unsigned short mask;
d505 1
a505 3
is_pack_letter(c, mask)
	short *c;
	unsigned short *mask;
d542 1
a542 1
has_amulet()
d548 1
a548 1
kick_into_pack()
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: pack.c,v 1.8 2003/04/06 18:50:38 deraadt Exp $	*/
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: pack.c,v 1.8 2003/04/06 18:50:38 deraadt Exp $";
d58 1
a58 1
char *curse_message = "you can't, it appears to be cursed";
d280 1
a280 1
	char *prompt;
@


1.8
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: pack.c,v 1.7 2002/07/18 07:13:57 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d40 1
a40 1
static const char rcsid[] = "$OpenBSD: pack.c,v 1.7 2002/07/18 07:13:57 pjanzen Exp $";
@


1.7
log
@- string handling patch from David Holland, minimally modified.  Highlights
are fewer magic constants, sprintf->snprintf, and better scorefile handling.
Also, won't hang if forking a subshell fails.
- a few needless functions have been trimmed, and a few extra defaults have
been added to a few switches, just in case.
@
text
@d1 1
a1 1
/*	$OpenBSD: pack.c,v 1.6 2001/08/12 19:52:56 pjanzen Exp $	*/
d44 1
a44 1
static const char rcsid[] = "$OpenBSD$";
d368 1
a368 1
	(void) strcpy(desc, "wearing ");
@


1.6
log
@make get_input_line more general (only affects wizard mode)
make special attacks a bit less likely in wizard mode
remove declarations of a few nonexistant functions
@
text
@d1 1
a1 1
/*	$OpenBSD: pack.c,v 1.5 2001/08/10 18:32:46 pjanzen Exp $	*/
d44 1
a44 1
static char rcsid[] = "$NetBSD: pack.c,v 1.3 1995/04/22 10:27:54 cgd Exp $";
d116 1
a116 1
		message("you're floating in the air!", 0);
d121 1
a121 1
		message("pick_up(): inconsistent", 1);
d127 1
a127 1
		message("the scroll turns to dust as you pick it up", 0);
d144 1
a144 1
		message("pack too full", 1);
d162 1
a162 1
		message("there's already something there", 0);
d166 1
a166 1
		message("you have nothing to drop", 0);
d173 1
a173 1
		message("no such item.", 0);
d178 1
a178 1
			message(curse_message, 0);
d184 1
a184 1
			message(curse_message, 0);
d192 1
a192 1
			message(curse_message, 0);
d211 2
a212 3
	(void) strcpy(desc, "dropped ");
	get_desc(obj, desc+8);
	message(desc, 0);
d262 4
a265 1
		ichars[(obj->ichar - 'a')] = 1;
d291 1
a291 1
		message("nothing appropriate", 0);
d296 1
a296 1
		message(prompt, 0);
d301 1
a301 1
				sound_bell();
d328 1
a328 1
			message(curse_message, 0);
d333 2
a334 3
			(void) strcpy(desc, "was wearing ");
			get_desc(obj, desc+12);
			message(desc, 0);
d339 1
a339 1
		message("not wearing any", 0);
d351 1
a351 1
		message("you're already wearing some", 0);
d360 1
a360 1
		message("no such item.", 0);
d364 1
a364 1
		message("you can't wear that", 0);
d369 2
a370 2
	get_desc(obj, desc + 8);
	message(desc, 0);
d403 1
a403 1
		message(curse_message, 0);
d412 1
a412 1
		message("No such item.", 0);
d416 1
a416 1
		sprintf(desc, "you can't wield %s",
a417 1
		message(desc, 0);
d421 1
a421 1
		message("in use", 0);
d424 2
a425 3
		(void) strcpy(desc, "wielding ");
		get_desc(obj, desc + 9);
		message(desc, 0);
d463 1
a463 1
		message("no such item.", 0);
d467 1
a467 1
		message("surely you already know what that's called", 0);
d475 2
a476 1
		(void) strcpy(id_table[obj->which_kind].title, buf);
d572 1
a572 1
	short n, stat;
d575 1
a575 1
		message("nothing here", 0);
d578 1
a578 1
			get_desc(obj, desc);
d580 1
a580 1
				message(desc, 0);
d583 1
a583 6
				n = strlen(desc);
				desc[n] = '(';
				desc[n+1] = obj->ichar;
				desc[n+2] = ')';
				desc[n+3] = 0;
				message(desc, 0);
@


1.5
log
@Minor -Wall
@
text
@d1 1
a1 1
/*	$OpenBSD: pack.c,v 1.4 2000/04/07 04:34:16 pjanzen Exp $	*/
d473 2
a474 1
	if (get_input_line("call it:","",buf,id_table[obj->which_kind].title,1,1)) {
@


1.4
log
@typo
@
text
@d1 1
a1 1
/*	$OpenBSD: pack.c,v 1.3 1998/08/22 08:55:38 pjanzen Exp $	*/
d67 1
@


1.3
log
@More largely NetBSD-inspired code cleanup
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d349 1
a349 1
		message("your already wearing some", 0);
@


1.2
log
@tabify
@
text
@d1 1
d56 1
a56 1
 *	   gain or profit.
a63 2
extern short levitate;

d66 1
a66 1
object *obj, *pack;
d71 1
a71 1
		if (op = check_duplicate(obj, pack)) {
d92 1
d94 1
a94 1
object *obj, *pack;
d108 1
a108 1
short *status;
d153 1
d218 1
a218 1
object *obj, *pack;
d250 1
d253 2
a254 2
	register object *obj;
	register i;
d273 1
d279 1
d281 2
a282 2
char *prompt;
unsigned short mask;
d317 1
d341 1
d345 1
a345 1
	register object *obj;
d374 1
d376 1
a376 1
object *obj;
d384 1
d386 1
a386 1
object *obj;
d393 1
d397 1
a397 1
	register object *obj;
d431 1
d433 1
a433 1
object *obj;
d439 1
d441 1
a441 1
object *obj;
d449 1
d453 1
a453 1
	register object *obj;
d478 1
d480 1
a480 1
object *new_obj;
d508 2
a509 2
object *pack;
unsigned short mask;
d520 1
d522 2
a523 2
short *c;
unsigned short *mask;
d559 1
d565 1
d575 1
a575 1
		if (obj = pick_up(rogue.row, rogue.col, &stat)) {
@


1.1
log
@Initial revision
@
text
@d55 1
a55 1
 *         gain or profit.
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
