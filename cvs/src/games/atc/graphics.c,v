head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.8.0.20
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.16
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	OPENBSD_4_6:1.7.0.22
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.18
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.12
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.10
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.8
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.6
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.5.0.4
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.2
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.4.0.4
	OPENBSD_2_7_BASE:1.4
	OPENBSD_2_6:1.4.0.2
	OPENBSD_2_6_BASE:1.4
	OPENBSD_2_5:1.2.0.4
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.2
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.1.1.1.0.8
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2016.08.27.02.02.44;	author guenther;	state Exp;
branches;
next	1.11;
commitid	gupFWcYhnkwQ5f1q;

1.11
date	2015.12.31.16.50.29;	author mestre;	state Exp;
branches;
next	1.10;
commitid	jnRgo9DYtb9taiXD;

1.10
date	2015.11.04.21.22.10;	author tedu;	state Exp;
branches;
next	1.9;
commitid	XDKIiXhFNs4jqYjv;

1.9
date	2014.07.13.13.00.40;	author tedu;	state Exp;
branches;
next	1.8;
commitid	RILS5naX1655SI9i;

1.8
date	2009.10.27.23.59.23;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2004.11.29.08.52.28;	author jsg;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.03.03.01.38;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.23.22.23.37;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	99.09.01.00.27.07;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	99.07.31.20.08.30;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	98.09.21.07.36.05;	author pjanzen;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.37;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Pull in <sys/time.h> for struct timespec, gettimeofday(), clock_gettime(),
and setitimer()

ok deraadt@@
@
text
@/*	$OpenBSD: graphics.c,v 1.11 2015/12/31 16:50:29 mestre Exp $	*/
/*	$NetBSD: graphics.c,v 1.3 1995/03/21 15:04:04 cgd Exp $	*/

/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ed James.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Copyright (c) 1987 by Ed James, UC Berkeley.  All rights reserved.
 *
 * Copy permission is hereby granted provided that this notice is
 * retained on all partial or complete copies.
 *
 * For more info on this and all of my stuff, mail edjames@@berkeley.edu.
 */

#include <sys/time.h>
#include <curses.h>
#include <err.h>
#include <stdlib.h>

#include "def.h"
#include "extern.h"

#define C_TOPBOTTOM		'-'
#define C_LEFTRIGHT		'|'
#define C_AIRPORT		'='
#define C_LINE			'+'
#define C_BACKROUND		'.'
#define C_BEACON		'*'
#define C_CREDIT		'*'

WINDOW	*radar, *cleanradar, *credit, *input, *planes;

int
getAChar(void)
{
	int c;

	if ((c = getchar()) == EOF && feof(stdin))
		quit(0);
	return (c);
}

void
erase_all(void)
{
	PLANE	*pp;

	for (pp = air.head; pp != NULL; pp = pp->next) {
		wmove(cleanradar, pp->ypos, pp->xpos * 2);
		wmove(radar, pp->ypos, pp->xpos * 2);
		waddch(radar, winch(cleanradar));
		wmove(cleanradar, pp->ypos, pp->xpos * 2 + 1);
		wmove(radar, pp->ypos, pp->xpos * 2 + 1);
		waddch(radar, winch(cleanradar));
	}
}

void
draw_all(void)
{
	PLANE	*pp;

	for (pp = air.head; pp != NULL; pp = pp->next) {
		if (pp->status == S_MARKED)
			wstandout(radar);
		wmove(radar, pp->ypos, pp->xpos * 2);
		waddch(radar, name(pp));
		waddch(radar, '0' + pp->altitude);
		if (pp->status == S_MARKED)
			wstandend(radar);
	}
	wrefresh(radar);
	planewin();
	wrefresh(input);		/* return cursor */
	fflush(stdout);
}

void
setup_screen(const C_SCREEN *scp)
{
	static char	buffer[BUFSIZ];
	int	i, j;
	char	str[3];
	const char *airstr;

	initscr();
	/* size of screen depends on chosen game, but we need at least 80
	 * columns for "Information area" to work. */
	if (LINES < (INPUT_LINES + scp->height) ||
	    COLS < (PLANE_COLS + 2 * scp->width) ||
	    COLS < 80) {
		endwin();
		errx(1, "screen too small.");
	}
	setvbuf(stdout, buffer, _IOFBF, sizeof buffer);
	input = newwin(INPUT_LINES, COLS - PLANE_COLS, LINES - INPUT_LINES, 0);
	credit = newwin(INPUT_LINES, PLANE_COLS, LINES - INPUT_LINES, 
		COLS - PLANE_COLS);
	planes = newwin(LINES - INPUT_LINES, PLANE_COLS, 0, COLS - PLANE_COLS);

	str[2] = '\0';

	if (radar != NULL)
		delwin(radar);
	radar = newwin(scp->height, scp->width * 2, 0, 0);

	if (cleanradar != NULL)
		delwin(cleanradar);
	cleanradar = newwin(scp->height, scp->width * 2, 0, 0);

	/* minus one here to prevent a scroll */
	for (i = 0; i < PLANE_COLS - 1; i++) {
		wmove(credit, 0, i);
		waddch(credit, C_CREDIT);
		wmove(credit, INPUT_LINES - 1, i);
		waddch(credit, C_CREDIT);
	}
	wmove(credit, INPUT_LINES / 2, 1);
	waddstr(credit, AUTHOR_STR);

	for (i = 1; i < scp->height - 1; i++) {
		for (j = 1; j < scp->width - 1; j++) {
			wmove(radar, i, j * 2);
			waddch(radar, C_BACKROUND);
		}
	}

	/*
	 * Draw the lines first, since people like to draw lines
	 * through beacons and exit points.
	 */
	str[0] = C_LINE;
	for (i = 0; i < scp->num_lines; i++) {
		str[1] = ' ';
		draw_line(radar, scp->line[i].p1.x, scp->line[i].p1.y,
			scp->line[i].p2.x, scp->line[i].p2.y, str);
	}

	str[0] = C_TOPBOTTOM;
	str[1] = C_TOPBOTTOM;
	wmove(radar, 0, 0);
	for (i = 0; i < scp->width - 1; i++)
		waddstr(radar, str);
	waddch(radar, C_TOPBOTTOM);

	str[0] = C_TOPBOTTOM;
	str[1] = C_TOPBOTTOM;
	wmove(radar, scp->height - 1, 0);
	for (i = 0; i < scp->width - 1; i++)
		waddstr(radar, str);
	waddch(radar, C_TOPBOTTOM);

	for (i = 1; i < scp->height - 1; i++) {
		wmove(radar, i, 0);
		waddch(radar, C_LEFTRIGHT);
		wmove(radar, i, (scp->width - 1) * 2);
		waddch(radar, C_LEFTRIGHT);
	}

	str[0] = C_BEACON;
	for (i = 0; i < scp->num_beacons; i++) {
		str[1] = '0' + i;
		wmove(radar, scp->beacon[i].y, scp->beacon[i].x * 2);
		waddstr(radar, str);
	}

	for (i = 0; i < scp->num_exits; i++) {
		wmove(radar, scp->exit[i].y, scp->exit[i].x * 2);
		waddch(radar, '0' + i);
	}

	airstr = "^?>?v?<?";
	for (i = 0; i < scp->num_airports; i++) {
		str[0] = airstr[scp->airport[i].dir];
		str[1] = '0' + i;
		wmove(radar, scp->airport[i].y, scp->airport[i].x * 2);
		waddstr(radar, str);
	}
	
	overwrite(radar, cleanradar);
	wrefresh(radar);
	wrefresh(credit);
	fflush(stdout);
}

void
draw_line(WINDOW *w, int x, int y, int lx, int ly, const char *s)
{
	int	dx, dy;

	dx = SGN(lx - x);
	dy = SGN(ly - y);
	for (;;) {
		wmove(w, y, x * 2);
		waddstr(w, s);
		if (x == lx && y == ly)
			break;
		x += dx;
		y += dy;
	}
}

void
ioclrtoeol(int pos)
{
	wmove(input, 0, pos);
	wclrtoeol(input);
	wrefresh(input);
	fflush(stdout);
}

void
iomove(int pos)
{
	wmove(input, 0, pos);
	wrefresh(input);
	fflush(stdout);
}

void
ioaddstr(int pos, const char *str)
{
	wmove(input, 0, pos);
	waddstr(input, str);
	wrefresh(input);
	fflush(stdout);
}

void
ioclrtobot(void)
{
	wclrtobot(input);
	wrefresh(input);
	fflush(stdout);
}

void
ioerror(int pos, int len, const char *str)
{
	int	i;

	wmove(input, 1, pos);
	for (i = 0; i < len; i++)
		waddch(input, '^');
	wmove(input, 2, 0);
	waddstr(input, str);
	wrefresh(input);
	fflush(stdout);
}

void
quit(int dummy)
{
	int			c, y, x;
	struct itimerval	itv;

	getyx(input, y, x);
	wmove(input, 2, 0);
	waddstr(input, "Really quit? (y/n) ");
	wclrtobot(input);
	wrefresh(input);
	fflush(stdout);

	c = getchar();
	if (c == EOF || c == 'y') {
		/* disable timer */
		itv.it_value.tv_sec = 0;
		itv.it_value.tv_usec = 0;
		setitimer(ITIMER_REAL, &itv, NULL);
		fflush(stdout);
		clear();
		refresh();
		endwin();
		log_score(0);
		exit(0);
	}
	wmove(input, 2, 0);
	wclrtobot(input);
	wmove(input, y, x);
	wrefresh(input);
	fflush(stdout);
}

void
planewin(void)
{
	PLANE	*pp;
	int	warning = 0;

	wclear(planes);

	wmove(planes, 0,0);

	wprintw(planes, "Time: %-4d Safe: %d", clck, safe_planes);
	wmove(planes, 2, 0);

	waddstr(planes, "pl dt  comm");
	for (pp = air.head; pp != NULL; pp = pp->next) {
		if (waddch(planes, '\n') == ERR) {
			warning++;
			break;
		}
		waddstr(planes, command(pp));
	}
	waddch(planes, '\n');
	for (pp = ground.head; pp != NULL; pp = pp->next) {
		if (waddch(planes, '\n') == ERR) {
			warning++;
			break;
		}
		waddstr(planes, command(pp));
	}
	if (warning) {
		wmove(planes, LINES - INPUT_LINES - 1, 0);
		waddstr(planes, "---- more ----");
		wclrtoeol(planes);
	}
	wrefresh(planes);
	fflush(stdout);
}

void
loser(const PLANE *p, const char *s)
{
	int			c;
	struct itimerval	itv;

	/* disable timer */
	itv.it_value.tv_sec = 0;
	itv.it_value.tv_usec = 0;
	setitimer(ITIMER_REAL, &itv, NULL);

	wmove(input, 0, 0);
	wclrtobot(input);
	if (p == NULL)
		wprintw(input, "%s\n\nHit space for top players list...", s);
	else
		wprintw(input, "Plane '%c' %s\n\nHit space for top players list...",
			name(p), s);
	wrefresh(input);
	fflush(stdout);
	while ((c = getchar()) != EOF && c != ' ')
		;
	clear();	/* move to top of screen */
	refresh();
	endwin();
	log_score(0);
	exit(0);
}

void
redraw(void)
{
	clear();
	refresh();

	touchwin(radar);
	wrefresh(radar);
	touchwin(planes);
	wrefresh(planes);
	touchwin(credit);
	wrefresh(credit);

	/* refresh input last to get cursor in right place */
	touchwin(input);
	wrefresh(input);
	fflush(stdout);
}

void
done_screen(void)
{
	clear();
	refresh();
	endwin();	  /* clean up curses */
}
@


1.11
log
@Include only needed header files per each source file

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: graphics.c,v 1.10 2015/11/04 21:22:10 tedu Exp $	*/
d45 1
@


1.10
log
@replace setbuf with setvbuf, from Frederic Nowak
@
text
@d1 1
a1 1
/*	$OpenBSD: graphics.c,v 1.9 2014/07/13 13:00:40 tedu Exp $	*/
d45 1
d47 4
a50 1
#include "include.h"
@


1.9
log
@long live BSD, SYSV is dead!
@
text
@d1 1
a1 1
/*	$OpenBSD: graphics.c,v 1.8 2009/10/27 23:59:23 deraadt Exp $	*/
d120 1
a120 1
	setbuf(stdout, buffer);
@


1.8
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: graphics.c,v 1.7 2004/11/29 08:52:28 jsg Exp $	*/
d62 1
a62 1
#ifdef BSD
a65 5
#endif
#ifdef SYSV
	while ((c = getchar()) == -1 && errno == EINTR) ;
	return(c);
#endif
a279 1
#ifdef BSD
a280 1
#endif
a291 1
#ifdef BSD
a294 4
#endif
#ifdef SYSV
		alarm(0);
#endif
a314 1
#ifdef BSD
a315 1
#endif
a318 3
#ifdef SYSV
	wclrtobot(planes);
#endif
a350 1
#ifdef BSD
a351 1
#endif
a353 1
#ifdef BSD
a356 4
#endif
#ifdef SYSV
	alarm(0);
#endif
@


1.7
log
@ansi. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: graphics.c,v 1.6 2003/06/03 03:01:38 millert Exp $	*/
a43 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)graphics.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: graphics.c,v 1.6 2003/06/03 03:01:38 millert Exp $";
#endif
#endif /* not lint */
@


1.6
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: graphics.c,v 1.5 2000/07/23 22:23:37 pjanzen Exp $	*/
d49 1
a49 1
static char rcsid[] = "$OpenBSD: graphics.c,v 1.5 2000/07/23 22:23:37 pjanzen Exp $";
d67 1
a67 1
getAChar()
d82 1
a82 1
erase_all()
d97 1
a97 1
draw_all()
d117 1
a117 2
setup_screen(scp)
	const C_SCREEN	*scp;
d225 1
a225 4
draw_line(w, x, y, lx, ly, s)
	WINDOW	*w;
	int	x, y, lx, ly;
	const char	*s;
d242 1
a242 2
ioclrtoeol(pos)
	int pos;
d251 1
a251 2
iomove(pos)
	int pos;
d259 1
a259 3
ioaddstr(pos, str)
	int		pos;
	const char	*str;
d268 1
a268 1
ioclrtobot()
d276 1
a276 3
ioerror(pos, len, str)
	int		pos, len;
	const char	*str;
d290 1
a290 2
quit(dummy)
	int dummy;
d330 1
a330 1
planewin()
d373 1
a373 3
loser(p, s)
	const PLANE	*p;
	const char	*s;
d409 1
a409 1
redraw()
d428 1
a428 1
done_screen()
@


1.5
log
@Handle EOF on stdin.
@
text
@d1 1
a1 1
/*	$OpenBSD: graphics.c,v 1.4 1999/09/01 00:27:07 pjanzen Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d49 1
a49 1
static char rcsid[] = "$OpenBSD: graphics.c,v 1.4 1999/09/01 00:27:07 pjanzen Exp $";
@


1.4
log
@Make sure screen is big enough for the selected game; also a little tidying
@
text
@d1 1
a1 1
/*	$OpenBSD: graphics.c,v 1.3 1999/07/31 20:08:30 pjanzen Exp $	*/
d53 1
a53 1
static char rcsid[] = "$OpenBSD: graphics.c,v 1.3 1999/07/31 20:08:30 pjanzen Exp $";
d73 1
d75 3
a77 1
	return (getchar());
a79 2
	int c;

@


1.3
log
@- make atc check for calloc() failure; correctly check for redefinition of
"width" in game definition files (jsm28@@cam.ac.uk)
- clean up man page some (based on work of dholland@@eecs.harvard.edu)
@
text
@d1 1
a1 1
/*	$OpenBSD: graphics.c,v 1.2 1998/09/21 07:36:05 pjanzen Exp $	*/
d53 1
a53 1
static char rcsid[] = "$OpenBSD: graphics.c,v 1.2 1998/09/21 07:36:05 pjanzen Exp $";
d120 2
a121 1
init_gr()
d124 3
d129 5
a133 1
	if (LINES < 24 || COLS < 80) {
a141 9
}

void
setup_screen(scp)
	const C_SCREEN	*scp;
{
	register int	i, j;
	char	str[3];
	const char *airstr;
@


1.2
log
@Cleanup, partially from NetBSD and jsm28@@cam.ac.uk.  No longer segfaults if
scorefile can't be opened.  New -q quiet option.  Partial man page reformat.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 1
a53 1
static char rcsid[] = "$OpenBSD$";
d409 5
a413 2
	wprintw(input, "Plane '%c' %s\n\nHit space for top players list...",
		name(p), s);
@


1.1
log
@Initial revision
@
text
@d1 1
d53 1
a53 1
static char rcsid[] = "$NetBSD: graphics.c,v 1.3 1995/03/21 15:04:04 cgd Exp $";
d57 1
a58 3
#ifdef SYSV
#include <errno.h>
#endif
d70 1
d84 1
d99 1
d119 1
d125 4
d136 1
d138 1
a138 1
	C_SCREEN	*scp;
d141 2
a142 1
	char		str[3], *airstr;
d229 1
d232 2
a233 1
	char	*s;
d249 1
d251 1
d259 1
d261 1
d268 1
d270 2
a271 1
	char	*str;
d279 1
d287 1
d289 2
a290 1
	char	*str;
d303 3
a305 1
quit()
a341 1
	return;
d344 1
a347 1
	char	*command();
d387 1
d389 2
a390 2
	PLANE	*p;
	char	*s;
d422 1
d441 1
a441 1

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
