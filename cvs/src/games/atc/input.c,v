head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.6
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.4
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.12.0.26
	OPENBSD_5_8_BASE:1.12
	OPENBSD_5_7:1.12.0.18
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.12.0.22
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.14
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.10
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.8
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.6
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.4
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.2
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	OPENBSD_3_6:1.9.0.6
	OPENBSD_3_6_BASE:1.9
	OPENBSD_3_5:1.9.0.4
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.2
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.7.0.6
	OPENBSD_3_3_BASE:1.7
	OPENBSD_3_2:1.7.0.4
	OPENBSD_3_2_BASE:1.7
	OPENBSD_3_1:1.7.0.2
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	OPENBSD_2_9:1.5.0.12
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.10
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.8
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.5.0.6
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.3.0.4
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.2
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2015.12.31.16.50.29;	author mestre;	state Exp;
branches;
next	1.12;
commitid	jnRgo9DYtb9taiXD;

1.12
date	2009.10.27.23.59.23;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.11.07.03.52.59;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2004.11.29.08.52.28;	author jsg;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.03.03.01.38;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2003.04.06.18.50.36;	author deraadt;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.16.21.27.08;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.06.22.59.13;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	98.09.21.07.36.06;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	98.09.02.06.58.10;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	97.07.23.20.04.44;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	96.12.19.21.02.35;	author deraadt;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.37;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Include only needed header files per each source file

OK tb@@
@
text
@/*	$OpenBSD: input.c,v 1.12 2009/10/27 23:59:23 deraadt Exp $	*/
/*	$NetBSD: input.c,v 1.4 1995/04/27 21:22:24 mycroft Exp $	*/

/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ed James.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Copyright (c) 1987 by Ed James, UC Berkeley.  All rights reserved.
 *
 * Copy permission is hereby granted provided that this notice is
 * retained on all partial or complete copies.
 *
 * For more info on this and all of my stuff, mail edjames@@berkeley.edu.
 */

#include <ctype.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <termios.h>

#include "def.h"
#include "extern.h"

#define MAXRULES	6
#define MAXDEPTH	15

#define RETTOKEN	'\n'
#define REDRAWTOKEN	'\014'	/* CTRL(L) */
#define HELPTOKEN	'?'
#define ALPHATOKEN	256
#define NUMTOKEN	257

typedef struct {
	int		token;
	int		to_state;
	const char	*str;
	const char	*(*func)(char);
} RULE;

typedef struct {
	int	num_rules;
	RULE	*rule;
} STATE;

typedef struct {
	char	str[20];
	int	state;
	int	rule;
	int	ch;
	int	pos;
} STACK;

#define T_RULE		stack[level].rule
#define T_STATE		stack[level].state
#define T_STR		stack[level].str
#define T_POS		stack[level].pos
#define	T_CH		stack[level].ch

#define NUMELS(a)	(sizeof (a) / sizeof (*(a)))

#define NUMSTATES	NUMELS(st)

RULE	state0[] = {	{ ALPHATOKEN,	1,	"%c:",		setplane},
			{ RETTOKEN,	-1,	"",		NULL	},
			{ HELPTOKEN,	12,	" [a-z]<ret>",	NULL	}},
	state1[] = {	{ 't',		2,	" turn",	turn	},	
			{ 'a',		3,	" altitude:",	NULL	},	
			{ 'c',		4,	" circle",	circle	},
			{ 'm',		7,	" mark",	mark	},
			{ 'u',		7,	" unmark",	unmark	},
			{ 'i',		7,	" ignore",	ignore	},
			{ HELPTOKEN,	12,	" tacmui",	NULL	}},
	state2[] = {	{ 'l',		6,	" left",	left	},	
			{ 'r',		6,	" right",	right	},	
			{ 'L',		4,	" left 90",	Left	},
			{ 'R',		4,	" right 90",	Right	},	
			{ 't',		11,	" towards",	NULL	},
			{ 'w',		4,	" to 0",	to_dir	},
			{ 'e',		4,	" to 45",	to_dir	},
			{ 'd',		4,	" to 90",	to_dir	},
			{ 'c',		4,	" to 135",	to_dir	},
			{ 'x',		4,	" to 180",	to_dir	},
			{ 'z',		4,	" to 225",	to_dir	},
			{ 'a',		4,	" to 270",	to_dir	},
			{ 'q',		4,	" to 315",	to_dir	},
			{ HELPTOKEN,	12,	" lrLRt<dir>",	NULL	}},
	state3[] = {	{ '+',		10,	" climb",	climb	},	
			{ 'c',		10,	" climb",	climb	},	
			{ '-',		10,	" descend",	descend	},	
			{ 'd',		10,	" descend",	descend	},	
			{ NUMTOKEN,	7,	" %c000 feet",	setalt	},
			{ HELPTOKEN,	12,	" +-cd[0-9]",	NULL	}},
	state4[] = {	{ '@@',		9,	" at",		NULL	},	
			{ 'a',		9,	" at",		NULL	},	
			{ RETTOKEN,	-1,	"",		NULL	},
			{ HELPTOKEN,	12,	" @@a<ret>",	NULL	}},
	state5[] = {	{ NUMTOKEN,	7,	"%c",		delayb	},
			{ HELPTOKEN,	12,	" [0-9]",	NULL	}},
	state6[] = {	{ '@@',		9,	" at",		NULL	},
			{ 'a',		9,	" at",		NULL	},
			{ 'w',		4,	" 0",		rel_dir	},
			{ 'e',		4,	" 45",		rel_dir	},
			{ 'd',		4,	" 90",		rel_dir	},
			{ 'c',		4,	" 135",		rel_dir	},
			{ 'x',		4,	" 180",		rel_dir	},
			{ 'z',		4,	" 225",		rel_dir	},
			{ 'a',		4,	" 270",		rel_dir	},
			{ 'q',		4,	" 315",		rel_dir	},
			{ RETTOKEN,	-1,	"",		NULL	},	
			{ HELPTOKEN,	12,	" @@a<dir><ret>",NULL	}},
	state7[] = {	{ RETTOKEN,	-1,	"",		NULL	},
			{ HELPTOKEN,	12,	" <ret>",	NULL	}},
	state8[] = {	{ NUMTOKEN,	4,	"%c",		benum	},
			{ HELPTOKEN,	12,	" [0-9]",	NULL	}},
	state9[] = {	{ 'b',		5,	" beacon #",	NULL	},
			{ '*',		5,	" beacon #",	NULL	},
			{ HELPTOKEN,	12,	" b*",		NULL	}},
	state10[] = {	{ NUMTOKEN,	7,	" %c000 ft",	setrelalt},
			{ HELPTOKEN,	12,	" [0-9]",	NULL	}},
	state11[] = {	{ 'b',		8,	" beacon #",	beacon	},	
			{ '*',		8,	" beacon #",	beacon	},
			{ 'e',		8,	" exit #",	ex_it	},
			{ 'a',		8,	" airport #",	airport	},
			{ HELPTOKEN,	12,	" b*ea",	NULL	}},
	state12[] = {	{ -1,		-1,	"",		NULL	}};

#define DEF_STATE(s)	{ NUMELS(s),	(s)	}

STATE	st[] = {
	DEF_STATE(state0), DEF_STATE(state1), DEF_STATE(state2),
	DEF_STATE(state3), DEF_STATE(state4), DEF_STATE(state5),
	DEF_STATE(state6), DEF_STATE(state7), DEF_STATE(state8),
	DEF_STATE(state9), DEF_STATE(state10), DEF_STATE(state11),
	DEF_STATE(state12)
};

PLANE	p;
STACK	stack[MAXDEPTH];
int	level;
int	tval;
int	dest_type, dest_no, dir;

int
pop(void)
{
	if (level == 0)
		return (-1);
	level--;

	ioclrtoeol(T_POS);

	strlcpy(T_STR, "", sizeof T_STR);
	T_RULE = -1;
	T_CH = -1;
	return (0);
}

void
rezero(void)
{
	iomove(0);

	level = 0;
	T_STATE = 0;
	T_RULE = -1;
	T_CH = -1;
	T_POS = 0;
	strlcpy(T_STR, "", sizeof T_STR);
}

void
push(int ruleno, int ch)
{
	int	newstate, newpos;

	(void)snprintf(T_STR, sizeof T_STR, st[T_STATE].rule[ruleno].str, tval);
	T_RULE = ruleno;
	T_CH = ch;
	newstate = st[T_STATE].rule[ruleno].to_state;
	newpos = T_POS + strlen(T_STR);

	ioaddstr(T_POS, T_STR);

	if (level == 0)
		ioclrtobot();
	level++;
	T_STATE = newstate;
	T_POS = newpos;
	T_RULE = -1;
	strlcpy(T_STR, "", sizeof T_STR);
}

int
getcommand(void)
{
	int	c, i, done;
	const char	*s, *(*func)(char);
	PLANE	*pp;

	rezero();

	do {
		c = gettoken();
		if (c == tty_new.c_cc[VERASE]) {
			if (pop() < 0)
				noise();
		} else if (c == tty_new.c_cc[VKILL]) {
			while (pop() >= 0)
				;
		} else {
			done = 0;
			for (i = 0; i < st[T_STATE].num_rules; i++) {
				if (st[T_STATE].rule[i].token == c ||
				    st[T_STATE].rule[i].token == tval) {
					push(i, (c >= ALPHATOKEN) ? tval : c);
					done = 1;
					break;
				}
			}
			if (!done)
				noise();
		}
	} while (T_STATE != -1);

	if (level == 1)
		return (1);	/* forced update */

	dest_type = T_NODEST;
	
	for (i = 0; i < level; i++) {
		func = st[stack[i].state].rule[stack[i].rule].func;
		if (func != NULL)
			if ((s = (*func)(stack[i].ch)) != NULL) {
				ioerror(stack[i].pos, strlen(stack[i].str), s);
				return (-1);
			}
	}

	pp = findplane(p.plane_no);
	if (pp->new_altitude != p.new_altitude)
		pp->new_altitude = p.new_altitude;
	else if (pp->status != p.status)
		pp->status = p.status;
	else {
		pp->new_dir = p.new_dir;
		pp->delayd = p.delayd;
		pp->delayd_no = p.delayd_no;
	}
	return (0);
}

void
noise(void)
{
	if (makenoise)
		putchar('\07');
	fflush(stdout);
}

int
gettoken(void)
{
	while ((tval = getAChar()) == REDRAWTOKEN)
	{
		redraw();
	}

	if (isdigit(tval))
		return (NUMTOKEN);
	else if (isalpha(tval))
		return (ALPHATOKEN);
	else
		return (tval);
}

const char	*
setplane(char c)
{
	PLANE	*pp;

	pp = findplane(number(c));
	if (pp == NULL)
		return ("Unknown Plane");
	memcpy(&p, pp, sizeof (p));
	p.delayd = 0;
	return (NULL);
}

const char	*
turn(char c)
{
	if (p.altitude == 0)
		return ("Planes at airports may not change direction");
	return (NULL);
}

const char	*
circle(char c)
{
	if (p.altitude == 0)
		return ("Planes cannot circle on the ground");
	p.new_dir = MAXDIR;
	return (NULL);
}

const char	*
left(char c)
{
	dir = D_LEFT;
	p.new_dir = p.dir - 1;
	if (p.new_dir < 0)
		p.new_dir += MAXDIR;
	return (NULL);
}

const char	*
right(char c)
{
	dir = D_RIGHT;
	p.new_dir = p.dir + 1;
	if (p.new_dir >= MAXDIR)
		p.new_dir -= MAXDIR;
	return (NULL);
}

const char	*
Left(char c)
{
	p.new_dir = p.dir - 2;
	if (p.new_dir < 0)
		p.new_dir += MAXDIR;
	return (NULL);
}

const char	*
Right(char c)
{
	p.new_dir = p.dir + 2;
	if (p.new_dir >= MAXDIR)
		p.new_dir -= MAXDIR;
	return (NULL);
}

const char	*
delayb(char c)
{
	int	xdiff, ydiff;

	c -= '0';

	if (c >= sp->num_beacons)
		return ("Unknown beacon");
	xdiff = sp->beacon[(int)c].x - p.xpos;
	xdiff = SGN(xdiff);
	ydiff = sp->beacon[(int)c].y - p.ypos;
	ydiff = SGN(ydiff);
	if (xdiff != displacement[p.dir].dx || ydiff != displacement[p.dir].dy)
		return ("Beacon is not in flight path");
	if (xdiff != 0 && ydiff !=0)
		if (abs(sp->beacon[(int)c].x - p.xpos) !=
		    abs(sp->beacon[(int)c].y - p.ypos))
			return ("Beacon is not in flight path");
	p.delayd = 1;
	p.delayd_no = c;

	if (dest_type != T_NODEST) {
		switch (dest_type) {
		case T_BEACON:
			xdiff = sp->beacon[dest_no].x - sp->beacon[(int)c].x;
			ydiff = sp->beacon[dest_no].y - sp->beacon[(int)c].y;
			break;
		case T_EXIT:
			xdiff = sp->exit[dest_no].x - sp->beacon[(int)c].x;
			ydiff = sp->exit[dest_no].y - sp->beacon[(int)c].y;
			break;
		case T_AIRPORT:
			xdiff = sp->airport[dest_no].x - sp->beacon[(int)c].x;
			ydiff = sp->airport[dest_no].y - sp->beacon[(int)c].y;
			break;
		default:
			return ("Bad case in delayb!  Get help!");
			break;
		}
		if (xdiff == 0 && ydiff == 0)
			return ("Would already be there");
		p.new_dir = DIR_FROM_DXDY(xdiff, ydiff);
		if (p.new_dir == p.dir)
			return ("Already going in that direction");
	}
	return (NULL);
}

const char	*
beacon(char c)
{
	dest_type = T_BEACON;
	return (NULL);
}

const char	*
ex_it(char c)
{
	dest_type = T_EXIT;
	return (NULL);
}

const char	*
airport(char c)
{
	dest_type = T_AIRPORT;
	return (NULL);
}

const char	*
climb(char c)
{
	dir = D_UP;
	return (NULL);
}

const char	*
descend(char c)
{
	dir = D_DOWN;
	return (NULL);
}

const char	*
setalt(char c)
{
	if ((p.altitude == c - '0') && (p.new_altitude == p.altitude))
		return ("Already at that altitude");
	if (p.new_altitude == c - '0')
		return ("Already going to that altitude");
	p.new_altitude = c - '0';
	return (NULL);
}

const char	*
setrelalt(char c)
{
	int new_altitude;

	if (c == 0)
		return ("altitude not changed");

	switch (dir) {
	case D_UP:
		new_altitude = p.altitude + c - '0';
		break;
	case D_DOWN:
		new_altitude = p.altitude - (c - '0');
		break;
	default:
		return ("Unknown case in setrelalt!  Get help!");
		break;
	}
	if (new_altitude < 0)
		return ("Altitude would be too low");
	else if (new_altitude > 9)
		return ("Altitude would be too high");
	else if (new_altitude == p.new_altitude)
		return ("Already going to that altitude");

	p.new_altitude = new_altitude;
	return (NULL);
}

const char	*
benum(char c)
{
	dest_no = c -= '0';

	switch (dest_type) {
	case T_BEACON:
		if (c >= sp->num_beacons)
			return ("Unknown beacon");
		p.new_dir = DIR_FROM_DXDY(sp->beacon[(int)c].x - p.xpos,
			sp->beacon[(int)c].y - p.ypos);
		break;
	case T_EXIT:
		if (c >= sp->num_exits)
			return ("Unknown exit");
		p.new_dir = DIR_FROM_DXDY(sp->exit[(int)c].x - p.xpos,
			sp->exit[(int)c].y - p.ypos);
		break;
	case T_AIRPORT:
		if (c >= sp->num_airports)
			return ("Unknown airport");
		p.new_dir = DIR_FROM_DXDY(sp->airport[(int)c].x - p.xpos,
			sp->airport[(int)c].y - p.ypos);
		break;
	default:
		return ("Unknown case in benum!  Get help!");
		break;
	}
	return (NULL);
}

const char	*
to_dir(char c)
{
	p.new_dir = dir_no(c);
	return (NULL);
}

const char	*
rel_dir(char c)
{
	int	angle;

	angle = dir_no(c);
	switch (dir) {
	case D_LEFT:
		p.new_dir = p.dir - angle;
		if (p.new_dir < 0)
			p.new_dir += MAXDIR;
		break;
	case D_RIGHT:
		p.new_dir = p.dir + angle;
		if (p.new_dir >= MAXDIR)
			p.new_dir -= MAXDIR;
		break;
	default:
		return ("Bizarre direction in rel_dir!  Get help!");
		break;
	}
	return (NULL);
}

const char	*
mark(char c)
{
	if (p.altitude == 0)
		return ("Cannot mark planes on the ground");
	if (p.status == S_MARKED)
		return ("Already marked");
	p.status = S_MARKED;
	return (NULL);
}

const char	*
unmark(char c)
{
	if (p.altitude == 0)
		return ("Cannot unmark planes on the ground");
	if (p.status == S_UNMARKED)
		return ("Already unmarked");
	p.status = S_UNMARKED;
	return (NULL);
}

const char	*
ignore(char c)
{
	if (p.altitude == 0)
		return ("Cannot ignore planes on the ground");
	if (p.status == S_IGNORED)
		return ("Already ignored");
	p.status = S_IGNORED;
	return (NULL);
}

int
dir_no(char ch)
{
	int	dir;

	switch (ch) {
	case 'w':	dir = 0;	break;
	case 'e':	dir = 1;	break;
	case 'd':	dir = 2;	break;
	case 'c':	dir = 3;	break;
	case 'x':	dir = 4;	break;
	case 'z':	dir = 5;	break;
	case 'a':	dir = 6;	break;
	case 'q':	dir = 7;	break;
	default:
		dir = -1;
		fprintf(stderr, "bad character in dir_no\n");
		break;
	}
	return (dir);
}
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.11 2006/11/07 03:52:59 deraadt Exp $	*/
d45 8
a52 2
#include "include.h"
#include "pathnames.h"
@


1.11
log
@make delayed turn commands not become immediate when there is a
request to go to the same altitude as already at.  pr 3448
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.10 2004/11/29 08:52:28 jsg Exp $	*/
a43 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)input.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: input.c,v 1.10 2004/11/29 08:52:28 jsg Exp $";
#endif
#endif /* not lint */
@


1.10
log
@ansi. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.9 2003/06/03 03:01:38 millert Exp $	*/
d49 1
a49 1
static char rcsid[] = "$OpenBSD: input.c,v 1.9 2003/06/03 03:01:38 millert Exp $";
d465 2
d474 2
d481 1
a481 1
		p.new_altitude = p.altitude + c - '0';
d484 1
a484 1
		p.new_altitude = p.altitude - (c - '0');
d490 1
a490 1
	if (p.new_altitude < 0)
d492 1
a492 1
	else if (p.new_altitude > 9)
d494 4
@


1.9
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.8 2003/04/06 18:50:36 deraadt Exp $	*/
d49 1
a49 1
static char rcsid[] = "$OpenBSD: input.c,v 1.8 2003/04/06 18:50:36 deraadt Exp $";
d176 1
a176 1
pop()
d191 1
a191 1
rezero()
d204 1
a204 2
push(ruleno, ch)
	int ruleno, ch;
d226 1
a226 1
getcommand()
d285 1
a285 1
noise()
d293 1
a293 1
gettoken()
d309 1
a309 2
setplane(c)
	char c;
d322 1
a322 2
turn(c)
	char c;
d330 1
a330 2
circle(c)
	char c;
d339 1
a339 2
left(c)
	char c;
d349 1
a349 2
right(c)
	char c;
d359 1
a359 2
Left(c)
	char c;
d368 1
a368 2
Right(c)
	char c;
d377 1
a377 2
delayb(c)
	char c;
d426 1
a426 2
beacon(c)
	char c;
d433 1
a433 2
ex_it(c)
	char c;
d440 1
a440 2
airport(c)
	char c;
d447 1
a447 2
climb(c)
	char c;
d454 1
a454 2
descend(c)
	char c;
d461 1
a461 2
setalt(c)
	char c;
d470 1
a470 2
setrelalt(c)
	char c;
d494 1
a494 2
benum(c)
	char c;
d525 1
a525 2
to_dir(c)
	char c;
d532 1
a532 2
rel_dir(c)
	char c;
d556 1
a556 2
mark(c)
	char c;
d567 1
a567 2
unmark(c)
	char c;
d578 1
a578 2
ignore(c)
	char c;
d589 1
a589 2
dir_no(ch)
	char	ch;
@


1.8
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.7 2002/02/16 21:27:08 millert Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d49 1
a49 1
static char rcsid[] = "$OpenBSD: input.c,v 1.7 2002/02/16 21:27:08 millert Exp $";
@


1.7
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.6 2001/08/06 22:59:13 pjanzen Exp $	*/
d53 1
a53 1
static char rcsid[] = "$OpenBSD: input.c,v 1.6 2001/08/06 22:59:13 pjanzen Exp $";
d188 1
a188 1
	strcpy(T_STR, "");
d204 1
a204 1
	strcpy(T_STR, "");
d213 1
a213 1
	(void)sprintf(T_STR, st[T_STATE].rule[ruleno].str, tval);
d227 1
a227 1
	strcpy(T_STR, "");
@


1.6
log
@Nothing but comments after #endif and #else; heko@@iki.fi
@
text
@d1 1
a1 1
/*	$OpenBSD: input.c,v 1.5 1998/09/21 07:36:06 pjanzen Exp $	*/
d53 1
a53 1
static char rcsid[] = "$OpenBSD: input.c,v 1.5 1998/09/21 07:36:06 pjanzen Exp $";
d73 1
a73 1
	const char	*(*func) __P((char));
d234 1
a234 1
	const char	*s, *(*func) __P((char));
@


1.5
log
@Cleanup, partially from NetBSD and jsm28@@cam.ac.uk.  No longer segfaults if
scorefile can't be opened.  New -q quiet option.  Partial man page reformat.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 1
a53 1
static char rcsid[] = "$OpenBSD$";
d55 1
a55 1
#endif not lint
@


1.4
log
@use ICRNL; jsm28@@cam.ac.uk
@
text
@d1 1
d53 1
a53 1
static char rcsid[] = "$NetBSD: input.c,v 1.4 1995/04/27 21:22:24 mycroft Exp $";
d70 4
a73 4
	int	token;
	int	to_state;
	char	*str;
	char	*(*func)();
a98 5
char	*setplane(), *circle(), *left(), *right(), *Left(), *Right(), 
	*beacon(), *ex_it(), *climb(), *descend(), *setalt(), *setrelalt(), 
	*benum(), *to_dir(), *rel_dir(), *delayb(), *mark(), *unmark(),
	*airport(), *turn(), *ignore();

d179 1
d194 1
d207 1
d209 1
d230 1
d234 1
a234 1
	char	*s, *(*func)();
d289 1
d292 2
a293 1
	putchar('\07');
d297 1
d313 1
a313 1
char	*
d315 1
d322 1
a322 1
	bcopy(pp, &p, sizeof (p));
d327 1
a327 1
char	*
d329 1
d336 1
a336 1
char	*
d338 1
d346 1
a346 1
char	*
d348 1
d357 1
a357 1
char	*
d359 1
d363 1
a363 1
	if (p.new_dir > MAXDIR)
d368 1
a368 1
char	*
d370 1
d378 1
a378 1
char	*
d380 1
d383 1
a383 1
	if (p.new_dir > MAXDIR)
d388 1
a388 1
char	*
d390 1
d398 1
a398 1
	xdiff = sp->beacon[c].x - p.xpos;
d400 1
a400 1
	ydiff = sp->beacon[c].y - p.ypos;
d404 4
d414 2
a415 2
			xdiff = sp->beacon[dest_no].x - sp->beacon[c].x;
			ydiff = sp->beacon[dest_no].y - sp->beacon[c].y;
d418 2
a419 2
			xdiff = sp->exit[dest_no].x - sp->beacon[c].x;
			ydiff = sp->exit[dest_no].y - sp->beacon[c].y;
d422 2
a423 2
			xdiff = sp->airport[dest_no].x - sp->beacon[c].x;
			ydiff = sp->airport[dest_no].y - sp->beacon[c].y;
d438 1
a438 1
char	*
d440 1
d446 1
a446 1
char	*
d448 1
d454 1
a454 1
char	*
d456 1
d462 1
a462 1
char	*
d464 1
d470 1
a470 1
char	*
d472 1
d478 1
a478 1
char	*
d480 1
d488 1
a488 1
char	*
d490 1
d513 1
a513 1
char	*
d515 1
d523 2
a524 2
		p.new_dir = DIR_FROM_DXDY(sp->beacon[c].x - p.xpos,
			sp->beacon[c].y - p.ypos);
d529 2
a530 2
		p.new_dir = DIR_FROM_DXDY(sp->exit[c].x - p.xpos,
			sp->exit[c].y - p.ypos);
d535 2
a536 2
		p.new_dir = DIR_FROM_DXDY(sp->airport[c].x - p.xpos,
			sp->airport[c].y - p.ypos);
d545 1
a545 1
char	*
d547 1
d553 1
a553 1
char	*
d555 1
d578 1
a578 1
char	*
d580 1
d590 1
a590 1
char	*
d592 1
d602 1
a602 1
char	*
d604 1
d614 1
d630 1
@


1.3
log
@tabify
@
text
@a62 3
#ifdef SYSV
#define CRTOKEN		'\r'
#endif
a104 3
#ifdef SYSV
			{ CRTOKEN,	-1,	"",		NULL	},
#endif
a135 3
#ifdef SYSV
			{ CRTOKEN,	-1,	"",		NULL	},
#endif
a149 3
#ifdef SYSV
			{ CRTOKEN,	-1,	"",		NULL	},	
#endif
a151 3
#ifdef SYSV
			{ CRTOKEN,	-1,	"",		NULL	},
#endif
@


1.2
log
@toast shell escape code
@
text
@d165 1
a165 1
	            	{ CRTOKEN,	-1,	"",		NULL	},
@


1.1
log
@Initial revision
@
text
@a66 1
#define	SHELLTOKEN	'!'
d311 1
a311 1
	while ((tval = getAChar()) == REDRAWTOKEN || tval == SHELLTOKEN)
a312 48
		if (tval == SHELLTOKEN)
		{
#ifdef BSD
			struct itimerval	itv;
			itv.it_value.tv_sec = 0;
			itv.it_value.tv_usec = 0;
			setitimer(ITIMER_REAL, &itv, NULL);
#endif
#ifdef SYSV
			int aval;
			aval = alarm(0);
#endif
			if (fork() == 0)	/* child */
			{
				char *shell, *base, *getenv(), *strrchr();

				setuid(getuid()); /* turn off setuid bit */
				done_screen();

						 /* run user's favorite shell */
				if ((shell = getenv("SHELL")) != NULL)
				{
					base = strrchr(shell, '/');
					if (base == NULL)
						base = shell;
					else
						base++;
					execl(shell, base, 0);
				}
				else
					execl(_PATH_BSHELL, "sh", 0);

				exit(0);	/* oops */
			}

			wait(0);
			tcsetattr(fileno(stdin), TCSADRAIN, &tty_new);
#ifdef BSD
			itv.it_value.tv_sec = 0;
			itv.it_value.tv_usec = 1;
			itv.it_interval.tv_sec = sp->update_secs;
			itv.it_interval.tv_usec = 0;
			setitimer(ITIMER_REAL, &itv, NULL);
#endif
#ifdef SYSV
			alarm(aval);
#endif
		}
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
