head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.10
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.8
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.4
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.16.0.6
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.16.0.2
	OPENBSD_5_7_BASE:1.16
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	OPENBSD_5_5:1.12.0.20
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.16
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.14
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.12
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.10
	OPENBSD_5_0:1.12.0.8
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.6
	OPENBSD_4_9_BASE:1.12
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	OPENBSD_4_6:1.11.0.16
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.12
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.9.0.6
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.4
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.2
	OPENBSD_3_7_BASE:1.9
	OPENBSD_3_6:1.8.0.6
	OPENBSD_3_6_BASE:1.8
	OPENBSD_3_5:1.8.0.4
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.2
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9:1.3.0.12
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.10
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.8
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.6
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.4
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.2
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2016.01.08.13.40.05;	author tb;	state Exp;
branches;
next	1.18;
commitid	deG8pXu1tXVoNIxq;

1.18
date	2015.12.31.16.50.29;	author mestre;	state Exp;
branches;
next	1.17;
commitid	jnRgo9DYtb9taiXD;

1.17
date	2015.12.15.18.39.50;	author tb;	state Exp;
branches;
next	1.16;
commitid	VWt7g1ywtmZpYYTj;

1.16
date	2014.12.09.05.01.14;	author deraadt;	state Exp;
branches;
next	1.15;
commitid	ca1sANg0WMJouDvh;

1.15
date	2014.12.08.21.56.27;	author deraadt;	state Exp;
branches;
next	1.14;
commitid	fyZyamgf42dtoHOi;

1.14
date	2014.07.13.14.01.04;	author tedu;	state Exp;
branches;
next	1.13;
commitid	635J7yvaFM3NMwyH;

1.13
date	2014.07.13.13.00.40;	author tedu;	state Exp;
branches;
next	1.12;
commitid	RILS5naX1655SI9i;

1.12
date	2009.10.27.23.59.23;	author deraadt;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.31.10.32.30;	author otto;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.27.00.10.14;	author tedu;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.29.08.52.28;	author jsg;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.03.03.01.38;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.08.18.09.28;	author deraadt;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.06.18.50.36;	author deraadt;	state Exp;
branches;
next	1.5;

1.5
date	2003.03.11.04.47.39;	author david;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.06.22.59.13;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	98.09.21.07.36.07;	author pjanzen;	state Exp;
branches;
next	1.2;

1.2
date	97.01.17.07.10.48;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.38;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.38;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.19
log
@add missing 'void'

ok mestre@@
@
text
@/*	$OpenBSD: update.c,v 1.18 2015/12/31 16:50:29 mestre Exp $	*/

/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ed James.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Copyright (c) 1987 by Ed James, UC Berkeley.  All rights reserved.
 *
 * Copy permission is hereby granted provided that this notice is
 * retained on all partial or complete copies.
 *
 * For more info on this and all of my stuff, mail edjames@@berkeley.edu.
 */

#include <stdlib.h>
#include <string.h>

#include "extern.h"

void
setseed(const char *seed)
{
	seeded = 1;
	srandom_deterministic(atol(seed));
}

uint32_t
atcrandom(void)
{
	if (seeded)
		return random();
	else
		return arc4random();
}

uint32_t
atcrandom_uniform(uint32_t upper_bound)
{
	if (seeded)
		return random() % upper_bound;
	else
		return arc4random_uniform(upper_bound);
}

void
update(int dummy)
{
	int	i, dir_diff, unclean;
	PLANE	*pp, *p1, *p2;

	clck++;

	erase_all();

	/* put some planes in the air */
	do {
		unclean = 0;
		for (pp = ground.head; pp != NULL; pp = pp->next) {
			if (pp->new_altitude > 0) {
				delete(&ground, pp);
				append(&air, pp);
				unclean = 1;
				break;
			}
		}
	} while (unclean);

	/* do altitude change and basic movement */
	for (pp = air.head; pp != NULL; pp = pp->next) {
		/* type 0 only move every other turn */
		if (pp->plane_type == 0 && clck & 1)
			continue;

		pp->fuel--;
		if (pp->fuel < 0)
			loser(pp, "ran out of fuel.");

		pp->altitude += SGN(pp->new_altitude - pp->altitude);

		if (!pp->delayd) {
			dir_diff = pp->new_dir - pp->dir;
			/*
			 * Allow for circle commands
			 */
			if (pp->new_dir >= 0 && pp->new_dir < MAXDIR) {
				if (dir_diff > MAXDIR/2)
					dir_diff -= MAXDIR;
				else if (dir_diff < -(MAXDIR/2))
					dir_diff += MAXDIR;
			}
			if (dir_diff > 2)
				dir_diff = 2;
			else if (dir_diff < -2)
				dir_diff = -2;
			pp->dir += dir_diff;
			if (pp->dir >= MAXDIR)
				pp->dir -= MAXDIR;
			else if (pp->dir < 0)
				pp->dir += MAXDIR;
		}
		pp->xpos += displacement[pp->dir].dx;
		pp->ypos += displacement[pp->dir].dy;

		if (pp->delayd && pp->xpos == sp->beacon[pp->delayd_no].x &&
		    pp->ypos == sp->beacon[pp->delayd_no].y) {
			pp->delayd = 0;
			if (pp->status == S_UNMARKED)
				pp->status = S_MARKED;
		}

		switch (pp->dest_type) {
		case T_AIRPORT:
			if (pp->xpos == sp->airport[pp->dest_no].x &&
			    pp->ypos == sp->airport[pp->dest_no].y &&
			    pp->altitude == 0) {
				if (pp->dir != sp->airport[pp->dest_no].dir)
				    loser(pp, "landed in the wrong direction.");
				else {
				    pp->status = S_GONE;
				    continue;
				}
			}
			break;
		case T_EXIT:
			if (pp->xpos == sp->exit[pp->dest_no].x &&
			    pp->ypos == sp->exit[pp->dest_no].y) {
			    	if (pp->altitude != 9)
				    loser(pp, "exited at the wrong altitude.");
				else {
				    pp->status = S_GONE;
				    continue;
				}
			}
			break;
		default:
			loser(pp, "has a bizarre destination, get help!");
		}
		if (pp->altitude > 9)
			/* "this is impossible" */
			loser(pp, "exceeded flight ceiling.");
		if (pp->altitude <= 0) {
			for (i = 0; i < sp->num_airports; i++)
				if (pp->xpos == sp->airport[i].x &&
				    pp->ypos == sp->airport[i].y) {
					if (pp->dest_type == T_AIRPORT)
					    loser(pp, 
						"landed at the wrong airport.");
					else
					    loser(pp, 
						"landed instead of exited.");
				}
			loser(pp, "crashed on the ground.");
		}
		if (pp->xpos < 1 || pp->xpos >= sp->width - 1 ||
		    pp->ypos < 1 || pp->ypos >= sp->height - 1) {
			for (i = 0; i < sp->num_exits; i++)
				if (pp->xpos == sp->exit[i].x &&
				    pp->ypos == sp->exit[i].y) {
					if (pp->dest_type == T_EXIT)
					    loser(pp, 
						"exited via the wrong exit.");
					else
					    loser(pp, 
						"exited instead of landed.");
				}
			loser(pp, "illegally left the flight arena.");
		}
	}

	/*
	 * Traverse the list once, deleting the planes that are gone.
	 */
	for (pp = air.head; pp != NULL; pp = p2) {
		p2 = pp->next;
		if (pp->status == S_GONE) {
			safe_planes++;
			delete(&air, pp);
		}
	}

	draw_all();

	for (p1 = air.head; p1 != NULL; p1 = p1->next)
		for (p2 = p1->next; p2 != NULL; p2 = p2->next)
			if (too_close(p1, p2, 1)) {
				static char	buf[80];

				(void)snprintf(buf, sizeof buf,
				    "collided with plane '%c'.",
				    name(p2));
				loser(p1, buf);
			}
	/*
	 * Check every other update.  Actually, only add on even updates.
	 * Otherwise, prop jobs show up *on* entrance.  Remember that
	 * we don't update props on odd updates.
	 */
	if (atcrandom_uniform(sp->newplane_time) == 0)
		addplane();
}

const char *
command(PLANE *pp)
{
	static char	buf[50], *bp, *comm_start;

	buf[0] = '\0';
	bp = buf;
	(void)snprintf(bp, buf + sizeof buf - bp,
		"%c%d%c%c%d: ", name(pp), pp->altitude, 
		(pp->fuel < LOWFUEL) ? '*' : ' ',
		(pp->dest_type == T_AIRPORT) ? 'A' : 'E', pp->dest_no);

	comm_start = bp = strchr(buf, '\0');
	if (pp->altitude == 0)
		(void)snprintf(bp, buf + sizeof buf - bp,
			"Holding @@ A%d", pp->orig_no);
	else if (pp->new_dir >= MAXDIR || pp->new_dir < 0)
		strlcpy(bp, "Circle", buf + sizeof buf - bp);
	else if (pp->new_dir != pp->dir)
		(void)snprintf(bp, buf + sizeof buf - bp,
			"%d", dir_deg(pp->new_dir));

	bp = strchr(buf, '\0');
	if (pp->delayd)
		(void)snprintf(bp, buf + sizeof buf - bp,
			" @@ B%d", pp->delayd_no);

	bp = strchr(buf, '\0');
	if (*comm_start == '\0' && 
	    (pp->status == S_UNMARKED || pp->status == S_IGNORED))
		strlcpy(bp, "---------", buf + sizeof buf - bp);
	return (buf);
}

char
name(const PLANE *p)
{
	if (p->plane_type == 0)
		return ('A' + p->plane_no);
	else
		return ('a' + p->plane_no);
}

int
number(char l)
{
	if (l >= 'a' && l <= 'z')
		return (l - 'a');
	else if (l >= 'A' && l <= 'Z')
		return (l - 'A');
	else
		return (-1);
}

int
next_plane(void)
{
	static int	last_plane = -1;
	PLANE		*pp;
	int		found, start_plane = last_plane;

	do {
		found = 0;
		last_plane++;
		if (last_plane >= 26)
			last_plane = 0;
		for (pp = air.head; pp != NULL; pp = pp->next)
			if (pp->plane_no == last_plane) {
				found++;
				break;
			}
		if (!found)
			for (pp = ground.head; pp != NULL; pp = pp->next)
				if (pp->plane_no == last_plane) {
					found++;
					break;
				}
	} while (found && last_plane != start_plane);
	if (last_plane == start_plane)
		return (-1);
	return (last_plane);
}

int
addplane(void)
{
	PLANE	p, *pp, *p1;
	int	i, num_starts, close, rnd, rnd2, pnum;

	memset(&p, 0, sizeof (p));

	p.status = S_MARKED;
	p.plane_type = atcrandom_uniform(2);

	num_starts = sp->num_exits + sp->num_airports;
	rnd = atcrandom_uniform(num_starts);

	if (rnd < sp->num_exits) {
		p.dest_type = T_EXIT;
		p.dest_no = rnd;
	} else {
		p.dest_type = T_AIRPORT;
		p.dest_no = rnd - sp->num_exits;
	}

	/* loop until we get a plane not near another */
	for (i = 0; i < num_starts; i++) {
		/* loop till we get a different start point */
		while ((rnd2 = atcrandom_uniform(num_starts)) == rnd)
			;
		if (rnd2 < sp->num_exits) {
			p.orig_type = T_EXIT;
			p.orig_no = rnd2;
			p.xpos = sp->exit[rnd2].x;
			p.ypos = sp->exit[rnd2].y;
			p.new_dir = p.dir = sp->exit[rnd2].dir;
			p.altitude = p.new_altitude = 7;
			close = 0;
			for (p1 = air.head; p1 != NULL; p1 = p1->next)
				if (too_close(p1, &p, 4)) {
					close++;
					break;
				}
			if (close)
				continue;
		} else {
			p.orig_type = T_AIRPORT;
			p.orig_no = rnd2 - sp->num_exits;
			p.xpos = sp->airport[p.orig_no].x;
			p.ypos = sp->airport[p.orig_no].y;
			p.new_dir = p.dir = sp->airport[p.orig_no].dir;
			p.altitude = p.new_altitude = 0;
		}
		p.fuel = sp->width + sp->height;
		break;
	}
	if (i >= num_starts)
		return (-1);
	pnum = next_plane();
	if (pnum < 0)
		return (-1);
	p.plane_no = pnum;

	pp = newplane();
	memcpy(pp, &p, sizeof (p));

	if (pp->orig_type == T_AIRPORT)
		append(&ground, pp);
	else
		append(&air, pp);

	return (pp->dest_type);
}

PLANE	*
findplane(int n)
{
	PLANE	*pp;

	for (pp = air.head; pp != NULL; pp = pp->next)
		if (pp->plane_no == n)
			return (pp);
	for (pp = ground.head; pp != NULL; pp = pp->next)
		if (pp->plane_no == n)
			return (pp);
	return (NULL);
}

int
too_close(const PLANE *p1, const PLANE *p2, int dist)
{
	if (ABS(p1->altitude - p2->altitude) <= dist &&
	    ABS(p1->xpos - p2->xpos) <= dist && ABS(p1->ypos - p2->ypos) <= dist)
		return (1);
	else
		return (0);
}

int
dir_deg(int d)
{
	switch (d) {
	case 0: return (0);
	case 1: return (45);
	case 2: return (90);
	case 3: return (135);
	case 4: return (180);
	case 5: return (225);
	case 6: return (270);
	case 7: return (315);
	default:
		return (-1);
	}
}
@


1.18
log
@Include only needed header files per each source file

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.17 2015/12/15 18:39:50 tb Exp $	*/
d57 1
a57 1
atcrandom()
@


1.17
log
@Replace 'arc4random() % range' by 'arc4random_uniform(range)'.
Do this by introducing atcrandom_uniform(range) which returns
deterministic randomness or good randomness depending on whether
a seed was specified with the -r option.

Diff by Matthew Martin, reviewed by deraadt@@ and me.

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.16 2014/12/09 05:01:14 deraadt Exp $	*/
d44 4
a47 1
#include "include.h"
@


1.16
log
@Do not memorialize cheaters in the high score file.
from pjanzen
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.15 2014/12/08 21:56:27 deraadt Exp $	*/
d62 9
d224 1
a224 1
	if ((atcrandom() % sp->newplane_time) == 0)
d320 1
a320 1
	p.plane_type = atcrandom() % 2;
d323 1
a323 1
	rnd = atcrandom() % num_starts;
d336 1
a336 1
		while ((rnd2 = atcrandom() % num_starts) == rnd)
@


1.15
log
@For now, these games still contain deterministic randomization (for
save / replay modes of operation that have not yet been cleaned up).
OK, I've let the cat out of the bag, now some of you know you can cheat
at them..
ok millert guenther tedu
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.14 2014/07/13 14:01:04 tedu Exp $	*/
a45 1
int seeded;
@


1.14
log
@if not seeded explicitly, use arc4random instead. ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.13 2014/07/13 13:00:40 tedu Exp $	*/
d51 1
a51 1
	srandom(atol(seed));
@


1.13
log
@long live BSD, SYSV is dead!
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.12 2009/10/27 23:59:23 deraadt Exp $	*/
d46 17
d216 1
a216 1
	if ((random() % sp->newplane_time) == 0)
d312 1
a312 1
	p.plane_type = random() % 2;
d315 1
a315 1
	rnd = random() % num_starts;
d328 1
a328 1
		while ((rnd2 = random() % num_starts) == rnd)
@


1.12
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.11 2006/03/31 10:32:30 otto Exp $	*/
a51 5
#ifdef SYSV
	alarm(0);
	signal(SIGALRM, update);
#endif

a200 4

#ifdef SYSV
	alarm(sp->update_secs);
#endif
@


1.11
log
@fix number conversion logic; spotted by pat@@; ok tedu@@ pat@@
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.10 2006/03/27 00:10:14 tedu Exp $	*/
a42 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)update.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: update.c,v 1.10 2006/03/27 00:10:14 tedu Exp $";
#endif
#endif /* not lint */
@


1.10
log
@assorted fixes mostly from coverity via netbsd via jasper adriaanse via tech
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.9 2004/11/29 08:52:28 jsg Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: update.c,v 1.9 2004/11/29 08:52:28 jsg Exp $";
d266 1
a266 3
	if ((l < 'a' && l > 'z') || (l < 'A' && l > 'Z'))
		return (-1);
	else if (l >= 'a' && l <= 'z')
d268 1
a268 1
	else 
d270 2
@


1.9
log
@ansi. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.8 2003/06/03 03:01:38 millert Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: update.c,v 1.8 2003/06/03 03:01:38 millert Exp $";
d266 1
a266 1
	if (l < 'a' && l > 'z' && l < 'A' && l > 'Z')
@


1.8
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.7 2003/04/08 18:09:28 deraadt Exp $	*/
d48 1
a48 1
static char rcsid[] = "$OpenBSD: update.c,v 1.7 2003/04/08 18:09:28 deraadt Exp $";
d55 1
a55 2
update(dummy)
	int dummy;
d221 1
a221 2
command(pp)
	PLANE	*pp;
d255 1
a255 2
name(p)
	const PLANE	*p;
d264 1
a264 2
number(l)
	char l;
d275 1
a275 1
next_plane()
d304 1
a304 1
addplane()
d375 1
a375 2
findplane(n)
	int n;
d389 1
a389 3
too_close(p1, p2, dist)
	const PLANE	*p1, *p2;
	int	dist;
d399 1
a399 2
dir_deg(d)
	int d;
@


1.7
log
@string cleaning; ok pjanzen
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.6 2003/04/06 18:50:36 deraadt Exp $	*/
d18 1
a18 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d48 1
a48 1
static char rcsid[] = "$OpenBSD: update.c,v 1.6 2003/04/06 18:50:36 deraadt Exp $";
@


1.6
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.5 2003/03/11 04:47:39 david Exp $	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD: update.c,v 1.5 2003/03/11 04:47:39 david Exp $";
d243 1
a243 1
		strcpy(bp, "Circle");
d256 1
a256 1
		strcpy(bp, "---------");
@


1.5
log
@double words and spelling fixes
ok pjanzen@@
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.4 2001/08/06 22:59:13 pjanzen Exp $	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD: update.c,v 1.4 2001/08/06 22:59:13 pjanzen Exp $";
d207 3
a209 2
				(void)sprintf(buf, "collided with plane '%c'.",
					name(p2));
d233 2
a234 1
	(void)sprintf(bp, "%c%d%c%c%d: ", name(pp), pp->altitude, 
d240 2
a241 1
		(void)sprintf(bp, "Holding @@ A%d", pp->orig_no);
d245 2
a246 1
		(void)sprintf(bp, "%d", dir_deg(pp->new_dir));
d250 2
a251 1
		(void)sprintf(bp, " @@ B%d", pp->delayd_no);
@


1.4
log
@Nothing but comments after #endif and #else; heko@@iki.fi
@
text
@d1 1
a1 1
/*	$OpenBSD: update.c,v 1.3 1998/09/21 07:36:07 pjanzen Exp $	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD: update.c,v 1.3 1998/09/21 07:36:07 pjanzen Exp $";
d159 1
a159 1
			loser(pp, "exceded flight ceiling.");
@


1.3
log
@Cleanup, partially from NetBSD and jsm28@@cam.ac.uk.  No longer segfaults if
scorefile can't be opened.  New -q quiet option.  Partial man page reformat.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d52 1
a52 1
static char rcsid[] = "$OpenBSD$";
d54 1
a54 1
#endif not lint
@


1.2
log
@r?index -> strr?chr
@
text
@d1 1
a1 1
/*	$NetBSD: update.c,v 1.4 1995/04/27 21:22:26 mycroft Exp $	*/
d52 1
a52 1
static char rcsid[] = "$NetBSD: update.c,v 1.4 1995/04/27 21:22:26 mycroft Exp $";
d58 3
a60 1
update()
d62 2
a63 2
	int	i, dir_diff, mask, unclean;
	PLANE	*pp, *p1, *p2, *p;
d216 1
a216 1
	if ((rand() % sp->newplane_time) == 0)
d224 1
a224 1
char *
d255 1
a255 1
/* char */
d257 1
a257 1
	PLANE	*p;
d265 1
d267 1
d277 1
d306 1
d312 1
a312 1
	bzero(&p, sizeof (p));
d367 1
a367 1
	bcopy(&p, pp, sizeof (p));
d379 1
d392 1
d394 2
a395 1
	PLANE	*p1, *p2;
d404 1
d406 1
@


1.1
log
@Initial revision
@
text
@a226 1
	char	*index();
d234 1
a234 1
	comm_start = bp = index(buf, '\0');
d242 1
a242 1
	bp = index(buf, '\0');
d246 1
a246 1
	bp = index(buf, '\0');
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
