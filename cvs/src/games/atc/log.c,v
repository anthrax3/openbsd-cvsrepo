head	1.24;
access;
symbols
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.19.0.6
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.2
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.18.0.4
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.17.0.20
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.16
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.14
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.17.0.12
	OPENBSD_5_2_BASE:1.17
	OPENBSD_5_1_BASE:1.17
	OPENBSD_5_1:1.17.0.10
	OPENBSD_5_0:1.17.0.8
	OPENBSD_5_0_BASE:1.17
	OPENBSD_4_9:1.17.0.6
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.17.0.4
	OPENBSD_4_8_BASE:1.17
	OPENBSD_4_7:1.17.0.2
	OPENBSD_4_7_BASE:1.17
	OPENBSD_4_6:1.16.0.10
	OPENBSD_4_6_BASE:1.16
	OPENBSD_4_5:1.16.0.6
	OPENBSD_4_5_BASE:1.16
	OPENBSD_4_4:1.16.0.4
	OPENBSD_4_4_BASE:1.16
	OPENBSD_4_3:1.16.0.2
	OPENBSD_4_3_BASE:1.16
	OPENBSD_4_2:1.15.0.12
	OPENBSD_4_2_BASE:1.15
	OPENBSD_4_1:1.15.0.10
	OPENBSD_4_1_BASE:1.15
	OPENBSD_4_0:1.15.0.8
	OPENBSD_4_0_BASE:1.15
	OPENBSD_3_9:1.15.0.6
	OPENBSD_3_9_BASE:1.15
	OPENBSD_3_8:1.15.0.4
	OPENBSD_3_8_BASE:1.15
	OPENBSD_3_7:1.15.0.2
	OPENBSD_3_7_BASE:1.15
	OPENBSD_3_6:1.14.0.4
	OPENBSD_3_6_BASE:1.14
	OPENBSD_3_5:1.14.0.2
	OPENBSD_3_5_BASE:1.14
	OPENBSD_3_4:1.12.0.2
	OPENBSD_3_4_BASE:1.12
	OPENBSD_3_3:1.10.0.4
	OPENBSD_3_3_BASE:1.10
	OPENBSD_3_2:1.10.0.2
	OPENBSD_3_2_BASE:1.10
	OPENBSD_3_1:1.9.0.4
	OPENBSD_3_1_BASE:1.9
	OPENBSD_3_0:1.9.0.2
	OPENBSD_3_0_BASE:1.9
	OPENBSD_2_9:1.8.0.2
	OPENBSD_2_9_BASE:1.8
	OPENBSD_2_8:1.6.0.6
	OPENBSD_2_8_BASE:1.6
	OPENBSD_2_7:1.6.0.4
	OPENBSD_2_7_BASE:1.6
	OPENBSD_2_6:1.6.0.2
	OPENBSD_2_6_BASE:1.6
	OPENBSD_2_5:1.5.0.4
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.2
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.4.0.4
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.2
	OPENBSD_2_2_BASE:1.4
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.24
date	2017.01.20.00.50.16;	author krw;	state Exp;
branches;
next	1.23;
commitid	XVriuL4IoRZx1QfG;

1.23
date	2016.09.11.14.21.17;	author tb;	state Exp;
branches;
next	1.22;
commitid	vQliJ9M8LCn9g8k6;

1.22
date	2016.03.16.15.00.35;	author mestre;	state Exp;
branches;
next	1.21;
commitid	idQfhcm2r53iTZ8v;

1.21
date	2015.12.31.16.50.29;	author mestre;	state Exp;
branches;
next	1.20;
commitid	jnRgo9DYtb9taiXD;

1.20
date	2015.11.29.15.23.38;	author tb;	state Exp;
branches;
next	1.19;
commitid	ihEIvORWc0RrRk93;

1.19
date	2014.12.09.05.01.14;	author deraadt;	state Exp;
branches;
next	1.18;
commitid	ca1sANg0WMJouDvh;

1.18
date	2014.07.13.13.00.40;	author tedu;	state Exp;
branches;
next	1.17;
commitid	RILS5naX1655SI9i;

1.17
date	2009.10.27.23.59.23;	author deraadt;	state Exp;
branches;
next	1.16;

1.16
date	2007.11.06.10.22.29;	author chl;	state Exp;
branches;
next	1.15;

1.15
date	2004.11.29.08.52.28;	author jsg;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.26.15.52.16;	author deraadt;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.26.11.20.21;	author avsm;	state Exp;
branches;
next	1.12;

1.12
date	2003.06.03.03.01.38;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.06.18.50.36;	author deraadt;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.23.03.01.12;	author deraadt;	state Exp;
branches;
next	1.9;

1.9
date	2001.08.06.22.59.13;	author pjanzen;	state Exp;
branches;
next	1.8;

1.8
date	2001.02.04.13.06.20;	author pjanzen;	state Exp;
branches;
next	1.7;

1.7
date	2001.02.04.02.15.28;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	99.09.01.00.27.08;	author pjanzen;	state Exp;
branches;
next	1.5;

1.5
date	98.09.21.07.36.06;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	97.06.18.19.03.07;	author kstailey;	state Exp;
branches;
next	1.3;

1.3
date	97.06.18.18.32.44;	author kstailey;	state Exp;
branches;
next	1.2;

1.2
date	97.01.17.07.10.46;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.48.37;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.48.37;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Nuke some excess whitespace.
@
text
@/*	$OpenBSD: log.c,v 1.23 2016/09/11 14:21:17 tb Exp $	*/
/*	$NetBSD: log.c,v 1.3 1995/03/21 15:04:21 cgd Exp $	*/

/*-
 * Copyright (c) 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Ed James.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

/*
 * Copyright (c) 1987 by Ed James, UC Berkeley.  All rights reserved.
 *
 * Copy permission is hereby granted provided that this notice is
 * retained on all partial or complete copies.
 *
 * For more info on this and all of my stuff, mail edjames@@berkeley.edu.
 */

#include <sys/stat.h>
#include <sys/types.h>

#include <err.h>
#include <errno.h>
#include <fcntl.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#include "extern.h"
#include "pathnames.h"

static FILE *score_fp;

int
compar(const void *va, const void *vb)
{
	const SCORE *a, *b;

	a = (const SCORE *)va;
	b = (const SCORE *)vb;
	if (b->planes == a->planes)
		return (b->time - a->time);
	else
		return (b->planes - a->planes);
}

#define SECAMIN		60
#define MINAHOUR	60
#define HOURADAY	24
#define SECAHOUR	(SECAMIN * MINAHOUR)
#define SECADAY		(SECAHOUR * HOURADAY)
#define DAY(t)		((t) / SECADAY)
#define HOUR(t)		(((t) % SECADAY) / SECAHOUR)
#define MINUTES(t)		(((t) % SECAHOUR) / SECAMIN)
#define SEC(t)		((t) % SECAMIN)

const char	*
timestr(int t)
{
	static char	s[80];

	if (DAY(t) > 0)
		(void)snprintf(s, sizeof s, "%dd+%02dhrs", DAY(t), HOUR(t));
	else if (HOUR(t) > 0)
		(void)snprintf(s, sizeof s, "%d:%02d:%02d",
		    HOUR(t), MINUTES(t), SEC(t));
	else if (MINUTES(t) > 0)
		(void)snprintf(s, sizeof s, "%d:%02d", MINUTES(t), SEC(t));
	else if (SEC(t) > 0)
		(void)snprintf(s, sizeof s, ":%02d", SEC(t));
	else
		*s = '\0';

	return (s);
}

int
open_score_file(void)
{
	mode_t old_mode;
	char *home;
	char scorefile[PATH_MAX];
	int ret;
	int score_fd;

	home = getenv("HOME");
	if (home == NULL || *home == '\0')
		err(1, "getenv");
	ret = snprintf(scorefile, sizeof(scorefile), "%s/%s", home,
	    ".atc.scores");
	if (ret < 0 || ret >= PATH_MAX)
		errc(1, ENAMETOOLONG, "%s/%s", home, ".atc.scores");

	old_mode = umask(0);
	score_fd = open(scorefile, O_CREAT|O_RDWR, 0644);
	if (score_fd < 0)
		err(1, "open");
	/*
	 * This is done to take advantage of stdio, while still
	 * allowing a O_CREAT during the open(2) of the log file.
	 */
	score_fp = fdopen(score_fd, "r+");
	if (score_fp == NULL)
		err(1, "fdopen");
	umask(old_mode);
	return (0);
}

int
log_score(int list_em)
{
	int		i, num_scores = 0, good, changed = 0, found = 0;
	const char	*name;
	char		*cp;
	char		scanstr[50];
	SCORE		score[NUM_SCORES], thisscore;

	if (score_fp == NULL)
		return (-1);
	if (flock(fileno(score_fp), LOCK_EX) < 0)
		err(1, "flock");
	snprintf(scanstr, 50, "%%%zus %%%zus %%d %%d %%d", sizeof(score[0].name)-1,
	    sizeof(score[0].game)-1);
	for (;;) {
		good = fscanf(score_fp, scanstr,
			score[num_scores].name,
			score[num_scores].game,
			&score[num_scores].planes,
			&score[num_scores].time,
			&score[num_scores].real_time);
		if (good != 5 || ++num_scores >= NUM_SCORES)
			break;
	}
	if (!test_mode && !list_em) {
		name = getenv("LOGNAME");
		if (name == NULL || *name == '\0')
			name = getenv("USER");
		if (name == NULL || *name == '\0')
			name = getlogin();
		if (name == NULL || *name == '\0')
			name = "  ???";
		strlcpy(thisscore.name, name, sizeof(thisscore.name));

		cp = strrchr(file, '/');
		if (cp == NULL) {
			warnx("log: where's the '/' in %s?", file);
			return (-1);
		}
		cp++;
		strlcpy(thisscore.game, cp, sizeof(thisscore.game));

		thisscore.time = clck;
		thisscore.planes = safe_planes;
		thisscore.real_time = time(0) - start_time;

		for (i = 0; i < num_scores; i++) {
			if (strcmp(thisscore.name, score[i].name) == 0 &&
			    strcmp(thisscore.game, score[i].game) == 0) {
				if (thisscore.time > score[i].time) {
					score[i].time = thisscore.time;
					score[i].planes = thisscore.planes;
					score[i].real_time =
						thisscore.real_time;
					changed++;
				}
				found++;
				break;
			}
		}
		if (!found) {
			for (i = 0; i < num_scores; i++) {
				if (thisscore.time > score[i].time) {
					if (num_scores < NUM_SCORES)
						num_scores++;
					memcpy(&score[num_scores - 1],
						&score[i],
						sizeof (score[i]));
					memcpy(&score[i], &thisscore,
						sizeof (score[i]));
					changed++;
					break;
				}
			}
		}
		if (!found && !changed && num_scores < NUM_SCORES) {
			memcpy(&score[num_scores], &thisscore,
				sizeof (score[num_scores]));
			num_scores++;
			changed++;
		}

		if (seeded) {
			puts("The high score list does not include '-r' seeded games.");
		} else if (changed) {
			if (found)
				puts("You beat your previous score!");
			else
				puts("You made the top players list!");
			qsort(score, num_scores, sizeof (*score), compar);
			if (fseek(score_fp, 0L, SEEK_SET) == -1)
				err(1, "fseek");
			for (i = 0; i < num_scores; i++)
				fprintf(score_fp, "%s %s %d %d %d\n",
					score[i].name,
					score[i].game, score[i].planes,
					score[i].time, score[i].real_time);
		} else {
			if (found)
				puts("You didn't beat your previous score.");
			else
				puts("You didn't make the top players list.");
		}
		putchar('\n');
	}
	flock(fileno(score_fp), LOCK_UN);
	fflush(score_fp);
	fsync(fileno(score_fp));
	if (fseek(score_fp, 0L, SEEK_SET) == -1)
		err(1, "fseek");
	printf("%2s:  %-31s  %-18s  %4s  %9s  %4s\n", "#", "name",
		"game", "time", "real time", "safe");
	puts("-------------------------------------------------------------------------------");
	for (i = 0; i < num_scores; i++) {
		printf("%2d:  %-31s  %-18s  %4d  %9s  %4d\n", i + 1,
			score[i].name, score[i].game,
			score[i].time, timestr(score[i].real_time),
			score[i].planes);
	}
	putchar('\n');
	return (0);
}

void
log_score_quit(int dummy)
{
	(void)log_score(0);
	exit(0);
}
@


1.23
log
@Callers of time(3) should #include <time.h>.

ok deraadt
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.22 2016/03/16 15:00:35 mestre Exp $	*/
d126 1
a126 1
	 * This is done to take advantage of stdio, while still 
d153 1
a153 1
			score[num_scores].name, 
d155 1
a155 1
			&score[num_scores].planes, 
@


1.22
log
@Prefer fseek(3) over rewind(3) since the latter although it also calls fseek
then additionally it calls clearerr(3) deliberately but we want to catch any
error that may happen and this way we couldn't catch it

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.21 2015/12/31 16:50:29 mestre Exp $	*/
d53 1
@


1.21
log
@Include only needed header files per each source file

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.20 2015/11/29 15:23:38 tb Exp $	*/
d226 2
a227 1
			rewind(score_fp);
d244 2
a245 1
	rewind(score_fp);
@


1.20
log
@Add pledge support and move score file to $HOME.

For high score entries use the same logic as in snake(6) and tetris(6):
Try LOGNAME then USER then getlogin(2) and fall back to ???.
For variety, atc(6) uses flock(2), so add a "flock" promise to the usual
"stdio rpath rpath cpath tty" for games.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.19 2014/12/09 05:01:14 deraadt Exp $	*/
d45 11
a55 1
#include "include.h"
@


1.19
log
@Do not memorialize cheaters in the high score file.
from pjanzen
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.18 2014/07/13 13:00:40 tedu Exp $	*/
d97 3
d102 8
d111 3
a113 5
	score_fd = open(_PATH_SCORE, O_CREAT|O_RDWR, 0664);
	if (score_fd < 0) {
		perror(_PATH_SCORE);
		return (-1);
	}
d119 2
a120 4
	if (score_fp == NULL) {
		perror(_PATH_SCORE);
		return (-1);
	}
d129 1
a129 1
	struct passwd	*pw;
d136 2
a137 4
	if (flock(fileno(score_fp), LOCK_EX) < 0) {
		perror("flock");
		return (-1);
	}
d151 8
a158 7
		if ((pw = (struct passwd *) getpwuid(getuid())) == NULL) {
			fprintf(stderr, 
				"getpwuid failed for uid %u.  Who are you?\n",
				getuid());
			return (-1);
		}
		strlcpy(thisscore.name, pw->pw_name, sizeof(thisscore.name));
@


1.18
log
@long live BSD, SYSV is dead!
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.17 2009/10/27 23:59:23 deraadt Exp $	*/
d202 3
a204 1
		if (changed) {
@


1.17
log
@rcsid[] and sccsid[] and copyright[] are essentially unmaintained (and
unmaintainable).  these days, people use source.  these id's do not provide
any benefit, and do hurt the small install media
(the 33,000 line diff is essentially mechanical)
ok with the idea millert, ok dms
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.16 2007/11/06 10:22:29 chl Exp $	*/
d129 1
a129 7
#ifdef BSD
	if (flock(fileno(score_fp), LOCK_EX) < 0)
#endif
#ifdef SYSV
	while (lockf(fileno(score_fp), F_LOCK, 1) < 0)
#endif
	{
a221 1
#ifdef BSD
a222 7
#endif
#ifdef SYSV
	/* lock will evaporate upon close */
#endif
#if 0
	fclose(score_fp);
#else
a225 1
#endif
@


1.16
log
@fix format string

ok ray@@ gilles@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.15 2004/11/29 08:52:28 jsg Exp $	*/
a43 8

#ifndef lint
#if 0
static char sccsid[] = "@@(#)log.c	8.1 (Berkeley) 5/31/93";
#else
static char rcsid[] = "$OpenBSD: log.c,v 1.15 2004/11/29 08:52:28 jsg Exp $";
#endif
#endif /* not lint */
@


1.15
log
@ansi. ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.14 2003/09/26 15:52:16 deraadt Exp $	*/
d49 1
a49 1
static char rcsid[] = "$OpenBSD: log.c,v 1.14 2003/09/26 15:52:16 deraadt Exp $";
d147 1
a147 1
	snprintf(scanstr, 50, "%%%ds %%%ds %%d %%d %%d", sizeof(score[0].name)-1,
@


1.14
log
@correct scanf sizes; anil aaron ok
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.13 2003/09/26 11:20:21 avsm Exp $	*/
d49 1
a49 1
static char rcsid[] = "$OpenBSD: log.c,v 1.13 2003/09/26 11:20:21 avsm Exp $";
d59 1
a59 2
compar(va, vb)
	const void *va, *vb;
d82 1
a82 2
timestr(t)
	int t;
d102 1
a102 1
open_score_file()
d127 1
a127 2
log_score(list_em)
	int list_em;
d263 1
a263 2
log_score_quit(dummy)
	int dummy;
@


1.13
log
@off by one in fscanf; from aaron@@
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.12 2003/06/03 03:01:38 millert Exp $	*/
d49 1
a49 1
static char rcsid[] = "$OpenBSD: log.c,v 1.12 2003/06/03 03:01:38 millert Exp $";
d150 2
a151 1
	snprintf(scanstr, 50, "%%%ds %%255s %%d %%d %%d", MAXLOGNAME);
@


1.12
log
@Remove the advertising clause in the UCB license which Berkeley
rescinded 22 July 1999.  Proofed by myself and Theo.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.11 2003/04/06 18:50:36 deraadt Exp $	*/
d49 1
a49 1
static char rcsid[] = "$OpenBSD: log.c,v 1.11 2003/04/06 18:50:36 deraadt Exp $";
d150 1
a150 1
	snprintf(scanstr, 50, "%%%ds %%256s %%d %%d %%d", MAXLOGNAME);
@


1.11
log
@2451 lines of strdup/sprintf/strcpy whacking.  mostly ok'd by pjanzen
already, but he may have later changes to make still.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.10 2002/06/23 03:01:12 deraadt Exp $	*/
d19 1
a19 5
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
d49 1
a49 1
static char rcsid[] = "$OpenBSD: log.c,v 1.10 2002/06/23 03:01:12 deraadt Exp $";
@


1.10
log
@uid_t and gid_t are unsigned
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.9 2001/08/06 22:59:13 pjanzen Exp $	*/
d53 1
a53 1
static char rcsid[] = "$OpenBSD: log.c,v 1.9 2001/08/06 22:59:13 pjanzen Exp $";
d93 1
a93 1
		(void)sprintf(s, "%dd+%02dhrs", DAY(t), HOUR(t));
d95 2
a96 1
		(void)sprintf(s, "%d:%02d:%02d", HOUR(t), MINUTES(t), SEC(t));
d98 1
a98 1
		(void)sprintf(s, "%d:%02d", MINUTES(t), SEC(t));
d100 1
a100 1
		(void)sprintf(s, ":%02d", SEC(t));
@


1.9
log
@Nothing but comments after #endif and #else; heko@@iki.fi
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.8 2001/02/04 13:06:20 pjanzen Exp $	*/
d53 1
a53 1
static char rcsid[] = "$OpenBSD: log.c,v 1.8 2001/02/04 13:06:20 pjanzen Exp $";
d167 1
a167 1
				"getpwuid failed for uid %d.  Who are you?\n",
@


1.8
log
@Be a little more careful with scanf() on the score file
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.7 2001/02/04 02:15:28 pjanzen Exp $	*/
d53 1
a53 1
static char rcsid[] = "$OpenBSD: log.c,v 1.7 2001/02/04 02:15:28 pjanzen Exp $";
d55 1
a55 1
#endif not lint
@


1.7
log
@Tidying:  change a constant to a #define, stop logging hostnames with the
score, use strlcpy(), and make it work with long usernames.
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.6 1999/09/01 00:27:08 pjanzen Exp $	*/
d53 1
a53 1
static char rcsid[] = "$OpenBSD: log.c,v 1.6 1999/09/01 00:27:08 pjanzen Exp $";
d138 1
d153 1
d155 1
a155 1
		good = fscanf(score_fp, "%s %s %d %d %d",
@


1.6
log
@Make sure screen is big enough for the selected game; also a little tidying
@
text
@d1 1
a1 1
/*	$OpenBSD: log.c,v 1.5 1998/09/21 07:36:06 pjanzen Exp $	*/
d53 1
a53 1
static char rcsid[] = "$OpenBSD: log.c,v 1.5 1998/09/21 07:36:06 pjanzen Exp $";
d83 1
a83 1
#define MIN(t)		(((t) % SECAHOUR) / SECAMIN)
d95 3
a97 3
		(void)sprintf(s, "%d:%02d:%02d", HOUR(t), MIN(t), SEC(t));
	else if (MIN(t) > 0)
		(void)sprintf(s, "%d:%02d", MIN(t), SEC(t));
d133 1
d138 1
a138 2
	SCORE		score[100], thisscore;
	struct utsname	name;
d153 1
a153 1
		good = fscanf(score_fp, "%s %s %s %d %d %d",
a154 1
			score[num_scores].host, 
d159 1
a159 1
		if (good != 6 || ++num_scores >= NUM_SCORES)
d169 1
a169 3
		strcpy(thisscore.name, pw->pw_name);
		uname(&name);
		strcpy(thisscore.host, name.nodename);
d173 1
a173 1
			fprintf(stderr, "log: where's the '/' in %s?\n", file);
d177 1
a177 1
		strcpy(thisscore.game, cp);
a184 1
			    strcmp(thisscore.host, score[i].host) == 0 &&
d227 2
a228 2
				fprintf(score_fp, "%s %s %s %d %d %d\n",
					score[i].name, score[i].host, 
d252 2
a253 2
	printf("%2s:  %-8s  %-8s  %-18s  %4s  %9s  %4s\n", "#", "name", "host", 
		"game", "time", "real time", "planes safe");
d256 2
a257 5
		cp = strchr(score[i].host, '.');
		if (cp != NULL)
			*cp = '\0';
		printf("%2d:  %-8s  %-8s  %-18s  %4d  %9s  %4d\n", i + 1,
			score[i].name, score[i].host, score[i].game,
@


1.5
log
@Cleanup, partially from NetBSD and jsm28@@cam.ac.uk.  No longer segfaults if
scorefile can't be opened.  New -q quiet option.  Partial man page reformat.
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d53 1
a53 1
static char rcsid[] = "$OpenBSD$";
d68 2
a69 2
	a = (SCORE *)va;
	b = (SCORE *)vb;
@


1.4
log
@use uname(3) not gethostname(3); removes some SYSV conditional code
@
text
@d1 1
d53 1
a53 1
static char rcsid[] = "$NetBSD: log.c,v 1.3 1995/03/21 15:04:21 cgd Exp $";
d62 3
a64 2
compar(a, b)
	SCORE	*a, *b;
d66 4
d86 1
a86 1
char	*
d88 1
d106 1
d128 1
d131 1
d140 2
d206 2
a207 2
					bcopy(&score[i],
						&score[num_scores - 1], 
d209 1
a209 1
					bcopy(&thisscore, &score[i],
d217 1
a217 1
			bcopy(&thisscore, &score[num_scores], 
d270 8
@


1.3
log
@fix highscore file
@
text
@a127 1
#ifdef SYSV
a128 1
#endif
a158 7
#ifdef BSD
		if (gethostname(thisscore.host, sizeof (thisscore.host)) < 0) {
			perror("gethostname");
			return (-1);
		}
#endif
#ifdef SYSV
d160 1
a160 2
		strcpy(thisscore.host, name.sysname);
#endif
@


1.2
log
@r?index -> strr?chr
@
text
@d59 2
d99 1
a99 1
log_score(list_em)
d101 2
a102 8
	register int	i, fd, num_scores = 0, good, changed = 0, found = 0;
	struct passwd	*pw;
	FILE		*fp;
	char		*cp;
	SCORE		score[100], thisscore;
#ifdef SYSV
	struct utsname	name;
#endif
d104 3
a106 3
	umask(0);
	fd = open(_PATH_SCORE, O_CREAT|O_RDWR, 0644);
	if (fd < 0) {
d114 2
a115 2
	fp = fdopen(fd, "r+");
	if (fp == NULL) {
d119 13
d133 1
a133 1
	if (flock(fileno(fp), LOCK_EX) < 0)
d136 1
a136 1
	while (lockf(fileno(fp), F_LOCK, 1) < 0)
d143 1
a143 1
		good = fscanf(fp, "%s %s %s %d %d %d",
d227 1
a227 1
			rewind(fp);
d229 1
a229 1
				fprintf(fp, "%s %s %s %d %d %d\n",
d242 1
a242 1
	flock(fileno(fp), LOCK_UN);
d247 7
a253 1
	fclose(fp);
@


1.1
log
@Initial revision
@
text
@d102 1
a102 1
	char		*cp, *index(), *rindex();
d163 1
a163 1
		cp = rindex(file, '/');
d243 1
a243 1
		cp = index(score[i].host, '.');
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
