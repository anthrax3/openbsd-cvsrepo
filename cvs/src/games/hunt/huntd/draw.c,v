head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.2
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.7.0.52
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.44
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.48
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.46
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.42
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.40
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.38
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.36
	OPENBSD_5_0:1.7.0.34
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.32
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.30
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.26
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.28
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.24
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.22
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.20
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.18
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.16
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.14
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.12
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.10
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.8
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.7.0.6
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.7.0.4
	OPENBSD_3_5_BASE:1.7
	OPENBSD_3_4:1.7.0.2
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.6.0.6
	OPENBSD_3_3_BASE:1.6
	OPENBSD_3_2:1.6.0.4
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.2
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	OPENBSD_2_9:1.4.0.2
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	initial:1.1.1.1
	hunt:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2017.01.21.08.22.57;	author krw;	state Exp;
branches;
next	1.10;
commitid	slqvWeiHNc6j5Mv6;

1.10
date	2016.08.27.02.06.40;	author guenther;	state Exp;
branches;
next	1.9;
commitid	HajZYsKX8810aMqL;

1.9
date	2016.01.07.21.37.53;	author mestre;	state Exp;
branches;
next	1.8;
commitid	OXn0Z5fMODgNmJpo;

1.8
date	2016.01.07.21.29.31;	author mestre;	state Exp;
branches;
next	1.7;
commitid	AgYVDd64zIiNi3fx;

1.7
date	2003.06.11.08.45.33;	author pjanzen;	state Exp;
branches;
next	1.6;

1.6
date	2002.02.16.21.27.10;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.19.15.19.45;	author pjanzen;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.13.11.55.10;	author pjanzen;	state Exp;
branches;
next	1.3;

1.3
date	99.01.29.07.30.35;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.01.21.05.47.40;	author d;	state Exp;
branches;
next	1.1;

1.1
date	99.01.21.05.33.38;	author d;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.01.21.05.33.38;	author d;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Nuke whitespace foolish enough to expose itself during the great
"warning:" rectification.
@
text
@/*	$OpenBSD: draw.c,v 1.10 2016/08/27 02:06:40 guenther Exp $	*/
/*	$NetBSD: draw.c,v 1.2 1997/10/10 16:33:04 lukem Exp $	*/
/*
 * Copyright (c) 1983-2003, Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * + Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * + Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in the
 *   documentation and/or other materials provided with the distribution.
 * + Neither the name of the University of California, San Francisco nor
 *   the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written
 *   permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <sys/select.h>
#include <string.h>

#include "conf.h"
#include "hunt.h"
#include "server.h"

static char	translate(char);
static int	player_sym(PLAYER *, int, int);
static void	drawstatus(PLAYER *);
static void	see(PLAYER *, int);

/*
 * drawmaze:
 *	Draw the entire maze on a player's screen.
 */
void
drawmaze(PLAYER *pp)
{
	int	x;
	char	*sp;
	int	y;
	char	*endp;

	/* Clear the client's screen: */
	clrscr(pp);
	/* Draw the top row of the maze: */
	outstr(pp, pp->p_maze[0], WIDTH);
	for (y = 1; y < HEIGHT - 1; y++) {
		endp = &pp->p_maze[y][WIDTH];
		for (x = 0, sp = pp->p_maze[y]; sp < endp; x++, sp++)
			if (*sp != SPACE) {
				cgoto(pp, y, x);
				/* Draw the player as themselves */
				if (pp->p_x == x && pp->p_y == y)
					outch(pp, translate(*sp));
				/* Possibly draw other players as team nrs */
				else if (is_player(*sp))
					outch(pp, player_sym(pp, y, x));
				else
					outch(pp, *sp);
			}
	}
	/* Draw the last row of the maze: */
	cgoto(pp, HEIGHT - 1, 0);
	outstr(pp, pp->p_maze[HEIGHT - 1], WIDTH);
	drawstatus(pp);
}

/*
 * drawstatus - put up the status lines (this assumes the screen
 *		size is 80x24 with the maze being 64x24)
 */
static void
drawstatus(PLAYER *pp)
{
	int	i;
	PLAYER	*np;

	outyx(pp, STAT_AMMO_ROW, STAT_LABEL_COL, "Ammo:");
	ammo_update(pp);

	outyx(pp, STAT_GUN_ROW,  STAT_LABEL_COL, "Gun:");
	outyx(pp, STAT_GUN_ROW,  STAT_VALUE_COL, "%3s",
		(pp->p_ncshot < conf_maxncshot) ? "ok" : "");

	outyx(pp, STAT_DAM_ROW,  STAT_LABEL_COL, "Damage:");
	outyx(pp, STAT_DAM_ROW,  STAT_VALUE_COL, "%2d/%2d",
		pp->p_damage, pp->p_damcap);

	outyx(pp, STAT_KILL_ROW, STAT_LABEL_COL, "Kills:");
	outyx(pp, STAT_KILL_ROW, STAT_VALUE_COL, "%3d",
		(pp->p_damcap - conf_maxdam) / 2);

	outyx(pp, STAT_PLAY_ROW, STAT_LABEL_COL, "Player:");
	for (i = STAT_PLAY_ROW + 1, np = Player; np < End_player; np++, i++) {
		outyx(pp, i, STAT_NAME_COL, "%5.2f%c%-10.10s %c",
			np->p_ident->i_score, stat_char(np),
			np->p_ident->i_name, np->p_ident->i_team);
	}

	outyx(pp, STAT_MON_ROW, STAT_LABEL_COL, "Monitor:");
	for (i = STAT_MON_ROW + 1, np = Monitor; np < End_monitor; np++, i++) {
		outyx(pp, i++, STAT_NAME_COL, "%5.5s %-10.10s %c",
			" ", np->p_ident->i_name, np->p_ident->i_team);
	}
}

/*
 * look
 *	check and update the visible area around the player
 */
void
look(PLAYER *pp)
{
	int	x, y;

	x = pp->p_x;
	y = pp->p_y;

	/*
	 * The player is aware of all objects immediately adjacent to
	 * their position:
	 */
	check(pp, y - 1, x - 1);
	check(pp, y - 1, x    );
	check(pp, y - 1, x + 1);
	check(pp, y    , x - 1);
	check(pp, y    , x    );
	check(pp, y    , x + 1);
	check(pp, y + 1, x - 1);
	check(pp, y + 1, x    );
	check(pp, y + 1, x + 1);

	switch (pp->p_face) {
	  /* The player can see down corridors in directions except behind: */
	  case LEFTS:
		see(pp, LEFTS);
		see(pp, ABOVE);
		see(pp, BELOW);
		break;
	  case RIGHT:
		see(pp, RIGHT);
		see(pp, ABOVE);
		see(pp, BELOW);
		break;
	  case ABOVE:
		see(pp, ABOVE);
		see(pp, LEFTS);
		see(pp, RIGHT);
		break;
	  case BELOW:
		see(pp, BELOW);
		see(pp, LEFTS);
		see(pp, RIGHT);
		break;
	  /* But they don't see too far when they are flying about: */
	  case FLYER:
		break;
	}

	/* Move the cursor back over the player: */
	cgoto(pp, y, x);
}

/*
 * see
 *	Look down a corridor, or towards an open space. This
 *	is a simulation of visibility from the player's perspective.
 */
static void
see(PLAYER *pp, int face)
{
	char	*sp;
	int	y, x;

	/* Start from the player's position: */
	x = pp->p_x;
	y = pp->p_y;

	#define seewalk(dx, dy)						\
		x += (dx);						\
		y += (dy);						\
		sp = &Maze[y][x];					\
		while (See_over[(int)*sp]) {				\
			x += (dx);					\
			y += (dy);					\
			sp += ((dx) + (dy) * sizeof Maze[0]);		\
			check(pp, y + dx, x + dy);			\
			check(pp, y, x);				\
			check(pp, y - dx, x - dy);			\
		}

	switch (face) {
	  case LEFTS:
		seewalk(-1, 0); break;
	  case RIGHT:
		seewalk(1, 0); break;
	  case ABOVE:
		seewalk(0, -1); break;
	  case BELOW:
		seewalk(0, 1); break;
	}
}

/*
 * check
 *	The player is aware of a cell in the maze.
 *	Ensure it is shown properly on their screen.
 */
void
check(PLAYER *pp, int y, int x)
{
	int	index;
	int	ch;
	PLAYER	*rpp;

	if (pp == ALL_PLAYERS) {
		for (pp = Player; pp < End_player; pp++)
			check(pp, y, x);
		for (pp = Monitor; pp < End_monitor; pp++)
			check(pp, y, x);
		return;
	}

	index = y * sizeof Maze[0] + x;
	ch = ((char *) Maze)[index];
	if (ch != ((char *) pp->p_maze)[index]) {
		rpp = pp;
		cgoto(rpp, y, x);
		if (x == rpp->p_x && y == rpp->p_y)
			outch(rpp, translate(ch));
		else if (is_player(ch))
			outch(rpp, player_sym(rpp, y, x));
		else
			outch(rpp, ch);
		((char *) rpp->p_maze)[index] = ch;
	}
}

/*
 * showstat
 *	Update the status of a player on everyone's screen
 */
void
showstat(PLAYER *pp)
{

	outyx(ALL_PLAYERS,
		STAT_PLAY_ROW + 1 + (pp - Player), STAT_SCAN_COL,
		"%c", stat_char(pp));
}

/*
 * drawplayer:
 *	Draw the player on the screen and show him to everyone who's scanning
 *	unless he is cloaked.
 *	The 'draw' flag when false, causes the 'saved under' character to
 *	be drawn instead of the player; effectively un-drawing the player.
 */
void
drawplayer(PLAYER *pp, FLAG draw)
{
	PLAYER	*newp;
	int	x, y;

	x = pp->p_x;
	y = pp->p_y;

	/* Draw or un-draw the player into the master map: */
	Maze[y][x] = draw ? pp->p_face : pp->p_over;

	/* The monitors can always see this player: */
	for (newp = Monitor; newp < End_monitor; newp++)
		check(newp, y, x);

	/* Check if other players can see this player: */
	for (newp = Player; newp < End_player; newp++) {
		if (!draw) {
			/* When un-drawing, show everyone what was under */
			check(newp, y, x);
			continue;
		}
		if (newp == pp) {
			/* The player can always see themselves: */
			check(newp, y, x);
			continue;
		}
		/* Check if the other player just run out of scans */
		if (newp->p_scan == 0) {
			/* The other player is no longer scanning: */
			newp->p_scan--;
			showstat(newp);
		/* Check if the other play is scannning */
		} else if (newp->p_scan > 0) {
			/* If this player's not cloacked, draw him: */
			if (pp->p_cloak < 0)
				check(newp, y, x);
			/* And this uses up a scan. */
			newp->p_scan--;
		}
	}

	/* Use up one point of cloak time when drawing: */
	if (draw && pp->p_cloak >= 0) {
		pp->p_cloak--;
		/* Check if we ran out of cloak: */
		if (pp->p_cloak < 0)
			showstat(pp);
	}
}

/*
 * message:
 *	Write a message at the bottom of the screen.
 */
void
message(PLAYER *pp, char *s)
{
	cgoto(pp, HEIGHT, 0);
	outstr(pp, s, strlen(s));
	ce(pp);
}

/*
 * translate:
 *	Turn a player character into a more personal player character.
 *	ie: {,},!,i becomes <,>,v,^
 */
static char
translate(char ch)
{
	switch (ch) {
	  case LEFTS:
		return '<';
	  case RIGHT:
		return '>';
	  case ABOVE:
		return '^';
	  case BELOW:
		return 'v';
	}
	return ch;
}

/*
 * player_sym:
 *	Return the symbol for the player at (y,x) when viewed by player 'pp'.
 *	ie: - unteamed players appear as {,},!,i
 *	    - unteamed monitors see all players as team digits
 *	    - teamed players see other players on their team, as a digit
 */
static int
player_sym(PLAYER *pp, int y, int x)
{
	PLAYER	*npp;

	npp = play_at(y, x);
	if (npp->p_ident->i_team == ' ')
		return Maze[y][x];
	if (pp->p_ident->i_team == '*')
		return npp->p_ident->i_team;
	if (pp->p_ident->i_team != npp->p_ident->i_team)
		return Maze[y][x];
	return pp->p_ident->i_team;
}
@


1.10
log
@Pull in <sys/select.h> for fd_set

ok deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD: draw.c,v 1.9 2016/01/07 21:37:53 mestre Exp $	*/
d6 3
a8 3
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are 
d10 2
a11 2
 * 
 * + Redistributions of source code must retain the above copyright 
d13 2
a14 2
 * + Redistributions in binary form must reproduce the above copyright 
 *   notice, this list of conditions and the following disclaimer in the 
d16 3
a18 3
 * + Neither the name of the University of California, San Francisco nor 
 *   the names of its contributors may be used to endorse or promote 
 *   products derived from this software without specific prior written 
d20 11
a30 11
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS 
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED 
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
d110 2
a111 2
		outyx(pp, i, STAT_NAME_COL, "%5.2f%c%-10.10s %c", 
			np->p_ident->i_score, stat_char(np), 
d194 1
a194 1
	#define seewalk(dx, dy) 					\
d262 1
a262 1
	outyx(ALL_PLAYERS, 
@


1.9
log
@ANSIfy hunt(6)

Note: casted 2 args to struct sockaddr * on list.c to shut off compiler
warnings, and also changed an int len to socklen_t since recvfrom(2) receives
the last argument as the latter.

I'm running out of credits, but this was once again with great help and OK from
tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: draw.c,v 1.8 2016/01/07 21:29:31 mestre Exp $	*/
d34 1
@


1.8
log
@Headers cleanup and sorting

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: draw.c,v 1.7 2003/06/11 08:45:33 pjanzen Exp $	*/
d50 1
a50 2
drawmaze(pp)
	PLAYER	*pp;
d87 1
a87 2
drawstatus(pp)
	PLAYER	*pp;
d126 1
a126 2
look(pp)
	PLAYER	*pp;
d184 1
a184 3
see(pp, face)
	PLAYER	*pp;
	int	face;
d224 1
a224 3
check(pp, y, x)
	PLAYER	*pp;
	int	y, x;
d258 1
a258 2
showstat(pp)
	PLAYER	*pp;
d274 1
a274 3
drawplayer(pp, draw)
	PLAYER	*pp;
	FLAG	draw;
d330 1
a330 3
message(pp, s)
	PLAYER	*pp;
	char	*s;
d343 1
a343 2
translate(ch)
	char	ch;
d366 1
a366 3
player_sym(pp, y, x)
	PLAYER	*pp;
	int	y, x;
@


1.7
log
@New license from the official hunt release at
ftp://ftp.cgl.ucsf.edu/pub/hunt.shar.Z -- it has been approved by all three
authors (Conrad Huang, Ken Arnold, and Greg Couch).
@
text
@d1 1
a1 1
/*	$OpenBSD: draw.c,v 1.6 2002/02/16 21:27:10 millert Exp $	*/
d36 1
a38 1
#include "conf.h"
@


1.6
log
@Part one of userland __P removal.  Done with a simple regexp with some minor hand editing to make comments line up correctly.  Another pass is forthcoming that handles the cases that could not be done automatically.
@
text
@d1 1
a1 1
/*	$OpenBSD: draw.c,v 1.5 2001/09/19 15:19:45 pjanzen Exp $	*/
d4 28
a31 3
 *  Hunt
 *  Copyright (c) 1985 Conrad C. Huang, Gregory S. Couch, Kenneth C.R.C. Arnold
 *  San Francisco, California
@


1.5
log
@isplayer -> is_player gets out of <ctype.h> namespace; jsm28@@cam.ac.uk
@
text
@d1 1
a1 1
/*	$OpenBSD: draw.c,v 1.4 2001/02/13 11:55:10 pjanzen Exp $	*/
d15 4
a18 4
static char	translate __P((char));
static int	player_sym __P((PLAYER *, int, int));
static void	drawstatus __P((PLAYER *));
static void	see __P((PLAYER *, int));
@


1.4
log
@Quiet alpha warnings, principally with correct includes
@
text
@d1 1
a1 1
/*	$OpenBSD: draw.c,v 1.3 1999/01/29 07:30:35 d Exp $	*/
d46 1
a46 1
				else if (isplayer(*sp))
d227 1
a227 1
		else if (isplayer(ch))
@


1.3
log
@major changes: security, curses, config
@
text
@d1 1
a1 1
/*	$OpenBSD: draw.c,v 1.2 1999/01/21 05:47:40 d Exp $	*/
d8 2
@


1.2
log
@ident for OpenBSD
mandoc-ify manual pages
use -locurses
@
text
@d1 1
a2 1
/*	$OpenBSD$	*/
d9 8
a16 1
# include	"hunt.h"
d18 4
d31 1
d33 1
d40 1
d43 1
d50 1
d60 1
a60 1
void
d67 20
a86 31
	cgoto(pp, STAT_AMMO_ROW, STAT_LABEL_COL);
	outstr(pp, "Ammo:", 5);
	(void) sprintf(Buf, "%3d", pp->p_ammo);
	cgoto(pp, STAT_AMMO_ROW, STAT_VALUE_COL);
	outstr(pp, Buf, 3);

	cgoto(pp, STAT_GUN_ROW, STAT_LABEL_COL);
	outstr(pp, "Gun:", 4);
	cgoto(pp, STAT_GUN_ROW, STAT_VALUE_COL);
	outstr(pp, (pp->p_ncshot < MAXNCSHOT) ? " ok" : "   ", 3);

	cgoto(pp, STAT_DAM_ROW, STAT_LABEL_COL);
	outstr(pp, "Damage:", 7);
	(void) sprintf(Buf, "%2d/%2d", pp->p_damage, pp->p_damcap);
	cgoto(pp, STAT_DAM_ROW, STAT_VALUE_COL);
	outstr(pp, Buf, 5);

	cgoto(pp, STAT_KILL_ROW, STAT_LABEL_COL);
	outstr(pp, "Kills:", 6);
	(void) sprintf(Buf, "%3d", (pp->p_damcap - MAXDAM) / 2);
	cgoto(pp, STAT_KILL_ROW, STAT_VALUE_COL);
	outstr(pp, Buf, 3);

	cgoto(pp, STAT_PLAY_ROW, STAT_LABEL_COL);
	outstr(pp, "Player:", 7);
	for (i = STAT_PLAY_ROW + 1, np = Player; np < End_player; np++) {
		(void) sprintf(Buf, "%5.2f%c%-10.10s %c", np->p_ident->i_score,
			stat_char(np), np->p_ident->i_name,
			np->p_ident->i_team);
		cgoto(pp, i++, STAT_NAME_COL);
		outstr(pp, Buf, STAT_NAME_LEN);
d89 4
a92 8
# ifdef MONITOR
	cgoto(pp, STAT_MON_ROW, STAT_LABEL_COL);
	outstr(pp, "Monitor:", 8);
	for (i = STAT_MON_ROW + 1, np = Monitor; np < End_monitor; np++) {
		(void) sprintf(Buf, "%5.5s %-10.10s %c", " ",
			np->p_ident->i_name, np->p_ident->i_team);
		cgoto(pp, i++, STAT_NAME_COL);
		outstr(pp, Buf, STAT_NAME_LEN);
a93 1
# endif
d96 4
d109 4
d124 1
d145 1
a145 1
# ifdef FLY
a147 1
# endif
d149 2
d154 6
a159 1
void
d165 1
a165 1
	int	y, x, i, cnt;
d167 1
d171 13
d186 1
a186 23
		sp = &Maze[y][x];
		for (i = 0; See_over[(int)*--sp]; i++)
			continue;

		if (i == 0)
			break;

		cnt = i;
		x = pp->p_x - 1;
		--y;
		while (i--)
			check(pp, y, --x);
		i = cnt;
		x = pp->p_x - 1;
		++y;
		while (i--)
			check(pp, y, --x);
		i = cnt;
		x = pp->p_x - 1;
		++y;
		while (i--)
			check(pp, y, --x);
		break;
d188 1
a188 23
		sp = &Maze[y][++x];
		for (i = 0; See_over[(int)*sp++]; i++)
			continue;

		if (i == 0)
			break;

		cnt = i;
		x = pp->p_x + 1;
		--y;
		while (i--)
			check(pp, y, ++x);
		i = cnt;
		x = pp->p_x + 1;
		++y;
		while (i--)
			check(pp, y, ++x);
		i = cnt;
		x = pp->p_x + 1;
		++y;
		while (i--)
			check(pp, y, ++x);
		break;
d190 1
a190 11
		sp = &Maze[--y][x];
		if (!See_over[(int)*sp])
			break;
		do {
			--y;
			sp -= sizeof Maze[0];
			check(pp, y, x - 1);
			check(pp, y, x    );
			check(pp, y, x + 1);
		} while (See_over[(int)*sp]);
		break;
d192 1
a192 11
		sp = &Maze[++y][x];
		if (!See_over[(int)*sp])
			break;
		do {
			y++;
			sp += sizeof Maze[0];
			check(pp, y, x - 1);
			check(pp, y, x    );
			check(pp, y, x + 1);
		} while (See_over[(int)*sp]);
		break;
d196 5
d210 8
d235 1
a235 1
 *	Update the status of players
a240 3
	PLAYER	*np;
	int	y;
	char	c;
d242 3
a244 12
	y = STAT_PLAY_ROW + 1 + (pp - Player);
	c = stat_char(pp);
# ifdef MONITOR
	for (np = Monitor; np < End_monitor; np++) {
		cgoto(np, y, STAT_SCAN_COL);
		outch(np, c);
	}
# endif
	for (np = Player; np < End_player; np++) {
		cgoto(np, y, STAT_SCAN_COL);
		outch(np, c);
	}
d251 2
d264 2
d268 1
a268 1
# ifdef MONITOR
a270 1
# endif
d272 1
d274 7
a280 1
		if (!draw || newp == pp) {
d284 1
d286 1
d289 3
a291 2
		}
		else if (newp->p_scan > 0) {
d294 1
d298 8
a305 4
	if (!draw || pp->p_cloak < 0)
		return;
	if (pp->p_cloak-- == 0)
		showstat(pp);
d308 4
d324 2
a325 2
 *	Turn a character into the right direction character if we are
 *	looking at the current player.
d327 1
a327 1
char
d346 4
a349 1
 *	Return the player symbol
d351 1
a351 1
int
a360 1
#ifdef MONITOR
a362 1
#endif
@


1.1
log
@Initial revision
@
text
@d2 1
a7 5

#include <sys/cdefs.h>
#ifndef lint
__RCSID("$NetBSD: draw.c,v 1.2 1997/10/10 16:33:04 lukem Exp $");
#endif /* not lint */
@


1.1.1.1
log
@hunt (from NetBSD)
@
text
@@
