head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.5.0.10
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.8
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.44
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.42
	OPENBSD_5_0:1.4.0.40
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.38
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.36
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.32
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.34
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.30
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.28
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.26
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.24
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.22
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.20
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.18
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.16
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.14
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.12
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.10
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.8
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.6
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.4
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.2
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2;
locks; strict;
comment	@ * @;


1.8
date	2016.01.07.21.37.53;	author mestre;	state Exp;
branches;
next	1.7;
commitid	OXn0Z5fMODgNmJpo;

1.7
date	2016.01.07.21.29.31;	author mestre;	state Exp;
branches;
next	1.6;
commitid	AgYVDd64zIiNi3fx;

1.6
date	2014.11.19.18.55.09;	author krw;	state Exp;
branches;
next	1.5;
commitid	yF7HZtgwJJmjVriG;

1.5
date	2012.12.05.23.19.50;	author deraadt;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.19.19.39.36;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.10.11.13.11;	author d;	state Exp;
branches;
next	1.2;

1.2
date	99.02.01.06.53.55;	author d;	state Exp;
branches;
next	1.1;

1.1
date	99.01.29.07.30.33;	author d;	state Exp;
branches;
next	;


desc
@@


1.8
log
@ANSIfy hunt(6)

Note: casted 2 args to struct sockaddr * on list.c to shut off compiler
warnings, and also changed an int len to socklen_t since recvfrom(2) receives
the last argument as the latter.

I'm running out of credits, but this was once again with great help and OK from
tb@@
@
text
@/*	$OpenBSD: display.c,v 1.7 2016/01/07 21:29:31 mestre Exp $	*/

/*
 * Display abstraction.
 * David Leonard <d@@openbsd.org>, 1999. Public domain.
 */

#include <curses.h>

void
display_open(void)
{
        initscr();
        (void) noecho();
        (void) cbreak();
}

void
display_beep(void)
{
	beep();
}

void
display_refresh(void)
{
	refresh();
}

void
display_clear_eol(void)
{
	clrtoeol();
}

void
display_put_ch(char c)
{
	addch(c);
}

void
display_put_str(char *s)
{
	addstr(s);
}

void
display_clear_the_screen(void)
{
        clear();
        move(0, 0);
        display_refresh();
}

void
display_move(int y, int x)
{
	move(y, x);
}

void
display_getyx(int *yp, int *xp)
{
	getyx(stdscr, *yp, *xp);
}

void
display_end(void)
{
	endwin();
}

char
display_atyx(int y, int x)
{
	int oy, ox;
	char c;

	display_getyx(&oy, &ox);
	c = mvwinch(stdscr, y, x) & 0x7f;
	display_move(oy, ox);
	return (c);
}

void
display_redraw_screen(void)
{
	clearok(stdscr, TRUE);
	touchwin(stdscr);
}

int
display_iserasechar(char ch)
{
	return ch == erasechar();
}

int
display_iskillchar(char ch)
{
	return ch == killchar();
}
@


1.7
log
@Headers cleanup and sorting

OK tb@@
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.6 2014/11/19 18:55:09 krw Exp $	*/
d11 1
a11 1
display_open()
d19 1
a19 1
display_beep()
d25 1
a25 1
display_refresh()
d31 1
a31 1
display_clear_eol()
d37 1
a37 2
display_put_ch(c)
	char c;
d43 1
a43 2
display_put_str(s)
	char *s;
d49 1
a49 1
display_clear_the_screen()
d57 1
a57 2
display_move(y, x)
	int y, x;
d63 1
a63 2
display_getyx(yp, xp)
	int *yp, *xp;
d69 1
a69 1
display_end()
d75 1
a75 2
display_atyx(y, x)
	int y, x;
d87 1
a87 1
display_redraw_screen()
d94 1
a94 2
display_iserasechar(ch)
	char ch;
d100 1
a100 2
display_iskillchar(ch)
	char ch;
@


1.6
log
@We don't need no stinkin' non-new-curses code. Also eliminates a
double #include.

ok deraadt@@ tedu@@
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.5 2012/12/05 23:19:50 deraadt Exp $	*/
a8 3

#include "display.h"
#include "hunt.h"
@


1.5
log
@Remove excessive sys/cdefs.h inclusion
ok guenther millert kettenis
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.4 2002/02/19 19:39:36 millert Exp $	*/
d8 1
a8 3
#if defined(__OpenBSD__) && !defined(USE_CURSES)
#define USE_CURSES
#endif
a10 11

#if !defined(USE_CURSES)

#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <stdio.h>
#include <termios.h>   
#define _USE_OLD_CURSES_
#include <curses.h>
#include <err.h>
a12 41
static struct termios saved_tty;

char	screen[SCREEN_HEIGHT][SCREEN_WIDTH2];
char	blanks[SCREEN_WIDTH];
int	cur_row, cur_col;

/*
 * tstp:
 *      Handle stop and start signals
 */
static void
tstp(dummy)
        int dummy;
{
        int     y, x;

        y = cur_row;
        x = cur_col;
        mvcur(cur_row, cur_col, HEIGHT, 0);
        cur_row = HEIGHT;
        cur_col = 0;
        _puts(VE);
        _puts(TE);
        (void) fflush(stdout);
        tcsetattr(0, TCSADRAIN, &__orig_termios);
        (void) kill(getpid(), SIGSTOP);
        (void) signal(SIGTSTP, tstp);
        tcsetattr(0, TCSADRAIN, &saved_tty);
        _puts(TI);
        _puts(VS);
        cur_row = y;
        cur_col = x;
        _puts(tgoto(CM, cur_row, cur_col));
        display_redraw_screen();
        (void) fflush(stdout);
}

/*
 * display_open:
 *	open the display
 */
d16 2
a17 8
	char *term;

	if (!isatty(0) || (term = getenv("TERM")) == NULL)
		errx(1, "no terminal type");

        gettmode();
        (void) setterm(term);
        (void) noecho();  
a18 193
        tcgetattr(0, &saved_tty);
        _puts(TI);
        _puts(VS);
#ifdef SIGTSTP
        (void) signal(SIGTSTP, tstp);
#endif
}

/*
 * display_beep:
 *	beep
 */
void
display_beep()
{
	(void) putchar('\a');
}

/*
 * display_refresh:
 *	sync the display
 */
void
display_refresh()
{
	(void) fflush(stdout);
}

/*
 * display_clear_eol:
 *	clear to end of line, without moving cursor
 */
void
display_clear_eol()
{
        if (CE != NULL)
                tputs(CE, 1, __cputchar);
        else {
                fwrite(blanks, sizeof (char), SCREEN_WIDTH - cur_col, stdout);
                if (COLS != SCREEN_WIDTH)
                        mvcur(cur_row, SCREEN_WIDTH, cur_row, cur_col);
                else if (AM)
                        mvcur(cur_row + 1, 0, cur_row, cur_col);
                else
                        mvcur(cur_row, SCREEN_WIDTH - 1, cur_row, cur_col);
        }
        memcpy(&screen[cur_row][cur_col], blanks, SCREEN_WIDTH - cur_col);
}

/*
 * display_putchar:
 *	put one character on the screen, move the cursor right one,
 *	with wraparound
 */
void
display_put_ch(ch)
	char ch;
{
        if (!isprint(ch)) {
                fprintf(stderr, "r,c,ch: %d,%d,%d", cur_row, cur_col, ch);
                return;
        }
        screen[cur_row][cur_col] = ch;
        putchar(ch);
        if (++cur_col >= COLS) {
                if (!AM || XN) 
                        putchar('\n');
                cur_col = 0;
                if (++cur_row >= LINES)
                        cur_row = LINES;
        }
}

/*
 * display_put_str:
 *	put a string of characters on the screen
 */
void
display_put_str(s)
	char *s;
{
	for( ; *s; s++)
		display_put_ch(*s);
}

/*
 * display_clear_the_screen:
 *	clear the screen; move cursor to top left
 */
void
display_clear_the_screen()
{
        int     i;

        if (blanks[0] == '\0')   
                for (i = 0; i < SCREEN_WIDTH; i++)
                        blanks[i] = ' ';
  
        if (CL != NULL) {
                tputs(CL, LINES, __cputchar);
                for (i = 0; i < SCREEN_HEIGHT; i++)
                        memcpy(screen[i], blanks, SCREEN_WIDTH);
        } else {
                for (i = 0; i < SCREEN_HEIGHT; i++) {
                        mvcur(cur_row, cur_col, i, 0);
                        cur_row = i;
                        cur_col = 0;
                        display_clear_eol();
                }
                mvcur(cur_row, cur_col, 0, 0);
        }
        cur_row = cur_col = 0;
}

/*
 * display_move:
 *	move the cursor
 */
void
display_move(y, x)
	int y, x;
{
	mvcur(cur_row, cur_col, y, x);
	cur_row = y;
	cur_col = x;
}

/*
 * display_getyx:
 *	locate the cursor
 */
void
display_getyx(yp, xp)
	int *yp, *xp;
{
	*xp = cur_col;
	*yp = cur_row;
}

/*
 * display_end:
 *	close the display
 */
void
display_end()
{
	tcsetattr(0, TCSADRAIN, &__orig_termios);
	_puts(VE);
	_puts(TE);
}

/*
 * display_atyx:
 *	return a character from the screen
 */
char
display_atyx(y, x)
	int y, x;
{
	return screen[y][x];
}

/*
 * display_redraw_screen:
 *	redraw the screen
 */
void
display_redraw_screen()
{
	int i;

        mvcur(cur_row, cur_col, 0, 0);
        for (i = 0; i < SCREEN_HEIGHT - 1; i++) {
                fwrite(screen[i], sizeof (char), SCREEN_WIDTH, stdout);
                if (COLS > SCREEN_WIDTH || (COLS == SCREEN_WIDTH && !AM))
                        putchar('\n');
        }
        fwrite(screen[SCREEN_HEIGHT - 1], sizeof (char), SCREEN_WIDTH - 1,
                stdout);
        mvcur(SCREEN_HEIGHT - 1, SCREEN_WIDTH - 1, cur_row, cur_col);
}

#else /* CURSES */ /* --------------------------------------------------- */

#include <curses.h>
#include "hunt.h"

void
display_open()
{
        initscr();
        (void) noecho(); 
        (void) cbreak();  
a113 2

#endif
@


1.4
log
@We live in an ANSI C world.  Remove lots of gratuitous #ifdef __STDC__ cruft.
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.3 2000/02/10 11:13:11 d Exp $	*/
a11 1
#include <sys/cdefs.h>
@


1.3
log
@stdc
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.2 1999/02/01 06:53:55 d Exp $	*/
a94 1
#ifdef __STDC__
a95 3
#else
	(void) putchar(CTRL('G'));
#endif
@


1.2
log
@avoid denial of service attacks on server port; extra conf vars; fix otto
@
text
@d1 1
a1 1
/*	$OpenBSD: display.c,v 1.1 1999/01/29 07:30:33 d Exp $	*/
d95 3
d99 1
@


1.1
log
@major changes: security, curses, config
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d339 7
a345 1
	return mvinch(y, x) & 0x7f;
@

