head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.34
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.30
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.32
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.28
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.26
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.24
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.22
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.20
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.18
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.16
	OPENBSD_5_0:1.1.0.14
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.8
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.07.23.11.17.22;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@finally update squeak to a more recent version.
as far as I know this should work on 64 bit systems.
@
text
@$OpenBSD$
--- platforms/unix/vm-sound-OpenBSD/sqUnixSoundOpenBSD.c.orig	Wed Jul 23 13:05:41 2008
+++ platforms/unix/vm-sound-OpenBSD/sqUnixSoundOpenBSD.c	Wed Jul 23 13:05:12 2008
@@@@ -1,4 +1,4 @@@@
-/* sqUnixSoundSun.c -- sound support for SunOS and Solaris
+/* sqUnixSoundSun.c -- sound support for OpenBSD
  *
  *   Copyright (C) 1996-2004 by Ian Piumarta and other authors/contributors
  *                              listed elsewhere in this file.
@@@@ -24,10 +24,8 @@@@
  *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  *   SOFTWARE.
  *
- * Authors: Ian.Piumarta@@inria.fr and Lex Spoon <lex@@cc.gatech.edu>
- * 
- * This support is rudimentary and is implemented largely by reading
- * header files and guessing what to do.
+ * Authors: Marc.Espie@@openbsd.org, Ian.Piumarta@@inria.fr and 
+ * Lex Spoon <lex@@cc.gatech.edu>
  */
 
 #include "sq.h"
@@@@ -40,17 +38,13 @@@@
 #include <unistd.h>
 #include <fcntl.h>
 #include <sys/ioctl.h>
-#ifdef HAVE_SYS_AUDIOIO_H
-# include <sys/audioio.h>
-#else
-# include <sun/audioio.h>
-#endif
+#include <sys/audioio.h>
 #include <errno.h>
 
 #ifdef DEBUG
 # define PRINTF(ARGS) printf ARGS
 # define TRACE 1
-#elsen
+#else
 # define PRINTF(ARGS)
 #endif
 
@@@@ -62,9 +56,14 @@@@ static int auPlaySemaIndex=	0;   /* an index to signal
 static int auBufBytes=		0;   /*  buffer size to use for playback.
 					 unfortunately, this bears no relationship to
 					 whatever the kernel and soundcard are using  */
-static int auBuffersPlayed=	0;
 
+static unsigned int hwbufSize;
+static unsigned int threshold;
+static unsigned long totalWritten = 0;
 
+static int sound_AvailableSpace(void);
+
+
 static void auHandle(int fd, void *data, int flags)
 {
   if (auFd < 0) return;
@@@@ -84,6 +83,7 @@@@ static int sound_Stop(void)
   aioDisable(auFd);
   close(auFd);
   auFd= -1;
+  totalWritten = 0;
 
   return 0;
 }
@@@@ -100,35 +100,36 @@@@ static int sound_Start(int frameCount, int samplesPerS
   auPlaySemaIndex= semaIndex;
   fmtStereo= stereo;
   auBufBytes= bytesPerFrame * frameCount;
+  totalWritten = 0;
 
   if ((auFd= open("/dev/audio", O_WRONLY)) == -1)
     {
       perror("/dev/audio");
       return false;
     }
-  /* set up device */
-  if (ioctl(auFd, AUDIO_GETINFO, &info))
-    {
-      perror("AUDIO_GETINFO");
-      goto closeAndFail;
-    }
-  info.play.gain= 100;
+  AUDIO_INITINFO(&info);
   info.play.precision= 16;
-  info.play.encoding= AUDIO_ENCODING_LINEAR;
+  info.play.encoding= AUDIO_ENCODING_SLINEAR;
   info.play.channels= fmtStereo ? 2 : 1;
   info.play.sample_rate= samplesPerSec;
 
-  auBuffersPlayed= info.play.eof;
-
-  while ((err= ioctl(auFd, AUDIO_SETINFO, &info)) && errno == EINTR)
-    ;
-  if (err)
+  if (ioctl(auFd, AUDIO_SETINFO, &info))
     {
       perror("AUDIO_SETINFO");
       goto closeAndFail;
     }
+  if (ioctl(auFd, AUDIO_GETINFO, &info))
+    {
+      perror("AUDIO_GETINFO");
+      goto closeAndFail;
+    }
+  hwbufSize = info.play.buffer_size;
+  threshold = (hwbufSize * 3) / 4;
+
   aioEnable(auFd, 0, 0);
   aioHandle(auFd, auHandle, AIO_RX);
+
+
   return true;
   
  closeAndFail:
@@@@ -141,6 +142,7 @@@@ static int sound_Start(int frameCount, int samplesPerS
 static int sound_AvailableSpace(void)
 {
   struct audio_info info;
+  unsigned long fill;
 
   if (auFd < 0) return 0;
 
@@@@ -149,7 +151,15 @@@@ static int sound_AvailableSpace(void)
       perror("AUDIO_GETINFO");
       sound_Stop();
     }
-  return (auBufBytes * (info.play.eof - auBuffersPlayed + 2));
+  fill = totalWritten - info.play.samples;
+  if (fill >= threshold)
+    {
+      return 0;
+    }
+  else
+    {
+      return threshold - fill;
+    }
 }
 
 
@@@@ -188,10 +198,8 @@@@ static int sound_PlaySamplesFromAtLength(int frameCoun
 	}
       bytes -= len;
       pos += len;
+      totalWritten += len;
     }
-  /* add an eof marker */
-  write(auFd, buf, 0);
-  auBuffersPlayed += 1;
   
   return frameCount;
 }
@@@@ -263,7 +271,7 @@@@ static void sound_SetVolume(double left, double right)
 
 #include "SqSound.h"
 
-SqSoundDefine(Sun);
+SqSoundDefine(OpenBSD);
 
 
 #include "SqModule.h"
@@@@ -272,6 +280,6 @@@@ static void  sound_parseEnvironment(void) {}
 static int   sound_parseArgument(int argc, char **argv) { return 0; }
 static void  sound_printUsage(void) {}
 static void  sound_printUsageNotes(void) {}
-static void *sound_makeInterface(void) { return &sound_Sun_itf; }
+static void *sound_makeInterface(void) { return &sound_OpenBSD_itf; }
 
-SqModuleDefine(sound, Sun);
+SqModuleDefine(sound, OpenBSD);
@
