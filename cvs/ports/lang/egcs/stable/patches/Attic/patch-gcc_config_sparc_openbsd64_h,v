head	1.13;
access;
symbols
	OPENBSD_3_6:1.12.0.4
	OPENBSD_3_6_BASE:1.12
	OPENBSD_3_5:1.12.0.2
	OPENBSD_3_5_BASE:1.12
	OPENBSD_3_4:1.9.0.6
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.4
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.9.0.2
	OPENBSD_3_2_BASE:1.9;
locks; strict;
comment	@# @;


1.13
date	2005.02.20.01.24.32;	author espie;	state dead;
branches;
next	1.12;

1.12
date	2004.02.10.20.14.25;	author sturm;	state Exp;
branches;
next	1.11;

1.11
date	2004.01.31.15.23.58;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2004.01.31.14.58.03;	author espie;	state dead;
branches;
next	1.9;

1.9
date	2002.09.14.10.14.51;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.03.18.33.33;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.03.10.13.34;	author art;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.30.12.20.09;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.29.15.43.13;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.29.15.18.10;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.29.14.33.26;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.29.14.10.40;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.29.13.22.11;	author espie;	state Exp;
branches;
next	;


desc
@@


1.13
log
@bye bye
@
text
@$OpenBSD: patch-gcc_config_sparc_openbsd64_h,v 1.12 2004/02/10 20:14:25 sturm Exp $
--- gcc/config/sparc/openbsd64.h.orig	2002-05-30 14:35:58.000000000 -0600
+++ gcc/config/sparc/openbsd64.h	2004-02-08 02:14:44.000000000 -0700
@@@@ -21,18 +21,28 @@@@ Boston, MA 02111-1307, USA.  */
 #undef TARGET_VERSION
 #define TARGET_VERSION fprintf (stderr, " (sparc64 OpenBSD ELF)")
 
-/* XXX - do we really want HARD_QUAD? */
 #undef TARGET_DEFAULT
 #define TARGET_DEFAULT \
-(MASK_V9 + MASK_PTR64 + MASK_64BIT + MASK_HARD_QUAD \
+(MASK_V9 + MASK_PTR64 + MASK_64BIT \
  + MASK_APP_REGS + MASK_FPU + MASK_STACK_BIAS + MASK_LONG_DOUBLE_128)
 
 #undef SPARC_DEFAULT_CMODEL
 #define SPARC_DEFAULT_CMODEL CM_MEDMID
 
 /* Run-time target specifications.  */
-#undef CPP_PREDEFINES
-#define CPP_PREDEFINES "-D__unix__ -D__sparc__ -D__sparc64__ -D__sparcv9__ -D__sparc_v9__ -D__arch64__ -D__ELF__ -D__OpenBSD__ -Asystem(unix) -Asystem(OpenBSD) -Acpu(sparc) -Amachine(sparc)"
+#define TARGET_OS_CPP_BUILTINS()			\
+  do							\
+    {							\
+      OPENBSD_OS_CPP_BUILTINS_ELF();			\
+      OPENBSD_OS_CPP_BUILTINS_LP64();			\
+      builtin_define ("__sparc64__");			\
+      builtin_define ("__sparc_v9__");			\
+      builtin_define ("__sparcv9__");			\
+      builtin_define ("__arch64__");			\
+      builtin_define ("__sparc");			\
+      builtin_define ("__sparc__");			\
+    }							\
+  while (0)
 
 #undef CPP_SUBTARGET_SPEC
 #define CPP_SUBTARGET_SPEC ""
@@@@ -57,6 +67,14 @@@@ Boston, MA 02111-1307, USA.  */
 #undef LONG_DOUBLE_TYPE_SIZE
 #define LONG_DOUBLE_TYPE_SIZE 128
 
+#undef	WINT_TYPE
+#define	WINT_TYPE "long int"
+
+#undef	WINT_TYPE_SIZE
+#define	WINT_TYPE_SIZE 32
+
+#define HANDLE_PRAGMA_REDEFINE_EXTNAME 1
+
 #undef LINK_SPEC
 #define LINK_SPEC \
   "%{!shared:%{!nostdlib:%{!r*:%{!e*:-e __start}}}} \
@@@@ -73,3 +91,146 @@@@ Boston, MA 02111-1307, USA.  */
         crtbegin%O%s} %{shared:crtbeginS%O%s}"
 #undef ENDFILE_SPEC
 #define ENDFILE_SPEC "%{!shared:crtend%O%s} %{shared:crtendS%O%s}"
+
+#undef ASM_CPU_DEFAULT_SPEC
+#define ASM_CPU_DEFAULT_SPEC "-xarch=v8plusa"
+
+#undef ASM_CPU_SPEC
+#define ASM_CPU_SPEC "\
+%{mcpu=v8plus:-xarch=v8plus} \
+%{mcpu=ultrasparc:-xarch=v8plusa} \
+%{!mcpu*:%(asm_cpu_default)} \
+"
+
+/* Same as sparc.h */
+#undef DBX_REGISTER_NUMBER
+#define DBX_REGISTER_NUMBER(REGNO) \
+  (TARGET_FLAT && (REGNO) == HARD_FRAME_POINTER_REGNUM ? 31 : REGNO)
+
+/* We use stabs-in-elf by default, because that is what the native
+   toolchain uses.  */
+#undef PREFERRED_DEBUGGING_TYPE
+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG
+
+/* The Solaris 2 assembler uses .skip, not .zero, so put this back.  */
+#undef ASM_OUTPUT_SKIP
+#define ASM_OUTPUT_SKIP(FILE,SIZE)  \
+  fprintf (FILE, "\t.skip %u\n", (SIZE))
+
+#undef  LOCAL_LABEL_PREFIX
+#define LOCAL_LABEL_PREFIX  "."
+
+/* This is how to output a definition of an internal numbered label where
+   PREFIX is the class of label and NUM is the number within the class.  */
+
+#undef  ASM_OUTPUT_INTERNAL_LABEL
+#define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)	\
+  fprintf (FILE, ".L%s%d:\n", PREFIX, NUM)
+
+/* This is how to output a reference to an internal numbered label where
+   PREFIX is the class of label and NUM is the number within the class.  */
+
+#undef  ASM_OUTPUT_INTERNAL_LABELREF
+#define ASM_OUTPUT_INTERNAL_LABELREF(FILE,PREFIX,NUM)	\
+  fprintf (FILE, ".L%s%d", PREFIX, NUM)
+
+/* This is how to store into the string LABEL
+   the symbol_ref name of an internal numbered label where
+   PREFIX is the class of label and NUM is the number within the class.
+   This is suitable for output with `assemble_name'.  */
+
+#undef  ASM_GENERATE_INTERNAL_LABEL
+#define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)	\
+  sprintf ((LABEL), "*.L%s%ld", (PREFIX), (long)(NUM))
+
+/* Select a format to encode pointers in exception handling data.  CODE
+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is
+   true if the symbol may be affected by dynamic relocations.
+
+   Some Solaris dynamic linkers don't handle unaligned section relative
+   relocs properly, so force them to be aligned.  */
+#ifndef HAVE_AS_SPARC_UA_PCREL
+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)		\
+  ((flag_pic || GLOBAL) ? DW_EH_PE_aligned : DW_EH_PE_absptr)
+#endif
+
+/* ??? This does not work in SunOS 4.x, so it is not enabled in sparc.h.
+   Instead, it is enabled here, because it does work under Solaris.  */
+/* Define for support of TFmode long double and REAL_ARITHMETIC.
+   Sparc ABI says that long double is 4 words.  */
+#define LONG_DOUBLE_TYPE_SIZE 128
+
+/* But indicate that it isn't supported by the hardware.  */
+#define WIDEST_HARDWARE_FP_SIZE 64
+
+#define STDC_0_IN_SYSTEM_HEADERS 1
+
+#define MULDI3_LIBCALL "__mul64"
+#define DIVDI3_LIBCALL "__div64"
+#define UDIVDI3_LIBCALL "__udiv64"
+#define MODDI3_LIBCALL "__rem64"
+#define UMODDI3_LIBCALL "__urem64"
+
+#undef INIT_SUBTARGET_OPTABS
+#define INIT_SUBTARGET_OPTABS						\
+  fixsfdi_libfunc							\
+    = init_one_libfunc (TARGET_ARCH64 ? "__ftol" : "__ftoll");		\
+  fixunssfdi_libfunc							\
+    = init_one_libfunc (TARGET_ARCH64 ? "__ftoul" : "__ftoull");	\
+  fixdfdi_libfunc							\
+    = init_one_libfunc (TARGET_ARCH64 ? "__dtol" : "__dtoll");		\
+  fixunsdfdi_libfunc							\
+    = init_one_libfunc (TARGET_ARCH64 ? "__dtoul" : "__dtoull")
+
+
+/*
+ * Attempt to turn on access permissions for the stack.
+ *
+ * This code must be defined when compiling gcc but not when compiling
+ * libgcc2.a, unless we're generating code for 64 bits SPARC
+ *
+ * _SC_STACK_PROT is only defined for post 2.6, but we want this code
+ * to run always.  2.6 can change the stack protection but has no way to
+ * query it.
+ *
+ */
+
+/* This declares mprotect (used in TRANSFER_FROM_TRAMPOLINE) for
+   libgcc2.c.  */
+/* We don't want to include this because sys/mman.h is not present on
+   some non-Solaris configurations that use sol2.h.  */
+#if 0 /* def L_trampoline */
+#include <sys/mman.h>
+#endif
+
+#define TRANSFER_FROM_TRAMPOLINE					\
+static int need_enable_exec_stack;					\
+									\
+static void check_enabling(void) __attribute__ ((constructor));		\
+static void check_enabling(void)					\
+{									\
+  extern long sysconf(int);						\
+									\
+  int prot = (int) sysconf(515 /*_SC_STACK_PROT */);			\
+  if (prot != 7)							\
+    need_enable_exec_stack = 1;						\
+}									\
+									\
+extern void __enable_execute_stack (void *);				\
+void									\
+__enable_execute_stack (addr)						\
+     void *addr;							\
+{									\
+  if (!need_enable_exec_stack)						\
+    return;								\
+  else {								\
+    long size = getpagesize ();						\
+    long mask = ~(size-1);						\
+    char *page = (char *) (((long) addr) & mask); 			\
+    char *end  = (char *) ((((long) (addr + TRAMPOLINE_SIZE)) & mask) + size); \
+									\
+    /* 7 is PROT_READ | PROT_WRITE | PROT_EXEC */ 			\
+    if (mprotect (page, end - page, 7) < 0)				\
+      perror ("mprotect of trampoline code");				\
+  }									\
+}
@


1.12
log
@- sync with in-tree gcc3
- add some missing header files
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_config_sparc_openbsd64_h,v 1.11 2004/01/31 15:23:58 espie Exp $
@


1.11
log
@forgot a few patches... grrr.
@
text
@d1 15
a15 4
$OpenBSD: patch-gcc_config_sparc_openbsd64_h,v 1.3 2003/11/13 19:09:47 espie Exp $
--- gcc/config/sparc/openbsd64.h.orig	2002-05-30 22:35:58.000000000 +0200
+++ gcc/config/sparc/openbsd64.h	2003-11-12 22:11:26.000000000 +0100
@@@@ -31,8 +31,239 @@@@ Boston, MA 02111-1307, USA.  */
d28 1
d30 1
d34 7
a40 24
+
+#undef CPP_SUBTARGET_SPEC
+#define CPP_SUBTARGET_SPEC ""
+
+#undef MD_EXEC_PREFIX
+#undef MD_STARTFILE_PREFIX
+
+#undef ASM_SPEC
+#define ASM_SPEC "\
+%{v:-V} -s %{fpic:-K PIC} %{fPIC:-K PIC} \
+%{mlittle-endian:-EL} \
+%(asm_cpu) %(asm_arch) \
+"
+
+/* Layout of source language data types.  */
+#undef WCHAR_TYPE
+#define WCHAR_TYPE "int"
+
+#undef WCHAR_TYPE_SIZE
+#define WCHAR_TYPE_SIZE 32
+
+#undef LONG_DOUBLE_TYPE_SIZE
+#define LONG_DOUBLE_TYPE_SIZE 128
+
d49 7
a55 16
+#undef LINK_SPEC
+#define LINK_SPEC \
+  "%{!shared:%{!nostdlib:%{!r*:%{!e*:-e __start}}}} \
+   %{shared:-shared} %{R*} \
+   %{static:-Bstatic} \
+   %{!static:-Bdynamic} \
+   %{assert*} \
+   %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.so}"
+
+/* As an elf system, we need crtbegin/crtend stuff.  */
+#undef STARTFILE_SPEC
+#define STARTFILE_SPEC "\
+        %{!shared: %{pg:gcrt0%O%s} %{!pg:%{p:gcrt0%O%s} %{!p:crt0%O%s}} \
+        crtbegin%O%s} %{shared:crtbeginS%O%s}"
+#undef ENDFILE_SPEC
+#define ENDFILE_SPEC "%{!shared:crtend%O%s} %{shared:crtendS%O%s}"
a198 34
+/* Configuration file for sparc64 OpenBSD target.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+#undef TARGET_VERSION
+#define TARGET_VERSION fprintf (stderr, " (sparc64 OpenBSD ELF)")
+
+/* XXX - do we really want HARD_QUAD? */
+#undef TARGET_DEFAULT
+#define TARGET_DEFAULT \
+(MASK_V9 + MASK_PTR64 + MASK_64BIT + MASK_HARD_QUAD \
+ + MASK_APP_REGS + MASK_FPU + MASK_STACK_BIAS + MASK_LONG_DOUBLE_128)
+
+#undef SPARC_DEFAULT_CMODEL
+#define SPARC_DEFAULT_CMODEL CM_MEDMID
 
 #undef CPP_SUBTARGET_SPEC
 #define CPP_SUBTARGET_SPEC ""
@


1.10
log
@switch to gcc 3.3.2 as a stable port
okay naddy@@
@
text
@d1 5
a5 6
$OpenBSD: patch-gcc_config_sparc_openbsd64_h,v 1.9 2002/09/14 10:14:51 espie Exp $
--- gcc/config/sparc/openbsd64.h.orig	Thu May 30 22:42:33 2002
+++ gcc/config/sparc/openbsd64.h	Thu Sep 12 14:50:59 2002
@@@@ -57,6 +57,232 @@@@ Boston, MA 02111-1307, USA.  */
 #undef LONG_DOUBLE_TYPE_SIZE
 #define LONG_DOUBLE_TYPE_SIZE 128
d7 38
d243 3
a245 31
+
+/* Run-time target specifications.  */
+#undef CPP_PREDEFINES
+#define CPP_PREDEFINES "-D__unix__ -D__sparc__ -D__sparc64__ -D__sparcv9__ -D__sparc_v9__ -D__arch64__ -D__ELF__ -D__OpenBSD__ -Asystem(unix) -Asystem(OpenBSD) -Acpu(sparc) -Amachine(sparc)"
+
+#undef CPP_SUBTARGET_SPEC
+#define CPP_SUBTARGET_SPEC ""
+
+#undef MD_EXEC_PREFIX
+#undef MD_STARTFILE_PREFIX
+
+#undef ASM_SPEC
+#define ASM_SPEC "\
+%{v:-V} -s %{fpic:-K PIC} %{fPIC:-K PIC} \
+%{mlittle-endian:-EL} \
+%(asm_cpu) %(asm_arch) \
+"
+
+/* Layout of source language data types.  */
+#undef WCHAR_TYPE
+#define WCHAR_TYPE "int"
+
+#undef WCHAR_TYPE_SIZE
+#define WCHAR_TYPE_SIZE 32
+
+#undef LONG_DOUBLE_TYPE_SIZE
+#define LONG_DOUBLE_TYPE_SIZE 128
+
 #undef LINK_SPEC
 #define LINK_SPEC \
   "%{!shared:%{!nostdlib:%{!r*:%{!e*:-e __start}}}} \
@


1.9
log
@Update to gcc 3.2, remove integrated patches.
Fix packing lists, including missing %%SHARED%%.
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_config_sparc_openbsd64_h,v 1.8 2002/06/03 18:33:33 espie Exp $
@


1.8
log
@more flattening of config files...
@
text
@d1 7
a7 63
$OpenBSD: patch-gcc_config_sparc_openbsd64_h,v 1.7 2002/06/03 10:13:34 art Exp $
--- gcc/config/sparc/openbsd64.h.orig	Thu May 30 12:57:52 2002
+++ gcc/config/sparc/openbsd64.h	Mon Jun  3 13:49:36 2002
@@@@ -0,0 +1,226 @@@@
+/* Configuration file for sparc64 OpenBSD target.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+#undef TARGET_VERSION
+#define TARGET_VERSION fprintf (stderr, " (sparc64 OpenBSD ELF)")
+
+/* XXX - do we really want HARD_QUAD? */
+#undef TARGET_DEFAULT
+#define TARGET_DEFAULT \
+(MASK_V9 + MASK_PTR64 + MASK_64BIT + MASK_HARD_QUAD \
+ + MASK_APP_REGS + MASK_FPU + MASK_STACK_BIAS + MASK_LONG_DOUBLE_128)
+
+#undef SPARC_DEFAULT_CMODEL
+#define SPARC_DEFAULT_CMODEL CM_MEDMID
+
+/* Run-time target specifications.  */
+#undef CPP_PREDEFINES
+#define CPP_PREDEFINES "-D__unix__ -D__sparc__ -D__sparc64__ -D__sparcv9__ -D__sparc_v9__ -D__arch64__ -D__ELF__ -D__OpenBSD__ -Asystem(unix) -Asystem(OpenBSD) -Acpu(sparc) -Amachine(sparc)"
+
+#undef CPP_SUBTARGET_SPEC
+#define CPP_SUBTARGET_SPEC ""
+
+#undef MD_EXEC_PREFIX
+#undef MD_STARTFILE_PREFIX
+
+#undef ASM_SPEC
+#define ASM_SPEC "\
+%{v:-V} -s %{fpic:-K PIC} %{fPIC:-K PIC} \
+%{mlittle-endian:-EL} \
+%(asm_cpu) %(asm_arch) \
+"
+
+/* Layout of source language data types.  */
+#undef WCHAR_TYPE
+#define WCHAR_TYPE "int"
+
+#undef WCHAR_TYPE_SIZE
+#define WCHAR_TYPE_SIZE 32
+
+#undef LONG_DOUBLE_TYPE_SIZE
+#define LONG_DOUBLE_TYPE_SIZE 128
+
d175 62
@


1.7
log
@undef CPLUSPLUS_CPP_SPEC that we happen to inherit from sol2.h (we shouldn't include that)
espie@@ ok.
@
text
@d1 4
a4 4
$OpenBSD: patch-gcc_config_sparc_openbsd64_h,v 1.6 2002/05/30 12:20:09 espie Exp $
--- gcc/config/sparc/openbsd64.h.orig	Sat Jun  1 23:45:17 2002
+++ gcc/config/sparc/openbsd64.h	Sun Jun  2 06:25:40 2002
@@@@ -0,0 +1,77 @@@@
a43 2
+#undef CPLUSPLUS_CPP_SPEC
+
d64 8
d88 143
@


1.6
log
@A few sparc64 tweaks. based on Richard Henderson and Neil Booth comments,
mostly.
@
text
@d1 4
a4 4
$OpenBSD: patch-gcc_config_sparc_openbsd64_h,v 1.5 2002/05/29 15:43:13 espie Exp $
--- gcc/config/sparc/openbsd64.h.orig	Thu May 30 11:34:47 2002
+++ gcc/config/sparc/openbsd64.h	Thu May 30 12:00:36 2002
@@@@ -0,0 +1,75 @@@@
d43 2
@


1.5
log
@zap obsolete macros
@
text
@d1 4
a4 4
$OpenBSD: patch-gcc_config_sparc_openbsd64_h,v 1.4 2002/05/29 15:18:10 espie Exp $
--- gcc/config/sparc/openbsd64.h.orig	Wed May 29 17:36:48 2002
+++ gcc/config/sparc/openbsd64.h	Wed May 29 17:38:38 2002
@@@@ -0,0 +1,81 @@@@
d8 1
a8 1
+This file is part of GNU CC.
d10 1
a10 1
+GNU CC is free software; you can redistribute it and/or modify
d15 1
a15 1
+GNU CC is distributed in the hope that it will be useful,
d21 1
a21 1
+along with GNU CC; see the file COPYING.  If not, write to
a27 2
+/* A 64 but v9 complier in a Medium/Mid code model.  */
+
a71 4
+
+/* For profiled binaries we have to change the memory model.  */
+#undef CC1_SPEC
+#define CC1_SPEC "%{p*:-mcmodel=medlow} %{p:-mcmodel=medlow}"
@


1.4
log
@combinations without MASK_LONG_DOUBLE_128 are explicitly not supported.
@
text
@d1 4
a4 4
$OpenBSD: patch-gcc_config_sparc_openbsd64_h,v 1.3 2002/05/29 14:33:26 espie Exp $
--- gcc/config/sparc/openbsd64.h.orig	Wed May 29 15:35:47 2002
+++ gcc/config/sparc/openbsd64.h	Wed May 29 16:03:13 2002
@@@@ -0,0 +1,104 @@@@
a85 23
+
+/* A C statement (sans semicolon) to output an element in the table of
+   global constructors.  */
+#undef ASM_OUTPUT_CONSTRUCTOR
+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)				\
+  do {									\
+    ctors_section ();							\
+    fprintf ((FILE), "\t%s\t ", TARGET_ARCH64 ? ASM_LONGLONG : INT_ASM_OP) ; \
+    assemble_name ((FILE), (NAME));					\
+    fprintf ((FILE), "\n");						\
+  } while (0)
+
+/* A C statement (sans semicolon) to output an element in the table of
+   global destructors.  */
+#undef ASM_OUTPUT_DESTRUCTOR
+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)				\
+  do {									\
+    dtors_section ();							\
+    fprintf ((FILE), "\t%s\t ", TARGET_ARCH64 ? ASM_LONGLONG : INT_ASM_OP); \
+    assemble_name ((FILE), (NAME));					\
+    fprintf ((FILE), "\n");						\
+  } while (0)
+
@


1.3
log
@more tweaks, we'll see later if this builds a working compiler.
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_config_sparc_openbsd64_h,v 1.2 2002/05/29 14:10:40 espie Exp $
d34 1
a34 1
+ + MASK_APP_REGS + MASK_FPU + MASK_STACK_BIAS)
@


1.2
log
@give sparc64 a fighting chance.
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_config_sparc_openbsd64_h,v 1.1 2002/05/29 13:22:11 espie Exp $
d34 1
a34 1
+ + MASK_APP_REGS + MASK_EPILOGUE + MASK_FPU + MASK_STACK_BIAS)
@


1.1
log
@basic merge of config stuff for missing openbsd arches.
@
text
@d1 4
a4 4
$OpenBSD$
--- gcc/config/sparc/openbsd64.h.orig	Wed May 29 15:18:09 2002
+++ gcc/config/sparc/openbsd64.h	Wed May 29 15:18:05 2002
@@@@ -0,0 +1,116 @@@@
a23 12
+
+#ifndef TARGET_CPU_DEFAULT
+#define TARGET_CPU_DEFAULT	TARGET_CPU_ultrasparc
+#endif
+
+#include <sparc/sp64-elf.h>
+
+#define OBSD_HAS_DECLARE_FUNCTION_NAME
+#define OBSD_HAS_DECLARE_FUNCTION_SIZE
+#define OBSD_HAS_DECLARE_OBJECT
+
+#include <openbsd.h>
@

