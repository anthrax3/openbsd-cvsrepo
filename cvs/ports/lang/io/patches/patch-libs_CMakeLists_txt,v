head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.1.1.0.14
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.10
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	jeremy_2012-Dec-17:1.1.1.1
	jeremy:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.10.05.08.48.05;	author dcoppa;	state Exp;
branches;
next	1.1;
commitid	TQoLuJRWuhL1knMt;

1.1
date	2012.12.17.23.55.28;	author jeremy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.12.17.23.55.28;	author jeremy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
Fix cyclical dependency error

fallout from upcoming ninja-1.6.0
@
text
@$OpenBSD: patch-libs_CMakeLists_txt,v 1.1.1.1 2012/12/17 23:55:28 jeremy Exp $

Force linking of binary to libpthread, so that you can use addons that
link to libpthread without LD_PRELOAD.

Fix cyclical dependency error

--- libs/CMakeLists.txt.orig	Tue Oct  2 22:33:45 2012
+++ libs/CMakeLists.txt	Mon Oct  5 09:36:41 2015
@@@@ -10,38 +10,40 @@@@ add_definitions("-DBUILDING_IOVMALL_DLL")
 # Output our static library to the top-level _build hierarchy
 set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/_build/lib)
 
+set(CMAKE_SHARED_LINKER_FLAGS "-lpthread ${CMAKE_SHARED_LINKER_FLAGS}")
+
 # Our Io source files to be "compiled" into a C source file.
 #file(GLOB IO_SRCS "${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/*.io")
 set(IO_SRCS
-	${CMAKE_CURRENT_SOURCE_DIR}/io/A0_List.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/A1_OperatorTable.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/A2_Object.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/A3_List.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/A4_Exception.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Actor.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/AddonLoader.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/B_Sequence.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Block.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/CFunction.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Date.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Debugger.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Directory.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/DynLib.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Error.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/File.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/List_schwartzian.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Map.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Message.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Number.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Profiler.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Sandbox.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Serialize.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/System.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/UnitTest.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Vector.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Y_Path.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Z_CLI.io
-	${CMAKE_CURRENT_SOURCE_DIR}/io/Z_Importer.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/A0_List.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/A1_OperatorTable.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/A2_Object.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/A3_List.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/A4_Exception.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Actor.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/AddonLoader.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/B_Sequence.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Block.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/CFunction.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Date.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Debugger.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Directory.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/DynLib.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Error.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/File.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/List_schwartzian.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Map.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Message.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Number.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Profiler.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Sandbox.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Serialize.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/System.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/UnitTest.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Vector.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Y_Path.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Z_CLI.io
+	${CMAKE_CURRENT_SOURCE_DIR}/iovm/io/Z_Importer.io
 )
 
 # Hackery for CMake's horrible ASM support
@@@@ -90,7 +92,7 @@@@ list(APPEND IOVMALL_STATIC_SRCS ${CMAKE_CURRENT_SOURCE
 # ...And the static library. Refer to IOVMALL_STATIC_SRCS definition
 # up top.
 add_library(iovmall_static STATIC ${IOVMALL_STATIC_SRCS})
-add_dependencies(iovmall_static io2c basekit coroutine garabagecollector iovmall)
+add_dependencies(iovmall_static io2c basekit coroutine)
 
 # Define the subdirectories we can reach from here that we want
 # to go into and build stuff.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d6 5
a10 3
--- libs/CMakeLists.txt.orig	Mon Dec 17 13:31:47 2012
+++ libs/CMakeLists.txt	Mon Dec 17 13:31:50 2012
@@@@ -10,6 +10,8 @@@@ add_definitions("-DBUILDING_IOVMALL_DLL")
d19 70
@


1.1.1.1
log
@Import lang/io 20110905

Io is a prototype-based programming language inspired by Smalltalk (all
values are objects, all messages are dynamic), Self (prototype-based),
NewtonScript (differential inheritance), Act1 (actors and futures for
concurrency), LISP (code is a runtime inspectable/modifiable tree) and
Lua (small, embeddable).

OK sthen@@
@
text
@@
