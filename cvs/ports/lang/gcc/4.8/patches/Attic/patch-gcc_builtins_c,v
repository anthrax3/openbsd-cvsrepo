head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.1.1.0.4
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	pascal_20130804:1.1.1.1
	pascal:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.09.10.08.23.54;	author pascal;	state dead;
branches;
next	1.2;
commitid	ovY05rVdcfWNuWWc;

1.2
date	2014.05.25.21.45.39;	author pascal;	state Exp;
branches;
next	1.1;

1.1
date	2013.04.08.08.20.24;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.04.08.08.20.24;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.3
log
@tedu gcc 4.8

ok sthen@@ tobiasu@@
@
text
@$OpenBSD: patch-gcc_builtins_c,v 1.2 2014/05/25 21:45:39 pascal Exp $
--- gcc/builtins.c.orig	Fri May  9 12:16:14 2014
+++ gcc/builtins.c	Thu May 22 20:04:19 2014
@@@@ -114,9 +114,11 @@@@ static rtx expand_builtin_memcpy (tree, rtx);
 static rtx expand_builtin_mempcpy (tree, rtx, enum machine_mode);
 static rtx expand_builtin_mempcpy_args (tree, tree, tree, rtx,
 					enum machine_mode, int);
+#ifndef NO_UNSAFE_BUILTINS
 static rtx expand_builtin_strcpy (tree, rtx);
 static rtx expand_builtin_strcpy_args (tree, tree, rtx);
 static rtx expand_builtin_stpcpy (tree, rtx, enum machine_mode);
+#endif
 static rtx expand_builtin_strncpy (tree, rtx);
 static rtx builtin_memset_gen_str (void *, HOST_WIDE_INT, enum machine_mode);
 static rtx expand_builtin_memset (tree, rtx, enum machine_mode);
@@@@ -3228,6 +3230,7 @@@@ expand_builtin_mempcpy_args (tree dest, tree src, tree
 # define CODE_FOR_movstr CODE_FOR_nothing
 #endif
 
+#ifndef NO_UNSAFE_BUILTINS
 /* Expand into a movstr instruction, if one is available.  Return NULL_RTX if
    we failed, the caller should emit a normal call, otherwise try to
    get the result in TARGET, if convenient.  If ENDP is 0 return the
@@@@ -3378,6 +3381,7 @@@@ expand_builtin_stpcpy (tree exp, rtx target, enum mach
       return expand_movstr (dst, src, target, /*endp=*/2);
     }
 }
+#endif
 
 /* Callback routine for store_by_pieces.  Read GET_MODE_BITSIZE (MODE)
    bytes from constant string DATA + OFFSET and return it as target
@@@@ -6174,9 +6178,11 @@@@ expand_builtin (tree exp, rtx target, rtx subtarget, e
       break;
 
     case BUILT_IN_STRCPY:
+#ifndef NO_UNSAFE_BUILTINS
       target = expand_builtin_strcpy (exp, target);
       if (target)
 	return target;
+#endif
       break;
 
     case BUILT_IN_STRNCPY:
@@@@ -6186,9 +6192,11 @@@@ expand_builtin (tree exp, rtx target, rtx subtarget, e
       break;
 
     case BUILT_IN_STPCPY:
+#ifndef NO_UNSAFE_BUILTINS
       target = expand_builtin_stpcpy (exp, target, mode);
       if (target)
 	return target;
+#endif
       break;
 
     case BUILT_IN_MEMCPY:
@


1.2
log
@Update to gcc 4.8.3.  Tested on sparc64 and adastraps hosted by tobiasu@@.

"rein damit" tobiasu@@
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_builtins_c,v 1.1.1.1 2013/04/08 08:20:24 pascal Exp $
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD: patch-gcc_builtins_c,v 1.1.1.1 2012/04/23 15:56:42 pascal Exp $
--- gcc/builtins.c.orig	Thu Jan 10 21:38:27 2013
+++ gcc/builtins.c	Wed Jan 23 22:48:28 2013
d16 1
a16 1
@@@@ -3211,6 +3213,7 @@@@ expand_builtin_mempcpy_args (tree dest, tree src, tree
d24 1
a24 1
@@@@ -3361,6 +3364,7 @@@@ expand_builtin_stpcpy (tree exp, rtx target, enum mach
d32 1
a32 1
@@@@ -6142,9 +6146,11 @@@@ expand_builtin (tree exp, rtx target, rtx subtarget, e
d44 1
a44 1
@@@@ -6154,9 +6160,11 @@@@ expand_builtin (tree exp, rtx target, rtx subtarget, e
@


1.1.1.1
log
@Import gcc 4.8.

For a full Changelog, see: http://gcc.gnu.org/gcc-4.8/changes.html

Tested by me on amd64, i386 and powerpc and by brad@@ on sparc64.

Adds support for -java on powerpc.  -faggressive-loop-optimizations is
disabled by default in the port, and the default debugging format changed
to DWARF2 (instead of 4).

tweaks and ok tobiasu@@
@
text
@@
