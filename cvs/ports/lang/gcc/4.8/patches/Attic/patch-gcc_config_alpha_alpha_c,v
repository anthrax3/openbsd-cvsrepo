head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	pascal_20130804:1.1.1.1
	pascal:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.09.10.08.23.55;	author pascal;	state dead;
branches;
next	1.3;
commitid	ovY05rVdcfWNuWWc;

1.3
date	2013.12.02.22.34.55;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2013.04.20.20.54.04;	author pascal;	state Exp;
branches;
next	1.1;

1.1
date	2013.04.08.08.20.26;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.04.08.08.20.26;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.4
log
@tedu gcc 4.8

ok sthen@@ tobiasu@@
@
text
@$OpenBSD: patch-gcc_config_alpha_alpha_c,v 1.3 2013/12/02 22:34:55 pascal Exp $
--- gcc/config/alpha/alpha.c.orig	Mon Sep  2 17:11:47 2013
+++ gcc/config/alpha/alpha.c	Wed Oct 16 18:56:48 2013
@@@@ -453,11 +453,17 @@@@ alpha_option_override (void)
   if (!global_options_set.x_g_switch_value)
     g_switch_value = 8;
 
+#ifdef OPENBSD_NATIVE
+  /* Make -fpic behave as -fPIC unless -msmall-data is specified. */
+  if (flag_pic == 2 && TARGET_SMALL_DATA)
+    warning (0, "-fPIC used with -msmall-data");
+#else
   /* Infer TARGET_SMALL_DATA from -fpic/-fPIC.  */
   if (flag_pic == 1)
     target_flags |= MASK_SMALL_DATA;
   else if (flag_pic == 2)
     target_flags &= ~MASK_SMALL_DATA;
+#endif
 
   /* Align labels and loops for optimal branching.  */
   /* ??? Kludge these by not doing anything if we don't optimize.  */
@@@@ -7592,6 +7598,9 @@@@ alpha_expand_prologue (void)
   sa_size = alpha_sa_size ();
   frame_size = compute_frame_size (get_frame_size (), sa_size);
 
+  if (warn_stack_larger_than && frame_size > stack_larger_than_size)
+    warning (OPT_Wstack_larger_than_, "stack usage is %ld bytes", frame_size);
+
   if (flag_stack_usage_info)
     current_function_static_stack_size = frame_size;
 
@@@@ -7630,6 +7639,8 @@@@ alpha_expand_prologue (void)
   if (flag_stack_check)
     probed_size += STACK_CHECK_PROTECT;
 
+if (flag_stack_check || STACK_CHECK_BUILTIN)
+  {
   if (probed_size <= 32768)
     {
       if (probed_size > 4096)
@@@@ -7708,6 +7719,34 @@@@ alpha_expand_prologue (void)
 		    gen_rtx_SET (VOIDmode, stack_pointer_rtx,
 				 plus_constant (Pmode, stack_pointer_rtx,
 						-frame_size)));
+    }
+    }
+  else
+    {
+      if (frame_size <= 32768)
+	{
+	  if (frame_size != 0)
+	    FRP (emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,
+					GEN_INT (-frame_size))));
+	}
+      else
+	{
+	  rtx count = gen_rtx_REG (DImode, 23);
+	  rtx seq;
+ 
+	  emit_move_insn (count, GEN_INT (-frame_size));
+	  seq = emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,
+				       count));
+ 
+	  /* This alternative is special, because the DWARF code cannot
+	     possibly intuit through the loop above.  So we invent this
+	     note it looks at instead.  */
+	  RTX_FRAME_RELATED_P (seq) = 1;
+          add_reg_note (seq, REG_FRAME_RELATED_EXPR,
+		    gen_rtx_SET (VOIDmode, stack_pointer_rtx,
+				 plus_constant (Pmode, stack_pointer_rtx,
+						-frame_size)));
+	}
     }
 
   /* Cope with very large offsets to the register save area.  */
@


1.3
log
@Update to 4.8.2; adastraps hosted by/testing/ok tobiasu@@
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_config_alpha_alpha_c,v 1.2 2013/04/20 20:54:04 pascal Exp $
@


1.2
log
@Add alpha support.

Help/testing by naddy@@
@
text
@d1 3
a3 3
$OpenBSD: patch-gcc_config_alpha_alpha_c,v 1.1.1.1 2013/04/08 08:20:26 pascal Exp $
--- gcc/config/alpha/alpha.c.orig	Thu Jan 10 21:38:27 2013
+++ gcc/config/alpha/alpha.c	Wed Apr 17 23:08:31 2013
d22 1
a22 1
@@@@ -7594,6 +7600,9 @@@@ alpha_expand_prologue (void)
d32 1
a32 1
@@@@ -7632,6 +7641,8 @@@@ alpha_expand_prologue (void)
d41 1
a41 1
@@@@ -7710,6 +7721,34 @@@@ alpha_expand_prologue (void)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_config_alpha_alpha_c,v 1.2 2012/07/01 18:56:45 pascal Exp $
d3 1
a3 1
+++ gcc/config/alpha/alpha.c	Wed Jan 23 22:48:29 2013
d41 5
a45 4
@@@@ -7825,6 +7836,44 @@@@ alpha_expand_prologue (void)
 				           stack_pointer_rtx, sa_reg)));
 	}
     }
d53 1
a53 3
+					GEN_INT (TARGET_ABI_UNICOSMK
+						 ? -frame_size + 64
+						 : -frame_size))));
d60 1
a60 3
+	  emit_move_insn (count, GEN_INT (TARGET_ABI_UNICOSMK
+					  ? -frame_size + 64
+					  : -frame_size));
d68 4
a71 8
+	  REG_NOTES (seq)
+	    = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,
+				 gen_rtx_SET (VOIDmode, stack_pointer_rtx,
+				   gen_rtx_PLUS (Pmode, stack_pointer_rtx,
+						 GEN_INT (TARGET_ABI_UNICOSMK
+							  ? -frame_size + 64
+							  : -frame_size))),
+				 REG_NOTES (seq));
d73 1
a73 3
+    }
+
+
d75 1
a75 2
   /* The ABIs for VMS and OSF/1 say that while we can schedule insns into
      the prologue, for exception handling reasons, we cannot do this for
@


1.1.1.1
log
@Import gcc 4.8.

For a full Changelog, see: http://gcc.gnu.org/gcc-4.8/changes.html

Tested by me on amd64, i386 and powerpc and by brad@@ on sparc64.

Adds support for -java on powerpc.  -faggressive-loop-optimizations is
disabled by default in the port, and the default debugging format changed
to DWARF2 (instead of 4).

tweaks and ok tobiasu@@
@
text
@@
