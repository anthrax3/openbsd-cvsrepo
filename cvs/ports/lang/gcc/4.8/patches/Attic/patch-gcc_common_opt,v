head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.1.1.0.4
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	pascal_20130804:1.1.1.1
	pascal:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.09.10.08.23.55;	author pascal;	state dead;
branches;
next	1.3;
commitid	ovY05rVdcfWNuWWc;

1.3
date	2015.01.08.20.23.21;	author pascal;	state Exp;
branches;
next	1.2;
commitid	sYWo0J70bGiiom5u;

1.2
date	2014.06.08.18.55.36;	author brad;	state Exp;
branches;
next	1.1;
commitid	mCKxwWpaJ0MaKY3I;

1.1
date	2013.04.08.08.20.25;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.04.08.08.20.25;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.4
log
@tedu gcc 4.8

ok sthen@@ tobiasu@@
@
text
@$OpenBSD: patch-gcc_common_opt,v 1.3 2015/01/08 20:23:21 pascal Exp $

Add stack protector strong support.

http://repo.or.cz/w/official-gcc.git/commit/b156ec373ccf27f4fcce7972de5e043d35acea43

--- gcc/common.opt.orig	Fri Jun 13 18:39:37 2014
+++ gcc/common.opt	Mon Jan  5 22:42:05 2015
@@@@ -572,6 +572,10 @@@@ Wlarger-than=
 Common RejectNegative Joined UInteger Warning
 -Wlarger-than=<number>	Warn if an object is larger than <number> bytes
 
+Wstack-larger-than-
+Common RejectNegative Joined UInteger
+-Wstack-larger-than-<number> Warn if a function is using more than <number> bytes of stack space for its local variables.
+
 Wunsafe-loop-optimizations
 Common Var(warn_unsafe_loop_optimizations) Warning
 Warn if the loop cannot be optimized due to nontrivial assumptions.
@@@@ -636,7 +640,7 @@@@ Common Var(warn_suggest_attribute_noreturn) Warning
 Warn about functions which might be candidates for __attribute__((noreturn))
 
 Wsystem-headers
-Common Var(warn_system_headers) Warning
+Common Var(warn_system_headers) Init(1) Warning
 Do not suppress warnings from system headers
 
 Wtrampolines
@@@@ -691,6 +695,10 @@@@ Wunused-variable
 Common Var(warn_unused_variable) Warning EnabledBy(Wunused)
 Warn when a variable is unused
 
+Wvariable-decl
+Common Var(warn_variable_decl)
+Warn about variable-sized declarations
+
 Wcoverage-mismatch
 Common Var(warn_coverage_mismatch) Init(1) Warning
 Warn in case profiles in -fprofile-use do not match
@@@@ -798,7 +806,7 @@@@ fabi-version=
 Common Joined RejectNegative UInteger Var(flag_abi_version) Init(2)
 
 faggressive-loop-optimizations
-Common Report Var(flag_aggressive_loop_optimizations) Optimization Init(1) 
+Common Report Var(flag_aggressive_loop_optimizations) Optimization
 Aggressively optimize loops using language constraints
 
 falign-functions
@@@@ -995,7 +1003,7 @@@@ Common Report Var(flag_delete_dead_exceptions) Init(0)
 Delete dead instructions that may throw exceptions
 
 fdelete-null-pointer-checks
-Common Report Var(flag_delete_null_pointer_checks) Init(1) Optimization
+Common Report Var(flag_delete_null_pointer_checks)
 Delete useless null pointer checks
 
 fdevirtualize
@@@@ -1251,7 +1259,7 @@@@ Enable guessing of branch probabilities
 ; On SVR4 targets, it also controls whether or not to emit a
 ; string identifying the compiler.
 fident
-Common Report Var(flag_no_ident,0)
+Common Report Var(flag_no_ident,0) Init(1)
 Process #ident directives
 
 fif-conversion
@@@@ -1603,7 +1611,7 @@@@ Common Report Var(flag_pic,2) Negative(fPIE)
 Generate position-independent code if possible (large mode)
 
 fPIE
-Common Report Var(flag_pie,2) Negative(fpic)
+Common Report Var(flag_pie,2) Negative(fpic) Init(PIE_DEFAULT)
 Generate position-independent code for executables if possible (large mode)
 
 fpic
@@@@ -1906,13 +1914,17 @@@@ Common RejectNegative Joined Var(common_deferred_optio
 -fstack-limit-symbol=<name>	Trap if the stack goes past symbol <name>
 
 fstack-protector
-Common Report Var(flag_stack_protect, 1)
+Common Report Var(flag_stack_protect, 3) Init(-1)
 Use propolice as a stack protection method
 
 fstack-protector-all
 Common Report RejectNegative Var(flag_stack_protect, 2)
 Use a stack protection method for every function
 
+fstack-protector-strong
+Common Report RejectNegative Var(flag_stack_protect, 3)
+Use a smart stack protection method for certain functions
+
 fstack-usage
 Common RejectNegative Var(flag_stack_usage)
 Output stack usage information on a per-function basis
@@@@ -2311,7 +2323,7 @@@@ Common JoinedOrMissing Negative(gdwarf-)
 Generate debug information in COFF format
 
 gdwarf-
-Common Joined UInteger Var(dwarf_version) Init(4) Negative(gstabs)
+Common Joined UInteger Var(dwarf_version) Init(2) Negative(gstabs)
 Generate debug information in DWARF v2 (or later) format
 
 ggdb
@@@@ -2395,6 +2407,9 @@@@ no-canonical-prefixes
 Driver
 
 nodefaultlibs
+Driver
+
+nopie
 Driver
 
 nostartfiles
@


1.3
log
@Update to GCC 4.8.4.

Additionally, from tobiasu@@:

Disable the optimized shared Ada.Strings.Unbounded implementation until
overlapping memcpy() is fixed. Requires fresh adastrap's.

Rename all binaries starting with "egnat" back to "gnat". Reduces the
amount of workarounds needed to build various Ada software - including
GNAT itself.

Stop running the fixincludes script - saves time and pain. If our
headers are broken, we want to know and fix them ourselves, thank you
very much.

Drop gnat debug patch for a linker issue that was fixed some time ago.

ok tobiasu@@
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_common_opt,v 1.2 2014/06/08 18:55:36 brad Exp $
@


1.2
log
@Add stack protector strong support and enable it by default.

ok pascal@@
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_common_opt,v 1.1.1.1 2013/04/08 08:20:25 pascal Exp $
d7 2
a8 2
--- gcc/common.opt.orig	Thu Mar 14 05:13:36 2013
+++ gcc/common.opt	Sat May 24 17:11:22 2014
d58 1
a58 1
@@@@ -1247,7 +1255,7 @@@@ Enable guessing of branch probabilities
d67 1
a67 1
@@@@ -1599,7 +1607,7 @@@@ Common Report Var(flag_pic,2) Negative(fPIE)
d76 1
a76 1
@@@@ -1902,13 +1910,17 @@@@ Common RejectNegative Joined Var(common_deferred_optio
d95 1
a95 1
@@@@ -2307,7 +2319,7 @@@@ Common JoinedOrMissing Negative(gdwarf-)
d104 1
a104 1
@@@@ -2391,6 +2403,9 @@@@ no-canonical-prefixes
@


1.1
log
@Initial revision
@
text
@d1 8
a8 3
$OpenBSD: patch-gcc_common_opt,v 1.2 2012/09/01 00:00:32 pascal Exp $
--- gcc/common.opt.orig	Thu Mar 14 10:13:36 2013
+++ gcc/common.opt	Mon Mar 25 22:55:38 2013
d76 1
a76 1
@@@@ -1902,7 +1910,7 @@@@ Common RejectNegative Joined Var(common_deferred_optio
d81 1
a81 1
+Common Report Var(flag_stack_protect, 1) Init(-1)
d85 11
a95 1
@@@@ -2307,7 +2315,7 @@@@ Common JoinedOrMissing Negative(gdwarf-)
d104 1
a104 1
@@@@ -2391,6 +2399,9 @@@@ no-canonical-prefixes
@


1.1.1.1
log
@Import gcc 4.8.

For a full Changelog, see: http://gcc.gnu.org/gcc-4.8/changes.html

Tested by me on amd64, i386 and powerpc and by brad@@ on sparc64.

Adds support for -java on powerpc.  -faggressive-loop-optimizations is
disabled by default in the port, and the default debugging format changed
to DWARF2 (instead of 4).

tweaks and ok tobiasu@@
@
text
@@
