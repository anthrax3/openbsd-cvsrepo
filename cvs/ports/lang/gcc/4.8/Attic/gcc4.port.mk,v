head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.10
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.6
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	pascal_20130804:1.1.1.1
	pascal:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.09.10.08.23.54;	author pascal;	state dead;
branches;
next	1.3;
commitid	ovY05rVdcfWNuWWc;

1.3
date	2013.12.01.20.05.41;	author zhuk;	state Exp;
branches;
next	1.2;

1.2
date	2013.11.27.20.42.08;	author zhuk;	state Exp;
branches;
next	1.1;

1.1
date	2013.04.08.08.20.19;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.04.08.08.20.19;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.4
log
@tedu gcc 4.8

ok sthen@@ tobiasu@@
@
text
@# $OpenBSD: gcc4.port.mk,v 1.3 2013/12/01 20:05:41 zhuk Exp $

MODGCC4_ARCHS ?=
MODGCC4_LANGS ?=


.if ${MODGCC4_LANGS:L} != "java" && !${MODGCC4_LANGS:L:Mc}
# Always include support for this
# unless only java is needed
MODGCC4_LANGS +=	c
.endif

_MODGCC4_OKAY = c c++ java fortran go
.for _l in ${MODGCC4_LANGS:L}
.  if !${_MODGCC4_OKAY:M${_l}}
ERRORS += "Fatal: unknown language ${_l}"
.  endif
.endfor

_MODGCC4_ARCH_USES = No

.if ${MODGCC4_ARCHS:L} != ""
.  for _i in ${MODGCC4_ARCHS}
.    if !empty(MACHINE_ARCH:M${_i})
_MODGCC4_ARCH_USES = Yes
.    endif
.  endfor
.endif

COMPILER_VERSION ?= gcc2

_MODGCC4_LINKS =
.if ${_MODGCC4_ARCH_USES:L} == "yes"

.  if ${MODGCC4_LANGS:L:Mc}
BUILD_DEPENDS += lang/gcc/4.8>=4.8,<4.9
_MODGCC4_LINKS += egcc gcc egcc cc
.  endif

.  if ${MODGCC4_LANGS:L:Mc++}
BUILD_DEPENDS += lang/gcc/4.8,-c++>=4.8,<4.9
MODGCC4STDCPP = estdc++
MODGCC4_CPPLIBDEP = lang/gcc/4.8,-estdc>=4.8,<4.9
LIB_DEPENDS += ${MODGCC4_CPPLIBDEP}
MODGCC4_CPPWANTLIB = estdc++>=16
WANTLIB += ${MODGCC4_CPPWANTLIB}
_MODGCC4_LINKS += eg++ g++ eg++ c++
.  endif

.  if ${MODGCC4_LANGS:L:Mfortran}
BUILD_DEPENDS += lang/gcc/4.8,-f95>=4.8,<4.9
WANTLIB += gfortran>=3
LIB_DEPENDS += lang/gcc/4.8,-f95>=4.8,<4.9
_MODGCC4_LINKS += egfortran gfortran
.  endif

.  if ${MODGCC4_LANGS:L:Mjava}
BUILD_DEPENDS += lang/gcc/4.8,-java>=4.8,<4.9
MODGCC4_GCJWANTLIB = gcj
MODGCC4_GCJLIBDEP = lang/gcc/4.8,-java>=4.8,<4.9
_MODGCC4_LINKS += egcj gcj egcjh gcjh egjar gjar egij gij
.  endif

#.  if ${MODGCC4_LANGS:L:Mgo}
#BUILD_DEPENDS += lang/gcc/4.8,-go>=4.8,<4.9
#WANTLIB += go
#LIB_DEPENDS += lang/gcc/4.8,-go>=4.8,<4.9
#_MODGCC4_LINKS += egccgo gccgo
#.  endif
.endif

.if !empty(_MODGCC4_LINKS)
.  if "${USE_CCACHE:L}" == "yes" && "${NO_CCACHE:L}" != "yes"
.    for _src _dest in ${_MODGCC4_LINKS}
MODGCC4_post-patch +=	rm -f ${WRKDIR}/bin/${_dest};
MODGCC4_post-patch +=	echo '\#!/bin/sh' >${WRKDIR}/bin/${_dest};
MODGCC4_post-patch +=	echo exec ccache ${LOCALBASE}/bin/${_src} \"\$$@@\"
MODGCC4_post-patch +=	>>${WRKDIR}/bin/${_dest};
MODGCC4_post-patch +=	chmod +x ${WRKDIR}/bin/${_dest};
.    endfor
.  else
.    for _src _dest in ${_MODGCC4_LINKS}
MODGCC4_post-patch += ln -sf ${LOCALBASE}/bin/${_src} ${WRKDIR}/bin/${_dest};
.    endfor
.  endif
.endif

@


1.3
log
@Make ccache work with Clang and GCC 4.6 & 4.8.

tested and okay juanfra@@; also okay sthen@@ for Clang part
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.2 2013/11/27 20:42:08 zhuk Exp $
@


1.2
log
@Force NO_CCACHE for non-base compilers. Before that, ports system tried to
enable it through symlinks in ${WRKDIR}/bin/, which were effectively
overriden by gcc4.port.mk or clang.port.mk - thus lying that ccache was
used while it was not.

Still investigating for a good solution to actually enable ccache support
for non-base compilers.

okay juanfra@@, sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.1.1.1 2013/04/08 08:20:19 pascal Exp $
a37 3

# not supported
NO_CCACHE =	Yes
a47 3

# not supported
NO_CCACHE =	Yes
d73 10
a82 1
.  for _src _dest in ${_MODGCC4_LINKS}
d84 2
a85 1
.  endfor
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.3 2012/08/26 10:19:48 pascal Exp $
d38 3
d51 3
@


1.1.1.1
log
@Import gcc 4.8.

For a full Changelog, see: http://gcc.gnu.org/gcc-4.8/changes.html

Tested by me on amd64, i386 and powerpc and by brad@@ on sparc64.

Adds support for -java on powerpc.  -faggressive-loop-optimizations is
disabled by default in the port, and the default debugging format changed
to DWARF2 (instead of 4).

tweaks and ok tobiasu@@
@
text
@@
