head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.16
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.14
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.10
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.12
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.8
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.6
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.4
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3;
locks; strict;
comment	@# @;


1.5
date	2013.06.07.07.54.23;	author pascal;	state Exp;
branches;
next	1.4;

1.4
date	2012.09.01.00.00.32;	author pascal;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.02.15.28.04;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2012.03.31.20.02.03;	author pascal;	state Exp;
branches;
next	1.1;

1.1
date	2012.02.16.21.30.15;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to GCC 4.6.4.  tested by and adastrap-sparc64 built by tobiasu@@
@
text
@$OpenBSD: patch-gcc_common_opt,v 1.4 2012/09/01 00:00:32 pascal Exp $
--- gcc/common.opt.orig	Mon Jan 14 17:35:23 2013
+++ gcc/common.opt	Sat Apr 13 16:20:31 2013
@@@@ -546,6 +546,10 @@@@ Wlarger-than=
 Common RejectNegative Joined UInteger Warning
 -Wlarger-than=<number>	Warn if an object is larger than <number> bytes
 
+Wstack-larger-than-
+Common RejectNegative Joined UInteger
+-Wstack-larger-than-<number> Warn if a function is using more than <number> bytes of stack space for its local variables.
+
 Wunsafe-loop-optimizations
 Common Var(warn_unsafe_loop_optimizations) Warning
 Warn if the loop cannot be optimized due to nontrivial assumptions.
@@@@ -619,7 +623,7 @@@@ Common Var(warn_switch_enum) Warning
 Warn about all enumerated switches missing a specific case
 
 Wsystem-headers
-Common Var(warn_system_headers) Warning
+Common Var(warn_system_headers) Init(1) Warning
 Do not suppress warnings from system headers
 
 Wtrampolines
@@@@ -670,6 +674,10 @@@@ Wunused-variable
 Common Var(warn_unused_variable) Init(-1) Warning
 Warn when a variable is unused
 
+Wvariable-decl
+Common Var(warn_variable_decl)
+Warn about variable-sized declarations
+
 Wcoverage-mismatch
 Common Var(warn_coverage_mismatch) Init(1) Warning
 Warn in case profiles in -fprofile-use do not match
@@@@ -941,7 +949,7 @@@@ Common Report Var(flag_delayed_branch) Optimization
 Attempt to fill delay slots of branch instructions
 
 fdelete-null-pointer-checks
-Common Report Var(flag_delete_null_pointer_checks) Init(1) Optimization
+Common Report Var(flag_delete_null_pointer_checks)
 Delete useless null pointer checks
 
 fdevirtualize
@@@@ -1164,7 +1172,7 @@@@ Enable guessing of branch probabilities
 ; On SVR4 targets, it also controls whether or not to emit a
 ; string identifying the compiler.
 fident
-Common Report Var(flag_no_ident,0)
+Common Report Var(flag_no_ident,0) Init(1)
 Process #ident directives
 
 fif-conversion
@@@@ -1492,7 +1500,7 @@@@ Common Report Var(flag_pic,2)
 Generate position-independent code if possible (large mode)
 
 fPIE
-Common Report Var(flag_pie,2)
+Common Report Var(flag_pie,2) Init(PIE_DEFAULT)
 Generate position-independent code for executables if possible (large mode)
 
 fpic
@@@@ -1782,7 +1790,7 @@@@ Common RejectNegative Joined Var(common_deferred_optio
 -fstack-limit-symbol=<name>	Trap if the stack goes past symbol <name>
 
 fstack-protector
-Common Report Var(flag_stack_protect, 1)
+Common Report Var(flag_stack_protect, 1) Init(-1)
 Use propolice as a stack protection method
 
 fstack-protector-all
@


1.4
log
@Patch GCC and derived ports to use PIE by default on the same architectures it
is enabled on in base; except for gcc 3.3, which does not have PIE support and
therefore needs to pass -nopie to the linker.

Also, sync powerpc pthread specs with base.  From Brad.

ok naddy@@
@
text
@d1 4
a4 4
$OpenBSD: patch-gcc_common_opt,v 1.3 2012/04/02 15:28:04 pascal Exp $
--- gcc/common.opt.orig	Mon Apr 11 17:26:47 2011
+++ gcc/common.opt	Wed Aug 29 23:44:11 2012
@@@@ -543,6 +543,10 @@@@ Wlarger-than=
d15 1
a15 1
@@@@ -616,7 +620,7 @@@@ Common Var(warn_switch_enum) Warning
d24 1
a24 1
@@@@ -667,6 +671,10 @@@@ Wunused-variable
d35 1
a35 1
@@@@ -938,7 +946,7 @@@@ Common Report Var(flag_delayed_branch) Optimization
d44 1
a44 1
@@@@ -1161,7 +1169,7 @@@@ Enable guessing of branch probabilities
d53 1
a53 1
@@@@ -1489,7 +1497,7 @@@@ Common Report Var(flag_pic,2)
d62 1
a62 1
@@@@ -1779,7 +1787,7 @@@@ Common RejectNegative Joined Var(common_deferred_optio
@


1.3
log
@Apply the same fix as to base gcc wrt -fident.

ok espie@@
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_common_opt,v 1.2 2012/03/31 20:02:03 pascal Exp $
d3 1
a3 1
+++ gcc/common.opt	Sun Apr  1 01:43:48 2012
d53 9
@


1.2
log
@Update to gcc 4.6.3.

Also, sync a bit with base gcc:
- disable unsafe builtins
- disable -Wpointer-sign in -Wall
- move -fstrict-aliasing to -O3, disable -fstrict-overflow and
  -fdelete-null-pointer-checks
- enable -Wsystem-headers
- default to march=i486 on i386
- fix crtsavres on powerpc
- sync sparc64 config
- implement -Wvariable-decl, -Wstack-larger-than-N (alpha, amd64, i386, sparc,
  sparc64), -Wtrampolines, -ftrampolines
- default to -fno-ident
- fix -rdynamic by passing -export-dynamic to ld(1)

some bits from Brad, others from me.

tested by myself and jsg@@, adastrap now hosted by sthen@@ (thanks).

ok jsg@@ sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_common_opt,v 1.1 2012/02/16 21:30:15 pascal Exp $
d3 1
a3 1
+++ gcc/common.opt	Sun Mar 11 22:52:35 2012
d49 1
a49 1
+Common Report Var(flag_no_ident,1)
@


1.1
log
@- modify stack protection to work with our native libc routines, passing the
  function name to __stack_smash_handler.  Only supported for "c-family"
  languages at the moment.
- enable it per default on archs where FRAME_GROWS_DOWNWARD
- remove obsolete comment about adastrap needing a specific libc
- -java actually needs a runtime dep on -main for -lgcc

ok espie@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 51
a53 2
+++ gcc/common.opt	Sat Feb 11 08:40:59 2012
@@@@ -1779,7 +1779,7 @@@@ Common RejectNegative Joined Var(common_deferred_optio
@

