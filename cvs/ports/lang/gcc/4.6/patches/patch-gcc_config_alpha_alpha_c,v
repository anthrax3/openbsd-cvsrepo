head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.14
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.10
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.8
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.6
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.4
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	pascal_20111114:1.1.1.1
	pascal:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.06.07.07.54.23;	author pascal;	state Exp;
branches;
next	1.3;

1.3
date	2012.03.31.20.02.03;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.14.15.37.55;	author pascal;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.14.13.00.57;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.11.14.13.00.57;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to GCC 4.6.4.  tested by and adastrap-sparc64 built by tobiasu@@
@
text
@$OpenBSD: patch-gcc_config_alpha_alpha_c,v 1.3 2012/03/31 20:02:03 pascal Exp $
--- gcc/config/alpha/alpha.c.orig	Thu Aug  9 23:49:40 2012
+++ gcc/config/alpha/alpha.c	Sat Apr 13 16:20:31 2013
@@@@ -227,6 +227,10 @@@@ alpha_handle_option (size_t code, const char *arg, int
       target_flags |= MASK_IEEE_CONFORMANT;
       break;
 
+    case OPT_mno_ieee:
+      target_flags &= ~(MASK_IEEE_WITH_INEXACT|MASK_IEEE_CONFORMANT);
+      break;
+
     case OPT_mtls_size_:
       if (value != 16 && value != 32 && value != 64)
 	error ("bad value %qs for -mtls-size switch", arg);
@@@@ -487,11 +491,17 @@@@ alpha_option_override (void)
   if (!global_options_set.x_g_switch_value)
     g_switch_value = 8;
 
+#ifdef OPENBSD_NATIVE
+  /* Make -fpic behave as -fPIC unless -msmall-data is specified. */
+  if (flag_pic == 2 && TARGET_SMALL_DATA)
+    warning (0, "-fPIC used with -msmall-data");
+#else
   /* Infer TARGET_SMALL_DATA from -fpic/-fPIC.  */
   if (flag_pic == 1)
     target_flags |= MASK_SMALL_DATA;
   else if (flag_pic == 2)
     target_flags &= ~MASK_SMALL_DATA;
+#endif
 
   /* Align labels and loops for optimal branching.  */
   /* ??? Kludge these by not doing anything if we don't optimize and also if
@@@@ -7823,6 +7833,9 @@@@ alpha_expand_prologue (void)
   sa_size = alpha_sa_size ();
   frame_size = compute_frame_size (get_frame_size (), sa_size);
 
+  if (warn_stack_larger_than && frame_size > stack_larger_than_size)
+    warning (OPT_Wstack_larger_than_, "stack usage is %d bytes", frame_size);
+
   if (flag_stack_usage)
     current_function_static_stack_size = frame_size;
 
@@@@ -7864,6 +7877,8 @@@@ alpha_expand_prologue (void)
   if (flag_stack_check)
     probed_size += STACK_CHECK_PROTECT;
 
+if (flag_stack_check || STACK_CHECK_BUILTIN)
+  {
   if (probed_size <= 32768)
     {
       if (probed_size > 4096)
@@@@ -7957,6 +7972,44 @@@@ alpha_expand_prologue (void)
 							? -frame_size + 64
 							: -frame_size))));
     }
+    }
+  else
+    {
+      if (frame_size <= 32768)
+	{
+	  if (frame_size != 0)
+	    FRP (emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,
+					GEN_INT (TARGET_ABI_UNICOSMK
+						 ? -frame_size + 64
+						 : -frame_size))));
+	}
+      else
+	{
+	  rtx count = gen_rtx_REG (DImode, 23);
+	  rtx seq;
+ 
+	  emit_move_insn (count, GEN_INT (TARGET_ABI_UNICOSMK
+					  ? -frame_size + 64
+					  : -frame_size));
+	  seq = emit_insn (gen_adddi3 (stack_pointer_rtx, stack_pointer_rtx,
+				       count));
+ 
+	  /* This alternative is special, because the DWARF code cannot
+	     possibly intuit through the loop above.  So we invent this
+	     note it looks at instead.  */
+	  RTX_FRAME_RELATED_P (seq) = 1;
+	  REG_NOTES (seq)
+	    = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR,
+				 gen_rtx_SET (VOIDmode, stack_pointer_rtx,
+				   gen_rtx_PLUS (Pmode, stack_pointer_rtx,
+						 GEN_INT (TARGET_ABI_UNICOSMK
+							  ? -frame_size + 64
+							  : -frame_size))),
+				 REG_NOTES (seq));
+	}
+    }
+
+
 
   if (!TARGET_ABI_UNICOSMK)
     {
@


1.3
log
@Update to gcc 4.6.3.

Also, sync a bit with base gcc:
- disable unsafe builtins
- disable -Wpointer-sign in -Wall
- move -fstrict-aliasing to -O3, disable -fstrict-overflow and
  -fdelete-null-pointer-checks
- enable -Wsystem-headers
- default to march=i486 on i386
- fix crtsavres on powerpc
- sync sparc64 config
- implement -Wvariable-decl, -Wstack-larger-than-N (alpha, amd64, i386, sparc,
  sparc64), -Wtrampolines, -ftrampolines
- default to -fno-ident
- fix -rdynamic by passing -export-dynamic to ld(1)

some bits from Brad, others from me.

tested by myself and jsg@@, adastrap now hosted by sthen@@ (thanks).

ok jsg@@ sthen@@
@
text
@d1 3
a3 3
$OpenBSD: patch-gcc_config_alpha_alpha_c,v 1.2 2011/11/14 15:37:55 pascal Exp $
--- gcc/config/alpha/alpha.c.orig	Sat Aug  6 20:41:14 2011
+++ gcc/config/alpha/alpha.c	Mon Mar 12 08:44:40 2012
d33 1
a33 1
@@@@ -7803,6 +7813,9 @@@@ alpha_expand_prologue (void)
d43 1
a43 1
@@@@ -7844,6 +7857,8 @@@@ alpha_expand_prologue (void)
d52 1
a52 1
@@@@ -7937,6 +7952,44 @@@@ alpha_expand_prologue (void)
@


1.2
log
@add a patch for alpha.
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_config_alpha_alpha_c,v 1.1.1.1 2011/11/14 13:00:57 pascal Exp $
d3 1
a3 1
+++ gcc/config/alpha/alpha.c	Mon Nov 14 15:58:46 2011
d33 11
a43 1
@@@@ -7844,6 +7854,8 @@@@ alpha_expand_prologue (void)
d52 1
a52 1
@@@@ -7937,6 +7949,44 @@@@ alpha_expand_prologue (void)
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- gcc/config/alpha/alpha.c.orig	Sat Nov 12 13:09:38 2011
+++ gcc/config/alpha/alpha.c	Sat Nov 12 13:22:02 2011
d33 54
@


1.1.1.1
log
@now import for real, sorry ...
@
text
@@
