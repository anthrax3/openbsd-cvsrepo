head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.20
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.18
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.16
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.12
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.10
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2013.01.16.19.28.48;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2012.09.01.00.00.32;	author pascal;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.31.20.02.03;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Add hppa support.  Still a bit rough around the edges: Some optimisations
(-foptimize-sibling-calls and -freorder-blocks) cause segfaults during build,
so don't include them in -O2 on hppa.  Also, -go is not supported.

requested by and ok brad@@ and tested on one of his machines
@
text
@$OpenBSD: patch-gcc_opts_c,v 1.2 2012/09/01 00:00:32 pascal Exp $
--- gcc/opts.c.orig	Thu Feb 17 17:51:57 2011
+++ gcc/opts.c	Mon Jan 14 16:07:20 2013
@@@@ -43,6 +43,9 @@@@ along with GCC; see the file COPYING3.  If not see
   ((strncmp (prefix, string, sizeof prefix - 1) == 0) \
    ? ((string += sizeof prefix - 1), 1) : 0)
 
+int warn_stack_larger_than;
+HOST_WIDE_INT stack_larger_than_size;
+
 void
 set_struct_debug_option (struct gcc_options *opts, location_t loc,
 			 const char *spec)
@@@@ -464,7 +467,9 @@@@ static const struct default_options default_options_ta
     { OPT_LEVELS_2_PLUS, OPT_fpartial_inlining, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fthread_jumps, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fcrossjumping, NULL, 1 },
+#ifndef __hppa__
     { OPT_LEVELS_2_PLUS, OPT_foptimize_sibling_calls, NULL, 1 },
+#endif
     { OPT_LEVELS_2_PLUS, OPT_fcse_follow_jumps, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fgcse, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_fexpensive_optimizations, NULL, 1 },
@@@@ -477,9 +482,9 @@@@ static const struct default_options default_options_ta
     { OPT_LEVELS_2_PLUS, OPT_fschedule_insns2, NULL, 1 },
 #endif
     { OPT_LEVELS_2_PLUS, OPT_fregmove, NULL, 1 },
-    { OPT_LEVELS_2_PLUS, OPT_fstrict_aliasing, NULL, 1 },
-    { OPT_LEVELS_2_PLUS, OPT_fstrict_overflow, NULL, 1 },
+#ifndef __hppa__
     { OPT_LEVELS_2_PLUS, OPT_freorder_blocks, NULL, 1 },
+#endif
     { OPT_LEVELS_2_PLUS, OPT_freorder_functions, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_ftree_vrp, NULL, 1 },
     { OPT_LEVELS_2_PLUS, OPT_ftree_builtin_call_dce, NULL, 1 },
@@@@ -494,6 +499,7 @@@@ static const struct default_options default_options_ta
     { OPT_LEVELS_2_PLUS, OPT_falign_functions, NULL, 1 },
 
     /* -O3 optimizations.  */
+    { OPT_LEVELS_3_PLUS, OPT_fstrict_aliasing, NULL, 1 },
     { OPT_LEVELS_3_PLUS, OPT_ftree_loop_distribute_patterns, NULL, 1 },
     { OPT_LEVELS_3_PLUS, OPT_fpredictive_commoning, NULL, 1 },
     /* Inlining of functions reducing size is a good idea with -Os
@@@@ -691,6 +697,8 @@@@ finish_options (struct gcc_options *opts, struct gcc_o
 
   if (!opts->x_flag_opts_finished)
     {
+      if (opts->x_flag_pic || opts->x_profile_flag)
+        opts->x_flag_pie = 0;
       if (opts->x_flag_pie)
 	opts->x_flag_pic = opts->x_flag_pie;
       if (opts->x_flag_pic && !opts->x_flag_pie)
@@@@ -1411,6 +1419,11 @@@@ common_handle_option (struct gcc_options *opts,
     case OPT_Wframe_larger_than_:
       opts->x_frame_larger_than_size = value;
       opts->x_warn_frame_larger_than = value != -1;
+      break;
+
+    case OPT_Wstack_larger_than_:
+      stack_larger_than_size = value;
+      warn_stack_larger_than = stack_larger_than_size != -1;
       break;
 
     case OPT_Wstrict_aliasing:
@


1.2
log
@Patch GCC and derived ports to use PIE by default on the same architectures it
is enabled on in base; except for gcc 3.3, which does not have PIE support and
therefore needs to pass -nopie to the linker.

Also, sync powerpc pthread specs with base.  From Brad.

ok naddy@@
@
text
@d1 3
a3 3
$OpenBSD: patch-gcc_opts_c,v 1.1 2012/03/31 20:02:03 pascal Exp $
--- gcc/opts.c.orig	Thu Feb 17 23:51:57 2011
+++ gcc/opts.c	Wed Aug 29 23:59:07 2012
d14 11
a24 1
@@@@ -477,8 +480,6 @@@@ static const struct default_options default_options_ta
d30 1
d32 1
d35 2
a36 1
@@@@ -494,6 +495,7 @@@@ static const struct default_options default_options_ta
d44 1
a44 1
@@@@ -691,6 +693,8 @@@@ finish_options (struct gcc_options *opts, struct gcc_o
d53 1
a53 1
@@@@ -1411,6 +1415,11 @@@@ common_handle_option (struct gcc_options *opts,
@


1.1
log
@Update to gcc 4.6.3.

Also, sync a bit with base gcc:
- disable unsafe builtins
- disable -Wpointer-sign in -Wall
- move -fstrict-aliasing to -O3, disable -fstrict-overflow and
  -fdelete-null-pointer-checks
- enable -Wsystem-headers
- default to march=i486 on i386
- fix crtsavres on powerpc
- sync sparc64 config
- implement -Wvariable-decl, -Wstack-larger-than-N (alpha, amd64, i386, sparc,
  sparc64), -Wtrampolines, -ftrampolines
- default to -fno-ident
- fix -rdynamic by passing -export-dynamic to ld(1)

some bits from Brad, others from me.

tested by myself and jsg@@, adastrap now hosted by sthen@@ (thanks).

ok jsg@@ sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ gcc/opts.c	Sun Mar 11 22:26:06 2012
d31 10
a40 1
@@@@ -1411,6 +1413,11 @@@@ common_handle_option (struct gcc_options *opts,
@

