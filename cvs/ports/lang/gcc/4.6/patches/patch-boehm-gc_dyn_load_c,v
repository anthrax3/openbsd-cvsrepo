head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.16
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.12
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.14
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.8
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	pascal_20111114:1.1.1.1
	pascal:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.10.17.19.58.21;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.14.13.00.57;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.11.14.13.00.57;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix boehm-gc and increase gcj default thread stack size. Makes gjc work
well enough to bootstrap devel/jdk/1.6. okay pascal@@ jasper@@
@
text
@$OpenBSD: patch-boehm-gc_dyn_load_c,v 1.1.1.1 2011/11/14 13:00:57 pascal Exp $
--- boehm-gc/dyn_load.c.orig	Mon Nov 29 09:58:16 2010
+++ boehm-gc/dyn_load.c	Wed Oct 10 09:15:24 2012
@@@@ -60,6 +60,7 @@@@
     !defined(HPUX) && !(defined(LINUX) && defined(__ELF__)) && \
     !defined(RS6000) && !defined(SCO_ELF) && !defined(DGUX) && \
     !(defined(FREEBSD) && defined(__ELF__)) && \
+    !(defined(OPENBSD) && defined(__ELF__)) && \
     !(defined(NETBSD) && defined(__ELF__)) && !defined(HURD) && \
     !defined(DARWIN)
  --> We only know how to find data segments of dynamic libraries for the
@@@@ -90,9 +91,9 @@@@
 
 #if defined(LINUX) && defined(__ELF__) || defined(SCO_ELF) || \
     (defined(FREEBSD) && defined(__ELF__)) || defined(DGUX) || \
+    (defined(OPENBSD) && defined(__ELF__)) || \
     (defined(NETBSD) && defined(__ELF__)) || defined(HURD)
 #   include <stddef.h>
-#   include <elf.h>
 #   include <link.h>
 #endif
 
@@@@ -106,7 +107,7 @@@@
 #        define ElfW(type) Elf64_##type
 #      endif
 #    else
-#      ifdef NETBSD
+#      if defined(NETBSD) || defined(OPENBSD)
 #        if ELFSIZE == 32
 #          define ElfW(type) Elf32_##type
 #        else
@@@@ -301,6 +302,7 @@@@ void GC_register_dynamic_libraries()
 
 #if defined(LINUX) && defined(__ELF__) || defined(SCO_ELF) || \
     (defined(FREEBSD) && defined(__ELF__)) || defined(DGUX) || \
+    (defined(OPENBSD) && defined(__ELF__)) || \
     (defined(NETBSD) && defined(__ELF__)) || defined(HURD)
 
 
@@@@ -409,6 +411,10 @@@@ GC_bool GC_register_main_static_data()
 # if (defined(FREEBSD) && __FreeBSD__ >= 7)
 /* On the FreeBSD system, any target system at major version 7 shall    */
 /* have dl_iterate_phdr; therefore, we need not make it weak as above.  */
+#define HAVE_DL_ITERATE_PHDR
+#endif
+
+#if defined(OPENBSD)
 #define HAVE_DL_ITERATE_PHDR
 #endif
 
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- boehm-gc/dyn_load.c.orig	Sat Nov 12 09:53:59 2011
+++ boehm-gc/dyn_load.c	Sat Nov 12 10:28:04 2011
d40 11
a50 9
@@@@ -492,7 +494,7 @@@@ GC_bool GC_register_main_static_data()
 /* This doesn't necessarily work in all cases, e.g. with preloaded
  * dynamic libraries.						*/
 
-#if defined(NETBSD)
+#if defined(NETBSD) || defined(OPENBSD)
 #  include <sys/exec_elf.h>
 /* for compatibility with 1.4.x */
 #  ifndef DT_DEBUG
@


1.1.1.1
log
@now import for real, sorry ...
@
text
@@
