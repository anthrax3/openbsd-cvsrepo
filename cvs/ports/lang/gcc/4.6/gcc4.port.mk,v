head	1.11;
access;
symbols
	OPENBSD_6_1:1.11.0.14
	OPENBSD_6_1_BASE:1.11
	OPENBSD_6_0:1.11.0.12
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.8
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.10
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.6
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.2
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.9.0.6
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.4
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.2
	pascal_20111114:1.1.1.1
	pascal:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2013.12.01.20.05.41;	author zhuk;	state Exp;
branches;
next	1.10;

1.10
date	2013.11.27.20.42.08;	author zhuk;	state Exp;
branches;
next	1.9;

1.9
date	2012.04.18.18.41.22;	author pascal;	state Exp;
branches;
next	1.8;

1.8
date	2012.01.26.13.17.22;	author pascal;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.14.18.16.51;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2011.12.08.19.59.36;	author pascal;	state Exp;
branches;
next	1.5;

1.5
date	2011.12.06.01.51.37;	author pascal;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.22.21.46.39;	author pascal;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.19.22.19.53;	author pascal;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.17.18.03.43;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.14.13.00.55;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.11.14.13.00.55;	author pascal;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Make ccache work with Clang and GCC 4.6 & 4.8.

tested and okay juanfra@@; also okay sthen@@ for Clang part
@
text
@# $OpenBSD: gcc4.port.mk,v 1.10 2013/11/27 20:42:08 zhuk Exp $

MODGCC4_ARCHS ?=
MODGCC4_LANGS ?=


.if ${MODGCC4_LANGS:L} != "java" && !${MODGCC4_LANGS:L:Mc}
# Always include support for this
# unless only java is needed
MODGCC4_LANGS +=	c
.endif

_MODGCC4_OKAY = c c++ java fortran go
.for _l in ${MODGCC4_LANGS:L}
.  if !${_MODGCC4_OKAY:M${_l}}
ERRORS += "Fatal: unknown language ${_l}"
.  endif
.endfor

_MODGCC4_ARCH_USES = No

.if ${MODGCC4_ARCHS:L} != ""
.  for _i in ${MODGCC4_ARCHS}
.    if !empty(MACHINE_ARCH:M${_i})
_MODGCC4_ARCH_USES = Yes
.    endif
.  endfor
.endif

COMPILER_VERSION ?= gcc2

_MODGCC4_LINKS =
.if ${_MODGCC4_ARCH_USES:L} == "yes"

.  if ${MODGCC4_LANGS:L:Mc}
BUILD_DEPENDS += lang/gcc/4.6>=4.6,<4.7
_MODGCC4_LINKS += egcc gcc egcc cc
.  endif

.  if ${MODGCC4_LANGS:L:Mc++}
BUILD_DEPENDS += lang/gcc/4.6,-c++>=4.6,<4.7
MODGCC4STDCPP = estdc++
MODGCC4_CPPLIBDEP = lang/gcc/4.6,-estdc>=4.6,<4.7
LIB_DEPENDS += ${MODGCC4_CPPLIBDEP}
MODGCC4_CPPWANTLIB = estdc++>=14
WANTLIB += ${MODGCC4_CPPWANTLIB}
_MODGCC4_LINKS += eg++ g++ eg++ c++
.  endif

.  if ${MODGCC4_LANGS:L:Mfortran}
BUILD_DEPENDS += lang/gcc/4.6,-f95>=4.6,<4.7
WANTLIB += gfortran>=3
LIB_DEPENDS += lang/gcc/4.6,-f95>=4.6,<4.7
_MODGCC4_LINKS += egfortran gfortran
.  endif

.  if ${MODGCC4_LANGS:L:Mjava}
BUILD_DEPENDS += lang/gcc/4.6,-java>=4.6,<4.7
MODGCC4_GCJWANTLIB = gcj
MODGCC4_GCJLIBDEP = lang/gcc/4.6,-java>=4.6,<4.7
_MODGCC4_LINKS += egcj gcj egcjh gcjh egjar gjar egij gij
.  endif

.  if ${MODGCC4_LANGS:L:Mgo}
BUILD_DEPENDS += lang/gcc/4.6,-go>=4.6,<4.7
WANTLIB += go
LIB_DEPENDS += lang/gcc/4.6,-go>=4.6,<4.7
_MODGCC4_LINKS += egccgo gccgo
.  endif
.endif

.if !empty(_MODGCC4_LINKS)
.  if "${USE_CCACHE:L}" == "yes" && "${NO_CCACHE:L}" != "yes"
.    for _src _dest in ${_MODGCC4_LINKS}
MODGCC4_post-patch +=	rm -f ${WRKDIR}/bin/${_dest};
MODGCC4_post-patch +=	echo '\#!/bin/sh' >${WRKDIR}/bin/${_dest};
MODGCC4_post-patch +=	echo exec ccache ${LOCALBASE}/bin/${_src} \"\$$@@\"
MODGCC4_post-patch +=	>>${WRKDIR}/bin/${_dest};
MODGCC4_post-patch +=	chmod +x ${WRKDIR}/bin/${_dest};
.    endfor
.  else
.    for _src _dest in ${_MODGCC4_LINKS}
MODGCC4_post-patch += ln -sf ${LOCALBASE}/bin/${_src} ${WRKDIR}/bin/${_dest};
.    endfor
.  endif
.endif

@


1.10
log
@Force NO_CCACHE for non-base compilers. Before that, ports system tried to
enable it through symlinks in ${WRKDIR}/bin/, which were effectively
overriden by gcc4.port.mk or clang.port.mk - thus lying that ccache was
used while it was not.

Still investigating for a good solution to actually enable ccache support
for non-base compilers.

okay juanfra@@, sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.9 2012/04/18 18:41:22 pascal Exp $
a37 3

# not supported
NO_CCACHE =	Yes
a47 3

# not supported
NO_CCACHE =	Yes
d73 10
a82 1
.  for _src _dest in ${_MODGCC4_LINKS}
d84 2
a85 1
.  endfor
@


1.9
log
@Enhance this module to provide ${MODGCC4_CPPLIBDEP} and ${MODGCC4_CPPWANTLIB}.

ok robert@@
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.8 2012/01/26 13:17:22 pascal Exp $
d38 3
d51 3
@


1.8
log
@- bump libestdc++ following the bump in gcc 4.2
- deal with ldconfig shitz being run at fake install everywhere
- fix sprintf/strcpy usage in libestdc++ so we don't get a warning every time
  we compile a C++ program

Everything brought up by espie@@.
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.7 2011/12/14 18:16:51 robert Exp $
d43 4
a46 2
LIB_DEPENDS += lang/gcc/4.6,-estdc>=4.6,<4.7
WANTLIB += estdc++>=14
@


1.7
log
@missing endif
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.6 2011/12/08 19:59:36 pascal Exp $
d44 1
a44 1
WANTLIB += estdc++>=12
@


1.6
log
@ejar -> egjar
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.5 2011/12/06 01:51:37 pascal Exp $
d67 1
@


1.5
log
@- be sure to always use sed from base
- adjust gfortran WANTLIB version in gcc4.port.mk
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.4 2011/11/22 21:46:39 pascal Exp $
d59 1
a59 1
_MODGCC4_LINKS += egcj gcj egcjh gcjh ejar gjar egij gij
@


1.4
log
@- update and use OpenBSD threads in boehm-gc, from myself and kurt@@. gcj-dbtool
  still doesn't work.
- update gcc4.port.mk for gcc 4.6: always use libestdc++
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.3 2011/11/19 22:19:53 pascal Exp $
d50 1
a50 1
WANTLIB += gfortran>=2
@


1.3
log
@- add Go support (only tested on amd64, but I'd be surprised if it broke
  anywhere else.  The only thing not supported yet is tracing using ptrace(2).
- clean up Makefile and restructure a bit
- VMEM_WARNING when -java is built
- some minor PLIST tweaks

ok espie@@
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.2 2011/11/17 18:03:43 sthen Exp $
d35 1
a35 1
.  if ${MODGCC4_LANGS:L:Mc} && ${COMPILER_VERSION:L:Ngcc4*}
a40 4
.    if ${COMPILER_VERSION:L:Mgcc4*}
MODGCC4STDCPP = stdc++
WANTLIB += stdc++>=53.0
.    else
a45 1
.    endif
@


1.2
log
@rename MODGCC{3,4}_ARCHES to MODGCC{3,4}_ARCHS, suggested by naddy,
phessler and jasper agree
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.1.1.1 2011/11/14 13:00:55 pascal Exp $
d3 2
a4 2
MODGCC4_ARCHS?=
MODGCC4_LANGS?=
d10 1
a10 1
MODGCC4_LANGS+=	c
d13 1
a13 1
_MODGCC4_OKAY = c c++ java fortran
d36 1
a36 1
BUILD_DEPENDS += gcc->=4.6,<4.7:lang/gcc/4.6
d45 1
a45 1
BUILD_DEPENDS += g++->=4.6,<4.7:lang/gcc/4.6,-c++
d47 2
a48 2
LIB_DEPENDS += libstdc++->=4.6,<4.7:lang/gcc/4.6,-estdc
WANTLIB += estdc++>=7
d54 1
a54 1
BUILD_DEPENDS += g95->=4.6,<4.7:lang/gcc/4.6,-f95
d56 1
a56 1
LIB_DEPENDS += g95->=4.6,<4.7:lang/gcc/4.6,-f95
d61 1
a61 1
BUILD_DEPENDS += gcj->=4.6,<4.7:lang/gcc/4.6,-java
d63 1
a63 1
MODGCC4_GCJLIBDEP = gcj->=4.6,<4.7:lang/gcc/4.6,-java
d67 5
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.14 2011/09/15 17:25:35 espie Exp $
d3 1
a3 1
MODGCC4_ARCHES?=
d22 2
a23 2
.if ${MODGCC4_ARCHES:L} != ""
.  for _i in ${MODGCC4_ARCHES}
@


1.1.1.1
log
@now import for real, sorry ...
@
text
@@
