head	1.5;
access;
symbols
	OPENBSD_5_2:1.4.0.18
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.16
	OPENBSD_5_0:1.4.0.14
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.12
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.10
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	gcc:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2013.01.22.04.05.31;	author brad;	state dead;
branches;
next	1.4;

1.4
date	2008.07.25.20.50.26;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.27.15.42.50;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.04.23.06.33;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.03.15.21.27;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.03.15.21.27;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@tedu older version of gcc

ok pascal@@
@
text
@$OpenBSD: patch-gcc_toplev_c,v 1.4 2008/07/25 20:50:26 martynas Exp $
--- gcc/toplev.c.orig	Fri Mar  5 19:55:51 2004
+++ gcc/toplev.c	Fri Jul 25 12:34:58 2008
@@@@ -852,7 +852,11 @@@@ int flag_instrument_function_entry_exit = 0;
    On SVR4 targets, it also controls whether or not to emit a
    string identifying the compiler.  */
 
+#ifdef OPENBSD_NATIVE
+int flag_no_ident = 1;
+#else
 int flag_no_ident = 0;
+#endif
 
 /* This will perform a peephole pass before sched2.  */
 int flag_peephole2 = 0;
@@@@ -904,6 +908,18 @@@@ int align_functions_log;
    minimum function alignment.  Zero means no alignment is forced.  */
 int force_align_functions_log;
 
+#if defined(STACK_PROTECTOR) && defined(STACK_GROWS_DOWNWARD)
+/* Nonzero means use propolice as a stack protection method */
+int flag_propolice_protection = 1;
+int flag_stack_protection = 0;
+#else
+int flag_propolice_protection = 0;
+int flag_stack_protection = 0;
+#endif
+/* Warn when not issuing stack smashing protection for some reason */
+int warn_stack_protector;
+
+
 /* Table of supported debugging formats.  */
 static const struct
 {
@@@@ -1188,6 +1204,10 @@@@ static const lang_independent_options f_options[] =
    N_("Trap for signed overflow in addition / subtraction / multiplication") },
   { "new-ra", &flag_new_regalloc, 1,
    N_("Use graph coloring register allocation.") },
+  {"stack-protector", &flag_propolice_protection, 1,
+   N_("Enables stack protection") },
+  {"stack-protector-all", &flag_stack_protection, 1,
+   N_("Enables stack protection of every function") } ,
 };
 
 /* Table of language-specific options.  */
@@@@ -1362,6 +1382,9 @@@@ documented_lang_options[] =
   { "-Wwrite-strings",
     N_("Mark strings as 'const char *'") },
   { "-Wno-write-strings", "" },
+  { "-Wbounded",
+    N_("Fake bounds checking option") },
+  { "-Wno-bounded", "" },
 
 #define DEFINE_LANG_NAME(NAME) { NULL, NAME },
 
@@@@ -1547,7 +1570,9 @@@@ static const lang_independent_options W_options[] =
   {"missing-noreturn", &warn_missing_noreturn, 1,
    N_("Warn about functions which might be candidates for attribute noreturn") },
   {"strict-aliasing", &warn_strict_aliasing, 1,
-   N_ ("Warn about code which might break the strict aliasing rules") }
+   N_ ("Warn about code which might break the strict aliasing rules") },
+  {"stack-protector", &warn_stack_protector, 1,
+   N_("Warn when disabling stack protector for some reason")}
 };
 
 void
@@@@ -4910,14 +4935,19 @@@@ parse_options_and_default_flags (argc, argv)
       flag_schedule_insns_after_reload = 1;
 #endif
       flag_regmove = 1;
+#ifndef OPENBSD_NATIVE
       flag_strict_aliasing = 1;
       flag_delete_null_pointer_checks = 1;
+#endif
       flag_reorder_blocks = 1;
       flag_reorder_functions = 1;
     }
 
   if (optimize >= 3)
     {
+#ifdef OPENBSD_NATIVE
+      flag_strict_aliasing = 1;
+#endif
       flag_inline_functions = 1;
       flag_rename_registers = 1;
     }
@


1.4
log
@adapt the C++ fix for C99 math functions, and bump c++ pkgname:
don't undefine C99 math macros, if !_GLIBCPP_USE_C99, so that we
can use these functions in C++.
espie@@ agrees
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_toplev_c,v 1.3 2005/02/27 15:42:50 espie Exp $
@


1.3
log
@synch patches to new snapshot.
tell libtool to fuck off about ldconfig.
@
text
@d1 4
a4 4
$OpenBSD: patch-gcc_toplev_c,v 1.2 2005/01/04 23:06:33 espie Exp $
--- gcc/toplev.c.orig	Fri Mar  5 18:55:51 2004
+++ gcc/toplev.c	Sun Feb 27 13:50:52 2005
@@@@ -852,7 +852,11 @@@@ int flag_instrument_function_entry_exit 
d35 1
a35 1
@@@@ -1188,6 +1204,10 @@@@ static const lang_independent_options f_
d56 1
a56 1
@@@@ -1547,7 +1570,9 @@@@ static const lang_independent_options W_
d67 1
a67 1
@@@@ -4910,14 +4935,19 @@@@ parse_options_and_default_flags (argc, a
@


1.2
log
@add propolice as separate patches.
@
text
@d1 3
a3 3
$OpenBSD: patch-gcc_toplev_c,v 1.1.1.1 2005/01/03 15:21:27 espie Exp $
--- gcc/toplev.c.orig	Mon Jan  3 12:24:48 2005
+++ gcc/toplev.c	Mon Jan  3 12:27:08 2005
d35 1
a35 1
@@@@ -1188,6 +1201,10 @@@@ static const lang_independent_options f_
d46 1
a46 1
@@@@ -1362,6 +1366,9 @@@@ documented_lang_options[] =
d56 1
a56 1
@@@@ -1547,7 +1567,9 @@@@ static const lang_independent_options W_
d67 1
a67 1
@@@@ -4910,14 +4917,19 @@@@ parse_options_and_default_flags (argc, a
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d16 30
d56 11
@


1.1.1.1
log
@somewhat cleaner port of gcc 3.3.x.
not ready yet...
@
text
@@
