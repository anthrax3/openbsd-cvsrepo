head	1.9;
access;
symbols
	OPENBSD_6_2:1.9.0.2
	OPENBSD_6_2_BASE:1.9
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	pascal_20140626:1.1.1.1
	pascal:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2017.08.21.09.12.47;	author espie;	state Exp;
branches;
next	1.8;
commitid	Boeya1thLhXqJRNQ;

1.8
date	2017.06.04.23.22.57;	author sthen;	state Exp;
branches;
next	1.7;
commitid	9V71pxj9Vcn3MtcS;

1.7
date	2017.05.26.09.37.05;	author espie;	state Exp;
branches;
next	1.6;
commitid	jlz51UBAgvMgRdlV;

1.6
date	2017.05.22.08.04.07;	author espie;	state Exp;
branches;
next	1.5;
commitid	R3rTKp0E02QOcdop;

1.5
date	2016.03.05.15.27.27;	author pascal;	state Exp;
branches;
next	1.4;
commitid	CQsNurGAM08eYkL5;

1.4
date	2015.07.17.22.42.12;	author sthen;	state Exp;
branches;
next	1.3;
commitid	WtriiKFpqhbhFk4w;

1.3
date	2015.05.28.08.05.12;	author pascal;	state Exp;
branches;
next	1.2;
commitid	oCM7VZeVpnG5QTuK;

1.2
date	2014.11.12.10.56.59;	author tobiasu;	state Exp;
branches;
next	1.1;
commitid	WoBcSdgLkHQQGkFt;

1.1
date	2014.06.26.16.30.15;	author pascal;	state Exp;
branches
	1.1.1.1;
next	;
commitid	P7PY1UTti0Albpwh;

1.1.1.1
date	2014.06.26.16.30.15;	author pascal;	state Exp;
branches;
next	;
commitid	P7PY1UTti0Albpwh;


desc
@@


1.9
log
@centralize arch compiler support so we cant teach COMPILER to
set ONLY_FOR_ARCHS
@
text
@# $OpenBSD: gcc4.port.mk,v 1.8 2017/06/04 23:22:57 sthen Exp $

MODGCC4_ARCHS ?= ${GCC49_ARCHS}
MODGCC4_LANGS ?=


.if ${MODGCC4_LANGS:L} != "java" && !${MODGCC4_LANGS:L:Mc}
# Always include support for this
# unless only java is needed
MODGCC4_LANGS +=	c
.endif

_MODGCC4_OKAY = c c++ java fortran
.for _l in ${MODGCC4_LANGS:L}
.  if !${_MODGCC4_OKAY:M${_l}}
ERRORS += "Fatal: unknown language ${_l}"
.  endif
.endfor

_MODGCC4_ARCH_USES = No

.for _i in ${MODGCC4_ARCHS}
.  if !empty(MACHINE_ARCH:M${_i})
_MODGCC4_ARCH_USES = Yes
.  endif
.endfor

COMPILER_VERSION ?= gcc2

_MODGCC4_LINKS =
MODGCC4STDCPP = estdc++
MODGCC4_CPPLIBDEP = lang/gcc/4.9,-libs>=4.9,<4.10
MODGCC4_CPPDEP =    lang/gcc/4.9,-c++>=4.9,<4.10
MODGCC4_CPPWANTLIB = estdc++>=17
MODGCC4_ATOMICWANTLIB = atomic

.if ${_MODGCC4_ARCH_USES:L} == "yes"

.  if ${MODGCC4_LANGS:L:Mc}
BUILD_DEPENDS += lang/gcc/4.9>=4.9,<4.10
COMPILER_LINKS += gcc ${LOCALBASE}/bin/egcc cc ${LOCALBASE}/bin/egcc
.  endif

.  if ${MODGCC4_LANGS:L:Mc++}
BUILD_DEPENDS += ${MODGCC4_CPPDEP}
LIB_DEPENDS += ${MODGCC4_CPPLIBDEP}
WANTLIB += ${MODGCC4_CPPWANTLIB}
COMPILER_LINKS += c++ ${LOCALBASE}/bin/eg++ g++ ${LOCALBASE}/bin/eg++
.  endif

.  if ${MODGCC4_LANGS:L:Mfortran}
BUILD_DEPENDS += lang/gcc/4.9,-f95>=4.9,<4.10
WANTLIB += gfortran>=3
# XXX sync with Makefile
.if ${MACHINE_ARCH} == "amd64" || ${MACHINE_ARCH} == "i386"
WANTLIB += quadmath
.endif
LIB_DEPENDS += lang/gcc/4.9,-libs>=4.9,<4.10
COMPILER_LINKS += gfortran ${LOCALBASE}/bin/egfortran
.  endif

.  if ${MODGCC4_LANGS:L:Mjava}
BUILD_DEPENDS += lang/gcc/4.9,-java>=4.9,<4.10
MODGCC4_GCJWANTLIB = gcj
MODGCC4_GCJLIBDEP = lang/gcc/4.9,-java>=4.9,<4.10
COMPILER_LINKS += gcj ${LOCALBASE}/bin/egcj
_MODGCC4_LINKS += gcjh gjar gij
.  endif

#.  if ${MODGCC4_LANGS:L:Mgo}
#BUILD_DEPENDS += lang/gcc/4.9,-go>=4.9,<4.10
#WANTLIB += go
#LIB_DEPENDS += lang/gcc/4.9,-go>=4.9,<4.10
#COMPILER_LINKS += gccgo ${LOCALBASE}/bin/egccgo
#.  endif
.endif

.if !empty(_MODGCC4_LINKS)
.  for _src in ${_MODGCC4_LINKS}
MODGCC4_post-patch += ln -sf ${LOCALBASE}/bin/e${_src} ${WRKDIR}/bin/${_src};
.  endfor
.endif
@


1.8
log
@Write out wrapper scripts for compilers using -B to set the toolchain
search path to ${WRKDIR}/bin. Ensures that the ld wrapper script needed
for USE_WXNEEDED gets used (clang was ignoring it otherwise).

Rework ccache support and gcc4/clang MODULES to use the same wrapper
generator as above, setting up a list of command names (cc, c++, etc) and
destinations (egcc, eg++, etc) as the port is processed, and writing the
wrappers in one place in bsd.port.mk, with an optional wrapper (e.g.
ccache), and with an echo to make it clear on screen/in log which
compiler binaries were chosen (easier than inspecting the wrapper
scripts) and whether ccache is used.

Initial wrapper using -B from espie, ccache bits from me, discussed
with/ok espie.  Been through a bulk on i386.
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.7 2017/05/26 09:37:05 espie Exp $
d3 1
a3 1
MODGCC4_ARCHS ?=
d22 2
a23 3
.if ${MODGCC4_ARCHS:L} != ""
.  for _i in ${MODGCC4_ARCHS}
.    if !empty(MACHINE_ARCH:M${_i})
d25 2
a26 3
.    endif
.  endfor
.endif
@


1.7
log
@introduce the full name of the C++ pkgpath, to be used by a few ports
that run depend on it
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.6 2017/05/22 08:04:07 espie Exp $
d32 1
a38 1
_MODGCC4_LINKS =
d43 1
a43 1
_MODGCC4_LINKS += egcc gcc egcc cc
d50 1
a50 1
_MODGCC4_LINKS += eg++ g++ eg++ c++
d61 1
a61 1
_MODGCC4_LINKS += egfortran gfortran
d68 2
a69 1
_MODGCC4_LINKS += egcj gcj egcjh gcjh egjar gjar egij gij
d76 1
a76 1
#_MODGCC4_LINKS += egccgo gccgo
d81 3
a83 13
.  if "${USE_CCACHE:L}" == "yes" && "${NO_CCACHE:L}" != "yes"
.    for _src _dest in ${_MODGCC4_LINKS}
MODGCC4_post-patch +=	rm -f ${WRKDIR}/bin/${_dest};
MODGCC4_post-patch +=	echo '\#!/bin/sh' >${WRKDIR}/bin/${_dest};
MODGCC4_post-patch +=	echo exec ccache ${LOCALBASE}/bin/${_src} \"\$$@@\"
MODGCC4_post-patch +=	>>${WRKDIR}/bin/${_dest};
MODGCC4_post-patch +=	chmod +x ${WRKDIR}/bin/${_dest};
.    endfor
.  else
.    for _src _dest in ${_MODGCC4_LINKS}
MODGCC4_post-patch += ln -sf ${LOCALBASE}/bin/${_src} ${WRKDIR}/bin/${_dest};
.    endfor
.  endif
a84 1

@


1.6
log
@provide an indirection to libatomic, because at least one port depends on it
when not built with base clang
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.5 2016/03/05 15:27:27 pascal Exp $
d34 1
d47 1
a47 1
BUILD_DEPENDS += lang/gcc/4.9,-c++>=4.9,<4.10
@


1.5
log
@Preparation for LLVM update: export variables related to estdc++ WANTLIB and
LIB_DEPENDS unconditionally, not just if MODGCC4_LANGS=c++.
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.4 2015/07/17 22:42:12 sthen Exp $
d35 1
@


1.4
log
@copy the ccache handling from gcc/4.8/gcc4.port.mk and apply it to gcc/4.9
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.3 2015/05/28 08:05:12 pascal Exp $
d32 4
a45 2
MODGCC4STDCPP = estdc++
MODGCC4_CPPLIBDEP = lang/gcc/4.9,-libs>=4.9,<4.10
a46 1
MODGCC4_CPPWANTLIB = estdc++>=17
@


1.3
log
@In the fortran part of the gcc4 module, also add quadmath to WANTLIB on archs
where it is used.
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.2 2014/11/12 10:56:59 tobiasu Exp $
d77 10
a86 1
.  for _src _dest in ${_MODGCC4_LINKS}
d88 2
a89 1
.  endfor
@


1.2
log
@Add ARM support to gcc 4.9

Marked broken because it uses instructions the default binutils don't
understand. The port itself seems to work.

I will probably post the update instructions to arm@@ for those that are
interested in playing with this.

ok pascal@@ a long time ago
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.1.1.1 2014/06/26 16:30:15 pascal Exp $
d53 4
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD: gcc4.port.mk,v 1.1.1.1 2013/04/08 08:20:19 pascal Exp $
d13 1
a13 1
_MODGCC4_OKAY = c c++ java fortran go
@


1.1.1.1
log
@Import GCC 4.9, sparc64 test and ok tobiasu@@
@
text
@@
