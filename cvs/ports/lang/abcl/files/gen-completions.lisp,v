head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.8
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.4
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.6
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.1.1.0.6
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.4
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	jasper_20131305:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.01.04.21.12.52;	author jasper;	state Exp;
branches;
next	1.1;
commitid	f4MEtWNYvYG9vGfd;

1.1
date	2013.05.13.09.25.55;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.05.13.09.25.55;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update to abcl-1.3.1
- enable regress tests
- add 'completions' target to generate the completions file

ok MAINTAINER
@
text
@(defvar symbols nil)

(do-all-symbols (sym)
  (let ((package (symbol-package sym)))
       (cond
         ((not (fboundp sym)))
         ((or (eql #.(find-package :cl) package)
              (eql #.(find-package :extensions) package)
              (eql #.(find-package :cl-user) package))
          (pushnew (symbol-name sym) symbols))
         ((eql #.(find-package :keyword) package)
          (pushnew (concatenate 'string ":" (symbol-name sym)) symbols))
         (package
           (pushnew (concatenate 'string
                                 (package-name package)
                                 ":"
                                 (symbol-name sym))
                    symbols)))))
(with-open-file (output #.(concatenate 'string
                                       (getenv "PWD")
                                       "/files/abcl_completions")
                        :direction :output :if-exists :overwrite
                        :if-does-not-exist :create)
  (format output "~{~(~A~)~%~}" (sort symbols #'string<)))
(quit)
@


1.1
log
@Initial revision
@
text
@d20 2
a21 2
                                       (getenv "HOME")
                                       "/.abcl_completions")
d25 1
a25 1
(quit))
@


1.1.1.1
log
@import abcl-1.1.1

Armed Bear Common Lisp (ABCL) is a full implementation of the Common
Lisp language featuring both an interpreter and a compiler, running in
the JVM. Originally started to be a scripting language for the J editor,
it now supports JSR-223 (Java scripting API): it can be a scripting
engine in any Java application. Additionally, it can be used to
implement (parts of) the application using Java to Lisp integration
APIs.

from timo.myyra@@wickedbsd.net
ok aja@@
@
text
@@
