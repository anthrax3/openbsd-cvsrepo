head	1.2;
access;
symbols
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	jeremy_2011-Dec-19:1.1.1.1
	jeremy:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2012.04.03.18.36.52;	author jeremy;	state dead;
branches;
next	1.1;

1.1
date	2011.12.19.22.21.47;	author jeremy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.12.19.22.21.47;	author jeremy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Make coffeescript use the node module.  This simplifies the Makefile,
removes the need for patches, and makes coffeescript also available
as a library you can require in nodejs.

OK sthen@@
@
text
@$OpenBSD: patch-Cakefile,v 1.1 2011/12/19 22:21:47 jeremy Exp $
--- Cakefile.orig	Tue Nov  8 15:01:45 2011
+++ Cakefile	Tue Dec 13 14:52:16 2011
@@@@ -50,17 +50,12 @@@@ task 'install', 'install CoffeeScript into /usr/local 
   base = options.prefix or '/usr/local'
   lib  = "#{base}/lib/coffee-script"
   bin  = "#{base}/bin"
-  node = "~/.node_libraries/coffee-script"
   console.log   "Installing CoffeeScript to #{lib}"
-  console.log   "Linking to #{node}"
-  console.log   "Linking 'coffee' to #{bin}/coffee"
   exec([
     "mkdir -p #{lib} #{bin}"
     "cp -rf bin lib LICENSE README package.json src #{lib}"
-    "ln -sfn #{lib}/bin/coffee #{bin}/coffee"
-    "ln -sfn #{lib}/bin/cake #{bin}/cake"
-    "mkdir -p ~/.node_libraries"
-    "ln -sfn #{lib}/lib/coffee-script #{node}"
+    "ln -sfn ${TRUEPREFIX}/lib/coffee-script/bin/coffee #{bin}/coffee"
+    "ln -sfn ${TRUEPREFIX}/lib/coffee-script/bin/cake #{bin}/cake"
   ].join(' && '), (err, stdout, stderr) ->
     if err then console.log stderr.trim() else log 'done', green
   )
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import coffeescript 1.2.0

CoffeeScript is a little language that compiles into JavaScript.
Underneath all those awkward braces and semicolons, JavaScript has
always had a gorgeous object model at its heart. CoffeeScript is an
attempt to expose the good parts of JavaScript in a simple way.

The golden rule of CoffeeScript is: "It's just JavaScript". The code
compiles one-to-one into the equivalent JS, and there is no
interpretation at runtime. You can use any existing JavaScript library
seamlessly from CoffeeScript (and vice-versa). The compiled output is
readable and pretty-printed, passes through JavaScript Lint without
warnings, will work in every JavaScript implementation, and tends to run
as fast or faster than the equivalent handwritten JavaScript.

Feedback and OK jasper@@
@
text
@@
