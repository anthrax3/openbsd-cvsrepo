head	1.4;
access;
symbols
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.2
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2006.07.30.04.25.41;	author pedro;	state dead;
branches;
next	1.3;

1.3
date	2005.12.10.23.02.05;	author pedro;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.19.14.31.27;	author pedro;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.16.13.04.07;	author pedro;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to Lua 5.1, okay jolan@@
@
text
@-- $OpenBSD: init.lua,v 1.3 2005/12/10 23:02:05 pedro Exp $
-- Written by Pedro Martelletto <pedro@@openbsd.org> in 2004. Public domain.

-- add an entry to a path list
local function
addpath(path, entry)
	return (path or "") .. ((path and ";") or "") .. entry
end

-- add an entry to the lua path
function
lua_addpath(entry)
	if package then
		-- if we are using luacompat, add the entry to package.path
		package.path = addpath(package.path, entry)
	else
		-- otherwise, add it to the normal 'lua_path'
		LUA_PATH = addpath(LUA_PATH, entry)
	end
end

-- add an entry to the lua c path
function
lua_addcpath(entry)
	if package then
		-- if we are using luacompat, add the entry to package.cpath
		package.cpath = addpath(package.cpath, entry)
	else
		-- otherwise, add it to the normal 'lua_cpath'
		LUA_CPATH = addpath(LUA_CPATH, entry)
	end
end

-- get the package table
local f = assert(loadfile("@@pkgconf@@"))
setfenv(f, {}) f() local pt = getfenv(f).installed_packages

-- iterate over the table, loading each package
for i, v in pt do
	local f, e = loadfile(v)
	if not f then
		print(string.format("Failed to load package %s, %s", i, e))
	else f() end -- load the package
end

-- finally, run user's initialization file, if it exists
local f = loadfile((os.getenv("HOME") or "") .. "/.lua/init.lua")
if f then f() end

lua_addpath("?;?.lua") -- set the default path

-- nuke exported functions
lua_addpath = nil
lua_addcpath = nil
@


1.3
log
@Use local variables as to not leak them to user context
@
text
@d1 1
a1 1
-- $OpenBSD: init.lua,v 1.2 2005/04/19 14:31:27 pedro Exp $
@


1.2
log
@prepare for luacompat, don't leak variables to the user environment
@
text
@d1 1
a1 1
-- $OpenBSD: init.lua,v 1.1 2004/12/16 13:04:07 pedro Exp $
d35 2
a36 2
f = assert(loadfile("@@pkgconf@@"))
setfenv(f, {}) f() pt = getfenv(f).installed_packages
a48 1
f = nil
@


1.1
log
@introduce a simple package management facility for lua, by permitting
each package to have an initialization file, and keeping a table of
'<package> = <file>' entries in a known place. these files are loaded
upon lua's activation, and should normally be small, quick pieces of
code responsible for preparing the environment (luapath, cpath) for
the packages they represent.

also, make it possible for every user to have her/his own lua
initialization routines under ~/.lua/init.lua, so that the system-wide
mechanism described above can be replicated to user-specific cases.

prodding, all sorts of ports tutoring and ok jolan@@
@
text
@d1 1
a1 1
-- $OpenBSD$
d4 3
a6 2
-- adds an entry to a path list
function lua_addpath(path, entry)
d10 24
d49 3
d53 3
a55 1
LUA_PATH = lua_addpath(LUA_PATH, "?;?.lua") -- set the default path
@

