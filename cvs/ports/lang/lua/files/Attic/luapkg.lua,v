head	1.2;
access;
symbols
	OPENBSD_3_9:1.1.0.6
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.4
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2006.07.30.04.25.41;	author pedro;	state dead;
branches;
next	1.1;

1.1
date	2004.12.16.13.04.07;	author pedro;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to Lua 5.1, okay jolan@@
@
text
@-- $OpenBSD: luapkg.lua,v 1.1 2004/12/16 13:04:07 pedro Exp $
-- Written by Pedro Martelletto <pedro@@openbsd.org> in 2004. Public domain.

-- check for valid arguments
function usage() error("Usage: luapkg add/del <name> <init file>") end
if table.getn(arg) < 2 or arg[1] ~= "add" and arg[1] ~= "del" then usage() end

-- get the package table
f = assert(loadfile("@@pkgconf@@"))
setfenv(f, {}) f() pt = getfenv(f).installed_packages

-- do the necessary changes on it
if arg[1] == "add" then
	assert(not pt[arg[2]], "Package already installed")
	pt[arg[2]] = arg[3] or ""
elseif arg[1] == "del" then
	assert(pt[arg[2]], "Package not installed")
	pt[arg[2]] = nil
end

-- dump it back to disk
f = assert(io.open("@@pkgconf@@", "w"))
f:write("installed_packages = {\n")
for i, v in pairs(pt) do f:write(string.format("\t[%q] = %q,\n", i, v)) end
f:write("}\n")
f:close()
@


1.1
log
@introduce a simple package management facility for lua, by permitting
each package to have an initialization file, and keeping a table of
'<package> = <file>' entries in a known place. these files are loaded
upon lua's activation, and should normally be small, quick pieces of
code responsible for preparing the environment (luapath, cpath) for
the packages they represent.

also, make it possible for every user to have her/his own lua
initialization routines under ~/.lua/init.lua, so that the system-wide
mechanism described above can be replicated to user-specific cases.

prodding, all sorts of ports tutoring and ok jolan@@
@
text
@d1 1
a1 1
-- $OpenBSD$
@

