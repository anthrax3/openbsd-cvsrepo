head	1.2;
access;
symbols
	OPENBSD_4_5:1.1.0.8
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.6
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2009.06.24.14.19.06;	author jolan;	state dead;
branches;
next	1.1;

1.1
date	2007.03.15.22.03.37;	author pedro;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove patch that causes math.randomseed() to not function

reported/debugged by M Joonas Pihlaja in pr 6176
@
text
@$OpenBSD: patch-src_lmathlib_c,v 1.1 2007/03/15 22:03:37 pedro Exp $
--- src/lmathlib.c.orig	Sun Mar  4 11:10:17 2007
+++ src/lmathlib.c	Sun Mar  4 11:11:40 2007
@@@@ -181,7 +181,7 @@@@ static int math_max (lua_State *L) {
 static int math_random (lua_State *L) {
   /* the `%' avoids the (rare) case of r==1, and is needed also because on
      some systems (SunOS!) `rand()' may return a value larger than RAND_MAX */
-  lua_Number r = (lua_Number)(rand()%RAND_MAX) / (lua_Number)RAND_MAX;
+  lua_Number r = (lua_Number)(arc4random()%RAND_MAX) / (lua_Number)RAND_MAX;
   switch (lua_gettop(L)) {  /* check number of arguments */
     case 0: {  /* no arguments */
       lua_pushnumber(L, r);  /* Number between 0 and 1 */
@@@@ -207,7 +207,7 @@@@ static int math_random (lua_State *L) {
 
 
 static int math_randomseed (lua_State *L) {
-  srand(luaL_checkint(L, 1));
+  arc4random_stir();
   return 0;
 }
 
@


1.1
log
@Use arc4random(3) for math.random(), okay jolan@@
@
text
@d1 1
a1 1
$OpenBSD$
@

