head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_5:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2014.09.09.13.54.43;	author jasper;	state Exp;
branches
	1.2.2.1;
next	1.1;
commitid	bO6nOO86eWmBbBOZ;

1.1
date	2014.09.09.13.53.40;	author jasper;	state dead;
branches
	1.1.2.1;
next	;
commitid	xOLOJeawBGpnG3p0;

1.1.2.1
date	2014.09.09.13.53.40;	author jasper;	state Exp;
branches;
next	;
commitid	xOLOJeawBGpnG3p0;

1.2.2.1
date	2014.09.18.15.06.04;	author jasper;	state Exp;
branches;
next	;
commitid	rk99byak4QBPQ5H1;


desc
@@


1.2
log
@Security fix for CVE-2014-5461
@
text
@$OpenBSD$

Security fix for CVE-2014-5461,
http://openwall.com/lists/oss-security/2014/08/27/2

--- src/ldo.c.orig	Tue Sep  9 15:32:24 2014
+++ src/ldo.c	Tue Sep  9 15:33:46 2014
@@@@ -217,7 +217,7 @@@@ static StkId adjust_varargs (lua_State *L, Proto *p, i
     int nvar = actual - nfixargs;  /* number of extra arguments */
     lua_assert(p->is_vararg & VARARG_HASARG);
     luaC_checkGC(L);
-    luaD_checkstack(L, p->maxstacksize);
+    luaD_checkstack(L, p->maxstacksize + p->numparams);
     htab = luaH_new(L, nvar, 1);  /* create `arg' table */
     for (i=0; i<nvar; i++)  /* put extra arguments into `arg' table */
       setobj2n(L, luaH_setnum(L, htab, i+1), L->top - nvar + i);
@


1.2.2.1
log
@security fix for CVE-2014-5461
@
text
@d1 1
a1 1
$OpenBSD: patch-src_ldo_c,v 1.2 2014/09/09 13:54:43 jasper Exp $
@


1.1
log
@file patch-src_ldo_c was initially added on branch OPENBSD_5_5.
@
text
@d1 16
@


1.1.2.1
log
@Security fix for CVE-2014-5461
@
text
@a0 16
$OpenBSD$

Security fix for CVE-2014-5461,
http://openwall.com/lists/oss-security/2014/08/27/2

--- src/ldo.c.orig	Tue Sep  9 15:32:24 2014
+++ src/ldo.c	Tue Sep  9 15:33:46 2014
@@@@ -217,7 +217,7 @@@@ static StkId adjust_varargs (lua_State *L, Proto *p, i
     int nvar = actual - nfixargs;  /* number of extra arguments */
     lua_assert(p->is_vararg & VARARG_HASARG);
     luaC_checkGC(L);
-    luaD_checkstack(L, p->maxstacksize);
+    luaD_checkstack(L, p->maxstacksize + p->numparams);
     htab = luaH_new(L, nvar, 1);  /* create `arg' table */
     for (i=0; i<nvar; i++)  /* put extra arguments into `arg' table */
       setobj2n(L, luaH_setnum(L, htab, i+1), L->top - nvar + i);
@

