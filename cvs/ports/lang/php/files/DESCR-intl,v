head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.16
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.14
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.12
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.8
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.10
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.6
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.10.24.18.20.39;	author landry;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Add an -intl subpackage for the php intl extension using ICU.
ok robert@@ (maintainer)
@
text
@Internationalization extension (further is referred as Intl) is a
wrapper for ICU library, enabling PHP programmers to perform
UCA-conformant collation and date/time/number/currency formatting in
their scripts.

It tends to closely follow ICU APIs, so that people having experience
working with ICU in either C/C++ or Java could easily use the PHP API.
Also, this way ICU documentation would be useful to understand various
ICU functions.

Intl consists of several modules, each of them exposes the corresponding
ICU API:

* Collator: provides string comparison capability with support for
  appropriate locale-sensitive sort orderings.
* Number Formatter: allows to display number according to the localized
  format or given pattern or set of rules, and to parse strings into
  numbers.
* Message Formatter: allows to create messages incorporating data (such
  as numbers or dates) formatted according to given pattern and locale
  rules, and parse messages extracting data from them.
* Normalizer: provides a function to transform text into one of the
  Unicode normalization forms, and provides a routine to test if a given
  string is already normalized.
* Locale: provides interaction with locale identifiers in the form of
  functions to get subtags from locale identifier; parse, compose,
  match(lookup and filter) locale identifiers.
@
