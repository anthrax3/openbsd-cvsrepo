head	1.17;
access;
symbols
	OPENBSD_6_2:1.16.0.2
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.6.0.8
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.6
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.4
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.1.1.1.0.2
	OPENBSD_4_8_BASE:1.1.1.1
	jasper_20100708:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.17
date	2017.10.05.08.58.10;	author bentley;	state Exp;
branches;
next	1.16;
commitid	FOJ1yaBPh9NNHas2;

1.16
date	2017.07.26.22.45.25;	author sthen;	state Exp;
branches;
next	1.15;
commitid	tD4MFrpYYDDL2UFT;

1.15
date	2017.07.16.19.18.59;	author espie;	state Exp;
branches;
next	1.14;
commitid	tt0GhWK5c4uf9ILG;

1.14
date	2017.04.10.11.46.22;	author sthen;	state Exp;
branches;
next	1.13;
commitid	BLsh88fJB8thZTwY;

1.13
date	2016.04.27.14.16.52;	author jasper;	state Exp;
branches;
next	1.12;
commitid	6n0e46CMMcaNFcA9;

1.12
date	2016.03.11.20.28.27;	author naddy;	state Exp;
branches;
next	1.11;
commitid	UYLP8TE6V7RS2GhJ;

1.11
date	2015.12.23.11.12.53;	author bentley;	state Exp;
branches;
next	1.10;
commitid	MKpioyrMHHuGy5Ub;

1.10
date	2015.06.12.20.09.27;	author bentley;	state Exp;
branches;
next	1.9;
commitid	SKW9CNUWg0RVkKum;

1.9
date	2014.09.27.17.50.28;	author jasper;	state Exp;
branches;
next	1.8;
commitid	1PoEG67rljstlVy0;

1.8
date	2013.04.18.17.57.07;	author bentley;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.11.11.20.27;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2011.06.13.19.42.25;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.14.08.40.20;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.17.10.16.11;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.17.08.05.17;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.18.19.20.42;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.07.08.18.58.23;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.07.08.18.58.23;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Update to iverilog-10.2.
@
text
@# $OpenBSD: Makefile,v 1.16 2017/07/26 22:45:25 sthen Exp $

COMMENT=		Verilog simulation and synthesis tool

V=			10.2
DISTNAME=		verilog-$V
PKGNAME=		iverilog-$V
CATEGORIES=		lang devel

HOMEPAGE=		http://iverilog.icarus.com/

# GPLv2+
PERMIT_PACKAGE_CDROM=	Yes

MASTER_SITES=		ftp://ftp.icarus.com/pub/eda/verilog/v10/

WANTLIB += c m pthread readline ${COMPILER_LIBCXX} termcap z

USE_GMAKE=		Yes

BUILD_DEPENDS=		devel/bison
YACC=			bison

CONFIGURE_STYLE=	gnu
CONFIGURE_ARGS+=	--disable-suffix
CFLAGS+=		-fPIC

VVP_DOCS=		README.txt opcodes.txt
DOC_DIR=		${PREFIX}/share/doc/iverilog

post-install:
	${INSTALL_DATA_DIR} ${DOC_DIR}/{ivlpp,vvp}
	${INSTALL_DATA} ${WRKSRC}/*.txt ${DOC_DIR}
	${INSTALL_DATA} ${WRKSRC}/vvp/{README,opcodes}.txt ${DOC_DIR}/vvp/
	${INSTALL_DATA} ${WRKSRC}/ivlpp/ivlpp.txt ${DOC_DIR}/ivlpp/

.include <bsd.port.mk>
@


1.16
log
@bump LIBCXX/LIBECXX/COMPILER_LIBCXX ports.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2017/07/16 19:18:59 espie Exp $
d5 1
a5 1
V=			10.1.1
a8 1
REVISION=		0
@


1.15
log
@use COMPILER_LIBCXX where applicable
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2017/04/10 11:46:22 sthen Exp $
d9 1
@


1.14
log
@use LIBCXX
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2016/04/27 14:16:52 jasper Exp $
d17 1
a17 1
WANTLIB += c m pthread readline ${LIBCXX} termcap z
@


1.13
log
@update to iverilog-10.1.1
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2016/03/11 20:28:27 naddy Exp $
d17 1
a17 1
WANTLIB += c m pthread readline stdc++ termcap z
@


1.12
log
@garbage collect CONFIGURE_SHARED
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2015/12/23 11:12:53 bentley Exp $
d5 1
a5 1
V=			10.0
d15 1
a15 1
MASTER_SITES=		ftp://ftp.icarus.com/pub/eda/verilog/v${V:R}/
d36 1
@


1.11
log
@Update to iverilog-10.0.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2015/06/12 20:09:27 bentley Exp $
d25 1
a25 2
CONFIGURE_ARGS+=	${CONFIGURE_SHARED} \
			--disable-suffix
@


1.10
log
@Update HOMEPAGE.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2014/09/27 17:50:28 jasper Exp $
d5 1
a5 1
V=			0.9.7
a8 1
REVISION=		0
d17 1
a17 1
WANTLIB += c m readline stdc++ termcap z
@


1.9
log
@update to iverilog-0.9.7
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2013/04/18 17:57:07 bentley Exp $
d9 1
d11 1
a11 1
HOMEPAGE=		http://www.icarus.com/eda/verilog/
@


1.8
log
@Update to iverilog-0.9.6.

ok jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2013/03/11 11:20:27 espie Exp $
d5 1
a5 1
V=			0.9.6
d15 1
a15 1
MASTER_SITES=		ftp://ftp.icarus.com/pub/eda/verilog/v0.9/
@


1.7
log
@PERMIT_* / REGRESS->TEST sweep
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2011/06/13 19:42:25 jasper Exp $
d5 1
a5 1
V=			0.9.4
@


1.6
log
@- update to iverilog 0.9.4
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2011/03/14 08:40:20 sthen Exp $
a13 3
PERMIT_PACKAGE_FTP=	Yes
PERMIT_DISTFILES_CDROM=	Yes
PERMIT_DISTFILES_FTP=	Yes
@


1.5
log
@update DESCR; Anthony J. Bentley
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2010/11/17 10:16:11 jasper Exp $
d5 1
a5 1
V=			0.9.3
a7 1
REVISION=		0
@


1.4
log
@- update iverilog to 0.9.3
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2010/11/17 08:05:17 espie Exp $
d8 1
@


1.3
log
@new depends
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2010/10/18 19:20:42 espie Exp $
d5 1
a5 1
V=			0.9.2
a33 1
USE_GROFF =	Yes
@


1.2
log
@USE_GROFF=Yes
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2010/07/08 18:58:23 jasper Exp $
d24 1
a24 1
BUILD_DEPENDS=		::devel/bison
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d34 1
@


1.1.1.1
log
@import iverilog 0.9.2

Icarus Verilog is a Verilog simulation and synthesis tool. It operates
as a compiler, compiling source code writen in Verilog (IEEE-1364) into
some target format. For batch simulation, the compiler can generate C++
code that is compiled and linked with a run time library (called "vvm")
then executed as a command to run the simulation. For synthesis, the
compiler generates netlists in the desired format.
@
text
@@
