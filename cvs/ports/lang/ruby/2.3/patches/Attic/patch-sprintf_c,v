head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2017.09.20.02.17.57;	author jeremy;	state dead;
branches
	1.1.2.1;
next	;
commitid	etACA5UcBG2pWvRr;

1.1.2.1
date	2017.09.20.02.17.57;	author jeremy;	state Exp;
branches;
next	;
commitid	etACA5UcBG2pWvRr;


desc
@@


1.1
log
@file patch-sprintf_c was initially added on branch OPENBSD_6_1.
@
text
@@


1.1.2.1
log
@Backport security fixes for CVE-2017-14033, CVE-2017-10784,
CVE-2017-0898, and CVE-2017-14064 to ruby 2.3.3.
@
text
@a0 61
$OpenBSD$
--- sprintf.c.orig	Fri Nov  4 19:52:31 2016
+++ sprintf.c	Tue Sep 19 12:11:56 2017
@@@@ -1147,6 +1147,8 @@@@ rb_str_format(int argc, const VALUE *argv, VALUE fmt)
 		fval = RFLOAT_VALUE(rb_Float(val));
 		if (isnan(fval) || isinf(fval)) {
 		    const char *expr;
+		    int elen;
+		    char sign = '\0';
 
 		    if (isnan(fval)) {
 			expr = "NaN";
@@@@ -1155,33 +1157,28 @@@@ rb_str_format(int argc, const VALUE *argv, VALUE fmt)
 			expr = "Inf";
 		    }
 		    need = (int)strlen(expr);
-		    if ((!isnan(fval) && fval < 0.0) || (flags & FPLUS))
-			need++;
+		    elen = need;
+		    i = 0;
+		    if (!isnan(fval) && fval < 0.0)
+			sign = '-';
+		    else if (flags & (FPLUS|FSPACE))
+			sign = (flags & FPLUS) ? '+' : ' ';
+		    if (sign)
+			++need;
 		    if ((flags & FWIDTH) && need < width)
 			need = width;
 
-		    CHECK(need + 1);
-		    snprintf(&buf[blen], need + 1, "%*s", need, "");
+		    FILL(' ', need);
 		    if (flags & FMINUS) {
-			if (!isnan(fval) && fval < 0.0)
-			    buf[blen++] = '-';
-			else if (flags & FPLUS)
-			    buf[blen++] = '+';
-			else if (flags & FSPACE)
-			    blen++;
-			memcpy(&buf[blen], expr, strlen(expr));
+			if (sign)
+			    buf[blen - need--] = sign;
+			memcpy(&buf[blen - need], expr, elen);
 		    }
 		    else {
-			if (!isnan(fval) && fval < 0.0)
-			    buf[blen + need - strlen(expr) - 1] = '-';
-			else if (flags & FPLUS)
-			    buf[blen + need - strlen(expr) - 1] = '+';
-			else if ((flags & FSPACE) && need > width)
-			    blen++;
-			memcpy(&buf[blen + need - strlen(expr)], expr,
-			       strlen(expr));
+			if (sign)
+			    buf[blen - elen - 1] = sign;
+			memcpy(&buf[blen - elen], expr, elen);
 		    }
-		    blen += strlen(&buf[blen]);
 		    break;
 		}
 
@

