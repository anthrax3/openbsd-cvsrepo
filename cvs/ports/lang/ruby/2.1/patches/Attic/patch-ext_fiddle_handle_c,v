head	1.1;
access;
symbols
	OPENBSD_5_8:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2015.12.24.11.21.09;	author jasper;	state dead;
branches
	1.1.2.1;
next	;
commitid	jqoi1yLUecUexpum;

1.1.2.1
date	2015.12.24.11.21.09;	author jasper;	state Exp;
branches;
next	;
commitid	jqoi1yLUecUexpum;


desc
@@


1.1
log
@file patch-ext_fiddle_handle_c was initially added on branch OPENBSD_5_8.
@
text
@@


1.1.2.1
log
@Security fix for CVE-2015-7551
@
text
@a0 78
$OpenBSD$

http://svn.ruby-lang.org/cgi-bin/viewvc.cgi?view=revision&revision=53156

--- ext/fiddle/handle.c.orig	Sun May  4 19:32:44 2014
+++ ext/fiddle/handle.c	Thu Dec 24 12:15:50 2015
@@@@ -1,6 +1,8 @@@@
 #include <ruby.h>
 #include <fiddle.h>
 
+#define SafeStringValueCStr(v) (rb_check_safe_obj(rb_string_value(&v)), StringValueCStr(v))
+
 VALUE rb_cHandle;
 
 struct dl_handle {
@@@@ -143,11 +145,11 @@@@ rb_fiddle_handle_initialize(int argc, VALUE argv[], VA
 	cflag = RTLD_LAZY | RTLD_GLOBAL;
 	break;
       case 1:
-	clib = NIL_P(lib) ? NULL : StringValuePtr(lib);
+	clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);
 	cflag = RTLD_LAZY | RTLD_GLOBAL;
 	break;
       case 2:
-	clib = NIL_P(lib) ? NULL : StringValuePtr(lib);
+	clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);
 	cflag = NUM2INT(flag);
 	break;
       default:
@@@@ -263,7 +265,7 @@@@ rb_fiddle_handle_to_i(VALUE self)
     return PTR2NUM(fiddle_handle);
 }
 
-static VALUE fiddle_handle_sym(void *handle, const char *symbol);
+static VALUE fiddle_handle_sym(void *handle, VALUE symbol);
 
 /*
  * Document-method: sym
@@@@ -282,7 +284,7 @@@@ rb_fiddle_handle_sym(VALUE self, VALUE sym)
 	rb_raise(rb_eFiddleError, "closed handle");
     }
 
-    return fiddle_handle_sym(fiddle_handle->ptr, StringValueCStr(sym));
+    return fiddle_handle_sym(fiddle_handle->ptr, sym);
 }
 
 #ifndef RTLD_NEXT
@@@@ -305,11 +307,11 @@@@ rb_fiddle_handle_sym(VALUE self, VALUE sym)
 static VALUE
 rb_fiddle_handle_s_sym(VALUE self, VALUE sym)
 {
-    return fiddle_handle_sym(RTLD_NEXT, StringValueCStr(sym));
+    return fiddle_handle_sym(RTLD_NEXT, sym);
 }
 
 static VALUE
-fiddle_handle_sym(void *handle, const char *name)
+fiddle_handle_sym(void *handle, VALUE symbol)
 {
 #if defined(HAVE_DLERROR)
     const char *err;
@@@@ -318,6 +320,7 @@@@ fiddle_handle_sym(void *handle, const char *name)
 # define CHECK_DLERROR
 #endif
     void (*func)();
+    const char *name = SafeStringValueCStr(symbol);
 
     rb_secure(2);
 #ifdef HAVE_DLERROR
@@@@ -367,7 +370,7 @@@@ fiddle_handle_sym(void *handle, const char *name)
     }
 #endif
     if( !func ){
-	rb_raise(rb_eFiddleError, "unknown symbol \"%s\"", name);
+	rb_raise(rb_eFiddleError, "unknown symbol \"%"PRIsVALUE"\"", symbol);
     }
 
     return PTR2NUM(func);
@

