head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.4
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.2
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.13.0.2
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.8
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.6
	OPENBSD_5_4_BASE:1.12
	OPENBSD_5_3:1.12.0.4
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.2
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.2
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2;
locks; strict;
comment	@# @;


1.18
date	2016.10.31.11.45.07;	author robert;	state Exp;
branches;
next	1.17;
commitid	L0mjomEWrIhDuqYR;

1.17
date	2015.12.15.15.32.04;	author robert;	state Exp;
branches;
next	1.16;
commitid	b3qz3HfheGXwtFx4;

1.16
date	2015.04.04.15.56.18;	author robert;	state Exp;
branches;
next	1.15;
commitid	B0UFXDkYECBqS2on;

1.15
date	2015.01.17.12.24.25;	author robert;	state Exp;
branches;
next	1.14;
commitid	g3IxNsPpT9D7c8OV;

1.14
date	2014.12.29.10.49.12;	author robert;	state Exp;
branches;
next	1.13;
commitid	sXBuhXfgcPHWPwW0;

1.13
date	2014.07.09.11.39.17;	author robert;	state Exp;
branches;
next	1.12;
commitid	rfOnxOCfdtnXRGha;

1.12
date	2012.04.13.11.51.49;	author robert;	state Exp;
branches;
next	1.11;

1.11
date	2012.01.08.20.05.45;	author robert;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.02.08.37.51;	author robert;	state Exp;
branches;
next	1.9;

1.9
date	2010.10.27.14.45.26;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.26.17.30.38;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.27.12.39.50;	author robert;	state dead;
branches;
next	1.6;

1.6
date	2010.04.08.12.12.33;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2010.03.24.17.57.50;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.21.13.43.10;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.20.17.16.44;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.19.15.07.01;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2009.09.06.07.25.27;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.18
log
@update to 4.6.1.5
@
text
@$OpenBSD$
--- mono/utils/mono-proclib.c.orig	Mon Oct 31 11:33:31 2016
+++ mono/utils/mono-proclib.c	Mon Oct 31 11:34:11 2016
@@@@ -73,30 +73,30 @@@@ mono_process_list (int *size)
 {
 #if USE_SYSCTL
 	int res, i;
-#ifdef KERN_PROC2
+#ifdef KERN_PROC
 	int mib [6];
-	size_t data_len = sizeof (struct kinfo_proc2) * 400;
-	struct kinfo_proc2 *processes = malloc (data_len);
+	size_t data_len = sizeof (struct kinfo_proc) * 400;
+	struct kinfo_proc *processes = malloc (data_len);
 #else
 	int mib [4];
 	size_t data_len = sizeof (struct kinfo_proc) * 16;
 	struct kinfo_proc *processes;
 	int limit = 8;
-#endif /* KERN_PROC2 */
+#endif /* KERN_PROC */
 	void **buf = NULL;
 
 	if (size)
 		*size = 0;
 
-#ifdef KERN_PROC2
+#ifdef KERN_PROC
 	if (!processes)
 		return NULL;
 
 	mib [0] = CTL_KERN;
-	mib [1] = KERN_PROC2;
+	mib [1] = KERN_PROC;
 	mib [2] = KERN_PROC_ALL;
 	mib [3] = 0;
-	mib [4] = sizeof(struct kinfo_proc2);
+	mib [4] = sizeof(struct kinfo_proc);
 	mib [5] = 400; /* XXX */
 
 	res = sysctl (mib, 6, processes, &data_len, NULL, 0);
@@@@ -126,13 +126,13 @@@@ mono_process_list (int *size)
 			break;
 		}
 	}
-#endif /* KERN_PROC2 */
+#endif /* KERN_PROC */
 
-#ifdef KERN_PROC2
-	res = data_len/sizeof (struct kinfo_proc2);
+#ifdef KERN_PROC
+	res = data_len/sizeof (struct kinfo_proc);
 #else
 	res = data_len/sizeof (struct kinfo_proc);
-#endif /* KERN_PROC2 */
+#endif /* KERN_PROC */
 	buf = (void **) g_realloc (buf, res * sizeof (void*));
 	for (i = 0; i < res; ++i)
 		buf [i] = GINT_TO_POINTER (processes [i].kinfo_pid_member);
@@@@ -218,8 +218,8 @@@@ get_pid_status_item_buf (int pid, const char *item, ch
 
 #if USE_SYSCTL
 
-#ifdef KERN_PROC2
-#define KINFO_PROC struct kinfo_proc2
+#ifdef KERN_PROC
+#define KINFO_PROC struct kinfo_proc
 #else
 #define KINFO_PROC struct kinfo_proc
 #endif
@@@@ -230,10 +230,10 @@@@ sysctl_kinfo_proc (gpointer pid, KINFO_PROC* processi)
 	int res;
 	size_t data_len = sizeof (KINFO_PROC);
 
-#ifdef KERN_PROC2
+#ifdef KERN_PROC
 	int mib [6];
 	mib [0] = CTL_KERN;
-	mib [1] = KERN_PROC2;
+	mib [1] = KERN_PROC;
 	mib [2] = KERN_PROC_PID;
 	mib [3] = GPOINTER_TO_UINT (pid);
 	mib [4] = sizeof(KINFO_PROC);
@@@@ -248,7 +248,7 @@@@ sysctl_kinfo_proc (gpointer pid, KINFO_PROC* processi)
 	mib [3] = GPOINTER_TO_UINT (pid);
 
 	res = sysctl (mib, 4, processi, &data_len, NULL, 0);
-#endif /* KERN_PROC2 */
+#endif /* KERN_PROC */
 
 	if (res < 0 || data_len != sizeof (KINFO_PROC))
 		return FALSE;
@


1.17
log
@update to 4.2.1.102; tested by and ok ajacoutot@@
@
text
@d2 3
a4 11
--- mono/utils/mono-proclib.c.orig	Sun Dec 13 18:16:49 2015
+++ mono/utils/mono-proclib.c	Sun Dec 13 20:29:38 2015
@@@@ -23,6 +23,7 @@@@
 #if defined(_POSIX_VERSION)
 #include <sys/errno.h>
 #include <sys/param.h>
+#include <errno.h>
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
@@@@ -68,30 +69,30 @@@@ mono_process_list (int *size)
d42 1
a42 1
@@@@ -121,13 +122,13 @@@@ mono_process_list (int *size)
d60 1
a60 1
@@@@ -213,8 +214,8 @@@@ get_pid_status_item_buf (int pid, const char *item, ch
d71 1
a71 1
@@@@ -225,10 +226,10 @@@@ sysctl_kinfo_proc (gpointer pid, KINFO_PROC* processi)
d84 1
a84 1
@@@@ -243,7 +244,7 @@@@ sysctl_kinfo_proc (gpointer pid, KINFO_PROC* processi)
@


1.16
log
@update to 3.12.1
@
text
@d2 11
a12 3
--- mono/utils/mono-proclib.c.orig	Sat Apr  4 12:30:47 2015
+++ mono/utils/mono-proclib.c	Sat Apr  4 12:33:03 2015
@@@@ -56,30 +56,30 @@@@ mono_process_list (int *size)
d50 1
a50 1
@@@@ -109,13 +109,13 @@@@ mono_process_list (int *size)
d65 1
a65 1
 	buf = g_realloc (buf, res * sizeof (void*));
d68 2
a69 2
@@@@ -213,29 +213,29 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
 {
d71 1
a71 1
 	int res;
d73 1
d75 1
a75 5
 	int mib [6];
-	size_t data_len = sizeof (struct kinfo_proc2);
-	struct kinfo_proc2 processi;
+	size_t data_len = sizeof (struct kinfo_proc);
+	struct kinfo_proc processi;
d77 5
a81 7
 	int mib [4];
 	size_t data_len = sizeof (struct kinfo_proc);
 	struct kinfo_proc processi;
-#endif /* KERN_PROC2 */
+#endif /* KERN_PROC */
 
 	memset (buf, 0, len);
d85 1
d91 3
a93 5
-	mib [4] = sizeof(struct kinfo_proc2);
+	mib [4] = sizeof(struct kinfo_proc);
 	mib [5] = 400; /* XXX */
 
 	res = sysctl (mib, 6, &processi, &data_len, NULL, 0);
d95 1
a95 9
-	if (res < 0 || data_len != sizeof (struct kinfo_proc2)) {
+	if (res < 0 || data_len != sizeof (struct kinfo_proc)) {
 		return buf;
 	}
 #else
@@@@ -248,7 +248,7 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
 	if (res < 0 || data_len != sizeof (struct kinfo_proc)) {
 		return buf;
 	}
d98 3
a100 3
 	strncpy (buf, processi.kinfo_name_member, len - 1);
 	return buf;
 #else
@


1.15
log
@update to 3.12.0
@
text
@d1 4
a4 4
$OpenBSD: patch-mono_utils_mono-proclib_c,v 1.14 2014/12/29 10:49:12 robert Exp $
--- mono/utils/mono-proclib.c.orig	Mon Jan 12 18:15:08 2015
+++ mono/utils/mono-proclib.c	Sat Jan 17 12:34:41 2015
@@@@ -55,15 +55,15 @@@@ mono_process_list (int *size)
d17 3
a19 2
 	size_t data_len = sizeof (struct kinfo_proc) * 400;
 	struct kinfo_proc *processes = malloc (data_len);
d25 4
a28 1
@@@@ -71,12 +71,12 @@@@ mono_process_list (int *size)
a31 2
-#ifdef KERN_PROC2
+#ifdef KERN_PROC
d42 4
a45 4
@@@@ -87,17 +87,17 @@@@ mono_process_list (int *size)
 	mib [3] = 0;
 	
 	res = sysctl (mib, 4, processes, &data_len, NULL, 0);
a48 4
 	if (res < 0) {
 		free (processes);
 		return NULL;
 	}
d60 1
a60 1
@@@@ -195,29 +195,29 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
d98 1
a98 1
@@@@ -230,7 +230,7 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
@


1.14
log
@update to 3.10.0
@
text
@d1 3
a3 3
$OpenBSD: patch-mono_utils_mono-proclib_c,v 1.13 2014/07/09 11:39:17 robert Exp $
--- mono/utils/mono-proclib.c.orig	Mon Sep 22 15:23:09 2014
+++ mono/utils/mono-proclib.c	Sun Dec 28 16:22:49 2014
d62 1
a62 1
@@@@ -191,29 +191,29 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
d100 1
a100 1
@@@@ -226,7 +226,7 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
@


1.13
log
@update to mono-3.4.0
@
text
@d1 4
a4 4
$OpenBSD$
--- mono/utils/mono-proclib.c.orig	Tue Jul  8 14:24:08 2014
+++ mono/utils/mono-proclib.c	Tue Jul  8 14:24:21 2014
@@@@ -54,15 +54,15 @@@@ mono_process_list (int *size)
d24 1
a24 1
@@@@ -70,12 +70,12 @@@@ mono_process_list (int *size)
d40 1
a40 1
@@@@ -86,17 +86,17 @@@@ mono_process_list (int *size)
d62 1
a62 1
@@@@ -190,29 +190,29 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
d100 1
a100 1
@@@@ -225,7 +225,7 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
@


1.12
log
@update to mono-2.10.8 and remove some old hacks now that we have
sem_timedwait()
@
text
@d1 4
a4 28
$OpenBSD: patch-mono_utils_mono-proclib_c,v 1.11 2012/01/08 20:05:45 robert Exp $
--- mono/utils/mono-proclib.c.orig	Mon Dec 19 22:10:27 2011
+++ mono/utils/mono-proclib.c	Tue Mar 20 22:40:12 2012
@@@@ -25,17 +25,17 @@@@
 #ifdef HAVE_SYS_USER_H
 #include <sys/user.h>
 #endif
-#ifdef HAVE_STRUCT_KINFO_PROC_KP_PROC
-#  ifdef KERN_PROC2
+#if defined(__OpenBSD__)
 #    define kinfo_pid_member p_pid
 #    define kinfo_name_member p_comm
-#  else
+#else
+#  ifdef HAVE_STRUCT_KINFO_PROC_KP_PROC
 #    define kinfo_pid_member kp_proc.p_pid
 #    define kinfo_name_member kp_proc.p_comm
+#  else
+#    define kinfo_pid_member ki_pid
+#    define kinfo_name_member ki_comm
 #  endif
-#else
-#define kinfo_pid_member ki_pid
-#define kinfo_name_member ki_comm
 #endif
 #define USE_SYSCTL 1
 #endif
@@@@ -52,15 +52,13 @@@@ mono_process_list (int *size)
d9 1
a9 1
+#if defined(__OpenBSD__)
d13 2
a16 1
+#endif
d20 1
d24 1
a24 1
@@@@ -68,33 +66,22 @@@@ mono_process_list (int *size)
d29 1
a35 1
+#if defined(__OpenBSD__)
a37 1
+#endif
d39 5
a43 8
-	res = sysctl (mib, 6, processes, &data_len, NULL, 0);
-#else
-	mib [0] = CTL_KERN;
-	mib [1] = KERN_PROC;
-	mib [2] = KERN_PROC_ALL;
-	mib [3] = 0;
-	
-	res = sysctl (mib, 4, processes, &data_len, NULL, 0);
d45 1
a45 1
+	res = sysctl (mib, (sizeof(mib) / sizeof(mib[0])), processes, &data_len, NULL, 0);
d53 3
a55 1
-#else
d58 1
d62 1
a62 1
@@@@ -188,42 +175,30 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
d67 1
a67 1
+#if defined(__OpenBSD__)
d71 2
a74 1
+#endif
d78 1
d83 1
a89 1
+#if defined(__OpenBSD__)
a91 1
+#endif
d93 2
a94 2
-	res = sysctl (mib, 6, &processi, &data_len, NULL, 0);
-
d96 5
a100 10
-		return buf;
-	}
-#else
-	mib [0] = CTL_KERN;
-	mib [1] = KERN_PROC;
-	mib [2] = KERN_PROC_PID;
-	mib [3] = GPOINTER_TO_UINT (pid);
-	
-	res = sysctl (mib, 4, &processi, &data_len, NULL, 0);
+	res = sysctl (mib, (sizeof(mib) / sizeof(mib[0])), &processi, &data_len, NULL, 0);
d105 1
a105 1
+
@


1.11
log
@fix after kinfo_proc2 removal
@
text
@d1 4
a4 4
$OpenBSD: patch-mono_utils_mono-proclib_c,v 1.10 2011/03/02 08:37:51 robert Exp $
--- mono/utils/mono-proclib.c.orig	Fri Aug 26 03:06:57 2011
+++ mono/utils/mono-proclib.c	Sun Jan  8 20:01:05 2012
@@@@ -24,17 +24,17 @@@@
d28 1
a28 1
@@@@ -51,15 +51,13 @@@@ mono_process_list (int *size)
d46 1
a46 1
@@@@ -67,33 +65,22 @@@@ mono_process_list (int *size)
d85 1
a85 1
@@@@ -187,42 +174,30 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
@


1.10
log
@update to 2.10.1
@
text
@d1 3
a3 3
$OpenBSD: patch-mono_utils_mono-proclib_c,v 1.9 2010/10/27 14:45:26 sthen Exp $
--- mono/utils/mono-proclib.c.orig	Wed Feb 23 20:21:01 2011
+++ mono/utils/mono-proclib.c	Sun Feb 27 14:15:30 2011
d10 1
a10 1
+#ifdef KERN_PROC2
d28 108
@


1.9
log
@Reorder the ifdefs so this works both with and without kvm_getprocs.
It didn't build on -current before, and no change on systems with
kvm_getprocs removed, so no need to bump.

Thanks naddy@@ for report + build test.
@
text
@d1 4
a4 4
$OpenBSD: patch-mono_utils_mono-proclib_c,v 1.8 2010/10/26 17:30:38 sthen Exp $
--- mono/utils/mono-proclib.c.orig	Tue Oct  5 21:59:29 2010
+++ mono/utils/mono-proclib.c	Wed Oct 27 15:39:35 2010
@@@@ -21,17 +21,17 @@@@
@


1.8
log
@adjust ifdefs so the kinfo_proc2 support is used. ok robert@@
@
text
@d1 5
a5 4
$OpenBSD$
--- mono/utils/mono-proclib.c.orig	Tue Oct 26 18:43:09 2010
+++ mono/utils/mono-proclib.c	Tue Oct 26 18:44:41 2010
@@@@ -22,16 +22,16 @@@@
d8 3
a10 5
 #ifdef HAVE_STRUCT_KINFO_PROC_KP_PROC
+#    define kinfo_pid_member kp_proc.p_pid
+#    define kinfo_name_member kp_proc.p_comm
+#else
 #  ifdef KERN_PROC2
d13 6
a18 3
 #  else
-#    define kinfo_pid_member kp_proc.p_pid
-#    define kinfo_name_member kp_proc.p_comm
@


1.7
log
@Update to mono 2.6.4;
(a lot of patches are in upstream now)
@
text
@d1 4
a4 14
$OpenBSD: patch-mono_utils_mono-proclib_c,v 1.6 2010/04/08 12:12:33 robert Exp $
--- mono/utils/mono-proclib.c.orig	Sat Oct 31 05:22:03 2009
+++ mono/utils/mono-proclib.c	Thu Apr  8 11:55:46 2010
@@@@ -13,6 +13,9 @@@@
 #endif
 
 /* FIXME: bsds untested */
+#if defined(__FreeBSD__) || defined(__OpenBSD__)
+#include <sys/param.h>
+#endif
 #if defined(__APPLE__) || defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__)
 #include <sys/types.h>
 #include <sys/sysctl.h>
@@@@ -21,8 +24,13 @@@@
a7 6
-#define kinfo_pid_member kp_proc.p_pid
-#define kinfo_name_member kp_proc.p_comm
+#  ifdef KERN_PROC2
+#    define kinfo_pid_member p_pid
+#    define kinfo_name_member p_comm
+#  else
a9 14
+#  endif
 #else
 #define kinfo_pid_member ki_pid
 #define kinfo_name_member ki_comm
@@@@ -41,10 +49,16 @@@@ gpointer*
 mono_process_list (int *size)
 {
 #if USE_SYSCTL
-	int mib [4];
 	int res, i;
+#ifdef KERN_PROC2
+	int mib [6];
+	size_t data_len = sizeof (struct kinfo_proc2) * 400;
+	struct kinfo_proc2 *processes = malloc (data_len);
d11 15
a25 85
+	int mib [4];
 	size_t data_len = sizeof (struct kinfo_proc) * 400;
 	struct kinfo_proc *processes = malloc (data_len);
+#endif
 	void **buf = NULL;
 
 	if (size)
@@@@ -52,17 +66,33 @@@@ mono_process_list (int *size)
 	if (!processes)
 		return NULL;
 
+#ifdef KERN_PROC2
 	mib [0] = CTL_KERN;
+	mib [1] = KERN_PROC2;
+	mib [2] = KERN_PROC_ALL;
+	mib [3] = 0;
+	mib [4] = sizeof(struct kinfo_proc2);
+	mib [5] = 400; /* XXX */
+
+	res = sysctl (mib, 6, processes, &data_len, NULL, 0);
+#else
+	mib [0] = CTL_KERN;
 	mib [1] = KERN_PROC;
 	mib [2] = KERN_PROC_ALL;
 	mib [3] = 0;
 	
 	res = sysctl (mib, 4, processes, &data_len, NULL, 0);
+#endif /* KERN_PROC2 */
+
 	if (res < 0) {
 		free (processes);
 		return NULL;
 	}
+#ifdef KERN_PROC2
+	res = data_len/sizeof (struct kinfo_proc2);
+#else
 	res = data_len/sizeof (struct kinfo_proc);
+#endif /* KERN_PROC2 */
 	buf = g_realloc (buf, res * sizeof (void*));
 	for (i = 0; i < res; ++i)
 		buf [i] = GINT_TO_POINTER (processes [i].kinfo_pid_member);
@@@@ -155,14 +185,34 @@@@ char*
 mono_process_get_name (gpointer pid, char *buf, int len)
 {
 #if USE_SYSCTL
-	int mib [4];
 	int res;
+#ifdef KERN_PROC2
+	int mib [6];
+	size_t data_len = sizeof (struct kinfo_proc2);
+	struct kinfo_proc2 processi;
+#else
+	int mib [4];
 	size_t data_len = sizeof (struct kinfo_proc);
 	struct kinfo_proc processi;
+#endif /* KERN_PROC2 */
 
 	memset (buf, 0, len);
 
+#ifdef KERN_PROC2
 	mib [0] = CTL_KERN;
+	mib [1] = KERN_PROC2;
+	mib [2] = KERN_PROC_PID;
+	mib [3] = GPOINTER_TO_UINT (pid);
+	mib [4] = sizeof(struct kinfo_proc2);
+	mib [5] = 400; /* XXX */
+
+	res = sysctl (mib, 6, &processi, &data_len, NULL, 0);
+
+	if (res < 0 || data_len != sizeof (struct kinfo_proc2)) {
+		return buf;
+	}
+#else
+	mib [0] = CTL_KERN;
 	mib [1] = KERN_PROC;
 	mib [2] = KERN_PROC_PID;
 	mib [3] = GPOINTER_TO_UINT (pid);
@@@@ -171,6 +221,7 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
 	if (res < 0 || data_len != sizeof (struct kinfo_proc)) {
 		return buf;
 	}
+#endif /* KERN_PROC2 */
 	strncpy (buf, processi.kinfo_name_member, len - 1);
 	return buf;
 #else
@


1.6
log
@Fix kinfo_proc2 code and add support for more mono stuff using sysctl to
get process informations. Remove the mkbundle.cs patch and replace it
with one that uses configure.in so the libgc dependency ends up in the
pkg-config file. Move disabled features to configure.in from our Makefile
@
text
@d1 1
a1 1
$OpenBSD: patch-mono_utils_mono-proclib_c,v 1.5 2010/03/24 17:57:50 robert Exp $
@


1.5
log
@Forgot to re-enable some commented code, let's do it now.
@
text
@d1 1
a1 1
$OpenBSD: patch-mono_utils_mono-proclib_c,v 1.4 2010/03/21 13:43:10 robert Exp $
d3 1
a3 1
+++ mono/utils/mono-proclib.c	Wed Mar 24 18:17:38 2010
d14 17
a30 1
@@@@ -41,9 +44,14 @@@@ gpointer*
d39 1
d43 1
a44 1
 	struct kinfo_proc *processes = malloc (data_len);
d47 2
a48 1
@@@@ -52,17 +60,33 @@@@ mono_process_list (int *size)
d82 1
a82 1
@@@@ -155,14 +179,33 @@@@ char*
d91 1
d95 1
a96 1
 	struct kinfo_proc processi;
d118 1
a118 1
@@@@ -171,6 +214,7 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
@


1.4
log
@Include sys/param.h that was previously missed by me
@
text
@d1 1
a1 1
$OpenBSD: patch-mono_utils_mono-proclib_c,v 1.3 2010/03/20 17:16:44 robert Exp $
d3 1
a3 1
+++ mono/utils/mono-proclib.c	Sun Mar 21 10:45:48 2010
d14 1
a14 1
@@@@ -41,9 +44,15 @@@@ gpointer*
d18 2
a19 2
+	//int res, i;
+	int res;
d24 1
a24 2
 	int mib [4];
-	int res, i;
d30 1
a30 1
@@@@ -52,20 +61,37 @@@@ mono_process_list (int *size)
d62 1
a62 2
-	for (i = 0; i < res; ++i)
+/*	for (i = 0; i < res; ++i)
d64 1
a64 5
+*/
 	free (processes);
 	if (size)
 		*size = res;
@@@@ -155,14 +181,33 @@@@ char*
d99 1
a99 1
@@@@ -171,6 +216,7 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
@


1.3
log
@- update to the latest stable version: 2.6.3
- move to autoconf
- regen patches

ok ajacoutot@@, jasper@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ mono/utils/mono-proclib.c	Sat Mar 20 11:12:40 2010
d105 1
a105 1
@@@@ -171,7 +216,8 @@@@ mono_process_get_name (gpointer pid, char *buf, int le
a108 1
-	strncpy (buf, processi.kinfo_name_member, len - 1);
d110 1
a110 1
+//	strncpy (buf, processi.kinfo_name_member, len - 1);
a112 1
 	char fname [128];
@


1.2
log
@- unbreak after KERN_PROC2 changes

reads ok to sthen@@
@
text
@d1 3
a3 3
$OpenBSD: patch-mono_utils_mono-proclib_c,v 1.1 2009/09/06 07:25:27 ajacoutot Exp $
--- mono/utils/mono-proclib.c.orig	Sat Aug 15 03:03:11 2009
+++ mono/utils/mono-proclib.c	Tue Jan 19 07:11:00 2010
d14 1
a14 1
@@@@ -41,9 +44,14 @@@@ gpointer*
d18 2
a19 2
-	int mib [4];
 	int res, i;
d24 2
a25 1
+	int mib [4];
d27 1
a27 1
+#endif /* KERN_PROC2 */
d31 1
a31 1
@@@@ -52,17 +60,34 @@@@ mono_process_list (int *size)
a56 1
+
d63 2
a64 1
 	for (i = 0; i < res; ++i)
d66 5
a70 1
@@@@ -155,23 +180,45 @@@@ char*
a75 1
 	char *p;
d105 1
a105 4
-	
+
 	res = sysctl (mib, 4, &processi, &data_len, NULL, 0);
+
d109 1
d111 1
a111 2
+
 	strncpy (buf, processi.kinfo_name_member, len - 1);
d114 1
@


1.1
log
@Major update to mono-2.5.
While beeing a development release, this is the most stable version I
used on OpenBSD for now. Several patches are removed as they went
upstream. Thanks to jolan@@ for pointing me at this release and cooking a
couple of patches.

Fix build on powerpc and add it to ONLY_FOR_ARCHS ; slightly tested on
macppc.

A similar port was successfuly tested by jolan@@ on amd64.

no objection alek@@ (maintainer)
ok jolan@@ ok jasper@@
@
text
@d1 3
a3 3
$OpenBSD$
--- mono/utils/mono-proclib.c.orig	Sun Aug 23 12:22:41 2009
+++ mono/utils/mono-proclib.c	Sun Aug 23 12:22:52 2009
d14 99
@

