head	1.8;
access;
symbols
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_6:1.1.1.1.0.4
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	robert_20081015:1.1.1.1
	robert:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2010.10.15.16.21.07;	author robert;	state dead;
branches;
next	1.7;

1.7
date	2010.08.23.13.18.50;	author robert;	state Exp;
branches;
next	1.6;

1.6
date	2010.08.22.17.00.00;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2010.08.22.16.59.04;	author robert;	state dead;
branches;
next	1.4;

1.4
date	2010.08.18.10.51.55;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.23.08.25.26;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.06.07.25.27;	author ajacoutot;	state dead;
branches;
next	1.1;

1.1
date	2008.10.15.13.34.10;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.10.15.13.34.10;	author robert;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update to mono-2.8;
there might be some breakage but this is the good time to do the update
@
text
@$OpenBSD: patch-mono_mini_exceptions-amd64_c,v 1.7 2010/08/23 13:18:50 robert Exp $
--- mono/mini/exceptions-amd64.c.orig	Mon Aug 23 10:08:49 2010
+++ mono/mini/exceptions-amd64.c	Mon Aug 23 11:10:09 2010
@@@@ -723,28 +723,30 @@@@ gboolean
 mono_arch_handle_exception (void *sigctx, gpointer obj, gboolean test_only)
 {
 #if defined(MONO_ARCH_USE_SIGACTION)
+	ucontext_t *ctx = (ucontext_t*)sigctx;
+
 	/*
 	 * Handling the exception in the signal handler is problematic, since the original
 	 * signal is disabled, and we could run arbitrary code though the debugger. So
 	 * resume into the normal stack and do most work there if possible.
 	 */
 	MonoJitTlsData *jit_tls = TlsGetValue (mono_jit_tls_id);
-	guint64 sp = UCONTEXT_REG_RSP (sigctx);
+	guint64 sp = UCONTEXT_REG_RSP (ctx);
 
 	/* Pass the ctx parameter in TLS */
-	mono_arch_sigctx_to_monoctx (sigctx, &jit_tls->ex_ctx);
+	mono_arch_sigctx_to_monoctx (ctx, &jit_tls->ex_ctx);
 	/* The others in registers */
-	UCONTEXT_REG_RDI (sigctx) = (guint64)obj;
-	UCONTEXT_REG_RSI (sigctx) = test_only;
+	UCONTEXT_REG_RDI (ctx) = (guint64)obj;
+	UCONTEXT_REG_RSI (ctx) = test_only;
 
 	/* Allocate a stack frame below the red zone */
 	sp -= 128;
 	/* The stack should be unaligned */
 	if (sp % 8 == 0)
 		sp -= 8;
-	UCONTEXT_REG_RSP (sigctx) = sp;
+	UCONTEXT_REG_RSP (ctx) = sp;
 
-	UCONTEXT_REG_RIP (sigctx) = (guint64)handle_signal_exception;
+	UCONTEXT_REG_RIP (ctx) = (guint64)handle_signal_exception;
 
 	return TRUE;
 #else
@


1.7
log
@- fix exception handling on amd64
- fix i386 builds
- remove a patchfile that is not needed anymore
@
text
@d1 1
a1 1
$OpenBSD: patch-mono_mini_exceptions-amd64_c,v 1.6 2010/08/22 17:00:00 robert Exp $
@


1.6
log
@add a missing patchfile missed by either me or cvs
@
text
@d1 4
a4 5
$OpenBSD$
--- mono/mini/exceptions-amd64.c.orig	Sun Aug 22 18:56:46 2010
+++ mono/mini/exceptions-amd64.c	Sun Aug 22 18:56:56 2010
@@@@ -722,7 +722,7 @@@@ handle_signal_exception (gpointer obj, gboolean test_o
 gboolean
d7 3
a9 2
-#if defined(MONO_ARCH_USE_SIGACTION)
+#if defined(MONO_ARCH_USE_SIGACTION) && defined(UCONTEXT_GREGS)
d13 28
@


1.5
log
@add a missing patchfile missed by either me or cvs
@
text
@d1 3
a3 3
$OpenBSD: patch-mono_mini_exceptions-amd64_c,v 1.4 2010/08/18 10:51:55 robert Exp $
--- mono/mini/exceptions-amd64.c.orig	Wed Aug 18 09:40:10 2010
+++ mono/mini/exceptions-amd64.c	Wed Aug 18 09:40:32 2010
@


1.4
log
@Update to 2.6.7; remove patches that were merged backed to upstream
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@Enable sigaction support on amd64 too, by using struct sigcontext.
@
text
@d2 5
a6 98
--- mono/mini/exceptions-amd64.c.orig	Tue Mar 23 08:56:35 2010
+++ mono/mini/exceptions-amd64.c	Tue Mar 23 08:59:41 2010
@@@@ -711,7 +711,7 @@@@ mono_arch_handle_exception (void *sigctx, gpointer obj
 	return TRUE;
 }
 
-#ifdef MONO_ARCH_USE_SIGACTION
+#if defined(MONO_ARCH_USE_SIGACTION) && defined(UCONTEXT_GREGS)
 static inline guint64*
 gregs_from_ucontext (ucontext_t *ctx)
 {
@@@@ -721,7 +721,7 @@@@ gregs_from_ucontext (ucontext_t *ctx)
 void
 mono_arch_sigctx_to_monoctx (void *sigctx, MonoContext *mctx)
 {
-#ifdef MONO_ARCH_USE_SIGACTION
+#if defined(MONO_ARCH_USE_SIGACTION) && defined(UCONTEXT_GREGS)
 	ucontext_t *ctx = (ucontext_t*)sigctx;
 
     guint64 *gregs = gregs_from_ucontext (ctx);
@@@@ -739,6 +739,22 @@@@ mono_arch_sigctx_to_monoctx (void *sigctx, MonoContext
 	mctx->r13 = gregs [REG_R13];
 	mctx->r14 = gregs [REG_R14];
 	mctx->r15 = gregs [REG_R15];
+#elif defined(MONO_ARCH_USE_SIGACTION)
+	ucontext_t *ctx = (ucontext_t*)sigctx;
+
+	mctx->rax = UCONTEXT_REG_RAX (ctx);
+	mctx->rbx = UCONTEXT_REG_RBX (ctx);
+	mctx->rcx = UCONTEXT_REG_RCX (ctx);
+	mctx->rdx = UCONTEXT_REG_RDX (ctx);
+	mctx->rbp = UCONTEXT_REG_RBP (ctx);
+	mctx->rsp = UCONTEXT_REG_RSP (ctx);
+	mctx->rsi = UCONTEXT_REG_RSI (ctx);
+	mctx->rdi = UCONTEXT_REG_RDI (ctx);
+	mctx->rip = UCONTEXT_REG_RIP (ctx);
+	mctx->r12 = UCONTEXT_REG_R12 (ctx);
+	mctx->r13 = UCONTEXT_REG_R13 (ctx);
+	mctx->r14 = UCONTEXT_REG_R14 (ctx);
+	mctx->r15 = UCONTEXT_REG_R15 (ctx);
 #else
 	MonoContext *ctx = (MonoContext *)sigctx;
 
@@@@ -761,7 +777,7 @@@@ mono_arch_sigctx_to_monoctx (void *sigctx, MonoContext
 void
 mono_arch_monoctx_to_sigctx (MonoContext *mctx, void *sigctx)
 {
-#ifdef MONO_ARCH_USE_SIGACTION
+#if defined(MONO_ARCH_USE_SIGACTION) && defined(UCONTEXT_GREGS)
 	ucontext_t *ctx = (ucontext_t*)sigctx;
 
     guint64 *gregs = gregs_from_ucontext (ctx);
@@@@ -779,6 +795,22 @@@@ mono_arch_monoctx_to_sigctx (MonoContext *mctx, void *
 	gregs [REG_R13] = mctx->r13;
 	gregs [REG_R14] = mctx->r14;
 	gregs [REG_R15] = mctx->r15;
+#elif defined(MONO_ARCH_USE_SIGACTION)
+	ucontext_t *ctx = (ucontext_t*)sigctx;
+
+	UCONTEXT_REG_RAX (ctx) = mctx->rax;
+	UCONTEXT_REG_RBX (ctx) = mctx->rbx;
+	UCONTEXT_REG_RCX (ctx) = mctx->rcx;
+	UCONTEXT_REG_RDX (ctx) = mctx->rdx;
+	UCONTEXT_REG_RBP (ctx) = mctx->rbp;
+	UCONTEXT_REG_RSP (ctx) = mctx->rsp;
+	UCONTEXT_REG_RSI (ctx) = mctx->rsi;
+	UCONTEXT_REG_RDI (ctx) = mctx->rdi;
+	UCONTEXT_REG_RIP (ctx) = mctx->rip;
+	UCONTEXT_REG_R12 (ctx) = mctx->r12;
+	UCONTEXT_REG_R13 (ctx) = mctx->r13;
+	UCONTEXT_REG_R14 (ctx) = mctx->r14;
+	UCONTEXT_REG_R15 (ctx) = mctx->r15;
 #else
 	MonoContext *ctx = (MonoContext *)sigctx;
 
@@@@ -801,14 +833,16 @@@@ mono_arch_monoctx_to_sigctx (MonoContext *mctx, void *
 gpointer
 mono_arch_ip_from_context (void *sigctx)
 {
-	
-#ifdef MONO_ARCH_USE_SIGACTION
-
+#if defined(MONO_ARCH_USE_SIGACTION) && defined(UCONTEXT_GREGS)
 	ucontext_t *ctx = (ucontext_t*)sigctx;
 
     guint64 *gregs = gregs_from_ucontext (ctx);
 
 	return (gpointer)gregs [REG_RIP];
+#elif defined(MONO_ARCH_USE_SIGACTION)
+	ucontext_t *ctx = (ucontext_t*)sigctx;
+
+	return (gpointer)UCONTEXT_REG_RIP (ctx);
 #else
 	MonoContext *ctx = sigctx;
 	return (gpointer)ctx->rip;
@@@@ -865,7 +899,7 @@@@ altstack_handle_and_restore (void *sigctx, gpointer ob
 void
 mono_arch_handle_altstack_exception (void *sigctx, gpointer fault_addr, gboolean stack_ovf)
d8 1
a8 1
-#ifdef MONO_ARCH_USE_SIGACTION
d10 3
a12 3
 	MonoException *exc = NULL;
 	ucontext_t *ctx = (ucontext_t*)sigctx;
 	guint64 *gregs = gregs_from_ucontext (ctx);
@


1.2
log
@Major update to mono-2.5.
While beeing a development release, this is the most stable version I
used on OpenBSD for now. Several patches are removed as they went
upstream. Thanks to jolan@@ for pointing me at this release and cooking a
couple of patches.

Fix build on powerpc and add it to ONLY_FOR_ARCHS ; slightly tested on
macppc.

A similar port was successfuly tested by jolan@@ on amd64.

no objection alek@@ (maintainer)
ok jolan@@ ok jasper@@
@
text
@d1 6
a6 11
$OpenBSD: patch-mono_mini_exceptions-amd64_c,v 1.1 2008/10/15 13:34:10 robert Exp $
--- mono/mini/exceptions-amd64.c.orig	Tue Oct 14 19:51:39 2008
+++ mono/mini/exceptions-amd64.c	Tue Oct 14 19:52:11 2008
@@@@ -11,7 +11,7 @@@@
 #include <glib.h>
 #include <signal.h>
 #include <string.h>
-#ifndef PLATFORM_WIN32
+#if !defined(PLATFORM_WIN32) && !defined(__OpenBSD__)
 #include <sys/ucontext.h>
 #endif
d8 98
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import of mono-2.0:

Mono is an open source implementation of .NET Development Framework.
Its objective is to enable UNIX developers to build and deploy cross-platform
.NET Applications. The project implements various technologies developed by
Microsoft that have now been submitted to the ECMA for standardization.

Mono provides the necessary software to develop and run .NET client and
server applications on BSD, Linux, Solaris, Mac OS X, Windows and Unix.

from alek@@, modifications by me and some amd64 patches from
Giovanni Bechis

mono is not linked to the build yet, it's getting imported so we can
work on it in tree;
@
text
@@
