head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2014.07.09.11.39.17;	author robert;	state dead;
branches;
next	1.2;
commitid	rfOnxOCfdtnXRGha;

1.2
date	2013.01.24.13.52.09;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.13.21.38.37;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update to mono-3.4.0
@
text
@$OpenBSD: patch-mono_metadata_gc_c,v 1.2 2013/01/24 13:52:09 kurt Exp $
--- mono/metadata/gc.c.orig	Mon Jan 30 13:01:23 2012
+++ mono/metadata/gc.c	Mon Jan 21 16:48:48 2013
@@@@ -1130,7 +1130,7 @@@@ mono_gc_init (void)
 	MONO_SEM_INIT (&finalizer_sem, 0);
 #endif
 
-	gc_thread = mono_thread_create_internal (mono_domain_get (), finalizer_thread, NULL, FALSE, 0);
+	gc_thread = mono_thread_create_internal (mono_domain_get (), finalizer_thread, NULL, FALSE, TRUE, 0);
 	ves_icall_System_Threading_Thread_SetName_internal (gc_thread, mono_string_new (mono_domain_get (), "Finalizer"));
 }
 
@@@@ -1175,6 +1175,21 @@@@ mono_gc_cleanup (void)
 					Sleep (100);
 				}
 
+			} else {
+				int ret;
+
+                                /* Wait for the thread to actually exit */
+                                ret = WaitForSingleObjectEx (gc_thread->handle, INFINITE, TRUE);
+                                g_assert (ret == WAIT_OBJECT_0);
+
+#ifndef HOST_WIN32
+                               /*
+                                * The above wait only waits for the exited event to be signalled, the thread might still be running. To fix this race, we
+                                * create the finalizer thread without calling pthread_detach () on it, so we can wait for it manually.
+                                */
+                               ret = pthread_join ((gpointer)(gsize)gc_thread->tid, NULL);
+                               g_assert (ret == 0);
+#endif
 			}
 		}
 		gc_thread = NULL;
@


1.2
log
@- Replace my termination race work-around with upstream's proper fix.
okay naddy@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@Fix termination segfault caused by a use-after free race by having the
finalizer_thread exit as soon as it finishes. okay robert@@ naddy@@
@
text
@d2 5
a6 4
--- mono/metadata/gc.c.orig	Thu Jan 10 10:55:32 2013
+++ mono/metadata/gc.c	Thu Jan 10 11:24:55 2013
@@@@ -1098,6 +1098,7 @@@@ finalizer_thread (gpointer unused)
 	}
d8 3
a10 3
 	SetEvent (shutdown_event);
+	pthread_exit(NULL);
 	return 0;
d13 22
@

