head	1.6;
access;
symbols
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3;
locks; strict;
comment	@# @;


1.6
date	2015.01.17.12.24.25;	author robert;	state dead;
branches;
next	1.5;
commitid	g3IxNsPpT9D7c8OV;

1.5
date	2014.12.30.18.47.31;	author robert;	state Exp;
branches;
next	1.4;
commitid	Eewvj2aFNAfAwSl6;

1.4
date	2014.07.09.11.39.17;	author robert;	state dead;
branches;
next	1.3;
commitid	rfOnxOCfdtnXRGha;

1.3
date	2013.01.24.13.52.09;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.27.12.39.50;	author robert;	state dead;
branches;
next	1.1;

1.1
date	2010.04.01.21.53.51;	author robert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@update to 3.12.0
@
text
@$OpenBSD: patch-mono_metadata_threads_c,v 1.5 2014/12/30 18:47:31 robert Exp $
--- mono/metadata/threads.c.orig	Tue Dec 30 19:05:28 2014
+++ mono/metadata/threads.c	Tue Dec 30 19:05:33 2014
@@@@ -651,7 +651,7 @@@@ static guint32 WINAPI start_wrapper_internal(void *dat
 
 	/* if the name was set before starting, we didn't invoke the profiler callback */
 	if (internal->name && (internal->flags & MONO_THREAD_FLAG_NAME_SET)) {
-		char *tname = g_utf16_to_utf8 (internal->name, -1, NULL, NULL, NULL);
+		char *tname = g_utf16_to_utf8 (internal->name, internal->name_len, NULL, NULL, NULL);
 		mono_profiler_thread_name (internal->tid, tname);
 		g_free (tname);
 	}
@


1.5
log
@fix reading past the end of a string when setting the native thread name,
which would lead to a crash on i386; noticed by sthen@@

also remove a bogus patch which hardcodes the python path and properly
substitute the python binary's path in the Makefile instead
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@update to mono-3.4.0
@
text
@d1 4
a4 6
$OpenBSD: patch-mono_metadata_threads_c,v 1.3 2013/01/24 13:52:09 kurt Exp $
--- mono/metadata/threads.c.orig	Mon Jan 30 13:01:23 2012
+++ mono/metadata/threads.c	Mon Jan 21 16:48:48 2013
@@@@ -892,13 +892,22 @@@@ register_thread_start_argument (MonoThread *thread, st
 	mono_g_hash_table_insert (thread_start_args, thread, start_info->start_arg);
 }
d6 7
a12 44
-MonoInternalThread* mono_thread_create_internal (MonoDomain *domain, gpointer func, gpointer arg, gboolean threadpool_thread, guint32 stack_size)
+/*
+ * mono_thread_create_internal:
+ * 
+ * If NO_DETACH is TRUE, then the thread is not detached using pthread_detach (). This is needed to fix the race condition where waiting for a thred to exit only waits for its exit event to be
+ * signalled, which can cause shutdown crashes if the thread shutdown code accesses data already freed by the runtime shutdown.
+ * Currently, this is only used for the finalizer thread.
+ */
+MonoInternalThread*
+mono_thread_create_internal (MonoDomain *domain, gpointer func, gpointer arg, gboolean threadpool_thread, gboolean no_detach, guint32 stack_size)
 {
 	MonoThread *thread;
 	MonoInternalThread *internal;
 	HANDLE thread_handle;
 	struct StartInfo *start_info;
 	gsize tid;
+	guint32 create_flags;
 
 	thread = create_thread_object (domain);
 	internal = create_internal_thread_object ();
@@@@ -930,8 +939,13 @@@@ MonoInternalThread* mono_thread_create_internal (MonoD
 	/* Create suspended, so we can do some housekeeping before the thread
 	 * starts
 	 */
+	create_flags = CREATE_SUSPENDED;
+#ifndef HOST_WIN32
+	if (no_detach)
+		create_flags |= CREATE_NO_DETACH;
+#endif
 	thread_handle = mono_create_thread (NULL, stack_size, (LPTHREAD_START_ROUTINE)start_wrapper, start_info,
-				     CREATE_SUSPENDED, &tid);
+				     create_flags, &tid);
 	THREAD_DEBUG (g_message ("%s: Started thread ID %"G_GSIZE_FORMAT" (handle %p)", __func__, tid, thread_handle));
 	if (thread_handle == NULL) {
 		/* The thread couldn't be created, so throw an exception */
@@@@ -965,7 +979,7 @@@@ MonoInternalThread* mono_thread_create_internal (MonoD
 void
 mono_thread_create (MonoDomain *domain, gpointer func, gpointer arg)
 {
-	mono_thread_create_internal (domain, func, arg, FALSE, 0);
+	mono_thread_create_internal (domain, func, arg, FALSE, FALSE, 0);
 }
 
 /*
@


1.3
log
@- Replace my termination race work-around with upstream's proper fix.
okay naddy@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Update to mono 2.6.4;
(a lot of patches are in upstream now)
@
text
@d1 35
a35 10
$OpenBSD: patch-mono_metadata_threads_c,v 1.1 2010/04/01 21:53:51 robert Exp $
--- mono/metadata/threads.c.orig	Thu Apr  1 21:28:08 2010
+++ mono/metadata/threads.c	Thu Apr  1 21:36:45 2010
@@@@ -15,6 +15,10 @@@@
 #include <glib.h>
 #include <signal.h>
 #include <string.h>
+#if defined(__OpenBSD__)
+#include <pthread.h>
+#include <pthread_np.h>
d37 13
d51 1
a51 30
 #include <mono/metadata/object.h>
 #include <mono/metadata/domain-internals.h>
@@@@ -855,6 +859,15 @@@@ mono_thread_get_stack_bounds (guint8 **staddr, size_t 
 #    elif defined(sun)
 	*staddr = NULL;
 	pthread_attr_getstacksize (&attr, &stsize);
+#    elif defined(__OpenBSD__)
+	stack_t ss;
+	int rslt;
+
+	rslt = pthread_stackseg_np(pthread_self(), &ss);
+	g_assert (rslt == 0);
+
+	*staddr = (guint8*)((size_t)ss.ss_sp - ss.ss_size);
+	*stsize = ss.ss_size;
 #    else
 	*staddr = NULL;
 	*stsize = 0;
@@@@ -862,8 +875,10 @@@@ mono_thread_get_stack_bounds (guint8 **staddr, size_t 
 #    endif
 #  endif
 
-#  ifndef sun
+#  if !defined(sun)
+#    if !defined(__OpenBSD__)
 	pthread_attr_getstack (&attr, (void**)staddr, stsize);
+#    endif
 	if (*staddr)
 		g_assert ((current > *staddr) && (current < *staddr + *stsize));
 #  endif
@


1.1
log
@- use pthread_stackseg_np to get the stack boundaries on OpenBSD
- remove some scripts that we don't use from BASH_SCRIPTS
- ignore one of the regression tests and continue if it fails
@
text
@d1 1
a1 1
$OpenBSD$
@

