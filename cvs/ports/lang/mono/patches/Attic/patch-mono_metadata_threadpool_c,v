head	1.6;
access;
symbols
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.4
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.12.15.15.32.04;	author robert;	state dead;
branches;
next	1.5;
commitid	b3qz3HfheGXwtFx4;

1.5
date	2015.10.03.11.53.44;	author robert;	state Exp;
branches;
next	1.4;
commitid	Qu7fVLbJQ0CAaeEB;

1.4
date	2015.01.17.12.24.25;	author robert;	state Exp;
branches;
next	1.3;
commitid	g3IxNsPpT9D7c8OV;

1.3
date	2014.07.09.11.39.17;	author robert;	state Exp;
branches;
next	1.2;
commitid	rfOnxOCfdtnXRGha;

1.2
date	2013.01.24.13.52.09;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.13.11.51.49;	author robert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@update to 4.2.1.102; tested by and ok ajacoutot@@
@
text
@$OpenBSD: patch-mono_metadata_threadpool_c,v 1.5 2015/10/03 11:53:44 robert Exp $
--- mono/metadata/threadpool.c.orig	Wed Aug 26 00:09:13 2015
+++ mono/metadata/threadpool.c	Sat Sep 26 19:00:06 2015
@@@@ -1667,11 +1667,7 @@@@ async_invoke_thread (gpointer data)
 
 			mono_gc_set_skip_thread (TRUE);
 
-#if defined(__OpenBSD__)
-			while (mono_cq_count (tp->queue) == 0 && (res = mono_sem_wait (&tp->new_job, TRUE)) == -1) {// && errno == EINTR) {
-#else
 			while (mono_cq_count (tp->queue) == 0 && (res = mono_sem_timedwait (&tp->new_job, 2000, TRUE)) == -1) {// && errno == EINTR) {
-#endif
 				if (mono_runtime_is_shutting_down ())
 					break;
 				check_for_interruption_critical ();
@


1.5
log
@update to mono-4.0.4.1 and introduce the MODMONO_GMCS_COMPAT flag
in the mono module because upstream has merged all the compilers
into mcs
@
text
@d1 1
a1 1
$OpenBSD: patch-mono_metadata_threadpool_c,v 1.4 2015/01/17 12:24:25 robert Exp $
@


1.4
log
@update to 3.12.0
@
text
@d1 4
a4 4
$OpenBSD: patch-mono_metadata_threadpool_c,v 1.3 2014/07/09 11:39:17 robert Exp $
--- mono/metadata/threadpool.c.orig	Wed Dec  3 12:25:48 2014
+++ mono/metadata/threadpool.c	Sat Jan 17 12:34:41 2015
@@@@ -1672,11 +1672,7 @@@@ async_invoke_thread (gpointer data)
@


1.3
log
@update to mono-3.4.0
@
text
@d1 4
a4 4
$OpenBSD$
--- mono/metadata/threadpool.c.orig	Tue Jul  8 15:24:02 2014
+++ mono/metadata/threadpool.c	Tue Jul  8 15:24:10 2014
@@@@ -1560,11 +1560,7 @@@@ async_invoke_thread (gpointer data)
@


1.2
log
@- Replace my termination race work-around with upstream's proper fix.
okay naddy@@
@
text
@d1 4
a4 5
$OpenBSD: patch-mono_metadata_threadpool_c,v 1.1 2012/04/13 11:51:49 robert Exp $
--- mono/metadata/threadpool.c.orig	Mon Jan 30 13:13:39 2012
+++ mono/metadata/threadpool.c	Tue Jan 22 08:59:32 2013
@@@@ -527,7 +527,7 @@@@ socket_io_init (SocketIOData *data)
 		data->event_system = POLL_BACKEND;
d6 1
a6 25
 	init_event_system (data);
-	mono_thread_create_internal (mono_get_root_domain (), data->wait, data, TRUE, SMALL_STACK);
+	mono_thread_create_internal (mono_get_root_domain (), data->wait, data, TRUE, FALSE, SMALL_STACK);
 	LeaveCriticalSection (&data->io_lock);
 	data->inited = 2;
 	threadpool_start_thread (&async_io_tp);
@@@@ -678,7 +678,7 @@@@ threadpool_start_idle_threads (ThreadPool *tp)
 				break;
 		}
 		mono_perfcounter_update_value (tp->pc_nthreads, TRUE, 1);
-		mono_thread_create_internal (mono_get_root_domain (), tp->async_invoke, tp, TRUE, stack_size);
+		mono_thread_create_internal (mono_get_root_domain (), tp->async_invoke, tp, TRUE, FALSE, stack_size);
 		SleepEx (100, TRUE);
 	} while (1);
 }
@@@@ -1014,7 +1014,7 @@@@ threadpool_start_thread (ThreadPool *tp)
 	while (!mono_runtime_is_shutting_down () && (n = tp->nthreads) < tp->max_threads) {
 		if (InterlockedCompareExchange (&tp->nthreads, n + 1, n) == n) {
 			mono_perfcounter_update_value (tp->pc_nthreads, TRUE, 1);
-			mono_thread_create_internal (mono_get_root_domain (), tp->async_invoke, tp, TRUE, stack_size);
+			mono_thread_create_internal (mono_get_root_domain (), tp->async_invoke, tp, TRUE, FALSE, stack_size);
 			return TRUE;
 		}
 	}
@@@@ -1053,12 +1053,12 @@@@ threadpool_append_jobs (ThreadPool *tp, MonoObject **j
a7 17
 	if (tp->pool_status == 0 && InterlockedCompareExchange (&tp->pool_status, 1, 0) == 0) {
 		if (!tp->is_io) {
-			mono_thread_create_internal (mono_get_root_domain (), monitor_thread, NULL, TRUE, SMALL_STACK);
+			mono_thread_create_internal (mono_get_root_domain (), monitor_thread, NULL, TRUE, FALSE, SMALL_STACK);
 			threadpool_start_thread (tp);
 		}
 		/* Create on demand up to min_threads to avoid startup penalty for apps that don't use
 		 * the threadpool that much
-		* mono_thread_create_internal (mono_get_root_domain (), threadpool_start_idle_threads, tp, TRUE, SMALL_STACK);
+		* mono_thread_create_internal (mono_get_root_domain (), threadpool_start_idle_threads, tp, TRUE, FALSE, SMALL_STACK);
 		*/
 	}
 
@@@@ -1479,11 +1479,7 @@@@ async_invoke_thread (gpointer data)
 			gboolean res;
 
 			InterlockedIncrement (&tp->waiting);
d15 1
a15 13
 				if (THREAD_WANTS_A_BREAK (thread))
@@@@ -1570,9 +1566,9 @@@@ ves_icall_System_Threading_ThreadPool_SetMinThreads (g
 	InterlockedExchange (&async_tp.min_threads, workerThreads);
 	InterlockedExchange (&async_io_tp.min_threads, completionPortThreads);
 	if (workerThreads > async_tp.nthreads)
-		mono_thread_create_internal (mono_get_root_domain (), threadpool_start_idle_threads, &async_tp, TRUE, SMALL_STACK);
+		mono_thread_create_internal (mono_get_root_domain (), threadpool_start_idle_threads, &async_tp, TRUE, FALSE, SMALL_STACK);
 	if (completionPortThreads > async_io_tp.nthreads)
-		mono_thread_create_internal (mono_get_root_domain (), threadpool_start_idle_threads, &async_io_tp, TRUE, SMALL_STACK);
+		mono_thread_create_internal (mono_get_root_domain (), threadpool_start_idle_threads, &async_io_tp, TRUE, FALSE, SMALL_STACK);
 	return TRUE;
 }
 
@


1.1
log
@update to mono-2.10.8 and remove some old hacks now that we have
sem_timedwait()
@
text
@d1 45
a45 3
$OpenBSD$
--- mono/metadata/threadpool.c.orig	Thu Apr 12 17:40:21 2012
+++ mono/metadata/threadpool.c	Thu Apr 12 17:40:34 2012
d58 12
@

