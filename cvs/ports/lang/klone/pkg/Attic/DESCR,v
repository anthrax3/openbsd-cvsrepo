head	1.2;
access;
symbols
	OPENBSD_4_7:1.1.1.1.0.40
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.38
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.36
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.34
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.32
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.30
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.28
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.26
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.24
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.22
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.20
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.18
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.16
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.14
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.12
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.10
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.8
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.6
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.4
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.2
	OPENBSD_2_8_BASE:1.1.1.1
	brad_2000-08-18:1.1.1.1
	brad:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.04.15.23.09.46;	author tedu;	state dead;
branches;
next	1.1;

1.1
date	2000.08.18.19.20.10;	author brad;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.08.18.19.20.10;	author brad;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove unfree unmaintained klone. ok ajacoutot laurent
@
text
@KLONE is a small and fast fully interpreted language intended to be
embedded into C applications to provide them with a powerful, yet fast
and small extension language. Its syntax is very inspired from Lisp (its
external syntax has been kept as close as possible to Common Lisp as
possible), but its implementation is original and efficient, to give full
extensibility, intimate interfacing to C, incremental garbage collection,
and full portability on either K&R or ANSI C.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@add klone port
--
KLONE is a small and fast fully interpreted language intended to be
embedded into C applications to provide them with a powerful, yet fast
and small extension language. Its syntax is very inspired from Lisp (its
external syntax has been kept as close as possible to Common Lisp as
possible), but its implementation is original and efficient, to give full
extensibility, intimate interfacing to C, incremental garbage collection,
and full portability on either K&R or ANSI C.
@
text
@@
