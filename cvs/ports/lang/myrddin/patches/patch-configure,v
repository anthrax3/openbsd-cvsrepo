head     1.1;
branch   1.1.1;
access   ;
symbols  jturner_20170110:1.1.1.1 jturner:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2017.01.10.20.26.44;  author jturner;  state Exp;
branches 1.1.1.1;
next     ;
commitid        sK2F4UHo0smZFgBY;

1.1.1.1
date     2017.01.10.20.26.44;  author jturner;  state Exp;
branches ;
next     ;
commitid        sK2F4UHo0smZFgBY;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- configure.orig	Sun Jan  1 20:58:11 2017
+++ configure	Sun Jan  1 20:58:33 2017
@@@@ -1,13 +1,5 @@@@
 #!/bin/sh
 
-for i in `seq 30`; do
-    echo "Lots of output to emulate automake... ok"
-    echo "Testing for things you'll never use... fail"
-    echo "Satisfying the fortran77 lobby... ok"
-    echo "Burning CPU time checking for the bloody obvious... ok"
-done
-echo "Automake emulated successfully"
-
 prefix="/usr/local"
 
 for arg in $*; do
@@@@ -104,7 +96,7 @@@@ echo "const Directlib = false" >> mbld/config.myr
 echo "const Runtime = \"_myrrt.o\"" >> mbld/config.myr
 
 # paths to install to
-echo "const Manpath = \"share/man/man\"" >> mbld/config.myr
+echo "const Manpath = \"man/man\"" >> mbld/config.myr
 echo "const Sharepath = \"share\"" >> mbld/config.myr
 echo "const Binpath = \"bin\"" >> mbld/config.myr
 echo "const Libpath = \"lib/myr\"" >> mbld/config.myr
@


1.1.1.1
log
@Import ports/lang/myrddin. ok benoit@@

Myrddin is a systems programming language that covers a similar niche as
C including desktop, OS, and embedded development, but at the same time
making it harder to shoot yourself in the foot.

It is designed to be a simple language that runs close to the metal,
giving the programmer predictable and transparent behavior and mental
model. It also does strong type checking, generics, type inference,
closures, and traits.

Myrddin is not a language designed to explore the forefront of type
theory or compiler technology. It is not a language that is focused on
guaranteeing perfect safety. It is satisfied to be a practical, small,
fairly well defined, and easy to understand language for code that needs
to be close to the hardware.
@
text
@@
