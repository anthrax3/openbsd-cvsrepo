head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	jeremy_2010-nov-19:1.1.1.1
	jeremy:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.10.26.23.44.58;	author jeremy;	state dead;
branches;
next	1.3;

1.3
date	2011.03.10.20.40.33;	author jeremy;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.06.20.20.01;	author jeremy;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.19.17.51.44;	author jeremy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.11.19.17.51.44;	author jeremy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Major update to rubinius 2.1.1.  Start using LLVM again as this
version supports the in-tree LLVM.
@
text
@$OpenBSD: patch-lib_fileutils_rb,v 1.3 2011/03/10 20:40:33 jeremy Exp $

Make FileUtils.mkdir_p act more like mkdir(1) -p, by not attempting
to create directories that already exist.  This fixes systrace
warnings when building ports.

--- lib/fileutils.rb.orig	Tue Feb 22 15:02:08 2011
+++ lib/fileutils.rb	Wed Feb 23 14:03:36 2011
@@@@ -201,7 +201,7 @@@@ module FileUtils
     list.map {|path| path.sub(%r</\z>, '') }.each do |path|
       # optimize for the most common case
       begin
-        fu_mkdir path, options[:mode]
+        fu_mkdir path, options[:mode] unless File.directory?(path)
         next
       rescue SystemCallError
         next if File.directory?(path)
@@@@ -214,7 +214,7 @@@@ module FileUtils
       end
       stack.reverse_each do |path|
         begin
-          fu_mkdir path, options[:mode]
+          fu_mkdir path, options[:mode] unless File.directory?(path)
         rescue SystemCallError => err
           raise unless File.directory?(path)
         end
@


1.3
log
@Bump version to 1.2.2.  Fixes building some rbx-* ports with systrace
enabled.  Fix the hardcoding of the OpenBSD version in the PLIST.

OK landry@@
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_fileutils_rb,v 1.2 2011/01/06 20:20:01 jeremy Exp $
@


1.2
log
@Use intree version of libffi, and don't hardcode /usr/local.

Prodded and OK jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_fileutils_rb,v 1.1.1.1 2010/11/19 17:51:44 jeremy Exp $
d7 2
a8 2
--- lib/fileutils.rb.orig	Tue Dec 21 11:30:57 2010
+++ lib/fileutils.rb	Thu Jan  6 09:31:43 2011
d25 1
a25 1
           raise(err) unless File.directory?(path)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_fileutils_rb,v 1.1 2010/10/12 15:39:06 jeremy Exp $
d7 2
a8 2
--- lib/fileutils.rb.orig	Fri Oct  8 08:52:53 2010
+++ lib/fileutils.rb	Fri Oct  8 08:58:40 2010
d25 1
a25 1
           raise unless File.directory?(path)
@


1.1.1.1
log
@Rubinius is an implementation of the Ruby programming language.

The Rubinius bytecode virtual machine is written in C++, incorporating
LLVM to compile bytecode to machine code at runtime. The bytecode
compiler and vast majority of the core classes are written in pure Ruby.

To interact with the rest of the system, the VM provides primitives
which can be attached to methods and invoked. Additionally, FFI provides
a direct call path to most C functions.

Rubinius uses a precise, compacting, generational garbage collector. It
includes a compatible C-API for C extensions written for the standard
Ruby interpreter (often referred to as MRI.Matz's Ruby Implementation).

OK landry@@, sthen@@
@
text
@@
