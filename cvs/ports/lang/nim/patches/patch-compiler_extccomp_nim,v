head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	juanfra_2015-10-19:1.1.1.1
	juanfra:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.01.09.10.32.33;	author juanfra;	state Exp;
branches;
next	1.2;
commitid	5JMAvwoegLl9RJD3;

1.2
date	2016.06.15.00.19.59;	author juanfra;	state Exp;
branches;
next	1.1;
commitid	j7mviVIelyGQ7DwA;

1.1
date	2015.10.19.21.50.14;	author juanfra;	state Exp;
branches
	1.1.1.1;
next	;
commitid	OXL9pCl6AAt3Qwqn;

1.1.1.1
date	2015.10.19.21.50.14;	author juanfra;	state Exp;
branches;
next	;
commitid	OXL9pCl6AAt3Qwqn;


desc
@@


1.3
log
@Update to nim 0.16.0.

http://nim-lang.org/news/e029_version_0_16_0.html
@
text
@$OpenBSD: patch-compiler_extccomp_nim,v 1.2 2016/06/15 00:19:59 juanfra Exp $
--- compiler/extccomp.nim.orig	Sun Jan  8 21:33:43 2017
+++ compiler/extccomp.nim	Mon Jan  9 02:22:00 2017
@@@@ -21,7 +21,7 @@@@ import
 type
   TSystemCC* = enum
     ccNone, ccGcc, ccLLVM_Gcc, ccCLang, ccLcc, ccBcc, ccDmc, ccWcc, ccVcc,
-    ccTcc, ccPcc, ccUcc, ccIcl, asmFasm
+    ccTcc, ccPcc, ccUcc, ccIcl, asmFasm, ccEGcc
   TInfoCCProp* = enum         # properties of the C compiler:
     hasSwitchRange,           # CC allows ranges in switch statements (GNU C)
     hasComputedGoto,          # CC has computed goto (GNU C extension)
@@@@ -69,8 +69,8 @@@@ compiler gcc:
   result = (
     name: "gcc",
     objExt: "o",
-    optSpeed: " -O3 -ffast-math ",
-    optSize: " -Os -ffast-math ",
+    optSpeed: " -O2 ",
+    optSize: " -Os ",
     compilerExe: "gcc",
     cppCompiler: "g++",
     compileTmpl: "-c $options $include -o $objfile $file",
@@@@ -90,6 +90,13 @@@@ compiler gcc:
     props: {hasSwitchRange, hasComputedGoto, hasCpp, hasGcGuard, hasGnuAsm,
             hasAttribute})
 
+compiler egcc:
+    result = gcc()
+
+    result.name = "egcc"
+    result.compilerExe = "egcc"
+    result.cppCompiler = "eg++"
+
 # LLVM Frontend for GCC/G++
 compiler llvmGcc:
   result = gcc() # Uses settings from GCC
@@@@ -359,7 +366,8 @@@@ const
     pcc(),
     ucc(),
     icl(),
-    fasm()]
+    fasm(),
+    egcc()]
 
   hExt* = ".h"
 
@


1.2
log
@Update to Nim 0.14.2.
@
text
@d1 4
a4 4
$OpenBSD: patch-compiler_extccomp_nim,v 1.1.1.1 2015/10/19 21:50:14 juanfra Exp $
--- compiler/extccomp.nim.orig	Tue Jun  7 00:38:57 2016
+++ compiler/extccomp.nim	Thu Jun  9 19:46:54 2016
@@@@ -21,7 +21,7 @@@@ from debuginfo import writeDebugInfo
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- compiler/extccomp.nim.orig	Sun Sep 13 00:55:21 2015
+++ compiler/extccomp.nim	Sun Sep 13 01:01:06 2015
@@@@ -18,7 +18,7 @@@@ import
d8 2
a9 2
-    ccTcc, ccPcc, ccUcc, ccIcl
+    ccTcc, ccPcc, ccUcc, ccIcl, ccEGcc
d13 1
a13 1
@@@@ -66,8 +66,8 @@@@ compiler gcc:
d24 1
a24 1
@@@@ -87,6 +87,13 @@@@ compiler gcc:
d26 1
a26 1
             hasNakedAttribute})
d38 1
a38 2
@@@@ -330,7 +337,8 @@@@ const
     tcc(),
d41 3
a43 2
-    icl()]
+    icl(),
@


1.1.1.1
log
@Changes:
- Update to nim 0.11.2
- Enable the tests
- lang/nimrod -> lang/nim

OK jturner@@

Comment:
statically typed, imperative programming language

Description:
Nim is a statically typed, imperative programming language that tries
to give the programmer ultimate power without compromises on runtime
efficiency. This means it focuses on compile-time mechanisms in all
their various forms.

Beneath a nice infix/indentation based syntax with a powerful (AST
based, hygienic) macro system lies a semantic model that supports a soft
realtime GC on thread local heaps. Asynchronous message passing is used
between threads, so no "stop the world" mechanism is necessary. An
unsafe shared memory heap is also provided for the increased efficiency
that results from that model.

Maintainer: James Turner <james@@calminferno.net>

WWW: http://nim-lang.org/

@
text
@@
