head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	juanfra_2015-10-19:1.1.1.1
	juanfra:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.01.09.10.32.33;	author juanfra;	state Exp;
branches;
next	1.2;
commitid	5JMAvwoegLl9RJD3;

1.2
date	2016.06.15.00.19.59;	author juanfra;	state Exp;
branches;
next	1.1;
commitid	j7mviVIelyGQ7DwA;

1.1
date	2015.10.19.21.50.14;	author juanfra;	state Exp;
branches
	1.1.1.1;
next	;
commitid	OXL9pCl6AAt3Qwqn;

1.1.1.1
date	2015.10.19.21.50.14;	author juanfra;	state Exp;
branches;
next	;
commitid	OXL9pCl6AAt3Qwqn;


desc
@@


1.3
log
@Update to nim 0.16.0.

http://nim-lang.org/news/e029_version_0_16_0.html
@
text
@$OpenBSD: patch-tests_testament_tester_nim,v 1.2 2016/06/15 00:19:59 juanfra Exp $

"compiler/nodejs" breaks the tests:

"tester.nim(15, 22) Error: cannot open 'compiler/nodejs'
nim cc --taintMode:on tests/testament/tester
FAILURE
Error 1 in . (Makefile:42 'do-test')"

--- tests/testament/tester.nim.orig	Sun Jan  8 21:33:43 2017
+++ tests/testament/tester.nim	Mon Jan  9 02:33:36 2017
@@@@ -12,7 +12,7 @@@@
 import
   parseutils, strutils, pegs, os, osproc, streams, parsecfg, json,
   marshal, backend, parseopt, specs, htmlgen, browsers, terminal,
-  algorithm, compiler/nodejs, re, times, sets
+  algorithm, re, times, sets
 
 const
   resultsFile = "testresults.html"
@@@@ -326,7 +326,7 @@@@ proc testSpec(r: var TResults, test: TTest) =
       r.addResult(test, expected.outp, "executable not found", reExeNotFound)
       return
 
-    let nodejs = if isJsTarget: findNodeJs() else: ""
+    let nodejs = if isJsTarget: "" else: ""
     if isJsTarget and nodejs == "":
       r.addResult(test, expected.outp, "nodejs binary not in PATH",
                   reExeNotFound)
@


1.2
log
@Update to Nim 0.14.2.
@
text
@d1 1
a1 1
$OpenBSD: patch-tests_testament_tester_nim,v 1.1.1.1 2015/10/19 21:50:14 juanfra Exp $
d10 2
a11 2
--- tests/testament/tester.nim.orig	Tue Jun  7 00:38:57 2016
+++ tests/testament/tester.nim	Thu Jun  9 19:50:01 2016
d16 2
a17 2
-  algorithm, compiler/nodejs, re, times
+  algorithm, re, times
d21 1
a21 1
@@@@ -325,7 +325,7 @@@@ proc testSpec(r: var TResults, test: TTest) =
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d10 2
a11 2
--- tests/testament/tester.nim.orig	Sat Apr 25 23:17:00 2015
+++ tests/testament/tester.nim	Fri Oct  9 03:17:22 2015
d16 2
a17 2
-  algorithm, compiler/nodejs
+  algorithm
d21 9
a29 9
@@@@ -224,7 +224,7 @@@@ proc testSpec(r: var TResults, test: TTest) =
         else:
           exeFile = changeFileExt(tname, ExeExt)
         if existsFile(exeFile):
-          let nodejs = findNodeJs()
+          let nodejs = ""
           if test.target == targetJS and nodejs == "":
             r.addResult(test, expected.outp, "nodejs binary not in PATH",
                         reExeNotFound)
@


1.1.1.1
log
@Changes:
- Update to nim 0.11.2
- Enable the tests
- lang/nimrod -> lang/nim

OK jturner@@

Comment:
statically typed, imperative programming language

Description:
Nim is a statically typed, imperative programming language that tries
to give the programmer ultimate power without compromises on runtime
efficiency. This means it focuses on compile-time mechanisms in all
their various forms.

Beneath a nice infix/indentation based syntax with a powerful (AST
based, hygienic) macro system lies a semantic model that supports a soft
realtime GC on thread local heaps. Asynchronous message passing is used
between threads, so no "stop the world" mechanism is necessary. An
unsafe shared memory heap is also provided for the increased efficiency
that results from that model.

Maintainer: James Turner <james@@calminferno.net>

WWW: http://nim-lang.org/

@
text
@@
