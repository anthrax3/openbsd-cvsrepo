head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.4
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	juanfra_2015-10-19:1.1.1.1
	juanfra:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.01.09.10.32.33;	author juanfra;	state Exp;
branches;
next	1.2;
commitid	5JMAvwoegLl9RJD3;

1.2
date	2016.06.15.00.19.59;	author juanfra;	state Exp;
branches;
next	1.1;
commitid	j7mviVIelyGQ7DwA;

1.1
date	2015.10.19.21.50.14;	author juanfra;	state Exp;
branches
	1.1.1.1;
next	;
commitid	OXL9pCl6AAt3Qwqn;

1.1.1.1
date	2015.10.19.21.50.14;	author juanfra;	state Exp;
branches;
next	;
commitid	OXL9pCl6AAt3Qwqn;


desc
@@


1.3
log
@Update to nim 0.16.0.

http://nim-lang.org/news/e029_version_0_16_0.html
@
text
@$OpenBSD: patch-config_nim_cfg,v 1.2 2016/06/15 00:19:59 juanfra Exp $
--- config/nim.cfg.orig	Sun Jan  8 21:33:42 2017
+++ config/nim.cfg	Mon Jan  9 02:28:32 2017
@@@@ -76,7 +76,7 @@@@ path="$lib/pure"
   @@end
   @@if bsd or haiku:
     # BSD got posix_spawn only recently, so we deactivate it for osproc:
-    define:useFork
+    #define:useFork
     # at least NetBSD has problems with thread local storage:
     tlsEmulation:on
   @@end
@@@@ -112,6 +112,8 @@@@ path="$lib/pure"
 @@else:
   gcc.options.always = "-w"
   gcc.cpp.options.always = "-w -fpermissive"
+  egcc.options.always = "-w"
+  egpp.options.alaways = "-w -fpermissive"
 @@end
 
 # Configuration for Objective-C compiler:
@@@@ -155,18 +157,23 @@@@ clang.objc.options.linker = "-lobjc -lgnustep-base"
   gcc.options.linker %= "-L $WIND_BASE/target/lib/usr/lib/ppc/PPC32/common -mrtp -fno-strict-aliasing -D_C99 -D_HAS_C9X -std=c99 -fasm -Wall -Wno-write-strings"
 @@end
 
-gcc.options.speed = "-O3 -fno-strict-aliasing"
+gcc.options.speed = "-O2 -fno-strict-aliasing"
 gcc.options.size = "-Os"
 @@if windows:
   gcc.options.debug = "-g3 -O0 -gdwarf-3"
 @@else:
   gcc.options.debug = "-g3 -O0"
 @@end
-gcc.cpp.options.speed = "-O3 -fno-strict-aliasing"
+gcc.cpp.options.speed = "-O2 -fno-strict-aliasing"
 gcc.cpp.options.size = "-Os"
 gcc.cpp.options.debug = "-g3 -O0"
 #passl = "-pg"
 
+# Configuration for the OpenBSD ports GCC compiler:
+egcc.options.speed = "-O2 -fno-strict-aliasing"
+egcc.options.size = "-Os"
+egcc.options.debug = "-g3 -O0"
+
 # Configuration for the LLVM GCC compiler:
 llvm_gcc.options.debug = "-g"
 llvm_gcc.options.always = "-w"
@@@@ -176,7 +183,7 @@@@ llvm_gcc.options.size = "-Os"
 # Configuration for the LLVM CLang compiler:
 clang.options.debug = "-g"
 clang.options.always = "-w"
-clang.options.speed = "-O3"
+clang.options.speed = "-O2"
 clang.options.size = "-Os"
 
 # Configuration for the Visual C/C++ compiler:
@


1.2
log
@Update to Nim 0.14.2.
@
text
@d1 4
a4 4
$OpenBSD: patch-config_nim_cfg,v 1.1.1.1 2015/10/19 21:50:14 juanfra Exp $
--- config/nim.cfg.orig	Tue Jun  7 00:38:56 2016
+++ config/nim.cfg	Thu Jun  9 20:17:49 2016
@@@@ -80,7 +80,7 @@@@ path="$lib/pure"
d13 1
a13 1
@@@@ -108,6 +108,8 @@@@ path="$lib/pure"
d22 1
a22 1
@@@@ -140,15 +142,20 @@@@ clang.objc.options.linker = "-lobjc -lgnustep-base"
d29 5
a33 2
 gcc.options.debug = "-g3 -O0"
 
d48 1
a48 1
@@@@ -158,7 +165,7 @@@@ llvm_gcc.options.size = "-Os"
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- config/nim.cfg.orig	Sun Sep 13 01:02:08 2015
+++ config/nim.cfg	Sun Sep 13 01:11:33 2015
@@@@ -82,7 +82,7 @@@@ path="$lib/pure/unidecode"
d13 1
a13 1
@@@@ -110,6 +110,8 @@@@ path="$lib/pure/unidecode"
d22 1
a22 1
@@@@ -142,15 +144,20 @@@@ clang.objc.options.linker = "-lobjc -lgnustep-base"
d45 1
a45 1
@@@@ -160,7 +167,7 @@@@ llvm_gcc.options.size = "-Os"
@


1.1.1.1
log
@Changes:
- Update to nim 0.11.2
- Enable the tests
- lang/nimrod -> lang/nim

OK jturner@@

Comment:
statically typed, imperative programming language

Description:
Nim is a statically typed, imperative programming language that tries
to give the programmer ultimate power without compromises on runtime
efficiency. This means it focuses on compile-time mechanisms in all
their various forms.

Beneath a nice infix/indentation based syntax with a powerful (AST
based, hygienic) macro system lies a semantic model that supports a soft
realtime GC on thread local heaps. Asynchronous message passing is used
between threads, so no "stop the world" mechanism is necessary. An
unsafe shared memory heap is also provided for the increased efficiency
that results from that model.

Maintainer: James Turner <james@@calminferno.net>

WWW: http://nim-lang.org/

@
text
@@
