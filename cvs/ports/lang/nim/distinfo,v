head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.2
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	juanfra_2015-10-19:1.1.1.1
	juanfra:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2017.01.09.10.32.33;	author juanfra;	state Exp;
branches;
next	1.3;
commitid	5JMAvwoegLl9RJD3;

1.3
date	2016.06.15.18.45.20;	author juanfra;	state Exp;
branches;
next	1.2;
commitid	LHdmf1TLfj9tV2Kt;

1.2
date	2016.06.15.00.19.59;	author juanfra;	state Exp;
branches;
next	1.1;
commitid	j7mviVIelyGQ7DwA;

1.1
date	2015.10.19.21.50.14;	author juanfra;	state Exp;
branches
	1.1.1.1;
next	;
commitid	OXL9pCl6AAt3Qwqn;

1.1.1.1
date	2015.10.19.21.50.14;	author juanfra;	state Exp;
branches;
next	;
commitid	OXL9pCl6AAt3Qwqn;


desc
@@


1.4
log
@Update to nim 0.16.0.

http://nim-lang.org/news/e029_version_0_16_0.html
@
text
@SHA256 (nim-0.16.0.tar.xz) = nhmYI75Hy6VeYt1pgvAs8KrXMvNpeZ/sQqTYwiZcUWc=
SIZE (nim-0.16.0.tar.xz) = 2907076
@


1.3
log
@Update to the latest Nim tarball.
@
text
@d1 2
a2 2
SHA256 (nim-0.14.2.tar.xz) = j4041w7VcWR5X8VeGd5MEUiPzTHb5CCU5EqSoj4/XpI=
SIZE (nim-0.14.2.tar.xz) = 4778444
@


1.2
log
@Update to Nim 0.14.2.
@
text
@d1 2
a2 2
SHA256 (nim-0.14.2.tar.xz) = Iryzjgru14n+jrmEB+cDc2X+uczY+k45oEZHJsW38vs=
SIZE (nim-0.14.2.tar.xz) = 6462864
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
SHA256 (nim-0.11.2.tar.xz) = VkDjZNi6zsgw8Bba89RCeRHEjOv5YnJOyQP+pdWnpBk=
SIZE (nim-0.11.2.tar.xz) = 2587012
@


1.1.1.1
log
@Changes:
- Update to nim 0.11.2
- Enable the tests
- lang/nimrod -> lang/nim

OK jturner@@

Comment:
statically typed, imperative programming language

Description:
Nim is a statically typed, imperative programming language that tries
to give the programmer ultimate power without compromises on runtime
efficiency. This means it focuses on compile-time mechanisms in all
their various forms.

Beneath a nice infix/indentation based syntax with a powerful (AST
based, hygienic) macro system lies a semantic model that supports a soft
realtime GC on thread local heaps. Asynchronous message passing is used
between threads, so no "stop the world" mechanism is necessary. An
unsafe shared memory heap is also provided for the increased efficiency
that results from that model.

Maintainer: James Turner <james@@calminferno.net>

WWW: http://nim-lang.org/

@
text
@@
