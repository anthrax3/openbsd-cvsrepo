head	1.1;
access;
symbols
	OPENBSD_5_9:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2016.06.28.16.39.31;	author abieber;	state dead;
branches
	1.1.2.1;
next	;
commitid	gkg4srbqAMyFwcmI;

1.1.2.1
date	2016.06.28.16.39.31;	author abieber;	state Exp;
branches;
next	;
commitid	gkg4srbqAMyFwcmI;


desc
@@


1.1
log
@file patch-deps_v8_src_zone_cc was initially added on branch OPENBSD_5_9.
@
text
@@


1.1.2.1
log
@Backport fix for CVE-2016-1669:

https://github.com/nodejs/node/commit/134c3b3977

  Fix overflow issue in Zone::New

  When requesting a large allocation near the end of the address space,
  the computation could overflow and erroneously *not* grow the Zone
  as required.

	BUG=chromium:606115
	LOG=y

OK awolk@@
@
text
@a0 30
$OpenBSD$

CVE-2016-1669 https://github.com/nodejs/node/commit/134c3b3977

--- deps/v8/src/zone.cc.orig	Tue Feb  9 07:02:05 2016
+++ deps/v8/src/zone.cc	Mon Jun 27 14:06:04 2016
@@@@ -105,7 +105,10 @@@@ void* Zone::New(size_t size) {
   Address result = position_;
 
   const size_t size_with_redzone = size + kASanRedzoneBytes;
-  if (limit_ < position_ + size_with_redzone) {
+  const uintptr_t limit = reinterpret_cast<uintptr_t>(limit_);
+  const uintptr_t position = reinterpret_cast<uintptr_t>(position_);
+  // position_ > limit_ can be true after the alignment correction above.
+  if (limit < position || size_with_redzone > limit - position) {
     result = NewExpand(size_with_redzone);
   } else {
     position_ += size_with_redzone;
@@@@ -222,7 +225,10 @@@@ Address Zone::NewExpand(size_t size) {
   // Make sure the requested size is already properly aligned and that
   // there isn't enough room in the Zone to satisfy the request.
   DCHECK_EQ(size, RoundDown(size, kAlignment));
-  DCHECK_LT(limit_, position_ + size);
+  DCHECK(limit_ < position_ ||
+         reinterpret_cast<uintptr_t>(limit_) -
+                 reinterpret_cast<uintptr_t>(position_) <
+             size);
 
   // Compute the new segment size. We use a 'high water mark'
   // strategy, where we increase the segment size every time we expand
@

