head	1.1;
access;
symbols
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_3:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2013.10.29.13.11.29;	author jasper;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2013.10.29.13.11.29;	author jasper;	state Exp;
branches;
next	;

1.1.4.1
date	2013.10.30.12.51.28;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file patch-lib_http_js was initially added on branch OPENBSD_5_3.
@
text
@@


1.1.4.1
log
@Security fix for CVE-2013-4450, NodeJS: HTTP Pipelining DoS
@
text
@a0 73
$OpenBSD$

Security fix for CVE-2013-4450, NodeJS: HTTP Pipelining DoS
http://blog.nodejs.org/2013/10/22/cve-2013-4450-http-server-pipeline-flood-dos/

--- lib/http.js.orig	Tue Jun 18 18:50:53 2013
+++ lib/http.js	Mon Oct 28 16:45:49 2013
@@@@ -171,7 +171,7 @@@@ function parserOnMessageComplete() {
     stream.push(null);
   }
 
-  if (parser.socket.readable) {
+  if (parser.socket.readable && !parser.socket._drain_paused) {
     // force to read the next incoming message
     readStart(parser.socket);
   }
@@@@ -1932,6 +1932,7 @@@@ function connectionListener(socket) {
   });
 
   socket.ondata = function(d, start, end) {
+    assert(!socket._drain_paused);
     var ret = parser.execute(d, start, end - start);
     if (ret instanceof Error) {
       debug('parse error');
@@@@ -1958,6 +1959,12 @@@@ function connectionListener(socket) {
         socket.destroy();
       }
     }
+
+    if (socket._drain_paused) {
+      // onIncoming paused the socket, we should pause the parser as well
+      debug('pause parser');
+      socket.parser.pause();
+    }
   };
 
   socket.onend = function() {
@@@@ -1986,8 +1993,35 @@@@ function connectionListener(socket) {
   // The following callback is issued after the headers have been read on a
   // new message. In this callback we setup the response object and pass it
   // to the user.
+
+  socket._drain_paused = false;
+  function socketOnDrain() {
+    // If we previously paused, then start reading again.
+    if (socket._drain_paused) {
+      socket._drain_paused = false;
+      socket.parser.resume();
+      socket.resume();
+    }
+  }
+  socket.on('drain', socketOnDrain);
+
   parser.onIncoming = function(req, shouldKeepAlive) {
     incoming.push(req);
+
+    // If the writable end isn't consuming, then stop reading
+    // so that we don't become overwhelmed by a flood of
+    // pipelined requests that may never be resolved.
+
+    if (!socket._drain_paused && socket._handle) {
+      var needPause = socket._handle.writeQueueSize > 0;
+      if (needPause) {
+        socket._drain_paused = true;
+        // We also need to pause the parser, but don't do that until after
+        // the call to execute, because we may still be processing the last
+        // chunk.
+        socket.pause();
+      }
+    }
 
     var res = new ServerResponse(req);
 
@


1.1.2.1
log
@Security fix for CVE-2013-4450, NodeJS: HTTP Pipelining DoS
@
text
@a0 73
$OpenBSD$

Security fix for CVE-2013-4450, NodeJS: HTTP Pipelining DoS
http://blog.nodejs.org/2013/10/22/cve-2013-4450-http-server-pipeline-flood-dos/

--- lib/http.js.orig	Fri Jan 18 21:15:41 2013
+++ lib/http.js	Tue Oct 29 14:09:42 2013
@@@@ -150,7 +150,7 @@@@ function parserOnMessageComplete() {
     }
   }
 
-  if (parser.socket.readable) {
+  if (parser.socket.readable && !parser.socket._drain_paused) {
     // force to read the next incoming message
     parser.socket.resume();
   }
@@@@ -1783,6 +1783,7 @@@@ function connectionListener(socket) {
   });
 
   socket.ondata = function(d, start, end) {
+    assert(!socket._drain_paused);
     var ret = parser.execute(d, start, end - start);
     if (ret instanceof Error) {
       debug('parse error');
@@@@ -1809,6 +1810,12 @@@@ function connectionListener(socket) {
         socket.destroy();
       }
     }
+
+    if (socket._drain_paused) {
+      // onIncoming paused the socket, we should pause the parser as well
+      debug('pause parser');
+      socket.parser.pause();
+    }
   };
 
   socket.onend = function() {
@@@@ -1837,8 +1844,35 @@@@ function connectionListener(socket) {
   // The following callback is issued after the headers have been read on a
   // new message. In this callback we setup the response object and pass it
   // to the user.
+
+  socket._drain_paused = false;
+  function socketOnDrain() {
+    // If we previously paused, then start reading again.
+    if (socket._drain_paused) {
+      socket._drain_paused = false;
+      socket.parser.resume();
+      socket.resume();
+    }
+  }
+  socket.on('drain', socketOnDrain);
+
   parser.onIncoming = function(req, shouldKeepAlive) {
     incoming.push(req);
+
+    // If the writable end isn't consuming, then stop reading
+    // so that we don't become overwhelmed by a flood of
+    // pipelined requests that may never be resolved.
+
+    if (!socket._drain_paused && socket._handle) {
+      var needPause = socket._handle.writeQueueSize > 0;
+      if (needPause) {
+        socket._drain_paused = true;
+        // We also need to pause the parser, but don't do that until after
+        // the call to execute, because we may still be processing the last
+        // chunk.
+        socket.pause();
+      }
+    }
 
     var res = new ServerResponse(req);
     debug('server response shouldKeepAlive: ' + shouldKeepAlive);
@

