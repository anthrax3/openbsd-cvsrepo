head	1.2;
access;
symbols
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_5:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2014.09.24.18.17.27;	author abieber;	state dead;
branches;
next	1.1;
commitid	6cr0nykzWq5p7l9Z;

1.1
date	2014.09.09.14.01.26;	author jasper;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;
commitid	jTEiNf9H1eWuVYsb;

1.1.2.1
date	2014.09.09.14.49.56;	author jasper;	state Exp;
branches;
next	;
commitid	rfA0z77R17dgjjPs;

1.1.4.1
date	2014.09.18.15.19.06;	author jasper;	state Exp;
branches;
next	;
commitid	aO1SAAEcAjPxoL0c;


desc
@@


1.2
log
@Update to 0.10.32 which removes the need for isolate.h diff.

goahead from landry@@ and jasper@@
@
text
@$OpenBSD: patch-deps_v8_src_isolate_h,v 1.1 2014/09/09 14:01:26 jasper Exp $

Security fix for CVE-2014-5256,
http://seclists.org/oss-sec/2014/q3/505

--- deps/v8/src/isolate.h.orig	Tue Sep  9 15:10:24 2014
+++ deps/v8/src/isolate.h	Tue Sep  9 15:10:51 2014
@@@@ -1392,14 +1392,9 @@@@ class StackLimitCheck BASE_EMBEDDED {
  public:
   explicit StackLimitCheck(Isolate* isolate) : isolate_(isolate) { }
 
-  bool HasOverflowed() const {
+  inline bool HasOverflowed() const {
     StackGuard* stack_guard = isolate_->stack_guard();
-    // Stack has overflowed in C++ code only if stack pointer exceeds the C++
-    // stack guard and the limits are not set to interrupt values.
-    // TODO(214): Stack overflows are ignored if a interrupt is pending. This
-    // code should probably always use the initial C++ limit.
-    return (reinterpret_cast<uintptr_t>(this) < stack_guard->climit()) &&
-           stack_guard->IsStackOverflow();
+    return reinterpret_cast<uintptr_t>(this) < stack_guard->real_climit();
   }
  private:
   Isolate* isolate_;
@


1.1
log
@Security fix for CVE-2014-5256

ok abieber@@ (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.4.1
log
@Security fix for CVE-2014-5256
@
text
@@


1.1.2.1
log
@Security fix for CVE-2014-5256
@
text
@d1 1
a1 1
$OpenBSD: patch-deps_v8_src_isolate_h,v 1.1 2014/09/09 14:01:26 jasper Exp $
@

