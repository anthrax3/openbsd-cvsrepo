head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.1.0.8
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.4
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2015.12.21.19.27.05;	author abieber;	state Exp;
branches;
next	1.2;
commitid	I3kMRLKZr6Zry2E3;

1.2
date	2015.10.24.02.46.47;	author abieber;	state dead;
branches;
next	1.1;
commitid	ed5E7Ght7haAuPfD;

1.1
date	2014.07.10.19.54.57;	author landry;	state Exp;
branches;
next	;
commitid	wVkQldhGtxqCKYpN;


desc
@@


1.3
log
@Update to the lastest version. Add two new patches:

patches/patch-deps_uv_src_unix_openbsd_c is from Fabian Raetz
<fabian.raetz@@gmail.com>, it was sent upstream as well. It will be included
in one of the next libuv releases.
patches/patch-deps_v8_src_globals_h is from robert@@'s v8 patches (slightly
modified), recommended by sthen@@.

OK jturner@@
@
text
@$OpenBSD$

Fix from Fabian Raetz <fabian.raetz@@gmail.com>, currently set for 
the next release of 1.x: https://github.com/libuv/libuv/pull/652

--- deps/uv/src/unix/openbsd.c.orig	Thu Dec  3 15:16:58 2015
+++ deps/uv/src/unix/openbsd.c	Fri Dec 18 08:16:31 2015
@@@@ -26,6 +26,7 @@@@
 #include <sys/resource.h>
 #include <sys/sched.h>
 #include <sys/time.h>
+#include <sys/stat.h>
 #include <sys/sysctl.h>
 
 #include <ifaddrs.h>
@@@@ -36,6 +37,7 @@@@
 #include <fcntl.h>
 #include <kvm.h>
 #include <paths.h>
+#include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
@@@@ -76,12 +78,53 @@@@ void uv_loadavg(double avg[3]) {
 }
 
 
+static int search(const char *name, char *buffer, size_t *size) {
+  char *ropath, *wpath, *path, *ps;
+  struct stat statb;
+  size_t size_tmp;
+  int err = 1, tmp;
+
+  if (name == NULL)
+    goto out;
+
+  if (*name == '.' || *name == '/') {
+    if ((size_tmp = strlcpy(buffer, name, *size)) < *size)
+      *size = size_tmp;
+    else
+      *size -= 1;
+
+    err = 0;
+    goto out;
+  }
+
+  if ((ropath = getenv("PATH")) == NULL)
+    goto out;
+
+  if ((path = uv__strdup(ropath)) == NULL)
+    goto out;
+
+  wpath = path;
+  while ((ps = strsep(&wpath, ":")) != NULL) {
+    tmp = snprintf(buffer, *size, "%s/%s", ps, name);
+    if (tmp != -1 && tmp < (int)*size && !stat(buffer, &statb)) {
+      *size = tmp;
+      err = 0;
+      break;
+    }
+  }
+
+  uv__free(path);
+
+out:
+  return err;
+}
+
+
 int uv_exepath(char* buffer, size_t* size) {
   int mib[4];
   char **argsbuf = NULL;
   char **argsbuf_tmp;
   size_t argsbuf_size = 100U;
-  size_t exepath_size;
   pid_t mypid;
   int err;
 
@@@@ -109,18 +152,11 @@@@ int uv_exepath(char* buffer, size_t* size) {
     argsbuf_size *= 2U;
   }
 
-  if (argsbuf[0] == NULL) {
+  if (search(argsbuf[0], buffer, size)) {
     err = -EINVAL;  /* FIXME(bnoordhuis) More appropriate error. */
     goto out;
   }
 
-  *size -= 1;
-  exepath_size = strlen(argsbuf[0]);
-  if (*size > exepath_size)
-    *size = exepath_size;
-
-  memcpy(buffer, argsbuf[0], *size);
-  buffer[*size] = '\0';
   err = 0;
 
 out:
@


1.2
log
@Finally update node to the latest version, lots of changes:
 - Use internal OpenSSL (no LibreSSL :( )
 - Remove node.port.mk as there are no longer any modules in ports.
 - Remove various patches that are now upstream.
 - Fix some tests by telling test.py the fully qualified path to node
 - Add gcc as a RUN dep for building native node modules.
 - Clean up Makefile a bit.

OK juanfra@@
@
text
@d1 25
a25 14
$OpenBSD: patch-deps_uv_src_unix_openbsd_c,v 1.1 2014/07/10 19:54:57 landry Exp $
--- deps/uv/src/unix/openbsd.c.orig	Fri May  2 02:47:47 2014
+++ deps/uv/src/unix/openbsd.c	Thu Jul 10 21:11:18 2014
@@@@ -174,29 +174,26 @@@@ uv_err_t uv_get_process_title(char* buffer, size_t siz
 
 
 uv_err_t uv_resident_set_memory(size_t* rss) {
-  kvm_t *kd = NULL;
+
   struct kinfo_proc *kinfo = NULL;
-  pid_t pid;
-  int nprocs, max_size = sizeof(struct kinfo_proc);
   size_t page_size = getpagesize();
+  size_t size = sizeof(struct kinfo_proc);
a26 2
-  pid = getpid();
+  int mib[6];
d28 33
a60 15
-  kd = kvm_open(NULL, _PATH_MEM, NULL, O_RDONLY, "kvm_open");
-  if (kd == NULL) goto error;
-
-  kinfo = kvm_getprocs(kd, KERN_PROC_PID, pid, max_size, &nprocs);
-  if (kinfo == NULL) goto error;
-
+  mib[0] = CTL_KERN;
+  mib[1] = KERN_PROC;
+  mib[2] = KERN_PROC_PID;
+  mib[3] = getpid();
+  mib[4] = sizeof(struct kinfo_proc);
+  mib[5] = 1;
+  kinfo = malloc(size);
+  if (sysctl(mib, 6, kinfo, &size, NULL, 0) < 0) {
+    return uv__new_sys_error(errno);
d62 31
a92 1
   *rss = kinfo->p_vm_rssize * page_size;
d94 3
a96 10
-  kvm_close(kd);
-
+  free(kinfo);
   return uv_ok_;
-
-error:
-  if (kd) kvm_close(kd);
-  return uv__new_sys_error(errno);
 }
 
d98 1
@


1.1
log
@Properly implement process.memoryUsage() via sysctl() on KERN_PROC_PID
instead of using kvm_open.
ok abieber@@ (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD$
@

