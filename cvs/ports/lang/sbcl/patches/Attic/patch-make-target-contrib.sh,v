head	1.4;
access;
symbols
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.4
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.2
	OPENBSD_4_4_BASE:1.1.1.1
	deanna_20080414:1.1.1.1
	deanna:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2011.07.08.11.42.09;	author jasper;	state dead;
branches;
next	1.3;

1.3
date	2011.05.12.02.11.52;	author joshe;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.17.10.45.00;	author pirofti;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.14.12.29.40;	author deanna;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.04.14.12.29.40;	author deanna;	state Exp;
branches;
next	;


desc
@@


1.4
log
@- fix patch names, no binary change
- regen a patch while here
@
text
@$OpenBSD: patch-make-target-contrib.sh,v 1.3 2011/05/12 02:11:52 joshe Exp $

Only run the contrib tests if $RUN_CONTRIB_TESTS is not empty.  This
allows the contribs to be build when USE_SYSTRACE=Yes, and the tests
to be run later in do-regress.

--- make-target-contrib.sh.orig	Fri Nov  5 19:50:28 2010
+++ make-target-contrib.sh	Sun Nov  7 07:03:48 2010
@@@@ -43,6 +43,7 @@@@ export SBCL SBCL_BUILDING_CONTRIB
 # as SB-RT and SB-GROVEL, but FIXME: there's probably a better
 # solution.  -- CSR, 2003-05-30
 
+if [ -z "$RUN_CONTRIB_TESTS" ]; then
 find contrib/ \( -name '*.fasl' -o \
                  -name '*.FASL' -o \
                  -name 'foo.c' -o \
@@@@ -57,6 +58,11 @@@@ find contrib/ \( -name '*.fasl' -o \
 
 find output -name 'building-contrib.*' -print | xargs rm -f
 
+make_target=all
+else
+make_target=test
+fi
+
 # Ignore all source registries.
 CL_SOURCE_REGISTRY='(:source-registry :ignore-inherited-configuration)'
 export CL_SOURCE_REGISTRY
@@@@ -66,7 +72,7 @@@@ for i in contrib/*; do
     # export INSTALL_DIR=$SBCL_HOME/`basename $i `
     test -f $i/test-passed && rm $i/test-passed
     # hack to get exit codes right.
-    if $GNUMAKE -C $i test 2>&1 && touch $i/test-passed ; then
+    if $GNUMAKE -C $i $make_target 2>&1 && touch $i/test-passed ; then
 	:
     else
 	exit $?
@


1.3
log
@Update lang/sbcl to 1.0.48

This eliminates a number of patches which have been committed
upstream, as well as removes the texlive build dependency. The PDF
documentation is no longer built, which doesn't seem to upset anyone.

ok jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-make-target-contrib.sh,v 1.2 2009/11/17 10:45:00 pirofti Exp $
@


1.2
log
@Update SBCL to version 1.0.31 from MAINTAINER (Josh Elsasser).

Highlights:
	- amd64 support
	- bootstraping works with clisp
@
text
@d1 1
a1 1
$OpenBSD: patch-make-target-contrib.sh,v 1.1.1.1 2008/04/14 12:29:40 deanna Exp $
d7 2
a8 2
--- make-target-contrib.sh.orig	Mon Feb 16 13:36:13 2009
+++ make-target-contrib.sh	Tue Jul  7 17:57:02 2009
d17 1
a17 2
@@@@ -56,13 +57,17 @@@@ find contrib/ \( -name '*.fasl' -o \
   -print | xargs rm -f
d20 1
d25 5
a29 3
 
 for i in contrib/*; do
     test -d $i && test -f $i/Makefile || continue;
@


1.1
log
@Initial revision
@
text
@d1 9
a9 4
$OpenBSD$
--- make-target-contrib.sh.orig	Mon Oct  8 04:02:52 2007
+++ make-target-contrib.sh	Thu Apr 10 14:13:34 2008
@@@@ -42,6 +42,7 @@@@ export SBCL SBCL_BUILDING_CONTRIB
d17 1
a17 1
@@@@ -55,13 +56,17 @@@@ find contrib/ \( -name '*.fasl' -o \
@


1.1.1.1
log
@Import sbcl 1.0.15

Steel Bank Common Lisp (SBCL) is an open source (free software)
compiler and runtime system for ANSI Common Lisp. It provides an
interactive environment including an integrated native compiler, a
debugger, and many extensions.

From Josh Elsasser (MAINTAINER)

ok kili@@, jasper@@

@
text
@@
