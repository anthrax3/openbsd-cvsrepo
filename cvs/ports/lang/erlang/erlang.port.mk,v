head	1.23;
access;
symbols
	OPENBSD_6_0:1.23.0.2
	OPENBSD_6_0_BASE:1.23
	OPENBSD_5_9:1.22.0.2
	OPENBSD_5_9_BASE:1.22
	OPENBSD_5_8:1.20.0.4
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.8.0.4
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.2
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7;
locks; strict;
comment	@# @;


1.23
date	2016.06.30.07.19.23;	author jasper;	state Exp;
branches;
next	1.22;
commitid	RCwfs9Gjv7VS9OaV;

1.22
date	2015.11.05.08.22.50;	author jasper;	state Exp;
branches;
next	1.21;
commitid	RB89CBjIAPTdKiEm;

1.21
date	2015.10.28.19.18.31;	author jasper;	state Exp;
branches;
next	1.20;
commitid	HEEeJ7SAXBoL9up8;

1.20
date	2015.07.14.22.52.56;	author jasper;	state Exp;
branches;
next	1.19;
commitid	Pg4XXJL9IJUjD4X0;

1.19
date	2015.06.26.06.36.57;	author jasper;	state Exp;
branches;
next	1.18;
commitid	UtB4H0a8rZNINsdz;

1.18
date	2015.06.25.13.35.21;	author jasper;	state Exp;
branches;
next	1.17;
commitid	ph8spdkwMMlRIIik;

1.17
date	2015.06.25.13.34.23;	author jasper;	state Exp;
branches;
next	1.16;
commitid	GEqA6yq2Rfm293g7;

1.16
date	2015.06.25.13.16.51;	author jasper;	state Exp;
branches;
next	1.15;
commitid	D23J0KJid8kw7Ns0;

1.15
date	2015.06.24.06.48.53;	author jasper;	state Exp;
branches;
next	1.14;
commitid	RZBvwouW4Uw600TL;

1.14
date	2015.06.23.20.52.50;	author jasper;	state Exp;
branches;
next	1.13;
commitid	3l14Iijd7BSLTfkY;

1.13
date	2015.06.23.20.51.57;	author jasper;	state Exp;
branches;
next	1.12;
commitid	b2x8HgVX1IHTgKwz;

1.12
date	2015.06.23.07.38.53;	author jasper;	state Exp;
branches;
next	1.11;
commitid	ad6JV6nErBaMz90u;

1.11
date	2015.06.22.18.39.46;	author jasper;	state Exp;
branches;
next	1.10;
commitid	4MmKbzoScUIaYZ8F;

1.10
date	2015.06.22.13.07.39;	author jasper;	state Exp;
branches;
next	1.9;
commitid	HSCmmENMMBuEZBA2;

1.9
date	2015.06.21.13.24.17;	author jasper;	state Exp;
branches;
next	1.8;
commitid	FtyOdNDhQKmE7GrD;

1.8
date	2014.07.09.17.07.38;	author ajacoutot;	state Exp;
branches;
next	1.7;
commitid	6akJLXkriIqhuQXU;

1.7
date	2013.04.28.16.40.42;	author jasper;	state Exp;
branches;
next	1.6;

1.6
date	2013.03.11.13.01.39;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.11.12.40.15;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2013.03.11.11.20.27;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.10.19.52.56;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.10.19.35.03;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.10.19.16.16;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.23
log
@hookup erlang 19
@
text
@# $OpenBSD: erlang.port.mk,v 1.22 2015/11/05 08:22:50 jasper Exp $
#
# Module for Erlang-based ports or modules

CATEGORIES +=		lang/erlang

USE_GMAKE ?=		Yes

# Default Erlang version to use if MODERL_VERSION is not set.
# XXX: Keep in sync with devel/rebar/Makefile
MODERL_DEFAULT_VERSION =16

# If the port already has flavors, append ours to it unless the port requires
# a specific version of Erlang.
.if !defined(MODERL_VERSION) && !defined(FLAVORS)
FLAVORS ?=		erlang17 erlang18 erlang19
.else
FLAVORS +=		erlang17 erlang18 erlang19
.endif

FLAVOR?=		# empty

# When no flavor is explicitly set, assume MODERL_DEFAULT_VERSION
.if ${FLAVOR:Merlang17}
MODERL_VERSION =	17
_MODERL_FLAVOR =	${FLAVOR}
.elif ${FLAVOR:Merlang18}
MODERL_VERSION =	18
_MODERL_FLAVOR =	${FLAVOR}
.elif ${FLAVOR:Merlang19}
MODERL_VERSION =	19
_MODERL_FLAVOR =	${FLAVOR}
.else
MODERL_VERSION ?=	${MODERL_DEFAULT_VERSION}
_MODERL_FLAVOR ?=	# empty
.endif

.if ${MODERL_VERSION} == 16
_MODERL_FLAVOR =	erlang16
.elif ${MODERL_VERSION} == 17
_MODERL_FLAVOR =	erlang17
.elif ${MODERL_VERSION} == 18
_MODERL_FLAVOR =	erlang18
.elif ${MODERL_VERSION} == 19
_MODERL_FLAVOR =	erlang19
.else
ERRORS +=		"Invalid MODERL_VERSION set: ${MODERL_VERSION}."
.endif

# If no configure style is set, then assume "rebar"
.if ${CONFIGURE_STYLE} == ""
CONFIGURE_STYLE =	rebar
MODERL_BUILD_DEPENDS +=	devel/rebar
REBAR_BIN ?=		${LOCALBASE}/bin/rebar${MODERL_VERSION}
# Make sure rebar gets called as 'rebar', otherwise escript tries to call the
# binary name (e.g. rebar16) as the script entrypoint.
_MODERL_LINKS +=	rebar${MODERL_VERSION} rebar
.endif

# Append the flavor to all the Erlang dependencies
.for b in ${MODERL_BUILD_DEPENDS}
_MODERL_BDEPS +=	${b},${_MODERL_FLAVOR}
.endfor

.for r in ${MODERL_RUN_DEPENDS}
_MODERL_RDEPS +=	${r},${_MODERL_FLAVOR}
.endfor

.for t in ${MODERL_TEST_DEPENDS}
_MODERL_TDEPS +=	${t},${_MODERL_FLAVOR}
.endfor

MODERL_BUILDDEP ?=	Yes
MODERL_RUNDEP ?=	Yes

MODERL_WX ?=		No

.if ${MODERL_WX:L} == yes
_MODERL_BDEPS +=	lang/erlang/${MODERL_VERSION},-wx
_MODERL_RDEPS +=	lang/erlang/${MODERL_VERSION},-wx
.endif

.if ${MODERL_BUILDDEP:L} == yes
BUILD_DEPENDS +=	${_MODERL_BDEPS} \
			lang/erlang/${MODERL_VERSION}
.endif

.if ${MODERL_RUNDEP:L} == yes
RUN_DEPENDS +=		${_MODERL_RDEPS} \
			lang/erlang/${MODERL_VERSION}
.endif

TEST_DEPENDS +=		${_MODERL_TDEPS}

# Root directory of all Erlang libraries.
MODERL_BASEDIR ?=	${PREFIX}/lib/erlang${MODERL_VERSION}/
ERL_LIBROOT ?=		${MODERL_BASEDIR}/lib
MODERL_LIBROOT ?=	lib/erlang${MODERL_VERSION}/lib

# Standard directory into which a module/library gets installed.
ERL_LIBDIR ?=		${ERL_LIBROOT}/${DISTNAME}

# Common program shortcuts
MODERL_ERL =		${LOCALBASE}/bin/erl${MODERL_VERSION}
MODERL_ERLC =		${LOCALBASE}/bin/erlc${MODERL_VERSION}

# In order to prevent patching every single Erlang-using port (there's no
# pkg-config like system to retrieve binary names), symlink the binaries
# the build will use.
_MODERL_LINKS +=	erl${MODERL_VERSION} erl \
			erlc${MODERL_VERSION} erlc \
			erl_call${MODERL_VERSION} erl_call \
			escript${MODERL_VERSION} escript

.if !empty(_MODERL_LINKS)
.  for _src _dest in ${_MODERL_LINKS}
MODERLANG_post-patch += ln -sf ${LOCALBASE}/bin/${_src} ${WRKDIR}/bin/${_dest};
.  endfor
.endif

# Some modules don't have a 'version' set and try to retrieve this through git.
# Patch the .app.src files to have ${VERSION} and set ERL_APP_SUBST=Yes.
.if defined(ERL_APP_SUBST) && ${ERL_APP_SUBST:L} == "yes"
.if ! target(pre-configure)
pre-configure:
	cd ${WRKSRC}/src/ && ${SUBST_CMD} *.app.src
.endif
.endif

.if ${CONFIGURE_STYLE:L} == "rebar"
# Some modules bundle their own rebar escript, force them to use the system
# rebar instead.
# While here, remove the deps{} block from rebar.config, we cannot download
# dependencies on the fly (blocked by systrace) and it obfuscates dependency
# management from the ports Makefile.
.  if ! target(pre-build)
pre-build:
	@@cp -f ${REBAR_BIN} ${WRKSRC}/rebar
	@@perl -pi -e 'BEGIN{undef $$/;} s/{deps,.*?]}.//smg' ${WRKSRC}/rebar.config
.  endif
.endif

# Regression test handing:
# If nothing is explicitly set, then MODERL_TEST=Yes and default
# target 'test' is used. Otherwise, if MODERL_TEST=eunit, then
# TEST_TARGET=eunit
.if defined(NO_TEST) && ${NO_TEST:L:Mno}
.  if ! defined(MODERL_TEST) || \
     defined(MODERL_TEST) && ${MODERL_TEST:L:Myes}
         TEST_TARGET ?= test
.  elif defined(MODERL_TEST) && ${MODERL_TEST:L:Mno}
     NO_TEST = yes
.  elif defined(MODERL_TEST) && ${MODERL_TEST:L:Meunit}
     TEST_TARGET ?= eunit
.endif
.endif

# Helper target for testing code coverage.
.if ! target(dialyzer)
dialyzer:
	cd ${WRKSRC} && ${REBAR_BIN} dialyzer
.endif

SUBST_VARS +=		MODERL_BASEDIR MODERL_LIBROOT VERSION MODERL_VERSION
@


1.22
log
@add MODERL_BASEDIR, to be used by rabbitmq shortly
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.21 2015/10/28 19:18:31 jasper Exp $
d16 1
a16 1
FLAVORS ?=		erlang17 erlang18
d18 1
a18 1
FLAVORS +=		erlang17 erlang18
d30 3
d44 2
@


1.21
log
@- fix symlink for erl_call
- add erl_call to _MODERL_LINKS
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.20 2015/07/14 22:52:56 jasper Exp $
d91 2
a92 1
ERL_LIBROOT ?=		${PREFIX}/lib/erlang${MODERL_VERSION}/lib
d159 1
a159 1
SUBST_VARS +=		MODERL_LIBROOT VERSION MODERL_VERSION
@


1.20
log
@add MODERL_WX to set a BDEP/RDEP on the wx subpackage
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.19 2015/06/26 06:36:57 jasper Exp $
d106 1
@


1.19
log
@plumbing for erlang18
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.18 2015/06/25 13:35:21 jasper Exp $
d70 7
@


1.18
log
@whitespace
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.16 2015/06/25 13:16:51 jasper Exp $
d16 1
a16 1
FLAVORS ?=		erlang17
d18 1
a18 1
FLAVORS +=		erlang17
d27 3
d39 2
@


1.17
log
@define MODERL_{ERL,ERLC} as shortcuts to the versioned binaries
@
text
@d79 2
a80 2
ERL_LIBROOT ?=	${PREFIX}/lib/erlang${MODERL_VERSION}/lib
MODERL_LIBROOT ?= lib/erlang${MODERL_VERSION}/lib
d83 1
a83 1
ERL_LIBDIR ?=	${ERL_LIBROOT}/${DISTNAME}
d86 2
a87 2
MODERL_ERL =	${LOCALBASE}/bin/erl${MODERL_VERSION}
MODERL_ERLC =	${LOCALBASE}/bin/erlc${MODERL_VERSION}
@


1.16
log
@handle multiple erlang versions and add extra handling for rebar/erl/erlc/escript
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.15 2015/06/24 06:48:53 jasper Exp $
d84 4
@


1.15
log
@- rework the erlang module to be version aware; defaults to using erlang 16.
- if a port needs erlang 17, set MODERL_VERSION=17

ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.13 2015/06/23 20:51:57 jasper Exp $
a8 7
# If no configure style is set, then assume "rebar"
.if ${CONFIGURE_STYLE} == ""
CONFIGURE_STYLE =	rebar
MODERL_BUILD_DEPENDS +=	devel/rebar
REBAR_BIN ?=		${LOCALBASE}/bin/rebar
.endif

a33 1
DPB_PROPERTIES +=	tag:erlang16
a35 1
DPB_PROPERTIES +=	tag:erlang17
d40 10
d79 2
a80 1
ERL_LIBROOT ?=	${PREFIX}/lib/erlang/lib/
d83 14
a96 1
ERL_LIBDIR ?=	${ERL_LIBROOT}${DISTNAME}
d115 1
a115 1
	@@cp -f ${REBAR_BIN} ${WRKSRC}
d141 1
a141 1
SUBST_VARS +=		VERSION
@


1.14
log
@these bits weren't supposed to go in just yet
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.12 2015/06/23 07:38:53 jasper Exp $
a8 10
SUBST_VARS +=		VERSION

# Root directory of all Erlang libraries.
ERL_LIBROOT ?=	${PREFIX}/lib/erlang/lib/

# Standard directory into which a module/library gets installed.
ERL_LIBDIR ?=	${ERL_LIBROOT}${DISTNAME}

MODERL_RUN_DEPENDS +=	lang/erlang/16

d14 1
d16 10
a25 10
# Some modules bundle their own rebar escript, force them to use the system
# rebar instead.
# While here, remove the deps{} block from rebar.config, we cannot download
# dependencies on the fly (blocked by systrace) and it obfuscates dependency
# management from the ports Makefile.
.  if ! target(pre-build)
pre-build:
	@@cp -f ${REBAR_BIN} ${WRKSRC}
	@@perl -pi -e 'BEGIN{undef $$/;} s/{deps,.*?]}.//smg' ${WRKSRC}/rebar.config
.  endif
d28 9
a36 2
.if defined(MODERL_BUILD_DEPENDS)
BUILD_DEPENDS +=	${MODERL_BUILD_DEPENDS}
d39 8
a46 2
.if defined(MODERL_RUN_DEPENDS)
RUN_DEPENDS +=		${MODERL_RUN_DEPENDS}
d49 34
d92 13
d125 2
@


1.13
log
@- cleanup CONFIGURE_ARGS:
* use correct switch to disable jinterface and odbc and remove now bogus pre-configure target
- sort gen-versions output
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.11 2015/06/22 18:39:46 jasper Exp $
d9 10
a23 1
.endif
d25 10
a34 10
# Default Erlang version to use if MODERL_VERSION is not set.
# XXX: Keep in sync with devel/rebar/Makefile
MODERL_DEFAULT_VERSION =16

# If the port already has flavors, append ours to it unless the port requires
# a specific version of Erlang.
.if !defined(MODERL_VERSION) && !defined(FLAVORS)
FLAVORS ?=		erlang17
.else
FLAVORS +=		erlang17
d37 2
a38 9
FLAVOR?=		# empty

# When no flavor is explicitly set, assume MODERL_DEFAULT_VERSION
.if ${FLAVOR:Merlang17}
MODERL_VERSION =	17
_MODERL_FLAVOR =	${FLAVOR}
.else
MODERL_VERSION ?=	${MODERL_DEFAULT_VERSION}
_MODERL_FLAVOR ?=	# empty
d41 2
a42 8
.if ${MODERL_VERSION} == 16
_MODERL_FLAVOR =	erlang16
DPB_PROPERTIES +=	tag:erlang16
.elif ${MODERL_VERSION} == 17
_MODERL_FLAVOR =	erlang17
DPB_PROPERTIES +=	tag:erlang17
.else
ERRORS +=		"Invalid MODERL_VERSION set: ${MODERL_VERSION}."
a44 34
# Append the flavor to all the Erlang dependencies
.for b in ${MODERL_BUILD_DEPENDS}
_MODERL_BDEPS +=	${b},${_MODERL_FLAVOR}
.endfor

.for r in ${MODERL_RUN_DEPENDS}
_MODERL_RDEPS +=	${r},${_MODERL_FLAVOR}
.endfor

.for t in ${MODERL_TEST_DEPENDS}
_MODERL_TDEPS +=	${t},${_MODERL_FLAVOR}
.endfor

MODERL_BUILDDEP ?=	Yes
MODERL_RUNDEP ?=	Yes

.if ${MODERL_BUILDDEP:L} == yes
BUILD_DEPENDS +=	${_MODERL_BDEPS} \
			lang/erlang/${MODERL_VERSION}
.endif

.if ${MODERL_RUNDEP:L} == yes
RUN_DEPENDS +=		${_MODERL_RDEPS} \
			lang/erlang/${MODERL_VERSION}
.endif

TEST_DEPENDS +=		${_MODERL_TDEPS}

# Root directory of all Erlang libraries.
ERL_LIBROOT ?=	${PREFIX}/lib/erlang/lib/

# Standard directory into which a module/library gets installed.
ERL_LIBDIR ?=	${ERL_LIBROOT}${DISTNAME}

a53 13
.if ${CONFIGURE_STYLE:L} == "rebar"
# Some modules bundle their own rebar escript, force them to use the system
# rebar instead.
# While here, remove the deps{} block from rebar.config, we cannot download
# dependencies on the fly (blocked by systrace) and it obfuscates dependency
# management from the ports Makefile.
.  if ! target(pre-build)
pre-build:
	@@cp -f ${REBAR_BIN} ${WRKSRC}
	@@perl -pi -e 'BEGIN{undef $$/;} s/{deps,.*?]}.//smg' ${WRKSRC}/rebar.config
.  endif
.endif

a73 2

SUBST_VARS +=		VERSION
@


1.12
log
@don't re-order too much just yet
@
text
@a8 10
SUBST_VARS +=		VERSION

# Root directory of all Erlang libraries.
ERL_LIBROOT ?=	${PREFIX}/lib/erlang/lib/

# Standard directory into which a module/library gets installed.
ERL_LIBDIR ?=	${ERL_LIBROOT}${DISTNAME}

MODERL_RUN_DEPENDS +=	lang/erlang/16

d14 1
d16 10
a25 10
# Some modules bundle their own rebar escript, force them to use the system
# rebar instead.
# While here, remove the deps{} block from rebar.config, we cannot download
# dependencies on the fly (blocked by systrace) and it obfuscates dependency
# management from the ports Makefile.
.  if ! target(pre-build)
pre-build:
	@@cp -f ${REBAR_BIN} ${WRKSRC}
	@@perl -pi -e 'BEGIN{undef $$/;} s/{deps,.*?]}.//smg' ${WRKSRC}/rebar.config
.  endif
d28 9
a36 2
.if defined(MODERL_BUILD_DEPENDS)
BUILD_DEPENDS +=	${MODERL_BUILD_DEPENDS}
d39 8
a46 2
.if defined(MODERL_RUN_DEPENDS)
RUN_DEPENDS +=		${MODERL_RUN_DEPENDS}
d49 34
d92 13
d125 2
@


1.11
log
@re-order
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.10 2015/06/22 13:07:39 jasper Exp $
a18 17
.if defined(MODERL_BUILD_DEPENDS)
BUILD_DEPENDS +=	${MODERL_BUILD_DEPENDS}
.endif

.if defined(MODERL_RUN_DEPENDS)
RUN_DEPENDS +=		${MODERL_RUN_DEPENDS}
.endif

# Some modules don't have a 'version' set and try to retrieve this through git.
# Patch the .app.src files to have ${VERSION} and set ERL_APP_SUBST=Yes.
.if defined(ERL_APP_SUBST) && ${ERL_APP_SUBST:L} == "yes"
.if ! target(pre-configure)
pre-configure:
	cd ${WRKSRC}/src/ && ${SUBST_CMD} *.app.src
.endif
.endif

d35 17
@


1.10
log
@- move existing erlang 16 port to it's own directory so we can move towards erlang 17
* note that this shuffling is still a WIP
- adjust MODERL_RUN_DEPENDS accordingly
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.9 2015/06/21 13:24:17 jasper Exp $
d11 25
a53 16
# Root directory of all Erlang libraries.
ERL_LIBROOT ?=	${PREFIX}/lib/erlang/lib/

# Standard directory into which a module/library gets installed.
ERL_LIBDIR ?=	${ERL_LIBROOT}${DISTNAME}

MODERL_RUN_DEPENDS +=	lang/erlang/16

.if defined(MODERL_BUILD_DEPENDS)
BUILD_DEPENDS +=	${MODERL_BUILD_DEPENDS}
.endif

.if defined(MODERL_RUN_DEPENDS)
RUN_DEPENDS +=		${MODERL_RUN_DEPENDS}
.endif

a72 9
.endif

# Some modules don't have a 'version' set and try to retrieve this through git.
# Patch the .app.src files to have ${VERSION} and set ERL_APP_SUBST=Yes.
.if defined(ERL_APP_SUBST) && ${ERL_APP_SUBST:L} == "yes"
.if ! target(pre-configure)
pre-configure:
	cd ${WRKSRC}/src/ && ${SUBST_CMD} *.app.src
.endif
@


1.9
log
@use ${REBAR_BIN} in pre-build instead of hardcoding /usr/local/bin/rebar
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.8 2014/07/09 17:07:38 ajacoutot Exp $
d35 1
a35 1
MODERL_RUN_DEPENDS +=	lang/erlang
@


1.8
log
@CONFIGURE_STYLE be always defined.

ok jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.7 2013/04/28 16:40:42 jasper Exp $
d21 1
a21 1
# management from the ports' Makefile.
d24 1
a24 1
	@@cp -f /usr/local/bin/rebar ${WRKSRC}
@


1.7
log
@no need for gtar anymore, all erl-* ports build fine now.
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.6 2013/03/11 13:01:39 jasper Exp $
d12 1
a12 1
.if defined(CONFIGURE_STYLE) && ${CONFIGURE_STYLE} == ""
a13 3
.endif

.if defined(CONFIGURE_STYLE) && ${CONFIGURE_STYLE:L} == "rebar"
@


1.6
log
@some ports want to retrieve their .app.src version through git, so provide
an easier way to use SUBST_CMD instead.
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.5 2013/03/11 12:40:15 jasper Exp $
a36 5

# A lot (if not all) of the Erlang modules comes from GitHub, so to ensure the
# tarballs are extracted correctly, use GNU tar.
MODERL_BUILD_DEPENDS += archivers/gtar
TAR ?=			${LOCALBASE}/bin/gtar
@


1.5
log
@- use cp -f to copyin rebar so abborted builds can be restarted.
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.4 2013/03/11 11:20:27 espie Exp $
d72 9
@


1.4
log
@PERMIT_* / REGRESS->TEST sweep
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.3 2013/03/10 19:52:56 jasper Exp $
d27 1
a27 1
	@@cp /usr/local/bin/rebar ${WRKSRC}
@


1.3
log
@must use $$ for the per-build target to work.
@
text
@d1 1
a1 1
# $OpenBSD: erlang.port.mk,v 1.2 2013/03/10 19:35:03 jasper Exp $
d54 11
a64 11
# If nothing is explicitly set, then MODERL_REGRESS=Yes and default
# target 'test' is used. Otherwise, if MODERL_REGRESS=eunit, then
# REGRESS_TARGET=eunit
.if defined(NO_REGRESS) && ${NO_REGRESS:L:Mno}
.  if ! defined(MODERL_REGRESS) || \
     defined(MODERL_REGRESS) && ${MODERL_REGRESS:L:Myes}
         REGRESS_TARGET ?= test
.  elif defined(MODERL_REGRESS) && ${MODERL_REGRESS:L:Mno}
     NO_REGRESS = yes
.  elif defined(MODERL_REGRESS) && ${MODERL_REGRESS:L:Meunit}
     REGRESS_TARGET ?= eunit
@


1.2
log
@if no CONFIGURE_STYLE was set, then assume "rebar"
@
text
@d1 1
a1 1
# $OpenBSD$
d28 1
a28 1
	@@perl -pi -e 'BEGIN{undef $/;} s/{deps,.*?]}.//smg' ${WRKSRC}/rebar.config
@


1.1
log
@add a module primarily for erlang modules
@
text
@d11 5
@

