head	1.4;
access;
symbols
	OPENBSD_6_0:1.3.0.50
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.46
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.48
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.44
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.42
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.40
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.38
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.36
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.34
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.32
	OPENBSD_5_0:1.3.0.30
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.28
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.24
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.1.1.0.6
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.4
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.2
	OPENBSD_3_2_BASE:1.1.1.1
	bk:1.1.1.1
	hugs98:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2017.02.25.20.04.57;	author kili;	state dead;
branches;
next	1.3;
commitid	oyrA0x9iKMeCI7IJ;

1.3
date	2004.05.07.02.07.31;	author dons;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.15.21.42.37;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.27.06.16.18;	author wcobb;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.04.27.06.16.18;	author wcobb;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Retire lang/hugs. Dead upstream since more than 10 years, and needs W|X.

ok dcoppa@@ about 9 months ago (and I totally forgot it).
@
text
@Hugs 98 is a functional programming system based on Haskell 98, the de
facto standard for non-strict functional programming languages. Hugs
98 provides an almost complete implementation of Haskell 98,
including:

    * Lazy evaluation, higher order functions, and pattern matching.                        
    * A wide range of built-in types, from characters to bignums, and
      lists to functions, with comprehensive facilities for defining
      new datatypes and type synonyms.
    * An advanced polymorphic type system with type and constructor
      class overloading.
    * All of the features of the Haskell 98 expression and pattern
      syntax including lambda, case, conditional and let expressions,
      list comprehensions, do-notation, operator sections, and
      wildcard, irrefutable and `as' patterns.
    * An implementation of the Haskell 98 primitives for monadic I/O,
      with support for simple interactive programs, access to text
      files, handle-based I/O, and exception handling.
    * An almost complete implementation of the Haskell module system.
      Hugs 98 also supports a number of advanced and experimental
      extensions including multi-parameter classes, extensible
      records, rank-2 polymorphism, existentials, scoped type
      variables, and restricted type synonyms.
@


1.3
log
@Update Hugs to Nov2003. Enable pthreads and the ffi. Add a regress test suite

ok pvalchev@@
@
text
@@


1.2
log
@remove WWW lines
@
text
@d1 4
a4 2
Hugs 98 is a functional programming system which provides an almost
complete implementation of Haskell 98.
d6 18
a23 13
  o Lazy evaluation, higher order functions, and pattern matching.
  o A wide range of built-in types, from characters to bignums, and lists
    to functions, with comprehensive facilities for defining new datatypes
    and type synonyms.
  o A polymorphic type system with type and constructor class overloading.
  o All of the features of the Haskell 98 expression and pattern syntax.
  o An implementation of the main Haskell 98 primitives for monadic I/O,
    with support for simple interactive programs, access to text files,
    handle-based I/O, and exception handling.
  o An almost complete implementation of the Haskell module system.
    Hugs 98 also supports a number of experimental extensions including
    multi-parameter classes, extensible records, rank-2 polymorphism,
    existentials, scoped type variables, and restricted type synonyms. 
@


1.1
log
@Initial revision
@
text
@a16 2

WWW: ${HOMEPAGE}
@


1.1.1.1
log
@Hugs 98, from maintainer.
 
Hugs 98 is a functional programming system which provides an almost
complete implementation of Haskell 98.
@
text
@@
