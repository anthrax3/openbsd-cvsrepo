head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.26
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.22
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.24
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.20
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.18
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.16
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.07.07.19.37.39;	author kili;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Unbreak after SO_PEERCRED addition.
@
text
@$OpenBSD$
--- packages/network/Network/Socket.hsc.orig	Thu Sep 21 00:28:56 2006
+++ packages/network/Network/Socket.hsc	Wed Jul  7 20:55:09 2010
@@@@ -999,15 +999,15 @@@@ getSocketOption (MkSocket s _ _ _ _) so = do
 getPeerCred :: Socket -> IO (CUInt, CUInt, CUInt)
 getPeerCred sock = do
   let fd = fdSocket sock
-  let sz = (fromIntegral (#const sizeof(struct ucred)))
+  let sz = (fromIntegral (#const sizeof(struct sockpeercred)))
   with sz $ \ ptr_cr -> 
    alloca       $ \ ptr_sz -> do
      poke ptr_sz sz
      throwErrnoIfMinus1 "getPeerCred" $
        c_getsockopt fd (#const SOL_SOCKET) (#const SO_PEERCRED) ptr_cr ptr_sz
-     pid <- (#peek struct ucred, pid) ptr_cr
-     uid <- (#peek struct ucred, uid) ptr_cr
-     gid <- (#peek struct ucred, gid) ptr_cr
+     pid <- (#peek struct sockpeercred, pid) ptr_cr
+     uid <- (#peek struct sockpeercred, uid) ptr_cr
+     gid <- (#peek struct sockpeercred, gid) ptr_cr
      return (pid, uid, gid)
 #endif
 
@
