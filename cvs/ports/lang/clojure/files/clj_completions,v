head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.8
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.8
date	2016.01.30.09.31.59;	author jasper;	state Exp;
branches;
next	1.7;
commitid	C5cOHT2vTWLVUisE;

1.7
date	2016.01.20.08.01.13;	author jasper;	state Exp;
branches;
next	1.6;
commitid	yLC400UT3x8m8D3M;

1.6
date	2015.07.18.00.50.23;	author jasper;	state Exp;
branches;
next	1.5;
commitid	nALA4Ll2iiq2LG0N;

1.5
date	2014.03.30.21.08.24;	author jasper;	state Exp;
branches;
next	1.4;

1.4
date	2014.03.30.20.38.10;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.17.19.35.06;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2012.04.18.20.18.43;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.30.19.40.28;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove duplicates from the completions list
@
text
@*
*'
*1
*2
*3
*agent*
*allow-unresolved-vars*
*assert*
*clojure-version*
*command-line-args*
*compile-files*
*compile-path*
*compiler-options*
*data-readers*
*default-data-reader-fn*
*e
*err*
*file*
*flush-on-newline*
*fn-loader*
*in*
*math-context*
*ns*
*out*
*print-dup*
*print-length*
*print-level*
*print-meta*
*print-readably*
*read-eval*
*session*
*source-path*
*suppress-read*
*unchecked-math*
*use-context-classloader*
*verbose-defrecords*
*warn-on-reflection*
+
+'
-
-'
->
->>
->ArrayChunk
->Eduction
->Vec
->VecNode
->VecSeq
-cache-protocol-fn
-reset-methods
..
/
<
<=
=
==
>
>=
Coercions
CollReduce
EMPTY-NODE
IKVReduce
IOFactory
InternalReduce
Throwable->map
accessor
aclone
add-classpath
add-watch
agent
agent-error
agent-errors
aget
alength
alias
all-ns
alter
alter-meta!
alter-var-root
amap
ancestors
and
apply
areduce
array-map
as->
as-file
as-relative-path
as-url
aset
aset-boolean
aset-byte
aset-char
aset-double
aset-float
aset-int
aset-long
aset-short
assert
assoc
assoc!
assoc-in
associative?
atom
await
await-for
await1
bases
bean
bigdec
bigint
biginteger
binding
bit-and
bit-and-not
bit-clear
bit-flip
bit-not
bit-or
bit-set
bit-shift-left
bit-shift-right
bit-test
bit-xor
blank?
boolean
boolean-array
booleans
bound-fn
bound-fn*
bound?
butlast
byte
byte-array
bytes
capitalize
case
cast
cat
char
char-array
char-escape-string
char-name-string
char?
chars
chunk
chunk-append
chunk-buffer
chunk-cons
chunk-first
chunk-next
chunk-rest
chunked-seq?
class
class?
clear-agent-errors
clojure-version
coll-reduce
coll?
comment
commute
comp
comparator
compare
compare-and-set!
compile
complement
completing
completions
concat
cond
cond->
cond->>
condp
conj
conj!
cons
constantly
construct-proxy
contains?
copy
count
counted?
create-ns
create-struct
cycle
dec
dec'
decimal?
declare
dedupe
default-data-readers
default-streams-impl
definline
definterface
defmacro
defmethod
defmulti
defn
defn-
defonce
defprotocol
defrecord
defstruct
deftype
delay
delay?
delete-file
deliver
demunge
denominator
deref
derive
descendants
destructure
disj
disj!
dissoc
dissoc!
distinct
distinct?
doall
dorun
doseq
dosync
dotimes
doto
double
double-array
doubles
drop
drop-last
drop-while
eduction
empty
empty?
ends-with?
ensure
ensure-reduced
enumeration-seq
error-handler
error-mode
escape
eval
even?
every-pred
every?
ex-data
ex-info
extend
extend-protocol
extend-type
extenders
extends?
false?
ffirst
file
file-seq
filter
filterv
find
find-keyword
find-ns
find-protocol-impl
find-protocol-method
find-var
first
flatten
float
float-array
float?
floats
flush
fn
fn?
fnext
fnil
for
force
format
frequencies
future
future-call
future-cancel
future-cancelled?
future-done?
future?
gen-class
gen-interface
gensym
get
get-in
get-method
get-proxy-class
get-thread-bindings
get-validator
group-by
hash
hash-combine
hash-map
hash-ordered-coll
hash-set
hash-unordered-coll
identical?
identity
if-let
if-not
if-some
ifn?
import
in-ns
inc
inc'
includes?
index-of
init-proxy
input-stream
instance?
int
int-array
integer?
interleave
intern
internal-reduce
interpose
into
into-array
ints
io!
isa?
iterate
iterator-seq
join
juxt
keep
keep-indexed
key
keys
keyword
keyword?
kv-reduce
last
last-index-of
lazy-cat
lazy-seq
let
letfn
line-seq
list
list*
list?
load
load-file
load-reader
load-script
load-string
loaded-libs
locking
long
long-array
longs
loop
lower-case
macroexpand
macroexpand-1
main
make-array
make-hierarchy
make-input-stream
make-output-stream
make-parents
make-reader
make-writer
map
map-entry?
map-indexed
map?
mapcat
mapv
max
max-key
memfn
memoize
merge
merge-with
meta
method-sig
methods
min
min-key
mix-collection-hash
mod
munge
name
namespace
namespace-munge
neg?
newline
next
nfirst
nil?
nnext
not
not-any?
not-empty
not-every?
not=
ns
ns-aliases
ns-imports
ns-interns
ns-map
ns-name
ns-publics
ns-refers
ns-resolve
ns-unalias
ns-unmap
nth
nthnext
nthrest
num
number?
numerator
object-array
odd?
or
output-stream
parents
parse-timestamp
partial
partition
partition-all
partition-by
pcalls
peek
persistent!
pmap
pop
pop!
pop-thread-bindings
pos?
pr
pr-str
prefer-method
prefers
primitives-classnames
print
print-ctor
print-dup
print-method
print-simple
print-str
printf
println
println-str
prn
prn-str
promise
proxy
proxy-call-with-super
proxy-mappings
proxy-name
proxy-super
push-thread-bindings
pvalues
quot
rand
rand-int
rand-nth
random-sample
range
ratio?
rational?
rationalize
re-find
re-groups
re-matcher
re-matches
re-pattern
re-quote-replacement
re-seq
read
read-instant-calendar
read-instant-date
read-instant-timestamp
read-line
read-string
reader
reader-conditional
reader-conditional?
realized?
record?
reduce
reduce-kv
reduced
reduced?
reductions
ref
ref-history-count
ref-max-history
ref-min-history
ref-set
refer
refer-clojure
reify
release-pending-sends
rem
remove
remove-all-methods
remove-method
remove-ns
remove-watch
repeat
repeatedly
repl
repl-caught
repl-exception
repl-init
repl-prompt
repl-read
repl-requires
replace
replace-first
replicate
require
reset!
reset-meta!
resolve
resource
rest
restart-agent
resultset-seq
reverse
reversible?
root-cause
rseq
rsubseq
run!
satisfies?
second
select-keys
send
send-off
send-via
seq
seq?
seque
sequence
sequential?
set
set-agent-send-executor!
set-agent-send-off-executor!
set-error-handler!
set-error-mode!
set-validator!
set?
short
short-array
shorts
shuffle
shutdown-agents
skip-if-eol
skip-whitespace
slurp
some
some->
some->>
some-fn
some?
sort
sort-by
sorted-map
sorted-map-by
sorted-set
sorted-set-by
sorted?
special-symbol?
spit
split
split-at
split-lines
split-with
stack-element-str
start-server
start-servers
starts-with?
stop-server
stop-servers
str
string?
struct
struct-map
subs
subseq
subvec
supers
swap!
symbol
symbol?
sync
tagged-literal
tagged-literal?
take
take-last
take-nth
take-while
test
the-ns
thread-bound?
time
to-array
to-array-2d
trampoline
transduce
transient
tree-seq
trim
trim-newline
triml
trimr
true?
type
unchecked-add
unchecked-add-int
unchecked-byte
unchecked-char
unchecked-dec
unchecked-dec-int
unchecked-divide-int
unchecked-double
unchecked-float
unchecked-inc
unchecked-inc-int
unchecked-int
unchecked-long
unchecked-multiply
unchecked-multiply-int
unchecked-negate
unchecked-negate-int
unchecked-remainder-int
unchecked-short
unchecked-subtract
unchecked-subtract-int
underive
unquote
unquote-splicing
unreduced
unsigned-bit-shift-right
update
update-in
update-proxy
upper-case
use
val
validated
vals
var-get
var-set
var?
vary-meta
vec
vector
vector-of
vector?
volatile!
volatile?
vreset!
vswap!
when
when-first
when-let
when-not
when-some
while
with-bindings
with-bindings*
with-in-str
with-loading-context
with-local-vars
with-meta
with-open
with-out-str
with-precision
with-read-known
with-redefs
with-redefs-fn
writer
xml-seq
zero?
zipmap@


1.7
log
@update to clojure-1.8.0
@
text
@a483 1
read
a488 1
read-string
a516 1
repl
a521 1
repl-read
a523 1
replace
a534 1
reverse
a675 1
with-bindings
@


1.6
log
@update to clojure-1.7.0
@
text
@d31 1
d237 1
d314 2
d343 1
d375 1
d484 1
d490 1
d519 1
d522 1
d525 1
d591 5
@


1.5
log
@write out the sorted list of completions, makes it easier to diff the list
@
text
@d32 1
d44 1
d64 1
a83 1
arr-impl
d138 1
d167 1
d190 1
d233 1
a233 1
emit-array-impls
d237 1
d465 1
d484 2
d534 1
d592 2
d605 1
d638 1
d640 1
d656 4
@


1.4
log
@update to clojure-1.6.0
@
text
@d1 36
a36 17
completions
main
with-bindings
stack-element-str
repl-caught
repl-exception
repl-read
load-script
skip-if-eol
skip-whitespace
root-cause
repl-requires
demunge
with-read-known
repl
repl-prompt
primitives-classnames
d38 79
a116 22
decimal?
restart-agent
sort-by
macroexpand
ensure
chunk-first
tree-seq
unchecked-remainder-int
seq
reduce
when-first
find-ns
get-thread-bindings
contains?
every?
proxy-mappings
keep-indexed
cond->>
subs
ref-min-history
set
take-last
d118 1
a118 26
gen-class
while
butlast
satisfies?
line-seq
unchecked-subtract-int
take-nth
first
re-groups
seq?
dec'
ns-unmap
println-str
with-bindings*
iterator-seq
iterate
slurp
newline
short-array
fn?
doall
prefers
enumeration-seq
dissoc
atom
import
d120 6
a125 4
print-method
peek
aget
pvalues
d127 15
a141 17
last
pr
namespace
push-thread-bindings
bases
=
dosync
remove-ns
take
vector?
thread-bound?
send-via
boolean
bit-shift-left
find-var
rand-int
aclone
d143 39
d183 17
a199 16
future-call
resultset-seq
struct
map
juxt
ns-publics
<
*source-path*
with-loading-context
test
rest
ex-data
compile
isa?
..
munge
d201 16
a216 27
set-error-mode!
re-seq
char?
make-hierarchy
set-agent-send-executor!
keep
char
mapcat
unchecked-long
aset-long
some?
unchecked-negate
gen-interface
*command-line-args*
reverse
range
sort
-cache-protocol-fn
unchecked-inc-int
map-indexed
with-bindings
rand-nth
comp
await
spit
future-done?
*read-eval*
d218 18
a235 2
disj
*2
d237 27
a263 4
cons
refer
print-dup
-reset-methods
d265 4
a268 1
pos?
d270 29
a298 3
merge-with
nthrest
load
d300 34
a333 54
*verbose-defrecords*
sequential?
*print-level*
shuffle
boolean-array
find
alength
bit-xor
deliver
doseq
unsigned-bit-shift-right
neg?
var-set
unchecked-float
pmap
error-mode
num
reduced?
disj!
float?
aset-float
deftype
bean
booleans
ns-unalias
when-let
int-array
set?
inc'
flush
take-while
vary-meta
<=
alter
-'
if-some
conj!
repeatedly
zipmap
alter-var-root
biginteger
remove
*
re-pattern
min
pop!
chunk-append
prn-str
with-precision
format
reversible?
shutdown-agents
conj
bound?
a334 5
*print-length*
*file*
compare-and-set!
*use-context-classloader*
await1
d336 29
a364 4
ref-set
pop-thread-bindings
interleave
printf
d366 8
a373 12
->
defstruct
*err*
get
doto
identity
into
areduce
long
double
definline
nfirst
a374 4
find-protocol-impl
bit-and-not
*default-data-reader-fn*
var?
d376 4
a379 83
unchecked-add-int
unquote-splicing
hash-ordered-coll
future
reset-meta!
cycle
fn
seque
empty?
short
definterface
filterv
hash
quot
ns-aliases
read
unchecked-double
key
longs
not=
string?
aset-double
unchecked-multiply-int
chunk-rest
pcalls
*allow-unresolved-vars*
remove-all-methods
ns-resolve
as->
aset-boolean
trampoline
when-not
*1
vec
*print-meta*
when
int
ns-refers
rand
second
vector-of
hash-combine
>
replace
associative?
unchecked-int
set-error-handler!
keyword?
force
bound-fn*
namespace-munge
group-by
prn
extend
unchecked-multiply
some->>
default-data-readers
->VecSeq
even?
unchecked-dec
double-array
in-ns
create-ns
re-matcher
defn
ref
bigint
extends?
promise
aset-char
rseq
construct-proxy
agent-errors
*compile-files*
*math-context*
float
pr-str
concat
aset-short
set-agent-send-off-executor!
ns
symbol
to-array-2d
d381 1
a381 16
amap
pop
use
unquote
declare
dissoc!
reductions
aset-byte
ref-history-count
-
assoc!
hash-set
reduce-kv
or
cast
reset!
d383 7
a389 20
ffirst
sorted-set
counted?
byte-array
println
extend-type
macroexpand-1
assoc-in
char-name-string
bit-test
defmethod
EMPTY-NODE
time
memoize
alter-meta!
future?
zero?
require
unchecked-dec-int
persistent!
a390 38
add-watch
not-every?
class?
rem
agent-error
some
future-cancelled?
memfn
struct-map
drop
*data-readers*
nth
sorted?
nil?
extend-protocol
split-at
*e
load-reader
cond->
dotimes
select-keys
bit-and
list*
reify
update-in
prefer-method
aset-int
*clojure-version*
*'
instance?
with-open
mix-collection-hash
re-find
val
defonce
unchecked-add
loaded-libs
->Vec
d392 9
a400 6
with-meta
the-ns
record?
type
identical?
unchecked-divide-int
d402 34
a435 19
max-key
*unchecked-math*
defn-
*out*
file-seq
agent
ns-map
set-validator!
defprotocol
swap!
vals
unchecked-subtract
*warn-on-reflection*
sorted-set-by
sync
assert
*compile-path*
true?
release-pending-sends
a436 3
empty
remove-method
*in*
d438 14
a451 6
letfn
/
read-line
bit-or
clear-agent-errors
vector
d453 7
a459 28
>=
drop-last
not-empty
distinct
partition
loop
add-classpath
bit-flip
long-array
descendants
merge
accessor
integer?
mapv
partition-all
partition-by
numerator
object-array
with-out-str
condp
derive
load-string
special-symbol?
ancestors
subseq
error-handler
gensym
cond
d461 37
a497 6
delay?
intern
print-simple
flatten
doubles
with-in-str
d499 53
a551 2
ex-info
ifn?
d553 15
a567 46
proxy-name
ns-interns
all-ns
find-protocol-method
subvec
for
binding
partial
chunked-seq?
find-keyword
replicate
min-key
reduced
char-escape-string
re-matches
array-map
unchecked-byte
with-local-vars
ns-imports
send-off
defmacro
every-pred
keys
rationalize
load-file
distinct?
extenders
unchecked-short
methods
odd?
->ArrayChunk
float-array
*3
alias
frequencies
read-string
proxy
rsubseq
inc
get-method
with-redefs
bit-clear
filter
locking
list
+
d569 1
a569 8
aset
->VecNode
keyword
*ns*
destructure
*assert*
defmulti
chars
d571 19
a589 12
next
hash-map
if-let
underive
ref-max-history
false?
*print-readably*
ints
class
some-fn
case
*flush-on-newline*
d591 2
a592 21
bigdec
list?
bit-not
io!
xml-seq
byte
max
==
*agent*
lazy-cat
comment
parents
count
supers
*fn-loader*
sorted-map-by
apply
interpose
deref
assoc
rational?
d594 33
a626 21
clojure-version
chunk-cons
comparator
sorted-map
send
drop-while
proxy-call-with-super
realized?
char-array
resolve
compare
complement
*compiler-options*
*print-dup*
defrecord
with-redefs-fn
sequence
constantly
get-proxy-class
make-array
shorts
d628 17
a644 17
unchecked-negate-int
hash-unordered-coll
repeat
unchecked-inc
nthnext
and
create-struct
get-validator
number?
await-for
chunk-next
print-str
not-any?
into-array
init-proxy
chunk-buffer
symbol?
d646 14
a659 27
unchecked-char
->>
future-cancel
var-get
commute
coll?
get-in
fnext
denominator
bytes
refer-clojure
default-streams-impl
make-output-stream
make-parents
delete-file
input-stream
make-writer
as-relative-path
copy
as-file
output-stream
make-reader
Coercions
file
make-input-stream
IOFactory
resource
d661 3
a663 31
as-url
reader
capitalize
reverse
join
replace-first
escape
re-quote-replacement
replace
split-lines
lower-case
trim-newline
upper-case
split
trimr
trim
triml
blank?
arr-impl
kv-reduce
InternalReduce
emit-array-impls
internal-reduce
coll-reduce
CollReduce
IKVReduce
parse-timestamp
read-instant-date
read-instant-calendar
read-instant-timestamp
validated@


1.3
log
@- update to clojure-1.5.1
@
text
@d2 2
a3 2
repl-requires
repl-exception
d6 2
a7 1
demunge
d9 1
a10 3
skip-if-eol
repl-read
with-bindings
d12 2
d15 1
d17 19
a35 5
repl
main
sorted-map
read-line
re-pattern
d37 24
a60 20
keyword?
unchecked-inc-int
val
chunked-seq?
find-protocol-impl
vector-of
object-array
*compile-path*
max-key
list*
ns-aliases
booleans
the-ns
==
chunk-buffer
longs
shorts
instance?
format
sequential?
d62 11
a72 1
empty
d74 63
d138 13
a150 9
time
remove-method
gensym
not=
*3
unchecked-multiply
doseq
bit-or
aset-byte
d152 4
a155 8
send-via
hash-set
->Vec
add-watch
unchecked-dec
some
nil?
string?
d157 10
a166 7
second
letfn
keys
for
*2
long-array
pop-thread-bindings
d168 8
a175 7
cond
bit-set
spit
find-protocol-method
fn
sorted?
short-array
d177 13
a189 17
ns-publics
EMPTY-NODE
char-array
dosync
all-ns
long
with-open
init-proxy
add-classpath
false?
await1
true?
gen-interface
sync
short
ns-unmap
repeat
d191 6
a196 14
distinct
get-in
bit-xor
char-escape-string
complement
let
get-validator
dotimes
ref-max-history
*ns*
promise
defmethod
set-agent-send-executor!
-'
d198 4
a201 65
derive
aset-float
extend
-reset-methods
lazy-cat
commute
defstruct
with-in-str
partition-by
rem
odd?
symbol?
mapv
*print-level*
*allow-unresolved-vars*
thread-bound?
*data-readers*
filterv
proxy-call-with-super
*unchecked-math*
ns-interns
re-matches
split-with
munge
loop
future-done?
next
import
deliver
symbol
vals
->ArrayChunk
select-keys
re-matcher
rand
deref
some->
unchecked-inc
*math-context*
read
sequence
make-hierarchy
+
number?
assoc!
descendants
into-array
last
some-fn
unchecked-negate
integer?
defrecord
reduced?
*read-eval*
alter
prn
with-meta
with-out-str
floats
*
*compile-files*
when-not
butlast
-
->>
d203 1
a203 31
rseq
send-off
seq?
refer-clojure
identical?
..
print
vary-meta
with-loading-context
agent-error
*command-line-args*
bit-flip
zero?
bit-and
unquote-splicing
future
re-groups
*warn-on-reflection*
newline
replicate
keep-indexed
char?
distinct?
remove-ns
ratio?
xml-seq
vec
concat
update-in
vector
with-bindings*
d205 8
a212 4
bases
with-redefs
/
unchecked-add
d214 8
a221 11
assoc
unchecked-remainder-int
seque
aset-char
boolean
read-string
neg?
float-array
doubles
isa?
future-call
d223 5
a227 51
extends?
remove-watch
print-str
*e
ref-history-count
rsubseq
*flush-on-newline*
*out*
future?
vector?
split-at
chunk-cons
ns-refers
create-struct
proxy-super
int-array
unchecked-long
float
assert
map
+'
counted?
memfn
double-array
accessor
*print-length*
frequencies
chars
class?
rand-int
*1
aset-short
unchecked-short
prn-str
iterate
chunk-append
when-first
unchecked-double
slurp
restart-agent
unchecked-int
mapcat
assoc-in
get-thread-bindings
special-symbol?
ref
conj!
find-var
inc
future-cancel
every-pred
d229 5
a233 22
bound-fn*
default-data-readers
unchecked-subtract
ns-name
shuffle
defn-
*file*
re-find
bit-not
construct-proxy
ref-min-history
destructure
seq
intern
unchecked-multiply-int
pvalues
to-array-2d
sorted-map-by
filter
->VecNode
*verbose-defrecords*
*clojure-version*
d235 9
a243 8
alter-meta!
unchecked-dec-int
comment
key
class
re-seq
-cache-protocol-fn
ns
d245 3
a247 25
test
print-dup
create-ns
name
list?
nthrest
aset
nnext
doall
extenders
macroexpand-1
not-any?
resultset-seq
reductions
into
with-precision
*use-context-classloader*
transient
ffirst
bit-clear
proxy-name
extend-type
load-reader
with-redefs-fn
or
a248 14
as->
inc'
print-ctor
associative?
float?
drop-last
replace
decimal?
defn
parents
map?
prefers
numerator
condp
d250 9
d260 5
a264 36
unchecked-negate-int
file-seq
send
with-local-vars
reverse
with-bindings
count
get-proxy-class
set
ex-info
unchecked-subtract-int
when-let
comp
nth
byte
dissoc!
*err*
constantly
load
namespace
pr-str
<
rationalize
sort-by
->VecSeq
cycle
peek
denominator
reduce
interleave
amap
->
cons
macroexpand
var-set
str
d266 12
a277 25
ns-imports
while
remove-all-methods
first
bean
=
memoize
var-get
unchecked-float
range
tree-seq
defmacro
set-validator!
aset-double
*'
case
unchecked-divide-int
enumeration-seq
prefer-method
partition-all
ensure
reduced
find-ns
not-every?
struct-map
d279 29
a307 12
max
proxy-mappings
identity
ints
fnext
biginteger
min-key
reset-meta!
push-thread-bindings
unchecked-add-int
subs
compile
d309 23
a331 7
clear-agent-errors
printf
ns-resolve
method-sig
*default-data-reader-fn*
>=
shutdown-agents
d333 2
d336 18
a353 1
even?
d355 9
a363 3
bit-shift-left
dec'
methods
d365 52
a416 2
compare
deftype
d418 38
a455 4
cast
namespace-munge
supers
pcalls
d457 1
a457 25
group-by
get
<=
await
resolve
bytes
print-method
bound?
loaded-libs
fnil
force
partial
pmap
if-let
comparator
pos?
char
take-while
extend-protocol
and
refer
underive
in-ns
iterator-seq
declare
d459 13
a471 10
hash-combine
persistent!
locking
partition
map-indexed
contains?
update-proxy
interpose
chunk
aset-int
d473 25
a497 1
definterface
d499 11
a509 4
delay
apply
swap!
defmulti
d511 12
a522 4
reify
subvec
byte-array
rest
d524 19
a542 6
ns-map
set-error-mode!
unquote
int
release-pending-sends
mod
d544 7
a550 2
nfirst
nthnext
d552 13
a564 11
aset-long
struct
array-map
unchecked-char
bigint
dec
println
aget
find-keyword
pr
drop
d566 12
d579 5
a583 30
gen-class
eval
aclone
char-name-string
pop
primitives-classnames
atom
defonce
bit-shift-right
delay?
num
realized?
disj
io!
*print-readably*
rational?
merge-with
take-nth
*fn-loader*
*print-meta*
double
lazy-seq
*in*
take-last
line-seq
take
unchecked-byte
when
areduce
set?
d585 25
a609 20
rand-nth
alias
use
juxt
alength
chunk-first
*source-path*
defprotocol
to-array
hash-map
bit-and-not
*compiler-options*
compare-and-set!
*assert*
type
repeatedly
trampoline
set-error-handler!
remove
find
d611 6
a616 36
drop-while
not-empty
flatten
ex-data
set-agent-send-off-executor!
println-str
list
chunk-next
every?
satisfies?
flush
some->>
sort
dissoc
cond->
not
binding
error-handler
get-method
agent
sorted-set
alter-var-root
merge
subseq
min
print-simple
bit-test
await-for
keep
disj!
meta
output-stream
copy
file
writer
as-relative-path
a618 2
reader
default-streams-impl
d620 4
d625 2
a626 2
resource
input-stream
d628 1
d630 3
a632 1
make-writer
d634 9
a642 3
make-reader
IOFactory
trim
d644 2
a645 1
re-quote-replacement
a646 2
join
upper-case
d648 1
a648 1
split-lines
a649 4
replace
reverse
capitalize
escape
d651 3
a653 2
replace-first
trim-newline
d655 1
a656 2
kv-reduce
arr-impl
d659 2
a660 2
InternalReduce
internal-reduce
d663 1
a663 3
validated
read-instant-date
parse-timestamp@


1.2
log
@- update clojure to 1.4.0
* many changes, please refer to the changelog for a full list:
http://groups.google.com/group/clojure/browse_thread/thread/1f87f69db07a8162
@
text
@a0 36
formatter-out
formatter
*print-radix*
get-pretty-writer
*print-miser-width*
*print-pprint-dispatch*
print-table
write
print-length-loop
write-out
simple-dispatch
pprint-indent
cl-format
code-dispatch
pprint
*print-suppress-namespaces*
fresh-line
*print-right-margin*
*print-pretty*
pp
with-pprint-dispatch
*print-base*
pprint-newline
pprint-logical-block
set-pprint-dispatch
pprint-tab
walk
prewalk-demo
postwalk-demo
keywordize-keys
stringify-keys
prewalk
postwalk
postwalk-replace
macroexpand-all
prewalk-replace
d2 1
d13 1
d20 1
d55 1
d110 1
d149 1
d165 1
d338 1
d412 1
d434 1
d581 1
d588 1
d591 1
a607 20
sh
*sh-env*
with-sh-env
with-sh-dir
*sh-dir*
*open-url-script*
browse-url
source
stack-element-str
set-break-handler!
find-doc
thread-stopper
demunge
apropos
dir
dir-fn
root-cause
pst
source-fn
doc
d629 1
a650 8
*remote-javadocs*
javadoc
*feeling-lucky*
add-remote-javadoc
*feeling-lucky-url*
*core-java-api*
add-local-javadoc
*local-javadocs*
@


1.1
log
@- allow tab-completion to work for all clojure namespaces.
@
text
@d156 1
d160 2
d310 1
d391 1
d463 1
d593 1
d606 1
d670 15
d686 2
d689 2
d700 6
a705 1
*local-javadocs*@

