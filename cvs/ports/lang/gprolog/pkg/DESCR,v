head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.48
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.46
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.42
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.44
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.40
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.38
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.36
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.34
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.32
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.30
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.28
	OPENBSD_5_0:1.3.0.26
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.24
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.22
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.18
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.16
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.14
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.12
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.10
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.8
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.6
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.4
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.2
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	gprolog:1.1.1.1
	gnu:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2005.03.25.15.13.59;	author alek;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.15.01.57.04;	author db;	state Exp;
branches;
next	1.1;

1.1
date	2004.09.26.14.48.29;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.09.26.14.48.29;	author espie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Oh my^W^WMore no longer needed WWW:... lines
@
text
@GNU Prolog is a free Prolog compiler with constraint solving over finite
domains developed by Daniel Diaz.

GNU Prolog accepts Prolog+constraint programs and produces native
binaries (like gcc does from a C source). The obtained executable is
then stand-alone.  The size of this executable can be quite small since
GNU Prolog can avoid to link the code of most unused built-in
predicates. The performances of GNU Prolog are very encouraging
(comparable to commercial systems).

Beside the native-code compilation, GNU Prolog offers a classical
interactive interpreter (top-level) with a debugger.

The Prolog part conforms to the ISO standard for Prolog with many
extensions very useful in practice (global variables, OS interface,
sockets,...).

GNU Prolog also includes an efficient constraint solver over Finite
Domains (FD). This opens constraint logic programming to the user
combining the power of constraint programming to the declarativity of
logic programming.
@


1.2
log
@typo and wording fixes; approved by pval

ok mbalmer@@ "that diff was fun to read"
@
text
@a21 4

WWW: http://gnu-prolog.inria.fr/

Nuno Morgadinho nmorgadinho@@openbsd-pt.org
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
Domains (FD). This opens contraint logic pogramming to the user
@


1.1.1.1
log
@basic port of gnu-prolog, adapted from submission:
- old tricks with $${DESTDIR} to make sure the compilation path is okay.
- patchlet to compile without gnu-make
- patchlet to not force any mcpu=   on i386.

To do: reenable extra features if they work.
@
text
@@
