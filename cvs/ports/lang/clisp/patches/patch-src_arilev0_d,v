head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.26
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.24
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.20
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.22
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.18
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.16
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.14
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.12
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.10
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.8
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.6
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.09.23.13.42.22;	author joshe;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Build on sparc64.

ok jasper@@
@
text
@$OpenBSD$

Rip out a bunch of sparc assembly code which is dubious at best.

--- src/arilev0.d.orig	Thu Dec 13 14:27:48 2007
+++ src/arilev0.d	Sun Sep 19 15:45:18 2010
@@@@ -337,12 +337,6 @@@@
                   );                                      \
            hi_assignment _hi; lo_assignment _lo;            \
          })
-    #elif defined(SPARC)
-      #define mulu32(x,y,hi_assignment,lo_assignment)  \
-        ({ lo_assignment mulu32_(x,y); # extern in Assembler \
-          {var register uint32 _hi __asm__("%g1");          \
-           hi_assignment _hi;                                \
-         }})
     #elif defined(HAVE_LONG_LONG_INT) && !defined(ARM)
       #define mulu32(x,y,hi_assignment,lo_assignment)  \
         ({ var register uint64 _prod = (uint64)(x) * (uint64)(y); \
@@@@ -354,11 +348,9 @@@@
   #ifndef mulu32
     #define mulu32(x,y,hi_assignment,lo_assignment)  \
       { lo_assignment mulu32_(x,y); hi_assignment mulu32_high; }
-    #if defined(MC680X0) || defined(SPARC) || defined(SPARC64) || defined(ARM) || (defined(I80386) && !defined(BORLAND)) || defined(MIPS) || defined(HPPA) || defined(VAX)
+    #if defined(MC680X0) || defined(ARM) || (defined(I80386) && !defined(BORLAND)) || defined(MIPS) || defined(HPPA) || defined(VAX)
       # mulu32_ extern in Assembler
-      #if defined(SPARC) || defined(SPARC64)
-        #define mulu32_high  (uint32)(_get_g1()) # Rückgabe im Register %g1
-      #elif defined(LISPARIT) && !defined(HPPA) # In arihppa.d ist mulu32_high bereits definiert.
+      #if defined(LISPARIT) && !defined(HPPA) # In arihppa.d ist mulu32_high bereits definiert.
         global uint32 mulu32_high;
       #endif
     #else
@@@@ -468,12 +460,6 @@@@
                   );                                      \
            highlow64(_hi,_lo);                            \
          })
-    #elif defined(SPARC)
-      #define mulu32_64(x,y)  \
-        ({ var register uint32 _lo = mulu32_(x,y); # extern in Assembler \
-           var register uint32 _hi __asm__("%g1");                       \
-           highlow64(_hi,_lo);                                           \
-         })
     #endif
   #endif
   #ifndef mulu32_64
@@@@ -887,12 +873,6 @@@@
           q_assignment (uint32)__q;     \
           r_assignment (uint32)__r;     \
          })
-    #elif defined(SPARC) || defined(SPARC64)
-      #define divu_6432_3232(xhi,xlo,y,q_assignment,r_assignment)  \
-        ({ var uint32 _q = divu_6432_3232_(xhi,xlo,y); # extern in Assembler \
-           var register uint32 _r __asm__("%g1");                            \
-           q_assignment _q; r_assignment _r;                                   \
-         })
     #elif defined(ARM) && 0 # see comment ariarm.d
       #define divu_6432_3232(xhi,xlo,y,q_assignment,r_assignment)  \
         ({ var uint32 _q = divu_6432_3232_(xhi,xlo,y); # extern in Assembler \
@@@@ -932,11 +912,9 @@@@
   #ifndef divu_6432_3232
     #define divu_6432_3232(xhi,xlo,y,q_assignment,r_assignment)  \
       { q_assignment divu_6432_3232_(xhi,xlo,y); r_assignment divu_32_rest; }
-    #if defined(MC680Y0) || defined(SPARC) || defined(SPARC64) || defined(ARM) || (defined(I80386) && !defined(BORLAND)) || defined(HPPA)
+    #if defined(MC680Y0) || defined(ARM) || (defined(I80386) && !defined(BORLAND)) || defined(HPPA)
       # divu_6432_3232_ extern in Assembler
-      #if defined(SPARC) || defined(SPARC64)
-        #define divu_32_rest  (uint32)(_get_g1()) # Rückgabe im Register %g1
-      #elif defined(LISPARIT)
+      #if defined(LISPARIT)
         global uint32 divu_32_rest;
       #endif
     #else
@
