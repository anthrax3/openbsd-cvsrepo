head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.2;
locks; strict;
comment	@# @;


1.3
date	2017.03.17.23.40.47;	author juanfra;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	69gil3WiFYhFrb2P;

1.2
date	2014.07.04.18.26.49;	author juanfra;	state dead;
branches;
next	1.1;
commitid	sulJhnrJ4IhswSbO;

1.1
date	2014.05.22.11.22.27;	author jasper;	state Exp;
branches;
next	;

1.3.2.1
date	2017.03.19.22.40.27;	author juanfra;	state Exp;
branches;
next	;
commitid	xFwAIkQOCvST7qzD;


desc
@@


1.3
log
@"Remove unchecked malloc() call in SRFI-4 constructors when allocating
in non-GC memory, resulting in potential 1-word buffer overrun and/or
segfault."

http://lists.gnu.org/archive/html/chicken-announce/2017-03/msg00000.html

From Timo Myyra (MAINTAINER).
@
text
@$OpenBSD$
Backport of security fix:
  - Remove unchecked malloc() call in SRFI-4 constructors when
    allocating in non-GC memory, resulting in potential 1-word
    buffer overrun and/or segfault.

http://lists.gnu.org/archive/html/chicken-announce/2017-03/msg00000.html

--- srfi-4.scm.orig	Thu Mar 16 06:49:38 2017
+++ srfi-4.scm	Thu Mar 16 06:57:14 2017
@@@@ -256,16 +256,21 @@@@ EOF
 ;;; Basic constructors:
 
 (let* ([ext-alloc
-	(foreign-lambda* scheme-object ([int bytes])
-	  "C_word *buf = (C_word *)C_malloc(bytes + sizeof(C_header));"
-	  "if(buf == NULL) C_return(C_SCHEME_FALSE);"
+	(foreign-lambda* scheme-object ([size_t bytes])
+          "C_word *buf;"
+          "if (bytes > C_HEADER_SIZE_MASK) C_return(C_SCHEME_FALSE);"
+          "buf = (C_word *)C_malloc(bytes + sizeof(C_header));"
 	  "C_block_header_init(buf, C_make_header(C_BYTEVECTOR_TYPE, bytes));"
+          "if(buf == NULL) C_return(C_SCHEME_FALSE);"
+          "C_block_header_init(buf, C_make_header(C_BYTEVECTOR_TYPE, bytes));"
 	  "C_return(buf);") ]
        [ext-free
 	(foreign-lambda* void ([scheme-object bv])
 	  "C_free((void *)C_block_item(bv, 1));") ]
        [alloc
 	(lambda (loc len ext?)
+         (##sys#check-exact len loc)
+         (when (fx< len 0) (##sys#error loc "size is negative" len))	
 	  (if ext?
 	      (let ([bv (ext-alloc len)])
 		(or bv
@@@@ -282,7 +287,6 @@@@ EOF
 
   (set! make-u8vector
     (lambda (len #!optional (init #f)  (ext? #f) (fin? #t))
-      (##sys#check-exact len 'make-u8vector)
       (let ((v (##sys#make-structure 'u8vector (alloc 'make-u8vector len ext?))))
 	(when (and ext? fin?) (set-finalizer! v ext-free))
 	(if (not init)
@@@@ -295,7 +299,6 @@@@ EOF
 
   (set! make-s8vector
     (lambda (len #!optional (init #f)  (ext? #f) (fin? #t))
-      (##sys#check-exact len 'make-s8vector)
       (let ((v (##sys#make-structure 's8vector (alloc 'make-s8vector len ext?))))
 	(when (and ext? fin?) (set-finalizer! v ext-free))
 	(if (not init)
@@@@ -308,7 +311,6 @@@@ EOF
 
   (set! make-u16vector
     (lambda (len #!optional (init #f)  (ext? #f) (fin? #t))
-      (##sys#check-exact len 'make-u16vector)
       (let ((v (##sys#make-structure 'u16vector (alloc 'make-u16vector (##core#inline "C_fixnum_shift_left" len 1) ext?))))
 	(when (and ext? fin?) (set-finalizer! v ext-free))
 	(if (not init)
@@@@ -321,7 +323,6 @@@@ EOF
 
   (set! make-s16vector
     (lambda (len #!optional (init #f)  (ext? #f) (fin? #t))
-      (##sys#check-exact len 'make-s16vector)
       (let ((v (##sys#make-structure 's16vector (alloc 'make-s16vector (##core#inline "C_fixnum_shift_left" len 1) ext?))))
 	(when (and ext? fin?) (set-finalizer! v ext-free))
 	(if (not init)
@@@@ -334,7 +335,6 @@@@ EOF
 
   (set! make-u32vector
     (lambda (len #!optional (init #f)  (ext? #f) (fin? #t))
-      (##sys#check-exact len 'make-u32vector)
       (let ((v (##sys#make-structure 'u32vector (alloc 'make-u32vector (##core#inline "C_fixnum_shift_left" len 2) ext?))))
 	(when (and ext? fin?) (set-finalizer! v ext-free))
 	(if (not init)
@@@@ -347,7 +347,6 @@@@ EOF
 
   (set! make-s32vector
     (lambda (len #!optional (init #f)  (ext? #f) (fin? #t))
-      (##sys#check-exact len 'make-s32vector)
       (let ((v (##sys#make-structure 's32vector (alloc 'make-s32vector (##core#inline "C_fixnum_shift_left" len 2) ext?))))
 	(when (and ext? fin?) (set-finalizer! v ext-free))
 	(if (not init)
@@@@ -360,7 +359,6 @@@@ EOF
 
   (set! make-f32vector
     (lambda (len #!optional (init #f)  (ext? #f) (fin? #t))
-      (##sys#check-exact len 'make-f32vector)
       (let ((v (##sys#make-structure 'f32vector (alloc 'make-f32vector (##core#inline "C_fixnum_shift_left" len 2) ext?))))
 	(when (and ext? fin?) (set-finalizer! v ext-free))
 	(if (not init)
@@@@ -375,7 +373,6 @@@@ EOF
 
   (set! make-f64vector
     (lambda (len #!optional (init #f)  (ext? #f) (fin? #t))
-      (##sys#check-exact len 'make-f64vector)
       (let ((v (##sys#make-structure
 		'f64vector
 		(alloc 'make-f64vector (##core#inline "C_fixnum_shift_left" len 3) ext?))))
@


1.3.2.1
log
@CVE-2017-6949

"Remove unchecked malloc() call in SRFI-4 constructors when allocating
in non-GC memory, resulting in potential 1-word buffer overrun and/or
segfault."

http://lists.gnu.org/archive/html/chicken-announce/2017-03/msg00000.html

From Timo Myyra (MAINTAINER).
@
text
@d5 6
a10 3
    buffer overrun and/or segfault (thanks to Lemonboy).
--- srfi-4.scm.orig	Sat May 28 14:48:08 2016
+++ srfi-4.scm	Sat Mar 18 17:50:35 2017
@


1.2
log
@Update to chicken 4.9.0.1 by Timo Myyra (MAINTAINER). ok jasper@@
@
text
@d1 5
a5 1
$OpenBSD: patch-srfi-4_scm,v 1.1 2014/05/22 11:22:27 jasper Exp $
d7 1
a7 2
Security fix for CVE-2014-3776,
buffer overflow in "read-u8vector!" procedure leads to DoS or arbitrary code exec
d9 84
a92 20
http://code.call-cc.org/cgi-bin/gitweb.cgi?p=chicken-core.git;a=commit;h=1d06ce7e21c7e903ca5dca11fda6fcf2cc52de5e

--- srfi-4.scm.orig	Fri Oct  4 03:44:52 2013
+++ srfi-4.scm	Thu May 22 08:48:19 2014
@@@@ -653,12 +653,12 @@@@ EOF
   (##sys#check-input-port port #t 'read-u8vector!)
   (##sys#check-exact start 'read-u8vector!)
   (##sys#check-structure dest 'u8vector 'read-u8vector!)
-  (let ((dest (##sys#slot dest 1)))
-    (when n
-      (##sys#check-exact n 'read-u8vector!)
-      (when (fx> (fx+ start n) (##sys#size dest))
-	(set! n (fx- (##sys#size dest) start))))
-    (##sys#read-string! n dest port start) ) )
+  (when n (##sys#check-exact n 'read-u8vector!))
+  (let* ((dest (##sys#slot dest 1))
+	 (size (##sys#size dest)))
+    (unless (and n (fx<= (fx+ start n) size))
+      (set! n (fx- size start)))
+    (##sys#read-string! n dest port start)))
d94 6
a99 2
 (define read-u8vector
   (let ()
@


1.1
log
@Security fix for CVE-2014-3776,
buffer overflow in "read-u8vector!" procedure leads to DoS or arbitrary code exec
@
text
@d1 1
a1 1
$OpenBSD$
@

