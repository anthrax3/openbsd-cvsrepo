head	1.11;
access;
symbols
	OPENBSD_6_0:1.11.0.4
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.2
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.7.0.6
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.4
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.2.0.10
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@# @;


1.11
date	2015.12.20.11.04.27;	author kili;	state Exp;
branches;
next	1.10;
commitid	dTjHNUY1axsWM78C;

1.10
date	2015.09.19.07.42.57;	author kili;	state Exp;
branches;
next	1.9;
commitid	wrrXExsbhXWvHmhw;

1.9
date	2015.01.01.19.25.36;	author kili;	state Exp;
branches;
next	1.8;
commitid	xydU2twmNfvEHbae;

1.8
date	2014.11.22.20.23.23;	author kili;	state Exp;
branches;
next	1.7;
commitid	f8HFLM9LK5anF9Xl;

1.7
date	2013.07.18.21.43.24;	author kili;	state Exp;
branches;
next	1.6;

1.6
date	2012.10.11.07.51.10;	author dcoppa;	state Exp;
branches;
next	1.5;

1.5
date	2011.04.11.14.30.33;	author kili;	state dead;
branches;
next	1.4;

1.4
date	2010.05.16.13.51.26;	author kili;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.22.21.49.37;	author kili;	state dead;
branches;
next	1.2;

1.2
date	2007.09.16.20.05.12;	author kili;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.21.17.14.58;	author kili;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to ghc-7.10.3.
@
text
@$OpenBSD: patch-rts_Linker_c,v 1.10 2015/09/19 07:42:57 kili Exp $

Workaround error: unknown symbol '__guard_local'.

Disable check for .init_array sections, we don't have them.

--- rts/Linker.c.orig	Thu Nov 26 00:39:20 2015
+++ rts/Linker.c	Fri Dec 11 20:03:40 2015
@@@@ -860,6 +860,14 @@@@ typedef struct _RtsSymbolVal {
 #define RTS_DARWIN_ONLY_SYMBOLS
 #endif
 
+#if defined(openbsd_HOST_OS)
+#define RTS_OPENBSD_ONLY_SYMBOLS                            \
+     SymE_NeedsProto(__guard_local)                         \
+     SymE_NeedsProto(__stack_smash_handler)
+#else
+#define RTS_OPENBSD_ONLY_SYMBOLS
+#endif
+
 #ifndef SMP
 # define MAIN_CAP_SYM SymI_HasProto(MainCapability)
 #else
@@@@ -1481,6 +1489,7 @@@@ RTS_POSIX_ONLY_SYMBOLS
 RTS_MINGW_ONLY_SYMBOLS
 RTS_CYGWIN_ONLY_SYMBOLS
 RTS_DARWIN_ONLY_SYMBOLS
+RTS_OPENBSD_ONLY_SYMBOLS
 RTS_LIBGCC_SYMBOLS
 RTS_LIBFFI_SYMBOLS
 #undef SymI_NeedsProto
@@@@ -1525,6 +1534,7 @@@@ static RtsSymbolVal rtsSyms[] = {
       RTS_MINGW_ONLY_SYMBOLS
       RTS_CYGWIN_ONLY_SYMBOLS
       RTS_DARWIN_ONLY_SYMBOLS
+      RTS_OPENBSD_ONLY_SYMBOLS
       RTS_LIBGCC_SYMBOLS
       RTS_LIBFFI_SYMBOLS
 #if defined(darwin_HOST_OS) && defined(i386_HOST_ARCH)
@@@@ -5318,11 +5328,13 @@@@ static int getSectionKind_ELF( Elf_Shdr *hdr, int *is_
         return SECTIONKIND_CODE_OR_RODATA;
     }
 
+#ifndef openbsd_HOST_OS  
     if (hdr->sh_type == SHT_INIT_ARRAY
         && (hdr->sh_flags & SHF_ALLOC) && (hdr->sh_flags & SHF_WRITE)) {
        /* .init_array section */
         return SECTIONKIND_INIT_ARRAY;
     }
+#endif
 
     if (hdr->sh_type == SHT_NOBITS
         && (hdr->sh_flags & SHF_ALLOC) && (hdr->sh_flags & SHF_WRITE)) {
@


1.10
log
@Update to ghc-7.10.2.

Updates to all hs-* ports related to meta/haskell-platform will
follow soon. Other hs-* ports will be fixed during the next days.
@
text
@d1 1
a1 1
$OpenBSD: patch-rts_Linker_c,v 1.9 2015/01/01 19:25:36 kili Exp $
d7 3
a9 3
--- rts/Linker.c.orig	Tue Jul 21 15:52:50 2015
+++ rts/Linker.c	Sun Aug  9 17:35:53 2015
@@@@ -864,6 +864,14 @@@@ typedef struct _RtsSymbolVal {
d24 1
a24 1
@@@@ -1485,6 +1493,7 @@@@ RTS_POSIX_ONLY_SYMBOLS
d32 1
a32 1
@@@@ -1529,6 +1538,7 @@@@ static RtsSymbolVal rtsSyms[] = {
d40 1
a40 1
@@@@ -5309,11 +5319,13 @@@@ static int getSectionKind_ELF( Elf_Shdr *hdr, int *is_
@


1.9
log
@Bugfix udpate to ghc-7.8.4.
Also, use a new(er) bootstrapper; note that we have to use 7.8.3
for this, because if the built ghc and the bootstrapper have identical
versions, things will fail badly. May be it's not the ghc but the
cabal version which is problematic, but at the moment, I really
don'y call about *this* problem.
Still marked as broken. I hope to send promised diffs and new ports
for discussion tomorrow and then enable ghc and haskell-platform
on monday.
@
text
@d1 1
a1 1
$OpenBSD: patch-rts_Linker_c,v 1.8 2014/11/22 20:23:23 kili Exp $
d5 1
a5 1
Dissable check for .init_array sections, we don't have them.
d7 3
a9 3
--- rts/Linker.c.orig	Mon Dec 15 15:36:16 2014
+++ rts/Linker.c	Mon Dec 29 10:24:49 2014
@@@@ -849,6 +849,14 @@@@ typedef struct _RtsSymbolVal {
d24 1
a24 1
@@@@ -1434,6 +1442,7 @@@@ RTS_POSIX_ONLY_SYMBOLS
d32 1
a32 1
@@@@ -1469,6 +1478,7 @@@@ static RtsSymbolVal rtsSyms[] = {
d40 1
a40 1
@@@@ -4981,11 +4991,13 @@@@ static int getSectionKind_ELF( Elf_Shdr *hdr, int *is_
@


1.8
log
@Update to ghc-7.8.3, but mark as broken until all other
hs ports are done.

Please note that it still doesn't use shared libraries, so
still no ghci (and a lot of hs-ports not buildable) on i386.
@
text
@d1 1
a1 1
$OpenBSD: patch-rts_Linker_c,v 1.7 2013/07/18 21:43:24 kili Exp $
d7 2
a8 2
--- rts/Linker.c.orig	Thu Jul 10 06:27:16 2014
+++ rts/Linker.c	Mon Nov  3 14:33:18 2014
d24 1
a24 1
@@@@ -1433,6 +1441,7 @@@@ RTS_POSIX_ONLY_SYMBOLS
d32 1
a32 1
@@@@ -1468,6 +1477,7 @@@@ static RtsSymbolVal rtsSyms[] = {
d40 1
a40 1
@@@@ -4980,11 +4990,13 @@@@ static int getSectionKind_ELF( Elf_Shdr *hdr, int *is_
@


1.7
log
@Update to ghc-7.6.3, revert my last two obsolete changes and
mark it as broken until all depending ports have been updated.
@
text
@d1 1
a1 1
$OpenBSD: patch-rts_Linker_c,v 1.6 2012/10/11 07:51:10 dcoppa Exp $
d3 1
a3 1
Workaround error: unknown symbol '__guard_local'
d5 5
a9 3
--- rts/Linker.c.orig	Thu Apr 18 23:22:46 2013
+++ rts/Linker.c	Sun Jul  7 16:00:36 2013
@@@@ -822,6 +822,14 @@@@ typedef struct _RtsSymbolVal {
d24 1
a24 1
@@@@ -1352,6 +1360,7 @@@@ RTS_POSIX_ONLY_SYMBOLS
d32 1
a32 1
@@@@ -1387,6 +1396,7 @@@@ static RtsSymbolVal rtsSyms[] = {
d40 14
@


1.6
log
@Fix random crashes at runtime when there's heavy use of libgmp.a
(e.g. large Fibonacci numbers): link GHC with its bundled gmp library
that has customized memory allocation functions.

While here, fix two other problems as well:

- undefined references to 'ffi_call_unix64', 'ffi_closure_unix64'
  on amd64

- unknown symbol '__guard_local' (caused by gcc's switch from __guard
  to __guard_local)

Joint work with kili@@
OK kili@@
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 3
--- rts/Linker.c.orig	Tue Oct  9 21:15:55 2012
+++ rts/Linker.c	Tue Oct  9 21:29:11 2012
@@@@ -563,6 +563,14 @@@@ typedef struct _RtsSymbolVal {
d22 1
a22 1
@@@@ -1084,6 +1092,7 @@@@ RTS_POSIX_ONLY_SYMBOLS
d30 1
a30 1
@@@@ -1119,6 +1128,7 @@@@ static RtsSymbolVal rtsSyms[] = {
@


1.5
log
@Update to 7.0.3.

ok jasper@@ (who also gave an ok to all the depending updates).
@
text
@d1 20
a20 10
$OpenBSD: patch-rts_Linker_c,v 1.4 2010/05/16 13:51:26 kili Exp $
--- rts/Linker.c.orig	Tue Apr 20 20:10:07 2010
+++ rts/Linker.c	Thu May 13 12:50:00 2010
@@@@ -958,8 +958,7 @@@@ typedef struct _RtsSymbolVal {
       SymI_NeedsProto(__muldi3)			       \
       SymI_NeedsProto(__ashldi3)		       \
       SymI_NeedsProto(__ashrdi3)		       \
-      SymI_NeedsProto(__lshrdi3)		       \
-      SymI_NeedsProto(__eprintf)
+      SymI_NeedsProto(__lshrdi3)
d22 16
a37 2
 #define RTS_LIBGCC_SYMBOLS
 #endif
@


1.4
log
@Zap __eprintf reference from Linker.c to fix the build with gcc4
(found by espie@@).

Thanks to sthen@@ for creating the i386 bootstrapping tarball.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@
Update to 6.12.2.

Many thanks to Darrin Chandler and dcoppa@@ for testing, reporting about
broken stuff, missing dependencies here and in ports depending on ghc.

Notes and rants:

- Bootstrapping is done using precompiled binaries, since .hc
  bootstrapping still doesn't work. I really hate this.

  THIS MEANS THAT GHC IS NOW AND WILL STAY LEGACY-ONLY (i386 and amd64)

  At least until someone fixes it. I tried for more than two year
  (well, only in my spare time and during my vacations) and failed.

- libgmp is currently disabled, because I didn't yet hack the GHC build
  system to use the system libgmp instead of the patched one included
  in GHC.

- The haddock ncluded in the ghc distfile is replaced by the version
  of haddock found in devel/haddock. Haddock itself is @@commented
  in the ghc PLIST. Unfortunately, this needs an ugly hack that
  introduces an otherwise useless pseudo flavor `no_deps' in
  devel/haddock.

- CLDouble has been removed from GHC some time ago, because it was
  an alias for double (AFAIK there's now support for long double
  in GHC). As this isn't a really big problem, it currently breaks
  c2hs, which I'll mark broken temporarily before committing the
  ghc update.

- The external codeset defaults to latin1 (suggested by Simon Marlow)
  and can be overridden by setting the HS_ENCODING to any codeset
  supported by libiconv.

- ghc.port.mk still needs some love, especially for letting a port add
  additional parameters to certain invocations of ${MODGHC_SETUP_PROG}.
@
text
@d1 12
a12 12
$OpenBSD: patch-rts_Linker_c,v 1.2 2007/09/16 20:05:12 kili Exp $

We don't have MAP_ANONYMOUS (which is the same as MAP_ANON on Linux,
but the latter has been deprecated). We also don't have that MAP_32BIT
Linux provides for amd64, so just zap that flag to 0. In addition
EM_X86_64 is called EM_AMD64 on OpenBSD, so just replace it to
reenable GHCi (noted by dons).

--- rts/Linker.c.orig	Wed Apr 25 19:10:41 2007
+++ rts/Linker.c	Sun Sep 16 12:27:02 2007
@@@@ -73,6 +73,11 @@@@
 
a13 20
 
+#ifdef openbsd_HOST_OS
+#  define MAP_ANONYMOUS MAP_ANON
+#  define MAP_32BIT 0
+#endif
+
 #if defined(linux_HOST_OS) || defined(solaris2_HOST_OS) || defined(freebsd_HOST_OS) || defined(netbsd_HOST_OS) || defined(openbsd_HOST_OS)
 #  define OBJFORMAT_ELF
 #elif defined(cygwin32_HOST_OS) || defined (mingw32_HOST_OS)
@@@@ -2923,8 +2928,8 @@@@ ocVerifyImage_ELF ( ObjectCode* oc )
       case EM_IA_64: IF_DEBUG(linker,debugBelch( "ia64" )); break;
 #endif
       case EM_PPC:   IF_DEBUG(linker,debugBelch( "powerpc32" )); break;
-#ifdef EM_X86_64
-      case EM_X86_64: IF_DEBUG(linker,debugBelch( "x86_64" )); break;
+#ifdef EM_AMD64
+      case EM_AMD64: IF_DEBUG(linker,debugBelch( "x86_64" )); break;
 #endif
       default:       IF_DEBUG(linker,debugBelch( "unknown" ));
                      errorBelch("%s: unknown architecture", oc->fileName);
@


1.2
log
@
Fix GHCi for amd64 (s/EM_X86_64/EM_AMD64/ noticed by Don Steward). Tested
on amd64 by ckuethe@@ (thanks).
Add a man page.
@
text
@d1 1
a1 1
$OpenBSD: patch-rts_Linker_c,v 1.1 2007/07/21 17:14:58 kili Exp $
@


1.1
log
@
Update to 6.6.1. With helpful hints from Don Stewart and espie@@.
Thanks to all the testers and to steven@@, who was so kind to
build the HC files for bootstrapping on amd64.
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 4
Linux provides for amd64, so just zap that flag to 0. Note that
this isn't enough to make ghci work on amd64. The definite solution
would be real dynamic libraries created and used by GHC, so we could
drop most of that home-brewn linking code at all.
d10 1
a10 1
+++ rts/Linker.c	Wed May 23 13:59:08 2007
d23 11
@

