head	1.6;
access;
symbols
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3;
locks; strict;
comment	@# @;


1.6
date	2005.02.14.01.26.56;	author dons;	state dead;
branches;
next	1.5;

1.5
date	2004.04.26.23.48.50;	author dons;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.08.20.33.23;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.09.01.20.32.14;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.01.14.03.40;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.20.21.57.11;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update ghc to 6.2.2.
Adds support for ghci. More stable foreign function interface.

Just i386 at the moment.

ok sturm@@ pvalchev@@
@
text
@$OpenBSD: patch-ghc_rts_Adjustor_c,v 1.5 2004/04/26 23:48:50 dons Exp $
Ok. This is the magical "adjustor thunk". The entry point into
Haskell land from C land. Problem is that it (1) uses dynamically
generated code stored on the heap, as well as (2) a nasty little hack
that invovles exec'ing some code in .data. 

Solved (1) by using a StablePtr, avoiding malloc memory
altogether for the adjustor thunk itself.

Solved (2) by writing the assembly to do the code they
were too lazy to put into asm in the first place.

--- ghc/rts/Adjustor.c.orig	Sat Oct 18 12:04:10 2003
+++ ghc/rts/Adjustor.c	Sat Oct 18 12:04:08 2003
@@@@ -65,10 +65,11 @@@@
    For this to work we make the assumption that bytes in .data
    are considered executable.
 */
-static unsigned char __obscure_ccall_ret_code [] = 
-  { 0x83, 0xc4, 0x04 /* addl $0x4, %esp */
-  , 0xc3             /* ret */
-  };
+static void __obscure_ccall_ret_code(void) 
+{ 
+	asm("addl $0x4, %esp");
+	asm("ret");
+}
 #endif
 
 #if defined(alpha_TARGET_ARCH)
@@@@ -77,7 +78,6 @@@@
 #endif
 
 #if defined(ia64_TARGET_ARCH)
-#include "Storage.h"
 
 /* Layout of a function descriptor */
 typedef struct _IA64FunDesc {
@@@@ -85,6 +85,10 @@@@
     StgWord64 gp;
 } IA64FunDesc;
 
+#endif
+
+#include "Storage.h"
+
 static void *
 stgAllocStable(size_t size_in_bytes, StgStablePtr *stable)
 {
@@@@ -105,7 +109,6 @@@@
   /* and return a ptr to the goods inside the array */
   return(BYTE_ARR_CTS(arr));
 }
-#endif
 
 void*
 createAdjustor(int cconv, StgStablePtr hptr, StgFunPtr wptr)
@@@@ -128,8 +131,13 @@@@
      <c>: 	ff e0             jmp    %eax        	   # and jump to it.
 		# the callee cleans up the stack
     */
-    if ((adjustor = stgMallocBytes(14, "createAdjustor")) != NULL) {
-	unsigned char *const adj_code = (unsigned char *)adjustor;
+    {
+	StgStablePtr stable;
+	unsigned char *adj_code;
+
+	adjustor = stgAllocStable(18, &stable);
+	adj_code = (unsigned char *)adjustor;
+
 	adj_code[0x00] = (unsigned char)0x58;  /* popl %eax  */
 
 	adj_code[0x01] = (unsigned char)0x68;  /* pushl hptr (which is a dword immediate ) */
@@@@ -142,6 +150,8 @@@@
 
 	adj_code[0x0c] = (unsigned char)0xff; /* jmp %eax */
 	adj_code[0x0d] = (unsigned char)0xe0;
+
+	*((StgStablePtr*)(adj_code + 0x0e)) = (StgStablePtr)stable;
     }
 #endif
     break;
@@@@ -172,9 +182,13 @@@@
     That's (thankfully) the case here with the restricted set of 
     return types that we support.
   */
-    if ((adjustor = stgMallocBytes(17, "createAdjustor")) != NULL) {
-	unsigned char *const adj_code = (unsigned char *)adjustor;
+    {
+	StgStablePtr stable;
+	unsigned char *adj_code;
 
+	adjustor = stgAllocStable(21, &stable);
+	adj_code = (unsigned char *)adjustor;
+
 	adj_code[0x00] = (unsigned char)0x68;  /* pushl hptr (which is a dword immediate ) */
 	*((StgStablePtr*)(adj_code+0x01)) = (StgStablePtr)hptr;
 
@@@@ -186,6 +200,8 @@@@
 
 	adj_code[0x0f] = (unsigned char)0xff; /* jmp *%eax */
 	adj_code[0x10] = (unsigned char)0xe0; 
+
+	*((StgStablePtr*)(adj_code+0x11)) = (StgStablePtr)stable;
     }
 #elif defined(sparc_TARGET_ARCH)
   /* Magic constant computed by inspecting the code length of the following
@@@@ -217,9 +233,13 @@@@
      similarly, and local variables should be accessed via %fp, not %sp. In a
      nutshell: This should work! (Famous last words! :-)
   */
-    if ((adjustor = stgMallocBytes(4*(11+1), "createAdjustor")) != NULL) {
-        unsigned long *const adj_code = (unsigned long *)adjustor;
+    {
+	StgStablePtr stable;
+	unsigned long *adj_code;
 
+	adjustor = stgAllocStable(4*(11+2), &stable);
+	adj_code = (unsigned long *)adjustor;
+
         adj_code[ 0]  = 0x9C23A008UL;   /* sub   %sp, 8, %sp         */
         adj_code[ 1]  = 0xDA23A060UL;   /* st    %o5, [%sp + 96]     */
         adj_code[ 2]  = 0xD823A05CUL;   /* st    %o4, [%sp + 92]     */
@@@@ -237,6 +257,7 @@@@
         adj_code[10] |= ((unsigned long)hptr) & 0x000003FFUL;
 
         adj_code[11]  = (unsigned long)hptr;
+	adj_code[12]  = (unsigned long)stable;
 
         /* flush cache */
         asm("flush %0" : : "r" (adj_code     ));
@@@@ -476,12 +497,15 @@@@
    return;
  }
 
- /* Free the stable pointer first..*/
+ /* Free the internal stable pointer first..*/
  if (*(unsigned char*)ptr == 0x68) { /* Aha, a ccall adjustor! */
     freeStablePtr(*((StgStablePtr*)((unsigned char*)ptr + 0x01)));
+    freeStablePtr(*((StgStablePtr*)((unsigned char*)ptr + 0x11)));
  } else {
     freeStablePtr(*((StgStablePtr*)((unsigned char*)ptr + 0x02)));
+    freeStablePtr(*((StgStablePtr*)((unsigned char*)ptr + 0x0e)));
  }    
+ return;
 #elif defined(sparc_TARGET_ARCH)
  if ( *(unsigned long*)ptr != 0x9C23A008UL ) {
    fprintf(stderr, "freeHaskellFunctionPtr: not for me, guv! %p\n", ptr);
@@@@ -490,6 +514,8 @@@@
 
  /* Free the stable pointer first..*/
  freeStablePtr(*((StgStablePtr*)((unsigned long*)ptr + 11)));
+ freeStablePtr(*((StgStablePtr*)((unsigned long*)ptr + 12)));
+ return;
 #elif defined(alpha_TARGET_ARCH)
  if ( *(StgWord64*)ptr != 0xa77b0018a61b0010L ) {
    fprintf(stderr, "freeHaskellFunctionPtr: not for me, guv! %p\n", ptr);
@


1.5
log
@Update GHC to 6.2.1, and port to amd64

ok avsm@@ pvalchev@@
@
text
@d1 1
a1 1
$OpenBSD: patch-ghc_rts_Adjustor_c,v 1.3 2003/09/01 20:32:14 espie Exp $
@


1.4
log
@Add support for sparc ghc.
Hard work by Donald Stewart <dons at cse.unsw.edu.au>
@
text
@@


1.3
log
@Bootstrap using a more recent ghc, solves gc issues. From maintainer.
okay naddy.
@
text
@d1 1
a1 1
$OpenBSD: patch-ghc_rts_Adjustor_c,v 1.2 2003/08/01 14:03:40 avsm Exp $
d10 2
a11 3
Solved (2) by writing an assembly function to do the code they
were too lazy to put into a .s file in the first place. See
obscure_ccall.s
d13 3
a15 3
--- ghc/rts/Adjustor.c.orig	Wed Mar 26 04:58:47 2003
+++ ghc/rts/Adjustor.c	Thu Jul 10 21:25:30 2003
@@@@ -65,10 +65,10 @@@@
d23 5
a27 4
+
+/* from obscure_ccall.s */
+extern void __obscure_ccall_ret_code(void);
+
d31 1
a31 1
@@@@ -77,13 +77,14 @@@@
d36 1
a36 1
-
d39 1
a39 1
     StgWord64 ip;
d42 1
d46 1
a46 1
 
d49 2
a50 1
@@@@ -105,7 +106,6 @@@@
d58 1
a58 1
@@@@ -128,20 +128,22 @@@@
a63 6
-	adj_code[0x00] = (unsigned char)0x58;  /* popl %eax  */
-
-	adj_code[0x01] = (unsigned char)0x68;  /* pushl hptr (which is a dword immediate ) */
-	*((StgStablePtr*)(adj_code + 0x02)) = (StgStablePtr)hptr;
-
-	adj_code[0x06] = (unsigned char)0x50; /* pushl %eax */
d65 7
a71 2
+        StgStablePtr stable;
+        unsigned char *const adj_code;
d73 2
a74 4
-	adj_code[0x07] = (unsigned char)0xb8; /* movl  $wptr, %eax */
-	*((StgFunPtr*)(adj_code + 0x08)) = (StgFunPtr)wptr;
+        adjustor = stgAllocStable(18,&stable);
+	adj_code = (unsigned char *)adjustor;
d76 4
a79 11
-	adj_code[0x0c] = (unsigned char)0xff; /* jmp %eax */
-	adj_code[0x0d] = (unsigned char)0xe0;
+	adj_code[0] = (unsigned char)0x58;  /* popl %eax  */
+	adj_code[1] = (unsigned char)0x68;  /* pushl hptr (which is a dword immediate ) */
+	*((StgStablePtr*)(adj_code+2)) = (StgStablePtr)hptr;
+	adj_code[6] = (unsigned char)0x50; /* pushl %eax */
+	adj_code[7] = (unsigned char)0xb8; /* movl  $wptr, %eax */
+	*((StgFunPtr*)(adj_code+8)) = (StgFunPtr)wptr;
+	adj_code[12] = (unsigned char)0xff; /* jmp %eax */
+	adj_code[13] = (unsigned char)0xe0;
+	*((StgStablePtr*)(adj_code+14)) = (StgStablePtr)stable;
d83 1
a83 1
@@@@ -172,20 +174,22 @@@@
d89 6
a94 15
-
-	adj_code[0x00] = (unsigned char)0x68;  /* pushl hptr (which is a dword immediate ) */
-	*((StgStablePtr*)(adj_code+0x01)) = (StgStablePtr)hptr;
-
-	adj_code[0x05] = (unsigned char)0xb8;  /* movl  $wptr, %eax */
-	*((StgFunPtr*)(adj_code + 0x06)) = (StgFunPtr)wptr;
-
-	adj_code[0x0a] = (unsigned char)0x68;  /* pushl __obscure_ccall_ret_code */
-	*((StgFunPtr*)(adj_code + 0x0b)) = (StgFunPtr)__obscure_ccall_ret_code;
-
-	adj_code[0x0f] = (unsigned char)0xff; /* jmp *%eax */
-	adj_code[0x10] = (unsigned char)0xe0; 
+   { 
+        StgStablePtr stable;
+        unsigned char *const adj_code;
d96 7
a102 2
+        adjustor = stgAllocStable(21, &stable);
+	adj_code = (unsigned char *)adjustor;
d104 1
a104 9
+	adj_code[0] = (unsigned char)0x68;  /* pushl hptr (which is a dword immediate ) */
+	*((StgStablePtr*)(adj_code+1)) = (StgStablePtr)hptr;
+	adj_code[5] = (unsigned char)0xb8;  /* movl  $wptr, %eax */
+	*((StgFunPtr*)(adj_code+6)) = (StgFunPtr)wptr;
+	adj_code[10] = (unsigned char)0x68;  /* pushl __obscure_ccall_ret_code */
+	*((StgFunPtr*)(adj_code+11)) = (StgFunPtr)__obscure_ccall_ret_code;
+	adj_code[15] = (unsigned char)0xff; /* jmp *%eax */
+	adj_code[16] = (unsigned char)0xe0; 
+	*((StgStablePtr*)(adj_code+17)) = (StgStablePtr)stable;
d108 25
a132 1
@@@@ -476,12 +480,16 @@@@
d139 2
a140 3
-    freeStablePtr(*((StgStablePtr*)((unsigned char*)ptr + 0x01)));
+    freeStablePtr( *((StgStablePtr*)((unsigned char*)ptr +  1)) );
+    freeStablePtr( *((StgStablePtr*)((unsigned char*)ptr + 17)) );
d142 2
a143 3
-    freeStablePtr(*((StgStablePtr*)((unsigned char*)ptr + 0x02)));
+    freeStablePtr( *((StgStablePtr*)((unsigned char*)ptr +  2)) );
+    freeStablePtr( *((StgStablePtr*)((unsigned char*)ptr + 14)) );
a145 1
+
d148 9
@


1.2
log
@RCS tags, from Xavier Santolaria <xavier@@santolaria.net>
@
text
@d1 1
a1 1
$OpenBSD$
d11 2
a12 1
were too lazy to put into a .s file in the first place.
@


1.1
log
@Update from maintainer Don Stewart (dons at cse.unsw.edu.au):

- Updated to ghc-6.0
- Halved (roughly) the build time; by using the 6.0 in-tree build
we only have to build the 6.0 libraries once. Also we only build the
necessary parts of the bootstrap compiler.
- The ugly lndir/stage1 build is also gone.
- The full ghc regression suite is now part of the port!
"make regress" will run around 3000 regress tests.
- The regression tests revealed that the C foreign function
- The Makefile is simplified, using more default targets
- The documentation is updated to 6.0
- I put some of the 5.04.3 patches into ghc cvs, so they are
now obsolete.

Unfortunately, this lets mozilla back in the race for longest
package building time...
@
text
@d1 1
@

