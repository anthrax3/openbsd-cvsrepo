head	1.6;
access;
symbols
	OPENBSD_4_7:1.5.0.12
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.10
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.8
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.6
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.4
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.2
	OPENBSD_3_4_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2010.04.22.21.49.37;	author kili;	state dead;
branches;
next	1.5;

1.5
date	2007.07.21.17.14.58;	author kili;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.14.01.26.56;	author dons;	state dead;
branches;
next	1.3;

1.3
date	2004.05.20.00.08.22;	author dons;	state Exp;
branches;
next	1.2;

1.2
date	2004.04.26.23.48.50;	author dons;	state Exp;
branches;
next	1.1;

1.1
date	2003.09.01.20.32.14;	author espie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@
Update to 6.12.2.

Many thanks to Darrin Chandler and dcoppa@@ for testing, reporting about
broken stuff, missing dependencies here and in ports depending on ghc.

Notes and rants:

- Bootstrapping is done using precompiled binaries, since .hc
  bootstrapping still doesn't work. I really hate this.

  THIS MEANS THAT GHC IS NOW AND WILL STAY LEGACY-ONLY (i386 and amd64)

  At least until someone fixes it. I tried for more than two year
  (well, only in my spare time and during my vacations) and failed.

- libgmp is currently disabled, because I didn't yet hack the GHC build
  system to use the system libgmp instead of the patched one included
  in GHC.

- The haddock ncluded in the ghc distfile is replaced by the version
  of haddock found in devel/haddock. Haddock itself is @@commented
  in the ghc PLIST. Unfortunately, this needs an ugly hack that
  introduces an otherwise useless pseudo flavor `no_deps' in
  devel/haddock.

- CLDouble has been removed from GHC some time ago, because it was
  an alias for double (AFAIK there's now support for long double
  in GHC). As this isn't a really big problem, it currently breaks
  c2hs, which I'll mark broken temporarily before committing the
  ghc update.

- The external codeset defaults to latin1 (suggested by Simon Marlow)
  and can be overridden by setting the HS_ENCODING to any codeset
  supported by libiconv.

- ghc.port.mk still needs some love, especially for letting a port add
  additional parameters to certain invocations of ${MODGHC_SETUP_PROG}.
@
text
@$OpenBSD: patch-mk_bootstrap_mk,v 1.5 2007/07/21 17:14:58 kili Exp $

Don't use -fno-unit-at-a-time on amd64 when bootstrapping from HC files.
Pull in our system libgmp.
libreadline needs libncurses.

--- mk/bootstrap.mk.orig	Wed Apr 25 19:10:40 2007
+++ mk/bootstrap.mk	Sat Jun  2 14:01:38 2007
@@@@ -22,7 +22,7 @@@@ PLATFORM_HC_BOOT_CC_OPTS += -fno-defer-pop -fomit-fram
 endif
 
 ifeq "$(x86_64_TARGET_ARCH)" "1"
-PLATFORM_HC_BOOT_CC_OPTS += -fomit-frame-pointer -fno-asynchronous-unwind-tables -fno-unit-at-a-time -fno-builtin
+PLATFORM_HC_BOOT_CC_OPTS += -fomit-frame-pointer -fno-asynchronous-unwind-tables -fno-builtin
 endif
 
 ifeq "$(hppa_TARGET_ARCH)" "1"
@@@@ -83,9 +83,11 @@@@ endif
 
 ifeq "$(HaveLibGmp)" "NO"
 DASH_L_GHC_RTS_GMP_DIR=-L$(FPTOOLS_TOP_ABS)/$(GHC_RTS_DIR_REL)/gmp
+else
+DASH_L_GHC_RTS_GMP_DIR=-L$(GMP_LIB_DIRS)
 endif
 
-HC_BOOT_LD_OPTS =				\
+HC_BOOT_LD_OPTS +=				\
    -L$(FPTOOLS_TOP_ABS)/$(GHC_RTS_DIR_REL)	\
    $(DASH_L_GHC_RTS_GMP_DIR)                    \
    -L$(FPTOOLS_TOP_ABS)/libraries/base		\
@@@@ -142,7 +144,7 @@@@ HC_BOOT_LD_OPTS += \
 HC_BOOT_LIBS =
 
 ifeq "$(GhcWithInterpreter)" "YES"
-HC_BOOT_LIBS += -lHSreadline -lreadline -lHStemplate-haskell -lHSunix -lHSunix_cbits
+HC_BOOT_LIBS += -lHSreadline -lreadline -lcurses -lHStemplate-haskell -lHSunix -lHSunix_cbits
 endif
 
 HC_BOOT_LIBS +=  -lHSCabal -lHShaskell98 -lHSregex-compat -lHSregex-posix -lHSregex-base -lHSbase -lHSbase_cbits -lHSparsec -lHSrts -lgmp -lm $(EXTRA_HC_BOOT_LIBS)
@


1.5
log
@
Update to 6.6.1. With helpful hints from Don Stewart and espie@@.
Thanks to all the testers and to steven@@, who was so kind to
build the HC files for bootstrapping on amd64.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@Update ghc to 6.2.2.
Adds support for ghci. More stable foreign function interface.

Just i386 at the moment.

ok sturm@@ pvalchev@@
@
text
@d1 1
a1 3
$OpenBSD: patch-mk_bootstrap_mk,v 1.3 2004/05/20 00:08:22 dons Exp $
Make sure we know how to build things. I don't know why this isn't
needed on, e.g. linux
d3 35
a37 10
--- mk/bootstrap.mk.orig	Wed Feb  4 21:05:04 2004
+++ mk/bootstrap.mk	Thu May 20 09:49:39 2004
@@@@ -8,6 +8,8 @@@@
 # compile the .hc files, so we have to duplicate that functionality here.
 # The result is unfortunately ugly, but we don't have another choice.
 
+include $(TOP)/mk/suffix.mk
+
 TOP_SAVED := $(TOP)
 TOP:=$(TOP)/ghc
d39 1
@


1.3
log
@Remove ld -no-keep-memory workaround for amd64, and use VMEM_WARNING instead.

ok pvalchev@@ brad@@
@
text
@d1 1
a1 1
$OpenBSD: patch-mk_bootstrap_mk,v 1.2 2004/04/26 23:48:50 dons Exp $
@


1.2
log
@Update GHC to 6.2.1, and port to amd64

ok avsm@@ pvalchev@@
@
text
@d1 1
a1 1
$OpenBSD$
d5 2
a6 5
And for some reason amd64/ld doesn't like linking GHC unless I tell it
to use less memory.

--- mk/bootstrap.mk.orig	Wed Feb  4 03:05:04 2004
+++ mk/bootstrap.mk	Sun Apr 18 20:59:29 2004
a14 10
 
@@@@ -136,6 +138,9 @@@@
    -u "$(UNDERSCORE)GHCziWeak_runFinalizzerBatch_closure" \
    -u "$(UNDERSCORE)__stginit_Prelude"
 
+ifeq "$(TARGETPLATFORM)" "x86_64-unknown-openbsd"
+HC_BOOT_LD_OPTS+=-Wl,-no-keep-memory
+endif
 
 HC_BOOT_LIBS =
@


1.1
log
@Bootstrap using a more recent ghc, solves gc issues. From maintainer.
okay naddy.
@
text
@d1 3
a3 3
This file controls bootstrapping from .hc files. It has been
slightly broken for a while. So fix it to work with 6.0.x
compilers: the library paths have changed since 5.04.x
d5 8
a12 5
--- mk/bootstrap.mk.orig	Fri Jul 25 00:08:25 2003
+++ mk/bootstrap.mk	Thu Aug 21 19:07:39 2003
@@@@ -17,11 +17,15 @@@@
 # Reset TOP
 TOP:=$(TOP_SAVED)
d16 2
a17 13
 # -----------------------------------------------------------------------------
 # Set the platform-specific options to send to the C compiler.  These should
 # match the list in machdepCCOpts in ghc/compiler/DriverFlags.hs.
 #
 
+GhcCanonVersion=600
+
 PLATFORM_CC_OPTS =
 PLATFORM_HC_BOOT_CC_OPTS =
 
@@@@ -68,8 +72,9 @@@@
 
 HC_BOOT_CC_OPTS = $(PLATFORM_HC_BOOT_CC_OPTS) $(PLATFORM_CC_OPTS) $(CC_OPTS)
d19 1
a19 19
-SRC_CC_OPTS += -I$(FPTOOLS_TOP_ABS)/ghc/includes -I$(FPTOOLS_TOP_ABS)/libraries/base/include -I$(FPTOOLS_TOP_ABS)/libraries/unix/include
+SRC_CC_OPTS += -I$(FPTOOLS_TOP_ABS)/ghc/includes -I$(FPTOOLS_TOP_ABS)/libraries/base/include -I$(FPTOOLS_TOP_ABS)/libraries/unix/include -I$(FPTOOLS_TOP_ABS)/libraries/readline/include
 
+
 # -----------------------------------------------------------------------------
 # Linking: we have to give all the libraries explicitly.
 
@@@@ -89,6 +94,10 @@@@
    -L$(FPTOOLS_TOP_ABS)/libraries/base		\
    -L$(FPTOOLS_TOP_ABS)/libraries/base/cbits	\
    -L$(FPTOOLS_TOP_ABS)/libraries/haskell98	\
+   -L$(FPTOOLS_TOP_ABS)/libraries/haskell-src	\
+   -L$(FPTOOLS_TOP_ABS)/libraries/readline	\
+   -L$(FPTOOLS_TOP_ABS)/libraries/unix    	\
+   -L$(FPTOOLS_TOP_ABS)/libraries/unix/cbits	\
    -u "$(UNDERSCORE)GHCziBase_Izh_static_info" \
    -u "$(UNDERSCORE)GHCziBase_Czh_static_info" \
    -u "$(UNDERSCORE)GHCziFloat_Fzh_static_info" \
@@@@ -121,11 +130,7 @@@@
d23 5
a27 6
-HC_BOOT_LIBS = -lHShaskell98 -lHSbase -lHSbase_cbits -lHSrts -lgmp -lm $(EXTRA_HC_BOOT_LIBS)
-
-ifeq "$(GhcLibsWithReadline)" "YES"
-HC_BOOT_LIBS += $(patsubst %, -l%, $(LibsReadline))
-endif
+HC_BOOT_LIBS = -lHShaskell98 -lHSreadline -lHShaskell-src -lHSunix -lHSunix_cbits -lHSbase -lHSbase_cbits -lHSrts -lgmp -lm -lreadline -lncurses $(EXTRA_HC_BOOT_LIBS)
a28 2
 ifeq "$(HaveLibDL)" "YES"
 HC_BOOT_LIBS += -ldl
@

