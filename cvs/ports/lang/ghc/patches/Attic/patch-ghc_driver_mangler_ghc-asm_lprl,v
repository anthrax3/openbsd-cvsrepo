head	1.8;
access;
symbols
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.2
	OPENBSD_3_4_BASE:1.3
	avsm_2003-May-29:1.1.1.1
	avsm:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2007.07.21.17.14.58;	author kili;	state dead;
branches;
next	1.7;

1.7
date	2005.02.19.03.42.11;	author dons;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.14.01.26.56;	author dons;	state dead;
branches;
next	1.5;

1.5
date	2004.04.26.23.48.50;	author dons;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.08.20.33.23;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.01.14.03.40;	author avsm;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.20.21.57.11;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.29.16.38.31;	author avsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.29.16.38.31;	author avsm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@
Update to 6.6.1. With helpful hints from Don Stewart and espie@@.
Thanks to all the testers and to steven@@, who was so kind to
build the HC files for bootstrapping on amd64.
@
text
@$OpenBSD: patch-ghc_driver_mangler_ghc-asm_lprl,v 1.7 2005/02/19 03:42:11 dons Exp $
How to pattern match amd64 asm.
--- ghc/driver/mangler/ghc-asm.lprl.orig	Thu Sep 16 02:29:49 2004
+++ ghc/driver/mangler/ghc-asm.lprl	Thu Feb 17 18:13:34 2005
@@@@ -230,7 +230,7 @@@@ sub init_TARGET_STUFF {
     $T_HDR_direct   = "\.text\n\t\.align 8\n";
 
     #--------------------------------------------------------#
-    } elsif ( $TargetPlatform =~ /^x86_64-.*-linux$/ ) {
+    } elsif ( $TargetPlatform =~ /^x86_64-.*-(linux|openbsd)$/ ) {
 
     $T_STABBY       = 0; # 1 iff .stab things (usually if a.out format)
     $T_US           = ''; # _ if symbols have an underscore on the front
@


1.7
log
@Port ghc-6.2.2 to amd64.

ok pvalchev@@
@
text
@d1 1
a1 1
$OpenBSD: patch-ghc_driver_mangler_ghc-asm_lprl,v 1.5 2004/04/26 23:48:50 dons Exp $
@


1.6
log
@Update ghc to 6.2.2.
Adds support for ghci. More stable foreign function interface.

Just i386 at the moment.

ok sturm@@ pvalchev@@
@
text
@d3 3
a5 3
--- ghc/driver/mangler/ghc-asm.lprl.orig	Sun Apr 18 05:37:46 2004
+++ ghc/driver/mangler/ghc-asm.lprl	Sun Apr 18 05:39:39 2004
@@@@ -230,7 +230,7 @@@@
@


1.5
log
@Update GHC to 6.2.1, and port to amd64

ok avsm@@ pvalchev@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@Add support for sparc ghc.
Hard work by Donald Stewart <dons at cse.unsw.edu.au>
@
text
@d1 6
a6 4
--- ghc/driver/mangler/ghc-asm.lprl.orig	Mon Jun 30 08:40:55 2003
+++ ghc/driver/mangler/ghc-asm.lprl	Sat Sep 20 18:49:19 2003
@@@@ -142,7 +142,7 @@@@
     $T_create_word  = "\t.word";
d9 2
a10 3
-    } elsif ( $TargetPlatform =~ /^i386-.*-(linuxaout|freebsd2|openbsd|nextstep3|cygwin32|mingw32)$/ ) {
+    } elsif ( $TargetPlatform =~ /^i386-.*-(linuxaout|freebsd2|nextstep3|cygwin32|mingw32)$/ ) {
 				# NeXT added but not tested. CaS
d12 2
a13 19
     $T_STABBY	    = 1; # 1 iff .stab things (usually if a.out format)
@@@@ -172,7 +172,7 @@@@
     $T_create_word  = "\t.word";
 
     #--------------------------------------------------------#
-    } elsif ( $TargetPlatform =~ /^i386-.*-(solaris2|linux|freebsd|netbsd)$/ ) {
+    } elsif ( $TargetPlatform =~ /^i386-.*-(solaris2|linux|freebsd|netbsd|openbsd)$/ ) {
 
     $T_STABBY	    = 0; # 1 iff .stab things (usually if a.out format)
     $T_US	    = ''; # _ if symbols have an underscore on the front
@@@@ -317,7 +317,7 @@@@
     $T_create_word  = "\t.long";
 
     #--------------------------------------------------------#
-    } elsif ( $TargetPlatform =~ /^sparc-.*-solaris2/ ) {
+    } elsif ( $TargetPlatform =~ /^sparc-.*-(solaris2|openbsd)/ ) {
 
     $T_STABBY	    = 0; # 1 iff .stab things (usually if a.out format)
     $T_US	    = ''; # _ if symbols have an underscore on the front
@


1.3
log
@RCS tags, from Xavier Santolaria <xavier@@santolaria.net>
@
text
@d1 2
a2 5
$OpenBSD$
ELF

--- ghc/driver/mangler/ghc-asm.lprl.orig	Fri Jul  4 10:55:44 2003
+++ ghc/driver/mangler/ghc-asm.lprl	Fri Jul  4 10:55:58 2003
d18 9
@


1.2
log
@Update from maintainer Don Stewart (dons at cse.unsw.edu.au):

- Updated to ghc-6.0
- Halved (roughly) the build time; by using the 6.0 in-tree build
we only have to build the 6.0 libraries once. Also we only build the
necessary parts of the bootstrap compiler.
- The ugly lndir/stage1 build is also gone.
- The full ghc regression suite is now part of the port!
"make regress" will run around 3000 regress tests.
- The regression tests revealed that the C foreign function
- The Makefile is simplified, using more default targets
- The documentation is updated to 6.0
- I put some of the 5.04.3 patches into ghc cvs, so they are
now obsolete.

Unfortunately, this lets mozilla back in the race for longest
package building time...
@
text
@d1 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
ELF x86 is here
d3 3
a5 4
$OpenBSD$
--- ghc/driver/mangler/ghc-asm.lprl.orig	Wed Apr 23 14:52:45 2003
+++ ghc/driver/mangler/ghc-asm.lprl	Wed Apr 23 14:53:18 2003
@@@@ -144,7 +144,7 @@@@ sub init_TARGET_STUFF {
d10 1
a10 1
+    } elsif ( $TargetPlatform =~ /^i386-.*-(linuxaout|freebsd2|openbsdaout|nextstep3|cygwin32|mingw32)$/ ) {
d14 1
a14 1
@@@@ -176,12 +176,12 @@@@ sub init_TARGET_STUFF {
a22 6
     $T_PRE_APP	    = # regexp that says what comes before APP/NO_APP
-		      ($TargetPlatform =~ /-(linux|freebsd|netbsd)$/) ? '#' : '/' ;
+		      ($TargetPlatform =~ /-(linux|freebsd|netbsd|openbsd)$/) ? '#' : '/' ;
     $T_CONST_LBL    = '^\.LC(\d+):$'; # regexp for what such a lbl looks like
     $T_POST_LBL	    = ':';
     $T_X86_PRE_LLBL_PAT = '\.L';
@


1.1.1.1
log
@initial import of ghc-5.04.3, which takes the "longest compilation
time" award from mozilla and gcc3

From Don Stewart <dons@@cse.unsw.edu.au> with tweaks from me

(i386 only for the moment)
--
The Glasgow Haskell Compiler is a robust, fully-featured, optimising
compiler for the functional programming language Haskell 98.

GHC compiles Haskell to either native code or C. It implements
numerous experimental language extensions to Haskell, including
concurrency, a foreign language interface, several type-system
extensions, exceptions, and so on. GHC comes with a generational
garbage collector, a space and time profiler, and a comprehensive
set of libraries.

@
text
@@
