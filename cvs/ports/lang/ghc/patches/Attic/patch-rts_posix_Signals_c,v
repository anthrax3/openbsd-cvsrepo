head	1.3;
access;
symbols
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2013.07.18.21.43.24;	author kili;	state dead;
branches;
next	1.2;

1.2
date	2012.09.02.19.53.46;	author kili;	state Exp;
branches;
next	1.1;

1.1
date	2011.12.27.20.53.01;	author kili;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to ghc-7.6.3, revert my last two obsolete changes and
mark it as broken until all depending ports have been updated.
@
text
@$OpenBSD: patch-rts_posix_Signals_c,v 1.2 2012/09/02 19:53:46 kili Exp $

There are several problems with the original code:

- It doesn't work with uthreads (instead of running the default
  handler, the custom handler is called again, which causes an
  endless cascade of signals once the process gets a SIGTSTP).

- It isn't posix compliant (sigprocmask(2) behaviour is unspecified for
  multithreaded processes, where you would have to use
  pthread_sigmask(3)).

- It's far too complicated compared to the simple kill(getpid(),
  SIGSTOP).

--- rts/posix/Signals.c.orig	Wed Feb  1 19:10:32 2012
+++ rts/posix/Signals.c	Sat Jun  9 21:36:25 2012
@@@@ -519,7 +519,7 @@@@ empty_handler (int sig STG_UNUSED)
 
    The trick we use is:
      - catch SIGTSTP
-     - in the handler,  kill(getpid(),SIGTSTP)
+     - in the handler,  kill(getpid(),SIGSTOP)
      - when this returns, restore the TTY settings
    This means we don't have to catch SIGCONT too.
 
@@@@ -541,17 +541,8 @@@@ sigtstp_handler (int sig)
         }
     }
 
-    // de-install the SIGTSTP handler
-    set_sigtstp_action(rtsFalse);
-
     // really stop the process now
-    {
-        sigset_t mask;
-        sigemptyset(&mask);
-        sigaddset(&mask, sig);
-        sigprocmask(SIG_UNBLOCK, &mask, NULL);
-        kill(getpid(), sig);
-    }
+    kill(getpid(), SIGSTOP);
 
     // on return, restore the TTY state
     for (fd = 0; fd <= 2; fd++) {
@@@@ -559,8 +550,6 @@@@ sigtstp_handler (int sig)
             tcsetattr(0,TCSANOW,&ts[fd]);
         }
     }
-
-    set_sigtstp_action(rtsTrue);
 }
 
 static void
@


1.2
log
@Update to ghc-7.4.2, but keep it marked as broken (and not only for amd64).

Most of the -nopie changes are from pascal@@ (thanks); I only had to
merge them for ghc-7.4 and tweak configure and mk/config.mk.in.
@
text
@d1 1
a1 1
$OpenBSD: patch-rts_posix_Signals_c,v 1.1 2011/12/27 20:53:01 kili Exp $
@


1.1
log
@Simplify the SIGTSTP handler to let it work with uthreads.

Suspending multithreaded programs built with ghc (including ghc
itself) should just work[tm] now. (Except for the bootstrapping
compiler which of course still uses the old code)
@
text
@d1 1
a1 1
$OpenBSD$
d16 3
a18 3
--- rts/posix/Signals.c.orig	Mon Jun 13 19:10:06 2011
+++ rts/posix/Signals.c	Tue Dec 27 19:58:52 2011
@@@@ -494,7 +494,7 @@@@ empty_handler (int sig STG_UNUSED)
d27 1
a27 1
@@@@ -516,17 +516,8 @@@@ sigtstp_handler (int sig)
d46 1
a46 1
@@@@ -534,8 +525,6 @@@@ sigtstp_handler (int sig)
@

