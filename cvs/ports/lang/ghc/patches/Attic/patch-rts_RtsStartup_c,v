head	1.4;
access;
symbols
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.1.0.12
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.10
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.8
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.6
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.4
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.2
	OPENBSD_4_2_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2011.04.11.14.30.33;	author kili;	state dead;
branches;
next	1.3;

1.3
date	2010.06.28.21.27.36;	author kili;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.22.21.49.37;	author kili;	state dead;
branches;
next	1.1;

1.1
date	2007.07.21.17.14.58;	author kili;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to 7.0.3.

ok jasper@@ (who also gave an ok to all the depending updates).
@
text
@$OpenBSD: patch-rts_RtsStartup_c,v 1.3 2010/06/28 21:27:36 kili Exp $

during shutdown, only free the heap if we waited for foreign calls to exit

From Simon Marlow.

--- rts/RtsStartup.c.orig	Wed Jun  9 20:10:13 2010
+++ rts/RtsStartup.c	Mon Jun 28 19:04:59 2010
@@@@ -440,8 +440,11 @@@@ hs_exit_(rtsBool wait_foreign)
     /* free hash table storage */
     exitHashTable();
 
-    // Finally, free all our storage
-    freeStorage();
+    // Finally, free all our storage.  However, we only free the heap
+    // memory if we have waited for foreign calls to complete;
+    // otherwise a foreign call in progress may still be referencing
+    // heap memory (e.g. by being passed a ByteArray#).
+    freeStorage(wait_foreign);
 
 #if defined(DEBUG)
     /* and shut down the allocator debugging */
@


1.3
log
@Threading support should work now (with a patch from Simon Marlow).
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@
Update to 6.12.2.

Many thanks to Darrin Chandler and dcoppa@@ for testing, reporting about
broken stuff, missing dependencies here and in ports depending on ghc.

Notes and rants:

- Bootstrapping is done using precompiled binaries, since .hc
  bootstrapping still doesn't work. I really hate this.

  THIS MEANS THAT GHC IS NOW AND WILL STAY LEGACY-ONLY (i386 and amd64)

  At least until someone fixes it. I tried for more than two year
  (well, only in my spare time and during my vacations) and failed.

- libgmp is currently disabled, because I didn't yet hack the GHC build
  system to use the system libgmp instead of the patched one included
  in GHC.

- The haddock ncluded in the ghc distfile is replaced by the version
  of haddock found in devel/haddock. Haddock itself is @@commented
  in the ghc PLIST. Unfortunately, this needs an ugly hack that
  introduces an otherwise useless pseudo flavor `no_deps' in
  devel/haddock.

- CLDouble has been removed from GHC some time ago, because it was
  an alias for double (AFAIK there's now support for long double
  in GHC). As this isn't a really big problem, it currently breaks
  c2hs, which I'll mark broken temporarily before committing the
  ghc update.

- The external codeset defaults to latin1 (suggested by Simon Marlow)
  and can be overridden by setting the HS_ENCODING to any codeset
  supported by libiconv.

- ghc.port.mk still needs some love, especially for letting a port add
  additional parameters to certain invocations of ${MODGHC_SETUP_PROG}.
@
text
@d1 11
a11 6
$OpenBSD: patch-rts_RtsStartup_c,v 1.1 2007/07/21 17:14:58 kili Exp $
--- rts/RtsStartup.c.orig	Wed Apr 25 19:10:41 2007
+++ rts/RtsStartup.c	Thu May 31 22:09:15 2007
@@@@ -180,9 +180,6 @@@@ hs_init(int *argc, char **argv[])
     synchroniseSystem();             // calls initParallelSystem etc
 #endif	/* PAR */
d13 10
a22 6
-    /* Perform initialisation of adjustor thunk layer. */
-    initAdjustor();
-
     /* initialise scheduler data structures (needs to be done before
      * initStorage()).
      */
@


1.1
log
@
Update to 6.6.1. With helpful hints from Don Stewart and espie@@.
Thanks to all the testers and to steven@@, who was so kind to
build the HC files for bootstrapping on amd64.
@
text
@d1 1
a1 1
$OpenBSD$
@

