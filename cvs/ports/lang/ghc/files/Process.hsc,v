head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.2
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2016.03.24.20.32.25;	author kili;	state Exp;
branches;
next	1.2;
commitid	04caNpCS3au9IvrB;

1.2
date	2016.03.15.19.41.18;	author kili;	state Exp;
branches;
next	1.1;
commitid	4B7GXr5MT49AMKGZ;

1.1
date	2016.01.20.16.02.06;	author kili;	state Exp;
branches;
next	;
commitid	YpqCy16gFI4KcWnR;


desc
@@


1.3
log
@Switch the manpage link for pledge(2) to man.openbsd.org.
@
text
@{-# LANGUAGE Safe #-}

module System.OpenBSD.Process ( pledge ) where

import Foreign
import Foreign.C
import System.Posix.Internals ( withFilePath )

-- | This function provides an interface to the OpenBSD
-- <http://man.openbsd.org/OpenBSD-current/man2/pledge.2 pledge(2)>
-- system call.
--
-- Passing 'Nothing' to the promises or paths arguments has the same
-- effect as passing NULL to the corresponding arguments of the system
-- call (i.e. not changing the current value).
pledge :: Maybe String -> Maybe [FilePath] -> IO ()

pledge promises paths =
  maybeWith withCString promises $ \cproms ->
  maybeWith withPaths2Array0 paths $ \paths_arr ->
  throwErrnoIfMinus1_ "pledge" (c_pledge cproms paths_arr)

withPaths2Array0 :: [FilePath] -> (Ptr (Ptr CChar) -> IO a) -> IO a

withPaths2Array0 paths f =
  withMany withFilePath paths $ \cstrs ->
  withArray0 nullPtr cstrs $ \paths_arr ->
  f paths_arr

foreign import ccall unsafe "unistd.h pledge"
  c_pledge :: CString -> Ptr CString -> IO CInt
@


1.2
log
@- Change the first argument to pledge (the promises) to Maybe String,
  following the recent change to pledge(2) (passing NULL doesn't change
  the value).

- Use maybeWith instead of pattern matching to distinguish between
  Nothing and Just x.

- Add some minimal documentation.
@
text
@d10 1
a10 1
-- <http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man2/pledge.2 pledge(2)>
@


1.1
log
@Add a module System.OpenBSD.Process to package unix with currently
only one function giving access to the pledge(2) system call:

pledge :: String -> Maybe [FilePath] -> IO ()

Help and testing by semarie@@ and abieber@@. Thanks!

No bump yet, because there'll be some more churn (so please wait a
little bit for other haskell commits before starting to build it).
@
text
@d9 8
a16 1
pledge :: String -> Maybe [FilePath] -> IO ()
d19 2
a20 2
  withCString promises $ \cproms ->
  withPaths2Array0 paths $ \paths_arr ->
d23 1
a23 1
withPaths2Array0 :: Maybe [FilePath] -> (Ptr (Ptr CChar) -> IO a) -> IO a
d25 1
a25 3
withPaths2Array0 Nothing f = f nullPtr

withPaths2Array0 (Just paths) f =
@

