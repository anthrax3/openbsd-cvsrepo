head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.24
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.20
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.18
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.16
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.14
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.12
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.10
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.8
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.6
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.4
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.2
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.1.0.2
	OPENBSD_4_1_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2016.01.20.16.08.30;	author kili;	state dead;
branches;
next	1.3;
commitid	dVemMaWAPoSnSCqs;

1.3
date	2010.04.22.21.49.37;	author kili;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.21.17.14.58;	author kili;	state Exp;
branches;
next	1.1;

1.1
date	2006.11.26.11.38.07;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge -main and -doc subpackages.
@
text
@The Glasgow Haskell Compiler is a state-of-the-art, open source, compiler and
interactive environment for the functional language Haskell. Highlights:

   * GHC supports the entire Haskell 98 language plus a wide variety of
     extensions.
   * GHC works on several platforms including Windows and a few varieties of
     Unix, and a few different processor architectures. There are detailed
     instructions for porting GHC to a new platform. Which doesn't work.
   * GHC has extensive optimisation capabilities, including inter-module
     optimisation.
   * GHC compiles Haskell code either by using an intermediate C compiler
     (GCC), or by generating native code on most currently supported
     platforms. The interactive environment compiles Haskell to
     bytecode, and supports execution of mixed bytecode/compiled
     programs.
   * Profiling is supported, both by time/allocation and various kinds of
     heap profiling.
   * GHC comes with a minimal range of libraries, but a wide range of
     additional libraries are available as separate packages, including
     the full set of the Haskell Platform.
@


1.3
log
@
Update to 6.12.2.

Many thanks to Darrin Chandler and dcoppa@@ for testing, reporting about
broken stuff, missing dependencies here and in ports depending on ghc.

Notes and rants:

- Bootstrapping is done using precompiled binaries, since .hc
  bootstrapping still doesn't work. I really hate this.

  THIS MEANS THAT GHC IS NOW AND WILL STAY LEGACY-ONLY (i386 and amd64)

  At least until someone fixes it. I tried for more than two year
  (well, only in my spare time and during my vacations) and failed.

- libgmp is currently disabled, because I didn't yet hack the GHC build
  system to use the system libgmp instead of the patched one included
  in GHC.

- The haddock ncluded in the ghc distfile is replaced by the version
  of haddock found in devel/haddock. Haddock itself is @@commented
  in the ghc PLIST. Unfortunately, this needs an ugly hack that
  introduces an otherwise useless pseudo flavor `no_deps' in
  devel/haddock.

- CLDouble has been removed from GHC some time ago, because it was
  an alias for double (AFAIK there's now support for long double
  in GHC). As this isn't a really big problem, it currently breaks
  c2hs, which I'll mark broken temporarily before committing the
  ghc update.

- The external codeset defaults to latin1 (suggested by Simon Marlow)
  and can be overridden by setting the HS_ENCODING to any codeset
  supported by libiconv.

- ghc.port.mk still needs some love, especially for letting a port add
  additional parameters to certain invocations of ${MODGHC_SETUP_PROG}.
@
text
@@


1.2
log
@
Update to 6.6.1. With helpful hints from Don Stewart and espie@@.
Thanks to all the testers and to steven@@, who was so kind to
build the HC files for bootstrapping on amd64.
@
text
@d6 10
a15 9
   * GHC works on several platforms including Windows and most varieties of
     Unix, and several different processor architectures. There are detailed
     instructions for porting GHC to a new platform.                         
   * GHC has extensive optimisation capabilities, including inter-module     
     optimisation.                   
   * GHC compiles Haskell code either by using an intermediate C compiler 
     (GCC), or by generating native code on some platforms. The interactive
     environment compiles Haskell to bytecode, and supports execution of
     mixed bytecode/compiled programs.
d17 4
a20 9
     heap profiling.                                                         
   * GHC comes with a wide range of libraries.

The following flavors are available:

- native_bootstrap (PSEUDO_FLAVOR):
        Use an already installed ghc for bootstrapping (default is
        to boot from .hc files). If there's no preinstalled GHC, this
	may lead to GHC being built twice!
@


1.1
log
@new MULTI_PACKAGES. patch from kili, committing so we're finished...
@
text
@d18 7
@

