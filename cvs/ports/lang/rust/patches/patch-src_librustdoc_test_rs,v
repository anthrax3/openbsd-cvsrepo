head	1.9;
access;
symbols
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2;
locks; strict;
comment	@# @;


1.9
date	2017.07.31.13.38.58;	author danj;	state Exp;
branches;
next	1.8;
commitid	mSQyFt8dcwBjhiJ7;

1.8
date	2017.03.27.12.35.31;	author danj;	state dead;
branches;
next	1.7;
commitid	fQL63Mj4gEKu4BvX;

1.7
date	2017.02.15.12.52.35;	author landry;	state Exp;
branches;
next	1.6;
commitid	NM74A8PX4zxQ5FFL;

1.6
date	2016.12.26.13.52.46;	author landry;	state Exp;
branches;
next	1.5;
commitid	iU6h7FSgPqiZKnfv;

1.5
date	2016.11.12.16.42.24;	author danj;	state Exp;
branches;
next	1.4;
commitid	cBPPfooKD474cfpO;

1.4
date	2016.10.25.17.08.07;	author danj;	state Exp;
branches;
next	1.3;
commitid	CaXMwV9awx6WTFqu;

1.3
date	2016.08.31.08.33.19;	author landry;	state Exp;
branches;
next	1.2;
commitid	rjCKCwuvdXGdhOcu;

1.2
date	2016.06.09.04.20.10;	author semarie;	state Exp;
branches;
next	1.1;
commitid	9ZDpi3B5rLvhZnQP;

1.1
date	2016.05.25.06.39.35;	author semarie;	state Exp;
branches;
next	;
commitid	MXspGwnScCXVczTc;


desc
@@


1.9
log
@I forgot to cvs add, thanks semarie for reviewing my commits!
@
text
@$OpenBSD$
fallback to LOCALBASE as default sysroot.
Index: src/librustdoc/test.rs
--- src/librustdoc/test.rs.orig
+++ src/librustdoc/test.rs
@@@@ -67,7 +67,10 @@@@ pub fn run(input: &str,
 
     let sessopts = config::Options {
         maybe_sysroot: maybe_sysroot.clone().or_else(
-            || Some(env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_path_buf())),
+            || match option_env!("LOCALBASE") {
+                Some(dir) => return Some(PathBuf::from(dir)),
+                None => panic!("can't determine value for sysroot"),
+            }),
         search_paths: libs.clone(),
         crate_types: vec![config::CrateTypeDylib],
         externs: externs.clone(),
@@@@ -183,7 +186,10 @@@@ fn runtest(test: &str, cratename: &str, cfgs: Vec<Stri
 
     let sessopts = config::Options {
         maybe_sysroot: maybe_sysroot.or_else(
-            || Some(env::current_exe().unwrap().parent().unwrap().parent().unwrap().to_path_buf())),
+            || match option_env!("LOCALBASE") {
+                Some(dir) => return Some(PathBuf::from(dir)),
+                None => panic!("can't determine value for sysroot"),
+            }),
         search_paths: libs,
         crate_types: vec![config::CrateTypeExecutable],
         output_types: outputs,
@


1.8
log
@Update to rust-1.16.0

From semarie, discussed with edd@@ and landry@@
ok edd@@ landry@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_librustdoc_test_rs,v 1.7 2017/02/15 12:52:35 landry Exp $
d3 4
a6 5
--- src/librustdoc/test.rs.orig	Fri Jan 20 21:38:38 2017
+++ src/librustdoc/test.rs	Mon Jan 30 20:13:43 2017
@@@@ -59,9 +59,16 @@@@ pub fn run(input: &str,
     let input_path = PathBuf::from(input);
     let input = config::Input::File(input_path.clone());
a7 8
+    let sysroot = match env::current_exe().ok() {
+        Some(mut p) => { p.pop(); p.pop(); p }
+        None => match option_env!("LOCALBASE") {
+            Some(dir) => PathBuf::from(dir),
+            None => panic!("can't determine value for sysroot"),
+        }
+    };
+
d9 6
a14 3
-        maybe_sysroot: Some(env::current_exe().unwrap().parent().unwrap()
-                                              .parent().unwrap().to_path_buf()),
+        maybe_sysroot: Some(sysroot),
d18 1
a18 3
@@@@ -167,9 +174,16 @@@@ fn runtest(test: &str, cratename: &str, cfgs: Vec<Stri
     };
     let outputs = OutputTypes::new(&[(OutputType::Exe, None)]);
a19 8
+    let sysroot = match env::current_exe().ok() {
+        Some(mut p) => { p.pop(); p.pop(); p }
+        None => match option_env!("LOCALBASE") {
+            Some(dir) => PathBuf::from(dir),
+            None => panic!("can't determine value for sysroot"),
+        }
+    };
+
d21 6
a26 3
-        maybe_sysroot: Some(env::current_exe().unwrap().parent().unwrap()
-                                              .parent().unwrap().to_path_buf()),
+        maybe_sysroot: Some(sysroot),
@


1.7
log
@Update to rust 1.15.1.

- switch to rustbuild build system instead of configure (the world
  definitely needed one more build system!)
- the build still takes +INF hours, this is being investigated

Note that rust will be a hard-requirement for gecko 54... sigh.

Tested by semarie@@ and myself on i386 & amd64.

All the hard work and countless build hours by semarie@@, thanks!
@
text
@d1 1
a1 1
$OpenBSD: patch-src_librustdoc_test_rs,v 1.6 2016/12/26 13:52:46 landry Exp $
@


1.6
log
@update rust to 1.14.0, from MAINTAINER semarie@@

for details, please see https://blog.rust-lang.org/2016/12/22/Rust-1.14.html

tested on i386 w/ llvm 3.9.0 here, and sebastien tested both amd64 & i386.
@
text
@d1 5
a5 5
$OpenBSD: patch-src_librustdoc_test_rs,v 1.5 2016/11/12 16:42:24 danj Exp $
fallback to CFG_PREFIX as default sysroot.
--- src/librustdoc/test.rs.orig	Sun Dec 18 00:40:11 2016
+++ src/librustdoc/test.rs	Wed Dec 21 11:18:23 2016
@@@@ -62,9 +62,16 @@@@ pub fn run(input: &str,
d11 1
a11 1
+        None => match option_env!("CFG_PREFIX") {
d24 1
a24 1
@@@@ -181,9 +188,16 @@@@ fn runtest(test: &str, cratename: &str, cfgs: Vec<Stri
d30 1
a30 1
+        None => match option_env!("CFG_PREFIX") {
@


1.5
log
@Update to rust-1.13.0, from semarie who takes maintainership again

ok aja@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_librustdoc_test_rs,v 1.4 2016/10/25 17:08:07 danj Exp $
d3 2
a4 2
--- src/librustdoc/test.rs.orig	Tue Nov  8 04:16:18 2016
+++ src/librustdoc/test.rs	Fri Nov 11 11:09:36 2016
d22 1
a22 1
         crate_types: vec!(config::CrateTypeDylib),
d24 1
a24 1
@@@@ -185,9 +192,16 @@@@ fn runtest(test: &str, cratename: &str, cfgs: Vec<Stri
d41 1
a41 1
         crate_types: vec!(config::CrateTypeExecutable),
@


1.4
log
@Update to rust-1.12.1

For release note see https://blog.rust-lang.org/2016/10/20/Rust-1.12.1.html

Please note, semarie rebuilded the bootstrap due to a bug in rustc: 1.12.0
wasn't able to rebuild 1.12.1 without intrusive patches in the build system

From semarie, ok ajacoutot
@
text
@d1 1
a1 1
$OpenBSD: patch-src_librustdoc_test_rs,v 1.3 2016/08/31 08:33:19 landry Exp $
d3 3
a5 3
--- src/librustdoc/test.rs.orig	Wed Oct 19 23:51:02 2016
+++ src/librustdoc/test.rs	Sat Oct 22 15:28:15 2016
@@@@ -63,9 +63,16 @@@@ pub fn run(input: &str,
d24 1
a24 1
@@@@ -184,9 +191,16 @@@@ fn runtest(test: &str, cratename: &str, cfgs: Vec<Stri
@


1.3
log
@Update to rust 1.11.0, from semarie@@, thanks!
All tests passing here.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_librustdoc_test_rs,v 1.2 2016/06/09 04:20:10 semarie Exp $
d3 2
a4 2
--- src/librustdoc/test.rs.orig	Tue Aug 16 03:54:35 2016
+++ src/librustdoc/test.rs	Fri Aug 19 06:40:11 2016
d24 3
a26 3
@@@@ -187,9 +194,16 @@@@ fn runtest(test: &str, cratename: &str, cfgs: Vec<Stri
     let mut outputs = HashMap::new();
     outputs.insert(OutputType::Exe, None);
@


1.2
log
@lang/rust: change bootstrap method

OK juanfra@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_librustdoc_test_rs,v 1.1 2016/05/25 06:39:35 semarie Exp $
d3 3
a5 3
--- src/librustdoc/test.rs.orig	Mon May 23 18:29:00 2016
+++ src/librustdoc/test.rs	Tue Jun  7 17:36:10 2016
@@@@ -62,9 +62,16 @@@@ pub fn run(input: &str,
@


1.1
log
@lang/rust: fallback to LOCALBASE for sysroot

- std::env::current_exe() returns an error instead of returning wrong
  pathname (no complete, but rust build scripts makes (bad)
  assumptions that I couldn't patch for now).

- rustc / rustdoc to use CFG_PREFIX (configure --prefix value) when
  std::env::current_exe() return an error

- remove the installed wrapper used to pass --sysroot argument to
  rustc (the wrapper was used for workaround the problem differently
  for rustc, but didn't resolv the problem for rustdoc as it doesn't
  have --sysroot argument).

looks ok edd@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 3
a5 3
--- src/librustdoc/test.rs.orig	Mon Apr 11 23:22:04 2016
+++ src/librustdoc/test.rs	Mon May 16 21:01:26 2016
@@@@ -64,9 +64,16 @@@@ pub fn run(input: &str,
@

