head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2017.02.15.12.52.35;	author landry;	state Exp;
branches;
next	1.1;
commitid	NM74A8PX4zxQ5FFL;

1.1
date	2017.02.02.08.02.50;	author landry;	state Exp;
branches;
next	;
commitid	yNH1Zudd7906Mr5F;


desc
@@


1.2
log
@Update to rust 1.15.1.

- switch to rustbuild build system instead of configure (the world
  definitely needed one more build system!)
- the build still takes +INF hours, this is being investigated

Note that rust will be a hard-requirement for gecko 54... sigh.

Tested by semarie@@ and myself on i386 & amd64.

All the hard work and countless build hours by semarie@@, thanks!
@
text
@$OpenBSD: patch-src_llvm_lib_CodeGen_TargetLoweringBase_cpp,v 1.1 2017/02/02 08:02:50 landry Exp $
https://github.com/llvm-mirror/llvm/commit/06e3fec531cb51bd6bfdc0171dd2676be355e76b
--- src/llvm/lib/CodeGen/TargetLoweringBase.cpp.orig	Sun Jan 29 09:06:57 2017
+++ src/llvm/lib/CodeGen/TargetLoweringBase.cpp	Sun Jan 29 09:07:29 2017
@@@@ -1818,9 +1818,7 @@@@ Value *TargetLoweringBase::getIRStackGuard(IRBuilder<>
   if (getTargetMachine().getTargetTriple().isOSOpenBSD()) {
     Module &M = *IRB.GetInsertBlock()->getParent()->getParent();
     PointerType *PtrTy = Type::getInt8PtrTy(M.getContext());
-    auto Guard = cast<GlobalValue>(M.getOrInsertGlobal("__guard_local", PtrTy));
-    Guard->setVisibility(GlobalValue::HiddenVisibility);
-    return Guard;
+    return M.getOrInsertGlobal("__guard_local", PtrTy);
   }
   return nullptr;
 }
@


1.1
log
@Temporarly switch rust to build with embedded llvm.

rust doesnt build yet with llvm 4.0, which should be soon updated in the
portstree. Upstream rust support for llvm 4.0 is in the pipe.

From semarie@@
@
text
@d1 2
a2 1
$OpenBSD$
@

