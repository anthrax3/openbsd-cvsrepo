head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.2
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2017.09.03.14.08.36;	author danj;	state Exp;
branches;
next	1.5;
commitid	FGzWCG52SQvSCScl;

1.5
date	2017.07.31.13.19.13;	author danj;	state Exp;
branches;
next	1.4;
commitid	Lhxz2MNPfiKEauR6;

1.4
date	2017.06.17.02.06.53;	author danj;	state Exp;
branches;
next	1.3;
commitid	hI8KpqsP1qgu63cc;

1.3
date	2017.05.05.11.40.29;	author landry;	state Exp;
branches;
next	1.2;
commitid	Vk0ki6dvK3m2aqtF;

1.2
date	2017.03.27.12.35.31;	author danj;	state Exp;
branches;
next	1.1;
commitid	fQL63Mj4gEKu4BvX;

1.1
date	2017.02.18.13.15.48;	author landry;	state Exp;
branches;
next	;
commitid	AZXHUw4YJRarl1Z6;


desc
@@


1.6
log
@Update to rust-1.20.0

From semarie (devoted maintainer)
@
text
@$OpenBSD: patch-src_bootstrap_lib_rs,v 1.5 2017/07/31 13:19:13 danj Exp $
Let us compilation choice to be honored.
Index: src/bootstrap/lib.rs
--- src/bootstrap/lib.rs.orig
+++ src/bootstrap/lib.rs
@@@@ -857,7 +857,6 @@@@ impl Build {
         // gcc-rs because the build scripts will determine that for themselves.
         let mut base = self.cc[target].0.args().iter()
                            .map(|s| s.to_string_lossy().into_owned())
-                           .filter(|s| !s.starts_with("-O") && !s.starts_with("/O"))
                            .collect::<Vec<_>>();
 
         // If we're compiling on macOS then we add a few unconditional flags
@


1.5
log
@Update to rust-1.19.0

It now includes cargo

From semarie (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_bootstrap_lib_rs,v 1.4 2017/06/17 02:06:53 danj Exp $
d6 1
a6 1
@@@@ -828,7 +828,6 @@@@ impl Build {
@


1.4
log
@Update to rust-1.18.0

From semarie (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_bootstrap_lib_rs,v 1.3 2017/05/05 11:40:29 landry Exp $
d6 1
a6 1
@@@@ -872,7 +872,6 @@@@ impl Build {
@


1.3
log
@Update to rust 1.17.0, from semarie@@

Use ports llvm instead of building the bundled copy (yay!)
More work needed to actually build with clang ...
@
text
@d1 1
a1 1
$OpenBSD: patch-src_bootstrap_lib_rs,v 1.2 2017/03/27 12:35:31 danj Exp $
d3 4
a6 3
--- src/bootstrap/lib.rs.orig	Mon Apr 24 20:53:45 2017
+++ src/bootstrap/lib.rs	Wed Apr 26 08:43:00 2017
@@@@ -848,7 +848,6 @@@@ impl Build {
d13 1
a13 1
         // If we're compiling on OSX then we add a few unconditional flags
@


1.2
log
@Update to rust-1.16.0

From semarie, discussed with edd@@ and landry@@
ok edd@@ landry@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_bootstrap_lib_rs,v 1.1 2017/02/18 13:15:48 landry Exp $
d3 3
a5 3
--- src/bootstrap/lib.rs.orig	Fri Mar 10 23:55:21 2017
+++ src/bootstrap/lib.rs	Sun Mar 12 07:15:33 2017
@@@@ -822,7 +822,6 @@@@ impl Build {
@


1.1
log
@Divide build time by at least three and various fixes, all from semarie@@

- stop pruning optimizations coming from the environment (ie OpenBSD's
  default -O2 -pipe) when building llvm - this resulted in a very slow
llvm, and in a veeery slow rust build, and an awfully slow rust
compiler. Yay. See https://github.com/rust-lang/rust/issues/39900
- only add cmake to BDEP when rustc is compiled with bundled llvm
- propagate verbose cmake flag to bundled llvm build

tested on i386 and amd64
@
text
@d1 1
a1 1
$OpenBSD$
d3 3
a5 3
--- src/bootstrap/lib.rs.orig	Thu Feb 16 12:26:21 2017
+++ src/bootstrap/lib.rs	Thu Feb 16 12:26:27 2017
@@@@ -791,7 +791,6 @@@@ impl Build {
@

