head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2017.03.27.12.35.31;	author danj;	state Exp;
branches;
next	1.1;
commitid	fQL63Mj4gEKu4BvX;

1.1
date	2017.02.18.13.15.48;	author landry;	state Exp;
branches;
next	;
commitid	AZXHUw4YJRarl1Z6;


desc
@@


1.2
log
@Update to rust-1.16.0

From semarie, discussed with edd@@ and landry@@
ok edd@@ landry@@
@
text
@$OpenBSD: patch-src_bootstrap_lib_rs,v 1.1 2017/02/18 13:15:48 landry Exp $
Let us compilation choice to be honored.
--- src/bootstrap/lib.rs.orig	Fri Mar 10 23:55:21 2017
+++ src/bootstrap/lib.rs	Sun Mar 12 07:15:33 2017
@@@@ -822,7 +822,6 @@@@ impl Build {
         // gcc-rs because the build scripts will determine that for themselves.
         let mut base = self.cc[target].0.args().iter()
                            .map(|s| s.to_string_lossy().into_owned())
-                           .filter(|s| !s.starts_with("-O") && !s.starts_with("/O"))
                            .collect::<Vec<_>>();
 
         // If we're compiling on OSX then we add a few unconditional flags
@


1.1
log
@Divide build time by at least three and various fixes, all from semarie@@

- stop pruning optimizations coming from the environment (ie OpenBSD's
  default -O2 -pipe) when building llvm - this resulted in a very slow
llvm, and in a veeery slow rust build, and an awfully slow rust
compiler. Yay. See https://github.com/rust-lang/rust/issues/39900
- only add cmake to BDEP when rustc is compiled with bundled llvm
- propagate verbose cmake flag to bundled llvm build

tested on i386 and amd64
@
text
@d1 1
a1 1
$OpenBSD$
d3 3
a5 3
--- src/bootstrap/lib.rs.orig	Thu Feb 16 12:26:21 2017
+++ src/bootstrap/lib.rs	Thu Feb 16 12:26:27 2017
@@@@ -791,7 +791,6 @@@@ impl Build {
@

