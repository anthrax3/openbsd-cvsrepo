head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2017.02.15.12.52.35;	author landry;	state dead;
branches;
next	1.2;
commitid	NM74A8PX4zxQ5FFL;

1.2
date	2016.12.26.13.52.46;	author landry;	state Exp;
branches;
next	1.1;
commitid	iU6h7FSgPqiZKnfv;

1.1
date	2016.12.06.22.39.49;	author juanfra;	state Exp;
branches;
next	;
commitid	6fv4mpjJ9hzcRB7g;


desc
@@


1.3
log
@Update to rust 1.15.1.

- switch to rustbuild build system instead of configure (the world
  definitely needed one more build system!)
- the build still takes +INF hours, this is being investigated

Note that rust will be a hard-requirement for gecko 54... sigh.

Tested by semarie@@ and myself on i386 & amd64.

All the hard work and countless build hours by semarie@@, thanks!
@
text
@$OpenBSD: patch-src_librustc_back_target_mod_rs,v 1.2 2016/12/26 13:52:46 landry Exp $
Add i686-unknown-openbsd target.
https://github.com/rust-lang/rust/pull/38086
--- src/librustc_back/target/mod.rs.orig	Sun Dec 18 00:40:11 2016
+++ src/librustc_back/target/mod.rs	Wed Dec 21 11:18:23 2016
@@@@ -167,7 +167,10 @@@@ supported_targets! {
     ("x86_64-unknown-dragonfly", x86_64_unknown_dragonfly),
 
     ("x86_64-unknown-bitrig", x86_64_unknown_bitrig),
+
+    ("i686-unknown-openbsd", i686_unknown_openbsd),
     ("x86_64-unknown-openbsd", x86_64_unknown_openbsd),
+
     ("x86_64-unknown-netbsd", x86_64_unknown_netbsd),
     ("x86_64-rumprun-netbsd", x86_64_rumprun_netbsd),
 
@@@@ -298,6 +301,9 @@@@ pub struct TargetOptions {
     pub staticlib_suffix: String,
     /// OS family to use for conditional compilation. Valid options: "unix", "windows".
     pub target_family: Option<String>,
+    /// Whether the target toolchain is like OpenBSD's.
+    /// Only useful for compiling against OpenBSD, for configuring abi when returning a struct.
+    pub is_like_openbsd: bool,
     /// Whether the target toolchain is like OSX's. Only useful for compiling against iOS/OS X, in
     /// particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.
     pub is_like_osx: bool,
@@@@ -394,6 +400,7 @@@@ impl Default for TargetOptions {
             staticlib_prefix: "lib".to_string(),
             staticlib_suffix: ".a".to_string(),
             target_family: None,
+            is_like_openbsd: false,
             is_like_osx: false,
             is_like_solaris: false,
             is_like_windows: false,
@@@@ -558,6 +565,7 @@@@ impl Target {
         key!(staticlib_prefix);
         key!(staticlib_suffix);
         key!(target_family, optional);
+        key!(is_like_openbsd, bool);
         key!(is_like_osx, bool);
         key!(is_like_solaris, bool);
         key!(is_like_windows, bool);
@@@@ -717,6 +725,7 @@@@ impl ToJson for Target {
         target_option_val!(staticlib_prefix);
         target_option_val!(staticlib_suffix);
         target_option_val!(target_family);
+        target_option_val!(is_like_openbsd);
         target_option_val!(is_like_osx);
         target_option_val!(is_like_solaris);
         target_option_val!(is_like_windows);
@


1.2
log
@update rust to 1.14.0, from MAINTAINER semarie@@

for details, please see https://blog.rust-lang.org/2016/12/22/Rust-1.14.html

tested on i386 w/ llvm 3.9.0 here, and sebastien tested both amd64 & i386.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_librustc_back_target_mod_rs,v 1.1 2016/12/06 22:39:49 juanfra Exp $
@


1.1
log
@Add support for i386 to rust. From semarie (MAINTAINER).
@
text
@d1 1
a1 1
$OpenBSD$
d4 3
a6 3
--- src/librustc_back/target/mod.rs.orig	Tue Nov  8 04:16:18 2016
+++ src/librustc_back/target/mod.rs	Sun Dec  4 06:59:16 2016
@@@@ -162,7 +162,10 @@@@ supported_targets! {
d17 1
a17 1
@@@@ -284,6 +287,9 @@@@ pub struct TargetOptions {
d27 1
a27 1
@@@@ -374,6 +380,7 @@@@ impl Default for TargetOptions {
d35 1
a35 1
@@@@ -516,6 +523,7 @@@@ impl Target {
d43 1
a43 1
@@@@ -658,6 +666,7 @@@@ impl ToJson for Target {
@

