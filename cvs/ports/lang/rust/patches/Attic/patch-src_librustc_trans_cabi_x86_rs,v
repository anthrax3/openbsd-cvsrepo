head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2017.02.15.12.52.35;	author landry;	state dead;
branches;
next	1.1;
commitid	NM74A8PX4zxQ5FFL;

1.1
date	2016.12.06.22.39.49;	author juanfra;	state Exp;
branches;
next	;
commitid	6fv4mpjJ9hzcRB7g;


desc
@@


1.2
log
@Update to rust 1.15.1.

- switch to rustbuild build system instead of configure (the world
  definitely needed one more build system!)
- the build still takes +INF hours, this is being investigated

Note that rust will be a hard-requirement for gecko 54... sigh.

Tested by semarie@@ and myself on i386 & amd64.

All the hard work and countless build hours by semarie@@, thanks!
@
text
@$OpenBSD: patch-src_librustc_trans_cabi_x86_rs,v 1.1 2016/12/06 22:39:49 juanfra Exp $
Add i686-unknown-openbsd target.
https://github.com/rust-lang/rust/pull/38086
--- src/librustc_trans/cabi_x86.rs.orig	Sun Dec  4 07:00:09 2016
+++ src/librustc_trans/cabi_x86.rs	Sun Dec  4 07:00:43 2016
@@@@ -25,7 +25,8 @@@@ pub fn compute_abi_info(ccx: &CrateContext, fty: &mut 
             // http://www.angelcode.com/dev/callconv/callconv.html
             // Clang's ABI handling is in lib/CodeGen/TargetInfo.cpp
             let t = &ccx.sess().target.target;
-            if t.options.is_like_osx || t.options.is_like_windows {
+            if t.options.is_like_osx || t.options.is_like_windows
+                || t.options.is_like_openbsd {
                 match llsize_of_alloc(ccx, fty.ret.ty) {
                     1 => fty.ret.cast = Some(Type::i8(ccx)),
                     2 => fty.ret.cast = Some(Type::i16(ccx)),
@


1.1
log
@Add support for i386 to rust. From semarie (MAINTAINER).
@
text
@d1 1
a1 1
$OpenBSD$
@

