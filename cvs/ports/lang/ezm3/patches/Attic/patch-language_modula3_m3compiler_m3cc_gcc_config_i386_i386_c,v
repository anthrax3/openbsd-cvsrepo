head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.26
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.24
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.22
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.20
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.18
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.16
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.14
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.1.1.1.0.8
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.6
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.4
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.2
	OPENBSD_3_1_BASE:1.1.1.1
	naddy_20020223:1.1.1.1
	naddy:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2013.03.18.20.01.14;	author naddy;	state dead;
branches;
next	1.3;

1.3
date	2010.05.12.07.38.49;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.04.18.04.28;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2002.02.23.12.30.18;	author naddy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.02.23.12.30.18;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove ezm3.  It's only purpose was to provide a minimal Modula-3
system for cvsup, and it won't survive the 5.3->5.4 API changes
anyway.  ok sthen@@
@
text
@$OpenBSD: patch-language_modula3_m3compiler_m3cc_gcc_config_i386_i386_c,v 1.3 2010/05/12 07:38:49 espie Exp $
--- language/modula3/m3compiler/m3cc/gcc/config/i386/i386.c.orig	Fri Nov 24 22:21:19 2000
+++ language/modula3/m3compiler/m3cc/gcc/config/i386/i386.c	Tue May 11 21:08:26 2010
@@@@ -1785,7 +1785,7 @@@@ function_prologue (file, size)
       xops[1] = pic_label_rtx;
 
       output_asm_insn (AS1 (call,%P1), xops);
-      output_asm_insn ("addl $_GLOBAL_OFFSET_TABLE_,%0", xops);
+      output_asm_insn ("addl $%__GLOBAL_OFFSET_TABLE_,%0", xops);
     }
   else if (pic_reg_used)
     {
@@@@ -1795,7 +1795,7 @@@@ function_prologue (file, size)
       output_asm_insn (AS1 (call,%P1), xops);
       ASM_OUTPUT_INTERNAL_LABEL (file, "L", CODE_LABEL_NUMBER (xops[1]));
       output_asm_insn (AS1 (pop%L0,%0), xops);
-      output_asm_insn ("addl $_GLOBAL_OFFSET_TABLE_+[.-%P1],%0", xops);
+      output_asm_insn ("addl $%__GLOBAL_OFFSET_TABLE_+[.-%P1],%0", xops);
   } 
 }
 
@@@@ -1893,7 +1893,11 @@@@ ix86_expand_prologue ()
 
       emit_insn (gen_prologue_get_pc (xops[0], gen_rtx (CONST_INT, Pmode, CODE_LABEL_NUMBER(xops[1]))));
       emit_insn (gen_prologue_set_got (xops[0], 
+#ifdef YES_UNDERSCORES
+		 gen_rtx (SYMBOL_REF, Pmode, "$__GLOBAL_OFFSET_TABLE_"), 
+#else
 		 gen_rtx (SYMBOL_REF, Pmode, "$_GLOBAL_OFFSET_TABLE_"), 
+#endif
 		 gen_rtx (CONST_INT, Pmode, CODE_LABEL_NUMBER(xops[1]))));
     }
   else if (pic_reg_used)
@@@@ -1904,7 +1908,11 @@@@ ix86_expand_prologue ()
       emit_insn (gen_prologue_get_pc (xops[0], gen_rtx (CONST_INT, Pmode, CODE_LABEL_NUMBER(xops[1]))));
       emit_insn (gen_pop (xops[0]));
       emit_insn (gen_prologue_set_got (xops[0], 
+#ifdef YES_UNDERSCORES
+		 gen_rtx (SYMBOL_REF, Pmode, "$__GLOBAL_OFFSET_TABLE_"), 
+#else
 		 gen_rtx (SYMBOL_REF, Pmode, "$_GLOBAL_OFFSET_TABLE_"), 
+#endif
 		 gen_rtx (CONST_INT, Pmode, CODE_LABEL_NUMBER (xops[1]))));
   } 
 }
@@@@ -2805,6 +2813,12 @@@@ print_operand (file, x, code)
 	case '*':
 	  if (USE_STAR)
 	    putc ('*', file);
+	  return;
+
+	case '_':
+#ifdef YES_UNDERSCORES
+	  putc ('_', file);
+#endif
 	  return;
 
 	case 'L':
@


1.3
log
@fixes for gcc4:
- obstack.h uses casts as lvalues, fix those
- hack standard includes to avoid tons of strlen/malloc warnings (may
even fix bootstrap on other things than i386)
- remove non-standard assert.h that requires an eprintf in libgcc.
- bump pkgname, just in case...

verified to work with both gcc3 and gcc4.
@
text
@d1 1
a1 1
$OpenBSD: patch-language_modula3_m3compiler_m3cc_gcc_config_i386_i386_c,v 1.2 2004/01/04 18:04:28 espie Exp $
@


1.2
log
@kill varargs, restore build with gcc3
@
text
@d1 3
a3 3
$OpenBSD: patch-language_modula3_m3compiler_m3cc_gcc_config_i386_i386_c,v 1.1.1.1 2002/02/23 12:30:18 naddy Exp $
--- language/modula3/m3compiler/m3cc/gcc/config/i386/i386.c.orig	2000-11-24 22:21:19.000000000 +0100
+++ language/modula3/m3compiler/m3cc/gcc/config/i386/i386.c	2004-01-04 18:27:05.000000000 +0100
d46 3
a48 1
@@@@ -2807,6 +2815,12 @@@@ print_operand (file, x, code)
d50 2
a51 2
 	  return;
 
d56 2
a57 2
+	  return;
+
a58 2
 	  PUT_OP_SIZE (code, 'l', file);
 	  return;
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD: patch-language_modula3_m3compiler_m3cc_gcc_config_i386_i386_c,v 1.1 2001/09/07 16:47:23 espie Exp $
--- language/modula3/m3compiler/m3cc/gcc/config/i386/i386.c.orig	Thu Feb  6 22:32:29 1997
+++ language/modula3/m3compiler/m3cc/gcc/config/i386/i386.c	Fri Sep  7 17:49:46 2001
d46 1
a46 3
@@@@ -2805,6 +2813,12 @@@@ print_operand (file, x, code)
 	case '*':
 	  if (USE_STAR)
d48 2
a49 2
+	  return;
+
d54 4
a58 2
 
 	case 'L':
@


1.1.1.1
log
@Import ezm3-1.0; adapted from espie@@'s lang/pm3 port.

Ezm3 is a smaller, more portable distribution of the Modula-3 compiler
and runtime system for people whose only need for Modula-3 is to build
CVSup.
@
text
@@
