head	1.4;
access;
symbols
	OPENBSD_5_8:1.3.0.8
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.4
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.2
	OPENBSD_5_6_BASE:1.3
	jturner_20140329:1.1.1.1
	jturner:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.10.19.21.54.21;	author juanfra;	state dead;
branches;
next	1.3;
commitid	Vq6W2K5mifVGc6IL;

1.3
date	2014.05.08.01.05.50;	author jturner;	state Exp;
branches;
next	1.2;

1.2
date	2014.03.30.00.15.01;	author jturner;	state Exp;
branches;
next	1.1;

1.1
date	2014.03.29.23.59.25;	author jturner;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.29.23.59.25;	author jturner;	state Exp;
branches;
next	;


desc
@@


1.4
log
@rm nimrod
@
text
@$OpenBSD: patch-config_nimrod_cfg,v 1.3 2014/05/08 01:05:50 jturner Exp $
--- config/nimrod.cfg.orig	Mon Apr 21 20:06:24 2014
+++ config/nimrod.cfg	Mon Apr 21 20:13:40 2014
@@@@ -71,7 +71,7 @@@@ hint[LineTooLong]=off
   @@end
   @@if bsd or haiku:
     # BSD got posix_spawn only recently, so we deactivate it for osproc:
-    define:useFork
+    #define:useFork
     # at least NetBSD has problems with thread local storage:
     tlsEmulation:on
   @@end
@@@@ -99,6 +99,8 @@@@ hint[LineTooLong]=off
 @@else:
   gcc.options.always = "-w"
   gpp.options.always = "-w -fpermissive"
+  egcc.options.always = "-w"
+  egpp.options.alaways = "-w -fpermissive"
 @@end
 
 gcc.options.speed = "-O3 -fno-strict-aliasing"
@@@@ -109,6 +111,11 @@@@ gpp.options.speed = "-O3 -fno-strict-aliasing"
 gpp.options.size = "-Os"
 gpp.options.debug = "-g3 -O0"
 #passl = "-pg"
+
+# Configuration for the ports GCC compiler:
+egcc.options.speed = "-O3 -fno-strict-aliasing"
+egcc.options.size = "-Os"
+egcc.options.debug = "-g3 -O0"
 
 # Configuration for the LLVM GCC compiler:
 llvm_gcc.options.debug = "-g"
@


1.3
log
@Update nimrod to 0.9.4. Major Makefile overhaul.

ok juanfra@@
@
text
@d1 1
a1 1
$OpenBSD: patch-config_nimrod_cfg,v 1.2 2014/03/30 00:15:01 jturner Exp $
@


1.2
log
@Enable tlsEmulation. No bump needed was just imported.
@
text
@d1 6
a6 6
$OpenBSD: patch-config_nimrod_cfg,v 1.1.1.1 2014/03/29 23:59:25 jturner Exp $
--- config/nimrod.cfg.orig	Wed May  8 15:34:44 2013
+++ config/nimrod.cfg	Sat Mar 29 20:14:09 2014
@@@@ -69,7 +69,7 @@@@ hint[LineTooLong]=off
     tcc.options.linker = "-ldl"
   @@else:
d13 1
a13 1
@@@@ -97,6 +97,8 @@@@ hint[LineTooLong]=off
d16 1
a16 1
   gpp.options.always = "-w"
d18 1
a18 1
+  egpp.options.always = "-w"
d22 1
a22 1
@@@@ -107,6 +109,15 @@@@ gpp.options.speed = "-O3 -fno-strict-aliasing"
a30 4
+
+egpp.options.speed = "-O3 -fno-strict-aliasing"
+egpp.options.size = "-Os"
+egpp.options.debug = "-g3 -O0"
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 2
+++ config/nimrod.cfg	Sat Mar 29 12:08:42 2014
@@@@ -69,9 +69,9 @@@@ hint[LineTooLong]=off
d11 1
a11 2
-    tlsEmulation:on
+    #tlsEmulation:on
a12 2
 @@end
 
@


1.1.1.1
log
@Import ports/lang/nimrod. ok juanfra@@

Nimrod is a statically typed, imperative programming language that tries
to give the programmer ultimate power without compromises on runtime
efficiency. This means it focuses on compile-time mechanisms in all
their various forms.

Beneath a nice infix/indentation based syntax with a powerful (AST
based, hygienic) macro system lies a semantic model that supports a soft
realtime GC on thread local heaps. Asynchronous message passing is used
between threads, so no "stop the world" mechanism is necessary. An
unsafe shared memory heap is also provided for the increased efficiency
that results from that model.

@
text
@@
