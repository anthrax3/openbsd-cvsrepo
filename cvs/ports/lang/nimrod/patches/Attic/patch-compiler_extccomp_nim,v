head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	jturner_20140329:1.1.1.1
	jturner:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.10.19.21.54.21;	author juanfra;	state dead;
branches;
next	1.2;
commitid	Vq6W2K5mifVGc6IL;

1.2
date	2014.05.08.01.05.50;	author jturner;	state Exp;
branches;
next	1.1;

1.1
date	2014.03.29.23.59.26;	author jturner;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.29.23.59.26;	author jturner;	state Exp;
branches;
next	;


desc
@@


1.3
log
@rm nimrod
@
text
@$OpenBSD: patch-compiler_extccomp_nim,v 1.2 2014/05/08 01:05:50 jturner Exp $
--- compiler/extccomp.nim.orig	Mon Apr 21 20:02:51 2014
+++ compiler/extccomp.nim	Mon Apr 21 20:06:11 2014
@@@@ -16,7 +16,7 @@@@ import
 type 
   TSystemCC* = enum 
     ccNone, ccGcc, ccLLVM_Gcc, ccCLang, ccLcc, ccBcc, ccDmc, ccWcc, ccVcc, 
-    ccTcc, ccPcc, ccUcc, ccIcl
+    ccTcc, ccPcc, ccUcc, ccIcl, ccEGcc
   TInfoCCProp* = enum         # properties of the C compiler:
     hasSwitchRange,           # CC allows ranges in switch statements (GNU C)
     hasComputedGoto,          # CC has computed goto (GNU C extension)
@@@@ -84,6 +84,13 @@@@ compiler gcc:
     props: {hasSwitchRange, hasComputedGoto, hasCpp, hasGcGuard, hasGnuAsm,
             hasNakedAttribute})
 
+compiler egcc:
+  result = gcc()
+
+  result.name = "egcc"
+  result.compilerExe = "egcc"
+  result.cppCompiler = "eg++"
+
 compiler llvmGcc:
   result = gcc()
   
@@@@ -316,7 +323,8 @@@@ const 
     tcc(),
     pcc(),
     ucc(),
-    icl()]
+    icl(),
+    egcc()]
 
 const
   hExt* = ".h"
@


1.2
log
@Update nimrod to 0.9.4. Major Makefile overhaul.

ok juanfra@@
@
text
@d1 1
a1 1
$OpenBSD: patch-compiler_extccomp_nim,v 1.1.1.1 2014/03/29 23:59:26 jturner Exp $
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- compiler/extccomp.nim.orig	Tue May  7 19:23:26 2013
+++ compiler/extccomp.nim	Sat Mar 29 12:01:19 2014
d8 2
a9 2
-    ccTcc, ccPcc, ccUcc, ccIcl, ccGpp
+    ccTcc, ccPcc, ccUcc, ccIcl, ccGpp, ccEGcc, ccEGpp
d13 3
a15 3
@@@@ -85,6 +85,20 @@@@ compiler gpp:
   # XXX: Hmm, I'm keeping this from the previos version, 
   # but my gcc doesn't even have such an option (is this mingw?)
d22 1
a22 8
+  result.linkerExe = "egcc"
+
+compiler egpp:
+  result = gcc()
+
+  result.name = "egpp"
+  result.compilerExe = "eg++"
+  result.linkerExe = "eg++"
d27 2
a28 1
@@@@ -294,7 +308,9 @@@@ const 
d31 3
a33 5
     icl(),
-    gpp()]
+    gpp(),
+    egcc(),
+    egpp()]
d36 1
a36 1
   hExt* = "h"
@


1.1.1.1
log
@Import ports/lang/nimrod. ok juanfra@@

Nimrod is a statically typed, imperative programming language that tries
to give the programmer ultimate power without compromises on runtime
efficiency. This means it focuses on compile-time mechanisms in all
their various forms.

Beneath a nice infix/indentation based syntax with a powerful (AST
based, hygienic) macro system lies a semantic model that supports a soft
realtime GC on thread local heaps. Asynchronous message passing is used
between threads, so no "stop the world" mechanism is necessary. An
unsafe shared memory heap is also provided for the increased efficiency
that results from that model.

@
text
@@
