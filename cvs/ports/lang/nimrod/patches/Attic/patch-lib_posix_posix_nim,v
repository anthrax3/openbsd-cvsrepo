head	1.3;
access;
symbols
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	jturner_20140329:1.1.1.1
	jturner:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2015.10.19.21.54.21;	author juanfra;	state dead;
branches;
next	1.2;
commitid	Vq6W2K5mifVGc6IL;

1.2
date	2014.05.08.01.05.50;	author jturner;	state Exp;
branches;
next	1.1;

1.1
date	2014.03.29.23.59.26;	author jturner;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.29.23.59.26;	author jturner;	state Exp;
branches;
next	;


desc
@@


1.3
log
@rm nimrod
@
text
@$OpenBSD: patch-lib_posix_posix_nim,v 1.2 2014/05/08 01:05:50 jturner Exp $
--- lib/posix/posix.nim.orig	Mon Apr 21 20:09:52 2014
+++ lib/posix/posix.nim	Mon Apr 21 20:11:36 2014
@@@@ -846,7 +846,7 @@@@ var
   FE_UPWARD* {.importc, header: "<fenv.h>".}: cint
   FE_DFL_ENV* {.importc, header: "<fenv.h>".}: cint
 
-when not defined(haiku):
+when not defined(haiku) and not defined(bsd):
   var
     MM_HARD* {.importc, header: "<fmtmsg.h>".}: cint
       ## Source of the condition is hardware.
@@@@ -1816,7 +1816,7 @@@@ proc feholdexcept*(a1: ptr Tfenv): cint {.importc, hea
 proc fesetenv*(a1: ptr Tfenv): cint {.importc, header: "<fenv.h>".}
 proc feupdateenv*(a1: ptr Tfenv): cint {.importc, header: "<fenv.h>".}
 
-when not defined(haiku):
+when not defined(haiku) and not defined(bsd):
   proc fmtmsg*(a1: int, a2: cstring, a3: cint,
               a4, a5, a6: cstring): cint {.importc, header: "<fmtmsg.h>".}
 
@


1.2
log
@Update nimrod to 0.9.4. Major Makefile overhaul.

ok juanfra@@
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_posix_posix_nim,v 1.1.1.1 2014/03/29 23:59:26 jturner Exp $
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- lib/posix/posix.nim.orig	Fri Mar 28 13:02:45 2014
+++ lib/posix/posix.nim	Fri Mar 28 13:02:45 2014
@@@@ -842,48 +842,6 @@@@ var
d8 6
a13 46
-  MM_HARD* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Source of the condition is hardware.
-  MM_SOFT* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Source of the condition is software.
-  MM_FIRM* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Source of the condition is firmware.
-  MM_APPL* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Condition detected by application.
-  MM_UTIL* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Condition detected by utility.
-  MM_OPSYS* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Condition detected by operating system.
-  MM_RECOVER* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Recoverable error.
-  MM_NRECOV* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Non-recoverable error.
-  MM_HALT* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Error causing application to halt.
-  MM_ERROR* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Application has encountered a non-fatal fault.
-  MM_WARNING* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Application has detected unusual non-error condition.
-  MM_INFO* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Informative message.
-  MM_NOSEV* {.importc, header: "<fmtmsg.h>".}: cint
-    ## No severity level provided for the message.
-  MM_PRINT* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Display message on standard error.
-  MM_CONSOLE* {.importc, header: "<fmtmsg.h>".}: cint
-    ## Display message on system console. 
-
-  MM_OK* {.importc, header: "<fmtmsg.h>".}: cint
-    ## The function succeeded.
-  MM_NOTOK* {.importc, header: "<fmtmsg.h>".}: cint
-    ## The function failed completely.
-  MM_NOMSG* {.importc, header: "<fmtmsg.h>".}: cint
-    ## The function was unable to generate a message on standard error, 
-    ## but otherwise succeeded.
-  MM_NOCON* {.importc, header: "<fmtmsg.h>".}: cint
-    ## The function was unable to generate a console message, but 
-    ## otherwise succeeded. 
-    
   FNM_NOMATCH* {.importc, header: "<fnmatch.h>".}: cint
     ## The string does not match the specified pattern.
   FNM_PATHNAME* {.importc, header: "<fnmatch.h>".}: cint
@@@@ -1809,9 +1767,6 @@@@ proc feholdexcept*(a1: ptr Tfenv): cint {.importc, hea
d15 6
a20 1
 proc feupdateenv*(a1: ptr TFenv): cint {.importc, header: "<fenv.h>".}
a21 6
-proc fmtmsg*(a1: int, a2: cstring, a3: cint,
-            a4, a5, a6: cstring): cint {.importc, header: "<fmtmsg.h>".}
-            
 proc fnmatch*(a1, a2: cstring, a3: cint): cint {.importc, header: "<fnmatch.h>".}
 proc ftw*(a1: cstring, 
          a2: proc (x1: cstring, x2: ptr TStat, x3: cint): cint {.noconv.},
@


1.1.1.1
log
@Import ports/lang/nimrod. ok juanfra@@

Nimrod is a statically typed, imperative programming language that tries
to give the programmer ultimate power without compromises on runtime
efficiency. This means it focuses on compile-time mechanisms in all
their various forms.

Beneath a nice infix/indentation based syntax with a powerful (AST
based, hygienic) macro system lies a semantic model that supports a soft
realtime GC on thread local heaps. Asynchronous message passing is used
between threads, so no "stop the world" mechanism is necessary. An
unsafe shared memory heap is also provided for the increased efficiency
that results from that model.

@
text
@@
