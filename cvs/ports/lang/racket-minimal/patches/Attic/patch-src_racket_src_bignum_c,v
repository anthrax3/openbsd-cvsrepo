head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2016.05.16.22.20.16;	author juanfra;	state dead;
branches;
next	1.1;
commitid	GTETszv79ME3Iwhs;

1.1
date	2016.03.10.02.35.29;	author juanfra;	state Exp;
branches;
next	;
commitid	K22naO2qcpp2uxfQ;


desc
@@


1.2
log
@Update to Racket 6.5.
@
text
@$OpenBSD: patch-src_racket_src_bignum_c,v 1.1 2016/03/10 02:35:29 juanfra Exp $

"avoid some C undefined behavior"
https://github.com/racket/racket/commit/9a8fd29

--- src/racket/src/bignum.c.orig	Thu Jan 14 18:11:20 2016
+++ src/racket/src/bignum.c	Tue Feb  9 23:13:12 2016
@@@@ -193,7 +193,7 @@@@ Scheme_Object *scheme_make_small_bignum(intptr_t v, Sm
   o->o.iso.so.type = scheme_bignum_type;
   SCHEME_SET_BIGPOS(&o->o, ((v >= 0) ? 1 : 0));
   if (v < 0)
-    bv = -v;
+    bv = -((bigdig)v);
   else
     bv = v;
 
@@@@ -414,7 +414,7 @@@@ int scheme_bignum_get_long_long_val(const Scheme_Objec
     /* Special case for the most negative number representable in a signed long long */
     mzlonglong v2;
     v2 = 1;
-    v2 = (v2 << 63);
+    v2 = ((umzlonglong)v2 << 63);
     *v = v2;
     return 1;
   } else if ((SCHEME_BIGDIG(o)[MAX_BN_SIZE_FOR_LL - 1] & FIRST_BIT_MASK_LL) != 0) { /* Won't fit into a signed long long */
@@@@ -423,7 +423,7 @@@@ int scheme_bignum_get_long_long_val(const Scheme_Objec
     mzlonglong v2;
     v2 = SCHEME_BIGDIG(o)[0];
     if (SCHEME_BIGLEN(o) > 1) {
-      v2 |= ((mzlonglong)(SCHEME_BIGDIG(o)[1])) << 32;
+      v2 |= ((umzlonglong)(SCHEME_BIGDIG(o)[1])) << 32;
     }
     if (!SCHEME_BIGPOS(o)) {
       v2 = -v2;
@@@@ -1658,7 +1658,7 @@@@ static uintptr_t fixnum_sqrt(uintptr_t n, uintptr_t *r
 
   for (i = SQRT_BIT_MAX; i >= 0; i--)
   {
-    try_root = root | ((intptr_t)0x1 << i);
+    try_root = root | ((uintptr_t)0x1 << i);
     try_square = try_root * try_root;
     if (try_square <= n)
     {
@


1.1
log
@Update to Racket 6.4.
@
text
@d1 1
a1 1
$OpenBSD$
@

