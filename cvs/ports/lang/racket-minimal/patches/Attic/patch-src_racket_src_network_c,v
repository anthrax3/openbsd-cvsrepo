head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.1.1.0.4
	OPENBSD_5_8_BASE:1.1.1.1
	juanfra_2015_07_16:1.1.1.1
	juanfra:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.12.01.18.26.51;	author juanfra;	state dead;
branches;
next	1.1;
commitid	VcWvNlmN2F2Yfni2;

1.1
date	2015.07.16.00.20.53;	author juanfra;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Q4WTWtFPA1q58nBV;

1.1.1.1
date	2015.07.16.00.20.53;	author juanfra;	state Exp;
branches;
next	;
commitid	Q4WTWtFPA1q58nBV;


desc
@@


1.2
log
@Update to Racket 6.3.

(there are still some corner cases on i386)
@
text
@$OpenBSD: patch-src_racket_src_network_c,v 1.1 2015/07/16 00:20:53 juanfra Exp $

"remove setting of socket send buffer size

Modern OS configurations likely use an even larger buffer size, and
making it small can have substantial negative performance effects
(e.g., with PostgreSQL over TCP)."

https://github.com/plt/racket/commit/d95200f19af8a0ec671f4e9f5df4b03ddce072d8

--- src/racket/src/network.c.orig	Tue Mar 17 20:23:06 2015
+++ src/racket/src/network.c	Mon Jul 13 00:59:30 2015
@@@@ -78,6 +78,16 @@@@ static int mzerrno = 0;
 # define mz_AFNOSUPPORT EAFNOSUPPORT
 #endif
 
+#ifdef CANT_SET_SOCKET_BUFSIZE
+# undef SET_SOCKET_BUFFSIZE_ON_CREATE
+#endif
+
+#ifdef SET_SOCKET_BUFFSIZE_ON_CREATE
+# define mzWHEN_SET_SOCKBUF_SIZE(x) x
+#else
+# define mzWHEN_SET_SOCKBUF_SIZE(x) /* empty */
+#endif
+
 #ifdef USE_WINSOCK_TCP
 # include <process.h>
 # include <winsock2.h>
@@@@ -1855,11 +1865,9 @@@@ static Scheme_Object *tcp_connect(int argc, Scheme_Obj
 	    unsigned long ioarg = 1;
 	    ioctlsocket(s, FIONBIO, &ioarg);
 #else
-	    int size = TCP_SOCKSENDBUF_SIZE;
+	    mzWHEN_SET_SOCKBUF_SIZE(int size = TCP_SOCKSENDBUF_SIZE);
 	    fcntl(s, F_SETFL, MZ_NONBLOCKING);
-# ifndef CANT_SET_SOCKET_BUFSIZE
-	    setsockopt(s, SOL_SOCKET, SO_SNDBUF, (char *)&size, sizeof(int));
-# endif
+	    mzWHEN_SET_SOCKBUF_SIZE(setsockopt(s, SOL_SOCKET, SO_SNDBUF, (char *)&size, sizeof(int)));
 #endif
 	    status = connect(s, addr->ai_addr, addr->ai_addrlen);
 #ifdef USE_UNIX_SOCKETS_TCP
@@@@ -2441,10 +2449,8 @@@@ do_tcp_accept(int argc, Scheme_Object *argv[], Scheme_
     Scheme_Tcp *tcp;
     
 #  ifdef USE_UNIX_SOCKETS_TCP
-    int size = TCP_SOCKSENDBUF_SIZE;
-#   ifndef CANT_SET_SOCKET_BUFSIZE
-    setsockopt(s, SOL_SOCKET, SO_SNDBUF, (char *)&size, sizeof(int));
-#   endif
+    mzWHEN_SET_SOCKBUF_SIZE(int size = TCP_SOCKSENDBUF_SIZE);
+    mzWHEN_SET_SOCKBUF_SIZE(setsockopt(s, SOL_SOCKET, SO_SNDBUF, (char *)&size, sizeof(int)));
 #  endif
 
     tcp = make_tcp_port_data(s, 2);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Tests, help with the README file and OK jturner@@.


Racket is a multi-paradigm programming language in the Lisp/Scheme
family, that also serves as a platform for language creation, design,
and implementation.

The primary components of Racket platform are:

- The implementation of Racket (including a rich run-time system,
  various libraries, JIT compiler, and more).
- pkg.racket-lang.org, Racket's web-based package distribution system
  for user-contributed packages.
- raco, command line tool for finding documentation, compiling Racket
  source to bytecode, packaging executables, packaging installable
  archives, and installing packages from remote servers.


@
text
@@
