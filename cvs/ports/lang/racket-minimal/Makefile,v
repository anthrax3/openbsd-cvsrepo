head	1.37;
access;
symbols
	OPENBSD_6_1:1.33.0.2
	OPENBSD_6_1_BASE:1.33
	OPENBSD_6_0:1.24.0.2
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.13.0.2
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	juanfra_2015_07_16:1.1.1.1
	juanfra:1.1.1;
locks; strict;
comment	@# @;


1.37
date	2017.07.31.23.13.12;	author juanfra;	state Exp;
branches;
next	1.36;
commitid	IoKBX1OOLvwTGduM;

1.36
date	2017.05.31.08.08.16;	author espie;	state Exp;
branches;
next	1.35;
commitid	ij92FtFXiSiT1ani;

1.35
date	2017.05.27.04.56.48;	author espie;	state Exp;
branches;
next	1.34;
commitid	WgxuIe3Hu5hv6VRV;

1.34
date	2017.04.28.18.15.42;	author juanfra;	state Exp;
branches;
next	1.33;
commitid	cuAmopGHMeuoxXqK;

1.33
date	2017.03.09.01.56.52;	author juanfra;	state Exp;
branches
	1.33.2.1;
next	1.32;
commitid	amDmrHifUFF8zbUk;

1.32
date	2017.01.25.11.16.17;	author juanfra;	state Exp;
branches;
next	1.31;
commitid	grSPFTrtwgxv0t9a;

1.31
date	2016.10.28.14.40.50;	author juanfra;	state Exp;
branches;
next	1.30;
commitid	sqk4mrRdSyIUHWKf;

1.30
date	2016.10.03.19.27.30;	author juanfra;	state Exp;
branches;
next	1.29;
commitid	rBYvr0JUB2tnZM6x;

1.29
date	2016.09.24.00.21.28;	author juanfra;	state Exp;
branches;
next	1.28;
commitid	NBZg8n3ocMJ1O6lJ;

1.28
date	2016.08.27.01.07.54;	author juanfra;	state Exp;
branches;
next	1.27;
commitid	ZM0SXiyCW7AbsG3I;

1.27
date	2016.08.20.19.47.10;	author juanfra;	state Exp;
branches;
next	1.26;
commitid	uFusl1uQMZEsmwUt;

1.26
date	2016.08.18.19.32.50;	author juanfra;	state Exp;
branches;
next	1.25;
commitid	b8oxPyjvuI1lhWMh;

1.25
date	2016.07.30.18.47.28;	author juanfra;	state Exp;
branches;
next	1.24;
commitid	MSil9CAyflngWHpe;

1.24
date	2016.07.05.22.30.11;	author juanfra;	state Exp;
branches;
next	1.23;
commitid	u4c1AzwhqB15qguN;

1.23
date	2016.06.05.02.20.34;	author juanfra;	state Exp;
branches;
next	1.22;
commitid	x7BY2bchCpBKU4Q0;

1.22
date	2016.06.05.01.21.03;	author juanfra;	state Exp;
branches;
next	1.21;
commitid	TJ0ez2f8lf5VDoXH;

1.21
date	2016.05.16.22.20.16;	author juanfra;	state Exp;
branches;
next	1.20;
commitid	GTETszv79ME3Iwhs;

1.20
date	2016.04.14.18.12.17;	author juanfra;	state Exp;
branches;
next	1.19;
commitid	haRd4bt1ZZB7j9tk;

1.19
date	2016.04.12.22.07.57;	author juanfra;	state Exp;
branches;
next	1.18;
commitid	oJylaDxhlV9Vcz34;

1.18
date	2016.04.05.23.14.01;	author juanfra;	state Exp;
branches;
next	1.17;
commitid	8w8wsFnBka16Ve3h;

1.17
date	2016.03.28.19.08.18;	author juanfra;	state Exp;
branches;
next	1.16;
commitid	lX3gbHmDiQSkL6oZ;

1.16
date	2016.03.18.23.12.18;	author naddy;	state Exp;
branches;
next	1.15;
commitid	KZAl4KEiw6a3Jixw;

1.15
date	2016.03.13.00.11.40;	author juanfra;	state Exp;
branches;
next	1.14;
commitid	5G6WTsuLb0zyedOy;

1.14
date	2016.03.10.02.35.29;	author juanfra;	state Exp;
branches;
next	1.13;
commitid	K22naO2qcpp2uxfQ;

1.13
date	2016.02.10.01.59.03;	author juanfra;	state Exp;
branches;
next	1.12;
commitid	4lYP8J9gc4zVl1RT;

1.12
date	2016.02.06.20.41.01;	author juanfra;	state Exp;
branches;
next	1.11;
commitid	oWmTu54ZCqFBy0Fj;

1.11
date	2016.01.27.21.30.41;	author juanfra;	state Exp;
branches;
next	1.10;
commitid	e60wgDAATNC5VnjM;

1.10
date	2016.01.14.21.21.01;	author juanfra;	state Exp;
branches;
next	1.9;
commitid	UW530OXxKocylZ60;

1.9
date	2016.01.13.02.05.21;	author juanfra;	state Exp;
branches;
next	1.8;
commitid	T5xQ3IUcvUAP8r7G;

1.8
date	2016.01.09.03.41.47;	author juanfra;	state Exp;
branches;
next	1.7;
commitid	g9phovSgKZYCAIzX;

1.7
date	2016.01.08.20.12.01;	author juanfra;	state Exp;
branches;
next	1.6;
commitid	B6ep70Q4ScmHnFqm;

1.6
date	2015.12.15.23.56.15;	author juanfra;	state Exp;
branches;
next	1.5;
commitid	QcZjaPRjIkQ5Y8fR;

1.5
date	2015.12.01.18.26.50;	author juanfra;	state Exp;
branches;
next	1.4;
commitid	VcWvNlmN2F2Yfni2;

1.4
date	2015.08.11.21.14.26;	author juanfra;	state Exp;
branches;
next	1.3;
commitid	KfeOBzlwBy9MMzqx;

1.3
date	2015.07.16.00.34.13;	author ajacoutot;	state Exp;
branches
	1.3.4.1;
next	1.2;
commitid	a9OyGXtCI5AvsF0V;

1.2
date	2015.07.16.00.26.20;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	Re5H00WhlTi2qwxe;

1.1
date	2015.07.16.00.20.53;	author juanfra;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Q4WTWtFPA1q58nBV;

1.1.1.1
date	2015.07.16.00.20.53;	author juanfra;	state Exp;
branches;
next	;
commitid	Q4WTWtFPA1q58nBV;

1.3.4.1
date	2016.02.10.01.56.46;	author juanfra;	state Exp;
branches;
next	;
commitid	Z5lfK0ELpcXeDeBv;

1.33.2.1
date	2017.04.28.18.14.54;	author juanfra;	state Exp;
branches;
next	;
commitid	PKZNI9Ul6WkA7NcD;


desc
@@


1.37
log
@Update to Racket 6.10.
@
text
@# $OpenBSD: Makefile,v 1.36 2017/05/31 08:08:16 espie Exp $

USE_WXNEEDED =		Yes

PORTROACH_COMMENT =	hide pre-release versions (e.g. 6.1.90.900)
PORTROACH =		limit:!.*\.[0-9][0-9][0-9]-src-builtpkgs$$

ONLY_FOR_ARCHS =	arm amd64 i386 powerpc sparc64

COMMENT =		multi-paradigm programming language

V =			6.10
PKGNAME =		racket-minimal-$V
DISTFILES =		racket-minimal-$V-src-builtpkgs${EXTRACT_SUFX} \
			racket-openbsd-1${EXTRACT_SUFX}

CATEGORIES =		lang
HOMEPAGE =		http://racket-lang.org/
MAINTAINER =		Juan Francisco Cantero Hurtado <juanfra@@openbsd.org>

# LGPLv3
PERMIT_PACKAGE_CDROM =	Yes

MASTER_SITES =		https://mirror.racket-lang.org/installers/${V}/ \
			https://www.cs.utah.edu/plt/installers/${V}/ \
			http://www.eecs.northwestern.edu/racket/${V}/ \
			http://mirror.informatik.uni-tuebingen.de/mirror/racket/${V}/ \
			http://racket.infogroep.be/${V}/ \
			http://pre-release.racket-lang.org/installers/ \
			http://pre.racket-lang.org/release/installers/ \
			http://pre.racket-lang.org/installers/ \
			https://www.cs.utah.edu/plt/snapshots/current/installers/ \
			http://plt.eecs.northwestern.edu/snapshots/current/installers/ \
			http://download.tuxfamily.org/jod/lang/racket/ \
			ftp://download.tuxfamily.org/jod/lang/racket/
EXTRACT_SUFX =		.tgz

# GCC4 is only needed by the TLS flavor. "places" and "futures" only work
# correctly on amd64 for this version.
COMPILER =		gcc
COMPILER_LANGS =	c
MODGCC4_ARCHS =		arm amd64

LIB_DEPENDS =		converters/libiconv \
			databases/sqlite3 \
			devel/libffi>=3.0.9p2

WANTLIB += c ffi iconv m pthread
# Loaded using FFI
WANTLIB += sqlite3

WRKDIST =		${WRKDIR}/racket-$V
WRKSRC =		${WRKDIST}/src

# The tests are installed from raco as a package
NO_TEST =		Yes
SEPARATE_BUILD =	Yes

CONFIGURE_STYLE =	gnu
CONFIGURE_ARGS +=	--enable-libffi \
			--enable-gracket \
			--enable-foreign \
			--enable-lt=${LIBTOOL}
# - "backtrace" is expensive.
#   http://article.gmane.org/gmane.comp.lang.racket.devel/6700
# - disable "docs" to reduce the number of deps and the build time
# - The installation of shared libraries is not recommended.
CONFIGURE_ARGS +=	--disable-backtrace \
			--disable-docs \
			--disable-libs \
			--disable-shared

CONFIGURE_ENV =		LDFLAGS="-L${LOCALBASE}/lib -L${X11BASE}/lib -Wl,-z,wxneeded" \
			CPPFLAGS="-I${LOCALBASE}/include -I${X11BASE}/include"

FLAVORS =		debug no_jit
FLAVOR ?=

.if ${FLAVOR:Mdebug}
CONFIGURE_ARGS +=	--disable-strip \
			--enable-noopt
CFLAGS += -ggdb3
.endif

# - "places" and "futures" require thread-local storage, atomic CAS and JIT
#   http://article.gmane.org/gmane.comp.lang.racket.user/16723
# - Using gcc4 to enable "places". It broke Racket in the past.
# - The JIT doesn't work on powerpc when TLS is enabled. "places" and
#   "futures" don't work on arm and powerpc.
#   https://github.com/racket/racket/issues/1239
# - Racket builds fine with -O2 (and -O1 and -Os) on powerpc but
#   it doesn't pass the tests.
.if ${FLAVOR:Mno_jit}
ONLY_FOR_ARCHS =	arm amd64 i386 powerpc
CONFIGURE_ARGS +=	--disable-jit \
			--disable-places \
			--disable-futures
.elif ${MACHINE_ARCH} == "amd64"
CONFIGURE_ARGS +=	--enable-jit \
			--enable-places \
			--enable-futures
.elif ${MACHINE_ARCH} == "arm" || ${MACHINE_ARCH} == "i386"
CONFIGURE_ARGS +=	--enable-jit \
			--disable-places \
			--disable-futures
.elif ${MACHINE_ARCH} == "powerpc"
CONFIGURE_ARGS +=	--enable-jit \
			--disable-places \
			--disable-futures
CONFIGURE_ENV +=	CFLAGS="${CFLAGS} -O0 -Wall -Wno-unused-value" \
			CPPFLAGS="${CPPFLAGS} -O0 -Wall -Wno-unused-value"
.else
CONFIGURE_ARGS +=	--disable-jit \
			--disable-places \
			--disable-futures
.endif

post-install:
	@@find ${PREFIX} -type f -name '*.orig' -exec rm -f {} \;
	@@perl -i -pe 's/installation-name . "snapshot"/installation-name . "$V"/g' ${WRKINST}/etc/racket/config.rktd
	@@mv ${WRKINST}/etc/racket ${PREFIX}/share/examples
	@@cp ${WRKDIR}/racket-openbsd/racket-user-bin-paths ${PREFIX}/bin

# Since 5.3.4 if __SSE_MATH__ is defined (C_COMPILER_USES_SSE) and
# MZ_TRY_EXTFLONUMS enabled, MZ_LONG_DOUBLE (extflonum) is turned on. Also
# C_COMPILER_USES_SSE turn on MZ_USE_JIT_SSE.
# "-msse -mfpmath=sse" required by extflonum on i386.
# The GNU Lightning minimum requirement for i386 is SSE2.
.if ${FLAVOR:Mno_jit} && ${MACHINE_ARCH} == "i386"
CONFIGURE_ARGS +=	--disable-extflonum
.elif ${MACHINE_ARCH} == "i386"
# There is a bug which only happens when extflonum is enabled on i386.
# By default the build system of Racket uses "cc" as the preprocessor but
# doesn't pass the CFLAGS, so it doesn't define __SSE_MATH__ which is
# used to detect MZ_LONG_DOUBLE. If enable-extflonum is used and the
# build system can't use MZ_LONG_DOUBLE, then the build fails with the error:
# "cannot support extflonums; you may need to adjust compiler options"
# The easiest workaround is to pass the CFLAGS also as CPPFLAGS.
CONFIGURE_ENV +=	CFLAGS="${CFLAGS} -msse -msse2 -mfpmath=sse" \
			CPPFLAGS="${CPPFLAGS} -msse -msse2 -mfpmath=sse"
CONFIGURE_ARGS +=	--enable-extflonum
.endif

.include <bsd.port.mk>
@


1.36
log
@switch everything to new COMPILER idiom, even stuff that won't build with clang
yet, but at least that part is done.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.35 2017/05/27 04:56:48 espie Exp $
d12 1
a12 1
V =			6.9
@


1.35
log
@more WANT_CXX
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.34 2017/04/28 18:15:42 juanfra Exp $
d40 2
a41 2
WANT_CXX =		base gcc
MODGCC4_LANGS =		c
@


1.34
log
@Update to Racket 6.9.

SECURITY:

"A security vulnerability in the `racket/sandbox` library and Typed
Racket allowed malicious Typed Racket code to escape the sandbox.
This vulnerability has been fixed in Racket version 6.9. Anyone using
`racket/sandbox` to execute untrustworthy code with access to Typed
Racket should upgrade to version 6.9 immediately.

While this known vulnerability has been eliminated, it is possible that
similar errors in other installed collections could also be exploited,
although we are not currently aware of any existing vulnerabilities. We
recommend that if you use the Racket sandbox to execute untrustworthy
Racket code, you should also employ additional operating system or
virtual machine level protections. The documentation for `racket/sandbox`
has been updated to list recommended security practices for using the
library."

https://download.racket-lang.org/v6.9.html
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.33 2017/03/09 01:56:52 juanfra Exp $
d40 1
a40 1
MODULES +=		gcc4
d43 1
@


1.33
log
@Unbreak Racket on arm.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.32 2017/01/25 11:16:17 juanfra Exp $
d12 1
a12 2
V =			6.8
REVISION =		0
@


1.33.2.1
log
@Update to Racket 6.9.

SECURITY:

"A security vulnerability in the `racket/sandbox` library and Typed
Racket allowed malicious Typed Racket code to escape the sandbox.
This vulnerability has been fixed in Racket version 6.9. Anyone using
`racket/sandbox` to execute untrustworthy code with access to Typed
Racket should upgrade to version 6.9 immediately.

While this known vulnerability has been eliminated, it is possible that
similar errors in other installed collections could also be exploited,
although we are not currently aware of any existing vulnerabilities. We
recommend that if you use the Racket sandbox to execute untrustworthy
Racket code, you should also employ additional operating system or
virtual machine level protections. The documentation for `racket/sandbox`
has been updated to list recommended security practices for using the
library."

https://download.racket-lang.org/v6.9.html
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.33 2017/03/09 01:56:52 juanfra Exp $
d12 2
a13 1
V =			6.9
@


1.32
log
@Update to Racket 6.8.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.31 2016/10/28 14:40:50 juanfra Exp $
d8 1
a8 1
ONLY_FOR_ARCHS =	amd64 i386 powerpc sparc64
d13 1
d43 1
a43 1
MODGCC4_ARCHS =		amd64
d89 1
a89 1
#   "futures" don't work on powerpc.
d94 1
a94 1
ONLY_FOR_ARCHS =	amd64 i386 powerpc
d102 1
a102 1
.elif ${MACHINE_ARCH} == "i386"
@


1.31
log
@Update to Racket 6.7.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.25 2016/07/30 18:47:28 juanfra Exp $
d12 1
a12 1
V =			6.7
@


1.30
log
@Move the patch to the correct directory.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.29 2016/09/24 00:21:28 juanfra Exp $
d12 1
a12 2
V =			6.6
REVISION =		4
@


1.29
log
@Add sqlite3 as dependency.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.28 2016/08/27 01:07:54 juanfra Exp $
d13 1
a13 1
REVISION =		3
@


1.28
log
@"fix space-safety in compiler"

https://github.com/racket/racket/commit/5f9576cb222c82951c1610c5fc4bf5c9aced2060

Passes the tests on amd64.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.27 2016/08/20 19:47:10 juanfra Exp $
d13 1
a13 1
REVISION =		2
d45 1
d49 2
a50 2
# Loaded using FFI (just a placeholder for now)
WANTLIB +=
@


1.27
log
@Add the LDFLAGS again. The previous version worked for me but failed
in the bulk builds. Spotted by naddy@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.26 2016/08/18 19:32:50 juanfra Exp $
d13 1
a13 1
REVISION =		1
@


1.26
log
@Add USE_WXNEEDED. Passes the tests.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.25 2016/07/30 18:47:28 juanfra Exp $
d13 1
a13 1
REVISION =		0
d72 1
a72 1
CONFIGURE_ENV =		LDFLAGS="-L${LOCALBASE}/lib -L${X11BASE}/lib" \
@


1.25
log
@Update to Racket 6.6.
@
text
@d1 3
a3 1
# $OpenBSD: Makefile,v 1.23 2016/06/05 02:20:34 juanfra Exp $
d13 1
d72 1
a72 1
CONFIGURE_ENV =		LDFLAGS="-L${LOCALBASE}/lib -L${X11BASE}/lib -Wl,-z,wxneeded" \
@


1.24
log
@Add wxneeded again. We will not have a proper fix before of 6.0.
@
text
@d10 1
a10 2
V =			6.5
REVISION =		2
d98 1
a98 1
.elif ${MACHINE_ARCH} == "i386" || ${MACHINE_ARCH} == "powerpc"
d103 3
@


1.23
log
@Revert the previous revision. It broke the configure script.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.22 2016/06/05 01:21:03 juanfra Exp $
d11 1
a11 1
REVISION =		1
d70 1
a70 1
CONFIGURE_ENV =		LDFLAGS="-L${LOCALBASE}/lib -L${X11BASE}/lib" \
@


1.22
log
@Add wxneeded to Racket. JIT tested on amd64.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.21 2016/05/16 22:20:16 juanfra Exp $
d11 1
a11 1
REVISION =		0
d70 1
a70 1
CONFIGURE_ENV =		LDFLAGS="-L${LOCALBASE}/lib -L${X11BASE}/lib -Wl,-z,wxneeded" \
@


1.21
log
@Update to Racket 6.5.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2016/03/28 19:08:18 juanfra Exp $
d11 1
d70 1
a70 1
CONFIGURE_ENV =		LDFLAGS="-L${LOCALBASE}/lib -L${X11BASE}/lib" \
@


1.20
log
@I forgot to add libiconv to LIB_DEPENDS. Spotted by naddy@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.19 2016/04/12 22:07:57 juanfra Exp $
d10 1
a10 2
V =			6.4
REVISION =		3
d36 5
d84 2
a85 1
# - The JIT doesn't work on powerpc when TLS is enabled
d87 2
d90 1
a90 1
ONLY_FOR_ARCHS =	amd64 i386
d94 1
a94 4
.elif ${MACHINE_ARCH} != "sparc64" && ${MACHINE_ARCH} != "powerpc"
MODULES +=		gcc4
MODGCC4_LANGS =		c c++
MODGCC4_ARCHS =		amd64 i386
d98 7
@


1.19
log
@Remove iconv module.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.18 2016/04/05 23:14:01 juanfra Exp $
d11 1
a11 1
REVISION =		2
d37 2
a38 1
LIB_DEPENDS =		devel/libffi>=3.0.9p2
@


1.18
log
@Add a note about a bug in DrRacket reported by Ray Lai.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2016/03/28 19:08:18 juanfra Exp $
d11 1
a11 1
REVISION =		1
a36 2
MODULES +=		converters/libiconv

d39 1
a39 1
WANTLIB += c m pthread ffi
@


1.17
log
@Add a warning about to run raco commands as root.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.16 2016/03/18 23:12:18 naddy Exp $
d11 1
a11 1
REVISION =		0
@


1.16
log
@remove SHARED_ONLY from ports that only use modules that neither set nor
read this variable
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2016/03/13 00:11:40 juanfra Exp $
d11 1
@


1.15
log
@Fix Racket on i386. Spotted by sthen@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2016/03/10 02:35:29 juanfra Exp $
a4 2

SHARED_ONLY =		Yes
@


1.14
log
@Update to Racket 6.4.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2016/01/08 20:12:01 juanfra Exp $
d116 9
a124 1
CONFIGURE_ENV +=	CFLAGS="${CFLAGS} -msse -msse2 -mfpmath=sse"
@


1.13
log
@SECURITY: Fix a vulnerability in the Racket web server.

http://article.gmane.org/gmane.comp.lang.racket.user/30142
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2016/02/06 20:41:01 juanfra Exp $
a7 5
# Racket includes C fallback code for architectures without JIT support but
# nobody tests regularly this code outside of amd64 (Linux/OSX). The code
# is buggy and the devs can't fix the problems because they have not access
# to these architectures. In addition, the C code is extremely slow compared
# with the JIT.
d12 1
a12 2
V =			6.3
REVISION =		7
d24 2
a25 2
MASTER_SITES =		https://www.cs.utah.edu/plt/installers/${V}/ \
			http://mirror.racket-lang.org/installers/${V}/ \
a60 2
# - "places" and "futures" require thread-local storage and atomic CAS
#   http://article.gmane.org/gmane.comp.lang.racket.user/16723
d65 1
a65 3
			--disable-shared \
			--disable-places \
			--disable-futures
d79 5
d86 14
a99 1
CONFIGURE_ARGS +=	--disable-jit
d103 1
a104 1
	@@perl -i -pe 's/"http:\/\/download.racket-lang.org\/releases\/6.3\/catalog\/"/"http:\/\/download.racket-lang.org\/patches\/web-server-1\/" "http:\/\/download.racket-lang.org\/releases\/6.3\/catalog\/"/g' ${WRKINST}/etc/racket/config.rktd
a117 5
.endif

# Disable temporally the JIT. raco crashes during the installation of the main-distribution.
.if ${MACHINE_ARCH} == "powerpc"
CONFIGURE_ARGS +=	--disable-jit
@


1.12
log
@Disable temporally the JIT on PowerPC.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2016/01/27 21:30:41 juanfra Exp $
d18 1
a18 1
REVISION =		6
d96 1
@


1.11
log
@Add some missing files. Reported by jorey via #devious/freenode.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2016/01/14 21:21:01 juanfra Exp $
d18 1
a18 1
REVISION =		5
d90 1
a90 1
ONLY_FOR_ARCHS =	amd64 i386 powerpc
d109 5
@


1.10
log
@Fix "raco distribute". Patch from upstream.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2016/01/13 02:05:21 juanfra Exp $
d18 1
a18 1
REVISION =		4
@


1.9
log
@Temporary workaround for "raco distribute" until upstream creates
a proper fix.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2016/01/09 03:41:47 juanfra Exp $
d18 1
a18 1
REVISION =		3
@


1.8
log
@I forgot to remove the CFLAGS in the previous commit.

While here, sort the list of architectures. (spotted by jasper@@)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2016/01/08 20:12:01 juanfra Exp $
d18 1
a18 1
REVISION =		2
@


1.7
log
@Add the new "no_jit" flavor. Unbreak racket on powerpc.

Help and "looks good to me" sthen@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2015/12/15 23:56:15 juanfra Exp $
d13 1
a13 1
ONLY_FOR_ARCHS =	i386 amd64 sparc64 powerpc
d18 1
a18 1
REVISION =		1
d90 1
a90 1
ONLY_FOR_ARCHS =	i386 amd64 powerpc
d103 4
a106 2
# The GNU Lightning minimum requirement is SSE2.
.if ${MACHINE_ARCH} == "i386" || ${MACHINE_ARCH} == "amd64"
@


1.6
log
@Unbreak Racket on sparc64.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2015/12/01 18:26:50 juanfra Exp $
d13 1
a13 1
ONLY_FOR_ARCHS =	i386 amd64 sparc64
d18 1
a18 1
REVISION =		0
d80 1
a80 1
FLAVORS =		debug
d82 1
d89 5
d106 1
a106 2
CONFIGURE_ARGS +=	--enable-extflonum \
			--enable-jit
@


1.5
log
@Update to Racket 6.3.

(there are still some corner cases on i386)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2015/07/16 00:34:13 ajacoutot Exp $
d13 1
a13 1
ONLY_FOR_ARCHS =	i386 amd64
d18 1
@


1.4
log
@Update to racket-minimal 6.2.1.
@
text
@d17 1
a17 1
V =			6.2.1
d43 1
a43 1
MODULES =		converters/libiconv
d63 6
a68 5
# "backtrace" is expensive.
# http://article.gmane.org/gmane.comp.lang.racket.devel/6700
# disable "docs" to reduce the number of deps and the build time
# "places" and "futures" require thread-local storage and atomic CAS
# http://article.gmane.org/gmane.comp.lang.racket.user/16723
d71 2
@


1.3
log
@Missing @@conflict and @@pkgpath markers
discussed with sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2015/07/16 00:26:20 ajacoutot Exp $
d17 1
a17 1
V =			6.2
a18 1
REVISION =		1
@


1.3.4.1
log
@SECURITY: Fix a vulnerability in the Racket web server.

http://article.gmane.org/gmane.comp.lang.racket.user/30142
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2015/07/16 00:34:13 ajacoutot Exp $
d19 1
a19 1
REVISION =		2
a86 1
	@@perl -i -pe 's/"http:\/\/download.racket-lang.org\/releases\/6.2\/catalog\/"/"http:\/\/download.racket-lang.org\/patches\/web-server-1\/" "http:\/\/download.racket-lang.org\/releases\/6.2\/catalog\/"/g' ${WRKINST}/etc/racket/config.rktd
@


1.2
log
@Do not hardcode /usr/local.
Remove bogus blank lines.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2015/07/16 00:20:53 juanfra Exp $
d19 1
a19 1
REVISION =		0
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.20 2014/11/12 02:35:29 juanfra Exp $
d19 1
d44 1
a44 1
MODULES +=		converters/libiconv
@


1.1.1.1
log
@Tests, help with the README file and OK jturner@@.


Racket is a multi-paradigm programming language in the Lisp/Scheme
family, that also serves as a platform for language creation, design,
and implementation.

The primary components of Racket platform are:

- The implementation of Racket (including a rich run-time system,
  various libraries, JIT compiler, and more).
- pkg.racket-lang.org, Racket's web-based package distribution system
  for user-contributed packages.
- raco, command line tool for finding documentation, compiling Racket
  source to bytecode, packaging executables, packaging installable
  archives, and installing packages from remote servers.


@
text
@@
