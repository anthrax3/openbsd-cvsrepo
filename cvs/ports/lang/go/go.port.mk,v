head	1.16;
access;
symbols
	OPENBSD_6_1:1.15.0.2
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.11.0.2
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3;
locks; strict;
comment	@# @;


1.16
date	2017.04.22.09.55.16;	author ajacoutot;	state Exp;
branches;
next	1.15;
commitid	JTE2Tu2KzkTlx69f;

1.15
date	2017.02.19.14.07.26;	author ajacoutot;	state Exp;
branches;
next	1.14;
commitid	X5j35vVoCwGIwAMC;

1.14
date	2017.01.30.16.58.40;	author ajacoutot;	state Exp;
branches;
next	1.13;
commitid	ZoMfduOTyDAZ7Pwz;

1.13
date	2016.08.21.14.08.25;	author czarkoff;	state Exp;
branches;
next	1.12;
commitid	iUpFIKD5GnT14Qbe;

1.12
date	2016.08.03.09.34.10;	author ajacoutot;	state Exp;
branches;
next	1.11;
commitid	IIkSDpROvPW7kvN1;

1.11
date	2016.05.21.01.39.36;	author czarkoff;	state Exp;
branches;
next	1.10;
commitid	iZOG11yYINipxOD0;

1.10
date	2016.05.13.06.43.37;	author jasper;	state Exp;
branches;
next	1.9;
commitid	LzydRa1a2Lj5DudG;

1.9
date	2016.05.08.12.29.17;	author czarkoff;	state Exp;
branches;
next	1.8;
commitid	5QGPAs6R52UCMrT1;

1.8
date	2016.05.06.10.04.00;	author czarkoff;	state Exp;
branches;
next	1.7;
commitid	bTf77iOAx20BRUlY;

1.7
date	2016.05.05.10.46.50;	author czarkoff;	state Exp;
branches;
next	1.6;
commitid	T72wrhicnNzJNzMa;

1.6
date	2016.02.28.13.24.16;	author czarkoff;	state Exp;
branches;
next	1.5;
commitid	6wLhOjqMGDsSlqtG;

1.5
date	2016.01.14.15.03.08;	author jsing;	state Exp;
branches;
next	1.4;
commitid	nZQUmAsUO6Ug2W23;

1.4
date	2015.08.11.20.16.21;	author jasper;	state Exp;
branches;
next	1.3;
commitid	r5R1X0J1RJugqH8k;

1.3
date	2015.06.12.05.20.48;	author czarkoff;	state Exp;
branches;
next	1.2;
commitid	P6fecvRW5K9mamXe;

1.2
date	2015.06.08.09.17.04;	author czarkoff;	state Exp;
branches;
next	1.1;
commitid	TpSBzRtSqAjuPu22;

1.1
date	2015.05.15.07.30.41;	author jasper;	state Exp;
branches;
next	;
commitid	Zhr0e4besOPE04Gv;


desc
@@


1.16
log
@Use MODGO_post-patch instead of checking for an existing post-patch target.
This will allow go ports to setup a post-patch target when needed.

ok czarkoff@@
@
text
@# $OpenBSD: go.port.mk,v 1.15 2017/02/19 14:07:26 ajacoutot Exp $

ONLY_FOR_ARCHS ?=	${GO_ARCHS}

MODGO_BUILDDEP ?=	Yes

MODGO_RUN_DEPENDS =	lang/go
MODGO_BUILD_DEPENDS =	lang/go

.if ${NO_BUILD:L} == "no" && ${MODGO_BUILDDEP:L} == "yes"
BUILD_DEPENDS +=	${MODGO_BUILD_DEPENDS}
.endif

MODGO_PACKAGE_PATH =	${PREFIX}/go-pkg
MODGO_PACKAGES =	go-pkg/pkg/openbsd_${MACHINE_ARCH:S/i386/386/}
MODGO_SOURCES =		go-pkg/src
MODGO_TOOLS =		go-pkg/tool/openbsd_${MACHINE_ARCH:S/i386/386/}

SUBST_VARS +=		MODGO_TOOLS MODGO_PACKAGES MODGO_SOURCES

MODGO_SUBDIR ?=		${WRKDIST}
MODGO_TYPE ?=		bin
MODGO_WORKSPACE ?=	${WRKDIR}/go
MODGO_GOPATH ?=		${MODGO_WORKSPACE}:${MODGO_PACKAGE_PATH}
MODGO_ENV +=		GOPATH="${MODGO_GOPATH}" PATH="${PORTPATH}"
MODGO_CMD ?=		${SETENV} ${MODGO_ENV} go
MODGO_BUILD_CMD =	${MODGO_CMD} install ${MODGO_FLAGS}
MODGO_TEST_CMD =	${MODGO_CMD} test ${MODGO_FLAGS}

.if ! empty(MODGO_LDFLAGS)
MODGO_BUILD_CMD +=	-ldflags="${MODGO_LDFLAGS}"
MODGO_TEST_CMD +=	-ldflags="${MODGO_LDFLAGS}"
.endif

.if defined(GH_ACCOUNT) && defined(GH_PROJECT)
ALL_TARGET ?=		github.com/${GH_ACCOUNT}/${GH_PROJECT}
.endif
TEST_TARGET ?=		${ALL_TARGET}

SEPARATE_BUILD ?=	Yes
WRKSRC ?=		${MODGO_WORKSPACE}/src/${ALL_TARGET}

MODGO_SETUP_WORKSPACE =	mkdir -p ${WRKSRC:H}; mv ${MODGO_SUBDIR} ${WRKSRC};

CATEGORIES +=		lang/go

MODGO_BUILD_TARGET =	${MODGO_BUILD_CMD} ${ALL_TARGET}
MODGO_FLAGS +=		-x

.if empty(DEBUG)
# by default omit symbol table, debug information and DWARF symbol table
MODGO_LDFLAGS +=	-s -w
.endif

INSTALL_STRIP =
.if ${MODGO_TYPE:L:Mbin}
MODGO_INSTALL_TARGET =	${INSTALL_PROGRAM} ${MODGO_WORKSPACE}/bin/* \
				${PREFIX}/bin;
.endif

# Go source files serve the purpose of libraries, so sources should be included
# with library ports.
.if ${MODGO_TYPE:L:Mlib}
MODGO_INSTALL_TARGET +=	${INSTALL_DATA_DIR} ${MODGO_PACKAGE_PATH} && \
			cd ${MODGO_WORKSPACE} && \
			find src pkg -type d -exec ${INSTALL_DATA_DIR} \
				${MODGO_PACKAGE_PATH}/{} \; && \
			find src pkg -type f -exec ${INSTALL_DATA} -p \
				${MODGO_WORKSPACE}/{} \
				${MODGO_PACKAGE_PATH}/{} \;

# This is required to force rebuilding of go libraries upon changes in
# toolchain.
RUN_DEPENDS +=		${MODGO_RUN_DEPENDS}
.endif

MODGO_TEST_TARGET =	${MODGO_TEST_CMD} ${TEST_TARGET}

.if empty(CONFIGURE_STYLE)
MODGO_post-patch +=	${MODGO_SETUP_WORKSPACE}

.  if !target(do-build)
do-build:
	${MODGO_BUILD_TARGET}
.  endif

.  if !target(do-install)
do-install:
	${MODGO_INSTALL_TARGET}
.  endif

.  if !target(do-test)
do-test:
	${MODGO_TEST_TARGET}
.  endif
.endif
@


1.15
log
@Export PATH so that things using cgo don't die with, for e.g.
exec "cc" not found in path

s/PATH/PORTPATH/ from sthen@@
ok jsing@@ sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.14 2017/01/30 16:58:40 ajacoutot Exp $
d80 1
a80 4
.  if !target(post-patch)
post-patch:
	${MODGO_SETUP_WORKSPACE}
.  endif
@


1.14
log
@Split -ldflags="-s -w" from MODGO_FLAGS and instead:
- create a new MODGO_LDFLAGS variable
- set MODGO_LDFLAGS to "-s -w" by default (no DEBUG)
- add -ldflags="${MODGO_LDFLAGS}" to the build and test CMDs if
  MODGO_LDFLAGS is defined

ok czarkoff@@ jsing@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.13 2016/08/21 14:08:25 czarkoff Exp $
d25 1
a25 1
MODGO_ENV +=		GOPATH="${MODGO_GOPATH}"
@


1.13
log
@make go libraries build- and run-depend on particular version of lang/go

Go libraries should be rebuilt on every lang/go update.  This change adds
runtime dependency on lang/go for ports with "lib" in MODGO_TYPE, and tunes
PKGSPEC to force dependency on exact version of go.

OK jsing@@, "makes sense" sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.12 2016/08/03 09:34:10 ajacoutot Exp $
d30 5
d52 1
a52 1
MODGO_FLAGS +=		-ldflags="-s -w"
@


1.12
log
@Properly strip go binaries when !DEBUG.
On big executables, size drops by ~40%.

with and ok czarkoff@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.11 2016/05/21 01:39:36 czarkoff Exp $
d8 1
a8 1
MODGO_BUILD_DEPENDS =	lang/go>=1.6
d66 4
@


1.11
log
@Allow single go port install both binaries and libraries

OK jsing@@ kspillner@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.10 2016/05/13 06:43:37 jasper Exp $
d43 6
a48 1
MODGO_FLAGS ?=		-x
@


1.10
log
@bump MODGO_BUILD_DEPENDS to lang/go>=1.6

some ports that used to depend on GO15VENDOREXPERIMENT=1 need 1.6 or they
won't build as the usage of that variable has been removed in their Makefiles.

ok czarkoff@@ sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.9 2016/05/08 12:29:17 czarkoff Exp $
d47 2
a48 1
MODGO_INSTALL_TARGET =	${INSTALL_PROGRAM} ${MODGO_WORKSPACE}/bin/* ${PREFIX}/bin
d54 1
a54 1
MODGO_INSTALL_TARGET =	${INSTALL_DATA_DIR} ${MODGO_PACKAGE_PATH} && \
@


1.9
log
@simplify MODGO_CMD environment customization

Clear user's environment with SETENV and provide MODGO_ENV for adding variables
to environment and MODGO_GOPATH for altering GOPATH.

OK ajacoutot@@, jasper@@, kspillner@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.8 2016/05/06 10:04:00 czarkoff Exp $
d8 1
a8 1
MODGO_BUILD_DEPENDS =	lang/go
@


1.8
log
@use INSTALL_DATA instead of cp for go libraries

OK ajacoutot@@ sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.7 2016/05/05 10:46:50 czarkoff Exp $
d24 3
a26 1
MODGO_CMD ?=		unset GOPATH; export GOPATH="${MODGO_WORKSPACE}:${MODGO_PACKAGE_PATH}"; go
@


1.7
log
@Set INSTALL_STRIP= for go ports

OK ajacoutot@@, sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.6 2016/02/28 13:24:16 czarkoff Exp $
d51 7
a57 4
MODGO_INSTALL_TARGET =	${INSTALL_DATA_DIR} ${MODGO_PACKAGE_PATH}; \
			cp -pR ${MODGO_WORKSPACE}/src \
			       ${MODGO_WORKSPACE}/pkg \
				${MODGO_PACKAGE_PATH};
@


1.6
log
@Fix MODGO_INSTALL_TARGET so that timestamps would be preserved.  This should fix
issue with go ports rebuilding their dependencies and failing to install them.

Based on input from Nigel Taylor.

OK ajacoutot@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.5 2016/01/14 15:03:08 jsing Exp $
d43 1
d45 1
a45 1
MODGO_INSTALL_TARGET =	cp ${MODGO_WORKSPACE}/bin/* ${PREFIX}/bin
@


1.5
log
@Rework go.port.mk to install packages in /usr/local/go-pkg and build
without -a, -work and without running things through sed and piping to
shell:

- Install additional packages under /usr/local/go-pkg and include this in
  GOPATH when building. Go considers anything under the GOROOT to be part
  of the standard library, which introduces various problems. In particular
  they do not get rebuilt without the -a flag.

- Using 'go build -a' is unnecessary (at least now that we're not
  installing in GOROOT). Furthermore, the semantics of -a have changed
  between go1.4 and go1.5. In go1.4 the standard library was excluded from
  the -a flag whereas for go1.5 it does mean all dependencies including the
  standard library (this was the same for go1.3). However, there is
  already blanket 'do not rebuild standard library packages' in place when
  the -a flag is NOT specified.

- Avoid -work since it leaves the work directory behind and nothing is
  currently cleaning it up.

- Overall, avoid running 'go install -x' and piping the results through
  sed and sh. Firstly, 'go install -x' is already running those commands,
  then they're being run a second time around via sh. Secondly, there are
  cases where replacing GOROOT is incorrect.

ok jasper@@ sthen@@ kspillner@@ czarkoff@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.4 2015/08/11 20:16:21 jasper Exp $
d51 3
a53 3
			cp -R ${MODGO_WORKSPACE}/pkg \
			    ${MODGO_WORKSPACE}/src \
			    ${MODGO_PACKAGE_PATH};
@


1.4
log
@add lang/go to CATEGORIES

ok czarkoff@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.3 2015/06/12 05:20:48 czarkoff Exp $
d14 4
a17 3
MODGO_PACKAGES =	go/pkg/openbsd_${MACHINE_ARCH:S/i386/386/}
MODGO_SOURCES =		go/src
MODGO_TOOLS =		go/pkg/tool/openbsd_${MACHINE_ARCH:S/i386/386/}
d24 1
a24 1
MODGO_CMD ?=		unset GOPATH; export GOPATH="${MODGO_WORKSPACE}"; go
d40 2
a41 9
# Go tends to ignore environment and place some files to system-wide
# directories.  To prevent such behavior, this modules fixes paths in
# auto-generated build instructions, and then feeds fixed script to shell
# The "operation not permitted" filter is needed because Go outputs permission
# error if USE_SYSTRACE=Yes option is set.
MODGO_BUILD_TARGET =	${MODGO_BUILD_CMD} ${ALL_TARGET} 2>&1 | sed -E \
				-e 's, ${LOCALBASE}/go, ${MODGO_WORKSPACE},' \
				-e '/operation not permitted/d' \
				-e 's,\$$WORK,${WRKBUILD},g' | sh -v
d44 1
a44 2
MODGO_FLAGS ?=		-x -work
MODGO_INSTALL_TARGET += cp ${MODGO_WORKSPACE}/bin/* ${PREFIX}/bin
d50 1
a50 2
MODGO_FLAGS ?=		-a -x -work
MODGO_INSTALL_TARGET =	${INSTALL_DATA_DIR} ${PREFIX}/go; \
d52 2
a53 2
			      ${MODGO_WORKSPACE}/src \
					${PREFIX}/go;
@


1.3
log
@Don't call go with "-a" flag when building binaries.  Allow overriding
MODGO_FLAGS in ports that need to do so.

OK ajacoutot@@, kspillner@@, sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.2 2015/06/08 09:17:04 czarkoff Exp $
d36 2
@


1.2
log
@Refactor lang/go module

From port-modules(5):

     lang/go       Adds Go toolchain support.  Requires ALL_TARGET to be set
                   to canonical Go import path of port.  (Module sets it
                   automatically for ports that use GH_ACCOUNT and GH_PROJECT
                   macros.)

                   During execution of post-patch target module moves source
                   code from ${MODGO_SUBDIR} to ${WRKSRC}, subdirectory of
                   ${MODGO_WORKSPACE} - specially-crafted Go workspace located
                   at ${WRKDIR}/go.  During do-build module calls ``go
                   install'' with GOPATH set to ${MODGO_WORKSPACE}, runs its
                   output through sed to prevent writes outside WRKDIR sandbox
                   and sends output to sh(1).  During do-install it copies
                   executables from ${MODGO_WORKSPACE}/bin to ${PREFIX}/bin,
                   and/or directories ${MODGO_WORKSPACE}/pkg and
                   ${MODGO_WORKSPACE}/src to ${PREFIX}/go, depending on
                   MODGO_TYPE contents.

                   Sets BUILD_DEPENDS, RUN_DEPENDS, ALL_TARGET, TEST_TARGET,
                   ONLY_FOR_ARCHS, SEPARATE_BUILD, and WRKSRC.

                   Defines:

                   MODGO_TYPE       Type of port.  May be any combination of:

                                    bin  ordinary binary, which should be
                                         installed to ${PREFIX}/bin,

                                    lib  library, which should come with
                                         source code.

                                    Defaults to bin.

                   MODGO_WORKSPACE  Path to Go workspace set up for port build
                                    process.  Defaults to ${WRKDIR}/go.  See
                                    Go documentation for details.

                   MODGO_SUBDIR     Path to Go source code within port's
                                    sources tarball.  Defaults to ${WRKDIST}.

                   MODGO_SETUP_WORKSPACE
                                    Commands setting up Go workspace for
                                    building ports.  By default, happens
                                    during execution of post-patch target.

                   MODGO_BUILDDEP   Controls whether contents of
                                    MODGO_BUILD_DEPENDS are appended to port's
                                    BUILD_DEPENDS.  Defaults to Yes.

                   Additionally defines MODGO_PACKAGES, MODGO_SOURCES and
                   MODGO_TOOLS (paths for installed Go packages, sources and
                   tools respectively), MODGO_CMD and MODGO_FLAGS (source code
                   build command and flags passed as its arguments),
                   MODGO_BUILD_CMD and MODGO_TEST_CMD (commands for building
                   and testing go packages; normally called with canonical Go
                   package names as arguments),
                   MODGO_{BUILD,INSTALL,TEST}_TARGET and
                   MODGO_{BUILD,RUN}_DEPENDS.

OK sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: go.port.mk,v 1.1 2015/05/15 07:30:41 jasper Exp $
a23 1
MODGO_FLAGS +=		-a -x -work
a26 4
.if ${MODGO_TYPE:L:Mlib}
RUN_DEPENDS +=		${MODGO_RUN_DEPENDS}
.endif

d47 5
d55 1
a59 3
.endif
.if ${MODGO_TYPE:L:Mbin}
MODGO_INSTALL_TARGET += cp ${MODGO_WORKSPACE}/bin/* ${PREFIX}/bin
@


1.1
log
@add beginnings for a golang module

input and ok jsing@@ kspillner@@ sthen@@
@
text
@d1 1
a1 1
# $OpenBSD$
d14 13
a26 1
GO_PKG ?=		pkg/tool/openbsd_${MACHINE_ARCH:S/i386/386/}
d28 13
a40 1
SUBST_VARS +=		GO_PKG
d42 45
a86 1
GOPATH ?=		"${WRKSRC}:${LOCALBASE}/go"
@

