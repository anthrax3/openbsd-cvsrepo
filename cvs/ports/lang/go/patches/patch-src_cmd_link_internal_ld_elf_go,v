head	1.4;
access;
symbols
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2;
locks; strict;
comment	@# @;


1.4
date	2017.02.23.15.57.42;	author jsing;	state Exp;
branches;
next	1.3;
commitid	tyDwkty62G8hu8ka;

1.3
date	2016.08.18.17.23.03;	author jsing;	state Exp;
branches;
next	1.2;
commitid	3gjN7l5yQTvsZq8b;

1.2
date	2016.05.16.13.50.02;	author jsing;	state Exp;
branches;
next	1.1;
commitid	N66RyVsFkEd9Jwws;

1.1
date	2016.05.13.13.49.26;	author jsing;	state Exp;
branches;
next	;
commitid	g3krlAVqaIA6Dpwv;


desc
@@


1.4
log
@Update lang/go to version 1.8.

ok ajacoutot@@
@
text
@$OpenBSD: patch-src_cmd_link_internal_ld_elf_go,v 1.3 2016/08/18 17:23:03 jsing Exp $
--- src/cmd/link/internal/ld/elf.go.orig	Fri Jan 27 05:54:57 2017
+++ src/cmd/link/internal/ld/elf.go	Mon Jan 23 15:25:39 2017
@@@@ -1894,14 +1894,11 @@@@ func (ctxt *Link) doelf() {
 	Addstring(shstrtab, ".bss")
 	Addstring(shstrtab, ".noptrbss")
 
-	// generate .tbss section (except for OpenBSD where it's not supported)
-	// for dynamic internal linker or external linking, so that various
-	// binutils could correctly calculate PT_TLS size.
-	// see https://golang.org/issue/5200.
-	if Headtype != obj.Hopenbsd {
-		if !*FlagD || Linkmode == LinkExternal {
-			Addstring(shstrtab, ".tbss")
-		}
+	// generate .tbss section for dynamic internal linker or external
+	// linking, so that various binutils could correctly calculate
+	// PT_TLS size. See https://golang.org/issue/5200.
+	if !*FlagD || Linkmode == LinkExternal {
+		Addstring(shstrtab, ".tbss")
 	}
 	if Headtype == obj.Hnetbsd {
 		Addstring(shstrtab, ".note.netbsd.ident")
@@@@ -2525,23 +2522,18 @@@@ func Asmbelf(ctxt *Link, symo int64) {
 		/*
 		 * Thread-local storage segment (really just size).
 		 */
-		// Do not emit PT_TLS for OpenBSD since ld.so(1) does
-		// not currently support it. This is handled
-		// appropriately in runtime/cgo.
-		if Headtype != obj.Hopenbsd {
-			tlssize := uint64(0)
-			for sect := Segdata.Sect; sect != nil; sect = sect.Next {
-				if sect.Name == ".tbss" {
-					tlssize = sect.Length
-				}
+		tlssize := uint64(0)
+		for sect := Segdata.Sect; sect != nil; sect = sect.Next {
+			if sect.Name == ".tbss" {
+				tlssize = sect.Length
 			}
-			if tlssize != 0 {
-				ph := newElfPhdr()
-				ph.type_ = PT_TLS
-				ph.flags = PF_R
-				ph.memsz = tlssize
-				ph.align = uint64(SysArch.RegSize)
-			}
+		}
+		if tlssize != 0 {
+			ph := newElfPhdr()
+			ph.type_ = PT_TLS
+			ph.flags = PF_R
+			ph.memsz = tlssize
+			ph.align = uint64(SysArch.RegSize)
 		}
 	}
 
@


1.3
log
@Upgrade lang/go to 1.7.

ok czarkoff@@ pea@@
@
text
@d1 4
a4 4
$OpenBSD: patch-src_cmd_link_internal_ld_elf_go,v 1.2 2016/05/16 13:50:02 jsing Exp $
--- src/cmd/link/internal/ld/elf.go.orig	Tue Aug  9 05:18:29 2016
+++ src/cmd/link/internal/ld/elf.go	Fri Aug 12 02:51:56 2016
@@@@ -1832,14 +1832,11 @@@@ func doelf() {
d12 2
a13 2
-	if HEADTYPE != obj.Hopenbsd {
-		if Debug['d'] == 0 || Linkmode == LinkExternal {
d18 2
a19 2
+	// PT_TLS size - see https://golang.org/issue/5200.
+	if Debug['d'] == 0 || Linkmode == LinkExternal {
d22 1
a22 1
 	if HEADTYPE == obj.Hnetbsd {
d24 1
a24 1
@@@@ -2431,23 +2428,18 @@@@ func Asmbelf(symo int64) {
d31 1
a31 1
-		if HEADTYPE != obj.Hopenbsd {
@


1.2
log
@Allow lang/go to generate PT_TLS when cgo is used on OpenBSD. This makes
Go 1.6 pass regress on openbsd/386 and openbsd/amd64. Also stop exporting
environ and __progname from cgo, since these symbols are no longer required
by libc.
@
text
@d1 4
a4 4
$OpenBSD: patch-src_cmd_link_internal_ld_elf_go,v 1.1 2016/05/13 13:49:26 jsing Exp $
--- src/cmd/link/internal/ld/elf.go.orig	Sat May 14 02:17:19 2016
+++ src/cmd/link/internal/ld/elf.go	Sat May 14 02:19:21 2016
@@@@ -1730,14 +1730,11 @@@@ func doelf() {
d24 1
a24 1
@@@@ -2359,23 +2356,18 @@@@ func Asmbelf(symo int64) {
d47 1
a47 1
-				ph.align = uint64(Thearch.Regsize)
d55 1
a55 1
+			ph.align = uint64(Thearch.Regsize)
@


1.1
log
@Stop using sigreturn from the Go openbsd/386 signal trampoline - the
sigreturn syscall is going away in future versions of OpenBSD and its
use for Go is already broken due to the trampoline return checks. Instead
just return directly from the signal trampoline (as we have always done
for Go openbsd/amd64).

Also fix a bug in the Go openbsd/386 linker, which results in symbols in
the dynamic symbol table being emitted with a size of zero. With a current
ld.so, this results in symbol mismatch warnings.

Unbreaks the Go port on openbsd/386, however it still fails to pass regress
due to the PT_TLS changes.
@
text
@d1 55
a55 5
$OpenBSD$
--- src/cmd/link/internal/ld/elf.go.orig	Thu May  5 01:30:21 2016
+++ src/cmd/link/internal/ld/elf.go	Thu May  5 01:30:47 2016
@@@@ -2585,8 +2585,8 @@@@ func Elfadddynsym(ctxt *Link, s *LSym) {
 			Addaddr(ctxt, d, s)
d57 1
a58 7
-		/* size */
-		Adduint32(ctxt, d, 0)
+		/* size of object */
+		Adduint32(ctxt, d, uint32(s.Size))
 
 		/* type */
 		t := STB_GLOBAL << 4
@

