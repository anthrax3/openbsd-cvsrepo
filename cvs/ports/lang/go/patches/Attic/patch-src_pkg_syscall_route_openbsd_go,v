head	1.2;
access;
symbols
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2014.12.23.12.21.37;	author jsing;	state dead;
branches;
next	1.1;
commitid	UTHPZ0kIYcUeIOn2;

1.1
date	2014.07.25.14.39.41;	author jsing;	state Exp;
branches;
next	;
commitid	RSdD9tYigIu5WZra;


desc
@@


1.2
log
@Update lang/go to version 1.4.

ok bmercer@@ daniel@@ sthen@@
@
text
@$OpenBSD: patch-src_pkg_syscall_route_openbsd_go,v 1.1 2014/07/25 14:39:41 jsing Exp $
--- src/pkg/syscall/route_openbsd.go.orig	Fri Jul 25 23:38:47 2014
+++ src/pkg/syscall/route_openbsd.go	Fri Jul 25 23:39:20 2014
@@@@ -12,16 +12,16 @@@@ func (any *anyMessage) toRoutingMessage(b []byte) Rout
 	switch any.Type {
 	case RTM_ADD, RTM_DELETE, RTM_CHANGE, RTM_GET, RTM_LOSING, RTM_REDIRECT, RTM_MISS, RTM_LOCK, RTM_RESOLVE:
 		p := (*RouteMessage)(unsafe.Pointer(any))
-		return &RouteMessage{Header: p.Header, Data: b[SizeofRtMsghdr:any.Msglen]}
+		return &RouteMessage{Header: p.Header, Data: b[p.Header.Hdrlen:any.Msglen]}
 	case RTM_IFINFO:
 		p := (*InterfaceMessage)(unsafe.Pointer(any))
-		return &InterfaceMessage{Header: p.Header, Data: b[SizeofIfMsghdr:any.Msglen]}
+		return &InterfaceMessage{Header: p.Header, Data: b[p.Header.Hdrlen:any.Msglen]}
 	case RTM_IFANNOUNCE:
 		p := (*InterfaceAnnounceMessage)(unsafe.Pointer(any))
 		return &InterfaceAnnounceMessage{Header: p.Header}
 	case RTM_NEWADDR, RTM_DELADDR:
 		p := (*InterfaceAddrMessage)(unsafe.Pointer(any))
-		return &InterfaceAddrMessage{Header: p.Header, Data: b[SizeofIfaMsghdr:any.Msglen]}
+		return &InterfaceAddrMessage{Header: p.Header, Data: b[p.Header.Hdrlen:any.Msglen]}
 	}
 	return nil
 }
@


1.1
log
@The size of if_msghdr changed with r1.156 of net/if.h, which means that
the various Sizeof*MsgHdr constants are now incorrect. This results in
various problems when attempting to parse the routing messages. Fix this
by respecting the header length returned from the kernel.

Makes regress pass again...

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
@

