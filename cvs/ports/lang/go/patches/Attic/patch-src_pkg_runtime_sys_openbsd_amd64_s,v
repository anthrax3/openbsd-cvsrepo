head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	jsing_2012-03-31:1.1.1.1
	jsing:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2014.07.25.13.36.55;	author jsing;	state dead;
branches;
next	1.6;
commitid	di0P39dYOpcucHPg;

1.6
date	2013.12.02.15.35.49;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2013.08.25.11.57.27;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2013.05.15.12.10.15;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2013.03.12.09.57.11;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2012.04.15.13.37.27;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.31.12.37.16;	author jsing;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.03.31.12.37.16;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update lang/go to version 1.3.

ok matthew@@ naddy@@ sthen@@
@
text
@$OpenBSD: patch-src_pkg_runtime_sys_openbsd_amd64_s,v 1.6 2013/12/02 15:35:49 jsing Exp $
--- src/pkg/runtime/sys_openbsd_amd64.s.orig	Fri Oct 18 16:13:10 2013
+++ src/pkg/runtime/sys_openbsd_amd64.s	Mon Aug 26 02:35:22 2013
@@@@ -62,7 +62,7 @@@@ TEXT runtime·thrsleep(SB),NOSPLIT,$0
 	MOVQ	24(SP), DX		// arg 3 - tp
 	MOVQ	32(SP), R10		// arg 4 - lock
 	MOVQ	40(SP), R8		// arg 5 - abort
-	MOVL	$300, AX		// sys___thrsleep
+	MOVL	$94, AX			// sys___thrsleep
 	SYSCALL
 	RET
 
@@@@ -130,7 +130,7 @@@@ TEXT runtime·usleep(SB),NOSPLIT,$16
 
 	MOVQ	SP, DI			// arg 1 - rqtp
 	MOVQ	$0, SI			// arg 2 - rmtp
-	MOVL	$240, AX		// sys_nanosleep
+	MOVL	$91, AX			// sys_nanosleep
 	SYSCALL
 	RET
 
@@@@ -138,7 +138,7 @@@@ TEXT runtime·raise(SB),NOSPLIT,$16
 	MOVL	$299, AX		// sys_getthrid
 	SYSCALL
 	MOVQ	AX, DI			// arg 1 - pid
-	MOVL	sig+0(FP), SI			// arg 2 - signum
+	MOVL	sig+0(FP), SI		// arg 2 - signum
 	MOVL	$37, AX			// sys_kill
 	SYSCALL
 	RET
@@@@ -147,7 +147,7 @@@@ TEXT runtime·setitimer(SB),NOSPLIT,$-8
 	MOVL	8(SP), DI		// arg 1 - which
 	MOVQ	16(SP), SI		// arg 2 - itv
 	MOVQ	24(SP), DX		// arg 3 - oitv
-	MOVL	$83, AX			// sys_setitimer
+	MOVL	$69, AX			// sys_setitimer
 	SYSCALL
 	RET
 
@@@@ -155,9 +155,9 @@@@ TEXT runtime·setitimer(SB),NOSPLIT,$-8
 TEXT time·now(SB), NOSPLIT, $32
 	MOVQ	$0, DI			// arg 1 - clock_id
 	LEAQ	8(SP), SI		// arg 2 - tp
-	MOVL	$232, AX		// sys_clock_gettime
+	MOVL	$87, AX			// sys_clock_gettime
 	SYSCALL
-	MOVL	8(SP), AX		// sec
+	MOVQ	8(SP), AX		// sec
 	MOVQ	16(SP), DX		// nsec
 
 	// sec is in AX, nsec in DX
@@@@ -168,9 +168,9 @@@@ TEXT time·now(SB), NOSPLIT, $32
 TEXT runtime·nanotime(SB),NOSPLIT,$24
 	MOVQ	$0, DI			// arg 1 - clock_id
 	LEAQ	8(SP), SI		// arg 2 - tp
-	MOVL	$232, AX		// sys_clock_gettime
+	MOVL	$87, AX			// sys_clock_gettime
 	SYSCALL
-	MOVL	8(SP), AX		// sec
+	MOVQ	8(SP), AX		// sec
 	MOVQ	16(SP), DX		// nsec
 
 	// sec is in AX, nsec in DX
@@@@ -318,7 +318,7 @@@@ TEXT runtime·kevent(SB),NOSPLIT,$0
 	MOVQ	32(SP), R10
 	MOVL	40(SP), R8
 	MOVQ	48(SP), R9
-	MOVL	$270, AX
+	MOVL	$72, AX
 	SYSCALL
 	JCC	2(PC)
 	NEGQ	AX
@


1.6
log
@Update lang/go to Go 1.2.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.5
log
@Make lang/go work past the ABI break, with 64-bit time_t.

Tested by DsP.

ok sthen@@
@
text
@d2 3
a4 3
--- src/pkg/runtime/sys_openbsd_amd64.s.orig	Sun Aug 18 14:12:42 2013
+++ src/pkg/runtime/sys_openbsd_amd64.s	Sun Aug 18 14:42:17 2013
@@@@ -61,7 +61,7 @@@@ TEXT runtime·thrsleep(SB),7,$0
d13 1
a13 1
@@@@ -129,7 +129,7 @@@@ TEXT runtime·usleep(SB),7,$16
d22 1
a22 1
@@@@ -137,7 +137,7 @@@@ TEXT runtime·raise(SB),7,$16
d31 1
a31 1
@@@@ -146,7 +146,7 @@@@ TEXT runtime·setitimer(SB),7,$-8
d40 2
a41 2
@@@@ -154,9 +154,9 @@@@ TEXT runtime·setitimer(SB),7,$-8
 TEXT time·now(SB), 7, $32
d52 2
a53 6
@@@@ -164,12 +164,12 @@@@ TEXT time·now(SB), 7, $32
 	MOVL	DX, nsec+8(FP)
 	RET
 
-TEXT runtime·nanotime(SB),7,$32
+TEXT runtime·nanotime(SB),7,$24
d64 9
@


1.4
log
@Update lang/go to version 1.1.

Also preserve the timestamps of the source and compiled binaries so that
"go build" does not think installed libraries should be recompiled.

ok jasper@@ sthen@@
@
text
@d1 4
a4 66
$OpenBSD: patch-src_pkg_runtime_sys_openbsd_amd64_s,v 1.3 2013/03/12 09:57:11 jsing Exp $
--- src/pkg/runtime/sys_openbsd_amd64.s.orig	Mon Sep 24 05:43:12 2012
+++ src/pkg/runtime/sys_openbsd_amd64.s	Sun Nov 18 03:23:21 2012
@@@@ -8,20 +8,25 @@@@
 
 #include "zasm_GOOS_GOARCH.h"
 
-// int64 rfork_thread(int32 flags, void *stack, M *m, G *g, void (*fn)(void));
-TEXT runtime·rfork_thread(SB),7,$0
-	MOVL	flags+8(SP), DI
-	MOVQ	stack+16(SP), SI
+// int64 tfork_thread(void *stack, M *m, G *g, void (*fn)(void));
+TEXT runtime·tfork_thread(SB),7,$32
 
-	// Copy m, g, fn off parent stack for use by child.
-	MOVQ	mm+24(SP), R8
-	MOVQ	gg+32(SP), R9
-	MOVQ	fn+40(SP), R12
+	// Copy stack, m, g, fn off parent stack for use by child.
+	MOVQ	stack+0(FP), SI
+	MOVQ	mm+8(FP), R8
+	MOVQ	gg+16(FP), R9
+	MOVQ	fn+24(FP), R12
 
-	MOVL	$251, AX		// sys_rfork
+	LEAQ	m_procid(R8), AX
+	MOVQ	SP, DI			// arg 1 - params
+	MOVQ	$0, 0(DI)		//   tf_tcb
+	MOVQ	AX, 8(DI)		//   tf_tid
+	MOVQ	SI, 16(DI)		//   tf_stack
+	MOVQ	$24, SI			// arg 2 - psize
+	MOVL	$8, AX			// sys___tfork
 	SYSCALL
 
-	// Return if rfork syscall failed
+	// Return if tfork syscall failed
 	JCC	3(PC)
 	NEGL	AX
 	RET
@@@@ -31,14 +36,6 @@@@ TEXT runtime·rfork_thread(SB),7,$0
 	JEQ	2(PC)
 	RET
 
-	// In child, on new stack.
-	MOVQ	SI, SP
-
-	// Initialize m->procid to thread ID
-	MOVL	$299, AX		// sys_getthrid
-	SYSCALL
-	MOVQ	AX, m_procid(R8)
-
 	// Set FS to point at m->tls.
 	LEAQ	m_tls(R8), DI
 	CALL	runtime·settls(SB)
@@@@ -53,7 +50,8 @@@@ TEXT runtime·rfork_thread(SB),7,$0
 	CALL	R12
 
 	// It shouldn't return.  If it does, exit
-	MOVL	$302, AX		// sys_threxit
+	MOVQ	$0, DI			// arg 1 - notdead
+	MOVL	$302, AX		// sys___threxit
 	SYSCALL
 	JMP	-3(PC)			// keep exiting
 
@@@@ -67,14 +65,15 @@@@ TEXT runtime·thrsleep(SB),7,$0
 	MOVL	16(SP), SI		// arg 2 - clock_id
d7 3
a9 3
-	MOVL	$300, AX		// sys_thrsleep
+	MOVQ	40(SP), R8		// arg 5 - abort
+	MOVL	$300, AX		// sys___thrsleep
d13 6
a18 5
 TEXT runtime·thrwakeup(SB),7,$0
 	MOVQ	8(SP), DI		// arg 1 - ident
 	MOVL	16(SP), SI		// arg 2 - n
-	MOVL	$301, AX		// sys_thrwakeup
+	MOVL	$301, AX		// sys___thrwakeup
d22 7
a28 3
@@@@ -83,13 +82,14 @@@@ TEXT runtime·exit(SB),7,$-8
 	MOVL	8(SP), DI		// arg 1 - exit status
 	MOVL	$1, AX			// sys_exit
a29 2
-	MOVL	$0xf1, 0xf1  // crash
+	MOVL	$0xf1, 0xf1		// crash
d31 6
a36 5
 
 TEXT runtime·exit1(SB),7,$-8
-	MOVL	$302, AX		// sys_threxit
+	MOVQ	$0, DI			// arg 1 - notdead
+	MOVL	$302, AX		// sys___threxit
a37 2
-	MOVL	$0xf1, 0xf1  // crash
+	MOVL	$0xf1, 0xf1		// crash
d40 10
a49 26
 TEXT runtime·write(SB),7,$-8
@@@@ -140,7 +140,7 @@@@ TEXT time·now(SB), 7, $32
 	MOVL	$116, AX		// sys_gettimeofday
 	SYSCALL
 	MOVQ	8(SP), AX		// sec
-	MOVL	16(SP), DX	// usec
+	MOVL	16(SP), DX		// usec
 
 	// sec is in AX, usec in DX
 	MOVQ	AX, sec+0(FP)
@@@@ -154,7 +154,7 @@@@ TEXT runtime·nanotime(SB),7,$32
 	MOVL	$116, AX		// sys_gettimeofday
 	SYSCALL
 	MOVQ	8(SP), AX		// sec
-	MOVL	16(SP), DX	// usec
+	MOVL	16(SP), DX		// usec
 
 	// sec is in AX, usec in DX
 	// return nsec in AX
@@@@ -170,9 +170,19 @@@@ TEXT runtime·sigaction(SB),7,$-8
 	MOVL	$46, AX
 	SYSCALL
 	JCC	2(PC)
-	MOVL	$0xf1, 0xf1  // crash
+	MOVL	$0xf1, 0xf1		// crash
 	RET
d51 3
a53 19
+TEXT runtime·sigprocmask(SB),7,$0
+	MOVL	8(SP), DI		// arg 1 - how
+	MOVL	12(SP), SI		// arg 2 - set
+	MOVL	$48, AX			// sys_sigprocmask
+	SYSCALL
+	JCC	2(PC)
+	MOVL	$0xf1, 0xf1		// crash
+	MOVL	AX, oset+0(FP)		// Return oset
+	RET
+
 TEXT runtime·sigtramp(SB),7,$64
 	get_tls(BX)
 	
@@@@ -226,7 +236,7 @@@@ TEXT runtime·munmap(SB),7,$0
 	MOVL	$73, AX			// sys_munmap
 	SYSCALL
 	JCC	2(PC)
-	MOVL	$0xf1, 0xf1  // crash
+	MOVL	$0xf1, 0xf1		// crash
d56 10
a65 8
 TEXT runtime·sigaltstack(SB),7,$-8
@@@@ -235,20 +245,17 @@@@ TEXT runtime·sigaltstack(SB),7,$-8
 	MOVQ	$288, AX		// sys_sigaltstack
 	SYSCALL
 	JCC	2(PC)
-	MOVL	$0xf1, 0xf1  // crash
+	MOVL	$0xf1, 0xf1		// crash
 	RET
d67 1
a67 26
 // set tls base to DI
-TEXT runtime·settls(SB),7,$8
+TEXT runtime·settls(SB),7,$0
 	// adjust for ELF: wants to use -16(FS) and -8(FS) for g and m
 	ADDQ	$16, DI
-	MOVQ	DI, 0(SP)
-	MOVQ	SP, SI
-	MOVQ	$12, DI			// AMD64_SET_FSBASE (machine/sysarch.h)
-	MOVQ	$165, AX		// sys_sysarch
+	MOVQ	$329, AX		// sys___settcb
 	SYSCALL
 	JCC	2(PC)
-	MOVL	$0xf1, 0xf1  // crash
+	MOVL	$0xf1, 0xf1		// crash
 	RET
 
 TEXT runtime·sysctl(SB),7,$0
@@@@ -260,7 +267,7 @@@@ TEXT runtime·sysctl(SB),7,$0
 	MOVQ	48(SP), R9		// arg 6 - newlen
 	MOVQ	$202, AX		// sys___sysctl
 	SYSCALL
-	JCC 3(PC)
+	JCC	3(PC)
 	NEGL	AX
 	RET
 	MOVL	$0, AX
@


1.3
log
@Unbreak the lang/go port by switching from the old __tfork syscall that no
longer exists, to the current __tfork syscall. Also use __set_tcb instead
of sysarch.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_pkg_runtime_sys_openbsd_amd64_s,v 1.1.1.1 2012/03/31 12:37:16 jsing Exp $
@


1.2
log
@Use the __tfork() syscall instead of rfork(), which no longer exists.

ok sthen@@
@
text
@d2 3
a4 3
--- src/pkg/runtime/sys_openbsd_amd64.s.orig	Wed Mar 28 15:49:26 2012
+++ src/pkg/runtime/sys_openbsd_amd64.s	Fri Mar  2 02:03:18 2012
@@@@ -8,20 +8,23 @@@@
d26 7
a32 5
+	LEAQ	8(SP), DI
+	MOVQ	$0, 0(DI)		// tf_tcb
+	MOVQ	$0, 8(DI)		// tf_tid
+	MOVL	$0, 16(DI)		// tf_flags
+	MOVL	$328, AX		// sys___tfork
d40 16
a55 1
@@@@ -53,7 +56,8 @@@@ TEXT runtime·rfork_thread(SB),7,$0
d65 1
a65 1
@@@@ -67,14 +71,15 @@@@ TEXT runtime·thrsleep(SB),7,$0
d83 1
a83 1
@@@@ -83,13 +88,14 @@@@ TEXT runtime·exit(SB),7,$-8
d101 1
a101 1
@@@@ -140,7 +146,7 @@@@ TEXT time·now(SB), 7, $32
d110 1
a110 1
@@@@ -154,7 +160,7 @@@@ TEXT runtime·nanotime(SB),7,$32
d119 1
a119 1
@@@@ -170,9 +176,19 @@@@ TEXT runtime·sigaction(SB),7,$-8
d140 1
a140 1
@@@@ -226,7 +242,7 @@@@ TEXT runtime·munmap(SB),7,$0
d149 1
a149 1
@@@@ -235,7 +251,7 @@@@ TEXT runtime·sigaltstack(SB),7,$-8
d158 9
a166 2
@@@@ -248,7 +264,7 @@@@ TEXT runtime·settls(SB),7,$8
 	MOVQ	$165, AX		// sys_sysarch
d174 1
a174 1
@@@@ -260,7 +276,7 @@@@ TEXT runtime·sysctl(SB),7,$0
@


1.1
log
@Initial revision
@
text
@d1 38
a38 4
$OpenBSD$
--- src/pkg/runtime/sys_openbsd_amd64.s.orig	Mon Mar 19 00:13:54 2012
+++ src/pkg/runtime/sys_openbsd_amd64.s	Mon Mar 19 00:13:54 2012
@@@@ -53,7 +53,8 @@@@ TEXT runtime·rfork_thread(SB),7,$0
d48 1
a48 1
@@@@ -67,14 +68,15 @@@@ TEXT runtime·thrsleep(SB),7,$0
d66 1
a66 1
@@@@ -83,13 +85,14 @@@@ TEXT runtime·exit(SB),7,$-8
d84 1
a84 1
@@@@ -140,7 +143,7 @@@@ TEXT time·now(SB), 7, $32
d93 1
a93 1
@@@@ -154,7 +157,7 @@@@ TEXT runtime·nanotime(SB),7,$32
d102 1
a102 1
@@@@ -170,9 +173,19 @@@@ TEXT runtime·sigaction(SB),7,$-8
d123 1
a123 1
@@@@ -226,7 +239,7 @@@@ TEXT runtime·munmap(SB),7,$0
d132 1
a132 1
@@@@ -235,7 +248,7 @@@@ TEXT runtime·sigaltstack(SB),7,$-8
d141 1
a141 1
@@@@ -248,7 +261,7 @@@@ TEXT runtime·settls(SB),7,$8
d150 1
a150 1
@@@@ -260,7 +273,7 @@@@ TEXT runtime·sysctl(SB),7,$0
@


1.1.1.1
log
@Import go-1.

Go is an open source programming environment that makes it easy to build
simple, reliable, and efficient software.

With assistance from sthen@@

ok sthen@@
@
text
@@
