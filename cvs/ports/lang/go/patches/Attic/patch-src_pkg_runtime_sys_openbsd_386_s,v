head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	jsing_2012-03-31:1.1.1.1
	jsing:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2014.07.25.13.36.55;	author jsing;	state dead;
branches;
next	1.6;
commitid	di0P39dYOpcucHPg;

1.6
date	2013.12.02.15.35.49;	author jsing;	state Exp;
branches;
next	1.5;

1.5
date	2013.08.25.11.57.27;	author jsing;	state Exp;
branches;
next	1.4;

1.4
date	2013.05.15.12.10.15;	author jsing;	state dead;
branches;
next	1.3;

1.3
date	2013.03.12.09.57.11;	author jsing;	state Exp;
branches;
next	1.2;

1.2
date	2012.04.15.13.37.27;	author jsing;	state Exp;
branches;
next	1.1;

1.1
date	2012.03.31.12.37.16;	author jsing;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.03.31.12.37.16;	author jsing;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update lang/go to version 1.3.

ok matthew@@ naddy@@ sthen@@
@
text
@$OpenBSD: patch-src_pkg_runtime_sys_openbsd_386_s,v 1.6 2013/12/02 15:35:49 jsing Exp $
--- src/pkg/runtime/sys_openbsd_386.s.orig	Fri Oct 18 16:13:10 2013
+++ src/pkg/runtime/sys_openbsd_386.s	Sun Aug 25 07:26:46 2013
@@@@ -45,21 +45,22 @@@@ TEXT runtime·write(SB),NOSPLIT,$-4
 	INT	$0x80
 	RET
 
-TEXT runtime·usleep(SB),NOSPLIT,$20
+TEXT runtime·usleep(SB),NOSPLIT,$24
 	MOVL	$0, DX
 	MOVL	usec+0(FP), AX
 	MOVL	$1000000, CX
 	DIVL	CX
-	MOVL	AX, 12(SP)		// tv_sec
+	MOVL	AX, 12(SP)		// tv_sec - l32
+	MOVL	$0, 16(SP)		// tv_sec - h32
 	MOVL	$1000, AX
 	MULL	DX
-	MOVL	AX, 16(SP)		// tv_nsec
+	MOVL	AX, 20(SP)		// tv_nsec
 
 	MOVL	$0, 0(SP)
 	LEAL	12(SP), AX
 	MOVL	AX, 4(SP)		// arg 1 - rqtp
 	MOVL	$0, 8(SP)		// arg 2 - rmtp
-	MOVL	$240, AX		// sys_nanosleep
+	MOVL	$91, AX			// sys_nanosleep
 	INT	$0x80
 	RET
 
@@@@ -107,43 +108,46 @@@@ TEXT runtime·madvise(SB),NOSPLIT,$-4
 	RET
 
 TEXT runtime·setitimer(SB),NOSPLIT,$-4
-	MOVL	$83, AX
+	MOVL	$69, AX
 	INT	$0x80
 	RET
 
 // func now() (sec int64, nsec int32)
 TEXT time·now(SB), NOSPLIT, $32
-	MOVL	$232, AX
 	LEAL	12(SP), BX
-	MOVL	$0, 4(SP)
-	MOVL	BX, 8(SP)
+	MOVL	$0, 4(SP)		// arg 1 - clock_id
+	MOVL	BX, 8(SP)		// arg 2 - tp
+	MOVL	$87, AX			// sys_clock_gettime
 	INT	$0x80
-	MOVL	12(SP), AX		// sec
-	MOVL	16(SP), BX		// nsec
 
-	// sec is in AX, nsec in BX
+	MOVL	12(SP), AX		// sec - l32
 	MOVL	AX, sec+0(FP)
-	MOVL	$0, sec+4(FP)
+	MOVL	16(SP), AX		// sec - h32
+	MOVL	AX, sec+4(FP)
+
+	MOVL	20(SP), BX		// nsec
 	MOVL	BX, nsec+8(FP)
 	RET
 
 // int64 nanotime(void) so really
 // void nanotime(int64 *nsec)
 TEXT runtime·nanotime(SB),NOSPLIT,$32
-	MOVL	$232, AX
 	LEAL	12(SP), BX
-	MOVL	$0, 4(SP)
-	MOVL	BX, 8(SP)
+	MOVL	$0, 4(SP)		// arg 1 - clock_id
+	MOVL	BX, 8(SP)		// arg 2 - tp
+	MOVL	$87, AX			// sys_clock_gettime
 	INT	$0x80
-	MOVL	12(SP), AX		// sec
-	MOVL	16(SP), BX		// nsec
 
-	// sec is in AX, nsec in BX
-	// convert to DX:AX nsec
-	MOVL	$1000000000, CX
-	MULL	CX
+	MOVL    16(SP), CX		// sec - h32
+	IMULL   $1000000000, CX
+
+	MOVL    12(SP), AX		// sec - l32
+	MOVL    $1000000000, BX
+	MULL    BX			// result in dx:ax
+
+	MOVL	20(SP), BX		// nsec
 	ADDL	BX, AX
-	ADCL	$0, DX
+	ADCL	CX, DX			// add high bits with carry
 
 	MOVL	ret+0(FP), DI
 	MOVL	AX, 0(DI)
@@@@ -325,7 +329,7 @@@@ TEXT runtime·osyield(SB),NOSPLIT,$-4
 	RET
 
 TEXT runtime·thrsleep(SB),NOSPLIT,$-4
-	MOVL	$300, AX		// sys___thrsleep
+	MOVL	$94, AX			// sys___thrsleep
 	INT	$0x80
 	RET
 
@@@@ -362,7 +366,7 @@@@ TEXT runtime·kqueue(SB),NOSPLIT,$0
 
 // int32 runtime·kevent(int kq, Kevent *changelist, int nchanges, Kevent *eventlist, int nevents, Timespec *timeout);
 TEXT runtime·kevent(SB),NOSPLIT,$0
-	MOVL	$270, AX
+	MOVL	$72, AX
 	INT	$0x80
 	JAE	2(PC)
 	NEGL	AX
@


1.6
log
@Update lang/go to Go 1.2.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.5
log
@Make lang/go work past the ABI break, with 64-bit time_t.

Tested by DsP.

ok sthen@@
@
text
@d2 3
a4 3
--- src/pkg/runtime/sys_openbsd_386.s.orig	Sun Aug 18 14:12:32 2013
+++ src/pkg/runtime/sys_openbsd_386.s	Sun Aug 18 14:38:13 2013
@@@@ -44,21 +44,22 @@@@ TEXT runtime·write(SB),7,$-4
d8 2
a9 2
-TEXT runtime·usleep(SB),7,$20
+TEXT runtime·usleep(SB),7,$24
d31 1
a31 1
@@@@ -106,43 +107,46 @@@@ TEXT runtime·madvise(SB),7,$-4
d34 1
a34 1
 TEXT runtime·setitimer(SB),7,$-4
d41 1
a41 1
 TEXT time·now(SB), 7, $32
d66 1
a66 1
 TEXT runtime·nanotime(SB),7,$32
d96 1
a96 1
@@@@ -322,7 +326,7 @@@@ TEXT runtime·osyield(SB),7,$-4
d99 1
a99 1
 TEXT runtime·thrsleep(SB),7,$-4
d105 9
@


1.4
log
@Update lang/go to version 1.1.

Also preserve the timestamps of the source and compiled binaries so that
"go build" does not think installed libraries should be recompiled.

ok jasper@@ sthen@@
@
text
@d1 4
a4 6
$OpenBSD: patch-src_pkg_runtime_sys_openbsd_386_s,v 1.3 2013/03/12 09:57:11 jsing Exp $
--- src/pkg/runtime/sys_openbsd_386.s.orig	Mon Sep 24 05:43:12 2012
+++ src/pkg/runtime/sys_openbsd_386.s	Sun Nov 18 02:56:11 2012
@@@@ -12,14 +12,16 @@@@
 TEXT runtime·exit(SB),7,$-4
 	MOVL	$1, AX
a5 2
-	MOVL	$0xf1, 0xf1  // crash
+	MOVL	$0xf1, 0xf1		// crash
d8 20
a27 6
-TEXT runtime·exit1(SB),7,$-4
-	MOVL	$302, AX		// sys_threxit
+TEXT runtime·exit1(SB),7,$8
+	MOVL	$0, 0(SP)
+	MOVL	$0, 4(SP)		// arg 1 - notdead
+	MOVL	$302, AX		// sys___threxit
a28 3
 	JAE	2(PC)
-	MOVL	$0xf1, 0xf1  // crash
+	MOVL	$0xf1, 0xf1		// crash
d31 1
a31 7
 TEXT runtime·write(SB),7,$-4
@@@@ -79,7 +81,7 @@@@ TEXT runtime·munmap(SB),7,$-4
 	MOVL	$73, AX			// sys_munmap
 	INT	$0x80
 	JAE	2(PC)
-	MOVL	$0xf1, 0xf1  // crash
+	MOVL	$0xf1, 0xf1		// crash
d35 2
a36 2
@@@@ -132,9 +134,17 @@@@ TEXT runtime·sigaction(SB),7,$-4
 	MOVL	$46, AX			// sys_sigaction
a37 3
 	JAE	2(PC)
-	MOVL	$0xf1, 0xf1  // crash
+	MOVL	$0xf1, 0xf1		// crash
d40 19
a58 7
+TEXT runtime·sigprocmask(SB),7,$-4
+	MOVL	$48, AX			// sys_sigprocmask
+	INT	$0x80
+	JAE	2(PC)
+	MOVL	$0xf1, 0xf1		// crash
+	MOVL	AX, oset+0(FP)
+	RET
d60 2
a61 9
 TEXT runtime·sigtramp(SB),7,$44
 	get_tls(CX)
 
@@@@ -174,45 +184,51 @@@@ TEXT runtime·sigtramp(SB),7,$44
 	MOVL	AX, 4(SP)		// arg 1 - sigcontext
 	MOVL	$103, AX		// sys_sigreturn
 	INT	$0x80
-	MOVL	$0xf1, 0xf1  // crash
+	MOVL	$0xf1, 0xf1		// crash
d64 20
a83 24
-// int32 rfork_thread(int32 flags, void *stack, M *m, G *g, void (*fn)(void));
-TEXT runtime·rfork_thread(SB),7,$8
-	MOVL	flags+8(SP), AX
-	MOVL	stack+12(SP), CX
+// int32 tfork_thread(void *stack, M *m, G *g, void (*fn)(void));
+TEXT runtime·tfork_thread(SB),7,$24
 
 	// Copy m, g, fn off parent stack for use by child.
+	MOVL	stack+4(FP), CX
 	SUBL	$16, CX
-	MOVL	mm+16(SP), SI
+	MOVL	mm+8(FP), SI
 	MOVL	SI, 0(CX)
-	MOVL	gg+20(SP), SI
+	MOVL	gg+12(FP), SI
 	MOVL	SI, 4(CX)
-	MOVL	fn+24(SP), SI
+	MOVL	fn+16(FP), SI
 	MOVL	SI, 8(CX)
 	MOVL	$1234, 12(CX)
-	MOVL	CX, SI
 
+	MOVL	mm+8(FP), DX
+	LEAL	m_procid(CX), DX
d85 3
a87 4
+	LEAL	12(SP), AX
+	MOVL	$0, 0(AX)		// tf_tcb
+	MOVL	DX, 4(AX)		// tf_tid
+	MOVL	CX, 8(AX)		// tf_stack
d89 8
a96 55
 	MOVL	$0, 0(SP)		// syscall gap
-	MOVL	AX, 4(SP)		// arg 1 - flags
-	MOVL	$251, AX		// sys_rfork
+	MOVL	AX, 4(SP)		// arg 1 - params
+	MOVL	$12, 8(SP)		// arg 2 - psize
+	MOVL	$8, AX			// sys___tfork
 	INT	$0x80
 
-	// Return if rfork syscall failed
-	JCC	4(PC)
+	// Return if tfork syscall failed.
+	JCC	5(PC)
 	NEGL	AX
-	MOVL	AX, 48(SP)
+	MOVL	ret+0(FP), DX
+	MOVL	AX, 0(DX)
 	RET
 
 	// In parent, return.
 	CMPL	AX, $0
-	JEQ	3(PC)
-	MOVL	AX, 48(SP)
+	JEQ	4(PC)
+	MOVL	ret+0(FP), DX
+	MOVL	AX, 0(DX)
 	RET
 
-	// In child, on new stack.
-	MOVL    SI, SP
-
 	// Paranoia: check that SP is as we expect.
 	MOVL	12(SP), BP
 	CMPL	BP, $1234
@@@@ -277,16 +293,14 @@@@ TEXT runtime·setldt(SB),7,$8
 
 TEXT runtime·settls(SB),7,$16
 	// adjust for ELF: wants to use -8(GS) and -4(GS) for g and m
-	MOVL	20(SP), CX
+	MOVL	tlsbase+0(FP), CX
 	ADDL	$8, CX
-	MOVL	CX, 0(CX)
 	MOVL	$0, 0(SP)		// syscall gap
-	MOVL	$9, 4(SP)		// I386_SET_GSBASE (machine/sysarch.h)
-	MOVL	CX, 8(SP)		// pointer to base
-	MOVL	$165, AX		// sys_sysarch
+	MOVL	CX, 4(SP)		// arg 1 - pointer to base
+	MOVL	$329, AX		// sys___set_tcb
 	INT	$0x80
 	JCC	2(PC)
-	MOVL	$0xf1, 0xf1  // crash
+	MOVL	$0xf1, 0xf1		// crash
 	RET
 
 TEXT runtime·osyield(SB),7,$-4
@@@@ -295,12 +309,12 @@@@ TEXT runtime·osyield(SB),7,$-4
d100 2
a101 8
-	MOVL	$300, AX		// sys_thrsleep
+	MOVL	$300, AX		// sys___thrsleep
 	INT	$0x80
 	RET
 
 TEXT runtime·thrwakeup(SB),7,$-4
-	MOVL	$301, AX		// sys_thrwakeup
+	MOVL	$301, AX		// sys___thrwakeup
@


1.3
log
@Unbreak the lang/go port by switching from the old __tfork syscall that no
longer exists, to the current __tfork syscall. Also use __set_tcb instead
of sysarch.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_pkg_runtime_sys_openbsd_386_s,v 1.1.1.1 2012/03/31 12:37:16 jsing Exp $
@


1.2
log
@Use the __tfork() syscall instead of rfork(), which no longer exists.

ok sthen@@
@
text
@d2 2
a3 2
--- src/pkg/runtime/sys_openbsd_386.s.orig	Wed Mar 28 15:49:26 2012
+++ src/pkg/runtime/sys_openbsd_386.s	Fri Mar  2 02:14:56 2012
d53 1
a53 1
@@@@ -174,40 +184,46 @@@@ TEXT runtime·sigtramp(SB),7,$44
d66 1
a66 1
+TEXT runtime·tfork_thread(SB),7,$20
d81 1
a81 1
 	MOVL	CX, SI
d83 4
a86 1
+	LEAL	8(SP), AX
d88 2
a89 2
+	MOVL	$0, 4(AX)		// tf_tid
+	MOVL	$0, 8(AX)		// tf_flags
d95 2
a96 1
+	MOVL	$328, AX		// sys___tfork
d118 20
a137 3
 	// In child, on new stack.
@@@@ -286,7 +302,7 @@@@ TEXT runtime·settls(SB),7,$16
 	MOVL	$165, AX		// sys_sysarch
d145 1
a145 1
@@@@ -295,12 +311,12 @@@@ TEXT runtime·osyield(SB),7,$-4
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- src/pkg/runtime/sys_openbsd_386.s.orig	Mon Mar 19 00:13:54 2012
+++ src/pkg/runtime/sys_openbsd_386.s	Mon Mar 19 00:13:54 2012
d53 1
a53 1
@@@@ -174,7 +184,7 @@@@ TEXT runtime·sigtramp(SB),7,$44
d61 55
a115 2
 // int32 rfork_thread(int32 flags, void *stack, M *m, G *g, void (*fn)(void));
@@@@ -286,7 +296,7 @@@@ TEXT runtime·settls(SB),7,$16
d124 1
a124 1
@@@@ -295,12 +305,12 @@@@ TEXT runtime·osyield(SB),7,$-4
@


1.1.1.1
log
@Import go-1.

Go is an open source programming environment that makes it easy to build
simple, reliable, and efficient software.

With assistance from sthen@@

ok sthen@@
@
text
@@
