head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2017.06.04.18.04.03;	author jsing;	state Exp;
branches;
next	;
commitid	7fmwQgU2VIOwEffx;


desc
@@


1.1
log
@Make lang/go work with clang.

This requires three changes:

- OpenBSD clang produces __guard_local symbols that are marked as hidden,
  which causes problems with the go linker. Workaround this by explicitly
  making __guard_local symbols visible when reading in an ELF object.

- OpenBSD clang currently fails to correctly report the compiler runtime
  via --print-libgcc-file-name. Workaround this issue by hardcoding it
  for the time being.

- The TestCgoConsistentResults test passes successfully outside of ports,
  however fails under a ports build. This requires further investigation
  but we can just skip the test for now.
@
text
@$OpenBSD$
--- src/cmd/link/internal/ld/ldelf.go.orig	Thu May 25 04:15:12 2017
+++ src/cmd/link/internal/ld/ldelf.go	Mon Jun  5 01:58:33 2017
@@@@ -9,6 +9,7 @@@@ import (
 	"fmt"
 	"io"
 	"log"
+	"runtime"
 	"sort"
 	"strings"
 )
@@@@ -1053,6 +1054,13 @@@@ func readelfsym(ctxt *Link, elfobj *ElfObj, i int, sym
 				if s != nil && sym.other == 2 {
 					s.Type |= obj.SHIDDEN
 					s.Attr |= AttrDuplicateOK
+				}
+
+				// TODO(jsing): Currently, clang on OpenBSD is generating hidden
+				// __guard_local symbols, which is tripping up the Go linker.
+				// As a workaround, mark the symbol as visible for the time being.
+				if s != nil && runtime.GOOS == "openbsd" && sym.name == "__guard_local" {
+					s.Type &^= obj.SHIDDEN
 				}
 			}
 
@
