head	1.4;
access;
symbols
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.1.0.2
	OPENBSD_6_0_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2017.06.04.18.04.03;	author jsing;	state Exp;
branches;
next	1.3;
commitid	7fmwQgU2VIOwEffx;

1.3
date	2017.02.23.15.57.42;	author jsing;	state Exp;
branches;
next	1.2;
commitid	tyDwkty62G8hu8ka;

1.2
date	2016.08.18.17.23.03;	author jsing;	state Exp;
branches;
next	1.1;
commitid	3gjN7l5yQTvsZq8b;

1.1
date	2016.05.16.13.50.02;	author jsing;	state Exp;
branches;
next	;
commitid	N66RyVsFkEd9Jwws;


desc
@@


1.4
log
@Make lang/go work with clang.

This requires three changes:

- OpenBSD clang produces __guard_local symbols that are marked as hidden,
  which causes problems with the go linker. Workaround this by explicitly
  making __guard_local symbols visible when reading in an ELF object.

- OpenBSD clang currently fails to correctly report the compiler runtime
  via --print-libgcc-file-name. Workaround this issue by hardcoding it
  for the time being.

- The TestCgoConsistentResults test passes successfully outside of ports,
  however fails under a ports build. This requires further investigation
  but we can just skip the test for now.
@
text
@$OpenBSD: patch-src_cmd_link_internal_ld_lib_go,v 1.3 2017/02/23 15:57:42 jsing Exp $
--- src/cmd/link/internal/ld/lib.go.orig	Thu May 25 04:15:12 2017
+++ src/cmd/link/internal/ld/lib.go	Mon Jun  5 01:10:09 2017
@@@@ -563,7 +563,14 @@@@ func (ctxt *Link) loadlib() {
 		}
 		if any {
 			if *flagLibGCC == "" {
-				*flagLibGCC = ctxt.findLibPathCmd("--print-libgcc-file-name", "libgcc")
+				// TODO(jsing): OpenBSD clang currently fails to correctly report
+				// the compiler runtime via --print-libgcc-file-name. Workaround
+				// this issue by hardcoding it for the time being...
+				if runtime.GOOS == "openbsd" && *flagExtld == "clang" {
+					*flagLibGCC = "/usr/lib/libcompiler_rt.a"
+				} else {
+					*flagLibGCC = ctxt.findLibPathCmd("--print-libgcc-file-name", "libgcc")
+				}
 			}
 			if *flagLibGCC != "none" {
 				hostArchive(ctxt, *flagLibGCC)
@@@@ -1958,7 +1965,7 @@@@ func genasmsym(ctxt *Link, put func(*Link, *Symbol, st
 			put(ctxt, s, s.Extname, UndefinedSym, 0, nil)
 
 		case obj.STLSBSS:
-			if Linkmode == LinkExternal && Headtype != obj.Hopenbsd {
+			if Linkmode == LinkExternal {
 				put(ctxt, s, s.Name, TLSSym, Symaddr(s), s.Gotype)
 			}
 		}
@


1.3
log
@Update lang/go to version 1.8.

ok ajacoutot@@
@
text
@d1 20
a20 4
$OpenBSD: patch-src_cmd_link_internal_ld_lib_go,v 1.2 2016/08/18 17:23:03 jsing Exp $
--- src/cmd/link/internal/ld/lib.go.orig	Fri Jan 27 05:54:57 2017
+++ src/cmd/link/internal/ld/lib.go	Mon Jan 23 15:25:57 2017
@@@@ -1950,7 +1950,7 @@@@ func genasmsym(ctxt *Link, put func(*Link, *Symbol, st
@


1.2
log
@Upgrade lang/go to 1.7.

ok czarkoff@@ pea@@
@
text
@d1 5
a5 5
$OpenBSD: patch-src_cmd_link_internal_ld_lib_go,v 1.1 2016/05/16 13:50:02 jsing Exp $
--- src/cmd/link/internal/ld/lib.go.orig	Tue Aug  9 05:18:29 2016
+++ src/cmd/link/internal/ld/lib.go	Fri Aug 12 02:46:38 2016
@@@@ -2023,7 +2023,7 @@@@ func genasmsym(put func(*LSym, string, int, int64, int
 			put(s, s.Extname, 'U', 0, 0, int(s.Version), nil)
d8 1
a8 1
-			if Linkmode == LinkExternal && HEADTYPE != obj.Hopenbsd {
d10 1
a10 1
 				put(s, s.Name, 't', Symaddr(s), s.Size, int(s.Version), s.Gotype)
@


1.1
log
@Allow lang/go to generate PT_TLS when cgo is used on OpenBSD. This makes
Go 1.6 pass regress on openbsd/386 and openbsd/amd64. Also stop exporting
environ and __progname from cgo, since these symbols are no longer required
by libc.
@
text
@d1 4
a4 4
$OpenBSD$
--- src/cmd/link/internal/ld/lib.go.orig	Thu Feb 18 07:35:20 2016
+++ src/cmd/link/internal/ld/lib.go	Sat May 14 02:17:32 2016
@@@@ -1951,7 +1951,7 @@@@ func genasmsym(put func(*LSym, string, int, int64, int
@

