head	1.5;
access;
symbols
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.1.1.1.0.10
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.8
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	dons_2004-May-10:1.1.1.1
	dons:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2010.07.27.18.16.19;	author kili;	state dead;
branches;
next	1.4;

1.4
date	2008.08.28.19.55.20;	author kili;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.29.11.06.25;	author kili;	state Exp;
branches;
next	1.2;

1.2
date	2007.01.05.09.32.50;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.10.04.39.03;	author dons;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.10.04.39.03;	author dons;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to 1.22, fixes the build on i386.

Problem noticed by naddy@@, who also ran regression tests on i386.
@
text
@$OpenBSD: patch-script_harch,v 1.4 2008/08/28 19:55:20 kili Exp $

No harch black magic for OpenBSD, we don't need this.

--- script/harch.orig	Thu Nov 22 11:32:51 2007
+++ script/harch	Fri Nov 23 21:21:36 2007
@@@@ -4,6 +4,9 @@@@
 #		May 1999: ensure that small differences (e.g. kernel version)
 #			  don't matter.
 
+echo OpenBSD
+exit
+
 PROCESSOR=
 OS=
 REL=
@


1.4
log
@
Update to nhc98-1.20.
@
text
@d1 1
a1 1
$OpenBSD: patch-script_harch,v 1.3 2007/06/29 11:06:25 kili Exp $
@


1.3
log
@
Update to 1.18.
Take maintainership.

Note that the powerpc problems will be fixed separately.
@
text
@d1 1
a1 1
$OpenBSD: patch-script_harch,v 1.2 2007/01/05 09:32:50 robert Exp $
d5 6
a10 100
--- script/harch.orig	Wed Mar  9 14:50:46 2005
+++ script/harch	Sat Jun  9 19:04:25 2007
@@@@ -1,97 +1,2 @@@@
 #!/bin/sh
-#       harch - determine canonical processor architecture
-#		Nov 1998: first used.
-#		May 1999: ensure that small differences (e.g. kernel version)
-#			  don't matter.
-
-PROCESSOR=
-OS=
-REL=
-
-#  Unfortunately, there are a variety of incompatible
-#  ways of detecting architecture, so try them all!
-
-if uname >/dev/null 2>&1
-then
-  if uname -p >/dev/null 2>&1
-  then PROCESSOR=`uname -p`
-    case "$PROCESSOR" in
-    unknown|*\ *)
-      PROCESSOR=`uname -m`
-      ;;
-    esac
-  else
-    if arch >/dev/null 2>&1
-    then PROCESSOR=`arch`
-    else PROCESSOR=`uname -m`
-    fi
-  fi
-  OS=`uname -s`
-  REL=`uname -r`
-else
-  if arch >/dev/null 2>&1
-  then PROCESSOR=`arch`
-  else
-    if machine >/dev/null 2>&1
-    then PROCESSOR=`machine`
-    else PROCESSOR='unknown'
-    fi
-  fi
-  OS=unknown
-fi
-
-
-# Remove whitespace and slashes.
-PROCESSOR=`echo $PROCESSOR | tr '/ 	' '.'`
-OS=`echo $OS | tr '/ 	' '-'`
-REL=`echo $REL | tr '/ 	' '-'`
-
-# Canonicalise equivalent processor families to one representative member.
-case $PROCESSOR in
-  i[3456789]86)	PROCESSOR=ix86;;
-  athlon)       PROCESSOR=ix86;;
-  sun3*)	PROCESSOR=sun3;;
-  sun4*)	PROCESSOR=sun4;;
-  sparc*)	PROCESSOR=sparc;;
-esac
-
-# Keep OS release number only if it might be relevant.
-case $OS in
-  unknown)	;;
-  Linux)	;;
-  CYGWIN*)      ;;
-  MINGW*)       ;;
-  *BSD)		;;
-# BSD/OS)	OS="BSD-OS"$REL ;;	-- removed by slash->dash translation.
-  SunOS)	case $REL in
-		  3*) OS=SunOS3;;
-		  4*) OS=SunOS4;;
-		  5*) OS=solaris2;;
-		  6*) OS=solaris3;;
-		  *)  OS=SunOS-$REL;;
-		esac;;
-  Darwin)	case $REL in
-		  5*) OS=Darwin5;;
-		  6*) OS=Darwin6;;
-		  7*) OS=Darwin7;;
-		  8*) OS=Darwin8;;
-		  *)  OS=Darwin-$REL;;
-		esac;;
-  IRIX*)	case $REL in
-		  5*) OS=IRIX5;;
-		  6*) OS=IRIX6;;
-		  *)  OS=IRIX-$REL;;
-		esac;;
-  AIX)		if oslevel >/dev/null 2>&1	# AIX just has to be different
-                then OS=$OS-`oslevel`
-                else OS=$OS-unknown
-                fi
-                if lsattr -EHl proc0 | grep -i powerpc >/dev/null 2>&1
-                then PROCESSOR=powerpc
-                else PROCESSOR=power
-                fi ;;
-  *)		OS=$OS-$REL;;
-esac
-
-# And that's it.
-echo $PROCESSOR-$OS
d12 5
@


1.2
log
@explicitly tell nhc98's build system what architecture type we are
building for; this unbreaks the build on arm and sh;
@
text
@d1 1
a1 1
$OpenBSD: patch-script_harch,v 1.1.1.1 2004/05/10 04:39:03 dons Exp $
d3 1
a3 1
Let PLIST work nicely with MACHINE_ARCH
d5 53
a57 6
--- script/harch.orig	Thu Feb 13 11:08:43 2003
+++ script/harch	Thu Jan  4 19:38:14 2007
@@@@ -48,11 +48,14 @@@@ REL=`echo $REL | tr '/ 	' '-'`
 
 # Canonicalise equivalent processor families to one representative member.
 case $PROCESSOR in
d60 46
a105 11
+  i[3456789]86)	PROCESSOR=i386;;
+  athlon)       PROCESSOR=i386;;
   sun3*)	PROCESSOR=sun3;;
   sun4*)	PROCESSOR=sun4;;
   sparc*)	PROCESSOR=sparc;;
+  macppc*)	PROCESSOR=powerpc;;
+  armish*)	PROCESSOR=arm;;
+  landisk*)	PROCESSOR=sh;;
 esac
 
 # Keep OS release number only if it might be relevant.
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 3
--- script/harch.orig	2003-02-14 05:08:43.000000000 +1100
+++ script/harch	2004-05-07 12:08:49.000000000 +1000
@@@@ -48,11 +48,12 @@@@ REL=`echo $REL | tr '/ 	' '-'`
d19 2
@


1.1.1.1
log
@Import nhc98-1.16, a portable Haskell compiler:

	nhc98 is a small, easy to install, standards-compliant
	compiler for Haskell 98, the lazy functional programming
	language. It is very portable, and aims to produce small
	executables that run in small amounts of memory. It
	produces medium-fast code, and compilation is itself quite
	fast. It also comes with extensive tool support for
	automatic compilation, foreign language interfacing,
	heap and time profiling, tracing, and debugging.  (Some of
	its advanced kinds of heap profiles are not found in any
	other Haskell compiler.) 

testing, tweaks xsa@@; ok pvalchev@@
@
text
@@
