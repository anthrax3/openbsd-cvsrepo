head	1.4;
access;
symbols
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.6
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.2
	OPENBSD_4_5_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2011.07.13.08.03.32;	author jasper;	state dead;
branches;
next	1.3;

1.3
date	2010.09.16.22.36.08;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.23.13.56.26;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2008.10.18.12.03.56;	author djm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Retire this version of the 2.x family. All ports either use the
default (2.7) or are using an even older version (2.4/2.5) so 2.6 can go.

ok sthen@@ rpointel@@
@
text
@$OpenBSD: patch-Lib_test_test_signal_py,v 1.3 2010/09/16 22:36:08 fgsch Exp $

workarounds for breakage caused by libpthread

--- Lib/test/test_signal.py.orig	Thu Jun  3 17:04:47 2010
+++ Lib/test/test_signal.py	Mon Aug 30 13:50:39 2010
@@@@ -364,6 +364,12 @@@@ class SiginterruptTest(unittest.TestCase):
         a false value for the second argument, when that signal arrives, it
         does not interrupt a syscall that's in progress.
         """
+        if sys.platform.startswith('openbsd'):
+            if test_support.verbose:
+                sys.stderr.write('skipping -- siginterrupt not reliable (does '
+                                 'not mix well with threading) on %s\n' %
+                                 sys.platform)
+            return
         signal.siginterrupt(self.signum, 0)
         i = self.readpipe_interrupted()
         self.assertFalse(i)
@@@@ -463,10 +469,11 @@@@ class ItimerTest(unittest.TestCase):
 
     def test_itimer_prof(self):
         # Issue 3864, unknown if this affects earlier versions of freebsd also
-        if sys.platform=='freebsd6':
+        if sys.platform=='freebsd6' or sys.platform.startswith('openbsd'):
             if test_support.verbose:
                 sys.stderr.write('skipping -- itimer not reliable (does not '
-                                 'mix well with threading) on freebsd6\n')
+                                 'mix well with threading) on %s\n' %
+                                 sys.platform)
             return
         self.itimer = signal.ITIMER_PROF
         signal.signal(signal.SIGPROF, self.sig_prof)
@


1.3
log
@Update Python to 2.6.6. Tested by many.
sthen@@ ok
@
text
@d1 1
a1 1
$OpenBSD: patch-Lib_test_test_signal_py,v 1.2 2010/07/23 13:56:26 sthen Exp $
@


1.2
log
@Update Python to 2.6.5, committing on behalf of fgsch@@ whose laptop is broken.
@
text
@d1 1
a1 1
$OpenBSD: patch-Lib_test_test_signal_py,v 1.1 2008/10/18 12:03:56 djm Exp $
d5 16
a20 14
--- Lib/test/test_signal.py.orig	Mon Nov  9 19:59:08 2009
+++ Lib/test/test_signal.py	Thu Jun 17 13:04:43 2010
@@@@ -291,6 +291,9 @@@@ class SiginterruptTest(unittest.TestCase):
         self.assertEquals(i, True)
 
     def test_siginterrupt_off(self):
+        # XXX broken by libpthread's internal hooking of signals
+        return
+
         i=self.readpipe_interrupted(lambda: signal.siginterrupt(self.signum, 0))
         self.assertEquals(i, False)
 
@@@@ -377,6 +380,9 @@@@ class ItimerTest(unittest.TestCase):
         self.assertEquals(self.hndl_called, True)
d23 9
a31 3
+        # XXX broken by libpthread's internal use of SIGPROF
+        return
+
a33 1
         signal.setitimer(self.itimer, 0.2, 0.2)
@


1.1
log
@port of Python-2.6, with 100% fewer build knobs!

Thanks to Ian Darwin, Will Maier and Aleksander Piotrowski for feedback
@
text
@d1 1
a1 1
$OpenBSD$
d5 2
a6 2
--- Lib/test/test_signal.py.orig	Mon Apr  7 09:04:28 2008
+++ Lib/test/test_signal.py	Sun Sep 28 05:09:28 2008
d17 1
a17 1
@@@@ -370,6 +373,9 @@@@ class ItimerTest(unittest.TestCase):
@

