head	1.5;
access;
symbols
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.0.2
	OPENBSD_3_1_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2005.05.22.12.01.13;	author alek;	state dead;
branches;
next	1.4;

1.4
date	2003.12.30.22.21.25;	author sturm;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.08.02.52.25;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2002.05.11.21.35.13;	author matt;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2002.02.15.19.42.18;	author matt;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.10.11.23.50.40;	author brad;	state Exp;
branches;
next	;

1.2.2.1
date	2002.10.08.03.08.45;	author brad;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Please use lang/python/2.3

ok mbalmer@@, xsa@@, krw@@ and others too
@
text
@$OpenBSD: patch-setup_py,v 1.4 2003/12/30 22:21:25 sturm Exp $
--- setup.py.orig	2003-05-22 19:36:54.000000000 +0200
+++ setup.py	2003-12-30 19:16:00.000000000 +0100
@@@@ -808,7 +808,7 @@@@ def main():
           ext_modules=[Extension('struct', ['structmodule.c'])],
 
           # Scripts to install
-          scripts = ['Tools/scripts/pydoc']
+          scripts = []
         )
 
 # --install-platlib
@


1.4
log
@update to python 2.2.3, lots of bugfixes

from Aleksander Piotrowski <aleksander dot piotrowski at nic dot com dot pl>
@
text
@d1 1
a1 1
$OpenBSD: patch-setup_py,v 1.3 2002/10/08 02:52:25 brad Exp $
@


1.3
log
@Fix security issue with Python 2.1/2.2

Zack Weinberg found a vulnerability in the way the exevpe() method
from the os.py module uses a temporary file name. A file which
supposedly should not exist is created in a unsafe way and the method
tries to execute it. The objective of such code is to discover what
error the operating system returns in a portable way.

By exploiting this vulnerability a local attacker can execute
arbitrary code with the privileges of the user running python code
which uses the execvpe() method.

http://python.org/sf/590294
http://python.org/sf/601077
@
text
@d1 4
a4 13
$OpenBSD: patch-setup_py,v 1.2 2002/05/11 21:35:13 matt Exp $
--- setup.py.orig	Tue Mar 26 08:43:04 2002
+++ setup.py	Mon Oct  7 22:19:31 2002
@@@@ -273,8 +273,6 @@@@ class PyBuildExt(build_ext):
         exts.append( Extension('pwd', ['pwdmodule.c']) )
         # grp(3)
         exts.append( Extension('grp', ['grpmodule.c']) )
-        # posix (UNIX) errno values
-        exts.append( Extension('errno', ['errnomodule.c']) )
         # select(2); not on ancient System V
         exts.append( Extension('select', ['selectmodule.c']) )
 
@@@@ -793,7 +791,8 @@@@ def main():
a8 1
+          #scripts = ['Tools/scripts/pydoc']
@


1.2
log
@- 2.2 -> 2.2.1
- annotate patches submitted to Python patch tracker
- 100% license compliance: install CHANGES.OpenBSD file
@
text
@d1 1
a1 1
$OpenBSD: patch-setup_py,v 1.1 2002/02/15 19:42:18 matt Exp $
d3 11
a13 2
+++ setup.py	Fri Apr 19 09:05:16 2002
@@@@ -793,7 +793,8 @@@@ def main():
@


1.2.2.1
log
@Fix security issue with Python 2.1/2.2

Zack Weinberg found a vulnerability in the way the exevpe() method
from the os.py module uses a temporary file name. A file which
supposedly should not exist is created in a unsafe way and the method
tries to execute it. The objective of such code is to discover what
error the operating system returns in a portable way.

By exploiting this vulnerability a local attacker can execute
arbitrary code with the privileges of the user running python code
which uses the execvpe() method.

http://python.org/sf/590294
http://python.org/sf/601077
@
text
@d1 1
a1 1
$OpenBSD: patch-setup_py,v 1.2 2002/05/11 21:35:13 matt Exp $
d3 2
a4 11
+++ setup.py	Mon Oct  7 22:19:31 2002
@@@@ -273,8 +273,6 @@@@ class PyBuildExt(build_ext):
         exts.append( Extension('pwd', ['pwdmodule.c']) )
         # grp(3)
         exts.append( Extension('grp', ['grpmodule.c']) )
-        # posix (UNIX) errno values
-        exts.append( Extension('errno', ['errnomodule.c']) )
         # select(2); not on ancient System V
         exts.append( Extension('select', ['selectmodule.c']) )
 
@@@@ -793,7 +791,8 @@@@ def main():
@


1.1
log
@Python 2.1.2 and Python 2.2.

Major changes:

- no more threads flavor, threads is now the default.

- subpackage modules that depend on other packages instead of having
largely redundant flavors (unless platform has no shared libs, then
flavors count again)

- shared libpython stuff disabled until someone can figure out why
it makes Zope crash
@
text
@d1 4
a4 4
$OpenBSD$
--- setup.py.orig	Mon Dec 17 12:24:43 2001
+++ setup.py	Fri Feb  8 22:24:15 2002
@@@@ -784,7 +784,8 @@@@ def main():
@


1.1.2.1
log
@Fix security issue with Python 2.1/2.2

Zack Weinberg found a vulnerability in the way the exevpe() method
from the os.py module uses a temporary file name. A file which
supposedly should not exist is created in a unsafe way and the method
tries to execute it. The objective of such code is to discover what
error the operating system returns in a portable way.

By exploiting this vulnerability a local attacker can execute
arbitrary code with the privileges of the user running python code
which uses the execvpe() method.

http://python.org/sf/590294
http://python.org/sf/601077
@
text
@d1 1
a1 1
$OpenBSD: patch-setup_py,v 1.1 2002/02/15 19:42:18 matt Exp $
d3 2
a4 11
+++ setup.py	Fri Oct 11 19:17:19 2002
@@@@ -268,8 +268,6 @@@@ class PyBuildExt(build_ext):
         exts.append( Extension('pwd', ['pwdmodule.c']) )
         # grp(3)
         exts.append( Extension('grp', ['grpmodule.c']) )
-        # posix (UNIX) errno values
-        exts.append( Extension('errno', ['errnomodule.c']) )
         # select(2); not on ancient System V
         exts.append( Extension('select', ['selectmodule.c']) )
 
@@@@ -784,7 +782,8 @@@@ def main():
@


