head	1.9;
access;
symbols
	OPENBSD_3_0:1.8.0.2
	OPENBSD_3_0_BASE:1.8
	OPENBSD_2_9_TRACKING_SWITCH:1.8
	OPENBSD_2_9:1.7.0.2
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.1.1.0.8
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.6
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.4
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.2
	OPENBSD_2_3_BASE:1.1.1.1
	python-1_5:1.1.1.1
	python:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2002.02.15.19.42.19;	author matt;	state dead;
branches;
next	1.8;

1.8
date	2001.06.05.17.00.22;	author jasoni;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.19.06.59.12;	author jasoni;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.13.05.26.48;	author jasoni;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.20.22.15.30;	author jasoni;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.20.21.57.35;	author jasoni;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.08.07.55.54;	author jasoni;	state Exp;
branches;
next	1.2;

1.2
date	99.12.13.04.53.03;	author jasoni;	state Exp;
branches;
next	1.1;

1.1
date	98.01.24.22.33.52;	author don;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.01.24.22.33.52;	author don;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Python 2.1.2 and Python 2.2.

Major changes:

- no more threads flavor, threads is now the default.

- subpackage modules that depend on other packages instead of having
largely redundant flavors (unless platform has no shared libs, then
flavors count again)

- shared libpython stuff disabled until someone can figure out why
it makes Zope crash
@
text
@# -*- makefile -*-
# The file Setup is used by the makesetup script to construct the files
# Makefile and config.c, from Makefile.pre and config.c.in,
# respectively.  The file Setup itself is initially copied from
# Setup.dist; once it exists it will not be overwritten, so you can edit
# Setup to your heart's content.  Note that Makefile.pre is created
# from Makefile.pre.in by the toplevel configure script.

# (VPATH notes: Setup and Makefile.pre are in the build directory, as
# are Makefile and config.c; the *.in and *.dist files are in the source
# directory.)

# Each line in this file describes one or more optional modules.
# Modules enabled here will not be compiled by the setup.py script,
# so the file can be used to override setup.py's behavior.

# Lines have the following structure:
#
# <module> ... [<sourcefile> ...] [<cpparg> ...] [<library> ...]
#
# <sourcefile> is anything ending in .c (.C, .cc, .c++ are C++ files)
# <cpparg> is anything starting with -I, -D, -U or -C
# <library> is anything ending in .a or beginning with -l or -L
# <module> is anything else but should be a valid Python
# identifier (letters, digits, underscores, beginning with non-digit)
#
# (As the makesetup script changes, it may recognize some other
# arguments as well, e.g. *.so and *.sl as libraries.  See the big
# case statement in the makesetup script.)
#
# Lines can also have the form
#
# <name> = <value>
#
# which defines a Make variable definition inserted into Makefile.in
#
# Finally, if a line contains just the word "*shared*" (without the
# quotes but with the stars), then the following modules will not be
# included in the config.c file, nor in the list of objects to be
# added to the library archive, and their linker options won't be
# added to the linker options, but rules to create their .o files and
# their shared libraries will still be added to the Makefile, and
# their names will be collected in the Make variable SHAREDMODS.  This
# is used to build modules as shared libraries.  (They can be
# installed using "make sharedinstall", which is implied by the
# toplevel "make install" target.)  (For compatibility,
# *noconfig* has the same effect as *shared*.)
#
# In addition, *static* reverses this effect (negating a previous
# *shared* line).

# NOTE: As a standard policy, as many modules as can be supported by a
# platform should be present.  The distribution comes with all modules
# enabled that are supported by most platforms and don't require you
# to ftp sources from elsewhere.


# Some special rules to define PYTHONPATH.
# Edit the definitions below to indicate which options you are using.
# Don't add any whitespace or comments!

# Directories where library files get installed.
# DESTLIB is for Python modules; MACHDESTLIB for shared libraries.
DESTLIB=$(LIBDEST)
MACHDESTLIB=$(BINLIBDEST)

# NOTE: all the paths are now relative to the prefix that is computed
# at run time!

# Standard path -- don't edit.
# No leading colon since this is the first entry.
# Empty since this is now just the runtime prefix.
DESTPATH=

# Site specific path components -- should begin with : if non-empty
SITEPATH=

# Standard path components for test modules
TESTPATH=

# Path components for machine- or system-dependent modules and shared libraries
MACHDEPPATH=:plat-$(MACHDEP)

# Path component for the Tkinter-related modules
# The TKPATH variable is always enabled, to save you the effort.
TKPATH=:lib-tk

COREPYTHONPATH=$(DESTPATH)$(SITEPATH)$(TESTPATH)$(MACHDEPPATH)$(TKPATH)
PYTHONPATH=$(COREPYTHONPATH)


# The modules listed here can't be built as shared libraries for
# various reasons; therefore they are listed here instead of in the
# normal order.

# This only contains the minimal set of modules required to run the 
# setup.py script in the root of the Python source tree.

posix posixmodule.c		# posix (UNIX) system calls
_sre _sre.c			# Fredrik Lundh's new regular expressions

# The rest of the modules listed in this file are all commented out by
# default.  Usually they can be detected and built as dynamically
# loaded modules by the new setup.py script added in Python 2.1.  If
# you're on a platform that doesn't support dynamic loading, want to 
# compile modules statically into the Python binary, or need to 
# specify some odd set of compiler switches, you can uncomment the 
# appropriate lines below.

# ======================================================================

# The SGI specific GL module:

GLHACK=-Dclear=__GLclear
#gl glmodule.c cgensupport.c -I$(srcdir) $(GLHACK) -lgl -lX11

# Pure module.  Cannot be linked dynamically.
# -DWITH_QUANTIFY, -DWITH_PURIFY, or -DWITH_ALL_PURE
#WHICH_PURE_PRODUCTS=-DWITH_ALL_PURE
#PURE_INCLS=-I/usr/local/include
#PURE_STUBLIBS=-L/usr/local/lib -lpurify_stubs -lquantify_stubs
#pure puremodule.c $(WHICH_PURE_PRODUCTS) $(PURE_INCLS) $(PURE_STUBLIBS)

# Uncommenting the following line tells makesetup that all following
# modules are to be built as shared libraries (see above for more
# detail; also note that *static* reverses this effect):

@@NOSHARED@@*shared*

# GNU readline.  Unlike previous Python incarnations, GNU readline is
# now incorporated in an optional module, configured in the Setup file
# instead of by a configure script switch.  You may have to insert a
# -L option pointing to the directory where libreadline.* lives,
# and you may have to change -ltermcap to -ltermlib or perhaps remove
# it, depending on your system -- see the GNU readline instructions.
# It's okay for this to be a shared library, too.

readline readline.c -lreadline -ltermcap


# Modules that should always be present (non UNIX dependent):

array arraymodule.c	# array objects
cmath cmathmodule.c # -lm # complex math library functions
math mathmodule.c # -lm # math library functions, e.g. sin()
struct structmodule.c	# binary structure packing/unpacking
time timemodule.c # -lm # time operations and variables
operator operator.c	# operator.add() and similar goodies
_weakref _weakref.c	# basic weak reference support
_codecs _codecsmodule.c	# access to the builtin codecs and codec registry
_testcapi _testcapimodule.c    # Python C API test module

unicodedata unicodedata.c    # static Unicode character database

_locale _localemodule.c  # access to ISO C locale support


# Modules with some UNIX dependencies -- on by default:
# (If you have a really backward UNIX, select and socket may not be
# supported...)

fcntl fcntlmodule.c	# fcntl(2) and ioctl(2)
pwd pwdmodule.c		# pwd(3) 
grp grpmodule.c		# grp(3)
errno errnomodule.c	# posix (UNIX) errno values
select selectmodule.c	# select(2); not on ancient System V

# Memory-mapped files (also works on Win32).
mmap mmapmodule.c

# Dynamic readlines
#xreadlines xreadlinesmodule.c

# for socket(2), without SSL support.
#_socket socketmodule.c

# Socket module compiled with SSL support; you must comment out the other
# socket line above, and possibly edit the SSL variable:
#SSL=/usr/local/ssl
_socket socketmodule.c \
	-DUSE_SSL -I/usr/include/ssl -lssl -lcrypto

# The crypt module is now disabled by default because it breaks builds
# on many systems (where -lcrypt is needed), e.g. Linux (I believe).
#
# First, look at Setup.config; configure may have set this for you.

crypt cryptmodule.c # -lcrypt	# crypt(3); needs -lcrypt on some systems


# Some more UNIX dependent modules -- off by default, since these
# are not supported by all UNIX systems:

#nis nismodule.c -lnsl	# Sun yellow pages -- not everywhere
termios termios.c	# Steen Lumholt's termios module
resource resource.c	# Jeremy Hylton's rlimit interface


# Multimedia modules -- off by default.
# These don't work for 64-bit platforms!!!
# These represent audio samples or images as strings:

@@NO64BIT@@audioop audioop.c	# Operations on audio samples
@@NO64BIT@@imageop imageop.c	# Operations on images
@@NO64BIT@@rgbimg rgbimgmodule.c	# Read SGI RGB image files (but coded portably)


# The md5 module implements the RSA Data Security, Inc. MD5
# Message-Digest Algorithm, described in RFC 1321.  The necessary files
# md5c.c and md5.h are included here.

md5 md5module.c md5c.c


# The sha module implements the SHA checksum algorithm.
# (NIST's Secure Hash Algorithm.)
sha shamodule.c


# The mpz module interfaces to the GNU Multiple Precision library.
# You need to ftp the GNU MP library.  
# The GMP variable must point to the GMP source directory.
# This was originally written and tested against GMP 1.2 and 1.3.2.
# It has been modified by Rob Hooft to work with 2.0.2 as well, but I
# haven't tested it recently.

# A compatible MP library unencombered by the GPL also exists.  It was
# posted to comp.sources.misc in volume 40 and is widely available from
# FTP archive sites. One URL for it is:
# ftp://gatekeeper.dec.com/.b/usenet/comp.sources.misc/volume40/fgmp/part01.Z

#GMP=/ufs/guido/src/gmp
#mpz mpzmodule.c -I$(GMP) $(GMP)/libgmp.a
mpz mpzmodule.c -I${LOCALBASE}/include -L${LOCALBASE}/lib -lgmp


# SGI IRIX specific modules -- off by default.

# These module work on any SGI machine:

# *** gl must be enabled higher up in this file ***
#fm fmmodule.c $(GLHACK) -lfm -lgl		# Font Manager
#sgi sgimodule.c			# sgi.nap() and a few more

# This module requires the header file
# /usr/people/4Dgifts/iristools/include/izoom.h:
#imgfile imgfile.c -limage -lgutil -lgl -lm	# Image Processing Utilities


# These modules require the Multimedia Development Option (I think):

#al almodule.c -laudio			# Audio Library
#cd cdmodule.c -lcdaudio -lds -lmediad	# CD Audio Library
#cl clmodule.c -lcl -lawareaudio	# Compression Library
#sv svmodule.c yuvconvert.c -lsvideo -lXext -lX11	# Starter Video


# The FORMS library, by Mark Overmars, implements user interface
# components such as dialogs and buttons using SGI's GL and FM
# libraries.  You must ftp the FORMS library separately from
# ftp://ftp.cs.ruu.nl/pub/SGI/FORMS.  It was tested with FORMS 2.2a.
# NOTE: if you want to be able to use FORMS and curses simultaneously
# (or both link them statically into the same binary), you must
# compile all of FORMS with the cc option "-Dclear=__GLclear".

# The FORMS variable must point to the FORMS subdirectory of the forms
# toplevel directory:

#FORMS=/ufs/guido/src/forms/FORMS
#fl flmodule.c -I$(FORMS) $(GLHACK) $(FORMS)/libforms.a -lfm -lgl


# SunOS specific modules -- off by default:

#sunaudiodev sunaudiodev.c


# A Linux specific module -- off by default; this may also work on 
# some *BSDs.

#linuxaudiodev linuxaudiodev.c


# George Neville-Neil's timing module:

timing timingmodule.c


# The _tkinter module.
#
# The command for _tkinter is long and site specific.  Please
# uncomment and/or edit those parts as indicated.  If you don't have a
# specific extension (e.g. Tix or BLT), leave the corresponding line
# commented out.  (Leave the trailing backslashes in!  If you
# experience strange errors, you may want to join all uncommented
# lines and remove the backslashes -- the backslash interpretation is
# done by the shell's "read" command and it may not be implemented on
# every system.

# *** Always uncomment this (leave the leading underscore in!):
# _tkinter _tkinter.c tkappinit.c -DWITH_APPINIT \
# *** Uncomment and edit to reflect where your Tcl/Tk libraries are:
#	-L/usr/local/lib \
# *** Uncomment and edit to reflect where your Tcl/Tk headers are:
#	-I/usr/local/include \
# *** Uncomment and edit to reflect where your X11 header files are:
#	-I/usr/X11R6/include \
# *** Or uncomment this for Solaris:
#	-I/usr/openwin/include \
# *** Uncomment and edit for Tix extension only:
#	-DWITH_TIX -ltix8.1.8.2 \
# *** Uncomment and edit for BLT extension only:
#	-DWITH_BLT -I/usr/local/blt/blt8.0-unoff/include -lBLT8.0 \
# *** Uncomment and edit for PIL (TkImaging) extension only:
#     (See http://www.pythonware.com/products/pil/ for more info)
#	-DWITH_PIL -I../Extensions/Imaging/libImaging  tkImaging.c \
# *** Uncomment and edit for TOGL extension only:
#	-DWITH_TOGL togl.c \
# *** Uncomment and edit to reflect your Tcl/Tk versions:
#	-ltk8.2 -ltcl8.2 \
# *** Uncomment and edit to reflect where your X11 libraries are:
#	-L/usr/X11R6/lib \
# *** Or uncomment this for Solaris:
#	-L/usr/openwin/lib \
# *** Uncomment these for TOGL extension only:
#	-lGL -lGLU -lXext -lXmu \
# *** Uncomment for AIX:
#	-lld \
# *** Always uncomment this; X11 libraries to link with:
#	-lX11

# Lance Ellinghaus's modules:

rotor rotormodule.c		# enigma-inspired encryption
syslog syslogmodule.c		# syslog daemon interface


# Curses support, requring the System V version of curses, often
# provided by the ncurses library.  e.g. on Linux, link with -lncurses
# instead of -lcurses; on SunOS 4.1.3, insert -I/usr/5include
# -L/usr/5lib before -lcurses).
#
# First, look at Setup.config; configure may have set this for you.

_curses _cursesmodule.c -lcurses -ltermcap
# Wrapper for the panel library that's part of ncurses and SYSV curses.
_curses_panel _curses_panel.c -lpanel -lcurses 


# Tommy Burnette's 'new' module (creates new empty objects of certain kinds):

new newmodule.c


# Generic (SunOS / SVR4) dynamic loading module.
# This is not needed for dynamic loading of Python modules --
# it is a highly experimental and dangerous device for calling
# *arbitrary* C functions in *arbitrary* shared libraries:

#dl dlmodule.c


# Modules that provide persistent dictionary-like semantics.  You will
# probably want to arrange for at least one of them to be available on
# your machine, though none are defined by default because of library
# dependencies.  The Python module anydbm.py provides an
# implementation independent wrapper for these; dumbdbm.py provides
# similar functionality (but slower of course) implemented in Python.

# The standard Unix dbm module has been moved to Setup.config so that
# it will be compiled as a shared library by default.  Compiling it as
# a built-in module causes conflicts with the pybsddb3 module since it
# creates a static dependency on an out-of-date version of db.so.
#
# First, look at Setup.config; configure may have set this for you.

dbm dbmmodule.c 	# dbm(3) may require -lndbm or similar

# Anthony Baxter's gdbm module.  GNU dbm(3) will require -lgdbm:
#
# First, look at Setup.config; configure may have set this for you.

#gdbm gdbmmodule.c -I/usr/local/include -L/usr/local/lib -lgdbm


# Berkeley DB interface.
#
# This requires the Berkeley DB code, see
# ftp://ftp.cs.berkeley.edu/pub/4bsd/db.1.85.tar.gz
#
# Edit the variables DB and DBPORT to point to the db top directory
# and the subdirectory of PORT where you built it.
#
# (See http://electricrain.com/greg/python/bsddb3/ for an interface to
# BSD DB 3.x.)

# Note: If a db.h file is found by configure, bsddb will be enabled
# automatically via Setup.config.in.  It only needs to be enabled here
# if it is not automatically enabled there; check the generated
# Setup.config before enabling it here.

#DB=/depot/sundry/src/berkeley-db/db.1.85
#DBPORT=$(DB)/PORT/irix.5.3
#bsddb bsddbmodule.c -I$(DBPORT)/include -I$(DBPORT) $(DBPORT)/libdb.a



# Helper module for various ascii-encoders
binascii binascii.c

# Fred Drake's interface to the Python parser
parser parsermodule.c

# Digital Creations' cStringIO and cPickle
cStringIO cStringIO.c
cPickle cPickle.c


# Lee Busby's SIGFPE modules.
# The library to link fpectl with is platform specific.
# Choose *one* of the options below for fpectl:

# For SGI IRIX (tested on 5.3):
#fpectl fpectlmodule.c -lfpe

# For Solaris with SunPro compiler (tested on Solaris 2.5 with SunPro C 4.2):
# (Without the compiler you don't have -lsunmath.)
#fpectl fpectlmodule.c -R/opt/SUNWspro/lib -lsunmath -lm

# For other systems: see instructions in fpectlmodule.c.
fpectl fpectlmodule.c

# Test module for fpectl.  No extra libraries needed.
fpetest fpetestmodule.c

# Andrew Kuchling's zlib module.
# This require zlib 1.1.3 (or later).
# See http://www.cdrom.com/pub/infozip/zlib/
zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz

# Interface to the Expat XML parser
#
# Expat is written by James Clark and must be downloaded separately
# (see below).  The pyexpat module was written by Paul Prescod after a
# prototype by Jack Jansen.
#
# The Expat dist includes Windows .lib and .dll files.  Home page is at
# http://www.jclark.com/xml/expat.html, the current production release is
# always ftp://ftp.jclark.com/pub/xml/expat.zip.
#
# EXPAT_DIR, below, should point to the expat/ directory created by
# unpacking the Expat source distribution.
#
# Note: the expat build process doesn't yet build a libexpat.a; you can
# do this manually while we try convince the author to add it.  To do so,
# cd to EXPAT_DIR, run "make" if you have not done so, then run:
#
#    ar cr libexpat.a xmltok/*.o xmlparse/*.o
#
#EXPAT_DIR=/usr/local/src/expat
#pyexpat pyexpat.c -I$(EXPAT_DIR)/xmlparse -L$(EXPAT_DIR) -lexpat


# Example -- included for reference only:
# xx xxmodule.c

@


1.8
log
@Upgrade to Python v2.1.
@
text
@@


1.7
log
@- depend on gmp port
@
text
@d5 1
a5 1
# Setup.in; once it exists it will not be overwritten, so you can edit
d10 1
a10 1
# are Makefile and config.c; the *.in files are in the source
d14 3
a16 1
# Comment out lines to suppress modules.
d84 4
d96 2
a97 1
# Some modules that are normally always on:
a98 2
regex regexmodule.c regexpr.c	# Regular expressions, GNU Emacs style
pcre pcremodule.c pypcre.c	# Regular expressions, Perl style (for re.py)
a99 1
signal signalmodule.c		# signal(2)
d102 10
a145 1
strop stropmodule.c	# fast string operations implemented in C
d149 1
d151 1
d153 1
a153 3
unicodedata unicodedata.c unicodedatabase.c
                        # static Unicode character database
ucnhash ucnhash.c # Unicode Character Name expansion hash table
a166 1
#_socket socketmodule.c	# socket(2)
d171 8
a178 1
# Socket module compiled with SSL support; you must edit the SSL variable:
a179 3
#_socket socketmodule.c \
#	-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
#	-L$(SSL)/lib -lssl -lcrypto
d185 3
d233 1
d278 2
a279 1
# Linux specific modules -- off by default:
a290 3
# The TKPATH variable is always enabled, to save you the effort.
TKPATH=:lib-tk

d302 2
d311 1
a311 1
#	-DWITH_TIX -ltix4.1.8.0 \
d315 1
a318 2
# *** Uncomment and edit to reflect where your Tcl/Tk libraries are:
#	-L/usr/local/lib \
d320 1
a320 1
#	-ltk8.0 -ltcl8.0 \
d342 2
d346 2
a347 1

d370 6
a375 1
# The standard Unix dbm module:
d380 2
a407 3
# David Wayne Williams' soundex module (obsolete -- this will disappear!)
#soundex soundex.c

d466 1
@


1.6
log
@- Remove Python 2.0 from python2, this was a mistake.
- Move Python 2.0 to python.
- Remove Python 1.6
@
text
@d214 1
a214 1
mpz mpzmodule.c /usr/lib/libgmp.a
@


1.5
log
@- Revert back to Python 1.6
- 2.0 will be imported separately
@
text
@a102 2
# The thread module is now automatically enabled, see Setup.thread.

d140 1
a152 1
mmap mmapmodule.c       # Memory-mapped files (also works on Win32)
d154 4
a157 2
socket socketmodule.c	# socket(2); not on ancient System V
#_socket socketmodule.c	# socket(2); use this one for BeOS sockets
d161 1
a161 1
#socket socketmodule.c \
d164 2
d169 1
a169 1
#crypt cryptmodule.c # -lcrypt	# crypt(3); needs -lcrypt on some systems
d186 1
a186 1
@@NO64BIT@@rgbimg rgbimgmodule.c   # Read SGI RGB image files (but coded portably)
d319 3
a321 3
# Lance's curses module.  This requires the System V version of
# curses, sometimes known as ncurses (e.g. on Linux, link with
# -lncurses instead of -lcurses; on SunOS 4.1.3, insert -I/usr/5include
d365 7
a371 2
# (See http://www.jenkon-dev.com/~rd/python/ for an interface to
# BSD DB 2.1.0.)
d425 8
a432 2
# (Note: the expat build process doesn't yet build a libexpat.a; you can
# do this manually while we try convince the author to add it.)
d434 1
a434 1
#EXPAT_DIR=/usr/local/src/expat/
@


1.4
log
@- Update to Python 2.0
@
text
@d103 2
a141 1
ucnhash ucnhash.c # Unicode Character Name expansion hash table
d154 1
d156 2
a157 4
#_socket socketmodule.c	# socket(2)

# Memory-mapped files (also works on Win32).
mmap mmapmodule.c
d161 1
a161 1
#_socket socketmodule.c \
a163 2
_socket socketmodule.c \
	-DUSE_SSL -I/usr/include/ssl -lssl -lcrypto
d167 1
a167 1
crypt cryptmodule.c # -lcrypt	# crypt(3); needs -lcrypt on some systems
d184 1
a184 1
@@NO64BIT@@rgbimg rgbimgmodule.c	# Read SGI RGB image files (but coded portably)
d317 3
a319 3
# Curses support, requring the System V version of curses, often
# provided by the ncurses library.  e.g. on Linux, link with -lncurses
# instead of -lcurses; on SunOS 4.1.3, insert -I/usr/5include
d363 2
a364 7
# (See http://electricrain.com/greg/python/bsddb3/ for an interface to
# BSD DB 3.x.)

# Note: If a db.h file is found by configure, bsddb will be enabled
# automatically via Setup.config.in.  It only needs to be enabled here
# if it is not automatically enabled there; check the generated
# Setup.config before enabling it here.
d418 2
a419 8
# EXPAT_DIR, below, should point to the expat/ directory created by
# unpacking the Expat source distribution.
#
# Note: the expat build process doesn't yet build a libexpat.a; you can
# do this manually while we try convince the author to add it.  To do so,
# cd to EXPAT_DIR, run "make" if you have not done so, then run:
#
#    ar cr libexpat.a xmltok/*.o xmlparse/*.o
d421 1
a421 1
#EXPAT_DIR=/usr/local/src/expat
@


1.3
log
@- Update to Python 1.6
@
text
@a102 2
# The thread module is now automatically enabled, see Setup.thread.

d140 1
a152 1
mmap mmapmodule.c       # Memory-mapped files (also works on Win32)
d154 4
a157 2
socket socketmodule.c	# socket(2); not on ancient System V
#_socket socketmodule.c	# socket(2); use this one for BeOS sockets
d161 1
a161 1
#socket socketmodule.c \
d164 2
d169 1
a169 1
#crypt cryptmodule.c # -lcrypt	# crypt(3); needs -lcrypt on some systems
d186 1
a186 1
@@NO64BIT@@rgbimg rgbimgmodule.c   # Read SGI RGB image files (but coded portably)
d319 3
a321 3
# Lance's curses module.  This requires the System V version of
# curses, sometimes known as ncurses (e.g. on Linux, link with
# -lncurses instead of -lcurses; on SunOS 4.1.3, insert -I/usr/5include
d365 7
a371 2
# (See http://www.jenkon-dev.com/~rd/python/ for an interface to
# BSD DB 2.1.0.)
d425 8
a432 2
# (Note: the expat build process doesn't yet build a libexpat.a; you can
# do this manually while we try convince the author to add it.)
d434 1
a434 1
#EXPAT_DIR=/usr/local/src/expat/
@


1.2
log
@- Update to v 1.5.2.
- Clean up and remove FreeBSD stuff.
@
text
@d82 1
a82 1
COREPYTHONPATH=$(DESTPATH)$(SITEPATH)$(TESTPATH)$(MACHDEPPATH)$(STDWINPATH)$(TKPATH)
d96 1
d138 1
d140 4
a143 1
#_locale _localemodule.c  # access to ISO C locale support
d153 2
d158 6
a163 1
errno errnomodule.c	# posix (UNIX) errno values
d173 1
a173 1
nis nismodule.c 	# Sun yellow pages -- not everywhere
a186 20
# The stdwin module provides a simple, portable (between X11 and Mac)
# windowing interface.  You need to ftp the STDWIN library, e.g. from
# ftp://ftp.cwi.nl/pub/stdwin.  (If you get it elsewhere, be sure to
# get version 1.0 or higher!)  The STDWIN variable must point to the
# STDWIN toplevel directory.

# Uncomment and edit as needed:
#STDWIN=/ufs/guido/src/stdwin

# Uncomment these lines:
#STDWINPATH=:lib-stdwin
#LIBTEXTEDIT=$(STDWIN)/$(MACHDEP)/Packs/textedit/libtextedit.a
#LIBX11STDWIN=$(STDWIN)/$(MACHDEP)/Ports/x11/libstdwin.a
#stdwin stdwinmodule.c -I$(STDWIN)/H $(LIBTEXTEDIT) $(LIBX11STDWIN) -lX11

# Use this instead of the last two lines above for alphanumeric stdwin:
#LIBALFASTDWIN=$(STDWIN)/$(MACHDEP)/Ports/alfa/libstdwin.a
#stdwin stdwinmodule.c -I$(STDWIN)/H $(LIBTEXTEDIT) $(LIBALFASTDWIN) -ltermcap


d211 2
a212 2
#GMP=/usr/src/gnu/lib/libgmp
#mpz mpzmodule.c -I$(GMP) $(GMP)/libgmp.a
d256 5
d322 1
a322 1
curses cursesmodule.c -lcurses -ltermcap
d369 1
a369 1
bsddb bsddbmodule.o
d407 16
@


1.1
log
@Initial revision
@
text
@d1 1
d25 4
d35 11
a45 3
# Finally, if a line has the literal form
#
# *shared*
d47 2
a48 9
# (that is including the '*' and '*' !) then the following modules will
# not be included in the config.c file, nor in the list of objects to be
# added to the library archive, and their linker options won't be added 
# to the linker options, but rules to create their .o files and their
# shared libraries will still be added to the Makefile, and their
# names will be collected in the Make variable SHAREDMODS.  This is
# used to build modules as shared libraries.  (They must be installed
# using "make sharedinstall".)  (For compatibility, *noconfig* has the
# same effect as *shared*.)
d69 1
a69 1
# No leading colon since this is the first entry
d73 2
a74 2
# Site specific path insertions -- should begin with : if non-empty
SITEPATH=:NumPy
d76 2
a77 2
# Standard enabled (tests are always available)
TESTPATH=:test
d79 1
a79 1
# Path for machine- or system-dependent modules (and shared libraries)
a92 1
reop reopmodule.c		# Additional RE support (for re1.py)
d99 2
a100 1
#gl glmodule.c -lgl -lX11	# Graphics Library -- SGI only
d102 1
a102 3
# Thread module -- use only if Python has thread support for your OS.
# Note that you must have configured (and built!) Python with the
# --with-thread option passed to the configure script for this to work:
d104 6
a109 1
#thread threadmodule.c
d113 1
a113 3
# detail):

#*shared*
d115 1
d125 1
a125 1
#readline readline.c -lreadline -ltermcap
d131 2
a132 2
cmath cmathmodule.c	# complex math library functions
math mathmodule.c -lm	# math library functions, e.g. sin()
d135 1
a135 1
time timemodule.c	# time operations and variables
a147 1
crypt cryptmodule.c 	# crypt(3); needs -lcrypt on some systems
d150 1
d153 4
a156 1
*shared*
a160 1
dbm dbmmodule.c 	# dbm(3) may require -lndbm or similar
d170 3
a172 3
audioop audioop.c	# Operations on audio samples
imageop imageop.c	# Operations on images
rgbimg rgbimgmodule.c   # Read SGI RGB image files (but coded portably)
d185 1
a185 1
#STDWINPATH=:$(DESTLIB)/stdwin
d202 5
d219 2
a220 2
#GMP=/ufs/guido/src/gmp
#mpz mpzmodule.c -lgmp
d228 1
a228 1
#fm fmmodule.c -lfm -lgl		# Font Manager
d233 1
a233 2

#imgfile imgfile.c -limage -lgutil -lm	# Image Processing Utilities
d248 4
d256 1
a256 1
#fl flmodule.c -I$(FORMS) $(FORMS)/libforms.a -lfm -lgl
a282 2
_tkinter _tkinter.c tkappinit.c -DWITH_APPINIT -I${X11BASE}/include -I${PREFIX}/include/tcl8.0 -I${PREFIX}/include/tk8.0 -L${PREFIX}/lib -ltk80 -ltcl80 -L${X11BASE}/lib -lX11

d285 3
a287 1
# *** Uncommend and edit to reflect where your X11 header files are:
a290 2
# *** Uncomment and edit to reflect where your Tcl/Tk headers are:
#	-I/usr/local/include \
a296 2
# *** Uncomment and edit for Mesa (what's Mesa?):
#	-lGL -lGLU -lMesatk -lMesaaux \
d307 4
d312 1
a312 2
#	-lX11 -lXext -lXmu

d331 1
a331 1
#new newmodule.c
d342 12
a353 2
# Anthony Baxter's gdbm module (derived from Jack's dbm module)
# GNU dbm(3) will require -lgdbm:
d365 3
d369 3
a371 3
#DB=/depot/sundry/src/db.1.85/
#DBPORT=$(DB)/PORT/sunos.5.2
#bsddb bsddbmodule.o -I$(DB)/include -I$(DBPORT) $(DBPORT)/libdb.a
d375 1
a375 2

# David Wayne Williams' soundex module
d381 2
a382 2
# Fred Drake's interface to the Python parser.
#parser parsermodule.c
d407 3
a409 2
# This require zlib 1.0.4 (or later).  See http://quest.jpl.nasa.gov/zlib/
zlib zlibmodule.c -lz
@


1.1.1.1
log
@Initial import
@
text
@@
