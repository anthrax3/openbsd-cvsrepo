head	1.2;
access;
symbols
	OPENBSD_4_4:1.1.1.1.0.14
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.12
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.10
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.8
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.6
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.4
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.2
	OPENBSD_3_8_BASE:1.1.1.1
	alek_20050607:1.1.1.1
	alek:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2009.01.01.21.03.27;	author djm;	state dead;
branches;
next	1.1;

1.1
date	2005.06.07.01.12.55;	author alek;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.06.07.01.12.55;	author alek;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Updates and garbage collect all three Python ports:

    2.4.4 => 2.4.8
    2.5.2 => 2.5.4
    2.6 => 2.6.1

Python 2.4 and 2.5 lose their build knobs to match 2.6.

Removes no longer needed Python 2.5 security patches backported
from the release25-maint SVN branch.

Remove the -bz2 subpackage from all three versions. It is silly
to make a subpackage to avoid depending on something tiny and
compatibly licensed.

Python 2.4 and 2.5 lose their -expat subpackages; expat has been
in base for some time.

Python 2.5 loses its sqlite subpackge. Again, sqlite is tiny,
compatibly licensed and is depended upon by more and more
applications. This brings it into line with the 2.6 version.

Rework all three version's handling of setup.py. Rather than regex
replacing LOCALBASE and X11BASE into setup.py post-configure, these
are passed in though environment variables. Will save hours of
frustrated cursing familiar to anyone who has accidently used the
update-patches target after configure and had to go back and redo
all the substitutions.

Rework the patching of setup.py for 2.4 and 2.5 to be more like
what we do for 2.6. I.e. keep the diff minimal and avoid deleting
huge blocks of code, so the diff has a chance of applying without
massive hand-editing each patch release.

Fix .py paths in installed .pyc files (patch from eric@@)

feedback from several, particularly eric@@, ajacoutot@@ and Ingo
Schwarze; "get it in" ajacoutot@@
@
text
@Python is an interpreted, interactive, object-oriented programming
language that combines remarkable power with very clear syntax. For
an introduction to programming in Python you are referred to the
Python Tutorial. The Python Library Reference documents built-in
and standard types, constants, functions and modules. Finally, the
Python Reference Manual describes the syntax and semantics of the
core language in (perhaps too) much detail.

Python's basic power can be extended with your own modules written
in C or C++.  On most systems such modules may be dynamically loaded.
Python is also adaptable as an extension language for existing
applications. See the internal documentation for hints.

This package contains the Berkeley db module.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import python 2.4

Python is an interpreted, interactive, object-oriented
programming language that combines remarkable power with
very clear syntax.

tested by djm@@ and mpech@@ (but more tests are needed!)
mbalmer@@ and xsa@@ want it to go in
@
text
@@
