head	1.7;
access;
symbols
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.1.1.1.0.6
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.4
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.2
	OPENBSD_3_8_BASE:1.1.1.1
	alek_20050607:1.1.1.1
	alek:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2011.12.20.13.08.07;	author fgsch;	state dead;
branches;
next	1.6;

1.6
date	2011.07.18.15.32.18;	author naddy;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.15.20.55.24;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.01.21.03.27;	author djm;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.28.10.06.25;	author bernd;	state Exp;
branches;
next	1.2;

1.2
date	2006.11.01.20.38.37;	author alek;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.07.01.12.58;	author alek;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.06.07.01.12.58;	author alek;	state Exp;
branches;
next	;


desc
@@


1.7
log
@RIP python2.4.
jasper@@ ok
@
text
@$OpenBSD: patch-setup_py,v 1.6 2011/07/18 15:32:18 naddy Exp $
--- setup.py.orig	Sun Oct  8 11:41:25 2006
+++ setup.py	Mon Jul 18 08:25:57 2011
@@@@ -17,6 +17,11 @@@@ from distutils.command.install_lib import install_lib
 # This global variable is used to hold the list of modules to be disabled.
 disabled_module_list = []
 
+def usrlocal(p):
+    return os.path.join(os.environ['LOCALBASE'], p)
+def usrx11r6(p):
+    return os.path.join(os.environ['X11BASE'], p)
+
 def add_dir_to_list(dirlist, dir):
     """Add the directory 'dir' to the list 'dirlist' (at the front) if
     1) 'dir' is not already in 'dirlist'
@@@@ -240,8 +245,8 @@@@ class PyBuildExt(build_ext):
 
     def detect_modules(self):
         # Ensure that /usr/local is always used
-        add_dir_to_list(self.compiler.library_dirs, '/usr/local/lib')
-        add_dir_to_list(self.compiler.include_dirs, '/usr/local/include')
+        add_dir_to_list(self.compiler.library_dirs, usrlocal('lib'))
+        add_dir_to_list(self.compiler.include_dirs, usrlocal('include'))
 
         # Add paths to popular package managers on OS X/darwin
         if sys.platform == "darwin":
@@@@ -485,9 +490,7 @@@@ class PyBuildExt(build_ext):
                                depends = ['socketmodule.h']) )
         # Detect SSL support for the socket module (via _ssl)
         ssl_incs = find_file('openssl/ssl.h', inc_dirs,
-                             ['/usr/local/ssl/include',
-                              '/usr/contrib/ssl/include/'
-                             ]
+                             [ ]
                              )
         if ssl_incs is not None:
             krb5_h = find_file('krb5.h', inc_dirs,
@@@@ -495,8 +498,7 @@@@ class PyBuildExt(build_ext):
             if krb5_h:
                 ssl_incs += krb5_h
         ssl_libs = find_library_file(self.compiler, 'ssl',lib_dirs,
-                                     ['/usr/local/ssl/lib',
-                                      '/usr/contrib/ssl/lib/'
+                                     [
                                      ] )
 
         if (ssl_incs is not None and
@@@@ -522,9 +524,9 @@@@ class PyBuildExt(build_ext):
         #
         # http://www.sleepycat.com/update/index.html
 
-        max_db_ver = (4, 4)
+        max_db_ver = (4, 7)
         min_db_ver = (3, 2)
-        db_setup_debug = False   # verbose debug prints from this script?
+        db_setup_debug = True   # verbose debug prints from this script?
 
         # construct a list of paths to look for the header file in on
         # top of the normal inc_dirs.
@@@@ -570,6 +572,7 @@@@ class PyBuildExt(build_ext):
                 std_variants.append(os.path.join(dn, "db3.%d"%x))
 
         db_inc_paths = std_variants + db_inc_paths
+        db_inc_paths = [ usrlocal('include/db4') ]
 
         db_ver_inc_map = {}
 
@@@@ -600,7 +603,7 @@@@ class PyBuildExt(build_ext):
                             if db_setup_debug: print "db.h: ignoring", d
                     else:
                         # ignore this header, it didn't contain a version number
-                        if db_setup_debug: print "db.h: unsupported version", db_ver, "in", d
+                        if db_setup_debug: print "db.h: no version in", d
 
             db_found_vers = db_ver_inc_map.keys()
             db_found_vers.sort()
@@@@ -617,12 +620,14 @@@@ class PyBuildExt(build_ext):
                     os.path.join(db_incdir, '..', '..', 'lib'),
                 ]
                 db_dirs_to_check = filter(os.path.isdir, db_dirs_to_check)
+                db_dirs_to_check = [ usrlocal('lib/db4') ]
 
                 # Look for a version specific db-X.Y before an ambiguoius dbX
                 # XXX should we -ever- look for a dbX name?  Do any
                 # systems really not name their library by version and
                 # symlink to more general names?
                 for dblib in (('db-%d.%d' % db_ver),
+                              ('db'),
                               ('db%d%d' % db_ver),
                               ('db%d' % db_ver[0])):
                     dblib_file = self.compiler.find_library_file(
@@@@ -814,10 +819,8 @@@@ class PyBuildExt(build_ext):
                               define_macros = define_macros,
                               include_dirs = [expatinc],
                               sources = ['pyexpat.c',
-                                         'expat/xmlparse.c',
-                                         'expat/xmlrole.c',
-                                         'expat/xmltok.c',
                                          ],
+                              libraries = ['expat'],
                               ))
 
         # Hye-Shik Chang's CJKCodecs modules.
@@@@ -842,6 +845,9 @@@@ class PyBuildExt(build_ext):
 
         if platform in ('linux2', 'freebsd4', 'freebsd5', 'freebsd6'):
             exts.append( Extension('ossaudiodev', ['ossaudiodev.c']) )
+        if platform.startswith('openbsd'):
+            exts.append( Extension('ossaudiodev', ['ossaudiodev.c'],
+                                   libraries=['ossaudio']) )
 
         if platform == 'sunos5':
             # SunOS specific modules
@@@@ -996,7 +1002,7 @@@@ class PyBuildExt(build_ext):
         # For 8.4a2, the X11 headers are not included. Rather than include a
         # complicated search, this is a hard-coded path. It could bail out
         # if X11 libs are not found...
-        include_dirs.append('/usr/X11R6/include')
+        include_dirs.append(usrx11r6('include'))
         frameworks = ['-framework', 'Tcl', '-framework', 'Tk']
 
         ext = Extension('_tkinter', ['_tkinter.c', 'tkappinit.c'],
@@@@ -1025,8 +1031,7 @@@@ class PyBuildExt(build_ext):
         # The versions with dots are used on Unix, and the versions without
         # dots on Windows, for detection by cygwin.
         tcllib = tklib = tcl_includes = tk_includes = None
-        for version in ['8.5', '85', '8.4', '84', '8.3', '83', '8.2',
-                        '82', '8.1', '81', '8.0', '80']:
+        for version in ['85']:
             tklib = self.compiler.find_library_file(lib_dirs, 'tk' + version)
             tcllib = self.compiler.find_library_file(lib_dirs, 'tcl' + version)
             if tklib and tcllib:
@@@@ -1067,17 +1072,9 @@@@ class PyBuildExt(build_ext):
         if platform == 'sunos5':
             include_dirs.append('/usr/openwin/include')
             added_lib_dirs.append('/usr/openwin/lib')
-        elif os.path.exists('/usr/X11R6/include'):
-            include_dirs.append('/usr/X11R6/include')
-            added_lib_dirs.append('/usr/X11R6/lib64')
-            added_lib_dirs.append('/usr/X11R6/lib')
-        elif os.path.exists('/usr/X11R5/include'):
-            include_dirs.append('/usr/X11R5/include')
-            added_lib_dirs.append('/usr/X11R5/lib')
-        else:
-            # Assume default location for X11
-            include_dirs.append('/usr/X11/include')
-            added_lib_dirs.append('/usr/X11/lib')
+        elif True:
+            include_dirs.append(usrx11r6('include'))
+            added_lib_dirs.append(usrx11r6('lib'))
 
         # If Cygwin, then verify that X is installed before proceeding
         if platform == 'cygwin':
@@@@ -1224,8 +1221,7 @@@@ def main():
           ext_modules=[Extension('struct', ['structmodule.c'])],
 
           # Scripts to install
-          scripts = ['Tools/scripts/pydoc', 'Tools/scripts/idle',
-                     'Lib/smtpd.py']
+          scripts = []
         )
 
 # --install-platlib
@


1.6
log
@fix build after after 4.9->5.0; with help from rpointel@@
@
text
@d1 1
a1 1
$OpenBSD: patch-setup_py,v 1.5 2010/11/15 20:55:24 sthen Exp $
@


1.5
log
@use tk.port.mk and move -tkinter to a more recent version of Tcl/Tk.
reads fine to fgsch@@
@
text
@d1 3
a3 3
$OpenBSD: patch-setup_py,v 1.4 2009/01/01 21:03:27 djm Exp $
--- setup.py.orig	Mon Oct  9 03:41:25 2006
+++ setup.py	Fri Dec 26 13:14:40 2008
d108 1
a108 1
+        if platform in ('openbsd4'):
@


1.4
log
@Updates and garbage collect all three Python ports:

    2.4.4 => 2.4.8
    2.5.2 => 2.5.4
    2.6 => 2.6.1

Python 2.4 and 2.5 lose their build knobs to match 2.6.

Removes no longer needed Python 2.5 security patches backported
from the release25-maint SVN branch.

Remove the -bz2 subpackage from all three versions. It is silly
to make a subpackage to avoid depending on something tiny and
compatibly licensed.

Python 2.4 and 2.5 lose their -expat subpackages; expat has been
in base for some time.

Python 2.5 loses its sqlite subpackge. Again, sqlite is tiny,
compatibly licensed and is depended upon by more and more
applications. This brings it into line with the 2.6 version.

Rework all three version's handling of setup.py. Rather than regex
replacing LOCALBASE and X11BASE into setup.py post-configure, these
are passed in though environment variables. Will save hours of
frustrated cursing familiar to anyone who has accidently used the
update-patches target after configure and had to go back and redo
all the substitutions.

Rework the patching of setup.py for 2.4 and 2.5 to be more like
what we do for 2.6. I.e. keep the diff minimal and avoid deleting
huge blocks of code, so the diff has a chance of applying without
massive hand-editing each patch release.

Fix .py paths in installed .pyc files (patch from eric@@)

feedback from several, particularly eric@@, ajacoutot@@ and Ingo
Schwarze; "get it in" ajacoutot@@
@
text
@d1 1
a1 1
$OpenBSD$
d129 1
a129 1
+        for version in ['84']:
@


1.3
log
@Use xenocara expat.
@
text
@d1 48
a48 5
$OpenBSD: patch-setup_py,v 1.2 2006/11/01 20:38:37 alek Exp $
--- setup.py.orig	Sun Oct  8 19:41:25 2006
+++ setup.py	Tue Apr 24 14:01:43 2007
@@@@ -521,141 +521,13 @@@@ class PyBuildExt(build_ext):
         # of available releases can be found at
d51 1
a51 1
-
d53 2
a54 1
-        min_db_ver = (3, 2)
d56 16
a71 75
-
-        # construct a list of paths to look for the header file in on
-        # top of the normal inc_dirs.
-        db_inc_paths = [
-            '/usr/include/db4',
-            '/usr/local/include/db4',
-            '/opt/sfw/include/db4',
-            '/sw/include/db4',
-            '/usr/include/db3',
-            '/usr/local/include/db3',
-            '/opt/sfw/include/db3',
-            '/sw/include/db3',
-        ]
-        # 4.x minor number specific paths
-        for x in (0,1,2,3,4):
-            db_inc_paths.append('/usr/include/db4%d' % x)
-            db_inc_paths.append('/usr/include/db4.%d' % x)
-            db_inc_paths.append('/usr/local/BerkeleyDB.4.%d/include' % x)
-            db_inc_paths.append('/usr/local/include/db4%d' % x)
-            db_inc_paths.append('/pkg/db-4.%d/include' % x)
-            db_inc_paths.append('/opt/db-4.%d/include' % x)
-        # 3.x minor number specific paths
-        for x in (2,3):
-            db_inc_paths.append('/usr/include/db3%d' % x)
-            db_inc_paths.append('/usr/local/BerkeleyDB.3.%d/include' % x)
-            db_inc_paths.append('/usr/local/include/db3%d' % x)
-            db_inc_paths.append('/pkg/db-3.%d/include' % x)
-            db_inc_paths.append('/opt/db-3.%d/include' % x)
-
-        # Add some common subdirectories for Sleepycat DB to the list,
-        # based on the standard include directories. This way DB3/4 gets
-        # picked up when it is installed in a non-standard prefix and
-        # the user has added that prefix into inc_dirs.
-        std_variants = []
-        for dn in inc_dirs:
-            std_variants.append(os.path.join(dn, 'db3'))
-            std_variants.append(os.path.join(dn, 'db4'))
-            for x in (0,1,2,3,4):
-                std_variants.append(os.path.join(dn, "db4%d"%x))
-                std_variants.append(os.path.join(dn, "db4.%d"%x))
-            for x in (2,3):
-                std_variants.append(os.path.join(dn, "db3%d"%x))
-                std_variants.append(os.path.join(dn, "db3.%d"%x))
-
-        db_inc_paths = std_variants + db_inc_paths
-
-        db_ver_inc_map = {}
-
-        class db_found(Exception): pass
-        try:
-            # See whether there is a Sleepycat header in the standard
-            # search path.
-            for d in inc_dirs + db_inc_paths:
-                f = os.path.join(d, "db.h")
-                if db_setup_debug: print "db: looking for db.h in", f
-                if os.path.exists(f):
-                    f = open(f).read()
-                    m = re.search(r"#define\WDB_VERSION_MAJOR\W(\d+)", f)
-                    if m:
-                        db_major = int(m.group(1))
-                        m = re.search(r"#define\WDB_VERSION_MINOR\W(\d+)", f)
-                        db_minor = int(m.group(1))
-                        db_ver = (db_major, db_minor)
-
-                        if ( (not db_ver_inc_map.has_key(db_ver)) and
-                           (db_ver <= max_db_ver and db_ver >= min_db_ver) ):
-                            # save the include directory with the db.h version
-                            # (first occurrance only)
-                            db_ver_inc_map[db_ver] = d
-                            print "db.h: found", db_ver, "in", d
-                        else:
-                            # we already found a header for this library version
-                            if db_setup_debug: print "db.h: ignoring", d
-                    else:
-                        # ignore this header, it didn't contain a version number
d73 1
a73 80
-
-            db_found_vers = db_ver_inc_map.keys()
-            db_found_vers.sort()
-
-            while db_found_vers:
-                db_ver = db_found_vers.pop()
-                db_incdir = db_ver_inc_map[db_ver]
-
-                # check lib directories parallel to the location of the header
-                db_dirs_to_check = [
-                    os.path.join(db_incdir, '..', 'lib64'),
-                    os.path.join(db_incdir, '..', 'lib'),
-                    os.path.join(db_incdir, '..', '..', 'lib64'),
-                    os.path.join(db_incdir, '..', '..', 'lib'),
-                ]
-                db_dirs_to_check = filter(os.path.isdir, db_dirs_to_check)
-
-                # Look for a version specific db-X.Y before an ambiguoius dbX
-                # XXX should we -ever- look for a dbX name?  Do any
-                # systems really not name their library by version and
-                # symlink to more general names?
-                for dblib in (('db-%d.%d' % db_ver),
-                              ('db%d%d' % db_ver),
-                              ('db%d' % db_ver[0])):
-                    dblib_file = self.compiler.find_library_file(
-                                    db_dirs_to_check + lib_dirs, dblib )
-                    if dblib_file:
-                        dblib_dir = [ os.path.abspath(os.path.dirname(dblib_file)) ]
-                        raise db_found
-                    else:
-                        if db_setup_debug: print "db lib: ", dblib, "not found"
-
-        except db_found:
-            print "db lib: using", db_ver, dblib
-            if db_setup_debug: print "db: lib dir", dblib_dir, "inc dir", db_incdir
-            db_incs = [db_incdir]
-            dblibs = [dblib]
-            # We add the runtime_library_dirs argument because the
-            # BerkeleyDB lib we're linking against often isn't in the
-            # system dynamic library search path.  This is usually
-            # correct and most trouble free, but may cause problems in
-            # some unusual system configurations (e.g. the directory
-            # is on an NFS server that goes away).
+        if !!USE_BSDDB!!:
             exts.append(Extension('_bsddb', ['_bsddb.c'],
-                                  library_dirs=dblib_dir,
-                                  runtime_library_dirs=dblib_dir,
-                                  include_dirs=db_incs,
-                                  libraries=dblibs))
-        else:
-            if db_setup_debug: print "db: no appropriate library found"
-            db_incs = None
-            dblibs = []
-            dblib_dir = None
+                                  library_dirs=["!!LOCALBASE!!/lib/db4"],
+                                  runtime_library_dirs=["!!LOCALBASE!!/lib/db4"],
+                                  include_dirs=["!!LOCALBASE!!/include/db4"],
+                                  libraries=["db"]))
 
-
         # Look for Berkeley db 1.85.   Note that it is built as a different
         # module name so it can be included even when later versions are
         # available.  A very restrictive search is performed to avoid
@@@@ -704,7 +576,7 @@@@ class PyBuildExt(build_ext):
                                        libraries=dblibs))
 
         # Anthony Baxter's gdbm module.  GNU dbm(3) will require -lgdbm:
-        if (self.compiler.find_library_file(lib_dirs, 'gdbm')):
+        if !!USE_GDBM!!:
             exts.append( Extension('gdbm', ['gdbmmodule.c'],
                                    libraries = ['gdbm'] ) )
 
@@@@ -791,7 +663,7 @@@@ class PyBuildExt(build_ext):
                                            libraries = ['z']) )
 
         # Gustavo Niemeyer's bz2 module.
-        if (self.compiler.find_library_file(lib_dirs, 'bz2')):
+        if !!USE_BZ2!!:
             exts.append( Extension('bz2', ['bz2module.c'],
                                    libraries = ['bz2']) )
d75 21
a95 12
@@@@ -806,19 +678,19 @@@@ class PyBuildExt(build_ext):
         #
         # More information on Expat can be found at www.libexpat.org.
         #
-        expatinc = os.path.join(os.getcwd(), srcdir, 'Modules', 'expat')
-        define_macros = [
-            ('HAVE_EXPAT_CONFIG_H', '1'),
-            ]
-        exts.append(Extension('pyexpat',
-                              define_macros = define_macros,
-                              include_dirs = [expatinc],
-                              sources = ['pyexpat.c',
d99 3
a101 15
-                                         ],
-                              ))
+        if !!USE_EXPAT!!:
+            expatinc = os.path.join(os.getcwd(), srcdir, 'Modules', 'expat')
+            define_macros = [
+                ('HAVE_EXPAT_CONFIG_H', '1'),
+                ]
+            exts.append(Extension('pyexpat',
+                                  define_macros = define_macros,
+                                  include_dirs = ["!!X11BASE!!/include", expatinc],
+                                  library_dirs = ["!!X11BASE!!/lib"],
+                                  sources = ['pyexpat.c',
+                                             ],
+                                  libraries = ["expat"]
+                                  ))
d104 51
a154 20
         if have_unicode:
@@@@ -954,7 +826,16 @@@@ class PyBuildExt(build_ext):
         self.extensions.extend(exts)
 
         # Call the method for detecting whether _tkinter can be compiled
-        self.detect_tkinter(inc_dirs, lib_dirs)
+        if !!USE_TKINTER!!:
+            ext = Extension('_tkinter', ['_tkinter.c', 'tkappinit.c'],
+                            define_macros=[('WITH_APPINIT', 1)],
+                            include_dirs = ["!!LOCALBASE!!/include/tcl8.4",
+                                            "!!LOCALBASE!!/include/tk8.4",
+                                            "!!X11BASE!!/include"],
+                            libraries = ["tk84", "tcl84", "X11"],
+                            library_dirs = ["!!LOCALBASE!!/lib", "!!X11BASE!!/lib"],
+                            )
+            self.extensions.append(ext)
 
     def detect_tkinter_darwin(self, inc_dirs, lib_dirs):
         # The _tkinter module, using frameworks. Since frameworks are quite
@@@@ -1224,8 +1105,7 @@@@ def main():
@


1.2
log
@Update to 2.4.4; add bz2 subpacakge; switch to setup.py; redo PLISTs
@
text
@d1 1
a1 1
$OpenBSD: patch-setup_py,v 1.1.1.1 2005/06/07 01:12:58 alek Exp $
d3 1
a3 1
+++ setup.py	Sat Oct 21 15:19:51 2006
d169 1
a169 1
@@@@ -806,19 +678,18 @@@@ class PyBuildExt(build_ext):
d193 2
a194 1
+                                  include_dirs = ["!!LOCALBASE!!/include", expatinc],
d202 1
a202 1
@@@@ -954,7 +825,16 @@@@ class PyBuildExt(build_ext):
d220 1
a220 1
@@@@ -1224,8 +1104,7 @@@@ def main():
@


1.1
log
@Initial revision
@
text
@d1 219
a219 4
$OpenBSD: patch-setup_py,v 1.1.1.1 2003/12/31 17:38:33 sturm Exp $
--- setup.py.orig	Sat Nov 13 12:13:34 2004
+++ setup.py	Thu Dec 30 22:47:09 2004
@@@@ -1148,8 +1148,7 @@@@ def main():
@


1.1.1.1
log
@Import python 2.4

Python is an interpreted, interactive, object-oriented
programming language that combines remarkable power with
very clear syntax.

tested by djm@@ and mpech@@ (but more tests are needed!)
mbalmer@@ and xsa@@ want it to go in
@
text
@@
