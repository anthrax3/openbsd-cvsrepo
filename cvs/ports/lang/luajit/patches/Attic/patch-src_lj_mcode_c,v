head	1.2;
access;
symbols
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.06.06.09.03.16;	author dcoppa;	state dead;
branches;
next	1.1;
commitid	42Yo5zTU2igR83WU;

1.1
date	2015.01.20.15.26.26;	author abieber;	state Exp;
branches;
next	;
commitid	Zb444B5j7ugm0IqI;


desc
@@


1.2
log
@
Update to LuaJIT-2.0.4

ok abieber@@ (maintainer)
@
text
@$OpenBSD: patch-src_lj_mcode_c,v 1.1 2015/01/20 15:26:26 abieber Exp $
--- src/lj_mcode.c.orig	Wed Mar 12 06:10:00 2014
+++ src/lj_mcode.c	Mon Jan 19 10:21:45 2015
@@@@ -145,7 +145,7 @@@@ static void mcode_free(jit_State *J, void *p, size_t s
 
 /* -- MCode area protection ----------------------------------------------- */
 
-/* Define this ONLY if the page protection twiddling becomes a bottleneck. */
+/* Define this ONLY if page protection twiddling becomes a bottleneck. */
 #ifdef LUAJIT_UNPROTECT_MCODE
 
 /* It's generally considered to be a potential security risk to have
@@@@ -252,7 +252,20 @@@@ static void *mcode_alloc(jit_State *J, size_t sz)
 #else
 
 /* All memory addresses are reachable by relative jumps. */
-#define mcode_alloc(J, sz)	mcode_alloc_at((J), 0, (sz), MCPROT_GEN)
+static void *mcode_alloc(jit_State *J, size_t sz)
+{
+#ifdef __OpenBSD__
+  /* Allow better executable memory allocation for OpenBSD W^X mode. */
+  void *p = mcode_alloc_at(J, 0, sz, MCPROT_RUN);
+  if (p && mcode_setprot(p, sz, MCPROT_GEN)) {
+    mcode_free(J, p, sz);
+    return NULL;
+  }
+  return p;
+#else
+  return mcode_alloc_at(J, 0, sz, MCPROT_GEN);
+#endif
+}
 
 #endif
 
@


1.1
log
@From tedu@@:
On i386, it's better for a jit to ask for exec memory upfront, so uvm
knows to place it in the exec segment. Otherwise, if you mmap non-exec
and mprotect it, you wind up with a high mapping and the segment must
be enlarged to cover the whole process.

I sent Mike a slightly different diff; this is what he ended up
committing to git. I think we should add it to the port.

OK dcoppa@@
@
text
@d1 1
a1 1
$OpenBSD$
@

