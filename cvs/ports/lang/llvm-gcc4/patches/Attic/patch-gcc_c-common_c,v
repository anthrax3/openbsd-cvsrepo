head	1.3;
access;
symbols
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	sthen_20090622:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2011.12.16.11.57.28;	author sthen;	state dead;
branches;
next	1.2;

1.2
date	2009.11.02.23.00.08;	author jsg;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.22.22.37.32;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.06.22.22.37.32;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@llvm-gcc4 is no longer supported; reminded by jasper@@
@
text
@$OpenBSD: patch-gcc_c-common_c,v 1.2 2009/11/02 23:00:08 jsg Exp $
--- gcc/c-common.c.orig	Mon Jul 27 20:38:17 2009
+++ gcc/c-common.c	Sat Oct 31 03:52:35 2009
@@@@ -641,6 +641,8 @@@@ static tree handle_cleanup_attribute (tree *, tree, tr
 static tree handle_warn_unused_result_attribute (tree *, tree, tree, int,
 						 bool *);
 static tree handle_sentinel_attribute (tree *, tree, tree, int, bool *);
+static tree handle_bounded_attribute (tree *, tree, tree, int, bool *);
+
 /* APPLE LOCAL radar 5932809 - copyable byref blocks */
 static tree handle_blocks_attribute (tree *, tree, tree, int, bool *);
 
@@@@ -738,6 +740,8 @@@@ const struct attribute_spec c_common_attribute_table[]
   /* APPLE LOCAL end "unavailable" attribute --ilr */
   { "vector_size",	      1, 1, false, true, false,
 			      handle_vector_size_attribute },
+  { "bounded",                3, 4, false, true, false,
+                              handle_bounded_attribute },
   { "visibility",	      1, 1, false, false, false,
 			      handle_visibility_attribute },
   { "tls_model",	      1, 1, true,  false, false,
@@@@ -5810,6 +5814,15 @@@@ handle_vector_size_attribute (tree *node, tree name, t
   *node = reconstruct_complex_type (*node, new_type);
 
   return NULL_TREE;
+}
+
+static tree
+handle_bounded_attribute (tree *ARG_UNUSED (node), tree ARG_UNUSED (name), 
+			   tree ARG_UNUSED (args),
+			   int ARG_UNUSED (flags), bool *no_add_attrs)
+{
+	*no_add_attrs = true;
+	return NULL_TREE;
 }
 
 /* Handle the "nonnull" attribute.  */
@


1.2
log
@update to 2.6
ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_c-common_c,v 1.1.1.1 2009/06/22 22:37:32 sthen Exp $
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD: patch-gcc_c-common_c,v 1.6 2009/04/16 18:36:48 espie Exp $
--- gcc/c-common.c.orig	Mon May  4 17:45:55 2009
+++ gcc/c-common.c	Mon Jun 22 00:58:03 2009
d22 1
a22 1
@@@@ -5807,6 +5811,15 @@@@ handle_vector_size_attribute (tree *node, tree name, t
@


1.1.1.1
log
@Import llvm-gcc4, not yet linked to the build. This is a work in
progress, largely based on the gcc port in ports/lang/gcc/4.2.
Requested by jsg@@.

It's somewhat usable on i386 (shared lib versions not yet properly
under control). Build on amd64 currently fails with -fPIC problems.

-- --
lvm-gcc is the LLVM C front end. It is a modified version of gcc
that compiles C/C++/ObjC programs into native objects, LLVM bitcode or
LLVM assembly language, depending upon the options.

By default, llvm-gcc compiles to native objects just like GCC does.
If the -emit-llvm option is given then it will generate LLVM bitcode
files instead. If -S (assembly) is also given, then it will generate
LLVM assembly.

Being derived from the GNU Compiler Collection, llvm-gcc has many of
gcc's features and accepts most of gcc's options. It handles a number
of gcc's extensions to the C programming language.
<sthen@@zephyr:/usr/ports/mystuff/lang/llvm-gcc4:9>$CVS: ----------------------------------------------------------------------
@
text
@@
