head	1.3;
access;
symbols
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.6
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	sthen_20090622:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2011.12.16.11.57.28;	author sthen;	state dead;
branches;
next	1.2;

1.2
date	2011.01.13.00.18.18;	author jeremy;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.22.22.37.32;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.06.22.22.37.32;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@llvm-gcc4 is no longer supported; reminded by jasper@@
@
text
@$OpenBSD: patch-gcc_cp_call_c,v 1.2 2011/01/13 00:18:18 jeremy Exp $
--- gcc/cp/call.c.orig	Fri Aug  6 11:31:05 2010
+++ gcc/cp/call.c	Mon Jan 10 12:49:16 2011
@@@@ -5418,7 +5418,7 @@@@ name_as_c_string (tree name, tree type, bool *free_p)
 	  || name == base_dtor_identifier
 	  || name == deleting_dtor_identifier)
 	{
-	  pretty_name = concat ("~", pretty_name, NULL);
+	  pretty_name = concat ("~", pretty_name, (void *)0);
 	  /* Remember that we need to free the memory allocated.  */
 	  *free_p = true;
 	}
@@@@ -5428,7 +5428,7 @@@@ name_as_c_string (tree name, tree type, bool *free_p)
       pretty_name = concat ("operator ",
 			    type_as_string (TREE_TYPE (name),
 					    TFF_PLAIN_IDENTIFIER),
-			    NULL);
+			    (void *)0);
       /* Remember that we need to free the memory allocated.  */
       *free_p = true;
     }
@


1.2
log
@Use llvm 2.8 version.  Enable build on amd64 since it works now.
Bring library versioning under control and bump the major versions.
Mark as SHARED_ONLY. Remove TODO file as it is no longer needed.

OK @@sthen
@
text
@d1 1
a1 1
$OpenBSD: patch-gcc_cp_call_c,v 1.1.1.1 2009/06/22 22:37:32 sthen Exp $
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD: patch-gcc_cp_call_c,v 1.6 2009/04/16 18:36:48 espie Exp $
--- gcc/cp/call.c.orig	Mon Nov  3 07:33:15 2008
+++ gcc/cp/call.c	Mon Jun 22 00:53:58 2009
@@@@ -5414,7 +5414,7 @@@@ name_as_c_string (tree name, tree type, bool *free_p)
d13 1
a13 1
@@@@ -5424,7 +5424,7 @@@@ name_as_c_string (tree name, tree type, bool *free_p)
@


1.1.1.1
log
@Import llvm-gcc4, not yet linked to the build. This is a work in
progress, largely based on the gcc port in ports/lang/gcc/4.2.
Requested by jsg@@.

It's somewhat usable on i386 (shared lib versions not yet properly
under control). Build on amd64 currently fails with -fPIC problems.

-- --
lvm-gcc is the LLVM C front end. It is a modified version of gcc
that compiles C/C++/ObjC programs into native objects, LLVM bitcode or
LLVM assembly language, depending upon the options.

By default, llvm-gcc compiles to native objects just like GCC does.
If the -emit-llvm option is given then it will generate LLVM bitcode
files instead. If -S (assembly) is also given, then it will generate
LLVM assembly.

Being derived from the GNU Compiler Collection, llvm-gcc has many of
gcc's features and accepts most of gcc's options. It handles a number
of gcc's extensions to the C programming language.
<sthen@@zephyr:/usr/ports/mystuff/lang/llvm-gcc4:9>$CVS: ----------------------------------------------------------------------
@
text
@@
