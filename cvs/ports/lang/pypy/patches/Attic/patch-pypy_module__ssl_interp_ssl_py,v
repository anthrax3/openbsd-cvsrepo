head	1.5;
access;
symbols
	OPENBSD_5_8:1.3.0.4
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.1.0.2
	OPENBSD_5_6_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2016.01.20.14.05.12;	author edd;	state dead;
branches;
next	1.4;
commitid	62fwaLAIeyjfJ95Y;

1.4
date	2015.08.27.14.21.32;	author edd;	state Exp;
branches;
next	1.3;
commitid	oxndeSulbO73DyBb;

1.3
date	2015.04.05.11.15.08;	author edd;	state Exp;
branches;
next	1.2;
commitid	ZyyeSXYFAv4ixIAl;

1.2
date	2014.12.13.13.53.18;	author edd;	state Exp;
branches;
next	1.1;
commitid	bAdnz0ZeFi4qGodj;

1.1
date	2014.04.24.21.44.07;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update lang/pypy to 4.0.1.

OK juanfra@@. Thanks.
@
text
@$OpenBSD: patch-pypy_module__ssl_interp_ssl_py,v 1.4 2015/08/27 14:21:32 edd Exp $
--- pypy/module/_ssl/interp_ssl.py.orig	Sun May 31 08:19:51 2015
+++ pypy/module/_ssl/interp_ssl.py	Mon Jun  8 10:40:07 2015
@@@@ -209,14 +209,7 @@@@ if HAVE_OPENSSL_RAND:
         Queries the entropy gather daemon (EGD) on socket path.  Returns number
         of bytes read.  Raises socket.sslerror if connection to EGD fails or
         if it does provide enough data to seed PRNG."""
-        with rffi.scoped_str2charp(path) as socket_path:
-            bytes = libssl_RAND_egd(socket_path)
-        if bytes == -1:
-            raise ssl_error(space,
-                            "EGD connection failed or EGD did not return "
-                            "enough data to seed the PRNG")
-        return space.wrap(bytes)
-
+        raise ssl_error(space, "EGD disabled")
 
 class _SSLSocket(W_Root):
     @@staticmethod
@


1.4
log
@Update PyPy to 2.6.0.

Thanks sthen@@ for hosting the bootstrap.

OK jca@@
@
text
@d1 1
a1 1
$OpenBSD: patch-pypy_module__ssl_interp_ssl_py,v 1.3 2015/04/05 11:15:08 edd Exp $
@


1.3
log
@Update lang/pypy to 2.5.1.

OK sthen@@, thanks.
@
text
@d1 4
a4 4
$OpenBSD: patch-pypy_module__ssl_interp_ssl_py,v 1.2 2014/12/13 13:53:18 edd Exp $
--- pypy/module/_ssl/interp_ssl.py.orig	Mon Mar 23 16:17:54 2015
+++ pypy/module/_ssl/interp_ssl.py	Thu Apr  2 19:25:50 2015
@@@@ -203,14 +203,7 @@@@ if HAVE_OPENSSL_RAND:
@


1.2
log
@Update to PyPy-2.4.0.

OK benoit@@
@
text
@d1 4
a4 4
$OpenBSD: patch-pypy_module__ssl_interp_ssl_py,v 1.1 2014/04/24 21:44:07 sthen Exp $
--- pypy/module/_ssl/interp_ssl.py.orig	Mon Sep 22 18:34:11 2014
+++ pypy/module/_ssl/interp_ssl.py	Fri Oct 10 13:20:39 2014
@@@@ -101,14 +101,7 @@@@ if HAVE_OPENSSL_RAND:
d18 2
a19 2
 class SSLObject(W_Root):
     def __init__(self, space):
@


1.1
log
@handle RAND_egd removal (may require further tweaking but at least it builds now..)
@
text
@d1 5
a5 4
$OpenBSD$
--- pypy/module/_ssl/interp_ssl.py.orig	Thu Apr 24 16:21:39 2014
+++ pypy/module/_ssl/interp_ssl.py	Thu Apr 24 16:25:47 2014
@@@@ -108,16 +108,8 @@@@ if HAVE_OPENSSL_RAND:
d8 1
a8 3
 
-        socket_path = rffi.str2charp(path)
-        try:
a9 2
-        finally:
-            rffi.free_charp(socket_path)
d11 3
a13 3
-            msg = "EGD connection failed or EGD did not return"
-            msg += " enough data to seed the PRNG"
-            raise ssl_error(space, msg)
d15 2
a16 3
+        msg = "EGD disabled"
+        raise ssl_error(space, msg)
 
d19 1
@

