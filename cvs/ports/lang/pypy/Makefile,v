head	1.26;
access;
symbols
	OPENBSD_6_1:1.26.0.2
	OPENBSD_6_1_BASE:1.26
	OPENBSD_6_0:1.24.0.2
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.15.0.4
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	OPENBSD_5_6:1.11.0.2
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.10.0.2
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.6.0.2
	OPENBSD_5_4_BASE:1.6
	edd_20130611:1.1.1.1
	edd:1.1.1;
locks; strict;
comment	@# @;


1.26
date	2016.09.23.09.16.55;	author sthen;	state Exp;
branches;
next	1.25;
commitid	XLnI6AbHAmyVU5mO;

1.25
date	2016.08.15.09.16.40;	author edd;	state Exp;
branches;
next	1.24;
commitid	y220xCvgP9gANDG7;

1.24
date	2016.06.13.08.44.17;	author edd;	state Exp;
branches;
next	1.23;
commitid	0Qs53ofqgeK515e6;

1.23
date	2016.05.09.11.18.00;	author naddy;	state Exp;
branches;
next	1.22;
commitid	Luhh4nsHc1k5zn3I;

1.22
date	2016.05.08.09.56.01;	author sthen;	state Exp;
branches;
next	1.21;
commitid	Bfx4fqEPcMaaps02;

1.21
date	2016.04.19.11.14.54;	author edd;	state Exp;
branches;
next	1.20;
commitid	SJlWayhz9PAVXwB9;

1.20
date	2016.03.26.12.11.51;	author sthen;	state Exp;
branches;
next	1.19;
commitid	lv4FJaMwO2hxkh9X;

1.19
date	2016.01.20.14.05.12;	author edd;	state Exp;
branches;
next	1.18;
commitid	62fwaLAIeyjfJ95Y;

1.18
date	2015.12.03.21.24.30;	author sthen;	state Exp;
branches;
next	1.17;
commitid	qh8BBe4z9PLvLPKf;

1.17
date	2015.10.30.16.27.06;	author edd;	state Exp;
branches;
next	1.16;
commitid	3GjaFou1ZbibmLdc;

1.16
date	2015.08.27.14.21.32;	author edd;	state Exp;
branches;
next	1.15;
commitid	oxndeSulbO73DyBb;

1.15
date	2015.05.28.10.17.24;	author pascal;	state Exp;
branches;
next	1.14;
commitid	020U4lCPk8wUkCOz;

1.14
date	2015.04.09.10.34.28;	author sthen;	state Exp;
branches;
next	1.13;
commitid	0oRYykMHTs3TxU6m;

1.13
date	2015.04.05.11.15.07;	author edd;	state Exp;
branches;
next	1.12;
commitid	ZyyeSXYFAv4ixIAl;

1.12
date	2014.12.13.13.53.18;	author edd;	state Exp;
branches;
next	1.11;
commitid	bAdnz0ZeFi4qGodj;

1.11
date	2014.07.18.08.48.37;	author edd;	state Exp;
branches;
next	1.10;
commitid	9M68y72iES7jwhRa;

1.10
date	2013.12.04.21.56.21;	author edd;	state Exp;
branches;
next	1.9;

1.9
date	2013.11.25.14.16.23;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2013.09.19.08.39.30;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2013.08.16.22.04.41;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2013.06.19.13.07.38;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.19.13.04.23;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2013.06.16.21.17.22;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.15.21.40.16;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.15.16.47.58;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.11.22.10.46;	author edd;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.06.11.22.10.46;	author edd;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Cope with moving sqlite3 back to ports.
@
text
@# $OpenBSD: Makefile,v 1.25 2016/08/15 09:16:40 edd Exp $

ONLY_FOR_ARCHS =	amd64

COMMENT =		fast implementation of the Python language

# To update PyPy to a new version:
#   * Bump ${V} but set ${BOOTSTRAP_V} to the old ${V} (keeping
#     any bootstrap version suffix intact, e.g. "-1")
#   * make makesum
#   * make plist (fix anything along the way)
#   * make package
#   * Set BOOTSTRAP_V back to ${V} in the port Makefile
#   * make bootstrap && make makesum
#   * Try the build using the bootstrap
#
# If the old bootstrap no longer works (e.g. due to an ABI change), then
# You can use the no_bootstrap FLAVOR to make a new bootstrap. This uses
# CPython to build PyPy instead. Note this is slower.

V =			5.3.1
BOOTSTRAP_V =		${V}
DISTNAME =		pypy2-v${V}-src
PKGNAME =		pypy-${V}
BOOTSTRAP-amd64 =	pypy-bootstrap-amd64-${BOOTSTRAP_V}.tar.xz
REVISION =		0

CATEGORIES =		lang

HOMEPAGE =		http://pypy.org/

MAINTAINER =		Edd Barrett <edd@@openbsd.org>

# PyPy is MIT; the Python libs it comes with have the same license as Python
PERMIT_PACKAGE_CDROM =	Yes

WANTLIB +=		bz2 c crypto curses expat ffi gdbm iconv intl m
WANTLIB +=		ncurses panel pthread sqlite3 ssl ${MODTCL_LIB}
WANTLIB +=		${MODTK_LIB} util z

LIB_DEPENDS +=		databases/sqlite3

MASTER_SITES =		https://bitbucket.org/pypy/pypy/downloads/
MASTER_SITES0 =		https://spacehopper.org/mirrors/
EXTRACT_SUFX =		.tar.bz2

PSEUDO_FLAVORS =	no_bootstrap
FLAVOR ?=

DIST_SUBDIR =		pypy
DISTFILES =		${DISTNAME}${EXTRACT_SUFX}
.if defined(BOOTSTRAP-${MACHINE_ARCH}) && !${FLAVOR:Mno_bootstrap}
DISTFILES +=		${BOOTSTRAP-${MACHINE_ARCH}}:0
.endif
# if adding archs, list *all* bootstraps in SUPDISTFILES
SUPDISTFILES =		${BOOTSTRAP-amd64}:0

MODULES +=		lang/python gcc4 lang/tcl x11/tk
MODPY_VERSION =		2.7
MODGCC4_ARCHS =		*
MODGCC4_LANGS =		c

USE_GMAKE =		Yes
BUILD_DEPENDS =		textproc/py-sphinx \
			databases/gdbm \
			${MODTK_BUILD_DEPENDS}
RUN_DEPENDS =		${MODTK_RUN_DEPENDS} \
			databases/gdbm

post-extract:
	@@if [ `ulimit -d` -lt $$((5*1024*1024)) ]; then \
	    echo datasize limit is too low - amd64 build takes approx 5GB; \
	    exit 1; fi
.if !${FLAVOR:Mno_bootstrap}
	echo '#!/bin/sh' > ${WRKDIR}/bin/pypy
	echo 'LD_LIBRARY_PATH=${WRKDIR}/bootstrap/system-libs:${WRKDIR}/bootstrap/pypy/lib exec ${WRKDIR}/bootstrap/bin/pypy "$$@@"' >> ${WRKDIR}/bin/pypy
	chmod +x ${WRKDIR}/bin/pypy
.endif

SUBST_VARS +=	MODTK_INCDIR MODTCL_INCDIR MODTK_LIB MODTCL_LIB

pre-configure:
	${SUBST_CMD} ${WRKSRC}/lib_pypy/_tkinter/tklib_build.py
	# prevent crap in the plist
	rm ${WRKSRC}/lib_pypy/_tkinter/tklib_build.py.beforesubst

do-build:
.if ${FLAVOR:Mno_bootstrap}
	cd ${WRKSRC}/pypy/goal/ && ${SETENV} ${MAKE_ENV} \
	  PYPY_USESSION_DIR=${WRKDIR}/usession \
	  PYPY_CTYPES_DIR=${WRKDIR}/ctypes \
	  ${MODPY_BIN} ../../rpython/bin/rpython --source --opt=jit
.else
	cd ${WRKSRC}/pypy/goal/ && ${SETENV} ${MAKE_ENV} \
	  PYPY_GC_MAX_DELTA=300MB \
	  PYPY_USESSION_DIR=${WRKDIR}/usession \
	  PYPY_CTYPES_DIR=${WRKDIR}/ctypes \
	  pypy --jit loop_longevity=300 \
	  ../../rpython/bin/rpython --source --opt=jit
.endif
	cd ${WRKDIR}/usession/testing_1 && ${SETENV} ${MAKE_ENV} \
		${MAKE_PROGRAM} LDFLAGS_LINK="-Wl,-z,wxneeded -pthread"

PYPY_INST_LIB_DIR = ${PREFIX}/pypy/lib
PYPY_LD_LIBRARY_PATH = LD_LIBRARY_PATH=${PYPY_INST_LIB_DIR}
do-install:
	mkdir -p ${PREFIX}/pypy/bin
	mkdir -p ${PYPY_INST_LIB_DIR}
	${INSTALL_PROGRAM} ${WRKDIR}/usession/testing_1/pypy-c \
		${PREFIX}/pypy/bin/pypy
	${INSTALL_PROGRAM} ${WRKDIR}/usession/testing_1/libpypy-c.so \
		${PYPY_INST_LIB_DIR}
	${INSTALL_DATA_DIR} ${PREFIX}/pypy/include
	cp -rp ${WRKSRC}/include/* ${PREFIX}/pypy/include
	chown -R ${SHAREOWN}:${SHAREGRP} ${PREFIX}/pypy/include
	${INSTALL_DATA_DIR} ${PREFIX}/pypy/lib_pypy
	${INSTALL_DATA_DIR} ${PREFIX}/pypy/lib-python/2.7
	cp -rp ${WRKSRC}/lib_pypy/* ${PREFIX}/pypy/lib_pypy
	cp -rp ${WRKSRC}/lib-python/2.7/* ${PREFIX}/pypy/lib-python/2.7
	${PYPY_LD_LIBRARY_PATH} ${PREFIX}/pypy/bin/pypy \
		-m compileall ${PREFIX}/pypy/lib_pypy
	${PYPY_LD_LIBRARY_PATH} sh -c \
		'find ${PREFIX}/pypy/lib-python/2.7 -name "*.py" | grep -v test \
		  | xargs ${PREFIX}/pypy/bin/pypy -m compileall'
	# make cffi shared objects
	cd ${WRKSRC} && ${PYPY_LD_LIBRARY_PATH} \
		LDFLAGS=-L${LOCALBASE}/lib \
		CPPFLAGS=-I${LOCALBASE}/include \
		PYTHONPATH=`pwd` \
		${PREFIX}/pypy/bin/pypy pypy/tool/build_cffi_imports.py
	find ${PREFIX}/pypy/lib_pypy/ -name '*.c' -or -name '*.o' | xargs rm
	chown -R ${SHAREOWN}:${SHAREGRP} ${PREFIX}/pypy/lib_pypy
	chown -R ${SHAREOWN}:${SHAREGRP}  ${PREFIX}/pypy/lib-python/2.7
	cd ${PREFIX}/bin && ln -s ../pypy/bin/pypy
	cd ${PREFIX}/lib && ln -s ../pypy/lib/libpypy-c.so
	# remove patch orig files so they dont appear in the plist
	find ${PREFIX} -name '*.py.orig' | xargs rm

PYPY_PKG = ${PACKAGE_REPOSITORY}/${MACHINE_ARCH}/all/${FULLPKGNAME}.tgz

.include <bsd.port.mk>

# The bootstrap-based build process uses less memory and is faster,
# but if you need to build a new bootstrap because the existing one no
# longer runs, use FLAVOR=no_bootstrap to do a cpython-based build.
# Expect 6.5GB memory usage on amd64.
bootstrap: ${PYPY_PKG}
	mkdir -p ${WRKDIR}/prepare/bootstrap/system-libs
	cd ${WRKDIR}/prepare/bootstrap && tar zxf ${PYPY_PKG}
	rm -rf ${WRKDIR}/prepare/bootstrap/{+*,info,man}
	for i in `LD_LIBRARY_PATH=${WRKDIR}/prepare/bootstrap/pypy/lib ldd ${WRKDIR}/prepare/bootstrap/bin/pypy | grep 'lib/' | grep -v 'libpypy-c' | \
	        awk '{ print $$7 }'` ; do \
		cp $$i ${WRKDIR}/prepare/bootstrap/system-libs; done
	cd ${WRKDIR}/prepare && tar cf - bootstrap | \
	    xz > ${FULLDISTDIR}/${BOOTSTRAP-${MACHINE_ARCH}}
@


1.25
log
@lang/pypy: Fix build for W^X and update to 5.3.1.

Note that the W^X patch only makes the CPython-based no_bootstrap build work,
and that the PyPy JIT itself is still not W^X compliant. This will require more
work.

OK jca@@, thanks.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.24 2016/06/13 08:44:17 edd Exp $
d26 1
d40 2
@


1.24
log
@lang/pypy: Update to 5.3.0.

Looks OK, jca@@, thanks.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.23 2016/05/09 11:18:00 naddy Exp $
d21 1
a21 1
V =			5.3.0
d98 2
a99 1
	cd ${WRKDIR}/usession/testing_1 && ${SETENV} ${MAKE_ENV} ${MAKE_PROGRAM}
@


1.23
log
@the no_bootstrap build uses 6.5 GB of memory
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.22 2016/05/08 09:56:01 sthen Exp $
d10 3
a12 3
#   * FLAVOR=no_bootstrap make makesum
#   * FLAVOR=no_bootstrap make plist (fix anything along the way)
#   * FLAVOR=no_bootstrap make package
d14 1
a14 1
#   * make bootstrap && make makesum (note, FLAVOR no longer set)
d16 8
a23 3
V =			5.0.1
BOOTSTRAP_V =		${V}-1
DISTNAME =		pypy-${V}-src
a65 2

WRKDIST =		${WRKDIR}/pypy-${V}-src
@


1.22
log
@- add new pypy bootstrap for TIB, prepared by naddy

- raise minimum amount of memory in the ulimit check to 5GB (the no_bootstrap
flavour uses even more, usually crashing the kernel on my 8GB workstation if
I try to build it there)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.21 2016/04/19 11:14:54 edd Exp $
d139 1
a139 1
# Expect 5.3GB+ memory usage on amd64.
@


1.21
log
@lang/pypy: Update to 5.0.1.

Reads OK, sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.20 2016/03/26 12:11:51 sthen Exp $
d17 1
a17 1
BOOTSTRAP_V =		${V}
d65 2
a66 2
	@@if [ `ulimit -d` -lt $$((4*1024*1024)) ]; then \
	    echo datasize limit is too low - amd64 build takes approx 4GB; \
@


1.20
log
@regenerate bootstrap
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.19 2016/01/20 14:05:12 edd Exp $
d16 2
a17 2
V =			4.0.1
BOOTSTRAP_V =		${V}-1
d31 3
a33 2
WANTLIB +=		bz2 c crypto curses expat ffi gdbm m ncurses panel
WANTLIB +=		pthread sqlite3 ssl ${MODTCL_LIB} ${MODTK_LIB} util z
d50 1
a50 1
MODULES +=		devel/gettext lang/python gcc4 lang/tcl x11/tk
a80 11
# When updating the port, see pypy/tool/release/package.py and check for
# new modules which require a cffi cache. In post-fake we must mimic
# the function create_cffi_import_libraries().
CFFI_CACHES =		_sqlite3_build.py \
			_audioop_build.py \
			_tkinter/tklib_build.py \
			_curses_build.py \
			_syslog_build.py \
			_gdbm_build.py \
			_pwdgrp_build.py

a117 1
	find ${PREFIX}/pypy/lib_pypy/ -name '*.c' -or -name '*.o' | xargs rm
d119 1
a119 2
.for i in ${CFFI_CACHES}
	cd ${WRKSRC}/lib_pypy && ${PYPY_LD_LIBRARY_PATH} \
d122 3
a124 4
		${PREFIX}/pypy/bin/pypy ${i}
.endfor
	cp ${WRKSRC}/lib_pypy/*.so ${PREFIX}/pypy/lib_pypy/
	cp ${WRKSRC}/lib_pypy/_tkinter/*.so ${PREFIX}/pypy/lib_pypy/_tkinter/
@


1.19
log
@Update lang/pypy to 4.0.1.

OK juanfra@@. Thanks.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.18 2015/12/03 21:24:30 sthen Exp $
d17 1
a17 1
BOOTSTRAP_V =		${V}
@


1.18
log
@switch my distfiles mirror to https
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2015/10/30 16:27:06 edd Exp $
d8 2
a9 1
#   * Bump ${V} but set ${BOOTSTRAP_V} to the old ${V}
d16 2
a17 2
V =			2.6.0
BOOTSTRAP_V =		${V}-1
a20 1
REVISION =		0
@


1.17
log
@Regenerate lang/pypy bootstrap.

Fixes build.

OK sthen@@, thanks.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.16 2015/08/27 14:21:32 edd Exp $
d35 1
a35 1
MASTER_SITES0 =		http://spacehopper.org/mirrors/
@


1.16
log
@Update PyPy to 2.6.0.

Thanks sthen@@ for hosting the bootstrap.

OK jca@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2015/05/28 10:17:24 pascal Exp $
d16 1
a16 1
BOOTSTRAP_V =		${V}
d20 1
@


1.15
log
@gcc4 bumps, reminded by aja@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2015/04/09 10:34:28 sthen Exp $
d15 2
a16 2
V =			2.5.1
BOOTSTRAP_V =		${V}-1
a19 1
REVISION =		0
d75 1
a75 1
	${SUBST_CMD} ${WRKSRC}/lib_pypy/_tkinter/tklib.py
d77 1
a77 1
	rm ${WRKSRC}/lib_pypy/_tkinter/tklib.py.beforesubst
d80 9
a88 2
# new modules which require a cffi cache.
CFFI_CACHES =	_sqlite3, audioop, _curses, syslog, gdbm, _tkinter
d127 5
a131 4
	# make cffi cache
	# this will generate various __pycache__ directories in lib_pypy.
	# and it puts absolute paths in there too, yay...
	${PYPY_LD_LIBRARY_PATH} LDFLAGS=-L${LOCALBASE}/lib \
d133 4
a136 9
		${PREFIX}/pypy/bin/pypy -c 'import ${CFFI_CACHES}'
	${INSTALL_DATA_DIR} ${PREFIX}/pypy/lib_pypy/__pycache__/${TRUEPREFIX}/pypy/
	mv ${PREFIX}/pypy/lib_pypy/__pycache__/${PREFIX}/pypy/* \
		${PREFIX}/pypy/lib_pypy/__pycache__/${TRUEPREFIX}/pypy/
	rm -Rf ${PREFIX}/pypy/lib_pypy/__pycache__/${PORTSDIR}
	${INSTALL_DATA_DIR} ${PREFIX}/pypy/lib_pypy/_tkinter/__pycache__/${TRUEPREFIX}/pypy/
	mv ${PREFIX}/pypy/lib_pypy/_tkinter/__pycache__/${PREFIX}/pypy/* \
		${PREFIX}/pypy/lib_pypy/_tkinter/__pycache__/${TRUEPREFIX}/pypy/
	rm -Rf ${PREFIX}/pypy/lib_pypy/_tkinter/__pycache__/${PORTSDIR}
@


1.14
log
@Regenerate the pypy bootstrap for new libc/pthread, the previous one
had problems for at least naddy and myself after updating libc/pthread.
(Simple in this case; the bootstrap is just here to use pypy [i.e. JIT]
during build to save time/RAM, pypy can also be built using the normal
python interpreter). ok edd@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2015/04/05 11:15:07 edd Exp $
d20 1
@


1.13
log
@Update lang/pypy to 2.5.1.

OK sthen@@, thanks.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2014/12/13 13:53:18 edd Exp $
d16 1
a16 1
BOOTSTRAP_V =		${V}
@


1.12
log
@Update to PyPy-2.4.0.

OK benoit@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2014/07/18 08:48:37 edd Exp $
d15 1
a15 1
V =			2.4.0
d68 1
a68 1
	echo 'LD_LIBRARY_PATH=${WRKDIR}/bootstrap/system-libs exec ${WRKDIR}/bootstrap/bin/pypy "$$@@"' >> ${WRKDIR}/bin/pypy
d81 1
a81 1
CFFI_CACHES =	_sqlite3, _curses, syslog, _tkinter, gdbm
d99 2
d103 5
a107 1
	${INSTALL_PROGRAM} ${WRKDIR}/usession/testing_1/pypy-c ${PREFIX}/pypy/bin/pypy
d115 5
a119 3
	${PREFIX}/pypy/bin/pypy -m compileall ${PREFIX}/pypy/lib_pypy
	find ${PREFIX}/pypy/lib-python/2.7 -name "*.py" | grep -v test \
	  | xargs ${PREFIX}/pypy/bin/pypy -m compileall
d123 2
a124 1
	LDFLAGS=-L${LOCALBASE}/lib CPPFLAGS=-I${LOCALBASE}/include \
a125 1
	# but it contains absolute paths, so we fix that:
d137 1
d153 2
a154 2
	for i in `ldd ${WRKDIR}/prepare/bootstrap/bin/pypy | grep 'lib/' | \
	    awk '{ print $$7 }'` ; do \
@


1.11
log
@Update lang/pypy to 2.3.1.

OK sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2013/12/04 21:56:21 edd Exp $
d15 1
a15 1
V =			2.3.1
@


1.10
log
@Update to PyPy-2.2.1 and remove dependency upon libcompat.a and headers.

Tested by naddy@@.

OK naddy@@ and juanfra@@.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2013/09/19 08:39:30 sthen Exp $
d15 1
a15 1
V =			2.2.1
d30 1
a30 1
WANTLIB +=		bz2 c crypto curses expat ffi m ncurses panel
d54 5
a58 2
BUILD_DEPENDS =		textproc/py-sphinx ${MODTK_BUILD_DEPENDS}
RUN_DEPENDS =		${MODTK_RUN_DEPENDS}
d81 1
a81 1
CFFI_CACHES =	_sqlite3, _curses, syslog, _tkinter
d115 3
a117 2
	${PREFIX}/pypy/bin/pypy -c 'import ${CFFI_CACHES}'
	# but it contains absolute paths, so we fox that:
d129 2
@


1.9
log
@kill VMEM_WARNING
@
text
@d7 10
a16 1
V =			2.1
d19 1
a19 1
BOOTSTRAP-amd64 =	pypy-bootstrap-amd64-$V-2.tar.xz
d25 1
a25 1
MAINTAINER =		Laurence Tratt <laurie@@tratt.net>
d30 2
a31 1
WANTLIB +=		bz2 c crypto curses expat ffi m pthread ssl util z
d51 1
a51 1
MODGCC4_LANGS =		c c++
d69 1
a69 1
SUBST_VARS +=	MODTK_INCDIR MODTCL_INCDIR
d74 1
a74 4
	rm ${WRKSRC}/lib_pypy/_tkinter/tklib.py${PATCHORIG} \
		${WRKSRC}/lib_pypy/_tkinter/tklib.py.beforesubst \
		${WRKSRC}/lib_pypy/_tkinter/__init__.py${PATCHORIG} \
		${WRKSRC}/lib_pypy/_tkinter/app.py${PATCHORIG}
@


1.8
log
@update to pypy 2.1, testing/help edd@@ and Laurie Tratt (maintainer)
@
text
@d1 1
a1 3
# $OpenBSD: Makefile,v 1.7 2013/08/16 22:04:41 sthen Exp $

VMEM_WARNING =		Yes
@


1.7
log
@regenerate bootstrap
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2013/06/19 13:07:38 sthen Exp $
d9 1
a9 1
V =			2.0.2
d12 1
a12 2
REVISION =		1
BOOTSTRAP-amd64 =	pypy-bootstrap-amd64-$V-1.tar.xz
d40 1
a40 1
MODULES +=		devel/gettext lang/python gcc4
d46 2
a47 1
BUILD_DEPENDS =		textproc/py-sphinx
d61 14
d104 13
@


1.6
log
@Run compileall.py to build .pyc files for the libraries and include them in
the package; this avoids them getting created if you run pypy as root, which
results in pkg_delete leaving things behind. From maintainer Laurie Tratt.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2013/06/16 21:17:22 sthen Exp $
d13 1
a13 1
BOOTSTRAP-amd64 =	pypy-bootstrap-amd64-$V-0.tar.xz
@


1.5
log
@tweak warning when datasize limit is too low.
@
text
@d12 1
a12 1
REVISION =		0
d84 1
d86 4
a90 2
	${INSTALL_DATA_DIR} ${PREFIX}/pypy/lib-python/2.7
	cp -rp ${WRKSRC}/lib-python/2.7/* ${PREFIX}/pypy/lib-python/2.7
@


1.4
log
@don't try and add the bootstrap to DISTFILES unless 1) there is actually
a bootstrap for our arch and 2) we are actually using it (i.e. !no_bootstrap).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2013/06/15 21:40:16 sthen Exp $
d53 1
a53 1
	    echo amd64 build takes approx 4GB; datasize limit is too low; \
@


1.3
log
@oops, didn't mean to switch to gcc 4.8, spotted by Juan Francisco Cantero Hurtado
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2013/06/15 16:47:58 sthen Exp $
d35 1
d37 1
@


1.2
log
@- switch the pypy build to using a binary bootstrap of pypy instead of
python 2.7 to run the translations; this saves ~1.3GB RAM and runs much
faster. as this is optional, a new no_bootstrap pseudo-flavour allows
rebuilding bootstraps from scratch to help with flag days.

- also check early that the datasize limit is reasonable for the build;
no point swapping for ages and then running out of ram.

discussed with Laurie Tratt (maintainer).
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2013/06/11 22:10:46 edd Exp $
d12 1
a42 1
MODGCC4_VERSION =	4.8
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
a2 1
# Oh boy. "5495684 maximum resident set size" on amd64
d12 1
d26 1
d29 3
d33 4
d42 1
d49 10
d60 1
d62 2
a63 1
	  PYPY_USESSION_DIR=${WRKDIR}/usession PYPY_CTYPES_DIR=${WRKDIR}/ctypes \
d65 8
d89 2
d92 14
@


1.1.1.1
log
@Import PyPy

"A fast, compliant alternative implementation of the Python language"

From Laurence Tratt with input from sthen@@ and myself.

OK sthen@@: "ok sthen who says that beck should add it to torture"

@
text
@@
