head	1.27;
access;
symbols
	OPENBSD_6_2:1.27.0.2
	OPENBSD_6_2_BASE:1.27
	OPENBSD_6_1:1.21.0.2
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.17.0.2
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.9.0.2
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.7.0.2
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_2_BASE:1.2
	sthen_20120405:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.27
date	2017.09.08.05.58.19;	author ajacoutot;	state Exp;
branches;
next	1.26;
commitid	a5D3a7AoSKGo5Hfd;

1.26
date	2017.09.01.06.41.00;	author ajacoutot;	state Exp;
branches;
next	1.25;
commitid	qbxQ8aSDiLmkLDqw;

1.25
date	2017.08.21.09.12.47;	author espie;	state Exp;
branches;
next	1.24;
commitid	Boeya1thLhXqJRNQ;

1.24
date	2017.07.18.09.19.00;	author espie;	state Exp;
branches;
next	1.23;
commitid	Xx2gPYEoKbbyenPH;

1.23
date	2017.07.14.17.14.03;	author sthen;	state Exp;
branches;
next	1.22;
commitid	2I37ZfTOrmp63Kb2;

1.22
date	2017.06.04.23.22.57;	author sthen;	state Exp;
branches;
next	1.21;
commitid	9V71pxj9Vcn3MtcS;

1.21
date	2017.03.14.17.30.30;	author ajacoutot;	state Exp;
branches;
next	1.20;
commitid	DmJc524qHJhKomB9;

1.20
date	2017.02.10.09.38.12;	author ajacoutot;	state Exp;
branches;
next	1.19;
commitid	bQDiLobvd4QO3Zhq;

1.19
date	2016.12.22.14.10.27;	author ajacoutot;	state Exp;
branches;
next	1.18;
commitid	dj29Vszjvv64ut0y;

1.18
date	2016.10.07.08.55.30;	author ajacoutot;	state Exp;
branches;
next	1.17;
commitid	9CZYQ6vy0MJoEWYH;

1.17
date	2016.05.14.20.37.32;	author ajacoutot;	state Exp;
branches;
next	1.16;
commitid	05Ysqsp1jr8daFY2;

1.16
date	2016.03.05.15.32.45;	author pascal;	state Exp;
branches;
next	1.15;
commitid	5rXEUYUxlk5nBGTy;

1.15
date	2015.02.11.00.30.00;	author brad;	state Exp;
branches;
next	1.14;
commitid	zfAaFusNNj23nicT;

1.14
date	2015.01.03.01.23.28;	author brad;	state Exp;
branches;
next	1.13;
commitid	TTXgDDorhuxWor5o;

1.13
date	2014.12.12.21.52.26;	author brad;	state Exp;
branches;
next	1.12;
commitid	onIEZ9LItncYz3Xp;

1.12
date	2014.12.06.06.10.19;	author brad;	state Exp;
branches;
next	1.11;
commitid	cSdNu8oUJxHdahpK;

1.11
date	2014.09.23.18.55.32;	author brad;	state Exp;
branches;
next	1.10;
commitid	8Aejh8M6nsPPwkry;

1.10
date	2014.09.12.12.47.24;	author brad;	state Exp;
branches;
next	1.9;
commitid	Q6whm2GYYo3WvvGX;

1.9
date	2014.05.29.00.28.33;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2014.04.18.09.30.48;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2013.12.01.20.05.41;	author zhuk;	state Exp;
branches;
next	1.6;

1.6
date	2013.11.27.20.42.08;	author zhuk;	state Exp;
branches;
next	1.5;

1.5
date	2013.06.21.23.00.30;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.23.21.36.33;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.26.22.16.55;	author landry;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.26.09.13.43;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.05.18.28.16;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.04.05.18.28.16;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.27
log
@Update to llvm-5.0.0.

from Brad (maintainer)
@
text
@# $OpenBSD: clang.port.mk,v 1.26 2017/09/01 06:41:00 ajacoutot Exp $

MODCLANG_VERSION=	5.0.0

MODCLANG_ARCHS ?= ${LLVM_ARCHS}
MODCLANG_LANGS ?=

.if !${MODCLANG_LANGS:L:Mc}
# Always include support for this
MODCLANG_LANGS += c
.endif

_MODCLANG_OKAY = c c++
.for _l in ${MODCLANG_LANGS:L}
.  if !${_MODCLANG_OKAY:M${_l}}
ERRORS += "Fatal: unknown language ${_l}"
.  endif
.endfor

_MODCLANG_ARCH_USES = No

.for _i in ${MODCLANG_ARCHS}
.  if !empty(MACHINE_ARCH:M${_i})
_MODCLANG_ARCH_USES = Yes
.  endif
.endfor

_MODCLANG_ARCH_CLANG = No

.for _i in ${CLANG_ARCHS}
.  if !empty(MACHINE_ARCH:M${_i})
_MODCLANG_ARCH_CLANG = Yes
.  endif
.endfor

.if ${_MODCLANG_ARCH_USES:L} == "yes"

BUILD_DEPENDS += devel/llvm>=${MODCLANG_VERSION}
COMPILER_LINKS = gcc ${LOCALBASE}/bin/clang cc ${LOCALBASE}/bin/clang \
	clang ${LOCALBASE}/bin/clang

.  if ${MODCLANG_LANGS:L:Mc++}
COMPILER_LINKS += g++ ${LOCALBASE}/bin/clang++ c++ ${LOCALBASE}/bin/clang++ \
	clang++ ${LOCALBASE}/bin/clang++

.    if ${_MODCLANG_ARCH_CLANG:L} == "no"
# uses libestdc++
MODULES += gcc4
MODCLANG_CPPLIBDEP = ${MODGCC4_CPPLIBDEP}
LIB_DEPENDS += ${MODCLANG_CPPLIBDEP}
MODCLANG_CPPWANTLIB = ${MODGCC4_CPPWANTLIB}
WANTLIB += ${MODCLANG_CPPWANTLIB}
.    else
# uses libc++
MODCLANG_CPPLIBDEP =
MODCLANG_CPPWANTLIB = c++ c++abi pthread
WANTLIB += ${MODCLANG_CPPWANTLIB}
.    endif
.  endif
.endif

SUBST_VARS+=	MODCLANG_VERSION
@


1.26
log
@Cope with llvm 5.0.0rc4.

from Brad
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.25 2017/08/21 09:12:47 espie Exp $
d3 1
a3 1
MODCLANG_VERSION=	5.0.0rc4
@


1.25
log
@centralize arch compiler support so we cant teach COMPILER to
set ONLY_FOR_ARCHS
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.24 2017/07/18 09:19:00 espie Exp $
d3 1
a3 1
MODCLANG_VERSION=	4.0.1
d28 8
d46 1
d53 6
@


1.24
log
@now that clang is compiled by default, PORTPATH will prefer base clang to
ports clang  for ports that explicitly use clang to compile.

So put COMPILER_LINKS for those, so that we get the requested compiler, along
with -B support.

Noticed some oddities in WANTLIB for a few ports (libc++ and libc++abi which
had no business being there), this fixes the issue.
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.23 2017/07/14 17:14:03 sthen Exp $
d5 1
a5 1
MODCLANG_ARCHS ?=
d22 2
a23 3
.if ${MODCLANG_ARCHS:L} != ""
.  for _i in ${MODCLANG_ARCHS}
.    if !empty(MACHINE_ARCH:M${_i})
d25 2
a26 3
.    endif
.  endfor
.endif
@


1.23
log
@update to LLVM-4.0.1, from Brad (maintainer)
been through i386 and amd64 bulks
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.22 2017/06/04 23:22:57 sthen Exp $
d33 2
a34 1
COMPILER_LINKS = gcc ${LOCALBASE}/bin/clang cc ${LOCALBASE}/bin/clang
d37 3
a39 1
COMPILER_LINKS += g++ ${LOCALBASE}/bin/clang++ c++ ${LOCALBASE}/bin/clang++
@


1.22
log
@Write out wrapper scripts for compilers using -B to set the toolchain
search path to ${WRKDIR}/bin. Ensures that the ld wrapper script needed
for USE_WXNEEDED gets used (clang was ignoring it otherwise).

Rework ccache support and gcc4/clang MODULES to use the same wrapper
generator as above, setting up a list of command names (cc, c++, etc) and
destinations (egcc, eg++, etc) as the port is processed, and writing the
wrappers in one place in bsd.port.mk, with an optional wrapper (e.g.
ccache), and with an echo to make it clear on screen/in log which
compiler binaries were chosen (easier than inspecting the wrapper
scripts) and whether ccache is used.

Initial wrapper using -B from espie, ccache bits from me, discussed
with/ok espie.  Been through a bulk on i386.
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.21 2017/03/14 17:30:30 ajacoutot Exp $
d3 1
a3 1
MODCLANG_VERSION=	4.0.0
@


1.21
log
@Bump LLVM version.

from Brad
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.20 2017/02/10 09:38:12 ajacoutot Exp $
a29 1
_MODCLANG_LINKS =
d33 1
a33 1
_MODCLANG_LINKS = clang gcc clang cc
d36 1
a36 1
_MODCLANG_LINKS += clang++ g++ clang++ c++
a42 16
.  endif
.endif

.if !empty(_MODCLANG_LINKS)
.  if "${USE_CCACHE:L}" == "yes" && "${NO_CCACHE:L}" != "yes"
.    for _src _dest in ${_MODCLANG_LINKS}
MODCLANG_post-patch +=	rm -f ${WRKDIR}/bin/${_dest};
MODCLANG_post-patch +=	echo '\#!/bin/sh' >${WRKDIR}/bin/${_dest};
MODCLANG_post-patch +=	echo exec ccache ${LOCALBASE}/bin/${_src} \"\$$@@\"
MODCLANG_post-patch +=	>>${WRKDIR}/bin/${_dest};
MODCLANG_post-patch +=	chmod +x ${WRKDIR}/bin/${_dest};
.    endfor
.  else
.    for _src _dest in ${_MODCLANG_LINKS}
MODCLANG_post-patch += ln -sf ${LOCALBASE}/bin/${_src} ${WRKDIR}/bin/${_dest};
.    endfor
@


1.20
log
@Bump clang version to 4.0.0rc2.
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.19 2016/12/22 14:10:27 ajacoutot Exp $
d3 1
a3 1
MODCLANG_VERSION=	4.0.0rc2
@


1.19
log
@MODCLANG_VERSION=3.9.1

prodded by Brad
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.18 2016/10/07 08:55:30 ajacoutot Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.9.1
@


1.18
log
@Update to LLVM 3.9.0.
Been through bulks on amd64 / i386 by sthen@@ and naddy@@ respectively.

from Brad (maintainer)
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.17 2016/05/14 20:37:32 ajacoutot Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.9.0
@


1.17
log
@Bump MODCLANG_VERSION to version 3.8.0.

from Brad
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.16 2016/03/05 15:32:45 pascal Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.8.0
@


1.16
log
@Adapt to the new LLVM version.  Ports compiled by Clang++ now depend on
libestdc++.
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.15 2015/02/11 00:30:00 brad Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.7.1
@


1.15
log
@bump revision.
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.14 2015/01/03 01:23:28 brad Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.5.20140228p27
d38 6
@


1.14
log
@bump revision.
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.13 2014/12/12 21:52:26 brad Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.5.20140228p25
@


1.13
log
@bump revision.
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.12 2014/12/06 06:10:19 brad Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.5.20140228p19
@


1.12
log
@bump revision.
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.11 2014/09/23 18:55:32 brad Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.5.20140228p18
@


1.11
log
@bump revision.
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.10 2014/09/12 12:47:24 brad Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.5.20140228p15
@


1.10
log
@bump revision.
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.9 2014/05/29 00:28:33 brad Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.5.20140228p13
@


1.9
log
@Bump _VERSION to at least p2 for the stack protector changes.

ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.8 2014/04/18 09:30:48 brad Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.5.20140228p2
@


1.8
log
@Update to LLVM 3.5 (trunk) snapshot just before switching to an unconditional
C++11 codebase.

This brings in a number of improvements over 3.4 including..
X86 assembler with 16-bit support
Much improved SPARC backend
stack protector strong support

ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.7 2013/12/01 20:05:41 zhuk Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.5.20140228
@


1.7
log
@Make ccache work with Clang and GCC 4.6 & 4.8.

tested and okay juanfra@@; also okay sthen@@ for Clang part
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.6 2013/11/27 20:42:08 zhuk Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.3
@


1.6
log
@Force NO_CCACHE for non-base compilers. Before that, ports system tried to
enable it through symlinks in ${WRKDIR}/bin/, which were effectively
overriden by gcc4.port.mk or clang.port.mk - thus lying that ccache was
used while it was not.

Still investigating for a good solution to actually enable ccache support
for non-base compilers.

okay juanfra@@, sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.5 2013/06/21 23:00:30 brad Exp $
a31 2
# not supported for all languages Clang supports
NO_CCACHE =	Yes
d36 1
a36 1
.if ${MODCLANG_LANGS:L:Mc++}
d38 1
a38 1
.endif
d42 10
a51 1
.  for _src _dest in ${_MODCLANG_LINKS}
d53 2
a54 1
.  endfor
@


1.5
log
@Bump for LLVM 3.3.
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.4 2012/12/23 21:36:33 brad Exp $
d32 2
@


1.4
log
@Bump MODCLANG_VERSION after the update to LLVM 3.2.
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.3 2012/11/26 22:16:55 landry Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.2
@


1.3
log
@Add the needed glue for MODCLANG_ARCHS, to properly depend on devel/llvm
only on the given archs. Taken from gcc4.port.mk
ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.2 2012/05/26 09:13:43 jasper Exp $
d3 1
a3 1
MODCLANG_VERSION=	3.1
@


1.2
log
@add MODCLANG_VERSION

prompted by sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: clang.port.mk,v 1.1.1.1 2012/04/05 18:28:16 sthen Exp $
d20 13
d38 1
@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
# $OpenBSD$
d20 1
a20 1
BUILD_DEPENDS += devel/llvm
d33 1
@


1.1.1.1
log
@Add a module to allow for easier building of a port using CLang/LLVM
by adding MODULES=lang/clang. Based on gcc4.port.mk and simplified.
OK robert@@
@
text
@@
