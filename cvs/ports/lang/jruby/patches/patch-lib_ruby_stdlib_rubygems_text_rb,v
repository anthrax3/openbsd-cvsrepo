head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2017.09.02.21.36.55;	author jeremy;	state Exp;
branches
	1.1.2.1;
next	;
commitid	Wvr86l9X5vhv98pv;

1.1.2.1
date	2017.09.07.17.22.47;	author jeremy;	state Exp;
branches;
next	;
commitid	a70T4hWDAfXNnxOW;


desc
@@


1.1
log
@Apply security patches in rubygems 2.6.13 to JRuby, based on the
upstream patch provided by ruby-core for ruby 2.4.

No CVE numbers, but this fixes the following vulnerabilities:

* Fix a DNS request hijacking vulnerability.
* Fix an ANSI escape sequence vulnerability.
* Fix a DOS vulernerability in the query command.
* Fix a vulnerability in the gem installer that allowed a malicious
  gem to overwrite arbitrary files.
@
text
@$OpenBSD$

Index: lib/ruby/stdlib/rubygems/text.rb
--- lib/ruby/stdlib/rubygems/text.rb.orig
+++ lib/ruby/stdlib/rubygems/text.rb
@@@@ -7,12 +7,25 @@@@ require 'rubygems'
 module Gem::Text
 
   ##
+  # Remove any non-printable characters and make the text suitable for
+  # printing.
+  def clean_text(text)
+    text.gsub(/[\000-\b\v-\f\016-\037\177]/, ".".freeze)
+  end
+
+  def truncate_text(text, description, max_length = 100_000)
+    raise ArgumentError, "max_length must be positive" unless max_length > 0
+    return text if text.size <= max_length
+    "Truncating #{description} to #{max_length.to_s.reverse.gsub(/...(?=.)/,'\&,').reverse} characters:\n" + text[0, max_length]
+  end
+
+  ##
   # Wraps +text+ to +wrap+ characters and optionally indents by +indent+
   # characters
 
   def format_text(text, wrap, indent=0)
     result = []
-    work = text.dup
+    work = clean_text(text)
 
     while work.length > wrap do
       if work =~ /^(.{0,#{wrap}})[ \n]/ then
@


1.1.2.1
log
@Apply rubygems 2.6.13 security patches
@
text
@@

