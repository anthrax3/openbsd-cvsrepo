head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.22
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.20
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.16
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.18
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.14
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.12
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.10
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2011.12.09.21.46.15;	author jeremy;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Setup symlink to jruby/bin/jruby at bin/jruby, so that jruby is usable
without any modifications to PATH.  To run an ruby program that is
installed in jruby's bin directory (which no longer needs to be in the
PATH), use jruby -S program.
@
text
@$OpenBSD$

Hardcode executable path so that the symlink in the standard PATH
works correctly.

--- jruby-launcher/jrubyexe.cpp.orig	Fri Dec  2 09:34:43 2011
+++ jruby-launcher/jrubyexe.cpp	Fri Dec  2 09:35:02 2011
@@@@ -57,8 +57,10 @@@@ const char *CON_ATTACH_MSG =
 
 #include "utilsfuncs.h"
 
+char JRUBY_PATH[] = "${PREFIX}/jruby/bin/jruby";
 
 int main(int argc, char *argv[], char* envp[]) {
+    argv[0] = JRUBY_PATH;
     checkLoggingArg(argc, argv, true);
 
 #ifdef WIN32
@
