head	1.18;
access;
symbols
	OPENBSD_6_1:1.17.0.6
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.17.0.4
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.13.0.6
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.4
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.12.0.2
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.10.0.2
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6;
locks; strict;
comment	@ * @;


1.18
date	2017.09.13.10.43.58;	author robert;	state dead;
branches;
next	1.17;
commitid	kFv2rkf5deA8Z0kS;

1.17
date	2015.11.29.15.50.20;	author ajacoutot;	state Exp;
branches;
next	1.16;
commitid	R4zDyQEPMusoKaj3;

1.16
date	2015.09.28.19.05.24;	author robert;	state Exp;
branches;
next	1.15;
commitid	0yNaOJnmdxPQsDK2;

1.15
date	2015.02.17.22.08.36;	author sthen;	state Exp;
branches;
next	1.14;
commitid	xaIHtCntkggL7CxN;

1.14
date	2014.12.08.10.57.08;	author ajacoutot;	state Exp;
branches;
next	1.13;
commitid	pz71RdO0gxd0iylf;

1.13
date	2013.05.03.18.43.27;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2012.08.30.14.28.22;	author ajacoutot;	state Exp;
branches;
next	1.11;

1.11
date	2012.08.25.10.17.27;	author ajacoutot;	state Exp;
branches;
next	1.10;

1.10
date	2012.07.04.13.00.46;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2012.04.22.13.44.09;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2011.07.08.02.14.59;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2011.04.04.08.01.04;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2010.12.27.14.50.23;	author ajacoutot;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.24.10.40.06;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.17.14.00.04;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.03.11.57.16;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.29.12.54.44;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2010.10.28.14.46.56;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.18
log
@remove zarafa as it has been replaced with kopano
@
text
@#!/bin/sh
#
# $OpenBSD: zarafa.rc,v 1.17 2015/11/29 15:50:20 ajacoutot Exp $

# "meta" script running the following rc.d(8) scripts with the given argument;
# note that daemon_flags, daemon_user, daemon_timeout and daemon_class are not
# passed to the child scripts.
_pkg_scripts="zarafa_server zarafa_spooler zarafa_monitor zarafa_gateway zarafa_ical"

if [ "$1" = restart ]; then
	$0 stop && $0 start
	exit
fi

if [ "$1" = stop ]; then
	for _i in ${_pkg_scripts}; do _l="${_i} ${_l}"; done
	_pkg_scripts=${_l% }
fi

for _i in ${_pkg_scripts}; do
	if [[ -x ${RCDIR}/${_i} ]]; then
		${RCDIR}/${_i} $@@ || exit $?
	fi
done
@


1.17
log
@daemon_timeout is not passed to the child scripts either.
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.16 2015/09/28 19:05:24 robert Exp $
@


1.16
log
@remove zarafa_search because it works differently than before and an rc
script is not needed
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.15 2015/02/17 22:08:36 sthen Exp $
d6 2
a7 2
# note that daemon_flags, daemon_user and daemon_class are not passed to
# the child scripts.
@


1.15
log
@Adjust the "meta" rc-scripts (these are used in ports with multiple daemons
which should all be started/stopped together), previously "restart" would
restart each sub-daemon in turn, but actually it should stop all daemons
and only then start them again. Additionally, as suggested by ajacoutot,
stop the procedure and return an error if stopping one of the rc scripts
failed.  ok ajacoutot@@ rpe@@
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.14 2014/12/08 10:57:08 ajacoutot Exp $
d8 1
a8 1
_pkg_scripts="zarafa_server zarafa_spooler zarafa_monitor zarafa_gateway zarafa_ical zarafa_search"
@


1.14
log
@Make all meta rc.d scripts consistent.
While here, unbreak when options are passed (e.g. /etc/rc.d/foobar -df start)

ok sthen@@
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.13 2013/05/03 18:43:27 sthen Exp $
d10 5
d20 5
a24 1
for _i in ${_pkg_scripts}; do [[ -x ${RCDIR}/${_i} ]] && ${RCDIR}/${_i} $@@; done
@


1.13
log
@extra sanity checking, ensure that the rc.d scripts run by the meta script
are executable, I needed it for the bacula script which runs daemons split
between two packages, ajacoutot suggested applying to other similar scripts.
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.12 2012/08/30 14:28:22 ajacoutot Exp $
d15 1
a15 1
for _i in ${_pkg_scripts}; do [[ -x ${RCDIR}/${_i} ]] && ${RCDIR}/${_i} $1; done
@


1.12
log
@Major update to zarafa-7.1.0.
Complete ChangeLog available at:
http://download.zarafa.com/community/final/7.1/final-changelog-7.1.txt
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.11 2012/08/25 10:17:27 ajacoutot Exp $
d15 1
a15 1
for _i in ${_pkg_scripts}; do ${RCDIR}/${_i} $1; done
@


1.11
log
@Simplify how the order of the _pkg_scripts entries get reversed on stop.
(same diff as for netatalk and samba from rpe)
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.10 2012/07/04 13:00:46 ajacoutot Exp $
d8 1
a8 1
_pkg_scripts="zarafa_server zarafa_spooler zarafa_monitor zarafa_gateway zarafa_ical"
@


1.10
log
@Add comment that daemon_flags, daemon_user and daemon_class are not passed
to the child scripts.
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.9 2012/04/22 13:44:09 ajacoutot Exp $
a9 2
set -A _s -- ${_pkg_scripts}

d11 2
a12 7
	i=$(echo ${_pkg_scripts} | wc -w)
	while [ $i -ne 0 ]; do
		i=$((i-1))
		${RCDIR}/${_s[$i]} $1
	done
else
	for i in ${_pkg_scripts}; do ${RCDIR}/$i $1; done
d14 2
@


1.9
log
@/etc/rc.d -> RCDIR
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.8 2011/07/08 02:14:59 ajacoutot Exp $
d5 3
a7 1
# "meta" script running the following rc.d(8) scripts with the given argument
@


1.8
log
@rc_scripts -> pkg_scripts
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.7 2011/04/04 08:01:04 ajacoutot Exp $
d14 1
a14 1
		/etc/rc.d/${_s[$i]} $1
d17 1
a17 1
	for i in ${_pkg_scripts}; do /etc/rc.d/$i $1; done
@


1.7
log
@Add clucene support (i.e. enable zarafa-indexer). Note that the
zarafa-indexer is not used by default.
Tweak patches accordingly.
Use RLIMIT_DATA instead of RLIMIT_AS which we don't have.

Fix default client_update_path.
Remove a couple of patch entries that are not needed anymore.

Rewrite zarafa.rc and make it a wrapper script that calls the provided
rc.d(8) scripts. This is much more simple, makes much more sense and
allow for proper debugging as discussed with robert@@.
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.6 2010/12/27 14:50:23 ajacoutot Exp $
d6 1
a6 1
_rc_scripts="zarafa_server zarafa_spooler zarafa_monitor zarafa_gateway zarafa_ical"
d8 1
a8 1
set -A _s -- ${_rc_scripts}
d11 1
a11 1
	i=$(echo ${_rc_scripts} | wc -w)
d17 1
a17 1
	for i in ${_rc_scripts}; do /etc/rc.d/$i $1; done
@


1.6
log
@Simplify after recent rc.subr change.
The framework is now stable and we will start documenting it (at last).
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.5 2010/12/24 10:40:06 ajacoutot Exp $
d5 2
a6 1
daemon="/bin/true"
d8 1
a8 1
. /etc/rc.d/rc.subr
d10 5
a14 20
_zarafa_daemons="server spooler monitor gateway ical"

rc_start() {
	for i in ${_zarafa_daemons}; do /etc/rc.d/zarafa_$i start; done
}

rc_check() {
	for i in ${_zarafa_daemons}; do /etc/rc.d/zarafa_$i check || return; done
}

rc_reload() {
	for i in ${_zarafa_daemons}; do /etc/rc.d/zarafa_$i reload; done
}

rc_stop() {
	set -A _z -- ${_zarafa_daemons}
	_z="${_z[4]} ${_z[3]} ${_z[2]} ${_z[1]} ${_z[0]}"
	for i in ${_z}; do
		/etc/rc.d/zarafa_$i stop
		while /etc/rc.d/zarafa_$i check; do sleep 1; done
d16 3
a18 3
}

rc_cmd $1
@


1.5
log
@Cope with recent rc.subr changes.
@
text
@d3 1
a3 3
# $OpenBSD: zarafa.rc,v 1.4 2010/11/17 14:00:04 ajacoutot Exp $

. /etc/rc.d/rc.subr
d7 1
a7 1
rc_conf
@


1.4
log
@Fix restarting all daemons, there is no such thing as rc_restart.
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.3 2010/11/03 11:57:16 ajacoutot Exp $
d8 3
@


1.3
log
@Fix rc scripts name.
@
text
@d3 1
a3 1
# $OpenBSD: zarafa.rc,v 1.2 2010/10/29 12:54:44 ajacoutot Exp $
d23 6
a28 5
	for i in ${_zarafa_daemons}; do /etc/rc.d/zarafa_$i stop; done
}

rc_restart() {
	for i in ${_zarafa_daemons}; do /etc/rc.d/zarafa_$i restart; done
@


1.2
log
@Add RCS IDs to rc scripts.
@
text
@d3 1
a3 1
# $OpenBSD$
d11 1
a11 1
	for i in ${_zarafa_daemons}; do /etc/rc.d/zarafa-$i start; done
d15 1
a15 1
	for i in ${_zarafa_daemons}; do /etc/rc.d/zarafa-$i check || return; done
d19 1
a19 1
	for i in ${_zarafa_daemons}; do /etc/rc.d/zarafa-$i reload; done
d23 1
a23 1
	for i in ${_zarafa_daemons}; do /etc/rc.d/zarafa-$i stop; done
d27 1
a27 1
	for i in ${_zarafa_daemons}; do /etc/rc.d/zarafa-$i restart; done
@


1.1
log
@Add zarafa daemons rc scripts.
Discussed with and ok robert@@
@
text
@d2 2
@

