head	1.23;
access;
symbols
	OPENBSD_6_0:1.22.0.2
	OPENBSD_6_0_BASE:1.22
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.18.0.4
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_6:1.18.0.2
	OPENBSD_5_6_BASE:1.18
	OPENBSD_5_5:1.17.0.6
	OPENBSD_5_5_BASE:1.17
	OPENBSD_5_4:1.17.0.4
	OPENBSD_5_4_BASE:1.17
	OPENBSD_5_3:1.17.0.2
	OPENBSD_5_3_BASE:1.17
	OPENBSD_5_2:1.13.0.2
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.2
	OPENBSD_5_0:1.10.0.2
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3;
locks; strict;
comment	@# @;


1.23
date	2016.08.12.08.09.05;	author robert;	state Exp;
branches;
next	1.22;
commitid	h1dsiXvKWTmkvlUk;

1.22
date	2016.04.20.18.38.41;	author robert;	state Exp;
branches;
next	1.21;
commitid	KBMzdBVp21qnBq3j;

1.21
date	2016.04.01.18.08.10;	author robert;	state Exp;
branches;
next	1.20;
commitid	YBIXgHFu7xINW8BP;

1.20
date	2015.11.02.11.06.34;	author robert;	state Exp;
branches;
next	1.19;
commitid	19wAgXlT9RhqpZjX;

1.19
date	2015.04.05.22.25.08;	author robert;	state Exp;
branches;
next	1.18;
commitid	j25w8UqbNvnTFexL;

1.18
date	2014.04.07.13.46.06;	author robert;	state Exp;
branches;
next	1.17;

1.17
date	2013.01.27.13.06.20;	author robert;	state Exp;
branches;
next	1.16;

1.16
date	2012.10.29.19.07.40;	author robert;	state Exp;
branches;
next	1.15;

1.15
date	2012.10.28.21.51.08;	author robert;	state Exp;
branches;
next	1.14;

1.14
date	2012.08.30.14.28.22;	author ajacoutot;	state Exp;
branches;
next	1.13;

1.13
date	2012.02.27.19.01.34;	author ajacoutot;	state Exp;
branches;
next	1.12;

1.12
date	2011.12.22.17.10.04;	author ajacoutot;	state Exp;
branches;
next	1.11;

1.11
date	2011.11.17.15.14.37;	author ajacoutot;	state Exp;
branches;
next	1.10;

1.10
date	2011.06.02.12.46.37;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2011.04.04.08.01.04;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.29.18.00.03;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2010.08.22.10.13.27;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2010.06.06.20.10.21;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.22.10.06.18;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2010.03.21.11.15.20;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2009.11.18.13.55.39;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.20.22.34.26;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.31.09.55.56;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.23
log
@update to 7.2.4.29
@
text
@$OpenBSD$
--- common/ECLogger.cpp.orig	Mon Aug  8 09:19:14 2016
+++ common/ECLogger.cpp	Mon Aug  8 09:23:17 2016
@@@@ -27,6 +27,10 @@@@
 #include <zarafa/stringutil.h>
 #include "charset/localeutil.h"
 
+#ifdef __OpenBSD__
+#include <signal.h>
+#endif
+
 #ifdef LINUX
 #include "config.h"
 #include <poll.h>
@@@@ -72,9 +76,11 @@@@ static ECLogger *ec_log_target = &ec_log_fallback_targ
 ECLogger::ECLogger(int max_ll) {
 	max_loglevel = max_ll;
 	pthread_mutex_init(&m_mutex, NULL);
+#ifndef __OpenBSD__
 	// get system locale for time, NULL is returned if locale was not found.
 	timelocale = createlocale(LC_TIME, "C");
 	datalocale = createUTF8Locale();
+#endif
 	prefix = LP_NONE;
 	m_ulRef = 1;
 }
@@@@ -83,11 +89,13 @@@@ ECLogger::~ECLogger() {
 	if (ec_log_target == this)
 		ec_log_set(NULL);
 
+#ifndef __OpenBSD__
 	if (timelocale)
 		freelocale(timelocale);
 
 	if (datalocale)
 		freelocale(datalocale);
+#endif
 	pthread_mutex_destroy(&m_mutex);
 }
 
@@@@ -107,9 +115,11 @@@@ std::string ECLogger::MakeTimestamp() {
 
 	char buffer[_LOG_TSSIZE];
 
+#ifndef __OpenBSD__
 	if (timelocale)
 		strftime_l(buffer, sizeof buffer, "%c", &local, timelocale);
 	else
+#endif
 		strftime(buffer, sizeof buffer, "%c", &local);
 
 	return buffer;
@@@@ -176,7 +186,11 @@@@ int ECLogger::snprintf(char *str, size_t size, const c
 	int len = 0;
 
 	va_start(va, format);
+#ifndef __OpenBSD__
 	len = _vsnprintf_l(str, size, format, datalocale, va);
+#else
+	len = _vsnprintf_l(str, size, format, va);
+#endif
 	va_end(va);
 
 	return len;
@@@@ -407,7 +421,11 @@@@ void ECLogger_File::Log(unsigned int loglevel, const c
 
 void ECLogger_File::LogVA(unsigned int loglevel, const char *format, va_list& va) {
 	char msgbuffer[_LOG_BUFSIZE];
+#ifndef __OpenBSD__
 	_vsnprintf_l(msgbuffer, sizeof msgbuffer, format, datalocale, va);
+#else
+	_vsnprintf_l(msgbuffer, sizeof msgbuffer, format, va);
+#endif
 
 	Log(loglevel, std::string(msgbuffer));
 }
@@@@ -467,7 +485,11 @@@@ void ECLogger_Syslog::LogVA(unsigned int loglevel, con
 	vsyslog(levelmap[loglevel & EC_LOGLEVEL_MASK], format, va);
 #else
 	char msgbuffer[_LOG_BUFSIZE];
+#ifndef __OpenBSD__
 	_vsnprintf_l(msgbuffer, sizeof msgbuffer, format, datalocale, va);
+#else
+	_vsnprintf_l(msgbuffer, sizeof msgbuffer, format, va);
+#endif
 	syslog(levelmap[loglevel & EC_LOGLEVEL_MASK], "%s", msgbuffer);
 #endif
 }
@@@@ -631,7 +653,11 @@@@ void ECLogger_Tee::LogVA(unsigned int loglevel, const 
 	LoggerList::iterator iLogger;
 
 	char msgbuffer[_LOG_BUFSIZE];
+#ifndef __OpenBSD__
 	_vsnprintf_l(msgbuffer, sizeof msgbuffer, format, datalocale, va);
+#else
+	_vsnprintf_l(msgbuffer, sizeof msgbuffer, format, va);
+#endif
 
 	for (iLogger = m_loggers.begin(); iLogger != m_loggers.end(); ++iLogger)
 		(*iLogger)->Log(loglevel, std::string(msgbuffer));
@@@@ -682,7 +708,7 @@@@ void ECLogger_Pipe::Log(unsigned int loglevel, const s
 #ifdef WIN32
 		len = snprintf(msgbuffer + off, sizeof msgbuffer - off, "[%p] ", pthread_self());
 #else
-	len = snprintf(msgbuffer + off, sizeof msgbuffer - off, "[0x%08x] ", (unsigned int)pthread_self());
+	len = snprintf(msgbuffer + off, sizeof msgbuffer - off, "[0x%08x] ", (uintptr_t)pthread_self());
 #endif
 	else if (prefix == LP_PID)
 		len = snprintf(msgbuffer + off, sizeof msgbuffer - off, "[%5d] ", getpid());
@@@@ -730,7 +756,7 @@@@ void ECLogger_Pipe::LogVA(unsigned int loglevel, const
 #ifdef WIN32
 		len = snprintf(msgbuffer + off, sizeof msgbuffer - off, "[%p] ", pthread_self());
 #else
-	len = snprintf(msgbuffer + off, sizeof msgbuffer - off, "[0x%08x] ", (unsigned int)pthread_self());
+	len = snprintf(msgbuffer + off, sizeof msgbuffer - off, "[0x%08x] ", (uintptr_t)pthread_self());
 #endif
 	else if (prefix == LP_PID)
 		len = snprintf(msgbuffer + off, sizeof msgbuffer - off, "[%5d] ", getpid());
@@@@ -741,7 +767,11 @@@@ void ECLogger_Pipe::LogVA(unsigned int loglevel, const
 		off += len;
 
 	// return value is what WOULD have been written if enough space were available in the buffer
+#ifndef __OpenBSD__
 	len = _vsnprintf_l(msgbuffer + off, sizeof msgbuffer - off - 1, format, datalocale, va);
+#else
+	len = _vsnprintf_l(msgbuffer + off, sizeof msgbuffer - off - 1, format, va);
+#endif
 	// -1 can be returned on formatting error (eg. %ls in C locale)
 	if (len < 0)
 		len = 0;
@@@@ -824,9 +854,13 @@@@ namespace PrivatePipe {
 		fd_set readfds;
 #endif
 
+#if defined(__linux__)
 		confstr(_CS_GNU_LIBPTHREAD_VERSION, buffer, sizeof(buffer));
 		if (strncmp(buffer, "linuxthreads", strlen("linuxthreads")) == 0)
 			bNPTL = false;
+#elif defined(__OpenBSD__)
+		bNPTL = true;
+#endif
 
 		m_lpConfig = lpConfig;
 		m_lpFileLogger = lpFileLogger;
@@@@ -1202,8 +1236,12 @@@@ void generic_sigsegv_handler(ECLogger *lpLogger, const
 #endif
 	ec_log_crit("Signal errno: %s, signal code: %d", strerror(si->si_errno), si->si_code);
 	ec_log_crit("Sender pid: %d, sender uid: %d, si_status: %d", si->si_pid, si->si_uid, si->si_status);
-	ec_log_crit("User time: %ld, system time: %ld, signal value: %d", si->si_utime, si->si_stime, si->si_value.sival_int);
+	ec_log_crit("User time: %lld, system time: %lld, signal value: %d", si->si_utime, si->si_stime, si->si_value.sival_int);
+#ifndef __OpenBSD__
 	ec_log_crit("Faulting address: %p, affected fd: %d", si->si_addr, si->si_fd);
+#else
+	ec_log_crit("Faulting address: %p", si->si_addr);
+#endif
 	lpLogger->Log(EC_LOGLEVEL_FATAL, "When reporting this traceback, please include Linux distribution name (and version), system architecture and Zarafa version.");
 #ifndef _WIN32
 	/*
@


1.22
log
@update to 7.2.3
@
text
@d2 2
a3 2
--- common/ECLogger.cpp.orig	Wed Apr 20 13:13:54 2016
+++ common/ECLogger.cpp	Wed Apr 20 20:27:28 2016
d82 2
a84 2
+#else
 	_vsnprintf_l(msgbuffer, sizeof msgbuffer, format, datalocale, va);
d106 1
a106 1
+	len = snprintf(msgbuffer + off, sizeof msgbuffer - off, "[0x%016lX] ", (uintptr_t)pthread_self());
d115 1
a115 1
+	len = snprintf(msgbuffer + off, sizeof msgbuffer - off, "[0x%016lX] ", (uintptr_t)pthread_self());
d148 1
a148 1
 	ec_log_crit("Sender pid: %d, sender uid: %d, si_satus: %d", si->si_pid, si->si_uid, si->si_status);
d158 1
a158 1
 	kill(getpid(), signr);
@


1.21
log
@update to 7.2.2
@
text
@d2 3
a4 3
--- common/ECLogger.cpp.orig	Wed Mar 23 12:14:33 2016
+++ common/ECLogger.cpp	Fri Apr  1 09:32:35 2016
@@@@ -53,6 +53,10 @@@@
d15 2
a16 1
@@@@ -96,18 +100,22 @@@@ ECLogger::ECLogger(int max_ll) {
d19 1
a20 1
+#ifndef __OpenBSD__
d27 3
a30 1
 ECLogger::~ECLogger() {
d41 1
a41 1
@@@@ -127,9 +135,11 @@@@ std::string ECLogger::MakeTimestamp() {
d53 1
a53 1
@@@@ -196,7 +206,11 @@@@ int ECLogger::snprintf(char *str, size_t size, const c
d65 1
a65 1
@@@@ -427,7 +441,11 @@@@ void ECLogger_File::Log(unsigned int loglevel, const c
d77 1
a77 1
@@@@ -487,7 +505,11 @@@@ void ECLogger_Syslog::LogVA(unsigned int loglevel, con
d89 1
a89 1
@@@@ -651,7 +673,11 @@@@ void ECLogger_Tee::LogVA(unsigned int loglevel, const 
d101 1
a101 1
@@@@ -702,7 +728,7 @@@@ void ECLogger_Pipe::Log(unsigned int loglevel, const s
d106 1
a106 1
+	len = snprintf(msgbuffer + off, sizeof msgbuffer - off, "[0x%08x] ", (uintptr_t)pthread_self());
d110 1
a110 1
@@@@ -750,7 +776,7 @@@@ void ECLogger_Pipe::LogVA(unsigned int loglevel, const
d115 1
a115 1
+	len = snprintf(msgbuffer + off, sizeof msgbuffer - off, "[0x%08x] ", (uintptr_t)pthread_self());
d119 1
a119 1
@@@@ -761,7 +787,11 @@@@ void ECLogger_Pipe::LogVA(unsigned int loglevel, const
d131 1
a131 1
@@@@ -844,9 +874,13 @@@@ namespace PrivatePipe {
d145 14
@


1.20
log
@update to 7.2.1
@
text
@d2 4
a5 4
--- common/ECLogger.cpp.orig	Wed Aug  5 17:30:49 2015
+++ common/ECLogger.cpp	Thu Aug 20 13:20:50 2015
@@@@ -52,6 +52,10 @@@@
 #include "stringutil.h"
d12 1
d15 1
a15 3
 #if HAVE_SYSLOG_H
@@@@ -88,18 +92,22 @@@@ static const char *const ll_names[] = {
 ECLogger::ECLogger(int max_ll) {
d17 1
d35 1
d38 1
a38 2
 void ECLogger::SetLoglevel(unsigned int max_ll) {
@@@@ -114,9 +122,11 @@@@ std::string ECLogger::MakeTimestamp() {
d50 1
a50 1
@@@@ -175,7 +185,11 @@@@ int ECLogger::snprintf(char *str, size_t size, const c
d62 1
a62 1
@@@@ -397,7 +411,11 @@@@ void ECLogger_File::Log(unsigned int loglevel, const c
d74 1
a74 1
@@@@ -456,7 +474,11 @@@@ void ECLogger_Syslog::LogVA(unsigned int loglevel, con
d86 1
a86 1
@@@@ -541,7 +563,11 @@@@ void ECLogger_Tee::LogVA(unsigned int loglevel, const 
d98 4
a101 4
@@@@ -588,7 +614,7 @@@@ void ECLogger_Pipe::Log(unsigned int loglevel, const s
 	off += 1;
 
 	if (prefix == LP_TID)
d104 1
d107 4
a110 5
 
@@@@ -632,7 +658,7 @@@@ void ECLogger_Pipe::LogVA(unsigned int loglevel, const
 	off += 1;
 
 	if (prefix == LP_TID)
d113 1
d116 1
a116 2
 
@@@@ -642,7 +668,11 @@@@ void ECLogger_Pipe::LogVA(unsigned int loglevel, const
d128 3
a130 3
@@@@ -722,9 +752,13 @@@@ namespace PrivatePipe {
 		int l;
 		bool bNPTL = true;
@


1.19
log
@update to 7.2.0
@
text
@d1 4
a4 4
$OpenBSD: patch-common_ECLogger_cpp,v 1.18 2014/04/07 13:46:06 robert Exp $
--- common/ECLogger.cpp.orig	Thu Mar  5 16:54:04 2015
+++ common/ECLogger.cpp	Fri Apr  3 23:11:10 2015
@@@@ -51,6 +51,10 @@@@
d13 1
d15 2
a16 2
 #include <syslog.h>
@@@@ -85,18 +89,22 @@@@ ECLogger::ECLogger(unsigned int max_ll) {
a17 1
 	msgbuffer = new char[_LOG_BUFSIZE];
a27 1
 	delete [] msgbuffer;
d31 1
a34 1
 	pthread_mutex_destroy(&msgbuflock);
d37 2
a38 1
@@@@ -110,9 +118,11 @@@@ char* ECLogger::MakeTimestamp() {
d40 1
a40 1
 	localtime_r(&now, &local);
d44 1
a44 1
 		strftime_l(timestring, _LOG_TSSIZE, "%c", &local, timelocale);
d47 1
a47 1
 		strftime(timestring, _LOG_TSSIZE, "%c", &local);
d49 2
a50 2
 	return timestring;
@@@@ -154,7 +164,11 @@@@ int ECLogger::snprintf(char *str, size_t size, const c
d62 1
a62 10
@@@@ -252,7 +266,7 @@@@ void ECLogger_File::DoPrefix() {
 		fnPrintf(log, "%s: ", MakeTimestamp());
 
 	if (prefix == LP_TID)
-		fnPrintf(log, "[0x%08x] ", (unsigned int)pthread_self());
+		fnPrintf(log, "[0x%08x] ", (uintptr_t)pthread_self());
 	else if (prefix == LP_PID)
 		fnPrintf(log, "[%5d] ", getpid());
 }
@@@@ -325,7 +339,11 @@@@ void ECLogger_File::Log(unsigned int loglevel, const c
d65 1
a65 1
 	pthread_mutex_lock(&msgbuflock);
d67 1
a67 1
 	_vsnprintf_l(msgbuffer, _LOG_BUFSIZE, format, datalocale, va);
d69 1
a69 1
+	_vsnprintf_l(msgbuffer, _LOG_BUFSIZE, format, va);
d72 3
a74 4
 	pthread_mutex_lock(&filelock);
 
@@@@ -388,7 +406,11 @@@@ void ECLogger_Syslog::LogVA(unsigned int loglevel, con
 #if HAVE_VSYSLOG
d77 1
d79 1
a79 1
 	_vsnprintf_l(msgbuffer, _LOG_BUFSIZE, format, datalocale, va);
d81 1
a81 1
+	_vsnprintf_l(msgbuffer, _LOG_BUFSIZE, format, va);
d85 2
a86 2
 	pthread_mutex_unlock(&msgbuflock);
@@@@ -475,7 +497,11 @@@@ void ECLogger_Tee::LogVA(unsigned int loglevel, const 
d89 1
a89 1
 	pthread_mutex_lock(&msgbuflock);
d91 1
a91 1
 	_vsnprintf_l(msgbuffer, _LOG_BUFSIZE, format, datalocale, va);
d93 1
a93 1
+	_vsnprintf_l(msgbuffer, _LOG_BUFSIZE, format, va);
d98 1
a98 1
@@@@ -524,7 +550,7 @@@@ void ECLogger_Pipe::Log(unsigned int loglevel, const s
d102 2
a103 2
-		len = snprintf(msgbuffer+off, _LOG_BUFSIZE -off, "[0x%08x] ", (unsigned int)pthread_self());
+		len = snprintf(msgbuffer+off, _LOG_BUFSIZE -off, "[0x%08x] ", (uintptr_t)pthread_self());
d105 3
a107 3
 		len = snprintf(msgbuffer+off, _LOG_BUFSIZE -off, "[%5d] ", getpid());
 	if (len < 0) len = 0;
@@@@ -560,14 +586,18 @@@@ void ECLogger_Pipe::LogVA(unsigned int loglevel, const
d111 2
a112 2
-		len = snprintf(msgbuffer+off, _LOG_BUFSIZE -off, "[0x%08x] ", (unsigned int)pthread_self());
+		len = snprintf(msgbuffer+off, _LOG_BUFSIZE -off, "[0x%08x] ", (uintptr_t)pthread_self());
d114 4
a117 3
 		len = snprintf(msgbuffer+off, _LOG_BUFSIZE -off, "[%5d] ", getpid());
 	if (len < 0) len = 0;
 	off += len;
d121 1
a121 1
 	len = _vsnprintf_l(msgbuffer+off, _LOG_BUFSIZE -off -1, format, datalocale, va);
d123 1
a123 1
+	len = _vsnprintf_l(msgbuffer+off, _LOG_BUFSIZE -off -1, format, va);
d126 3
a128 3
 	if (len < 0) len = 0;
 	len = min(len, _LOG_BUFSIZE -off -2); // yes, -2, otherwise we could have 2 \0 at the end of the buffer
@@@@ -640,9 +670,13 @@@@ namespace PrivatePipe {
@


1.18
log
@update to 7.1.9
@
text
@d1 4
a4 4
$OpenBSD$
--- common/ECLogger.cpp.orig	Mon Feb  3 11:26:04 2014
+++ common/ECLogger.cpp	Mon Feb  3 11:39:25 2014
@@@@ -56,6 +56,10 @@@@
d15 1
a15 1
@@@@ -79,18 +83,22 @@@@ ECLogger::ECLogger(unsigned int max_ll) {
d38 1
a38 1
@@@@ -104,9 +112,11 @@@@ char* ECLogger::MakeTimestamp() {
d50 1
a50 1
@@@@ -146,7 +156,11 @@@@ int ECLogger::snprintf(char *str, size_t size, const c
d62 1
a62 2
@@@@ -242,7 +256,7 @@@@ void ECLogger_File::DoPrefix() {
 	if (timestamp)
d64 1
d71 1
a71 1
@@@@ -302,7 +316,11 @@@@ void ECLogger_File::Log(unsigned int loglevel, const c
d83 1
a83 1
@@@@ -358,7 +376,11 @@@@ void ECLogger_Syslog::LogVA(unsigned int loglevel, con
d95 1
a95 1
@@@@ -445,7 +467,11 @@@@ void ECLogger_Tee::LogVA(unsigned int loglevel, const 
d107 1
a107 1
@@@@ -494,7 +520,7 @@@@ void ECLogger_Pipe::Log(unsigned int loglevel, const s
d116 1
a116 1
@@@@ -530,14 +556,18 @@@@ void ECLogger_Pipe::LogVA(unsigned int loglevel, const
d136 1
a136 1
@@@@ -610,9 +640,13 @@@@ namespace PrivatePipe {
@


1.17
log
@update to 7.1.3
@
text
@d1 3
a3 2
--- common/ECLogger.cpp.orig	Wed Jan 23 13:42:30 2013
+++ common/ECLogger.cpp	Sun Jan 27 13:13:59 2013
d15 1
a15 1
@@@@ -79,18 +83,22 @@@@ ECLogger::ECLogger(int max_ll) {
d60 1
a60 1
 	
d71 1
a71 1
@@@@ -302,7 +316,11 @@@@ void ECLogger_File::Log(int loglevel, const char *form
d73 1
a73 1
 void ECLogger_File::LogVA(int loglevel, const char *format, va_list& va) {
d83 13
a95 1
@@@@ -445,7 +463,11 @@@@ void ECLogger_Tee::LogVA(int loglevel, const char *for
d107 1
a107 1
@@@@ -494,7 +516,7 @@@@ void ECLogger_Pipe::Log(int loglevel, const std::strin
d116 1
a116 1
@@@@ -530,14 +552,18 @@@@ void ECLogger_Pipe::LogVA(int loglevel, const char *fo
d136 1
a136 1
@@@@ -610,9 +636,13 @@@@ namespace PrivatePipe {
d147 1
a147 1
 		
@


1.16
log
@unbreak build by adding missing patch
@
text
@d1 2
a2 3
$OpenBSD: patch-common_ECLogger_cpp,v 1.15 2012/10/28 21:51:08 robert Exp $
--- common/ECLogger.cpp.orig	Thu Oct 18 19:06:56 2012
+++ common/ECLogger.cpp	Mon Oct 29 20:06:21 2012
d49 13
a61 1
@@@@ -230,7 +240,7 @@@@ void ECLogger_File::DoPrefix() {
d70 1
a70 1
@@@@ -290,7 +300,11 @@@@ void ECLogger_File::Log(int loglevel, const char *form
d82 1
a82 1
@@@@ -433,7 +447,11 @@@@ void ECLogger_Tee::LogVA(int loglevel, const char *for
d94 1
a94 1
@@@@ -482,7 +500,7 @@@@ void ECLogger_Pipe::Log(int loglevel, const std::strin
d103 1
a103 1
@@@@ -518,14 +536,18 @@@@ void ECLogger_Pipe::LogVA(int loglevel, const char *fo
d123 1
a123 1
@@@@ -598,9 +620,13 @@@@ namespace PrivatePipe {
@


1.15
log
@update to Zarafa 7.1.1
@
text
@d1 3
a3 3
$OpenBSD$
--- common/ECLogger.cpp.orig	Sun Oct 28 21:09:07 2012
+++ common/ECLogger.cpp	Sun Oct 28 21:12:26 2012
d64 2
a66 2
+#else
 	_vsnprintf_l(msgbuffer, _LOG_BUFSIZE, format, datalocale, va);
d76 2
a78 2
+#else
 	_vsnprintf_l(msgbuffer, _LOG_BUFSIZE, format, datalocale, va);
d92 1
a92 1
@@@@ -518,7 +536,7 @@@@ void ECLogger_Pipe::LogVA(int loglevel, const char *fo
d101 12
a112 1
@@@@ -598,9 +616,13 @@@@ namespace PrivatePipe {
@


1.14
log
@Major update to zarafa-7.1.0.
Complete ChangeLog available at:
http://download.zarafa.com/community/final/7.1/final-changelog-7.1.txt
@
text
@d2 2
a3 2
--- common/ECLogger.cpp.orig	Wed Aug  8 17:14:57 2012
+++ common/ECLogger.cpp	Wed Aug 29 13:27:02 2012
d63 1
a63 1
+#ifdef __OpenBSD__
d75 1
a75 1
+#ifdef __OpenBSD__
d101 1
a101 1
@@@@ -598,15 +616,21 @@@@ namespace PrivatePipe {
a114 8
 
+#ifndef __OpenBSD__
 		// since we forked, set it for the complete process
 		forceUTF8Locale(false, NULL);
+#endif
 
 		if (bNPTL) {
 			sigemptyset(&signal_mask);
@


1.13
log
@Make this work with rthreads.
Fix store creation.
Add a comment for the procmail sample in the README.
@
text
@d1 4
a4 8
$OpenBSD: patch-common_ECLogger_cpp,v 1.12 2011/12/22 17:10:04 ajacoutot Exp $

Needs newlocale(3).

--- common/ECLogger.cpp.orig	Thu Dec 22 01:02:33 2011
+++ common/ECLogger.cpp	Thu Dec 22 12:14:19 2011
@@@@ -55,6 +55,10 @@@@
 #include <assert.h>
d6 1
d15 1
a15 1
@@@@ -78,15 +82,19 @@@@ ECLogger::ECLogger(int max_ll) {
d20 2
a21 1
 	timelocale = createlocale(LC_TIME, "");
d32 2
a34 1
 
d37 2
a38 1
@@@@ -101,9 +109,11 @@@@ char* ECLogger::MakeTimestamp() {
d50 1
a50 1
@@@@ -224,7 +234,7 @@@@ void ECLogger_File::DoPrefix() {
d59 25
a83 1
@@@@ -475,7 +485,7 @@@@ void ECLogger_Pipe::Log(int loglevel, const std::strin
d91 2
a92 2
 	off += len;
@@@@ -509,7 +519,7 @@@@ void ECLogger_Pipe::LogVA(int loglevel, const char *fo
d100 2
a101 2
 	off += len;
@@@@ -586,9 +596,13 @@@@ namespace PrivatePipe {
d115 8
@


1.12
log
@Update to zarafa-7.0.4.
Details changelog available at:
http://download.zarafa.com/community/final/7.0/final-changelog-7.0.txt
@
text
@d1 1
a1 1
$OpenBSD: patch-common_ECLogger_cpp,v 1.11 2011/11/17 15:14:37 ajacoutot Exp $
d86 1
a86 1
+		bNPTL = false;
@


1.11
log
@Update to zarafa-7.0.3.
@
text
@d1 1
a1 1
$OpenBSD: patch-common_ECLogger_cpp,v 1.10 2011/06/02 12:46:37 ajacoutot Exp $
d5 2
a6 2
--- common/ECLogger.cpp.orig	Thu Nov 17 03:03:21 2011
+++ common/ECLogger.cpp	Thu Nov 17 14:58:59 2011
d50 1
a50 1
@@@@ -222,7 +232,7 @@@@ void ECLogger_File::DoPrefix() {
d77 1
a77 1
@@@@ -580,9 +590,13 @@@@ namespace PrivatePipe {
@


1.10
log
@MAJOR update to zarafa-7.0.0 (RC1).
Committing now because this version performs _much_ better than what we
currently have in tree (see HOMEPAGE for details).

Quick&dirty upgrade steps (but you should follow the README):
------------------------------------------------------------------------
# /etc/rc.d/zarafa stop
===> Make sure _all_ zarafa processes are stopped and BACKUP YOUR DB!
# pkg_add -u zarafa zarafa-webaccess zarafa-libvmime
===> merge configuration (compare /usr/local/share/examples/zarara/*.cfg
with their counterparts under /etc/zarafa/.
# /usr/local/bin/zarafa-server
===> this will only do sanity checks but not start the server
# pkg_add py-mysql
# python2.6 /usr/local/share/doc/zarafa/zarafa7-upgrade
# /etc/rc.d/zarafa start
------------------------------------------------------------------------

tested by robert@@ and myself
ok robert@@
@
text
@d1 1
a1 1
$OpenBSD: patch-common_ECLogger_cpp,v 1.9 2011/04/04 08:01:04 ajacoutot Exp $
d5 2
a6 2
--- common/ECLogger.cpp.orig	Wed Apr 20 19:51:45 2011
+++ common/ECLogger.cpp	Thu Jun  2 11:07:53 2011
d59 1
a59 1
@@@@ -473,7 +483,7 @@@@ void ECLogger_Pipe::Log(int loglevel, const std::strin
d68 1
a68 1
@@@@ -507,7 +517,7 @@@@ void ECLogger_Pipe::LogVA(int loglevel, const char *fo
d77 14
@


1.9
log
@Add clucene support (i.e. enable zarafa-indexer). Note that the
zarafa-indexer is not used by default.
Tweak patches accordingly.
Use RLIMIT_DATA instead of RLIMIT_AS which we don't have.

Fix default client_update_path.
Remove a couple of patch entries that are not needed anymore.

Rewrite zarafa.rc and make it a wrapper script that calls the provided
rc.d(8) scripts. This is much more simple, makes much more sense and
allow for proper debugging as discussed with robert@@.
@
text
@d1 6
a6 3
$OpenBSD: patch-common_ECLogger_cpp,v 1.8 2011/03/29 18:00:03 ajacoutot Exp $
--- common/ECLogger.cpp.orig	Tue Mar 29 00:04:07 2011
+++ common/ECLogger.cpp	Tue Mar 29 17:48:35 2011
d18 42
a59 28
@@@@ -164,7 +168,7 @@@@ ECLogger_File::~ECLogger_File() {
 		if (timestamp)
 			fnPrintf(log, "%s: ", MakeTimestamp());
 		if (prefix == LP_TID)
-			fnPrintf(log, "[0x%08x] ", (unsigned int)pthread_self());
+			fnPrintf(log, "[0x%08lx] ", (unsigned long)pthread_self());
 		else if (prefix == LP_PID)
 			fnPrintf(log, "[%5d] ", getpid());
 		fnPrintf(log, "Previous message logged %d times\n", prevcount);
@@@@ -206,7 +210,7 @@@@ bool ECLogger_File::DupFilter(const std::string &messa
 		if (timestamp)
 			fnPrintf(log, "%s: ", MakeTimestamp());
 		if (prefix == LP_TID)
-			fnPrintf(log, "[0x%08x] ", (unsigned int)pthread_self());
+			fnPrintf(log, "[0x%08lx] ", (unsigned long)pthread_self());
 		else if (prefix == LP_PID)
 			fnPrintf(log, "[%5d] ", getpid());
 		fnPrintf(log, "Previous message logged %d times\n", prevcount);
@@@@ -257,7 +261,7 @@@@ void ECLogger_File::LogVA(int loglevel, const char *fo
 		if (timestamp)
 			fnPrintf(log, "%s: ", MakeTimestamp());
 		if (prefix == LP_TID)
-			fnPrintf(log, "[0x%08x] ", (unsigned int)pthread_self());
+			fnPrintf(log, "[0x%08lx] ", (unsigned long)pthread_self());
 		else if (prefix == LP_PID)
 			fnPrintf(log, "[%5d] ", getpid());
 		fnPrintf(log, "%s\n", msgbuffer);
@@@@ -343,7 +347,7 @@@@ void ECLogger_Pipe::Log(int loglevel, const std::strin
d64 1
a64 1
+		len = snprintf(msgbuffer+off, _LOG_BUFSIZE -off, "[0x%08lx] ", (unsigned long)pthread_self());
d68 1
a68 1
@@@@ -377,7 +381,7 @@@@ void ECLogger_Pipe::LogVA(int loglevel, const char *fo
d73 1
a73 1
+		len = snprintf(msgbuffer+off, _LOG_BUFSIZE -off, "[0x%08lx] ", (unsigned long)pthread_self());
@


1.8
log
@Update to zarafa-6.40.7.
Changelog available at
http://download.zarafa.com/community/final/6.40/changelog-6.40.txt
@
text
@d1 1
a1 1
$OpenBSD: patch-common_ECLogger_cpp,v 1.7 2010/08/22 10:13:27 ajacoutot Exp $
a59 11
@@@@ -607,8 +611,8 @@@@ ECLogger* CreateLogger(ECConfig *lpConfig, char *argv0
 										 lpConfig->GetSetting((prepend+"log_file").c_str()), false);
 			// chown file
 			if (pw || gr) {
-				uid_t uid = -1;
-				gid_t gid = -1;
+				uid_t uid;
+				gid_t gid;
 				if (pw)
 					uid = pw->pw_uid;
 				if (gr)
@


1.7
log
@Update zarafa to version 6.40.1.
See http://download.zarafa.com/zarafa/release/docs/changelog.en.txt
for details.
@
text
@d1 4
a4 5
$OpenBSD: patch-common_ECLogger_cpp,v 1.6 2010/06/06 20:10:21 espie Exp $
--- common/ECLogger.cpp.orig	Tue Aug  3 14:51:42 2010
+++ common/ECLogger.cpp	Sun Aug 22 10:32:31 2010
@@@@ -54,6 +54,10 @@@@
 #include <zlib.h>
d6 1
d15 1
a15 1
@@@@ -162,7 +166,7 @@@@ ECLogger_File::~ECLogger_File() {
d24 1
a24 1
@@@@ -204,7 +208,7 @@@@ bool ECLogger_File::DupFilter(const std::string &messa
d33 1
a33 1
@@@@ -251,7 +255,7 @@@@ void ECLogger_File::Log(int loglevel, const char *form
d42 1
a42 1
@@@@ -330,7 +334,7 @@@@ void ECLogger_Pipe::Log(int loglevel, const std::strin
d51 1
a51 1
@@@@ -359,7 +363,7 @@@@ void ECLogger_Pipe::Log(int loglevel, const char *form
d60 2
a61 2
@@@@ -572,8 +576,8 @@@@ ECLogger* CreateLogger(ECConfig *lpConfig, char *argv0
 			lpLogger = new ECLogger_File(atoi(lpConfig->GetSetting("log_level")), atoi(lpConfig->GetSetting("log_timestamp")), lpConfig->GetSetting("log_file"), false);
@


1.6
log
@fix on LP64 + gcc4
@
text
@d1 15
a15 4
$OpenBSD: patch-common_ECLogger_cpp,v 1.5 2010/04/22 10:06:18 ajacoutot Exp $
--- common/ECLogger.cpp.orig	Tue Apr 27 21:07:02 2010
+++ common/ECLogger.cpp	Sun Jun  6 21:23:41 2010
@@@@ -135,7 +135,7 @@@@ ECLogger_File::~ECLogger_File() {
d17 1
a17 1
 			fprintf(log, "%s: ", MakeTimestamp());
d19 2
a20 2
-			fprintf(log, "[0x%08x] ", (unsigned int)pthread_self());
+			fprintf(log, "[0x%08lx] ", (unsigned long)pthread_self());
d22 3
a24 3
 			fprintf(log, "[%5d] ", getpid());
 		fprintf(log, "Previous message logged %d times\n", prevcount);
@@@@ -172,7 +172,7 @@@@ bool ECLogger_File::DupFilter(const std::string &messa
d26 1
a26 1
 			fprintf(log, "%s: ", MakeTimestamp());
d28 2
a29 2
-			fprintf(log, "[0x%08x] ", (unsigned int)pthread_self());
+			fprintf(log, "[0x%08lx] ", (unsigned long)pthread_self());
d31 3
a33 3
 			fprintf(log, "[%5d] ", getpid());
 		fprintf(log, "Previous message logged %d times\n", prevcount);
@@@@ -216,7 +216,7 @@@@ void ECLogger_File::Log(int loglevel, const char *form
d35 1
a35 1
 			fprintf(log, "%s: ", MakeTimestamp());
d37 2
a38 2
-			fprintf(log, "[0x%08x] ", (unsigned int)pthread_self());
+			fprintf(log, "[0x%08lx] ", (unsigned long)pthread_self());
d40 3
a42 3
 			fprintf(log, "[%5d] ", getpid());
 		fprintf(log, "%s\n", msgbuffer);
@@@@ -284,7 +284,7 @@@@ void ECLogger_Pipe::Log(int loglevel, const std::strin
d51 1
a51 1
@@@@ -311,7 +311,7 @@@@ void ECLogger_Pipe::Log(int loglevel, const char *form
d60 2
a61 2
@@@@ -523,8 +523,8 @@@@ ECLogger* CreateLogger(ECConfig *lpConfig, char *argv0
 			lpLogger = new ECLogger_File(atoi(lpConfig->GetSetting("log_level")), atoi(lpConfig->GetSetting("log_timestamp")), lpConfig->GetSetting("log_file"));
@


1.5
log
@Update to zarafa-6.30.13.
@
text
@d1 48
a48 3
$OpenBSD: patch-common_ECLogger_cpp,v 1.4 2010/03/21 11:15:20 ajacoutot Exp $
--- common/ECLogger.cpp.orig	Wed Apr 14 13:39:51 2010
+++ common/ECLogger.cpp	Thu Apr 22 10:28:51 2010
@


1.4
log
@Major update to zarafa-6.30.12.
Lots and lots of bugfixes...
@
text
@d1 4
a4 4
$OpenBSD: patch-common_ECLogger_cpp,v 1.3 2009/11/18 13:55:39 ajacoutot Exp $
--- common/ECLogger.cpp.orig	Tue Jan 26 17:34:48 2010
+++ common/ECLogger.cpp	Wed Feb  3 08:53:18 2010
@@@@ -290,8 +290,8 @@@@ ECLogger* CreateLogger(ECConfig *lpConfig, char *argv0
@


1.3
log
@Bugfix update to zarafa-6.30.5.
@
text
@d1 4
a4 4
$OpenBSD: patch-common_ECLogger_cpp,v 1.2 2009/10/20 22:34:26 ajacoutot Exp $
--- common/ECLogger.cpp.orig	Thu Nov 12 23:55:00 2009
+++ common/ECLogger.cpp	Wed Nov 18 09:16:53 2009
@@@@ -288,8 +288,8 @@@@ ECLogger* CreateLogger(ECConfig *lpConfig, char *argv0
@


1.2
log
@Update to zarafa-6.30.3.
ChangeLog available here:
http://download.zarafa.com/zarafa/release/docs/changelog.en.txt

(6.30.4 is out, but one thing at a time since this is a big enough update)
@
text
@d1 4
a4 4
$OpenBSD: patch-common_ECLogger_cpp,v 1.1 2009/07/31 09:55:56 ajacoutot Exp $
--- common/ECLogger.cpp.orig	Fri Oct  9 22:34:36 2009
+++ common/ECLogger.cpp	Tue Oct 20 23:41:36 2009
@@@@ -284,8 +284,8 @@@@ ECLogger* CreateLogger(ECConfig *lpConfig, char *argv0
@


1.1
log
@Major update to zarafa-6.30.0.
Full ChangeLog available at
    http://download.zarafa.com/zarafa/release/docs/changelog.en.txt
Now comes with caldav support.

ok jasper@@
@
text
@d1 4
a4 4
$OpenBSD$
--- common/ECLogger.cpp.orig	Tue Jul 28 11:24:00 2009
+++ common/ECLogger.cpp	Tue Jul 28 11:24:18 2009
@@@@ -272,8 +272,8 @@@@ ECLogger* CreateLogger(ECConfig *lpConfig, char *argv0
@

