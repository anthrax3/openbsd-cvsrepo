head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.38
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.36
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.32
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.34
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.30
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.28
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.26
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.24
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.22
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.20
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.18
	OPENBSD_5_0:1.1.1.1.0.16
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.12
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.10
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.8
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	OPENBSD_4_3_BASE:1.1.1.1
	todd_20080219:1.1.1.1
	todd:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2008.02.20.03.47.18;	author todd;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.02.20.03.47.18;	author todd;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- lib/MailScanner/GenericSpam.pm.orig	Thu Dec  7 13:12:22 2006
+++ lib/MailScanner/GenericSpam.pm	Thu Dec  7 13:33:07 2006
@@@@ -101,19 +101,19 @@@@ sub Checks {
   push(@@WholeMessage, "\n");
   $message->{store}->ReadBody(\@@WholeMessage, $maxsize);
 
-  my($GenericSpamResult, $GenericSpamReport);
+  my($GenericSpamResult, $GenericSpamReport, @@GenericSpamHeaders);
   $GenericSpamResult = 0;
   $GenericSpamReport = "";
-  ($GenericSpamResult, $GenericSpamReport) =
+  ($GenericSpamResult, $GenericSpamReport, @@GenericSpamHeaders) =
     GSForkAndTest($message, \@@WholeMessage);
-  return ($GenericSpamResult, $GenericSpamReport);
+  return ($GenericSpamResult, $GenericSpamReport, @@GenericSpamHeaders);
 }
 
 # Run the generic spam scanner, and capture the 2 lines of output
 sub GSForkAndTest {
   my($Message, $Contents) = @@_;
 
-  my($pipe, $gsscore, $gsreport, $queuelength);
+  my($pipe, $gsscore, $gsreport, @@gsheaders, $queuelength);
   my $PipeReturn = 0;
 
   $queuelength = MailScanner::Config::Value('gstimeoutlen', $Message);
@@@@ -129,23 +129,25 @@@@ sub GSForkAndTest {
     # In the child
     $pipe->writer();
     $pipe->autoflush();
-    my($gsscore, $gsreport);
+    my($gsscore, $gsreport, @@gsheaders);
     eval {
       #print STDERR "ClientIP = " . $Message->{clientip} . "\n";
       #print STDERR "From = " . $Message->{from} . "\n";
       #print STDERR "To = " . join(', ', @@{$Message->{to}}) . "\n";
       #print STDERR "This is in the caller\n";
 
-      ($gsscore, $gsreport) = MailScanner::CustomConfig::GenericSpamScanner(
-       $Message->{clientip},
-       $Message->{from},
-       $Message->{to},
+      ($gsscore, $gsreport, @@gsheaders) = MailScanner::CustomConfig::GenericSpamScanner(
+       $Message,
        $Contents);
     };
     
     $gsscore = $gsscore + 0.0;
     print $pipe "$gsscore\n";
     print $pipe $gsreport . "\n";
+    foreach my $header (@@gsheaders) {
+        #print STDERR " to pipe .. <$header> \n";
+	print $pipe $header . "\n";
+    }
     $pipe->close();
     $pipe = undef;
     exit 0;
@@@@ -157,6 +159,10 @@@@ sub GSForkAndTest {
     alarm MailScanner::Config::Value('gstimeout');
     $gsscore = <$pipe>;
     $gsreport = <$pipe>;
+    foreach my $h (<$pipe>) {
+	chomp $h;
+	push @@gsheaders,$h;
+    }
 
     # Not sure if next 2 lines should be this way round...
     waitpid $pid, 0;
@@@@ -246,7 +252,7 @@@@ sub GSForkAndTest {
   #print STDERR "Generic Spam Scanner points = $gsscore\n";
   #print STDERR "Generic Spam Scanner report = $gsreport\n";
 
-  return ($gsscore, $gsreport);
+  return ($gsscore, $gsreport, @@gsheaders);
 }
 
 1;
@


1.1.1.1
log
@import MailScanner 4.66.5-3, a virus/spam scanning framework

MailScanner is a complete e-mail security system designed for use on
e-mail gateways. It protects against viruses, and detects attacks
against e-mail client packages (such as Outlook, Outlook Express,
Eudora). It can also detect almost all unsolicited commercial e-mail
(spam) passing through it and respond to all incidents in a wide variety
of ways.

..see http://www.mailscanner.info/ for more details.

I have included a generic spam scanner that if enabled uses dspam, as an
alternative to SpamAssassin.

Thanks to Brad Smith for helping get this ready for import.  This has been
a few years in the making.
@
text
@@
