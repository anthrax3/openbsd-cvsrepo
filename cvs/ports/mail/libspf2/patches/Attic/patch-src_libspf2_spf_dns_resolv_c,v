head	1.2;
access;
symbols
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	OPENBSD_4_3_BASE:1.1.1.1
	okan_20080130:1.1.1.1
	okan:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2008.11.05.17.20.08;	author jasper;	state dead;
branches;
next	1.1;

1.1
date	2008.01.30.15.58.50;	author okan;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.01.30.15.58.50;	author okan;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update libspf2 to 1.2.9
- includes a SECURITY FIX for a buffer overflow

from frank dennis, with minor tweaks by me
@
text
@$OpenBSD: patch-src_libspf2_spf_dns_resolv_c,v 1.1 2008/01/30 15:58:50 okan Exp $
--- src/libspf2/spf_dns_resolv.c.orig	Fri Feb 18 21:38:12 2005
+++ src/libspf2/spf_dns_resolv.c	Thu Jan 24 23:14:02 2008
@@@@ -71,13 +71,18 @@@@ typedef struct
 # define SPF_h_errno h_errno
 #endif
 
+#if HAVE_DECL_RES_NINIT
 static pthread_once_t	res_state_control = PTHREAD_ONCE_INIT;
 static pthread_key_t	res_state_key;
 
 static void
 SPF_dns_resolv_thread_term(void *arg)
 {
+#ifdef res_ndestroy
+	res_ndestroy( (struct __res_state *)arg );
+#else
 	res_nclose( (struct __res_state *)arg );
+#endif
 	free(arg);
 }
 
@@@@ -86,6 +91,7 @@@@ SPF_dns_resolv_init_key()
 {
 	pthread_key_create(&res_state_key, SPF_dns_resolv_thread_term);
 }
+#endif
 
 
 #if 0
@@@@ -130,8 +136,10 @@@@ SPF_dns_resolv_lookup(SPF_dns_server_t *spf_dns_server
     int		rdlen;
     const u_char	*rdata, *rdata_end;
 
+#if HAVE_DECL_RES_NINIT
 	void				*res_spec;
 	struct __res_state	*res_state;
+#endif
 
 	SPF_ASSERT_NOTNULL(spf_dns_server);
 
@@@@ -140,10 +148,15 @@@@ SPF_dns_resolv_lookup(SPF_dns_server_t *spf_dns_server
 	SPF_ASSERT_NOTNULL(spfhook);
 #endif
 
+#if HAVE_DECL_RES_NINIT
 	res_spec = pthread_getspecific(res_state_key);
 	if (res_spec == NULL) {
 		res_state = (struct __res_state *)
 						malloc(sizeof(struct __res_state));
+		if (res_state == NULL) {
+			SPF_error("Failed to call malloc()");
+		}
+		memset(res_state, 0, sizeof(*res_state));
 		if (res_ninit(res_state) != 0) {
 			SPF_error("Failed to call res_ninit()");
 		}
@@@@ -152,6 +165,11 @@@@ SPF_dns_resolv_lookup(SPF_dns_server_t *spf_dns_server
 	else {
 		res_state = (struct __res_state *)res_spec;
 	}
+#else
+	if ((_res.options & RES_INIT) == 0 && res_init() != 0) {
+		SPF_error("Failed to call res_init()");
+	}
+#endif
 
     /*
      * try resolving the name
@@@@ -393,7 +411,7 @@@@ SPF_dns_resolv_lookup(SPF_dns_server_t *spf_dns_server
 				if ( SPF_dns_rr_buf_realloc( spfrr, cnt, rdlen ) != SPF_E_SUCCESS )
 				return spfrr;
 
-				dst = spfrr->rr[cnt]->txt;
+				dst = (u_char *)(spfrr->rr[cnt]->txt);
 				len = 0;
 				src = (u_char *)rdata;
 				while ( rdlen > 0 )
@@@@ -486,7 +504,9 @@@@ SPF_dns_resolv_new(SPF_dns_server_t *layer_below,
 	SPF_dns_resolv_config_t	*spfhook;
 #endif
 
+#if HAVE_DECL_RES_NINIT
 	pthread_once(&res_state_control, SPF_dns_resolv_init_key);
+#endif
 
     spf_dns_server = malloc(sizeof(SPF_dns_server_t));
     if ( spf_dns_server == NULL )
@@@@ -517,19 +537,19 @@@@ SPF_dns_resolv_new(SPF_dns_server_t *layer_below,
     spfhook = SPF_voidp2spfhook( spf_dns_server->hook );
 #endif
 
-#if HAVE_DECL_RES_NINIT
 #if 0
+#if HAVE_DECL_RES_NINIT
     if ( res_ninit( &spfhook->res_state ) != 0 ) {
 		free(spfhook);
 		free(spf_dns_server);
 		return NULL;
     }
-#endif
 #else
     if ( res_init() != 0 ) {
 		free( spf_dns_server );
 		return NULL;
     }
+#endif
 #endif
 
     return spf_dns_server;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@import libspf2

libspf2 is an implementation of the Sender Policy Framework (SPF).

ok jakob@@ merdely@@
@
text
@@
