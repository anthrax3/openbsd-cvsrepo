head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.20
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.18
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.14
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.16
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.12
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.10
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.8
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_4_2:1.1.0.14
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.12
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.10
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.8
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.6
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.4
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2012.07.09.09.34.26;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2007.10.25.21.10.22;	author landry;	state dead;
branches;
next	1.1;

1.1
date	2004.05.08.06.50.10;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Unbreak with gnutls>=3.
@
text
@$OpenBSD$
--- wmbiff/tlsComm.c.orig	Mon Jul  9 11:24:15 2012
+++ wmbiff/tlsComm.c	Mon Jul  9 11:29:12 2012
@@@@ -410,7 +410,7 @@@@ static void
 tls_check_certificate(struct connection_state *scs,
 					  const char *remote_hostname) 
 {
-	int certstat;
+	int certstat, status;
 	const gnutls_datum *cert_list;
 	int cert_list_size = 0;
 	gnutls_x509_crt cert;
@@@@ -419,16 +419,16 @@@@ tls_check_certificate(struct connection_state *scs,
 		bad_certificate(scs, "Unable to get certificate from peer.\n");
 		return;	/* bad_cert will exit if -skip-certificate-check was not given */
 	}
-	certstat = gnutls_certificate_verify_peers(scs->tls_state);
-	if (certstat == GNUTLS_E_NO_CERTIFICATE_FOUND) {
+	certstat = gnutls_certificate_verify_peers2(scs->tls_state, &status);
+	if (status == GNUTLS_E_NO_CERTIFICATE_FOUND) {
 		bad_certificate(scs, "server presented no certificate.\n");
 #ifdef GNUTLS_CERT_CORRUPTED
-	} else if (certstat & GNUTLS_CERT_CORRUPTED) {
+	} else if (status & GNUTLS_CERT_CORRUPTED) {
 		bad_certificate(scs, "server's certificate is corrupt.\n");
 #endif
-	} else if (certstat & GNUTLS_CERT_REVOKED) {
+	} else if (status & GNUTLS_CERT_REVOKED) {
 		bad_certificate(scs, "server's certificate has been revoked.\n");
-	} else if (certstat & GNUTLS_CERT_INVALID) {
+	} else if (status & GNUTLS_CERT_INVALID) {
 		if (gnutls_certificate_type_get(scs->tls_state) == GNUTLS_CRT_X509) {
 			/* bad_certificate(scs, "server's certificate is not trusted.\n"
 			   "there may be a problem with the certificate stored in your certfile\n"); */
@@@@ -438,14 +438,14 @@@@ tls_check_certificate(struct connection_state *scs,
 							"there may be a problem with the certificate stored in your certfile\n");
 		}
 #if defined(GNUTLS_CERT_SIGNER_NOT_FOUND)
-	} else if (certstat & GNUTLS_CERT_SIGNER_NOT_FOUND) {
+	} else if (status & GNUTLS_CERT_SIGNER_NOT_FOUND) {
 		TDM(DEBUG_INFO, "server's certificate is not signed.\n");
 		TDM(DEBUG_INFO,
 			"to verify that a certificate is trusted, use the certfile option.\n");
 #endif
 
 #if defined(GNUTLS_CERT_NOT_TRUSTED)
-	} else if (certstat & GNUTLS_CERT_NOT_TRUSTED) {
+	} else if (status & GNUTLS_CERT_NOT_TRUSTED) {
 		TDM(DEBUG_INFO, "server's certificate is not trusted.\n");
 		TDM(DEBUG_INFO,
 			"to verify that a certificate is trusted, use the certfile option.\n");
@


1.2
log
@Update to wmbiff-0.4.27.
- remove no longer needed patches.
- remove MAINTAINER upon his request.
with tweaks and ok from ajacoutot@@
@
text
@d1 25
a25 8
$OpenBSD: patch-wmbiff_tlsComm_c,v 1.1 2004/05/08 06:50:10 sturm Exp $
--- wmbiff/tlsComm.c.orig	2004-04-25 11:23:08.000000000 +0200
+++ wmbiff/tlsComm.c	2004-04-25 11:29:18.000000000 +0200
@@@@ -22,6 +22,7 @@@@
 #ifdef HAVE_GNUTLS_GNUTLS_H
 #define USE_GNUTLS
 #include <gnutls/gnutls.h>
+#include <gnutls/compat4.h>
d27 2
a28 9
 #ifdef USE_DMALLOC
 #include <dmalloc.h>
@@@@ -328,8 +329,6 @@@@ tls_check_certificate(struct connection_
 	certstat = gnutls_certificate_verify_peers(scs->tls_state);
 	if (certstat ==
 		(GNUTLS_CertificateStatus) GNUTLS_E_NO_CERTIFICATE_FOUND) {
-	} else if (certstat & GNUTLS_CERT_CORRUPTED) {
-		bad_certificate(scs, "server's certificate is corrupt.\n");
 	} else if (certstat & GNUTLS_CERT_REVOKED) {
d30 22
a51 11
 	} else if (certstat & GNUTLS_CERT_INVALID) {
@@@@ -402,8 +401,7 @@@@ struct connection_state *initialize_gnut
 		const int protocols[] = { GNUTLS_TLS1, GNUTLS_SSL3, 0 };
 		const int ciphers[] =
 			{ GNUTLS_CIPHER_RIJNDAEL_128_CBC, GNUTLS_CIPHER_3DES_CBC,
-			GNUTLS_CIPHER_RIJNDAEL_256_CBC, GNUTLS_CIPHER_TWOFISH_128_CBC,
-			GNUTLS_CIPHER_ARCFOUR, 0
+			GNUTLS_CIPHER_RIJNDAEL_256_CBC, GNUTLS_CIPHER_ARCFOUR, 0
 		};
 		const int compress[] = { GNUTLS_COMP_ZLIB, GNUTLS_COMP_NULL, 0 };
 		const int key_exch[] = { GNUTLS_KX_RSA, GNUTLS_KX_DHE_DSS,
@


1.1
log
@update to wmbiff 0.4.22
use new libgcrypt

ok maintainer Michael Schubert <michael at schubert.cx>
@
text
@d1 1
a1 1
$OpenBSD$
@

