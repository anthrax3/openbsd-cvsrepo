head	1.2;
access;
symbols
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	lebel_2001-Jul-04:1.1.1.1
	lebel:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.09.14.15.21.14;	author naddy;	state dead;
branches;
next	1.1;

1.1
date	2001.07.04.15.22.33;	author lebel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.04.15.22.33;	author lebel;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to 2.9b37.
From: Nikolay Sturm <sturm@@sec.informatik.tu-darmstadt.de>
@
text
@$OpenBSD: patch-bsafe_bsafeeay_c,v 1.1 2001/07/04 15:22:33 lebel Exp $
use openssl header files in /usr/include
and correct some pointer type mismatches

--- Src/bsafe/bsafeeay.c.orig	Tue Jan 19 03:29:20 1999
+++ Src/bsafe/bsafeeay.c	Sun Jun  3 20:38:34 2001
@@@@ -54,12 +54,12 @@@@
 #include <stdio.h>
 #include <unistd.h>
 #include <stdarg.h>
-#include <rsa.h>
-#include <des.h>
-#include <md5.h>
-#include <sha.h>
-#include <rand.h>
-#include <dh.h>
+#include <openssl/rsa.h>
+#include <openssl/des.h>
+#include <openssl/md5.h>
+#include <openssl/sha.h>
+#include <openssl/rand.h>
+#include <openssl/dh.h>
 #include <bsafeeay.h>
 #include <assert.h>
 
@@@@ -1674,8 +1674,8 @@@@ B_EncryptUpdate( B_ALGORITHM_OBJ obj, PO
 
       des_set_key( (des_cblock *)kobj->data, sched );
 
-      des_ncbc_encrypt( (des_cblock *)in, 
-			(des_cblock *)out, 
+      des_ncbc_encrypt( in, 
+			out, 
 			inlen, 
 			sched, 
 			(des_cblock *)obj->info, 
@@@@ -1698,8 +1698,8 @@@@ B_EncryptUpdate( B_ALGORITHM_OBJ obj, PO
       des_set_key( (des_cblock *)(kobj->data + 2 * sizeof(des_cblock)),
 		  sched3 );
 
-      des_ede3_cbc_encrypt( (des_cblock *)in, 
-			   (des_cblock *)out, 
+      des_ede3_cbc_encrypt( in, 
+			   out, 
 			   inlen, 
 			   sched1, sched2, sched3,
 			   (des_cblock *)obj->info, 
@@@@ -1735,8 +1735,8 @@@@ B_EncryptUpdate( B_ALGORITHM_OBJ obj, PO
       kobj = (B_KEY_OBJ)obj->key;
       des_set_key( (des_cblock *)kobj->data, sched );
 
-      des_ncbc_encrypt( (des_cblock *)in_pad, 
-			(des_cblock *)out, 
+      des_ncbc_encrypt( in_pad, 
+			out, 
 			newlen, 
 			sched, 
 			(des_cblock *)obj->info, 
@@@@ -1772,8 +1772,8 @@@@ B_EncryptUpdate( B_ALGORITHM_OBJ obj, PO
 
       des_set_key( (des_cblock *)obj->state, sched );
 
-      des_ncbc_encrypt( (des_cblock *)in_pad, 
-			(des_cblock *)out, 
+      des_ncbc_encrypt( in_pad, 
+			out, 
 			newlen, 
 			sched, 
 			(des_cblock *)&(obj->state[8]), 
@@@@ -1809,8 +1809,8 @@@@ B_EncryptUpdate( B_ALGORITHM_OBJ obj, PO
 
       des_set_key( (des_cblock *)obj->state, sched );
 
-      des_ncbc_encrypt( (des_cblock *)in_pad, 
-			(des_cblock *)out, 
+      des_ncbc_encrypt( in_pad, 
+			out, 
 			newlen, 
 			sched, 
 			(des_cblock *)&(obj->state[8]), 
@@@@ -2039,8 +2039,8 @@@@ B_DecryptUpdate( B_ALGORITHM_OBJ obj, PO
 
       des_set_key( (des_cblock *)kobj->data, sched );
       
-      des_ncbc_encrypt( (des_cblock *)in, 
-			(des_cblock *)out, 
+      des_ncbc_encrypt( in, 
+			out, 
 			inlen, 
 			sched, 
 			(des_cblock *)obj->info, 
@@@@ -2063,8 +2063,8 @@@@ B_DecryptUpdate( B_ALGORITHM_OBJ obj, PO
       des_set_key( (des_cblock *)(kobj->data + 2 * sizeof(des_cblock)),
 		  sched3 );
       
-      des_ede3_cbc_encrypt( (des_cblock *)in, 
-			   (des_cblock *)out, 
+      des_ede3_cbc_encrypt( in, 
+			   out, 
 			   inlen, 
 			   sched1, sched2, sched3,
 			   (des_cblock *)obj->info, 
@@@@ -2082,8 +2082,8 @@@@ B_DecryptUpdate( B_ALGORITHM_OBJ obj, PO
       kobj = (B_KEY_OBJ)obj->key;
       des_set_key( (des_cblock *)kobj->data, sched );
 
-      des_ncbc_encrypt( (des_cblock *)in, 
-			(des_cblock *)out, 
+      des_ncbc_encrypt( in, 
+			out, 
 			inlen, 
 			sched, 
 			(des_cblock *)obj->info, 
@@@@ -2104,8 +2104,8 @@@@ B_DecryptUpdate( B_ALGORITHM_OBJ obj, PO
       kobj = (B_KEY_OBJ)obj->key;
       des_set_key( (des_cblock *)obj->state, sched );
 
-      des_ncbc_encrypt( (des_cblock *)in, 
-			(des_cblock *)out, 
+      des_ncbc_encrypt( in, 
+			out, 
 			inlen, 
 			sched, 
 			(des_cblock *)&(obj->state[8]), 
@@@@ -2126,8 +2126,8 @@@@ B_DecryptUpdate( B_ALGORITHM_OBJ obj, PO
       kobj = (B_KEY_OBJ)obj->key;
       des_set_key( (des_cblock *)obj->state, sched );
 
-      des_ncbc_encrypt( (des_cblock *)in, 
-			(des_cblock *)out, 
+      des_ncbc_encrypt( in, 
+			out, 
 			inlen, 
 			sched, 
 			(des_cblock *)&(obj->state[8]), 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@initial import of mixmaster-2.0.4b45:
--
This software comes in a client only configuration! If you want
to setup a mixmaster server, read through the example files,
man page and keep in mind, that the server stores all it's files
in $MIXPATH (/etc/mixmaster by default).

The purpose of anonymous remailers (hereafter simply remailers) is
to provide protection against traffic analysis. Traffic analysis
is the study of who you are communicating with, when, and how often.
This reveals more than you might expect about your activities. It
will indicate who your friends and colleagues are (and they can be
told apart by looking at the times you contact them). What your
interests are, from which catalog companies you contact, and which
ftp and WWW sites you visit. Traffic analysis can even reveal
business secrets, e.g. your frequent contact with a rival could
give hints of an impending merger.

Remailers protect your e-mail from traffic analysis. The original
remailers did this by removing all headers, except the subject line,
from any message you sent to them and then forwarding them a
destination of your choice. The recipient of such a message would
not know who had sent it.

The addition of encryption to this scheme gave significant protection
from attackers who simply look a the primary improvement with the
type 2 remailer Mixmaster.

WWW: http://mixmaster.shinn.net

Submitted by Nikolay Sturm <nikolay.sturm@@desy.de>

@
text
@@
