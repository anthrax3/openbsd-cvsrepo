head	1.1;
access;
symbols
	OPENBSD_4_0:1.1.0.4
	OPENBSD_4_1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2007.06.26.21.26.32;	author sturm;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2007.06.26.21.26.32;	author sturm;	state Exp;
branches;
next	;

1.1.4.1
date	2007.06.26.21.26.44;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file patch-security_nss_lib_freebl_unix_rand_c was initially added on branch OPENBSD_4_1.
@
text
@@


1.1.4.1
log
@security update to thunderbird 1.5.0.12
set soft fd to 128
backport an nss fix for a deadlock seen w/ enigmail
@
text
@a0 33
$OpenBSD: patch-mozilla_security_nss_lib_freebl_unix_rand_c,v 1.1 2007/06/22 13:37:58 kurt Exp $
--- security/nss/lib/freebl/unix_rand.c.orig	Thu Jun 21 14:25:55 2007
+++ security/nss/lib/freebl/unix_rand.c	Thu Jun 21 14:41:25 2007
@@@@ -843,21 +843,19 @@@@ safe_popen(char *cmd)
 static int
 safe_pclose(FILE *fp)
 {
-    pid_t pid;
-    int count, status;
+    pid_t pid, ret;
+    int status;
 
     if ((pid = safe_popen_pid) == 0)
 	return -1;
     safe_popen_pid = 0;
 
-    /* if the child hasn't exited, kill it -- we're done with its output */
-    count = 0;
-    while (waitpid(pid, &status, WNOHANG) == 0) {
-    	if (kill(pid, SIGKILL) < 0 && errno == ESRCH)
-	    break;
-	if (++count == 1000)
-	    break;
-    }
+    /* kill the child in case it hasn't exited -- we're done with its output */
+    kill(pid, SIGKILL);
+
+    do {
+	ret = waitpid(pid, &status, 0);
+    } while (ret == (pid_t) -1 && errno == EINTR);
 
     /* Reset SIGCHLD signal hander before returning */
     sigaction(SIGCHLD, &oldact, NULL);
@


1.1.2.1
log
@security update to thunderbird 1.5.0.12
set soft fd to 128
backport an nss fix for a deadlock seen w/ enigmail
@
text
@a0 33
$OpenBSD: patch-mozilla_security_nss_lib_freebl_unix_rand_c,v 1.1 2007/06/22 13:37:58 kurt Exp $
--- security/nss/lib/freebl/unix_rand.c.orig	Thu Jun 21 14:25:55 2007
+++ security/nss/lib/freebl/unix_rand.c	Thu Jun 21 14:41:25 2007
@@@@ -843,21 +843,19 @@@@ safe_popen(char *cmd)
 static int
 safe_pclose(FILE *fp)
 {
-    pid_t pid;
-    int count, status;
+    pid_t pid, ret;
+    int status;
 
     if ((pid = safe_popen_pid) == 0)
 	return -1;
     safe_popen_pid = 0;
 
-    /* if the child hasn't exited, kill it -- we're done with its output */
-    count = 0;
-    while (waitpid(pid, &status, WNOHANG) == 0) {
-    	if (kill(pid, SIGKILL) < 0 && errno == ESRCH)
-	    break;
-	if (++count == 1000)
-	    break;
-    }
+    /* kill the child in case it hasn't exited -- we're done with its output */
+    kill(pid, SIGKILL);
+
+    do {
+	ret = waitpid(pid, &status, 0);
+    } while (ret == (pid_t) -1 && errno == EINTR);
 
     /* Reset SIGCHLD signal hander before returning */
     sigaction(SIGCHLD, &oldact, NULL);
@

