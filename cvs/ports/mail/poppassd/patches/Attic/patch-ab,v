head	1.4;
access;
symbols
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.14
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.12
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.10
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_TRACKING_SWITCH:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.8
	OPENBSD_2_7_BASE:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.6
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.4
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.2
	OPENBSD_2_4_BASE:1.1.1.1
	poppassd:1.1.1.1
	angelos:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2005.12.24.16.42.43;	author sturm;	state dead;
branches;
next	1.3;

1.3
date	2004.01.05.03.18.19;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.05.00.42.59;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	98.05.17.04.00.26;	author angelos;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	98.05.17.04.00.26;	author angelos;	state Exp;
branches
	1.1.1.1.8.1;
next	;

1.1.1.1.8.1
date	2000.09.15.05.02.01;	author marc;	state Exp;
branches;
next	;


desc
@@


1.4
log
@new style patches
remove some newlines to let poppassd change passwords

mostly from Paul Pruett <ppruett at webengr.com>
@
text
@--- poppassd.c.orig	2004-01-05 04:15:51.000000000 +0100
+++ poppassd.c	2004-01-05 04:16:07.000000000 +0100
@@@@ -13,11 +13,11 @@@@
  * 
  * Doesn't actually change any passwords itself.  It simply listens for
  * incoming requests, gathers the required information (user name, old
- * password, new password) and executes /bin/passwd, talking to it over
+ * password, new password) and executes /usr/bin/passwd, talking to it over
  * a pseudo-terminal pair.  The advantage of this is that we don't need
  * to have any knowledge of either the password file format (which may
  * include dbx files that need to be rebuilt) or of any file locking
- * protocol /bin/passwd and cohorts may use (and which isn't documented).
+ * protocol /usr/bin/passwd and cohorts may use (and which isn't documented).
  *
  * The current version has been tested at NU under SunOS release 4.1.2 
  * and 4.1.3, and under HP-UX 8.02 and 9.01. We have tested the server 
@@@@ -29,7 +29,7 @@@@
  * Note that unencrypted passwords are transmitted over the network.  If
  * this bothers you, think hard about whether you want to implement the
  * password changing feature.  On the other hand, it's no worse than what
- * happens when you run /bin/passwd while connected via telnet or rlogin.
+ * happens when you run /usr/bin/passwd while connected via telnet or rlogin.
  * Well, maybe it is, since the use of a dedicated port makes it slightly
  * easier for a network snooper to snarf passwords off the wire.
  *
@@@@ -47,7 +47,7 @@@@
  * (which talks to /bin/password) is directly descended from Smith's
  * version, with changes for SunOS and HP-UX by Norstad (with help from
  * sample code in "Advanced Programming in the UNIX Environment"
- * by W. Richard Stevens). The code to report /bin/passwd error messages
+ * by W. Richard Stevens). The code to report /usr/bin/passwd error messages
  * back to the client in the final 500 response, and a new version of the
  * code to find the next free pty, is by Norstad.
  *        
@@@@ -125,7 +125,7 @@@@
 #include <ctype.h>
 #include <strings.h>
 #include <errno.h>
-#include <varargs.h>
+#include <stdarg.h>
 #include <pwd.h>
 #include <string.h>
 #include <termios.h>
@@@@ -145,8 +145,9 @@@@
 static char *P1[] =
    {"Old password:",
     "Changing password for *.\nOld password:",
+    "Changing local password for *.\nOld password:",
     "Changing password for * on *.\nOld password:",
-    "Changing NIS password for * on *.\nOld password:",
+    "Changing NIS password for * on *.\nOld Password: ",
     "Changing password for *\n*'s Old password:",
     ""};
 
@@@@ -165,9 +166,12 @@@@ static char *P3[] =
     
 static char *P4[] =
    {"\n",
+    "\npasswd: rebuilding the database...\npasswd: done\n",
     "NIS entry changed on *\n",
+    "\n\nNIS password has been changed on *.\n",
     ""};
 
+void WriteToClient(char *fmt, ...);
 
 main (argc, argv)
 int argc;
@@@@ -186,11 +190,7 @@@@ char *argv[];
      
      *user = *oldpass = *newpass = 0;
      
-     if (openlog ("poppassd", LOG_PID, LOG_LOCAL2) < 0)
-     {
-	  WriteToClient ("500 Can't open syslog.");
-	       exit (1);
-     }
+     openlog("poppassd", LOG_PID, LOG_LOCAL2);
      
      WriteToClient ("200 poppassd v%s hello, who are you?", VERSION);
      ReadFromClient (line);
@@@@ -218,6 +218,7 @@@@ char *argv[];
 
      if (chkPass (user, oldpass, pw) == FAILURE)
      {
+	  syslog(LOG_ERR, "Incorrect password from %s", user);
 	  WriteToClient ("500 Old password is incorrect.");
 	  exit(1);
      }
@@@@ -264,28 +265,28 @@@@ char *argv[];
 
 	  if ((wpid = waitpid (pid, &wstat, 0)) < 0)
 	  {
-	       syslog (LOG_ERR, "wait for /bin/passwd child failed: %m");
+	       syslog (LOG_ERR, "wait for /usr/bin/passwd child failed: %m");
 	       WriteToClient ("500 Server error (wait failed), get help!");
 	       exit (1);
 	  }
 
 	  if (pid != wpid)
 	  {
-	       syslog (LOG_ERR, "wrong child (/bin/passwd waited for!");
+	       syslog (LOG_ERR, "wrong child (/usr/bin/passwd) waited for!");
 	       WriteToClient ("500 Server error (wrong child), get help!");
 	       exit (1);
 	  }
 
 	  if (WIFEXITED (wstat) == 0)
 	  {
-	       syslog (LOG_ERR, "child (/bin/passwd) killed?");
+	       syslog (LOG_ERR, "child (/usr/bin/passwd) killed?");
 	       WriteToClient ("500 Server error (funny wstat), get help!");
 	       exit (1);
 	  }
 
 	  if (WEXITSTATUS (wstat) != 0)
 	  {
-	       syslog (LOG_ERR, "child (/bin/passwd) exited abnormally");
+	       syslog (LOG_ERR, "child (/usr/bin/passwd) exited abnormally");
 	       WriteToClient ("500 Server error (abnormal exit), get help!");
 	       exit (1);
 	  }
@@@@ -304,17 +305,19 @@@@ char *argv[];
      }
      else      /* Child */
      {
-	  /*
-	   * Become the user trying who's password is being changed.  We're
-	   * about to exec /bin/passwd with is setuid root anyway, but this
-	   * way it looks to the child completely like it's being run by
-	   * the normal user, which makes it do its own password verification
-	   * before doing any thing.  In theory, we've already verified the
-	   * password, but this extra level of checking doesn't hurt.  Besides,
-	   * the way I do it here, if somebody manages to change somebody
-	   * else's password, you can complain to your vendor about security
-	   * holes, not to me!
-	   */
+          /* Start new session - gets rid of controlling terminal. */
+   
+          if (setsid() < 0) {
+               syslog(LOG_ERR, "setsid failed: %m");
+               return(0);
+	  }
+
+	  /* Set login name */
+
+	  if (setlogin(user) < 0) {
+	       syslog(LOG_ERR, "setlogin failed: %m");
+	       return(0);
+          }
 	  setuid (pw->pw_uid);
 	  setgid (pw->pw_gid);
 	  dochild (master, slavedev, user);
@@@@ -324,7 +327,7 @@@@ char *argv[];
 /*
  * dochild
  *
- * Do child stuff - set up slave pty and execl /bin/passwd.
+ * Do child stuff - set up slave pty and execl /usr/bin/passwd.
  *
  * Code adapted from "Advanced Programming in the UNIX Environment"
  * by W. Richard Stevens.
@@@@ -338,13 +341,6 @@@@ char *slavedev, *user;
    int slave;
    struct termios stermios;
 
-   /* Start new session - gets rid of controlling terminal. */
-   
-   if (setsid() < 0) {
-      syslog(LOG_ERR, "setsid failed: %m");
-      return(0);
-   }
-
    /* Open slave pty and acquire as new controlling terminal. */
 
    if ((slave = open(slavedev, O_RDWR)) < 0) {
@@@@ -387,10 +383,10 @@@@ char *slavedev, *user;
       return(0);
    }
 
-   /* Fork /bin/passwd. */
+   /* Fork /usr/bin/passwd. */
 
-   if (execl("/bin/passwd", "passwd", user, (char*)0) < 0) {
-      syslog(LOG_ERR, "can't exec /bin/passwd: %m");
+   if (execl("/usr/bin/passwd", "passwd", user, (char*)0) < 0) {
+      syslog(LOG_ERR, "can't exec /usr/bin/passwd: %m");
       return(0);
    }
 }
@@@@ -408,15 +404,20 @@@@ char *slavedev, *user;
  *
  * Modified by Norstad to remove assumptions about number of pty's allocated
  * on this UNIX box.
+ *
+ * Modified by Stephen Melvin to allocate local space for static character
+ * array, rather than local space to pointer to constant string, which is
+ * not kosher and was crashing FreeBSD 1.1.5.1.
  */
 findpty (slave)
 char **slave;
 {
    int master;
-   static char *line = "/dev/ptyXX";
+   static char line[11];
    DIR *dirp;
    struct dirent *dp;
 
+   strcpy(line,"/dev/ptyXX");
    dirp = opendir("/dev");
    while ((dp = readdir(dirp)) != NULL) {
       if (strncmp(dp->d_name, "pty", 3) == 0 && strlen(dp->d_name) == 5) {
@@@@ -485,9 +486,11 @@@@ char *user, *oldpass, *newpass, *emess;
      }
 
      writestring(master, pswd);
-
+     sleep(2);
      if (!expect(master, P4, buf)) return FAILURE;
 
+     close(master);
+
      return SUCCESS;
 }
 
@@@@ -566,6 +569,7 @@@@ char *buf;
 	}
 	n += m;
 	buf[n] = 0;
+/* syslog(LOG_ERR, "read from child: %s",buf); */
 	initialSegment = 0;
         for (s = expected; **s != 0; s++) {
            result = match(buf, *s);
@@@@ -630,13 +634,12 @@@@ char *buf;
    }
 }
 
-WriteToClient (fmt, va_alist)
-char *fmt;
-va_dcl
+void
+WriteToClient (char *fmt, ...)
 {
 	va_list ap;
 	
-	va_start (ap);
+	va_start (ap, fmt);
 	vfprintf (stdout, fmt, ap);
 	fputs ("\r\n", stdout );
 	fflush (stdout);
@


1.3
log
@varargs -> stdarg
@
text
@@


1.2
log
@Fake
@
text
@d1 2
a2 2
--- poppassd.c.orig	Mon Jun  5 02:32:38 2000
+++ poppassd.c	Mon Jun  5 02:32:38 2000
d35 9
d55 1
a55 1
@@@@ -165,7 +166,9 @@@@ static char *P3[] =
d64 1
d66 3
a68 1
@@@@ -186,11 +189,7 @@@@ char *argv[];
d81 1
a81 1
@@@@ -218,6 +217,7 @@@@ char *argv[];
d89 1
a89 1
@@@@ -264,28 +264,28 @@@@ char *argv[];
d122 1
a122 1
@@@@ -304,17 +304,19 @@@@ char *argv[];
d153 1
a153 1
@@@@ -324,7 +326,7 @@@@ char *argv[];
d162 1
a162 1
@@@@ -338,13 +340,6 @@@@ char *slavedev, *user;
d176 1
a176 1
@@@@ -387,10 +382,10 @@@@ char *slavedev, *user;
d190 1
a190 1
@@@@ -408,15 +403,20 @@@@ char *slavedev, *user;
d212 1
a212 1
@@@@ -485,9 +485,11 @@@@ char *user, *oldpass, *newpass, *emess;
d225 1
a225 1
@@@@ -566,6 +568,7 @@@@ char *buf;
d233 17
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
--- poppassd.c.orig	Mon Mar 31 16:00:34 1997
+++ poppassd.c	Mon Mar 31 16:03:16 1997
d46 1
a46 1
@@@@ -165,7 +166,9 @@@@
d56 1
a56 1
@@@@ -186,11 +189,7 @@@@
d69 1
a69 1
@@@@ -218,6 +217,7 @@@@
d77 1
a77 1
@@@@ -264,28 +264,28 @@@@
d110 1
a110 1
@@@@ -304,17 +304,19 @@@@
d141 1
a141 1
@@@@ -324,7 +326,7 @@@@
d150 1
a150 1
@@@@ -338,13 +340,6 @@@@
d164 1
a164 1
@@@@ -387,10 +382,10 @@@@
d178 1
a178 1
@@@@ -408,15 +403,20 @@@@
d200 1
a200 1
@@@@ -485,9 +485,11 @@@@
d213 1
a213 1
@@@@ -566,6 +568,7 @@@@
@


1.1.1.1
log
@poppassd port
@
text
@@


1.1.1.1.8.1
log
@bring mail as of cut-over date into 2.7 branch
@
text
@d1 2
a2 2
--- poppassd.c.orig	Mon Jun  5 02:32:38 2000
+++ poppassd.c	Mon Jun  5 02:32:38 2000
d46 1
a46 1
@@@@ -165,7 +166,9 @@@@ static char *P3[] =
d56 1
a56 1
@@@@ -186,11 +189,7 @@@@ char *argv[];
d69 1
a69 1
@@@@ -218,6 +217,7 @@@@ char *argv[];
d77 1
a77 1
@@@@ -264,28 +264,28 @@@@ char *argv[];
d110 1
a110 1
@@@@ -304,17 +304,19 @@@@ char *argv[];
d141 1
a141 1
@@@@ -324,7 +326,7 @@@@ char *argv[];
d150 1
a150 1
@@@@ -338,13 +340,6 @@@@ char *slavedev, *user;
d164 1
a164 1
@@@@ -387,10 +382,10 @@@@ char *slavedev, *user;
d178 1
a178 1
@@@@ -408,15 +403,20 @@@@ char *slavedev, *user;
d200 1
a200 1
@@@@ -485,9 +485,11 @@@@ char *user, *oldpass, *newpass, *emess;
d213 1
a213 1
@@@@ -566,6 +568,7 @@@@ char *buf;
@

