head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	2006.10.09.19.26.53;	author brad;	state dead;
branches;
next	1.4;

1.4
date	2006.09.22.15.46.28;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.09.05.17.15;	author brad;	state dead;
branches;
next	1.2;

1.2
date	2006.01.23.20.33.40;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.22.15.35.43;	author brad;	state Exp;
branches;
next	;


desc
@@


1.5
log
@upgrade to Dovecot 1.0rc8
@
text
@$OpenBSD: patch-src_lib_ioloop-notify-kqueue_c,v 1.4 2006/09/22 15:46:28 brad Exp $
--- src/lib/ioloop-notify-kqueue.c.orig	Fri Sep 22 10:39:05 2006
+++ src/lib/ioloop-notify-kqueue.c	Fri Sep 22 10:40:08 2006
@@@@ -111,7 +111,10 @@@@ struct io *io_loop_notify_add(struct iol
 	io->callback = callback;
 	io->context = context;
 
-	EV_SET(&ev, fd, EVFILT_VNODE, EV_ADD,
+	/* EV_CLEAR flag is needed because the EVFILT_VNODE filter reports
+	   event state transitions and not the current state.  With this flag,
+	   the same event is only returned once. */
+	EV_SET(&ev, fd, EVFILT_VNODE, EV_ADD | EV_CLEAR,
 	       NOTE_DELETE | NOTE_WRITE | NOTE_EXTEND | NOTE_REVOKE, 0, io);
 	if (kevent(ctx->kq, &ev, 1, NULL, 0, NULL) < 0) {
 		i_error("kevent(%d, %s) for notify failed: %m", fd, path);
@


1.4
log
@fix a kqueue bug with the filesystem notification mechanism that could
potentially cause Dovecot to spin and chew up all of the available CPU
time.

From Dovecot CVS.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@upgrade to Dovecot 1.0beta3
@
text
@d1 4
a4 80
$OpenBSD: patch-src_lib_ioloop-notify-kqueue_c,v 1.2 2006/01/23 20:33:40 brad Exp $
--- src/lib/ioloop-notify-kqueue.c.orig	Sat Jan 14 18:27:11 2006
+++ src/lib/ioloop-notify-kqueue.c	Mon Jan 23 15:11:11 2006
@@@@ -15,11 +15,13 @@@@
 #ifdef IOLOOP_NOTIFY_KQUEUE
 
 #include "ioloop-internal.h"
+#include "fd-close-on-exec.h"
 #include <unistd.h>
 #include <fcntl.h>
 #include <sys/types.h>
 #include <sys/event.h>
 #include <sys/time.h>
+#include <sys/stat.h>
 
 struct ioloop_notify_handler_context {
 	int kq;
@@@@ -53,7 +55,8 @@@@ void io_loop_notify_handler_init(struct 
 	ctx->event_io = NULL;
 	ctx->kq = kqueue();
 	if (ctx->kq < 0)
-		i_fatal("kqueue() failed: %m");
+		i_fatal("kqueue() for io_loop_notify_handler_init() failed: %m");
+	fd_close_on_exec(ctx->kq, TRUE);
 }
 
 void io_loop_notify_handler_deinit(struct ioloop *ioloop)
@@@@ -61,8 +64,8 @@@@ void io_loop_notify_handler_deinit(struc
 	struct ioloop_notify_handler_context *ctx =
 		ioloop->notify_handler_context;
 
-        if (ctx->event_io)
-                io_remove(ctx->event_io);
+	if (ctx->event_io)
+		io_remove(&ctx->event_io);
 	if (close(ctx->kq) < 0)
 		i_error("close(kqueue notify) failed: %m");
 	p_free(ioloop->pool, ctx);
@@@@ -75,6 +78,11 @@@@ static void unchain_io (struct ioloop *i
 	for (io_p = &ioloop->notifys; *io_p != NULL; io_p = &(*io_p)->next) {
 		if (*io_p == io) {
 			*io_p = io->next;
+			if (io->next) {
+				io->next->prev = io->prev;
+			}
+			io->prev = NULL;
+			io->next = NULL;
 			break;
 		}
 	}
@@@@ -90,25 +98,41 @@@@ struct io *io_loop_notify_add(struct iol
 			     | NOTE_REVOKE, 0, NULL };
 	struct io *io;
 	int fd;
+	struct stat sb;
 
+	i_assert(callback);
 	fd = open(path, O_RDONLY);
 	if (fd == -1) {
 		i_error("open(%s) for notify failed: %m", path);
 		return NULL;
 	}
+	fd_close_on_exec(fd, TRUE);
 
-	ev.ident = fd;
-	ev.udata = io;
-	if (kevent(ctx->kq, &ev, 1, NULL, 0, NULL) < 0) {
-		i_error("kevent(%s) for notify failed: %m", path);
+	if (fstat(fd, &sb) == -1) {
+		i_error("fstat(%d \"%s\") for notify failed: %m", fd, path);
+		close(fd);
 		return NULL;
 	}
+	if (! (sb.st_mode & S_IFDIR)) {
+		close(fd);
+		return NULL;
+	}
 
 	io = p_new(ioloop->pool, struct io, 1);
 	io->fd = fd;
a6 55
+	ev.ident = fd;
+	ev.udata = io;
+	if (kevent(ctx->kq, &ev, 1, NULL, 0, NULL) < 0) {
+		i_error("kevent(%s) for notify failed: fd:%d, %m", path, fd);
+		p_free(ioloop->pool, io);
+		return NULL;
+	}
 	io->next = ioloop->notifys;
+	io->prev = NULL;
+	if (ioloop->notifys)
+		ioloop->notifys->prev = io;
 	ioloop->notifys = io;
 
 	if (ctx->event_io == NULL) {
@@@@ -116,7 +140,6 @@@@ struct io *io_loop_notify_add(struct iol
 			io_add(ctx->kq, IO_READ, event_callback,
 			       ioloop->notify_handler_context);
 	}
-
 	return io;
 }
 
@@@@ -124,15 +147,29 @@@@ void io_loop_notify_remove(struct ioloop
 {
 	struct ioloop_notify_handler_context *ctx =
 		ioloop->notify_handler_context;
-	struct kevent ev = { io->fd, 0, EV_DELETE, 0, 0, NULL };
+	struct kevent ev = { io->fd, EVFILT_VNODE, EV_DELETE, 0, 0, NULL };
+	struct stat sb;
 	int ret;
 
+	if (fcntl(io->fd, F_GETFD, 0) != -1 || errno != EBADF) {
+		if (fstat(io->fd, &sb) == -1) {
+			i_error("fstat(%d) for notify_remove failed:"
+				" %m", io->fd);
+			return;
+		}
+		if (! (sb.st_mode & S_IFDIR)) {
+			i_error("calling io_loop_notify_remove on non-dir"
+				" handle");
+			return;
+		}
+		ret = kevent(ctx->kq, &ev, 1, NULL, 0, 0);
+		if (ret == -1)
+			i_error("kevent() for notify remove failed, "
+				"but fd:%d is valid: (%d) %m", io->fd, errno);
+	}
+	close(io->fd);
 	unchain_io(ioloop, io);
 	p_free(ioloop->pool, io);
-
-	ret = kevent(ctx->kq, &ev, 1, NULL, 0, 0);
-	if (ret == -1)
-		i_error("kevent() for notify failed: %m");
 }
d8 8
a15 1
 #endif
@


1.2
log
@upgrade to Dovecot 1.0beta2
@
text
@d1 1
a1 1
$OpenBSD: patch-src_lib_ioloop-notify-kqueue_c,v 1.1 2006/01/22 15:35:43 brad Exp $
@


1.1
log
@patches for the kqueue code to fix a few issues.

From: <V dot Haisman at sh dot cvut dot cz>
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ src/lib/ioloop-notify-kqueue.c	Sun Jan 22 00:54:23 2006
d18 2
a19 1
@@@@ -54,6 +56,7 @@@@ void io_loop_notify_handler_init(struct 
d22 2
a23 1
 		i_fatal("kqueue() failed: %m");
d28 2
a29 1
@@@@ -62,7 +65,7 @@@@ void io_loop_notify_handler_deinit(struc
d32 1
a32 1
         if (ctx->event_io)
d34 1
d43 5
a47 5
+                        if (io->next) {
+                                io->next->prev = io->prev;
+                        }
+                        io->prev = NULL;
+                        io->next = NULL;
d51 1
a51 2
@@@@ -89,18 +97,26 @@@@ struct io *io_loop_notify_add(struct iol
 			     NOTE_DELETE | NOTE_WRITE | NOTE_EXTEND
d54 2
a55 3
-	int fd;
+	int fd, ret;
+        struct stat sb;
d57 1
a57 1
+        i_assert(callback);
d63 1
a63 1
+        fd_close_on_exec(fd, TRUE);
d69 3
a71 9
+        ret = fstat(fd, &sb);
+        if (ret == -1) {
+                close(fd);
+                i_error("fstat(%d \"%s\") for notify failed: %m", fd, path);
+                return NULL;
+        }
+        if (! (sb.st_mode & S_IFDIR)) {
+                close(fd);
+                i_warning("notification works only for dirs (%s)", path);
d74 4
d79 1
a79 1
@@@@ -108,7 +124,16 @@@@ struct io *io_loop_notify_add(struct iol
d86 2
a87 1
+		i_error("kevent(%s) for notify failed: %m", path);
d91 3
a93 3
+        io->prev = NULL;
+        if (ioloop->notifys)
+                ioloop->notifys->prev = io;
d97 15
a111 2
@@@@ -127,12 +152,14 @@@@ void io_loop_notify_remove(struct ioloop
 	struct kevent ev = { io->fd, 0, EV_DELETE, 0, 0, NULL };
d114 17
a130 1
+        if (!(fcntl(io->fd, F_GETFD, 0) != -1 || errno != EBADF)) {
d134 2
a135 2
 	ret = kevent(ctx->kq, &ev, 1, NULL, 0, 0);
 	if (ret == -1)
a136 3
+                        i_error("kevent() for notify remove failed, "
+                                "but fd:%d is valid: %m", io->fd);
+        }
@

