head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2010.10.03.23.25.52;	author sthen;	state dead;
branches;
next	1.3;

1.3
date	2010.09.17.22.00.18;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.22.18.36.46;	author brad;	state dead;
branches;
next	1.1;

1.1
date	2008.06.19.22.27.33;	author brad;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to 1.2.15, from Brad
@
text
@$OpenBSD: patch-src_lib-storage_index_maildir_maildir-uidlist_c,v 1.3 2010/09/17 22:00:18 sthen Exp $
--- src/lib-storage/index/maildir/maildir-uidlist.c.orig	Fri Sep 17 09:44:44 2010
+++ src/lib-storage/index/maildir/maildir-uidlist.c	Fri Sep 17 09:48:18 2010
@@@@ -89,6 +89,7 @@@@ struct maildir_uidlist {
 	string_t *hdr_extensions;
 
 	unsigned int recreate:1;
+	unsigned int recreate_on_change:1;
 	unsigned int initial_read:1;
 	unsigned int initial_hdr_read:1;
 	unsigned int retry_rewind:1;
@@@@ -758,7 +759,7 @@@@ maildir_uidlist_update_read(struct maildir_uidlist *ui
                         ret = -1;
 
 		if (uidlist->unsorted) {
-			uidlist->recreate = TRUE;
+			uidlist->recreate_on_change = TRUE;
 			maildir_uidlist_records_sort_by_uid(uidlist);
 		}
 		if (uidlist->next_uid <= uidlist->prev_read_uid)
@@@@ -1375,6 +1376,7 @@@@ static int maildir_uidlist_recreate(struct maildir_uid
 		uidlist->fd_size = st.st_size;
 		uidlist->last_read_offset = st.st_size;
 		uidlist->recreate = FALSE;
+		uidlist->recreate_on_change = FALSE;
 		maildir_uidlist_update_hdr(uidlist, &st);
 	}
 	if (ret < 0)
@@@@ -1446,7 +1448,7 @@@@ static int maildir_uidlist_sync_update(struct maildir_
 	}
 
 
-	if (maildir_uidlist_want_recreate(ctx))
+	if (maildir_uidlist_want_recreate(ctx) || uidlist->recreate_on_change)
 		return maildir_uidlist_recreate(uidlist);
 
 	if (!uidlist->locked_refresh || uidlist->fd == -1) {
@@@@ -1796,7 +1798,7 @@@@ static void maildir_uidlist_assign_uids(struct maildir
 		recs[dest]->flags &= ~MAILDIR_UIDLIST_REC_FLAG_MOVED;
 	}
 
-	if (ctx->uidlist->locked_refresh)
+	if (ctx->uidlist->locked_refresh && ctx->uidlist->initial_read)
 		ctx->uidlist->last_seen_uid = ctx->uidlist->next_uid-1;
 
 	ctx->new_files_count = 0;
@


1.3
log
@Dovecot fixes from upstream via Brad.

- maildir: If uidlist isn't read, don't mark its UIDs as being known when
saving.
- maildir: Avoid unnecessary uidlist recreation during mail delivery.
- Removed "die after 3 EINTR write() failures to log".
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@upgrade to Dovecot 1.0.15. bug fix update.

ok sthen@@
@
text
@d1 5
a5 18
$OpenBSD: patch-src_lib-storage_index_maildir_maildir-uidlist_c,v 1.1 2008/06/19 22:27:33 brad Exp $
--- src/lib-storage/index/maildir/maildir-uidlist.c.orig	Mon Mar 10 21:52:54 2008
+++ src/lib-storage/index/maildir/maildir-uidlist.c	Tue Jun 17 22:31:16 2008
@@@@ -25,6 +25,8 @@@@
 /* how many seconds to wait before overriding uidlist.lock */
 #define UIDLIST_LOCK_STALE_TIMEOUT (60*2)
 
+#define UIDLIST_COMPRESS_PERCENTAGE 75
+
 #define UIDLIST_IS_LOCKED(uidlist) \
 	((uidlist)->lock_count > 0)
 
@@@@ -51,6 +53,7 @@@@ struct maildir_uidlist {
 
 	unsigned int version;
 	unsigned int uid_validity, next_uid, prev_read_uid, last_seen_uid;
+	unsigned int read_records_count;
 	uint32_t first_recent_uid;
d7 2
d10 35
a44 50
@@@@ -433,9 +436,11 @@@@ maildir_uidlist_update_read(struct maildir_uidlist *ui
 	orig_next_uid = uidlist->next_uid;
 	if ((ret = maildir_uidlist_read_header(uidlist, input)) > 0) {
 		uidlist->prev_read_uid = 0;
+		uidlist->read_records_count = 0;
 
 		ret = 1;
 		while ((line = i_stream_read_next_line(input)) != NULL) {
+			uidlist->read_records_count++;
 			if (!maildir_uidlist_next(uidlist, line)) {
 				ret = 0;
 				break;
@@@@ -695,10 +700,12 @@@@ static int maildir_uidlist_rewrite_fd(struct maildir_u
 	str_printfa(str, "%u %u %u\n", uidlist->version,
 		    uidlist->uid_validity, uidlist->next_uid);
 
+	uidlist->read_records_count = 0;
 	iter = maildir_uidlist_iter_init(uidlist->mbox->uidlist);
 	while (maildir_uidlist_iter_next(iter, &uid, &flags, &filename)) {
 		/* avoid overflowing str buffer so we don't eat more memory
 		   than we need. */
+		uidlist->read_records_count++;
 		if (str_len(str) + MAX_INT_STRLEN +
 		    strlen(filename) + 5 + 10 >= 4096) {
 			/* flush buffer */
@@@@ -1071,6 +1078,16 @@@@ void maildir_uidlist_sync_finish(struct maildir_uidlis
 	ctx->uidlist->initial_sync = TRUE;
 }
 
+static bool maildir_uidlist_want_compress(struct maildir_uidlist_sync_ctx *ctx)
+{
+	unsigned int min_rewrite_count;
+
+	min_rewrite_count = ctx->uidlist->read_records_count *
+		UIDLIST_COMPRESS_PERCENTAGE / 100;
+	return min_rewrite_count >= ctx->uidlist->record_buf->used /
+		sizeof(struct maildir_uidlist_rec *);
+}
+
 int maildir_uidlist_sync_deinit(struct maildir_uidlist_sync_ctx **_ctx)
 {
 	struct maildir_uidlist_sync_ctx *ctx = *_ctx;
@@@@ -1085,7 +1102,7 @@@@ int maildir_uidlist_sync_deinit(struct maildir_uidlist
 	if (ctx->partial)
 		maildir_uidlist_mark_all(ctx->uidlist, FALSE);
 
-	if (ctx->uidlist->need_rewrite ||
+	if (ctx->uidlist->need_rewrite || maildir_uidlist_want_compress(ctx) ||
 	    (ctx->new_files_count != 0 && !ctx->failed)) {
 		unsigned int nonrecursive_lock_count = 1;
d46 1
@


1.1
log
@Two fixes for Dovecot 1.0..
- Recreate dovecot-uidlist if updating it would shrink the file more than 25%.
- imap_get_base_subject_cased(): Subject trailers weren't removed correctly.

From the Dovecot Mercurial repo.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
@

