head	1.1;
access;
symbols
	OPENBSD_3_9:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2006.12.05.05.52.12;	author sturm;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.12.05.05.52.12;	author sturm;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.12.05.22.52.23;	author sturm;	state dead;
branches;
next	;


desc
@@


1.1
log
@file patch-src_lib_file-cache_c was initially added on branch OPENBSD_3_9.
@
text
@@


1.1.2.1
log
@SECURITY:
Fixed an off-by-one buffer overflow in cache file handling. The
code is executed only with mmap_disable=yes and only if index files
are used (ie. INDEX=MEMORY is safe).

noticed by bernd
@
text
@a0 28
$OpenBSD$

Fixed since 1.0.rc15:

http://dovecot.org/list/dovecot-news/2006-November/000023.html

--- src/lib/file-cache.c.orig	Fri Feb 17 04:00:17 2006
+++ src/lib/file-cache.c	Tue Dec  5 06:38:39 2006
@@@@ -128,8 +128,8 @@@@ ssize_t file_cache_read(struct file_cach
 	i_assert(psize > 0);
 
 	bits = buffer_get_space_unsafe(cache->page_bitmask, 0,
-				       poffset / CHAR_BIT +
-				       (psize + CHAR_BIT - 1) / CHAR_BIT);
+				       (poffset + psize + CHAR_BIT - 1) /
+				       CHAR_BIT);
 
 	dest_offset = poffset * page_size;
 	dest = PTR_OFFSET(cache->mmap_base, dest_offset);
@@@@ -267,7 +267,7 @@@@ void file_cache_invalidate(struct file_c
 	}
 
 	bits = buffer_get_space_unsafe(cache->page_bitmask, offset / CHAR_BIT,
-				       (size + CHAR_BIT - 1) / CHAR_BIT);
+				       1 + (size + CHAR_BIT - 1) / CHAR_BIT);
 
 	/* set the first byte */
 	for (i = offset % CHAR_BIT, mask = 0; i < CHAR_BIT && size > 0; i++) {
@


1.1.2.2
log
@update to dovecot 1.0rc15

many bug fixes and at least one security fix
from brad
@
text
@d1 1
a1 1
$OpenBSD: patch-src_lib_file-cache_c,v 1.1.2.1 2006/12/05 05:52:12 sturm Exp $
@


