head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3;
locks; strict;
comment	@# @;


1.4
date	2010.08.27.08.27.15;	author sthen;	state dead;
branches;
next	1.3;

1.3
date	2010.07.30.20.22.24;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.24.09.51.12;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.07.20.23.49.18;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update Dovecot to 1.2.14, from Brad.
several fixes and adds support for IDLE notifications with the
virtual storage plugin.
@
text
@$OpenBSD: patch-src_lib-storage_index_mbox_mbox-save_c,v 1.3 2010/07/30 20:22:24 sthen Exp $
--- src/lib-storage/index/mbox/mbox-save.c.orig	Wed Jul 14 08:53:24 2010
+++ src/lib-storage/index/mbox/mbox-save.c	Fri Jul 30 14:11:15 2010
@@@@ -403,9 +403,10 @@@@ mbox_save_get_input_stream(struct mbox_save_context *c
 		i_stream_create_crlf(filter) : i_stream_create_lf(filter);
 	i_stream_unref(&filter);
 
-	if (ctx->mail != NULL) {
+	if (ctx->ctx.dest_mail != NULL) {
 		/* caching creates a tee stream */
-		cache_input = index_mail_cache_parse_init(ctx->mail, ret);
+		cache_input =
+			index_mail_cache_parse_init(ctx->ctx.dest_mail, ret);
 		i_stream_unref(&ret);
 		ret = cache_input;
 	}
@@@@ -529,10 +530,10 @@@@ static int mbox_save_body(struct mbox_save_context *ct
 	ssize_t ret;
 
 	while ((ret = i_stream_read(ctx->input)) != -1) {
-		if (ctx->mail != NULL) {
+		if (ctx->ctx.dest_mail != NULL) {
 			/* i_stream_read() may have returned 0 at EOF
 			   because of this parser */
-			index_mail_cache_parse_continue(ctx->mail);
+			index_mail_cache_parse_continue(ctx->ctx.dest_mail);
 		}
 		if (ret == 0)
 			return 0;
@@@@ -585,8 +586,8 @@@@ int mbox_save_continue(struct mail_save_context *_ctx)
 	}
 
 	while ((ret = i_stream_read(ctx->input)) > 0) {
-		if (ctx->mail != NULL)
-			index_mail_cache_parse_continue(ctx->mail);
+		if (ctx->ctx.dest_mail != NULL)
+			index_mail_cache_parse_continue(ctx->ctx.dest_mail);
 
 		data = i_stream_get_data(ctx->input, &size);
 		for (i = 0; i < size; i++) {
@@@@ -675,8 +676,9 @@@@ int mbox_save_finish(struct mail_save_context *_ctx)
 		} T_END;
 	}
 
-	if (ctx->mail != NULL) {
-		index_mail_cache_parse_deinit(ctx->mail, ctx->ctx.received_date,
+	if (ctx->ctx.dest_mail != NULL) {
+		index_mail_cache_parse_deinit(ctx->ctx.dest_mail,
+					      ctx->ctx.received_date,
 					      !ctx->failed);
 	}
 	if (ctx->input != NULL)
@


1.3
log
@- Add a bug fix from upstream via Brad:
mbox: Fields weren't being added to cache file during message saving.

- Knock out the sieve subpackage if building with another flavor.
The object code was ending up linked to db/ldap libraries and thus
producing bad packages in bulk builds. This is a nasty hack from me
to fix packages until we have time to fix the linking and has a
big fat XXX next to it. Ok Brad (maintainer).
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@update to 1.2.13, from Brad
@
text
@d1 6
a6 6
$OpenBSD: patch-src_lib-storage_index_mbox_mbox-save_c,v 1.1 2010/07/20 23:49:18 sthen Exp $
--- src/lib-storage/index/mbox/mbox-save.c.orig	Sat Jul 17 12:00:19 2010
+++ src/lib-storage/index/mbox/mbox-save.c	Sat Jul 17 12:01:04 2010
@@@@ -120,8 +120,11 @@@@ static int write_from_line(struct mbox_save_context *c
 			struct mail_storage *storage =
 				&ctx->mbox->storage->storage;
d8 19
a26 7
-			from_envelope = t_strconcat(storage->ns->user->username,
-						    "@@", my_hostdomain(), NULL);
+			from_envelope =
+				strchr(storage->ns->user->username, '@@') != NULL ?
+				storage->ns->user->username :
+				t_strconcat(storage->ns->user->username,
+					    "@@", my_hostdomain(), NULL);
d28 16
d45 8
a52 1
 		/* save in local timezone, no matter what it was given with */
@


1.1
log
@mbox: When generating envelope to From_-line, don't append a second
@@owndomain if username already has one.

from upstream via Brad.
@
text
@d1 1
a1 1
$OpenBSD$
@

