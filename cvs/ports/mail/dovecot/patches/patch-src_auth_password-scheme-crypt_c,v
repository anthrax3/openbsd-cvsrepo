head	1.4;
access;
symbols
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_9_BASE:1.3;
locks; strict;
comment	@# @;


1.4
date	2016.11.01.14.12.04;	author sthen;	state Exp;
branches;
next	1.3;
commitid	Q9HW3Y4VS9JCHAXP;

1.3
date	2016.01.11.22.45.26;	author sthen;	state Exp;
branches;
next	1.2;
commitid	OfafytTedYjObq8C;

1.2
date	2015.12.12.16.43.09;	author sthen;	state dead;
branches;
next	1.1;
commitid	9rbf6790uDB3Rsiy;

1.1
date	2015.11.10.10.30.04;	author sthen;	state Exp;
branches;
next	;
commitid	vMg2JbWbEMdJ4zJy;


desc
@@


1.4
log
@update to Dovecot 2.2.26.0, ok brad
@
text
@$OpenBSD: patch-src_auth_password-scheme-crypt_c,v 1.3 2016/01/11 22:45:26 sthen Exp $

Dovecot supports various password schemes, e.g. {MD5}, {SHA1},
{SSHA512}, {CRYPT}, etc.  This is used in two cases:

1. Identifying schemes available for 'doveadm pw -s <scheme>' to
generate a hashed password from user input.

2. Deciding which schemes to allow in a password database.
Entries are stored as {SCHEME}passwordhash; the string from within
brackets is checked against the list of supported schemes.

One common scheme is {CRYPT} which passes to the OS crypt() function and
is often used with LDAP password databases as it's also supported by
OpenLDAP for its own authentication.

After DES was removed from crypt(), 'doveadm pw -s CRYPT' started
segfaulting on OpenBSD. To avoid this Dovecot was changed to
test-encrypt a password and check that it can be verified,
if not then that scheme is knocked out. But as well as stopping
the segfault in case 1, it also prevents it from being used for
case 2 i.e. verifying passwords.

Result:

dovecot: auth: Error: ldap(xyz,11.22.33.44,<asdafasfasdasfsa>): Unknown scheme CRYPT

This patch re-allows CRYPT as a supported scheme. On OpenBSD it will
encrypt as blowfish, on other OS it will encrypt as DES. Verification
will work with whichever password formats are supported by the OS.

--- src/auth/password-scheme-crypt.c.orig	Fri Jan  8 01:04:13 2016
+++ src/auth/password-scheme-crypt.c	Fri Jan  8 01:23:35 2016
@@@@ -111,7 +111,12 @@@@ static const struct {
 	const char *salt;
 	const char *expected;
 } sample[] = {
+#ifdef __OpenBSD__
+	{ "08/15!test~4711", "$2a$04$0123456789abcdefABCDEF",
+	  "$2a$04$0123456789abcdefABCDE.N.drYX5yIAL1LkTaaZotW3yI0hQhZru" },
+#else
 	{ "08/15!test~4711", "JB", "JBOZ0DgmtucwE" },
+#endif
 	{ "08/15!test~4711", "$2a$04$0123456789abcdefABCDEF",
 	  "$2a$04$0123456789abcdefABCDE.N.drYX5yIAL1LkTaaZotW3yI0hQhZru" },
 	{ "08/15!test~4711", "$5$rounds=1000$0123456789abcdef",
@@@@ -124,8 +129,13 @@@@ static const struct {
 
 /* keep in sync with the sample struct above */
 static const struct password_scheme crypt_schemes[] = {
+#ifdef __OpenBSD__
 	{ "CRYPT", PW_ENCODING_NONE, 0, crypt_verify,
+	  crypt_generate_blowfisch },
+#else
+	{ "CRYPT", PW_ENCODING_NONE, 0, crypt_verify,
 	  crypt_generate_des },
+#endif
 	{ "BLF-CRYPT", PW_ENCODING_NONE, 0, crypt_verify,
 	  crypt_generate_blowfisch },
 	{ "SHA256-CRYPT", PW_ENCODING_NONE, 0, crypt_verify,
@


1.3
log
@Add a patch to re-allow the CRYPT password scheme in Dovecot. This scheme
checks the password against the stored hash using the OS crypt() function
and supports whichever schemes are supported by the OS, but currently
Dovecot makes some assumptions about hash format (to work around a
segfault when used on OpenBSD following removal of DES from crypt).

'doveadm pw -s CRYPT' (tool to generate hashed passwords) will now produce
bcrypt passwords rather than not allowing the scheme at all. More info in
the patch itself.  OK Brad.
@
text
@d1 1
a1 1
$OpenBSD$
d4 1
a4 1
{SSHA512}, {CRYPT}, etc.  This is is used in two cases:
@


1.2
log
@update to Dovecot 2.2.21, from Brad
@
text
@d1 1
a1 1
$OpenBSD: patch-src_auth_password-scheme-crypt_c,v 1.1 2015/11/10 10:30:04 sthen Exp $
d3 2
a4 1
auth: Don't crash when trying to use CRYPT scheme when crypt() doesn't support DES
d6 29
a34 23
--- src/auth/password-scheme-crypt.c.orig	Tue Nov 10 01:21:24 2015
+++ src/auth/password-scheme-crypt.c	Tue Nov 10 01:23:34 2015
@@@@ -24,6 +24,19 @@@@ void password_set_encryption_rounds(unsigned int round
 }
 
 static void
+crypt_generate_des(const char *plaintext, const char *user ATTR_UNUSED,
+		   const unsigned char **raw_password_r, size_t *size_r)
+{
+#define CRYPT_SALT_LEN 2
+	const char *password, *salt;
+
+	salt = password_generate_salt(CRYPT_SALT_LEN);
+	password = t_strdup(mycrypt(plaintext, salt));
+	*raw_password_r = (const unsigned char *)password;
+	*size_r = strlen(password);
+}
+
+static void
 crypt_generate_blowfisch(const char *plaintext, const char *user ATTR_UNUSED,
 			 const unsigned char **raw_password_r, size_t *size_r)
 {
@@@@ -98,6 +111,7 @@@@ static const struct {
d38 6
a43 1
+	{ "08/15!test~4711", "JB", "JBOZ0DgmtucwE" },
d47 1
a47 1
@@@@ -110,6 +124,8 @@@@ static const struct {
d51 4
d56 2
a57 1
+	  crypt_generate_des },
@


1.1
log
@Fix "doveadm pw" crashing when using the crypt scheme since OpenBSD's
crypt() doesn't support DES now. From Brad.
@
text
@d1 1
a1 1
$OpenBSD$
@

