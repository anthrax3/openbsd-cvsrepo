head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.12
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.10
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	henning_20140623:1.1.1.1
	henning:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2014.06.23.19.17.28;	author henning;	state Exp;
branches
	1.1.1.1;
next	;
commitid	cOcpDyWi3Qq8SMOF;

1.1.1.1
date	2014.06.23.19.17.28;	author henning;	state Exp;
branches;
next	;
commitid	cOcpDyWi3Qq8SMOF;


desc
@@



1.1
log
@Initial revision
@
text
@This Perl module is a suite of tools for implementing DMARC. It adheres
very tightly to the 2013 DMARC draft, intending to implement every MUST
and every SHOULD.

This module can be used...

- by MTAs and filtering tools like SpamAssassin to validate that
incoming messages are aligned with the purported sender's policy.

- by email senders, to receive DMARC reports from other mail servers
and display them via CLI and web interfaces.

- by MTA operators to send DMARC reports to DMARC author domains.
@


1.1.1.1
log
@This Perl module is a suite of tools for implementing DMARC. It adheres
very tightly to the 2013 DMARC draft, intending to implement every MUST
and every SHOULD.
using this module is a bit rough due to documentation <-> code mismatches
and omissions in documentation
help & ok sthen
@
text
@@
