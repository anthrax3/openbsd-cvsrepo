head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.24
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.22
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.18
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.20
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.16
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.14
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.12
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.10
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.8
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.6
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.4
	OPENBSD_5_0:1.5.0.2
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.4.0.34
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.32
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.30
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.28
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.26
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.24
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.22
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.20
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.18
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.16
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.14
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.12
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.10
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_TRACKING_SWITCH:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	hartmeier:1.1.1.1
	majordomo:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2011.03.02.12.40.41;	author landry;	state Exp;
branches;
next	1.4;

1.4
date	2003.02.06.19.30.18;	author dhartmei;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.21.23.35.00;	author danh;	state Exp;
branches
	1.3.6.1
	1.3.8.1;
next	1.2;

1.2
date	2000.05.23.20.17.05;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.22.16.33.49;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.05.22.16.33.49;	author espie;	state Exp;
branches;
next	;

1.3.6.1
date	2003.02.07.01.46.16;	author brad;	state Exp;
branches;
next	;

1.3.8.1
date	2003.02.07.01.07.56;	author brad;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Regen patches.
@
text
@--- sample.cf.orig	Wed Aug 27 17:00:31 1997
+++ sample.cf	Wed Feb  2 13:31:41 2011
@@@@ -27,7 +27,7 @@@@ if ( defined $ENV{"HOME"}) {
 
 # $listdir -- Where are the mailing lists?
 #
-$listdir = "$homedir/lists";
+$listdir = "/var/spool/majordomo/lists";
 
 # $digest_work_dir -- the parent directory for digest's queue area
 # Each list must have a subdirectory under this directory in order for
@@@@ -35,18 +35,18 @@@@ $listdir = "$homedir/lists";
 # 	/usr/local/mail/digest/bblisa
 # as its directory.
 #
-$digest_work_dir = "/usr/local/mail/digest";
+$digest_work_dir = "/var/spool/majordomo/digests";
 
 # $log -- Where do I write my log?
 #
-$log = "$homedir/Log";
+$log = "/var/spool/majordomo/log";
 
 # $sendmail_command -- Pathname to the sendmail program
 #                      usually /usr/lib/sendmail, but some newer BSD systems
 #                      seem to prefer /usr/sbin/sendmail
 #
-$sendmail_command = "/usr/lib/sendmail";
-# $sendmail_command = "/usr/sbin/sendmail";
+# $sendmail_command = "/usr/lib/sendmail";
+$sendmail_command = "/usr/sbin/sendmail";
 
 # $mailer -- What program and args do I use to send mail to the list?
 # $bounce_mailer -- What is used to send mail anywhere else?
@@@@ -80,15 +80,15 @@@@ $bounce_mailer = "$sendmail_command -oi -oee -f\$sende
 # high by uncommenting the following lines.  THIS ONLY WORKS if your "uptime" 
 # command (usually found in /usr/bin/uptime or /usr/bsd/uptime) 
 # returns a string like:
-#   5:23pm  up  5:51,  9 users,  load average: 0.19, 0.25, 0.33
+#   5:23pm  up  5:51,  9 users,  load averages: 0.19, 0.25, 0.33
 #
-#$max_loadavg = 10;                 # Choose the maximum allowed load
+$max_loadavg = 10;                 # Choose the maximum allowed load
 #
-#$uptime = `/usr/bin/uptime` if -x '/usr/bin/uptime';     # Get system uptime
+$uptime = `/usr/bin/uptime` if -x '/usr/bin/uptime';     # Get system uptime
 #$uptime = `/usr/bsd/uptime` if -x '/usr/bsd/uptime';     # or uptime is over here.
 #
 #($avg_1_minute, $avg_5_minutes, $avg_15_minutes) = 
-#    $uptime =~ /average:\s+(\S+),\s+(\S+),\s+(\S+)/;
+#    $uptime =~ /averages:\s+(\S+),\s+(\S+),\s+(\S+)/;
 #
 #exit 75 if ($avg_15_minutes >= $max_loadavg);           # E_TEMPFAIL
 #
@@@@ -164,13 +164,18 @@@@ $majordomo_request = 0;
 # number of hits that are allowed using which before an error is returned.
 # Arguably this should be a per list settable number.
 #
-$max_which_hits = 0;
+# Setting the value to 0 disables the limit. Note that spammmers
+# could try to harvest your subscriber's addresses by sending a
+# broad which command. Compare with which_access and who_access
+# list configuration option.
+#
+$max_which_hits = 1;
 
 # Set the umask for the process. Used to set default file status for
 # config file.
 #
-umask(007);
-$config_umask = 007;
+umask(037);
+$config_umask = 037;
 
 # don't change this. It checks to make sure that you have a new enough
 # version of perl to run majordomo. It is in here because this file is
@@@@ -188,9 +193,8 @@@@ die "Perl version $] too old\n" if ($] < 4.019);
 # Directory where resend temporarily puts its rewritten output message.
 # For the paranoid, this could be changed to a directory that only
 # majordomo has r/w permission to.
-# Uses the environment variable TMPDIR, since that's pretty common
 #
-$TMPDIR = $ENV{'TMPDIR'} || "/usr/tmp";
+$TMPDIR = "/var/spool/majordomo/tmp";
 
 # Tune how long set_lock tries to obtain a lock before giving up. Each
 # attempt waits 1 to 10 seconds before trying again and waittime is
@


1.4
log
@Change default configuration options

  which_access open -> closed
  who_access open -> closed
  max_which_hits 0 -> 1

Those would allow a spammer to harvest all subscriber addresses
if not changed by the list admin. Reported on

http://online.securityfocus.com/archive/1/310113/2003-02-03/2003-02-09/0

Don't restrict the which arguments as the article suggests, though,
because with which_access list and max_which_hits 1, there's no
reason to destroy a useful command.
@
text
@d1 3
a3 3
--- sample.cf.orig	Thu Feb  6 20:20:08 2003
+++ sample.cf	Thu Feb  6 20:21:45 2003
@@@@ -27,7 +27,7 @@@@
d12 1
a12 1
@@@@ -35,18 +35,18 @@@@
d35 1
a35 1
@@@@ -80,15 +80,15 @@@@
d55 1
a55 1
@@@@ -164,13 +164,18 @@@@
d77 1
a77 1
@@@@ -188,9 +193,8 @@@@
@


1.3
log
@- updates from maintainer, Daniel Hartmeier <daniel@@reichardt.ch>.
- style changes to match other ports.
- shorten line length in DESCR.
- remove Majordomo reference from COMMENT.
- sort PLIST.
@
text
@d1 2
a2 2
--- sample.cf.orig	Wed Aug 27 17:00:31 1997
+++ sample.cf	Thu Jan 11 13:17:17 2001
d55 12
a66 1
@@@@ -169,8 +169,8 @@@@
d77 1
a77 1
@@@@ -188,9 +188,8 @@@@
@


1.3.6.1
log
@MFC:
Change default configuration options

  which_access open -> closed
  who_access open -> closed
  max_which_hits 0 -> 1

Those would allow a spammer to harvest all subscriber addresses
if not changed by the list admin. Reported on

http://online.securityfocus.com/archive/1/310113/2003-02-03/2003-02-09/0

Don't restrict the which arguments as the article suggests, though,
because with which_access list and max_which_hits 1, there's no
reason to destroy a useful command.
@
text
@d1 2
a2 2
--- sample.cf.orig	Thu Feb  6 20:20:08 2003
+++ sample.cf	Thu Feb  6 20:21:45 2003
d55 1
a55 12
@@@@ -164,13 +164,18 @@@@
 # number of hits that are allowed using which before an error is returned.
 # Arguably this should be a per list settable number.
 #
-$max_which_hits = 0;
+# Setting the value to 0 disables the limit. Note that spammmers
+# could try to harvest your subscriber's addresses by sending a
+# broad which command. Compare with which_access and who_access
+# list configuration option.
+#
+$max_which_hits = 1;
 
d66 1
a66 1
@@@@ -188,9 +193,8 @@@@
@


1.3.8.1
log
@MFC:
Change default configuration options

  which_access open -> closed
  who_access open -> closed
  max_which_hits 0 -> 1

Those would allow a spammer to harvest all subscriber addresses
if not changed by the list admin. Reported on

http://online.securityfocus.com/archive/1/310113/2003-02-03/2003-02-09/0

Don't restrict the which arguments as the article suggests, though,
because with which_access list and max_which_hits 1, there's no
reason to destroy a useful command.
@
text
@d1 2
a2 2
--- sample.cf.orig	Thu Feb  6 20:20:08 2003
+++ sample.cf	Thu Feb  6 20:21:45 2003
d55 1
a55 12
@@@@ -164,13 +164,18 @@@@
 # number of hits that are allowed using which before an error is returned.
 # Arguably this should be a per list settable number.
 #
-$max_which_hits = 0;
+# Setting the value to 0 disables the limit. Note that spammmers
+# could try to harvest your subscriber's addresses by sending a
+# broad which command. Compare with which_access and who_access
+# list configuration option.
+#
+$max_which_hits = 1;
 
d66 1
a66 1
@@@@ -188,9 +193,8 @@@@
@


1.2
log
@change the configuration file to /etc/majordomo/majordomo.cf and fix
several security problems.
@
text
@a0 1
$OpenBSD: patch-sample_cf,v 1.1.1.1 2000/05/22 16:33:49 espie Exp $
d2 2
a3 2
+++ sample.cf	Mon May 22 16:37:49 2000
@@@@ -27,7 +27,7 @@@@ if ( defined $ENV{"HOME"}) {
d12 1
a12 1
@@@@ -35,18 +35,18 @@@@ $listdir = "$homedir/lists";
d35 1
a35 1
@@@@ -80,15 +80,15 @@@@ $bounce_mailer = "$sendmail_command -oi 
d55 12
a66 1
@@@@ -188,9 +188,8 @@@@ die "Perl version $] too old\n" if ($] <
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD: patch-sample_cf,v 1.0 2000/05/22 17:30:00 dhartmei Exp $
a3 9
@@@@ -10,7 +10,7 @@@@ $whereami = "example.com";
 
 # $whoami -- Who do users send requests to me as?
 #
-$whoami = "Majordomo\@@$whereami";
+$whoami = "majordomo\@@$whereami";
 
 # $whoami_owner -- Who is the owner of the above, in case of problems?
 #
@


1.1.1.1
log
@Majordomo port, by Daniel Hartmeier.
@
text
@@
