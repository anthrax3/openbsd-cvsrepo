head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.14
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.10
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.12
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.8
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.04.19.21.32.37;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Constrain date.y's 2038 check to only when sizeof(time_t) == sizeof(int).
As done in base e.g. usr.bin/cvs/date.y r1.23

Add an XXX comment for stupid static LeapYears table in trn/tin.
@
text
@$OpenBSD$
--- src/parsdate.y.orig	Fri Apr 19 21:23:02 2013
+++ src/parsdate.y	Fri Apr 19 21:59:31 2013
@@@@ -519,6 +519,7 @@@@ Convert(
     static const int	DaysLeap[13] = {
 	0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
     };
+/* XXX 2038 */
     static const int	LeapYears[] = {
 	1972, 1976, 1980, 1984, 1988, 1992, 1996,
 	2000, 2004, 2008, 2012, 2016, 2020, 2024, 2028, 2032, 2036
@@@@ -542,7 +543,9 @@@@ Convert(
 	    mp = DaysLeap;
 	    break;
 	}
-    if (Year < EPOCH || Year > END_OF_TIME
+    /* XXX Sloppily check for 2038 if time_t is 32 bits */
+    if (Year < EPOCH
+     || (sizeof(time_t) == sizeof(int) && Year > 2038)
      || Month < 1 || Month > 12
      /* NOSTRICT */ /* conversion from long may lose accuracy */
      || Day < 1 || Day > mp[(int)Month])
@
