head	1.5;
access;
symbols
	OPENBSD_4_9:1.4.0.6
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_0:1.1.0.16
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.14
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.12
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.10
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.8
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.6
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.4
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2011.06.08.19.15.48;	author kili;	state dead;
branches;
next	1.4;

1.4
date	2010.08.19.08.19.45;	author jasper;	state Exp;
branches
	1.4.2.1
	1.4.4.1;
next	1.3;

1.3
date	2006.10.19.13.50.34;	author espie;	state dead;
branches;
next	1.2;

1.2
date	2006.10.19.13.12.37;	author kili;	state Exp;
branches;
next	1.1;

1.1
date	2003.06.04.01.14.14;	author margarida;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.06.04.01.16.39;	author margarida;	state Exp;
branches;
next	;

1.4.2.1
date	2010.08.21.11.08.34;	author jasper;	state Exp;
branches;
next	;

1.4.4.1
date	2010.08.21.11.10.50;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to ghostscript-9.00.

ok landry@@ (after putting it in a bulk build... thanks)
@
text
@$OpenBSD: patch-src_zfile_c,v 1.4 2010/08/19 08:19:45 jasper Exp $

Security fix for SA40452
Ghostscript "-P-" Command Line Option Security Issue.

Patch from http://bugs.ghostscript.com/show_bug.cgi?id=691350#c15

--- src/zfile.c.orig	Sun Jul 27 04:52:11 2008
+++ src/zfile.c	Tue Aug 17 13:05:23 2010
@@@@ -896,7 +896,91 @@@@ check_file_permissions_aux(i_ctx_t *i_ctx_p, char *fna
     return 0;
 }
 
+/* return zero for success, -ve for error, +1 for continue */
+static int
+lib_file_open_search_with_no_combine(gs_file_path_ptr  lib_path, const gs_memory_t *mem, i_ctx_t *i_ctx_p,
+                                     const char *fname, uint flen, char *buffer, int blen, uint *pclen, ref *pfile,
+                                     gx_io_device *iodev, bool starting_arg_file, char *fmode)
+{
+    stream *s;
+    uint blen1 = blen;
+    if (gp_file_name_reduce(fname, flen, buffer, &blen1) != gp_combine_success)
+      goto skip;
+    if (iodev_os_open_file(iodev, (const char *)buffer, blen1,
+                           (const char *)fmode, &s, (gs_memory_t *)mem) == 0) {
+      if (starting_arg_file ||
+          check_file_permissions_aux(i_ctx_p, buffer, blen1) >= 0) {
+        *pclen = blen1;
+        make_stream_file(pfile, s, "r");
+        return 0;
+      }
+      sclose(s);
+      return_error(e_invalidfileaccess);
+    }
+ skip:;
+    return 1;
+}
 
+/* return zero for success, -ve for error, +1 for continue */
+static int
+lib_file_open_search_with_combine(gs_file_path_ptr  lib_path, const gs_memory_t *mem, i_ctx_t *i_ctx_p,
+                                  const char *fname, uint flen, char *buffer, int blen, uint *pclen, ref *pfile,
+                                  gx_io_device *iodev, bool starting_arg_file, char *fmode)
+{
+    stream *s;
+    const gs_file_path *pfpath = lib_path;
+    uint pi;
+
+    for (pi = 0; pi < r_size(&pfpath->list); ++pi) {
+        const ref *prdir = pfpath->list.value.refs + pi;
+        const char *pstr = (const char *)prdir->value.const_bytes;
+        uint plen = r_size(prdir), blen1 = blen;
+        gs_parsed_file_name_t pname;
+        gp_file_name_combine_result r;
+
+        /* We need to concatenate and parse the file name here
+         * if this path has a %device% prefix.              */
+        if (pstr[0] == '%') {
+            int code;
+
+            /* We concatenate directly since gp_file_name_combine_*
+             * rules are not correct for other devices such as %rom% */
+            code = gs_parse_file_name(&pname, pstr, plen);
+            if (code < 0)
+                continue;
+            memcpy(buffer, pname.fname, pname.len);
+            memcpy(buffer+pname.len, fname, flen);
+            code = pname.iodev->procs.open_file(pname.iodev, buffer, pname.len + flen, fmode,
+                                          &s, (gs_memory_t *)mem);
+            if (code < 0)
+                continue;
+            make_stream_file(pfile, s, "r");
+            /* fill in the buffer with the device concatenated */
+            memcpy(buffer, pstr, plen);
+            memcpy(buffer+plen, fname, flen);
+            *pclen = plen + flen;
+            return 0;
+        } else {
+            r = gp_file_name_combine(pstr, plen,
+                    fname, flen, false, buffer, &blen1);
+            if (r != gp_combine_success)
+                continue;
+            if (iodev_os_open_file(iodev, (const char *)buffer, blen1, (const char *)fmode,
+                                    &s, (gs_memory_t *)mem) == 0) {
+                if (starting_arg_file ||
+                    check_file_permissions_aux(i_ctx_p, buffer, blen1) >= 0) {
+                    *pclen = blen1;
+                    make_stream_file(pfile, s, "r");
+                    return 0;
+                }
+                sclose(s);
+                return_error(e_invalidfileaccess);
+            }
+        }
+    }
+    return 1;
+}
+
 /* Return a file object of of the file searched for using the search paths. */
 /* The fname cannot contain a device part (%...%) but the lib paths might. */
 /* The startup code calls this to open the initialization file gs_init.ps. */
@@@@ -913,6 +997,8 @@@@ lib_file_open(gs_file_path_ptr  lib_path, const gs_mem
     char fmode[4] = { 'r', 0, 0, 0 };		/* room for binary suffix */
     stream *s;
     gx_io_device *iodev = iodev_default;
+    gs_main_instance *minst = get_minst_from_memory(mem);
+    int code;
 
     /* when starting arg files (@@ files) iodev_default is not yet set */
     if (iodev == 0)
@@@@ -926,75 +1012,37 @@@@ lib_file_open(gs_file_path_ptr  lib_path, const gs_mem
        search_with_no_combine = starting_arg_file;
        search_with_combine = true;
     }
-    if (search_with_no_combine) {
-	uint blen1 = blen;
 
-	if (gp_file_name_reduce(fname, flen, buffer, &blen1) != gp_combine_success)
-	    goto skip;
-	if (iodev_os_open_file(iodev, (const char *)buffer, blen1,
-				(const char *)fmode, &s, (gs_memory_t *)mem) == 0) {
-	    if (starting_arg_file ||
-			check_file_permissions_aux(i_ctx_p, buffer, blen1) >= 0) {
-		*pclen = blen1;
-		make_stream_file(pfile, s, "r");
-		return 0;
-	    }
-	    iodev_os_fclose(iodev, s->file);
-	    return_error(e_invalidfileaccess);
-	}
-	skip:;
-    } 
-    if (search_with_combine) {
-	const gs_file_path *pfpath = lib_path;
-	uint pi;
-
-	for (pi = 0; pi < r_size(&pfpath->list); ++pi) {
-	    const ref *prdir = pfpath->list.value.refs + pi;
-	    const char *pstr = (const char *)prdir->value.const_bytes;
-	    uint plen = r_size(prdir), blen1 = blen;
-    	    gs_parsed_file_name_t pname;
-	    gp_file_name_combine_result r;
-
-	    /* We need to concatenate and parse the file name here
-	     * if this path has a %device% prefix.		*/
-	    if (pstr[0] == '%') {
-		int code;
-
-		/* We concatenate directly since gp_file_name_combine_*
-		 * rules are not correct for other devices such as %rom% */
-		if (i_ctx_p == NULL)
-		    continue;		/* devices not yet initialized */
-		gs_parse_file_name(&pname, pstr, plen);
-		memcpy(buffer, pname.fname, pname.len);
-		memcpy(buffer+pname.len, fname, flen);
-		code = pname.iodev->procs.open_file(pname.iodev, buffer, pname.len + flen, fmode,
-					      &s, (gs_memory_t *)mem);
-		if (code < 0)
-		    continue;
-		make_stream_file(pfile, s, "r");
-		/* fill in the buffer with the device concatenated */
-		memcpy(buffer, pstr, plen);
-		memcpy(buffer+plen, fname, flen);
-		*pclen = plen + flen;
-		return 0;
-	    } else {
-		r = gp_file_name_combine(pstr, plen, 
-			fname, flen, false, buffer, &blen1);
-		if (r != gp_combine_success)
-		    continue;
-		if (iodev_os_open_file(iodev, (const char *)buffer, blen1, (const char *)fmode,
-					&s, (gs_memory_t *)mem) == 0) {
-		    if (starting_arg_file ||
-			check_file_permissions_aux(i_ctx_p, buffer, blen1) >= 0) {
-			*pclen = blen1;
-			make_stream_file(pfile, s, "r");
-			return 0;
-		    }
-		    iodev_os_fclose(iodev, s->file);
-		    return_error(e_invalidfileaccess);
-		}
-	    }
-	}
+    if (minst->search_here_first) {
+      if (search_with_no_combine) {
+        code = lib_file_open_search_with_no_combine(lib_path, mem, i_ctx_p,
+                                                    fname, flen, buffer, blen, pclen, pfile,
+                                                    iodev, starting_arg_file, fmode);
+        if (code <= 0) /* +ve means continue continue */
+          return code;
+      }
+      if (search_with_combine) {
+        code = lib_file_open_search_with_combine(lib_path, mem, i_ctx_p,
+                                                 fname, flen, buffer, blen, pclen, pfile,
+                                                 iodev, starting_arg_file, fmode);
+        if (code <= 0) /* +ve means continue searching */
+          return code;
+      }
+    } else {
+      if (search_with_combine) {
+        code = lib_file_open_search_with_combine(lib_path, mem, i_ctx_p,
+                                                 fname, flen, buffer, blen, pclen, pfile,
+                                                 iodev, starting_arg_file, fmode);
+        if (code <= 0) /* +ve means continue searching */
+          return code;
+      }
+      if (search_with_no_combine) {
+        code = lib_file_open_search_with_no_combine(lib_path, mem, i_ctx_p,
+                                                    fname, flen, buffer, blen, pclen, pfile,
+                                                    iodev, starting_arg_file, fmode);
+        if (code <= 0) /* +ve means continue searching */
+          return code;
+      }
     }
     return_error(e_undefinedfilename);
 }
@


1.4
log
@Security fix for SA40452
Ghostscript "-P-" Command Line Option Security Issue.

ok kili@@ (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4.4.1
log
@Security fix for SA40452
Ghostscript "-P-" Command Line Option Security Issue.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_zfile_c,v 1.4 2010/08/19 08:19:45 jasper Exp $
@


1.4.2.1
log
@Security fix for SA40452
Ghostscript "-P-" Command Line Option Security Issue.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_zfile_c,v 1.4 2010/08/19 08:19:45 jasper Exp $
@


1.3
log
@completely remove empty patches
@
text
@d1 216
@


1.2
log
@
Update to 8.54.

Some help by steven@@ and espie@@.

"commit" espie@@
@
text
@@


1.1
log
@Security Fix:
A problem with Ghostscript could make it possible to execute
arbitrary commands. The vulnerability exists when GhostScript
is used to process specially formatted PS files.
An attacker can exploit this vulnerability by creating a
malicious PS file which, when processed with GhostScript, will
result in the execution of arbitrary system commands.

Bump version to 7.05p1

ok naddy@@
@
text
@a0 103
$OpenBSD$
--- src/zfile.c.orig	Thu Apr 11 21:05:01 2002
+++ src/zfile.c	Tue Jun  3 03:52:31 2003
@@@@ -51,7 +51,7 @@@@ extern_gx_io_device_table();
 extern const char iodev_dtype_stdio[];
 
 /* Forward references: file name parsing. */
-private int parse_file_name(P2(const ref * op, gs_parsed_file_name_t * pfn));
+private int parse_file_name(P3(const ref * op, gs_parsed_file_name_t * pfn, bool safemode));
 private int parse_real_file_name(P4(const ref * op,
 				    gs_parsed_file_name_t * pfn,
 				    gs_memory_t *mem, client_name_t cname));
@@@@ -151,18 +151,6 @@@@ check_file_permissions(i_ctx_t *i_ctx_p,
     /* recognized as a file name separator as on DOS & Windows	  */
     const char *filenamesep = gp_file_name_concat_string("\\", 1);
 
-    /*
-     * Check here for the %pipe device which is illegal when
-     * LockFilePermissions is true. In the future we might want to allow
-     * the %pipe device to be included on the PermitFile... paths, but
-     * for now it is simply disallowed.
-     */
-    if (i_ctx_p->LockFilePermissions &&
-               string_match( (const unsigned char*) fname, len,
-			     (const unsigned char*) "%pipe*", 5, NULL)
-       ) {
-	return e_invalidfileaccess;
-    }
     if (dict_find_string(&(i_ctx_p->userparams), permitgroup, &permitlist) <= 0)
         return 0;	/* if Permissions not found, just allow access */
     for (i=0; i<r_size(permitlist); i++) {
@@@@ -208,7 +196,7 @@@@ zfile(i_ctx_t *i_ctx_p)
 
     if (code < 0)
 	return code;
-    code = parse_file_name(op - 1, &pname);
+    code = parse_file_name(op - 1, &pname, i_ctx_p->LockFilePermissions);
     if (code < 0)
 	return code;
 	/*
@@@@ -389,7 +377,7 @@@@ zrenamefile(i_ctx_t *i_ctx_p)
         if (pname1.iodev != pname2.iodev ||
 	      (check_file_permissions(i_ctx_p, pname1.fname, pname1.len,
 	      				"PermitFileControl") < 0 &&
-	          !file_is_tempfile(i_ctx_p, op - 1) < 0) ||
+	          !file_is_tempfile(i_ctx_p, op - 1)) ||
 	      check_file_permissions(i_ctx_p, pname2.fname, pname2.len,
 	      				"PermitFileControl") < 0 ||
 	      check_file_permissions(i_ctx_p, pname2.fname, pname2.len,
@@@@ -429,7 +417,7 @@@@ zstatus(i_ctx_t *i_ctx_p)
 	    {
 		gs_parsed_file_name_t pname;
 		struct stat fstat;
-		int code = parse_file_name(op, &pname);
+		int code = parse_file_name(op, &pname, i_ctx_p->LockFilePermissions);
 
 		if (code < 0)
 		    return code;
@@@@ -565,7 +553,7 @@@@ zlibfile(i_ctx_t *i_ctx_p)
     stream *s;
 
     check_ostack(2);
-    code = parse_file_name(op, &pname);
+    code = parse_file_name(op, &pname, i_ctx_p->LockFilePermissions);
     if (code < 0)
 	return code;
     if (pname.iodev == NULL)
@@@@ -617,7 +605,7 @@@@ zlibfile(i_ctx_t *i_ctx_p)
 	    }
 	}
 	if (code < 0) {
-	    if (code == e_VMerror)
+	    if (code == e_VMerror || code == e_invalidfileaccess)
 		return code;
 	    push(1);
 	    make_false(op);
@@@@ -720,11 +708,24 @@@@ const op_def zfile_op_defs[] =
 /* Parse a file name into device and individual name. */
 /* See gsfname.c for details. */
 private int
-parse_file_name(const ref * op, gs_parsed_file_name_t * pfn)
+parse_file_name(const ref * op, gs_parsed_file_name_t * pfn, bool safemode)
 {
+    int code;
+
     check_read_type(*op, t_string);
-    return gs_parse_file_name(pfn, (const char *)op->value.const_bytes,
+    code = gs_parse_file_name(pfn, (const char *)op->value.const_bytes,
 			      r_size(op));
+    if (code < 0)
+	return code;
+    /*
+     * Check here for the %pipe device which is illegal when
+     * LockFilePermissions is true. In the future we might want to allow
+     * the %pipe device to be included on the PermitFile... paths, but
+     * for now it is simply disallowed.
+     */
+    if (pfn->iodev && safemode && strcmp(pfn->iodev->dname, "%pipe%") == 0)
+	return e_invalidfileaccess;
+    return code;
 }
 
 /* Parse a real (non-device) file name and convert to a C string. */
@


1.1.2.1
log
@* MFC
Security Fix:
A problem with Ghostscript could make it possible to execute
arbitrary commands. The vulnerability exists when GhostScript
is used to process specially formatted PS files.
An attacker can exploit this vulnerability by creating a
malicious PS file which, when processed with GhostScript, will
result in the execution of arbitrary system commands.
@
text
@@

