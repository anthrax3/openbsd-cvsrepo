head	1.10;
access;
symbols
	OPENBSD_5_3:1.9.0.2
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_0:1.1.0.4
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2013.03.19.08.49.14;	author ajacoutot;	state dead;
branches;
next	1.9;

1.9
date	2012.10.01.12.47.55;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2012.09.30.09.28.04;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.04.14.37.04;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2012.02.16.22.12.08;	author ajacoutot;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.12.19.58.19;	author ajacoutot;	state dead;
branches;
next	1.4;

1.4
date	2009.05.18.17.09.54;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2009.05.14.12.38.52;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.01.10.43.38;	author mbalmer;	state dead;
branches;
next	1.1;

1.1
date	2005.10.09.10.29.47;	author mbalmer;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Update to cups-1.6.2.
@
text
@$OpenBSD: patch-scheduler_main_c,v 1.9 2012/10/01 12:47:55 ajacoutot Exp $

https://www.cups.org/str.php?L4197

--- scheduler/main.c.orig	Mon Apr 23 21:19:19 2012
+++ scheduler/main.c	Mon Oct  1 14:39:10 2012
@@@@ -65,11 +65,16 @@@@
 #if defined(HAVE_MALLOC_H) && defined(HAVE_MALLINFO)
 #  include <malloc.h>
 #endif /* HAVE_MALLOC_H && HAVE_MALLINFO */
+
 #ifdef HAVE_NOTIFY_H
 #  include <notify.h>
 #endif /* HAVE_NOTIFY_H */
 
+#ifdef HAVE_SYS_PARAM_H
+#  include <sys/param.h>
+#endif /* HAVE_SYS_PARAM_H */
 
+
 /*
  * Local functions...
  */
@@@@ -365,15 +370,15 @@@@ main(int  argc,				/* I - Number of command-line args 
       }
     }
 
-#ifdef __OpenBSD__
+#if defined(__OpenBSD__) && OpenBSD < 201211
    /*
     * Call _thread_sys_closefrom() so the child process doesn't reset the
     * parent's file descriptors to be blocking.  This is a workaround for a
-    * limitation of userland libpthread on OpenBSD.
+    * limitation of userland libpthread on older versions of OpenBSD.
     */
 
     _thread_sys_closefrom(0);
-#endif /* __OpenBSD__ */
+#endif /* __OpenBSD__ && OpenBSD < 201211 */
 
    /*
     * Since CoreFoundation and DBUS both create fork-unsafe data on execution of
@


1.9
log
@Better patch from upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-scheduler_main_c,v 1.8 2012/09/30 09:28:04 ajacoutot Exp $
@


1.8
log
@Upstream STR bug numbers.
@
text
@d1 1
a1 1
$OpenBSD: patch-scheduler_main_c,v 1.7 2012/08/04 14:37:04 ajacoutot Exp $
d6 19
a24 2
+++ scheduler/main.c	Thu Jul 26 10:00:31 2012
@@@@ -365,16 +365,6 @@@@ main(int  argc,				/* I - Number of command-line args 
d29 4
a32 3
-   /*
-    * Call _thread_sys_closefrom() so the child process doesn't reset the
-    * parent's file descriptors to be blocking.  This is a workaround for a
d34 4
a37 3
-    */
-
-    _thread_sys_closefrom(0);
d39 2
a40 1
-
a42 1
     * a program, and since this kind of really unfriendly behavior seems to be
@


1.7
log
@Major update to CUPS 1.6.1.
This package is now split between -main (the bloat) and -libs (i.e.
cups-libs; which only contains the base libraries which have no
external deps).
Most filters have moved to cups-filters, the split was needed because
cups depends on cups-filters which depends on cups

The nice side-effect is that this will simplify lots of things in tree.
@
text
@d1 1
a1 1
$OpenBSD: patch-scheduler_main_c,v 1.6 2012/02/16 22:12:08 ajacoutot Exp $
d3 1
a3 1
XXX push upstream
@


1.6
log
@Update to cups-1.5.2.
While here, create cups's printcap under /etc/cups/ because we are
running unpriviledged so we cannot touch /etc/printcap.
Tweak rc script accordingly.
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 2
main.c:376: warning: implicit declaration of function '_thread_sys_closefrom'
(XXX rework after rthreads are enabled)
d5 5
a9 5
--- scheduler/main.c.orig	Mon Feb  6 14:02:24 2012
+++ scheduler/main.c	Mon Feb  6 14:03:01 2012
@@@@ -69,6 +69,9 @@@@
 #  include <notify.h>
 #endif /* HAVE_NOTIFY_H */
d11 13
a23 6
+#ifdef __OpenBSD__
+int	_thread_sys_closefrom(int);
+#endif
 
 /*
  * Local functions...
@


1.5
log
@- update to cups-1.3.11
kurt@@'s patches are now upstream
@
text
@d1 10
a10 25
$OpenBSD: patch-scheduler_main_c,v 1.4 2009/05/18 17:09:54 ajacoutot Exp $
--- scheduler/main.c.orig	Wed Jan 28 23:12:18 2009
+++ scheduler/main.c	Mon May 18 18:57:12 2009
@@@@ -144,10 +144,9 @@@@ main(int  argc,				/* I - Number of command-line args 
   cups_file_t		*fp;		/* Fake lpsched lock file */
   struct stat		statbuf;	/* Needed for checking lpsched FIFO */
 #endif /* __sgi */
-#ifdef __APPLE__
   int			run_as_child = 0;
-					/* Needed for Mac OS X fork/exec */
-#else
+					/* Needed for background fork/exec */
+#ifndef __APPLE__
   time_t		netif_time = 0;	/* Time since last network update */
 #endif /* __APPLE__ */
 #if HAVE_LAUNCHD
@@@@ -187,11 +186,9 @@@@ main(int  argc,				/* I - Number of command-line args 
       for (opt = argv[i] + 1; *opt != '\0'; opt ++)
         switch (*opt)
 	{
-#ifdef __APPLE__
 	  case 'C' : /* Run as child with config file */
               run_as_child = 1;
 	      fg           = -1;
-#endif /* __APPLE__ */
a11 7
 	  case 'c' : /* Configuration file */
 	      i ++;
@@@@ -356,17 +353,27 @@@@ main(int  argc,				/* I - Number of command-line args 
       }
     }
 
-#ifdef __APPLE__
d13 2
a14 60
    /*
-    * Since CoreFoundation has an overly-agressive check for whether a
-    * process has forked but not exec'd (whether CF has been called or
-    * not...), we now have to exec ourselves with the "-f" option to
-    * eliminate their bogus warning messages.
+    * Call _thread_sys_closefrom() so the child process doesn't reset the
+    * parent's file descriptors to be blocking.  This is a workaround for a
+    * limitation of userland libpthread on OpenBSD.
     */
+   
+    _thread_sys_closefrom(0);
+#endif /* __OpenBSD__ */
 
+   /*
+    * Since CoreFoundation and DBUS both create fork-unsafe data on execution of
+    * a program, and since this kind of really unfriendly behavior seems to be
+    * more common these days in system libraries, we need to re-execute the
+    * background cupsd with the "-C" option to avoid problems.  Unfortunately,
+    * we also have to assume that argv[0] contains the name of the cupsd
+    * executable - there is no portable way to get the real pathname...
+    */
+
     execlp(argv[0], argv[0], "-C", ConfigurationFile, (char *)0);
     exit(errno);
-#endif /* __APPLE__ */
   }
 
   if (fg < 1)
@@@@ -400,6 +407,28 @@@@ main(int  argc,				/* I - Number of command-line args 
 
     for (i = 0; i < limit.rlim_cur && i < 1024; i ++)
       close(i);
+
+   /*
+    * Redirect stdin/out/err to /dev/null...
+    */
+
+    if ((i = open("/dev/null", O_RDONLY)) != 0)
+    {
+      dup2(i, 0);
+      close(i);
+    }
+
+    if ((i = open("/dev/null", O_WRONLY)) != 1)
+    {
+      dup2(i, 1);
+      close(i);
+    }
+
+    if ((i = open("/dev/null", O_WRONLY)) != 2)
+    {
+      dup2(i, 2);
+      close(i);
+    }
 #endif /* DEBUG */
   }
 
@@@@ -607,11 +636,7 @@@@ main(int  argc,				/* I - Number of command-line args 
   * we are up and running...
   */
d16 2
a17 8
-#ifdef __APPLE__
   if (!fg || run_as_child)
-#else
-  if (!fg)
-#endif /* __APPLE__ */
   {
    /*
     * Send a signal to the parent process, but only if the parent is
@


1.4
log
@- upstream integrated kurt@@'s patches with some small changes ; bring
them in as it will ease update to a new release
@
text
@d1 1
a1 1
$OpenBSD: patch-scheduler_main_c,v 1.3 2009/05/14 12:38:52 kurt Exp $
@


1.3
log
@Fix daemon mode by correcting non-portable code:
- close(0); open(...); is no guaranteed to open on file descriptor 0.
  Change to using dup2()
- Threaded applications that fork() may only call async-signal-safe
  functions in the child process until such time as one of the exec
  functions are called. Enable the APPLE code path that uses execlp()
  in child. Also close child fd's in such a way as to not trip on
  non-blocking fd design issues of libpthread.

okay ajacoutot@@
@
text
@d1 4
a4 4
$OpenBSD$
--- scheduler/main.c.orig	Wed Jan 28 17:12:18 2009
+++ scheduler/main.c	Sat May  9 09:22:27 2009
@@@@ -144,12 +144,13 @@@@ main(int  argc,				/* I - Number of command-line args 
a8 1
+#if defined (__APPLE__) || defined(__OpenBSD__)
d10 1
a10 1
 					/* Needed for Mac OS X fork/exec */
d12 1
a12 1
+#endif 
d15 1
a15 2
-#endif /* __APPLE__ */
+#endif /* !__APPLE__ */
d17 1
a17 3
   int			launchd_idle_exit;
 					/* Idle exit on select timeout? */
@@@@ -187,11 +188,11 @@@@ main(int  argc,				/* I - Number of command-line args 
a21 1
+#if defined(__APPLE__) || defined(__OpenBSD__)
a25 1
+#endif /* __APPLE__ || __OpenBSD__ */
d29 28
a56 1
@@@@ -367,6 +368,27 @@@@ main(int  argc,				/* I - Number of command-line args 
d59 8
a66 1
 #endif /* __APPLE__ */
a67 1
+#ifdef __OpenBSD__
d69 1
a69 3
+    * Directly call _thread_sys_closefrom() so the child process
+    * doesn't reset the parent's file descriptors to be blocking.
+    * This is a work-around to a limitation of userland libpthread.
a70 2
+   
+    _thread_sys_closefrom(0);
d72 11
a82 7
+   /*
+    * Actually an exec*(3) call is needed for all portable threaded
+    * applications. According to POSIX threaded applications that
+    * fork: "the child process may only execute async-signal-safe
+    * operations until such time as one of the exec functions is
+    * called."
+    */
d84 6
a89 3
+    execlp(argv[0], argv[0], "-C", ConfigurationFile, (char *)0);
+    exit(errno);
+#endif
d92 1
a92 2
   if (fg < 1)
@@@@ -607,11 +629,11 @@@@ main(int  argc,				/* I - Number of command-line args 
a96 1
+#if defined(__APPLE__) || defined(__OpenBSD__)
d98 2
a99 2
 #else
   if (!fg)
a100 1
+#endif /* __APPLE__ || __OpenBSD__ */
@


1.2
log
@Update to CUPS 1.2.4, which has lots of improvements over the old version
we had, like better support for foreign languages and the usual plethora
of bugfixes.

tested on various architectures and with various applications that use CUPS
as their printing system.  I verified that all ports that are depending on
CUPS still build.
@
text
@d1 63
a63 12
$OpenBSD: patch-scheduler_main_c,v 1.1 2005/10/09 10:29:47 mbalmer Exp $
--- scheduler/main.c.orig	Mon Jan  3 20:29:59 2005
+++ scheduler/main.c	Sun Oct  9 12:12:56 2005
@@@@ -91,6 +91,7 @@@@ main(int  argc,				/* I - Number of comm
      char *argv[])			/* I - Command-line arguments */
 {
   int			i;		/* Looping var */
+  pid_t			pidi;
   char			*opt;		/* Option character */
   int			fg;		/* Run in the foreground */
   int			fds;		/* Number of ready descriptors select returns */
@@@@ -408,8 +409,13 @@@@ main(int  argc,				/* I - Number of comm
d67 10
a76 12
-  if (!fg)
-    kill(getppid(), SIGUSR1);
+  if (!fg) {
+       pidi = getppid();
+       if (pidi != 1)
+           kill(pidi, SIGUSR1);
+       else
+           syslog(LOG_NOTICE, "parent process is INIT!\n");
+  }
 
  /*
   * If the administrator has configured the server to run as an unpriviledged
@


1.1
log
@Add a patch from Antti Harri (iku at openbsd dot fi) to prevent cups
from inadvertently shut down OpenBSD and bump the package name.
@
text
@d1 1
a1 1
$OpenBSD$
@

