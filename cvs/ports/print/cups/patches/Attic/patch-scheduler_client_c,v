head	1.3;
access;
symbols
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_4:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2017.03.29.20.50.51;	author ajacoutot;	state dead;
branches;
next	1.2;
commitid	Zoc6pYQKhG1puEdk;

1.2
date	2017.03.10.03.23.29;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	xG6HT7Bs15k2womR;

1.1
date	2014.04.11.07.00.27;	author ajacoutot;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2014.04.11.07.00.27;	author ajacoutot;	state Exp;
branches;
next	;

1.1.4.1
date	2014.04.11.07.01.22;	author ajacoutot;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2014.07.15.09.50.01;	author ajacoutot;	state Exp;
branches;
next	1.1.4.3;
commitid	wPpmLNEnLNijlxET;

1.1.4.3
date	2014.07.31.13.40.26;	author ajacoutot;	state Exp;
branches;
next	;
commitid	8U1l2BC3YLd2hMg7;


desc
@@


1.3
log
@Update to cups-2.2.3.
naddy agrees about the commit; it'll hopefully lower the amount of emails
I get about "my printer does not work" during a release cycle.
@
text
@$OpenBSD: patch-scheduler_client_c,v 1.2 2017/03/10 03:23:29 ajacoutot Exp $

From 42dc144c4499672114c392423d24c397ea929ad3 Mon Sep 17 00:00:00 2001
From: Michael Sweet <michael.r.sweet@@gmail.com>
Date: Thu, 9 Mar 2017 15:24:58 -0500
Subject: [PATCH] Allow "Negotiate" as an AuthType/DefaultAuthType

--- scheduler/client.c.orig	Tue Jan 17 20:27:22 2017
+++ scheduler/client.c	Fri Mar 10 04:08:49 2017
@@@@ -2349,17 +2349,15 @@@@ cupsdSendHeader(
 
     if (auth_type == CUPSD_AUTH_BASIC)
       strlcpy(auth_str, "Basic realm=\"CUPS\"", sizeof(auth_str));
-#ifdef HAVE_GSSAPI
     else if (auth_type == CUPSD_AUTH_NEGOTIATE)
     {
-#  ifdef AF_LOCAL
+#ifdef AF_LOCAL
       if (httpAddrFamily(httpGetAddress(con->http)) == AF_LOCAL)
         strlcpy(auth_str, "Basic realm=\"CUPS\"", sizeof(auth_str));
       else
-#  endif /* AF_LOCAL */
+#endif /* AF_LOCAL */
       strlcpy(auth_str, "Negotiate", sizeof(auth_str));
     }
-#endif /* HAVE_GSSAPI */
 
     if (con->best && auth_type != CUPSD_AUTH_NEGOTIATE &&
         !_cups_strcasecmp(httpGetHostname(con->http, NULL, 0), "localhost"))
@


1.2
log
@Allow "Negotiate" as an AuthType/DefaultAuthType instead of locally
patching cupsd.conf (from upstream).
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@file patch-scheduler_client_c was initially added on branch OPENBSD_5_4.
@
text
@d1 29
@


1.1.4.1
log
@SECURITY: The scheduler now blocks URLs containing embedded HTML
http://www.cups.org/str.php?L4356
@
text
@a0 22
$OpenBSD$

Security: The scheduler now blocks URLs containing embedded HTML
http://www.cups.org/str.php?L4356

--- scheduler/client.c.orig	Fri Sep 27 16:09:25 2013
+++ scheduler/client.c	Fri Apr 11 08:59:01 2014
@@@@ -3708,6 +3708,14 @@@@ is_path_absolute(const char *path)	/* I - Input path *
     return (0);
 
  /*
+  * Check for "<" or quotes in the path and reject since this is probably
+  * someone trying to inject HTML...
+  */
+
+  if (strchr(path, '<') != NULL || strchr(path, '\"') != NULL || strchr(path, '\'') != NULL)
+    return (0);
+
+ /*
   * Check for "/.." in the path...
   */
 
@


1.1.4.2
log
@Security: The web interface incorrectly served symlinked files and files
that were not world-readable, potentially leading to a disclosure of
information (STR #4450)
@
text
@d1 1
a1 5
$OpenBSD: patch-scheduler_client_c,v 1.1.4.1 2014/04/11 07:01:22 ajacoutot Exp $

Security: The web interface incorrectly served symlinked files and files
that were not world-readable, potentially leading to a disclosure of
information (STR #4450)
d6 4
a9 19
--- scheduler/client.c.orig	Tue Jul 15 11:47:51 2014
+++ scheduler/client.c	Tue Jul 15 11:47:57 2014
@@@@ -3340,7 +3340,7 @@@@ get_file(cupsd_client_t *con,		/* I  - Client connecti
     if ((ptr = strchr(filename, '?')) != NULL)
       *ptr = '\0';
 
-    if ((status = stat(filename, filestats)) != 0)
+    if ((status = lstat(filename, filestats)) != 0)
     {
      /*
       * Drop the language prefix and try the root directory...
@@@@ -3352,14 +3352,35 @@@@ get_file(cupsd_client_t *con,		/* I  - Client connecti
       if ((ptr = strchr(filename, '?')) != NULL)
 	*ptr = '\0';
 
-      status = stat(filename, filestats);
+      status = lstat(filename, filestats);
     }
   }
d12 2
a13 13
-  * If we're found a directory, get the index.html file instead...
+  * If we've found a symlink, 404 the sucker to avoid disclosing information.
   */
 
+  if (!status && S_ISLNK(filestats->st_mode))
+  {
+    cupsdLogMessage(CUPSD_LOG_INFO, "[Client %d] Symlinks such as \"%s\" are not allowed.", con->http.fd, filename);
+    return (NULL);
+  }
+
+ /*
+  * Similarly, if the file/directory does not have world read permissions, do
+  * not allow access...
d16 2
a17 5
+  if (!status && !(filestats->st_mode & S_IROTH))
+  {
+    cupsdLogMessage(CUPSD_LOG_INFO, "[Client %d] Files/directories such as \"%s\" must be world-readable.", con->http.fd, filename);
+    return (NULL);
+  }
d20 1
a20 7
+  * If we've found a directory, get the index.html file instead...
+  */
+
   if (!status && S_ISDIR(filestats->st_mode))
   {
    /*
@@@@ -3705,6 +3726,14 @@@@ is_path_absolute(const char *path)	/* I - Input path *
a22 12
   if (path[0] != '/')
+    return (0);
+
+ /*
+  * Check for "<" or quotes in the path and reject since this is probably
+  * someone trying to inject HTML...
+  */
+
+  if (strchr(path, '<') != NULL || strchr(path, '\"') != NULL || strchr(path, '\'') != NULL)
     return (0);
 
  /*
@


1.1.4.3
log
@Security: Addressed some more situations where symlinked files would be
served by the web interface (STR #4455).
(Incomplete fix for CVE-2014-3537 (CVE-2014-5029/5030/5031))
@
text
@d1 1
a1 1
$OpenBSD: patch-scheduler_client_c,v 1.1.4.2 2014/07/15 09:50:01 ajacoutot Exp $
d10 2
a11 15
Security: Addressed some more situations where symlinked files would be
served by the web interface (STR #4455).
(Incomplete fix for CVE-2014-3537 (CVE-2014-5029/5030/5031))

--- scheduler/client.c.orig	Thu Jul 31 15:19:12 2014
+++ scheduler/client.c	Thu Jul 31 15:19:21 2014
@@@@ -3323,7 +3323,7 @@@@ get_file(cupsd_client_t *con,		/* I  - Client connecti
   * then fallback to the default one...
   */
 
-  if ((status = stat(filename, filestats)) != 0 && language[0] &&
+  if ((status = lstat(filename, filestats)) != 0 && language[0] &&
       strncmp(con->uri, "/icons/", 7) &&
       strncmp(con->uri, "/ppd/", 5) &&
       strncmp(con->uri, "/rss/", 5) &&
d59 1
a59 77
@@@@ -3400,13 +3421,13 @@@@ get_file(cupsd_client_t *con,		/* I  - Client connecti
       plen = len - (ptr - filename);
 
       strlcpy(ptr, "index.html", plen);
-      status = stat(filename, filestats);
+      status = lstat(filename, filestats);
 
 #ifdef HAVE_JAVA
       if (status)
       {
 	strlcpy(ptr, "index.class", plen);
-	status = stat(filename, filestats);
+	status = lstat(filename, filestats);
       }
 #endif /* HAVE_JAVA */
 
@@@@ -3414,7 +3435,7 @@@@ get_file(cupsd_client_t *con,		/* I  - Client connecti
       if (status)
       {
 	strlcpy(ptr, "index.pl", plen);
-	status = stat(filename, filestats);
+	status = lstat(filename, filestats);
       }
 #endif /* HAVE_PERL */
 
@@@@ -3422,7 +3443,7 @@@@ get_file(cupsd_client_t *con,		/* I  - Client connecti
       if (status)
       {
 	strlcpy(ptr, "index.php", plen);
-	status = stat(filename, filestats);
+	status = lstat(filename, filestats);
       }
 #endif /* HAVE_PHP */
 
@@@@ -3430,18 +3451,39 @@@@ get_file(cupsd_client_t *con,		/* I  - Client connecti
       if (status)
       {
 	strlcpy(ptr, "index.pyc", plen);
-	status = stat(filename, filestats);
+	status = lstat(filename, filestats);
       }
 
       if (status)
       {
 	strlcpy(ptr, "index.py", plen);
-	status = stat(filename, filestats);
+	status = lstat(filename, filestats);
       }
 #endif /* HAVE_PYTHON */
 
     }
     while (status && language[0]);
+
+   /*
+    * If we've found a symlink, 404 the sucker to avoid disclosing information.
+    */
+
+    if (!status && S_ISLNK(filestats->st_mode))
+    {
+      cupsdLogMessage(CUPSD_LOG_INFO, "[Client %d] Symlinks such as \"%s\" are not allowed.", con->http.fd, filename);
+      return (NULL);
+    }
+
+   /*
+    * Similarly, if the file/directory does not have world read permissions, do
+    * not allow access...
+    */
+
+    if (!status && !(filestats->st_mode & S_IROTH))
+    {
+      cupsdLogMessage(CUPSD_LOG_INFO, "[Client %d] Files/directories such as \"%s\" must be world-readable.", con->http.fd, filename);
+      return (NULL);
+    }
   }
 
   cupsdLogMessage(CUPSD_LOG_DEBUG2,
@@@@ -3705,6 +3747,14 @@@@ is_path_absolute(const char *path)	/* I - Input path *
@


1.1.2.1
log
@SECURITY: The scheduler now blocks URLs containing embedded HTML
http://www.cups.org/str.php?L4356
@
text
@a0 22
$OpenBSD$

Security: The scheduler now blocks URLs containing embedded HTML
http://www.cups.org/str.php?L4356

--- scheduler/client.c.orig	Fri Jun  7 03:12:52 2013
+++ scheduler/client.c	Fri Apr 11 08:52:54 2014
@@@@ -3560,6 +3560,14 @@@@ is_path_absolute(const char *path)	/* I - Input path *
     return (0);
 
  /*
+  * Check for "<" or quotes in the path and reject since this is probably
+  * someone trying to inject HTML...
+  */
+
+  if (strchr(path, '<') != NULL || strchr(path, '\"') != NULL || strchr(path, '\'') != NULL)
+    return (0);
+
+ /*
   * Check for "/.." in the path...
   */
 
@

