head	1.17;
access;
symbols
	OPENBSD_6_1:1.16.0.8
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.6
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.16.0.2
	OPENBSD_5_9_BASE:1.16
	OPENBSD_5_8:1.16.0.4
	OPENBSD_5_8_BASE:1.16
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.12.0.2
	OPENBSD_5_6_BASE:1.12
	OPENBSD_5_5:1.9.0.2
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4;
locks; strict;
comment	@# @;


1.17
date	2017.08.01.12.18.35;	author ajacoutot;	state Exp;
branches;
next	1.16;
commitid	4uWkjhMU81azlf58;

1.16
date	2015.07.07.14.33.34;	author ajacoutot;	state Exp;
branches;
next	1.15;
commitid	ICGMqQ1oNDB5Gm5S;

1.15
date	2015.04.04.08.24.37;	author ajacoutot;	state Exp;
branches;
next	1.14;
commitid	xFShkAEyyIylrSWC;

1.14
date	2014.10.08.12.06.21;	author ajacoutot;	state Exp;
branches;
next	1.13;
commitid	JvoLhtQaWm2FieXg;

1.13
date	2014.08.28.17.51.43;	author ajacoutot;	state Exp;
branches;
next	1.12;
commitid	IHyZ8Sftv3MI7UMb;

1.12
date	2014.07.12.13.41.47;	author ajacoutot;	state Exp;
branches;
next	1.11;
commitid	CC2Szyf2ZEuFbbEs;

1.11
date	2014.07.10.13.09.06;	author ajacoutot;	state Exp;
branches;
next	1.10;
commitid	Xpirey71VpT09196;

1.10
date	2014.04.28.13.37.32;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2013.12.12.15.22.17;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2013.12.12.14.48.31;	author ajacoutot;	state Exp;
branches;
next	1.7;

1.7
date	2013.10.27.08.50.17;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2013.08.21.13.36.10;	author ajacoutot;	state Exp;
branches;
next	1.5;

1.5
date	2013.05.17.13.47.45;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2013.01.06.08.42.08;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2013.01.05.16.36.08;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.19.07.18.28;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2012.08.04.14.37.04;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Stop playing games moving around base lp commands and man pages. Things
*should* be able to just work without that dance. If you want to use cups
lp commands just give the full path (/usr/local/{bin,sbin}/lpfoo).

This unbreaks displaying lp man pages that were still in the mandoc db but
not in the fs anymore as reported by espie@@
@
text
@$OpenBSD: README-main,v 1.16 2015/07/07 14:33:34 ajacoutot Exp $

+-----------------------------------------------------------------------
| Running ${FULLPKGNAME} on OpenBSD
+-----------------------------------------------------------------------

Adding and/or configuring CUPS printers can be done with lpadmin(8), but
for a quick and easy (graphical) setup, after starting the CUPS daemon,
point your browser to:
    https://localhost:631

Alternatively, adding and/or configuring CUPS printers can be done with
lpadmin(8) (the foomatic tools may be needed as well, to create the
corresponding PPD file see below).

Printer drivers are available as separate packages. The Foomatic
framework provides most of them (see the foomatic-db-engine package
documentation for more information and creating PPD files;
${LOCALBASE}/share/doc/pkg-readmes/foomatic-db-engine-*).

Printer backends are also available as packages.
e.g. cups-bjnp, hpcups/hplip, ptouch-driver, splix...

To be able to use CUPS printers from GTK+ applications, the gtk+2-cups and/or
gtk+3-cups packages need to be installed.

USB
===
Since USB printing will be handled by libusb, you need to allow the
_cups user access to the corresponding USB endpoint. To do so, find
where your printer is attached to using:
    # usbdevs -vd
then change the ownerships accordingly.

e.g.
Controller /dev/usb3:
addr 1: full speed, self powered, config 1, UHCI root hub(0x0000), Intel(0x8086), rev 1.00
  uhub3
 port 1 powered
 port 2 addr 2: full speed, self powered, config 1, USB MFP(0x082f), EPSON(0x04b8), rev 1.00, iSerialNumber L83010704250947490
   ugen0

# chown _cups /dev/ugen0.* /dev/usb3

The reason we are changing the user and not the group is that it will
allow for multi-function devices to work for both printing and scanning
(e.g. by being owned by _cups:_saned).

To preserve your changes after a system update, use rc.local(8).
e.g. for a multi-function printer/scanner add the following lines:
chown _cups:_saned /dev/ugen0.* /dev/usb1

Alternatively, hotplugd(8) attach/detach scripts can automate this.

*** WARNING ***
ulpt(4) needs to be disabled in the kernel (see config(8)) or the printer
will not be available to libusb.

PARALLEL
========
To print to a parallel port attached printer, the CUPS daemon needs access to
the corresponding devices, e.g:
    chown _cups /dev/lp[a,t]0

This can be automated at boot time using rc.local(8).

Printer Sharing using mDNS
==========================
Browsing for shared printers can be done with multicast DNS (mDNS) using
the avahi daemon.

On the client side, "avahi-daemon" (from the avahi package) and
"cups-browsed" (from the cups-filters package) must be running by
adding "avahi_daemon" and "cups_browsed" to pkg_scripts in rc.conf.local(8).

One the server side, "avahi-daemon" must be running by adding
"avahi_daemon" to pkg_scripts in rc.conf.local(8). Then
printer sharing can be activated using the CUPS web interface or running
the following commands as root or a member of the wheel group:
    cupsctl --share-printers
    lpadmin -p <printer_name> -o printer-is-shared=true

Printer Sharing across subnets using DNS-SD
===========================================
In general multicast DNS can only advertise shared printers on the local
subnet. This can be problematic if some clients are on a different
segment (e.g. wireless tablet devices).

Also some users may prefer to avoid the multicast traffic generated by
mDNS or prefer not to rely on avahi.

In such cases 'wide area' DNS service discovery (DNS-SD) can provide an
elegant solution. The administrator simply adds specially-formatted
static records to the DNS server used by the clients, that advertise the
address and capabilities of the print server. See http://www.dns-sd.org
for details.

DNS service discovery involves only the DNS records - there is no need
for the print server to run Avahi or for mDNS to be implemented. DNS-SD
and mDNS may however be used simultaneously if desired.

Sample extract from a DNS zone file:

	; zone file for the 'wlan' sub-domain of 'example.com.'
	;
	$ORIGIN wlan.example.com.
	$TTL 1h

	@@       IN SOA  nameserver.example.com. admin.example.com. (
			1304061         ; zone file serial number
			3h              ; slave refresh 3 hours
			1h              ; slave retry 1 hour
			7d              ; slave expire 1 week
			1h              ; max caching time in case of failed lookups 1 hour
		)

	@@       IN NS   nameserver.example.com.


	;=========================
	; DNS-SD resource records
	;=========================

	; DNS-SD domain enumeration
	; these records invite clients to browse this domain
	;
	b._dns-sd._udp  IN PTR @@        ; b = browse domain (b._dns-sd._udp.wlan.example.com)
	lb._dns-sd._udp IN PTR @@        ; lb = legacy browse domain (lb._dns-sd._udp.wlan.example.com)

	; DNS-SD named service entities
	; these records list the services we want clients to be able to discover
	;
	_cups._sub._ipp._tcp            IN PTR  Samsung\032Laser._printer._tcp
	_universal._sub._ipp._tcp       IN PTR  Samsung\032Laser._printer._tcp

	; DNS-SD srv and txt records
	; these describe each service entity listed above
	;
	Samsung\032Laser._printer._tcp  IN SRV 0 0 631 printserver.example.com.
					IN TXT (        "txtvers=1"
							"qtotal=1"
							"Transparent=T"
							"URF=DM3"
							"rp=printers/CLP-500"
							"note=Samsung colour laser"
							"product=(GPL Ghostscript)"
							"printer-state=3"
							"printer-type=0x82305c"
							"pdl=application/octet-stream,application/pdf,application/postscript,image/gif,image/jpeg,image/png,image/tiff,image/urf,text/html,text/plain,application/vnd.adobe-reader-postscript,application/vnd.cups-command,application/vnd.cups-pdf" )

	[... regular resource records ...]

Note: the fields and values encoded in the TXT record replicate those
that would appear in the mDNS announcement for the CUPS shared printer
- these can be determined for example with Tim Fontaine's
'airprint-generate' script. Using "URF=DM3" appears to provide the best
support for Apple iOS clients such as the iPad.
@


1.16
log
@Change some obvious sudo usage to '#' in READMEs.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.15 2015/04/04 08:24:37 ajacoutot Exp $
d58 8
@


1.15
log
@gtk+2-cups is coming back.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.14 2014/10/08 12:06:21 ajacoutot Exp $
d31 3
a33 2
where your printer is attached to using `sudo usbdevs -vd` then change
the ownerships accordingly.
d43 1
a43 1
$ sudo chown _cups /dev/ugen0.* /dev/usb3
@


1.14
log
@Trailing whitespace.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.13 2014/08/28 17:51:43 ajacoutot Exp $
d24 2
a25 2
To be able to use CUPS printers from GTK+3 applications, the gtk+3-cups
package needs to be installed.
@


1.13
log
@README tweaks.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.12 2014/07/12 13:41:47 ajacoutot Exp $
d76 2
a77 2
In general multicast DNS can only advertise shared printers on the local 
subnet. This can be problematic if some clients are on a different 
d80 1
a80 1
Also some users may prefer to avoid the multicast traffic generated by 
d83 4
a86 4
In such cases 'wide area' DNS service discovery (DNS-SD) can provide an 
elegant solution. The administrator simply adds specially-formatted 
static records to the DNS server used by the clients, that advertise the 
address and capabilities of the print server. See http://www.dns-sd.org 
d89 2
a90 2
DNS service discovery involves only the DNS records - there is no need 
for the print server to run Avahi or for mDNS to be implemented. DNS-SD 
d94 1
a94 1
	
d144 3
a146 3
Note: the fields and values encoded in the TXT record replicate those 
that would appear in the mDNS announcement for the CUPS shared printer 
- these can be determined for example with Tim Fontaine's 
@


1.12
log
@pkg_scripts is not a variable anymore.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.11 2014/07/10 13:09:06 ajacoutot Exp $
d16 3
a18 3
Available printer drivers are available as separate packages. The
Foomatic framework provides most of them (see the foomatic-db-engine
package documentation for more information and creating PPD files;
d20 3
@


1.11
log
@rc.conf.local is in man(1) section 8, at least for now.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.10 2014/04/28 13:37:32 ajacoutot Exp $
d62 1
a62 2
adding "avahi_daemon" and "cups_browsed" to the pkg_scripts variable in
rc.conf.local(8).
d65 1
a65 1
"avahi_daemon" to the pkg_scripts variable in rc.conf.local(8). Then
@


1.10
log
@Fix a nasty bug in rc_pre() that would start 2 intances of the cupsd daemon.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.9 2013/12/12 15:22:17 ajacoutot Exp $
d63 1
a63 1
rc.conf.local(5).
d66 1
a66 1
"avahi_daemon" to the pkg_scripts variable in rc.conf.local(5). Then
@


1.9
log
@Clarify a bit.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.8 2013/12/12 14:48:31 ajacoutot Exp $
d10 1
a10 1
    http://localhost:631
@


1.8
log
@Drop @@exec-update and instead remove the cache from the rc.d script.
No need to change ulpt(4) ownership, CUPS only supports libusb.
Small README tweak while here.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.7 2013/10/27 08:50:17 ajacoutot Exp $
d12 8
a19 9
By default, CUPS only supports a handful amount of printers. There is a
good chance your printer is supported by the Foomatic framework in which
case the documentation from the foomatic-db-engine package will tell you
how to add more drivers to the system
(cf. ${LOCALBASE}/share/doc/pkg-readmes/foomatic-db-engine-*).
Note that when using the CUPS cli tools or web interface, it is not
necessary to use foomatic-ppdfile(1) directly, CUPS will automatically
generate the required PPD file if the corresponding Foomatic DB is
installed.
@


1.7
log
@Update to cups-1.7.0.
Please report any regression directly to me, thanks.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.6 2013/08/21 13:36:10 ajacoutot Exp $
d61 2
a62 1
On the client side, "avahi-daemon" and "cups-browsed" must be running by
@


1.6
log
@Point users to the pkg-readmes directory.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.5 2013/05/17 13:47:45 ajacoutot Exp $
d146 1
a146 1
support for Apple iOS6 clients such as the iPad.
@


1.5
log
@Add documentation about DNS-SD print sharing.
Fix a typo in README.
Better MASTER_SITES.

all this excellent work done by Martin Crossley
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.4 2013/01/06 08:42:08 ajacoutot Exp $
d14 3
a16 2
case the pkg-readmes documentation from the "foomatic-db-engine" package
will tell you how to add more drivers to the system.
@


1.4
log
@tyop
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.3 2013/01/05 16:36:08 ajacoutot Exp $
a23 16
PRINTER SHARING USING mDNS
==========================
Browsing for shared printers can be done with multicast DNS (mDNS) using
the avahi daemon.

On the client side, "avahi-daemon" and "cups-browsed" must be running by
adding "avahi_daemon" and "cups_browsed" to the pkg_scripts variable in
rc.conf.local(5).

One the server side, "avahi-daemon" must be running by adding
"avahi_daemon" to the pkg_scripts variable in rc.conf.local(5). Then
printer sharing can be activated using the CUPS web interface or running
the following commands as root or a member of the wheel group:
    cupsctl --share-printers
    lpadmin -p <printer_name> -o printer-is-shared=true

d52 1
a52 1
ulpt(4) needs to be disable in the kernel (see config(8)) or the printer
d54 92
@


1.3
log
@Document printer sharing.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.2 2012/10/19 07:18:28 ajacoutot Exp $
d38 1
a38 1
    lpadmin -o <printer_name> printer-is-shared=true
@


1.2
log
@@@exec-update takes care of the cache.
@
text
@d1 1
a1 1
$OpenBSD: README-main,v 1.1 2012/08/04 14:37:04 ajacoutot Exp $
d23 16
@


1.1
log
@Major update to CUPS 1.6.1.
This package is now split between -main (the bloat) and -libs (i.e.
cups-libs; which only contains the base libraries which have no
external deps).
Most filters have moved to cups-filters, the split was needed because
cups depends on cups-filters which depends on cups

The nice side-effect is that this will simplify lots of things in tree.
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.16 2012/06/20 14:54:40 ajacoutot Exp $
a53 7

UPGRADING
=========
If you experience cups-driverd(8) crashes or printing issues after
upgrading, remove the old CUPS cache and restart cups(8):
    # rm /var/cache/cups/* 2>/dev/null
    # ${RCDIR}/cupsd restart
@

