head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.62
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.60
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.58
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.54
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.56
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.52
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.50
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.48
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.46
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.44
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.42
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.40
	OPENBSD_5_0:1.1.0.38
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.36
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.34
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.32
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.30
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.28
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.26
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.24
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.22
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.20
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.18
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.16
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.14
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.12
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.10
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.8
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.6
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2002.04.26.01.44.09;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@brute-force fixing of ghostview for sparc64: add prototypes everywhere,
and don't pass abuse-cast int to XtPointer.

pval@@ says it works.
@
text
@$OpenBSD$
--- misc.c.orig	Sat Jul 24 04:29:12 1993
+++ misc.c	Sun Apr 21 01:20:42 2002
@@@@ -24,6 +24,7 @@@@
  */
 
 #include <stdio.h>
+#include <stdlib.h>
 #ifndef SEEK_SET
 #define SEEK_SET 0
 #endif
@@@@ -61,7 +62,6 @@@@ extern int errno;
 #include <perror.h>
 #else
 extern int sys_nerr;
-extern char *sys_errlist[];
 #endif
 
 #include "Ghostview.h"
@@@@ -1212,13 +1212,16 @@@@ build_pagemedia_menu()
 
     if (doc && doc->nummedia) {
 	for (i = 0; i < doc->nummedia; i++) {
+	    int *box;
 								num_args = 0;
 	    XtSetArg(args[num_args], XtNleftMargin, 20);	num_args++;
 	    pagemediaentry[i] = XtCreateManagedWidget(doc->media[i].name,
 				smeBSBObjectClass, pagemediamenu,
 				args, num_args);
+	    box = XtNew(int);
+	    *box = i;
 	    XtAddCallback(pagemediaentry[i], XtNcallback,
-			  set_pagemedia, (XtPointer)i);
+			  set_pagemedia, (XtPointer)box);
 	}
 
 							num_args = 0;
@@@@ -1227,6 +1230,8 @@@@ build_pagemedia_menu()
     }
 
     for (i = 0; papersizes[i].name; i++) {
+    	int *box;
+
 	pagemediaentry[i+base_papersize] = NULL;
 	if (i > 0) {
 	    /* Skip over same paper size with small imageable area */
@@@@ -1241,8 +1246,10 @@@@ build_pagemedia_menu()
 					    papersizes[i].name,
 					    smeBSBObjectClass, pagemediamenu,
 					    args, num_args);
+	box = XtNew(int);
+	*box = i+base_papersize;
 	XtAddCallback(pagemediaentry[i+base_papersize], XtNcallback,
-		      set_pagemedia, (XtPointer)(i+base_papersize));
+		      set_pagemedia, (XtPointer)box);
     }
 }
 
@
