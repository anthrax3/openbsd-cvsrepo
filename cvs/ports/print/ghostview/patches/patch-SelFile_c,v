head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.60
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.58
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.54
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.56
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.52
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.50
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.48
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.46
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.44
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.42
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.40
	OPENBSD_5_0:1.1.0.38
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.36
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.34
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.32
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.30
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.28
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.26
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.24
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.22
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.20
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.18
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.16
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.14
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.12
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.10
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.8
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.6
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2002.04.26.01.44.08;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@brute-force fixing of ghostview for sparc64: add prototypes everywhere,
and don't pass abuse-cast int to XtPointer.

pval@@ says it works.
@
text
@$OpenBSD$
--- SelFile.c.orig	Sat Jul 24 04:29:12 1993
+++ SelFile.c	Fri Apr 26 02:40:34 2002
@@@@ -46,7 +46,6 @@@@
 /* BSD 4.3 errno.h does not declare errno */
 extern int errno;
 extern int sys_nerr;
-extern char *sys_errlist[];
 
 #include <sys/param.h>
 #include <X11/cursorfont.h>
@@@@ -61,6 +60,7 @@@@ extern char *sys_errlist[];
 #include <X11/Xaw/Cardinals.h>
 
 #include "SFinternal.h"
+#include "gv.h"
 
 #ifndef MAXPATHLEN
 #define MAXPATHLEN 1024
@@@@ -127,6 +127,11 @@@@ char SFtextBuffer[MAXPATHLEN];
 
 XtIntervalId SFdirModTimerId;
 
+void SFpositionWidget(Widget);
+FILE *SFopenFile(char *, char *, char *, char *);
+FILE *XsraSelFile(Widget, char *, char *, char *, char *, char *, char *,
+    int (*)(), char **);
+
 int (*SFfunc)();
 
 static char *oneLineTextEditTranslations = "\
@@@@ -146,7 +151,7 @@@@ SFexposeList(w, n, event, cont)
 		return;
 	}
 
-	SFdrawList(n, SF_DO_NOT_SCROLL);
+	SFdrawList(*((int *)n), SF_DO_NOT_SCROLL);
 }
 
 /* ARGSUSED */
@@@@ -407,7 +412,10 @@@@ SFcreateWidgets(toplevel, prompt, ok, ca
 		compositeWidgetClass, selFileForm, arglist, i);
 
 	for (n = 0; n < 3; n++) {
+		int *box;
 
+		box = XtNew(int);
+		*box = n;
 		i = 0;
 		XtSetArg(arglist[i], XtNx, vScrollX);			i++;
 		XtSetArg(arglist[i], XtNy, vScrollY);			i++;
@@@@ -418,9 +426,9 @@@@ SFcreateWidgets(toplevel, prompt, ok, ca
 			scrollbarWidgetClass, selFileLists[n], arglist, i);
 
 		XtAddCallback(selFileVScrolls[n], XtNjumpProc,
-			SFvFloatSliderMovedCallback, (XtPointer) n);
+			SFvFloatSliderMovedCallback, (XtPointer) box);
 		XtAddCallback(selFileVScrolls[n], XtNscrollProc,
-			SFvAreaSelectedCallback, (XtPointer) n);
+			SFvAreaSelectedCallback, (XtPointer) box);
 
 		i = 0;
 
@@@@ -435,9 +443,9 @@@@ SFcreateWidgets(toplevel, prompt, ok, ca
 			scrollbarWidgetClass, selFileLists[n], arglist, i);
 
 		XtAddCallback(selFileHScrolls[n], XtNjumpProc,
-			SFhSliderMovedCallback, (XtPointer) n);
+			SFhSliderMovedCallback, (XtPointer) box);
 		XtAddCallback(selFileHScrolls[n], XtNscrollProc,
-			SFhAreaSelectedCallback, (XtPointer) n);
+			SFhAreaSelectedCallback, (XtPointer) box);
 	}
 
 	i = 0;
@@@@ -495,18 +503,22 @@@@ SFcreateWidgets(toplevel, prompt, ok, ca
 	XDefineCursor(SFdisplay, XtWindow(selFileCancel), dotCursor);
 
 	for (n = 0; n < 3; n++) {
+		int *box;
+		
+		box = XtNew(int);
+		*box = n;
 		XtAddEventHandler(selFileLists[n], ExposureMask, True,
-			SFexposeList, (XtPointer) n);
+			SFexposeList, (XtPointer) box);
 		XtAddEventHandler(selFileLists[n], EnterWindowMask, False,
-			SFenterList, (XtPointer) n);
+			SFenterList, (XtPointer) box);
 		XtAddEventHandler(selFileLists[n], LeaveWindowMask, False,
-			SFleaveList, (XtPointer) n);
+			SFleaveList, (XtPointer) box);
 		XtAddEventHandler(selFileLists[n], PointerMotionMask, False,
-			SFmotionList, (XtPointer) n);
+			SFmotionList, (XtPointer) box);
 		XtAddEventHandler(selFileLists[n], ButtonPressMask, False,
-			SFbuttonPressList, (XtPointer) n);
+			SFbuttonPressList, (XtPointer) box);
 		XtAddEventHandler(selFileLists[n], ButtonReleaseMask, False,
-			SFbuttonReleaseList, (XtPointer) n);
+			SFbuttonReleaseList, (XtPointer) box);
 	}
 
 	XtAddEventHandler(selFileField, KeyPressMask, False,
@@@@ -588,6 +600,7 @@@@ SFopenFile(name, mode, prompt, failed)
     return fp;
 }
 
+void
 SFtextChanged()
 {
 
@@@@ -617,7 +630,7 @@@@ SFgetText()
 		SFtextBuffer);
 }
 
-static
+static void
 SFprepareToReturn()
 {
 	SFstatus = SEL_FILE_NULL;
@
