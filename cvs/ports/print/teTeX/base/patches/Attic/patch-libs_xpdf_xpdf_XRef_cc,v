head	1.4;
access;
symbols
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_5:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2008.12.22.15.54.38;	author sturm;	state dead;
branches;
next	1.3;

1.3
date	2005.02.21.21.36.07;	author sturm;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.27.05.03.28;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.27.14.15.04;	author sturm;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2004.12.25.23.22.45;	author sturm;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2005.01.30.08.48.37;	author sturm;	state Exp;
branches;
next	;

1.1.4.1
date	2004.12.25.23.25.39;	author sturm;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2005.01.30.08.48.57;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@unlinked from builds more than 14 month ago, time to say goodbye
@
text
@$OpenBSD: patch-libs_xpdf_xpdf_XRef_cc,v 1.3 2005/02/21 21:36:07 sturm Exp $
--- libs/xpdf/xpdf/XRef.cc.orig	Wed Jan 19 13:09:57 2005
+++ libs/xpdf/xpdf/XRef.cc	Thu Feb 10 22:18:03 2005
@@@@ -28,6 +28,7 @@@@
 #include "Error.h"
 #include "ErrorCodes.h"
 #include "XRef.h"
+#include <limits.h>
 
 //------------------------------------------------------------------------
 
@@@@ -741,6 +742,10 @@@@ GBool XRef::constructXRef() {
     } else if (!strncmp(p, "endstream", 9)) {
       if (streamEndsLen == streamEndsSize) {
 	streamEndsSize += 64;
+  	if (streamEndsSize >= INT_MAX/sizeof(int)) {
+  	  error(-1, "Invalid 'endstream' parameter.");
+  	  return gFalse;
+  	}
 	streamEnds = (Guint *)grealloc(streamEnds,
 				       streamEndsSize * sizeof(int));
       }
@


1.3
log
@update to tetex-3.0, see included ChangeLog for details
the texmf-doc SUBPACKAGE is not distributed via ftp due to size constraints
@
text
@d1 1
a1 1
$OpenBSD: patch-libs_xpdf_xpdf_XRef_cc,v 1.2 2005/01/27 05:03:28 brad Exp $
@


1.2
log
@SECURITY:
Fix a buffer overflow due to insufficient bounds checking while
processing a PDF file that provides malicious values in the /Encrypt
/Length tag.
@
text
@d1 3
a3 3
$OpenBSD: patch-libs_xpdf_xpdf_XRef_cc,v 1.1 2004/11/27 14:15:04 sturm Exp $
--- libs/xpdf/xpdf/XRef.cc.orig	Sun Nov  3 17:15:37 2002
+++ libs/xpdf/xpdf/XRef.cc	Wed Jan 26 21:47:22 2005
d12 1
a12 35
@@@@ -76,6 +77,11 @@@@ XRef::XRef(BaseStream *strA, GString *ow
 
   // trailer is ok - read the xref table
   } else {
+    if ( size >= INT_MAX/sizeof(XRefEntry)) {
+      error(-1, "Invalid 'size' inside xref table.");
+      ok = gFalse;
+      return;
+    }
     entries = (XRefEntry *)gmalloc(size * sizeof(XRefEntry));
     for (i = 0; i < size; ++i) {
       entries[i].offset = 0xffffffff;
@@@@ -267,6 +273,10 @@@@ GBool XRef::readXRef(Guint *pos) {
     // table size
     if (first + n > size) {
       newSize = size + 256;
+      if (newSize >= INT_MAX/sizeof(XRefEntry)) {
+	error(-1, "Invalid 'newSize'");
+	goto err2;
+      }
       entries = (XRefEntry *)grealloc(entries, newSize * sizeof(XRefEntry));
       for (i = size; i < newSize; ++i) {
 	entries[i].offset = 0xffffffff;
@@@@ -410,6 +420,10 @@@@ GBool XRef::constructXRef() {
 	    if (!strncmp(p, "obj", 3)) {
 	      if (num >= size) {
 		newSize = (num + 1 + 255) & ~255;
+		if (newSize >= INT_MAX / sizeof(XRefEntry)) {
+		  error(-1, "Invalid 'obj' parameters.");
+		  return gFalse;
+		}
 		entries = (XRefEntry *)
 		            grealloc(entries, newSize * sizeof(XRefEntry));
 		for (i = size; i < newSize; ++i) {
@@@@ -431,6 +445,10 @@@@ GBool XRef::constructXRef() {
a22 10
@@@@ -480,6 +498,9 @@@@ GBool XRef::checkEncrypted(GString *owne
 	  keyLength = lengthObj.getInt() / 8;
 	} else {
 	  keyLength = 5;
+	}
+	if (keyLength > 16) {
+	  keyLength = 16;
 	}
 	permFlags = permissions.getInt();
 	if (encVersion >= 1 && encVersion <= 2 &&
@


1.1
log
@SECURITY FIX for CAN-2004-0888 (integer overflows in included xpdf)
bump PKGNAME

from freebsd
@
text
@d1 3
a3 3
$OpenBSD$
--- libs/xpdf/xpdf/XRef.cc.orig	Sun Nov  3 23:15:37 2002
+++ libs/xpdf/xpdf/XRef.cc	Sat Nov 27 14:51:17 2004
d57 10
@


1.1.4.1
log
@pull in security fixes for included xpdf from -current
fixes CAN-2004-0888 and CAN-2004-1125
@
text
@d1 1
a1 1
$OpenBSD: patch-libs_xpdf_xpdf_XRef_cc,v 1.1 2004/11/27 14:15:04 sturm Exp $
@


1.1.4.2
log
@MFC:

SECURITY:
Fix a buffer overflow due to insufficient bounds checking while
processing a PDF file that provides malicious values in the /Encrypt
/Length tag.

ok brad@@
@
text
@d1 3
a3 3
$OpenBSD: patch-libs_xpdf_xpdf_XRef_cc,v 1.2 2005/01/27 05:03:28 brad Exp $
--- libs/xpdf/xpdf/XRef.cc.orig	Sun Nov  3 17:15:37 2002
+++ libs/xpdf/xpdf/XRef.cc	Wed Jan 26 21:47:22 2005
a56 10
@@@@ -480,6 +498,9 @@@@ GBool XRef::checkEncrypted(GString *owne
 	  keyLength = lengthObj.getInt() / 8;
 	} else {
 	  keyLength = 5;
+	}
+	if (keyLength > 16) {
+	  keyLength = 16;
 	}
 	permFlags = permissions.getInt();
 	if (encVersion >= 1 && encVersion <= 2 &&
@


1.1.2.1
log
@pull in security fixes for included xpdf from -current
fixes CAN-2004-0888 and CAN-2004-1125
@
text
@d1 1
a1 1
$OpenBSD: patch-libs_xpdf_xpdf_XRef_cc,v 1.1 2004/11/27 14:15:04 sturm Exp $
@


1.1.2.2
log
@MFC:

SECURITY:
Fix a buffer overflow due to insufficient bounds checking while
processing a PDF file that provides malicious values in the /Encrypt
/Length tag.

ok brad@@
@
text
@d1 3
a3 3
$OpenBSD: patch-libs_xpdf_xpdf_XRef_cc,v 1.2 2005/01/27 05:03:28 brad Exp $
--- libs/xpdf/xpdf/XRef.cc.orig	Sun Nov  3 17:15:37 2002
+++ libs/xpdf/xpdf/XRef.cc	Wed Jan 26 21:47:22 2005
a56 10
@@@@ -480,6 +498,9 @@@@ GBool XRef::checkEncrypted(GString *owne
 	  keyLength = lengthObj.getInt() / 8;
 	} else {
 	  keyLength = 5;
+	}
+	if (keyLength > 16) {
+	  keyLength = 16;
 	}
 	permFlags = permissions.getInt();
 	if (encVersion >= 1 && encVersion <= 2 &&
@


