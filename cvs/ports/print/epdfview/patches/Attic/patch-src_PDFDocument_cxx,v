head	1.5;
access;
symbols
	OPENBSD_5_6:1.4.0.12
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.10
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2014.12.15.23.37.16;	author kili;	state dead;
branches;
next	1.4;
commitid	5KhDhbSKa4U6d8K1;

1.4
date	2012.01.13.19.07.25;	author landry;	state Exp;
branches;
next	1.3;

1.3
date	2011.06.08.18.26.44;	author ajacoutot;	state dead;
branches;
next	1.2;

1.2
date	2011.06.04.19.05.23;	author kili;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.12.21.45.20;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Remove epdfview. upstream is dead, and it doesn't even
work with simple pdf files.

ok many (including maintainer brynet, jasper@@ and landry@@).
@
text
@$OpenBSD: patch-src_PDFDocument_cxx,v 1.4 2012/01/13 19:07:25 landry Exp $

Fixes a bug with poppler swapping the blue and red channels.
http://trac.emma-soft.com/epdfview/changeset/367 

--- src/PDFDocument.cxx.orig	Sat May 28 06:25:01 2011
+++ src/PDFDocument.cxx	Thu Jan 12 22:08:15 2012
@@@@ -20,6 +20,7 @@@@
 #include <time.h>
 #include <poppler.h>
 #include <unistd.h>
+#include <algorithm>
 #include "epdfview.h"
 
 using namespace ePDFView;
@@@@ -33,6 +34,24 @@@@ static PageLayout convertPageLayout (gint pageLayout);
 static PageMode convertPageMode (gint pageMode);
 static gchar *getAbsoluteFileName (const gchar *fileName);
 
+namespace
+{
+	void
+	convert_bgra_to_rgba (guint8 *data, int width, int height)
+	{
+		using std::swap;
+
+		for (int y = 0; y < height; y++)
+		{
+			for (int x = 0; x < width; x++)
+			{
+				swap(data[0], data[2]);
+				data += 4;
+			}
+		}
+	}
+}
+
 ///
 /// @@brief Constructs a new PDFDocument object.
 ///
@@@@ -650,6 +669,7 @@@@ PDFDocument::renderPage (gint pageNum)
         poppler_page_render (page, context);
         cairo_destroy(context);
         cairo_surface_destroy (surface);
+	convert_bgra_to_rgba(renderedPage->getData (), width, height);
 #else // !HAVE_POPPLER_0_17_0
         // Create the pixbuf from the data and render to it.
         GdkPixbuf *pixbuf = gdk_pixbuf_new_from_data (renderedPage->getData (),
@


1.4
log
@Fixes a bug with poppler swapping the blue and red channels, from
http://trac.emma-soft.com/epdfview/changeset/367
From James Turner, ok dcoppa@@.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@Update to epdfview-0.1.8.

ok Brynet (maintainer), jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_PDFDocument_cxx,v 1.2 2011/06/04 19:05:23 kili Exp $
d3 2
a4 3
Fixes error handling, bogus encrypted files, r339.
Fix API breakage introduced with poppler-0.16, and a stupid bug
calculating the value of x2.
d6 20
a25 22
--- src/PDFDocument.cxx.orig	Sat Feb 28 22:00:35 2009
+++ src/PDFDocument.cxx	Sat May 14 12:43:43 2011
@@@@ -246,24 +246,26 @@@@ PDFDocument::loadFile (const gchar *filename, const gc
     // Check if the document couldn't be opened successfully and why.
     if ( NULL == newDocument )
     {
-        // Poppler's glib wrapper passes the Poppler error code unless the
-        // error is that the file is encrypted. We want to set our own
-        // error code in this case.
         DocumentError errorCode = DocumentErrorNone;
-        if ( POPPLER_ERROR == loadError->domain )
+        switch ( loadError->code )
         {
-            errorCode = DocumentErrorEncrypted;
+            case POPPLER_ERROR_OPEN_FILE:
+            case POPPLER_ERROR_INVALID:
+                errorCode = DocumentErrorOpenFile;
+                break;
+
+            case POPPLER_ERROR_BAD_CATALOG:
+                errorCode = DocumentErrorBadCatalog;
+                break;
d27 10
a36 3
+            case POPPLER_ERROR_DAMAGED:
+                errorCode = DocumentErrorDamaged;
+                break;
d38 11
a48 37
+            case POPPLER_ERROR_ENCRYPTED:
+                errorCode = DocumentErrorEncrypted;
+                break;
         }
-        else
-        {
-            // OK, the glib's wrapper don't pass the error code directly
-            // from Poppler. Instead returns G_FILE_ERROR_FAILED and a
-            // non translated string.
-            // Maybe I'm wrong (very probable) but that's a wrong way.
-            // So I'm reading the error code from the error string...
-            sscanf (loadError->message, "Failed to load document (error %d)",
-                    (gint *)&errorCode);
-        }
         g_error_free (loadError);
         // Get our error message.
         gchar *errorMessage = IDocument::getErrorMessage (errorCode);
@@@@ -678,15 +680,14 @@@@ PDFDocument::setTextSelection (DocumentRectangle *rect
     gdouble pageWidth, pageHeight;
     poppler_page_get_size(page, &pageWidth, &pageHeight);
 
-    //for get text we must exchange y coordinate, don't ask me where logic here.
     PopplerRectangle textRect = { rect->getX1() / getZoom(),
-                                  (pageHeight - rect->getY2() / getZoom()),
-                                  rect->getX2() * getZoom() / getZoom(),
-                                  (pageHeight - rect->getY1() / getZoom())};
+                                  rect->getY1() / getZoom(),
+                                  rect->getX2() / getZoom(),
+                                  rect->getY2() / getZoom()};
     repairEmpty(textRect);
 
 #if defined (HAVE_POPPLER_0_6_0)
-    gchar *text = poppler_page_get_text(page, POPPLER_SELECTION_GLYPH,
+    gchar *text = poppler_page_get_selected_text(page, POPPLER_SELECTION_GLYPH,
             &textRect);
 #else // !HAVE_POPPLER_0_6_0
     gchar *text = poppler_page_get_text(page, &textRect);
@


1.2
log
@Follow incompatible API change in poppler-0.16 and fix an old bug in
text selection.
While here, adjust WANTLIB.

Brynet (maintainer) will work on a real update of this port.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_PDFDocument_cxx,v 1.1 2010/01/12 21:45:20 jasper Exp $
@


1.1
log
@- add a few patches from upstream svn
* clarify an error message
* fix error handling of encrypted files
* save current page when reloading the document

from brynet (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD$
d4 2
d7 3
a9 3
--- src/PDFDocument.cxx.orig	Sat Feb 28 16:00:35 2009
+++ src/PDFDocument.cxx	Tue Dec 29 23:00:29 2009
@@@@ -246,23 +246,25 @@@@ PDFDocument::loadFile (const gchar *filename, const gc
a20 10
-        }
-        else
-        {
-            // OK, the glib's wrapper don't pass the error code directly
-            // from Poppler. Instead returns G_FILE_ERROR_FAILED and a
-            // non translated string.
-            // Maybe I'm wrong (very probable) but that's a wrong way.
-            // So I'm reading the error code from the error string...
-            sscanf (loadError->message, "Failed to load document (error %d)",
-                    (gint *)&errorCode);
d38 10
d50 21
@

