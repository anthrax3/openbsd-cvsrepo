head	1.17;
access;
symbols
	OPENBSD_6_1:1.17.0.2
	OPENBSD_6_1_BASE:1.17
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.13.0.6
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.8
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.4
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.2
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.2
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.11.0.4
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.11.0.2
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.9.0.2
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.4
	OPENBSD_5_0:1.8.0.2
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.7.0.2
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.2
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.17
date	2016.12.17.01.20.10;	author kili;	state Exp;
branches;
next	1.16;
commitid	J58c5HqB3i2FsNI3;

1.16
date	2016.08.01.18.35.40;	author kili;	state Exp;
branches;
next	1.15;
commitid	ju7t3HlTboIHX5Vt;

1.15
date	2016.05.01.12.33.24;	author kili;	state Exp;
branches;
next	1.14;
commitid	DH8m0HwSv6Jc9cbK;

1.14
date	2016.03.23.20.09.34;	author kili;	state Exp;
branches;
next	1.13;
commitid	EDuk40uBjyYQAO5o;

1.13
date	2014.04.28.16.48.27;	author kili;	state Exp;
branches;
next	1.12;

1.12
date	2013.08.15.18.40.20;	author kili;	state Exp;
branches;
next	1.11;

1.11
date	2013.01.21.19.08.00;	author kili;	state Exp;
branches;
next	1.10;

1.10
date	2012.09.27.18.45.34;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2012.07.13.15.03.19;	author kili;	state Exp;
branches;
next	1.8;

1.8
date	2011.06.04.19.03.19;	author kili;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.09.08.05.30;	author kili;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.08.17.09.48;	author kili;	state Exp;
branches;
next	1.5;

1.5
date	2009.11.21.21.57.50;	author kili;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.26.19.23.46;	author kili;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.15.20.43.40;	author kili;	state Exp;
branches;
next	1.2;

1.2
date	2008.10.28.12.59.55;	author kili;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2008.05.21.11.52.49;	author jasper;	state Exp;
branches;
next	;

1.2.4.1
date	2009.11.12.02.14.55;	author william;	state Exp;
branches;
next	;


desc
@@


1.17
log
@aja@@ wants a new poppler, so update to 0.50.0.
@
text
@$OpenBSD: patch-poppler_XRef_cc,v 1.16 2016/08/01 18:35:40 kili Exp $
--- poppler/XRef.cc.orig	Thu Dec 15 20:08:06 2016
+++ poppler/XRef.cc	Fri Dec 16 14:16:46 2016
@@@@ -1090,49 +1090,38 @@@@ void XRef::getEncryptionParameters(Guchar **fileKeyA, 
 }
 
 GBool XRef::okToPrint(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permPrint);
+  return gTrue;
 }
 
 // we can print at high res if we are only doing security handler revision
 // 2 (and we are allowed to print at all), or with security handler rev
 // 3 and we are allowed to print, and bit 12 is set.
 GBool XRef::okToPrintHighRes(GBool ignoreOwnerPW) {
-  if (encrypted) {
-    if (2 == encRevision) {
-      return (okToPrint(ignoreOwnerPW));
-    } else if (encRevision >= 3) {
-      return (okToPrint(ignoreOwnerPW) && (permFlags & permHighResPrint));
-    } else {
-      // something weird - unknown security handler version
-      return gFalse;
-    }
-  } else {
-    return gTrue;
-  }
+  return gTrue;
 }
 
 GBool XRef::okToChange(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permChange);
+  return gTrue;
 }
 
 GBool XRef::okToCopy(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permCopy);
+  return gTrue;
 }
 
 GBool XRef::okToAddNotes(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permNotes);
+  return gTrue;
 }
 
 GBool XRef::okToFillForm(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permFillForm);
+  return gTrue;
 }
 
 GBool XRef::okToAccessibility(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permAccessibility);
+  return gTrue;
 }
 
 GBool XRef::okToAssemble(GBool ignoreOwnerPW) {
-  return (!ignoreOwnerPW && ownerPasswordOk) || (permFlags & permAssemble);
+  return gTrue;
 }
 
 Object *XRef::getCatalog(Object *catalog) {
@


1.16
log
@Update to poppler-0.46.0.

Simplify patch for configure.ac.

Non need to set ac_cv_prog_MOCQT5 or ac_cv_prog_MOCQT52 in
CONFIGURE_ENV (noticed by zhuk@@).
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.15 2016/05/01 12:33:24 kili Exp $
--- poppler/XRef.cc.orig	Tue Jul  5 23:37:01 2016
+++ poppler/XRef.cc	Sat Jul 30 22:32:39 2016
@@@@ -1089,49 +1089,38 @@@@ void XRef::getEncryptionParameters(Guchar **fileKeyA, 
@


1.15
log
@Update to poppler-0.43.0.
Replace gettext module by normal dependencies.
Enable libnss (for pdfsig).

ok aja@@  (with a small correction to my initial diff)
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.14 2016/03/23 20:09:34 kili Exp $
--- poppler/XRef.cc.orig	Thu Apr 28 09:51:41 2016
+++ poppler/XRef.cc	Fri Apr 29 20:48:29 2016
@@@@ -1087,49 +1087,38 @@@@ void XRef::getEncryptionParameters(Guchar **fileKeyA, 
@


1.14
log
@Update to poppler-0.42.0.

Not including pdfsig(1) and related functionaliety in the
libraries for now, because it would pull in a couple of
additional dependencies (via security/nss). I'll send a
separate diff for this in a few days to let people judge
wether it's too much or not.

ok aja@@
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.13 2014/04/28 16:48:27 kili Exp $
--- poppler/XRef.cc.orig	Wed Mar 16 10:36:12 2016
+++ poppler/XRef.cc	Mon Mar 21 11:04:17 2016
@@@@ -1077,49 +1077,38 @@@@ void XRef::getEncryptionParameters(Guchar **fileKeyA, 
@


1.13
log
@Update to poppler-0.26.

ok ajacoutot@@
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.12 2013/08/15 18:40:20 kili Exp $
--- poppler/XRef.cc.orig	Sun Apr  6 16:08:14 2014
+++ poppler/XRef.cc	Sun Apr 27 12:07:49 2014
@@@@ -1076,49 +1076,38 @@@@ void XRef::getEncryptionParameters(Guchar **fileKeyA, 
@


1.12
log
@Update to poppler-0.24.

ok ajacoutot@@ (and thanks for testing!)
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.11 2013/01/21 19:08:00 kili Exp $
--- poppler/XRef.cc.orig	Thu Jun  6 01:04:53 2013
+++ poppler/XRef.cc	Sat Aug  3 22:05:07 2013
@@@@ -1075,49 +1075,38 @@@@ void XRef::getEncryptionParameters(Guchar **fileKeyA, 
@


1.11
log
@Update to poppler-0.22.0.

ok ajacoutot@@ landry@@
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.10 2012/09/27 18:45:34 ajacoutot Exp $
--- poppler/XRef.cc.orig	Fri Dec 28 01:17:03 2012
+++ poppler/XRef.cc	Fri Jan 18 19:23:05 2013
@@@@ -976,49 +976,38 @@@@ void XRef::getEncryptionParameters(Guchar **fileKeyA, 
@


1.10
log
@Update to poppler-0.20.4.

input from and ok kili@@ (maintainer)
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.9 2012/07/13 15:03:19 kili Exp $
--- poppler/XRef.cc.orig	Sun Sep  9 23:33:55 2012
+++ poppler/XRef.cc	Thu Sep 27 18:19:11 2012
@@@@ -945,49 +945,38 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
@


1.9
log
@Update to poppler-0.20.2.

ok aja@@
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.8 2011/06/04 19:03:19 kili Exp $
--- poppler/XRef.cc.orig	Thu May 10 22:05:44 2012
+++ poppler/XRef.cc	Mon Jul  9 14:47:58 2012
@@@@ -941,49 +941,38 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
d61 1
a61 1
 Object *XRef::fetch(int num, int gen, Object *obj, int recursion) {
@


1.8
log
@Update to poppler-0.16.5.

Gnome introspection disabled for now (doesn't compile with gcc-3).
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.7 2010/10/09 08:05:30 kili Exp $
--- poppler/XRef.cc.orig	Mon Dec 27 21:44:28 2010
+++ poppler/XRef.cc	Mon Apr 25 13:00:42 2011
@@@@ -922,49 +922,38 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
d61 1
a61 1
 Object *XRef::fetch(int num, int gen, Object *obj, std::set<int> *fetchOriginatorNums) {
@


1.7
log
@Update to poppler-0.14.3.

Major bumps on all shared libs.

Don't build the new poppler-cpp for now (still needs some tweaks).

Note: glitz omitted from WANTLIB on purpose -- according to landry@@ it
will disappear after the upcoming cairo update.

ok ajacoutot@@
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.6 2010/05/08 17:09:48 kili Exp $
--- poppler/XRef.cc.orig	Mon Jun 14 20:19:46 2010
+++ poppler/XRef.cc	Wed Oct  6 17:22:17 2010
@@@@ -926,49 +926,38 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
d61 1
a61 1
 Object *XRef::fetch(int num, int gen, Object *obj) {
@


1.6
log
@Update to poppler-0.12.4.

Use the converters/libiconv MODULE (prompted by ajacoutot).

ok ajacoutot@@, edd@@ (except for the patch hunk move bits, but I
really prefer a silent `make update-patches')
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.5 2009/11/21 21:57:50 kili Exp $
--- poppler/XRef.cc.orig	Sun Jan 17 01:06:57 2010
+++ poppler/XRef.cc	Fri May  7 23:04:39 2010
@@@@ -881,45 +881,38 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
d9 1
a9 1
+  return (1);
d16 9
a24 4
-  if (2 == encRevision) {
-    return (okToPrint(ignoreOwnerPW));
-  } else if (encRevision >= 3) {
-    return (okToPrint(ignoreOwnerPW) && (permFlags & permHighResPrint));
d26 1
a26 2
-    // something weird - unknown security handler version
-    return gFalse;
d28 1
a28 1
+  return (1);
d33 1
a33 1
+  return (1);
d38 1
a38 1
+  return (1);
d43 1
a43 1
+  return (1);
d48 1
a48 1
+  return (1);
d53 1
a53 1
+  return (1);
d58 1
a58 1
+  return (1);
@


1.5
log
@Security fix (CVE-2009-3607) and bug fixes.
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.4 2009/10/26 19:23:46 kili Exp $
--- poppler/XRef.cc.orig	Sun Oct 18 00:23:09 2009
+++ poppler/XRef.cc	Fri Nov 20 20:30:45 2009
@@@@ -856,45 +856,38 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
@


1.4
log
@Update to poppler-0.12.1.

Contains the xpdf-3.02pl4 diffs and some additional bug fixes.

ok ajacoutot@@
@
text
@d1 4
a4 4
$OpenBSD: patch-poppler_XRef_cc,v 1.2 2008/10/28 12:59:55 kili Exp $
--- poppler/XRef.cc.orig	Sun Sep 14 22:35:48 2008
+++ poppler/XRef.cc	Sun Oct 26 12:45:54 2008
@@@@ -850,45 +850,38 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
@


1.3
log
@Merge security fixes from xpdf.

ok jasper@@
@
text
@d2 3
a4 54
--- poppler/XRef.cc.orig	Wed Sep  2 20:48:16 2009
+++ poppler/XRef.cc	Thu Oct 15 20:32:12 2009
@@@@ -76,6 +76,8 @@@@ class ObjectStream { (public)
   // generation 0.
   ObjectStream(XRef *xref, int objStrNumA);
 
+  GBool isOk() { return ok; }
+
   ~ObjectStream();
 
   // Return the object number of this object stream.
@@@@ -91,6 +93,7 @@@@ class ObjectStream { (public)
   int nObjects;			// number of objects in the stream
   Object *objs;			// the objects (length = nObjects)
   int *objNums;			// the object numbers (length = nObjects)
+  GBool ok;
 };
 
 ObjectStream::ObjectStream(XRef *xref, int objStrNumA) {
@@@@ -104,6 +107,7 @@@@ ObjectStream::ObjectStream(XRef *xref, int objStrNumA)
   nObjects = 0;
   objs = NULL;
   objNums = NULL;
+  ok = gFalse;
 
   if (!xref->fetch(objStrNum, 0, &objStr)->isStream()) {
     goto err1;
@@@@ -134,6 +138,13 @@@@ ObjectStream::ObjectStream(XRef *xref, int objStrNumA)
     goto err1;
   }
  
+  // this is an arbitrary limit to avoid integer overflow problems
+  // in the 'new Object[nObjects]' call (Acrobat apparently limits
+  // object streams to 100-200 objects)
+  if (nObjects > 1000000) {
+    error(-1, "Too many objects in an object stream");
+    goto err1;
+  }
   objs = new Object[nObjects];
   objNums = (int *)gmallocn(nObjects, sizeof(int));
   offsets = (int *)gmallocn(nObjects, sizeof(int));
@@@@ -190,10 +201,10 @@@@ ObjectStream::ObjectStream(XRef *xref, int objStrNumA)
   }
 
   gfree(offsets);
+  ok = gTrue;
 
  err1:
   objStr.free();
-  return;
 }
 
 ObjectStream::~ObjectStream() {
@@@@ -850,45 +861,38 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
a57 12
@@@@ -970,6 +974,11 @@@@ Object *XRef::fetch(int num, int gen, Object *obj) {
 	delete objStr;
       }
       objStr = new ObjectStream(this, e->offset);
+      if (!objStr->isOk()) {
+	delete objStr;
+	objStr = NULL;
+	goto err;
+      }
     }
     objStr->getObject(e->gen, num, obj);
     break;
@


1.2
log
@
Update to 0.10.0.
@
text
@d1 55
a55 4
$OpenBSD: patch-poppler_XRef_cc,v 1.1 2008/05/21 11:52:49 jasper Exp $
--- poppler/XRef.cc.orig	Sun Sep 14 22:35:48 2008
+++ poppler/XRef.cc	Sun Oct 26 12:45:54 2008
@@@@ -850,45 +850,38 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
d109 12
@


1.2.4.1
log
@Apply xpdf security patches for:

CVE-2009-3603
CVE-2009-3604
CVE-2009-3606
CVE-2009-3608
CVE-2009-3609

from kili@@, thanks!

ok jasper@@
@
text
@d1 4
a4 64
xpdf security patches for:

CVE-2009-3603
CVE-2009-3604
CVE-2009-3606
CVE-2009-3608
CVE-2009-3609


$OpenBSD: patch-poppler_XRef_cc,v 1.2 2008/10/28 12:59:55 kili Exp $
--- poppler/XRef.cc.orig	Sat May  2 14:14:57 2009
+++ poppler/XRef.cc	Sat Oct 24 22:11:31 2009
@@@@ -76,6 +76,8 @@@@ class ObjectStream { (public)
   // generation 0.
   ObjectStream(XRef *xref, int objStrNumA);
 
+  GBool isOk() { return ok; }
+
   ~ObjectStream();
 
   // Return the object number of this object stream.
@@@@ -91,6 +93,7 @@@@ class ObjectStream { (public)
   int nObjects;			// number of objects in the stream
   Object *objs;			// the objects (length = nObjects)
   int *objNums;			// the object numbers (length = nObjects)
+  GBool ok;
 };
 
 ObjectStream::ObjectStream(XRef *xref, int objStrNumA) {
@@@@ -104,6 +107,7 @@@@ ObjectStream::ObjectStream(XRef *xref, int objStrNumA)
   nObjects = 0;
   objs = NULL;
   objNums = NULL;
+  ok = gFalse;
 
   if (!xref->fetch(objStrNum, 0, &objStr)->isStream()) {
     goto err1;
@@@@ -134,6 +138,13 @@@@ ObjectStream::ObjectStream(XRef *xref, int objStrNumA)
     goto err1;
   }
  
+  // this is an arbitrary limit to avoid integer overflow problems
+  // in the 'new Object[nObjects]' call (Acrobat apparently limits
+  // object streams to 100-200 objects)
+  if (nObjects > 1000000) {
+    error(-1, "Too many objects in an object stream");
+    goto err1;
+  }
   objs = new Object[nObjects];
   objNums = (int *)gmallocn(nObjects, sizeof(int));
   offsets = (int *)gmallocn(nObjects, sizeof(int));
@@@@ -190,10 +201,10 @@@@ ObjectStream::ObjectStream(XRef *xref, int objStrNumA)
   }
 
   gfree(offsets);
+  ok = gTrue;
 
  err1:
   objStr.free();
-  return;
 }
 
 ObjectStream::~ObjectStream() {
@@@@ -850,45 +861,38 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
a57 12
@@@@ -970,6 +974,11 @@@@ Object *XRef::fetch(int num, int gen, Object *obj) {
 	delete objStr;
       }
       objStr = new ObjectStream(this, e->offset);
+      if (!objStr->isOk()) {
+	delete objStr;
+	objStr = NULL;
+	goto err;
+      }
     }
     objStr->getObject(e->gen, num, obj);
     break;
@


1.1
log
@able the DRM bits here too, like it was done for xpdf

from brad@@
@
text
@d1 4
a4 4
$OpenBSD$
--- poppler/XRef.cc.orig	Fri Apr 25 04:50:55 2008
+++ poppler/XRef.cc	Fri Apr 25 04:52:33 2008
@@@@ -823,45 +823,38 @@@@ void XRef::setEncryption(int permFlagsA, GBool ownerPa
@

