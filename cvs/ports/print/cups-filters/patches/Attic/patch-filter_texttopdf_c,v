head	1.1;
access;
symbols
	OPENBSD_5_7:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2015.06.27.12.05.50;	author ajacoutot;	state dead;
branches
	1.1.2.1;
next	;
commitid	Zg3HLv3IrSux21Fv;

1.1.2.1
date	2015.06.27.12.05.50;	author ajacoutot;	state Exp;
branches;
next	1.1.2.2;
commitid	Zg3HLv3IrSux21Fv;

1.1.2.2
date	2015.07.03.07.57.37;	author ajacoutot;	state Exp;
branches;
next	;
commitid	65EuIqDlxlMTiyTw;


desc
@@


1.1
log
@file patch-filter_texttopdf_c was initially added on branch OPENBSD_5_7.
@
text
@@


1.1.2.1
log
@texttopdf: Fixed buffer overflow on size allocation of texttopdf
when working with extremely small line sizes, which causes the size
calculation to result in 0 (CVE-2015-3258, thanks to Stefan
Cornelius from Red Hat for the patch).
@
text
@a0 24
$OpenBSD$

texttopdf: Fixed buffer overflow on size allocation of texttopdf
when working with extremely small line sizes, which causes the size
calculation to result in 0 (CVE-2015-3258, thanks to Stefan
Cornelius fro Red Hat for the patch).

--- filter/texttopdf.c.orig	Tue Dec 10 22:20:15 2013
+++ filter/texttopdf.c	Sat Jun 27 13:59:04 2015
@@@@ -340,6 +340,14 @@@@ WriteProlog(const char *title,		/* I - Title of job */
   SizeColumns = (PageRight - PageLeft) / 72.0 * CharsPerInch;
   SizeLines   = (PageTop - PageBottom) / 72.0 * LinesPerInch;
 
+ /*
+  * Enforce minimum size...
+  */
+  if (SizeColumns < 1)
+    SizeColumns = 1;
+  if (SizeLines < 1)
+    SizeLines = 1;
+
   Page    = calloc(sizeof(lchar_t *), SizeLines);
   Page[0] = calloc(sizeof(lchar_t), SizeColumns * SizeLines);
   for (i = 1; i < SizeLines; i ++)
@


1.1.2.2
log
@Fix for texttopdf, upper-bounds checking (CVE-2015-3259).
@
text
@d1 1
a1 3
$OpenBSD: patch-filter_texttopdf_c,v 1.1.2.1 2015/06/27 12:05:50 ajacoutot Exp $

Upper-bounds checking in texttopdf (CVE-2015-3259).
d8 5
a12 28
--- filter/texttopdf.c.orig	Fri Jul  3 09:53:05 2015
+++ filter/texttopdf.c	Fri Jul  3 09:53:11 2015
@@@@ -172,9 +172,6 @@@@ WriteEpilogue(void)
 		{ "FN","FB","FI" };
   int i,j;
 
-  free(Page[0]);
-  free(Page);
-
   // embed fonts
   for (i = PrettyPrint ? 2 : 1; i >= 0; i --) {
     for (j = 0; j < NumFonts; j ++) 
@@@@ -332,18 +329,6 @@@@ WriteProlog(const char *title,		/* I - Title of job */
     PageBottom += 36;
     PageTop    -= 36;
   }
-
- /*
-  * Allocate memory for the page...
-  */
-
-  SizeColumns = (PageRight - PageLeft) / 72.0 * CharsPerInch;
-  SizeLines   = (PageTop - PageBottom) / 72.0 * LinesPerInch;
-
-  Page    = calloc(sizeof(lchar_t *), SizeLines);
-  Page[0] = calloc(sizeof(lchar_t), SizeColumns * SizeLines);
-  for (i = 1; i < SizeLines; i ++)
-    Page[i] = Page[0] + i * SizeColumns;
d14 11
a24 2
   if (PageColumns > 1)
   {
@


