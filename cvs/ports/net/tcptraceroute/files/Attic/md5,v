head	1.2;
access;
symbols
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	obecian_2001-Aug-06:1.1.1.1
	obecian:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.03.21.20.05.23;	author espie;	state dead;
branches;
next	1.1;

1.1
date	2001.08.07.03.14.39;	author obecian;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.08.07.03.14.39;	author obecian;	state Exp;
branches;
next	;


desc
@@


1.2
log
@md5->distinfo
@
text
@MD5 (tcptraceroute-1.2.tar.gz) = e31e3f5bfd817d32ed6d954382ca768d
RMD160 (tcptraceroute-1.2.tar.gz) = a7ec078b70e0fc4636f79d3bf62eeb86b92f917d
SHA1 (tcptraceroute-1.2.tar.gz) = 612dba7ef93d6ece42def5e4faef226523c8b01a
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@tcptraceroute-1.2 import

The more traditional traceroute(8) sends out either UDP or ICMP ECHO
packets with a TTL of one, and increments the TTL until the destination
has been reached. By printing the gateways that generate ICMP time
exceeded messages along the way, it is able to determine the path
packets are taking to reach the destination. 

The problem is that with the widespread use of firewalls on the modern
Internet, many of the packets that traceroute(8) sends out end up being
filtered, making it impossible to completely trace the path to the
destination. However, in many cases, these firewalls will permit inbound
TCP packets to specific ports that hosts sitting behind the firewall are
listening for connections on. By sending out TCP SYN packets instead of
UDP or ICMP ECHO packets, tcptraceroute is able to bypass the most common
firewall filters. 

@
text
@@
