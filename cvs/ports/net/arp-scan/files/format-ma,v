head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.8
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.6
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.4
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2015.11.03.15.51.24;	author sthen;	state Exp;
branches;
next	;
commitid	n5oqfVKvm8waXbDC;


desc
@@


1.1
log
@move mac address databases to a subpackage, and generate it based on the newer
CSVs which include MA-S (32-bit vendor), MA-M (28-bit vendor) as well as the
old standard 24-bit vendors.
@
text
@#!/usr/bin/perl

use warnings;
use strict;
use Text::CSV;

my ($errno, $lineno, $entry, $registry, $mac, $vendor, $address);

my $csv = Text::CSV->new({
	allow_loose_quotes => 1,
	auto_diag => 1,
	binary => 1,
	eol => $/
});

open OUI, ">ieee-oui.txt" || die "Could not open ieee-oui.txt for writing";
open IAB, ">ieee-iab.txt" || die "Could not open ieee-iab.txt for writing";
open DAT, ">ethercodes.dat" || die "Could not open ethercodes.dat for writing";

$csv->bind_columns (\$registry, \$mac, \$vendor, \$address);
while ($csv->getline (*ARGV)) {
	$lineno++;
	next if ($mac eq 'Assignment');
	$entry++;
	if ($registry =~ /^MA-(S|M|L|0)$/) {
		print OUI "$mac\t$vendor\n";
	} elsif ($registry =~ /^IAB$/) {
		print IAB "$mac\t$vendor\n";
	} else {
		print STDERR "Unknown registry on line $lineno\n";
		$errno++;
	}
	# arpwatch only handles (24-bit vendors) and doesn't want a leading 0
	next if (length($mac) ne 6);
	$mac = lc($mac);
	print DAT substr($mac,0,1) unless substr($mac,0,1) eq '0';
	print DAT substr($mac,1,1), ':';
	print DAT substr($mac,2,1) unless substr($mac,2,1) eq '0';
	print DAT substr($mac,3,1), ':';
	print DAT substr($mac,4,1) unless substr($mac,4,1) eq '0';
	print DAT substr($mac,5,1);
	print DAT "\t$vendor\n";
}

close OUI;
close IAB;
close DAT;
print STDERR "$entry entries\n";
@
