head	1.4;
access;
symbols
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_9:1.2.0.2
	OPENBSD_3_0:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2011.10.18.20.24.24;	author naddy;	state dead;
branches;
next	1.3;

1.3
date	2011.07.01.10.24.53;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.29.21.02.17;	author naddy;	state dead;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2002.01.24.23.25.32;	author naddy;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.01.24.23.31.37;	author naddy;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.03.17.18.20.59;	author naddy;	state dead;
branches;
next	;

1.2.2.1
date	2011.04.10.17.17.54;	author jasper;	state Exp;
branches;
next	;

1.2.4.1
date	2011.04.11.09.16.52;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to 3.0.9.
Drop USE_GROFF, the only formatting difference is some extra whitespace.

ok espie@@
@
text
@$OpenBSD: patch-flist_c,v 1.3 2011/07/01 10:24:53 espie Exp $
--- flist.c.orig	Fri Jul  1 12:18:23 2011
+++ flist.c	Fri Jul  1 12:19:48 2011
@@@@ -1646,11 +1646,12 @@@@ static void send_directory(int f, struct file_list *fl
 		remainder = 0;
 
 	for (errno = 0, di = readdir(d); di; errno = 0, di = readdir(d)) {
+		unsigned name_len;
 		char *dname = d_name(di);
 		if (dname[0] == '.' && (dname[1] == '\0'
 		    || (dname[1] == '.' && dname[2] == '\0')))
 			continue;
-		unsigned name_len = strlcpy(p, dname, remainder);
+		name_len = strlcpy(p, dname, remainder);
 		if (name_len >= remainder) {
 			char save = fbuf[len];
 			fbuf[len] = '\0';
@


1.3
log
@move variable decl to beginning of block, should fix things for Nick Holland
on sparc (if there's no more of these)
no bin change, repair stuff that wouldn't build -> no bump
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Update to 2.5.2.
@
text
@d1 5
a5 11
$OpenBSD: patch-flist_c,v 1.1 2002/01/24 23:25:32 naddy Exp $
--- flist.c.orig	Thu Jan  3 08:09:35 2002
+++ flist.c	Thu Jan 24 23:35:43 2002
@@@@ -332,7 +332,7 @@@@ static void receive_file_entry(struct fi
 	static gid_t last_gid;
 	static char lastname[MAXPATHLEN];
 	char thisname[MAXPATHLEN];
-	int l1=0,l2=0;
+	unsigned int l1=0,l2=0;
 	char *p;
 	struct file_struct *file;
d7 11
a17 11
@@@@ -399,6 +399,10 @@@@ static void receive_file_entry(struct fi
 
 	if (preserve_links && S_ISLNK(file->mode)) {
 		int l = read_int(f);
+		if (l < 0) {
+			rprintf(FERROR,"overflow: l=%d\n", l);
+			overflow("receive_file_entry");
+		}
 		file->link = (char *)malloc(l+1);
 		if (!file->link) out_of_memory("receive_file_entry 2");
 		read_sbuf(f,file->link,l);
@


1.2.4.1
log
@Security fix for CVE-2011-1097:
rsync Incremental Recursion Memory Corruption Vulnerability

(already fixed in current's 3.0.8, this is the same diff applied to OPENBSD_4_9)
tested by Simon Kuhnle, ok jasper@@
@
text
@d1 11
a11 30
$OpenBSD: patch-flist_c,v 1.2.2.1 2011/04/10 17:17:54 jasper Exp $

Security fix for CVE-2011-1097:
rsync Incremental Recursion Memory Corruption Vulnerability

Patch from upstream git:
http://gitweb.samba.org/?p=rsync.git;a=patch;h=83b94efa6b60a3ff5eee4c5f7812c617a90a03f6;hp=c8255147b06b74dad940d32f9cef5fbe17595239

--- flist.c.orig	Sat Apr  9 10:49:12 2011
+++ flist.c	Sat Apr  9 10:49:09 2011
@@@@ -52,12 +52,9 @@@@ extern int preserve_hard_links;
 extern int preserve_devices;
 extern int preserve_specials;
 extern int delete_during;
-extern int uid_ndx;
-extern int gid_ndx;
 extern int eol_nulls;
 extern int relative_paths;
 extern int implied_dirs;
-extern int file_extra_cnt;
 extern int ignore_perishable;
 extern int non_perishable_cnt;
 extern int prune_empty_dirs;
@@@@ -70,6 +67,7 @@@@ extern int use_safe_inc_flist;
 extern int need_unsorted_flist;
 extern int sender_symlink_iconv;
 extern int unsort_ndx;
+extern uid_t our_uid;
 extern struct stats stats;
 extern char *filesfrom_host;
d13 1
a13 12
@@@@ -1284,10 +1282,12 @@@@ struct file_struct *make_file(const char *fname, struc
 	}
 #endif
 	file->mode = st.st_mode;
-	if (uid_ndx) /* Check uid_ndx instead of preserve_uid for del support */
+	if (preserve_uid)
 		F_OWNER(file) = st.st_uid;
-	if (gid_ndx) /* Check gid_ndx instead of preserve_gid for del support */
+	if (preserve_gid)
 		F_GROUP(file) = st.st_gid;
+	if (am_generator && st.st_uid == our_uid)
+		file->flags |= FLAG_OWNED_BY_US;
d15 9
a23 27
 	if (basename != thisname)
 		file->dirname = lastdir;
@@@@ -3039,13 +3039,14 @@@@ char *f_name(const struct file_struct *f, char *fbuf)
  * of the dirname string, and also indicates that "dirname" is a MAXPATHLEN
  * buffer (the functions we call will append names onto the end, but the old
  * dir value will be restored on exit). */
-struct file_list *get_dirlist(char *dirname, int dlen, int ignore_filter_rules)
+struct file_list *get_dirlist(char *dirname, int dlen, int flags)
 {
 	struct file_list *dirlist;
 	char dirbuf[MAXPATHLEN];
 	int save_recurse = recurse;
 	int save_xfer_dirs = xfer_dirs;
 	int save_prune_empty_dirs = prune_empty_dirs;
+	int senddir_fd = flags & GDL_IGNORE_FILTER_RULES ? -2 : -1;
 
 	if (dlen < 0) {
 		dlen = strlcpy(dirbuf, dirname, MAXPATHLEN);
@@@@ -3058,7 +3059,7 @@@@ struct file_list *get_dirlist(char *dirname, int dlen,
 
 	recurse = 0;
 	xfer_dirs = 1;
-	send_directory(ignore_filter_rules ? -2 : -1, dirlist, dirname, dlen, FLAG_CONTENT_DIR);
+	send_directory(senddir_fd, dirlist, dirname, dlen, FLAG_CONTENT_DIR);
 	xfer_dirs = save_xfer_dirs;
 	recurse = save_recurse;
 	if (do_progress)
@


1.2.2.1
log
@Security fix for CVE-2011-1097:
rsync Incremental Recursion Memory Corruption Vulnerability

(already fixed in current's 3.0.8)

ok espie@@ (MAINTAINER)
@
text
@d1 11
a11 30
$OpenBSD$

Security fix for CVE-2011-1097:
rsync Incremental Recursion Memory Corruption Vulnerability

Patch from upstream git:
http://gitweb.samba.org/?p=rsync.git;a=patch;h=83b94efa6b60a3ff5eee4c5f7812c617a90a03f6;hp=c8255147b06b74dad940d32f9cef5fbe17595239

--- flist.c.orig	Sat Apr  9 10:49:12 2011
+++ flist.c	Sat Apr  9 10:49:09 2011
@@@@ -52,12 +52,9 @@@@ extern int preserve_hard_links;
 extern int preserve_devices;
 extern int preserve_specials;
 extern int delete_during;
-extern int uid_ndx;
-extern int gid_ndx;
 extern int eol_nulls;
 extern int relative_paths;
 extern int implied_dirs;
-extern int file_extra_cnt;
 extern int ignore_perishable;
 extern int non_perishable_cnt;
 extern int prune_empty_dirs;
@@@@ -70,6 +67,7 @@@@ extern int use_safe_inc_flist;
 extern int need_unsorted_flist;
 extern int sender_symlink_iconv;
 extern int unsort_ndx;
+extern uid_t our_uid;
 extern struct stats stats;
 extern char *filesfrom_host;
d13 1
a13 12
@@@@ -1284,10 +1282,12 @@@@ struct file_struct *make_file(const char *fname, struc
 	}
 #endif
 	file->mode = st.st_mode;
-	if (uid_ndx) /* Check uid_ndx instead of preserve_uid for del support */
+	if (preserve_uid)
 		F_OWNER(file) = st.st_uid;
-	if (gid_ndx) /* Check gid_ndx instead of preserve_gid for del support */
+	if (preserve_gid)
 		F_GROUP(file) = st.st_gid;
+	if (am_generator && st.st_uid == our_uid)
+		file->flags |= FLAG_OWNED_BY_US;
d15 9
a23 27
 	if (basename != thisname)
 		file->dirname = lastdir;
@@@@ -3039,13 +3039,14 @@@@ char *f_name(const struct file_struct *f, char *fbuf)
  * of the dirname string, and also indicates that "dirname" is a MAXPATHLEN
  * buffer (the functions we call will append names onto the end, but the old
  * dir value will be restored on exit). */
-struct file_list *get_dirlist(char *dirname, int dlen, int ignore_filter_rules)
+struct file_list *get_dirlist(char *dirname, int dlen, int flags)
 {
 	struct file_list *dirlist;
 	char dirbuf[MAXPATHLEN];
 	int save_recurse = recurse;
 	int save_xfer_dirs = xfer_dirs;
 	int save_prune_empty_dirs = prune_empty_dirs;
+	int senddir_fd = flags & GDL_IGNORE_FILTER_RULES ? -2 : -1;
 
 	if (dlen < 0) {
 		dlen = strlcpy(dirbuf, dirname, MAXPATHLEN);
@@@@ -3058,7 +3059,7 @@@@ struct file_list *get_dirlist(char *dirname, int dlen,
 
 	recurse = 0;
 	xfer_dirs = 1;
-	send_directory(ignore_filter_rules ? -2 : -1, dirlist, dirname, dlen, FLAG_CONTENT_DIR);
+	send_directory(senddir_fd, dirlist, dirname, dlen, FLAG_CONTENT_DIR);
 	xfer_dirs = save_xfer_dirs;
 	recurse = save_recurse;
 	if (do_progress)
@


1.1
log
@security fix from Sebastian Krahmer <krahmer@@suse.de>, taken from rsync CVS
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.2.1
log
@MFC:
update to 2.5.1
@
text
@d1 1
a1 1
$OpenBSD: patch-flist_c,v 1.1 2002/01/24 23:25:32 naddy Exp $
@


1.1.2.2
log
@MFC:
Update to 2.5.4: fixes zlib and supplementary groups security issues.
@
text
@d1 1
a1 1
$OpenBSD: patch-flist_c,v 1.1.2.1 2002/01/24 23:31:37 naddy Exp $
@


