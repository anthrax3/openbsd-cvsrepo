head	1.3;
access;
symbols
	OPENBSD_4_5:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2014.01.02.22.01.24;	author naddy;	state dead;
branches;
next	1.2;

1.2
date	2013.12.04.15.23.55;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.15.02.52.09;	author william;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2009.07.15.02.52.09;	author william;	state Exp;
branches;
next	;


desc
@@


1.3
log
@maintenance update to 7.34.0
@
text
@$OpenBSD: patch-include_curl_curl_h,v 1.2 2013/12/04 15:23:55 naddy Exp $
--- include/curl/curl.h.orig	Fri Sep 27 10:57:00 2013
+++ include/curl/curl.h	Wed Dec  4 14:22:58 2013
@@@@ -69,7 +69,7 @@@@
    require it! */
 #if defined(_AIX) || defined(__NOVELL_LIBC__) || defined(__NetBSD__) || \
     defined(__minix) || defined(__SYMBIAN32__) || defined(__INTEGRITY) || \
-    defined(ANDROID) || defined(__ANDROID__) || \
+    defined(ANDROID) || defined(__ANDROID__) || defined(__OpenBSD__) || \
    (defined(__FreeBSD_version) && (__FreeBSD_version < 800000))
 #include <sys/select.h>
 #endif
@


1.2
log
@use <sys/select.h> to get select() in a reliable, standards-compliant way
pointed out by kirby@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@file patch-include_curl_curl_h was initially added on branch OPENBSD_4_5.
@
text
@d1 12
@


1.1.2.1
log
@SECURITY FIX

Resolve CVE-2009-0037:
Rogue servers could trick curl into accessing local files

Patch adapted from debian

ok robert@@
@
text
@a0 47
$OpenBSD$

CVE-2009-0037:  Rogue servers could trick curl into accessing local files

--- include/curl/curl.h.orig	Fri Jan 16 02:10:24 2009
+++ include/curl/curl.h	Fri Jun  5 10:19:40 2009
@@@@ -536,6 +536,21 @@@@ typedef enum {
   CURLFTPMETHOD_LAST       /* not an option, never use */
 } curl_ftpmethod;
 
+/* CURLPROTO_ defines are for the CURLOPT_*PROTOCOLS options */
+#define CURLPROTO_HTTP   (1<<0)
+#define CURLPROTO_HTTPS  (1<<1)
+#define CURLPROTO_FTP    (1<<2)
+#define CURLPROTO_FTPS   (1<<3)
+#define CURLPROTO_SCP    (1<<4)
+#define CURLPROTO_SFTP   (1<<5)
+#define CURLPROTO_TELNET (1<<6)
+#define CURLPROTO_LDAP   (1<<7)
+#define CURLPROTO_LDAPS  (1<<8)
+#define CURLPROTO_DICT   (1<<9)
+#define CURLPROTO_FILE   (1<<10)
+#define CURLPROTO_TFTP   (1<<11)
+#define CURLPROTO_ALL    (~0) /* enable everything */
+
 /* long may be 32 or 64 bits, but we should never depend on anything else
    but 32 */
 #define CURLOPTTYPE_LONG          0
@@@@ -1149,6 +1164,18 @@@@ typedef enum {
     /* "name" and "pwd" to use with Proxy when fetching. */
   CINIT(PROXYUSERNAME, OBJECTPOINT, 175),
   CINIT(PROXYPASSWORD, OBJECTPOINT, 176),
+
+  /* set the bitmask for the protocols that are allowed to be used for the
+     transfer, which thus helps the app which takes URLs from users or other
+     external inputs and want to restrict what protocol(s) to deal
+     with. Defaults to CURLPROTO_ALL. */
+  CINIT(PROTOCOLS, LONG, 181),
+
+  /* set the bitmask for the protocols that libcurl is allowed to follow to,
+     as a subset of the CURLOPT_PROTOCOLS ones. That means the protocol needs
+     to be set in both bitmasks to be allowed to get redirected to. Defaults
+     to CURLPROTO_ALL & ~CURLPROTO_FILE. */
+  CINIT(REDIR_PROTOCOLS, LONG, 182),
 
   CURLOPT_LASTENTRY /* the last unused */
 } CURLoption;
@

