head	1.3;
access;
symbols
	OPENBSD_5_4:1.2.0.6
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.4
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.2
	OPENBSD_5_0:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2013.10.09.17.25.39;	author naddy;	state dead;
branches;
next	1.2;

1.2
date	2013.02.08.16.27.12;	author jasper;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2012.01.27.23.08.01;	author ajacoutot;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2012.01.27.23.08.01;	author ajacoutot;	state Exp;
branches;
next	;

1.2.2.1
date	2013.02.08.16.31.10;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update to 7.32.0.
No revolutionary changes; see http://curl.haxx.se/changes.html for
the details.
@
text
@$OpenBSD: patch-lib_smtp_c,v 1.2 2013/02/08 16:27:12 jasper Exp $

Security fix for CVE-2013-0249, smtp_state_authdigest_resp()
buffer overflow vulnerability.

Advisory:
http://curl.haxx.se/docs/adv_20130206.html

Backported from:
http://curl.haxx.se/curl-sasl.patch

--- lib/smtp.c.orig	Tue May 22 23:36:17 2012
+++ lib/smtp.c	Fri Feb  8 13:28:22 2013
@@@@ -964,7 +964,7 @@@@ static CURLcode smtp_state_authdigest_resp(struct conn
     snprintf(&HA1_hex[2 * i], 3, "%02x", digest[i]);
 
   /* Orepare URL string, append realm to the protocol */
-  strcat(uri, realm);
+  strlcat(uri, realm, sizeof(uri));
 
   /* Calculate H(A2) */
   ctxt = Curl_MD5_init(Curl_DIGEST_MD5);
@@@@ -1008,20 +1008,11 @@@@ static CURLcode smtp_state_authdigest_resp(struct conn
   for(i = 0; i < MD5_DIGEST_LEN; i++)
     snprintf(&resp_hash_hex[2 * i], 3, "%02x", digest[i]);
 
-  strcpy(response, "username=\"");
-  strcat(response, conn->user);
-  strcat(response, "\",realm=\"");
-  strcat(response, realm);
-  strcat(response, "\",nonce=\"");
-  strcat(response, nonce);
-  strcat(response, "\",cnonce=\"");
-  strcat(response, cnonce);
-  strcat(response, "\",nc=");
-  strcat(response, nonceCount);
-  strcat(response, ",digest-uri=\"");
-  strcat(response, uri);
-  strcat(response, "\",response=");
-  strcat(response, resp_hash_hex);
+  snprintf(response, sizeof(response),
+           "username=\"%s\",realm=\"%s\",nonce=\"%s\","
+           "cnonce=\"%s\",nc=\"%s\",digest-uri=\"%s\",response=%s",
+           conn->user, realm, nonce,
+           cnonce, nonceCount, uri, resp_hash_hex);
 
   /* Encode it to base64 and send it */
   result = Curl_base64_encode(data, response, 0, &rplyb64, &len);
@


1.2
log
@Security fix for CVE-2013-0249, smtp_state_authdigest_resp()
buffer overflow vulnerability.

Backported from upstream git.

ok naddy@@ (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2.2.1
log
@Security fix for CVE-2013-0249, smtp_state_authdigest_resp()
buffer overflow vulnerability.

Backported from upstream git.

ok naddy@@ (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_smtp_c,v 1.2 2013/02/08 16:27:12 jasper Exp $
@


1.1
log
@file patch-lib_smtp_c was initially added on branch OPENBSD_5_0.
@
text
@d1 48
@


1.1.2.1
log
@SECURITY fix for multiple vulnerabilities:
URL sanitize: reject URLs containing bad data (CVE-2012-0036)
OpenSSL: don't disable security work-around

ok sthen@@ naddy@@ (maintainer)
@
text
@a0 29
$OpenBSD$

From upstream: 75ca568fa1c19de4c5358fed246686de8467c238
URL sanitize: reject URLs containing bad data
CVE-2012-0036: http://curl.haxx.se/docs/adv_20120124.html

--- lib/smtp.c.orig	Mon May  9 10:20:30 2011
+++ lib/smtp.c	Fri Jan 27 08:42:17 2012
@@@@ -1099,7 +1099,6 @@@@ static CURLcode smtp_connect(struct connectdata *conn,
   struct SessionHandle *data=conn->data;
   struct pingpong *pp=&smtpc->pp;
   const char *path = conn->data->state.path;
-  int len;
   char localhost[1024 + 1];
 
   *done = FALSE; /* default to not done yet */
@@@@ -1171,9 +1170,9 @@@@ static CURLcode smtp_connect(struct connectdata *conn,
   }
 
   /* url decode the path and use it as domain with EHLO */
-  smtpc->domain = curl_easy_unescape(conn->data, path, 0, &len);
-  if(!smtpc->domain)
-    return CURLE_OUT_OF_MEMORY;
+  result = Curl_urldecode(conn->data, path, 0, &smtpc->domain, NULL, TRUE);
+  if(result)
+    return result;
 
   /* When we connect, we start in the state where we await the server greeting
    */
@

