head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.12
	OPENBSD_6_0:1.1.0.10
	OPENBSD_5_9:1.1.0.8
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_5:1.1.0.4
	OPENBSD_4_5:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2009.07.15.02.52.09;	author william;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1
	1.1.8.1
	1.1.10.1
	1.1.12.1;
next	;

1.1.2.1
date	2009.07.15.02.52.09;	author william;	state Exp;
branches;
next	;

1.1.4.1
date	2015.01.11.22.53.15;	author naddy;	state Exp;
branches;
next	;
commitid	HTkqIXpPaz4yHqG6;

1.1.6.1
date	2015.01.12.02.17.10;	author naddy;	state Exp;
branches;
next	;
commitid	tJBKky4C4oSbqx2b;

1.1.8.1
date	2016.08.03.22.04.40;	author naddy;	state Exp;
branches;
next	1.1.8.2;
commitid	w1tVN8qfx3AaO8h1;

1.1.8.2
date	2016.11.04.15.20.52;	author naddy;	state dead;
branches;
next	;
commitid	woi9VmGflxdFUwos;

1.1.10.1
date	2016.08.04.10.48.03;	author naddy;	state Exp;
branches;
next	1.1.10.2;
commitid	Cdkz6qSFEO9MccH1;

1.1.10.2
date	2016.11.04.14.09.36;	author naddy;	state dead;
branches;
next	;
commitid	j8vMfWnDLihMh9DN;

1.1.12.1
date	2017.04.25.16.51.23;	author naddy;	state Exp;
branches;
next	;
commitid	mz4zn4inwtI35Vir;


desc
@@


1.1
log
@file patch-lib_urldata_h was initially added on branch OPENBSD_4_5.
@
text
@@


1.1.12.1
log
@CVE-2017-7468: TLS session resumption client cert bypass (again)
@
text
@a0 22
$OpenBSD$

CVE-2017-7468: switch off SSL session id when client cert is used

--- lib/urldata.h.orig	Thu Feb 23 23:14:58 2017
+++ lib/urldata.h	Tue Apr 25 17:25:15 2017
@@@@ -359,6 +359,7 @@@@ struct ssl_primary_config {
   char *random_file;     /* path to file containing "random" data */
   char *egdsocket;       /* path to file containing the EGD daemon socket */
   char *cipher_list;     /* list of ciphers to use */
+  bool sessionid;        /* cache session IDs or not */
 };
 
 struct ssl_config_data {
@@@@ -388,7 +389,6 @@@@ struct ssl_config_data {
 };
 
 struct ssl_general_config {
-  bool sessionid; /* cache session IDs or not */
   size_t max_ssl_sessions; /* SSL session id cache size */
 };
 
@


1.1.10.1
log
@Security fixes:
CVE-2016-5419: TLS session resumption client cert bypass
CVE-2016-5420: Re-using connections with wrong client cert
CVE-2016-5421: use of connection struct after free
@
text
@a0 14
$OpenBSD$

CVE-2016-5419: TLS session resumption client cert bypass

--- lib/urldata.h.orig	Mon May 16 09:23:43 2016
+++ lib/urldata.h	Thu Aug  4 00:55:35 2016
@@@@ -353,6 +353,7 @@@@ struct ssl_config_data {
   char *CAfile;          /* certificate to verify peer against */
   const char *CRLfile;   /* CRL to check certificate revocation */
   const char *issuercert;/* optional issuer certificate filename */
+  char *clientcert;
   char *random_file;     /* path to file containing "random" data */
   char *egdsocket;       /* path to file containing the EGD daemon socket */
   char *cipher_list;     /* list of ciphers to use */
@


1.1.10.2
log
@Security update to 7.51.0.
CVE-2016-8615: cookie injection for other servers
CVE-2016-8616: case insensitive password comparison
CVE-2016-8617: OOB write via unchecked multiplication
CVE-2016-8618: double-free in curl_maprintf
CVE-2016-8619: double-free in krb5 code
CVE-2016-8620: glob parser write/read out of bounds
CVE-2016-8621: curl_getdate read out of bounds
CVE-2016-8622: URL unescape heap overflow via integer truncation
CVE-2016-8623: Use-after-free via shared cookies
CVE-2016-8624: invalid URL parsing with '#'
CVE-2016-8625: IDNA 2003 makes curl use wrong host

Note that this drops support for internationalized domain names.
ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_urldata_h,v 1.1.10.1 2016/08/04 10:48:03 naddy Exp $
@


1.1.8.1
log
@Security fixes:
CVE-2016-5419: TLS session resumption client cert bypass
CVE-2016-5420: Re-using connections with wrong client cert
CVE-2016-5421: use of connection struct after free
@
text
@a0 14
$OpenBSD$

CVE-2016-5419: TLS session resumption client cert bypass

--- lib/urldata.h.orig	Wed Dec 23 11:41:32 2015
+++ lib/urldata.h	Wed Aug  3 23:38:02 2016
@@@@ -370,6 +370,7 @@@@ struct ssl_config_data {
   char *CAfile;          /* certificate to verify peer against */
   const char *CRLfile;   /* CRL to check certificate revocation */
   const char *issuercert;/* optional issuer certificate filename */
+  char *clientcert;
   char *random_file;     /* path to file containing "random" data */
   char *egdsocket;       /* path to file containing the EGD daemon socket */
   char *cipher_list;     /* list of ciphers to use */
@


1.1.8.2
log
@Security update to 7.51.0.
CVE-2016-8615: cookie injection for other servers
CVE-2016-8616: case insensitive password comparison
CVE-2016-8617: OOB write via unchecked multiplication
CVE-2016-8618: double-free in curl_maprintf
CVE-2016-8619: double-free in krb5 code
CVE-2016-8620: glob parser write/read out of bounds
CVE-2016-8621: curl_getdate read out of bounds
CVE-2016-8622: URL unescape heap overflow via integer truncation
CVE-2016-8623: Use-after-free via shared cookies
CVE-2016-8624: invalid URL parsing with '#'
CVE-2016-8625: IDNA 2003 makes curl use wrong host

Note that this drops support for internationalized domain names.
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_urldata_h,v 1.1.8.1 2016/08/03 22:04:40 naddy Exp $
@


1.1.6.1
log
@Security fixes for
CVE-2014-3707: libcurl duphandle read out of bounds
CVE-2014-8150: URL request injection
@
text
@a0 32
$OpenBSD$

CVE-2014-3707: libcurl duphandle read out of bounds
http://curl.haxx.se/docs/adv_20141105.html

--- lib/urldata.h.orig	Tue May 20 10:25:58 2014
+++ lib/urldata.h	Mon Jan 12 02:03:37 2015
@@@@ -1358,7 +1358,6 @@@@ enum dupstring {
   STRING_KRB_LEVEL,       /* krb security level */
   STRING_NETRC_FILE,      /* if not NULL, use this instead of trying to find
                              $HOME/.netrc */
-  STRING_COPYPOSTFIELDS,  /* if POST, set the fields' values here */
   STRING_PROXY,           /* proxy to use */
   STRING_SET_RANGE,       /* range, if used */
   STRING_SET_REFERER,     /* custom string for the HTTP referer field */
@@@@ -1400,7 +1399,15 @@@@ enum dupstring {
 
   STRING_BEARER,          /* <bearer>, if used */
 
-  /* -- end of strings -- */
+  /* -- end of zero-terminated strings -- */
+
+  STRING_LASTZEROTERMINATED,
+
+  /* -- below this are pointers to binary data that cannot be strdup'ed.
+     Each such pointer must be added manually to Curl_dupset() --- */
+
+  STRING_COPYPOSTFIELDS,  /* if POST, set the fields' values here */
+
   STRING_LAST /* not used, just an end-of-list marker */
 };
 
@


1.1.4.1
log
@Security fixes for
CVE-2014-3707: libcurl duphandle read out of bounds
CVE-2014-8150: URL request injection
@
text
@a0 32
$OpenBSD$

CVE-2014-3707: libcurl duphandle read out of bounds 
http://curl.haxx.se/docs/adv_20141105.html

--- lib/urldata.h.orig	Mon Dec 16 23:02:35 2013
+++ lib/urldata.h	Sun Jan 11 21:51:13 2015
@@@@ -1332,7 +1332,6 @@@@ enum dupstring {
   STRING_KRB_LEVEL,       /* krb security level */
   STRING_NETRC_FILE,      /* if not NULL, use this instead of trying to find
                              $HOME/.netrc */
-  STRING_COPYPOSTFIELDS,  /* if POST, set the fields' values here */
   STRING_PROXY,           /* proxy to use */
   STRING_SET_RANGE,       /* range, if used */
   STRING_SET_REFERER,     /* custom string for the HTTP referer field */
@@@@ -1374,7 +1373,15 @@@@ enum dupstring {
 
   STRING_BEARER,          /* <bearer>, if used */
 
-  /* -- end of strings -- */
+  /* -- end of zero-terminated strings -- */
+
+  STRING_LASTZEROTERMINATED,
+
+  /* -- below this are pointers to binary data that cannot be strdup'ed.
+     Each such pointer must be added manually to Curl_dupset() --- */
+
+  STRING_COPYPOSTFIELDS,  /* if POST, set the fields' values here */
+
   STRING_LAST /* not used, just an end-of-list marker */
 };
 
@


1.1.2.1
log
@SECURITY FIX

Resolve CVE-2009-0037:
Rogue servers could trick curl into accessing local files

Patch adapted from debian

ok robert@@
@
text
@a0 56
$OpenBSD$

CVE-2009-0037:  Rogue servers could trick curl into accessing local files

--- lib/urldata.h.orig	Fri Jan 16 02:10:24 2009
+++ lib/urldata.h	Fri Jun  5 10:23:02 2009
@@@@ -894,20 +894,27 @@@@ struct connectdata {
   long connectindex; /* what index in the connection cache connects index this
                         particular struct has */
   long protocol; /* PROT_* flags concerning the protocol set */
-#define PROT_MISSING (1<<0)
-#define PROT_HTTP    (1<<2)
-#define PROT_HTTPS   (1<<3)
-#define PROT_FTP     (1<<4)
-#define PROT_TELNET  (1<<5)
-#define PROT_DICT    (1<<6)
-#define PROT_LDAP    (1<<7)
-#define PROT_FILE    (1<<8)
-#define PROT_FTPS    (1<<9)
-#define PROT_SSL     (1<<10) /* protocol requires SSL */
-#define PROT_TFTP    (1<<11)
-#define PROT_SCP     (1<<12)
-#define PROT_SFTP    (1<<13)
+#define PROT_HTTP    CURLPROTO_HTTP
+#define PROT_HTTPS   CURLPROTO_HTTPS
+#define PROT_FTP     CURLPROTO_FTP
+#define PROT_TELNET  CURLPROTO_TELNET
+#define PROT_DICT    CURLPROTO_DICT
+#define PROT_LDAP    CURLPROTO_LDAP
+#define PROT_FILE    CURLPROTO_FILE
+#define PROT_FTPS    CURLPROTO_FTPS
+#define PROT_TFTP    CURLPROTO_TFTP
+#define PROT_SCP     CURLPROTO_SCP
+#define PROT_SFTP    CURLPROTO_SFTP
 
+/* CURLPROTO_TFTP (1<<11) is currently the highest used bit in the public
+   bitmask. We make sure we use "private bits" above the first 16 to make
+   things easier. */
+
+#define PROT_EXTMASK 0xffff
+
+#define PROT_SSL     (1<<22) /* protocol requires SSL */
+#define PROT_MISSING (1<<23)
+
 #define PROT_CLOSEACTION PROT_FTP /* these ones need action before socket
                                      close */
 
@@@@ -1519,6 +1526,8 @@@@ struct UserDefined {
   bool proxy_transfer_mode; /* set transfer mode (;type=<a|i>) when doing FTP
                                via an HTTP proxy */
   char *str[STRING_LAST]; /* array of strings, pointing to allocated memory */
+  long allowed_protocols;
+  long redir_protocols;
   unsigned int scope;    /* address scope for IPv6 */
 };
 
@

