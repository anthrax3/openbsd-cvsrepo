head	1.1;
access;
symbols
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_7:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2015.04.30.23.18.27;	author naddy;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;
commitid	zXKzsZprdoQeh32Z;

1.1.2.1
date	2015.04.30.23.18.27;	author naddy;	state Exp;
branches;
next	1.1.2.2;
commitid	zXKzsZprdoQeh32Z;

1.1.2.2
date	2015.06.20.19.52.54;	author naddy;	state Exp;
branches;
next	;
commitid	Qu3ZDQxnp3vYUrrb;

1.1.4.1
date	2015.05.01.20.39.42;	author naddy;	state Exp;
branches;
next	;
commitid	Ij8k3y0w8XICbM4N;


desc
@@


1.1
log
@file patch-lib_http_c was initially added on branch OPENBSD_5_7.
@
text
@@


1.1.4.1
log
@Security fixes:
CVE-2015-3143: Re-using authenticated connection when unauthenticated
CVE-2015-3144: host name out of boundary memory access
CVE-2015-3145: cookie parser out of boundary memory access
CVE-2015-3148: Negotiate not treated as connection-oriented
CVE-2015-3153: sensitive HTTP server headers also sent to proxies

Backport for CVE-2015-3148 from Ubuntu.
@
text
@a0 29
$OpenBSD$

CVE-2015-3148: Negotiate not treated as connection-oriented
http://curl.haxx.se/docs/adv_20150422B.html
Backported from:
https://github.com/bagder/curl/commit/f78ae415d24b9bd89d6c121c556e411fdb21c6aa
https://github.com/bagder/curl/commit/79b9d5f1a42578f807a6c94914bc65cbaa304b6d

--- lib/http.c.orig	Tue May 20 19:16:53 2014
+++ lib/http.c	Fri May  1 21:25:00 2015
@@@@ -1442,6 +1442,18 @@@@ CURLcode Curl_http_done(struct connectdata *conn,
 
   Curl_unencode_cleanup(conn);
 
+#ifdef USE_HTTP_NEGOTIATE
+  if(data->state.proxyneg.state == GSS_AUTHSENT ||
+     data->state.negotiate.state == GSS_AUTHSENT) {
+    /* add forbid re-use if http-code != 401/407 as a WA only needed for
+     * 401/407 that signal auth failure (empty) otherwise state will be RECV
+     * with current code */
+    if((data->req.httpcode != 401) && (data->req.httpcode != 407))
+      connclose(conn, "Negotiate transfer completed");
+    Curl_cleanup_negotiate(data);
+  }
+#endif
+
   /* set the proper values (possibly modified on POST) */
   conn->fread_func = data->set.fread_func; /* restore */
   conn->fread_in = data->set.in; /* restore */
@


1.1.2.1
log
@Security fixes:
CVE-2015-3143: Re-using authenticated connection when unauthenticated
CVE-2015-3144: host name out of boundary memory access
CVE-2015-3145: cookie parser out of boundary memory access
CVE-2015-3148: Negotiate not treated as connection-oriented
CVE-2015-3153: sensitive HTTP server headers also sent to proxies
@
text
@a0 23
$OpenBSD$

CVE-2015-3148: Negotiate not treated as connection-oriented
http://curl.haxx.se/docs/adv_20150422B.html

--- lib/http.c.orig	Fri Dec 26 23:02:54 2014
+++ lib/http.c	Thu Apr 30 23:56:59 2015
@@@@ -1493,8 +1493,14 @@@@ CURLcode Curl_http_done(struct connectdata *conn,
 
 #ifdef USE_SPNEGO
   if(data->state.proxyneg.state == GSS_AUTHSENT ||
-      data->state.negotiate.state == GSS_AUTHSENT)
+      data->state.negotiate.state == GSS_AUTHSENT) {
+    /* add forbid re-use if http-code != 401 as a WA
+     * only needed for 401 that failed handling
+     * otherwie state will be RECV with current code */
+    if((data->req.httpcode != 401) && (data->req.httpcode != 407))
+      connclose(conn, "Negotiate transfer completed");
     Curl_cleanup_negotiate(data);
+  }
 #endif
 
   /* set the proper values (possibly modified on POST) */
@


1.1.2.2
log
@Security fixes:
CVE-2015-3236: lingering HTTP credentials in connection re-use
CVE-2015-3237: SMB send off unrelated memory contents
@
text
@d1 1
a1 1
$OpenBSD: patch-lib_http_c,v 1.1.2.1 2015/04/30 23:18:27 naddy Exp $
a5 3
CVE-2015-3236: lingering HTTP credentials in connection re-use
http://curl.haxx.se/docs/adv_20150617A.html

d7 1
a7 1
+++ lib/http.c	Sat Jun 20 21:15:56 2015
a23 25
@@@@ -2327,20 +2333,12 @@@@ CURLcode Curl_http(struct connectdata *conn, bool *don
                      te
       );
 
-  /*
-   * Free userpwd for Negotiate/NTLM. Cannot reuse as it is associated with
-   * the connection and shouldn't be repeated over it either.
-   */
-  switch (data->state.authhost.picked) {
-  case CURLAUTH_NEGOTIATE:
-  case CURLAUTH_NTLM:
-  case CURLAUTH_NTLM_WB:
-    Curl_safefree(conn->allocptr.userpwd);
-    break;
-  }
+  /* clear userpwd to avoid re-using credentials from re-used connections */
+  Curl_safefree(conn->allocptr.userpwd);
 
   /*
-   * Same for proxyuserpwd
+   * Free proxyuserpwd for Negotiate/NTLM. Cannot reuse as it is associated
+   * with the connection and shouldn't be repeated over it either.
    */
   switch (data->state.authproxy.picked) {
   case CURLAUTH_NEGOTIATE:
@


