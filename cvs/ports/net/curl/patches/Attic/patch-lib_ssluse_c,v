head	1.2;
access;
symbols
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_5:1.2.0.2;
locks; strict;
comment	@# @;


1.2
date	2002.06.15.04.27.35;	author brad;	state dead;
branches
	1.2.2.1
	1.2.4.1
	1.2.6.1
	1.2.8.1
	1.2.10.1;
next	1.1;

1.1
date	2002.06.09.18.36.38;	author brad;	state Exp;
branches;
next	;

1.2.2.1
date	2009.09.15.02.34.56;	author william;	state Exp;
branches;
next	;

1.2.4.1
date	2009.11.06.01.42.18;	author william;	state Exp;
branches;
next	;

1.2.6.1
date	2012.01.27.23.08.01;	author ajacoutot;	state Exp;
branches;
next	;

1.2.8.1
date	2013.11.26.16.24.09;	author naddy;	state Exp;
branches;
next	;

1.2.10.1
date	2013.11.26.16.27.55;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@upgrade to cURL 7.9.8
@
text
@$OpenBSD: patch-lib_ssluse_c,v 1.1 2002/06/09 18:36:38 brad Exp $
--- lib/ssluse.c.orig	Tue Mar 19 00:54:55 2002
+++ lib/ssluse.c	Sun Jun  9 12:30:08 2002
@@@@ -55,6 +55,15 @@@@
 #undef HAVE_USERDATA_IN_PWD_CALLBACK
 #endif
 
+#if OPENSSL_VERSION_NUMBER >= 0x00907001L
+/* ENGINE_load_private_key() takes four arguments */
+#define HAVE_ENGINE_LOAD_FOUR_ARGS
+#else
+/* ENGINE_load_private_key() takes three arguments */
+#undef HAVE_ENGINE_LOAD_FOUR_ARGS
+#endif
+
+
 #ifndef HAVE_USERDATA_IN_PWD_CALLBACK
 static char global_passwd[64];
 #endif
@@@@ -283,11 +292,17 @@@@ int cert_stuff(struct connectdata *conn,
       {                         /* XXXX still needs some work */
         EVP_PKEY *priv_key = NULL;
         if (conn && conn->data && conn->data->engine) {
+#ifdef HAVE_ENGINE_LOAD_FOUR_ARGS
+          UI_METHOD *ui_method = UI_OpenSSL();
+#endif
           if (!key_file || !key_file[0]) {
             failf(data, "no key set to load from crypto engine\n");
             return 0;
           }
           priv_key = ENGINE_load_private_key(conn->data->engine,key_file,
+#ifdef HAVE_ENGINE_LOAD_FOUR_ARGS
+                                             ui_method,
+#endif
                                              data->set.key_passwd);
           if (!priv_key) {
             failf(data, "failed to load private key from crypto engine\n");
@


1.2.10.1
log
@Security fix: libcurl cert name check ignore (CVE-2013-4545)
http://curl.haxx.se/docs/adv_20131115.html

ok sthen@@
@
text
@d1 6
a6 10
$OpenBSD$

Security fix for CVE-2013-4545: libcurl cert name check ignore
http://curl.haxx.se/docs/adv_20131115.html

--- lib/ssluse.c.orig	Wed Apr 25 17:29:20 2012
+++ lib/ssluse.c	Mon Nov 25 18:54:52 2013
@@@@ -2471,7 +2471,7 @@@@ ossl_connect_step3(struct connectdata *conn,
    * operations.
    */
d8 30
a37 5
-  if(!data->set.ssl.verifypeer)
+  if(!data->set.ssl.verifypeer && !data->set.ssl.verifyhost)
     (void)servercert(conn, connssl, FALSE);
   else
     retcode = servercert(conn, connssl, TRUE);
@


1.2.8.1
log
@Security fix: libcurl cert name check ignore (CVE-2013-4545)
http://curl.haxx.se/docs/adv_20131115.html

ok sthen@@, jasper@@
@
text
@d1 6
a6 10
$OpenBSD$

Security fix for CVE-2013-4545: libcurl cert name check ignore
http://curl.haxx.se/docs/adv_20131115.html

--- lib/ssluse.c.orig	Wed Apr 25 17:29:20 2012
+++ lib/ssluse.c	Mon Nov 25 18:54:52 2013
@@@@ -2471,7 +2471,7 @@@@ ossl_connect_step3(struct connectdata *conn,
    * operations.
    */
d8 30
a37 5
-  if(!data->set.ssl.verifypeer)
+  if(!data->set.ssl.verifypeer && !data->set.ssl.verifyhost)
     (void)servercert(conn, connssl, FALSE);
   else
     retcode = servercert(conn, connssl, TRUE);
@


1.2.6.1
log
@SECURITY fix for multiple vulnerabilities:
URL sanitize: reject URLs containing bad data (CVE-2012-0036)
OpenSSL: don't disable security work-around

ok sthen@@ naddy@@ (maintainer)
@
text
@d1 6
a6 21
$OpenBSD$

From 33feba63fc645f4db5e3c18a54203252c172314f Mon Sep 17 00:00:00 2001
From: Daniel Stenberg <daniel@@haxx.se>
Date: Thu, 19 Jan 2012 20:07:44 +0100
Subject: [PATCH] OpenSSL: don't disable security work-around
(http://www.mail-archive.com/curl-library@@cool.haxx.se/msg11883.html)

--- lib/ssluse.c.orig	Mon Jun  6 22:10:13 2011
+++ lib/ssluse.c	Fri Jan 27 08:31:55 2012
@@@@ -1425,6 +1425,7 @@@@ ossl_connect_step1(struct connectdata *conn,
   X509_LOOKUP *lookup=NULL;
   curl_socket_t sockfd = conn->sock[sockindex];
   struct ssl_connect_data *connssl = &conn->ssl[sockindex];
+  long ctx_options;
 #ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME
   bool sni;
 #ifdef ENABLE_IPV6
@@@@ -1526,16 +1527,27 @@@@ ossl_connect_step1(struct connectdata *conn,
      If someone writes an application with libcurl and openssl who wants to
      enable the feature, one can do this in the SSL callback.
d8 7
a14 8
+     OpenSSL added a work-around for a SSL 3.0/TLS 1.0 CBC vulnerability
+     (http://www.openssl.org/~bodo/tls-cbc.txt). In 0.9.6e they added a bit to
+     SSL_OP_ALL that _disables_ that work-around despite the fact that
+     SSL_OP_ALL is documented to do "rather harmless" workarounds. In order to
+     keep the secure work-around, the SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS bit
+     must not be set.
+
   */
a15 1
+  ctx_options = SSL_OP_ALL;
d17 2
a18 7
 #ifdef SSL_OP_NO_TICKET
   /* expect older openssl releases to not have this define so only use it if
      present */
-#define CURL_CTX_OPTIONS SSL_OP_ALL|SSL_OP_NO_TICKET
-#else
-#define CURL_CTX_OPTIONS SSL_OP_ALL
+  ctx_options |= SSL_OP_NO_TICKET;
d20 6
a25 2
+#ifdef SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
+  ctx_options &= ~SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS;
d27 11
a37 6
 
-  SSL_CTX_set_options(connssl->ctx, CURL_CTX_OPTIONS);
+  SSL_CTX_set_options(connssl->ctx, ctx_options);
 
   /* disable SSLv2 in the default case (i.e. allow SSLv3 and TLSv1) */
   if(data->set.ssl.version == CURL_SSLVERSION_DEFAULT)
@


1.2.4.1
log
@SECURITY FIX

Fixes libcurl embedded zero in cert name vulnerability, CVE-2009-2417.

ok naddy@@
@
text
@d1 6
a6 12
CVE-2009-2417:  libcurl embedded zero in cert name


$OpenBSD$
--- lib/ssluse.c.orig	Mon May  4 17:57:14 2009
+++ lib/ssluse.c	Mon Nov  2 21:30:36 2009
@@@@ -1092,7 +1092,7 @@@@ static CURLcode verifyhost(struct connectdata *conn,
       if(check->type == target) {
         /* get data and length */
         const char *altptr = (char *)ASN1_STRING_data(check->d.ia5);
-        size_t altlen;
+        size_t altlen = (size_t) ASN1_STRING_length(check->d.ia5);
d8 22
a29 41
         switch(target) {
         case GEN_DNS: /* name/pattern comparison */
@@@@ -1106,14 +1106,16 @@@@ static CURLcode verifyhost(struct connectdata *conn,
              "I checked the 0.9.6 and 0.9.8 sources before my patch and
              it always 0-terminates an IA5String."
           */
-          if(cert_hostcheck(altptr, conn->host.name))
+          if((altlen == strlen(altptr)) &&
+             /* if this isn't true, there was an embedded zero in the name
+                string and we cannot match it. */
+             cert_hostcheck(altptr, conn->host.name))
             matched = TRUE;
           break;
 
         case GEN_IPADD: /* IP address comparison */
           /* compare alternative IP address if the data chunk is the same size
              our server IP address is */
-          altlen = (size_t) ASN1_STRING_length(check->d.ia5);
           if((altlen == addrlen) && !memcmp(altptr, &addr, altlen))
             matched = TRUE;
           break;
@@@@ -1153,18 +1155,27 @@@@ static CURLcode verifyhost(struct connectdata *conn,
          string manually to avoid the problem. This code can be made
          conditional in the future when OpenSSL has been fixed. Work-around
          brought by Alexis S. L. Carvalho. */
-      if(tmp && ASN1_STRING_type(tmp) == V_ASN1_UTF8STRING) {
-        j = ASN1_STRING_length(tmp);
-        if(j >= 0) {
-          peer_CN = OPENSSL_malloc(j+1);
-          if(peer_CN) {
-            memcpy(peer_CN, ASN1_STRING_data(tmp), j);
-            peer_CN[j] = '\0';
+      if(tmp) {
+        if(ASN1_STRING_type(tmp) == V_ASN1_UTF8STRING) {
+          j = ASN1_STRING_length(tmp);
+          if(j >= 0) {
+            peer_CN = OPENSSL_malloc(j+1);
+            if(peer_CN) {
+              memcpy(peer_CN, ASN1_STRING_data(tmp), j);
+              peer_CN[j] = '\0';
+            }
d31 7
a37 28
         }
+        else /* not a UTF8 name */
+          j = ASN1_STRING_to_UTF8(&peer_CN, tmp);
+
+        if(peer_CN && ((int)strlen((char *)peer_CN) != j)) {
+          /* there was a terminating zero before the end of string, this
+             cannot match and we return failure! */
+          failf(data, "SSL: illegal cert name field");
+          res = CURLE_PEER_FAILED_VERIFICATION;
+        }
       }
-      else /* not a UTF8 name */
-        j = ASN1_STRING_to_UTF8(&peer_CN, tmp);
     }
 
     if(peer_CN == nulstr)
@@@@ -1182,7 +1193,10 @@@@ static CURLcode verifyhost(struct connectdata *conn,
     }
 #endif /* CURL_DOES_CONVERSIONS */
 
-    if(!peer_CN) {
+    if(res)
+      /* error already detected, pass through */
+      ;
+    else if(!peer_CN) {
       failf(data,
             "SSL: unable to obtain common name from peer certificate");
       return CURLE_PEER_FAILED_VERIFICATION;
@


1.2.2.1
log
@SECURITY FIX

Resolve CVE-2009-2417, from upstream

ok jasper@@
@
text
@d1 6
a6 12
CVE-2009-2417:  libcurl embedded zero in cert name


$OpenBSD$
--- lib/ssluse.c.orig	Mon Dec 29 16:13:15 2008
+++ lib/ssluse.c	Fri Sep  4 09:22:02 2009
@@@@ -1084,7 +1084,7 @@@@ static CURLcode verifyhost(struct connectdata *conn,
       if(check->type == target) {
         /* get data and length */
         const char *altptr = (char *)ASN1_STRING_data(check->d.ia5);
-        int altlen;
+        size_t altlen = (size_t) ASN1_STRING_length(check->d.ia5);
d8 22
a29 41
         switch(target) {
         case GEN_DNS: /* name/pattern comparison */
@@@@ -1098,14 +1098,16 @@@@ static CURLcode verifyhost(struct connectdata *conn,
              "I checked the 0.9.6 and 0.9.8 sources before my patch and
              it always 0-terminates an IA5String."
           */
-          if(cert_hostcheck(altptr, conn->host.name))
+          if((altlen == strlen(altptr)) &&
+             /* if this isn't true, there was an embedded zero in the name
+                string and we cannot match it. */
+             cert_hostcheck(altptr, conn->host.name))
             matched = TRUE;
           break;
 
         case GEN_IPADD: /* IP address comparison */
           /* compare alternative IP address if the data chunk is the same size
              our server IP address is */
-          altlen = ASN1_STRING_length(check->d.ia5);
           if((altlen == addrlen) && !memcmp(altptr, &addr, altlen))
             matched = TRUE;
           break;
@@@@ -1145,18 +1147,27 @@@@ static CURLcode verifyhost(struct connectdata *conn,
          string manually to avoid the problem. This code can be made
          conditional in the future when OpenSSL has been fixed. Work-around
          brought by Alexis S. L. Carvalho. */
-      if(tmp && ASN1_STRING_type(tmp) == V_ASN1_UTF8STRING) {
-        j = ASN1_STRING_length(tmp);
-        if(j >= 0) {
-          peer_CN = OPENSSL_malloc(j+1);
-          if(peer_CN) {
-            memcpy(peer_CN, ASN1_STRING_data(tmp), j);
-            peer_CN[j] = '\0';
+      if(tmp) {
+        if(ASN1_STRING_type(tmp) == V_ASN1_UTF8STRING) {
+          j = ASN1_STRING_length(tmp);
+          if(j >= 0) {
+            peer_CN = OPENSSL_malloc(j+1);
+            if(peer_CN) {
+              memcpy(peer_CN, ASN1_STRING_data(tmp), j);
+              peer_CN[j] = '\0';
+            }
d31 7
a37 28
         }
+        else /* not a UTF8 name */
+          j = ASN1_STRING_to_UTF8(&peer_CN, tmp);
+
+        if(peer_CN && ((int)strlen((char *)peer_CN) != j)) {
+          /* there was a terminating zero before the end of string, this
+             cannot match and we return failure! */
+          failf(data, "SSL: illegal cert name field");
+          res = CURLE_PEER_FAILED_VERIFICATION;
+        }
       }
-      else /* not a UTF8 name */
-        j = ASN1_STRING_to_UTF8(&peer_CN, tmp);
     }
 
     if(peer_CN == nulstr)
@@@@ -1174,7 +1185,10 @@@@ static CURLcode verifyhost(struct connectdata *conn,
     }
 #endif /* CURL_DOES_CONVERSIONS */
 
-    if(!peer_CN) {
+    if(res)
+      /* error already detected, pass through */
+      ;
+    else if(!peer_CN) {
       failf(data,
             "SSL: unable to obtain common name from peer certificate");
       return CURLE_PEER_FAILED_VERIFICATION;
@


1.1
log
@upgrade to cURL 7.9.7 + experimental patch to fix cURL with newer OpenSSL.
--
Original patch from: Jacob Meuser <jakemsr@@jakemsr.com>
This patch (which has been modified to also work
with older versions of OpenSSL) from: Daniel Stenberg <daniel@@haxx.se>
@
text
@d1 1
a1 1
$OpenBSD$
@

