head	1.4;
access;
symbols
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2017.04.14.21.53.06;	author dhill;	state Exp;
branches;
next	1.3;
commitid	sy0TqJryCUzejqPM;

1.3
date	2016.10.12.11.39.27;	author sthen;	state Exp;
branches;
next	1.2;
commitid	FzayRyKftP1vzmkC;

1.2
date	2006.06.26.20.39.16;	author aanriot;	state dead;
branches;
next	1.1;

1.1
date	2006.02.02.18.49.17;	author jakob;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fix mtr -u ipv6-target.  mtr code says "sendto() assumes packet length
includes the IPv4 header but not the IPv6 header."  Remove that
assumption and always include the IPv6 header length in the total
packet size.

ok sthen@@
@
text
@$OpenBSD: patch-net_c,v 1.3 2016/10/12 11:39:27 sthen Exp $
--- net.c.orig	Mon Aug  1 09:07:58 2016
+++ net.c	Fri Apr 14 10:37:33 2017
@@@@ -428,6 +428,7 @@@@ void net_send_tcp(int index)
   connect(s, (struct sockaddr *) &remote, len);
 }
 
+#ifdef IPPROTO_SCTP
 /*  Attempt to connect to a SCTP port with a TTL */
 void net_send_sctp(int index)
 {
@@@@ -544,6 +545,7 @@@@ void net_send_sctp(int index)
 
   connect(s, (struct sockaddr *) &remote, len);
 }
+#endif
 
 /*  Attempt to find the host at a particular number of hops away  */
 void net_send_query(int index) 
@@@@ -553,10 +555,12 @@@@ void net_send_query(int index) 
     return;
   }
   
+#ifdef IPPROTO_SCTP
   if (mtrtype == IPPROTO_SCTP) {
     net_send_sctp(index);
     return;
   }
+#endif
 
   /*ok  char packet[sizeof(struct IPHeader) + sizeof(struct ICMPHeader)];*/
   char packet[MAXPACKET];
@@@@ -724,10 +728,7 @@@@ void net_send_query(int index) 
 #endif
   }
 
-  /* sendto() assumes packet length includes the IPv4 header but not the 
-     IPv6 header. */
-  spacketsize = abs(packetsize)	-
-		( ( af == AF_INET ) ? 0 : sizeof (struct ip6_hdr) );
+  spacketsize = abs(packetsize);	
   rv = sendto(sendsock, packet, spacketsize, 0, remotesockaddr, salen);
   if (first && (rv < 0) && ((errno == EINVAL) || (errno == EMSGSIZE))) {
     /* Try the first packet again using host byte order. */
@@@@ -872,7 +873,9 @@@@ void net_process_return(void) 
   struct ICMPHeader *header = NULL;
   struct UDPHeader *udpheader = NULL;
   struct TCPHeader *tcpheader = NULL;
+#ifdef IPPROTO_SCTP
   struct SCTPHeader *sctpheader = NULL;
+#endif
   struct timeval now;
   ip_t * fromaddress = NULL;
   int echoreplytype = 0, timeexceededtype = 0, unreachabletype = 0;
@@@@ -1046,6 +1049,7 @@@@ void net_process_return(void) 
     }
     break;
     
+#ifdef IPPROTO_SCTP
   case IPPROTO_SCTP:
     if (header->type == timeexceededtype || header->type == unreachabletype) {
       switch ( af ) {
@@@@ -1082,6 +1086,7 @@@@ void net_process_return(void) 
       sequence = ntohs(sctpheader->srcport);
     }
     break;
+#endif
   }
   if (sequence)
     net_process_ping (sequence, mpls, (void *) fromaddress, now);
@


1.3
log
@update to mtr-0.87
@
text
@d1 3
a3 3
$OpenBSD$
--- net.c.orig	Mon Aug  1 14:07:58 2016
+++ net.c	Wed Oct 12 12:25:44 2016
d33 13
a45 1
@@@@ -872,7 +876,9 @@@@ void net_process_return(void) 
d55 1
a55 1
@@@@ -1046,6 +1052,7 @@@@ void net_process_return(void) 
d63 1
a63 1
@@@@ -1082,6 +1089,7 @@@@ void net_process_return(void) 
@


1.2
log
@maintenance update to 0.71, some changes have been merged upstream.

ok jakob@@
@
text
@d1 43
a43 4
--- net.c.orig	Thu Jan 13 08:13:53 2005
+++ net.c	Wed Nov 16 19:43:05 2005
@@@@ -277,7 +277,7 @@@@
       exit( EXIT_FAILURE);
a44 3
     echotype = ICMP6_ECHO_REQUEST;
-    salen = sizeof (struct sockaddr_storage);
+    salen = sizeof (struct sockaddr_in6);
d46 7
a52 8
 #endif
   }
@@@@ -305,7 +305,6 @@@@
     rv = sendto(sendsock, packet, abs(packetsize), 0, 
 		remotesockaddr, salen);
     if (rv >= 0) {
-      fprintf (stderr, "You've got a broken (FreeBSD?) system\n");
       BSDfix = 1;
d54 2
d57 2
a58 9
@@@@ -346,7 +345,7 @@@@
     addrcpy( (void *) &(host[index].addrs[0]), addr, af );
   } else {
     for( i=0; i<MAXPATH; ) {
-      if( addrcmp( (void *) &(host[index].addrs[i]), (void *) &addr,
+      if( addrcmp( (void *) &(host[index].addrs[i]), addr,
                    af ) == 0 ||
           addrcmp( (void *) &(host[index].addrs[i]),
 		   (void *) &unspec_addr, af ) == 0 ) break;
@


1.1
log
@v0.69 with IPv6 support; contributed by David Hill
@
text
@@

