head	1.2;
access;
symbols
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2014.02.10.17.43.15;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2012.07.16.07.39.31;	author giovanni;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update nmap to 6.40, and build with their bundled libpcap for now, bpf_timeval
patches are questionable and there's a timing-related problem to track down.
From giovanni@@ (maintainer) a while ago. Add a fix from jca@@ to fix a floating-
point related assertion failure seen on i386, reminded by zhuk@@. Committing the
update rather than the minimal assertion-fix diff as it has been more
extensively tested in the past (then slipped through the cracks), jasper@@
agrees. OK jasper@@ giovanni@@
@
text
@$OpenBSD: patch-nsock_src_nsock_pool_c,v 1.1 2012/07/16 07:39:31 giovanni Exp $
--- nsock/src/nsock_pool.c.orig	Fri May 25 10:21:45 2012
+++ nsock/src/nsock_pool.c	Fri May 25 10:22:23 2012
@@@@ -123,7 +123,7 @@@@ void *nsp_getud(nsock_pool nsp) {
  * everything.  The basetime can be NULL to print trace lines with the current
  * time, otherwise the difference between the current time and basetime will be
  * used (the time program execution starts would be a good candidate) */
-void nsp_settrace(nsock_pool nsp, FILE *file, int level, const struct timeval *basetime) {
+void nsp_settrace(nsock_pool nsp, FILE *file, int level, const struct bpf_timeval *basetime) {
   mspool *mt = (mspool *)nsp;
 
   if (file == NULL)
@@@@ -134,7 +134,7 @@@@ void nsp_settrace(nsock_pool nsp, FILE *file, int leve
   mt->tracelevel = level;
 
   if (!basetime)
-    memset(&mt->tracebasetime, 0, sizeof(struct timeval));
+    memset(&mt->tracebasetime, 0, sizeof(struct bpf_timeval));
   else
     mt->tracebasetime = *basetime;
 }
@


1.1
log
@
Major update to 6.01
tests & ok benoit@@, thanks
@
text
@d1 1
a1 1
$OpenBSD$
@

