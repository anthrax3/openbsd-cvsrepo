head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.46
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.42
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.44
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.40
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.38
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.36
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.34
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.32
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.30
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.28
	OPENBSD_5_0:1.1.1.1.0.26
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.24
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.22
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.20
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.18
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.16
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.14
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.12
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.10
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.8
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.6
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.4
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.2
	OPENBSD_3_8_BASE:1.1.1.1
	mjc_20050526:1.1.1.1
	mjc:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.05.27.05.31.24;	author mjc;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.05.27.05.31.24;	author mjc;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- src/injection.c.orig	Tue Apr 13 18:48:04 2004
+++ src/injection.c	Tue May 24 02:23:44 2005
@@@@ -108,6 +108,7 @@@@ with_response(u_int32_t port_range)
 
     struct bpf_program bpf;
     struct timespec n_sleep;
+    struct timeval tmp_tv;
 
 #ifdef DEBUG
     fprintf(stdout, "DEBUG: with_response()\n");
@@@@ -220,7 +221,9 @@@@ start:
         if(!inject_packet())
             fatal_error("Unable to inject packet");
       
-        gettimeofday(&bf_pcap, NULL);
+        gettimeofday(&tmp_tv, NULL);
+        bf_pcap.tv_sec = (u_int32_t)tmp_tv.tv_sec;
+        bf_pcap.tv_usec = (u_int32_t)tmp_tv.tv_usec;
 
         if(p_mode != M_TRACE)
         {
@@@@ -246,7 +249,9 @@@@ start:
             if(dth_r > 0)
                 break;
 
-            gettimeofday(&af_pcap, NULL);
+            gettimeofday(&tmp_tv, NULL);
+            af_pcap.tv_sec = (u_int32_t)tmp_tv.tv_sec;
+            af_pcap.tv_usec = (u_int32_t)tmp_tv.tv_usec;
 
 #ifdef DEBUG
             fprintf(stdout, "DEBUG: dispatch time: %ld.%ld\n", 
@@@@ -308,12 +313,14 @@@@ without_response(u_int32_t port_range)
 {
     u_int64_t i;
     u_int32_t dstp = 0;
-
+    struct timeval tmp_tv;
 #ifdef DEBUG
     fprintf(stdout, "DEBUG: without_response()\n");
 #endif
 
-    gettimeofday(&bf_pcap, NULL);
+    gettimeofday(&tmp_tv, NULL);
+    bf_pcap.tv_sec = (u_int32_t)tmp_tv.tv_sec;
+    bf_pcap.tv_usec = (u_int32_t)tmp_tv.tv_usec;
 
     if(cnt == 0) dstp = cnt = 1; 
 
@@@@ -357,7 +364,9 @@@@ without_response(u_int32_t port_range)
             }
         }
 
-        gettimeofday(&af_pcap, NULL);
+        gettimeofday(&tmp_tv, NULL);
+        af_pcap.tv_sec = (u_int32_t)tmp_tv.tv_sec;
+        af_pcap.tv_usec = (u_int32_t)tmp_tv.tv_usec;
 
         libnet_clear_packet(pkt_d);
 
@


1.1.1.1
log
@packit is a really neato little packet injection tool.
ok pvalchev@@
@
text
@@
