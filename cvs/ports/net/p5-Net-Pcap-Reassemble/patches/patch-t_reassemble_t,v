head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.22
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.20
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.18
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.14
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.16
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.12
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.10
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.8
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.6
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.4
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	okan_20120416:1.1.1.1
	okan:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2012.04.16.20.13.25;	author okan;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.04.16.20.13.25;	author okan;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

test 7 requires DLT_LINUX_SLL

--- t/reassemble.t.orig	Thu May 13 12:27:05 2010
+++ t/reassemble.t	Mon Apr 16 13:57:26 2012
@@@@ -9,7 +9,7 @@@@
 # Change 1..1 below to 1..last_test_to_print .
 # (It may become useful if the test is moved to ./t subdirectory.)
 
-BEGIN { $| = 1; print "1..7\n"; }
+BEGIN { $| = 1; print "1..6\n"; }
 END {print "not ok 1\n" unless $loaded;}
 use Net::Pcap::Reassemble;
 $loaded = 1;
@@@@ -90,6 +90,7 @@@@ if (!defined($pcap_t)) {
 }
 print "ok 6\n";
 
+=head
 #
 # Test 7: Read from a LINUX_SLL dump file. It contains one whole datagram
 #         and one datagram in three fragments. The callback should
@


1.1.1.1
log
@import p5-Net-Pcap-Reassemble

Net::Pcap::Reassemble performs reassembly of fragmented datagrams in
libpcap packet capture data returned by the Net::Pcap loop() function.
Net::Pcap::Reassemble module supports reassembly of IPv4 and IPv6
fragments.

feedback and OK sthen@@
@
text
@@
