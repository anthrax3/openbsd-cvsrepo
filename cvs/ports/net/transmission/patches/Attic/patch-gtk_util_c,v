head	1.8;
access;
symbols
	OPENBSD_4_6:1.6.0.2
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@# @;


1.8
date	2009.10.30.18.08.47;	author naddy;	state dead;
branches;
next	1.7;

1.7
date	2009.09.06.15.03.18;	author naddy;	state Exp;
branches;
next	1.6;

1.6
date	2009.05.10.19.31.44;	author naddy;	state Exp;
branches;
next	1.5;

1.5
date	2009.04.14.14.06.26;	author naddy;	state Exp;
branches;
next	1.4;

1.4
date	2009.02.15.18.09.29;	author naddy;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.02.15.29.07;	author naddy;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.09.19.43.42;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.22.16.50.43;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.8
log
@drop workarounds for \' printf modifier
@
text
@$OpenBSD: patch-gtk_util_c,v 1.7 2009/09/06 15:03:18 naddy Exp $
--- gtk/util.c.orig	Wed Aug 19 03:02:44 2009
+++ gtk/util.c	Thu Aug 20 19:50:22 2009
@@@@ -117,7 +117,7 @@@@ tr_strlsize( char *  buf,
 #else
     else if( size < (guint64)KILOBYTE_FACTOR )
         g_snprintf( buf, buflen,
-                    ngettext( "%'u byte", "%'u bytes",
+                    ngettext( "%u byte", "%u bytes",
                               (guint)size ), (guint)size );
     else
     {
@@@@ -125,17 +125,17 @@@@ tr_strlsize( char *  buf,
         if( size < (guint64)MEGABYTE_FACTOR )
         {
             displayed_size = (gdouble) size / KILOBYTE_FACTOR;
-            g_snprintf( buf, buflen, _( "%'.1f KB" ), displayed_size );
+            g_snprintf( buf, buflen, _( "%.1f KB" ), displayed_size );
         }
         else if( size < (guint64)GIGABYTE_FACTOR )
         {
             displayed_size = (gdouble) size / MEGABYTE_FACTOR;
-            g_snprintf( buf, buflen, _( "%'.1f MB" ), displayed_size );
+            g_snprintf( buf, buflen, _( "%.1f MB" ), displayed_size );
         }
         else
         {
             displayed_size = (gdouble) size / GIGABYTE_FACTOR;
-            g_snprintf( buf, buflen, _( "%'.1f GB" ), displayed_size );
+            g_snprintf( buf, buflen, _( "%.1f GB" ), displayed_size );
         }
     }
 #endif
@@@@ -150,13 +150,13 @@@@ tr_strlspeed( char * buf,
     const double speed = kb_sec;
 
     if( speed < 1000.0 )  /* 0.0 KB to 999.9 KB */
-        g_snprintf( buf, buflen, _( "%'.1f KB/s" ), speed );
+        g_snprintf( buf, buflen, _( "%.1f KB/s" ), speed );
     else if( speed < 102400.0 ) /* 0.98 MB to 99.99 MB */
-        g_snprintf( buf, buflen, _( "%'.2f MB/s" ), ( speed / KILOBYTE_FACTOR ) );
+        g_snprintf( buf, buflen, _( "%.2f MB/s" ), ( speed / KILOBYTE_FACTOR ) );
     else if( speed < 1024000.0 ) /* 100.0 MB to 999.9 MB */
-        g_snprintf( buf, buflen, _( "%'.1f MB/s" ), ( speed / MEGABYTE_FACTOR ) );
+        g_snprintf( buf, buflen, _( "%.1f MB/s" ), ( speed / MEGABYTE_FACTOR ) );
     else /* insane speeds */
-        g_snprintf( buf, buflen, _( "%'.2f GB/s" ), ( speed / GIGABYTE_FACTOR ) );
+        g_snprintf( buf, buflen, _( "%.2f GB/s" ), ( speed / GIGABYTE_FACTOR ) );
 
     return buf;
 }
@@@@ -177,14 +177,14 @@@@ tr_strltime( char * buf,
     minutes = ( seconds % 3600 ) / 60;
     seconds = ( seconds % 3600 ) % 60;
 
-    g_snprintf( d, sizeof( d ), ngettext( "%'d day", "%'d days",
+    g_snprintf( d, sizeof( d ), ngettext( "%d day", "%d days",
                                           days ), days );
-    g_snprintf( h, sizeof( h ), ngettext( "%'d hour", "%'d hours",
+    g_snprintf( h, sizeof( h ), ngettext( "%d hour", "%d hours",
                                           hours ), hours );
     g_snprintf( m, sizeof( m ),
-                ngettext( "%'d minute", "%'d minutes", minutes ), minutes );
+                ngettext( "%d minute", "%d minutes", minutes ), minutes );
     g_snprintf( s, sizeof( s ),
-                ngettext( "%'d second", "%'d seconds", seconds ), seconds );
+                ngettext( "%d second", "%d seconds", seconds ), seconds );
 
     if( days )
     {
@


1.7
log
@update to 1.74: miscellaneous bug fixes
@
text
@d1 1
a1 1
$OpenBSD: patch-gtk_util_c,v 1.6 2009/05/10 19:31:44 naddy Exp $
@


1.6
log
@update to 1.60; prodded by Brad
@
text
@d1 4
a4 4
$OpenBSD: patch-gtk_util_c,v 1.5 2009/04/14 14:06:26 naddy Exp $
--- gtk/util.c.orig	Tue May  5 02:40:11 2009
+++ gtk/util.c	Thu May  7 19:40:40 2009
@@@@ -76,7 +76,7 @@@@ tr_strlsize( char *  buf,
d13 1
a13 1
@@@@ -84,17 +84,17 @@@@ tr_strlsize( char *  buf,
d34 1
a34 1
@@@@ -109,13 +109,13 @@@@ tr_strlspeed( char * buf,
d52 1
a52 1
@@@@ -136,14 +136,14 @@@@ tr_strltime( char * buf,
@


1.5
log
@update to 1.52; from Brad
@
text
@d1 4
a4 19
$OpenBSD: patch-gtk_util_c,v 1.4 2009/02/15 18:09:29 naddy Exp $
--- gtk/util.c.orig	Sun Apr 12 21:55:50 2009
+++ gtk/util.c	Tue Apr 14 00:12:23 2009
@@@@ -58,11 +58,11 @@@@ tr_strlratio( char * buf,
     else if( (int)ratio == TR_RATIO_INF )
         g_strlcpy( buf, "\xE2\x88\x9E", buflen );
     else if( ratio < 10.0 )
-        g_snprintf( buf, buflen, "%'.2f", ratio );
+        g_snprintf( buf, buflen, "%.2f", ratio );
     else if( ratio < 100.0 )
-        g_snprintf( buf, buflen, "%'.1f", ratio );
+        g_snprintf( buf, buflen, "%.1f", ratio );
     else
-        g_snprintf( buf, buflen, "%'.0f", ratio );
+        g_snprintf( buf, buflen, "%.0f", ratio );
     return buf;
 }
 
@@@@ -87,7 +87,7 @@@@ tr_strlsize( char *  buf,
d13 1
a13 1
@@@@ -95,17 +95,17 @@@@ tr_strlsize( char *  buf,
d34 1
a34 1
@@@@ -120,13 +120,13 @@@@ tr_strlspeed( char * buf,
d52 1
a52 1
@@@@ -147,14 +147,14 @@@@ tr_strltime( char * buf,
@


1.4
log
@Update to 1.50: A bunch of bug fixes and various small improvements as well
as initial IPv6 support.
Also submitted in near-identical form by Brad.
@
text
@d1 3
a3 3
$OpenBSD: patch-gtk_util_c,v 1.3 2008/12/02 15:29:07 naddy Exp $
--- gtk/util.c.orig	Thu Jan 22 23:05:24 2009
+++ gtk/util.c	Fri Jan 23 15:42:02 2009
d56 2
a57 2
-        g_snprintf( buf, buflen, _( "%'.2f MB/s" ), ( speed / 1024 ) );
+        g_snprintf( buf, buflen, _( "%.2f MB/s" ), ( speed / 1024 ) );
d59 2
a60 2
-        g_snprintf( buf, buflen, _( "%'.1f MB/s" ), ( speed / 1024 ) );
+        g_snprintf( buf, buflen, _( "%.1f MB/s" ), ( speed / 1024 ) );
d62 2
a63 2
-        g_snprintf( buf, buflen, _( "%'.2f GB/s" ), ( speed / 1048576 ) );
+        g_snprintf( buf, buflen, _( "%.2f GB/s" ), ( speed / 1048576 ) );
@


1.3
log
@Update to 1.40.  The biggest changes:
* new web interface for the GTK and daemon clients
* transmission-daemon and -remote have been completely rewritten
@
text
@d1 4
a4 4
$OpenBSD$
--- gtk/util.c.orig	Mon Nov 10 16:52:26 2008
+++ gtk/util.c	Thu Nov 27 22:42:28 2008
@@@@ -57,11 +57,11 @@@@ tr_strlratio( char * buf,
d19 1
a19 1
@@@@ -86,7 +86,7 @@@@ tr_strlsize( char *  buf,
d28 1
a28 1
@@@@ -94,17 +94,17 @@@@ tr_strlsize( char *  buf,
d49 1
a49 1
@@@@ -119,13 +119,13 @@@@ tr_strlspeed( char * buf,
d67 1
a67 1
@@@@ -146,14 +146,14 @@@@ tr_strltime( char * buf,
@


1.2
log
@Overdue update to 1.22.
@
text
@d2 3
a4 3
--- gtk/util.c.orig	Fri May  9 21:00:55 2008
+++ gtk/util.c	Wed May 14 17:50:12 2008
@@@@ -63,11 +63,11 @@@@ tr_strlratio( char * buf, double ratio, size_t buflen 
d19 1
a19 2
@@@@ -88,18 +88,18 @@@@ tr_strlsize( char * buf, guint64 size, size_t buflen )
     }
d22 9
a30 5
-        g_snprintf( buf, buflen, ngettext("%'u byte", "%'u bytes", (guint)size), (guint)size );
+        g_snprintf( buf, buflen, ngettext("%u byte", "%u bytes", (guint)size), (guint)size );
     else {
         gdouble displayed_size;
         if (size < (guint64)MEGABYTE_FACTOR) {
d32 5
a36 3
-            g_snprintf( buf, buflen, _("%'.1f KB"), displayed_size );
+            g_snprintf( buf, buflen, _("%.1f KB"), displayed_size );
         } else if (size < (guint64)GIGABYTE_FACTOR) {
d38 5
a42 3
-            g_snprintf( buf, buflen, _("%'.1f MB"), displayed_size );
+            g_snprintf( buf, buflen, _("%.1f MB"), displayed_size );
         } else {
d44 2
a45 2
-            g_snprintf( buf, buflen, _("%'.1f GB"), displayed_size );
+            g_snprintf( buf, buflen, _("%.1f GB"), displayed_size );
d49 1
a49 1
@@@@ -112,13 +112,13 @@@@ tr_strlspeed( char * buf, double kb_sec, size_t buflen
d52 1
a52 1
     if ( speed < 1000.0 ) /* 0.0 KB to 999.9 KB */
d56 2
a57 2
-        g_snprintf( buf, buflen, _( "%'.2f MB/s" ), (speed/1024) );
+        g_snprintf( buf, buflen, _( "%.2f MB/s" ), (speed/1024) );
d59 2
a60 2
-        g_snprintf( buf, buflen, _( "%'.1f MB/s" ), (speed/1024) );
+        g_snprintf( buf, buflen, _( "%.1f MB/s" ), (speed/1024) );
d62 2
a63 2
-        g_snprintf( buf, buflen, _( "%'.2f GB/s" ), (speed/1048576) );
+        g_snprintf( buf, buflen, _( "%.2f GB/s" ), (speed/1048576) );
d67 16
a82 28
@@@@ -134,14 +134,14 @@@@ tr_strltime( char * buf, int seconds, size_t buflen )
 
     if( seconds < 60 )
     {
-        g_snprintf( buf, buflen, ngettext( "%'d second", "%'d seconds", (int)seconds ), (int) seconds );
+        g_snprintf( buf, buflen, ngettext( "%d second", "%d seconds", (int)seconds ), (int) seconds );
         return buf;
     }
 
     if( seconds < ( 60 * 60 ) )
     {
         const int minutes = ( seconds + 30 ) / 60;
-        g_snprintf( buf, buflen, ngettext( "%'d minute", "%'d minutes", minutes ), minutes );
+        g_snprintf( buf, buflen, ngettext( "%d minute", "%d minutes", minutes ), minutes );
         return buf;
     }
 
@@@@ -154,20 +154,20 @@@@ tr_strltime( char * buf, int seconds, size_t buflen )
 
         const int minutes = ( seconds - hours * 60 * 60 + 30 ) / 60;
 
-        g_snprintf( h, sizeof(h), ngettext( "%'d hour", "%'d hours", hours ), hours );
-        g_snprintf( m, sizeof(m), ngettext( "%'d minute", "%'d minutes", minutes ), minutes );
+        g_snprintf( h, sizeof(h), ngettext( "%d hour", "%d hours", hours ), hours );
+        g_snprintf( m, sizeof(m), ngettext( "%d minute", "%d minutes", minutes ), minutes );
         g_snprintf( buf, buflen, "%s, %s", h, m );
         return buf;
     }
d84 1
a84 1
     if( hours < 24 )
a85 11
-        g_snprintf( buf, buflen, ngettext( "%'d hour", "%'d hours", hours ), hours );
+        g_snprintf( buf, buflen, ngettext( "%d hour", "%d hours", hours ), hours );
         return buf;
     }
 
     days = seconds / ( 60 * 60 * 24 );
-    g_snprintf( buf, buflen, ngettext( "%'d day", "%'d days", days ), days );
+    g_snprintf( buf, buflen, ngettext( "%d day", "%d days", days ), days );
     return buf;
 }
 
@


1.1
log
@Update to 1.11.
@
text
@d2 3
a4 3
--- gtk/util.c.orig	Tue Apr  1 16:26:37 2008
+++ gtk/util.c	Tue Apr  1 16:28:05 2008
@@@@ -58,11 +58,11 @@@@ tr_strlratio( char * buf, double ratio, size_t buflen 
d19 1
a19 1
@@@@ -83,18 +83,18 @@@@ tr_strlsize( char * buf, guint64 size, size_t buflen )
d42 1
a42 1
@@@@ -107,13 +107,13 @@@@ tr_strlspeed( char * buf, double kb_sec, size_t buflen
d60 1
a60 1
@@@@ -129,14 +129,14 @@@@ tr_strltime( char * buf, int seconds, size_t buflen )
d77 1
a77 1
@@@@ -149,20 +149,20 @@@@ tr_strltime( char * buf, int seconds, size_t buflen )
@

