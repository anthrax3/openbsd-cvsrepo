head	1.1;
access;
symbols
	OPENBSD_5_5:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2014.07.22.07.28.24;	author jasper;	state dead;
branches
	1.1.2.1;
next	;
commitid	E4USU0DGNkyKjxYe;

1.1.2.1
date	2014.07.22.07.28.24;	author jasper;	state Exp;
branches;
next	;
commitid	E4USU0DGNkyKjxYe;


desc
@@


1.1
log
@file patch-libtransmission_bitfield_c was initially added on branch OPENBSD_5_5.
@
text
@@


1.1.2.1
log
@Security fix for CVE-2014-4909,
transmission peer communication vulnerability
@
text
@a0 78
$OpenBSD$

Security fix for CVE-2014-4909,
transmission peer communication vulnerability

https://trac.transmissionbt.com/changeset/14303

--- libtransmission/bitfield.c.orig	Fri Aug  9 04:45:45 2013
+++ libtransmission/bitfield.c	Tue Jul 22 09:24:16 2014
@@@@ -170,7 +170,7 @@@@ tr_bitfieldCountTrueBits (const tr_bitfield * b)
 static size_t
 get_bytes_needed (size_t bit_count)
 {
-  return (bit_count + 7u) / 8u;
+  return (bit_count >> 3) + (bit_count & 7 ? 1 : 0);
 }
 
 static void
@@@@ -231,11 +231,16 @@@@ tr_bitfieldEnsureBitsAlloced (tr_bitfield * b, size_t 
     }
 }
 
-static void
+static bool
 tr_bitfieldEnsureNthBitAlloced (tr_bitfield * b, size_t nth)
 {
   /* count is zero-based, so we need to allocate nth+1 bits before setting the nth */
+
+  if (nth == SIZE_MAX)
+    return false;
+
   tr_bitfieldEnsureBitsAlloced (b, nth + 1);
+  return true;
 }
 
 static void
@@@@ -368,7 +373,7 @@@@ tr_bitfieldSetFromFlags (tr_bitfield * b, const bool *
 void
 tr_bitfieldAdd (tr_bitfield * b, size_t nth)
 {
-  if (!tr_bitfieldHas (b, nth))
+  if (!tr_bitfieldHas (b, nth) && tr_bitfieldEnsureNthBitAlloced (b, nth)) 
     {
       tr_bitfieldEnsureNthBitAlloced (b, nth);
       b->bits[nth >> 3u] |= (0x80 >> (nth & 7u));
@@@@ -396,7 +401,9 @@@@ tr_bitfieldAddRange (tr_bitfield * b, size_t begin, si
   eb = end >> 3;
   em = 0xff << (7 - (end & 7));
 
-  tr_bitfieldEnsureNthBitAlloced (b, end);
+  if (!tr_bitfieldEnsureNthBitAlloced (b, end))
+    return;
+
   if (sb == eb)
     {
       b->bits[sb] |= (sm & em);
@@@@ -417,9 +424,8 @@@@ tr_bitfieldRem (tr_bitfield * b, size_t nth)
 {
   assert (tr_bitfieldIsValid (b));
 
-  if (!tr_bitfieldHas (b, nth))
+  if (!tr_bitfieldHas (b, nth) && tr_bitfieldEnsureNthBitAlloced (b, nth)) 
     {
-      tr_bitfieldEnsureNthBitAlloced (b, nth);
       b->bits[nth >> 3u] &= (0xff7f >> (nth & 7u));
       tr_bitfieldIncTrueCount (b, -1);
     }
@@@@ -446,7 +452,9 @@@@ tr_bitfieldRemRange (tr_bitfield * b, size_t begin, si
   eb = end >> 3;
   em = ~ (0xff << (7 - (end & 7)));
 
-  tr_bitfieldEnsureNthBitAlloced (b, end);
+  if (!tr_bitfieldEnsureNthBitAlloced (b, end))
+    return;
+
   if (sb == eb)
     {
       b->bits[sb] &= (sm | em);
@

