head	1.3;
access;
symbols
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	jsyn_2001-July-2:1.1.1.1
	pvalchev:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.12.18.00.38.44;	author pvalchev;	state dead;
branches;
next	1.2;

1.2
date	2002.09.17.08.42.20;	author pvalchev;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.03.02.40.21;	author pvalchev;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.07.03.02.40.21;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove outdated, broken port of abandoned software; many agree
@
text
@$OpenBSD: patch-oproute_cpp,v 1.2 2002/09/17 08:42:20 pvalchev Exp $
--- oproute.cpp.orig	Wed Feb 28 19:28:31 2001
+++ oproute.cpp	Tue Sep 17 02:07:26 2002
@@@@ -146,10 +146,13 @@@@ OpRoute::OpRoute(string sDestination, in
 	cout << "Could not resolve host... " << endl;
 	exit(1);
       }
+    recvfd = socket(PF_INET, SOCK_RAW, 1);
+    /* revoke priveleges */
+    seteuid(getuid());
+    setuid(getuid());
     struct in_addr *ia = (struct in_addr *) *he->h_addr_list;
     sDestinationIP = inet_ntoa(*ia);
     nPort = getpid();
-    recvfd = socket(PF_INET, SOCK_RAW, 1);
     long nBufSize = 10000000;
     setsockopt(recvfd, SOL_SOCKET, SO_RCVBUF, (char *)&nBufSize, sizeof(nBufSize));
     nCurrentTTL = nBeginTTL = nTheBeginTTL;
@@@@ -706,7 +709,7 @@@@ void OpRoute::CatchICMP(Hop *pHop)
 	    udp = (struct udphdr *)(recvbuf + hlen1 + 8 +hlen2);
 	    if(hip->ip_p == IPPROTO_UDP)
 	      {
-		pHop->nPort = ntohs(udp->dest);
+		pHop->nPort = ntohs(udp->uh_dport);
 		pHop->sRouterIP = sock_ntop_host((sockaddr *)sa_recv, sa_len);
 		pHop->state = HOP_COMPLETED;
 		pHop->fLatency = GetLatencyFromTV(tvNow, tvTimeOfLastSend);
@@@@ -721,14 +724,14 @@@@ void OpRoute::CatchICMP(Hop *pHop)
 	      {
 		if (icmp->icmp_code == ICMP_UNREACH_PORT) 
 		  {
-		    pHop->nPort = ntohs(udp->dest);
+		    pHop->nPort = ntohs(udp->uh_dport);
 		    pHop->sRouterIP = sock_ntop_host((sockaddr *)sa_recv, sa_len);
 		    pHop->state = HOP_ENDOFLINE;
 		    pHop->fLatency = GetLatencyFromTV(tvNow, tvTimeOfLastSend);
 		  }
 		else 
 		  {
-		    pHop->nPort = ntohs(udp->dest);
+		    pHop->nPort = ntohs(udp->uh_dport);
 		    pHop->sRouterIP = sock_ntop_host((sockaddr *)sa_recv, sa_len);
 		    pHop->state = HOP_FAILED;
 		  }
@


1.2
log
@This is a network program that needs raw sockets and is installed setuid root.
Open the socket first thing in the program and revoke root privileges
immediately after because that's all they are needed for.  ok maintainer jsyn@@
Bump PKGNAME to reflect change
@
text
@d1 1
a1 1
$OpenBSD: patch-oproute_cpp,v 1.1.1.1 2001/07/03 02:40:21 pvalchev Exp $
@


1.1
log
@Initial revision
@
text
@d1 19
a19 4
$OpenBSD$
--- oproute.cpp.orig	Sun Jun 24 15:41:04 2001
+++ oproute.cpp	Sun Jun 24 15:41:40 2001
@@@@ -706,7 +706,7 @@@@ void OpRoute::CatchICMP(Hop *pHop)
d28 1
a28 1
@@@@ -721,14 +721,14 @@@@ void OpRoute::CatchICMP(Hop *pHop)
@


1.1.1.1
log
@Import of oproute-0.7

The purpose of OpRoute is to attempt to establish a
*generalized* measurement system which takes into
account all of the factors that are usually considered
to be important when it comes to performance.
Specifically:

 - Packet loss
 - Latency
 - Layer 3 Hops
 - AS Hops 
 - NAP Hops
 - Throughput (To be done, not in there yet)

MAINTAINER=	Jason Peel <jsyn@@nthought.com>
@
text
@@
