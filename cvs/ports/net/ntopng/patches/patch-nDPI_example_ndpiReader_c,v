head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	sthen_20160426:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2016.07.09.12.14.28;	author sthen;	state Exp;
branches;
next	1.1;
commitid	f256QDb56GMg9gJC;

1.1
date	2016.04.26.20.56.01;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;
commitid	RBsE2rCFwDtpopxV;

1.1.1.1
date	2016.04.26.20.56.01;	author sthen;	state Exp;
branches;
next	;
commitid	RBsE2rCFwDtpopxV;


desc
@@


1.2
log
@update ntopng from snapshot to 2.4 release
@
text
@$OpenBSD: patch-nDPI_example_ndpiReader_c,v 1.1.1.1 2016/04/26 20:56:01 sthen Exp $
--- nDPI/example/ndpiReader.c.orig	Mon Jun 27 20:31:24 2016
+++ nDPI/example/ndpiReader.c	Sat Jul  9 12:55:43 2016
@@@@ -56,7 +56,7 @@@@ static char *_pcap_file[MAX_NUM_READER_THREADS]; /**< 
 static FILE *playlist_fp[MAX_NUM_READER_THREADS] = { NULL }; /**< Ingress playlist */
 static FILE *results_file = NULL;
 static char *results_path = NULL;
-static char *_bpf_filter      = NULL; /**< bpf filter  */
+static char *__bpf_filter      = NULL; /**< bpf filter  */
 static char *_protoFilePath   = NULL; /**< Protocol file path  */
 #ifdef HAVE_JSON_C
 static char *_jsonFilePath    = NULL; /**< JSON file path  */
@@@@ -174,7 +174,7 @@@@ static void parseOptions(int argc, char **argv) {
       break;
 
     case 'f':
-      _bpf_filter = optarg;
+      __bpf_filter = optarg;
       break;
 
     case 'g':
@@@@ -1054,16 +1054,16 @@@@ static int getNextPcapFileFromPlaylist(u_int16_t threa
  */ 
 static void configurePcapHandle(pcap_t * pcap_handle) {
 
-  if(_bpf_filter != NULL) {
+  if(__bpf_filter != NULL) {
     struct bpf_program fcode;
 
-    if(pcap_compile(pcap_handle, &fcode, _bpf_filter, 1, 0xFFFFFF00) < 0) {
+    if(pcap_compile(pcap_handle, &fcode, __bpf_filter, 1, 0xFFFFFF00) < 0) {
       printf("pcap_compile error: '%s'\n", pcap_geterr(pcap_handle));
     } else {
       if(pcap_setfilter(pcap_handle, &fcode) < 0) {
 	printf("pcap_setfilter error: '%s'\n", pcap_geterr(pcap_handle));
       } else
-	printf("Successfully set BPF filter to '%s'\n", _bpf_filter);
+	printf("Successfully set BPF filter to '%s'\n", __bpf_filter);
     }
   }
 }
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- nDPI/example/ndpiReader.c.orig	Tue Apr 26 17:09:12 2016
+++ nDPI/example/ndpiReader.c	Tue Apr 26 17:11:57 2016
@@@@ -62,7 +62,7 @@@@ static char *_pcap_file[MAX_NUM_READER_THREADS]; /**< 
d13 1
a13 1
@@@@ -180,7 +180,7 @@@@ static void parseOptions(int argc, char **argv) {
d22 1
a22 1
@@@@ -1083,16 +1083,16 @@@@ static int getNextPcapFileFromPlaylist(u_int16_t threa
@


1.1.1.1
log
@import ports/net/ntopng, feedback/ok jca

ntopng is a network traffic probe that shows network usage in a high level
of detail. It provides a web-based UI allowing you to visualize traffic flows
broken down by host, country, port, application (via deep packet inspection),
AS number, etc. Flow information can also be dumped to ElasticSearch or
MySQL/MariaDB.

User guide: https://github.com/ntop/ntopng/blob/dev/doc/UserGuide.pdf
@
text
@@
