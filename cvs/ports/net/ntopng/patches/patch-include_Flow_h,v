head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	sthen_20160426:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2016.07.09.12.14.28;	author sthen;	state Exp;
branches;
next	1.1;
commitid	f256QDb56GMg9gJC;

1.1
date	2016.04.26.20.56.01;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;
commitid	RBsE2rCFwDtpopxV;

1.1.1.1
date	2016.04.26.20.56.01;	author sthen;	state Exp;
branches;
next	;
commitid	RBsE2rCFwDtpopxV;


desc
@@


1.2
log
@update ntopng from snapshot to 2.4 release
@
text
@$OpenBSD: patch-include_Flow_h,v 1.1.1.1 2016/04/26 20:56:01 sthen Exp $
--- include/Flow.h.orig	Mon Jun 27 20:31:18 2016
+++ include/Flow.h	Sat Jul  9 12:55:43 2016
@@@@ -155,7 +155,7 @@@@ class Flow : public GenericHashEntry {
   void checkFlowCategory();
   void setBittorrentHash(char *hash);
   bool isLowGoodput();
-  void updatePacketStats(InterarrivalStats *stats, const struct timeval *when);
+  void updatePacketStats(InterarrivalStats *stats, const struct bpf_timeval *when);
   void dumpPacketStats(lua_State* vm, bool cli2srv_direction);
   inline u_int32_t getCurrentInterArrivalTime(time_t now, bool cli2srv_direction) {
     return(1000 /* msec */ 
@@@@ -215,8 +215,8 @@@@ class Flow : public GenericHashEntry {
   void setDetectedProtocol(ndpi_protocol proto_id);
   void setJSONInfo(const char *json);
   bool isFlowPeer(char *numIP, u_int16_t vlanId);
-  void incStats(bool cli2srv_direction, u_int pkt_len,
-		u_int payload_len, const struct bpf_timeval *when);
+  void incStats(bool cli2srv_direction, u_int32_t pkt_len,
+		u_int16_t payload_len, const struct bpf_timeval *when);
   void updateActivities();
   void addFlowStats(bool cli2srv_direction, u_int in_pkts, u_int in_bytes, u_int in_goodput_bytes,
 		    u_int out_pkts, u_int out_bytes, u_int out_goodput_bytes, time_t last_seen);
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- include/Flow.h.orig	Mon Apr 25 09:27:48 2016
+++ include/Flow.h	Tue Apr 26 17:53:54 2016
@@@@ -137,7 +137,7 @@@@ class Flow : public GenericHashEntry {
d11 3
a13 3
 
  public:
@@@@ -182,8 +182,8 @@@@ class Flow : public GenericHashEntry {
@


1.1.1.1
log
@import ports/net/ntopng, feedback/ok jca

ntopng is a network traffic probe that shows network usage in a high level
of detail. It provides a web-based UI allowing you to visualize traffic flows
broken down by host, country, port, application (via deep packet inspection),
AS number, etc. Flow information can also be dumped to ElasticSearch or
MySQL/MariaDB.

User guide: https://github.com/ntop/ntopng/blob/dev/doc/UserGuide.pdf
@
text
@@
