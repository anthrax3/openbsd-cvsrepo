head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	sthen_20160426:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2016.07.09.12.14.28;	author sthen;	state Exp;
branches;
next	1.1;
commitid	f256QDb56GMg9gJC;

1.1
date	2016.04.26.20.56.01;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;
commitid	RBsE2rCFwDtpopxV;

1.1.1.1
date	2016.04.26.20.56.01;	author sthen;	state Exp;
branches;
next	;
commitid	RBsE2rCFwDtpopxV;


desc
@@


1.2
log
@update ntopng from snapshot to 2.4 release
@
text
@$OpenBSD: patch-src_Flow_cpp,v 1.1.1.1 2016/04/26 20:56:01 sthen Exp $
--- src/Flow.cpp.orig	Mon Jun 27 20:31:18 2016
+++ src/Flow.cpp	Sat Jul  9 12:55:43 2016
@@@@ -1795,9 +1795,9 @@@@ bool Flow::isIdleFlow() {
 
 /* *************************************** */
 
-void Flow::updatePacketStats(InterarrivalStats *stats, const struct timeval *when) {
+void Flow::updatePacketStats(InterarrivalStats *stats, const struct bpf_timeval *when) {
   if(stats->lastTime.tv_sec != 0) {
-    float deltaMS = (float)(Utils::timeval2usec((struct timeval*)when) - Utils::timeval2usec(&stats->lastTime))/(float)1000;
+    float deltaMS = (float)(Utils::timeval2usec(when) - Utils::timeval2usec(&stats->lastTime))/(float)1000;
 
     if(deltaMS > 0) {
       if(stats->max_ms == 0)
@@@@ -1811,7 +1811,7 @@@@ void Flow::updatePacketStats(InterarrivalStats *stats,
     }
   }
 
-  memcpy(&stats->lastTime, when, sizeof(struct timeval));
+  memcpy(&stats->lastTime, when, sizeof(struct bpf_timeval));
 }
 
 /* *************************************** */
@@@@ -1830,8 +1830,8 @@@@ void Flow::dumpPacketStats(lua_State* vm, bool cli2srv
 
 /* *************************************** */
 
-void Flow::incStats(bool cli2srv_direction, u_int pkt_len,
-		    u_int payload_len, const struct timeval *when) {
+void Flow::incStats(bool cli2srv_direction, u_int32_t pkt_len,
+		    u_int16_t payload_len, const struct bpf_timeval *when) {
   updateSeen();
   updatePacketStats(cli2srv_direction ? &cli2srvStats.pktTime : &srv2cliStats.pktTime, when);
 
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- src/Flow.cpp.orig	Mon Apr 25 09:27:48 2016
+++ src/Flow.cpp	Tue Apr 26 17:53:24 2016
@@@@ -1634,9 +1634,9 @@@@ json_object* Flow::flow2json(bool partial_dump) {
d16 1
a16 1
@@@@ -1650,7 +1650,7 @@@@ void Flow::updatePacketStats(InterarrivalStats *stats,
d25 1
a25 1
@@@@ -1669,8 +1669,8 @@@@ void Flow::dumpPacketStats(lua_State* vm, bool cli2srv
@


1.1.1.1
log
@import ports/net/ntopng, feedback/ok jca

ntopng is a network traffic probe that shows network usage in a high level
of detail. It provides a web-based UI allowing you to visualize traffic flows
broken down by host, country, port, application (via deep packet inspection),
AS number, etc. Flow information can also be dumped to ElasticSearch or
MySQL/MariaDB.

User guide: https://github.com/ntop/ntopng/blob/dev/doc/UserGuide.pdf
@
text
@@
