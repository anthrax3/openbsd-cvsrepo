head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.2
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.4
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.3.0.12
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.8
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_2:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2017.01.11.08.41.32;	author ajacoutot;	state Exp;
branches;
next	1.4;
commitid	Z7b9VuloCOFn8HWG;

1.4
date	2016.01.19.16.16.38;	author ajacoutot;	state Exp;
branches;
next	1.3;
commitid	JNDURCwQIKxsIObP;

1.3
date	2013.06.09.09.40.19;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2013.05.08.16.14.34;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.12.13.02.15;	author sthen;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2012.10.12.13.02.15;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to libproxy-0.4.14.
@
text
@$OpenBSD: patch-libproxy_url_cpp,v 1.4 2016/01/19 16:16:38 ajacoutot Exp $

https://code.google.com/p/libproxy/issues/detail?id=196&thanks=196&ts=1370457244

--- libproxy/url.cpp.orig	Mon Jan  9 15:22:22 2017
+++ libproxy/url.cpp	Wed Jan 11 09:31:58 2017
@@@@ -46,6 +46,10 @@@@
 using namespace libproxy;
 using namespace std;
 
+#ifndef WIN32
+static pthread_mutex_t servmtx = PTHREAD_MUTEX_INITIALIZER;
+#endif
+
 // This mime type should be reported by the web server
 #define PAC_MIME_TYPE "application/x-ns-proxy-autoconfig"
 // Fall back to checking for this mime type, which servers often report wrong
@@@@ -59,14 +63,22 @@@@ using namespace std;
 static inline int get_default_port(string scheme) {
 	struct servent *serv;
 	size_t plus = scheme.find('+');
+	int ret = 0;
 
 	if (plus != string::npos)
 		scheme = scheme.substr(plus + 1);
 
-	if ((serv = getservbyname(scheme.c_str(), NULL)))
-		return ntohs(serv->s_port);
+#ifndef WIN32
+	pthread_mutex_lock(&servmtx);
+#endif
+	serv = getservbyname(scheme.c_str(), NULL);
+	if (serv)
+		ret = ntohs(serv->s_port);
+#ifndef WIN32
+	pthread_mutex_unlock(&servmtx);
+#endif
 
-	return 0;
+	return ret;
 }
 
 template <class T>
@


1.4
log
@Update to libproxy-0.4.12.
Add KDE support.
@
text
@d1 1
a1 1
$OpenBSD: patch-libproxy_url_cpp,v 1.3 2013/06/09 09:40:19 ajacoutot Exp $
d5 2
a6 2
--- libproxy/url.cpp.orig	Tue Jan 12 17:41:07 2016
+++ libproxy/url.cpp	Tue Jan 19 16:12:18 2016
d18 1
a18 1
@@@@ -57,14 +61,22 @@@@ using namespace std;
@


1.3
log
@Make get_default_port() threadsafe: getservbyname is not reentrant, and
getservbyname_r is not always available.
This fixes several crashes mostly on webkit-based browsers.
libproxy issue #196, from David Hill
@
text
@d1 1
a1 1
$OpenBSD: patch-libproxy_url_cpp,v 1.2 2013/05/08 16:14:34 ajacoutot Exp $
a2 1
https://code.google.com/p/libproxy/source/detail?r=870
d5 2
a6 2
--- libproxy/url.cpp.orig	Tue Oct 16 13:52:03 2012
+++ libproxy/url.cpp	Wed Jun  5 17:57:46 2013
a43 16
@@@@ -403,6 +415,7 @@@@ char* url::get_pac() {
 				buffer = NULL;
 			}
 		}
+		close(sock);
 		return buffer;
 	}
 
@@@@ -496,6 +509,7 @@@@ char* url::get_pac() {
 
 	// Clean up
 	shutdown(sock, SHUT_RDWR);
+	close(sock);
 	return buffer;
 }
 
@


1.2
log
@Bring a couple of fixes from upstream, including a mem leak.
@
text
@d1 1
a1 1
$OpenBSD$
d4 1
d6 40
a45 3
--- libproxy/url.cpp.orig	Wed May  8 18:02:23 2013
+++ libproxy/url.cpp	Wed May  8 18:02:51 2013
@@@@ -403,6 +403,7 @@@@ char* url::get_pac() {
d53 1
a53 1
@@@@ -496,6 +497,7 @@@@ char* url::get_pac() {
@


1.1
log
@file patch-libproxy_url_cpp was initially added on branch OPENBSD_5_2.
@
text
@d1 22
@


1.1.2.1
log
@backport the CVE-2012-4504 security fix for libproxy (not carrying out
a full update as it included a library bump).

http://code.google.com/p/libproxy/source/detail?r=853
@
text
@a0 16
$OpenBSD$

http://code.google.com/p/libproxy/source/detail?r=853

--- libproxy/url.cpp.orig	Fri Oct 12 15:00:14 2012
+++ libproxy/url.cpp	Fri Oct 12 15:00:31 2012
@@@@ -471,8 +471,8 @@@@ char* url::get_pac() {
 				// Add this chunk to our content length,
 				// ensuring that we aren't over our max size
 				content_length += chunk_length;
-				if (content_length >= PAC_MAX_SIZE) break;
 			}
+			if (content_length >= PAC_MAX_SIZE) break;
 
 			while (recvd != content_length) {
 				int r = recv(sock, buffer + recvd, content_length - recvd, 0);
@

