head	1.8;
access;
symbols
	OPENBSD_5_2:1.7.0.22
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.20
	OPENBSD_5_0:1.7.0.18
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.16
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.14
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.12
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.10
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.8
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.6
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.4
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.2
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.6.0.16
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.14
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.12
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.10
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.8
	OPENBSD_3_7_BASE:1.6
	OPENBSD_3_6:1.6.0.6
	OPENBSD_3_6_BASE:1.6
	OPENBSD_3_5:1.6.0.4
	OPENBSD_3_5_BASE:1.6
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.3.0.6
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.4
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.2
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	lebel_2001-Jun-25:1.1.1.1
	lebel:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2012.12.11.18.15.13;	author gonzalo;	state dead;
branches;
next	1.7;

1.7
date	2007.05.29.18.56.24;	author rui;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.30.18.46.23;	author pvalchev;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.22.12.27.03;	author naddy;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.17.18.38.19;	author avsm;	state Exp;
branches;
next	1.3;

1.3
date	2002.02.21.02.03.33;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.15.19.25.52;	author jsyn;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.25.23.05.45;	author lebel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.06.25.23.05.45;	author lebel;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Update for balance to 3.54

* A bug with hash_fold() regarding incoming IPv4 and IPv6 source
  addresses has been fixed. The "hash" group mechanism is now working as
  expected.
* Buffering has been disabled for interactive shell IO. A new
  "assign" command has been added to allow changing of the host:port
  assignment of a channel (only if disabled). A locking bug has been
  fixed.
* A new option -6 has been added to force IPv6 bind.
* Problems with setting IPV6_V6ONLY socket option are now handled
  more nicely with a syslog warning message.
* Balance now compiles also on systems where IPV6_V6ONLY is
  undefined (like some Solaris systems).
* IPv6 support on the listening side has been added. MAXCHANNELS in
  balance.h has been increased to 64.

Ok aja@@ brad@@
@
text
@$OpenBSD: patch-balance_c,v 1.7 2007/05/29 18:56:24 rui Exp $
--- balance.c.orig	Sun May 27 18:49:46 2007
+++ balance.c	Sun May 27 18:55:58 2007
@@@@ -809,11 +809,13 @@@@ void initialize_release_variables(void)
   char *version;
   char *revision_copy;
   char *token;
+  size_t rev_len;
 
-  if ((revision_copy = (char *) malloc(strlen(revision) + 1)) == NULL) {
+  rev_len = strlen(revision)+1;
+  if ((revision_copy = (char *) malloc(rev_len)) == NULL) {
     fprintf(stderr, "malloc problem in initialize_release_variables()\n");
   } else {
-    strcpy(revision_copy, revision);
+    strlcpy(revision_copy, revision, rev_len);
     token = strtok(revision_copy, " ");
     token = strtok(NULL, " ");
     version = token != NULL ? token : "0.0";
@@@@ -1136,7 +1138,8 @@@@ int shell(char *argument)
 	  printf("syntax error\n");
 	}
       } else if (mycmp(command, "group")) {
-	char *arg, n;
+	char *arg;
+	int n;
 	if ((arg = strtok(NULL, " \t\n")) != NULL) {
 	  n = atoi(arg);
 	  if (n >= MAXGROUPS || n < 0) {
@@@@ -1472,10 +1475,10 @@@@ int main(int argc, char *argv[])
   serv_addr.sin_family = AF_INET;
   if (bindhost != NULL) {
     setipaddress(&serv_addr.sin_addr, bindhost);
-    sprintf(bindhost_address, inet_ntoa(serv_addr.sin_addr));
+    snprintf(bindhost_address, sizeof(bindhost_address), inet_ntoa(serv_addr.sin_addr));
   } else {
     serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
-    sprintf(bindhost_address, "0.0.0.0");
+    snprintf(bindhost_address, sizeof(bindhost_address), "0.0.0.0");
   }
   serv_addr.sin_port = htons(source_port);
 
@@@@ -1493,7 +1496,7 @@@@ int main(int argc, char *argv[])
     }
     umask(old);
   }
-  sprintf(rendezvousfile, "%sbalance.%d.%s", SHMDIR, source_port,
+  snprintf(rendezvousfile, sizeof(rendezvousfile), "%sbalance.%d.%s", SHMDIR, source_port,
 	  bindhost_address);
 
   if (stat(rendezvousfile, &buffer) == -1) {
@


1.7
log
@update balance to 3.35 and take maintainership

help and ok aanriot@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.6
log
@kill last snprintf (to complete the rest); ok maintainer jsyn
@
text
@d1 7
a7 7
$OpenBSD: patch-balance_c,v 1.5 2003/06/22 12:27:03 naddy Exp $
--- balance.c.orig	Sat Sep 15 16:34:56 2001
+++ balance.c	Tue Jun 24 11:35:55 2003
@@@@ -673,11 +673,13 @@@@ static usage() {
   char* version;
   char* revision_copy;
   char* token;
d10 1
a10 1
-  if((revision_copy=(char*) malloc(strlen(revision)+1))==NULL) {
d12 2
a13 2
+  if((revision_copy=(char*) malloc(rev_len))==NULL) {
     fprintf(stderr,"malloc problem in usage()\n");
d17 4
a20 14
     token=strtok(revision_copy," ");
     token=strtok(NULL," ");
     version=token!=NULL?token:"*undefined*";
@@@@ -882,7 +884,8 @@@@ shell() {
 	printf("  version               show version id\n");
 
       } else if(mycmp(command,"disable")) {
-        char* arg, n; 
+        char* arg;
+	int n;
         if((arg=strtok(NULL," \t\n")) != NULL) {
 	  n=atoi(arg);
 	  if(n<0 || n >= grp_nchannels(common,currentgroup)) {
@@@@ -900,7 +903,8 @@@@ shell() {
d23 3
a25 13
       } else if(mycmp(command,"group")) {
-        char* arg, n; 
+        char* arg;
+	int n;
         if((arg=strtok(NULL," \t\n")) != NULL) {
 	  n=atoi(arg);
           if(n>=MAXGROUPS || n<0) {
@@@@ -913,7 +917,8 @@@@ shell() {
 	}
 
       } else if(mycmp(command,"reset")) {	// reset channel counters
-        char* arg, n; 
+        char* arg;
d27 6
a32 16
 
         if((arg=strtok(NULL," \t\n")) != NULL) {
 	  n=atoi(arg);
@@@@ -931,7 +936,8 @@@@ shell() {
 
       } else if(mycmp(command,"enable")) {
 
-        char* arg, n; 
+        char* arg;
+	int n;
         if((arg=strtok(NULL," \t\n")) != NULL) {
 	  n=atoi(arg);
 	  if(n<0 || n >= grp_nchannels(common,currentgroup)) {
@@@@ -1122,10 +1128,10 @@@@ char	*argv[];
   serv_addr.sin_family      = AF_INET;
   if(bindhost != NULL) {
d37 2
a38 2
     serv_addr.sin_addr.s_addr=htonl(INADDR_ANY);
-    sprintf(bindhost_address,"0.0.0.0");
d41 1
a41 1
   serv_addr.sin_port=htons(source_port);
d43 7
a49 6
@@@@ -1135,7 +1141,7 @@@@ char	*argv[];
      struct stat buffer;
      int fd;
 
-     sprintf(rendezvousfile,"%sbalance.%d.%s",SHMDIR,source_port,bindhost_address);
+     snprintf(rendezvousfile, sizeof(rendezvousfile), "%sbalance.%d.%s", SHMDIR, source_port, bindhost_address);
d51 1
a51 2
      if(stat(rendezvousfile, &buffer) == -1) {
        // File existiert (noch) nicht ...
@


1.5
log
@balance parentheses
@
text
@d1 3
a3 3
$OpenBSD: patch-balance_c,v 1.4 2003/06/17 18:38:19 avsm Exp $
--- balance.c.orig	Sun Sep 16 00:34:56 2001
+++ balance.c	Sun Jun 22 14:25:39 2003
d60 1
a60 1
@@@@ -1122,7 +1128,7 @@@@ char	*argv[];
d68 5
a72 1
     sprintf(bindhost_address,"0.0.0.0");
@


1.4
log
@dont look at sizeof(char *) in usage function
jsyn ok
@
text
@d1 3
a3 3
$OpenBSD: patch-balance_c,v 1.3 2002/02/21 02:03:33 pvalchev Exp $
--- balance.c.orig	Sat Sep 15 23:34:56 2001
+++ balance.c	Tue Jun 17 17:35:00 2003
d12 1
a12 1
+  if((revision_copy=(char*) malloc(rev_len)==NULL) {
@


1.3
log
@atoi() returns an int, not a char
@
text
@d1 12
a12 5
$OpenBSD: patch-balance_c,v 1.2 2001/11/15 19:25:52 jsyn Exp $
--- balance.c.orig	Sat Sep 15 16:34:56 2001
+++ balance.c	Wed Feb 20 18:58:12 2002
@@@@ -677,7 +677,7 @@@@ static usage() {
   if((revision_copy=(char*) malloc(strlen(revision)+1))==NULL) {
d16 1
a16 1
+    strlcpy(revision_copy, revision, sizeof(revision_copy));
d20 1
a20 1
@@@@ -882,7 +882,8 @@@@ shell() {
d30 1
a30 1
@@@@ -900,7 +901,8 @@@@ shell() {
d40 1
a40 1
@@@@ -913,7 +915,8 @@@@ shell() {
d50 1
a50 1
@@@@ -931,7 +934,8 @@@@ shell() {
d60 1
a60 1
@@@@ -1122,7 +1126,7 @@@@ char	*argv[];
d69 1
a69 1
@@@@ -1135,7 +1139,7 @@@@ char	*argv[];
@


1.2
log
@- update to balance-2.33 (bugfix release)
- regen security patch
- regression/distinfo changes
@
text
@d1 3
a3 3
$OpenBSD$
--- balance.c.orig	Thu Nov 15 13:11:07 2001
+++ balance.c	Thu Nov 15 13:14:27 2001
d13 41
a53 1
@@@@ -1122,7 +1122,7 @@@@ char	*argv[];
d62 1
a62 1
@@@@ -1135,7 +1135,7 @@@@ char	*argv[];
@


1.1
log
@Initial revision
@
text
@d2 3
a4 12
--- balance.c.orig	Sun Jan  7 05:56:58 2001
+++ balance.c	Mon Jun 25 19:03:00 2001
@@@@ -27,7 +27,7 @@@@
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <signal.h>
-#include <malloc.h>
+#include <stdlib.h>
 
 #ifdef __FreeBSD__
 #define MYBSD 1
@@@@ -638,7 +638,7 @@@@ static usage() {
d13 1
a13 1
@@@@ -1083,10 +1083,10 @@@@ char	*argv[];
d21 2
a22 6
-    sprintf(bindhost_address,"0.0.0.0");
+    snprintf(bindhost_address, sizeof(bindhost_address), "0.0.0.0");
   }
   serv_addr.sin_port=htons(source_port);
 
@@@@ -1096,7 +1096,7 @@@@ char	*argv[];
d27 1
a27 1
+     snprintf(rendezvousfile, sizeof(rendezvousfile), "%sbalance.%d.%s",SHMDIR,source_port,bindhost_address);
@


1.1.1.1
log
@initial import of balance-2.24.1:
--
Balance is a simple but powerful generic tcp proxy with round robin
load balancing and failover mechanisms. Its behaviour can be
controlled at runtime using a simple command line syntax.

The latest release now supports the definition of channel groups
and connection counting and handling boosting the power and versatility
of balance one big step further.

WWW: http://balance.sourceforge.net/

Submitted by Jason Peel <jsyn@@nthought.com>
@
text
@@
