head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.14
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.10
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.12
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.8
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.6
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	jasper_20131803:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2013.03.18.21.45.41;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.03.18.20.22.50;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.18.20.22.50;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@apply a fix for find_events() over https to a baikal server.
@
text
@$OpenBSD: patch-lib_agcaldav_client_rb,v 1.1.1.1 2013/03/18 20:22:50 jasper Exp $

commit c13ea74da87d56c526f0187abe30e9d185f43374
Author: Geoff Evans <gbeevans@@me.com>
Date:   Wed Feb 20 11:01:50 2013 +1300
Subject:Adds Digest Authentication

commit 20687529a3c3554d0f51dabd81e06b172a96b940
Author: Geoff Evans <gbeevans@@me.com>
Date:   Wed Mar 6 12:34:46 2013 +1300
Subject:Fix Digest to work over ssl.

commit 7b411e884b3884ca1f49338e1e2f12925c58ae0d
Author: Geoff Evans <gbeevans@@me.com>
Date:   Tue Mar 19 10:08:31 2013 +1300
Subject:Fix find_events for pure ruby

--- lib/agcaldav/client.rb.orig	Thu Jan  1 01:00:00 1970
+++ lib/agcaldav/client.rb	Mon Mar 18 22:31:42 2013
@@@@ -17,6 +17,7 @@@@ module AgCalDAV
         @@proxy_host = proxy_uri.host
         @@proxy_port = proxy_uri.port.to_i
       end
+      
       uri = URI(data[:uri])
       @@host     = uri.host
       @@port     = uri.port.to_i
@@@@ -24,6 +25,24 @@@@ module AgCalDAV
       @@user     = data[:user]
       @@password = data[:password]
       @@ssl      = uri.scheme == 'https'
+      
+      unless data[:authtype].nil?
+      	@@authtype = data[:authtype]
+      	if @@authtype == 'digest'
+      	
+      		@@digest_auth = Net::HTTP::DigestAuth.new
+      		@@duri = URI.parse data[:uri]
+      		@@duri.user = @@user
+      		@@duri.password = @@password
+      		
+      	elsif @@authtype == 'basic'
+	    	#Don't Raise or do anything else
+	    else
+	    	raise "Authentication Type Specified Is Not Valid. Please use basic or digest"
+	    end
+      else
+      	@@authtype = 'basic'
+      end
     end
 
     def __create_http
@@@@ -44,14 +63,26 @@@@ module AgCalDAV
       events = []
       res = nil
       __create_http.start {|http|
+      	
         req = Net::HTTP::Report.new(@@url, initheader = {'Content-Type'=>'application/xml'} )
-        req.basic_auth @@user, @@password
-        req.body = AgCalDAV::Request::ReportVEVENT.new(DateTime.parse(data[:start]).strftime("%Y%m%dT%H%M"), 
-                                                       DateTime.parse(data[:end]).strftime("%Y%m%dT%H%M") ).to_xml
+        
+		if not @@authtype == 'digest'
+			req.basic_auth @@user, @@password
+		else
+			req.add_field 'Authorization', digestauth('REPORT')
+		end
+		    if data[:start].is_a? Integer
+          req.body = AgCalDAV::Request::ReportVEVENT.new(Time.at(data[:start]).utc.strftime("%Y%m%dT%H%M%S"), 
+                                                        Time.at(data[:end]).utc.strftime("%Y%m%dT%H%M%S") ).to_xml
+        else
+          req.body = AgCalDAV::Request::ReportVEVENT.new(DateTime.parse(data[:start]).utc.strftime("%Y%m%dT%H%M%S"), 
+                                                        DateTime.parse(data[:end]).utc.strftime("%Y%m%dT%H%M%S") ).to_xml
+        end
         res = http.request(req)
       } 
         errorhandling res
         result = ""
+        
         xml = REXML::Document.new(res.body)
         REXML::XPath.each( xml, '//c:calendar-data/', {"c"=>"urn:ietf:params:xml:ns:caldav"} ){|c| result << c.text}
         r = Icalendar.parse(result)      
@@@@ -70,16 +101,21 @@@@ module AgCalDAV
     def find_event uuid
       res = nil
       __create_http.start {|http|
-        req = Net::HTTP::Get.new("#{@@url}/#{uuid}.ics")
-        req.basic_auth @@user, @@password
+        req = Net::HTTP::Get.new("#{@@url}/#{uuid}.ics")        
+        if not @@authtype == 'digest'
+        	req.basic_auth @@user, @@password
+        else
+        	req.add_field 'Authorization', digestauth('GET')
+        end
         res = http.request( req )
       }  
       errorhandling res
-      r = Icalendar.parse(res.body)
-      unless r.empty?
-        r.first.events.first 
+      begin
+      	r = Icalendar.parse(res.body)
+      rescue
+      	return false
       else
-        return false
+      	r.first.events.first 
       end
 
       
@@@@ -89,7 +125,11 @@@@ module AgCalDAV
       res = nil
       __create_http.start {|http|
         req = Net::HTTP::Delete.new("#{@@url}/#{uuid}.ics")
-        req.basic_auth @@user, @@password
+        if not @@authtype == 'digest'
+        	req.basic_auth @@user, @@password
+        else
+        	req.add_field 'Authorization', digestauth('DELETE')
+        end
         res = http.request( req )
       }
       errorhandling res
@@@@ -126,7 +166,11 @@@@ module AgCalDAV
       __create_http.start { |http|
         req = Net::HTTP::Put.new("#{@@url}/#{uuid}.ics")
         req['Content-Type'] = 'text/calendar'
-        req.basic_auth @@user, @@password
+        if not @@authtype == 'digest'
+        	req.basic_auth @@user, @@password
+        else
+        	req.add_field 'Authorization', digestauth('PUT')
+        end
         req.body = cstring
         res = http.request( req )
       }
@@@@ -147,19 +191,15 @@@@ module AgCalDAV
     
     end
 
-   
-
-
-
-
-
-
-
     def find_todo uuid
       res = nil
       __create_http.start {|http|
         req = Net::HTTP::Get.new("#{@@url}/#{uuid}.ics")
-        req.basic_auth @@user, @@password
+        if not @@authtype == 'digest'
+        	req.basic_auth @@user, @@password
+        else
+        	req.add_field 'Authorization', digestauth('GET')
+        end
         res = http.request( req )
       }  
       errorhandling res
@@@@ -196,7 +236,11 @@@@ module AgCalDAV
       __create_http.start { |http|
         req = Net::HTTP::Put.new("#{@@url}/#{uuid}.ics")
         req['Content-Type'] = 'text/calendar'
-        req.basic_auth @@user, @@password
+        if not @@authtype == 'digest'
+        	req.basic_auth @@user, @@password
+        else
+        	req.add_field 'Authorization', digestauth('PUT')
+        end
         req.body = cstring
         res = http.request( req )
       }
@@@@ -210,7 +254,11 @@@@ module AgCalDAV
 
       __create_http.start {|http|
         req = Net::HTTP::Report.new(@@url, initheader = {'Content-Type'=>'application/xml'} )
-        req.basic_auth @@user, @@password
+        if not @@authtype == 'digest'
+        	req.basic_auth @@user, @@password
+        else
+        	req.add_field 'Authorization', digestauth('REPORT')
+        end
         req.body = AgCalDAV::Request::ReportVTODO.new.to_xml
         res = http.request( req )
       }
@@@@ -219,29 +267,52 @@@@ module AgCalDAV
     end
 
     private
+    
+    def digestauth method
+		
+	    h = Net::HTTP.new @@duri.host, @@duri.port
+	    if @@ssl
+	    	h.use_ssl = @@ssl
+	    	h.verify_mode = OpenSSL::SSL::VERIFY_NONE
+	    end
+	    req = Net::HTTP::Get.new @@duri.request_uri
+	    
+	    res = h.request req
+	    # res is a 401 response with a WWW-Authenticate header
+	    
+	    auth = @@digest_auth.auth_header @@duri, res['www-authenticate'], method
+	    
+    	return auth
+    end
+    
     def entry_with_uuid_exists? uuid
       res = nil
+      
       __create_http.start {|http|
         req = Net::HTTP::Get.new("#{@@url}/#{uuid}.ics")
-        req.basic_auth @@user, @@password
+        if not @@authtype == 'digest'
+        	req.basic_auth @@user, @@password
+        else
+        	req.add_field 'Authorization', digestauth('GET')
+        end
+        
         res = http.request( req )
-      }      
-      if res.body.empty?
-        return false
+      	
+      }
+      begin
+      	Icalendar.parse(res.body)
+      rescue
+      	return false
       else
-        return true
+      	return true
       end
     end
-
     def  errorhandling response   
       raise AuthenticationError if response.code.to_i == 401
       raise NotExistError if response.code.to_i == 410 
       raise APIError if response.code.to_i >= 500
     end
   end
-
-
-
 
 
   class AgCalDAVError < StandardError
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d13 5
d19 1
a19 1
+++ lib/agcaldav/client.rb	Mon Mar 18 11:06:49 2013
d53 1
a53 1
@@@@ -44,14 +63,22 @@@@ module AgCalDAV
d68 7
a74 3
+		
+        req.body = AgCalDAV::Request::ReportVEVENT.new(DateTime.parse(data[:start]).utc.strftime("%Y%m%dT%H%M%S"), 
+                                                       DateTime.parse(data[:end]).utc.strftime("%Y%m%dT%H%M%S") ).to_xml
d83 1
a83 1
@@@@ -70,8 +97,12 @@@@ module AgCalDAV
d98 14
a111 1
@@@@ -89,7 +120,11 @@@@ module AgCalDAV
d124 1
a124 1
@@@@ -126,7 +161,11 @@@@ module AgCalDAV
d137 13
a149 1
@@@@ -159,7 +198,11 @@@@ module AgCalDAV
d162 1
a162 1
@@@@ -196,7 +239,11 @@@@ module AgCalDAV
d175 1
a175 1
@@@@ -210,7 +257,11 @@@@ module AgCalDAV
d188 1
a188 1
@@@@ -219,29 +270,54 @@@@ module AgCalDAV
d194 1
a194 1
+
a195 3
+	    
+	    req = Net::HTTP::Get.new @@duri.request_uri
+
d197 2
a198 2
+	        h.use_ssl = @@ssl
+	        h.verify_mode = OpenSSL::SSL::VERIFY_NONE
d200 2
a201 1
+
@


1.1.1.1
log
@import agcaldav-0.2.5.3

ruby-agcaldav is yet another great Ruby client for CalDAV calendar and
tasks.

ok jeremy@@
@
text
@@
