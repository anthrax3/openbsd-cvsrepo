head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.2
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.6
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2016.07.04.07.40.44;	author jasper;	state Exp;
branches;
next	1.4;
commitid	xPJxkjy74jK5a0zY;

1.4
date	2016.06.13.08.27.42;	author jasper;	state Exp;
branches;
next	1.3;
commitid	ejafXBoCCLLeBxkH;

1.3
date	2014.11.01.20.43.26;	author zhuk;	state Exp;
branches;
next	1.2;
commitid	41UhNBAROtRyCpAG;

1.2
date	2013.06.20.18.55.14;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.20.09.26.16;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.5
log
@revert back to our initial local patch, the upstream version still appears
to have some issues for at least naddy.
@
text
@$OpenBSD: patch-cmake_modules_TpQtMacros_cmake,v 1.3 2014/11/01 20:43:26 zhuk Exp $

1. Unbreak building with Ninja generator.
https://bugs.freedesktop.org/show_bug.cgi?id=65981

2. Fix linking order.

--- cmake/modules/TpQtMacros.cmake.orig	Tue Sep  9 02:13:43 2014
+++ cmake/modules/TpQtMacros.cmake	Mon Oct  6 00:07:12 2014
@@@@ -217,20 +217,26 @@@@ function(tpqt_client_generator spec group pretty_inclu
             --must-define=IN_TP_QT_HEADER
             --visibility=TP_QT_EXPORT
             ${client_generator_args})
-    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}-body.hpp
-        COMMAND ${PYTHON_EXECUTABLE}
-        ARGS ${ARGS}
-        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
 
-        DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
-                ${CMAKE_SOURCE_DIR}/tools/qt-client-gen.py)
-    add_custom_target(generate_cli-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}-body.hpp)
-    add_dependencies(all-generated-sources generate_cli-${spec}-body)
-
     if (client_generator_depends)
-        add_dependencies(generate_cli-${spec}-body ${client_generator_depends})
+        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}-body.hpp
+            COMMAND ${PYTHON_EXECUTABLE}
+            ARGS ${ARGS}
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                    ${CMAKE_SOURCE_DIR}/tools/qt-client-gen.py ${client_generator_depends})
+    else (client_generator_depends)
+        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}-body.hpp
+            COMMAND ${PYTHON_EXECUTABLE}
+            ARGS ${ARGS}
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                    ${CMAKE_SOURCE_DIR}/tools/qt-client-gen.py)
     endif (client_generator_depends)
 
+    add_custom_target(generate_cli-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}-body.hpp)
+    add_dependencies(all-generated-sources generate_cli-${spec}-body)
+
     tpqt_generate_moc_i_target_deps(${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}.h
                        ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}.moc.hpp
                        "generate_cli-${spec}-body")
@@@@ -253,20 +259,26 @@@@ function(tpqt_future_client_generator spec namespace)
             --extraincludes='<TelepathyQt/future-internal.h>'
             --visibility=TP_QT_NO_EXPORT
             ${future_client_generator_args})
-    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}-body.hpp
-        COMMAND ${PYTHON_EXECUTABLE}
-        ARGS ${ARGS}
-        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
 
-        DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
-                ${CMAKE_SOURCE_DIR}/tools/qt-client-gen.py)
-    add_custom_target(generate_future-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}-body.hpp)
-    add_dependencies(all-generated-sources generate_future-${spec}-body)
-
     if (future_client_generator_depends)
-        add_dependencies(generate_future-${spec}-body ${future_client_generator_depends})
+        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}-body.hpp
+            COMMAND ${PYTHON_EXECUTABLE}
+            ARGS ${ARGS}
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                    ${CMAKE_SOURCE_DIR}/tools/qt-client-gen.py ${future_client_generator_depends})
+    else (future_client_generator_depends)
+        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}-body.hpp
+            COMMAND ${PYTHON_EXECUTABLE}
+            ARGS ${ARGS}
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                    ${CMAKE_SOURCE_DIR}/tools/qt-client-gen.py)
     endif (future_client_generator_depends)
 
+    add_custom_target(generate_future-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}-body.hpp)
+    add_dependencies(all-generated-sources generate_future-${spec}-body)
+
     tpqt_generate_moc_i_target_deps(${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}.h
                        ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}.moc.hpp
                        "generate_future-${spec}-body")
@@@@ -288,20 +300,26 @@@@ function(tpqt_service_generator spec group pretty_incl
             --ifacexml=${CMAKE_CURRENT_BINARY_DIR}/_gen/spec-svc-${spec}.xml
             --visibility=TP_QT_EXPORT
             ${service_generator_args})
-    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.cpp
-        COMMAND ${PYTHON_EXECUTABLE}
-        ARGS ${ARGS}
-        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
 
-        DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
-                ${CMAKE_SOURCE_DIR}/tools/qt-svc-gen.py)
-    add_custom_target(generate_service-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.cpp)
-    add_dependencies(all-generated-service-sources generate_service-${spec}-body)
-
     if (service_generator_depends)
-        add_dependencies(generate_service-${spec}-body ${service_generator_depends})
+        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.cpp
+            COMMAND ${PYTHON_EXECUTABLE}
+            ARGS ${ARGS}
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                    ${CMAKE_SOURCE_DIR}/tools/qt-svc-gen.py ${service_generator_depends})
+    else (service_generator_depends)
+        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.cpp
+            COMMAND ${PYTHON_EXECUTABLE}
+            ARGS ${ARGS}
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                    ${CMAKE_SOURCE_DIR}/tools/qt-svc-gen.py)
     endif (service_generator_depends)
 
+    add_custom_target(generate_service-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.cpp)
+    add_dependencies(all-generated-service-sources generate_service-${spec}-body)
+
     tpqt_generate_moc_i_target_deps(${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.h
                        ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.moc.hpp
                        "generate_service-${spec}-body")
@@@@ -331,22 +349,27 @@@@ function(tpqt_xincludator _TARGET_NAME _INPUT_FILE _OU
     # Gather all .xml files in TelepathyQt and spec/ and make this target depend on those
     file(GLOB depends_xml_files ${CMAKE_SOURCE_DIR}/TelepathyQt/*.xml ${CMAKE_SOURCE_DIR}/spec/*.xml)
 
-    add_custom_command(OUTPUT ${_OUTPUT_FILE}
-
-                       COMMAND ${PYTHON_EXECUTABLE}
-
-                       ARGS ${CMAKE_SOURCE_DIR}/tools/xincludator.py
-                            ${_INPUT_FILE}
-                            ${xincludator_gen_args}
-                            > ${_OUTPUT_FILE}
-
-                       DEPENDS ${CMAKE_SOURCE_DIR}/tools/xincludator.py
-                               ${_INPUT_FILE} ${depends_xml_files})
-    add_custom_target(${_TARGET_NAME} DEPENDS ${_OUTPUT_FILE})
-
     if (xincludator_gen_depends)
-        add_dependencies(${_TARGET_NAME} ${xincludator_gen_depends})
+        add_custom_command(OUTPUT ${_OUTPUT_FILE}
+                           COMMAND ${PYTHON_EXECUTABLE}
+                           ARGS ${CMAKE_SOURCE_DIR}/tools/xincludator.py
+                                ${_INPUT_FILE}
+                                ${xincludator_gen_args}
+                                > ${_OUTPUT_FILE}
+                           DEPENDS ${CMAKE_SOURCE_DIR}/tools/xincludator.py
+                                   ${_INPUT_FILE} ${depends_xml_files} ${xincludator_gen_depends})
+    else (xincludator_gen_depends)
+        add_custom_command(OUTPUT ${_OUTPUT_FILE}
+                           COMMAND ${PYTHON_EXECUTABLE}
+                           ARGS ${CMAKE_SOURCE_DIR}/tools/xincludator.py
+                                ${_INPUT_FILE}
+                                ${xincludator_gen_args}
+                                > ${_OUTPUT_FILE}
+                           DEPENDS ${CMAKE_SOURCE_DIR}/tools/xincludator.py
+                                   ${_INPUT_FILE} ${depends_xml_files})
     endif (xincludator_gen_depends)
+
+    add_custom_target(${_TARGET_NAME} DEPENDS ${_OUTPUT_FILE})
 endfunction(tpqt_xincludator _TARGET_NAME _INPUT_FILE _OUTPUT_FILE)
 
 function(tpqt_constants_gen _TARGET_NAME _SPEC_XML _OUTFILE)
@@@@ -354,24 +377,30 @@@@ function(tpqt_constants_gen _TARGET_NAME _SPEC_XML _OU
     # Gather all .xml files in TelepathyQt and spec/ and make this target depend on those
     file(GLOB depends_xml_files ${CMAKE_SOURCE_DIR}/TelepathyQt/*.xml ${CMAKE_SOURCE_DIR}/spec/*.xml)
 
-    add_custom_command(OUTPUT ${_OUTFILE}
+    if (constants_gen_depends)
+        add_custom_command(OUTPUT ${_OUTFILE}
+                           COMMAND ${PYTHON_EXECUTABLE}
+                           ARGS    ${CMAKE_SOURCE_DIR}/tools/qt-constants-gen.py
+                                   ${constants_gen_args}
+                                   --specxml=${_SPEC_XML}
+                                   > ${_OUTFILE}
+                           DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                                   ${CMAKE_SOURCE_DIR}/tools/qt-constants-gen.py
+                                   ${_SPEC_XML} ${depends_xml_files} ${constants_gen_depends})
+    else (constants_gen_depends)
+        add_custom_command(OUTPUT ${_OUTFILE}
+                           COMMAND ${PYTHON_EXECUTABLE}
+                           ARGS    ${CMAKE_SOURCE_DIR}/tools/qt-constants-gen.py
+                                   ${constants_gen_args}
+                                   --specxml=${_SPEC_XML}
+                                   > ${_OUTFILE}
+                           DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                                   ${CMAKE_SOURCE_DIR}/tools/qt-constants-gen.py
+                                   ${_SPEC_XML} ${depends_xml_files})
+    endif (constants_gen_depends)
 
-                       COMMAND ${PYTHON_EXECUTABLE}
-
-                       ARGS    ${CMAKE_SOURCE_DIR}/tools/qt-constants-gen.py
-                               ${constants_gen_args}
-                               --specxml=${_SPEC_XML}
-                               > ${_OUTFILE}
-
-                       DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
-                               ${CMAKE_SOURCE_DIR}/tools/qt-constants-gen.py
-                               ${_SPEC_XML} ${depends_xml_files})
     add_custom_target(${_TARGET_NAME} DEPENDS ${_OUTFILE})
     add_dependencies(all-generated-sources ${_TARGET_NAME})
-
-    if (constants_gen_depends)
-        add_dependencies(${_TARGET_NAME} ${constants_gen_depends})
-    endif (constants_gen_depends)
 endfunction (tpqt_constants_gen _TARGET_NAME _SPEC_XML _OUTFILE)
 
 function(tpqt_types_gen _TARGET_NAME _SPEC_XML _OUTFILE_DECL _OUTFILE_IMPL _NAMESPACE _REALINCLUDE _PRETTYINCLUDE)
@@@@ -379,32 +408,52 @@@@ function(tpqt_types_gen _TARGET_NAME _SPEC_XML _OUTFIL
     # Gather all .xml files in TelepathyQt and spec/ and make this target depend on those
     file(GLOB depends_xml_files ${CMAKE_SOURCE_DIR}/TelepathyQt/*.xml ${CMAKE_SOURCE_DIR}/spec/*.xml)
 
-    add_custom_command(OUTPUT ${_OUTFILE_DECL} ${_OUTFILE_IMPL}
-                       COMMAND ${PYTHON_EXECUTABLE}
-                       ARGS ${CMAKE_SOURCE_DIR}/tools/qt-types-gen.py
-                            --namespace=${_NAMESPACE}
-                            --declfile=${_OUTFILE_DECL}
-                            --implfile=${_OUTFILE_IMPL}
-                            --realinclude=${_REALINCLUDE}
-                            --prettyinclude=${_PRETTYINCLUDE}
-                            ${types_gen_args}
-                            --specxml=${_SPEC_XML}
+    if (types_gen_depends)
+        add_custom_command(OUTPUT ${_OUTFILE_DECL} ${_OUTFILE_IMPL}
+                           COMMAND ${PYTHON_EXECUTABLE}
+                           ARGS ${CMAKE_SOURCE_DIR}/tools/qt-types-gen.py
+                                --namespace=${_NAMESPACE}
+                                --declfile=${_OUTFILE_DECL}
+                                --implfile=${_OUTFILE_IMPL}
+                                --realinclude=${_REALINCLUDE}
+                                --prettyinclude=${_PRETTYINCLUDE}
+                                ${types_gen_args}
+                                --specxml=${_SPEC_XML}
+                           DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                                   ${CMAKE_SOURCE_DIR}/tools/qt-types-gen.py
+                                   ${_SPEC_XML} ${depends_xml_files} ${types_gen_depends})
+    else (types_gen_depends)
+        add_custom_command(OUTPUT ${_OUTFILE_DECL} ${_OUTFILE_IMPL}
+                           COMMAND ${PYTHON_EXECUTABLE}
+                           ARGS ${CMAKE_SOURCE_DIR}/tools/qt-types-gen.py
+                                --namespace=${_NAMESPACE}
+                                --declfile=${_OUTFILE_DECL}
+                                --implfile=${_OUTFILE_IMPL}
+                                --realinclude=${_REALINCLUDE}
+                                --prettyinclude=${_PRETTYINCLUDE}
+                                ${types_gen_args}
+                                --specxml=${_SPEC_XML}
+                           DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                                   ${CMAKE_SOURCE_DIR}/tools/qt-types-gen.py
+                                   ${_SPEC_XML} ${depends_xml_files})
+    endif (types_gen_depends)
 
-                       DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
-                               ${CMAKE_SOURCE_DIR}/tools/qt-types-gen.py
-                               ${_SPEC_XML} ${depends_xml_files})
     add_custom_target(${_TARGET_NAME} DEPENDS ${_OUTFILE_IMPL})
     add_dependencies(all-generated-sources ${_TARGET_NAME})
-
-    if (types_gen_depends)
-        add_dependencies(${_TARGET_NAME} ${types_gen_depends})
-    endif (types_gen_depends)
 endfunction(tpqt_types_gen _TARGET_NAME _SPEC_XML _OUTFILE_DECL _OUTFILE_IMPL _NAMESPACE _REALINCLUDE _PRETTYINCLUDE)
 
 macro(tpqt_add_generic_unit_test _fancyName _name)
     tpqt_generate_moc_i(${_name}.cpp ${CMAKE_CURRENT_BINARY_DIR}/_gen/${_name}.cpp.moc.hpp)
     add_executable(test-${_name} ${_name}.cpp ${CMAKE_CURRENT_BINARY_DIR}/_gen/${_name}.cpp.moc.hpp)
-    target_link_libraries(test-${_name} ${QT_QTCORE_LIBRARY} ${QT_QTNETWORK_LIBRARY} ${QT_QTXML_LIBRARY} ${QT_QTTEST_LIBRARY} telepathy-qt${QT_VERSION_MAJOR} tp-qt-tests ${TP_QT_EXECUTABLE_LINKER_FLAGS} ${ARGN})
+    target_link_libraries(test-${_name}
+      ${TP_QT_EXECUTABLE_LINKER_FLAGS}
+      tp-qt-tests ${ARGN}
+      telepathy-qt${QT_VERSION_MAJOR}
+      ${QT_QTTEST_LIBRARY}
+      ${QT_QTXML_LIBRARY}
+      ${QT_QTNETWORK_LIBRARY}
+      ${QT_QTCORE_LIBRARY}
+      )
     add_test(${_fancyName} ${SH} ${CMAKE_CURRENT_BINARY_DIR}/runGenericTest.sh ${CMAKE_CURRENT_BINARY_DIR}/test-${_name})
     list(APPEND _telepathy_qt_test_cases test-${_name})
 
@@@@ -415,7 +464,17 @@@@ endmacro(tpqt_add_generic_unit_test _fancyName _name)
 macro(tpqt_add_dbus_unit_test _fancyName _name)
     tpqt_generate_moc_i(${_name}.cpp ${CMAKE_CURRENT_BINARY_DIR}/_gen/${_name}.cpp.moc.hpp)
     add_executable(test-${_name} ${_name}.cpp ${CMAKE_CURRENT_BINARY_DIR}/_gen/${_name}.cpp.moc.hpp)
-    target_link_libraries(test-${_name} ${QT_QTCORE_LIBRARY} ${QT_QTDBUS_LIBRARY} ${QT_QTNETWORK_LIBRARY} ${QT_QTXML_LIBRARY} ${QT_QTTEST_LIBRARY} telepathy-qt${QT_VERSION_MAJOR} tp-qt-tests ${TP_QT_EXECUTABLE_LINKER_FLAGS} ${ARGN})
+    target_link_libraries(test-${_name}
+      ${TP_QT_EXECUTABLE_LINKER_FLAGS}
+      ${ARGN}
+      tp-qt-tests
+      telepathy-qt${QT_VERSION_MAJOR}
+      ${QT_QTTEST_LIBRARY}
+      ${QT_QTDBUS_LIBRARY}
+      ${QT_QTXML_LIBRARY}
+      ${QT_QTNETWORK_LIBRARY}
+      ${QT_QTCORE_LIBRARY}
+      )
     set(with_session_bus ${CMAKE_CURRENT_BINARY_DIR}/runDbusTest.sh)
     add_test(${_fancyName} ${SH} ${with_session_bus} ${CMAKE_CURRENT_BINARY_DIR}/test-${_name})
     list(APPEND _telepathy_qt_test_cases test-${_name})
@


1.4
log
@sync patch with upstream's commit
@
text
@d4 1
a4 1
https://cgit.freedesktop.org/telepathy/telepathy-qt/commit/?id=d9354dfe8cca364e4a8c3a44c302ceb714c53911
d8 10
a17 4
--- cmake/modules/TpQtMacros.cmake.orig	Tue Sep  9 00:13:43 2014
+++ cmake/modules/TpQtMacros.cmake	Mon Jun 13 10:01:38 2016
@@@@ -223,7 +223,9 @@@@ function(tpqt_client_generator spec group pretty_inclu
         WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
d19 1
a19 1
         DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
d21 19
a39 5
+                ${CMAKE_SOURCE_DIR}/tools/qt-client-gen.py
+                ${CMAKE_CURRENT_BINARY_DIR}/_gen/stable-spec.xml
+                ${CMAKE_CURRENT_BINARY_DIR}/_gen/spec-${spec}.xml)
     add_custom_target(generate_cli-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}-body.hpp)
     add_dependencies(all-generated-sources generate_cli-${spec}-body)
d41 14
a54 2
@@@@ -259,7 +261,9 @@@@ function(tpqt_future_client_generator spec namespace)
         WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
d56 1
a56 1
         DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
d58 19
a76 5
+                ${CMAKE_SOURCE_DIR}/tools/qt-client-gen.py
+                ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-spec.xml
+                ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}.xml)
     add_custom_target(generate_future-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}-body.hpp)
     add_dependencies(all-generated-sources generate_future-${spec}-body)
d78 14
a91 2
@@@@ -294,7 +298,9 @@@@ function(tpqt_service_generator spec group pretty_incl
         WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
d93 1
a93 1
         DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
d95 168
a262 5
+                ${CMAKE_SOURCE_DIR}/tools/qt-svc-gen.py
+                ${CMAKE_CURRENT_BINARY_DIR}/_gen/stable-spec.xml
+                ${CMAKE_CURRENT_BINARY_DIR}/_gen/spec-svc-${spec}.xml)
     add_custom_target(generate_service-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.cpp)
     add_dependencies(all-generated-service-sources generate_service-${spec}-body)
a263 1
@@@@ -404,7 +410,15 @@@@ endfunction(tpqt_types_gen _TARGET_NAME _SPEC_XML _OUT
d280 1
a280 1
@@@@ -415,7 +429,17 @@@@ endmacro(tpqt_add_generic_unit_test _fancyName _name)
d289 1
a289 1
+      telepathy-qt${QT_VERSION_MAJOR}   
@


1.3
log
@Update telepathy-qt to 0.9.5, required by upcoming KDE 4.14.
@
text
@d1 1
a1 1
$OpenBSD: patch-cmake_modules_TpQtMacros_cmake,v 1.2 2013/06/20 18:55:14 jasper Exp $
d4 1
a4 1
https://bugs.freedesktop.org/show_bug.cgi?id=65981
d8 4
a11 10
--- cmake/modules/TpQtMacros.cmake.orig	Tue Sep  9 02:13:43 2014
+++ cmake/modules/TpQtMacros.cmake	Mon Oct  6 00:07:12 2014
@@@@ -217,20 +217,26 @@@@ function(tpqt_client_generator spec group pretty_inclu
             --must-define=IN_TP_QT_HEADER
             --visibility=TP_QT_EXPORT
             ${client_generator_args})
-    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}-body.hpp
-        COMMAND ${PYTHON_EXECUTABLE}
-        ARGS ${ARGS}
-        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
d13 1
a13 1
-        DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
d15 5
a19 19
-    add_custom_target(generate_cli-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}-body.hpp)
-    add_dependencies(all-generated-sources generate_cli-${spec}-body)
-
     if (client_generator_depends)
-        add_dependencies(generate_cli-${spec}-body ${client_generator_depends})
+        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}-body.hpp
+            COMMAND ${PYTHON_EXECUTABLE}
+            ARGS ${ARGS}
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                    ${CMAKE_SOURCE_DIR}/tools/qt-client-gen.py ${client_generator_depends})
+    else (client_generator_depends)
+        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}-body.hpp
+            COMMAND ${PYTHON_EXECUTABLE}
+            ARGS ${ARGS}
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                    ${CMAKE_SOURCE_DIR}/tools/qt-client-gen.py)
     endif (client_generator_depends)
d21 2
a22 14
+    add_custom_target(generate_cli-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}-body.hpp)
+    add_dependencies(all-generated-sources generate_cli-${spec}-body)
+
     tpqt_generate_moc_i_target_deps(${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}.h
                        ${CMAKE_CURRENT_BINARY_DIR}/_gen/cli-${spec}.moc.hpp
                        "generate_cli-${spec}-body")
@@@@ -253,20 +259,26 @@@@ function(tpqt_future_client_generator spec namespace)
             --extraincludes='<TelepathyQt/future-internal.h>'
             --visibility=TP_QT_NO_EXPORT
             ${future_client_generator_args})
-    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}-body.hpp
-        COMMAND ${PYTHON_EXECUTABLE}
-        ARGS ${ARGS}
-        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
d24 1
a24 1
-        DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
d26 5
a30 19
-    add_custom_target(generate_future-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}-body.hpp)
-    add_dependencies(all-generated-sources generate_future-${spec}-body)
-
     if (future_client_generator_depends)
-        add_dependencies(generate_future-${spec}-body ${future_client_generator_depends})
+        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}-body.hpp
+            COMMAND ${PYTHON_EXECUTABLE}
+            ARGS ${ARGS}
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                    ${CMAKE_SOURCE_DIR}/tools/qt-client-gen.py ${future_client_generator_depends})
+    else (future_client_generator_depends)
+        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}-body.hpp
+            COMMAND ${PYTHON_EXECUTABLE}
+            ARGS ${ARGS}
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                    ${CMAKE_SOURCE_DIR}/tools/qt-client-gen.py)
     endif (future_client_generator_depends)
d32 2
a33 14
+    add_custom_target(generate_future-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}-body.hpp)
+    add_dependencies(all-generated-sources generate_future-${spec}-body)
+
     tpqt_generate_moc_i_target_deps(${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}.h
                        ${CMAKE_CURRENT_BINARY_DIR}/_gen/future-${spec}.moc.hpp
                        "generate_future-${spec}-body")
@@@@ -288,20 +300,26 @@@@ function(tpqt_service_generator spec group pretty_incl
             --ifacexml=${CMAKE_CURRENT_BINARY_DIR}/_gen/spec-svc-${spec}.xml
             --visibility=TP_QT_EXPORT
             ${service_generator_args})
-    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.cpp
-        COMMAND ${PYTHON_EXECUTABLE}
-        ARGS ${ARGS}
-        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
d35 1
a35 1
-        DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
d37 5
a41 168
-    add_custom_target(generate_service-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.cpp)
-    add_dependencies(all-generated-service-sources generate_service-${spec}-body)
-
     if (service_generator_depends)
-        add_dependencies(generate_service-${spec}-body ${service_generator_depends})
+        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.cpp
+            COMMAND ${PYTHON_EXECUTABLE}
+            ARGS ${ARGS}
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                    ${CMAKE_SOURCE_DIR}/tools/qt-svc-gen.py ${service_generator_depends})
+    else (service_generator_depends)
+        add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.h ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.cpp
+            COMMAND ${PYTHON_EXECUTABLE}
+            ARGS ${ARGS}
+            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+            DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                    ${CMAKE_SOURCE_DIR}/tools/qt-svc-gen.py)
     endif (service_generator_depends)
 
+    add_custom_target(generate_service-${spec}-body DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.cpp)
+    add_dependencies(all-generated-service-sources generate_service-${spec}-body)
+
     tpqt_generate_moc_i_target_deps(${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.h
                        ${CMAKE_CURRENT_BINARY_DIR}/_gen/svc-${spec}.moc.hpp
                        "generate_service-${spec}-body")
@@@@ -331,22 +349,27 @@@@ function(tpqt_xincludator _TARGET_NAME _INPUT_FILE _OU
     # Gather all .xml files in TelepathyQt and spec/ and make this target depend on those
     file(GLOB depends_xml_files ${CMAKE_SOURCE_DIR}/TelepathyQt/*.xml ${CMAKE_SOURCE_DIR}/spec/*.xml)
 
-    add_custom_command(OUTPUT ${_OUTPUT_FILE}
-
-                       COMMAND ${PYTHON_EXECUTABLE}
-
-                       ARGS ${CMAKE_SOURCE_DIR}/tools/xincludator.py
-                            ${_INPUT_FILE}
-                            ${xincludator_gen_args}
-                            > ${_OUTPUT_FILE}
-
-                       DEPENDS ${CMAKE_SOURCE_DIR}/tools/xincludator.py
-                               ${_INPUT_FILE} ${depends_xml_files})
-    add_custom_target(${_TARGET_NAME} DEPENDS ${_OUTPUT_FILE})
-
     if (xincludator_gen_depends)
-        add_dependencies(${_TARGET_NAME} ${xincludator_gen_depends})
+        add_custom_command(OUTPUT ${_OUTPUT_FILE}
+                           COMMAND ${PYTHON_EXECUTABLE}
+                           ARGS ${CMAKE_SOURCE_DIR}/tools/xincludator.py
+                                ${_INPUT_FILE}
+                                ${xincludator_gen_args}
+                                > ${_OUTPUT_FILE}
+                           DEPENDS ${CMAKE_SOURCE_DIR}/tools/xincludator.py
+                                   ${_INPUT_FILE} ${depends_xml_files} ${xincludator_gen_depends})
+    else (xincludator_gen_depends)
+        add_custom_command(OUTPUT ${_OUTPUT_FILE}
+                           COMMAND ${PYTHON_EXECUTABLE}
+                           ARGS ${CMAKE_SOURCE_DIR}/tools/xincludator.py
+                                ${_INPUT_FILE}
+                                ${xincludator_gen_args}
+                                > ${_OUTPUT_FILE}
+                           DEPENDS ${CMAKE_SOURCE_DIR}/tools/xincludator.py
+                                   ${_INPUT_FILE} ${depends_xml_files})
     endif (xincludator_gen_depends)
+
+    add_custom_target(${_TARGET_NAME} DEPENDS ${_OUTPUT_FILE})
 endfunction(tpqt_xincludator _TARGET_NAME _INPUT_FILE _OUTPUT_FILE)
 
 function(tpqt_constants_gen _TARGET_NAME _SPEC_XML _OUTFILE)
@@@@ -354,24 +377,30 @@@@ function(tpqt_constants_gen _TARGET_NAME _SPEC_XML _OU
     # Gather all .xml files in TelepathyQt and spec/ and make this target depend on those
     file(GLOB depends_xml_files ${CMAKE_SOURCE_DIR}/TelepathyQt/*.xml ${CMAKE_SOURCE_DIR}/spec/*.xml)
 
-    add_custom_command(OUTPUT ${_OUTFILE}
+    if (constants_gen_depends)
+        add_custom_command(OUTPUT ${_OUTFILE}
+                           COMMAND ${PYTHON_EXECUTABLE}
+                           ARGS    ${CMAKE_SOURCE_DIR}/tools/qt-constants-gen.py
+                                   ${constants_gen_args}
+                                   --specxml=${_SPEC_XML}
+                                   > ${_OUTFILE}
+                           DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                                   ${CMAKE_SOURCE_DIR}/tools/qt-constants-gen.py
+                                   ${_SPEC_XML} ${depends_xml_files} ${constants_gen_depends})
+    else (constants_gen_depends)
+        add_custom_command(OUTPUT ${_OUTFILE}
+                           COMMAND ${PYTHON_EXECUTABLE}
+                           ARGS    ${CMAKE_SOURCE_DIR}/tools/qt-constants-gen.py
+                                   ${constants_gen_args}
+                                   --specxml=${_SPEC_XML}
+                                   > ${_OUTFILE}
+                           DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                                   ${CMAKE_SOURCE_DIR}/tools/qt-constants-gen.py
+                                   ${_SPEC_XML} ${depends_xml_files})
+    endif (constants_gen_depends)
 
-                       COMMAND ${PYTHON_EXECUTABLE}
-
-                       ARGS    ${CMAKE_SOURCE_DIR}/tools/qt-constants-gen.py
-                               ${constants_gen_args}
-                               --specxml=${_SPEC_XML}
-                               > ${_OUTFILE}
-
-                       DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
-                               ${CMAKE_SOURCE_DIR}/tools/qt-constants-gen.py
-                               ${_SPEC_XML} ${depends_xml_files})
     add_custom_target(${_TARGET_NAME} DEPENDS ${_OUTFILE})
     add_dependencies(all-generated-sources ${_TARGET_NAME})
-
-    if (constants_gen_depends)
-        add_dependencies(${_TARGET_NAME} ${constants_gen_depends})
-    endif (constants_gen_depends)
 endfunction (tpqt_constants_gen _TARGET_NAME _SPEC_XML _OUTFILE)
 
 function(tpqt_types_gen _TARGET_NAME _SPEC_XML _OUTFILE_DECL _OUTFILE_IMPL _NAMESPACE _REALINCLUDE _PRETTYINCLUDE)
@@@@ -379,32 +408,52 @@@@ function(tpqt_types_gen _TARGET_NAME _SPEC_XML _OUTFIL
     # Gather all .xml files in TelepathyQt and spec/ and make this target depend on those
     file(GLOB depends_xml_files ${CMAKE_SOURCE_DIR}/TelepathyQt/*.xml ${CMAKE_SOURCE_DIR}/spec/*.xml)
 
-    add_custom_command(OUTPUT ${_OUTFILE_DECL} ${_OUTFILE_IMPL}
-                       COMMAND ${PYTHON_EXECUTABLE}
-                       ARGS ${CMAKE_SOURCE_DIR}/tools/qt-types-gen.py
-                            --namespace=${_NAMESPACE}
-                            --declfile=${_OUTFILE_DECL}
-                            --implfile=${_OUTFILE_IMPL}
-                            --realinclude=${_REALINCLUDE}
-                            --prettyinclude=${_PRETTYINCLUDE}
-                            ${types_gen_args}
-                            --specxml=${_SPEC_XML}
+    if (types_gen_depends)
+        add_custom_command(OUTPUT ${_OUTFILE_DECL} ${_OUTFILE_IMPL}
+                           COMMAND ${PYTHON_EXECUTABLE}
+                           ARGS ${CMAKE_SOURCE_DIR}/tools/qt-types-gen.py
+                                --namespace=${_NAMESPACE}
+                                --declfile=${_OUTFILE_DECL}
+                                --implfile=${_OUTFILE_IMPL}
+                                --realinclude=${_REALINCLUDE}
+                                --prettyinclude=${_PRETTYINCLUDE}
+                                ${types_gen_args}
+                                --specxml=${_SPEC_XML}
+                           DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                                   ${CMAKE_SOURCE_DIR}/tools/qt-types-gen.py
+                                   ${_SPEC_XML} ${depends_xml_files} ${types_gen_depends})
+    else (types_gen_depends)
+        add_custom_command(OUTPUT ${_OUTFILE_DECL} ${_OUTFILE_IMPL}
+                           COMMAND ${PYTHON_EXECUTABLE}
+                           ARGS ${CMAKE_SOURCE_DIR}/tools/qt-types-gen.py
+                                --namespace=${_NAMESPACE}
+                                --declfile=${_OUTFILE_DECL}
+                                --implfile=${_OUTFILE_IMPL}
+                                --realinclude=${_REALINCLUDE}
+                                --prettyinclude=${_PRETTYINCLUDE}
+                                ${types_gen_args}
+                                --specxml=${_SPEC_XML}
+                           DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
+                                   ${CMAKE_SOURCE_DIR}/tools/qt-types-gen.py
+                                   ${_SPEC_XML} ${depends_xml_files})
+    endif (types_gen_depends)
 
-                       DEPENDS ${CMAKE_SOURCE_DIR}/tools/libqtcodegen.py
-                               ${CMAKE_SOURCE_DIR}/tools/qt-types-gen.py
-                               ${_SPEC_XML} ${depends_xml_files})
     add_custom_target(${_TARGET_NAME} DEPENDS ${_OUTFILE_IMPL})
     add_dependencies(all-generated-sources ${_TARGET_NAME})
-
-    if (types_gen_depends)
-        add_dependencies(${_TARGET_NAME} ${types_gen_depends})
-    endif (types_gen_depends)
 endfunction(tpqt_types_gen _TARGET_NAME _SPEC_XML _OUTFILE_DECL _OUTFILE_IMPL _NAMESPACE _REALINCLUDE _PRETTYINCLUDE)
d43 1
d60 1
a60 1
@@@@ -415,7 +464,17 @@@@ endmacro(tpqt_add_generic_unit_test _fancyName _name)
d69 1
a69 1
+      telepathy-qt${QT_VERSION_MAJOR}
@


1.2
log
@submitted upstream
@
text
@d1 1
a1 1
$OpenBSD: patch-cmake_modules_TpQtMacros_cmake,v 1.1 2013/06/20 09:26:16 dcoppa Exp $
d3 1
a3 1
Unbreak building with Ninja generator.
d6 4
a9 2
--- cmake/modules/TpQtMacros.cmake.orig	Thu Jun 20 06:54:18 2013
+++ cmake/modules/TpQtMacros.cmake	Thu Jun 20 08:04:54 2013
d209 1
a209 1
@@@@ -379,26 +408,38 @@@@ function(tpqt_types_gen _TARGET_NAME _SPEC_XML _OUTFIL
d265 34
@


1.1
log
@Unbreak building with Ninja generator.

OK espie@@, jasper@@, zhuk@@
@
text
@d1 1
a1 1
$OpenBSD$
d4 1
@

