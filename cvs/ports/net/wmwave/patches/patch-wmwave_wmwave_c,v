head	1.4;
access;
symbols
	OPENBSD_6_0:1.3.0.50
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.46
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.48
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.44
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.42
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.40
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.38
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.36
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.34
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.32
	OPENBSD_5_0:1.3.0.30
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.28
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.24
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.2.0.12
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.10
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.8
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	wilfried_20010114:1.1.1.1
	wilfried:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2016.12.25.16.49.01;	author jca;	state Exp;
branches;
next	1.3;
commitid	JLMoRFg7p19xx343;

1.3
date	2004.04.23.20.29.20;	author jcs;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.17.16.04.24;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.14.14.10.50;	author wilfried;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.14.14.10.50;	author wilfried;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Regen patch
@
text
@$OpenBSD: patch-wmwave_wmwave_c,v 1.3 2004/04/23 20:29:20 jcs Exp $
--- wmwave.c.orig	Fri Aug 20 15:44:21 1999
+++ wmwave.c	Sun Dec 25 17:48:02 2016
@@@@ -32,7 +32,6 @@@@
  *
  */
 
-
 #include <stdlib.h>
 #include <stdio.h>
 #include <time.h>
@@@@ -44,6 +43,7 @@@@
 #include <math.h>
 #include <limits.h>
 #include <errno.h>
+#include <err.h>
 #include <signal.h>
 
 #include <sys/wait.h>
@@@@ -57,6 +57,11 @@@@
 #include <X11/xpm.h>
 #include <X11/extensions/shape.h>
 
+#include <sys/socket.h>
+#include <net/if.h>
+#include <netinet/in.h>
+#include <netinet/if_ether.h>
+#include <dev/ic/if_wi_ieee.h>
 
 #include "wmgeneral.h"
 
@@@@ -67,7 +72,10 @@@@ int wmwave_mask_width = 64;
 int wmwave_mask_height = 64;
 
 #define WMWAVE_VERSION "0.4"
+#define WI_WORDS 0x03
 
+#define WI_INTERFACE "wi0"
+
 int update_rate=100000;
 
 char *ProgName;
@@@@ -75,8 +83,8 @@@@ char *ProgName;
 time_t curtime;
 time_t prevtime;
 
-int mode = 0;    // default: no card detected
-int screen = 0;  // default: Quality screen is displayed
+int mode = 0;		// default: no card detected
+int screen = 0;	// default: Quality screen is displayed
 
 void usage(void);
 void printversion(void);
@@@@ -86,272 +94,270 @@@@ void wmwave_routine(int, char **);
 void DrawBar(float percent, int dx, int dy);
 void DrawGreenBar(float percent, int dx, int dy);
 
+static void wi_getval __P((struct wi_req *));
+
 inline void DrawBar(float percent, int dx, int dy) {
-  int tx;
-  
-  tx = (float)((float)54 * ((float)percent / (float)100.0));
-  copyXPMArea(67, 36, tx, 4, dx, dy);
-  copyXPMArea(67, 43, 54-tx, 4, dx+tx, dy); 
+	int tx;
+
+	percent = abs(percent);
+	tx = (float)((float)54 * ((float)percent / (float)100.0));
+	copyXPMArea(67, 36, tx, 4, dx, dy);
+	copyXPMArea(67, 43, 54-tx, 4, dx+tx, dy); 
 }
 
-
 inline void DrawGreenBar(float percent, int dx, int dy) {
-  int tx;
-  
-  tx = (float)((float)54 * ((float)percent / (float)100.0));
-  copyXPMArea(67, 58, tx, 4, dx, dy);
-  copyXPMArea(67, 43, 54-tx, 4, dx+tx, dy); 
+	int tx;
+ 
+	percent = abs(percent);
+	tx = (float)((float)54 * ((float)percent / (float)100.0));
+	copyXPMArea(67, 58, tx, 4, dx, dy);
+	copyXPMArea(67, 43, 54-tx, 4, dx+tx, dy); 
 }
 
 inline void DrawRedDot() {
-  copyXPMArea(80, 65, 6, 6, 52, 5);
+	copyXPMArea(80, 65, 6, 6, 52, 5);
 }
 
 inline void DrawYellowDot() {
-  copyXPMArea(86, 65, 6, 6, 52, 5);
+	copyXPMArea(86, 65, 6, 6, 52, 5);
 }
 
 inline void DrawGreenDot() {
-  copyXPMArea(92, 65, 6, 6, 52, 5);
+	copyXPMArea(92, 65, 6, 6, 52, 5);
 }
 
 inline void DrawEmptyDot() {
-  copyXPMArea(98, 65, 6, 6, 52, 5);
+	copyXPMArea(98, 65, 6, 6, 52, 5);
 }
 
 float min (float x, float y) {
-  if (x < y) {return x;}
-  else {return y;}
+	if (x < y) {
+		return x;
+	} else {
+		return y;
+	}
 }
 
-/*
- * Find CPU times for all processes
- */
 void DisplayWireless(void) {
-  FILE *wireless;   // File handle for /proc/net/wireless
-					      
-  char line[255];
-  char iface[5];
-  char status [3];
-  float link = 0;
-  float level = 0;
-  float noise = 0;
-  int nwid = 0;
-  int crypt = 0;
-  int misc = 0;
-  
-  if ((wireless = fopen ("/proc/net/wireless", "r")) != NULL)
-    {
-      fgets(line,sizeof(line),wireless);
-      fgets(line,sizeof(line),wireless);
-      if (fgets(line,sizeof(line),wireless) == NULL) {
-	mode = 0;
-      }
-      else {
-	sscanf(line,"%s %s %f %f %f %d %d %d",
-	       iface,status,&link,&level,&noise,&nwid,&crypt,&misc);
-	mode = 1;
-      }
-      fclose(wireless);
-      
-      
-      /* Print channel information, and signal ratio */
-      
-      switch (mode) {
-      case 1: BlitString("Quality",4,4);
-	if (link<=10) {DrawRedDot ();}
-	else if (link<=20) {DrawYellowDot ();}
-	else {DrawGreenDot();};
-	BlitString("Link     ", 4,18);	
-	DrawBar(min ((int)(link * 1.8), 100.0), 4, 27);
-	BlitString("Level    ", 4,32);
-	DrawGreenBar(min ((int)(level * 0.3), 100.0), 4, 41);
-	BlitString("Noise    ", 4,46);
-	DrawGreenBar(min ((int)(noise * 0.3), 100.0), 4, 55);
-	break;
-      case 0: BlitString("NO CARD",4,4);
-	DrawEmptyDot();
-	BlitString("         ", 4,18);
-	DrawBar(0.0, 4, 27);
-	BlitString("         ", 4,32);
-	DrawGreenBar(0.0, 4, 41);
-	BlitString("         ", 4,46);
-	DrawGreenBar(0.0, 4, 55);
-	break;
-      };
-    }
-  else {
-    printf ("Wirless device /proc/net/wireless not found\nEnable radio networking and recompile your kernel\n");
-    exit (0);
-  }
+	float link = 0;
+	float level = 0;
+	float noise = 0;
+	struct wi_req wreq;
+
+	bzero((char *)&wreq, sizeof(wreq));
+
+	wreq.wi_len = WI_MAX_DATALEN;
+	wreq.wi_type = WI_RID_COMMS_QUALITY;
+
+	wi_getval(&wreq);
+
+	link = wreq.wi_val[0];
+	level = wreq.wi_val[1];
+	noise = wreq.wi_val[2];
+
+	switch (mode) {
+		case 1:
+			BlitString("Quality",4,4);
+			if (link <= 10) {
+				DrawRedDot();
+			} else if (link <= 40) {
+				DrawYellowDot();
+			} else {
+				DrawGreenDot();
+			}
+			BlitString("Link     ", 4, 18);	
+			DrawBar(min (link, 100.0), 4, 27);
+			BlitString("Level    ", 4, 32);
+			if (level == 0)
+				DrawGreenBar(min ((level), 100.0), 4, 41);
+			else
+				DrawGreenBar(min ((level - 27), 100.0), 4, 41);
+			BlitString("Noise    ", 4, 46);
+			DrawGreenBar(min ((noise - 27), 100.0), 4, 55);
+			break;
+		case 0:
+			BlitString("NO CARD", 4, 4);
+			DrawEmptyDot();
+			BlitString("         ", 4, 18);
+			DrawBar(0.0, 4, 27);
+			BlitString("         ", 4, 32);
+			DrawGreenBar(0.0, 4, 41);
+			BlitString("         ", 4, 46);
+			DrawGreenBar(0.0, 4, 55);
+			break;
+	}
 }
 
 /* SIGCHLD handler */
 void sig_chld(int signo)
 {
-  waitpid((pid_t) -1, NULL, WNOHANG);
-  signal(SIGCHLD, sig_chld);
+	waitpid((pid_t) -1, NULL, WNOHANG);
+	signal(SIGCHLD, sig_chld);
 }
 
 int main(int argc, char *argv[]) {
-  int i;
-  
-  /* Parse Command Line */
-  
-  signal(SIGCHLD, sig_chld);
-  ProgName = argv[0];
-  if (strlen(ProgName) >= 5)
-    ProgName += (strlen(ProgName) - 5);
-  
-  for (i=1; i<argc; i++) {
-    char *arg = argv[i];
-    
-    if (*arg=='-') {
-      switch (arg[1]) {
-      case 'd' :
-	if (strcmp(arg+1, "display")) {
-	  usage();
-	  exit(1);
+	int i;
+
+	/* Parse Command Line */
+	signal(SIGCHLD, sig_chld);
+	ProgName = argv[0];
+	if (strlen(ProgName) >= 5)
+		ProgName += (strlen(ProgName) - 5);
+
+	for (i=1; i<argc; i++) {
+		char *arg = argv[i];
+
+		if (*arg == '-') {
+			switch (arg[1]) {
+				case 'd':
+					if (strcmp(arg + 1, "display")) {
+						usage();
+						exit(1);
+					}
+					break;
+				case 'g':
+					if (strcmp(arg + 1, "geometry")) {
+						usage();
+						exit(1);
+					}
+					break;
+				case 'v':
+					printversion();
+					exit(0);
+					break;
+				case 'r':
+					if (argc > (i + 1)) {
+						update_rate = (atoi(argv[i + 1]) * 1000);
+						i++;
+					}
+					break;
+				default:
+					usage();
+					exit(0);
+					break;
+			}
+		}
 	}
-	break;
-      case 'g' :
-	if (strcmp(arg+1, "geometry")) {
-	  usage();
-	  exit(1);
-	}
-	break;
-      case 'v' :
-	printversion();
-	exit(0);
-	break;
-      case 'r':
-	if (argc > (i+1)) {
-	  update_rate = (atoi(argv[i+1]) * 1000);
-	  i++;
-	}
-	break;
-      default:
-	usage();
-	exit(0);
-	break;
-      }
-    }
-  }
-  
-  wmwave_routine(argc, argv);
-  
-  return 0;
+
+	wmwave_routine(argc, argv);
+
+	return 0;
 }
 
-/*
- * Main loop
- */
+/* Main loop */
 void wmwave_routine(int argc, char **argv) {
-  XEvent Event;
-  struct timeval tv={0,0};
-  struct timeval last={0,0};
-  
-  createXBMfromXPM(wmwave_mask_bits, wmwave_master_xpm, wmwave_mask_width, wmwave_mask_height);
-  
-  openXwindow(argc, argv, wmwave_master_xpm, wmwave_mask_bits, wmwave_mask_width, wmwave_mask_height);
-  
-  RedrawWindow();
-  
-  
-  while (1) {
-    
-    curtime = time(0);
-    
-    if (1) {
-      memcpy(&last, &tv, sizeof(tv));
-      
-      /*
-       * Update display
-       */
-      DisplayWireless();
-      
-      RedrawWindow();
-    }
-    
-    /*
-     * X Events
-     */
-    while (XPending(display)) {
-      XNextEvent(display, &Event);
-      switch (Event.type) {
-      case Expose:
+	XEvent Event;
+	struct timeval tv={0,0};
+	struct timeval last={0,0};
+
+	createXBMfromXPM(wmwave_mask_bits, wmwave_master_xpm, wmwave_mask_width, wmwave_mask_height);
+
+	openXwindow(argc, argv, wmwave_master_xpm, wmwave_mask_bits, wmwave_mask_width, wmwave_mask_height);
+
 	RedrawWindow();
-	break;
-      case DestroyNotify:
-	XCloseDisplay(display);
-	exit(0);
-      case ButtonPress:
-	switch (screen) {
-	case 0: screen=1; break;
-	case 1: screen=0; break;
-	};
-	break;
-      }
-    }
-    
-    usleep(update_rate);
-  }
+
+	while (1) {
+		curtime = time(0);
+		memcpy(&last, &tv, sizeof(tv));
+
+		/* Update display */
+		DisplayWireless();
+		RedrawWindow();
+
+		/* X Events */
+		while (XPending(display)) {
+			XNextEvent(display, &Event);
+			switch (Event.type) {
+				case Expose:
+					RedrawWindow();
+					break;
+				case DestroyNotify:
+					XCloseDisplay(display);
+					exit(0);
+				case ButtonPress:
+					switch (screen) {
+						case 0: screen=1; break;
+						case 1: screen=0; break;
+					}
+					break;
+			}
+		}
+		usleep(update_rate);
+	}
 }
 
-/*
- * Blits a string at given co-ordinates
- */
+/* Blits a string at given co-ordinates */
 void BlitString(char *name, int x, int y) {
-  int	i;
-  int	c;
-  int	k;
-  
-  k = x;
-  for (i=0; name[i]; i++)
-    {
-      
-      c = toupper(name[i]); 
-      if (c >= 'A' && c <= 'Z')
-        {   // its a letter
-		 c -= 'A';
-	copyXPMArea(c * 6, 74, 6, 8, k, y);
-	k += 6;
-	} else
-	  if (c>='0' && c<='9') {   // its a number or symbol
-					 c -= '0';
-	  copyXPMArea(c * 6, 64, 6, 8, k, y);
-	  k += 6;
-	  } else {
-	    copyXPMArea(5, 84, 6, 8, k, y);
-	    k += 6;
-	    
-	  }
-    }
+	int i;
+	int c;
+	int k;
+
+	k = x;
+	for (i=0; name[i]; i++) {
+		c = toupper(name[i]); 
+		if (c >= 'A' && c <= 'Z') {
+			// its a letter
+			c -= 'A';
+			copyXPMArea(c * 6, 74, 6, 8, k, y);
+			k += 6;
+		} else if (c >= '0' && c <= '9') {
+			// its a number or symbol
+			c -= '0';
+			copyXPMArea(c * 6, 64, 6, 8, k, y);
+			k += 6;
+		} else {
+			copyXPMArea(5, 84, 6, 8, k, y);
+			k += 6;
+		}
+	}
 }
 
 void BlitNum(int num, int x, int y) {
-  char buf[1024];
-  int newx=x;
-  
-  sprintf(buf, "%03i", num);
-  
-  BlitString(buf, newx, y);
+	char buf[1024];
+	int newx = x;
+
+	sprintf(buf, "%03i", num);
+
+	BlitString(buf, newx, y);
 }
 
-/*
- * Usage
- */
+/* Usage */
 void usage(void) {
-  fprintf(stderr, "\nWmwave - Carsten Schuermann <carsten@@schuermann.org>  http://www.schuermann.org/~dockapps\n\n");
-  fprintf(stderr, "usage:\n");
-  fprintf(stderr, "    -display <display name>\n");
-  fprintf(stderr, "    -r                        update rate in milliseconds (default:100)\n");
-  fprintf(stderr, "\n");
+	fprintf(stderr, "\nWmwave - Carsten Schuermann <carsten@@schuermann.org>\n");
+	fprintf(stderr, "  http://www.schuermann.org/~dockapps\n\n");
+	fprintf(stderr, "usage:\n");
+	fprintf(stderr, "	-display <display name>\n");
+	fprintf(stderr, "	-r	update rate in milliseconds (default:100)\n");
+	fprintf(stderr, "\n");
 }
 
-/*
- * printversion
- */
+/* printversion */
 void printversion(void) {
-  fprintf(stderr, "wmwave v%s\n", WMWAVE_VERSION);
+	fprintf(stderr, "wmwave v%s\n", WMWAVE_VERSION);
+}
+
+static void wi_getval(wreq)
+	struct wi_req	*wreq;
+{
+	struct ifreq ifr;
+	int s;
+
+	bzero((char *)&ifr, sizeof(ifr));
+
+	strcpy(ifr.ifr_name, WI_INTERFACE);
+	ifr.ifr_data = (caddr_t)wreq;
+
+	s = socket(AF_INET, SOCK_DGRAM, 0);
+
+	if (s == -1)
+		err(1, "socket");
+
+	if (ioctl(s, SIOCGWAVELAN, &ifr) == -1) {
+		mode = 0;
+	} else {
+		mode = 1;
+	}
+
+	close(s);
+	return;
 }
@


1.3
log
@fix bug that can cause x to crash, bump pkgname to wmwave-0.4p1
from Chris Kuethe <ckuethe at ualberta.ca>

remove me as maintainer
@
text
@d1 3
a3 3
$OpenBSD: patch-wmwave_wmwave_c,v 1.2 2001/08/17 16:04:24 naddy Exp $
--- wmwave.c.orig	1999-08-20 06:44:21.000000000 -0700
+++ wmwave.c	2004-04-22 13:22:47.000000000 -0700
d32 1
a32 1
@@@@ -67,6 +72,9 @@@@ int wmwave_mask_width = 64;
d37 2
a39 2
+#define WI_INTERFACE "wi0"
 
d42 1
a65 1
-}
d67 1
a67 1
 
d72 1
a72 1
+}
d74 1
a255 16
-	}
-	break;
-      case 'g' :
-	if (strcmp(arg+1, "geometry")) {
-	  usage();
-	  exit(1);
-	}
-	break;
-      case 'v' :
-	printversion();
-	exit(0);
-	break;
-      case 'r':
-	if (argc > (i+1)) {
-	  update_rate = (atoi(argv[i+1]) * 1000);
-	  i++;
d298 16
@


1.2
log
@Now that ports is tracking -current, this patch brings wmwave up to
speed with the recent wavelan changes.
Submitted by maintainer Joshua Stein <jcs@@rt.fm>.
@
text
@d1 3
a3 3
$OpenBSD$
--- wmwave.c.orig	Fri Aug 20 08:44:21 1999
+++ wmwave.c	Fri Aug 17 09:35:36 2001
d32 1
a32 1
@@@@ -67,6 +72,9 @@@@
d42 1
a42 1
@@@@ -75,8 +83,8 @@@@
d53 1
a53 1
@@@@ -86,272 +94,268 @@@@
d68 1
d82 1
a324 5
-}
-
-/*
- * Main loop
- */
d329 5
a333 2
+}
+
a392 5
-}
-
-/*
- * Blits a string at given co-ordinates
- */
d422 5
a426 2
+}
+
@


1.1
log
@Initial revision
@
text
@d2 2
a3 2
--- wmwave.c.orig	Tue Mar 13 13:53:05 2001
+++ wmwave.c	Tue Mar 13 12:47:28 2001
d28 1
a28 1
+#include <dev/pcmcia/if_wavelan_ieee.h>
@


1.1.1.1
log
@Initial import of wmwave-0.4
Window Maker dockapp to display wavelan statistics

Submitted by:  Joshua Stein <jcs@@rt.fm>
@
text
@@
