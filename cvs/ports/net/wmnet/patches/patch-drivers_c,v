head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.8
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.5.0.10
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.6
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.2
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.3.0.14
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.12
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.10
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.8
	OPENBSD_5_0:1.3.0.6
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.4
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.2
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.2.0.28
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.26
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.24
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.22
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2
	OPENBSD_3_2_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2015.12.07.18.00.42;	author jasper;	state Exp;
branches;
next	1.5;
commitid	gNCt4eCrEiyzCeF0;

1.5
date	2013.11.22.15.38.30;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2013.11.22.15.35.22;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.23.08.53.32;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2003.04.06.00.43.21;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.01.06.18.24;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.6
log
@- use getifaddrs(3)
- stop linking with libkvm now that it's no longer used
- remove some now-unneeded parts of the drivers.c patch
@
text
@$OpenBSD: patch-drivers_c,v 1.5 2013/11/22 15:38:30 sthen Exp $
--- drivers.c.orig	Fri May  5 02:34:29 2000
+++ drivers.c	Mon Dec  7 18:51:16 2015
@@@@ -9,18 +9,21 @@@@
  *  great, but please send me the diff.  
  */
 
-#include<stdlib.h>
-#include<stdio.h>
-#include<string.h>
-#include<X11/Xlib.h>
-#include<fcntl.h>
-#include<sys/types.h>
-#include<sys/stat.h>
-#include<sys/socket.h>
-#include<unistd.h>
-#include"config.h"
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <sys/stat.h>
 
+#include <X11/Xlib.h>
 
+#include <err.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#include "config.h"
+#include "wmnet.h"
+
 /* For FreeBSD */
 #ifdef USE_KVM
 #include<net/if.h>
@@@@ -57,18 +60,6 @@@@ static struct ifpppstatsreq ppp_stats_req;
 #define ACCOUNT_IN_FOUND        1
 #define ACCOUNT_OUT_FOUND       2
 
-extern char buffer[256];
-extern char *in_rule_string, *out_rule_string, *device;
-extern unsigned long totalbytes_in, totalbytes_out, lastbytes_in, lastbytes_out;
-extern unsigned long totalpackets_in, totalpackets_out, lastpackets_in, lastpackets_out;
-extern unsigned int diffpackets_in, diffpackets_out, diffbytes_in, diffbytes_out;
-extern unsigned int out_rule, in_rule;  /* number of rule in /proc/net/ip_acct to use */
-extern Bool current_tx, current_rx, rx, tx;
-
-
-
-char *available_drivers(void);
-
 #ifdef USE_IPFWADM
 int updateStats_ipfwadm(void);
 int ipfwadm_test(void);
@@@@ -81,11 +72,16 @@@@ int ipchains_test(void);
 int updateStats_dev(void);
 int dev_test(void);
 #endif
+#ifdef USE_GETIFADDRS
+#include <ifaddrs.h>
+#include <net/if.h>
 
+int updateStats_bsd(struct if_data_t *);
+int bsd_test(struct if_data_t *);
+#endif
 
-typedef int (*parser_func)(void);
 static struct drivers_struct {
- char * name;
+ char *name;
  parser_func function;
  parser_func test;
 } drivers[] = {
@@@@ -104,10 +100,14 @@@@ static struct drivers_struct {
 #ifdef USE_KVM
  {"kmem",kvm_updateStats, kvm_test},
 #endif
+#ifdef USE_GETIFADDRS
+ {"bsd", updateStats_bsd, bsd_test},
+#endif
  {NULL, NULL}
 };
 
-char* available_drivers(void) {
+char *
+available_drivers(void) {
  int ind = 0;
  int len = 0;
  char *string, *ptr;
@@@@ -127,14 +127,12 @@@@ char* available_drivers(void) {
  *(--string) = '\0';
  return ptr; 
 } 
-   
 
-
-parser_func find_driver(void) {
+parser_func find_driver(struct if_data_t *id) {
  int ind = 0;
  while(drivers[ind].name != NULL) {
-  if(drivers[ind].test()) {
-   return drivers[ind].function;
+  if(drivers[ind].test(id)) {
+   return (parser_func)drivers[ind].function;
   }
   ind++;
  }
@@@@ -143,12 +141,13 @@@@ parser_func find_driver(void) {
 }
 
 
-parser_func setup_driver(char * parser_name) {
+setup_func
+setup_driver(char *parser_name, struct if_data_t *id) {
  int ind = 0;
- if (parser_name == NULL) return find_driver(); 
+ if (parser_name == NULL) return (void *)find_driver(id); 
  while(drivers[ind].name != NULL) {
   if(!strcmp(parser_name, drivers[ind].name)) {
-    if (drivers[ind].test()) return drivers[ind].function;
+    if (drivers[ind].test(id)) return (void *)drivers[ind].function;
     fprintf(stderr, "wmnet: driver %s not appropriate for this machine\n", parser_name);
     exit(18);
   }
@@@@ -157,10 +156,7 @@@@ parser_func setup_driver(char * parser_name) {
  fprintf(stderr, "wmnet: no driver %s\n", parser_name);
  exit(18);
 }
-  
 
-
-
 #ifdef linux
 /* All the data gathering is done in here. 
  * Return True if no change to tx/rx.
@@@@ -503,7 +499,71 @@@@ int kvm_updateStats(void) {
 
 
 #endif
-  
 
-   
-  
+
+#ifdef USE_GETIFADDRS
+int bsd_test(struct if_data_t *id) {
+	struct ifaddrs *ifa;
+
+	if (getifaddrs(&ifa) != 0) {
+		freeifaddrs(ifa);
+		return False;
+	}
+
+	warnx("using getifaddrs(3) to monitor %s", id->device);
+	return True;
+}
+
+int updateStats_bsd(struct if_data_t *id) {
+	struct ifaddrs *ifap, *ifa;
+
+	id->rx = False;
+	id->tx = False;
+
+	if (getifaddrs(&ifap) != 0) {
+		freeifaddrs(ifap);
+		return False;
+	}
+
+       for (ifa = ifap; ifa != NULL; ifa = ifa->ifa_next) {
+               if (strcmp(id->device, ifa->ifa_name)) {
+                       continue;
+               }
+
+               if (ifa->ifa_addr->sa_family == AF_LINK) {
+                       struct if_data *ifd = NULL;
+
+                       ifd = ifa->ifa_data;
+
+                       if (ifd != NULL) {
+			       totalpackets_in = ifd->ifi_ipackets;
+			       if (totalpackets_in != lastpackets_in) {
+				       totalbytes_in = ifd->ifi_ibytes;
+				       diffpackets_in += totalpackets_in - lastpackets_in;
+				       diffbytes_in += totalbytes_in - lastbytes_in;
+				       lastpackets_in = totalpackets_in;
+				       lastbytes_in = totalbytes_in;
+				       id->rx = True;
+			       }
+
+			       totalpackets_out = ifd->ifi_opackets;
+			       if (totalpackets_out != lastpackets_out) {
+				       totalbytes_out =ifd->ifi_ibytes;
+				       diffpackets_out += totalpackets_out - lastpackets_out;
+				       diffbytes_out += totalbytes_out - lastbytes_out;
+				       lastpackets_out = totalpackets_out;
+				       lastbytes_out = totalbytes_out;
+				       id->tx = True;
+			       }
+
+			       return 0;
+			}
+	       }
+	}
+
+	/* return True if no change to tx/rx
+	 * return False if display will need to be updated
+	*/
+	return ((id->rx == id->current_rx) && (id->tx == id->current_tx));
+}
+#endif
@


1.5
log
@unbreak following if.h split; while there, honour CC/CFLAGS
@
text
@d1 4
a4 4
$OpenBSD: patch-drivers_c,v 1.3 2010/03/23 08:53:32 sthen Exp $
--- drivers.c.orig	Thu May  4 18:34:29 2000
+++ drivers.c	Fri Nov 22 08:34:50 2013
@@@@ -9,35 +9,41 @@@@
a24 1
+#include <fcntl.h>
a32 2
+static char buffer[512];
+
d35 2
a36 26
-#include<net/if.h>
-#include<kvm.h>
-#include<nlist.h>
+#include <net/if.h>
+#include <net/if_var.h>
+#include <kvm.h>
+#include <nlist.h>
 
 kvm_t *kvmfd;
 struct nlist symbols[] = {
  { "_ifnet" },
  { NULL }
 };
-unsigned long ifnet_savedaddr;
-int kvm_test(void);
-int kvm_updateStats(void);
+static unsigned long ifnet_savedaddr = -1;
+int kvm_test(struct if_data_t *);
+int kvm_updateStats(struct if_data_t *);
 #endif /* USE_KVM */
 
-
 #ifdef USE_LINUX_PPP
 #include<net/ppp_defs.h>
 
@@@@ -57,18 +63,6 @@@@ static struct ifpppstatsreq ppp_stats_req;
d55 2
a56 1
@@@@ -82,10 +76,8 @@@@ int updateStats_dev(void);
d59 7
a66 1
-
d74 1
a74 3
@@@@ -102,12 +94,13 @@@@ static struct drivers_struct {
  {"pppstats",updateStats_ppp, ppp_test},
 #endif
d76 1
a76 2
- {"kmem",kvm_updateStats, kvm_test},
+ {"kmem", kvm_updateStats, kvm_test},
d78 3
d90 1
a90 1
@@@@ -127,14 +120,12 @@@@ char* available_drivers(void) {
d108 1
a108 1
@@@@ -143,12 +134,13 @@@@ parser_func find_driver(void) {
d125 1
a125 1
@@@@ -157,10 +149,7 @@@@ parser_func setup_driver(char * parser_name) {
d136 1
a136 2
@@@@ -441,48 +430,60 @@@@ int updateStats_ppp(void) {
 #endif /* linux */
a137 12
 #ifdef USE_KVM
-int kvm_test(void) {
+int kvm_test(struct if_data_t *id) {
   if (((kvmfd = kvm_open(NULL, NULL, NULL, O_RDONLY, buffer)) == NULL) ||
       (kvm_nlist(kvmfd, symbols) < 0) ||
       kvm_read(kvmfd, (unsigned long)symbols[0].n_value, &ifnet_savedaddr, sizeof(unsigned long)) == -1 ) return False;
-  if(device == NULL) device = "ec0";
-  fprintf(stderr, "wmnet: using kmem driver to monitor %s\n", device);
+  if(id->device == NULL) id->device = "ec0";
+  warnx("using kmem driver to monitor %s", id->device);
   return True;
 }
a138 26
-int kvm_updateStats(void) {
- struct ifnet * ifnet = (struct ifnet *)buffer;
+int kvm_updateStats(struct if_data_t *id) {
+ struct ifnet ifnetbuf, *ifnet;
  unsigned long ifnet_addr = ifnet_savedaddr;
  char devname[16];
  int flag = 0;
+ unsigned long tp_in, tp_out, tb_in, tb_out;
+ static unsigned long lp_in, lp_out, lb_in, lb_out;
+ id->rx = False;
+ id->tx = False;
+
+ ifnet = &ifnetbuf;
+
  while (ifnet_addr && flag != (ACCOUNT_IN_FOUND|ACCOUNT_OUT_FOUND)) {
-  kvm_read(kvmfd, ifnet_addr, buffer, sizeof(struct ifnet));
+  memset(ifnet, 0, sizeof(struct ifnet));
+  if (kvm_read(kvmfd, ifnet_addr, ifnet, sizeof(struct ifnet)) == -1) {
+	  warn("kvm_read() returned -1");
+	  break;
+  }
 #ifdef __OpenBSD__
   snprintf(devname, 15, "%s", ifnet->if_xname);
 #else
   kvm_read(kvmfd, (unsigned long)ifnet->if_name, devname, 15);
   snprintf(devname, 15, "%s%d", devname, ifnet->if_unit);
d140 1
a140 50
-  if(!strncmp(devname, device, strlen(device))) { /* we found our struct */
-        totalpackets_in =ifnet->if_ipackets;
-        if (totalpackets_in != lastpackets_in) {
-                totalbytes_in = ifnet->if_ibytes;
-                diffpackets_in += totalpackets_in - lastpackets_in;
-                diffbytes_in += totalbytes_in - lastbytes_in;
-                lastpackets_in = totalpackets_in;
-                lastbytes_in = totalbytes_in;
-                rx = True;
+
+   /* we found our struct */
+  if(!strncmp(devname, id->device, strlen(id->device))) {
+        tp_in =ifnet->if_ipackets;
+        if (tp_in != lp_in) {
+                tb_in = ifnet->if_ibytes;
+                //dp_in += tp_in - lp_in;
+                id->db_in += tb_in - lb_in;
+                lp_in = tp_in;
+                lb_in = tb_in;
+                id->rx = True;
         }
 
-
-        totalpackets_out = ifnet->if_opackets;
-        if (totalpackets_out != lastpackets_out) {
-                totalbytes_out =ifnet->if_obytes;
-                diffpackets_out += totalpackets_out - lastpackets_out;
-                diffbytes_out += totalbytes_out - lastbytes_out;
-                lastpackets_out = totalpackets_out;
-                lastbytes_out = totalbytes_out;
-                tx = True;
+        tp_out =ifnet->if_opackets;
+        if (tp_out != lp_out) {
+                tb_out = ifnet->if_obytes;
+                //dp_out += tp_out - lp_out;
+                id->db_out += tb_out - lb_out;
+                lp_out = tp_out;
+                lb_out = tb_out;
+                id->tx = True;
         }
         flag = (ACCOUNT_IN_FOUND|ACCOUNT_OUT_FOUND);
 
@@@@ -498,12 +499,8 @@@@ int kvm_updateStats(void) {
 /* return True if no change to tx/rx
  * return False if display will need to be updated
  */	 
- return((rx == current_rx) && (tx == current_tx));
+ return((id->rx == id->current_rx) && (id->tx == id->current_tx));
 }
 
a141 3
 #endif
-  
-
d144 67
@


1.4
log
@regen patches
@
text
@d2 3
a4 3
--- drivers.c.orig	Fri May  5 01:34:29 2000
+++ drivers.c	Fri Nov 22 15:32:16 2013
@@@@ -9,35 +9,40 @@@@
d42 1
d63 1
a63 1
@@@@ -57,18 +62,6 @@@@ static struct ifpppstatsreq ppp_stats_req;
d82 1
a82 1
@@@@ -82,10 +75,8 @@@@ int updateStats_dev(void);
d94 1
a94 1
@@@@ -102,12 +93,13 @@@@ static struct drivers_struct {
d110 1
a110 1
@@@@ -127,14 +119,12 @@@@ char* available_drivers(void) {
d128 1
a128 1
@@@@ -143,12 +133,13 @@@@ parser_func find_driver(void) {
d145 1
a145 1
@@@@ -157,10 +148,7 @@@@ parser_func setup_driver(char * parser_name) {
d156 1
a156 1
@@@@ -441,48 +429,60 @@@@ int updateStats_ppp(void) {
d241 1
a241 1
@@@@ -498,12 +498,8 @@@@ int kvm_updateStats(void) {
@


1.3
log
@Add some missing initialisations, fixing network activity indicators.
From David Coppa, maintainer timeout.
@
text
@d1 3
a3 3
$OpenBSD: patch-drivers_c,v 1.2 2003/04/06 00:43:21 naddy Exp $
--- drivers.c.orig	Fri May  5 06:34:29 2000
+++ drivers.c	Mon Mar 24 19:34:43 2003
d21 1
a21 1
+
d23 1
a23 1
+
d30 1
a30 1
 
d35 1
a35 1
 
d62 1
a62 1
@@@@ -57,18 +62,6 @@@@ static struct ifpppstatsreq ppp_stats_re
d114 1
a115 1
 
d144 1
a144 1
@@@@ -157,9 +148,6 @@@@ parser_func setup_driver(char * parser_n
d149 1
a151 1
 
d154 1
d207 1
a207 2
-        }
 
d218 1
a218 1
+        }
d220 1
d240 1
a240 1
@@@@ -498,12 +496,8 @@@@ int kvm_updateStats(void) {
@


1.2
log
@Update from Vladimir Popov <pva48@@mail.ru>:
o Fix buffer overflow in kvm_updateStats() found by Jolan Luff
o Use system getopt_long()
o Replace fprintf(stderr) && exit -> err() and fprintf(stderr) -> warn()
@
text
@d1 1
a1 1
$OpenBSD: patch-drivers_c,v 1.1 2002/10/01 06:18:24 pvalchev Exp $
d154 1
a154 1
@@@@ -441,48 +429,58 @@@@ int updateStats_ppp(void) {
d179 2
@


1.1
log
@Make this work again on -current; from maintainer Vladimir Popov
bump PKGNAME
@
text
@d1 1
a1 1
$OpenBSD$
d3 27
a29 4
+++ drivers.c	Thu Sep 12 04:18:38 2002
@@@@ -20,12 +20,15 @@@@
 #include<unistd.h>
 #include"config.h"
d31 1
d34 1
a34 1
+char buffer[256];
d47 1
a47 1
@@@@ -33,11 +36,10 @@@@ struct nlist symbols[] = {
d50 1
a50 1
 unsigned long ifnet_savedaddr;
d53 1
d62 1
a62 1
@@@@ -57,18 +59,6 @@@@ static struct ifpppstatsreq ppp_stats_re
d81 1
a81 1
@@@@ -82,10 +72,8 @@@@ int updateStats_dev(void);
d93 1
a93 1
@@@@ -102,12 +90,13 @@@@ static struct drivers_struct {
d109 1
a109 1
@@@@ -127,14 +116,12 @@@@ char* available_drivers(void) {
d114 1
a115 1
-
d127 1
a127 1
@@@@ -143,12 +130,13 @@@@ parser_func find_driver(void) {
d144 1
a144 1
@@@@ -157,9 +145,6 @@@@ parser_func setup_driver(char * parser_n
d154 1
a154 1
@@@@ -441,20 +426,24 @@@@ int updateStats_ppp(void) {
d166 1
a166 1
+  fprintf(stderr, "wmnet: using kmem driver to monitor %s\n", id->device);
d171 1
d173 1
a173 1
  struct ifnet * ifnet = (struct ifnet *)buffer;
d179 2
a180 1
+ //static unsigned int dp_in, dp_out;
d183 6
a188 1
   kvm_read(kvmfd, ifnet_addr, buffer, sizeof(struct ifnet));
d190 2
a191 1
@@@@ -463,26 +452,27 @@@@ int kvm_updateStats(void) {
d204 2
d216 1
a216 2
         }
 
d237 1
a237 1
@@@@ -498,12 +488,8 @@@@ int kvm_updateStats(void) {
@

