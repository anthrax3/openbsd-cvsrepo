head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.14
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.12
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.8
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.10
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2013.12.27.23.08.02;	author krw;	state Exp;
branches;
next	1.1;

1.1
date	2013.12.20.02.20.00;	author krw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Apply tedu@@'s Christmas Miracle cure for TAILQ_PREV vs kvm_read()
while traversing inpt_queue. Fix botch in previous commit by
initializing next and prev once each, rather than prev twice and next
not at all. Eliminate 'skip:' and use 'continue' instead, since code
after 'skip:' was pointless. Nuke now unused variable 'head'.
@
text
@$OpenBSD: patch-agent_mibgroup_udp-mib_data_access_udp_endpoint_openbsd_c,v 1.1 2013/12/20 02:20:00 krw Exp $
--- agent/mibgroup/udp-mib/data_access/udp_endpoint_openbsd.c.orig	Tue Oct  9 18:28:58 2012
+++ agent/mibgroup/udp-mib/data_access/udp_endpoint_openbsd.c	Thu Dec 26 19:54:56 2013
@@@@ -105,8 +105,8 @@@@ static int
 _load(netsnmp_container *container, u_int load_flags)
 {
     struct inpcbtable table;
-    struct inpcb   *head, *next, *prev;
-    struct inpcb   inpcb;
+    struct inpcb   *next, *prev;
+    struct inpcb   inpcb, previnpcb;
     netsnmp_udp_endpoint_entry  *entry;
     int      rc = 0;
 
@@@@ -118,22 +118,29 @@@@ _load(netsnmp_container *container, u_int load_flags)
 	return -1;
     }
 
-    prev = (struct inpcb *)&CIRCLEQ_FIRST(&table.inpt_queue);
+    next = (struct inpcb *)&TAILQ_FIRST(&table.inpt_queue);
     prev = NULL;
-    head = next = CIRCLEQ_FIRST(&table.inpt_queue);
 
     while (next) {
 	NETSNMP_KLOOKUP(next, (char *)&inpcb, sizeof(inpcb));
-	if (prev && CIRCLEQ_PREV(&inpcb, inp_queue) != prev) {
-	    snmp_log(LOG_ERR,"udbtable link error\n");
-	    break;
+	if (prev != NULL) {
+		if (!NETSNMP_KLOOKUP(prev, (char *)&previnpcb,
+		    sizeof(previnpcb))) {
+	    		DEBUGMSGTL(("udp-mib/data_access/udpConn",
+			    "klookup previnpcb failed\n"));
+			break;
+		}
+		if (TAILQ_NEXT(&previnpcb, inp_queue) != next) {
+		    snmp_log(LOG_ERR,"udptable link error\n");
+		    break;
+		}
 	}
 	prev = next;
-	next = CIRCLEQ_NEXT(&inpcb, inp_queue);
+	next = TAILQ_NEXT(&inpcb, inp_queue);
 
 #if !defined(NETSNMP_ENABLE_IPV6)
         if (inpcb.inp_flags & INP_IPV6)
-            goto skip;
+            continue;
 #endif
         entry = netsnmp_access_udp_endpoint_entry_create();
         if (NULL == entry) {
@@@@ -163,11 +170,6 @@@@ _load(netsnmp_container *container, u_int load_flags)
          */
         entry->index = CONTAINER_SIZE(container) + 1;
         CONTAINER_INSERT(container, entry);
-#if !defined(NETSNMP_ENABLE_IPV6)
-    skip:
-#endif
-	if (next == head)
-	    break;
     }
 
     if (rc < 0)
@


1.1
log
@Adapt to change of inpt_queue to TAILQ from CIRCLEQ.

ok sthen@@
@
text
@d1 15
a15 4
$OpenBSD$
--- agent/mibgroup/udp-mib/data_access/udp_endpoint_openbsd.c.orig	Mon Nov 25 11:45:18 2013
+++ agent/mibgroup/udp-mib/data_access/udp_endpoint_openbsd.c	Mon Nov 25 11:45:50 2013
@@@@ -118,18 +118,18 @@@@ _load(netsnmp_container *container, u_int load_flags)
d20 1
a20 1
+    prev = (struct inpcb *)&TAILQ_FIRST(&table.inpt_queue);
a22 1
+    head = next = TAILQ_FIRST(&table.inpt_queue);
d27 13
a39 3
+	if (prev && TAILQ_PREV(&inpcb, inpthead, inp_queue) != prev) {
 	    snmp_log(LOG_ERR,"udbtable link error\n");
 	    break;
d47 17
@

