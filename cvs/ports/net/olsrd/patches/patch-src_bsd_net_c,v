head	1.4;
access;
symbols
	OPENBSD_3_8:1.1.1.1.0.2
	OPENBSD_3_8_BASE:1.1.1.1
	robert_20050522:1.1.1.1
	robert:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2017.06.04.11.45.04;	author stsp;	state Exp;
branches;
next	1.3;
commitid	nHUJbGViAkCg2Orn;

1.3
date	2017.05.13.22.27.20;	author stsp;	state Exp;
branches;
next	1.2;
commitid	jtiLTyQuAjkxnjrR;

1.2
date	2006.01.21.11.34.04;	author alek;	state dead;
branches;
next	1.1;

1.1
date	2005.05.22.14.44.45;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.05.22.14.44.45;	author robert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update olsrd (again) to the actual latest stable release 0.9.6.1.
ok phessler@@ sthen@@
@
text
@$OpenBSD: patch-src_bsd_net_c,v 1.3 2017/05/13 22:27:20 stsp Exp $

Index: src/bsd/net.c
--- src/bsd/net.c.orig
+++ src/bsd/net.c
@@@@ -55,6 +55,7 @@@@
 #include "ipcalc.h"
 #include "parser.h"          /* dnc: needed for call to packet_parser() */
 #include "olsr_protocol.h"
+#include "olsr_random.h"
 #include "olsr_cfg.h"
 #include "olsr.h"
 
@@@@ -64,6 +65,7 @@@@
 #include <string.h>
 #include <unistd.h>
 #include <net/if.h>
+#include <net/if_media.h>
 #include <sys/ioctl.h>
 #include <fcntl.h>
 #include <syslog.h>
@@@@ -86,7 +88,6 @@@@
 #ifdef __NetBSD__
 #include <net/if_ether.h>
 #include <netinet6/in6_var.h>   /* For struct in6_ifreq */
-#include <net80211/ieee80211_ioctl.h>
 #include <ifaddrs.h>
 #endif /* __NetBSD__ */
 
@@@@ -100,8 +101,6 @@@@
 #include <netinet6/in6_var.h>   /* For struct in6_ifreq */
 #include <ifaddrs.h>
 #include <sys/uio.h>
-#include <net80211/ieee80211.h>
-#include <net80211/ieee80211_ioctl.h>
 #endif /* __OpenBSD__ */
 
 #if defined __FreeBSD__ || defined __FreeBSD_kernel__
@@@@ -109,10 +108,6 @@@@
 #include <net/ethernet.h>
 #include <netinet/in_var.h>
 #include <ifaddrs.h>
-#ifndef FBSD_NO_80211
-#include <net80211/ieee80211.h>
-#include <net80211/ieee80211_ioctl.h>
-#endif /* FBSD_NO_80211 */
 #endif /* defined __FreeBSD__ || defined __FreeBSD_kernel__ */
 
 #ifdef __APPLE__
@@@@ -747,39 +742,12 @@@@ olsr_select(int nfds, fd_set * readfds, fd_set * write
 int
 check_wireless_interface(char *ifname)
 {
-#if (defined __FreeBSD__ || defined __FreeBSD_kernel__ ) &&  !defined FBSD_NO_80211
-
-/* From FreeBSD ifconfig/ifieee80211.c ieee80211_status() */
-  struct ieee80211req ireq;
-  u_int8_t data[32];
-
-  memset(&ireq, 0, sizeof(ireq));
-  strscpy(ireq.i_name, ifname, sizeof(ireq.i_name));
-  ireq.i_data = &data;
-  ireq.i_type = IEEE80211_IOC_SSID;
-  ireq.i_val = -1;
-  return (ioctl(olsr_cnf->ioctl_s, SIOCG80211, &ireq) >= 0) ? 1 : 0;
-#elif defined __OpenBSD__
-  struct ieee80211_nodereq nr;
-  bzero(&nr, sizeof(nr));
-  strscpy(nr.nr_ifname, ifname, sizeof(nr.nr_ifname));
-  return (ioctl(olsr_cnf->ioctl_s, SIOCG80211FLAGS, &nr) >= 0) ? 1 : 0;
-#elif defined __NetBSD__
-  struct ifreq ireq;
-  struct ieee80211_nwid data;
+  struct ifmediareq ifmr;
   int ret;
-
-  memset(&ireq, 0, sizeof(ireq));
-  strscpy(ireq.ifr_name, ifname, sizeof(ireq.ifr_name));
-  ireq.ifr_data = &data;
-  ret = ioctl(olsr_cnf->ioctl_s, SIOCG80211NWID, &ireq);
-  if(ret == 0)
-	  return 1;
-  return 0;
-#else /* defined __NetBSD__ */
-  ifname = NULL;                /* squelsh compiler warning */
-  return 0;
-#endif /* defined __NetBSD__ */
+  bzero(&ifmr, sizeof(ifmr));
+  strscpy(ifmr.ifm_name, ifname, sizeof(ifmr.ifm_name));
+  ret = ioctl(olsr_cnf->ioctl_s, SIOCGIFMEDIA, (caddr_t)&ifmr);
+  return (ret == 0 && IFM_TYPE(ifmr.ifm_current) == IFM_IEEE80211);
 }
 
 #include <sys/sockio.h>
@


1.3
log
@Update our very much outdated net/olsrd port to current release 0.9.0.3.
Add patches for rdomain support and a few bug fixes.
Roll the -plugins subpackage into -main, and add an rc.d script.

Lightly tested in Berlin's Freifunk OLSR mesh over ral(4) in IBSS mode.

martin@@ has rescinded maintainership which I am taking over.
ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d6 7
a12 7
@@@@ -51,6 +51,7 @@@@
 #include "../ipcalc.h"
 #include "../parser.h"          /* dnc: needed for call to packet_parser() */
 #include "../olsr_protocol.h"
+#include "../olsr_random.h"
 #include "../olsr_cfg.h"
 #include "../olsr.h"
d14 81
@


1.2
log
@Update to 0.4.10

From Holger Mauermann <holger@@mauermann.org> (MAINTAINER)
@
text
@d1 12
a12 129
$OpenBSD: patch-src_bsd_net_c,v 1.1 2005/05/22 14:44:45 robert Exp $
--- src/bsd/net.c.orig	Sun Mar 20 17:52:25 2005
+++ src/bsd/net.c	Sun May 22 06:19:15 2005
@@@@ -49,8 +49,17 @@@@
 #endif
 
 #include <net/if.h>
+#ifdef __OpenBSD__
+#include <netinet/if_ether.h>
+#include <netinet/in_systm.h>
+#include <netinet/ip.h>
+#include <netinet/ip_icmp.h>
+#include <netinet/icmp_var.h>
+#include <netinet/icmp6.h>
+#else
 #include <net/if_var.h>
 #include <net/ethernet.h>
+#endif
 
 #ifdef __FreeBSD__
 #include <net80211/ieee80211.h>
@@@@ -78,11 +87,52 @@@@
 static int set_sysctl_int(char *name, int new)
 {
   int old;
-  unsigned int len = sizeof (old);
+  size_t len = sizeof (old);
+  
+#ifdef __OpenBSD__
+  int mib[4];
+  
+  /* 
+   * Set net.inet.ip.forwarding by default.
+   */
+  mib[0] = CTL_NET;
+  mib[1] = PF_INET;
+  mib[2] = IPPROTO_IP;
+  mib[3] = IPCTL_FORWARDING;
+  
+  if (!strcmp(name, "net.inet6.ip6.forwarding"))
+  {
+    mib[1] = PF_INET6;
+    mib[2] = IPPROTO_IPV6;
+  }
+  else if (!strcmp(name, "net.inet.icmp.rediraccept"))
+  {
+    mib[2] = IPPROTO_ICMP;
+    mib[3] = ICMPCTL_REDIRACCEPT;
+  }
+  else if (!strcmp(name, "net.inet6.icmp6.rediraccept"))
+  {
+    mib[2] = IPPROTO_ICMPV6;
+    mib[3] = ICMPV6CTL_REDIRACCEPT;
+  }
+  else if (!strcmp(name, "net.inet.ip.redirect"))
+  {
+    mib[3] = IPCTL_SENDREDIRECTS;
+  }
+  else if (!strcmp(name, "net.inet6.ip6.redirect"))
+  {
+    mib[1] = PF_INET6;
+    mib[2] = IPPROTO_IPV6;
+    mib[3] = IPCTL_SENDREDIRECTS;
+  }
 
-  if (sysctlbyname(name, &old, &len, &new, sizeof (new)) < 0)
+  if (sysctl(mib, 4, &old, &len, &new, sizeof (new)) < 0)
     return -1;
+#else
 
+  if (sysctlbyname(name, &old, &len, &new, sizeof (new)) < 0)
+    return -1;
+#endif
   return old;
 }
 
@@@@ -122,14 +172,24 @@@@
   first_time = 0;
 
   // do not accept ICMP redirects
-
   if (olsr_cnf->ip_version == AF_INET)
+#ifdef __OpenBSD__
+    name = "net.inet.icmp.rediraccept";
+#else
     name = "net.inet.icmp.drop_redirect";
-
+#endif
   else
+#ifdef __OpenBSD__
+    name = "net.inet6.icmp6.rediraccept";
+#else
     name = "net.inet6.icmp6.drop_redirect";
+#endif
 
+#ifdef __OpenBSD__
+  ignore_redir = set_sysctl_int(name, 0);
+#else
   ignore_redir = set_sysctl_int(name, 1);
+#endif
 
   if (ignore_redir < 0)
     {
@@@@ -152,7 +212,6 @@@@
       fprintf(stderr, "Cannot disable outgoing ICMP redirect messages. Please disable them manually. Continuing in 3 seconds...\n");
       sleep(3);
     }
-
   return 1;
 }
 
@@@@ -178,10 +237,17 @@@@
   // reset incoming ICMP redirects
 
   if (olsr_cnf->ip_version == AF_INET)
+#ifdef __OpenBSD__
+    name = "net.inet.icmp.rediraccept";
+#else
     name = "net.inet.icmp.drop_redirect";
-
+#endif
   else
+#ifdef __OpenBSD__
+    name = "net.inet6.icmp6.rediraccept";
+#else
     name = "net.inet6.icmp6.drop_redirect";
+#endif
 
   set_sysctl_int(name, ignore_redir);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Import olsrd-0.4.9.

The olsr.org OLSR daemon is an implementation of the Optimized Link
State Routing protocol. OLSR is a routing protocol for mobile ad-hoc
networks. The protocol is pro-active, table driven and utilizes a
technique called multipoint relaying for message flooding.
From: Holger Mauermann <holger@@mauermann.org>

ok pvalchev@@
@
text
@@
