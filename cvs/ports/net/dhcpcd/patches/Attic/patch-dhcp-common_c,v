head	1.1;
access;
symbols
	OPENBSD_5_8:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2016.01.08.12.59.38;	author jasper;	state dead;
branches
	1.1.2.1;
next	;
commitid	oPqvBU0fiXshZZm3;

1.1.2.1
date	2016.01.08.12.59.38;	author jasper;	state Exp;
branches;
next	;
commitid	oPqvBU0fiXshZZm3;


desc
@@


1.1
log
@file patch-dhcp-common_c was initially added on branch OPENBSD_5_8.
@
text
@@


1.1.2.1
log
@Security fixes for CVE-2016-1503 CVE-2016-1504
@
text
@a0 95
$OpenBSD$

Security fix for CVE-2016-1503
http://roy.marples.name/projects/dhcpcd/info/76a1609352263bd9def1300d7ba990679571fa30

s/ENODATA/EINVAL/ due to lack of ENODATA in errno.h

--- dhcp-common.c.orig	Thu Jul  9 11:29:43 2015
+++ dhcp-common.c	Fri Jan  8 13:58:41 2016
@@@@ -551,48 +551,43 @@@@ print_string(char *dst, size_t len, int type, const ui
 	return (ssize_t)bytes;
 }
 
-#define ADDRSZ		4
 #define ADDR6SZ		16
 static ssize_t
 dhcp_optlen(const struct dhcp_opt *opt, size_t dl)
 {
 	size_t sz;
 
-	if (opt->type == 0 ||
-	    opt->type & (STRING | BINHEX | RFC3442 | RFC5969))
-	{
+	if (opt->type & ADDRIPV6)
+		sz = ADDR6SZ;
+	else if (opt->type & (UINT32 | ADDRIPV4))
+		sz = sizeof(uint32_t);
+	else if (opt->type & UINT16)
+		sz = sizeof(uint16_t);
+	else if (opt->type & (UINT8 | BITFLAG))
+		sz = sizeof(uint8_t);
+	else if (opt->type & FLAG)
+		return 0;
+	else {
+		/* All other types are variable length */
 		if (opt->len) {
-			if ((size_t)opt->len > dl)
+			if ((size_t)opt->len > dl) {
+				errno = EINVAL;
 				return -1;
+			}
 			return (ssize_t)opt->len;
 		}
 		return (ssize_t)dl;
 	}
-
-	if ((opt->type & (ADDRIPV4 | ARRAY)) == (ADDRIPV4 | ARRAY)) {
-		if (dl < ADDRSZ)
-			return -1;
-		return (ssize_t)(dl - (dl % ADDRSZ));
+	if (dl < sz) {
+		errno = EINVAL;
+		return -1;
 	}
 
-	if ((opt->type & (ADDRIPV6 | ARRAY)) == (ADDRIPV6 | ARRAY)) {
-		if (dl < ADDR6SZ)
-			return -1;
-		return (ssize_t)(dl - (dl % ADDR6SZ));
-	}
-
-	if (opt->type & (UINT32 | ADDRIPV4))
-		sz = sizeof(uint32_t);
-	else if (opt->type & UINT16)
-		sz = sizeof(uint16_t);
-	else if (opt->type & (UINT8 | BITFLAG))
-		sz = sizeof(uint8_t);
-	else if (opt->type & ADDRIPV6)
-		sz = ADDR6SZ;
-	else
-		/* If we don't know the size, assume it's valid */
-		return (ssize_t)dl;
-	return dl < sz ? -1 : (ssize_t)sz;
+	/* Trim any extra data.
+	 * Maybe we need a settng to reject DHCP options with extra data? */
+	if (opt->type & ARRAY)
+		return (ssize_t)(dl - (dl % sz));
+	return (ssize_t)sz;
 }
 
 static ssize_t
@@@@ -818,8 +813,11 @@@@ dhcp_envoption1(struct dhcpcd_ctx *ctx, char **env, co
 	size_t e;
 	char *v, *val;
 
-	if (opt->len && opt->len < ol)
-		ol = opt->len;
+	/* Ensure a valid length */
+	ol = (size_t)dhcp_optlen(opt, ol);
+	if ((ssize_t)ol == -1)
+		return 0;
+
 	len = print_option(NULL, 0, opt, od, ol, ifname);
 	if (len < 0)
 		return 0;
@

