head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.38
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.36
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.34
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.30
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.32
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.28
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.26
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.24
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.22
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.20
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.18
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.1.1.0.6
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.4
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.2
	OPENBSD_4_1_BASE:1.1.1.1
	fucked_up:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2008.03.15.10.35.54;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.18.14.39.56;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.12.18.14.39.56;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update to version 1.06.23

feedback and ok espie@@
@
text
@$OpenBSD: patch-src_xmlrpc_builddecomp_c,v 1.1.1.1 2006/12/18 14:39:56 espie Exp $
--- src/xmlrpc_builddecomp.c.orig	Thu Mar 23 00:48:31 2006
+++ src/xmlrpc_builddecomp.c	Wed Jan 16 14:20:18 2008
@@@@ -26,11 +26,15 @@@@ typedef double va_double;
 ** tricky fashions. We don't why Python does this, but since we're
 ** abusing our va_list objects in a similar fashion, we'll copy them
 ** too. */
+#if defined(va_copy)
+#define VA_LIST_COPY(dest, src) va_copy(dest, src)
+#else
 #if VA_LIST_IS_ARRAY
 #define VA_LIST_COPY(dest,src) memcpy((dest), (src), sizeof(va_list))
 #else
 #define VA_LIST_COPY(dest,src) ((dest) = (src))
 #endif
+#endif
 
 /*=========================================================================
 **  Creating XML-RPC values.
@@@@ -460,6 +464,7 @@@@ xmlrpc_build_value_va(xmlrpc_env *    const envP,
         
         if (!envP->fault_occurred)
             XMLRPC_ASSERT_VALUE_OK(*valPP);
+	va_end(args_copy);
         
         *tailP = formatCursor;
     }
@@@@ -887,6 +892,7 @@@@ xmlrpc_decompose_value_va(xmlrpc_env *   const envP,
     if (!envP->fault_occurred) {
         XMLRPC_ASSERT(*format_copy == '\0');
     }
+    va_end(args_copy);
 }
 
 
@@@@ -925,6 +931,7 @@@@ xmlrpc_parse_value_va(xmlrpc_env *   const envP,
     if (!envP->fault_occurred) {
         XMLRPC_ASSERT(*format_copy == '\0');
     }
+    va_end(args_copy);
 }
 
 
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- src/xmlrpc_builddecomp.c.orig	Mon Dec 18 12:15:59 2006
+++ src/xmlrpc_builddecomp.c	Mon Dec 18 12:47:57 2006
d20 1
a20 1
@@@@ -460,6 +464,7 @@@@ xmlrpc_build_value_va(xmlrpc_env *    co
d28 1
a28 1
@@@@ -887,6 +892,7 @@@@ xmlrpc_decompose_value_va(xmlrpc_env *  
d36 1
a36 1
@@@@ -925,6 +931,7 @@@@ xmlrpc_parse_value_va(xmlrpc_env *   con
@


1.1.1.1
log
@xmlrpc C/C++ library, prereq for newer cmake.
Also, makes sense to take this code out, as some other stuff is bound
to want this at some point.

This library is incredibly sloppy engineering. Reasonably readable
code, looks sensible, but incredible lack of testing (doesn't even pass
its own testsuite on a stable release... and does a lot of things that
can't work outside of linux... makes you wonder who is actually using
this...)

@
text
@@
