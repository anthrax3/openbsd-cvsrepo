head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.36
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.34
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.30
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.32
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.28
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.26
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.24
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.22
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.20
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.18
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.1.1.0.6
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.4
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.2
	OPENBSD_4_1_BASE:1.1.1.1
	fucked_up:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2008.03.15.10.35.54;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.18.14.39.56;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.12.18.14.39.56;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update to version 1.06.23

feedback and ok espie@@
@
text
@$OpenBSD: patch-src_xmlrpc_parse_c,v 1.1.1.1 2006/12/18 14:39:56 espie Exp $
--- src/xmlrpc_parse.c.orig	Thu Mar 23 00:48:31 2006
+++ src/xmlrpc_parse.c	Wed Jan 16 14:20:18 2008
@@@@ -57,9 +57,9 @@@@
     do \
         if (xml_element_children_size(elem) != (count)) \
             XMLRPC_FAIL3(env, XMLRPC_PARSE_ERROR, \
-             "Expected <%s> to have %d children, found %d", \
-                         xml_element_name(elem), (count), \
-                         xml_element_children_size(elem)); \
+             "Expected <%s> to have %lu children, found %lu", \
+                         xml_element_name(elem), (unsigned long)(count), \
+                         (unsigned long)xml_element_children_size(elem)); \
     while (0)
 
 static xml_element *
@@@@ -595,7 +595,8 @@@@ parseMethodNameElement(xmlrpc_env *  const envP,
         xmlrpc_env_set_fault_formatted(
             envP, XMLRPC_PARSE_ERROR,
             "A <methodName> element should not have children.  "
-            "This one has %u of them.", xml_element_children_size(nameElemP));
+            "This one has %lu of them.", 
+	    (unsigned long)xml_element_children_size(nameElemP));
     else {
         const char * const cdata = xml_element_cdata(nameElemP);
 
@@@@ -654,8 +655,8 @@@@ parseCallChildren(xmlrpc_env *    const envP,
                     xmlrpc_env_set_fault_formatted(
                         envP, XMLRPC_PARSE_ERROR,
                         "<methodCall> has extraneous children, other than "
-                        "<methodName> and <params>.  Total child count = %u",
-                        callChildCount);
+                        "<methodName> and <params>.  Total child count = %lu",
+                        (unsigned long)callChildCount);
                     
                 if (envP->fault_occurred)
                     xmlrpc_DECREF(*paramArrayPP);
@@@@ -697,8 +698,8 @@@@ xmlrpc_parse_call(xmlrpc_env *    const envP,
     if (xmlLen > xmlrpc_limit_get(XMLRPC_XML_SIZE_LIMIT_ID))
         xmlrpc_env_set_fault_formatted(
             envP, XMLRPC_LIMIT_EXCEEDED_ERROR,
-            "XML-RPC request too large.  Max allowed is %u bytes",
-            xmlrpc_limit_get(XMLRPC_XML_SIZE_LIMIT_ID));
+            "XML-RPC request too large.  Max allowed is %lu bytes",
+            (unsigned long)xmlrpc_limit_get(XMLRPC_XML_SIZE_LIMIT_ID));
     else {
         xml_element * callElemP;
         parseCallXml(envP, xmlData, xmlLen, &callElemP);
@@@@ -773,8 +774,8 @@@@ parseFaultElement(xmlrpc_env *        const envP,
     if (xml_element_children_size(faultElement) != 1)
         xmlrpc_env_set_fault_formatted(
             envP, XMLRPC_PARSE_ERROR,
-            "<fault> element should have 1 child, but it has %u.",
-            xml_element_children_size(faultElement));
+            "<fault> element should have 1 child, but it has %lu.",
+            (unsigned long)xml_element_children_size(faultElement));
     else {
         xml_element * const faultValueP =
             xml_element_children(faultElement)[0];
@@@@ -869,8 +870,8 @@@@ parseMethodResponseElt(xmlrpc_env *        const envP,
     } else
         xmlrpc_env_set_fault_formatted(
             envP, XMLRPC_PARSE_ERROR,
-            "<methodResponse> has %u children, should have 1.",
-            xml_element_children_size(methodResponseEltP));
+            "<methodResponse> has %lu children, should have 1.",
+            (unsigned long)xml_element_children_size(methodResponseEltP));
 }
 
 
@@@@ -908,9 +909,10 @@@@ xmlrpc_parse_response2(xmlrpc_env *    const envP,
     if (xmlDataLen > xmlrpc_limit_get(XMLRPC_XML_SIZE_LIMIT_ID))
         xmlrpc_env_set_fault_formatted(
             envP, XMLRPC_LIMIT_EXCEEDED_ERROR,
-            "XML-RPC response too large.  Our limit is %u characters.  "
-            "We got %u characters",
-            xmlrpc_limit_get(XMLRPC_XML_SIZE_LIMIT_ID), xmlDataLen);
+            "XML-RPC response too large.  Our limit is %lu characters.  "
+            "We got %lu characters",
+            (unsigned long)xmlrpc_limit_get(XMLRPC_XML_SIZE_LIMIT_ID), 
+	    (unsigned long)xmlDataLen);
     else {
         xml_parse(envP, xmlData, xmlDataLen, &response);
         if (!envP->fault_occurred) {
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ src/xmlrpc_parse.c	Mon Dec 18 13:41:28 2006
d17 1
a17 1
@@@@ -595,7 +595,8 @@@@ parseMethodNameElement(xmlrpc_env *  con
d27 1
a27 1
@@@@ -654,8 +655,8 @@@@ parseCallChildren(xmlrpc_env *    const 
d38 1
a38 1
@@@@ -697,8 +698,8 @@@@ xmlrpc_parse_call(xmlrpc_env *    const 
d49 1
a49 1
@@@@ -773,8 +774,8 @@@@ parseFaultElement(xmlrpc_env *        co
d60 1
a60 1
@@@@ -869,8 +870,8 @@@@ parseMethodResponseElt(xmlrpc_env *     
d71 1
a71 1
@@@@ -908,9 +909,10 @@@@ xmlrpc_parse_response2(xmlrpc_env *    c
@


1.1.1.1
log
@xmlrpc C/C++ library, prereq for newer cmake.
Also, makes sense to take this code out, as some other stuff is bound
to want this at some point.

This library is incredibly sloppy engineering. Reasonably readable
code, looks sensible, but incredible lack of testing (doesn't even pass
its own testsuite on a stable release... and does a lot of things that
can't work outside of linux... makes you wonder who is actually using
this...)

@
text
@@
