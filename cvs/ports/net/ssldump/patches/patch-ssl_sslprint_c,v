head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.16
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.14
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.10
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.12
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.8
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.04.25.15.21.40;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@add ssldump patches from sourceforge tracker, unbreaking runtime
drop USE_GROFF, regen plist+distinfo while there
@
text
@$OpenBSD$

http://sourceforge.net/p/ssldump/patches/7/

ssldump segfaults while parsing a certificate with unknown type.
This is because the loop in ssl_print_enum (ssl/sslprint.c) checks
against the wrong terminating value for client_certificate_type_decoder
(ssl/ssl.enums.c).

--- ssl/sslprint.c.orig	Thu Apr 25 16:09:58 2013
+++ ssl/sslprint.c	Thu Apr 25 16:10:07 2013
@@@@ -406,7 +406,7 @@@@ int ssl_print_enum(ssl,name,dtable,value)
     if(name) explain(ssl,"%s ",name);    
     INDENT;
     
-    while(dtable && dtable->type!=-1){
+    while(dtable && dtable->type!=0){
       if(dtable->type == value){
         INDENT_INCR;
         explain(ssl,"%s",dtable->name);
@
