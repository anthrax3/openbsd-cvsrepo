head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2017.01.30.08.53.17;	author robert;	state dead;
branches
	1.1.2.1;
next	;
commitid	akYwpi0MgpQxagdR;

1.1.2.1
date	2017.01.30.08.53.17;	author robert;	state Exp;
branches;
next	;
commitid	akYwpi0MgpQxagdR;


desc
@@


1.1
log
@file patch-pdns_dnsparser_cc was initially added on branch OPENBSD_6_0.
@
text
@@


1.1.2.1
log
@apply patches from upstream for CVE-2016-5426, CVE-2016-5427
@
text
@a0 54
$OpenBSD$
--- pdns/dnsparser.cc.orig	Tue Jun  9 14:29:04 2015
+++ pdns/dnsparser.cc	Mon Jan 30 09:45:11 2017
@@@@ -402,8 +402,9 @@@@ uint8_t PacketReader::get8BitInt()
 string PacketReader::getLabel(unsigned int recurs)
 {
   string ret;
+  size_t wirelength = 0;
   ret.reserve(40);
-  getLabelFromContent(d_content, d_pos, ret, recurs++);
+  getLabelFromContent(d_content, d_pos, ret, recurs++, wirelength);
   return ret;
 }
 
@@@@ -453,7 +454,7 @@@@ string PacketReader::getText(bool multi)
 }
 
 
-void PacketReader::getLabelFromContent(const vector<uint8_t>& content, uint16_t& frompos, string& ret, int recurs) 
+void PacketReader::getLabelFromContent(const vector<uint8_t>& content, uint16_t& frompos, string& ret, int recurs, size_t& wirelength)
 {
   if(recurs > 100) // the forward reference-check below should make this test 100% obsolete
     throw MOADNSException("Loop");
@@@@ -462,6 +463,10 @@@@ void PacketReader::getLabelFromContent(const vector<ui
   // it is tempting to call reserve on ret, but it turns out it creates a malloc/free storm in the loop
   for(;;) {
     unsigned char labellen=content.at(frompos++);
+    wirelength++;
+    if (wirelength > 255) {
+      throw MOADNSException("Overly long DNS name ("+lexical_cast<string>(wirelength)+")");
+    }
 
     if(!labellen) {
       if(ret.empty())
@@@@ -474,13 +479,17 @@@@ void PacketReader::getLabelFromContent(const vector<ui
 
       if(offset >= pos)
         throw MOADNSException("forward reference during label decompression");
-      return getLabelFromContent(content, offset, ret, ++recurs);
+      /* the compression pointer does not count into the wire length */
+      return getLabelFromContent(content, offset, ret, ++recurs, --wirelength);
     }
     else if(labellen > 63) 
       throw MOADNSException("Overly long label during label decompression ("+lexical_cast<string>((unsigned int)labellen)+")");
     else {
+      if (wirelength + labellen > 255) {
+        throw MOADNSException("Overly long DNS name ("+lexical_cast<string>(wirelength)+")");
+      }
+      wirelength += labellen;
       // XXX FIXME THIS MIGHT BE VERY SLOW!
-
       for(string::size_type n = 0 ; n < labellen; ++n, frompos++) {
         if(content.at(frompos)=='.' || content.at(frompos)=='\\') {
           ret.append(1, '\\');
@

