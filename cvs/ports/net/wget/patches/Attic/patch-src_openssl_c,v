head	1.12;
access;
symbols
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_5:1.2.0.2;
locks; strict;
comment	@# @;


1.12
date	2015.03.19.20.53.43;	author dcoppa;	state dead;
branches;
next	1.11;
commitid	QmFGZF0KT1FSbhwC;

1.11
date	2015.01.04.22.01.22;	author jca;	state Exp;
branches;
next	1.10;
commitid	ZFWfzT1ShatJ7JII;

1.10
date	2014.12.10.20.23.28;	author jca;	state Exp;
branches;
next	1.9;
commitid	pzyCaeNbiuSieLtg;

1.9
date	2014.11.20.10.38.51;	author jca;	state Exp;
branches;
next	1.8;
commitid	hqmdmHKuJZxC0Sbl;

1.8
date	2014.11.05.22.11.40;	author naddy;	state Exp;
branches;
next	1.7;
commitid	2yIzn7ff6aDuB8Yc;

1.7
date	2014.04.19.12.14.15;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2013.08.09.14.40.44;	author naddy;	state dead;
branches;
next	1.5;

1.5
date	2012.10.20.18.49.48;	author dcoppa;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.12.10.14.30;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.07.20.54.48;	author jasper;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2009.10.15.08.27.09;	author benoit;	state dead;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2009.09.16.17.34.41;	author jasper;	state Exp;
branches;
next	;

1.2.2.1
date	2009.10.18.03.25.57;	author william;	state Exp;
branches;
next	;

1.2.4.1
date	2009.10.25.04.08.15;	author william;	state Exp;
branches;
next	;

1.3.2.1
date	2010.09.21.02.57.07;	author william;	state Exp;
branches;
next	;

1.3.4.1
date	2010.09.21.02.58.25;	author william;	state Exp;
branches;
next	;


desc
@@


1.12
log
@
Update to wget-1.16.3

feedback and ok jca@@
@
text
@$OpenBSD: patch-src_openssl_c,v 1.11 2015/01/04 22:01:22 jca Exp $

http://git.savannah.gnu.org/cgit/wget.git/commit/?id=b5778699f0fd65efb78ac8fc0777128a7069b856

--- src/openssl.c.orig	Thu Dec  4 09:55:49 2014
+++ src/openssl.c	Mon Dec  8 12:06:14 2014
@@@@ -91,9 +91,11 @@@@ init_prng (void)
   if (RAND_status ())
     return;
 
+#ifdef HAVE_SSL_RAND_EGD
   /* Get random data from EGD if opt.egd_file was used.  */
   if (opt.egd_file && *opt.egd_file)
     RAND_egd (opt.egd_file);
+#endif
 
   if (RAND_status ())
     return;
@


1.11
log
@Add notes for next release.

uuid and RAND_egd patches committed; the python3 hack will likely stay.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openssl_c,v 1.10 2014/12/10 20:23:28 jca Exp $
@


1.10
log
@Update to wget-1.16.1

- remove patches for regress tests and the TLSv1.0 only issue, merged
  upstream
- libuuid use can now be prevented with CONFIGURE_ARGS
- add a CONFIGURE_ENV hack to avoid depending on python3 at build time
  (spotted by dcoppa@@)

The Web ARChive code doesn't use uuid functions from libc (yet).

ok dcoppa@@
@
text
@d1 4
a4 1
$OpenBSD: patch-src_openssl_c,v 1.9 2014/11/20 10:38:51 jca Exp $
@


1.9
log
@Fix an OpenSSL regression in wget-1.16: by default TLSv1.0 *only* is
used, instead of TLSv1+.  Similar fix for the "pfs" setting.
Report and tests by Mikolaj Kucharski, ok sthen@@
@
text
@d1 4
a4 4
$OpenBSD: patch-src_openssl_c,v 1.8 2014/11/05 22:11:40 naddy Exp $
--- src/openssl.c.orig	Mon Oct 27 09:15:33 2014
+++ src/openssl.c	Wed Nov 19 21:21:07 2014
@@@@ -89,9 +89,11 @@@@ init_prng (void)
a15 29
@@@@ -201,6 +203,8 @@@@ ssl_init (void)
   SSLeay_add_all_algorithms ();
   SSLeay_add_ssl_algorithms ();
 
+  long ssl_options = 0;
+
   switch (opt.secure_protocol)
     {
 #ifndef OPENSSL_NO_SSL2
@@@@ -213,6 +217,9 @@@@ ssl_init (void)
       break;
     case secure_protocol_auto:
     case secure_protocol_pfs:
+      meth = SSLv23_client_method ();
+      ssl_options |= SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3;
+      break;
     case secure_protocol_tlsv1:
       meth = TLSv1_client_method ();
       break;
@@@@ -233,6 +240,9 @@@@ ssl_init (void)
   ssl_ctx = SSL_CTX_new ((SSL_METHOD *)meth);
   if (!ssl_ctx)
     goto error;
+
+  if (ssl_options)
+    SSL_CTX_set_options (ssl_ctx, ssl_options);
 
   /* OpenSSL ciphers: https://www.openssl.org/docs/apps/ciphers.html
    * Since we want a good protection, we also use HIGH (that excludes MD4 ciphers and some more)
@


1.8
log
@update to 1.16 and add dependencies to run all regression tests
hints from ajacoutot@@; ok giovanni@@, sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openssl_c,v 1.7 2014/04/19 12:14:15 sthen Exp $
d3 1
a3 1
+++ src/openssl.c	Tue Nov  4 22:27:21 2014
d16 29
@


1.7
log
@handle RAND_egd removal
@
text
@d1 4
a4 4
$OpenBSD$
--- src/openssl.c.orig	Sat Apr 19 06:12:48 2014
+++ src/openssl.c	Sat Apr 19 06:13:18 2014
@@@@ -86,9 +86,11 @@@@ init_prng (void)
@


1.6
log
@remove gcc2 workarounds
@
text
@d1 6
a6 9
$OpenBSD: patch-src_openssl_c,v 1.5 2012/10/20 18:49:48 dcoppa Exp $

Fix build with GCC2.

--- src/openssl.c.orig	Mon Jun  4 22:05:40 2012
+++ src/openssl.c	Fri Oct 19 09:34:53 2012
@@@@ -513,6 +513,8 @@@@ ssl_check_certificate (int fd, const char *host)
   bool success = true;
   bool alt_name_checked = false;
d8 8
a15 14
+  X509_NAME *xname;
+
   /* If the user has specified --no-check-cert, we still want to warn
      him about problems with the server's certificate.  */
   const char *severity = opt.check_cert ? _("ERROR") : _("WARNING");
@@@@ -661,7 +663,7 @@@@ ssl_check_certificate (int fd, const char *host)
   if (alt_name_checked == false)
     {
       /* Test commomName */
-      X509_NAME *xname = X509_get_subject_name(cert);
+      xname = X509_get_subject_name(cert);
       common_name[0] = '\0';
       X509_NAME_get_text_by_NID (xname, NID_commonName, common_name,
                                  sizeof (common_name));
@


1.5
log
@Update to wget-1.14

OK gsoares@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openssl_c,v 1.4 2011/10/12 10:14:30 dcoppa Exp $
@


1.4
log
@Update to wget-1.13.4.
Tested on i386, amd64 and sparc64.

Note: untested on gcc2 architectures, but it's broken anyway since
gperf fails to build there due to an internal compiler error (as
found by sebastia@@ on his vax).

OK sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openssl_c,v 1.3 2010/09/07 20:54:48 jasper Exp $
d5 3
a7 3
--- src/openssl.c.orig	Thu Oct  6 09:42:04 2011
+++ src/openssl.c	Thu Oct  6 09:43:29 2011
@@@@ -498,6 +498,8 @@@@ ssl_check_certificate (int fd, const char *host)
d16 1
a16 1
@@@@ -646,7 +648,7 @@@@ ssl_check_certificate (int fd, const char *host)
@


1.3
log
@- fix build with gcc2
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 4
--- src/openssl.c.orig	Tue Sep  7 14:41:11 2010
+++ src/openssl.c	Tue Sep  7 14:42:44 2010
@@@@ -490,6 +490,8 @@@@ ssl_check_certificate (int fd, const char *host)
   long vresult;
d9 1
d16 9
a24 9
@@@@ -569,7 +571,7 @@@@ ssl_check_certificate (int fd, const char *host)
      - Ensure that ASN1 strings from the certificate are encoded as
        UTF-8 which can be meaningfully compared to HOST.  */
 
-  X509_NAME *xname = X509_get_subject_name(cert);
+  xname = X509_get_subject_name(cert);
   common_name[0] = '\0';
   X509_NAME_get_text_by_NID (xname, NID_commonName, common_name,
                              sizeof (common_name));
@


1.3.4.1
log
@MFC:

SECURITY FIX

Resolves CVE-2010-2252
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openssl_c,v 1.3 2010/09/07 20:54:48 jasper Exp $
@


1.3.2.1
log
@MFC:

SECURITY FIX

Resolves CVE-2010-2252
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openssl_c,v 1.3 2010/09/07 20:54:48 jasper Exp $
@


1.2
log
@- update wget to 1.12
- regen plist
- update patch

ok ajacoutot@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openssl_c,v 1.1 2009/09/16 17:34:41 jasper Exp $
d3 1
a3 2
Security fix for SA36540 (SSL Certificate NULL Character Processing
Vulnerability).
d5 12
a16 7
Patches from:
http://hg.addictivecode.org/wget/mainline/rev/2d8c76a23e7d
http://hg.addictivecode.org/wget/mainline/rev/f2d2ca32fd1b

--- src/openssl.c.orig	Sun Apr 27 06:48:23 2008
+++ src/openssl.c	Wed Sep 16 19:29:41 2009
@@@@ -561,9 +561,11 @@@@ ssl_check_certificate (int fd, const char *host)
d20 2
a21 1
+  X509_NAME *xname = X509_get_subject_name(cert);
d23 2
a24 50
-  X509_NAME_get_text_by_NID (X509_get_subject_name (cert),
-                             NID_commonName, common_name, sizeof (common_name));
+  X509_NAME_get_text_by_NID (xname, NID_commonName, common_name,
+                             sizeof (common_name));
+
   if (!pattern_match (common_name, host))
     {
       logprintf (LOG_NOTQUIET, _("\
@@@@ -571,6 +573,41 @@@@ ssl_check_certificate (int fd, const char *host)
                  severity, escnonprint (common_name), escnonprint (host));
       success = false;
     }
+  else
+    {
+      /* We now determine the length of the ASN1 string. If it differs from
+       * common_name's length, then there is a \0 before the string terminates.
+       * This can be an instance of a null-prefix attack.
+       *
+       * https://www.blackhat.com/html/bh-usa-09/bh-usa-09-archives.html#Marlinspike
+       * */
+
+      int i = -1, j;
+      X509_NAME_ENTRY *xentry;
+      ASN1_STRING *sdata;
+
+      if (xname) {
+        for (;;)
+          {
+            j = X509_NAME_get_index_by_NID (xname, NID_commonName, i);
+            if (j == -1) break;
+            i = j;
+          }
+      }
+
+      xentry = X509_NAME_get_entry(xname,i);
+      sdata = X509_NAME_ENTRY_get_data(xentry);
+      if (strlen (common_name) != ASN1_STRING_length (sdata)) 
+        {
+          logprintf (LOG_NOTQUIET, _("\
+%s: certificate common name is invalid (contains a NUL character).\n\
+This may be an indication that the host is not who it claims to be\n\
+(that is, it is not the real %s).\n"),
+                     severity, escnonprint (host));
+          success = false;
+        }
+    }
+  
 
   if (success)
     DEBUGP (("X509 certificate successfully verified and matches host %s\n",
@


1.2.4.1
log
@SECURITY FIX

MFC:

SA36540: SSL Certificate NULL Character Processing Vulnerability

Patch from upstream
@
text
@@


1.2.2.1
log
@SECURITY FIX

MFC:

SA36540: SSL Certificate NULL Character Processing Vulnerability

Patch from upstream
@
text
@@


1.1
log
@SECURITY FIX for wget
SA36540: SSL Certificate NULL Character Processing Vulnerability

Patch from upstream

ok ajacoutot@@
@
text
@d1 1
a1 1
$OpenBSD$
@

