head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.10
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.8
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.6
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.2
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.4
	OPENBSD_5_8_BASE:1.1.1.1
	kspillner_20150331:1.1.1.1
	kspillner:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2015.03.31.15.38.37;	author kspillner;	state Exp;
branches
	1.1.1.1;
next	;
commitid	Ay160vCq9FWDzxVO;

1.1.1.1
date	2015.03.31.15.38.37;	author kspillner;	state Exp;
branches;
next	;
commitid	Ay160vCq9FWDzxVO;


desc
@@



1.1
log
@Initial revision
@
text
@@@comment $OpenBSD$
@@bin bin/websocketd
@@man man/man8/websocketd.8
share/examples/websocketd/
share/examples/websocketd/bash/
share/examples/websocketd/bash/count.sh
share/examples/websocketd/cgi-bin/
share/examples/websocketd/cgi-bin/README.txt
share/examples/websocketd/cgi-bin/dump-env.sh
share/examples/websocketd/html/
share/examples/websocketd/html/count.html
@


1.1.1.1
log
@Import websocketd

websocketd is a small command-line tool that will wrap an existing command-line
interface program, and allow it to be accessed via a WebSocket.

WebSocket-capable applications can now be built very easily in any language. As
long as you can write an executable program that reads `STDIN` and writes to
`STDOUT`, you can build a WebSocket server.

ok sthen@@
@
text
@@
