head	1.1;
access;
symbols
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2012.05.16.08.29.01;	author jasper;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2012.05.16.08.29.01;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file patch-xio-readline_c was initially added on branch OPENBSD_5_1.
@
text
@@


1.1.2.1
log
@Security fix for CVE-2012-0219, socat "xioscan_readline()" Buffer Overflow Vulnerability

ok nigel@@ (MAINTAINER)
@
text
@a0 60
$OpenBSD$

Security fix for CVE-2012-0219, socat "xioscan_readline()" Buffer Overflow Vulnerability
http://www.dest-unreach.org/socat/contrib/socat-secadv3.html

--- xio-readline.c.orig	Sat May 22 19:09:17 2010
+++ xio-readline.c	Wed May 16 08:30:13 2012
@@@@ -1,5 +1,5 @@@@
 /* source: xio-readline.c */
-/* Copyright Gerhard Rieger 2002-2009 */
+/* Copyright Gerhard Rieger 2002-2009, 2012 */
 /* Published under the GNU General Public License V.2, see file COPYING */
 
 /* this file contains the source for opening the readline address */
@@@@ -216,25 +216,26 @@@@ void xioscan_readline(struct single *pipe, const void 
    if (pipe->dtype == XIODATA_READLINE && pipe->para.readline.dynprompt) {
       /* we save the last part of the output as possible prompt */
       const void *ptr = buff;
-      const void *pcr = memrchr(buff, '\r', bytes);
-      const void *plf = memrchr(buff, '\n', bytes);
+      const void *pcr;
+      const void *plf;
       size_t len;
+
       if (bytes > pipe->para.readline.dynbytes) {
 	 ptr = (const char *)buff + bytes - pipe->para.readline.dynbytes;
+	 len = pipe->para.readline.dynbytes;
+      } else {
+	 len = bytes;
       }
-      if (pcr) {
+      pcr = memrchr(ptr, '\r', len);
+      plf = memrchr(ptr, '\n', len);
+      if (pcr != NULL || plf != NULL) {
+	 const void *peol = Max(pcr, plf);
 	 /* forget old prompt */
 	 pipe->para.readline.dynend = pipe->para.readline.dynprompt;
+	 len -= (peol+1 - ptr);
 	 /* new prompt starts here */
-	 ptr = (const char *)pcr+1;
+	 ptr = (const char *)peol+1;
       }
-      if (plf && plf >= ptr) {
-	 /* forget old prompt */
-	 pipe->para.readline.dynend = pipe->para.readline.dynprompt;
-	 /* new prompt starts here */
-	 ptr = (const char *)plf+1;
-      }
-      len = (const char *)buff-(const char *)ptr+bytes;
       if (pipe->para.readline.dynend - pipe->para.readline.dynprompt + len >
 	  pipe->para.readline.dynbytes) {
 	 memmove(pipe->para.readline.dynprompt,
@@@@ -245,7 +246,6 @@@@ void xioscan_readline(struct single *pipe, const void 
 	    pipe->para.readline.dynprompt + pipe->para.readline.dynbytes - len;
       }
       memcpy(pipe->para.readline.dynend, ptr, len);
-      /*pipe->para.readline.dynend = pipe->para.readline.dynprompt + len;*/
       pipe->para.readline.dynend = pipe->para.readline.dynend + len;
    }
    return;
@

