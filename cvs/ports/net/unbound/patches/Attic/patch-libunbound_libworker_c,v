head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2012.01.26.22.04.03;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2012.01.10.22.15.54;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to unbound 1.4.15, from Brad, OK jakob@@
@
text
@$OpenBSD: patch-libunbound_libworker_c,v 1.1 2012/01/10 22:15:54 sthen Exp $

Fix to randomize hash function, based on 28c3 congress, reported
by Peter van Dijk.

--- libunbound/libworker.c.orig	Wed Jan  4 17:09:21 2012
+++ libunbound/libworker.c	Wed Jan  4 17:09:35 2012
@@@@ -58,6 +58,7 @@@@
 #include "util/random.h"
 #include "util/config_file.h"
 #include "util/netevent.h"
+#include "util/storage/lookup3.h"
 #include "util/storage/slabhash.h"
 #include "util/net_help.h"
 #include "util/data/dname.h"
@@@@ -158,6 +159,19 @@@@ libworker_setup(struct ub_ctx* ctx, int is_bg)
 	}
 	if(!w->is_bg || w->is_bg_thread) {
 		lock_basic_unlock(&ctx->cfglock);
+	}
+	if(1) {
+		/* primitive lockout for threading: if it overwrites another
+		 * thread it is like wiping the cache (which is likely empty
+		 * at the start) */
+		/* note we are holding the ctx lock in normal threaded
+		 * cases so that is solved properly, it is only for many ctx
+		 * in different threads that this may clash */
+		static int done_raninit = 0;
+		if(!done_raninit) {
+			done_raninit = 1;
+			hash_set_raninit(ub_random(w->env->rnd));
+		}
 	}
 	seed = 0;
 
@


1.1
log
@Fix to randomize hash function, based on 28c3 congress, reported
by Peter van Dijk. Committed upstream in r2580.

Port diff from Brad, ok jakob@@
@
text
@d1 1
a1 1
$OpenBSD$
@

