head	1.1;
access;
symbols
	OPENBSD_5_9:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2016.07.05.07.16.52;	author jasper;	state dead;
branches
	1.1.2.1;
next	;
commitid	ATFCg0d2YCHGzcS2;

1.1.2.1
date	2016.07.05.07.16.52;	author jasper;	state Exp;
branches;
next	;
commitid	ATFCg0d2YCHGzcS2;


desc
@@


1.1
log
@file patch-libpurple_protocols_mxit_formcmds_c was initially added on branch OPENBSD_5_9.
@
text
@@


1.1.2.1
log
@Security fixes for: CVE-2016-2376 - CVE 2016-2380, CVE-2016-4323,
CVE-2016-2365 - CVE-2016-2375 (only affecting the mxit protocol)

originally pointed out by Jeremy Thorn
@
text
@a0 91
$OpenBSD$

Security fixes for:
CVE-2016-2376 - CVE 2016-2380,
CVE 2016-4323,
CVE-2016-2365 - CVE-2016-2375

--- libpurple/protocols/mxit/formcmds.c.orig	Mon Jul  4 13:22:37 2016
+++ libpurple/protocols/mxit/formcmds.c	Mon Jul  4 13:22:58 2016
@@@@ -395,6 +395,9 @@@@ static void command_imagestrip(struct MXitSession* ses
 	/* validator */
 	validator = g_hash_table_lookup(hash, "v");
 
+	if (!name || !validator)
+		return;
+
 	/* image data */
 	tmp = g_hash_table_lookup(hash, "dat");
 	if (tmp) {
@@@@ -430,13 +433,13 @@@@ static void command_imagestrip(struct MXitSession* ses
 	}
 
 	tmp = g_hash_table_lookup(hash, "fw");
-	width = atoi(tmp);
+	width = (tmp ? atoi(tmp) : 0);
 
 	tmp = g_hash_table_lookup(hash, "fh");
-	height = atoi(tmp);
+	height = (tmp ? atoi(tmp) : 0);
 
 	tmp = g_hash_table_lookup(hash, "layer");
-	layer = atoi(tmp);
+	layer = (tmp ? atoi(tmp) : 0);
 
 	purple_debug_info(MXIT_PLUGIN_ID, "ImageStrip %s from %s: [w=%i h=%i l=%i validator=%s]\n", name, from, width, height, layer, validator);
 }
@@@@ -519,29 +522,40 @@@@ static void command_table(struct RXMsgData* mx, GHashT
 	const char* tmp;
 	const char* name;
 	int mode;
-	int nr_columns = 0, nr_rows = 0;
+	unsigned int nr_columns = 0, nr_rows = 0;
 	gchar** coldata;
-	int i, j;
+	unsigned int i, j;
 
 	/* table name */
 	name = g_hash_table_lookup(hash, "nm");
+	if (!name)
+		return;
 
 	/* number of columns */
 	tmp = g_hash_table_lookup(hash, "col");
-	nr_columns = atoi(tmp);
+	nr_columns = (tmp ? atoi(tmp) : 0);
 
 	/* number of rows */
 	tmp = g_hash_table_lookup(hash, "row");
-	nr_rows = atoi(tmp);
+	nr_rows = (tmp ? atoi(tmp) : 0);
 
 	/* mode */
 	tmp = g_hash_table_lookup(hash, "mode");
-	mode = atoi(tmp);
+	mode = (tmp ? atoi(tmp) : 0);
 
 	/* table data */
 	tmp = g_hash_table_lookup(hash, "d");
+	if (!tmp)
+		tmp = "";
+
 	coldata = g_strsplit(tmp, "~", 0);			/* split into entries for each row & column */
 
+	if (g_strv_length(coldata) != (nr_rows * nr_columns)) {
+		purple_debug_info(MXIT_PLUGIN_ID, "Invalid table data: cols=%i rows=%i\n", nr_columns, nr_rows);
+		g_strfreev(coldata);
+		return;
+	}
+
 	purple_debug_info(MXIT_PLUGIN_ID, "Table %s from %s: [cols=%i rows=%i mode=%i]\n", name, mx->from, nr_columns, nr_rows, mode);
 
 	for (i = 0; i < nr_rows; i++) {
@@@@ -549,6 +563,8 @@@@ static void command_table(struct RXMsgData* mx, GHashT
 			purple_debug_info(MXIT_PLUGIN_ID, " Row %i Column %i = %s\n", i, j, coldata[i*nr_columns + j]);
 		}
 	}
+
+	g_strfreev(coldata);
 }
 
 
@

