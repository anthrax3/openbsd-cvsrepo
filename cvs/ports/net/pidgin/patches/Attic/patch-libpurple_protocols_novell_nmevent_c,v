head	1.1;
access;
symbols
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_4:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2014.10.30.07.37.30;	author brad;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1;
next	;
commitid	m6VWQUdGf2sBMx2J;

1.1.2.1
date	2014.10.30.07.37.30;	author brad;	state Exp;
branches;
next	;
commitid	m6VWQUdGf2sBMx2J;

1.1.4.1
date	2014.10.30.07.39.10;	author brad;	state Exp;
branches;
next	;
commitid	WQNd7LozvjAC4lPY;

1.1.6.1
date	2014.10.30.07.40.49;	author brad;	state Exp;
branches;
next	;
commitid	zm0kqMBvEx3BHQZ2;


desc
@@


1.1
log
@file patch-libpurple_protocols_novell_nmevent_c was initially added on branch OPENBSD_5_4.
@
text
@@


1.1.6.1
log
@Security fixes from 2.10.10... CVE-2014-3695, CVE-2014-3696, CVE-2014-3698.

The commit for 2.10.10 mentioned CVE-2014-3697 but after looking at it
again I noticed it is a Windows specific issue.
@
text
@a0 126
$OpenBSD$

Remote crash parsing malformed Groupwise message. CVE-2014-3696

--- libpurple/protocols/novell/nmevent.c.orig	Sun Feb  2 16:29:19 2014
+++ libpurple/protocols/novell/nmevent.c	Thu Oct 30 02:49:10 2014
@@@@ -149,7 +149,7 @@@@ handle_receive_message(NMUser * user, NMEvent * event,
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -164,7 +164,7 @@@@ handle_receive_message(NMUser * user, NMEvent * event,
 	/* Read the message text */
 	if (rc == NM_OK) {
 		rc = nm_read_uint32(conn, &size);
-		if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+		if (size > 100000)	return NMERR_PROTOCOL;
 
 		if (rc == NM_OK) {
 			msg = g_new0(char, size + 1);
@@@@ -270,7 +270,7 @@@@ handle_conference_invite(NMUser * user, NMEvent * even
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -280,7 +280,7 @@@@ handle_conference_invite(NMUser * user, NMEvent * even
 	/* Read the the message */
 	if (rc == NM_OK) {
 		rc = nm_read_uint32(conn, &size);
-		if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+		if (size > 100000)	return NMERR_PROTOCOL;
 
 		if (rc == NM_OK) {
 			msg = g_new0(char, size + 1);
@@@@ -349,7 +349,7 @@@@ handle_conference_invite_notify(NMUser * user, NMEvent
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -401,7 +401,7 @@@@ handle_conference_reject(NMUser * user, NMEvent * even
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -440,7 +440,7 @@@@ handle_conference_left(NMUser * user, NMEvent * event)
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -490,7 +490,7 @@@@ handle_conference_closed(NMUser * user, NMEvent * even
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -530,7 +530,7 @@@@ handle_conference_joined(NMUser * user, NMEvent * even
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -589,7 +589,7 @@@@ handle_typing(NMUser * user, NMEvent * event)
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -632,7 +632,7 @@@@ handle_status_change(NMUser * user, NMEvent * event)
 
 		/* Read the status text */
 		rc = nm_read_uint32(conn, &size);
-		if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+		if (size > 10000)	return NMERR_PROTOCOL;
 
 		if (rc == NM_OK) {
 			text = g_new0(char, size + 1);
@@@@ -670,7 +670,7 @@@@ handle_undeliverable_status(NMUser * user, NMEvent * e
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -833,7 +833,10 @@@@ nm_process_event(NMUser * user, int type)
 	/* Read the event source */
 	rc = nm_read_uint32(conn, &size);
 	if (rc == NM_OK) {
-		if (size > 0) {
+		if (size > 1000000) {
+			/* Size is larger than our 1MB sanity check. Ignore it. */
+			rc = NMERR_PROTOCOL;
+		} else {
 			source = g_new0(char, size);
 
 			rc = nm_read_all(conn, source, size);
@


1.1.4.1
log
@Security fixes from 2.10.10... CVE-2014-3695, CVE-2014-3696, CVE-2014-3698.

The commit for 2.10.10 mentioned CVE-2014-3697 but after looking at it
again I noticed it is a Windows specific isue.
@
text
@a0 126
$OpenBSD$

Remote crash parsing malformed Groupwise message. CVE-2014-3696

--- libpurple/protocols/novell/nmevent.c.orig	Sun Feb  2 16:29:19 2014
+++ libpurple/protocols/novell/nmevent.c	Thu Oct 30 02:49:10 2014
@@@@ -149,7 +149,7 @@@@ handle_receive_message(NMUser * user, NMEvent * event,
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -164,7 +164,7 @@@@ handle_receive_message(NMUser * user, NMEvent * event,
 	/* Read the message text */
 	if (rc == NM_OK) {
 		rc = nm_read_uint32(conn, &size);
-		if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+		if (size > 100000)	return NMERR_PROTOCOL;
 
 		if (rc == NM_OK) {
 			msg = g_new0(char, size + 1);
@@@@ -270,7 +270,7 @@@@ handle_conference_invite(NMUser * user, NMEvent * even
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -280,7 +280,7 @@@@ handle_conference_invite(NMUser * user, NMEvent * even
 	/* Read the the message */
 	if (rc == NM_OK) {
 		rc = nm_read_uint32(conn, &size);
-		if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+		if (size > 100000)	return NMERR_PROTOCOL;
 
 		if (rc == NM_OK) {
 			msg = g_new0(char, size + 1);
@@@@ -349,7 +349,7 @@@@ handle_conference_invite_notify(NMUser * user, NMEvent
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -401,7 +401,7 @@@@ handle_conference_reject(NMUser * user, NMEvent * even
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -440,7 +440,7 @@@@ handle_conference_left(NMUser * user, NMEvent * event)
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -490,7 +490,7 @@@@ handle_conference_closed(NMUser * user, NMEvent * even
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -530,7 +530,7 @@@@ handle_conference_joined(NMUser * user, NMEvent * even
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -589,7 +589,7 @@@@ handle_typing(NMUser * user, NMEvent * event)
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -632,7 +632,7 @@@@ handle_status_change(NMUser * user, NMEvent * event)
 
 		/* Read the status text */
 		rc = nm_read_uint32(conn, &size);
-		if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+		if (size > 10000)	return NMERR_PROTOCOL;
 
 		if (rc == NM_OK) {
 			text = g_new0(char, size + 1);
@@@@ -670,7 +670,7 @@@@ handle_undeliverable_status(NMUser * user, NMEvent * e
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -833,7 +833,10 @@@@ nm_process_event(NMUser * user, int type)
 	/* Read the event source */
 	rc = nm_read_uint32(conn, &size);
 	if (rc == NM_OK) {
-		if (size > 0) {
+		if (size > 1000000) {
+			/* Size is larger than our 1MB sanity check. Ignore it. */
+			rc = NMERR_PROTOCOL;
+		} else {
 			source = g_new0(char, size);
 
 			rc = nm_read_all(conn, source, size);
@


1.1.2.1
log
@Security fixes from 2.10.10... CVE-2014-3695, CVE-2014-3696, CVE-2014-3698.

The commit for 2.10.10 mentioned CVE-2014-3697 but after looking at it
again I noticed it is a Windows specific isue.
@
text
@a0 126
$OpenBSD$

Remote crash parsing malformed Groupwise message. CVE-2014-3696

--- libpurple/protocols/novell/nmevent.c.orig	Sun Feb  2 16:29:19 2014
+++ libpurple/protocols/novell/nmevent.c	Thu Oct 30 02:49:10 2014
@@@@ -149,7 +149,7 @@@@ handle_receive_message(NMUser * user, NMEvent * event,
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -164,7 +164,7 @@@@ handle_receive_message(NMUser * user, NMEvent * event,
 	/* Read the message text */
 	if (rc == NM_OK) {
 		rc = nm_read_uint32(conn, &size);
-		if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+		if (size > 100000)	return NMERR_PROTOCOL;
 
 		if (rc == NM_OK) {
 			msg = g_new0(char, size + 1);
@@@@ -270,7 +270,7 @@@@ handle_conference_invite(NMUser * user, NMEvent * even
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -280,7 +280,7 @@@@ handle_conference_invite(NMUser * user, NMEvent * even
 	/* Read the the message */
 	if (rc == NM_OK) {
 		rc = nm_read_uint32(conn, &size);
-		if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+		if (size > 100000)	return NMERR_PROTOCOL;
 
 		if (rc == NM_OK) {
 			msg = g_new0(char, size + 1);
@@@@ -349,7 +349,7 @@@@ handle_conference_invite_notify(NMUser * user, NMEvent
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -401,7 +401,7 @@@@ handle_conference_reject(NMUser * user, NMEvent * even
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -440,7 +440,7 @@@@ handle_conference_left(NMUser * user, NMEvent * event)
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -490,7 +490,7 @@@@ handle_conference_closed(NMUser * user, NMEvent * even
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -530,7 +530,7 @@@@ handle_conference_joined(NMUser * user, NMEvent * even
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -589,7 +589,7 @@@@ handle_typing(NMUser * user, NMEvent * event)
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -632,7 +632,7 @@@@ handle_status_change(NMUser * user, NMEvent * event)
 
 		/* Read the status text */
 		rc = nm_read_uint32(conn, &size);
-		if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+		if (size > 10000)	return NMERR_PROTOCOL;
 
 		if (rc == NM_OK) {
 			text = g_new0(char, size + 1);
@@@@ -670,7 +670,7 @@@@ handle_undeliverable_status(NMUser * user, NMEvent * e
 
 	/* Read the conference guid */
 	rc = nm_read_uint32(conn, &size);
-	if (size == MAX_UINT32)	return NMERR_PROTOCOL;
+	if (size > 1000)	return NMERR_PROTOCOL;
 
 	if (rc == NM_OK) {
 		guid = g_new0(char, size + 1);
@@@@ -833,7 +833,10 @@@@ nm_process_event(NMUser * user, int type)
 	/* Read the event source */
 	rc = nm_read_uint32(conn, &size);
 	if (rc == NM_OK) {
-		if (size > 0) {
+		if (size > 1000000) {
+			/* Size is larger than our 1MB sanity check. Ignore it. */
+			rc = NMERR_PROTOCOL;
+		} else {
 			source = g_new0(char, size);
 
 			rc = nm_read_all(conn, source, size);
@

