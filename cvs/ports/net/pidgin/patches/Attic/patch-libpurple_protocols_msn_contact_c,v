head	1.1;
access;
symbols
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_6:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2015.01.09.04.43.44;	author brad;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;
commitid	HsMnnSqbG9RoLbYk;

1.1.2.1
date	2015.01.09.04.43.44;	author brad;	state Exp;
branches;
next	;
commitid	HsMnnSqbG9RoLbYk;

1.1.4.1
date	2015.01.09.04.44.11;	author brad;	state Exp;
branches;
next	;
commitid	oLChh3LirC6A3wPd;


desc
@@


1.1
log
@file patch-libpurple_protocols_msn_contact_c was initially added on branch OPENBSD_5_6.
@
text
@@


1.1.4.1
log
@Fix a crash with the ssl_openssl_write() function. It turns out that
openssl_data can be NULL. The current code does not handle this correctly
which results in dereferencing a NULL pointer via openssl_data->ssl.

Some fixes from 2.10.10 and 2.10.11..

3edc70bf4e09
Emit sending/sent signals when doing /me irc command. Fixes #15750
ee51d84aacbf
msn: Hard fail if buddy list is unavailable.
f6a91e6c77a4
msn: Update Application ID to re-enable buddy list.
@
text
@a0 37
$OpenBSD$

ee51d84aacbf
msn: Hard fail if buddy list is unavailable.

--- libpurple/protocols/msn/contact.c.orig	Thu Jan  8 20:47:04 2015
+++ libpurple/protocols/msn/contact.c	Thu Jan  8 20:48:39 2015
@@@@ -487,12 +487,6 @@@@ msn_parse_contact_list(MsnSession *session, xmlnode *n
 	 * this is not handled yet
 	 */
 	if ((fault = xmlnode_get_child(node, "Body/Fault"))) {
-		if ((faultnode = xmlnode_get_child(fault, "faultstring"))) {
-			char *faultstring = xmlnode_get_data(faultnode);
-			purple_debug_info("msn", "Retrieving contact list failed: %s\n",
-				faultstring);
-			g_free(faultstring);
-		}
 		if ((faultnode = xmlnode_get_child(fault, "detail/errorcode"))) {
 			char *errorcode = xmlnode_get_data(faultnode);
 
@@@@ -505,7 +499,15 @@@@ msn_parse_contact_list(MsnSession *session, xmlnode *n
 			g_free(errorcode);
 		}
 
-		msn_get_contact_list(session, MSN_PS_INITIAL, NULL);
+		if ((faultnode = xmlnode_get_child(fault, "faultstring"))) {
+			char *faultstring = xmlnode_get_data(faultnode);
+			purple_debug_info("msn", "Retrieving contact list failed: %s\n",
+				faultstring);
+			msn_session_set_error(session, MSN_ERROR_BAD_BLIST, faultstring);
+			g_free(faultstring);
+		} else {
+			msn_session_set_error(session, MSN_ERROR_BAD_BLIST, NULL);
+		}
 		return FALSE;
 	} else {
 		xmlnode *service;
@


1.1.2.1
log
@Fix a crash with the ssl_openssl_write() function. It turns out that
openssl_data can be NULL. The current code does not handle this correctly
which results in dereferencing a NULL pointer via openssl_data->ssl.

Some fixes from 2.10.10 and 2.10.11..

3edc70bf4e09
Emit sending/sent signals when doing /me irc command. Fixes #15750
ee51d84aacbf
msn: Hard fail if buddy list is unavailable.
f6a91e6c77a4
msn: Update Application ID to re-enable buddy list.
@
text
@a0 37
$OpenBSD$

ee51d84aacbf
msn: Hard fail if buddy list is unavailable.

--- libpurple/protocols/msn/contact.c.orig	Thu Jan  8 20:47:04 2015
+++ libpurple/protocols/msn/contact.c	Thu Jan  8 20:48:39 2015
@@@@ -487,12 +487,6 @@@@ msn_parse_contact_list(MsnSession *session, xmlnode *n
 	 * this is not handled yet
 	 */
 	if ((fault = xmlnode_get_child(node, "Body/Fault"))) {
-		if ((faultnode = xmlnode_get_child(fault, "faultstring"))) {
-			char *faultstring = xmlnode_get_data(faultnode);
-			purple_debug_info("msn", "Retrieving contact list failed: %s\n",
-				faultstring);
-			g_free(faultstring);
-		}
 		if ((faultnode = xmlnode_get_child(fault, "detail/errorcode"))) {
 			char *errorcode = xmlnode_get_data(faultnode);
 
@@@@ -505,7 +499,15 @@@@ msn_parse_contact_list(MsnSession *session, xmlnode *n
 			g_free(errorcode);
 		}
 
-		msn_get_contact_list(session, MSN_PS_INITIAL, NULL);
+		if ((faultnode = xmlnode_get_child(fault, "faultstring"))) {
+			char *faultstring = xmlnode_get_data(faultnode);
+			purple_debug_info("msn", "Retrieving contact list failed: %s\n",
+				faultstring);
+			msn_session_set_error(session, MSN_ERROR_BAD_BLIST, faultstring);
+			g_free(faultstring);
+		} else {
+			msn_session_set_error(session, MSN_ERROR_BAD_BLIST, NULL);
+		}
 		return FALSE;
 	} else {
 		xmlnode *service;
@

