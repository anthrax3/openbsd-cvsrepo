head	1.1;
access;
symbols
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_6:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2015.01.09.04.43.44;	author brad;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;
commitid	HsMnnSqbG9RoLbYk;

1.1.2.1
date	2015.01.09.04.43.44;	author brad;	state Exp;
branches;
next	;
commitid	HsMnnSqbG9RoLbYk;

1.1.4.1
date	2015.01.09.04.44.11;	author brad;	state Exp;
branches;
next	;
commitid	oLChh3LirC6A3wPd;


desc
@@


1.1
log
@file patch-libpurple_protocols_irc_cmds_c was initially added on branch OPENBSD_5_6.
@
text
@@


1.1.4.1
log
@Fix a crash with the ssl_openssl_write() function. It turns out that
openssl_data can be NULL. The current code does not handle this correctly
which results in dereferencing a NULL pointer via openssl_data->ssl.

Some fixes from 2.10.10 and 2.10.11..

3edc70bf4e09
Emit sending/sent signals when doing /me irc command. Fixes #15750
ee51d84aacbf
msn: Hard fail if buddy list is unavailable.
f6a91e6c77a4
msn: Update Application ID to re-enable buddy list.
@
text
@a0 117
$OpenBSD$

3edc70bf4e09
Emit sending/sent signals when doing /me irc command. Fixes #15750

--- libpurple/protocols/irc/cmds.c.orig	Sun Feb  2 16:29:18 2014
+++ libpurple/protocols/irc/cmds.c	Thu Jan  8 21:54:30 2015
@@@@ -98,41 +98,86 @@@@ int irc_cmd_ctcp_action(struct irc_conn *irc, const ch
 	PurpleConnection *gc = purple_account_get_connection(irc->account);
 	char *action, *escaped, *dst, **newargs;
 	const char *src;
+	char *msg;
 	PurpleConversation *convo;
 
 	if (!args || !args[0] || !gc)
 		return 0;
 
-	action = g_malloc(strlen(args[0]) + 10);
+	convo = purple_find_conversation_with_account(PURPLE_CONV_TYPE_ANY,
+		target, irc->account);
 
-	sprintf(action, "\001ACTION ");
+	msg = g_strdup_printf("/me %s", args[0]);
 
-	src = args[0];
-	dst = action + 8;
-	while (*src) {
-		if (*src == '\n') {
-			if (*(src + 1) == '\0') {
-				break;
-			} else {
-				*dst++ = ' ';
-				src++;
-				continue;
+	/* XXX: we'd prefer to keep this in conversation.c */
+	if (purple_conversation_get_type(convo) == PURPLE_CONV_TYPE_IM) {
+		purple_signal_emit(purple_conversations_get_handle(),
+			"sending-im-msg", irc->account,
+			purple_conversation_get_name(convo), &msg);
+	} else {
+		purple_signal_emit(purple_conversations_get_handle(),
+			"sending-chat-msg", irc->account, &msg,
+			purple_conv_chat_get_id(PURPLE_CONV_CHAT(convo)));
+	}
+
+	if (!msg || !msg[0]) {
+		g_free(msg);
+		return 0;
+	}
+
+	if (strncmp(msg, "/me ", 4) != 0) {
+		newargs = g_new0(char *, 2);
+		newargs[0] = g_strdup(target);
+		newargs[1] = msg;
+
+		irc_cmd_privmsg(irc, cmd, target, (const char **)newargs);
+
+		g_free(newargs[0]);
+		g_free(newargs);
+	} else {
+		action = g_malloc(strlen(&msg[4]) + 10);
+
+		sprintf(action, "\001ACTION ");
+
+		src = &msg[4];
+		dst = action + 8;
+		while (*src) {
+			if (*src == '\n') {
+				if (*(src + 1) == '\0') {
+					break;
+				} else {
+					*dst++ = ' ';
+					src++;
+					continue;
+				}
 			}
+			*dst++ = *src++;
 		}
-		*dst++ = *src++;
+		*dst++ = '\001';
+		*dst = '\0';
+
+		newargs = g_new0(char *, 2);
+		newargs[0] = g_strdup(target);
+		newargs[1] = action;
+		irc_cmd_privmsg(irc, cmd, target, (const char **)newargs);
+		g_free(newargs[0]);
+		g_free(newargs);
+		g_free(action);
 	}
-	*dst++ = '\001';
-	*dst = '\0';
 
-	newargs = g_new0(char *, 2);
-	newargs[0] = g_strdup(target);
-	newargs[1] = action;
-	irc_cmd_privmsg(irc, cmd, target, (const char **)newargs);
-	g_free(newargs[0]);
-	g_free(newargs[1]);
-	g_free(newargs);
+	/* XXX: we'd prefer to keep this in conversation.c */
+	if (purple_conversation_get_type(convo) == PURPLE_CONV_TYPE_IM) {
+		purple_signal_emit(purple_conversations_get_handle(),
+			"sent-im-msg", irc->account,
+			purple_conversation_get_name(convo), msg);
+	} else {
+		purple_signal_emit(purple_conversations_get_handle(),
+			"sent-chat-msg", irc->account, msg,
+			purple_conv_chat_get_id(PURPLE_CONV_CHAT(convo)));
+	}
 
-	convo = purple_find_conversation_with_account(PURPLE_CONV_TYPE_ANY, target, irc->account);
+	g_free(msg);
+
 	if (convo) {
 		escaped = g_markup_escape_text(args[0], -1);
 		action = g_strdup_printf("/me %s", escaped);
@


1.1.2.1
log
@Fix a crash with the ssl_openssl_write() function. It turns out that
openssl_data can be NULL. The current code does not handle this correctly
which results in dereferencing a NULL pointer via openssl_data->ssl.

Some fixes from 2.10.10 and 2.10.11..

3edc70bf4e09
Emit sending/sent signals when doing /me irc command. Fixes #15750
ee51d84aacbf
msn: Hard fail if buddy list is unavailable.
f6a91e6c77a4
msn: Update Application ID to re-enable buddy list.
@
text
@a0 117
$OpenBSD$

3edc70bf4e09
Emit sending/sent signals when doing /me irc command. Fixes #15750

--- libpurple/protocols/irc/cmds.c.orig	Sun Feb  2 16:29:18 2014
+++ libpurple/protocols/irc/cmds.c	Thu Jan  8 21:54:30 2015
@@@@ -98,41 +98,86 @@@@ int irc_cmd_ctcp_action(struct irc_conn *irc, const ch
 	PurpleConnection *gc = purple_account_get_connection(irc->account);
 	char *action, *escaped, *dst, **newargs;
 	const char *src;
+	char *msg;
 	PurpleConversation *convo;
 
 	if (!args || !args[0] || !gc)
 		return 0;
 
-	action = g_malloc(strlen(args[0]) + 10);
+	convo = purple_find_conversation_with_account(PURPLE_CONV_TYPE_ANY,
+		target, irc->account);
 
-	sprintf(action, "\001ACTION ");
+	msg = g_strdup_printf("/me %s", args[0]);
 
-	src = args[0];
-	dst = action + 8;
-	while (*src) {
-		if (*src == '\n') {
-			if (*(src + 1) == '\0') {
-				break;
-			} else {
-				*dst++ = ' ';
-				src++;
-				continue;
+	/* XXX: we'd prefer to keep this in conversation.c */
+	if (purple_conversation_get_type(convo) == PURPLE_CONV_TYPE_IM) {
+		purple_signal_emit(purple_conversations_get_handle(),
+			"sending-im-msg", irc->account,
+			purple_conversation_get_name(convo), &msg);
+	} else {
+		purple_signal_emit(purple_conversations_get_handle(),
+			"sending-chat-msg", irc->account, &msg,
+			purple_conv_chat_get_id(PURPLE_CONV_CHAT(convo)));
+	}
+
+	if (!msg || !msg[0]) {
+		g_free(msg);
+		return 0;
+	}
+
+	if (strncmp(msg, "/me ", 4) != 0) {
+		newargs = g_new0(char *, 2);
+		newargs[0] = g_strdup(target);
+		newargs[1] = msg;
+
+		irc_cmd_privmsg(irc, cmd, target, (const char **)newargs);
+
+		g_free(newargs[0]);
+		g_free(newargs);
+	} else {
+		action = g_malloc(strlen(&msg[4]) + 10);
+
+		sprintf(action, "\001ACTION ");
+
+		src = &msg[4];
+		dst = action + 8;
+		while (*src) {
+			if (*src == '\n') {
+				if (*(src + 1) == '\0') {
+					break;
+				} else {
+					*dst++ = ' ';
+					src++;
+					continue;
+				}
 			}
+			*dst++ = *src++;
 		}
-		*dst++ = *src++;
+		*dst++ = '\001';
+		*dst = '\0';
+
+		newargs = g_new0(char *, 2);
+		newargs[0] = g_strdup(target);
+		newargs[1] = action;
+		irc_cmd_privmsg(irc, cmd, target, (const char **)newargs);
+		g_free(newargs[0]);
+		g_free(newargs);
+		g_free(action);
 	}
-	*dst++ = '\001';
-	*dst = '\0';
 
-	newargs = g_new0(char *, 2);
-	newargs[0] = g_strdup(target);
-	newargs[1] = action;
-	irc_cmd_privmsg(irc, cmd, target, (const char **)newargs);
-	g_free(newargs[0]);
-	g_free(newargs[1]);
-	g_free(newargs);
+	/* XXX: we'd prefer to keep this in conversation.c */
+	if (purple_conversation_get_type(convo) == PURPLE_CONV_TYPE_IM) {
+		purple_signal_emit(purple_conversations_get_handle(),
+			"sent-im-msg", irc->account,
+			purple_conversation_get_name(convo), msg);
+	} else {
+		purple_signal_emit(purple_conversations_get_handle(),
+			"sent-chat-msg", irc->account, msg,
+			purple_conv_chat_get_id(PURPLE_CONV_CHAT(convo)));
+	}
 
-	convo = purple_find_conversation_with_account(PURPLE_CONV_TYPE_ANY, target, irc->account);
+	g_free(msg);
+
 	if (convo) {
 		escaped = g_markup_escape_text(args[0], -1);
 		action = g_strdup_printf("/me %s", escaped);
@

