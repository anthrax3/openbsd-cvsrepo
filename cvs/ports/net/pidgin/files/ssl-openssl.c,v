head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.10
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.8
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.7.0.12
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.10
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.8
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.5.0.4
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.2
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.4
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	alek_20070512:1.1.1.1
	alek:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.01.09.01.34.44;	author brad;	state Exp;
branches;
next	1.8;
commitid	RtDnDinwkXsESWHi;

1.8
date	2014.10.28.01.14.23;	author brad;	state Exp;
branches;
next	1.7;
commitid	lQDgRLtG6cDsRXTv;

1.7
date	2011.12.13.14.42.55;	author jasper;	state Exp;
branches
	1.7.10.1
	1.7.12.1;
next	1.6;

1.6
date	2011.10.10.17.17.08;	author jasper;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.07.12.32.07;	author steven;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.24.19.17.31;	author steven;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.13.22.04.40;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.12.08.19.28;	author steven;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.12.15.19.35;	author alek;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.05.12.15.19.35;	author alek;	state Exp;
branches;
next	;

1.7.10.1
date	2015.01.09.04.44.11;	author brad;	state Exp;
branches;
next	;
commitid	oLChh3LirC6A3wPd;

1.7.12.1
date	2015.01.09.04.43.44;	author brad;	state Exp;
branches;
next	;
commitid	HsMnnSqbG9RoLbYk;


desc
@@


1.9
log
@Fix a crash with the ssl_openssl_write() function. It turns out that
openssl_data can be NULL. The current code does not handle this correctly
which results in dereferencing a NULL pointer via openssl_data->ssl.

Also some format string fixes.

Issue found and fixed by jsing@@
@
text
@/*	$OpenBSD: ssl-openssl.c,v 1.8 2014/10/28 01:14:23 brad Exp $	*/

/*
 * OpenSSL SSL-plugin for purple
 *
 * Copyright (c) 2004 Brad Smith <brad@@comstyle.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "internal.h"
#include "debug.h"
#include "plugin.h"
#include "sslconn.h"
#include "version.h"

#define SSL_OPENSSL_PLUGIN_ID "ssl-openssl"

#include <openssl/ssl.h>
#include <openssl/err.h>

typedef struct
{
	SSL	*ssl;
	SSL_CTX	*ssl_ctx;
	guint	handshake_handler;
} PurpleSslOpensslData;

#define PURPLE_SSL_OPENSSL_DATA(gsc) ((PurpleSslOpensslData *)gsc->private_data)

/*
 * ssl_openssl_init_openssl
 *
 * load the error strings we might want to use eventually, and init the
 * openssl library
 */
static void
ssl_openssl_init_openssl(void)
{
	/*
	 * load the error number to string strings so that we can make sense
	 * of ssl issues while debugging this code
	 */
	SSL_load_error_strings();

	/*
	 * we need to initialise the openssl library
	 * we do not seed the random number generator, although we probably
	 * should in purple-win32.
	 */
	SSL_library_init();

	/*
	 * add all digest algorithms and ciphers
	 */
	OpenSSL_add_all_algorithms();
}

/*
 * ssl_openssl_init
 */
static gboolean
ssl_openssl_init(void)
{
	return (TRUE);
}

/*
 * ssl_openssl_uninit
 *
 * couldn't find anything to match the call to SSL_library_init in the man
 * pages, i wonder if there actually is anything we need to call
 */
static void
ssl_openssl_uninit(void)
{
	ERR_free_strings();
}

/*
 * ssl_openssl_handshake_cb
 */
static void
ssl_openssl_handshake_cb(gpointer data, gint source, PurpleInputCondition cond)
{
	PurpleSslConnection *gsc = (PurpleSslConnection *)data;
	PurpleSslOpensslData *openssl_data = PURPLE_SSL_OPENSSL_DATA(gsc);
	int ret, ret2;

	purple_debug_info("openssl", "Connecting to %s\n", gsc->host);

	/*
	 * do the negotiation that sets up the SSL connection between
	 * here and there.
	 */
	ret = SSL_connect(openssl_data->ssl);
	if (ret <= 0) {
		ret2 = SSL_get_error(openssl_data->ssl, ret);

		if (ret2 == SSL_ERROR_WANT_READ || ret2 == SSL_ERROR_WANT_WRITE)
			return;

		purple_debug_error("openssl", "SSL_connect failed: %d\n",
		    ret2);

		if (gsc->error_cb != NULL)
			gsc->error_cb(gsc, PURPLE_SSL_HANDSHAKE_FAILED,
				gsc->connect_cb_data);

		purple_ssl_close(gsc);
		return;
	}

	purple_input_remove(openssl_data->handshake_handler);
	openssl_data->handshake_handler = 0;

	purple_debug_info("openssl", "Connected to %s\n", gsc->host);

	/* SSL connected now */
	gsc->connect_cb(gsc->connect_cb_data, gsc, cond);
}

/*
 * ssl_openssl_connect
 *
 * given a socket, put an openssl connection around it.
 */
static void
ssl_openssl_connect(PurpleSslConnection *gsc)
{
	PurpleSslOpensslData *openssl_data;

	/*
	 * allocate some memory to store variables for the openssl connection.
	 * the memory comes zero'd from g_new0 so we don't need to null the
	 * pointers held in this struct.
	 */
	openssl_data = g_new0(PurpleSslOpensslData, 1);
	gsc->private_data = openssl_data;

	/*
	 * allocate a new SSL_CTX object
	 */
	openssl_data->ssl_ctx = SSL_CTX_new(SSLv23_client_method());
	if (openssl_data->ssl_ctx == NULL) {
		purple_debug_error("openssl", "SSL_CTX_new failed\n");
		if (gsc->error_cb != NULL)
			gsc->error_cb(gsc, PURPLE_SSL_HANDSHAKE_FAILED,
				gsc->connect_cb_data);

		purple_ssl_close(gsc);
		return;
	}

	/*
	 * disable SSLv2 and SSLv3
	 */
	SSL_CTX_set_options(openssl_data->ssl_ctx,
		(SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3));

	/*
	 * allocate a new SSL object
	 */
	openssl_data->ssl = SSL_new(openssl_data->ssl_ctx);
	if (openssl_data->ssl == NULL) {
		purple_debug_error("openssl", "SSL_new failed\n");
		if (gsc->error_cb != NULL)
			gsc->error_cb(gsc, PURPLE_SSL_HANDSHAKE_FAILED,
				gsc->connect_cb_data);

		purple_ssl_close(gsc);
		return;
	}

	/*
	 * now we associate the file descriptor we have with the SSL connection
	 */
	if (SSL_set_fd(openssl_data->ssl, gsc->fd) == 0) {
		purple_debug_error("openssl", "SSL_set_fd failed\n");
		if (gsc->error_cb != NULL)
			gsc->error_cb(gsc, PURPLE_SSL_HANDSHAKE_FAILED,
				gsc->connect_cb_data);

		purple_ssl_close(gsc);
		return;
	}

	openssl_data->handshake_handler = purple_input_add(gsc->fd,
		PURPLE_INPUT_READ, ssl_openssl_handshake_cb, gsc);

	ssl_openssl_handshake_cb(gsc, gsc->fd, PURPLE_INPUT_READ);
}

static void
ssl_openssl_close(PurpleSslConnection *gsc)
{
	PurpleSslOpensslData *openssl_data = PURPLE_SSL_OPENSSL_DATA(gsc);
	int i;

	if (openssl_data == NULL)
		return;

	if (openssl_data->handshake_handler)
		purple_input_remove(openssl_data->handshake_handler);

	if (openssl_data->ssl != NULL) {
		i = SSL_shutdown(openssl_data->ssl);
		if (i == 0)
			SSL_shutdown(openssl_data->ssl);
		SSL_free(openssl_data->ssl);
	}

	if (openssl_data->ssl_ctx != NULL)
		SSL_CTX_free(openssl_data->ssl_ctx);

	g_free(openssl_data);
	gsc->private_data = NULL;
}

static size_t
ssl_openssl_read(PurpleSslConnection *gsc, void *data, size_t len)
{
	PurpleSslOpensslData *openssl_data = PURPLE_SSL_OPENSSL_DATA(gsc);
	ssize_t s;
	int ret;

	s = SSL_read(openssl_data->ssl, data, len);
	if (s <= 0) {
		ret = SSL_get_error(openssl_data->ssl, s);

		if (ret == SSL_ERROR_WANT_READ || ret == SSL_ERROR_WANT_WRITE) {
			errno = EAGAIN;
			return (-1);
		}

		purple_debug_error("openssl", "receive failed: %zi\n", s);
		s = 0;
	}

	return (s);
}

static size_t
ssl_openssl_write(PurpleSslConnection *gsc, const void *data, size_t len)
{
	PurpleSslOpensslData *openssl_data = PURPLE_SSL_OPENSSL_DATA(gsc);
	ssize_t s = 0;
	int ret;

	if (openssl_data == NULL)
		return (0);

	s = SSL_write(openssl_data->ssl, data, len);
	if (s <= 0) {
		ret = SSL_get_error(openssl_data->ssl, s);

		if (ret == SSL_ERROR_WANT_READ || ret == SSL_ERROR_WANT_WRITE) {
			errno = EAGAIN;
			return (-1);
		}

		purple_debug_error("openssl", "send failed: %zi\n", s);
		s = 0;
	}

	return (s);
}

static GList *
ssl_openssl_peer_certs(PurpleSslConnection *gsc)
{
	return (NULL);
}

static PurpleSslOps ssl_ops = {
	ssl_openssl_init,
	ssl_openssl_uninit,
	ssl_openssl_connect,
	ssl_openssl_close,
	ssl_openssl_read,
	ssl_openssl_write,
	ssl_openssl_peer_certs,

	/* padding */
	NULL,
	NULL,
	NULL
};

static gboolean
plugin_load(PurplePlugin *plugin)
{
	if (!purple_ssl_get_ops())
		purple_ssl_set_ops(&ssl_ops);

	/* Init OpenSSL now so others can use it even if sslconn never does */
	ssl_openssl_init_openssl();

	return (TRUE);
}

static gboolean
plugin_unload(PurplePlugin *plugin)
{
	if (purple_ssl_get_ops() == &ssl_ops)
		purple_ssl_set_ops(NULL);

	return (TRUE);
}

static PurplePluginInfo info = {
	PURPLE_PLUGIN_MAGIC,
	PURPLE_MAJOR_VERSION,
	PURPLE_MINOR_VERSION,
	PURPLE_PLUGIN_STANDARD,				/* type */
	NULL,						/* ui_requirement */
	PURPLE_PLUGIN_FLAG_INVISIBLE,			/* flags */
	NULL,						/* dependencies */
	PURPLE_PRIORITY_DEFAULT,				/* priority */

	SSL_OPENSSL_PLUGIN_ID,				/* id */
	N_("OpenSSL"),					/* name */
	DISPLAY_VERSION,				/* version */

	N_("Provides SSL support through OpenSSL."),	/* description */
	N_("Provides SSL support through OpenSSL."),
	"OpenSSL",
	NULL,						/* homepage */

	plugin_load,					/* load */
	plugin_unload,					/* unload */
	NULL,						/* destroy */

	NULL,						/* ui_info */
	NULL,						/* extra_info */
	NULL,						/* prefs_info */
	NULL,						/* actions */

	/* padding */
	NULL,
	NULL,
	NULL,
	NULL
};

static void
init_plugin(PurplePlugin *plugin)
{
}

PURPLE_INIT_PLUGIN(ssl_openssl, init_plugin, info)
@


1.8
log
@Update to Pidgin 2.10.10. Fixes 4 issues with CVE assigned.. CVE-2014-3695,
CVE-2014-3696, CVE-2014-3697, CVE-2014-3698.

ok jasper@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.7 2011/12/13 14:42:55 jasper Exp $	*/
d168 2
a169 1
	SSL_CTX_set_options(openssl_data->ssl_ctx, (SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3));
d246 1
a246 1
		purple_debug_error("openssl", "receive failed: %d\n", s);
d260 2
a261 2
	if (openssl_data != NULL)
		s = SSL_write(openssl_data->ssl, data, len);
d263 1
d272 1
a272 1
		purple_debug_error("openssl", "send failed: %d\n", s);
@


1.7
log
@- update to 2.10.1

from maintainer
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.6 2011/10/10 17:17:08 jasper Exp $	*/
d153 1
a153 1
	*/
d166 3
a168 3
	 * disable SSLv2
	*/
	SSL_CTX_set_options(openssl_data->ssl_ctx, SSL_OP_NO_SSLv2);
@


1.7.10.1
log
@Fix a crash with the ssl_openssl_write() function. It turns out that
openssl_data can be NULL. The current code does not handle this correctly
which results in dereferencing a NULL pointer via openssl_data->ssl.

Some fixes from 2.10.10 and 2.10.11..

3edc70bf4e09
Emit sending/sent signals when doing /me irc command. Fixes #15750
ee51d84aacbf
msn: Hard fail if buddy list is unavailable.
f6a91e6c77a4
msn: Update Application ID to re-enable buddy list.
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.7 2011/12/13 14:42:55 jasper Exp $	*/
d153 1
a153 1
	 */
d166 3
a168 4
	 * disable SSLv2 and SSLv3
	 */
	SSL_CTX_set_options(openssl_data->ssl_ctx,
		(SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3));
d245 1
a245 1
		purple_debug_error("openssl", "receive failed: %zi\n", s);
d259 2
a260 2
	if (openssl_data == NULL)
		return (0);
a261 1
	s = SSL_write(openssl_data->ssl, data, len);
d270 1
a270 1
		purple_debug_error("openssl", "send failed: %zi\n", s);
@


1.7.12.1
log
@Fix a crash with the ssl_openssl_write() function. It turns out that
openssl_data can be NULL. The current code does not handle this correctly
which results in dereferencing a NULL pointer via openssl_data->ssl.

Some fixes from 2.10.10 and 2.10.11..

3edc70bf4e09
Emit sending/sent signals when doing /me irc command. Fixes #15750
ee51d84aacbf
msn: Hard fail if buddy list is unavailable.
f6a91e6c77a4
msn: Update Application ID to re-enable buddy list.
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.7 2011/12/13 14:42:55 jasper Exp $	*/
d153 1
a153 1
	 */
d166 3
a168 4
	 * disable SSLv2 and SSLv3
	 */
	SSL_CTX_set_options(openssl_data->ssl_ctx,
		(SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3));
d245 1
a245 1
		purple_debug_error("openssl", "receive failed: %zi\n", s);
d259 2
a260 2
	if (openssl_data == NULL)
		return (0);
a261 1
	s = SSL_write(openssl_data->ssl, data, len);
d270 1
a270 1
		purple_debug_error("openssl", "send failed: %zi\n", s);
@


1.6
log
@- Fix invalid UTF-8 string handling with SILC messages. CVE-2001-3594
- Make sure OpenSSL never tries to use SSLv2.

from brad (MAINTAINER)
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.5 2010/11/07 12:32:07 steven Exp $	*/
d277 6
d289 7
a295 1
	ssl_openssl_write
@


1.5
log
@have the OpenSSL module call OpenSSL_add_all_algorithms() upon initialization

from brad (maintainer)
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.2 2008/04/12 08:19:28 steven Exp $	*/
d164 5
@


1.4
log
@update to 2.7.4

from brad (maintainer)
@
text
@d62 5
@


1.3
log
@Update to Pidgin 2.5.1.

ok steven@@
@
text
@a28 2
#ifdef HAVE_OPENSSL

a275 2
#endif /* HAVE_OPENSSL */

a278 1
#ifdef HAVE_OPENSSL
a285 3
#else
	return (FALSE);
#endif
a290 1
#ifdef HAVE_OPENSSL
a292 1
#endif
@


1.2
log
@tweak debug messages from openssl support

from brad
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.1.1.1 2007/05/12 15:19:35 alek Exp $	*/
d319 1
a319 1
	VERSION,					/* version */
d333 7
a339 1
	NULL						/* actions */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.10 2006/10/31 19:32:51 brad Exp $	*/
d97 1
a97 1
	purple_debug_info("openssl", "Connecting\n");
a104 1
		purple_debug_info("openssl", "SSL_get_error\n");
d110 2
a111 1
		purple_debug_error("openssl", "SSL_connect failed\n");
d124 1
a124 1
	purple_debug_info("openssl", "SSL_connect complete\n");
@


1.1.1.1
log
@Import pidgin-2.0.0

This is a new major release of GAIM with a new name to make AOL happy.

ok brad
@
text
@@
