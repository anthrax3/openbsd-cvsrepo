head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.14
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.12
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.10
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.6
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.8
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.4
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.1.1.1.0.8
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.6
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.4
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.2
	OPENBSD_5_2_BASE:1.1.1.1
	sthen_20120716:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.03.25.01.45.27;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2012.07.16.15.22.05;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.07.16.15.22.05;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to TTG ("SNMP Text Traffic Grapher") 2.1
- adds optional support for 64-bit counters and ifDescr in the interface list
@
text
@$OpenBSD$
--- ttg.c.orig	Tue Mar 25 01:40:21 2014
+++ ttg.c	Tue Mar 25 01:41:22 2014
@@@@ -126,15 +126,6 @@@@ int main(int argc, char **argv) {
     if((argc-optind)!=3)
         usage();
 
-    if(strcmp(netsnmp_get_version(), PACKAGE_VERSION)!=0) {
-        fprintf(stderr,
-            "ERROR: Net-SNMP version mismatch!\n"
-            "Compiled with headers: %s\n"
-            "Executed with library: %s\n",
-            PACKAGE_VERSION, netsnmp_get_version());
-        exit(1);
-    }
-
     S_MB=S_KB*S_KB;
     S_GB=S_KB*S_KB*S_KB;
 
@@@@ -610,7 +601,7 @@@@ void version(void) {
         "SNMP Text Traffic Grapher\n"
         "Copyright (c) 2005 - 2012 by Antoni Sawicki\n" 
         "Version %s [Build: %s, %s]\n"
-        "NET-SNMP Libraries=%s Headers=%s\n"
+        "NET-SNMP Libraries=%s\n"
         "GCC Version %s\n"
         "Kilo=%d (default)\n"
         "Homepage: http://www.tenox.tc/out#ttg\n"
@@@@ -620,7 +611,7 @@@@ void version(void) {
         "  mike@@mk.tc\n"
         "  tommy@@ntinternals.net\n"
         "  piston@@otel.net\n",
-        VERSION, __DATE__, __TIME__, netsnmp_get_version(), PACKAGE_VERSION, __VERSION__, (int)S_KB);
+        VERSION, __DATE__, __TIME__, netsnmp_get_version(), __VERSION__, (int)S_KB);
     exit(0);
 }
 
@


1.1
log
@Initial revision
@
text
@d2 3
a4 18

- the net-snmp package does not use PACKAGE_VERSION

- lookup interface id as specified before handling Cisco-style
abbreviations (vl5 -> Vlan5, etc)

--- ttg.c.orig	Mon May 28 21:24:46 2012
+++ ttg.c	Wed Jul  4 12:42:15 2012
@@@@ -58,7 +58,7 @@@@ struct snmp_session *ses;
 
 uint64_t getcntr(int dir, oid inst);
 int ifstatus(int type, oid inst);
-int lsif(char *ifname);
+int lsif(char *ifname, int);
 void thr(int ifno);
 void kbprint(uint64_t var);
 void finish(void);
@@@@ -130,6 +130,7 @@@@ int main(int argc, char **argv) {
d8 11
a18 43
+#if 0
     if(strcmp(netsnmp_get_version(), PACKAGE_VERSION)!=0) {
         fprintf(stderr,
             "ERROR: Net-SNMP version mismatch!\n"
@@@@ -138,6 +139,7 @@@@ int main(int argc, char **argv) {
             PACKAGE_VERSION, netsnmp_get_version());
         exit(1);
     }
+#endif
 
     if(UINT32_MAX == UINT64_MAX) {
         fprintf(stderr, "ERROR: UINT32_MAX == UINT64_MAX\n");
@@@@ -166,11 +168,13 @@@@ int main(int argc, char **argv) {
     }
 
     if(strcasecmp(argv[optind+2], "list")==0 || strcasecmp(argv[optind+2], "ls")==0) 
-        lsif(NULL);
+        lsif(NULL, 1);
     else if(isdigit((int)argv[optind+2][0]))
         thr(atoi(argv[optind+2]));
     else if(strlen(argv[optind+2])>=2) {
-        if(argv[optind+2][0]=='s' && argv[optind+2][1]=='e') 
+        if(lsif(argv[optind+2], 0))
+	    snprintf(finame, sizeof(finame), "%s", argv[optind+2]);
+        else if(argv[optind+2][0]=='s' && argv[optind+2][1]=='e') 
             snprintf(finame, sizeof(finame), "Serial%s", argv[optind+2]+2);
         else if(argv[optind+2][0]=='e' && argv[optind+2][1]=='t') 
             snprintf(finame, sizeof(finame), "Ethernet%s", argv[optind+2]+2);
@@@@ -193,9 +197,9 @@@@ int main(int argc, char **argv) {
         else if(argv[optind+2][0]=='t' && argv[optind+2][1]=='u') 
             snprintf(finame, sizeof(finame), "Tunnel%s", argv[optind+2]+2);
         else
-            thr(lsif(argv[optind+2]));
+            thr(lsif(argv[optind+2], 1));
 
-        thr(lsif(finame));
+        thr(lsif(finame, 1));
     }
     else
         usage();
@@@@ -372,7 +376,7 @@@@ void prifalias(oid inst) {
 
 }
d20 1
a20 46
-int lsif(char *ifname) {
+int lsif(char *ifname, int print) {
     struct snmp_pdu *pdu, *resp;
     oid tmp_oid[MAX_OID_LEN];
     size_t tmp_oid_len;
@@@@ -395,11 +399,12 @@@@ int lsif(char *ifname) {
                 tmp[resp->variables->val_len]=0;
                 if(ifname) {
                     if(strcasecmp(ifname, tmp)==0) {
-                        printf("Found \"%s\" at index %lu:\n", tmp, resp->variables->name[resp->variables->name_length-1]);
+                        if(print)
+			    printf("Found \"%s\" at index %lu:\n", tmp, resp->variables->name[resp->variables->name_length-1]);
                         return resp->variables->name[resp->variables->name_length-1];
                     }
                 }
-                else {
+                else if(print) {
                     printf("%lu : \"%s\" [%s/%s]", 
                         resp->variables->name[resp->variables->name_length-1], 
                         tmp, 
@@@@ -423,7 +428,7 @@@@ int lsif(char *ifname) {
     }
     if(resp) 
         snmp_free_pdu(resp);
-    if(ifname) {
+    if(print && ifname) {
         fprintf(stderr, "Unable to find \"%s\". Use 'list' to display all interfaces.\n", ifname);
         snmp_close(ses);
         SOCK_CLEANUP;
@@@@ -439,6 +444,7 @@@@ void finish(void) {
     kbprint(maxin/interval);
     putchar(' ');
     kbprint(maxout/interval);
+  if(iterations>1) {
     printf( "\n"
         "average throughput: ");
     kbprint((uint64_t)(sumin/(iterations-1)/interval));
@@@@ -449,6 +455,7 @@@@ void finish(void) {
     kbprint(minin/interval);
     putchar(' ');
     kbprint(minout/interval);
+  }
     putchar('\n');
     snmp_close(ses);
     SOCK_CLEANUP;
@@@@ -514,7 +521,8 @@@@ void version(void) {
d22 1
a22 1
         "Copyright (c) 2005 - 2009 by Antoni Sawicki\n" 
a25 1
+        /* "NET-SNMP Libraries=%s Headers=%s\n" */
d28 2
a29 2
         "Max uint32=%u uint64=%llu\n"
@@@@ -525,7 +533,7 @@@@ void version(void) {
d33 2
a34 3
-        VERSION, __DATE__, __TIME__, netsnmp_get_version(), PACKAGE_VERSION, __VERSION__, 
+        VERSION, __DATE__, __TIME__, netsnmp_get_version(), __VERSION__, 
         (int)S_KB, UINT32_MAX, UINT64_MAX);
d37 1
@


1.1.1.1
log
@import ports/net/ttg, ok jasper@@

TTG is a small command-line utility to display the throughput (bandwidth
usage) on an interface of a remote device such as a router, switch, etc.,
over SNMP.

Unlike tools like MRTG which sample bandwidth over a relatively long
interval (often 5 minutes), TTG is normally used to display throughput
over as little as one second.
@
text
@@
