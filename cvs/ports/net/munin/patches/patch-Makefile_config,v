head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.18
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.16
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.12
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.14
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.10
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	sthen_20091117:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2012.10.12.09.46.46;	author kirby;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.23.15.52.22;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.17.11.11.21;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.11.17.11.11.21;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Major update to munin-2.0.7
Full changelog is here:
https://github.com/munin-monitoring/munin/blob/2.0.7/ChangeLog

Lots of input and help from sthen@@ (maintainer)
ok sthen@@

P.S. Your config may need some manual interference.
@
text
@$OpenBSD: patch-Makefile_config,v 1.2 2010/10/23 15:52:22 sthen Exp $
--- Makefile.config.orig	Fri Aug 31 19:22:50 2012
+++ Makefile.config	Tue Oct  2 22:56:29 2012
@@@@ -17,10 +17,10 @@@@
 #
 # the base of the Munin installation.
 #
-PREFIX     = $(DESTDIR)/opt/munin
+#PREFIX     = $(DESTDIR)/opt/munin
 
 # Where Munin keeps its configurations (server.conf, client.conf, ++)
-CONFDIR    = $(DESTDIR)/etc/opt/munin
+#CONFDIR    = $(DESTDIR)/etc/opt/munin
 
 # Server only - where to put munin-cron
 BINDIR     = $(PREFIX)/bin
@@@@ -28,6 +28,9 @@@@ BINDIR     = $(PREFIX)/bin
 # Client only - where to put munin-node, munin-node-configure, and munin-run
 SBINDIR    = $(PREFIX)/sbin
 
+# Where to put templates and other shared files
+SHAREDIR   = $(PREFIX)/share/munin
+
 # Where to put text and html documentation
 DOCDIR     = $(PREFIX)/doc
 
@@@@ -35,17 +38,17 @@@@ DOCDIR     = $(PREFIX)/doc
 MANDIR     = $(PREFIX)/man
 
 # Where to put internal binaries and plugin repository
-LIBDIR     = $(PREFIX)/lib
+LIBDIR     = $(PREFIX)/libexec/munin
 
 # Server only - Output directory
-HTMLDIR    = $(PREFIX)/www/docs
-CGIDIR     = $(PREFIX)/www/cgi
+HTMLDIR    = $(DESTDIR)/var/www/htdocs/munin
+CGIDIR     = $(DESTDIR)/var/www/cgi-bin
 
 # Where to put internal data for master (RRD, internal files, ...)
-DBDIR      = $(DESTDIR)/var/opt/munin
+DBDIR      = $(DESTDIR)/var/db/munin
 
 # Where to put internal data for node (plugin state, ...)
-DBDIRNODE  = $(DESTDIR)/var/opt/munin-node
+DBDIRNODE  = $(DESTDIR)/var/db/munin-node
 
 # Client only - Where the spool files are written. Must be writable by
 # group "munin", and should be preserved between reboots
@@@@ -53,10 +56,10 @@@@ SPOOLDIR   = $(DBDIR)/spool
 
 # Client only - Where plugins should put their states. Must be writable by
 # group "munin", and should be preserved between reboots
-PLUGSTATE  = $(DBDIRNODE)/plugin-state
+PLUGSTATE  = $(DESTDIR)/var/db/munin-pluginstate
 
 # Where Munin should place its logs.
-LOGDIR     = $(PREFIX)/log/munin
+LOGDIR     = $(DESTDIR)/var/log/munin
 
 # Location of PID files and other statefiles. On the server, must be
 # writable by the user "munin".
@@@@ -66,7 +69,7 @@@@ STATEDIR   = $(DESTDIR)/var/run/munin
 PERL       := $(shell which perl)
 
 # The python interpreter to use (used by some plugins)
-PYTHON     := /usr/bin/env python
+#PYTHON     := /usr/bin/env python
 
 # The ruby interpreter to use (used by some plugins)
 RUBY       := /usr/bin/env ruby
@@@@ -106,7 +109,7 @@@@ OSTYPE     := $(shell uname | LANG=C tr '[A-Z]' '[a-z]
 
 # How to figure out the hostname. (Only used in default configuration
 # files)
-HOSTNAME   := $(shell hostname)
+HOSTNAME   := localhost
 
 # What is the safest way to create a tempfile.
 # Default is to figure it out by testing various methods.
@@@@ -117,8 +120,8 @@@@ MKTEMP     := $(shell ./test-mktemp)
 VERSION    := $(shell ./getversion)
 
 # User to run munin as
-USER       := munin
-GROUP      := munin
+USER       := _munin
+GROUP      := _munin
 
 # Default user to run the plugins as
 PLUGINUSER := nobody
@@@@ -130,8 +133,8 @@@@ CGIUSER := nobody
 # These will work on most modern OSes:
 #
 GETENT     := $(shell which getent || which true 2>/dev/null)
-CHECKUSER  := $(shell $(GETENT) passwd $(USER) >/dev/null 2>/dev/null || (echo "echo User $(USER) nonexistent. Create the user and retry; exit 2"))
-CHECKGROUP := $(shell $(GETENT) group $(GROUP) >/dev/null 2>/dev/null || (echo "echo Group $(GROUP) nonexistent. Create the group and retry; exit 2"))
+CHECKUSER  :=
+CHECKGROUP :=
 
 # For OSX, comment out the previous two lines and comment in these
 #
@


1.2
log
@update Munin to 1.45, joint work with & ok jasper@@
@
text
@d1 3
a3 3
$OpenBSD: patch-Makefile_config,v 1.1.1.1 2009/11/17 11:11:21 sthen Exp $
--- Makefile.config.orig	Fri Nov  6 15:35:44 2009
+++ Makefile.config	Fri Oct 15 15:13:11 2010
d7 1
a7 1
 # 
d27 1
a27 1
@@@@ -35,11 +38,11 @@@@ DOCDIR     = $(PREFIX)/doc
d40 1
a40 6
 # Server only - spool directory for data gathered from nodes by
 # munin-gather - experimental.  Place on ramdisk to make munin
@@@@ -52,14 +55,14 @@@@ SSPOOLDIR  = $(PREFIX)/spool
 # SSPOOLDIR := /tmp/muninspool
 
 # Client only - Where to put RRD files and other intenal data
d44 8
d54 1
a54 1
-PLUGSTATE  = $(DBDIR)/plugin-state
d63 1
a63 1
@@@@ -69,7 +72,7 @@@@ STATEDIR   = $(DESTDIR)/var/run/munin
d72 1
a72 1
@@@@ -106,7 +109,7 @@@@ OSTYPE     := $(shell uname | tr '[A-Z]' '[a-z]')
d92 1
a92 1
@@@@ -127,8 +130,8 @@@@ PLUGINUSER := nobody
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- Makefile.config.orig	Sun Jan 20 19:32:46 2008
+++ Makefile.config	Mon Nov 16 18:38:07 2009
@@@@ -7,10 +7,10 @@@@
d17 1
a17 1
@@@@ -18,6 +18,9 @@@@ BINDIR     = $(PREFIX)/bin
d27 1
a27 1
@@@@ -25,18 +28,18 @@@@ DOCDIR     = $(PREFIX)/doc
d35 2
a36 2
-HTMLDIR    = $(PREFIX)/var/www
-CGIDIR     = $(HTMLDIR)/cgi
d40 5
d55 7
a61 3
 LOGDIR     = $(DESTDIR)/var/log/munin
@@@@ -49,7 +52,7 @@@@ STATEDIR   = $(DESTDIR)/var/run/munin
 PERL       = $(shell which perl)
d64 2
a65 2
-PYTHON     = /usr/bin/env python
+#PYTHON     = /usr/bin/env python
d67 3
a69 3
 # A modern (posix) shell.  We're not looking for arrays, but $() and
 # other modern stuff is expected.  On a posix-system the expression
@@@@ -72,7 +75,7 @@@@ OSTYPE     = $(shell uname | tr '[A-Z]' '[a-z]')
d73 2
a74 2
-HOSTNAME   = $(shell hostname)
+HOSTNAME   = localhost
d78 2
a79 2
@@@@ -83,16 +86,16 @@@@ MKTEMP     = $(shell ./test-mktemp)
 VERSION    = $(shell cat RELEASE)
d82 4
a85 4
-USER       = munin
-GROUP      = munin
+USER       = _munin
+GROUP      = _munin
d88 9
a96 2
-PLUGINUSER = nobody
+PLUGINUSER = _munin-plugin
d98 2
a99 9
 # Which command to use to check if the USER and GROUP to run Munin as, exists.
 GETENT = $(shell which getent || which true 2>/dev/null)
-CHECKUSER  = $(shell $(GETENT) passwd $(USER) >/dev/null 2>/dev/null || (echo "echo User $(USER) nonexistant. Create the user and retry; exit 2"))
-CHECKGROUP = $(shell $(GETENT) group $(GROUP) >/dev/null 2>/dev/null || (echo "echo Group $(GROUP) nonexistant. Create the group and retry; exit 2"))
+CHECKUSER = 
+CHECKGROUP = 
 
 # For OSX, comment out the previous two lines and comment in these 
 #CHECKUSER  = $(shell nicl . -read /users/$(USER) >/dev/null 2>/dev/null || (echo "echo User $(USER) nonexistant. Create the user and retry; exit 2")) 
@


1.1.1.1
log
@import ports/net/munin, this was joint work with mk@@ and includes
a couple of his OpenBSD-specific plugins.

Munin the monitoring tool surveys all your computers and
remembers what it saw. It presents all the information in graphs
through a web interface. Its emphasis is on plug and play
capabilities. After completing an installation a high number
of monitoring plugins will be playing with no more effort.

Using Munin you can easily monitor the performance of your
computers, networks, SANs, applications, weather measurements
and whatever comes to mind. It makes it easy to determine
"what's different today" when a performance problem crops up. It
makes it easy to see how you're doing capacity-wise on any
resources.
@
text
@@
