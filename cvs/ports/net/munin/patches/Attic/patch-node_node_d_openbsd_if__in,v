head	1.3;
access;
symbols
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	sthen_20091117:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2010.10.23.15.52.23;	author sthen;	state dead;
branches;
next	1.2;

1.2
date	2009.11.17.11.47.06;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.17.11.11.21;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.11.17.11.11.21;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update Munin to 1.45, joint work with & ok jasper@@
@
text
@$OpenBSD: patch-node_node_d_openbsd_if__in,v 1.2 2009/11/17 11:47:06 sthen Exp $
--- node/node.d.openbsd/if_.in.orig	Thu Feb 21 13:24:36 2008
+++ node/node.d.openbsd/if_.in	Tue Nov 17 11:41:17 2009
@@@@ -33,7 +33,7 @@@@ fi
 
 if [ "$1" = "suggest" ]; then
 	if [ -x /usr/bin/netstat ]; then
-		netstat -i -b -n | sed -n -e '/^faith/d' -e '/^lo[0-9]/d' -e '/^pflog/d' -e '/<Link#[0-9]*>/s/\** .*//p'
+		netstat -i -b -n | sed -n -e '/^faith/d' -e '/^lo[0-9]/d' -e '/^pflog/d' -e '/<Link>/s/\** .*//p'
 		exit 0
 	else
 		exit 1
@@@@ -47,13 +47,15 @@@@ if [ "$1" = "config" ]; then
 	echo 'graph_args --base 1000'
 	echo 'graph_vlabel bits per ${graph_period} in (-) / out (+)'
 	echo 'graph_category network'
-	echo "graph_info This graph shows the traffic of the $INTERFACE network interface. Please note that the traffic is shown in bits per second, not bytes. IMPORTANT: Since the data source for this plugin use 32bit counters, this plugin is really unreliable and unsuitable for most 100Mb (or faster) interfaces, where bursts are expected to exceed 50Mbps. This means that this plugin is usuitable for most production environments."
+	echo "graph_info This graph shows the traffic of the $INTERFACE network interface. Please note that the traffic is shown in bits per second, not bytes."
 	echo 'rbytes.label received'
-        echo 'rbytes.type COUNTER'
+        echo 'rbytes.type DERIVE'
+        echo 'rbytes.min 0'
         echo 'rbytes.graph no'
         echo 'rbytes.cdef rbytes,8,*'
         echo 'obytes.label bps'
-	echo 'obytes.type COUNTER'
+        echo 'obytes.type DERIVE'
+        echo 'obytes.min 0'
 	echo 'obytes.negative rbytes'
 	echo 'obytes.cdef obytes,8,*'
 	echo "obytes.info Traffic sent (+) and received (-) on the $INTERFACE network interface."
@@@@ -63,11 +65,11 @@@@ fi
 if [ "$INTERFACE" = "aggregated" ]; then
 	/usr/bin/netstat -i -b -n | grep -v '^lo' | awk '
 BEGIN { rsum = 0; osum = 0; }
-/<Link#[0-9]*>/ {
-	if (NF == 10) { 
-		rsum += $6; osum += $9;
+/<Link>/ {
+	if (NF == 5) { 
+		rsum += $4; osum += $5;
 	} else {
-		rsum += $7; osum += $10;
+		rsum += $5; osum += $6;
 	}
 }
 END {
@@@@ -77,13 +79,13 @@@@ END {
   
 else
 	/usr/bin/netstat -i -b -n -I $INTERFACE | awk '
-/<Link#[0-9]*>/ {
-	if (NF == 10) { 
-		print "rbytes.value", $6;
-		print "obytes.value", $9;
+/<Link>/ {
+	if (NF == 5) { 
+		print "rbytes.value", $4;
+		print "obytes.value", $5;
 	} else {
-		print "rbytes.value", $7;
-		print "obytes.value", $10;
+		print "rbytes.value", $5;
+		print "obytes.value", $6;
 	}
 }'
 fi
@


1.2
log
@switch from COUNTER to DERIVE for the interface bandwidth graphs,
suggested by mk@@. bump PKGNAME-main.
@
text
@d1 1
a1 1
$OpenBSD: patch-node_node_d_openbsd_if__in,v 1.1.1.1 2009/11/17 11:11:21 sthen Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ node/node.d.openbsd/if_.in	Mon Nov 16 16:26:42 2009
d13 1
a13 1
@@@@ -47,7 +47,7 @@@@ if [ "$1" = "config" ]; then
d20 3
a22 1
         echo 'rbytes.type COUNTER'
d24 9
a32 1
@@@@ -63,11 +63,11 @@@@ fi
d48 1
a48 1
@@@@ -77,13 +77,13 @@@@ END {
@


1.1.1.1
log
@import ports/net/munin, this was joint work with mk@@ and includes
a couple of his OpenBSD-specific plugins.

Munin the monitoring tool surveys all your computers and
remembers what it saw. It presents all the information in graphs
through a web interface. Its emphasis is on plug and play
capabilities. After completing an installation a high number
of monitoring plugins will be playing with no more effort.

Using Munin you can easily monitor the performance of your
computers, networks, SANs, applications, weather measurements
and whatever comes to mind. It makes it easy to determine
"what's different today" when a performance problem crops up. It
makes it easy to see how you're doing capacity-wise on any
resources.
@
text
@@
