head	1.11;
access;
symbols
	OPENBSD_4_1:1.10.0.2
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4;
locks; strict;
comment	@ * @;


1.11
date	2007.05.30.15.09.07;	author steven;	state dead;
branches;
next	1.10;

1.10
date	2006.10.31.19.32.51;	author brad;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.22.06.14.51;	author brad;	state Exp;
branches;
next	1.8;

1.8
date	2004.09.21.02.44.19;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2004.06.25.19.31.36;	author brad;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2004.06.24.23.06.02;	author brad;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.24.08.04.13;	author brad;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.22.08.59.32;	author brad;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2004.01.18.00.15.18;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.18.00.12.29;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.18.00.05.23;	author brad;	state Exp;
branches;
next	;

1.4.2.1
date	2005.03.27.15.16.43;	author sturm;	state Exp;
branches;
next	;

1.7.2.1
date	2005.03.27.15.15.35;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@remove gaim and plugins. superseded by pidgin and equivalent plugins.

ok brad, alek
@
text
@/*	$OpenBSD: ssl-openssl.c,v 1.10 2006/10/31 19:32:51 brad Exp $	*/

/*
 * OpenSSL SSL-plugin for gaim
 *
 * Copyright (c) 2004 Brad Smith <brad@@comstyle.com>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include "internal.h"
#include "debug.h"
#include "plugin.h"
#include "sslconn.h"
#include "version.h"

#define SSL_OPENSSL_PLUGIN_ID "ssl-openssl"

#ifdef HAVE_OPENSSL

#include <openssl/ssl.h>
#include <openssl/err.h>

typedef struct
{
	SSL	*ssl;
	SSL_CTX	*ssl_ctx;
	guint	handshake_handler;
} GaimSslOpensslData;

#define GAIM_SSL_OPENSSL_DATA(gsc) ((GaimSslOpensslData *)gsc->private_data)

/*
 * ssl_openssl_init_openssl
 *
 * load the error strings we might want to use eventually, and init the
 * openssl library
 */
static void
ssl_openssl_init_openssl(void)
{
	/*
	 * load the error number to string strings so that we can make sense
	 * of ssl issues while debugging this code
	 */
	SSL_load_error_strings();

	/*
	 * we need to initialise the openssl library
	 * we do not seed the random number generator, although we probably
	 * should in gaim-win32.
	 */
	SSL_library_init();
}

/*
 * ssl_openssl_init
 */
static gboolean
ssl_openssl_init(void)
{
	return (TRUE);
}

/*
 * ssl_openssl_uninit
 *
 * couldn't find anything to match the call to SSL_library_init in the man
 * pages, i wonder if there actually is anything we need to call
 */
static void
ssl_openssl_uninit(void)
{
	ERR_free_strings();
}

/*
 * ssl_openssl_handshake_cb
 */
static void
ssl_openssl_handshake_cb(gpointer data, gint source, GaimInputCondition cond)
{
	GaimSslConnection *gsc = (GaimSslConnection *)data;
	GaimSslOpensslData *openssl_data = GAIM_SSL_OPENSSL_DATA(gsc);
	int ret, ret2;

	gaim_debug_info("openssl", "Connecting\n");

	/*
	 * do the negotiation that sets up the SSL connection between
	 * here and there.
	 */
	ret = SSL_connect(openssl_data->ssl);
	if (ret <= 0) {
		gaim_debug_info("openssl", "SSL_get_error\n");
		ret2 = SSL_get_error(openssl_data->ssl, ret);

		if (ret2 == SSL_ERROR_WANT_READ || ret2 == SSL_ERROR_WANT_WRITE)
			return;

		gaim_debug_error("openssl", "SSL_connect failed\n");

		if (gsc->error_cb != NULL)
			gsc->error_cb(gsc, GAIM_SSL_HANDSHAKE_FAILED,
				gsc->connect_cb_data);

		gaim_ssl_close(gsc);
		return;
	}

	gaim_input_remove(openssl_data->handshake_handler);
	openssl_data->handshake_handler = 0;

	gaim_debug_info("openssl", "SSL_connect complete\n");

	/* SSL connected now */
	gsc->connect_cb(gsc->connect_cb_data, gsc, cond);
}

/*
 * ssl_openssl_connect
 *
 * given a socket, put an openssl connection around it.
 */
static void
ssl_openssl_connect(GaimSslConnection *gsc)
{
	GaimSslOpensslData *openssl_data;

	/*
	 * allocate some memory to store variables for the openssl connection.
	 * the memory comes zero'd from g_new0 so we don't need to null the
	 * pointers held in this struct.
	 */
	openssl_data = g_new0(GaimSslOpensslData, 1);
	gsc->private_data = openssl_data;

	/*
	 * allocate a new SSL_CTX object
	*/
	openssl_data->ssl_ctx = SSL_CTX_new(SSLv23_client_method());
	if (openssl_data->ssl_ctx == NULL) {
		gaim_debug_error("openssl", "SSL_CTX_new failed\n");
		if (gsc->error_cb != NULL)
			gsc->error_cb(gsc, GAIM_SSL_HANDSHAKE_FAILED,
				gsc->connect_cb_data);

		gaim_ssl_close(gsc);
		return;
	}

	/*
	 * allocate a new SSL object
	 */
	openssl_data->ssl = SSL_new(openssl_data->ssl_ctx);
	if (openssl_data->ssl == NULL) {
		gaim_debug_error("openssl", "SSL_new failed\n");
		if (gsc->error_cb != NULL)
			gsc->error_cb(gsc, GAIM_SSL_HANDSHAKE_FAILED,
				gsc->connect_cb_data);

		gaim_ssl_close(gsc);
		return;
	}

	/*
	 * now we associate the file descriptor we have with the SSL connection
	 */
	if (SSL_set_fd(openssl_data->ssl, gsc->fd) == 0) {
		gaim_debug_error("openssl", "SSL_set_fd failed\n");
		if (gsc->error_cb != NULL)
			gsc->error_cb(gsc, GAIM_SSL_HANDSHAKE_FAILED,
				gsc->connect_cb_data);

		gaim_ssl_close(gsc);
		return;
	}

	openssl_data->handshake_handler = gaim_input_add(gsc->fd,
		GAIM_INPUT_READ, ssl_openssl_handshake_cb, gsc);

	ssl_openssl_handshake_cb(gsc, gsc->fd, GAIM_INPUT_READ);
}

static void
ssl_openssl_close(GaimSslConnection *gsc)
{
	GaimSslOpensslData *openssl_data = GAIM_SSL_OPENSSL_DATA(gsc);
	int i;

	if (openssl_data == NULL)
		return;

	if (openssl_data->handshake_handler)
		gaim_input_remove(openssl_data->handshake_handler);

	if (openssl_data->ssl != NULL) {
		i = SSL_shutdown(openssl_data->ssl);
		if (i == 0)
			SSL_shutdown(openssl_data->ssl);
		SSL_free(openssl_data->ssl);
	}

	if (openssl_data->ssl_ctx != NULL)
		SSL_CTX_free(openssl_data->ssl_ctx);

	g_free(openssl_data);
	gsc->private_data = NULL;
}

static size_t
ssl_openssl_read(GaimSslConnection *gsc, void *data, size_t len)
{
	GaimSslOpensslData *openssl_data = GAIM_SSL_OPENSSL_DATA(gsc);
	ssize_t s;
	int ret;

	s = SSL_read(openssl_data->ssl, data, len);
	if (s <= 0) {
		ret = SSL_get_error(openssl_data->ssl, s);

		if (ret == SSL_ERROR_WANT_READ || ret == SSL_ERROR_WANT_WRITE) {
			errno = EAGAIN;
			return (-1);
		}

		gaim_debug_error("openssl", "receive failed: %d\n", s);
		s = 0;
	}

	return (s);
}

static size_t
ssl_openssl_write(GaimSslConnection *gsc, const void *data, size_t len)
{
	GaimSslOpensslData *openssl_data = GAIM_SSL_OPENSSL_DATA(gsc);
	ssize_t s = 0;
	int ret;

	if (openssl_data != NULL)
		s = SSL_write(openssl_data->ssl, data, len);

	if (s <= 0) {
		ret = SSL_get_error(openssl_data->ssl, s);

		if (ret == SSL_ERROR_WANT_READ || ret == SSL_ERROR_WANT_WRITE) {
			errno = EAGAIN;
			return (-1);
		}

		gaim_debug_error("openssl", "send failed: %d\n", s);
		s = 0;
	}

	return (s);
}

static GaimSslOps ssl_ops = {
	ssl_openssl_init,
	ssl_openssl_uninit,
	ssl_openssl_connect,
	ssl_openssl_close,
	ssl_openssl_read,
	ssl_openssl_write
};

#endif /* HAVE_OPENSSL */

static gboolean
plugin_load(GaimPlugin *plugin)
{
#ifdef HAVE_OPENSSL
	if (!gaim_ssl_get_ops())
		gaim_ssl_set_ops(&ssl_ops);

	/* Init OpenSSL now so others can use it even if sslconn never does */
	ssl_openssl_init_openssl();

	return (TRUE);
#else
	return (FALSE);
#endif
}

static gboolean
plugin_unload(GaimPlugin *plugin)
{
#ifdef HAVE_OPENSSL
	if (gaim_ssl_get_ops() == &ssl_ops)
		gaim_ssl_set_ops(NULL);
#endif

	return (TRUE);
}

static GaimPluginInfo info = {
	GAIM_PLUGIN_MAGIC,
	GAIM_MAJOR_VERSION,
	GAIM_MINOR_VERSION,
	GAIM_PLUGIN_STANDARD,				/* type */
	NULL,						/* ui_requirement */
	GAIM_PLUGIN_FLAG_INVISIBLE,			/* flags */
	NULL,						/* dependencies */
	GAIM_PRIORITY_DEFAULT,				/* priority */

	SSL_OPENSSL_PLUGIN_ID,				/* id */
	N_("OpenSSL"),					/* name */
	VERSION,					/* version */

	N_("Provides SSL support through OpenSSL."),	/* description */
	N_("Provides SSL support through OpenSSL."),
	"OpenSSL",
	NULL,						/* homepage */

	plugin_load,					/* load */
	plugin_unload,					/* unload */
	NULL,						/* destroy */

	NULL,						/* ui_info */
	NULL,						/* extra_info */
	NULL,						/* prefs_info */
	NULL						/* actions */
};

static void
init_plugin(GaimPlugin *plugin)
{
}

GAIM_INIT_PLUGIN(ssl_openssl, init_plugin, info)
@


1.10
log
@upgrade to gaim 2.0.0beta4

the audio flavor has been removed for now
as 2.x now requires gstreamer and the gstreamer
version we have in-tree is not new enough.

tested by ckuethe@@ alek@@ brad@@ and a few others.

ok alek@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.9 2006/05/22 06:14:51 brad Exp $	*/
@


1.9
log
@some cleaning.
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.8 2004/09/21 02:44:19 brad Exp $	*/
d38 1
d88 1
a88 3
 * ssl_openssl_connect_cb
 *
 * given a socket, put an openssl connection around it.
d91 1
a91 1
ssl_openssl_connect_cb(gpointer data, gint source, GaimInputCondition cond)
d94 4
a97 1
	GaimSslOpensslData *openssl_data;
d100 2
a101 1
	 * we need a valid file descriptor to associate the SSL connection with.
d103 10
a112 1
	if (source < 0) {
d114 1
a114 1
			gsc->error_cb(gsc, GAIM_SSL_CONNECT_FAILED,
d121 18
a138 1
	gsc->fd = source;
d166 1
a166 1
	if(openssl_data->ssl == NULL) {
d179 1
a179 1
	if (SSL_set_fd(openssl_data->ssl, source) == 0) {
d189 2
a190 13
	/*
	 * finally, do the negotiation that sets up the SSL connection between
	 * here and there.
	 */
	if (SSL_connect(openssl_data->ssl) <= 0) {
		gaim_debug_error("openssl", "SSL_connect failed\n");
		if (gsc->error_cb != NULL)
			gsc->error_cb(gsc, GAIM_SSL_HANDSHAKE_FAILED,
				gsc->connect_cb_data);

		gaim_ssl_close(gsc);
		return;
	}
d192 1
a192 2
	/* SSL connected now */
	gsc->connect_cb(gsc->connect_cb_data, gsc, cond);
d204 3
d218 1
d225 2
a226 1
	int i;
d228 8
a235 3
	i = SSL_read(openssl_data->ssl, data, len);
	if (i < 0)
		i = 0;
d237 5
a241 1
	return (i);
d248 2
a249 1
	int s = 0;
d252 4
a255 1
		s = SSL_write(openssl_data->ssl, data, len);      
d257 6
a262 1
	if (s < 0)
d264 1
d272 1
a272 1
	ssl_openssl_connect_cb,
d331 3
a333 1
	NULL						/* extra_info */
@


1.8
log
@upgrade to gaim 1.0.0
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.7 2004/06/25 19:31:36 brad Exp $	*/
d36 2
a37 2
  SSL     *ssl;
  SSL_CTX *ssl_ctx;
d48 2
a49 1
static void ssl_openssl_init_openssl(void)
d51 12
a62 12
  /*
   * load the error number to string strings so that we can make sense
   * of ssl issues while debugging this code
   */
  SSL_load_error_strings();

  /*
   * we need to initialise the openssl library
   * we do not seed the random number generator, although we probably
   * should in gaim-win32.
   */
  SSL_library_init();
d68 2
a69 1
static gboolean ssl_openssl_init(void)
d71 1
a71 1
  return TRUE;
d80 2
a81 1
static void ssl_openssl_uninit(void)
d83 1
a83 2
  ERR_free_strings();
  return;
d91 2
a92 1
static void ssl_openssl_connect_cb(gpointer data, gint source, GaimInputCondition cond)
d94 2
a95 2
  GaimSslConnection  *gsc = (GaimSslConnection *)data;
  GaimSslOpensslData *openssl_data;
d97 10
a106 32
  /*
   * we need a valid file descriptor to associate the SSL connection with.
   */
  if(source < 0)
    {
      if(gsc->error_cb != NULL)
	gsc->error_cb(gsc, GAIM_SSL_CONNECT_FAILED, gsc->connect_cb_data);

      gaim_ssl_close(gsc);
      return;
    }

  gsc->fd = source;

  /*
   * allocate some memory to store variables for the openssl connection.
   * the memory comes zero'd from g_new0 so we don't need to null the
   * pointers held in this struct.
   */
  openssl_data      = g_new0(GaimSslOpensslData, 1);
  gsc->private_data = openssl_data;

  /*
   * allocate a new SSL_CTX object
   */
  openssl_data->ssl_ctx = SSL_CTX_new(SSLv23_client_method());
  if(openssl_data->ssl_ctx == NULL)
    {
      gaim_debug_error("openssl", "SSL_CTX_new failed\n");
      if(gsc->error_cb != NULL)
	{
	  gsc->error_cb(gsc, GAIM_SSL_HANDSHAKE_FAILED, gsc->connect_cb_data);
d109 22
a130 14
      gaim_ssl_close(gsc);
      return;
    }

  /*
   * allocate a new SSL object
   */
  openssl_data->ssl = SSL_new(openssl_data->ssl_ctx);
  if(openssl_data->ssl == NULL)
    {
      gaim_debug_error("openssl", "SSL_new failed\n");
      if(gsc->error_cb != NULL)
	{
	  gsc->error_cb(gsc, GAIM_SSL_HANDSHAKE_FAILED, gsc->connect_cb_data);
d133 25
a157 13
      gaim_ssl_close(gsc);
      return;
    }

  /*
   * now we associate the file descriptor we have with the SSL connection
   */
  if(SSL_set_fd(openssl_data->ssl, source) == 0)
    {
      gaim_debug_error("openssl", "SSL_set_fd failed\n");
      if(gsc->error_cb != NULL)
	{
	  gsc->error_cb(gsc, GAIM_SSL_HANDSHAKE_FAILED, gsc->connect_cb_data);
d160 12
a171 14
      gaim_ssl_close(gsc);
      return;
    }

  /*
   * finally, do the negotiation that sets up the SSL connection between
   * here and there.
   */
  if(SSL_connect(openssl_data->ssl) <= 0)
    {
      gaim_debug_error("openssl", "SSL_connect failed\n");
      if(gsc->error_cb != NULL)
	{
	  gsc->error_cb(gsc, GAIM_SSL_HANDSHAKE_FAILED, gsc->connect_cb_data);
d174 2
a175 7
      gaim_ssl_close(gsc);
      return;
    }

  /* SSL connected now */
  gsc->connect_cb(gsc->connect_cb_data, gsc, cond);
  return;
d178 2
a179 1
static void ssl_openssl_close(GaimSslConnection *gsc)
d181 5
a185 2
  GaimSslOpensslData *openssl_data = GAIM_SSL_OPENSSL_DATA(gsc);
  int i;
d187 6
a192 16
  if(openssl_data == NULL)
    {
      return;
    }

  if(openssl_data->ssl != NULL)
    {
      i = SSL_shutdown(openssl_data->ssl);
      if(i == 0) SSL_shutdown(openssl_data->ssl);
      SSL_free(openssl_data->ssl);
    }

  if(openssl_data->ssl_ctx != NULL)
    {
      SSL_CTX_free(openssl_data->ssl_ctx);
    }
d194 2
a195 1
  g_free(openssl_data);
d197 1
a197 1
  return;
d200 2
a201 1
static size_t ssl_openssl_read(GaimSslConnection *gsc, void *data, size_t len)
d203 2
a204 2
  GaimSslOpensslData *openssl_data = GAIM_SSL_OPENSSL_DATA(gsc);
  int i;
d206 3
a208 2
  i = SSL_read(openssl_data->ssl, data, len);
  if(i < 0) i = 0;
d210 1
a210 1
  return i;
d213 2
a214 1
static size_t ssl_openssl_write(GaimSslConnection *gsc, const void *data, size_t len)
d216 5
a220 2
  GaimSslOpensslData *openssl_data = GAIM_SSL_OPENSSL_DATA(gsc);
  int s = 0;
d222 2
a223 9
  if(openssl_data != NULL)
    {
      s = SSL_write(openssl_data->ssl, data, len);      
    }

  if(s < 0)
    {
      s = 0;
    }
d225 1
a225 1
  return s;
d228 7
a234 8
static GaimSslOps ssl_ops =
{
  ssl_openssl_init,
  ssl_openssl_uninit,
  ssl_openssl_connect_cb,
  ssl_openssl_close,
  ssl_openssl_read,
  ssl_openssl_write
d239 2
a240 1
static gboolean plugin_load(GaimPlugin *plugin)
d243 2
a244 3
  if (!gaim_ssl_get_ops()) {
    gaim_ssl_set_ops(&ssl_ops);
  }
d246 2
a247 2
  /* Init OpenSSL now so others can use it even if sslconn never does */
  ssl_openssl_init_openssl();
d249 1
a249 1
  return TRUE;
d251 1
a251 1
  return FALSE;
d255 2
a256 1
static gboolean plugin_unload(GaimPlugin *plugin)
d259 2
a260 3
  if (gaim_ssl_get_ops() == &ssl_ops) {
    gaim_ssl_set_ops(NULL);
  }
d263 1
a263 1
  return TRUE;
d266 25
a290 26
static GaimPluginInfo info =
{
  GAIM_PLUGIN_MAGIC,
  GAIM_MAJOR_VERSION,
  GAIM_MINOR_VERSION,
  GAIM_PLUGIN_STANDARD,                             /* type           */
  NULL,                                             /* ui_requirement */
  GAIM_PLUGIN_FLAG_INVISIBLE,                       /* flags          */
  NULL,                                             /* dependencies   */
  GAIM_PRIORITY_DEFAULT,                            /* priority       */

  SSL_OPENSSL_PLUGIN_ID,                            /* id             */
  N_("OpenSSL"),                                    /* name           */
  VERSION,                                          /* version        */

  N_("Provides SSL support through OpenSSL."),      /* description    */
  N_("Provides SSL support through OpenSSL."),
  "OpenSSL",
  NULL,                                             /* homepage       */

  plugin_load,                                      /* load           */
  plugin_unload,                                    /* unload         */
  NULL,                                             /* destroy        */
  
  NULL,                                             /* ui_info        */
  NULL                                              /* extra_info     */
d293 2
a294 1
static void init_plugin(GaimPlugin *plugin)
a295 1
  return;
@


1.7
log
@better
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.6 2004/06/24 23:06:02 brad Exp $	*/
d25 1
d281 3
a283 1
  GAIM_PLUGIN_API_VERSION,                          /* api_version    */
@


1.7.2.1
log
@update to gaim 1.1.4, fixes lots of bugs and a few security issues

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.8 2004/09/21 02:44:19 brad Exp $	*/
a24 1
#include "version.h"
d280 1
a280 3
  GAIM_PLUGIN_MAGIC,
  GAIM_MAJOR_VERSION,
  GAIM_MINOR_VERSION,
@


1.6
log
@make SSL error handling a little better, based on same change for
GNUTLS plugin that comes with Gaim.
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.5 2004/04/24 08:04:13 brad Exp $	*/
a60 2

  return TRUE;
@


1.5
log
@upgrade to gaim 0.77
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.4 2004/01/22 08:59:32 brad Exp $	*/
d100 4
@


1.4
log
@whitespace
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.3 2004/01/18 00:15:18 brad Exp $	*/
d278 1
a278 1
  2,                                                /* api_version    */
@


1.4.2.1
log
@update to gaim 1.1.4, fixes lots of bugs and a few security issues

ok brad@@
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.8 2004/09/21 02:44:19 brad Exp $	*/
a24 1
#include "version.h"
d61 2
a99 4
      if(gsc->error_cb != NULL)
	gsc->error_cb(gsc, GAIM_SSL_CONNECT_FAILED, gsc->connect_cb_data);

      gaim_ssl_close(gsc);
d278 1
a278 3
  GAIM_PLUGIN_MAGIC,
  GAIM_MAJOR_VERSION,
  GAIM_MINOR_VERSION,
@


1.3
log
@with recommendation from Matthew drop this.
@
text
@d1 1
a1 1
/*	$OpenBSD: ssl-openssl.c,v 1.2 2004/01/18 00:12:29 brad Exp $	*/
d252 2
a253 2
  if (!gaim_ssl_get_ops()) {                                                                                        
    gaim_ssl_set_ops(&ssl_ops);                                                                               
d256 1
a256 1
  /* Init OpenSSL now so others can use it even if sslconn never does */                                                 
d268 2
a269 2
  if (gaim_ssl_get_ops() == &ssl_ops) {                                                                             
    gaim_ssl_set_ops(NULL);                                                                                   
@


1.2
log
@add RCS id
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
a18 16
 */

/*
 * This code was written to link in with the gaim ssl plugin system.
 * It was written using the ssl-nss.c and ssl-gnutls.c files as documentation
 * as to how to use the gaim ssl plugin mechanism.  That code was written by
 * ChipX86.
 *
 * This code is not supported by the gaim team.  If you have SSL-related
 * problems with any service, disable this plugin and use one of the ssl
 * plugins that ships with gaim before contacting them for support.
 * 
 * The OpenSSL webpage at http://www.openssl.org/support/faq.html#LEGAL2
 * says that you may use this code on systems that normally include OpenSSL.
 * It is my judgement that FreeBSD, NetBSD, and OpenBSD fit into this
 * category, but I am not a lawyer.
@


1.1
log
@an OpenSSL plugin for gaim's SSL support. originally from
Matthew Luckie <mjl at luckie dot org dot nz> though he has
handed off the code to me and does not want any credit
including removing the GPL copyright and allowing me to use
the ISC style license from license.template.
@
text
@d1 2
@

