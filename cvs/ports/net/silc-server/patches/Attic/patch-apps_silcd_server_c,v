head	1.7;
access;
symbols
	OPENBSD_5_5:1.6.0.18
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.16
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_3:1.2.0.2;
locks; strict;
comment	@# @;


1.7
date	2014.07.16.21.17.04;	author brad;	state dead;
branches;
next	1.6;
commitid	bLSrylMZOaYW0Wco;

1.6
date	2009.09.27.19.25.02;	author sthen;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.17.15.35.37;	author sthen;	state dead;
branches;
next	1.4;

1.4
date	2009.01.23.11.01.06;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.12.00.31.45;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.22.20.24.10;	author sthen;	state dead;
branches
	1.2.2.1;
next	1.1;

1.1
date	2008.04.22.00.34.30;	author sthen;	state Exp;
branches;
next	;

1.2.2.1
date	2008.06.10.04.14.11;	author robert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to silc-server 1.1.19.

ok sthen@@
@
text
@$OpenBSD: patch-apps_silcd_server_c,v 1.6 2009/09/27 19:25:02 sthen Exp $
--- apps/silcd/server.c.orig	Sun Sep 27 11:20:35 2009
+++ apps/silcd/server.c	Sun Sep 27 11:25:03 2009
@@@@ -3128,6 +3128,11 @@@@ void silc_server_disconnect_remote(SilcServer server,
   if (!sock)
     return;
 
+  silc_schedule_task_del_by_all(server->schedule, 0, silc_server_do_rekey,
+				sock);
+  silc_schedule_task_del_by_all(server->schedule, 0, silc_server_do_heartbeat,
+				sock);
+
   SILC_LOG_DEBUG(("Disconnecting remote host, sock %p, status %d", sock,
 		  status));
 
@


1.6
log
@Update to 1.1.18, from Brad.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.5
log
@Upgrade to 1.1.16, fixes several major causes of crashes.
"Upgrading is highly recommended."

From Brad (maintainer).
@
text
@d1 4
a4 74
$OpenBSD: patch-apps_silcd_server_c,v 1.4 2009/01/23 11:01:06 sthen Exp $
--- apps/silcd/server.c.orig	Thu Jan  8 04:20:01 2009
+++ apps/silcd/server.c	Sat Jan 17 08:00:12 2009
@@@@ -228,8 +228,10 @@@@ SILC_TASK_CALLBACK(silc_server_packet_error_timeout)
   SilcPacketStream stream = context;
   SilcIDListData idata = silc_packet_get_context(stream);
 
-  if (!idata)
+  if (!idata || !silc_packet_stream_is_valid(stream)) {
+    silc_packet_stream_unref(stream);
     return;
+  }
 
   if (server->router_conn && server->router_conn->sock == stream &&
       !server->router && server->standalone) {
@@@@ -252,6 +254,9 @@@@ SILC_TASK_CALLBACK(silc_server_packet_error_timeout)
   }
 
   silc_server_close_connection(server, stream);
+
+  /* Release our stream reference */
+  silc_packet_stream_unref(stream);
 }
 
 /* Packet engine callback to indicate error */
@@@@ -268,7 +273,7 @@@@ static void silc_server_packet_error(SilcPacketEngine 
   const char *ip;
   SilcUInt16 port;
 
-  SILC_LOG_DEBUG(("Packet error, sock %p", stream));
+  SILC_LOG_DEBUG(("Packet error %d, sock %p", error, stream));
 
   if (!idata || !sock)
     return;
@@@@ -283,6 +288,9 @@@@ static void silc_server_packet_error(SilcPacketEngine 
   if (!silc_packet_stream_is_valid(stream))
     return;
 
+  /* We must take reference of the stream */
+  silc_packet_stream_ref(stream);
+
   /* In case we get here many times, register only one timeout */
   silc_schedule_task_del_by_all(server->schedule, 0,
 				silc_server_packet_error_timeout, stream);
@@@@ -310,10 +318,17 @@@@ static void silc_server_packet_parse_type(SilcServer s
 {
   SilcPacketType type = packet->type;
   SilcIDListData idata = silc_packet_get_context(sock);
+#ifdef SILC_DEBUG
+  const char *ip;
+  SilcUInt16 port;
 
-  SILC_LOG_DEBUG(("Received %s packet [flags %d]",
-		  silc_get_packet_name(type), packet->flags));
+  silc_socket_stream_get_info(silc_packet_stream_get_stream(sock),
+			      NULL, NULL, &ip, &port);
+#endif /* SILC_DEBUG */
 
+  SILC_LOG_DEBUG(("Received %s packet [flags %d] from %s:%d",
+		  silc_get_packet_name(type), packet->flags, ip, port));
+
   /* Parse the packet type */
   switch (type) {
   case SILC_PACKET_NOTIFY:
@@@@ -2345,6 +2360,8 @@@@ silc_server_accept_auth_compl(SilcConnAuth connauth, S
       entry->data.conn_type = SILC_CONN_CLIENT;
 
       /* Statistics */
+      SILC_LOG_DEBUG(("stat.clients %d->%d", server->stat.clients,
+		      server->stat.clients + 1));
       server->stat.my_clients++;
       server->stat.clients++;
       server->stat.cell_clients++;
@@@@ -3090,7 +3107,8 @@@@ void silc_server_disconnect_remote(SilcServer server,
d8 4
a11 33
-  SILC_LOG_DEBUG(("Disconnecting remote host, sock %p", sock));
+  SILC_LOG_DEBUG(("Disconnecting remote host, sock %p, status %d", sock,
+		  status));
 
   va_start(ap, status);
   cp = va_arg(ap, char *);
@@@@ -3154,6 +3172,8 @@@@ void silc_server_free_client_data(SilcServer server,
   /* Local detached clients aren't counted. */
   if (!client->local_detached)
     server->stat.my_clients--;
+  SILC_LOG_DEBUG(("stat.clients %d->%d", server->stat.clients,
+		  server->stat.clients - 1));
   SILC_VERIFY(server->stat.clients > 0);
   server->stat.clients--;
   if (server->stat.cell_clients)
@@@@ -3215,11 +3235,13 @@@@ void silc_server_free_sock_user_data(SilcServer server
     if (idata->sconn && idata->sconn->op) {
       SILC_LOG_DEBUG(("Abort active protocol"));
       silc_async_abort(idata->sconn->op, NULL, NULL);
+      idata->sconn->op = NULL;
     }
     if (idata->conn_type == SILC_CONN_UNKNOWN &&
         ((SilcUnknownEntry)idata)->op) {
       SILC_LOG_DEBUG(("Abort active protocol"));
       silc_async_abort(((SilcUnknownEntry)idata)->op, NULL, NULL);
+      ((SilcUnknownEntry)idata)->op = NULL;
     }
   }
 
@@@@ -5030,6 +5052,10 @@@@ void silc_server_save_users_on_channel(SilcServer serv
       }
 
       client->data.status |= SILC_IDLIST_STATUS_REGISTERED;
d13 2
a14 4
+      SILC_LOG_DEBUG(("stat.clients %d->%d", server->stat.clients,
+		      server->stat.clients + 1));
+      server->stat.clients++;
     }
a15 1
     if (!(client->data.status & SILC_IDLIST_STATUS_REGISTERED)) {
@


1.4
log
@patch from upstream git via Brad; increment stat.clients statistics
whenever adding new client. Otherwise it is possible to go under zero
when removing clients from the server.
@
text
@d1 1
a1 1
$OpenBSD: patch-apps_silcd_server_c,v 1.3 2009/01/12 00:31:45 sthen Exp $
@


1.3
log
@add patches from upstream git;
- Added debug logs for updating stat.clients value
- Take stream reference correctly in packet error callback

from Brad (maintainer).
@
text
@d1 3
a3 3
$OpenBSD$
--- apps/silcd/server.c.orig	Fri Jan  9 22:27:45 2009
+++ apps/silcd/server.c	Fri Jan  9 22:39:18 2009
d45 21
a65 1
@@@@ -2345,6 +2353,8 @@@@ silc_server_accept_auth_compl(SilcConnAuth connauth, S
d74 1
a74 1
@@@@ -3090,7 +3100,8 @@@@ void silc_server_disconnect_remote(SilcServer server,
d84 1
a84 1
@@@@ -3154,6 +3165,8 @@@@ void silc_server_free_client_data(SilcServer server,
d93 1
a93 1
@@@@ -3215,11 +3228,13 @@@@ void silc_server_free_sock_user_data(SilcServer server
d107 11
@


1.2
log
@update to 1.1.6 from Brad, and remove some dead mirrors
@
text
@d1 55
a55 6
$OpenBSD: patch-apps_silcd_server_c,v 1.1 2008/04/22 00:34:30 sthen Exp $
http://git.silcnet.org/gitweb/?p=silc.git;a=commitdiff;h=e10fb3ff712f60100846064c196d5f69921d1b43
--- apps/silcd/server.c.orig	Sun Apr 20 21:20:39 2008
+++ apps/silcd/server.c	Sun Apr 20 21:21:19 2008
@@@@ -3036,7 +3036,8 @@@@ void silc_server_free_sock_user_data(SilcServer server
   if (!idata)
d58 28
a85 3
-  //  silc_schedule_task_del_by_context(server->schedule, sock);
+  silc_schedule_task_del_by_all(server->schedule, 0, silc_server_do_rekey,
+                               sock);
a86 2
   /* Cancel active protocols */
   if (idata) {
@


1.2.2.1
log
@update to 1.1.5;

- fixes portability bugs including a
  remote user-triggerable DoS on strict alignment arch.
- a crash fix from GIT

from William Yodlowsky
@
text
@@


1.1
log
@update to 1.1.5 + a crash fix from GIT. ok brad (maintainer).
@
text
@d1 1
a1 1
$OpenBSD$
@

