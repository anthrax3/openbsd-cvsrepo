head	1.6;
access;
symbols
	OPENBSD_5_5:1.5.0.16
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.14
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.12
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.10
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_5:1.4.0.2;
locks; strict;
comment	@# @;


1.6
date	2014.07.16.21.17.04;	author brad;	state dead;
branches;
next	1.5;
commitid	bLSrylMZOaYW0Wco;

1.5
date	2010.05.17.08.39.24;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.27.19.25.02;	author sthen;	state dead;
branches
	1.4.2.1
	1.4.4.1;
next	1.3;

1.3
date	2009.08.11.21.23.14;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.14.02.11.40;	author brad;	state dead;
branches;
next	1.1;

1.1
date	2005.09.09.17.03.35;	author brad;	state Exp;
branches;
next	;

1.4.2.1
date	2009.10.16.23.40.16;	author william;	state Exp;
branches;
next	;

1.4.4.1
date	2009.11.02.02.27.42;	author william;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to silc-server 1.1.19.

ok sthen@@
@
text
@$OpenBSD: patch-apps_silcd_command_c,v 1.5 2010/05/17 08:39:24 sthen Exp $
--- apps/silcd/command.c.orig	Sat Sep 26 16:34:12 2009
+++ apps/silcd/command.c	Sun May 16 21:05:33 2010
@@@@ -85,6 +85,27 @@@@ SilcServerCommand silc_command_list[] =
   { NULL, 0 },
 };
 
+/* Returns TRUE if the connection is registered. Unregistered connections
+   usually cannot send commands hence the check. */
+
+static int silc_server_is_registered(SilcServer server,
+				     SilcPacketStream sock,
+				     SilcServerCommandContext cmd,
+				     SilcCommand command)
+{
+  SilcIDListData idata = silc_packet_get_context(sock);
+
+  if (!idata)
+    return FALSE;
+
+  if (idata->status & SILC_IDLIST_STATUS_REGISTERED)
+    return TRUE;
+
+  silc_server_command_send_status_reply(cmd, command,
+					SILC_STATUS_ERR_NOT_REGISTERED, 0);
+  return FALSE;
+}
+
 /* Performs several checks to the command. It first checks whether this
    command was called as pending command callback. If it was then it checks
    whether error occurred in the command reply where the pending command
@@@@ -102,6 +123,13 @@@@ do {									     \
     return;								     \
   }									     \
 									     \
+  if (context2 &&							     \
+      !silc_server_is_registered(cmd->server, cmd->sock, cmd, command)) {    \
+    SILC_LOG_DEBUG(("Not registered, command not called")); 		     \
+    silc_server_command_free(cmd);					     \
+    return;								     \
+  }									     \
+									     \
   _argc = silc_argument_get_arg_num(cmd->args);				     \
   if (_argc < min) {							     \
     SILC_LOG_DEBUG(("Not enough parameters in command"));		     \
@@@@ -120,27 +148,6 @@@@ do {									     \
     return;								     \
   }									     \
 } while(0)
-
-/* Returns TRUE if the connection is registered. Unregistered connections
-   usually cannot send commands hence the check. */
-
-static int silc_server_is_registered(SilcServer server,
-				     SilcPacketStream sock,
-				     SilcServerCommandContext cmd,
-				     SilcCommand command)
-{
-  SilcIDListData idata = silc_packet_get_context(sock);
-
-  if (!idata)
-    return FALSE;
-
-  if (idata->status & SILC_IDLIST_STATUS_REGISTERED)
-    return TRUE;
-
-  silc_server_command_send_status_reply(cmd, command,
-					SILC_STATUS_ERR_NOT_REGISTERED, 0);
-  return FALSE;
-}
 
 /* Internal context to hold data when executed command with timeout. */
 typedef struct {
@


1.5
log
@Roll in some fixes from upstream.. From Brad.

- silcd: check entity validity after command reply
- Packet engine: prevent divide by 0
- SKE: Make sure failure received from remote is error status.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@Update to 1.1.18, from Brad.
@
text
@d1 73
a73 12
$OpenBSD: patch-apps_silcd_command_c,v 1.3 2009/08/11 21:23:14 sthen Exp $
--- apps/silcd/command.c.orig	Tue Aug 11 15:10:48 2009
+++ apps/silcd/command.c	Tue Aug 11 15:11:07 2009
@@@@ -2379,7 +2379,7 @@@@ SILC_SERVER_CMD_FUNC(join)
        channel will be global, based on our router name. */
     if (!serv[0] && !server->config->local_channels) {
       if (!server->standalone) {
-	silc_snprintf(serv, sizeof(serv), server->router->server_name);
+	silc_snprintf(serv, sizeof(serv), "%s", server->router->server_name);
       } else {
 	SilcServerConfigRouter *router;
 	router = silc_server_config_get_primary_router(server);
@


1.4.4.1
log
@SECURITY FIX

Format string fix
@
text
@a0 3
Security fix:  format string


@


1.4.2.1
log
@SECURITY FIX

Format string fix

ok Brad
@
text
@a0 3
Security fix:  format string


@


1.3
log
@SECURITY; add patches from upstream repo to fix format string bugs.
From Brad.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@upgrade to silc-server 1.0.1
@
text
@d1 12
a12 14
$OpenBSD: patch-apps_silcd_command_c,v 1.1 2005/09/09 17:03:35 brad Exp $
--- apps/silcd/command.c.orig	Tue May 10 12:59:01 2005
+++ apps/silcd/command.c	Mon Sep  5 19:39:15 2005
@@@@ -2964,6 +2964,10 @@@@ SILC_SERVER_CMD_FUNC(cmode)
 	 new channel key. Clients are not using private channel keys
 	 anymore after this. */
 
+      /* if we don't remove the flag from the mode
+       * silc_server_create_channel_key won't create a new key */
+      channel->mode &= ~SILC_CHANNEL_MODE_PRIVKEY;
+
       /* Re-generate channel key */
       if (!silc_server_create_channel_key(server, channel, 0))
 	goto out;
@


1.1
log
@add two patches for crashing issues.

From: SILC CVS via zoran ivanic <zoc at 5mm dot org>
@
text
@d1 1
a1 1
$OpenBSD$
@

