head	1.2;
access;
symbols
	OPENBSD_5_5:1.1.0.16
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2014.07.16.21.17.04;	author brad;	state dead;
branches;
next	1.1;
commitid	bLSrylMZOaYW0Wco;

1.1
date	2010.05.17.08.39.24;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update to silc-server 1.1.19.

ok sthen@@
@
text
@$OpenBSD: patch-lib_silccore_silcpacket_c,v 1.1 2010/05/17 08:39:24 sthen Exp $
--- lib/silccore/silcpacket.c.orig	Sun May 16 21:03:25 2010
+++ lib/silccore/silcpacket.c	Sun May 16 21:04:33 2010
@@@@ -2231,8 +2231,9 @@@@ static void silc_packet_read_process(SilcPacketStream 
 
     /* Padding sanity checks */
     if (cipher && silc_cipher_get_mode(cipher) != SILC_CIPHER_MODE_CTR &&
-	((normal && paddedlen % block_len != 0) ||
-	 (!normal && silc_packet_special_len(header) % block_len != 0))) {
+	((normal && block_len && paddedlen % block_len != 0) ||
+	 (!normal && block_len &&
+          silc_packet_special_len(header) % block_len != 0))) {
       SILC_LOG_DEBUG(("Packet length %d not multiple by cipher block length",
 		      paddedlen));
       silc_mutex_unlock(stream->lock);
@


1.1
log
@Roll in some fixes from upstream.. From Brad.

- silcd: check entity validity after command reply
- Packet engine: prevent divide by 0
- SKE: Make sure failure received from remote is error status.
@
text
@d1 1
a1 1
$OpenBSD$
@

