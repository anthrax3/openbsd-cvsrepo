head	1.4;
access;
symbols
	OPENBSD_5_9:1.3.0.2
	OPENBSD_5_3:1.2.0.2;
locks; strict;
comment	@# @;


1.4
date	2016.06.27.18.41.11;	author danj;	state dead;
branches;
next	1.3;
commitid	DFrMiz8PdpbhZMyH;

1.3
date	2016.06.15.06.55.58;	author jasper;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	2ME6PSfDaWoa0b7c;

1.2
date	2013.04.28.20.30.50;	author gonzalo;	state dead;
branches
	1.2.2.1;
next	1.1;

1.1
date	2013.04.03.06.23.25;	author jasper;	state Exp;
branches;
next	;

1.2.2.1
date	2013.05.01.07.03.59;	author jasper;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2013.07.21.03.42.21;	author william;	state Exp;
branches;
next	;

1.3.2.1
date	2016.06.15.07.03.05;	author jasper;	state Exp;
branches;
next	;
commitid	IO2xCYYDKNVeBSqL;


desc
@@


1.4
log
@update to haproxy-1.6.6

from David Carlier
@
text
@$OpenBSD: patch-src_proto_http_c,v 1.3 2016/06/15 06:55:58 jasper Exp $

Security fix for CVE-2016-5360
http://git.haproxy.org/?p=haproxy-1.6.git;a=commitdiff;h=60f01f8c89e4fb2723d5a9f2046286e699567e0b

--- src/proto_http.c.orig	Tue May 10 15:42:00 2016
+++ src/proto_http.c	Tue Jun 14 15:10:23 2016
@@@@ -3490,10 +3490,12 @@@@ static int http_transform_header(struct stream* s, str
  * further processing of the request (auth, deny, ...), and defaults to
  * HTTP_RULE_RES_STOP if it executed all rules or stopped on an allow, or
  * HTTP_RULE_RES_CONT if the last rule was reached. It may set the TX_CLTARPIT
- * on txn->flags if it encounters a tarpit rule.
+ * on txn->flags if it encounters a tarpit rule. If <deny_status> is not NULL
+ * and a deny/tarpit rule is matched, it will be filled with this rule's deny
+ * status.
  */
 enum rule_result
-http_req_get_intercept_rule(struct proxy *px, struct list *rules, struct stream *s)
+http_req_get_intercept_rule(struct proxy *px, struct list *rules, struct stream *s, int *deny_status)
 {
 	struct session *sess = strm_sess(s);
 	struct http_txn *txn = s->txn;
@@@@ -3539,12 +3541,14 @@@@ resume_execution:
 			return HTTP_RULE_RES_STOP;
 
 		case ACT_ACTION_DENY:
-			txn->rule_deny_status = rule->deny_status;
+			if (deny_status)
+				*deny_status = rule->deny_status;
 			return HTTP_RULE_RES_DENY;
 
 		case ACT_HTTP_REQ_TARPIT:
 			txn->flags |= TX_CLTARPIT;
-			txn->rule_deny_status = rule->deny_status;
+			if (deny_status)
+				*deny_status = rule->deny_status;
 			return HTTP_RULE_RES_DENY;
 
 		case ACT_HTTP_REQ_AUTH:
@@@@ -4303,6 +4307,7 @@@@ int http_process_req_common(struct stream *s, struct c
 	struct redirect_rule *rule;
 	struct cond_wordlist *wl;
 	enum rule_result verdict;
+	int deny_status = HTTP_ERR_403;
 
 	if (unlikely(msg->msg_state < HTTP_MSG_BODY)) {
 		/* we need more data */
@@@@ -4323,7 +4328,7 @@@@ int http_process_req_common(struct stream *s, struct c
 
 	/* evaluate http-request rules */
 	if (!LIST_ISEMPTY(&px->http_req_rules)) {
-		verdict = http_req_get_intercept_rule(px, &px->http_req_rules, s);
+		verdict = http_req_get_intercept_rule(px, &px->http_req_rules, s, &deny_status);
 
 		switch (verdict) {
 		case HTTP_RULE_RES_YIELD: /* some data miss, call the function later. */
@@@@ -4369,7 +4374,7 @@@@ int http_process_req_common(struct stream *s, struct c
 
 		/* parse the whole stats request and extract the relevant information */
 		http_handle_stats(s, req);
-		verdict = http_req_get_intercept_rule(px, &px->uri_auth->http_req_rules, s);
+		verdict = http_req_get_intercept_rule(px, &px->uri_auth->http_req_rules, s, &deny_status);
 		/* not all actions implemented: deny, allow, auth */
 
 		if (verdict == HTTP_RULE_RES_DENY) /* stats http-request deny */
@@@@ -4500,9 +4505,9 @@@@ int http_process_req_common(struct stream *s, struct c
 		manage_client_side_cookies(s, req);
 
 	txn->flags |= TX_CLDENY;
-	txn->status = http_err_codes[txn->rule_deny_status];
+	txn->status = http_err_codes[deny_status];
 	s->logs.tv_request = now;
-	stream_int_retnclose(&s->si[0], http_error_message(s, txn->rule_deny_status));
+	stream_int_retnclose(&s->si[0], http_error_message(s, deny_status));
 	stream_inc_http_err_ctr(s);
 	sess->fe->fe_counters.denied_req++;
 	if (sess->fe != s->be)
@


1.3
log
@Security fix for CVE-2016-5360

ok danj@@ (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3.2.1
log
@Security fix for CVE-2016-5360

ok danj@@ (MAINTAINER)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_proto_http_c,v 1.3 2016/06/15 06:55:58 jasper Exp $
d6 3
a8 3
--- src/proto_http.c.orig	Sun Dec 27 15:04:17 2015
+++ src/proto_http.c	Wed Jun 15 09:02:24 2016
@@@@ -3489,10 +3489,12 @@@@ static int http_transform_header(struct stream* s, str
d23 1
a23 1
@@@@ -3538,12 +3540,14 @@@@ resume_execution:
d40 1
a40 1
@@@@ -4302,6 +4306,7 @@@@ int http_process_req_common(struct stream *s, struct c
d48 1
a48 1
@@@@ -4322,7 +4327,7 @@@@ int http_process_req_common(struct stream *s, struct c
d57 1
a57 1
@@@@ -4368,7 +4373,7 @@@@ int http_process_req_common(struct stream *s, struct c
d66 2
a67 1
@@@@ -4487,9 +4492,9 @@@@ int http_process_req_common(struct stream *s, struct c
a68 1
  deny:	/* this request was blocked (denied) */
@


1.2
log
@Update for Haproxy to 1.4.23.

Mostly bugfixes and last patch commited upstream.

ok jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_proto_http_c,v 1.1 2013/04/03 06:23:25 jasper Exp $
d3 2
a4 2
Security fix for CVE-2013-1912, haproxy may crash on TCP content inspection rules
BUG/CRITICAL: using HTTP information in tcp-request content may crash the process
d6 72
a77 38
--- src/proto_http.c.orig	Tue Aug 14 09:09:31 2012
+++ src/proto_http.c	Wed Apr  3 08:20:41 2013
@@@@ -8278,6 +8278,14 @@@@ acl_fetch_proto_http(struct proxy *px, struct session 
 		return 1;
 	}
 
+	/* If the buffer does not leave enough free space at the end,
+	 * we must first realign it.
+	 */
+	if (unlikely(req->lr > req->data &&
+	    (req->r < req->lr || req->r > req->data + req->size - global.tune.maxrewrite)) &&
+	    (req->l <= req->size - global.tune.maxrewrite))
+		http_buffer_heavy_realign(req, msg);
+
 	/* Try to decode HTTP request */
 	if (likely(req->lr < req->r))
 		http_msg_analyzer(req, msg, &txn->hdr_idx);
@@@@ -8295,6 +8303,20 @@@@ acl_fetch_proto_http(struct proxy *px, struct session 
 	/* OK we got a valid HTTP request. We have some minor preparation to
 	 * perform so that further checks can rely on HTTP tests.
 	 */
+
+	/* If the request was parsed but was too large, we must absolutely
+	 * return an error so that it is not processed. At the moment this
+	 * cannot happen, but if the parsers are to change in the future,
+	 * we want this check to be maintained.
+	 */
+	if (unlikely(req->lr > req->data &&
+	    (req->r < req->lr || req->l > req->size - global.tune.maxrewrite ||
+	     req->r > req->data + req->size - global.tune.maxrewrite))) {
+		msg->msg_state = HTTP_MSG_ERROR;
+		test->flags |= ACL_TEST_F_SET_RES_PASS;
+		return 1;
+	}
+
 	txn->meth = find_http_meth(msg->sol, msg->sl.rq.m_l);
 	if (txn->meth == HTTP_METH_GET || txn->meth == HTTP_METH_HEAD)
 		s->flags |= SN_REDIRECTABLE;
@


1.2.2.1
log
@Security fix for CVE-2013-1912, haproxy may crash on TCP content inspection rules
@
text
@@


1.2.2.2
log
@SECURITY FIX for CVE-2013-2175

from upstream.  ok jasper
@
text
@d1 1
a1 1
$OpenBSD: patch-src_proto_http_c,v 1.2.2.1 2013/05/01 07:03:59 jasper Exp $
d6 3
a8 21
Security fix for CVE-2013-2175, fix a possible crash when using negative header
occurrences


--- src/proto_http.c.orig	Tue Aug 14 03:09:31 2012
+++ src/proto_http.c	Wed Jul 17 00:02:27 2013
@@@@ -7565,9 +7565,11 @@@@ unsigned int get_ip_from_hdr2(struct http_msg *msg, co
 	if (-occ > found)
 		return 0;
 	/* OK now we have the last occurrence in [hist_ptr-1], and we need to
-	 * find occurrence -occ, so we have to check [hist_ptr+occ].
+	 * find occurrence -occ. 0 <= hist_ptr < MAX_HDR_HISTORY, and we have
+	 * -10 <= occ <= -1. So we have to check [hist_ptr%MAX_HDR_HISTORY+occ]
+	 * to remain in the 0..9 range.
 	 */
-	hist_ptr += occ;
+	hist_ptr += occ + MAX_HDR_HISTORY;
 	if (hist_ptr >= MAX_HDR_HISTORY)
 		hist_ptr -= MAX_HDR_HISTORY;
 	return hdr_hist[hist_ptr];
@@@@ -8278,6 +8280,14 @@@@ acl_fetch_proto_http(struct proxy *px, struct session 
d23 1
a23 1
@@@@ -8295,6 +8305,20 @@@@ acl_fetch_proto_http(struct proxy *px, struct session 
@


1.1
log
@Security fix for CVE-2013-1912, haproxy may crash on TCP content inspection rules

Patch from upstream git.
@
text
@d1 1
a1 1
$OpenBSD$
@

