head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.2
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.6.0.2
	OPENBSD_6_1_BASE:1.6
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2017.08.12.14.20.11;	author danj;	state Exp;
branches;
next	1.6;
commitid	YHvW0pNoKNHHwN13;

1.6
date	2017.02.01.15.49.34;	author naddy;	state Exp;
branches;
next	1.5;
commitid	9TLQVCoThbdB9mrc;

1.5
date	2016.01.06.09.50.04;	author benoit;	state dead;
branches;
next	1.4;
commitid	7PEWXlOoHbrSCkAR;

1.4
date	2015.11.10.11.56.54;	author jca;	state Exp;
branches;
next	1.3;
commitid	sSe577CEOfafovnT;

1.3
date	2015.11.05.20.00.24;	author jca;	state dead;
branches;
next	1.2;
commitid	5pXb3Bp1oxBSkZI0;

1.2
date	2015.08.25.17.51.52;	author jca;	state Exp;
branches;
next	1.1;
commitid	aAlK9yYMHeQqBx7D;

1.1
date	2015.07.18.15.43.44;	author sthen;	state Exp;
branches;
next	;
commitid	P7WiBiXMtZKGCA4j;


desc
@@


1.7
log
@Update to haproxy-1.7.8

This moves the port to the latest stable branch. Thanks to Bernard Spil
for patching haproxy to make it work with libressl and pointing it to me!

OK gonzalo@@
@
text
@$OpenBSD: patch-src_ssl_sock_c,v 1.6 2017/02/01 15:49:34 naddy Exp $

From
https://github.com/trueos/freebsd-ports/blob/3745ead2e0f43985c3647e1e3aecae2751decfda/net/haproxy/files/patch-src_ssl__sock.c

Index: src/ssl_sock.c
--- src/ssl_sock.c.orig
+++ src/ssl_sock.c
@@@@ -794,8 +794,11 @@@@ static int ssl_sock_load_ocsp(SSL_CTX *ctx, const char
 		ocsp = NULL;
 
 #ifndef SSL_CTX_get_tlsext_status_cb
+#ifndef SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB
+#define SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB 128
+#endif
 # define SSL_CTX_get_tlsext_status_cb(ctx, cb) \
-	*cb = (void (*) (void))ctx->tlsext_status_cb;
+	*cb = SSL_CTX_ctrl(ctx,SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB,0, (void (**)(void))cb)
 #endif
 	SSL_CTX_get_tlsext_status_cb(ctx, &callback);
 
@@@@ -823,7 +826,10 @@@@ static int ssl_sock_load_ocsp(SSL_CTX *ctx, const char
 		int key_type;
 		EVP_PKEY *pkey;
 
-#ifdef SSL_CTX_get_tlsext_status_arg
+#if defined(SSL_CTX_get_tlsext_status_arg) || defined(LIBRESSL_VERSION_NUMBER)
+#ifndef SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG
+#define SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG 129
+#endif
 		SSL_CTX_ctrl(ctx, SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG, 0, &cb_arg);
 #else
 		cb_arg = ctx->tlsext_status_arg;
@@@@ -3539,7 +3545,7 @@@@ int ssl_sock_handshake(struct connection *conn, unsign
 					OSSL_HANDSHAKE_STATE state = SSL_get_state((SSL *)conn->xprt_ctx);
 					empty_handshake = state == TLS_ST_BEFORE;
 #else
-					empty_handshake = !((SSL *)conn->xprt_ctx)->packet_length;
+					empty_handshake = SSL_state((SSL *)conn->xprt_ctx) == SSL_ST_BEFORE;
 #endif
 
 					if (empty_handshake) {
@@@@ -3617,7 +3623,7 @@@@ int ssl_sock_handshake(struct connection *conn, unsign
 			state = SSL_get_state((SSL *)conn->xprt_ctx);
 			empty_handshake = state == TLS_ST_BEFORE;
 #else
-			empty_handshake = !((SSL *)conn->xprt_ctx)->packet_length;
+			empty_handshake = SSL_state((SSL *)conn->xprt_ctx) == SSL_ST_BEFORE;
 #endif
 			if (empty_handshake) {
 				if (!errno) {
@


1.6
log
@Unbreak after libressl change: remove direct access to field now private.
Similar to upstream changes for OpenSSL 1.1.0.  Not tested at run time.
ok danj@@ sthen@@
@
text
@d1 10
a10 15
$OpenBSD$
--- src/ssl_sock.c.orig	Sun Dec 25 09:26:16 2016
+++ src/ssl_sock.c	Thu Jan 26 21:09:45 2017
@@@@ -2810,7 +2810,7 @@@@ int ssl_sock_handshake(struct connection *conn, unsign
 				if (!errno && conn->flags & CO_FL_WAIT_L4_CONN)
 					conn->flags &= ~CO_FL_WAIT_L4_CONN;
 				if (!conn->err_code) {
-					if (!((SSL *)conn->xprt_ctx)->packet_length) {
+					if (SSL_state((SSL *)conn->xprt_ctx) == SSL_ST_BEFORE) {
 						if (!errno) {
 							if (conn->xprt_st & SSL_SOCK_RECV_HEARTBEAT)
 								conn->err_code = CO_ER_SSL_HANDSHAKE_HB;
@@@@ -2877,7 +2877,7 @@@@ int ssl_sock_handshake(struct connection *conn, unsign
 			if (!errno && conn->flags & CO_FL_WAIT_L4_CONN)
 				conn->flags &= ~CO_FL_WAIT_L4_CONN;
d12 39
a50 2
-			if (!((SSL *)conn->xprt_ctx)->packet_length) {
+			if (SSL_state((SSL *)conn->xprt_ctx) == SSL_ST_BEFORE) {
a51 2
 					if (conn->xprt_st & SSL_SOCK_RECV_HEARTBEAT)
 						conn->err_code = CO_ER_SSL_HANDSHAKE_HB;
@


1.5
log
@Update to haproxy-1.6.3.

from David Carlier, ok maintainer Daniel Jakots.
@
text
@d1 21
a21 42
$OpenBSD: patch-src_ssl_sock_c,v 1.4 2015/11/10 11:56:54 jca Exp $

Commited upstream http://git.haproxy.org/?p=haproxy-1.6.git;a=commit;h=96414cce6acd7617bcbfedfa0584ebecb5404a30

--- src/ssl_sock.c.orig	Tue Nov  3 11:22:06 2015
+++ src/ssl_sock.c	Fri Nov  6 09:53:11 2015
@@@@ -714,7 +714,7 @@@@ out:
 
 #endif
 
-#if (OPENSSL_VERSION_NUMBER >= 0x1000200fL && !defined OPENSSL_NO_TLSEXT && !defined OPENSSL_IS_BORINGSSL)
+#if (OPENSSL_VERSION_NUMBER >= 0x1000200fL && !defined OPENSSL_NO_TLSEXT && !defined OPENSSL_IS_BORINGSSL && !defined LIBRESSL_VERSION_NUMBER)
 
 #define CT_EXTENSION_TYPE 18
 
@@@@ -1736,7 +1736,7 @@@@ static int ssl_sock_load_cert_file(const char *path, s
 	}
 #endif
 
-#if (OPENSSL_VERSION_NUMBER >= 0x1000200fL && !defined OPENSSL_NO_TLSEXT && !defined OPENSSL_IS_BORINGSSL)
+#if (OPENSSL_VERSION_NUMBER >= 0x1000200fL && !defined OPENSSL_NO_TLSEXT && !defined OPENSSL_IS_BORINGSSL && !defined LIBRESSL_VERSION_NUMBER)
 	if (sctl_ex_index >= 0) {
 		ret = ssl_sock_load_sctl(ctx, path);
 		if (ret < 0) {
@@@@ -5348,7 +5348,7 @@@@ struct xprt_ops ssl_sock = {
 	.init     = ssl_sock_init,
 };
 
-#if (OPENSSL_VERSION_NUMBER >= 0x1000200fL && !defined OPENSSL_NO_TLSEXT && !defined OPENSSL_IS_BORINGSSL)
+#if (OPENSSL_VERSION_NUMBER >= 0x1000200fL && !defined OPENSSL_NO_TLSEXT && !defined OPENSSL_IS_BORINGSSL && !defined LIBRESSL_VERSION_NUMBER)
 
 static void ssl_sock_sctl_free_func(void *parent, void *ptr, CRYPTO_EX_DATA *ad, int idx, long argl, void *argp)
 {
@@@@ -5381,7 +5381,7 @@@@ static void __ssl_sock_init(void)
 	SSL_library_init();
 	cm = SSL_COMP_get_compression_methods();
 	sk_SSL_COMP_zero(cm);
-#if (OPENSSL_VERSION_NUMBER >= 0x1000200fL && !defined OPENSSL_NO_TLSEXT && !defined OPENSSL_IS_BORINGSSL)
+#if (OPENSSL_VERSION_NUMBER >= 0x1000200fL && !defined OPENSSL_NO_TLSEXT && !defined OPENSSL_IS_BORINGSSL && !defined LIBRESSL_VERSION_NUMBER)
 	sctl_ex_index = SSL_CTX_get_ex_new_index(0, NULL, NULL, NULL, ssl_sock_sctl_free_func);
 #endif
 	sample_register_fetches(&sample_fetch_keywords);
@


1.4
log
@Maintainer update to haproxy-1.6.2

Upstream removed the example config file, this update adds a new,
simpler one.

Also fix a time_t printing warning while here.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@Update to haproxy-1.5.15, from maintainer Daniel Jakots.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_ssl_sock_c,v 1.2 2015/08/25 17:51:52 jca Exp $
d3 1
a3 1
Committed upstream
d5 38
a42 26
  https://github.com/haproxy/haproxy/commit/17c3f6284cf605e47f6525c077bc644c45272849

--- src/ssl_sock.c.orig	Sat Jul 18 09:40:46 2015
+++ src/ssl_sock.c	Sat Jul 18 09:42:45 2015
@@@@ -1405,8 +1405,10 @@@@ int ssl_sock_prepare_ctx(struct bind_conf *bind_conf, 
 		ssloptions |= SSL_OP_NO_TLSv1_2;
 	if (bind_conf->ssl_options & BC_SSL_O_NO_TLS_TICKETS)
 		ssloptions |= SSL_OP_NO_TICKET;
+#ifndef OPENSSL_NO_SSL3
 	if (bind_conf->ssl_options & BC_SSL_O_USE_SSLV3)
 		SSL_CTX_set_ssl_version(ctx, SSLv3_server_method());
+#endif
 	if (bind_conf->ssl_options & BC_SSL_O_USE_TLSV10)
 		SSL_CTX_set_ssl_version(ctx, TLSv1_server_method());
 #if SSL_OP_NO_TLSv1_1
@@@@ -1750,8 +1752,10 @@@@ int ssl_sock_prepare_srv_ctx(struct server *srv, struc
 		options |= SSL_OP_NO_TLSv1_2;
 	if (srv->ssl_ctx.options & SRV_SSL_O_NO_TLS_TICKETS)
 		options |= SSL_OP_NO_TICKET;
+#ifndef OPENSSL_NO_SSL3
 	if (srv->ssl_ctx.options & SRV_SSL_O_USE_SSLV3)
 		SSL_CTX_set_ssl_version(srv->ssl_ctx.ctx, SSLv3_client_method());
+#endif
 	if (srv->ssl_ctx.options & SRV_SSL_O_USE_TLSV10)
 		SSL_CTX_set_ssl_version(srv->ssl_ctx.ctx, TLSv1_client_method());
 #if SSL_OP_NO_TLSv1_1
@


1.2
log
@Committed upstream.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_ssl_sock_c,v 1.1 2015/07/18 15:43:44 sthen Exp $
@


1.1
log
@guard SSLv3_client_method() with #ifndef OPENSSL_NO_SSL3
@
text
@d1 6
a6 1
$OpenBSD$
@

