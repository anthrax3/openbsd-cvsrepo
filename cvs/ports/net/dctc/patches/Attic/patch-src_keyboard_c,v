head	1.5;
access;
symbols
	OPENBSD_4_9:1.4.0.10
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.8
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.1.1.1.0.6
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.4
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.2
	OPENBSD_3_1_BASE:1.1.1.1
	naddy_20020131:1.1.1.1
	naddy:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2011.07.04.11.10.57;	author jasper;	state dead;
branches;
next	1.4;

1.4
date	2008.08.25.15.14.43;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.11.11.04.58;	author jakemsr;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.01.16.51.39;	author avsm;	state Exp;
branches;
next	1.1;

1.1
date	2002.01.31.12.21.54;	author naddy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.01.31.12.21.54;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.5
log
@garbage collect these Direct Connect clients. they're old/unmaintained and
hardly working. users of Direct Connect can use mldonkey or valknut instead.

ok dcoppa@@ landry@@
@
text
@$OpenBSD: patch-src_keyboard_c,v 1.4 2008/08/25 15:14:43 jasper Exp $
--- src/keyboard.c.orig	Fri Jan  9 19:16:01 2004
+++ src/keyboard.c	Fri Aug 22 20:46:38 2008
@@@@ -36,6 +36,7 @@@@ $Id: keyboard.c,v 1.25 2004/01/09 18:16:01 ericprev Ex
 #include <sys/socket.h>
 #include <sys/param.h>
 #include <sys/sem.h>
+#include <netinet/in.h>
 #include <netdb.h>
 
 #ifdef WITH_GCRYPT
@@@@ -237,7 +238,7 @@@@ static void keyb_do_xdownload(const char *cmd, int sck
 			{	/* we have a full access, the remote side will be able to contact us */
 				char tmp[512];
 
-				sprintf(tmp,"%s:%hu",host_ip,com_port);
+				snprintf(tmp, sizeof(tmp), "%s:%hu",host_ip,com_port);
 				if(user_in_list(hub_user_list,fields[2]))
 					send_dc_line(sck,"$ConnectToMe",fields[2],tmp,NULL);
 				else
@@@@ -573,7 +574,7 @@@@ static void keyb_do_csearch(const char *cmd, int sck, 
 			if(!md5sum_of_file(pattern,md5sum))
 			{
 				char txt_md[3*MD5SUMLEN+1];
-				md5tostr(md5sum,txt_md);
+				md5tostr(md5sum,txt_md,sizeof txt_md);
 				g_string_sprintfa(query,".%s",txt_md);
 	
 				/* add a tos entry for this search */
@@@@ -588,7 +589,7 @@@@ static void keyb_do_csearch(const char *cmd, int sck, 
 			if(!md5sum_of_file(pattern,md5sum))
 			{
 				char txt_md[3*MD5SUMLEN+1];
-				md5tostr(md5sum,txt_md);
+				md5tostr(md5sum,txt_md,sizeof txt_md);
 				g_string_sprintfa(query,".%s",txt_md);
 	
 				/* add a tos entry for this search */
@@@@ -878,7 +879,7 @@@@ static void keyb_do_xfer(const char *cmd, int sck, cha
 			if(nw==NULL)
 				continue;
 
-			sprintf(tmp,"%lu",(unsigned long)(nw->thread_id));
+			snprintf(tmp,sizeof(tmp),"%lu",(unsigned long)(nw->thread_id));
 			if(nw->remote_nick==NULL)
 			{
 				disp_msg(XFER_LST_R,NULL,tmp,"",NULL);
@@@@ -1201,7 +1202,7 @@@@ static void keyb_do_kill(const char *cmd, int sck, cha
 	}
 
 	/* modify our nick name locally */
-	id=strtoul(t,NULL,10);
+	id=(pthread_t)strtoul(t,NULL,10);
 
 	/* to shutdown a thread, it is very easy, we just close the socket it uses */
 	/* thus, it will abort himself, freeing all ressources it allocates */
@@@@ -1727,7 +1728,7 @@@@ static void keyb_do_ls(const char *cmd, int sck, char 
 			{	/* we have a full access, the remote side will be able to contact us */
 				char tmp[512];
 	
-				sprintf(tmp,"%s:%hu",host_ip,com_port);
+				snprintf(tmp, sizeof(tmp), "%s:%hu",host_ip,com_port);
 				send_dc_line(sck,"$ConnectToMe",nick,tmp,NULL);
 				disp_msg(INFO_MSG,"","/LS in $ConnectToMe",NULL);
 			}
@@@@ -2325,7 +2326,7 @@@@ static void keyb_do_vars(const char *cmd, int sck, cha
 	disp_msg(VAR_MSG,NULL,"cnx_type",cnx_type,NULL);
 	disp_msg(VAR_MSG,NULL,"email",email,NULL);
 
-	sprintf(buf,"%lf",offset_sizeof_data);
+	snprintf(buf,sizeof(buf),"%lf",offset_sizeof_data);
 	disp_msg(VAR_MSG,NULL,"offset",buf,NULL);
 
 	disp_msg(VAR_MSG,NULL,"hostip",org_host_ip,NULL);
@@@@ -2342,7 +2343,7 @@@@ static void keyb_do_vars(const char *cmd, int sck, cha
 	/* else, we are connected */
 	if(main_sck>-1)
 	{
-		sprintf(buf,"%d",main_sck);
+		snprintf(buf,sizeof(buf),"%d",main_sck);
 		disp_msg(VAR_MSG,NULL,"main_sck",buf,NULL);
 	}
 	else
@@@@ -2351,12 +2352,12 @@@@ static void keyb_do_vars(const char *cmd, int sck, cha
 
 		if(find_sim_input_delay("/RECON",&s_time))
 		{
-			sprintf(buf,"=>%ld",s_time);
+			snprintf(buf,sizeof(buf),"=>%ld",s_time);
 			disp_msg(VAR_MSG,NULL,"main_sck",buf,NULL);
 		}
 		else
 		{
-			sprintf(buf,"%d",main_sck);
+			snprintf(buf,sizeof(buf),"%d",main_sck);
 			disp_msg(VAR_MSG,NULL,"main_sck",buf,NULL);
 		}
 	}
@@@@ -2369,14 +2370,14 @@@@ static void keyb_do_vars(const char *cmd, int sck, cha
 		g_string_free(shared_dir,TRUE);
 	}
 
-	sprintf(buf,"%d",((int)cnx_opt)&255);
+	snprintf(buf,sizeof(buf),"%d",((int)cnx_opt)&255);
 	disp_msg(VAR_MSG,NULL,"cnx_opt",buf,NULL);
 
-	sprintf(buf,"%d",semctl(bl_semid,UL_SPD_SEMA,GETVAL,v));
+	snprintf(buf,sizeof(buf),"%d",semctl(bl_semid,UL_SPD_SEMA,GETVAL,v));
 	disp_msg(VAR_MSG,NULL,"ubl",buf,NULL);
-	sprintf(buf,"%d",semctl(bl_semid,DL_SPD_SEMA,GETVAL,v));
+	snprintf(buf,sizeof(buf),"%d",semctl(bl_semid,DL_SPD_SEMA,GETVAL,v));
 	disp_msg(VAR_MSG,NULL,"dbl",buf,NULL);
-	sprintf(buf,"%d",semctl(bl_semid,GATHER_SPD_SEMA,GETVAL,v));
+	snprintf(buf,sizeof(buf),"%d",semctl(bl_semid,GATHER_SPD_SEMA,GETVAL,v));
 	disp_msg(VAR_MSG,NULL,"gbl",buf,NULL);
 
 	/* display int vars */
@@@@ -2417,22 +2418,22 @@@@ static void keyb_do_vars(const char *cmd, int sck, cha
 		}
 	}
 
-	sprintf(buf,"%u",com_port);
+	snprintf(buf,sizeof(buf),"%u",com_port);
 	disp_msg(VAR_MSG,NULL,"com_port",buf,NULL);
 
 	/* display socks values */
 	disp_msg(VAR_MSG,NULL,"socks_ip",(socks_ip!=NULL)?socks_ip:"",NULL);
-	sprintf(buf,"%hu",socks_port);
+	snprintf(buf,sizeof(buf),"%hu",socks_port);
 	disp_msg(VAR_MSG,NULL,"socks_port",buf,NULL);
 	disp_msg(VAR_MSG,NULL,"socks_name",(socks_name!=NULL)?socks_name:"",NULL);
 
 	disp_msg(VAR_MSG,NULL,"vshare_dir",(vshare_directory!=NULL)?vshare_directory:"",NULL);
 
-	sprintf(buf,"%u:%u",gdl_as_port_range[0],gdl_as_port_range[1]);
+	snprintf(buf,sizeof(buf),"%u:%u",gdl_as_port_range[0],gdl_as_port_range[1]);
 	disp_msg(VAR_MSG,NULL,"gdlasports",buf,NULL);
 	UNLOCK_READ(user_info);
 
-	sprintf(buf,"%d,%d,%d,%d",hub_tos,udp_tos,dl_tos,ul_tos);
+	snprintf(buf,sizeof(buf),"%d,%d,%d,%d",hub_tos,udp_tos,dl_tos,ul_tos);
 	disp_msg(VAR_MSG,NULL,"tos",buf,NULL);
 
 	if(fake_dcpp_version==NULL)
@


1.4
log
@- update dctc to a less ancient version 0.85.9
- merge parts of pkg/SECURITY into pkg/MESSAGE
- fix license marker

feedback and ok ajacoutot@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_keyboard_c,v 1.3 2007/12/11 11:04:58 jakemsr Exp $
@


1.3
log
@use -pthread instead of -lpthread for pthreads linkage

sync w/update-patches
@
text
@d1 4
a4 4
$OpenBSD: patch-src_keyboard_c,v 1.2 2003/09/01 16:51:39 avsm Exp $
--- src/keyboard.c.orig	Wed Jan 23 06:06:08 2002
+++ src/keyboard.c	Tue Dec 11 00:04:50 2007
@@@@ -32,6 +32,7 @@@@
a9 1
 #include <glib.h>
d11 2
a12 1
@@@@ -222,7 +223,7 @@@@ static void keyb_do_download(const char *cmd, int sck,
d15 1
a15 1
 	
d18 4
a21 13
 				send_dc_line(sck,"$ConnectToMe",nick,tmp,NULL);
 				disp_msg(DEBUG_MSG,"","/DL in $ConnectToMe",NULL);
 			}
@@@@ -310,7 +311,7 @@@@ static void keyb_do_xdownload(const char *cmd, int sck
 		{	/* we have a full access, the remote side will be able to contact us */
 			char tmp[512];
 
-			sprintf(tmp,"%s:%hu",host_ip,com_port);
+			snprintf(tmp, sizeof(tmp), "%s:%hu",host_ip,com_port);
 			send_dc_line(sck,"$ConnectToMe",fields[2],tmp,NULL);
 			disp_msg(DEBUG_MSG,"","/XDL in $ConnectToMe",NULL);
 		}
@@@@ -603,7 +604,7 @@@@ static void keyb_do_csearch(const char *cmd, int sck, 
d30 1
a30 1
@@@@ -618,7 +619,7 @@@@ static void keyb_do_csearch(const char *cmd, int sck, 
d39 1
a39 1
@@@@ -903,7 +904,7 @@@@ static void keyb_do_xfer(const char *cmd, int sck, cha
d48 1
a48 10
@@@@ -941,7 +942,7 @@@@ static void keyb_do_xfer(const char *cmd, int sck, cha
 
 		nw=&(g_array_index(sim_input,SIM_INPUT,i));
 
-		sprintf(tmp,"%lu|%lu",nw->id,nw->min_start_time);
+		snprintf(tmp,sizeof(tmp),"%lu|%lu",nw->id,nw->min_start_time);
 		disp_msg(CMD_KB,NULL,tmp,nw->keyb_string->str,NULL);
 	}
 
@@@@ -1246,7 +1247,7 @@@@ static void keyb_do_kill(const char *cmd, int sck, cha
d57 10
a66 10
@@@@ -1628,7 +1629,7 @@@@ static void keyb_do_ls(const char *cmd, int sck, char 
 		{	/* we have a full access, the remote side will be able to contact us */
 			char tmp[512];
 
-			sprintf(tmp,"%s:%hu",host_ip,com_port);
+			snprintf(tmp, sizeof(tmp), "%s:%hu",host_ip,com_port);
 			send_dc_line(sck,"$ConnectToMe",nick,tmp,NULL);
 			disp_msg(INFO_MSG,"","/LS in $ConnectToMe",NULL);
 		}
@@@@ -2065,25 +2066,25 @@@@ static void keyb_do_vars(const char *cmd, int sck, cha
d74 2
a75 26
-	sprintf(buf,"%u",recon_delay);
+	snprintf(buf,sizeof(buf),"%u",recon_delay);
 	disp_msg(VAR_MSG,NULL,"recon_delay",buf,NULL);
 
-	sprintf(buf,"%d",ttl_dl_slot);
+	snprintf(buf,sizeof(buf),"%d",ttl_dl_slot);
 	disp_msg(VAR_MSG,NULL,"dl_slot",buf,NULL);
 
-	sprintf(buf,"%d",dl_on);
+	snprintf(buf,sizeof(buf),"%d",dl_on);
 	disp_msg(VAR_MSG,NULL,"dl_on",buf,NULL);
 
-	sprintf(buf,"%u",auto_rebuild_delay);
+	snprintf(buf,sizeof(buf),"%u",auto_rebuild_delay);
 	disp_msg(VAR_MSG,NULL,"auto_rebuild_delay",buf,NULL);
 
-	sprintf(buf,"%d",behind_fw);
+	snprintf(buf,sizeof(buf),"%d",behind_fw);
 	disp_msg(VAR_MSG,NULL,"behind_fw",buf,NULL);
 
-	sprintf(buf,"%u",com_port);
+	snprintf(buf,sizeof(buf),"%u",com_port);
 	disp_msg(VAR_MSG,NULL,"com_port",buf,NULL);
 
 	disp_msg(VAR_MSG,NULL,"hostip",host_ip,NULL);
@@@@ -2099,7 +2100,7 @@@@ static void keyb_do_vars(const char *cmd, int sck, cha
d84 1
a84 1
@@@@ -2108,12 +2109,12 @@@@ static void keyb_do_vars(const char *cmd, int sck, cha
d99 1
a99 1
@@@@ -2126,29 +2127,29 @@@@ static void keyb_do_vars(const char *cmd, int sck, cha
a102 4
-	sprintf(buf,"%d",when_done);
+	snprintf(buf,sizeof(buf),"%d",when_done);
 	disp_msg(VAR_MSG,NULL,"when_done",buf,NULL);
 
a105 1
 	UNLOCK_READ(user_info);
d107 2
a108 2
-	sprintf(buf,"%d",semctl(bl_semid,2,GETVAL));
+	snprintf(buf,sizeof(buf),"%d",semctl(bl_semid,2,GETVAL));
d110 29
d140 3
a142 19
-	sprintf(buf,"%u",wanna_emode);
+	snprintf(buf,sizeof(buf),"%u",wanna_emode);
 	disp_msg(VAR_MSG,NULL,"wanted_emode",buf,NULL);
 
-	sprintf(buf,"%u",having_emode);
+	snprintf(buf,sizeof(buf),"%u",having_emode);
 	disp_msg(VAR_MSG,NULL,"current_emode",buf,NULL);
 
-	sprintf(buf,"%d",follow_force_move);
+	snprintf(buf,sizeof(buf),"%d",follow_force_move);
 	disp_msg(VAR_MSG,NULL,"follow_force_move",buf,NULL);
 
-	sprintf(buf,"%d",with_md5sum);
+	snprintf(buf,sizeof(buf),"%d",with_md5sum);
 	disp_msg(VAR_MSG,NULL,"with_md5sum",buf,NULL);
 
-	sprintf(buf,"%d",with_ddl);
+	snprintf(buf,sizeof(buf),"%d",with_ddl);
 	disp_msg(VAR_MSG,NULL,"with_ddl",buf,NULL);
d144 1
a144 1
 	display_cnx_status();
@


1.2
log
@fix md5 display, bug introduced in our security patches by taking
sizeof(pointer) into a bound string
feedback from krw@@, naddy@@ ok
@
text
@d1 3
a3 3
$OpenBSD: patch-src_keyboard_c,v 1.1.1.1 2002/01/31 12:21:54 naddy Exp $
--- src/keyboard.c.orig	2002-01-23 09:06:08.000000000 -0500
+++ src/keyboard.c	2003-08-29 11:47:24.000000000 -0400
d12 1
a12 1
@@@@ -222,7 +223,7 @@@@ static void keyb_do_download(const char 
d21 1
a21 1
@@@@ -310,7 +311,7 @@@@ static void keyb_do_xdownload(const char
d30 1
a30 1
@@@@ -603,7 +604,7 @@@@ static void keyb_do_csearch(const char *
d39 1
a39 1
@@@@ -618,7 +619,7 @@@@ static void keyb_do_csearch(const char *
d48 1
a48 1
@@@@ -903,7 +904,7 @@@@ static void keyb_do_xfer(const char *cmd
d57 1
a57 1
@@@@ -941,7 +942,7 @@@@ static void keyb_do_xfer(const char *cmd
d66 1
a66 1
@@@@ -1246,7 +1247,7 @@@@ static void keyb_do_kill(const char *cmd
d75 1
a75 1
@@@@ -1628,7 +1629,7 @@@@ static void keyb_do_ls(const char *cmd, 
d84 1
a84 1
@@@@ -2065,25 +2066,25 @@@@ static void keyb_do_vars(const char *cmd
d117 1
a117 1
@@@@ -2099,7 +2100,7 @@@@ static void keyb_do_vars(const char *cmd
d126 1
a126 1
@@@@ -2108,12 +2109,12 @@@@ static void keyb_do_vars(const char *cmd
d141 1
a141 1
@@@@ -2126,29 +2127,29 @@@@ static void keyb_do_vars(const char *cmd
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- src/keyboard.c.orig	Wed Jan 23 15:06:08 2002
+++ src/keyboard.c	Mon Jan 28 16:57:20 2002
d30 18
@


1.1.1.1
log
@Import dctc 0.68.0; submitted by Nils Nordman <nino@@nforced.com>.

DCTC is a Direct Connect clone, allowing users to share their files
and talk (like IRC but more software sharing oriented) using a
proprietary protocol. 
@
text
@@
