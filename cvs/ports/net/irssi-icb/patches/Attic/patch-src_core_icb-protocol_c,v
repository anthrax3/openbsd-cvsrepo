head	1.5;
access;
symbols
	OPENBSD_5_8:1.4.0.18
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.14
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.12
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.10
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.8
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.6
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.4
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.2
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2015.12.29.22.45.05;	author sthen;	state dead;
branches;
next	1.4;
commitid	oEoIWEQ9jIPM88TY;

1.4
date	2011.10.19.09.47.26;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2011.06.14.10.22.16;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.11.13.56.33;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.04.14.16.22;	author phessler;	state Exp;
branches;
next	;


desc
@@


1.5
log
@update to irssi-icb 0.15, plus pkgsrc patches
@
text
@$OpenBSD: patch-src_core_icb-protocol_c,v 1.4 2011/10/19 09:47:26 dcoppa Exp $

Break lines longer than 255 chars

--- src/core/icb-protocol.c.orig	Sat May  4 19:21:44 2002
+++ src/core/icb-protocol.c	Tue Oct 18 15:19:39 2011
@@@@ -121,9 +121,93 @@@@ static void icb_login(ICB_SERVER_REC *server)
 
 void icb_send_open_msg(ICB_SERVER_REC *server, const char *text)
 {
-        icb_send_cmd(server, 'b', text, NULL);
+	size_t remain;
+
+	/*
+	 * ICB has 255 byte line length limit, and public messages are sent
+	 * out with our nickname, so split text accordingly.
+	 *
+	 * 250 = 255 - 'b' - 1 space after nick - ^A - nul - extra
+	 *
+	 * Taken from ircII's icb.c, thanks phone :-)
+	 */
+	remain = 250 - strlen(server->connrec->nick);
+
+	while(*text) {
+		char buf[256], *sendbuf;
+		size_t len, copylen;
+
+		len = strlen(text);
+		copylen = remain;
+		if (len > remain) {
+			int i;
+
+			/* try to split on a word boundary */
+			for (i = 1; i < 128 && i < len; i++) {
+				if (isspace(text[remain - i])) {
+					copylen -= i - 1;
+					break;
+				}
+			}
+			strncpy(buf, text, copylen);
+			buf[copylen] = 0;
+			sendbuf = buf;
+		} else {
+			sendbuf = (char *)text;
+		}
+		icb_send_cmd(server, 'b', sendbuf, NULL);
+		text += len > copylen ? copylen : len;
+	}
 }
 
+void icb_send_private_msg(ICB_SERVER_REC *server, const char *target,
+		const char *text)
+{
+	size_t mylen, targlen, remain;
+
+	/*
+	 * ICB has 255 byte line length limit.  Private messages are sent
+	 * out with our nickname, but received with the target nickname,
+	 * so deduct the larger of the two in addition to other parts.
+	 *
+	 * 248 = 255 - 'hm' - 1 space after nick - ^A's - nul - extra
+	 *
+	 * Taken from ircII's icb.c, thanks phone :-)
+	 */
+	mylen = strlen(server->connrec->nick);
+	targlen = strlen(target);
+	if (mylen > targlen) {
+		remain = 248 - mylen;
+	} else {
+		remain = 248 - targlen;
+	}
+	while(*text) {
+		char buf[256], *sendbuf;
+		size_t len, copylen;
+
+		len = strlen(text);
+		copylen = remain;
+		if (len > remain) {
+			int i;
+
+			/* try to split on a word boundary */
+			for (i = 1; i < 128 && i < len; i++) {
+				if (isspace(text[remain - i])) {
+					copylen -= i - 1;
+					break;
+				}
+			}
+			strncpy(buf, text, copylen);
+			buf[copylen] = 0;
+			sendbuf = g_strconcat(target, " ", buf, NULL);
+		} else {
+			sendbuf = g_strconcat(target, " ", text, NULL);
+		}
+		icb_send_cmd(server, 'h', "m", sendbuf, NULL);
+		text += len > copylen ? copylen : len;
+	}
+}
+
 void icb_command(ICB_SERVER_REC *server, const char *cmd,
 		 const char *args, const char *id)
 {
@@@@ -293,6 +377,20 @@@@ static void event_cmdout(ICB_SERVER_REC *server, const
         g_strfreev(args);
 }
 
+static void event_status(ICB_SERVER_REC *server, const char *data)
+{
+	char **args, *event;
+
+	args = g_strsplit(data, "\001", -1);
+	if (args[0] != NULL) {
+		event = g_strdup_printf("icb status %s", g_ascii_strdown(args[0], strlen(args[0])));
+		if (!signal_emit(event, 2, server, args))
+                        signal_emit("default icb status", 2, server, args);
+                g_free(event);
+	}
+        g_strfreev(args);
+}
+
 void icb_protocol_init(void)
 {
         signal_add("server connected", (SIGNAL_FUNC) sig_server_connected);
@@@@ -300,6 +398,7 @@@@ void icb_protocol_init(void)
         signal_add("icb event login", (SIGNAL_FUNC) event_login);
         signal_add("icb event ping", (SIGNAL_FUNC) event_ping);
         signal_add("icb event cmdout", (SIGNAL_FUNC) event_cmdout);
+        signal_add("icb event status", (SIGNAL_FUNC) event_status);
 }
 
 void icb_protocol_deinit(void)
@@@@ -309,4 +408,5 @@@@ void icb_protocol_deinit(void)
         signal_remove("icb event login", (SIGNAL_FUNC) event_login);
         signal_remove("icb event ping", (SIGNAL_FUNC) event_ping);
         signal_remove("icb event cmdout", (SIGNAL_FUNC) event_cmdout);
+        signal_remove("icb event status", (SIGNAL_FUNC) event_status);
 }
@


1.4
log
@Small cleanup:

add "-module" to LDFLAGS
remove now unneeded (char *) casts from NULLs
add missing time.h

OK sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_core_icb-protocol_c,v 1.3 2011/06/14 10:22:16 sthen Exp $
@


1.3
log
@sync irssi-icb with pkgsrc changes, ok jasper@@

- implement commands via irssi signals
- detect /topic on join
- support /names, including on join
@
text
@d1 1
a1 1
$OpenBSD: patch-src_core_icb-protocol_c,v 1.2 2010/06/11 13:56:33 dcoppa Exp $
d5 2
a6 2
--- src/core/icb-protocol.c.orig	Sat May  4 18:21:44 2002
+++ src/core/icb-protocol.c	Tue Jun 14 10:34:29 2011
d90 1
a90 1
+			sendbuf = g_strconcat(target, " ", buf, (char *) NULL);
d92 1
a92 1
+			sendbuf = g_strconcat(target, " ", text, (char *) NULL);
@


1.2
log
@Switch to glib2, minor cleanups.

OK jasper@@, phessler@@, landry@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_core_icb-protocol_c,v 1.1 2010/06/04 14:16:22 phessler Exp $
d5 3
a7 3
--- src/core/icb-protocol.c.orig	Sat May  4 19:21:44 2002
+++ src/core/icb-protocol.c	Fri Jun 11 12:39:54 2010
@@@@ -121,7 +121,91 @@@@ static void icb_login(ICB_SERVER_REC *server)
d49 2
a50 2
+}
+
d97 31
d130 7
a136 1
 void icb_command(ICB_SERVER_REC *server, const char *cmd,
@


1.1
log
@The icb protocol limits each message to 255 chars, so automagically
split at a reasonable length, so the messages actually get delivered to
the server.

Patch taken from pkgsrc
OK sthen@@, landry@@
@
text
@d1 1
a1 1
$OpenBSD$
d6 1
a6 1
+++ src/core/icb-protocol.c	Fri Jun  4 10:12:25 2010
d90 1
a90 1
+			sendbuf = g_strconcat(target, " ", buf, NULL);
d92 1
a92 1
+			sendbuf = g_strconcat(target, " ", text, NULL);
@

