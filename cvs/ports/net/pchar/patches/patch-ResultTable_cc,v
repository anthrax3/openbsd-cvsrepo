head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2017.07.28.15.45.08;	author espie;	state Exp;
branches;
next	1.1;
commitid	oLhlx7ckW2QGnSW4;

1.1
date	2017.05.08.21.40.10;	author naddy;	state Exp;
branches;
next	;
commitid	KLL1tExi9XTTzybk;


desc
@@


1.2
log
@casting to long is brittle because it's different for 32 bit arches,
use sturdier absdiff instead
@
text
@$OpenBSD: patch-ResultTable_cc,v 1.1 2017/05/08 21:40:10 naddy Exp $

Index: ResultTable.cc
--- ResultTable.cc.orig
+++ ResultTable.cc
@@@@ -44,7 +44,7 @@@@ ResultTable::ResultTable(unsigned int inc, unsigned in
     // can't handle "new (footype *)[bar]".  We're trying to do:
     // data = new (double *) [columns];
     typedef double *DoublePtr;
-    data = new (double *[columns]);
+    data = new DoublePtr[columns];
     if (data == NULL) {
 	fprintf(stderr, "Couldn't allocate data array for a ResultTable\n");
 	exit(1);
@@@@ -767,6 +767,12 @@@@ void ResultTable::lms(double &a, double &b, double &r2
 
 }
 
+template<typename X>
+X absdiff(X a, X b)
+{
+	return a < b ? b - a : a - b;
+}
+
 //
 // ResultTable::lmsint
 //
@@@@ -909,7 +915,7 @@@@ void ResultTable::lmsint(double &a, double &b, double 
 	l = 0;
 	for (i = 0; i < columns; i++) {
 	    if (partialmins[i] != timeoutresult) {
-		residuals[l] = abs(partialmins[i] - 
+		residuals[l] = absdiff(partialmins[i],
 				   ((currentslope * 
 				     column2size(i) /
 				     slopescale) +
@@@@ -930,7 +936,7 @@@@ void ResultTable::lmsint(double &a, double &b, double 
 	l = 0;
 	for (i = 0; i < columns; i++) {
 	    if (partialmins[i] != timeoutresult) {
-		ys[l] = abs(partialmins[i] - mediany);
+		ys[l] = absdiff(partialmins[i], mediany);
 		l++;
 	    }
 	}
@


1.1
log
@fix a number of warnings and errors for clang
@
text
@d1 1
a1 1
$OpenBSD$
d15 14
a28 1
@@@@ -909,7 +909,7 @@@@ void ResultTable::lmsint(double &a, double &b, double 
d33 1
a33 1
+		residuals[l] = abs((long)partialmins[i] - 
d37 1
a37 1
@@@@ -930,7 +930,7 @@@@ void ResultTable::lmsint(double &a, double &b, double 
d42 1
a42 1
+		ys[l] = abs((long)partialmins[i] - mediany);
@

