head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.10
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.8
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.6
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.04.28.23.16.20;	author bluhm;	state Exp;
branches;
next	1.1;
commitid	hr9TGpxL1Aak5m6S;

1.1
date	2013.09.26.21.52.35;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update ipv6toolkit to 2.0
- rename ipv6-toolkit to ipv6toolkit like upstream did
- no longer patch random(3) to arc4random(3), our random(3) is safe now
- no longer patch strncat(3) to strlcat(3), the bug has been fixed
OK jca@@
@
text
@$OpenBSD$
--- tools/flow6.c.orig	Sun Apr  5 16:00:06 2015
+++ tools/flow6.c	Mon Apr 27 22:59:14 2015
@@@@ -681,7 +681,7 @@@@ int send_fid_probe(void){
 		dlt_null->family= PF_INET6;
 	}
 #if defined (__OpenBSD__)
-	else if(idata->type == DLT_LOOP){
+	else if(idata.type == DLT_LOOP){
 		dlt_null->family= htonl(PF_INET6);
 	}
 #endif
@


1.1
log
@Shut up the compiler and linker warnings in ipv6-toolkit.
- use arc4random(3)
- make include fix smaller
- silence uninitialized variable warning
- replace strncat with strlcat
OK naddy@@
@
text
@d2 4
a5 3
--- tools/flow6.c.orig	Fri Aug 16 07:35:41 2013
+++ tools/flow6.c	Sun Sep  8 20:49:58 2013
@@@@ -227,8 +227,7 @@@@ int main(int argc, char **argv){
d7 6
a12 51
 
 
-	srandom(time(NULL));
-	hoplimit=64+random()%180;
+	hoplimit=64+arc4random_uniform(180);
 	init_iface_data(&idata);
 
 	while((r=getopt_long(argc, argv, shortopts, longopts, NULL)) != -1) {
@@@@ -536,9 +535,9 @@@@ int main(int argc, char **argv){
 		puts("Identifying the 'Flow ID' generation policy of the target node....");
 
 		if(protocol == IPPROTO_TCP){
-			tcpwin= ((u_int16_t) random() + 1500) & (u_int16_t)0x7f00;
-			tcpseq= random();
-			baseport= 50000+ random()%10000;
+			tcpwin= ((u_int16_t) arc4random() + 1500) & (u_int16_t)0x7f00;
+			tcpseq= arc4random();
+			baseport= 50000+ arc4random_uniform(10000);
 			lastport= baseport;
 		}
 
@@@@ -585,8 +584,8 @@@@ int main(int argc, char **argv){
 
 			if( testtype==FIXED_ORIGIN && ((curtime - start) >= ID_ASSESS_TIMEOUT || ntest1 >= NSAMPLES)){
 				testtype= MULTI_ORIGIN;
-				addr_sig= random();
-				addr_key= random();
+				addr_sig= arc4random();
+				addr_key= arc4random();
 				start= curtime;
 				continue;
 			}
@@@@ -1173,7 +1172,7 @@@@ void randomize_ipv6_addr(struct in6_addr *ipv6addr, st
 		ipv6addr->s6_addr16[i]= 0;
 
 	for(i=startrand; i<8; i++)
-		ipv6addr->s6_addr16[i]=random();
+		ipv6addr->s6_addr16[i]=arc4random();
 
 	if(preflen%16){
 		mask=0xffff;
@@@@ -1198,8 +1197,7 @@@@ void randomize_ipv6_addr(struct in6_addr *ipv6addr, st
  */
 
 void randomize_ether_addr(struct ether_addr *ethaddr){
-	for(i=0; i<6; i++)
-		ethaddr->a[i]= random();
+	arc4random_buf(ethaddr, sizeof(struct ether_addr));
 
 	ethaddr->a[0]= (ethaddr->a[0] & 0xfc) | 0x02;
 }
@

