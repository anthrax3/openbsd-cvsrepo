head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.6
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2015.06.19.16.34.41;	author sthen;	state Exp;
branches;
next	;
commitid	ZeUuk8Q1fSMJgm1B;


desc
@@


1.1
log
@Add a fix from Sergey Ryazanov <ryazanov.s.a / gmail.com> to handle
fragmented ppp frames while reading from pty. From Sergey's mail:

=====
xl2tpd could not correctly handle fragmented ppp frame while read it
from pty if one of consequent read operation return an error.
That's happening because xl2tpd too often cleans the buffer and
assumes that each read frame operation is performed for new frame,
since xl2tpd uses single buffer for pty and for socket read operations.

The attached patch moves all pty related buffers into _call_ context
and corrects calculation of buffer position, what fixes issue with
handling of fragmented frames. Now we can use MTU > 1000. I tested
these changes with load (L2TP tunnel without IPSec) and all seems work
normally. No more "Protocol-Reject" frames.
=====

Performance is still poor (Sergey was seeing ~2Mb/s, I am seeing less
despite low cpu use) but the tunnel now seems reliable.
@
text
@--- l2tp.h.orig	Tue Jun 16 02:20:02 2015
+++ l2tp.h	Tue Jun 16 02:20:38 2015
@@@@ -20,6 +20,8 @@@@ typedef unsigned long long _u64;
 #define _L2TP_H
 
 #define MAXSTRLEN 120           /* Maximum length of common strings */
+                                /* FIXME: MAX_RECV_SIZE, what is it? */
+#define MAX_RECV_SIZE 4096      /* Biggest packet we'll accept */
 
 #include <netinet/in.h>
 #include <termios.h>
@@@@ -109,8 +111,6 @@@@ struct payload_hdr
 #define MIN_PAYLOAD_HDR_LEN 6
 
 #define UDP_LISTEN_PORT  1701
-                                /* FIXME: MAX_RECV_SIZE, what is it? */
-#define MAX_RECV_SIZE 4096      /* Biggest packet we'll accept */
 
 #define OUR_L2TP_VERSION 0x100  /* We support version 1, revision 0 */
 
@@@@ -214,7 +214,7 @@@@ extern void destroy_tunnel (struct tunnel *);
 extern struct buffer *new_payload (struct sockaddr_in);
 extern void recycle_payload (struct buffer *, struct sockaddr_in);
 extern void add_payload_hdr (struct tunnel *, struct call *, struct buffer *);
-extern int read_packet (struct buffer *, int, int);
+extern int read_packet (struct call *);
 extern void udp_xmit (struct buffer *buf, struct tunnel *t);
 extern void control_xmit (void *);
 extern int ppd;
@
