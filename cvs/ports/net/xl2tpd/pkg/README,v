head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.10
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.8
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.3.0.6
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	sthen_20130115:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2015.06.19.16.34.41;	author sthen;	state Exp;
branches;
next	1.6;
commitid	ZeUuk8Q1fSMJgm1B;

1.6
date	2015.01.08.14.08.15;	author ajacoutot;	state Exp;
branches;
next	1.5;
commitid	c2EjIBU5fxm7ZaFa;

1.5
date	2014.10.11.16.13.36;	author landry;	state Exp;
branches;
next	1.4;
commitid	foym6BixOZZ3sJsY;

1.4
date	2014.10.09.13.06.04;	author sthen;	state Exp;
branches;
next	1.3;
commitid	1vyxAzXEdxneat1q;

1.3
date	2013.03.28.18.24.29;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2013.01.16.20.54.40;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.15.23.02.19;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.01.15.23.02.19;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Add a fix from Sergey Ryazanov <ryazanov.s.a / gmail.com> to handle
fragmented ppp frames while reading from pty. From Sergey's mail:

=====
xl2tpd could not correctly handle fragmented ppp frame while read it
from pty if one of consequent read operation return an error.
That's happening because xl2tpd too often cleans the buffer and
assumes that each read frame operation is performed for new frame,
since xl2tpd uses single buffer for pty and for socket read operations.

The attached patch moves all pty related buffers into _call_ context
and corrects calculation of buffer position, what fixes issue with
handling of fragmented frames. Now we can use MTU > 1000. I tested
these changes with load (L2TP tunnel without IPSec) and all seems work
normally. No more "Protocol-Reject" frames.
=====

Performance is still poor (Sergey was seeing ~2Mb/s, I am seeing less
despite low cpu use) but the tunnel now seems reliable.
@
text
@$OpenBSD: README,v 1.6 2015/01/08 14:08:15 ajacoutot Exp $

+-----------------------------------------------------------------------
| Running ${FULLPKGNAME} on OpenBSD
+-----------------------------------------------------------------------

Note that this port is not fully operational. It is useful in some cases,
but in general for situations supported by npppd(8) from OpenBSD's base
system (for example LNS "server" use), it is strongly recommended to use
that option instead.

As of this time, npppd(8) does not support client-side operations (LAC),
so this port is useful there.

Basic operation
===============
xl2tpd makes a connection via L2TP, but uses pppd(8) to carry out most
operations; therefore most PPP-related configuration is done via pppd's
configuration files; for an example of how to configure this, see
${TRUEPREFIX}/share/examples/xl2tpd/ppp-options.xl2tpd.

You will also need to add the _xl2tpd user to the group 'network' in
/etc/group in order to allow it to start pppd.

Control mechanisms
==================
When xl2tpd is started, it does not automatically connect. Instead it is
controlled by writing simple commands to a fifo (you may be familiar with
this style from isakmpd), e.g.: 

  echo '[command] [config_name]' > /var/run/xl2tpd/l2tp-control

Where [command] is one of:

  c    connect; may be followed by authname and password
  d    disconnect
  r    (disconnect and) remove

To connect, you must ensure that a free ppp(4) interface is available
("ifconfig ppp0 up" or "echo up > /etc/hostname.ppp0"), and then you must
send the 'c'onnect command to actually bring up a session; this does not
happen automatically.

An xl2tpd-control program is also available and you might be able to use
it as an alternative to the above, but it has some issues.

L2TP+IPsec
==========
To use an IPsec-protected tunnel, as you might want to do if connecting to
an npppd server, the IPsec tunnel must be configured separately using
isakmpd(8) - here are sample config sections (adjust $server, $ipsec_psk,
etc. as necessary, and you may need to adjust the auth/enc/group settings):

- /etc/ipsec.conf

ike dynamic esp transport proto udp from egress to $server port 1701 \
    main auth "hmac-sha" enc "aes" group modp2048 \
    quick auth "hmac-sha" enc "aes" \
    psk $ipsec_psk

- ${SYSCONFDIR}/xl2tpd/xl2tpd.conf:

[global]
debug avp = yes
debug network = yes
debug state = yes
debug tunnel = yes
port = 1701

[lac l2tp]
lns = $server
ppp debug = yes
pppoptfile = /etc/ppp/options.l2tp

- /etc/ppp/options.l2tp:

ipcp-accept-local
ipcp-accept-remote
noccp
noauth
mtu 1456
mru 1456
debug
lock
user $username
netmask 255.255.255.255

- /etc/ppp/chap-secrets:

$username	*	$password		*

Enable/start isakmpd:

# rcctl enable isakmpd
# rcctl set isakmpd flags -Kv
# rcctl start isakmpd
# ipsecctl -vf /etc/ipsec.conf

And confirm that the tunnel does actually come up:

# ipsecctl -sa
FLOWS:
flow esp in proto udp from $server port l2tp to $me peer $server srcid $myhostname dstid $server/32 type use
flow esp out proto udp from $me to $server port l2tp peer $server srcid $myhostname dstid $server/32 type require

SAD:
esp transport from $me to $server spi 0x1037c0f2 auth hmac-sha1 enc aes
esp transport from $server to $me spi 0x6c3d9e6a auth hmac-sha1 enc aes

If that is successful, you can try to make the L2TP connection:

# ifconfig ppp0 up
# rcctl start xl2tpd
# tail -f /var/log/daemon &
# echo c l2tp > /var/run/xl2tpd/l2tp-control

If all is well, you'll see debug output in the log, and the interface
should be connected:

# ifconfig ppp
ppp0: flags=28051<UP,POINTOPOINT,RUNNING,MULTICAST,NOINET6> mtu 1456
	priority: 0
	groups: ppp
	inet 172.28.15.223 --> 172.28.15.1 netmask 0xffffffff
@


1.6
log
@Fix rcctl(8) usage.
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.5 2014/10/11 16:13:36 landry Exp $
d81 2
a82 2
mtu 850
mru 850
d121 1
a121 1
ppp0: flags=28051<UP,POINTOPOINT,RUNNING,MULTICAST,NOINET6> mtu 850
a124 5

Note that these instructions configure things with a restricted MTU as
there seem to be some problems with fragmented packets (you will see
various "Protocol-Reject for unsupported protocol" messages in pppd's log).
Some connection stalling has also been seen under higher loads.
@


1.5
log
@Fix typo (s/pppo0/ppp0/) - thanks stuart for that awesomely detailed README :)
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.4 2014/10/09 13:06:04 sthen Exp $
d94 2
a95 1
# rcctl enable isakmpd flags -Kv
@


1.4
log
@Add some notes on l2tp+ipsec. Definitely not perfect as there are some issues
with fragments and stalls under high load, but it is possible to connect to
npppd using l2tp+ipsec with this information.
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.3 2013/03/28 18:24:29 sthen Exp $
d40 1
a40 1
("ifconfig ppp0 up" or "echo up > /etc/hostname.pppo0"), and then you must
@


1.3
log
@enable xl2tpd-control and adjust README
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.2 2013/01/16 20:54:40 sthen Exp $
d7 23
a29 7
This port is in early stages, and in general for LNS ("server") use it is
recommended to use npppd(8) instead, however it is useful if you wish
to use OpenBSD as an L2TP client (LAC).

xl2tpd can be controlled either by using xl2tpd-control, or by writing
simple commands to a fifo (you may be familiar with this style from
isakmpd), e.g.:
d39 90
a128 13
You must send the 'c'onnect command to actually bring up a session;
configuring it and starting the daemon is not sufficient.

xl2tpd makes a connection via L2TP, but uses pppd(8) to carry out most
operations; therefore most PPP-related configuration is done via pppd's
configuration files; for an example of how to configure this, see
${TRUEPREFIX}/share/examples/xl2tpd/ppp-options.xl2tpd. You will also need
to add the _xl2tpd user to the group 'network' in /etc/group in order to
allow it to start pppd.

Also note that a free ppp(4) interface must exist before xl2tpd brings
up a connection; you could create an /etc/hostname.ppp0 file simply
containing the word "up".
@


1.2
log
@additional notes for README
@
text
@d1 1
a1 1
$OpenBSD: README,v 1.1.1.1 2013/01/15 23:02:19 sthen Exp $
d7 1
a7 1
This port is in early stages, and in general for LNS use it is
d11 3
a13 4
Normally, xl2tpd would be controlled by using xl2tpd-control, a dedicated
program. This currently requires functions not present in OpenBSD, however
all this does is write simple commands to a fifo (you may be familiar with
this style from isakmpd). You can use the following as an alternative:
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD: README.template,v 1.4 2011/06/02 13:44:40 ajacoutot Exp $
d28 6
a33 1
operations; therefore any PPP-related configuration is done via pppd.
@


1.1.1.1
log
@import ports/net/xl2tpd, ok pirofti@@

xl2tpd is an implementation of the Layer 2 Tunnelling Protocol (RFC 2661),
which works by opening a pseudo-tty for communicating with pppd.

L2TP allows you to tunnel PPP over UDP. Some ISPs use L2TP to tunnel user
sessions from dial-in servers (modem banks, ADSL DSLAMs) to back-end PPP
servers. Another important application is Virtual Private Networks where
the IPsec protocol is used to secure the L2TP connection (L2TP/IPsec,
RFC 3193).
@
text
@@
