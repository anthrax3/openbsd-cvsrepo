head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.16
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.14
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	steven-20101025:1.1.1.1
	steven:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.07.26.19.19.33;	author steven;	state Exp;
branches;
next	1.1;
commitid	CLJOUZjtBUUcR0UU;

1.1
date	2010.10.25.23.12.02;	author steven;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.10.25.23.12.02;	author steven;	state Exp;
branches;
next	;


desc
@@


1.2
log
@update to 0.7.3
@
text
@$OpenBSD$
--- src/interfaces.c.orig	Mon Sep  9 14:33:01 2013
+++ src/interfaces.c	Sun Jul 19 19:27:50 2015
@@@@ -221,13 +221,12 @@@@ interfaces_init_data_libnet( struct interface_data *in
     if ( ( libnet_hnd = libnet_init( LIBNET_LINK, interface->ifname, errbuflibnet ) ) )
     {
         etheraddr = libnet_get_hwaddr( libnet_hnd );
+        libnet_destroy( libnet_hnd );
 
         if ( etheraddr && memcmp( (void *)etheraddr, "\x0\x0\x0\x0\x0\x0", 6 ) )
         {
             memcpy( (void *)interface->etheraddr, (void *)etheraddr, ETHER_ADDR_LEN );
         }
-        
-        libnet_destroy( libnet_hnd );
 
         write_log( 0," %s MAC = %02x%02x.%02x%02x.%02x%02x\n", interface->ifname, 
                    etheraddr->ether_addr_octet[0], etheraddr->ether_addr_octet[1],
@@@@ -286,7 +285,9 @@@@ interfaces_init( THREAD *pcap_th )
     
     while( index )
     {
-        if ( ( strncmp( index->name, "any", strlen( index->name ) ) ) && ( index->flags != PCAP_IF_LOOPBACK ) )
+        if ( ( strncmp( index->name, "any", strlen( index->name ) ) ) &&
+		(strstr(index->name,"pflog") == NULL) && 
+		( index->flags != PCAP_IF_LOOPBACK ) )
         {
             if ( ( iface_data = (struct interface_data *)calloc( 1, sizeof( struct interface_data ) ) ) ) 
             {
@


1.1
log
@Initial revision
@
text
@d2 4
a5 4
--- src/interfaces.c.orig	Sun Jul 16 14:37:31 2006
+++ src/interfaces.c	Mon Oct 25 23:26:02 2010
@@@@ -142,6 +142,7 @@@@ interfaces_init(THREAD *pcap_th)
     while (index)
d7 4
a10 3
         if ( (strncmp(index->name,"any",strlen(index->name))) && 
+             (strstr(index->name,"pflog") == NULL) && 
              (index->flags != PCAP_IF_LOOPBACK) )
d12 4
a15 2
            if ((iface_data = (struct interface_data *) calloc(1, sizeof(struct interface_data))) == NULL) {
@@@@ -321,6 +322,7 @@@@ interfaces_init_data(struct interface_data *interface)
d17 3
d21 1
a21 4
     etheraddr = libnet_get_hwaddr(libnet_handler);
+    libnet_destroy(libnet_handler);
 
     if (etheraddr && memcmp((void *)etheraddr,"\x0\x0\x0\x0\x0\x0",6) )
d23 7
a29 19
@@@@ -329,14 +331,13 @@@@ interfaces_init_data(struct interface_data *interface)
              etheraddr->ether_addr_octet[0], etheraddr->ether_addr_octet[1],
              etheraddr->ether_addr_octet[2], etheraddr->ether_addr_octet[3],
              etheraddr->ether_addr_octet[4], etheraddr->ether_addr_octet[5]);       */
-    }
-    
-    libnet_destroy(libnet_handler);
-
-     write_log(0," %s MAC = %02x%02x.%02x%02x.%02x%02x\n", interface->ifname, 
+        write_log(0," %s MAC = %02x%02x.%02x%02x.%02x%02x\n", interface->ifname, 
              etheraddr->ether_addr_octet[0], etheraddr->ether_addr_octet[1],
              etheraddr->ether_addr_octet[2], etheraddr->ether_addr_octet[3],
              etheraddr->ether_addr_octet[4], etheraddr->ether_addr_octet[5]); 
+    }
+    else
+        write_log(0," %s MAC not found!\n", interface->ifname);
     
     return 0;
 }
@


1.1.1.1
log
@import yersinia 0.7.1

Yersinia is a network tool designed to take advantage of some weaknesses
in different network protocols. It pretends to be a solid framework for
analyzing and testing the deployed networks and systems.

Attacks for the following network protocols are implemented:

   * Spanning Tree Protocol (STP)
   * Cisco Discovery Protocol (CDP)
   * Dynamic Trunking Protocol (DTP)
   * Dynamic Host Configuration Protocol (DHCP)
   * Hot Standby Router Protocol (HSRP)
   * IEEE 802.1Q
   * IEEE 802.1X
   * Inter-Switch Link Protocol (ISL)
   * VLAN Trunking Protocol (VTP)

ok landry@@
@
text
@@
