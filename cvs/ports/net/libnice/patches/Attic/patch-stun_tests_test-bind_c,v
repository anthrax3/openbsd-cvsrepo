head	1.5;
access;
symbols
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	jasper_20090820:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2011.12.30.14.05.31;	author jasper;	state dead;
branches;
next	1.4;

1.4
date	2011.03.02.07.32.04;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.22.14.29.00;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.09.22.13.08;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.20.17.09.00;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.08.20.17.09.00;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.5
log
@- drop a patch now that we have MSG_NOSIGNAL defined

from fgsch@@ via MAINTAINER
@
text
@$OpenBSD: patch-stun_tests_test-bind_c,v 1.4 2011/03/02 07:32:04 jasper Exp $
--- stun/tests/test-bind.c.orig	Tue Mar  9 17:34:55 2010
+++ stun/tests/test-bind.c	Sat Feb 19 09:45:19 2011
@@@@ -50,9 +50,6 @@@@
 #include <winsock2.h>
 #include <ws2tcpip.h>
 
-#define MSG_DONTWAIT 0
-#define MSG_NOSIGNAL 0
-
 #define alarm(...)
 #define close closesocket
 #else
@@@@ -60,6 +57,11 @@@@
 #include <sys/socket.h>
 #include <arpa/inet.h>
 #include <netdb.h>
+#endif
+
+#if defined(_WIN32) || defined(__OpenBSD__)
+#define MSG_DONTWAIT 0
+#define MSG_NOSIGNAL 0
 #endif
 
 #undef NDEBUG /* ensure assertions are built-in */
@


1.4
log
@- update libnice to 0.1.0
- various cleanups

from tom murphy (MAINTAINER) with tweaks by me.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@- update libnice to 0.0.13

from tom murphy (MAINTAINER)
@
text
@d2 2
a3 2
--- stun/tests/test-bind.c.orig	Mon Sep 13 11:34:38 2010
+++ stun/tests/test-bind.c	Mon Sep 13 11:35:18 2010
@


1.2
log
@- get some more regress tests running

from upstream via tom murphy (maintainer)
@
text
@d1 4
a4 5
$OpenBSD: patch-stun_tests_test-bind_c,v 1.1.1.1 2009/08/20 17:09:00 jasper Exp $
--- stun/tests/test-bind.c.orig	Tue Mar 31 20:58:55 2009
+++ stun/tests/test-bind.c	Wed Sep  9 16:19:43 2009
@@@@ -49,10 +49,6 @@@@
 #ifdef _WIN32
d7 1
a7 1
-
d14 3
a16 1
@@@@ -62,6 +58,11 @@@@
d18 2
a19 2
 #endif
 
d23 2
a24 2
+#endif
+
a25 86
 #include <assert.h>
 
@@@@ -216,13 +217,10 @@@@ static void bad_responses (void)
   val = getsockname (fd, (struct sockaddr *)&addr, &addrlen);
   assert (val == 0);
 
-  val = connect (servfd, (struct sockaddr *)&addr, addrlen);
-  assert (val == 0);
-
   /* Send request instead of response */
   val = getsockname (servfd, (struct sockaddr *)&addr, &addrlen);
   assert (val == 0);
-  len = recv (servfd, buf, 1000, MSG_DONTWAIT);
+  len = recvfrom (servfd, buf, 1000, MSG_DONTWAIT, NULL, 0); 
   assert (len >= 20);
 
   assert (stun_agent_validate (&agent, &msg, buf, len, NULL, NULL)
@@@@ -283,30 +281,29 @@@@ static void responses (void)
   fd = socket (addr.ss_family, SOCK_DGRAM, 0);
   assert (fd != -1);
 
-  val = connect (fd, (struct sockaddr *)&addr, addrlen);
-  assert (val == 0);
-
   /* Send to/receive from our client instance only */
   val = getsockname (fd, (struct sockaddr *)&addr, &addrlen);
   assert (val == 0);
 
-  val = connect (servfd, (struct sockaddr *)&addr, addrlen);
-  assert (val == 0);
-
   /* Send error response */
   req_len = stun_usage_bind_create (&agent, &req_msg, req, sizeof(req));
   assert (req_len > 0);
 
-  val = send (fd, req, req_len, MSG_DONTWAIT | MSG_NOSIGNAL);
+  val = getsockname (servfd, (struct sockaddr *)&addr, &addrlen);
+  assert (val == 0);
+
+  val = sendto (fd, req, req_len, MSG_DONTWAIT | MSG_NOSIGNAL,
+      (struct sockaddr *)&addr, addrlen); 
   assert (val >= 0);
 
-  val = recv (servfd, buf, 1000, MSG_DONTWAIT);
+  val = recvfrom (servfd, buf, 1000, MSG_DONTWAIT, NULL, 0);
   assert (val >= 0);
 
   assert (stun_agent_validate (&agent, &msg, buf, val, NULL, NULL)
       == STUN_VALIDATION_SUCCESS);
 
-  stun_agent_init_error (&agent, &msg, buf, sizeof (buf), &msg, STUN_ERROR_SERVER_ERROR);
+  stun_agent_init_error (&agent, &msg, buf, sizeof (buf),
+      &msg, STUN_ERROR_SERVER_ERROR);
   len = stun_agent_finish_message (&agent, &msg, NULL, 0);
   assert (len > 0);
 
@@@@ -321,7 +318,11 @@@@ static void responses (void)
   req_len = stun_usage_bind_create (&agent, &req_msg, req, sizeof(req));
   assert (req_len > 0);
 
-  val = send (fd, req, req_len, MSG_DONTWAIT | MSG_NOSIGNAL);
+  val = getsockname (servfd, (struct sockaddr *)&addr, &addrlen);
+  assert (val == 0);
+
+  val = sendto (fd, req, req_len, MSG_DONTWAIT | MSG_NOSIGNAL,
+      (struct sockaddr *)&addr, addrlen);
   assert (val >= 0);
 
   val = recv (servfd, buf, 1000, MSG_DONTWAIT);
@@@@ -348,10 +349,14 @@@@ static void responses (void)
   req_len = stun_usage_bind_create (&agent, &req_msg, req, sizeof(req));
   assert (req_len > 0);
 
-  val = send (fd, req, req_len, MSG_DONTWAIT | MSG_NOSIGNAL);
+  val = getsockname (servfd, (struct sockaddr *)&addr, &addrlen);
+  assert (val == 0);
+
+  val = sendto (fd, req, req_len, MSG_DONTWAIT | MSG_NOSIGNAL,
+      (struct sockaddr *)&addr, addrlen);
   assert (val >= 0);
 
-  val = recv (servfd, buf, 1000, MSG_DONTWAIT);
+  val = recvfrom (servfd, buf, 1000, MSG_DONTWAIT, NULL, 0);
   assert (val >= 0);
 
   assert (stun_agent_validate (&agent, &msg, buf, val, NULL, NULL)
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- stun/tests/test-bind.c.orig	Thu Aug 20 17:17:41 2009
+++ stun/tests/test-bind.c	Thu Aug 20 17:19:16 2009
d15 1
a15 3
@@@@ -60,6 +56,11 @@@@
 #include <sys/socket.h>
 #include <arpa/inet.h>
d17 2
a18 2
+#endif
+
d22 87
a108 1
 #endif
d110 1
a110 1
 #undef NDEBUG /* ensure assertions are built-in */
@


1.1.1.1
log
@import libnice 0.0.9

libnice is an implementation of the IETF's draft Interactice 
Connectivity Establishment standard (ICE). It provides GLib-based 
library, libnice and GStreamer elements.

ICE is useful for applications that want to establish peer-to-peer 
UDP data streams. It automates the process of traversing NATs and 
provides security against some attacks.

Existing standards that use ICE include Session Initiation Protocol
(SIP) and XMPP Jingle.

from tom (tdmurphy4@@gmail.com) with tweaks by me

@
text
@@
