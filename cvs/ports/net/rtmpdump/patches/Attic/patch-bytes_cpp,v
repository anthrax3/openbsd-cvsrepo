head	1.4;
access;
symbols
	sthen_20090417:1.1.1.1 sthen:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2009.05.26.14.13.22;	author sthen;	state dead;
branches;
next	1.3;

1.3
date	2009.04.29.01.39.16;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.29.00.51.23;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.17.17.56.50;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.04.17.17.56.50;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to 1.6 (rolling in several patches), and new MASTER_SITES.
@
text
@$OpenBSD: patch-bytes_cpp,v 1.3 2009/04/29 01:39:16 sthen Exp $

- unbreak strict alignment big-endian

--- bytes.cpp.orig     Fri Mar 20 11:32:48 2009
+++ bytes.cpp  Wed Apr 29 01:45:47 2009
@@@@ -58,7 +58,9 @@@@ double ReadNumber(const char *data)
 {
 #if __FLOAT_WORD_ORDER == __BYTE_ORDER
 #if __BYTE_ORDER == __BIG_ENDIAN
-	return *((double *)data);
+	double val;
+	memcpy(&val, data, sizeof(double));
+	return val;
 #elif __BYTE_ORDER == __LITTLE_ENDIAN
 	uint64_t in  = *((uint64_t*)data);
 	uint64_t res = __bswap_64(in);
@


1.3
log
@a chunk of diff can go, upstream took a slightly different version
of this big-endian fix that also works. bump package.
@
text
@d1 1
a1 1
$OpenBSD: patch-bytes_cpp,v 1.2 2009/04/29 00:51:23 sthen Exp $
@


1.2
log
@update to 1.5, based on a diff from David Cathcart, adds live stream
dumping and rtmpe.
@
text
@d1 1
a1 1
$OpenBSD: patch-bytes_cpp,v 1.1.1.1 2009/04/17 17:56:50 sthen Exp $
d3 1
a3 2
- unbreak all big-endian arch (first hunk)
- unbreak strict alignment big-endian (second hunk)
d5 2
a6 15
--- bytes.cpp.orig	Fri Mar 20 11:32:48 2009
+++ bytes.cpp	Wed Apr 29 01:45:47 2009
@@@@ -28,10 +28,10 @@@@ void WriteNumber(char *data, double dVal)
 	uint64_t res;
 
 #if __FLOAT_WORD_ORDER == __BYTE_ORDER
+        uint64_t in  = *((uint64_t*)&dVal);
 #if __BYTE_ORDER == __BIG_ENDIAN
-	res = *((uint64_t*)&dVal);
+	res = in;
 #elif __BYTE_ORDER == __LITTLE_ENDIAN
-        uint64_t in  = *((uint64_t*)&dVal);
         res = __bswap_64(in);
 #endif
 #else
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d6 3
a8 3
--- bytes.cpp.orig	Wed Mar 11 21:33:48 2009
+++ bytes.cpp	Fri Apr 17 18:43:52 2009
@@@@ -30,10 +30,10 @@@@ void WriteNumber(char *data, double dVal)
d14 1
a14 1
-	res = dVal;
d21 1
a21 1
@@@@ -60,7 +60,9 @@@@ double ReadNumber(const char *data)
@


1.1.1.1
log
@import rtmpdump, based on a ports@@ post from David Cathcart, with BE fixes
and tweaks by myself.

A small dumper for media content streamed over the RTMP protocol.
Supplying an rtmp url will result in a dumped flv file, which can be
played/transcoded using ffmpeg/mplayer, etc.
@
text
@@
