head	1.5;
access;
symbols
	OPENBSD_6_2:1.5.0.56
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.54
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.52
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.48
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.50
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.46
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.44
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.42
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.40
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.38
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.36
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.34
	OPENBSD_5_0:1.5.0.32
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.30
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.28
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.26
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.24
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.22
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.4.0.14
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.12
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.10
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	OPENBSD_2_9_TRACKING_SWITCH:1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	dugsong_1999-Jun-23:1.1.1.1
	dugsong:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2003.09.25.06.25.13;	author jolan;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.13.07.28.08;	author brad;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.14.14.50.13;	author dugsong;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.06.28.14.27.20;	author dugsong;	state Exp;
branches;
next	1.1;

1.1
date	99.06.23.04.16.21;	author dugsong;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.06.23.04.16.21;	author dugsong;	state Exp;
branches;
next	;

1.3.2.1
date	2000.09.15.05.09.54;	author marc;	state Exp;
branches;
next	;


desc
@@


1.5
log
@drop maintainership on some stuff i don't use anymore, lop off
WWW: ${HOMEPAGE} while touching 'em
@
text
@ngrep strives to provide most of GNU grep's common features,
applying them to the network layer. ngrep is a pcap-aware tool that
will allow you to specify extended regular expressions to match
against data payloads of packets. It currently recognizes TCP and
UDP across ethernet, ppp and slip interfaces, and understands bpf
filter logic in the same fashion as more common packet sniffing
tools, like tcpdump and snoop.
@


1.4
log
@upgrade to ngrep 1.38; from <obecian@@celerity.bartoli.org>
@
text
@a7 2

WWW: ${HOMEPAGE}
@


1.3
log
@fix port: update distfile, fake
@
text
@d1 7
d9 1
a9 8
  ngrep strives to provide most of GNU grep's common features,
  applying them to the network layer. ngrep is a pcap-aware tool that
  will allow you to specify extended regular expressions to match
  against data payloads of packets. It currently recognizes TCP and
  UDP across ethernet, ppp and slip interfaces, and understands bpf
  filter logic in the same fashion as more common packet sniffing
  tools, like tcpdump and snoop.  

@


1.3.2.1
log
@bring net as of cut-over date into 2.7 branch
@
text
@a0 7
ngrep strives to provide most of GNU grep's common features,
applying them to the network layer. ngrep is a pcap-aware tool that
will allow you to specify extended regular expressions to match
against data payloads of packets. It currently recognizes TCP and
UDP across ethernet, ppp and slip interfaces, and understands bpf
filter logic in the same fashion as more common packet sniffing
tools, like tcpdump and snoop.
d2 8
a9 1
WWW: ${HOMEPAGE}
@


1.2
log
@update to version 1.31
@
text
@a1 2
Description:

a8 63

  
Usage:

  ngrep <-hviwqe> <-n num> <-d dev> <-A num> <regex> <pcap filter logic>

  -h  is help/usage
  -v  is version information
  -i  is ignore case
  -w  is word-regex (expression must match as a word)
  -q  is be quiet
  -e  is show empty packets
  -n  is look at only num packets
  -d  is use a device different from the default (pcap)
  -A  is dump num packets after a match

  <regex>   is any extended regular expression (metachars are
            significant and don't have to be escaped)
  <filter>  is any pcap filter statement 


  As of v1.28, ngrep doesn't require a regex.  There are cases where
  it will be confused and think part of your bpf filter is the regex,
  as in:

  % ngrep not port 80
  interface: eth0 (192.233.133.0/255.255.255.0)
  filter: ip and ( port 80 )
  match: not

  In cases like this, you will need to specify a blank regex:

  % ngrep '' not port 80
  interface: eth0 (192.233.133.0/255.255.255.0)
  filter: ip and ( not port 80 )


Examples:

  o ngrep  -qd eth1  'HTTP'  tcp port 80

    Be quiet, look only at tcp packets with either source or dest port
    80 on interface eth1, look for anything matching 'HTTP'. 

  o ngrep  '(USER|PASS)'  tcp port 21

    Look only at tcp packets with either source or dest port 21, look
    for anything resembling an FTP login.

  o ngrep  -wi  '(user|pass)'  tcp port 21
  
    Look at tcp packets with either source or dest port 21, that match
    either 'user' or 'pass' (case insensitively) as a word. 

  o ngrep -wiA 2   '(user|pass)'  tcp port 21
  
    Alternatively, match either 'user' or 'pass' case insensitively,
    and dump the next 2 packets following (that match the bpf filter).

  o ngrep  -qd le0 port 53

    Watch all tcp and udp port 53 (nameserver) traffic on interface
    le0.  Be quiet.
@


1.1
log
@Initial revision
@
text
@a1 8
Program: ngrep 
Author: nocarrier <jpr5@@darkridge.com>

Goal: 

  A program that mimicks as much functionality in GNU grep as
  possible, applied at the network layer.

d4 7
a10 5
  ngrep stands for network grep, and is a pcap-aware tool that will
  allow you to specify extended regular expressions to match against
  the data payloads of packets, and currently recognizes TCP and UDP,
  and works on ethernet, ppp and slip interfaces.  Blank regexes
  assume '.*'.
d12 1
d15 1
a15 1
  ngrep <-hiwq> <-d dev> [regex] <filter>
d18 1
d22 2
d25 1
d27 1
a27 1
  [regex]   is any extended regular expression (metachars are
d31 17
d65 6
a70 1
  o ngrep  -qd le0  in-addr  port 53
d72 2
a73 2
    Look at all packets with either source or dest port 53 on
    interface le0, that match match 'in-addr'.  Be quiet.
@


1.1.1.1
log
@new ngrep port
@
text
@@
