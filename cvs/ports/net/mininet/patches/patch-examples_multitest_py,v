head     1.1;
branch   1.1.1;
access   ;
symbols  akoshibe_20170821:1.1.1.1 akoshibe:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2017.08.21.18.47.12;  author akoshibe;  state Exp;
branches 1.1.1.1;
next     ;
commitid        XUM07MlWkdhZnQC8;

1.1.1.1
date     2017.08.21.18.47.12;  author akoshibe;  state Exp;
branches ;
next     ;
commitid        XUM07MlWkdhZnQC8;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
KernelSwitch - OVS or if_switch
Index: examples/multitest.py
--- examples/multitest.py.orig
+++ examples/multitest.py
@@@@ -1,4 +1,4 @@@@
-#!/usr/bin/python
+#!/usr/bin/env python
 
 """
 This example shows how to create a network and run multiple tests.
@@@@ -8,7 +8,7 @@@@ For a more complicated test example, see udpbwtest.py.
 from mininet.cli import CLI
 from mininet.log import lg, info
 from mininet.net import Mininet
-from mininet.node import OVSKernelSwitch
+from mininet.node import KernelSwitch
 from mininet.topolib import TreeTopo
 
 def ifconfigTest( net ):
@@@@ -20,9 +20,9 @@@@ def ifconfigTest( net ):
 if __name__ == '__main__':
     lg.setLogLevel( 'info' )
     info( "*** Initializing Mininet and kernel modules\n" )
-    OVSKernelSwitch.setup()
+    KernelSwitch.setup()
     info( "*** Creating network\n" )
-    network = Mininet( TreeTopo( depth=2, fanout=2 ), switch=OVSKernelSwitch )
+    network = Mininet( TreeTopo( depth=2, fanout=2 ), switch=KernelSwitch )
     info( "*** Starting network\n" )
     network.start()
     info( "*** Running ping test\n" )
@


1.1.1.1
log
@Mininet creates a realistic virtual network, running real kernel, switch
and application code, on a single machine (VM, cloud or native), in
seconds, with a single command

Because you can easily interact with your network using the Mininet CLI
(and API), customize it, share it with others, or deploy it on real
hardware, Mininet is useful for development, teaching, and research.

This port is not connected to the build yet.

OK sthen@@ jasper@@ phessler@@

@
text
@@
