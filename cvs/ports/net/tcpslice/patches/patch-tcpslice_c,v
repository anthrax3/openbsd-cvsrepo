head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.10
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.3.0.30
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.28
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.26
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.24
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.22
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.20
	OPENBSD_5_0:1.3.0.18
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.16
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.14
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.1.0.20
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.18
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.16
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.14
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.12
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.10
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.8
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.6
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.4
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.2
	OPENBSD_3_0_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2014.10.13.22.06.25;	author nigel;	state Exp;
branches;
next	1.3;
commitid	1pLg8j2t7FAb0e7A;

1.3
date	2007.07.13.08.16.16;	author rui;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.02.14.45.10;	author sturm;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.18.15.12.40;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update project moved to github
Ok sthen, ajacoutot
@
text
@$OpenBSD: patch-tcpslice_c,v 1.3 2007/07/13 08:16:16 rui Exp $
--- tcpslice.c.orig	Mon Apr  7 14:09:35 2014
+++ tcpslice.c	Fri Oct 10 13:15:24 2014
@@@@ -99,7 +99,7 @@@@ extern size_t strlcpy(char *, const char *, size_t);
 struct state {
 	off_t	start_pos,	/* seek position corresponding to start time */
 		stop_pos;	/* seek position corresponding to stop time */
-	struct timeval
+	struct bpf_timeval
 		file_start_time,	/* time of first pkt in file */
 		file_stop_time,		/* time of last pkt in file */
 		last_pkt_time;		/* time of most recently read pkt */
@@@@ -123,18 +123,18 @@@@ enum stamp_styles timestamp_style = TIMESTAMP_RAW;
 
 
 int is_timestamp( char *str );
-struct timeval parse_time(char *time_string, struct timeval base_time);
+struct bpf_timeval parse_time(char *time_string, struct bpf_timeval base_time);
 void fill_tm(char *time_string, int is_delta, struct tm *t, time_t *usecs_addr);
-struct timeval lowest_start_time(struct state *states, int numfiles);
-struct timeval latest_end_time(struct state *states, int numfiles);
+struct bpf_timeval lowest_start_time(struct state *states, int numfiles);
+struct bpf_timeval latest_end_time(struct state *states, int numfiles);
 void get_next_packet(struct state *s);
 struct state *open_files(char *filenames[], int numfiles);
 static void extract_slice(struct state *states, int numfiles,
 			const char *write_file_name,
-			struct timeval *start_time, struct timeval *stop_time,
+			struct bpf_timeval *start_time, struct bpf_timeval *stop_time,
 			int keep_dups, int relative_time_merge,
-			struct timeval *base_time);
-char *timestamp_to_string(struct timeval *timestamp);
+			struct bpf_timeval *base_time);
+char *timestamp_to_string(struct bpf_timeval *timestamp);
 void dump_times(struct state *states, int numfiles);
 __dead void usage(void)__attribute__((volatile));
 
@@@@ -159,7 +159,7 @@@@ main(int argc, char **argv)
 	char *start_time_string = 0;
 	char *stop_time_string = 0;
 	const char *write_file_name = "-";	/* default is stdout */
-	struct timeval first_time, start_time, stop_time;
+	struct bpf_timeval first_time, start_time, stop_time;
 	char ebuf[PCAP_ERRBUF_SIZE];
 	struct state *states;
 
@@@@ -304,12 +304,12 @@@@ int is_timestamp( char *str )
  * containing the specified time.
  */
 
-struct timeval
-parse_time(char *time_string, struct timeval base_time)
+struct bpf_timeval
+parse_time(char *time_string, struct bpf_timeval base_time)
 {
 	struct tm *bt = localtime((time_t *) &base_time.tv_sec);
 	struct tm t;
-	struct timeval result;
+	struct bpf_timeval result;
 	time_t usecs = 0;
 	int is_delta = (time_string[0] == '+');
 
@@@@ -483,10 +483,10 @@@@ fill_tm(char *time_string, int is_delta, struct tm *t,
 
 
 /* Of all the files, what is the lowest start time. */
-struct timeval
+struct bpf_timeval
 lowest_start_time(struct state *states, int numfiles)
 {
-	struct timeval min_time = states->file_start_time;
+	struct bpf_timeval min_time = states->file_start_time;
 
 	while (numfiles--) {
 		if (sf_timestamp_less_than(&states->file_start_time, &min_time)) {
@@@@ -498,10 +498,10 @@@@ lowest_start_time(struct state *states, int numfiles)
 }
 
 /* Of all the files, what is the latest end time. */
-struct timeval
+struct bpf_timeval
 latest_end_time(struct state *states, int numfiles)
 {
-	struct timeval max_time = states->file_start_time;
+	struct bpf_timeval max_time = states->file_start_time;
 
 	while (numfiles--) {
 		if (sf_timestamp_less_than(&max_time, &states->file_stop_time)) {
@@@@ -597,12 +597,12 @@@@ open_files(char *filenames[], int numfiles)
 
 void
 extract_slice(struct state *states, int numfiles, const char *write_file_name,
-		struct timeval *start_time, struct timeval *stop_time,
+		struct bpf_timeval *start_time, struct bpf_timeval *stop_time,
 		int keep_dups, int relative_time_merge,
-		struct timeval *base_time)
+		struct bpf_timeval *base_time)
 {
 	struct state *s, *min_state;
-	struct timeval temp1, temp2, relative_start, relative_stop;
+	struct bpf_timeval temp1, temp2, relative_start, relative_stop;
 	int i;
 
 	struct state *last_state;	/* remember the last packet */
@@@@ -772,7 +772,7 @@@@ extract_slice(struct state *states, int numfiles, cons
  */
 
 char *
-timestamp_to_string(struct timeval *timestamp)
+timestamp_to_string(struct bpf_timeval *timestamp)
 {
 	struct tm *t;
 #define NUM_BUFFERS 2
@


1.3
log
@update tcpslice to 20070709

help and ok aanriot@@
@
text
@d1 4
a4 4
$OpenBSD$
--- tcpslice.c.orig	Thu May 31 19:18:59 2007
+++ tcpslice.c	Thu May 31 19:20:16 2007
@@@@ -101,7 +101,7 @@@@ extern size_t strlcpy(char *, const char *, size_t);
d13 1
a13 1
@@@@ -125,18 +125,18 @@@@ enum stamp_styles timestamp_style = TIMESTAMP_RAW;
d38 1
a38 1
@@@@ -161,7 +161,7 @@@@ main(int argc, char **argv)
d47 1
a47 1
@@@@ -306,12 +306,12 @@@@ int is_timestamp( char *str )
d63 1
a63 1
@@@@ -485,10 +485,10 @@@@ fill_tm(char *time_string, int is_delta, struct tm *t,
d76 1
a76 1
@@@@ -500,10 +500,10 @@@@ lowest_start_time(struct state *states, int numfiles)
d89 1
a89 1
@@@@ -599,12 +599,12 @@@@ open_files(char *filenames[], int numfiles)
d105 1
a105 1
@@@@ -774,7 +774,7 @@@@ extract_slice(struct state *states, int numfiles, cons
@


1.2
log
@update to tcpslice 1.2a3

from new maintainer Rui Reis <rui@@rui.cx>
old maintainer timeout
@
text
@d2 3
a4 3
--- tcpslice.c.orig	Tue Oct 25 00:06:26 2005
+++ tcpslice.c	Sun Apr  2 13:24:33 2006
@@@@ -84,7 +84,7 @@@@ static const char rcsid[] =
d11 3
a13 3
 		file_stop_time;		/* time of last pkt in file */
 	pcap_t	*p;
@@@@ -107,19 +107,19 @@@@ enum stamp_styles timestamp_style = TIME
a19 3
 void get_file_range( char filename[], pcap_t **p,
-			struct timeval *first_time, struct timeval *last_time );
-struct timeval first_packet_time(char filename[], pcap_t **p_addr);
d21 1
a21 2
+			struct bpf_timeval *first_time, struct bpf_timeval *last_time );
+struct bpf_timeval first_packet_time(char filename[], pcap_t **p_addr);
d23 1
d26 2
a27 1
 void extract_slice(struct state *states, int numfiles, char *write_file_name,
d35 1
a35 1
 void dump_times(pcap_t **p, char filename[]);
d38 1
a38 1
@@@@ -144,7 +144,7 @@@@ main(int argc, char **argv)
d41 1
a41 1
 	char *write_file_name = "-";	/* default is stdout */
a43 1
 	pcap_t *pcap;
d46 2
a47 1
@@@@ -280,15 +280,19 @@@@ int is_timestamp( char *str )
a59 1
+	time_t secs;
d63 1
a63 5
+	secs = base_time.tv_sec;
+	bt = localtime(&secs);
+
 	if ( is_delta )
 		++time_string;	/* skip over '+' sign */
a64 12
@@@@ -472,7 +476,7 @@@@ fill_tm(char *time_string, int is_delta,
  */
 void
 get_file_range( char filename[], pcap_t **p,
-		struct timeval *first_time, struct timeval *last_time )
+		struct bpf_timeval *first_time, struct bpf_timeval *last_time )
 {
 	*first_time = first_packet_time( filename, p );
 
@@@@ -485,7 +489,7 @@@@ get_file_range( char filename[], pcap_t 
  * reading.
  */
d66 1
d69 1
a69 1
 first_packet_time(char filename[], pcap_t **p_addr)
d71 2
a72 2
 	struct pcap_pkthdr hdr;
@@@@ -504,10 +508,10 @@@@ first_packet_time(char filename[], pcap_
d74 4
d79 1
a79 1
 /* Of all the files, what is the lowest start time. */
d82 1
a82 1
 lowest_start_time(struct state *states, int numfiles)
d84 2
a85 2
-	struct timeval min_time = states->file_start_time;
+	struct bpf_timeval min_time = states->file_start_time;
d88 2
a89 2
 		if (sf_timestamp_less_than(&states->file_start_time, &min_time)) {
@@@@ -590,13 +594,13 @@@@ open_files(char *filenames[], int numfil
d92 1
a92 1
 extract_slice(struct state *states, int numfiles, char *write_file_name,
a99 1
 	pcap_dumper_t *dumper;
d105 1
a105 1
@@@@ -747,7 +751,7 @@@@ extract_slice(struct state *states, int 
a113 9
@@@@ -793,7 +797,7 @@@@ timestamp_to_string(struct timeval *time
 void
 dump_times(pcap_t **p, char filename[])
 {
-	struct timeval first_time, last_time;
+	struct bpf_timeval first_time, last_time;
 
 	get_file_range( filename, p, &first_time, &last_time );
 
@


1.1
log
@deal with the timeval -> bpf_timeval change
testing by pvalchev@@, wilfried@@
@
text
@d2 12
a13 3
--- tcpslice.c.orig	Fri Oct 12 18:24:23 2001
+++ tcpslice.c	Fri Oct 12 18:28:45 2001
@@@@ -71,14 +71,14 @@@@ enum stamp_styles timestamp_style = TIME
d23 1
d26 8
a33 2
 void extract_slice(char filename[], char write_file_name[],
-			struct timeval *start_time, struct timeval *stop_time);
d35 1
a35 1
+			struct bpf_timeval *start_time, struct bpf_timeval *stop_time);
d40 1
a40 1
@@@@ -98,7 +98,7 @@@@ main(int argc, char **argv)
d48 2
a49 2
 
@@@@ -223,15 +223,19 @@@@ int is_timestamp( char *str )
d58 1
a58 2
-	struct tm *bt = localtime((time_t *) &base_time.tv_sec);
+	struct tm *bt;
d72 1
a72 1
@@@@ -412,7 +416,7 @@@@ fill_tm(char *time_string, int is_delta,
d81 1
a81 1
@@@@ -427,7 +431,7 @@@@ int snaplen;
d90 14
a103 1
@@@@ -457,10 +461,10 @@@@ first_packet_time(char filename[], pcap_
d106 12
a117 17
 extract_slice(char filename[], char write_file_name[],
-		struct timeval *start_time, struct timeval *stop_time)
+		struct bpf_timeval *start_time, struct bpf_timeval *stop_time)
 {
 	off_t start_pos, stop_pos;
-	struct timeval file_start_time, file_stop_time;
+	struct bpf_timeval file_start_time, file_stop_time;
 	struct pcap_pkthdr hdr;
 	pcap_t *p;
 	char errbuf[PCAP_ERRBUF_SIZE];
@@@@ -511,7 +515,7 @@@@ extract_slice(char filename[], char writ
 
 	for ( ; ; )
 		{
-		struct timeval *timestamp;
+		struct bpf_timeval *timestamp;
 		const u_char *pkt = pcap_next( p, &hdr );
d119 2
a120 2
 		if ( pkt == 0 )
@@@@ -554,7 +558,7 @@@@ extract_slice(char filename[], char writ
d129 1
a129 1
@@@@ -599,7 +603,7 @@@@ timestamp_to_string(struct timeval *time
@

