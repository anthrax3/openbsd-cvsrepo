head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.6
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.8
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.18
	OPENBSD_5_0:1.2.0.16
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.14
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.12
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.10
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.8
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.6
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.4
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.1.0.4
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.2
	OPENBSD_4_1_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2014.04.15.16.12.21;	author naddy;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.11.18.39.13;	author sthen;	state dead;
branches;
next	1.2;

1.2
date	2007.10.25.18.57.32;	author steven;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.22.05.56.25;	author pvalchev;	state Exp;
branches;
next	;


desc
@@


1.4
log
@switch from ancient libdes API to OpenSSL's DES_; ok benoit@@
@
text
@$OpenBSD$
--- bin/afppasswd/afppasswd.c.orig	Tue Jul 23 11:10:55 2013
+++ bin/afppasswd/afppasswd.c	Tue Apr 15 16:24:33 2014
@@@@ -70,7 +70,7 @@@@ static char buf[MAXPATHLEN + 1];
 static void convert_passwd(char *buf, char *newpwd, const int keyfd)
 {
   u_int8_t key[HEXPASSWDLEN];
-  Key_schedule schedule;
+  DES_key_schedule schedule;
   unsigned int i, j;
 
   if (!newpwd) {
@@@@ -89,14 +89,14 @@@@ static void convert_passwd(char *buf, char *newpwd, co
       key[j] = (unhex(key[i]) << 4) | unhex(key[i + 1]);
     if (j <= DES_KEY_SZ)
       memset(key + j, 0, sizeof(key) - j);
-    key_sched((C_Block *) key, schedule);
+    DES_key_sched((DES_cblock *) key, &schedule);
     memset(key, 0, sizeof(key));   
     if (newpwd) {
-	ecb_encrypt((C_Block *) newpwd, (C_Block *) newpwd, schedule,
+	DES_ecb_encrypt((DES_cblock *) newpwd, (DES_cblock *) newpwd, &schedule,
 		    DES_ENCRYPT);
     } else {
       /* decrypt the password */
-      ecb_encrypt((C_Block *) buf, (C_Block *) buf, schedule, DES_DECRYPT);
+      DES_ecb_encrypt((DES_cblock *) buf, (DES_cblock *) buf, &schedule, DES_DECRYPT);
     }
     memset(&schedule, 0, sizeof(schedule));      
   }
@


1.3
log
@update to netatalk 2.2.2, from Brad, tested by william@@ and Ian McWilliam
- support for MacOS X Lion and TimeMachine
- add rc scripts
@
text
@d1 5
a5 77
$OpenBSD: patch-bin_afppasswd_afppasswd_c,v 1.2 2007/10/25 18:57:32 steven Exp $
--- bin/afppasswd/afppasswd.c.orig	Thu Feb 10 02:23:07 2005
+++ bin/afppasswd/afppasswd.c	Thu Oct 25 20:30:05 2007
@@@@ -64,7 +64,7 @@@@
 #define HEXPASSWDLEN 16
 #define PASSWDLEN 8
 
-static char buf[MAXPATHLEN + 1];
+static char buf[MAXPATHLEN];
 
 /* if newpwd is null, convert buf from hex to binary. if newpwd isn't
  * null, convert newpwd to hex and save it in buf. */
@@@@ -117,7 +117,7 @@@@ static void convert_passwd(char *buf, char *newpwd, co
 /* this matches the code in uam_randnum.c */
 static int update_passwd(const char *path, const char *name, int flags)
 {
-  char password[PASSWDLEN + 1], *p, *passwd;
+  char password[PASSWDLEN], *p, *passwd;
   FILE *fp;
   off_t pos;
   int keyfd = -1, err = 0;
@@@@ -128,9 +128,9 @@@@ static int update_passwd(const char *path, const char 
   }
 
   /* open the key file if it exists */
-  strcpy(buf, path);
+  strlcpy(buf, path, sizeof(buf));
   if (strlen(path) < sizeof(buf) - 5) {
-    strcat(buf, ".key");
+    strlcat(buf, ".key", sizeof(buf));
     keyfd = open(buf, O_RDONLY);
   } 
 
@@@@ -154,8 +154,8 @@@@ static int update_passwd(const char *path, const char 
   }
 
   if (flags & OPT_ADDUSER) {
-    strcpy(buf, name);
-    strcat(buf, FORMAT);
+    strlcpy(buf, name, sizeof(buf));
+    strlcat(buf, FORMAT, sizeof(buf));
     p = strchr(buf, ':') + 1;
     fwrite(buf, strlen(buf), 1, fp);
   } else {
@@@@ -239,8 +239,8 @@@@ static int create_file(const char *path, uid_t minuid)
     /* a little paranoia */
     if (strlen(pwd->pw_name) + FORMAT_LEN > sizeof(buf) - 1)
       continue;
-    strcpy(buf, pwd->pw_name);
-    strcat(buf, FORMAT);
+    strlcpy(buf, pwd->pw_name, sizeof(buf));
+    strlcat(buf, FORMAT, sizeof(buf));
     len = strlen(buf);
     if (write(fd, buf, len) != len) {
       fprintf(stderr, "afppasswd: problem writing to %s: %s\n", path,
@@@@ -255,6 +255,22 @@@@ static int create_file(const char *path, uid_t minuid)
   return err;
 }
 
+void usage(void) {
+#ifdef USE_CRACKLIB
+    fprintf(stderr, "Usage: afppasswd [-acfn] [-u minuid] [-p path] [username]\n");
+#else /* USE_CRACKLIB */
+    fprintf(stderr, "Usage: afppasswd [-acf] [-u minuid] [-p path] [username]\n");
+#endif /* USE_CRACKLIB */
+    fprintf(stderr, "  -a        add a new user\n");
+    fprintf(stderr, "  -c        create and initialize password file or specific user\n");
+    fprintf(stderr, "  -f        force an action\n");
+#ifdef USE_CRACKLIB
+    fprintf(stderr, "  -n        disable cracklib checking of passwords\n");
+#endif /* USE_CRACKLIB */
+    fprintf(stderr, "  -u uid    minimum uid to use, defaults to 100\n");
+    fprintf(stderr, "  -p path   path to afppasswd file\n");
+    exit(-1);
+}
 
 int main(int argc, char **argv)
d7 23
a29 15
@@@@ -270,16 +286,7 @@@@ int main(int argc, char **argv)
   flags = ((uid = getuid()) == 0) ? OPT_ISROOT : 0;
 
   if (((flags & OPT_ISROOT) == 0) && (argc > 1)) {
-    fprintf(stderr, "Usage: afppasswd [-acfn] [-u minuid] [-p path] [username]\n");
-    fprintf(stderr, "  -a        add a new user\n");
-    fprintf(stderr, "  -c        create and initialize password file or specific user\n");
-    fprintf(stderr, "  -f        force an action\n");
-#ifdef USE_CRACKLIB
-    fprintf(stderr, "  -n        disable cracklib checking of passwords\n");
-#endif /* USE_CRACKLIB */
-    fprintf(stderr, "  -u uid    minimum uid to use, defaults to 100\n");
-    fprintf(stderr, "  -p path   path to afppasswd file\n");
-    return -1;
+	  usage();
a30 24
 
   while ((i = getopt(argc, argv, OPTIONS)) != EOF) {
@@@@ -312,20 +319,7 @@@@ int main(int argc, char **argv)
   
   if (err || (optind + ((flags & OPT_CREATE) ? 0 : 
 			(flags & OPT_ISROOT)) != argc)) {
-#ifdef USE_CRACKLIB
-    fprintf(stderr, "Usage: afppasswd [-acfn] [-u minuid] [-p path] [username]\n");
-#else /* USE_CRACKLIB */
-    fprintf(stderr, "Usage: afppasswd [-acf] [-u minuid] [-p path] [username]\n");
-#endif /* USE_CRACKLIB */
-    fprintf(stderr, "  -a        add a new user\n");
-    fprintf(stderr, "  -c        create and initialize password file or specific user\n");
-    fprintf(stderr, "  -f        force an action\n");
-#ifdef USE_CRACKLIB
-    fprintf(stderr, "  -n        disable cracklib checking of passwords\n");
-#endif /* USE_CRACKLIB */
-    fprintf(stderr, "  -u uid    minimum uid to use, defaults to 100\n");
-    fprintf(stderr, "  -p path   path to afppasswd file\n");
-    return -1;
+	  usage();
   }
 
   i = stat(path, &st);
@


1.2
log
@regen patches
@
text
@d1 1
a1 1
$OpenBSD: patch-bin_afppasswd_afppasswd_c,v 1.1 2006/09/22 05:56:25 pvalchev Exp $
@


1.1
log
@Update to netatalk-2.0.3 and get rid of old directory structure.
A long due update with important features such as long filenames,
unicode, etc.
From new maintainer "Arnaud Bergeron" <abergeron@@gmail.com>
@
text
@d1 3
a3 3
$OpenBSD$
--- bin/afppasswd/afppasswd.c.orig	Wed Feb  9 20:23:07 2005
+++ bin/afppasswd/afppasswd.c	Fri Dec 30 22:25:07 2005
d13 1
a13 1
@@@@ -117,7 +117,7 @@@@ static void convert_passwd(char *buf, ch
d22 1
a22 1
@@@@ -128,9 +128,9 @@@@ static int update_passwd(const char *pat
d34 1
a34 1
@@@@ -154,8 +154,8 @@@@ static int update_passwd(const char *pat
d45 1
a45 1
@@@@ -239,8 +239,8 @@@@ static int create_file(const char *path,
d56 1
a56 1
@@@@ -255,6 +255,22 @@@@ static int create_file(const char *path,
@

