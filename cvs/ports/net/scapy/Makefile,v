head	1.24;
access;
symbols
	OPENBSD_6_1:1.24.0.2
	OPENBSD_6_1_BASE:1.24
	OPENBSD_6_0:1.21.0.4
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.2
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.20.0.6
	OPENBSD_5_8_BASE:1.20
	OPENBSD_5_7:1.20.0.2
	OPENBSD_5_7_BASE:1.20
	OPENBSD_5_6:1.19.0.6
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.19.0.4
	OPENBSD_5_5_BASE:1.19
	OPENBSD_5_4:1.19.0.2
	OPENBSD_5_4_BASE:1.19
	OPENBSD_5_3:1.18.0.6
	OPENBSD_5_3_BASE:1.18
	OPENBSD_5_2:1.18.0.4
	OPENBSD_5_2_BASE:1.18
	OPENBSD_5_1_BASE:1.18
	OPENBSD_5_1:1.18.0.2
	OPENBSD_5_0:1.16.0.2
	OPENBSD_5_0_BASE:1.16
	OPENBSD_4_9:1.15.0.2
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.9.0.2
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.8.0.4
	OPENBSD_4_5_BASE:1.8
	OPENBSD_4_4:1.8.0.2
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.7.0.2
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.5.0.2
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	alek_20060419:1.1.1.1
	alek:1.1.1;
locks; strict;
comment	@# @;


1.24
date	2016.12.09.16.40.11;	author bluhm;	state Exp;
branches;
next	1.23;
commitid	iFg48fUcJyxZ0TTG;

1.23
date	2016.11.24.12.40.49;	author bluhm;	state Exp;
branches;
next	1.22;
commitid	sewSnamZBYwOetFR;

1.22
date	2016.11.14.20.04.56;	author danj;	state Exp;
branches;
next	1.21;
commitid	es91ZvD6iX1X8HaM;

1.21
date	2016.01.31.23.21.37;	author sthen;	state Exp;
branches;
next	1.20;
commitid	wpSH0OBFo4M2FAva;

1.20
date	2015.02.16.22.57.11;	author naddy;	state Exp;
branches;
next	1.19;
commitid	0dx3c9ckf7dE4tx1;

1.19
date	2013.03.11.11.35.56;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2012.01.12.03.16.24;	author bluhm;	state Exp;
branches;
next	1.17;

1.17
date	2011.09.16.11.13.40;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2011.06.08.18.00.50;	author jasper;	state Exp;
branches;
next	1.15;

1.15
date	2010.11.19.22.31.38;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2010.10.18.18.36.57;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2010.10.05.09.18.05;	author armani;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.30.21.21.54;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.01.16.42.12;	author sthen;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.01.16.28.49;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2009.03.28.16.23.54;	author naddy;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.12.12.46.05;	author wcmaier;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.08.08.22.42;	author steven;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.15.22.36.59;	author merdely;	state Exp;
branches;
next	1.5;

1.5
date	2007.05.15.21.40.01;	author martynas;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.08.12.47.06;	author aanriot;	state Exp;
branches;
next	1.3;

1.3
date	2007.05.05.14.23.18;	author claudio;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.03.09.43.03;	author alek;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.19.17.36.58;	author alek;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.04.19.17.36.58;	author alek;	state Exp;
branches;
next	;


desc
@@


1.24
log
@Allow to switch the interface to promiscuous mode during sndrcv().
Call the sr...() functions with parameter promisc=1 for that.  This
is needed for the src/sys/netinet/arp regress test and was backported
from secdev/scapy master at github.
OK danj@@ (maintainer)
@
text
@# $OpenBSD: Makefile,v 1.23 2016/11/24 12:40:49 bluhm Exp $

COMMENT=	powerful interactive packet manipulation in python

MODPY_EGG_VERSION=	2.3.3
DISTNAME=		scapy-${MODPY_EGG_VERSION}
REVISION =		1

CATEGORIES=		net

HOMEPAGE=	http://secdev.org/projects/scapy/

MAINTAINER=	Daniel Jakots <obsd@@chown.me>

# GPLv2
PERMIT_PACKAGE_CDROM=	Yes

MASTER_SITES0=	https://spacehopper.org/mirrors/
DISTFILES=	${DISTNAME}.tgz ethertypes-20120703:0
EXTRACT_ONLY=	${DISTNAME}${EXTRACT_SUFX}
EXTRACT_SUFX=	.tgz

MODULES=	lang/python

MODPY_PI=		Yes
MODPY_SETUPTOOLS=	Yes

RUN_DEPENDS=	net/libdnet,-python \
		net/py-libpcap \
		security/py-crypto \
		security/py-ecdsa
TEST_DEPENDS=${RUN_DEPENDS}

PKG_ARCH=	*

post-extract:
	gunzip ${WRKSRC}/doc/scapy.1.gz

pre-configure:
	sed -i "s,/etc/ethertypes,${SYSCONFDIR}/ethertypes,g" \
		${WRKSRC}/scapy/data.py

post-install:
	${INSTALL_DATA_DIR} ${PREFIX}/share/examples/scapy
	${INSTALL_DATA} ${DISTDIR}/ethertypes-20120703 \
		${PREFIX}/share/examples/scapy/ethertypes

# some tests require root.
do-test:
	ln -fs ${MODPY_BIN} ${WRKDIR}/bin/python
	cd ${WRKSRC}/test; PATH=${WRKDIR}/bin:${PATH} ${WRKSRC}/test/run_tests

.include <bsd.port.mk>
@


1.23
log
@Put back an OpenBSD special code path that was lost in the scapy
2.3.3 update.  Sniff the packets in sndrcv() like it is done on
FreeBSD and Darwin.  Without this patch, everything worked with
virtual qemu.  But on real ethernet hardware sr() sends TCP packets
to the broadcast MAC address as scapy did not see the ARP reply to
figure out the correct MAC address.
OK danj@@ (maintainer)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.22 2016/11/14 20:04:56 danj Exp $
d7 1
a7 1
REVISION =		0
@


1.22
log
@Update to scapy-2.3.3 and take maintainership (no objection from
previous maintainer armani@@)

tested by bluhm@@
previous diff ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.21 2016/01/31 23:21:37 sthen Exp $
d7 1
d45 2
a46 1
	${INSTALL_DATA} ${DISTDIR}/ethertypes-20120703 ${PREFIX}/share/examples/scapy/ethertypes
@


1.21
log
@update to scapy-2.3.2, from Daniel Jakots, earlier version ok armani@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.20 2015/02/16 22:57:11 naddy Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	2.3.2
a7 4
GH_ACCOUNT=		secdev
GH_PROJECT=		scapy
GH_TAGNAME=		v${MODPY_EGG_VERSION}

d12 1
a12 1
MAINTAINER=	Jonathan Armani <armani@@openbsd.org>
d18 1
a18 1
DISTFILES=	${DISTNAME}.tar.gz ethertypes-20120703:0
d20 1
d23 4
d30 1
a30 1
		math/py-gnuplot
@


1.20
log
@Drop USE_GROFF from ports where the formatting differences are acceptable
or mandoc provides the more useful output.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.19 2013/03/11 11:35:56 espie Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	2.1.0
d7 4
a10 1
REVISION=		2
d21 2
a22 2
MASTER_SITES=	${HOMEPAGE}/files/
DISTFILES=	${DISTNAME}${EXTRACT_SUFX} ethertypes
d38 1
a38 1
	perl -p -i -e "s,/etc/ethertypes,${SYSCONFDIR}/ethertypes,g" \
d43 1
a43 1
	${INSTALL_DATA} ${DISTDIR}/ethertypes ${PREFIX}/share/examples/scapy
@


1.19
log
@PERMIT_* / REGRESS->TEST sweep
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.18 2012/01/12 03:16:24 bluhm Exp $
a20 1
USE_GROFF =	Yes
@


1.18
log
@Scapy did not handle the DLT_LOOP type that is used when sniffing
from OpenBSD loopback device.  Add a new layer for that.
ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.17 2011/09/16 11:13:40 espie Exp $
a16 3
PERMIT_PACKAGE_FTP=	Yes
PERMIT_DISTFILES_CDROM=	Yes
PERMIT_DISTFILES_FTP=	Yes
d28 1
a28 1
REGRESS_DEPENDS=${RUN_DEPENDS}
d44 1
a44 1
do-regress:
@


1.17
log
@normalize pkgpath
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.16 2011/06/08 18:00:50 jasper Exp $
d7 1
a7 1
REVISION=		1
@


1.16
log
@bump after default python version switch
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.15 2010/11/19 22:31:38 espie Exp $
d7 1
a7 1
REVISION=		0
@


1.15
log
@new depends
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2010/10/18 18:36:57 espie Exp $
d7 1
@


1.14
log
@USE_GROFF=Yes
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2010/10/05 09:18:05 armani Exp $
d26 4
a29 4
RUN_DEPENDS=	:py-libdnet-*:net/libdnet,-python \
		:py-libpcap-*:net/py-libpcap \
		:py-crypto-*:security/py-crypto \
		:py-gnuplot-*:math/py-gnuplot
@


1.13
log
@Update to 2.1.0, change my email address and integrate 2 patches from
Laurent Ghigonis, one to properly detect the mac address and the other to close
the bpf after use (You don't need to create 40 bpf anymore), thanks !

ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2010/08/30 21:21:54 sthen Exp $
d23 1
@


1.12
log
@bumps for new python
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.11 2009/10/01 16:42:12 sthen Exp $
d5 1
a5 1
MODPY_EGG_VERSION=	2.0.1
d7 1
a7 1
REVISION=		0
d12 1
a12 1
MAINTAINER=	Jonathan Armani <dbd@@asystant.net>
d44 1
a44 2
# some tests require root. you may also need to increase
# the number of bpf device nodes (/dev/bpf*) to ~40.
@


1.11
log
@Add a comment about the regression tests.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2009/10/01 16:28:49 sthen Exp $
d7 1
@


1.10
log
@Update scapy to 2.0.1 from new maintainer Jonathan Armani with a little
help from me. The IPv6 features provided by scapy6 are integrated (still
some problems with them, but working well enough) so pkgpath/conflict
markers are set to replace an existing scapy6 installation.

ok wcmaier@@ "if it works go for it" claudio@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2009/03/28 16:23:54 naddy Exp $
d43 2
@


1.9
log
@bump for python dependency change
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2008/06/12 12:46:05 wcmaier Exp $
d5 3
a7 3
DISTNAME=	scapy-1.1.1
PKGNAME=	${DISTNAME}p3
CATEGORIES=	net
d11 2
a23 1

d28 1
a30 1
NO_REGRESS=	Yes
d32 4
a35 3
do-build:
	perl -p -i -e "s,^(\#\S+ \S+ )python\$$,#!${MODPY_BIN}," \
		${WRKSRC}/*.py
d37 1
a37 1
		${WRKSRC}/*.py
d39 1
a39 5
do-install:
	${INSTALL_DATA_DIR} ${WRKINST}${MODPY_SITEPKG}
	${INSTALL_SCRIPT} ${WRKSRC}/scapy.py ${WRKINST}${MODPY_SITEPKG}
	ln -s ${MODPY_SITEPKG}/scapy.py ${PREFIX}/bin/scapy
	${INSTALL_MAN} ${WRKBUILD}/scapy.1 ${PREFIX}/man/man1
d42 4
@


1.8
log
@Sync scapy with route(8) output now that we support priorities.

Initial report and testing from Tim Donahue <tdonahue at vonsystems
dot com> (and subsequent poke from sthen); thanks!

ok sthen@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2007/10/08 08:22:42 steven Exp $
d6 1
a6 1
PKGNAME=	${DISTNAME}p2
@


1.7
log
@bump PKGNAME after python version switch
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2007/09/15 22:36:59 merdely Exp $
d6 1
a6 1
PKGNAME=	${DISTNAME}p1
@


1.6
log
@Remove surrounding quotes in COMMENT*/PERMIT_*/BROKEN/ERRORS

Add $OpenBSD$ to p5-SNMP-Info/Makefile (ok kili@@, simon@@)
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2007/05/15 21:40:01 martynas Exp $
d6 1
a6 1
PKGNAME=	${DISTNAME}p0
@


1.5
log
@.tar.gz is the default so remove the line; ok steven@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2007/05/08 12:47:06 aanriot Exp $
d3 1
a3 1
COMMENT=	"powerful interactive packet manipulation in python"
@


1.4
log
@fix an example in the manpage.

from debian;
inputs jmc@@, "looks good" claudio@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2007/05/05 14:23:18 claudio Exp $
a19 1
EXTRACT_SUFX=	.tar.gz
@


1.3
log
@Update scapy to 1.1.1 and add some patches needed to make it more reliable.
OK jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2006/06/03 09:43:03 alek Exp $
d6 1
@


1.2
log
@Bump PKGNAMEs after recent python switch
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2006/04/19 17:36:58 alek Exp $
d5 1
a5 2
DISTNAME=	scapy-1.0.4
PKGNAME=	${DISTNAME}p0
a31 1
	gunzip < ${WRKSRC}/scapy.1.gz > ${WRKBUILD}/scapy.1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d6 1
@


1.1.1.1
log
@Import scapy 1.0.4

Scapy is a powerful interactive packet manipulation program. It is
able to forge or decode packets of a wide number of protocols, send
them on the wire, capture them, match requests and replies, and much
more. It can easily handle most classical tasks like scanning,
tracerouting, probing, unit tests, attacks or network discovery (it
can replace hping, 85% of nmap, arpspoof, arp-sk, arping, tcpdump,
tethereal, p0f, etc.). It also performs very well at a lot of other
specific tasks that most other tools can't handle, like sending
invalid frames, injecting your own 802.11 frames, combining technics
(VLAN hopping+ARP cache poisoning, VOIP decoding on WEP encrypted
channel, ...), etc.

from uwe@@
@
text
@@
