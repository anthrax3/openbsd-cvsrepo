head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.24
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.22
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.20
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.16
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.18
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.14
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.12
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.10
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.8
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.6
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.4
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2012.01.12.03.16.24;	author bluhm;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Scapy did not handle the DLT_LOOP type that is used when sniffing
from OpenBSD loopback device.  Add a new layer for that.
ok sthen@@
@
text
@$OpenBSD$
Add layer for sniffing on OpenBSD loopback device.
http://trac.secdev.org/scapy/ticket/485

--- scapy/layers/loop.py.orig	Wed Jan 11 23:58:04 2012
+++ scapy/layers/loop.py	Thu Jan 12 00:12:21 2012
@@@@ -0,0 +1,31 @@@@
+## This file is part of Scapy
+## See http://www.secdev.org/projects/scapy for more informations
+## Copyright (C) Alexander Bluhm <alexander.bluhm@@gmx.net>
+## Copyright (C) Philippe Biondi <phil@@secdev.org>
+## This program is published under a GPLv2 license
+
+import scapy.arch
+from scapy.packet import *
+from scapy.fields import *
+from scapy.layers.inet import IP
+if conf.ipv6_enabled:
+    from scapy.layers.inet6 import IPv6
+from scapy.config import conf
+
+class Loop(Packet):
+    name = "Loop"
+    # from OpenBSD src/sys/net/if_loop.c
+    fields_desc = [ IntEnumField("addrfamily", 2, { socket.AF_INET: "IPv4",
+                                                    socket.AF_INET6: "IPv6" }),
+                    ]
+    def mysummary(self):
+        return self.sprintf("%Loop.addrfamily%")
+
+bind_layers(Loop, IP, addrfamily=socket.AF_INET)
+if conf.ipv6_enabled:
+    bind_layers(Loop, IPv6, addrfamily=socket.AF_INET6)
+
+if scapy.arch.OPENBSD:
+    conf.l2types.register(12, Loop)
+else:
+    conf.l2types.register(108, Loop)
@
