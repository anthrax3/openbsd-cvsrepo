head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.0.4
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2016.11.14.20.04.56;	author danj;	state dead;
branches;
next	1.1;
commitid	es91ZvD6iX1X8HaM;

1.1
date	2016.01.31.23.21.37;	author sthen;	state Exp;
branches;
next	;
commitid	wpSH0OBFo4M2FAva;


desc
@@


1.2
log
@Update to scapy-2.3.3 and take maintainership (no objection from
previous maintainer armani@@)

tested by bluhm@@
previous diff ok sthen@@
@
text
@$OpenBSD: patch-test_regression_uts,v 1.1 2016/01/31 23:21:37 sthen Exp $

Backported from upstream
https://github.com/secdev/scapy/commit/ce89fee4ddcf5156b72074aede6a04e58b10dc5e

--- test/regression.uts.orig	Fri Jan 15 14:10:59 2016
+++ test/regression.uts	Sun Jan 24 10:15:57 2016
@@@@ -754,12 +754,12 @@@@ class ATMT1(Automaton):
 = Simple automaton Tests
 ~ automaton
 
-a=ATMT1(init="a")
+a=ATMT1(init="a", ll=lambda: None, recvsock=lambda: None)
 a.run()
 assert( _ == 'aabaaababaaabaaababab' )
 a.result
 assert( _ == 'aabaaababaaabaaababab' )
-a=ATMT1(init="b")
+a=ATMT1(init="b", ll=lambda: None, recvsock=lambda: None)
 a.run()
 assert( _ == 'babababababababababababababab' )
 a.result
@@@@ -769,7 +769,7 @@@@ assert( _ == 'babababababababababababababab' )
 ~ automaton
 
 try:    
-    ATMT1(init="").run()
+    ATMT1(init="", ll=lambda: None, recvsock=lambda: None).run()
 except Automaton.Stuck:
     True
 else:
@@@@ -783,14 +783,14 @@@@ class ATMT2(ATMT1):
     def MAIN(self, s):
         return "c"+ATMT1.MAIN(self, s).run()
 
-a=ATMT2(init="a")
+a=ATMT2(init="a", ll=lambda: None, recvsock=lambda: None)
 a.run()
 assert( _ == 'ccccccacabacccacababacccccacabacccacababab' )
 
 
 a.result
 assert( _ == 'ccccccacabacccacababacccccacabacccacababab' )
-a=ATMT2(init="b")
+a=ATMT2(init="b", ll=lambda: None, recvsock=lambda: None)
 a.run()
 assert( _ == 'cccccbaccbabaccccbaccbabab')
 a.result
@@@@ -806,12 +806,12 @@@@ class ATMT3(ATMT2):
             raise self.MAIN(s+"da")
 
 
-a=ATMT3(init="a", debug=2)
+a=ATMT3(init="a", debug=2, ll=lambda: None, recvsock=lambda: None)
 a.run()
 assert( _ == 'cccccacabdacccacabdabda')
 a.result
 assert( _ == 'cccccacabdacccacabdabda')
-a=ATMT3(init="b")
+a=ATMT3(init="b", ll=lambda: None, recvsock=lambda: None)
 a.run()
 assert( _ == 'cccccbdaccbdabdaccccbdaccbdabdab' )
 
@@@@ -826,12 +826,12 @@@@ class ATMT4(ATMT3):
     def action_test(self, s):
         self.result = "e"+s+"e"
 
-a=ATMT4(init="a")
+a=ATMT4(init="a", ll=lambda: None, recvsock=lambda: None)
 a.run()
 assert( _ == 'cccccacabdacccacabdabda')
 a.result
 assert( _ == 'ecccccacabdacccacabdabdae')
-a=ATMT4(init="b")
+a=ATMT4(init="b", ll=lambda: None, recvsock=lambda: None)
 a.run()
 assert( _ == 'cccccbdaccbdabdaccccbdaccbdabdab' )
 a.result
@@@@ -869,7 +869,7 @@@@ class ATMT5(Automaton):
     def END(self):
         return self.res
 
-a=ATMT5()
+a=ATMT5(ll=lambda: None, recvsock=lambda: None)
 a.run()
 assert( _ == 'Jupiter' )
 
@@@@ -905,7 +905,7 @@@@ class ATMT6(Automaton):
     def END(self):
         return self.res
 
-a=ATMT6()
+a=ATMT6(ll=lambda: None, recvsock=lambda: None)
 a.run()
 assert( _ == 'Mercury' )
 
@@@@ -936,7 +936,7 @@@@ class ATMT7(Automaton):
         self.res += "n"
         return self.res
 
-a=ATMT7()
+a=ATMT7(ll=lambda: None, recvsock=lambda: None)
 a.run(wait=False)
 a.io.tst.send("at")
 a.io.tst.recv()
@@@@ -976,7 +976,7 @@@@ class ATMT8(Automaton):
 
 r,w = os.pipe()
 
-a=ATMT8(external_fd={"extfd":r})
+a=ATMT8(external_fd={"extfd":r}, ll=lambda: None, recvsock=lambda: None)
 a.run(wait=False)
 os.write(w,"ra")
 os.write(w,"nu")
@@@@ -1008,7 +1008,7 @@@@ class ATMT9(Automaton):
         self.res += "s"
         return self.res
 
-a=ATMT9(debug=5)
+a=ATMT9(debug=5, ll=lambda: None, recvsock=lambda: None)
 a.run()
 assert( _ == "VENUs" )
 
@


1.1
log
@update to scapy-2.3.2, from Daniel Jakots, earlier version ok armani@@
@
text
@d1 1
a1 1
$OpenBSD$
@

