head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.46
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.42
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.44
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.40
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.38
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.36
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.34
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.32
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.30
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.28
	OPENBSD_5_0:1.1.1.1.0.26
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.24
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.22
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.20
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.18
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.16
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.14
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.12
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.10
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.8
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.6
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.4
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.2
	OPENBSD_3_8_BASE:1.1.1.1
	msf_20050524:1.1.1.1
	msf:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.05.24.06.16.53;	author msf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.05.24.06.16.53;	author msf;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- NetPacket/UDP.pm.orig	Wed Jan 29 13:25:03 2003
+++ NetPacket/UDP.pm	Thu Apr 14 10:10:49 2005
@@@@ -201,10 +201,10 @@@@ instance data.  This method will quite h
 It is the responsibility of the programmer to ensure valid packet data
 is passed to this method.
 
-=item C<NetPacket::UDP-E<gt>encode(param =E<gt> value)>
+=item C<NetPacket::UDP-E<gt>encode($ip_obj)>
 
 Return a UDP packet encoded with the instance data specified. Needs parts 
-of the ip header contained in $ip_obj, the IP object, in order to calculate 
+of the IP header contained in $ip_obj, the IP object, in order to calculate 
 the UDP checksum. The length field will also be set automatically.
 
 =back
@@@@ -264,9 +264,7 @@@@ none
 
 =item exportable
 
-igmp_strip IGMP_VERSION_RFC998 IGMP_VERSION_RFC1112
-IGMP_MSG_HOST_MQUERY IGMP_MSG_HOST_MREPORT IGMP_IP_NO_HOSTS
-IGMP_IP_ALL_HOSTS IGMP_IP_ALL_ROUTERS
+udp_strip
 
 =item tags
 
@@@@ -276,20 +274,8 @@@@ The following tags group together relate
 
 =item C<:strip>
 
-Import the strip function C<igmp_strip>.
+Import the strip function C<udp_strip>.
 
-=item C<:versions>
-
-IGMP_VERSION_RFC998 IGMP_VERSION_RFC1112
-
-=item C<:msgtypes>
-
-IGMP_HOST_MQUERY IGMP_HOST_MREPORT
-
-=item C<:group_addrs>
-
-IGMP_IP_NO_HOSTS IGMP_IP_ALL_HOSTS IGMP_IP_ALL_ROUTERS
-
 =item C<:ALL>
 
 All the above exportable items.
@@@@ -300,8 +286,8 @@@@ All the above exportable items.
 
 =head1 EXAMPLE
 
-The following script dumps IGMP the contents of IGMP frames to
-standard output.
+The following example prints the source IP address and port, the
+destination IP address and port, and the UDP packet length:
 
   #!/usr/bin/perl -w
 
@


1.1.1.1
log
@- initial import of NetPacket 0.04 with Joel Knight's patches 

"NetPacket" provides a base class for a cluster of modules related to
decoding and encoding of network protocols. Each "NetPacket" descendent
module knows how to encode and decode packets for the network protocol
it implements. Consult the documentation for the module in question for
protocol-specific implementation.
@
text
@@
