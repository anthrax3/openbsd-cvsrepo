head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.48
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.46
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.42
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.44
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.40
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.38
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.36
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.34
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.32
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.30
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.28
	OPENBSD_5_0:1.1.1.1.0.26
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.24
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.22
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.20
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.18
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.16
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.14
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.12
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.10
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.8
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.6
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.4
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.2
	OPENBSD_3_8_BASE:1.1.1.1
	msf_20050524:1.1.1.1
	msf:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2005.05.24.06.16.53;	author msf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.05.24.06.16.53;	author msf;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- NetPacket/IP.pm.orig	Wed Jan 29 13:25:03 2003
+++ NetPacket/IP.pm	Thu Apr 14 10:10:49 2005
@@@@ -61,7 +61,7 @@@@ BEGIN {
 		    IP_PROTO_IP IP_PROTO_ICMP IP_PROTO_IGMP
 		    IP_PROTO_IPIP IP_PROTO_TCP IP_PROTO_UDP
 		    IP_VERSION_IPv4
-		    IP_FLAG_MOREFRAGS IP_FLAG_DONTFRAG IP_FLAG_CONGESTION
+		    IP_FLAG_MOREFRAGS IP_FLAG_DONTFRAG IP_FLAG_RESERVED
                     IP_MAXPACKET
     );
 
@@@@ -73,7 +73,7 @@@@ BEGIN {
 		       IP_PROTO_TCP IP_PROTO_UDP)],
     versions    => [qw(IP_VERSION_IPv4)],
     strip       => [qw(ip_strip)],
-    flags       => [qw(IP_FLAG_MOREFRAGS IP_FLAG_DONTFRAG IP_FLAG_CONGESTION)],
+    flags       => [qw(IP_FLAG_MOREFRAGS IP_FLAG_DONTFRAG IP_FLAG_RESERVED)],
 );
 
 }
@@@@ -101,7 +101,7 @@@@ use constant IP_VERSION_IPv4 => 4;     #
 
 use constant IP_FLAG_MOREFRAGS  => 1;     # More fragments coming
 use constant IP_FLAG_DONTFRAG   => 2;     # Don't fragment me
-use constant IP_FLAG_CONGESTION => 4;     # Congestion present
+use constant IP_FLAG_RESERVED   => 4;     # Reserved
 
 # Maximum IP Packet size
 use constant IP_MAXPACKET => 65535;
@@@@ -252,7 +252,7 @@@@ packets.
   use NetPacket::IP;
 
   $ip_obj = NetPacket::IP->decode($raw_pkt);
-  $ip_pkt = NetPacket::IP->encode($ip_obj);
+  $ip_pkt = NetPacket::IP->encode();
   $ip_data = NetPacket::IP::strip($raw_pkt);
 
 =head1 DESCRIPTION
@@@@ -275,7 +275,7 @@@@ is passed to this method.
 
 Return an IP packet encoded with the instance data specified. This
 will infer the total length of the packet automatically from the 
-payload lenth and also adjust the checksum.
+payload length and also adjust the checksum.
 
 =back
 
@


1.1.1.1
log
@- initial import of NetPacket 0.04 with Joel Knight's patches 

"NetPacket" provides a base class for a cluster of modules related to
decoding and encoding of network protocols. Each "NetPacket" descendent
module knows how to encode and decode packets for the network protocol
it implements. Consult the documentation for the module in question for
protocol-specific implementation.
@
text
@@
