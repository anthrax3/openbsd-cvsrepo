head	1.2;
access;
symbols
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_4:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2004.02.25.02.35.04;	author brad;	state dead;
branches;
next	1.1;

1.1
date	2003.11.13.21.11.11;	author margarida;	state Exp;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2003.11.13.21.12.33;	author margarida;	state Exp;
branches;
next	;

1.1.4.1
date	2003.11.13.21.13.37;	author margarida;	state Exp;
branches;
next	;


desc
@@


1.2
log
@upgrade to EPIC4 2.0
@
text
@$OpenBSD: patch-source_ctcp_c,v 1.1 2003/11/13 21:11:11 margarida Exp $
--- source/ctcp.c.orig	2000-12-05 00:11:56.000000000 +0000
+++ source/ctcp.c	2003-11-13 17:30:10.000000000 +0000
@@@@ -897,7 +897,8 @@@@ void	send_ctcp (int type, char *to, int 
 	int	len;
 
 	/* Make sure that the final \001 doesnt get truncated */
-	len = IRCD_BUFFER_SIZE - (12 + strlen(to));
+	if ((len = IRCD_BUFFER_SIZE - (12 + strlen(to))) < 0)
+		return;
 	putbuf2 = alloca(len);
 
 	if (format)
@


1.1
log
@Security fix:
A remotely exploitable buffer overrun has been reported in Epic.
This issue may reportedly be exploited by a malicious server that
supplies an overly long nickname in a CTCP messages, potentially
allowing for execution of arbitrary code in the context of the
client user.
It may be also be possible for a malicious client to send such a
message, but it is likely that the server will limit the length.

ok brad@@
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.4.1
log
@Security fix:
A remotely exploitable buffer overrun has been reported in Epic.
This issue may reportedly be exploited by a malicious server that
supplies an overly long nickname in a CTCP messages, potentially
allowing for execution of arbitrary code in the context of the
client user.
It may be also be possible for a malicious client to send such a
message, but it is likely that the server will limit the length.
@
text
@d2 2
a3 2
--- source/ctcp.c.orig	Tue Dec  5 00:11:56 2000
+++ source/ctcp.c	Thu Nov 13 17:24:55 2003
@


1.1.2.1
log
@Security fix:
A remotely exploitable buffer overrun has been reported in Epic.
This issue may reportedly be exploited by a malicious server that
supplies an overly long nickname in a CTCP messages, potentially
allowing for execution of arbitrary code in the context of the
client user.
It may be also be possible for a malicious client to send such a
message, but it is likely that the server will limit the length.
@
text
@d2 2
a3 2
--- source/ctcp.c.orig	2000-12-04 19:11:56.000000000 -0500
+++ source/ctcp.c	2003-11-13 12:22:17.000000000 -0500
@

