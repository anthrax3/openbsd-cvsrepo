head	1.2;
access;
symbols
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.12
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.10
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.08.25.11.04.39;	author jca;	state dead;
branches;
next	1.1;
commitid	jWHBCzKs5xKamlhw;

1.1
date	2012.04.16.21.58.34;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Move samba4 to samba, and tweak the ports tree to use it.

ok ajacoutot@@

Upcoming commits will add additional tweaks.

Many thanks to Vadim Zhukov (who did most of the work), Ian McWilliam
(co-maintainer), Stuart Henderson who provided lots of support and
feedback, Antoine Jacoutot who patiently dealt with my broken diffs,
and more generally all the people involved.  Most of the recent work was
done during p2k15 and c2k15.
@
text
@$OpenBSD: patch-source3_smbd_statvfs_c,v 1.1 2012/04/16 21:58:34 sthen Exp $
--- source3/smbd/statvfs.c.orig	Sat Apr  7 14:23:20 2012
+++ source3/smbd/statvfs.c	Tue Apr 10 23:49:12 2012
@@@@ -49,10 +49,8 @@@@ static int linux_statvfs(const char *path, vfs_statvfs
 	}
 	return result;
 }
-#endif
+#elif defined(DARWINOS)
 
-#if defined(DARWINOS)
-
 #include <sys/attr.h>
 
 static int darwin_fs_capabilities(const char * path)
@@@@ -125,8 +123,45 @@@@ static int darwin_statvfs(const char *path, vfs_statvf
 
 	return 0;
 }
+#elif defined(BSD) && defined(BSD_STATVFS_BSIZE)
+static int bsd_statvfs(const char *path, vfs_statvfs_struct *statbuf)
+{
+	struct statfs statfs_buf;
+	int result;
+
+	result = statfs(path, &statfs_buf);
+	if (result != 0) {
+		return result;
+	}
+	
+	statbuf->OptimalTransferSize = statfs_buf.f_iosize;
+	statbuf->BlockSize = statfs_buf.f_bsize;
+	statbuf->TotalBlocks = statfs_buf.f_blocks;
+	statbuf->BlocksAvail = statfs_buf.f_bfree;
+	statbuf->UserBlocksAvail = statfs_buf.f_bavail;
+	statbuf->TotalFileNodes = statfs_buf.f_files;
+	statbuf->FreeFileNodes = statfs_buf.f_ffree;
+	statbuf->FsIdentifier = 
+		(((uint64_t) statfs_buf.f_fsid.val[0] << 32) & 0xffffffff00000000LL) |
+		    (uint64_t) statfs_buf.f_fsid.val[1];
+	/* Try to extrapolate some of the fs flags into the
+	 * capabilities
+	 */
+	statbuf->FsCapabilities =
+	    FILE_CASE_SENSITIVE_SEARCH | FILE_CASE_PRESERVED_NAMES;
+#ifdef MNT_ACLS
+	if (statfs_buf.f_flags & MNT_ACLS)
+		statbuf->FsCapabilities |= FILE_PERSISTENT_ACLS;
 #endif
+	if (statfs_buf.f_flags & MNT_QUOTA)
+		statbuf->FsCapabilities |= FILE_VOLUME_QUOTAS;
+	if (statfs_buf.f_flags & MNT_RDONLY)
+		statbuf->FsCapabilities |= FILE_READ_ONLY_VOLUME;
 
+	return 0;
+}
+#endif
+
 /* 
  sys_statvfs() is an abstraction layer over system-dependent statvfs()/statfs()
  for particular POSIX systems. Due to controversy of what is considered more important
@@@@ -139,6 +174,8 @@@@ int sys_statvfs(const char *path, vfs_statvfs_struct *
 	return linux_statvfs(path, statbuf);
 #elif defined(DARWINOS)
 	return darwin_statvfs(path, statbuf);
+#elif defined(BSD) && defined(BSD_STATVFS_BSIZE)
+	return bsd_statvfs(path, statbuf);
 #else
 	/* BB change this to return invalid level */
 #ifdef EOPNOTSUPP
@


1.1
log
@add patches to samba, from Brad, ok with maintainer, also tested by nigel@@

- backport *BSD sys_statvfs() wrapper
- tweak autoconf check for cups
@
text
@d1 1
a1 1
$OpenBSD$
@

