head	1.8;
access;
symbols
	OPENBSD_2_8:1.7.0.8
	OPENBSD_2_8_BASE:1.7
	OPENBSD_2_7:1.7.0.6
	OPENBSD_2_7_BASE:1.7
	OPENBSD_2_6:1.7.0.4
	OPENBSD_2_6_BASE:1.7
	OPENBSD_2_5:1.7.0.2
	OPENBSD_2_5_BASE:1.7
	OPENBSD_2_4:1.6.0.2
	OPENBSD_2_4_BASE:1.6
	form_980505:1.1.1.2
	form_980504:1.1.1.2
	form:1.1.1
	OPENBSD_2_3:1.4.0.2
	OPENBSD_2_3_BASE:1.4
	samba_1_9_17:1.1.1.1
	samba:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2001.04.10.01.46.59;	author brad;	state dead;
branches;
next	1.7;

1.7
date	99.03.19.09.06.06;	author brad;	state Exp;
branches;
next	1.6;

1.6
date	98.05.12.05.15.01;	author form;	state Exp;
branches;
next	1.5;

1.5
date	98.05.06.02.17.22;	author form;	state Exp;
branches;
next	1.4;

1.4
date	98.03.14.22.05.25;	author marc;	state Exp;
branches;
next	1.3;

1.3
date	98.01.29.15.10.07;	author niklas;	state dead;
branches;
next	1.2;

1.2
date	97.11.16.22.01.38;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	97.11.16.20.06.44;	author joey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.11.16.20.06.44;	author joey;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	98.05.04.04.10.39;	author form;	state Exp;
branches;
next	;


desc
@@


1.8
log
@rename patch
@
text
@--- Makefile.in.orig	Sat Mar  6 02:25:16 1999
+++ Makefile.in	Sat Mar  6 02:44:42 1999
@@@@ -25,7 +25,9 @@@@
 BINDIR = @@bindir@@
 # we don't use sbindir because we want full compatibility with
 # the previous releases of Samba
-SBINDIR = @@bindir@@
+#SBINDIR = @@bindir@@
+# previous releases of the OpenBSD port did use sbindir
+SBINDIR = @@sbindir@@
 LIBDIR = @@libdir@@
 VARDIR = @@localstatedir@@
 MANDIR = @@mandir@@
@@@@ -36,16 +38,16 @@@@
 # set these to where to find various files
 # These can be overridden by command line switches (see smbd(8))
 # or in smb.conf (see smb.conf(5))
-SMBLOGFILE = $(VARDIR)/log.smb
-NMBLOGFILE = $(VARDIR)/log.nmb
-CONFIGFILE = $(LIBDIR)/smb.conf
-LMHOSTSFILE = $(LIBDIR)/lmhosts
-DRIVERFILE = $(LIBDIR)/printers.def
-PASSWD_PROGRAM = /bin/passwd
+SMBLOGFILE = $(VARDIR)/log/smbd
+NMBLOGFILE = $(VARDIR)/log/nmbd
+
 # This is where smbpasswd et al go
 PRIVATEDIR = @@privatedir@@
-
 SMB_PASSWD_FILE = $(PRIVATEDIR)/smbpasswd
+CONFIGFILE = $(PRIVATEDIR)/smb.conf
+LMHOSTSFILE = $(PRIVATEDIR)/lmhosts
+DRIVERFILE = $(PRIVATEDIR)/printers.def
+PASSWD_PROGRAM = /usr/bin/passwd
 
 # This is where SWAT images and help files go
 SWATDIR = @@swatdir@@
@


1.7
log
@upgrade to samba 2.0.3; Andrew Lambeth <andrew@@nfr.net>
@
text
@@


1.6
log
@update samba to 1.9.18p6
@
text
@d1 37
a37 183
*** Makefile.orig	Mon May 11 15:37:44 1998
--- Makefile	Mon May 11 20:15:46 1998
***************
*** 5,11 ****
  ###########################################################################
  
  # The base directory for all samba files
! BASEDIR = /usr/local/samba
  
  # The base manpages directory to put the man pages in
  # Note: $(MANDIR)/man1, $(MANDIR)/man5 and $(MANDIR)/man8 must exist.
--- 5,11 ----
  ###########################################################################
  
  # The base directory for all samba files
! BASEDIR = /usr/local
  
  # The base manpages directory to put the man pages in
  # Note: $(MANDIR)/man1, $(MANDIR)/man5 and $(MANDIR)/man8 must exist.
***************
*** 18,33 ****
  #       normally only applies to nmbd and smbd
  #       SBINDIR implies a secure binary directory
  BINDIR = $(BASEDIR)/bin
! SBINDIR = $(BASEDIR)/bin
! LIBDIR = $(BASEDIR)/lib
! VARDIR = $(BASEDIR)/var
  
  # The permissions to give the executables
  INSTALLPERMS = 0755
  
  # Add any optimisation or debugging flags here
  # add -DSYSLOG for syslog support
! FLAGS1 = -O
  LIBS1 = 
  
  # You will need to use a ANSI C compiler. This means under SunOS 4 you can't 
--- 18,34 ----
  #       normally only applies to nmbd and smbd
  #       SBINDIR implies a secure binary directory
  BINDIR = $(BASEDIR)/bin
! SBINDIR = $(BASEDIR)/sbin
! LIBDIR = $(BASEDIR)/lib/samba
! ETCDIR = /etc/samba
! VARDIR = /var
  
  # The permissions to give the executables
  INSTALLPERMS = 0755
  
  # Add any optimisation or debugging flags here
  # add -DSYSLOG for syslog support
! FLAGS1 = -O -DQUOTAS -DALLOW_CHANGE_PASSWORD
  LIBS1 = 
  
  # You will need to use a ANSI C compiler. This means under SunOS 4 you can't 
***************
*** 45,61 ****
  # set these to where to find various files
  # These can be overridden by command line switches (see smbd(8))
  # or in smb.conf (see smb.conf(5))
! SMBLOGFILE = $(VARDIR)/log.smb
! NMBLOGFILE = $(VARDIR)/log.nmb
! CONFIGFILE = $(LIBDIR)/smb.conf
! LMHOSTSFILE = $(LIBDIR)/lmhosts
! DRIVERFILE = $(LIBDIR)/printers.def
  SMB_PASSWD = $(BINDIR)/smbpasswd
! SMB_PASSWD_FILE = $(BASEDIR)/private/smbpasswd
  WEB_ROOT = $(BASEDIR)
  
  # the directory where lock files go
! LOCKDIR = $(VARDIR)/locks
  
  # The directory where code page definition files go
  CODEPAGEDIR = $(LIBDIR)/codepages
--- 46,62 ----
  # set these to where to find various files
  # These can be overridden by command line switches (see smbd(8))
  # or in smb.conf (see smb.conf(5))
! SMBLOGFILE = $(VARDIR)/log/smb
! NMBLOGFILE = $(VARDIR)/log/nmb
! CONFIGFILE = $(ETCDIR)/smb.conf
! LMHOSTSFILE = $(ETCDIR)/lmhosts
! DRIVERFILE = $(ETCDIR)/printers.def
  SMB_PASSWD = $(BINDIR)/smbpasswd
! SMB_PASSWD_FILE = $(ETCDIR)/smbpasswd
  WEB_ROOT = $(BASEDIR)
  
  # the directory where lock files go
! LOCKDIR = $(VARDIR)/spool/lock
  
  # The directory where code page definition files go
  CODEPAGEDIR = $(LIBDIR)/codepages
***************
*** 64,70 ****
  
  # set this to the default group you want your machine to appear in
  # for browsing. This can also be set in nmbd (see nmbd(8))
! WORKGROUP = WORKGROUP
  
  # set this to the name of the default account, which is the one
  # to use when no username or password is specified.  This can be overridden
--- 65,71 ----
  
  # set this to the default group you want your machine to appear in
  # for browsing. This can also be set in nmbd (see nmbd(8))
! WORKGROUP = SAMBA
  
  # set this to the name of the default account, which is the one
  # to use when no username or password is specified.  This can be overridden
***************
*** 430,437 ****
  
  # This is for OpenBSD
  # contributed by todd@@openbsd.org
! # FLAGSM = -DFAST_SHARE_MODES -DBSD44
! # LIBSM =
  
  # This is for NEXTSTEP Release 2.X
  # No Posix.
--- 431,438 ----
  
  # This is for OpenBSD
  # contributed by todd@@openbsd.org
! FLAGSM = -DFAST_SHARE_MODES -DBSD44
! LIBSM =
  
  # This is for NEXTSTEP Release 2.X
  # No Posix.
***************
*** 755,761 ****
  
  smbd: $(SMBDOBJ) $(ARCFOUR_OBJ)
  	@@echo Linking smbd
! 	@@$(CC) $(CFLAGS) -o smbd $(SMBDOBJ) $(ARCFOUR_OBJ) $(LIBS) $(AFS_LIBS)
  
  smbrun: smbrun.o 
  	@@echo Linking smbrun
--- 756,762 ----
  
  smbd: $(SMBDOBJ) $(ARCFOUR_OBJ)
  	@@echo Linking smbd
! 	@@$(CC) $(CFLAGS) -o smbd $(SMBDOBJ) $(ARCFOUR_OBJ) $(LIBS) $(LIBSM) $(AFS_LIBS)
  
  smbrun: smbrun.o 
  	@@echo Linking smbrun
***************
*** 824,831 ****
  install: installbin installman installscripts installcp
  
  installbin: all
! 	@@$(SHELL) $(srcdir)installbin.sh $(INSTALLPERMS) $(BASEDIR) $(SBINDIR) $(LIBDIR) $(VARDIR) $(SPROGS)
! 	@@$(SHELL) $(srcdir)installbin.sh $(INSTALLPERMS) $(BASEDIR) $(BINDIR) $(LIBDIR) $(VARDIR) $(PROGS)
  
  installscripts:
  	@@$(SHELL) $(srcdir)installscripts.sh $(INSTALLPERMS) $(BINDIR) $(SCRIPTS)
--- 825,832 ----
  install: installbin installman installscripts installcp
  
  installbin: all
! 	@@$(SHELL) $(srcdir)installbin.sh $(INSTALLPERMS) $(BASEDIR) $(SBINDIR) $(ETCDIR) $(VARDIR) $(SPROGS)
! 	@@$(SHELL) $(srcdir)installbin.sh $(INSTALLPERMS) $(BASEDIR) $(BINDIR) $(ETCDIR) $(VARDIR) $(PROGS)
  
  installscripts:
  	@@$(SHELL) $(srcdir)installscripts.sh $(INSTALLPERMS) $(BINDIR) $(SCRIPTS)
***************
*** 847,854 ****
  	@@$(SHELL) $(srcdir)uninstallman.sh $(MANDIR) $(srcdir)
  
  uninstallbin:
! 	@@$(SHELL) $(srcdir)uninstallbin.sh $(INSTALLPERMS) $(BASEDIR) $(SBINDIR) $(LIBDIR) $(VARDIR) $(SPROGS)
! 	@@$(SHELL) $(srcdir)uninstallbin.sh $(INSTALLPERMS) $(BASEDIR) $(BINDIR) $(LIBDIR) $(VARDIR) $(PROGS)
  
  uninstallscripts:
  	@@$(SHELL) $(srcdir)uninstallscripts.sh $(INSTALLPERMS) $(BINDIR) $(SCRIPTS)
--- 848,855 ----
  	@@$(SHELL) $(srcdir)uninstallman.sh $(MANDIR) $(srcdir)
  
  uninstallbin:
! 	@@$(SHELL) $(srcdir)uninstallbin.sh $(INSTALLPERMS) $(BASEDIR) $(SBINDIR) $(ETCDIR) $(VARDIR) $(SPROGS)
! 	@@$(SHELL) $(srcdir)uninstallbin.sh $(INSTALLPERMS) $(BASEDIR) $(BINDIR) $(ETCDIR) $(VARDIR) $(PROGS)
  
  uninstallscripts:
  	@@$(SHELL) $(srcdir)uninstallscripts.sh $(INSTALLPERMS) $(BINDIR) $(SCRIPTS)
@


1.5
log
@add new patches
@
text
@d1 2
a2 2
*** Makefile.orig	Sat Mar 28 05:59:09 1998
--- Makefile	Wed Apr 22 13:19:36 1998
d111 1
a111 1
*** 429,436 ****
d120 1
a120 1
--- 430,437 ----
d130 18
a147 1
*** 823,830 ****
d156 1
a156 1
--- 824,831 ----
d166 1
a166 1
*** 846,853 ****
d175 1
a175 1
--- 847,854 ----
@


1.4
log
@Upgrade to samba-1.9.18p3 (old version no longer avail)
Install sample config file in /etc if no config file exists
Install doc in /usr/local/share/doc/samba
Install faq in /usr/local/share/doc/html/samba
Clean up packing list -- remove all but config files in /etc
Get rid of one instance of mktemp and some compile warnings
@
text
@d1 166
a166 10
--- includes.h.~1~	Thu Feb 12 17:44:28 1998
+++ includes.h	Fri Mar 13 21:07:30 1998
@@@@ -530,6 +530,7 @@@@
 #ifdef __OpenBSD__
 #include <strings.h>
 #include <netinet/tcp.h>
+#include <arpa/inet.h>
 #define NO_GETSPNAM
 #define SIGNAL_CAST (void (*)())
 #define USE_DIRECT
@


1.3
log
@Update version, OpeBSD support is now native.  I noticed smb.conf is in
/usr/local/etc, as it is host-dependent it would be better off in /etc I
think, but I did not change that now.  Opinions wanted.
@
text
@d1 10
a10 14
--- Makefile.orig	Tue Oct 21 05:47:16 1997
+++ Makefile	Sun Nov 16 15:33:11 1997
@@@@ -386,6 +386,11 @@@@
 # FLAGSM = -DFreeBSD -DFAST_SHARE_MODES
 # LIBSM = -lcrypt 
 
+# This is for OpenBSD
+# contributed by todd@@openbsd.org
+# FLAGSM = -DFAST_SHARE_MODES -DBSD44
+# LIBSM =
+
 
 # This is for NEXTSTEP Release 2.X
 # No Posix.
@


1.2
log
@use latest samba sources
use make overrides instead of patching the Makefile.
pkg/DESCR: samba works on UNIX, not just FreeBSD.
@
text
@@


1.1
log
@Initial revision
@
text
@d1 11
a11 57
--- Makefile.orig	Sat Sep 27 00:04:52 1997
+++ Makefile	Wed Oct 15 17:09:58 1997
@@@@ -5,11 +5,11 @@@@
 ###########################################################################
 
 # The base directory for all samba files
-BASEDIR = /usr/local/samba
+BASEDIR = $(PREFIX)
 
 # The base manpages directory to put the man pages in
 # Note: $(MANDIR)/man1, $(MANDIR)/man5 and $(MANDIR)/man8 must exist.
-MANDIR = /usr/local/man
+MANDIR = $(PREFIX)/man
 
 # The directories to put things in. If you use multiple
 # architectures or share the samba binaries across NFS then
@@@@ -18,9 +18,9 @@@@
 #       normally only applies to nmbd and smbd
 #       SBINDIR implies a secure binary directory
 BINDIR = $(BASEDIR)/bin
-SBINDIR = $(BASEDIR)/bin
-LIBDIR = $(BASEDIR)/lib
-VARDIR = $(BASEDIR)/var
+SBINDIR = $(BASEDIR)/sbin
+ETCDIR = $(BASEDIR)/etc
+LOGDIR = /var/log
 
 # The permissions to give the executables
 INSTALLPERMS = 0755
@@@@ -45,13 +45,13 @@@@
 # set these to where to find various files
 # These can be overridden by command line switches (see smbd(8))
 # or in smb.conf (see smb.conf(5))
-SMBLOGFILE = $(VARDIR)/log.smb
-NMBLOGFILE = $(VARDIR)/log.nmb
-CONFIGFILE = $(LIBDIR)/smb.conf
-LMHOSTSFILE = $(LIBDIR)/lmhosts
+SMBLOGFILE = $(LOGDIR)/smb
+NMBLOGFILE = $(LOGDIR)/nmb
+CONFIGFILE = $(ETCDIR)/smb.conf
+LMHOSTSFILE = $(ETCDIR)/lmhosts
 
 # the directory where lock files go
-LOCKDIR = $(VARDIR)/locks
+LOCKDIR = /var/spool/lock
 
 # set this to the default group you want your machine to appear in
 # for browsing. This can also be set in nmbd (see nmbd(8))
@@@@ -383,8 +383,8 @@@@
 # This is for FreeBSD
 # contributed by kuku@@acds.physik.rwth-aachen.de
 # NOTE: You may need to add -DBSD44 if you have password problems
-# FLAGSM = -DFreeBSD -DFAST_SHARE_MODES
-# LIBSM = -lcrypt 
+FLAGSM = -DFreeBSD -DFAST_SHARE_MODES
+LIBSM = -lcrypt 
 
d14 1
a14 11
@@@@ -684,8 +684,8 @@@@
 install: installbin installman installscripts
 
 installbin: all
-	@@$(SHELL) $(srcdir)installbin.sh $(INSTALLPERMS) $(BASEDIR) $(SBINDIR) $(LIBDIR) $(VARDIR) $(SPROGS)
-	@@$(SHELL) $(srcdir)installbin.sh $(INSTALLPERMS) $(BASEDIR) $(BINDIR) $(LIBDIR) $(VARDIR) $(PROGS)
+	@@$(SHELL) $(srcdir)installbin.sh $(INSTALLPERMS) $(BASEDIR) $(SBINDIR) $(ETCDIR) $(LOGDIR) $(SPROGS)
+	@@$(SHELL) $(srcdir)installbin.sh $(INSTALLPERMS) $(BASEDIR) $(BINDIR) $(ETCDIR) $(LOGDIR) $(PROGS)
 
 installscripts:
 	@@$(SHELL) $(srcdir)installscripts.sh $(INSTALLPERMS) $(BINDIR) $(SCRIPTS)
@


1.1.1.1
log
@
@
text
@@


1.1.1.2
log
@samba-1.9.18p4 port
@
text
@d1 70
a70 166
*** Makefile.orig	Sat Mar 28 05:59:09 1998
--- Makefile	Wed Apr 22 13:19:36 1998
***************
*** 5,11 ****
  ###########################################################################
  
  # The base directory for all samba files
! BASEDIR = /usr/local/samba
  
  # The base manpages directory to put the man pages in
  # Note: $(MANDIR)/man1, $(MANDIR)/man5 and $(MANDIR)/man8 must exist.
--- 5,11 ----
  ###########################################################################
  
  # The base directory for all samba files
! BASEDIR = /usr/local
  
  # The base manpages directory to put the man pages in
  # Note: $(MANDIR)/man1, $(MANDIR)/man5 and $(MANDIR)/man8 must exist.
***************
*** 18,33 ****
  #       normally only applies to nmbd and smbd
  #       SBINDIR implies a secure binary directory
  BINDIR = $(BASEDIR)/bin
! SBINDIR = $(BASEDIR)/bin
! LIBDIR = $(BASEDIR)/lib
! VARDIR = $(BASEDIR)/var
  
  # The permissions to give the executables
  INSTALLPERMS = 0755
  
  # Add any optimisation or debugging flags here
  # add -DSYSLOG for syslog support
! FLAGS1 = -O
  LIBS1 = 
  
  # You will need to use a ANSI C compiler. This means under SunOS 4 you can't 
--- 18,34 ----
  #       normally only applies to nmbd and smbd
  #       SBINDIR implies a secure binary directory
  BINDIR = $(BASEDIR)/bin
! SBINDIR = $(BASEDIR)/sbin
! LIBDIR = $(BASEDIR)/lib/samba
! ETCDIR = /etc/samba
! VARDIR = /var
  
  # The permissions to give the executables
  INSTALLPERMS = 0755
  
  # Add any optimisation or debugging flags here
  # add -DSYSLOG for syslog support
! FLAGS1 = -O -DQUOTAS -DALLOW_CHANGE_PASSWORD
  LIBS1 = 
  
  # You will need to use a ANSI C compiler. This means under SunOS 4 you can't 
***************
*** 45,61 ****
  # set these to where to find various files
  # These can be overridden by command line switches (see smbd(8))
  # or in smb.conf (see smb.conf(5))
! SMBLOGFILE = $(VARDIR)/log.smb
! NMBLOGFILE = $(VARDIR)/log.nmb
! CONFIGFILE = $(LIBDIR)/smb.conf
! LMHOSTSFILE = $(LIBDIR)/lmhosts
! DRIVERFILE = $(LIBDIR)/printers.def
  SMB_PASSWD = $(BINDIR)/smbpasswd
! SMB_PASSWD_FILE = $(BASEDIR)/private/smbpasswd
  WEB_ROOT = $(BASEDIR)
  
  # the directory where lock files go
! LOCKDIR = $(VARDIR)/locks
  
  # The directory where code page definition files go
  CODEPAGEDIR = $(LIBDIR)/codepages
--- 46,62 ----
  # set these to where to find various files
  # These can be overridden by command line switches (see smbd(8))
  # or in smb.conf (see smb.conf(5))
! SMBLOGFILE = $(VARDIR)/log/smb
! NMBLOGFILE = $(VARDIR)/log/nmb
! CONFIGFILE = $(ETCDIR)/smb.conf
! LMHOSTSFILE = $(ETCDIR)/lmhosts
! DRIVERFILE = $(ETCDIR)/printers.def
  SMB_PASSWD = $(BINDIR)/smbpasswd
! SMB_PASSWD_FILE = $(ETCDIR)/smbpasswd
  WEB_ROOT = $(BASEDIR)
  
  # the directory where lock files go
! LOCKDIR = $(VARDIR)/spool/lock
  
  # The directory where code page definition files go
  CODEPAGEDIR = $(LIBDIR)/codepages
***************
*** 64,70 ****
  
  # set this to the default group you want your machine to appear in
  # for browsing. This can also be set in nmbd (see nmbd(8))
! WORKGROUP = WORKGROUP
  
  # set this to the name of the default account, which is the one
  # to use when no username or password is specified.  This can be overridden
--- 65,71 ----
  
  # set this to the default group you want your machine to appear in
  # for browsing. This can also be set in nmbd (see nmbd(8))
! WORKGROUP = SAMBA
  
  # set this to the name of the default account, which is the one
  # to use when no username or password is specified.  This can be overridden
***************
*** 429,436 ****
  
  # This is for OpenBSD
  # contributed by todd@@openbsd.org
! # FLAGSM = -DFAST_SHARE_MODES -DBSD44
! # LIBSM =
  
  # This is for NEXTSTEP Release 2.X
  # No Posix.
--- 430,437 ----
  
  # This is for OpenBSD
  # contributed by todd@@openbsd.org
! FLAGSM = -DFAST_SHARE_MODES -DBSD44
! LIBSM =
  
  # This is for NEXTSTEP Release 2.X
  # No Posix.
***************
*** 823,830 ****
  install: installbin installman installscripts installcp
  
  installbin: all
! 	@@$(SHELL) $(srcdir)installbin.sh $(INSTALLPERMS) $(BASEDIR) $(SBINDIR) $(LIBDIR) $(VARDIR) $(SPROGS)
! 	@@$(SHELL) $(srcdir)installbin.sh $(INSTALLPERMS) $(BASEDIR) $(BINDIR) $(LIBDIR) $(VARDIR) $(PROGS)
  
  installscripts:
  	@@$(SHELL) $(srcdir)installscripts.sh $(INSTALLPERMS) $(BINDIR) $(SCRIPTS)
--- 824,831 ----
  install: installbin installman installscripts installcp
  
  installbin: all
! 	@@$(SHELL) $(srcdir)installbin.sh $(INSTALLPERMS) $(BASEDIR) $(SBINDIR) $(ETCDIR) $(VARDIR) $(SPROGS)
! 	@@$(SHELL) $(srcdir)installbin.sh $(INSTALLPERMS) $(BASEDIR) $(BINDIR) $(ETCDIR) $(VARDIR) $(PROGS)
  
  installscripts:
  	@@$(SHELL) $(srcdir)installscripts.sh $(INSTALLPERMS) $(BINDIR) $(SCRIPTS)
***************
*** 846,853 ****
  	@@$(SHELL) $(srcdir)uninstallman.sh $(MANDIR) $(srcdir)
  
  uninstallbin:
! 	@@$(SHELL) $(srcdir)uninstallbin.sh $(INSTALLPERMS) $(BASEDIR) $(SBINDIR) $(LIBDIR) $(VARDIR) $(SPROGS)
! 	@@$(SHELL) $(srcdir)uninstallbin.sh $(INSTALLPERMS) $(BASEDIR) $(BINDIR) $(LIBDIR) $(VARDIR) $(PROGS)
  
  uninstallscripts:
  	@@$(SHELL) $(srcdir)uninstallscripts.sh $(INSTALLPERMS) $(BINDIR) $(SCRIPTS)
--- 847,854 ----
  	@@$(SHELL) $(srcdir)uninstallman.sh $(MANDIR) $(srcdir)
  
  uninstallbin:
! 	@@$(SHELL) $(srcdir)uninstallbin.sh $(INSTALLPERMS) $(BASEDIR) $(SBINDIR) $(ETCDIR) $(VARDIR) $(SPROGS)
! 	@@$(SHELL) $(srcdir)uninstallbin.sh $(INSTALLPERMS) $(BASEDIR) $(BINDIR) $(ETCDIR) $(VARDIR) $(PROGS)
  
  uninstallscripts:
  	@@$(SHELL) $(srcdir)uninstallscripts.sh $(INSTALLPERMS) $(BINDIR) $(SCRIPTS)
@


