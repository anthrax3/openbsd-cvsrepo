head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.16
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.14
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.12
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.8
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.10
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.6
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.4
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.2
	OPENBSD_5_5_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.08.30.20.15.39;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.1
log
@fix for long long time_t on LP64 archs; ok sthen@@
@
text
@$OpenBSD$

Fix for long long time_t on LP64 archs. Poco's type system assumes that
64-bit quantities are type long on LP64 archs and that long long
only exists on 32-bit archs.

--- Foundation/src/PatternFormatter.cpp.orig	Sat Aug 17 16:38:20 2013
+++ Foundation/src/PatternFormatter.cpp	Sat Aug 17 16:38:55 2013
@@@@ -123,7 +123,7 @@@@ void PatternFormatter::format(const Message& msg, std:
 				case 'F': NumberFormatter::append0(text, dateTime.millisecond()*1000 + dateTime.microsecond(), 6); break;
 				case 'z': text.append(DateTimeFormatter::tzdISO(_localTime ? Timezone::tzd() : DateTimeFormatter::UTC)); break;
 				case 'Z': text.append(DateTimeFormatter::tzdRFC(_localTime ? Timezone::tzd() : DateTimeFormatter::UTC)); break;
-				case 'E': NumberFormatter::append(text, msg.getTime().epochTime()); break;
+				case 'E': NumberFormatter::append(text, (Int64)msg.getTime().epochTime()); break;
 				case '[':
 				{
 					++it;
@
