head	1.5;
access;
symbols
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.6
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.4
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.2
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2008.04.09.22.13.11;	author merdely;	state dead;
branches;
next	1.4;

1.4
date	2007.11.19.11.44.33;	author martynas;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.11.15.11.33;	author naddy;	state Exp;
branches;
next	1.2;

1.2
date	2004.10.21.14.48.51;	author naddy;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.20.16.27.49;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Update to 1.2.
V1.2 adds nice "account set #" feature to manage accounts.
Remove a lot of string handling patches.
Remove patches to rename bitlbee "root" user to "bitlbee".

tested by Andrew Dalgleish (MAINTAINER), James Turner and Wiktor Izdebski
ok martynas@@, simon@@, okan@@, wcmaier@@
@
text
@$OpenBSD: patch-bitlbee_c,v 1.4 2007/11/19 11:44:33 martynas Exp $
--- bitlbee.c.orig	Mon Aug 20 16:27:13 2007
+++ bitlbee.c	Mon Nov 19 13:39:00 2007
@@@@ -35,7 +35,7 @@@@
 
 gboolean bitlbee_io_new_client( GIOChannel *source, GIOCondition condition, gpointer data )
 {
-	size_t size = sizeof( struct sockaddr_in );
+	socklen_t size = sizeof( struct sockaddr_in );
 	struct sockaddr_in conn_info;
 	int new_socket = accept( global.listen_socket, (struct sockaddr *) &conn_info, 
 		                     &size );
@@@@ -154,8 +154,9 @@@@ gboolean bitlbee_io_current_client_read( GIOChannel *s
 	}
 	else 
 	{
-		irc->readbuffer = g_renew( char, irc->readbuffer, strlen( irc->readbuffer ) + strlen ( line ) + 1 );
-		strcpy( ( irc->readbuffer + strlen( irc->readbuffer ) ), line );
+		size_t newlen = strlen(irc->readbuffer) + strlen(line) + 1;
+		irc->readbuffer = g_renew( char, irc->readbuffer, newlen);
+		strlcat(irc->readbuffer, line, newlen);
 	}
 	
 	if( !irc_process( irc ) )
@@@@ -228,10 +229,11 @@@@ int bitlbee_load( irc_t *irc, const char* password )
 	if( irc->status == USTATUS_IDENTIFIED )
 		return( 1 );
 	
-	g_snprintf( s, 511, "%s%s%s", global.conf->configdir, irc->nick, ".accounts" );
+	g_snprintf( s, sizeof(s), "%s%s%s", global.conf->configdir, irc->nick, ".accounts" );
    	fp = fopen( s, "r" );
    	if( !fp ) return( 0 );
 	
+	COMPILE_TIME_ASSERT(32 < sizeof(s));
 	fscanf( fp, "%32[^\n]s", s );
 	if( setpass( irc, password, s ) < 0 )
 	{
@@@@ -243,6 +245,7 @@@@ int bitlbee_load( irc_t *irc, const char* password )
 	   account command will not work otherwise. */
 	irc->status = USTATUS_IDENTIFIED;
 	
+	COMPILE_TIME_ASSERT(511 < sizeof(s));
 	while( fscanf( fp, "%511[^\n]s", s ) > 0 )
 	{
 		fgetc( fp );
@@@@ -252,19 +255,21 @@@@ int bitlbee_load( irc_t *irc, const char* password )
 	}
 	fclose( fp );
 	
-	g_snprintf( s, 511, "%s%s%s", global.conf->configdir, irc->nick, ".nicks" );
+	g_snprintf( s, sizeof(s), "%s%s%s", global.conf->configdir, irc->nick, ".nicks" );
 	fp = fopen( s, "r" );
 	if( !fp ) return( 0 );
-	while( fscanf( fp, "%s %d %s", s, &proto, nick ) > 0 )
+	COMPILE_TIME_ASSERT(511 < sizeof(s));
+	COMPILE_TIME_ASSERT(24 < sizeof(nick));
+	while( fscanf( fp, "%511s %d %24s", s, &proto, nick ) > 0 )
 	{
-		http_decode( s );
+		http_decode( s, sizeof(s) );
 		nick_set( irc, s, proto, nick );
 	}
 	fclose( fp );
 	
 	if( set_getint( irc, "auto_connect" ) )
 	{
-		strcpy( s, "account on" );	/* Can't do this directly because r_c_s alters the string */
+		strlcpy( s, "account on", sizeof(s) );	/* Can't do this directly because r_c_s alters the string */
 		root_command_string( irc, ru, s, 0 );
 	}
 	
@@@@ -305,15 +310,15 @@@@ int bitlbee_save( irc_t *irc )
 		return( 0 );
 	}
 	
-	g_snprintf( path, 511, "%s%s%s", global.conf->configdir, irc->nick, ".nicks~" );
+	g_snprintf( path, sizeof(s), "%s%s%s", global.conf->configdir, irc->nick, ".nicks~" );
 	fp = fopen( path, "w" );
 	if( !fp ) return( 0 );
 	for( n = irc->nicks; n; n = n->next )
 	{
-		strcpy( s, n->handle );
-		s[169] = 0; /* Prevent any overflow (169 ~ 512 / 3) */
-		http_encode( s );
-		g_snprintf( s + strlen( s ), 510 - strlen( s ), " %d %s", n->proto, n->nick );
+		strlcpy( s, n->handle, sizeof(s) );
+		s[sizeof(s)/3] = 0; /* Prevent any overflow (169 ~ 512 / 3) */
+		http_encode( s, sizeof(s) );
+		g_snprintf( s + strlen( s ), sizeof(s) - strlen( s ), " %d %s", n->proto, n->nick );
 		if( fprintf( fp, "%s\n", s ) != strlen( s ) + 1 )
 		{
 			irc_usermsg( irc, "fprintf() wrote too little. Disk full?" );
@@@@ -327,7 +332,7 @@@@ int bitlbee_save( irc_t *irc )
 		return( 0 );
 	}
   
-	g_snprintf( new_path, 512, "%s%s%s", global.conf->configdir, irc->nick, ".nicks" );
+	g_snprintf( new_path, sizeof(new_path), "%s%s%s", global.conf->configdir, irc->nick, ".nicks" );
 	if( unlink( new_path ) != 0 )
 	{
 		if( errno != ENOENT )
@@@@ -342,7 +347,7 @@@@ int bitlbee_save( irc_t *irc )
 		return( 0 );
 	}
 	
-	g_snprintf( path, 511, "%s%s%s", global.conf->configdir, irc->nick, ".accounts~" );
+	g_snprintf( path, sizeof(path), "%s%s%s", global.conf->configdir, irc->nick, ".accounts~" );
 	fp = fopen( path, "w" );
 	if( !fp ) return( 0 );
 	if( fprintf( fp, "%s", hash ) != strlen( hash ) )
@@@@ -414,7 +419,7 @@@@ int bitlbee_save( irc_t *irc )
 		return( 0 );
 	}
 	
- 	g_snprintf( new_path, 512, "%s%s%s", global.conf->configdir, irc->nick, ".accounts" );
+ 	g_snprintf( new_path, sizeof(new_path), "%s%s%s", global.conf->configdir, irc->nick, ".accounts" );
  	if( unlink( new_path ) != 0 )
 	{
 		if( errno != ENOENT )
@


1.4
log
@update to bitlbee-1.0.4
ok simon@@ and maintainer Andrew Dalgleish;  tested by Wiktor Izdebski
@
text
@d1 1
a1 1
$OpenBSD: patch-bitlbee_c,v 1.3 2006/04/11 15:11:33 naddy Exp $
@


1.3
log
@update to 1.0.2; from maintainer Andrew Dalgleish
@
text
@d1 3
a3 3
$OpenBSD: patch-bitlbee_c,v 1.2 2004/10/21 14:48:51 naddy Exp $
--- bitlbee.c.orig	Sun Apr  2 04:53:38 2006
+++ bitlbee.c	Thu Apr  6 23:39:32 2006
d13 1
a13 1
@@@@ -154,8 +154,9 @@@@ gboolean bitlbee_io_current_client_read(
d25 1
a25 1
@@@@ -228,10 +229,11 @@@@ int bitlbee_load( irc_t *irc, const char
d38 1
a38 1
@@@@ -243,6 +245,7 @@@@ int bitlbee_load( irc_t *irc, const char
d46 1
a46 1
@@@@ -252,19 +255,21 @@@@ int bitlbee_load( irc_t *irc, const char
@


1.2
log
@Updated to 0.91; from Andrew Dalgleish <openbsd@@ajd.net.au>.
@
text
@d1 25
a25 4
$OpenBSD: patch-bitlbee_c,v 1.1 2004/06/20 16:27:49 naddy Exp $
--- bitlbee.c.orig	Wed Jul 21 09:36:07 2004
+++ bitlbee.c	Fri Oct 15 14:43:15 2004
@@@@ -306,7 +306,7 @@@@ int bitlbee_load( irc_t *irc, char* pass
d34 5
a38 1
@@@@ -318,6 +318,7 @@@@ int bitlbee_load( irc_t *irc, char* pass
d46 1
a46 1
@@@@ -327,7 +328,7 @@@@ int bitlbee_load( irc_t *irc, char* pass
d54 10
a63 2
 	while( fscanf( fp, "%s %d %s", s, &proto, nick ) > 0 )
@@@@ -339,7 +340,7 @@@@ int bitlbee_load( irc_t *irc, char* pass
d69 1
a69 1
 		root_command_string( irc, ru, s );
d72 1
a72 1
@@@@ -380,15 +381,15 @@@@ int bitlbee_save( irc_t *irc )
d93 2
a94 1
@@@@ -398,7 +399,7 @@@@ int bitlbee_save( irc_t *irc )
a95 1
 	fclose( fp );
d102 1
a102 1
@@@@ -413,7 +414,7 @@@@ int bitlbee_save( irc_t *irc )
d111 2
a112 1
@@@@ -481,7 +482,7 @@@@ int bitlbee_save( irc_t *irc )
a113 1
 	fclose( fp );
a119 40
@@@@ -565,8 +566,9 @@@@ void http_decode( char *s )
 {
 	char *t;
 	int i, j, k;
+	size_t s_len = strlen(s) + 1;
 	
-	t = bitlbee_alloc( strlen( s ) + 1 );
+	t = bitlbee_alloc(s_len);
 	
 	for( i = j = 0; s[i]; i ++, j ++ )
 	{
@@@@ -590,24 +592,24 @@@@ void http_decode( char *s )
 	}
 	t[j] = 0;
 	
-	strcpy( s, t );
+	strlcpy( s, t, s_len );
 	g_free( t );
 }
 
 /* Warning: This one explodes the string. Worst-cases can make the string 3x its original size! */
 /* This fuction is safe, but make sure you call it safely as well! */
-void http_encode( char *s )
+void http_encode( char *s, size_t s_len )
 {
 	char *t;
 	int i, j;
 	
 	t = g_strdup( s );
 	
-	for( i = j = 0; t[i]; i ++, j ++ )
+	for( i = j = 0; t[i] && j < s_len -1; i ++, j ++ )
 	{
 		if( t[i] <= ' ' || ((unsigned char *)t)[i] >= 128 || t[i] == '%' )
 		{
-			sprintf( s + j, "%%%02X", t[i] );
+			g_snprintf( s + j, s_len - j, "%%%02X", t[i] );
 			j += 2;
 		}
 		else
@


1.1
log
@Update to 0.90.
Partial audit for string handling.

From: Andrew Dalgleish <openbsd@@ajd.net.au>
@
text
@d1 4
a4 4
$OpenBSD$
--- bitlbee.c.orig	2004-05-28 08:31:48.000000000 +1000
+++ bitlbee.c	2004-06-09 22:14:42.000000000 +1000
@@@@ -314,12 +314,13 @@@@ int bitlbee_load( irc_t *irc, char* pass
d8 3
a10 5
-	g_snprintf( s, 511, "%s%s", irc->nick, ".accounts" );
+	g_snprintf( s, sizeof(s), "%s%s", irc->nick, ".accounts" );
   	path = g_build_path( G_DIR_SEPARATOR_S, global.conf->configdir, s, NULL );
    	fp = fopen( path, "r" );
    	g_free( path );
d13 1
a13 5
+	COMPILE_TIME_ASSERT(32 < sizeof(s));
 	fscanf( fp, "%32[^\n]s", s );
 	if( setpass( irc, password, s ) < 0 )
 		return( -1 );
@@@@ -328,6 +329,7 @@@@ int bitlbee_load( irc_t *irc, char* pass
d21 1
a21 1
@@@@ -337,12 +339,14 @@@@ int bitlbee_load( irc_t *irc, char* pass
d25 3
a27 5
-	g_snprintf( s, 511, "%s%s",  irc->nick, ".nicks" );
+	g_snprintf( s, sizeof(s), "%s%s",  irc->nick, ".nicks" );
 	path = g_build_path( G_DIR_SEPARATOR_S, global.conf->configdir, s, NULL );
 	fp = fopen( path, "r" );
 	g_free( path );
d29 2
a30 8
-	while( fscanf( fp, "%s %d %s", s, &proto, nick ) > 0 )
+	COMPILE_TIME_ASSERT(511 < sizeof(s));
+	COMPILE_TIME_ASSERT(24 < sizeof(nick));
+	while( fscanf( fp, "%511s %d %24s", s, &proto, nick ) > 0 )
 	{
 		http_decode( s );
 		nick_set( irc, s, proto, nick );
@@@@ -351,7 +355,7 @@@@ int bitlbee_load( irc_t *irc, char* pass
d32 1
a32 1
 	if( set_getint( IRC, "auto_connect" ) )
d39 1
a39 1
@@@@ -391,16 +395,16 @@@@ int bitlbee_save( irc_t *irc )
d43 2
a44 3
-	g_snprintf( s, 511, "%s%s", irc->nick, ".nicks~" );
+	g_snprintf( s, sizeof(s), "%s%s", irc->nick, ".nicks~" );
 	path = g_build_path(G_DIR_SEPARATOR_S, global.conf->configdir, s, NULL);
d47 1
a47 1
 	while( n )
d54 1
a54 1
+		s[sizeof(s)/3] = 0; /* Prevent any overflow when expanding to %02X */
d56 1
a56 1
+		g_snprintf( s + strlen( s ), sizeof(s)-strlen( s ), " %d %s", n->proto, n->nick );
d60 1
a60 1
@@@@ -412,7 +416,7 @@@@ int bitlbee_save( irc_t *irc )
d64 8
a71 8
-	g_snprintf( s, 512, "%s%s", irc->nick, ".nicks" );
+	g_snprintf( s, sizeof(s), "%s%s", irc->nick, ".nicks" );
 	old_path = g_build_path(G_DIR_SEPARATOR_S, global.conf->configdir, s, NULL);
 	if( unlink( old_path ) != 0 )
 	{
@@@@ -435,7 +439,7 @@@@ int bitlbee_save( irc_t *irc )
 	g_free( old_path );
 	
d73 2
a74 3
-	g_snprintf( s, 511, "%s%s", irc->nick, ".accounts~" );
+	g_snprintf( s, sizeof(s), "%s%s", irc->nick, ".accounts~" );
 	path = g_build_path(G_DIR_SEPARATOR_S, global.conf->configdir, s, NULL);
d77 2
a78 1
@@@@ -509,7 +513,7 @@@@ int bitlbee_save( irc_t *irc )
d82 3
a84 4
- 	g_snprintf( s, 512, "%s%s", irc->nick, ".accounts" );
+ 	g_snprintf( s, sizeof(s), "%s%s", irc->nick, ".accounts" );
  	old_path = g_build_path(G_DIR_SEPARATOR_S, global.conf->configdir, s, NULL);
  	if( unlink( old_path ) != 0 )
d86 2
a87 1
@@@@ -600,8 +604,9 @@@@ void http_decode( char *s )
d98 1
a98 1
@@@@ -625,24 +630,24 @@@@ void http_decode( char *s )
@

