head	1.2;
access;
symbols
	OPENBSD_3_0:1.1.1.1.0.8
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	brad_1999-11-12:1.1.1.1
	brad:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.04.01.23.41.24;	author pvalchev;	state dead;
branches;
next	1.1;

1.1
date	99.11.12.14.14.52;	author brad;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.12.14.14.52;	author brad;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix for the timeval/bpf_timeval conflict
@
text
@--- Makefile.in.orig	Thu Nov  4 13:15:54 1999
+++ Makefile.in	Thu Nov  4 13:37:50 1999
@@@@ -12,7 +12,7 @@@@
 # 2) Otherwise, if your system supports standard Unix "uncompress",
 #    then uncomment the following line to support on-the-fly
 #    decompression of ".Z" files...
-#DEFINES += -DUNCOMPRESS="\"uncompress\""
+DEFINES += -DUNCOMPRESS="\"uncompress\""
 # - we'll do path search on the string you specify.  If the program
 #    isn't in your path, you'll need to give the absolute path name.
 # - if you want other formats, see the "compress.h" file.
@@@@ -30,8 +30,8 @@@@
 # 
 ################################################################## 
 PCAP_LDLIBS = -lpcap
-PCAP_INCS    = -I/usr/local/include -I. -I../pcap -I/usr/include/pcap
-PCAP_LDFLAGS = -L/usr/local/lib -Llib -Lpcap -L../pcap
+PCAP_INCS    = 
+PCAP_LDFLAGS = 
 
 
 
@@@@ -125,7 +125,7 @@@@
 # Probably want full optimization
 # FreeBSD needs	-Ae
 # HP needs	-Ae
-CFLAGS = $(CCOPT) $(DEFINES) @@DEFS@@ @@V_DEFINES@@ $(INCLS)
+CFLAGS += $(DEFINES) @@DEFS@@ @@V_DEFINES@@ $(INCLS)
 
 # Standard LIBS
 LDLIBS = @@LIBS@@ ${PCAP_LDLIBS}
@@@@ -170,21 +170,13 @@@@
 	${CC} ${CFLAGS} -o version.o -c version.c \
 	-DBUILT_USER="\"`whoami`\"" -DBUILT_HOST="\"`hostname`\"" -DBUILT_DATE="\"`date`\""
 
-#
-# special rules for scanner/parser
-#
-# Note that I'm using the GNU bison/flex to get around the problems
-# caused by the fact that that pcap library ALSO uses YACC, which can
-# cause naming conflicts.  The Gnu versions let you get around that
-# easily.
-#
 filt_parser.c: filt_parser.y filter.h
-	bison -vd -p filtyy filt_parser.y -o filt_parser.c
-	cp filt_parser.c flex_bison
-	cp filt_parser.h flex_bison
+	yacc -dv -p filtyy -bfilt_parser filt_parser.y
+	mv filt_parser.tab.c filt_parser.c
+	mv filt_parser.tab.h filt_parser.h
 filt_scanner.c: filt_scanner.l filter.h filt_parser.h
 	flex -t -Pfiltyy filt_scanner.l > filt_scanner.c
-	cp filt_scanner.c flex_bison
+
 # filt_parser.h created as a side effect of running yacc...
 filt_parser.h: filt_parser.c
 
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@add tcptrace port; jethro@@dqc.org
-
tcptrace is a TCP dump file analysis tool written by Shawn Ostermann
at Ohio University. It is NOT a packet capture program. It reads
output dump files in the formats of several popular packet capturing
programs: tcpdump, snoop, etherpeek, and netm

For each connection, it keeps track of elapsed time, bytes/segments
sent and received, retransmissions, round trip times, window
advertisements, throughput, etc.  Its output format ranges from
Simple to Long to Very Detailed.
@
text
@@
