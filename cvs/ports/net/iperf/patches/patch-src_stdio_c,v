head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.18
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.16
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.14
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.10
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.12
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.8
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.03.03.12.29.44;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@- fix an off-by-one in iperf triggering a segfault with (insanely) high
bandwidths, seen when investigating some bug where a too-high bandwidth
was reported.

- patch configure to not remove the -g flag from CFLAGS

ok lteo@@
@
text
@$OpenBSD$

don't run past the end of kLabel_bit[] / kLabel_Byte[] for (stupidly)
high bandwidths.

--- src/stdio.c.orig	Sat Mar  2 02:07:53 2013
+++ src/stdio.c	Sat Mar  2 02:07:36 2013
@@@@ -210,12 +210,12 @@@@ void byte_snprintf( char* outString, int inLen,
                 conv = kConv_Unit;
 
                 if ( isupper((int)inFormat) ) {
-                    while ( tmpNum >= 1024.0  &&  conv <= kConv_Giga ) {
+                    while ( tmpNum >= 1024.0  &&  conv < kConv_Giga ) {
                         tmpNum /= 1024.0;
                         conv++;
                     }
                 } else {
-                    while ( tmpNum >= 1000.0  &&  conv <= kConv_Giga ) {
+                    while ( tmpNum >= 1000.0  &&  conv < kConv_Giga ) {
                         tmpNum /= 1000.0;
                         conv++;
                     }
@
