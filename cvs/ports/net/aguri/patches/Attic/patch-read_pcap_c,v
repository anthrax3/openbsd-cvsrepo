head	1.4;
access;
symbols
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	margarida_2003-05-04:1.1.1.1
	margarida:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2015.06.21.20.20.46;	author naddy;	state dead;
branches;
next	1.3;
commitid	Wz7LUfeAVOgOGqRl;

1.3
date	2015.01.23.13.01.16;	author naddy;	state Exp;
branches;
next	1.2;
commitid	DcRkpC5BFwTT64ya;

1.2
date	2003.05.05.02.41.51;	author margarida;	state dead;
branches;
next	1.1;

1.1
date	2003.05.04.18.57.29;	author margarida;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.04.18.57.29;	author margarida;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Remove obsolete ports that are no longer useful and that are unmaintained,
abandoned by upstream, and whose master sites are dead or disappearing.
ok jca@@, ajacoutot@@, dcoppa@@
@
text
@$OpenBSD: patch-read_pcap_c,v 1.3 2015/01/23 13:01:16 naddy Exp $
--- read_pcap.c.orig	Wed Mar 12 15:09:48 2003
+++ read_pcap.c	Fri Jan 23 13:54:16 2015
@@@@ -36,9 +36,6 @@@@
 #include <sys/socket.h>
 #include <sys/queue.h>
 #include <net/if.h>
-#ifdef __OpenBSD__
-#include <net/if_pflog.h>
-#endif
 #include <netinet/in.h>
 #include <netinet/in_systm.h>
 #include <netinet/if_ether.h>
@@@@ -46,6 +43,9 @@@@
 #include <netinet/udp.h>
 #ifdef INET6
 #include <netinet/ip6.h>
+#endif
+#ifdef __OpenBSD__
+#include <net/if_pflog.h>
 #endif
 #include <arpa/inet.h>
 #include <stdio.h>
@


1.3
log
@<netinet/in.h> before <net/pfvar.h>
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Update to version 0.7
Patch accepted by author, therefore removed.
From MAINTAINER: Jose Nazario <jose@@crimelabs.net>
@
text
@d1 4
a4 4
$OpenBSD: patch-read_pcap_c,v 1.1 2003/05/04 18:57:29 margarida Exp $
--- read_pcap.c.orig	Thu Mar 22 02:19:46 2001
+++ read_pcap.c	Sat Feb 22 14:37:30 2003
@@@@ -36,6 +36,7 @@@@
d8 3
a10 1
+#include <net/if_pflog.h>
d14 7
a20 10
@@@@ -63,6 +64,8 @@@@
 
 static void ether_if_read(u_char *user, const struct pcap_pkthdr *h,
 			  const u_char *p);
+static void pflog_if_read(u_char *user, const struct pcap_pkthdr *h,
+			  const u_char *p);
 static void fddi_if_read(u_char *user, const struct pcap_pkthdr *h,
 			 const u_char *p);
 static void atm_if_read(u_char *user, const struct pcap_pkthdr *h,
@@@@ -115,6 +118,7 @@@@ static struct printer printers[] = {
d22 2
a23 37
 	{ ppp_if_read,	DLT_PPP },
 	{ null_if_read,	DLT_NULL },
+	{ pflog_if_read,	DLT_PFLOG },
 	{ NULL,			0 },
 };
 
@@@@ -173,6 +177,30 @@@@ ether_if_read(u_char *user, const struct
 	} else if (ether_encap_read(ether_type, p, length, caplen) == 0) {
 		/* ether_type not known */
 	}
+}
+
+static void
+pflog_if_read(u_char *user, const struct pcap_pkthdr *h, const u_char *p)
+{
+	int caplen = h->caplen;
+	int length = h->len;
+
+	if (caplen < PFLOG_HDRLEN) {
+		return;
+	}
+
+	/*
+	 * Some printers want to get back at the ethernet addresses,
+	 * and/or check that they're not walking off the end of the packet.
+	 * Rather than pass them all the way down, we set these globals.
+	 */
+	packetp = p;
+	snapend = p + caplen;
+
+	p += PFLOG_HDRLEN;
+	length -= PFLOG_HDRLEN;
+	caplen -= PFLOG_HDRLEN;
+	ip_read(p, length);
 }
 
 static int
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@Initail import of aguri-0.5
--
Aguri is an aggregation-based traffic profiler targeted for
near real-time, long-term, and wide-area traffic monitoring.
Aguri adapts itself to spatial traffic distribution by
aggregating small volume flows into aggregates, and achieves
temporal aggregation by creating a summary of summaries applying
the same algorithm to its outputs.

From: Jose Nazario <jose@@crimelabs.net>
@
text
@@
