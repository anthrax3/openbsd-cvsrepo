head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.8
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.10
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.6
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.2
	OPENBSD_5_5_BASE:1.1.1.1
	zhuk_20131111:1.1.1.1
	zhuk:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2013.11.11.09.23.09;	author zhuk;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.11.11.09.23.09;	author zhuk;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@oRTP - a Real-time Transport Protocol (RFC3550) stack under LGPL.
It implements the RFC3550 (RTP) with a easy to use API with high and
low level access and features:
  * Support for multiples profiles, AV profile (RFC3551) being
    the one by default.
  * A packet scheduler for sending and recieving "on time", according
    to their timestamp. Scheduling is optionnal, RTP sessions can remain
    not scheduled.
  * Mutiplexing I/O, so that hundreds of RTP sessions can be scheduled
    by a single thread.
  * Adaptive jitter algorithm for a receiver to adapt to the clockrate
    of the sender.
  * Supports part of RFC2833 for telephone events over RTP.
  * The API is well documented using doxygen.
  * RTCP messages sent periodically since 0.7.0 (compound packet
    including sender report or receiver report + SDES).
  * An API to parse incoming RTCP packets.
@


1.1.1.1
log
@Import oRTP, RTP (RFC3550) implementation library. This is needed for
Jingle support in kopete-4.11.3. The kdenetwork-4.10.5 could also use it
for the same thing, but my tests showed that Jingle doesn't work there, so
no point in enabling it.

oRTP - a Real-time Transport Protocol (RFC3550) stack under LGPL.
It implements the RFC3550 (RTP) with a easy to use API with high and
low level access and features:
  * Support for multiples profiles, AV profile (RFC3551) being
    the one by default.
  * A packet scheduler for sending and recieving "on time", according
    to their timestamp. Scheduling is optionnal, RTP sessions can remain
    not scheduled.
  * Mutiplexing I/O, so that hundreds of RTP sessions can be scheduled
    by a single thread.
  * Adaptive jitter algorithm for a receiver to adapt to the clockrate
    of the sender.
  * Supports part of RFC2833 for telephone events over RTP.
  * The API is well documented using doxygen.
  * RTCP messages sent periodically since 0.7.0 (compound packet
    including sender report or receiver report + SDES).
  * An API to parse incoming RTCP packets.

okay landry@@
@
text
@@
