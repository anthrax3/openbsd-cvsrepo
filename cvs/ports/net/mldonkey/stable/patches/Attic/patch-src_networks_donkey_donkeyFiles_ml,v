head	1.3;
access;
symbols
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_3_9:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2007.04.19.23.04.53;	author espie;	state dead;
branches;
next	1.2;

1.2
date	2007.02.02.19.28.52;	author espie;	state Exp;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2007.01.24.01.32.51;	author espie;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2007.01.31.14.27.28;	author sturm;	state Exp;
branches;
next	;

1.2.2.1
date	2007.02.03.16.25.14;	author sturm;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2007.08.01.06.12.53;	author ajacoutot;	state dead;
branches;
next	;

1.2.4.1
date	2007.08.01.06.13.22;	author ajacoutot;	state dead;
branches;
next	;


desc
@@


1.3
log
@update to newer version, after checking it works fine.
@
text
@$OpenBSD: patch-src_networks_donkey_donkeyFiles_ml,v 1.2 2007/02/02 19:28:52 espie Exp $
--- src/networks/donkey/donkeyFiles.ml.orig	Tue Nov 21 23:34:33 2006
+++ src/networks/donkey/donkeyFiles.ml	Fri Feb  2 13:51:16 2007
@@@@ -123,7 +123,7 @@@@ module NewUpload = struct
 (*      lprintf "send_client_block\n"; *)
       if per_client > 0 && CommonUploads.can_write_len sock max_msg_size then
         match c.client_upload with
-        | Some ({ up_chunks = _ :: chunks } as up)  ->
+        | Some ({ up_chunks = current_chunk :: chunks } as up)  ->
             if up.up_file.file_shared = None then begin
 (* Is there a message to warn that a file is not shared anymore ? *)
                 c.client_upload <- None;
@@@@ -134,16 +134,17 @@@@ module NewUpload = struct
             if max_len <= msg_block_size_int then
 (* last block from chunk *)
               begin
+                send_small_block c sock up.up_file up.up_pos max_len;
                 if !verbose_upload then
                     lprintf_nl "End of chunk (%d) %Ld %s" max_len up.up_end_chunk (file_best_name up.up_file);
-                send_small_block c sock up.up_file up.up_pos max_len;
+		up.up_flying_chunks <- up.up_flying_chunks @@ [current_chunk];
                 up.up_chunks <- chunks;
                 let per_client = per_client - max_len in
                 match chunks with
-                  [] -> 
+		| [] -> 
                     if !verbose_upload then
-                        lprintf_nl "NO CHUNKS";
-                    c.client_upload <- None;
+                        lprintf_nl "NO MORE CHUNKS";
+		    up.up_waiting <- false;
                 | (begin_pos, end_pos) :: _ ->
                     up.up_pos <- begin_pos;
                     up.up_end_chunk <- end_pos;
@@@@ -168,10 +169,10 @@@@ module NewUpload = struct
           let size = min max_msg_size size in
           send_client_block c sock size;
            (match c.client_upload with
-              None -> ()
-            | Some up ->
+            | Some ({ up_chunks = _ :: _ }) ->
                 if !CommonUploads.has_upload = 0 then
                   CommonUploads.ready_for_upload (as_client c)
+	    | _ -> ()
           )
       )
     let _ =
@


1.2
log
@update to 2.8.2, appears to work fine on both i386 and sparc64.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2.4.1
log
@MFC (origal commit rui@@):
- update mldonkey to 2.9.0 (fix MLDonkey Network Modules IP Blocking Weakness)
Reference: http://secunia.com/advisories/26230/

ok sturm@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_networks_donkey_donkeyFiles_ml,v 1.2 2007/02/02 19:28:52 espie Exp $
@


1.2.2.1
log
@MFC:
fix a nasty bug, where emule clients receive twice (!) the data they want.
@
text
@d2 2
a3 2
--- src/networks/donkey/donkeyFiles.ml.orig	Sat May 20 01:43:54 2006
+++ src/networks/donkey/donkeyFiles.ml	Sat Feb  3 17:00:05 2007
d19 1
a19 1
                     lprintf_nl "END OF CHUNK (%d) %Ld" max_len up.up_end_chunk; 
d21 1
a21 1
+                up.up_flying_chunks <- up.up_flying_chunks @@ [current_chunk];
d26 1
a26 1
+                | [] -> 
d31 1
a31 1
+                    up.up_waiting <- false;
d36 1
a36 1
           let size = mini max_msg_size size in
@


1.2.2.2
log
@MFC (origal commit rui@@):
- update mldonkey to 2.9.0 (fix MLDonkey Network Modules IP Blocking Weakness)
Reference: http://secunia.com/advisories/26230/

ok sturm@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_networks_donkey_donkeyFiles_ml,v 1.2.2.1 2007/02/03 16:25:14 sturm Exp $
@


1.1
log
@fix a nasty bug, where emule clients receive twice (!) the data they want.
from spiralvoice, thx !
@
text
@d2 2
a3 2
--- src/networks/donkey/donkeyFiles.ml.orig	Sat May 20 01:43:54 2006
+++ src/networks/donkey/donkeyFiles.ml	Wed Jan 24 02:25:44 2007
d19 1
a19 1
                     lprintf_nl "END OF CHUNK (%d) %Ld" max_len up.up_end_chunk; 
d21 1
a21 1
+                up.up_flying_chunks <- up.up_flying_chunks @@ [current_chunk];
d26 1
a26 1
+                | [] -> 
d31 1
a31 1
+                    up.up_waiting <- false;
d36 1
a36 1
           let size = mini max_msg_size size in
@


1.1.2.1
log
@MFC:
fix a nasty bug, where emule clients receive twice (!) the data they want.
@
text
@d2 3
a4 3
--- src/networks/donkey/donkeyFiles.ml.orig	Mon Aug 15 22:27:56 2005
+++ src/networks/donkey/donkeyFiles.ml	Wed Jan 31 15:18:34 2007
@@@@ -127,7 +127,7 @@@@ module NewUpload = struct
d6 1
a6 1
       if per_client > 0 && CommonUploads.remaining_bandwidth () > 0 then
d13 1
a13 1
@@@@ -138,18 +138,19 @@@@ module NewUpload = struct
d18 2
a19 3
                 if verbose_upload then begin
                     lprintf "END OF CHUNK (%d) %Ld\n" max_len up.up_end_chunk; 
                   end;
d27 2
a28 4
                     if verbose_upload then begin
-                        lprintf "NO CHUNKS\n"; 
+                        lprintf "NO MORE CHUNKS\n"; 
                       end;
d30 1
d35 4
a38 4
@@@@ -181,10 +182,10 @@@@ module NewUpload = struct
               send_client_block c sock size;
             end;
           (match c.client_upload with
d44 1
a44 1
+            | _ -> ()
@

