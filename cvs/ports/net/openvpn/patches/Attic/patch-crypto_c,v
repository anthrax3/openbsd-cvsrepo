head	1.1;
access;
symbols
	OPENBSD_5_3:1.1.0.2;
locks; strict;
comment	@# @;


1.1
date	2013.05.22.12.18.34;	author jasper;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2013.05.22.12.18.34;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file patch-crypto_c was initially added on branch OPENBSD_5_3.
@
text
@@


1.1.2.1
log
@Security fix for CVE-2013-2061
OpenVPN use of non-constant-time memcmp in HMAC comparison in openvpn_decrypt

Patch from upstream, it's also in -current as part of the update to 2.3.1.
Also remove maintainer as per -current.

ok sthen@@
@
text
@a0 44
$OpenBSD$

Security fix for CVE-2013-2061
OpenVPN use of non-constant-time memcmp in HMAC comparison in openvpn_decrypt

Patch from upstream:
https://github.com/OpenVPN/openvpn/commit/11d21349a4e7e38a025849479b36ace7c2eec2ee

--- crypto.c.orig	Tue Dec 13 17:58:56 2011
+++ crypto.c	Wed May 22 13:35:14 2013
@@@@ -70,6 +70,24 @@@@
 #define CRYPT_ERROR(format) \
   do { msg (D_CRYPT_ERRORS, "%s: " format, error_prefix); goto error_exit; } while (false)
 
+/**
+ * As memcmp(), but constant-time.
+ * Returns 0 when data is equal, non-zero otherwise.
+ */
+static int
+memcmp_constant_time (const void *a, const void *b, size_t size) {
+  const uint8_t * a1 = a;
+  const uint8_t * b1 = b;
+  int ret = 0;
+  size_t i;
+
+  for (i = 0; i < size; i++) {
+      ret |= *a1++ ^ *b1++;
+  }
+
+  return ret;
+}
+
 void
 openvpn_encrypt (struct buffer *buf, struct buffer work,
 		 const struct crypto_options *opt,
@@@@ -254,7 +272,7 @@@@ openvpn_decrypt (struct buffer *buf, struct buffer wor
 	  ASSERT (hmac_len == in_hmac_len);
 
 	  /* Compare locally computed HMAC with packet HMAC */
-	  if (memcmp (local_hmac, BPTR (buf), hmac_len))
+	  if (memcmp_constant_time (local_hmac, BPTR (buf), hmac_len))
 	    CRYPT_ERROR ("packet HMAC authentication failed");
 
 	  ASSERT (buf_advance (buf, hmac_len));
@

