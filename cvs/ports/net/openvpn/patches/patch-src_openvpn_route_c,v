head	1.7;
access;
symbols
	OPENBSD_6_0:1.5.0.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2017.02.06.10.22.35;	author jca;	state Exp;
branches;
next	1.6;
commitid	dOINaqHt8Qsgwt7s;

1.6
date	2016.12.18.18.58.01;	author jca;	state Exp;
branches;
next	1.5;
commitid	rNZutRfSteEJzXa0;

1.5
date	2016.11.18.16.18.52;	author jca;	state Exp;
branches
	1.5.2.1;
next	1.4;
commitid	QqVIkoRAtPHwzNcY;

1.4
date	2014.10.21.17.55.11;	author sthen;	state dead;
branches;
next	1.3;
commitid	I9mPYlOxkQdrAcAd;

1.3
date	2014.10.10.21.07.07;	author sthen;	state Exp;
branches;
next	1.2;
commitid	EvH0l5FzP6VUpf6K;

1.2
date	2013.10.21.09.15.07;	author bluhm;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2013.05.01.15.40.33;	author sthen;	state Exp;
branches;
next	;

1.2.4.1
date	2014.12.01.21.44.53;	author sthen;	state dead;
branches;
next	;
commitid	r8kDyMxYmUU1ERGu;

1.5.2.1
date	2016.11.23.14.29.33;	author sthen;	state Exp;
branches;
next	;
commitid	Qdd8WrxGb4EX6OKH;


desc
@@


1.7
log
@Update to openvpn-2.4.0

Lots of new features and changes, see

  https://github.com/OpenVPN/openvpn/blob/master/Changes.rst

Tests by danj@@ and Bryan Linton, ok danj@@
@
text
@$OpenBSD: patch-src_openvpn_route_c,v 1.6 2016/12/18 18:58:01 jca Exp $

- add support for on-link routes

--- src/openvpn/route.c.orig	Mon Dec 26 12:51:00 2016
+++ src/openvpn/route.c	Tue Jan 17 03:36:54 2017
@@@@ -1758,12 +1758,17 @@@@ add_route(struct route_ipv4 *r,
     }
 #endif
 
-    argv_printf_cat(&argv, "-net %s %s -netmask %s",
+    argv_printf_cat (&argv, "-net %s -netmask %s",
                     network,
-                    gateway,
                     netmask);
 
-    /* FIXME -- add on-link support for OpenBSD/NetBSD */
+    /* FIXME -- add on-link support for NetBSD */
+#ifdef TARGET_OPENBSD
+    if (is_on_link (is_local_route, flags, rgi))
+        argv_printf_cat (&argv, "-link -iface %s", rgi->iface);
+    else
+#endif
+        argv_printf_cat (&argv, "%s", gateway);
 
     argv_msg(D_ROUTE, &argv);
     status = openvpn_execve_check(&argv, es, 0, "ERROR: OpenBSD/NetBSD route add command failed");
@


1.6
log
@Update to openvpn-2.3.14

Kill most of our tun patches go away in the process.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openvpn_route_c,v 1.5 2016/11/18 16:18:52 jca Exp $
d5 4
a8 4
--- src/openvpn/route.c.orig	Wed Dec  7 12:35:43 2016
+++ src/openvpn/route.c	Tue Dec 13 18:55:42 2016
@@@@ -1501,12 +1501,17 @@@@ add_route (struct route_ipv4 *r,
     argv_printf_cat (&argv, "-rtt %d", r->metric);
d11 5
a15 5
-  argv_printf_cat (&argv, "-net %s %s -netmask %s",
+  argv_printf_cat (&argv, "-net %s -netmask %s",
 	      network,
-	      gateway,
 	      netmask);
d17 2
a18 2
-  /* FIXME -- add on-link support for OpenBSD/NetBSD */
+  /* FIXME -- add on-link support for NetBSD */
d20 3
a22 3
+  if (is_on_link (is_local_route, flags, rgi))
+    argv_printf_cat (&argv, "-link -iface %s", rgi->iface);
+  else
d24 1
a24 1
+    argv_printf_cat (&argv, "%s", gateway);
d26 2
a27 2
   argv_msg (D_ROUTE, &argv);
   status = openvpn_execve_check (&argv, es, 0, "ERROR: OpenBSD/NetBSD route add command failed");
@


1.5
log
@Add support for on-link routes.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 3
--- src/openvpn/route.c.orig	Tue May 10 08:02:33 2016
+++ src/openvpn/route.c	Thu Nov 17 07:15:54 2016
@@@@ -1501,12 +1501,14 @@@@ add_route (struct route_ipv4 *r,
d18 2
d23 1
@


1.5.2.1
log
@MFC recent hack to OpenVPN for "topology subnet" setups that avoids triggering
the "Too many levels of symbolic links" error following changes to the kernel.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openvpn_route_c,v 1.5 2016/11/18 16:18:52 jca Exp $
@


1.4
log
@Fix mis-merge in last commit, restoring some route operations which got broken.
Thanks to Mattieu Baptiste for reporting the problem and testing the fix.
@
text
@d1 9
a9 4
$OpenBSD: patch-src_openvpn_route_c,v 1.3 2014/10/10 21:07:07 sthen Exp $
--- src/openvpn/route.c.orig	Thu May  1 12:12:22 2014
+++ src/openvpn/route.c	Tue Jul 29 22:10:23 2014
@@@@ -2918,7 +2918,7 @@@@ get_default_gateway (struct route_gateway_info *rgi)
d11 5
a15 1
 #undef max
d17 5
a21 2
-#elif defined(TARGET_OPENBSD) || defined(TARGET_NETBSD)
+#elif defined(TARGET_NETBSD)
d23 2
a24 2
 #include <sys/types.h>
 #include <sys/socket.h>
@


1.3
log
@update to openvpn-2.3.4
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openvpn_route_c,v 1.2 2013/10/21 09:15:07 bluhm Exp $
@


1.2
log
@OpenVPN copies part of the net/route.h header file into their route.c
source file.  They cannot include it, because the kernel route
structure has a name conflict with the openvpn route structure.
The obvious solution is to rename the openvpn route.  According to
the sources, NetBSD and FreeBSD and Dragonfly also suffer from that.

This change is needed for an upcoming routing message change.  We
do not want to patch the port each time when we change the system
header file.

Test and OK sthen@@
@
text
@d1 4
a4 166
$OpenBSD: patch-src_openvpn_route_c,v 1.1 2013/05/01 15:40:33 sthen Exp $
--- src/openvpn/route.c.orig	Thu Mar 28 10:31:03 2013
+++ src/openvpn/route.c	Sat Oct 19 16:00:06 2013
@@@@ -49,7 +49,7 @@@@
 #define METRIC_NOT_USED ((DWORD)-1)
 #endif
 
-static void delete_route (struct route *r, const struct tuntap *tt, unsigned int flags, const struct route_gateway_info *rgi, const struct env_set *es);
+static void delete_route (struct route_base *r, const struct tuntap *tt, unsigned int flags, const struct route_gateway_info *rgi, const struct env_set *es);
 
 static void get_bypass_addresses (struct route_bypass *rb, const unsigned int flags);
 
@@@@ -150,7 +150,7 @@@@ struct route_list *
 new_route_list (const int max_routes, struct gc_arena *a)
 {
   struct route_list *ret;
-  ALLOC_VAR_ARRAY_CLEAR_GC (ret, struct route_list, struct route, max_routes, a);
+  ALLOC_VAR_ARRAY_CLEAR_GC (ret, struct route_list, struct route_base, max_routes, a);
   ret->capacity = max_routes;
   return ret;
 }
@@@@ -165,7 +165,7 @@@@ new_route_ipv6_list (const int max_routes, struct gc_a
 }
 
 static const char *
-route_string (const struct route *r, struct gc_arena *gc)
+route_string (const struct route_base *r, struct gc_arena *gc)
 {
   struct buffer out = alloc_buf_gc (256, gc);
   buf_printf (&out, "ROUTE network %s netmask %s gateway %s",
@@@@ -267,7 +267,7 @@@@ is_special_addr (const char *addr_str)
 }
 
 static bool
-init_route (struct route *r,
+init_route (struct route_base *r,
 	    struct addrinfo **network_list,
 	    const struct route_option *ro,
 	    const struct route_list *rl)
@@@@ -484,7 +484,7 @@@@ void
 clear_route_list (struct route_list *rl)
 {
   const int capacity = rl->capacity;
-  const size_t rl_size = array_mult_safe (sizeof(struct route), capacity, sizeof(struct route_list));
+  const size_t rl_size = array_mult_safe (sizeof(struct route_base), capacity, sizeof(struct route_list));
   memset(rl, 0, rl_size);
   rl->capacity = capacity;
 }
@@@@ -518,7 +518,7 @@@@ add_block_local_item (struct route_list *rl,
       && rl->rgi.gateway.netmask < 0xFFFFFFFF
       && (rl->n)+2 <= rl->capacity)
     {
-      struct route r;
+      struct route_base r;
       unsigned int l2;
 
       /* split a route into two smaller blocking routes, and direct them to target */
@@@@ -648,7 +648,7 @@@@ init_route_list (struct route_list *rl,
     for (i = 0; i < opt->n; ++i)
       {
         struct addrinfo* netlist;
-	struct route r;
+	struct route_base r;
 
 	if (!init_route (&r,
 			 &netlist,
@@@@ -759,7 +759,7 @@@@ add_route3 (in_addr_t network,
 	    const struct route_gateway_info *rgi,
 	    const struct env_set *es)
 {
-  struct route r;
+  struct route_base r;
   CLEAR (r);
   r.flags = RT_DEFINED;
   r.network = network;
@@@@ -777,7 +777,7 @@@@ del_route3 (in_addr_t network,
 	    const struct route_gateway_info *rgi,
 	    const struct env_set *es)
 {
-  struct route r;
+  struct route_base r;
   CLEAR (r);
   r.flags = RT_DEFINED|RT_ADDED;
   r.network = network;
@@@@ -1027,7 +1027,7 @@@@ add_routes (struct route_list *rl, struct route_ipv6_l
       
       for (i = 0; i < rl->n; ++i)
 	{
-	  struct route *r = &rl->routes[i];
+	  struct route_base *r = &rl->routes[i];
 	  check_subnet_conflict (r->network, r->netmask, "route");
 	  if (flags & ROUTE_DELETE_FIRST)
 	    delete_route (r, tt, flags, &rl->rgi, es);
@@@@ -1059,7 +1059,7 @@@@ delete_routes (struct route_list *rl, struct route_ipv
       int i;
       for (i = rl->n - 1; i >= 0; --i)
 	{
-	  struct route * r = &rl->routes[i];
+	  struct route_base * r = &rl->routes[i];
 	  delete_route (r, tt, flags, &rl->rgi, es);
 	}
       rl->iflags &= ~RL_ROUTES_ADDED;
@@@@ -1153,7 +1153,7 @@@@ print_default_gateway(const int msglevel, const struct
 #endif
 
 static void
-print_route (const struct route *r, int level)
+print_route (const struct route_base *r, int level)
 {
   struct gc_arena gc = gc_new ();
   if (r->flags & RT_DEFINED)
@@@@ -1170,7 +1170,7 @@@@ print_routes (const struct route_list *rl, int level)
 }
 
 static void
-setenv_route (struct env_set *es, const struct route *r, int i)
+setenv_route (struct env_set *es, const struct route_base *r, int i)
 {
   struct gc_arena gc = gc_new ();
   if (r->flags & RT_DEFINED)
@@@@ -1287,7 +1287,7 @@@@ is_on_link (const int is_local_route, const unsigned i
 }
 
 void
-add_route (struct route *r,
+add_route (struct route_base *r,
 	   const struct tuntap *tt,
 	   unsigned int flags,
 	   const struct route_gateway_info *rgi, /* may be NULL */
@@@@ -1727,7 +1727,7 @@@@ add_route_ipv6 (struct route_ipv6 *r6, const struct tu
 }
 
 static void
-delete_route (struct route *r,
+delete_route (struct route_base *r,
 	      const struct tuntap *tt,
 	      unsigned int flags,
 	      const struct route_gateway_info *rgi,
@@@@ -2231,7 +2231,7 @@@@ get_default_gateway (struct route_gateway_info *rgi)
 }
 
 static DWORD
-windows_route_find_if_index (const struct route *r, const struct tuntap *tt)
+windows_route_find_if_index (const struct route_base *r, const struct tuntap *tt)
 {
   struct gc_arena gc = gc_new ();
   DWORD ret = TUN_ADAPTER_INDEX_INVALID;
@@@@ -2276,7 +2276,7 @@@@ windows_route_find_if_index (const struct route *r, co
 }
 
 bool
-add_route_ipapi (const struct route *r, const struct tuntap *tt, DWORD adapter_index)
+add_route_ipapi (const struct route_base *r, const struct tuntap *tt, DWORD adapter_index)
 {
   struct gc_arena gc = gc_new ();
   bool ret = false;
@@@@ -2350,7 +2350,7 @@@@ add_route_ipapi (const struct route *r, const struct t
 }
 
 bool
-del_route_ipapi (const struct route *r, const struct tuntap *tt)
+del_route_ipapi (const struct route_base *r, const struct tuntap *tt)
 {
   struct gc_arena gc = gc_new ();
   bool ret = false;
@@@@ -2957,7 +2957,7 @@@@ get_default_gateway (struct route_gateway_info *rgi)
a12 120
@@@@ -3008,6 +3008,119 @@@@ struct rt_msghdr {
 	u_long	rtm_inits;	/* which metrics we are initializing */
 	struct	rt_metrics rtm_rmx; /* metrics themselves */
 };
+
+struct {
+  struct rt_msghdr m_rtm;
+  char       m_space[512];
+} m_rtmsg;
+
+#define ROUNDUP(a) \
+        ((a) > 0 ? (1 + (((a) - 1) | (sizeof(long) - 1))) : sizeof(long))
+
+/*
+ * FIXME -- add support for netmask, hwaddr, and iface
+ */
+void
+get_default_gateway (struct route_gateway_info *rgi)
+{
+  struct gc_arena gc = gc_new ();
+  int s, seq, l, rtm_addrs, i;
+  pid_t pid;
+  struct sockaddr so_dst, so_mask;
+  char *cp = m_rtmsg.m_space; 
+  struct sockaddr *gate = NULL, *sa;
+  struct  rt_msghdr *rtm_aux;
+
+#define NEXTADDR(w, u) \
+        if (rtm_addrs & (w)) {\
+            l = ROUNDUP(u.sa_len); memmove(cp, &(u), l); cp += l;\
+        }
+
+#define ADVANCE(x, n) (x += ROUNDUP((n)->sa_len))
+
+#define rtm m_rtmsg.m_rtm
+
+  CLEAR(*rgi);
+
+  pid = getpid();
+  seq = 0;
+  rtm_addrs = RTA_DST | RTA_NETMASK;
+
+  bzero(&so_dst, sizeof(so_dst));
+  bzero(&so_mask, sizeof(so_mask));
+  bzero(&rtm, sizeof(struct rt_msghdr));
+
+  rtm.rtm_type = RTM_GET;
+  rtm.rtm_flags = RTF_UP | RTF_GATEWAY;
+  rtm.rtm_version = RTM_VERSION;
+  rtm.rtm_seq = ++seq;
+  rtm.rtm_addrs = rtm_addrs; 
+
+  so_dst.sa_family = AF_INET;
+  so_dst.sa_len = sizeof(struct sockaddr_in);
+  so_mask.sa_family = AF_INET;
+  so_mask.sa_len = sizeof(struct sockaddr_in);
+
+  NEXTADDR(RTA_DST, so_dst);
+  NEXTADDR(RTA_NETMASK, so_mask);
+
+  rtm.rtm_msglen = l = cp - (char *)&m_rtmsg;
+
+  s = socket(PF_ROUTE, SOCK_RAW, 0);
+
+  if (write(s, (char *)&m_rtmsg, l) < 0)
+    {
+      msg(M_WARN|M_ERRNO, "Could not retrieve default gateway from route socket:");
+      gc_free (&gc);
+      close(s);
+      return;
+    }
+
+  do {
+    l = read(s, (char *)&m_rtmsg, sizeof(m_rtmsg));
+  } while (l > 0 && (rtm.rtm_seq != seq || rtm.rtm_pid != pid));
+                        
+  close(s);
+
+  rtm_aux = &rtm;
+
+  cp = ((char *)(rtm_aux + 1));
+  if (rtm_aux->rtm_addrs) {
+    for (i = 1; i; i <<= 1)
+      if (i & rtm_aux->rtm_addrs) {
+	sa = (struct sockaddr *)cp;
+	if (i == RTA_GATEWAY )
+	  gate = sa;
+	ADVANCE(cp, sa);
+      }
+  }
+  else
+    {
+      gc_free (&gc);
+      return;
+    }
+
+
+  if (gate != NULL )
+    {
+      rgi->gateway.addr = ntohl(((struct sockaddr_in *)gate)->sin_addr.s_addr);
+      rgi->flags |= RGI_ADDR_DEFINED;
+
+      gc_free (&gc);
+    }
+  else
+    {
+      gc_free (&gc);
+    }
+}
+
+#elif defined(TARGET_OPENBSD)
+
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+
+#include <net/route.h>
 
 struct {
   struct rt_msghdr m_rtm;
@


1.2.4.1
log
@MFC - update to OpenVPN 2.3.6, fixing some assertion crashes (DoS)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openvpn_route_c,v 1.2 2013/10/21 09:15:07 bluhm Exp $
@


1.1
log
@Reinstate route.c patch, lost in the update to 2.3.1 where upstream rearranged
files. Found the hard way by, and diff from, Yoshihisa Matsushita.
@
text
@d1 165
a165 3
$OpenBSD$
--- src/openvpn/route.c.orig	Wed May  1 09:55:36 2013
+++ src/openvpn/route.c	Wed May  1 09:58:14 2013
d175 1
a175 3
@@@@ -3006,6 +3006,169 @@@@ struct rt_msghdr {
 	int	rtm_errno;	/* why failed */
 	int	rtm_use;	/* from rtentry */
d177 2
a178 2
+	struct	rt_metrics rtm_rmx; /* metrics themselves */
+};
d291 1
a291 51
+/* all of this is taken from <net/route.h> in OpenBSD 5.3 */
+#define RTA_DST		0x1	/* destination sockaddr present */
+#define RTA_GATEWAY	0x2	/* gateway sockaddr present */
+#define RTA_NETMASK	0x4	/* netmask sockaddr present */
+
+#define RTM_GET		0x4	/* Report Metrics */
+
+#define RTM_VERSION	4	/* Up the ante and ignore older versions */
+
+#define	RTF_UP		0x1	/* route usable */
+#define	RTF_GATEWAY	0x2	/* destination is a gateway */
+
+/*
+ * Huge version for userland compatibility.
+ */
+struct rt_metrics {
+	u_int64_t	rmx_pksent;	/* packets sent using this route */
+	u_int		rmx_locks;	/* Kernel must leave these values */
+	u_int		rmx_mtu;	/* MTU for this path */
+	u_int		rmx_expire;	/* lifetime for route, e.g. redirect */
+	u_int		rmx_refcnt;	/* # references hold */
+	/* some apps may still need these no longer used metrics */
+	u_int		rmx_hopcount;	/* max hops expected */
+	u_int		rmx_recvpipe;	/* inbound delay-bandwidth product */
+	u_int		rmx_sendpipe;	/* outbound delay-bandwidth product */
+	u_int		rmx_ssthresh;	/* outbound gateway buffer limit */
+	u_int		rmx_rtt;	/* estimated round trip time */
+	u_int		rmx_rttvar;	/* estimated rtt variance */
+};
+
+/*
+ * Structures for routing messages.
+ */
+struct rt_msghdr {
+	u_short	rtm_msglen;	/* to skip over non-understood messages */
+	u_char	rtm_version;	/* future binary compatibility */
+	u_char	rtm_type;	/* message type */
+	u_short	rtm_hdrlen;	/* sizeof(rt_msghdr) to skip over the header */
+	u_short	rtm_index;	/* index for associated ifp */
+	u_short rtm_tableid;	/* routing table id */
+	u_char	rtm_priority;	/* routing priority */
+	u_char	rtm_mpls;	/* MPLS additional infos */
+	int	rtm_addrs;	/* bitmask identifying sockaddrs in msg */
+	int	rtm_flags;	/* flags, incl. kern & message, e.g. DONE */
+	int	rtm_fmask;	/* bitmask used in RTM_CHANGE message */
+	pid_t	rtm_pid;	/* identify sender */
+	int	rtm_seq;	/* for sender to identify action */
+	int	rtm_errno;	/* why failed */
+	u_int	rtm_inits;	/* which metrics we are initializing */
 	struct	rt_metrics rtm_rmx; /* metrics themselves */
 };
d293 2
@

