head	1.11;
access;
symbols
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.11
date	2017.02.06.10.22.35;	author jca;	state Exp;
branches;
next	1.10;
commitid	dOINaqHt8Qsgwt7s;

1.10
date	2016.12.18.18.58.01;	author jca;	state Exp;
branches;
next	1.9;
commitid	rNZutRfSteEJzXa0;

1.9
date	2016.11.18.16.21.44;	author jca;	state Exp;
branches;
next	1.8;
commitid	Ejn11WTuvoG9dkaI;

1.8
date	2015.12.18.02.17.45;	author sthen;	state Exp;
branches
	1.8.4.1;
next	1.7;
commitid	FgEmYNmz7Jry1aOA;

1.7
date	2015.10.23.15.10.36;	author sthen;	state Exp;
branches;
next	1.6;
commitid	OjKF15WyTxkrbSuO;

1.6
date	2015.09.16.09.07.30;	author sthen;	state Exp;
branches;
next	1.5;
commitid	y5HVRX756YVXqKJE;

1.5
date	2015.09.16.08.45.16;	author sthen;	state Exp;
branches;
next	1.4;
commitid	N8Fxo1kVvWA8Dofi;

1.4
date	2015.06.25.08.46.49;	author sthen;	state Exp;
branches;
next	1.3;
commitid	QNysjJaTNcNy1etT;

1.3
date	2014.10.10.21.07.07;	author sthen;	state Exp;
branches;
next	1.2;
commitid	EvH0l5FzP6VUpf6K;

1.2
date	2013.10.21.09.15.07;	author bluhm;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2013.04.20.16.22.55;	author sthen;	state Exp;
branches;
next	;

1.2.4.1
date	2014.12.01.21.44.53;	author sthen;	state Exp;
branches;
next	;
commitid	r8kDyMxYmUU1ERGu;

1.8.4.1
date	2016.11.23.14.29.33;	author sthen;	state Exp;
branches;
next	;
commitid	Qdd8WrxGb4EX6OKH;


desc
@@


1.11
log
@Update to openvpn-2.4.0

Lots of new features and changes, see

  https://github.com/OpenVPN/openvpn/blob/master/Changes.rst

Tests by danj@@ and Bryan Linton, ok danj@@
@
text
@$OpenBSD: patch-src_openvpn_tun_c,v 1.10 2016/12/18 18:58:01 jca Exp $

- no need for link0 any more, we have separate tap interfaces

--- src/openvpn/tun.c.orig	Mon Dec 26 12:51:00 2016
+++ src/openvpn/tun.c	Tue Jan 17 03:39:13 2017
@@@@ -1196,7 +1196,7 @@@@ do_ifconfig(struct tuntap *tt,
         if (tun)
         {
             argv_printf(&argv,
-                        "%s %s %s %s mtu %d netmask 255.255.255.255 up -link0",
+                        "%s %s %s %s mtu %d netmask 255.255.255.255 up",
                         IFCONFIG_PATH,
                         actual,
                         ifconfig_local,
@@@@ -1208,7 +1208,7 @@@@ do_ifconfig(struct tuntap *tt,
         {
             remote_end = create_arbitrary_remote( tt );
             argv_printf(&argv,
-                        "%s %s %s %s mtu %d netmask %s up -link0",
+                        "%s %s %s %s mtu %d netmask %s up",
                         IFCONFIG_PATH,
                         actual,
                         ifconfig_local,
@@@@ -1219,8 +1219,13 @@@@ do_ifconfig(struct tuntap *tt,
         }
         else
         {
+           /*
+            * OpenBSD has distinct tun and tap devices
+            * so we don't need the "link0" extra parameter to specify we want to do
+            * tunneling at the ethernet level
+            */
             argv_printf(&argv,
-                        "%s %s %s netmask %s mtu %d broadcast %s link0",
+                        "%s %s %s netmask %s mtu %d broadcast %s",
                         IFCONFIG_PATH,
                         actual,
                         ifconfig_local,
@


1.10
log
@Update to openvpn-2.3.14

Kill most of our tun patches go away in the process.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openvpn_tun_c,v 1.9 2016/11/18 16:21:44 jca Exp $
d5 35
a39 35
--- src/openvpn/tun.c.orig	Wed Dec  7 12:35:43 2016
+++ src/openvpn/tun.c	Tue Dec 13 18:17:14 2016
@@@@ -928,7 +928,7 @@@@ do_ifconfig (struct tuntap *tt,
       /* example: ifconfig tun2 10.2.0.2 10.2.0.1 mtu 1450 netmask 255.255.255.255 up */
       if (tun)
 	argv_printf (&argv,
-			  "%s %s %s %s mtu %d netmask 255.255.255.255 up -link0",
+			  "%s %s %s %s mtu %d netmask 255.255.255.255 up",
 			  IFCONFIG_PATH,
 			  actual,
 			  ifconfig_local,
@@@@ -940,7 +940,7 @@@@ do_ifconfig (struct tuntap *tt,
 	{
 	    remote_end = create_arbitrary_remote( tt );
 	    argv_printf (&argv,
-			  "%s %s %s %s mtu %d netmask %s up -link0",
+			  "%s %s %s %s mtu %d netmask %s up",
 			  IFCONFIG_PATH,
 			  actual,
 			  ifconfig_local,
@@@@ -950,8 +950,13 @@@@ do_ifconfig (struct tuntap *tt,
 			  );
 	}
       else
+      /*
+       * OpenBSD has distinct tun and tap devices
+       * so we don't need the "link0" extra parameter to specify we want to do
+       * tunneling at the ethernet level
+       */
 	argv_printf (&argv,
-			  "%s %s %s netmask %s mtu %d broadcast %s link0",
+			  "%s %s %s netmask %s mtu %d broadcast %s",
 			  IFCONFIG_PATH,
 			  actual,
 			  ifconfig_local,
@


1.9
log
@Add a hack for topology subnet setups and bump REVISION.

Previously route insertion failed with ELOOP because the gateway wasn't
directly connected.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openvpn_tun_c,v 1.8 2015/12/18 02:17:45 sthen Exp $
a3 3
- our ifconfig doesn't support passing a prefix as point-to-point dest
  address.  In subnet topology, use the local address as a fake dest addr, and
  manually add a route for the prefix on the interface.
d5 3
a7 22
--- src/openvpn/tun.c.orig	Tue May 10 08:02:33 2016
+++ src/openvpn/tun.c	Thu Nov 17 10:42:55 2016
@@@@ -914,8 +914,17 @@@@ do_ifconfig (struct tuntap *tt,
 
       tt->did_ifconfig = true;
 
-#elif defined(TARGET_OPENBSD)
+#elif defined(TARGET_NETBSD) || defined(TARGET_OPENBSD)
 
+/*
+ * OpenBSD can do IPv6. NetBSD's IPv6 support over tun can be detected by
+ * availability of the TUNSIFHEAD ioctl() - see next TARGET_NETBSD block
+ * for more details.
+ */
+#if defined(TUNSIFHEAD)||defined(TARGET_OPENBSD)
+# define MULTI_AF
+#endif
+
       /*
        * On OpenBSD, tun interfaces are persistent if created with
        * "ifconfig tunX create", and auto-destroyed if created by
@@@@ -925,66 +934,6 @@@@ do_ifconfig (struct tuntap *tt,
d12 8
a19 10
-			  IFCONFIG_PATH,
-			  actual,
-			  ifconfig_local,
-			  ifconfig_remote_netmask,
-			  tun_mtu
-			  );
-      else
-	if ( tt->topology == TOP_SUBNET )
-	{
-	    argv_printf (&argv,
d21 1
a21 49
-			  IFCONFIG_PATH,
-			  actual,
-			  ifconfig_local,
-			  ifconfig_local,
-			  tun_mtu,
-			  ifconfig_remote_netmask
-			  );
-	}
-      else
-	argv_printf (&argv,
-			  "%s %s %s netmask %s mtu %d broadcast %s link0",
-			  IFCONFIG_PATH,
-			  actual,
-			  ifconfig_local,
-			  ifconfig_remote_netmask,
-			  tun_mtu,
-			  ifconfig_broadcast
-			  );
-      argv_msg (M_INFO, &argv);
-      openvpn_execve_check (&argv, es, S_FATAL, "OpenBSD ifconfig failed");
-      if ( do_ipv6 )
-	{
-	  argv_printf (&argv,
-			  "%s %s inet6 %s/%d",
-			  IFCONFIG_PATH,
-			  actual,
-			  ifconfig_ipv6_local,
-			  tt->netbits_ipv6
-			  );
-	  argv_msg (M_INFO, &argv);
-	  openvpn_execve_check (&argv, es, S_FATAL, "OpenBSD ifconfig inet6 failed");
-
-	  /* and, hooray, we explicitely need to add a route... */
-	  add_route_connected_v6_net(tt, es);
-	}
-      tt->did_ifconfig = true;
-
-#elif defined(TARGET_NETBSD)
-
-/* whether or not NetBSD can do IPv6 can be seen by the availability of
- * the TUNSIFHEAD ioctl() - see next TARGET_NETBSD block for more details
- */
-#ifdef TUNSIFHEAD
-# define NETBSD_MULTI_AF
-#endif
-
-      if (tun)
-	argv_printf (&argv,
 			  "%s %s %s %s mtu %d netmask 255.255.255.255 up",
d24 3
a26 1
@@@@ -1007,9 +956,7 @@@@ do_ifconfig (struct tuntap *tt,
d29 8
a36 21
       /*
-       * NetBSD has distinct tun and tap devices
-       * so we don't need the "link0" extra parameter to specify we want to do 
-       * tunneling at the ethernet level
+       * NetBSD and OpenBSD 5.9+ have distinct tun and tap devices
        */
 		argv_printf (&argv,
 			  "%s %s %s netmask %s mtu %d broadcast %s",
@@@@ -1021,11 +968,11 @@@@ do_ifconfig (struct tuntap *tt,
 			  ifconfig_broadcast
 			  );
       argv_msg (M_INFO, &argv);
-      openvpn_execve_check (&argv, es, S_FATAL, "NetBSD ifconfig failed");
+      openvpn_execve_check (&argv, es, S_FATAL, "OpenBSD/NetBSD ifconfig failed");
 
       if ( do_ipv6 )
 	{
-#ifdef NETBSD_MULTI_AF
+#if defined(MULTI_AF)
 	  argv_printf (&argv,
 			  "%s %s inet6 %s/%d",
d38 2
a39 34
@@@@ -1034,17 +981,30 @@@@ do_ifconfig (struct tuntap *tt,
 			  tt->netbits_ipv6
 			  );
 	  argv_msg (M_INFO, &argv);
-	  openvpn_execve_check (&argv, es, S_FATAL, "NetBSD ifconfig inet6 failed");
+	  openvpn_execve_check (&argv, es, S_FATAL, "OpenBSD/NetBSD ifconfig inet6 failed");
 
 	  /* and, hooray, we explicitely need to add a route... */
 	  add_route_connected_v6_net(tt, es);
-#else
+#else /* MULTI_AF */
 	  msg( M_INFO, "no IPv6 support for tun interfaces on NetBSD before 4.0 (if your system is newer, recompile openvpn)" );
 	  tt->ipv6 = false;
-#endif
+#endif /* MULTI_AF */
 	}
       tt->did_ifconfig = true;
 
+#if defined(TARGET_OPENBSD)
+      /* On OpenBSD, add a network route for the local tun interface */
+      if (!tun && tt->topology == TOP_SUBNET)
+        {
+          char *ifconfig_remote_network =
+            print_in_addr_t (tt->local & tt->remote_netmask, 0, &gc);
+          argv_printf(&argv, "%s add %s -netmask %s -link -iface %s",
+            ROUTE_PATH, ifconfig_remote_network, ifconfig_remote_netmask,
+            actual);
+          argv_msg (M_INFO, &argv);
+          openvpn_execve_check (&argv, es, S_FATAL, "OpenBSD route failed");
+        }
+#endif
 #elif defined(TARGET_DARWIN)
       /*
        * Darwin (i.e. Mac OS X) seems to exhibit similar behaviour to OpenBSD...
@


1.8
log
@update to openvpn-2.3.9
@
text
@d1 9
a9 3
$OpenBSD: patch-src_openvpn_tun_c,v 1.7 2015/10/23 15:10:36 sthen Exp $
--- src/openvpn/tun.c.orig	Wed Dec 16 11:39:07 2015
+++ src/openvpn/tun.c	Fri Dec 18 01:24:47 2015
d143 7
a149 7
+          struct route_ipv4 r;
+          CLEAR (r);
+          r.flags = RT_DEFINED;
+          r.network = tt->local & tt->remote_netmask;
+          r.netmask = tt->remote_netmask;
+          r.gateway = tt->local;
+          add_route (&r, tt, 0, NULL, es);
@


1.8.4.1
log
@MFC recent hack to OpenVPN for "topology subnet" setups that avoids triggering
the "Too many levels of symbolic links" error following changes to the kernel.
@
text
@d1 3
a3 9
$OpenBSD: patch-src_openvpn_tun_c,v 1.9 2016/11/18 16:21:44 jca Exp $

- no need for link0 any more, we have separate tap interfaces
- our ifconfig doesn't support passing a prefix as point-to-point dest
  address.  In subnet topology, use the local address as a fake dest addr, and
  manually add a route for the prefix on the interface.

--- src/openvpn/tun.c.orig	Tue May 10 08:02:33 2016
+++ src/openvpn/tun.c	Thu Nov 17 10:42:55 2016
d137 7
a143 7
+          char *ifconfig_remote_network =
+            print_in_addr_t (tt->local & tt->remote_netmask, 0, &gc);
+          argv_printf(&argv, "%s add %s -netmask %s -link -iface %s",
+            ROUTE_PATH, ifconfig_remote_network, ifconfig_remote_netmask,
+            actual);
+          argv_msg (M_INFO, &argv);
+          openvpn_execve_check (&argv, es, S_FATAL, "OpenBSD route failed");
@


1.7
log
@Adjust OpenVPN following the split of tun(4)'s "link0" mode into tap(4).
@
text
@d1 4
a4 4
$OpenBSD: patch-src_openvpn_tun_c,v 1.6 2015/09/16 09:07:30 sthen Exp $
--- src/openvpn/tun.c.orig	Fri Jul 17 06:43:38 2015
+++ src/openvpn/tun.c	Thu Oct 22 20:27:08 2015
@@@@ -912,8 +912,17 @@@@ do_ifconfig (struct tuntap *tt,
d23 1
a23 1
@@@@ -923,66 +932,6 @@@@ do_ifconfig (struct tuntap *tt,
d90 1
a90 1
@@@@ -1005,9 +954,7 @@@@ do_ifconfig (struct tuntap *tt,
d101 1
a101 1
@@@@ -1019,11 +966,11 @@@@ do_ifconfig (struct tuntap *tt,
d115 1
a115 1
@@@@ -1032,17 +979,30 @@@@ do_ifconfig (struct tuntap *tt,
@


1.6
log
@fix mis-merge in previous, had a link0 which should have been -link0
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openvpn_tun_c,v 1.5 2015/09/16 08:45:16 sthen Exp $
d3 1
a3 1
+++ src/openvpn/tun.c	Wed Sep 16 10:04:54 2015
d23 1
a23 1
@@@@ -923,7 +932,11 @@@@ do_ifconfig (struct tuntap *tt,
d27 12
a38 14
+#if defined(TARGET_OPENBSD)
 			  "%s %s %s %s mtu %d netmask 255.255.255.255 up -link0",
+#else
+			  "%s %s %s %s mtu %d netmask 255.255.255.255 up",
+#endif
 			  IFCONFIG_PATH,
 			  actual,
 			  ifconfig_local,
@@@@ -934,83 +947,29 @@@@ do_ifconfig (struct tuntap *tt,
 	if ( tt->topology == TOP_SUBNET )
 	{
 	    argv_printf (&argv,
+#if defined(TARGET_OPENBSD)
 			  "%s %s %s %s mtu %d netmask %s up -link0",
d83 1
a83 3
+#else
+			  "%s %s %s %s mtu %d netmask %s up",
 #endif
d87 1
a87 1
-			  "%s %s %s %s mtu %d netmask 255.255.255.255 up",
d90 1
a90 16
 			  ifconfig_local,
-			  ifconfig_remote_netmask,
-			  tun_mtu
-			  );
-      else
-	if ( tt->topology == TOP_SUBNET )
-	{
-	    argv_printf (&argv,
-			  "%s %s %s %s mtu %d netmask %s up",
-			  IFCONFIG_PATH,
-			  actual,
 			  ifconfig_local,
-			  ifconfig_local,
 			  tun_mtu,
 			  ifconfig_remote_netmask
 			  );
a99 3
+#if defined(TARGET_OPENBSD)
+			  "%s %s %s netmask %s mtu %d broadcast %s link0",
+#else
d101 1
a101 5
+#endif
 			  IFCONFIG_PATH,
 			  actual,
 			  ifconfig_local,
@@@@ -1019,11 +978,11 @@@@ do_ifconfig (struct tuntap *tt,
d115 1
a115 1
@@@@ -1032,17 +991,30 @@@@ do_ifconfig (struct tuntap *tt,
@


1.5
log
@Consolidate OpenVPN's ifconfig tun handling for NetBSD/OpenBSD. noop for now,
makes it easier to understand tun/tap handling. Thanks Ralf Hortsmann and
Johan Huldtgren for testing.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_openvpn_tun_c,v 1.4 2015/06/25 08:46:49 sthen Exp $
d3 1
a3 1
+++ src/openvpn/tun.c	Mon Sep 14 06:07:23 2015
d23 1
a23 1
@@@@ -923,67 +932,11 @@@@ do_ifconfig (struct tuntap *tt,
d29 12
a40 11
-			  IFCONFIG_PATH,
-			  actual,
-			  ifconfig_local,
-			  ifconfig_remote_netmask,
-			  tun_mtu
-			  );
-      else
-	if ( tt->topology == TOP_SUBNET )
-	{
-	    argv_printf (&argv,
-			  "%s %s %s %s mtu %d netmask %s up -link0",
d85 3
a87 1
-#endif
d91 1
a91 3
+#else
 			  "%s %s %s %s mtu %d netmask 255.255.255.255 up",
+#endif
d95 10
a104 11
@@@@ -994,7 +947,11 @@@@ do_ifconfig (struct tuntap *tt,
 	if ( tt->topology == TOP_SUBNET )
 	{
 	    argv_printf (&argv,
+#if defined(TARGET_OPENBSD)
+			  "%s %s %s %s mtu %d netmask %s up link0",
+#else
 			  "%s %s %s %s mtu %d netmask %s up",
+#endif
 			  IFCONFIG_PATH,
 			  actual,
d106 4
a109 1
@@@@ -1005,12 +962,14 @@@@ do_ifconfig (struct tuntap *tt,
@


1.4
log
@update to openvpn-2.3.7
https://community.openvpn.net/openvpn/wiki/ChangesInOpenvpn23
@
text
@d1 106
a106 5
$OpenBSD: patch-src_openvpn_tun_c,v 1.3 2014/10/10 21:07:07 sthen Exp $
--- src/openvpn/tun.c.orig	Mon Jun  8 07:16:35 2015
+++ src/openvpn/tun.c	Thu Jun 25 09:38:54 2015
@@@@ -944,7 +944,19 @@@@ do_ifconfig (struct tuntap *tt,
 			  );
d109 12
a120 15
-	argv_printf (&argv,
+      {
+        if (tt->topology == TOP_SUBNET)
+          argv_printf (&argv,
+                              "%s %s %s %s netmask %s mtu %d up",
+                              IFCONFIG_PATH,
+                              actual,
+                              ifconfig_local,
+                              ifconfig_local,
+                              ifconfig_remote_netmask,
+                              tun_mtu
+                              );
+        else
+	  argv_printf (&argv,
 			  "%s %s %s netmask %s mtu %d broadcast %s link0",
d123 2
a124 2
@@@@ -953,6 +965,7 @@@@ do_ifconfig (struct tuntap *tt,
 			  tun_mtu,
a126 1
+      }
d128 3
a130 1
       openvpn_execve_check (&argv, es, S_FATAL, "OpenBSD ifconfig failed");
d132 14
a145 1
@@@@ -971,6 +984,18 @@@@ do_ifconfig (struct tuntap *tt,
d147 6
d155 3
a157 2
+
+      /* Add a network route for the local tun interface */
d168 4
a171 3
 
 #elif defined(TARGET_NETBSD)
 
@


1.3
log
@update to openvpn-2.3.4
@
text
@d1 4
a4 4
$OpenBSD: patch-src_openvpn_tun_c,v 1.2 2013/10/21 09:15:07 bluhm Exp $
--- src/openvpn/tun.c.orig	Thu May  1 12:12:22 2014
+++ src/openvpn/tun.c	Tue Jul 29 22:10:23 2014
@@@@ -917,7 +917,19 @@@@ do_ifconfig (struct tuntap *tt,
d25 1
a25 1
@@@@ -926,6 +938,7 @@@@ do_ifconfig (struct tuntap *tt,
d33 1
a33 1
@@@@ -944,6 +957,18 @@@@ do_ifconfig (struct tuntap *tt,
@


1.2
log
@OpenVPN copies part of the net/route.h header file into their route.c
source file.  They cannot include it, because the kernel route
structure has a name conflict with the openvpn route structure.
The obvious solution is to rename the openvpn route.  According to
the sources, NetBSD and FreeBSD and Dragonfly also suffer from that.

This change is needed for an upcoming routing message change.  We
do not want to patch the port each time when we change the system
header file.

Test and OK sthen@@
@
text
@d1 4
a4 13
$OpenBSD: patch-src_openvpn_tun_c,v 1.1 2013/04/20 16:22:55 sthen Exp $
--- src/openvpn/tun.c.orig	Wed Mar 20 09:28:14 2013
+++ src/openvpn/tun.c	Sat Oct 19 15:53:44 2013
@@@@ -867,7 +867,7 @@@@ do_ifconfig (struct tuntap *tt,
       if (!tun && tt->topology == TOP_SUBNET)
 	{
 	  /* Add a network route for the local tun interface */
-	  struct route r;
+	  struct route_base r;
 	  CLEAR (r);      
 	  r.flags = RT_DEFINED | RT_METRIC_DEFINED;
 	  r.network = tt->local & tt->remote_netmask;
@@@@ -911,7 +911,19 @@@@ do_ifconfig (struct tuntap *tt,
d25 1
a25 1
@@@@ -920,6 +932,7 @@@@ do_ifconfig (struct tuntap *tt,
d33 2
a34 1
@@@@ -939,6 +952,18 @@@@ do_ifconfig (struct tuntap *tt,
d37 1
a37 1
 
d41 1
a41 1
+          struct route_base r;
d49 1
a49 1
+
a51 19
 /* whether or not NetBSD can do IPv6 can be seen by the availability of
@@@@ -1064,7 +1089,7 @@@@ do_ifconfig (struct tuntap *tt,
       /* Add a network route for the local tun interface */
       if (!tun && tt->topology == TOP_SUBNET)
 	{
-	  struct route r;
+	  struct route_base r;
 	  CLEAR (r);
 	  r.flags = RT_DEFINED;
 	  r.network = tt->local & tt->remote_netmask;
@@@@ -1130,7 +1155,7 @@@@ do_ifconfig (struct tuntap *tt,
 	/* Add a network route for the local tun interface */
       if (!tun && tt->topology == TOP_SUBNET)
         {
-          struct route r;
+          struct route_base r;
           CLEAR (r);
           r.flags = RT_DEFINED;
           r.network = tt->local & tt->remote_netmask;
@


1.2.4.1
log
@MFC - update to OpenVPN 2.3.6, fixing some assertion crashes (DoS)
@
text
@d1 13
a13 4
$OpenBSD: patch-src_openvpn_tun_c,v 1.3 2014/10/10 21:07:07 sthen Exp $
--- src/openvpn/tun.c.orig	Thu May  1 12:12:22 2014
+++ src/openvpn/tun.c	Tue Jul 29 22:10:23 2014
@@@@ -917,7 +917,19 @@@@ do_ifconfig (struct tuntap *tt,
d34 1
a34 1
@@@@ -926,6 +938,7 @@@@ do_ifconfig (struct tuntap *tt,
d42 1
a42 2
@@@@ -944,6 +957,18 @@@@ do_ifconfig (struct tuntap *tt,
 	  add_route_connected_v6_net(tt, es);
d45 1
a45 1
+
d49 1
a49 1
+          struct route_ipv4 r;
d57 1
a57 1
 
d60 19
@


1.1
log
@update to OpenVPN 2.31, from Bjorn Ketelaars, maintainer timeout
@
text
@d1 1
a1 1
$OpenBSD$
d3 10
a12 1
+++ src/openvpn/tun.c	Mon Apr  1 17:55:36 2013
d42 1
a42 2
@@@@ -938,6 +951,18 @@@@ do_ifconfig (struct tuntap *tt,
 	  add_route_connected_v6_net(tt, es);
d45 1
a45 1
+
d49 1
a49 1
+          struct route r;
d57 1
a57 1
 
d60 19
@

