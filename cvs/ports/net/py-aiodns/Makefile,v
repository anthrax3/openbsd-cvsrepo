head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.4
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.2
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.1.1.1.0.2
	OPENBSD_6_0_BASE:1.1.1.1
	danj_20160507:1.1.1.1
	danj:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2017.01.03.19.24.43;	author landry;	state Exp;
branches;
next	1.3;
commitid	MZfBkIDSpPOMlTuw;

1.3
date	2016.10.04.18.49.52;	author danj;	state Exp;
branches;
next	1.2;
commitid	6O2ibGoJv4ntiWAb;

1.2
date	2016.08.28.06.41.31;	author danj;	state Exp;
branches;
next	1.1;
commitid	coYjMQxrsq5vbhqC;

1.1
date	2016.05.07.14.48.39;	author danj;	state Exp;
branches
	1.1.1.1;
next	;
commitid	ifB7ZSV1IFbQe3bl;

1.1.1.1
date	2016.05.07.14.48.39;	author danj;	state Exp;
branches;
next	;
commitid	ifB7ZSV1IFbQe3bl;


desc
@@


1.4
log
@bump ports depending on python3 in net
@
text
@# $OpenBSD: Makefile,v 1.3 2016/10/04 18:49:52 danj Exp $

COMMENT =		simple DNS resolver for asyncio

MODPY_EGG_VERSION =	1.1.1
DISTNAME =		aiodns-${MODPY_EGG_VERSION}
PKGNAME =		py-${DISTNAME}
CATEGORIES =		net
REVISION =		0

MAINTAINER =		Daniel Jakots <obsd@@chown.me>

# MIT
PERMIT_PACKAGE_CDROM =	Yes

MODULES =		lang/python

MODPY_PI =		Yes
MODPY_SETUPTOOLS =	Yes

FLAVORS =		python3
FLAVOR ?=

RUN_DEPENDS =		net/py-cares${MODPY_FLAVOR}
.if !${FLAVOR:Mpython3}
RUN_DEPENDS += devel/py-trollius
.endif

TEST_DEPENDS =		${RUN_DEPENDS}

do-test:
	@@cd ${WRKSRC} && ${MODPY_BIN} -m unittest discover

.include <bsd.port.mk>
@


1.3
log
@Update to py-aiodns-1.1.1
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2016/08/28 06:41:31 danj Exp $
d9 1
@


1.2
log
@Update to py-aiodns-1.1.0
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2016/05/07 14:48:39 danj Exp $
d5 1
a5 1
MODPY_EGG_VERSION =	1.1.0
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d5 1
a5 1
MODPY_EGG_VERSION =	1.0.1
@


1.1.1.1
log
@import py-aiodns-1.0.1

aiodns provides a simple way for doing asynchronous DNS resolutions with
a synchronous looking interface by using pycares.

ok landry@@, jca@@, sthen@@
@
text
@@
