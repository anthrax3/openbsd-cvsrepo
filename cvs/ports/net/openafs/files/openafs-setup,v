head	1.15;
access;
symbols
	OPENBSD_6_1:1.15.0.30
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.15.0.28
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.24
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.26
	OPENBSD_5_8_BASE:1.15
	OPENBSD_5_7:1.15.0.22
	OPENBSD_5_7_BASE:1.15
	OPENBSD_5_6:1.15.0.20
	OPENBSD_5_6_BASE:1.15
	OPENBSD_5_5:1.15.0.18
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.15.0.16
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.14
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.15.0.12
	OPENBSD_5_2_BASE:1.15
	OPENBSD_5_1_BASE:1.15
	OPENBSD_5_1:1.15.0.10
	OPENBSD_5_0:1.15.0.8
	OPENBSD_5_0_BASE:1.15
	OPENBSD_4_9:1.15.0.6
	OPENBSD_4_9_BASE:1.15
	OPENBSD_4_8:1.15.0.4
	OPENBSD_4_8_BASE:1.15
	OPENBSD_4_7:1.15.0.2
	OPENBSD_4_7_BASE:1.15
	OPENBSD_4_6:1.14.0.2
	OPENBSD_4_6_BASE:1.14
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.7.0.2
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.6.0.2
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.5.0.8
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.6
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.4
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.2
	OPENBSD_3_9_BASE:1.5
	openafs-2006_01_30:1.1.1.1
	openafs:1.1.1;
locks; strict;
comment	@# @;


1.15
date	2009.09.07.04.34.54;	author todd;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.18.16.18.12;	author todd;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.28.16.11.48;	author ajacoutot;	state Exp;
branches;
next	1.12;

1.12
date	2009.03.26.21.28.47;	author todd;	state Exp;
branches;
next	1.11;

1.11
date	2008.10.21.02.57.51;	author todd;	state Exp;
branches;
next	1.10;

1.10
date	2008.10.12.17.31.17;	author ajacoutot;	state Exp;
branches;
next	1.9;

1.9
date	2008.10.12.00.12.07;	author todd;	state Exp;
branches;
next	1.8;

1.8
date	2008.10.08.15.45.55;	author todd;	state Exp;
branches;
next	1.7;

1.7
date	2008.07.21.03.13.01;	author todd;	state Exp;
branches;
next	1.6;

1.6
date	2007.09.29.12.18.06;	author ajacoutot;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.18.02.05.49;	author todd;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.13.17.27.01;	author david;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.10.18.12.24;	author marco;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.08.14.50.07;	author todd;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.31.02.49.24;	author marco;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.01.31.02.49.24;	author marco;	state Exp;
branches;
next	;


desc
@@


1.15
log
@o s/xfs/nnpfs/g
o attach orphan files dont nuke during salvage
o bump pkgname
@
text
@#!/bin/sh

# Copyright (c) 2001-2004 Todd T. Fries <todd@@OpenBSD.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

[ "${SYSCONFDIR}" ] || SYSCONFDIR=/etc
[ "${TRUEPREFIX}" ] || TRUEPREFIX=/usr/local

afsp=${TRUEPREFIX}/libexec/openafs
PATH=${TRUEPREFIX}/sbin:${TRUEPREFIX}/bin:$PATH
DIR=`mktemp -d /tmp/_openafs.XXXXXXXXXX` || exit 1
trap 'rm -rf $DIR; exit 1' 0 1 2 3 13 15
OUTPUT=$DIR/_1
defuser="$USER"
if [ "$defuser" = "root" ]; then
	if [ "$SUDO_USER" ]; then
		defuser="$SUDO_USER"
	else
		defuser="todd"
	fi
fi

# (borrowed from install.sub)
# Ask for user input.
#
#    $1    = the question to ask the user
#    $2    = the default answer
#
# Save the user input (or the default) in $resp.
#
# Allow the user to escape to shells ('!') or execute commands
# ('!foo') before entering the input.
ask() {
	local _question=$1 _default=$2

	set -o noglob
	while :; do
	        echo -n "$_question "
	        [[ -z $_default ]] || echo -n "[$_default] "
	        read resp
	        case $resp in
	        !)      echo "Type 'exit' to return to install."
	                sh
	                ;;
	        !*)     eval ${resp#?}
	                ;;
	        *)      : ${resp:=$_default}
	                break
	                ;;
	        esac
	done
	set +o noglob
}

# Ask for user input until a non-empty reply is entered.
#
#    $1    = the question to ask the user
#    $2    = the default answer
#
# Save the user input (or the default) in $resp.
ask_until() {
	resp=
	while [[ -z $resp ]] ; do
	        ask "$1" "$2"
	done
}

# Ask the user for a y or n, and insist on 'y', 'yes', 'n' or 'no'.
#
#    $1    = the question to ask the user
#    $2    = the default answer (assumed to be 'n' if empty).
#
# Return 'y' or 'n' in $resp.
ask_yn() {
	local _q=$1 _a=${2:-no} _resp
	typeset -l _resp

	while :; do
	        ask "$_q" "$_a"
	        _resp=$resp
	        case $_resp in
	        y|yes)  resp=y ; return ;;
	        n|no)   resp=n ; return ;;
	        esac
	done
}


# Logging routine
# 
#    $1    = -c or 1st arg
#    $2    = ...
#
# log all arguments
sc=0
log() {
	local prompt=":"
	if [ "$1" = "-c" ]; then
		prompt="#"
		shift
	else
		let sc=sc+1
	fi
	dfmt="%H:%M:%S"
	printf "%s %02d%s " "$(date +"${dfmt}")" $sc "$prompt"
	# use echo, because printf(1) treats varargs as one arg per line, ugh
	echo "$@@"
}

# Create a principal in kerberos.
#
#    $1    = principal
#    $2    = extra arg..
#
# Delete the principal first before re-adding it to make sure proper
# attributes exist.
kadd() {
	local principal=$1
	log creating principal: $principal
	shift
	kadmin del $principal > /dev/null 2>&1
	log -c kadmin add "$@@" $principal
	kadmin add \
		--{pw-,}expiration-time=never \
		--max-ticket-life="1 month" \
		--max-renewable-life="2 months" \
		--attributes="" \
		"$@@" $principal
}

# Re-try a command until success.
#
#    $@@    = full command to try
#
retry() {
	local try=1
	log -c "$@@"
	while ! $@@
	do
		let try=try+1
		log -c "$@@ : try $try"
		sleep 2
	done
}

# Make an afs volume.
#
#    $1    = volume name
#    $2    = volume mount point
#
# Any user can read volumes created here.
mkvol() {
	local vol=$1 mnt=$2
	log "Creating afs volume $1 to be mounted at $mnt"
	retry vos create $h /vicepa $vol
	retry fs mkm $mnt $vol
	retry fs sa $mnt system:anyuser rl
}

cat <<__EOT

===========================================================================
Welcome to the OpenAFS server1 setup script!

This script will assist you in setting up your first afs server.

It will use OpenAFS for the AFS server, but arla's afsd that comes with
OpenBSD for the AFS client.

It will use heimdal KerberosV that comes with OpenBSD.

It presumes you have previously successfully setup a KerberosV realm,
you have the password to an administrative principal in the KerberosV realm,
you are running it as root, and you have created at least one partition
for OpenAFS to use for data storage.  Partitions should be mounted under
/vicepa, /vicepb, /vicepc, etc.

===========================================================================
__EOT

#
# Sanity checks
#

# Require root.
if [[ `/usr/bin/whoami` != "root" ]]
then
	echo "Please run this script as root.  Thanks."
	exit
fi
if [[ `mount|grep " /vicepa "` = "" ]]
then
	echo "Could not find any filesystem mounted at /vicepa"
	echo "Without this OpenAFS will not function."
	echo "Please mount a partition under /vicepa"
	echo "A /vicepa directory will not work as"
	echo "OpenAFS"
	exit
fi

#
# Setup site specific variables
#

# Ask user for variables if not passed on the command line.
if ! [ "$6" ]
then
	cat <<__EOT

The hostname for this afs server should resolve in dns but
definitely reside in /etc/hosts. e.g. afs0.example.com.
__EOT
	while :; do
		ask_until "System hostname?" "$(hostname)"
		h=${resp}
		if [[ `grep $h /etc/hosts` = "" ]]
		then
			echo "Could not find /etc/hosts entry for $h."
			continue
		fi
		if [[ `grep $(hostname) /etc/hosts` = "" ]]
		then
			echo "Could not find /etc/hosts entry for $(hostname)."
			echo "(afs processes use the system hostname..)"
			continue
		fi
		break
	done
	cat <<__EOT

The IPv4 IP address for this afs server should resolve in dns but
definitely reside in /etc/hosts. e.g. 192.168.1.200.
__EOT
	while :; do
		ask_until "System IP?" "$(host $h | \
			awk '/has address/{print $4}')"
		ip=${resp}
		if [[ `grep $ip /etc/hosts` = "" ]]
		then
			echo "Could not find /etc/hosts entry for $ip."
			continue
		fi
		break
	done
	cat <<__EOT

The cell name is typically a dns name.  e.g. example.com.
__EOT
	ask_until "AFS Cell Name?" "${h#*.}"
	c=${resp}
	cat <<__EOT

The realm name is the KerberosV REALM, typically the capitalized dns name.
e.g. REALM.COM. Use something different at the expense of your sanity.
Really.
__EOT
	ask_until "KerberosV REALM?" "$(echo "$c"|tr "[a-z]" "[A-Z]")"
	R=${resp}
	cat <<__EOT

This is an existing KerberosV principal with the ability to
create and delete other kerberos principals.  e.g. $defuser/admin.
__EOT
	ask_until "KerberosV principal for kerberos administration?" \
		"$defuser/admin"
	p=${resp}
	echo
	ask_until "Is this the first server setup in the $c cell?" "Y"
	case "${resp}" in [Yy]*) first=1;; *) first=0;; esac
	if [ first -eq 0 ]; then
		set -A sservers fs
		echo
		ask_until "What is the primary afs server's name (e.g. afs0.example.com)?"
		psn=$resp
		ask_until "What is the primary afs server's IP (e.g. 10.1.2.3)?"
		psip=$resp

		cat <<__EOT

This principal should already exist from the 1st afs server setup, and
will be used to administer afs in a similar way that \`root'
can administrate OpenBSD.  Tread lightly when using this principal.
__EOT
	else
		set -A sservers buserver ptserver vlserver fs
		cat <<__EOT

Just a sample user to create a basic homedir and account on afs with.
__EOT
		ask_until "KerberosV principal for example user?" "$defuser"
		u=${resp}
		cat <<__EOT

This principal will be deleted if it exists, then created with specific
attributes.  It will be used to administer afs in a similar way that \`root'
can administrate OpenBSD.  Tread lightly when using this principal.
__EOT
	fi
	ask_until "KerberosV principal for afs administration?" \
		"$defuser/afs"
	A=${resp}
	slist="" i=0
	while [ i -lt ${#sservers[*]} ]; do
		slist="$slist ${sservers[$i]}"
		let i=i+1
	done
	slist="${slist# *}"
	cat <<__EOT

Each afs server can run one or more openafs server processes:
    vlserver(8) - volume location server, keeps track of volume locations
    ptserver(8) - protection server for users, groups, and permissions
    buserver(8) - permit backups to occur for vlserver and ptserver databases
             fs - fileserver, volserver, salvager (for hosts that store files)
__EOT
	ask_until "Servers to run on $h?" "$slist"
	set -A sservers $resp
else
	# for advanced users, this script can be started with the above
	# pre-populated via arguments
	h="$1" ip="$2" c="$3" R="$4" p="$5" A="$6" u="$7"
fi

slist="" i=0 vl2=0
while [ i -lt ${#sservers[*]} ]; do
	if [ "${sservers[$i]}" = "vlserver" -a first -eq 0 ]; then
		# we are a 2ndary server running vlserver, save to CellServDB
		vl2=1
	fi
	slist="$slist ${sservers[$i]}"
	let i=i+1
done
slist="${slist# *}"

pp=$(echo "$p"|sed 's,/,.,')
pA=$(echo "$A"|sed 's,/,.,')

cat <<__EOT

Confirm these look correct:
hostname   : $h
IP address : $ip
cellname   : $c
realm      : $R
krb admin  : $p (pts name: $pp)
afs admin  : $A (pts name: $pA)
afs servers: $slist
__EOT
if [ first -eq 1 ]; then
cat <<__EOT
sample user: $u
__EOT
else
cat <<__EOT
prim. name : $psn
prim. ip   : $psip
__EOT
fi
cat <<__EOT

The next step *DESTROYS* all existing OpenAFS configuration on this system,
including any openafs data on all /vicep* partitions!
__EOT

ask_yn "Are you really sure that you're ready to proceed?"
[[ $resp == n ]] && { echo "Ok, try again later.\n" ; exit ; }

echo
log "preparing ${SYSCONFDIR}/{open,}afs /usr/afs /var/openafs..."

# Initialize the filesystems
initfs() {
	kdestroy
	pkill -9 afsd
	umount /afs > /dev/null 2>&1
	if [ -d /var/spool/afs ]; then
		log clearing afs cache
		retry rm -rf -- "/var/spool/afs/*"
		retry mkdir -p /var/spool/afs
	fi
	log stopping any pre-existing arla and/or openafs daemons
	if [ "$(pgrep bosserver)" ]
	then
		bos shutdown localhost -noauth -wait > /dev/null 2>&1
	fi
	if [ "$(pgrep bosserver)" ]
	then
		bos shutdown localhost -localauth -wait > /dev/null 2>&1
	fi
	pkill -9 buserver ptserver vlserver fileserver volserver bos bosserver
	retry rm -rf ${SYSCONFDIR}/openafs /usr/afs /var/openafs
	retry rm -rf /vicep*/{V*,AFSIDat,Lock}
	retry rm -f /etc/kerberosV/krb5.keytab

	retry mkdir -p ${SYSCONFDIR}/openafs/server /usr/afs /var/spool/afs
	retry mkdir -m 700 /var/openafs
	echo "f $ip" > /var/openafs/NetInfo
	echo "$R" > ${SYSCONFDIR}/openafs/server/krb.conf
	ln -s /var/openafs/db /usr/afs/db
	ln -s ${SYSCONFDIR}/openafs/server /usr/afs/etc
}

# borrowed from /etc/security, backup CellServDB
_fnchg() {
	echo "$1" | sed 's/^\///;s/\//_/g'
}

# be extra cautious
backupcsdb() {
if [ -s $CURdb ]; then
	diff -ua $CURdb $csdb > $OUTPUT
	if [ -s $OUTPUT ]; then
		cp -p $CURdb $BACKdb
		cp -p $csdb $CURdb
		chown root:wheel $CURdb $BACKdb
	fi
else
	cp -p $csdb $CURdb
	chown root:wheel $CURdb
fi
}

# update the CellServDB's
writecsdb() {
	# put back arla's CellServDB when this script exits
	log "Adding cell $c to CellServDB"
	trap 'rm -rf $DIR; cp $CURdb $csdb; exit 1' 0 1 2 3 13 15
	echo ">$c	# $c" > $DIR/CellServDB
	if [ first -eq 0 ]; then
		echo "$psip	#$psn" >> $DIR/CellServDB
		if [ vl2 -eq 1 ]; then
			echo "$ip	#$h" >> $DIR/CellServDB
		fi
	else
		echo "$ip	#$h" >> $DIR/CellServDB
	fi
	cat $DIR/CellServDB | \
  		tee -a $csdb ${SYSCONFDIR}/openafs/server/CellServDB
}
writethiscell() {
	echo $c | tee ${SYSCONFDIR}/openafs/server/ThisCell > /etc/afs/ThisCell
}
hostkeytab() {
	kadd host/$h --random-key 
	retry kadmin ext host/$h
	chmod 0400 /etc/kerberosV/krb5.keytab
}
saveafskey() {
	log creating ${SYSCONFDIR}/openafs/server/KeyFile
	retry kadmin ext -k $DIR/afsv5key afs/$c
	log -c ktutil copy $DIR/afsv5key AFSKEYFILE:${SYSCONFDIR}/openafs/server/KeyFile
	ktutil copy $DIR/afsv5key AFSKEYFILE:${SYSCONFDIR}/openafs/server/KeyFile
	retry chmod 600 ${SYSCONFDIR}/openafs/server/KeyFile
	retry rm $DIR/afsv5key
}
createafskey() {
	kadd afs/$c --random-key 
}
addexampleuser() {
	log When asked for a password below, the answer will set it.
	let sc=sc-1
	kadd $A
}
disablearla() {
	log "Disabling arla admin commands (use openafs commands on servers):"
	retry chmod 644 /usr/sbin/{bos,pts,vos,fs}
}
setuppts() {
	log setting up pts memberships, $pA as initial afs admin
	retry pts createuser -name $u -id `id -u $u` -cell $c -noauth
	retry pts createuser -name $pA -cell $c -noauth
	retry pts adduser $pA system:administrators -cell $c -noauth
	retry pts mem system:administrators -cell $c -noauth
	retry pts listentries -cell $c -noauth
	retry bos addhost localhost $h -noauth
}
initcellp1() {
	log creating root.afs
	retry vos create $h /vicepa root.afs -noauth
	retry vos create $h /vicepa root.cell -noauth

	sync;sync
	sleep 5
	sync;sync
}
initcellp2() {
	log setting permissions/creating volumes
	retry fs sa /afs system:anyuser rl
	retry fs flushvolume /afs
	retry fs mkm /afs/.$c root.cell -cell $c -rw -fast
	retry fs flushvolume /afs/.$c
	retry fs sa  /afs/.$c system:anyuser rl
	retry fs flushvolume /afs/.$c
	cat <<__EOT> /afs/.$c/robots.txt
# noticed at ualberta.ca, attempt to prevent robots from traversing afs
User-Agent: *
Disallow: /
__EOT

	mkvol user /afs/.$c/u
	mkvol user.$defuser /afs/.$c/u/$defuser
	mkvol mirror /afs/.$c/mirror
	retry vos addsite $h /vicepa mirror
	retry vos release mirror

	log Add some remote afs cells
	# significant remote afs cells of note, and/or install mirrors
	# as a basic set of remote cells for our example root.afs
	set -A rc \
		$c \
		ualberta.ca \
		stacken.kth.se \
		grand.central.org \
		su.se \
		mrow.org
	i=0
	while [ i -lt ${#rc[*]} ]
	do
		log -c fs mkm /afs/${rc[$i]} root.cell -cell ${rc[$i]} -fast
		fs mkm /afs/${rc[$i]} root.cell -cell ${rc[$i]} -fast
		let i=i+1
	done
}

# add files of note to /etc/changelist
addchg() {
	while [ "$1" ]
	do
		f="$1"
		shift
		if egrep "^${f}$" /etc/changelist > /dev/null 2>&1; then
			continue
		fi
		echo "$f" >> /etc/changelist
	done
}

log updating /etc/afs/CellServDB ${SYSCONFDIR}/openafs/server/CellServDB

csdb=/etc/afs/CellServDB
CURdb=/var/backups/$(_fnchg $csdb).current
BACKdb=/var/backups/$(_fnchg $csdb).backup

initfs
backupcsdb
writecsdb
writethiscell
if [ "$(pgrep bosserver)" ]
then
	pkill bosserver
fi

log authenticating $p@@$R
retry kinit $p@@$R
hostkeytab

# only 1st afs server
if [ first -eq 1 ]; then
	createafskey
fi
saveafskey

# only 1st afs server
if [ first -eq 1 ]; then
	addexampleuser
fi
disablearla

log starting unauthenticated bosserver
retry bosserver -log -syslog -noauth
retry bos setcellname localhost $c -noauth

log creating server entries with bos
i=0
fs=0
while [ i -lt ${#sservers[*]} ]; do
	srv="${sservers[$i]}"
	case "$srv" in
	fs)
		fs=1
	;;
	*)
		retry bos create localhost $srv simple $afsp/$srv -cell $c -noauth
	;;
	esac
	let i=i+1
done

# only 1st afs server
if [ first -eq 1 ]; then
	setuppts
fi
retry bos adduser localhost $pA -cell $c -noauth
retry bos shutdown localhost -cell $c -noauth -wait

log getting status of bos config
retry bos status localhost -noauth -cell $c -long
fs=1
if [ fs -eq 1 ]; then
	log creating fs entry with bos
	retry bos create localhost fs fs $afsp/{fileserver,volserver,salvager} -cell $c -noauth
	retry bos restart localhost -all -cell $c -noauth
fi
log getting partition list
retry vos listpart localhost -noauth

# only 1st afs server
if [ first -eq 1 ]; then
	initcellp1
fi

retry bos shutdown localhost -cell $c -noauth -wait
pkill -HUP bosserver
sleep 3
# don't put back CellServDB
trap 'rm -rf $DIR; exit 1' 0 1 2 3 13 15

log starting authenticated bosserver
retry bosserver -log -syslog 
retry bos restart localhost -all -cell $c -localauth


log starting afs client
retry mkdir -p /afs
[ "$(mount | egrep "^/afs")" ] || mount -t nnpfs /dev/nnpfs0 /afs
retry /usr/libexec/afsd -z --log=/var/log/afsd.log

log authenticating $A
retry kinit $A
retry pts listentries

# do this on reboot
grep "^afs=YES" /etc/rc.conf > /dev/null 2>&1 || \
grep "^afs=YES" /etc/rc.conf.local > /dev/null 2>&1 || \
echo afs=YES >> /etc/rc.conf.local

retry ls /afs

# only 1st afs server
if [ first -eq 1 ]; then
	initcellp2
fi

log adding replication sites for root.afs, root.cell
retry vos addsite $h /vicepa root.afs
retry vos addsite $h /vicepa root.cell

log release of replicated volumes
retry vos release root.afs
retry vos release root.cell

log restart afsd so it sees RO replicated volumes
pkill afsd
retry /usr/libexec/afsd -z --log=/var/log/afsd.log

addchg /etc/kerberosV/krb5.conf
addchg "+/etc/kerberosV/krb5.keytab"
addchg /etc/afs/{CellServDB,ThisCell,afsd.conf}
addchg ${SYSCONFDIR}/openafs/{BosConfig,server/{CellServDB,ThisCell,UserList,krb.conf}}
addchg "+${SYSCONFDIR}/openafs/server/KeyFile"
addchg /var/openafs/NetInfo
addchg "+/var/openafs/sysid"
addchg "+/var/openafs/db/bdb.DB0"
addchg "+/var/openafs/db/bdb.DBSYS1"
addchg "+/var/openafs/db/prdb.DB0"
addchg "+/var/openafs/db/prdb.DBSYS1"
addchg "+/var/openafs/db/vldb.DB0"
addchg "+/var/openafs/db/vldb.DBSYS1"

# Pat on the back.
cat <<__EOT

CONGRATULATIONS! Your OpenAFS server setup has been successfully completed,
and is now running.
Please read ${TRUEPREFIX}/share/openafs/README.OpenBSD for further details;
be sure to note the startup and shutdown script examples.
__EOT
@


1.14
log
@o correct example output
o fix tyop
bump
@
text
@d636 1
a636 1
[ "$(mount | egrep "^/afs")" ] || mount -t xfs /dev/xfs0 /afs
@


1.13
log
@- use TRUEPREFIX instead of LOCALBASE where it makes sense (following
previous commit)
- fix mkdir args (from todd@@)

ok todd@@ (maintainer)
@
text
@d301 1
a301 1
		ask_until "KerberosV princiapl for example user?" "$defuser"
d310 1
a310 1
	ask_until "KerberosV princiapl for afs administration?" \
@


1.12
log
@PREFIX -> LOCALBASE, my bad, caused installation ``fun''
.. found first by Josh Grosse josh at jgimi dot homeip dot net
.. reminded by Alexander Hall alexander at beard dot se
.. tested by Alexander
use $SUDO_USER if it exists instead of defaulting to 'todd'
use $defuser for example afs homedir
bump pkgname
@
text
@d18 1
a18 1
[ "${LOCALBASE}" ] || LOCALBASE=/usr/local
d20 2
a21 2
afsp=${LOCALBASE}/libexec/openafs
PATH=${LOCALBASE}/sbin:${LOCALBASE}/bin:$PATH
d686 1
a686 1
Please read ${LOCALBASE}/share/openafs/README.OpenBSD for further details;
@


1.11
log
@o remove bogus vars in commented out suggested rc.local bit in README.OpenBSD
o function'ize openafs-setup and let it setup not just the 1st but also
  subsequent afs servers, letting admins choose which afs server programs to
  run on each, `works for me(tm)'
bump PKGNAME
@
text
@d18 1
a18 1
[ "${PREFIX}" ] || PREFIX=/usr/local
d20 2
a21 2
afsp=${PREFIX}/libexec/openafs
PATH=${PREFIX}/sbin:${PREFIX}/bin:$PATH
d25 8
d273 1
a273 1
create and delete other kerberos principals.  e.g. todd/admin.
d276 1
a276 1
		"todd/admin"
d301 1
a301 1
		ask_until "KerberosV princiapl for example user?" "todd"
d311 1
a311 1
		"todd/afs"
d337 1
a337 1
	if [ "${sservers[$i]}" = "vlserver" -a first -eq 0]; then
d512 1
a512 1
	mkvol user.todd /afs/.$c/u/todd
d663 4
d686 1
a686 1
Please read ${PREFIX}/share/openafs/README.OpenBSD for further details;
@


1.10
log
@- s/LOCALBASE/PREFIX
- s/%SYSCONFDIR%/etc where it makes sense (e.g. /etc/rc.conf.local will
always be /etc/rc.conf.local whatever value ${SYSCONFDIR} is set to)
- use SUBST_CMD
- don't hardcode /usr/local
- precise license marker
- s/definately/definitely/ (from sthen@@)

"looks good" sthen@@, ok todd@@
@
text
@d17 3
d224 6
d270 20
a289 1
	cat <<__EOT
d291 1
a291 4
This principal will be deleted if it exists, and in any event
created again with specific attributes.  It will be used to administer afs
in a similar way that \`root' can administrate OpenBSD.  Tread lightly when
using this principal.
d293 11
a303 1
	ask_until "KerberosV princiapl for afs administration?" "todd/afs"
d305 6
d313 5
a317 1
Just a sample user to create a basic homedir and account on afs with.
d319 2
a320 2
	ask_until "KerberosV princiapl for example user?" "todd"
	u=${resp}
d327 11
d350 4
d355 8
d374 31
a404 21
kdestroy
pkill -9 afsd
umount /afs > /dev/null 2>&1
[ -d /var/spool/afs ] && rm -rf /var/spool/afs/*
if [ "$(pgrep bosserver)" ]
then
	bos shutdown localhost -noauth -wait > /dev/null 2>&1
fi
if [ "$(pgrep bosserver)" ]
then
	bos shutdown localhost -localauth -wait > /dev/null 2>&1
fi
pkill -9 buserver ptserver vlserver fileserver volserver bos bosserver
rm -rf ${SYSCONFDIR}/openafs /usr/afs /var/openafs
rm -rf /vicep*/{V*,AFSIDat,Lock}
rm -f /etc/kerberosV/krb5.keytab

mkdir -p ${SYSCONFDIR}/openafs/server /usr/afs /var/spool/afs
mkdir -m 700 /var/openafs
echo "f $ip" > /var/openafs/NetInfo
echo "$R" > ${SYSCONFDIR}/openafs/server/krb.conf
a405 1
log updating /etc/afs/CellServDB ${SYSCONFDIR}/openafs/server/CellServDB
d410 3
a412 3
csdb=/etc/afs/CellServDB
CURdb=/var/backups/$(_fnchg $csdb).current
BACKdb=/var/backups/$(_fnchg $csdb).backup
d424 127
a550 10
# put back arla's CellServDB when this script exits
trap 'rm -rf $DIR; cp $CURdb $csdb; exit 1' 0 1 2 3 13 15
echo ">$c	# $c" > $DIR/CellServDB
echo "$ip	#$h" >> $DIR/CellServDB
cat $DIR/CellServDB | \
  tee -a $csdb ${SYSCONFDIR}/openafs/server/CellServDB

echo $c | tee ${SYSCONFDIR}/openafs/server/ThisCell > /etc/afs/ThisCell
ln -s /var/openafs/db /usr/afs/db
ln -s ${SYSCONFDIR}/openafs/server /usr/afs/etc
d558 13
a570 15
kadd host/$h --random-key 
retry kadmin ext host/$h
chmod 0400 /etc/kerberosV/krb5.keytab
kadd afs/$c --random-key 
log creating ${SYSCONFDIR}/openafs/server/KeyFile
retry kadmin ext -k $DIR/afsv5key afs/$c
log -c ktutil copy $DIR/afsv5key AFSKEYFILE:${SYSCONFDIR}/openafs/server/KeyFile
ktutil copy $DIR/afsv5key AFSKEYFILE:${SYSCONFDIR}/openafs/server/KeyFile
chmod 600 ${SYSCONFDIR}/openafs/server/KeyFile
rm $DIR/afsv5key
log When asked for a password below, the answer will set it.
let sc=sc-1
kadd $A
log "Disabling arla admin commands (use openafs commands on servers):"
retry chmod 644 /usr/sbin/{bos,pts,vos,fs}
d574 17
a590 1
retry bos setcellname $h $c -noauth
d592 6
a597 13
log creating buserver/ptserver/vlserver entries with bos
retry bos create $h buserver simple $afsp/buserver -cell $c -noauth
retry bos create $h ptserver simple $afsp/ptserver -cell $c -noauth
retry bos create $h vlserver simple $afsp/vlserver -cell $c -noauth
log setting up pts memberships, $pA as initial afs admin
retry pts createuser -name $u -id `id -u $u` -cell $c -noauth
retry pts createuser -name $pA -cell $c -noauth
retry pts adduser $pA system:administrators -cell $c -noauth
retry pts mem system:administrators -cell $c -noauth
retry pts listentries -cell $c -noauth
retry bos adduser $h $pA -cell $c -noauth
retry bos addhost $h $h -noauth
retry bos shutdown $h -cell $c -noauth -wait
d600 7
a606 4
retry bos status $h -noauth -cell $c -long
log creating fs entry with bos
retry bos create $h fs fs $afsp/{fileserver,volserver,salvager} -cell $c -noauth
retry bos restart $h -all -cell $c -noauth
d608 8
a615 9
retry vos listpart $h -noauth
log creating root.afs
retry vos create $h /vicepa root.afs -noauth
retry vos create $h /vicepa root.cell -noauth

sync;sync
sleep 5
sync;sync
retry bos shutdown $h -cell $c -noauth -wait
d623 1
a623 1
retry bos restart $h -all -cell $c -localauth
d627 1
a627 1
mkdir -p /afs
d636 1
d642 4
a645 34
log setting permissions/creating volumes
retry fs sa /afs system:anyuser rl
retry fs flushvolume /afs
retry fs mkm /afs/.$c root.cell -cell $c -rw -fast
retry fs flushvolume /afs/.$c
retry fs sa  /afs/.$c system:anyuser rl
retry fs flushvolume /afs/.$c
cat <<__EOT> /afs/.$c/robots.txt
# noticed at ualberta.ca, attempt to prevent robots from traversing afs
User-Agent: *
Disallow: /
__EOT

mkvol user /afs/.$c/u
mkvol user.todd /afs/.$c/u/todd
mkvol mirror /afs/.$c/mirror

log Add some remote afs cells
# significant remote afs cells of note, and/or install mirrors as a basic
# set of remote cells for our example root.afs
set -A rc \
	$c \
	ualberta.ca \
	stacken.kth.se \
	grand.central.org \
	su.se \
	mrow.org
i=0
while [ i -lt ${#rc[*]} ]
do
	log -c fs mkm /afs/${rc[$i]} root.cell -cell ${rc[$i]} -fast
	fs mkm /afs/${rc[$i]} root.cell -cell ${rc[$i]} -fast
	let i=i+1
done
a649 1
retry vos addsite $h /vicepa mirror
d651 1
a651 1
log initial release of replicated volumes
a653 1
retry vos release mirror
a654 12
# add files of note to /etc/changelist
addchg() {
	while [ "$1" ]
	do
		f="$1"
		shift
		if egrep "^${f}$" /etc/changelist > /dev/null 2>&1; then
			continue
		fi
		echo "$f" >> /etc/changelist
	done
}
a676 1

@


1.9
log
@o add autoconf to CONFIGURE_STYLE to fix autoconf depend
o no longer require kernel sources since not building lkm; if this changes,
  the attic can be raided
o typo in openafs-setup comments from sthen@@; thanks!
o obey CFLAGS and CC
o twiddle lwp.h patch to be OpenBSD specific
bump PKGNAME
@
text
@d17 2
a18 2
afsp=%LOCALBASE%/libexec/openafs
PATH=%LOCALBASE%/sbin:%LOCALBASE%/bin:$PATH
d211 1
a211 1
definately reside in %SYSCONFDIR%/hosts. e.g. afs0.example.com.
d216 1
a216 1
		if [[ `grep $h %SYSCONFDIR%/hosts` = "" ]]
d218 1
a218 1
			echo "Could not find %SYSCONFDIR%/hosts entry for $h."
d226 1
a226 1
definately reside in %SYSCONFDIR%/hosts. e.g. 192.168.1.200.
d232 1
a232 1
		if [[ `grep $ip %SYSCONFDIR%/hosts` = "" ]]
d234 1
a234 1
			echo "Could not find %SYSCONFDIR%/hosts entry for $ip."
d304 1
a304 1
log "preparing %SYSCONFDIR%/{open,}afs /usr/afs /var/openafs..."
d319 1
a319 1
rm -rf %SYSCONFDIR%/openafs /usr/afs /var/openafs
d321 1
a321 1
rm -f %SYSCONFDIR%/kerberosV/krb5.keytab
d323 1
a323 1
mkdir -p %SYSCONFDIR%/openafs/server /usr/afs /var/spool/afs
d326 1
a326 1
echo "$R" > %SYSCONFDIR%/openafs/server/krb.conf
d328 2
a329 2
log updating %SYSCONFDIR%/afs/CellServDB %SYSCONFDIR%/openafs/server/CellServDB
# borrowed from %SYSCONFDIR%/security, backup CellServDB
d333 1
a333 1
csdb=%SYSCONFDIR%/afs/CellServDB
d352 1
a352 1
  tee -a $csdb %SYSCONFDIR%/openafs/server/CellServDB
d354 1
a354 1
echo $c | tee %SYSCONFDIR%/openafs/server/ThisCell > %SYSCONFDIR%/afs/ThisCell
d356 1
a356 1
ln -s %SYSCONFDIR%/openafs/server /usr/afs/etc
d366 1
a366 1
chmod 0400 %SYSCONFDIR%/kerberosV/krb5.keytab
d368 1
a368 1
log creating %SYSCONFDIR%/openafs/server/KeyFile
d370 3
a372 3
log -c ktutil copy $DIR/afsv5key AFSKEYFILE:%SYSCONFDIR%/openafs/server/KeyFile
ktutil copy $DIR/afsv5key AFSKEYFILE:%SYSCONFDIR%/openafs/server/KeyFile
chmod 600 %SYSCONFDIR%/openafs/server/KeyFile
d433 2
a434 2
grep "^afs=YES" %SYSCONFDIR%/rc.conf.local > /dev/null 2>&1 || \
echo afs=YES >> %SYSCONFDIR%/rc.conf.local
d483 1
a483 1
# add files of note to %SYSCONFDIR%/changelist
d489 1
a489 1
		if egrep "^${f}$" %SYSCONFDIR%/changelist > /dev/null 2>&1; then
d492 1
a492 1
		echo "$f" >> %SYSCONFDIR%/changelist
d495 5
a499 5
addchg %SYSCONFDIR%/kerberosV/krb5.conf
addchg "+%SYSCONFDIR%/kerberosV/krb5.keytab"
addchg %SYSCONFDIR%/afs/{CellServDB,ThisCell,afsd.conf}
addchg %SYSCONFDIR%/openafs/{BosConfig,server/{CellServDB,ThisCell,UserList,krb.conf}}
addchg "+%SYSCONFDIR%/openafs/server/KeyFile"
d514 1
a514 1
Please read %LOCALBASE%/share/openafs/README.OpenBSD for further details;
@


1.8
log
@o fix autoconf dependency; otherwise any autoconf-* would match then it would
  fail to exec autoconf-2.60
o update README.OpenBSD to include rc.local and rc.shutdown bits
o invade and cleanup openafs-setup
  - polish consistency
  - prompt for a sample general purpose user
  - backup CellServDB and restore on script failure
  - compact output
  - better cleanup incase it is restarted
  - show all afs commands as they are run
  - reorder various places to make more logical sense
  - DO NOT DO RECURSIVE MOUNTS, this leads to panics;
    (thanks bob/art for explaining).. i.e. no 'fs mkm /afs/.root.afs root.afs')
  - add a few gratuitous remote cells during setup as examples
  - add files of consequence to /etc/changelist
bump PKGNAME
@
text
@d182 1
a182 1
# Santiy checks
@


1.7
log
@o update openafs to 1.4.7
o add README.OpenBSD (includes heimdal setup instructions)
o rework openafs-setup to use arla's afsd in base, and heimdal
o fix a bug since 4.1 to not blow the thread stack on 64bit time functions in libc
@
text
@d18 4
d97 1
d99 1
d104 4
a107 2
	printf "%2d " $sc
	echo "==> $@@"
d122 1
d137 1
d141 1
a141 1
		log -c "try $try: $@@"
d156 2
a157 2
	fs mkm $mnt $vol
	fs sa $mnt system:anyuser rl
a178 1

a242 1
	echo "\n$cell_blurb"
a250 1
	echo "\n$realm_blurb"
a257 1
	user=$(id -un)
d259 1
a259 1
		"username/admin"
d268 1
a268 1
	ask_until "KerberosV princiapl for afs administration?" "username/afs"
d270 6
d279 1
a279 1
	h="$1" ip="$2" c="$3" R="$4" p="$5" A="$6"
d282 3
d287 1
a287 1
Confirm these look correct:"
d292 3
a294 2
krb admin  : $p
afs admin  : $A
d296 2
a297 1
The next step *DESTROYS* all existing OpenAFS configuration on this system!
d303 3
a305 1
log prepare dirs %SYSCONFDIR%/openafs, /usr/afs, /var/openafs, %SYSCONFDIR%/afs
d307 1
a307 1
pkill afsd
d312 1
a312 1
	bos shutdown localhost -noauth > /dev/null 2>&1
d316 1
a316 1
	bos shutdown localhost -localauth > /dev/null 2>&1
d318 1
d322 2
a323 1
mkdir -p %SYSCONFDIR%/openafs/server /usr/afs
d325 29
d356 1
a356 1
ln -s %SYSCONFDIR%/openafs/server /usr/afs%SYSCONFDIR%
d365 1
a365 2
kadd $A
kadmin ext --keytab=%SYSCONFDIR%/kerberosV/krb5.keytab host/$h
a366 1
#kadmin list host/$h "afs*"
d369 3
a371 2
kadmin ext -k /tmp/afsv5key afs/$c
ktutil copy /tmp/afsv5key AFSKEYFILE:%SYSCONFDIR%/openafs/server/KeyFile
d373 6
a378 9
rm /tmp/afsv5key
ls -l %SYSCONFDIR%/openafs/server/KeyFile
# XXX perhaps remove existing entries?
log updating %SYSCONFDIR%/afs/CellServDB %SYSCONFDIR%/openafs/server/CellServDB
echo ">$c	# $c" > /tmp/CellServDB
echo "$ip	#$h" >> /tmp/CellServDB
cat /tmp/CellServDB | \
  tee -a %SYSCONFDIR%/afs/CellServDB %SYSCONFDIR%/openafs/server/CellServDB
chmod 644 /usr/sbin/{bos,pts,vos,fs}
d380 2
a381 3
PATH=%LOCALBASE%/sbin:%LOCALBASE%/bin:$PATH

bosserver -log -syslog -noauth
d388 4
a391 4
log setting up pts memberships, todd.afs as initial afs admin
retry pts createuser -name todd -id `id -u` -cell $c -noauth
retry pts createuser -name todd.afs -cell $c -noauth
retry pts adduser todd.afs system:administrators -cell $c -noauth
d394 1
a394 1
retry bos adduser $h todd.afs -cell $c -noauth
a399 2
pkill -HUP bosserver

d401 2
a402 3
bosserver -log -syslog 
bos restart $h -all -cell $c -localauth
bos create $h fs fs $afsp/{fileserver,volserver,salvager} -cell $c -localauth
d404 17
a420 1
vos listpart $h -noauth
a421 2
log creating root.afs
retry vos create $h /vicepa root.afs -localauth -verbose
d426 1
a426 3
/usr/libexec/afsd -z --log=/var/log/afsd.log

sleep 5
d429 2
a430 2
kinit $A
pts listentries
d440 32
a471 9
vos create $h /vicepa root.cell
fs mkm /afs/$c root.cell -cell $c -fast
fs sa /afs/$c system:anyuser rl
fs mkm /afs/.$c root.cell -cell $c -rw
fs mkm /afs/.root.afs root.afs -cell $c -rw

mkvol user /afs/$c/u
mkvol ftp /afs/$c/ftp
fs mkm /afs/$c/.ftp ftp -cell $c -rw
d474 3
a476 3
vos addsite $h /vicepa root.afs
vos addsite $h /vicepa root.cell
vos addsite $h /vicepa ftp
d479 38
a516 3
vos release root.afs
vos release root.cell
vos release ftp
a517 1
log enjoy OpenAFS!
@


1.6
log
@Some cleanup:
 - lowercase COMMENT
 - add a $V variable for version number to ease upgrades
 - s/$LOCALBASE/$PREFIX in files/openafs-setup
 - use $SYSCONFDIR instead of /etc for files/openafs-setup
 (where appropriate)

"go fot it" todd@@
@
text
@d1 1
a1 1
#!/bin/ksh
d3 1
a3 1
# Copyright (c) 2005-2006 Jaime Fournier <ober@@LinBSD.org>
d5 3
a7 2
# Script to configure a single server OpenAFS Cell.
# We use Kaserver for authentication, and OpenAFS lkm/afsd for client.
d9 7
d17 1
a17 8
# Require root.
if [[ `/usr/bin/whoami` != "root" ]]
then
    echo "Please run this script as root. Thanks"
    exit
fi
export PATH=/bin:/usr/bin:/sbin:/usr/sbin:%LOCALBASE%/bin:%LOCALBASE%/sbin
SERVBIN=%PREFIX%/libexec/openafs
d19 12
d32 18
a49 3
# Ask for a password, saving the input in $resp.
#    Display $1 as the prompt.
#    *Don't* echo input.
d51 11
a61 17
if [[ `mount|grep /vicepa` = "" ]]
then
	echo "Could not find an aggregate mounted at /vicepa"
	echo "Without this we can not install a server."
	echo "Please mount a partition under /vicepa"
	echo "A /vicepa directory will not work as"
	echo "OpenAFS requires fileserver to have its own partition"
	exit
fi

askpass() {
        set -o noglob
        stty -echo
        read resp?"$1 "
        stty echo
        set +o noglob
        echo
d64 18
a81 9
ask() {
        local _question=$1 _default=$2

        set -o noglob
        echo -n "$_question "
        [[ -z $_default ]] || echo -n "[$_default] "
        read resp
        resp=${resp:=$_default}
        set +o noglob
a83 1
move_file() {
d85 10
a94 3
	if [[ -f ${1} ]] 
	then
		/bin/mv ${1:?} ${1:?}.arla
d96 1
a96 1
		echo "cannot rename file ${1} as it does not exist."
d98 2
d102 18
a119 3
err() {
	echo "$1"
	exit
d122 13
d136 13
a148 8
TMPRC=`/usr/bin/mktemp`
if [[ -f /etc/rc.conf.local ]]
then
	/bin/cat /etc/rc.conf.local|sed -e 's#^afs=YES#afs=NO#g' > ${TMPRC}
	/bin/mv ${TMPRC} /etc/rc.conf.local
else
	echo "afs=NO" > /etc/rc.conf.local
fi
d150 1
a150 3
if [[ `/usr/bin/grep %PREFIX%/lib/openafs/libafs.o /etc/rc.securelevel` = "" ]]
then
/bin/cat <<EOF>> /etc/rc.securelevel
d152 2
a153 6
if [[ -f %PREFIX%/lib/openafs/libafs.o ]]
then
        /sbin/modload %PREFIX%/lib/openafs/libafs.o
fi
EOF
fi
d155 1
a155 2
if [[ `sysctl -n kern.securelevel` -ge 1 ]]
then
d157 2
a158 2
        if [[ `modstat|grep afs` == "" ]]
        then
d160 1
a160 4
cat <<EOF
        #######################################################
        You are running at a secure level that does not allow 
	for loading kernel modules. 
d162 5
a166 2
	An update has been made to /etc/rc.securelevel in order
        to load OpenAFS on the next reboot.
d168 1
a168 1
        Please reboot for this to take effect.
d170 1
a170 4
        Then just rerun this script to continue the setup.
        #######################################################
EOF
exit
d172 3
a174 1
        fi
d176 2
a177 10
else # not running in secure level >= 1

        if [[ `modstat|grep afs` == "" ]]
        then
                /sbin/modload %PREFIX%/lib/openafs/libafs.o
        fi
fi

# Test if arla is mounted. If so unmount
if [[ `mount|awk '(($1 ~ "^/dev/xfs") && ($3 ~ "^/afs")) {print $0}'` != "" ]]
d179 2
a180 2
	echo "/afs is already mounted. Attempting to unmount"
        /sbin/umount -f /afs|| err "Could not umount /afs. exiting"
d182 1
a182 3

# test if openafs afsd(1) is running, if so clean up /etc and ask for reboot.
if [[ `ps -k|awk '($NF == "(afsd)") {print $0}'` != "" ]]
d184 5
a188 2
	echo "OpenAFS afsd is currently running. It can not be killed. "
	echo "Please reboot, and rerun this script. Thanks."
d192 3
a194 13
FQDN=`hostname`
IP=`netstat -rn -f inet|grep ^default|awk '{print $NF}'|xargs ifconfig |grep inet\ |awk '{print $2}'`
ask 'CELLNAME? ' ${FQDN#*.}
CELLNAME=$resp

ask 'SERVER NAME (full fqdn)? ' ${FQDN}
SERVER=$resp

ask 'SERVER IP? '  ${IP}
IP=$resp

ask 'Cache size? ' 198112
CACHESIZE=$resp
d196 2
a197 5
if [[ ! -d /afs ]] then
	mkdir -p -m 0755 /afs || return 1
fi

if [[ `grep $IP /etc/hosts|grep ${SERVER}` = "" ]]
d199 1
a199 6
	echo "Could not find a proper /etc/hosts entry for the information provided."
	echo "There needs to be an entry like the following in /etc/hosts"
	echo "${IP} ${SERVER}"
	echo "Please add, and rerun this script."
	exit
fi
d201 14
a214 10
# make sure no client or server daemons are running before we begin. Nuke existing configurations
pkill -9 -x kaserver buserver ptserver vlserver bosserver fileserver
# make sure previous processes died off, and are not running. Otherwise advise reboot.
sleep 5
PG=`pgrep -x kaserver buserver ptserver vlserver bosserver fileserver`
if [[ `echo ${PG}` != "" ]]
then
	echo "		It appears one or more of the following servers are still running."
	ps ${PG:?}
	echo "		Process ID ${PG} did not die, so we can not continue."
d216 12
a227 37

	if [[ `/usr/bin/grep %PREFIX%/bin/bos /etc/rc.local` = "" ]]
	then
		echo "		Please edit /etc/rc.local and remove the following lines"
		echo "		---------------cut here---------------------------------"
		echo "		if [ -x %PREFIX%/sbin/bosserver ]; then"
        	echo "		%PREFIX%/sbin/bosserver"
		echo "		fi"
		echo "		---------------cut here---------------------------------"
	fi
	
	echo "		Then reboot and run this script again."
	exit 
fi

rm -rf /var/openafs %SYSCONFDIR%/openafs
mkdir -m 700 /var/openafs /var/openafs/db
mkdir -m 755  %SYSCONFDIR%/openafs %SYSCONFDIR%/openafs/server /var/openafs/server /var/openafs/cache
/bin/echo "/afs:/var/openafs/cache:${CACHESIZE:?}" > %SYSCONFDIR%/openafs/cacheinfo

KAS=%PREFIX%/sbin/kas
BOS=%PREFIX%/bin/bos
FS=%PREFIX%/bin/fs
VOS=%PREFIX%/sbin/vos
PTS=%PREFIX%/bin/pts

while :; do 
	askpass "Please enter the initial password you wish to use with the 'admin' user -->"
	passwd1="$resp"
	askpass "Please confirm -->"
	passwd2="$resp"
	if [[ ${passwd1:?} != ${passwd2:?} ]]
	then
    		echo "\n passwords did not match. Please re-enter"
	else
		echo "\n passwords look good"
		unset passwd2
d229 2
a230 2
	fi
done
d232 139
a370 20
cat << EOF
You will be prompted several times now for the key.
Please make sure you enter the same passphrase in 
each of them.
EOF

ask 'OK?' 
 

#create cell configurations
echo "${CELLNAME:?}" > /etc/afs/ThisCell

echo ">${CELLNAME:?}    #Cell name
${IP:?}    #${SERVER:?}" >> /etc/afs/CellServDB

ln -s /etc/afs/CellServDB %SYSCONFDIR%/openafs/CellServDB
ln -s /etc/afs/ThisCell %SYSCONFDIR%/openafs/ThisCell
ln -s /etc/afs/CellServDB %SYSCONFDIR%/openafs/server/CellServDB
ln -s /etc/afs/ThisCell %SYSCONFDIR%/openafs/server/ThisCell
ln -s /etc/openafs/server/KeyFile %SYSCONFDIR%/openafs/KeyFile
d372 1
a372 58
#make sure arla is not mounted, and afsd is killed.
if [[ `/sbin/mount|/usr/bin/awk '($3 ~ "^/afs") {print $0}'` != "" ]]
then
        /usr/bin/pkill -x afsd
        /sbin/umount -f /afs||return 1
fi


#rename all the conflicting arla binaries.
move_file /usr/sbin/fs
move_file /usr/sbin/vos
move_file /usr/sbin/pts
move_file /usr/sbin/pts

if [[ `/usr/bin/grep %PREFIX%/lib/openafs/libafs.o /etc/rc.securelevel` = "" ]]
then
/bin/cat <<EOF>> /etc/rc.securelevel
if [[ -f %PREFIX%/lib/openafs/libafs.o ]]
then
        /sbin/modload %PREFIX%/lib/openafs/libafs.o
fi
EOF
fi

if [[ `/usr/bin/grep %PREFIX%/sbin/afsd /etc/rc.local` = "" ]]
then
/bin/cat <<EOF>> /etc/rc.local
if [[ -f %PREFIX%/sbin/afsd ]]
then
        %PREFIX%/sbin/afsd -stat 4000 -dcache 4000 -daemons 6 -volumes 256 -files 5000
fi
EOF
fi

#begin server setup.
echo "!%PREFIX%/sbin/bosserver -noauth &"
%PREFIX%/sbin/bosserver -noauth &

echo "!$BOS setcellname $SERVER $CELLNAME -noauth"
$BOS setcellname $SERVER  $CELLNAME -noauth 

echo "!$BOS listhosts $SERVER -noauth"
$BOS listhosts $SERVER -noauth

echo "!$BOS create $SERVER kaserver simple $SERVBIN/kaserver -cell $CELLNAME  -noauth"
$BOS create $SERVER kaserver simple $SERVBIN/kaserver  -cell $CELLNAME -noauth

echo "!$BOS create $SERVER buserver simple $SERVBIN/buserver -cell $CELLNAME  -noauth"
$BOS create $SERVER buserver simple $SERVBIN/buserver   -cell $CELLNAME -noauth

echo "!$BOS create $SERVER ptserver simple $SERVBIN/ptserver -cell $CELLNAME  -noauth"
$BOS create $SERVER ptserver simple $SERVBIN/ptserver  -cell $CELLNAME -noauth

echo "!$BOS create $SERVER vlserver simple $SERVBIN/vlserver -cell $CELLNAME  -noauth"
$BOS create $SERVER vlserver simple $SERVBIN/vlserver -cell $CELLNAME -noauth

echo "!$KAS create afs -cell $CELLNAME -noauth -initial_password PASSWD"
$KAS create afs -cell $CELLNAME -noauth -initial_password $passwd1
d374 31
a404 2
echo "!$KAS create admin -cell $CELLNAME -noauth -initial_password PASSWD"
$KAS create admin -cell $CELLNAME -noauth -initial_password $passwd1
d406 1
a406 140
echo "!$KAS examine afs -cell $CELLNAME -noauth  -admin_username admin -password_for_admin PASSWD"
$KAS examine afs -cell $CELLNAME -noauth -admin_username admin -password_for_admin $passwd1

echo "!$KAS setfields admin -flags admin -cell $CELLNAME -noauth -admin_username admin -password_for_admin PASSWD"
$KAS setfields admin -flags admin -cell $CELLNAME -noauth -admin_username admin -password_for_admin $passwd1

echo "!$KAS examine admin  -cell $CELLNAME -noauth -admin_username admin -password_for_admin PASSWD"
$KAS examine admin  -cell $CELLNAME -noauth -admin_username admin -password_for_admin $passwd1

echo "!$BOS adduser $SERVER admin -cell $CELLNAME -noauth "
$BOS adduser $SERVER admin -cell $CELLNAME -noauth
echo "!$BOS addkey $SERVER -kvno 0 -cell $CELLNAME  -noauth"
$BOS addkey $SERVER -kvno 0 -cell $CELLNAME  -noauth

echo "!$BOS listkeys $SERVER -cell $CELLNAME -noauth"
$BOS listkeys $SERVER -cell $CELLNAME -noauth

echo "!$KAS setpassword afs -kvno 1 -cell $CELLNAME -noauth -admin_username admin -password_for_admin PASSWD"
$KAS setpassword afs -kvno 1 -cell $CELLNAME -noauth -admin_username admin -password_for_admin $passwd1

echo "!$KAS examine afs -cell $CELLNAME -noauth -admin_username admin -password_for_admin PASSWD"
$KAS examine afs -cell $CELLNAME -noauth -admin_username admin -password_for_admin $passwd1

echo "!$BOS addkey $SERVER -kvno 1 -cell $CELLNAME -noauth"
$BOS addkey $SERVER -kvno 1 -cell $CELLNAME -noauth

echo "!$BOS listkeys $SERVER -cell $CELLNAME -noauth"
$BOS listkeys $SERVER -cell $CELLNAME -noauth

echo "!$PTS createuser -name admin -cell $CELLNAME -noauth"
$PTS createuser -name admin -cell $CELLNAME -noauth

echo "!$PTS adduser admin system:administrators -cell $CELLNAME -noauth"
$PTS adduser admin system:administrators -cell $CELLNAME -noauth

echo "!$PTS membership admin -cell $CELLNAME -noauth"
$PTS membership admin -cell $CELLNAME -noauth

echo "!$BOS restart $SERVER -all -cell $CELLNAME -noauth"
$BOS restart $SERVER -all -cell $CELLNAME -noauth

echo "!$BOS create  $SERVER fs $SERVBIN/fileserver $SERVBIN/volserver $SERVBIN/salvager  -cell $CELLNAME  -noauth"
$BOS create  $SERVER fs fs $SERVBIN/fileserver $SERVBIN/volserver $SERVBIN/salvager  -cell $CELLNAME  -noauth

echo "!$BOS status $SERVER fs -long -noauth"
$BOS status $SERVER fs -long -noauth

sleep 4
echo "!$VOS create $SERVER /vicepa root.afs -cell $CELLNAME  -noauth"
$VOS create $SERVER /vicepa root.afs -cell $CELLNAME  -noauth
sleep 4

echo "!$VOS syncvldb $SERVER -cell $CELLNAME -verbose -noauth"
$VOS syncvldb $SERVER -cell $CELLNAME -verbose -noauth
sleep 4

echo "!$VOS syncserv $SERVER -cell $CELLNAME -verbose -noauth"
$VOS syncserv $SERVER -cell $CELLNAME -verbose -noauth
sleep 4

echo "!$BOS create  $SERVER upserver simple "$SERVBIN/upserver -crypt %SYSCONFDIR%/openafs  -clear %PREFIX%/bin" -cell $CELLNAME  -noauth"
$BOS create  $SERVER upserver simple "$SERVBIN/upserver -crypt %SYSCONFDIR%/openafs -clear %PREFIX%/bin" -cell $CELLNAME  -noauth

if ! pgrep ntpd>/dev/null; then
    echo "ntpd is not running, consider running it to keep your time in sync!"
fi

pkill -9 -x kaserver buserver ptserver vlserver bosserver fileserver

#begin server configuration
echo "!%PREFIX%/sbin/bosserver"
%PREFIX%/sbin/bosserver
echo "!%PREFIX%/sbin/afsd -stat 4000 -dcache 4000 -daemons 6 -volumes 256 -files 5000"
%PREFIX%/sbin/afsd -stat 4000 -dcache 4000 -daemons 6 -volumes 256 -files 5000|| err "Failed to launch afsd.";
sleep 4

echo "!klogging as admin"
echo "!%PREFIX%/bin/klog  -principal admin -password PASSWD"
%PREFIX%/bin/klog  -principal admin -password $passwd1

echo "!$VOS addsite $SERVER /vicepa root.afs -cell $CELLNAME"
$VOS addsite $SERVER /vicepa root.afs -cell $CELLNAME

echo "!$VOS release root.afs"
$VOS release root.afs

echo "!$VOS create  $SERVER /vicepa root.cell"
$VOS create  $SERVER /vicepa root.cell
echo "!$FS mkmount /afs/.$CELLNAME  root.cell -rw"
$FS mkmount /afs/.$CELLNAME  root.cell -rw
echo "!$FS mkmount /afs/$CELLNAME -rw"
$FS mkmount /afs/$CELLNAME root.cell
$VOS addsite $SERVER /vicepa root.cell
$VOS release root.cell

echo "!$FS setacl /afs system:anyuser rl"
$FS setacl /afs system:anyuser rl
sleep 4

echo "!$FS mkmount /afs/$CELLNAME  root.cell"
$FS mkmount /afs/$CELLNAME root.cell

echo "!$FS setacl /afs/$CELLNAME  system:anyuser rl"
$FS setacl /afs/$CELLNAME system:anyuser rl
$VOS release root.afs
$VOS release root.cell

if [[ `grep %PREFIX%/sbin/bosserver /etc/rc.local` = "" ]]
then
cat <<EOF>>/etc/rc.local
if [ -x %PREFIX%/sbin/bosserver ]; then
        %PREFIX%/sbin/bosserver 
fi
EOF
fi

if [[ `grep %PREFIX%/bin/bos /etc/rc.shutdown` = "" ]]
then
cat <<EOF>>/etc/rc.shutdown
if [ -x %PREFIX%/bin/bos ]; then
	/usr/bin/pgrep -x bosserver 1>/dev/null && \
       %PREFIX%/bin/bos shutdown localhost -wait -localauth
fi
EOF
fi
	
cat <<EOF
###################################################################
Setup is complete and /afs should now be available
Please update /etc/login.conf for the daemon section
Make sure that openfiles-cur is set to a high enough level.
Otherwise you will get "partition full" messages when
writing files to afs.
This is the setting I use on the test cell.
-------------------------------------------------
        :openfiles-cur=infinity:\
--------------------------------------------------
Also note that this port does not work on Multiprocessor systems.
If you find any breakage please let me know <ober <AT> linbsd.org>
EOF
@


1.5
log
@from maint
o more feedback/typos/etc fixes

bump PKGNAME
@
text
@d16 1
a16 1
SERVBIN=%LOCALBASE%/libexec/openafs
d78 1
a78 1
if [[ `/usr/bin/grep %LOCALBASE%/lib/openafs/libafs.o /etc/rc.securelevel` = "" ]]
d82 1
a82 1
if [[ -f %LOCALBASE%/lib/openafs/libafs.o ]]
d84 1
a84 1
        /sbin/modload %LOCALBASE%/lib/openafs/libafs.o
d116 1
a116 1
                /sbin/modload %LOCALBASE%/lib/openafs/libafs.o
d174 1
a174 1
	if [[ `/usr/bin/grep %LOCALBASE%/bin/bos /etc/rc.local` = "" ]]
d178 2
a179 2
		echo "		if [ -x %LOCALBASE%/sbin/bosserver ]; then"
        	echo "		%LOCALBASE%/sbin/bosserver"
d188 1
a188 1
rm -rf /var/openafs /etc/openafs
d190 2
a191 2
mkdir -m 755  /etc/openafs /etc/openafs/server /var/openafs/server /var/openafs/cache
/bin/echo "/afs:/var/openafs/cache:${CACHESIZE:?}" > /etc/openafs/cacheinfo
d193 5
a197 5
KAS=%LOCALBASE%/sbin/kas
BOS=%LOCALBASE%/bin/bos
FS=%LOCALBASE%/bin/fs
VOS=%LOCALBASE%/sbin/vos
PTS=%LOCALBASE%/bin/pts
d229 5
a233 5
ln -s /etc/afs/CellServDB /etc/openafs/CellServDB
ln -s /etc/afs/ThisCell /etc/openafs/ThisCell
ln -s /etc/afs/CellServDB /etc/openafs/server/CellServDB
ln -s /etc/afs/ThisCell /etc/openafs/server/ThisCell
ln -s /etc/openafs/server/KeyFile /etc/openafs/KeyFile
d249 1
a249 1
if [[ `/usr/bin/grep %LOCALBASE%/lib/openafs/libafs.o /etc/rc.securelevel` = "" ]]
d252 1
a252 1
if [[ -f %LOCALBASE%/lib/openafs/libafs.o ]]
d254 1
a254 1
        /sbin/modload %LOCALBASE%/lib/openafs/libafs.o
d259 1
a259 1
if [[ `/usr/bin/grep %LOCALBASE%/sbin/afsd /etc/rc.local` = "" ]]
d262 1
a262 1
if [[ -f %LOCALBASE%/sbin/afsd ]]
d264 1
a264 1
        %LOCALBASE%/sbin/afsd -stat 4000 -dcache 4000 -daemons 6 -volumes 256 -files 5000
d270 2
a271 2
echo "!%LOCALBASE%/sbin/bosserver -noauth &"
%LOCALBASE%/sbin/bosserver -noauth &
d357 2
a358 2
echo "!$BOS create  $SERVER upserver simple "$SERVBIN/upserver -crypt /etc/openafs  -clear %LOCALBASE%/bin" -cell $CELLNAME  -noauth"
$BOS create  $SERVER upserver simple "$SERVBIN/upserver -crypt /etc/openafs -clear %LOCALBASE%/bin" -cell $CELLNAME  -noauth
d367 4
a370 4
echo "!%LOCALBASE%/sbin/bosserver"
%LOCALBASE%/sbin/bosserver
echo "!%LOCALBASE%/sbin/afsd -stat 4000 -dcache 4000 -daemons 6 -volumes 256 -files 5000"
%LOCALBASE%/sbin/afsd -stat 4000 -dcache 4000 -daemons 6 -volumes 256 -files 5000|| err "Failed to launch afsd.";
d374 2
a375 2
echo "!%LOCALBASE%/bin/klog  -principal admin -password PASSWD"
%LOCALBASE%/bin/klog  -principal admin -password $passwd1
d404 1
a404 1
if [[ `grep %LOCALBASE%/sbin/bosserver /etc/rc.local` = "" ]]
d407 2
a408 2
if [ -x %LOCALBASE%/sbin/bosserver ]; then
        %LOCALBASE%/sbin/bosserver 
d413 1
a413 1
if [[ `grep %LOCALBASE%/bin/bos /etc/rc.shutdown` = "" ]]
d416 1
a416 1
if [ -x %LOCALBASE%/bin/bos ]; then
d418 1
a418 1
       %LOCALBASE%/bin/bos shutdown localhost -wait -localauth
@


1.4
log
@fix various typos in openafs-setup
replace /usr/local with PREFIX in MESSAGE
bump PKGNAME
ok MAINTAINER
@
text
@d96 7
a102 4
        #######################################
        You are running at a secure level that does not allow for loading
        kernel modules. An update has been made to /etc/rc.securelevel in
        order to load OpenAFS on the next reboot.
d104 1
d106 1
a106 1
        #######################################
d189 2
a190 2
mkdir -m 700 /etc/openafs /var/openafs /var/openafs/db
mkdir -m 755  /etc/openafs/server /var/openafs/server /var/openafs/cache
d431 1
d433 2
@


1.3
log
@1. It fies the one reported bellow by Bruno, and
2. It handles secure level 2 properly.
Bruno Bigras <blood at burnbox dot net>

ok maint
@
text
@d29 1
a29 1
	echo "OpenAFS requires fileserver to have it's own paritition"
d119 1
a119 1
	echo "/afs is already mounted. Attmepting to unmount"
d151 1
a151 1
	echo "Could not find a proper /etc/host entry for the information provided."
d165 1
a165 1
	echo "		It appears one, or more of the the following servers are still running."
@


1.2
log
@keep the testing feedback coming, improvements to openafs-setup from maint, bump PKGNAME
@
text
@d89 1
a89 1
if [[ `sysctl kern.securelevel|awk -F"=" '{print $2}'` == 1 ]]
d91 4
d96 7
a102 7
	#######################################
	You are running at a secure level that does not allow for loading 
	kernel modules. An update has been made to /etc/rc.securelevel in
	order to load OpenAFS on the next reboot.
	Please reboot for this to take effect.
	Then just rerun this script to continue the setup.
	#######################################
d104 10
a113 6
	exit
else
	if [[ `modstat|grep afs` == "" ]]
	then
        	/sbin/modload %LOCALBASE%/lib/openafs/libafs.o
	fi
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
# Copyright (c) 2005-2006 Ober Heim <ober@@LinBSD.org>
d13 1
a13 1
    exit;
d16 1
d53 16
d81 1
d89 1
a89 1
if [[ `sysctl kern.securelevel|awk -F"=" '{print $2}'` == 1  && `modstat|grep afs` == "" ]]
d92 7
a98 7
#######################################
You are running at a secure level that does not allow for loading 
kernel modules. An update has been made to /etc/rc.securelevel in
order to load OpenAFS on the next reboot.
Please reboot for this to take effect.
Then just rerun this script to continue the setup.
#######################################
d100 21
a120 1
exit
a136 9

SERVBIN=%LOCALBASE%/libexec/openafs

if [[ `/sbin/mount|/usr/bin/awk '($3 ~ "^/afs") {print $0}'` != "" ]]
then
	echo "/afs is already mounted. Attmepting to unmount"
        /sbin/umount -f /afs||return 1
fi

d158 1
a158 1
	ps ${PG}
d202 9
d230 1
d232 4
a235 6
/bin/mv /usr/sbin/fs /usr/sbin/fs.arla
/bin/mv /usr/sbin/vos /usr/sbin/vos.arla
/bin/mv /usr/sbin/bos /usr/sbin/bos.arla
/bin/mv /usr/sbin/pts /usr/sbin/pts.arla

/bin/mkdir -p -m 0755 /afs
d357 2
a358 1
%LOCALBASE%/sbin/afsd -stat 4000 -dcache 4000 -daemons 6 -volumes 256 -files 5000
@


1.1.1.1
log
@initial import of openafs
@
text
@@
