head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.4
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.1.0.36
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.32
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.34
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.30
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.28
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.26
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.24
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.22
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.20
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.18
	OPENBSD_5_0:1.1.1.1.0.16
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.14
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.12
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.10
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.8
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.6
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.4
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.2
	OPENBSD_4_3_BASE:1.1.1.1
	sthen_20080208:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2016.12.23.13.44.31;	author rzalamena;	state Exp;
branches;
next	1.1;
commitid	zMjp3D5KOeqwsQNR;

1.1
date	2008.02.08.19.30.52;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.02.08.19.30.52;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Improved the igmpproxy code to be able to run on multiple rdomains, here
is a list of changes:
- Ignore interfaces that are not listed in the configuration file: fixes
  an abort when trying to configure interface located in a different
  rdomain and doesn't look to the address of interfaces outside the
  configuration (otherwise it would pick the wrong interface in some cases).
- Improve the routing code: use a rb-tree to store groups avoiding group
  duplications and having to fix hand-rolled list implementations.
- Fixed some warnings and improved debug messages.

As discussed with ajacoutot@@,
ok reyk@@
@
text
@$OpenBSD: patch-igmpproxy_c,v 1.1.1.1 2008/02/08 19:30:52 sthen Exp $
--- igmpproxy.c.orig	Thu Dec 15 19:50:24 2016
+++ igmpproxy.c	Thu Dec 15 19:51:46 2016
@@@@ -41,8 +41,8 @@@@
 #include "version.h"
 #include "build.h"
 
+#include <sys/sysctl.h>
 
-
 // Constants
 static const char Version[] = 
 "igmpproxy, Version " VERSION ", Build" BUILD "\n"
@@@@ -80,7 +80,7 @@@@
 *   on commandline. The number of commandline arguments, and a
 *   pointer to the arguments are recieved on the line...
 */    
-int main( int ArgCn, const char *ArgVc[] ) {
+int main( int ArgCn, char *ArgVc[] ) {
 
     int debugMode = 0;
 
@@@@ -133,6 +133,24 @@@@
     	exit(1);
     }
 
+    {
+	int ipmforwarding = 0;
+	int mib[4];
+	size_t len;
+
+        /* multicast IP forwarding must be enabled */
+        mib[0] = CTL_NET;
+        mib[1] = PF_INET;
+        mib[2] = IPPROTO_IP;
+        mib[3] = IPCTL_MFORWARDING;
+        len = sizeof(ipmforwarding);
+        if (sysctl(mib, 4, &ipmforwarding, &len, NULL, 0) == -1)
+	    log(LOG_ERR, 0, "sysctl");
+
+        if (!ipmforwarding)
+	    log(LOG_ERR, 0, "multicast IP forwarding not enabled");
+    }
+
     // Write debug notice with file path...
     IF_DEBUG log(LOG_DEBUG, 0, "Searching for config file at '%s'" , configFilePath);
 
@@@@ -155,17 +173,8 @@@@
         if ( ! debugMode ) {
     
             IF_DEBUG log( LOG_DEBUG, 0, "Starting daemon mode.");
-    
-            // Only daemon goes past this line...
-            if (fork()) exit(0);
-    
-            // Detach deamon from terminal
-            if ( close( 0 ) < 0 || close( 1 ) < 0 || close( 2 ) < 0 
-                 || open( "/dev/null", 0 ) != 0 || dup2( 0, 1 ) < 0 || dup2( 0, 2 ) < 0
-                 || setpgrp() < 0
-               ) {
+            if ( daemon(1, 0) < 0)
                 log( LOG_ERR, errno, "failed to detach deamon" );
-            }
         }
         
         // Go to the main loop.
@@@@ -218,7 +227,9 @@@@
         int     vifcount = 0;
         upStreamVif = -1;
 
-        for ( Ix = 0; Dp = getIfByIx( Ix ); Ix++ ) {
+        for ( Ix = 0; (Dp = getIfByIx( Ix )); Ix++ ) {
+		if (config_getinterface(Dp->Name) == NULL)
+			continue;
 
             if ( Dp->InAdr.s_addr && ! (Dp->Flags & IFF_LOOPBACK) ) {
                 if(Dp->state == IF_STATE_UPSTREAM) {
@@@@ -237,7 +248,7 @@@@
 
         // If there is only one VIF, or no defined upstream VIF, we send an error.
         if(vifcount < 2 || upStreamVif < 0) {
-            log(LOG_ERR, 0, "There must be at least 2 Vif's where one is upstream.");
+            log(LOG_ERR, 0, "There must be at least 2 Vif's where one is upstream. (vifcount %d, upStreamVif %d)", vifcount, upStreamVif);
         }
     }  
     
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- igmpproxy.c.orig	Sat Aug 20 13:56:32 2005
+++ igmpproxy.c	Mon Nov 19 12:56:50 2007
d14 1
a14 1
@@@@ -80,7 +80,7 @@@@ int         upStreamVif;   
d23 1
a23 1
@@@@ -133,6 +133,24 @@@@ int main( int ArgCn, const char *ArgVc[] ) {
d48 1
a48 1
@@@@ -155,17 +173,8 @@@@ int main( int ArgCn, const char *ArgVc[] ) {
d67 1
a67 1
@@@@ -218,7 +227,7 @@@@ int igmpProxyInit() {
d73 2
d78 1
a78 1
@@@@ -237,7 +246,7 @@@@ int igmpProxyInit() {
@


1.1.1.1
log
@igmpproxy is a simple multicast routing daemon which uses IGMP
forwarding to dynamically route multicast traffic.  Routing is done
by defining an "upstream" interface on which the daemon acts as a
normal Multicast client, and one or more "downstream" interfaces
that serves clients on the destination networks. This is useful in
situations where other dynamic multicast routers cannot be used.

from markus with small adjustments.
ok markus
@
text
@@
