head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.22
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.20
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.18
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.14
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.12
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.10
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.07.03.12.47.11;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@switch to Net::SMTP::TLS::ButMaintained
@
text
@$OpenBSD$

- switch to Net::SMTP::TLS::ButMaintained instead of Net::SMTP::TLS
- adapt to Net::SMTP::TLS' bad error handling

--- check_smtp_send_epn.orig	Sun Feb 26 01:03:10 2012
+++ check_smtp_send_epn	Tue Jul  3 13:45:47 2012
@@@@ -85,7 +85,7 @@@@ if( $smtp_server eq "" && scalar(@@mailto) == 1 ) {
 my @@required_module = ();
 push @@required_module, 'Net::SMTP::SSL' if $ssl;
 push @@required_module, ('MIME::Base64','Authen::SASL') if $ssl && $username;
-push @@required_module, 'Net::SMTP::TLS' if $tls;
+push @@required_module, 'Net::SMTP::TLS::ButMaintained' if $tls;
 push @@required_module, 'Net::SMTP_auth' if $auth_method and not $tls; # whereas if auth_method and tls we use TLS_auth, which is included in this script!
 push @@required_module, 'Text::Template' if $template;
 push @@required_module, 'Net::DNS' if $mx_lookup;
@@@@ -154,11 +154,12 @@@@ eval {
 	}
 	elsif( $tls ) {
 		$smtp_port = $default_smtp_tls_port unless $smtp_port;
-		$smtp = Net::SMTP::TLS->new($smtp_server, Timeout=>$timeout, Port=>$smtp_port, User=>$username, Password=>$password);
-		if( $smtp ) {
-			my $message = oneline($smtp->message());
-			die "cannot connect with TLS: $message" if $smtp->code() =~ m/53\d/;
-		}
+		$smtp = Net::SMTP::TLS::ButMaintained->new($smtp_server, Timeout=>$timeout, Port=>$smtp_port, User=>$username, Password=>$password);
+		# Net::SMTP::TLS error-handling is not the same as Net::SMTP...
+		#if( $smtp ) {
+		#	my $message = oneline($smtp->message());
+		#	die "cannot connect with TLS: $message" if $smtp->code() =~ m/53\d/;
+		#}
 	}
 	elsif( $ssl ) {
 		$smtp_port = $default_smtp_ssl_port unless $smtp_port;
@@@@ -419,7 +420,7 @@@@ sub trim {
 # Based on contribution by Brad Guillory
 package TLS_auth;
 #use Net::SMTP::TLS;
-our @@ISA = qw(Net::SMTP::TLS);
+our @@ISA = qw(Net::SMTP::TLS::ButMaintained);
 use Carp;
 sub new {
 	my ($proto,$server,%p) = @@_;
@@@@ -427,8 +428,8 @@@@ sub new {
 	#my $self = bless {}, $class;
 	no strict 'refs';
 	no warnings 'once';
-	*Net::SMTP::TLS::login = *TLS_auth::login;  # override parent's login with ours so when it's called in the constructor, our overriden version will be used
-	my $self = Net::SMTP::TLS->new($server,%p);
+	*Net::SMTP::TLS::ButMaintained::login = *TLS_auth::login;  # override parent's login with ours so when it's called in the constructor, our overriden version will be used
+	my $self = Net::SMTP::TLS::ButMaintained->new($server,%p);
 	return $self;
 }
 
@
