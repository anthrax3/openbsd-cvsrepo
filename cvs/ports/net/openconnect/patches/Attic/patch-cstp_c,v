head	1.4;
access;
symbols
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2015.03.14.21.25.25;	author sthen;	state dead;
branches;
next	1.3;
commitid	T0CKHENDMZUMCJnI;

1.3
date	2015.02.17.12.13.57;	author sthen;	state Exp;
branches;
next	1.2;
commitid	G1C1fCXl3jl3IOPZ;

1.2
date	2012.06.28.15.43.21;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2012.01.16.22.58.54;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.4
log
@update to openconnect-7.05, adding experimental support for Juniper's
Network Connect ssl-vpn protocol. ("we'll probably end up also implementing
Junos Pulse support which actually provides IPv6 rather than only Legacy IP.
But not this week!")

also fix for LZS compression on strict alignment arches and various other
changes.
@
text
@$OpenBSD: patch-cstp_c,v 1.3 2015/02/17 12:13:57 sthen Exp $

commit 709744176355d935ce727298634a565c78b74f32
Author: Kevin Cernekee <cernekee@@gmail.com>
Date:   Sat Feb 7 14:34:39 2015 -0800

    cstp: AC_PKT_DISCONN payload length can be 0
    
    Terminating ocserv while a connection is active can cause uninitialized
    data to be printed to the terminal:
    
        Established DTLS connection (using GnuTLS). Ciphersuite (DTLS1.2)-(RSA)-(AES-128-GCM).
        Received server disconnect: 00 '<bunch of junk chars>'
        Send BYE packet: Server request
        Session terminated by server; exiting.
    
    If we get an AC_PKT_DISCONN message with no payload, just skip printing
    the disconnect reason.

--- cstp.c.orig	Sun Jan 25 23:00:46 2015
+++ cstp.c	Tue Feb 17 11:53:46 2015
@@@@ -1009,14 +1009,18 @@@@ int cstp_mainloop(struct openconnect_info *vpninfo, in
 
 		case AC_PKT_DISCONN: {
 			int i;
-			for (i = 1; i < payload_len; i++) {
-				if (!isprint(vpninfo->cstp_pkt->data[i]))
-					vpninfo->cstp_pkt->data[i] = '.';
+			if (payload_len >= 2) {
+				for (i = 1; i < payload_len; i++) {
+					if (!isprint(vpninfo->cstp_pkt->data[i]))
+						vpninfo->cstp_pkt->data[i] = '.';
+				}
+				vpninfo->cstp_pkt->data[payload_len] = 0;
+				vpn_progress(vpninfo, PRG_ERR,
+					     _("Received server disconnect: %02x '%s'\n"),
+					     vpninfo->cstp_pkt->data[0], vpninfo->cstp_pkt->data + 1);
+			} else {
+				vpn_progress(vpninfo, PRG_ERR, _("Received server disconnect\n"));
 			}
-			vpninfo->cstp_pkt->data[payload_len] = 0;
-			vpn_progress(vpninfo, PRG_ERR,
-				     _("Received server disconnect: %02x '%s'\n"),
-				     vpninfo->cstp_pkt->data[0], vpninfo->cstp_pkt->data + 1);
 			vpninfo->quit_reason = "Server request";
 			return -EPIPE;
 		}
@


1.3
log
@Add a patch from OpenConnect upstream; "If we get an AC_PKT_DISCONN
message with no payload, just skip printing the disconnect reason."
Fixes printing junk and possibly crashing if the server goes away.

Tweak DESCR, mention the open-source server ocserv (port for this is
ready but holding in openbsd-wip until we're done with 5.7).

(Readers might be interested to note that 7.04 is probably the last
version of OpenConnect to only support Cisco's SSL-VPN protocol; the
next version will almost certainly add client support for Juniper's
protocol).
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@update to OpenConnect 4.02

- thanks to David Woodhouse (upstream) for quickly fixing a build
problem I ran into with 4.01.
@
text
@d1 1
a1 1
$OpenBSD: patch-cstp_c,v 1.1 2012/01/16 22:58:54 sthen Exp $
d3 3
a5 2
- Fix memory leak of CSTP deflated packets, and resend current pkt on reconnect
b39d34 upstream
d7 12
a18 2
- Fix memory leak of zlib streams on CSTP reconnect
85772d upstream
d20 18
a37 9
--- cstp.c.orig	Sat Nov  5 12:41:23 2011
+++ cstp.c	Thu Jan 12 09:41:34 2012
@@@@ -394,11 +394,14 @@@@ int make_cstp_connection(struct openconnect_info *vpni
 			if (!vpninfo->deflate_pkt) {
 				vpn_progress(vpninfo, PRG_ERR,
 					     _("Allocation of deflate buffer failed\n"));
+				inflateEnd(&vpninfo->inflate_strm);
+				deflateEnd(&vpninfo->deflate_strm);
 				vpninfo->deflate = 0;
d39 1
a39 3
+				memset(vpninfo->deflate_pkt, 0, sizeof(struct pkt));
+				memcpy(vpninfo->deflate_pkt->hdr, data_hdr, 8);
+				vpninfo->deflate_pkt->hdr[6] = AC_PKT_COMPRESSED;
d41 6
a46 3
-			memset(vpninfo->deflate_pkt, 0, sizeof(struct pkt));
-			memcpy(vpninfo->deflate_pkt->hdr, data_hdr, 8);
-			vpninfo->deflate_pkt->hdr[6] = AC_PKT_COMPRESSED;
a47 47
 	}
 
@@@@ -413,11 +416,16 @@@@ int cstp_reconnect(struct openconnect_info *vpninfo)
 
 	openconnect_close_https(vpninfo);
 
-	/* It's already deflated in the old stream. Extremely
-	   non-trivial to reconstitute it; just throw it away */
-	if (vpninfo->current_ssl_pkt == vpninfo->deflate_pkt)
+	/* Requeue the original packet that was deflated */
+	if (vpninfo->current_ssl_pkt == vpninfo->deflate_pkt) {
 		vpninfo->current_ssl_pkt = NULL;
-
+		queue_packet(&vpninfo->outgoing_queue, vpninfo->pending_deflated_pkt);
+		vpninfo->pending_deflated_pkt = NULL;
+	}
+	if (vpninfo->deflate) {
+		inflateEnd(&vpninfo->inflate_strm);
+		deflateEnd(&vpninfo->deflate_strm);
+	}
 	timeout = vpninfo->reconnect_timeout;
 	interval = vpninfo->reconnect_interval;
 
@@@@ -623,10 +631,11 @@@@ int cstp_mainloop(struct openconnect_info *vpninfo, in
 			return 1;
 		}
 		/* Don't free the 'special' packets */
-		if (vpninfo->current_ssl_pkt != vpninfo->deflate_pkt &&
-		    vpninfo->current_ssl_pkt != &dpd_pkt &&
-		    vpninfo->current_ssl_pkt != &dpd_resp_pkt &&
-		    vpninfo->current_ssl_pkt != &keepalive_pkt)
+		if (vpninfo->current_ssl_pkt == vpninfo->deflate_pkt)
+			free(vpninfo->pending_deflated_pkt);
+		else if (vpninfo->current_ssl_pkt != &dpd_pkt &&
+			 vpninfo->current_ssl_pkt != &dpd_resp_pkt &&
+			 vpninfo->current_ssl_pkt != &keepalive_pkt)
 			free(vpninfo->current_ssl_pkt);
 
 		vpninfo->current_ssl_pkt = NULL;
@@@@ -722,6 +731,7 @@@@ int cstp_mainloop(struct openconnect_info *vpninfo, in
 				     _("Sending compressed data packet of %d bytes\n"),
 				     this->len);
 
+			vpninfo->pending_deflated_pkt = this;
 			vpninfo->current_ssl_pkt = vpninfo->deflate_pkt;
 		} else {
 		uncompr:
@


1.1
log
@pick a few patches to OpenConnect from upstream repo.
@
text
@d1 1
a1 1
$OpenBSD$
@

