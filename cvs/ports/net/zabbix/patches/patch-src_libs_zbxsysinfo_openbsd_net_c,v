head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.4
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.1.1.0.2
	OPENBSD_4_6_BASE:1.1.1.1
	jasper_20090422:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2017.01.08.19.24.53;	author robert;	state Exp;
branches;
next	1.6;
commitid	KqsiyUKDJHk5o1mr;

1.6
date	2015.12.09.17.43.36;	author jca;	state Exp;
branches;
next	1.5;
commitid	icdp2nASDPSdaPq0;

1.5
date	2010.12.27.17.19.17;	author ajacoutot;	state dead;
branches;
next	1.4;

1.4
date	2010.12.13.10.40.52;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.27.08.10.32;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.11.18.30.01;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2009.04.22.15.03.52;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.04.22.15.03.52;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.7
log
@update to 3.2.3;

add libxml support for vm monitoring, fix broken sensors and remove
the obsolete zabbix_agent.conf

diff from Mark Patruck
@
text
@$OpenBSD: patch-src_libs_zbxsysinfo_openbsd_net_c,v 1.6 2015/12/09 17:43:36 jca Exp $

Stop using struct ifnet and libkvm for interface stats.

--- src/libs/zbxsysinfo/openbsd/net.c.orig	Fri Sep 30 11:42:54 2016
+++ src/libs/zbxsysinfo/openbsd/net.c	Tue Nov 22 10:12:32 2016
@@@@ -35,7 +35,6 @@@@
 
 static struct nlist kernel_symbols[] =
 {
-	{"_ifnet", N_UNDF, 0, 0, 0},
 	{"_tcbtable", N_UNDF, 0, 0, 0},
 	{NULL, 0, 0, 0, 0}
 };
@@@@ -48,11 +47,6 @@@@ static int	get_ifdata(const char *if_name,
 		zbx_uint64_t *tbytes, zbx_uint64_t *tpackets, zbx_uint64_t *terrors,
 		zbx_uint64_t *icollisions, char **error)
 {
-	struct ifnet_head	head;
-	struct ifnet		*ifp;
-
-	kvm_t	*kp;
-	int	len = 0;
 	int	ret = SYSINFO_RET_FAIL;
 
 	if (NULL == if_name || '\0' == *if_name)
@@@@ -93,66 +87,7 @@@@ static int	get_ifdata(const char *if_name,
 	if (icollisions)
 		*icollisions = 0;
 
-	if (NULL != (kp = kvm_open(NULL, NULL, NULL, O_RDONLY, NULL))) /* requires root privileges */
 	{
-		struct ifnet	v;
-
-		if (N_UNDF == kernel_symbols[IFNET_ID].n_type)
-			if (0 != kvm_nlist(kp, &kernel_symbols[0]))
-				kernel_symbols[IFNET_ID].n_type = N_UNDF;
-
-		if (N_UNDF != kernel_symbols[IFNET_ID].n_type)
-		{
-			len = sizeof(struct ifnet_head);
-
-			if (kvm_read(kp, kernel_symbols[IFNET_ID].n_value, &head, len) >= len)
-			{
-				len = sizeof(struct ifnet);
-
-				for (ifp = head.tqh_first; ifp; ifp = v.if_list.tqe_next)
-				{
-					if (kvm_read(kp, (u_long)ifp, &v, len) < len)
-						break;
-
-					if (0 == strcmp(if_name, v.if_xname))
-					{
-						if (ibytes)
-							*ibytes += v.if_ibytes;
-						if (ipackets)
-							*ipackets += v.if_ipackets;
-						if (ierrors)
-							*ierrors += v.if_ierrors;
-						if (idropped)
-							*idropped += v.if_iqdrops;
-						if (obytes)
-							*obytes += v.if_obytes;
-						if (opackets)
-							*opackets += v.if_opackets;
-						if (oerrors)
-							*oerrors += v.if_oerrors;
-						if (tbytes)
-							*tbytes += v.if_ibytes + v.if_obytes;
-						if (tpackets)
-							*tpackets += v.if_ipackets + v.if_opackets;
-						if (terrors)
-							*terrors += v.if_ierrors + v.if_oerrors;
-						if (icollisions)
-							*icollisions += v.if_collisions;
-
-						ret = SYSINFO_RET_OK;
-					}
-				}
-			}
-		}
-		kvm_close(kp);
-
-		if (SYSINFO_RET_FAIL == ret)
-			*error = zbx_strdup(NULL, "Cannot find information for this network interface.");
-	}
-	else
-	{
-		/* fallback to using SIOCGIFDATA */
-
 		int		if_s;
 		struct ifreq	ifr;
 		struct if_data	v;
@


1.6
log
@Unbreak: stop using struct ifnet and libkvm for interface stats.

ok robert@@
@
text
@d1 1
a1 1
$OpenBSD$
d5 3
a7 3
--- src/libs/zbxsysinfo/openbsd/net.c.orig	Mon Aug 10 10:56:48 2015
+++ src/libs/zbxsysinfo/openbsd/net.c	Wed Dec  9 18:41:03 2015
@@@@ -24,13 +24,8 @@@@
a8 6
 #include <sys/sockio.h>
 
-#if OpenBSD >= 201405
-#	include <net/if_var.h>	/* structs ifnet and ifnet_head are defined in this header since OpenBSD 5.5 */
-#endif
-
d15 1
a15 1
@@@@ -43,11 +38,6 @@@@ static int	get_ifdata(const char *if_name,
d27 1
a27 1
@@@@ -88,66 +78,7 @@@@ static int	get_ifdata(const char *if_name,
@


1.5
log
@Update to the latest available RC (1.8.4rc3).
Details available at:
http://www.zabbix.com/documentation/1.8/manual/about/what_s_new_1.8.4

We are updating now because this release brings lots of fixes and
integrates robert@@'s patches for sensors and network statistics. Used
in production for several weeks now.
Final 1.8.4 is scheduled to be released shortly.

ok robert@@
@
text
@d1 14
a14 9
$OpenBSD: patch-src_libs_zbxsysinfo_openbsd_net_c,v 1.4 2010/12/13 10:40:52 robert Exp $
--- src/libs/zbxsysinfo/openbsd/net.c.orig	Mon Aug 16 10:19:32 2010
+++ src/libs/zbxsysinfo/openbsd/net.c	Mon Dec 13 11:36:59 2010
@@@@ -21,6 +21,8 @@@@
 
 #include "sysinfo.h"
 
+#include <sys/sockio.h>
+
d17 77
a93 238
 	{"_ifnet", N_UNDF, 0, 0, 0},
@@@@ -32,69 +34,71 @@@@ static struct nlist kernel_symbols[] =
 
 static int	get_ifdata(const char *if_name, zbx_uint64_t *ibytes, zbx_uint64_t *ipackets, zbx_uint64_t *ierrors, zbx_uint64_t *idropped,
 						zbx_uint64_t *obytes, zbx_uint64_t *opackets, zbx_uint64_t *oerrors,
-						zbx_uint64_t *tbytes, zbx_uint64_t *tpackets, zbx_uint64_t *terrors, zbx_uint64_t *tdropped,
+						zbx_uint64_t *tbytes, zbx_uint64_t *tpackets, zbx_uint64_t *terrors,
 						zbx_uint64_t *icollisions)
 {
 	struct ifnet_head	head;
-	struct ifnet 		*ifp;
-	struct ifnet		v;
+	struct ifnet		*ifp;
 
-	kvm_t 	*kp;
+	kvm_t	*kp;
 	int	len = 0;
-	int 	ret = SYSINFO_RET_FAIL;
+	int	ret = SYSINFO_RET_FAIL;
 
-	kp = kvm_open(NULL, NULL, NULL, O_RDONLY, NULL);
+	/* if(i)_ibytes;	total number of octets received */
+	/* if(i)_ipackets;	packets received on interface */
+	/* if(i)_ierrors;	input errors on interface */
+	/* if(i)_iqdrops;	dropped on input, this interface */
+	/* if(i)_obytes;	total number of octets sent */
+	/* if(i)_opackets;	packets sent on interface */
+	/* if(i)_oerrors;	output errors on interface */
+	/* if(i)_collisions;	collisions on csma interfaces */
 
-	if (kp) {
+	if (ibytes)
+		*ibytes = 0;
+	if (ipackets)
+		*ipackets = 0;
+	if (ierrors)
+		*ierrors = 0;
+	if (idropped)
+		*idropped = 0;
+	if (obytes)
+		*obytes = 0;
+	if (opackets)
+		*opackets = 0;
+	if (oerrors)
+		*oerrors = 0;
+	if (tbytes)
+		*tbytes = 0;
+	if (tpackets)
+		*tpackets = 0;
+	if (terrors)
+		*terrors = 0;
+	if (icollisions)
+		*icollisions = 0;
+
+	if (NULL != (kp = kvm_open(NULL, NULL, NULL, O_RDONLY, NULL))) /* requires root privileges */
+	{
+		struct ifnet	v;
+
 		if (N_UNDF == kernel_symbols[IFNET_ID].n_type)
 			if (0 != kvm_nlist(kp, &kernel_symbols[0]))
 				kernel_symbols[IFNET_ID].n_type = N_UNDF;
 
-		if (N_UNDF != kernel_symbols[IFNET_ID].n_type) {
+		if (N_UNDF != kernel_symbols[IFNET_ID].n_type)
+		{
 			len = sizeof(struct ifnet_head);
 
-			if (kvm_read(kp, kernel_symbols[IFNET_ID].n_value, &head, len) >= len) {
+			if (kvm_read(kp, kernel_symbols[IFNET_ID].n_value, &head, len) >= len)
+			{
 				len = sizeof(struct ifnet);
 
-				/* if_ibytes;		total number of octets received */
-				/* if_ipackets;		packets received on interface */
-				/* if_ierrors;		input errors on interface */
-				/* if_iqdrops;		dropped on input, this interface */
-				/* if_obytes;		total number of octets sent */
-				/* if_opackets;		packets sent on interface */
-				/* if_oerrors;		output errors on interface */
-				/* if_collisions;	collisions on csma interfaces */
-
-				if (ibytes)
-					*ibytes = 0;
-				if (ipackets)
-					*ipackets = 0;
-				if (ierrors)
-					*ierrors = 0;
-				if (idropped)
-					*idropped = 0;
-				if (obytes)
-					*obytes = 0;
-				if (opackets)
-					*opackets = 0;
-				if (oerrors)
-					*oerrors = 0;
-				if (tbytes)
-					*tbytes = 0;
-				if (tpackets)
-					*tpackets = 0;
-				if (terrors)
-					*terrors = 0;
-				if (tdropped)
-					*tdropped = 0;
-				if (icollisions)
-					*icollisions = 0;
-
-				for(ifp = head.tqh_first; ifp; ifp = v.if_list.tqe_next) {
+				for (ifp = head.tqh_first; ifp; ifp = v.if_list.tqe_next)
+				{
 					if (kvm_read(kp, (u_long)ifp, &v, len) < len)
 						break;
 
-					if (*if_name == '\0' || 0 == strcmp(if_name, v.if_xname)) {
+					if ('\0' == *if_name || 0 == strcmp(if_name, v.if_xname))
+					{
 						if (ibytes)
 							*ibytes += v.if_ibytes;
 						if (ipackets)
@@@@ -115,8 +119,6 @@@@ static int	get_ifdata(const char *if_name, zbx_uint64_
 							*tpackets += v.if_ipackets + v.if_opackets;
 						if (terrors)
 							*terrors += v.if_ierrors + v.if_oerrors;
-						if (tdropped)
-							*tdropped += v.if_iqdrops;
 						if (icollisions)
 							*icollisions += v.if_collisions;
 						ret = SYSINFO_RET_OK;
@@@@ -126,80 +128,63 @@@@ static int	get_ifdata(const char *if_name, zbx_uint64_
 		}
 		kvm_close(kp);
 	}
+	else
+	{
+		/* Fallback to using SIOCGIFDATA */
 
-	return ret;
-}
+		int		if_s;
+		struct ifreq	ifr;
+		struct if_data	v;
 
-static int	NET_IF_IN_BYTES(const char *if_name, AGENT_RESULT *result)
-{
-	zbx_uint64_t	value;
+		if ((if_s = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
+			goto clean;
 
-	if (SYSINFO_RET_OK != get_ifdata(if_name, &value, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL))
-		return SYSINFO_RET_FAIL;
+		zbx_strlcpy(ifr.ifr_name, if_name, IFNAMSIZ - 1);
+		ifr.ifr_data = (caddr_t)&v;
 
-	SET_UI64_RESULT(result, value);
+		if (ioctl(if_s, SIOCGIFDATA, &ifr) < 0)
+			goto clean;
 
-	return SYSINFO_RET_OK;
-}
+		if ('\0' == *if_name || 0 == strcmp(if_name, ifr.ifr_name))
+		{
+			if (ibytes)
+				*ibytes += v.ifi_ibytes;
+			if (ipackets)
+				*ipackets += v.ifi_ipackets;
+			if (ierrors)
+				*ierrors += v.ifi_ierrors;
+			if (idropped)
+				*idropped += v.ifi_iqdrops;
+			if (obytes)
+				*obytes += v.ifi_obytes;
+			if (opackets)
+				*opackets += v.ifi_opackets;
+			if (oerrors)
+				*oerrors += v.ifi_oerrors;
+			if (tbytes)
+				*tbytes += v.ifi_ibytes + v.ifi_obytes;
+			if (tpackets)
+				*tpackets += v.ifi_ipackets + v.ifi_opackets;
+			if (terrors)
+				*terrors += v.ifi_ierrors + v.ifi_oerrors;
+			if (icollisions)
+				*icollisions += v.ifi_collisions;
+		}
 
-static int	NET_IF_IN_PACKETS(const char *if_name, AGENT_RESULT *result)
-{
-	zbx_uint64_t	value;
+		ret = SYSINFO_RET_OK;
+clean:
+		if (if_s >= 0)
+			close(if_s);
+	}
 
-	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, &value, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL))
-		return SYSINFO_RET_FAIL;
-
-	SET_UI64_RESULT(result, value);
-
-	return SYSINFO_RET_OK;
+	return ret;
 }
 
-static int	NET_IF_IN_ERRORS(const char *if_name, AGENT_RESULT *result)
-{
-	zbx_uint64_t	value;
-
-	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, &value, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL))
-		return SYSINFO_RET_FAIL;
-
-	SET_UI64_RESULT(result, value);
-
-	return SYSINFO_RET_OK;
-}
-
-static int	NET_IF_IN_DROPPED(const char *if_name, AGENT_RESULT *result)
-{
-	zbx_uint64_t	value;
-
-	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, NULL, &value, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL))
-		return SYSINFO_RET_FAIL;
-
-	SET_UI64_RESULT(result, value);
-
-	return SYSINFO_RET_OK;
-}
-
 int	NET_IF_IN(const char *cmd, const char *param, unsigned flags, AGENT_RESULT *result)
 {
-#define NET_FNCLIST struct net_fnclist_s
-NET_FNCLIST
-{
-	char	*mode;
-	int	(*function)();
-};
+	char		if_name[MAX_STRING_LEN], mode[16];
+	zbx_uint64_t	ibytes, ipackets, ierrors, idropped;
 
-	NET_FNCLIST fl[] =
d95 1
a95 74
-		{"bytes",	NET_IF_IN_BYTES},
-		{"packets",	NET_IF_IN_PACKETS},
-		{"errors",	NET_IF_IN_ERRORS},
-		{"dropped",	NET_IF_IN_DROPPED},
-		{0,		0}
-	};
-
-	char	if_name[MAX_STRING_LEN];
-	char	mode[MAX_STRING_LEN];
-	int	i;
-
 	assert(result);
 
 	init_result(result);
@@@@ -213,75 +198,36 @@@@ NET_FNCLIST
 	if (0 != get_param(param, 2, mode, sizeof(mode)))
 		*mode = '\0';
 
-	/* default parameter */
-	if (*mode == '\0')
-		zbx_snprintf(mode, sizeof(mode), "bytes");
-
-	for (i = 0; fl[i].mode != 0; i++)
-		if (0 == strncmp(mode, fl[i].mode, MAX_STRING_LEN))
-			return (fl[i].function)(if_name, result);
-
-	return SYSINFO_RET_FAIL;
-}
-
-static int	NET_IF_OUT_BYTES(const char *if_name, AGENT_RESULT *result)
-{
-	zbx_uint64_t	value;
-
-	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, NULL, NULL, &value, NULL, NULL, NULL, NULL, NULL, NULL, NULL))
+	if (SYSINFO_RET_OK != get_ifdata(if_name, &ibytes, &ipackets, &ierrors, &idropped, NULL, NULL, NULL, NULL, NULL, NULL, NULL))
 		return SYSINFO_RET_FAIL;
 
-	SET_UI64_RESULT(result, value);
-
-	return SYSINFO_RET_OK;
-}
-
-static int      NET_IF_OUT_PACKETS(const char *if_name, AGENT_RESULT *result)
-{
-	zbx_uint64_t	value;
-
-	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, NULL, NULL, NULL, &value, NULL, NULL, NULL, NULL, NULL, NULL))
+	if ('\0' == *mode || 0 == strcmp(mode, "bytes"))	/* default parameter */
+	{
+		SET_UI64_RESULT(result, ibytes);
+	}
+	else if (0 == strcmp(mode, "packets"))
+	{
+		SET_UI64_RESULT(result, ipackets);
+	}
+	else if (0 == strcmp(mode, "errors"))
+	{
+		SET_UI64_RESULT(result, ierrors);
+	}
+	else if (0 == strcmp(mode, "dropped"))
+	{
+		SET_UI64_RESULT(result, idropped);
+	}
+	else
 		return SYSINFO_RET_FAIL;
 
-	SET_UI64_RESULT(result, value);
-
 	return SYSINFO_RET_OK;
 }
 
-static int      NET_IF_OUT_ERRORS(const char *if_name, AGENT_RESULT *result)
-{
-	zbx_uint64_t	value;
d97 3
a99 202
-	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, NULL, NULL, NULL, NULL, &value, NULL, NULL, NULL, NULL, NULL))
-		return SYSINFO_RET_FAIL;
-
-	SET_UI64_RESULT(result, value);
-
-	return SYSINFO_RET_OK;
-}
-
 int	NET_IF_OUT(const char *cmd, const char *param, unsigned flags, AGENT_RESULT *result)
 {
-#define NET_FNCLIST struct net_fnclist_s
-NET_FNCLIST
-{
-	char	*mode;
-	int	(*function)();
-};
+	char		if_name[MAX_STRING_LEN], mode[16];
+	zbx_uint64_t	obytes, opackets, oerrors;
 
-	NET_FNCLIST fl[] =
-	{
-		{"bytes",	NET_IF_OUT_BYTES},
-		{"packets",	NET_IF_OUT_PACKETS},
-		{"errors",	NET_IF_OUT_ERRORS},
-/*		{"dropped",	NET_IF_OUT_DROPPED},*/
-		{0,		0}
-	};
-
-	char	if_name[MAX_STRING_LEN];
-	char	mode[MAX_STRING_LEN];
-	int	i;
-
 	assert(result);
 
 	init_result(result);
@@@@ -295,87 +241,32 @@@@ NET_FNCLIST
 	if (0 != get_param(param, 2, mode, sizeof(mode)))
 		*mode = '\0';
 
-	/* default parameter */
-	if (*mode == '\0')
-		zbx_snprintf(mode, sizeof(mode), "bytes");
-
-	for (i = 0; fl[i].mode != 0; i++)
-		if (0 == strncmp(mode, fl[i].mode, MAX_STRING_LEN))
-			return (fl[i].function)(if_name, result);
-
-	return SYSINFO_RET_FAIL;
-}
-
-static int	NET_IF_TOTAL_BYTES(const char *if_name, AGENT_RESULT *result)
-{
-	zbx_uint64_t	value;
-
-	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, NULL, NULL, NULL, NULL, NULL, &value, NULL, NULL, NULL, NULL))
+	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, NULL, NULL, &obytes, &opackets, &oerrors, NULL, NULL, NULL, NULL))
 		return SYSINFO_RET_FAIL;
 
-	SET_UI64_RESULT(result, value);
-
-	return SYSINFO_RET_OK;
-}
-
-static int	NET_IF_TOTAL_PACKETS(const char *if_name, AGENT_RESULT *result)
-{
-	zbx_uint64_t	value;
-
-	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, &value, NULL, NULL, NULL))
+	if ('\0' == *mode || 0 == strcmp(mode, "bytes"))	/* default parameter */
+	{
+		SET_UI64_RESULT(result, obytes);
+	}
+	else if (0 == strcmp(mode, "packets"))
+	{
+		SET_UI64_RESULT(result, opackets);
+	}
+	else if (0 == strcmp(mode, "errors"))
+	{
+		SET_UI64_RESULT(result, oerrors);
+	}
+	else
 		return SYSINFO_RET_FAIL;
 
-	SET_UI64_RESULT(result, value);
-
 	return SYSINFO_RET_OK;
 }
 
-static int	NET_IF_TOTAL_ERRORS(const char *if_name, AGENT_RESULT *result)
-{
-	zbx_uint64_t	value;
-
-	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, &value, NULL, NULL))
-		return SYSINFO_RET_FAIL;
-
-	SET_UI64_RESULT(result, value);
-
-	return SYSINFO_RET_OK;
-}
-
-static int	NET_IF_TOTAL_DROPPED(const char *if_name, AGENT_RESULT *result)
-{
-	zbx_uint64_t	value;
-
-	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, &value, NULL))
-		return SYSINFO_RET_FAIL;
-
-	SET_UI64_RESULT(result, value);
-
-	return SYSINFO_RET_OK;
-}
-
 int	NET_IF_TOTAL(const char *cmd, const char *param, unsigned flags, AGENT_RESULT *result)
 {
-#define NET_FNCLIST struct net_fnclist_s
-NET_FNCLIST
-{
-	char	*mode;
-	int	(*function)();
-};
+	char		if_name[MAX_STRING_LEN], mode[16];
+	zbx_uint64_t	tbytes, tpackets, terrors;
 
-	NET_FNCLIST fl[] =
-	{
-		{"bytes",	NET_IF_TOTAL_BYTES},
-		{"packets",	NET_IF_TOTAL_PACKETS},
-		{"errors",	NET_IF_TOTAL_ERRORS},
-/*		{"dropped",	NET_IF_TOTAL_DROPPED},*/ /* disabled because net.if.out does not support dropped packets */
-		{0,		0}
-	};
-
-	char	if_name[MAX_STRING_LEN];
-	char	mode[MAX_STRING_LEN];
-	int	i;
-
 	assert(result);
 
 	init_result(result);
@@@@ -389,18 +280,28 @@@@ NET_FNCLIST
 	if (0 != get_param(param, 2, mode, sizeof(mode)))
 		*mode = '\0';
 
-	/* default parameter */
-	if (*mode == '\0')
-		zbx_snprintf(mode, sizeof(mode), "bytes");
+	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, NULL, NULL, NULL, NULL, NULL, &tbytes, &tpackets, &terrors, NULL))
+		return SYSINFO_RET_FAIL;
 
-	for (i = 0; fl[i].mode != 0; i++)
-		if (0 == strncmp(mode, fl[i].mode, MAX_STRING_LEN))
-			return (fl[i].function)(if_name, result);
+	if ('\0' == *mode || 0 == strcmp(mode, "bytes"))	/* default parameter */
+	{
+		SET_UI64_RESULT(result, tbytes);
+	}
+	else if (0 == strcmp(mode, "packets"))
+	{
+		SET_UI64_RESULT(result, tpackets);
+	}
+	else if (0 == strcmp(mode, "errors"))
+	{
+		SET_UI64_RESULT(result, terrors);
+	}
+	else
+		return SYSINFO_RET_FAIL;
 
-	return SYSINFO_RET_FAIL;
+	return SYSINFO_RET_OK;
 }
 
-int     NET_TCP_LISTEN(const char *cmd, const char *param, unsigned flags, AGENT_RESULT *result)
+int	NET_TCP_LISTEN(const char *cmd, const char *param, unsigned flags, AGENT_RESULT *result)
 {
 	assert(result);
 
@@@@ -409,10 +310,10 @@@@ int     NET_TCP_LISTEN(const char *cmd, const char *pa
 	return SYSINFO_RET_FAIL;
 }
 
-int     NET_IF_COLLISIONS(const char *cmd, const char *param, unsigned flags, AGENT_RESULT *result)
+int	NET_IF_COLLISIONS(const char *cmd, const char *param, unsigned flags, AGENT_RESULT *result)
 {
-	zbx_uint64_t	value;
 	char		if_name[MAX_STRING_LEN];
+	zbx_uint64_t	icollisions;
 
 	assert(result);
 
@@@@ -424,10 +325,10 @@@@ int     NET_IF_COLLISIONS(const char *cmd, const char 
 	if (0 != get_param(param, 1, if_name, sizeof(if_name)))
 		*if_name = '\0';
 
-	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, &value))
+	if (SYSINFO_RET_OK != get_ifdata(if_name, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, &icollisions))
 		return SYSINFO_RET_FAIL;
 
-	SET_UI64_RESULT(result, value);
+	SET_UI64_RESULT(result, icollisions);
 
 	return SYSINFO_RET_OK;
 }
@


1.4
log
@Update tthis patch from the zabbix repo with a fixed socket leak
@
text
@d1 1
a1 1
$OpenBSD: patch-src_libs_zbxsysinfo_openbsd_net_c,v 1.3 2010/09/27 08:10:32 robert Exp $
@


1.3
log
@If zabbix_agent does not have perms to access kmem, then
fallback to using the SIOCGIFDATA ioctl to get iface stats.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_libs_zbxsysinfo_openbsd_net_c,v 1.2 2010/01/11 18:30:01 jasper Exp $
d3 2
a4 2
+++ src/libs/zbxsysinfo/openbsd/net.c	Sun Sep 26 16:28:44 2010
@@@@ -21,6 +21,10 @@@@
a9 2
+#define	N_UNDF	0x00		/* undefined */
+
d13 7
a19 1
@@@@ -37,15 +41,50 @@@@ static int	get_ifdata(const char *if_name, zbx_uint64_
d22 1
a22 1
 	struct ifnet 		*ifp;
d24 1
d26 2
a27 1
 	kvm_t 	*kp;
d29 2
a30 1
 	int 	ret = SYSINFO_RET_FAIL;
d32 11
a42 9
+	/* if_ibytes;		total number of octets received */
+	/* if_ipackets;		packets received on interface */
+	/* if_ierrors;		input errors on interface */
+	/* if_iqdrops;		dropped on input, this interface */
+	/* if_obytes;		total number of octets sent */
+	/* if_opackets;		packets sent on interface */
+	/* if_oerrors;		output errors on interface */
+	/* if_collisions;	collisions on csma interfaces */
+
a62 2
+	if (tdropped)
+		*tdropped = 0;
d66 3
a68 4
 	kp = kvm_open(NULL, NULL, NULL, O_RDONLY, NULL);
 
 	if (kp) {
+		struct ifnet		v;
d73 9
a81 2
@@@@ -56,40 +95,6 @@@@ static int	get_ifdata(const char *if_name, zbx_uint64_
 			if (kvm_read(kp, kernel_symbols[IFNET_ID].n_value, &head, len) >= len) {
d118 3
a120 1
 				for(ifp = head.tqh_first; ifp; ifp = v.if_list.tqe_next) {
d123 17
a139 2
@@@@ -125,8 +130,53 @@@@ static int	get_ifdata(const char *if_name, zbx_uint64_
 			}
d142 14
a155 5
+	} else { /* Fallback to using SIOCGIFDATA */
+		int if_s = -1;
+		struct ifreq ifr;
+		struct if_data v;
+
d157 4
a160 2
+			goto out;
+
d163 9
a171 5
+
+		if (ioctl(if_s, SIOCGIFDATA, &ifr))
+			goto out;
+
+		if (*if_name == '\0' || 0 == strcmp(if_name, ifr.ifr_name)) {
a191 2
+			if (tdropped)
+				*tdropped += v.ifi_iqdrops;
d195 4
a198 3
+
+		close(if_s);
+
d200 301
a500 1
 	}
d502 2
a503 2
+out:
 	return ret;
d506 22
@


1.2
log
@- update zabbix to 1.8
- remove -doc subpackage, the documentation is still available online

look good to sthen@@
@
text
@d1 4
a4 4
$OpenBSD: patch-src_libs_zbxsysinfo_openbsd_net_c,v 1.1.1.1 2009/04/22 15:03:52 jasper Exp $
--- src/libs/zbxsysinfo/openbsd/net.c.orig	Thu Dec 24 00:03:53 2009
+++ src/libs/zbxsysinfo/openbsd/net.c	Thu Dec 24 00:04:20 2009
@@@@ -21,6 +21,8 @@@@
d8 2
d15 147
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- src/libs/zbxsysinfo/openbsd/net.c.orig	Wed Apr 22 15:56:31 2009
+++ src/libs/zbxsysinfo/openbsd/net.c	Wed Apr 22 16:03:55 2009
d10 1
a10 1
 static struct nlist kernel_symbols[] = 
@


1.1.1.1
log
@import zabbix 1.6.4

ZABBIX is an enterprise-class open source distributed monitoring
solution designed to monitor and track performance and availability of
network servers, devices and other IT resources. It supports distributed
and WEB monitoring, and more.

based on original work by bernd@@
ok ajacoutot@@
@
text
@@
