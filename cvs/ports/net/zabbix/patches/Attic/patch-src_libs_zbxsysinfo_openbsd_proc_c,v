head	1.8;
access;
symbols
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.4
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.2
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2014.12.28.15.17.10;	author robert;	state dead;
branches;
next	1.7;
commitid	DKRKGi66Mgz10wd5;

1.7
date	2014.07.08.08.10.38;	author robert;	state Exp;
branches;
next	1.6;
commitid	YdAJuIm8TNlWCItk;

1.6
date	2014.01.14.15.17.46;	author robert;	state Exp;
branches;
next	1.5;

1.5
date	2013.01.24.18.48.15;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	2012.10.10.22.04.57;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.08.18.53.23;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	2010.08.22.14.43.24;	author ajacoutot;	state dead;
branches;
next	1.1;

1.1
date	2010.01.24.14.09.00;	author okan;	state Exp;
branches;
next	;


desc
@@


1.8
log
@update to zabbix 2.4.3
@
text
@$OpenBSD: patch-src_libs_zbxsysinfo_openbsd_proc_c,v 1.7 2014/07/08 08:10:38 robert Exp $
--- src/libs/zbxsysinfo/openbsd/proc.c.orig	Mon Jun 23 16:12:56 2014
+++ src/libs/zbxsysinfo/openbsd/proc.c	Tue Jul  8 10:09:58 2014
@@@@ -40,7 +40,7 @@@@
 #	endif
 #endif
 
-#ifdef KERN_PROC2
+#if defined(__OpenBSD__)
 #	define ZBX_P_COMM	p_comm
 #	define ZBX_P_PID	p_pid
 #	define ZBX_P_STAT	p_stat
@@@@ -126,13 +126,12 @@@@ int     PROC_MEM(AGENT_REQUEST *request, AGENT_RESULT 
 
 	struct passwd		*usrinfo;
 
-#ifdef KERN_PROC2
+#if defined(__OpenBSD__)
 	int			mib[6];
-	struct kinfo_proc2	*proc = NULL;
 #else
 	int			mib[4];
-	struct kinfo_proc	*proc = NULL;
 #endif
+	struct kinfo_proc	*proc = NULL;
 
 	char	**argv = NULL, *args = NULL;
 	size_t	argv_alloc = 0, args_alloc = 0;
@@@@ -181,40 +180,24 @@@@ int     PROC_MEM(AGENT_REQUEST *request, AGENT_RESULT 
 		mib[3] = 0;
 	}
 
-#ifdef KERN_PROC2
-	mib[1] = KERN_PROC2;
-	mib[4] = sizeof(struct kinfo_proc2);
+	mib[1] = KERN_PROC;
+#if defined(__OpenBSD__)
+	mib[4] = sizeof(struct kinfo_proc);
 	mib[5] = 0;
+#endif
 
 	sz = 0;
-	if (0 != sysctl(mib, 6, NULL, &sz, NULL, 0))
+	if (0 != sysctl(mib, (sizeof(mib) / sizeof(mib[0])), NULL, &sz, NULL, 0))
 		return SYSINFO_RET_FAIL;
 
-	proc = (struct kinfo_proc2 *)zbx_malloc(proc, sz);
-	mib[5] = (int)(sz / sizeof(struct kinfo_proc2));
-	if (0 != sysctl(mib, 6, proc, &sz, NULL, 0))
-	{
-		zbx_free(proc);
-		return SYSINFO_RET_FAIL;
-	}
-
-	count = sz / sizeof(struct kinfo_proc2);
-#else
-	mib[1] = KERN_PROC;
-
-	sz = 0;
-	if (0 != sysctl(mib, 4, NULL, &sz, NULL, 0))
-		return SYSINFO_RET_FAIL;
-
 	proc = (struct kinfo_proc *)zbx_malloc(proc, sz);
-	if (0 != sysctl(mib, 4, proc, &sz, NULL, 0))
+	if (0 != sysctl(mib, (sizeof(mib) / sizeof(mib[0])), proc, &sz, NULL, 0))
 	{
 		zbx_free(proc);
 		return SYSINFO_RET_FAIL;
 	}
 
 	count = sz / sizeof(struct kinfo_proc);
-#endif
 
 	for (i = 0; i < count; i++)
 	{
@@@@ -280,13 +263,12 @@@@ int	PROC_NUM(AGENT_REQUEST *request, AGENT_RESULT *res
 
 	struct passwd		*usrinfo;
 
-#ifdef KERN_PROC2
+#if defined(__OpenBSD__)
 	int			mib[6];
-	struct kinfo_proc2	*proc = NULL;
 #else
 	int			mib[4];
-	struct kinfo_proc	*proc = NULL;
 #endif
+	struct kinfo_proc	*proc = NULL;
 
 	char	**argv = NULL, *args = NULL;
 	size_t	argv_alloc = 0, args_alloc = 0;
@@@@ -333,40 +315,25 @@@@ int	PROC_NUM(AGENT_REQUEST *request, AGENT_RESULT *res
 		mib[3] = 0;
 	}
 
-#ifdef KERN_PROC2
-	mib[1] = KERN_PROC2;
-	mib[4] = sizeof(struct kinfo_proc2);
+	mib[1] = KERN_PROC;
+#if defined(__OpenBSD__)
+	mib[4] = sizeof(struct kinfo_proc);
 	mib[5] = 0;
+#endif
 
 	sz = 0;
-	if (0 != sysctl(mib, 6, NULL, &sz, NULL, 0))
+	if (0 != sysctl(mib, (sizeof(mib) / sizeof(mib[0])), NULL, &sz, NULL, 0))
 		return SYSINFO_RET_FAIL;
 
-	proc = (struct kinfo_proc2 *)zbx_malloc(proc, sz);
-	mib[5] = (int)(sz / sizeof(struct kinfo_proc2));
-	if (0 != sysctl(mib, 6, proc, &sz, NULL, 0))
-	{
-		zbx_free(proc);
-		return SYSINFO_RET_FAIL;
-	}
-
-	count = sz / sizeof(struct kinfo_proc2);
-#else
-	mib[1] = KERN_PROC;
-
-	sz = 0;
-	if (0 != sysctl(mib, 4, NULL, &sz, NULL, 0))
-		return SYSINFO_RET_FAIL;
-
 	proc = (struct kinfo_proc *)zbx_malloc(proc, sz);
-	if (0 != sysctl(mib, 4, proc, &sz, NULL, 0))
+	mib[5] = (int)(sz / sizeof(struct kinfo_proc));
+	if (0 != sysctl(mib, (sizeof(mib) / sizeof(mib[0])), proc, &sz, NULL, 0))
 	{
 		zbx_free(proc);
 		return SYSINFO_RET_FAIL;
 	}
 
 	count = sz / sizeof(struct kinfo_proc);
-#endif
 
 	for (i = 0; i < count; i++)
 	{
@


1.7
log
@update to 2.2.4; diff from Mark Patruck
@
text
@d1 1
a1 1
$OpenBSD: patch-src_libs_zbxsysinfo_openbsd_proc_c,v 1.6 2014/01/14 15:17:46 robert Exp $
@


1.6
log
@update to 2.2.1
@
text
@d1 3
a3 3
$OpenBSD: patch-src_libs_zbxsysinfo_openbsd_proc_c,v 1.5 2013/01/24 18:48:15 robert Exp $
--- src/libs/zbxsysinfo/openbsd/proc.c.orig	Mon Dec  9 10:15:14 2013
+++ src/libs/zbxsysinfo/openbsd/proc.c	Tue Jan 14 09:17:46 2014
d13 1
a13 1
@@@@ -125,13 +125,12 @@@@ int     PROC_MEM(AGENT_REQUEST *request, AGENT_RESULT 
d29 1
a29 1
@@@@ -180,40 +179,24 @@@@ int     PROC_MEM(AGENT_REQUEST *request, AGENT_RESULT 
d76 1
a76 1
@@@@ -279,13 +262,12 @@@@ int	PROC_NUM(AGENT_REQUEST *request, AGENT_RESULT *res
d92 1
a92 1
@@@@ -332,40 +314,25 @@@@ int	PROC_NUM(AGENT_REQUEST *request, AGENT_RESULT *res
@


1.5
log
@update to 2.0.4
@
text
@d1 4
a4 4
$OpenBSD: patch-src_libs_zbxsysinfo_openbsd_proc_c,v 1.4 2012/10/10 22:04:57 robert Exp $
--- src/libs/zbxsysinfo/openbsd/proc.c.orig	Sat Dec  8 12:09:15 2012
+++ src/libs/zbxsysinfo/openbsd/proc.c	Wed Jan 23 19:01:33 2013
@@@@ -39,7 +39,7 @@@@
d13 1
a13 1
@@@@ -126,13 +126,12 @@@@ int     PROC_MEM(const char *cmd, const char *param, u
d29 1
a29 1
@@@@ -194,40 +193,24 @@@@ int     PROC_MEM(const char *cmd, const char *param, u
d76 1
a76 1
@@@@ -295,13 +278,12 @@@@ int	PROC_NUM(const char *cmd, const char *param, unsig
d92 1
a92 1
@@@@ -361,40 +343,25 @@@@ int	PROC_NUM(const char *cmd, const char *param, unsig
@


1.4
log
@update to zabbix version 2.0.2
@
text
@d1 6
a6 6
$OpenBSD: patch-src_libs_zbxsysinfo_openbsd_proc_c,v 1.3 2012/01/08 18:53:23 robert Exp $
--- src/libs/zbxsysinfo/openbsd/proc.c.orig	Tue Jul 31 11:16:46 2012
+++ src/libs/zbxsysinfo/openbsd/proc.c	Tue Oct  2 21:08:50 2012
@@@@ -29,7 +29,7 @@@@
 
 #define ARGS_START_SIZE 64
d13 1
a13 1
@@@@ -116,13 +116,12 @@@@ int     PROC_MEM(const char *cmd, const char *param, u
d29 1
a29 1
@@@@ -184,40 +183,24 @@@@ int     PROC_MEM(const char *cmd, const char *param, u
d76 1
a76 1
@@@@ -285,13 +268,12 @@@@ int	PROC_NUM(const char *cmd, const char *param, unsig
d92 1
a92 1
@@@@ -351,40 +333,25 @@@@ int	PROC_NUM(const char *cmd, const char *param, unsig
@


1.3
log
@fix after kinfo_proc2 removal, cleanup the code too
@
text
@d1 3
a3 3
$OpenBSD$
--- src/libs/zbxsysinfo/openbsd/proc.c.orig	Sun Jan  8 19:40:59 2012
+++ src/libs/zbxsysinfo/openbsd/proc.c	Sun Jan  8 19:48:19 2012
d13 1
a13 1
@@@@ -119,13 +119,12 @@@@ int     PROC_MEM(const char *cmd, const char *param, u
d29 1
a29 1
@@@@ -187,40 +186,24 @@@@ int     PROC_MEM(const char *cmd, const char *param, u
d76 1
a76 1
@@@@ -288,13 +271,12 @@@@ int	PROC_NUM(const char *cmd, const char *param, unsig
d92 1
a92 1
@@@@ -354,40 +336,25 @@@@ int	PROC_NUM(const char *cmd, const char *param, unsig
@


1.2
log
@Update to zabbix-1.8.3.
Based on a submission from Florian Gross with several fixes and tweaks.

ok sthen@@
@
text
@d1 13
a13 24
$OpenBSD: patch-src_libs_zbxsysinfo_openbsd_proc_c,v 1.1 2010/01/24 14:09:00 okan Exp $
--- src/libs/zbxsysinfo/openbsd/proc.c.orig	Mon Dec  7 14:43:56 2009
+++ src/libs/zbxsysinfo/openbsd/proc.c	Mon Jan 18 17:10:47 2010
@@@@ -43,9 +43,11 @@@@ static int	proc_argv(pid_t pid, char ***argv, size_t *
 	mib[1] = KERN_PROC_ARGS;
 	mib[2] = (int)pid;
 	mib[3] = KERN_PROC_ARGV;
+	mib[4] = sizeof(struct kinfo_proc2);
+	mib[5] = 0;
 retry:
 	sz = *argv_alloc;
-	if (0 != sysctl(mib, 4, *argv, &sz, NULL, 0)) {
+	if (0 != sysctl(mib, 6, *argv, &sz, NULL, 0)) {
 		if (errno == ENOMEM) {
 			*argv_alloc *= 2;
 			*argv = zbx_realloc(*argv, *argv_alloc);
@@@@ -57,7 +59,8 @@@@ retry:
 	mib[3] = KERN_PROC_NARGV;
 
 	sz = sizeof(int);
-	if (0 != sysctl(mib, 4, argc, &sz, NULL, 0))
+	mib[5] = (int)(sz / sizeof(struct kinfo_proc2));
+	if (0 != sysctl(mib, 6, argc, &sz, NULL, 0))
 		return FAIL;
d15 1
a15 4
 	return SUCCEED;
@@@@ -98,7 +101,7 @@@@ int     PROC_MEMORY(const char *cmd, const char *param
 
 	size_t	sz;
d17 6
d24 2
a25 2
+	struct kinfo_proc2	*proc = NULL;
 	struct passwd		*usrinfo;
d28 2
a29 11
@@@@ -150,7 +153,7 @@@@ int     PROC_MEMORY(const char *cmd, const char *param
 	pagesize = getpagesize();
 
 	mib[0] = CTL_KERN;
-	mib[1] = KERN_PROC;
+	mib[1] = KERN_PROC2;
 	if (NULL != usrinfo) {
 		mib[2] = KERN_PROC_UID;
 		mib[3] = usrinfo->pw_uid;
@@@@ -158,28 +161,31 @@@@ int     PROC_MEMORY(const char *cmd, const char *param
 		mib[2] = KERN_PROC_ALL;
d32 9
a40 2
+	mib[4] = sizeof(struct kinfo_proc2);
+	mib[5] = 0;
d43 2
a44 2
-	if (0 != sysctl(mib, 4, NULL, &sz, NULL, 0))
+	if (0 != sysctl(mib, 6, NULL, &sz, NULL, 0))
d47 20
a66 5
-	proc = (struct kinfo_proc *)zbx_malloc(proc, sz);
-	if (0 != sysctl(mib, 4, proc, &sz, NULL, 0)) {
+	proc = (struct kinfo_proc2 *)zbx_malloc(proc, sz);
+	mib[5] = (int)(sz / sizeof(struct kinfo_proc2));
+	if (0 != sysctl(mib, 6, proc, &sz, NULL, 0)) {
d71 2
a72 2
-	count = sz / sizeof(struct kinfo_proc);
+	count = sz / sizeof(struct kinfo_proc2);
d74 3
a76 25
 	for (i = 0; i < count; i++) {
 		proc_ok = 0;
 		comm_ok = 0;
 
-		if (*procname == '\0' || 0 == strcmp(procname, proc[i].kp_proc.p_comm))
+		if (*procname == '\0' || 0 == strcmp(procname, proc[i].p_comm))
 			proc_ok = 1;
 
 		if (*proccomm != '\0') {
-			if (SUCCEED == proc_argv(proc[i].kp_proc.p_pid, &argv, &argv_alloc, &argc)) {
+			if (SUCCEED == proc_argv(proc[i].p_pid, &argv, &argv_alloc, &argc)) {
 				collect_args(argv, argc, &args, &args_alloc);
 				if (NULL != zbx_regexp_match(args, proccomm, NULL))
 					comm_ok = 1;
@@@@ -188,9 +194,9 @@@@ int     PROC_MEMORY(const char *cmd, const char *param
 			comm_ok = 1;
 
 		if (proc_ok && comm_ok) {
-			value = proc[i].kp_eproc.e_vm.vm_tsize
-				+ proc[i].kp_eproc.e_vm.vm_dsize
-				+ proc[i].kp_eproc.e_vm.vm_ssize;
+			value = proc[i].p_vm_tsize
+				+ proc[i].p_vm_dsize
+				+ proc[i].p_vm_ssize;
 			value *= pagesize;
d78 1
a78 4
 			if (0 == proccount++)
@@@@ -231,7 +237,7 @@@@ int	PROC_NUM(const char *cmd, const char *param, unsig
 
 	size_t	sz;
d80 6
d87 2
a88 2
+	struct kinfo_proc2	*proc = NULL;
 	struct passwd		*usrinfo;
d91 2
a92 11
@@@@ -281,7 +287,7 @@@@ int	PROC_NUM(const char *cmd, const char *param, unsig
 		*proccomm = '\0';
 
 	mib[0] = CTL_KERN;
-	mib[1] = KERN_PROC;
+	mib[1] = KERN_PROC2;
 	if (NULL != usrinfo) {
 		mib[2] = KERN_PROC_UID;
 		mib[3] = usrinfo->pw_uid;
@@@@ -289,39 +295,42 @@@@ int	PROC_NUM(const char *cmd, const char *param, unsig
 		mib[2] = KERN_PROC_ALL;
d95 9
a103 2
+	mib[4] = sizeof(struct kinfo_proc2);
+	mib[5] = 0;
d106 2
a107 2
-	if (0 != sysctl(mib, 4, NULL, &sz, NULL, 0))
+	if (0 != sysctl(mib, 6, NULL, &sz, NULL, 0))
d110 21
a130 5
-	proc = (struct kinfo_proc *)zbx_malloc(proc, sz);
-	if (0 != sysctl(mib, 4, proc, &sz, NULL, 0)) {
+	proc = (struct kinfo_proc2 *)zbx_malloc(proc, sz);
+	mib[5] = (int)(sz / sizeof(struct kinfo_proc2));
+	if (0 != sysctl(mib, 6, proc, &sz, NULL, 0)) {
d135 2
a136 2
-	count = sz / sizeof(struct kinfo_proc);
+	count = sz / sizeof(struct kinfo_proc2);
d138 2
a139 36
 	for (i = 0; i < count; i++) {
 		proc_ok = 0;
 		stat_ok = 0;
 		comm_ok = 0;
 
-		if (*procname == '\0' || 0 == strcmp(procname, proc[i].kp_proc.p_comm))
+		if (*procname == '\0' || 0 == strcmp(procname, proc[i].p_comm))
 			proc_ok = 1;
 
 		if (zbx_proc_stat != ZBX_PROC_STAT_ALL) {
 			switch (zbx_proc_stat) {
 			case ZBX_PROC_STAT_RUN:
-				if (proc[i].kp_proc.p_stat == SRUN || proc[i].kp_proc.p_stat == SONPROC)
+				if (proc[i].p_stat == SRUN || proc[i].p_stat == SONPROC)
 					stat_ok = 1;
 				break;
 			case ZBX_PROC_STAT_SLEEP:
-				if (proc[i].kp_proc.p_stat == SSLEEP)
+				if (proc[i].p_stat == SSLEEP)
 					stat_ok = 1;
 				break;
 			case ZBX_PROC_STAT_ZOMB:
-				if (proc[i].kp_proc.p_stat == SZOMB || proc[i].kp_proc.p_stat == SDEAD)
+				if (proc[i].p_stat == SZOMB || proc[i].p_stat == SDEAD)
 					stat_ok = 1;
 				break;
 			}
@@@@ -329,7 +338,7 @@@@ int	PROC_NUM(const char *cmd, const char *param, unsig
 			stat_ok = 1;
 
 		if (*proccomm != '\0') {
-			if (SUCCEED == proc_argv(proc[i].kp_proc.p_pid, &argv, &argv_alloc, &argc)) {
+			if (SUCCEED == proc_argv(proc[i].p_pid, &argv, &argv_alloc, &argc)) {
 				collect_args(argv, argc, &args, &args_alloc);
 				if (zbx_regexp_match(args, proccomm, NULL) != NULL)
 					comm_ok = 1;
@


1.1
log
@- adapt for KERN_PROC2 (initial version from Brad)
- fix packaging in -server (from viq)
- alter permissions for example configs (@@mode/@@group)
- pull out the now extraneous MAJOR var

agreed by many this is better than we what we have
"please commit" sthen@@
@
text
@d1 1
a1 1
$OpenBSD$
@

