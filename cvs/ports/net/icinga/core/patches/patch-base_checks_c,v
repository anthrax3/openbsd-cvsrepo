head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.2
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.6
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.4
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.02.07.21.40.06;	author sthen;	state Exp;
branches;
next	1.2;
commitid	iQN16kzb5VyI2vSI;

1.2
date	2015.03.30.22.43.42;	author sthen;	state Exp;
branches
	1.2.6.1;
next	1.1;
commitid	2u23FDgXtDV7KYOv;

1.1
date	2015.01.16.18.07.53;	author sthen;	state Exp;
branches;
next	;
commitid	q2NJvo81Vp2JBe8l;

1.2.6.1
date	2017.02.07.21.40.55;	author sthen;	state Exp;
branches;
next	;
commitid	r8TFQ9HiWpm0NKrT;


desc
@@


1.3
log
@update to icinga 1.14.0

security fixes (also affecting nagios; icinga 1.x is the old nagios-derived
branch, whereas 2.x is all new) -

* Bug #13709: CVE-2016-9566: Root priviledge escalation during log file opening
* Bug #10453: Icinga Classic-UI 1.13.3 and older are vulnerable to XSS - CVE-2015-8010

notable changes -

* Classic UI: Remove attribute based authorization (cgiauth.cfg is not parsed
any more)
* IDO: Remove deprecated config options
@
text
@$OpenBSD: patch-base_checks_c,v 1.2 2015/03/30 22:43:42 sthen Exp $
--- base/checks.c.orig	Thu Dec 22 21:40:50 2016
+++ base/checks.c	Tue Feb  7 21:24:21 2017
@@@@ -683,7 +683,7 @@@@ int run_async_service_check(service *svc, int check_op
 		fprintf(check_result_info.output_file_fp, "scheduled_check=%d\n", check_result_info.scheduled_check);
 		fprintf(check_result_info.output_file_fp, "reschedule_check=%d\n", check_result_info.reschedule_check);
 		fprintf(check_result_info.output_file_fp, "latency=%f\n", svc->latency);
-		fprintf(check_result_info.output_file_fp, "start_time=%lu.%lu\n", check_result_info.start_time.tv_sec, check_result_info.start_time.tv_usec);
+		fprintf(check_result_info.output_file_fp, "start_time=%lld.%lld\n", (long long)check_result_info.start_time.tv_sec, (long long)check_result_info.start_time.tv_usec);
 
 		/* flush output or it'll get written again when we fork() */
 		fflush(check_result_info.output_file_fp);
@@@@ -774,7 +774,7 @@@@ int run_async_service_check(service *svc, int check_op
 			/* write check result to file */
 			if (check_result_info.output_file_fp) {
 
-				fprintf(check_result_info.output_file_fp, "finish_time=%lu.%lu\n", check_result_info.finish_time.tv_sec, check_result_info.finish_time.tv_usec);
+				fprintf(check_result_info.output_file_fp, "finish_time=%lld.%lld\n", (long long)check_result_info.finish_time.tv_sec, (long long)check_result_info.finish_time.tv_usec);
 				fprintf(check_result_info.output_file_fp, "early_timeout=%d\n", check_result_info.early_timeout);
 				fprintf(check_result_info.output_file_fp, "exited_ok=%d\n", check_result_info.exited_ok);
 				fprintf(check_result_info.output_file_fp, "return_code=%d\n", check_result_info.return_code);
@@@@ -917,7 +917,7 @@@@ int run_async_service_check(service *svc, int check_op
 				/* write check result to file */
 				if (check_result_info.output_file_fp) {
 
-					fprintf(check_result_info.output_file_fp, "finish_time=%lu.%lu\n", check_result_info.finish_time.tv_sec, check_result_info.finish_time.tv_usec);
+					fprintf(check_result_info.output_file_fp, "finish_time=%lld.%lld\n", (long long)check_result_info.finish_time.tv_sec, (long long)check_result_info.finish_time.tv_usec);
 					fprintf(check_result_info.output_file_fp, "early_timeout=%d\n", check_result_info.early_timeout);
 					fprintf(check_result_info.output_file_fp, "exited_ok=%d\n", check_result_info.exited_ok);
 					fprintf(check_result_info.output_file_fp, "return_code=%d\n", check_result_info.return_code);
@@@@ -976,7 +976,7 @@@@ int run_async_service_check(service *svc, int check_op
 				fp = check_result_info.output_file_fp;
 				check_result_info.output_file_fp = NULL;
 
-				fprintf(fp, "finish_time=%lu.%lu\n", check_result_info.finish_time.tv_sec, check_result_info.finish_time.tv_usec);
+				fprintf(fp, "finish_time=%lld.%lld\n", (long long)check_result_info.finish_time.tv_sec, (long long)check_result_info.finish_time.tv_usec);
 				fprintf(fp, "early_timeout=%d\n", check_result_info.early_timeout);
 				fprintf(fp, "exited_ok=%d\n", check_result_info.exited_ok);
 				fprintf(fp, "return_code=%d\n", check_result_info.return_code);
@@@@ -2172,9 +2172,9 @@@@ void check_for_orphaned_services(void) {
 			log_debug_info(DEBUGL_CHECKS, 1, "Service '%s' on host '%s' was orphaned, so we're scheduling an immediate check...\n", temp_service->description, temp_service->host_name);
 
 			if (log_level(DEBUGL_CHECKS, 1))
-				log_debug_info(DEBUGL_CHECKS, 1, "  next_check=%lu (%s); last_check=%lu (%s);\n",
-					temp_service->next_check, ctime(&temp_service->next_check),
-					temp_service->last_check, ctime(&temp_service->last_check));
+				log_debug_info(DEBUGL_CHECKS, 1, "  next_check=%lld (%s); last_check=%lld (%s);\n",
+					(long long)temp_service->next_check, ctime(&temp_service->next_check),
+					(long long)temp_service->last_check, ctime(&temp_service->last_check));
 
 			/* decrement the number of running service checks */
 			if (currently_running_service_checks > 0)
@@@@ -3303,7 +3303,7 @@@@ int run_async_host_check_3x(host *hst, int check_optio
 		fprintf(check_result_info.output_file_fp, "scheduled_check=%d\n", check_result_info.scheduled_check);
 		fprintf(check_result_info.output_file_fp, "reschedule_check=%d\n", check_result_info.reschedule_check);
 		fprintf(check_result_info.output_file_fp, "latency=%f\n", hst->latency);
-		fprintf(check_result_info.output_file_fp, "start_time=%lu.%lu\n", check_result_info.start_time.tv_sec, check_result_info.start_time.tv_usec);
+		fprintf(check_result_info.output_file_fp, "start_time=%lld.%lld\n", (long long)check_result_info.start_time.tv_sec, (long long)check_result_info.start_time.tv_usec);
 
 		/* flush buffer or we'll end up writing twice when we fork() */
 		fflush(check_result_info.output_file_fp);
@@@@ -3414,7 +3414,7 @@@@ int run_async_host_check_3x(host *hst, int check_optio
 				fp = check_result_info.output_file_fp;
 				check_result_info.output_file_fp = NULL;
 
-				fprintf(fp, "finish_time=%lu.%lu\n", check_result_info.finish_time.tv_sec, check_result_info.finish_time.tv_usec);
+				fprintf(fp, "finish_time=%lld.%lld\n", (long long)check_result_info.finish_time.tv_sec, (long long)check_result_info.finish_time.tv_usec);
 				fprintf(fp, "early_timeout=%d\n", check_result_info.early_timeout);
 				fprintf(fp, "exited_ok=%d\n", check_result_info.exited_ok);
 				fprintf(fp, "return_code=%d\n", check_result_info.return_code);
@@@@ -4150,7 +4150,7 @@@@ int process_host_check_result_3x(host *hst, int new_st
 		run_async_check = TRUE;
 		temp_host = (host *)hostlist_item->object_ptr;
 
-		log_debug_info(DEBUGL_CHECKS, 2, "ASYNC CHECK OF HOST: %s, CURRENTTIME: %lu, LASTHOSTCHECK: %lu, CACHEDTIMEHORIZON: %lu, USECACHEDRESULT: %d, ISEXECUTING: %d\n", temp_host->name, current_time, temp_host->last_check, check_timestamp_horizon, use_cached_result, temp_host->is_executing);
+		log_debug_info(DEBUGL_CHECKS, 2, "ASYNC CHECK OF HOST: %s, CURRENTTIME: %lld, LASTHOSTCHECK: %lld, CACHEDTIMEHORIZON: %lld, USECACHEDRESULT: %d, ISEXECUTING: %d\n", temp_host->name, (long long)current_time, (long long)temp_host->last_check, (long long)check_timestamp_horizon, use_cached_result, temp_host->is_executing);
 
 		if (use_cached_result == TRUE && ((current_time - temp_host->last_check) <= check_timestamp_horizon))
 			run_async_check = FALSE;
@


1.2
log
@update to icinga-1.13.0
@
text
@d1 3
a3 3
$OpenBSD: patch-base_checks_c,v 1.1 2015/01/16 18:07:53 sthen Exp $
--- base/checks.c.orig	Mon Mar 30 09:38:53 2015
+++ base/checks.c	Mon Mar 30 23:28:35 2015
d40 1
a40 1
@@@@ -2167,9 +2167,9 @@@@ void check_for_orphaned_services(void) {
d53 1
a53 1
@@@@ -3298,7 +3298,7 @@@@ int run_async_host_check_3x(host *hst, int check_optio
d62 1
a62 1
@@@@ -3409,7 +3409,7 @@@@ int run_async_host_check_3x(host *hst, int check_optio
d71 1
a71 1
@@@@ -4139,7 +4139,7 @@@@ int process_host_check_result_3x(host *hst, int new_st
@


1.2.6.1
log
@update to icinga 1.14.0

security fixes (also affecting nagios; icinga 1.x is the old nagios-derived
branch, whereas 2.x is all new) -

* Bug #13709: CVE-2016-9566: Root priviledge escalation during log file opening
* Bug #10453: Icinga Classic-UI 1.13.3 and older are vulnerable to XSS - CVE-2015-8010

notable changes -

* Classic UI: Remove attribute based authorization (cgiauth.cfg is not parsed
any more)
* IDO: Remove deprecated config options
@
text
@d1 3
a3 3
$OpenBSD: patch-base_checks_c,v 1.3 2017/02/07 21:40:06 sthen Exp $
--- base/checks.c.orig	Thu Dec 22 21:40:50 2016
+++ base/checks.c	Tue Feb  7 21:24:21 2017
d40 1
a40 1
@@@@ -2172,9 +2172,9 @@@@ void check_for_orphaned_services(void) {
d53 1
a53 1
@@@@ -3303,7 +3303,7 @@@@ int run_async_host_check_3x(host *hst, int check_optio
d62 1
a62 1
@@@@ -3414,7 +3414,7 @@@@ int run_async_host_check_3x(host *hst, int check_optio
d71 1
a71 1
@@@@ -4150,7 +4150,7 @@@@ int process_host_check_result_3x(host *hst, int new_st
@


1.1
log
@Patch some of the format problems in icinga 1 due to 64-bit time_t,
as reported by otto@@. Build with -wformat to make the other two hundred
and ten of them more obvious.

(icinga2 doesn't have these problems, but we are stuck with an older
version of icinga2 as current versions fail at runtime on OpenBSD,
and a number of these problems affect the icinga1 cgis which are still
useful with 2).
@
text
@d1 3
a3 3
$OpenBSD$
--- base/checks.c.orig	Fri Jan 16 17:52:14 2015
+++ base/checks.c	Fri Jan 16 17:55:52 2015
d22 1
a22 1
@@@@ -914,7 +914,7 @@@@ int run_async_service_check(service *svc, int check_op
d31 1
a31 1
@@@@ -973,7 +973,7 @@@@ int run_async_service_check(service *svc, int check_op
d40 1
a40 1
@@@@ -2164,9 +2164,9 @@@@ void check_for_orphaned_services(void) {
d53 1
a53 1
@@@@ -3295,7 +3295,7 @@@@ int run_async_host_check_3x(host *hst, int check_optio
d62 1
a62 1
@@@@ -3403,7 +3403,7 @@@@ int run_async_host_check_3x(host *hst, int check_optio
d71 1
a71 1
@@@@ -4133,7 +4133,7 @@@@ int process_host_check_result_3x(host *hst, int new_st
@

