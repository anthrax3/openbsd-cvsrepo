head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2015.11.16.20.29.55;	author sthen;	state dead;
branches;
next	1.1;
commitid	qYlDtork3dGtChXG;

1.1
date	2015.11.09.22.36.38;	author sthen;	state Exp;
branches;
next	;
commitid	pStTXQXOgWLHK3JY;


desc
@@


1.2
log
@update to Icinga 2 v2.4.0, featuring a new RESTful API using basic auth
or client certificates for:

- filters, types, permissions
- query/create/modify/delete config objects at runtime
- status queries for global stats
- actions (e.g. acknowledge all service problems)
- event streams
@
text
@$OpenBSD: patch-lib_compat_externalcommandlistener_cpp,v 1.1 2015/11/09 22:36:38 sthen Exp $

commit 9ea51aa86edac407411376d2ed18a494368b9e31
Author: Gunnar Beutner <gunnar@@beutner.name>
Date:   Mon Nov 9 20:39:26 2015 +0100

    Use non-blocking open() for the command pipe

    fixes #10410

--- lib/compat/externalcommandlistener.cpp.orig	Mon Oct 19 10:14:40 2015
+++ lib/compat/externalcommandlistener.cpp	Mon Nov  9 21:42:01 2015
@@@@ -93,17 +93,15 @@@@ void ExternalCommandListener::CommandPipeThread(const 
 	}
 
 	for (;;) {
-		int fd;
+		int fd = open(commandPath.CStr(), O_RDONLY | O_NONBLOCK);
 
-		do {
-			fd = open(commandPath.CStr(), O_RDONLY);
-		} while (fd < 0 && errno == EINTR);
-
 		if (fd < 0) {
 			Log(LogCritical, "ExternalCommandListener")
 			    << "open() for fifo path '" << commandPath << "' failed with error code " << errno << ", \"" << Utility::FormatErrorNumber(errno) << "\"";
 			return;
 		}
+
+		Utility::SetNonBlocking(fd, false);
 
 		FILE *fp = fdopen(fd, "r");
 
@


1.1
log
@Add upstream patches for Icinga2 so that opening a fifo doesn't block
open()s in other threads, fixing an issue where the daemon doesn't start
correctly when the command listener is enabled.

Many thanks to dnsmichi and gunnarbeutner from Icinga for tracking this
down and fixing it.
@
text
@d1 1
a1 1
$OpenBSD$
@

