head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.56
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.54
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.50
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.52
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.48
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.46
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.44
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.42
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.40
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.38
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.36
	OPENBSD_5_0:1.4.0.34
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.32
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.30
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.28
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.26
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.24
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.22
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.20
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.18
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.16
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.14
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.2.0.10
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_TRACKING_SWITCH:1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	brad_1999-11-12:1.1.1.1
	brad:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2003.08.12.00.59.47;	author jolan;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.17.15.37.41;	author naddy;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2000.10.06.01.41.14;	author kevlo;	state Exp;
branches
	1.2.10.1;
next	1.1;

1.1
date	99.11.12.14.22.26;	author brad;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.11.12.14.22.26;	author brad;	state Exp;
branches;
next	;

1.2.10.1
date	2003.08.13.01.26.24;	author brad;	state Exp;
branches;
next	;

1.3.2.1
date	2003.08.12.23.36.17;	author brad;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to 0.21, fixes a format string vulnerability:

http://www.atstake.com/research/advisories/2003/a080703-2.txt

Not exploitable as it is not installed setuid root.

from MAINTAINER.
@
text
@tcpflow is a program that captures data transmitted as part of TCP
connections (flows), and stores it in a way that is convenient for
protocol analysis or debugging.  A program like 'tcpdump' only shows a
summary of packets seen on the wire, but usually doesn't store the
data that's actually being transmitted.  In contrast, tcpflow
reconstructs the actual data streams and stores each flow in a
separate file for later analysis.

tcpflow understands sequence numbers and will correctly reconstruct
data streams regardless of retransmissions or out-of-order delivery.
However, it currently does not understand IP fragments; flows
containing IP fragments will not be recorded properly.
@


1.3
log
@Update to 0.20.
From: Dan Weeks <danimal@@danimal.org>
@
text
@a12 2

WWW: ${HOMEPAGE}
@


1.3.2.1
log
@MFC:
Update to 0.21, fixes a format string vulnerability:

http://www.atstake.com/research/advisories/2003/a080703-2.txt

Not exploitable as it is not installed setuid root.

from MAINTAINER.
@
text
@d13 2
@


1.2
log
@- Bump NEED_VERSION
- Add HOMEPAGE
- Remove FAKE=Yes
- GNU_CONFIGURE -> CONFIGURE_STYLE
- Add @@comment to PLIST
@
text
@a13 4
Note: this port includes a small patch that adds the capability of
      reading the packets from a tcpdump(1) capture file, using
      a new option (-r).

@


1.2.10.1
log
@MFC:
Update to 0.21, fixes a format string vulnerability:

http://www.atstake.com/research/advisories/2003/a080703-2.txt

Not exploitable as it is not installed setuid root.

from MAINTAINER.
@
text
@d13 6
@


1.1
log
@Initial revision
@
text
@d17 2
@


1.1.1.1
log
@add tcpflow port; jethro@@dqc.org
-
tcpflow is a program that captures data transmitted as part of TCP
connections (flows), and stores it in a way that is convenient for
protocol analysis or debugging.  A program like 'tcpdump' only shows a
summary of packets seen on the wire, but usually doesn't store the
data that's actually being transmitted.  In contrast, tcpflow
reconstructs the actual data streams and stores each flow in a
separate file for later analysis.

tcpflow understands sequence numbers and will correctly reconstruct
data streams regardless of retransmissions or out-of-order delivery.
However, it currently does not understand IP fragments; flows
containing IP fragments will not be recorded properly.

Note: this port includes a small patch that adds the capability of
      reading the packets from a tcpdump(1) capture file, using
      a new option (-r).
@
text
@@
