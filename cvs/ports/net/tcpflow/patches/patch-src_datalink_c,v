head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.34
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.32
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.30
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.26
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.28
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.24
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.22
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.20
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.18
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.16
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.14
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.12
	OPENBSD_5_0:1.2.0.10
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.8
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.6
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.4
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.0.14
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.12
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.10
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.8
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.6
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.4
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.2
	OPENBSD_3_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2009.05.13.09.47.43;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.15.12.42.31;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@support DLT_PPP_ETHER; based on an anonymous ports@@ post. bump package.
@
text
@$OpenBSD: patch-src_datalink_c,v 1.1 2006/01/15 12:42:31 sturm Exp $
--- src/datalink.c.orig	Fri Mar 29 23:19:03 2002
+++ src/datalink.c	Wed May 13 10:41:44 2009
@@@@ -137,7 +137,26 @@@@ void dl_ppp(u_char *user, const struct pcap_pkthdr *h,
   process_ip(p + PPP_HDRLEN, caplen - PPP_HDRLEN);
 }
 
+#define	PPP_ETHER_HDRLEN 8
 
+void dl_ppp_ether(u_char *user, const struct pcap_pkthdr *h, const u_char *p)
+{
+  u_int caplen = h->caplen;
+  u_int length = h->len;
+
+  if (length != caplen) {
+    DEBUG(6) ("warning: only captured %d bytes of %d byte PPPoE frame",
+	  caplen, length);
+  }
+
+  if (caplen < PPP_ETHER_HDRLEN) {
+    DEBUG(6) ("warning: received incomplete PPP frame");
+    return;
+  }
+
+  process_ip(p + PPP_ETHER_HDRLEN, caplen - PPP_ETHER_HDRLEN);
+}
+
 /* DLT_RAW: just a raw IP packet, no encapsulation or link-layer
  * headers.  Used for PPP connections under some OSs including Linux
  * and IRIX. */
@@@@ -188,7 +207,9 @@@@ pcap_handler find_handler(int datalink_type, char *dev
 #endif
     { dl_ethernet, DLT_EN10MB },
     { dl_ethernet, DLT_IEEE802 },
+    { dl_null, DLT_LOOP },
     { dl_ppp, DLT_PPP },
+    { dl_ppp_ether, DLT_PPP_ETHER },
 #ifdef DLT_LINUX_SLL
     { dl_linux_sll, DLT_LINUX_SLL },
 #endif
@


1.1
log
@make it work on loopback interface

from Dmitry Medvedev <dima at oganer.net>
@
text
@d1 31
a31 4
$OpenBSD$
--- src/datalink.c.orig	Fri Jan  6 16:07:13 2006
+++ src/datalink.c	Fri Jan  6 16:08:29 2006
@@@@ -188,6 +188,7 @@@@ pcap_handler find_handler(int datalink_t
d37 1
d40 1
@

