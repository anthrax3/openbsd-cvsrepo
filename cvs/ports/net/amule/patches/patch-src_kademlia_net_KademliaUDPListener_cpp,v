head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.18
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.14
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.12
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.10
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.04.10.13.08.37;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.1
log
@
Save met file when a download is paused or stopped
(upstream git commit d9b4458b1ea214af48bea97cd8482016a0eccbb9)

Don't assert on ill-formed search requests
(upstream git commit e213af55f51b1fd34945c3afad3cdb7bfe605d6c)
@
text
@$OpenBSD$

Don't assert on ill-formed search requests
(upstream git commit e213af55f51b1fd34945c3afad3cdb7bfe605d6c)

--- src/kademlia/net/KademliaUDPListener.cpp.orig	Mon Jun 13 10:50:25 2011
+++ src/kademlia/net/KademliaUDPListener.cpp	Tue Apr 10 14:34:50 2012
@@@@ -793,14 +793,11 @@@@ SSearchTerm* CKademliaUDPListener::CreateSearchExpress
 		if (boolop == 0x00) { // AND
 			SSearchTerm* pSearchTerm = new SSearchTerm;
 			pSearchTerm->type = SSearchTerm::AND;
-			//TRACE(" AND");
-			if ((pSearchTerm->left = CreateSearchExpressionTree(bio, iLevel)) == NULL){
-				wxFAIL;
+			if ((pSearchTerm->left = CreateSearchExpressionTree(bio, iLevel)) == NULL) {
 				delete pSearchTerm;
 				return NULL;
 			}
-			if ((pSearchTerm->right = CreateSearchExpressionTree(bio, iLevel)) == NULL){
-				wxFAIL;
+			if ((pSearchTerm->right = CreateSearchExpressionTree(bio, iLevel)) == NULL) {
 				Free(pSearchTerm->left);
 				delete pSearchTerm;
 				return NULL;
@@@@ -809,14 +806,11 @@@@ SSearchTerm* CKademliaUDPListener::CreateSearchExpress
 		} else if (boolop == 0x01) { // OR
 			SSearchTerm* pSearchTerm = new SSearchTerm;
 			pSearchTerm->type = SSearchTerm::OR;
-			//TRACE(" OR");
-			if ((pSearchTerm->left = CreateSearchExpressionTree(bio, iLevel)) == NULL){
-				wxFAIL;
+			if ((pSearchTerm->left = CreateSearchExpressionTree(bio, iLevel)) == NULL) {
 				delete pSearchTerm;
 				return NULL;
 			}
-			if ((pSearchTerm->right = CreateSearchExpressionTree(bio, iLevel)) == NULL){
-				wxFAIL;
+			if ((pSearchTerm->right = CreateSearchExpressionTree(bio, iLevel)) == NULL) {
 				Free(pSearchTerm->left);
 				delete pSearchTerm;
 				return NULL;
@@@@ -825,14 +819,11 @@@@ SSearchTerm* CKademliaUDPListener::CreateSearchExpress
 		} else if (boolop == 0x02) { // NOT
 			SSearchTerm* pSearchTerm = new SSearchTerm;
 			pSearchTerm->type = SSearchTerm::NOT;
-			//TRACE(" NOT");
-			if ((pSearchTerm->left = CreateSearchExpressionTree(bio, iLevel)) == NULL){
-				wxFAIL;
+			if ((pSearchTerm->left = CreateSearchExpressionTree(bio, iLevel)) == NULL) {
 				delete pSearchTerm;
 				return NULL;
 			}
-			if ((pSearchTerm->right = CreateSearchExpressionTree(bio, iLevel)) == NULL){
-				wxFAIL;
+			if ((pSearchTerm->right = CreateSearchExpressionTree(bio, iLevel)) == NULL) {
 				Free(pSearchTerm->left);
 				delete pSearchTerm;
 				return NULL;
@@@@ -854,7 +845,7 @@@@ SSearchTerm* CKademliaUDPListener::CreateSearchExpress
 
 		// pre-tokenize the string term
 		//#warning TODO: TokenizeOptQuotedSearchTerm
-		wxStringTokenizer token(str, CSearchManager::GetInvalidKeywordChars(),wxTOKEN_DEFAULT );
+		wxStringTokenizer token(str, CSearchManager::GetInvalidKeywordChars(), wxTOKEN_DEFAULT );
 		while (token.HasMoreTokens()) {
 			wxString strTok(token.GetNextToken());
 			if (!strTok.IsEmpty()) {
@
