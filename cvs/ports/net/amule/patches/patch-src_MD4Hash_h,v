head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.8
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.4
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2015.01.29.14.46.28;	author dcoppa;	state Exp;
branches;
next	;
commitid	eevPgJbZNUTfW3at;


desc
@@


1.1
log
@
Merge some fixes from upstream repo:

Fix always-true conditional

Remove unneeded conversion from CMD4Hash

Fix a shadow warning
@
text
@$OpenBSD$

commit 752e3e1e57c0f659a67d1818fe458992395ce172
Author: upstream svn <svn@@amule.org>
Date:   Sun Jan 25 18:11:43 2015 +0000

Remove unneeded conversion from CMD4Hash

Casting a CUInt128 to a CMD4Hash is evil, although they have the same
size. They're completely unrelated and have to be handled differently.

--- src/MD4Hash.h.orig	Thu Jan 29 05:31:02 2015
+++ src/MD4Hash.h	Thu Jan 29 05:32:57 2015
@@@@ -28,8 +28,6 @@@@
 
 #include "ArchSpecific.h"	// Needed for Raw{Peek,Poke}UInt64()
 
-#include "kademlia/utils/UInt128.h" // Needed for CUInt128
-
 #include <common/MuleDebug.h>		// Needed for MULE_VALIDATE_PARAMS
 
 #ifdef USE_WX_EXTENSIONS
@@@@ -64,18 +62,6 @@@@ class CMD4Hash (public)
 		Clear();
 	}
 
-	/**
-	 * Create a CMD4Hash from a CUInt128
-	 * 
-	 * @@param hash The 128 bits integer to be used.
-	 *
-	 */
-	CMD4Hash(const Kademlia::CUInt128& hash) {
-		byte transitional_array[MD4HASH_LENGTH];
-		hash.ToByteArray(transitional_array);
-		SetHash(transitional_array);
-	}
-	
 	~CMD4Hash() {
 	}	
 	
@
