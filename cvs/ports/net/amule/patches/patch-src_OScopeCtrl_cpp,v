head	1.1;
access;
symbols
	OPENBSD_6_0:1.1.0.14
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.10
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.12
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.8
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.6
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.4
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.03.14.12.57.36;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Zap unused variable
(upstream git commit 3de45b1d6aedf27af5e7d3f73f2005d96138f03a)
@
text
@$OpenBSD$

Zap unused variable
(upstream git commit 3de45b1d6aedf27af5e7d3f73f2005d96138f03a)

--- src/OScopeCtrl.cpp.orig	Mon Jun 13 10:50:25 2011
+++ src/OScopeCtrl.cpp	Thu Mar 14 13:18:20 2013
@@@@ -196,7 +196,6 @@@@ void COScopeCtrl::RecreateGrid()
 
 	wxMemoryDC dcGrid(m_bmapGrid);
 
-	int nCharacters ;
 	wxPen solidPen = *(wxThePenList->FindOrCreatePen(m_gridColour, 1, wxSOLID));
 	wxString strTemp;
 
@@@@ -204,10 +203,6 @@@@ void COScopeCtrl::RecreateGrid()
 	dcGrid.SetBrush(brushBack);
 	dcGrid.SetPen(*wxTRANSPARENT_PEN);
 	dcGrid.DrawRectangle(m_rectClient);
-	// draw the plot rectangle: determine how wide the y axis scaling values are,
-	// add the units digit, decimal point, one decimal place, and an extra space
-	nCharacters = std::abs((int)std::log10(std::fabs(pdsTrends[0].fUpperLimit))) ;
-	nCharacters = std::max(nCharacters, std::abs((int)std::log10(std::fabs(pdsTrends[0].fLowerLimit)))) + 4;
 
 	// adjust the plot rectangle dimensions
 	// assume 6 pixels per character (this may need to be adjusted)
@
