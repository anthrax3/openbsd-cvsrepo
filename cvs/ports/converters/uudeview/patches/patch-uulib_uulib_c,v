head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.12
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.10
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.8
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.4
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.6
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	jca_2014-11-20:1.1.1.1
	jca:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2014.11.20.21.14.54;	author jca;	state Exp;
branches
	1.1.1.1;
next	;
commitid	74eLGXsOgrcS14cN;

1.1.1.1
date	2014.11.20.21.14.54;	author jca;	state Exp;
branches;
next	;
commitid	74eLGXsOgrcS14cN;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

- renaming file, if it's on the same filesystem, instead of copying
- fix problem with long headers, patch from Debian, but originally from
  http://nget.sourceforge.net/Changelog.html and
  http://nget.sf.net/patches/uulib-0.5.19-uuinfofile-long-headers.patch

--- uulib/uulib.c.orig	Tue Sep 30 01:27:47 2003
+++ uulib/uulib.c	Mon Jan 27 21:44:47 2014
@@@@ -872,7 +872,10 @@@@ UUDecodeToTemp (uulist *thefile)
 }
 
 /*
- * decode file first to temp file, then copy it to a final location
+ * Decode file first to temp file, then copy it to a final location.
+ * A move is preferable to a copy.  If the file is on the same
+ * partition, no copy is performed.  This is important for large
+ * files.
  */
 
 int UUEXPORT
@@@@ -978,6 +981,12 @@@@ UUDecodeFile (uulist *thefile, char *destname)
     return UURET_IOERR;
   }
 
+  if (rename(thefile->binfile, uugen_fnbuffer) == 0) {
+    fclose(source);
+    close(fildes);
+    goto finish_ok;
+  }
+
   if ((target = fdopen (fildes, "wb")) == NULL) {
     progress.action = 0;
     UUMessage (uulib_id, __LINE__, UUMSG_ERROR,
@@@@ -1042,6 +1051,8 @@@@ UUDecodeFile (uulist *thefile, char *destname)
 	       thefile->binfile,
 	       strerror (uu_errno = errno));
   }
+
+ finish_ok:
   _FP_free (thefile->binfile);
   thefile->binfile = NULL;
   thefile->state  &= ~UUFILE_TMPFILE;
@@@@ -1103,9 +1114,9 @@@@ UUInfoFile (uulist *thefile, void *opaque,
 
   while (!feof (inpfile) && 
 	 (uu_fast_scanning || ftell(inpfile) < maxpos)) {
-    if (_FP_fgets (uugen_inbuffer, 511, inpfile) == NULL)
+    if (_FP_fgets (uugen_inbuffer, 1023, inpfile) == NULL)
       break;
-    uugen_inbuffer[511] = '\0';
+    uugen_inbuffer[1023] = '\0';
 
     if (ferror (inpfile))
       break;
@


1.1.1.1
log
@Import uudeview, from Mikolaj Kucharski.

ok zhuk@@ on a previous version.

uudeview is program at which you can throw a mess of unordered files in
any of BinHex, uuencoded, xxencoded, Base64 or yEnc formats and expect
them all to be properly decoded. These formats are frequently
encountered when sending binary files via news or mail.

@
text
@@
