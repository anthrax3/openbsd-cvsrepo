head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.52
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.50
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.48
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.44
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.46
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.42
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.40
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.38
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.36
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.34
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.32
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.30
	OPENBSD_5_0:1.2.0.28
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.26
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.24
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.22
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.20
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.18
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.16
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.14
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.1.1.0.6
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.4
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.2
	OPENBSD_3_4_BASE:1.1.1.1
	lebel_2003-May-30:1.1.1.1
	lebel:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2005.03.15.01.57.02;	author db;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.30.14.46.19;	author lebel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.30.14.46.19;	author lebel;	state Exp;
branches;
next	;


desc
@@


1.2
log
@typo and wording fixes; approved by pval

ok mbalmer@@ "that diff was fun to read"
@
text
@Provides an adapter layer between core routines for converting to and
from UTF8 and other encodings. In essence, a way to give multiple
existing Unicode modules a single common interface so you don't have to
know the underlying implementations to do simple UTF8 to-from other
character set encoding conversions. As such, it wraps the
Unicode::String, Unicode::Map8, Unicode::Map and Jcode modules in a
standardized and simple API.

This also provides general character set conversion operation based on
UTF8 - it is possible to convert between any two compatible and
supported character sets via a simple two step chaining of conversions.

As with most things Perlish - if you give it a few big chunks of text to
chew on instead of lots of small ones it will handle many more
characters per second.

By design, it can be easily extended to encompass any new charset
encoding conversion modules that arrive on the scene.
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
know the underlaying implementations to do simple UTF8 to-from other
@


1.1.1.1
log
@initial import of converters/p5-Unicode-MapUTF8 1.08:
--
Provides an adapter layer between core routines for converting to and
from UTF8 and other encodings. In essence, a way to give multiple
existing Unicode modules a single common interface so you don't have to
know the underlaying implementations to do simple UTF8 to-from other
character set encoding conversions. As such, it wraps the
Unicode::String, Unicode::Map8, Unicode::Map and Jcode modules in a
standardized and simple API.

This also provides general character set conversion operation based on
UTF8 - it is possible to convert between any two compatible and
supported character sets via a simple two step chaining of conversions.

As with most things Perlish - if you give it a few big chunks of text to
chew on instead of lots of small ones it will handle many more
characters per second.

By design, it can be easily extended to encompass any new charset
encoding conversion modules that arrive on the scene.
@
text
@@
