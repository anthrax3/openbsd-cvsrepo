head     1.1;
branch   1.1.1;
access   ;
symbols  pirofti_20170818:1.1.1.1 pirofti:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2017.08.18.12.07.51;  author pirofti;  state Exp;
branches 1.1.1.1;
next     ;
commitid        87QY0fRztIiE484F;

1.1.1.1
date     2017.08.18.12.07.51;  author pirofti;  state Exp;
branches ;
next     ;
commitid        87QY0fRztIiE484F;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

Index: mupdf_mod/font.c
--- mupdf_mod/font.c.orig
+++ mupdf_mod/font.c
@@@@ -200,8 +200,8 @@@@ struct fz_font_context_s
 	int ctx_refs;
 	FT_Library ftlib;
 	int ftlib_refs;
-	fz_load_system_font_func load_font;
-	fz_load_system_cjk_font_func load_cjk_font;
+	fz_load_system_font_fn load_font;
+	fz_load_system_cjk_font_fn load_cjk_font;
 
 	/* Cached fallback fonts */
 	struct { fz_font *serif, *sans; } fallback[256];
@@@@ -258,7 +258,7 @@@@ void fz_drop_font_context(fz_context *ctx)
 	}
 }
 
-void fz_install_load_system_font_funcs(fz_context *ctx, fz_load_system_font_func f, fz_load_system_cjk_font_func f_cjk)
+void fz_install_load_system_font_funcs(fz_context *ctx, fz_load_system_font_fn f, fz_load_system_cjk_font_fn f_cjk, fz_load_system_fallback_font_fn f_fallback)
 {
 	ctx->font->load_font = f;
 	ctx->font->load_cjk_font = f_cjk;
@@@@ -1354,27 +1354,27 @@@@ fz_render_t3_glyph_direct(fz_context *ctx, fz_device *
 void
 fz_print_font(fz_context *ctx, fz_output *out, fz_font *font)
 {
-	fz_printf(ctx, out, "font '%s' {\n", font->name);
+	fz_write_printf(ctx, out, "font '%s' {\n", font->name);
 
 	if (font->ft_face)
 	{
-		fz_printf(ctx, out, "\tfreetype face %p\n", font->ft_face);
+		fz_write_printf(ctx, out, "\tfreetype face %p\n", font->ft_face);
 		if (font->flags.ft_substitute)
-			fz_printf(ctx, out, "\tsubstitute font\n");
+			fz_write_printf(ctx, out, "\tsubstitute font\n");
 	}
 
 	if (font->t3procs)
 	{
-		fz_printf(ctx, out, "\ttype3 matrix [%g %g %g %g]\n",
+		fz_write_printf(ctx, out, "\ttype3 matrix [%g %g %g %g]\n",
 			font->t3matrix.a, font->t3matrix.b,
 			font->t3matrix.c, font->t3matrix.d);
 
-		fz_printf(ctx, out, "\ttype3 bbox [%g %g %g %g]\n",
+		fz_write_printf(ctx, out, "\ttype3 bbox [%g %g %g %g]\n",
 			font->bbox.x0, font->bbox.y0,
 			font->bbox.x1, font->bbox.y1);
 	}
 
-	fz_printf(ctx, out, "}\n");
+	fz_write_printf(ctx, out, "}\n");
 }
 
 fz_rect *
@


1.1.1.1
log
@Import converters/k2pdfopt: make PDF's readable on Kindle devices.

K2pdfopt optimizes PDF/DJVU files for mobile e-readers (e.g. the Kindle)
and smartphones. It works well on multi-column PDF/DJVU files and can
re-flow text even on scanned PDF files. It can also be used as a general
PDF copying/cropping/re-sizing/OCR-ing manipulation tool. It can generate
native or bitmapped PDF output, with an optional OCR layer.

Typical use

  k2pdfopt -dev kv -mode 2col input.pdf

Supported devices (define your own by measuring your screen size)

  1. Kindle 1-5 (k2)
  2. Kindle DX (dx)
  3. Kindle Paperwhite (kpw)
  4. Kindle Paperwhite 2 (kp2)
  5. Kindle Paperwhite 3 (kp3)
  6. Pocketbook Basic 2 (pb2)
  7. Kindle Voyage (kv)
  8. Nook Simple Touch (nookst)
  9. Kobo Touch (kbt)
  10. Kobo Glo (kbg)
  11. Kobo Glo HD (kghd)
  12. Kobo Glo HD Full Screen (kghdfs)
  13. Kobo Mini (kbm)
  14. Kobo Aura (kba)
  15. Kobo Aura HD (kbhd)
  16. Kobo H2O (kbh2o)
  17. Kobo H2O Full Screen (kbh2ofs)
  18. Kobo Aura One (kao)
  19. Nexus 7 (nex7)
  20. Other (specify width, height, etc.)


With feedback from sthen@@, OK edd@@
@
text
@@
