head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.12
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.10
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.8
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.4
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2014.10.02.21.12.48;	author naddy;	state Exp;
branches;
next	;
commitid	2zJGXdVSmNPqkBE0;


desc
@@


1.1
log
@Fix a loop logic error that could lead to internal errors or truncated
output; from Paul Stoeber <plstbr@@gmail.com>
@
text
@$OpenBSD$

In the "while (cursor > input_buffer || input_char != EOF)" loop,
the "cursor" pointer sometimes refers to "input_buffer" and sometimes
to "output_buffer".  It must refer to "input_buffer" at the start of
the loop, but the present code forgets to ensure this.

Examples that trigger the problem:
$ perl -e 'print "\xc3\xa4"x1025' | recode utf8..latin1 | wc -c
$ perl -e 'print "\xc3\xa4"x2000' | recode utf8..latin1 | wc -c

--- src/libiconv.c.orig	Sat Jul  1 19:13:25 2000
+++ src/libiconv.c	Sat Sep 27 23:47:54 2014
@@@@ -195,9 +195,9 @@@@ wrapped_transform (iconv_t conversion, iconv_t convers
 	 memcpy() doesn't do here, because the regions might overlap.
 	 memmove() isn't worth it, because we rarely have to move more
 	 than 12 bytes.  */
+      cursor = input_buffer;
       if (input > input_buffer && input_left > 0)
 	{
-	  cursor = input_buffer;
 	  do
 	    *cursor++ = *input++;
 	  while (--input_left > 0);
@
