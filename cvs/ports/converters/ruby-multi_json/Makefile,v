head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.6
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.4
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.4.0.6
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.2
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.2.0.2
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.1.1.1.0.4
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.2
	jeremy_2011-Dec-13:1.1.1.1
	jeremy:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2016.01.10.17.35.11;	author jasper;	state Exp;
branches;
next	1.6;
commitid	IXG9Y3bqMYLpBVIo;

1.6
date	2015.06.17.18.51.15;	author jasper;	state Exp;
branches;
next	1.5;
commitid	hVJY6XfUutDCqjDR;

1.5
date	2015.03.16.07.20.49;	author sebastia;	state Exp;
branches;
next	1.4;
commitid	AspcNc2A5VEkOvEV;

1.4
date	2013.10.26.23.55.34;	author jeremy;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.11.01.30.28;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2012.09.23.16.57.32;	author jeremy;	state Exp;
branches;
next	1.1;

1.1
date	2011.12.13.17.33.30;	author jeremy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.12.13.17.33.30;	author jeremy;	state Exp;
branches;
next	;


desc
@@


1.7
log
@update to multi_json-1.11.2
@
text
@# $OpenBSD: Makefile,v 1.6 2015/06/17 18:51:15 jasper Exp $

COMMENT =	chooses from multiple available json implementations

DISTNAME =	multi_json-1.11.2
CATEGORIES =	converters

HOMEPAGE =	https://github.com/intridea/multi_json

# MIT License
PERMIT_PACKAGE_CDROM =		Yes

MODULES =	lang/ruby

CONFIGURE_STYLE =	ruby gem

.include <bsd.port.mk>
@


1.6
log
@update to multi_json-1.11.1
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.5 2015/03/16 07:20:49 sebastia Exp $
d5 1
a5 1
DISTNAME =	multi_json-1.11.1
@


1.5
log
@Update multi_json to 1.11.0, which fixes a problem with aws-sdk-core rubygem
for me.

OK jeremy@@, jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2013/10/26 23:55:34 jeremy Exp $
d5 1
a5 1
DISTNAME =	multi_json-1.11.0
@


1.4
log
@Bump all ruby gem ports supporting rbx FLAVOR due to change to rubinius
gem directory when upgrading rubinius from 1.2.4 to 2.1.1.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2013/03/11 01:30:28 espie Exp $
d5 1
a5 2
DISTNAME =	multi_json-1.0.3
REVISION =	1
@


1.3
log
@PERMIT_* / REGRESS->TEST sweep
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2012/09/23 16:57:32 jeremy Exp $
d6 1
a6 1
REVISION =	0
@


1.2
log
@Bump revisions for ruby gem/extconf ports after the switch to ruby 1.9
by default, since the ruby 1.8 version now has a ruby18 explicit FLAVOR.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2011/12/13 17:33:30 jeremy Exp $
a12 3
PERMIT_PACKAGE_FTP =		Yes
PERMIT_DISTFILES_CDROM =	Yes
PERMIT_DISTFILES_FTP =		Yes
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.26 2011/09/16 09:24:57 espie Exp $
d6 1
@


1.1.1.1
log
@Import ruby-multi-json 1.0.3, a Rails 3.1 dependency

Lots of Ruby libraries utilize JSON parsing in some form, and everyone
has their favorite JSON library. In order to best support multiple JSON
parsers and libraries, multi_json is a general-purpose swappable JSON
backend library.

MultiJSON tries to have intelligent defaulting. That is, if you have any
of the supported engines already loaded, it will utilize them before
attempting to load any. When loading, libraries are ordered by speed.
First Yajl-Ruby, then the JSON gem, then JSON pure. If no JSON library
is available, MultiJSON falls back to a bundled version of OkJson.

OK claudio@@
@
text
@@
