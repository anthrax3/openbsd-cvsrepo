head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.58
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.56
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.54
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.50
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.52
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.48
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.46
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.44
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.42
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.40
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.38
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.36
	OPENBSD_5_0:1.2.0.34
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.32
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.30
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.28
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.26
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.24
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.22
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.20
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.18
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.16
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.14
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.12
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.10
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.8
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.6
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.4
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.2
	OPENBSD_3_4_BASE:1.2
	lebel_2003-May-30:1.1.1.1
	lebel:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2003.05.30.17.48.09;	author lebel;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.30.15.02.53;	author lebel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.05.30.15.02.53;	author lebel;	state Exp;
branches;
next	;


desc
@@


1.2
log
@run thru fmt -72
@
text
@This module converts strings from and to 2-byte Unicode UCS2 format.
All mappings happen via 2 byte UTF16 encodings, not via 1 byte UTF8
encoding. To transform these use Unicode::String.

For historical reasons this module coexists with Unicode::Map8.  Please
use Unicode::Map8 unless you need to care for two byte character sets,
e.g. chinese GB2312.  Anyway, if you stick to the basic functionality
(see documentation) you can use both modules equivalently.

Practically this module will disappear from earth sooner or later as
Unicode mapping support needs somehow to get into perl's core. If you
like to work on this field please don't hesitate contacting Gisle Aas!

This module can't deal directly with utf8. Use Unicode::String to
convert utf8 to utf16 and vice versa.

Character mapping is according to the data of binary mapfiles in
Unicode::Map hierarchy. Binary mapfiles can also be created with this
module, enabling you to install own specific character sets. Refer to
mkmapfile or file REGISTRY in the Unicode::Map hierarchy.
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
This module converts strings from and to 2-byte Unicode UCS2 format.  All
mappings happen via 2 byte UTF16 encodings, not via 1 byte UTF8 encoding. To
transform these use Unicode::String.
d5 4
a8 4
For historical reasons this module coexists with Unicode::Map8.  Please use
Unicode::Map8 unless you need to care for two byte character sets, e.g. chinese
GB2312.  Anyway, if you stick to the basic functionality (see documentation)
you can use both modules equivalently.
d10 3
a12 3
Practically this module will disappear from earth sooner or later as Unicode
mapping support needs somehow to get into perl's core. If you like to work on
this field please don't hesitate contacting Gisle Aas!
d14 2
a15 2
This module can't deal directly with utf8. Use Unicode::String to convert utf8
to utf16 and vice versa.
d17 4
a20 4
Character mapping is according to the data of binary mapfiles in Unicode::Map
hierarchy. Binary mapfiles can also be created with this module, enabling you
to install own specific character sets. Refer to mkmapfile or file REGISTRY in
the Unicode::Map hierarchy.
@


1.1.1.1
log
@initial import of p5-Unicode-Map-0.112:
--
This module converts strings from and to 2-byte Unicode UCS2 format.  All
mappings happen via 2 byte UTF16 encodings, not via 1 byte UTF8 encoding. To
transform these use Unicode::String.

For historical reasons this module coexists with Unicode::Map8.  Please use
Unicode::Map8 unless you need to care for two byte character sets, e.g. chinese
GB2312.  Anyway, if you stick to the basic functionality (see documentation)
you can use both modules equivalently.

Practically this module will disappear from earth sooner or later as Unicode
mapping support needs somehow to get into perl's core. If you like to work on
this field please don't hesitate contacting Gisle Aas!

This module can't deal directly with utf8. Use Unicode::String to convert utf8
to utf16 and vice versa.

Character mapping is according to the data of binary mapfiles in Unicode::Map
hierarchy. Binary mapfiles can also be created with this module, enabling you
to install own specific character sets. Refer to mkmapfile or file REGISTRY in
the Unicode::Map hierarchy.
@
text
@@
