head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.16
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.14
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.12
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.8
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.10
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	dcoppa_20131001:1.1.1.1
	dcoppa:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2014.01.23.09.52.51;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.01.10.28.44;	author dcoppa;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.10.01.10.28.44;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
Better workaround for the AudioWizard deadlock problem.
Hopefully, upstream will analyze and fix this issue in the right
way.
@
text
@$OpenBSD: patch-src_mumble_AudioWizard_cpp,v 1.1.1.1 2013/10/01 10:28:44 dcoppa Exp $

Disable submitting anonymous statistics

Disable Text-To-Speech; use sound notifications by default

There's a convoluted threading issue: in PAAudio.cpp, around line 338,
it will get caught in an infinite loop. It relies on the PortAudioInput
object being destroyed in another thread, thereby setting bRunning to
false and telling it to exit the loop, which will never happen. Luckily,
this bug is only exposed by the AudioWizard configuration stuff. So,
skip calling restartAudio() from on_qsOutputDelay_valueChanged() while
the AudioWizard is starting up

--- src/mumble/AudioWizard.cpp.orig	Sat Jun  1 23:16:31 2013
+++ src/mumble/AudioWizard.cpp	Wed Jan 22 06:40:54 2014
@@@@ -62,7 +62,8 @@@@ AudioWizard::AudioWizard(QWidget *p) : QWizard(p) {
 	setupUi(this);
 
 	// Done
-	qcbUsage->setChecked(g.s.bUsage);
+	qcbUsage->setEnabled(false);
+	qcbUsage->setChecked(false);
 
 	// Device
 	if (AudioInputRegistrar::qmNew) {
@@@@ -114,18 +115,10 @@@@ AudioWizard::AudioWizard(QWidget *p) : QWizard(p) {
 	else
 		qrbQualityCustom->setChecked(true);
 
-	quint32 iMessage = Settings::LogNone;
-	for (int i = Log::firstMsgType;i <= Log::lastMsgType; ++i) {
-		iMessage |= (g.s.qmMessages[i] & (Settings::LogSoundfile | Settings::LogTTS));
-	}
+	qrbNotificationTTS->setEnabled(false);
+	qrbNotificationTTS->setChecked(false);
+	qrbNotificationSounds->setChecked(true);
 
-	if (iMessage == Settings::LogTTS && g.s.bTTS)
-		qrbNotificationTTS->setChecked(true);
-	else if (iMessage == Settings::LogSoundfile)
-		qrbNotificationSounds->setChecked(true);
-	else // If we find mixed message types or only tts with main tts disable assume custom
-		qrbNotificationCustom->setChecked(true);
-
 	qrbNotificationCustom->setVisible(qrbNotificationCustom->isChecked());
 
 	qrbQualityCustom->setVisible(qrbQualityCustom->isChecked());
@@@@ -308,7 +301,8 @@@@ void AudioWizard::on_qcbOutputDevice_activated(int) {
 void AudioWizard::on_qsOutputDelay_valueChanged(int v) {
 	qlOutputDelay->setText(tr("%1 ms").arg(v*10));
 	g.s.iOutputDelay = v;
-	restartAudio();
+	if (! bInit)
+		restartAudio();
 }
 
 void AudioWizard::on_qsMaxAmp_valueChanged(int v) {
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d7 2
a8 2
XXX There's a nasty threading issue: in PAAudio.cpp, around line 338, it
will get caught in an infinite loop. It relies on the PortAudioInput
d11 3
a13 6
this bug is only exposed by the AudioWizard configuration stuff. So, for
now, remove the call to restartAudio() at line 311 of AudioWizard.cpp:
it still allows the user to set output delays via the slider, only
listening to output delays changes on the fly will not work XXX

Remove call to playChord() (see comment above)
d16 1
a16 1
+++ src/mumble/AudioWizard.cpp	Thu Sep 26 07:40:51 2013
d49 1
a49 1
@@@@ -308,7 +301,6 @@@@ void AudioWizard::on_qcbOutputDevice_activated(int) {
d54 2
a58 17
@@@@ -334,7 +326,6 @@@@ void AudioWizard::showPage(int pageid) {
 		g.s.bMute = true;
 	} else if (cp == qwpDeviceTuning) {
 		g.s.bMute = true;
-		playChord();
 	} else if (cp == qwpPositional) {
 		fX = fY = 0.0f;
 		g.s.bMute = true;
@@@@ -395,7 +386,7 @@@@ void AudioWizard::restartAudio() {
 		qgsScene = NULL;
 	}
 
-	if ((currentPage() == qwpPositional) || (currentPage() == qwpDeviceTuning))
+	if (currentPage() == qwpPositional)
 		playChord();
 }
 
@


1.1.1.1
log
@Import mumble-1.2.4

Mumble is an open source, low-latency, high quality voice chat
application for groups.

Mumble is the client for the (u)Murmur VoIP communication server.

With help from pascal@@ and zhuk@@.
Feedback from pascal@@, zhuk@@, Gregor Best, Jonathon Sisson.

OK zhuk@@

@
text
@@
