head	1.3;
access;
symbols
	OPENBSD_6_0:1.2.0.12
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.8
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.10
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.6
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.03.15.22.23.33;	author fcambus;	state Exp;
branches;
next	1.2;
commitid	Ncw8FljS3T4F20Tk;

1.2
date	2013.12.05.23.44.01;	author edd;	state Exp;
branches;
next	1.1;

1.1
date	2012.11.19.15.06.51;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update audio/milkytracker to 1.0.0 and take maintainership.

Notable changes:

- Upstream moved to GitHub
- MilkyTracker now uses the CMake build system and switched to SDL2

OK juanfra@@
@
text
@$OpenBSD: patch-src_tracker_sdl_SDL_Main_cpp,v 1.2 2013/12/05 23:44:01 edd Exp $
--- src/tracker/sdl/SDL_Main.cpp.orig	Sun Mar 12 20:30:25 2017
+++ src/tracker/sdl/SDL_Main.cpp	Tue Mar 14 13:29:48 2017
@@@@ -669,7 +669,7 @@@@ void processSDLUserEvents(const SDL_UserEvent& event)
 {
 	union {
 		void *ptr;
-		pp_int32 i32;
+		intptr_t i32;
 	} data1, data2;
 	data1.ptr = event.data1;
 	data2.ptr = event.data2;
@


1.2
log
@Update to milkytracker-0.90.86.

Also install desktop files and examples.

Based upon work by bcallah@@

OK bcallah@@
@
text
@d1 4
a4 4
$OpenBSD: patch-src_tracker_sdl_SDL_Main_cpp,v 1.1 2012/11/19 15:06:51 sthen Exp $
--- src/tracker/sdl/SDL_Main.cpp.orig	Sun Nov 10 20:15:19 2013
+++ src/tracker/sdl/SDL_Main.cpp	Sun Nov 10 20:16:54 2013
@@@@ -740,7 +740,7 @@@@ void processSDLUserEvents(const SDL_UserEvent& event)
@


1.1
log
@Update to milkytracker 0.90.85, from dhn at freebsd, minor tweaks by me.
@
text
@d1 12
a12 45
$OpenBSD$
--- src/tracker/sdl/SDL_Main.cpp.orig	Sun Nov 18 21:28:51 2012
+++ src/tracker/sdl/SDL_Main.cpp	Sun Nov 18 21:33:18 2012
@@@@ -751,8 +751,8 @@@@ void processSDLUserEvents(const SDL_UserEvent& event)
 		case SDLUserEventLMouseRepeat:
 		{
 			PPPoint p;
-			p.x = (pp_int32)event.data1;
-			p.y = (pp_int32)event.data2;
+			p.x = reinterpret_cast<intptr_t> (event.data1);
+			p.y = reinterpret_cast<intptr_t> (event.data2);
 			PPEvent myEvent(eLMouseRepeat, &p, sizeof(PPPoint));		
 			RaiseEventSerialized(&myEvent);
 			break;
@@@@ -761,8 +761,8 @@@@ void processSDLUserEvents(const SDL_UserEvent& event)
 		case SDLUserEventRMouseRepeat:
 		{
 			PPPoint p;
-			p.x = (pp_int32)event.data1;
-			p.y = (pp_int32)event.data2;
+			p.x = reinterpret_cast<intptr_t> (event.data1);
+			p.y = reinterpret_cast<intptr_t> (event.data2);
 			PPEvent myEvent(eRMouseRepeat, &p, sizeof(PPPoint));		
 			RaiseEventSerialized(&myEvent);
 			break;
@@@@ -770,8 +770,8 @@@@ void processSDLUserEvents(const SDL_UserEvent& event)
 
 		case SDLUserEventMidiKeyDown:
 		{
-			pp_int32 note = (pp_int32)event.data1;
-			pp_int32 volume = (pp_int32)event.data2;
+			pp_int32 note = reinterpret_cast<intptr_t> (event.data1);
+			pp_int32 volume = reinterpret_cast<intptr_t> (event.data2);
 			globalMutex->lock();
 			myTracker->sendNoteDown(note, volume);
 			globalMutex->unlock();
@@@@ -780,7 +780,7 @@@@ void processSDLUserEvents(const SDL_UserEvent& event)
 
 		case SDLUserEventMidiKeyUp:
 		{
-			pp_int32 note = (pp_int32)event.data1;
+			pp_int32 note = reinterpret_cast<intptr_t> (event.data1);
 			globalMutex->lock();
 			myTracker->sendNoteUp(note);
 			globalMutex->unlock();
@

