head	1.5;
access;
symbols
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	jakemsr-20071027:1.1.1.1
	jakemsr:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2009.03.14.02.31.40;	author jakemsr;	state dead;
branches;
next	1.4;

1.4
date	2008.03.24.05.26.46;	author jakemsr;	state Exp;
branches;
next	1.3;

1.3
date	2007.11.18.14.03.32;	author jakemsr;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.01.03.29.54;	author jakemsr;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.27.08.59.04;	author jakemsr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.10.27.08.59.04;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.5
log
@- update to rev 1406
- add sndio backend written by ratchov@@
- disable OSS backend
@
text
@$OpenBSD: patch-src_hostapi_oss_pa_unix_oss_c,v 1.4 2008/03/24 05:26:46 jakemsr Exp $
--- src/hostapi/oss/pa_unix_oss.c.orig	Mon Feb 25 17:37:41 2008
+++ src/hostapi/oss/pa_unix_oss.c	Mon Feb 25 18:32:40 2008
@@@@ -76,6 +76,9 @@@@
 #elif defined(HAVE_MACHINE_SOUNDCARD_H)
 # include <machine/soundcard.h> /* JH20010905 */
 # define DEVICE_NAME_BASE            "/dev/audio"
+#elif defined(HAVE_SOUNDCARD_H)
+# include <soundcard.h>
+# define DEVICE_NAME_BASE            "/dev/audio"
 #else
 # error No sound card header file
 #endif
@@@@ -409,8 +412,15 @@@@ static PaError QueryDirection( const char *deviceName,
     if( *defaultSampleRate < 0 )
     {
         sr = 44100;
-        ENSURE_( ioctl( devHandle, SNDCTL_DSP_SPEED, &sr ), paUnanticipatedHostError );
-
+        if( ioctl( devHandle, SNDCTL_DSP_SPEED, &sr ) < 0 )
+        {
+            sr = 48000;
+            if( ioctl( devHandle, SNDCTL_DSP_SPEED, &sr ) < 0 )
+            {
+                result = paUnanticipatedHostError;
+                goto error;
+	    }
+        }
         *defaultSampleRate = sr;
     }
 
@@@@ -594,6 +604,7 @@@@ static PaError IsFormatSupported( struct PaUtilHostApi
     int tempDevHandle = -1;
     int flags;
     PaSampleFormat inputSampleFormat, outputSampleFormat;
+    int sr;
 
     if( inputParameters )
     {
@@@@ -689,6 +700,43 @@@@ static PaError IsFormatSupported( struct PaUtilHostApi
     /* PaOssStream_Configure will do the rest of the checking for us */
     /* PA_ENSURE( PaOssStream_Configure( tempDevHandle, deviceName, outputChannelCount, &sampleRate ) ); */
 
+    /* try to set the number of channels */
+    if (outputChannelCount > 0) {
+        if ( ioctl( tempDevHandle, SNDCTL_DSP_CHANNELS, &outputChannelCount ) < 0 ) {
+            result = paInvalidChannelCount;
+            goto error;
+        }
+        if (outputChannelCount != outputParameters->channelCount) {
+            result =  paInvalidChannelCount;
+            goto error;
+        }
+    }
+    if ((inputChannelCount > 0) && (inputChannelCount != outputChannelCount)) {
+        if ( ioctl( tempDevHandle, SNDCTL_DSP_CHANNELS, &inputChannelCount ) < 0 ) {
+            result = paInvalidChannelCount;
+            goto error;
+        }
+        if (inputChannelCount != inputParameters->channelCount) {
+            result =  paInvalidChannelCount;
+            goto error;
+        }
+    }
+
+    /* try to set the sample rate */
+    sr = (int)sampleRate;
+
+    if ( ioctl( tempDevHandle, SNDCTL_DSP_SPEED, &sr ) < 0) {
+        result = paInvalidSampleRate;
+        goto error;
+    }
+
+    /* reject if there's no sample rate within 1% of the one requested */
+    if( (fabs( sampleRate - (double)sr ) / sampleRate) > 0.01 )
+    {
+        result = paInvalidSampleRate;
+        goto error;
+    }
+
     /* everything succeeded! */
 
  error:
@@@@ -807,9 +855,11 @@@@ static PaError OpenDevices( const char *idevName, cons
         ENSURE_( *idev = open( idevName, flags ), paDeviceUnavailable );
         PA_ENSURE( ModifyBlocking( *idev, 1 ) ); /* Blocking */
 
+#ifndef __OpenBSD__
         /* Initially disable */
         enableBits = ~PCM_ENABLE_INPUT;
         ENSURE_( ioctl( *idev, SNDCTL_DSP_SETTRIGGER, &enableBits ), paUnanticipatedHostError );
+#endif
     }
     if( odevName )
     {
@@@@ -818,9 +868,11 @@@@ static PaError OpenDevices( const char *idevName, cons
             ENSURE_( *odev = open( odevName, flags ), paDeviceUnavailable );
             PA_ENSURE( ModifyBlocking( *odev, 1 ) ); /* Blocking */
 
+#ifndef __OpenBSD__
             /* Initially disable */
             enableBits = ~PCM_ENABLE_OUTPUT;
             ENSURE_( ioctl( *odev, SNDCTL_DSP_SETTRIGGER, &enableBits ), paUnanticipatedHostError );
+#endif
         }
         else
         {
@


1.4
log
@- maintainence update to revision 1360
- add jack support
@
text
@d1 1
a1 1
$OpenBSD: patch-src_hostapi_oss_pa_unix_oss_c,v 1.3 2007/11/18 14:03:32 jakemsr Exp $
@


1.3
log
@no need to patch away SNDCTL_DSP_GETODELAY now that it is in libossaudio
@
text
@d1 4
a4 4
$OpenBSD: patch-src_hostapi_oss_pa_unix_oss_c,v 1.2 2007/11/01 03:29:54 jakemsr Exp $
--- src/hostapi/oss/pa_unix_oss.c.orig	Sat Sep 29 19:11:09 2007
+++ src/hostapi/oss/pa_unix_oss.c	Sun Oct 28 17:05:10 2007
@@@@ -72,6 +72,9 @@@@
d14 3
a16 10
@@@@ -97,7 +100,7 @@@@ static pthread_t mainThread_;
             /* PaUtil_SetLastHostErrorInfo should only be used in the main thread */ \
             if( (code) == paUnanticipatedHostError && pthread_self() == mainThread_ ) \
             { \
-                PaUtil_SetLastHostErrorInfo( paALSA, sysErr_, strerror( errno ) ); \
+                PaUtil_SetLastHostErrorInfo( paOSS, sysErr_, strerror( errno ) ); \
             } \
             \
             PaUtil_DebugPrint(( "Expression '" #expr "' failed in '" __FILE__ "', line: " STRINGIZE( __LINE__ ) "\n" )); \
@@@@ -403,8 +406,12 @@@@ static PaError QueryDirection( const char *deviceName,
d18 4
a21 4
         if( ioctl( devHandle, SNDCTL_DSP_SPEED, &sr ) < 0 )
         {
-            result = paUnanticipatedHostError;
-            goto error;
d28 3
a30 1
         }
d32 1
a32 2
         *defaultSampleRate = sr;
@@@@ -597,6 +604,7 @@@@ static PaError IsFormatSupported( struct PaUtilHostApi
d40 1
a40 1
@@@@ -692,6 +700,43 @@@@ static PaError IsFormatSupported( struct PaUtilHostApi
d84 1
a84 1
@@@@ -810,9 +855,11 @@@@ static PaError OpenDevices( const char *idevName, cons
d96 1
a96 1
@@@@ -821,9 +868,11 @@@@ static PaError OpenDevices( const char *idevName, cons
a107 13
@@@@ -1226,10 +1275,12 @@@@ static PaError OpenStream( struct PaUtilHostApiReprese
         }
     }
 
+#if 0
     /* Round framesPerBuffer to the next power-of-two to make OSS happy. */
     framesPerBuffer &= INT_MAX;
     for (i = 1; framesPerBuffer > i; i <<= 1) ;
     framesPerBuffer = i;
+#endif
 
     /* allocate and do basic initialization of the stream structure */
     PA_UNLESS( stream = (PaOssStream*)PaUtil_AllocateMemory( sizeof(PaOssStream) ), paInsufficientMemory );
@


1.2
log
@- build the tests in the regress target
- in IsFormatSupported() actually check that the sample rate and
  number of channels are supported
- bump pkgname
@
text
@d1 1
a1 1
$OpenBSD: patch-src_hostapi_oss_pa_unix_oss_c,v 1.1.1.1 2007/10/27 08:59:04 jakemsr Exp $
a126 15
@@@@ -1942,11 +1993,11 @@@@ static signed long GetStreamReadAvailable( PaStream* s
 static signed long GetStreamWriteAvailable( PaStream* s )
 {
     PaOssStream *stream = (PaOssStream*)s;
-    int delay = 0;
+    struct count_info delay;
 
-    if( ioctl( stream->playback->fd, SNDCTL_DSP_GETODELAY, &delay ) < 0 )
+    if( ioctl( stream->playback->fd, SNDCTL_DSP_GETOPTR, &delay ) < 0 )
         return paUnanticipatedHostError;
 
-    return (PaOssStreamComponent_BufferSize( stream->playback ) - delay) / PaOssStreamComponent_FrameSize( stream->playback );
+    return (PaOssStreamComponent_BufferSize( stream->playback ) - delay.ptr) / PaOssStreamComponent_FrameSize( stream->playback );
 }
 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ src/hostapi/oss/pa_unix_oss.c	Sat Sep 29 21:45:19 2007
d14 9
d38 53
a90 1
@@@@ -810,9 +817,11 @@@@ static PaError OpenDevices( const char *idevName, cons
d102 1
a102 1
@@@@ -821,9 +830,11 @@@@ static PaError OpenDevices( const char *idevName, cons
d114 1
a114 1
@@@@ -1226,10 +1237,12 @@@@ static PaError OpenStream( struct PaUtilHostApiReprese
d127 1
a127 1
@@@@ -1942,11 +1955,11 @@@@ static signed long GetStreamReadAvailable( PaStream* s
@


1.1.1.1
log
@import portaudio v19 snapshot

PortAudio is a free, cross platform, open-source, audio I/O library.  It
lets you write simple audio programs in 'C' that will compile and run on
many platforms including Windows, Macintosh (8,9,X), Unix (OSS), SGI,
and BeOS. PortAudio is intended to promote the exchange of audio
synthesis software between developers on different platforms.

ok deanna@@

@
text
@@
