head	1.3;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.1.0.10
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.2
	OPENBSD_5_6_BASE:1.1.1.1
	naddy_20140523:1.1.1.1
	naddy:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2017.08.14.22.09.51;	author naddy;	state Exp;
branches;
next	1.2;
commitid	qWQqg2ENrDcZT6gh;

1.2
date	2016.08.05.14.33.35;	author naddy;	state Exp;
branches;
next	1.1;
commitid	kiN55MRyk9hJ35lS;

1.1
date	2014.05.23.20.46.05;	author naddy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.05.23.20.46.05;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@maintenance update to 0.9
@
text
@$OpenBSD: patch-src_http_c,v 1.2 2016/08/05 14:33:35 naddy Exp $

No struct timeb / ftime(3) support; libcompat is gone.
Replace with struct timeval / gettimeofday(2).

Index: src/http.c
--- src/http.c.orig
+++ src/http.c
@@@@ -355,7 +355,7 @@@@ typedef int op_sock;
 #  define op_reset_errno() (errno=0)
 
 # endif
-# include <sys/timeb.h>
+# include <sys/time.h>
 # include <openssl/x509v3.h>
 
 /*The maximum number of simultaneous connections.
@@@@ -799,7 +799,7 @@@@ struct OpusHTTPConn{
   /*The next connection in either the LRU or free list.*/
   OpusHTTPConn *next;
   /*The last time we blocked for reading from this connection.*/
-  struct timeb  read_time;
+  struct timeval  read_time;
   /*The number of bytes we've read since the last time we blocked.*/
   opus_int64    read_bytes;
   /*The estimated throughput of this connection, in bytes/s.*/
@@@@ -849,7 +849,7 @@@@ struct OpusHTTPStream{
     struct sockaddr_in6 v6;
   }                addr;
   /*The last time we re-resolved the host.*/
-  struct timeb     resolve_time;
+  struct timeval   resolve_time;
   /*A buffer used to build HTTP requests.*/
   OpusStringBuf    request;
   /*A buffer used to build proxy CONNECT requests.*/
@@@@ -1004,26 +1004,25 @@@@ static int op_http_conn_estimate_available(OpusHTTPCon
   return available;
 }
 
-static opus_int32 op_time_diff_ms(const struct timeb *_end,
- const struct timeb *_start){
+static opus_int32 op_time_diff_ms(const struct timeval *_end,
+ const struct timeval *_start){
   opus_int64 dtime;
-  dtime=_end->time-(opus_int64)_start->time;
-  OP_ASSERT(_end->millitm<1000);
-  OP_ASSERT(_start->millitm<1000);
-  if(OP_UNLIKELY(dtime>(OP_INT32_MAX-1000)/1000))return OP_INT32_MAX;
-  if(OP_UNLIKELY(dtime<(OP_INT32_MIN+1000)/1000))return OP_INT32_MIN;
-  return (opus_int32)dtime*1000+_end->millitm-_start->millitm;
+  dtime=_end->tv_sec-_start->tv_sec;
+  dtime=dtime*1000+(_end->tv_usec-_start->tv_usec)/1000;
+  if(OP_UNLIKELY(dtime>OP_INT32_MAX))return OP_INT32_MAX;
+  if(OP_UNLIKELY(dtime<OP_INT32_MIN))return OP_INT32_MIN;
+  return (opus_int32)dtime;
 }
 
 /*Update the read rate estimate for this connection.*/
 static void op_http_conn_read_rate_update(OpusHTTPConn *_conn){
-  struct timeb read_time;
+  struct timeval read_time;
   opus_int32   read_delta_ms;
   opus_int64   read_delta_bytes;
   opus_int64   read_rate;
   read_delta_bytes=_conn->read_bytes;
   if(read_delta_bytes<=0)return;
-  ftime(&read_time);
+  gettimeofday(&read_time,NULL);
   read_delta_ms=op_time_diff_ms(&read_time,&_conn->read_time);
   read_rate=_conn->read_rate;
   read_delta_ms=OP_MAX(read_delta_ms,1);
@@@@ -1530,7 +1529,7 @@@@ static long op_bio_retry_ctrl(BIO *_b,int _cmd,long _n
   return ret;
 }
 
-# if OPENSSL_VERSION_NUMBER<0x10100000L
+# if OPENSSL_VERSION_NUMBER<0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 #  define BIO_set_data(_b,_ptr) ((_b)->ptr=(_ptr))
 #  define BIO_set_init(_b,_init) ((_b)->init=(_init))
 #  define ASN1_STRING_get0_data ASN1_STRING_data
@@@@ -1538,7 +1537,7 @@@@ static long op_bio_retry_ctrl(BIO *_b,int _cmd,long _n
 
 static int op_bio_retry_new(BIO *_b){
   BIO_set_init(_b,1);
-# if OPENSSL_VERSION_NUMBER<0x10100000L
+# if OPENSSL_VERSION_NUMBER<0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
   _b->num=0;
 # endif
   BIO_set_data(_b,NULL);
@@@@ -1549,7 +1548,7 @@@@ static int op_bio_retry_free(BIO *_b){
   return _b!=NULL;
 }
 
-# if OPENSSL_VERSION_NUMBER<0x10100000L
+# if OPENSSL_VERSION_NUMBER<0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 /*This is not const because OpenSSL doesn't allow it, even though it won't
    write to it.*/
 static BIO_METHOD op_bio_retry_method={
@@@@ -1570,7 +1569,7 @@@@ static BIO_METHOD op_bio_retry_method={
    proxying https URL requests.*/
 static int op_http_conn_establish_tunnel(OpusHTTPStream *_stream,
  OpusHTTPConn *_conn,op_sock _fd,SSL *_ssl_conn,BIO *_ssl_bio){
-# if OPENSSL_VERSION_NUMBER>=0x10100000L
+# if OPENSSL_VERSION_NUMBER>=0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
   BIO_METHOD *bio_retry_method;
 # endif
   BIO  *retry_bio;
@@@@ -1583,7 +1582,7 @@@@ static int op_http_conn_establish_tunnel(OpusHTTPStrea
   ret=op_http_conn_write_fully(_conn,
    _stream->proxy_connect.buf,_stream->proxy_connect.nbuf);
   if(OP_UNLIKELY(ret<0))return ret;
-# if OPENSSL_VERSION_NUMBER>=0x10100000L
+# if OPENSSL_VERSION_NUMBER>=0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
   bio_retry_method=BIO_meth_new(BIO_TYPE_NULL,"retry");
   if(bio_retry_method==NULL)return OP_EFAULT;
   BIO_meth_set_write(bio_retry_method,op_bio_retry_write);
@@@@ -1606,7 +1605,7 @@@@ static int op_http_conn_establish_tunnel(OpusHTTPStrea
   /*This shouldn't succeed, since we can't read yet.*/
   OP_ALWAYS_TRUE(SSL_connect(_ssl_conn)<0);
   SSL_set_bio(_ssl_conn,_ssl_bio,_ssl_bio);
-# if OPENSSL_VERSION_NUMBER>=0x10100000L
+# if OPENSSL_VERSION_NUMBER>=0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
   BIO_meth_free(bio_retry_method);
 # endif
   /*Only now do we disable write coalescing, to allow the CONNECT
@@@@ -1893,7 +1892,7 @@@@ static int op_http_conn_start_tls(OpusHTTPStream *_str
   SSL_set_tlsext_host_name(_ssl_conn,_stream->url.host);
 # endif
   skip_certificate_check=_stream->skip_certificate_check;
-# if OPENSSL_VERSION_NUMBER>=0x10002000L
+# if OPENSSL_VERSION_NUMBER>=0x10002000L && !defined(LIBRESSL_VERSION_NUMBER)
   /*As of version 1.0.2, OpenSSL can finally do hostname checks automatically.
     Of course, they make it much more complicated than it needs to be.*/
   if(!skip_certificate_check){
@@@@ -2015,7 +2014,7 @@@@ static int op_sock_connect_next(op_sock _fd,
 # define OP_NPROTOS (2)
 
 static int op_http_connect_impl(OpusHTTPStream *_stream,OpusHTTPConn *_conn,
- struct addrinfo *_addrs,struct timeb *_start_time){
+ struct addrinfo *_addrs,struct timeval *_start_time){
   struct addrinfo *addr;
   struct addrinfo *addrs[OP_NPROTOS];
   struct pollfd    fds[OP_NPROTOS];
@@@@ -2045,7 +2044,7 @@@@ static int op_http_connect_impl(OpusHTTPStream *_strea
   _stream->free_head=_conn->next;
   _conn->next=_stream->lru_head;
   _stream->lru_head=_conn;
-  ftime(_start_time);
+  gettimeofday(_start_time,NULL);
   *&_conn->read_time=*_start_time;
   _conn->read_bytes=0;
   _conn->read_rate=0;
@@@@ -2147,14 +2146,14 @@@@ static int op_http_connect_impl(OpusHTTPStream *_strea
 }
 
 static int op_http_connect(OpusHTTPStream *_stream,OpusHTTPConn *_conn,
- struct addrinfo *_addrs,struct timeb *_start_time){
-  struct timeb     resolve_time;
+ struct addrinfo *_addrs,struct timeval *_start_time){
+  struct timeval   resolve_time;
   struct addrinfo *new_addrs;
   int              ret;
   /*Re-resolve the host if we need to (RFC 6555 says we MUST do so
      occasionally).*/
   new_addrs=NULL;
-  ftime(&resolve_time);
+  gettimeofday(&resolve_time,NULL);
   if(_addrs!=&_stream->addr_info||op_time_diff_ms(&resolve_time,
    &_stream->resolve_time)>=OP_RESOLVE_CACHE_TIMEOUT_MS){
     new_addrs=op_resolve(_stream->connect_host,_stream->connect_port);
@@@@ -2305,8 +2304,8 @@@@ static int op_http_stream_open(OpusHTTPStream *_stream
   addrs=NULL;
   for(nredirs=0;nredirs<OP_REDIRECT_LIMIT;nredirs++){
     OpusParsedURL  next_url;
-    struct timeb   start_time;
-    struct timeb   end_time;
+    struct timeval start_time;
+    struct timeval end_time;
     char          *next;
     char          *status_code;
     int            minor_version_pos;
@@@@ -2314,7 +2313,7 @@@@ static int op_http_stream_open(OpusHTTPStream *_stream
     /*Initialize the SSL library if necessary.*/
     if(OP_URL_IS_SSL(&_stream->url)&&_stream->ssl_ctx==NULL){
       SSL_CTX *ssl_ctx;
-# if OPENSSL_VERSION_NUMBER<0x10100000L
+# if OPENSSL_VERSION_NUMBER<0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 #  if !defined(OPENSSL_NO_LOCKING)
       /*The documentation says SSL_library_init() is not reentrant.
         We don't want to add our own depenencies on a threading library, and it
@@@@ -2440,7 +2439,7 @@@@ static int op_http_stream_open(OpusHTTPStream *_stream
     if(OP_UNLIKELY(ret<0))return ret;
     ret=op_http_conn_read_response(_stream->conns+0,&_stream->response);
     if(OP_UNLIKELY(ret<0))return ret;
-    ftime(&end_time);
+    gettimeofday(&end_time,NULL);
     next=op_http_parse_status_line(&v1_1_compat,&status_code,
      _stream->response.buf);
     if(OP_UNLIKELY(next==NULL))return OP_FALSE;
@@@@ -2852,8 +2851,8 @@@@ static int op_http_conn_handle_response(OpusHTTPStream
                 converted into a request for the rest.*/
 static int op_http_conn_open_pos(OpusHTTPStream *_stream,
  OpusHTTPConn *_conn,opus_int64 _pos,opus_int32 _chunk_size){
-  struct timeb  start_time;
-  struct timeb  end_time;
+  struct timeval start_time;
+  struct timeval end_time;
   opus_int32    connect_rate;
   opus_int32    connect_time;
   int           ret;
@@@@ -2863,7 +2862,7 @@@@ static int op_http_conn_open_pos(OpusHTTPStream *_stre
   if(OP_UNLIKELY(ret<0))return ret;
   ret=op_http_conn_handle_response(_stream,_conn);
   if(OP_UNLIKELY(ret!=0))return OP_FALSE;
-  ftime(&end_time);
+  gettimeofday(&end_time,NULL);
   _stream->cur_conni=(int)(_conn-_stream->conns);
   OP_ASSERT(_stream->cur_conni>=0&&_stream->cur_conni<OP_NCONNS_MAX);
   /*The connection has been successfully opened.
@@@@ -3115,7 +3114,7 @@@@ static int op_http_conn_read_ahead(OpusHTTPStream *_st
 }
 
 static int op_http_stream_seek(void *_stream,opus_int64 _offset,int _whence){
-  struct timeb     seek_time;
+  struct timeval   seek_time;
   OpusHTTPStream  *stream;
   OpusHTTPConn    *conn;
   OpusHTTPConn   **pnext;
@@@@ -3156,7 +3155,7 @@@@ static int op_http_stream_seek(void *_stream,opus_int6
     op_http_conn_read_rate_update(stream->conns+ci);
     *&seek_time=*&stream->conns[ci].read_time;
   }
-  else ftime(&seek_time);
+  else gettimeofday(&seek_time,NULL);
   /*If we seeked past the end of the stream, just disable the active
      connection.*/
   if(pos>=content_length){
@


1.2
log
@update to 0.8; ok maintainer Sergey Bronnikov
@
text
@d1 1
a1 1
$OpenBSD: patch-src_http_c,v 1.1.1.1 2014/05/23 20:46:05 naddy Exp $
d6 4
a9 3
--- src/http.c.orig	Wed Jul  6 19:14:49 2016
+++ src/http.c	Thu Aug  4 18:22:46 2016
@@@@ -347,7 +347,7 @@@@ typedef int op_sock;
d18 1
a18 1
@@@@ -788,7 +788,7 @@@@ struct OpusHTTPConn{
d27 1
a27 1
@@@@ -838,7 +838,7 @@@@ struct OpusHTTPStream{
d36 1
a36 1
@@@@ -992,26 +992,25 @@@@ static int op_http_conn_estimate_available(OpusHTTPCon
d72 1
a72 1
@@@@ -1517,14 +1516,14 @@@@ static long op_bio_retry_ctrl(BIO *_b,int _cmd,long _n
d80 2
a81 1
 # endif
d90 1
a90 1
@@@@ -1535,7 +1534,7 @@@@ static int op_bio_retry_free(BIO *_b){
d99 1
a99 1
@@@@ -1556,7 +1555,7 @@@@ static BIO_METHOD op_bio_retry_method={
d108 1
a108 1
@@@@ -1569,7 +1568,7 @@@@ static int op_http_conn_establish_tunnel(OpusHTTPStrea
d117 1
a117 1
@@@@ -1592,7 +1591,7 @@@@ static int op_http_conn_establish_tunnel(OpusHTTPStrea
d126 10
a135 1
@@@@ -1933,7 +1932,7 @@@@ static int op_sock_connect_next(op_sock _fd,
d139 6
a144 6
- const struct addrinfo *_addrs,struct timeb *_start_time){
+ const struct addrinfo *_addrs,struct timeval *_start_time){
   const struct addrinfo *addr;
   const struct addrinfo *addrs[OP_NPROTOS];
   struct pollfd          fds[OP_NPROTOS];
@@@@ -1963,7 +1962,7 @@@@ static int op_http_connect_impl(OpusHTTPStream *_strea
d153 1
a153 1
@@@@ -2065,14 +2064,14 @@@@ static int op_http_connect_impl(OpusHTTPStream *_strea
d157 1
a157 1
- const struct addrinfo *_addrs,struct timeb *_start_time){
d159 1
a159 1
+ const struct addrinfo *_addrs,struct timeval *_start_time){
d171 1
a171 1
@@@@ -2222,8 +2221,8 @@@@ static int op_http_stream_open(OpusHTTPStream *_stream
d182 1
a182 1
@@@@ -2231,7 +2230,7 @@@@ static int op_http_stream_open(OpusHTTPStream *_stream
d191 1
a191 1
@@@@ -2357,7 +2356,7 @@@@ static int op_http_stream_open(OpusHTTPStream *_stream
d200 1
a200 1
@@@@ -2769,18 +2768,18 @@@@ static int op_http_conn_handle_response(OpusHTTPStream
d206 6
a211 11
-  opus_int32    connect_rate;
-  opus_int32    connect_time;
-  int           ret;
+  struct timeval    start_time;
+  struct timeval    end_time;
+  opus_int32        connect_rate;
+  opus_int32        connect_time;
+  int               ret;
   ret=op_http_connect(_stream,_conn,&_stream->addr_info,&start_time);
   if(OP_UNLIKELY(ret<0))return ret;
   ret=op_http_conn_send_request(_stream,_conn,_pos,_chunk_size,0);
d217 1
a217 1
   _stream->cur_conni=_conn-_stream->conns;
d220 1
a220 1
@@@@ -3032,7 +3031,7 @@@@ static int op_http_conn_read_ahead(OpusHTTPStream *_st
d229 1
a229 1
@@@@ -3073,7 +3072,7 @@@@ static int op_http_stream_seek(void *_stream,opus_int6
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d6 2
a7 2
--- src/http.c.orig	Thu Dec  5 17:49:13 2013
+++ src/http.c	Thu May 22 19:55:42 2014
d71 54
a124 1
@@@@ -1902,7 +1901,7 @@@@ static int op_sock_connect_next(op_sock _fd,
d133 1
a133 1
@@@@ -1932,7 +1931,7 @@@@ static int op_http_connect_impl(OpusHTTPStream *_strea
d142 1
a142 1
@@@@ -2034,14 +2033,14 @@@@ static int op_http_connect_impl(OpusHTTPStream *_strea
d160 1
a160 1
@@@@ -2191,8 +2190,8 @@@@ static int op_http_stream_open(OpusHTTPStream *_stream
d171 10
a180 1
@@@@ -2321,7 +2320,7 @@@@ static int op_http_stream_open(OpusHTTPStream *_stream
d189 1
a189 1
@@@@ -2733,18 +2732,18 @@@@ static int op_http_conn_handle_response(OpusHTTPStream
d214 1
a214 1
@@@@ -2996,7 +2995,7 @@@@ static int op_http_conn_read_ahead(OpusHTTPStream *_st
d223 1
a223 1
@@@@ -3037,7 +3036,7 @@@@ static int op_http_stream_seek(void *_stream,opus_int6
@


1.1.1.1
log
@Import opusfile 0.5.

Opusfile provides application developers with a high-level API for
decoding and seeking in .opus files.

From Sergey Bronnikov; composite ok from landry@@ and sthen@@
@
text
@@
