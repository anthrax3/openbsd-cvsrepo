head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2017.04.27.12.44.03;	author espie;	state Exp;
branches;
next	;
commitid	Vbsnv5FSFNVEzzT3;


desc
@@


1.1
log
@don't reuse the same symbol to mean a different thing in a nested template
declaration. Yeah, you're going to use Arithm<S>.
No, you're declaring template <class X>Arithm  *in general*.
@
text
@$OpenBSD$
--- akode/lib/fast_resampler.cpp.orig	Thu Apr 27 14:15:31 2017
+++ akode/lib/fast_resampler.cpp	Thu Apr 27 14:22:43 2017
@@@@ -37,7 +37,7 @@@@ FastResampler::FastResampler() : speed(1.0), sample_ra
 // A fast resampling by linear interpolation
 // I assume you know binary arithmetics and convertions if you're reading this
 // T is the input/output type, Arithm defines the used arithmetic
-template<typename T, typename S, template<typename S> class Arithm>
+template<typename T, typename S, template<typename U> class Arithm>
 static bool _doBuffer(AudioFrame* in, AudioFrame* out, float speed, unsigned sample_rate)
 {
     unsigned long vt_pos_start = 0;  // virtual positions of new sample
@
