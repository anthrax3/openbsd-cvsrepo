head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2017.08.27.16.08.46;	author rsadowski;	state dead;
branches;
next	1.1;
commitid	KfDipUBZ6R9j3vCY;

1.1
date	2017.04.27.12.44.03;	author espie;	state Exp;
branches;
next	;
commitid	Vbsnv5FSFNVEzzT3;


desc
@@


1.2
log
@remove audio/akode

no longer maintained upstream and no ports use it.

ok jca@@ zhuk@@
@
text
@$OpenBSD: patch-akode_lib_converter_cpp,v 1.1 2017/04/27 12:44:03 espie Exp $
--- akode/lib/converter.cpp.orig	Thu Apr 27 14:26:04 2017
+++ akode/lib/converter.cpp	Thu Apr 27 14:26:18 2017
@@@@ -26,7 +26,7 @@@@ namespace aKode {
 
 Converter::Converter(int sample_width) : m_sample_width(sample_width) {}
 
-template<typename T, typename S, template<typename T> class ArithmT, template<typename S> class ArithmS>
+template<typename T, typename S, template<typename U> class ArithmT, template<typename V> class ArithmS>
 static bool __doFrameFP(AudioFrame* in, AudioFrame* out, int sample_width)
 {
     AudioConfiguration config = *in;
@


1.1
log
@don't reuse the same symbol to mean a different thing in a nested template
declaration. Yeah, you're going to use Arithm<S>.
No, you're declaring template <class X>Arithm  *in general*.
@
text
@d1 1
a1 1
$OpenBSD$
@

