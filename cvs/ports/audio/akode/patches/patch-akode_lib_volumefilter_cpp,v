head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2017.04.27.12.44.03;	author espie;	state Exp;
branches;
next	;
commitid	Vbsnv5FSFNVEzzT3;


desc
@@


1.1
log
@don't reuse the same symbol to mean a different thing in a nested template
declaration. Yeah, you're going to use Arithm<S>.
No, you're declaring template <class X>Arithm  *in general*.
@
text
@$OpenBSD$
--- akode/lib/volumefilter.cpp.orig	Thu Apr 27 14:24:16 2017
+++ akode/lib/volumefilter.cpp	Thu Apr 27 14:24:21 2017
@@@@ -29,7 +29,7 @@@@ namespace aKode {
 VolumeFilter::VolumeFilter() : m_volume(0) {}
 
 // T is the input/output type, S is the fast arithmetics type, Arithm is a division definition
-template<typename T, typename S, template<typename S> class Arithm>
+template<typename T, typename S, template<typename U> class Arithm>
 static bool _doFrame(AudioFrame* in, AudioFrame* out, int volume)
 {
     T** indata = (T**)in->data;
@
