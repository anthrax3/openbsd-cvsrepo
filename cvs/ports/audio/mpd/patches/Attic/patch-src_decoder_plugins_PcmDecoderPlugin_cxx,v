head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2016.12.11.12.59.40;	author dcoppa;	state dead;
branches;
next	1.1;
commitid	3orgrAlxXS6aJJ6m;

1.1
date	2016.11.24.08.27.28;	author dcoppa;	state Exp;
branches;
next	;
commitid	NNwTedpjDUQi3i7B;


desc
@@


1.2
log
@
Update to mpd-0.19.20
@
text
@$OpenBSD: patch-src_decoder_plugins_PcmDecoderPlugin_cxx,v 1.1 2016/11/24 08:27:28 dcoppa Exp $

commit 7019f6bea455f0d843131ec5b88cf057ebba5058
Author: Max Kellermann <max@@musicpd.org>
Date:   Thu Nov 17 21:58:27 2016 +0100

decoder/pcm: round buffer size down to nearest frame size

https://bugs.musicpd.org/view.php?id=4599

--- src/decoder/plugins/PcmDecoderPlugin.cxx.orig	Fri Jul 29 10:01:52 2016
+++ src/decoder/plugins/PcmDecoderPlugin.cxx	Wed Nov 23 16:07:44 2016
@@@@ -23,10 +23,28 @@@@
 #include "input/InputStream.hxx"
 #include "util/Error.hxx"
 #include "util/ByteReverse.hxx"
+#include "util/StaticFifoBuffer.hxx"
 #include "Log.hxx"
 
+#include <assert.h>
 #include <string.h>
 
+template<typename B>
+static bool
+FillBuffer(Decoder &decoder, InputStream &is, B &buffer)
+{
+	buffer.Shift();
+	auto w = buffer.Write();
+	assert(!w.IsEmpty());
+
+	size_t nbytes = decoder_read(decoder, is, w.data, w.size);
+	if (nbytes == 0 && is.LockIsEOF())
+		return false;
+
+	buffer.Append(nbytes);
+	return true;
+}
+
 static void
 pcm_stream_decode(Decoder &decoder, InputStream &is)
 {
@@@@ -50,25 +68,27 @@@@ pcm_stream_decode(Decoder &decoder, InputStream &is)
 	decoder_initialized(decoder, audio_format,
 			    is.IsSeekable(), total_time);
 
+	StaticFifoBuffer<uint8_t, 4096> buffer;
+
 	DecoderCommand cmd;
 	do {
-		char buffer[4096];
-
-		size_t nbytes = decoder_read(decoder, is,
-					     buffer, sizeof(buffer));
-
-		if (nbytes == 0 && is.LockIsEOF())
+		if (!FillBuffer(decoder, is, buffer))
 			break;
 
+		auto r = buffer.Read();
+		/* round down to the nearest frame size, because we
+		   must not pass partial frames to decoder_data() */
+		r.size -= r.size % frame_size;
+		buffer.Consume(r.size);
+
 		if (reverse_endian)
 			/* make sure we deliver samples in host byte order */
-			reverse_bytes_16((uint16_t *)buffer,
-					 (uint16_t *)buffer,
-					 (uint16_t *)(buffer + nbytes));
+			reverse_bytes_16((uint16_t *)r.data,
+					 (uint16_t *)r.data,
+					 (uint16_t *)(r.data + r.size));
 
-		cmd = nbytes > 0
-			? decoder_data(decoder, is,
-				       buffer, nbytes, 0)
+		cmd = !r.IsEmpty()
+			? decoder_data(decoder, is, r.data, r.size, 0)
 			: decoder_get_command(decoder);
 		if (cmd == DecoderCommand::SEEK) {
 			uint64_t frame = decoder_seek_where_frame(decoder);
@@@@ -76,6 +96,7 @@@@ pcm_stream_decode(Decoder &decoder, InputStream &is)
 
 			Error error;
 			if (is.LockSeek(offset, error)) {
+				buffer.Clear();
 				decoder_command_finished(decoder);
 			} else {
 				LogError(error);
@


1.1
log
@
Merge fixes from branch 'v0.19.x' of git://git.musicpd.org/master/mpd

decoder/pcm: round buffer size down to nearest frame size
(upstream git commit 7019f6bea455f0d843131ec5b88cf057ebba5058)

decoder/ffmpeg: ignore empty packets
(upstream git commit 77a9940461f96a608b1f564f810b146980e63c4d)

fix comment in mpdconf.example ("can setting can" -> "setting can")
(upstream git commit 7c251fe19013d17f5ecd65361a560d433c0c19ef)
@
text
@d1 1
a1 1
$OpenBSD$
@

