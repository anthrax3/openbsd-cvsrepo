head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2015.08.13.08.57.27;	author jasper;	state Exp;
branches;
next	1.1;
commitid	jfTuEN6jzyJjtPFN;

1.1
date	2015.08.12.19.38.49;	author miod;	state Exp;
branches;
next	;
commitid	VzRvu8O9YnCVgr5b;


desc
@@


1.2
log
@submitted upstream
@
text
@$OpenBSD: patch-libFDK_include_mips_cplx_mul_h,v 1.1 2015/08/12 19:38:49 miod Exp $

https://github.com/mstorsjo/fdk-aac/pull/34:
Only enable code using mips32/mips64 instructions if the compiler is targetting
this ISA. (integer madd and msub instructions aren't available in the
``canonical'' mips ISAs)

--- libFDK/include/mips/cplx_mul.h.orig	Wed Mar 11 15:27:03 2015
+++ libFDK/include/mips/cplx_mul.h	Wed Aug 12 11:47:59 2015
@@@@ -89,7 +89,7 @@@@ amm-info@@iis.fraunhofer.de
 ******************************************************************************/
 
 
-#if defined(__GNUC__) && defined(__mips__) && __mips_isa_rev < 6
+#if defined(__GNUC__) && defined(__mips_isa_rev) && __mips_isa_rev < 6
 
 
 //#define FUNCTION_cplxMultDiv2_32x16
@


1.1
log
@Unbreak on mips by fixing the preprocessor statements controlling the use of
mips{32,64}r1 instructions. Our mips64 toolchain defaults to mips3, because
we (still) intend to run on processors which instruction support is limited
to the mips III ISA.

ok jasper@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
@

