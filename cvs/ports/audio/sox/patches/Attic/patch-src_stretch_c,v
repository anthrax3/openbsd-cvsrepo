head	1.2;
access;
symbols
	OPENBSD_4_4:1.1.0.8
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.6
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.4
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.2
	OPENBSD_4_1_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2009.01.08.19.48.21;	author naddy;	state dead;
branches;
next	1.1;

1.1
date	2006.10.18.15.41.06;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- Large update to 14.2.0.
- Drop snprintf() patches that were not accepted upstream.
- Drop flavors and just add most external libraries sox supports.
- Don't modularize the format converters.
@
text
@$OpenBSD: patch-src_stretch_c,v 1.1 2006/10/18 15:41:06 naddy Exp $
--- src/stretch.c.orig	Wed Oct 18 16:38:57 2006
+++ src/stretch.c	Wed Oct 18 16:39:57 2006
@@@@ -115,14 +115,14 @@@@ int st_stretch_getopts(eff_t effp, int n
 
     if (n>0 && !sscanf(argv[0], STRETCH_FLOAT_SCAN, &stretch->factor))
     {
-        sprintf (usage, "%s\n\terror while parsing factor", st_stretch_effect.usage);
+        snprintf (usage, sizeof(usage), "%s\n\terror while parsing factor", st_stretch_effect.usage);
         st_fail(usage);
         return ST_EOF;
     }
 
     if (n>1 && !sscanf(argv[1], STRETCH_FLOAT_SCAN, &stretch->window))
     {
-        sprintf (usage, "%s\n\terror while parsing window size", st_stretch_effect.usage);
+        snprintf (usage, sizeof(usage), "%s\n\terror while parsing window size", st_stretch_effect.usage);
         st_fail(usage);
         return ST_EOF;
     }
@@@@ -136,7 +136,7 @@@@ int st_stretch_getopts(eff_t effp, int n
             stretch->fade = st_linear_fading;
             break;
         default:
-            sprintf (usage, "%s\n\terror while parsing fade type", st_stretch_effect.usage);
+            snprintf (usage, sizeof(usage), "%s\n\terror while parsing fade type", st_stretch_effect.usage);
             st_fail(usage);
             return ST_EOF;
         }
@@@@ -148,14 +148,14 @@@@ int st_stretch_getopts(eff_t effp, int n
  
     if (n>3 && !sscanf(argv[3], STRETCH_FLOAT_SCAN, &stretch->shift))
     {
-        sprintf (usage, "%s\n\terror while parsing shift ratio", st_stretch_effect.usage);
+        snprintf (usage, sizeof(usage), "%s\n\terror while parsing shift ratio", st_stretch_effect.usage);
         st_fail(usage);
         return ST_EOF;
     }
 
     if (stretch->shift > ONE || stretch->shift <= ZERO)
     {
-        sprintf (usage, "%s\n\terror with shift ratio value", st_stretch_effect.usage);
+        snprintf (usage, sizeof(usage), "%s\n\terror with shift ratio value", st_stretch_effect.usage);
         st_fail(usage);
         return ST_EOF;
     }
@@@@ -171,14 +171,14 @@@@ int st_stretch_getopts(eff_t effp, int n
 
     if (n>4 && !sscanf(argv[4], STRETCH_FLOAT_SCAN, &stretch->fading))
     {
-        sprintf (usage, "%s\n\terror while parsing fading ratio", st_stretch_effect.usage);
+        snprintf (usage, sizeof(usage), "%s\n\terror while parsing fading ratio", st_stretch_effect.usage);
         st_fail(usage);
         return ST_EOF;
     }
 
     if (stretch->fading > HALF || stretch->fading < ZERO)
     {
-        sprintf (usage, "%s\n\terror with fading ratio value", st_stretch_effect.usage);
+        snprintf (usage, sizeof(usage), "%s\n\terror with fading ratio value", st_stretch_effect.usage);
         st_fail(usage);
         return ST_EOF;
     }
@


1.1
log
@update to 12.18.2
@
text
@d1 1
a1 1
$OpenBSD$
@

