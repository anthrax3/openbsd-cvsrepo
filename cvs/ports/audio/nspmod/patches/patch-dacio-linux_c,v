head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.32
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.30
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.28
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.24
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.26
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.22
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.20
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.18
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.16
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.14
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.12
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.8
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.6
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.4
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.2
	OPENBSD_4_3_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2009.12.24.21.43.32;	author jakemsr;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.26.20.28.51;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- use sndio instead of ossaudio
- remove patches for 16-bit only soundcard support - use aucat instead
- @@bin marker

ok ratchov
@
text
@$OpenBSD: patch-dacio-linux_c,v 1.1 2007/10/26 20:28:51 ajacoutot Exp $
--- dacio-linux.c.orig	Sun Sep 17 05:51:43 1995
+++ dacio-linux.c	Sat Dec 19 22:00:33 2009
@@@@ -1,10 +1,8 @@@@
 #line 2 "dacio-linux.c"
+#include <stdlib.h>
 #include <stdio.h>	/*(perror)*/
-#include <fcntl.h>	/*O_WRONLY*/
-#include <sys/ioctl.h>	/*(ioctl)*/
 #include <unistd.h>	/*(write)*/
-#include <sys/soundcard.h> /*SNDCTL_XXX*/
-#include <errno.h>	/*EINTR*/
+#include <sndio.h>
 #include "defs.h"	/*u8,u16*/
 #include "dacio.h"	/*(dacioXXX)*/
 #include "mem.h"	/*(memPerm)*/
@@@@ -27,18 +25,14 @@@@ makeLim(void)
 }
 #endif
 
-static int fd;
+static struct sio_hdl *hdl;
 
-#ifndef DAC_DEV
-#define DAC_DEV	"/dev/dsp"
-#endif
-
 void
 dacioInit(void)
 {
-    fd = open(DAC_DEV, O_WRONLY);
-    if (fd < 0) {
-	perror("dacioInit");
+    hdl = sio_open(NULL, SIO_PLAY, 0);
+    if (hdl == NULL) {
+	fprintf(stderr, "dacioInit failed");
 	exit(1);
     }
     /*makeLim();*/
@@@@ -59,52 +53,42 @@@@ static DacioConfInfo dci;
 void
 dacioConf(DacioConfInfo *dcp)
 {
-    int tmp;
+    struct sio_par par;
 
-#if 0
-    if (ioctl(fd, SNDCTL_DSP_RESET) < 0) {
-	perror("dacioConf");
-	exit(1);
-    }
-#endif
-    tmp = AFMT_U8;
-    if (ioctl(fd, SNDCTL_DSP_SETFMT, &tmp) < 0) {
-	perror("dacioConf");
-	exit(1);
-    }
-    /*fprintf(stderr, "fmt = 0x%x\n", tmp);*/
+    sio_initpar(&par);
+    par.bits = 8;
+    par.sig = 0;
+    par.pchan = dcp->stereo + 1;
+    par.rate = dcp->speed;
 
-    if (ioctl(fd, SNDCTL_DSP_STEREO, &dcp->stereo) < 0) {
-	perror("dacioConf");
+    if (!sio_setpar(hdl, &par) || !sio_getpar(hdl, &par)) {
+	fprintf(stderr, "dacioConf failed: set/get\n");
 	exit(1);
     }
-    /*fprintf(stderr, "stereo = %d\n", dcp->stereo);*/
 
-    if (ioctl(fd, SNDCTL_DSP_SPEED, &dcp->speed) < 0) {
-	perror("dacioConf");
+    if (par.bits != 8 || par.sig != 0 || par.pchan != dcp->stereo + 1 ||
+      par.rate != dcp->speed) {
+	fprintf(stderr, "dacioConf failed: inappropriate settings\n");
 	exit(1);
     }
-    /*fprintf(stderr, "speed = %d\n", dcp->speed);*/
 
-    if (ioctl(fd, SNDCTL_DSP_GETBLKSIZE, &buf.size) < 0) {
-	perror("dacioConf");
-	exit(1);
-    }
-    /*fprintf(stderr, "buffer size = 0x%x\n", buf.size);*/
+    buf.size = par.round * par.bps * par.pchan;
+
     dci = *dcp;
     /*if (buf.top != NULL) free(buf.top);*/
     buf.top = memPerm(buf.size * sizeof(u8));
     buf.p.p8 = buf.top;
     buf.bot = buf.top + buf.size;
+
+    if (!sio_start(hdl)) {
+	fprintf(stderr, "dacioConf failed: couldn't start\n");
+	exit(1);
+    }
 }
 
 void
 dacioSync(void)
 {
-    if (ioctl(fd, SNDCTL_DSP_SYNC, NULL) < 0) {
-	perror("dacioSync");
-	exit(1);
-    }
 }
 
 /* OS independent part (?) */
@@@@ -116,12 +100,10 @@@@ dacioFlush(void)
 
     if (buf.p.p8 <= buf.top) return;
     for ( ; buf.p.p8 < buf.bot; buf.p.p8++) *buf.p.p8 = 128;
- RETRY:
-    s = write(fd, buf.top, buf.size);
+    s = sio_write(hdl, buf.top, buf.size);
     if (s < buf.size) {
-	if (s < 0) {
-	    if (errno == EINTR) goto RETRY;
-	    perror("dacioFlush");
+	if (s == 0) {
+	    fprintf(stderr, "dacioFlush: write failed\n");
 	} else fprintf(stderr, "wrote only %d bytes\n", s);
 	exit(1);
     }
@


1.1
log
@- use our naming scheme for patches
@
text
@d1 9
a9 6
$OpenBSD$
--- dacio-linux.c.orig	Sun Sep 17 14:51:43 1995
+++ dacio-linux.c	Fri Oct 26 22:12:40 2007
@@@@ -3,7 +3,11 @@@@
 #include <fcntl.h>	/*O_WRONLY*/
 #include <sys/ioctl.h>	/*(ioctl)*/
d11 3
a13 6
+#if defined(LINUX)
 #include <sys/soundcard.h> /*SNDCTL_XXX*/
+#else
+#include <soundcard.h>
+#endif
 #include <errno.h>	/*EINTR*/
d16 21
a36 10
@@@@ -47,7 +51,7 @@@@ dacioInit(void)
 static struct {
     union {
 	u8 *p8;
-	u16 *p16;
+	i15 *p16;
     } p;
     u8 *top;
     u8 *bot;
@@@@ -67,11 +71,39 @@@@ dacioConf(DacioConfInfo *dcp)
d39 14
a52 1
 #endif
d54 15
a68 15
+    switch (dcp->bits) {
+    case 0:
+    case 8:
+	dcp->bits = 8;
+	tmp = AFMT_U8; break;
+    case 16:
+	tmp = AFMT_S16_LE; break;
+    default:
+	fprintf(stderr, "Don't know how to handle %d bit output.\n", dcp->bits);
+	exit(1);
+	break;
+    }
+
     if (ioctl(fd, SNDCTL_DSP_SETFMT, &tmp) < 0) {
 	perror("dacioConf");
d71 1
a71 17
+
+    switch (tmp) {
+    case AFMT_U8:
+	if (dcp->bits != 8) {
+	    fprintf(stderr, "soundcard doesn't support 8bits.\n");
+	    exit(1);
+	}
+	break;
+    case AFMT_S16_LE:
+	if (dcp->bits != 16) {
+	    fprintf(stderr, "soundcard doesn't support 16bits.\n");
+	    exit(1);
+	}
+	break;
+    }
+
     /*fprintf(stderr, "fmt = 0x%x\n", tmp);*/
d73 5
a77 3
     if (ioctl(fd, SNDCTL_DSP_STEREO, &dcp->stereo) < 0) {
@@@@ -90,10 +122,15 @@@@ dacioConf(DacioConfInfo *dcp)
 	perror("dacioConf");
d80 9
a88 6
+    /*fprintf(stderr, "sound buffer size = 0x%x\n", buf.size);*/
+    tmp = buf.size;
+    while (tmp <= (0.1 * (dcp->speed * (dcp->stereo+1) * (dcp->bits/8))))
+	tmp += buf.size;
+    buf.size = tmp;
     /*fprintf(stderr, "buffer size = 0x%x\n", buf.size);*/
d91 1
a91 2
-    buf.top = memPerm(buf.size * sizeof(u8));
+    buf.top = memPerm(buf.size);
d94 4
a97 13
 }
@@@@ -115,7 +152,14 @@@@ dacioFlush(void)
     int s;
 
     if (buf.p.p8 <= buf.top) return;
-    for ( ; buf.p.p8 < buf.bot; buf.p.p8++) *buf.p.p8 = 128;
+    switch (dci.bits) {
+    case 8:
+	for ( ; buf.p.p8 < buf.bot; buf.p.p8++) *buf.p.p8 = 128;
+	break;
+    case 16:
+	for ( ; buf.p.p8 < buf.bot; buf.p.p16++) *buf.p.p16 = 0;
+	break;
a98 41
  RETRY:
     s = write(fd, buf.top, buf.size);
     if (s < buf.size) {
@@@@ -179,6 +223,8 @@@@ dacioGlobalVol(i15x v)
      (tmpvar & ~255)? ~tmpvar >> 16 : tmpvar ) /* 16 will be OK */
 /*                   ~(tmpvar >> 16) makes longer asm */
 #endif
+#define to16bit(x) \
+	(((x) * gv) >> 12)
 
 /* stereo */
 static void
@@@@ -186,14 +232,26 @@@@ dacioOutHirevS(i15x n)
 {
     const i31 *inbufp = inbuf.p;
     u8 *u8p = buf.p.p8;
+    i15 *s15p = buf.p.p16;
 
-    for (; n > 0; n--) {
-	i31x tmp;
-	*u8p++ = to8bit(*inbufp++, tmp); /* L */
-	*u8p++ = to8bit(*inbufp++, tmp); /* R */
+    switch (dci.bits) {
+    case 8:
+	for (; n > 0; n--) {
+	    i31x tmp;
+	    *u8p++ = to8bit(*inbufp++, tmp); /* L */
+	    *u8p++ = to8bit(*inbufp++, tmp); /* R */
+	}
+	buf.p.p8 = u8p;
+	break;
+    case 16:
+	for (; n > 0; n--) {
+	    *s15p++ = to16bit(*inbufp++); /* L */
+	    *s15p++ = to16bit(*inbufp++); /* R */
+	} 
+	buf.p.p16 = s15p;
+	break;
     }
     inbuf.p = inbufp;
-    buf.p.p8 = u8p;
d101 2
a102 2
 /* mono */
@@@@ -202,19 +260,31 @@@@ dacioOutHirevM(i15x n)
d104 4
a107 27
     const i31 *inbufp = inbuf.p;
     u8 *u8p = buf.p.p8;
+    i15 *s16p = buf.p.p16;
 
-    for (; n > 0; n--) {
-	i31x tmp;
-	*u8p++ = to8bit(*inbufp, tmp);
-	inbufp += 2;
+    switch (dci.bits) {
+    case 8:
+	for (; n > 0; n--) {
+	    i31x tmp;
+	    *u8p++ = to8bit(*inbufp, tmp);
+	    inbufp += 2;
+	}
+	buf.p.p8 = u8p;
+	break;
+    case 16:
+	for (; n > 0; n--) {
+	    *s16p++ = to16bit(*inbufp);
+	    inbufp += 2;
+	}
+	buf.p.p16 = s16p;
+	break;
     }
     inbuf.p = inbufp;
-    buf.p.p8 = u8p;
d110 2
a111 4
 #define dacioOutHirev(x) \
     if (dci.stereo) dacioOutHirevS(x); else dacioOutHirevM(x)
-#define bufRest() (dci.stereo? (buf.bot - buf.p.p8)/2 : buf.bot - buf.p.p8)
+#define bufRest() ((dci.stereo? (buf.bot - buf.p.p8)/2 : buf.bot - buf.p.p8)/(dci.bits/8))
d113 14
a126 2
 void
 dacioOut(void)
@

