head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.36
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.32
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.34
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.30
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.28
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.26
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.24
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.22
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.20
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.18
	OPENBSD_5_0:1.3.0.16
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.14
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.12
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.10
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.6
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.4
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.2
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.2.0.22
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.20
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.18
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.1.1.1.0.8
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.6
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.4
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.2
	OPENBSD_2_8_BASE:1.1.1.1
	espie:1.1.1.1
	a7r:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2007.10.27.15.01.53;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2002.09.16.13.35.52;	author lebel;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.21.16.07.20;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.09.21.16.07.20;	author espie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@sequential build of library/shared library unmesses parallel builds...
regen patches while there.
@
text
@$OpenBSD: patch-interface_cooked_interface_c,v 1.2 2002/09/16 13:35:52 lebel Exp $
--- interface/cooked_interface.c.orig	Thu Apr 20 00:41:04 2000
+++ interface/cooked_interface.c	Sat Oct 27 16:57:49 2007
@@@@ -13,6 +13,7 @@@@
 static int cooked_readtoc (cdrom_drive *d){
   int i;
   int tracks;
+#ifdef __linux__
   struct cdrom_tochdr hdr;
   struct cdrom_tocentry entry;
 
@@@@ -52,6 +53,45 @@@@ static int cooked_readtoc (cdrom_drive *d){
   d->disc_toc[i].dwStartSector = entry.cdte_addr.lba;
 
   tracks=hdr.cdth_trk1+1;
+#endif
+
+#if defined (__NetBSD__) || defined (__OpenBSD__)
+  struct ioc_read_toc_entry hdr;
+  struct cd_toc_entry entries[MAXTRK + 1];	/* + 1 for leadout */
+
+  hdr.address_format = CD_LBA_FORMAT;
+  hdr.starting_track = 1;
+  hdr.data_len = sizeof entries;
+  hdr.data = entries;
+  memset(entries, 0, sizeof entries);
+
+  /* get all TOC entries at once */
+#ifndef CDIOREADTOCENTRIES
+#define CDIOREADTOCENTRIES CDIOREADTOCENTRYS
+#endif
+  if(ioctl(d->ioctl_fd, CDIOREADTOCENTRIES, &hdr))
+    switch(errno){
+    case EPERM:
+      cderror(d,"102: Permision denied on cdrom (ioctl) device\n");
+      return(-102);
+    default:
+      cderror(d,"004: Unable to read table of contents header\n");
+      return(-4);
+    }
+
+  for(i = 0; i < MAXTRK + 1; i++) {
+    d->disc_toc[i].bFlags = (entries[i].addr_type << 4) | (entries[i].control & 0x0f);
+    d->disc_toc[i].bTrack = entries[i].track;
+    d->disc_toc[i].dwStartSector = entries[i].addr.lba;
+    if (entries[i].track == 0) {
+      cderror(d,"005: Unable to read table of contents entry\n");
+      return(-5);
+    }
+    if (entries[i].track >= 100)
+      break;	/* leadout */
+  }
+  tracks = i;
+#endif
   d->cd_extra=FixupTOC(d,tracks);
   return(--tracks);  /* without lead-out */
 }
@@@@ -60,10 +100,14 @@@@ static int cooked_readtoc (cdrom_drive *d){
 /* Set operating speed */
 static int cooked_setspeed(cdrom_drive *d, int speed)
 {
+#ifdef __linux__
   if(d->ioctl_fd!=-1)
     return ioctl(d->ioctl_fd, CDROM_SELECT_SPEED, speed);
   else
     return 0;
+#else
+  errx(1, "cooked_setspeed: not implemented");
+#endif
 }
 
 
@@@@ -72,6 +116,7 @@@@ static int cooked_setspeed(cdrom_drive *d, int speed)
  */
 
 static long cooked_read (cdrom_drive *d, void *p, long begin, long sectors){
+#ifdef __linux__
   int retry_count,err;
   struct cdrom_read_audio arg;
   char *buffer=(char *)p;
@@@@ -127,6 +172,9 @@@@ static long cooked_read (cdrom_drive *d, void *p, long
   } while (err);
   
   return(sectors);
+#else
+  errx(1, "cooked_read: not implemented");
+#endif
 }
 
 /* hook */
@@@@ -191,6 +239,7 @@@@ static void check_exceptions(cdrom_drive *d,exception 
 
 /* set function pointers to use the ioctl routines */
 int cooked_init_drive (cdrom_drive *d){
+#ifdef __linux__
   int ret;
 
   switch(d->drive_type){
@@@@ -255,5 +304,8 @@@@ int cooked_init_drive (cdrom_drive *d){
   if((ret=verify_read_command(d)))return(ret);
   d->error_retry=1;
   return(0);
+#else
+  errx(1, "cooked_init_drive: not implemented");
+#endif
 }
 
@


1.2
log
@update audio/cdparanoia to 3.a9.8;
from Bjorn Sandell <biorn@@dce.chalmers.se> and from NetBSD
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ interface/cooked_interface.c	Mon Sep 16 12:47:11 2002
d12 1
a12 1
@@@@ -52,6 +53,45 @@@@ static int cooked_readtoc (cdrom_drive *
d58 1
a58 1
@@@@ -60,10 +100,14 @@@@ static int cooked_readtoc (cdrom_drive *
d73 1
a73 1
@@@@ -72,6 +116,7 @@@@ static int cooked_setspeed(cdrom_drive *
d81 1
a81 1
@@@@ -127,6 +172,9 @@@@ static long cooked_read (cdrom_drive *d,
d91 1
a91 1
@@@@ -191,6 +239,7 @@@@ static void check_exceptions(cdrom_drive
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
--- interface/cooked_interface.c.orig	Tue Sep 19 16:19:14 2000
+++ interface/cooked_interface.c	Tue Sep 19 16:16:33 2000
d18 1
a18 1
+#ifdef __NetBSD__
d58 1
a58 1
@@@@ -60,10 +100,15 @@@@ static int cooked_readtoc (cdrom_drive *
d67 1
a67 2
+#endif
+#ifdef __NetBSD__
d73 1
a73 1
@@@@ -72,6 +117,7 @@@@ static int cooked_setspeed(cdrom_drive *
d81 1
a81 1
@@@@ -127,6 +173,10 @@@@ static long cooked_read (cdrom_drive *d,
d85 1
a85 2
+#endif
+#ifdef __NetBSD__
d91 1
a91 1
@@@@ -191,6 +241,7 @@@@ static void check_exceptions(cdrom_drive
d99 1
a99 1
@@@@ -255,5 +306,9 @@@@ int cooked_init_drive (cdrom_drive *d){
d103 1
a103 2
+#endif
+#ifdef __NetBSD__
@


1.1.1.1
log
@Based on the NetBSD port, initially brought to Open by
Alexander S . Guy.

Some minor packaging tweaks.

Uses cd0c by default, as this is the most likely place for a CD-Rom drive.
@
text
@@
