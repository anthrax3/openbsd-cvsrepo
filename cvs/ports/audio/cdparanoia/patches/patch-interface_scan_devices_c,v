head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.38
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.36
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.32
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.34
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.30
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.28
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.26
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.24
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.22
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.20
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.18
	OPENBSD_5_0:1.5.0.16
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.14
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.12
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.10
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.8
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.6
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.4
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.2
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.14
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.12
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.10
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.4
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.2
	OPENBSD_2_8_BASE:1.1.1.1
	espie:1.1.1.1
	a7r:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2007.10.27.15.01.53;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.23.06.29.38;	author jakemsr;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.16.13.35.52;	author lebel;	state Exp;
branches;
next	1.2;

1.2
date	2001.08.25.11.19.25;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.21.16.07.21;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.09.21.16.07.21;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@sequential build of library/shared library unmesses parallel builds...
regen patches while there.
@
text
@$OpenBSD: patch-interface_scan_devices_c,v 1.4 2005/12/23 06:29:38 jakemsr Exp $
--- interface/scan_devices.c.orig	Mon Mar 26 07:44:01 2001
+++ interface/scan_devices.c	Sat Oct 27 16:57:49 2007
@@@@ -19,6 +19,8 @@@@
 #include "common_interface.h"
 #include "utils.h"
 
+#ifdef __linux__
+
 #define MAX_DEV_LEN 20 /* Safe because strings only come from below */
 /* must be absolute paths! */
 static char *scsi_cdrom_prefixes[]={
@@@@ -50,9 +52,16 @@@@ static char *cdrom_devices[]={
   "/dev/gscd",
   "/dev/optcd",NULL};
 
+#endif
+#ifdef __OpenBSD__
+static char *cdrom_devices[]={"/dev/cdrom", "/dev/cd?c", "/dev/mcd?c",
+                              "/dev/acd?c", NULL };
+#endif
+
 /* Functions here look for a cdrom drive; full init of a drive type
    happens in interface.c */
 
+#if defined(__linux__) || defined(__OpenBSD__)
 cdrom_drive *cdda_find_a_cdrom(int messagedest,char **messages){
   /* Brute force... */
   
@@@@ -71,14 +80,16 @@@@ cdrom_drive *cdda_find_a_cdrom(int messagedest,char **
 
 	/* number, then letter */
 	
-	buffer[pos-(cdrom_devices[i])]=j+48;
+	buffer[pos-(cdrom_devices[i])]=j+'0';
 	if((d=cdda_identify(buffer,messagedest,messages)))
 	  return(d);
 	idmessage(messagedest,messages,"",NULL);
-	buffer[pos-(cdrom_devices[i])]=j+97;
+#ifdef __linux__
+	buffer[pos-(cdrom_devices[i])]=j+'a';
 	if((d=cdda_identify(buffer,messagedest,messages)))
 	  return(d);
 	idmessage(messagedest,messages,"",NULL);
+#endif
       }
     }else{
       /* Name.  Go for it. */
@@@@ -98,6 +109,7 @@@@ cdrom_drive *cdda_find_a_cdrom(int messagedest,char **
   }
   return(NULL);
 }
+#endif	/* __linux__ */
 
 cdrom_drive *cdda_identify(const char *device, int messagedest,char **messages){
   struct stat st;
@@@@ -146,6 +158,9 @@@@ char *test_resolve_symlink(const char *file,int messag
 cdrom_drive *cdda_identify_cooked(const char *dev, int messagedest,
 				  char **messages){
 
+#ifdef __OpenBSD__
+	return cdda_identify_scsi(dev, dev, messagedest, messages);
+#else
   cdrom_drive *d=NULL;
   struct stat st;
   int fd=-1;
@@@@ -273,6 +288,7 @@@@ cdrom_drive *cdda_identify_cooked(const char *dev, int
   idmessage(messagedest,messages,"\t\tCDROM sensed: %s\n",description);
   
   return(d);
+#endif
 }
 
 struct  sg_id {
@@@@ -289,12 +305,18 @@@@ typedef struct scsiid{
 /* Even *this* isn't as simple as it bloody well should be :-P */
 /* SG has an easy interface, but SCSI overall does not */
 static int get_scsi_id(int fd, scsiid *id){
+#ifdef __linux__
   struct sg_id argid;
+#endif
+#if defined (__NetBSD__) || defined (__OpenBSD__)
+  struct scsi_addr argid;
+#endif
   int busarg;
 
   /* get the host/id/lun */
 
   if(fd==-1)return(-1);
+#ifdef __linux__
   if(ioctl(fd,SCSI_IOCTL_GET_IDLUN,&argid))return(-1);
   id->bus=argid.l2; /* for now */
   id->id=argid.l1&0xff;
@@@@ -302,6 +324,18 @@@@ static int get_scsi_id(int fd, scsiid *id){
 
   if(ioctl(fd,SCSI_IOCTL_GET_BUS_NUMBER,&busarg)==0)
     id->bus=busarg;
+#endif
+#if defined (__NetBSD__) || defined (__OpenBSD__)
+#ifdef __NetBSD__
+#define ARGID argid.addr.scsi
+#else 
+#define ARGID argid
+#endif
+  if(ioctl(fd,SCIOCIDENTIFY,&argid))return(-1);
+  id->bus=ARGID.scbus;
+  id->id=ARGID.target;
+  id->lun=ARGID.lun;
+#endif
   
   return(0);
 }
@@@@ -401,6 +435,7 @@@@ void strscat(char *a,char *b,int n){
   strcat(a," ");
 }
 
+#ifdef __linux__
 /* At this point, we're going to punt compatability before SG2, and
    allow only SG2 and SG3 */
 static int verify_SG_version(cdrom_drive *d,int messagedest,
@@@@ -430,6 +465,7 @@@@ static int verify_SG_version(cdrom_drive *d,int messag
   idmessage(messagedest,messages,buffer,"");
   return(major);
 }
+#endif
 
 cdrom_drive *cdda_identify_scsi(const char *generic_device, 
 				const char *ioctl_device, int messagedest,
@@@@ -460,6 +496,7 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
 	       generic_device);
       return(NULL);
     }
+#ifdef __linux__
     if((int)(g_st.st_rdev>>8)!=SCSI_GENERIC_MAJOR){
       if((int)(g_st.st_rdev>>8)!=SCSI_CDROM_MAJOR){
 	idmessage(messagedest,messages,"\t\t%s is not a SCSI device",
@@@@ -471,6 +508,7 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
 	ioctl_device=temp;
       }
     }
+#endif
   }
   if(ioctl_device){
     if(stat(ioctl_device,&i_st)){
@@@@ -478,6 +516,7 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
 	       ioctl_device);
       return(NULL);
     }
+#ifdef __linux__
     if((int)(i_st.st_rdev>>8)!=SCSI_CDROM_MAJOR){
       if((int)(i_st.st_rdev>>8)!=SCSI_GENERIC_MAJOR){
 	idmessage(messagedest,messages,"\t\t%s is not a SCSI device",
@@@@ -489,6 +528,7 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
 	ioctl_device=temp;
       }
     }
+#endif
   }
 
   /* we need to resolve any symlinks for the lookup code to work */
@@@@ -505,6 +545,7 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
   }
 
   if(!generic_device || !ioctl_device){
+#ifdef __linux__
     if(generic_device){
       ioctl_device=
 	scsi_match(generic_device,scsi_cdrom_prefixes,
@@@@ -520,6 +561,9 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
       if(!generic_device)	
 	goto cdda_identify_scsi_fail;
     }
+#else
+    goto cdda_identify_scsi_fail;
+#endif
   }
   
   idmessage(messagedest,messages,"\t\tgeneric device: %s",generic_device);
@@@@ -535,7 +579,7 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
   }
 
   if(ioctl_device)i_fd=open(ioctl_device,O_RDONLY|O_NONBLOCK);
-  g_fd=open(generic_device,O_RDWR);
+  g_fd=open(generic_device,O_RDONLY);
   
   if(ioctl_device && i_fd==-1)
     idperror(messagedest,messages,"\t\tCould not open SCSI cdrom device "
@@@@ -556,6 +600,7 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
 
     type=(int)(i_st.st_rdev>>8);
 
+#ifdef __linux__
     if(type==SCSI_CDROM_MAJOR){
       if (!S_ISBLK(i_st.st_mode)) {
 	idmessage(messagedest,messages,"\t\tSCSI CDROM device %s not a "
@@@@ -567,8 +612,10 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
 		"major number",ioctl_device);
       goto cdda_identify_scsi_fail;
     }
+#endif
   }
 
+#ifdef __linux__
   if((int)(g_st.st_rdev>>8)==SCSI_GENERIC_MAJOR){
     if (!S_ISCHR(g_st.st_mode)) {
       idmessage(messagedest,messages,"\t\tGeneric SCSI device %s not a "
@@@@ -580,6 +627,7 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
 	      "major number",generic_device);
     goto cdda_identify_scsi_fail;
   }
+#endif
   
 
   d=calloc(1,sizeof(cdrom_drive));
@@@@ -590,6 +638,7 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
   d->bigendianp=-1; /* We don't know yet... */
   d->nsectors=-1;
 
+#ifdef __linux__
   version=verify_SG_version(d,messagedest,messages);
   switch(version){
   case -1:case 0:case 1:
@@@@ -599,6 +648,9 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
     d->interface=GENERIC_SCSI;
     break;
   }
+#else
+  d->interface=GENERIC_SCSI;
+#endif
 
   /* malloc our big buffer for scsi commands */
   d->sg=malloc(MAX_BIG_BUFF_SIZE);
@@@@ -617,7 +669,16 @@@@ cdrom_drive *cdda_identify_scsi(const char *generic_de
 
   /* It would seem some TOSHIBA CDROMs gets things wrong */
  
-  if (!strncmp (p + 8, "TOSHIBA", 7) &&
+#ifndef TYPE_DISK
+#define TYPE_DISK	0	/* direct */
+#endif
+#ifndef TYPE_WORM
+#define TYPE_WORM	4	/* write once, read many */
+#endif
+#ifndef TYPE_ROM
+#define TYPE_ROM	5	/* CD-ROM */
+#endif
+  if (p && !strncmp (p + 8, "TOSHIBA", 7) &&
       !strncmp (p + 16, "CD-ROM", 6) &&
       p[0] == TYPE_DISK) {
     p[0] = TYPE_ROM;
@


1.4
log
@- open the CD device with read only permissions.
- pkgname bumped.

ok steven@@
@
text
@d1 3
a3 3
$OpenBSD: patch-interface_scan_devices_c,v 1.3 2002/09/16 13:35:52 lebel Exp $
--- interface/scan_devices.c.orig	Sun Mar 25 21:44:01 2001
+++ interface/scan_devices.c	Thu Dec 22 00:36:43 2005
d30 1
a30 1
@@@@ -71,14 +80,16 @@@@ cdrom_drive *cdda_find_a_cdrom(int messa
d49 1
a49 1
@@@@ -98,6 +109,7 @@@@ cdrom_drive *cdda_find_a_cdrom(int messa
d57 1
a57 1
@@@@ -146,6 +158,9 @@@@ char *test_resolve_symlink(const char *f
d67 1
a67 1
@@@@ -273,6 +288,7 @@@@ cdrom_drive *cdda_identify_cooked(const 
d94 1
a94 1
@@@@ -302,6 +324,18 @@@@ static int get_scsi_id(int fd, scsiid *i
d121 1
a121 1
@@@@ -430,6 +465,7 @@@@ static int verify_SG_version(cdrom_drive
d129 1
a129 1
@@@@ -460,6 +496,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d137 1
a137 1
@@@@ -471,6 +508,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d145 1
a145 1
@@@@ -478,6 +516,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d153 1
a153 1
@@@@ -489,6 +528,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d161 1
a161 1
@@@@ -505,6 +545,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d169 1
a169 1
@@@@ -520,6 +561,9 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d179 1
a179 1
@@@@ -535,7 +579,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d188 1
a188 1
@@@@ -556,6 +600,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d196 1
a196 1
@@@@ -567,8 +612,10 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d207 1
a207 1
@@@@ -580,6 +627,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d215 1
a215 1
@@@@ -590,6 +638,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d223 1
a223 1
@@@@ -599,6 +648,9 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d233 1
a233 1
@@@@ -617,7 +669,16 @@@@ cdrom_drive *cdda_identify_scsi(const ch
@


1.3
log
@update audio/cdparanoia to 3.a9.8;
from Bjorn Sandell <biorn@@dce.chalmers.se> and from NetBSD
@
text
@d1 3
a3 3
$OpenBSD: patch-interface_scan_devices_c,v 1.2 2001/08/25 11:19:25 espie Exp $
--- interface/scan_devices.c.orig	Mon Mar 26 07:44:01 2001
+++ interface/scan_devices.c	Mon Sep 16 13:05:57 2002
d179 9
@


1.2
log
@Repair part of the library. Reroute find_cooked to find_scsi since OpenBSD
always uses SCSI interface. Remove corresponding kludge :-P in main.c
@
text
@d1 4
a4 4
$OpenBSD: patch-interface_scan_devices_c,v 1.1.1.1 2000/09/21 16:07:21 espie Exp $
--- interface/scan_devices.c.orig	Tue Dec 14 08:30:23 1999
+++ interface/scan_devices.c	Sat Aug 25 13:02:45 2001
@@@@ -17,6 +17,8 @@@@
d12 5
a16 5
 static char *scsi_cdrom_prefixes[3]={"/dev/scd","/dev/sr",NULL};
@@@@ -28,10 +30,16 @@@@ static char *cdrom_devices[14]={"/dev/cd
 				/* "/dev/aztcd", timeout is too long */
 				"/dev/cm206cd",
 				"/dev/gscd","/dev/optcd",NULL};
d20 1
a20 1
+				"/dev/acd?c", NULL };
d22 1
a22 1
 
d26 1
a26 1
+#if defined(__linux__) || defined(__OpenBSD__) || defined(__NetBSD__)
d30 1
a30 1
@@@@ -50,14 +58,16 @@@@ cdrom_drive *cdda_find_a_cdrom(int messa
d49 1
a49 1
@@@@ -78,6 +88,7 @@@@ cdrom_drive *cdda_find_a_cdrom(int messa
d57 1
a57 1
@@@@ -143,6 +154,9 @@@@ char *test_resolve_symlink(const char *f
d67 1
a67 1
@@@@ -270,6 +284,7 @@@@ cdrom_drive *cdda_identify_cooked(const 
d75 1
a75 2
@@@@ -289,12 +304,18 @@@@ typedef struct scsiid{
 
d77 1
d82 1
a82 1
+#ifdef __NetBSD__
d94 1
a94 1
@@@@ -302,6 +323,13 @@@@ static int get_scsi_id(int fd, scsiid *i
d99 1
d101 4
d106 3
a108 3
+  id->bus=argid.addr.scsi.scbus;
+  id->id=argid.addr.scsi.target;
+  id->lun=argid.addr.scsi.lun;
d113 17
a129 1
@@@@ -410,6 +438,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d137 1
a137 1
@@@@ -421,6 +450,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d145 1
a145 1
@@@@ -428,6 +458,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d153 1
a153 1
@@@@ -439,6 +470,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d161 1
a161 1
@@@@ -455,6 +487,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d167 3
a169 3
       ioctl_device=scsi_match(generic_device,scsi_cdrom_prefixes,O_RDWR,
 			      O_RDONLY|O_NONBLOCK,
@@@@ -468,6 +501,9 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d179 1
a179 1
@@@@ -504,6 +540,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d187 1
a187 1
@@@@ -515,8 +552,10 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d198 1
a198 1
@@@@ -528,6 +567,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d204 1
d206 15
d222 3
a224 1
@@@@ -564,7 +604,16 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d226 1
a226 1
   /* It would seem some TOSHIBA CDROM gets things wrong */
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
d3 1
a3 1
+++ interface/scan_devices.c	Thu Sep 21 17:19:18 2000
d26 1
a26 1
+#if defined(__linux__) /* not OpenBSD yet */
d30 6
a35 1
@@@@ -54,10 +62,12 @@@@ cdrom_drive *cdda_find_a_cdrom(int messa
d39 1
d41 1
a41 1
 	buffer[pos-(cdrom_devices[i])]=j+97;
d49 1
a49 1
@@@@ -78,6 +88,15 @@@@ cdrom_drive *cdda_find_a_cdrom(int messa
a53 8
+
+#if defined(__NetBSD__) || defined(__OpenBSD__)
+cdrom_drive *cdda_find_a_cdrom(int messagedest,char **messages)
+{
+  errx(1, "cdda_find_a_cdrom: not implemented");
+  /* NOTREACHED */
+}
+#endif	/* __NetBSD__ || __OpenBSD__ */
d57 1
a57 1
@@@@ -143,6 +162,7 @@@@ char *test_resolve_symlink(const char *f
d61 3
a63 1
+#ifdef __linux__
d67 1
a67 1
@@@@ -270,6 +290,12 @@@@ cdrom_drive *cdda_identify_cooked(const 
a71 5
+
+#ifdef __NetBSD__
+  /* no kernel support for CD-DA */
+  return NULL;
+#endif
d75 1
a75 1
@@@@ -289,12 +315,18 @@@@ typedef struct scsiid{
d94 1
a94 1
@@@@ -302,6 +334,13 @@@@ static int get_scsi_id(int fd, scsiid *i
d108 1
a108 1
@@@@ -410,6 +449,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d116 1
a116 1
@@@@ -421,6 +461,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d124 1
a124 1
@@@@ -428,6 +469,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d132 1
a132 1
@@@@ -439,6 +481,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d140 1
a140 1
@@@@ -455,6 +498,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d148 1
a148 1
@@@@ -468,6 +512,9 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d158 1
a158 1
@@@@ -504,6 +551,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d166 1
a166 1
@@@@ -515,8 +563,10 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d177 1
a177 1
@@@@ -528,6 +578,7 @@@@ cdrom_drive *cdda_identify_scsi(const ch
d185 1
a185 1
@@@@ -564,7 +615,16 @@@@ cdrom_drive *cdda_identify_scsi(const ch
@


1.1.1.1
log
@Based on the NetBSD port, initially brought to Open by
Alexander S . Guy.

Some minor packaging tweaks.

Uses cd0c by default, as this is the most likely place for a CD-Rom drive.
@
text
@@
