head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.30
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.28
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.24
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.26
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.22
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.20
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.18
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.16
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.14
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.12
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.10
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.01.11.05.11.32;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@-update to hydrogen-0.9.4: bugfixes, qt3->qt4, code cleanup & file renaming
-add sndio audio and midi support, drop OSS audio support
- take maintainership
maintainer change suggested by grange@@ (former maintainer), ok ratchov@@
@
text
@$OpenBSD$
--- libs/hydrogen/src/preferences.cpp.orig	Wed Aug 26 05:12:27 2009
+++ libs/hydrogen/src/preferences.cpp	Sat Jan  2 03:22:38 2010
@@@@ -143,7 +143,7 @@@@ Preferences::Preferences()
 	m_patternCategories.push_back( QString("not_categorized") );
 
 	//___ audio engine properties ___
-	m_sAudioDriver = QString("Auto");
+	m_sAudioDriver = QString("SndioAudio");
 	m_bUseMetronome = false;
 	m_fMetronomeVolume = 0.5;
 	m_nMaxNotes = 256;
@@@@ -153,8 +153,11 @@@@ Preferences::Preferences()
 	//___ oss driver properties ___
 	m_sOSSDevice = QString("/dev/dsp");
 
+	//___ SndioAudio driver properties ___
+	m_sSndioDevice = QString("");
+
 	//___ MIDI Driver properties
-	m_sMidiDriver = QString("ALSA");
+	m_sMidiDriver = QString("SndioMidi");
 	m_sMidiPortName = QString("None");
 	m_nMidiChannelFilter = -1;
 	m_bMidiNoteOffIgnore = false;
@@@@ -423,6 +426,15 @@@@ void Preferences::loadPreferences( bool bGlobal )
 					m_sOSSDevice = LocalFileMng::readXmlString( ossDriverNode, "ossDevice", m_sOSSDevice );
 				}
 
+				//// SNDIO AUDIO DRIVER ////
+				TiXmlNode* sndioAudioDriverNode;
+				if ( !( sndioAudioDriverNode = audioEngineNode->FirstChild( "sndio_driver" ) ) ) {
+					WARNINGLOG( "sndio_driver node not found" );
+					recreate = true;
+				} else {
+					m_sSndioDevice = LocalFileMng::readXmlString( sndioAudioDriverNode, "sndioDevice", m_sSndioDevice );
+				}
+
 				//// JACK DRIVER ////
 				TiXmlNode* jackDriverNode;
 				if ( !( jackDriverNode = audioEngineNode->FirstChild( "jack_driver" ) ) ) {
@@@@ -469,7 +481,7 @@@@ void Preferences::loadPreferences( bool bGlobal )
 					WARNINGLOG( "midi_driver node not found" );
 					recreate = true;
 				} else {
-					m_sMidiDriver = LocalFileMng::readXmlString( midiDriverNode, "driverName", "ALSA" );
+					m_sMidiDriver = LocalFileMng::readXmlString( midiDriverNode, "driverName", "SndioMidi" );
 					m_sMidiPortName = LocalFileMng::readXmlString( midiDriverNode, "port_name", "None" );
 					m_nMidiChannelFilter = LocalFileMng::readXmlInt( midiDriverNode, "channel_filter", -1 );
 					m_bMidiNoteOffIgnore = LocalFileMng::readXmlBool( midiDriverNode, "ignore_note_off", true );
@@@@ -750,6 +762,13 @@@@ void Preferences::savePreferences()
 			LocalFileMng::writeXmlString( &ossDriverNode, "ossDevice", m_sOSSDevice );
 		}
 		audioEngineNode.InsertEndChild( ossDriverNode );
+
+		//// SNDIO DRIVER ////
+		TiXmlElement sndioAudioDriverNode( "sndio_driver" );
+		{
+			LocalFileMng::writeXmlString( &sndioAudioDriverNode, "sndioDevice", m_sSndioDevice );
+		}
+		audioEngineNode.InsertEndChild( sndioAudioDriverNode );
 
 		//// JACK DRIVER ////
 		TiXmlElement jackDriverNode( "jack_driver" );
@
