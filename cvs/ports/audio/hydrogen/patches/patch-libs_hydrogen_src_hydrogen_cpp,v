head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.32
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.30
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.28
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.24
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.26
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.22
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.20
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.18
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.16
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.14
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.12
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.10
	OPENBSD_5_0:1.1.0.8
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.6
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.4
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.2
	OPENBSD_4_7_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.01.11.05.11.32;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.1
log
@-update to hydrogen-0.9.4: bugfixes, qt3->qt4, code cleanup & file renaming
-add sndio audio and midi support, drop OSS audio support
- take maintainership
maintainer change suggested by grange@@ (former maintainer), ok ratchov@@
@
text
@$OpenBSD$
--- libs/hydrogen/src/hydrogen.cpp.orig	Wed Jul 22 20:36:28 2009
+++ libs/hydrogen/src/hydrogen.cpp	Fri Jan  1 16:35:38 2010
@@@@ -67,6 +67,8 @@@@
 #include <hydrogen/playlist.h>
 
 #include "IO/OssDriver.h"
+#include "IO/SndioAudioDriver.h"
+#include "IO/SndioMidiDriver.h"
 #include "IO/FakeDriver.h"
 #include "IO/AlsaAudioDriver.h"
 #include "IO/PortAudioDriver.h"
@@@@ -1492,6 +1494,12 @@@@ AudioOutput* createDriver( const QString& sDriver )
 			delete pDriver;
 			pDriver = NULL;
 		}
+	} else if ( sDriver == "SndioAudio" ) {
+		pDriver = new SndioAudioDriver( audioEngine_process );
+		if ( pDriver->get_class_name() == "NullDriver" ) {
+			delete pDriver;
+			pDriver = NULL;
+		}
 	} else if ( sDriver == "Jack" ) {
 		pDriver = new JackOutput( audioEngine_process );
 		if ( pDriver->get_class_name() == "NullDriver" ) {
@@@@ -1579,6 +1587,7 @@@@ void audioEngine_startAudioDrivers()
 	QString sAudioDriver = preferencesMng->m_sAudioDriver;
 //	sAudioDriver = "Auto";
 	if ( sAudioDriver == "Auto" ) {
+	    if ( ( m_pAudioDriver = createDriver( "SndioAudio" ) ) == NULL ) {
 		if ( ( m_pAudioDriver = createDriver( "Jack" ) ) == NULL ) {
 			if ( ( m_pAudioDriver = createDriver( "Alsa" ) ) == NULL ) {
 				if ( ( m_pAudioDriver = createDriver( "CoreAudio" ) ) == NULL ) {
@@@@ -1596,6 +1605,7 @@@@ void audioEngine_startAudioDrivers()
 				}
 			}
 		}
+	    }
 	} else {
 		m_pAudioDriver = createDriver( sAudioDriver );
 		if ( m_pAudioDriver == NULL ) {
@@@@ -1613,6 +1623,12 @@@@ void audioEngine_startAudioDrivers()
 #ifdef ALSA_SUPPORT
 		// Create MIDI driver
 		m_pMidiDriver = new AlsaMidiDriver();
+		m_pMidiDriver->open();
+		m_pMidiDriver->setActive( true );
+#endif
+	} else if ( preferencesMng->m_sMidiDriver == "SndioMidi" ) {
+#ifdef SNDIO_SUPPORT
+		m_pMidiDriver = new SndioMidiDriver();
 		m_pMidiDriver->open();
 		m_pMidiDriver->setActive( true );
 #endif
@
