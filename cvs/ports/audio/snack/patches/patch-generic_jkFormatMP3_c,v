head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.22
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.18
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.20
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.16
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.14
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.12
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.10
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.8
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.6
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.4
	OPENBSD_5_0:1.1.1.1.0.2
	OPENBSD_5_0_BASE:1.1.1.1
	sebastia_2011_03_12:1.1.1.1
	sebastia:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2011.03.12.08.53.52;	author sebastia;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2011.03.12.08.53.52;	author sebastia;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$

fix building without the patch, build stops with: 
/usr//include/math.h:321: error: expected declaration specifiers or '...' before '(' token
/usr//include/math.h:321: error: conflicting types for 'floor'

--- generic/jkFormatMP3.c.orig	Wed Dec 14 12:29:38 2005
+++ generic/jkFormatMP3.c	Sat Jul 17 14:46:23 2010
@@@@ -31,7 +31,7 @@@@ must retain this copyright notice.
 #include <string.h>
 #define FRAS2(is,a) ((is) > 0 ? t_43[(is)]*(a):-t_43[-(is)]*(a))
 #define MAXFRAMESIZE 2106  /* frame size starting at header */
-#define roundf(x) (floor((x)+(float )0.5f))
+#define roundF(x) (floor((x)+(float )0.5f))
 static char *gblOutputbuf;
 static char *gblReadbuf;
 static int gblBufind = 0;
@@@@ -3304,7 +3304,7 @@@@ int
             /* Enough info to compute average VBR bitrate and framesize*/
             if ( xFrames > 0 && xBytes > 0 && (head_flags & (BYTES_FLAG | FRAMES_FLAG))) {
                float fAvgFrameSize = (float)xBytes/(float)xFrames;
-               xAvgFrameSize =  (int)roundf(fAvgFrameSize);
+               xAvgFrameSize =  (int)roundF(fAvgFrameSize);
                xAvgBitrate =  (int)(fAvgFrameSize * (float)fs/(float)sr_lookup[Si->id]);   /* Layer 1 */
             }
          }
@@@@ -3432,7 +3432,7 @@@@ int
       totalFrames = xFrames;
       mean_frame_size = xAvgFrameSize;
    } else {
-      mean_frame_size = (int)roundf(tailAverage);
+      mean_frame_size = (int)roundF(tailAverage);
    }
    Si->bytesPerFrame = mean_frame_size;
    Si->bitrate = bitrate*1000;
@


1.1.1.1
log
@import snack: Tcl/Tk snack sound toolkit, and its python bindings

The Snack Sound Toolkit is designed to be used with a scripting language
such as Tcl/Tk or Python.  Snack has commands for basic sound handling,
such as playback, recording, file and socket I/O.  Snack also provides
primitives for sound visualization, e.g. waveforms and spectrograms.  It
was developed mainly to handle digital recordings of speech, but is just
as useful for general audio.  Snack has also successfully been applied
to other one-dimensional signals.

thanks to jakemsr@@ for making my unsuccessful attempt to port it to sndio working.
many comments from stu@@, landry@@, ajacoutot@@

finally OK ajacoutot@@


@
text
@@
