head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.30
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.28
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.26
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.22
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.24
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.20
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.18
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.16
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.14
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.12
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.10
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.8
	OPENBSD_5_0:1.1.0.6
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.4
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.2
	OPENBSD_4_8_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2010.06.06.07.45.31;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@further fixes for gcc4 on LP64
@
text
@$OpenBSD$
--- speech_tools/include/EST_simplestats.h.orig	Sun Jun  6 09:33:27 2010
+++ speech_tools/include/EST_simplestats.h	Sun Jun  6 09:36:59 2010
@@@@ -193,7 +193,7 @@@@ enum EST_tprob_type {tprob_string, tprob_int, tprob_di
     Methods are provided to iterate over the values in a distribution,
     for example
     \begin{verbatim}
-       EST_DiscreteProbistribution pdf;
+       EST_DiscreteProbDistribution pdf;
        for (int i=pdf.item_start(); i < pdf.item_end(); i=pdf.item_next(i))
        {
           EST_String name;
@@@@ -265,17 +265,17 @@@@ class EST_DiscreteProbDistribution { (public)
     /// 
     double frequency(const int i) const; 
     /// Used for iterating through members of the distribution
-    int item_start() const;
+    long item_start() const;
     /// Used for iterating through members of the distribution
-    int item_next(int idx) const;
+    long item_next(long idx) const;
     /// Used for iterating through members of the distribution
-    int item_end(int idx) const;
+    long item_end(long idx) const;
     /// During iteration returns name given index 
-    const EST_String &item_name(int idx) const;
+    const EST_String &item_name(long idx) const;
     /// During iteration returns name and frequency given index  
-    void item_freq(int idx,EST_String &s,double &freq) const;
+    void item_freq(long idx,EST_String &s,double &freq) const;
     /// During iteration returns name and probability given index
-    void item_prob(int idx,EST_String &s,double &prob) const;
+    void item_prob(long idx,EST_String &s,double &prob) const;
 
     /// Returns discrete vocabulary of distribution
     inline const EST_Discrete *const get_discrete() const { return discrete; };
@
