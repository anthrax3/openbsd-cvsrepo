head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.30
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.28
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.24
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.26
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.22
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.20
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.18
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.16
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.14
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.12
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.10
	OPENBSD_5_0:1.2.0.8
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.6
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.1.0.24
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.22
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.20
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.18
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.16
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2010.01.11.07.51.26;	author jakemsr;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.01.19.18.19;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- update to mp3blaster-3.2.5
- add sndio audio to mp3blaster and splay programs
- implement nmixer as a generic midi volume controller, that defaults to
using the aucat:0 midi device
- stop using multiple threads for mpeg decoding.  they are poorly
implmented, just spinning and using all available cpu cycles

with feedback from naddy@@ and ratchov@@
@
text
@$OpenBSD$

ov_read() can return less than asked for.  get the full 4096 bytes
before continuing to save cycles and avoid confusion elsewhere.

--- mpegsound/oggplayer.cc.orig	Tue Dec 22 05:08:01 2009
+++ mpegsound/oggplayer.cc	Thu Dec 24 14:20:44 2009
@@@@ -18,7 +18,11 @@@@ Oggplayer::Oggplayer(audiodriver_t driver)
 {
 	of = NULL;
 	wordsize = 2; //2 bytes
+#ifdef WORDS_BIGENDIAN
+	bigendian = 1;
+#else
 	bigendian = 0;
+#endif
 	signeddata = 1;
 	mono = 0;
 	downfreq = 0;
@@@@ -156,15 +160,23 @@@@ bool Oggplayer::playing()
 bool Oggplayer::run(int sec)
 {
 	int bitstream;
-	long bytes_read = ov_read(of, soundbuf, 4096, bigendian, wordsize, signeddata,
-		&bitstream);
 
-	if (sec); //prevent warning
+	long bytes_read, ret;
 
-	if (bytes_read < 0)
-		return seterrorcode(SOUND_ERROR_BAD);
+	bytes_read = 0;
+	while (bytes_read < 4096) {
+		ret = ov_read(of, soundbuf + bytes_read, 4096 - bytes_read,
+		    bigendian, wordsize, signeddata, &bitstream);
+		if (ret < 0)
+			return seterrorcode(SOUND_ERROR_BAD);
+		if (!ret)
+			break;
+		bytes_read += ret;
+	}
 	if (!bytes_read)
 		return seterrorcode(SOUND_ERROR_FINISH);
+
+	if (sec); //prevent warning
 	
 	vorbis_info *vi = ov_info(of, bitstream);
 
@


1.1
log
@* Fix playing Ogg Vorbis files on big-endian archs.
* Maintenance update to 3.2.0.
@
text
@d2 47
a48 11
--- mpegsound/oggplayer.cc.orig	2003-12-01 20:00:37.000000000 +0100
+++ mpegsound/oggplayer.cc	2003-12-01 20:00:54.000000000 +0100
@@@@ -23,7 +23,7 @@@@ Oggplayer::Oggplayer()
 /* Martijn suggests that big endiannes is already taken care of in the rawplayer
  * class.
  */
-#if 0 && defined(WORDS_BIGENDIAN)
+#if defined(WORDS_BIGENDIAN)
 	bigendian = 1;
 #endif
 	//TODO: On what hardware is data unsigned, and how do I know?
@

