head	1.3;
access;
symbols
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9_TRACKING_SWITCH:1.2
	lebel-2001_May_18:1.1.1.1
	lebel:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2002.05.07.21.05.33;	author lebel;	state dead;
branches;
next	1.2;

1.2
date	2001.06.25.12.44.33;	author lebel;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.19.00.21.00;	author lebel;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.19.00.21.00;	author lebel;	state Exp;
branches;
next	;


desc
@@


1.3
log
@update audio/grip to 3.0.0
@
text
@$OpenBSD: patch-cd_c,v 1.2 2001/06/25 12:44:33 lebel Exp $
--- cd.c.orig	Mon Jun 25 08:35:29 2001
+++ cd.c	Mon Jun 25 08:35:35 2001
@@@@ -46,7 +46,7 @@@@
 #include <sys/cdio.h>
 #endif
 
-#if defined(__FreeBSD__)
+#if defined(__FreeBSD__) || defined(__OpenBSD__) 
     #define CDIOREADSUBCHANNEL CDIOCREADSUBCHANNEL
 #endif
 
@@@@ -55,6 +55,10 @@@@
 #include <io/cam/cdrom.h>
 #endif
 
+ /* for OS's that need to re-open the CD after a disc change */
+extern char cddevice[];
+extern int g_cd_desc;
+
 /* Initialize the CD-ROM for playing audio CDs */
 
 int CDInitDevice(char *device_name)
@@@@ -128,9 +132,28 @@@@ int CDStat(int cd_desc,struct disc_info 
 #ifdef CDIOREADTOCHEADER
   struct ioc_toc_header cdth;
 #endif
+  int ret;
 
   int readtracks,frame[MAX_TRACKS],pos;
-  int retcode;
+
+#ifdef __OpenBSD__		/* fix for disc info never updating */
+  if ((disc->disc_present == 0) && (cd_desc < 0)) {
+      if((cd_desc = g_cd_desc = open(cddevice, O_RDONLY
+# ifdef NON_BLOCKING
+			 | O_NONBLOCK
+# endif
+			 )) < 0){
+# ifdef DEBUG
+	  // fprintf(stderr, "open failed (%s)\n", cddevice);
+	  fprintf(stderr, "o");
+# endif
+	  return -1;
+      }
+# ifdef DEBUG
+      fprintf(stderr, "*");
+# endif
+  }
+#endif /* __OpenBSD__  fix for disc info never updating */
 
 #ifdef CDROM_DRIVE_STATUS
   retcode = ioctl(cd_desc, CDROM_DRIVE_STATUS, CDSL_CURRENT);
@@@@ -143,29 +166,41 @@@@ int CDStat(int cd_desc,struct disc_info 
     return -1;
 #endif
 
-#ifdef CDIOREADSUBCHANNEL
+#ifdef CDIOREADSUBCHANNEL	/* netbsd */
   bzero(&cdsc, sizeof(cdsc));
   cdsc.data = &data;
   cdsc.data_len = sizeof(data);
   cdsc.data_format = CD_CURRENT_POSITION;
   cdsc.address_format = CD_MSF_FORMAT;
    
-  if(ioctl(cd_desc, CDIOCREADSUBCHANNEL, (char *)&cdsc) < 0)
+  if((ret = ioctl(cd_desc, CDIOCREADSUBCHANNEL, (char *)&cdsc)) < 0)
 #endif
 #ifdef CDROM_READ_SUBCHANNEL
     sch.sch_data_format = CDROM_CURRENT_POSITION;
 
   sch.sch_address_format = CDROM_MSF_FORMAT;
+
+  g_message("CDIOCREADSUBCHANNEL %d %m", ret);
    
   if(ioctl(cd_desc, CDROM_READ_SUBCHANNEL, &sch) < 0)
 #endif
-#ifdef CDROMSUBCHNL
+#ifdef CDROMSUBCHNL		/* netbsd - w. no toc flag, new disc */
     cdsc.cdsc_format = CDROM_MSF;
 
-    if(ioctl(cd_desc, CDROMSUBCHNL, &cdsc) < 0)
+    errno = 0;
+
+    if((ret = ioctl(cd_desc, CDROMSUBCHNL, &cdsc)) < 0)
 #endif
       {
+	  /* errno 5 = EIO, 9 = BAD_FD */
+	  g_message("CDROMSUBCHNL %d %d", ret, errno);
 	disc->disc_present = 0;
+#ifdef __OpenBSD__		/* fix for disc info never updating */
+	if (cd_desc >= 0){
+	    close(cd_desc);
+	    g_cd_desc = -1;
+	}
+#endif /* __OpenBSD__  fix for disc info never updating */
 
 	return 0;
       }
@@@@ -177,6 +212,12 @@@@ int CDStat(int cd_desc,struct disc_info 
      (cdsc.cdsc_audiostatus<0x11||cdsc.cdsc_audiostatus>0x15))
     {
       disc->disc_present = 0;
+#ifdef __OpenBSD__		/* fix for disc info never updating */
+      if (cd_desc >= 0){
+	  close(cd_desc);
+	  g_cd_desc = -1;
+      }
+#endif /* __OpenBSD__  fix for disc info never updating */
 
       return 0;
     }
@@@@ -240,7 +281,7 @@@@ int CDStat(int cd_desc,struct disc_info 
 
     /* Read the Table Of Contents header */
 
-#ifdef CDIOREADTOCHEADER
+#ifdef CDIOREADTOCHEADER	/* netbsd */
     if(ioctl(cd_desc, CDIOREADTOCHEADER, (char *)&cdth) < 0) {
       printf("Error: Failed to read disc contents\n");
 
@@@@ -261,7 +302,7 @@@@ int CDStat(int cd_desc,struct disc_info 
     
     /* Read the table of contents */
     
-#ifdef CDIOREADTOCENTRYS
+#ifdef CDIOREADTOCENTRYS	/* netbsd */
     cdte.address_format = CD_MSF_FORMAT;
     cdte.starting_track = 0;
     cdte.data = toc_buffer;
@@@@ -547,6 +588,9 @@@@ int CDEject(int cd_desc)
     perror("CDIOCEJECT");
     return -1;
   }
+#ifdef __OpenBSD__
+  close( cd_desc );
+#endif
 #endif
 #ifdef CDROMEJECT
   if(ioctl(cd_desc, CDROMEJECT) < 0)
@


1.2
log
@Eject didn't work; turns out this was due to the fd never being
closed after doing an eject, something which caused the
tray to never eject until the program closed and the fd
was closed that way.

Fix provided by Nils Nordman <nino@@nforced.com>
@
text
@d1 1
a1 1
$OpenBSD: patch-cd_c,v 1.1.1.1 2001/05/19 00:21:00 lebel Exp $
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD: update-patches,v 1.4 2001/03/31 22:54:41 espie Exp $
--- cd.c.orig	Wed Oct 18 15:12:53 2000
+++ cd.c	Tue Apr 10 15:00:59 2001
d131 10
@


1.1.1.1
log
@initial import of grip 2.95:
--
Grip is a front-end to external cd audio rippers (such as dagrab
or cdda2wav). It also provides an automated frontend for MP3 encoders,
letting you take a disc and transform it easily straight into MP3s.
The CDDB protocol is supported for retrieving track information
from disc database servers. Grip works with DigitalDJ to provide a
unified computerized version of your music collection.
@
text
@@
