head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.12
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.10
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.8
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.4
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.6
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@ * @;


1.1
date	2014.10.26.15.24.09;	author ratchov;	state Exp;
branches;
next	;
commitid	v2MP4JNu9m4Umdpx;


desc
@@


1.1
log
@make sidplay use sndio

ok sthen
@
text
@// --------------------------------------------------------------------------
// ``sndio'' specific audio driver interface.
// --------------------------------------------------------------------------

#ifndef AUDIODRV_H
#define AUDIODRV_H


#include <sndio.h>
#include <stdio.h>
#include <sidplay/emucfg.h>

class audioDriver
{
	
 public:  // --------------------------------------------------------- public

    audioDriver();
  
	bool IsThere();
	
	bool Open(udword freq, int precision, int channels,
			  int fragments, int fragBase);
	
	void Close();
	
	void Play(ubyte* buffer, int bufferSize);
	
	bool Reset();
	
	int GetAudioHandle()
	{
		return -1;
	}
	
	udword GetFrequency()
	{ 
		return frequency;
	}
	
	int GetChannels()
	{
		return channels;
	}
	
	int GetSamplePrecision()
	{
		return precision;
	}
	
	int GetSampleEncoding()
	{
		return encoding;
	}
	
	int GetBlockSize()
	{
		return blockSize;
	}
	
	int GetFragments()
	{
		return 1;
	}
	
	int GetFragSizeBase()
	{
		return 0;
	}
	
	const char* GetErrorString()
	{
		return errorString;
	}
			
 private:  // ------------------------------------------------------- private
	struct sio_hdl *hdl;

	const char* errorString;
	int blockSize;

	udword frequency;

	// These are constants/enums from ``libsidplay/include/emucfg.h''.
	int encoding;
	int precision;
	int channels;
};


#endif  // AUDIODRV_H
@
