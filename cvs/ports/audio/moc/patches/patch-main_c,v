head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.2
	OPENBSD_6_0_BASE:1.2
	czarkoff_20160710:1.1.1.1
	czarkoff:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2016.07.11.07.51.31;	author czarkoff;	state Exp;
branches;
next	1.1;
commitid	u7v9vG2Dl1kd1C1K;

1.1
date	2016.07.10.10.40.43;	author czarkoff;	state Exp;
branches
	1.1.1.1;
next	;
commitid	cPl8lmpqxq2TJVCj;

1.1.1.1
date	2016.07.10.10.40.43;	author czarkoff;	state Exp;
branches;
next	;
commitid	cPl8lmpqxq2TJVCj;


desc
@@


1.2
log
@add "dns" promise, for web streams
@
text
@$OpenBSD: patch-main_c,v 1.1.1.1 2016/07/10 10:40:43 czarkoff Exp $

 * pledge(2)
 * remove srand(3) (see patch-playlist_c)

--- main.c.orig	Sun Apr 24 06:23:30 2016
+++ main.c	Mon Jul 11 08:57:56 2016
@@@@ -174,6 +174,8 @@@@ static void start_moc (const struct parameters *params
 			case 0: /* child - start server */
 				set_me_server ();
 				list_sock = server_init (params->debug, params->foreground);
+				if (pledge("stdio rpath wpath cpath inet unix dns audio", NULL) == -1)
+					fatal ("pledge() failed: %s", strerror(errno));
 				rc = write (notify_pipe[1], &i, sizeof(i));
 				if (rc < 0)
 					fatal ("write() to notify pipe failed: %s",
@@@@ -207,10 +209,14 @@@@ static void start_moc (const struct parameters *params
 	else if (params->foreground && params->only_server) {
 		set_me_server ();
 		list_sock = server_init (params->debug, params->foreground);
+		if (pledge("stdio rpath wpath cpath inet unix dns audio", NULL) == -1)
+			fatal ("pledge() failed: %s", strerror(errno));
 		server_loop (list_sock);
 	}
 
 	if (!params->only_server) {
+		if (pledge("stdio rpath wpath cpath flock unix tty proc", NULL) == -1)
+			fatal ("pledge() failed: %s", strerror(errno));
 		signal (SIGPIPE, SIG_IGN);
 		if (ping_server(server_sock)) {
 			if (!params->dont_run_iface) {
@@@@ -799,6 +805,9 @@@@ int main (int argc, char *argv[])
 	struct utsname uts;
 #endif
 
+	if (pledge("stdio rpath wpath cpath flock inet unix dns tty proc prot_exec audio", NULL) == -1)
+		fatal ("pledge() failed: %s", strerror(errno));
+
 #ifdef PACKAGE_REVISION
 	logit ("This is Music On Console (revision %s)", PACKAGE_REVISION);
 #else
@@@@ -851,11 +860,12 @@@@ int main (int argc, char *argv[])
 	io_init ();
 	rcc_init ();
 	decoder_init (params.debug);
-	srand (time(NULL));
 
-	if (!params.only_server && params.dont_run_iface)
+	if (!params.only_server && params.dont_run_iface) {
+		if (pledge("cpath rpath stdio unix", NULL) == -1)
+			fatal ("pledge() failed: %s", strerror(errno));
 		server_command (&params, args);
-	else
+	} else
 		start_moc (&params, args);
 
 	lists_strs_free (args);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d7 1
a7 1
+++ main.c	Sun Jun  5 18:23:23 2016
d12 1
a12 1
+				if (pledge("stdio rpath wpath cpath inet unix audio", NULL) == -1)
d21 1
a21 1
+		if (pledge("stdio rpath wpath cpath inet unix audio", NULL) == -1)
d36 1
a36 1
+	if (pledge("stdio rpath wpath cpath flock inet unix tty proc prot_exec audio", NULL) == -1)
@


1.1.1.1
log
@MOC (music on console) is a console audio player for LINUX/UNIX designed to be
powerful and easy to use.

MOC plays smoothly, regardless of system or I/O load because it uses the output
buffer in a separate thread. It provides gapless playback because the next file
to be played is precached while the current file is playing.

Supported file formats are: MP3, Ogg Vorbis, FLAC, Musepack (mpc), Speex, Opus,
WAVE, those supported by FFmpeg/LibAV (e.g., WMA, RealAudio, AAC, MP4), AIFF,
AU, SVX, Sphere Nist WAV, IRCAM SF, Creative VOC, SID, wavpack.

OK zhuk@@
@
text
@@
