head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2;
locks; strict;
comment	@# @;


1.2
date	2017.07.27.14.06.31;	author sthen;	state Exp;
branches;
next	1.1;
commitid	uvchiABDMKUZPnN3;

1.1
date	2017.05.03.09.46.40;	author espie;	state Exp;
branches;
next	;
commitid	E93Ua4bpAy3cr4Ib;


desc
@@


1.2
log
@update to calf-0.0.18.6, switch homepage to http://calf-studio-gear.org/,
add patch from espie@@ fixing clang build on 32-bit arches.

there is also a calf-0.0.60, but that requires additional work.
@
text
@$OpenBSD: patch-src_calf_fixed_point_h,v 1.1 2017/05/03 09:46:40 espie Exp $
kill unneeded sizes

Index: src/calf/fixed_point.h
--- src/calf/fixed_point.h.orig
+++ src/calf/fixed_point.h
@@@@ -216,7 +216,7 @@@@ template<class T, int FracBits> class fixed_point { (p
     }
 
     template<class U, int UseBits> 
-    inline U lerp_table_lookup_int(U data[(1<<IntBits)+1]) const {
+    inline U lerp_table_lookup_int(U data[]) const {
         unsigned int pos = uipart();
         return lerp_by_fract_int<U, UseBits>(data[pos], data[pos+1]);
     }
@@@@ -224,19 +224,19 @@@@ template<class T, int FracBits> class fixed_point { (p
     /// Untested... I've started it to get a sin/cos readout for rotaryorgan, but decided to use table-less solution instead
     /// Do not assume it works, because it most probably doesn't
     template<class U, int UseBits> 
-    inline U lerp_table_lookup_int_shift(U data[(1<<IntBits)+1], unsigned int shift) {
+    inline U lerp_table_lookup_int_shift(U data[], unsigned int shift) {
         unsigned int pos = (uipart() + shift) & ((1 << IntBits) - 1);
         return lerp_by_fract_int<U, UseBits>(data[pos], data[pos+1]);
     }
 
     template<class U> 
-    inline U lerp_table_lookup_float(U data[(1<<IntBits)+1]) const {
+    inline U lerp_table_lookup_float(U data[]) const {
         unsigned int pos = uipart();
         return data[pos] + (data[pos+1]-data[pos]) * fpart_as_double();
     }
 
     template<class U> 
-    inline U lerp_table_lookup_float_mask(U data[(1<<IntBits)+1], unsigned int mask) const {
+    inline U lerp_table_lookup_float_mask(U data[], unsigned int mask) const {
         unsigned int pos = ui64part() & mask;
         // printf("full = %lld pos = %d + %f\n", value, pos, fpart_as_double());
         return data[pos] + (data[pos+1]-data[pos]) * fpart_as_double();
@


1.1
log
@fix build with clang, you gotta wonder how this ever compiled
@
text
@d1 2
a2 2
$OpenBSD$
sizes should be unsigned
d12 1
a12 1
+    inline U lerp_table_lookup_int(U data[(1U<<IntBits)+1]) const {
d21 1
a21 1
+    inline U lerp_table_lookup_int_shift(U data[(1U<<IntBits)+1], unsigned int shift) {
d28 1
a28 1
+    inline U lerp_table_lookup_float(U data[(1U<<IntBits)+1]) const {
d35 1
a35 1
+    inline U lerp_table_lookup_float_mask(U data[(1U<<IntBits)+1], unsigned int mask) const {
@

