head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.8
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.6
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.1.1.0.14
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.10
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	stsp_20120817:1.1.1.1
	stsp:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2015.12.17.23.14.52;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	R8F8HbxSZFL4GtAw;

1.1
date	2012.08.17.15.33.32;	author stsp;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.08.17.15.33.32;	author stsp;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Regen patches.
@
text
@$OpenBSD: patch-gtk2_ardour_engine_dialog_cc,v 1.1.1.1 2012/08/17 15:33:32 stsp Exp $
--- gtk2_ardour/engine_dialog.cc.orig	Fri Dec 18 00:14:23 2015
+++ gtk2_ardour/engine_dialog.cc	Fri Dec 18 00:14:23 2015
@@@@ -14,7 +14,7 @@@@
 #include <CoreFoundation/CFString.h>
 #include <sys/param.h>
 #include <mach-o/dyld.h>
-#else
+#elif defined(__linux__)
 #include <alsa/asoundlib.h>
 #endif
 
@@@@ -115,6 +115,8 @@@@ EngineControl::EngineControl ()
 	strings.clear ();
 #ifdef __APPLE__
 	strings.push_back (X_("CoreAudio"));
+#elif defined(__OpenBSD__)
+	strings.push_back (X_("sndio"));
 #else
 	strings.push_back (X_("ALSA"));
 	strings.push_back (X_("OSS"));
@@@@ -130,7 +132,9 @@@@ EngineControl::EngineControl ()
 
 	strings.clear ();
 	strings.push_back (_("Playback/Recording on 1 Device"));
+#ifndef __OpenBSD__
 	strings.push_back (_("Playback/Recording on 2 Devices"));
+#endif
 	strings.push_back (_("Playback only"));
 	strings.push_back (_("Recording only"));
 	set_popdown_strings (audio_mode_combo, strings);
@@@@ -161,7 +165,7 @@@@ EngineControl::EngineControl ()
 	basic_packer.attach (period_size_combo, 1, 2, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
 	row++;
 
-#ifndef __APPLE__
+#if !defined(__APPLE__) && !defined(__OpenBSD__)
 	label = manage (new Label (_("Number of buffers")));
 	basic_packer.attach (*label, 0, 1, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
 	basic_packer.attach (periods_spinner, 1, 2, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
@@@@ -182,7 +186,7 @@@@ EngineControl::EngineControl ()
 	row++;
 	/* no audio mode with CoreAudio, its duplex or nuthin' */
 
-#ifndef __APPLE__
+#if !defined(__APPLE__) && !defined(__OpenBSD__)
 	label = manage (new Label (_("Audio Mode")));
 	basic_packer.attach (*label, 0, 1, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
 	basic_packer.attach (audio_mode_combo, 1, 2, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
@@@@ -222,7 +226,7 @@@@ EngineControl::EngineControl ()
 	realtime_button.signal_toggled().connect (mem_fun (*this, &EngineControl::realtime_changed));
 	realtime_changed ();
 
-#ifndef __APPLE__
+#if !defined(__APPLE__) && !defined(__OpenBSD__)
 	label = manage (new Label (_("Realtime Priority")));
 	label->set_alignment (1.0, 0.5);
 	options_packer.attach (*label, 0, 1, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
@@@@ -272,7 +276,7 @@@@ EngineControl::EngineControl ()
 	options_packer.attach (*label, 0, 1, row, row + 1, FILL|EXPAND, (AttachOptions) 0);
 	++row;
 
-#ifndef __APPLE__
+#if !defined(__APPLE__) && !defined(__OpenBSD__)
 	label = manage (new Label (_("Dither")));	
 	label->set_alignment (1.0, 0.5);
 	options_packer.attach (dither_mode_combo, 1, 2, row, row + 1, FILL|EXPAND, AttachOptions(0));
@@@@ -288,7 +292,7 @@@@ EngineControl::EngineControl ()
 	device_packer.set_spacings (6);
 	row = 0;
 
-#ifndef __APPLE__
+#if !defined(__APPLE__) && !defined(__OpenBSD__)
 	label = manage (new Label (_("Input device")));
 	label->set_alignment (1.0, 0.5);
 	device_packer.attach (*label, 0, 1, row, row+1, FILL|EXPAND, (AttachOptions) 0);
@@@@ -432,6 +436,8 @@@@ EngineControl::build_command_line (vector<string>& cmd
 	} else if (driver == X_("CoreAudio")) {
 		using_coreaudio = true;
 		cmd.push_back ("coreaudio");
+	} else if (driver == X_("sndio")) {
+		cmd.push_back ("sndio");
 	} else if (driver == X_("NetJACK")) {
 		using_netjack = true;
 		cmd.push_back ("netjack");
@@@@ -612,7 +618,7 @@@@ EngineControl::setup_engine ()
 void
 EngineControl::realtime_changed ()
 {
-#ifndef __APPLE__
+#if !defined(__APPLE__) && !defined(__OpenBSD__)
 	priority_spinner.set_sensitive (realtime_button.get_active());
 #endif
 }
@@@@ -627,7 +633,12 @@@@ EngineControl::enumerate_devices (const string& driver
 		devices[driver] = enumerate_coreaudio_devices ();
 #endif
 
-#ifndef __APPLE__
+#ifdef __OpenBSD__
+	} else if (driver == "sndio") {
+		devices[driver] = enumerate_sndio_devices ();
+#endif
+
+#ifdef __linux__
 	} else if (driver == "ALSA") {
 		devices[driver] = enumerate_alsa_devices ();
 	} else if (driver == "FFADO") {
@@@@ -752,6 +763,17 @@@@ Ardour and choose the relevant device then."
 		exit (1);
 	}
 
+
+	return devs;
+}
+#elif defined(__OpenBSD__)
+vector<string>
+EngineControl::enumerate_sndio_devices ()
+{
+	vector<string> devs;
+
+	backend_devs.clear ();
+	devs.push_back ("default");
 
 	return devs;
 }
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- gtk2_ardour/engine_dialog.cc.orig	Thu Apr 19 16:35:13 2012
+++ gtk2_ardour/engine_dialog.cc	Sat Aug 11 15:12:45 2012
d13 1
a13 1
@@@@ -116,6 +116,8 @@@@ EngineControl::EngineControl ()
d22 1
a22 1
@@@@ -131,7 +133,9 @@@@ EngineControl::EngineControl ()
d32 1
a32 1
@@@@ -162,7 +166,7 @@@@ EngineControl::EngineControl ()
d41 1
a41 1
@@@@ -183,7 +187,7 @@@@ EngineControl::EngineControl ()
d50 1
a50 1
@@@@ -223,7 +227,7 @@@@ EngineControl::EngineControl ()
d59 1
a59 1
@@@@ -273,7 +277,7 @@@@ EngineControl::EngineControl ()
d68 1
a68 1
@@@@ -289,7 +293,7 @@@@ EngineControl::EngineControl ()
d77 1
a77 1
@@@@ -433,6 +437,8 @@@@ EngineControl::build_command_line (vector<string>& cmd
d86 1
a86 1
@@@@ -613,7 +619,7 @@@@ EngineControl::setup_engine ()
d95 1
a95 1
@@@@ -628,7 +634,12 @@@@ EngineControl::enumerate_devices (const string& driver
d109 1
a109 1
@@@@ -753,6 +764,17 @@@@ Ardour and choose the relevant device then."
@


1.1.1.1
log
@Import ardour-2.8.14, with added support for sndio midi.

Ardour is a full-featured, free and open-source hard disk recorder and
digital audio workstation program suitable for professional use. It
features unlimited audio tracks and buses, non-destructive, non-linear
editing with unlimited undo, and anything-to-anywhere signal routing. It
supports standard file formats, such as BWF, WAV, WAV64, AIFF and CAF,
and it can use LADSPA, LV2, VST and AudioUnit plugin formats.

with and ok ajacoutot@@
@
text
@@
