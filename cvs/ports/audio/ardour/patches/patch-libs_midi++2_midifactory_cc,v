head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.12
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.14
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.10
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.4
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	stsp_20120817:1.1.1.1
	stsp:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2012.08.17.15.33.32;	author stsp;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.08.17.15.33.32;	author stsp;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- libs/midi++2/midifactory.cc.orig	Tue Feb 24 13:37:50 2009
+++ libs/midi++2/midifactory.cc	Mon Jan 23 17:31:34 2012
@@@@ -46,7 +46,15 @@@@ std::string MIDI::CoreMidi_MidiPort::typestring = "cor
 
 #endif // WITH_COREMIDI
 
+#ifdef WITH_SNDIO
 
+#include <midi++/sndio_midiport.h>
+
+std::string MIDI::SndioMidi_MidiPort::typestring = "sndio";
+
+#endif // WITH_SNDIO
+
+
 using namespace std;
 using namespace MIDI;
 using namespace PBD;
@@@@ -74,6 +82,12 @@@@ PortFactory::create_port (const XMLNode& node)
 		break;
 #endif // WITH_COREMIDI
 
+#if WITH_SNDIO
+	case Port::SndioMidi_MidiPort:
+		port = new SndioMidi_MidiPort (node);
+		break;
+#endif // WITH_SNDIO
+
 	case Port::Null:
 		port = new Null_MidiPort (node);
 		break;
@@@@ -107,6 +121,12 @@@@ PortFactory::ignore_duplicate_devices (Port::Type type
 		break;
 #endif // WITH_COREMIDI
 
+#if WITH_SNDIO
+	case Port::SndioMidi_MidiPort:
+		ret = false;
+		break;
+#endif // WITH_SNDIO
+
 	default:
 		break;
 	}
@@@@ -126,6 +146,10 @@@@ PortFactory::get_known_ports (vector<PortSet>& ports)
 	n += CoreMidi_MidiPort::discover (ports);
 #endif // WITH_COREMIDI
 	
+#if WITH_SNDIO
+	n += SndioMidi_MidiPort::discover (ports);
+#endif // WITH_SNDIO
+
 	return n;
 }
 
@@@@ -141,6 +165,9 @@@@ PortFactory::default_port_type ()
 	return "coremidi";
 #endif // WITH_COREMIDI
 	
+#ifdef WITH_SNDIO
+	return "sndio";
+#endif
 	PBD::fatal << "programming error: no default port type defined in midifactory.cc" << endmsg;
 }
 
@@@@ -157,6 +184,10 @@@@ PortFactory::string_to_type (const string& xtype)
 #ifdef WITH_COREMIDI
 	} else if (strings_equal_ignore_case (xtype, CoreMidi_MidiPort::typestring)) {
 		return Port::CoreMidi_MidiPort;
+#endif
+#ifdef WITH_SNDIO
+	} else if (strings_equal_ignore_case (xtype, SndioMidi_MidiPort::typestring)) {
+		return Port::SndioMidi_MidiPort;
 #endif
 	} else if (strings_equal_ignore_case (xtype, Null_MidiPort::typestring)) {
 		return Port::Null;
@


1.1.1.1
log
@Import ardour-2.8.14, with added support for sndio midi.

Ardour is a full-featured, free and open-source hard disk recorder and
digital audio workstation program suitable for professional use. It
features unlimited audio tracks and buses, non-destructive, non-linear
editing with unlimited undo, and anything-to-anywhere signal routing. It
supports standard file formats, such as BWF, WAV, WAV64, AIFF and CAF,
and it can use LADSPA, LV2, VST and AudioUnit plugin formats.

with and ok ajacoutot@@
@
text
@@
