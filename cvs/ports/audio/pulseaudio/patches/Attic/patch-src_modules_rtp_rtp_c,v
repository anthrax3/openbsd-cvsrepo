head	1.3;
access;
symbols
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_5:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2015.03.15.08.45.10;	author ajacoutot;	state dead;
branches;
next	1.2;
commitid	3LmgQSBTsxkLqVn8;

1.2
date	2014.08.14.06.56.55;	author ajacoutot;	state Exp;
branches;
next	1.1;
commitid	2qdPn2BMkqpsRH8w;

1.1
date	2014.08.07.13.16.26;	author ajacoutot;	state dead;
branches
	1.1.2.1;
next	;
commitid	4ujwIYPxhWjZ39LI;

1.1.2.1
date	2014.08.07.13.16.26;	author ajacoutot;	state Exp;
branches;
next	;
commitid	4ujwIYPxhWjZ39LI;


desc
@@


1.3
log
@Update to pulseaudio-6.0.

ok robert@@ (maintainer)
@
text
@$OpenBSD: patch-src_modules_rtp_rtp_c,v 1.2 2014/08/14 06:56:55 ajacoutot Exp $

From 26b9d22dd24c17eb118d0205bf7b02b75d435e3c Mon Sep 17 00:00:00 2001
From: "Alexander E. Patrakov" <patrakov@@gmail.com>
Date: Thu, 5 Jun 2014 22:29:25 +0600
Subject: rtp-recv: fix crash on empty UDP packets (CVE-2014-3970)

--- src/modules/rtp/rtp.c.orig	Thu Jan 23 19:57:55 2014
+++ src/modules/rtp/rtp.c	Thu Aug  7 14:47:42 2014
@@@@ -182,8 +182,29 @@@@ int pa_rtp_recv(pa_rtp_context *c, pa_memchunk *chunk,
         goto fail;
     }
 
-    if (size <= 0)
-        return 0;
+    if (size <= 0) {
+        /* size can be 0 due to any of the following reasons:
+         *
+         * 1. Somebody sent us a perfectly valid zero-length UDP packet.
+         * 2. Somebody sent us a UDP packet with a bad CRC.
+         *
+         * It is unknown whether size can actually be less than zero.
+         *
+         * In the first case, the packet has to be read out, otherwise the
+         * kernel will tell us again and again about it, thus preventing
+         * reception of any further packets. So let's just read it out
+         * now and discard it later, when comparing the number of bytes
+         * received (0) with the number of bytes wanted (1, see below).
+         *
+         * In the second case, recvmsg() will fail, thus allowing us to
+         * return the error.
+         *
+         * Just to avoid passing zero-sized memchunks and NULL pointers to
+         * recvmsg(), let's force allocation of at least one byte by setting
+         * size to 1.
+         */
+        size = 1;
+    }
 
     if (c->memchunk.length < (unsigned) size) {
         size_t l;
@


1.2
log
@SECURITY fix for CVE-2014-3970
pulseaudio: denial of service in module-rtp-recv
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@file patch-src_modules_rtp_rtp_c was initially added on branch OPENBSD_5_5.
@
text
@d1 41
@


1.1.2.1
log
@SECURITY fix for CVE-2014-3970
pulseaudio: denial of service in module-rtp-recv
@
text
@a0 41
$OpenBSD$

From 26b9d22dd24c17eb118d0205bf7b02b75d435e3c Mon Sep 17 00:00:00 2001
From: "Alexander E. Patrakov" <patrakov@@gmail.com>
Date: Thu, 5 Jun 2014 22:29:25 +0600
Subject: rtp-recv: fix crash on empty UDP packets (CVE-2014-3970)

--- src/modules/rtp/rtp.c.orig	Thu May 23 07:33:06 2013
+++ src/modules/rtp/rtp.c	Thu Aug  7 15:02:57 2014
@@@@ -182,8 +182,29 @@@@ int pa_rtp_recv(pa_rtp_context *c, pa_memchunk *chunk,
         goto fail;
     }
 
-    if (size <= 0)
-        return 0;
+    if (size <= 0) {
+        /* size can be 0 due to any of the following reasons:
+         *
+         * 1. Somebody sent us a perfectly valid zero-length UDP packet.
+         * 2. Somebody sent us a UDP packet with a bad CRC.
+         *
+         * It is unknown whether size can actually be less than zero.
+         *
+         * In the first case, the packet has to be read out, otherwise the
+         * kernel will tell us again and again about it, thus preventing
+         * reception of any further packets. So let's just read it out
+         * now and discard it later, when comparing the number of bytes
+         * received (0) with the number of bytes wanted (1, see below).
+         *
+         * In the second case, recvmsg() will fail, thus allowing us to
+         * return the error.
+         *
+         * Just to avoid passing zero-sized memchunks and NULL pointers to
+         * recvmsg(), let's force allocation of at least one byte by setting
+         * size to 1.
+         */
+        size = 1;
+    }
 
     if (c->memchunk.length < (unsigned) size) {
         size_t l;
@

