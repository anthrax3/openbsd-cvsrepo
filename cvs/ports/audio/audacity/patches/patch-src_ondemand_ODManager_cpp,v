head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.20
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.18
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.16
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.12
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.14
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.10
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.8
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.6
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.4
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.2
	OPENBSD_5_3_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.09.03.09.09.37;	author stsp;	state Exp;
branches;
next	;


desc
@@


1.1
log
@fix abort() in pthread_mutex_unlock(); ok aja
@
text
@$OpenBSD$
fix abort() in pthread_mutex_unlock()
--- src/ondemand/ODManager.cpp.orig	Mon Sep  3 01:04:47 2012
+++ src/ondemand/ODManager.cpp	Mon Sep  3 01:05:08 2012
@@@@ -283,7 +283,7 @@@@ void ODManager::Start()
          
          //the thread will add it back to the array if the job is not yet done at the end of the thread's run.  
          //mTasks.erase(mTasks.begin());  
-         mTasksMutex.Unlock();
+         //mTasksMutex.Unlock();
          
          //detach a new thread.
          thread = new ODTaskThread(mTasks[0]);//task);
@
