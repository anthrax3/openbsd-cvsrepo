head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.2
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.1.0.4
	OPENBSD_5_8_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2015.10.12.10.26.05;	author dcoppa;	state Exp;
branches;
next	1.1;
commitid	hid5LGk3RGNGA0PO;

1.1
date	2015.05.11.21.22.02;	author jasper;	state Exp;
branches;
next	;
commitid	GsR1nVysZcA7V0py;


desc
@@


1.2
log
@
sync with upstream
@
text
@$OpenBSD: patch-plugins_vfs_zip_vfs_zip_c,v 1.1 2015/05/11 21:22:02 jasper Exp $

commit abec71d101a39e1b58e85749f7beada1f201b4bc
Author: proudzhu <proudzhu.fdu@@gmail.com>
Date:   Tue May 19 21:26:08 2015 +0800

rename zip_file_t to ddb_zip_file_t in vfs_zip.c to fix build with libzip > 1.0.0

libzip 1.0.0 introduces a new struct named zip_file_t, thus the origin
code cannot build against it.

--- plugins/vfs_zip/vfs_zip.c.orig	Mon May 11 22:38:19 2015
+++ plugins/vfs_zip/vfs_zip.c	Mon May 11 22:42:05 2015
@@@@ -54,7 +54,7 @@@@ typedef struct {
     int buffer_remaining;
     int buffer_pos;
 #endif
-} zip_file_t;
+} ddb_zip_file_t;
 
 static const char *scheme_names[] = { "zip://", NULL };
 
@@@@ -108,8 +108,8 @@@@ vfs_zip_open (const char *fname) {
         return NULL;
     }
 
-    zip_file_t *f = malloc (sizeof (zip_file_t));
-    memset (f, 0, sizeof (zip_file_t));
+    ddb_zip_file_t *f = malloc (sizeof (ddb_zip_file_t));
+    memset (f, 0, sizeof (ddb_zip_file_t));
     f->file.vfs = &plugin;
     f->z = z;
     f->zf = zf;
@@@@ -122,7 +122,7 @@@@ vfs_zip_open (const char *fname) {
 void
 vfs_zip_close (DB_FILE *f) {
     trace ("vfs_zip: close\n");
-    zip_file_t *zf = (zip_file_t *)f;
+    ddb_zip_file_t *zf = (ddb_zip_file_t *)f;
     if (zf->zf) {
         zip_fclose (zf->zf);
     }
@@@@ -134,7 +134,7 @@@@ vfs_zip_close (DB_FILE *f) {
 
 size_t
 vfs_zip_read (void *ptr, size_t size, size_t nmemb, DB_FILE *f) {
-    zip_file_t *zf = (zip_file_t *)f;
+    ddb_zip_file_t *zf = (ddb_zip_file_t *)f;
 //    printf ("read: %d\n", size*nmemb);
 
     size_t sz = size * nmemb;
@@@@ -167,7 +167,7 @@@@ vfs_zip_read (void *ptr, size_t size, size_t nmemb, DB
 
 int
 vfs_zip_seek (DB_FILE *f, int64_t offset, int whence) {
-    zip_file_t *zf = (zip_file_t *)f;
+    ddb_zip_file_t *zf = (ddb_zip_file_t *)f;
 //    printf ("seek: %lld (%d)\n", offset, whence);
 
     if (whence == SEEK_CUR) {
@@@@ -242,13 +242,13 @@@@ vfs_zip_seek (DB_FILE *f, int64_t offset, int whence) 
 
 int64_t
 vfs_zip_tell (DB_FILE *f) {
-    zip_file_t *zf = (zip_file_t *)f;
+    ddb_zip_file_t *zf = (ddb_zip_file_t *)f;
     return zf->offset;
 }
 
 void
 vfs_zip_rewind (DB_FILE *f) {
-    zip_file_t *zf = (zip_file_t *)f;
+    ddb_zip_file_t *zf = (ddb_zip_file_t *)f;
     zip_fclose (zf->zf);
     zf->zf = zip_fopen_index (zf->z, zf->index, 0);
     assert (zf->zf); // FIXME: better error handling?
@@@@ -260,7 +260,7 @@@@ vfs_zip_rewind (DB_FILE *f) {
 
 int64_t
 vfs_zip_getlength (DB_FILE *f) {
-    zip_file_t *zf = (zip_file_t *)f;
+    ddb_zip_file_t *zf = (ddb_zip_file_t *)f;
     return zf->size;
 }
 
@


1.1
log
@mechanical fix to deal with upcoming libzip update which has a zip_file_t typedef now
@
text
@d1 1
a1 1
$OpenBSD$
d3 8
a10 1
s/zip_file_t/db_zip_file_t/g to prevent conflict with new typedef in libzip 1.0.0
d19 1
a19 1
+} db_zip_file_t;
d29 2
a30 2
+    db_zip_file_t *f = malloc (sizeof (db_zip_file_t));
+    memset (f, 0, sizeof (db_zip_file_t));
d39 1
a39 1
+    db_zip_file_t *zf = (db_zip_file_t *)f;
d48 1
a48 1
+    db_zip_file_t *zf = (db_zip_file_t *)f;
d57 1
a57 1
+    db_zip_file_t *zf = (db_zip_file_t *)f;
d66 1
a66 1
+    db_zip_file_t *zf = (db_zip_file_t *)f;
d73 1
a73 1
+    db_zip_file_t *zf = (db_zip_file_t *)f;
d82 1
a82 1
+    db_zip_file_t *zf = (db_zip_file_t *)f;
@

