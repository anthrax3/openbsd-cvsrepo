head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.18
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.14
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.16
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.12
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2012.04.20.13.28.50;	author dcoppa;	state Exp;
branches;
next	1.5;

1.5
date	2012.01.24.08.03.52;	author ajacoutot;	state dead;
branches;
next	1.4;

1.4
date	2010.06.07.01.44.38;	author jakemsr;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.11.10.51.46;	author jakemsr;	state dead;
branches;
next	1.2;

1.2
date	2008.06.28.05.49.31;	author jakemsr;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.22.09.34.58;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Fix after celt update

ok ajacoutot@@
@
text
@$OpenBSD$

Fix with celt>=0.11

--- tools/netsource.c.orig	Wed Apr 18 13:06:08 2012
+++ tools/netsource.c	Wed Apr 18 13:06:50 2012
@@@@ -139,7 +139,7 @@@@ alloc_ports (int n_capture_audio, int n_playback_audio
 #if HAVE_CELT
 #if HAVE_CELT_API_0_7 || HAVE_CELT_API_0_8
 	    CELTMode *celt_mode = celt_mode_create( jack_get_sample_rate( client ), jack_get_buffer_size(client), NULL );
-	    capture_srcs = jack_slist_append(capture_srcs, celt_decoder_create( celt_mode, 1, NULL ) );
+	    capture_srcs = jack_slist_append(capture_srcs, celt_decoder_create_custom( celt_mode, 1, NULL ) );
 #else
 	    CELTMode *celt_mode = celt_mode_create( jack_get_sample_rate( client ), 1, jack_get_buffer_size(client), NULL );
 	    capture_srcs = jack_slist_append(capture_srcs, celt_decoder_create( celt_mode ) );
@@@@ -182,7 +182,7 @@@@ alloc_ports (int n_capture_audio, int n_playback_audio
 #if HAVE_CELT
 #if HAVE_CELT_API_0_7 || HAVE_CELT_API_0_8
 	    CELTMode *celt_mode = celt_mode_create( jack_get_sample_rate (client), jack_get_buffer_size(client), NULL );
-	    playback_srcs = jack_slist_append(playback_srcs, celt_encoder_create( celt_mode, 1, NULL ) );
+	    playback_srcs = jack_slist_append(playback_srcs, celt_encoder_create_custom( celt_mode, 1, NULL ) );
 #else
 	    CELTMode *celt_mode = celt_mode_create( jack_get_sample_rate (client), 1, jack_get_buffer_size(client), NULL );
 	    playback_srcs = jack_slist_append(playback_srcs, celt_encoder_create( celt_mode ) );
@


1.5
log
@Update to jack-0.121.3.

README changes from rathov@@
tweaks and ok shadchin@@
@
text
@d1 24
a24 37
$OpenBSD: patch-tools_netsource_c,v 1.4 2010/06/07 01:44:38 jakemsr Exp $
--- tools/netsource.c.orig	Wed May 19 21:35:48 2010
+++ tools/netsource.c	Wed May 19 21:38:07 2010
@@@@ -230,6 +230,7 @@@@ process (jack_nframes_t nframes, void *arg)
 
     uint32_t *packet_buf, *packet_bufX;
     jack_time_t packet_recv_timestamp;
+    jacknet_packet_header *pkthdr;
 
     if( bitdepth == 1000 )
 	net_period = factor;
@@@@ -243,7 +244,7 @@@@ process (jack_nframes_t nframes, void *arg)
     /* Allocate a buffer where both In and Out Buffer will fit */
     packet_buf = alloca ((rx_bufsize > tx_bufsize) ? rx_bufsize : tx_bufsize);
 
-    jacknet_packet_header *pkthdr = (jacknet_packet_header *) packet_buf;
+    pkthdr = (jacknet_packet_header *) packet_buf;
 
     /*
      * ok... SEND code first.
@@@@ -453,6 +454,7 @@@@ main (int argc, char *argv[])
     extern char *optarg;
     extern int optind, optopt;
     int errflg=0, c;
+    int rx_bufsize;
 
     if (argc < 3)
     {
@@@@ -574,7 +576,7 @@@@ main (int argc, char *argv[])
     else
 	net_period = ceilf((float) jack_get_buffer_size (client) / (float) factor);
 
-    int rx_bufsize =  get_sample_size (bitdepth) * capture_channels * net_period + sizeof (jacknet_packet_header);
+    rx_bufsize =  get_sample_size (bitdepth) * capture_channels * net_period + sizeof (jacknet_packet_header);
     global_packcache = packet_cache_new (latency + 50, rx_bufsize, mtu);
 
     /* tell the JACK server that we are ready to roll */
@


1.4
log
@* clean up sndio(7) driver
* update README.OpenBSD
* add patches to let it build on gcc2 archs (from Sebastian Reitenbach)
* disable audio(4) driver
@
text
@d1 1
a1 1
$OpenBSD$
@


1.3
log
@- update to 0.116.1, mostly stability/reliability fixes
- add sndio backend

playback under aucat server is pretty solid.  for full-duplex,
starting aucat with 'aucat -l -b 2048' and jackd with just
'jackd -d sndio' seems to work best for me.  we want low latency
anyway, right ;)
@
text
@d1 29
a29 25
$OpenBSD: patch-tools_netsource_c,v 1.2 2008/06/28 05:49:31 jakemsr Exp $
--- tools/netsource.c.orig	Sat Apr 19 17:35:52 2008
+++ tools/netsource.c	Mon Jun 16 18:38:25 2008
@@@@ -30,11 +30,15 @@@@ Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, U
 #include <unistd.h>
 #include <stdlib.h>
 #include <string.h>
+#include <fcntl.h>
 
+#include <sys/socket.h>
 #include <netinet/in.h>
 #include <netdb.h>
 
+#ifdef HAVE_ALLOCA_H
 #include <alloca.h>
+#endif
 
 #include <jack/jack.h>
 
@@@@ -206,10 +210,11 @@@@ process (jack_nframes_t nframes, void *arg)
 
     /* ---------- Receive ---------- */
     if (reply_port)
-        size = netjack_recv (insockfd, (char *) packet_buf, rx_bufsize, MSG_DONTWAIT, mtu);
+        size = netjack_recv (insockfd, (char *) packet_buf, rx_bufsize, NULL, mtu);
d31 1
a31 9
-        size = netjack_recv (outsockfd, (char *) packet_buf, rx_bufsize, MSG_DONTWAIT, mtu);
+        size = netjack_recv (outsockfd, (char *) packet_buf, rx_bufsize, NULL, mtu);
     packet_header_ntoh (pkthdr);
+
     /* Loop till we get the right packet at the right momment */
     while (size == rx_bufsize && (framecnt - pkthdr->framecnt) > latency)
     {
@@@@ -217,9 +222,9 @@@@ process (jack_nframes_t nframes, void *arg)
         //printf ("Frame %d  \tLate packet received with a latency of %d frames\n", framecnt, framecnt - pkthdr->framecnt);
d33 3
a35 26
         if (reply_port)
-            size = netjack_recv (insockfd, (char *) packet_buf, rx_bufsize, MSG_DONTWAIT, mtu);
+            size = netjack_recv (insockfd, (char *) packet_buf, rx_bufsize, NULL, mtu);
         else
-            size = netjack_recv (outsockfd, (char *) packet_buf, rx_bufsize, MSG_DONTWAIT, mtu);
+            size = netjack_recv (outsockfd, (char *) packet_buf, rx_bufsize, NULL, mtu);
         packet_header_ntoh (pkthdr);
     }
 
@@@@ -367,6 +372,7 @@@@ main (int argc, char *argv[])
     int peer_port = 3000;
     jack_options_t options = JackNullOption;
     jack_status_t status;
+    int ff;
 
     /* Torben's famous state variables, aka "the reporting API" ! */
     int statecopy_connected, statecopy_latency, statecopy_netxruns;
@@@@ -471,6 +477,11 @@@@ main (int argc, char *argv[])
                          "Is the JACK server running ?\n", status);
         return 1;
     }
+
+    fcntl(outsockfd, F_GETFL, &ff);
+    fcntl(outsockfd, F_SETFL, ff | O_NONBLOCK);
+    fcntl(insockfd, F_GETFL, &ff);
+    fcntl(insockfd, F_SETFL, ff | O_NONBLOCK);
d37 1
a37 2
     /* Set up jack callbacks */
     jack_set_process_callback (client, process, 0);
@


1.2
log
@maintainence update, plus
- fix build on alpha by not comparing a va_list to NULL.  problem
  noticed and fix tested by merdely@@.
- fix possible 100% cpu usage in full-duplex mode
- fix net client/server
- add @@bin markers to PLIST
@
text
@d1 1
a1 1
$OpenBSD: patch-tools_netsource_c,v 1.1 2008/04/22 09:34:58 jakemsr Exp $
@


1.1
log
@
update to 0.111.2.1169

- don't bother trying to fix compiler optimization flag tests.  they're
badly broken/linux spcific, and we don't use them anyway.
- the net source client became a "real" client (executable), instead of
an "in process" client (plugin)
- previous sun_driver patches accepted upstream, plus:
* fix cycle timing in duplex mode by moving calculations and function
calls out of the poll() synchronization loop
* shorten xrun and silence writing/reading messages
* remove unused variables
* attempt to stop continuous playback underruns in duplex mode that are
caused by the capture buffer overrunning
* try harder to make sure we have pristine buffers after
sun_driver_start()
* use native endian audio encodings
* report a delay when poll() times out, instead of effectively running
a null cycle


now jack works on my r10k sgi :)
@
text
@d1 5
a5 4
$OpenBSD$
--- tools/netsource.c.orig	Mon Apr 21 21:58:12 2008
+++ tools/netsource.c	Mon Apr 21 21:58:35 2008
@@@@ -31,10 +31,13 @@@@ Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, U
d8 1
d20 46
@

