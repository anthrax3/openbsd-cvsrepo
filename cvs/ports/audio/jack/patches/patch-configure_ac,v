head	1.8;
access;
symbols
	OPENBSD_6_0:1.8.0.6
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.7.0.14
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.12
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.10
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.8
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.6
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.4
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.6
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.4
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	jakemsr:1.1.1.1
	jakemsr-20080322:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2015.05.05.19.45.19;	author sthen;	state Exp;
branches;
next	1.7;
commitid	fz8smaZvCGUbvSwh;

1.7
date	2012.01.24.08.03.52;	author ajacoutot;	state Exp;
branches;
next	1.6;

1.6
date	2010.12.02.22.17.46;	author dcoppa;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.12.10.45.01;	author jakemsr;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.11.10.51.46;	author jakemsr;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.28.05.49.30;	author jakemsr;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.22.09.34.58;	author jakemsr;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.24.03.01.28;	author jakemsr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.03.24.03.01.28;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.8
log
@update to JACK 0.124.1, from Eric Lalonde.
@
text
@--- configure.ac.orig	Wed Jan 22 12:23:36 2014
+++ configure.ac	Sun Apr 19 15:03:55 2015
@@@@ -207,7 +207,7 @@@@ if test "x$JACK_USE_MACH_THREADS" != "x"; then
 fi
 
 # headers
-AC_CHECK_HEADERS(string.h strings.h alloca.h db.h, [],
+AC_CHECK_HEADERS(string.h strings.h db.h, [],
      AC_MSG_ERROR([*** a required header file is missing]))
 
 AC_CHECK_HEADERS(getopt.h, [], [
@@@@ -761,7 +761,7 @@@@ AC_SUBST(NETJACK_CFLAGS)
 
 # Check which backend drivers can be built.  The last one successfully
 # configured becomes the default JACK driver; so the order of
-# precedence is: alsa, sun, oss, coreaudio, portaudio, dummy.
+# precedence is: alsa, sun, sndio, oss, coreaudio, portaudio, dummy.
 
 JACK_DEFAULT_DRIVER=\"dummy\"
 
@@@@ -821,6 +821,20 @@@@ then
 fi
 AM_CONDITIONAL(HAVE_SUN, $HAVE_SUN)
 
+AC_ARG_ENABLE(sndio, AC_HELP_STRING([--disable-sndio],[ignore sndio driver ]),
+			TRY_SNDIO=$enableval , TRY_SNDIO=yes ) 
+HAVE_SNDIO="false"
+if test "x$TRY_SNDIO" = "xyes"
+then
+	# check for sndio audio API
+	AC_CHECK_HEADER([sndio.h],
+	     [HAVE_SNDIO="true"
+              JACK_DEFAULT_DRIVER=\"sndio\"])
+	SNDIO_LIBS="-lsndio"
+	AC_SUBST([SNDIO_LIBS])
+fi
+AM_CONDITIONAL(HAVE_SNDIO, $HAVE_SNDIO)
+
 AC_ARG_ENABLE(freebob, AC_HELP_STRING([--disable-freebob],[ignore FreeBob driver ]),
 			TRY_FREEBOB=$enableval , TRY_FREEBOB=yes ) 
 HAVE_FREEBOB="false"
@@@@ -953,6 +967,7 @@@@ drivers/alsa_midi/Makefile
 drivers/dummy/Makefile
 drivers/oss/Makefile
 drivers/sun/Makefile
+drivers/sndio/Makefile
 drivers/portaudio/Makefile
 drivers/coreaudio/Makefile
 drivers/freebob/Makefile
@@@@ -984,6 +999,7 @@@@ echo \| Build with old FireWire \(FreeBob\) support...
 echo \| Build with new FireWire \(FFADO\) support............... : $HAVE_FIREWIRE
 echo \| Build with OSS support................................ : $HAVE_OSS
 echo \| Build with Sun audio support.......................... : $HAVE_SUN
+echo \| Build with sndio support.............................. : $HAVE_SNDIO
 echo \| Build with CoreAudio support.......................... : $HAVE_COREAUDIO
 echo \| Build with PortAudio support.......................... : $HAVE_PA
 echo \| Build with Celt support............................... : $HAVE_CELT
@


1.7
log
@Update to jack-0.121.3.

README changes from rathov@@
tweaks and ok shadchin@@
@
text
@d1 12
a12 4
$OpenBSD: patch-configure_ac,v 1.6 2010/12/02 22:17:46 dcoppa Exp $
--- configure.ac.orig	Wed Sep 28 15:09:59 2011
+++ configure.ac	Mon Jan 23 14:21:11 2012
@@@@ -765,7 +765,7 @@@@ AC_SUBST(NETJACK_CFLAGS)
d21 1
a21 1
@@@@ -825,6 +825,20 @@@@ then
d42 1
a42 1
@@@@ -957,6 +971,7 @@@@ drivers/a2j/Makefile
d50 1
a50 1
@@@@ -987,6 +1002,7 @@@@ echo \| Build with old FireWire \(FreeBob\) support...
@


1.6
log
@Don't enable CELT support for now.

OK jakemsr@@
@
text
@d1 4
a4 20
$OpenBSD: patch-configure_ac,v 1.5 2009/01/12 10:45:01 jakemsr Exp $
--- configure.ac.orig	Sat Dec  6 10:32:50 2008
+++ configure.ac	Thu Dec  2 11:06:17 2010
@@@@ -655,14 +655,11 @@@@ HAVE_SAMPLERATE=false
 PKG_CHECK_MODULES(SAMPLERATE, samplerate >= 0.1.2,[HAVE_SAMPLERATE=true], [true])
 if test x$HAVE_SAMPLERATE = xfalse; then
         AC_MSG_WARN([*** the NetJack backend and internal client will not be built])
-else
-	CFLAGS="$CFLAGS $SAMPLERATE_CFLAGS"
-	LIBS="$LIBS $SAMPLERATE_LIBS"
 fi
 
 # Celt low-latency audio codec. netjack transmission via internet.
 HAVE_CELT=false
-PKG_CHECK_MODULES(CELT, celt >= 0.5.0,[HAVE_CELT=true], [true])
+# PKG_CHECK_MODULES(CELT, celt >= 0.5.0,[HAVE_CELT=true], [true])
 if test x$HAVE_CELT = xfalse; then
     	AC_DEFINE(HAVE_CELT,0,"Whether CELT is available")
 	AC_MSG_RESULT(no)
@@@@ -680,7 +677,7 @@@@ fi
d13 1
a13 1
@@@@ -740,6 +737,20 @@@@ then
d34 1
a34 1
@@@@ -871,6 +882,7 @@@@ drivers/alsa-midi/Makefile
d42 1
a42 1
@@@@ -900,6 +912,7 @@@@ echo \| Build with old FireWire \(FreeBob\) support...
d49 1
a49 1
 echo \| Build with NetJack support............................ : $HAVE_SAMPLERATE
@


1.5
log
@don't use dynamic SIMD instructions.
@
text
@d1 4
a4 4
$OpenBSD: patch-configure_ac,v 1.4 2009/01/11 10:51:46 jakemsr Exp $
--- configure.ac.orig	Sat Dec  6 01:32:50 2008
+++ configure.ac	Mon Jan 12 02:27:57 2009
@@@@ -655,9 +655,6 @@@@ HAVE_SAMPLERATE=false
d14 6
@


1.4
log
@- update to 0.116.1, mostly stability/reliability fixes
- add sndio backend

playback under aucat server is pretty solid.  for full-duplex,
starting aucat with 'aucat -l -b 2048' and jackd with just
'jackd -d sndio' seems to work best for me.  we want low latency
anyway, right ;)
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ configure.ac	Sat Jan 10 00:00:08 2009
@


1.3
log
@maintainence update, plus
- fix build on alpha by not comparing a va_list to NULL.  problem
  noticed and fix tested by merdely@@.
- fix possible 100% cpu usage in full-duplex mode
- fix net client/server
- add @@bin markers to PLIST
@
text
@d1 10
a10 18
$OpenBSD: patch-configure_ac,v 1.2 2008/04/22 09:34:58 jakemsr Exp $
--- configure.ac.orig	Sat Jun 14 16:46:11 2008
+++ configure.ac	Sun Jun 15 11:24:47 2008
@@@@ -94,6 +94,7 @@@@ case "${host_os}" in
     USE_BARRIER="no"
     # need small realtime stack
     JACK_THREAD_STACK_TOUCH=10000
+    HOST_DEFAULT_TMP_DIR=/tmp
     ;;
   darwin*)
     JACK_THREAD_STACK_TOUCH=10000	# need small realtime stack
@@@@ -393,7 +394,7 @@@@ AC_ARG_ENABLE(dynsimd,
 if test "x$enable_dynsimd" = xyes; then
 	AC_DEFINE(USE_DYNSIMD, 1, [Define to 1 to use dynamic SIMD selection.])
 	dnl This needs update once there's more than x86/x86-64 supported
-	SIMD_CFLAGS="-msse -msse2 -m3dnow"
+	SIMD_CFLAGS="" # "-msse -msse2 -m3dnow"
 	AC_SUBST(SIMD_CFLAGS)
d13 47
@


1.2
log
@
update to 0.111.2.1169

- don't bother trying to fix compiler optimization flag tests.  they're
badly broken/linux spcific, and we don't use them anyway.
- the net source client became a "real" client (executable), instead of
an "in process" client (plugin)
- previous sun_driver patches accepted upstream, plus:
* fix cycle timing in duplex mode by moving calculations and function
calls out of the poll() synchronization loop
* shorten xrun and silence writing/reading messages
* remove unused variables
* attempt to stop continuous playback underruns in duplex mode that are
caused by the capture buffer overrunning
* try harder to make sure we have pristine buffers after
sun_driver_start()
* use native endian audio encodings
* report a delay when poll() times out, instead of effectively running
a null cycle


now jack works on my r10k sgi :)
@
text
@d1 4
a4 11
$OpenBSD: patch-configure_ac,v 1.1.1.1 2008/03/24 03:01:28 jakemsr Exp $
--- configure.ac.orig	Sun Apr 13 00:12:24 2008
+++ configure.ac	Sun Apr 13 00:55:01 2008
@@@@ -88,12 +88,15 @@@@ case "${host_os}" in
     # current FreeBSD header files conflict with the OSS driver's
     # barrier code, this may be fixed in 5.3, stay tuned.
     USE_BARRIER="no"
+    JACK_HOST_HAS_BSD_POLL="yes"
     ;;
   openbsd*)
     # pthread_barrier* not implemented
a7 1
+    JACK_HOST_HAS_BSD_POLL="yes"
d12 1
a12 18
@@@@ -103,11 +106,16 @@@@ case "${host_os}" in
     OS_LDFLAGS="-framework CoreAudio -framework CoreServices -framework AudioUnit"
     TRY_POSIX_SHM=yes			# POSIX shm works better
     HOST_DEFAULT_TMP_DIR=/tmp
+    JACK_HOST_HAS_BSD_POLL="yes"
     ;;
 esac
 
 AC_SUBST(OS_LDFLAGS)
 
+if test x"$JACK_HOST_HAS_BSD_POLL" = x"yes"; then
+    AC_DEFINE(JACK_HOST_HAS_BSD_POLL, 1, [must use read() to signal eof])
+fi
+
 #
 # We need to establish suitable defaults for a 64-bit OS
 libnn=lib
@@@@ -370,7 +378,7 @@@@ AC_ARG_ENABLE(dynsimd,
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- configure.ac.orig	Fri Mar 14 09:02:59 2008
+++ configure.ac	Tue Mar 18 03:42:20 2008
@@@@ -87,12 +87,17 @@@@ case "${host_os}" in
d16 1
a16 3
+    # use -pthread for pthreads
+    LIBS="$LIBS -pthread"
+    CFLAGS="$CFLAGS -pthread"
d20 1
a20 2
@@@@ -101,11 +106,16 @@@@ case "${host_os}" in
     JACK_USE_MACH_THREADS=1
d23 1
d37 8
a44 1
@@@@ -216,9 +226,8 @@@@ AM_CONDITIONAL(USE_POSIX_SHM, $USE_POSIX_SHM)
a45 114
 JACK_CORE_CFLAGS="-I\$(top_srcdir)/config -I\$(top_srcdir) \
 -I\$(top_srcdir) -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS -Wall -g"
-JACK_OPT_CFLAGS="$JACK_CORE_CFLAGS -march=pentium2 -mcpu=pentium4 -O3 \
--ffast-math -funroll-loops -fprefetch-loop-arrays"
-JACK_CFLAGS="$JACK_CORE_CFLAGS $CFLAGS"
+JACK_OPT_CFLAGS="-ffast-math -funroll-loops -fprefetch-loop-arrays"
+CFLAGS="$JACK_CORE_CFLAGS $CFLAGS"
 
 dnl
 dnl figure out how best to optimize
@@@@ -263,6 +272,10 @@@@ if test "$target_cpu" = "powerpc"; then
 
 elif echo $target_cpu | egrep '(i.86|x86_64)' >/dev/null; then
 
+    if test x"$target_cpu" = x"i386" ; then
+        target_cpu="i`sysctl hw.model | sed -e 's#.*\(.86\)-class.*#\1#'`"
+    fi
+
     dnl Check for MMX/SSE assembly
     
     if test -r /proc/cpuinfo ; then
@@@@ -273,16 +286,28 @@@@ elif echo $target_cpu | egrep '(i.86|x86_64)' >/dev/nu
 	if echo $procflags | grep -s sse ; then
 	    cpu_supports_sse=yes
 	fi
+    else
+        if test x"$target_cpu" = x"x86_64" ; then
+            cpu_supports_mmx=yes
+            cpu_supports_sse=yes
+        else
+            cpu_supports_mmx=yes
+            if grep ^cpu /var/run/dmesg.boot | grep SSE ; then
+                cpu_supports_sse=yes
+            else
+                cpu_supports_sse=no
+            fi
+        fi
     fi
     
     AC_ARG_ENABLE(optimization-by-compiler,
-	[  --enable-optimization-by-compiler  use compiler (NOT processor) capabilities to determine optimization flags],,
-	optimization_by_compiler=no
+	[  --enable-optimization-by-compiler  use compiler (NOT processor) capabilities to determine optimization flags],[],
+	enable_optimization_by_compiler=no
     )
     
     AC_ARG_ENABLE(optimization-by-cpu,
-	[  --enable-optimization-by-cpu  use processor capabilities to determine optimization flags],,
-	optimization_by_cpu=yes
+	[  --enable-optimization-by-cpu  use processor capabilities to determine optimization flags],[],
+	enable_optimization_by_cpu=yes
     )
     
     AC_ARG_ENABLE(mmx,
@@@@ -302,7 +327,7 @@@@ elif echo $target_cpu | egrep '(i.86|x86_64)' >/dev/nu
 	    AC_DEFINE(USE_MMX, 1, [Define to 1 if MMX assembly is available.])
 	    AC_MSG_RESULT(yes)
 	    
-	    if test x$optimization_by_cpu = xyes ; then
+	    if test x$enable_optimization_by_cpu = xyes ; then
 		if test x$cpu_supports_mmx = xyes ; then
 		    MMX_FLAGS="-mmmx"
 		fi
@@@@ -326,7 +351,7 @@@@ elif echo $target_cpu | egrep '(i.86|x86_64)' >/dev/nu
 	    AC_DEFINE(USE_SSE, 1,
 		[Define to 1 if SSE assembly is available.])
 	    
-	    if test x$optimization_by_cpu = xyes ; then
+	    if test x$enable_optimization_by_cpu = xyes ; then
 		if test x$cpu_supports_sse = xyes ; then
 		    SSE_FLAGS="-msse -mfpmath=sse"
 		fi
@@@@ -345,14 +370,14 @@@@ elif echo $target_cpu | egrep '(i.86|x86_64)' >/dev/nu
     fi
 
     AC_DEFINE(x86, 1, "Nope it's intel")
-    COMMON_X86_OPT_FLAGS="-DREENTRANT -O3 -fomit-frame-pointer -ffast-math -funroll-loops"
+    COMMON_X86_OPT_FLAGS="-fomit-frame-pointer -ffast-math -funroll-loops"
     
     if test "$target_cpu" = "i586"; then
 	JACK_OPT_CFLAGS="-march=i586 "
     elif test "$target_cpu" = "i686"; then
 	JACK_OPT_CFLAGS="-march=i686"
     elif test "$target_cpu" = "x86_64"; then
-	JACK_OPT_CFLAGS="-march=k8"
+	JACK_OPT_CFLAGS="-march=i686"
     else
 	:
     fi
@@@@ -373,7 +398,7 @@@@ AC_ARG_ENABLE(optimize,
     AC_HELP_STRING([--enable-optimize],
 	[ask the compiler for its best optimizations]),
     [ if test x$enable_optimize != xno ; then
-	JACK_CFLAGS="$JACK_CORE_CFLAGS $JACK_OPT_CFLAGS"
+	CFLAGS="$CFLAGS $JACK_OPT_CFLAGS"
 	AC_MSG_WARN([optimization in use.........................])
       else
 	JACK_OPT_CFLAGS=""
@@@@ -382,13 +407,13 @@@@ AC_ARG_ENABLE(optimize,
     ]
 )
 
-AC_SUBST(JACK_CFLAGS)
+dnl AC_SUBST(JACK_CFLAGS)
 
 dnl
 dnl use JACK_CFLAGS for jackd compilation
 dnl 
 
-CFLAGS=$JACK_CFLAGS
+dnl CFLAGS=$JACK_CFLAGS
 
 # allow buffer resizing unless --disable-resize specified
 buffer_resizing=yes
@


1.1.1.1
log
@
import jack (jack-audio-connection-kit)

JACK is a low-latency audio server, written for POSIX conformant
operating systems. It can connect a number of different applications to
an audio device, as well as allowing them to share audio between
themselves. Its clients can run in their own processes (ie. as normal
applications), or can they can run within the JACK server (ie. as a
"plugin").

JACK was designed from the ground up for professional audio work, and
its design focuses on two key areas: synchronous execution of all
clients, and low latency operation.

ok kili@@

@
text
@@
