head	1.11;
access;
symbols
	OPENBSD_6_0:1.10.0.6
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.2
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.4
	OPENBSD_5_8_BASE:1.10
	OPENBSD_5_7:1.9.0.14
	OPENBSD_5_7_BASE:1.9
	OPENBSD_5_6:1.9.0.12
	OPENBSD_5_6_BASE:1.9
	OPENBSD_5_5:1.9.0.10
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.8
	OPENBSD_5_4_BASE:1.9
	OPENBSD_5_3:1.9.0.6
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.4
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.2
	OPENBSD_5_0:1.8.0.6
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.4
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.8.0.2
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.6.0.4
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	jakemsr:1.1.1.1
	jakemsr-20080322:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2016.11.13.19.22.34;	author jca;	state dead;
branches;
next	1.10;
commitid	P2tVKTVblSWgzQj7;

1.10
date	2015.05.05.19.45.19;	author sthen;	state Exp;
branches;
next	1.9;
commitid	fz8smaZvCGUbvSwh;

1.9
date	2012.01.24.08.03.52;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2010.06.07.01.44.38;	author jakemsr;	state Exp;
branches;
next	1.7;

1.7
date	2009.12.09.10.15.08;	author jakemsr;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.11.10.51.46;	author jakemsr;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.02.22.47.45;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.28.05.49.30;	author jakemsr;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.22.09.34.58;	author jakemsr;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.30.08.46.15;	author jakemsr;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.24.03.01.28;	author jakemsr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.03.24.03.01.28;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Update to jack-0.125.0

From David Carlier, input and ok danj@@ on a previous version.
@
text
@$OpenBSD: patch-jackd_engine_c,v 1.10 2015/05/05 19:45:19 sthen Exp $
--- jackd/engine.c.orig	Sat Nov 30 09:04:00 2013
+++ jackd/engine.c	Sun Apr 19 14:47:08 2015
@@@@ -1415,7 +1415,7 @@@@ handle_external_client_request (jack_engine_t *engine,
 	if ((r = read (client->request_fd, &req, sizeof (req)))
 	    < (ssize_t) sizeof (req)) {
 		if (r == 0) {
-#ifdef JACK_USE_MACH_THREADS
+#if defined(JACK_USE_MACH_THREADS) || defined(__OpenBSD__)
 			/* poll is implemented using
 			   select (see the macosx/fakepoll
 			   code). When the socket is closed
@@@@ -1636,9 +1636,13 @@@@ jack_server_thread (void *arg)
 			} else if (engine->pfd[i].revents & POLLIN) {
 
 				if (handle_external_client_request (engine, engine->pfd[i].fd)) {
+#if 0
 					jack_error ("could not handle external"
 						    " client request");
 					jack_engine_signal_problems (engine);
+#else
+					;
+#endif
 				}
 			}
 		}
@


1.10
log
@update to JACK 0.124.1, from Eric Lalonde.
@
text
@d1 1
a1 1
$OpenBSD: patch-jackd_engine_c,v 1.9 2012/01/24 08:03:52 ajacoutot Exp $
@


1.9
log
@Update to jack-0.121.3.

README changes from rathov@@
tweaks and ok shadchin@@
@
text
@d1 4
a4 4
$OpenBSD$
--- jackd/engine.c.orig	Mon Jan 23 14:37:43 2012
+++ jackd/engine.c	Mon Jan 23 14:38:38 2012
@@@@ -1491,7 +1491,7 @@@@ handle_external_client_request (jack_engine_t *engine,
d13 1
a13 1
@@@@ -1676,9 +1676,13 @@@@ jack_server_thread (void *arg)
@


1.8
log
@* clean up sndio(7) driver
* update README.OpenBSD
* add patches to let it build on gcc2 archs (from Sebastian Reitenbach)
* disable audio(4) driver
@
text
@d1 4
a4 4
$OpenBSD: patch-jackd_engine_c,v 1.7 2009/12/09 10:15:08 jakemsr Exp $
--- jackd/engine.c.orig	Tue Dec  2 08:29:23 2008
+++ jackd/engine.c	Fri Jan  8 14:02:43 2010
@@@@ -1383,7 +1383,7 @@@@ handle_external_client_request (jack_engine_t *engine,
d13 1
a13 1
@@@@ -1561,9 +1561,13 @@@@ jack_server_thread (void *arg)
a26 49
@@@@ -2422,6 +2426,9 @@@@ jack_notify_all_port_interested_clients (jack_engine_t
 {
 	JSList *node;
 	jack_event_t event;
+	jack_client_internal_t* src_client;
+	jack_client_internal_t* dst_client;
+	jack_client_internal_t* client;
   
 	event.type = (connected ? PortConnected : PortDisconnected);
 	event.x.self_id = a;
@@@@ -2430,11 +2437,11 @@@@ jack_notify_all_port_interested_clients (jack_engine_t
 	/* GRAPH MUST BE LOCKED : see callers of jack_send_connection_notification() 
 	 */
 
-	jack_client_internal_t* src_client = jack_client_internal_by_id (engine, src);
-	jack_client_internal_t* dst_client = jack_client_internal_by_id (engine, dst);
+	src_client = jack_client_internal_by_id (engine, src);
+	dst_client = jack_client_internal_by_id (engine, dst);
 
 	for (node = engine->clients; node; node = jack_slist_next (node)) {
-		jack_client_internal_t* client = (jack_client_internal_t*) node->data;
+		client = (jack_client_internal_t*) node->data;
 		if (src_client != client &&  dst_client  != client && client->control->port_connect_cbset != FALSE) {
 			
 			/* one of the ports belong to this client or it has a port connect callback */
@@@@ -2448,6 +2455,10 @@@@ jack_deliver_event (jack_engine_t *engine, jack_client
 		    jack_event_t *event)
 {
 	char status;
+	jack_time_t poll_timeout;
+	int poll_ret;
+	jack_time_t then;
+	jack_time_t now;
 
 	/* caller must hold the graph lock */
 
@@@@ -2539,10 +2550,8 @@@@ jack_deliver_event (jack_engine_t *engine, jack_client
  				struct pollfd pfd[1];
  				pfd[0].fd = client->event_fd;
  				pfd[0].events = POLLERR|POLLIN|POLLHUP|POLLNVAL;
- 				jack_time_t poll_timeout = JACKD_CLIENT_EVENT_TIMEOUT;
- 				int poll_ret;
-				jack_time_t then = jack_get_microseconds ();
-				jack_time_t now;
+ 				poll_timeout = JACKD_CLIENT_EVENT_TIMEOUT;
+				then = jack_get_microseconds ();
 				
 #ifdef __linux
 			again:
@


1.7
log
@sndio_driver.c:
- make it work with 24-bit formats (as with azalia and envy)
- use the correct member of struct sio_par for the buffer size
- check both poll(2) revents as well as calculated buffer positions
to know when we can read/write data
sun_driver.c:
- make it work with 24-bit formats (as with azalia and envy)
jackd/engine.c:
- don't spam error messages every time a client quits
add README.OpenBSD
@
text
@d1 1
a1 1
$OpenBSD: patch-jackd_engine_c,v 1.6 2009/01/11 10:51:46 jakemsr Exp $
d3 1
a3 1
+++ jackd/engine.c	Mon Dec  7 22:18:52 2009
d27 49
@


1.6
log
@- update to 0.116.1, mostly stability/reliability fixes
- add sndio backend

playback under aucat server is pretty solid.  for full-duplex,
starting aucat with 'aucat -l -b 2048' and jackd with just
'jackd -d sndio' seems to work best for me.  we want low latency
anyway, right ;)
@
text
@d1 3
a3 3
$OpenBSD: patch-jackd_engine_c,v 1.5 2009/01/02 22:47:45 ajacoutot Exp $
--- jackd/engine.c.orig	Sun Jun 15 01:46:11 2008
+++ jackd/engine.c	Wed Dec 31 14:51:46 2008
d13 14
@


1.5
log
@- add a patch from upstream SVN to allow compiling with DEBUG

"if it works for you" jakemsr@@ (maintainer)
@
text
@d1 1
a1 1
$OpenBSD: patch-jackd_engine_c,v 1.4 2008/06/28 05:49:30 jakemsr Exp $
d9 1
a9 1
+#if defined(JACK_USE_MACH_THREADS) || defined __OpenBSD__
a12 10
@@@@ -2178,8 +2178,7 @@@@ jack_run_one_cycle (jack_engine_t *engine, jack_nframe
 
   unlock:
 	jack_unlock_graph (engine);
-	DEBUG("cycle finished, status = %d, graph locked = %d", 
-	      ret, leave_graph_locked);
+	DEBUG("cycle finished, status = %d", ret);
 
 	return ret;
 }
@


1.4
log
@maintainence update, plus
- fix build on alpha by not comparing a va_list to NULL.  problem
  noticed and fix tested by merdely@@.
- fix possible 100% cpu usage in full-duplex mode
- fix net client/server
- add @@bin markers to PLIST
@
text
@d1 3
a3 3
$OpenBSD$
--- jackd/engine.c.orig	Sun Jun 15 12:49:49 2008
+++ jackd/engine.c	Sun Jun 15 12:55:19 2008
d13 10
@


1.3
log
@
update to 0.111.2.1169

- don't bother trying to fix compiler optimization flag tests.  they're
badly broken/linux spcific, and we don't use them anyway.
- the net source client became a "real" client (executable), instead of
an "in process" client (plugin)
- previous sun_driver patches accepted upstream, plus:
* fix cycle timing in duplex mode by moving calculations and function
calls out of the poll() synchronization loop
* shorten xrun and silence writing/reading messages
* remove unused variables
* attempt to stop continuous playback underruns in duplex mode that are
caused by the capture buffer overrunning
* try harder to make sure we have pristine buffers after
sun_driver_start()
* use native endian audio encodings
* report a delay when poll() times out, instead of effectively running
a null cycle


now jack works on my r10k sgi :)
@
text
@d1 7
a7 7
$OpenBSD: patch-jackd_engine_c,v 1.2 2008/03/30 08:46:15 jakemsr Exp $
--- jackd/engine.c.orig	Mon Apr 21 21:53:02 2008
+++ jackd/engine.c	Mon Apr 21 21:56:34 2008
@@@@ -1471,10 +1471,8 @@@@ jack_server_thread (void *arg)
 				    (engine, pfd[i].fd)) {
 					jack_error ("could not handle external"
 						    " client request");
d9 4
a12 17
-                                    /* poll is implemented using
-				       select (see the macosx/fakepoll
-				       code). When the socket is closed
+#ifdef JACK_HOST_HAS_BSD_POLL
+                                    /* When the socket is closed
 				       select does not return any error,
 				       POLLIN is true and the next read
 				       will return 0 bytes. This
@@@@ -1484,7 +1482,7 @@@@ jack_server_thread (void *arg)
 				       and remove the client.
                                     */
                                     jack_client_disconnect(engine, pfd[i].fd);
-#endif /* JACK_USE_MACH_THREADS */
+#endif /* JACK_HOST_HAS_BSD_POLL */
 				}
 			}
 		}
@


1.2
log
@- restore the 10 second sleep in the watchdog thread by using
nanosleep(2) instead of usleep(3), which is limited to 1 second.

- stop clients from getting "zombified" after connection graph
changes by ignoring errors from read(2)ing data that isn't used.
@
text
@d1 4
a4 22
$OpenBSD: patch-jackd_engine_c,v 1.1.1.1 2008/03/24 03:01:28 jakemsr Exp $
--- jackd/engine.c.orig	Tue Mar 18 03:24:21 2008
+++ jackd/engine.c	Sat Mar 29 19:15:00 2008
@@@@ -908,11 +908,16 @@@@ static void *
 jack_watchdog_thread (void *arg)
 {
 	jack_engine_t *engine = (jack_engine_t *) arg;
+	struct timespec timo;
 
+	/* JACKD_WATCHDOG_TIMEOUT is specified in msec */
+	timo.tv_sec = JACKD_WATCHDOG_TIMEOUT / 1000;
+	timo.tv_nsec = (JACKD_WATCHDOG_TIMEOUT - (timo.tv_sec * 1000)) * 1000;
+
 	engine->watchdog_check = 0;
 
 	while (1) {
-		usleep (1000 * JACKD_WATCHDOG_TIMEOUT);
+		nanosleep (&timo, NULL);
 		if (!engine->freewheeling && engine->watchdog_check == 0) {
 
 			jack_error ("jackd watchdog: timeout - killing jackd");
@@@@ -1468,10 +1473,8 @@@@ jack_server_thread (void *arg)
d17 1
a17 1
@@@@ -1481,7 +1484,7 @@@@ jack_server_thread (void *arg)
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 11
a13 2
+++ jackd/engine.c	Fri Mar 21 00:01:11 2008
@@@@ -912,7 +912,7 @@@@ jack_watchdog_thread (void *arg)
d18 1
a18 1
+		usleep (100 * JACKD_WATCHDOG_TIMEOUT);
d22 1
a22 1
@@@@ -1468,10 +1468,8 @@@@ jack_server_thread (void *arg)
d35 1
a35 1
@@@@ -1481,7 +1479,7 @@@@ jack_server_thread (void *arg)
@


1.1.1.1
log
@
import jack (jack-audio-connection-kit)

JACK is a low-latency audio server, written for POSIX conformant
operating systems. It can connect a number of different applications to
an audio device, as well as allowing them to share audio between
themselves. Its clients can run in their own processes (ie. as normal
applications), or can they can run within the JACK server (ie. as a
"plugin").

JACK was designed from the ground up for professional audio work, and
its design focuses on two key areas: synchronous execution of all
clients, and low latency operation.

ok kili@@

@
text
@@
