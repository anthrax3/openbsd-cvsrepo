head	1.6;
access;
symbols
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.4.0.6
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.4
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.2
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2;
locks; strict;
comment	@# @;


1.6
date	2012.01.24.08.03.52;	author ajacoutot;	state dead;
branches;
next	1.5;

1.5
date	2010.06.07.01.44.38;	author jakemsr;	state Exp;
branches;
next	1.4;

1.4
date	2009.02.04.00.02.16;	author merdely;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.11.10.51.46;	author jakemsr;	state dead;
branches;
next	1.2;

1.2
date	2008.06.28.05.49.31;	author jakemsr;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.30.08.46.15;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to jack-0.121.3.

README changes from rathov@@
tweaks and ok shadchin@@
@
text
@$OpenBSD: patch-libjack_client_c,v 1.5 2010/06/07 01:44:38 jakemsr Exp $
--- libjack/client.c.orig	Thu Dec  4 11:30:27 2008
+++ libjack/client.c	Wed May 19 20:27:23 2010
@@@@ -974,10 +974,7 @@@@ jack_client_open_aux (const char *client_name,
 	}
 
 	/* parse variable arguments */
-	if (ap)
         jack_varargs_parse(options, ap, &va);
-    else
-        jack_varargs_init(&va);
 
 	/* External clients need to know where the tmpdir used for
 	   communication with the server lives
@@@@ -1110,8 +1107,9 @@@@ jack_client_open_aux (const char *client_name,
 jack_client_t* jack_client_open(const char* ext_client_name, jack_options_t options, jack_status_t* status, ...)
 {
 	va_list ap;
+	 jack_client_t* res;
 	va_start(ap, status);
-	jack_client_t* res = jack_client_open_aux(ext_client_name, options, status, ap);
+	res = jack_client_open_aux(ext_client_name, options, status, ap);
 	va_end(ap);
 	return res;
 }
@@@@ -1119,10 +1117,11 @@@@ jack_client_t* jack_client_open(const char* ext_client
 jack_client_t *
 jack_client_new (const char *client_name)
 {
+	va_list va;
 	jack_options_t options = JackUseExactName;
 	if (getenv("JACK_START_SERVER") == NULL)
 		options |= JackNoStartServer;
-	return jack_client_open_aux (client_name, options, NULL, NULL);
+	return jack_client_open_aux (client_name, options, NULL, va);
 }
 
 char *
@@@@ -1694,6 +1693,7 @@@@ jack_client_thread_aux (void *arg)
 {
 	jack_client_t *client = (jack_client_t *) arg;
 	jack_client_control_t *control = client->control;
+	int status;
 
 	pthread_mutex_lock (&client_lock);
 	client->thread_ok = TRUE;
@@@@ -1723,7 +1723,7 @@@@ jack_client_thread_aux (void *arg)
 
 			while (1) {
 				DEBUG("client calls process()");
-				int status = (client->process (control->nframes, 
+				status = (client->process (control->nframes, 
 								client->process_arg) ==
 					      control->nframes);
 				control->state = Finished;
@


1.5
log
@* clean up sndio(7) driver
* update README.OpenBSD
* add patches to let it build on gcc2 archs (from Sebastian Reitenbach)
* disable audio(4) driver
@
text
@d1 1
a1 1
$OpenBSD: patch-libjack_client_c,v 1.4 2009/02/04 00:02:16 merdely Exp $
@


1.4
log
@Fix build on alpha.

ok jakemsr@@
@
text
@d1 3
a3 3
$OpenBSD$
--- libjack/client.c.orig	Thu Dec  4 03:30:27 2008
+++ libjack/client.c	Tue Feb  3 16:49:16 2009
d15 12
a26 1
@@@@ -1119,10 +1116,11 @@@@ jack_client_t* jack_client_open(const char* ext_client
d39 17
@


1.3
log
@- update to 0.116.1, mostly stability/reliability fixes
- add sndio backend

playback under aucat server is pretty solid.  for full-duplex,
starting aucat with 'aucat -l -b 2048' and jackd with just
'jackd -d sndio' seems to work best for me.  we want low latency
anyway, right ;)
@
text
@d1 4
a4 4
$OpenBSD: patch-libjack_client_c,v 1.2 2008/06/28 05:49:31 jakemsr Exp $
--- libjack/client.c.orig	Thu May 22 23:20:23 2008
+++ libjack/client.c	Mon Jun 16 20:56:49 2008
@@@@ -969,10 +969,7 @@@@ jack_client_open_aux (const char *client_name,
d15 1
a15 1
@@@@ -1114,10 +1111,13 @@@@ jack_client_t* jack_client_open(const char* ext_client
d19 1
a19 2
+	va_list ap;
+
d24 1
a24 2
+
+	return jack_client_open_aux(client_name, options, NULL, ap);
a27 49
@@@@ -1519,6 +1519,8 @@@@ jack_client_core_wait (jack_client_t* client)
 static int
 jack_wake_next_client (jack_client_t* client)
 {
+	struct pollfd pfds[1];
+	int pret = 0;
 	char c = 0;
 
 	if (write (client->graph_next_fd, &c, sizeof (c))
@@@@ -1530,20 +1532,29 @@@@ jack_wake_next_client (jack_client_t* client)
 		return -1;
 	}
 	
-	DEBUG ("client sent message to next stage by %" PRIu64
-	       ", client reading on graph_wait_fd==%d", 
-	       jack_get_microseconds(), client->graph_wait_fd);
+	DEBUG ("client sent message to next stage by %" PRIu64 "",
+	       jack_get_microseconds());
 	
 	DEBUG("reading cleanup byte from pipe %d\n", client->graph_wait_fd);
 	
-	if ((read (client->graph_wait_fd, &c, sizeof (c))
-	     != sizeof (c))) {
-		jack_error ("cannot complete execution of the "
-			    "processing graph (%s)",
-			    strerror(errno));
-		return -1;
+	pfds[0].fd = client->graph_wait_fd;
+	pfds[0].events = POLLIN;
+
+	pret = poll(pfds, 1, 0);
+
+	if (pret > 0 && (pfds[0].revents & POLLIN)) {
+		if ((read (client->graph_wait_fd, &c, sizeof (c))
+		     != sizeof (c))) {
+			jack_error ("cannot complete execution of the "
+				    "processing graph (%s)",
+				    strerror(errno));
+			return -1;
+		}
+	} else {
+		DEBUG("cleanup byte from pipe %d not available?\n",
+			client->graph_wait_fd);
 	}
-	
+
 	return 0;
 }
 
@


1.2
log
@maintainence update, plus
- fix build on alpha by not comparing a va_list to NULL.  problem
  noticed and fix tested by merdely@@.
- fix possible 100% cpu usage in full-duplex mode
- fix net client/server
- add @@bin markers to PLIST
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1
log
@- restore the 10 second sleep in the watchdog thread by using
nanosleep(2) instead of usleep(3), which is limited to 1 second.

- stop clients from getting "zombified" after connection graph
changes by ignoring errors from read(2)ing data that isn't used.
@
text
@d2 54
a55 6
--- libjack/client.c.orig	Sat Mar 29 21:30:38 2008
+++ libjack/client.c	Sat Mar 29 21:50:43 2008
@@@@ -1533,7 +1533,7 @@@@ jack_wake_next_client (jack_client_t* client)
 		jack_error ("cannot complete execution of the "
 			    "processing graph (%s)",
 			    strerror(errno));
d57 16
a72 1
+		// return -1;
d74 2
a75 1
 	
d77 2
@

