head	1.2;
access;
symbols
	jakemsr:1.1.1.1 jakemsr-20080322:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2008.04.22.09.34.58;	author jakemsr;	state dead;
branches;
next	1.1;

1.1
date	2008.03.24.03.01.29;	author jakemsr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.03.24.03.01.29;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
update to 0.111.2.1169

- don't bother trying to fix compiler optimization flag tests.  they're
badly broken/linux spcific, and we don't use them anyway.
- the net source client became a "real" client (executable), instead of
an "in process" client (plugin)
- previous sun_driver patches accepted upstream, plus:
* fix cycle timing in duplex mode by moving calculations and function
calls out of the poll() synchronization loop
* shorten xrun and silence writing/reading messages
* remove unused variables
* attempt to stop continuous playback underruns in duplex mode that are
caused by the capture buffer overrunning
* try harder to make sure we have pristine buffers after
sun_driver_start()
* use native endian audio encodings
* report a delay when poll() times out, instead of effectively running
a null cycle


now jack works on my r10k sgi :)
@
text
@$OpenBSD: patch-drivers_sun_sun_driver_h,v 1.1 2008/03/24 03:01:29 jakemsr Exp $
--- drivers/sun/sun_driver.h.orig	Tue Mar 18 03:24:22 2008
+++ drivers/sun/sun_driver.h	Fri Mar 21 14:35:28 2008
@@@@ -51,12 +51,13 @@@@ typedef jack_default_audio_sample_t jack_sample_t;
 
 typedef struct _sun_driver
 {
-	JACK_DRIVER_DECL
+	JACK_DRIVER_NT_DECL
 
 	jack_nframes_t sample_rate;
 	jack_nframes_t period_size;
 	unsigned int nperiods;
 	int bits;
+	int sample_bytes;
 	unsigned int capture_channels;
 	unsigned int playback_channels;
 
@@@@ -73,26 +74,22 @@@@ typedef struct _sun_driver
 	void *indevbuf;
 	void *outdevbuf;
 
+	int poll_timeout;
+	jack_time_t poll_last;
+	jack_time_t poll_next;
 	float iodelay;
+
 	jack_nframes_t sys_in_latency;
 	jack_nframes_t sys_out_latency;
 
 	JSList *capture_ports;
 	JSList *playback_ports;
 
-	jack_engine_t *engine;
 	jack_client_t *client;
 
-	int playback_ready;
-	int capture_ready;
-
 	int playback_drops;
 	int capture_drops;
 
-	volatile int run;
-	pthread_t io_thread;
-	pthread_mutex_t io_mutex;
-	sem_t sem_start;
 } sun_driver_t;
 
 
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.1.1
log
@
import jack (jack-audio-connection-kit)

JACK is a low-latency audio server, written for POSIX conformant
operating systems. It can connect a number of different applications to
an audio device, as well as allowing them to share audio between
themselves. Its clients can run in their own processes (ie. as normal
applications), or can they can run within the JACK server (ie. as a
"plugin").

JACK was designed from the ground up for professional audio work, and
its design focuses on two key areas: synchronous execution of all
clients, and low latency operation.

ok kili@@

@
text
@@
