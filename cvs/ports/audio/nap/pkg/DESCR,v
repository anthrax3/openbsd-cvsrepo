head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.54
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.52
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.48
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.50
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.46
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.44
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.42
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.40
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.38
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.36
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.34
	OPENBSD_5_0:1.4.0.32
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.30
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.28
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.26
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.24
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.22
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.20
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.3.0.12
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.10
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.8
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.6
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.4
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_TRACKING_SWITCH:1.3
	OPENBSD_2_9:1.3.0.2
	OPENBSD_2_9_BASE:1.3
	pvalchev_20010204:1.1.1.1
	reinhard:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2003.12.15.21.42.12;	author naddy;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.17.10.44.05;	author reinhard;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.04.10.53.47;	author reinhard;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.04.18.55.33;	author reinhard;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.04.18.55.33;	author reinhard;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove WWW lines
@
text
@A simple curses implementation of the napster client,
originally written for windows.

Napster is a great tool for exploring and experiencing
artists and music you've never heard before, using protocol
for sharing MP3 files between users.  With Napster, the
files stay on the user machine and never pass through the
server.

The server has the ability to search for particular files,
initializing direct transfer between the clients.

The original author of nap is Kevin Sullivan, the 'ps'
releases are maintained by Peter Selinger.
@


1.3
log
@update to nap-1.4.4-ps7
*) enable separate build, change version managing style
*) remove pkg/MESSAGE and unneded patches
*) better DESCR
*) bump NEED_VERSION
Brief Changelog:
- After asking you for the needed information, nap now creates the
  .napconf file automatically.  No sample distfile anymore.
- Added some keybindings for the main window.
- Fixed Ctrl-C so that it can break a nested loop; Ctrl-L so it really
  redraws the whole screen from scratch.

from maintainer
@
text
@a14 2

WWW: ${HOMEPAGE}
@


1.2
log
@update to nap-1.4.4-ps-2

The nap isn't really maintained by the real author anymore.  Instead,
there is another project which aims to continue the original author's
idea.  The new version is A LOT more stable, with various new fixes and
improvements.
The homepage is http://theory.stanford.edu/~selinger/nap/

Quick changelog with the main things:
- fixed a security bug (string format attack)
  ( http://www.shmoo.com/mail/bugtraq/sep00/msg00942.shtml )
- added --user, --pass, --email, --upload, --download, --dataport,
  --connection, --maxusers options to override settings in config file.
- look for config and library files in user's home directory, rather
  than current directory. Also, renamed these files more discreetly as
  .napconf and .nap_shared.
- fixed several memory leaks and null pointer bugs.

from maintainer
@
text
@d6 3
a8 2
for sharing MP3 files between users. With Napster, the files
stay on the user machine, never passing through the server.
d14 1
a14 1
releases are managed by Peter Selinger.
@


1.1
log
@Initial revision
@
text
@d12 3
@


1.1.1.1
log
@A simple curses implementation of the napster client,
originally written for windows.
 
Napster is a great tool for exploring and experiencing
artists and music you've never heard before, using protocol
for sharing MP3 files between users. With Napster, the files
stay on the user machine, never passing through the server.
 
The server has the ability to search for particular files,
initializing direct transfer between the clients.

MAINTAINER=     Peter Valchev <pvalchev@@toxiclinux.org>
@
text
@@
