head	1.4;
access;
symbols
	pvalchev_20010204:1.1.1.1 reinhard:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2001.07.02.00.50.23;	author pvalchev;	state dead;
branches;
next	1.3;

1.3
date	2001.05.09.22.38.00;	author pvalchev;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.08.13.33.24;	author reinhard;	state dead;
branches;
next	1.1;

1.1
date	2001.02.04.18.55.33;	author reinhard;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.04.18.55.33;	author reinhard;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update to nap-1.4.5
After more than 2 months, this is an overdue release.  There are a lot
of bugfixes and new features, see the distributed ChangeLog for details.

Main changes:
* The main new feature is that the OpenNap servers are now the default
for nap.  The reason for this is that Napster Inc. has modified their
servers to use a new client auth scheme, which means that nap users
can no longer connect to their servers.  Nap will automatically
download a list of available servers from napigator.com, and then
connect to the first available one.
* Nap's sourceforge page has been updated and now fully operational.
You are encouraged to use sourceforge's facilities for bug reports,
feature requests, etc.
@
text
@$OpenBSD: patch-nap_c,v 1.3 2001/05/09 22:38:00 pvalchev Exp $
--- nap.c.orig	Mon Apr 23 13:23:36 2001
+++ nap.c	Sat May  5 23:32:26 2001
@@@@ -1545,7 +1545,9 @@@@ unsigned long int swapl(unsigned long in
 }
 
 /* just like connect(2), except that we time out after t seconds. No
-   timeout if t=0. If a timeout occurred, we set errno to ETIMEDOUT. */
+   timeout if t=0. If a timeout occurred, we set errno to ETIMEDOUT.
+   If we return -1, then errno is either set to a valid error number,
+   or to 255 if there was an unknown error. */
 int connect_t(int fd, struct sockaddr *serv_addr, int addlen, int t) 
 {
   int status;
@@@@ -1590,8 +1592,6 @@@@ int connect_t(int fd, struct sockaddr *s
     return(-1);
   } else if (WEXITSTATUS(status)) {
     errno = WEXITSTATUS(status);
-    if (errno==255)
-      errno = ECANCELED;
     return(-1);
   } else {
     return(0);
@@@@ -1638,7 +1638,7 @@@@ int conn(char *host, unsigned short port
     }
     
     if (connect_t(s, (struct sockaddr *)&dst, sizeof(dst), timeout) == -1) {
-      wp(wchan, "Error connecting to %s: %s\n", host, sys_errlist[errno]);
+      wp(wchan, "Error connecting to %s: %s\n", host, errno!=255 ? sys_errlist[errno] : "unknown error");
       drw(wchan);
       close(s);
       return(-1);
@@@@ -1707,7 +1707,7 @@@@ int conn(char *host, unsigned short port
   
   if (connect_t(s, (struct sockaddr *)&dst, sizeof(dst), timeout) == -1)
   {
-    wp(wchan, "Error connecting to %s:%d: %s\n", buf, port, sys_errlist[errno]);
+    wp(wchan, "Error connecting to %s:%d: %s\n", buf, port, errno!=255 ? sys_errlist[errno] : "unknown error");
     drw(wchan);
     close(s);
     free(buf);
@@@@ -1907,10 +1907,10 @@@@ void checkhotlist(int s, char *fn)
    announce the absense of news as well, otherwise be quiet. Note:
    this function may be executed in a child process. Return 1 if there
    was news, 0 if there was none, and -1 or -2 if we could not gain
-   access. In case of -1, errno is set, and in case -2, h_errno is
-   set. If fd is 1, do some special formatting, write in black and
-   white, and send the output through wp() for the log file's
-   benefit. */
+   access. In case of -1, errno is set (except that 255 is a special
+   value "unknown error"), and in case -2, h_errno is set. If fd is 1,
+   do some special formatting, write in black and white, and send the
+   output through wp() for the log file's benefit. */
 int checknv(int fd, int timeout)
 {
   int s, r;
@


1.3
log
@Update to nap-1.4.4-ps9:
- config files are moved to ~/.nap directory (old files are
automatically moved there for now)
- fixed several memory leaks, general code cleanup
reviewed by naddy@@
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.4 2001/03/31 22:54:41 espie Exp $
@


1.2
log
@no longer needed; from maintainer
@
text
@d1 56
a56 13
$OpenBSD: patch-nap_c,v 1.1 2001/02/04 18:55:33 reinhard Exp $
--- nap.c.orig	Tue Jan 23 19:33:00 2001
+++ nap.c	Tue Jan 23 19:33:37 2001
@@@@ -14,6 +14,9 @@@@
 #ifndef MCURSES
   #include <ncurses.h>
 #endif
+#ifndef __OpenBSD__
+#include <curses.h>
+#endif
 #include <stdlib.h>
 #include <signal.h>
 #include <string.h>
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD: update-patches,v 1.3 2000/06/09 17:08:37 espie Exp $
@


1.1.1.1
log
@A simple curses implementation of the napster client,
originally written for windows.
 
Napster is a great tool for exploring and experiencing
artists and music you've never heard before, using protocol
for sharing MP3 files between users. With Napster, the files
stay on the user machine, never passing through the server.
 
The server has the ability to search for particular files,
initializing direct transfer between the clients.

MAINTAINER=     Peter Valchev <pvalchev@@toxiclinux.org>
@
text
@@
