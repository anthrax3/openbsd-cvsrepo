head	1.8;
access;
symbols
	OPENBSD_5_6:1.7.0.2
	OPENBSD_5_6_BASE:1.7;
locks; strict;
comment	@# @;


1.8
date	2014.09.29.09.26.00;	author dcoppa;	state dead;
branches;
next	1.7;
commitid	gi4RekBGBM0j0LSb;

1.7
date	2014.07.11.16.18.55;	author dcoppa;	state Exp;
branches;
next	1.6;
commitid	RlpFNiahFEMpWDuv;

1.6
date	2014.05.20.14.51.46;	author dcoppa;	state dead;
branches;
next	1.5;

1.5
date	2014.03.27.10.13.14;	author dcoppa;	state Exp;
branches;
next	1.4;

1.4
date	2013.09.23.08.40.24;	author dcoppa;	state dead;
branches;
next	1.3;

1.3
date	2013.09.02.11.58.40;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.12.14.45.06;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2012.05.28.09.47.00;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.8
log
@
Update to pianobar-2014.09.28
@
text
@$OpenBSD: patch-src_libpiano_response_c,v 1.7 2014/07/11 16:18:55 dcoppa Exp $

commit 597b2ec46a3708d50ab9620d5bb4fdbd19cf8a6c
Author: Lars-Dominik Braun <lars@@6xq.net>
Date:   Sat Jun 21 12:30:41 2014 +0200

piano: Fix segfault in GET_STATION_INFO response parser

Pandora added two new integer values to the feedback object, which
breaks the assumption that all values are arrays. Since we know the
names of the interesting keys (thumbsUp and thumbsDown) just use them
instead of iterating over all available keys.

--- src/libpiano/response.c.orig	Sun Jun  8 15:26:29 2014
+++ src/libpiano/response.c	Fri Jul 11 18:11:16 2014
@@@@ -568,7 +568,14 @@@@ PianoReturn_t PianoResponse (PianoHandle_t *ph, PianoR
 			json_object *feedback = json_object_object_get (result,
 					"feedback");
 			if (feedback != NULL) {
-				json_object_object_foreach (feedback, key, val) {
+				static const char * const keys[] = {"thumbsUp", "thumbsDown"};
+				for (size_t i = 0; i < sizeof (keys)/sizeof (*keys); i++) {
+					json_object * const val = json_object_object_get (feedback,
+							keys[i]);
+					if (val == NULL) {
+						continue;
+					}
+					assert (json_object_is_type (val, json_type_array));
 					for (int i = 0; i < json_object_array_length (val); i++) {
 						json_object *s = json_object_array_get_idx (val, i);
 						PianoSong_t *feedbackSong;
@


1.7
log
@
Update to pianobar-2014.06.08
@
text
@d1 1
a1 1
$OpenBSD$
@


1.6
log
@
Update to 2014.04.22 snapshot.

It now uses ffmpeg instead of faad+libmad.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_libpiano_response_c,v 1.5 2014/03/27 10:13:14 dcoppa Exp $
d3 1
a3 1
commit 90f6ffbdb7c7cc07cb02b69fcfb3a3844f0180b7
d5 1
a5 1
Date:   Fri Mar 14 11:47:26 2014 +0100
d7 1
a7 1
piano: Request track length
d9 4
a12 3
The returned length is used as first length estimate before enough
audio data arrives to show the real length and for the eventcmd
API.
d14 18
a31 11
--- src/libpiano/response.c.orig	Sun Sep 15 15:54:04 2013
+++ src/libpiano/response.c	Thu Mar 27 10:30:08 2014
@@@@ -277,6 +277,8 @@@@ PianoReturn_t PianoResponse (PianoHandle_t *ph, PianoR
 				song->detailUrl = PianoJsonStrdup (s, "songDetailUrl");
 				song->fileGain = json_object_get_double (
 						json_object_object_get (s, "trackGain"));
+				song->length = json_object_get_int (
+						json_object_object_get (s, "trackLength"));
 				switch (json_object_get_int (json_object_object_get (s,
 						"songRating"))) {
 					case 1:
@


1.5
log
@
Bugfixes from upstream:

libpiano: Request track length
(upstream git commit 90f6ffbdb7c7cc07cb02b69fcfb3a3844f0180b7)

libwaitress: Increase the receive buffer
(upstream git commit 8e685c992516834e35bcccea1f61c39a9d847e2f)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@Update to release 2013.09.15
@
text
@d1 1
a1 1
$OpenBSD: patch-src_libpiano_response_c,v 1.3 2013/09/02 11:58:40 dcoppa Exp $
d3 3
a5 2
piano: replace station with same id.
(upstream git commit 6e82d7e6852fdac4a178445b3e2bcdb6d4e0fa63)
d7 17
a23 37
--- src/libpiano/response.c.orig	Sun May 19 12:58:18 2013
+++ src/libpiano/response.c	Mon Sep  2 11:28:04 2013
@@@@ -438,15 +438,31 @@@@ PianoReturn_t PianoResponse (PianoHandle_t *ph, PianoR
 
 			PianoJsonParseStation (result, tmpStation);
 
-			/* start new linked list or append */
 			if (ph->stations == NULL) {
 				ph->stations = tmpStation;
 			} else {
-				PianoStation_t *curStation = ph->stations;
+				PianoStation_t *curStation = ph->stations, *prevStation = NULL;
 				while (curStation->next != NULL) {
+					/* replace if station with same id exists already */
+					if (strcmp (curStation->id, tmpStation->id) == 0) {
+						if (prevStation == NULL) {
+							ph->stations = tmpStation;
+						} else {
+							prevStation->next = tmpStation;
+						}
+						tmpStation->next = curStation->next;
+
+						PianoDestroyStation (curStation);
+						free (curStation);
+						break;
+					}
+					prevStation = curStation;
 					curStation = curStation->next;
 				}
-				curStation->next = tmpStation;
+				/* append otherwise */
+				if (tmpStation->next == NULL) {
+					curStation->next = tmpStation;
+				}
 			}
 			break;
 		}
@


1.3
log
@
Increase buffer size to fix display of song lists with more than
999 items (upstream git commit bacc60b7a8e7854ca14b5a5f65429500831f20cb)

piano: replace station with same id.
(upstream git commit 6e82d7e6852fdac4a178445b3e2bcdb6d4e0fa63)

waitress: try all addresses returned by getaddrinfo.
Fix connection failures on mixed IPv4/IPv6 systems.
(upstream git commit f1ddd582ba5c314202fbed98d7aa491b06b2dee2)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Update to snapshot 2012.06.10, chasing changes in pandora's api.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_libpiano_response_c,v 1.1 2012/05/28 09:47:00 dcoppa Exp $
d3 2
a4 3
Fix ambiguous error message "Invalid Partner Login" on wrong
email address/password failure
(upstream git commit 81bf363ac69e0036562434ca0e7153c3e624c8c3)
d6 21
a26 6
--- src/libpiano/response.c.orig	Sun May  6 16:33:54 2012
+++ src/libpiano/response.c	Mon May 28 10:51:30 2012
@@@@ -100,6 +100,17 @@@@ PianoReturn_t PianoResponse (PianoHandle_t *ph, PianoR
 			ret = PIANO_RET_INVALID_RESPONSE;
 		} else {
 			ret = json_object_get_int (code)+PIANO_RET_OFFSET;
d28 11
a38 8
+			if (ret == PIANO_RET_P_INVALID_PARTNER_LOGIN &&
+					req->type == PIANO_REQUEST_LOGIN) {
+				PianoRequestDataLogin_t *reqData = req->data;
+				if (reqData->step == 1) {
+					/* return value is ambiguous, as both, partnerLogin and
+					 * userLogin return INVALID_PARTNER_LOGIN. Fix that to provide
+					 * better error messages. */
+					ret = PIANO_RET_INVALID_LOGIN;
d40 2
a41 1
+			}
a42 2
 
 		json_object_put (j);
@


1.1
log
@Add libgcrypt CFLAGS to %.o target
(upstream git commit db4c66b2956a4da2745f16131fe573962c3fcbfb)

Fix ambiguous error message "Invalid Partner Login" on wrong
email address/password failure
(upstream git commit 81bf363ac69e0036562434ca0e7153c3e624c8c3)

Move mutex initalization to main thread
(upstream git commit ed7b2597a439c27e60d0b4cec85e801c9099173c)
@
text
@d1 1
a1 1
$OpenBSD$
@

