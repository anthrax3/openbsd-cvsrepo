head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2014.05.20.14.51.46;	author dcoppa;	state dead;
branches;
next	1.7;

1.7
date	2014.03.27.10.13.14;	author dcoppa;	state Exp;
branches;
next	1.6;

1.6
date	2013.09.23.08.40.24;	author dcoppa;	state dead;
branches;
next	1.5;

1.5
date	2013.09.02.11.58.40;	author dcoppa;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.05.12.20.43;	author dcoppa;	state dead;
branches;
next	1.3;

1.3
date	2012.11.30.15.52.56;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2012.04.20.08.22.34;	author dcoppa;	state dead;
branches;
next	1.1;

1.1
date	2012.03.29.13.54.17;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.8
log
@
Update to 2014.04.22 snapshot.

It now uses ffmpeg instead of faad+libmad.
@
text
@$OpenBSD: patch-src_libwaitress_waitress_c,v 1.7 2014/03/27 10:13:14 dcoppa Exp $

commit 8e685c992516834e35bcccea1f61c39a9d847e2f
Author: Lars-Dominik Braun <lars@@6xq.net>
Date:   Fri Mar 14 11:55:44 2014 +0100

waitress: Increase kernel receive buffer

Should be large enough for a complete song now (if permitted by
sysctl).

--- src/libwaitress/waitress.c.orig	Thu Mar 27 10:32:31 2014
+++ src/libwaitress/waitress.c	Thu Mar 27 10:33:11 2014
@@@@ -808,7 +808,7 @@@@ static WaitressReturn_t WaitressConnect (WaitressHandl
 			fcntl (sock, F_SETFL, O_NONBLOCK);
 
 			/* increase socket receive buffer */
-			const int sockopt = 256*1024;
+			const int sockopt = 5*1024*1024;
 			setsockopt (sock, SOL_SOCKET, SO_RCVBUF, &sockopt,
 					sizeof (sockopt));
 
@


1.7
log
@
Bugfixes from upstream:

libpiano: Request track length
(upstream git commit 90f6ffbdb7c7cc07cb02b69fcfb3a3844f0180b7)

libwaitress: Increase the receive buffer
(upstream git commit 8e685c992516834e35bcccea1f61c39a9d847e2f)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.6
log
@Update to release 2013.09.15
@
text
@d1 1
a1 1
$OpenBSD: patch-src_libwaitress_waitress_c,v 1.5 2013/09/02 11:58:40 dcoppa Exp $
d3 3
a5 3
waitress: try all addresses returned by getaddrinfo.
Fix connection failures on mixed IPv4/IPv6 systems.
(upstream git commit f1ddd582ba5c314202fbed98d7aa491b06b2dee2)
d7 15
a21 106
--- src/libwaitress/waitress.c.orig	Sun May 19 12:58:18 2013
+++ src/libwaitress/waitress.c	Mon Sep  2 11:28:34 2013
@@@@ -770,8 +770,8 @@@@ static WaitressReturn_t WaitressTlsVerify (const Waitr
 /*	Connect to server
  */
 static WaitressReturn_t WaitressConnect (WaitressHandle_t *waith) {
-	struct addrinfo hints, *res;
-	int pollres;
+	WaitressReturn_t ret;
+	struct addrinfo hints, *gares;
 
 	memset (&hints, 0, sizeof hints);
 
@@@@ -781,47 +781,66 @@@@ static WaitressReturn_t WaitressConnect (WaitressHandl
 	/* Use proxy? */
 	if (WaitressProxyEnabled (waith)) {
 		if (getaddrinfo (waith->proxy.host,
-				WaitressDefaultPort (&waith->proxy), &hints, &res) != 0) {
+				WaitressDefaultPort (&waith->proxy), &hints, &gares) != 0) {
 			return WAITRESS_RET_GETADDR_ERR;
 		}
 	} else {
 		if (getaddrinfo (waith->url.host,
-				WaitressDefaultPort (&waith->url), &hints, &res) != 0) {
+				WaitressDefaultPort (&waith->url), &hints, &gares) != 0) {
 			return WAITRESS_RET_GETADDR_ERR;
 		}
 	}
 
-	if ((waith->request.sockfd = socket (res->ai_family, res->ai_socktype,
-			res->ai_protocol)) == -1) {
-		freeaddrinfo (res);
-		return WAITRESS_RET_SOCK_ERR;
-	}
+	/* try all addresses */
+	for (struct addrinfo *gacurr = gares; gacurr != NULL;
+			gacurr = gacurr->ai_next) {
+		int sock = -1;
 
-	/* we need shorter timeouts for connect() */
-	fcntl (waith->request.sockfd, F_SETFL, O_NONBLOCK);
+		ret = WAITRESS_RET_OK;
 
-	/* increase socket receive buffer */
-	const int sockopt = 256*1024;
-	setsockopt (waith->request.sockfd, SOL_SOCKET, SO_RCVBUF, &sockopt,
-			sizeof (sockopt));
+		if ((sock = socket (gacurr->ai_family, gacurr->ai_socktype,
+				gacurr->ai_protocol)) == -1) {
+			ret = WAITRESS_RET_SOCK_ERR;
+		} else {
+			int pollres;
 
-	/* non-blocking connect will return immediately */
-	connect (waith->request.sockfd, res->ai_addr, res->ai_addrlen);
+			/* we need shorter timeouts for connect() */
+			fcntl (sock, F_SETFL, O_NONBLOCK);
 
-	pollres = WaitressPollLoop (waith->request.sockfd, POLLOUT,
-			waith->timeout);
-	freeaddrinfo (res);
-	if (pollres == 0) {
-		return WAITRESS_RET_TIMEOUT;
-	} else if (pollres == -1) {
-		return WAITRESS_RET_ERR;
+			/* increase socket receive buffer */
+			const int sockopt = 256*1024;
+			setsockopt (sock, SOL_SOCKET, SO_RCVBUF, &sockopt,
+					sizeof (sockopt));
+
+			/* non-blocking connect will return immediately */
+			connect (sock, gacurr->ai_addr, gacurr->ai_addrlen);
+
+			pollres = WaitressPollLoop (sock, POLLOUT, waith->timeout);
+			if (pollres == 0) {
+				ret = WAITRESS_RET_TIMEOUT;
+			} else if (pollres == -1) {
+				ret = WAITRESS_RET_ERR;
+			} else {
+				/* check connect () return value */
+				socklen_t pollresSize = sizeof (pollres);
+				getsockopt (sock, SOL_SOCKET, SO_ERROR, &pollres,
+						&pollresSize);
+				if (pollres != 0) {
+					ret = WAITRESS_RET_CONNECT_REFUSED;
+				} else {
+					/* this one is working */
+					waith->request.sockfd = sock;
+					break;
+				}
+			}
+			close (sock);
+		}
 	}
-	/* check connect () return value */
-	socklen_t pollresSize = sizeof (pollres);
-	getsockopt (waith->request.sockfd, SOL_SOCKET, SO_ERROR, &pollres,
-			&pollresSize);
-	if (pollres != 0) {
-		return WAITRESS_RET_CONNECT_REFUSED;
+
+	freeaddrinfo (gares);
+	/* could not connect to any of the addresses */
+	if (ret != WAITRESS_RET_OK) {
+		return ret;
 	}
a22 1
 	if (waith->url.tls) {
@


1.5
log
@
Increase buffer size to fix display of song lists with more than
999 items (upstream git commit bacc60b7a8e7854ca14b5a5f65429500831f20cb)

piano: replace station with same id.
(upstream git commit 6e82d7e6852fdac4a178445b3e2bcdb6d4e0fa63)

waitress: try all addresses returned by getaddrinfo.
Fix connection failures on mixed IPv4/IPv6 systems.
(upstream git commit f1ddd582ba5c314202fbed98d7aa491b06b2dee2)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.4
log
@Update to pianobar-2012.12.01
@
text
@d1 1
a1 1
$OpenBSD: patch-src_libwaitress_waitress_c,v 1.3 2012/11/30 15:52:56 dcoppa Exp $
d3 3
a5 3
commit a55511ea75003f5ca79a25f6e64eadf91b6dfe9f
Author: Lars-Dominik Braun <lars@@6xq.net>
Date:   Fri Nov 30 15:10:36 2012 +0100
d7 27
a33 7
    waitress: Fix chunked decoder

    Fix "Get stations... Network error: Invalid encoded data."

--- src/libwaitress/waitress.c.orig	Fri Sep  7 16:44:39 2012
+++ src/libwaitress/waitress.c	Fri Nov 30 16:24:24 2012
@@@@ -624,64 +624,69 @@@@ static WaitressHandlerReturn_t WaitressHandleIdentity 
a34 1
 }
d36 56
a91 44
-/*	chunked encoding handler. buf must be \0-terminated, size does not include
- *	trailing \0.
+/*	chunked encoding handler
  */
 static WaitressHandlerReturn_t WaitressHandleChunked (void *data, char *buf,
 		const size_t size) {
 	assert (data != NULL);
 	assert (buf != NULL);
 
-	WaitressHandle_t *waith = data;
-	char *content = buf, *nextContent;
+	WaitressHandle_t * const waith = data;
+	size_t pos = 0;
 
-	assert (waith != NULL);
-	assert (buf != NULL);
-
-	while (1) {
-		if (waith->request.chunkSize > 0) {
-			const size_t remaining = size-(content-buf);
-
-			if (remaining >= waith->request.chunkSize) {
-				if (WaitressHandleIdentity (waith, content,
-						waith->request.chunkSize) == WAITRESS_HANDLER_ABORTED) {
-					return WAITRESS_HANDLER_ABORTED;
+	while (pos < size) {
+		switch (waith->request.chunkedState) {
+			case CHUNKSIZE:
+				/* Poor manâ€™s hex to integer. This avoids another buffer that
+				 * fills until the terminating \r\n is received. */
+				if (buf[pos] >= '0' && buf[pos] <= '9') {
+					waith->request.chunkSize <<= 4;
+					waith->request.chunkSize |= buf[pos] & 0xf;
+				} else if (buf[pos] >= 'a' && buf[pos] <= 'f') {
+					waith->request.chunkSize <<= 4;
+					waith->request.chunkSize |= (buf[pos]+9) & 0xf;
+				} else if (buf[pos] == '\r') {
+					/* ignore */
+				} else if (buf[pos] == '\n') {
+					waith->request.chunkedState = DATA;
+					/* last chunk has size 0 */
+					if (waith->request.chunkSize == 0) {
+						return WAITRESS_HANDLER_DONE;
+					}
d93 14
a106 13
+					/* everything else is a protocol violation */
+					return WAITRESS_HANDLER_ERR;
 				}
+				++pos;
+				break;
 
-				content += waith->request.chunkSize;
-				if (content[0] == '\r' && content[1] == '\n') {
-					content += 2;
+			case DATA:
+				if (waith->request.chunkSize > 0) {
+					assert (size >= pos);
+					size_t payloadSize = size - pos;
d108 4
a111 43
+					if (payloadSize > waith->request.chunkSize) {
+						payloadSize = waith->request.chunkSize;
+					}
+					if (WaitressHandleIdentity (waith, &buf[pos],
+							payloadSize) == WAITRESS_HANDLER_ABORTED) {
+						return WAITRESS_HANDLER_ABORTED;
+					}
+					pos += payloadSize;
+					assert (waith->request.chunkSize >= payloadSize);
+					waith->request.chunkSize -= payloadSize;
 				} else {
-					return WAITRESS_HANDLER_ERR;
+					/* next chunk size starts in the next line */
+					if (buf[pos] == '\n') {
+						waith->request.chunkedState = CHUNKSIZE;
+					}
+					++pos;
 				}
-				waith->request.chunkSize = 0;
-			} else {
-				if (WaitressHandleIdentity (waith, content, remaining) ==
-						WAITRESS_HANDLER_ABORTED) {
-					return WAITRESS_HANDLER_ABORTED;
-				}
-				waith->request.chunkSize -= remaining;
-				return WAITRESS_HANDLER_CONTINUE;
-			}
+				break;
 		}
-
-		if ((nextContent = WaitressGetline (content)) != NULL) {
-			const long int chunkSize = strtol (content, NULL, 16);
-			if (chunkSize == 0) {
-				return WAITRESS_HANDLER_DONE;
-			} else if (chunkSize < 0) {
-				return WAITRESS_HANDLER_ERR;
-			} else {
-				waith->request.chunkSize = chunkSize;
-				content = nextContent;
-			}
-		} else {
-			return WAITRESS_HANDLER_ERR;
-		}
d114 1
a114 6
-	assert (0);
-	return WAITRESS_HANDLER_ERR;
+	return WAITRESS_HANDLER_CONTINUE;
 }
 
 /*	handle http header
@


1.3
log
@Unbreak after pandora.com's api changes:

waitress: Fix chunked decoder
Fix "Get stations... Network error: Invalid encoded data."

New default TLS fingerprint
Fix "(i) Login... Network error: TLS handshake failed."

From upstream github.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Roll new distfile and gc local patches
@
text
@d1 1
a1 1
$OpenBSD: patch-src_libwaitress_waitress_c,v 1.1 2012/03/29 13:54:17 dcoppa Exp $
d3 3
a5 2
Correctly initialize fd using -1
(upstream git commit 7d659d4bd624b3100b0c0852039648d7803cbaf9)
d7 112
a118 13
--- src/libwaitress/waitress.c.orig	Thu Mar 29 15:45:05 2012
+++ src/libwaitress/waitress.c	Thu Mar 29 15:47:03 2012
@@@@ -1063,6 +1063,7 @@@@ WaitressReturn_t WaitressFetchCall (WaitressHandle_t *
 
 	/* initialize */
 	memset (&waith->request, 0, sizeof (waith->request));
+	waith->request.sockfd = -1;
 	waith->request.dataHandler = WaitressHandleIdentity;
 	waith->request.read = WaitressOrdinaryRead;
 	waith->request.write = WaitressOrdinaryWrite;
@@@@ -1104,7 +1105,9 @@@@ WaitressReturn_t WaitressFetchCall (WaitressHandle_t *
 		gnutls_deinit (waith->request.tlsSession);
 		gnutls_certificate_free_credentials (waith->tlsCred);
a119 5
-	close (waith->request.sockfd);
+	if (waith->request.sockfd != -1) {
+		close (waith->request.sockfd);
+	}
 	free (waith->request.buf);
d121 6
a126 1
 	if (wRet == WAITRESS_RET_OK &&
@


1.1
log
@Correctly initialize fd using -1
(upstream git commit 7d659d4bd624b3100b0c0852039648d7803cbaf9)
@
text
@d1 1
a1 1
$OpenBSD$
@

