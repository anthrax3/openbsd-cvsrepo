head	1.20;
access;
symbols
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.18.0.2
	OPENBSD_5_7_BASE:1.18
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.4
	OPENBSD_5_0:1.7.0.2
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	dcoppa_20100329:1.1.1.1
	dcoppa:1.1.1;
locks; strict;
comment	@# @;


1.20
date	2015.08.26.05.56.22;	author dcoppa;	state dead;
branches;
next	1.19;
commitid	y9wqGRrrECd7SlET;

1.19
date	2015.03.20.14.59.36;	author dcoppa;	state Exp;
branches;
next	1.18;
commitid	tzaKvkdfFo0uzMlR;

1.18
date	2015.01.16.09.23.42;	author dcoppa;	state Exp;
branches;
next	1.17;
commitid	PeU20B5mZ8t4DtOm;

1.17
date	2014.09.29.09.26.00;	author dcoppa;	state dead;
branches;
next	1.16;
commitid	gi4RekBGBM0j0LSb;

1.16
date	2014.09.02.08.56.23;	author dcoppa;	state Exp;
branches;
next	1.15;
commitid	28iK1t6mbXYtfzFM;

1.15
date	2012.12.05.12.20.43;	author dcoppa;	state dead;
branches;
next	1.14;

1.14
date	2012.11.20.09.23.59;	author dcoppa;	state Exp;
branches;
next	1.13;

1.13
date	2012.10.30.16.59.23;	author dcoppa;	state Exp;
branches;
next	1.12;

1.12
date	2012.06.26.13.00.14;	author jasper;	state dead;
branches;
next	1.11;

1.11
date	2012.06.12.14.45.06;	author dcoppa;	state Exp;
branches;
next	1.10;

1.10
date	2012.05.28.09.47.00;	author dcoppa;	state Exp;
branches;
next	1.9;

1.9
date	2012.05.22.18.39.42;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2012.03.20.14.27.45;	author dcoppa;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.10.11.01.05;	author dcoppa;	state Exp;
branches;
next	1.6;

1.6
date	2011.04.21.10.02.09;	author dcoppa;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.20.16.05.38;	author dcoppa;	state Exp;
branches;
next	1.4;

1.4
date	2011.03.14.12.28.57;	author dcoppa;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.05.14.06.51;	author dcoppa;	state Exp;
branches;
next	1.2;

1.2
date	2010.05.13.18.35.51;	author dcoppa;	state Exp;
branches;
next	1.1;

1.1
date	2010.03.29.21.12.20;	author dcoppa;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.03.29.21.12.20;	author dcoppa;	state Exp;
branches;
next	;


desc
@@


1.20
log
@
Update to a newer snapshot (2015.08.04)
@
text
@$OpenBSD: patch-src_player_c,v 1.19 2015/03/20 14:59:36 dcoppa Exp $

commit 310900e4be52d11388792d776d9f6b89380bbecd
Author: Lars-Dominik Braun <lars@@6xq.net>
Date:   Sat Mar 7 16:20:26 2015 +0100

player: Ignore volume change before playback started

commit d888d0ac2aeb233deeb70aaca196453f8195e433
Author: Cody <codyschuyler@@gmail.com>
Date:   Sat Oct 25 11:22:33 2014 -0700

Use default channel layout if zero
libav 11 reports an invalid channel layout for mp3 files. This is a
work-around. The problem is fixed with libav 11.1.

commit 0005ea3873202ddefaae6466a932c159c08fd1c3
Author: Lars-Dominik Braun <lars@@6xq.net>
Date:   Wed Mar 11 20:23:02 2015 +0100

player: Fix initial track volume

--- src/player.c.orig	Sun Sep 28 08:17:29 2014
+++ src/player.c	Fri Mar 20 09:46:17 2015
@@@@ -85,8 +85,11 @@@@ void BarPlayerDestroy () {
  */
 void BarPlayerSetVolume (player_t * const player) {
 	assert (player != NULL);
-	assert (player->fvolume != NULL);
 
+	if (player->mode != PLAYER_PLAYING) {
+		return;
+	}
+
 	int ret;
 #ifdef HAVE_AVFILTER_GRAPH_SEND_COMMAND
 	/* ffmpeg and libav disagree on the type of this option (string vs. double)
@@@@ -94,6 +97,7 @@@@ void BarPlayerSetVolume (player_t * const player) {
 	char strbuf[16];
 	snprintf (strbuf, sizeof (strbuf), "%fdB",
 			player->settings->volume + player->gain);
+	assert (player->fgraph != NULL);
 	if ((ret = avfilter_graph_send_command (player->fgraph, "volume", "volume",
 					strbuf, NULL, 0, 0)) < 0) {
 #else
@@@@ -101,6 +105,7 @@@@ void BarPlayerSetVolume (player_t * const player) {
 	const double volume = pow (10, (player->settings->volume + player->gain) / 20);
 	/* libav does not provide other means to set this right now. it might not
 	 * even work everywhere. */
+	assert (player->fvolume != NULL);
 	if ((ret = av_opt_set_double (player->fvolume->priv, "volume", volume,
 			0)) != 0) {
 #endif
@@@@ -197,7 +202,6 @@@@ static bool openStream (player_t * const player) {
 	player->songPlayed = 0;
 	player->songDuration = av_q2d (player->st->time_base) *
 			(double) player->st->duration;
-	player->mode = PLAYER_PLAYING;
 
 	return true;
 }
@@@@ -216,6 +220,13 @@@@ static bool openFilter (player_t * const player) {
 
 	/* abuffer */
 	AVRational time_base = player->st->time_base;
+
+	/* Workaround for a bug in libav-11, which reports an invalid channel
+	 * layout mp3 files */
+	if (cctx->channel_layout == 0) {
+		cctx->channel_layout = av_get_default_channel_layout (cctx->channels);
+	}
+
 	snprintf (strbuf, sizeof (strbuf),
 			"time_base=%d/%d:sample_rate=%d:sample_fmt=%s:channel_layout=0x%"PRIx64, 
 			time_base.num, time_base.den, cctx->sample_rate,
@@@@ -233,7 +244,6 @@@@ static bool openFilter (player_t * const player) {
 			player->fgraph)) < 0) {
 		softfail ("create_filter volume");
 	}
-	BarPlayerSetVolume (player);
 
 	/* aformat: convert float samples into something more usable */
 	AVFilterContext *fafmt = NULL;
@@@@ -419,6 +429,8 @@@@ void *BarPlayerThread (void *data) {
 		retry = false;
 		if (openStream (player)) {
 			if (openFilter (player) && openDevice (player)) {
+				player->mode = PLAYER_PLAYING;
+				BarPlayerSetVolume (player);
 				retry = play (player) == AVERROR_INVALIDDATA;
 			} else {
 				/* filter missing or audio device busy */
@@@@ -428,6 +440,7 @@@@ void *BarPlayerThread (void *data) {
 			/* stream not found */
 			pret = PLAYER_RET_SOFTFAIL;
 		}
+		player->mode = PLAYER_WAITING;
 		finish (player);
 	} while (retry);
 
@


1.19
log
@
Merge bugfixes from upstream:

Fix upcoming songs assertion failure
(git commit 1cd5c5ec77ea43088982a439b58499be87c62087)

player: Ignore volume change before playback started
(git commit 310900e4be52d11388792d776d9f6b89380bbecd)

player: Fix initial track volume
(git commit 0005ea3873202ddefaae6466a932c159c08fd1c3)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.18 2015/01/16 09:23:42 dcoppa Exp $
@


1.18
log
@
Use default channel layout if zero
(upstream git commit d888d0ac2aeb233deeb70aaca196453f8195e433)
@
text
@d1 7
a7 1
$OpenBSD$
a13 1

d17 46
a62 3
--- src/player.c.orig	Fri Jan 16 03:16:14 2015
+++ src/player.c	Fri Jan 16 03:16:21 2015
@@@@ -216,6 +216,13 @@@@ static bool openFilter (player_t * const player) {
d76 25
@


1.17
log
@
Update to pianobar-2014.09.28
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.16 2014/09/02 08:56:23 dcoppa Exp $
d3 3
a5 1
Fix volume control with newer FFmpeg
d7 21
a27 11
--- src/player.c.orig	Tue Sep  2 10:52:59 2014
+++ src/player.c	Tue Sep  2 10:53:42 2014
@@@@ -36,7 +36,7 @@@@ THE SOFTWARE.
  * ffmpeg and libav */
 #include <libavfilter/version.h>
 /* ffmpeg >=2.2 */
-#if LIBAVFILTER_VERSION_MAJOR == 4 && \
+#if LIBAVFILTER_VERSION_MAJOR >= 4 && \
 		LIBAVFILTER_VERSION_MICRO >= 100
 #define HAVE_AVFILTER_GRAPH_SEND_COMMAND
 #endif
@


1.16
log
@
Fix volume control with newer FFmpeg
@
text
@d1 1
a1 1
$OpenBSD$
@


1.15
log
@Update to pianobar-2012.12.01
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.14 2012/11/20 09:23:59 dcoppa Exp $
d3 1
a3 3
commit dd6c620b53272e2eb4b091a835cd250309f04cad
Author: Lars-Dominik Braun <lars@@6xq.net>
Date:   Sun Oct 28 18:24:50 2012 +0100
d5 11
a15 113
    player: Recover from AAC decoding error

    Decoding errors are usually not fatal, so we can recover by skipping the
    broken frame. This also fixes invalid memory reads caused by
    sampleSizeCurr >= sampleSizeN. See issue #304.

commit 12f132dd220027ee2075572d7271a5b13cfa4cbe
Author: Lars-Dominik Braun <lars@@6xq.net>
Date:   Sat Nov 17 15:50:06 2012 +0100

    player: Fix insane typecast

--- src/player.c.orig	Fri Sep  7 16:44:39 2012
+++ src/player.c	Tue Nov 20 10:13:35 2012
@@@@ -28,6 +28,7 @@@@ THE SOFTWARE.
 #include <math.h>
 #include <stdint.h>
 #include <limits.h>
+#include <assert.h>
 #include <arpa/inet.h>
 
 #include "player.h"
@@@@ -135,17 +136,31 @@@@ static WaitressCbReturn_t BarPlayerAACCb (void *ptr, s
 		NeAACDecFrameInfo frameInfo;
 		size_t i;
 
-		while ((player->bufferFilled - player->bufferRead) >
-				player->sampleSize[player->sampleSizeCurr]) {
+		while (player->sampleSizeCurr < player->sampleSizeN &&
+				(player->bufferFilled - player->bufferRead) >=
+			player->sampleSize[player->sampleSizeCurr]) {
+			/* going through this loop can take up to a few seconds =>
+			 * allow earlier thread abort */
+			QUIT_PAUSE_CHECK;
+
 			/* decode frame */
 			aacDecoded = NeAACDecDecode(player->aacHandle, &frameInfo,
-					player->buffer + player->bufferRead,
+					&player->buffer[player->bufferRead],
 					player->sampleSize[player->sampleSizeCurr]);
+			player->bufferRead += player->sampleSize[player->sampleSizeCurr];
+			++player->sampleSizeCurr;
+
 			if (frameInfo.error != 0) {
+				/* skip this frame, songPlayed will be slightly off if this
+				 * happens */
 				BarUiMsg (player->settings, MSG_ERR, "Decoding error: %s\n",
 						NeAACDecGetErrorMessage (frameInfo.error));
-				break;
+				continue;
 			}
+			/* assuming data in stsz atom is correct */
+			assert (frameInfo.bytesconsumed ==
+					player->sampleSize[player->sampleSizeCurr-1]);
+
 			for (i = 0; i < frameInfo.samples; i++) {
 				aacDecoded[i] = applyReplayGain (aacDecoded[i], player->scale);
 			}
@@@@ -157,12 +172,11 @@@@ static WaitressCbReturn_t BarPlayerAACCb (void *ptr, s
 					(unsigned long long int) BAR_PLAYER_MS_TO_S_FACTOR /
 					(unsigned long long int) player->samplerate /
 					(unsigned long long int) player->channels;
-			player->bufferRead += frameInfo.bytesconsumed;
-			player->sampleSizeCurr++;
-			/* going through this loop can take up to a few seconds =>
-			 * allow earlier thread abort */
-			QUIT_PAUSE_CHECK;
 		}
+		if (player->sampleSizeCurr >= player->sampleSizeN) {
+			/* no more frames, drop data */
+			player->bufferRead = player->bufferFilled;
+		}
 	} else {
 		if (player->mode == PLAYER_INITIALIZED) {
 			while (player->bufferRead+4 < player->bufferFilled) {
@@@@ -235,12 +249,15 @@@@ static WaitressCbReturn_t BarPlayerAACCb (void *ptr, s
 				/* how many frames do we have? */
 				if (player->sampleSizeN == 0) {
 					/* mp4 uses big endian, convert */
+					memcpy (&player->sampleSizeN, player->buffer +
+							player->bufferRead, sizeof (uint32_t));
 					player->sampleSizeN =
-							bigToHostEndian32 (*((uint32_t *) (player->buffer +
-							player->bufferRead)));
+							bigToHostEndian32 (player->sampleSizeN);
+
 					player->sampleSize = malloc (player->sampleSizeN *
 							sizeof (*player->sampleSize));
-					player->bufferRead += 4;
+					assert (player->sampleSize != NULL);
+					player->bufferRead += sizeof (uint32_t);
 					player->sampleSizeCurr = 0;
 					/* set up song duration (assuming one frame always contains
 					 * the same number of samples)
@@@@ -253,11 +270,15 @@@@ static WaitressCbReturn_t BarPlayerAACCb (void *ptr, s
 							(unsigned long long int) player->channels;
 					break;
 				} else {
+					memcpy (&player->sampleSize[player->sampleSizeCurr],
+							player->buffer + player->bufferRead,
+							sizeof (uint32_t));
 					player->sampleSize[player->sampleSizeCurr] =
-							bigToHostEndian32 (*((uint32_t *) (player->buffer +
-							player->bufferRead)));
+							bigToHostEndian32 (
+							player->sampleSize[player->sampleSizeCurr]);
+
 					player->sampleSizeCurr++;
-					player->bufferRead += 4;
+					player->bufferRead += sizeof (uint32_t);
 				}
 				/* all sizes read, nearly ready for data mode */
 				if (player->sampleSizeCurr >= player->sampleSizeN) {
@


1.14
log
@player: fix typecast
(upstream git commit 12f132dd220027ee2075572d7271a5b13cfa4cbe)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.13 2012/10/30 16:59:23 dcoppa Exp $
@


1.13
log
@player: Recover from AAC decoding error

Decoding errors are usually not fatal, so we can recover by skipping
the broken frame. This also fixes invalid memory reads caused by
sampleSizeCurr >= sampleSizeN.

(upstream git commit dd6c620b53272e2eb4b091a835cd250309f04cad)
@
text
@d1 1
a1 1
$OpenBSD$
d13 8
a20 2
--- src/player.c.orig	Tue Oct 30 17:45:04 2012
+++ src/player.c	Tue Oct 30 17:45:34 2012
d65 1
a65 1
@@@@ -157,11 +172,10 @@@@ static WaitressCbReturn_t BarPlayerAACCb (void *ptr, s
d74 1
a74 1
+		}
d78 1
a78 1
 		}
d81 39
@


1.12
log
@- these patches (or chunks) are not needed anymore since arpa/inet.h -r1.12
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.11 2012/06/12 14:45:06 dcoppa Exp $
d3 3
a5 1
Add missing include
d7 8
a14 2
--- src/player.c.orig	Sun May  6 16:33:54 2012
+++ src/player.c	Mon May 28 10:51:30 2012
d19 1
a19 1
+#include <netinet/in.h>
d23 52
@


1.11
log
@Update to snapshot 2012.06.10, chasing changes in pandora's api.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.10 2012/05/28 09:47:00 dcoppa Exp $
@


1.10
log
@Add libgcrypt CFLAGS to %.o target
(upstream git commit db4c66b2956a4da2745f16131fe573962c3fcbfb)

Fix ambiguous error message "Invalid Partner Login" on wrong
email address/password failure
(upstream git commit 81bf363ac69e0036562434ca0e7153c3e624c8c3)

Move mutex initalization to main thread
(upstream git commit ed7b2597a439c27e60d0b4cec85e801c9099173c)
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.9 2012/05/22 18:39:42 ajacoutot Exp $
a4 3
Move mutex initalization to main thread
(upstream git commit ed7b2597a439c27e60d0b4cec85e801c9099173c)

a14 16
@@@@ -421,7 +422,6 @@@@ void *BarPlayerThread (void *data) {
 	WaitressReturn_t wRet = WAITRESS_RET_ERR;
 
 	/* init handles */
-	pthread_mutex_init (&player->pauseMutex, NULL);
 	player->waith.data = (void *) player;
 	/* extraHeaders will be initialized later */
 	player->waith.extraHeaders = extraHeaders;
@@@@ -500,7 +500,6 @@@@ void *BarPlayerThread (void *data) {
 
 	ao_close(player->audioOutDevice);
 	WaitressFree (&player->waith);
-	pthread_mutex_destroy (&player->pauseMutex);
 	free (player->buffer);
 
 	player->mode = PLAYER_FINISHED_PLAYBACK;
@


1.9
log
@Remove workarounds now that we have a modern faad.

from Brad
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.8 2012/03/20 14:27:45 dcoppa Exp $
d5 5
a9 2
--- src/player.c.orig	Tue Mar 20 14:47:07 2012
+++ src/player.c	Tue Mar 20 14:54:05 2012
d18 16
@


1.8
log
@Update to snapshot dated 2012.03.17
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.7 2011/07/10 11:01:05 dcoppa Exp $
a4 2
Our faad port uses a patched neaacdec.h header

a14 9
@@@@ -187,7 +188,7 @@@@ static WaitressCbReturn_t BarPlayerAACCb (void *ptr, s
 					/* +1+4 needs to be replaced by <something>! */
 					player->bufferRead += 1+4;
 					char err = NeAACDecInit2 (player->aacHandle, player->buffer +
-							player->bufferRead, 5, &player->samplerate,
+							player->bufferRead, 5, (void *)&player->samplerate,
 							&player->channels);
 					player->bufferRead += 5;
 					if (err != 0) {
@


1.7
log
@Update to pianobar-2011.07.09.
Actually unbreak it, after pandora.com's api change.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.6 2011/04/21 10:02:09 dcoppa Exp $
d7 2
a8 2
--- src/player.c.orig	Sat Jul  9 10:40:54 2011
+++ src/player.c	Sun Jul 10 12:40:48 2011
d17 1
a17 1
@@@@ -186,7 +187,7 @@@@ static WaitressCbReturn_t BarPlayerAACCb (void *ptr, s
@


1.6
log
@Update to pianobar-2011.04.10

USE_GROFF no more needed.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.5 2011/03/20 16:05:38 dcoppa Exp $
d7 2
a8 2
--- src/player.c.orig	Mon Jan 24 13:00:25 2011
+++ src/player.c	Sun Mar 20 16:34:33 2011
d17 1
a17 1
@@@@ -185,7 +186,7 @@@@ static WaitressCbReturn_t BarPlayerAACCb (void *ptr, s
@


1.5
log
@Add missing include to suppress nasty warnings.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.4 2011/03/14 12:28:57 dcoppa Exp $
d4 1
@


1.4
log
@Update to pianobar-2011.01.24
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.3 2011/01/05 14:06:51 dcoppa Exp $
d3 1
d6 11
a16 3
--- src/player.c.orig	Sat Nov  6 13:38:14 2010
+++ src/player.c	Wed Jan  5 14:30:26 2011
@@@@ -185,7 +185,7 @@@@ static WaitressCbReturn_t BarPlayerAACCb (void *ptr, s
@


1.3
log
@Fix high cpu usage when started with nohup (backported from upstream git)
Fix audio playback on big-endian machines (from upstream git)
Sanitize CFLAGS
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.2 2010/05/13 18:35:51 dcoppa Exp $
a3 1
Fix audio playback on big-endian machines
a15 18
@@@@ -199,7 +199,7 @@@@ static WaitressCbReturn_t BarPlayerAACCb (void *ptr, s
 					format.bits = 16;
 					format.channels = player->channels;
 					format.rate = player->samplerate;
-					format.byte_format = AO_FMT_LITTLE;
+					format.byte_format = AO_FMT_NATIVE;
 					if ((player->audioOutDevice = ao_open_live (audioOutDriver,
 							&format, NULL)) == NULL) {
 						/* we're not interested in the errno */
@@@@ -358,7 +358,7 @@@@ static WaitressCbReturn_t BarPlayerMp3Cb (void *ptr, s
 			format.bits = 16;
 			format.channels = player->channels;
 			format.rate = player->samplerate;
-			format.byte_format = AO_FMT_LITTLE;
+			format.byte_format = AO_FMT_NATIVE;
 			if ((player->audioOutDevice = ao_open_live (audioOutDriver,
 					&format, NULL)) == NULL) {
 				player->aoError = 1;
@


1.2
log
@Update audio/pianobar: my fixes have been merged upstream.
While here, add a MESSAGE file and comment the patch.

OK jasper@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_player_c,v 1.1.1.1 2010/03/29 21:12:20 dcoppa Exp $
d4 1
d6 2
a7 2
--- src/player.c.orig	Tue Mar 16 20:29:34 2010
+++ src/player.c	Mon Mar 29 15:44:59 2010
d17 18
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
$OpenBSD$
@


1.1.1.1
log
@import audio/pianobar

pianobar is a console client for the personalized web radio pandora 
(http://www.pandora.com).

OK landry@@
@
text
@@
