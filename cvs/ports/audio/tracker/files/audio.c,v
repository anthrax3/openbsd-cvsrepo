head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.12
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.8
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.10
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.5.0.14
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.12
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.10
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.8
	OPENBSD_5_0:1.5.0.6
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.4
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.2
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.3.0.46
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.44
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.42
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.40
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.38
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.36
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.34
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.32
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.30
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.28
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.26
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.24
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.22
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.20
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.18
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.16
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.14
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.12
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9_TRACKING_SWITCH:1.3
	OPENBSD_2_9:1.3.0.10
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.8
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.6
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.4
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.2
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2013.12.23.15.07.50;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2010.06.30.11.50.51;	author jakemsr;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.17.18.10.05;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	99.03.05.16.25.49;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.03.05.16.24.55;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	98.10.02.17.19.44;	author espie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@I'm *really* not sure defaulting to >2 channels is a good idea.
@
text
@/* openbsd/audio.c 
	vi:ts=3 sw=3:
 */
/* sndio(7) interface */

#include "defs.h"
#include <unistd.h>
#include "extern.h"
#include "prefs.h"
#include "autoinit.h"
#include "watched_var.h"
struct options_set *port_options=0;

#define DEFAULT_BUFFERS
#define UNSIGNED8
#define DEFAULT_SET_MIX
#define NEW_OUTPUT_SAMPLES_AWARE
#define NEW_FUNCS

/* fine-tune to get the scrolling display in sync with the music */
#define ADVANCE_TAGS 20000 

#include "Arch/common.c"

#include <sndio.h>

LOCAL unsigned long samples_max;
LOCAL long long realpos;
LOCAL struct sio_hdl *hdl;           	
LOCAL unsigned long current_freq;

unsigned long total;

LOCAL int dsp_samplesize = 0;

static void
movecb(void *arg, int delta)
{
	realpos += delta * dsize * (stereo ? 2 : 1);
}

unsigned long open_audio(unsigned long f, int s)
   {
	struct sio_par par;
	int buf_max;

	hdl = sio_open(NULL, SIO_PLAY, 0);
	if (hdl == NULL)
		end_all("Error opening audio device");

	realpos = 0;
	sio_onmove(hdl, movecb, NULL);

	sio_initpar(&par);
	if (f)
		par.rate = f;
	par.pchan = 2;
	if (!sio_setpar(hdl, &par) || !sio_getpar(hdl, &par) || !sio_start(hdl) ||
	    (par.bits != 8 && par.bits != 16) || par.pchan > 2)
		end_all("Sorry, no audio format supported by this binary is available");

	buf_max = par.appbufsz * par.bps * par.pchan;
	current_freq = par.rate;
	stereo = par.pchan == 2 ? 1 : 0;

	dsp_samplesize = par.bits;
	dsize = par.bps;
	buffer = malloc(buf_max);
	buffer16 = (short *)buffer;

	idx = 0;
	samples_max = buf_max / dsize / par.pchan;
	set_watched_scalar(FREQUENCY, current_freq);
	total = 0;
	return current_freq;
   }

/* synchronize stuff with audio output */
LOCAL struct tagged
	{
	struct tagged *next;	/* simply linked list */
	void (*f)(GENERIC p);	/* function to call */
	void (*f2)(GENERIC p);	/* function to call  for flush */
	GENERIC p;		/* and parameter */
	unsigned long when;	/* number of bytes to let go before calling */
	} 
	*start,	/* what still to output */
	*end;	/* where to add new tags */



/* flush_tags: use tags that have gone by recently */
LOCAL void flush_tags(void)
	{
	if (start)
		{
		while (start && start->when <= realpos + ADVANCE_TAGS)
			{
			struct tagged *tofree;

			(*start->f)(start->p);
			tofree = start;
			start = start->next;
			free(tofree);
			}
		}
	}

/* remove unused tags at end */
LOCAL void remove_pending_tags(void)
	{
	while (start)
		{
		struct tagged *tofree;

		(*start->f2)(start->p);
		tofree = start;
		start = start->next;
		free(tofree);
		}
	}

void sync_audio(void (*function)(void *p), void (*f2)(void *p), void *parameter)
	{
	struct tagged *t;

	if (hdl)
		{
		t = malloc(sizeof(struct tagged));
		if (!t)
			{
			(*function)(parameter);
			return;
			}
			/* build new tag */
		t->next = 0;
		t->f = function;
		t->f2 = f2;
		t->p = parameter;
		t->when = total;

			/* add it to list */
		if (start) 
			end->next = t;
		else
			start = t;
		end = t;

			/* set up for next tag */
		}
	else
		(*function)(parameter);
	}

LOCAL void actually_flush_buffer(void)
   {
   int l,i;

	if (idx)
		{
		total += idx * dsize;
		sio_write(hdl, buffer, dsize * idx);
		}
   idx = 0;
   }

void output_samples(long left, long right, int n)
	{
	if (idx >= samples_max - 1)
		actually_flush_buffer();
	switch(dsp_samplesize)
		{
	case 16:				/*   Cool! 16 bits samples */
		add_samples16(left, right, n);
		break;
	case 8:
		add_samples8(left, right, n);
		break;
	default:	/* should not happen */
		;
	   }
   }

void flush_buffer(void)
    {	
	 actually_flush_buffer();
	 flush_tags();
    }

/*
 * Closing the Linux sound device waits for all pending samples to play.
 */
void close_audio(void)
    {
    actually_flush_buffer();
    sio_close(hdl);
    free(buffer);
    }

unsigned long update_frequency(void)
	{
	return 0;
	}

void discard_buffer(void)
	{
	remove_pending_tags();
	total = 0;
	}

void audio_ui(char c)
	{
	}

@


1.5
log
@convert to sndio(7), which allows this port to be used with all
non-"isdn bullshit" audio devices OpenBSD currently (and most
likely ever will) supports.  sndio(7) doesn't support audioamd(4)
(which is an isdn device), but the audio(4) backend here didn't
support that device either.

tested on a 195 MHz r10k O2 extracting install tarballs +
'cvs co ports' + repeatedly compiling tracker in a loop +
'find /', all running simultaneously over the built-in mec0 NIC,
a zaurus with hw.setperf set to 0 + 'find /' running on the
console + tracker and an audio device monitoring program run
from an ssh session through a wi(4) pcmcia card, a 233MHz
Toshiba Tecra 8000 with wss(4), and various other machines.
@
text
@d55 3
a57 1
	par.rate = f ? f : 22050;
d59 1
a59 1
	    (par.bits != 8 && par.bits != 16))
@


1.4
log
@compile with gcc4

reenable flush, works with every soundcard I now have.
@
text
@d4 1
a4 1
/* Native BSD interface */
a7 1
#include <fcntl.h>
a11 1
#include <sys/ioctl.h>
d21 1
a21 1
#define ADVANCE_TAGS 20000
d25 1
a25 7
#include <sys/types.h>
#include <sys/audioio.h>




ID("$Id: audio.c,v 1.3 1999/03/05 16:25:49 espie Exp $")
d28 2
a29 1
LOCAL int audio;           	
d36 6
d44 1
a45 1
	unsigned long possible, current;
d47 2
a48 2
   audio = open("/dev/audio", O_WRONLY, 0);
   if (audio == -1)
d51 7
a57 19
		/* iterate and find true native formats */
		{
		struct audio_encoding query;
		for (query.index = 0; 
			ioctl(audio, AUDIO_GETENC, &query) != -1;
			query.index++)
			{
			if (query.flags & AUDIO_ENCODINGFLAG_EMULATED)
				continue;
			if (query.precision == 16 && 
				(query.encoding == AUDIO_ENCODING_SLINEAR_BE ||
				query.encoding == AUDIO_ENCODING_SLINEAR_LE))
				dsp_samplesize = 16;
			if (!dsp_samplesize && query.precision == 8 &&
				query.encoding == AUDIO_ENCODING_ULINEAR)
				dsp_samplesize = 8;
			}
		}
	if (dsp_samplesize == 0)
d60 8
a67 51
	if (!f)
		f = 22050;

		{
		struct audio_info current;
		AUDIO_INITINFO(&current);

		switch(dsp_samplesize)
			{
		case 8:
			dsize = 1;
			current.play.encoding = AUDIO_ENCODING_ULINEAR; 
			current.play.precision= 8;
			break;
		case 16:
			dsize = 2;
			current.play.encoding = AUDIO_ENCODING_SLINEAR;
			current.play.precision= 16;
			break;
		default:
			end_all("Error: unknown dsp_samplesize");
			}
		current.play.sample_rate = f; 
		current.play.channels = s ? 2 : 1;

		{
		int ok = ioctl(audio, AUDIO_SETINFO, &current);
			/* maybe we are trying some stunt our card can't do ?
			 * Try lowering our expectations 
			 */
		if (ok == -1 && current.play.channels == 2 && current.play.sample_rate > 22050)
			{
			current.play.sample_rate = 22050;
			ok = ioctl(audio, AUDIO_SETINFO, &current);
			}
		if (ok == -1 && current.play.channels == 2)
			{
			current.play.channels = 1;
			ok = ioctl(audio, AUDIO_SETINFO, &current);
			}
		while (ok == -1 && current.play.sample_rate > 8000)
			{
			current.play.sample_rate /= 2;
			ok = ioctl(audio, AUDIO_SETINFO, &current);
			}
		if (ok == -1)
			end_all("Can't find a suitable format");

		if (ioctl(audio, AUDIO_GETINFO, &current) == -1)
			end_all("Error retrieving format");
		}
d69 2
a70 9
		buf_max = current.blocksize;
		current_freq = current.play.sample_rate;
		stereo = current.play.channels == 2 ? 1 : 0;
		}

   buffer = malloc(buf_max);
   buffer16 = (short *)buffer;
   idx = 0;
	samples_max = buf_max / dsize;
d79 1
a79 1
	struct tagged *next;			/* simply linked list */
d82 2
a83 3
	GENERIC p;						/* and parameter */
	unsigned long when;						/* number of bytes to let go before 
		calling */
a92 3
	audio_offset_t off;
	if (audio != -1)
		ioctl(audio, AUDIO_GETOOFFS, &off);
d95 1
a95 1
		while (start && start->when <= off.samples + ADVANCE_TAGS)
d125 1
a125 1
	if (audio != -1)
d160 1
a160 1
		write(audio, buffer, dsize * idx);
d194 1
a194 1
    close(audio);
a204 2
	if (audio)
		ioctl(audio, AUDIO_FLUSH, 0);
@


1.3
log
@work around a bug in wss: AUDIO_FLUSH hangs the device.
Temporary, until bug is fixed.
@
text
@d33 1
a33 1
ID("$Id: audio.c,v 1.2 1999/03/05 16:24:55 espie Exp $")
d245 1
a271 1
#if 0
a273 1
#endif
@


1.2
log
@Repair 16 bits. Easier to make it work when you've got 16 bit output
working.
@
text
@d33 1
a33 1
ID("$Id: audio.c,v 1.1 1998/10/02 17:19:44 espie Exp $")
d271 1
d274 1
@


1.1
log
@True tracker port, with native OpenBSD audio, synchronization of the display
with sounds, numerous minor bug-fix, and authorization to redistribute.
@
text
@d33 1
a33 1
ID("$Id: audio.c,v 5.1 1996/04/12 16:30:31 espie Exp espie $")
d62 2
a63 1
				query.encoding == AUDIO_ENCODING_SLINEAR)
d85 1
d90 1
@

