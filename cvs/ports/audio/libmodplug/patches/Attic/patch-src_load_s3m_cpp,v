head	1.4;
access;
symbols
	OPENBSD_5_4:1.3.0.8
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.6
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.4
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.2
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2013.10.11.17.28.19;	author bcallah;	state dead;
branches;
next	1.3;

1.3
date	2011.08.18.17.56.48;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.05.21.25.48;	author jasper;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2011.04.09.07.48.48;	author jasper;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2011.04.09.07.48.48;	author jasper;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2011.05.05.21.26.09;	author jasper;	state Exp;
branches;
next	;

1.2.2.1
date	2011.08.18.17.57.03;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Update libmodplug to 0.8.8.4 - all the patches go away.
Bump minor.
Take MAINTAINER.
ok landry@@
@
text
@$OpenBSD: patch-src_load_s3m_cpp,v 1.3 2011/08/18 17:56:48 jasper Exp $

Fix S3M stack overflows SA45131/B
From upstream git: f4e5295658fff000379caa122e75c9200205fe20

Fixed a potential memory overread in CSoundFile::ReadS3M()
From upstream git: 537e9fd5b95cf6c448e9bd2ea2973e8b139bce00

--- src/load_s3m.cpp.orig	Fri Mar 25 23:17:18 2011
+++ src/load_s3m.cpp	Thu Aug 18 19:47:06 2011
@@@@ -187,11 +187,11 @@@@ BOOL CSoundFile::ReadS3M(const BYTE *lpStream, DWORD d
 //---------------------------------------------------------------
 {
 	UINT insnum,patnum,nins,npat;
-	DWORD insfile[128];
+	DWORD insfile[MAX_SAMPLES];
 	WORD ptr[256];
 	BYTE s[1024];
 	DWORD dwMemPos;
-	BYTE insflags[128], inspack[128];
+	BYTE insflags[MAX_SAMPLES], inspack[MAX_SAMPLES];
 	S3MFILEHEADER psfh = *(S3MFILEHEADER *)lpStream;
 
 	psfh.reserved1 = bswapLE16(psfh.reserved1);
@@@@ -315,7 +315,14 @@@@ BOOL CSoundFile::ReadS3M(const BYTE *lpStream, DWORD d
 			Ins[iSmp].nC4Speed = j;
 			insfile[iSmp] = ((DWORD)bswapLE16(*((LPWORD)(s+0x0E)))) << 4;
 			insfile[iSmp] += ((DWORD)(BYTE)s[0x0D]) << 20;
-			if (insfile[iSmp] > dwMemLength) insfile[iSmp] &= 0xFFFF;
+			// offset is invalid - ignore this sample.
+			if (insfile[iSmp] > dwMemLength) insfile[iSmp] = 0;
+			else if (insfile[iSmp]) {
+				// ignore duplicate samples.
+				for (int z=iSmp-1; z>=0; z--)
+					if (insfile[iSmp] == insfile[z])
+						insfile[iSmp] = 0;
+			}
 			if ((Ins[iSmp].nLoopStart >= Ins[iSmp].nLoopEnd) || (Ins[iSmp].nLoopEnd - Ins[iSmp].nLoopStart < 8))
 				Ins[iSmp].nLoopStart = Ins[iSmp].nLoopEnd = 0;
 			Ins[iSmp].nPan = 0x80;
@@@@ -393,7 +400,8 @@@@ BOOL CSoundFile::ReadS3M(const BYTE *lpStream, DWORD d
 		if (insflags[iRaw-1] & 2) flags |= RSF_STEREO;
 		if (inspack[iRaw-1] == 4) flags = RS_ADPCM4;
 		dwMemPos = insfile[iRaw];
-		dwMemPos += ReadSample(&Ins[iRaw], flags, (LPSTR)(lpStream + dwMemPos), dwMemLength - dwMemPos);
+		if (dwMemPos < dwMemLength)
+			dwMemPos += ReadSample(&Ins[iRaw], flags, (LPSTR)(lpStream + dwMemPos), dwMemLength - dwMemPos);
 	}
 	m_nMinPeriod = 64;
 	m_nMaxPeriod = 32767;
@


1.3
log
@Security fixes for CVE-2011-291{1,2,3,4,5}
Various integer overflows and off-by-one errors in libmodplug.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_load_s3m_cpp,v 1.2 2011/05/05 21:25:48 jasper Exp $
@


1.2
log
@potpourri of fixes from upstream, from overflows to crashers.
@
text
@d1 4
a4 1
$OpenBSD$
d10 32
a41 2
+++ src/load_s3m.cpp	Thu May  5 23:20:07 2011
@@@@ -393,7 +393,8 @@@@ BOOL CSoundFile::ReadS3M(const BYTE *lpStream, DWORD d
@


1.2.2.1
log
@Security fixes for CVE-2011-291{1,2,3,4,5}
Various integer overflows and off-by-one errors in libmodplug.
@
text
@d1 1
a1 4
$OpenBSD: patch-src_load_s3m_cpp,v 1.2 2011/05/05 21:25:48 jasper Exp $

Fix S3M stack overflows SA45131/B
From upstream git: f4e5295658fff000379caa122e75c9200205fe20
d7 2
a8 32
+++ src/load_s3m.cpp	Thu Aug 18 19:47:06 2011
@@@@ -187,11 +187,11 @@@@ BOOL CSoundFile::ReadS3M(const BYTE *lpStream, DWORD d
 //---------------------------------------------------------------
 {
 	UINT insnum,patnum,nins,npat;
-	DWORD insfile[128];
+	DWORD insfile[MAX_SAMPLES];
 	WORD ptr[256];
 	BYTE s[1024];
 	DWORD dwMemPos;
-	BYTE insflags[128], inspack[128];
+	BYTE insflags[MAX_SAMPLES], inspack[MAX_SAMPLES];
 	S3MFILEHEADER psfh = *(S3MFILEHEADER *)lpStream;
 
 	psfh.reserved1 = bswapLE16(psfh.reserved1);
@@@@ -315,7 +315,14 @@@@ BOOL CSoundFile::ReadS3M(const BYTE *lpStream, DWORD d
 			Ins[iSmp].nC4Speed = j;
 			insfile[iSmp] = ((DWORD)bswapLE16(*((LPWORD)(s+0x0E)))) << 4;
 			insfile[iSmp] += ((DWORD)(BYTE)s[0x0D]) << 20;
-			if (insfile[iSmp] > dwMemLength) insfile[iSmp] &= 0xFFFF;
+			// offset is invalid - ignore this sample.
+			if (insfile[iSmp] > dwMemLength) insfile[iSmp] = 0;
+			else if (insfile[iSmp]) {
+				// ignore duplicate samples.
+				for (int z=iSmp-1; z>=0; z--)
+					if (insfile[iSmp] == insfile[z])
+						insfile[iSmp] = 0;
+			}
 			if ((Ins[iSmp].nLoopStart >= Ins[iSmp].nLoopEnd) || (Ins[iSmp].nLoopEnd - Ins[iSmp].nLoopStart < 8))
 				Ins[iSmp].nLoopStart = Ins[iSmp].nLoopEnd = 0;
 			Ins[iSmp].nPan = 0x80;
@@@@ -393,7 +400,8 @@@@ BOOL CSoundFile::ReadS3M(const BYTE *lpStream, DWORD d
@


1.1
log
@file patch-src_load_s3m_cpp was initially added on branch OPENBSD_4_9.
@
text
@d1 17
@


1.1.2.1
log
@Security fix for SA44054: libmodplug "CSoundFile::ReadS3M()" Buffer Overflow Vulnerability
Patch taken from libmodplug-0.8.8.2
@
text
@a0 18
$OpenBSD$

Security fix for SA44054: libmodplug "CSoundFile::ReadS3M()" Buffer Overflow Vulnerability
Patch from libmodplug-0.8.8.2

--- src/load_s3m.cpp.orig	Sat Apr  9 09:45:35 2011
+++ src/load_s3m.cpp	Sat Apr  9 09:46:30 2011
@@@@ -257,6 +257,10 @@@@ BOOL CSoundFile::ReadS3M(const BYTE *lpStream, DWORD d
 	patnum = npat = psfh.patnum;
 	if (patnum > MAX_PATTERNS) patnum = MAX_PATTERNS;
 	memset(ptr, 0, sizeof(ptr));
+
+	// Ignore file if it has a corrupted header.
+	if (nins+npat > 256) return FALSE;
+
 	if (nins+npat)
 	{
 		memcpy(ptr, lpStream+dwMemPos, 2*(nins+npat));
@


1.1.2.2
log
@potpourri of fixes from upstream, from overflows to crashers.
@
text
@d1 1
a1 1
$OpenBSD: patch-src_load_s3m_cpp,v 1.1.2.1 2011/04/09 07:48:48 jasper Exp $
d6 2
a7 2
--- src/load_s3m.cpp.orig	Sun Apr  4 14:15:24 2010
+++ src/load_s3m.cpp	Thu May  5 23:24:14 2011
a18 10
@@@@ -389,7 +393,8 @@@@ BOOL CSoundFile::ReadS3M(const BYTE *lpStream, DWORD d
 		if (insflags[iRaw-1] & 2) flags |= RSF_STEREO;
 		if (inspack[iRaw-1] == 4) flags = RS_ADPCM4;
 		dwMemPos = insfile[iRaw];
-		dwMemPos += ReadSample(&Ins[iRaw], flags, (LPSTR)(lpStream + dwMemPos), dwMemLength - dwMemPos);
+		if (dwMemPos < dwMemLength)
+			dwMemPos += ReadSample(&Ins[iRaw], flags, (LPSTR)(lpStream + dwMemPos), dwMemLength - dwMemPos);
 	}
 	m_nMinPeriod = 64;
 	m_nMaxPeriod = 32767;
@


