head	1.2;
access;
symbols
	OPENBSD_5_5:1.2.0.4
	OPENBSD_5_6:1.2.0.2
	OPENBSD_5_4:1.1.0.12
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.10
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.8
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.6
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2013.10.11.17.28.18;	author bcallah;	state dead;
branches
	1.2.2.1
	1.2.4.1;
next	1.1;

1.1
date	2011.05.05.21.25.48;	author jasper;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2011.05.05.21.26.09;	author jasper;	state Exp;
branches;
next	;

1.2.2.1
date	2014.10.20.00.37.51;	author bcallah;	state Exp;
branches;
next	;
commitid	FqulyUWL3PlbLznv;

1.2.4.1
date	2014.10.20.00.41.46;	author bcallah;	state Exp;
branches;
next	;
commitid	6w7adkMKFmWegyus;


desc
@@


1.2
log
@Update libmodplug to 0.8.8.4 - all the patches go away.
Bump minor.
Take MAINTAINER.
ok landry@@
@
text
@$OpenBSD: patch-src_load_abc_cpp,v 1.1 2011/05/05 21:25:48 jasper Exp $

Prevent abc_remove_unnecessary_events() from removing the last track.
From upstream git: d7c36959757fc6c8e4d487be8a72383093d9d26f

--- src/load_abc.cpp.orig	Fri Mar 25 23:02:07 2011
+++ src/load_abc.cpp	Thu May  5 23:20:40 2011
@@@@ -1022,10 +1022,12 @@@@ static void abc_remove_unnecessary_events(ABCHANDLE *h
 				_mm_free(h->trackhandle,tp);
 				tp = ptp;
 			}
-			else {
+			else if (tp->next) {
 				h->track = tp->next;
 				_mm_free(h->trackhandle,tp);
 				tp = h->track;
+			} else {
+				break;
 			}
 		}
 		ptp = tp;	// remember previous track
@


1.2.4.1
log
@Add patch to fix CVE-2013-4233 and CVE-2013-4234
Taken from
https://github.com/Konstanty/libmodplug/commit/f5e45759ad12f9e057e13a598421e610350f70a9
and
https://github.com/Konstanty/libmodplug/commit/bcee04058dcbe22bfb488614eb9a8cf54304a740
requested and go ahead from jasper@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 4
Fixes for CVE-2013-4233
https://github.com/Konstanty/libmodplug/commit/f5e45759ad12f9e057e13a598421e610350f70a9
and CVE-2013-4234
https://github.com/Konstanty/libmodplug/commit/bcee04058dcbe22bfb488614eb9a8cf54304a740
d6 5
a10 63
--- src/load_abc.cpp.orig	Sat Oct 18 18:03:04 2014
+++ src/load_abc.cpp	Sat Oct 18 18:10:42 2014
@@@@ -1811,7 +1811,7 @@@@ static int abc_extract_tempo(const char *p, int invoic
 
 static void	abc_set_parts(char **d, char *p)
 {
-	int i,j,k,m,n;
+	int i,j,k,m,n,size;
 	char *q;
 #ifdef NEWMIKMOD
 	static MM_ALLOC *h;
@@@@ -1849,10 +1849,11 @@@@ static void	abc_set_parts(char **d, char *p)
 			i += n-1;
 		}
 	}
-	q = (char *)_mm_calloc(h, j+1, sizeof(char));	// enough storage for the worst case
+	size = (j + 1) > 0 ? j+1 : j;
+	q = (char *)_mm_calloc(h, size, sizeof(char));	// enough storage for the worst case
 	// now copy bytes from p to *d, taking parens and digits in account
 	j = 0;
-	for( i=0; p[i] && p[i] != '%'; i++ ) {
+	for( i=0; p[i] && p[i] != '%' && j < size; i++ ) {
 		if( isdigit(p[i]) || isupper(p[i]) || p[i] == '(' || p[i] == ')' ) {
 			if( p[i] == ')' ) {
 				for( n=j; n > 0 && q[n-1] != '('; n-- )	;	// find open paren in q
@@@@ -3201,27 +3202,33 @@@@ static void abc_MIDI_chordname(const char *p)
 static int abc_MIDI_drum(const char *p, ABCHANDLE *h)
 {
 	char *q;
-	int i,n,m;
+	int i, n, m, len;
 	while( isspace(*p) ) p++;
 	if( !strncmp(p,"on",2) && (isspace(p[2]) || p[2] == '\0') ) return 2;
 	if( !strncmp(p,"off",3) && (isspace(p[3]) || p[3] == '\0') ) return 1;
-	n = 0;
+	n = 0; len = 0;
 	for( q = h->drum; *p && !isspace(*p); p++ ) {
 		if( !strchr("dz0123456789",*p) ) break;
-		*q++ = *p;
-		if( !isdigit(*p) ) {
-			if( !isdigit(p[1]) ) *q++ = '1';
+		*q++ = *p; len++;
+		if( !isdigit(*p) && len < sizeof(h->drum)-1 ) {
+			if( !isdigit(p[1]) ) { *q++ = '1'; len ++; }
 			n++; // count the silences too....
 		}
+		if (len >= sizeof(h->drum)-1) {
+			// consume the rest of the input
+			// definitely enough "drum last state" stored.
+			while ( *p && !isspace(*p) ) p++;
+			break;
+		}
 	}
 	*q = '\0';
 	q = h->drumins;
 	for( i = 0; i<n; i++ ) {
 		if( h->drum[i*2] == 'd' ) {
-			while( isspace(*p) ) p++;
+			while( *p && isspace(*p) ) p++;
 			if( !isdigit(*p) ) {
 				m = 0;
-				while( !isspace(*p) ) p++;
+				while( *p && !isspace(*p) ) p++;
d12 7
a18 12
 			else
 				p += abc_getnumber(p,&m);
@@@@ -3232,10 +3239,10 @@@@ static int abc_MIDI_drum(const char *p, ABCHANDLE *h)
 	q = h->drumvol;
 	for( i = 0; i<n; i++ ) {
 		if( h->drum[i*2] == 'd' ) {
-			while( isspace(*p) ) p++;
+			while( *p && isspace(*p) ) p++;
 			if( !isdigit(*p) ) {
 				m = 0;
-				while( !isspace(*p) ) p++;
+				while( *p && !isspace(*p) ) p++;
d20 2
a21 24
 			else
 				p += abc_getnumber(p,&m);
@@@@ -3250,13 +3257,19 @@@@ static int abc_MIDI_drum(const char *p, ABCHANDLE *h)
 static int abc_MIDI_gchord(const char *p, ABCHANDLE *h)
 {
 	char *q;
+	int len = 0;
 	while( isspace(*p) ) p++;
 	if( !strncmp(p,"on",2) && (isspace(p[2]) || p[2] == '\0') ) return 2;
 	if( !strncmp(p,"off",3) && (isspace(p[3]) || p[3] == '\0') ) return 1;
 	for( q = h->gchord; *p && !isspace(*p); p++ ) {
 		if( !strchr("fbcz0123456789ghijGHIJ",*p) ) break;
-		*q++ = *p;
-		if( !isdigit(*p) && !isdigit(p[1]) ) *q++ = '1';
+		*q++ = *p; len++;
+		if( !isdigit(*p) && len < sizeof(h->gchord)-1 && !isdigit(p[1]) ) { *q++ = '1'; len ++; }
+		if (len >= sizeof(h->gchord)-1) {
+			// consume the rest of the input
+			// definitely enough "drum last state" stored.
+			while ( *p && !isspace(*p) ) p++;
+		}
 	}
 	*q = '\0';
 	return 0;
@


1.2.2.1
log
@Add patch to fix CVE-2013-4233 and CVE-2013-4234
Taken from
https://github.com/Konstanty/libmodplug/commit/f5e45759ad12f9e057e13a598421e610350f70a9
and
https://github.com/Konstanty/libmodplug/commit/bcee04058dcbe22bfb488614eb9a8cf54304a740
requested and go ahead from jasper@@
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 4
Fixes for CVE-2013-4233
https://github.com/Konstanty/libmodplug/commit/f5e45759ad12f9e057e13a598421e610350f70a9
and CVE-2013-4234
https://github.com/Konstanty/libmodplug/commit/bcee04058dcbe22bfb488614eb9a8cf54304a740
d6 5
a10 63
--- src/load_abc.cpp.orig	Sat Oct 18 18:03:04 2014
+++ src/load_abc.cpp	Sat Oct 18 18:10:42 2014
@@@@ -1811,7 +1811,7 @@@@ static int abc_extract_tempo(const char *p, int invoic
 
 static void	abc_set_parts(char **d, char *p)
 {
-	int i,j,k,m,n;
+	int i,j,k,m,n,size;
 	char *q;
 #ifdef NEWMIKMOD
 	static MM_ALLOC *h;
@@@@ -1849,10 +1849,11 @@@@ static void	abc_set_parts(char **d, char *p)
 			i += n-1;
 		}
 	}
-	q = (char *)_mm_calloc(h, j+1, sizeof(char));	// enough storage for the worst case
+	size = (j + 1) > 0 ? j+1 : j;
+	q = (char *)_mm_calloc(h, size, sizeof(char));	// enough storage for the worst case
 	// now copy bytes from p to *d, taking parens and digits in account
 	j = 0;
-	for( i=0; p[i] && p[i] != '%'; i++ ) {
+	for( i=0; p[i] && p[i] != '%' && j < size; i++ ) {
 		if( isdigit(p[i]) || isupper(p[i]) || p[i] == '(' || p[i] == ')' ) {
 			if( p[i] == ')' ) {
 				for( n=j; n > 0 && q[n-1] != '('; n-- )	;	// find open paren in q
@@@@ -3201,27 +3202,33 @@@@ static void abc_MIDI_chordname(const char *p)
 static int abc_MIDI_drum(const char *p, ABCHANDLE *h)
 {
 	char *q;
-	int i,n,m;
+	int i, n, m, len;
 	while( isspace(*p) ) p++;
 	if( !strncmp(p,"on",2) && (isspace(p[2]) || p[2] == '\0') ) return 2;
 	if( !strncmp(p,"off",3) && (isspace(p[3]) || p[3] == '\0') ) return 1;
-	n = 0;
+	n = 0; len = 0;
 	for( q = h->drum; *p && !isspace(*p); p++ ) {
 		if( !strchr("dz0123456789",*p) ) break;
-		*q++ = *p;
-		if( !isdigit(*p) ) {
-			if( !isdigit(p[1]) ) *q++ = '1';
+		*q++ = *p; len++;
+		if( !isdigit(*p) && len < sizeof(h->drum)-1 ) {
+			if( !isdigit(p[1]) ) { *q++ = '1'; len ++; }
 			n++; // count the silences too....
 		}
+		if (len >= sizeof(h->drum)-1) {
+			// consume the rest of the input
+			// definitely enough "drum last state" stored.
+			while ( *p && !isspace(*p) ) p++;
+			break;
+		}
 	}
 	*q = '\0';
 	q = h->drumins;
 	for( i = 0; i<n; i++ ) {
 		if( h->drum[i*2] == 'd' ) {
-			while( isspace(*p) ) p++;
+			while( *p && isspace(*p) ) p++;
 			if( !isdigit(*p) ) {
 				m = 0;
-				while( !isspace(*p) ) p++;
+				while( *p && !isspace(*p) ) p++;
d12 7
a18 12
 			else
 				p += abc_getnumber(p,&m);
@@@@ -3232,10 +3239,10 @@@@ static int abc_MIDI_drum(const char *p, ABCHANDLE *h)
 	q = h->drumvol;
 	for( i = 0; i<n; i++ ) {
 		if( h->drum[i*2] == 'd' ) {
-			while( isspace(*p) ) p++;
+			while( *p && isspace(*p) ) p++;
 			if( !isdigit(*p) ) {
 				m = 0;
-				while( !isspace(*p) ) p++;
+				while( *p && !isspace(*p) ) p++;
d20 2
a21 24
 			else
 				p += abc_getnumber(p,&m);
@@@@ -3250,13 +3257,19 @@@@ static int abc_MIDI_drum(const char *p, ABCHANDLE *h)
 static int abc_MIDI_gchord(const char *p, ABCHANDLE *h)
 {
 	char *q;
+	int len = 0;
 	while( isspace(*p) ) p++;
 	if( !strncmp(p,"on",2) && (isspace(p[2]) || p[2] == '\0') ) return 2;
 	if( !strncmp(p,"off",3) && (isspace(p[3]) || p[3] == '\0') ) return 1;
 	for( q = h->gchord; *p && !isspace(*p); p++ ) {
 		if( !strchr("fbcz0123456789ghijGHIJ",*p) ) break;
-		*q++ = *p;
-		if( !isdigit(*p) && !isdigit(p[1]) ) *q++ = '1';
+		*q++ = *p; len++;
+		if( !isdigit(*p) && len < sizeof(h->gchord)-1 && !isdigit(p[1]) ) { *q++ = '1'; len ++; }
+		if (len >= sizeof(h->gchord)-1) {
+			// consume the rest of the input
+			// definitely enough "drum last state" stored.
+			while ( *p && !isspace(*p) ) p++;
+		}
 	}
 	*q = '\0';
 	return 0;
@


1.1
log
@potpourri of fixes from upstream, from overflows to crashers.
@
text
@d1 1
a1 1
$OpenBSD$
@


1.1.2.1
log
@potpourri of fixes from upstream, from overflows to crashers.
@
text
@d6 3
a8 3
--- src/load_abc.cpp.orig	Sun Apr  4 14:15:24 2010
+++ src/load_abc.cpp	Thu May  5 23:24:13 2011
@@@@ -1016,10 +1016,12 @@@@ static void abc_remove_unnecessary_events(ABCHANDLE *h
@

