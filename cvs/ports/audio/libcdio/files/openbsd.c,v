head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.16
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.12
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.14
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.10
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.18
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	OPENBSD_5_0:1.3.0.14
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.12
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.10
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.8
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	jasper_20080320:1.1.1.1
	jasper:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2012.08.19.22.30.37;	author ajacoutot;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.01.09.05.12;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.21.12.41.22;	author ajacoutot;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.20.18.24.42;	author jasper;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.03.20.18.24.42;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.4
log
@RCS id cleanup; also add OpenBSD RCS Id where missing...
@
text
@/*	$OpenBSD: openbsd.c,v 1.3 2008/05/01 09:05:12 fgsch Exp $	*/
/*
 * Copyright (c) 2008 Federico G. Schwindt
 * Copyright (c) 2003 Matthias Drochner
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <cdio/sector.h>
#include <cdio/util.h>
#include "cdio_assert.h"
#include "cdio_private.h"

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/cdio.h>
#include <sys/scsiio.h>

#define DEFAULT_CDIO_DEVICE "/dev/rcd0c"

typedef struct {
	generic_img_private_t	gen;

	struct ioc_toc_header	tochdr;
	struct cd_toc_entry	tocent[CDIO_CD_MAX_TRACKS + 1];
} _img_private_t;

static driver_return_code_t
run_mmc_cmd_openbsd(void *p_user_data, unsigned int i_timeout_ms,
    unsigned int i_cdb, const mmc_cdb_t *p_cdb,
    cdio_mmc_direction_t e_direction, unsigned int i_buf, void *p_buf)
{
	const _img_private_t *p_env = p_user_data;
	scsireq_t req;

	memset(&req, 0, sizeof(req));
	memcpy(&req.cmd[0], p_cdb, i_cdb);
	req.cmdlen = i_cdb;
	req.datalen = i_buf;
	req.databuf = p_buf;
	req.timeout = i_timeout_ms;
	req.flags = e_direction ==
	    SCSI_MMC_DATA_READ ? SCCMD_READ : SCCMD_WRITE;

	if (ioctl(p_env->gen.fd, SCIOCCOMMAND, &req) < 0) {
		cdio_info("ioctl SCIOCCOMMAND failed: %s\n", strerror(errno));
		return (DRIVER_OP_ERROR);
	}

	if (req.retsts != SCCMD_OK) {
		cdio_info("unexpected status for SCIOCCOMMAND %#x: %#x\n",
		    req.cmd[0], req.retsts);
		return (DRIVER_OP_ERROR);
	}

	return (DRIVER_OP_SUCCESS);
}

static driver_return_code_t
audio_get_volume_openbsd(void *p_user_data, cdio_audio_volume_t *p_volume)
{
	const _img_private_t *p_env = p_user_data;
	return (ioctl(p_env->gen.fd, CDIOCGETVOL, p_volume));
}

static driver_return_code_t
audio_pause_openbsd(void *p_user_data)
{
	const _img_private_t *p_env = p_user_data;
	return (ioctl(p_env->gen.fd, CDIOCPAUSE));
}

static driver_return_code_t
audio_play_msf_openbsd(void *p_user_data, msf_t *p_start_msf, msf_t *p_end_msf)
{
	const _img_private_t *p_env = p_user_data;
	struct ioc_play_msf a;

	a.start_m = cdio_from_bcd8(p_start_msf->m);
	a.start_s = cdio_from_bcd8(p_start_msf->s);
	a.start_f = cdio_from_bcd8(p_start_msf->f);
	a.end_m = cdio_from_bcd8(p_end_msf->m);
	a.end_s = cdio_from_bcd8(p_end_msf->s);
	a.end_f = cdio_from_bcd8(p_end_msf->f);

	return (ioctl(p_env->gen.fd, CDIOCPLAYMSF, (char *)&a));
}

#if !USE_MMC_SUBCHANNEL
static driver_return_code_t
audio_read_subchannel_openbsd(void *p_user_data, cdio_subchannel_t *subchannel)
{
	const _img_private_t *p_env = p_user_data;
	struct ioc_read_subchannel s;
	struct cd_sub_channel_info data;

	bzero(&s, sizeof(s));
	s.data = &data;
	s.data_len = sizeof(data);
	s.address_format = CD_MSF_FORMAT;
	s.data_format = CD_CURRENT_POSITION;

	if (ioctl(p_env->gen.fd, CDIOCREADSUBCHANNEL, &s) != -1) {
		subchannel->control = s.data->what.position.control;
		subchannel->track = s.data->what.position.track_number;
		subchannel->index = s.data->what.position.index_number;

		subchannel->abs_addr.m =
		    cdio_to_bcd8(s.data->what.position.absaddr.msf.minute);
		subchannel->abs_addr.s =
		    cdio_to_bcd8(s.data->what.position.absaddr.msf.second);
		subchannel->abs_addr.f =
		    cdio_to_bcd8(s.data->what.position.absaddr.msf.frame);
		subchannel->rel_addr.m =
		    cdio_to_bcd8(s.data->what.position.reladdr.msf.minute);
		subchannel->rel_addr.s =
		    cdio_to_bcd8(s.data->what.position.reladdr.msf.second);
		subchannel->rel_addr.f =
		    cdio_to_bcd8(s.data->what.position.reladdr.msf.frame);
		subchannel->audio_status = s.data->header.audio_status;

		return (DRIVER_OP_SUCCESS);
	} else {
		cdio_info("ioctl CDIOCREADSUBCHANNEL failed: %s\n",
		    strerror(errno));
		return (DRIVER_OP_ERROR);
	}
}
#endif

static driver_return_code_t
audio_resume_openbsd(void *p_user_data)
{
	const _img_private_t *p_env = p_user_data;
	return (ioctl(p_env->gen.fd, CDIOCRESUME));
}

static driver_return_code_t
audio_set_volume_openbsd(void *p_user_data, cdio_audio_volume_t *p_volume)
{
	const _img_private_t *p_env = p_user_data;
	return (ioctl(p_env->gen.fd, CDIOCSETVOL, p_volume));
}

static driver_return_code_t
audio_stop_openbsd(void *p_user_data)
{
	const _img_private_t *p_env = p_user_data;
	return (ioctl(p_env->gen.fd, CDIOCSTOP));
}

static driver_return_code_t
eject_media_openbsd(void *p_user_data)
{
	_img_private_t *p_env = p_user_data;
	driver_return_code_t ret = DRIVER_OP_SUCCESS;
	bool was_open = false;

	if (p_env->gen.fd == -1)
		p_env->gen.fd = open(p_env->gen.source_name,
		    O_RDONLY|O_NONBLOCK, 0);
	else
		was_open = true;

	if (p_env->gen.fd == -1)
		return (DRIVER_OP_ERROR);

	if (ioctl(p_env->gen.fd, CDIOCALLOW) == -1)
		cdio_info("ioctl CDIOCALLOW failed: %s\n", strerror(errno));

	if (ioctl(p_env->gen.fd, CDIOCEJECT) == -1) {
		cdio_info("ioctl CDIOCEJECT failed: %s\n", strerror(errno));
		ret = DRIVER_OP_ERROR;
	}

	if (!was_open) {
		close(p_env->gen.fd);
		p_env->gen.fd = -1;
	}

	return (ret);
}

static const char *
get_arg_openbsd(void *p_user_data, const char key[])
{
	_img_private_t *p_env = p_user_data;

	if (!strcmp(key, "source")) {
		return (p_env->gen.source_name);
	} else if (!strcmp(key, "access-mode")) {
		return ("READ_CD");
	}

	return (NULL);
}

static bool
read_toc_openbsd(void *p_user_data)
{
	_img_private_t *p_env = p_user_data;
	struct ioc_read_toc_entry req;

	if (ioctl(p_env->gen.fd, CDIOREADTOCHEADER, &p_env->tochdr) == -1) {
		cdio_info("error in ioctl CDIOREADTOCHEADER: %s\n",
		    strerror(errno));
		return (false);
	}

	p_env->gen.i_first_track = p_env->tochdr.starting_track;
	p_env->gen.i_tracks = (p_env->tochdr.ending_track -
	    p_env->tochdr.starting_track) + 1;

	req.address_format = CD_LBA_FORMAT;
	req.starting_track = p_env->gen.i_first_track;
	req.data_len = sizeof(p_env->tocent);
	req.data = p_env->tocent;

	if (ioctl(p_env->gen.fd, CDIOREADTOCENTRIES, &req) == -1) {
		cdio_info("error in ioctl CDIOREADTOCENTRIES: %s\n",
		    strerror(errno));
		return (false);
	}

	p_env->gen.toc_init = true;
	return (true);
}

static lba_t
get_track_lba_openbsd(void *p_user_data, track_t i_track)
{
	_img_private_t *p_env = p_user_data;

	if (!p_env->gen.toc_init)
		read_toc_openbsd(p_env);

	if (i_track == CDIO_CDROM_LEADOUT_TRACK)
		i_track = p_env->gen.i_first_track + p_env->gen.i_tracks;

	if (!p_env->gen.toc_init ||
	    i_track > (p_env->gen.i_first_track + p_env->gen.i_tracks) ||
	    i_track < p_env->gen.i_first_track)
		return (CDIO_INVALID_LBA);

	return (p_env->tocent[i_track - p_env->gen.i_first_track].addr.lba +
	    CDIO_PREGAP_SECTORS);
}

static lsn_t
get_disc_last_lsn_openbsd(void *user_data)
{
	return (get_track_lba_openbsd(user_data, CDIO_CDROM_LEADOUT_TRACK));
}

static driver_return_code_t
get_last_session_openbsd(void *p_user_data, lsn_t *i_last_session)
{
	const _img_private_t *p_env = p_user_data;
	int addr;
	
	if (ioctl(p_env->gen.fd, CDIOREADMSADDR, &addr) == 0) {
		*i_last_session = addr;
		return (DRIVER_OP_SUCCESS);
	} else {
		cdio_info("ioctl CDIOREADMSADDR failed: %s\n",
		    strerror(errno));
		return (DRIVER_OP_ERROR);
	}
}
static track_format_t
get_track_format_openbsd(void *p_user_data, track_t i_track)
{
	_img_private_t *p_env = p_user_data;

	if (!p_env)
		return (TRACK_FORMAT_ERROR);

	if (!p_env->gen.toc_init)
		read_toc_openbsd(p_env);

	if (!p_env->gen.toc_init ||
	    i_track > (p_env->gen.i_first_track + p_env->gen.i_tracks) ||
	    i_track < p_env->gen.i_first_track)
		return (TRACK_FORMAT_ERROR);

	if (p_env->tocent[i_track - 1].control & CDIO_CDROM_DATA_TRACK)
		return (TRACK_FORMAT_DATA);
	else
		return (TRACK_FORMAT_AUDIO);
}

static bool
get_track_green_openbsd(void *user_data, track_t i_track)
{
	return (get_track_format_openbsd(user_data, i_track) ==
	    TRACK_FORMAT_XA);
}

static int
read_audio_sectors_openbsd(void *p_user_data, void *p_buf, lsn_t i_lsn,
    unsigned int i_blocks)
{
	_img_private_t *p_env = p_user_data;
	return (mmc_read_sectors(p_env->gen.cdio, p_buf, i_lsn,
	    CDIO_MMC_READ_TYPE_CDDA, i_blocks));
}

static int
read_mode2_sector_openbsd(void *p_user_data, void *p_buf, lsn_t i_lsn,
    bool b_mode2_form2)
{
	scsireq_t req;
	_img_private_t *p_env = p_user_data;
	char buf[M2RAW_SECTOR_SIZE] = { 0, };

	memset(&req, 0, sizeof(req));
	req.cmd[0] = CDIO_MMC_GPCMD_READ_CD;
	req.cmd[2] = (i_lsn >> 24) & 0xff;
	req.cmd[3] = (i_lsn >> 16) & 0xff;
	req.cmd[4] = (i_lsn >> 8) & 0xff;
	req.cmd[5] = (i_lsn >> 0) & 0xff;
	req.cmd[8] = 1;
	req.cmd[9] = 0x58; /* subheader + userdata + ECC */
	req.cmdlen = 10;

	req.datalen = M2RAW_SECTOR_SIZE;
	req.databuf = buf;
	req.timeout = 10000;
	req.flags = SCCMD_READ;

	if (ioctl(p_env->gen.fd, SCIOCCOMMAND, &req) < 0) {
		cdio_info("ioctl SCIOCCOMMAND failed: %s\n", strerror(errno));
		return (DRIVER_OP_ERROR);
	}

	if (req.retsts != SCCMD_OK) {
		cdio_info("unexpected status for SCIOCCOMMAND %#x: %#x\n",
		    req.cmd[0], req.retsts);
		return (DRIVER_OP_ERROR);
	}

	if (b_mode2_form2)
		memcpy(p_buf, buf, M2RAW_SECTOR_SIZE);
	else
		memcpy(p_buf, buf + CDIO_CD_SUBHEADER_SIZE, CDIO_CD_FRAMESIZE);

	return (DRIVER_OP_SUCCESS);
}

static int
read_mode2_sectors_openbsd(void *p_user_data, void *p_buf, lsn_t i_lsn,
    bool b_mode2_form2, unsigned int i_blocks)
{
	uint16_t i_blocksize = b_mode2_form2 ? M2RAW_SECTOR_SIZE :
	    CDIO_CD_FRAMESIZE;
	unsigned int i;
	int retval;

	for (i = 0; i < i_blocks; i++) {
		if ((retval = read_mode2_sector_openbsd(p_user_data,
		    ((char *)p_buf) + (i_blocksize * i), i_lsn + i,
		    b_mode2_form2)))
			return (retval);
	}

	return (DRIVER_OP_SUCCESS);
}

static int
set_arg_openbsd(void *p_user_data, const char key[], const char value[])
{
	_img_private_t *p_env = p_user_data;

	if (!strcmp(key, "source")) {
		if (!value)
			return (DRIVER_OP_ERROR);

		free(p_env->gen.source_name);
		p_env->gen.source_name = strdup(value);
	} else if (!strcmp(key, "access-mode")) {
		if (strcmp(value, "READ_CD"))
			cdio_info("unknown access type: %s ignored.", value);
	} else
		return (DRIVER_OP_ERROR);

	return (DRIVER_OP_SUCCESS);
}

static cdio_funcs_t _funcs = {
	.audio_get_volume	= audio_get_volume_openbsd,
	.audio_pause		= audio_pause_openbsd,
	.audio_play_msf		= audio_play_msf_openbsd,
	.audio_play_track_index	= NULL,
#if USE_MMC_SUBCHANNEL
	.audio_read_subchannel	= audio_read_subchannel_mmc,
#else
	.audio_read_subchannel	= audio_read_subchannel_openbsd,
#endif
	.audio_resume		= audio_resume_openbsd,
	.audio_set_volume	= audio_set_volume_openbsd,
	.audio_stop		= audio_stop_openbsd,
	.eject_media		= eject_media_openbsd,
	.free			= cdio_generic_free,
	.get_arg		= get_arg_openbsd,
	.get_blocksize		= NULL,
	.get_cdtext		= get_cdtext_generic,
	.get_default_device	= cdio_get_default_device_openbsd,
	.get_devices		= cdio_get_devices_openbsd,
	.get_disc_last_lsn	= get_disc_last_lsn_openbsd,
	.get_discmode		= get_discmode_generic,
	.get_drive_cap		= get_drive_cap_mmc,
	.get_first_track_num	= get_first_track_num_generic,
	.get_hwinfo		= NULL,
	.get_last_session	= get_last_session_openbsd,
	.get_media_changed	= get_media_changed_mmc,
	.get_mcn		= get_mcn_mmc,
	.get_num_tracks		= get_num_tracks_generic,
	.get_track_channels	= get_track_channels_generic,
	.get_track_copy_permit	= get_track_copy_permit_generic,
	.get_track_lba      	= get_track_lba_openbsd,
	.get_track_format	= get_track_format_openbsd,
	.get_track_green	= get_track_green_openbsd,
	.get_track_msf		= NULL,
	.get_track_preemphasis	= get_track_preemphasis_generic,
	.lseek			= cdio_generic_lseek,
	.read			= cdio_generic_read,
	.read_audio_sectors	= read_audio_sectors_openbsd,
	.read_data_sectors	= read_data_sectors_generic,
	.read_mode2_sector	= read_mode2_sector_openbsd,
	.read_mode2_sectors	= read_mode2_sectors_openbsd,
	.read_mode1_sector	= NULL,
	.read_mode1_sectors	= NULL,
	.read_toc		= read_toc_openbsd,
	.run_mmc_cmd		= run_mmc_cmd_openbsd,
	.set_arg		= set_arg_openbsd,
	.set_blocksize		= NULL,
	.set_speed		= NULL,
};

bool
cdio_have_openbsd(void)
{
	return (true);
}

CdIo *
cdio_open_openbsd(const char *source_name)
{
	CdIo *ret;
	_img_private_t *_data;

	_data = calloc(1, sizeof(_img_private_t));
	_data->gen.init = false;
	_data->gen.toc_init = false;
	_data->gen.fd = -1;

	set_arg_openbsd(_data, "source",
	    (source_name ? source_name : DEFAULT_CDIO_DEVICE));

	if (source_name && !cdio_is_device_generic(source_name))
		goto error;

	ret = cdio_new(_data, &_funcs);
	if (!ret)
		goto error;

	if (!cdio_generic_init(_data, O_RDONLY))
		goto error;

	return (ret);

 error:
	cdio_generic_free(_data);
	return (NULL);
}

CdIo *
cdio_open_am_openbsd(const char *source_name, const char *am)
{
	return (cdio_open_openbsd(source_name));
}

char *
cdio_get_default_device_openbsd()
{
	return (strdup(DEFAULT_CDIO_DEVICE));
}

char **
cdio_get_devices_openbsd(void)
{
	char drive[40];
	char **drives = NULL;
	unsigned int num_drives = 0;
	int cdfd;
	int n;

	for (n = 0; n <= 9; n++) {
		snprintf(drive, sizeof(drive), "/dev/rcd%dc", n);
		if (!cdio_is_device_quiet_generic(drive))
			continue;
		if ((cdfd = open(drive, O_RDONLY|O_NONBLOCK, 0)) == -1)
			continue;
		close(cdfd);
		cdio_add_device_list(&drives, drive, &num_drives);
	}

	cdio_add_device_list(&drives, NULL, &num_drives);

	return (drives);
}

driver_return_code_t
close_tray_openbsd(const char *psz_device)
{
	return (DRIVER_OP_UNSUPPORTED);
}
@


1.3
log
@o move to an OpenBSD driver, reorganized, cleaner and with more support
o re-add cdda-player
o install libcdio_cdda.pc

ajacoutot@@ ok.
@
text
@d1 1
a1 3
/*	$OpenBSD: openbsd.c,v 1.2 2008/03/21 12:41:22 ajacoutot Exp $	*/
/*	$NetBSD: _cdio_netbsd.c,v 1.4 2005/05/31 17:05:36 drochner Exp $	*/

@


1.2
log
@- "0xbe is the command, not a format string"... from jakemsr@@
@
text
@d1 2
a2 4
/* $OpenBSD: openbsd.c,v 1.1.1.1 2008/03/20 18:24:42 jasper Exp $ */


/* $NetBSD: _cdio_netbsd.c,v 1.4 2005/05/31 17:05:36 drochner Exp $ */
d5 3
a7 2
 * Copyright (c) 2003
 *      Matthias Drochner.  All rights reserved.
a29 5
/*
 * XXX This is for NetBSD but uses "freebsd" function names to plug
 * nicely into the existing libcdio.
 */

a52 4
#define TOTAL_TRACKS (_obj->tochdr.ending_track \
		      - _obj->tochdr.starting_track + 1)
#define FIRST_TRACK_NUM (_obj->tochdr.starting_track)

d54 1
a54 1
	generic_img_private_t gen; 
d56 2
a57 6
	bool toc_valid;
	struct ioc_toc_header tochdr;
	struct cd_toc_entry tocent[100];

	bool sessionformat_valid;
	int sessionformat[100]; /* format of the session the track is in */
d61 3
a63 4
run_scsi_cmd_freebsd(void *p_user_data, unsigned int i_timeout_ms,
		     unsigned int i_cdb, const mmc_cdb_t *p_cdb, 
		     cdio_mmc_direction_t e_direction,
		     unsigned int i_buf, void *p_buf )
d65 1
a65 1
	const _img_private_t *_obj = p_user_data;
d74 2
a75 1
	req.flags = e_direction == SCSI_MMC_DATA_READ ? SCCMD_READ : SCCMD_WRITE;
d77 3
a79 3
	if (ioctl(_obj->gen.fd, SCIOCCOMMAND, &req) < 0) {
		perror("SCIOCCOMMAND");
		return -1;
d81 1
d83 3
a85 2
		fprintf(stderr, "SCIOCCOMMAND cmd 0x%02x sts %d\n", req.cmd[0], req.retsts);
		return -1;
d88 1
a88 1
	return 0;
d91 2
a92 3
static int
_cdio_read_audio_sectors(void *user_data, void *data, lsn_t lsn,
			unsigned int nblocks)
d94 3
a96 2
	scsireq_t req;
	_img_private_t *_obj = user_data;
d98 6
a103 12
	memset(&req, 0, sizeof(req));
	req.cmd[0] = 0xbe;
	req.cmd[1] = 0;
	req.cmd[2] = (lsn >> 24) & 0xff;
	req.cmd[3] = (lsn >> 16) & 0xff;
	req.cmd[4] = (lsn >> 8) & 0xff;
	req.cmd[5] = (lsn >> 0) & 0xff;
	req.cmd[6] = (nblocks >> 16) & 0xff;
	req.cmd[7] = (nblocks >> 8) & 0xff;
	req.cmd[8] = (nblocks >> 0) & 0xff;
	req.cmd[9] = 0x78;
	req.cmdlen = 10;
d105 5
a109 4
	req.datalen = nblocks * CDIO_CD_FRAMESIZE_RAW; 
	req.databuf = data;
	req.timeout = 10000;
	req.flags = SCCMD_READ;
d111 6
a116 8
	if (ioctl(_obj->gen.fd, SCIOCCOMMAND, &req) < 0) {
		perror("SCIOCCOMMAND");
		return 1;
	}
	if (req.retsts != SCCMD_OK) {
		fprintf(stderr, "SCIOCCOMMAND cmd 0xbe sts %d\n", req.retsts);
		return 1;
	}
d118 1
a118 1
	return 0;
d121 3
a123 3
static int
_cdio_read_mode2_sector(void *user_data, void *data, lsn_t lsn, 
			bool mode2_form2)
d125 28
a152 3
	scsireq_t req;
	_img_private_t *_obj = user_data;
	char buf[M2RAW_SECTOR_SIZE] = { 0, };
d154 5
a158 25
	memset(&req, 0, sizeof(req));
	req.cmd[0] = 0xbe;
	req.cmd[1] = 0;
	req.cmd[2] = (lsn >> 24) & 0xff;
	req.cmd[3] = (lsn >> 16) & 0xff;
	req.cmd[4] = (lsn >> 8) & 0xff;
	req.cmd[5] = (lsn >> 0) & 0xff;
	req.cmd[6] = 0;
	req.cmd[7] = 0;
	req.cmd[8] = 1;
	req.cmd[9] = 0x58; /* subheader + userdata + ECC */
	req.cmdlen = 10;

	req.datalen = M2RAW_SECTOR_SIZE; 
	req.databuf = buf;
	req.timeout = 10000;
	req.flags = SCCMD_READ;

	if (ioctl(_obj->gen.fd, SCIOCCOMMAND, &req) < 0) {
		perror("SCIOCCOMMAND");
		return 1;
	}
	if (req.retsts != SCCMD_OK) {
		fprintf(stderr, "SCIOCCOMMAND cmd 0xbe sts %d\n", req.retsts);
		return 1;
d160 2
d163 6
a168 4
	if (mode2_form2)
		memcpy(data, buf, M2RAW_SECTOR_SIZE);
	else
		memcpy(data, buf + CDIO_CD_SUBHEADER_SIZE, CDIO_CD_FRAMESIZE);
d170 5
a174 1
	return 0;
d177 2
a178 3
static int
_cdio_read_mode2_sectors(void *user_data, void *data, lsn_t lsn, 
			 bool mode2_form2, unsigned int nblocks)
d180 3
a182 2
	int i, res;
	char *buf = data;
d184 12
a195 4
	for (i = 0; i < nblocks; i++) {
		res = _cdio_read_mode2_sector(user_data, buf, lsn, mode2_form2);
		if (res)
			return res;
d197 2
a198 3
		buf += (mode2_form2 ? M2RAW_SECTOR_SIZE : CDIO_CD_FRAMESIZE);
		lsn++;
	}
d200 2
a201 2
	return 0;
}
d203 4
a206 6
static uint32_t 
_cdio_stat_size(void *user_data)
{
	_img_private_t *_obj = user_data;
	struct ioc_read_toc_entry req;
	struct cd_toc_entry tocent;
d208 3
a210 8
	req.address_format = CD_LBA_FORMAT;
	req.starting_track = 0xaa;
	req.data_len = sizeof(tocent);
	req.data = &tocent;

	if (ioctl(_obj->gen.fd, CDIOREADTOCENTRIES, &req) < 0) {
		perror("ioctl(CDIOREADTOCENTRY) leadout");
		exit(EXIT_FAILURE);
d213 1
a213 1
	return (tocent.addr.lba);
d216 2
a217 2
static int
_cdio_set_arg(void *user_data, const char key[], const char value[])
d219 1
a219 1
	_img_private_t *_obj = user_data;
d222 1
a222 5
		if (!value)
			return -2;

		free(_obj->gen.source_name);
		_obj->gen.source_name = strdup(value);
d224 2
a225 4
		if (strcmp(value, "READ_CD"))
			cdio_error("unknown access type: %s ignored.", value);
	} else 
		return -1;
d227 1
a227 1
	return 0;
d231 1
a231 1
_cdio_read_toc(_img_private_t *_obj) 
d233 1
a233 1
	int res;
d236 4
a239 18
	res = ioctl(_obj->gen.fd, CDIOREADTOCHEADER, &_obj->tochdr);
	if (res < 0) {
		cdio_error("error in ioctl(CDIOREADTOCHEADER): %s\n",
			   strerror(errno));
		return false;
	}

	req.address_format = CD_MSF_FORMAT;
	req.starting_track = FIRST_TRACK_NUM;
	req.data_len = (TOTAL_TRACKS + 1) /* leadout! */
		* sizeof(struct cd_toc_entry); 
	req.data = _obj->tocent;

	res = ioctl(_obj->gen.fd, CDIOREADTOCENTRIES, &req);
	if (res < 0) {
		cdio_error("error in ioctl(CDROMREADTOCENTRIES): %s\n",
			   strerror(errno));
		return false;
d242 8
a249 3
	_obj->toc_valid = 1;
	return true;
}
d251 5
a255 3
static bool
read_toc_freebsd (void *p_user_data) 
{
d257 2
a258 1
	return _cdio_read_toc(p_user_data);
d261 2
a262 2
static int
_cdio_read_discinfo(_img_private_t *_obj)
d264 1
a264 4
	scsireq_t req;
#define FULLTOCBUF (4 + 1000*11)
	unsigned char buf[FULLTOCBUF] = { 0, };
	int i, j;
d266 2
a267 17
	memset(&req, 0, sizeof(req));
	req.cmd[0] = 0x43; /* READ TOC/PMA/ATIP */
	req.cmd[1] = 0x02;
	req.cmd[2] = 0x02; /* full TOC */
	req.cmd[3] = 0;
	req.cmd[4] = 0;
	req.cmd[5] = 0;
	req.cmd[6] = 0;
	req.cmd[7] = FULLTOCBUF / 256;
	req.cmd[8] = FULLTOCBUF % 256;
	req.cmd[9] = 0;
	req.cmdlen = 10;

	req.datalen = FULLTOCBUF; 
	req.databuf = buf;
	req.timeout = 10000;
	req.flags = SCCMD_READ;
d269 2
a270 19
	if (ioctl(_obj->gen.fd, SCIOCCOMMAND, &req) < 0) {
		perror("SCIOCCOMMAND");
		return 1;
	}
	if (req.retsts != SCCMD_OK) {
		fprintf(stderr, "SCIOCCOMMAND cmd 0x43 sts %d\n", req.retsts);
		return 1;
	}
#if 1
	printf("discinfo:");
	for (i = 0; i < 4; i++)
		printf(" %02x", buf[i]);
	printf("\n");
	for (i = 0; i < buf[1] - 2; i++) {
		printf(" %02x", buf[i + 4]);
		if (!((i + 1) % 11))
			printf("\n");
	}
#endif
d272 4
a275 7
	for (i = 4; i < req.datalen_used; i += 11) {
		if (buf[i + 3] == 0xa0) { /* POINT */
			/* XXX: assume entry 0xa1 follows */
			for (j = buf[i + 8] - 1; j <= buf[i + 11 + 8] - 1; j++)
				_obj->sessionformat[j] = buf[i + 9];
		}
	}
d277 2
a278 2
	_obj->sessionformat_valid = true;
	return 0;
d281 5
a285 2
static int 
_cdio_eject_media(void *user_data) {
d287 13
a299 18
	_img_private_t *_obj = user_data;
	int fd, res, ret = 0;

	fd = open(_obj->gen.source_name, O_RDONLY|O_NONBLOCK);
	if (fd < 0)
		return 2;

	res = ioctl(fd, CDIOCALLOW);
	if (res < 0) {
		cdio_error("ioctl(fd, CDIOCALLOW) failed: %s\n",
			   strerror(errno));
		/* go on... */
	}
	res = ioctl(fd, CDIOCEJECT);
	if (res < 0) {
		cdio_error("ioctl(CDIOCEJECT) failed: %s\n",
			   strerror(errno));
		ret = 1;
a300 2

	return ret;
d302 2
a303 3

static const char *
_cdio_get_arg(void *user_data, const char key[])
d305 1
a305 1
	_img_private_t *_obj = user_data;
d307 2
a308 5
	if (!strcmp(key, "source")) {
		return _obj->gen.source_name;
	} else if (!strcmp(key, "access-mode")) {
		return "READ_CD";
	}
d310 2
a311 2
	return NULL;
}
d313 4
a316 11
static track_t
_cdio_get_first_track_num(void *user_data) 
{
	_img_private_t *_obj = user_data;
	int res;
  
	if (!_obj->toc_valid) {
		res = _cdio_read_toc(_obj);
		if (!res)
			return CDIO_INVALID_TRACK;
	}
d318 4
a321 1
	return FIRST_TRACK_NUM;
d324 2
a325 2
static track_t
_cdio_get_num_tracks(void *user_data) 
d327 2
a328 10
	_img_private_t *_obj = user_data;
	int res;
  
	if (!_obj->toc_valid) {
		res = _cdio_read_toc(_obj);
		if (!res)
			return CDIO_INVALID_TRACK;
	}

	return TOTAL_TRACKS;
d331 3
a333 2
static track_format_t
_cdio_get_track_format(void *user_data, track_t track_num) 
d335 3
a337 27
	_img_private_t *_obj = user_data;
	int res;
  
	if (!_obj->toc_valid) {
		res = _cdio_read_toc(_obj);
		if (!res)
			return CDIO_INVALID_TRACK;
	}

	if (track_num > TOTAL_TRACKS || track_num == 0)
		return TRACK_FORMAT_ERROR;

	if (_obj->tocent[track_num - 1].control & 0x04) {
		if (!_obj->sessionformat_valid) {
			res = _cdio_read_discinfo(_obj);
			if (res)
				return CDIO_INVALID_TRACK;
		}

		if (_obj->sessionformat[track_num - 1] == 0x10)
			return TRACK_FORMAT_CDI;
		else if (_obj->sessionformat[track_num - 1] == 0x20) 
			return TRACK_FORMAT_XA;
		else
			return TRACK_FORMAT_DATA;
	} else
		return TRACK_FORMAT_AUDIO;
d340 3
a342 2
static bool
_cdio_get_track_green(void *user_data, track_t track_num) 
d344 3
d348 9
a356 3
	return (_cdio_get_track_format(user_data, track_num)
		== TRACK_FORMAT_XA);
}
d358 4
a361 5
static bool
_cdio_get_track_msf(void *user_data, track_t track_num, msf_t *msf)
{
	_img_private_t *_obj = user_data;
	int res;
d363 4
a366 2
	if (!msf)
		return false;
d368 4
a371 4
	if (!_obj->toc_valid) {
		res = _cdio_read_toc(_obj);
		if (!res)
			return CDIO_INVALID_TRACK;
d374 4
a377 5
	if (track_num == CDIO_CDROM_LEADOUT_TRACK)
		track_num = TOTAL_TRACKS + 1;

	if (track_num > TOTAL_TRACKS + 1 || track_num == 0)
		return false;
d379 1
a379 5
	msf->m = cdio_to_bcd8(_obj->tocent[track_num - 1].addr.msf.minute);
	msf->s = cdio_to_bcd8(_obj->tocent[track_num - 1].addr.msf.second);
	msf->f = cdio_to_bcd8(_obj->tocent[track_num - 1].addr.msf.frame);

	return true;
d382 3
a384 2
static lsn_t
get_disc_last_lsn_openbsd(void *user_data) 
d386 11
a396 3
	msf_t msf;
  
	_cdio_get_track_msf(user_data, CDIO_CDROM_LEADOUT_TRACK, &msf);
d398 1
a398 1
	return (((msf.m * 60) + msf.s) * 75 + msf.f);
d401 2
a402 3

char **
cdio_get_devices_freebsd (void)
d404 1
d406 3
a408 2
	return 0;
}
d410 7
a416 10
char *
cdio_get_default_device_freebsd()
{

	return strdup(DEFAULT_CDIO_DEVICE);
}

driver_return_code_t 
close_tray_freebsd (const char *psz_device)
{
d418 1
a418 1
	return DRIVER_OP_SUCCESS;
d422 8
a429 29
	.eject_media        = _cdio_eject_media,
	.free               = cdio_generic_free,
	.get_arg            = _cdio_get_arg,
	.get_cdtext         = get_cdtext_generic,
	.get_default_device = cdio_get_default_device_freebsd,
	.get_devices        = cdio_get_devices_freebsd,
	.get_disc_last_lsn   = get_disc_last_lsn_openbsd,
	.get_discmode       = get_discmode_generic,
	.get_drive_cap      = get_drive_cap_mmc,
	.get_first_track_num= _cdio_get_first_track_num,
	.get_mcn            = get_mcn_mmc,
	.get_num_tracks     = _cdio_get_num_tracks,
	.get_track_format   = _cdio_get_track_format,
	.get_track_green    = _cdio_get_track_green,
	.get_track_lba      = NULL,
	.get_track_msf      = _cdio_get_track_msf,
	.lseek              = cdio_generic_lseek,
	.read               = cdio_generic_read,
	.read_audio_sectors = _cdio_read_audio_sectors,
	.read_data_sectors  = read_data_sectors_generic,
	.read_mode2_sector  = _cdio_read_mode2_sector,
	.read_mode2_sectors = _cdio_read_mode2_sectors,
	.read_toc           = read_toc_freebsd,
#if 1
	.run_mmc_cmd   = run_scsi_cmd_freebsd,
#endif
	.set_arg            = _cdio_set_arg,
#if 0
	.stat_size          = _cdio_stat_size
d431 39
d472 6
d479 1
a479 1
cdio_open_freebsd(const char *source_name)
d486 1
a487 2
	_data->toc_valid = false;
	_data->sessionformat_valid = false;
d489 2
a490 2
	_cdio_set_arg(_data, "source",
		      (source_name ? source_name : DEFAULT_CDIO_DEVICE));
d493 1
a493 1
		return (NULL);
d495 1
a495 1
	ret = cdio_new(&_data->gen, &_funcs);
d497 1
a497 1
		return NULL;
d499 8
a506 6
	if (cdio_generic_init(_data, O_RDONLY)) {
		return ret;
	} else {
		cdio_generic_free(_data);
		return NULL;
	}
d510 1
a510 1
cdio_open_am_freebsd(const char *source_name, const char *am)
d512 2
d515 4
a518 1
	return (cdio_open_freebsd(source_name));
d521 2
a522 2
bool
cdio_have_freebsd(void)
d524 17
d542 7
a548 1
	return true;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $OpenBSD$ */
d171 1
a171 1
		fprintf(stderr, "SCIOCCOMMAND cmd %0xbe sts %d\n", req.retsts);
@


1.1.1.1
log
@import libcdio 0.80

The libcdio package contains a library which encapsulates CD-ROM reading
and control. Applications wishing to be oblivious of the OS- and
device-dependant properties of a CD-ROM can use this library.

with and ok ajacoutot@@
@
text
@@
