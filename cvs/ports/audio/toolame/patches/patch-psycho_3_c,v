head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.50
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.46
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.48
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.44
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.42
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.40
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.38
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.36
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.34
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.32
	OPENBSD_5_0:1.1.1.1.0.30
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.28
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.26
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.22
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.20
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.18
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.16
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.14
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.12
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.10
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.8
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	sturm_2004-Jul-11:1.1.1.1
	sturm:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2004.07.11.08.11.38;	author sturm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.07.11.08.11.38;	author sturm;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD$
--- psycho_3.c.orig	2003-03-01 01:34:52.000000000 -0800
+++ psycho_3.c	2004-04-21 22:41:50.000000000 -0700
@@@@ -131,10 +131,10 @@@@ void psycho_3_fft(FLOAT sample[BLKSIZE],
   int i;
   static int init = 0;
   static FLOAT *window;
+  register const FLOAT sqrt_8_over_3 = pow (8.0 / 3.0, 0.5);
 
   if (!init) { /* calculate window function for the Fourier transform */
     window = (FLOAT *) mem_alloc (sizeof (DFFT), "window");
-    register FLOAT sqrt_8_over_3 = pow (8.0 / 3.0, 0.5);
     for (i = 0; i < BLKSIZE; i++) {
       window[i] = sqrt_8_over_3 * 0.5 * (1 - cos (2.0 * PI * i / (BLKSIZE))) / BLKSIZE;
     }
@@@@ -340,6 +340,7 @@@@ void psycho_3_threshold(FLOAT *LTg, int 
   int i,j,k;
   FLOAT LTtm[SUBSIZE];
   FLOAT LTnm[SUBSIZE];
+  FLOAT av,dz,vf;
 
   for (i=0;i<SUBSIZE;i++) {
     LTtm[i] = DBMIN;
@@@@ -353,10 +354,9 @@@@ void psycho_3_threshold(FLOAT *LTg, int 
     if (tonelabel[k]==TONE) {
       for (j=0;j<SUBSIZE;j++) {
 	/* figure out how it masks the levels around it */  
-	FLOAT dz = bark[freq_subset[j]] - bark[k];     
+	dz = bark[freq_subset[j]] - bark[k];     
 	if (dz >= -3.0 && dz < 8.0) {
-	  FLOAT vf;
-	  FLOAT av = -1.525 - 0.275 * bark[k] - 4.5 + Xtm[k];
+	  av = -1.525 - 0.275 * bark[k] - 4.5 + Xtm[k];
 	  /* masking function for lower & upper slopes */
 	  if (dz < -1)
 	    vf = 17 * (dz + 1) - (0.4 * Xtm[k] + 6);
@@@@ -434,6 +434,7 @@@@ void psycho_3_smr(double *LTmin, double 
 void psycho_3_init(options *glopts) {
   int i;
   int cbase = 0; /* current base index for the bark range calculation */
+  FLOAT sfreq = (FLOAT) s_freq[header->version][header->sampling_frequency] * 1000;
 
   fft_buf = (D1408 *) mem_alloc ((long) sizeof (D1408) * 2, "fft_buf");
   
@@@@ -441,7 +442,6 @@@@ void psycho_3_init(options *glopts) {
   psycho_3_init_add_db();
   
   /* For each spectral line calculate the bark and the ATH (in dB) */
-  FLOAT sfreq = (FLOAT) s_freq[header->version][header->sampling_frequency] * 1000;
   for (i=1;i<HBLKSIZE; i++) {
     FLOAT freq = i * sfreq/BLKSIZE;
     bark[i] = freq2bark(freq);
@


1.1.1.1
log
@Initial import of toolame 0.2l

tooLAME is an optimized Mpeg Audio 1/2 Layer 2 encoder based heavily
on:

- the ISO dist10 code
- improvement to algorithms as part of the LAME project
  (www.sulaco.org/mp3)

WWW: http://mikecheng.d2.net.au/

from Jacob Meuser <jakemsr at jakemsr.com>
@
text
@@
