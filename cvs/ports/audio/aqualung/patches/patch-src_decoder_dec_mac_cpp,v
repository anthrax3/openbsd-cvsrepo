head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.4
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.0.4
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2016.11.03.13.07.06;	author jeremy;	state Exp;
branches;
next	1.1;
commitid	wyIlsn348aNRP5sK;

1.1
date	2015.09.05.14.59.34;	author jeremy;	state Exp;
branches;
next	;
commitid	vYkkgD8QLUUPJeI5;


desc
@@


1.2
log
@Simplify and fix patch to mac decoder by just denamespacing
GetUTF16FromANSI, fixes SIGSEGV at runtime.

OK naddy@@
@
text
@$OpenBSD: patch-src_decoder_dec_mac_cpp,v 1.1 2015/09/05 14:59:34 jeremy Exp $

GetUTF16FromANSI is no longer under the CAPECharacterHelper namespace
in the current version of libmac.

--- src/decoder/dec_mac.cpp.orig	Thu Nov  3 13:39:04 2016
+++ src/decoder/dec_mac.cpp	Thu Nov  3 13:39:08 2016
@@@@ -174,7 +174,7 @@@@ mac_decoder_open(decoder_t * dec, char * filename) {
 
 
 	int ret = 0;
-        wchar_t * pUTF16 = CAPECharacterHelper::GetUTF16FromANSI(filename);
+        wchar_t * pUTF16 = GetUTF16FromANSI(filename);
         pdecompress = CreateIAPEDecompress(pUTF16, &ret);
         free(pUTF16);
 
@


1.1
log
@Update to aqualung 1.0

Add patch to the mac decoder as upstream support depends on a newer
version of audio/mac than we have in-tree.
@
text
@d1 1
a1 1
$OpenBSD$
d3 2
a4 3
Use glib character conversion function instead of MAC library function,
since the function used isn't supported in the mac 3.99 version we
have in ports.  Taken from a patch in Aqualung Mantis bug #191.
d6 3
a8 11
--- src/decoder/dec_mac.cpp.orig	Sun Apr 19 05:49:49 2015
+++ src/decoder/dec_mac.cpp	Sun Aug 30 13:19:54 2015
@@@@ -24,6 +24,7 @@@@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <glib.h>
 
 
 /* expand this to nothing so there's no error when including MACLib.h */
@@@@ -174,9 +175,9 @@@@ mac_decoder_open(decoder_t * dec, char * filename) {
d13 3
a15 5
-        pdecompress = CreateIAPEDecompress(pUTF16, &ret);
-        free(pUTF16);
+        gunichar2 * pUTF16 = g_utf8_to_utf16(filename, -1, NULL, NULL, NULL);
+        pdecompress = CreateIAPEDecompress((wchar_t *)pUTF16, &ret);
+        g_free(pUTF16);
a16 2
         if (!pdecompress || ret != ERROR_SUCCESS) {
                 return DECODER_OPEN_BADLIB;
@

