head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.26
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.24
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.22
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.18
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.20
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.16
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.14
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.12
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.10
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.8
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.6
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.4
	OPENBSD_5_0:1.1.0.2
	OPENBSD_5_0_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.03.02.08.35.14;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Avoid using use Class::XSAccessor::Array private API to unbreak this port,
taken from newer version. jim@@ ok
@
text
@$OpenBSD$

don't rely on Class::XSAccessor internals; taken from newer squeezeboxserver

--- Slim/Utils/Accessor.pm.orig	Mon Jan 24 19:59:11 2011
+++ Slim/Utils/Accessor.pm	Mon Jan 24 19:59:17 2011
@@@@ -37,9 +37,13 @@@@ BEGIN {
 		$hasXS = 0;
 		eval {
 			require Class::XSAccessor::Array;
-			die if $Class::XSAccessor::Array::VERSION lt '0.05';
+			die if $Class::XSAccessor::Array::VERSION lt '1.05';
 			$hasXS = 1;
 		};
+		
+		if ( $@@ ) {
+			warn "NOTE: Class::XSAccessor 1.05+ not found, install it for better performance\n";
+		}
 	
 		return $hasXS;
 	}
@@@@ -94,8 +98,9 @@@@ sub mk_accessor {
 		if ($type eq 'rw') {
 			
 			if ( hasXS() ) {
-				Class::XSAccessor::Array::_generate_accessor(
-					$class,	$field,	$n, 0, 0, 'accessor',
+				Class::XSAccessor::Array->import(
+					class     => $class,
+					accessors => { $field, $n }
 				);
 			}
 			else {
@@@@ -108,8 +113,9 @@@@ sub mk_accessor {
 		} elsif ($type eq 'ro') {
 			
 			if ( hasXS() ) {
-				Class::XSAccessor::Array::_generate_accessor(
-					$class,	$field,	$n, 0, 0, 'getter',
+				Class::XSAccessor::Array->import(
+					class   => $class,
+					getters => { $field, $n }
 				);
 			}
 			else {
@@@@ -152,6 +158,15 @@@@ sub mk_accessor {
 				return $_[0]->[$n]->{ $_[1] } = $_[2] if @@_ == 3;
 			};
 
+		} elsif ($type eq 'rw_bt') {
+			
+			$accessor = sub {
+				return $_[0]->[$n]                    if @@_ == 1;
+				if (@@_ == 2) {
+					logBacktrace("$class ->$field set to $_[1]");
+					return $_[0]->[$n] = $_[1];
+				}
+			};
 		}
 
 		if ($accessor) {
@
