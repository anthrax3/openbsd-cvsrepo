head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.22
	OPENBSD_6_2_BASE:1.1
	OPENBSD_6_1:1.1.0.20
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.18
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.14
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.16
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.12
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.10
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.8
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.6
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.4
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.2
	OPENBSD_5_2_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.05.15.16.17.27;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Some bug fixes from upstream:
- Fix random crashes caused by invalid 32-bit shifts on 32-bit values.
- Mark tables as static constants.
- Change output normalisation factor from 3/2 to sqrt(2).
- Sanity check for subframes and prim_channels to avoid crashes with invalid streams.
- Avoid crashing with invalid frames setting a bitalloc_huffman component to 7.

While here, tweak COMMENT and remove USE_GROFF.

from Brad
@
text
@$OpenBSD$

Fix random crashes caused by invalid 32-bit shifts on 32-bit values.

--- libdca/bitstream.c.orig	Mon May 14 22:43:16 2012
+++ libdca/bitstream.c	Mon May 14 22:43:23 2012
@@@@ -25,6 +25,7 @@@@
 
 #include "config.h"
 
+#include <stdio.h>
 #include <inttypes.h>
 
 #include "dca.h"
@@@@ -46,7 +47,7 @@@@ void dca_bitstream_init (dca_state_t * state, uint8_t 
     state->bigendian_mode = bigendian_mode;
     bitstream_get (state, align * 8);
 }
-#include<stdio.h>
+
 static inline void bitstream_fill_current (dca_state_t * state)
 {
     uint32_t tmp;
@@@@ -76,12 +77,14 @@@@ static inline void bitstream_fill_current (dca_state_t
 
 uint32_t dca_bitstream_get_bh (dca_state_t * state, uint32_t num_bits)
 {
-    uint32_t result;
+    uint32_t result = 0;
 
-    num_bits -= state->bits_left;
-
-    result = ((state->current_word << (32 - state->bits_left)) >>
-	      (32 - state->bits_left));
+    if (state->bits_left)
+    {
+	num_bits -= state->bits_left;
+        result = ((state->current_word << (32 - state->bits_left)) >>
+		  (32 - state->bits_left));
+    }
 
     if ( !state->word_mode && num_bits > 28 ) {
         bitstream_fill_current (state);
@
