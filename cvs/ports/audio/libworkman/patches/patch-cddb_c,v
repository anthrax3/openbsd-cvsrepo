head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.68
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.66
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.64
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.60
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.62
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.58
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.56
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.54
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.52
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.50
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.48
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.46
	OPENBSD_5_0:1.1.1.1.0.44
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.42
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.40
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.38
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.36
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.34
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.32
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.30
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.28
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.26
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.24
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.22
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.20
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.18
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.16
	OPENBSD_3_6_BASE:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.14
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.12
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.10
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.8
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.6
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.4
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	wilfried_20010206:1.1.1.1
	wilfried:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2001.02.06.11.50.22;	author wilfried;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.02.06.11.50.22;	author wilfried;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@$OpenBSD: $
--- cddb.c.orig	Thu May 27 08:37:10 1999
+++ cddb.c	Mon Feb  5 08:54:06 2001
@@@@ -73,10 +73,10 @@@@ void
 cddb_cur2struct(void)
 {
 	cddb.protocol = cur_cddb_protocol;
-	strcpy(cddb.cddb_server,  cur_cddb_server);
-	strcpy(cddb.mail_adress,  cur_cddb_mail_adress);
-	strcpy(cddb.path_to_cgi,  cur_cddb_path_to_cgi);
-	strcpy(cddb.proxy_server, cur_cddb_proxy_server);
+	strlcpy(cddb.cddb_server,  cur_cddb_server, sizeof(cddb.cddb_server));
+	strlcpy(cddb.mail_adress,  cur_cddb_mail_adress, sizeof(cddb.mail_adress));
+	strlcpy(cddb.path_to_cgi,  cur_cddb_path_to_cgi, sizeof(cddb.path_to_cgi));
+	strlcpy(cddb.proxy_server, cur_cddb_proxy_server, sizeof(cddb.proxy_server));
 } /* cddb_cur2struct() */
 
 /*
@@@@ -104,7 +104,7 @@@@ cddb_sum(int n)
 	int	ret = 0;
 
 	/* For backward compatibility this algorithm must not change */
-	sprintf(buf, "%lu", (unsigned long)n);
+	snprintf(buf, sizeof(buf), "%lu", (unsigned long)n);
 	for (p = buf; *p != '\0'; p++)
 	  ret += (*p - '0');
 
@@@@ -175,10 +175,10 @@@@ string_makehello(char *line,char delim)
 {
 	char mail[84],*host;
 	
-	strcpy(mail,cddb.mail_adress);
+	strlcpy(mail,cddb.mail_adress,sizeof(mail));
 	host=string_split(mail,'@@');
 	
-	sprintf(line,"%shello%c%s%c%s%c%s%c%s",
+	snprintf(line, sizeof(line), "%shello%c%s%c%s%c%s%c%s",
 		delim == ' ' ? "cddb " : "&",
 		delim == ' ' ? ' ' : '=',
 		mail,delim,
@@@@ -226,7 +226,7 @@@@ connect_open(void)
 			printf("unknown host: %s\n", host);
 			return (-1);
 		}
-		strcpy(namebuf, host);
+		strlcpy(namebuf, host, sizeof(namebuf));
 		def.h_name = namebuf;
 		def.h_addr_list = alist, def.h_addr = (char *)&defaddr;
 		def.h_length = sizeof (struct in_addr);
@@@@ -317,14 +317,14 @@@@ connect_read_entry(void)
 					t2 = t;
 				if(*t2 == ' ')
 				  t2++;
-				strcpy(cd->cdname,t2);
+				strlcpy(cd->cdname,t2,sizeof(cd->cdname));
 				
 				for(t2=t;*t2;t2++)
 				{
 					if((*t2 == ' ') && (*(t2+1) == 0))
 					  *t2=0;
 				}
-				strcpy(cd->artist,t);
+				strlcpy(cd->artist,t,sizeof(cd->artist));
 			}
 			
 			if('T' == type)
@@@@ -359,7 +359,7 @@@@ void
 cddbp_read(char *category, unsigned int id)
 {
 	char tempbuf[84];
-	sprintf(tempbuf, "cddb read %s %08x", category, id);
+	snprintf(tempbuf, sizeof(tempbuf), "cddb read %s %08x", category, id);
 	cddbp_send(tempbuf);
 } /* cddbp_read() */
 
@@@@ -400,7 +400,7 @@@@ void
 http_read(char *category, unsigned int id)
 {
 	char tempbuf[84];
-	sprintf(tempbuf, "cddb+read+%s+%08x", category, id);
+	snprintf(tempbuf, sizeof(tempbuf), "cddb+read+%s+%08x", category, id);
 	http_send(tempbuf);
 } /* http_read() */
 
@@@@ -411,7 +411,7 @@@@ void
 cddb_request(void)
 {
 	int i;
-	char tempbuf[2000];
+	char tempbuf[2000], tmp2buf[12];
 	extern int cur_ntracks;
 	
 	int status;
@@@@ -447,12 +447,14 @@@@ cddb_request(void)
 		printf("[%s]\n",tempbuf);
 		
 		printf("query\n");
-		sprintf(tempbuf, "cddb query %08x %d",thiscd.cddbid,thiscd.ntracks);
+		snprintf(tempbuf, sizeof(tempbuf), "cddb query %08x %d",thiscd.cddbid,thiscd.ntracks);
 		for (i = 0; i < cur_ntracks; i++)
-		  if (thiscd.trk[i].section < 2)
-		    sprintf(tempbuf + strlen(tempbuf), " %d",
-			    thiscd.trk[i].start);
-		sprintf(tempbuf + strlen(tempbuf), " %d\n", thiscd.length);
+		  if (thiscd.trk[i].section < 2) {
+		    snprintf(tmp2buf, sizeof(tmp2buf), " %d", thiscd.trk[i].start);
+		    strlcat(tempbuf, tmp2buf, sizeof(tempbuf));
+		  }
+		snprintf(tmp2buf, sizeof(tmp2buf), " %d\n", thiscd.length);
+		strlcat(tempbuf, tmp2buf, sizeof(tempbuf));
 		printf(">%s<\n",tempbuf);
 		cddbp_send(tempbuf);
 		connect_getline(tempbuf);
@@@@ -491,12 +493,14 @@@@ cddb_request(void)
 		printf("USING HTTP%s\n",
 		       (cddb.protocol == 3) ? " WITH PROXY" : "");
 		printf("query\n");
-		sprintf(tempbuf, "cddb+query+%08x+%d",thiscd.cddbid,thiscd.ntracks);
+		snprintf(tempbuf, sizeof(tempbuf), "cddb+query+%08x+%d",thiscd.cddbid,thiscd.ntracks);
 		for (i = 0; i < cur_ntracks; i++)
-		  if (thiscd.trk[i].section < 2)
-		    sprintf(tempbuf + strlen(tempbuf), "+%d",
-			    thiscd.trk[i].start);
-		sprintf(tempbuf + strlen(tempbuf), "+%d", thiscd.length);
+		  if (thiscd.trk[i].section < 2) {
+		    snprintf(tmp2buf, sizeof(tmp2buf), "+%d", thiscd.trk[i].start);
+		    strlcat(tempbuf, tmp2buf, sizeof(tempbuf));
+		}
+		snprintf(tmp2buf, sizeof(tmp2buf), "+%d", thiscd.length);
+		strlcat(tempbuf, tmp2buf, sizeof(tempbuf));
 		printf(">%s<\n",tempbuf);
 		connect_open();
 		http_send(tempbuf);
@


1.1.1.1
log
@Import of libworkman-1.4

multi-platform CD-Player library for creating various
CD-Player-UIs.

ok naddy@@
@
text
@@
