head	1.7;
access;
symbols
	OPENBSD_5_0:1.6.0.6
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.4
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.2
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.2
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.4.0.6
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.4
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.2
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	sturm_2004-Jul-09:1.1.1.1
	sturm:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2011.08.29.18.23.20;	author jasper;	state dead;
branches;
next	1.6;

1.6
date	2010.05.26.22.31.23;	author jakemsr;	state Exp;
branches;
next	1.5;

1.5
date	2009.04.29.21.22.14;	author kili;	state Exp;
branches;
next	1.4;

1.4
date	2008.01.26.02.02.50;	author jakemsr;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.03.04.55.56;	author jakemsr;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.04.21.44.34;	author sturm;	state Exp;
branches;
next	1.1;

1.1
date	2004.07.09.07.30.17;	author sturm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.07.09.07.30.17;	author sturm;	state Exp;
branches;
next	;


desc
@@


1.7
log
@forgot to zap these in the previous update
@
text
@$OpenBSD: patch-utils_lqtplay_c,v 1.6 2010/05/26 22:31:23 jakemsr Exp $
--- utils/lqtplay.c.orig	Thu Jan 14 10:41:17 2010
+++ utils/lqtplay.c	Wed May 26 15:23:48 2010
@@@@ -41,6 +41,8 @@@@
 
 #include "common.h"
 
+#define HAVE_SNDIO
+
 #include <X11/Xlib.h>
 #include <X11/Intrinsic.h>
 #include <X11/StringDefs.h>
@@@@ -70,6 +72,10 @@@@
 #ifdef HAVE_ALSA
 #include <alsa/asoundlib.h>
 #endif
+#ifdef HAVE_SNDIO
+#include <poll.h>
+#include <sndio.h>
+#endif
 
 #include <unistd.h>
 #include <stdlib.h>
@@@@ -789,6 +795,88 @@@@ return 0;
 
 
 /* ------------------------------------------------------------------------ */
+/* sndio code                                                                 */
+
+#ifdef HAVE_SNDIO
+
+static struct sio_hdl *hdl;
+static struct sio_par par;
+
+static int use_sndio = 1;
+
+static int oss_sr,oss_hr;
+
+#else
+
+/* Disable sndio */
+static int use_sndio = 0;
+
+#endif /* HAVE_SNDIO */
+
+static int
+sndio_setformat(int chan, int rate)
+{
+#ifdef	HAVE_SNDIO
+    sio_initpar(&par);
+    par.bits = 16;
+    par.sig = 1;
+    par.rate = rate;
+    par.pchan = chan;
+    /* yes, lqtplay wants really small blocks */
+    par.round = rate / 100;
+    par.appbufsz = par.round * 25;
+
+    if (!sio_setpar(hdl, &par) || !sio_getpar(hdl, &par)) {
+	fprintf(stderr,_("ERROR: can't set sound format\n"));
+	exit(1);
+    }
+
+    if (par.pchan != chan || par.bits != 16 || par.sig != 1 ||
+      par.le != SIO_LE_NATIVE) {
+	fprintf(stderr,_("ERROR: can't set requested sound format\n"));
+	exit(1);
+    }
+
+    if (par.rate != rate) {
+        oss_sr = rate;
+	oss_hr = par.rate;
+	fprintf(stderr,_("WARNING: sample rate mismatch (need %d, got %d)\n"),
+		rate, par.rate);
+    }
+
+    return 0;
+#else
+    return 1;
+#endif
+}
+
+static int sndio_init(char *dev, int channels, int rate)
+{
+#ifdef	HAVE_SNDIO
+
+    /* this code is absolutely horrible.  lqtplay expects to be able
+       to write at least every 2 ms.  do not follow this example. */
+
+    hdl = sio_open(NULL, SIO_PLAY, 1);
+    if (NULL == hdl) {
+	fprintf(stderr,_("ERROR: can't open sndio\n"));
+	return -1;
+    }
+    sndio_setformat(channels,rate);
+
+    if (!sio_start(hdl)) {
+        fprintf(stderr,_("ERROR: can't start sndio\n"));
+        return -1;
+    }
+    return 0;
+#else
+    return 1;
+#endif
+}
+
+
+
+/* ------------------------------------------------------------------------ */
 /* oss code                                                                 */
 
 #ifndef AFMT_S16_NE
@@@@ -972,7 +1060,11 @@@@ static void qt_init(FILE *fp, char *filename)
 	qt_hasaudio = 1;
 	qt_channels = quicktime_track_channels(qt,0);
         qt_sample_rate = quicktime_sample_rate(qt,0);
-  if (use_alsa == 1) {
+  if (use_sndio == 1) {
+    if (-1 == sndio_init(adev_name, qt_channels, 
+         qt_sample_rate)) {
+           qt_hasaudio = 0;}
+  } else if (use_alsa == 1) {
     if (-1 == alsa_init(adev_name, qt_channels, 
          qt_sample_rate)) {
            qt_hasaudio = 0;}
@@@@ -1422,6 +1514,48 @@@@ static int qt_alsa_audio_write()
   return 0;
 }
 
+static int qt_sndio_audio_write(void)
+{
+#ifdef HAVE_SNDIO
+    struct pollfd pfd;
+    int rc, n, revents;
+
+    if(!qt_audio_samples_in_buffer)
+      decode_audio(AUDIO_BLOCK_SIZE);
+
+    /* this code is absolutely horrible.  do not follow this example. */
+
+    n = sio_pollfd(hdl, &pfd, POLLOUT);
+    rc = poll(&pfd, n, 10000);
+    if (rc <= 0)
+        goto fail;
+    revents = sio_revents(hdl, &pfd);
+    if (!(revents & POLLOUT))
+        goto fail;
+    rc = sio_write(hdl,qt_audio_ptr,qt_audio_samples_in_buffer * qt_channels * sizeof(*qt_audio));
+    switch (rc) {
+    case 0:
+        goto fail;
+	break;
+    default:
+        qt_audio_samples_in_buffer -= rc / (qt_channels * sizeof(*qt_audio));
+        qt_audio_ptr += rc / sizeof(*qt_audio);
+        break;
+    }
+
+    if (qt_audio_eof && 0 == qt_audio_samples_in_buffer) {
+       return -1;
+    }
+#endif
+    return 0;
+fail:
+    fprintf(stderr,_("write sndio: Huh? no data to write/no data written?\n"));
+    sio_close(hdl);
+    hdl = NULL;
+    qt_hasaudio = 0;
+    return 0;
+}
+
 static int qt_oss_audio_write(void)
 {
     int rc;
@@@@ -1803,7 +1937,7 @@@@ int main(int argc, char *argv[])
 		FD_SET(ConnectionNumber(dpy),&rd);
 		max = ConnectionNumber(dpy);
 		if (qt_hasaudio) {
-		    if (use_alsa == 0) {
+		    if (use_alsa == 0 && use_sndio == 0) {
 			FD_SET(oss_fd,&wr);
 			if (oss_fd > max)
 			    max = oss_fd;
@@@@ -1841,7 +1975,10 @@@@ int main(int argc, char *argv[])
 		}
 		rc = select(max+1,&rd,&wr,NULL,&wait);
 		if (qt_hasaudio) {
-		    if (use_alsa == 1) {
+		    if (use_sndio == 1) {
+			if (0 != qt_sndio_audio_write()) qt_hasaudio = 0;
+		    }
+		    else if (use_alsa == 1) {
 			if (0 != qt_alsa_audio_write()) qt_hasaudio = 0;
 		    }
 		    else if (FD_ISSET(oss_fd,&wr)) { 
@


1.6
log
@update to libquicktime-1.0.5
* newer ffmpeg
* use sndio in lqtplay
@
text
@d1 1
a1 1
$OpenBSD: patch-utils_lqtplay_c,v 1.5 2009/04/29 21:22:14 kili Exp $
@


1.5
log
@Unbreak after the x264 update (problem first noticed by naddy@@, no
cookies for me).

Dependency improvements (x264 and doxygen) and whitespace cleanups
from Brad.

DOXYGEN_ENCODE_PATH_STRIP=${WRKSRC} trick pointed out by simon@@
(tested with two builds using different WRKOBJDIRs).


[kili@@petunia:libquicktime]$ head -30 libquicktime.diff
Unbreak after the x264 update (problem first noticed by naddy@@, no
cookies for me).

Dependency improvements (x264 and doxygen) and whitespace cleanups
from Brad.

DOXYGEN_ENCODE_PATH_STRIP=${WRKSRC} trick pointed out by simon@@
(tested with two builds using different WRKOBJDIRs).

ok jasper
@
text
@d1 124
a124 4
$OpenBSD: patch-utils_lqtplay_c,v 1.4 2008/01/26 02:02:50 jakemsr Exp $
--- utils/lqtplay.c.orig	Sat Aug  2 20:40:00 2008
+++ utils/lqtplay.c	Thu Apr 16 21:55:32 2009
@@@@ -978,7 +978,7 @@@@ static void qt_init(FILE *fp, char *filename)
d126 70
a195 7
   }
   else {
-  	if (-1 == oss_init("/dev/dsp", qt_channels,
+  	if (-1 == oss_init("/dev/audio", qt_channels,
                            qt_sample_rate))
            qt_hasaudio = 0;
   }
@


1.4
log
@update to libquicktime-1.0.2

build gpl modules as well (AAC and H264)
@
text
@d1 4
a4 4
$OpenBSD: patch-utils_lqtplay_c,v 1.3 2006/02/03 04:55:56 jakemsr Exp $
--- utils/lqtplay.c.orig	Sat Nov 10 16:38:12 2007
+++ utils/lqtplay.c	Sat Jan 19 21:06:11 2008
@@@@ -937,7 +937,7 @@@@ static void qt_init(FILE *fp, char *filename)
@


1.3
log
@update to libquicktime-0.9.7

see $HOMEPAGE for changes

ok jolan@@
@
text
@d1 4
a4 4
$OpenBSD$
--- utils/lqtplay.c.orig	Mon May 23 06:33:55 2005
+++ utils/lqtplay.c	Sun Jul 31 14:26:54 2005
@@@@ -912,7 +912,7 @@@@ static void qt_init(FILE *fp, char *file
@


1.2
log
@update to libquicktime 0.9.3
add WANTLIB
bump library major version number

from maintainer Jacob Meuser <jakemsr at jakemsr.com>
@
text
@d2 11
a12 23
--- utils/lqtplay.c.orig	Tue Jan 20 20:32:30 2004
+++ utils/lqtplay.c	Mon Aug  9 02:56:37 2004
@@@@ -19,8 +19,10 @@@@
 #include <sys/ipc.h>
 #include <sys/shm.h>
 #include <sys/ioctl.h>
-#ifdef	HAVE_SOUNDCARD_H
+#ifdef	HAVE_SYS_SOUNDCARD_H
 #include <sys/soundcard.h>
+#else
+#include <soundcard.h>
 #endif
 
 #include <X11/Xlib.h>
@@@@ -656,7 +658,7 @@@@ static void qt_init(FILE *fp, char *file
 	qt_hasaudio = 1;
 	if (quicktime_track_channels(qt,0) > 1)
 	    qt_stereo = 1;
-	if (-1 == oss_init("/dev/dsp", qt_stereo ? 2 : 1,
+	if (-1 == oss_init("/dev/audio", qt_stereo ? 2 : 1,
 			   quicktime_sample_rate(qt,0)))
 	    qt_hasaudio = 0;
     }
@


1.1
log
@Initial revision
@
text
@d2 3
a4 3
--- utils/lqtplay.c.orig	2002-06-25 04:41:49.000000000 -0700
+++ utils/lqtplay.c	2004-06-04 20:18:10.000000000 -0700
@@@@ -17,7 +17,11 @@@@
d8 4
a11 1
+#if defined(__OpenBSD__)
d13 1
a13 3
+#else
 #include <sys/soundcard.h>
+#endif
d16 1
a16 2
 #include <X11/Intrinsic.h>
@@@@ -644,7 +648,7 @@@@ static void qt_init(FILE *fp, char *file
@


1.1.1.1
log
@Initial import of libquicktime 0.9.2

This is libquicktime, a library for reading and writing quicktime
files. It is based on, and compatible with, the quicktime4linux
library.  This package also includes a program to play quicktime
movies, and some other programs to work with quicktime files.

WWW: http://libquicktime.sourceforge.net/

from Jacob Meuser <jakemsr at jakemsr.com>
@
text
@@
