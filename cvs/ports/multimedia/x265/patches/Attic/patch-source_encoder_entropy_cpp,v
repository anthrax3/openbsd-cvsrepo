head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2015.02.17.01.28.01;	author brad;	state dead;
branches;
next	1.1;
commitid	RhoS12E7YKZiK2SX;

1.1
date	2014.12.08.08.25.05;	author brad;	state Exp;
branches;
next	;
commitid	mIrLklJyXjYVK6J1;


desc
@@


1.2
log
@Update to x265 1.5.

ok sthen@@
@
text
@$OpenBSD: patch-source_encoder_entropy_cpp,v 1.1 2014/12/08 08:25:05 brad Exp $

threading: use 32bit atomic integer operations exclusively

--- source/encoder/entropy.cpp.orig	Fri Oct 31 14:24:01 2014
+++ source/encoder/entropy.cpp	Sun Dec  7 00:05:35 2014
@@@@ -1116,7 +1116,7 @@@@ void Entropy::writeCoefRemainExGolomb(uint32_t codeNum
         if (codeNumber != 0)
         {
             unsigned long idx;
-            CLZ32(idx, codeNumber + 1);
+            CLZ(idx, codeNumber + 1);
             length = idx;
             codeNumber -= (1 << idx) - 1;
         }
@@@@ -2006,9 +2006,9 @@@@ void Entropy::encodeBin(uint32_t binValue, uint8_t &ct
     if ((binValue ^ mstate) & 1)
     {
         // NOTE: lps is non-zero and the maximum of idx is 8 because lps less than 256
-        //numBits   = g_renormTable[lps >> 3];
+        //numBits = g_renormTable[lps >> 3];
         unsigned long idx;
-        CLZ32(idx, lps);
+        CLZ(idx, lps);
         X265_CHECK(state != 63 || idx == 1, "state failure\n");
 
         numBits = 8 - idx;
@


1.1
log
@Two commits from upstream..

constants: remove init/destroyROM functions
threading: use 32bit atomic integer operations exclusively

Tested on amd64/i386/sparc64 now builds on powerpc.
@
text
@d1 1
a1 1
$OpenBSD$
@

