head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2015.11.09.06.44.09;	author ajacoutot;	state dead;
branches;
next	1.3;
commitid	wizMmVYftri7cVV0;

1.3
date	2015.10.01.15.13.36;	author ajacoutot;	state Exp;
branches;
next	1.2;
commitid	jRLTdddb6avm75zA;

1.2
date	2015.02.17.01.28.01;	author brad;	state dead;
branches;
next	1.1;
commitid	RhoS12E7YKZiK2SX;

1.1
date	2014.12.08.08.25.05;	author brad;	state Exp;
branches;
next	;
commitid	mIrLklJyXjYVK6J1;


desc
@@


1.4
log
@Update to x265-1.8.93.

from Brad (maintainer)
@
text
@$OpenBSD: patch-source_common_threading_h,v 1.3 2015/10/01 15:13:36 ajacoutot Exp $

threading: add a slow-path for platforms with no system atomics

--- source/common/threading.h.orig	Mon May 18 14:39:44 2015
+++ source/common/threading.h	Thu Oct  1 04:25:44 2015
@@@@ -42,7 +42,30 @@@@
 #include <sys/sysctl.h>
 #endif
 
-#ifdef __GNUC__               /* GCCs builtin atomics */
+#if NO_ATOMICS
+
+#include <sys/time.h>
+#include <unistd.h>
+
+namespace x265 {
+// x265 private namespace
+int no_atomic_or(int* ptr, int mask);
+int no_atomic_and(int* ptr, int mask);
+int no_atomic_inc(int* ptr);
+int no_atomic_dec(int* ptr);
+int no_atomic_add(int* ptr, int val);
+}
+
+#define CLZ(id, x)            id = (unsigned long)__builtin_clz(x) ^ 31
+#define CTZ(id, x)            id = (unsigned long)__builtin_ctz(x)
+#define ATOMIC_OR(ptr, mask)  no_atomic_or((int*)ptr, mask)
+#define ATOMIC_AND(ptr, mask) no_atomic_and((int*)ptr, mask)
+#define ATOMIC_INC(ptr)       no_atomic_inc((int*)ptr)
+#define ATOMIC_DEC(ptr)       no_atomic_dec((int*)ptr)
+#define ATOMIC_ADD(ptr, val)  no_atomic_add((int*)ptr, val)
+#define GIVE_UP_TIME()        usleep(0)
+
+#elif __GNUC__               /* GCCs builtin atomics */
 
 #include <sys/time.h>
 #include <unistd.h>
@


1.3
log
@Unbreak on all archs.

from Brad (maintainer)
@
text
@d1 1
a1 1
$OpenBSD$
@


1.2
log
@Update to x265 1.5.

ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-source_common_threading_h,v 1.1 2014/12/08 08:25:05 brad Exp $
d3 1
a3 1
threading: use 32bit atomic integer operations exclusively
d5 32
a36 3
--- source/common/threading.h.orig	Fri Oct 31 14:24:01 2014
+++ source/common/threading.h	Sun Dec  7 00:05:35 2014
@@@@ -49,11 +49,10 @@@@
a38 34
 
-#define CLZ32(id, x)                        id = (unsigned long)__builtin_clz(x) ^ 31
-#define CTZ64(id, x)                        id = (unsigned long)__builtin_ctzll(x)
-#define ATOMIC_OR(ptr, mask)                __sync_or_and_fetch(ptr, mask)
-#define ATOMIC_CAS(ptr, oldval, newval)     __sync_val_compare_and_swap(ptr, oldval, newval)
-#define ATOMIC_CAS32(ptr, oldval, newval)   __sync_val_compare_and_swap(ptr, oldval, newval)
+#define CLZ(id, x)                          id = (unsigned long)__builtin_clz(x) ^ 31
+#define CTZ(id, x)                          id = (unsigned long)__builtin_ctz(x)
+#define ATOMIC_OR(ptr, mask)                __sync_fetch_and_or(ptr, mask)
+#define ATOMIC_AND(ptr, mask)               __sync_fetch_and_and(ptr, mask)
 #define ATOMIC_INC(ptr)                     __sync_add_and_fetch((volatile int32_t*)ptr, 1)
 #define ATOMIC_DEC(ptr)                     __sync_add_and_fetch((volatile int32_t*)ptr, -1)
 #define GIVE_UP_TIME()                      usleep(0)
@@@@ -99,16 +98,12 @@@@ inline int _BitScanForward64(DWORD *id, uint64_t x64) 
 
 #endif // if !_WIN64
 
-#ifndef ATOMIC_OR
-#define ATOMIC_OR(ptr, mask)                InterlockedOr64((volatile LONG64*)ptr, mask)
-#endif
-
-#define CLZ32(id, x)                        _BitScanReverse(&id, x)
-#define CTZ64(id, x)                        _BitScanForward64(&id, x)
-#define ATOMIC_CAS(ptr, oldval, newval)     (uint64_t)_InterlockedCompareExchange64((volatile LONG64*)ptr, newval, oldval)
-#define ATOMIC_CAS32(ptr, oldval, newval)   (uint64_t)_InterlockedCompareExchange((volatile LONG*)ptr, newval, oldval)
+#define CLZ(id, x)                          _BitScanReverse(&id, x)
+#define CTZ(id, x)                          _BitScanForward(&id, x)
 #define ATOMIC_INC(ptr)                     InterlockedIncrement((volatile LONG*)ptr)
 #define ATOMIC_DEC(ptr)                     InterlockedDecrement((volatile LONG*)ptr)
+#define ATOMIC_OR(ptr, mask)                InterlockedOr((volatile LONG*)ptr, (LONG)mask)
+#define ATOMIC_AND(ptr, mask)               InterlockedAnd((volatile LONG*)ptr, (LONG)mask)
 #define GIVE_UP_TIME()                      Sleep(0)
 
 #endif // ifdef __GNUC__
@


1.1
log
@Two commits from upstream..

constants: remove init/destroyROM functions
threading: use 32bit atomic integer operations exclusively

Tested on amd64/i386/sparc64 now builds on powerpc.
@
text
@d1 1
a1 1
$OpenBSD$
@

