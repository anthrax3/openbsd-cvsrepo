head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.8
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.4.0.2
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.3.0.4
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	sthen_20121010:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2014.09.03.21.15.44;	author sthen;	state Exp;
branches;
next	1.4;
commitid	rmInN5G2W3MyWofZ;

1.4
date	2014.06.11.00.26.59;	author sthen;	state Exp;
branches;
next	1.3;
commitid	PrXBEjCHbpnebbI2;

1.3
date	2013.05.07.20.37.23;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.15.17.15.24;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.10.10.45.05;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.10.10.45.05;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@update to minidlna 1.1.4, from Mark Patruck
@
text
@$OpenBSD: patch-upnphttp_c,v 1.4 2014/06/11 00:26:59 sthen Exp $
--- upnphttp.c.orig	Tue Aug 26 23:09:22 2014
+++ upnphttp.c	Wed Sep  3 13:28:00 2014
@@@@ -1377,6 +1377,11 @@@@ SendResp_icon(struct upnphttp * h, char * icon)
 	start_dlna_header(&str, 200, "Interactive", mime);
 	strcatf(&str, "Content-Length: %d\r\n\r\n", size);
 
+	#ifndef MSG_MORE
+	/* linux uses this to combine multiple send() calls into a single packet */
+	#define MSG_MORE 0
+	#endif
+
 	if( send_data(h, str.data, str.off, MSG_MORE) == 0 )
 	{
 		if( h->req_command != EHead )
@


1.4
log
@update to minidlna 1.1.3
@
text
@d1 6
a6 6
$OpenBSD: patch-upnphttp_c,v 1.3 2013/05/07 20:37:23 sthen Exp $
--- upnphttp.c.orig	Thu Jun  5 23:14:30 2014
+++ upnphttp.c	Wed Jun 11 01:20:08 2014
@@@@ -1362,6 +1362,10 @@@@ SendResp_icon(struct upnphttp * h, char * icon)
 	                                       "Server: " MINIDLNA_SERVER_STRING "\r\n\r\n",
 	                                       mime, size, date);
d8 6
a13 5
+#ifndef MSG_MORE
+/* linux uses this to combine multiple send() calls into a single packet */
+#define MSG_MORE 0
+#endif
 	if( send_data(h, header, ret, MSG_MORE) == 0 )
@


1.3
log
@update to MiniDLNA 1.1.0, rolling in a bunch of patches which have been committed upstream
@
text
@d1 4
a4 4
$OpenBSD: patch-upnphttp_c,v 1.1.1.1 2012/10/10 10:45:05 sthen Exp $
--- upnphttp.c.orig	Mon Mar 18 05:37:46 2013
+++ upnphttp.c	Sat Mar 30 20:51:55 2013
@@@@ -1300,6 +1300,10 @@@@ SendResp_icon(struct upnphttp * h, char * icon)
d14 1
a14 1
  		if( h->req_command != EHead )
@


1.2
log
@sync with minidlna stable; fixes a few bugs and adds compat with ffmpeg 1.0
@
text
@d2 3
a4 29
--- upnphttp.c.orig	Sat Jun 30 01:31:43 2012
+++ upnphttp.c	Fri Mar 15 16:57:19 2013
@@@@ -58,7 +58,9 @@@@
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <errno.h>
+#if defined(__linux__)
 #include <sys/sendfile.h>
+#endif
 #include <arpa/inet.h>
 #include <sys/time.h>
 #include <sys/resource.h>
@@@@ -1316,6 +1318,7 @@@@ send_file(struct upnphttp * h, int sendfd, off_t offse
 
 	while( offset < end_offset )
 	{
+#if defined(__linux__)
 		if( try_sendfile )
 		{
 			send_size = ( ((end_offset - offset) < MAX_BUFFER_SIZE) ? (end_offset - offset + 1) : MAX_BUFFER_SIZE);
@@@@ -1335,6 +1338,7 @@@@ send_file(struct upnphttp * h, int sendfd, off_t offse
 				continue;
 			}
 		}
+#endif
 		/* Fall back to regular I/O */
 		if( !buf )
 			buf = malloc(MIN_BUFFER_SIZE);
@@@@ -1411,6 +1415,10 @@@@ SendResp_icon(struct upnphttp * h, char * icon)
a14 87
@@@@ -1424,12 +1432,11 @@@@ SendResp_albumArt(struct upnphttp * h, char * object)
 {
 	char header[512];
 	char *path;
-	char *dash;
 	char date[30];
 	time_t curtime = time(NULL);
 	off_t size;
-	int fd;
-	int ret;
+	long long id;
+	int fd, ret;
 
 	if( h->reqflags & (FLAG_XFERSTREAMING|FLAG_RANGE) )
 	{
@@@@ -1438,18 +1445,16 @@@@ SendResp_albumArt(struct upnphttp * h, char * object)
 		return;
 	}
 
-	dash = strchr(object, '-');
-	if( dash )
-		*dash = '\0';
+	id = strtoll(object, NULL, 10);
 
-	path = sql_get_text_field(db, "SELECT PATH from ALBUM_ART where ID = '%s'", object);
+	path = sql_get_text_field(db, "SELECT PATH from ALBUM_ART where ID = '%lld'", id);
 	if( !path )
 	{
 		DPRINTF(E_WARN, L_HTTP, "ALBUM_ART ID %s not found, responding ERROR 404\n", object);
 		Send404(h);
 		return;
 	}
-	DPRINTF(E_INFO, L_HTTP, "Serving album art ID: %s [%s]\n", object, path);
+	DPRINTF(E_INFO, L_HTTP, "Serving album art ID: %lld [%s]\n", id, path);
 
 	fd = open(path, O_RDONLY);
 	if( fd < 0 ) {
@@@@ -1492,17 +1497,19 @@@@ SendResp_caption(struct upnphttp * h, char * object)
 	char date[30];
 	time_t curtime = time(NULL);
 	off_t size;
+	long long id;
 	int fd, ret;
 
-	strip_ext(object);
-	path = sql_get_text_field(db, "SELECT PATH from CAPTIONS where ID = %s", object);
+	id = strtoll(object, NULL, 10);
+
+	path = sql_get_text_field(db, "SELECT PATH from CAPTIONS where ID = %lld", id);
 	if( !path )
 	{
 		DPRINTF(E_WARN, L_HTTP, "CAPTION ID %s not found, responding ERROR 404\n", object);
 		Send404(h);
 		return;
 	}
-	DPRINTF(E_INFO, L_HTTP, "Serving caption ID: %s [%s]\n", object, path);
+	DPRINTF(E_INFO, L_HTTP, "Serving caption ID: %lld [%s]\n", id, path);
 
 	fd = open(path, O_RDONLY);
 	if( fd < 0 ) {
@@@@ -1541,6 +1548,7 @@@@ SendResp_thumbnail(struct upnphttp * h, char * object)
 	char *path;
 	char date[30];
 	time_t curtime = time(NULL);
+	long long id;
 	int ret;
 	ExifData *ed;
 	ExifLoader *l;
@@@@ -1552,15 +1560,15 @@@@ SendResp_thumbnail(struct upnphttp * h, char * object)
 		return;
 	}
 
-	strip_ext(object);
-	path = sql_get_text_field(db, "SELECT PATH from DETAILS where ID = '%s'", object);
+	id = strtoll(object, NULL, 10);
+	path = sql_get_text_field(db, "SELECT PATH from DETAILS where ID = '%lld'", id);
 	if( !path )
 	{
 		DPRINTF(E_WARN, L_HTTP, "DETAIL ID %s not found, responding ERROR 404\n", object);
 		Send404(h);
 		return;
 	}
-	DPRINTF(E_INFO, L_HTTP, "Serving thumbnail for ObjectId: %s [%s]\n", object, path);
+	DPRINTF(E_INFO, L_HTTP, "Serving thumbnail for ObjectId: %lld [%s]\n", id, path);
 
 	if( access(path, F_OK) != 0 )
 	{
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$OpenBSD$
d3 1
a3 1
+++ upnphttp.c	Sat Sep 22 01:35:09 2012
d41 87
@


1.1.1.1
log
@import ports/multimedia/minidlna, ok/testing landry@@

MiniDLNA is lightweight server software written in C, capable of
serving media files to DLNA/UPnP-AV clients (televisions, tablets,
etc).
@
text
@@
