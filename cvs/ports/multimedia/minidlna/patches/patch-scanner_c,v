head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.2
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_3:1.1.1.1.0.2
	OPENBSD_5_3_BASE:1.1.1.1
	sthen_20121010:1.1.1.1
	sthen:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2015.10.13.10.34.00;	author sthen;	state Exp;
branches;
next	1.4;
commitid	YT5n6YS8po9Up6v3;

1.4
date	2015.09.11.09.51.12;	author sthen;	state Exp;
branches;
next	1.3;
commitid	VsU8l8YUUQw8T9Fs;

1.3
date	2013.05.07.20.37.23;	author sthen;	state dead;
branches;
next	1.2;

1.2
date	2013.03.15.17.15.24;	author sthen;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.10.10.45.05;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.10.10.10.45.05;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.5
log
@update the minidlna port to use a newer version of the 'rescan' patch
@
text
@$OpenBSD$

Support -r for incremental rescan
http://sourceforge.net/p/minidlna/patches/145/

--- scanner.c.orig	Thu Sep 10 20:24:09 2015
+++ scanner.c	Tue Oct 13 11:23:03 2015
@@@@ -46,6 +46,7 @@@@
 #include "albumart.h"
 #include "containers.h"
 #include "log.h"
+#include "inotify.h"
 
 #if SCANDIR_CONST
 typedef const struct dirent scan_filter;
@@@@ -836,7 +837,69 @@@@ _notify_stop(void)
 #endif
 }
 
+/* rescan functions added by shrimpkin@@sourceforge.net */
+static int
+cb_orphans(void *args, int argc, char **argv, char **azColName)
+{
+	struct stat file;
+	char *path = argv[0], *mime = argv[1];
+	
+	/* If we can't stat path, remove it */
+	if (stat(path, &file) != 0)
+	{
+		DPRINTF(E_DEBUG, L_SCANNER, "Removing %s [%s]!\n", path, (mime) ? "file" : "dir");
+		if (mime)
+		{
+			inotify_remove_file(path);
+		}
+		else
+		{
+			inotify_remove_directory(0, path);
+		}
+	}
+	return 0;
+}
+
 void
+start_rescan()
+{
+	struct media_dir_s *media_path;
+	char path[MAXPATHLEN], buf[MAXPATHLEN], *esc_name = NULL, *zErrMsg;
+	char *sql_files = "SELECT path, mime FROM details WHERE path NOT NULL AND mime IS NOT NULL;", *sql_dir = "SELECT path, mime FROM details WHERE path NOT NULL AND mime IS NULL;";
+	int ret;
+
+	DPRINTF(E_INFO, L_SCANNER, "Starting rescan\n");
+
+	/* Find and remove any dead directory links */
+	ret = sqlite3_exec(db, sql_dir, cb_orphans, NULL, &zErrMsg);
+	if (ret != SQLITE_OK)
+	{
+		DPRINTF(E_MAXDEBUG, L_SCANNER, "SQL error: %s\nBAD SQL: %s\n", zErrMsg, sql_dir);
+		sqlite3_free(zErrMsg);
+	}
+	
+	/* Find and remove any dead file links */
+	ret = sqlite3_exec(db, sql_files, cb_orphans, NULL, &zErrMsg);
+	if (ret != SQLITE_OK)
+	{
+		DPRINTF(E_MAXDEBUG, L_SCANNER, "SQL error: %s\nBAD SQL: %s\n", zErrMsg, sql_files);
+		sqlite3_free(zErrMsg);
+	}
+	
+	/* Rescan media_paths for new and/or modified files */
+	for (media_path = media_dirs; media_path != NULL; media_path = media_path->next)
+	{
+		strncpyt(path, media_path->path, sizeof(path));
+		strncpyt(buf, media_path->path, sizeof(buf));
+		esc_name = escape_tag(basename(buf), 1);
+		inotify_insert_directory(0, esc_name, path);
+		free(esc_name);
+	}
+	DPRINTF(E_INFO, L_SCANNER, "Rescan completed\n");
+}
+/* end rescan functions */
+
+void
 start_scanner()
 {
 	struct media_dir_s *media_path;
@@@@ -844,12 +907,17 @@@@ start_scanner()
 
 	if (setpriority(PRIO_PROCESS, 0, 15) == -1)
 		DPRINTF(E_WARN, L_INOTIFY,  "Failed to reduce scanner thread priority\n");
-	_notify_start();
 
 	setlocale(LC_COLLATE, "");
 
 	av_register_all();
 	av_log_set_level(AV_LOG_PANIC);
+	if( rescan_db )
+	{
+		start_rescan();
+		return;
+	}
+	_notify_start();
 	for( media_path = media_dirs; media_path != NULL; media_path = media_path->next )
 	{
 		int64_t id;
@


1.4
log
@Add the patchset from https://sourceforge.net/p/minidlna/patches/145/ to
support incremental rescans with the -r flag.
@
text
@d6 2
a7 2
--- scanner.c.orig	Thu Sep 10 21:24:09 2015
+++ scanner.c	Fri Sep 11 11:43:37 2015
d12 1
a12 1
+#include "rescan.h"
d16 3
a18 10
@@@@ -87,7 +88,7 @@@@ get_next_available_id(const char *table, const char *p
 
 int
 insert_container(const char *item, const char *rootParent, const char *refID, const char *class,
-                 const char *artist, const char *genre, const char *album_art, int64_t *objectID, int64_t *parentID)
+		 const char *artist, const char *genre, const char *album_art, int64_t *objectID, int64_t *parentID)
 {
 	char *result;
 	char *base;
@@@@ -850,44 +851,51 @@@@ start_scanner()
d20 9
a28 15
 	av_register_all();
 	av_log_set_level(AV_LOG_PANIC);
-	for( media_path = media_dirs; media_path != NULL; media_path = media_path->next )
+	if (rescan_db)
 	{
-		int64_t id;
-		char *bname, *parent = NULL;
-		char buf[8];
-		strncpyt(path, media_path->path, sizeof(path));
-		bname = basename(path);
-		/* If there are multiple media locations, add a level to the ContentDirectory */
-		if( !GETFLAG(MERGE_MEDIA_DIRS_MASK) && media_dirs->next )
+		rescan_scanner();
+	}
+	else
d30 2
a31 33
+		for( media_path = media_dirs; media_path != NULL; media_path = media_path->next )
 		{
-			int startID = get_next_available_id("OBJECTS", BROWSEDIR_ID);
-			id = insert_directory(bname, path, BROWSEDIR_ID, "", startID);
-			sprintf(buf, "$%X", startID);
-			parent = buf;
+			int64_t id;
+			char *bname, *parent = NULL;
+			char buf[8];
+			strncpyt(path, media_path->path, sizeof(path));
+			bname = basename(path);
+			/* If there are multiple media locations, add a level to the ContentDirectory */
+			if( !GETFLAG(MERGE_MEDIA_DIRS_MASK) && media_dirs->next )
+			{
+				int startID = get_next_available_id("OBJECTS", BROWSEDIR_ID);
+				id = insert_directory(bname, path, BROWSEDIR_ID, "", startID);
+				sprintf(buf, "$%X", startID);
+				parent = buf;
+			}
+			else
+				id = GetFolderMetadata(bname, media_path->path, NULL, NULL, 0);
+			/* Use TIMESTAMP to store the media type */
+			sql_exec(db, "UPDATE DETAILS set TIMESTAMP = %d where ID = %lld", media_path->types, (long long)id);
+			ScanDirectory(media_path->path, parent, media_path->types);
+			sql_exec(db, "INSERT into SETTINGS values (%Q, %Q)", "media_dir", media_path->path);
 		}
+		_notify_stop();
+		/* Create this index after scanning, so it doesn't slow down the scanning process.
+		 * This index is very useful for large libraries used with an XBox360 (or any
+		 * client that uses UPnPSearch on large containers). */
+		sql_exec(db, "create INDEX IDX_SEARCH_OPT ON OBJECTS(OBJECT_ID, CLASS, DETAIL_ID);");
+
+		if( GETFLAG(NO_PLAYLIST_MASK) )
d33 1
a33 1
+			DPRINTF(E_WARN, L_SCANNER, "Playlist creation disabled\n");
d35 1
a35 12
 		else
-			id = GetFolderMetadata(bname, media_path->path, NULL, NULL, 0);
-		/* Use TIMESTAMP to store the media type */
-		sql_exec(db, "UPDATE DETAILS set TIMESTAMP = %d where ID = %lld", media_path->types, (long long)id);
-		ScanDirectory(media_path->path, parent, media_path->types);
-		sql_exec(db, "INSERT into SETTINGS values (%Q, %Q)", "media_dir", media_path->path);
-	}
-	_notify_stop();
-	/* Create this index after scanning, so it doesn't slow down the scanning process.
-	 * This index is very useful for large libraries used with an XBox360 (or any
-	 * client that uses UPnPSearch on large containers). */
-	sql_exec(db, "create INDEX IDX_SEARCH_OPT ON OBJECTS(OBJECT_ID, CLASS, DETAIL_ID);");
d37 1
a37 1
+			fill_playlists();
d39 52
d92 13
a104 16
-	if( GETFLAG(NO_PLAYLIST_MASK) )
-	{
-		DPRINTF(E_WARN, L_SCANNER, "Playlist creation disabled\n");	  
+		DPRINTF(E_DEBUG, L_SCANNER, "Initial file scan completed\n");
+		//JM: Set up a db version number, so we know if we need to rebuild due to a new structure.
+		sql_exec(db, "pragma user_version = %d;", DB_VERSION);
 	}
-	else
-	{
-		fill_playlists();
-	}
-
-	DPRINTF(E_DEBUG, L_SCANNER, "Initial file scan completed\n");
-	//JM: Set up a db version number, so we know if we need to rebuild due to a new structure.
-	sql_exec(db, "pragma user_version = %d;", DB_VERSION);
 }
@


1.3
log
@update to MiniDLNA 1.1.0, rolling in a bunch of patches which have been committed upstream
@
text
@d1 12
a12 8
$OpenBSD: patch-scanner_c,v 1.2 2013/03/15 17:15:24 sthen Exp $
--- scanner.c.orig	Fri Jun 29 22:11:29 2012
+++ scanner.c	Fri Mar 15 16:53:37 2013
@@@@ -26,6 +26,7 @@@@
 #include <sys/stat.h>
 #include <sys/time.h>
 #include <sys/resource.h>
+#include <sys/syslimits.h>
d14 3
a16 1
 #include "config.h"
d18 13
a30 2
@@@@ -138,7 +139,7 @@@@ insert_containers(const char * name, const char *path,
 	if( strstr(class, "imageItem") )
d32 36
a67 7
 		char *date = NULL, *cam = NULL;
-		char date_taken[13], camera[64];
+		char date_taken[24], camera[64];
 		static struct virtual_item last_date;
 		static struct virtual_item last_cam;
 		static struct virtual_item last_camdate;
@@@@ -159,7 +160,7 @@@@ insert_containers(const char * name, const char *path,
d69 10
d80 31
a110 6
 		{
-			strcpy(date_taken, _("Unknown Date"));
+			snprintf(date_taken, sizeof(date_taken), "%s", _("Unknown Date"));
 		}
 		if( valid_cache && strcmp(last_date.name, date_taken) == 0 )
 		{
@


1.2
log
@sync with minidlna stable; fixes a few bugs and adds compat with ffmpeg 1.0
@
text
@d1 1
a1 1
$OpenBSD: patch-scanner_c,v 1.1.1.1 2012/10/10 10:45:05 sthen Exp $
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- scanner.c.orig	Sat Sep 22 01:45:51 2012
+++ scanner.c	Sat Sep 22 01:46:11 2012
d12 18
@


1.1.1.1
log
@import ports/multimedia/minidlna, ok/testing landry@@

MiniDLNA is lightweight server software written in C, capable of
serving media files to DLNA/UPnP-AV clients (televisions, tablets,
etc).
@
text
@@
