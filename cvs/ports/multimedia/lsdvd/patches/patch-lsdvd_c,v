head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.12
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.6
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.4
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.2
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.12
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.10
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.8
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.6
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.4
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.2
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	xsa_2004-Jun-21:1.1.1.1
	xsa:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2015.05.02.19.58.47;	author ajacoutot;	state Exp;
branches;
next	1.6;
commitid	04QlxUJpqUwF2hNS;

1.6
date	2012.05.03.08.14.59;	author ajacoutot;	state Exp;
branches;
next	1.5;

1.5
date	2012.05.03.06.51.24;	author ajacoutot;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.28.19.22.50;	author ckuethe;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.29.16.32.15;	author ajacoutot;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.19.17.42.36;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.21.21.26.24;	author xsa;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.06.21.21.26.24;	author xsa;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update to lsdvd-0.17.
@
text
@$OpenBSD: patch-lsdvd_c,v 1.6 2012/05/03 08:14:59 ajacoutot Exp $
--- lsdvd.c.orig	Sat Oct  4 07:09:14 2014
+++ lsdvd.c	Sat May  2 21:56:45 2015
@@@@ -21,6 +21,7 @@@@
 #include <unistd.h>
 #include <getopt.h>
 #include <dvdread/ifo_read.h>
+#include <dvdread/ifo_print.h>
 #include "lsdvd.h"
 #include "ocode.h"
 
@@@@ -122,6 +123,7 @@@@ static void converttime(playback_time_t *pt, dvd_time_
 
 /*
  *  The following method is based on code from vobcopy, by Robos, with thanks.
+ *  It fails opening a directory (like /home/movies/casablanca/VIDEO_TS/)
  */
 static int get_title_name(const char* dvd_device, char* title)
 {
@@@@ -133,20 +135,28 @@@@ static int get_title_name(const char* dvd_device, char
 		strcpy(title, "unknown");
 		return -1;
 	}
+	fprintf(stderr, "opening %s for title\n", dvd_device);
 
-	if ( fseek(filehandle, 32808, SEEK_SET )) {
+	if ( fseek(filehandle, 32768, SEEK_SET )) {
 		fclose(filehandle);
 		fprintf(stderr, "Couldn't seek in %s for title\n", dvd_device);
 		strcpy(title, "unknown");
 		return -1;
 	}
 
-	if ( 32 != (i = fread(title, 1, 32, filehandle)) ) {
+	{
+	#define DVD_SEC_SIZ 2048
+	char tempBuf[ DVD_SEC_SIZ ];
+
+	if ( DVD_SEC_SIZ != fread(tempBuf, 1, DVD_SEC_SIZ, filehandle) ) {
 		fclose(filehandle);
 		fprintf(stderr, "Couldn't read enough bytes for title.\n");
 		strcpy(title, "unknown");
 		return -1;
 	}
+	snprintf( title, 32, "%s", tempBuf + 40 );
+	i=32;
+	}
 
 	fclose (filehandle);
 
@@@@ -199,7 +209,7 @@@@ static void usage(void)
 	fprintf(stderr, "\n");
 }
 
-int opt_a=0, opt_c=0, opt_n=0, opt_p=0, opt_q=0, opt_s=0, opt_t=0, opt_v=0, opt_x=0, opt_d=0, opt_P=0;
+int opt_a=0, opt_c=0, opt_m=0, opt_n=0, opt_p=0, opt_q=0, opt_s=0, opt_t=0, opt_v=0, opt_x=0, opt_d=0, opt_P=0;
 char opt_O='h';
 
 static char output_option(char *arg)
@@@@ -238,7 +248,7 @@@@ int main(int argc, char *argv[])
 	pgc_t *pgc;
 	int i, j, k, c, titles, cell, vts_ttn, title_set_nr;
  	char lang_code[3];
-	char *dvd_device = "/dev/dvd";
+	char *dvd_device = "/dev/rcd0c";
 	int has_title = 0, ret = 0;
 	int max_length = 0, max_track = 0;
 	struct stat dvd_stat;
@@@@ -255,18 +265,20 @@@@ int main(int argc, char *argv[])
 		case 's':	opt_s = 1;		break;
 		case 'q':	opt_q = 1;		break;
 		case 'c':	opt_c = 1;		break;
+		case 'm':	opt_m = 1;		break;
 		case 'n':	opt_n = 1;		break;
 		case 'p':	opt_p = 1;		break;
 		case 'P':	opt_P = 1;		break;
 		case 't':	opt_t = atoi(optarg);	break;
 		case 'O':	opt_O = output_option(optarg);	break;
-		case 'v':	opt_v = 1;		break;
+		case 'v':	opt_v++;		break;
 		case 'x':	opt_x = 1;
 				opt_a = 1;
 				opt_c = 1;
 				opt_s = 1;
 				opt_P = 1;
 				opt_d = 1;
+				opt_m = 1;
 				opt_n = 1;
 				opt_v = 1;		break;
 		}
@@@@ -280,6 +292,9 @@@@ int main(int argc, char *argv[])
 		return 1;
 	}
 
+	/* On at least NetBSD this fails if called after DVDOpen */
+	has_title = get_title_name(dvd_device, title);
+
 	dvd = DVDOpen(dvd_device);
 	if( !dvd ) {
 		fprintf( stderr, "Can't open disc %s!\n", dvd_device);
@@@@ -290,6 +305,12 @@@@ int main(int argc, char *argv[])
 		fprintf( stderr, "Can't open main ifo!\n");
 		return 3;
 	}
+	if (opt_v > 2) {
+		printf("Title 0 IFO dump\n");
+		printf("================\n");
+		ifo_print(dvd, 0);
+		printf("\n");
+	}
 
 	ifo = (ifo_handle_t **)malloc((ifo_zero->vts_atrt->nr_of_vtss + 1) * sizeof(ifo_handle_t *));
 
@@@@ -299,6 +320,12 @@@@ int main(int argc, char *argv[])
 			fprintf( stderr, "Can't open ifo %d!\n", i);
 			return 4;
 		}
+		if (opt_v > 2) {
+			printf("Title %2d IFO dump\n", i);
+			printf("=================\n");
+			ifo_print(dvd, i);
+			printf("\n");
+		}
 	}
 
 	titles = ifo_zero->tt_srpt->nr_of_srpts;
@@@@ -308,8 +335,6 @@@@ int main(int argc, char *argv[])
 		return 5;
 	}
 
-	has_title = get_title_name(dvd_device, title);
-
 	vmgi_mat = ifo_zero->vmgi_mat;
 
 	struct dvd_info dvd_info;
@@@@ -404,6 +429,11 @@@@ int main(int argc, char *argv[])
 					dvd_info.titles[j].angle_count = ifo_zero->tt_srpt->title[j].nr_of_angles;
 				} else {
 					dvd_info.titles[j].angle_count = 0;
+				}
+
+				// MENU STRUCTURE
+				if (opt_m) {
+					// void ifo_print(dvd_reader_t *, int);
 				}
 
 				/* AUDIO */
@


1.6
log
@Bring in some fixes from NetBSD to help with retrieving the DVD title.

from Brad
@
text
@d1 6
a6 6
$OpenBSD: patch-lsdvd_c,v 1.5 2012/05/03 06:51:24 ajacoutot Exp $
--- lsdvd.c.orig	Thu Mar  2 08:48:11 2006
+++ lsdvd.c	Thu May  3 03:29:12 2012
@@@@ -14,6 +14,7 @@@@
  *			  output info structures in form of a Perl module, by Henk Vergonet.
  */
d9 4
a12 4
 #include <string.h>
 #include <sys/stat.h>
 #include <stdio.h>
@@@@ -119,6 +120,7 @@@@ void converttime(playback_time_t *pt, dvd_time_t *dt)
d18 1
a18 1
 int get_title_name(const char* dvd_device, char* title)
d20 1
a20 1
@@@@ -130,20 +132,28 @@@@ int get_title_name(const char* dvd_device, char* title
d51 1
a51 1
@@@@ -196,7 +206,7 @@@@ void usage()
d59 2
a60 2
 char output_option(char *arg)
@@@@ -235,7 +245,7 @@@@ int main(int argc, char *argv[])
d62 1
a62 1
 	int i, j, c, titles, cell, vts_ttn, title_set_nr;
d69 1
a69 1
@@@@ -252,18 +262,20 @@@@ int main(int argc, char *argv[])
d91 1
a91 1
@@@@ -277,6 +289,9 @@@@ int main(int argc, char *argv[])
d94 1
a94 1
 	
d101 1
a101 1
@@@@ -287,6 +302,12 @@@@ int main(int argc, char *argv[])
d114 1
a114 1
@@@@ -296,6 +317,12 @@@@ int main(int argc, char *argv[])
d127 1
a127 1
@@@@ -305,8 +332,6 @@@@ int main(int argc, char *argv[])
d136 5
a140 5
@@@@ -377,6 +402,11 @@@@ int main(int argc, char *argv[])
 			dvd_info.titles[j].angle_count = ifo_zero->tt_srpt->title[j].nr_of_angles;
 		} else {
 			dvd_info.titles[j].angle_count = 0;
+		}
d142 4
a145 4
+		// MENU STRUCTURE
+		if (opt_m) {
+			// void ifo_print(dvd_reader_t *, int);
 		}
d147 1
a147 1
 		// AUDIO
@


1.5
log
@Adjust after libdvdcss/libdvdnav/libdvdread updates.

from Brad, ok sthen@@
@
text
@d1 1
a1 1
$OpenBSD: patch-lsdvd_c,v 1.4 2010/06/28 19:22:50 ckuethe Exp $
d3 1
a3 1
+++ lsdvd.c	Fri Dec 16 03:57:41 2011
d20 1
a20 1
@@@@ -130,6 +132,7 @@@@ int get_title_name(const char* dvd_device, char* title
d26 2
a27 1
 	if ( fseek(filehandle, 32808, SEEK_SET )) {
d29 23
a51 1
@@@@ -196,7 +199,7 @@@@ void usage()
d60 1
a60 1
@@@@ -235,7 +238,7 @@@@ int main(int argc, char *argv[])
d69 1
a69 1
@@@@ -252,18 +255,20 @@@@ int main(int argc, char *argv[])
d91 11
a101 1
@@@@ -287,6 +292,12 @@@@ int main(int argc, char *argv[])
d114 1
a114 1
@@@@ -296,6 +307,12 @@@@ int main(int argc, char *argv[])
d127 10
a136 1
@@@@ -377,6 +394,11 @@@@ int main(int argc, char *argv[])
@


1.4
log
@fix HOMEPAGE. remove extra blank line at end of human-readable output.
verbose dump of IFO structure if -vvv is specified. ok jim@@
@
text
@d1 4
a4 5
$OpenBSD: patch-lsdvd_c,v 1.3 2007/07/29 16:32:15 ajacoutot Exp $
--- lsdvd.c.orig	Thu Mar  2 05:48:11 2006
+++ lsdvd.c	Fri Apr 23 14:28:41 2010
@@@@ -13,7 +13,9 @@@@
  *  2003-04-19  Cleanups get_title_name, added dvdtime2msec, added helper macros,
a6 1
+#include <stdint.h>
d12 1
a12 1
@@@@ -119,6 +121,7 @@@@ void converttime(playback_time_t *pt, dvd_time_t *dt)
d20 1
a20 1
@@@@ -130,6 +133,7 @@@@ int get_title_name(const char* dvd_device, char* title
d28 1
a28 1
@@@@ -196,7 +200,7 @@@@ void usage()
d37 1
a37 1
@@@@ -235,7 +239,7 @@@@ int main(int argc, char *argv[])
d46 1
a46 1
@@@@ -252,18 +256,20 @@@@ int main(int argc, char *argv[])
d68 1
a68 1
@@@@ -287,6 +293,12 @@@@ int main(int argc, char *argv[])
d75 1
a75 1
+		ifoPrint(dvd, 0);
d81 1
a81 1
@@@@ -296,6 +308,12 @@@@ int main(int argc, char *argv[])
d88 1
a88 1
+			ifoPrint(dvd, i);
d94 1
a94 1
@@@@ -377,6 +395,11 @@@@ int main(int argc, char *argv[])
d102 1
a102 1
+			// void ifoPrint(dvd_reader_t *, int);
@


1.3
log
@- update to lsdvd-0.16
- fix HOMEPAGE
@
text
@d1 4
a4 4
$OpenBSD: patch-lsdvd_c,v 1.2 2006/02/19 17:42:36 espie Exp $
--- lsdvd.c.orig	Thu Mar  2 14:48:11 2006
+++ lsdvd.c	Sun Jul 29 18:24:55 2007
@@@@ -13,6 +13,7 @@@@
d10 1
d13 27
a39 1
@@@@ -235,7 +236,7 @@@@ int main(int argc, char *argv[])
d48 60
@


1.2
log
@fix build after dvdread bump
@
text
@d1 3
a3 3
$OpenBSD: patch-lsdvd_c,v 1.1.1.1 2004/06/21 21:26:24 xsa Exp $
--- lsdvd.c.orig	Mon Sep 29 23:01:00 2003
+++ lsdvd.c	Sun Feb 19 18:38:20 2006
d6 1
a6 1
  *              output info structures in form of a Perl module, by Henk Vergonet.
d12 1
a12 26
@@@@ -133,21 +134,21 @@@@ int get_title_name(const char* dvd_devic
 
   if (! (filehandle = fopen(dvd_device, "r"))) {
     fprintf(stderr, "Couldn't open %s for title\n", dvd_device);
-    strcpy(title, "unknown");
+    strlcpy(title, "unknown", sizeof(title));
     return -1;
   }
 
   if ( fseek(filehandle, 32808, SEEK_SET )) {
     fclose(filehandle);
     fprintf(stderr, "Couldn't seek in %s for title\n", dvd_device);
-    strcpy(title, "unknown");
+    strlcpy(title, "unknown", sizeof(title));
     return -1;
   }
 
   if ( 32 != (i = fread(title, 1, 32, filehandle)) ) {
     fclose(filehandle);
     fprintf(stderr, "Couldn't read enough bytes for title.\n");
-    strcpy(title, "unknown");
+    strlcpy(title, "unknown", sizeof(strlcpy));
     return -1;
   }
 
@@@@ -194,7 +195,7 @@@@ int main(int argc, char *argv[])
d15 1
a15 1
  	char lang_code[2];
d19 1
a19 1
         int max_length = 0, max_track = 0;
a20 50
@@@@ -349,7 +350,7 @@@@ int main(int argc, char *argv[])
 			for (i=0; i<vtsi_mat->nr_of_vts_audio_streams; i++)
 			{
 				audio_attr = &vtsi_mat->vts_audio_attr[i];
-				sprintf(lang_code, "%c%c", audio_attr->lang_code>>8, audio_attr->lang_code & 0xff);
+				snprintf(lang_code, sizeof(lang_code), "%c%c", audio_attr->lang_code>>8, audio_attr->lang_code & 0xff);
 				if (!lang_code[0]) { lang_code[0] = 'x'; lang_code[1] = 'x'; }
 				HASH(0);
 				DEF("ix", "%d", i+1);
@@@@ -368,7 +369,7 @@@@ int main(int argc, char *argv[])
 			for (i=0; i<vtsi_mat->nr_of_vts_audio_streams; i++)
                 	{
                         	audio_attr = &vtsi_mat->vts_audio_attr[i];
-                        	sprintf(lang_code, "%c%c", audio_attr->lang_code>>8, audio_attr->lang_code & 0xff);
+                        	snprintf(lang_code, sizeof(lang_code), "%c%c", audio_attr->lang_code>>8, audio_attr->lang_code & 0xff);
 	                        if (!lang_code[0]) { lang_code[0] = 'x'; lang_code[1] = 'x'; }
 		                printf("\tAudio: %d, Language: %s - %s, ", i +1 , lang_code, lang_name(lang_code));
        	                	printf("Format: %s, ", audio_format[audio_attr->audio_format]);
@@@@ -412,11 +413,11 @@@@ int main(int argc, char *argv[])
 	                        if (i == pgc->nr_of_programs - 1) next = pgc->nr_of_cells + 1;
 	                        while (cell < next - 1)
 	                        {
-	                                sprintf(hex, "%02x", pgc->cell_playback[cell].playback_time.second);
+	                                snprintf(hex, sizeof(hex), "%02x", pgc->cell_playback[cell].playback_time.second);
 	                                tmp = second + atoi(hex);
 	                                minute = minute + (tmp / 60);
 	                                second = tmp % 60;
-	                                sprintf(hex, "%02x", pgc->cell_playback[cell].playback_time.minute);
+	                                snprintf(hex, sizeof(hex), "%02x", pgc->cell_playback[cell].playback_time.minute);
 	                                tmp = minute + atoi(hex);
         	                        hour = hour + (tmp / 60);
 	                                minute = tmp % 60;
@@@@ -455,7 +456,7 @@@@ int main(int argc, char *argv[])
 			for (i=0; i<vtsi_mat->nr_of_vts_subp_streams; i++)
 			{
 				subp_attr = &vtsi_mat->vts_subp_attr[i];
-				sprintf(lang_code, "%c%c", subp_attr->lang_code>>8, subp_attr->lang_code & 0xff);
+				snprintf(lang_code, sizeof(lang_code), "%c%c", subp_attr->lang_code>>8, subp_attr->lang_code & 0xff);
 				if (!lang_code[0]) { lang_code[0] = 'x'; lang_code[1] = 'x'; }
 	
 				HASH(0);
@@@@ -470,7 +471,7 @@@@ int main(int argc, char *argv[])
 			for (i=0; i<vtsi_mat->nr_of_vts_subp_streams; i++)
 	                {
 	                        subp_attr = &vtsi_mat->vts_subp_attr[i];
-	                        sprintf(lang_code, "%c%c", subp_attr->lang_code>>8, subp_attr->lang_code & 0xff);
+	                        snprintf(lang_code, sizeof(lang_code), "%c%c", subp_attr->lang_code>>8, subp_attr->lang_code & 0xff);
 	                        if (!lang_code[0]) { lang_code[0] = 'x'; lang_code[1] = 'x'; }
 	                        printf("\tSubtitle: %02d, Language: %s - %s, ", i+1, lang_code, lang_name(lang_code));
 	                        printf("Content: %s", subp_type[subp_attr->lang_extension]);
@


1.1
log
@Initial revision
@
text
@d1 12
a12 4
$OpenBSD$
--- lsdvd.c.orig	2003-09-29 15:01:00.000000000 -0600
+++ lsdvd.c	2004-06-21 13:45:33.000000000 -0600
@@@@ -133,21 +133,21 @@@@ int get_title_name(const char* dvd_devic
d37 1
a37 1
@@@@ -194,7 +194,7 @@@@ int main(int argc, char *argv[])
d46 1
a46 1
@@@@ -349,7 +349,7 @@@@ int main(int argc, char *argv[])
d55 1
a55 1
@@@@ -368,7 +368,7 @@@@ int main(int argc, char *argv[])
d64 1
a64 1
@@@@ -412,11 +412,11 @@@@ int main(int argc, char *argv[])
d78 1
a78 1
@@@@ -455,7 +455,7 @@@@ int main(int argc, char *argv[])
d87 1
a87 1
@@@@ -470,7 +470,7 @@@@ int main(int argc, char *argv[])
@


1.1.1.1
log
@
Initial import of lsdvd-0.10

lsdvd is designed to print information about the content and structure
of a DVD.
@
text
@@
