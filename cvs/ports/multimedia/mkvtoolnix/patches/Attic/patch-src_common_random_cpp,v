head	1.5;
access;
symbols
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.2
	OPENBSD_4_6_BASE:1.2;
locks; strict;
comment	@# @;


1.5
date	2012.03.08.12.13.01;	author ajacoutot;	state dead;
branches;
next	1.4;

1.4
date	2010.07.17.22.52.53;	author benoit;	state Exp;
branches;
next	1.3;

1.3
date	2009.12.23.12.11.32;	author benoit;	state Exp;
branches;
next	1.2;

1.2
date	2009.06.09.20.30.18;	author benoit;	state Exp;
branches;
next	1.1;

1.1
date	2009.03.24.05.10.30;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Garbage collect the /dev/arandom patches.

from Brad
ok landry@@ sthen@@
@
text
@$OpenBSD: patch-src_common_random_cpp,v 1.4 2010/07/17 22:52:53 benoit Exp $
--- src/common/random.cpp.orig	Sat Jun  5 08:24:39 2010
+++ src/common/random.cpp	Sat Jun 26 20:39:53 2010
@@@@ -98,7 +98,7 @@@@ random_c::generate_bytes(void *destination,
   try {
     if (!m_tried_dev_urandom) {
       m_tried_dev_urandom = true;
-      m_dev_urandom       = mm_file_io_cptr(new mm_file_io_c("/dev/urandom", MODE_READ));
+      m_dev_urandom       = mm_file_io_cptr(new mm_file_io_c("/dev/arandom", MODE_READ));
     }
     if (m_dev_urandom.is_set() && (m_dev_urandom->read(destination, num_bytes) == num_bytes))
       return;
@


1.4
log
@- update mkvtoolnix to 4.0.0
- update patches
- use new WANTLIB/LIB_DEPENDS style

initial diff from brad, ok ajacoutot@@
@
text
@d1 1
a1 1
$OpenBSD: patch-src_common_random_cpp,v 1.3 2009/12/23 12:11:32 benoit Exp $
@


1.3
log
@- update mkvtoolnix to 3.0.0
- regen PLIST
- update patch

ok ajacoutot@@
@
text
@d1 4
a4 4
$OpenBSD$
--- src/common/random.cpp.orig	Thu Aug 13 12:32:50 2009
+++ src/common/random.cpp	Thu Sep 10 12:08:56 2009
@@@@ -98,7 +98,7 @@@@
@


1.2
log
@- update mkvtoolnix to 2.9.5
- change email maintainer
- update and regen patches

ok ajacoutot@@
@
text
@d2 3
a4 3
--- src/common/random.cpp.orig	Sun Jun  7 11:04:28 2009
+++ src/common/random.cpp	Mon Jun  8 23:06:54 2009
@@@@ -101,7 +101,7 @@@@ random_c::generate_bytes(void *destination,
d8 2
a9 2
-      m_dev_urandom = mm_file_io_cptr(new mm_file_io_c("/dev/urandom", MODE_READ));
+      m_dev_urandom = mm_file_io_cptr(new mm_file_io_c("/dev/arandom", MODE_READ));
d11 2
a12 2
     if ((NULL != m_dev_urandom.get()) &&
         (m_dev_urandom->read(destination, num_bytes) == num_bytes))
@


1.1
log
@use /dev/arandom instead of /dev/urandom

ok Benoit Lecocq (MAINTAINER)
@
text
@d2 4
a5 3
--- src/common/random.cpp.orig	Sun Mar 22 18:04:53 2009
+++ src/common/random.cpp	Sun Mar 22 18:05:22 2009
@@@@ -102,7 +102,7 @@@@ random_c::generate_bytes(void *destination,
d8 2
a9 3
       m_dev_urandom =
-        auto_ptr<mm_file_io_c>(new mm_file_io_c("/dev/urandom", MODE_READ));
+        auto_ptr<mm_file_io_c>(new mm_file_io_c("/dev/arandom", MODE_READ));
@

