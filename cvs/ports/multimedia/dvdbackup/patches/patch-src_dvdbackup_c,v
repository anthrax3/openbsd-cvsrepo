head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.28
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.24
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.26
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.22
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.20
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.18
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.16
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.14
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.12
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.10
	OPENBSD_5_0:1.3.0.8
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.6
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.2.0.12
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.10
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.8
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.6
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.4
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.2
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.1.1.1.0.4
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.2
	OPENBSD_3_9_BASE:1.1.1.1
	jakemsr-20051102:1.1.1.1
	jakemsr:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2009.07.30.19.10.28;	author jakemsr;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.12.11.30.41;	author claudio;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.03.07.46.02;	author jakemsr;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.11.03.07.46.02;	author jakemsr;	state Exp;
branches;
next	;


desc
@@


1.3
log
@adjust for libdvdav update - quit using the libdvdnav version
of libdvdread haders since they are no longer part of libdvdnav.
@
text
@$OpenBSD: patch-src_dvdbackup_c,v 1.2 2006/10/12 11:30:41 claudio Exp $
--- src/dvdbackup.c.orig	Sun Aug  4 23:08:39 2002
+++ src/dvdbackup.c	Mon Jul 13 16:58:47 2009
@@@@ -30,6 +30,7 @@@@
 #include <unistd.h>
 #include <string.h>
 #include <limits.h>
+#include <stdint.h>
 #include <dvdread/dvd_reader.h>
 #include <dvdread/ifo_read.h>
 #include <dvdread/ifo_print.h>
@@@@ -227,7 +227,8 @@@@ void usage(){
 }
 
 int CheckSizeArray(const int size_array[], int reference, int target) {
-	if ( (size_array[reference]/size_array[target] == 1) &&
+	if ( (size_array[target] != 0) &&
+	     (size_array[reference]/size_array[target] == 1) &&
 	     ((size_array[reference] * 2 - size_array[target])/ size_array[target] == 1) &&
 	     ((size_array[reference]%size_array[target] * 3) < size_array[reference]) ) {
 		/* We have a dual DVD with two feature films - now lets see if they have the same amount of chapters*/
@@@@ -301,7 +302,7 @@@@ int DVDWriteCells(dvd_reader_t * dvd, int cell_start_s
 
 
 	/* Vob control */
-	int vob;
+	int vob = 0;
 
 	/* Temp filename,dirname */
 	char targetname[PATH_MAX];
@@@@ -313,9 +314,9 @@@@ int DVDWriteCells(dvd_reader_t * dvd, int cell_start_s
 	/* File Handler */
 	int streamout;
 
-	int size;
-	int left;
-	int leftover;
+	int size = 0;
+	int left = 0;
+	int leftover = 0;
 
 	/* Buffer size in DVD sectors */
 	/* Currently set to 1MB */
@@@@ -353,7 +354,7 @@@@ int DVDWriteCells(dvd_reader_t * dvd, int cell_start_s
 	/* Remove all old files silently if they exists */
 
 	for ( i = 0 ; i < 10 ; i++ ) {
-		sprintf(targetname,"%s/%s/VIDEO_TS/VTS_%02i_%i.VOB",targetdir, title_name, title_set, i + 1);
+		snprintf(targetname, sizeof(targetname),"%s/%s/VIDEO_TS/VTS_%02i_%i.VOB",targetdir, title_name, title_set, i + 1);
 #ifdef DEBUG
 		fprintf(stderr,"DVDWriteCells: file is %s\n", targetname);
 
@@@@ -423,7 +424,7 @@@@ int DVDWriteCells(dvd_reader_t * dvd, int cell_start_s
 			fprintf(stderr,"Don't try to copy chapters from the VMG domain there aren't any\n");
 			return(1);
 		} else {
-			sprintf(targetname,"%s/%s/VIDEO_TS/VTS_%02i_%i.VOB",targetdir, title_name, title_set, vob);
+			snprintf(targetname,sizeof(targetname),"%s/%s/VIDEO_TS/VTS_%02i_%i.VOB",targetdir, title_name, title_set, vob);
 		}
 
 #ifdef DEBUG
@@@@ -504,7 +505,7 @@@@ int DVDWriteCells(dvd_reader_t * dvd, int cell_start_s
 				fprintf(stderr,"Don't try to copy chapters from the VMG domain there aren't any\n");
 				return(1);
 			} else {
-				sprintf(targetname,"%s/%s/VIDEO_TS/VTS_%02i_%i.VOB",targetdir, title_name, title_set, vob);
+				snprintf(targetname,sizeof(targetname),"%s/%s/VIDEO_TS/VTS_%02i_%i.VOB",targetdir, title_name, title_set, vob);
 			}
 
 
@@@@ -602,7 +603,7 @@@@ titles_info_t * DVDGetInfo(dvd_reader_t * _dvd) {
 	int counter, i, f;
 
 	/* Our guess */
-	int candidate;
+	int candidate = 0;
 	int multi = 0;
 	int dual = 0;
 
@@@@ -1083,7 +1084,7 @@@@ int DVDCopyTileVobX(dvd_reader_t * dvd, title_set_info
 		fprintf(stderr,"Don't try to copy a Title VOB from the VMG domain there aren't any\n");
 		return(1);
 	} else {
-		sprintf(targetname,"%s/%s/VIDEO_TS/VTS_%02i_%i.VOB",targetdir, title_name, title_set, vob);
+		snprintf(targetname,sizeof(targetname),"%s/%s/VIDEO_TS/VTS_%02i_%i.VOB",targetdir, title_name, title_set, vob);
 	}
 
 
@@@@ -1217,9 +1218,9 @@@@ int DVDCopyMenu(dvd_reader_t * dvd, title_set_info_t *
 
 	/* Create VIDEO_TS.VOB or VTS_XX_0.VOB */
 	if (title_set == 0) {
-		sprintf(targetname,"%s/%s/VIDEO_TS/VIDEO_TS.VOB",targetdir, title_name);
+		snprintf(targetname,sizeof(targetname),"%s/%s/VIDEO_TS/VIDEO_TS.VOB",targetdir, title_name);
 	} else {
-		sprintf(targetname,"%s/%s/VIDEO_TS/VTS_%02i_0.VOB",targetdir, title_name, title_set);
+		snprintf(targetname,sizeof(targetname),"%s/%s/VIDEO_TS/VTS_%02i_0.VOB",targetdir, title_name, title_set);
 	}
 
 
@@@@ -1330,9 +1331,9 @@@@ int DVDCopyIfoBup (dvd_reader_t * dvd, title_set_info_
 	/* Create VIDEO_TS.IFO or VTS_XX_0.IFO */
 
 	if (title_set == 0) {
-		sprintf(targetname,"%s/%s/VIDEO_TS/VIDEO_TS.IFO",targetdir, title_name);
+		snprintf(targetname,sizeof(targetname),"%s/%s/VIDEO_TS/VIDEO_TS.IFO",targetdir, title_name);
 	} else {
-		sprintf(targetname,"%s/%s/VIDEO_TS/VTS_%02i_0.IFO",targetdir, title_name, title_set);
+		snprintf(targetname,sizeof(targetname),"%s/%s/VIDEO_TS/VTS_%02i_0.IFO",targetdir, title_name, title_set);
 	}
 
 	if (stat(targetname, &fileinfo) == 0) {
@@@@ -1396,9 +1397,9 @@@@ int DVDCopyIfoBup (dvd_reader_t * dvd, title_set_info_
 	/* Create VIDEO_TS.BUP or VTS_XX_0.BUP */
 
 	if (title_set == 0) {
-		sprintf(targetname,"%s/%s/VIDEO_TS/VIDEO_TS.BUP",targetdir, title_name);
+		snprintf(targetname,sizeof(targetname),"%s/%s/VIDEO_TS/VIDEO_TS.BUP",targetdir, title_name);
 	} else {
-		sprintf(targetname,"%s/%s/VIDEO_TS/VTS_%02i_0.BUP",targetdir, title_name, title_set);
+		snprintf(targetname,sizeof(targetname),"%s/%s/VIDEO_TS/VTS_%02i_0.BUP",targetdir, title_name, title_set);
 	}
 
 
@@@@ -1518,7 +1519,7 @@@@ int DVDMirrorTitleX(dvd_reader_t * dvd, title_set_info
 int DVDGetTitleName(const char *device, char *title)
 {
 	/* Variables for filehandel and title string interaction */
-
+	char buf[2048];
 	int  filehandle, i, last;
 
 	/* Open DVD device */
@@@@ -1530,7 +1531,7 @@@@ int DVDGetTitleName(const char *device, char *title)
 
 	/* Seek to title of first track, which is at (track_no * 32768) + 40 */
 
-	if ( 32808 != lseek(filehandle, 32808, SEEK_SET) ) {
+	if ( 32768 != lseek(filehandle, 32768, SEEK_SET) ) {
 		close(filehandle);
 		fprintf(stderr, "Can't seek DVD device %s - check your DVD device\n", device);
 		return(1);
@@@@ -1538,21 +1539,20 @@@@ int DVDGetTitleName(const char *device, char *title)
 
 	/* Read the DVD-Video title */
 
-	if ( 32 != read(filehandle, title, 32)) {
+	if (read(filehandle, buf, sizeof(buf)) == -1) {
 		close(filehandle);
 		fprintf(stderr, "Can't read title from DVD device %s\n", device);
 		return(1);
 	}
 
 	/* Terminate the title string */
+	strlcpy(title, buf + 40, 32);
 
-	title[32] = '\0';
-
-
 	/* Remove trailing white space */
-
-	last = 32;
+	last = 31;
 	for ( i = 0; i < 32; i++ ) {
+		if (title[i] == '\0')
+			break;
 		if ( title[i] != ' ' ) { last = i; }
 	}
 
@@@@ -1687,7 +1687,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_reader_t * _dvd) {
 
 	/* Find VIDEO_TS.IFO is present - must be present since we did a ifo open 0*/
 
-	sprintf(filename,"/VIDEO_TS/VIDEO_TS.IFO");
+	snprintf(filename,sizeof(filename),"/VIDEO_TS/VIDEO_TS.IFO");
 
 	if ( UDFFindFile(_dvd, filename, &size) != 0 ) {
 		title_set_info->title_set[0].size_ifo = size;
@@@@ -1700,7 +1700,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_reader_t * _dvd) {
 
 	/* Find VIDEO_TS.VOB if present*/
 
-	sprintf(filename,"/VIDEO_TS/VIDEO_TS.VOB");
+	snprintf(filename,sizeof(filename),"/VIDEO_TS/VIDEO_TS.VOB");
 
 	if ( UDFFindFile(_dvd, filename, &size) != 0 ) {
 		title_set_info->title_set[0].size_menu = size;
@@@@ -1710,7 +1710,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_reader_t * _dvd) {
 
 	/* Find VIDEO_TS.BUP if present */
 
-	sprintf(filename,"/VIDEO_TS/VIDEO_TS.BUP");
+	snprintf(filename,sizeof(filename),"/VIDEO_TS/VIDEO_TS.BUP");
 
 	if ( UDFFindFile(_dvd, filename, &size) != 0 ) {
 		title_set_info->title_set[0].size_bup = size;
@@@@ -1745,7 +1745,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_reader_t * _dvd) {
 			}
 
 
-			sprintf(filename,"/VIDEO_TS/VTS_%02i_0.IFO",counter + 1);
+			snprintf(filename,sizeof(filename),"/VIDEO_TS/VTS_%02i_0.IFO",counter + 1);
 
 			if ( UDFFindFile(_dvd, filename, &size) != 0 ) {
 				title_set_info->title_set[counter + 1].size_ifo = size;
@@@@ -1761,7 +1761,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_reader_t * _dvd) {
 
 			/* Find VTS_XX_0.VOB if present*/
 
-			sprintf(filename,"/VIDEO_TS/VTS_%02i_0.VOB", counter + 1);
+			snprintf(filename,sizeof(filename),"/VIDEO_TS/VTS_%02i_0.VOB", counter + 1);
 
 			if ( UDFFindFile(_dvd, filename, &size) != 0 ) {
 				title_set_info->title_set[counter + 1].size_menu = size;
@@@@ -1778,7 +1778,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_reader_t * _dvd) {
 			/* Find all VTS_XX_[1 to 9].VOB files if they are present*/
 
 			for( i = 0; i < 9; ++i ) {
-				sprintf(filename,"/VIDEO_TS/VTS_%02i_%i.VOB", counter + 1, i + 1 );
+				snprintf(filename,sizeof(filename),"/VIDEO_TS/VTS_%02i_%i.VOB", counter + 1, i + 1 );
 				if(UDFFindFile(_dvd, filename, &size) == 0 ) {
 					break;
 				}
@@@@ -1791,7 +1791,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_reader_t * _dvd) {
 			}
 
 
-			sprintf(filename,"/VIDEO_TS/VTS_%02i_0.BUP", counter + 1);
+			snprintf(filename,sizeof(filename),"/VIDEO_TS/VTS_%02i_0.BUP", counter + 1);
 
 			if ( UDFFindFile(_dvd, filename, &size) != 0 ) {
 				title_set_info->title_set[counter +1].size_bup = size;
@@@@ -2265,9 +2265,9 @@@@ int main(int argc, char *argv[]){
 
 	/* Switches */
 	int title_set = 0;
-	int titles;
-	int start_chapter;
-	int end_chapter;
+	int titles = 0;
+	int start_chapter = 0;
+	int end_chapter = 0;
 
 	int do_mirror = 0;
 	int do_title_set = 0;
@@@@ -2278,7 +2278,7 @@@@ int main(int argc, char *argv[]){
 
 
 
-	int return_code;
+	int return_code = 0;
 
 	/* DVD Video device */
 	char * dvd=NULL;
@@@@ -2499,7 +2499,7 @@@@ int main(int argc, char *argv[]){
 
 
 
-	sprintf(targetname,"%s",targetdir);
+	snprintf(targetname,sizeof(targetname),"%s",targetdir);
 
 	if (stat(targetname, &fileinfo) == 0) {
 		if (! S_ISDIR(fileinfo.st_mode)) {
@@@@ -2515,7 +2515,7 @@@@ int main(int argc, char *argv[]){
 	}
 
 
-	sprintf(targetname,"%s/%s",targetdir, title_name);
+	snprintf(targetname,sizeof(targetname),"%s/%s",targetdir, title_name);
 
 	if (stat(targetname, &fileinfo) == 0) {
 		if (! S_ISDIR(fileinfo.st_mode)) {
@@@@ -2530,7 +2530,7 @@@@ int main(int argc, char *argv[]){
 		}
 	}
 
-	sprintf(targetname,"%s/%s/VIDEO_TS",targetdir, title_name);
+	snprintf(targetname,sizeof(targetname),"%s/%s/VIDEO_TS",targetdir, title_name);
 
 	if (stat(targetname, &fileinfo) == 0) {
 		if (! S_ISDIR(fileinfo.st_mode)) {
@


1.2
log
@Fix the DVDGetTitleName() function.
The function tries to read the title from the DVD but does it in a way
that does not work on OpenBSD. OpenBSD returns EINVAL for reads that are not
a multiple of the blocksize for rcd0c.

ok jolan@@
@
text
@d1 4
a4 4
$OpenBSD: patch-src_dvdbackup_c,v 1.1.1.1 2005/11/03 07:46:02 jakemsr Exp $
--- src/dvdbackup.c.orig	Mon Aug  5 08:08:17 2002
+++ src/dvdbackup.c	Tue Oct  3 18:48:52 2006
@@@@ -30,11 +30,11 @@@@
d8 4
a11 12
-#include <dvdread/dvd_reader.h>
-#include <dvdread/ifo_read.h>
-#include <dvdread/ifo_print.h>
+#include <dvdnav/dvd_reader.h>
+#include <dvdnav/ifo_read.h>
+#include <dvdnav/ifo_print.h>
+#include <dvdnav/dvd_udf.h>
 
-
 #define MAXNAME 256
 
 /*Flag for verbose mode */
d22 1
a22 1
@@@@ -301,7 +302,7 @@@@ int DVDWriteCells(dvd_reader_t * dvd, in
d31 1
a31 1
@@@@ -313,9 +314,9 @@@@ int DVDWriteCells(dvd_reader_t * dvd, in
d44 1
a44 1
@@@@ -353,7 +354,7 @@@@ int DVDWriteCells(dvd_reader_t * dvd, in
d53 1
a53 1
@@@@ -423,7 +424,7 @@@@ int DVDWriteCells(dvd_reader_t * dvd, in
d62 1
a62 1
@@@@ -504,7 +505,7 @@@@ int DVDWriteCells(dvd_reader_t * dvd, in
d71 1
a71 1
@@@@ -602,7 +603,7 @@@@ titles_info_t * DVDGetInfo(dvd_reader_t 
d80 1
a80 1
@@@@ -1083,7 +1084,7 @@@@ int DVDCopyTileVobX(dvd_reader_t * dvd, 
d89 1
a89 1
@@@@ -1217,9 +1218,9 @@@@ int DVDCopyMenu(dvd_reader_t * dvd, titl
d101 1
a101 1
@@@@ -1330,9 +1331,9 @@@@ int DVDCopyIfoBup (dvd_reader_t * dvd, t
d113 1
a113 1
@@@@ -1396,9 +1397,9 @@@@ int DVDCopyIfoBup (dvd_reader_t * dvd, t
d125 1
a125 1
@@@@ -1518,7 +1519,7 @@@@ int DVDMirrorTitleX(dvd_reader_t * dvd, 
d134 1
a134 1
@@@@ -1530,7 +1531,7 @@@@ int DVDGetTitleName(const char *device, 
d143 1
a143 1
@@@@ -1538,21 +1539,20 @@@@ int DVDGetTitleName(const char *device, 
d170 1
a170 1
@@@@ -1687,7 +1687,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d179 1
a179 1
@@@@ -1700,7 +1700,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d188 1
a188 1
@@@@ -1710,7 +1710,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d197 1
a197 1
@@@@ -1745,7 +1745,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d206 1
a206 1
@@@@ -1761,7 +1761,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d215 1
a215 1
@@@@ -1778,7 +1778,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d224 1
a224 1
@@@@ -1791,7 +1791,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
$OpenBSD$
--- src/dvdbackup.c.orig	Sun Aug  4 23:08:39 2002
+++ src/dvdbackup.c	Wed Nov  2 23:24:35 2005
d133 46
a178 1
@@@@ -1687,7 +1688,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d187 1
a187 1
@@@@ -1700,7 +1701,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d196 1
a196 1
@@@@ -1710,7 +1711,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d205 1
a205 1
@@@@ -1745,7 +1746,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d214 1
a214 1
@@@@ -1761,7 +1762,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d223 1
a223 1
@@@@ -1778,7 +1779,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d232 1
a232 1
@@@@ -1791,7 +1792,7 @@@@ title_set_info_t *DVDGetFileSet(dvd_read
d241 1
a241 1
@@@@ -2265,9 +2266,9 @@@@ int main(int argc, char *argv[]){
d254 1
a254 1
@@@@ -2278,7 +2279,7 @@@@ int main(int argc, char *argv[]){
d263 1
a263 1
@@@@ -2499,7 +2500,7 @@@@ int main(int argc, char *argv[]){
d272 1
a272 1
@@@@ -2515,7 +2516,7 @@@@ int main(int argc, char *argv[]){
d281 1
a281 1
@@@@ -2530,7 +2531,7 @@@@ int main(int argc, char *argv[]){
@


1.1.1.1
log
@Initial import of dvdbackup.

Dvdbackup is a DVD a program for mirroring DVD-Video to harddisk.
Dvdbackup is not just a backup program but can also report information
about a DVD, or e.g just backup the main feature of a DVD.

requested by jolan@@

@
text
@@
