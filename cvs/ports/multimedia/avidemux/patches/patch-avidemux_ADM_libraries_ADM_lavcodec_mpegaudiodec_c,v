head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.36
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.34
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.30
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.32
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.28
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.26
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.24
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.22
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.20
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.18
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.16
	OPENBSD_5_0:1.1.0.14
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.12
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.10
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.8
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.6
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.4
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.2
	OPENBSD_4_4_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.03.19.09.21.37;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.1
log
@- update to version 2.4.1
- add support for artsd and esound

ok jakemsr@@
@
text
@$OpenBSD$
--- avidemux/ADM_libraries/ADM_lavcodec/mpegaudiodec.c.orig	Mon Jul 16 19:46:57 2007
+++ avidemux/ADM_libraries/ADM_lavcodec/mpegaudiodec.c	Tue Jan 15 21:34:19 2008
@@@@ -2357,70 +2357,6 @@@@ static int mp_decode_frame(MPADecodeContext *s,
     return nb_frames * 32 * sizeof(OUT_INT) * s->nb_channels;
 }
 
-static int decode_frame(AVCodecContext * avctx,
-                        void *data, int *data_size,
-                        uint8_t * buf, int buf_size)
-{
-    MPADecodeContext *s = avctx->priv_data;
-    uint32_t header;
-    int out_size;
-    OUT_INT *out_samples = data;
-
-retry:
-    if(buf_size < HEADER_SIZE)
-        return -1;
-
-    header = AV_RB32(buf);
-    if(ff_mpa_check_header(header) < 0){
-        buf++;
-//        buf_size--;
-        av_log(avctx, AV_LOG_ERROR, "Header missing skipping one byte.\n");
-        goto retry;
-    }
-
-    if (ff_mpegaudio_decode_header(s, header) == 1) {
-        /* free format: prepare to compute frame size */
-        s->frame_size = -1;
-        return -1;
-    }
-    /* update codec info */
-    avctx->channels = s->nb_channels;
-    avctx->bit_rate = s->bit_rate;
-    avctx->sub_id = s->layer;
-    switch(s->layer) {
-    case 1:
-        avctx->frame_size = 384;
-        break;
-    case 2:
-        avctx->frame_size = 1152;
-        break;
-    case 3:
-        if (s->lsf)
-            avctx->frame_size = 576;
-        else
-            avctx->frame_size = 1152;
-        break;
-    }
-
-    if(s->frame_size<=0 || s->frame_size > buf_size){
-        av_log(avctx, AV_LOG_ERROR, "incomplete frame\n");
-        return -1;
-    }else if(s->frame_size < buf_size){
-        av_log(avctx, AV_LOG_ERROR, "incorrect frame size\n");
-        buf_size= s->frame_size;
-    }
-
-    out_size = mp_decode_frame(s, out_samples, buf, buf_size);
-    if(out_size>=0){
-        *data_size = out_size;
-        avctx->sample_rate = s->sample_rate;
-        //FIXME maybe move the other codec info stuff from above here too
-    }else
-        av_log(avctx, AV_LOG_DEBUG, "Error while decoding MPEG audio frame.\n"); //FIXME return -1 / but also return the number of bytes consumed
-    s->frame_size = 0;
-    return buf_size;
-}
-
 static void flush(AVCodecContext *avctx){
     MPADecodeContext *s = avctx->priv_data;
     s->last_buf_size= 0;
@
