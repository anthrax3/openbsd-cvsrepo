head	1.5;
access;
symbols
	OPENBSD_4_7:1.4.0.4
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.2
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.1.1.0.4
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.2
	OPENBSD_4_2_BASE:1.1.1.1
	ajacoutot_20070408:1.1.1.1
	ajacoutot:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2010.05.26.21.18.17;	author jakemsr;	state dead;
branches;
next	1.4;

1.4
date	2009.04.14.19.50.47;	author kili;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.28.15.23.31;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.22.20.24.04;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2007.04.08.17.31.01;	author ajacoutot;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.04.08.17.31.01;	author ajacoutot;	state Exp;
branches;
next	;


desc
@@


1.5
log
@update to x264-snapshot-20100511-2245

this is an ABI/API change.  there will be fallout, but patches
exist and will be committed rsn ...

mostly from MAINTAINER
@
text
@$OpenBSD: patch-common_cpu_c,v 1.4 2009/04/14 19:50:47 kili Exp $
--- common/cpu.c.orig	Wed Feb  4 16:45:09 2009
+++ common/cpu.c	Sun Apr  5 16:55:33 2009
@@@@ -214,10 +214,12 @@@@ uint32_t x264_cpu_detect( void )
     size_t   length = sizeof( has_altivec );
     int      error = sysctl( selectors, 2, &has_altivec, &length, NULL, 0 );
 
+#if 0
     if( error == 0 && has_altivec != 0 )
     {
         cpu |= X264_CPU_ALTIVEC;
     }
+#endif
 
     return cpu;
 }
@


1.4
log
@
Update to a newer snapshot.

From Brad (new maintainer).

"theoretically ok" ajacoutot@@
@
text
@d1 1
a1 1
$OpenBSD: patch-common_cpu_c,v 1.3 2008/08/28 15:23:31 brad Exp $
@


1.3
log
@- Add support for x264 detecting the number of CPUs via the
  hw.ncpu sysctl.
- Switch the AltiVec code from using the signals method of
  presence detection to using the machdep.altivec sysctl.

ok kili@@
@
text
@d1 4
a4 32
$OpenBSD: patch-common_cpu_c,v 1.2 2008/07/22 20:24:04 brad Exp $
--- common/cpu.c.orig	Sun Jul 13 16:45:06 2008
+++ common/cpu.c	Thu Aug 14 20:58:30 2008
@@@@ -32,6 +32,10 @@@@
 #include <sys/types.h>
 #include <sys/sysctl.h>
 #endif
+#ifdef SYS_OPENBSD
+#include <sys/param.h>
+#include <sys/sysctl.h>
+#endif
 
 #include "common.h"
 #include "cpu.h"
@@@@ -182,17 +186,28 @@@@ uint32_t x264_cpu_detect( void )
 
 #elif defined( ARCH_PPC )
 
-#ifdef SYS_MACOSX
+#if defined(SYS_MACOSX) || defined(SYS_OPENBSD)
 #include <sys/sysctl.h>
+#ifdef SYS_OPENBSD
+#include <machine/cpu.h>
+#endif
 uint32_t x264_cpu_detect( void )
 {
     /* Thank you VLC */
     uint32_t cpu = 0;
-    int      selectors[2] = { CTL_HW, HW_VECTORUNIT };
-    int      has_altivec = 0;
+    int      selectors[2];
+    int      has_altivec = 0, error;
d6 1
a6 1
-    int      error = sysctl( selectors, 2, &has_altivec, &length, NULL, 0 );
d8 1
a8 9
+#ifdef SYS_OPENBSD
+    selectors[0] = CTL_MACHDEP;
+    selectors[1] = CPU_ALTIVEC;
+#else
+    selectors[0] = CTL_HW;
+    selectors[1] = HW_VECTORUNIT;
+#endif
+
+    error = sysctl( selectors, 2, &has_altivec, &length, NULL, 0 );
a11 19
@@@@ -286,6 +301,19 @@@@ int x264_cpu_num_processors( void )
     int numberOfCPUs;
     size_t length = sizeof( numberOfCPUs );
     if( sysctlbyname("hw.ncpu", &numberOfCPUs, &length, NULL, 0) )
+    {
+        numberOfCPUs = 1;
+    }
+    return numberOfCPUs;
+
+#elif defined(SYS_OPENBSD)
+    int mib[2], numberOfCPUs;
+    size_t length = sizeof( numberOfCPUs );
+
+    mib[0] = CTL_HW;
+    mib[1] = HW_NCPU;
+
+    if( sysctl(mib, 2, &numberOfCPUs, &length, NULL, 0) )
     {
         numberOfCPUs = 1;
d13 4
@


1.2
log
@Upgrade to x264 snapshot 20080713.

Also remove ajacoutot@@ as maintainer per his request.

ok jakemsr@@
@
text
@d1 11
a11 6
$OpenBSD: patch-common_cpu_c,v 1.1.1.1 2007/04/08 17:31:01 ajacoutot Exp $
--- common/cpu.c.orig	Fri Jul  4 16:45:05 2008
+++ common/cpu.c	Tue Jul  8 23:59:12 2008
@@@@ -201,7 +201,7 @@@@ uint32_t x264_cpu_detect( void )
     return cpu;
 }
d13 55
a67 5
-#elif defined( SYS_LINUX )
+#elif defined SYS_LINUX || defined SYS_OPENBSD
 #include <signal.h>
 #include <setjmp.h>
 static sigjmp_buf jmpbuf;
@


1.1
log
@Initial revision
@
text
@d1 4
a4 4
$OpenBSD$
--- common/cpu.c.orig	Sun Mar 25 22:45:02 2007
+++ common/cpu.c	Mon Mar 26 17:28:58 2007
@@@@ -144,7 +144,7 @@@@ uint32_t x264_cpu_detect( void )
@


1.1.1.1
log
@Import x264-20070325

x264 is a free library for encoding H264/AVC video streams.

This program requires a processor with recent instructions (MMX/SSE for
i386, AltiVec for powerpc).

Encoder features:
 * CAVLC/CABAC
 * Multi-references
 * Intra: all macroblock types (16x16, 8x8, and 4x4 with all predictions)
 * Inter P: all partitions (from 16x16 down to 4x4)
 * Inter B: partitions from 16x16 down to 8x8 (including skip/direct)
 * Ratecontrol: constant quantizer, single or multipass ABR, optional VBV
 * Scene cut detection
 * Adaptive B-frame placement
 * B-frames as references / arbitrary frame order
 * 8x8 and 4x4 adaptive spatial transform
 * Lossless mode
 * Custom quantization matrices
 * Parallel encoding of multiple slices
 * Interlacing


based on an original submission by Nikns Siankin <nikns at secure dot lv>
help and ok naddy@@ steven@@
@
text
@@
