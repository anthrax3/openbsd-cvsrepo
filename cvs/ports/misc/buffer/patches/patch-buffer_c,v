head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.2.0.28
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.26
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.22
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.24
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.20
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.22
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.20
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.18
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.16
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.14
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.12
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.10
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.8
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.6
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.4
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.2
	OPENBSD_3_7_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2017.04.13.21.21.43;	author naddy;	state Exp;
branches;
next	1.2;
commitid	HIB78jSAxVTTabQr;

1.2
date	2010.05.22.21.28.21;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.18.13.49.20;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.3
log
@fix build with clang; drop maintainer
@
text
@$OpenBSD: patch-buffer_c,v 1.2 2010/05/22 21:28:21 espie Exp $
--- buffer.c.orig	Sat Oct 30 18:54:47 1999
+++ buffer.c	Thu Apr 13 23:15:40 2017
@@@@ -117,7 +117,8 @@@@
 static char *rcsid = "$Header: /a/swan/home/swan/staff/csg/lmjm/src/buffer/RCS/buffer.c,v 1.17 1993/06/04 10:26:39 lmjm Exp lmjm $";
 #endif
 
-extern char *shmat();
+#include <string.h>
+#include <stdlib.h>
 
 /* General macros */
 #define TRUE 1
@@@@ -168,7 +169,7 @@@@ int max_shmem = DEF_SHMEM;
 /* the shared memory id of the buffer */
 int buffer_id = NONE;
 struct block {
-	int bytes;
+	int *bytes;
 	char *data;
 } *curr_block;
 
@@@@ -185,12 +186,13 @@@@ struct buffer {
 	int next_block_in;
 	int next_block_out;
 
-	struct block block[ MAX_BLOCKS ];
-
 	/* These actual space for the blocks is here - the array extends
 	 * pass 1 */
 	char data_space[ 1 ];
 } *pbuffer = NO_BUFFER;
+
+struct block block[ MAX_BLOCKS ];
+
 int buffer_size;
 
 int fdin	= 0;
@@@@ -447,7 +449,7 @@@@ buffer_allocate()
 
 	/* Allow for the data space */
 	buffer_size = sizeof( struct buffer ) +
-		((blocks * blocksize) - sizeof( char ));
+		(blocks * (sizeof(int) + blocksize) - sizeof( char ));
 
 	/* Create the space for the buffer */
 	buffer_id = shmget( IPC_PRIVATE,
@@@@ -490,6 +492,7 @@@@ buffer_allocate()
 	pbuffer = NO_BUFFER;
 }
 
+void
 buffer_remove()
 {
 	static char removing = FALSE;
@@@@ -533,8 +536,13 @@@@ get_buffer()
 
 	/* Setup the data space pointers */
 	for( b = 0; b < blocks; b++ )
-		pbuffer->block[ b ].data =
-			&pbuffer->data_space[ b * blocksize ];
+	{
+		block[ b ].bytes =
+			(int *)&pbuffer->data_space[ b * blocksize + b * sizeof(int)];
+		block[ b ].data =
+			&pbuffer->data_space[ b * blocksize + 
+				( b + 1 ) * sizeof(int)];
+	}
 
 }
 
@@@@ -592,7 +600,7 @@@@ get_next_free_block()
 	/* Maybe wait till there is room in the buffer */
 	lock( pbuffer->semid, pbuffer->blocks_free_lock );
 
-	curr_block = &pbuffer->block[ pbuffer->next_block_in ];
+	curr_block = &block[ pbuffer->next_block_in ];
 
 	pbuffer->next_block_in = INC( pbuffer->next_block_in );
 }
@@@@ -605,7 +613,7 @@@@ fill_block()
 	static char eof_reached = 0;
 	
 	if( eof_reached ){
-		curr_block->bytes = 0;
+		*curr_block->bytes = 0;
 		unlock( pbuffer->semid, pbuffer->blocks_used_lock );
 		return 0;
 	}
@@@@ -631,10 +639,10 @@@@ fill_block()
 
 	/* number of bytes available. Zero will be taken as eof */
 	if( !padblock || toread == blocksize )
-		curr_block->bytes = blocksize - toread;
+		*curr_block->bytes = blocksize - toread;
 	else {
 		if( toread ) bzero( start, toread );
-		curr_block->bytes = blocksize;
+		*curr_block->bytes = blocksize;
 	}
 
 	if( debug > 1 )
@@@@ -642,7 +650,7 @@@@ fill_block()
 
 	unlock( pbuffer->semid, pbuffer->blocks_used_lock );
 
-	return curr_block->bytes;
+	return *curr_block->bytes;
 }
 
 /* Write the buffer to stdout */
@@@@ -697,14 +705,14 @@@@ get_next_filled_block()
 	/* Hang till some data is available */
 	lock( pbuffer->semid, pbuffer->blocks_used_lock );
 
-	curr_block = &pbuffer->block[ pbuffer->next_block_out ];
+	curr_block = &block[ pbuffer->next_block_out ];
 
 	pbuffer->next_block_out = INC( pbuffer->next_block_out );
 }
 
 data_to_write()
 {
-	return curr_block->bytes;
+	return *curr_block->bytes;
 }
 
 write_blocks_to_stdout( filled, first_block )
@@@@ -714,7 +722,7 @@@@ write_blocks_to_stdout( filled, first_block )
 	pbuffer->next_block_out = first_block;
 
 	while( filled-- ){
-		curr_block = &pbuffer->block[ pbuffer->next_block_out ];
+		curr_block = &block[ pbuffer->next_block_out ];
 		pbuffer->next_block_out = INC( pbuffer->next_block_out );
 		write_block_to_stdout();
 	}
@@@@ -734,7 +742,7 @@@@ write_block_to_stdout()
 		next_k = showevery;
 	}
 
-	if( (written = write( fdout, curr_block->data, curr_block->bytes )) != curr_block->bytes ){
+	if( (written = write( fdout, curr_block->data, *curr_block->bytes )) != *curr_block->bytes ){
 		report_proc();
 		perror( "write of data failed" );
 		fprintf( stderr, "bytes to write=%d, bytes written=%d, total written %10luK\n", curr_block->bytes, written, outk );
@@@@ -745,7 +753,7 @@@@ write_block_to_stdout()
 		usleep( write_pause );
 	}
 
-	out = curr_block->bytes / 1024;
+	out = *curr_block->bytes / 1024;
 	outk += out;
 	last_gb += out;
 
@


1.2
log
@fix
@
text
@d1 1
a1 1
$OpenBSD: patch-buffer_c,v 1.1 2004/11/18 13:49:20 naddy Exp $
d3 3
a5 2
+++ buffer.c	Sat May 22 23:27:19 2010
@@@@ -118,6 +118,7 @@@@
d48 9
a56 1
@@@@ -533,8 +535,13 @@@@ get_buffer()
d72 1
a72 1
@@@@ -592,7 +599,7 @@@@ get_next_free_block()
d81 1
a81 1
@@@@ -605,7 +612,7 @@@@ fill_block()
d90 1
a90 1
@@@@ -631,10 +638,10 @@@@ fill_block()
d103 1
a103 1
@@@@ -642,7 +649,7 @@@@ fill_block()
d112 1
a112 1
@@@@ -697,14 +704,14 @@@@ get_next_filled_block()
d129 1
a129 1
@@@@ -714,7 +721,7 @@@@ write_blocks_to_stdout( filled, first_block )
d138 1
a138 1
@@@@ -734,7 +741,7 @@@@ write_block_to_stdout()
d147 1
a147 1
@@@@ -745,7 +752,7 @@@@ write_block_to_stdout()
@


1.1
log
@Restore function: do not assume that shmat() returns the same address
in parent and child.  From Yoshihiro Ota <ota@@j.email.ne.jp>.
@
text
@d1 1
a1 1
$OpenBSD$
d3 11
a13 2
+++ buffer.c	Wed Nov 17 15:55:05 2004
@@@@ -168,7 +168,7 @@@@ int max_shmem = DEF_SHMEM;
d22 1
a22 1
@@@@ -185,12 +185,13 @@@@ struct buffer {
d38 1
a38 1
@@@@ -447,7 +448,7 @@@@ buffer_allocate()
d47 1
a47 1
@@@@ -533,8 +534,13 @@@@ get_buffer()
d63 1
a63 1
@@@@ -592,7 +598,7 @@@@ get_next_free_block()
d72 1
a72 1
@@@@ -605,7 +611,7 @@@@ fill_block()
d81 1
a81 1
@@@@ -631,10 +637,10 @@@@ fill_block()
d94 1
a94 1
@@@@ -642,7 +648,7 @@@@ fill_block()
d103 1
a103 1
@@@@ -697,14 +703,14 @@@@ get_next_filled_block()
d120 1
a120 1
@@@@ -714,7 +720,7 @@@@ write_blocks_to_stdout( filled, first_bl
d129 1
a129 1
@@@@ -734,7 +740,7 @@@@ write_block_to_stdout()
d138 1
a138 1
@@@@ -745,7 +751,7 @@@@ write_block_to_stdout()
@

