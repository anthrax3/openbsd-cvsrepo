head	1.3;
access;
symbols
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.1.0.34
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.32
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.30
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.28
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.26
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.24
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.22
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.20
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.18
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.16
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.14
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.12
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.10
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.8
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.6
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.4
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2012.10.24.13.22.35;	author ajacoutot;	state dead;
branches;
next	1.2;

1.2
date	2010.11.03.06.56.37;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2003.02.25.14.35.43;	author brad;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.02.25.14.43.40;	author brad;	state Exp;
branches;
next	;


desc
@@


1.3
log
@These ports have been unhooked for a while and replaced by coreutils, so
remove them.

ok naddy@@
@
text
@$OpenBSD: patch-src_remove_c,v 1.2 2010/11/03 06:56:37 jasper Exp $
--- src/remove.c.orig	Sun Feb 18 17:17:32 2001
+++ src/remove.c	Wed Nov  3 07:55:57 2010
@@@@ -433,10 +433,13 @@@@ same_file (const char *file_1, const char *file_2)
 
 
 /* Recursively remove all of the entries in the current directory.
-   Return an indication of the success of the operation.  */
+   Return an indication of the success of the operation.
+   CWD_DEV_INO must store the device and inode numbers of the
+   current working directory.  */
 
 static enum RM_status
-remove_cwd_entries (const struct rm_options *x)
+remove_cwd_entries (const struct rm_options *x,
+                   struct dev_ino const *cwd_dev_ino)
 {
   /* NOTE: this is static.  */
   static DIR *dirp = NULL;
@@@@ -549,7 +552,7 @@@@ remove_cwd_entries (const struct rm_options *x)
 	  /* CAUTION: after this call to rm, DP may not be valid --
 	     it may have been freed due to a close in a recursive call
 	     (through rm and remove_dir) to this function.  */
-	  tmp_status = rm (&fs, 0, x);
+         tmp_status = rm (&fs, 0, x, cwd_dev_ino);
 
 	  /* Update status.  */
 	  if (tmp_status > status)
@@@@ -664,12 +667,14 @@@@ remove_file (struct File_spec *fs, const struct rm_opt
    FIXME: describe need_save_cwd parameter.  */
 
 static enum RM_status
-remove_dir (struct File_spec *fs, int need_save_cwd, const struct rm_options *x)
+remove_dir (struct File_spec *fs, int need_save_cwd,
+           struct rm_options const *x, struct dev_ino const *cwd_dev_ino)
 {
   enum RM_status status;
   struct saved_cwd cwd;
   char *dir_name = fs->filename;
   const char *fmt = NULL;
+  struct dev_ino tmp_cwd_dev_ino;
 
   if (!x->recursive)
     {
@@@@ -738,6 +743,9 @@@@ was replaced with either another directory or a link t
 	       (unsigned long)(sb.st_dev),
 	       (unsigned long)(sb.st_ino));
       }
+
+    tmp_cwd_dev_ino.st_dev = sb.st_dev;
+    tmp_cwd_dev_ino.st_ino = sb.st_ino;
   }
 
   push_dir (dir_name);
@@@@ -747,7 +755,7 @@@@ was replaced with either another directory or a link t
      remove_cwd_entries may close the directory.  */
   ASSIGN_STRDUPA (dir_name, dir_name);
 
-  status = remove_cwd_entries (x);
+  status = remove_cwd_entries (x, &tmp_cwd_dev_ino);
 
   pop_dir ();
 
@@@@ -761,11 +769,34 @@@@ was replaced with either another directory or a link t
 	}
       free_cwd (&cwd);
     }
-  else if (chdir ("..") < 0)
+  else
     {
-      error (0, errno, _("cannot change back to directory %s via `..'"),
-	     quote (full_filename (dir_name)));
-      return RM_ERROR;
+      struct stat sb;
+      if (chdir ("..") < 0)
+       {
+         error (0, errno, _("cannot change back to directory %s via `..'"),
+                quote (full_filename (dir_name)));
+         return RM_ERROR;
+       }
+
+      if (lstat (".", &sb))
+       error (EXIT_FAILURE, errno,
+              _("cannot lstat `.' in %s"), quote (full_filename (".")));
+
+      if (!SAME_INODE (sb, *cwd_dev_ino))
+       {
+         error (EXIT_FAILURE, 0,
+              _("ERROR: the directory %s initially had device/inode\n\
+numbers %lu/%lu, but now (after changing into at least one subdirectory\n\
+and changing back via `..'), the numbers for `.' are %lu/%lu.\n\
+That means that while rm was running, a partially-removed subdirectory\n\
+was moved to a different position in the file system hierarchy."),
+                quote (full_filename (".")),
+                (unsigned long)(cwd_dev_ino->st_dev),
+                (unsigned long)(cwd_dev_ino->st_ino),
+                (unsigned long)(sb.st_dev),
+                (unsigned long)(sb.st_ino));
+       }
     }
 
   if (x->interactive)
@@@@ -814,10 +845,13 @@@@ was replaced with either another directory or a link t
    things.  Return RM_OK if it is removed, and RM_ERROR or RM_USER_DECLINED
    if not.  If USER_SPECIFIED_NAME is non-zero, then the name part of FS may
    be `.', `..', or may contain slashes.  Otherwise, it must be a simple file
-   name (and hence must specify a file in the current directory).  */
+   name (and hence must specify a file in the current directory).
+   CWD_DEV_INO must store the device and inode numbers of the
+   current working directory.  */
 
 enum RM_status
-rm (struct File_spec *fs, int user_specified_name, const struct rm_options *x)
+rm (struct File_spec *fs, int user_specified_name,
+    struct rm_options const *x, struct dev_ino const *cwd_dev_ino)
 {
   mode_t filetype_mode;
 
@@@@ -899,7 +933,7 @@@@ The following two directories have the same inode numb
       if (need_save_cwd)
 	need_save_cwd = (strchr (fs->filename, '/') != NULL);
 
-      status = remove_dir (fs, need_save_cwd, x);
+      status = remove_dir (fs, need_save_cwd, x, cwd_dev_ino);
 
 #ifdef ENABLE_CYCLE_CHECK
       {
@


1.2
log
@- regen patches, add missing rcs id's
@
text
@d1 1
a1 1
$OpenBSD: patch-src_remove_c,v 1.1 2003/02/25 14:35:43 brad Exp $
@


1.1
log
@A race condition in the recursive use of 'rm' and 'mv' in fileutils 4.1 and
earlier could allow local users to delete files and directories (as the user
running fileutils) if the user has write access to part of the tree being
moved or deleted.

http://online.securityfocus.com/archive/1/260936
@
text
@d1 4
a4 4
$OpenBSD$
--- src/remove.c.orig	Sun Feb 18 11:17:32 2001
+++ src/remove.c	Mon Feb 24 23:21:17 2003
@@@@ -433,10 +433,13 @@@@ same_file (const char *file_1, const cha
d20 1
a20 1
@@@@ -549,7 +552,7 @@@@ remove_cwd_entries (const struct rm_opti
d29 1
a29 1
@@@@ -664,12 +667,14 @@@@ remove_file (struct File_spec *fs, const
d45 1
a45 1
@@@@ -738,6 +743,9 @@@@ was replaced with either another directo
d55 1
a55 1
@@@@ -747,7 +755,7 @@@@ was replaced with either another directo
d64 1
a64 1
@@@@ -761,11 +769,34 @@@@ was replaced with either another directo
d103 1
a103 1
@@@@ -814,10 +845,13 @@@@ was replaced with either another directo
d119 1
a119 1
@@@@ -899,7 +933,7 @@@@ The following two directories have the s
@


1.1.2.1
log
@A race condition in the recursive use of 'rm' and 'mv' in fileutils 4.1 and
earlier could allow local users to delete files and directories (as the user
running fileutils) if the user has write access to part of the tree being
moved or deleted.

http://online.securityfocus.com/archive/1/260936
@
text
@d1 1
a1 1
$OpenBSD: patch-src_remove_c,v 1.1 2003/02/25 14:35:43 brad Exp $
@

