head	1.16;
access;
symbols
	OPENBSD_6_0:1.15.0.2
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.11.0.12
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.8
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.6
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.4
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	OPENBSD_5_3:1.9.0.8
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.6
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.4
	OPENBSD_5_0:1.9.0.2
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	OPENBSD_4_8:1.4.0.10
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.8
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.6
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.4
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.2
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.2.0.2
	OPENBSD_4_3_BASE:1.2
	chl_20071003:1.1.1.1
	chl:1.1.1;
locks; strict;
comment	@# @;


1.16
date	2017.03.14.02.36.36;	author jca;	state Exp;
branches;
next	1.15;
commitid	nFYMMsl7ZD0uc7vQ;

1.15
date	2016.04.04.10.56.46;	author naddy;	state Exp;
branches;
next	1.14;
commitid	mrsBSAt46nqoMVab;

1.14
date	2016.02.21.16.17.26;	author jsg;	state Exp;
branches;
next	1.13;
commitid	IZQsfcjAwN1evvTh;

1.13
date	2015.12.03.09.22.18;	author sthen;	state Exp;
branches;
next	1.12;
commitid	5hu1LfyE8abvpKXy;

1.12
date	2015.11.19.00.55.23;	author mmcc;	state Exp;
branches;
next	1.11;
commitid	0aFaIs5ZiP9oM3R2;

1.11
date	2013.03.21.08.46.33;	author ajacoutot;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.11.11.23.59;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.26.06.07.33;	author ajacoutot;	state Exp;
branches;
next	1.8;

1.8
date	2010.10.28.10.17.54;	author steven;	state Exp;
branches;
next	1.7;

1.7
date	2010.10.28.09.04.19;	author steven;	state Exp;
branches;
next	1.6;

1.6
date	2010.10.27.09.49.12;	author steven;	state Exp;
branches;
next	1.5;

1.5
date	2010.10.18.20.52.10;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2008.07.01.10.10.24;	author chl;	state Exp;
branches;
next	1.3;

1.3
date	2008.05.21.19.14.50;	author chl;	state Exp;
branches;
next	1.2;

1.2
date	2007.11.07.19.11.54;	author chl;	state Exp;
branches;
next	1.1;

1.1
date	2007.10.03.13.48.17;	author chl;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2007.10.03.13.48.17;	author chl;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Use lang/gcc on arm
@
text
@# $OpenBSD: Makefile,v 1.15 2016/04/04 10:56:46 naddy Exp $

BROKEN-hppa=		__sync_lock_test_and_set_4 in zzuf_mutex_lock

COMMENT=		transparent application input fuzzer

VERSION=		0.14
DISTNAME=		zzuf-${VERSION}
REVISION=		0
CATEGORIES=		misc security

MAINTAINER=		Michael McConville <mmcco@@mykolab.com>

MASTER_SITES=		https://github.com/samhocevar/zzuf/releases/download/v${VERSION}/

# WTFPL
PERMIT_PACKAGE_CDROM=	Yes

WANTLIB=		c m

MODULES=		gcc4
MODGCC4_ARCHS=		arm

CONFIGURE_STYLE=	gnu
# Necessary?
USE_GROFF=		Yes

.include <bsd.port.mk>
@


1.15
log
@g/c PFRAG.shared; ok mmcc@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.14 2016/02/21 16:17:26 jsg Exp $
a2 1
BROKEN-arm=		__sync_lock_test_and_set_4 in zzuf_mutex_lock
d20 3
@


1.14
log
@Don't attempt to build on arm.  sync atomic builtins required.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.13 2015/12/03 09:22:18 sthen Exp $
d10 1
@


1.13
log
@broken on hppa: __sync_lock_test_and_set_4 in zzuf_mutex_lock()
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.12 2015/11/19 00:55:23 mmcc Exp $
d3 1
@


1.12
log
@Update to 0.14.

ok sthen@@, zhuk@@
@
text
@d1 3
a3 1
# $OpenBSD: Makefile,v 1.11 2013/03/21 08:46:33 ajacoutot Exp $
@


1.11
log
@USE_LIBTOOL=Yes is the default now.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.10 2013/03/11 11:23:59 espie Exp $
d5 7
a11 4
DISTNAME=		zzuf-0.13
REVISION=		2
CATEGORIES=		misc
MASTER_SITES=		http://libcaca.zoy.org/files/zzuf/
d19 1
a20 7

pre-configure:
	perl -pi -e 's/zzcat/zzufcat/g' ${WRKSRC}/doc/zzcat.1.in

post-install:
	cd ${PREFIX}/bin && mv zzcat zzufcat
	cd ${PREFIX}/man/man1 && mv zzcat.1 zzufcat.1
@


1.10
log
@PERMIT_* / REGRESS->TEST sweep
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.9 2011/07/26 06:07:33 ajacoutot Exp $
a16 1
USE_LIBTOOL=		Yes
@


1.9
log
@Cleanups and tweak COMMENT.

from Brad.
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.8 2010/10/28 10:17:54 steven Exp $
a11 3
PERMIT_PACKAGE_FTP=	Yes
PERMIT_DISTFILES_CDROM= Yes
PERMIT_DISTFILES_FTP=	Yes
@


1.8
log
@drop the conflict and rename zzuf's zzcat utility to zzufcat instead

ok naddy@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.7 2010/10/28 09:04:19 steven Exp $
d3 1
a3 1
COMMENT=		zzuf is a transparent application input fuzzer
d6 1
a6 1
REVISION=		1
d10 1
a10 1
# License: WTFPL
d19 2
a20 2
USE_GROFF =		Yes
USE_LIBTOOL =		Yes
@


1.7
log
@zziplib and zzuf conflict (zzcat executable)

pointed out by naddy@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.6 2010/10/27 09:49:12 steven Exp $
d6 1
a6 1
REVISION=		0
d21 7
@


1.6
log
@update to 0.13

 * various fixes for Linux, FreeBSD, OS X and OpenBSD libc calls.
 * network host filtering support.
 * support for memory limits on OS X.
 * massive testsuite improvements.
 * support most cat options in zzcat, which is now fully programmable.

from dawedawe at gmx.de

set USE_LIBTOOL while here
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.4 2008/07/01 10:10:24 chl Exp $
d6 1
@


1.5
log
@USE_GROFF=Yes
@
text
@d5 1
a5 1
DISTNAME=		zzuf-0.12
d18 2
a19 1
USE_GROFF =	Yes
@


1.4
log
@update to zzuf-0.12

ok jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.3 2008/05/21 19:14:50 chl Exp $
d18 1
@


1.3
log
@update to zzuf-0.11

ok jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.2 2007/11/07 19:11:54 chl Exp $
d5 1
a5 1
DISTNAME=		zzuf-0.11
@


1.2
log
@update to zzuf-0.10

ok jasper@@
@
text
@d1 1
a1 1
# $OpenBSD: Makefile,v 1.1.1.1 2007/10/03 13:48:17 chl Exp $
d5 1
a5 1
DISTNAME=		zzuf-0.10
d7 1
a7 1
MASTER_SITES=		http://sam.zoy.org/zzuf/
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
# $OpenBSD$
d5 1
a5 1
DISTNAME=		zzuf-0.9
@


1.1.1.1
log
@import zzuf 0.9

zzuf is a transparent application input fuzzer. Its purpose is to find
bugs in applications by corrupting their user-contributed data (which
more than often comes from untrusted sources on the Internet). It works
by intercepting file and network operations and changing random bits in
the program's input. zzuf's behaviour is deterministic, making it easier
to reproduce bugs. Its main areas of use are:

* quality assurance: use zzuf to test existing software, or integrate it
  into your own software's testsuite
* security: very often, segmentation faults or memory corruption issues
  mean a potential security hole, zzuf helps exposing some of them

with help and ok jasper@@

@
text
@@
