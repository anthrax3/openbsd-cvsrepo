head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.54
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.52
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.48
	OPENBSD_5_9_BASE:1.1
	OPENBSD_5_8:1.1.0.50
	OPENBSD_5_8_BASE:1.1
	OPENBSD_5_7:1.1.0.46
	OPENBSD_5_7_BASE:1.1
	OPENBSD_5_6:1.1.0.44
	OPENBSD_5_6_BASE:1.1
	OPENBSD_5_5:1.1.0.42
	OPENBSD_5_5_BASE:1.1
	OPENBSD_5_4:1.1.0.40
	OPENBSD_5_4_BASE:1.1
	OPENBSD_5_3:1.1.0.38
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.36
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.34
	OPENBSD_5_0:1.1.0.32
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.30
	OPENBSD_4_9_BASE:1.1
	OPENBSD_4_8:1.1.0.28
	OPENBSD_4_8_BASE:1.1
	OPENBSD_4_7:1.1.0.26
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.24
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.22
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.20
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.18
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.16
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.14
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.12
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.10
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.8
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.6
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.4
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.2
	OPENBSD_3_5_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2003.11.22.00.56.58;	author espie;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Add shm flavor, to use with brltty
ok brad@@
@
text
@$OpenBSD$
--- window.c.orig	2003-09-08 16:27:21.000000000 +0200
+++ window.c	2003-11-17 23:37:54.000000000 +0100
@@@@ -1993,6 +1993,59 @@@@ char *data;
     }
 }
 
+
+#ifdef IPC_EXPORT_IMAGE
+
+void
+CopyWinImage( p, dest )
+struct win *p;
+char *dest;
+{
+  register char *s, *d = dest, *m;
+  register int x, y;
+  struct display *display = p->w_pdisplay;
+  int st = (display) ? D_status : 0;
+
+  if( p && p->w_mlines )
+    {
+      *d++ = p->w_width;                        /* scrdim x */
+      *d++ = p->w_height;                       /* scrdim y */
+      *d++ = (st) ? D_status_len : p->w_x;      /* csrpos x */
+      *d++ = (st) ? STATLINE : p->w_y;          /* csrpos y */
+      /* copy window image to buffer */
+      for( y = 0; y < p->w_height; y++ )
+        {
+          s = p->w_mlines[y].image;
+          x = p->w_width;
+          if( st && y == STATLINE )
+            for( m = D_status_lastmsg; *m && x; *d++ = *m++, s++, x-- );
+          for( ; x; *d++ = *s++, x-- );
+        }
+      /* copy attributes from window image to buffer */
+      for( y = 0; y < p->w_height; y++ )
+        {
+          s = p->w_mlines[y].attr;
+          x = p->w_width;
+          if( st && y == STATLINE )
+            for( ; x; *d++ = 0, s++, x-- );
+          for( ; x; *d++ = *s++, x-- );
+        }
+    }
+  else
+    {
+      /* no window pointer */
+      *d++ = 80;   /* scrdim x */
+      *d++ = 1;    /* scrdim y */
+      *d++ = 0;    /* csrpos x */
+      *d++ = 0;    /* csrpos y */
+      strcpy( d, "*** screen: no window pointer ***" );
+      memset( d+strlen(d), ' ', 80);
+    }
+}
+
+#endif	/* IPC_EXPORT_IMAGE */
+ 
+
 #ifdef ZMODEM
 
 static int
@
