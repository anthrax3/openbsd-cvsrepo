head	1.6;
access;
symbols
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_4:1.1.0.2
	OPENBSD_2_4_BASE:1.1;
locks; strict;
comment	@# @;


1.6
date	2000.09.01.19.37.53;	author brad;	state dead;
branches;
next	1.5;

1.5
date	99.12.31.23.28.24;	author brad;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	99.11.30.22.59.19;	author brad;	state dead;
branches;
next	1.3;

1.3
date	99.08.10.23.48.43;	author brad;	state Exp;
branches;
next	1.2;

1.2
date	99.02.20.00.45.55;	author fgsch;	state dead;
branches;
next	1.1;

1.1
date	98.07.28.21.18.48;	author marc;	state Exp;
branches;
next	;

1.5.2.1
date	2000.09.16.20.13.42;	author marc;	state dead;
branches;
next	;


desc
@@


1.6
log
@upgrade to screen 3.9.8;
--
fixes a format string bug, possible root compromise

Pointed out by: markus@@, deraadt@@ and Gregor Longariva
<longariva@@informatik.uni-erlangen.de>
@
text
@--- teln.c.orig	Fri Dec 31 17:53:35 1999
+++ teln.c	Fri Dec 31 17:53:54 1999
@@@@ -28,6 +28,7 @@@@
 #include <sys/socket.h>
 #include <fcntl.h>
 #include <netdb.h>
+#include <netinet/in.h>
 #include <arpa/inet.h>
 
 #include "config.h"
@


1.5
log
@- include netinet/in.h before arpa/inet.h to avoid a couple of compiler
warnings in teln.c
- mkdir -> ${INSTALL_DATA_DIR}
@
text
@@


1.5.2.1
log
@
Bring -current version of screen into 2.7 branch to resolve security
issue reported on bugtraq and elsewhere.  Patches and testing courtesy
of <rguyom@@321.net>.   Thanks.
@
text
@@


1.4
log
@upgrade to screen 3.9.5; ok'd by turan@@
@
text
@d1 8
a8 31
--- window.c.orig	Mon Aug  9 23:55:06 1999
+++ window.c	Tue Aug 10 00:00:54 1999
@@@@ -447,15 +447,25 @@@@
     return f;
 
 #ifdef PTYGROUP
-  (void) chown(*namep, real_uid, PTYGROUP);
+  if (chown(*namep, real_uid, PTYGROUP) && !eff_uid)
 #else
-  (void) chown(*namep, real_uid, real_gid);
+  if (chown(*namep, real_uid, real_gid) && !eff_uid)
 #endif
+    {
+      Msg(errno, "chown tty");
+      close(f);
+      return -1;
+    }
 #ifdef UTMPOK
-  (void) chmod(*namep, lflag ? TtyMode : (TtyMode & ~022));
+  if (chmod(*namep, lflag ? TtyMode : (TtyMode & ~022)) && !eff_uid)
 #else
-  (void) chmod(*namep, TtyMode);
+  if (chmod(*namep, TtyMode) && !eff_uid)
 #endif
+    {
+      Msg(errno, "chmod tty");
+      close(f);
+      return -1;
+    }
   return f;
 }
d10 1
@


1.3
log
@- patch to fix chflags bug as posted on BugTraq
@
text
@@


1.2
log
@removed unneeded patch.
@
text
@d1 30
a30 4
--- fileio.c.~1~	Thu May  1 08:50:25 1997
+++ fileio.c	Mon Jul 27 17:49:58 1998
@@@@ -291,6 +291,52 @@@@
   DoCommand(args);
a32 58
+/*
+ * Attempt to determine if we're opening the named file or if it
+ * has been replaced by a symbolic link to someplace not nice.
+ * Algorithm is:
+ *
+ *	1) lstat( name );
+ *		if a symbolic link don't even try the open
+ *	2) fd = open( name );
+ *	3) fstat( fd );
+ *	4) lstat( name );
+ *	5) if fstat st_dev and st_ino don't match the lstat values
+ *		then we lost a race and someone added a link between
+ *		the first lstat and the open.  Close the file and
+ *		log an error.  Note: this can still cause problems;
+ *		e.g. a link to /dev/st0 will cause a tape to be
+ *		rewound when the file is closed.
+ */
+static FILE *
+NoLinkOpen( char * fn, char * mode )
+{
+  struct stat linkstat;
+  struct stat filestat;
+  FILE * f;
+
+  if ( lstat( fn, &linkstat ) == 0 &&
+       linkstat.st_mode == S_IFLNK )
+    goto err;
+
+  f = fopen( fn, mode );
+  if ( ! f )
+    return 0;
+
+  if ( fstat( fileno( f ), &filestat ) == 0 &&
+       lstat( fn, &linkstat ) == 0 &&
+       linkstat.st_mode != S_IFLNK &&
+       linkstat.st_dev == filestat.st_dev &&
+       linkstat.st_ino == filestat.st_ino )
+    return f;
+
+  fclose( f );
+
+ err:
+  Msg(0, "Warning: file not opened, \"%s\" is a symbolic link.", fn);
+  return 0;
+}
+
 void
 WriteFile(dump)
 int dump;
@@@@ -337,7 +383,7 @@@@
   if (UserContext() > 0)
     {
       debug("Writefile: usercontext\n");
-      if ((f = fopen(fn, mode)) == NULL)
+      if ((f = NoLinkOpen(fn, mode)) == NULL)
 	{
 	  debug2("WriteFile: fopen(%s,\"%s\") failed\n", fn, mode);
 	  UserReturn(0);
@


1.1
log
@add patch that stops screen from writing to a file when the last component
of the filename is  a symbolic link. Note: in some cases the file may still
be opened which can in itself be a problem.  This solves the security
hole where the bad-guy creates a symbolic link named /tmp/screen-exchange
pointing to a file that s/he wishes root to clobber.
@
text
@@

