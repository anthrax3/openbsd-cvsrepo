head	1.3;
access;
symbols
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.1.0.2
	OPENBSD_2_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2000.09.01.19.37.53;	author brad;	state dead;
branches;
next	1.2;

1.2
date	99.11.30.22.59.19;	author brad;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.08.24.23.01.33;	author espie;	state Exp;
branches;
next	;

1.2.2.1
date	2000.09.16.20.13.42;	author marc;	state dead;
branches;
next	;


desc
@@


1.3
log
@upgrade to screen 3.9.8;
--
fixes a format string bug, possible root compromise

Pointed out by: markus@@, deraadt@@ and Gregor Longariva
<longariva@@informatik.uni-erlangen.de>
@
text
@--- pty.c.orig	Fri Aug 27 06:00:12 1999
+++ pty.c	Tue Nov  9 22:49:52 1999
@@@@ -32,6 +32,23 @@@@
 #include "config.h"
 #include "screen.h"
 
+#if HAVE_DIRENT_H
+# include <dirent.h>
+# define NAMLEN(dirent) strlen((dirent)->d_name)
+#else
+# define dirent direct
+# define NAMLEN(dirent) (dirent)->d_namlen
+# if SYSNDIR
+#  include <sys/ndir.h>
+# endif
+# if SYSDIR
+#  include <sys/dir.h>
+# endif
+# if NDIR
+#  include <ndir.h>
+# endif
+#endif
+
 #ifndef sun
 # include <sys/ioctl.h>
 #endif
@@@@ -315,25 +332,25 @@@@
 OpenPTY(ttyn)
 char **ttyn;
 {
-  register char *p, *q, *l, *d;
-  register int f;
+  DIR *devdir;
+  struct dirent *candidate;
+  int f;
 
-  debug("OpenPTY: Using BSD style ptys.\n");
-  strcpy(PtyName, PtyProto);
-  strcpy(TtyName, TtyProto);
-  for (p = PtyName; *p != 'X'; p++)
-    ;
-  for (q = TtyName; *q != 'X'; q++)
-    ;
-  for (l = PTYRANGE0; (*p = *l) != '\0'; l++)
+  debug("OpenPTY: Using BSD style ptys, dynamic range.\n");
+
+  devdir = opendir("/dev");
+  if (!devdir)
+    return -1;
+  while (candidate = readdir(devdir))
     {
-      for (d = PTYRANGE1; (p[1] = *d) != '\0'; d++)
+      if (NAMLEN(candidate) == 5 && strncmp(candidate->d_name, "pty", 3) == 0)
 	{
+	  sprintf(PtyName, "/dev/%s", candidate->d_name);
 	  debug1("OpenPTY tries '%s'\n", PtyName);
 	  if ((f = open(PtyName, O_RDWR | O_NOCTTY)) == -1)
 	    continue;
-	  q[0] = *l;
-	  q[1] = *d;
+	  strcpy(TtyName, PtyName);
+	  TtyName[5] = 't';
 	  if (eff_uid && access(TtyName, R_OK | W_OK))
 	    {
 	      close(f);
@@@@ -356,9 +373,11 @@@@
 #endif
 	  initmaster(f);
 	  *ttyn = TtyName;
+	  closedir(devdir);
 	  return f;
 	}
     }
+  closedir(devdir);
   return -1;
 }
 #endif
@


1.2
log
@upgrade to screen 3.9.5; ok'd by turan@@
@
text
@@


1.2.2.1
log
@
Bring -current version of screen into 2.7 branch to resolve security
issue reported on bugtraq and elsewhere.  Patches and testing courtesy
of <rguyom@@321.net>.   Thanks.
@
text
@@


1.1
log
@Patch to remove compile-time dependency on existing ptys.
@
text
@d1 3
a3 3
--- pty.c.orig	Wed Nov 18 21:19:14 1998
+++ pty.c	Sat Aug 21 13:12:06 1999
@@@@ -32,6 +32,24 @@@@
d7 1
a7 1
+#if DIRENT
a23 1
+
d25 1
a25 1
 #include <sys/ioctl.h>
d27 1
a27 1
@@@@ -292,26 +310,26 @@@@
a35 2
+
+  debug("OpenPTY: Using BSD style ptys, dynamic range.\n");
d45 2
a52 3
-	{
-	  debug1("OpenPTY tries '%s'\n", PtyName);
-	  if ((f = open(PtyName, O_RDWR | O_NOCTTY)) == -1)
d54 4
a57 4
+        {
+          sprintf(PtyName, "/dev/%s", candidate->d_name);
+          debug1("OpenPTY tries '%s'\n", PtyName);
+          if ((f = open(PtyName, O_RDWR | O_NOCTTY)) == -1)
d61 1
a61 2
-	  if (eff_uid && access(TtyName, R_OK | W_OK))
+          strcpy(TtyName, PtyName);
d63 1
a63 1
+          if (eff_uid && access(TtyName, R_OK | W_OK))
d66 1
a66 24
 	      continue;
@@@@ -320,22 +338,24 @@@@
 	  /* Hack to ensure that the slave side of the pty is
 	   * unused. May not work in anything other than SunOS4.1
 	   */
-	    {
-	      int pgrp;
+	  {
+	    int pgrp;
 
-	      /* tcgetpgrp does not work (uses TIOCGETPGRP)! */
-	      if (ioctl(f, TIOCGPGRP, (char *)&pgrp) != -1 || errno != EIO)
-		{
-		  close(f);
-		  continue;
-		}
-	    }
+	    /* tcgetpgrp does not work (uses TIOCGETPGRP)! */
+	    if (ioctl(f, TIOCGPGRP, (char *)&pgrp) != -1 || errno != EIO)
+              {	
+	        close(f);
+	        continue;
+	      }
+	  }
d68 1
a68 1
 	  initpty(f);
@

