head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.6
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.4
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@# @;


1.1
date	2015.12.23.10.53.53;	author bluhm;	state Exp;
branches;
next	;
commitid	mSNKIWDrDNYMhaAY;


desc
@@


1.1
log
@Update blink1 to 1.98.  Replace sprintf() and strcpy() with snprintf()
and strncpy() to avoid linker warnings.  Fix a bus error that occurs
when pulling the blink(1) device from the USB port while running
blink1-tool --blink.
OK jung@@
@
text
@$OpenBSD$
--- commandline/blink1-lib-lowlevel-hidapi.h.orig	Wed Sep  9 03:06:56 2015
+++ commandline/blink1-lib-lowlevel-hidapi.h	Wed Dec 23 00:00:26 2015
@@@@ -20,8 +20,10 @@@@ int blink1_enumerateByVidPid(int vid, int pid)
         if( (cur_dev->vendor_id != 0 && cur_dev->product_id != 0) &&  
             (cur_dev->vendor_id == vid && cur_dev->product_id == pid) ) { 
             if( cur_dev->serial_number != NULL ) { // can happen if not root
-                strcpy( blink1_infos[p].path,   cur_dev->path );
-                sprintf( blink1_infos[p].serial, "%ls", cur_dev->serial_number);
+                strncpy( blink1_infos[p].path, cur_dev->path,
+                    sizeof(blink1_infos[p].path));
+                snprintf(blink1_infos[p].serial, sizeof(blink1_infos[p].serial),
+                    "%ls", cur_dev->serial_number);
                 //wcscpy( blink1_infos[p].serial, cur_dev->serial_number );
                 //uint32_t sn = wcstol( cur_dev->serial_number, NULL, 16);
                 uint32_t serialnum = strtol( blink1_infos[p].serial, NULL, 16);
@@@@ -104,7 +106,7 @@@@ blink1_device* blink1_openById( uint32_t i ) 
     LOG("blink1_openById: %d \n", i );
     if( i > blink1_max_devices ) { // then i is a serial number not an array index
         char serialstr[serialstrmax];
-        sprintf( serialstr, "%X", i);  // convert to wchar_t* 
+        snprintf(serialstr, sizeof(serialstr), "%X", i); // convert to wchar_t*
         return blink1_openBySerial( serialstr );  
     } 
     else {
@@@@ -189,7 +191,7 @@@@ char *blink1_error_msg(int errCode)
         case USBOPEN_ERR_NOTFOUND:  return "The specified device was not found";
         case USBOPEN_ERR_IO:        return "Communication error with device";
         default:
-            sprintf(buf, "Unknown USB error %d", errCode);
+            snprintf(buf, sizeof(buf), "Unknown USB error %d", errCode);
             return buf;
     }
     */
@
