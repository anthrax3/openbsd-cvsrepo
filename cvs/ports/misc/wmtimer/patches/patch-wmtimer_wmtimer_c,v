head	1.4;
access;
symbols
	OPENBSD_6_0:1.4.0.26
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.22
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.24
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.20
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.18
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.16
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.14
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.12
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.10
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.26
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.22
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.20
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.18
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.16
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.14
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.12
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.10
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.8
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.6
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.4
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.2.0.8
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.6
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.4
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.2
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.1.1.1.0.4
	OPENBSD_3_0_BASE:1.1.1.1
	OPENBSD_2_9_TRACKING_SWITCH:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.2
	OPENBSD_2_9_BASE:1.1.1.1
	naddy_20010111:1.1.1.1
	naddy:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2010.03.25.06.22.41;	author jasper;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.19.12.22.41;	author wilfried;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.26.22.54.36;	author wilfried;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.11.22.45.21;	author naddy;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.01.11.22.45.21;	author naddy;	state Exp;
branches;
next	;


desc
@@


1.4
log
@- update wmtimer to 2.92, which switches it to gtk2

ok wilfried@@ (MAINTAINER)
@
text
@$OpenBSD: patch-wmtimer_wmtimer_c,v 1.3 2003/12/19 12:22:41 wilfried Exp $
--- wmtimer/wmtimer.c.orig	Thu Jan 29 03:45:48 2004
+++ wmtimer/wmtimer.c	Wed Mar 24 17:15:25 2010
@@@@ -84,7 +84,7 @@@@ configState configSt;
 int main(int argc, char *argv[])
 {
   int prevSec = 0;
-  long now;
+  time_t now;
   struct tm *thisTime;
   int wminet_mask_width = 64;
   int wminet_mask_height = 64;
@@@@ -239,7 +239,7 @@@@ void parseArgs(int argc, char *argv[])
 	  action.bell = 1;
 	  break;
 	case 'e':
-	  strcpy(command, argv[argIndex+1]);
+	  strlcpy(command, argv[argIndex+1], sizeof(command));
 	  action.command = 1;
 	  break;
 	case 't':
@@@@ -599,7 +599,7 @@@@ void callback(GtkWidget * widget, gpointer data)
   else if ((char *) data == "ok")
   {
     if (tmpAction.command)
-      strcpy(command, gtk_entry_get_text(GTK_ENTRY (entry)));
+      strlcpy(command, gtk_entry_get_text(GTK_ENTRY (entry)), sizeof(command));
 
     hour = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON (spinner1));
     min = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON (spinner2));
@


1.3
log
@update wmtimer to 2.9

bugfix and a couple of enhancements
new homepage
@
text
@d1 3
a3 3
$OpenBSD: patch-wmtimer_wmtimer_c,v 1.2 2001/10/26 22:54:36 wilfried Exp $
--- wmtimer/wmtimer.c.orig	2003-09-27 03:35:28.000000000 +0200
+++ wmtimer/wmtimer.c	2003-12-19 13:09:39.000000000 +0100
d13 3
a15 3
@@@@ -234,7 +234,7 @@@@ void parseArgs(int argc, char *argv[])
     action.bell = 1;
     break;
d22 1
a22 1
@@@@ -594,7 +594,7 @@@@ void callback(GtkWidget * widget, gpoint
@


1.2
log
@update to wmtimer-2.4

- Multi-threaded support added. Clock, timer and chronograph continue
  running while configure window is open.
- A couple small changes to the dockapp to make the characters 'I'
  and ':' appear better.
- Major rewrite/cleanup of the code from top to bottom.
- Improved configure state tracking. Program would give errors and
  crash if you clicked on the dockapp multiple times to open the
  config window.
- Added support for selecting font color on the command line.
@
text
@d1 4
a4 4
$OpenBSD: patch-wmtimer_wmtimer_c,v 1.1.1.1 2001/01/11 22:45:21 naddy Exp $
--- wmtimer/wmtimer.c.orig	Fri Oct 12 02:29:21 2001
+++ wmtimer/wmtimer.c	Sat Oct 27 00:38:53 2001
@@@@ -83,7 +83,7 @@@@ configState configSt;
d13 3
a15 3
@@@@ -221,7 +221,7 @@@@ void parseArgs(int argc, char *argv[])
 	  mode = CHRONO_ACTIVE;
 	  break;
d19 1
a19 1
 	  action = COMMAND;
d22 1
a22 1
@@@@ -552,7 +552,7 @@@@ void callback(GtkWidget * widget, gpoint
d25 1
a25 1
     if (tmpAction == COMMAND)
@


1.1
log
@Initial revision
@
text
@d1 14
a14 18
$OpenBSD: $
--- wmtimer/wmtimer.c.orig	Wed Dec 20 22:18:15 2000
+++ wmtimer/wmtimer.c	Thu Jan 11 17:20:19 2001
@@@@ -80,9 +80,9 @@@@ int main (int argc, char *argv[])
   int i;
   XEvent Event;
   int buttonStatus = -1;
-  long starttime;
-  long curtime;
-  long nexttime;
+  time_t starttime;
+  time_t curtime;
+  time_t nexttime;
   struct tm *time_struct;
   struct tm old_time_struct;
 
@@@@ -107,7 +107,7 @@@@ int main (int argc, char *argv[])
 	  mode = 3;
d17 3
a19 3
-	  strcpy (command, argv[i + 1]);
+	  strlcpy (command, argv[i + 1], sizeof(command));
 	  action = 1;
d22 6
a27 6
@@@@ -478,7 +478,7 @@@@ void callback (GtkWidget * widget, gpoin
   }
   if ((char *) data == "ok") {
     if (tmp_action == 1)
-      strcpy (command, gtk_entry_get_text (GTK_ENTRY (entry)));
+      strlcpy (command, gtk_entry_get_text (GTK_ENTRY (entry)), sizeof(command));
d29 2
a30 2
     ihr = gtk_spin_button_get_value_as_int (GTK_SPIN_BUTTON (spinner1));
     imin = gtk_spin_button_get_value_as_int (GTK_SPIN_BUTTON (spinner2));
@


1.1.1.1
log
@Import wmtimer 2.2.
Submitted by Peter Stromberg <home@@wilfried.net>.

WMTimer is a dockable alarm clock for WindowMaker which can
be run in alarm, countdown timer, or chronograph mode.  In
alarm or timer mode, you can either execute a command or
sound the system bell when the time is reached.  Wmtimer is
configurable through the command line or the GTK GUI.
@
text
@@
