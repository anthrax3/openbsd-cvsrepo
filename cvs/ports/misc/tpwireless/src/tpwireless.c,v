head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.34
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.30
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.32
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.28
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.26
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.24
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.22
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.20
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.18
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.16
	OPENBSD_5_0:1.2.0.14
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.12
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.10
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.8
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.4
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.2
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.1.1.1.0.14
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.12
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.10
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.8
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.6
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.4
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.2
	OPENBSD_3_7_BASE:1.1.1.1
	djm_20041004:1.1.1.1
	djm:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2008.05.15.18.47.48;	author djm;	state Exp;
branches;
next	1.1;

1.1
date	2004.10.04.01.09.08;	author djm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.10.04.01.09.08;	author djm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@tpwireless-0.2: several improvements from Tamas TEVESZ (ice AT extreme.hu),
most notably the ability to clear the magic bit and check without
modification.
@
text
@/*
 * OpenBSD program to set the magic bit in IBM Thinkpad BIOS that 
 * allows the use of any MiniPCI wireless card. Must be run as root. 
 * Tested on an X40, but may work on other Thinkpads with similar 
 * restrictions. OTOH Don't complain if it trashes your CMOS. 
 * This is a simple transliteration of the no-1802.com program found at 
 * http://www.srcf.ucam.org/~mjg59/thinkpad/hacks.html
 */

/*
 * Copyright (c) 2004 Damien Miller <djm@@mindrot.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#include <sys/types.h>
#include <machine/sysarch.h>
#include <machine/pio.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <err.h>

static void
usage(void)
{
	fprintf(stderr, 
"Usage: tpwireless [-cde]\n"
"  -c    Check BIOS bit to determine MiniPCI ID permission check state\n"
"  -d    Set BIOS bit to disable MiniPCI ID permission check\n"
"  -e    Clear BIOS bit to enable MiniPCI ID permission check\n");
}

int
main(int argc, char **argv)
{
	unsigned int before, towrite, after, ch;
	enum { TPW_NONE, TPW_SET, TPW_CLEAR, TPW_CHECK } action = TPW_NONE;

	while ((ch = getopt(argc, argv, "cde")) != -1) {
		switch(ch) {
		case 'c':
			action = TPW_CHECK;
			break;
		case 'd':
			action = TPW_SET;
			break;
		case 'e':
			action = TPW_CLEAR;
			break;
		default:
			usage();
			exit(1);
		}
	}

	if (action == TPW_NONE) {
		usage();
		exit(1);
	}

	if (i386_iopl(3) == -1)
		errx(1, "iopl");
	outb(0x70, 0x6a);
	before = inb(0x71);

	switch(action) {
	case TPW_SET:	
		printf("Setting BIOS bit to disable MiniPCI ID "
		    "permission check\n");
		towrite = before | 0x80;
		break;
	case TPW_CLEAR:
		printf("Clearing BIOS bit to enable MiniPCI ID "
		    "permission check\n");
		towrite = before & ~0x80;
		break;
	case TPW_CHECK:
		printf("MiniPCI checking is currently %s\n",
			(before & 0x80) == 0x80 ? "off" : "on");
		exit(0);
	default:
		errx(1, "Internal error");
	}

	printf("Before:    *0x6a = %02x\n", before);
	printf("Expecting: *0x6a = %02x\n", towrite);
	outb(0x71, towrite);
	outb(0x70, 0x6a);
	after = inb(0x71);
	printf("After:     *0x6a = %02x\n", after);

	if (after != towrite) {
		printf("Got unexpected value.\n");
		exit(1);
	}
	exit(0);
}

@


1.1
log
@Initial revision
@
text
@d30 2
d34 10
d47 24
a70 1
	unsigned int b;
a71 1
	printf("Setting BIOS bit to disable MiniPCI ID permission check\n");
d73 1
a73 1
		err(1, "iopl");
d75 20
a94 1
	b = inb(0x71);
d96 6
a101 4
	printf("Before: *0x6a = %02x\n", b);
	b |= 0x80;
	outb(0x71, b);
	printf("After:  *0x6a = %02x\n", b);
d103 5
a107 1
	return (0);
@


1.1.1.1
log
@Initial import of tpwireless:

tpwireless sets the magic bit in an IBM Thinkpad's BIOS to disable checking
of a MiniPCI wireless NIC's PCI IDs against the inbuilt list of allowed ones.
This allows one to use a non-IBM authorised NIC in a Thinkpad.

"looks fine" jolan@@
@
text
@@
