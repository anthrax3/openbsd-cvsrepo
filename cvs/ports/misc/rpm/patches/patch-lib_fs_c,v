head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.26
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.22
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.24
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.20
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.14
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.12
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.10
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.8
	OPENBSD_5_0:1.2.0.6
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.4
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.0.34
	OPENBSD_4_7_BASE:1.1
	OPENBSD_4_6:1.1.0.32
	OPENBSD_4_6_BASE:1.1
	OPENBSD_4_5:1.1.0.30
	OPENBSD_4_5_BASE:1.1
	OPENBSD_4_4:1.1.0.28
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.26
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.24
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.22
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.20
	OPENBSD_4_0_BASE:1.1
	OPENBSD_3_9:1.1.0.18
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.16
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.14
	OPENBSD_3_7_BASE:1.1
	OPENBSD_3_6:1.1.0.12
	OPENBSD_3_6_BASE:1.1
	OPENBSD_3_5:1.1.0.10
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.8
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.6
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.4
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.2
	OPENBSD_3_1_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2010.05.19.13.45.15;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.07.00.31.55;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@preproc trick to avoid our getmntent when we define a static of the
same name.

Appeases gcc4
@
text
@$OpenBSD: patch-lib_fs_c,v 1.1 2002/04/07 00:31:55 espie Exp $
--- lib/fs.c.orig	Wed Jun 14 14:34:30 2000
+++ lib/fs.c	Wed May 19 13:05:05 2010
@@@@ -3,6 +3,73 @@@@
 #include <rpmlib.h>
 #include <rpmmacro.h>
 
+#ifdef __OpenBSD__
+#ifdef __aix__
+#define COMMENTCHAR '*'
+#else
+#define COMMENTCHAR '#'
+#endif
+
+#if HAVE_STRUCT_MNTTAB 
+static our_mntent * getmntent(FILE *filep) {
+    static struct mnttab entry;
+    static our_mntent item;
+
+    if (!fread(&entry, sizeof(entry), 1, filep)) return NULL;
+    item.our_mntdir = entry.mt_filsys;
+
+    return &item;
+}
+#else 
+#define getmntent internal_getmntent
+static our_mntent *getmntent(FILE *filep) {
+    static our_mntent item = { NULL };
+    char buf[1024], * start;
+    char * chptr;
+
+    if (item.our_mntdir) {
+	free(item.our_mntdir);
+    }
+    
+    while (fgets(buf, sizeof(buf) - 1, filep)) {
+	/* chop off \n */
+	buf[strlen(buf) - 1] = '\0';
+
+	chptr = buf;
+	while (isspace(*chptr)) chptr++;
+
+	if (*chptr == COMMENTCHAR) continue;
+
+#	if __aix__
+	    /* aix uses a screwed up file format */
+	    if (*chptr == '/') {
+		start = chptr;
+		while (*chptr != ':') chptr++;
+		*chptr = '\0';
+		item.mnt_dir = strdup(start);
+		return &item;
+	    }
+#	else 
+	    while (!isspace(*chptr) && (*chptr)) chptr++;
+	    if (!*chptr) return NULL;
+
+	    while (isspace(*chptr) && (*chptr)) chptr++;
+	    if (!*chptr) return NULL;
+	    start = chptr;
+	
+	    while (!isspace(*chptr) && (*chptr)) chptr++;
+	    *chptr = '\0';
+
+	    item.our_mntdir = strdup(start);
+	    return &item;
+#	endif
+    }
+
+    return NULL;
+}
+#endif
+#endif
+
 struct fsinfo {
     /*@@only@@*/ const char * mntPoint;
     dev_t dev;
@@@@ -301,3 +368,5 @@@@ int rpmGetFilesystemUsage(const char ** fileList, int_
 
     return 0;
 }
+
+
@


1.1
log
@apparently, linux expect ld.so to be able to fill back references to
program code from dynamic libraries.

This does not work on our ELF platforms. Just put the getmntent code inside
the one source file that needs it, as a static function so that it does not
show outside the library.
@
text
@d1 4
a4 4
$OpenBSD$
--- lib/fs.c.orig	Sun Apr  7 02:16:12 2002
+++ lib/fs.c	Sun Apr  7 02:17:44 2002
@@@@ -3,6 +3,72 @@@@
d26 1
d78 1
a78 1
@@@@ -301,3 +367,5 @@@@ int rpmGetFilesystemUsage(const char ** 
@

