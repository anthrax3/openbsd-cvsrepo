head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.2
	OPENBSD_6_2_BASE:1.4;
locks; strict;
comment	@# @;


1.4
date	2017.08.22.10.27.33;	author espie;	state Exp;
branches;
next	1.3;
commitid	sCnkIOOsVZcKUm8L;

1.3
date	2017.07.13.11.43.55;	author espie;	state Exp;
branches;
next	1.2;
commitid	zCogUYkSk5QJmTYt;

1.2
date	2017.06.03.15.02.26;	author espie;	state Exp;
branches;
next	1.1;
commitid	ONgIyrO6MKSUy2Bi;

1.1
date	2017.05.31.08.08.16;	author espie;	state Exp;
branches;
next	;
commitid	ij92FtFXiSiT1ani;


desc
@@


1.4
log
@rework COMPILER yet again. new version should be easier to grasp
@
text
@# $OpenBSD: compiler.port.mk,v 1.3 2017/07/13 11:43:55 espie Exp $
#
#  Copyright (c) 2017 Marc Espie
# 
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE
#  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
#  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#  SUCH DAMAGE.
# 

COMPILER:= ${COMPILER:S/^gcc$/base-clang ports-gcc/}
COMPILER:= ${COMPILER:S/^clang$/base-clang ports-clang/}

.for c in ${COMPILER:L}
.  if "$c" == "base-gcc"
_COMPILER_ARCHS += ${GCC4_ARCHS}
.    if ${PROPERTIES:Mgcc4}
CHOSEN_COMPILER ?= base-gcc
.    endif
.  elif "$c" == "gcc3"
_COMPILER_ARCHS += ${GCC3_ARCHS}
.    if ${PROPERTIES:Mgcc3}
CHOSEN_COMPILER ?= gcc3
.    endif
.  elif "$c" == "base-clang"
_COMPILER_ARCHS += ${CLANG_ARCHS}
.    if ${PROPERTIES:Mclang}
CHOSEN_COMPILER ?= base-clang
.    endif
.  elif "$c" == "ports-gcc"
MODGCC4_ARCHS ?=	${GCC49_ARCHS}
_MODGCC4_ARCH_USES = 	No
_COMPILER_ARCHS += ${MODGCC4_ARCHS}
.    for _i in ${MODGCC4_ARCHS}
.      if !empty(MACHINE_ARCH:M${_i})
_MODGCC4_ARCH_USES = 	Yes
.      endif
.    endfor
.    if ${_MODGCC4_ARCH_USES:L} == "yes" && !defined(CHOSEN_COMPILER)
MODULES +=		gcc4
MODGCC4_LANGS +=	${COMPILER_LANGS}
CHOSEN_COMPILER = 	ports-gcc
.    endif
.  elif "$c" == "ports-clang"
MODCLANG_ARCHS ?=	${LLVM_ARCHS}
_MODCLANG_ARCH_USES = 	No
_COMPILER_ARCHS += ${MODCLANG_ARCHS}
.    for _i in ${MODCLANG_ARCHS}
.      if !empty(MACHINE_ARCH:M${_i})
_MODCLANG_ARCH_USES = 	Yes
.      endif
.    endfor
.    if ${_MODCLANG_ARCH_USES:L} == "yes" && !defined(CHOSEN_COMPILER)
MODULES +=		lang/clang
MODCLANG_LANGS +=	${COMPILER_LANGS}
CHOSEN_COMPILER = 	ports-clang
.    endif
.  else
ERRORS += "Fatal: unknown keyword $c in COMPILER"
CHOSEN_COMPILER = error
.  endif
.endfor

CHOSEN_COMPILER ?= none found
ONLY_FOR_ARCHS ?= ${_COMPILER_ARCHS}

.if ${CHOSEN_COMPILER:Mports-*} && ${COMPILER_LANGS:Mc++}
COMPILER_LIBCXX = ${LIBECXX}
.endif
@


1.3
log
@now that COMPILER works, we can have a simpler mechanism to figure out
the C++ library getting used in most cases.
@
text
@d1 1
a1 1
# $OpenBSD: compiler.port.mk,v 1.2 2017/06/03 15:02:26 espie Exp $
d27 3
d31 17
a47 4
.  if "$c" == "base"
.  elif "$c" == "gcc" || "$c" == "gcc4" || "$c" == "gcc-only"
.    if !defined(CHOSEN_COMPILER)
MODGCC4_ARCHS ?=	*
d49 3
a51 3
.      if ${MODGCC4_ARCHS} != ""
.        for _i in ${MODGCC4_ARCHS}
.          if !empty(MACHINE_ARCH:M${_i})
a52 2
.          endif
.        endfor
d54 2
a55 1
.      if ${_MODGCC4_ARCH_USES:L} == "yes"
d58 1
a58 2
CHOSEN_COMPILER = 	gcc
.      endif
d60 2
a61 3
.  elif "$c" == "clang"
.    if !defined(CHOSEN_COMPILER)
MODCLANG_ARCHS ?=	*
d63 3
a65 3
.      if ${MODCLANG_ARCHS} != ""
.        for _i in ${MODCLANG_ARCHS}
.          if !empty(MACHINE_ARCH:M${_i})
a66 2
.          endif
.        endfor
d68 2
a69 1
.      if ${_MODCLANG_ARCH_USES:L} == "yes"
d72 1
a72 2
CHOSEN_COMPILER = 	clang
.      endif
d79 5
a83 4
# okay we went through, we didn't find anything
CHOSEN_COMPILER ?= old
.if $(CHOSEN_COMPILER) == "clang" || $(CHOSEN_COMPILER) == "gcc"
.  if ${COMPILER_LANGS:Mc++}
a84 1
.  endif
a85 2


@


1.2
log
@sooner or later, we'll run into ports that really require a gcc...
@
text
@d1 1
a1 1
# $OpenBSD: compiler.port.mk,v 1.1 2017/05/31 08:08:16 espie Exp $
d70 7
@


1.1
log
@switch everything to new COMPILER idiom, even stuff that won't build with clang
yet, but at least that part is done.
@
text
@d1 1
a1 1
# $OpenBSD$
d29 1
a29 1
.  elif "$c" == "gcc" || "$c" == "gcc4"
@

