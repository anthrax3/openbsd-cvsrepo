head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.2
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.11.0.8
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.10
	OPENBSD_5_8_BASE:1.11
	OPENBSD_5_7:1.11.0.6
	OPENBSD_5_7_BASE:1.11
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	OPENBSD_5_5:1.11.0.2
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.10.0.8
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.6
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.4
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.2;
locks; strict;
comment	@# @;


1.13
date	2016.03.15.21.45.16;	author naddy;	state Exp;
branches;
next	1.12;
commitid	U5zE8fQ3KKRTsyoI;

1.12
date	2016.03.10.12.20.06;	author naddy;	state Exp;
branches;
next	1.11;
commitid	FvuwTC2rqnVYRjNS;

1.11
date	2013.11.10.12.27.50;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2011.12.08.08.15.36;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.29.15.11.18;	author naddy;	state Exp;
branches;
next	1.8;

1.8
date	2011.10.18.06.43.51;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2011.10.16.07.52.08;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2011.10.16.07.12.35;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.03.15.46.33;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.03.08.35.36;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.28.13.54.20;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2011.09.28.10.03.09;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2011.09.25.07.59.49;	author espie;	state Exp;
branches;
next	;


desc
@@


1.13
log
@NO_SHARED_LIBS is no longer used in the ports tree
@
text
@# $OpenBSD: bsd.port.arch.mk,v 1.12 2016/03/10 12:20:06 naddy Exp $
#
# ex:ts=4 sw=4 filetype=make:
#
#	derived from bsd.port.mk in 2011
#	This file is in the public domain.
#	It is actually a part of bsd.port.mk that can be included early
#	for complicated MULTI_PACKAGES and ARCH-dependent cases.

# _guard against multiple inclusion for bsd.port.mk
_BSD_PORT_ARCH_MK_INCLUDED = Done

.if !defined(_ARCH_DEFINES_INCLUDED)
_ARCH_DEFINES_INCLUDED = Done
.  include "${PORTSDIR}/infrastructure/mk/arch-defines.mk"
.endif

# early include of Makefile.inc
.if !defined(_MAKEFILE_INC_DONE)
.  if exists(${.CURDIR}/../Makefile.inc)
_MAKEFILE_INC_DONE = Yes
.    include "${.CURDIR}/../Makefile.inc"
.  endif
.endif

# needs multi-packages (and default subpackage) for the rest
.if !defined(MULTI_PACKAGES) || empty(MULTI_PACKAGES)
# XXX let's cheat so we always have MULTI_PACKAGES
MULTI_PACKAGES = -
SUBPACKAGE ?= -
.else
SUBPACKAGE ?= -main
.endif

# allow pseudo-flavors to make subpackages vanish.
.if defined(FLAVOR)
# XXX remove all extra pseudo flavors that remove stuff
BUILD_ONCE ?= No
.  if ${BUILD_ONCE:L} == "yes" && defined(PSEUDO_FLAVORS) && !${FLAVOR:Mbootstrap}
.    for f in ${FLAVOR:Mno_*}
.      if ${PSEUDO_FLAVORS:M$f}
FLAVOR := ${FLAVOR:N$f}
.      endif
.    endfor
.  endif
.endif

# build the actual list of subpackages we want
BUILD_PACKAGES =

.for _s in ${MULTI_PACKAGES}

# ONLY_FOR_ARCHS/NOT_FOR_ARCHS are special:
# being undefined is different from being empty
.  if defined(ONLY_FOR_ARCHS)
ONLY_FOR_ARCHS${_s} ?= ${ONLY_FOR_ARCHS}
.  endif
.  if defined(NOT_FOR_ARCHS)
NOT_FOR_ARCHS${_s} ?= ${NOT_FOR_ARCHS}
.  endif

IGNORE${_s} ?=
IGNORE${_s} += ${IGNORE}
.  for _T in ${_s:S/^-/no_/}
.    if defined(FLAVOR) && ${FLAVOR:M${_T}}
IGNORE${_s} += "Ignored as FLAVOR contains ${FLAVOR:M${_T}}"
.    endif
.  endfor

# compute _ARCH_OK for ignore
.  if defined(ONLY_FOR_ARCHS${_s})
.    for A B in ${MACHINE_ARCH} ${ARCH}
.      if empty(ONLY_FOR_ARCHS${_s}:M$A) && empty(ONLY_FOR_ARCHS${_s}:M$B)
.        if ${MACHINE_ARCH} == "${ARCH}"
IGNORE${_s} += "is only for ${ONLY_FOR_ARCHS${_s}}, not ${MACHINE_ARCH}"
.        else
IGNORE${_s} += "is only for ${ONLY_FOR_ARCHS${_s}}, not ${MACHINE_ARCH} \(${ARCH}\)"
.        endif
.      endif
.    endfor
.  endif
.  if defined(NOT_FOR_ARCHS${_s})
.    for A B in ${MACHINE_ARCH} ${ARCH}
.      if !empty(NOT_FOR_ARCHS${_s}:M$A) || !empty(NOT_FOR_ARCHS${_s}:M$B)
IGNORE${_s} += "is not for ${NOT_FOR_ARCHS${_s}}"
.      endif
.    endfor
.  endif


# allow subpackages to vanish on architectures that don't
# support them
.  if empty(IGNORE${_s})
BUILD_PACKAGES += ${_s}
.  endif
.endfor

@


1.12
log
@no more non-shared archs:
NO_SHARED_ARCHS and "no_shared" in PROPERTIES are no longer set
@
text
@d1 1
a1 1
# $OpenBSD: bsd.port.arch.mk,v 1.11 2013/11/10 12:27:50 espie Exp $
a24 3

# Set NO_SHARED_LIBS for those machines that don't support shared libraries.
NO_SHARED_LIBS ?= No
@


1.11
log
@turns out that dpb is happy with BUILD_PACKAGES being wildy different
from MULTI_PACKAGES, so there's no reason left to tweak MULTI_PACKAGES
directly for pseudo-flavors.

saner.
@
text
@d1 1
a1 1
# $OpenBSD: bsd.port.arch.mk,v 1.10 2011/12/08 08:15:36 espie Exp $
a26 5
.for _m in ${MACHINE_ARCH}
.  if !empty(NO_SHARED_ARCHS:M${_m})
NO_SHARED_LIBS ?= Yes
.  endif
.endfor
@


1.10
log
@move the architecture *constants* to a private arch-defines.mk file
That way, bsd.port.arch.mk can still make available in a Makefile, but
we can also include them early in bsd.port.mk, so that they will always
be available from modules and Makefile.inc.
@
text
@d1 1
a1 1
# $OpenBSD: bsd.port.arch.mk,v 1.9 2011/11/29 15:11:18 naddy Exp $
a53 8

.  for _S in ${MULTI_PACKAGES}
.    for _T in ${_S:S/^-/no_/}
.      if ${FLAVOR:M${_T}}
MULTI_PACKAGES := ${MULTI_PACKAGES:N${_S}}
.      endif
.    endfor
.  endfor
d72 5
@


1.9
log
@alpha uses gcc4 now, and so does hppa64
@
text
@d1 1
a1 1
# $OpenBSD: bsd.port.arch.mk,v 1.8 2011/10/18 06:43:51 espie Exp $
d13 5
a25 19
# architecture stuff

ARCH ?!= uname -m

ALL_ARCHS = alpha amd64 arm armish arm hppa hppa64 i386 landisk \
	loongson luna88k m68k m88k mac68k macppc mips64 mips64el \
	mvme68k mvme88k palm sgi socppc sparc sparc64 vax zaurus
# not all powerpc have apm(4), hence the use of macppc
APM_ARCHS = amd64 arm i386 loongson macppc sparc sparc64
LP64_ARCHS = alpha amd64 hppa64 sparc64 mips64 mips64el
NO_SHARED_ARCHS = m88k vax
GCC4_ARCHS = alpha amd64 arm armish beagle gumstix i386 hppa hppa64 \
	loongson macppc mips64 \
	mips64el mvmeppc palm powerpc sgi socppc sparc sparc64 zaurus
GCC3_ARCHS = landisk sh
GCC2_ARCHS = aviion luna88k m68k m88k mac68k mvme68k mvme88k vax
# XXX easier for ports that depend on mono
MONO_ARCHS = amd64 i386

a100 10
.for PROP in ALL APM LP64 NO_SHARED GCC4 GCC3 GCC2 MONO
.  for A B in ${MACHINE_ARCH} ${ARCH}
.    if !empty(${PROP}_ARCHS:M$A) || !empty(${PROP}_ARCHS:M$B)
PROPERTIES += ${PROP:L}
.    endif
.  endfor
.endfor
.if ${ELF_TOOLCHAIN:L} == "yes"
PROPERTIES += elf
.endif
@


1.8
log
@prepare framework to avoid pseudo-flavors from dpb unless in bootstrap
situation
@
text
@d1 1
a1 1
# $OpenBSD: bsd.port.arch.mk,v 1.7 2011/10/16 07:52:08 espie Exp $
d32 2
a33 1
GCC4_ARCHS = amd64 arm armish beagle gumstix i386 hppa loongson macppc mips64 \
d35 1
a35 1
GCC3_ARCHS = alpha hppa64 landisk sh
@


1.7
log
@pull in elf toolchain along with other properties
@
text
@d1 1
a1 1
# $OpenBSD: bsd.port.arch.mk,v 1.6 2011/10/16 07:12:35 espie Exp $
d58 10
@


1.6
log
@- fix position of Makefile.inc include guard to allow arbitrary intermixing of
Makefile.inc and bsd.port.arch.mk without infinite recursion.

- use simpler pattern to test for arch stuff, we just need the values, so
.for A B in ${MACHINE_ARCH} ${ARCH}
is enough and avoids the setting of intermediate variables.

- new PROPERTIES variable that's easy to test with e.g. if ${PROPERTIES:Mapm}
@
text
@d1 1
a1 1
# $OpenBSD: bsd.port.arch.mk,v 1.5 2011/10/03 15:46:33 espie Exp $
d111 3
@


1.5
log
@There's no actual reason to accept flavors with non-lowercase spelling,
so kill the misfeature, as agreed by mostly everyone.
@
text
@d1 1
a1 1
# $OpenBSD: bsd.port.arch.mk,v 1.4 2011/10/03 08:35:36 espie Exp $
d16 1
a18 1
_MAKEFILE_INC_DONE = Yes
d86 3
a88 8
_ARCH_OK = 0
.    for __ARCH in ${MACHINE_ARCH} ${ARCH}
.      if !empty(ONLY_FOR_ARCHS${_s}:M${__ARCH})
_ARCH_OK = 1
.      endif
.    endfor
.    if ${_ARCH_OK} == 0
.      if ${MACHINE_ARCH} == "${ARCH}"
d90 1
a90 1
.      else
d92 1
d94 1
a94 1
.    endif
d97 3
a99 4
_ARCH_OK = 1
.    for __ARCH in ${MACHINE_ARCH} ${ARCH}
.      if !empty(NOT_FOR_ARCHS${_s}:M${__ARCH})
_ARCH_OK = 0
d102 6
a107 2
.    if ${_ARCH_OK} == 0
IGNORE${_s} += "is not for ${NOT_FOR_ARCHS${_s}}"
d109 2
a110 1
.  endif
@


1.4
log
@pseudo-flavors *must* be taken off MULTI_PACKAGES, not BUILD_PACKAGES.
dpb coalesces build dependencies over MULTI_PACKAGES: if we don't substract
from MULTI_PACKAGES, this can lead to bootstrap loops.

Case in point: sysutils/gamin, whose build relies on "no_server" to be
available as a dependency for glib2/gtk+2.

(but IGNORED stuff is properly kept as MULTI_PACKAGES, since it's mostly
intended to avoid strange arch errors)
@
text
@d1 1
a1 1
# $OpenBSD: bsd.port.arch.mk,v 1.3 2011/09/28 13:54:20 espie Exp $
d60 1
a60 1
.      if ${FLAVOR:L:M${_T}}
@


1.3
log
@MONO_ARCHS to de-dup the tree
ok robert@@, aja@@
@
text
@d1 1
a1 1
# $OpenBSD: bsd.port.arch.mk,v 1.2 2011/09/28 10:03:09 espie Exp $
d56 11
a118 10
# allow pseudo-flavors to make subpackages vanish.
.if defined(FLAVOR)
.  for _S in ${BUILD_PACKAGES}
.    for _T in ${_S:S/^-/no_/}
.      if ${FLAVOR:L:M${_T}}
BUILD_PACKAGES := ${BUILD_PACKAGES:N${_S}}
.      endif
.    endfor
.  endfor
.endif
@


1.2
log
@cosmetic: don't repeat ourselves for NOT_FOR_ARCHS.
@
text
@d1 1
a1 1
# $OpenBSD: bsd.port.arch.mk,v 1.1 2011/09/25 07:59:49 espie Exp $
d36 2
@


1.1
log
@regroup everything having to do with MD stuff and split it off into
its own file.

*this requires current src as well*, to have the glue in /usr/share/mk
@
text
@d1 1
a1 1
# $OpenBSD$
d88 1
d91 1
a91 1
IGNORE${_s} += "is not for ${NOT_FOR_ARCHS${_s}}"
d94 3
@

