head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.8
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.6
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.4
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.3.0.6
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2;
locks; strict;
comment	@# @;


1.8
date	2015.08.11.22.39.57;	author espie;	state Exp;
branches;
next	1.7;
commitid	zZVVrRNxehVd0adE;

1.7
date	2015.05.18.16.35.15;	author espie;	state Exp;
branches;
next	1.6;
commitid	WWEEsziiaMhBBBcz;

1.6
date	2013.10.06.13.33.27;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2013.09.18.13.26.39;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2013.09.03.09.34.24;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2012.03.02.19.33.43;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2011.06.04.12.58.24;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2011.05.22.08.21.39;	author espie;	state Exp;
branches;
next	;


desc
@@


1.8
log
@missing conversion. Problem noticed by sebastia@@ on vax.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Clock.pm,v 1.7 2015/05/18 16:35:15 espie Exp $
#
# Copyright (c) 2011-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;

# everything needed to handle clock

use Time::HiRes qw(time);

# explicit stop/restart clock where needed
package DPB::Clock;

# users will register/unregister, they must have a
# stopped_clock($gap) method to adjust.
my $items = {};

sub register
{
	my ($class, $o) = @@_;
	$items->{$o} = $o;
}

sub unregister
{
	my ($class, $o) = @@_;
	delete $items->{$o};
}

my $stopped_clock;

sub stop
{
	$stopped_clock = time();
}

sub restart
{
	my $gap = time() - $stopped_clock;

	for my $o (values %$items) {
		$o->stopped_clock($gap, $stopped_clock);
	}
}

# tasks with a timer
package DPB::Task::Clocked;
our @@ISA = qw(DPB::Task::Fork);

sub fork
{
	my ($self, $core) = @@_;

	$self->{started} = time();
	DPB::Clock->register($self);
	return $self->SUPER::fork($core);
}

sub finalize
{
	my ($self, $core) = @@_;
	$self->{ended} = time();
	DPB::Clock->unregister($self);
	return $self->SUPER::finalize($core);
}

sub elapsed
{
	my $self = shift;
	return $self->{ended} - $self->{started};
}

sub stopped_clock
{
	my ($self, $gap) = @@_;
	$self->{started} += $gap;
}

# how to know if we're stuck: we watch some file size.
# if there's some expected value, then we can display a %

package DPB::Watch;
sub new
{
	my ($class, $file, $expected, $offset, $time) = @@_;
	my $o = bless {
		file => $file,
		expected => $expected,
		offset => $offset,
		time => $time,
		max => 0,
	}, $class;
	DPB::Clock->register($o);
	return $o;
}

sub check_change
{
	my ($self, $current) = @@_;
	$self->{time} //= $current;
	my $sz = ($self->{file}->stat)[7];
	if (defined $sz && defined $self->{offset}) {
		$sz -= $self->{offset};
	}
	if ((defined $sz &&
	    (!defined $self->{sz} || $self->{sz} != $sz)) ||
		(!defined $sz && defined $self->{sz})) {
		$self->{sz} = $sz;
		$self->{time} = $current;
	}
	my $d = $current - $self->{time};
	if ($d > $self->{max}) {
		$self->{max} = $d;
	}
	return $d;
}

sub percent_message
{
	my $self = shift;
	my $progress = '';
	if (defined $self->{sz}) {
		if (defined $self->{expected} &&
		    $self->{sz} < 4 * $self->{expected}) {
			$progress = ' '.
			    int($self->{sz}*100/$self->{expected}). '%';
		} else {
			$progress = ' '.$self->{sz};
	    	}
	}
	return $progress;
}
sub frozen_message
{
	my ($self, $diff) = @@_;
	my $unchanged = " frozen for ";
	if ($diff > 7200) {
		$unchanged .= int($diff/3600)." HOURS!";
	} elsif ($diff > 300) {
		$unchanged .= int($diff/60)."mn";
	} elsif ($diff > 10) {
		$unchanged .= int($diff)."s";
	} else {
		$unchanged = "";
	}
	return $unchanged;
}

sub reset_offset
{
	my $self = shift;
	my $sz = ($self->{file}->stat)[7];
	if (defined $sz) {
		$self->{offset} = $sz;
	}
}

sub stopped_clock
{
	my ($self, $gap) = @@_;
	$self->{time} += $gap if defined $self->{time};
}

sub DESTROY
{
	DPB::Clock->unregister(shift);
}
1;
@


1.7
log
@use File object (name + user) to ensure watched files are watched with the
correct user. Should fix sthen@@'s problems.

(File interface to be used elsewhere, as it's less cumbersome)
@
text
@d2 1
a2 1
# $OpenBSD: Clock.pm,v 1.6 2013/10/06 13:33:27 espie Exp $
d165 1
a165 1
	my $sz = (stat $self->{name})[7];
@


1.6
log
@update my copyright to 2013
@
text
@d2 1
a2 1
# $OpenBSD: Clock.pm,v 1.5 2013/09/18 13:26:39 espie Exp $
d98 1
a98 1
	my ($class, $filename, $expected, $offset, $time) = @@_;
d100 1
a100 1
		name => $filename,
d114 1
a114 1
	my $sz = (stat $self->{name})[7];
@


1.5
log
@leaner messages: don't show percent on tasks where it doesn't make sense.
replace "unchanged for 28 seconds" by "frozen for 28s"

remove frozen message for "waiting-for-lock" entirely... there's already
a depend/junk task that shows this clearly, and the message tends to be
WAY too long anyways.
@
text
@d2 1
a2 1
# $OpenBSD: Clock.pm,v 1.4 2013/09/03 09:34:24 espie Exp $
d4 1
a4 1
# Copyright (c) 2011 Marc Espie <espie@@openbsd.org>
@


1.4
log
@pretty unlikely, but the Limiter measurements may straddle a ^Z/fg, so
it's better to adjust the timings there as well.
@
text
@d2 1
a2 1
# $OpenBSD: Clock.pm,v 1.3 2012/03/02 19:33:43 espie Exp $
d131 1
a131 1
sub change_message
d133 1
a133 1
	my ($self, $diff) = @@_;
d144 6
a149 1
	my $unchanged = " unchanged for ";
d151 1
a151 1
		$unchanged .= int($diff/3600)." hours";
d153 1
a153 1
		$unchanged .= int($diff/60)." minutes";
d155 1
a155 1
		$unchanged .= int($diff)." seconds";
d159 1
a159 1
	return $progress.$unchanged;
@


1.3
log
@keep track of how long a job is stuck, max.
@
text
@d2 1
a2 1
# $OpenBSD: Clock.pm,v 1.2 2011/06/04 12:58:24 espie Exp $
d30 1
d55 1
a55 1
		$o->stopped_clock($gap);
@


1.2
log
@spaces
@
text
@d2 1
a2 1
# $OpenBSD$
d103 1
d123 5
a127 1
	return $current - $self->{time};
@


1.1
log
@initial support for fetching distfiles, somewhat experimental yet.
- clean up clock handling, jobs with timer.
- pass more parameters thru state
- tweak the engine to handle distfiles
- lots of new code in Fetch for new jobs.
@
text
@d27 1
a27 1
# users will register/unregister, they must have a 
d98 2
a99 2
	my $o = bless { 
		name => $filename, 
d116 1
a116 1
	if ((defined $sz && 
@

