head	1.29;
access;
symbols
	OPENBSD_6_1:1.29.0.4
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.29.0.2
	OPENBSD_6_0_BASE:1.29
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.27.0.4
	OPENBSD_5_8_BASE:1.27
	OPENBSD_5_7:1.24.0.6
	OPENBSD_5_7_BASE:1.24
	OPENBSD_5_6:1.24.0.4
	OPENBSD_5_6_BASE:1.24
	OPENBSD_5_5:1.24.0.2
	OPENBSD_5_5_BASE:1.24
	OPENBSD_5_4:1.15.0.4
	OPENBSD_5_4_BASE:1.15
	OPENBSD_5_3:1.15.0.2
	OPENBSD_5_3_BASE:1.15
	OPENBSD_5_2:1.11.0.2
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.6.0.2
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	ports:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.29
date	2016.06.28.15.28.20;	author espie;	state Exp;
branches;
next	1.28;
commitid	vwMZvbsIdSgs6ITN;

1.28
date	2016.06.24.12.52.12;	author espie;	state Exp;
branches;
next	1.27;
commitid	xm1njZ1KrSEciTBT;

1.27
date	2015.05.07.12.30.46;	author espie;	state Exp;
branches;
next	1.26;
commitid	bTlfhLMWrwKobBb3;

1.26
date	2015.05.05.08.51.13;	author espie;	state Exp;
branches;
next	1.25;
commitid	Az3yAaROW43MWF9f;

1.25
date	2015.04.25.11.40.58;	author espie;	state Exp;
branches;
next	1.24;
commitid	uoRLcf51nveokBOa;

1.24
date	2013.10.06.13.33.34;	author espie;	state Exp;
branches;
next	1.23;

1.23
date	2013.10.06.13.22.19;	author espie;	state Exp;
branches;
next	1.22;

1.22
date	2013.10.02.09.13.28;	author espie;	state Exp;
branches;
next	1.21;

1.21
date	2013.10.02.09.02.40;	author espie;	state Exp;
branches;
next	1.20;

1.20
date	2013.09.30.19.08.35;	author espie;	state Exp;
branches;
next	1.19;

1.19
date	2013.09.23.14.25.12;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2013.09.08.19.30.12;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2013.09.06.15.58.09;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2013.09.03.09.44.08;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2013.01.11.13.22.25;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2013.01.05.13.39.36;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2013.01.04.12.49.06;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2013.01.04.12.06.25;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.10.14.28.30;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2012.04.07.12.13.36;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2012.03.09.12.51.38;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2012.02.27.15.37.36;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.10.14.47.36;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2011.06.04.12.58.24;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2011.05.22.08.21.39;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.25.17.31.25;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.25.17.23.13;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.25.10.46.11;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.08.20.13.40.14;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.08.20.13.40.14;	author espie;	state Exp;
branches;
next	;


desc
@@


1.29
log
@reuse base window detection code and signal handler (requires fairly recent
base code)
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Reporter.pm,v 1.28 2016/06/24 12:52:12 espie Exp $
#
# Copyright (c) 2010-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use OpenBSD::Error;
use DPB::Util;
use DPB::Clock;

package DPB::Reporter;
my $singleton;

sub ttyclass() 	
{
	require DPB::Reporter::Tty;
	return "DPB::Reporter::Tty";
}

sub term_send
{
}

sub reset_cursor
{
	my $self = shift;
	print $self->{visible} if defined $self->{visible};
}

sub set_cursor
{
	my $self = shift;
	print $self->{invisible} if defined $self->{invisible};
}

sub reset
{
	my $self = shift;
	$self->reset_cursor;
	print $self->{clear} if defined $self->{clear};
}

sub set_sigtstp
{
	my $self =shift;
	$SIG{TSTP} = sub {
		$self->reset_cursor;
		DPB::Clock->stop;
		$SIG{TSTP} = 'DEFAULT';
		local $> = 0;
		kill TSTP => $$;
	};
}

sub set_sig_handlers
{
	my $self = shift;
	$self->set_sigtstp;
}

sub sig_received
{
	my ($self, $iscont) = @@_;
	if ($iscont) {
		$self->set_sigtstp;
		$self->{continued} = 1;
		DPB::Clock->restart;
	}
	$self->handle_window;
}

sub refresh
{
}

sub handle_window
{
}

sub filter_can
{
	my ($self, $r, $method) = @@_;
	my @@kept = ();
	for my $prod (@@$r) {
		push @@kept, $prod if $prod->can($method);
	}
	return \@@kept;
}

sub new
{
	my $class = shift;
	my $state = shift;
	my $dotty;
	if ($state->opt('x')) {
		$dotty = 0;
	} elsif ($state->opt('m')) {
		$dotty = 1;
	} else {
		$dotty = -t STDOUT;
	}
		
	if ($dotty) {
		$class->ttyclass->new($state, @@_);
	} else {
		$class->make_singleton($state, @@_);
	}
}

sub make_singleton
{
	my $class = shift;
	my $state = shift;
	return if defined $singleton;
	$singleton = bless {msg => '',
	    producers => $class->filter_can(\@@_, $class->filter),
	    timeout => $state->{display_timeout} // 10,
	    state => $state,
	    continued => 0}, $class;
	$state->{reporter} = $singleton;
    	if ($state->{record}) {
		$singleton->{record} =
		    $state->{log_user}->open('>>', $state->{record});
	}
	return $singleton;
}

sub filter
{
	'important';
}
sub timeout
{
	my $self = shift;
	return $self->{timeout};
}

sub report
{
	my $self = shift;
	for my $prod (@@{$self->{producers}}) {
		my $important = $prod->important;
		if ($important) {
			print $important;
		}
	}
}

sub myprint
{
	my $self = shift;
	if (!ref $self) {
		$singleton->myprint(@@_);
	} else {
		print @@_;
	}
}

1;
@


1.28
log
@keep state around in Reporter, simplifies terminal initialization,
and will be need to access size information
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.27 2015/05/07 12:30:46 espie Exp $
d73 6
a78 1
	$SIG{'CONT'} = sub {
d82 2
a83 2
		$self->handle_window;
	};
d134 1
@


1.27
log
@make sure we're root when killing stuff. I'm mixing up right and left,
obviously.
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.26 2015/05/05 08:51:13 espie Exp $
d127 1
@


1.26
log
@simplify
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.25 2015/04/25 11:40:58 espie Exp $
d64 1
@


1.25
log
@make most of the creatio files code able to change identity so that logging,
locking   don't happen as root.

Still need to do the fetchfiles/package linking part.
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.24 2013/10/06 13:33:34 espie Exp $
d128 2
a129 4
		$state->{log_user}->run_as(
		    sub {
			open $singleton->{record}, '>>', $state->{record};
		    });
@


1.24
log
@update my copyright to 2013
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.23 2013/10/06 13:22:19 espie Exp $
d128 4
a131 1
		open $singleton->{record}, '>>', $state->{record};
@


1.23
log
@split some code into separate files, so that it doesn't get
loaded if it's not needed.
@
text
@d2 1
a2 1
# $OpenBSD: reporter.pm,v 1.20 2013/09/30 19:08:35 espie exp $
d4 1
a4 1
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
@


1.22
log
@turn on recorder by default
@
text
@d2 1
a2 1
# $openbsd: reporter.pm,v 1.20 2013/09/30 19:08:35 espie exp $
a23 1
use DPB::MiniCurses;
d28 5
a32 1
sub ttyclass() 	{ "DPB::Reporter::Tty" }
a160 82
	}
}

package DPB::Reporter::Tty;
our @@ISA = qw(DPB::MiniCurses DPB::Reporter DPB::Limiter);

my $extra = '';
sub handle_window
{
	my $self = shift;
	$self->set_cursor;
	$self->find_window_size;
	$self->refresh;
}

sub set_sig_handlers
{
	my $self = shift;
	$self->SUPER::set_sig_handlers;
	$SIG{'WINCH'} = sub {
		$self->handle_window;
	};
	OpenBSD::Handler->register(sub {
		$self->reset_cursor; });
}

sub filter
{
	'report';
}

sub new
{
	my $class = shift;
	my $state = shift;
	$class->make_singleton($state, @@_);
	$singleton->create_terminal;
	$singleton->set_sig_handlers;
	if ($state->{subst}->value("NO_CURSOR")) {
		$singleton->{invisible} = 
		    $singleton->{terminal}->Tputs("vi", 1);
		$singleton->{visible} = 
		    $singleton->{terminal}->Tputs("ve", 1);
	}
	# no cursor, to avoid flickering
	$singleton->set_cursor;
	return $singleton;
}

sub report
{
	my ($self, $force) = @@_;
	if ($self->{force}) {
		$force = 1;
		undef $self->{force};
	}
	$self->limit($force, 150, "REP", 1,
	    sub {
		my $msg = "";
		for my $prod (@@{$self->{producers}}) {
			$msg.= $prod->report;
		}
		$msg .= $extra;
		if ($msg ne $self->{msg} || $self->{continued}) {
			if (defined $self->{record}) {
				print {$self->{record}} "@@@@@@", time(), "\n";
				print {$self->{record}} $msg;
			}
			$self->{continued} = 0;
			my $method = $self->{write};
			$self->$method($msg);
			$self->{msg} = $msg;
		}
	    });
}

sub myprint
{
	my $self = shift;
	for my $string (@@_) {
		$string =~ s/^\t/       /gm; # XXX dirty hack for warn
		$extra .= $string;
@


1.21
log
@split off most of the term display code to be able to reuse it
@
text
@d124 1
a124 1
    	if (defined $state->{record}) {
@


1.20
log
@oops, fix -x case.
reported by rd@@thrush.com and seen on mirror-maker's emails...
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.19 2013/09/23 14:25:12 espie Exp $
d17 1
a20 1
use Term::Cap;
d24 1
d162 1
a162 1
our @@ISA = qw(DPB::Reporter DPB::Limiter);
a164 34
my $width;
my $wsz_format = 'SSSS';
our %sizeof;

sub find_window_size
{
	my $self = shift;
	# try to get exact window width
	my $r;
	$r = pack($wsz_format, 0, 0, 0, 0);
	$sizeof{'struct winsize'} = 8;
	require 'sys/ttycom.ph';
	$width = 80;
	if (ioctl(STDOUT, &TIOCGWINSZ, $r)) {
		my ($rows, $cols, $xpix, $ypix) =
		    unpack($wsz_format, $r);
		$self->{width} = $cols;
		$self->{height} = $rows;
	}
}

sub term_send
{
	my ($self, $seq) = @@_;
	$self->{terminal}->Tputs($seq, 1, \*STDOUT);
}

sub refresh
{
	my $self = shift;
	$self->{write} = 'go_write_home';
	$self->{force} = 1;
}

d194 1
a194 11
	my $oldfh = select(STDOUT);
	$| = 1;
	# XXX go back to totally non-buffered raw shit
	binmode(STDOUT, ':pop');
	select($oldfh);
	use POSIX;
	my $termios = POSIX::Termios->new;
	$termios->getattr(0);
	$singleton->{terminal} = Term::Cap->Tgetent({ OSPEED =>
	    $termios->getospeed });
	$singleton->find_window_size;
a195 5
	$singleton->{home} = $singleton->{terminal}->Tputs("ho", 1);
	$singleton->{clear} = $singleton->{terminal}->Tputs("cl", 1);
	$singleton->{down} = $singleton->{terminal}->Tputs("do", 1);
	$singleton->{glitch} = $singleton->{terminal}->Tputs("xn", 1);
	$singleton->{cleareol} = $singleton->{terminal}->Tputs("ce", 1);
a201 5
	if ($singleton->{home}) {
		$singleton->{write} = "go_write_home";
	} else {
		$singleton->{write} = "write_clear";
	}
a204 107
}

sub write_clear
{
	my ($self, $msg) = @@_;
	my $r = $self->{clear};
	$self->{oldlines} = [$self->cut_lines($msg)];
	my $n = 2;
	for my $line (@@{$self->{oldlines}}) {
		last if $n++ > $self->{height};
		$r .= $self->clamped($line);
	}
	print $r;
}

sub cut_lines
{
	my ($self, $msg) = @@_;
	my @@lines = ();
	for my $line (split("\n", $msg)) {
		while (length $line > $self->{width}) {
			push(@@lines, substr($line, 0, $self->{width}));
			$line = substr($line, $self->{width});
		}
		push(@@lines, $line);
	}
	return @@lines;
}

sub clamped
{
	my ($self, $line) = @@_;
	if (!$self->{glitch} && length $line == $self->{width}) {
		return $line;
	} else {
		return $line."\n";
	}
}

sub clear_clamped
{
	my ($self, $line) = @@_;
	if (!$self->{glitch} && length $line == $self->{width}) {
		return $line;
	} else {
		return $self->{cleareol}.$line."\n";
	}
}

sub do_line
{
	my ($self, $new, $old) = @@_;
	# line didn't change: try to go down
	if (defined $old && $old eq $new) {
		if ($self->{down}) {
			return $self->{down};
		}
	}
	# adjust newline to correct length
	if (defined $old && (length $old) > (length $new)) {
		if ($self->{cleareol}) {
			return $self->clear_clamped($new);
		}
		$new .= " "x ((length $old) - (length $new));
	}
	return $self->clamped($new);
}

sub lines
{
	my ($self, @@new) = @@_;

	my $n = 2;
	my $r = '';

	while (@@new > 0) {
		return $r if $n++ > $self->{height};
		$r .= $self->do_line(shift @@new, shift @@{$self->{oldlines}});
	}
	# extra lines must disappear
	while (@@{$self->{oldlines}} > 0) {
		my $line = shift @@{$self->{oldlines}};
		if ($self->{cleareol}) {
			$r .= $self->clear_clamped('');
		} else {
			$line = " "x (length $line);
			$r .= $self->clamped($line);
		}
		last if $n++ > $self->{height};
	}
	return $r;
}

sub write_home
{
	my ($self, $msg) = @@_;
	my @@new = $self->cut_lines($msg);
	print $self->{home}.$self->lines(@@new);
	$self->{oldlines} = \@@new;
}

sub go_write_home
{
	# first report has to clear the screen
	my ($self, $msg) = @@_;
	$self->write_clear($msg);
	$self->{write} = 'write_home';
@


1.19
log
@option: record terminal display, so that I can watch it later at hispeed...
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.18 2013/09/08 19:30:12 espie Exp $
d126 1
@


1.18
log
@common code
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.17 2013/09/06 15:58:09 espie Exp $
d118 2
a119 1
	$singleton //= bless {msg => '',
d123 3
d381 4
@


1.17
log
@quick fix for dpb -x... dirty, refactor needed
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.16 2013/09/03 09:44:08 espie Exp $
d110 1
a110 4
		$singleton //= bless {msg => '', tty => $dotty,
		    producers => $class->filter_can(\@@_, 'important'),
		    timeout => $state->{display_timeout} // 10,
		    continued => 0}, $class;
d114 14
d212 5
d221 1
a221 4
	$singleton //= bless {msg => '',
	    producers => $class->filter_can(\@@_, 'report'),
	    timeout => $state->{display_timeout} // 10,
	    continued => 0}, $class;
@


1.16
log
@reorganize code, so the periodic sleeper task no longer knows
its sleeping interval, but rather asks it from the reporter.

Give limiter customer access to timing information. Eventually,
the reporter could possibly shrink/enlarge the display timeout
automatically.
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.15 2013/01/11 13:22:25 espie Exp $
d112 1
d117 6
a239 6
}

sub timeout
{
	my $self = shift;
	return $self->{timeout};
@


1.15
log
@force when redraw
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.14 2013/01/05 13:39:36 espie Exp $
d200 1
d233 6
@


1.14
log
@crank factors up to 150, so that dpb consumes a bit less cpu yet.
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.13 2013/01/04 12:49:06 espie Exp $
d172 1
d344 4
@


1.13
log
@... and don't forget to propagate it thru
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.12 2013/01/04 12:06:25 espie Exp $
d343 1
a343 1
	$self->limit($force, 100, "REP", 1,
@


1.12
log
@take the rate-limiting concept used for the engine, and make it available
elsewhere. Also use it for the Reporter, as it makes no sense to spend
THAT much time reporting quick changes, which actually slows the build.
($factor to tweak as needed).
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.11 2012/07/10 14:28:30 espie Exp $
d342 2
a343 2
	my $self = shift;
	$self->limit(0, 100, "REP", 1,
@


1.11
log
@missed using "clear-to-eol" actually
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.10 2012/04/07 12:13:36 espie Exp $
d138 1
a138 1
our @@ISA = qw(DPB::Reporter);
d343 14
a356 11
	my $msg = "";
	for my $prod (@@{$self->{producers}}) {
		$msg.= $prod->report;
	}
	$msg .= $extra;
	if ($msg ne $self->{msg} || $self->{continued}) {
		$self->{continued} = 0;
		my $method = $self->{write};
		$self->$method($msg);
		$self->{msg} = $msg;
	}
@


1.10
log
@on accelerated boxes, one can keep the cursor visible.
make that the default, keep vis/invis as -DNO_CURSOR.
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.9 2012/03/09 12:51:38 espie Exp $
d216 1
a216 1
	$singleton->{cleareol} = $singleton->{terminal}->Tputs("", 1);
@


1.9
log
@tweak weight handling so that fixing weights and scaling weights works.
add -m option as a reverse to -x, like in pkg_add
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.8 2012/02/27 15:37:36 espie Exp $
d37 1
a37 1
	$self->term_send("ve");
d43 1
a43 1
	$self->term_send("vi");
d108 1
a108 1
		$class->ttyclass->new(@@_);
d196 1
d217 6
@


1.8
log
@let's do error messages differently: get die to reset_cursor and die
(reverse-override reporter), and get warn to use myprint (and need for
tabs to become spaces in that case...)
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.7 2011/12/10 14:47:36 espie Exp $
d97 11
a107 3
	my $notty = shift;
	my $isatty = !$notty && -t STDOUT;
	if ($isatty) {
d110 1
a110 1
		$singleton //= bless {msg => '', tty => $isatty,
@


1.7
log
@expose interface to "refresh" display after some disturbing operation.
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.6 2011/06/04 12:58:24 espie Exp $
a182 3
	$SIG{'__DIE__'} = sub {
		$self->reset_cursor;
	};
d345 1
@


1.6
log
@spaces
@
text
@d2 1
a2 1
# $OpenBSD$
d76 4
d160 6
d171 1
a171 1
	$self->{write} = 'go_write_home';
@


1.5
log
@initial support for fetching distfiles, somewhat experimental yet.
- clean up clock handling, jobs with timer.
- pass more parameters thru state
- tweak the engine to handle distfiles
- lots of new code in Fetch for new jobs.
@
text
@@


1.4
log
@refactor. fix yet another bug (always return something)
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.3 2010/10/25 17:23:13 espie Exp $
d23 1
a23 24
use Time::HiRes qw(time);

package DPB::Clock;

my $items = {};
sub register
{
	my ($class, $o) = @@_;
	$items->{$o} = $o;
}

sub unregister
{
	my ($class, $o) = @@_;
	delete $items->{$o};
}

sub stopped
{
	my ($class, $gap) = @@_;
	for my $o (values %$items) {
		$o->stopped_clock($gap);
	}
}
a52 2
my $stopped_clock;

d58 1
a58 1
		$stopped_clock = time();
d71 1
a71 1
		DPB::Clock->stopped(time() - $stopped_clock);
@


1.3
log
@use same pattern for oldlines.
(actually wrote this and the next few commits at the spa, in my head.
Now I just need to type them in and commit).
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.2 2010/10/25 10:46:11 espie Exp $
d283 19
a309 2
		my $newline = shift @@new;
		my $oldline = shift @@{$self->{oldlines}};
d311 1
a311 16
		# line didn't change: try to go down
		if (defined $oldline && $oldline eq $newline) {
			if ($self->{down}) {
				$r .= $self->{down};
				next;
			}
		}
		# adjust newline to correct length
		if (defined $oldline && (length $oldline) > (length $newline)) {
			if ($self->{cleareol}) {
				$r .= $self->clear_clamped($newline);
				next;
			}
			$newline .= " "x ((length $oldline) - (length $newline));
		}
		$r .= $self->clamped($newline);
d322 1
a322 1
		return if $n++ > $self->{height};
@


1.2
log
@display fix. I'm a moron
@
text
@d2 1
a2 1
# $OpenBSD$
d312 2
a313 1
	while (my $line = shift(@@{$self->{oldlines}})) {
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# $OpenBSD: Reporter.pm,v 1.13 2010/05/04 09:45:41 espie Exp $
d290 2
a291 1
	while (my $newline = shift @@new) {
@


1.1.1.1
log
@move stuff here from infra/build
@
text
@@
