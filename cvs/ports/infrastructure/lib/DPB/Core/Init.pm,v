head	1.29;
access;
symbols
	OPENBSD_6_2:1.29.0.2
	OPENBSD_6_2_BASE:1.29
	OPENBSD_6_1:1.28.0.8
	OPENBSD_6_1_BASE:1.28
	OPENBSD_6_0:1.28.0.6
	OPENBSD_6_0_BASE:1.28
	OPENBSD_5_9:1.28.0.2
	OPENBSD_5_9_BASE:1.28
	OPENBSD_5_8:1.28.0.4
	OPENBSD_5_8_BASE:1.28
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	OPENBSD_5_6:1.16.0.2
	OPENBSD_5_6_BASE:1.16
	OPENBSD_5_5:1.15.0.2
	OPENBSD_5_5_BASE:1.15
	OPENBSD_5_4:1.1.0.2
	OPENBSD_5_4_BASE:1.1;
locks; strict;
comment	@# @;


1.29
date	2017.06.20.15.46.18;	author espie;	state Exp;
branches;
next	1.28;
commitid	5GHCGmZGEX7eCk2a;

1.28
date	2015.07.27.17.19.46;	author espie;	state Exp;
branches;
next	1.27;
commitid	BfOIh312Dz5zQQRh;

1.27
date	2015.06.23.08.52.20;	author espie;	state Exp;
branches;
next	1.26;
commitid	o4oBMzUgnxu3NyFD;

1.26
date	2015.06.23.08.51.53;	author espie;	state Exp;
branches;
next	1.25;
commitid	32zs6aY8gWUWqLkN;

1.25
date	2015.05.16.18.14.04;	author espie;	state Exp;
branches;
next	1.24;
commitid	x3lefTDpWnvFuBn6;

1.24
date	2015.05.13.11.03.18;	author espie;	state Exp;
branches;
next	1.23;
commitid	aE7gR3uPnBfB78Mk;

1.23
date	2015.05.10.10.12.40;	author espie;	state Exp;
branches;
next	1.22;
commitid	c9nTR8wBLKFjycLv;

1.22
date	2015.05.08.12.35.53;	author espie;	state Exp;
branches;
next	1.21;
commitid	x9jAaLYc1uQYUMsf;

1.21
date	2015.05.02.12.55.43;	author espie;	state Exp;
branches;
next	1.20;
commitid	ZKkgptLKOetq1aKc;

1.20
date	2015.04.25.11.40.58;	author espie;	state Exp;
branches;
next	1.19;
commitid	uoRLcf51nveokBOa;

1.19
date	2015.04.25.10.07.19;	author espie;	state Exp;
branches;
next	1.18;
commitid	sqYWFhOhxTIklm1e;

1.18
date	2015.04.21.13.00.00;	author espie;	state Exp;
branches;
next	1.17;
commitid	dczQlHkrB794cgWu;

1.17
date	2014.10.11.09.03.18;	author espie;	state Exp;
branches;
next	1.16;
commitid	CThM4fzowW2KqcgW;

1.16
date	2014.03.10.09.34.07;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2013.11.17.09.43.09;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2013.10.17.08.12.28;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2013.10.14.07.38.36;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2013.10.08.07.35.10;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2013.10.06.17.21.53;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2013.10.06.14.01.52;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2013.10.06.13.53.12;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2013.10.06.13.33.36;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2013.10.05.08.40.55;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2013.10.04.20.28.41;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.03.17.34.44;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2013.09.21.08.46.06;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2013.09.21.08.40.09;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2013.09.08.11.10.59;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.21.09.05.18;	author espie;	state Exp;
branches;
next	;


desc
@@


1.29
log
@move redirect to UserProxy and introduce write_error.
redirect is only called thru a user, so have the error message be
more helpful in telling which user can't perform the redirect.
likewise, write_error should tell which user is involved.
don't wrap redirect_fh in run_as, because we're not opening any
new file.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Init.pm,v 1.28 2015/07/27 17:19:46 espie Exp $
#
# Copyright (c) 2010-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;
use DPB::Core;

# this is the code responsible for initializing all cores

package DPB::Task::Ncpu;
our @@ISA = qw(DPB::Task::Pipe);
sub run
{
	my ($self, $core) = @@_;
	$core->shell->exec(OpenBSD::Paths->sysctl, '-n', 'hw.ncpu');
}

sub finalize
{
	my ($self, $core) = @@_;
	my $fh = $self->{fh};
	if ($core->{status} == 0) {
		my $line = <$fh>;
		chomp $line;
		if ($line =~ m/^\d+$/) {
			$core->prop->{jobs} = $line;
		}
	}
	close($fh);
	$core->prop->{jobs} //= 1;
	return 1;
}

package DPB::Task::WhoAmI;
our @@ISA = qw(DPB::Task::Pipe);
sub run
{
	my ($self, $core) = @@_;
	$core->shell->nochroot->exec('/usr/bin/whoami');
}

sub finalize
{
	my ($self, $core) = @@_;
	my $fh = $self->{fh};
	if ($core->{status} == 0) {
		my $line = <$fh>;
		chomp $line;
		if ($line =~ m/^root$/) {
			$core->prop->{iamroot} = 1;
		} 
	}
	close($fh);
	&{$self->{extra_code}};
	return 1;
}

package DPB::Job::Init;
our @@ISA = qw(DPB::Job);
use DPB::Signature;

sub new
{
	my ($class, $logger) = @@_;
	my $o = $class->SUPER::new('init');
	$o->{logger} = $logger;
	return $o;
}

# if everything is okay, we mark our jobs as ready
sub finalize
{
	my ($self, $core) = @@_;
	$self->{signature}->print_out($core, $self->{logger});
	if ($self->{signature}->matches($core, $self->{logger})) {
		if (defined $core->prop->{squiggles}) {
			$core->host->{wantsquiggles} = $core->prop->{squiggles};
		} elsif ($core->prop->{jobs} > 3) {
			$core->host->{wantsquiggles} = 1;
		} elsif ($core->prop->{jobs} > 1) {
			$core->host->{wantsquiggles} = 0.8;
		}
		for my $i (1 .. $core->prop->{jobs}) {
			$core->clone->mark_ready;
		}
		return 1;
	} else {
		return 0;
    	}
}

# this is a weird one !
package DPB::Core::Init;
our @@ISA = qw(DPB::Core::WithJobs);
my $init = {};

sub new
{
	my ($class, $host, $prop) = @@_;
	if (DPB::Host->name_is_localhost($host)) {
		$host = 'localhost';
		$prop->{iamroot} = $< == 0;
	}
	return $init->{$host} //= DPB::Core->new_noreg($host, $prop);
}

sub hostcount
{
	return scalar(keys %$init);
}

sub taint
{
	my ($class, $host, $tag, $source) = @@_;
	if (defined $init->{$host}) {
		$init->{$host}->prop->{tainted} = $tag;
		$init->{$host}->prop->{tainted_source} = $source;
	}
}


sub alive_hosts
{
	my @@l = ();
	while (my ($host, $c) = each %$init) {
		if (defined $c->prop->{tainted}) {
			$host = "$host(".$c->prop->{tainted}.")";
		}
		if ($c->is_alive) {
			push(@@l, $host.$c->shell->stringize_master_pid);
		} else {
			push(@@l, $host.'-');
		}
	}
	return "Hosts: ".join(' ', sort(@@l))."\n";
}

sub changed_hosts
{
	my @@l = ();
	while (my ($host, $c) = each %$init) {
		my $was_alive = $c->{is_alive};
		if ($c->is_alive) {
			$c->{is_alive} = 1;
		} else {
			$c->{is_alive} = 0;
		}
		if ($was_alive && !$c->{is_alive}) {
			push(@@l, "$host went down\n");
		} elsif (!$was_alive && $c->{is_alive}) {
			push(@@l, "$host came up\n");
		}
	}
	return join('', sort(@@l));
}

DPB::Core->register_report(\&alive_hosts, \&changed_hosts);

sub cores
{
	return values %$init;
}

sub add_startup
{
	my ($self, $state, $logger, $core, $job, @@startup) = @@_;
	my $fetch = $state->{fetch_user};
	my $prop = $core->prop;
	my $build = $prop->{build_user};

	$job->add_tasks(DPB::Task::Fork->new(
	    sub {
		my $shell = shift;
		$logger->redirect($logger->logfile("init.".$core->hostname));
		$shell
		    ->chdir($state->ports)
		    ->as_root
		    ->env(PORTSDIR => $state->ports,
			MAKE => $state->make,
			WRKOBJDIR => $prop->{wrkobjdir},
			LOCKDIR => $prop->{portslockdir},
			BUILD_USER => $build->{user},
			BUILD_GROUP => $build->{group},
			FETCH_USER => $fetch->{user},
			FETCH_GROUP => $fetch->{group})
		    ->exec(@@startup);
	    }
	));
}

sub init_cores
{
	my ($self, $state) = @@_;

	my $logger = $state->logger;
	my $startup = $state->{startup_script};
	my $stale = $state->stalelocks;
	DPB::Core->set_logdir($logger->{logdir});
	if (values %$init == 0) {
		$state->fatal("configuration error: no job runner");
	}
	for my $core (values %$init) {
		my $job = DPB::Job::Init->new($logger);
		my $t = DPB::Task::WhoAmI->new;
		# XXX can't get these before I know who I am
		$t->{extra_code} = sub {
		    my $prop = $core->prop;
		    ($prop->{wrkobjdir}, $prop->{portslockdir}) = 
			DPB::Vars->get($core->shell, $state->{make}, 
			"WRKOBJDIR", "LOCKDIR");
		};
		$job->add_tasks($t);
		if (!defined $core->prop->{jobs}) {
			$job->add_tasks(DPB::Task::Ncpu->new);
		}
		DPB::Signature->add_tasks($state->{xenocara}, $job);
#		$self->add_startup($state, $logger, $core, $job, "/bin/sh",
#		    $state->ports."/infrastructure/bin/default-dpb-startup");
		if (defined $startup) {
			$self->add_startup($state, $logger, $core, $job, 
			    split(/\s+/, $startup));
		}

		my $tag = $state->locker->find_tag($core->hostname);
		if (defined $tag) {
			$core->prop->{tainted} = $tag;
		}
		if (defined $stale->{$core->hostname}) {
			my $subdirlist=join(' ', @@{$stale->{$core->hostname}});
			$job->add_tasks(DPB::Task::Fork->new(
			    sub {
				my $shell = shift;
				$logger->redirect( 
				    $logger->logfile("init.".$core->hostname));
				$shell
				    ->chdir($state->ports)
				    ->env(SUBDIR => $subdirlist)
				    ->exec($state->make, 'unlock');
			    }
			));
		}
		$core->start_job($job);
	}
	$state->{default_prop}{fetch_user} //= $state->{fetch_user};
	if ($state->opt('f')) {
		$state->{fetch_user}->enforce_local;
		for (1 .. $state->opt('f')) {
			DPB::Core::Fetcher->new('localhost', 
			    $state->{default_prop})->mark_ready;
		}
	}
}

1;
@


1.28
log
@grab a few more things off our ports tree introspection. Locally PLIST_DB.

Distantly, WRKOBJDIR and LOCKDIR, so that we can pass these off to a startup
script to ensure correct user.

The distant stuff has to happen at the right moment, after whoami, so that
we don't try to use doas/sudo unnecessarily...
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.27 2015/06/23 08:52:20 espie Exp $
d187 1
a187 6
		$state->{log_user}->run_as(
		    sub {
			DPB::Task->redirect(
			    $logger->logfile("init.".
			    $core->hostname));
		    });
d246 2
a247 2
				DPB::Task->redirect($logger->logfile("init.".
				$core->hostname));
@


1.27
log
@remove debug scaffolding
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.26 2015/06/23 08:51:53 espie Exp $
d67 1
d177 32
a219 1
	my $fetch = $state->{fetch_user};
a220 1
		my $build = $core->prop->{build_user};
d222 9
a230 1
		$job->add_tasks(DPB::Task::WhoAmI->new);
d235 2
d238 2
a239 22
			my @@args = split(/\s+/, $startup);
			$job->add_tasks(DPB::Task::Fork->new(
			    sub {
				my $shell = shift;
				$state->{log_user}->run_as(
				    sub {
					DPB::Task->redirect(
					    $logger->logfile("init.".
					    $core->hostname));
				    });
				$shell
				    ->chdir($state->ports)
				    ->as_root
				    ->env(PORTSDIR => $state->ports,
					MAKE => $state->make,
					BUILD_USER => $build->{user},
					BUILD_GROUP => $build->{group},
					FETCH_USER => $fetch->{user},
					FETCH_GROUP => $fetch->{group})
				    ->exec(@@args);
			    }
			));
d241 1
@


1.26
log
@tweak taintedness:
- fix actual bug in PortInfo
- restrict defined tags to !empty tags (shouldn't happen)
- track the source from locks as well.
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.25 2015/05/16 18:14:04 espie Exp $
a126 3
	if (!defined $tag || $tag eq '') {
		DPB::Util->die($source);
	}
@


1.25
log
@We never use groups separately, make it a grouplist.
Get group name as well.

Pass BUILD_USER/BUILD_GROUP/FETCH_USER/FETCH_GROUP as env variables to STARTUP
script.
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.24 2015/05/13 11:03:18 espie Exp $
d126 4
a129 1
	my ($class, $host, $tag) = @@_;
d132 1
d136 1
d141 1
a141 1
		if ($c->prop->{tainted}) {
@


1.24
log
@complete local users with groups list using id -G.

Use that when switching groups to enforce full correct list of groups.

Figure out users that must exist locally, and error out if they don't.

Based on feedback by sthen@@
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.23 2015/05/10 10:12:40 espie Exp $
d185 1
d187 1
d209 5
a213 1
				    	MAKE => $state->make)
@


1.23
log
@fetch_user is still taken from default prop...
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.22 2015/05/08 12:35:53 espie Exp $
d234 1
@


1.22
log
@it's all about the names.
Change "sudo" into "as_root" since in many cases, it won't use sudo at all
(and in the end, it WON'T use sudo ever)
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.21 2015/05/02 12:55:43 espie Exp $
d232 1
@


1.21
log
@use the per-user Core thingy: make sure fetch cores are built with the
default prop, and set them to run as fetch_user, so that I can remove
the explicit run_as in the ftp command.
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.20 2015/04/25 11:40:58 espie Exp $
d205 1
a205 1
				    ->sudo
@


1.20
log
@make most of the creatio files code able to change identity so that logging,
locking   don't happen as root.

Still need to do the fetchfiles/package linking part.
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.19 2015/04/25 10:07:19 espie Exp $
d234 2
a235 1
			DPB::Core::Fetcher->new('localhost', {})->mark_ready;
@


1.19
log
@figure out whether we're running as root on localhost, and then do most
things internally (chroot, setuid, etc)
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.18 2015/04/21 13:00:00 espie Exp $
d197 6
a202 2
				DPB::Task->redirect($logger->logfile("init.".
				    $core->hostname));
@


1.18
log
@make things cleaner and less magical
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.17 2014/10/11 09:03:18 espie Exp $
d114 1
@


1.17
log
@I had a few "doh" moments where I pointed dpb at an empty config file,
and waited for it NOT to start up. So prevent that from happening, which
is easy enough.
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.16 2014/03/10 09:34:07 espie Exp $
d76 1
a76 1
	my ($class, $logger, $xenocara) = @@_;
a78 1
	DPB::Signature->add_tasks($xenocara, $o);
d185 1
a185 1
		my $job = DPB::Job::Init->new($logger, $state->{xenocara});
d190 1
@


1.16
log
@figure out if we are running as root thru ssh, thus removing the need
for an extra sudo step
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.15 2013/11/17 09:43:09 espie Exp $
d182 3
@


1.15
log
@libdir based on experimental xenocara support
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.14 2013/10/17 08:12:28 espie Exp $
d47 23
d184 1
@


1.14
log
@do a few things later (preparing for -B)
Core::Init knows its hosts, so use that
knowledge to better separate Heuristics handling
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.13 2013/10/14 07:38:36 espie Exp $
d53 1
a53 1
	my ($class, $logger) = @@_;
d56 1
a56 1
	DPB::Signature->add_tasks($o);
d160 1
a160 1
		my $job = DPB::Job::Init->new($logger);
@


1.13
log
@as opi term-report shows, 0.7 is not quite high enough for a default.
crank up to 0.8. see what changes
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.12 2013/10/08 07:35:10 espie Exp $
d146 4
@


1.12
log
@possibly allow us to taint cores near startup
stringize pids differently, so that we don't append an extra " " to localhost
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.11 2013/10/06 17:21:53 espie Exp $
d71 1
a71 1
			$core->host->{wantsquiggles} = 0.7;
@


1.11
log
@funny
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.10 2013/10/06 14:01:52 espie Exp $
d101 8
d117 1
a117 1
			push(@@l, $host." ".$c->shell->stringize_master_pid);
@


1.10
log
@name tricky construct
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.9 2013/10/06 13:53:12 espie Exp $
d111 1
a111 1
			push(@@l, $c.'-');
@


1.9
log
@provide hostcount, to be used to make some decisions later, like
whether we want to trigger affinity, or if we want listing job to be extra.
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.8 2013/10/06 13:33:36 espie Exp $
d74 1
a74 1
			ref($core)->new($core->hostname, $core->prop)->mark_ready;
@


1.8
log
@update my copyright to 2013
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.7 2013/10/05 08:40:55 espie Exp $
d94 5
@


1.7
log
@as tested by landry, fractional squiggles make sense on dual-core boxes.
Note the value is skewed up because squiggles spend little time building
compared to other jobs.
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.6 2013/10/04 20:28:41 espie Exp $
d4 1
a4 1
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
@


1.6
log
@really need to store tags in locks, as dependencies in there will kill
me when restarting dpb...
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.5 2013/10/03 17:34:44 espie Exp $
d70 2
@


1.5
log
@move the "Hosts" status line to Core::Init, so that localhost gets an entry.
(will allow us to display extra core status, like tainted and such)
(this also pleases landry's sense of symetry)
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.4 2013/09/21 08:46:06 espie Exp $
d160 4
@


1.4
log
@activate squiggles(~):
based on a suggestion by naddy@@, reserve some cores on big hosts (>=4cpu)
to build the queue in reverse.

Those cores show up as ~ in the core list.
This gets rid of a large part of the exponential tail, where we spend
a lot of time waiting for locks...
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.2 2013/09/08 11:10:59 espie Exp $
d93 37
@


1.3
log
@avoid creating a core with fullhostname for localhost, preventing some
unpleasant aliasing effects
@
text
@d66 5
@


1.2
log
@explain about sudo to the Core runner.
@
text
@d2 1
a2 1
# $OpenBSD: Init.pm,v 1.1 2013/06/21 09:05:18 espie Exp $
d84 1
a84 4
		return $init->{localhost} //= DPB::Core::Local->new_noreg($host, $prop);
	} else {
		require DPB::Core::Distant;
		return $init->{$host} //= DPB::Core::Distant->new_noreg($host, $prop);
d86 1
@


1.1
log
@disentangle the config/init code from the rest.

- move the meat of handle_options from dpb into config->parse_command_line
(this means a backcall to still inherit from OpenBSD::State).
- move parse_config_files from core into config.
- move the prop handling into proper HostProperties (part of config
obviously)
- create a Core::Init file that contains all the former DPB::Host::Factory
and associated jobs.

there's still a wee little bit of cleanup to do, but this should be
easier to maintain, as all option handling is now in one place, and
startup and host confi is now easier to figure out.

- add a -DMIRROR=0/1  setup that controls whether SUPDISTFILES will be
fetched (defaults to 1 for -F and 0 for -f).

- actually allow for several host files to be parsed, as the name implies
@
text
@d2 1
a2 1
# $OpenBSD: Core.pm,v 1.36 2013/04/22 20:56:53 espie Exp $
a106 1
			unshift(@@args, OpenBSD::Paths->sudo, "-E");
d114 1
@

