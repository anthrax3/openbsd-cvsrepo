head	1.19;
access;
symbols
	OPENBSD_6_2:1.19.0.14
	OPENBSD_6_2_BASE:1.19
	OPENBSD_6_1:1.19.0.12
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.10
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.19.0.6
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.8
	OPENBSD_5_8_BASE:1.19
	OPENBSD_5_7:1.19.0.4
	OPENBSD_5_7_BASE:1.19
	OPENBSD_5_6:1.19.0.2
	OPENBSD_5_6_BASE:1.19
	OPENBSD_5_5:1.18.0.2
	OPENBSD_5_5_BASE:1.18
	OPENBSD_5_4:1.8.0.4
	OPENBSD_5_4_BASE:1.8
	OPENBSD_5_3:1.8.0.2
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.4.0.2
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	ports:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.19
date	2014.03.10.09.34.54;	author espie;	state Exp;
branches;
next	1.18;

1.18
date	2013.10.18.07.34.05;	author espie;	state Exp;
branches;
next	1.17;

1.17
date	2013.10.08.07.35.10;	author espie;	state Exp;
branches;
next	1.16;

1.16
date	2013.10.06.13.33.36;	author espie;	state Exp;
branches;
next	1.15;

1.15
date	2013.10.03.17.34.44;	author espie;	state Exp;
branches;
next	1.14;

1.14
date	2013.09.25.08.49.49;	author espie;	state Exp;
branches;
next	1.13;

1.13
date	2013.09.23.12.26.06;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2013.09.16.11.23.51;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2013.09.11.10.44.14;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2013.09.09.14.59.53;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2013.09.08.11.10.59;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2013.01.04.21.19.18;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2012.11.06.08.26.29;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2012.10.13.08.47.32;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2012.10.12.22.18.10;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2012.07.12.20.27.19;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.04.08.59.10;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.04.12.05.41;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.08.20.13.40.14;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.08.20.13.40.14;	author espie;	state Exp;
branches;
next	;


desc
@@


1.19
log
@explicitly prevent tty allocation on distant host
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Distant.pm,v 1.18 2013/10/18 07:34:05 espie Exp $
#
# Copyright (c) 2010-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;

use DPB::Core;
use OpenBSD::Paths;

package DPB::Host::Distant;
our @@ISA = (qw(DPB::Host));
sub shellclass
{
	return "DPB::Ssh";
}

sub is_localhost
{
	return 0;
}

sub is_alive
{
	my $self = shift;
	return $self->shell->is_alive;
}

package DPB::Ssh;
our @@ISA = qw(DPB::Shell::Chroot);

sub ssh
{
	my ($class, $socket) = @@_;
	return ('ssh', '-T', '-S', $socket);
}

sub new
{
	my ($class, $host) = @@_;
	bless {
	    master => DPB::Ssh::Master->find($host->name, 
	    	$host->{prop}->{timeout}),
	    prop => $host->{prop}
	    }, $class;
}

sub is_alive
{
	shift->{master}->is_alive;
}

sub socket
{
	shift->{master}->socket;
}

sub hostname
{
	shift->{master}->hostname;
}

sub stringize_master_pid
{
	my $shell = shift;
	my $pid = $shell->{master}->{pid};

	return " [$pid]";
}

sub _run
{
	my ($self, @@cmd) = @@_;
	my $try = 0;
	while (!-e $self->socket) {
		sleep(1);
		$try++;
		if ($try >= 60) {
			exit(1);
		}
	}
	exec {OpenBSD::Paths->ssh}
	    ($self->ssh($self->socket), $self->hostname, join(' ', @@cmd));
}

sub quote
{
	my ($self, $cmd) = @@_;
	return "\"$cmd\"";
}

package DPB::Task::SshMaster;
our @@ISA = qw(DPB::Task::Fork);
sub run
{
	my $self = shift;
	my $socket = $self->{socket};
	unlink($socket);
	my $timeout = $self->{timeout};
	my $host = $self->{host};
	close STDOUT;
	close STDERR;
	open STDOUT, '>/dev/null';
	open STDERR, '>&STDOUT';
	exec {OpenBSD::Paths->ssh}
	    (DPB::Ssh->ssh($socket),
	    	'-o', "connectTimeout=$timeout",
		'-o', "serverAliveInterval=$timeout",
		#'-o', "ClearAllForwardings=yes",
		'-o', "ForwardX11=no",
		'-o', "ForwardAgent=no",
		'-o', "GatewayPorts=no",
		'-N', '-M', $host);
	exit(1);
}

# we never error out
sub finalize
{
	return 1;
}

sub new
{
	my ($class, $socket, $timeout, $host) = @@_;
	bless {socket => $socket, timeout => $timeout, host => $host}, $class;
}

package DPB::Job::SshMaster;
our @@ISA = qw(DPB::Job::Infinite);

my $TMPDIR;
sub new
{
	my ($class, $host) = @@_;
	$TMPDIR //= $ENV{PKG_TMPDIR} || '/var/tmp';
	my $timeout = 60;
	my $socket = "$TMPDIR/ssh-$host-$$";
	my $o = $class->SUPER::new(DPB::Task::SshMaster->new($socket,
	    $timeout, $host), "ssh master for $host");
	$o->{host} = $host;
	$o->{timeout} = $timeout;
	$o->{socket} = $socket;
	return $o;
}

package DPB::Ssh::Master;
our @@ISA = qw(DPB::Core::Special);

my $master = {};

sub socket
{
	my $self = shift;
	return $self->job->{socket};
}

sub timeout
{
	my $self = shift;
	return $self->job->{timeout};
}

sub is_alive
{
	my $self = shift;
	return -e $self->socket;
}

sub create
{
	my ($class, $host, $timeout) = @@_;

	my $core = $class->SUPER::new($host);
	$core->start_job(DPB::Job::SshMaster->new($host, $timeout));
}

sub find
{
	my ($class, $host, $timeout) = @@_;
	$master->{$host} //= $class->create($host, $timeout);
}

package DPB::Core::Distant;
our @@ISA = qw(DPB::Core);
my @@dead_cores = ();

sub mark_ready
{
	my $self = shift;
	if ($self->is_alive) {
		$self->SUPER::mark_ready;
	} else {
		delete $self->{job};
		push(@@dead_cores, $self);
		return undef;
	}
}

sub check_dead_hosts
{
	my @@redo = @@dead_cores;
	@@dead_cores = ();
	for my $core (@@redo) {
		$core->mark_ready;
	}
}

DPB::Core->register_event(\&check_dead_hosts);

1;
@


1.18
log
@with the code reorg, it's more likely slaves will race with the master.
Due to the way ssh works, the only way to make sure the master is first
to create the socket is for the slaves to wait until it's actually there.
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.17 2013/10/08 07:35:10 espie Exp $
d47 1
a47 1
	return ('ssh', '-S', $socket);
@


1.17
log
@possibly allow us to taint cores near startup
stringize pids differently, so that we don't append an extra " " to localhost
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.16 2013/10/06 13:33:36 espie Exp $
d86 8
@


1.16
log
@update my copyright to 2013
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.15 2013/10/03 17:34:44 espie Exp $
d80 1
a80 1
	return "[$pid]";
@


1.15
log
@move the "Hosts" status line to Core::Init, so that localhost gets an entry.
(will allow us to display extra core status, like tainted and such)
(this also pleases landry's sense of symetry)
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.14 2013/09/25 08:49:49 espie Exp $
d4 1
a4 1
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
@


1.14
log
@a few more options to limit forwarding
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.13 2013/09/23 12:26:06 espie Exp $
d75 8
a186 36

sub alive_hosts
{
	my @@l = ();
	for my $shell (values %$master) {
		my $host = $shell->hostname;
		if ($shell->is_alive) {
			push(@@l, $host." [$shell->{pid}]");
		} else {
			push(@@l, $host.'-');
		}
	}
	return "Hosts: ".join(' ', sort(@@l))."\n";
}

sub changed_hosts
{
	my @@l = ();
	for my $shell (values %$master) {
		my $host = $shell->hostname;
		my $was_alive = $shell->{is_alive};
		if ($shell->is_alive) {
			$shell->{is_alive} = 1;
		} else {
			$shell->{is_alive} = 0;
		}
		if ($was_alive && !$shell->{is_alive}) {
			push(@@l, "$host went down\n");
		} elsif (!$was_alive && $shell->{is_alive}) {
			push(@@l, "$host came up\n");
		}
	}
	return join('', sort(@@l));
}

DPB::Core->register_report(\&alive_hosts, \&changed_hosts);
@


1.13
log
@simplify a bit: slaves don't need the socket timeout/keepalive options.
It only pertains to the master anyways
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.12 2013/09/16 11:23:51 espie Exp $
d105 4
@


1.12
log
@move the shell running code up to host. Makes no sense to have the same
data structure for each Core, and a lot of this is actually tied to the
host proper.

(note that Core::Distant no longer makes a lot of sense)
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.11 2013/09/11 10:44:14 espie Exp $
d46 2
a47 4
	my ($class, $socket, $timeout) = @@_;
	return ('ssh', '-o', "connectTimeout=$timeout",
	    '-o', "serverAliveInterval=$timeout",
	    '-S', $socket);
a49 3
#	    '-o', 'clearAllForwardings=yes',
#	    '-o', 'EscapeChar=none',

a69 5
sub timeout
{
	shift->{master}->timeout;
}

d79 1
a79 2
	    ($self->ssh($self->socket, $self->timeout),
	    $self->hostname, join(' ', @@cmd));
d102 3
a104 1
	    (DPB::Ssh->ssh($socket, $timeout),
@


1.11
log
@next step in chrooting, mostly refactor
- provide a chroot_user definition during prop finalize
- let shellclass be depend on the object built
- have all shells store prop and have access to it
- move the chrooted code into default core shell
- tweak running so that quoting/building commands happen everywhere
- change Config to recognize -B as a chroot override.

Tested thru distant chroot, local and distant !chroot
local chroot still not working, probably missing something stupid
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.10 2013/09/09 14:59:53 espie Exp $
d23 18
a223 11

sub shellclass
{
	"DPB::Ssh"
}

sub is_alive
{
	my $self = shift;
	return $self->{shell}->is_alive;
}
@


1.10
log
@make it possible to run distant hosts in a chroot
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.9 2013/09/08 11:10:59 espie Exp $
d24 1
a24 1
our @@ISA = qw(DPB::Shell::Abstract);
a39 7
	if ($host->{prop}->{chroot}) {
		if (!defined $host->{prop}->{chroot_user}) {
			my $user = `whoami`;
			chomp($user);
			$host->{prop}->{chroot_user} = $user;
		}
	}
d42 2
a43 1
	    	$host->{prop}->{timeout})
a66 5
sub prop
{
	shift->{master}->prop;
}

d69 1
a69 1
	my ($self, $cmd) = @@_;
d72 1
a72 1
	    $self->hostname, $cmd);
d75 1
a75 1
sub exec
d77 2
a78 27
	my ($self, @@argv) = @@_;
	my $chroot = $self->prop->{chroot};
	if ($self->{env}) {
		while (my ($k, $v) = each %{$self->{env}}) {
			$v //= '';
			unshift @@argv, "$k=\'$v\'";
		}
	}
	if ($self->{sudo} && !$chroot) {
		unshift(@@argv, OpenBSD::Paths->sudo, "-E");
	}
	my $cmd = join(' ', @@argv);
	if ($self->{dir}) {
		$cmd = "cd $self->{dir} && $cmd";
	}
	my $umask = $self->prop->{umask};
	$cmd = "umask $umask && $cmd";
	if ($chroot) {
		my @@cmd2 = (OpenBSD::Paths->sudo, "-E", "chroot");
		if (!$self->{sudo}) {
			push(@@cmd2, "-u", $self->prop->{chroot_user});
		}
		my $cmd2 = join(' ', @@cmd2, $chroot);
		$self->_run("$cmd2 sh -c \"$cmd\"");
	} else {
		$self->_run($cmd);
	}
@


1.9
log
@explain about sudo to the Core runner.
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.8 2013/01/04 21:19:18 espie Exp $
d40 7
d73 5
d89 1
d96 1
a96 1
	if ($self->{sudo}) {
d103 12
a114 2
	my $umask = $self->{master}{host}{prop}{umask};
	$self->_run("umask $umask && $cmd");
@


1.8
log
@make sure we zap any lingering socket before we restart our master.
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.7 2012/11/06 08:26:29 espie Exp $
d82 3
@


1.7
log
@don't mix up wait_timeout and waiting_timeout, as noticed by naddy@@.
re-enable wait_timeout on localhost temporarily (should be done in another
way, most probably by checking whether repo is on nfs, we can steal code
from VStat.pm)

pass umask through ssh. This took us long enough to figure out, and it's
considerably simpler than tweaking every login class once again.
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.6 2012/10/13 08:47:32 espie Exp $
d97 1
@


1.6
log
@zap warnings
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.5 2012/10/12 22:18:10 espie Exp $
d87 2
a88 1
	$self->_run($cmd);
@


1.5
log
@shrink msg
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.4 2012/07/12 20:27:19 espie Exp $
d79 1
@


1.4
log
@fix distant listings with SUBDIRLIST
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.3 2012/07/04 08:59:10 espie Exp $
d185 1
a185 1
	return "Distant hosts: ".join(' ', sort(@@l))."\n";
@


1.3
log
@remove distinction between local and distant running, always create
a shell object that can chdir, setenv, and exec commands.
(note that this executes stuff after fork, so permanent changes are cheap
and okay)

Also create it from "host" objects, which simplifies parameter passing.
@
text
@d2 1
a2 1
# $OpenBSD$
d22 1
d79 1
a79 1
			unshift @@argv, "$k=$v";
@


1.2
log
@clean-up job running a bit: add methods to Grabber and PortBuilder objects
to access more stuff they need.

Remove distantshell->make, ask state instead.
Provide state with the program we run, and the parameters we pass it.

- same make for distant and local hosts
- pass BUILD_ONCE=Yes if -a.
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.1.1.1 2010/08/20 13:40:14 espie Exp $
d23 1
d38 5
a42 2
	my ($class, $host, $timeout) = @@_;
	bless {master => DPB::Ssh::Master->find($host, $timeout)}, $class;
d65 1
a65 1
sub run
d73 15
d213 1
a213 1
sub new
d215 1
a215 12
	my ($class, $host, $prop) = @@_;
	my $o = $class->SUPER::new($host, $prop);
	$o->{shell} = DPB::Ssh->new($host);
	return $o;
}

sub new_noreg
{
	my ($class, $host, $prop) = @@_;
	my $o = $class->SUPER::new_noreg($host, $prop);
	$o->{shell} = DPB::Ssh->new($host, $prop->{timeout});
	return $o;
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# $OpenBSD: Distant.pm,v 1.8 2010/05/04 09:45:41 espie Exp $
a66 6
}

sub make
{
	my $self = shift;
	return OpenBSD::Paths->make;
@


1.1.1.1
log
@move stuff here from infra/build
@
text
@@
