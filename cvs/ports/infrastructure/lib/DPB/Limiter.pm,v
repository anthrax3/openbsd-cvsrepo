head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.10
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.8
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.2
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.3.0.4
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.2
	OPENBSD_5_3_BASE:1.3;
locks; strict;
comment	@# @;


1.7
date	2015.05.10.08.14.14;	author espie;	state Exp;
branches;
next	1.6;
commitid	J9XuZmxJc7sLMZLF;

1.6
date	2013.10.06.13.33.31;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2013.09.03.09.44.06;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2013.09.03.09.34.23;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2013.01.04.12.45.44;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2013.01.04.12.34.29;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.04.12.06.25;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@rename logger interface to desambiguate vs user.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Limiter.pm,v 1.6 2013/10/06 13:33:31 espie Exp $
#
# Copyright (c) 2010-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

# rate-limit some computation run.
# this is a mixin-class.

package DPB::Limiter;
use Time::HiRes qw(time);
use DPB::Util;
use DPB::Clock;

my $temp;
sub setup
{
	my ($self, $logger) = @@_;	

	$temp //= DPB::Util->make_hot($logger->append("performance"));
}

sub limit
{
	my ($self, $forced, $factor, $tag, $cond, $code) = @@_;
	$self->{ts} = time();
	$self->{start} = 0;	# so we can register ourselves
	$self->{next_check} //= $self->{ts};
	DPB::Clock->register($self);
	print $temp "$$\@@$self->{ts}: $tag";
	if (!($forced && $self->{unchecked}) &&
	    $self->{ts} < $self->{next_check} && $cond) {
	    	print $temp "-\n";
		$self->{unchecked} = 1;
		return 0;
	}

	delete $self->{unchecked};
	# actual computation
	$self->{start} = time();
	&$code;
	$self->{end} = time();
	# adjust values for next time
	my $check_interval = $factor * ($self->{end} - $self->{start});
	my $offset = $self->{ts} - $self->{next_check};
	$offset /= 2;
	$self->{next_check} = $self->{ts} + $check_interval;
	if ($offset > 0) {
	    $self->{next_check} -= $offset;
	}
	if ($self->{next_check} < $self->{end}) {
		$self->{next_check} = $self->{end};
	}
	print $temp 
	    sprintf("%s %.2f %.2f\n", $forced ? '!' : '+', 
	    $self->{next_check}, $check_interval);
	return $check_interval;
}

sub stopped_clock
{
	my ($self, $gap, $stopped) = @@_;
	$self->{start} += $gap;
	if ($self->{ts} >= $stopped) {
		$self->{ts} += $gap;
	}
	if ($self->{next_check} >= $stopped) {
		$self->{next_check} += $gap;
	}
}

1
@


1.6
log
@update my copyright to 2013
@
text
@d2 1
a2 1
# $OpenBSD: Limiter.pm,v 1.5 2013/09/03 09:44:06 espie Exp $
d34 1
a34 1
	$temp //= DPB::Util->make_hot($logger->open("performance"));
@


1.5
log
@reorganize code, so the periodic sleeper task no longer knows
its sleeping interval, but rather asks it from the reporter.

Give limiter customer access to timing information. Eventually,
the reporter could possibly shrink/enlarge the display timeout
automatically.
@
text
@d2 1
a2 1
# $OpenBSD: Limiter.pm,v 1.4 2013/09/03 09:34:23 espie Exp $
d4 1
a4 1
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
@


1.4
log
@pretty unlikely, but the Limiter measurements may straddle a ^Z/fg, so
it's better to adjust the timings there as well.
@
text
@d2 1
a2 1
# $OpenBSD: Limiter.pm,v 1.3 2013/01/04 12:45:44 espie Exp $
d71 1
a71 1
	return 1;
@


1.3
log
@tweak limiter output some more. offset display is not really needed,
but knowing about force computes might.
@
text
@d2 1
a2 1
# $OpenBSD: Limiter.pm,v 1.2 2013/01/04 12:34:29 espie Exp $
d25 1
a25 1
use Time::HiRes;
d27 1
d41 1
d43 1
d54 1
a54 1
	my $start = Time::HiRes::time();
d56 1
a56 1
	my $end = Time::HiRes::time();
d58 1
a58 1
	my $check_interval = $factor * ($end - $start);
d65 2
a66 2
	if ($self->{next_check} < $end) {
		$self->{next_check} = $end;
d72 12
@


1.2
log
@remove unneeded scaffold
@
text
@d2 1
a2 1
# $OpenBSD: Limiter.pm,v 1.1 2013/01/04 12:06:25 espie Exp $
d41 1
a41 1
	print $temp "$$\@@$self->{ts}: $tag ";
a57 2
	print $temp sprintf("%.2f ", $offset);

d66 2
a67 1
	    sprintf(" %.2f %.2f\n", $self->{next_check}, $check_interval);
@


1.1
log
@take the rate-limiting concept used for the engine, and make it available
elsewhere. Also use it for the Reporter, as it makes no sense to spend
THAT much time reporting quick changes, which actually slows the build.
($factor to tweak as needed).
@
text
@d2 1
a2 1
# $OpenBSD: Util.pm,v 1.2 2011/06/04 12:58:24 espie Exp $
d41 1
a41 1
	print $temp "$$\@@$self->{ts}: $tag " if defined $temp;
d44 1
a44 1
	    	print $temp "-\n" if defined $temp;
d58 1
a58 1
	print $temp sprintf("%.2f ", $offset) if defined $temp;
d68 1
a68 2
	    sprintf(" %.2f %.2f\n", $self->{next_check}, $check_interval)
	    if defined $temp;
@

