head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.2
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.21.0.2
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.20.0.2
	OPENBSD_5_9_BASE:1.20
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19;
locks; strict;
comment	@# @;


1.22
date	2016.10.21.00.45.43;	author espie;	state Exp;
branches;
next	1.21;
commitid	v9KVbVh2NnL7Ndbt;

1.21
date	2016.05.08.11.51.40;	author espie;	state Exp;
branches;
next	1.20;
commitid	uKWwBe0LbEnEkll4;

1.20
date	2015.08.20.16.03.07;	author espie;	state Exp;
branches;
next	1.19;
commitid	UiU3lGdNPIYSh3gM;

1.19
date	2015.07.15.14.28.08;	author espie;	state Exp;
branches;
next	1.18;
commitid	DWQ6eBO32rPLjWzo;

1.18
date	2015.06.01.20.39.06;	author espie;	state Exp;
branches;
next	1.17;
commitid	LVfjWbYRYuBNYgJJ;

1.17
date	2015.06.01.16.13.55;	author espie;	state Exp;
branches;
next	1.16;
commitid	DkMfFXJX9w4B8m02;

1.16
date	2015.05.18.16.35.15;	author espie;	state Exp;
branches;
next	1.15;
commitid	WWEEsziiaMhBBBcz;

1.15
date	2015.05.16.18.14.04;	author espie;	state Exp;
branches;
next	1.14;
commitid	x3lefTDpWnvFuBn6;

1.14
date	2015.05.16.12.23.05;	author espie;	state Exp;
branches;
next	1.13;
commitid	xn8GzI2D9fvG2nCc;

1.13
date	2015.05.13.15.14.13;	author espie;	state Exp;
branches;
next	1.12;
commitid	b3YGy69KcTKhteDI;

1.12
date	2015.05.13.15.05.56;	author espie;	state Exp;
branches;
next	1.11;
commitid	8PsYiQYZj36ivUrb;

1.11
date	2015.05.13.11.03.18;	author espie;	state Exp;
branches;
next	1.10;
commitid	aE7gR3uPnBfB78Mk;

1.10
date	2015.05.12.19.47.02;	author espie;	state Exp;
branches;
next	1.9;
commitid	hKH1WSuMnkgg4TEr;

1.9
date	2015.05.11.07.32.42;	author espie;	state Exp;
branches;
next	1.8;
commitid	vBBsknSvnNX94KWW;

1.8
date	2015.05.06.09.16.32;	author espie;	state Exp;
branches;
next	1.7;
commitid	YKsNRy9rTwbDBgnL;

1.7
date	2015.05.05.08.55.25;	author espie;	state Exp;
branches;
next	1.6;
commitid	5XB7BeylHmGbpY5C;

1.6
date	2015.05.03.10.33.02;	author espie;	state Exp;
branches;
next	1.5;
commitid	UriRp9R5lKJsfuKD;

1.5
date	2015.05.02.17.14.50;	author espie;	state Exp;
branches;
next	1.4;
commitid	wN8gUYYTBcNxlToz;

1.4
date	2015.05.02.16.41.20;	author espie;	state Exp;
branches;
next	1.3;
commitid	URerc5cLJW8bDIqm;

1.3
date	2015.05.02.16.07.44;	author espie;	state Exp;
branches;
next	1.2;
commitid	AejK8EgQML3tJj5c;

1.2
date	2015.05.02.13.12.39;	author espie;	state Exp;
branches;
next	1.1;
commitid	Rb4ZrbrDNb3MjI1X;

1.1
date	2015.05.02.09.44.40;	author espie;	state Exp;
branches;
next	;
commitid	1VP4TYxT74T6B9km;


desc
@@


1.22
log
@dpb cleans the permanent logs, always using the same pattern,
so write a method for that.

And don't fail silently when it doesn't work, because that causes
trouble down the line.

(e.g., your log user must be able to write into build-stats!!!)
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: User.pm,v 1.21 2016/05/08 11:51:40 espie Exp $
#
# Copyright (c) 2010-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

# handling user personalities

package DPB::User;
use Fcntl;

sub from_uid
{
	my ($class, $u, $g) = @@_;
	if (my ($l, undef, $uid, $gid) = getpwuid $u) {
		my $groups = `/usr/bin/id -G $u`;
		chomp $groups;
		if (defined $g) {
			$gid = $g;
		}
		my $group = getgrgid($gid);
		bless { user => $l, uid => $uid, 
		    group => $group, gid => $gid,
		    grouplist => "$gid $groups" }, $class;
	} else {
		return undef;
	}
}

sub new
{
	my ($class, $u) = @@_;
	# XXX getpwnam for local access, distant access is different
	if (my ($l, undef, $uid, $gid) = getpwnam $u) {
		my $groups = `/usr/bin/id -G $u`;
		chomp $groups;
		my $group = getgrgid($gid);
		bless { user => $l, uid => $uid, 
		    group => $group, gid => $gid,
		    grouplist => "$gid $groups" }, $class;
	} else {
		bless { user => $u}, $class;
	}
}

sub user
{
	my $self = shift;
	return $self->{user};
}

sub run_as
{
	my ($self, $code) = @@_;
	local $> = 0;
	local $) = $self->{grouplist};
	$> = $self->{uid};
	&$code;
}

sub enforce_local
{
	my $self = shift;
	if (!defined $self->{uid}) {
		print STDERR "User $self->{user} does not exist locally\n";
		exit 1;
	} else {
		return $self;
	}
}

sub _make_path
{
	my ($self, @@directories) = @@_;
	my $p = pop @@directories;
	if ($p->{mode}) {
		my $m = umask(0);
		File::Path::make_path(@@directories, $p);
		umask($m);
	} else {
		File::Path::make_path(@@directories, $p);
	}
}

sub make_path
{
	my ($self, @@directories) = @@_;
	require File::Path;
	my $p = {};
	if ($self->{dirmode}) {
		$p->{mode} = $self->{dirmode};
	}
	if ($self->{droppriv}) {
		local $> = 0;
		local $) = $self->{gid};
		$> = $self->{uid};
		$self->_make_path(@@directories, $p);
	} else {
		if ($self->{uid}) {
			$p->{uid} = $self->{uid};
		} else {
			$p->{owner} = $self->{user};
		}
		if ($self->{gid}) {
			$p->{group} = $self->{gid};
		}
		local ($>, $)) = (0, 0);
		$self->_make_path(@@directories, $p);
	}
}

sub open
{
	my ($self, $mode, @@parms) = @@_;
	local $> = 0;
	local $) = $self->{grouplist};
	$> = $self->{uid};
	# XXX don't try to read directories, there's opendir for that.
	if ($mode eq '<' && !-f $parms[0]) {
		return undef;
	}
	if (open(my $fh, $mode, @@parms)) {
		my $flags = fcntl($fh, F_GETFL, 0);
		fcntl($fh, F_SETFL, $flags | FD_CLOEXEC);
		return $fh;
	} else {
		return undef;
    	}
}

sub opendir
{
	my ($self, $dirname) = @@_;
	local $> = 0;
	local $) = $self->{grouplist};
	$> = $self->{uid};
	if (opendir(my $fh, $dirname)) {
		return $fh;
	} else {
		return undef;
    	}
}

sub unlink
{
	my ($self, @@links) = @@_;
	local $> = 0;
	local $) = $self->{grouplist};
	$> = $self->{uid};
	unlink(@@links);
}

sub link
{
	my ($self, $a, $b) = @@_;
	local $> = 0;
	local $) = $self->{grouplist};
	$> = $self->{uid};
	link($a, $b);
}

sub rename
{
	my ($self, $o, $n) = @@_;
	local $> = 0;
	local $) = $self->{grouplist};
	$> = $self->{uid};
	rename($o, $n);
}

sub stat
{
	my ($self, $name) = @@_;
	local $> = 0;
	local $) = $self->{grouplist};
	$> = $self->{uid};
	return stat $name;
}

sub rewrite_file
{
	my ($self, $state, $filename, $sub) = @@_;
	$self->make_path(File::Basename::dirname($filename));
	$self->run_as(
	    sub {
	    	my $f;
		if (!CORE::open $f, '>', "$filename.part") {
			$state->fatal("#1 can't write #2: #3",
			    $self->user, "$filename.part", $!);
		}
		&$sub($f);
		close $f;
		CORE::rename "$filename.part", $filename or
		    $state->fatal("#1 can't rename #2 to #3: #4",
		    	$self->user, "$filename.part", $filename, $!);
	    });
}

package DPB::UserProxy;
sub run_as
{
	my ($self, $code) = @@_;
	$self->user->run_as($code);
}

sub make_path
{
	my ($self, @@dirs) = @@_;
	$self->user->make_path(@@dirs);
}

sub open
{
	my ($self, @@parms) = @@_;
	return $self->user->open(@@parms);
}

sub file
{
	my ($self, $filename) = @@_;
	return DPB::UserFile->new($self, $filename);
}

sub opendir
{
	my ($self, $dirname) = @@_;
	return $self->user->opendir($dirname);
}

sub unlink
{
	my ($self, @@links) = @@_;
	return $self->user->unlink(@@links);
}

sub link
{
	my ($self, $a, $b) = @@_;
	return $self->user->link($a, $b);
}

sub rename
{
	my ($self, @@parms) = @@_;
	return $self->user->rename(@@parms);
}

sub stat
{
	my ($self, $name) = @@_;
	return $self->user->stat($name);
}

sub user
{
	my $self = shift;
	return $self->{user};
}

# since we don't want to keep too many open files, encapsulate
# filename + file
package DPB::UserFile;

sub new
{
	my ($class, $user, $filename) = @@_;
	bless {filename => $filename, user => $user}, $class;
}

sub name
{
	my $self = shift;
	return $self->{filename};
}

sub open
{
	my ($self, $mode) = @@_;
	return $self->{user}->open($mode, $self->name);
}

sub stat
{
	my $self = shift;
	return $self->{user}->stat($self->name);
}

1;
@


1.21
log
@reuse the User code in dpb instead of copying it.
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.20 2015/08/20 16:03:07 espie Exp $
d192 19
@


1.20
log
@oops, prevent opening directories as files.
problem noticed by jca@@, fixed patch.
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.19 2015/07/15 14:28:08 espie Exp $
d81 2
@


1.19
log
@make the default better. If dpb starts as root, use the owner of the ports
tree as a build_user.

Also shows all the users that dpb uses (locally).

(port_user is to be used by an interactive mode eventually).
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.18 2015/06/01 20:39:06 espie Exp $
d130 4
@


1.18
log
@bleh, fix fix. Wrong problem
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.17 2015/06/01 16:13:55 espie Exp $
d28 1
a28 1
	my ($class, $u) = @@_;
d32 3
@


1.17
log
@fix, noticed by naddy
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.16 2015/05/18 16:35:15 espie Exp $
d158 9
d222 6
a271 12
}

sub link
{
	my ($self, $a, $b) = @@_;
	return $self->{user}->link($a, $b);
}

sub unlink
{
	my ($self, @@l) = @@_;
	return $self->{user}->unlink(@@l);
@


1.16
log
@use File object (name + user) to ensure watched files are watched with the
correct user. Should fix sthen@@'s problems.

(File interface to be used elsewhere, as it's less cumbersome)
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.15 2015/05/16 18:14:04 espie Exp $
d257 12
@


1.15
log
@We never use groups separately, make it a grouplist.
Get group name as well.

Pass BUILD_USER/BUILD_GROUP/FETCH_USER/FETCH_GROUP as env variables to STARTUP
script.
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.14 2015/05/16 12:23:05 espie Exp $
d234 1
d249 6
d256 1
a256 1
	return $self->{user}->open($self->name);
@


1.14
log
@In -F mode, things are run directly from within dpb, so we must ensure
the user changes correctly.

OO is cool: no need to store the user in each distfile, since it's in
the repository.
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.13 2015/05/13 15:14:13 espie Exp $
d32 4
a35 2
		bless { user => $l, uid => $uid, gid => $gid,
		    groups => $groups }, $class;
d48 4
a51 2
		bless { user => $l, uid => $uid, gid => $gid, 
		    groups => $groups }, $class;
d67 1
a67 1
	local $) = "$self->{gid} $self->{groups}";
d125 1
a125 1
	local $) = "$self->{gid} $self->{groups}";
d140 1
a140 1
	local $) = "$self->{gid} $self->{groups}";
d153 1
a153 1
	local $) = "$self->{gid} $self->{groups}";
d162 1
a162 1
	local $) = "$self->{gid} $self->{groups}";
d171 1
a171 1
	local $) = "$self->{gid} $self->{groups}";
@


1.13
log
@make sure the base_user has everything it needs
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.12 2015/05/13 15:05:56 espie Exp $
d163 9
d176 1
a176 1
	$self->{user}->run_as($code);
d182 1
a182 1
	$self->{user}->make_path(@@dirs);
d188 1
a188 1
	return $self->{user}->open(@@parms);
d200 1
a200 1
	return $self->{user}->opendir($dirname);
d206 1
a206 1
	return $self->{user}->unlink(@@links);
d212 13
a224 1
	return $self->{user}->rename(@@parms);
@


1.12
log
@grr, thinko
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.11 2015/05/13 11:03:18 espie Exp $
d30 4
a33 1
		bless { user => $l, uid => $uid, gid => $gid }, $class;
@


1.11
log
@complete local users with groups list using id -G.

Use that when switching groups to enforce full correct list of groups.

Figure out users that must exist locally, and error out if they don't.

Based on feedback by sthen@@
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.10 2015/05/12 19:47:02 espie Exp $
d41 1
a41 1
		my $groups = `/usr/bin/id -g $u`;
@


1.10
log
@scrape non-working round-robin code
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.9 2015/05/11 07:32:42 espie Exp $
d41 4
a44 1
		bless { user => $l, uid => $uid, gid => $gid }, $class;
d60 1
a60 1
	local $) = $self->{gid};
d65 9
d118 1
a118 1
	local $) = $self->{gid};
d133 1
a133 1
	local $) = $self->{gid};
d146 1
a146 1
	local $) = $self->{gid};
d155 1
a155 1
	local $) = $self->{gid};
@


1.9
log
@move the fcntl FD_CLOEXEC code over to User, so that all opened files are
marked that way.
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.8 2015/05/06 09:16:32 espie Exp $
a44 14
}

sub next_user
{
	my $user = shift;
	if (!defined $user->{gen}) {
		if ($user->{user} =~ m/^(.*\D)(\d+)$/) {
			$user->{template} = $1;
			$user->{gen} = $2;
		} else {
			die "Can't figure out user template";
		}
    	}
	return ref($user)->new($user->{template}.$user->{gen}++);
@


1.8
log
@fix gid handling: first switch back to being root, THEN set gid, THEN set
uid.
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.7 2015/05/05 08:55:25 espie Exp $
d24 1
d123 2
d181 6
d203 21
@


1.7
log
@when local is too local, it can't work. Requires an extra indirection so that
dirs are made with the correct user.
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.6 2015/05/03 10:33:02 espie Exp $
d69 3
a71 1
	local ($>, $)) = ($self->{uid}, $self->{gid});
d97 3
a99 1
		local ($>, $)) = ($self->{uid}, $self->{gid});
d110 1
a110 1
#		local ($>, $)) = (0, 0);
d118 3
a120 1
	local ($>, $)) = ($self->{uid}, $self->{gid});
d131 3
a133 1
	local ($>, $)) = ($self->{uid}, $self->{gid});
d144 3
a146 1
	local ($>, $)) = ($self->{uid}, $self->{gid});
d153 3
a155 1
	local ($>, $)) = ($self->{uid}, $self->{gid});
@


1.6
log
@add a few more user convenience functions
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.5 2015/05/02 17:14:50 espie Exp $
d73 13
d96 1
d106 2
a107 7
	}
	if ($p->{mode}) {
		my $m = umask(0);
		File::Path::make_path(@@directories, $p);
		umask($m);
	} else {
		File::Path::make_path(@@directories, $p);
@


1.5
log
@tweak round-robin mode to start at the first id
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.4 2015/05/02 16:41:20 espie Exp $
d104 1
a104 1
	my ($self, $mode, $filename) = @@_;
d106 1
a106 1
	if (open(my $fh, $mode, $filename)) {
d113 25
d155 18
@


1.4
log
@add more knobs to handle directory issues under "hostile" circumstances
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.3 2015/05/02 16:07:44 espie Exp $
d57 1
a57 2
	$user->{gen}++;
	return ref($user)->new($user->{template}.$user->{gen});
@


1.3
log
@thinko
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.2 2015/05/02 13:12:39 espie Exp $
d79 5
a83 3
#	my $p = {mode => 0775};
	if ($self->{uid}) {
		$p->{uid} = $self->{uid};
d85 8
a92 4
		$p->{owner} = $self->{user};
	}
	if ($self->{gid}) {
		$p->{group} = $self->{gid};
@


1.2
log
@future round-robin mode, one user per-build.
@
text
@d2 1
a2 1
# $OpenBSD: User.pm,v 1.1 2015/05/02 09:44:40 espie Exp $
d86 1
a86 1
		$p->{gid} = $self->{gid};
@


1.1
log
@move the user handling code to a separate file.
remove "run_as" for open, we can do things directly.

More explicit code on open.
@
text
@d2 1
a2 1
# $OpenBSD: Config.pm,v 1.41 2015/05/01 19:42:54 espie Exp $
d46 15
d79 1
d88 7
a94 1
	File::Path::make_path(@@directories, $p);
@

