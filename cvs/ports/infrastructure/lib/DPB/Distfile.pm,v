head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.6
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.4
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.2
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.4
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.2
	OPENBSD_5_5_BASE:1.2;
locks; strict;
comment	@# @;


1.9
date	2015.10.30.10.27.50;	author espie;	state Exp;
branches;
next	1.8;
commitid	0vVCoQYXQJSHWU6M;

1.8
date	2015.06.22.12.18.00;	author espie;	state Exp;
branches;
next	1.7;
commitid	UzQNzwTINOw25Gbp;

1.7
date	2015.06.17.07.30.17;	author espie;	state Exp;
branches;
next	1.6;
commitid	YLXAJyeG0j0ohvRk;

1.6
date	2015.06.11.08.42.38;	author espie;	state Exp;
branches;
next	1.5;
commitid	ekCbOseoc88M9I00;

1.5
date	2015.05.16.12.23.05;	author espie;	state Exp;
branches;
next	1.4;
commitid	xn8GzI2D9fvG2nCc;

1.4
date	2015.05.10.08.14.14;	author espie;	state Exp;
branches;
next	1.3;
commitid	J9XuZmxJc7sLMZLF;

1.3
date	2014.12.07.15.18.50;	author espie;	state Exp;
branches;
next	1.2;
commitid	GynqjLfrNHwgIuss;

1.2
date	2013.11.08.10.48.27;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.25.13.40.42;	author espie;	state Exp;
branches;
next	;


desc
@@


1.9
log
@even if the file was already checksummed, add an extra check on the size.
Catches up cases of several dpb trampling each other.

Carefully delete any cached information (and the file itself) in case
things no longer match.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Distfile.pm,v 1.8 2015/06/22 12:18:00 espie Exp $
#
# Copyright (c) 2010-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;

use OpenBSD::md5;
use DPB::User;
package DPB::Distfile;
our @@ISA = (qw(DPB::UserProxy));

# same distfile may exist in several ports.
# so we keep a hash based on full storage path.

my $cache = {};

sub create
{
	my ($class, $file, $short, $site, $distinfo, $v, $repo) = @@_;

	bless {
		name => $file,
		short => $short,
		path => $v,
		repo => $repo
	}, $class;
}

# complete object with sha/size info, error out if not same info
sub complete
{
	my ($self, $file, $short, $site, $distinfo, $v, $repo) = @@_;
	my $sz = $distinfo->{size}{$file};
	my $sha = $distinfo->{sha}{$file};
	my $error = 0;
	if (!defined $sz || !defined $sha) {
		$v->break("Incomplete info for $file");
		return;
	}
	if (defined $self->{sz}) {
		if ($self->{sz} != $sz) {
			$v->break("Inconsistent info for $file: $self->{sz} vs $sz(".$v->fullpkgpath." vs ".$self->{path}->fullpkgpath.")");
			$error = 1;
		}
		if (!$self->{sha}->equals($sha)) {
			$v->break("Inconsistent info for $file ". 
			    $self->{sha}->stringize. " vs ". $sha->stringize.
			    "(".$v->fullpkgpath." vs ".
			    $self->{path}->fullpkgpath.")");
			$error = 1;
		}
	}
	if ($error) {
		return;
	} else {
		$repo->known_file($sha, $file);
		$self->{sz} = $sz;
		$self->{sha} = $sha;
		$self->{site} = $site;
		return $self;
	}
}

sub new
{
	my ($class, $file, $url, $dir, @@r) = @@_;
	my $full = (defined $dir) ? join('/', $dir->string, $file) : $file;
	if (!defined $url) {
		$url = $file;
	}
	my $c = $cache->{$full} //= $class->create($full, $url, @@r);
	$c->complete($full, $url, @@r);
	return $c;
}

sub user
{
	my $self = shift;
	return $self->{repo}->user;
}

sub distdir
{
	my ($self, @@rest) = @@_;
	return join('/', $self->{repo}->distdir, @@rest);
}

sub path
{
	return shift->{path};
}

sub logger
{
	my $self = shift;
	return $self->{repo}{logger};
}

sub debug_dump
{
	my $self = shift;
	my $msg = $self->logname;
	if ($self->{okay}) {
		$msg .= "(okay)";
	}
}

sub cached
{
	my $self = shift;
	return $self->{repo}{sha};
}

sub logname
{
	my $self = shift;
	return $self->{path}->fullpkgpath.":".$self->{name};
}

sub lockname
{
	return shift->{name}.".dist";
}

sub simple_lockname
{
	&lockname;
}

# should be used for rebuild_info and logging only

sub fullpkgpath
{
	return shift->{path}->fullpkgpath;
}

sub print_parent
{
	my ($self, $fh) = @@_;
	$self->{path}->print_parent($fh);
}

sub pkgpath_and_flavors
{
	return shift->{path}->pkgpath_and_flavors;
}

sub tempfilename
{
	my $self = shift;
	return $self->filename.".part";
}

sub filename
{
	my $self = shift;
	return $self->distdir($self->{name});
}

# this is the entry point from the Engine, this is run as soon as the path
# has been scanned. For performance reasons, we cannot run a sha at that point.
sub check
{
	my $self = shift;
	# XXX in fetch_only mode, we won't build anything, so this is
	# the only place we can check the file is okay
	if ($self->{repo}{fetch_only}) {
		return $self->checksum_and_cache($self->filename);
	} else {
		return $self->checkcache_or_size($self->filename);
	}
}

sub make_link
{
	my $self = shift;
	my $sha = $self->{sha}->stringize;
	if ($sha =~ m/^(..)/) {
		my $result = $self->distdir('by_cipher', 'sha256', $1, $sha);
		$self->make_path($result);
		my $dest = $self->{name};
		$dest =~ s/^.*\///;
		$self->link($self->filename, "$result/$dest");
	}
}

sub find_copy
{
	my ($self, $name) = @@_;

	# sha256 must match AND size as well
	my $alternate = $self->{repo}{reverse}{$self->{sha}->stringize};
	if (defined $alternate) {
		my $full = $self->distdir($alternate);
		if (($self->stat($full))[7] == $self->{sz}) {
			$self->unlink($name);
			if ($self->link($full, $name)) {
				$self->do_cache;
				$self->{okay} = 1;
				return 1;
			}
		}
	}
	return 0;
}

sub checkcache_or_size
{
	my ($self, $name) = @@_;
	# XXX if we matched once, then we match "forever"
	return 1 if $self->{okay};
	if (defined $self->cached->{$self->{name}}) {
		return $self->checkcached($name);
	}
	return $self->checksize($name);
}

sub checksize
{
	my ($self, $name) = @@_;
	# XXX if we matched once, then we match "forever"
	return 1 if $self->{okay};
	if (!defined $self->{sz}) {
		my $fh = $self->logger->append('dist/'.$self->{name});
		print $fh "incomplete distinfo: no size\n";
	}
		
	if (!$self->stat($name)) {
		return $self->find_copy($name);
	}
	if (($self->stat($name))[7] != $self->{sz}) {
		my $fh = $self->logger->append('dist/'.$self->{name});
		print $fh "size does not match\n";
		return 0;
	}
	return 1;
}

sub checkcached
{
	my ($self, $name) = @@_;
	if (!defined $self->{sha}) {
		my $fh = $self->logger->append('dist/'.$self->{name});
		print $fh "incomplete distinfo: no sha\n";
		return 0;
	}
	if (!defined $self->{sz}) {
		my $fh = $self->logger->append('dist/'.$self->{name});
		print $fh "incomplete distinfo: no size\n";
		return 0;
	}
	if (!$self->stat($name) || ($self->stat($name))[7] != $self->{sz}) {
		delete $self->cached->{$self->{name}};
		delete $self->{repo}{reverse}{$self->{sha}->stringize};
		$self->run_as(
		    sub {
			unlink($name);
		    });
		my $fh = $self->logger->append('dist/'.$self->{name});
		print $fh "size does not match, actual file deleted\n";
		return 0;
	}
		
	if ($self->cached->{$self->{name}}->equals($self->{sha})) {
		$self->{okay} = 1;
		return 1;
	} else {
		delete $self->cached->{$self->{name}};
		my $fh = $self->logger->append('dist/'.$self->{name});
		print $fh "sha cache info does not match,";
		if ($self->caches_okay($name)) {
			print $fh "but actual file had the right sha\n";
			return 1;
		} else {
			print $fh "and actual file was wrong, deleted\n";
			return 0;
		}
	}
}

sub do_cache
{
	my $self = shift;

	eval {
	$self->make_link;
	print {$self->{repo}->{log}} "SHA256 ($self->{name}) = ",
	    $self->{sha}->stringize, "\n";
	};
	# also enter ourselves into the internal repository
	$self->cached->{$self->{name}} = $self->{sha};
}

# this is where we actually enter new files in the cache, when they do match.
sub caches_okay
{
	my ($self, $name) = @@_;
	$self->run_as(
	    sub {
		if (-f -r $name) {
			if (OpenBSD::sha->new($name)->equals($self->{sha})) {
				$self->{okay} = 1;
				$self->do_cache;
				return 1;
			} else {
				unlink($name);
			}
		}
		return 0;
	    });
}

sub checksum_and_cache
{
	my ($self, $name) = @@_;
	# XXX if we matched once, then we match "forever"
	return 1 if $self->{okay};
	if (!defined $self->{sha}) {
		return 0;
	}
	if (defined $self->cached->{$self->{name}}) {
		return $self->checkcached($name);
	}
	if ($self->caches_okay($name)) {
		return 1;
	}
	return $self->find_copy($name);
}

sub cache
{
	my $self = shift;
	# XXX if we matched once, then we match "forever"
	return 1 if $self->{okay};
	$self->{okay} = 1;
	# already done
	if (defined $self->cached->{$self->{name}}) {
		if ($self->cached->{$self->{name}}->equals($self->{sha})) {
			return;
		}
	}
	$self->do_cache;
}

sub checksum
{
	my ($self, $name) = @@_;
	# XXX if we matched once, then we match "forever"
	return 1 if $self->{okay};
	print "checksum for $name: ";
	if (!defined $self->{sha}) {
		print "NONE\n";
		return 0;
	}
	if (defined $self->cached->{$self->{name}}) {
		if ($self->cached->{$self->{name}}->equals($self->{sha})) {
			print "OK (cached)\n";
			$self->{okay} = 1;
			return 1;
		}
	}
	if ($self->caches_okay($name)) {
		print "OK\n";
		return 1;
	}
	print "BAD\n";
	return 0;
}

sub cached_checksum
{
	my ($self, $fh, $name) = @@_;
	# XXX if we matched once, then we match "forever"
	return 1 if $self->{okay};
	print $fh "checksum for $name: ";
	if (!defined $self->{sha}) {
		print $fh "NONE\n";
		return 0;
	}
	if (defined $self->cached->{$self->{name}}) {
		if ($self->cached->{$self->{name}}->equals($self->{sha})) {
			print $fh "OK (cached)\n";
			$self->{okay} = 1;
			return 1;
		}
	}
	print $fh "UNKNOWN (uncached)\n";
	return 0;
}

sub unlock_conditions
{
	my ($self, $engine) = @@_;
	return $self->check;
}

sub requeue
{
	my ($v, $engine) = @@_;
	$engine->requeue_dist($v);
}

sub forget
{
	my $self = shift;
	delete $self->{sz};
	delete $self->{sha};
	delete $self->{okay};
}

1;
@


1.8
log
@expand on comments, reorder code.
better diagnostic if one distfile checksum isn't consistent.
@
text
@d2 1
a2 1
# $OpenBSD: Distfile.pm,v 1.7 2015/06/17 07:30:17 espie Exp $
d236 1
a236 1
	if ($self->{sz} == 0) {
d260 17
@


1.7
log
@tweak logic a bit: recheck sz and sha each time we encounter the same
distfile (error out if things are not consistent)

Fix bug: properly forget sz, give rescan a chance
@
text
@d2 1
a2 1
# $OpenBSD: Distfile.pm,v 1.6 2015/06/11 08:42:38 espie Exp $
d26 1
d42 1
d55 1
a55 1
			$v->break("Inconsistent info for $file: $self->{sz} vs $sz");
d60 3
a62 1
			    $self->{sha}->stringize. " vs ". $sha->stringize);
d77 12
a124 12
}

sub new
{
	my ($class, $file, $url, $dir, @@r) = @@_;
	my $full = (defined $dir) ? join('/', $dir->string, $file) : $file;
	if (!defined $url) {
		$url = $file;
	}
	my $c = $cache->{$full} //= $class->create($full, $url, @@r);
	$c->complete($full, $url, @@r);
	return $c;
@


1.6
log
@handle distfile failure better.
- we do rescan paths anyway, so make sure we queue only path.
- forgetting distfile details does not get around caching, so do creation
of distfiles in two times. cache is there to ensure unique distfiles, and
we can still forget details.
To do: remove distfiles from queue during forget, because there's no longer
any detail there.
@
text
@d2 1
a2 1
# $OpenBSD: Distfile.pm,v 1.5 2015/05/16 12:23:05 espie Exp $
d33 1
a33 1
	my $o = bless {
a38 1
	return $o->complete($file, $short, $site, $distinfo, $v, $repo);
d46 1
d51 20
a70 5
	$repo->known_file($sha, $file);
	$self->{sz} = $sz;
	$self->{sha} = $sha;
	$self->{site} = $site;
	return $self;
d119 1
a119 3
	if (defined $c && !defined $c->{sha}) {
		$c->complete($full, $url, @@r);
	}
d398 1
a398 1
	delete $self->{size};
@


1.5
log
@In -F mode, things are run directly from within dpb, so we must ensure
the user changes correctly.

OO is cool: no need to store the user in each distfile, since it's in
the repository.
@
text
@d2 1
a2 1
# $OpenBSD: Distfile.pm,v 1.4 2015/05/10 08:14:14 espie Exp $
d33 12
d52 4
a55 9
	bless {
		name => $file,
		short => $short,
		sz => $sz,
		sha => $sha,
		site => $site,
		path => $v,
		repo => $repo,
	}, $class;
d70 5
d103 5
a107 1
	$cache->{$full} //= $class->create($full, $url, @@r);
@


1.4
log
@rename logger interface to desambiguate vs user.
@
text
@d2 1
a2 1
# $OpenBSD: Distfile.pm,v 1.3 2014/12/07 15:18:50 espie Exp $
d21 1
d23 1
d51 6
d147 1
a147 1
	if ($self->{repo}->{fetch_only}) {
d160 1
a160 1
		File::Path::make_path($result);
d163 1
a163 1
		link $self->filename, "$result/$dest";
d175 3
a177 3
		if ((stat $full)[7] == $self->{sz}) {
			unlink($name);
			if (link($full, $name)) {
d208 1
a208 1
	if (!stat $name) {
d211 1
a211 1
	if ((stat _)[7] != $self->{sz}) {
d261 10
a270 7
	if (-f -r $name) {
		if (OpenBSD::sha->new($name)->equals($self->{sha})) {
			$self->{okay} = 1;
			$self->do_cache;
			return 1;
		} else {
			unlink($name);
d272 2
a273 2
	}
	return 0;
@


1.3
log
@wrap die so that it drops into the debugger if we run under perl -d.

change the way we do rescans again, to avoid race conditions:
just store away *all* pkgpaths related to the rescan (so that multi-packages
are covered) and then do the rescan. Hold those like we do for normal locks
but in a different list, and release them when the scan is over.

remove the atrocious shennanigans wrt fullpkgnames, it shouldn't be needed
again, hopefully.
@
text
@d2 1
a2 1
# $OpenBSD: Distfile.pm,v 1.2 2013/11/08 10:48:27 espie Exp $
d196 1
a196 1
		my $fh = $self->logger->open('dist/'.$self->{name});
d204 1
a204 1
		my $fh = $self->logger->open('dist/'.$self->{name});
d215 1
a215 1
		my $fh = $self->logger->open('dist/'.$self->{name});
d224 1
a224 1
		my $fh = $self->logger->open('dist/'.$self->{name});
@


1.2
log
@rebuild_info has a mix of pkgpath and distfiles, so we need this to
exist.
@
text
@d2 1
a2 1
# $OpenBSD: Distfile.pm,v 1.1 2013/10/25 13:40:42 espie Exp $
a106 4
}

sub ensure_fullpkgname
{
@


1.1
log
@split up the fetch code for readability.
don't bother passing logger around, just keep it in the fetch object,
the distfile objects, and use it directly, that's simpler.
@
text
@d2 1
a2 1
# $OpenBSD: Fetch.pm,v 1.60 2013/10/17 18:09:41 espie Exp $
d107 4
@

