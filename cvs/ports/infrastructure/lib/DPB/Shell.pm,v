head	1.17;
access;
symbols
	OPENBSD_6_0:1.17.0.6
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.17
date	2015.07.21.05.10.12;	author naddy;	state Exp;
branches;
next	1.16;
commitid	fLpjbJu4kEnyMIHg;

1.16
date	2015.05.20.11.54.35;	author espie;	state Exp;
branches;
next	1.15;
commitid	OaeXCcKx9VxGY8yC;

1.15
date	2015.05.20.08.34.45;	author espie;	state Exp;
branches;
next	1.14;
commitid	aruomnyjisvjF65d;

1.14
date	2015.05.17.08.29.31;	author espie;	state Exp;
branches;
next	1.13;
commitid	vvnBAlnIjpqxFZXO;

1.13
date	2015.05.16.18.14.04;	author espie;	state Exp;
branches;
next	1.12;
commitid	x3lefTDpWnvFuBn6;

1.12
date	2015.05.13.11.03.18;	author espie;	state Exp;
branches;
next	1.11;
commitid	aE7gR3uPnBfB78Mk;

1.11
date	2015.05.12.19.49.54;	author espie;	state Exp;
branches;
next	1.10;
commitid	0OaJrdkKYfHagjSI;

1.10
date	2015.05.12.19.47.47;	author espie;	state Exp;
branches;
next	1.9;
commitid	FFCtoC2V6xEVtpbC;

1.9
date	2015.05.08.12.35.53;	author espie;	state Exp;
branches;
next	1.8;
commitid	x9jAaLYc1uQYUMsf;

1.8
date	2015.05.05.08.54.22;	author espie;	state Exp;
branches;
next	1.7;
commitid	O6m41wNML09nJNgh;

1.7
date	2015.05.02.15.59.06;	author espie;	state Exp;
branches;
next	1.6;
commitid	9bIVwDFINmS3YIxm;

1.6
date	2015.05.02.11.04.38;	author espie;	state Exp;
branches;
next	1.5;
commitid	FDOEL4BdKqgokIWO;

1.5
date	2015.04.27.17.01.37;	author espie;	state Exp;
branches;
next	1.4;
commitid	d5DD0wclQSFVKzXO;

1.4
date	2015.04.26.17.36.20;	author espie;	state Exp;
branches;
next	1.3;
commitid	OskFOg3qB8BTNHE8;

1.3
date	2015.04.25.10.07.19;	author espie;	state Exp;
branches;
next	1.2;
commitid	sqYWFhOhxTIklm1e;

1.2
date	2015.04.21.09.23.57;	author espie;	state Exp;
branches;
next	1.1;
commitid	qJeUeGqdv3D47y7R;

1.1
date	2014.12.25.15.14.14;	author espie;	state Exp;
branches;
next	;
commitid	4T2EL5Ro5f9nUYOi;


desc
@@


1.17
log
@switch dpb from sudo to doas (and env as required); ok sthen@@
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Shell.pm,v 1.16 2015/05/20 11:54:35 espie Exp $
#
# Copyright (c) 2010-2014 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;

# the shell package is used to exec commands.
# note that we're dealing with exec, so we can modify the object/context
# itself with abandon
package DPB::Shell::Abstract;

sub new
{
	my ($class, $host) = @@_;
	$host //= {}; # this makes it possible to build "localhost" shells
	bless {as_root => 0, prop => $host->{prop}}, $class;
}

sub prop
{
	my $self = shift;
	return $self->{prop};
}

sub stringize_master_pid
{
	return "";
}

sub chdir
{
	my ($self, $dir) = @@_;
	$self->{dir} = $dir;
	return $self;
}

sub env
{
	my ($self, %h) = @@_;
	while (my ($k, $v) = each %h) {
		$self->{env}{$k} = $v;
	}
	return $self;
}

sub as_root
{
	my ($self, $val) = @@_;
	# XXX calling as_root without parms is equivalent to saying "1"
	if (@@_ == 1) {
		$val = 1;
	}
	$self->{as_root} = $val;
	return $self;
}

sub run_as
{
	my ($self, $user) = @@_;
	$self->{user} = $user;
	return $self;
}

sub nochroot
{
	my $self = shift;
	$self->{nochroot} = 1;
	return $self;
}

package DPB::Shell::Local;
our @@ISA = qw(DPB::Shell::Abstract);

sub is_alive
{
	return 1;
}

sub chdir
{
	my ($self, $dir) = @@_;
	CORE::chdir($dir) or DPB::Util->die_bang("Can't chdir to $dir");
	return $self;
}

sub env
{
	my ($self, %h) = @@_;
	while (my ($k, $v) = each %h) {
		$ENV{$k} = $v;
	}
	return $self;
}

sub exec
{
	my ($self, @@argv) = @@_;
	if ($self->{as_root}) {
		unshift(@@argv, OpenBSD::Paths->doas);
	}
	if (-t STDIN) {
		close(STDIN);
		open STDIN, '</dev/null';
	}
	exec {$argv[0]} @@argv;
}

package DPB::Shell::Chroot;
our @@ISA = qw(DPB::Shell::Abstract);
sub exec
{
	my ($self, @@argv) = @@_;
	my $chroot = $self->prop->{chroot};
	if ($self->{nochroot}) {
		undef $chroot;
	}
	if ($self->prop->{iamroot}) {
		$chroot //= '/';
	}
	unshift @@argv, 'exec' unless $self->{as_root} && !$chroot;
	if ($self->{env}) {
		while (my ($k, $v) = each %{$self->{env}}) {
			$v //= '';
			unshift @@argv, "$k=\'$v\'";
		}
	}
	if ($self->{as_root} && !$chroot) {
		unshift(@@argv, 'exec', OpenBSD::Paths->doas,
		    OpenBSD::Paths->env);
	}
	my $cmd = join(' ', @@argv);
	if ($self->{dir}) {
		$cmd = "cd $self->{dir} && $cmd";
	}
	if (defined $self->prop->{umask}) {
		my $umask = $self->prop->{umask};
		$cmd = "umask $umask && $cmd";
	}
	$self->{user} //= $self->prop->{build_user};
	if ($chroot) {
		my @@cmd2 = ("chroot");
		if (!$self->prop->{iamroot}) {
			unshift(@@cmd2, OpenBSD::Paths->doas);
		}
		if (!$self->{as_root} && defined $self->{user}) {
			push(@@cmd2, "-u", $self->{user}->user);
		}
		$self->_run(@@cmd2, $chroot, "/bin/sh", "-c", 
		    $self->quote($cmd));
	} else {
		$self->_run($cmd);
	}
}

package DPB::Shell::Local::Chroot;
our @@ISA = qw(DPB::Shell::Chroot);
sub _run
{
	my ($self, @@argv) = @@_;
	if (-t STDIN) {
		close(STDIN);
		open STDIN, '</dev/null';
	}
	exec {$argv[0]} @@argv;
}

sub quote
{
	my ($self, $cmd) = @@_;
	return $cmd;
}

sub is_alive
{
	return 1;
}

sub nochroot
{
	my $self = shift;
	bless $self, 'DPB::Shell::Local';
}

package DPB::Shell::Local::Root;
our @@ISA = qw(DPB::Shell::Local::Chroot);
use POSIX;

sub exec
{
	my ($self, @@argv) = @@_;
	$> = 0;
	$) = 0;
	$self->SUPER::exec(@@argv);
}

sub nochroot
{
	my $self = shift;
	$self->{nochroot} = 1;
	return $self;
}
1;
@


1.16
log
@fix "nochroot" mode. Problem noticed by Mark Patruck
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.15 2015/05/20 08:34:45 espie Exp $
d112 1
a112 1
		unshift(@@argv, OpenBSD::Paths->sudo, "-E");
d141 2
a142 1
		unshift(@@argv, 'exec', OpenBSD::Paths->sudo, "-E");
d156 1
a156 1
			unshift(@@cmd2, OpenBSD::Paths->sudo, "-E");
@


1.15
log
@zap local code. Now that chroot changes class, it's much better to use it
directly.
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.14 2015/05/17 08:29:31 espie Exp $
d208 6
@


1.14
log
@make sure we switch to a directory within the chroot on localhost,
as per chroot(8).
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.13 2015/05/16 18:14:04 espie Exp $
d197 1
a197 1
our @@ISA = qw(DPB::Shell::Abstract);
a202 1
	my $chroot = $self->prop->{chroot};
d205 1
a205 30
	if ($self->{nochroot}) {
		undef $chroot;
	}
	if (defined $chroot) {
		chroot($chroot);
	}
	$self->{user} //= $self->prop->{build_user};
	if (!$self->{as_root} && defined $self->{user}) {
		$) = $self->{user}{grouplist};
		setgid($self->{user}{gid});
		setuid($self->{user}{uid});
	}
	if ($self->{env}) {
		while (my ($k, $v) = each %{$self->{env}}) {
			$v //= '';
			$ENV{$k} = $v;
		}
	}
	$self->{dir} //= '/';
	CORE::chdir($self->{dir}) or 
	    DPB::Util->die_bang("Can't chdir to $self->{dir}");

	if (defined $self->prop->{umask}) {
		umask(oct($self->prop->{umask}));
	}
	if (-t STDIN) {
		close(STDIN);
		open STDIN, '</dev/null';
	}
	exec {$argv[0]} @@argv;
@


1.13
log
@We never use groups separately, make it a grouplist.
Get group name as well.

Pass BUILD_USER/BUILD_GROUP/FETCH_USER/FETCH_GROUP as env variables to STARTUP
script.
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.12 2015/05/13 11:03:18 espie Exp $
d224 3
a226 4
	if ($self->{dir}) {
		CORE::chdir($self->{dir}) or 
		    DPB::Util->die_bang("Can't chdir to $self->{dir}");
	}
@


1.12
log
@complete local users with groups list using id -G.

Use that when switching groups to enforce full correct list of groups.

Figure out users that must exist locally, and error out if they don't.

Based on feedback by sthen@@
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.11 2015/05/12 19:49:54 espie Exp $
d214 1
a214 1
		$) = "$self->{user}{gid} $self->{user}{groups}";
@


1.11
log
@go to root more correctly.
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.10 2015/05/12 19:47:47 espie Exp $
d214 1
@


1.10
log
@fix the start as root, non chroot distant case, by making it chroot /
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.9 2015/05/08 12:35:53 espie Exp $
d204 2
a205 1
	($>, $)) = (0, 0);
@


1.9
log
@it's all about the names.
Change "sudo" into "as_root" since in many cases, it won't use sudo at all
(and in the end, it WON'T use sudo ever)
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.8 2015/05/05 08:54:22 espie Exp $
d130 3
d160 2
a161 1
		$self->_run(@@cmd2, $chroot, "/bin/sh", "-c", $self->quote($cmd));
@


1.8
log
@go back to being groot if we dropped privileges.
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.7 2015/05/02 15:59:06 espie Exp $
d29 1
a29 1
	bless {sudo => 0, prop => $host->{prop}}, $class;
d59 1
a59 1
sub sudo
d62 1
a62 1
	# XXX calling sudo without parms is equivalent to saying "1"
d66 1
a66 1
	$self->{sudo} = $val;
d111 1
a111 1
	if ($self->{sudo}) {
d130 1
a130 1
	unshift @@argv, 'exec' unless $self->{sudo} && !$chroot;
d137 1
a137 1
	if ($self->{sudo} && !$chroot) {
d154 1
a154 1
		if (!$self->{sudo} && defined $self->{user}) {
d208 1
a208 1
	if (!$self->{sudo} && defined $self->{user}) {
@


1.7
log
@fix gid switch
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.6 2015/05/02 11:04:38 espie Exp $
d200 1
@


1.6
log
@allow setting user thru the Core (for future round-robin builds)
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.5 2015/04/27 17:01:37 espie Exp $
d208 1
a209 1
		setgid($self->{user}{gid});
@


1.5
log
@in a bizarre twist, since we store umask an an octal string, we need
to convert it back to use the built-in properly.
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.4 2015/04/26 17:36:20 espie Exp $
d148 1
d154 2
a155 2
		if (!$self->{sudo} && defined $self->prop->{build_user}) {
			push(@@cmd2, "-u", $self->prop->{build_user}->user);
@


1.4
log
@Add a way to make_path with uig/gid.
Add a way to run local jobs as another user.
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.3 2015/04/25 10:07:19 espie Exp $
d222 1
a222 1
		umask($self->prop->{umask});
@


1.3
log
@figure out whether we're running as root on localhost, and then do most
things internally (chroot, setuid, etc)
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.2 2015/04/21 09:23:57 espie Exp $
d70 7
d205 4
a208 3
	if (!$self->{sudo} && defined $self->prop->{build_user}) {
		setuid($self->prop->{build_user}{uid});
		setgid($self->prop->{build_user}{gid});
a229 1

@


1.2
log
@start reorg the way we handle users.
@
text
@d2 1
a2 1
# $OpenBSD: Shell.pm,v 1.1 2014/12/25 15:14:14 espie Exp $
d183 40
@


1.1
log
@regorg code, no actual change
@
text
@d2 1
a2 1
# $OpenBSD$
d146 2
a147 2
		if (!$self->{sudo} && defined $self->prop->{chroot_user}) {
			push(@@cmd2, "-u", $self->prop->{chroot_user});
@

