head	1.24;
access;
symbols
	OPENBSD_6_0:1.24.0.6
	OPENBSD_6_0_BASE:1.24
	OPENBSD_5_9:1.24.0.2
	OPENBSD_5_9_BASE:1.24
	OPENBSD_5_8:1.24.0.4
	OPENBSD_5_8_BASE:1.24
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	OPENBSD_5_6:1.13.0.2
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.12.0.2
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.10.0.4
	OPENBSD_5_4_BASE:1.10
	OPENBSD_5_3:1.10.0.2
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.8.0.2
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.2
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	ports:1.1.1.1
	espie:1.1.1;
locks; strict;
comment	@# @;


1.24
date	2015.05.25.17.37.26;	author espie;	state Exp;
branches;
next	1.23;
commitid	QqpFTOuI9ces1v3i;

1.23
date	2015.05.11.07.32.42;	author espie;	state Exp;
branches;
next	1.22;
commitid	vBBsknSvnNX94KWW;

1.22
date	2015.05.10.08.40.06;	author espie;	state Exp;
branches;
next	1.21;
commitid	p4gVCPC3IBs55h2g;

1.21
date	2015.05.10.08.14.14;	author espie;	state Exp;
branches;
next	1.20;
commitid	J9XuZmxJc7sLMZLF;

1.20
date	2015.05.03.10.33.59;	author espie;	state Exp;
branches;
next	1.19;
commitid	lBfNuZOkyaPdWlyt;

1.19
date	2015.05.02.09.44.40;	author espie;	state Exp;
branches;
next	1.18;
commitid	1VP4TYxT74T6B9km;

1.18
date	2015.05.01.20.49.46;	author espie;	state Exp;
branches;
next	1.17;
commitid	xlo9DiT0WGFHt2dV;

1.17
date	2015.04.26.18.00.19;	author espie;	state Exp;
branches;
next	1.16;
commitid	V6PNfhncU60d7XW1;

1.16
date	2015.04.25.11.40.58;	author espie;	state Exp;
branches;
next	1.15;
commitid	uoRLcf51nveokBOa;

1.15
date	2015.04.21.09.53.13;	author espie;	state Exp;
branches;
next	1.14;
commitid	lGAocVQGyzRmFit9;

1.14
date	2014.12.07.15.18.50;	author espie;	state Exp;
branches;
next	1.13;
commitid	GynqjLfrNHwgIuss;

1.13
date	2014.03.15.09.51.27;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	2013.10.25.16.54.27;	author espie;	state Exp;
branches;
next	1.11;

1.11
date	2013.10.06.13.33.32;	author espie;	state Exp;
branches;
next	1.10;

1.10
date	2013.01.04.19.34.10;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2012.10.11.07.38.38;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2012.07.10.09.38.37;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.13.10.34.35;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.06.17.56.53;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.06.12.20.32;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2011.06.04.12.58.24;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2011.05.22.08.21.39;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.12.21.21.03;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.08.20.13.40.13;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.08.20.13.40.13;	author espie;	state Exp;
branches;
next	;


desc
@@


1.24
log
@clean up some of the oldest code converted to separate users
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Logger.pm,v 1.23 2015/05/11 07:32:42 espie Exp $
#
# Copyright (c) 2010-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use DPB::User;

package DPB::Logger;
our @@ISA = (qw(DPB::UserProxy));
use File::Path;
use File::Basename;
use IO::File;

sub new
{
	my ($class, $state) = @@_;
	if (!defined $state->{log_user}) {
		die "Too early";
	}
	bless {logdir => $state->logdir, user => $state->{log_user}, 
	    clean => $state->opt('c')}, $class;
}

sub logfile
{
	my ($self, $name) = @@_;
	my $log = "$self->{logdir}/$name.log";
	$self->make_path(File::Basename::dirname($log));
	return $log;
}

sub _open
{
	my ($self, $mode, $name) = @@_;
	my $log = $self->logfile($name);
	my $fh = $self->open($mode, $log);
	if (defined $fh) {
		return $fh;
	} else {
		DPB::Util->die_bang("Can't write to $log");
	}
}

sub append
{
	die if @@_ > 2;
	my ($self, $name) = @@_;
	return $self->_open('>>', $name);
}

sub create
{
	my ($self, $name) = @@_;
	return $self->_open('>', $name);
}

sub log_pkgpath
{
	my ($self, $v) = @@_;
	return $self->logfile("/paths/".$v->fullpkgpath);
}

sub testlog_pkgpath
{
	my ($self, $v) = @@_;
	return $self->logfile("/tests/".$v->fullpkgpath);
}

sub log_pkgname
{
	my ($self, $v) = @@_;
	if ($v->has_fullpkgname) {
		return $self->logfile("/packages/".$v->fullpkgname);
	} else {
		return $self->logfile("/nopkgname/".$v->fullpkgpath);
	}
}

sub link
{
	my ($self, $a, $b) = @@_;
	$self->run_as(
	    sub {
		if ($self->{clean}) {
			unlink($b);
		}
		my $src = File::Spec->catfile(
		    File::Spec->abs2rel($self->{logdir}, 
		    File::Basename::dirname($b)),
		    File::Spec->abs2rel($a, $self->{logdir}));
		symlink($src, $b);
	    });
}

sub make_logs
{
	my ($self, $v) = @@_;
	my $log = $self->log_pkgpath($v);
	if ($self->{clean}) {
		$self->unlink($log);
	}
	my $fh = $self->open(">>", $log);
	DPB::Util->die_bang("Can't write to $log") unless defined $fh;
	for my $w ($v->build_path_list) {
		$self->link($log, $self->log_pkgname($w));
	}
	return ($log, $fh);
}

sub make_test_logs
{
	my ($self, $v) = @@_;
	my $log = $self->testlog_pkgpath($v);
	if ($self->{clean}) {
		$self->unlink($log);
	}
}

sub log_error
{
	my ($self, $v, @@messages) = @@_;
	my ($log, $fh) = $self->make_logs($v);
	for my $msg (@@messages) {
		print $fh $msg, "\n";
	}
	$v->print_parent($fh);
}

sub make_distlogs
{
	my ($self, $f) = @@_;
	return $self->logfile("/dist/".$f->{name});
}

sub make_log_link
{
	my ($self, $v) = @@_;
	$self->run_as(
	    sub {
		my $file = $self->log_pkgname($v);
		# we were built, but we don't link, so try the main pkgpath.
		if (!-e $file) {
			my $mainlog = $self->log_pkgpath(DPB::PkgPath->new($v->pkgpath_and_flavors));
			if (-e $mainlog) {
				$self->link($mainlog, $file);
			}
			# okay, so it was built through another flavor, 
			# don't bother for now, 
			# it will all solve itself eventually
		}
		$self->link($file, $self->log_pkgpath($v));
	    });
}

1;
@


1.23
log
@move the fcntl FD_CLOEXEC code over to User, so that all opened files are
marked that way.
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.22 2015/05/10 08:40:06 espie Exp $
d112 10
a121 13
	$self->run_as(
	    sub {
		my $log = $self->log_pkgpath($v);
		if ($self->{clean}) {
			unlink($log);
		}
		CORE::open my $fh, ">>", $log or 
		    DPB::Util->die_bang("Can't write to $log");
		for my $w ($v->build_path_list) {
			$self->link($log, $self->log_pkgname($w));
		}
		return ($log, $fh);
	    });
d128 3
a130 7
	$self->run_as(
	    sub {
		if ($self->{clean}) {
			unlink($log);
		}
		return $log;
	    });
d137 4
a140 7
	$self->run_as(
	    sub {
		for my $msg (@@messages) {
			print $fh $msg, "\n";
		}
		$v->print_parent($fh);
	    });
@


1.22
log
@compat with old config breaks new config, so ditch it.
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.21 2015/05/10 08:14:14 espie Exp $
a26 1
use Fcntl;
d50 2
a51 6
	$self->run_as(
	    sub {
		my $fh = IO::File->new($log, $mode) or 
		    DPB::Util->die_bang("Can't write to $log");
		my $flags = $fh->fcntl(F_GETFL, 0);
		$fh->fcntl(F_SETFL, $flags | FD_CLOEXEC);
d53 3
a55 1
	    });
a114 2
		CORE::open my $fh, ">>", $log or 
		    DPB::Util->die_bang("Can't write to $log");
d118 2
@


1.21
log
@rename logger interface to desambiguate vs user.
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.20 2015/05/03 10:33:59 espie Exp $
d32 1
a32 1
	if (!defined $state->{build_user}) {
@


1.20
log
@do a few more things with the correct user
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.19 2015/05/02 09:44:40 espie Exp $
d61 1
a61 1
sub open
d63 1
@


1.19
log
@move the user handling code to a separate file.
remove "run_as" for open, we can do things directly.

More explicit code on open.
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.18 2015/05/01 20:49:46 espie Exp $
d103 6
a108 6
	    my $src = File::Spec->catfile(
		File::Spec->abs2rel($self->{logdir}, 
		File::Basename::dirname($b)),
		File::Spec->abs2rel($a, $self->{logdir}));
	    symlink($src, $b);
	});
@


1.18
log
@fix creation of path log files
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.17 2015/04/26 18:00:19 espie Exp $
d20 1
a20 1
use DPB::Config;
@


1.17
log
@use UserProxy and make_path method.
Have the default host handle chroot correctly.

(still a bit of fetch to fix)
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.16 2015/04/25 11:40:58 espie Exp $
d117 2
d125 1
a125 1
		return $log;
d145 1
a145 1
	my $log = $self->make_logs($v);
a147 2
		CORE::open my $fh, ">>", $log or 
		    DPB::Util->die_bang("Can't write to $log");
@


1.16
log
@make most of the creatio files code able to change identity so that logging,
locking   don't happen as root.

Still need to do the fetchfiles/package linking part.
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.15 2015/04/21 09:53:13 espie Exp $
d20 1
d23 1
a38 6
sub run_as
{
	my ($self, $code) = @@_;
	return $self->{user}->run_as($code);
}

d43 1
a43 4
	$self->run_as(
	    sub {
		File::Path::mkpath(File::Basename::dirname($log));
	    });
d131 1
a131 1
	self->run_as(
@


1.15
log
@setting the stage for further changes
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.14 2014/12/07 15:18:50 espie Exp $
d30 11
a40 1
	bless {logdir => $state->logdir, clean => $state->opt('c')}, $class;
d47 4
a50 1
	File::Path::mkpath(File::Basename::dirname($log));
d58 8
a65 5
	my $fh = IO::File->new($log, $mode) or 
	    DPB::Util->die_bang("Can't write to $log");
	my $flags = $fh->fcntl(F_GETFL, 0);
	$fh->fcntl(F_SETFL, $flags | FD_CLOEXEC);
	return $fh;
d105 11
a115 7
	if ($self->{clean}) {
		unlink($b);
	}
	my $src = File::Spec->catfile(
	    File::Spec->abs2rel($self->{logdir}, File::Basename::dirname($b)),
	    File::Spec->abs2rel($a, $self->{logdir}));
	symlink($src, $b);
d121 11
a131 8
	my $log = $self->log_pkgpath($v);
	if ($self->{clean}) {
		unlink($log);
	}
	for my $w ($v->build_path_list) {
		$self->link($log, $self->log_pkgname($w));
	}
	return $log;
d138 7
a144 4
	if ($self->{clean}) {
		unlink($log);
	}
	return $log;
d151 9
a159 6
	CORE::open my $fh, ">>", $log or 
	    DPB::Util->die_bang("Can't write to $log");
	for my $msg (@@messages) {
		print $fh $msg, "\n";
	}
	$v->print_parent($fh);
d171 12
a182 6
	my $file = $self->log_pkgname($v);
	# we were built, but we don't link, so try the main pkgpath.
	if (!-e $file) {
		my $mainlog = $self->log_pkgpath(DPB::PkgPath->new($v->pkgpath_and_flavors));
		if (-e $mainlog) {
			$self->link($mainlog, $file);
d184 2
a185 4
		# okay, so it was built through another flavor, don't bother
		# for now, it will all solve itself eventually
	}
	$self->link($file, $self->log_pkgpath($v));
@


1.14
log
@wrap die so that it drops into the debugger if we run under perl -d.

change the way we do rescans again, to avoid race conditions:
just store away *all* pkgpaths related to the rescan (so that multi-packages
are covered) and then do the rescan. Hold those like we do for normal locks
but in a different list, and release them when the scan is over.

remove the atrocious shennanigans wrt fullpkgnames, it shouldn't be needed
again, hopefully.
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.13 2014/03/15 09:51:27 espie Exp $
d29 2
a30 2
	my ($class, $logdir, $clean) = @@_;
	bless {logdir => $logdir, clean => $clean}, $class;
@


1.13
log
@tweak waiting-for-lock mechanism: explicitly keep track of order,
and have each job relinquishing lock wake up the next one.

To cater for external dpbs, also try to wake up next job if we don't own the
lock.
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.12 2013/10/25 16:54:27 espie Exp $
d45 2
a46 1
	my $fh = IO::File->new($log, $mode) or die "Can't write to $log: $!\n";
d125 2
a126 1
	CORE::open my $fh, ">>", $log or die "Can't write to $log: $!\n";
@


1.12
log
@mark most opened files as close-on-exec, since the commands we run don't care
about them. Heck, they shouldn't even be able to access them... Ouchie.
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.11 2013/10/06 13:33:32 espie Exp $
d69 6
d106 10
@


1.11
log
@update my copyright to 2013
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.10 2013/01/04 19:34:10 espie Exp $
d25 1
d46 2
@


1.10
log
@switch to IO::File and explicit flush for the engine log.
should be slightly faster
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.9 2012/10/11 07:38:38 espie Exp $
d4 1
a4 1
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
@


1.9
log
@move to using BUILD_PACKAGES, so we have the actual tidy list.

Stupid NFS work-around:
during/after cleanup, wait until the packages show up.
Each wait period of ten seconds will show up as waiting#n.
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.8 2012/07/10 09:38:37 espie Exp $
d24 1
d44 1
a44 1
	CORE::open my $fh, $mode, $log or die "Can't write to $log: $!\n";
@


1.8
log
@fuck me harder. Separate cases where fullpkgname is allowed not to
be defined, so that instead of bad stringizations, we get full time errors.

Maybe then I can debug this.
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.7 2011/11/13 10:34:35 espie Exp $
a86 21
sub pathlist
{
	my ($self, $v) = @@_;
	my @@l = ($v);
	my $stem = $v->pkgpath_and_flavors;
	my $w = DPB::PkgPath->new($stem);
	if ($w ne $v) {
		push(@@l, $w);
	}
	if (defined $v->{info}) {
		for my $m (keys %{$v->{info}{MULTI_PACKAGES}}) {
			next if $m eq '-';
			my $w = DPB::PkgPath->new("$stem,$m");
			if ($w ne $v) {
				push(@@l, $w);
			}
		}
	}
	return @@l;
}

d94 1
a94 1
	for my $w ($self->pathlist($v)) {
@


1.7
log
@better FETCH_MANUALLY handling:
- expose MISSING_FILES
- treat them as a special kind of IGNORE
- handle that in DPB
that way, ports that are IGNORE'd for other reasons (not correct arch)
stay ignored, and relevant ports with missing distfiles get better error
messages
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.6 2011/11/06 17:56:53 espie Exp $
d68 1
a68 1
	if (defined $v->fullpkgname) {
@


1.6
log
@don't auto-vivify info.
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.5 2011/11/06 12:20:32 espie Exp $
d97 1
a97 1
		for my $m (keys %{$v->{info}->{MULTI_PACKAGES}}) {
@


1.5
log
@convenience function to log to correct path more easily
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.4 2011/06/04 12:58:24 espie Exp $
d96 7
a102 5
	for my $m (keys %{$v->{info}->{MULTI_PACKAGES}}) {
		next if $m eq '-';
		my $w = DPB::PkgPath->new("$stem,$m");
		if ($w ne $v) {
			push(@@l, $w);
@


1.4
log
@spaces
@
text
@d2 1
a2 1
# $OpenBSD$
d43 1
a43 1
	open my $fh, $mode, $log or die "Can't write to $log: $!\n";
d117 11
@


1.3
log
@initial support for fetching distfiles, somewhat experimental yet.
- clean up clock handling, jobs with timer.
- pass more parameters thru state
- tweak the engine to handle distfiles
- lots of new code in Fetch for new jobs.
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.2 2010/12/12 21:21:03 espie Exp $
@


1.2
log
@not sure why it happens, but log nopkgname...
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.1.1.1 2010/08/20 13:40:13 espie Exp $
d117 6
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# $OpenBSD: Logger.pm,v 1.4 2010/06/07 15:27:52 espie Exp $
d68 5
a72 1
	return $self->logfile("/packages/".$v->fullpkgname);
@


1.1.1.1
log
@move stuff here from infra/build
@
text
@@
