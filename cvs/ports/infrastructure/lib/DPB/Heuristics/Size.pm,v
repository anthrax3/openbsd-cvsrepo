head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.6
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.2
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.4
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.3.0.2
	OPENBSD_5_5_BASE:1.3;
locks; strict;
comment	@# @;


1.7
date	2016.10.21.00.45.43;	author espie;	state Exp;
branches;
next	1.6;
commitid	v9KVbVh2NnL7Ndbt;

1.6
date	2015.05.01.18.27.43;	author espie;	state Exp;
branches;
next	1.5;
commitid	HqyPzeGxIUxhvUmk;

1.5
date	2014.03.17.10.48.40;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2014.03.09.20.11.33;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2013.11.16.16.39.28;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2013.11.16.13.06.00;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.13.18.23.35;	author espie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@dpb cleans the permanent logs, always using the same pattern,
so write a method for that.

And don't fail silently when it doesn't work, because that causes
trouble down the line.

(e.g., your log user must be able to write into build-stats!!!)
@
text
@
# ex:ts=8 sw=4:
# $OpenBSD: Size.pm,v 1.6 2015/05/01 18:27:43 espie Exp $
#
# Copyright (c) 2010-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
# this package is responsible for recording build sizes
# and using tmpfs accordingly
package DPB::Heuristics::Size;
my (%wrkdir, %pkgname);

use DPB::Serialize;

sub new
{
	my ($class, $state) = @@_;
	bless {state => $state}, $class;
}
sub add_size_info
{
	my ($self, $path, $pkgname, $sz) = @@_;
	$wrkdir{$path->pkgpath_and_flavors} = $sz;
	if (defined $pkgname) {
		$pkgname{$path->fullpkgpath} = $pkgname;
	}
}

sub match_pkgname
{
	my ($self, $v) = @@_;
	my $p = $pkgname{$v->fullpkgpath};
	if (!defined $p) {
		return 0;
	}
	if ($p eq $v->fullpkgname) {
		return 1;
	}
	return 0;
}

my $used_memory = {};
my $used_per_host = {};

sub build_in_memory
{
	my ($self, $fh, $core, $v) = @@_;
	my $t = $core->memory;
	return 0 if !defined $t;

	# first match previous affinity
	if ($v->{affinity}) {
		print $fh ">>> Matching affinity: ", $v->{affinity}, "\n";
		return $v->{mem_affinity};
	}

	my $p = $v->pkgpath_and_flavors;

	# we build in memory if we know this port and it's light enough
	if (defined $wrkdir{$p}) {
		my $hostname = $core->hostname;
		$used_per_host->{$hostname} //= 0;
		print $fh ">>> Compare ", $used_per_host->{$hostname}, " + ", 
		    $wrkdir{$p}, " to ", $t, "\n";
		if ($used_per_host->{$hostname} + $wrkdir{$p} <= $t) {
			$used_per_host->{$hostname} += $wrkdir{$p};
			$used_memory->{$p} = $hostname;
			return $wrkdir{$p};
		}
	}
	return 0;
}

sub finished
{
	my ($self, $v) = @@_;
	my $p = $v->pkgpath_and_flavors;
	if (defined $used_memory->{$p}) {
		my $hostname = $used_memory->{$p};
		$used_per_host->{$hostname} -= $wrkdir{$p};
	}
}

sub parse_size_file
{
	my $self = shift;
	my $state = $self->{state};
	return if $state->{fetch_only};
	open my $fh, '<', $state->opt('S') // $state->{size_log}  or return;

	print "Reading size stats...";

	my @@rewrite = ();
	while (<$fh>) {
		chomp;
		my $s = DPB::Serialize::Size->read($_);
		push(@@rewrite, $s);
		$self->add_size_info(DPB::PkgPath->new($s->{pkgpath}), 
		    $s->{pkgname}, $s->{size});
	}
	close $fh;
	print "zapping old stuff...";
	$state->{log_user}->rewrite_file($state, $state->{size_log},
	    sub {
	    	my $fh = shift;
		for my $p (sort {$a->{pkgpath} cmp $b->{pkgpath}} @@rewrite) {
			print $fh DPB::Serialize::Size->write($p), "\n";
		}
	    });
	print "Done\n";
}

1;
@


1.6
log
@give size logs to log_user.
@
text
@d3 1
a3 1
# $OpenBSD: Size.pm,v 1.5 2014/03/17 10:48:40 espie Exp $
a104 1
	$state->{log_user}->make_path(File::Basename::dirname($state->{size_log}));
d116 1
a116 10
	$fh = $state->{log_user}->open('>', $state->{size_log}.'.part');
	if (!$fh) {
		return;
	}
	for my $p (sort {$a->{pkgpath} cmp $b->{pkgpath}} @@rewrite) {
		print $fh DPB::Serialize::Size->write($p), "\n";
	}
	close $fh;
	print "Done\n";
	$state->{log_user}->run_as(
d118 4
a121 1
		rename $state->{size_log}.'.part', $state->{size_log};
d123 1
@


1.5
log
@prepare for perl 5.18
- don't bother declaring $_ for while(<>) loops. assume current default
will still work.
- rename variable for readability elsewhere.
@
text
@d3 1
a3 1
# $OpenBSD: Size.pm,v 1.4 2014/03/09 20:11:33 espie Exp $
d105 1
a105 1
	File::Path::mkpath(File::Basename::dirname($state->{size_log}));
d117 4
a120 1
	open $fh, '>', $state->{size_log}.'.part' or return;
d126 4
a129 1
	rename $state->{size_log}.'.part', $state->{size_log};
@


1.4
log
@pass logfile to the sizer, so it can output more specific information,
like its size computations.
@
text
@d3 1
a3 1
# $OpenBSD: Size.pm,v 1.3 2013/11/16 16:39:28 espie Exp $
a107 1
	my $_;
@


1.3
log
@make the data in permanent logs a bit more self-describing, so that we may add
new fields in the future without atrocious hacks for bw compatibility.
(grows the files a bit, but quite acceptable).
@
text
@d3 1
a3 1
# $OpenBSD: Size.pm,v 1.2 2013/11/16 13:06:00 espie Exp $
d60 1
a60 1
	my ($self, $core, $v) = @@_;
d66 1
d76 2
@


1.2
log
@add/read timestamps to rolling logs, so that eventually old stuff gets
removed.

alias -DSTARTUP/-DCLEANUP, since I keep mixing up the two.
@
text
@d3 1
a3 1
# $OpenBSD: Size.pm,v 1.1 2013/10/13 18:23:35 espie Exp $
d26 2
d104 1
a104 1
	my $rewrite = {};
d108 4
a111 17
		my $pkgname;
		my ($pkgpath, $sz, $ts) = split(/\s+/, $_);
		my $i = " $sz";
		if ($pkgpath =~ m/^(.*)\((.*)\)$/) {
			($pkgpath, $pkgname) = ($1, $2);
			if ($state->opt('S')) {
				undef $pkgname;
			} else {
				$i ="($pkgname) $sz";
			}
		}
		if (defined $ts) {
			$i .=" $ts";
		}
		$rewrite->{$pkgpath} = $i;
		my $o = DPB::PkgPath->new($pkgpath);
		$self->add_size_info($o, $pkgname, $sz);
d116 2
a117 2
	for my $p (sort keys %$rewrite) {
		print $fh "$p$rewrite->{$p}\n";
@


1.1
log
@the "build-in-memory" stuff is independent from the rest of heuristics:
split it off, and provide a "stubbed" version of Heuristics::Size and
of Affinity  that do nothing, to be used on one host configuration without
in-memory builds.
@
text
@d3 1
a3 1
# $OpenBSD: Heuristics.pm,v 1.29 2013/10/12 14:11:23 espie Exp $
d107 1
a107 1
		my ($pkgpath, $sz, $sz2) = split(/\s+/, $_);
d117 2
a118 3
		if (defined $sz2) {
			$sz += $sz2;
			$i .=" $sz2";
@

