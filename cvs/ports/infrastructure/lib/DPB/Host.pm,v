head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.10
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.7.0.8
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.6
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.2
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.4
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2015.05.13.12.21.11;	author espie;	state Exp;
branches;
next	1.6;
commitid	acTKUtF1XMP5vHpx;

1.6
date	2015.05.13.11.03.18;	author espie;	state Exp;
branches;
next	1.5;
commitid	aE7gR3uPnBfB78Mk;

1.5
date	2015.05.03.10.32.28;	author espie;	state Exp;
branches;
next	1.4;
commitid	wb3dGumGH0aeSRv6;

1.4
date	2015.04.26.18.00.19;	author espie;	state Exp;
branches;
next	1.3;
commitid	V6PNfhncU60d7XW1;

1.3
date	2015.04.25.11.23.20;	author espie;	state Exp;
branches;
next	1.2;
commitid	SpoCSaxEwsIkKWqM;

1.2
date	2015.04.25.10.07.19;	author espie;	state Exp;
branches;
next	1.1;
commitid	sqYWFhOhxTIklm1e;

1.1
date	2014.12.25.15.14.14;	author espie;	state Exp;
branches;
next	;
commitid	4T2EL5Ro5f9nUYOi;


desc
@@


1.7
log
@oops, clock abstract core does NOT follow the pattern.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Host.pm,v 1.6 2015/05/13 11:03:18 espie Exp $
#
# Copyright (c) 2010-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
use strict;
use warnings;
# we have unique objects for hosts, so we can put properties in there.
package DPB::Host;

my $hosts = {};

sub shell
{
	my $self = shift;
	return $self->{shell};
}

sub new
{
	my ($class, $name, $prop) = @@_;
	if ($class->name_is_localhost($name)) {
		$class = "DPB::Host::Localhost";
		$name = 'localhost';
		$prop->{build_user}->enforce_local 
			if defined $prop->{build_user};
	} else {
		require DPB::Core::Distant;
		$class = "DPB::Host::Distant";
	}
	if (!defined $hosts->{$name}) {
		my $h = bless {host => $name, 
			prop => $prop }, $class;
		# XXX have to register *before* creating the shell
		$hosts->{$name} = $h;
		$h->{shell} = $h->shellclass->new($h);
	}
	return $hosts->{$name};
}

sub name
{
	my $self = shift;
	return $self->{host};
}

sub fullname
{
	my $self = shift;
	my $name = $self->name;
	if (defined $self->{prop}->{jobs}) {
		$name .= "/$self->{prop}->{jobs}";
	}
	return $name;
}

sub name_is_localhost
{
	my ($class, $host) = @@_;
	if ($host eq "localhost" or $host eq DPB::Core::Local->hostname) {
		return 1;
	} else {
		return 0;
	}
}

package DPB::Host::Localhost;
our @@ISA = qw(DPB::Host);

sub is_localhost
{
	return 1;
}

sub is_alive
{
	return 1;
}


sub shellclass
{
	my $self = shift;
	if ($self->{prop}{iamroot}) {
		return "DPB::Shell::Local::Root";
	} elsif ($self->{prop}{chroot}) {
		return "DPB::Shell::Local::Chroot";
	} else {
		return "DPB::Shell::Local";
	}
}

# XXX this is a "quicky" shell before we set up hosts properly
sub getshell
{
	my ($class, $state) = @@_;
	my $prop;

	if ($state->{default_prop}) {
		$prop = $state->{default_prop};
	} else {
		$prop = {};
		if ($state->{chroot}) {
			$prop->{chroot} = $state->{chroot};
		}
	}
	$prop->{iamroot} = $< == 0;

	my $h = bless { prop => $prop }, $class;
	return $h->shellclass->new($h);
}

1;
@


1.6
log
@complete local users with groups list using id -G.

Use that when switching groups to enforce full correct list of groups.

Figure out users that must exist locally, and error out if they don't.

Based on feedback by sthen@@
@
text
@d2 1
a2 1
# $OpenBSD: Host.pm,v 1.5 2015/05/03 10:32:28 espie Exp $
d36 2
a37 1
		$prop->{build_user}->enforce_local;
@


1.5
log
@comment on that quirk
@
text
@d2 1
a2 1
# $OpenBSD: Host.pm,v 1.4 2015/04/26 18:00:19 espie Exp $
d36 1
@


1.4
log
@use UserProxy and make_path method.
Have the default host handle chroot correctly.

(still a bit of fetch to fix)
@
text
@d2 1
a2 1
# $OpenBSD: Host.pm,v 1.3 2015/04/25 11:23:20 espie Exp $
d102 1
@


1.3
log
@a bit of cleanup: building the host properties is totally separate from
building the host (especially ensure overrides/finalize is run together).
Do default handling in a saner way, and use that to get a build_user
(and soon a log_user, a fetch_user).

Add run_as scaffolding to allow logging properly when dpb is run as root
(to be used soon)
@
text
@d2 1
a2 1
# $OpenBSD: Host.pm,v 1.2 2015/04/25 10:07:19 espie Exp $
d105 9
a113 3
	my $h = bless { prop => {}}, $class;
	if ($state->{chroot}) {
		$h->{prop}{chroot} = $state->{chroot};
d115 3
@


1.2
log
@figure out whether we're running as root on localhost, and then do most
things internally (chroot, setuid, etc)
@
text
@d2 1
a2 1
# $OpenBSD: Host.pm,v 1.1 2014/12/25 15:14:14 espie Exp $
d42 1
a42 1
			prop => DPB::HostProperties->finalize($prop) }, $class;
@


1.1
log
@regorg code, no actual change
@
text
@d2 1
a2 1
# $OpenBSD: Core.pm,v 1.74 2014/12/07 15:18:50 espie Exp $
d93 3
a95 1
	if ($self->{prop}->{chroot}) {
@

