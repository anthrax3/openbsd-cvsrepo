head	1.18;
access;
symbols
	OPENBSD_6_2:1.18.0.6
	OPENBSD_6_2_BASE:1.18
	OPENBSD_6_1:1.18.0.4
	OPENBSD_6_1_BASE:1.18
	OPENBSD_6_0:1.18.0.2
	OPENBSD_6_0_BASE:1.18
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.10.0.6
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.10.0.2
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4;
locks; strict;
comment	@# @;


1.18
date	2016.05.15.20.08.30;	author espie;	state Exp;
branches;
next	1.17;
commitid	lXvl6HaI9733NKaP;

1.17
date	2015.05.10.08.14.14;	author espie;	state Exp;
branches;
next	1.16;
commitid	J9XuZmxJc7sLMZLF;

1.16
date	2015.05.03.12.22.42;	author espie;	state Exp;
branches;
next	1.15;
commitid	oCa6WUNmnENgsdSG;

1.15
date	2015.05.03.10.33.59;	author espie;	state Exp;
branches;
next	1.14;
commitid	lBfNuZOkyaPdWlyt;

1.14
date	2015.05.02.09.44.40;	author espie;	state Exp;
branches;
next	1.13;
commitid	1VP4TYxT74T6B9km;

1.13
date	2015.05.01.19.42.54;	author espie;	state Exp;
branches;
next	1.12;
commitid	xBVlN5hyUkSlow3v;

1.12
date	2015.04.26.18.00.19;	author espie;	state Exp;
branches;
next	1.11;
commitid	V6PNfhncU60d7XW1;

1.11
date	2015.04.25.11.40.58;	author espie;	state Exp;
branches;
next	1.10;
commitid	uoRLcf51nveokBOa;

1.10
date	2013.12.30.17.32.26;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2013.10.27.09.21.38;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2013.10.17.08.34.03;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2013.10.13.18.24.24;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2013.10.06.13.33.26;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.06.12.37.05;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.30.14.04.17;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.29.19.14.28;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2012.12.28.21.09.45;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2012.12.24.17.24.46;	author espie;	state Exp;
branches;
next	;


desc
@@


1.18
log
@kill unused code (different users for each build)
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Affinity.pm,v 1.17 2015/05/10 08:14:14 espie Exp $
#
# Copyright (c) 2012-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

# on multiple hosts setup, it's useful to record which host is building what,
# so that on restart, we try to avoid starting a task on the "wrong" box...

# note that this is only superficially similar to locks

use DPB::User;
package DPB::Affinity;
our @@ISA = (qw(DPB::UserProxy));

use File::Path;
use DPB::PkgPath;

sub new
{
	my ($class, $state, $dir) = @@_;

	my $o = bless {dir => $dir, user => $state->{log_user}}, $class;
	$o->make_path($dir);
	$o->retrieve_existing_markers($state->logger);
	return $o;
}

# each path being built creates an affinity marker
sub affinity_marker
{
	my ($self, $v) = @@_;
	my $s = $v->fullpkgpath;
	$s =~ tr|/|.|;
	return join('/', $self->{dir}, $s);
}

# we create a separate marker for each path being built in a MULTI_PACKAGES
# setting, so that if we finish building one, we lose the affinity for it.
sub start
{
	my ($self, $v, $core) = @@_;
	my $host = $core->hostname;
	for my $w ($v->build_path_list) {
		next if $w->{info}->is_stub;
		my $fh = $self->open('>', $self->affinity_marker($w));
		next if !defined $fh;
		$w->{affinity} = $host;
		print $fh "host=$host\n";
		print $fh "path=", $w->fullpkgpath, "\n";
		if ($core->{inmem}) {
			print $fh "mem=$core->{inmem}\n";
			$w->{mem_affinity} = $core->{inmem};
		}
		close $fh;
	}
}

# when we see a package is already done, we have no way of knowing which
# MULTI_PACKAGES led to that, so we just unmark a single file
sub unmark
{
	my ($self, $v) = @@_;
	$self->unlink($self->affinity_marker($v));
	delete $v->{affinity};
	delete $v->{mem_affinity};
}

# on the other hand, when we finish building a port, we can unmark all paths.
sub finished
{
	my ($self, $v) = @@_;
	for my $w ($v->build_path_list) {
		$self->unmark($w);
	}
}

sub retrieve_existing_markers
{
	my ($self, $logger) = @@_;
	my $log = $logger->append('affinity');
	my $d = $self->opendir($self->{dir});
	return if !defined $d;
	while (my $e = readdir $d) {
		next unless -f "$self->{dir}/$e";
		my $fh = $self->open('<', "$self->{dir}/$e");
		return if !defined $fh;
		my ($hostname, $pkgpath, $memory);
		while (<$fh>) {
			chomp;
			if (m/^host\=(.*)/) {
				$hostname = $1;
			}
			if (m/^path\=(.*)/) {
				$pkgpath = $1;
			}
			if (m/^mem\=(.*)/) {
				$memory = $1;
			}
		}
		close $fh;
		next unless (defined $pkgpath) && (defined $hostname);

		my $v = DPB::PkgPath->new($pkgpath);
		$v->{affinity} = $hostname;
		if ($memory) {
			$v->{mem_affinity} = $memory;
		}
		print $log "$$:", $v->fullpkgpath, " => ", $hostname, "\n";
	}
	close $log;
}

sub simplifies_to
{
	my ($self, $v, $w) = @@_;
	for my $tag ("affinity", "mem_affinity") {
		if (defined $v->{$tag}) {
			$w->{$tag} //= $v->{$tag};
		}
		if (defined $w->{$tag}) {
			$v->{$tag} //= $w->{$tag};
		}
	}
}

my $queued = {};

sub sorted
{
	my ($self, $queue, $core) = @@_;
	# okay, we know we have affinity stuff in the queue (maybe, so we want to do something special here
	# maybe...
	my $n = $core->hostname;
	if ($queued->{$n}) {
		# XXX for now, look directly inside the queue
		my @@l = grep 
		    { defined($_->{affinity}) && $_->{affinity} eq $n } 
		    values %{$queue->{o}};
		if (@@l == 0) {
			delete $queued->{$n};
		} else {
			return DPB::AffinityQueue->new(\@@l, $queue, $core);
		}
	}
	return $queue->sorted($core);
}

sub has_in_queue
{
	my ($self, $v) = @@_;
	if (defined $v->{affinity}) {
		$queued->{$v->{affinity}} = 1;
	}
}

package DPB::AffinityQueue;
sub new
{
	my ($class, $l, $queue, $core) = @@_;
	bless { l => $l, 
	    queue => $queue, 
	    core => $core}, $class;
}

sub next
{
	my $self = shift;
	if (@@{$self->{l}} > 0) {
		return pop @@{$self->{l}};
	}
	if (!defined $self->{sorted}) {
		$self->{sorted} = 
		    $self->{queue}->sorted($self->{core});
	}
	return $self->{sorted}->next;
}

1;
@


1.17
log
@rename logger interface to desambiguate vs user.
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.16 2015/05/03 12:22:42 espie Exp $
a63 4
		if ($core->{user}) {
			print $fh "user=", $core->{user}->user, "\n";
			$w->{user_affinity} = $core->{user}->user;
		}
a80 1
	delete $v->{user_affinity};
d102 1
a102 1
		my ($hostname, $pkgpath, $memory, $user);
a107 3
			if (m/^user\=(.*)/) {
				$user = $1;
			}
a121 3
		}
		if ($user) {
			$v->{user_affinity} = $user;
@


1.16
log
@store the user if necessary for round-robin mode
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.15 2015/05/03 10:33:59 espie Exp $
d100 1
a100 1
	my $log = $logger->open('affinity');
@


1.15
log
@do a few more things with the correct user
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.14 2015/05/02 09:44:40 espie Exp $
d64 4
d85 1
d107 1
a107 1
		my ($hostname, $pkgpath, $memory);
d113 3
d130 3
@


1.14
log
@move the user handling code to a separate file.
remove "run_as" for open, we can do things directly.

More explicit code on open.
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.13 2015/05/01 19:42:54 espie Exp $
d57 11
a67 14
	$self->run_as(
	    sub {
		my $host = $core->hostname;
		for my $w ($v->build_path_list) {
			next if $w->{info}->is_stub;
			open(my $fh, '>', $self->affinity_marker($w)) or next;
			$w->{affinity} = $host;
			print $fh "host=$host\n";
			print $fh "path=", $w->fullpkgpath, "\n";
			if ($core->{inmem}) {
				print $fh "mem=$core->{inmem}\n";
				$w->{mem_affinity} = $core->{inmem};
			}
			close $fh;
d69 2
a70 1
	    });
d78 3
a80 6
	$self->run_as(
	    sub {
		unlink($self->affinity_marker($v));
		delete $v->{affinity};
		delete $v->{mem_affinity};
	    });
d96 2
a97 1
	opendir(my $d, $self->{dir}) or return;
d100 2
a101 1
		open my $fh, '<', "$self->{dir}/$e" or return;
@


1.13
log
@lock_user is not needed, defaults to log_user for all practical cases
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.12 2015/04/26 18:00:19 espie Exp $
d26 1
a26 1
use DPB::Config;
@


1.12
log
@use UserProxy and make_path method.
Have the default host handle chroot correctly.

(still a bit of fetch to fix)
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.11 2015/04/25 11:40:58 espie Exp $
d37 1
a37 1
	my $o = bless {dir => $dir, user => $state->{lock_user}}, $class;
@


1.11
log
@make most of the creatio files code able to change identity so that logging,
locking   don't happen as root.

Still need to do the fetchfiles/package linking part.
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.10 2013/12/30 17:32:26 espie Exp $
d26 1
d28 1
a32 6
sub run_as
{
	my ($self, $code) = @@_;
	$self->{user}->run_as($code);
}

d38 1
a38 4
	$o->run_as(
	    sub {
		File::Path::make_path($dir);
	    });
@


1.10
log
@affinity/nfs locks don't really deal with packages not built
because of missing depends.  Keep in mind that build_path_list has
to be extensive to avoid LISTING errors...

So, if we meet a stub there, we should do our best to avoid it.
Some of these checks are probably slightly overkill.

problem noticed by landry@@
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.9 2013/10/27 09:21:38 espie Exp $
d31 6
d41 5
a45 2
	File::Path::make_path($dir);
	my $o = bless {dir => $dir}, $class;
d64 14
a77 10
	my $host = $core->hostname;
	for my $w ($v->build_path_list) {
		next if $w->{info}->is_stub;
		open(my $fh, '>', $self->affinity_marker($w)) or next;
		$w->{affinity} = $host;
		print $fh "host=$host\n";
		print $fh "path=", $w->fullpkgpath, "\n";
		if ($core->{inmem}) {
			print $fh "mem=$core->{inmem}\n";
			$w->{mem_affinity} = $core->{inmem};
d79 1
a79 2
		close $fh;
	}
d87 6
a92 3
	unlink($self->affinity_marker($v));
	delete $v->{affinity};
	delete $v->{mem_affinity};
@


1.9
log
@affinity and memory will work MUCH better for error correction if we don't
forget to mark things in memory too, and not just in disk markers.
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.8 2013/10/17 08:34:03 espie Exp $
d57 1
@


1.8
log
@Implement "affinity queuing": when we spot stuff with the right
affinity in the queue, move it upfront, so we restart old jobs
preferentially.
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.7 2013/10/13 18:24:24 espie Exp $
d63 1
@


1.7
log
@add (for now) stub code to provide a specific queue order when dealing
with affinity.
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.6 2013/10/06 13:33:26 espie Exp $
d141 12
a152 2
#	if ($queued->{$core->hostname}) {
#	}
d160 22
a181 1
		$queued->{$v} = 1;
d183 1
@


1.6
log
@update my copyright to 2013
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.5 2013/10/06 12:37:05 espie Exp $
d131 20
@


1.5
log
@extend affinity info to also include memory consumption for in-memory ports
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.4 2012/12/30 14:04:17 espie Exp $
d4 1
a4 1
# Copyright (c) 2012 Marc Espie <espie@@openbsd.org>
@


1.4
log
@fix elusive "jobs don't show up where they should".
duh. put "live" affinity markers while we're building stuff.
We don't re-read the on-disk markers outside of restart (should we ?)
so they HAVE to be in the pkgpath struct proper.
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.3 2012/12/29 19:14:28 espie Exp $
d61 3
d75 1
d95 1
a95 1
		my ($hostname, $pkgpath);
d104 3
d113 3
d124 7
a130 5
	if (defined $v->{affinity}) {
		$w->{affinity} //= $v->{affinity};
	}
	if (defined $w->{affinity}) {
		$v->{affinity} //= $w->{affinity};
@


1.3
log
@on start-up, log affinity in a more consistent way, with pid of running dpb.
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.2 2012/12/28 21:09:45 espie Exp $
d55 1
d58 2
a59 1
		print $fh "host=", $core->hostname, "\n";
@


1.2
log
@log the markers we retrieve on any restart... I suspect something foul
happening with localhost.
@
text
@d2 1
a2 1
# $OpenBSD: Affinity.pm,v 1.1 2012/12/24 17:24:46 espie Exp $
d104 1
a104 1
		print $log $v->fullpkgpath, " => ", $hostname, "\n";
a105 1
	print $log "-"x70, "\n";
@


1.1
log
@add affinity information to restart jobs on the right host preferentially.
- affinity info is similar to locks, but with a completely different
lifetime.
- streamline the main loop of the engine, so that it can do two passes:
first pass shuns paths with the wrong affinity. If no good path is found,
those are considered during the second pass.
- make the Core factory aware of what hosts might be running, so that
affinity info for machines removed from a config file will be ignored.

thanks to landry@@ for a few tests.
@
text
@d2 1
a2 1
# $OpenBSD$
d37 1
a37 1
	$o->retrieve_existing_markers;
d83 2
a84 1
	my $self = shift;
d104 1
d106 2
@

