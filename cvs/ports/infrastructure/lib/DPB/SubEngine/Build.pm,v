head	1.19;
access;
symbols
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.19.0.2
	OPENBSD_6_0_BASE:1.19
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	OPENBSD_5_7:1.10.0.4
	OPENBSD_5_7_BASE:1.10
	OPENBSD_5_6:1.10.0.2
	OPENBSD_5_6_BASE:1.10
	OPENBSD_5_5:1.9.0.2
	OPENBSD_5_5_BASE:1.9;
locks; strict;
comment	@# @;


1.19
date	2016.05.15.20.08.30;	author espie;	state Exp;
branches;
next	1.18;
commitid	lXvl6HaI9733NKaP;

1.18
date	2016.05.08.09.31.38;	author espie;	state Exp;
branches;
next	1.17;
commitid	o94kkxR2uNE58DaX;

1.17
date	2015.07.14.08.17.38;	author espie;	state Exp;
branches;
next	1.16;
commitid	XIzmZrt6VXZKXv1P;

1.16
date	2015.07.02.08.04.22;	author espie;	state Exp;
branches;
next	1.15;
commitid	qIlv6BM85gcmoVOI;

1.15
date	2015.06.23.14.22.50;	author espie;	state Exp;
branches;
next	1.14;
commitid	7v4bnCmjV3Nr5TJz;

1.14
date	2015.06.22.12.19.38;	author espie;	state Exp;
branches;
next	1.13;
commitid	KBHYI6E89Ku1Fjub;

1.13
date	2015.05.24.06.48.51;	author espie;	state Exp;
branches;
next	1.12;
commitid	oi2S5hnnGJfxdQvu;

1.12
date	2015.05.13.14.27.13;	author espie;	state Exp;
branches;
next	1.11;
commitid	gxxoqA4ZqIO1F7ZR;

1.11
date	2015.05.03.12.26.10;	author espie;	state Exp;
branches;
next	1.10;
commitid	zrS1WcsMipxQrtpc;

1.10
date	2014.03.09.20.15.10;	author espie;	state Exp;
branches;
next	1.9;

1.9
date	2013.12.30.17.32.26;	author espie;	state Exp;
branches;
next	1.8;

1.8
date	2013.10.18.19.21.04;	author espie;	state Exp;
branches;
next	1.7;

1.7
date	2013.10.13.18.31.51;	author espie;	state Exp;
branches;
next	1.6;

1.6
date	2013.10.07.20.23.13;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	2013.10.07.20.01.56;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2013.10.07.18.01.33;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2013.10.06.13.48.28;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2013.10.06.13.33.39;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2013.10.06.13.22.23;	author espie;	state Exp;
branches;
next	;


desc
@@


1.19
log
@kill unused code (different users for each build)
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: Build.pm,v 1.18 2016/05/08 09:31:38 espie Exp $
#
# Copyright (c) 2010-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package DPB::SubEngine::Build;
our @@ISA = qw(DPB::SubEngine::BuildBase);
sub new
{
	my ($class, $engine, $builder) = @@_;
	my $o = $class->SUPER::new($engine, $builder);
	$o->{toinstall} = [];
	$o->{nfs} = {};
	return $o;
}


sub preempt_core
{
	my ($self, $core) = @@_;

	if ($self->SUPER::preempt_core($core)) {
		return 1;
	}
	if ($self->start_install($core)) {
		return 1;
	}
	# note we don't actually remove stuff from the queue until needed, 
	# so mismatches holds a copy of stuff that's still there.
	$self->{mismatches} = [];
	$self->{tag_mismatches} = [];
	$self->{klogged} = {};
	return 0;
}

sub can_start_build
{
	my ($self, $v, $core) = @@_;

	if ($self->check_for_memory_hogs($v, $core)) {
		push(@@{$self->{mismatches}}, $v);
		return 0;
	}
	# if the tag mismatch, we keep it for much much later.
	# currently, we don't even try to recuperate, so this will
	# fail abysmally if there's no junking going on
	my $reason = $core->prop->taint_incompatible($v);
	if (defined $reason) {
		my $core2 = DPB::Core->get_compatible($v);
		if (defined $core2) {
			if ($self->lock_and_start_build($core2, $v)) {
				return 0;
			} else {
				$core2->mark_ready;
			}
		}
		if (!$self->{klogged}{$v->pkgpath}) {
			$self->log('K', $v, " ".$core->hostname." ".$reason);
			$self->{klogged}{$v->pkgpath} = 1;
		}
		push(@@{$self->{tag_mismatches}}, $v);
		return 0;
	}
	# keep affinity mismatches for later
	if (defined $v->{affinity} && !$core->matches_affinity($v)) {
		my $s = " ".$core->hostname;
		$s .= " ".$v->{affinity};
		$self->log('A', $v, $s);
		# try to start them anyways, on the "right" core
		my $core2 = DPB::Core->get_affinity($v);
		if (defined $core2) {
			if ($self->lock_and_start_build($core2, $v)) {
				return 0;
			} else {
				$core2->mark_ready;
			}
		}
		push(@@{$self->{mismatches}}, $v);
		return 0;
	}
	# if there's no external lock, we can build
	if ($self->lock_and_start_build($core, $v)) {
		return 1;
	}
}

# we cheat a bit to standardize built paths
sub can_really_start_build
{
	my ($self, $v, $core) = @@_;
	for my $w (sort {$a->fullpkgpath cmp $b->fullpkgpath} 
	    $v->build_path_list) {
	    	next unless $self->{queue}->contains($w);
		if ($self->SUPER::can_really_start_build($w, $core)) {
			for my $k ($w->build_path_list) {
				$self->remove($k);
			}
			return 1;
		}
	}
	return 0;
}

sub check_for_memory_hogs
{
	my ($self, $v, $core) = @@_;
	if ($v->{info}->has_property('memoryhog')) {
		for my $job ($core->same_host_jobs) {
			if ($job->{v}{info}->has_property('memoryhog')) {
				return 1;
			}
		}
	}
	return 0;
}

sub can_be_junked
{
	my ($self, $v, $core) = @@_;
	my $tag = $v->{info}->has_property('tag');
	for my $job ($core->same_host_jobs) {
		if ($job->{nojunk}) {
			return 0;
		}
		if ($job->{v}{info}->has_property('tag') &&
		    $job->{v}{info}->has_property('tag') ne $tag) {
		    	return 0;
		}
	}
	my $h = $self->{engine}{locker}->find_dependencies($core->hostname);
	if (!ref $h) {
		return 0;
	}
	return 1;
}

sub recheck_mismatches
{
	my ($self, $core) = @@_;

	# first let's try to force junking
	if (@@{$self->{tag_mismatches}} > 0) {
		for my $v (@@{$self->{tag_mismatches}}) {
			# XXX there's probably a race condition there
			# we check for junking (which is okay)
			# then we FORCE the re-tagging BEFORE junking
			# if anything starts up at the same time with nojunk
			# then junking won't happen (for instance)
			# to fix, it requires a "pseudo" junk first 
			# to untaint the host, THEN we can try building.
			next unless $self->can_be_junked($v, $core);
			$self->force_junk($core);
			return 1;
		}
	}
	# let's make sure we don't have something else first
	if (@@{$self->{mismatches}} > 0) {
		if ($self->{engine}->check_buildable(1)) {
			return $self->use_core($core);
		}
	}
	# second pass, affinity mismatches
	for my $v (@@{$self->{mismatches}}) {
		if ($self->lock_and_start_build($core, $v)) {
			$self->log('Y', $v, 
			    " ".$core->hostname." ".$v->{affinity});
			return 1;
		}
	}
	return 0;
}

sub will_install
{
	my ($self, $v) = @@_;
	push(@@{$self->{toinstall}}, $v);
}

sub start_install
{
	my ($self, $core) = @@_;
	return 0 unless $core->is_local;
	if (my $v = pop @@{$self->{toinstall}}) {
		$self->{builder}->install($v, $core);
		return 1;
	} else {
		return 0;
	}
}

sub non_empty
{
	my $self = shift;
	return  $self->SUPER::non_empty || @@{$self->{toinstall}} > 0;
}

sub mark_as_done
{
	my ($self, $v) = @@_;
	$self->{engine}{affinity}->unmark($v);
	delete $self->{engine}{tobuild}{$v};
	delete $v->{info}{DIST};
#	$self->{heuristics}->done($v);
	if (defined $self->{later}{$v}) {
		$self->log('V', $v);
		delete $self->{later}{$v};
	}
	if (!defined $self->{engine}{built}{$v}) {
		$self->{engine}{built}{$v}= $v;
		$self->log('B', $v);
	}
	$self->remove($v);
}

# special case: some of those paths can't be built
sub remove_stub
{
	my ($self, $v) = @@_;
	if ($v->{info}->is_stub) {
		$self->{engine}{affinity}->unmark($v);
		delete $self->{engine}{tobuild}{$v};
		$self->remove($v);
		return 1;
	}
	return 0;
}

sub is_done_or_enqueue
{
	my ($self, $v) = @@_;
	my $okay = 1;
	for my $w ($v->build_path_list) {
		next if $self->remove_stub($w);
		if ($self->{builder}->end_check($w)) {
			$self->mark_as_done($w);
		} else {
			$self->{nfs}{$v}{$w} = $w;
			$okay = 0;
		}
	}
	return $okay;
}

sub is_done
{
	my ($self, $v) = @@_;
	if ($self->{builder}->check($v)) {
		for my $w ($v->build_path_list) {
			next if $v eq $w;
			next if $self->remove_stub($w);
			next unless $self->{builder}->check($w);
			$self->mark_as_done($w);
		}
	}
	return $self->is_done_quick($v);
}

sub is_done_quick
{
	my ($self, $v) = @@_;
	if ($self->{builder}->check($v)) {
		$self->mark_as_done($v);
		return 1;
	} else {
		return 0;
	}
}

sub key_for_doing
{
	my ($self, $v) = @@_;
	return $v->pkgpath;
}

sub already_done
{
	my ($self, $v) = @@_;
	$self->{engine}{logger}->make_log_link($v);
}

sub start_build
{
	my ($self, $v, $core, $lock) = @@_;
	$self->log('J', $v, " ".$core->hostname);
	$core->prop->taint($v);
	$self->{builder}->build($v, $core, $lock, 
	    sub {
	    	my $fail = shift;
	    	$self->end($core, $v, $fail);
	    });
}

sub force_junk
{
	my ($self, $core) = @@_;
	my $v = JunkPath->new;
	$self->log('J', $v, " ".$core->hostname);
	$self->{builder}->force_junk($v, $core,
	    sub {
		my $fail = shift;
		$self->log($fail ? 'E': 'B' , $v, " ".$core->hostname);
	    });
}

sub end_build
{
	my ($self, $v) = @@_;
	$self->{engine}{affinity}->finished($v);
	$self->{engine}{sizer}->finished($v);
}

sub sorted
{
	my ($self, $core) = @@_;
	return $self->{engine}{affinity}->sorted($self->{queue}, $core);
}

sub add
{
	my ($self, $v) = @@_;
	$self->{engine}{affinity}->has_in_queue($v);
	$self->SUPER::add($v);
}

package JunkPath;
our @@ISA = qw(DPB::PkgPath);
sub new
{
	my $class = shift;
	my $v = bless {}, $class;
	DPB::PortInfo->new($v);
	return $v;
}

sub fullpkgpath
{
	return "junk-proxy";
}

sub forcejunk
{
	return 1;
}

1;
@


1.18
log
@these days, I've got starved code at end of builds, while there's
still kde3/kde4 contention. So reuse the affinity tactic to find a
Core with the right tainting if it exists.
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.17 2015/07/14 08:17:38 espie Exp $
a81 3
		if (defined $core->{user}) {
			$s .= "/".$core->{user}->user;
	    	}
a82 3
		if (defined $v->{user_affinity}) {
			$s .= "/".$v->{user_affinity};
		}
@


1.17
log
@kill a bit of debug scaffolding, and log junk-proxy with 'J' as normal.
less complexity
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.16 2015/07/02 08:04:22 espie Exp $
d64 8
@


1.16
log
@clean-up "force junking": do not prepare a host to be untainted with the
"wrong" port, but instead, create a pseudo-path that is just there to run
junk (will be logged as junk-proxy)

fix a bug in the task handling host locking (no next task -> unlock, duh).

do not log multiple K for several ports on the same basepkgpath.
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.15 2015/06/23 14:22:50 espie Exp $
d68 2
a69 7
#		if ($self->can_be_junked($v, $core)) {
#			$self->force_junk($core);
#			return 1;
#		} else {
			push(@@{$self->{tag_mismatches}}, $v);
			return 0;
#		}
d310 1
a310 1
	$self->log('C', $v, " ".$core->hostname);
@


1.15
log
@document there's probably still a problem, so I don't forget to fix it.
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.14 2015/06/22 12:19:38 espie Exp $
d47 1
d64 11
a74 3
		$self->log('K', $v, " ".$core->hostname." ".$reason);
		push(@@{$self->{tag_mismatches}}, $v);
		return 0;
d170 2
a171 6
			$v->{forcejunk} = 1;
			if ($self->lock_and_start_build($core, $v)) {
				$self->log('C', $v);
				return 1;
			}
			delete $v->{forcejunk};
d311 12
d341 20
@


1.14
log
@move the taint mechanism outside of "main" code.
more stringent checks... there's still a bug somewhere, hope to catch it
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.13 2015/05/24 06:48:51 espie Exp $
d153 7
@


1.13
log
@tweak find_dependencies to just return a result (deps or path)
reuse in can_be_junked. As exemplified by editors/tiled, a failing
port with nojunk set should also prevent junk tentatives, as these
will fail, but still untaint hosts...

seen by aja@@ and naddy@@, most probably.
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.12 2015/05/13 14:27:13 espie Exp $
d61 5
a65 8
	if ($core->prop->{tainted} && $v->{info}->has_property('tag')) {
		if ($v->{info}->has_property('tag') ne $core->prop->{tainted}) {
			$self->log('K', $v, " ".$core->hostname." ".
			    $core->prop->{tainted}." vs ".
			    $v->{info}->has_property('tag'));
			push(@@{$self->{tag_mismatches}}, $v);
			return 0;
		}
d291 1
a291 3
	if ($v->{info}->has_property('tag')) {
		$core->prop->{tainted} = $v->{info}->has_property('tag');
	}
@


1.12
log
@fix the kde3 vs kde4 bug.

frequent occurrences of tag mismatches were probably triggered by
the import of qt5, which is a long-running nojunk port.

when we're finished with kdeN ports, there's pressure to force junking to
go thru kdeM ports, BUT actual junking *won't* happen in the presence of
a nojunk port, though the current code make it seem as though
we've "succeeded".

Forensics shows:
23826@@1431149112: K: x11/kde4/webdev openbsd-2 kde3 vs kde4
23826@@1431149112: J: devel/hs-FindBin openbsd-2
23826@@1431149119: B: security/p5-Crypt-OpenSSL-RSA
23826@@1431149120: J: x11/tellico-kde4 openbsd-2

which made no sense since nothing happened between the K and the J.

But the log of tellico shows the junk not happening.

Still tainted: 1
>>> Running junk in x11/tellico-kde4 at 1431149274
Can't run junk because of lock on x11/qt5,,-main

So synch "can_be_unjunked" for forced junks: it should not succeed if there's
a nojunk port.
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.11 2015/05/03 12:26:10 espie Exp $
d141 4
@


1.11
log
@tweak affinity checks to include user in schizophrenic mode
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.10 2014/03/09 20:15:10 espie Exp $
d134 3
@


1.10
log
@path normalization: introduce can_really_start_build
that handles held locks, and starts build.

Specialize it for  normal builds to remove all build_path_list elements
at once, and choose the smallest one.

in all, this means that the logs will show less variety in what they
build, thus giving better statistics earlier.
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.9 2013/12/30 17:32:26 espie Exp $
d71 10
a80 3
	if (defined $v->{affinity} && !$core->matches($v->{affinity})) {
		$self->log('A', $v, 
		    " ".$core->hostname." ".$v->{affinity});
d82 1
a82 1
		my $core2 = DPB::Core->get_affinity($v->{affinity});
@


1.9
log
@affinity/nfs locks don't really deal with packages not built
because of missing depends.  Keep in mind that build_path_list has
to be extensive to avoid LISTING errors...

So, if we meet a stub there, we should do our best to avoid it.
Some of these checks are probably slightly overkill.

problem noticed by landry@@
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.8 2013/10/18 19:21:04 espie Exp $
d90 17
@


1.8
log
@oops, zapping get_core from NoBuild will only work if there's a default
get_core in BuildBase, as experienced by rpe@@.
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.7 2013/10/13 18:31:51 espie Exp $
d193 13
d211 1
d228 1
@


1.7
log
@- use separated Heuristics::Size object
- choose size/nosize in Config.
- use affinity or affinitystub
- move locker creation to State, so we can init cores right away.
- as core init has run, we can call DPB::Core->reap (event loop) while
processing size and build stats, so that the startup script may start
slightly earlier.
- setup more options in Config for Reporter to use.
- scaffolding in SubEngine/Build to be able to use affinity info right away
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.6 2013/10/07 20:23:13 espie Exp $
a229 6
}

sub get_core
{
	my $self = shift;
	return $self->{builder}->get;
@


1.6
log
@don't mark_ready a core that runs something (seen by nigel and rpe).
replace the dirty trick I did to reuse start with an intermediate
method that's more "reentrant" (use_core) by not fiddling with core's
status.
(bug appeared thanks to over-eager refactoring and shoddy code...)
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.5 2013/10/07 20:01:56 espie Exp $
d268 14
a281 1
	$self->{engine}{heuristics}->finish_special($v);
@


1.5
log
@revisit, fetch cores MUST be pre-emptable for rebuilding-info,
otherwise pure -F fetch engine loses !
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.4 2013/10/07 18:01:33 espie Exp $
d137 1
a137 2
			$core->mark_ready;
			return $self->start;
@


1.4
log
@okay, fixed version where NoBuild subengine gets only what it actually
needs
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.3 2013/10/06 13:48:28 espie Exp $
d37 1
a37 2
	if (@@{$self->{engine}{requeued}} > 0) {
		$self->{engine}->rebuild_info($core);
@


1.3
log
@NoBuild actually requires one piece out of Build...
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.2 2013/10/06 13:33:39 espie Exp $
d26 1
a26 2
	my $o = $class->SUPER::new($engine);
	$o->{builder} = $builder;
@


1.2
log
@update my copyright to 2013
@
text
@d2 1
a2 1
# $OpenBSD: Build.pm,v 1.1 2013/10/06 13:22:23 espie Exp $
d22 1
a22 1
our @@ISA = qw(DPB::SubEngine);
a175 6
}

sub new_queue
{
	my ($class, $engine) = @@_;
	return $engine->{heuristics}->new_queue;
@


1.1
log
@split some code into separate files, so that it doesn't get
loaded if it's not needed.
@
text
@d2 1
a2 1
# $OpenBSD: SubEngine.pm,v 1.7 2013/10/06 12:40:43 espie Exp $
d4 1
a4 1
# Copyright (c) 2010 Marc Espie <espie@@openbsd.org>
@

