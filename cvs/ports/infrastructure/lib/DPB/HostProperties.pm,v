head	1.16;
access;
symbols
	OPENBSD_6_2:1.16.0.6
	OPENBSD_6_2_BASE:1.16
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.16.0.2
	OPENBSD_6_0_BASE:1.16
	OPENBSD_5_9:1.15.0.2
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.1.0.2
	OPENBSD_5_7_BASE:1.1;
locks; strict;
comment	@# @;


1.16
date	2016.04.30.09.15.58;	author espie;	state Exp;
branches;
next	1.15;
commitid	5MyJwmks496t4oMe;

1.15
date	2015.08.22.09.24.42;	author espie;	state Exp;
branches;
next	1.14;
commitid	8OEplz3Q3KhDXImr;

1.14
date	2015.07.02.08.04.22;	author espie;	state Exp;
branches;
next	1.13;
commitid	qIlv6BM85gcmoVOI;

1.13
date	2015.06.23.09.01.56;	author espie;	state Exp;
branches;
next	1.12;
commitid	wA22yJwakxt09g5J;

1.12
date	2015.06.23.08.51.53;	author espie;	state Exp;
branches;
next	1.11;
commitid	32zs6aY8gWUWqLkN;

1.11
date	2015.06.22.12.19.38;	author espie;	state Exp;
branches;
next	1.10;
commitid	KBHYI6E89Ku1Fjub;

1.10
date	2015.05.12.08.20.08;	author espie;	state Exp;
branches;
next	1.9;
commitid	1XyXJFkLDfZHz5np;

1.9
date	2015.05.10.08.40.06;	author espie;	state Exp;
branches;
next	1.8;
commitid	p4gVCPC3IBs55h2g;

1.8
date	2015.05.02.16.41.20;	author espie;	state Exp;
branches;
next	1.7;
commitid	URerc5cLJW8bDIqm;

1.7
date	2015.05.02.09.44.40;	author espie;	state Exp;
branches;
next	1.6;
commitid	1VP4TYxT74T6B9km;

1.6
date	2015.05.01.19.42.54;	author espie;	state Exp;
branches;
next	1.5;
commitid	xBVlN5hyUkSlow3v;

1.5
date	2015.05.01.09.03.20;	author espie;	state Exp;
branches;
next	1.4;
commitid	zcw7xPU4fF3oSV2L;

1.4
date	2015.04.25.11.32.42;	author espie;	state Exp;
branches;
next	1.3;
commitid	If7vDmcAtTgpygVq;

1.3
date	2015.04.25.11.23.20;	author espie;	state Exp;
branches;
next	1.2;
commitid	SpoCSaxEwsIkKWqM;

1.2
date	2015.04.21.09.23.57;	author espie;	state Exp;
branches;
next	1.1;
commitid	qJeUeGqdv3D47y7R;

1.1
date	2014.12.25.15.14.14;	author espie;	state Exp;
branches;
next	;
commitid	4T2EL5Ro5f9nUYOi;


desc
@@


1.16
log
@tweak running-as-root defaults to be _pbuild/_pfetch. It's time.
@
text
@# ex:ts=8 sw=4:
# $OpenBSD: HostProperties.pm,v 1.15 2015/08/22 09:24:42 espie Exp $
#
# Copyright (c) 2010-2013 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

package DPB::HostProperties;
use DPB::User;

my $has_sf = 0;
my $has_mem = 0;
my $sf;

sub new
{
	my ($class, $default) = @@_;
	$default //= {};
	bless {%$default}, $class;
}

sub add_overrides
{
	my ($prop, $override) = @@_;
	while (my ($k, $v) = each %$override) {
		$prop->{$k} = $v;
	}
	$sf //= $prop->{sf};
	if (defined $prop->{sf} && $prop->{sf} != $sf) {
		$has_sf = 1;
	}
}

sub has_sf
{
	return $has_sf;
}

sub has_mem
{
	return $has_mem;
}

sub finalize
{
	my $prop = shift;
	$prop->{sf} //= 1;
	$prop->{umask} //= sprintf("0%o", umask);
	if (defined $prop->{stuck}) {
		$prop->{stuck_timeout} = $prop->{stuck} * $prop->{sf};
	}
	if (defined $prop->{mem}) {
		$prop->{memory} = $prop->{mem};
	}
	if (defined $prop->{chroot}) {
		if ($prop->{chroot} eq '/' || $prop->{chroot} eq '') {
			delete $prop->{chroot};
		} else {
		}
	}
	if (defined $prop->{build_user}) {
		$prop->{build_user} = DPB::User->new($prop->{build_user}) 
		    unless ref $prop->{build_user};
	} else {
		if ($prop->{base_user}{uid} != 0) {
			$prop->{build_user} = $prop->{base_user};
		} else {
			$prop->{build_user} = DPB::User->new('_pbuild');
		}
	}
	if (defined $prop->{dirmode}) {
		$prop->{build_user}{dirmode} = oct($prop->{dirmode});
	}
	if (defined $prop->{droppriv}) {
		$prop->{build_user}{droppriv} = $prop->{droppriv};
    	}

	if (defined $prop->{memory}) {
		my $m = $prop->{memory};
		if ($m =~ s/K$//) {
		} elsif ($m =~ s/M$//) {
			$m *= 1024;
		} elsif ($m =~ s/G$//) {
			$m *= 1024 * 1024;
		}
		$prop->{memory} = $m;
		if ($prop->{memory} > 0) {
			$has_mem = 1;
		}
	}
	$prop->{small} //= 120;
	$prop->{small_timeout} = $prop->{small} * $prop->{sf};
	return $prop;
}

sub finalize_with_overrides
{
	my ($self, $overrides) = @@_;
	$self->add_overrides($overrides);
	$self->finalize;
}

sub taint
{
	my ($self, $v) = @@_;
	my $t2 = $v->{info}->has_property('tag');
	if (!defined $t2) {
		return;
	}
	my $t1 = $self->{tainted};
	if (!defined $t1) {
		$self->{tainted} = $t2;
		$self->{tainted_source} = $v->fullpkgpath;
		return;
	}
	if ($t1 ne $t2) {
		DPB::Util->die("Retainting badly:$t2 / $t1 ".
		    $v->fullpkgpath." / ".$self->{tainted_source});
	}
}

sub untaint
{
	my $self = shift;
	delete $self->{tainted};
	delete $self->{tainted_source};
}

sub taint_incompatible
{
	my ($self, $v) = @@_;
	my $t1 = $self->{tainted};

	if (!defined $t1) {
		return undef;
	}
	my $t2 = $v->{info}->has_property('tag');
	if (!defined $t2) {
		return undef;
	}
	if ($t1 eq $t2) {
		return undef;
	}
	return "$t1 vs $t2";
}

1;
@


1.15
log
@Config file handling is still somewhat broken...
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.14 2015/07/02 08:04:22 espie Exp $
a67 3
	if (defined $prop->{chroot_user}) {
		$prop->{build_user} //= $prop->{chroot_user};
	}
d81 1
a81 1
			$prop->{build_user} = $prop->{port_user};
@


1.14
log
@clean-up "force junking": do not prepare a host to be untainted with the
"wrong" port, but instead, create a pseudo-path that is just there to run
junk (will be logged as junk-proxy)

fix a bug in the task handling host locking (no next task -> unlock, duh).

do not log multiple K for several ports on the same basepkgpath.
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.13 2015/06/23 09:01:56 espie Exp $
d81 5
a85 1
		$prop->{build_user} = $prop->{base_user};
@


1.13
log
@repair forced junking
always go thru taint/untaint, so that source should always be correct
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.12 2015/06/23 08:51:53 espie Exp $
d123 1
a123 1
	if (!defined $t1 || $v->{forcejunk}) {
@


1.12
log
@tweak taintedness:
- fix actual bug in PortInfo
- restrict defined tags to !empty tags (shouldn't happen)
- track the source from locks as well.
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.11 2015/06/22 12:19:38 espie Exp $
d123 1
a123 1
	if (!defined $t1) {
@


1.11
log
@move the taint mechanism outside of "main" code.
more stringent checks... there's still a bug somewhere, hope to catch it
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.10 2015/05/12 08:20:08 espie Exp $
d125 1
a125 1
		$self->{tainted_source} = $v;
d129 2
a130 1
		DPB::Util->die("Retainting badly", $self, $v);
@


1.10
log
@avoid creating multiple user objects for the same user
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.9 2015/05/10 08:40:06 espie Exp $
d113 43
@


1.9
log
@compat with old config breaks new config, so ditch it.
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.8 2015/05/02 16:41:20 espie Exp $
d78 2
a79 2
		$prop->{build_user} = 
		    DPB::User->new($prop->{build_user});
@


1.8
log
@add more knobs to handle directory issues under "hostile" circumstances
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.7 2015/05/02 09:44:40 espie Exp $
a56 19
sub set_user
{
	my ($prop, $tag, $default) = @@_;
	my $user = $tag."_user";
	my $mode = $tag."_dirmode";
	if (defined $prop->{$user}) {
		$prop->{$user} = 
		    DPB::User->new($prop->{$user});
	} else {
		$prop->{$user} = $prop->{$default."_user"};
	}
	if (defined $prop->{dirmode}) {
		$prop->{$user}{dirmode} = oct($prop->{dirmode});
	}
	if (defined $prop->{droppriv}) {
		$prop->{$user}{droppriv} = $prop->{droppriv};
    	}
}

d77 12
a88 3
	$prop->set_user('build', 'base');
	$prop->set_user('log', 'build');
	$prop->set_user('fetch', 'build');
@


1.7
log
@move the user handling code to a separate file.
remove "run_as" for open, we can do things directly.

More explicit code on open.
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.6 2015/05/01 19:42:54 espie Exp $
d68 6
@


1.6
log
@lock_user is not needed, defaults to log_user for all practical cases
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.5 2015/05/01 09:03:20 espie Exp $
d22 1
d64 1
a64 1
		    DPB::Id->new($prop->{$user});
@


1.5
log
@slight cleanup
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.4 2015/04/25 11:32:42 espie Exp $
a90 1
	$prop->set_user('lock', 'log');
@


1.4
log
@more users, for later
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.3 2015/04/25 11:23:20 espie Exp $
d56 13
d89 4
a92 24
	if (defined $prop->{build_user}) {
		$prop->{build_user} = 
		    DPB::Id->new($prop->{build_user});
	} else {
		$prop->{build_user} = $prop->{base_user};
	}
	if (defined $prop->{log_user}) {
		$prop->{log_user} =
		    DPB::Id->new($prop->{log_user});
	} else {
		$prop->{log_user} = $prop->{build_user};
	}
	if (defined $prop->{lock_user}) {
		$prop->{lock_user} =
		    DPB::Id->new($prop->{lock_user});
	} else {
		$prop->{lock_user} = $prop->{log_user};
	}
	if (defined $prop->{fetch_user}) {
		$prop->{fetch_user} =
		    DPB::Id->new($prop->{fetch_user});
	} else {
		$prop->{fetch_user} = $prop->{build_user};
	}
@


1.3
log
@a bit of cleanup: building the host properties is totally separate from
building the host (especially ensure overrides/finalize is run together).
Do default handling in a saner way, and use that to get a build_user
(and soon a log_user, a fetch_user).

Add run_as scaffolding to allow logging properly when dpb is run as root
(to be used soon)
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.2 2015/04/21 09:23:57 espie Exp $
d82 19
@


1.2
log
@start reorg the way we handle users.
@
text
@d2 1
a2 1
# $OpenBSD: HostProperties.pm,v 1.1 2014/12/25 15:14:14 espie Exp $
a55 1
my $default_user;
d58 1
a58 1
	my ($class, $prop) = @@_;
d98 7
@


1.1
log
@regorg code, no actual change
@
text
@d2 1
a2 1
# $OpenBSD: Config.pm,v 1.29 2014/04/28 12:51:41 espie Exp $
d68 3
a74 3
			if (!defined $prop->{chroot_user}) {
				$prop->{chroot_user} = $prop->{user};
			}
d76 6
@

