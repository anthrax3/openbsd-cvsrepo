head	1.3;
access;
symbols
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2012.06.19.16.47.06;	author espie;	state dead;
branches;
next	1.2;

1.2
date	2011.11.14.22.12.08;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.05.16.37.50;	author espie;	state Exp;
branches;
next	;


desc
@@


1.3
log
@those have been moved to base/
@
text
@# $OpenBSD: Exec.pm,v 1.2 2011/11/14 22:12:08 jasper Exp $

# Copyright (c) 2007-2010 Steven Mestdagh <steven@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use feature qw(say switch state);

package Exec;

my $dry = 0;
my $verbose = 0;
my $performed = 0;

sub performed
{
	return $performed;
}

sub dry_run
{
	$dry = 1;
}

sub verbose_run
{
	$verbose = 1;
}

sub silent_run
{
	$verbose = 0;
}

sub new
{
	my $class = shift;
	bless {}, $class;
}

sub chdir
{
	my ($self, $dir) = @@_;
	my $class = ref($self) || $self;
	bless {dir => $dir}, $class;
}

sub compile
{
	my ($self, @@l) = @@_;
	$self->command("compile", @@l);	
}

sub execute
{
	my ($self, @@l) = @@_;
	$self->command("execute", @@l);
}

sub install
{
	my ($self, @@l) = @@_;
	$self->command("install", @@l);
}

sub link
{
	my ($self, @@l) = @@_;
	$self->command("link", @@l);
}

sub command_run
{
	my ($self, @@l) = @@_;

	if ($self->{dir}) {
		Trace::print {"cd $self->{dir} && "};
	}
	Trace::print { "@@l\n" };
	my $pid = fork();
	if ($pid == -1) {
		die "Couldn't fork while running @@l\n";
	}
	if ($pid == 0) {
		if ($self->{dir}) {
			CORE::chdir($self->{dir}) or die "Can't chdir to $self->{dir}\n";
		}
		exec(@@l);
		die "Exec failed @@l\n";
	} else {
		my $kid = waitpid($pid, 0);
		if ($? != 0) {
			die "Error while executing @@l\n";
		}
	}
}

sub shell
{
	my ($self, @@cmds) = @@_;
	# create an object "on the run"
	if (!ref($self)) {
		$self = $self->new;
	}
	for my $c (@@cmds) {
		say $c if $verbose || $dry;
		if (!$dry) {
			$self->command_run($c);
	        }
	}
	$performed++;
}

sub command
{
	my ($self, $mode, @@l) = @@_;
	# create an object "on the run"
	if (!ref($self)) {
		$self = $self->new;
	}
	if ($mode eq "compile"){
		say "@@l" if $verbose || $dry;
	} else {
		say "libtool: $mode: @@l" if $verbose || $dry;	
	}
	if (!$dry) {
		$self->command_run(@@l);
	}
	$performed++;
}

1;
@


1.2
log
@ Make output slightly more similar like gnu libtool in various
modes. Simplify Exec->command() a bit too while here as suggested by espie@@

ok espie@@
@
text
@d1 1
a1 1
# $OpenBSD: Exec.pm,v 1.1 2010/12/05 16:37:50 espie Exp $
@


1.1
log
@move most of libtool code around.
@
text
@d1 1
a1 1
# $OpenBSD$
d60 24
d128 1
a128 1
	my ($self, @@l) = @@_;
d133 5
a137 1
	say "@@l" if $verbose || $dry;
d143 1
@

