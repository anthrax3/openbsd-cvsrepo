head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.14
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.12
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.10
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.4
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.2
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.5.0.10
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.8
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.6
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.4
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.2
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3;
locks; strict;
comment	@# @;


1.6
date	2014.03.24.15.18.17;	author afresh1;	state Exp;
branches;
next	1.5;

1.5
date	2011.12.01.11.13.25;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.27.17.31.54;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2010.11.11.12.17.20;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.13.14.38.05;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2010.08.20.15.29.41;	author espie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Lexical $_ fixes in package tools

okay espie@@
@
text
@# $OpenBSD: Recorder.pm,v 1.5 2011/12/01 11:13:25 espie Exp $
# Copyright (c) 2004-2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

# part of check-lib-depends

# Recorder: how we keep track of which binary uses which library
package OpenBSD::Recorder;
sub new
{
	my $class = shift;
	return bless {}, $class;
}

sub reduce_libname
{
	my ($self, $lib) = @@_;
	$lib =~ s/^(.*\/)?lib(.*)\.so\.(\d+)\.\d+$/$2.$3/;
	return $lib;
}

sub libs
{
	my $self = shift;
	return keys %$self;
}

sub record_rpath
{
}

# SimpleRecorder: remember one single binary for each library
package OpenBSD::SimpleRecorder;
our @@ISA = qw(OpenBSD::Recorder);
sub record
{
	my ($self, $lib, $filename) = @@_;
	$self->{$self->reduce_libname($lib)} = $filename;
}

sub binary
{
	my ($self, $lib) = @@_;
	return $self->{$lib};
}

# AllRecorder: remember all binaries for each library
package OpenBSD::AllRecorder;
our @@ISA = qw(OpenBSD::Recorder);
sub record
{
	my ($self, $lib, $filename) = @@_;
	push(@@{$self->{$self->reduce_libname($lib)}}, $filename);
}

sub binaries
{
	my ($self, $lib) = @@_;
	return @@{$self->{$lib}};
}
sub binary
{
	my ($self, $lib) = @@_;
	return $self->{$lib}->[0];
}

sub dump
{
	my ($self, $fh) = @@_;
	for my $lib (sort $self->libs) {
		print $fh "$lib:\t\n";
		for my $binary (sort $self->binaries($lib)) {
			print $fh "\t$binary\n";
		}
	}
}

package OpenBSD::DumpRecorder;
sub new
{
	my $class = shift;
	return bless {}, $class;
}

sub record
{
	my ($self, $lib, $filename) = @@_;
	push(@@{$self->{$filename}->{libs}}, $lib);
}

sub record_rpath
{
	my ($self, $path, $filename) = @@_;
	push(@@{$self->{$filename}->{rpath}}, $path);
}

sub dump
{
	my ($self, $fh) = @@_;
	while (my ($binary, $v) = each %$self) {
		print $fh $binary;
		if (defined $v->{rpath}) {
			print $fh "(", join(':', @@{$v->{rpath}}), ")";
		}
		$v->{libs} //= [];
		print $fh ": ", join(',', @@{$v->{libs}}), "\n";
	}
}

sub libraries
{
	my ($self, $fullname) = @@_;
	if (defined $self->{$fullname} && defined $self->{$fullname}{libs}) {
		return @@{$self->{$fullname}{libs}};
	} else {
		return ();
	}
}

sub rpath
{
	my ($self, $fullname) = @@_;
	if (defined $self->{$fullname} && defined $self->{$fullname}{rpath}) {
		return @@{$self->{$fullname}{rpath}};
	} else {
		return ();
	}
}

sub retrieve
{
	my ($self, $state, $filename) = @@_;
	open(my $fh, '<', $filename) or
	    $state->fatal("Can't read #1: #2", $filename, $!);
	while (my $line = <$fh>) {
		chomp $line;
		if ($line =~ m/^(.*?)\:\s(.*)$/) {
			my ($binary, $libs) = ($1, $2);
			if ($binary =~ m/^(.*)\((.*)\)$/) {
				$binary = $1;
				my @@path = split(':', $2);
				$self->{$binary}{rpath} = \@@path;
			}
			my @@libs = split(/,/, $libs);
			$self->{$binary}{libs}= \@@libs;
		} else {
			$state->errsay("Can't parse #1", $line);
		}
	}
	close $fh;
}

1;
@


1.5
log
@rpath without libs, that's a fun one
@
text
@d1 1
a1 1
# $OpenBSD: Recorder.pm,v 1.4 2011/11/27 17:31:54 espie Exp $
d149 3
a151 4
	my $_;
	while (<$fh>) {
		chomp;
		if (m/^(.*?)\:\s(.*)$/) {
d161 1
a161 1
			$state->errsay("Can't parse #1", $_);
@


1.4
log
@unconfuse naming
@
text
@d1 1
a1 1
# $OpenBSD: Recorder.pm,v 1.3 2010/11/11 12:17:20 espie Exp $
d119 1
@


1.3
log
@fix stupid warnings
@
text
@d1 1
a1 1
# $OpenBSD: Recorder.pm,v 1.2 2010/09/13 14:38:05 espie Exp $
d93 6
a98 1
our @@ISA = qw(OpenBSD::Recorder);
d120 20
@


1.2
log
@saner: always go thru a DumpRecorder, and perform full save/retrieve from
a dump recorder.
@
text
@d1 1
a1 1
# $OpenBSD$
d128 1
a128 1
			if ($binary =~ m/^(.*)\(.*\)$/) {
@


1.1
log
@move a large part of check-lib-depends into separate modules
@
text
@d1 1
a1 1
# $OpenBSD: check-lib-depends,v 1.2 2010/08/20 15:22:21 espie Exp $
d121 1
a121 1
	open(my $fh, '<', $filename) or 
d130 2
d134 1
a134 1
			$self->{$binary}= \@@libs;
@

