head	1.11;
access;
symbols
	OPENBSD_5_7:1.5.0.4
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.2
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.4
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.2
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3;
locks; strict;
comment	@# @;


1.11
date	2015.06.10.09.06.26;	author espie;	state dead;
branches;
next	1.10;
commitid	ZlAd5vdSGFqYIJ4d;

1.10
date	2015.06.08.12.56.26;	author espie;	state Exp;
branches;
next	1.9;
commitid	UcaYGHU4c0oa7PWz;

1.9
date	2015.06.08.10.32.55;	author espie;	state Exp;
branches;
next	1.8;
commitid	I2DUXmoLRD1ECVDm;

1.8
date	2015.06.08.09.39.02;	author espie;	state Exp;
branches;
next	1.7;
commitid	G1apCQPwBez8U118;

1.7
date	2015.06.07.13.01.05;	author espie;	state Exp;
branches;
next	1.6;
commitid	VfNcrOU2zxjWP2BU;

1.6
date	2015.06.07.12.05.53;	author espie;	state Exp;
branches;
next	1.5;
commitid	0b3bGXHNhwo0scAu;

1.5
date	2014.07.19.07.04.42;	author ajacoutot;	state Exp;
branches;
next	1.4;
commitid	oyJYXXJ79PYTnRMX;

1.4
date	2013.01.11.21.21.32;	author rpe;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.17.20.08.08;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.11.11.25.53;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	2011.01.11.11.24.05;	author espie;	state Exp;
branches;
next	;


desc
@@


1.11
log
@bye bye, use check-problems now
@
text
@#!/usr/bin/perl

# $OpenBSD: check-common-dirs,v 1.10 2015/06/08 12:56:26 espie Exp $
# Copyright (c) 2004, 2010 Marc Espie <espie@@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# check all packages in the current directory, and report common directory
# issues

use strict;
use warnings;
my ($ports1);

use FindBin;
BEGIN {
	$ports1 = $ENV{PORTSDIR} || '/usr/ports';
}
use lib ("$ports1/infrastructure/lib", "$FindBin::Bin/../lib");

use File::Spec;
use File::Path;
use File::Basename;
use OpenBSD::Mtree;
use OpenBSD::PlistScanner;

sub register_dir
{
	my ($d, $h) = @@_;
	return if defined $h->{$d};
	$h->{$d} = 1;
	register_dir(dirname($d), $h);
}

package OpenBSD::PackingElement;
sub check_common_dirs
{
}

package OpenBSD::PackingElement::FileBase;
use File::Basename;
sub check_common_dirs
{
	my ($item, $t) = @@_;
	my $d = File::Spec->canonpath($item->fullname);
	main::register_dir(dirname($d), $t->{need_dirs});
}

package OpenBSD::PackingElement::DirlikeObject;
sub check_common_dirs
{
	my ($item, $t) = @@_;
	my $d = File::Spec->canonpath($item->fullname);
	$t->{dirs}->{$d} = 1;
}

package OpenBSD::PackingElement::Dependency;
sub check_common_dirs
{
	my ($item, $t, $o) = @@_;
	$t->{deps}{$item->{def}} = 1;
	$o->{wanted}{$item->{def}} = 1;
}

package CommonDirsScanner;
our @@ISA = (qw(OpenBSD::PlistScanner));
use OpenBSD::PackageInfo;

sub register_plist
{
	my ($self, $plist) = @@_;
	my $pkgname = $plist->pkgname;
	$self->{db}{$pkgname} //= {
		pkgname => $pkgname,
		missing_deps => {},
		dirs => {}, 
		need_dirs => {}, 
		deps => {},
		problems => {}
	};

	$self->{got}{$pkgname} = 1;
	$plist->check_common_dirs($self->{db}{$pkgname}, $self);
}

sub new
{
	my ($class) = @@_;
	my $o = $class->SUPER::new('check-common-dirs');
	$o->{db} = {};
	$o->{mtree} = { 
	    '/usr/local/lib/X11' => 1,
	    '/usr/local/include/X11' => 1,
	    '/usr/local/lib/X11/app-defaults' => 1
	    };
	OpenBSD::Mtree::parse($o->{mtree}, '/', '/etc/mtree/4.4BSD.dist');
	OpenBSD::Mtree::parse($o->{mtree}, '/', '/etc/mtree/BSD.x11.dist');
	return $o;
}


sub display_results
{
	my $self = shift;
	$self->build_results;
	$self->progress->next;
	$self->show_results;
}

sub parent_has_dir
{
	my ($self, $db, $t, $dir) = @@_;

	for my $dep (keys %{$t->{deps}}) {
		if (!defined $db->{$dep}) {
		    if (!defined $self->{missing_deps}{$dep}) {
			    $self->ui->errsay("#1 : #2 not found", $t->{pkgname},
			    	$dep);
			    $self->{missing_deps}{$dep} = 1;
		    }
		    next;
		}
		if ($db->{$dep}->{dirs}->{$dir} || 
		    $self->parent_has_dir($db, $db->{$dep}, $dir)) {
			$t->{dirs}{$dir} = 1;
			return 1;
		}
	}
	return 0;
}

sub parent_has_problem
{
	my ($db, $t, $dir) = @@_;
	for my $dep (keys %{$t->{deps}}) {
		next if !defined $db->{$dep};
		if ($db->{$dep}->{problems}->{$dir}) {
			return 1;
		}
	}
	return 0;
}

sub build_results
{
	my ($self) = @@_;
	my $db = $self->{db};
	my $mtree = $self->{mtree};
	my @@l = keys %$db;

	$self->progress->for_list("Building results", \@@l,
	    sub {
	    	my $pkgname = shift;
		my $t = $db->{$pkgname};
		for my $dir (keys(%{$t->{need_dirs}})) {
			return if $t->{dirs}{$dir};
			return if $mtree->{$dir};
			return if $self->parent_has_dir($db, $t, $dir);
			$t->{problems}{$dir} = 1;
		}
	    });
}

sub show_results
{
	my ($self) = @@_;
	my $db = $self->{db};

	for my $pkgname (sort {$self->fullname($a) cmp $self->fullname($b)}
	    keys %$db) {
		my @@l=();
		my $t = $db->{$pkgname};
		for my $dir (keys %{$t->{problems}}) {
			next if parent_has_problem($db, $t, $dir);
			push(@@l, $dir);
		}
		if (@@l != 0) {
			$self->ui->say("#1: #2", $self->fullname($pkgname), 
			    join(', ', sort @@l));
			if (defined $self->{output}) {
				print {$self->{output}} 
				    $self->fullname($pkgname), ": ", 
				    join(', ', sort @@l), "\n";
			}
		}
	}
}

package main;

my $o = CommonDirsScanner->new;
$o->run;
@


1.10
log
@unified dependency tagging, so that both tools can do dependency closure.
Provide -o output option, which also saves the actual useful output somewhere
@
text
@d3 1
a3 1
# $OpenBSD: check-common-dirs,v 1.9 2015/06/08 10:32:55 espie Exp $
@


1.9
log
@tweak fullname to put the ! (for current packages at the start)
sort things in a more systematic way.
make sure results are displayed after the progress meter is properly
terminated
@
text
@d3 1
a3 1
# $OpenBSD: check-common-dirs,v 1.8 2015/06/08 09:39:02 espie Exp $
d70 1
a70 1
	my ($item, $t) = @@_;
d72 1
d92 2
a93 1
	$plist->check_common_dirs($self->{db}{$pkgname});
d190 5
a196 35
}

sub scan
{
	my $self = shift;
	$self->SUPER::scan;
	$self->progress->set_header("Scanning extra dependencies");
	$self->progress->message("");
	my $notfound = {};
	my $db = $self->{db};
	my $todo;
	do {
		$todo = {};
		for my $pkg (keys %$db) {
			for my $dep (keys %{$db->{$pkg}{deps}}) {
				if (!defined $db->{$dep} && 
				    !defined $notfound->{$dep}) {
					$todo->{$dep} = 1;
				}
			}
		}
		for my $pkgname (keys %$todo) {
			my $true_package = $self->ui->repo->find($pkgname);
			if ($true_package) {
				my $dir = $true_package->info;
				$true_package->close;
				my $plist = OpenBSD::PackingList->fromfile($dir.CONTENTS);
				File::Path::rmtree($dir);
				$self->register_plist($plist);
			} else {
				$notfound->{$pkgname} = 1;
		    }
		}
	} while (keys %$todo > 0);
	$self->progress->next;
@


1.8
log
@use fullname
@
text
@d3 1
a3 1
# $OpenBSD: check-common-dirs,v 1.7 2015/06/07 13:01:05 espie Exp $
d177 2
a178 1
	for my $pkgname (sort keys %$db) {
@


1.7
log
@rmtree doesn't live here
@
text
@d3 1
a3 1
# $OpenBSD: check-common-dirs,v 1.6 2015/06/07 12:05:53 espie Exp $
d71 1
a71 1
	$t->{deps}->{$item->{def}} = 1;
d185 2
a186 1
			$self->ui->say("#1: #2", $pkgname, join(', ', sort @@l));
@


1.6
log
@reuse the plistscanner infra
@
text
@d3 1
a3 1
# $OpenBSD: check-common-dirs,v 1.5 2014/07/19 07:04:42 ajacoutot Exp $
d215 1
a215 1
				rmtree($dir);
@


1.5
log
@No more BSD.local.dist.

reported by richard at aaazen dot com
@
text
@d3 1
a3 1
# $OpenBSD: check-common-dirs,v 1.4 2013/01/11 21:21:32 rpe Exp $
d23 7
a33 2
use OpenBSD::PackageInfo;
use OpenBSD::PackingList;
d35 1
a35 1
use OpenBSD::AddCreateDelete;
d74 3
a76 1
package main;
d78 1
a78 1
sub analyze 
d80 1
a80 1
	my ($plist, $db) = @@_;
d82 1
a82 1
	$db->{$pkgname} //= {
a89 1
	my $t = $db->{$pkgname};
d91 25
a115 1
	$plist->check_common_dirs($t);
d120 1
a120 1
	my ($state, $db, $t, $dir) = @@_;
d124 2
a125 2
		    if (!defined $t->{missing_deps}->{$dep}) {
			    $state->errsay("#1 : #2 not found", $t->{pkgname},
d127 1
a127 1
			    $t->{missing_deps}->{$dep} = 1;
d132 2
a133 2
		    parent_has_dir($state, $db, $db->{$dep}, $dir)) {
			$t->{dirs}->{$dir} = 1;
d154 8
a161 3
	my ($state, $db, $mtree) = @@_;

	for my $pkgname (keys %$db) {
d164 4
a167 4
			next if $t->{dirs}->{$dir};
			next if $mtree->{$dir};
			next if parent_has_dir($state, $db, $t, $dir);
			$t->{problems}->{$dir} = 1;
d169 1
a169 1
	}
d174 2
a175 1
	my ($state, $db, $mtree) = @@_;
d185 1
a185 1
			$state->say("#1: #2", $pkgname, join(', ', sort @@l));
d190 17
a206 38
my $state = OpenBSD::AddCreateDelete::State->new('check-common-dirs');
$state->handle_options('', '[-mx] [pkgname ...]');
if (@@ARGV==0) {
	@@ARGV=(<*.tgz>);
	$state->usage() unless @@ARGV;
}
my $db = {};
my $mtree = {};

OpenBSD::Mtree::parse($mtree, '/', '/etc/mtree/4.4BSD.dist');
OpenBSD::Mtree::parse($mtree, '/', '/etc/mtree/BSD.x11.dist');
$mtree->{'/usr/local/lib/X11'} = 1;
$mtree->{'/usr/local/include/X11'} = 1;
$mtree->{'/usr/local/lib/X11/app-defaults'} = 1;

$state->progress->for_list("Scanning packages", \@@ARGV,
    sub {
    	my $pkgname = shift;
	my $true_package = $state->repo->find($pkgname);
	return unless $true_package;
	my $dir = $true_package->info;
	$true_package->close;
	my $plist = OpenBSD::PackingList->fromfile($dir.CONTENTS);
	rmtree($dir);
	analyze($plist, $db);
    });

$state->progress->set_header("Scanning extra dependencies");
$state->progress->message("");
my $notfound = {};
my $todo;
do {
	$todo = {};
	for my $pkg (keys %$db) {
		for my $dep (keys %{$db->{$pkg}{deps}}) {
			if (!defined $db->{$dep} && 
			    !defined $notfound->{$dep}) {
				$todo->{$dep} = 1;
d209 20
a228 20
	}
	for my $pkgname (keys %$todo) {
		my $true_package = $state->repo->find($pkgname);
		if ($true_package) {
			my $dir = $true_package->info;
			$true_package->close;
			my $plist = OpenBSD::PackingList->fromfile($dir.CONTENTS);
			rmtree($dir);
			analyze($plist, $db);
		} else {
			$notfound->{$pkgname} = 1;
	    }
    	}
} while (keys %$todo > 0);
$state->progress->next;
$state->progress->set_header("Building results");
$state->progress->message("");
build_results($state, $db, $mtree);
$state->progress->next;
show_results($state, $db);
@


1.4
log
@- sync usage text with manpage
- show usage and exit if no pkgnames are listed on cmdline and none
  are found in current directory

ok espie@@
@
text
@d3 1
a3 1
# $OpenBSD: check-common-dirs,v 1.3 2011/01/17 20:08:08 espie Exp $
a162 1
OpenBSD::Mtree::parse($mtree, '/usr/local', '/etc/mtree/BSD.local.dist');
@


1.3
log
@have check-common-dirs find dependencies not specified on the command line
if it can.
@
text
@d3 1
a3 1
# $OpenBSD: check-common-dirs,v 1.2 2011/01/11 11:25:53 espie Exp $
d155 1
a155 1
$state->handle_options('', '[-mx]');
d158 1
@


1.2
log
@print everything thru $state
@
text
@d3 1
a3 1
# $OpenBSD: check-common-dirs,v 1.10 2010/06/30 11:11:19 espie Exp $
d181 30
d212 1
@


1.1
log
@move this too
@
text
@d4 1
a4 1
# Copyright (c) 2004 Marc Espie <espie@@openbsd.org>
d75 1
a75 1
	$db->{$pkgname} = {
d82 1
a82 1
	} unless defined $db->{$pkgname};
d90 1
a90 1
	my ($db, $t, $dir) = @@_;
d95 2
a96 1
			    print $t->{pkgname}, ": $dep not found\n";
d102 1
a102 1
		    parent_has_dir($db, $db->{$dep}, $dir)) {
d124 1
a124 1
	my ($db, $mtree) = @@_;
d131 1
a131 1
			next if parent_has_dir($db, $t, $dir);
d181 1
a181 1
build_results($db, $mtree);
@

